1
00:00:00,000 --> 00:00:05,279
okay Ben Harrigan the x-bow mouths are

2
00:00:05,279 --> 00:00:07,259
going to give you a very good overview

3
00:00:07,259 --> 00:00:09,540
I've been told about crypto failures

4
00:00:09,540 --> 00:00:11,269
please go ahead

5
00:00:11,269 --> 00:00:16,560
hello so my name is jen is with me here

6
00:00:16,560 --> 00:00:19,289
on stages then and we're here to talk to

7
00:00:19,289 --> 00:00:21,750
you today about great cryptographic a

8
00:00:21,750 --> 00:00:25,740
failure now as you all are probably

9
00:00:25,740 --> 00:00:31,380
aware of cryptography has been really

10
00:00:31,380 --> 00:00:33,420
increased in the past few years in the

11
00:00:33,420 --> 00:00:36,300
malware scene more malware is using

12
00:00:36,300 --> 00:00:38,700
cryptography and more malware is using

13
00:00:38,700 --> 00:00:42,180
better cryptography now this sometimes

14
00:00:42,180 --> 00:00:44,610
puts us as Marvel researchers or maillot

15
00:00:44,610 --> 00:00:46,980
analysts in kind of a unpleasant

16
00:00:46,980 --> 00:00:49,079
position we're expected to show

17
00:00:49,079 --> 00:00:51,890
abilities that were usually reserved to

18
00:00:51,890 --> 00:00:53,969
mathematician you know PhDs with

19
00:00:53,969 --> 00:00:56,820
mathematics or crypto analysts and we

20
00:00:56,820 --> 00:00:59,520
hear the terry's days this is usually

21
00:00:59,520 --> 00:01:03,059
not the case you see the bug usually is

22
00:01:03,059 --> 00:01:05,129
not in cryptography but the bug is

23
00:01:05,129 --> 00:01:06,720
usually in the main implemented

24
00:01:06,720 --> 00:01:08,869
cryptography now we've gather up some

25
00:01:08,869 --> 00:01:12,409
examples that we very fine picked and

26
00:01:12,409 --> 00:01:15,630
hopefully we can relate this message by

27
00:01:15,630 --> 00:01:18,720
those examples and just a short

28
00:01:18,720 --> 00:01:22,950
disclaimer before we begin if you find a

29
00:01:22,950 --> 00:01:24,570
cryptographic bug and you go ahead and

30
00:01:24,570 --> 00:01:27,330
publish it then you probably get good PR

31
00:01:27,330 --> 00:01:30,479
but I think or we think that you're

32
00:01:30,479 --> 00:01:31,890
actually doing the wrong thing because

33
00:01:31,890 --> 00:01:34,229
all you're doing is giving the attackers

34
00:01:34,229 --> 00:01:36,479
the model authors all the information

35
00:01:36,479 --> 00:01:38,159
they need in order to fix it and then we

36
00:01:38,159 --> 00:01:40,290
kind of just lose our leverage and

37
00:01:40,290 --> 00:01:43,950
that's not a good thing so we are not

38
00:01:43,950 --> 00:01:45,720
going to show anything new here today

39
00:01:45,720 --> 00:01:47,310
all the examples we're going to show

40
00:01:47,310 --> 00:01:49,890
have already been published or already

41
00:01:49,890 --> 00:01:52,140
being fixed right but it's not the

42
00:01:52,140 --> 00:01:53,850
examples themselves that are important

43
00:01:53,850 --> 00:01:56,100
it's the takeaway and without further

44
00:01:56,100 --> 00:01:58,680
ado I will have then present the first

45
00:01:58,680 --> 00:02:01,579
example thank you

46
00:02:01,579 --> 00:02:04,380
so the first category of script of

47
00:02:04,380 --> 00:02:05,579
failure that we're going to talk about

48
00:02:05,579 --> 00:02:08,220
is good programming now voodoo

49
00:02:08,220 --> 00:02:10,378
programming is programming the stems

50
00:02:10,378 --> 00:02:12,550
from a warm fuzzy feeling you

51
00:02:12,550 --> 00:02:14,800
got the code you're writing right now

52
00:02:14,800 --> 00:02:17,470
since kind of like it could be the right

53
00:02:17,470 --> 00:02:20,290
thing to do possible now some creep

54
00:02:20,290 --> 00:02:22,570
failures completely wreck critical

55
00:02:22,570 --> 00:02:23,860
systems and we'll see some of those

56
00:02:23,860 --> 00:02:26,950
later but some Krupa failures like the

57
00:02:26,950 --> 00:02:28,060
one that we're going to see right now

58
00:02:28,060 --> 00:02:30,460
they not do that much damage what they

59
00:02:30,460 --> 00:02:32,560
do is give us a window into the troubled

60
00:02:32,560 --> 00:02:34,630
paranoid soul of malware developer and

61
00:02:34,630 --> 00:02:36,250
the way that ultimately they have no

62
00:02:36,250 --> 00:02:37,180
idea what you're doing

63
00:02:37,180 --> 00:02:40,300
so let's talk about this it's the

64
00:02:40,300 --> 00:02:42,010
granddaddy of all banking Trojans and it

65
00:02:42,010 --> 00:02:43,780
costs tens of millions of dollars in

66
00:02:43,780 --> 00:02:45,370
damages but we're not here to talk about

67
00:02:45,370 --> 00:02:46,390
any of that

68
00:02:46,390 --> 00:02:48,130
we're here to talk about the way this is

69
00:02:48,130 --> 00:02:50,500
encrypted outgoing traffic to increase

70
00:02:50,500 --> 00:02:52,570
its outgoing traffic Zeus uses something

71
00:02:52,570 --> 00:02:55,060
called RC form it's a strange cipher

72
00:02:55,060 --> 00:02:57,340
invented during the 80s by Ron Rivest

73
00:02:57,340 --> 00:02:59,950
and also for is very popular to use in

74
00:02:59,950 --> 00:03:02,170
my work for two reasons the first reason

75
00:03:02,170 --> 00:03:04,390
is that it's very very easy to implement

76
00:03:04,390 --> 00:03:06,130
if you see that picture up there half

77
00:03:06,130 --> 00:03:09,430
the rc4 logic is already in it and the

78
00:03:09,430 --> 00:03:11,410
second reason RC for so popular to use

79
00:03:11,410 --> 00:03:14,050
the model is that it's good enough you

80
00:03:14,050 --> 00:03:15,880
have heard about the tax on RC for in

81
00:03:15,880 --> 00:03:17,770
specific situations and so forth and so

82
00:03:17,770 --> 00:03:19,690
on but to increase outgoing Malwa

83
00:03:19,690 --> 00:03:22,630
traffic our support should do but you

84
00:03:22,630 --> 00:03:24,760
know this guy's did not agree and for

85
00:03:24,760 --> 00:03:26,709
this they decided to introduce their own

86
00:03:26,709 --> 00:03:29,800
brand new redesign of arc 4 which we

87
00:03:29,800 --> 00:03:34,000
like to call dark for now if you look at

88
00:03:34,000 --> 00:03:35,350
the dance floor and try to spot the

89
00:03:35,350 --> 00:03:36,610
differences soon enough you'll realize

90
00:03:36,610 --> 00:03:38,920
that the only difference between zark

91
00:03:38,920 --> 00:03:42,070
for using Zeus and rc4 is those last two

92
00:03:42,070 --> 00:03:45,100
lines what they do is that once you have

93
00:03:45,100 --> 00:03:47,410
your RC for ciphertext they take each

94
00:03:47,410 --> 00:03:51,280
byte from ciphertext and XOR it with the

95
00:03:51,280 --> 00:03:52,989
next by to produce a new improved

96
00:03:52,989 --> 00:03:56,320
ciphertext now I've told this story by

97
00:03:56,320 --> 00:03:58,660
now to many people and what they all had

98
00:03:58,660 --> 00:04:00,670
in common was their complete lack of a

99
00:04:00,670 --> 00:04:03,370
reaction to that last part which is a

100
00:04:03,370 --> 00:04:05,890
pity I mean guys if you take a

101
00:04:05,890 --> 00:04:06,880
cryptosystem

102
00:04:06,880 --> 00:04:08,560
and to the end of that crystal system

103
00:04:08,560 --> 00:04:10,420
you append a constant linear

104
00:04:10,420 --> 00:04:13,019
transformation you have added zero

105
00:04:13,019 --> 00:04:16,350
security to that crypto system none it's

106
00:04:16,350 --> 00:04:19,029
like relaying your ciphertext in pig

107
00:04:19,029 --> 00:04:23,440
latin completely so we're left with one

108
00:04:23,440 --> 00:04:26,200
question to ask ourselves which is

109
00:04:26,200 --> 00:04:28,660
I I mean if not injected those guys to

110
00:04:28,660 --> 00:04:31,150
do this our burger is a veritable sea of

111
00:04:31,150 --> 00:04:33,220
small we're doing this kind of thing

112
00:04:33,220 --> 00:04:35,440
introducing modifications and tweaks to

113
00:04:35,440 --> 00:04:38,320
crypto that's been known to work so we

114
00:04:38,320 --> 00:04:40,630
can't really read the minds of Marvel

115
00:04:40,630 --> 00:04:43,030
developers but we have a working theory

116
00:04:43,030 --> 00:04:45,100
so let's put ourselves in the shoes of

117
00:04:45,100 --> 00:04:46,570
those guys for a moment

118
00:04:46,570 --> 00:04:48,370
they believe that outer there is this

119
00:04:48,370 --> 00:04:50,800
shady guy wakes up every morning

120
00:04:50,800 --> 00:04:51,790
thinking to himself

121
00:04:51,790 --> 00:04:54,040
me today I am going to read me some Zeus

122
00:04:54,040 --> 00:04:56,800
traffic now this guy has access to a

123
00:04:56,800 --> 00:04:59,020
magic box in this magic box can stare

124
00:04:59,020 --> 00:05:01,090
are supposed ciphertext straight in the

125
00:05:01,090 --> 00:05:02,920
face and decrypt it just like that

126
00:05:02,920 --> 00:05:05,680
without having the key now I can to do

127
00:05:05,680 --> 00:05:07,960
this I'm willing to bet nobody in this

128
00:05:07,960 --> 00:05:09,550
room can do this and probably this

129
00:05:09,550 --> 00:05:13,000
building but this guy can now this guy's

130
00:05:13,000 --> 00:05:15,490
cannot bear to live with this threat so

131
00:05:15,490 --> 00:05:17,620
in their desperation they result in the

132
00:05:17,620 --> 00:05:19,570
only trick they can think off in this

133
00:05:19,570 --> 00:05:22,840
case which is a Jedi mind trick they

134
00:05:22,840 --> 00:05:24,820
extend their hand and say mister agent

135
00:05:24,820 --> 00:05:27,280
this is not the algorithm you're looking

136
00:05:27,280 --> 00:05:29,980
for your magic box works on rc4 and

137
00:05:29,980 --> 00:05:31,960
we're using dark for you see it's

138
00:05:31,960 --> 00:05:33,580
completely different it has this linear

139
00:05:33,580 --> 00:05:35,560
transformation at the end and they

140
00:05:35,560 --> 00:05:37,090
imagine that this guy is now going to

141
00:05:37,090 --> 00:05:38,710
slump in schroeder and go sit in the

142
00:05:38,710 --> 00:05:41,020
corner and cry actually what's going to

143
00:05:41,020 --> 00:05:43,030
happen in this delusional paranoid

144
00:05:43,030 --> 00:05:45,010
fantasy and is that this guy is going to

145
00:05:45,010 --> 00:05:47,080
take 5 minutes to system with her sample

146
00:05:47,080 --> 00:05:49,150
from traffic CAPTCHAs put two and two

147
00:05:49,150 --> 00:05:51,730
together and then apply the inverse

148
00:05:51,730 --> 00:05:54,880
linear transformation right to the dark

149
00:05:54,880 --> 00:05:56,770
for ciphertext and then run his magic

150
00:05:56,770 --> 00:05:59,920
box that we have assumed existed and he

151
00:05:59,920 --> 00:06:02,110
has the Krista the ciphertext and we're

152
00:06:02,110 --> 00:06:04,060
right back where we started actually

153
00:06:04,060 --> 00:06:06,460
that was my price were not right back

154
00:06:06,460 --> 00:06:07,840
where we started because earlier this

155
00:06:07,840 --> 00:06:10,320
guy had a problem he needed to fish out

156
00:06:10,320 --> 00:06:12,910
zeus traffic out from a sea of other

157
00:06:12,910 --> 00:06:14,920
artifact with the traffic which looks to

158
00:06:14,920 --> 00:06:17,260
him just like it but now this is uses

159
00:06:17,260 --> 00:06:19,900
its own unique encryption scheme is our

160
00:06:19,900 --> 00:06:22,480
four and we've just shown that this guy

161
00:06:22,480 --> 00:06:24,880
is capable of the Kryptonite so now all

162
00:06:24,880 --> 00:06:27,460
he has to do is easy pivoting search the

163
00:06:27,460 --> 00:06:29,710
web using his dark for the crypto which

164
00:06:29,710 --> 00:06:32,710
we have just saw and exists and he'll be

165
00:06:32,710 --> 00:06:35,320
able to automatically fish out all the

166
00:06:35,320 --> 00:06:37,690
zeus traffic c'mon so even if we accept

167
00:06:37,690 --> 00:06:38,370
this

168
00:06:38,370 --> 00:06:41,430
delusional coronary the scenario what we

169
00:06:41,430 --> 00:06:43,949
find out is that the Zeus guys try to

170
00:06:43,949 --> 00:06:46,229
disguise their outgoing traffic but in

171
00:06:46,229 --> 00:06:47,760
the end all they managed to do was to

172
00:06:47,760 --> 00:06:51,360
draw more attention to it so next

173
00:06:51,360 --> 00:06:53,010
example we're going to talk about is

174
00:06:53,010 --> 00:06:56,190
Linux encoder noise encoder is the first

175
00:06:56,190 --> 00:06:58,020
reporter grandma for Linux initially

176
00:06:58,020 --> 00:07:00,840
discovered late 2015 and it propagates

177
00:07:00,840 --> 00:07:03,419
90s vulnerability to produce covered at

178
00:07:03,419 --> 00:07:05,310
checkpoints or easily because you care

179
00:07:05,310 --> 00:07:08,100
about that now on the face of it then

180
00:07:08,100 --> 00:07:10,050
you can call the knows how to encrypt it

181
00:07:10,050 --> 00:07:13,350
uses a encryption it uses the CBC mode

182
00:07:13,350 --> 00:07:15,180
of operation so you cannot see the

183
00:07:15,180 --> 00:07:16,110
penguin hmm

184
00:07:16,110 --> 00:07:18,930
and it uses third party open-source

185
00:07:18,930 --> 00:07:21,900
crypto library so the chances for

186
00:07:21,900 --> 00:07:24,419
strange horrible crypto bugs are reduced

187
00:07:24,419 --> 00:07:27,030
here now much like other a number of its

188
00:07:27,030 --> 00:07:28,979
kind when Linux encoder wants to include

189
00:07:28,979 --> 00:07:31,380
the file a bit can file it to generate

190
00:07:31,380 --> 00:07:32,940
the session key in order to perform the

191
00:07:32,940 --> 00:07:34,500
encryption and in order to randomly

192
00:07:34,500 --> 00:07:36,330
generate a session key you need a source

193
00:07:36,330 --> 00:07:39,510
of randomness now if you're on Linux and

194
00:07:39,510 --> 00:07:41,370
you need a random value usually you

195
00:07:41,370 --> 00:07:43,169
would use that random or the view random

196
00:07:43,169 --> 00:07:45,150
but those guys came into it in a very

197
00:07:45,150 --> 00:07:47,160
windows frame of mind so they decided to

198
00:07:47,160 --> 00:07:49,080
use the current timestamp as a source of

199
00:07:49,080 --> 00:07:51,510
randomness now even if you run Windows

200
00:07:51,510 --> 00:07:53,099
that's not the best way to do it but

201
00:07:53,099 --> 00:07:55,560
those guys are themselves ah what the

202
00:07:55,560 --> 00:07:57,360
hell it's probably going to work right

203
00:07:57,360 --> 00:07:59,340
and if you look at the limits in

204
00:07:59,340 --> 00:08:00,780
products you cutable you'll see that one

205
00:08:00,780 --> 00:08:02,460
of the first thing that happens is that

206
00:08:02,460 --> 00:08:05,099
it extracts a seed the random seed based

207
00:08:05,099 --> 00:08:06,780
on the current timestamp and then all

208
00:08:06,780 --> 00:08:08,940
the rest is pseudo randomly generated

209
00:08:08,940 --> 00:08:10,710
from that including all the session keys

210
00:08:10,710 --> 00:08:13,500
so let's recap what we just did

211
00:08:13,500 --> 00:08:15,870
we took the current timestamp we use

212
00:08:15,870 --> 00:08:18,120
this to generate a session key we use

213
00:08:18,120 --> 00:08:19,590
this session key in order to increase

214
00:08:19,590 --> 00:08:21,810
the file we took an encrypted file and

215
00:08:21,810 --> 00:08:24,690
we wrote it to disk so far so good right

216
00:08:24,690 --> 00:08:26,910
where's the catch let's think about this

217
00:08:26,910 --> 00:08:30,060
again we just created a new file this

218
00:08:30,060 --> 00:08:31,919
file has new included content and

219
00:08:31,919 --> 00:08:34,349
another and you think it has is a new

220
00:08:34,349 --> 00:08:37,159
timestamp do you see where this is going

221
00:08:37,159 --> 00:08:39,599
okay well here's a chart to help you do

222
00:08:39,599 --> 00:08:42,630
you see it now what's going to happen

223
00:08:42,630 --> 00:08:45,330
right the user the big thing now has

224
00:08:45,330 --> 00:08:47,130
access to the newly created files as the

225
00:08:47,130 --> 00:08:48,870
new timestamp which is suspiciously

226
00:08:48,870 --> 00:08:50,790
likely all timestamp which can be used

227
00:08:50,790 --> 00:08:51,839
to generate

228
00:08:51,839 --> 00:08:53,880
which can be used to decrease the file

229
00:08:53,880 --> 00:08:56,220
now this is like the villain in the

230
00:08:56,220 --> 00:08:58,560
movie taken contacting their mission and

231
00:08:58,560 --> 00:09:00,750
saying to him we have your daughter I

232
00:09:00,750 --> 00:09:03,120
will never tell you where she is but you

233
00:09:03,120 --> 00:09:04,709
should know that two seconds ago she was

234
00:09:04,709 --> 00:09:07,500
in the hotel lobby I don't know be

235
00:09:07,500 --> 00:09:09,180
ridiculous now

236
00:09:09,180 --> 00:09:11,370
the acutal community of course could not

237
00:09:11,370 --> 00:09:13,560
just stand by idly and let this

238
00:09:13,560 --> 00:09:15,269
excellent design choice pass by without

239
00:09:15,269 --> 00:09:18,540
comment feast your eyes on this the crux

240
00:09:18,540 --> 00:09:21,660
a completely useless advice here right

241
00:09:21,660 --> 00:09:23,820
you won't get any extra security by

242
00:09:23,820 --> 00:09:25,320
rhyming the hash function on the time

243
00:09:25,320 --> 00:09:27,779
but you know the Linux encoder guys they

244
00:09:27,779 --> 00:09:30,120
took one look at this and with sparking

245
00:09:30,120 --> 00:09:33,029
guys they said yes that's what we need

246
00:09:33,029 --> 00:09:35,010
in order to improve our random were more

247
00:09:35,010 --> 00:09:37,890
hashing and soon enough a new and

248
00:09:37,890 --> 00:09:40,019
improved version of Linux encoder came

249
00:09:40,019 --> 00:09:42,990
out which takes the seed and generates a

250
00:09:42,990 --> 00:09:44,730
session key from it by running a hash

251
00:09:44,730 --> 00:09:47,220
function on it a times in succession

252
00:09:47,220 --> 00:09:50,160
eight of course as we all know that

253
00:09:50,160 --> 00:09:52,019
eight times the secure is running the

254
00:09:52,019 --> 00:09:55,529
hash function only just once now to be

255
00:09:55,529 --> 00:09:57,510
completely fair to the Linux and quadra

256
00:09:57,510 --> 00:09:59,550
guys they did fix the original problem

257
00:09:59,550 --> 00:10:02,220
and they made sure that now the new

258
00:10:02,220 --> 00:10:04,079
encrypted files will not have the old

259
00:10:04,079 --> 00:10:06,870
timestamps excuse me we'll have them all

260
00:10:06,870 --> 00:10:08,610
timestamps instead of the time some

261
00:10:08,610 --> 00:10:09,930
tests where they're used in order to

262
00:10:09,930 --> 00:10:12,029
generate the kills something close to it

263
00:10:12,029 --> 00:10:14,970
at any rate and so the old attacker did

264
00:10:14,970 --> 00:10:16,140
not work anymore and this would have

265
00:10:16,140 --> 00:10:17,790
been the end of it except for small

266
00:10:17,790 --> 00:10:20,070
hiccup you see the links recorder guys

267
00:10:20,070 --> 00:10:22,620
they forgot to tell polarize itself what

268
00:10:22,620 --> 00:10:25,410
hash function it should actually use so

269
00:10:25,410 --> 00:10:27,540
we kind of fried and said what okay I

270
00:10:27,540 --> 00:10:29,130
guess then you don't want to use any

271
00:10:29,130 --> 00:10:31,019
hash function so all the eight calls of

272
00:10:31,019 --> 00:10:32,519
the hashing logic don't actually do

273
00:10:32,519 --> 00:10:35,339
anything and this is that

274
00:10:35,339 --> 00:10:37,110
appended to the end of in degree victim

275
00:10:37,110 --> 00:10:39,240
file for verification purposes is

276
00:10:39,240 --> 00:10:41,550
actually equal to the AES key just

277
00:10:41,550 --> 00:10:44,579
needed in order to decrypt the file so

278
00:10:44,579 --> 00:10:46,980
apart from that small technical issue

279
00:10:46,980 --> 00:10:48,570
the ransomware was in excellent

280
00:10:48,570 --> 00:10:50,339
condition from that point on and the

281
00:10:50,339 --> 00:10:52,470
all's well that ends well so what are

282
00:10:52,470 --> 00:10:54,779
our takeaways from those two examples

283
00:10:54,779 --> 00:10:56,850
first of all if your encryption is not

284
00:10:56,850 --> 00:10:59,250
broken don't fix it second of all if

285
00:10:59,250 --> 00:11:00,870
you're up against encryption that's

286
00:11:00,870 --> 00:11:03,329
using the current time in order to

287
00:11:03,329 --> 00:11:05,399
some of its randomness and power follow

288
00:11:05,399 --> 00:11:07,110
the time stamps you might find something

289
00:11:07,110 --> 00:11:09,119
interesting and first of all and most

290
00:11:09,119 --> 00:11:11,009
importantly don't listen to the drugs

291
00:11:11,009 --> 00:11:12,799
because it's probably trying to troll

292
00:11:12,799 --> 00:11:16,860
now the next category for example that

293
00:11:16,860 --> 00:11:18,480
we're going to look at is what we like

294
00:11:18,480 --> 00:11:22,699
to call the copy and paste problem now

295
00:11:22,699 --> 00:11:25,920
I'm sure nobody in this room has ever

296
00:11:25,920 --> 00:11:28,589
copied and pasted code but I heard

297
00:11:28,589 --> 00:11:30,269
something common people sometimes do it

298
00:11:30,269 --> 00:11:33,209
and one example of people doing this is

299
00:11:33,209 --> 00:11:35,579
the quick - defense runs over surface to

300
00:11:35,579 --> 00:11:38,369
run 2014 it's a clone of free to wall if

301
00:11:38,369 --> 00:11:40,470
you look at the random node for click so

302
00:11:40,470 --> 00:11:42,059
defense and the one from wall

303
00:11:42,059 --> 00:11:43,350
will barely be able to notice a

304
00:11:43,350 --> 00:11:46,709
difference I really can now

305
00:11:46,709 --> 00:11:48,720
defense knows on the faces becomes to

306
00:11:48,720 --> 00:11:50,489
perform encryption again it uses public

307
00:11:50,489 --> 00:11:53,850
key encryption grsat 2048 algorithm and

308
00:11:53,850 --> 00:11:56,399
the way it works is that once an

309
00:11:56,399 --> 00:11:57,749
infected machine gets it it generates

310
00:11:57,749 --> 00:12:00,029
two key the private key and public the

311
00:12:00,029 --> 00:12:01,860
public key is used to encrypt difficult

312
00:12:01,860 --> 00:12:03,749
files the private key is then sent over

313
00:12:03,749 --> 00:12:06,029
to the C&C server and now only the C&C

314
00:12:06,029 --> 00:12:08,429
server can perform decryption well

315
00:12:08,429 --> 00:12:10,649
actually if you write in ransomware what

316
00:12:10,649 --> 00:12:12,029
you should do is generate the keys on

317
00:12:12,029 --> 00:12:15,779
the server side so we raise this design

318
00:12:15,779 --> 00:12:18,329
for ransomware two stars out of five but

319
00:12:18,329 --> 00:12:19,679
that's not such a big issue actually

320
00:12:19,679 --> 00:12:21,299
because I've seen runs were make good

321
00:12:21,299 --> 00:12:23,069
money that I would have rated zero stars

322
00:12:23,069 --> 00:12:24,540
out of five well it's not the best

323
00:12:24,540 --> 00:12:26,279
design here and what we have here but

324
00:12:26,279 --> 00:12:28,769
it's a working design and in order to

325
00:12:28,769 --> 00:12:30,839
make this working designer reality the

326
00:12:30,839 --> 00:12:32,669
crypto defense guys needed access to

327
00:12:32,669 --> 00:12:35,879
working implementation of RSA now if you

328
00:12:35,879 --> 00:12:37,769
want to work implementation of our say

329
00:12:37,769 --> 00:12:39,419
the easiest way to do it is through the

330
00:12:39,419 --> 00:12:42,239
windows native cryptographic API or you

331
00:12:42,239 --> 00:12:44,069
could use a third-party wrapper library

332
00:12:44,069 --> 00:12:46,230
but they decided to directly use the

333
00:12:46,230 --> 00:12:47,160
native API

334
00:12:47,160 --> 00:12:48,989
why maybe because it's less bloated

335
00:12:48,989 --> 00:12:50,970
maybe because it grows less attention

336
00:12:50,970 --> 00:12:53,040
maybe just because all the cool kids are

337
00:12:53,040 --> 00:12:55,169
doing it but anyway if you want to

338
00:12:55,169 --> 00:12:56,759
perform encryption using the native

339
00:12:56,759 --> 00:12:58,230
cryptographic API you will need to be

340
00:12:58,230 --> 00:13:01,019
familiar with those three functions the

341
00:13:01,019 --> 00:13:03,389
first of which is crypt acquired context

342
00:13:03,389 --> 00:13:04,829
which we will need to call because of

343
00:13:04,829 --> 00:13:06,809
course this is Windows and you can't do

344
00:13:06,809 --> 00:13:08,790
anything without acquiring a context

345
00:13:08,790 --> 00:13:11,879
first now if we want to invoke this

346
00:13:11,879 --> 00:13:14,100
function properly we'll need to do one

347
00:13:14,100 --> 00:13:16,259
of my favorite things in the whole

348
00:13:16,259 --> 00:13:18,389
while world which is look at the MSDN

349
00:13:18,389 --> 00:13:20,669
documentation now this is all

350
00:13:20,669 --> 00:13:22,739
fascinating stuff but excuse me if I'll

351
00:13:22,739 --> 00:13:25,319
hop over to the function prototype the

352
00:13:25,319 --> 00:13:27,629
first four parameters are pretty easy to

353
00:13:27,629 --> 00:13:29,189
figure out what should go into each one

354
00:13:29,189 --> 00:13:32,040
of them but the last parameter is the

355
00:13:32,040 --> 00:13:34,619
flag parameter okay now hands up

356
00:13:34,619 --> 00:13:37,199
everybody in here knows point-blank to

357
00:13:37,199 --> 00:13:39,089
tell me what should go in the flags

358
00:13:39,089 --> 00:13:43,259
parameter here no hands okay well I

359
00:13:43,259 --> 00:13:45,179
don't know ever which is why we scroll

360
00:13:45,179 --> 00:13:47,220
down to the documentation of the flags

361
00:13:47,220 --> 00:13:49,379
parameter this is my view the

362
00:13:49,379 --> 00:13:51,839
documentation for one slab and not all

363
00:13:51,839 --> 00:13:54,299
of the flags parameter and if we skim it

364
00:13:54,299 --> 00:13:55,859
closely we'll see first of all two

365
00:13:55,859 --> 00:13:57,239
things first of all these flags

366
00:13:57,239 --> 00:14:00,089
parameters should usually be zero but on

367
00:14:00,089 --> 00:14:01,979
the other hand the quick verify context

368
00:14:01,979 --> 00:14:04,199
flag should usually be set which means

369
00:14:04,199 --> 00:14:05,910
that this flag should usually be set to

370
00:14:05,910 --> 00:14:09,389
both zero and not zero now I'm a reverse

371
00:14:09,389 --> 00:14:12,299
engineer not a quantum physicist so I

372
00:14:12,299 --> 00:14:13,889
really don't know what I should do with

373
00:14:13,889 --> 00:14:15,749
this information and at this point I'm

374
00:14:15,749 --> 00:14:17,729
really dazed and confused so I scroll

375
00:14:17,729 --> 00:14:20,069
down some more and by golly I hit the

376
00:14:20,069 --> 00:14:20,519
jackpot

377
00:14:20,519 --> 00:14:23,220
it's a code snippet with a fully phone

378
00:14:23,220 --> 00:14:25,230
call too cryptic wire context that just

379
00:14:25,230 --> 00:14:27,509
works and what's the flag values it's

380
00:14:27,509 --> 00:14:31,350
zero just a zero our confusion is over

381
00:14:31,350 --> 00:14:33,239
and so is the confusion of the crew to

382
00:14:33,239 --> 00:14:35,429
the fence guys because you see they went

383
00:14:35,429 --> 00:14:37,679
through the exact same mental process

384
00:14:37,679 --> 00:14:40,019
that we did just now how do we know this

385
00:14:40,019 --> 00:14:42,209
because this same exact code from the

386
00:14:42,209 --> 00:14:43,589
image there documentation appears

387
00:14:43,589 --> 00:14:46,350
verbatim in their executable right I

388
00:14:46,350 --> 00:14:48,209
personally pulled this out using either

389
00:14:48,209 --> 00:14:50,039
probably just there sitting there word

390
00:14:50,039 --> 00:14:52,709
for word and you see the flag is 0 again

391
00:14:52,709 --> 00:14:55,829
now on the face of it problem solved but

392
00:14:55,829 --> 00:14:57,749
you know I'm starting to get second

393
00:14:57,749 --> 00:14:59,369
thoughts and times of regret I mean we

394
00:14:59,369 --> 00:15:00,959
skipped so much documentation let's

395
00:15:00,959 --> 00:15:03,449
scroll back a bit to the documentation

396
00:15:03,449 --> 00:15:05,669
for the crit verify context flag and if

397
00:15:05,669 --> 00:15:07,589
we do this we'll see that what does this

398
00:15:07,589 --> 00:15:10,589
say when this flag is set temporary

399
00:15:10,589 --> 00:15:12,479
public private keepers can be created

400
00:15:12,479 --> 00:15:14,729
but they are not resisted now we did not

401
00:15:14,729 --> 00:15:17,519
plan the flag we set it to 0 so let us

402
00:15:17,519 --> 00:15:19,199
take the contrapositive of this

403
00:15:19,199 --> 00:15:21,259
statement now when this slab is not set

404
00:15:21,259 --> 00:15:24,119
temporary public private keepers can be

405
00:15:24,119 --> 00:15:27,389
created and they are persisted ok

406
00:15:27,389 --> 00:15:28,790
what does this mean in claiming

407
00:15:28,790 --> 00:15:30,440
it means that the super secret key that

408
00:15:30,440 --> 00:15:32,390
we generated in order to keep away from

409
00:15:32,390 --> 00:15:34,490
the victim so that they will never ever

410
00:15:34,490 --> 00:15:36,170
be able to find it they'll have to pay

411
00:15:36,170 --> 00:15:37,820
as good money in order to get it back a

412
00:15:37,820 --> 00:15:40,100
copy of this key is saved in the

413
00:15:40,100 --> 00:15:42,110
temporary in the persistent key storage

414
00:15:42,110 --> 00:15:44,000
somewhere under their application data

415
00:15:44,000 --> 00:15:45,410
folder ah

416
00:15:45,410 --> 00:15:47,840
I guess that's not exactly what they had

417
00:15:47,840 --> 00:15:50,810
in mind when they wrote this random ER

418
00:15:50,810 --> 00:15:52,940
so what are our takeaways from this

419
00:15:52,940 --> 00:15:55,460
example first of all a less intuitive

420
00:15:55,460 --> 00:15:57,740
API is difficult to reverse engineer but

421
00:15:57,740 --> 00:15:59,510
it was also difficult to work with so

422
00:15:59,510 --> 00:16:01,190
the effort is greater in order to figure

423
00:16:01,190 --> 00:16:03,200
out what the person who wrote the code

424
00:16:03,200 --> 00:16:05,150
was trying to do but the rewards may be

425
00:16:05,150 --> 00:16:06,800
also greater because the person was

426
00:16:06,800 --> 00:16:08,900
working with it was more likely to make

427
00:16:08,900 --> 00:16:11,900
juicy mistakes and second of all if you

428
00:16:11,900 --> 00:16:13,130
got hit by ransomware

429
00:16:13,130 --> 00:16:15,440
go check your temporary key storage

430
00:16:15,440 --> 00:16:17,210
because who knows this might be your

431
00:16:17,210 --> 00:16:18,260
lucky day after all

432
00:16:18,260 --> 00:16:21,380
so without even further ado I'm going to

433
00:16:21,380 --> 00:16:22,780
hand this based on back to anything

434
00:16:22,780 --> 00:16:28,700
thanks then so next category reinventing

435
00:16:28,700 --> 00:16:31,010
the square wheel but I guess this means

436
00:16:31,010 --> 00:16:32,990
no further explanation kind of

437
00:16:32,990 --> 00:16:35,150
self-explanatory so let's jump right

438
00:16:35,150 --> 00:16:38,270
ahead to our first example you're all

439
00:16:38,270 --> 00:16:40,370
probably aware of the petiole ransomware

440
00:16:40,370 --> 00:16:42,320
right it was very popular in the

441
00:16:42,320 --> 00:16:45,200
beginning of 2016 and that is because it

442
00:16:45,200 --> 00:16:47,150
was actually the first runs were to ever

443
00:16:47,150 --> 00:16:50,330
encrypt the MBR so MBR stands for Master

444
00:16:50,330 --> 00:16:52,310
Boot Record right and that means that

445
00:16:52,310 --> 00:16:54,020
this one somewhere did not only takes

446
00:16:54,020 --> 00:16:56,150
your father hostage but it actually took

447
00:16:56,150 --> 00:16:57,920
your entire operating system as hostage

448
00:16:57,920 --> 00:17:00,380
and if you've been infected then after

449
00:17:00,380 --> 00:17:02,810
you bullion computer your computer you

450
00:17:02,810 --> 00:17:05,030
are presented with this very scary red

451
00:17:05,030 --> 00:17:08,359
car ransom note demanding you to pay the

452
00:17:08,359 --> 00:17:10,220
Bitcoin on another computer of course

453
00:17:10,220 --> 00:17:12,530
because yours is completely unusable now

454
00:17:12,530 --> 00:17:16,160
but yeah that's the case and now we were

455
00:17:16,160 --> 00:17:18,440
sitting there and thinking how can we

456
00:17:18,440 --> 00:17:20,720
categorize those guys who are those guys

457
00:17:20,720 --> 00:17:23,030
behind the Petya ransomware we've

458
00:17:23,030 --> 00:17:25,400
actually given this I think bit too much

459
00:17:25,400 --> 00:17:29,240
stuff but then finally it hit us we know

460
00:17:29,240 --> 00:17:31,730
who are those guys you see those guys

461
00:17:31,730 --> 00:17:34,970
are nothing but malware hipsters that's

462
00:17:34,970 --> 00:17:36,920
what they are I mean they like doing

463
00:17:36,920 --> 00:17:39,980
stuff in the unusual way look at the NBR

464
00:17:39,980 --> 00:17:42,090
encryption for example I mean we can

465
00:17:42,090 --> 00:17:44,039
argue whether or not it was good or it

466
00:17:44,039 --> 00:17:46,529
was bad but what we can't argue about is

467
00:17:46,529 --> 00:17:49,169
that this thing was innovative it was

468
00:17:49,169 --> 00:17:50,940
their own it was the first time ever

469
00:17:50,940 --> 00:17:53,220
seen right and the encryption algorithm

470
00:17:53,220 --> 00:17:54,659
was no different

471
00:17:54,659 --> 00:17:56,429
I can't imagine those guys think it

472
00:17:56,429 --> 00:17:57,809
sitting at a table and saying to

473
00:17:57,809 --> 00:17:59,669
themselves you know we're not going to

474
00:17:59,669 --> 00:18:01,740
use any of this common encryption

475
00:18:01,740 --> 00:18:03,539
algorithm any of this capitalistic

476
00:18:03,539 --> 00:18:05,640
encryption algorithms we're going to use

477
00:18:05,640 --> 00:18:07,679
something of our own something unique

478
00:18:07,679 --> 00:18:10,500
something he can't write and since he

479
00:18:10,500 --> 00:18:12,360
can't was they where they were aiming

480
00:18:12,360 --> 00:18:14,399
for there was only one choice for

481
00:18:14,399 --> 00:18:17,100
encryption algorithm which is the sense

482
00:18:17,100 --> 00:18:20,070
of 20 encryption algorithm now if you

483
00:18:20,070 --> 00:18:21,899
haven't heard of it it's okay because as

484
00:18:21,899 --> 00:18:24,120
I said it's pretty hipsterish algorithm

485
00:18:24,120 --> 00:18:27,029
but it it's a stream cipher symmetric

486
00:18:27,029 --> 00:18:30,000
stream cipher and as such it needs to

487
00:18:30,000 --> 00:18:32,159
produce a key stream and the way to do

488
00:18:32,159 --> 00:18:35,130
it in a nutshell it has this struct over

489
00:18:35,130 --> 00:18:37,470
here and destructors this parameters to

490
00:18:37,470 --> 00:18:40,770
it there's a Sigma there's an IV there

491
00:18:40,770 --> 00:18:44,100
is a 16 4 bit stream position and most

492
00:18:44,100 --> 00:18:46,559
importantly the two chunks of 16 bytes

493
00:18:46,559 --> 00:18:49,080
of password right now this entire struck

494
00:18:49,080 --> 00:18:51,419
goes into this very nice mathematical

495
00:18:51,419 --> 00:18:53,220
diagrams it's pretty easy to implement

496
00:18:53,220 --> 00:18:56,730
and product of this is the key stream

497
00:18:56,730 --> 00:19:01,169
that's basically it so now there is one

498
00:19:01,169 --> 00:19:03,120
problem that we're facing now and this

499
00:19:03,120 --> 00:19:04,620
problem is actually a pretty hard

500
00:19:04,620 --> 00:19:06,750
problem it's a problem humanity has been

501
00:19:06,750 --> 00:19:09,149
facing for many years and there doesn't

502
00:19:09,149 --> 00:19:11,279
seem to be a solution for that and that

503
00:19:11,279 --> 00:19:13,409
problem is of course determining how

504
00:19:13,409 --> 00:19:16,080
spicy or salsa is right how can you know

505
00:19:16,080 --> 00:19:20,640
it so we like to tackle big problems

506
00:19:20,640 --> 00:19:22,770
like this and we've actually put some of

507
00:19:22,770 --> 00:19:25,470
our best engineers to tackle this entire

508
00:19:25,470 --> 00:19:29,039
this specific problem and we are now

509
00:19:29,039 --> 00:19:31,620
proud to present for the very first time

510
00:19:31,620 --> 00:19:35,700
our brand-new salsa ohmmeter right so

511
00:19:35,700 --> 00:19:38,220
this thing can sense exactly how spicy

512
00:19:38,220 --> 00:19:40,289
your salsa is and this of course

513
00:19:40,289 --> 00:19:42,240
includes ourselves 420 implementation

514
00:19:42,240 --> 00:19:44,940
and as you can see at the moment this is

515
00:19:44,940 --> 00:19:46,470
like the hottest pepper in the world

516
00:19:46,470 --> 00:19:48,360
it's something you would want to get

517
00:19:48,360 --> 00:19:49,919
mirror without any chemical protection

518
00:19:49,919 --> 00:19:52,830
or stuff like that and let's see how the

519
00:19:52,830 --> 00:19:54,360
petty others helped

520
00:19:54,360 --> 00:19:55,920
to reduce the spiciness of this

521
00:19:55,920 --> 00:20:00,420
algorithm right so first problem if you

522
00:20:00,420 --> 00:20:02,000
remember I talked to you about the

523
00:20:02,000 --> 00:20:05,730
64-bit stream position the Peggy authors

524
00:20:05,730 --> 00:20:07,770
decided to save this in a you gain 32

525
00:20:07,770 --> 00:20:10,560
right so that's practically means that

526
00:20:10,560 --> 00:20:13,230
the four high bytes will be constantly

527
00:20:13,230 --> 00:20:14,910
zero and completely irrelevant to the

528
00:20:14,910 --> 00:20:16,860
entire kitchen generation process right

529
00:20:16,860 --> 00:20:19,970
yeah way to go that you guys

530
00:20:19,970 --> 00:20:22,290
this also means of course says that this

531
00:20:22,290 --> 00:20:24,390
is now on no longer this very hot pepper

532
00:20:24,390 --> 00:20:27,270
but it's another pepper it's pretty hot

533
00:20:27,270 --> 00:20:29,760
still right but the Patek eyes don't

534
00:20:29,760 --> 00:20:31,350
stop there of course and they produce

535
00:20:31,350 --> 00:20:34,410
this failure and what I didn't tell you

536
00:20:34,410 --> 00:20:36,690
is that the central 20 is based on

537
00:20:36,690 --> 00:20:39,030
something collars advocate for PRNG

538
00:20:39,030 --> 00:20:40,650
so what it left is one of the main

539
00:20:40,650 --> 00:20:42,390
functions using the entire algorithm

540
00:20:42,390 --> 00:20:44,370
right and what you see on your left is

541
00:20:44,370 --> 00:20:46,500
the C implementation of rotate left and

542
00:20:46,500 --> 00:20:49,080
in the red box is the pet implementation

543
00:20:49,080 --> 00:20:51,210
and another thing I didn't mention is

544
00:20:51,210 --> 00:20:53,220
that MBR is of course a 16 bits

545
00:20:53,220 --> 00:20:54,750
architecture so they had to shift

546
00:20:54,750 --> 00:20:57,390
everything from 32-bit to 16-bit and

547
00:20:57,390 --> 00:20:59,220
they did this with the arguments of

548
00:20:59,220 --> 00:21:01,920
course but they very conveniently for us

549
00:21:01,920 --> 00:21:04,110
list for her forgot to do it with a

550
00:21:04,110 --> 00:21:06,570
constant right so what you see here on

551
00:21:06,570 --> 00:21:09,480
on the red box is no longer rotate left

552
00:21:09,480 --> 00:21:11,580
it's something I don't know maybe like a

553
00:21:11,580 --> 00:21:14,190
shift left not even that anyway our

554
00:21:14,190 --> 00:21:15,990
salsa meter says that this is no longer

555
00:21:15,990 --> 00:21:18,470
this red hot pepper but now it's like

556
00:21:18,470 --> 00:21:21,660
green pepper still hot but definitely

557
00:21:21,660 --> 00:21:23,750
not as hot as before right and

558
00:21:23,750 --> 00:21:26,430
fortunately for us I bet you guys just

559
00:21:26,430 --> 00:21:29,100
don't stop and they produce this failure

560
00:21:29,100 --> 00:21:31,980
and this we call it salsa as 20 hash

561
00:21:31,980 --> 00:21:34,470
this is the actual core function of the

562
00:21:34,470 --> 00:21:36,090
entire algorithm this is the function

563
00:21:36,090 --> 00:21:37,920
responsible of taking the struct and

564
00:21:37,920 --> 00:21:39,570
producing the key stream and there is a

565
00:21:39,570 --> 00:21:42,510
very serious bug hidden in here can

566
00:21:42,510 --> 00:21:44,160
anybody spot it from just looking at

567
00:21:44,160 --> 00:21:47,430
that let me give you a clue can anybody

568
00:21:47,430 --> 00:21:49,620
spot it now whoa

569
00:21:49,620 --> 00:21:53,130
so again as I said 32 to 16 bit shifts

570
00:21:53,130 --> 00:21:55,920
so what the function is meant to do is

571
00:21:55,920 --> 00:21:58,140
to process 4 bytes at a time and then

572
00:21:58,140 --> 00:22:00,300
jump ahead for by the order to process

573
00:22:00,300 --> 00:22:03,420
the next 4 bytes right and what they the

574
00:22:03,420 --> 00:22:05,880
patty authors did is process 2 bytes and

575
00:22:05,880 --> 00:22:08,340
then jump 4 bytes ahead

576
00:22:08,340 --> 00:22:10,980
so what this means for the algorithm is

577
00:22:10,980 --> 00:22:12,870
that of course that every other two

578
00:22:12,870 --> 00:22:15,420
bytes will be completely unchanged in a

579
00:22:15,420 --> 00:22:17,400
game irrelevant to the entire key strain

580
00:22:17,400 --> 00:22:19,350
generation process so by this single

581
00:22:19,350 --> 00:22:22,250
mistake they managed to reduce the

582
00:22:22,250 --> 00:22:24,810
complexity of this algorithm by half

583
00:22:24,810 --> 00:22:27,390
right and our salsa meter of course says

584
00:22:27,390 --> 00:22:29,190
that this is no longer his green pepper

585
00:22:29,190 --> 00:22:31,350
but now which I don't know it's not even

586
00:22:31,350 --> 00:22:33,180
a pepper or something like a Vasco sauce

587
00:22:33,180 --> 00:22:35,730
right but still the hot kind of

588
00:22:35,730 --> 00:22:38,010
sabbaticals a Tabasco sauce and why am I

589
00:22:38,010 --> 00:22:40,440
saying that because look if we want to

590
00:22:40,440 --> 00:22:42,540
brute force this thing the password

591
00:22:42,540 --> 00:22:44,550
right so first let's get rid of all the

592
00:22:44,550 --> 00:22:46,800
irrelevant bytes here and if you

593
00:22:46,800 --> 00:22:48,780
remember from the bytes left here some

594
00:22:48,780 --> 00:22:50,580
of them are constant values and if you

595
00:22:50,580 --> 00:22:52,140
want to brute-force the password they

596
00:22:52,140 --> 00:22:53,970
are again irrelevant and then we are

597
00:22:53,970 --> 00:22:56,400
just left with 16 password bytes

598
00:22:56,400 --> 00:22:59,700
now brute forcing 16 bytes is still not

599
00:22:59,700 --> 00:23:01,500
a practical thing to do right

600
00:23:01,500 --> 00:23:04,200
luckily for us better guys come to the

601
00:23:04,200 --> 00:23:06,030
rescue and they produce this function

602
00:23:06,030 --> 00:23:07,950
and this function is not even part of

603
00:23:07,950 --> 00:23:09,570
the SATA 20 implementation I have no

604
00:23:09,570 --> 00:23:11,640
idea why it's there but what it does

605
00:23:11,640 --> 00:23:14,820
it's use equal key expand it's used to

606
00:23:14,820 --> 00:23:17,430
represent each password byte with two

607
00:23:17,430 --> 00:23:20,670
bytes instead of one so this means that

608
00:23:20,670 --> 00:23:23,040
instead of brute forcing 16 bytes now we

609
00:23:23,040 --> 00:23:25,050
only need to brute force eight bytes and

610
00:23:25,050 --> 00:23:27,270
if you remember that the user has to

611
00:23:27,270 --> 00:23:29,040
enter this password through his keyboard

612
00:23:29,040 --> 00:23:30,510
then you understand that these are not

613
00:23:30,510 --> 00:23:32,630
only eight bytes but they are eight

614
00:23:32,630 --> 00:23:34,950
printable characters right at which

615
00:23:34,950 --> 00:23:37,110
point our salsa meter suffered from a

616
00:23:37,110 --> 00:23:39,690
sudden crash we're actually still

617
00:23:39,690 --> 00:23:42,420
investigating this fresh but the current

618
00:23:42,420 --> 00:23:44,220
speculation is that this thing is no

619
00:23:44,220 --> 00:23:46,280
longer a salsa but it's some kind of a

620
00:23:46,280 --> 00:23:49,560
cucumber salad or something because of

621
00:23:49,560 --> 00:23:51,150
course broken shortly after this was

622
00:23:51,150 --> 00:23:53,550
discovered so why don't you take away

623
00:23:53,550 --> 00:23:56,250
take away argument types are kind of

624
00:23:56,250 --> 00:23:57,660
important right and whenever a

625
00:23:57,660 --> 00:23:59,610
programmer needs to shift from one

626
00:23:59,610 --> 00:24:02,100
architecture to it to another from 64

627
00:24:02,100 --> 00:24:05,370
and 32 from 32 to 16 then the place to

628
00:24:05,370 --> 00:24:07,440
go and look for bugs would be either the

629
00:24:07,440 --> 00:24:09,750
argument and variable types or the

630
00:24:09,750 --> 00:24:11,370
constant values okay that will be the

631
00:24:11,370 --> 00:24:13,460
first place I would go look for them and

632
00:24:13,460 --> 00:24:15,960
that's it for this example and now our

633
00:24:15,960 --> 00:24:18,390
last example which is not a ransomware

634
00:24:18,390 --> 00:24:21,500
at all it's the nuclear exploit case

635
00:24:21,500 --> 00:24:23,299
you've probably heard of it being very

636
00:24:23,299 --> 00:24:27,110
active between 2011 2016 and actually

637
00:24:27,110 --> 00:24:28,460
it's operation completely ceased

638
00:24:28,460 --> 00:24:30,919
following our very nice I think

639
00:24:30,919 --> 00:24:32,509
publication of it you can go ahead and

640
00:24:32,509 --> 00:24:34,190
read omit the feeling really before and

641
00:24:34,190 --> 00:24:37,940
now when talking about exploit get the

642
00:24:37,940 --> 00:24:40,730
Apple system is very complex right and

643
00:24:40,730 --> 00:24:42,950
it's very complex for a very good reason

644
00:24:42,950 --> 00:24:45,889
because everybody is trying to catch

645
00:24:45,889 --> 00:24:48,200
those guys right and they have to keep

646
00:24:48,200 --> 00:24:51,139
it complex but we're not interested in

647
00:24:51,139 --> 00:24:53,149
this entire ecosystem what we're

648
00:24:53,149 --> 00:24:55,159
interested in is the obstruction of

649
00:24:55,159 --> 00:24:57,139
communication between the victim and the

650
00:24:57,139 --> 00:24:59,240
nucleo panel right which looks something

651
00:24:59,240 --> 00:25:01,519
like this there's an HTTP request being

652
00:25:01,519 --> 00:25:04,639
sent and then the victim is served with

653
00:25:04,639 --> 00:25:07,639
an obfuscated exploit and then a shared

654
00:25:07,639 --> 00:25:10,340
key a key must be shared between the

655
00:25:10,340 --> 00:25:12,620
nuclear panel and the victim in order to

656
00:25:12,620 --> 00:25:15,620
get obfuscated this this exploit the

657
00:25:15,620 --> 00:25:17,210
vulnerabilities figures and you know

658
00:25:17,210 --> 00:25:19,370
what happens next right and what they

659
00:25:19,370 --> 00:25:21,409
did in order to share this key is they

660
00:25:21,409 --> 00:25:23,809
use the PC Hellman key exchange which

661
00:25:23,809 --> 00:25:26,419
you must agree is a pretty smart thing

662
00:25:26,419 --> 00:25:29,990
to do right I was pretty impressed but

663
00:25:29,990 --> 00:25:32,710
let's look at how they did it so ah

664
00:25:32,710 --> 00:25:35,600
first of all if you don't know DC

665
00:25:35,600 --> 00:25:37,009
Hellman I'm not going to tell you how it

666
00:25:37,009 --> 00:25:39,379
works but just know that this is Alice

667
00:25:39,379 --> 00:25:40,909
this is Bob nice to meet you

668
00:25:40,909 --> 00:25:42,649
it's an unsecured channel between them

669
00:25:42,649 --> 00:25:44,029
and they do something that looks like

670
00:25:44,029 --> 00:25:44,629
this

671
00:25:44,629 --> 00:25:46,820
right and at the end of this entire

672
00:25:46,820 --> 00:25:49,279
procedure you get a shared key that's

673
00:25:49,279 --> 00:25:51,879
pretty much it for the C Hellman good

674
00:25:51,879 --> 00:25:54,440
anyway this can be represented by this

675
00:25:54,440 --> 00:25:57,200
very nice mathematical formula that has

676
00:25:57,200 --> 00:25:58,909
to be calculated on the server side

677
00:25:58,909 --> 00:26:01,850
that's basically it for the key homo now

678
00:26:01,850 --> 00:26:03,470
this is how the Peggy authors

679
00:26:03,470 --> 00:26:05,330
implemented this thing and as you see

680
00:26:05,330 --> 00:26:07,789
they just calculated this exact formula

681
00:26:07,789 --> 00:26:09,470
that I just showed you before right and

682
00:26:09,470 --> 00:26:11,480
if you notice there's this function here

683
00:26:11,480 --> 00:26:14,000
the get GMP function that only does is

684
00:26:14,000 --> 00:26:16,250
basically just base64 decode the

685
00:26:16,250 --> 00:26:18,139
parameters passed to it by the victim

686
00:26:18,139 --> 00:26:21,620
right so what can go wrong these are the

687
00:26:21,620 --> 00:26:23,480
parameters being sent from the victim to

688
00:26:23,480 --> 00:26:26,570
the nuclear panel there are JSON format

689
00:26:26,570 --> 00:26:30,500
and can you see anything wrong here so

690
00:26:30,500 --> 00:26:33,139
okay so what's wrong here is the dis

691
00:26:33,139 --> 00:26:35,400
parameters they are not based 64

692
00:26:35,400 --> 00:26:37,580
go to church they're just x-values

693
00:26:37,580 --> 00:26:39,059
whoopsie

694
00:26:39,059 --> 00:26:41,610
so what does this mean for our for our

695
00:26:41,610 --> 00:26:43,440
implementation for their implementation

696
00:26:43,440 --> 00:26:46,440
so if you look at the gauge EMP function

697
00:26:46,440 --> 00:26:48,570
so what happens is basically 40 code

698
00:26:48,570 --> 00:26:50,220
receives something that is not basic

699
00:26:50,220 --> 00:26:52,170
support encoded well it simply returns

700
00:26:52,170 --> 00:26:55,440
false which is in our world zero right

701
00:26:55,440 --> 00:26:58,110
and what happens next if you look at

702
00:26:58,110 --> 00:27:00,840
this function so the GNP values get zero

703
00:27:00,840 --> 00:27:03,600
making the PA 0 the AE gets a zero value

704
00:27:03,600 --> 00:27:05,970
making the a a zero so zero to the power

705
00:27:05,970 --> 00:27:09,240
of B modulo zero which just so happens

706
00:27:09,240 --> 00:27:11,340
to be the exact equivalent of the entire

707
00:27:11,340 --> 00:27:14,010
efficiency of this entire key exchange

708
00:27:14,010 --> 00:27:18,750
which is yes you guessed it zero so way

709
00:27:18,750 --> 00:27:23,250
to go nuclear guides very nicely code so

710
00:27:23,250 --> 00:27:24,840
now just to summarize everything with

711
00:27:24,840 --> 00:27:27,030
form sentence if you consider

712
00:27:27,030 --> 00:27:28,950
cryptography to be a magic black box

713
00:27:28,950 --> 00:27:30,990
than either used on understand

714
00:27:30,990 --> 00:27:33,390
cryptography or it doesn't understand

715
00:27:33,390 --> 00:27:35,940
here these are some thanks and credits

716
00:27:35,940 --> 00:27:37,920
for other guys doing research on the

717
00:27:37,920 --> 00:27:48,300
same subject and thank you very much any

718
00:27:48,300 --> 00:27:51,179
question yeah we have about two minutes

719
00:27:51,179 --> 00:27:53,450
left for one or two questions

720
00:27:53,450 --> 00:27:59,780
quick though related of course anybody

721
00:28:02,240 --> 00:28:06,179
everything is clear exactly so let's

722
00:28:06,179 --> 00:28:10,100
think together then and Yanni's

