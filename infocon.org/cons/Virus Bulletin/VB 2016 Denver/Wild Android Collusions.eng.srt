1
00:00:00,000 --> 00:00:01,620
morning everyone and welcome to this

2
00:00:01,620 --> 00:00:04,140
first session for virus Bolton the title

3
00:00:04,140 --> 00:00:05,670
of the first presentation is wild

4
00:00:05,670 --> 00:00:07,859
Android collusion presented by Jane

5
00:00:07,859 --> 00:00:10,139
Blasco okay

6
00:00:10,139 --> 00:00:15,269
thank you so well as I said my name is

7
00:00:15,269 --> 00:00:18,270
in Spanish Horace oh but you can call me

8
00:00:18,270 --> 00:00:20,160
your show wherever you want but it's

9
00:00:20,160 --> 00:00:23,010
better for you and I come from City

10
00:00:23,010 --> 00:00:24,869
University in London and I'm going to

11
00:00:24,869 --> 00:00:27,779
present this paper that we did with also

12
00:00:27,779 --> 00:00:29,699
into security at and Swansea University

13
00:00:29,699 --> 00:00:32,969
but before that I would like to mention

14
00:00:32,969 --> 00:00:35,969
where this paper comes from so we were

15
00:00:35,969 --> 00:00:37,800
working for a two years in what we call

16
00:00:37,800 --> 00:00:39,210
the acid project this is a project

17
00:00:39,210 --> 00:00:41,340
funded by the EPS are seen in the UK and

18
00:00:41,340 --> 00:00:42,690
it was a collaborative effort between

19
00:00:42,690 --> 00:00:46,350
City so NC into security as an industry

20
00:00:46,350 --> 00:00:48,600
partner but also a comment to university

21
00:00:48,600 --> 00:00:51,329
they were involved in in this paper but

22
00:00:51,329 --> 00:00:53,489
it's both acknowledged

23
00:00:53,489 --> 00:00:55,410
acknowledging them so and the goal of

24
00:00:55,410 --> 00:00:57,719
this project was to make sure develop a

25
00:00:57,719 --> 00:01:00,270
new methods to attack and track the

26
00:01:00,270 --> 00:01:01,920
possible I could say emerging threat of

27
00:01:01,920 --> 00:01:06,360
of colluding applications so as a small

28
00:01:06,360 --> 00:01:07,979
introduction I mean you would probably

29
00:01:07,979 --> 00:01:10,400
all of you would probably know that but

30
00:01:10,400 --> 00:01:12,990
the main security goals of Android are

31
00:01:12,990 --> 00:01:14,850
well and it has mainly three security

32
00:01:14,850 --> 00:01:16,890
goals first one is obviously protect the

33
00:01:16,890 --> 00:01:18,960
user and it's Annie and his data or her

34
00:01:18,960 --> 00:01:20,820
data then protect the apps that are

35
00:01:20,820 --> 00:01:22,500
installed on the device and the system

36
00:01:22,500 --> 00:01:24,630
resources that are like battery and

37
00:01:24,630 --> 00:01:26,250
obviously finally protect the device

38
00:01:26,250 --> 00:01:29,159
itself and in order to do so it has many

39
00:01:29,159 --> 00:01:31,470
different security features and the ones

40
00:01:31,470 --> 00:01:33,270
that I met you here the ones that are at

41
00:01:33,270 --> 00:01:36,229
the device level so you have most of the

42
00:01:36,229 --> 00:01:38,490
Linux derive security features like

43
00:01:38,490 --> 00:01:40,549
process isolation monitor access control

44
00:01:40,549 --> 00:01:43,740
we have also apps unboxing we are also

45
00:01:43,740 --> 00:01:45,960
the famous or maybe famous permission

46
00:01:45,960 --> 00:01:48,689
system security API is like encryption

47
00:01:48,689 --> 00:01:52,500
credential stories etc and we also have

48
00:01:52,500 --> 00:01:54,960
the depth assignment within in Android

49
00:01:54,960 --> 00:01:58,229
is not like use like in other platforms

50
00:01:58,229 --> 00:02:00,750
such as iOS but it's but do you have it

51
00:02:00,750 --> 00:02:03,270
there also and the main point that I

52
00:02:03,270 --> 00:02:04,320
want to make this is that all these

53
00:02:04,320 --> 00:02:06,719
security features features are meant to

54
00:02:06,719 --> 00:02:08,250
avoid the threads that are caused by

55
00:02:08,250 --> 00:02:09,780
single applications but what happened

56
00:02:09,780 --> 00:02:10,919
when applications start communicating

57
00:02:10,919 --> 00:02:14,040
each other so we have

58
00:02:14,040 --> 00:02:16,530
many different ways of communicating

59
00:02:16,530 --> 00:02:18,120
many different things we can do well

60
00:02:18,120 --> 00:02:19,650
communicating the first thing we can do

61
00:02:19,650 --> 00:02:22,260
is just cooperate like two apps just

62
00:02:22,260 --> 00:02:24,989
simply exchange messages to do something

63
00:02:24,989 --> 00:02:27,030
that is useful for the user so let's say

64
00:02:27,030 --> 00:02:28,859
you want to share your location with a

65
00:02:28,859 --> 00:02:30,750
whatsapp contact or you have to you want

66
00:02:30,750 --> 00:02:32,640
to share the location on Facebook you

67
00:02:32,640 --> 00:02:35,189
just tap the share button on the Google

68
00:02:35,189 --> 00:02:37,769
Maps app and that creates an intent that

69
00:02:37,769 --> 00:02:39,450
sends the location information to

70
00:02:39,450 --> 00:02:42,030
another app you select that location

71
00:02:42,030 --> 00:02:43,200
information goes to the Internet but

72
00:02:43,200 --> 00:02:46,230
it's because you wanted it's not that

73
00:02:46,230 --> 00:02:48,120
they are exchanging that information

74
00:02:48,120 --> 00:02:50,639
without your consent then we have

75
00:02:50,639 --> 00:02:51,840
another kind of communication with

76
00:02:51,840 --> 00:02:53,790
squiggle permissions with litigation

77
00:02:53,790 --> 00:02:57,180
attacks and more general outside the

78
00:02:57,180 --> 00:02:58,709
Android context we call these kind of

79
00:02:58,709 --> 00:03:00,209
attacks that confuse the police attacks

80
00:03:00,209 --> 00:03:03,230
and in this case we have two apps or

81
00:03:03,230 --> 00:03:05,939
more than two apps but one of quar app

82
00:03:05,939 --> 00:03:09,090
is developed by I would say a careless

83
00:03:09,090 --> 00:03:11,250
developer that I created a component

84
00:03:11,250 --> 00:03:13,109
inside the app to access a sensitive

85
00:03:13,109 --> 00:03:14,579
resource let's say for example the

86
00:03:14,579 --> 00:03:16,439
camera of the device but the problem is

87
00:03:16,439 --> 00:03:18,209
that that developer didn't protect

88
00:03:18,209 --> 00:03:21,780
didn't protect that results very well so

89
00:03:21,780 --> 00:03:24,540
other apps can imagine the developer

90
00:03:24,540 --> 00:03:26,040
does it on a service the thing is that

91
00:03:26,040 --> 00:03:29,909
perhaps if the developer doesn't enforce

92
00:03:29,909 --> 00:03:32,370
other apps when requesting the the

93
00:03:32,370 --> 00:03:34,169
access to the service to use specific

94
00:03:34,169 --> 00:03:36,479
permissions other apps will be able to

95
00:03:36,479 --> 00:03:38,430
access a systemic resource without

96
00:03:38,430 --> 00:03:40,019
actually requesting the permission and

97
00:03:40,019 --> 00:03:42,780
that obviously creates risks for the

98
00:03:42,780 --> 00:03:46,019
users but what happens if instead of

99
00:03:46,019 --> 00:03:48,599
having a Curless developer and some apps

100
00:03:48,599 --> 00:03:52,079
exploiting that vulnerability in the

101
00:03:52,079 --> 00:03:54,629
application we have two apps that do

102
00:03:54,629 --> 00:03:56,970
that on purpose we would have something

103
00:03:56,970 --> 00:03:59,909
more or less like this so imagine you

104
00:03:59,909 --> 00:04:03,959
have let's say an app that portraits

105
00:04:03,959 --> 00:04:07,010
itself as an Audi Notes app so you could

106
00:04:07,010 --> 00:04:10,079
use the app to record notes let's say

107
00:04:10,079 --> 00:04:12,180
for example and that obably has access

108
00:04:12,180 --> 00:04:15,359
to the microphone and the user has also

109
00:04:15,359 --> 00:04:17,459
delivered another app in the device

110
00:04:17,459 --> 00:04:19,649
which portraits itself as a weather

111
00:04:19,649 --> 00:04:22,108
application but the point is that these

112
00:04:22,108 --> 00:04:25,979
two apps do more than they say they do

113
00:04:25,979 --> 00:04:28,020
so the first up there

114
00:04:28,020 --> 00:04:29,400
because it has access to the microphone

115
00:04:29,400 --> 00:04:31,290
it also records the user conversations

116
00:04:31,290 --> 00:04:33,570
and it uses any of the available

117
00:04:33,570 --> 00:04:35,070
communication channels in Android to

118
00:04:35,070 --> 00:04:37,290
send those conversations to the full

119
00:04:37,290 --> 00:04:39,480
application that having access to the

120
00:04:39,480 --> 00:04:40,800
Internet is able to export that

121
00:04:40,800 --> 00:04:43,020
information outside so depending on the

122
00:04:43,020 --> 00:04:45,750
communication channel use there's no way

123
00:04:45,750 --> 00:04:50,220
by Android to enforce or to avoid this

124
00:04:50,220 --> 00:04:52,770
kind of behavior the apps and another

125
00:04:52,770 --> 00:04:54,240
point is that the user would do loading

126
00:04:54,240 --> 00:04:56,070
the applications and when applications

127
00:04:56,070 --> 00:04:57,960
are requesting the permissions he

128
00:04:57,960 --> 00:04:59,280
doesn't know if these two apps will

129
00:04:59,280 --> 00:05:01,350
communicate so he is not able or she is

130
00:05:01,350 --> 00:05:03,300
not able to take an informed decision

131
00:05:03,300 --> 00:05:05,190
when he's studying or when granting

132
00:05:05,190 --> 00:05:07,050
access to the different permissions for

133
00:05:07,050 --> 00:05:11,310
the apps so when analyzing this problem

134
00:05:11,310 --> 00:05:15,050
you know profound that the most

135
00:05:15,050 --> 00:05:16,760
important of the most

136
00:05:16,760 --> 00:05:19,290
lesyk key factors of app collusion

137
00:05:19,290 --> 00:05:21,630
actual first the communication channels

138
00:05:21,630 --> 00:05:24,120
which I will reveal later and secondly

139
00:05:24,120 --> 00:05:26,670
the threats that can be enabled by the

140
00:05:26,670 --> 00:05:28,980
collision attack and what are the

141
00:05:28,980 --> 00:05:31,140
threats that can be enabled by clean as

142
00:05:31,140 --> 00:05:33,720
well mostly the same threats the single

143
00:05:33,720 --> 00:05:37,020
application could could see first one

144
00:05:37,020 --> 00:05:38,550
the one that is so information theft

145
00:05:38,550 --> 00:05:40,710
very simple in wannabe steals

146
00:05:40,710 --> 00:05:42,390
information sends it to the other

147
00:05:42,390 --> 00:05:43,800
application and your application sends

148
00:05:43,800 --> 00:05:45,440
it outside but then we can have

149
00:05:45,440 --> 00:05:48,390
colluding upsets that could maybe try to

150
00:05:48,390 --> 00:05:51,750
steal money from the user maybe by still

151
00:05:51,750 --> 00:05:54,920
in his or her credentials also maybe by

152
00:05:54,920 --> 00:05:58,340
by making phone calls or sending SMSs

153
00:05:58,340 --> 00:06:02,010
messages then we could have also clean

154
00:06:02,010 --> 00:06:04,080
apps that do service misuse analysis but

155
00:06:04,080 --> 00:06:06,660
we could have also other kind of threat

156
00:06:06,660 --> 00:06:08,640
or a good sale a kind of attack in which

157
00:06:08,640 --> 00:06:10,770
different applications synchronize

158
00:06:10,770 --> 00:06:14,850
themself to actually achieve like a the

159
00:06:14,850 --> 00:06:18,150
highest possible goal or the highest

160
00:06:18,150 --> 00:06:20,430
possible gain for the malware developer

161
00:06:20,430 --> 00:06:23,670
and and the case we found and has to do

162
00:06:23,670 --> 00:06:26,670
with this attack synchronization so we

163
00:06:26,670 --> 00:06:28,280
know that some applications could be

164
00:06:28,280 --> 00:06:30,510
communicating to execute some threats

165
00:06:30,510 --> 00:06:33,240
but how they can communicate well and

166
00:06:33,240 --> 00:06:36,419
there are many different communication

167
00:06:36,419 --> 00:06:38,669
channels on Android the main problem of

168
00:06:38,669 --> 00:06:40,080
the other communication channels between

169
00:06:40,080 --> 00:06:41,370
applications

170
00:06:41,370 --> 00:06:46,800
that some of them do not really need to

171
00:06:46,800 --> 00:06:50,100
go let's say or to ask for any kind of

172
00:06:50,100 --> 00:06:51,690
permission in Android so if we want to

173
00:06:51,690 --> 00:06:53,610
use intents to apps can communicate

174
00:06:53,610 --> 00:06:55,760
through intents without the user knowing

175
00:06:55,760 --> 00:06:58,410
we could use also content providers for

176
00:06:58,410 --> 00:06:59,610
communication in and the content

177
00:06:59,610 --> 00:07:01,050
providers will prolly you will know that

178
00:07:01,050 --> 00:07:03,840
but I like a small databases with inside

179
00:07:03,840 --> 00:07:05,520
Android and the most common content

180
00:07:05,520 --> 00:07:06,780
provider I would say is the contacts

181
00:07:06,780 --> 00:07:08,490
database but if you want to use the

182
00:07:08,490 --> 00:07:09,870
contact database for up communication

183
00:07:09,870 --> 00:07:12,150
you need to ask for permissions we could

184
00:07:12,150 --> 00:07:14,220
also use external storage but again we

185
00:07:14,220 --> 00:07:15,870
need could need to ask for permissions

186
00:07:15,870 --> 00:07:17,820
and in some versions of Android we could

187
00:07:17,820 --> 00:07:19,440
use the services which are a kind of

188
00:07:19,440 --> 00:07:21,180
communication channel that I will

189
00:07:21,180 --> 00:07:23,789
explain just in a bit and you will see

190
00:07:23,789 --> 00:07:25,729
that intense and server preferences are

191
00:07:25,729 --> 00:07:28,289
involved because those are the channels

192
00:07:28,289 --> 00:07:31,050
we analyzed when we executed or when we

193
00:07:31,050 --> 00:07:33,479
did our research that iodine will

194
00:07:33,479 --> 00:07:34,860
display later and then we could have

195
00:07:34,860 --> 00:07:38,430
also some hidden or covert communication

196
00:07:38,430 --> 00:07:40,500
channels in android probably you are not

197
00:07:40,500 --> 00:07:42,090
aware of this but all applications can

198
00:07:42,090 --> 00:07:44,190
read and modify the other settings of an

199
00:07:44,190 --> 00:07:45,840
android device with other question any

200
00:07:45,840 --> 00:07:48,120
specific permissions so if your

201
00:07:48,120 --> 00:07:50,070
application wants to send information to

202
00:07:50,070 --> 00:07:52,139
another application what they could do

203
00:07:52,139 --> 00:07:53,550
is one of the applications could

204
00:07:53,550 --> 00:07:56,400
modulate the value of the volume setting

205
00:07:56,400 --> 00:07:58,620
and the other application Welman

206
00:07:58,620 --> 00:08:00,210
monitoring that value could read

207
00:08:00,210 --> 00:08:02,490
different bytes obviously this is not a

208
00:08:02,490 --> 00:08:04,560
high bandwidth channel but it is

209
00:08:04,560 --> 00:08:06,419
something you could use and you don't

210
00:08:06,419 --> 00:08:07,789
need to request any kind of permission

211
00:08:07,789 --> 00:08:10,169
obviously again you need obviously to

212
00:08:10,169 --> 00:08:12,240
check if the user is listening to music

213
00:08:12,240 --> 00:08:13,560
or doing some things because the user is

214
00:08:13,560 --> 00:08:15,030
listening to music and the volume starts

215
00:08:15,030 --> 00:08:18,479
going up and down it will be a kind of a

216
00:08:18,479 --> 00:08:20,550
strange behavior there are also many

217
00:08:20,550 --> 00:08:25,050
other hidden covered channels and most

218
00:08:25,050 --> 00:08:26,910
of them are the kind of covered channels

219
00:08:26,910 --> 00:08:28,979
that exist in many other platform or

220
00:08:28,979 --> 00:08:31,410
computer systems so we can use

221
00:08:31,410 --> 00:08:33,330
enumeration of processes and sockets

222
00:08:33,330 --> 00:08:35,130
we can also modulate the free space on

223
00:08:35,130 --> 00:08:37,620
the RAM or all the storage we could also

224
00:08:37,620 --> 00:08:39,479
modulate the usage of the CPU to send

225
00:08:39,479 --> 00:08:43,580
information to to other processes so

226
00:08:43,580 --> 00:08:45,720
regarding the third preferences this is

227
00:08:45,720 --> 00:08:47,940
the channel egg we found that was being

228
00:08:47,940 --> 00:08:49,380
used by applications and I want to

229
00:08:49,380 --> 00:08:51,720
explain it a little bit before going

230
00:08:51,720 --> 00:08:55,269
further so sir preferences is kind of

231
00:08:55,269 --> 00:08:58,660
it's a way of historian key-value person

232
00:08:58,660 --> 00:09:00,790
persistence towards on the device and

233
00:09:00,790 --> 00:09:02,980
it's very simple to use and it's widely

234
00:09:02,980 --> 00:09:06,850
used mostly to store application as the

235
00:09:06,850 --> 00:09:10,269
name says preferences so he just if the

236
00:09:10,269 --> 00:09:12,129
developer wants to create a sir

237
00:09:12,129 --> 00:09:15,339
preference file he has needs to create

238
00:09:15,339 --> 00:09:16,720
an instance of a shared preference

239
00:09:16,720 --> 00:09:20,740
object and call the gate sir preferences

240
00:09:20,740 --> 00:09:22,360
method from the context of the

241
00:09:22,360 --> 00:09:25,059
application the developer only needs to

242
00:09:25,059 --> 00:09:27,069
provide two variables the first one is

243
00:09:27,069 --> 00:09:28,809
the file name where the preference will

244
00:09:28,809 --> 00:09:30,970
be stored and the second one is the mode

245
00:09:30,970 --> 00:09:33,339
and this is the interesting one because

246
00:09:33,339 --> 00:09:35,529
the mode of the sir preference file can

247
00:09:35,529 --> 00:09:38,800
be private meaning that know how no

248
00:09:38,800 --> 00:09:41,259
other apps can access it but it could

249
00:09:41,259 --> 00:09:44,259
also be more readable or work rights at

250
00:09:44,259 --> 00:09:48,189
all and in this case apps could access

251
00:09:48,189 --> 00:09:51,309
that file from obviously outside the

252
00:09:51,309 --> 00:09:53,139
sandbox without requesting any specific

253
00:09:53,139 --> 00:09:56,399
permission the good news is that this

254
00:09:56,399 --> 00:09:59,589
renege writing outside the sandbox only

255
00:09:59,589 --> 00:10:01,329
works on versions of Android that do not

256
00:10:01,329 --> 00:10:06,220
have easy Linux on a forcing mode so up

257
00:10:06,220 --> 00:10:10,209
to date I saw the yesterday how the

258
00:10:10,209 --> 00:10:12,369
different versions of Android are now

259
00:10:12,369 --> 00:10:15,069
and these would affect only 25% of the

260
00:10:15,069 --> 00:10:18,459
devices so if we want to read a value

261
00:10:18,459 --> 00:10:20,589
from the from the shared preferences we

262
00:10:20,589 --> 00:10:22,990
just called from the object we have

263
00:10:22,990 --> 00:10:26,519
called get the kind of data tab we want

264
00:10:26,519 --> 00:10:28,779
specifying the key and a default value

265
00:10:28,779 --> 00:10:31,299
in case that key is not found if we just

266
00:10:31,299 --> 00:10:34,600
want to write a value into the third

267
00:10:34,600 --> 00:10:36,399
preferences we just creates an editor

268
00:10:36,399 --> 00:10:38,410
and we it's more or less the same

269
00:10:38,410 --> 00:10:39,790
instead of calling the gate we call a

270
00:10:39,790 --> 00:10:42,249
put with the different data type the key

271
00:10:42,249 --> 00:10:45,069
and the value we want to store but this

272
00:10:45,069 --> 00:10:48,519
is what we need to do if we want to read

273
00:10:48,519 --> 00:10:51,129
or write into or inside or an

274
00:10:51,129 --> 00:10:52,540
application but what happens if we want

275
00:10:52,540 --> 00:10:55,149
to read the sir personal files from

276
00:10:55,149 --> 00:10:57,399
applications for different applications

277
00:10:57,399 --> 00:10:59,230
so the only thing we need to do is we

278
00:10:59,230 --> 00:11:02,799
need to create a context object we can't

279
00:11:02,799 --> 00:11:05,319
create an account X objects from any

280
00:11:05,319 --> 00:11:06,850
other context and the only thing when

281
00:11:06,850 --> 00:11:08,530
it's provide is the package name

282
00:11:08,530 --> 00:11:11,620
with that we will only need to call from

283
00:11:11,620 --> 00:11:13,870
that context object we will need to call

284
00:11:13,870 --> 00:11:14,920
again the gate server preferences

285
00:11:14,920 --> 00:11:18,010
specifying the file name and in this

286
00:11:18,010 --> 00:11:18,880
case were little

287
00:11:18,880 --> 00:11:21,670
org or writable method and we just need

288
00:11:21,670 --> 00:11:24,070
to again call the get the specific data

289
00:11:24,070 --> 00:11:25,840
type or put specific data type with an

290
00:11:25,840 --> 00:11:28,240
editor you want to save or store

291
00:11:28,240 --> 00:11:32,290
information so and no inter

292
00:11:32,290 --> 00:11:33,550
communication channels no in the

293
00:11:33,550 --> 00:11:38,140
possible threats what we did was to

294
00:11:38,140 --> 00:11:41,410
develop an approach by using static

295
00:11:41,410 --> 00:11:45,040
analysis analysis what we did is we took

296
00:11:45,040 --> 00:11:49,870
a data set from Intel security and we

297
00:11:49,870 --> 00:11:52,150
start analysis to strike mainly the

298
00:11:52,150 --> 00:11:53,740
permissions used by the applications and

299
00:11:53,740 --> 00:11:55,870
then the communication channels and by

300
00:11:55,870 --> 00:11:57,910
communication channels I mean as I said

301
00:11:57,910 --> 00:12:01,360
before the intents mostly broadcast

302
00:12:01,360 --> 00:12:04,300
intents stuck with also the static and

303
00:12:04,300 --> 00:12:07,540
dynamic in broadcast receivers and also

304
00:12:07,540 --> 00:12:10,630
how applications were used we're using

305
00:12:10,630 --> 00:12:15,010
the server preferences files what we did

306
00:12:15,010 --> 00:12:17,320
after that is that we use Prolog I don't

307
00:12:17,320 --> 00:12:20,740
know well maybe some of you don't know

308
00:12:20,740 --> 00:12:22,570
that some of you maybe studied this a

309
00:12:22,570 --> 00:12:25,630
long time ago we use product rules with

310
00:12:25,630 --> 00:12:28,660
cell logic programming language and we

311
00:12:28,660 --> 00:12:31,960
started we first codified all the

312
00:12:31,960 --> 00:12:33,880
features we extracted from the apps as

313
00:12:33,880 --> 00:12:35,620
Prolog facts and then we started in

314
00:12:35,620 --> 00:12:37,660
writing some rules some of them as the

315
00:12:37,660 --> 00:12:40,320
ones you see here were used to qualified

316
00:12:40,320 --> 00:12:43,000
certain actions so for example if an app

317
00:12:43,000 --> 00:12:45,990
was using and the read contact

318
00:12:45,990 --> 00:12:48,610
permission and we would say that data

319
00:12:48,610 --> 00:12:51,010
had access to sensitive information if

320
00:12:51,010 --> 00:12:53,140
an acquisition descending or the send

321
00:12:53,140 --> 00:12:55,600
SMS permission we would say that data

322
00:12:55,600 --> 00:12:58,120
could be used to charge the user some

323
00:12:58,120 --> 00:13:00,430
money and so on with all the permissions

324
00:13:00,430 --> 00:13:04,360
and we also I created some rules to

325
00:13:04,360 --> 00:13:06,280
specify how applications could collude

326
00:13:06,280 --> 00:13:09,460
so for example you see a very simple

327
00:13:09,460 --> 00:13:11,200
rule here it's that if the application

328
00:13:11,200 --> 00:13:13,360
one has access to certain information

329
00:13:13,360 --> 00:13:15,940
if application to has out sex to the

330
00:13:15,940 --> 00:13:18,370
outside and if application one

331
00:13:18,370 --> 00:13:20,230
communicates with application to good

332
00:13:20,230 --> 00:13:22,810
have a possible

333
00:13:22,810 --> 00:13:25,040
collusion between application run an

334
00:13:25,040 --> 00:13:31,430
application shop so with this we use

335
00:13:31,430 --> 00:13:34,430
prologue queries to find potential

336
00:13:34,430 --> 00:13:36,470
including upsets like for example when

337
00:13:36,470 --> 00:13:38,120
you see there we just called like

338
00:13:38,120 --> 00:13:39,890
colluding this is a simplification of

339
00:13:39,890 --> 00:13:41,810
the actual code but I think it's useful

340
00:13:41,810 --> 00:13:44,270
to see how it works we ask all colluding

341
00:13:44,270 --> 00:13:46,040
with package name and it will give us

342
00:13:46,040 --> 00:13:49,700
all the possible application that could

343
00:13:49,700 --> 00:13:51,530
be colluding with the application we

344
00:13:51,530 --> 00:13:54,290
could provide as I said we use a data

345
00:13:54,290 --> 00:13:57,170
set provided by in the security and the

346
00:13:57,170 --> 00:14:00,650
last apk in the desert in that the set

347
00:14:00,650 --> 00:14:04,880
was collected on February 2016 and we

348
00:14:04,880 --> 00:14:06,770
found we found many interesting things

349
00:14:06,770 --> 00:14:09,290
but what we did is we focused on how

350
00:14:09,290 --> 00:14:10,640
applications were using server

351
00:14:10,640 --> 00:14:11,990
preferences because share preferences

352
00:14:11,990 --> 00:14:14,180
are not I would say a standard

353
00:14:14,180 --> 00:14:16,250
communication channel in hundred

354
00:14:16,250 --> 00:14:17,840
applications no one uses cell

355
00:14:17,840 --> 00:14:19,670
preferences because you have many other

356
00:14:19,670 --> 00:14:22,210
better methods to communicate between

357
00:14:22,210 --> 00:14:25,040
hundred applications and we found two

358
00:14:25,040 --> 00:14:27,890
things first there were many many

359
00:14:27,890 --> 00:14:30,980
applications that were using well most

360
00:14:30,980 --> 00:14:32,660
of the things we found were inside

361
00:14:32,660 --> 00:14:34,790
libraries that were being imported by

362
00:14:34,790 --> 00:14:36,710
application some of them advertising

363
00:14:36,710 --> 00:14:38,300
libraries some of them other kind of

364
00:14:38,300 --> 00:14:40,520
libraries and we found that there were

365
00:14:40,520 --> 00:14:42,260
many applications that were generating a

366
00:14:42,260 --> 00:14:45,500
unique device ID and we're sharing that

367
00:14:45,500 --> 00:14:47,420
device ID through shared preferences

368
00:14:47,420 --> 00:14:49,550
with many other applications this

369
00:14:49,550 --> 00:14:52,790
obviously implies it's it's I would say

370
00:14:52,790 --> 00:14:53,930
it's a kind of coalition that put up

371
00:14:53,930 --> 00:14:55,220
with the privacy of the user because

372
00:14:55,220 --> 00:14:56,900
they can track which applications are

373
00:14:56,900 --> 00:14:58,850
installed on the same device and that

374
00:14:58,850 --> 00:15:00,470
can be used for advertisement

375
00:15:00,470 --> 00:15:06,200
advertisement advertisement targeting

376
00:15:06,200 --> 00:15:07,850
and things like that and the other thing

377
00:15:07,850 --> 00:15:09,589
that was interesting that we found is

378
00:15:09,589 --> 00:15:11,330
that there were many applications that

379
00:15:11,330 --> 00:15:13,430
were using a specific SDK that were

380
00:15:13,430 --> 00:15:16,220
storing a specific number inside

381
00:15:16,220 --> 00:15:18,350
different servers files so we

382
00:15:18,350 --> 00:15:20,630
investigated further and what we found

383
00:15:20,630 --> 00:15:25,670
is that all those applications were

384
00:15:25,670 --> 00:15:28,190
embedding what is called the malleus SDK

385
00:15:28,190 --> 00:15:29,990
this is the K is developed and

386
00:15:29,990 --> 00:15:31,700
maintained by Baidu and there was a

387
00:15:31,700 --> 00:15:34,220
Malaysian version that Trend Micro

388
00:15:34,220 --> 00:15:35,660
discovered in November

389
00:15:35,660 --> 00:15:38,449
20:15 the behavior of the malicious

390
00:15:38,449 --> 00:15:41,449
version was actually really interesting

391
00:15:41,449 --> 00:15:45,560
because the the SDK what it did is among

392
00:15:45,560 --> 00:15:48,500
many other things it also was able to

393
00:15:48,500 --> 00:15:50,690
create a command and control will abort

394
00:15:50,690 --> 00:15:54,230
inside the inside the app instance

395
00:15:54,230 --> 00:15:56,810
sitting in a service an HTTP server that

396
00:15:56,810 --> 00:15:59,449
would be able to receive commands from a

397
00:15:59,449 --> 00:16:01,339
command control server it will also

398
00:16:01,339 --> 00:16:02,660
allow the command console server to

399
00:16:02,660 --> 00:16:05,060
request for users asset information if

400
00:16:05,060 --> 00:16:07,130
the app was part of the system image it

401
00:16:07,130 --> 00:16:08,449
will allow the command and control

402
00:16:08,449 --> 00:16:12,380
server to install app silently and it

403
00:16:12,380 --> 00:16:15,350
will also allow the the command go to

404
00:16:15,350 --> 00:16:18,110
server we don't know exactly why but it

405
00:16:18,110 --> 00:16:19,550
could a lot of common observer to gripe

406
00:16:19,550 --> 00:16:21,709
contacts on the contact database this

407
00:16:21,709 --> 00:16:23,509
all these things were found by by do and

408
00:16:23,509 --> 00:16:25,850
what we found is that all the apps

409
00:16:25,850 --> 00:16:27,430
including the Baidu

410
00:16:27,430 --> 00:16:30,380
disorder Mobile SDK we're having this

411
00:16:30,380 --> 00:16:31,459
estranged behavior with the server

412
00:16:31,459 --> 00:16:35,509
purposes at what we found is that well

413
00:16:35,509 --> 00:16:38,959
before that most of the results would I

414
00:16:38,959 --> 00:16:41,959
would say maybe academic research on on

415
00:16:41,959 --> 00:16:43,550
application collusion is based on

416
00:16:43,550 --> 00:16:45,620
sensitive information flows but this is

417
00:16:45,620 --> 00:16:48,259
not the case of of the Maloof SDK and

418
00:16:48,259 --> 00:16:51,399
what they did basically where the

419
00:16:51,399 --> 00:16:54,550
different apps embedding the Mobile SDK

420
00:16:54,550 --> 00:16:57,680
we're using the server preferences as a

421
00:16:57,680 --> 00:16:59,889
communication channel to select a leader

422
00:16:59,889 --> 00:17:01,880
to communicate with the command and

423
00:17:01,880 --> 00:17:04,039
control server so the idea is that this

424
00:17:04,039 --> 00:17:06,380
is the K was embedded into many

425
00:17:06,380 --> 00:17:08,809
different applications with access or

426
00:17:08,809 --> 00:17:11,299
with many different levels of access to

427
00:17:11,299 --> 00:17:13,880
the system and the apps we will will be

428
00:17:13,880 --> 00:17:16,459
talking to each other to see which was

429
00:17:16,459 --> 00:17:19,159
the app with more access to a system so

430
00:17:19,159 --> 00:17:21,650
that could be the app connecting to the

431
00:17:21,650 --> 00:17:23,900
command and control server and receiving

432
00:17:23,900 --> 00:17:27,349
their the commands so how does that work

433
00:17:27,349 --> 00:17:29,600
well so in my team we have three

434
00:17:29,600 --> 00:17:31,669
different apps all under sandbox and

435
00:17:31,669 --> 00:17:33,470
obviously all of them having them up

436
00:17:33,470 --> 00:17:34,940
Lucius decay the first thing all of the

437
00:17:34,940 --> 00:17:38,179
apps do when they execute is they do

438
00:17:38,179 --> 00:17:39,770
some checks and they they save a

439
00:17:39,770 --> 00:17:43,010
priority value on a sarafina's file the

440
00:17:43,010 --> 00:17:45,200
name of the server preferences files is

441
00:17:45,200 --> 00:17:48,830
always the package name plus a suffix

442
00:17:48,830 --> 00:17:49,500
cookies

443
00:17:49,500 --> 00:17:53,520
passing okay and how is that priority

444
00:17:53,520 --> 00:17:56,430
value calculated well this is a method

445
00:17:56,430 --> 00:17:57,770
inside

446
00:17:57,770 --> 00:18:02,180
by the SDK it's a beautiful skated and

447
00:18:02,180 --> 00:18:04,470
basically there were many different

448
00:18:04,470 --> 00:18:07,500
takes depending on how that sag went you

449
00:18:07,500 --> 00:18:09,870
will have a different value added to

450
00:18:09,870 --> 00:18:12,690
Assam that was then saved to that share

451
00:18:12,690 --> 00:18:15,180
preference file the first text where

452
00:18:15,180 --> 00:18:20,130
just manifest tax so the app or by said

453
00:18:20,130 --> 00:18:22,500
the SDK could look into the app manifest

454
00:18:22,500 --> 00:18:25,050
to check for different meta tags inside

455
00:18:25,050 --> 00:18:26,880
the manifest it would check if they have

456
00:18:26,880 --> 00:18:28,950
was developed by Baidu and many other

457
00:18:28,950 --> 00:18:30,870
different things and depending of those

458
00:18:30,870 --> 00:18:34,620
values it could save it could add a

459
00:18:34,620 --> 00:18:36,870
different parity value then and that

460
00:18:36,870 --> 00:18:40,350
would check if it was able to get into

461
00:18:40,350 --> 00:18:42,090
the contacts database and in that case

462
00:18:42,090 --> 00:18:43,950
it would add an additional priority

463
00:18:43,950 --> 00:18:47,220
value and finally the app could check if

464
00:18:47,220 --> 00:18:49,290
it was part of the system image so the

465
00:18:49,290 --> 00:18:50,820
nice thing about all these checks is

466
00:18:50,820 --> 00:18:54,510
that the first checks give the priority

467
00:18:54,510 --> 00:18:57,150
value a little bump but the last ones

468
00:18:57,150 --> 00:19:00,210
make the parity value grow a lot so

469
00:19:00,210 --> 00:19:02,010
depending on the kind of checks that

470
00:19:02,010 --> 00:19:03,900
were true the parity value will increase

471
00:19:03,900 --> 00:19:07,710
a lot depending on obviously the app was

472
00:19:07,710 --> 00:19:10,350
inside the system image the parity good

473
00:19:10,350 --> 00:19:12,810
into is a lot more than if there was

474
00:19:12,810 --> 00:19:16,860
just a matter tag found and so what the

475
00:19:16,860 --> 00:19:20,550
apps did with this so they saved again

476
00:19:20,550 --> 00:19:22,380
the same before that they save the

477
00:19:22,380 --> 00:19:24,180
parity value into a SERP reference file

478
00:19:24,180 --> 00:19:27,690
and after that what they did is all the

479
00:19:27,690 --> 00:19:30,000
apps including the mobile sdk grid with

480
00:19:30,000 --> 00:19:32,550
all the other preference files and only

481
00:19:32,550 --> 00:19:35,400
the service of the app with the highest

482
00:19:35,400 --> 00:19:38,250
priority value would be launched in the

483
00:19:38,250 --> 00:19:41,280
the service including the connection to

484
00:19:41,280 --> 00:19:42,870
the command and control server so in

485
00:19:42,870 --> 00:19:45,780
these great the apps were able to let's

486
00:19:45,780 --> 00:19:49,470
say optimize their attack into using the

487
00:19:49,470 --> 00:19:51,210
app that has most access to the system

488
00:19:51,210 --> 00:19:54,060
resources so this is just how the apps

489
00:19:54,060 --> 00:19:56,130
were iterating

490
00:19:56,130 --> 00:19:58,980
to check the server preference file to

491
00:19:58,980 --> 00:20:00,990
look for the highest priority value and

492
00:20:00,990 --> 00:20:03,480
then an intent could be great

493
00:20:03,480 --> 00:20:06,570
and lastly that they intend could be

494
00:20:06,570 --> 00:20:07,740
launched and interesting thing here is

495
00:20:07,740 --> 00:20:09,780
that all the previous interns that

496
00:20:09,780 --> 00:20:12,330
called that service would be canceled

497
00:20:12,330 --> 00:20:13,830
because we're gonna let the malware

498
00:20:13,830 --> 00:20:17,280
developers or let's say the malicious

499
00:20:17,280 --> 00:20:19,290
developers that embedded that injected

500
00:20:19,290 --> 00:20:20,850
that code into the map loss SDK

501
00:20:20,850 --> 00:20:23,070
only wanted the app with the highest

502
00:20:23,070 --> 00:20:25,880
access to the system to be executed

503
00:20:25,880 --> 00:20:31,020
so yes concluding the first thing how

504
00:20:31,020 --> 00:20:35,690
these things can be fired forth first

505
00:20:35,690 --> 00:20:37,470
probably it would be interesting to

506
00:20:37,470 --> 00:20:39,630
develop collusion detection methods at

507
00:20:39,630 --> 00:20:41,940
market authorized level and in order to

508
00:20:41,940 --> 00:20:43,770
develop this well we think that it would

509
00:20:43,770 --> 00:20:45,510
be interesting to check how apps use the

510
00:20:45,510 --> 00:20:46,650
different communication channels that

511
00:20:46,650 --> 00:20:49,560
they have then it would be interesting

512
00:20:49,560 --> 00:20:53,010
to if Android had a system to enforce or

513
00:20:53,010 --> 00:20:54,900
to check how apps communicate to each

514
00:20:54,900 --> 00:20:59,060
other I know that at some point Android

515
00:20:59,060 --> 00:21:01,500
implemented a kind of intent firewall

516
00:21:01,500 --> 00:21:04,380
but it's not been used so applications

517
00:21:04,380 --> 00:21:06,390
can use intense and broadcast intents

518
00:21:06,390 --> 00:21:08,970
freely and the user doesn't get any kind

519
00:21:08,970 --> 00:21:10,230
of notification when two apps are

520
00:21:10,230 --> 00:21:13,800
communicating and obviously the third

521
00:21:13,800 --> 00:21:15,570
part is it's just an obvious thing just

522
00:21:15,570 --> 00:21:17,730
be careful developers should be careful

523
00:21:17,730 --> 00:21:19,830
when they are embedding through party

524
00:21:19,830 --> 00:21:21,270
libraries because they should be knowing

525
00:21:21,270 --> 00:21:22,830
what they are bearing on their apps not

526
00:21:22,830 --> 00:21:24,570
only because of collusion but because

527
00:21:24,570 --> 00:21:27,330
you can insert into Europe many many

528
00:21:27,330 --> 00:21:30,780
different malicious behaviors signal

529
00:21:30,780 --> 00:21:34,890
inclusions first different interrupt

530
00:21:34,890 --> 00:21:36,450
complications introduced risk has

531
00:21:36,450 --> 00:21:38,610
different risks and the problem in

532
00:21:38,610 --> 00:21:41,970
Android at least right now is that it's

533
00:21:41,970 --> 00:21:43,620
not possible the user is not aware of

534
00:21:43,620 --> 00:21:46,020
how absurd communicating and how apps

535
00:21:46,020 --> 00:21:48,780
are exchanging data and the user is mean

536
00:21:48,780 --> 00:21:50,400
he's aware of the permissions that every

537
00:21:50,400 --> 00:21:52,470
author of the apps has but he's not

538
00:21:52,470 --> 00:21:54,720
aware of how these apps communicate and

539
00:21:54,720 --> 00:21:57,240
sell information we also saw that a

540
00:21:57,240 --> 00:21:59,210
specific kind of collusion is possible

541
00:21:59,210 --> 00:22:01,800
again and bring third-party libraries

542
00:22:01,800 --> 00:22:03,930
and can be dangerous and sometimes it's

543
00:22:03,930 --> 00:22:06,480
dangerous and the good news is that at

544
00:22:06,480 --> 00:22:07,800
the moment we only found this kind of

545
00:22:07,800 --> 00:22:09,450
synchronization attacks we didn't found

546
00:22:09,450 --> 00:22:12,360
any kind of sensitive information or

547
00:22:12,360 --> 00:22:14,340
information theft attacks which in

548
00:22:14,340 --> 00:22:17,430
collusion but we don't know if

549
00:22:17,430 --> 00:22:20,400
there could be more apps having these

550
00:22:20,400 --> 00:22:22,230
kind of behaviors because we haven't

551
00:22:22,230 --> 00:22:24,870
been able to analyze lots a lot of

552
00:22:24,870 --> 00:22:27,930
different apps and that's it thank you

553
00:22:27,930 --> 00:22:30,050
for

