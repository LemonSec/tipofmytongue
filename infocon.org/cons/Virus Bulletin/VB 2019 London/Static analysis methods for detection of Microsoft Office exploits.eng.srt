1
00:00:00,030 --> 00:00:03,540
take your seats please actually always

2
00:00:03,540 --> 00:00:05,580
want to know a little bit more about

3
00:00:05,580 --> 00:00:08,490
exploits and I think this could be an

4
00:00:08,490 --> 00:00:10,019
interesting presentation about that

5
00:00:10,019 --> 00:00:13,410
Chintan the room is yours okay

6
00:00:13,410 --> 00:00:17,070
so in this session we are basically

7
00:00:17,070 --> 00:00:18,779
going to talk about the static analysis

8
00:00:18,779 --> 00:00:20,820
methods for production of Microsoft

9
00:00:20,820 --> 00:00:26,130
Office exploits a quick introduction of

10
00:00:26,130 --> 00:00:26,910
the speaker

11
00:00:26,910 --> 00:00:31,199
I kind of have 14 years of experience

12
00:00:31,199 --> 00:00:33,030
when network security industry currently

13
00:00:33,030 --> 00:00:35,489
working with McAfee IPS research team

14
00:00:35,489 --> 00:00:38,450
and passionate about researching

15
00:00:38,450 --> 00:00:41,250
targeted attacks covered multiple of

16
00:00:41,250 --> 00:00:44,010
them in the past encode multiple rocket

17
00:00:44,010 --> 00:00:45,360
attacks with the government organization

18
00:00:45,360 --> 00:00:47,969
in the past work with them as well and I

19
00:00:47,969 --> 00:00:51,270
I primarily focus on fuzzing quality

20
00:00:51,270 --> 00:00:53,399
research imagining exploits and

21
00:00:53,399 --> 00:00:55,320
developing detection solutions for

22
00:00:55,320 --> 00:00:58,680
McAfee products and second times we

23
00:00:58,680 --> 00:01:00,059
could add Virus Bulletin thanks to the

24
00:01:00,059 --> 00:01:05,600
organizing team to give this opportunity

25
00:01:06,110 --> 00:01:10,020
so the agenda of for today will be I'll

26
00:01:10,020 --> 00:01:11,939
just quickly walk walk you through the

27
00:01:11,939 --> 00:01:15,780
office threat landscape and a quick walk

28
00:01:15,780 --> 00:01:19,110
through to the vulnerabilities exploited

29
00:01:19,110 --> 00:01:21,450
and in the middle of the session I'll

30
00:01:21,450 --> 00:01:25,310
give up give us suggestions or

31
00:01:25,310 --> 00:01:28,229
suggestions to detect the Microsoft

32
00:01:28,229 --> 00:01:30,450
Office exploits what kind of static

33
00:01:30,450 --> 00:01:33,570
analysis can be used over the Microsoft

34
00:01:33,570 --> 00:01:35,520
Office exploit Microsoft Office files

35
00:01:35,520 --> 00:01:38,670
without much of the much without

36
00:01:38,670 --> 00:01:40,860
worrying much about the unabated details

37
00:01:40,860 --> 00:01:44,220
and we'll talk about the supervised

38
00:01:44,220 --> 00:01:47,070
learning for macro classification and to

39
00:01:47,070 --> 00:01:49,500
the end ends of end of the session I'll

40
00:01:49,500 --> 00:01:53,159
briefly go through the block diagram of

41
00:01:53,159 --> 00:01:55,979
the engine which is implemented which

42
00:01:55,979 --> 00:01:57,930
has been tested over the wider set of

43
00:01:57,930 --> 00:02:00,840
exploits and will conclude this session

44
00:02:00,840 --> 00:02:03,329
with the initial results that we saw

45
00:02:03,329 --> 00:02:07,320
over over the exploits that we tested so

46
00:02:07,320 --> 00:02:09,959
this slide just covers some of the

47
00:02:09,959 --> 00:02:12,300
prominent Microsoft Office threats that

48
00:02:12,300 --> 00:02:13,319
we found

49
00:02:13,319 --> 00:02:15,980
that we had over the past few years and

50
00:02:15,980 --> 00:02:18,810
which basically signifies on how

51
00:02:18,810 --> 00:02:21,299
Microsoft Office threat says has evolved

52
00:02:21,299 --> 00:02:23,010
over the past few years and has been

53
00:02:23,010 --> 00:02:25,739
exploited in the wild right so this are

54
00:02:25,739 --> 00:02:27,299
some of the exploits which has been used

55
00:02:27,299 --> 00:02:29,849
in targeted attacks and has been very

56
00:02:29,849 --> 00:02:32,510
very significant in in in in their

57
00:02:32,510 --> 00:02:36,750
impact so this is sourced out of

58
00:02:36,750 --> 00:02:39,530
Kaspersky earlier this year which

59
00:02:39,530 --> 00:02:43,709
basically just describes the the shift

60
00:02:43,709 --> 00:02:46,560
the significant shift in the in the

61
00:02:46,560 --> 00:02:49,709
tagging at that tiger at platform so we

62
00:02:49,709 --> 00:02:52,409
see that in in 2015-16 time frame

63
00:02:52,409 --> 00:02:55,260
browsers where were kind of targeted the

64
00:02:55,260 --> 00:02:59,849
most and later half of later 2018 and

65
00:02:59,849 --> 00:03:03,150
probably during the early 2019 70% of

66
00:03:03,150 --> 00:03:04,590
the exploits were targeted towards the

67
00:03:04,590 --> 00:03:06,930
Microsoft Office so there was

68
00:03:06,930 --> 00:03:10,919
significant shift to to the targeted

69
00:03:10,919 --> 00:03:16,349
platform quickly going through the evil

70
00:03:16,349 --> 00:03:18,569
own abilities exploited so what types of

71
00:03:18,569 --> 00:03:20,359
Fullerton page that is exploited in

72
00:03:20,359 --> 00:03:22,769
Microsoft Office prominently they are

73
00:03:22,769 --> 00:03:24,959
passed parsing engine flaws which which

74
00:03:24,959 --> 00:03:26,879
prominent it predominantly relates to

75
00:03:26,879 --> 00:03:30,120
the RTF filters so RTF is is is most of

76
00:03:30,120 --> 00:03:31,949
you would have seen it is pretty complex

77
00:03:31,949 --> 00:03:34,199
structure with with lot of nested

78
00:03:34,199 --> 00:03:36,180
formatting controls right there there

79
00:03:36,180 --> 00:03:38,190
are controls to perform at format your

80
00:03:38,190 --> 00:03:41,069
text format your paragraphs and from at

81
00:03:41,069 --> 00:03:45,359
your images videos embedding objects in

82
00:03:45,359 --> 00:03:46,919
lot of lot of them right so it is pretty

83
00:03:46,919 --> 00:03:51,359
complex structure and it is multiple it

84
00:03:51,359 --> 00:03:54,690
has multiple control words parsing

85
00:03:54,690 --> 00:03:56,099
vulnerabilities which has been reported

86
00:03:56,099 --> 00:04:00,349
in the past and so espero specifications

87
00:04:00,349 --> 00:04:02,790
Microsoft RTF specs there are more than

88
00:04:02,790 --> 00:04:04,919
800 control words which which out of

89
00:04:04,919 --> 00:04:08,549
which it is largely unexplored so there

90
00:04:08,549 --> 00:04:10,379
could be more more parsing mullah

91
00:04:10,379 --> 00:04:14,759
liberties so probably the this this

92
00:04:14,759 --> 00:04:18,029
floss has has been very significant

93
00:04:18,029 --> 00:04:19,918
scripting engine flaws is has been

94
00:04:19,918 --> 00:04:21,599
exploited

95
00:04:21,599 --> 00:04:24,510
largely so I scripting engine can can

96
00:04:24,510 --> 00:04:25,950
also be exploited in

97
00:04:25,950 --> 00:04:27,480
the office files right because both of

98
00:04:27,480 --> 00:04:29,310
them use the same sintering scripting

99
00:04:29,310 --> 00:04:31,580
engine the scripting vulnerabilities

100
00:04:31,580 --> 00:04:33,660
engine milimiters will be common between

101
00:04:33,660 --> 00:04:38,850
ien office holy exploits which is a

102
00:04:38,850 --> 00:04:41,940
massive attack vector it has been

103
00:04:41,940 --> 00:04:46,230
exploited most of most of the exploits

104
00:04:46,230 --> 00:04:47,610
which have which has been which which we

105
00:04:47,610 --> 00:04:49,740
have found in the past are well related

106
00:04:49,740 --> 00:04:53,550
to early feature of office so there are

107
00:04:53,550 --> 00:04:55,830
kind of multiple things here one is

108
00:04:55,830 --> 00:04:57,660
linking other is emitting where linking

109
00:04:57,660 --> 00:04:59,730
is basically you link to the external

110
00:04:59,730 --> 00:05:03,330
file which is either to the disk or it

111
00:05:03,330 --> 00:05:07,260
can be an external file so by and large

112
00:05:07,260 --> 00:05:10,440
the linking relates to the remote code

113
00:05:10,440 --> 00:05:11,910
download pros execute we have seen

114
00:05:11,910 --> 00:05:13,350
multiple such experts in the past right

115
00:05:13,350 --> 00:05:19,310
le to link exploit and other object

116
00:05:19,310 --> 00:05:21,330
object linking exploits which has been

117
00:05:21,330 --> 00:05:22,850
exploited which has been out there

118
00:05:22,850 --> 00:05:26,790
embedded embedding primarily leads to

119
00:05:26,790 --> 00:05:31,740
the memory corruption exploits or it can

120
00:05:31,740 --> 00:05:34,590
also be a container exploit where the

121
00:05:34,590 --> 00:05:36,600
embedded embedded document or embedded

122
00:05:36,600 --> 00:05:39,300
object can be used to aid further

123
00:05:39,300 --> 00:05:41,820
exploitation right for example it could

124
00:05:41,820 --> 00:05:43,620
be used to aid a it would be used to

125
00:05:43,620 --> 00:05:45,780
perform a mitigation bypass or it could

126
00:05:45,780 --> 00:05:50,119
be used to manipulate the process heap

127
00:05:50,900 --> 00:05:53,390
static analysis for genetic detection so

128
00:05:53,390 --> 00:05:57,710
primarily what we need is is robust

129
00:05:57,710 --> 00:05:59,640
document parser which can extract

130
00:05:59,640 --> 00:06:03,540
embedded objects and streams and it

131
00:06:03,540 --> 00:06:05,520
should be able to handle the streams and

132
00:06:05,520 --> 00:06:07,230
document structure office caissons which

133
00:06:07,230 --> 00:06:09,390
we have which which are kind of pretty

134
00:06:09,390 --> 00:06:11,700
significant in the exploits we this

135
00:06:11,700 --> 00:06:14,130
office occations can can make the

136
00:06:14,130 --> 00:06:17,520
analysis pretty difficult if you see the

137
00:06:17,520 --> 00:06:20,970
office caissons in RTF file format they

138
00:06:20,970 --> 00:06:24,090
are kind of pretty nested control words

139
00:06:24,090 --> 00:06:26,430
and it it would make the the reverse

140
00:06:26,430 --> 00:06:27,650
engineering very difficult but

141
00:06:27,650 --> 00:06:31,860
apparently the office RTF parcel engine

142
00:06:31,860 --> 00:06:34,050
microsoft RTF parser engine can handle

143
00:06:34,050 --> 00:06:35,460
this kind of office questions pretty

144
00:06:35,460 --> 00:06:37,530
pretty well that's so these an attack

145
00:06:37,530 --> 00:06:39,330
cars basically use his office case

146
00:06:39,330 --> 00:06:44,699
and primarily try to misguide the RTF

147
00:06:44,699 --> 00:06:47,280
parsers or try to mislead the the

148
00:06:47,280 --> 00:06:50,280
analyst the focus here is focus of the

149
00:06:50,280 --> 00:06:52,409
static analysis engine is to detect upon

150
00:06:52,409 --> 00:06:55,020
eyes exploits which which basically uses

151
00:06:55,020 --> 00:06:57,270
auxilary methods and it doesn't worry

152
00:06:57,270 --> 00:06:58,770
about the vulnerability details but it

153
00:06:58,770 --> 00:07:01,860
family focuses on detecting malicious

154
00:07:01,860 --> 00:07:05,539
code embedded inside either hidden or or

155
00:07:05,539 --> 00:07:08,940
apparently visible payload inside the

156
00:07:08,940 --> 00:07:11,190
embedded objects and object streams it

157
00:07:11,190 --> 00:07:13,860
is coded to it is basically designed to

158
00:07:13,860 --> 00:07:15,560
detect the containerized exploits

159
00:07:15,560 --> 00:07:18,090
extraction of embedded exploit embedded

160
00:07:18,090 --> 00:07:19,440
documents and then again forwarding

161
00:07:19,440 --> 00:07:22,860
feedback doing a feed back to the same

162
00:07:22,860 --> 00:07:24,330
analysis engine to reanalyze the

163
00:07:24,330 --> 00:07:27,240
extracted document and pointers of the

164
00:07:27,240 --> 00:07:32,009
external code so going to the risk rich

165
00:07:32,009 --> 00:07:36,360
text format so what kind of methods can

166
00:07:36,360 --> 00:07:38,370
be used to analyze a rich text format

167
00:07:38,370 --> 00:07:40,740
files so probably one of one of the

168
00:07:40,740 --> 00:07:42,870
static analysis heuristic is is the

169
00:07:42,870 --> 00:07:47,210
control words parsing so we can see the

170
00:07:47,210 --> 00:07:50,880
control words are larger in number and

171
00:07:50,880 --> 00:07:53,009
and they have certain parameter and they

172
00:07:53,009 --> 00:07:55,380
take that they take a data which could

173
00:07:55,380 --> 00:07:57,889
be either binary or which could be

174
00:07:57,889 --> 00:08:00,360
simple numeric parameter or which could

175
00:08:00,360 --> 00:08:04,680
be a binary data so in this control

176
00:08:04,680 --> 00:08:06,509
worlds destination control words are a

177
00:08:06,509 --> 00:08:08,400
sort of special interest towards lesson

178
00:08:08,400 --> 00:08:09,900
in control words are basically those

179
00:08:09,900 --> 00:08:12,599
which which takes the stream of binary

180
00:08:12,599 --> 00:08:15,840
data and there are very less

181
00:08:15,840 --> 00:08:17,460
restrictions on what kind of data that

182
00:08:17,460 --> 00:08:20,699
that that you can store into this

183
00:08:20,699 --> 00:08:23,400
control words right and there are more

184
00:08:23,400 --> 00:08:24,719
than thousand of them so you can see in

185
00:08:24,719 --> 00:08:26,940
the left there are a whole lot of

186
00:08:26,940 --> 00:08:28,590
control words which can consume consume

187
00:08:28,590 --> 00:08:31,729
data and and apparently because of that

188
00:08:31,729 --> 00:08:36,089
the data streams can be embedded the

189
00:08:36,089 --> 00:08:37,919
streams that is embedded in this control

190
00:08:37,919 --> 00:08:39,750
word scan can be either either a shell

191
00:08:39,750 --> 00:08:41,490
code either can be either a malicious

192
00:08:41,490 --> 00:08:43,769
executables or can be office cater to

193
00:08:43,769 --> 00:08:46,680
break the immature parsers right so and

194
00:08:46,680 --> 00:08:49,560
as an example there are a couple of

195
00:08:49,560 --> 00:08:51,630
exploits which which embed for example a

196
00:08:51,630 --> 00:08:53,250
pea fragments exploit which which

197
00:08:53,250 --> 00:08:56,460
a shell code inside the as a part of the

198
00:08:56,460 --> 00:08:59,160
control board data and only on the Left

199
00:08:59,160 --> 00:09:02,130
left-hand side the upper left-hand side

200
00:09:02,130 --> 00:09:03,960
there's another control board called

201
00:09:03,960 --> 00:09:06,300
level text control board which which was

202
00:09:06,300 --> 00:09:08,520
very heavily used in targeted attacks

203
00:09:08,520 --> 00:09:10,110
which was known as RDF exploits having

204
00:09:10,110 --> 00:09:12,450
shell code inside the control board data

205
00:09:12,450 --> 00:09:15,780
right so what do we do with the static

206
00:09:15,780 --> 00:09:17,190
analysis we need a parser which can

207
00:09:17,190 --> 00:09:19,800
extract this this control word streams

208
00:09:19,800 --> 00:09:23,880
and this control words this value each

209
00:09:23,880 --> 00:09:26,370
other when it is extracted it it needs

210
00:09:26,370 --> 00:09:28,830
to be scanned for for any malicious

211
00:09:28,830 --> 00:09:33,270
indicators right so this can prominently

212
00:09:33,270 --> 00:09:35,010
detect many of the auxiliary strategies

213
00:09:35,010 --> 00:09:38,370
that that an exploit can have one of the

214
00:09:38,370 --> 00:09:40,890
example is a datastore control word

215
00:09:40,890 --> 00:09:43,320
which which is in R T which is an RTF

216
00:09:43,320 --> 00:09:45,720
control board which was very heavily

217
00:09:45,720 --> 00:09:49,260
used to embed the office credit or X or

218
00:09:49,260 --> 00:09:50,930
executable in one of the previous

219
00:09:50,930 --> 00:09:53,730
exploits that was massively used in

220
00:09:53,730 --> 00:09:57,030
targeted attacks so very critical to to

221
00:09:57,030 --> 00:10:00,750
analyze this control word parameters

222
00:10:00,750 --> 00:10:03,660
next is the overlay data streams so

223
00:10:03,660 --> 00:10:06,180
overlay data is is pretty simple concept

224
00:10:06,180 --> 00:10:09,030
it is it is basically the data which is

225
00:10:09,030 --> 00:10:12,020
appended at the end of the file

226
00:10:12,020 --> 00:10:15,300
RTF rendering engines usually will

227
00:10:15,300 --> 00:10:17,339
ignore this data while processing but

228
00:10:17,339 --> 00:10:20,730
many many rdf exploits we have been able

229
00:10:20,730 --> 00:10:22,710
to locate in the past which can which

230
00:10:22,710 --> 00:10:26,610
can embed the additional data at the end

231
00:10:26,610 --> 00:10:30,150
of the file so if you see a couple of

232
00:10:30,150 --> 00:10:32,820
exploits as an example which have shown

233
00:10:32,820 --> 00:10:36,990
shown here 1:15 164 one which embedded

234
00:10:36,990 --> 00:10:40,980
embedded 380 KB of data which which had

235
00:10:40,980 --> 00:10:44,220
multiple stage multi stage its shellcode

236
00:10:44,220 --> 00:10:45,720
and then the core document which was

237
00:10:45,720 --> 00:10:49,290
stored at the end of the file next is is

238
00:10:49,290 --> 00:10:51,210
one of the more recent exploits where

239
00:10:51,210 --> 00:10:54,120
around 180 KB over 8 190 KB of data was

240
00:10:54,120 --> 00:10:58,140
appended at the end of the RTF file so

241
00:10:58,140 --> 00:11:01,980
very very important to do extract this

242
00:11:01,980 --> 00:11:06,000
overlay data and analyze it further so

243
00:11:06,000 --> 00:11:07,260
what should we do here

244
00:11:07,260 --> 00:11:10,410
is simple units tickets to look at the

245
00:11:10,410 --> 00:11:14,180
end of the file and almost always the

246
00:11:14,180 --> 00:11:16,890
larger volume of avila data is almost

247
00:11:16,890 --> 00:11:20,460
always suspicious to to the almost

248
00:11:20,460 --> 00:11:25,170
always suspicious so in our testing we

249
00:11:25,170 --> 00:11:27,840
have basically tested a couple of few

250
00:11:27,840 --> 00:11:30,210
thousands of exploits having overlay

251
00:11:30,210 --> 00:11:35,360
overlay data and we've we've found that

252
00:11:35,360 --> 00:11:38,850
RTF files with a wallet data more than

253
00:11:38,850 --> 00:11:41,700
300 bytes ninety-three more than ante

254
00:11:41,700 --> 00:11:43,350
three percent of that of that kind of

255
00:11:43,350 --> 00:11:46,890
files are are found to be suspicious

256
00:11:46,890 --> 00:11:49,140
in fact malicious as per as per the

257
00:11:49,140 --> 00:11:52,730
protections so pretty interesting

258
00:11:52,730 --> 00:11:54,900
auxillary strategy which is which has

259
00:11:54,900 --> 00:12:02,250
been used in RTF exploits lately really

260
00:12:02,250 --> 00:12:05,130
is as I as I said it's a massive attack

261
00:12:05,130 --> 00:12:07,770
vector which has been abused very very

262
00:12:07,770 --> 00:12:09,480
heavily in the recent past

263
00:12:09,480 --> 00:12:18,330
so this early is is the object control

264
00:12:18,330 --> 00:12:22,100
word which is the the object data is is

265
00:12:22,100 --> 00:12:24,510
is a parameter to this object control

266
00:12:24,510 --> 00:12:26,880
word and which is kind of stasis the the

267
00:12:26,880 --> 00:12:28,350
format of the data is really safe to

268
00:12:28,350 --> 00:12:30,810
stream in the only 1.0 native native

269
00:12:30,810 --> 00:12:34,740
stream format and when the when the

270
00:12:34,740 --> 00:12:37,470
object is embedded it there are kind of

271
00:12:37,470 --> 00:12:39,620
certain modifiers to this control board

272
00:12:39,620 --> 00:12:43,530
which which is obj a MB or obj auto link

273
00:12:43,530 --> 00:12:45,540
which is which which indicates either

274
00:12:45,540 --> 00:12:47,640
the object is embedded or the object is

275
00:12:47,640 --> 00:12:51,420
linked right so the advantage of that is

276
00:12:51,420 --> 00:12:54,300
that the advantage of this this kind of

277
00:12:54,300 --> 00:12:57,630
exploit is is it is very easy to

278
00:12:57,630 --> 00:12:59,490
implement it is very easy to target

279
00:12:59,490 --> 00:13:03,150
target the victims and there is there is

280
00:13:03,150 --> 00:13:08,130
no no complex exploit which is required

281
00:13:08,130 --> 00:13:10,140
basically no memory corruption exploit

282
00:13:10,140 --> 00:13:12,270
which is required to execute this

283
00:13:12,270 --> 00:13:16,850
strategy so recent trends has been

284
00:13:16,850 --> 00:13:20,850
largely to do a remote code download

285
00:13:20,850 --> 00:13:22,949
in work respective handlers it could be

286
00:13:22,949 --> 00:13:25,319
either MSHDA hand or it could be WSDL

287
00:13:25,319 --> 00:13:29,269
handler and then it could be a HT a HTML

288
00:13:29,269 --> 00:13:32,009
handlers in work respective handlers and

289
00:13:32,009 --> 00:13:35,790
then do a remote code execute so your

290
00:13:35,790 --> 00:13:38,329
code could be sitting anywhere outside

291
00:13:38,329 --> 00:13:41,579
your anywhere in to the external server

292
00:13:41,579 --> 00:13:44,089
and then you can basically just link

293
00:13:44,089 --> 00:13:47,040
your object to that external code and

294
00:13:47,040 --> 00:13:48,269
then download and execute which is

295
00:13:48,269 --> 00:13:53,699
pretty simple to target victims now as

296
00:13:53,699 --> 00:13:57,660
an example as an example the red mark

297
00:13:57,660 --> 00:14:01,019
basically indicates the RTF control word

298
00:14:01,019 --> 00:14:03,089
structure you can see the the

299
00:14:03,089 --> 00:14:04,649
destination control word is used as an

300
00:14:04,649 --> 00:14:09,360
object which is accompanied with obj

301
00:14:09,360 --> 00:14:11,670
auto link and then which a class which

302
00:14:11,670 --> 00:14:14,759
is a class of the only object which is

303
00:14:14,759 --> 00:14:17,190
kind of document dot eight with mottling

304
00:14:17,190 --> 00:14:20,190
so if you see this this this combination

305
00:14:20,190 --> 00:14:22,380
of control words and and the embedded

306
00:14:22,380 --> 00:14:25,050
object obj auto link with what document

307
00:14:25,050 --> 00:14:27,300
dot eight or dot well could be used

308
00:14:27,300 --> 00:14:30,269
where this basically indicates that the

309
00:14:30,269 --> 00:14:32,730
word that the document is linked to this

310
00:14:32,730 --> 00:14:34,199
container act right now this document

311
00:14:34,199 --> 00:14:36,449
could could be either in your disk or it

312
00:14:36,449 --> 00:14:39,930
could be sitting anywhere to the X it

313
00:14:39,930 --> 00:14:43,860
could be anywhere external so this this

314
00:14:43,860 --> 00:14:46,860
is stored you know you know willie 1.0

315
00:14:46,860 --> 00:14:50,579
native stream format the format of the

316
00:14:50,579 --> 00:14:53,040
or unitive native stream is is described

317
00:14:53,040 --> 00:14:55,649
in the specifications like it basically

318
00:14:55,649 --> 00:14:57,689
describes whether the object is either

319
00:14:57,689 --> 00:15:00,060
linked or either embedded there so

320
00:15:00,060 --> 00:15:02,250
basically this this green highlight is

321
00:15:02,250 --> 00:15:05,420
is the either linked object header or

322
00:15:05,420 --> 00:15:09,269
embedded object header and the parameter

323
00:15:09,269 --> 00:15:11,759
to this to this obj data which which i

324
00:15:11,759 --> 00:15:14,519
was mentioned mentioning earlier is the

325
00:15:14,519 --> 00:15:17,009
overlay 2.0 compound document stream so

326
00:15:17,009 --> 00:15:19,160
what we essentially need to do is is

327
00:15:19,160 --> 00:15:22,889
while looking at the RTF documents for

328
00:15:22,889 --> 00:15:25,019
for any malicious indicators we need to

329
00:15:25,019 --> 00:15:28,019
basically look at the object control

330
00:15:28,019 --> 00:15:30,930
word parts the obj data and extract the

331
00:15:30,930 --> 00:15:33,420
parameters to this obj data so this

332
00:15:33,420 --> 00:15:35,370
we extract seem to stream to this OB

333
00:15:35,370 --> 00:15:37,230
generator will basically we are

334
00:15:37,230 --> 00:15:39,360
essentially extracting this worry to

335
00:15:39,360 --> 00:15:45,810
compound document so as an example one

336
00:15:45,810 --> 00:15:47,990
of the previous exploits which had

337
00:15:47,990 --> 00:15:51,500
malicious code embedded within the

338
00:15:51,500 --> 00:15:56,310
linked object so you can see this le 1.0

339
00:15:56,310 --> 00:15:58,820
native stream which which had a

340
00:15:58,820 --> 00:16:01,500
multi-stage cell shell code and then the

341
00:16:01,500 --> 00:16:03,090
static analysis engine was able to

342
00:16:03,090 --> 00:16:05,640
extract this stream and look for the

343
00:16:05,640 --> 00:16:07,650
malicious indicator so engine basically

344
00:16:07,650 --> 00:16:09,780
was able to detect the malicious code

345
00:16:09,780 --> 00:16:12,420
out of embedded within this stream so

346
00:16:12,420 --> 00:16:18,570
pretty critical to to analyze this obj

347
00:16:18,570 --> 00:16:22,350
data streams so by enlarge this is how

348
00:16:22,350 --> 00:16:24,030
the parsing in the static analysis

349
00:16:24,030 --> 00:16:26,340
engine works if we if you look at the

350
00:16:26,340 --> 00:16:30,690
RTF file RTF file analysis in the in the

351
00:16:30,690 --> 00:16:32,490
engine implementer engine it basically

352
00:16:32,490 --> 00:16:34,860
takes care of the overlay data analysis

353
00:16:34,860 --> 00:16:36,780
over data for any malicious indicators

354
00:16:36,780 --> 00:16:38,130
it could be shellcode it to be

355
00:16:38,130 --> 00:16:40,080
executables it could be office gated

356
00:16:40,080 --> 00:16:43,860
streams it would be X or keys it could

357
00:16:43,860 --> 00:16:47,310
be scripts and the normally control

358
00:16:47,310 --> 00:16:49,890
words which which is indicated as other

359
00:16:49,890 --> 00:16:51,690
control words with data streams it could

360
00:16:51,690 --> 00:16:53,760
be either data store control word it

361
00:16:53,760 --> 00:16:55,290
could be the theme data where you know

362
00:16:55,290 --> 00:16:58,260
the the XML file format can also be

363
00:16:58,260 --> 00:17:02,430
embedded very important and the upper

364
00:17:02,430 --> 00:17:05,069
block larger block indicates the early

365
00:17:05,069 --> 00:17:07,760
inspection so only instruction can be

366
00:17:07,760 --> 00:17:10,470
parameters to this object control words

367
00:17:10,470 --> 00:17:12,030
it could be either obj EMB it could be

368
00:17:12,030 --> 00:17:15,089
either auto linked with word or document

369
00:17:15,089 --> 00:17:17,579
dot 813 and only packages now only

370
00:17:17,579 --> 00:17:19,500
packages can also have scripts embedded

371
00:17:19,500 --> 00:17:21,180
within within within that you could have

372
00:17:21,180 --> 00:17:23,750
executables within that it could have

373
00:17:23,750 --> 00:17:26,099
linked to the external point external

374
00:17:26,099 --> 00:17:28,470
source code as I was as I was mentioning

375
00:17:28,470 --> 00:17:29,880
earlier it could be a pointer to the

376
00:17:29,880 --> 00:17:33,120
external code so once you extract this

377
00:17:33,120 --> 00:17:37,050
the streams so engine basically extracts

378
00:17:37,050 --> 00:17:39,300
this already 1.0 native stream and it

379
00:17:39,300 --> 00:17:41,670
will look for either a 2.0 compound

380
00:17:41,670 --> 00:17:44,100
document which was which is a previous

381
00:17:44,100 --> 00:17:45,070
format

382
00:17:45,070 --> 00:17:47,710
which is a little odd zero format so

383
00:17:47,710 --> 00:17:49,180
when it finds that it will from it will

384
00:17:49,180 --> 00:17:51,430
forward it to CFP analyzer CFP analyzer

385
00:17:51,430 --> 00:17:53,890
will basically parse the storage streams

386
00:17:53,890 --> 00:17:56,680
will extract the storage streams and it

387
00:17:56,680 --> 00:17:57,760
will basically look for any malicious

388
00:17:57,760 --> 00:18:01,630
indicators on the other path if it also

389
00:18:01,630 --> 00:18:04,360
looks for the Oh XML documents embedded

390
00:18:04,360 --> 00:18:06,040
or XML documents can either be used to

391
00:18:06,040 --> 00:18:07,720
bypass the windows medications it could

392
00:18:07,720 --> 00:18:12,250
be used to load the suspiciously load

393
00:18:12,250 --> 00:18:14,650
the comma objects which we'll see later

394
00:18:14,650 --> 00:18:19,090
on a few minutes later and then it

395
00:18:19,090 --> 00:18:20,860
basically scans the embedded ActiveX

396
00:18:20,860 --> 00:18:22,390
control for indicator so this is

397
00:18:22,390 --> 00:18:25,750
basically how the prominently the RTF

398
00:18:25,750 --> 00:18:32,200
parsing in the engine works so all the

399
00:18:32,200 --> 00:18:35,770
open XML format some other some of the

400
00:18:35,770 --> 00:18:37,750
heuristics which which the engine

401
00:18:37,750 --> 00:18:40,270
implements is multicom loading detection

402
00:18:40,270 --> 00:18:42,790
so multi-count loading as you probably

403
00:18:42,790 --> 00:18:47,620
would know that it was significant it

404
00:18:47,620 --> 00:18:50,890
was heavily used method to bypass the

405
00:18:50,890 --> 00:18:53,380
windows medications like SLR and and and

406
00:18:53,380 --> 00:18:57,940
read execution prevention and it it was

407
00:18:57,940 --> 00:18:59,620
predominantly used to aid the further

408
00:18:59,620 --> 00:19:01,960
exploitation but we have seen exploits

409
00:19:01,960 --> 00:19:04,240
which which embed a XML document within

410
00:19:04,240 --> 00:19:07,960
RTF and RTF document is basically used

411
00:19:07,960 --> 00:19:09,700
as a container to this Oh XML and just

412
00:19:09,700 --> 00:19:11,290
link to the u XML document so when you

413
00:19:11,290 --> 00:19:13,690
just open the RTF document it will

414
00:19:13,690 --> 00:19:18,040
basically probably the dialog box

415
00:19:18,040 --> 00:19:21,250
whether and ask you to update the OH XML

416
00:19:21,250 --> 00:19:23,230
document now this update can happen even

417
00:19:23,230 --> 00:19:25,870
when your document is store somewhere

418
00:19:25,870 --> 00:19:28,390
outside right on CNC server or somewhere

419
00:19:28,390 --> 00:19:31,860
in somewhere external externally located

420
00:19:31,860 --> 00:19:36,520
so if you see here the chrome object has

421
00:19:36,520 --> 00:19:39,550
been loaded multiple times now this is

422
00:19:39,550 --> 00:19:43,080
pretty suspicious activity as far as the

423
00:19:43,080 --> 00:19:47,020
loading of the car object is done now if

424
00:19:47,020 --> 00:19:49,030
you see here the experience exploitation

425
00:19:49,030 --> 00:19:50,830
strategy is prominently we're loading

426
00:19:50,830 --> 00:19:52,390
single object multiple times

427
00:19:52,390 --> 00:19:54,610
loading fake objects using non-existent

428
00:19:54,610 --> 00:19:59,189
silicide is this this second thing

429
00:19:59,240 --> 00:20:02,600
was primarily done to reduce the to

430
00:20:02,600 --> 00:20:05,000
improve the expert performance and to

431
00:20:05,000 --> 00:20:07,450
consume lesser time when when you are

432
00:20:07,450 --> 00:20:11,120
you doing manipulation of meant when you

433
00:20:11,120 --> 00:20:12,740
are basically spraying the heap or doing

434
00:20:12,740 --> 00:20:13,280
process

435
00:20:13,280 --> 00:20:17,659
manipulation keep an ablation so as I

436
00:20:17,659 --> 00:20:19,549
said RTF was a container for XML

437
00:20:19,549 --> 00:20:21,020
exploits primarily used to bypass

438
00:20:21,020 --> 00:20:23,840
windows mitigations so there's this is

439
00:20:23,840 --> 00:20:25,490
one one exploitation strategy which

440
00:20:25,490 --> 00:20:27,169
which is implemented in the static

441
00:20:27,169 --> 00:20:28,429
analysis engine to detect suspicious

442
00:20:28,429 --> 00:20:32,870
comm loading methods and what do we do

443
00:20:32,870 --> 00:20:36,080
in the in the XML file now when we

444
00:20:36,080 --> 00:20:38,330
extract our XML file either embedded in

445
00:20:38,330 --> 00:20:41,110
the RTF document or submitted separately

446
00:20:41,110 --> 00:20:43,250
analysis engine will basically look for

447
00:20:43,250 --> 00:20:44,960
multiple things it will look for ActiveX

448
00:20:44,960 --> 00:20:46,669
directory look for embeddings directory

449
00:20:46,669 --> 00:20:48,409
embedding selector is pretty critical in

450
00:20:48,409 --> 00:20:51,049
terms of embedding overly objects now

451
00:20:51,049 --> 00:20:53,120
that only objects could as I said it

452
00:20:53,120 --> 00:20:55,909
could be either executable payload it

453
00:20:55,909 --> 00:20:57,530
could be either only packages it could

454
00:20:57,530 --> 00:21:00,740
be either externally located code or it

455
00:21:00,740 --> 00:21:04,280
could be any any parsing any object

456
00:21:04,280 --> 00:21:07,220
embedded inside the XML file which could

457
00:21:07,220 --> 00:21:10,549
exploit a parsing vulnerability right so

458
00:21:10,549 --> 00:21:15,080
as an example 117 1 w18 26 when the

459
00:21:15,080 --> 00:21:18,080
analyzer they extracted the streams it

460
00:21:18,080 --> 00:21:20,750
was able to locate the malicious code

461
00:21:20,750 --> 00:21:22,789
inside so primarily this has been the

462
00:21:22,789 --> 00:21:29,570
focus now Oh XML we also need to need to

463
00:21:29,570 --> 00:21:32,570
do the stream analysis where we also

464
00:21:32,570 --> 00:21:34,840
check for supplemental techniques

465
00:21:34,840 --> 00:21:36,429
supplemental techniques could be

466
00:21:36,429 --> 00:21:39,950
malicious binary streams and that could

467
00:21:39,950 --> 00:21:41,780
either be sledges or it could be either

468
00:21:41,780 --> 00:21:43,400
drop chains or it could be their shell

469
00:21:43,400 --> 00:21:45,080
codes or it could be anything

470
00:21:45,080 --> 00:21:49,340
so engine on the left side if you if you

471
00:21:49,340 --> 00:21:52,970
observe it it has extracted the Rob

472
00:21:52,970 --> 00:21:56,720
chain very very accurately so we analyze

473
00:21:56,720 --> 00:21:59,330
we analyze so static analysis engine

474
00:21:59,330 --> 00:22:01,400
basically analyzes the streams and tries

475
00:22:01,400 --> 00:22:03,890
to tries to apply some guessing and

476
00:22:03,890 --> 00:22:06,289
validation algorithm to to locate this

477
00:22:06,289 --> 00:22:08,980
Rob chain

478
00:22:11,200 --> 00:22:13,539
next on the compound binary file format

479
00:22:13,539 --> 00:22:19,519
as as as we know and it is basically

480
00:22:19,519 --> 00:22:22,760
well documented that compound binary

481
00:22:22,760 --> 00:22:25,370
file format is primarily hierarchical

482
00:22:25,370 --> 00:22:28,220
storage streams hierarchical file format

483
00:22:28,220 --> 00:22:30,769
where the there are root storage objects

484
00:22:30,769 --> 00:22:35,210
and there are there are stream objects

485
00:22:35,210 --> 00:22:37,909
and root root storage object so any

486
00:22:37,909 --> 00:22:40,070
parser which analyzes this file format

487
00:22:40,070 --> 00:22:42,470
needs to be able to extract this object

488
00:22:42,470 --> 00:22:44,769
and storage streams and particularly

489
00:22:44,769 --> 00:22:48,590
what is interesting interesting section

490
00:22:48,590 --> 00:22:51,139
of compound binary file file format when

491
00:22:51,139 --> 00:22:52,760
we do the analysis is the object pool

492
00:22:52,760 --> 00:22:55,340
storage so that's that's where we found

493
00:22:55,340 --> 00:22:56,960
that most of the shell codes most of the

494
00:22:56,960 --> 00:22:59,210
malicious code and and and other other

495
00:22:59,210 --> 00:23:02,690
malicious streams are are located so

496
00:23:02,690 --> 00:23:05,360
very critical to analyze the obj info

497
00:23:05,360 --> 00:23:07,399
plus ocx data so CX data is family the

498
00:23:07,399 --> 00:23:12,529
stream where the le o le data is is is

499
00:23:12,529 --> 00:23:18,200
located and the macro where the macro

500
00:23:18,200 --> 00:23:21,049
basically resides in the vba storage

501
00:23:21,049 --> 00:23:26,679
object so as an example the the analyzer

502
00:23:26,679 --> 00:23:30,049
extracts all the object and storage

503
00:23:30,049 --> 00:23:31,700
streams within the compound binary file

504
00:23:31,700 --> 00:23:38,539
format and and you can see the one of

505
00:23:38,539 --> 00:23:40,669
the recent exploits down 18 4 8 7 8

506
00:23:40,669 --> 00:23:43,309
where the malicious content object

507
00:23:43,309 --> 00:23:46,010
stream was having the having the code

508
00:23:46,010 --> 00:23:49,940
embedded so it is very very important to

509
00:23:49,940 --> 00:23:54,490
have this this generic analyzed analysis

510
00:23:54,490 --> 00:23:59,659
implemented inside the engine another

511
00:23:59,659 --> 00:24:03,830
example where the the PowerPoint

512
00:24:03,830 --> 00:24:07,039
PowerPoint exploit was having the

513
00:24:07,039 --> 00:24:08,510
malicious code embedded inside the

514
00:24:08,510 --> 00:24:11,289
PowerPoint document stream objects so

515
00:24:11,289 --> 00:24:15,649
any it is it is significant to it is

516
00:24:15,649 --> 00:24:17,690
very very important to analyze and ex

517
00:24:17,690 --> 00:24:19,279
extract analyze all the streams but

518
00:24:19,279 --> 00:24:21,559
particularly as I said the holy stream

519
00:24:21,559 --> 00:24:25,629
is is primarily of interest

520
00:24:26,860 --> 00:24:29,000
so supervised learning from macro

521
00:24:29,000 --> 00:24:30,860
classification so we did some

522
00:24:30,860 --> 00:24:34,000
experiments with multiple ml algorithms

523
00:24:34,000 --> 00:24:37,460
the storage is as I said in in Microsoft

524
00:24:37,460 --> 00:24:39,890
compound binary file format the storage

525
00:24:39,890 --> 00:24:43,700
is inside the VBA storage stream root

526
00:24:43,700 --> 00:24:46,010
storage stream and inside the dir and

527
00:24:46,010 --> 00:24:49,000
will be a project where the most of the

528
00:24:49,000 --> 00:24:51,800
macro code resides well in the Oh XML

529
00:24:51,800 --> 00:24:54,110
it's basically in VA project bin if you

530
00:24:54,110 --> 00:24:57,560
unzip the XML file format and locate

531
00:24:57,560 --> 00:24:59,000
this VBA project ID bin file which is

532
00:24:59,000 --> 00:25:00,890
again the early to format so need two

533
00:25:00,890 --> 00:25:03,440
parts the whenever there is an overly to

534
00:25:03,440 --> 00:25:05,180
format you need to parse the early to

535
00:25:05,180 --> 00:25:06,590
format and then extract the streams out

536
00:25:06,590 --> 00:25:13,270
of that so so supervised learning

537
00:25:13,270 --> 00:25:16,040
multiple methods tested basically random

538
00:25:16,040 --> 00:25:18,410
forests and and KNN primarily and we

539
00:25:18,410 --> 00:25:20,030
found that decision tree was working

540
00:25:20,030 --> 00:25:21,980
very well in terms of prediction so

541
00:25:21,980 --> 00:25:24,440
prediction any nine percent of the

542
00:25:24,440 --> 00:25:26,450
prediction where where we found that it

543
00:25:26,450 --> 00:25:29,120
was able to 99 percent of the times we

544
00:25:29,120 --> 00:25:30,980
have were able to see the correct

545
00:25:30,980 --> 00:25:35,260
prediction so this is the partial

546
00:25:35,260 --> 00:25:40,610
decision tree plot where we used lot of

547
00:25:40,610 --> 00:25:44,140
features more than 100 macro features

548
00:25:44,140 --> 00:25:46,760
which we constructed out of which we

549
00:25:46,760 --> 00:25:49,370
constructed a decision tree and then we

550
00:25:49,370 --> 00:25:51,650
tested on around 10k samples sample set

551
00:25:51,650 --> 00:25:53,600
initially and we found that 99% of the

552
00:25:53,600 --> 00:26:01,210
time it was the correct prediction so

553
00:26:01,210 --> 00:26:04,460
implementation of the engine at a high

554
00:26:04,460 --> 00:26:07,970
level it it looks like this

555
00:26:07,970 --> 00:26:11,540
so finally submitted to the to the to

556
00:26:11,540 --> 00:26:16,700
the engine and after checking the input

557
00:26:16,700 --> 00:26:19,130
file type basically either it goes to

558
00:26:19,130 --> 00:26:21,380
CFG analyzer it goes to RTF analyzer it

559
00:26:21,380 --> 00:26:26,390
goes to XML eliezer and each analyzer

560
00:26:26,390 --> 00:26:28,070
will have a separate module for for

561
00:26:28,070 --> 00:26:29,980
analysis for example RDF analyzer has

562
00:26:29,980 --> 00:26:33,290
has the embedded object analysis

563
00:26:33,290 --> 00:26:35,030
shellcode detection overlaid our

564
00:26:35,030 --> 00:26:38,000
detection control words analysis

565
00:26:38,000 --> 00:26:40,549
and extraction of world of xml documents

566
00:26:40,549 --> 00:26:43,929
and then further analyzing it to either

567
00:26:43,929 --> 00:26:46,309
determine the malicious indicators so

568
00:26:46,309 --> 00:26:48,350
all of these were basically implemented

569
00:26:48,350 --> 00:26:52,669
in the in the in the engine so to

570
00:26:52,669 --> 00:26:57,140
conclude this presentation we will will

571
00:26:57,140 --> 00:26:59,510
share some of the results with you so

572
00:26:59,510 --> 00:27:02,690
initial results were basically targeted

573
00:27:02,690 --> 00:27:05,090
towards the exploits that were used

574
00:27:05,090 --> 00:27:07,400
heavily used in the in the targeted

575
00:27:07,400 --> 00:27:09,230
attacks and with minimal set of exploits

576
00:27:09,230 --> 00:27:11,870
we were able to achieve around nineteen

577
00:27:11,870 --> 00:27:13,580
nineteen ninety-one percent of addiction

578
00:27:13,580 --> 00:27:14,870
rate in some cases even more than that

579
00:27:14,870 --> 00:27:19,299
with with some of the generic detection

580
00:27:19,299 --> 00:27:21,710
implemented as we as as I mentioned

581
00:27:21,710 --> 00:27:27,559
earlier so this this is at a high level

582
00:27:27,559 --> 00:27:30,380
what what what we observed when we

583
00:27:30,380 --> 00:27:32,150
tested on some of the high impact

584
00:27:32,150 --> 00:27:34,789
exploits most of them we we tested

585
00:27:34,789 --> 00:27:36,890
against the targeted attack exploits

586
00:27:36,890 --> 00:27:38,960
using targeted attacks because we we

587
00:27:38,960 --> 00:27:41,960
used to get this either in our sample DB

588
00:27:41,960 --> 00:27:43,400
or you know either

589
00:27:43,400 --> 00:27:46,840
violet elementary data and then we

590
00:27:46,840 --> 00:27:50,299
primarily achieved around 91 91 percent

591
00:27:50,299 --> 00:27:52,070
of detection in some cases even more

592
00:27:52,070 --> 00:27:55,850
than that so this was the initial

593
00:27:55,850 --> 00:27:58,450
results that's it

594
00:27:58,450 --> 00:28:02,260
any questions

