1
00:00:00,120 --> 00:00:03,210
so this is a small talk a reserved paper

2
00:00:03,210 --> 00:00:06,120
actually that we put in late on the

3
00:00:06,120 --> 00:00:09,450
iPhone and Android exploitation going on

4
00:00:09,450 --> 00:00:13,380
on targeting Weber Muslims and Tibetans

5
00:00:13,380 --> 00:00:16,049
inside and outside the People's Republic

6
00:00:16,049 --> 00:00:19,260
of China about me I am a PhD student at

7
00:00:19,260 --> 00:00:21,859
the University of Illinois I also run

8
00:00:21,859 --> 00:00:24,449
the threat research team at threat stop

9
00:00:24,449 --> 00:00:26,490
and I have my own company that sells

10
00:00:26,490 --> 00:00:28,220
threat feed so I have a variety of hats

11
00:00:28,220 --> 00:00:30,800
today I'm here as a graduate student

12
00:00:30,800 --> 00:00:34,140
this talk as TLP white say anything you

13
00:00:34,140 --> 00:00:35,610
want about it most of it is using

14
00:00:35,610 --> 00:00:38,640
research that was in part done by others

15
00:00:38,640 --> 00:00:40,500
so all of this you can consider public

16
00:00:40,500 --> 00:00:42,620
records there's nothing overtly

17
00:00:42,620 --> 00:00:46,520
confidential about what I'm going to say

18
00:00:46,520 --> 00:00:50,039
obviously the entire body of this

19
00:00:50,039 --> 00:00:52,170
research started with work from Google

20
00:00:52,170 --> 00:00:54,690
project zero who discovered iPhone

21
00:00:54,690 --> 00:00:56,699
vulnerabilities or five specific chains

22
00:00:56,699 --> 00:00:59,430
that we'll talk about velocity followed

23
00:00:59,430 --> 00:01:02,309
that up with the attribution and Android

24
00:01:02,309 --> 00:01:04,619
pieces of it citizen lab came out with

25
00:01:04,619 --> 00:01:06,360
their report a week ago a little more

26
00:01:06,360 --> 00:01:09,060
than a week ago that covers the Tibetan

27
00:01:09,060 --> 00:01:11,580
angle of all of this so lots of people

28
00:01:11,580 --> 00:01:13,080
contributed to this and I want to make

29
00:01:13,080 --> 00:01:14,549
sure that they get their credit then and

30
00:01:14,549 --> 00:01:16,650
and not have people think that this is

31
00:01:16,650 --> 00:01:18,509
all mine there's lots of people who've

32
00:01:18,509 --> 00:01:20,580
been working on it and all started when

33
00:01:20,580 --> 00:01:23,520
Google project zero became went public

34
00:01:23,520 --> 00:01:26,759
with their findings and I wanted to

35
00:01:26,759 --> 00:01:28,380
start with one dishonourable mentioned

36
00:01:28,380 --> 00:01:30,990
which was Apple's response as far as the

37
00:01:30,990 --> 00:01:32,549
problems we deal with in computer

38
00:01:32,549 --> 00:01:34,470
security right the loss of information

39
00:01:34,470 --> 00:01:36,869
you know the stakes are usually measured

40
00:01:36,869 --> 00:01:39,030
in dollars when you're dealing with

41
00:01:39,030 --> 00:01:41,640
vulnerabilities that are used in what

42
00:01:41,640 --> 00:01:43,079
would be interpreted in the West as

43
00:01:43,079 --> 00:01:44,820
human rights violations that's kind of a

44
00:01:44,820 --> 00:01:48,210
worst case scenario so there's lots of

45
00:01:48,210 --> 00:01:50,189
good ways to respond to vulnerabilities

46
00:01:50,189 --> 00:01:52,740
being disclosed this was not one of

47
00:01:52,740 --> 00:01:56,549
those ways so I wanted to mention that

48
00:01:56,549 --> 00:01:59,280
right because the stakes of this

49
00:01:59,280 --> 00:02:00,869
particular class of vulnerabilities or

50
00:02:00,869 --> 00:02:04,469
at least a campaign that's going on and

51
00:02:04,469 --> 00:02:07,530
the context in which it is taking place

52
00:02:07,530 --> 00:02:10,500
inside of China so as far as agenda

53
00:02:10,500 --> 00:02:12,090
we'll talk a little bit about the

54
00:02:12,090 --> 00:02:13,860
victimology and attribution

55
00:02:13,860 --> 00:02:15,990
see to infrastructure the exploit chains

56
00:02:15,990 --> 00:02:19,650
an iPhone the Android visa this and a

57
00:02:19,650 --> 00:02:21,420
little bit of malware it's a lot of

58
00:02:21,420 --> 00:02:23,100
content packed in 30 minutes so

59
00:02:23,100 --> 00:02:25,830
hopefully I will do it all justice but

60
00:02:25,830 --> 00:02:27,540
you could easily talk for hours on all

61
00:02:27,540 --> 00:02:29,160
of on all of this you could probably

62
00:02:29,160 --> 00:02:32,040
talk an hour just on the the a single

63
00:02:32,040 --> 00:02:37,380
exploit chain for the iPhone as has been

64
00:02:37,380 --> 00:02:40,709
publicly reported the the the project

65
00:02:40,709 --> 00:02:43,140
zero initial disclosures for that iPhone

66
00:02:43,140 --> 00:02:46,620
malware was targeted primarily at Weger

67
00:02:46,620 --> 00:02:49,200
Muslims citizen lab came out nine days

68
00:02:49,200 --> 00:02:51,540
ago and and mentioned the campaigns they

69
00:02:51,540 --> 00:02:53,820
saw on Tibet they have been going on and

70
00:02:53,820 --> 00:02:57,390
off for about five years as far as

71
00:02:57,390 --> 00:02:59,970
anybody has been able to tell when

72
00:02:59,970 --> 00:03:02,040
Google went public with their findings

73
00:03:02,040 --> 00:03:05,880
with project zero members of likely the

74
00:03:05,880 --> 00:03:08,250
US intelligence communities came in and

75
00:03:08,250 --> 00:03:11,730
said yes this is weaker Muslims there

76
00:03:11,730 --> 00:03:13,590
are thought to be potentially two

77
00:03:13,590 --> 00:03:15,510
different groups with some interesting

78
00:03:15,510 --> 00:03:20,340
overlaps and other other apt actors that

79
00:03:20,340 --> 00:03:22,500
are generally thought to be Chinese

80
00:03:22,500 --> 00:03:23,420
backed

81
00:03:23,420 --> 00:03:25,799
citizen lab called some poison Carville

82
00:03:25,799 --> 00:03:28,980
Exedy calls them evil I as usual

83
00:03:28,980 --> 00:03:31,980
companies will name their own actors and

84
00:03:31,980 --> 00:03:35,459
those names seldom overlap one of the

85
00:03:35,459 --> 00:03:38,220
findings of Alexa T was that compromised

86
00:03:38,220 --> 00:03:40,920
website a compromised website for a

87
00:03:40,920 --> 00:03:43,140
brief period of time had the scan box

88
00:03:43,140 --> 00:03:46,709
framework installed on it which is used

89
00:03:46,709 --> 00:03:49,200
by comment crew so there might be a

90
00:03:49,200 --> 00:03:51,870
relationship there but not enough data

91
00:03:51,870 --> 00:03:54,000
to really make anything overly firm

92
00:03:54,000 --> 00:03:56,100
about that but certainly the groups

93
00:03:56,100 --> 00:03:58,340
involved in this are almost certainly

94
00:03:58,340 --> 00:04:01,230
state-sponsored or at least state backed

95
00:04:01,230 --> 00:04:03,480
in some way by the People's Republic of

96
00:04:03,480 --> 00:04:03,989
China

97
00:04:03,989 --> 00:04:05,970
simply just by the groups themselves

98
00:04:05,970 --> 00:04:08,549
that's highly suggestive who's actually

99
00:04:08,549 --> 00:04:13,709
behind these campaigns they compromised

100
00:04:13,709 --> 00:04:16,470
several websites the Weger

101
00:04:16,470 --> 00:04:19,350
portion of this campaign anyway did that

102
00:04:19,350 --> 00:04:21,478
are typically used by Muslims in the

103
00:04:21,478 --> 00:04:24,300
region to get news that being said there

104
00:04:24,300 --> 00:04:25,690
was didn't appear to

105
00:04:25,690 --> 00:04:28,330
any checking to make sure that the

106
00:04:28,330 --> 00:04:30,280
victims were inside the territorial

107
00:04:30,280 --> 00:04:32,410
space of the PRC so it is possible that

108
00:04:32,410 --> 00:04:34,510
others who happen to be interested in

109
00:04:34,510 --> 00:04:37,090
the issue but operating outside the PRC

110
00:04:37,090 --> 00:04:38,470
journalists whoever may have been

111
00:04:38,470 --> 00:04:41,320
compromised as well but you can see from

112
00:04:41,320 --> 00:04:43,780
a list of websites and that's not all of

113
00:04:43,780 --> 00:04:47,050
them that's just a subset the tibetan

114
00:04:47,050 --> 00:04:49,300
piece of this didn't compromise any

115
00:04:49,300 --> 00:04:51,300
websites it was all based on messaging

116
00:04:51,300 --> 00:04:54,580
where somebody in WeChat or whatsapp

117
00:04:54,580 --> 00:04:58,000
would send links to articles in one case

118
00:04:58,000 --> 00:04:59,860
it was somebody posing as a journalist

119
00:04:59,860 --> 00:05:02,380
sending a message to a member of the

120
00:05:02,380 --> 00:05:04,030
Tibetan Parliament saying can you verify

121
00:05:04,030 --> 00:05:07,570
this story as a way to get them to a

122
00:05:07,570 --> 00:05:10,990
compromised websites but between the two

123
00:05:10,990 --> 00:05:12,550
campaigns against the leaders and the

124
00:05:12,550 --> 00:05:16,120
Tibetans you know the malware was

125
00:05:16,120 --> 00:05:18,010
related or the same there were different

126
00:05:18,010 --> 00:05:20,020
versions they had the same functionality

127
00:05:20,020 --> 00:05:22,870
more or less but the one targeting the

128
00:05:22,870 --> 00:05:24,780
weavers had a little bit more

129
00:05:24,780 --> 00:05:26,950
development that had taken place by then

130
00:05:26,950 --> 00:05:28,720
and there was a prevalence of one

131
00:05:28,720 --> 00:05:30,790
particular website that overlapped both

132
00:05:30,790 --> 00:05:35,140
campaigns the compromised websites would

133
00:05:35,140 --> 00:05:36,910
use the invisible iframes that we all

134
00:05:36,910 --> 00:05:40,390
know and love to be loaded on otherwise

135
00:05:40,390 --> 00:05:43,090
valid sites occasionally those iframes

136
00:05:43,090 --> 00:05:45,550
would use iterations of the actual

137
00:05:45,550 --> 00:05:47,950
domain of the compromised websites

138
00:05:47,950 --> 00:05:52,840
replacing I for L was common that was

139
00:05:52,840 --> 00:05:56,169
primarily in the one developed deploying

140
00:05:56,169 --> 00:05:58,870
Android malware some of the compromised

141
00:05:58,870 --> 00:06:01,150
websites pointed you to nothing lis

142
00:06:01,150 --> 00:06:03,130
overly sophisticated but your typical

143
00:06:03,130 --> 00:06:05,919
ooofff accent page saying log in with

144
00:06:05,919 --> 00:06:07,540
your Google Facebook or whatever account

145
00:06:07,540 --> 00:06:09,880
to get access so that an app would be

146
00:06:09,880 --> 00:06:12,160
installed with permissions to read your

147
00:06:12,160 --> 00:06:14,140
entire Facebook profile or send and

148
00:06:14,140 --> 00:06:16,180
receive Gmail messages and of course

149
00:06:16,180 --> 00:06:17,680
then they had access and it was a

150
00:06:17,680 --> 00:06:19,840
malware list compromise that would

151
00:06:19,840 --> 00:06:23,080
persist until somebody went back in that

152
00:06:23,080 --> 00:06:24,580
was nothing particularly sophisticated

153
00:06:24,580 --> 00:06:27,010
but was part of this campaign which is

154
00:06:27,010 --> 00:06:29,980
why I mention it the web's the

155
00:06:29,980 --> 00:06:32,020
compromised websites or the JavaScript

156
00:06:32,020 --> 00:06:34,510
did analyze victims for some degree of

157
00:06:34,510 --> 00:06:36,520
suitability we don't really know how

158
00:06:36,520 --> 00:06:38,420
much because

159
00:06:38,420 --> 00:06:41,330
by the time many researchers got to

160
00:06:41,330 --> 00:06:42,980
these stuff these sites they were

161
00:06:42,980 --> 00:06:45,680
already taken down or offline but there

162
00:06:45,680 --> 00:06:47,840
appeared to at least be blacklisting of

163
00:06:47,840 --> 00:06:49,760
researchers where you know we'd come

164
00:06:49,760 --> 00:06:52,670
from an IP and they know it's us and

165
00:06:52,670 --> 00:06:54,710
they wouldn't deliver malware or

166
00:06:54,710 --> 00:06:56,600
wouldn't deliver malware to the same

167
00:06:56,600 --> 00:06:59,570
ip's repeatedly you know in ways to

168
00:06:59,570 --> 00:07:03,560
thwart thort researchers but it didn't

169
00:07:03,560 --> 00:07:05,600
have any Geographic or it didn't appear

170
00:07:05,600 --> 00:07:07,700
to have any Geographic bounding to say I

171
00:07:07,700 --> 00:07:09,830
only want to compromise people inside of

172
00:07:09,830 --> 00:07:13,190
territorial China as I referenced

173
00:07:13,190 --> 00:07:16,370
earlier as some of the reporting on this

174
00:07:16,370 --> 00:07:19,310
started coming out the FBI apparently

175
00:07:19,310 --> 00:07:21,350
had asked Google not to index some of

176
00:07:21,350 --> 00:07:23,630
these sites because people were going to

177
00:07:23,630 --> 00:07:25,310
them and getting compromised unknowingly

178
00:07:25,310 --> 00:07:28,430
so these campaigns were known about

179
00:07:28,430 --> 00:07:31,580
privately before the before anybody came

180
00:07:31,580 --> 00:07:33,230
public with the research which I guess

181
00:07:33,230 --> 00:07:36,800
is a good thing except that it's unclear

182
00:07:36,800 --> 00:07:38,570
what was done to protect anybody about

183
00:07:38,570 --> 00:07:42,620
it the situ infrastructure used a

184
00:07:42,620 --> 00:07:45,040
variety of domains some were dynamic DNS

185
00:07:45,040 --> 00:07:50,180
dzu a.com m and sap services overlapped

186
00:07:50,180 --> 00:07:53,000
several campaigns which allowed for at

187
00:07:53,000 --> 00:07:54,680
least some indication of correlation

188
00:07:54,680 --> 00:07:57,320
between the actors you have a list of IP

189
00:07:57,320 --> 00:08:00,710
addresses they're also most of them

190
00:08:00,710 --> 00:08:03,170
mapped to chupa in the United States and

191
00:08:03,170 --> 00:08:06,410
it7 networks in Canada but none of them

192
00:08:06,410 --> 00:08:08,810
were seen in previous campaigns of any

193
00:08:08,810 --> 00:08:11,180
note worthiness so there wasn't really

194
00:08:11,180 --> 00:08:13,250
anything to map backwards infrastructure

195
00:08:13,250 --> 00:08:17,270
wise to link to previous operations if

196
00:08:17,270 --> 00:08:19,550
you want to look for infrastructure

197
00:08:19,550 --> 00:08:21,770
I assume that the attackers won't do

198
00:08:21,770 --> 00:08:24,740
this anymore but they read they use two

199
00:08:24,740 --> 00:08:27,050
different email addresses to register

200
00:08:27,050 --> 00:08:29,300
domains which you can search for there

201
00:08:29,300 --> 00:08:31,040
are oou indicators because that has to

202
00:08:31,040 --> 00:08:33,260
be tied to an email address you see the

203
00:08:33,260 --> 00:08:35,090
five gmail accounts there that were used

204
00:08:35,090 --> 00:08:37,849
between the tibetan and the weaver

205
00:08:37,849 --> 00:08:40,700
muslim campaigns you see down here

206
00:08:40,700 --> 00:08:44,210
the last one is ish looking weaker ish

207
00:08:44,210 --> 00:08:44,720
and

208
00:08:44,720 --> 00:08:51,319
of its nomenclature so moving on to the

209
00:08:51,319 --> 00:08:53,899
iPhone exploit chains right originally

210
00:08:53,899 --> 00:08:55,759
reported by Project zero there are five

211
00:08:55,759 --> 00:08:58,490
different chains of them covering 14

212
00:08:58,490 --> 00:09:01,759
different exploits 7 for Safari 5 for

213
00:09:01,759 --> 00:09:05,480
the kernel - 2 sandbox escapes affecting

214
00:09:05,480 --> 00:09:09,769
iOS 12 up to iOS 12 1 - the different

215
00:09:09,769 --> 00:09:11,569
chains affected different brands of

216
00:09:11,569 --> 00:09:14,240
versions what you see in the chart here

217
00:09:14,240 --> 00:09:16,819
is what Google published which is why

218
00:09:16,819 --> 00:09:18,379
the reporting said this is going on for

219
00:09:18,379 --> 00:09:20,660
3 years more or less constantly which is

220
00:09:20,660 --> 00:09:23,660
not probably not accurate what this

221
00:09:23,660 --> 00:09:25,370
graph shows you is the windows between

222
00:09:25,370 --> 00:09:28,250
the OS release and when it was patched

223
00:09:28,250 --> 00:09:31,250
so of course users don't update all the

224
00:09:31,250 --> 00:09:34,009
time so the victim you could be

225
00:09:34,009 --> 00:09:36,680
victimized after a patch is released and

226
00:09:36,680 --> 00:09:38,269
it's doubtful that they had access to

227
00:09:38,269 --> 00:09:41,329
these vulnerabilities on day 0 of a

228
00:09:41,329 --> 00:09:43,370
release this is what Google published

229
00:09:43,370 --> 00:09:45,709
but Apple does have a point saying well

230
00:09:45,709 --> 00:09:47,329
we only think the compromised happened

231
00:09:47,329 --> 00:09:49,100
in smaller windows which is probably

232
00:09:49,100 --> 00:09:51,860
more reflective of reality there is

233
00:09:51,860 --> 00:09:53,569
periods of compromise where they tried

234
00:09:53,569 --> 00:09:55,069
to get as much as I can and then things

235
00:09:55,069 --> 00:09:58,519
got patched and Apple was pretty quick

236
00:09:58,519 --> 00:10:00,079
about getting this stuff patched as

237
00:10:00,079 --> 00:10:01,430
they're made aware and in many cases

238
00:10:01,430 --> 00:10:03,050
they were aware of vulnerabilities

239
00:10:03,050 --> 00:10:05,360
before they were being reported to them

240
00:10:05,360 --> 00:10:08,860
by project 0 or other other researchers

241
00:10:08,860 --> 00:10:12,439
I guess I went to this one - these

242
00:10:12,439 --> 00:10:15,019
points already the important thing is

243
00:10:15,019 --> 00:10:17,000
that the attackers did keep persisting

244
00:10:17,000 --> 00:10:19,670
in their development instead of hey I

245
00:10:19,670 --> 00:10:21,740
got an exploit and then just went away

246
00:10:21,740 --> 00:10:24,259
they kept finding and developing new

247
00:10:24,259 --> 00:10:25,879
exploits and as we go through the chains

248
00:10:25,879 --> 00:10:27,889
they reuse different technique we used

249
00:10:27,889 --> 00:10:30,199
some of the techniques in the chains

250
00:10:30,199 --> 00:10:33,589
that are harder to patch or fix but they

251
00:10:33,589 --> 00:10:36,040
kept at it the Android piece of this

252
00:10:36,040 --> 00:10:39,230
involved exploits all the way back from

253
00:10:39,230 --> 00:10:42,860
chrome 39 and 2014 with with gaps again

254
00:10:42,860 --> 00:10:45,259
in Windows where there apparently wasn't

255
00:10:45,259 --> 00:10:47,629
any vulnerability that they could

256
00:10:47,629 --> 00:10:49,970
exploit but the important thing is a

257
00:10:49,970 --> 00:10:53,470
persistence and the effort these this

258
00:10:53,470 --> 00:10:55,780
did in continuing to exploit this

259
00:10:55,780 --> 00:10:56,470
population

260
00:10:56,470 --> 00:10:58,630
to do their surveillance and we'll talk

261
00:10:58,630 --> 00:11:02,290
about the malware and what it did the

262
00:11:02,290 --> 00:11:04,090
first exploit chain affected versions

263
00:11:04,090 --> 00:11:07,740
ten zero one to ten one one primarily

264
00:11:07,740 --> 00:11:10,870
the the initial part of the chain was a

265
00:11:10,870 --> 00:11:14,650
heap overflow in the device driver for

266
00:11:14,650 --> 00:11:18,910
an Apple iPhone in the GPU of a GX

267
00:11:18,910 --> 00:11:22,060
allocation list two shared resource list

268
00:11:22,060 --> 00:11:24,970
that takes two arguments which is a

269
00:11:24,970 --> 00:11:27,550
resource list header or one of which is

270
00:11:27,550 --> 00:11:29,590
the resource list header which the

271
00:11:29,590 --> 00:11:32,860
attacker controlled for whatever reason

272
00:11:32,860 --> 00:11:36,700
it actually allocated seven seven

273
00:11:36,700 --> 00:11:38,860
headers but was only checking for six

274
00:11:38,860 --> 00:11:40,480
which meant the attacker could pass in

275
00:11:40,480 --> 00:11:42,400
additional information which allowed

276
00:11:42,400 --> 00:11:44,170
them to go down the chain of

277
00:11:44,170 --> 00:11:47,170
exploitation they ultimately used that

278
00:11:47,170 --> 00:11:50,440
to allocate to shared memory regions and

279
00:11:50,440 --> 00:11:53,290
then start 100 threads to groom the heap

280
00:11:53,290 --> 00:11:57,940
for exploitation and they also abuse how

281
00:11:57,940 --> 00:12:01,030
mock the the kernel messages can have

282
00:12:01,030 --> 00:12:03,880
out of line data so a lot of the exploit

283
00:12:03,880 --> 00:12:06,130
chains involve overwriting pointers or

284
00:12:06,130 --> 00:12:08,760
dangling pointers that allow them to

285
00:12:08,760 --> 00:12:12,750
continue going down to get further into

286
00:12:12,750 --> 00:12:15,580
ultimately executing code outside of a

287
00:12:15,580 --> 00:12:18,520
sandbox and one of the techniques they

288
00:12:18,520 --> 00:12:22,810
use in all five chains to deal with the

289
00:12:22,810 --> 00:12:25,300
process level sandboxing is enumerate in

290
00:12:25,300 --> 00:12:27,790
the entire process structure which has a

291
00:12:27,790 --> 00:12:31,480
label under you creds that deal with its

292
00:12:31,480 --> 00:12:33,580
permissions they copy the permission of

293
00:12:33,580 --> 00:12:36,820
the sandbox permissions for launch D and

294
00:12:36,820 --> 00:12:39,330
put them in place in the first chain

295
00:12:39,330 --> 00:12:41,560
they never change it back they just

296
00:12:41,560 --> 00:12:44,170
leave it with launch DS permissions and

297
00:12:44,170 --> 00:12:46,330
the other four chains they actually

298
00:12:46,330 --> 00:12:49,060
rewrite it back to something valid but

299
00:12:49,060 --> 00:12:51,400
it doesn't persist across reboots so if

300
00:12:51,400 --> 00:12:52,810
you've got this malware on your iPhone

301
00:12:52,810 --> 00:12:54,940
if you rebooted your phone you would be

302
00:12:54,940 --> 00:12:58,150
clear in terms of the now where but

303
00:12:58,150 --> 00:12:59,830
generally when's the last time anybody's

304
00:12:59,830 --> 00:13:03,070
rebooted in my phone it usually doesn't

305
00:13:03,070 --> 00:13:05,110
happen one of the problems with this

306
00:13:05,110 --> 00:13:05,500
chain

307
00:13:05,500 --> 00:13:07,990
is that it didn't have any checking that

308
00:13:07,990 --> 00:13:10,210
malware was already installed so it

309
00:13:10,210 --> 00:13:11,890
would it could have the possibility of

310
00:13:11,890 --> 00:13:13,720
reinfecting itself and have multiple

311
00:13:13,720 --> 00:13:16,540
versions of the payload actually running

312
00:13:16,540 --> 00:13:18,610
and we'll talk about that in the future

313
00:13:18,610 --> 00:13:23,890
future chains of how they do that they

314
00:13:23,890 --> 00:13:25,990
rely on a kernel task port to get

315
00:13:25,990 --> 00:13:28,060
readwrite access to anyone with rights

316
00:13:28,060 --> 00:13:29,560
for it which they give themselves rights

317
00:13:29,560 --> 00:13:33,760
for it to corrupt a memory which I said

318
00:13:33,760 --> 00:13:35,740
allowed them to write things in in the

319
00:13:35,740 --> 00:13:38,320
kernel space there is a couple of other

320
00:13:38,320 --> 00:13:41,830
ways they bypass policy and how they do

321
00:13:41,830 --> 00:13:46,750
that here is that every device also has

322
00:13:46,750 --> 00:13:50,110
a system platform policy that's in there

323
00:13:50,110 --> 00:13:53,500
it's stored on the device in a protected

324
00:13:53,500 --> 00:13:55,150
area on the disk so it can't be modified

325
00:13:55,150 --> 00:13:58,240
but it's only made operational in memory

326
00:13:58,240 --> 00:14:01,960
so you if you have access to write right

327
00:14:01,960 --> 00:14:03,370
into memory then you could just change

328
00:14:03,370 --> 00:14:05,140
the platform policy directed memory

329
00:14:05,140 --> 00:14:07,600
again you don't have persistence but on

330
00:14:07,600 --> 00:14:09,160
the iPhone it doesn't really matter

331
00:14:09,160 --> 00:14:10,930
because few people ever actually rebait

332
00:14:10,930 --> 00:14:14,830
their iPhones so they changed the

333
00:14:14,830 --> 00:14:17,230
pointer and remove that policy that

334
00:14:17,230 --> 00:14:19,750
grants process execution then they

335
00:14:19,750 --> 00:14:21,100
execute something out of the temp

336
00:14:21,100 --> 00:14:23,620
directory using POSIX

337
00:14:23,620 --> 00:14:27,520
and start that they also get around code

338
00:14:27,520 --> 00:14:30,460
signing earlier jail breaks of iPhones

339
00:14:30,460 --> 00:14:34,270
would simply just modify how the code

340
00:14:34,270 --> 00:14:37,630
signing verification works in on iPhone

341
00:14:37,630 --> 00:14:40,420
devices but the kernel also has an array

342
00:14:40,420 --> 00:14:44,800
of signing blobs of known trusted things

343
00:14:44,800 --> 00:14:46,480
that allow us to execute which it needs

344
00:14:46,480 --> 00:14:48,880
to for for the kernel and devices on

345
00:14:48,880 --> 00:14:51,970
there they simply just add the signing

346
00:14:51,970 --> 00:14:53,560
blob for their code in there to get it

347
00:14:53,560 --> 00:14:56,560
to work so at this point you bypass the

348
00:14:56,560 --> 00:14:58,600
sandbox whether you bypass the device

349
00:14:58,600 --> 00:15:01,030
device policy and you've bypassed the

350
00:15:01,030 --> 00:15:03,550
code signing protection by simply just

351
00:15:03,550 --> 00:15:06,430
avoiding the complexity of patching the

352
00:15:06,430 --> 00:15:08,140
the code signing verification and just

353
00:15:08,140 --> 00:15:10,390
adding something to an array that has to

354
00:15:10,390 --> 00:15:13,630
exist these techniques were used across

355
00:15:13,630 --> 00:15:17,610
all five chains also so some novelty and

356
00:15:17,610 --> 00:15:18,959
terms of how they bypassed some of the

357
00:15:18,959 --> 00:15:21,540
unique things or unique security

358
00:15:21,540 --> 00:15:24,149
features that have an iPhone these

359
00:15:24,149 --> 00:15:25,829
vulnerabilities I think are the among

360
00:15:25,829 --> 00:15:27,300
the most interesting the Android ones

361
00:15:27,300 --> 00:15:29,399
are relatively straightforward in terms

362
00:15:29,399 --> 00:15:32,310
of how they do it because but the iPhone

363
00:15:32,310 --> 00:15:34,560
with sandboxing all that other stuff

364
00:15:34,560 --> 00:15:36,329
there's lots of things ahead to be

365
00:15:36,329 --> 00:15:41,070
defeated along the way the second

366
00:15:41,070 --> 00:15:43,500
exploit chain started with vulnerable

367
00:15:43,500 --> 00:15:46,200
version of 10 3 and was patched in 10 3

368
00:15:46,200 --> 00:15:49,920
4 it abused another kernel bug that had

369
00:15:49,920 --> 00:15:52,890
a use after free vulnerability in IO

370
00:15:52,890 --> 00:15:56,610
surface we use a client it is known as

371
00:15:56,610 --> 00:15:59,459
the async bug it was reported publicly

372
00:15:59,459 --> 00:16:02,000
and by several people at the same time

373
00:16:02,000 --> 00:16:05,339
but in essence there wasn't really good

374
00:16:05,339 --> 00:16:09,089
code checking where you would if you

375
00:16:09,089 --> 00:16:11,250
called the async method and then checked

376
00:16:11,250 --> 00:16:13,110
with another method and surface root

377
00:16:13,110 --> 00:16:15,750
user client it would drop wakeport twice

378
00:16:15,750 --> 00:16:18,600
but make the reference count decremented

379
00:16:18,600 --> 00:16:21,540
only by one so it wasn't it wasn't

380
00:16:21,540 --> 00:16:23,250
keeping tractive its references so that

381
00:16:23,250 --> 00:16:25,310
you had Dane dangling important pointers

382
00:16:25,310 --> 00:16:28,410
it had in 10 3 there was a new

383
00:16:28,410 --> 00:16:31,740
mitigation for kernel task ports but it

384
00:16:31,740 --> 00:16:35,399
was easily bypassed so you just made a

385
00:16:35,399 --> 00:16:37,110
copy at a different kernel address and

386
00:16:37,110 --> 00:16:38,820
then you can modify what you wanted

387
00:16:38,820 --> 00:16:42,269
there there are others some changes also

388
00:16:42,269 --> 00:16:44,100
to this exploit chain and this one they

389
00:16:44,100 --> 00:16:46,440
actually then when they gave themselves

390
00:16:46,440 --> 00:16:48,449
permission to launch processes and

391
00:16:48,449 --> 00:16:51,720
bypass the sandbox after they execute it

392
00:16:51,720 --> 00:16:53,279
would go back in and then make the

393
00:16:53,279 --> 00:16:56,279
process tree valid again I'm not sure

394
00:16:56,279 --> 00:16:57,839
why you would do that you've owned the

395
00:16:57,839 --> 00:16:59,790
device I don't know of any tool that

396
00:16:59,790 --> 00:17:01,560
would check for that kind of setting off

397
00:17:01,560 --> 00:17:04,740
the top of my head but they spent the

398
00:17:04,740 --> 00:17:08,459
effort to make it cleaner the second

399
00:17:08,459 --> 00:17:10,349
bullet was something that was important

400
00:17:10,349 --> 00:17:12,959
on a new development they put in a boot

401
00:17:12,959 --> 00:17:15,900
flag that made no difference to how the

402
00:17:15,900 --> 00:17:20,069
device booted io PL but for whatever

403
00:17:20,069 --> 00:17:23,160
reason at least in 10 3 Safari could

404
00:17:23,160 --> 00:17:24,809
check boot flags it was an allowed

405
00:17:24,809 --> 00:17:27,209
permission and allowed function within

406
00:17:27,209 --> 00:17:29,610
the Safari browser so very early on in

407
00:17:29,610 --> 00:17:30,720
the process

408
00:17:30,720 --> 00:17:32,520
would you Safari check if that boot flag

409
00:17:32,520 --> 00:17:34,020
is present and then just bail out

410
00:17:34,020 --> 00:17:36,059
upfront without going through the

411
00:17:36,059 --> 00:17:37,950
process of reloading the device so that

412
00:17:37,950 --> 00:17:39,630
multiple copies of malware wouldn't be

413
00:17:39,630 --> 00:17:42,480
running I can only imagine they got a

414
00:17:42,480 --> 00:17:44,460
whole lot of information with exploit

415
00:17:44,460 --> 00:17:45,960
chain one they decided to make it

416
00:17:45,960 --> 00:17:48,600
cleaner and spent real effort and did

417
00:17:48,600 --> 00:17:50,220
the first item at the same time for

418
00:17:50,220 --> 00:17:53,309
reasons they didn't really need to but

419
00:17:53,309 --> 00:17:55,110
they were thinking that you know making

420
00:17:55,110 --> 00:17:58,399
things cleaner as they went along

421
00:17:59,990 --> 00:18:02,400
exploit chain three they used a

422
00:18:02,400 --> 00:18:05,690
different boot boot argument io PL 14 I

423
00:18:05,690 --> 00:18:08,159
don't know why they changed it just an

424
00:18:08,159 --> 00:18:09,780
interesting anecdote that I that that

425
00:18:09,780 --> 00:18:12,120
was noticed was they changed a different

426
00:18:12,120 --> 00:18:15,360
boot flag early on in all of these

427
00:18:15,360 --> 00:18:17,340
processes it would do device enumeration

428
00:18:17,340 --> 00:18:18,750
to see what how much memory it had

429
00:18:18,750 --> 00:18:21,179
because that had had relevance to page

430
00:18:21,179 --> 00:18:23,490
sizes and the like what kind of device

431
00:18:23,490 --> 00:18:26,039
it was so new what kind of kernel a

432
00:18:26,039 --> 00:18:28,280
specific kernel build that was running

433
00:18:28,280 --> 00:18:31,530
so by the very nature of these exploit

434
00:18:31,530 --> 00:18:33,210
chains they only work and defined

435
00:18:33,210 --> 00:18:34,710
versions so I don't know why you would

436
00:18:34,710 --> 00:18:37,110
use a different boot flag but they did

437
00:18:37,110 --> 00:18:40,620
and its unique where if you knew what to

438
00:18:40,620 --> 00:18:41,909
look for you'd be able to find that a

439
00:18:41,909 --> 00:18:45,000
device had been exploited in this case

440
00:18:45,000 --> 00:18:47,340
it relies on a bound bound checking

441
00:18:47,340 --> 00:18:48,270
error so an entirely different

442
00:18:48,270 --> 00:18:55,470
vulnerability that came into play when

443
00:18:55,470 --> 00:18:57,299
they refactored code right this is now

444
00:18:57,299 --> 00:18:59,909
iOS version 11 and not 10 so they went

445
00:18:59,909 --> 00:19:01,980
back up a refactored code as people do

446
00:19:01,980 --> 00:19:03,450
with major revisions every now and then

447
00:19:03,450 --> 00:19:06,200
and for whatever reason they changed

448
00:19:06,200 --> 00:19:09,720
they changed something from a comparison

449
00:19:09,720 --> 00:19:13,049
to a not equal it made sense to the

450
00:19:13,049 --> 00:19:15,840
developer at the time theoretically any

451
00:19:15,840 --> 00:19:18,270
kind of code diagnostic tools or fuzzing

452
00:19:18,270 --> 00:19:20,820
would have caught this or should have

453
00:19:20,820 --> 00:19:23,120
caught it I have no idea what Apple uses

454
00:19:23,120 --> 00:19:25,710
but ultimately this helped the attacker

455
00:19:25,710 --> 00:19:27,630
escape the sandbox so they can run some

456
00:19:27,630 --> 00:19:30,150
of those commands at ultimately execute

457
00:19:30,150 --> 00:19:32,510
code on the machine on the on the device

458
00:19:32,510 --> 00:19:35,400
so in effect I said they broke their own

459
00:19:35,400 --> 00:19:37,770
bounds checking which should have been

460
00:19:37,770 --> 00:19:41,190
caught by standard code diagnostic tools

461
00:19:41,190 --> 00:19:42,920
the attackers then

462
00:19:42,920 --> 00:19:45,620
did a heap spray targeting a specific

463
00:19:45,620 --> 00:19:49,300
service media server D because it was

464
00:19:49,300 --> 00:19:52,520
accessible to the vulnerable IO ket

465
00:19:52,520 --> 00:19:54,920
driver so they spent real effort going

466
00:19:54,920 --> 00:19:56,450
on the level figuring out how they can

467
00:19:56,450 --> 00:19:59,390
get to the next step in their but a

468
00:19:59,390 --> 00:20:01,850
relatively simple error of just changing

469
00:20:01,850 --> 00:20:04,100
the comparison allowed them to go

470
00:20:04,100 --> 00:20:07,040
further fairly simple to fix but it

471
00:20:07,040 --> 00:20:09,110
persisted for a long time between 1100

472
00:20:09,110 --> 00:20:14,630
and 11 for one exploit chained for used

473
00:20:14,630 --> 00:20:16,250
a different daemon

474
00:20:16,250 --> 00:20:18,560
that wasn't sandboxed in the first place

475
00:20:18,560 --> 00:20:23,000
CF prefs D it also profound zan unmount

476
00:20:23,000 --> 00:20:27,290
a unbounded memory move with an argument

477
00:20:27,290 --> 00:20:28,820
of a length that the attacker could

478
00:20:28,820 --> 00:20:31,880
control which it should be self-evident

479
00:20:31,880 --> 00:20:34,700
why that's an unwise thing it was only

480
00:20:34,700 --> 00:20:38,120
valid for a relatively short period of

481
00:20:38,120 --> 00:20:41,690
time between 12 and 12 o and 12:1 that

482
00:20:41,690 --> 00:20:45,350
daemon also uses X PC which allows it to

483
00:20:45,350 --> 00:20:47,000
be exploited because it doesn't use that

484
00:20:47,000 --> 00:20:50,540
service correctly and for whatever

485
00:20:50,540 --> 00:20:52,960
reason that wasn't corrected either

486
00:20:52,960 --> 00:20:56,060
again a heap and a port spray to exploit

487
00:20:56,060 --> 00:20:58,400
the kernel and go through the chain of

488
00:20:58,400 --> 00:21:02,390
events to ultimately launch a process in

489
00:21:02,390 --> 00:21:05,630
this case with 12 they could no young no

490
00:21:05,630 --> 00:21:09,290
longer use boot Flags as an indicator

491
00:21:09,290 --> 00:21:10,970
that the device was compromised it was

492
00:21:10,970 --> 00:21:14,330
no longer an accessible query in iOS 12

493
00:21:14,330 --> 00:21:16,700
so what they did is changed a kernel

494
00:21:16,700 --> 00:21:19,820
parameter of the max files per proc

495
00:21:19,820 --> 00:21:24,230
setting to 0-2 FF I believe

496
00:21:24,230 --> 00:21:28,220
off the top of my head so whatever 256

497
00:21:28,220 --> 00:21:31,580
times 3 is so if there was a specific

498
00:21:31,580 --> 00:21:34,040
string set there a specific integer set

499
00:21:34,040 --> 00:21:35,720
there they would know the device is

500
00:21:35,720 --> 00:21:37,370
compromised and with a number that high

501
00:21:37,370 --> 00:21:39,860
probably would never impact a device in

502
00:21:39,860 --> 00:21:44,840
a real world so fact I don't have no

503
00:21:44,840 --> 00:21:46,670
idea why you'd need that many files open

504
00:21:46,670 --> 00:21:48,170
for process on an iPhone in the first

505
00:21:48,170 --> 00:21:48,620
place

506
00:21:48,620 --> 00:21:50,300
so they changed their boot flag first

507
00:21:50,300 --> 00:21:52,910
therefore not there there the flag they

508
00:21:52,910 --> 00:21:55,380
used to detect compromises and

509
00:21:55,380 --> 00:22:01,230
one simultaneously with they overlap not

510
00:22:01,230 --> 00:22:03,900
completely you know but exploit chain

511
00:22:03,900 --> 00:22:07,110
five also existed they only used for for

512
00:22:07,110 --> 00:22:09,600
a little while because it wasn't as

513
00:22:09,600 --> 00:22:12,060
reliable of an exploit but exploit chain

514
00:22:12,060 --> 00:22:14,940
five was available from eleven for one

515
00:22:14,940 --> 00:22:16,740
to twelve one one

516
00:22:16,740 --> 00:22:18,570
there was only one vulnerability that it

517
00:22:18,570 --> 00:22:20,070
had to exploit it didn't have to go

518
00:22:20,070 --> 00:22:23,460
through a couple ones and this one is

519
00:22:23,460 --> 00:22:26,400
the most interesting because it's

520
00:22:26,400 --> 00:22:28,440
unclear how this would have happened if

521
00:22:28,440 --> 00:22:30,660
he followed any real development

522
00:22:30,660 --> 00:22:36,000
methodology iOS I think eight they were

523
00:22:36,000 --> 00:22:37,740
starting to introduce the notion of

524
00:22:37,740 --> 00:22:39,510
vouchers but it was never fully

525
00:22:39,510 --> 00:22:42,300
implemented and coded but for some

526
00:22:42,300 --> 00:22:44,760
reason it was still in the codebase and

527
00:22:44,760 --> 00:22:47,430
shipped if you actually tried to use it

528
00:22:47,430 --> 00:22:49,470
in the conventional way it would cause a

529
00:22:49,470 --> 00:22:51,210
kernel panic and the phone would just

530
00:22:51,210 --> 00:22:54,900
lock up and and reboot itself so somehow

531
00:22:54,900 --> 00:22:58,650
this partially implemented code got into

532
00:22:58,650 --> 00:23:00,390
the code base and shipped out to the

533
00:23:00,390 --> 00:23:07,650
world so that's kind of an interesting

534
00:23:07,650 --> 00:23:09,450
story I don't think Apple ever answered

535
00:23:09,450 --> 00:23:11,760
the question for that but they create

536
00:23:11,760 --> 00:23:13,710
before Target and after vouchers and

537
00:23:13,710 --> 00:23:16,950
destroy them but the thread still points

538
00:23:16,950 --> 00:23:18,720
to the freed target voucher because it

539
00:23:18,720 --> 00:23:21,030
doesn't do the the cleanup correctly in

540
00:23:21,030 --> 00:23:22,860
the destruction because it wasn't fully

541
00:23:22,860 --> 00:23:24,510
implemented it didn't have all of the

542
00:23:24,510 --> 00:23:27,030
the hardened checks that you would

543
00:23:27,030 --> 00:23:29,460
expect in actual production code to have

544
00:23:29,460 --> 00:23:32,190
they convert the voucher to a port do

545
00:23:32,190 --> 00:23:34,710
another round of that and ultimately

546
00:23:34,710 --> 00:23:36,510
they can create fake kernel tasks in the

547
00:23:36,510 --> 00:23:37,770
buffer that have read/write permissions

548
00:23:37,770 --> 00:23:40,380
to memory at which point they can again

549
00:23:40,380 --> 00:23:42,360
start the process of enumerated process

550
00:23:42,360 --> 00:23:44,640
tables giving themselves permissions to

551
00:23:44,640 --> 00:23:46,890
launch outside of a sandbox changing the

552
00:23:46,890 --> 00:23:49,890
system policy putting things into the

553
00:23:49,890 --> 00:23:51,900
array so that they can execute a process

554
00:23:51,900 --> 00:23:54,240
out of the temp directory of the same

555
00:23:54,240 --> 00:24:00,150
code so the five exploit chains that are

556
00:24:00,150 --> 00:24:02,100
fairly complicated that I went over

557
00:24:02,100 --> 00:24:04,380
relatively quickly the Android exploits

558
00:24:04,380 --> 00:24:06,840
were relatively straightforward

559
00:24:06,840 --> 00:24:08,330
vulnerabilities in the Chrome browser

560
00:24:08,330 --> 00:24:12,029
starting from version 39 up to 73 there

561
00:24:12,029 --> 00:24:14,010
were gaps of some versions that weren't

562
00:24:14,010 --> 00:24:15,659
vulnerable either because they were

563
00:24:15,659 --> 00:24:18,570
patched or because there was some code

564
00:24:18,570 --> 00:24:20,220
change that made the exploit not work

565
00:24:20,220 --> 00:24:21,690
that was reintroduced into a later

566
00:24:21,690 --> 00:24:25,440
version so chrome 40 wasn't vulnerable

567
00:24:25,440 --> 00:24:27,330
but chrome 41 was vulnerable to the same

568
00:24:27,330 --> 00:24:32,760
exploit in Rome 39 ultimately reduced

569
00:24:32,760 --> 00:24:35,100
exploitation to one-click type of

570
00:24:35,100 --> 00:24:36,630
operations right the user would still

571
00:24:36,630 --> 00:24:39,840
have to do something to be victimized

572
00:24:39,840 --> 00:24:43,019
but it was down to one click each

573
00:24:43,019 --> 00:24:46,070
exploit ran the same shellcode so in

574
00:24:46,070 --> 00:24:49,919
essence they developed their you know

575
00:24:49,919 --> 00:24:51,750
their exploit kit as you would in

576
00:24:51,750 --> 00:24:54,179
Metasploit where the vulnerability and

577
00:24:54,179 --> 00:24:56,970
the shellcode were discrete objects that

578
00:24:56,970 --> 00:25:00,690
did different things and again operating

579
00:25:00,690 --> 00:25:03,360
through hidden hidden hidden iframes in

580
00:25:03,360 --> 00:25:08,279
JavaScript the iPhone malware had access

581
00:25:08,279 --> 00:25:09,720
to all the back-end databases on the

582
00:25:09,720 --> 00:25:11,460
phone right so some of the typical

583
00:25:11,460 --> 00:25:12,870
things that you would expect that had

584
00:25:12,870 --> 00:25:14,970
images it had access to the contacts it

585
00:25:14,970 --> 00:25:16,679
had access to photos that had access to

586
00:25:16,679 --> 00:25:19,710
the GPS the other interesting anecdotes

587
00:25:19,710 --> 00:25:21,179
is that often when we think about

588
00:25:21,179 --> 00:25:24,990
encrypted messaging apps we think that

589
00:25:24,990 --> 00:25:27,200
they're just encrypted at all places the

590
00:25:27,200 --> 00:25:29,399
reality is is that in the sequel like

591
00:25:29,399 --> 00:25:33,299
databases on the device these messages

592
00:25:33,299 --> 00:25:36,019
are available in clear text which

593
00:25:36,019 --> 00:25:38,159
theoretically in a general case isn't

594
00:25:38,159 --> 00:25:40,679
that much of a risk because if I don't

595
00:25:40,679 --> 00:25:42,299
lose my phone and I don't unlock my

596
00:25:42,299 --> 00:25:43,860
phone then somebody can't get access to

597
00:25:43,860 --> 00:25:45,320
the underlying sequel like databases

598
00:25:45,320 --> 00:25:48,210
well in this case you know the attacker

599
00:25:48,210 --> 00:25:50,370
gets root there on the device they can

600
00:25:50,370 --> 00:25:52,169
see this stuff directly in the clear and

601
00:25:52,169 --> 00:25:53,639
the malware would ship the sequel like

602
00:25:53,639 --> 00:25:56,130
database whole and entire to the command

603
00:25:56,130 --> 00:25:59,250
and control server so you got in access

604
00:25:59,250 --> 00:26:04,810
to to whatsapp and all the

605
00:26:04,810 --> 00:26:07,120
what's happened telegram with the two

606
00:26:07,120 --> 00:26:09,040
encrypted apps it had access to Facebook

607
00:26:09,040 --> 00:26:12,640
message or two it also got access to the

608
00:26:12,640 --> 00:26:14,590
keychain so get things like wireless

609
00:26:14,590 --> 00:26:16,690
access point passwords and and all the

610
00:26:16,690 --> 00:26:18,580
stuff that's in the keychain it would

611
00:26:18,580 --> 00:26:20,830
also take the various long-lived tokens

612
00:26:20,830 --> 00:26:24,010
at which point you know I log in the

613
00:26:24,010 --> 00:26:25,660
Gmail once it stores the token on the

614
00:26:25,660 --> 00:26:27,520
device I steal that device put it steal

615
00:26:27,520 --> 00:26:28,990
and steal it from the device put it on

616
00:26:28,990 --> 00:26:30,370
somewhere else I've got access to your

617
00:26:30,370 --> 00:26:32,350
Gmail account even after you've cleaned

618
00:26:32,350 --> 00:26:35,890
up your phone so even though none of

619
00:26:35,890 --> 00:26:37,870
this malware would proceed well actually

620
00:26:37,870 --> 00:26:39,940
the the Android malware would did

621
00:26:39,940 --> 00:26:41,830
persist over reboot so we'll talk about

622
00:26:41,830 --> 00:26:43,780
that the iPhone malware didn't but they

623
00:26:43,780 --> 00:26:46,270
stole a lot of off creds to get access

624
00:26:46,270 --> 00:26:48,550
to information even after the phone

625
00:26:48,550 --> 00:26:49,840
would have been rebooted and cleaned up

626
00:26:49,840 --> 00:26:52,360
that gives them a whole lot of stuff the

627
00:26:52,360 --> 00:26:54,610
various apps it targeted viber voxer

628
00:26:54,610 --> 00:26:59,200
telegram Gmail QQ mail whatsapp those

629
00:26:59,200 --> 00:27:00,520
were in the early versions earlier

630
00:27:00,520 --> 00:27:04,240
versions that targeted to be shion's the

631
00:27:04,240 --> 00:27:06,490
later versions against the weaker

632
00:27:06,490 --> 00:27:08,470
muslims included yahoo mail outlook

633
00:27:08,470 --> 00:27:11,740
Nettie's mail master which i've never

634
00:27:11,740 --> 00:27:13,810
heard about until looking at this at

635
00:27:13,810 --> 00:27:16,480
this malware Skype Facebook and WeChat

636
00:27:16,480 --> 00:27:19,780
so a lot of typical applications then it

637
00:27:19,780 --> 00:27:21,310
basically would just ship out the sequel

638
00:27:21,310 --> 00:27:23,770
Lite databases behind that and then

639
00:27:23,770 --> 00:27:26,980
beacon in HTTP in clear to exfiltrate

640
00:27:26,980 --> 00:27:30,520
data there's some you know commentary

641
00:27:30,520 --> 00:27:31,810
about why they would do that in the

642
00:27:31,810 --> 00:27:34,450
clear if you're targeting people inside

643
00:27:34,450 --> 00:27:36,520
a regime and and your god on the wires

644
00:27:36,520 --> 00:27:38,020
you don't really have that much of a

645
00:27:38,020 --> 00:27:40,570
need of encryption and encryption gives

646
00:27:40,570 --> 00:27:43,050
artifacts that might help correlation

647
00:27:43,050 --> 00:27:45,550
some versions the Android stuff did

648
00:27:45,550 --> 00:27:48,880
actually use encryption but they they at

649
00:27:48,880 --> 00:27:50,860
least the modern versions I haven't been

650
00:27:50,860 --> 00:27:52,780
able to go all the way back but in

651
00:27:52,780 --> 00:27:54,430
enumerate all the SSL certs they were

652
00:27:54,430 --> 00:27:56,980
using let's encrypt which doesn't really

653
00:27:56,980 --> 00:27:59,020
give you many artifacts to work with in

654
00:27:59,020 --> 00:28:02,890
terms of attribution the Android malware

655
00:28:02,890 --> 00:28:06,130
author apparently likes brown liquor the

656
00:28:06,130 --> 00:28:08,530
whiskey bourbon scotch are his monikers

657
00:28:08,530 --> 00:28:11,410
the app was dubbed moonshine by citizen

658
00:28:11,410 --> 00:28:15,160
lab and those are the actual names the

659
00:28:15,160 --> 00:28:17,389
malware author gave it for the stages of

660
00:28:17,389 --> 00:28:20,299
what their malware did whisky was the

661
00:28:20,299 --> 00:28:22,339
initial vowel now downloader that tried

662
00:28:22,339 --> 00:28:24,769
to unpack lib bourbon and overwrite a

663
00:28:24,769 --> 00:28:27,379
legitimate shared library to give it

664
00:28:27,379 --> 00:28:30,289
persistence so it looked for facebook

665
00:28:30,289 --> 00:28:32,929
messenger we chat or QQ and over light

666
00:28:32,929 --> 00:28:35,239
overwrite a specific shared library with

667
00:28:35,239 --> 00:28:38,539
Lib bourbon bourbon then would start as

668
00:28:38,539 --> 00:28:41,149
part of the app and it would side load

669
00:28:41,149 --> 00:28:44,539
scotch as a Java app that did the work

670
00:28:44,539 --> 00:28:47,599
of checking in exfiltrating data in

671
00:28:47,599 --> 00:28:51,049
doing the work of the adversary it had a

672
00:28:51,049 --> 00:28:54,759
hard-coded user agent and uses a unique

673
00:28:54,759 --> 00:28:57,859
IP checking utility that's no longer up

674
00:28:57,859 --> 00:29:00,799
of get IP name I haven't seen that or

675
00:29:00,799 --> 00:29:02,539
others haven't seen that lately but that

676
00:29:02,539 --> 00:29:05,599
service is now down they didn't use the

677
00:29:05,599 --> 00:29:07,039
conventional things that most malware

678
00:29:07,039 --> 00:29:10,849
authors you know have done the last

679
00:29:10,849 --> 00:29:12,469
component of this was a while targeting

680
00:29:12,469 --> 00:29:15,619
again it was malware less you know but

681
00:29:15,619 --> 00:29:17,389
it was part of the campaign used

682
00:29:17,389 --> 00:29:19,369
whatsapp or Facebook messenger whatever

683
00:29:19,369 --> 00:29:22,070
it could reach victims and this was

684
00:29:22,070 --> 00:29:24,649
usually more spearfishing than just mass

685
00:29:24,649 --> 00:29:26,059
targeting they were targeting an

686
00:29:26,059 --> 00:29:27,409
individual because they were prominent

687
00:29:27,409 --> 00:29:30,589
in some way would ask him a variety of

688
00:29:30,589 --> 00:29:32,690
things suppose it's journalists whatever

689
00:29:32,690 --> 00:29:35,749
got them to click a message to then to

690
00:29:35,749 --> 00:29:37,839
then get the OAuth credentials

691
00:29:37,839 --> 00:29:41,269
so in closing after all of this was

692
00:29:41,269 --> 00:29:43,279
publicly reported almost all of this has

693
00:29:43,279 --> 00:29:44,719
been cleaned up and removed from the

694
00:29:44,719 --> 00:29:46,509
internet things don't resolve anymore

695
00:29:46,509 --> 00:29:49,029
there have been similar campaigns that

696
00:29:49,029 --> 00:29:53,809
exploit PC pcs as opposed to iPhones but

697
00:29:53,809 --> 00:29:56,389
when your if you were targeting somebody

698
00:29:56,389 --> 00:29:58,099
like me for intelligence you're probably

699
00:29:58,099 --> 00:30:00,169
more interested what's on my laptop and

700
00:30:00,169 --> 00:30:01,820
then what's on my phone if you're

701
00:30:01,820 --> 00:30:03,979
interesting interested in throwing me in

702
00:30:03,979 --> 00:30:06,529
a region camp I want to know physically

703
00:30:06,529 --> 00:30:09,769
where you are so that design choice by

704
00:30:09,769 --> 00:30:11,570
these attackers highlights the physical

705
00:30:11,570 --> 00:30:13,489
risks that these individuals are

706
00:30:13,489 --> 00:30:16,579
comparable compromised make or the

707
00:30:16,579 --> 00:30:18,259
physical risk that they're under the

708
00:30:18,259 --> 00:30:20,509
Android started in 2014 the iPhone

709
00:30:20,509 --> 00:30:23,509
started in 2016 but there are a couple

710
00:30:23,509 --> 00:30:25,309
of detection techniques you can use that

711
00:30:25,309 --> 00:30:27,319
hard-coded user agent but I imagine that

712
00:30:27,319 --> 00:30:29,269
will be changed in future versions the

713
00:30:29,269 --> 00:30:30,680
malware

714
00:30:30,680 --> 00:30:33,920
but since they use SSL and TLS encrypt

715
00:30:33,920 --> 00:30:36,260
for some of the websites anyway

716
00:30:36,260 --> 00:30:39,200
fuzzy searching for key terms that are

717
00:30:39,200 --> 00:30:41,030
relevant to Tibet and Weger Muslims

718
00:30:41,030 --> 00:30:43,880
would give you some proactive detection

719
00:30:43,880 --> 00:30:46,250
when people are starting to set up

720
00:30:46,250 --> 00:30:47,750
infrastructure that would target those

721
00:30:47,750 --> 00:30:52,450
communities any questions

