1
00:00:00,079 --> 00:00:02,490
ok ladies and gentlemen if you'd like to

2
00:00:02,490 --> 00:00:03,659
take your seats

3
00:00:03,659 --> 00:00:05,100
we're gonna get this session going

4
00:00:05,100 --> 00:00:07,020
please do respect the session and the

5
00:00:07,020 --> 00:00:08,940
other attendees keep your talking and

6
00:00:08,940 --> 00:00:09,900
typing to a minimum

7
00:00:09,900 --> 00:00:11,370
there'll be time for questions at the

8
00:00:11,370 --> 00:00:13,259
ends but in the meantime let me

9
00:00:13,259 --> 00:00:14,759
introduce Patrick from Jam and he's

10
00:00:14,759 --> 00:00:16,470
going to talk to us about some OSX and

11
00:00:16,470 --> 00:00:20,029
some cyber espionage in the Middle East

12
00:00:20,029 --> 00:00:23,100
awesome Aloha and welcome to my talk

13
00:00:23,100 --> 00:00:26,369
cyber espionage in the Middle East so

14
00:00:26,369 --> 00:00:28,890
today we're gonna be taking a deep dive

15
00:00:28,890 --> 00:00:31,710
into an intriguing piece of Matt Bauer

16
00:00:31,710 --> 00:00:35,760
named winter so much in my name is

17
00:00:35,760 --> 00:00:37,680
Patrick I am the creator of the

18
00:00:37,680 --> 00:00:40,110
objective-c Mac security website and

19
00:00:40,110 --> 00:00:42,540
tool suite previously a co-founder at

20
00:00:42,540 --> 00:00:44,670
digital security we were recently

21
00:00:44,670 --> 00:00:47,219
acquired by Jeff so now I am a jammed

22
00:00:47,219 --> 00:00:50,460
employee so today we're gonna be talking

23
00:00:50,460 --> 00:00:55,410
pretty nerdily about OSX Wintel so first

24
00:00:55,410 --> 00:00:57,750
we will briefly discuss some background

25
00:00:57,750 --> 00:00:59,730
information such as some previous

26
00:00:59,730 --> 00:01:01,649
research and also briefly discuss the

27
00:01:01,649 --> 00:01:04,559
apt group responsible for creating the

28
00:01:04,559 --> 00:01:05,010
malware

29
00:01:05,010 --> 00:01:07,850
after that will then discuss wind tails

30
00:01:07,850 --> 00:01:10,080
infection and exploitation vector and

31
00:01:10,080 --> 00:01:12,270
then also talk about its persistent

32
00:01:12,270 --> 00:01:14,189
installation and of course its

33
00:01:14,189 --> 00:01:16,350
capabilities and then we'll end by

34
00:01:16,350 --> 00:01:18,900
discussing some generic ways that we can

35
00:01:18,900 --> 00:01:23,340
detect this malware and its variants all

36
00:01:23,340 --> 00:01:24,840
right so let's dive in starting with

37
00:01:24,840 --> 00:01:28,409
some background information so we

38
00:01:28,409 --> 00:01:30,090
learned about wind tail from a

39
00:01:30,090 --> 00:01:33,600
presentation by Taha of dark matter in

40
00:01:33,600 --> 00:01:35,280
his presentation which was titled

41
00:01:35,280 --> 00:01:38,369
in the trail of the wind shift apt he

42
00:01:38,369 --> 00:01:41,130
talked about a new apt group called wind

43
00:01:41,130 --> 00:01:43,950
shift that was involved in extremely

44
00:01:43,950 --> 00:01:46,560
targeted attacks of a handful of

45
00:01:46,560 --> 00:01:49,460
individuals in both the government and

46
00:01:49,460 --> 00:01:51,720
infrastructure projects of a very

47
00:01:51,720 --> 00:01:53,700
specific certain Middle Eastern

48
00:01:53,700 --> 00:01:57,030
government he also briefly discussed two

49
00:01:57,030 --> 00:01:59,219
of their Mac tools including wind tail

50
00:01:59,219 --> 00:02:01,920
and another one called wind tape so our

51
00:02:01,920 --> 00:02:04,170
talk today we're gonna build upon his

52
00:02:04,170 --> 00:02:07,500
research and provide a technical deep

53
00:02:07,500 --> 00:02:10,470
deep dive into the internals of the wind

54
00:02:10,470 --> 00:02:12,299
tail Bauer

55
00:02:12,299 --> 00:02:17,260
unit 42 of palo alto labs also published

56
00:02:17,260 --> 00:02:19,900
a blog about the apt group and provided

57
00:02:19,900 --> 00:02:22,690
these nice graphics that kind of show a

58
00:02:22,690 --> 00:02:25,780
timeline of the activity so in short we

59
00:02:25,780 --> 00:02:28,329
can see that the wind shift a peaky

60
00:02:28,329 --> 00:02:30,670
group began their activity or at least

61
00:02:30,670 --> 00:02:33,099
their activity was detected in early

62
00:02:33,099 --> 00:02:37,840
2017 and it continued well into 2018 so

63
00:02:37,840 --> 00:02:41,200
fairly recently now today as i mentioned

64
00:02:41,200 --> 00:02:42,849
we're not really gonna spend a ton of

65
00:02:42,849 --> 00:02:45,790
time talking about the apt group as Taha

66
00:02:45,790 --> 00:02:47,620
really did a great job so if you're

67
00:02:47,620 --> 00:02:49,060
interested kind of more about their

68
00:02:49,060 --> 00:02:51,459
group motivations and some attribution I

69
00:02:51,459 --> 00:02:53,560
recommend checking out his presentation

70
00:02:53,560 --> 00:02:55,540
instead as we noted what we're gonna do

71
00:02:55,540 --> 00:02:57,819
is dive in and tear apart wind shifts

72
00:02:57,819 --> 00:03:01,209
mane Mac OS implant wind tail so let's

73
00:03:01,209 --> 00:03:03,280
start by first talking about its

74
00:03:03,280 --> 00:03:05,170
infection vector and how it is

75
00:03:05,170 --> 00:03:09,069
persistently installed there's a first

76
00:03:09,069 --> 00:03:10,180
challenge and that was actually to find

77
00:03:10,180 --> 00:03:11,950
a sample because as far as I was aware

78
00:03:11,950 --> 00:03:14,019
there wasn't a sample that was publicly

79
00:03:14,019 --> 00:03:16,959
made available for analysis however in

80
00:03:16,959 --> 00:03:19,870
Taha'a talk he provided a screenshot of

81
00:03:19,870 --> 00:03:22,720
a malicious email that was sent to one

82
00:03:22,720 --> 00:03:24,280
of the victims and in this screenshot

83
00:03:24,280 --> 00:03:26,530
there was a name of the malware meeting

84
00:03:26,530 --> 00:03:29,669
underscore agenda dot zip phil stokes

85
00:03:29,669 --> 00:03:32,590
noted a security researcher found that

86
00:03:32,590 --> 00:03:34,389
by searching for this name on virus

87
00:03:34,389 --> 00:03:36,519
total revealed a single file that

88
00:03:36,519 --> 00:03:38,829
matched this name exactly which was

89
00:03:38,829 --> 00:03:42,160
detected albeit by only two engines as

90
00:03:42,160 --> 00:03:45,400
being malicious I figured there is

91
00:03:45,400 --> 00:03:47,889
likely more variants or specimens of

92
00:03:47,889 --> 00:03:50,440
this malware so we then used virus

93
00:03:50,440 --> 00:03:53,349
totals similar to search keyword and has

94
00:03:53,349 --> 00:03:56,169
found several new samples many that had

95
00:03:56,169 --> 00:03:59,199
zero signature based detection x' at the

96
00:03:59,199 --> 00:04:02,169
time they're all similarly named as you

97
00:04:02,169 --> 00:04:03,459
can see on the slide

98
00:04:03,459 --> 00:04:05,489
appearing to maybe masquerade as

99
00:04:05,489 --> 00:04:08,530
documents and analysis confirmed that

100
00:04:08,530 --> 00:04:11,199
yes indeed all these samples were actual

101
00:04:11,199 --> 00:04:13,120
wind tail samples although as i

102
00:04:13,120 --> 00:04:15,489
mentioned some were undetected at the

103
00:04:15,489 --> 00:04:18,190
time of this discovery so today we'll be

104
00:04:18,190 --> 00:04:20,140
sticking with a specimen a sample named

105
00:04:20,140 --> 00:04:23,020
final underscore presentation but all

106
00:04:23,020 --> 00:04:26,009
the samples are essential

107
00:04:26,009 --> 00:04:28,509
so speaking of this final underscore

108
00:04:28,509 --> 00:04:30,999
presentation dot zip if we download and

109
00:04:30,999 --> 00:04:33,490
extract it and unzip it it turns out

110
00:04:33,490 --> 00:04:36,279
it's a standard Mac OS application it's

111
00:04:36,279 --> 00:04:38,409
also signed although rather

112
00:04:38,409 --> 00:04:40,629
unsurprisingly Apple has now revoked the

113
00:04:40,629 --> 00:04:42,939
certificate for the malware and although

114
00:04:42,939 --> 00:04:45,159
the application is named final

115
00:04:45,159 --> 00:04:47,139
underscore presentation and has an icon

116
00:04:47,139 --> 00:04:49,960
that mimics a PowerPoint presentation if

117
00:04:49,960 --> 00:04:52,180
we look at the apps bundle and look at

118
00:04:52,180 --> 00:04:55,360
the main executable it is named user

119
00:04:55,360 --> 00:04:59,800
node so the wind shift ap key group used

120
00:04:59,800 --> 00:05:02,289
various methods to target and infect

121
00:05:02,289 --> 00:05:04,270
successfully Mac users in this

122
00:05:04,270 --> 00:05:06,610
middle-eastern government we saw in the

123
00:05:06,610 --> 00:05:08,740
previous slide from Taha'a presentation

124
00:05:08,740 --> 00:05:11,080
that one way that they targeted and

125
00:05:11,080 --> 00:05:13,689
infected these Mac users was by simply

126
00:05:13,689 --> 00:05:15,189
sending an email with the malware

127
00:05:15,189 --> 00:05:18,009
attached the goal or the idea was since

128
00:05:18,009 --> 00:05:20,770
the malware had an icon that mimicked a

129
00:05:20,770 --> 00:05:21,969
Word document or a PowerPoint

130
00:05:21,969 --> 00:05:24,610
presentation certain naive users might

131
00:05:24,610 --> 00:05:27,129
fall for that and just click and run the

132
00:05:27,129 --> 00:05:28,800
malware directly and infect themselves

133
00:05:28,800 --> 00:05:31,270
now that's really not that sophisticated

134
00:05:31,270 --> 00:05:34,120
and was likely rather unsuccessful so

135
00:05:34,120 --> 00:05:36,879
the wind shift a PP group also relied on

136
00:05:36,879 --> 00:05:39,819
a more sophisticated exploit which to me

137
00:05:39,819 --> 00:05:42,460
is rather the most interesting aspect of

138
00:05:42,460 --> 00:05:44,289
both the apt group and I think of the

139
00:05:44,289 --> 00:05:46,449
malware so here's a diagrammatic

140
00:05:46,449 --> 00:05:49,270
overview of the exploitation process

141
00:05:49,270 --> 00:05:52,029
basically once a user is tricked into

142
00:05:52,029 --> 00:05:54,279
going to a malicious website the website

143
00:05:54,279 --> 00:05:56,050
will automatically download a zip file

144
00:05:56,050 --> 00:05:58,449
which is then automatically unzipped and

145
00:05:58,449 --> 00:06:01,629
then this will launch an application via

146
00:06:01,629 --> 00:06:04,330
a custom URL scheme so let's look a

147
00:06:04,330 --> 00:06:06,189
little closer at exactly how this all

148
00:06:06,189 --> 00:06:08,139
works and leads to the user ultimately

149
00:06:08,139 --> 00:06:10,330
being infected with the wind tail

150
00:06:10,330 --> 00:06:13,240
backdoor so first we should note that

151
00:06:13,240 --> 00:06:16,289
the exploit abuses several legitimate

152
00:06:16,289 --> 00:06:20,319
features of Mac Mac OS there's no buffer

153
00:06:20,319 --> 00:06:21,520
overflows here there's no memory

154
00:06:21,520 --> 00:06:22,779
corruption vulnerabilities all just

155
00:06:22,779 --> 00:06:24,520
legitimate features that the attackers

156
00:06:24,520 --> 00:06:27,129
are leveraging to get code execution and

157
00:06:27,129 --> 00:06:29,860
install them our main to legitimate

158
00:06:29,860 --> 00:06:31,810
features that they abuse are the fact

159
00:06:31,810 --> 00:06:34,330
that Safari auto extracts certain files

160
00:06:34,330 --> 00:06:36,610
and that Mac OS will automatically

161
00:06:36,610 --> 00:06:38,880
register custom URL

162
00:06:38,880 --> 00:06:41,410
so by default if you're browsing the web

163
00:06:41,410 --> 00:06:43,900
with Safari and a website download the

164
00:06:43,900 --> 00:06:45,730
zip file or you download a zip file

165
00:06:45,730 --> 00:06:49,240
manually Safari will kindly Auto extract

166
00:06:49,240 --> 00:06:52,330
the zip zip zip file for you which you

167
00:06:52,330 --> 00:06:55,450
know that's not that bad per se however

168
00:06:55,450 --> 00:06:58,780
as we can see on the slide when this

169
00:06:58,780 --> 00:07:01,270
happens the unzipped application final

170
00:07:01,270 --> 00:07:03,460
presentation dot app hits the file

171
00:07:03,460 --> 00:07:06,070
system there is this daemon the launch

172
00:07:06,070 --> 00:07:08,980
services daemon or LSD which can be seen

173
00:07:08,980 --> 00:07:11,980
parsing the application and updating the

174
00:07:11,980 --> 00:07:13,810
database file automatically this is

175
00:07:13,810 --> 00:07:14,200
interesting

176
00:07:14,200 --> 00:07:15,850
right the user hasn't done anything at

177
00:07:15,850 --> 00:07:17,020
this point they haven't clicked anything

178
00:07:17,020 --> 00:07:18,580
just simply go on to the website and

179
00:07:18,580 --> 00:07:21,070
this zip file has been downloaded and

180
00:07:21,070 --> 00:07:23,590
Auto extracted so let's look at this a

181
00:07:23,590 --> 00:07:26,410
little more so if we take a peek at the

182
00:07:26,410 --> 00:07:28,720
malicious application specifically we

183
00:07:28,720 --> 00:07:30,880
pull apart its app bundle and look at

184
00:07:30,880 --> 00:07:34,690
its info.plist file we can see as we can

185
00:07:34,690 --> 00:07:36,340
see on the slide that there is a CF

186
00:07:36,340 --> 00:07:39,580
bundle URL types array and within that

187
00:07:39,580 --> 00:07:43,240
there is a custom URL scheme open URL 26

188
00:07:43,240 --> 00:07:44,500
to 2 double-oh-seven

189
00:07:44,500 --> 00:07:48,040
this is basically telling Mac OS hey I

190
00:07:48,040 --> 00:07:51,250
support a custom URL scheme which and

191
00:07:51,250 --> 00:07:53,560
this is important Mac OS will

192
00:07:53,560 --> 00:07:56,920
automatically register so via the LS

193
00:07:56,920 --> 00:07:58,300
register command this is a built-in

194
00:07:58,300 --> 00:08:01,120
utility in Mac OS we can dump the system

195
00:08:01,120 --> 00:08:03,010
database and we can see that the

196
00:08:03,010 --> 00:08:06,160
application well rather the malware once

197
00:08:06,160 --> 00:08:08,830
it's hit the file system this database

198
00:08:08,830 --> 00:08:11,620
now automatically creates an entry that

199
00:08:11,620 --> 00:08:13,900
map's the malware to this custom URL

200
00:08:13,900 --> 00:08:15,010
scheme and again I want to stress this

201
00:08:15,010 --> 00:08:16,840
happens automatically as soon as the app

202
00:08:16,840 --> 00:08:18,640
hits the file system again no user

203
00:08:18,640 --> 00:08:20,740
interaction involved at this point now

204
00:08:20,740 --> 00:08:23,260
once the malware has been registered at

205
00:08:23,260 --> 00:08:25,300
a has a handler for this custom URL

206
00:08:25,300 --> 00:08:28,210
scheme it can now be launched via any

207
00:08:28,210 --> 00:08:30,280
request for this custom URL scheme

208
00:08:30,280 --> 00:08:32,320
because Mac OS now has associated it

209
00:08:32,320 --> 00:08:34,719
with that scheme for example from

210
00:08:34,719 --> 00:08:37,570
JavaScript within a browser so here's

211
00:08:37,570 --> 00:08:39,880
some example code that realizes the

212
00:08:39,880 --> 00:08:41,919
exploit now I never had access to the

213
00:08:41,919 --> 00:08:44,110
apt groups actual exploit code but it's

214
00:08:44,110 --> 00:08:46,780
very easy for us to recreate similar

215
00:08:46,780 --> 00:08:49,000
code that will trigger these features or

216
00:08:49,000 --> 00:08:51,190
vulnerabilities so we can see it's a

217
00:08:51,190 --> 00:08:52,180
malicious web site

218
00:08:52,180 --> 00:08:53,860
not too fancy and the first thing it

219
00:08:53,860 --> 00:08:56,200
does is the auto download zip containing

220
00:08:56,200 --> 00:08:58,480
a malicious application as we mentioned

221
00:08:58,480 --> 00:09:01,450
Safari by default will extract this zip

222
00:09:01,450 --> 00:09:03,550
archive now this means there's an

223
00:09:03,550 --> 00:09:04,930
application sitting on the file system

224
00:09:04,930 --> 00:09:07,870
Mac OS notices this and parses the

225
00:09:07,870 --> 00:09:10,690
application and because it broadcasts or

226
00:09:10,690 --> 00:09:13,180
says it supports a custom URL scheme Mac

227
00:09:13,180 --> 00:09:16,209
OS will automatically register it once

228
00:09:16,209 --> 00:09:18,700
this has happened the web page via

229
00:09:18,700 --> 00:09:21,339
JavaScript will make a request to launch

230
00:09:21,339 --> 00:09:23,740
or open this app via the custom URL

231
00:09:23,740 --> 00:09:26,589
scheme now as the user clicks allow on

232
00:09:26,589 --> 00:09:28,779
the displayed pop-ups the malware will

233
00:09:28,779 --> 00:09:30,940
be executed and the user will be fully

234
00:09:30,940 --> 00:09:34,000
infected so here's a demo of the example

235
00:09:34,000 --> 00:09:35,860
exploit we can see it's first going to

236
00:09:35,860 --> 00:09:38,080
download the zip file automatically and

237
00:09:38,080 --> 00:09:40,300
extract it and then launch that because

238
00:09:40,300 --> 00:09:41,890
it's been registered now there is a

239
00:09:41,890 --> 00:09:44,440
pop-up but if the user clicks ok on this

240
00:09:44,440 --> 00:09:46,899
we can now see that the malware has been

241
00:09:46,899 --> 00:09:49,480
persistently infected and the system is

242
00:09:49,480 --> 00:09:51,540
fully compromised

243
00:09:51,540 --> 00:09:54,399
so how does the malware persist once

244
00:09:54,399 --> 00:09:57,040
it's been executed or launched via this

245
00:09:57,040 --> 00:09:59,830
exploit vector well if we disassemble

246
00:09:59,830 --> 00:10:02,200
the malware's main function we can see

247
00:10:02,200 --> 00:10:04,630
that the first action it takes is

248
00:10:04,630 --> 00:10:07,089
invoking functions associated with

249
00:10:07,089 --> 00:10:10,270
creating a login item specifically it

250
00:10:10,270 --> 00:10:13,390
calls the LS shared file list create API

251
00:10:13,390 --> 00:10:16,600
and the LS shared file lists insert item

252
00:10:16,600 --> 00:10:20,380
URL now once a login item is created on

253
00:10:20,380 --> 00:10:23,410
Mac OS and points to the malicious

254
00:10:23,410 --> 00:10:26,350
application any time the user logs then

255
00:10:26,350 --> 00:10:29,230
Mac OS will automatically re-execute

256
00:10:29,230 --> 00:10:31,720
them our now this isn't the most

257
00:10:31,720 --> 00:10:34,029
stealthiest of persistence mechanisms

258
00:10:34,029 --> 00:10:35,740
right you can open the system preference

259
00:10:35,740 --> 00:10:37,450
pane and go and click on a button that

260
00:10:37,450 --> 00:10:39,760
says login items and you will see the

261
00:10:39,760 --> 00:10:42,040
login item persisted but the average

262
00:10:42,040 --> 00:10:43,630
user is not going to be poking around so

263
00:10:43,630 --> 00:10:48,100
this technique suffice is now once the

264
00:10:48,100 --> 00:10:50,410
malware has been persisted it then

265
00:10:50,410 --> 00:10:52,779
installs itself by invoking a method

266
00:10:52,779 --> 00:10:57,430
named CP 4 well copy if we debug this

267
00:10:57,430 --> 00:10:59,079
method right we attach to the bugger and

268
00:10:59,079 --> 00:11:01,150
start stepping through we can see the

269
00:11:01,150 --> 00:11:03,910
malware will copy itself from the

270
00:11:03,910 --> 00:11:05,350
download directory where the

271
00:11:05,350 --> 00:11:07,360
wait downloaded it to into the users

272
00:11:07,360 --> 00:11:09,640
library directory now if we run a

273
00:11:09,640 --> 00:11:11,710
process monitor we can passively observe

274
00:11:11,710 --> 00:11:13,990
this as we can see on the slide we can

275
00:11:13,990 --> 00:11:16,270
use one for example FS usage which is a

276
00:11:16,270 --> 00:11:18,360
built in file monitoring utility that's

277
00:11:18,360 --> 00:11:22,420
directly embedded in Mac OS now the

278
00:11:22,420 --> 00:11:24,340
installed malware doesn't really blend

279
00:11:24,340 --> 00:11:26,290
in right you can see on the slide if you

280
00:11:26,290 --> 00:11:28,000
actually go and look at your library

281
00:11:28,000 --> 00:11:29,590
directory and you're infected there'll

282
00:11:29,590 --> 00:11:32,080
be this orange PowerPoint looking

283
00:11:32,080 --> 00:11:34,570
presentation icon sitting there amongst

284
00:11:34,570 --> 00:11:37,180
all these other system directories and

285
00:11:37,180 --> 00:11:39,850
folders but again the average user is

286
00:11:39,850 --> 00:11:41,530
not going to be poking around in here so

287
00:11:41,530 --> 00:11:44,130
it's likely that it won't be discovered

288
00:11:44,130 --> 00:11:47,290
now the Malheur has been copied into the

289
00:11:47,290 --> 00:11:49,480
users library directory the original

290
00:11:49,480 --> 00:11:51,400
instance the one that was downloaded and

291
00:11:51,400 --> 00:11:53,170
executed by the exploit will then

292
00:11:53,170 --> 00:11:55,540
execute this copy via the open command

293
00:11:55,540 --> 00:11:57,910
again we can observe this via a process

294
00:11:57,910 --> 00:11:59,500
monitor we can see the first instance

295
00:11:59,500 --> 00:12:01,300
kicking off or launching the second

296
00:12:01,300 --> 00:12:03,490
instance now when the malware is

297
00:12:03,490 --> 00:12:06,160
launched again the main function will be

298
00:12:06,160 --> 00:12:08,170
executed and if you recall what happens

299
00:12:08,170 --> 00:12:10,030
in the main function it persists itself

300
00:12:10,030 --> 00:12:11,890
so this actually means that the malware

301
00:12:11,890 --> 00:12:14,470
will persist itself twice as we can see

302
00:12:14,470 --> 00:12:16,480
on the slide so now if you go into the

303
00:12:16,480 --> 00:12:18,760
system preference pane again and look at

304
00:12:18,760 --> 00:12:21,190
the login items you will see two entries

305
00:12:21,190 --> 00:12:23,680
for the mao-a one for the copy that was

306
00:12:23,680 --> 00:12:25,600
downloaded and one for the copy that has

307
00:12:25,600 --> 00:12:28,090
been persistently installed in the users

308
00:12:28,090 --> 00:12:30,250
library directory now I'm not sure if

309
00:12:30,250 --> 00:12:33,430
this is a bug or if the attackers really

310
00:12:33,430 --> 00:12:34,960
really wanted to make sure that the

311
00:12:34,960 --> 00:12:36,760
malware it gets persisted but obviously

312
00:12:36,760 --> 00:12:38,500
they only had to actually persist the

313
00:12:38,500 --> 00:12:42,460
second installed instance okay so now we

314
00:12:42,460 --> 00:12:44,740
understand how when tail gets on to

315
00:12:44,740 --> 00:12:47,590
users systems and also then how it

316
00:12:47,590 --> 00:12:49,570
persistently installs itself to ensure

317
00:12:49,570 --> 00:12:51,790
that every time the user real augs in

318
00:12:51,790 --> 00:12:53,320
the malware will be automatically

319
00:12:53,320 --> 00:12:56,860
re-execute advisor less so now let's

320
00:12:56,860 --> 00:13:00,370
take a look at its capabilities first

321
00:13:00,370 --> 00:13:01,930
though we have to talk about the

322
00:13:01,930 --> 00:13:04,090
malware's string encryption as the

323
00:13:04,090 --> 00:13:06,730
malware contains many encrypted strings

324
00:13:06,730 --> 00:13:09,610
embedded directly in the binary now of

325
00:13:09,610 --> 00:13:11,770
course if we can somehow decrypt the

326
00:13:11,770 --> 00:13:13,960
embedded strings analysis our

327
00:13:13,960 --> 00:13:15,580
understanding of the malware and its

328
00:13:15,580 --> 00:13:17,680
capabilities will be much easier because

329
00:13:17,680 --> 00:13:19,130
likely the strings that are

330
00:13:19,130 --> 00:13:21,440
crypted are related to what it does how

331
00:13:21,440 --> 00:13:23,600
it functions so if we look at the

332
00:13:23,600 --> 00:13:25,760
malware's decompiled code we can see a

333
00:13:25,760 --> 00:13:28,370
method named yon that invokes something

334
00:13:28,370 --> 00:13:31,790
named you this method first decodes a

335
00:13:31,790 --> 00:13:34,370
string and then calls into an aes

336
00:13:34,370 --> 00:13:36,950
decryption routine that equips a string

337
00:13:36,950 --> 00:13:38,360
with a hard-coded key

338
00:13:38,360 --> 00:13:40,520
this means we now know the encryption

339
00:13:40,520 --> 00:13:42,320
algorithm and also because it's a hard

340
00:13:42,320 --> 00:13:44,120
code key that's directly embedded in the

341
00:13:44,120 --> 00:13:45,830
malware's binary we have access to the

342
00:13:45,830 --> 00:13:48,860
decryption key now I'm a bit lazy I

343
00:13:48,860 --> 00:13:50,900
didn't feel like reimplemented AES

344
00:13:50,900 --> 00:13:52,400
decryption routine or even finding some

345
00:13:52,400 --> 00:13:55,310
Python code that did that even though we

346
00:13:55,310 --> 00:13:57,320
had the string or rather the key so

347
00:13:57,320 --> 00:13:59,690
instead I said let's find a way to

348
00:13:59,690 --> 00:14:02,240
coerce them our to simply decrypt the

349
00:14:02,240 --> 00:14:04,490
strings for us right work smart not hard

350
00:14:04,490 --> 00:14:07,130
so instead what we can do is we can

351
00:14:07,130 --> 00:14:10,460
coerce the malware to always load our

352
00:14:10,460 --> 00:14:13,070
library and then code within this

353
00:14:13,070 --> 00:14:15,200
library can dynamically print out these

354
00:14:15,200 --> 00:14:17,420
strings as they are decrypted at runtime

355
00:14:17,420 --> 00:14:19,370
so again the idea is to let the malware

356
00:14:19,370 --> 00:14:23,530
do the hard work the decryption for us

357
00:14:24,070 --> 00:14:26,510
so let's look a little closer about how

358
00:14:26,510 --> 00:14:29,150
to accomplish this so once our dynamic

359
00:14:29,150 --> 00:14:31,550
library has been loaded into the address

360
00:14:31,550 --> 00:14:33,740
space of the Malheur what we can do is

361
00:14:33,740 --> 00:14:36,530
we can Swizzle or swap out the malware's

362
00:14:36,530 --> 00:14:38,660
decryption routine again it's called

363
00:14:38,660 --> 00:14:40,850
loop with our own and this is

364
00:14:40,850 --> 00:14:43,250
accomplished via the rather powerful API

365
00:14:43,250 --> 00:14:46,280
method exchange implementation as we can

366
00:14:46,280 --> 00:14:48,380
see on the slide once the decryption

367
00:14:48,380 --> 00:14:50,750
function has been Swizzle door swapped

368
00:14:50,750 --> 00:14:52,970
any time the malware invokes the

369
00:14:52,970 --> 00:14:55,070
decryption method transparently the

370
00:14:55,070 --> 00:14:57,140
objective-c runtime will actually now

371
00:14:57,140 --> 00:15:00,410
call our method in our library so what

372
00:15:00,410 --> 00:15:03,200
our method simply does is first calls

373
00:15:03,200 --> 00:15:05,110
through to the malware's original

374
00:15:05,110 --> 00:15:07,100
decryption library passing in the string

375
00:15:07,100 --> 00:15:08,900
argument that was passed in and then

376
00:15:08,900 --> 00:15:11,270
when that returns we have access to the

377
00:15:11,270 --> 00:15:14,120
decrypted string so I did was I simply

378
00:15:14,120 --> 00:15:16,580
added a debug message to this to our

379
00:15:16,580 --> 00:15:18,290
library so that now whenever the

380
00:15:18,290 --> 00:15:20,660
backdoor is executed for example in our

381
00:15:20,660 --> 00:15:22,760
lab or on a VM we can watch this

382
00:15:22,760 --> 00:15:25,490
decryption happen at runtime and it's

383
00:15:25,490 --> 00:15:26,990
easily now to see some of the strings

384
00:15:26,990 --> 00:15:29,060
that pop up seems like their strings

385
00:15:29,060 --> 00:15:30,830
related to the malware installation

386
00:15:30,830 --> 00:15:32,040
location

387
00:15:32,040 --> 00:15:34,200
perhaps some file extensions and then

388
00:15:34,200 --> 00:15:36,030
also the command control servers again

389
00:15:36,030 --> 00:15:37,710
these were embedded in the binary but

390
00:15:37,710 --> 00:15:40,020
encrypted now we have access to the

391
00:15:40,020 --> 00:15:43,740
decrypted strings now as we just saw

392
00:15:43,740 --> 00:15:45,240
many of the strings are decrypted

393
00:15:45,240 --> 00:15:47,220
encrypted rather and some of these

394
00:15:47,220 --> 00:15:49,620
appear to look like file extensions

395
00:15:49,620 --> 00:15:52,440
right turns out what wind tail does is

396
00:15:52,440 --> 00:15:54,960
scan the entire infected system the

397
00:15:54,960 --> 00:15:57,200
entire hard drive and for any file that

398
00:15:57,200 --> 00:16:00,210
matches on these file extensions it then

399
00:16:00,210 --> 00:16:02,970
creates a zip file in slash temp with

400
00:16:02,970 --> 00:16:05,490
the contents of that file and then X

401
00:16:05,490 --> 00:16:08,100
well traits that zip file via Mac OS is

402
00:16:08,100 --> 00:16:10,680
built in curl utility so this is a

403
00:16:10,680 --> 00:16:13,080
fairly comprehensive file expert in X

404
00:16:13,080 --> 00:16:16,290
acceleration capability and it really

405
00:16:16,290 --> 00:16:18,870
appears to be the main goal of the Maur

406
00:16:18,870 --> 00:16:21,030
now this makes a lot of sense this is

407
00:16:21,030 --> 00:16:23,010
rather unsurprising is it's a piece of

408
00:16:23,010 --> 00:16:24,690
malware that's used in very targeted

409
00:16:24,690 --> 00:16:27,210
cyber espionage campaigns so again makes

410
00:16:27,210 --> 00:16:29,220
sense the attackers once they get onto a

411
00:16:29,220 --> 00:16:31,260
new Mac system would want to gather up

412
00:16:31,260 --> 00:16:33,150
all the files that match these file

413
00:16:33,150 --> 00:16:34,890
extensions that like we have very

414
00:16:34,890 --> 00:16:36,810
interesting information and excellent

415
00:16:36,810 --> 00:16:38,370
rate that out to their command control

416
00:16:38,370 --> 00:16:41,730
servers now I'm a big fan of writing

417
00:16:41,730 --> 00:16:43,440
custom command control servers to

418
00:16:43,440 --> 00:16:46,320
facilitate analysis so I write wrote one

419
00:16:46,320 --> 00:16:48,960
to talk to win tail so we can now use

420
00:16:48,960 --> 00:16:51,000
this custom command and control server

421
00:16:51,000 --> 00:16:53,820
to confirm win tails capabilities for

422
00:16:53,820 --> 00:16:55,650
example its file exploitation

423
00:16:55,650 --> 00:16:57,870
exfiltration behavior so here's a demo

424
00:16:57,870 --> 00:16:59,520
of this custom command control server

425
00:16:59,520 --> 00:17:02,100
and we can see it's receiving files from

426
00:17:02,100 --> 00:17:04,079
them our on the right we can see the

427
00:17:04,079 --> 00:17:06,390
incoming post request this is the

428
00:17:06,390 --> 00:17:09,180
malware posting these zip files via the

429
00:17:09,180 --> 00:17:11,400
curl utility and then on the Left we

430
00:17:11,400 --> 00:17:13,440
simply save them out to the filesystem

431
00:17:13,440 --> 00:17:15,240
so again this allows us to task the

432
00:17:15,240 --> 00:17:17,190
malware and confirm yes it is scanning

433
00:17:17,190 --> 00:17:19,230
the entire file system and exfiltrating

434
00:17:19,230 --> 00:17:21,270
files that match those decrypted file

435
00:17:21,270 --> 00:17:25,109
extensions when tail also supports file

436
00:17:25,109 --> 00:17:28,740
download if we look at the SDF method we

437
00:17:28,740 --> 00:17:30,900
can see it decrypts the address of an

438
00:17:30,900 --> 00:17:32,970
embedded command control server and then

439
00:17:32,970 --> 00:17:35,310
makes a initial request to this command

440
00:17:35,310 --> 00:17:37,470
and control server to get a name for the

441
00:17:37,470 --> 00:17:40,230
downloaded file then a second request is

442
00:17:40,230 --> 00:17:42,210
made to the command control server to

443
00:17:42,210 --> 00:17:44,280
download the actual file off the

444
00:17:44,280 --> 00:17:45,030
attackers

445
00:17:45,030 --> 00:17:47,340
and control server if we run a network

446
00:17:47,340 --> 00:17:49,110
monitor for example in our VM we can

447
00:17:49,110 --> 00:17:52,440
observe these two requests the malware

448
00:17:52,440 --> 00:17:55,110
will then execute this downloaded file

449
00:17:55,110 --> 00:17:57,120
so if you look at more of the

450
00:17:57,120 --> 00:18:00,270
disassembly in the SDF method we can see

451
00:18:00,270 --> 00:18:02,730
it unzips this downloaded file into the

452
00:18:02,730 --> 00:18:05,070
users directory via the built-in Dino

453
00:18:05,070 --> 00:18:06,660
command which is kind of interesting and

454
00:18:06,660 --> 00:18:09,560
then executes it via the NS tasks API

455
00:18:09,560 --> 00:18:12,380
via process monitor we can possibly

456
00:18:12,380 --> 00:18:14,820
passively observe this download and

457
00:18:14,820 --> 00:18:17,520
execute in action again though let's

458
00:18:17,520 --> 00:18:19,260
confirm this via custom command and

459
00:18:19,260 --> 00:18:21,510
control server when the malware beacons

460
00:18:21,510 --> 00:18:23,580
out let's have it download and execute

461
00:18:23,580 --> 00:18:26,550
the ubiquitous calculator app so we can

462
00:18:26,550 --> 00:18:28,170
see this in action it's gonna reach out

463
00:18:28,170 --> 00:18:30,090
download and then launch the malware

464
00:18:30,090 --> 00:18:31,860
application or the calculator

465
00:18:31,860 --> 00:18:33,330
application that was pulled from our

466
00:18:33,330 --> 00:18:35,430
command control server obviously armed

467
00:18:35,430 --> 00:18:37,530
with the ability to remotely download

468
00:18:37,530 --> 00:18:39,690
and execute other files this gives the

469
00:18:39,690 --> 00:18:42,300
attackers the remote capability to

470
00:18:42,300 --> 00:18:44,160
download and run other tools or even

471
00:18:44,160 --> 00:18:45,870
perhaps install another piece of malware

472
00:18:45,870 --> 00:18:49,550
maybe a second stage implant or backdoor

473
00:18:49,550 --> 00:18:52,050
finally the backdoor can also be

474
00:18:52,050 --> 00:18:54,180
remotely uninstalled by some embedded

475
00:18:54,180 --> 00:18:57,120
self delete logic so every time the Maur

476
00:18:57,120 --> 00:18:59,520
starts up it connects out to the

477
00:18:59,520 --> 00:19:01,770
command-and-control server and makes a

478
00:19:01,770 --> 00:19:05,220
request to a certain API endpoint if the

479
00:19:05,220 --> 00:19:07,350
response from the server from this API

480
00:19:07,350 --> 00:19:10,020
is a one this tells the malware to self

481
00:19:10,020 --> 00:19:12,300
delete so the Maur will first uninstall

482
00:19:12,300 --> 00:19:15,030
itself and then terminate having a

483
00:19:15,030 --> 00:19:17,550
remote self delete capability is a neat

484
00:19:17,550 --> 00:19:19,410
feature as it allows an attacker to

485
00:19:19,410 --> 00:19:21,960
remotely disinfect systems perhaps if

486
00:19:21,960 --> 00:19:23,850
the malware is detected elsewhere they

487
00:19:23,850 --> 00:19:25,470
notice there's an AV signature that pops

488
00:19:25,470 --> 00:19:26,040
up for it

489
00:19:26,040 --> 00:19:27,690
or perhaps when they are done with the

490
00:19:27,690 --> 00:19:31,530
target so a demo again in via the custom

491
00:19:31,530 --> 00:19:33,390
command and control server it's going to

492
00:19:33,390 --> 00:19:35,850
show wind tail responding to the self

493
00:19:35,850 --> 00:19:38,490
delete command and note the persistently

494
00:19:38,490 --> 00:19:40,410
installed implant again it's that fairly

495
00:19:40,410 --> 00:19:42,660
obvious orange icon in the library

496
00:19:42,660 --> 00:19:44,880
folder is going to disappear and of

497
00:19:44,880 --> 00:19:47,400
course once the Maur has self deleted

498
00:19:47,400 --> 00:19:49,740
it'll stop beaconing because it's been

499
00:19:49,740 --> 00:19:53,700
completely removed from the system all

500
00:19:53,700 --> 00:19:55,950
right so let's end by briefly talking

501
00:19:55,950 --> 00:19:58,350
about some runtime detection that will

502
00:19:58,350 --> 00:19:58,930
allow us

503
00:19:58,930 --> 00:20:02,980
generically detect them our so the first

504
00:20:02,980 --> 00:20:04,450
thing we want to be able to generically

505
00:20:04,450 --> 00:20:06,940
detect is the exploitation attempt the

506
00:20:06,940 --> 00:20:10,030
initial infection and we can do this by

507
00:20:10,030 --> 00:20:12,010
observing a few rather anomalous

508
00:20:12,010 --> 00:20:14,470
activities so first observing that

509
00:20:14,470 --> 00:20:17,080
Safari Auto downloads and extracts an

510
00:20:17,080 --> 00:20:19,810
application is something of note then

511
00:20:19,810 --> 00:20:22,950
that same application is triggered

512
00:20:22,950 --> 00:20:25,630
triggers the registration of a custom

513
00:20:25,630 --> 00:20:27,610
URL handler and then finally in that

514
00:20:27,610 --> 00:20:29,260
same application which was just Auto

515
00:20:29,260 --> 00:20:31,180
downloaded and Auto register is then

516
00:20:31,180 --> 00:20:34,360
launched again via Safari so we can

517
00:20:34,360 --> 00:20:36,880
detect the combination of these events

518
00:20:36,880 --> 00:20:38,830
and cumulatively then this gives us a

519
00:20:38,830 --> 00:20:41,680
very powerful detection capability with

520
00:20:41,680 --> 00:20:43,810
both for detecting wind tail and its

521
00:20:43,810 --> 00:20:47,020
variants but also any other malware for

522
00:20:47,020 --> 00:20:48,880
example will copycat malware that makes

523
00:20:48,880 --> 00:20:51,310
use of this same exploit or infection

524
00:20:51,310 --> 00:20:55,360
vector we can also detect wind tail when

525
00:20:55,360 --> 00:20:57,970
it goes to persist itself so recall that

526
00:20:57,970 --> 00:21:01,000
when tail persists itself as a login

527
00:21:01,000 --> 00:21:03,310
item pointing to an application in the

528
00:21:03,310 --> 00:21:06,250
users library directory that's somewhat

529
00:21:06,250 --> 00:21:08,620
strange that's somewhat odd now this

530
00:21:08,620 --> 00:21:10,930
isn't documented by Apple but on recent

531
00:21:10,930 --> 00:21:14,350
versions of Mac OS login items are saved

532
00:21:14,350 --> 00:21:17,500
or persisted by Apple's background task

533
00:21:17,500 --> 00:21:19,960
management agent and it does this by

534
00:21:19,960 --> 00:21:22,450
writing them out to a background dot

535
00:21:22,450 --> 00:21:25,090
items file so what we can do is if we

536
00:21:25,090 --> 00:21:26,920
have file monitoring capabilities on

537
00:21:26,920 --> 00:21:28,720
that system for example built into a

538
00:21:28,720 --> 00:21:30,850
security product we can simply monitor

539
00:21:30,850 --> 00:21:32,890
for the background items files being

540
00:21:32,890 --> 00:21:35,170
monitored or changed and then we can

541
00:21:35,170 --> 00:21:37,360
parse out the changes and detect anytime

542
00:21:37,360 --> 00:21:40,750
a new login item has been added here's

543
00:21:40,750 --> 00:21:43,300
an example of detecting and alerting on

544
00:21:43,300 --> 00:21:45,160
the malware's persistence and actually

545
00:21:45,160 --> 00:21:47,230
this alert was generated with no a

546
00:21:47,230 --> 00:21:49,420
priori knowledge of the malware per se

547
00:21:49,420 --> 00:21:51,520
it was simply monitoring for the

548
00:21:51,520 --> 00:21:54,460
creation of new login items now if

549
00:21:54,460 --> 00:21:55,930
you're interested in the technical

550
00:21:55,930 --> 00:21:58,030
details of detecting login item

551
00:21:58,030 --> 00:22:00,310
persistence I wrote a recent blog post

552
00:22:00,310 --> 00:22:02,260
that comprehensively covers the topic

553
00:22:02,260 --> 00:22:04,300
goes a little more into this background

554
00:22:04,300 --> 00:22:06,790
agent that registers the login items and

555
00:22:06,790 --> 00:22:09,250
then also into the file format of the

556
00:22:09,250 --> 00:22:11,620
login items file because you have to do

557
00:22:11,620 --> 00:22:12,470
some parsing once

558
00:22:12,470 --> 00:22:14,809
you detect a change and extract what was

559
00:22:14,809 --> 00:22:17,000
added and pull out relevant information

560
00:22:17,000 --> 00:22:19,220
for example the path to the application

561
00:22:19,220 --> 00:22:21,919
that was persisted as a login item so

562
00:22:21,919 --> 00:22:23,900
that's of interest in to check out the

563
00:22:23,900 --> 00:22:26,000
block now

564
00:22:26,000 --> 00:22:28,520
imagine that when tail has already been

565
00:22:28,520 --> 00:22:30,590
installed you know maybe you're worried

566
00:22:30,590 --> 00:22:32,690
that a system is already infected well

567
00:22:32,690 --> 00:22:34,370
it turns out there are some runtime

568
00:22:34,370 --> 00:22:37,309
behaviors that we may be able to

569
00:22:37,309 --> 00:22:40,250
leverage to detect wind tail by kind of

570
00:22:40,250 --> 00:22:41,840
making the observation that it does some

571
00:22:41,840 --> 00:22:44,750
rather anomalous stuff so for example

572
00:22:44,750 --> 00:22:47,360
perhaps it's strange I think it is that

573
00:22:47,360 --> 00:22:50,990
a persistent login item is accessing all

574
00:22:50,990 --> 00:22:53,480
of the files on your file system zipping

575
00:22:53,480 --> 00:22:56,000
up a large number of those and then X

576
00:22:56,000 --> 00:22:58,669
filled those out to a remote server so

577
00:22:58,669 --> 00:22:59,780
what we can do is we can mano the file

578
00:22:59,780 --> 00:23:02,659
system for that kind of activity again

579
00:23:02,659 --> 00:23:04,669
tracking back these file accesses to the

580
00:23:04,669 --> 00:23:06,409
log in item perhaps keeping track or a

581
00:23:06,409 --> 00:23:08,090
count of how many files it accesses and

582
00:23:08,090 --> 00:23:10,880
what it does with them perhaps we can

583
00:23:10,880 --> 00:23:13,429
also monitor for process launches it's

584
00:23:13,429 --> 00:23:15,559
pretty easy to do and if for example we

585
00:23:15,559 --> 00:23:17,539
see curl we can examine the arguments

586
00:23:17,539 --> 00:23:19,669
it's fairly rare C curl being

587
00:23:19,669 --> 00:23:21,890
automatically executed with post

588
00:23:21,890 --> 00:23:24,140
parameters telling curl to essentially

589
00:23:24,140 --> 00:23:26,330
exfiltrate and post a file to a remote

590
00:23:26,330 --> 00:23:28,640
command control server or perhaps we can

591
00:23:28,640 --> 00:23:30,770
just detect unauthorized Network action

592
00:23:30,770 --> 00:23:32,960
now of course we don't have to trigger

593
00:23:32,960 --> 00:23:35,000
only when all of these events are

594
00:23:35,000 --> 00:23:37,760
cumulatively observed one or two may

595
00:23:37,760 --> 00:23:40,789
warrant a closer look at the binary or

596
00:23:40,789 --> 00:23:43,580
system as a whole but this again will

597
00:23:43,580 --> 00:23:45,860
allow us to generically detect wind tail

598
00:23:45,860 --> 00:23:47,990
or even other types of malware that are

599
00:23:47,990 --> 00:23:49,429
doing such file collection and

600
00:23:49,429 --> 00:23:53,929
exfiltration okay so that's a wrap today

601
00:23:53,929 --> 00:23:56,600
we comprehensively discussed wind tail

602
00:23:56,600 --> 00:23:59,690
from its initial infection vector how it

603
00:23:59,690 --> 00:24:02,090
exploit in systems to gain access we

604
00:24:02,090 --> 00:24:03,799
talked about its persistence its

605
00:24:03,799 --> 00:24:06,770
capabilities and discussed some ideas

606
00:24:06,770 --> 00:24:09,230
for generic detection on a personal note

607
00:24:09,230 --> 00:24:11,780
I want to say thanks to jammed and also

608
00:24:11,780 --> 00:24:14,419
the virus bulletin conference for

609
00:24:14,419 --> 00:24:17,150
hosting my talk and also to the myriad

610
00:24:17,150 --> 00:24:18,860
of companies that support my objective-c

611
00:24:18,860 --> 00:24:21,020
work and my open source Mac security

612
00:24:21,020 --> 00:24:23,990
tools and one more thing if you are

613
00:24:23,990 --> 00:24:25,150
interested in

614
00:24:25,150 --> 00:24:27,400
security topics I'd love to see you at

615
00:24:27,400 --> 00:24:28,809
objective by the sea it's the Mac

616
00:24:28,809 --> 00:24:30,970
security conference I organized it's

617
00:24:30,970 --> 00:24:32,470
gonna be happening in early March in

618
00:24:32,470 --> 00:24:35,020
Hawaii so I mean great opportunity for

619
00:24:35,020 --> 00:24:38,950
your work to send you to Hawaii all

620
00:24:38,950 --> 00:24:40,210
right so again thank you for attending

621
00:24:40,210 --> 00:24:43,059
my talk I think we have three or four

622
00:24:43,059 --> 00:24:45,550
minutes for some questions and again

623
00:24:45,550 --> 00:24:47,559
thank you to Virus Bulletin for putting

624
00:24:47,559 --> 00:24:55,990
on this amazing event I office should

625
00:24:55,990 --> 00:24:58,210
note that these wind tail samples are

626
00:24:58,210 --> 00:25:00,250
available on objective-c there's a

627
00:25:00,250 --> 00:25:02,559
comprehensive malware collection so if

628
00:25:02,559 --> 00:25:04,510
you want to download the sample play

629
00:25:04,510 --> 00:25:05,740
around with that kind of work through

630
00:25:05,740 --> 00:25:07,660
these slides you can do that as well

631
00:25:07,660 --> 00:25:09,429
great thanks Patrick that was a

632
00:25:09,429 --> 00:25:12,030
wonderful presence

