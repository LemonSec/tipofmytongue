1
00:00:00,060 --> 00:00:02,190
so we'll kick off this next session with

2
00:00:02,190 --> 00:00:04,380
Peter and Michael from ESET through some

3
00:00:04,380 --> 00:00:05,549
really interesting research about rich

4
00:00:05,549 --> 00:00:06,990
headers as we're gonna be totally rich

5
00:00:06,990 --> 00:00:09,120
headers on leveraging the the mysterious

6
00:00:09,120 --> 00:00:13,049
artifacts of the PE format okay hello

7
00:00:13,049 --> 00:00:15,540
welcome to our session we would like to

8
00:00:15,540 --> 00:00:17,490
deliver this talk we did this research

9
00:00:17,490 --> 00:00:20,760
like for several months so let us start

10
00:00:20,760 --> 00:00:24,060
it the outline of our talk is as follows

11
00:00:24,060 --> 00:00:26,369
we start with a brief description of

12
00:00:26,369 --> 00:00:30,330
rich headers briefly our h2 just to be

13
00:00:30,330 --> 00:00:32,488
saved that we are on the same side and

14
00:00:32,488 --> 00:00:36,480
then we show the to link like how we

15
00:00:36,480 --> 00:00:39,420
design the database that stores the rich

16
00:00:39,420 --> 00:00:42,930
headers data and which tools we can of

17
00:00:42,930 --> 00:00:44,940
use to leverage this piece of

18
00:00:44,940 --> 00:00:47,730
information and finally we will conclude

19
00:00:47,730 --> 00:00:50,340
with lessons that we learned like

20
00:00:50,340 --> 00:00:54,030
tracking defeats dull during stuff based

21
00:00:54,030 --> 00:00:59,129
on which headers so rich headers were

22
00:00:59,129 --> 00:01:02,579
implemented in Visual Studio 1997

23
00:01:02,579 --> 00:01:05,880
service pack 3 so it's already 22 years

24
00:01:05,880 --> 00:01:09,650
ago it's a kind of ancient structure and

25
00:01:09,650 --> 00:01:13,110
Microsoft has never announced and never

26
00:01:13,110 --> 00:01:16,290
documented or even allowed developers to

27
00:01:16,290 --> 00:01:20,280
opt this feature out so perhaps this so

28
00:01:20,280 --> 00:01:24,090
I kind of support our choose of the

29
00:01:24,090 --> 00:01:28,619
mysterious word in the title let's

30
00:01:28,619 --> 00:01:30,630
breathe let's briefly mention the main

31
00:01:30,630 --> 00:01:33,049
events are connected with switch headers

32
00:01:33,049 --> 00:01:36,210
as we said already introduced 22 years

33
00:01:36,210 --> 00:01:41,009
ago and in 2004 2010 developers are not

34
00:01:41,009 --> 00:01:42,840
developers researchers started to ask

35
00:01:42,840 --> 00:01:44,850
question was what this piece of data

36
00:01:44,850 --> 00:01:49,259
mean and how it could be like

37
00:01:49,259 --> 00:01:52,170
interpreted and so so they tried to

38
00:01:52,170 --> 00:01:54,000
collect some basic information about

39
00:01:54,000 --> 00:01:57,810
this structure as you see tons went on

40
00:01:57,810 --> 00:02:00,290
and there were there weren't that many

41
00:02:00,290 --> 00:02:03,689
pieces of research like kind of focusing

42
00:02:03,689 --> 00:02:08,910
on this data but recently recently it

43
00:02:08,910 --> 00:02:11,670
got hyped more because the first

44
00:02:11,670 --> 00:02:13,180
academic paper from

45
00:02:13,180 --> 00:02:15,250
17 came by Webster and his colleagues

46
00:02:15,250 --> 00:02:19,269
they chose I believe for apt families

47
00:02:19,269 --> 00:02:21,700
and they did some clustering on this

48
00:02:21,700 --> 00:02:24,519
family so so did some kind of initial

49
00:02:24,519 --> 00:02:27,280
research about how to leverage leverage

50
00:02:27,280 --> 00:02:31,659
this data then like a great team

51
00:02:31,659 --> 00:02:34,090
published an interesting paper where

52
00:02:34,090 --> 00:02:37,569
they kind of described how one apt

53
00:02:37,569 --> 00:02:40,840
nectar borrowed or copied or stole the

54
00:02:40,840 --> 00:02:44,620
whole whole rich headers blob from from

55
00:02:44,620 --> 00:02:47,769
another apt actor just to be some kind

56
00:02:47,769 --> 00:02:52,720
of just to use it as a false flag and we

57
00:02:52,720 --> 00:02:54,849
did our research last year about

58
00:02:54,849 --> 00:02:57,819
Lazaro's we try to cluster cluster the

59
00:02:57,819 --> 00:03:00,549
the huge tool set of Lazaro's based on

60
00:03:00,549 --> 00:03:03,099
which headers data basically a linker

61
00:03:03,099 --> 00:03:06,730
version a major one but that was kind of

62
00:03:06,730 --> 00:03:10,239
motivation why took like take a look at

63
00:03:10,239 --> 00:03:14,169
this structure and recently the rich

64
00:03:14,169 --> 00:03:16,769
head has got even more hyped because

65
00:03:16,769 --> 00:03:20,139
Maxine doback wanted his certification

66
00:03:20,139 --> 00:03:25,090
so he he did research on this again he

67
00:03:25,090 --> 00:03:28,959
chose some kind of not dead huge data

68
00:03:28,959 --> 00:03:31,750
set and cluster cluster each based on

69
00:03:31,750 --> 00:03:35,260
which headers data and there would be

70
00:03:35,260 --> 00:03:39,189
like cyber defense summits or on fire I

71
00:03:39,189 --> 00:03:41,049
so really this this topic is getting

72
00:03:41,049 --> 00:03:45,900
hype so what is rich headers structure

73
00:03:45,900 --> 00:03:49,810
it is in the PE header of executables

74
00:03:49,810 --> 00:03:53,259
coming from visual Studios so the

75
00:03:53,259 --> 00:03:55,239
structure is produced by Microsoft

76
00:03:55,239 --> 00:03:59,650
linker and this is overlooked as we

77
00:03:59,650 --> 00:04:02,379
briefly mentioned before and it is just

78
00:04:02,379 --> 00:04:04,629
a blob of data starting with some header

79
00:04:04,629 --> 00:04:07,840
double word magic value you name it and

80
00:04:07,840 --> 00:04:10,840
there's a triples of information triples

81
00:04:10,840 --> 00:04:14,049
consisting of Product ID build number

82
00:04:14,049 --> 00:04:16,259
and counts the first two values

83
00:04:16,259 --> 00:04:18,940
represent the building environment that

84
00:04:18,940 --> 00:04:21,849
binary came from and the last value

85
00:04:21,849 --> 00:04:26,190
represents the magnitude of the project

86
00:04:26,780 --> 00:04:30,090
yeah this is what we say the structure

87
00:04:30,090 --> 00:04:33,750
itself is not playing its sore encrypted

88
00:04:33,750 --> 00:04:36,870
and the sore is stored in the blob of

89
00:04:36,870 --> 00:04:40,410
data but there is a formula that would

90
00:04:40,410 --> 00:04:42,870
help you to count the values so there

91
00:04:42,870 --> 00:04:44,880
are two ways how to get the value of

92
00:04:44,880 --> 00:04:49,830
sore key and this is how it looks in the

93
00:04:49,830 --> 00:04:53,250
binary and if you kind of decrypt it

94
00:04:53,250 --> 00:04:58,260
it's in the plain plain form on the on

95
00:04:58,260 --> 00:05:02,700
the right so you know Microsoft 2000

96
00:05:02,700 --> 00:05:07,590
circled leaked so researchers try to get

97
00:05:07,590 --> 00:05:10,410
information about rigidus from this data

98
00:05:10,410 --> 00:05:13,740
and actually product ID is the original

99
00:05:13,740 --> 00:05:17,000
name by the developers of Microsoft and

100
00:05:17,000 --> 00:05:20,160
that is like the piece of a piece of

101
00:05:20,160 --> 00:05:22,650
code from the leakage on the left and on

102
00:05:22,650 --> 00:05:26,780
the right there is kind of either either

103
00:05:26,780 --> 00:05:30,900
hex race the compilation how it looks in

104
00:05:30,900 --> 00:05:34,760
the recent visitors to the old 20 20 19

105
00:05:34,760 --> 00:05:39,740
so one may ask how often is this data

106
00:05:39,740 --> 00:05:42,990
involved included in in a binary so if

107
00:05:42,990 --> 00:05:45,960
you consider any file it is roughly

108
00:05:45,960 --> 00:05:52,620
between 66 to 71 percent of executables

109
00:05:52,620 --> 00:05:55,560
that contain which headers and if you

110
00:05:55,560 --> 00:05:58,740
take a look at a malicious set like this

111
00:05:58,740 --> 00:06:00,660
mashes that represents really not just

112
00:06:00,660 --> 00:06:02,880
some kind of random random data this is

113
00:06:02,880 --> 00:06:06,320
like the set that contains

114
00:06:06,320 --> 00:06:09,300
representative of mulder executables

115
00:06:09,300 --> 00:06:13,260
since I don't know 2004 or maybe even

116
00:06:13,260 --> 00:06:17,360
even a lot longer and in in that case

117
00:06:17,360 --> 00:06:21,150
roughly 73 percent of binaries contain

118
00:06:21,150 --> 00:06:25,410
this information 15 percent of binaries

119
00:06:25,410 --> 00:06:28,800
are coming where coming from visual

120
00:06:28,800 --> 00:06:31,950
studios but omitted this information

121
00:06:31,950 --> 00:06:37,249
this could be caused by developers

122
00:06:37,249 --> 00:06:40,999
their Microsoft linker file or some

123
00:06:40,999 --> 00:06:45,619
usage of protectors peckers that kind of

124
00:06:45,619 --> 00:06:50,479
replace the data and the rest arrest is

125
00:06:50,479 --> 00:06:53,119
like not not not containing at all and

126
00:06:53,119 --> 00:07:00,259
not Visual Studio executables rich

127
00:07:00,259 --> 00:07:03,619
headers starts at some offset basically

128
00:07:03,619 --> 00:07:07,579
the offset is a function of or depends

129
00:07:07,579 --> 00:07:12,559
on does stop so you know this this

130
00:07:12,559 --> 00:07:15,649
exactly this this couldn't can't be run

131
00:07:15,649 --> 00:07:19,009
in in a DOS mode it's at some length

132
00:07:19,009 --> 00:07:20,839
this is the majority of cases nineteen

133
00:07:20,839 --> 00:07:24,559
at nine percent but if if the guys chose

134
00:07:24,559 --> 00:07:27,379
some different different does stop it

135
00:07:27,379 --> 00:07:29,719
also pushes pushes the start of

136
00:07:29,719 --> 00:07:33,649
retailers forward so there is a variety

137
00:07:33,649 --> 00:07:36,399
of offsets that could legitimately

138
00:07:36,399 --> 00:07:39,999
represent which headers beginning and

139
00:07:39,999 --> 00:07:43,519
actually one need to think about this if

140
00:07:43,519 --> 00:07:49,579
he wants to parse which headers so our

141
00:07:49,579 --> 00:07:52,069
motivation was clear if you have a

142
00:07:52,069 --> 00:07:54,829
binary containing rich headers and you

143
00:07:54,829 --> 00:07:58,009
want some kind of similarity to to get

144
00:07:58,009 --> 00:08:01,759
more binaries of the same nature so we

145
00:08:01,759 --> 00:08:04,279
were thinking about how to get these

146
00:08:04,279 --> 00:08:06,529
levels of similarities and we came up

147
00:08:06,529 --> 00:08:08,899
with this hierarchy we don't say this is

148
00:08:08,899 --> 00:08:11,179
like the unique option perhaps there are

149
00:08:11,179 --> 00:08:14,929
better options but for the start we were

150
00:08:14,929 --> 00:08:17,229
happy with these at least five levels

151
00:08:17,229 --> 00:08:20,659
let's let's go one after another

152
00:08:20,659 --> 00:08:23,719
so let us ero of course identical which

153
00:08:23,719 --> 00:08:25,159
headers so you have so many others and

154
00:08:25,159 --> 00:08:28,009
you want to to get all files from your

155
00:08:28,009 --> 00:08:30,379
feeds that contains the same sandwich

156
00:08:30,379 --> 00:08:32,899
header we were really happy about this

157
00:08:32,899 --> 00:08:35,269
because Tammy de enigma VM protected

158
00:08:35,269 --> 00:08:38,750
files actually didn't alter the

159
00:08:38,750 --> 00:08:42,438
information so and it was really without

160
00:08:42,438 --> 00:08:45,379
any dynamic analysis you were able to ID

161
00:08:45,379 --> 00:08:48,079
if you have a kind of unprotected files

162
00:08:48,079 --> 00:08:50,960
and you have protected file and you

163
00:08:50,960 --> 00:08:53,210
each other's match you have a really

164
00:08:53,210 --> 00:08:56,390
quick quick hint that these binaries are

165
00:08:56,390 --> 00:09:01,120
the same just they have a different form

166
00:09:01,120 --> 00:09:05,390
we did a kind of attribution operator to

167
00:09:05,390 --> 00:09:06,770
steal or between unprotected and

168
00:09:06,770 --> 00:09:08,870
protected ones and nuke spread which is

169
00:09:08,870 --> 00:09:10,990
laws are still said that we track a lot

170
00:09:10,990 --> 00:09:15,260
and sometimes sometimes which others got

171
00:09:15,260 --> 00:09:18,800
faked or copied or so and it was the

172
00:09:18,800 --> 00:09:21,250
infamous case of Olympic destroyer

173
00:09:21,250 --> 00:09:25,340
people talk about this as it was false

174
00:09:25,340 --> 00:09:27,520
flag but from my point of view as the

175
00:09:27,520 --> 00:09:30,250
the reach headers were a little bit

176
00:09:30,250 --> 00:09:32,930
mysterious structure it was Easter Egg

177
00:09:32,930 --> 00:09:35,960
not really not really a false false flag

178
00:09:35,960 --> 00:09:39,380
I know that you are familiar with the

179
00:09:39,380 --> 00:09:41,960
case when also we we've seen cases that

180
00:09:41,960 --> 00:09:43,280
explorer.exe

181
00:09:43,280 --> 00:09:45,860
and its retailers were copied to

182
00:09:45,860 --> 00:09:51,260
malicious file and actually you can you

183
00:09:51,260 --> 00:09:53,930
can quickly identify some stops using

184
00:09:53,930 --> 00:09:59,170
the complete which headers block of data

185
00:09:59,170 --> 00:10:01,670
level one which strictly strictly

186
00:10:01,670 --> 00:10:04,160
generalizes the first one is that the

187
00:10:04,160 --> 00:10:08,680
two files have the identical sake and

188
00:10:08,680 --> 00:10:13,670
well we we found out we found this

189
00:10:13,670 --> 00:10:15,710
useful in cases of malware Packers when

190
00:10:15,710 --> 00:10:18,230
obviously Muller Packer was kind of

191
00:10:18,230 --> 00:10:22,130
stopped and the identical Turkey were

192
00:10:22,130 --> 00:10:25,160
kind of clustering many many executables

193
00:10:25,160 --> 00:10:30,440
of the same nature and also we could we

194
00:10:30,440 --> 00:10:34,280
found you could easily buy stops Visual

195
00:10:34,280 --> 00:10:37,630
Basic files and since the host and so on

196
00:10:37,630 --> 00:10:42,140
the next level unsorted unsorted pair of

197
00:10:42,140 --> 00:10:47,420
Product ID plus build number so this

198
00:10:47,420 --> 00:10:49,280
strictly generalizes the previous one

199
00:10:49,280 --> 00:10:53,840
and we found ok coal miner is never a

200
00:10:53,840 --> 00:10:56,210
small project it is a large project but

201
00:10:56,210 --> 00:10:58,250
we we found out that sometimes the

202
00:10:58,250 --> 00:10:59,690
number of imports varied

203
00:10:59,690 --> 00:11:03,290
so obviously the previous two

204
00:11:03,290 --> 00:11:05,700
similarities couldn't like the state

205
00:11:05,700 --> 00:11:08,910
couldn't cluster this into one one group

206
00:11:08,910 --> 00:11:14,160
so we just ignored count number and we

207
00:11:14,160 --> 00:11:16,980
were really happy that coal miner was

208
00:11:16,980 --> 00:11:19,589
really clustered well using this level

209
00:11:19,589 --> 00:11:22,730
of similarity the same was like binaries

210
00:11:22,730 --> 00:11:26,190
distributed by tirado you can see a lot

211
00:11:26,190 --> 00:11:28,589
of values varied but if you if you kind

212
00:11:28,589 --> 00:11:31,650
of emitted these these values you could

213
00:11:31,650 --> 00:11:35,820
get a nice cluster but we realize that

214
00:11:35,820 --> 00:11:38,279
it's not that easy sometimes Microsoft

215
00:11:38,279 --> 00:11:41,810
linker didn't like follow the order of

216
00:11:41,810 --> 00:11:45,240
product IDs so with this another level

217
00:11:45,240 --> 00:11:47,730
that we sorted it by the by the product

218
00:11:47,730 --> 00:11:50,339
ID and in this case we were able to

219
00:11:50,339 --> 00:11:53,010
close to well these nukes bad stuff and

220
00:11:53,010 --> 00:11:59,460
great energy files okay

221
00:11:59,460 --> 00:12:01,410
what is interesting about this structure

222
00:12:01,410 --> 00:12:04,380
is that it represents values like number

223
00:12:04,380 --> 00:12:07,950
of imports exports resources and this

224
00:12:07,950 --> 00:12:10,800
information are kind of doubled in the

225
00:12:10,800 --> 00:12:14,630
de header so you can kind of find

226
00:12:14,630 --> 00:12:19,830
mismatches or like not core values that

227
00:12:19,830 --> 00:12:21,209
are not corresponding to each other

228
00:12:21,209 --> 00:12:24,020
based on these two pieces of information

229
00:12:24,020 --> 00:12:27,630
so these are age anomalies we were

230
00:12:27,630 --> 00:12:30,330
thinking about it could be a good base

231
00:12:30,330 --> 00:12:33,380
for heuristics but we didn't put focus

232
00:12:33,380 --> 00:12:37,560
at it at this time but it could lead

233
00:12:37,560 --> 00:12:40,860
relate to a quick mother work verdict of

234
00:12:40,860 --> 00:12:48,290
a fob so let's move to the second part a

235
00:12:48,290 --> 00:12:51,480
small team of developers or even a

236
00:12:51,480 --> 00:12:55,110
single single man show single one

237
00:12:55,110 --> 00:12:57,630
dedicated man could build the whole

238
00:12:57,630 --> 00:12:59,940
infrastructure required to leverage this

239
00:12:59,940 --> 00:13:03,000
structure and now I put the words to me

240
00:13:03,000 --> 00:13:04,560
how I would continue with strolling

241
00:13:04,560 --> 00:13:08,690
thanks Peter so I don't now to tell you

242
00:13:08,690 --> 00:13:11,400
something I want to introduce that we've

243
00:13:11,400 --> 00:13:14,880
made for this pro pro pro object so

244
00:13:14,880 --> 00:13:16,420
let's first start with some

245
00:13:16,420 --> 00:13:19,320
the technologies that we used for the

246
00:13:19,320 --> 00:13:23,410
whole infrastructure we of course used

247
00:13:23,410 --> 00:13:25,780
just to be able to code the whole thing

248
00:13:25,780 --> 00:13:30,640
the bag and it's returning si si si si

249
00:13:30,640 --> 00:13:34,900
plus plus and the front end it's mostly

250
00:13:34,900 --> 00:13:40,900
c-sharp and the the we used my SQL for

251
00:13:40,900 --> 00:13:45,430
the de de de de database tools to

252
00:13:45,430 --> 00:13:50,890
storage and we also try to leverage yeah

253
00:13:50,890 --> 00:13:56,680
yeah yeah tool and incorporated into the

254
00:13:56,680 --> 00:14:01,420
tool set so it's there too so let's

255
00:14:01,420 --> 00:14:05,140
first talk about the database it's meant

256
00:14:05,140 --> 00:14:13,170
to store all the really related metadata

257
00:14:13,170 --> 00:14:17,650
in our case it stores data from multiple

258
00:14:17,650 --> 00:14:20,380
live C feeds that we process in real

259
00:14:20,380 --> 00:14:25,030
time as the files come in and as well as

260
00:14:25,030 --> 00:14:28,660
like in any in any infected and clean de

261
00:14:28,660 --> 00:14:31,770
de de da says that we can use to conquer

262
00:14:31,770 --> 00:14:36,060
compare the known file against and

263
00:14:36,060 --> 00:14:41,680
relating the live feeds we process about

264
00:14:41,680 --> 00:14:45,700
two to two hundred and forty thousand

265
00:14:45,700 --> 00:14:50,110
files new files per day so it's the

266
00:14:50,110 --> 00:14:54,970
decent traffic he hears the they they

267
00:14:54,970 --> 00:15:01,000
they they design it's a quite quiet upon

268
00:15:01,000 --> 00:15:04,600
de database there's a main table called

269
00:15:04,600 --> 00:15:07,330
file which holds all the file related

270
00:15:07,330 --> 00:15:10,480
information and for each file there's

271
00:15:10,480 --> 00:15:15,130
one two and reach records and each each

272
00:15:15,130 --> 00:15:18,790
rich record Ray Ray Ray represents the

273
00:15:18,790 --> 00:15:23,930
radiator to three triple

274
00:15:23,930 --> 00:15:27,240
which was the pro tidy built number and

275
00:15:27,240 --> 00:15:30,240
counts information so it shall can have

276
00:15:30,240 --> 00:15:34,350
more more mobile people great records so

277
00:15:34,350 --> 00:15:40,040
it's quite quite quite simple design

278
00:15:40,040 --> 00:15:47,610
now the the way we feel filled databases

279
00:15:47,610 --> 00:15:52,800
he can talk Oh God

280
00:15:52,800 --> 00:15:58,079
Rach Reiner which parts at the PPP

281
00:15:58,079 --> 00:16:01,339
fashion stores them into the database

282
00:16:01,339 --> 00:16:05,640
its we try to keep the hyperness in mind

283
00:16:05,640 --> 00:16:08,040
since it's meant to persist a lot of the

284
00:16:08,040 --> 00:16:10,880
data so it's all written in C++ and we

285
00:16:10,880 --> 00:16:14,630
try to avoid to use also third-party

286
00:16:14,630 --> 00:16:18,480
libraries so it's like we we try to use

287
00:16:18,480 --> 00:16:24,269
as much as possible to maximize the

288
00:16:24,269 --> 00:16:28,019
performance and it supports multiple all

289
00:16:28,019 --> 00:16:30,420
patient notes so it's used for the life

290
00:16:30,420 --> 00:16:32,550
is parole parole parole the thing which

291
00:16:32,550 --> 00:16:35,610
is like which is real time and it runs

292
00:16:35,610 --> 00:16:39,600
the whole day like constantly processing

293
00:16:39,600 --> 00:16:43,860
new files and then it also supports

294
00:16:43,860 --> 00:16:47,760
on-demand 5-5-5 systems can when you

295
00:16:47,760 --> 00:16:50,490
have like a whole folder with set of

296
00:16:50,490 --> 00:16:53,430
files that you want to put into the

297
00:16:53,430 --> 00:16:58,230
database create some cluster you can

298
00:16:58,230 --> 00:17:01,500
just use that as well there's no screen

299
00:17:01,500 --> 00:17:04,619
shot of the two since it's a common tool

300
00:17:04,619 --> 00:17:09,569
so just then the the front Thrones in

301
00:17:09,569 --> 00:17:12,689
part the we called range finder or the

302
00:17:12,689 --> 00:17:20,660
client it it it said dole dole that

303
00:17:20,660 --> 00:17:23,579
applications is since performance is not

304
00:17:23,579 --> 00:17:27,160
that a important here

305
00:17:27,160 --> 00:17:30,740
it is he's meant to look up similar

306
00:17:30,740 --> 00:17:34,160
files in the reader database so whenever

307
00:17:34,160 --> 00:17:37,580
like some new unknown file that you you

308
00:17:37,580 --> 00:17:40,580
you know anything about you just use the

309
00:17:40,580 --> 00:17:44,180
tool to see if there's like some similar

310
00:17:44,180 --> 00:17:50,900
files in the database already and he it

311
00:17:50,900 --> 00:17:52,840
could lead to some quick all tribution

312
00:17:52,840 --> 00:17:58,330
and it so yeah so so it's used to find a

313
00:17:58,330 --> 00:18:03,950
common of this set of files and of

314
00:18:03,950 --> 00:18:07,630
course we also you you you you you

315
00:18:07,630 --> 00:18:13,720
create notification and it supports a

316
00:18:13,720 --> 00:18:20,170
experts to yeah so so we can both like

317
00:18:20,170 --> 00:18:23,990
so so can use the tool to to create a

318
00:18:23,990 --> 00:18:26,180
rule that will be used in other

319
00:18:26,180 --> 00:18:29,450
applications that will scan for the like

320
00:18:29,450 --> 00:18:35,810
the same set of rules and a lot of but

321
00:18:35,810 --> 00:18:38,720
not least we also call contributed to

322
00:18:38,720 --> 00:18:43,250
the original your project by the total

323
00:18:43,250 --> 00:18:46,490
since they're implemented implementation

324
00:18:46,490 --> 00:18:52,730
of radiators was not complete so so so

325
00:18:52,730 --> 00:18:53,840
so we tried to

326
00:18:53,840 --> 00:18:57,020
xn8 a now now now we feel like it's a

327
00:18:57,020 --> 00:19:00,440
command or SQL rules that it's it

328
00:19:00,440 --> 00:19:03,470
supports chrome call completes read or

329
00:19:03,470 --> 00:19:07,040
look up you know I'll give the word back

330
00:19:07,040 --> 00:19:10,480
to Pete Peter who will tell you how to

331
00:19:10,480 --> 00:19:16,160
coincide oh yeah so let's let's talk

332
00:19:16,160 --> 00:19:20,570
about the client so you can you can

333
00:19:20,570 --> 00:19:24,410
develop your client as you wish and but

334
00:19:24,410 --> 00:19:27,890
this is just in hint how to do it so it

335
00:19:27,890 --> 00:19:30,290
is a client that could be run on both

336
00:19:30,290 --> 00:19:32,820
file as as

337
00:19:32,820 --> 00:19:37,179
well as on folder and if you if you run

338
00:19:37,179 --> 00:19:39,340
it run it on the file you can see on the

339
00:19:39,340 --> 00:19:42,520
left there's the list of triples

340
00:19:42,520 --> 00:19:44,650
included in the rich headers a blob of

341
00:19:44,650 --> 00:19:49,090
data and and you can see the the

342
00:19:49,090 --> 00:19:51,610
database that it's that's implicitly

343
00:19:51,610 --> 00:19:55,809
like set for dual cap and here are the

344
00:19:55,809 --> 00:19:58,000
levels levels of the hierarchy of

345
00:19:58,000 --> 00:19:59,500
similarities that you could be

346
00:19:59,500 --> 00:20:03,570
interested in and so basically basically

347
00:20:03,570 --> 00:20:06,820
that's it and perhaps more interestingly

348
00:20:06,820 --> 00:20:10,600
you could run it on a folder and in that

349
00:20:10,600 --> 00:20:13,720
case it could it took kind of Union

350
00:20:13,720 --> 00:20:19,090
it took union of ranges of product these

351
00:20:19,090 --> 00:20:22,179
that are like in intersection of the

352
00:20:22,179 --> 00:20:25,450
files contained in the folder and you

353
00:20:25,450 --> 00:20:28,590
can manage you can manipulate with this

354
00:20:28,590 --> 00:20:33,669
data to create the role to create SQL

355
00:20:33,669 --> 00:20:36,669
role that queries the database or you

356
00:20:36,669 --> 00:20:39,070
could create a rule that queries not

357
00:20:39,070 --> 00:20:43,299
crevice but scan scan file on the file

358
00:20:43,299 --> 00:20:46,210
system based on the yarra your project

359
00:20:46,210 --> 00:20:50,860
and yeah this is this is the union or

360
00:20:50,860 --> 00:20:56,559
intersection of information and actually

361
00:20:56,559 --> 00:20:58,690
this is an artificial example we have

362
00:20:58,690 --> 00:21:01,360
one cluster of files I believe it is apt

363
00:21:01,360 --> 00:21:03,640
37 downloaders or something like that

364
00:21:03,640 --> 00:21:06,010
and we put one one cloud that was not

365
00:21:06,010 --> 00:21:07,929
related that was not coming from the

366
00:21:07,929 --> 00:21:12,309
same environment and we developed it in

367
00:21:12,309 --> 00:21:13,899
a way that if you click on the product

368
00:21:13,899 --> 00:21:17,830
ID triple and the one that represents

369
00:21:17,830 --> 00:21:22,600
anomaly in the in the folder you could

370
00:21:22,600 --> 00:21:27,059
just press Delete and now you just can

371
00:21:27,059 --> 00:21:29,350
manipulate with the rest of the data

372
00:21:29,350 --> 00:21:31,860
which is really like homogeneous now and

373
00:21:31,860 --> 00:21:34,539
represents really the cluster coming

374
00:21:34,539 --> 00:21:38,409
from environment and you could just pick

375
00:21:38,409 --> 00:21:41,440
pick those triples and make the

376
00:21:41,440 --> 00:21:44,049
conjunction of these triples would be

377
00:21:44,049 --> 00:21:46,400
queried query to database and you see it

378
00:21:46,400 --> 00:21:48,830
covers it covers several several files

379
00:21:48,830 --> 00:21:52,550
and if you query it on a clean set zero

380
00:21:52,550 --> 00:21:55,370
heat so this is a really good good rule

381
00:21:55,370 --> 00:21:58,760
that you could track your your data your

382
00:21:58,760 --> 00:22:04,220
your favorite apt actor and so we

383
00:22:04,220 --> 00:22:06,230
mentioned we we have two type of rules

384
00:22:06,230 --> 00:22:09,320
SQL and the rrose SQL square is the

385
00:22:09,320 --> 00:22:11,420
database they look like this

386
00:22:11,420 --> 00:22:13,880
it is really not like comfortable to

387
00:22:13,880 --> 00:22:17,090
write it by hand so the client does the

388
00:22:17,090 --> 00:22:20,630
job for itself and you also want to have

389
00:22:20,630 --> 00:22:23,660
the yarra error rule that it could be

390
00:22:23,660 --> 00:22:26,750
like executed on a file you could be

391
00:22:26,750 --> 00:22:28,790
like you could wonder if this file is

392
00:22:28,790 --> 00:22:30,710
already flagged by one of your rules so

393
00:22:30,710 --> 00:22:32,980
yarra is a really good good scanner here

394
00:22:32,980 --> 00:22:36,200
and we of course need one-to-one

395
00:22:36,200 --> 00:22:39,230
correspondence between SQL rules and the

396
00:22:39,230 --> 00:22:42,830
error rules and at this moment insert in

397
00:22:42,830 --> 00:22:46,070
those months that passed we brought

398
00:22:46,070 --> 00:22:51,550
about 200 rules mostly apt tool sets and

399
00:22:51,550 --> 00:22:56,210
and now I would like to like say

400
00:22:56,210 --> 00:22:58,940
something about what we learned by by

401
00:22:58,940 --> 00:23:03,230
tracking tracking these 200 200 rules

402
00:23:03,230 --> 00:23:07,670
and so and at first we were really we

403
00:23:07,670 --> 00:23:11,300
were worried that those triples wouldn't

404
00:23:11,300 --> 00:23:14,090
generate the space that that would be

405
00:23:14,090 --> 00:23:16,400
interesting enough that those ripples

406
00:23:16,400 --> 00:23:19,640
would be like kind of rough that that

407
00:23:19,640 --> 00:23:21,800
malicious files and clean files would

408
00:23:21,800 --> 00:23:24,590
collapse into one big cluster without

409
00:23:24,590 --> 00:23:29,150
any any useful useful information but we

410
00:23:29,150 --> 00:23:31,430
we were lucky or not lucky we were kind

411
00:23:31,430 --> 00:23:34,280
of surprised that the space is more

412
00:23:34,280 --> 00:23:36,320
granular that we thought from the

413
00:23:36,320 --> 00:23:37,700
beginning and this makes sense because

414
00:23:37,700 --> 00:23:41,080
imagine the structure was introduced in

415
00:23:41,080 --> 00:23:45,980
1997 and the more and more visual

416
00:23:45,980 --> 00:23:48,140
studios are coming so there are more and

417
00:23:48,140 --> 00:23:50,780
more building environments like

418
00:23:50,780 --> 00:23:52,820
producing visuals to the open

419
00:23:52,820 --> 00:23:57,080
executables and you know so so the space

420
00:23:57,080 --> 00:24:00,260
is granular enough for our purposes

421
00:24:00,260 --> 00:24:03,260
actually it is rich indeed the space

422
00:24:03,260 --> 00:24:05,900
generated by triples of prodigy and the

423
00:24:05,900 --> 00:24:08,059
information stored in which others is

424
00:24:08,059 --> 00:24:10,970
rich enough for for tracking and

425
00:24:10,970 --> 00:24:12,410
reasonably distinguished between

426
00:24:12,410 --> 00:24:16,520
malicious and clean files so let's let's

427
00:24:16,520 --> 00:24:18,770
move to the examples first first

428
00:24:18,770 --> 00:24:21,260
generally mmm disadvantages advantages

429
00:24:21,260 --> 00:24:24,679
so it is a small piece of information so

430
00:24:24,679 --> 00:24:27,700
it is easily stored and quickly accessed

431
00:24:27,700 --> 00:24:30,200
this is really really good good thing

432
00:24:30,200 --> 00:24:33,380
and basically malicious projects not

433
00:24:33,380 --> 00:24:35,500
considering like coal miners and

434
00:24:35,500 --> 00:24:38,080
projects that incorporate big open as

435
00:24:38,080 --> 00:24:41,210
SSL libraries are basically of small

436
00:24:41,210 --> 00:24:45,290
size so this is something that that put

437
00:24:45,290 --> 00:24:49,340
put heuristics on the on the on the side

438
00:24:49,340 --> 00:24:52,250
of maliciousness and when we wanted to

439
00:24:52,250 --> 00:24:54,890
write a role we we always wanted to

440
00:24:54,890 --> 00:24:58,700
cover multi stage attacks so to to cover

441
00:24:58,700 --> 00:25:02,240
with one single rule dropper as well as

442
00:25:02,240 --> 00:25:06,350
the payload or 32-bit barand as well as

443
00:25:06,350 --> 00:25:11,679
64-bit variety and this was possible yes

444
00:25:11,679 --> 00:25:15,049
and also all creation of anomalies could

445
00:25:15,049 --> 00:25:17,360
lead to a quick mole verdict but we

446
00:25:17,360 --> 00:25:19,850
didn't do that too much in our Maori

447
00:25:19,850 --> 00:25:22,610
search so the disadvantage is of course

448
00:25:22,610 --> 00:25:24,770
will need to exist so you don't don't

449
00:25:24,770 --> 00:25:28,100
get any pro activity you need to to

450
00:25:28,100 --> 00:25:31,040
learn about your apt tool set and to

451
00:25:31,040 --> 00:25:33,830
create rules and to track them you need

452
00:25:33,830 --> 00:25:37,880
to do this work manually and tracking is

453
00:25:37,880 --> 00:25:40,309
lost with any update of visuals to the

454
00:25:40,309 --> 00:25:42,530
orbit because the build number changes

455
00:25:42,530 --> 00:25:45,140
and also with the large refactoring

456
00:25:45,140 --> 00:25:47,679
refactoring of a malicious project and

457
00:25:47,679 --> 00:25:49,970
what we learned okay there's a quotation

458
00:25:49,970 --> 00:25:52,220
for each of the 200 rules already exist

459
00:25:52,220 --> 00:25:55,000
the false positive but this is not that

460
00:25:55,000 --> 00:25:57,470
negative statement of course because

461
00:25:57,470 --> 00:25:58,700
this is a really small piece of

462
00:25:58,700 --> 00:25:59,390
information

463
00:25:59,390 --> 00:26:02,650
you can't expect that you could detect

464
00:26:02,650 --> 00:26:06,740
like families based on this but the

465
00:26:06,740 --> 00:26:09,049
nature of false positives are kind of

466
00:26:09,049 --> 00:26:12,049
rare it was various proof of concepts

467
00:26:12,049 --> 00:26:15,450
tools from specialized software

468
00:26:15,450 --> 00:26:17,610
when we were lucky and the certificate

469
00:26:17,610 --> 00:26:19,260
it was present so we could at least

470
00:26:19,260 --> 00:26:22,140
identify where the binary came from but

471
00:26:22,140 --> 00:26:23,940
also there are many small components of

472
00:26:23,940 --> 00:26:25,910
projects of unknown origin and

473
00:26:25,910 --> 00:26:28,500
functionality and what was curious

474
00:26:28,500 --> 00:26:30,150
enough that one row could cover more

475
00:26:30,150 --> 00:26:32,370
unrelated more families that we

476
00:26:32,370 --> 00:26:35,370
experience too so let's start with the

477
00:26:35,370 --> 00:26:37,320
examples as we told already the

478
00:26:37,320 --> 00:26:40,290
motivation was in the our our research

479
00:26:40,290 --> 00:26:43,740
of apt Lazarus group and it's doll set

480
00:26:43,740 --> 00:26:46,200
it was really huge so we really like

481
00:26:46,200 --> 00:26:48,810
grasping at straws to find some

482
00:26:48,810 --> 00:26:51,330
relations we did the paper last year and

483
00:26:51,330 --> 00:26:53,100
we found out that at least two major

484
00:26:53,100 --> 00:26:55,680
groups were using where were present one

485
00:26:55,680 --> 00:26:59,640
was using a business 298 and 2010 and

486
00:26:59,640 --> 00:27:01,650
the second group was using increases

487
00:27:01,650 --> 00:27:03,990
throughout 2010 exclusively but of

488
00:27:03,990 --> 00:27:07,320
course we also find many anomalies of if

489
00:27:07,320 --> 00:27:09,510
you are interested in just to just check

490
00:27:09,510 --> 00:27:12,360
the paper no okay this is another

491
00:27:12,360 --> 00:27:14,930
example this is a conjunction of of

492
00:27:14,930 --> 00:27:19,830
ranges like object count CPP objects

493
00:27:19,830 --> 00:27:23,310
usage of assembly at a certain version

494
00:27:23,310 --> 00:27:26,250
and number of imports and so on and this

495
00:27:26,250 --> 00:27:31,730
role is like not great to cover

496
00:27:31,730 --> 00:27:35,250
malicious projects exclusively but it

497
00:27:35,250 --> 00:27:37,820
could cover industrial binaries and

498
00:27:37,820 --> 00:27:40,650
examiner binaries at the same time I'm

499
00:27:40,650 --> 00:27:42,660
not saying that there isn't any other

500
00:27:42,660 --> 00:27:44,490
projects that are flagged by this

501
00:27:44,490 --> 00:27:48,180
conjunction of rules but at least the

502
00:27:48,180 --> 00:27:51,270
conclusion is that the guys were using

503
00:27:51,270 --> 00:27:54,030
the same building environment and the

504
00:27:54,030 --> 00:27:56,000
project was roughly the same size and

505
00:27:56,000 --> 00:27:58,470
actually these two two families are

506
00:27:58,470 --> 00:28:00,930
connected linked in the Linder paper

507
00:28:00,930 --> 00:28:05,010
published on the security another

508
00:28:05,010 --> 00:28:07,800
example I encounter a stranger binary

509
00:28:07,800 --> 00:28:09,870
Happy New Year dot exe it contained

510
00:28:09,870 --> 00:28:11,250
character strings like scout scout scout

511
00:28:11,250 --> 00:28:14,100
it contains a very familiar methods of

512
00:28:14,100 --> 00:28:17,520
dynamic calls and actually it was for me

513
00:28:17,520 --> 00:28:18,870
obviously well this is a hacking thing

514
00:28:18,870 --> 00:28:21,060
binary and actually it was not flagged

515
00:28:21,060 --> 00:28:23,070
by our detection engineers as hacking

516
00:28:23,070 --> 00:28:24,810
him so I thought hey guys you did a poor

517
00:28:24,810 --> 00:28:25,080
job

518
00:28:25,080 --> 00:28:26,910
this is hacking him right so please

519
00:28:26,910 --> 00:28:28,200
request request

520
00:28:28,200 --> 00:28:31,830
action yeah but they told me hey hey my

521
00:28:31,830 --> 00:28:34,200
friend be careful it is not not hacking

522
00:28:34,200 --> 00:28:36,120
thing it is just download they're

523
00:28:36,120 --> 00:28:39,870
incorporating like source code that was

524
00:28:39,870 --> 00:28:42,510
leaked of course and those strings

525
00:28:42,510 --> 00:28:45,299
unreferenced like this is just

526
00:28:45,299 --> 00:28:45,899
downloader

527
00:28:45,899 --> 00:28:47,700
it's not hacking team and we won't be

528
00:28:47,700 --> 00:28:51,120
closet and okay I took a more detailed

529
00:28:51,120 --> 00:28:54,240
look and I realized okay this is

530
00:28:54,240 --> 00:28:57,600
downloaders for apt 37 but actually when

531
00:28:57,600 --> 00:29:00,269
I when I rescan the file I I realized

532
00:29:00,269 --> 00:29:02,940
that my error rule was flagging the past

533
00:29:02,940 --> 00:29:05,429
apt 37 the building environment the

534
00:29:05,429 --> 00:29:07,559
magnitude of project was really related

535
00:29:07,559 --> 00:29:10,679
to the binaries attributed to apt 37 so

536
00:29:10,679 --> 00:29:12,649
for me wow this is really cool that

537
00:29:12,649 --> 00:29:15,090
first if you take a look at character

538
00:29:15,090 --> 00:29:16,950
strings you could think okay this is

539
00:29:16,950 --> 00:29:18,690
hacking theme but if you take a look at

540
00:29:18,690 --> 00:29:21,090
the dubbing environment you could say

541
00:29:21,090 --> 00:29:23,250
okay perhaps this is not and it could be

542
00:29:23,250 --> 00:29:23,850
something else

543
00:29:23,850 --> 00:29:28,260
and another examples okay a suspicious

544
00:29:28,260 --> 00:29:32,120
file export name the LCR PSD knew about

545
00:29:32,120 --> 00:29:37,409
DLL and using similarity levels I found

546
00:29:37,409 --> 00:29:39,539
out okay this is really really close to

547
00:29:39,539 --> 00:29:42,000
a file called old creepy SD dot DL DL

548
00:29:42,000 --> 00:29:43,980
this there was really small it's just a

549
00:29:43,980 --> 00:29:46,679
tiny piece of code it's a loader no data

550
00:29:46,679 --> 00:29:51,779
so no no quick attribution and but the

551
00:29:51,779 --> 00:29:53,700
fact that was similar to the original

552
00:29:53,700 --> 00:29:57,029
one is already flagged as reconquer so

553
00:29:57,029 --> 00:29:58,380
the conclusion wow this is a new

554
00:29:58,380 --> 00:30:00,389
campaign of operation operation

555
00:30:00,389 --> 00:30:04,919
groundbait and so let's summarize it I

556
00:30:04,919 --> 00:30:07,980
believe we have just time for the some

557
00:30:07,980 --> 00:30:11,730
real three points if retailers are

558
00:30:11,730 --> 00:30:15,330
implemented 22 years ago Microsoft not

559
00:30:15,330 --> 00:30:18,389
offering any option to opt it out not

560
00:30:18,389 --> 00:30:21,779
document it and and never announced so

561
00:30:21,779 --> 00:30:25,440
it's mysterious I believe a small team

562
00:30:25,440 --> 00:30:28,440
of developers and or or even one single

563
00:30:28,440 --> 00:30:30,809
dedicated man could build the whole

564
00:30:30,809 --> 00:30:32,610
infrastructure behind this project so

565
00:30:32,610 --> 00:30:34,549
you could you could get kind of a lot of

566
00:30:34,549 --> 00:30:37,260
information for your apt tracking for a

567
00:30:37,260 --> 00:30:41,210
little little little effort and

568
00:30:41,960 --> 00:30:45,149
retailers is a static feature that can

569
00:30:45,149 --> 00:30:46,859
reasonably distinguish malicious

570
00:30:46,859 --> 00:30:49,979
projects from the clean ones and I I

571
00:30:49,979 --> 00:30:53,249
think this is this is where I stop so if

572
00:30:53,249 --> 00:30:55,259
you have any questions I I don't don't

573
00:30:55,259 --> 00:30:57,479
think we have time yes yeah I don't

574
00:30:57,479 --> 00:30:58,799
think with any time for questions and

575
00:30:58,799 --> 00:31:00,610
thank you very much

576
00:31:00,610 --> 00:31:05,830
[Applause]

