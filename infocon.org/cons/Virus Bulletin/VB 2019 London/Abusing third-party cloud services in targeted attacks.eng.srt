1
00:00:00,030 --> 00:00:02,449
our next speakers and the next topics is

2
00:00:02,449 --> 00:00:04,500
completely different to the first one in

3
00:00:04,500 --> 00:00:06,390
case you've been in this room before or

4
00:00:06,390 --> 00:00:09,480
the I mean the previous speech this time

5
00:00:09,480 --> 00:00:12,780
we're going to focus on cloud and you

6
00:00:12,780 --> 00:00:14,370
could argue that everyone is already

7
00:00:14,370 --> 00:00:16,289
adopted cloud these days but we're going

8
00:00:16,289 --> 00:00:18,660
to talk about malicious actors extra

9
00:00:18,660 --> 00:00:23,039
actually using this in this case to make

10
00:00:23,039 --> 00:00:27,210
sure that they are stealthy but at the

11
00:00:27,210 --> 00:00:28,980
same time there's probably some other

12
00:00:28,980 --> 00:00:30,689
pairs of eyes watching them and that's

13
00:00:30,689 --> 00:00:32,340
that's the story that the guys will

14
00:00:32,340 --> 00:00:33,840
share with us so please welcome on the

15
00:00:33,840 --> 00:00:38,180
stage daniel Anki and that'll be Hershey

16
00:00:41,210 --> 00:00:45,930
so hi so with the but both work for

17
00:00:45,930 --> 00:00:49,170
micro and will so present our research

18
00:00:49,170 --> 00:00:51,510
we called abuse inter-particle services

19
00:00:51,510 --> 00:00:53,940
in targeted attacks so this is the

20
00:00:53,940 --> 00:00:56,010
outline of the talk so after a quick

21
00:00:56,010 --> 00:00:58,829
introduction we will discuss the

22
00:00:58,829 --> 00:01:01,199
standard way of how a malware operator

23
00:01:01,199 --> 00:01:05,339
can set up his infrastructure now we'll

24
00:01:05,339 --> 00:01:07,220
compare it to a second approach which

25
00:01:07,220 --> 00:01:11,240
involves using a cloud service provider

26
00:01:11,240 --> 00:01:15,270
after that we will show you some apt

27
00:01:15,270 --> 00:01:18,060
cases that we investigated lately that

28
00:01:18,060 --> 00:01:20,670
use the second approach using a cloud

29
00:01:20,670 --> 00:01:22,920
service provider so for each of those

30
00:01:22,920 --> 00:01:26,369
apt cases we will present how the

31
00:01:26,369 --> 00:01:28,770
malware works or they use this cloud

32
00:01:28,770 --> 00:01:32,340
provider and then we will like point out

33
00:01:32,340 --> 00:01:34,560
all the advantages and disadvantages for

34
00:01:34,560 --> 00:01:39,420
the attacker of using this approach so

35
00:01:39,420 --> 00:01:42,000
this topic has already been discussed in

36
00:01:42,000 --> 00:01:44,880
the past here four years ago for example

37
00:01:44,880 --> 00:01:48,240
DeRosa talk named C&C as a service but

38
00:01:48,240 --> 00:01:50,090
we believe what we will show today is

39
00:01:50,090 --> 00:01:53,130
more recent maybe in your and also we

40
00:01:53,130 --> 00:01:55,350
have other insights that we want to

41
00:01:55,350 --> 00:01:58,680
share so first of all this only focus on

42
00:01:58,680 --> 00:02:00,719
targeted attacks so no cyber crime here

43
00:02:00,719 --> 00:02:04,290
and we have two goals for you after two

44
00:02:04,290 --> 00:02:06,600
takeaways from this session we want to

45
00:02:06,600 --> 00:02:09,989
show real-life cases so this is from in

46
00:02:09,989 --> 00:02:12,900
the wild on the most important takeaway

47
00:02:12,900 --> 00:02:13,680
would be

48
00:02:13,680 --> 00:02:16,769
who us as defender can leverage this

49
00:02:16,769 --> 00:02:20,120
approach of using cloud services Reuters

50
00:02:20,120 --> 00:02:24,750
so when a malware the developer rises

51
00:02:24,750 --> 00:02:27,180
his mother who wants usually to control

52
00:02:27,180 --> 00:02:29,760
it and sometimes x-ray data send

53
00:02:29,760 --> 00:02:32,459
commands so he needs a communication

54
00:02:32,459 --> 00:02:34,469
protocol so the standard way of doing it

55
00:02:34,469 --> 00:02:37,769
is to well usually they will make all by

56
00:02:37,769 --> 00:02:41,609
themselves so this means renting a web

57
00:02:41,609 --> 00:02:45,450
server buying a domain name so pay for

58
00:02:45,450 --> 00:02:47,189
that a storage sometimes for the

59
00:02:47,189 --> 00:02:49,590
bandwidth so all of this has costs like

60
00:02:49,590 --> 00:02:53,129
financial costs for the attacker but

61
00:02:53,129 --> 00:02:55,950
also on maybe more importantly it's time

62
00:02:55,950 --> 00:02:58,409
consuming so first you need to design

63
00:02:58,409 --> 00:03:00,930
your communication protocols so you want

64
00:03:00,930 --> 00:03:02,069
to think do you want to use him

65
00:03:02,069 --> 00:03:04,200
encryption or do you want to use I don't

66
00:03:04,200 --> 00:03:06,629
know me so blame is or key or something

67
00:03:06,629 --> 00:03:08,579
whatever but so you think about it and

68
00:03:08,579 --> 00:03:11,510
then you start writing the code so you

69
00:03:11,510 --> 00:03:13,799
will permit it into language you like

70
00:03:13,799 --> 00:03:16,049
and then as nobody's perfect you need to

71
00:03:16,049 --> 00:03:18,299
test it because you want it to work when

72
00:03:18,299 --> 00:03:20,699
you use it in the wild so this takes a

73
00:03:20,699 --> 00:03:22,379
lot of time and on top of that you need

74
00:03:22,379 --> 00:03:24,389
like to install the operating system on

75
00:03:24,389 --> 00:03:27,810
the server side configure the server web

76
00:03:27,810 --> 00:03:30,209
server blah blah so this is very burden

77
00:03:30,209 --> 00:03:33,449
to the throat actor on also it has a lot

78
00:03:33,449 --> 00:03:37,019
of disadvantages because well if for

79
00:03:37,019 --> 00:03:39,150
example if any security company will

80
00:03:39,150 --> 00:03:42,030
publish a report on your real group then

81
00:03:42,030 --> 00:03:44,340
you any IT administrator can take the

82
00:03:44,340 --> 00:03:46,590
OCS put on the search for that on the

83
00:03:46,590 --> 00:03:49,799
logs and maybe find that they are

84
00:03:49,799 --> 00:03:52,109
compromised they can block it also

85
00:03:52,109 --> 00:03:55,079
easily if you're a security researcher

86
00:03:55,079 --> 00:03:57,269
maybe you can sinkhole the domain names

87
00:03:57,269 --> 00:04:00,239
or even if you're a law enforcement and

88
00:04:00,239 --> 00:04:02,099
it is happening in your country you can

89
00:04:02,099 --> 00:04:04,259
seize the server so this is not very

90
00:04:04,259 --> 00:04:06,540
good for the attacker side also as you

91
00:04:06,540 --> 00:04:07,949
are the one who developed everything

92
00:04:07,949 --> 00:04:10,439
there is high probability that you made

93
00:04:10,439 --> 00:04:12,870
some mistakes and that can be leveraged

94
00:04:12,870 --> 00:04:15,840
by security researchers for example and

95
00:04:15,840 --> 00:04:18,120
also this harder to difficult to assess

96
00:04:18,120 --> 00:04:20,668
the whole reliable will be your protocol

97
00:04:20,668 --> 00:04:23,700
before actually using it I would say the

98
00:04:23,700 --> 00:04:25,889
only advantage I see of using this like

99
00:04:25,889 --> 00:04:27,180
stander

100
00:04:27,180 --> 00:04:28,830
communication protocol is that you you

101
00:04:28,830 --> 00:04:30,750
can do whatever you want I mean as you

102
00:04:30,750 --> 00:04:32,970
are the one designing it you you can do

103
00:04:32,970 --> 00:04:35,490
whatever you want on the other side this

104
00:04:35,490 --> 00:04:40,190
cloud approach has other advantages so

105
00:04:40,190 --> 00:04:43,710
you don't need to develop anything you

106
00:04:43,710 --> 00:04:45,650
you don't maintain the server side

107
00:04:45,650 --> 00:04:48,120
beyond all of it is owned by a third

108
00:04:48,120 --> 00:04:50,520
party that actually is good at this

109
00:04:50,520 --> 00:04:52,980
topic because it's their work so you

110
00:04:52,980 --> 00:04:55,380
don't get to do all this this work it's

111
00:04:55,380 --> 00:04:57,180
cheaper most of the time actually it's

112
00:04:57,180 --> 00:04:59,760
free most of the cloud providers provide

113
00:04:59,760 --> 00:05:03,030
a given an API it's more reliable and

114
00:05:03,030 --> 00:05:05,250
last but not least it's hard to block

115
00:05:05,250 --> 00:05:07,560
because if you're an IT administrator

116
00:05:07,560 --> 00:05:10,500
you see a request maybe your your

117
00:05:10,500 --> 00:05:12,570
company's using Dropbox or github for a

118
00:05:12,570 --> 00:05:14,430
GT math purposes so you cannot block it

119
00:05:14,430 --> 00:05:16,980
easily and if you see a request to

120
00:05:16,980 --> 00:05:18,240
github how will you know if it's

121
00:05:18,240 --> 00:05:21,210
legitimate or malicious so this is for

122
00:05:21,210 --> 00:05:22,980
for an attacker perspective a good idea

123
00:05:22,980 --> 00:05:25,380
to use cloud but of course you are

124
00:05:25,380 --> 00:05:28,470
constrained by the API features so let's

125
00:05:28,470 --> 00:05:30,900
talk about now about more specific cases

126
00:05:30,900 --> 00:05:34,020
so the first apt group that will discuss

127
00:05:34,020 --> 00:05:36,630
about is named patchwork so here in red

128
00:05:36,630 --> 00:05:38,940
you can see the targeted countries for

129
00:05:38,940 --> 00:05:40,530
the non target countries for this group

130
00:05:40,530 --> 00:05:42,690
as you can see it's mainly Southeast

131
00:05:42,690 --> 00:05:45,840
Asia on us so we'll talk about one

132
00:05:45,840 --> 00:05:48,240
specific malware node called bad bad

133
00:05:48,240 --> 00:05:48,660
news

134
00:05:48,660 --> 00:05:50,940
it's a backdoor that actually uses both

135
00:05:50,940 --> 00:05:53,880
of the alternatives so it will use a

136
00:05:53,880 --> 00:05:55,920
cloud service provider that can be

137
00:05:55,920 --> 00:05:58,350
github or WordPress for example to do a

138
00:05:58,350 --> 00:06:00,930
get request to the cloud provider on to

139
00:06:00,930 --> 00:06:04,650
get the unencrypted ciency server on the

140
00:06:04,650 --> 00:06:06,690
end once it decrypts the C&C server

141
00:06:06,690 --> 00:06:09,060
which it will connect to it so actually

142
00:06:09,060 --> 00:06:12,150
it has all these advantages also of the

143
00:06:12,150 --> 00:06:14,040
standard way I think the only 11th

144
00:06:14,040 --> 00:06:16,170
advantage for the attacker is that it

145
00:06:16,170 --> 00:06:19,410
can change the cnc without recompiling

146
00:06:19,410 --> 00:06:21,630
the binary and without having to rain in

147
00:06:21,630 --> 00:06:23,550
fact the victim so if the C&C gets

148
00:06:23,550 --> 00:06:25,260
blocked they can change the github for

149
00:06:25,260 --> 00:06:29,790
example page on on get a new C&C this is

150
00:06:29,790 --> 00:06:31,200
what it looks like when you look at the

151
00:06:31,200 --> 00:06:33,630
sample so it's kind of absurd obfuscated

152
00:06:33,630 --> 00:06:35,430
strings that you can do for skates and

153
00:06:35,430 --> 00:06:39,320
you get the direct cloud provider URL

154
00:06:39,320 --> 00:06:41,420
if you go there you will get this kind

155
00:06:41,420 --> 00:06:44,270
of pages so this is github you see some

156
00:06:44,270 --> 00:06:46,730
XML content with a long base64 encoded

157
00:06:46,730 --> 00:06:49,940
string the same for WordPress or for

158
00:06:49,940 --> 00:06:52,550
feed 43 so this is what you will get and

159
00:06:52,550 --> 00:06:56,030
if you base64 decode it you still need

160
00:06:56,030 --> 00:06:58,790
to write some script to go do some

161
00:06:58,790 --> 00:07:01,640
additional encryption based on zoran

162
00:07:01,640 --> 00:07:04,220
role maybe sometimes Blowfish for newer

163
00:07:04,220 --> 00:07:07,370
versions but in the end you get a usual

164
00:07:07,370 --> 00:07:10,010
CNC which is some PHP script usually

165
00:07:10,010 --> 00:07:12,830
without domain name direct IP address so

166
00:07:12,830 --> 00:07:14,780
from a researcher perspective for us

167
00:07:14,780 --> 00:07:16,880
what is good here this is an example of

168
00:07:16,880 --> 00:07:20,240
one of the github repositories for one

169
00:07:20,240 --> 00:07:22,820
of these malware samples and you can see

170
00:07:22,820 --> 00:07:25,910
here at the beginning the there was an

171
00:07:25,910 --> 00:07:28,610
encrypted C&C it was a DS domain name

172
00:07:28,610 --> 00:07:31,490
but like two days later it got changed

173
00:07:31,490 --> 00:07:34,040
to another IP address on again got

174
00:07:34,040 --> 00:07:35,360
changed to the same IP address I don't

175
00:07:35,360 --> 00:07:38,060
know why but so for us as researchers is

176
00:07:38,060 --> 00:07:41,060
good because we can see the evolution of

177
00:07:41,060 --> 00:07:45,140
this CNC address use from the attackers

178
00:07:45,140 --> 00:07:49,070
just by going to github so and better

179
00:07:49,070 --> 00:07:51,260
than that we can use the github search

180
00:07:51,260 --> 00:07:55,010
engine and with a specific query we can

181
00:07:55,010 --> 00:07:57,440
actually get the whole of the CNC is

182
00:07:57,440 --> 00:08:00,680
used for this malware family just by

183
00:08:00,680 --> 00:08:03,680
requesting some some easy query so here

184
00:08:03,680 --> 00:08:06,500
as you can see in this page there are 64

185
00:08:06,500 --> 00:08:08,930
cncs for this bad news malware so with

186
00:08:08,930 --> 00:08:10,940
only one sample you get the whole things

187
00:08:10,940 --> 00:08:13,720
infrastructure for this this Reducto

188
00:08:13,720 --> 00:08:16,250
so now let's discuss another detector

189
00:08:16,250 --> 00:08:19,690
called Confucius the that targets

190
00:08:19,690 --> 00:08:22,610
Pakistan mainly government and military

191
00:08:22,610 --> 00:08:25,880
entities so we will discuss one stealer

192
00:08:25,880 --> 00:08:29,450
named swiss knife so it's it's a file

193
00:08:29,450 --> 00:08:31,240
stealer so it will search for some

194
00:08:31,240 --> 00:08:34,340
specific file extensions like documents

195
00:08:34,340 --> 00:08:37,520
of his documents or PDF files on it will

196
00:08:37,520 --> 00:08:41,510
upload them to to dropbox on by using an

197
00:08:41,510 --> 00:08:45,860
api key in an authorization header so

198
00:08:45,860 --> 00:08:48,500
this is the the compiled code from the

199
00:08:48,500 --> 00:08:50,720
this sample so as you can see on top of

200
00:08:50,720 --> 00:08:53,120
it there is the the API key

201
00:08:53,120 --> 00:08:55,939
and then the folders that will be seen

202
00:08:55,939 --> 00:08:58,730
by the panel malware what we can do as

203
00:08:58,730 --> 00:09:00,769
researchers again it's right this like

204
00:09:00,769 --> 00:09:02,990
very quick and dirty script in Python

205
00:09:02,990 --> 00:09:05,389
using the Python library for Korean drop

206
00:09:05,389 --> 00:09:07,850
box you can just copy paste there the

207
00:09:07,850 --> 00:09:10,639
API key and if you look in the

208
00:09:10,639 --> 00:09:12,889
documentation there is some fancy stuff

209
00:09:12,889 --> 00:09:15,529
that you can do there is some boolean

210
00:09:15,529 --> 00:09:17,990
for example that allows you to include

211
00:09:17,990 --> 00:09:20,389
the metadata of the deleted files in

212
00:09:20,389 --> 00:09:23,420
Dropbox so that was interesting for us

213
00:09:23,420 --> 00:09:25,790
because in this case the attacker after

214
00:09:25,790 --> 00:09:27,230
retrieving the files would read delete

215
00:09:27,230 --> 00:09:29,930
them but we could enumerate the deleted

216
00:09:29,930 --> 00:09:32,029
files so this is an example of what we

217
00:09:32,029 --> 00:09:35,839
got so it's good for us for researchers

218
00:09:35,839 --> 00:09:38,360
because then we could have had a better

219
00:09:38,360 --> 00:09:41,600
idea of the interest for this specific

220
00:09:41,600 --> 00:09:44,720
threat actor again we could also

221
00:09:44,720 --> 00:09:46,449
numerate the the name of the folders

222
00:09:46,449 --> 00:09:48,499
little folders on it was also

223
00:09:48,499 --> 00:09:49,910
interesting because in this case there

224
00:09:49,910 --> 00:09:52,339
was one folder per victim so we could

225
00:09:52,339 --> 00:09:54,920
get also some victim names so this is

226
00:09:54,920 --> 00:09:58,189
interesting also use case for us another

227
00:09:58,189 --> 00:10:00,829
stealer which we could pick cloud well

228
00:10:00,829 --> 00:10:02,509
real quickly because it's exactly the

229
00:10:02,509 --> 00:10:04,429
same as Rob box it's also file stealer

230
00:10:04,429 --> 00:10:06,920
same extensions during difference in the

231
00:10:06,920 --> 00:10:10,490
library is that it uses the mail address

232
00:10:10,490 --> 00:10:13,910
on the password for connecting to that

233
00:10:13,910 --> 00:10:15,439
there is no API key it is directly the

234
00:10:15,439 --> 00:10:18,529
credentials so this is the compiled code

235
00:10:18,529 --> 00:10:20,509
you can see on top the mail address on

236
00:10:20,509 --> 00:10:23,420
password of the attacker and we could

237
00:10:23,420 --> 00:10:25,759
use it to connect to the interface of

238
00:10:25,759 --> 00:10:28,699
the cloud and there is an interesting

239
00:10:28,699 --> 00:10:31,730
here button this named restore so this

240
00:10:31,730 --> 00:10:33,649
was also nice because we saw that his

241
00:10:33,649 --> 00:10:38,059
attacker actually deleted sometimes the

242
00:10:38,059 --> 00:10:39,620
folders have to probably have to

243
00:10:39,620 --> 00:10:41,389
retrieve in it so we could go to the

244
00:10:41,389 --> 00:10:43,910
trash and look at them and we saw one

245
00:10:43,910 --> 00:10:46,759
specific folder that of name was

246
00:10:46,759 --> 00:10:48,879
different from the other computers there

247
00:10:48,879 --> 00:10:51,740
so we restored it and get the content

248
00:10:51,740 --> 00:10:53,329
and it was very interesting because

249
00:10:53,329 --> 00:10:55,189
actually we found out it was the

250
00:10:55,189 --> 00:10:56,240
attackers machine

251
00:10:56,240 --> 00:10:59,449
so probably the malware operator tasted

252
00:10:59,449 --> 00:11:02,059
the malware is on machine and then

253
00:11:02,059 --> 00:11:04,759
deleted it on the deleted folder on the

254
00:11:04,759 --> 00:11:06,980
cloud so this is one of the files

255
00:11:06,980 --> 00:11:09,020
we could retrieve so we found it

256
00:11:09,020 --> 00:11:10,430
interesting on the left there is the

257
00:11:10,430 --> 00:11:12,650
name of the malware families that are

258
00:11:12,650 --> 00:11:14,960
used by detector so this is not some LV

259
00:11:14,960 --> 00:11:16,940
that that found these names and you can

260
00:11:16,940 --> 00:11:18,800
see that they will like test their

261
00:11:18,800 --> 00:11:21,680
samples against multiple antiviruses so

262
00:11:21,680 --> 00:11:23,690
as any protector will do but you have

263
00:11:23,690 --> 00:11:25,970
this this file that proves it another

264
00:11:25,970 --> 00:11:27,620
file that we found that was of interest

265
00:11:27,620 --> 00:11:30,410
is this this excel file that had some

266
00:11:30,410 --> 00:11:32,690
statistics for the each victim

267
00:11:32,690 --> 00:11:34,010
and at the bottom there is an

268
00:11:34,010 --> 00:11:35,420
interesting note there was not one

269
00:11:35,420 --> 00:11:37,970
Indian so this means that this protector

270
00:11:37,970 --> 00:11:41,030
will check every hit they get and they

271
00:11:41,030 --> 00:11:43,610
will compare look at the IP address and

272
00:11:43,610 --> 00:11:45,620
look the country of origin so this gives

273
00:11:45,620 --> 00:11:46,880
more information about the two attacks

274
00:11:46,880 --> 00:11:50,630
or so it's useful the same protector

275
00:11:50,630 --> 00:11:53,180
again but this for time is another back

276
00:11:53,180 --> 00:11:55,520
door that was targeting the Android

277
00:11:55,520 --> 00:11:59,900
platform so for mobile phones the the

278
00:11:59,900 --> 00:12:03,680
how it works it had a CNC server so it

279
00:12:03,680 --> 00:12:06,020
registered to the C&C server first when

280
00:12:06,020 --> 00:12:08,750
it gets infected and then the since this

281
00:12:08,750 --> 00:12:10,670
server would set send commands to the

282
00:12:10,670 --> 00:12:13,550
application and actually one of the

283
00:12:13,550 --> 00:12:15,710
commands it can update the AWS

284
00:12:15,710 --> 00:12:19,580
credentials so this is because the AWS

285
00:12:19,580 --> 00:12:22,400
was used for exfiltrating files so when

286
00:12:22,400 --> 00:12:25,070
the attacker wanted to copy some files

287
00:12:25,070 --> 00:12:30,500
they would get copied to AWS so with AWS

288
00:12:30,500 --> 00:12:33,710
access key and secret key if the command

289
00:12:33,710 --> 00:12:36,380
was to retrieve as images or contacts or

290
00:12:36,380 --> 00:12:38,360
collogues do those would get sent to to

291
00:12:38,360 --> 00:12:41,090
the CNC server so what was here smart

292
00:12:41,090 --> 00:12:43,010
from the attacker is that those keys

293
00:12:43,010 --> 00:12:45,860
were not hard-coded so with the sample

294
00:12:45,860 --> 00:12:48,470
you cannot extract the keys on and go to

295
00:12:48,470 --> 00:12:50,960
AWS and get the contents it was not that

296
00:12:50,960 --> 00:12:51,380
easy

297
00:12:51,380 --> 00:12:54,860
so this was smart from the attacker this

298
00:12:54,860 --> 00:12:57,020
is what the code looked like for the

299
00:12:57,020 --> 00:12:59,420
function for dating those credentials

300
00:12:59,420 --> 00:13:01,460
and on the bottom is the function to

301
00:13:01,460 --> 00:13:05,120
send the file to the l WS but still this

302
00:13:05,120 --> 00:13:07,550
attacker made some silly mistakes basic

303
00:13:07,550 --> 00:13:10,460
security mistakes so we could access

304
00:13:10,460 --> 00:13:13,370
their panel and this is what the panel

305
00:13:13,370 --> 00:13:15,320
looks like so you can enable/disable

306
00:13:15,320 --> 00:13:17,420
some features so it's definitely an

307
00:13:17,420 --> 00:13:20,330
espionage application for targeting

308
00:13:20,330 --> 00:13:20,910
mobile

309
00:13:20,910 --> 00:13:23,820
from and then in this panel you could

310
00:13:23,820 --> 00:13:27,330
find the AWS credentials so we still

311
00:13:27,330 --> 00:13:31,140
managed to access them and again we

312
00:13:31,140 --> 00:13:32,790
could see that they infected one of

313
00:13:32,790 --> 00:13:35,250
their own phones to probably test again

314
00:13:35,250 --> 00:13:37,530
the malware and so we found some

315
00:13:37,530 --> 00:13:39,960
interesting screenshots this for example

316
00:13:39,960 --> 00:13:42,330
is one screenshot of the whatsapp

317
00:13:42,330 --> 00:13:45,350
application and so we saw that the

318
00:13:45,350 --> 00:13:47,820
operator was talking to some person in

319
00:13:47,820 --> 00:13:50,670
Urdu language so we searched it for this

320
00:13:50,670 --> 00:13:52,470
phone number in Facebook and we could

321
00:13:52,470 --> 00:13:54,240
see that it's someone work in a

322
00:13:54,240 --> 00:13:56,340
Pakistani Air Force so this gives

323
00:13:56,340 --> 00:13:58,470
formation about the kind of targets that

324
00:13:58,470 --> 00:14:01,110
this detector is interested in so this

325
00:14:01,110 --> 00:14:04,500
was nice for us to see ok now I'll

326
00:14:04,500 --> 00:14:08,610
continue with another predictors so this

327
00:14:08,610 --> 00:14:10,500
trajectory which I introduce now is

328
00:14:10,500 --> 00:14:12,570
called like muddy water we have been

329
00:14:12,570 --> 00:14:15,660
researching this for my quite some time

330
00:14:15,660 --> 00:14:18,390
and all what we know is that this

331
00:14:18,390 --> 00:14:21,060
protector is based in Middle East and as

332
00:14:21,060 --> 00:14:23,160
you can see from the list of targeted

333
00:14:23,160 --> 00:14:25,050
countries there are mainly targeting

334
00:14:25,050 --> 00:14:27,030
also like in other countries in the

335
00:14:27,030 --> 00:14:30,180
Middle East this traductor has several

336
00:14:30,180 --> 00:14:33,420
different custom-made backdoors and for

337
00:14:33,420 --> 00:14:36,080
the purpose of this talk we choose the

338
00:14:36,080 --> 00:14:40,470
backdoor called cloud stats and the flow

339
00:14:40,470 --> 00:14:43,080
of the data of this backdoor is like in

340
00:14:43,080 --> 00:14:45,540
this schematic so you have the malware

341
00:14:45,540 --> 00:14:50,010
and it infects the Machine and then it

342
00:14:50,010 --> 00:14:52,590
uploads the file with extension dot

343
00:14:52,590 --> 00:14:54,920
track like for registering the new

344
00:14:54,920 --> 00:14:59,130
victim to the cloud storage then if this

345
00:14:59,130 --> 00:15:01,500
protector wants to execute some command

346
00:15:01,500 --> 00:15:05,400
they will upload dot file with CMD

347
00:15:05,400 --> 00:15:08,750
extension then this malware will read it

348
00:15:08,750 --> 00:15:12,990
run it and put the result into dot res

349
00:15:12,990 --> 00:15:15,870
file and upload the result back result

350
00:15:15,870 --> 00:15:18,450
back to the cloud storage and from there

351
00:15:18,450 --> 00:15:21,960
the protector can read the result of the

352
00:15:21,960 --> 00:15:26,910
command the name of each victim is of

353
00:15:26,910 --> 00:15:29,340
course different and in the purpose or

354
00:15:29,340 --> 00:15:31,890
in this in case of this malware it used

355
00:15:31,890 --> 00:15:34,350
like different like environment hash

356
00:15:34,350 --> 00:15:36,270
so the protector could distinguish

357
00:15:36,270 --> 00:15:39,870
between like different victims connected

358
00:15:39,870 --> 00:15:42,540
to the same storage so when we did the

359
00:15:42,540 --> 00:15:44,730
reverse engineering of this malware so

360
00:15:44,730 --> 00:15:47,370
from this piece off from this source

361
00:15:47,370 --> 00:15:49,500
code you can see that it was written in

362
00:15:49,500 --> 00:15:52,290
PowerShell and this is the function read

363
00:15:52,290 --> 00:15:55,320
file and for us as researchers we care

364
00:15:55,320 --> 00:15:57,510
mainly about this information like

365
00:15:57,510 --> 00:16:00,620
headers at authorization variable and

366
00:16:00,620 --> 00:16:06,050
also like the URL the same for upload

367
00:16:06,050 --> 00:16:08,880
there is it the URL and again some

368
00:16:08,880 --> 00:16:11,400
authorization variable so when we go

369
00:16:11,400 --> 00:16:15,270
further and look more into these the

370
00:16:15,270 --> 00:16:18,000
like the compiled source code you can

371
00:16:18,000 --> 00:16:19,530
see that there are like some variables

372
00:16:19,530 --> 00:16:20,640
like dollar API

373
00:16:20,640 --> 00:16:22,890
starting with Bearer something so

374
00:16:22,890 --> 00:16:25,920
they're like hard-coded API keys which

375
00:16:25,920 --> 00:16:31,380
can be like very useful for us here is

376
00:16:31,380 --> 00:16:34,590
the screenshot again mentioning all the

377
00:16:34,590 --> 00:16:38,010
different extensions which the malware

378
00:16:38,010 --> 00:16:40,500
is using so if we know all this

379
00:16:40,500 --> 00:16:42,780
information if we know the extension

380
00:16:42,780 --> 00:16:46,290
names if we have the API keys we can

381
00:16:46,290 --> 00:16:48,810
write our own scripts which will

382
00:16:48,810 --> 00:16:51,990
regularly monitor the content of this

383
00:16:51,990 --> 00:16:54,390
cloud storage and download like all the

384
00:16:54,390 --> 00:16:56,550
files for us and we can get like this

385
00:16:56,550 --> 00:16:58,320
the files like this one so this is the

386
00:16:58,320 --> 00:17:01,740
example of the registry file so you can

387
00:17:01,740 --> 00:17:03,510
see that there is the name of the

388
00:17:03,510 --> 00:17:05,460
machine there is the architecture there

389
00:17:05,460 --> 00:17:08,790
is domain name their IP addresses the

390
00:17:08,790 --> 00:17:12,089
example of result file hex encoded but

391
00:17:12,089 --> 00:17:15,060
after decoding you can see that they

392
00:17:15,060 --> 00:17:17,760
have they run the LS command for listing

393
00:17:17,760 --> 00:17:20,339
content of some directory it's like very

394
00:17:20,339 --> 00:17:22,829
very interesting for us like we can know

395
00:17:22,829 --> 00:17:24,869
what's going on we can monitor a

396
00:17:24,869 --> 00:17:31,980
straight actor like on like on time one

397
00:17:31,980 --> 00:17:33,840
more piece of malware I will talk

398
00:17:33,840 --> 00:17:36,660
related to this muddy waters predictor

399
00:17:36,660 --> 00:17:38,790
it's like one mobile application which

400
00:17:38,790 --> 00:17:40,940
was interesting for us because it used

401
00:17:40,940 --> 00:17:44,870
telegram channel for exfiltration so

402
00:17:44,870 --> 00:17:48,070
when the phone was infected

403
00:17:48,070 --> 00:17:50,650
so it registered to the standard CNC

404
00:17:50,650 --> 00:17:54,190
server and like that Turk can could

405
00:17:54,190 --> 00:17:57,850
control this infected mobile phone but

406
00:17:57,850 --> 00:18:00,430
the stole information were uploaded to

407
00:18:00,430 --> 00:18:02,890
the telegram channel so for us the

408
00:18:02,890 --> 00:18:04,270
researchers we did some reverse

409
00:18:04,270 --> 00:18:06,850
engineering and you can see that there

410
00:18:06,850 --> 00:18:10,330
is like hard-coded URL to API the

411
00:18:10,330 --> 00:18:13,870
telegram dot org and then also you can

412
00:18:13,870 --> 00:18:16,900
see like another information like chat

413
00:18:16,900 --> 00:18:20,980
ID or bot ID you can go further and you

414
00:18:20,980 --> 00:18:23,230
can you can explore like what are the

415
00:18:23,230 --> 00:18:26,080
implemented like backdoor commands or

416
00:18:26,080 --> 00:18:27,910
process commands so there's the function

417
00:18:27,910 --> 00:18:30,520
process command again with hard-coded

418
00:18:30,520 --> 00:18:35,500
links to some telegram API for this in

419
00:18:35,500 --> 00:18:39,130
this case like what-what was done well

420
00:18:39,130 --> 00:18:41,380
what-what is quite interesting feature

421
00:18:41,380 --> 00:18:44,200
or useful feature if the thread actor

422
00:18:44,200 --> 00:18:46,480
loses the control of the CNC server for

423
00:18:46,480 --> 00:18:49,900
whatever reason and then the mobile

424
00:18:49,900 --> 00:18:51,940
phone is to infect it there was the

425
00:18:51,940 --> 00:18:53,890
function that once a day it just

426
00:18:53,890 --> 00:18:56,410
collected all the data like system

427
00:18:56,410 --> 00:18:59,830
information list of contacts emesis call

428
00:18:59,830 --> 00:19:02,410
logs and uploaded them to the telegram

429
00:19:02,410 --> 00:19:06,220
channel and there was like the the it

430
00:19:06,220 --> 00:19:07,900
was it was not like once a year so even

431
00:19:07,900 --> 00:19:10,180
though they could lose they couldn't

432
00:19:10,180 --> 00:19:12,370
issue any commands they could still get

433
00:19:12,370 --> 00:19:15,030
some updates and changes with once a day

434
00:19:15,030 --> 00:19:17,680
this application goes and got

435
00:19:17,680 --> 00:19:20,170
uninstalled and of course if we have

436
00:19:20,170 --> 00:19:23,890
telegram we can enumerate or we can see

437
00:19:23,890 --> 00:19:26,620
some information related to this

438
00:19:26,620 --> 00:19:28,990
telegram telegram channel so for us

439
00:19:28,990 --> 00:19:31,090
maybe interesting information or

440
00:19:31,090 --> 00:19:33,100
interesting metadata metadata could be

441
00:19:33,100 --> 00:19:35,230
this language code which is called FA

442
00:19:35,230 --> 00:19:38,230
which is Farsi which might give us a

443
00:19:38,230 --> 00:19:40,120
hint where the threat actor is coming

444
00:19:40,120 --> 00:19:42,880
from or it can be also false flag so who

445
00:19:42,880 --> 00:19:46,870
knows another street actor I will talk

446
00:19:46,870 --> 00:19:52,450
about shortly we know we we call him

447
00:19:52,450 --> 00:19:58,420
like this as a UB and for the targets we

448
00:19:58,420 --> 00:20:01,810
only know that they target some people

449
00:20:01,810 --> 00:20:04,390
who are interested in North Korea not

450
00:20:04,390 --> 00:20:07,750
necessarily living in North Korea and

451
00:20:07,750 --> 00:20:11,200
this threat actor had like or we

452
00:20:11,200 --> 00:20:13,060
observed like two versions of the

453
00:20:13,060 --> 00:20:15,250
malware and all of them were using the

454
00:20:15,250 --> 00:20:17,110
combination of like different services

455
00:20:17,110 --> 00:20:20,100
like each of them like for different

456
00:20:20,100 --> 00:20:25,870
purpose so in this case they used Geist

457
00:20:25,870 --> 00:20:30,610
for sending the commands or for giving

458
00:20:30,610 --> 00:20:32,170
the commands which would be executed on

459
00:20:32,170 --> 00:20:33,250
victim machine

460
00:20:33,250 --> 00:20:35,850
they used select channels for

461
00:20:35,850 --> 00:20:39,070
exfiltrating the results of the commands

462
00:20:39,070 --> 00:20:42,960
and they used file dot IO for uploading

463
00:20:42,960 --> 00:20:45,730
stolen files or upholding some bigger

464
00:20:45,730 --> 00:20:50,530
files so we know that this malware was

465
00:20:50,530 --> 00:20:54,660
delivered via what we're hauling and

466
00:20:54,660 --> 00:20:57,190
this is the example of this Geist files

467
00:20:57,190 --> 00:21:00,880
I mean as I mentioned before you can see

468
00:21:00,880 --> 00:21:02,790
that there are different commands and

469
00:21:02,790 --> 00:21:04,600
only some of these commands are

470
00:21:04,600 --> 00:21:06,700
activated so it starts with these two

471
00:21:06,700 --> 00:21:08,410
symbols like this caret symbol and

472
00:21:08,410 --> 00:21:10,360
dollar symbol so it says that the

473
00:21:10,360 --> 00:21:12,430
command which is enclosed between these

474
00:21:12,430 --> 00:21:14,830
two symbols are activated the address

475
00:21:14,830 --> 00:21:17,200
art is not activated so they are not

476
00:21:17,200 --> 00:21:19,240
executed and it's like one disadvantage

477
00:21:19,240 --> 00:21:21,760
of this malware version one that there

478
00:21:21,760 --> 00:21:24,130
is only one Geist file so if there are

479
00:21:24,130 --> 00:21:27,850
more victims that the same command is

480
00:21:27,850 --> 00:21:31,390
executed on each victim so this is the

481
00:21:31,390 --> 00:21:33,970
disadvantage of version one it was fixed

482
00:21:33,970 --> 00:21:35,470
in version two I will talk about it

483
00:21:35,470 --> 00:21:40,480
later first like we are interested in

484
00:21:40,480 --> 00:21:44,560
select tokens so the file was the

485
00:21:44,560 --> 00:21:47,920
Malheur file was executable so we could

486
00:21:47,920 --> 00:21:49,930
like the comp we could reverse-engineer

487
00:21:49,930 --> 00:21:52,060
it and we could find that there was like

488
00:21:52,060 --> 00:21:55,030
this like token split into several small

489
00:21:55,030 --> 00:21:56,890
strings so when we concatenate them

490
00:21:56,890 --> 00:22:00,040
together we get the slack token and this

491
00:22:00,040 --> 00:22:03,700
could help us later for writing some of

492
00:22:03,700 --> 00:22:08,080
our monitoring scripts to get data from

493
00:22:08,080 --> 00:22:10,420
the slack from the from the slack

494
00:22:10,420 --> 00:22:14,170
channel for the use of file dot IO it's

495
00:22:14,170 --> 00:22:15,690
like kind of interesting

496
00:22:15,690 --> 00:22:18,870
quite quite good service for predictors

497
00:22:18,870 --> 00:22:21,180
because when the file gets uploaded to

498
00:22:21,180 --> 00:22:24,450
the service then it's downloaded just

499
00:22:24,450 --> 00:22:28,140
once and after one download the file is

500
00:22:28,140 --> 00:22:30,780
deleted so even for us researchers when

501
00:22:30,780 --> 00:22:33,900
we obtain the link to the file we would

502
00:22:33,900 --> 00:22:35,820
have to download it like get drink

503
00:22:35,820 --> 00:22:37,860
before the threat actors because if we

504
00:22:37,860 --> 00:22:42,090
are later we get like no content so I

505
00:22:42,090 --> 00:22:43,440
mentioned that there was like version

506
00:22:43,440 --> 00:22:47,340
one in the big blank before there has

507
00:22:47,340 --> 00:22:49,260
been some improvement in version two so

508
00:22:49,260 --> 00:22:50,340
I mentioned there there was this

509
00:22:50,340 --> 00:22:54,690
limitation with just with just link or

510
00:22:54,690 --> 00:22:57,810
just file so it it's not used anymore

511
00:22:57,810 --> 00:23:00,510
in this case they created the slag

512
00:23:00,510 --> 00:23:03,950
workspace and each victim had separated

513
00:23:03,950 --> 00:23:07,140
channel on the slack and if thread actor

514
00:23:07,140 --> 00:23:11,250
wanted to issue the new command so they

515
00:23:11,250 --> 00:23:13,950
created a message which days which they

516
00:23:13,950 --> 00:23:16,530
pinned to this channel and the the

517
00:23:16,530 --> 00:23:18,660
victim machine just reads the pinned

518
00:23:18,660 --> 00:23:22,250
message from a given channel reads it

519
00:23:22,250 --> 00:23:26,490
executes it runs it and the result is

520
00:23:26,490 --> 00:23:29,850
uploaded to this respective channel so

521
00:23:29,850 --> 00:23:32,960
again these schematics the slack channel

522
00:23:32,960 --> 00:23:37,230
file IO plus there is like one one new

523
00:23:37,230 --> 00:23:39,780
thing because I mentioned that they need

524
00:23:39,780 --> 00:23:42,360
it or they use this slack channel and

525
00:23:42,360 --> 00:23:44,040
there are some tokens so what will

526
00:23:44,040 --> 00:23:46,500
happen or we could we as the researchers

527
00:23:46,500 --> 00:23:49,010
can contact slack and they can disable

528
00:23:49,010 --> 00:23:52,860
these tokens so for threat actors to

529
00:23:52,860 --> 00:23:55,050
prevent this thing they put there this

530
00:23:55,050 --> 00:23:57,390
kind of backup mechanism that there is

531
00:23:57,390 --> 00:23:59,430
like one side which is like

532
00:23:59,430 --> 00:24:02,670
microblogging service and they just

533
00:24:02,670 --> 00:24:05,220
regularly check this content of this

534
00:24:05,220 --> 00:24:08,700
website and if the content of this

535
00:24:08,700 --> 00:24:11,180
website matches some specific pattern

536
00:24:11,180 --> 00:24:15,330
they use this for uploading or uploading

537
00:24:15,330 --> 00:24:19,590
new slack tokens so this was how like

538
00:24:19,590 --> 00:24:22,140
the website looked like most of the time

539
00:24:22,140 --> 00:24:25,590
so it was like empty website with some

540
00:24:25,590 --> 00:24:27,659
default text

541
00:24:27,659 --> 00:24:30,629
but in them at the time when they're

542
00:24:30,629 --> 00:24:33,429
originals like tokens were disabled they

543
00:24:33,429 --> 00:24:35,259
just created this kind of update so

544
00:24:35,259 --> 00:24:36,639
there have been again like some

545
00:24:36,639 --> 00:24:39,879
hard-coded strings like you can see here

546
00:24:39,879 --> 00:24:42,100
like hello world three exclamation marks

547
00:24:42,100 --> 00:24:43,899
and between them there are like new

548
00:24:43,899 --> 00:24:48,429
slack tokens so if they need to do

549
00:24:48,429 --> 00:24:51,129
update they can do it like very easily

550
00:24:51,129 --> 00:24:53,379
so this is like combination of three

551
00:24:53,379 --> 00:24:56,529
different it's cloud services so what's

552
00:24:56,529 --> 00:24:59,259
interesting for us as researchers we

553
00:24:59,259 --> 00:25:01,389
think about this traductor

554
00:25:01,389 --> 00:25:06,070
so for gist it's very good to look at

555
00:25:06,070 --> 00:25:08,889
the revisions and we can see some like

556
00:25:08,889 --> 00:25:10,929
example like this one you can see like

557
00:25:10,929 --> 00:25:13,259
what changes have been made what

558
00:25:13,259 --> 00:25:15,369
commands have been activated and

559
00:25:15,369 --> 00:25:17,499
deactivated we can see some history so

560
00:25:17,499 --> 00:25:19,480
in this screenshot below you can see

561
00:25:19,480 --> 00:25:21,369
that there is some software called

562
00:25:21,369 --> 00:25:23,830
plus board something and there like some

563
00:25:23,830 --> 00:25:27,850
dot M DB database files which the threat

564
00:25:27,850 --> 00:25:30,970
actor was interested in and they issued

565
00:25:30,970 --> 00:25:35,470
the command to upload these files for

566
00:25:35,470 --> 00:25:38,799
the slack if we have select oaken's it's

567
00:25:38,799 --> 00:25:40,899
like very easy in titan to write few

568
00:25:40,899 --> 00:25:43,779
lines of code for enumerate all the

569
00:25:43,779 --> 00:25:48,009
users all the all the channels history

570
00:25:48,009 --> 00:25:50,769
of the channel so we can do like these

571
00:25:50,769 --> 00:25:53,049
commands it's usually like one line

572
00:25:53,049 --> 00:25:57,600
command most cases we can get result in

573
00:25:57,600 --> 00:26:00,730
JSON format it's like text format very

574
00:26:00,730 --> 00:26:03,129
easily readable so here you can see the

575
00:26:03,129 --> 00:26:06,100
highlighted text commands which tells

576
00:26:06,100 --> 00:26:08,559
you that the what command was executed

577
00:26:08,559 --> 00:26:13,090
in this case in case of some in case of

578
00:26:13,090 --> 00:26:16,210
screenshots we can get permanent link to

579
00:26:16,210 --> 00:26:18,190
the screenshot to the files with

580
00:26:18,190 --> 00:26:20,580
screenshots which we can easily download

581
00:26:20,580 --> 00:26:23,200
and we could for example see like this

582
00:26:23,200 --> 00:26:25,749
kind of example that there someone was

583
00:26:25,749 --> 00:26:28,029
some victim was running their machine

584
00:26:28,029 --> 00:26:30,190
there is like this plus board software

585
00:26:30,190 --> 00:26:32,559
running in the background some text in

586
00:26:32,559 --> 00:26:36,429
Korean so yeah it works it works well

587
00:26:36,429 --> 00:26:38,350
for the threat actor and also for us

588
00:26:38,350 --> 00:26:40,390
because we could

589
00:26:40,390 --> 00:26:43,059
we could monitor them and see what was

590
00:26:43,059 --> 00:26:46,179
going on so now I'm now I'm coming for

591
00:26:46,179 --> 00:26:50,049
the conclusion so this this is this this

592
00:26:50,049 --> 00:26:53,710
kind of abusing these cloud services or

593
00:26:53,710 --> 00:26:55,990
cloud service providers kind of it's not

594
00:26:55,990 --> 00:26:57,970
limited like to some particular location

595
00:26:57,970 --> 00:27:01,120
it's kind of worldwide trend we can see

596
00:27:01,120 --> 00:27:03,279
like more threat actors using these

597
00:27:03,279 --> 00:27:06,220
methods so for these threat actors it

598
00:27:06,220 --> 00:27:08,679
has like many benefits and the same is

599
00:27:08,679 --> 00:27:10,390
also for us as the researchers because

600
00:27:10,390 --> 00:27:12,070
we don't need to hack back like in most

601
00:27:12,070 --> 00:27:14,850
cases we just extract these tokens and

602
00:27:14,850 --> 00:27:18,220
try to download everything and in these

603
00:27:18,220 --> 00:27:19,779
cases we have been quite successful and

604
00:27:19,779 --> 00:27:24,570
it's quite this is quite fun to do this

605
00:27:24,570 --> 00:27:27,700
so that's all what we want to decide is

606
00:27:27,700 --> 00:27:30,039
it the list of some references and if

607
00:27:30,039 --> 00:27:34,160
you have any questions we will answer

608
00:27:34,160 --> 00:27:39,849
[Applause]

