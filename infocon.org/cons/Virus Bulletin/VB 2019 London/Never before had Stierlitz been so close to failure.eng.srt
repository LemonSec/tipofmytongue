1
00:00:00,030 --> 00:00:04,669
say okay the room is yours thank you

2
00:00:11,240 --> 00:00:16,260
hello everyone my name is Sergei

3
00:00:16,260 --> 00:00:17,880
Shevchenko I work for Sophists I'm

4
00:00:17,880 --> 00:00:20,880
afraid research manager and our team

5
00:00:20,880 --> 00:00:24,359
specializes in analysis of Linux Mac OS

6
00:00:24,359 --> 00:00:27,330
and Android threats and today I would

7
00:00:27,330 --> 00:00:29,220
like to talk about an interesting sample

8
00:00:29,220 --> 00:00:35,760
that affects Mac OS platform you will

9
00:00:35,760 --> 00:00:37,170
see the techniques employed by this

10
00:00:37,170 --> 00:00:41,309
sample it belongs to poor so called

11
00:00:41,309 --> 00:00:43,410
potential and wallet application so it's

12
00:00:43,410 --> 00:00:49,770
not malware before I proceed and

13
00:00:49,770 --> 00:00:52,020
describe the internals and some

14
00:00:52,020 --> 00:00:53,910
techniques employed by this family I

15
00:00:53,910 --> 00:00:56,160
have to make a little disclaimer that I

16
00:00:56,160 --> 00:00:58,320
can't name the company behind it because

17
00:00:58,320 --> 00:01:00,719
it's a company with lawyers and they're

18
00:01:00,719 --> 00:01:03,090
not happy when we present something like

19
00:01:03,090 --> 00:01:05,580
that so the name of this particular

20
00:01:05,580 --> 00:01:07,500
family will not be named but you will

21
00:01:07,500 --> 00:01:10,500
see the techniques and we definitely

22
00:01:10,500 --> 00:01:16,409
detected so let's proceed and before we

23
00:01:16,409 --> 00:01:17,939
get to the technical details just a

24
00:01:17,939 --> 00:01:19,680
little bit of overview of what we're

25
00:01:19,680 --> 00:01:25,250
dealing with on Mac OS platform so

26
00:01:25,250 --> 00:01:27,960
generally speaking malware is not if you

27
00:01:27,960 --> 00:01:29,670
look at the sheer volume of the samples

28
00:01:29,670 --> 00:01:33,329
that malware represents around sixty

29
00:01:33,329 --> 00:01:36,600
percent of all the infections with the

30
00:01:36,600 --> 00:01:39,479
bulk of the samples coming from pores if

31
00:01:39,479 --> 00:01:42,090
you look at the because we get the

32
00:01:42,090 --> 00:01:43,740
telemetry you understand the threat

33
00:01:43,740 --> 00:01:46,079
exposure rate so that is how many

34
00:01:46,079 --> 00:01:48,720
customers have been attempted to be

35
00:01:48,720 --> 00:01:50,340
infected where product has blocked the

36
00:01:50,340 --> 00:01:53,220
infection and if you look at the number

37
00:01:53,220 --> 00:01:56,729
of pores then you'll see that around 16

38
00:01:56,729 --> 00:01:58,320
percent of the customers were prevented

39
00:01:58,320 --> 00:02:00,540
from being affected while 1 percent

40
00:02:00,540 --> 00:02:04,530
response to malware prevention I want to

41
00:02:04,530 --> 00:02:06,930
touch the top malware families it's not

42
00:02:06,930 --> 00:02:08,459
that interesting that are not too many

43
00:02:08,459 --> 00:02:10,139
of them but if you look at the top poor

44
00:02:10,139 --> 00:02:11,600
families then

45
00:02:11,600 --> 00:02:14,840
it's a crowded space it's there is a bit

46
00:02:14,840 --> 00:02:18,650
of competition the bulk of the reports

47
00:02:18,650 --> 00:02:20,990
come from Mack keeper followed by Jeanne

48
00:02:20,990 --> 00:02:23,540
o advance McLean er install Corbin law

49
00:02:23,540 --> 00:02:28,730
and other other families so let's

50
00:02:28,730 --> 00:02:31,370
proceed and a little bit of background

51
00:02:31,370 --> 00:02:35,540
how does this family distribute it how

52
00:02:35,540 --> 00:02:38,120
does the system work and have to realize

53
00:02:38,120 --> 00:02:39,080
that there are many legitimate

54
00:02:39,080 --> 00:02:41,990
developers out there that built good

55
00:02:41,990 --> 00:02:45,020
software right and the software that

56
00:02:45,020 --> 00:02:48,320
build a it's often come in contaminated

57
00:02:48,320 --> 00:02:50,810
with GPL so they have to release the

58
00:02:50,810 --> 00:02:53,780
source code and once it's released they

59
00:02:53,780 --> 00:02:54,770
can't sell it

60
00:02:54,770 --> 00:02:57,470
because if they start selling it anyone

61
00:02:57,470 --> 00:02:59,630
can pull the source code from github and

62
00:02:59,630 --> 00:03:01,720
compile it and use it for free

63
00:03:01,720 --> 00:03:04,210
nevertheless the software is used is

64
00:03:04,210 --> 00:03:07,160
useful and I myself used some of that

65
00:03:07,160 --> 00:03:09,530
software so and I'm pretty sure you use

66
00:03:09,530 --> 00:03:12,220
it as well I won't name it again because

67
00:03:12,220 --> 00:03:14,690
the you have to understand that the

68
00:03:14,690 --> 00:03:16,070
developers of that software they're

69
00:03:16,070 --> 00:03:17,989
looking for the waste to get to seek for

70
00:03:17,989 --> 00:03:19,730
reward to be rewarded for what they

71
00:03:19,730 --> 00:03:22,970
built so to get some kind of

72
00:03:22,970 --> 00:03:24,950
compensation monetary compensation they

73
00:03:24,950 --> 00:03:26,860
approach this company and this company

74
00:03:26,860 --> 00:03:29,930
bundles their software produces the

75
00:03:29,930 --> 00:03:31,670
installer gives it back to them they put

76
00:03:31,670 --> 00:03:33,590
the install on the website customers go

77
00:03:33,590 --> 00:03:36,230
fetch it run it and this is what they

78
00:03:36,230 --> 00:03:38,540
get that's this just normal installation

79
00:03:38,540 --> 00:03:41,750
process the dmg file gets mounted and

80
00:03:41,750 --> 00:03:44,030
they run the installer the only

81
00:03:44,030 --> 00:03:45,500
difference is at the end of the

82
00:03:45,500 --> 00:03:47,600
installation the customers will end up

83
00:03:47,600 --> 00:03:49,880
with having the original software

84
00:03:49,880 --> 00:03:51,800
installed at the same time they'll end

85
00:03:51,800 --> 00:03:55,060
up with some side effects on the system

86
00:03:55,060 --> 00:03:58,520
that they were not willing to have or

87
00:03:58,520 --> 00:04:00,650
not happy with the forums are flooded

88
00:04:00,650 --> 00:04:02,150
with the posts when people complain

89
00:04:02,150 --> 00:04:05,810
about some dodgy browser extensions of

90
00:04:05,810 --> 00:04:07,970
plugins being installed that replace

91
00:04:07,970 --> 00:04:10,610
search results and they ask you for help

92
00:04:10,610 --> 00:04:14,950
to understand how to get rid of them so

93
00:04:14,950 --> 00:04:17,180
ok let's see what that's that's the

94
00:04:17,180 --> 00:04:18,829
mechanics about how that's how it works

95
00:04:18,829 --> 00:04:21,560
that's a that's how money works in this

96
00:04:21,560 --> 00:04:24,860
scheme of things by the way the company

97
00:04:24,860 --> 00:04:26,360
this installer claims they have millions

98
00:04:26,360 --> 00:04:28,969
of installations I don't know if that's

99
00:04:28,969 --> 00:04:30,409
true or not but this is what they claim

100
00:04:30,409 --> 00:04:31,960
on their website

101
00:04:31,960 --> 00:04:34,099
okay let's proceed and have a look at

102
00:04:34,099 --> 00:04:36,710
the technical some technical details of

103
00:04:36,710 --> 00:04:41,060
this software so it all starts with the

104
00:04:41,060 --> 00:04:43,729
DNG file get smarter we have a look at

105
00:04:43,729 --> 00:04:45,650
the structure of the dmg file and you'll

106
00:04:45,650 --> 00:04:48,740
notice there's there's a main executable

107
00:04:48,740 --> 00:04:50,780
file how do you know it's man executable

108
00:04:50,780 --> 00:04:53,210
you look at the P list and impe list you

109
00:04:53,210 --> 00:04:55,280
have a key called CF bundle executable

110
00:04:55,280 --> 00:04:58,430
which which specifies the name of the

111
00:04:58,430 --> 00:05:01,129
main binary main executable and that

112
00:05:01,129 --> 00:05:03,889
that's the name this family is

113
00:05:03,889 --> 00:05:07,669
interesting because it's using its using

114
00:05:07,669 --> 00:05:10,639
English words but the words themselves

115
00:05:10,639 --> 00:05:11,870
are weird

116
00:05:11,870 --> 00:05:14,449
they sound like English words I but I

117
00:05:14,449 --> 00:05:16,819
never heard of the words like select

118
00:05:16,819 --> 00:05:25,370
atutor spino basilic or cocom secreto so

119
00:05:25,370 --> 00:05:27,710
this is a good sign if you if you see

120
00:05:27,710 --> 00:05:29,569
that kind of a main executable it's a

121
00:05:29,569 --> 00:05:30,560
good sign you're dealing with this

122
00:05:30,560 --> 00:05:33,080
particular family the main executable

123
00:05:33,080 --> 00:05:34,940
itself is science so when you run

124
00:05:34,940 --> 00:05:36,800
code-signing Atilla 2 you see there's

125
00:05:36,800 --> 00:05:41,050
always a valid digital signature we see

126
00:05:41,050 --> 00:05:44,029
maybe a few maybe a dozen unique samples

127
00:05:44,029 --> 00:05:46,310
that they popping up on virustotal

128
00:05:46,310 --> 00:05:49,099
and each time it's it's a random file

129
00:05:49,099 --> 00:05:51,949
name and each time it's signed so if

130
00:05:51,949 --> 00:05:54,250
it's signed it means it bypasses a

131
00:05:54,250 --> 00:05:56,870
gatekeeper gets installed on the custom

132
00:05:56,870 --> 00:05:58,639
system with no questions asked from the

133
00:05:58,639 --> 00:06:03,379
operating system from mac OS how do we

134
00:06:03,379 --> 00:06:05,240
analyze it we have a look first we do we

135
00:06:05,240 --> 00:06:07,039
look at the entropy of the file so the

136
00:06:07,039 --> 00:06:09,229
flat entropy of this file this you can

137
00:06:09,229 --> 00:06:11,330
see what bulk of the file has relatively

138
00:06:11,330 --> 00:06:13,039
flat entropy what does it tell you it

139
00:06:13,039 --> 00:06:15,409
tells you that most of the file probably

140
00:06:15,409 --> 00:06:17,900
95 percent is either packed or fiscale

141
00:06:17,900 --> 00:06:21,529
it's not a valid code the entropy that's

142
00:06:21,529 --> 00:06:23,449
jumping up and down at the start of the

143
00:06:23,449 --> 00:06:26,000
file that's the actual code and the

144
00:06:26,000 --> 00:06:27,979
where it's also noise at the end of the

145
00:06:27,979 --> 00:06:29,389
file that's where the digital signature

146
00:06:29,389 --> 00:06:32,449
is because it's it's in clear text so

147
00:06:32,449 --> 00:06:34,339
that already gives you an idea that the

148
00:06:34,339 --> 00:06:37,970
file itself is most of it is packed

149
00:06:37,970 --> 00:06:41,030
okay what do we do next

150
00:06:41,030 --> 00:06:43,970
we load it into Ida right gold is that

151
00:06:43,970 --> 00:06:45,860
of these assemblers and you load it up

152
00:06:45,860 --> 00:06:49,820
it shows up as a micro binary and that

153
00:06:49,820 --> 00:06:51,580
binary relies on objective-c runtime

154
00:06:51,580 --> 00:06:55,520
leap op C toilet and if you look at this

155
00:06:55,520 --> 00:06:57,410
disassembled code you immediately see

156
00:06:57,410 --> 00:06:59,720
that at the entry point of that

157
00:06:59,720 --> 00:07:02,390
executable there are some some bytes

158
00:07:02,390 --> 00:07:04,730
which do not translate to valid code so

159
00:07:04,730 --> 00:07:07,310
there is no code to execute at the entry

160
00:07:07,310 --> 00:07:12,260
point so how how does it run how does it

161
00:07:12,260 --> 00:07:13,850
execute if it doesn't have the code is

162
00:07:13,850 --> 00:07:15,620
it actually a valid executable will it

163
00:07:15,620 --> 00:07:17,630
will it crash whatever on and the answer

164
00:07:17,630 --> 00:07:22,700
is is in the concept of lazy and non

165
00:07:22,700 --> 00:07:24,530
lazy classes that's a concept that

166
00:07:24,530 --> 00:07:28,220
exists on Mac OS platform and Apple

167
00:07:28,220 --> 00:07:32,330
calls that lazy classes are the classes

168
00:07:32,330 --> 00:07:34,580
that are not realized immediately they

169
00:07:34,580 --> 00:07:36,500
are realized on demand the moment they

170
00:07:36,500 --> 00:07:39,050
get that message or the method from from

171
00:07:39,050 --> 00:07:41,750
that class as opposed to that there are

172
00:07:41,750 --> 00:07:44,510
no lazy classes the eager classes those

173
00:07:44,510 --> 00:07:46,760
are the classes that are get realized

174
00:07:46,760 --> 00:07:50,050
immediately when the program starts and

175
00:07:50,050 --> 00:07:54,470
what's also interesting is that this

176
00:07:54,470 --> 00:07:56,210
classes the normalizer classes will

177
00:07:56,210 --> 00:07:58,160
always implement a method called class

178
00:07:58,160 --> 00:08:00,160
load that's the method that gets called

179
00:08:00,160 --> 00:08:04,100
now let's have a look at the actual

180
00:08:04,100 --> 00:08:06,230
source code of the objective-c runtime

181
00:08:06,230 --> 00:08:09,560
I when I did the slides I saw this

182
00:08:09,560 --> 00:08:11,090
source code published by Apple but then

183
00:08:11,090 --> 00:08:13,400
I pulled it and it was now unavailable I

184
00:08:13,400 --> 00:08:15,080
don't know why but I could still find it

185
00:08:15,080 --> 00:08:18,110
in web archive but not

186
00:08:18,110 --> 00:08:20,240
nonetheless that's the option C runtime

187
00:08:20,240 --> 00:08:22,190
new daughter ma'am that's actual source

188
00:08:22,190 --> 00:08:24,890
code of the objective-c runtime and if

189
00:08:24,890 --> 00:08:25,850
you look at the source code to

190
00:08:25,850 --> 00:08:27,740
understand what it does when it loads

191
00:08:27,740 --> 00:08:30,169
the micro binary you will see that it

192
00:08:30,169 --> 00:08:32,539
calls this function called get op C to

193
00:08:32,539 --> 00:08:35,179
non lazy classlist that function will

194
00:08:35,179 --> 00:08:38,030
return the list of classes non lazy

195
00:08:38,030 --> 00:08:40,610
classes into the into this list class

196
00:08:40,610 --> 00:08:43,460
list and then for each member for each

197
00:08:43,460 --> 00:08:46,490
list in that for each class in that list

198
00:08:46,490 --> 00:08:48,620
it will call a function called realized

199
00:08:48,620 --> 00:08:51,660
class if you look at the actual function

200
00:08:51,660 --> 00:08:53,880
where that function is specified in the

201
00:08:53,880 --> 00:08:57,030
micro gets sucked and right here you can

202
00:08:57,030 --> 00:09:00,150
seed underscore this co-op see an LCLs

203
00:09:00,150 --> 00:09:02,940
list that stands for non lazy classless

204
00:09:02,940 --> 00:09:06,030
that's the name of this section inside

205
00:09:06,030 --> 00:09:09,000
the binary from where the Lord obtains

206
00:09:09,000 --> 00:09:11,190
information descriptors of the non lazy

207
00:09:11,190 --> 00:09:14,340
classes and then it calls the plus load

208
00:09:14,340 --> 00:09:16,620
method of those not lazy classes before

209
00:09:16,620 --> 00:09:21,750
it calls the entry point so what we do

210
00:09:21,750 --> 00:09:25,110
we go back to Ida and we say jump to

211
00:09:25,110 --> 00:09:27,630
segments and we specify the name of the

212
00:09:27,630 --> 00:09:29,010
segment we'll be enlisted right here

213
00:09:29,010 --> 00:09:32,370
obviously an LC LS list and Ida will

214
00:09:32,370 --> 00:09:35,610
jump into that declaration and right in

215
00:09:35,610 --> 00:09:36,950
that place you will see two classes

216
00:09:36,950 --> 00:09:41,160
again random names like listed you pay

217
00:09:41,160 --> 00:09:43,620
three that's the non lazy class which

218
00:09:43,620 --> 00:09:46,440
will have plus load method so the loader

219
00:09:46,440 --> 00:09:50,640
will call that method first before it

220
00:09:50,640 --> 00:09:52,920
calls the entry point if you proceed to

221
00:09:52,920 --> 00:09:56,940
that plus load method implementation you

222
00:09:56,940 --> 00:10:00,000
will see that in that method there is an

223
00:10:00,000 --> 00:10:03,150
actual code actual valid code that can

224
00:10:03,150 --> 00:10:06,180
run that can execute and right here you

225
00:10:06,180 --> 00:10:08,550
can see this interesting construction

226
00:10:08,550 --> 00:10:12,120
that basically assembles the string and

227
00:10:12,120 --> 00:10:15,290
the string is VM underscore protect

228
00:10:15,290 --> 00:10:17,850
terminating zero so it compiles that

229
00:10:17,850 --> 00:10:19,530
string character by character in the

230
00:10:19,530 --> 00:10:23,670
random order and if you run even if you

231
00:10:23,670 --> 00:10:26,130
use a free freeware version of either

232
00:10:26,130 --> 00:10:28,170
with a built-in debugger you can debug

233
00:10:28,170 --> 00:10:29,430
it you can trace that code and to

234
00:10:29,430 --> 00:10:30,710
understand what it's doing because

235
00:10:30,710 --> 00:10:33,180
visually you can recognize visually what

236
00:10:33,180 --> 00:10:36,000
it's doing but if you trace it it's just

237
00:10:36,000 --> 00:10:39,540
easier and I'll gonna trace it now so

238
00:10:39,540 --> 00:10:45,980
you see it puts C underscore o0r M

239
00:10:45,980 --> 00:10:49,770
followed by T followed by V so character

240
00:10:49,770 --> 00:10:51,500
by character it constructs the string

241
00:10:51,500 --> 00:10:55,800
once it can once it is constructed it

242
00:10:55,800 --> 00:10:59,430
will call dlc dlc ms the equivalent of

243
00:10:59,430 --> 00:11:01,860
the windows get proc address to retrieve

244
00:11:01,860 --> 00:11:03,300
the

245
00:11:03,300 --> 00:11:05,440
pointing to the function implemented in

246
00:11:05,440 --> 00:11:07,060
the library and then it will call that

247
00:11:07,060 --> 00:11:09,279
function by the pointer so it doesn't

248
00:11:09,279 --> 00:11:11,440
want to expose the name of the actual

249
00:11:11,440 --> 00:11:13,649
function it's gonna call its hiding that

250
00:11:13,649 --> 00:11:17,680
by using this little trick which is

251
00:11:17,680 --> 00:11:19,300
pretty common for Windows malware right

252
00:11:19,300 --> 00:11:22,420
but not it's really rare for to

253
00:11:22,420 --> 00:11:23,829
encounter something like that on a

254
00:11:23,829 --> 00:11:27,370
Windows but on a Mac platform in some

255
00:11:27,370 --> 00:11:29,410
way it reminds some like you know like a

256
00:11:29,410 --> 00:11:31,000
ransom note because they wanted to

257
00:11:31,000 --> 00:11:34,810
conceal it okay so how does it run the

258
00:11:34,810 --> 00:11:37,360
impro tag first the unprotect function

259
00:11:37,360 --> 00:11:40,930
is used to assign certain protection

260
00:11:40,930 --> 00:11:42,850
flags to a memory to a chunk of memory

261
00:11:42,850 --> 00:11:46,089
and it takes 5 parameters and you can

262
00:11:46,089 --> 00:11:49,209
see right here so it uses old tasks and

263
00:11:49,209 --> 00:11:52,750
then it what it does so imagine this is

264
00:11:52,750 --> 00:11:55,540
the code section right in that code

265
00:11:55,540 --> 00:11:58,839
section there is some variable that

266
00:11:58,839 --> 00:12:01,209
called it's called here and code which

267
00:12:01,209 --> 00:12:03,370
we call it anything you want to go you

268
00:12:03,370 --> 00:12:07,690
can call it marker the anko itself has

269
00:12:07,690 --> 00:12:10,329
an offset within that code section so

270
00:12:10,329 --> 00:12:12,490
it's doing what it's doing sex taking it

271
00:12:12,490 --> 00:12:14,470
takes the address of that end core

272
00:12:14,470 --> 00:12:17,050
inside the code section then it

273
00:12:17,050 --> 00:12:19,329
subtracts the offset of that encode

274
00:12:19,329 --> 00:12:22,630
inside the section that way it gets to

275
00:12:22,630 --> 00:12:24,490
the start of the section follow with

276
00:12:24,490 --> 00:12:26,640
that it takes all

277
00:12:26,640 --> 00:12:29,470
14300 22 bytes which is the size of the

278
00:12:29,470 --> 00:12:32,589
code section and then it assigns vm prot

279
00:12:32,589 --> 00:12:35,980
all flag which is a combination of read

280
00:12:35,980 --> 00:12:37,930
write and execute so initially this

281
00:12:37,930 --> 00:12:39,490
section has the flags read and execute

282
00:12:39,490 --> 00:12:41,230
that's all the lorda needs

283
00:12:41,230 --> 00:12:43,930
read and execute but it wants to modify

284
00:12:43,930 --> 00:12:47,860
so it assigns one additional flag write

285
00:12:47,860 --> 00:12:52,720
flag by setting up the end proto the

286
00:12:52,720 --> 00:12:54,790
analogy is imagine a street with 12

287
00:12:54,790 --> 00:12:56,560
houses so it takes the house number

288
00:12:56,560 --> 00:12:58,449
three subtracts two and takes the whole

289
00:12:58,449 --> 00:13:00,459
length of the street which is twelve

290
00:13:00,459 --> 00:13:02,740
houses it could have it could have just

291
00:13:02,740 --> 00:13:04,810
taken the whole section from stop but

292
00:13:04,810 --> 00:13:08,709
this is how it's doing it and after that

293
00:13:08,709 --> 00:13:12,490
it's decrypts the code section by using

294
00:13:12,490 --> 00:13:16,040
32 bytes or key again we're in

295
00:13:16,040 --> 00:13:17,990
each executable that key is randomized

296
00:13:17,990 --> 00:13:20,630
it's it's always different if you look

297
00:13:20,630 --> 00:13:23,110
at the anko itself it's represented some

298
00:13:23,110 --> 00:13:26,509
gibberish bytes which have no meaning at

299
00:13:26,509 --> 00:13:32,769
all okay so what we're gonna do next is

300
00:13:32,769 --> 00:13:37,790
let's use the debugger built into Ida

301
00:13:37,790 --> 00:13:43,160
and in this tracing what's happening it

302
00:13:43,160 --> 00:13:46,670
takes the code section it allocates a

303
00:13:46,670 --> 00:13:49,370
memory array chunk of memory equal in

304
00:13:49,370 --> 00:13:51,589
size to the code section it then

305
00:13:51,589 --> 00:13:53,420
decrypts the code section into that

306
00:13:53,420 --> 00:13:54,949
memory area and then it writes it back

307
00:13:54,949 --> 00:13:57,170
into the code section and after that it

308
00:13:57,170 --> 00:13:58,910
calls the entry points in that code

309
00:13:58,910 --> 00:14:01,100
section so right here I'm gonna trace

310
00:14:01,100 --> 00:14:03,440
that decryption loop but at the same

311
00:14:03,440 --> 00:14:06,230
time I'm showing you the memory area

312
00:14:06,230 --> 00:14:08,420
that corresponds to the anchor right now

313
00:14:08,420 --> 00:14:11,120
it's zeros writes to the newly located

314
00:14:11,120 --> 00:14:14,000
memory but if you actually run it if you

315
00:14:14,000 --> 00:14:18,920
trace that code it will execute but

316
00:14:18,920 --> 00:14:22,069
while it's executing keep an eye on this

317
00:14:22,069 --> 00:14:25,490
memory area what happens to it this is

318
00:14:25,490 --> 00:14:27,740
what the anko itself gets decrypted

319
00:14:27,740 --> 00:14:30,220
Intel

320
00:14:34,899 --> 00:14:37,489
so it gets decrypted into eaten a m--

321
00:14:37,489 --> 00:14:40,639
maxy maxy mature size does anyone know

322
00:14:40,639 --> 00:14:48,199
what what that mean means yeah I I was I

323
00:14:48,199 --> 00:14:49,639
was born and grew up in the Soviet Union

324
00:14:49,639 --> 00:14:52,040
so I know that name very well but before

325
00:14:52,040 --> 00:14:54,049
we get to that let's have a look again

326
00:14:54,049 --> 00:14:56,809
what's happening so this is the

327
00:14:56,809 --> 00:15:00,439
decrypted code section now it has valid

328
00:15:00,439 --> 00:15:01,639
code in it you remember the word

329
00:15:01,639 --> 00:15:03,019
gibberish bytes in it before it was

330
00:15:03,019 --> 00:15:04,790
decrypted now it has a valid code so now

331
00:15:04,790 --> 00:15:07,699
I can run this is the end code inside

332
00:15:07,699 --> 00:15:10,579
the encrypted section before it was

333
00:15:10,579 --> 00:15:12,949
decrypted and that is the answer after

334
00:15:12,949 --> 00:15:15,230
it was fully decrypted so back to the

335
00:15:15,230 --> 00:15:17,029
name maximal signature side is a real

336
00:15:17,029 --> 00:15:20,509
name of Max Horta from stierlitz that's

337
00:15:20,509 --> 00:15:23,859
think of him is as a Soviet or Russian

338
00:15:23,859 --> 00:15:27,350
James Bond extremely popular from the

339
00:15:27,350 --> 00:15:29,749
book persona from the book and the

340
00:15:29,749 --> 00:15:32,449
movies that was I grew up with this

341
00:15:32,449 --> 00:15:36,399
movie right so I immediately hit home

342
00:15:36,399 --> 00:15:39,019
why did they put that name into the code

343
00:15:39,019 --> 00:15:41,689
right don't know it could be could be

344
00:15:41,689 --> 00:15:43,759
just a marker or hidden easter egg I

345
00:15:43,759 --> 00:15:44,929
don't know but it wants to encourage

346
00:15:44,929 --> 00:15:46,730
these kinds of makes your day you know

347
00:15:46,730 --> 00:15:49,429
it interesting becomes interesting and

348
00:15:49,429 --> 00:15:51,489
intriguing what happens next

349
00:15:51,489 --> 00:15:54,769
I think I owe you the the to explain the

350
00:15:54,769 --> 00:15:56,269
title of this presentation what does it

351
00:15:56,269 --> 00:15:57,919
mean never-before-heard still it's been

352
00:15:57,919 --> 00:15:59,449
so close to failure that that's a common

353
00:15:59,449 --> 00:16:02,329
phrasing in Russian used to describe a

354
00:16:02,329 --> 00:16:04,639
situation when someone's cover is about

355
00:16:04,639 --> 00:16:08,360
to be blown and someone's not

356
00:16:08,360 --> 00:16:13,850
necessarily spies cover so what happens

357
00:16:13,850 --> 00:16:15,889
let's have a look at again in the whole

358
00:16:15,889 --> 00:16:21,379
picture and recap the process from the

359
00:16:21,379 --> 00:16:24,379
start so from the very start this is the

360
00:16:24,379 --> 00:16:26,360
encrypted code section called underscore

361
00:16:26,360 --> 00:16:28,489
disco text it has an entry point in it

362
00:16:28,489 --> 00:16:30,109
it's encrypted the code is that itself

363
00:16:30,109 --> 00:16:32,839
is encrypted but the execution the

364
00:16:32,839 --> 00:16:35,569
workflow itself starts from the dynamic

365
00:16:35,569 --> 00:16:41,119
linker doing locating the non lazy

366
00:16:41,119 --> 00:16:44,019
classes declared inside the executable

367
00:16:44,019 --> 00:16:46,369
finding them finding the plus load

368
00:16:46,369 --> 00:16:47,220
method

369
00:16:47,220 --> 00:16:50,399
that method after it's called the actual

370
00:16:50,399 --> 00:16:53,519
method will take that encrypted code

371
00:16:53,519 --> 00:16:56,879
section it will decrypt it and then only

372
00:16:56,879 --> 00:16:59,009
then it will pass controlling to the

373
00:16:59,009 --> 00:17:02,430
entry point in that code section what

374
00:17:02,430 --> 00:17:05,490
that code will do next it will take the

375
00:17:05,490 --> 00:17:08,309
compress blob it's a large chunk of data

376
00:17:08,309 --> 00:17:10,049
it will lift it from the file so you

377
00:17:10,049 --> 00:17:12,030
remember the entropy that's actually

378
00:17:12,030 --> 00:17:14,189
compress blob so it will lift it it's

379
00:17:14,189 --> 00:17:15,869
about 300 kilobytes in size that will

380
00:17:15,869 --> 00:17:18,119
decrypt it it will decompress it in

381
00:17:18,119 --> 00:17:21,659
memory so it will be something like 900

382
00:17:21,659 --> 00:17:26,819
kilobytes module or a chunk of data for

383
00:17:26,819 --> 00:17:28,650
starters chunk of data but then it's

384
00:17:28,650 --> 00:17:31,770
used it's using an interesting trick to

385
00:17:31,770 --> 00:17:37,500
inject that with with undocumented api's

386
00:17:37,500 --> 00:17:40,940
to inject that memory chunk into the

387
00:17:40,940 --> 00:17:44,120
address space of the process so it's a

388
00:17:44,120 --> 00:17:48,480
injection of that module will be similar

389
00:17:48,480 --> 00:17:51,390
to how Windows Lords dynamic loads DLL

390
00:17:51,390 --> 00:17:53,190
so it's doing the same thing only even

391
00:17:53,190 --> 00:17:54,270
under committed

392
00:17:54,270 --> 00:17:57,570
trickery once loaded that method

393
00:17:57,570 --> 00:17:59,809
represents itself a very powerful engine

394
00:17:59,809 --> 00:18:03,890
engine driven with the tasks and the

395
00:18:03,890 --> 00:18:06,870
tasks themselves that that specify what

396
00:18:06,870 --> 00:18:09,630
exactly the engine has to do are fetched

397
00:18:09,630 --> 00:18:12,990
some of them are locally stored but some

398
00:18:12,990 --> 00:18:14,100
of them are fetched from the remote

399
00:18:14,100 --> 00:18:18,990
server so whatever the the the admins of

400
00:18:18,990 --> 00:18:20,610
the software decides to put on the

401
00:18:20,610 --> 00:18:25,559
server that thing will hatch those tasks

402
00:18:25,559 --> 00:18:27,270
and those tasks will be executed by the

403
00:18:27,270 --> 00:18:32,850
by the engine ok so now we analyze the

404
00:18:32,850 --> 00:18:35,850
engine the its capabilities and the one

405
00:18:35,850 --> 00:18:37,860
thing is it's capable to detect the

406
00:18:37,860 --> 00:18:40,730
presence of the virtual machine so again

407
00:18:40,730 --> 00:18:43,260
does it ring any bells or what they mean

408
00:18:43,260 --> 00:18:44,700
to what the Mel and Windows is doing

409
00:18:44,700 --> 00:18:46,980
right so internally they call that

410
00:18:46,980 --> 00:18:49,380
function check possible fraud and the

411
00:18:49,380 --> 00:18:52,169
one possible explanation is that if we

412
00:18:52,169 --> 00:18:55,940
imagine this installer been submitted by

413
00:18:55,940 --> 00:18:58,649
some people to different send boxes and

414
00:18:58,649 --> 00:19:00,490
each time it runs the

415
00:19:00,490 --> 00:19:02,380
mean that the company has to pay the

416
00:19:02,380 --> 00:19:03,970
money each time pay the money to the

417
00:19:03,970 --> 00:19:06,580
developer does it mean that it's

418
00:19:06,580 --> 00:19:08,860
possible to gain the system they don't

419
00:19:08,860 --> 00:19:11,530
want to that the situation to happen so

420
00:19:11,530 --> 00:19:13,390
they think they consider it to be a

421
00:19:13,390 --> 00:19:16,360
fraud and they they detect the presence

422
00:19:16,360 --> 00:19:17,950
of the virtual machine the detection

423
00:19:17,950 --> 00:19:21,540
itself is based on a number of tricks

424
00:19:21,540 --> 00:19:24,520
first of it is they check the MAC

425
00:19:24,520 --> 00:19:31,030
address the the common VM manufacturers

426
00:19:31,030 --> 00:19:33,490
they have hard-coded MAC addresses like

427
00:19:33,490 --> 00:19:36,070
for instance zero zero one see 42 stands

428
00:19:36,070 --> 00:19:38,350
for parallel VM that's a common Mac Mac

429
00:19:38,350 --> 00:19:41,410
address for the parallels via internally

430
00:19:41,410 --> 00:19:44,560
they're able to recognize 30 by 30 five

431
00:19:44,560 --> 00:19:46,810
virtual machines over 35 and that's just

432
00:19:46,810 --> 00:19:48,430
the list by the way what I didn't

433
00:19:48,430 --> 00:19:51,430
mention here is that all these strings

434
00:19:51,430 --> 00:19:54,250
and AP is in that engine are encrypted

435
00:19:54,250 --> 00:19:56,800
and there are more than 1,000 encrypted

436
00:19:56,800 --> 00:19:59,830
strings which are decrypted by more than

437
00:19:59,830 --> 00:20:02,650
1,000 unique functions and all of them

438
00:20:02,650 --> 00:20:04,210
are randomized so if you take another

439
00:20:04,210 --> 00:20:06,190
sample it's totally different strings

440
00:20:06,190 --> 00:20:08,020
total different functions it's all

441
00:20:08,020 --> 00:20:10,390
randomized so we had to build the this

442
00:20:10,390 --> 00:20:13,210
scripting to automatically decrypt all

443
00:20:13,210 --> 00:20:15,190
the strings and patch the binary

444
00:20:15,190 --> 00:20:17,020
disassembled again to understand what

445
00:20:17,020 --> 00:20:20,530
exactly the engine is doing the other

446
00:20:20,530 --> 00:20:22,870
trickery it to detect the presence of

447
00:20:22,870 --> 00:20:25,870
the virtual machine is things like get

448
00:20:25,870 --> 00:20:29,310
host your ID D a discrete from BSD name

449
00:20:29,310 --> 00:20:33,910
they query the USB vendor name so the

450
00:20:33,910 --> 00:20:36,640
drivers are often have the telltale

451
00:20:36,640 --> 00:20:40,390
signs in their names that specify of the

452
00:20:40,390 --> 00:20:42,010
virtual machine manufacturer I display

453
00:20:42,010 --> 00:20:44,590
ratio they look at it Mouse position

454
00:20:44,590 --> 00:20:46,270
since the last mouse movement and they

455
00:20:46,270 --> 00:20:47,950
look at the mouse is moving so if it's

456
00:20:47,950 --> 00:20:49,900
in a store and it's getting the clicks

457
00:20:49,900 --> 00:20:52,510
and proceed people normally you work and

458
00:20:52,510 --> 00:20:54,190
max by moving the mouse and clicking so

459
00:20:54,190 --> 00:20:55,720
it's if there is no mouse so if the

460
00:20:55,720 --> 00:20:57,040
mouse is not moving it's a telltale sign

461
00:20:57,040 --> 00:20:59,050
it's a virtual machine system uptime

462
00:20:59,050 --> 00:21:03,060
since the last reboot so if you run this

463
00:21:03,060 --> 00:21:05,650
family or this sample in a virtual

464
00:21:05,650 --> 00:21:08,110
machine in sandbox after running it the

465
00:21:08,110 --> 00:21:09,550
sandbox has to restore the clean

466
00:21:09,550 --> 00:21:11,770
snapshot from the image once restored

467
00:21:11,770 --> 00:21:14,350
the system uptime will also be reset

468
00:21:14,350 --> 00:21:17,380
previous value so it's a it's a it's a

469
00:21:17,380 --> 00:21:18,039
fingerprint

470
00:21:18,039 --> 00:21:19,750
it's a VM fingerprint by checking that

471
00:21:19,750 --> 00:21:22,000
they are aware that it's actually not

472
00:21:22,000 --> 00:21:23,679
it's not a real system it's a it's a

473
00:21:23,679 --> 00:21:26,679
sandbox full path file name of the agent

474
00:21:26,679 --> 00:21:29,260
files because the sandbox can call it

475
00:21:29,260 --> 00:21:31,179
something that they can give it some

476
00:21:31,179 --> 00:21:37,210
generic name and okay so that's

477
00:21:37,210 --> 00:21:39,160
fingerprint it's understood now if you

478
00:21:39,160 --> 00:21:41,140
look at the total scope of the engine

479
00:21:41,140 --> 00:21:46,030
capabilities it's a fully functional

480
00:21:46,030 --> 00:21:50,140
backdoor it it has a dedicated browser

481
00:21:50,140 --> 00:21:51,820
manager that can set new home pages

482
00:21:51,820 --> 00:21:53,440
10-minute browser process screenshot

483
00:21:53,440 --> 00:21:55,179
controller that takes full screenshot

484
00:21:55,179 --> 00:21:56,650
takes the screenshot where the mouse is

485
00:21:56,650 --> 00:22:00,640
clicking the screen system controller it

486
00:22:00,640 --> 00:22:02,049
collects all sorts of system information

487
00:22:02,049 --> 00:22:04,059
if you plug in your iPhone through your

488
00:22:04,059 --> 00:22:07,480
Mac it will read a device class ID

489
00:22:07,480 --> 00:22:10,150
serial number whether its iPod iPad

490
00:22:10,150 --> 00:22:14,230
iPhone ed room of applications check the

491
00:22:14,230 --> 00:22:15,700
presence of the M as I mentioned collect

492
00:22:15,700 --> 00:22:16,900
the list of all the installed and

493
00:22:16,900 --> 00:22:19,240
running applications skeleton cookies

494
00:22:19,240 --> 00:22:21,190
from the browsers it can search

495
00:22:21,190 --> 00:22:23,980
recursively for file so they the the I

496
00:22:23,980 --> 00:22:26,470
can't say attackers the ID the admins

497
00:22:26,470 --> 00:22:29,440
can specify the task to search for files

498
00:22:29,440 --> 00:22:31,330
recursively it will find those files it

499
00:22:31,330 --> 00:22:33,460
can upload those files it can download

500
00:22:33,460 --> 00:22:36,700
files it can run those files it's a full

501
00:22:36,700 --> 00:22:39,360
file system access it can display alerts

502
00:22:39,360 --> 00:22:41,860
run applications as ruled copy more

503
00:22:41,860 --> 00:22:44,470
false a debtor's creatively directory

504
00:22:44,470 --> 00:22:48,299
it's it's a fully functional backdoor

505
00:22:48,299 --> 00:22:53,110
now the question is when you when you

506
00:22:53,110 --> 00:22:54,909
look at it you you probably have a

507
00:22:54,909 --> 00:22:57,490
question why so much power and the the

508
00:22:57,490 --> 00:23:01,090
answer is I have no doubt that the the

509
00:23:01,090 --> 00:23:04,419
the actual intention was to provide full

510
00:23:04,419 --> 00:23:06,580
visibility over the software because the

511
00:23:06,580 --> 00:23:08,820
company is so careful to protect it

512
00:23:08,820 --> 00:23:11,309
where it's deployed where it's running

513
00:23:11,309 --> 00:23:15,580
they are so keen to prevent the the

514
00:23:15,580 --> 00:23:17,620
fraud situation when when they when

515
00:23:17,620 --> 00:23:19,630
people are trying to gain the system

516
00:23:19,630 --> 00:23:22,929
that they want the telemetry they want

517
00:23:22,929 --> 00:23:24,880
full control and they have set it up

518
00:23:24,880 --> 00:23:26,890
they set up a full backdoor

519
00:23:26,890 --> 00:23:29,600
so what conclusions can we draw from

520
00:23:29,600 --> 00:23:32,270
this first it's it's a very popular

521
00:23:32,270 --> 00:23:35,270
bundle web product they claim millions

522
00:23:35,270 --> 00:23:38,960
of installations we see sometimes dozens

523
00:23:38,960 --> 00:23:40,850
of unique examples a day

524
00:23:40,850 --> 00:23:43,280
similar to virustotal they regularly

525
00:23:43,280 --> 00:23:46,760
changed the encryption scheme by the way

526
00:23:46,760 --> 00:23:48,620
the journalists that I mentioned

527
00:23:48,620 --> 00:23:53,570
previously the this talk was published

528
00:23:53,570 --> 00:23:58,460
on on 4th of April in two days they've

529
00:23:58,460 --> 00:24:00,530
changed the encryption scheme so she

530
00:24:00,530 --> 00:24:02,330
Kilis was gone and they added new

531
00:24:02,330 --> 00:24:06,110
another application layer another time

532
00:24:06,110 --> 00:24:08,330
it was changed was just a week ago just

533
00:24:08,330 --> 00:24:11,540
a week ago they totally reset the

534
00:24:11,540 --> 00:24:13,160
encryption scheme each time it happens

535
00:24:13,160 --> 00:24:15,340
if you look at the virus Toro the

536
00:24:15,340 --> 00:24:18,230
detection rate drops immediately then it

537
00:24:18,230 --> 00:24:21,740
gains slowly one by one day after day it

538
00:24:21,740 --> 00:24:23,870
gains and increases but each time they

539
00:24:23,870 --> 00:24:27,010
they they're very careful to drop that

540
00:24:27,010 --> 00:24:30,140
detection by regularly changing the

541
00:24:30,140 --> 00:24:32,780
encryption schemes that I employ back

542
00:24:32,780 --> 00:24:34,520
door unlocks full access to the system

543
00:24:34,520 --> 00:24:36,350
memory injection is simply copied pasted

544
00:24:36,350 --> 00:24:39,860
from the Mac hacker's handbook the

545
00:24:39,860 --> 00:24:41,480
engine itself is driven with this

546
00:24:41,480 --> 00:24:43,520
symmetrical encrypted remote tasks so

547
00:24:43,520 --> 00:24:45,140
again the question is what happens if

548
00:24:45,140 --> 00:24:47,900
someone over takes control over the the

549
00:24:47,900 --> 00:24:49,450
command and control server

550
00:24:49,450 --> 00:24:52,250
what if someone intercepts the traffic

551
00:24:52,250 --> 00:24:55,520
and injects malicious tasks they will

552
00:24:55,520 --> 00:24:58,430
simply oh it may they might potentially

553
00:24:58,430 --> 00:25:02,030
overtake control over that system and on

554
00:25:02,030 --> 00:25:05,650
a final note this is this is just a

555
00:25:05,650 --> 00:25:08,120
trend we are witnessing and that trend

556
00:25:08,120 --> 00:25:11,030
is the spilling of the techniques which

557
00:25:11,030 --> 00:25:13,670
are so common for for Windows world

558
00:25:13,670 --> 00:25:15,440
everyone or every windows analyst

559
00:25:15,440 --> 00:25:17,090
researcher has seen it millions of times

560
00:25:17,090 --> 00:25:20,270
there is no point of repeating it but if

561
00:25:20,270 --> 00:25:22,550
you look at it it's codification its API

562
00:25:22,550 --> 00:25:24,950
string application it's dynamic loading

563
00:25:24,950 --> 00:25:28,070
of the modules in memory anti-villain

564
00:25:28,070 --> 00:25:30,710
they have anti anti anti debugging

565
00:25:30,710 --> 00:25:36,200
techniques they call a peat race with

566
00:25:36,200 --> 00:25:38,690
deny attach a function so that if you

567
00:25:38,690 --> 00:25:39,830
debug the executable

568
00:25:39,830 --> 00:25:42,560
it will crash if you run if you run it

569
00:25:42,560 --> 00:25:44,870
and then try to attach in the debugger

570
00:25:44,870 --> 00:25:47,210
it will throw an exception and still

571
00:25:47,210 --> 00:25:53,140
crash it's all there in this code and um

572
00:25:53,140 --> 00:25:55,340
that's that's what's happening the world

573
00:25:55,340 --> 00:25:59,860
of Mac it's just kind of important to

574
00:25:59,860 --> 00:26:03,320
understand that and this is it that's

575
00:26:03,320 --> 00:26:04,790
the end of presentation thank you very

576
00:26:04,790 --> 00:26:06,490
much if any questions

577
00:26:06,490 --> 00:26:10,230
[Applause]

578
00:26:10,470 --> 00:26:13,839
[Music]

