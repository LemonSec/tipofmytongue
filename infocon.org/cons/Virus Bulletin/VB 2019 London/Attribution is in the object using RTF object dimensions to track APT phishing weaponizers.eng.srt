1
00:00:00,030 --> 00:00:04,410
right so it's the second presentation of

2
00:00:04,410 --> 00:00:11,700
this morning we've got attribution is

3
00:00:11,700 --> 00:00:14,790
the object and we got two guys from

4
00:00:14,790 --> 00:00:18,690
Proofpoint and normally to hopefully

5
00:00:18,690 --> 00:00:22,650
entertain us and we don't know okay yeah

6
00:00:22,650 --> 00:00:24,539
thank you good morning everybody thank

7
00:00:24,539 --> 00:00:28,500
you for coming to our session so we are

8
00:00:28,500 --> 00:00:30,960
gonna speak today about RTF attribution

9
00:00:30,960 --> 00:00:33,510
I know attribution is a very sexy word

10
00:00:33,510 --> 00:00:36,750
but was very bad reputation I mean like

11
00:00:36,750 --> 00:00:38,460
we security researchers like doing

12
00:00:38,460 --> 00:00:40,290
attribution threat analysts and

13
00:00:40,290 --> 00:00:43,260
reporters like asking about it but

14
00:00:43,260 --> 00:00:44,969
usually it's very tricky and it usually

15
00:00:44,969 --> 00:00:48,300
fires back fortunately we are only gonna

16
00:00:48,300 --> 00:00:51,449
focus on technical attribution trying

17
00:00:51,449 --> 00:00:53,399
our best today to avoid getting into the

18
00:00:53,399 --> 00:00:56,190
muddy water of attribution my name is

19
00:00:56,190 --> 00:00:58,590
Rashad I'm a threat intelligence manager

20
00:00:58,590 --> 00:01:01,920
at anomaly my name is Michael Raji I am

21
00:01:01,920 --> 00:01:05,909
a senior research engineer Proofpoint so

22
00:01:05,909 --> 00:01:07,500
we found this quote which we thought

23
00:01:07,500 --> 00:01:09,270
especially relevant to this presentation

24
00:01:09,270 --> 00:01:11,460
nothing made by a human can avoid

25
00:01:11,460 --> 00:01:13,979
personal expression we find this to be

26
00:01:13,979 --> 00:01:16,100
especially true in cyber threat research

27
00:01:16,100 --> 00:01:19,229
when threat adversaries attempt to

28
00:01:19,229 --> 00:01:21,270
obfuscate their fingerprints there is

29
00:01:21,270 --> 00:01:22,830
more and more that ends up pointing back

30
00:01:22,830 --> 00:01:25,229
to them whether it be shared strings pdb

31
00:01:25,229 --> 00:01:28,200
paths code bases this presentation is

32
00:01:28,200 --> 00:01:29,820
seeking to identify the human

33
00:01:29,820 --> 00:01:32,400
fingerprints in the tools that threat

34
00:01:32,400 --> 00:01:35,119
actors build to target our organizations

35
00:01:35,119 --> 00:01:37,920
so attribution in the object using our

36
00:01:37,920 --> 00:01:39,930
TF object dimensions to track apt

37
00:01:39,930 --> 00:01:41,610
fishing weaponize errs is going to start

38
00:01:41,610 --> 00:01:44,009
by defining what a document fishing

39
00:01:44,009 --> 00:01:45,990
weaponize er is we're going to explain

40
00:01:45,990 --> 00:01:47,670
why we need to track these weaponize

41
00:01:47,670 --> 00:01:49,920
errs we're gonna dig deep on the RTF

42
00:01:49,920 --> 00:01:52,229
file format and RTF weaponize errs

43
00:01:52,229 --> 00:01:54,630
particularly and then we're going to

44
00:01:54,630 --> 00:01:57,090
discuss for attribution techniques for

45
00:01:57,090 --> 00:01:59,460
RTF fishing files and then finally we're

46
00:01:59,460 --> 00:02:02,399
going to end up with an apt case study

47
00:02:02,399 --> 00:02:04,560
on the Royal Road RTF weaponize er that

48
00:02:04,560 --> 00:02:07,320
was used by both Chinese and then Indian

49
00:02:07,320 --> 00:02:09,739
a PT's for a very brief period of time

50
00:02:09,739 --> 00:02:13,260
so let's dive in what is a document

51
00:02:13,260 --> 00:02:13,770
fishing

52
00:02:13,770 --> 00:02:15,900
denizer well a document weaponize er is

53
00:02:15,900 --> 00:02:18,240
a tool used by threat actors to create a

54
00:02:18,240 --> 00:02:20,700
malicious document from a pre-existing

55
00:02:20,700 --> 00:02:23,910
fishing lure utilizing a code to inject

56
00:02:23,910 --> 00:02:28,440
malicious bone into a document to

57
00:02:28,440 --> 00:02:31,380
exploit a vulnerability or a zero-day so

58
00:02:31,380 --> 00:02:34,230
this is a distinct tool a script from

59
00:02:34,230 --> 00:02:37,590
the actual exploits or vulnerabilities

60
00:02:37,590 --> 00:02:38,910
that are going to be exploited by the

61
00:02:38,910 --> 00:02:40,920
document and they're often things like a

62
00:02:40,920 --> 00:02:43,170
Python script and the reason that thread

63
00:02:43,170 --> 00:02:45,720
actors are utilizing a weaponize er is

64
00:02:45,720 --> 00:02:48,210
to make their operations more convenient

65
00:02:48,210 --> 00:02:50,910
as well as scale them so they have the

66
00:02:50,910 --> 00:02:53,550
ability to utilize a script disseminated

67
00:02:53,550 --> 00:02:56,040
across their operators allowing them to

68
00:02:56,040 --> 00:02:58,980
scale operations and customize fishing

69
00:02:58,980 --> 00:03:01,230
lures across campaigns while automating

70
00:03:01,230 --> 00:03:03,140
the injection of malicious payload

71
00:03:03,140 --> 00:03:07,500
exploits into Word documents so let's

72
00:03:07,500 --> 00:03:11,190
visualize that every campaign begins

73
00:03:11,190 --> 00:03:12,570
with a threat actor assembling a

74
00:03:12,570 --> 00:03:15,420
plausible social engineering lure they

75
00:03:15,420 --> 00:03:18,030
then create a lore document utilizing a

76
00:03:18,030 --> 00:03:20,300
word processor a software on their hosts

77
00:03:20,300 --> 00:03:22,470
next they're gonna run the weaponize er

78
00:03:22,470 --> 00:03:24,840
script which will inject the malicious

79
00:03:24,840 --> 00:03:27,270
code into the word document resulting in

80
00:03:27,270 --> 00:03:29,970
a weaponized document so this is now a

81
00:03:29,970 --> 00:03:31,530
document capable of exploiting a

82
00:03:31,530 --> 00:03:33,660
vulnerability or a zero-day and then

83
00:03:33,660 --> 00:03:35,610
finally that document can be attached to

84
00:03:35,610 --> 00:03:37,770
an email and delivered to a victim at

85
00:03:37,770 --> 00:03:41,490
one of our organizations and to help

86
00:03:41,490 --> 00:03:43,650
visualize what these weaponize errs look

87
00:03:43,650 --> 00:03:46,020
like these are two different scripts for

88
00:03:46,020 --> 00:03:48,510
equation editor exploits that actually

89
00:03:48,510 --> 00:03:55,130
inject these CVE exploits into RTF files

90
00:03:55,130 --> 00:03:57,450
okay so now that we know what they are

91
00:03:57,450 --> 00:03:59,940
why should we track them year after year

92
00:03:59,940 --> 00:04:01,680
reports come out that continue to cite

93
00:04:01,680 --> 00:04:03,480
fishing as a top malware infection

94
00:04:03,480 --> 00:04:05,280
vector including attachments that's not

95
00:04:05,280 --> 00:04:07,410
surprising a lot of these attachments

96
00:04:07,410 --> 00:04:10,770
are built by fishing weaponize errs when

97
00:04:10,770 --> 00:04:12,420
you start tracking fishing weaponize

98
00:04:12,420 --> 00:04:13,950
errs in your environment you gain

99
00:04:13,950 --> 00:04:15,090
visibility that you didn't have

100
00:04:15,090 --> 00:04:17,250
previously it gives you the ability to

101
00:04:17,250 --> 00:04:19,500
attribute fishing attacks to known

102
00:04:19,500 --> 00:04:21,660
sophisticated and unsophisticated actors

103
00:04:21,660 --> 00:04:24,180
based on shared weaponize errs the same

104
00:04:24,180 --> 00:04:25,860
principle holds true for identifying new

105
00:04:25,860 --> 00:04:27,030
payloads using shared

106
00:04:27,030 --> 00:04:28,980
appetizers you can even track objectives

107
00:04:28,980 --> 00:04:30,930
and targeting across multiple campaigns

108
00:04:30,930 --> 00:04:33,060
if you have that visibility and then

109
00:04:33,060 --> 00:04:34,410
finally we're going to demonstrate today

110
00:04:34,410 --> 00:04:36,780
that the most extreme use case is

111
00:04:36,780 --> 00:04:39,240
identifying new exploits entering the

112
00:04:39,240 --> 00:04:41,100
wild through known fishing weaponize

113
00:04:41,100 --> 00:04:46,350
errs so why are we focusing today on our

114
00:04:46,350 --> 00:04:48,540
ta fat tribution and tracking so as

115
00:04:48,540 --> 00:04:50,310
Michael just said like it's very

116
00:04:50,310 --> 00:04:52,110
important and useful to be able to track

117
00:04:52,110 --> 00:04:54,660
an attribute exploits in general not

118
00:04:54,660 --> 00:04:56,400
only for security researcher but also

119
00:04:56,400 --> 00:04:58,139
for threat analyst who is trying to

120
00:04:58,139 --> 00:05:00,060
understand attacks and exploits

121
00:05:00,060 --> 00:05:02,730
targeting his organization trying to

122
00:05:02,730 --> 00:05:04,800
grab it and attribute it to a certain

123
00:05:04,800 --> 00:05:07,790
actor or B previously seen incidents and

124
00:05:07,790 --> 00:05:10,830
since RTF is one of the most common used

125
00:05:10,830 --> 00:05:13,770
file format to deliver exploits I would

126
00:05:13,770 --> 00:05:16,140
say if we exclude macros which is

127
00:05:16,140 --> 00:05:18,270
technically not exploits RTF are

128
00:05:18,270 --> 00:05:20,580
currently the most commonly used format

129
00:05:20,580 --> 00:05:24,660
or file format in phishing attachments I

130
00:05:24,660 --> 00:05:27,030
mean on a daily basis on our set hunting

131
00:05:27,030 --> 00:05:29,130
and abtey tracking we see a lot of

132
00:05:29,130 --> 00:05:31,110
malicious RTF files and we are always

133
00:05:31,110 --> 00:05:32,760
trying to attribute it to a certain

134
00:05:32,760 --> 00:05:35,850
actor and we thought that might be a

135
00:05:35,850 --> 00:05:38,700
very good idea to combine or group all

136
00:05:38,700 --> 00:05:40,410
the techniques and methods we are using

137
00:05:40,410 --> 00:05:42,180
to track and attributes as RTF

138
00:05:42,180 --> 00:05:44,400
organizers and release a research paper

139
00:05:44,400 --> 00:05:47,130
summarizing our findings only this year

140
00:05:47,130 --> 00:05:49,110
we have been tracking at least 22 unique

141
00:05:49,110 --> 00:05:52,380
part EF with an either used by multiple

142
00:05:52,380 --> 00:05:54,810
actors exploiting exploiting at least

143
00:05:54,810 --> 00:05:57,479
six different CVS numbers so we are

144
00:05:57,479 --> 00:05:59,160
hoping in the next slides we will be

145
00:05:59,160 --> 00:06:00,900
summarizing the techniques and the tools

146
00:06:00,900 --> 00:06:02,910
we are using to track and attribute this

147
00:06:02,910 --> 00:06:06,900
RTF files just to start with a quick

148
00:06:06,900 --> 00:06:09,210
summary of rich text format rich text

149
00:06:09,210 --> 00:06:11,240
format was developed by Microsoft in

150
00:06:11,240 --> 00:06:14,450
1987 was the goal to achieve

151
00:06:14,450 --> 00:06:16,710
cross-platform that means interchange

152
00:06:16,710 --> 00:06:19,140
and to be able to achieve this goal RTF

153
00:06:19,140 --> 00:06:20,970
specification was created to be very

154
00:06:20,970 --> 00:06:23,340
flexible and that's that led to one

155
00:06:23,340 --> 00:06:25,800
important thing which is when you create

156
00:06:25,800 --> 00:06:27,900
a very flexible specification you have

157
00:06:27,900 --> 00:06:30,330
very complex parsers and that means a

158
00:06:30,330 --> 00:06:32,430
lot of code and that means a lot of our

159
00:06:32,430 --> 00:06:34,350
abilities and that's exactly the case

160
00:06:34,350 --> 00:06:35,280
with RTF

161
00:06:35,280 --> 00:06:38,250
the second most important feature of RTF

162
00:06:38,250 --> 00:06:40,710
files it it was created to be able to

163
00:06:40,710 --> 00:06:41,129
embed

164
00:06:41,129 --> 00:06:44,069
and render different type of objects so

165
00:06:44,069 --> 00:06:46,259
you can include all the objects in RTF

166
00:06:46,259 --> 00:06:49,369
files which means images fonts

167
00:06:49,369 --> 00:06:52,229
annotations flash files which means

168
00:06:52,229 --> 00:06:54,749
again more vulnerabilities more options

169
00:06:54,749 --> 00:06:57,449
to deliver exploits as we can see that's

170
00:06:57,449 --> 00:06:59,459
an example of some of the Seavey's we

171
00:06:59,459 --> 00:07:02,610
were seeing lately with RTF files if you

172
00:07:02,610 --> 00:07:04,409
are into threat until you know these are

173
00:07:04,409 --> 00:07:06,889
commonly use of ease that was heavily

174
00:07:06,889 --> 00:07:09,989
used and implemented by different abt

175
00:07:09,989 --> 00:07:13,800
actors and cyber criminal groups so in

176
00:07:13,800 --> 00:07:15,089
the next slides we are going to focus

177
00:07:15,089 --> 00:07:17,099
more on feature and characteristics of

178
00:07:17,099 --> 00:07:19,319
RTF which we can use to track and

179
00:07:19,319 --> 00:07:21,389
attribute RTF files and to make it

180
00:07:21,389 --> 00:07:23,459
easier we have grouped these features

181
00:07:23,459 --> 00:07:26,129
into four main groups which we can map

182
00:07:26,129 --> 00:07:28,769
into the stages of lower document or

183
00:07:28,769 --> 00:07:30,389
malicious document creation Michael have

184
00:07:30,389 --> 00:07:32,929
just explained lower document creation

185
00:07:32,929 --> 00:07:36,269
payload selection and ribbon ization so

186
00:07:36,269 --> 00:07:38,669
these four groups or techniques are RTF

187
00:07:38,669 --> 00:07:41,279
metadata office caching artifacts and

188
00:07:41,279 --> 00:07:44,369
shellcode characteristics and finally

189
00:07:44,369 --> 00:07:47,219
RTF object characteristics and object

190
00:07:47,219 --> 00:07:50,490
dimensions so let's start with the

191
00:07:50,490 --> 00:07:52,919
simplest of those first metadata author

192
00:07:52,919 --> 00:07:56,029
tag attribution for RTF files metadata

193
00:07:56,029 --> 00:07:58,949
tags within RTF files is the simplest

194
00:07:58,949 --> 00:08:00,659
because these are contained in the

195
00:08:00,659 --> 00:08:02,550
strings as plain text and in the

196
00:08:02,550 --> 00:08:05,209
property of our properties of RTF files

197
00:08:05,209 --> 00:08:08,369
these metadata tags are applied during

198
00:08:08,369 --> 00:08:11,039
the lower document creation prior to

199
00:08:11,039 --> 00:08:12,689
running the weapon Iser script which

200
00:08:12,689 --> 00:08:14,789
injects the malicious code to exploit

201
00:08:14,789 --> 00:08:17,129
vulnerabilities what makes these such

202
00:08:17,129 --> 00:08:19,740
high value i/o sees is this is host

203
00:08:19,740 --> 00:08:21,749
artefact information taken from the

204
00:08:21,749 --> 00:08:23,729
weaponization environment the threat

205
00:08:23,729 --> 00:08:25,409
actors environment and delivered to

206
00:08:25,409 --> 00:08:27,839
individuals at our organization's it

207
00:08:27,839 --> 00:08:29,729
provides a high level of persona

208
00:08:29,729 --> 00:08:31,979
visibility and understanding I include

209
00:08:31,979 --> 00:08:33,599
an example here that I like to refer to

210
00:08:33,599 --> 00:08:35,639
as Schrodinger's backslash I've presents

211
00:08:35,639 --> 00:08:37,549
it on it elsewhere it's actually a

212
00:08:37,549 --> 00:08:40,229
metadata author tag and operator string

213
00:08:40,229 --> 00:08:42,299
used by a number of Chinese apt groups

214
00:08:42,299 --> 00:08:44,579
that when you pivot on it allows you to

215
00:08:44,579 --> 00:08:46,620
identify multiple RTS that can be

216
00:08:46,620 --> 00:08:48,300
attributed to different campaigns by

217
00:08:48,300 --> 00:08:51,630
Chinese apt groups like goblin panda apt

218
00:08:51,630 --> 00:08:54,770
10 and the Sun or Cal Reaver group

219
00:08:54,770 --> 00:08:58,260
so metadata as Michael just explained is

220
00:08:58,260 --> 00:09:00,270
an easy way to be able to track and

221
00:09:00,270 --> 00:09:02,190
attribute RTF files it provides

222
00:09:02,190 --> 00:09:04,380
visibility into the operator level will

223
00:09:04,380 --> 00:09:06,480
you see more artifacts of who is

224
00:09:06,480 --> 00:09:08,550
creating the lower document a more

225
00:09:08,550 --> 00:09:11,610
complex way of tracking RTF files it's a

226
00:09:11,610 --> 00:09:13,920
code attributes or cell code attribution

227
00:09:13,920 --> 00:09:16,200
as we know say code is the code executed

228
00:09:16,200 --> 00:09:18,150
after we are successfully successfully

229
00:09:18,150 --> 00:09:20,100
able to exploit the vulnerability and

230
00:09:20,100 --> 00:09:22,140
it's it's very common that we see

231
00:09:22,140 --> 00:09:24,600
straight actors using or developing

232
00:09:24,600 --> 00:09:26,460
their own custom shell code and there's

233
00:09:26,460 --> 00:09:28,320
custom shell code usually have unique

234
00:09:28,320 --> 00:09:30,570
characteristics which we can use to

235
00:09:30,570 --> 00:09:33,029
track and attribute a shell code to a

236
00:09:33,029 --> 00:09:35,640
certain actor actually while this

237
00:09:35,640 --> 00:09:37,680
characteristic are not unique to RTF

238
00:09:37,680 --> 00:09:39,600
files but what is very important with

239
00:09:39,600 --> 00:09:42,089
RTF files is that they are text files so

240
00:09:42,089 --> 00:09:45,089
RTF are usually ASCII characters which

241
00:09:45,089 --> 00:09:46,800
means they are not using compression

242
00:09:46,800 --> 00:09:49,200
they are not using any packing they are

243
00:09:49,200 --> 00:09:51,930
not binary files like Office documents

244
00:09:51,930 --> 00:09:54,390
so it's much easier to be able to spot

245
00:09:54,390 --> 00:09:57,450
on find shellcode parts into an RTF file

246
00:09:57,450 --> 00:09:59,339
and develop a very simple rule to detect

247
00:09:59,339 --> 00:10:02,250
and match against it some of the

248
00:10:02,250 --> 00:10:03,630
examples of the shell code

249
00:10:03,630 --> 00:10:05,760
characteristic we usually see and use to

250
00:10:05,760 --> 00:10:07,890
track a shellcode is Shaco pipes which

251
00:10:07,890 --> 00:10:10,080
is actually the shape code code itself

252
00:10:10,080 --> 00:10:11,910
like if you have any code for shell code

253
00:10:11,910 --> 00:10:14,310
you can easily write signature to track

254
00:10:14,310 --> 00:10:16,050
and attributed the return-oriented

255
00:10:16,050 --> 00:10:18,750
programming get codes if an actor is

256
00:10:18,750 --> 00:10:20,490
using a custom gasket in his written

257
00:10:20,490 --> 00:10:22,500
oriented to pivot over that execution

258
00:10:22,500 --> 00:10:24,779
prevention these addresses can be used

259
00:10:24,779 --> 00:10:26,580
as a good signature to detect and

260
00:10:26,580 --> 00:10:28,500
attribute and exploit to variously see

261
00:10:28,500 --> 00:10:32,070
an actor accounting tags so while it's

262
00:10:32,070 --> 00:10:33,750
not very common in RTF files but

263
00:10:33,750 --> 00:10:35,580
sometimes you can see the magic number

264
00:10:35,580 --> 00:10:38,370
or the magic strength used in accounting

265
00:10:38,370 --> 00:10:40,560
can be very unique and can be used to

266
00:10:40,560 --> 00:10:42,350
attribute a shellcode

267
00:10:42,350 --> 00:10:45,120
other characteristic which is more into

268
00:10:45,120 --> 00:10:47,339
the behavior of a shellcode is drop file

269
00:10:47,339 --> 00:10:49,650
names like the very popular a two T

270
00:10:49,650 --> 00:10:51,000
files we were speaking about people who

271
00:10:51,000 --> 00:10:52,920
are speaking about yesterday that can be

272
00:10:52,920 --> 00:10:55,020
very effective in to attribute a

273
00:10:55,020 --> 00:10:57,420
shellcode payload execution are they

274
00:10:57,420 --> 00:11:00,900
using HT a to execute the script as

275
00:11:00,900 --> 00:11:02,700
executing a file are they manually

276
00:11:02,700 --> 00:11:05,040
loading a dll into memory and executing

277
00:11:05,040 --> 00:11:07,050
it are they using PowerShell to execute

278
00:11:07,050 --> 00:11:07,740
next stage

279
00:11:07,740 --> 00:11:09,570
reload this can all be used as a

280
00:11:09,570 --> 00:11:11,990
characteristic to attribute the FAL

281
00:11:11,990 --> 00:11:14,850
that's a very simple example of like a

282
00:11:14,850 --> 00:11:16,620
very simple rule you can develop to

283
00:11:16,620 --> 00:11:18,600
detect or attribute the shell code

284
00:11:18,600 --> 00:11:22,110
fundin files the string here is for very

285
00:11:22,110 --> 00:11:24,240
special character used for the buffer

286
00:11:24,240 --> 00:11:27,030
overflow for CV 2018 zero seven nine

287
00:11:27,030 --> 00:11:30,870
eight another example would be this also

288
00:11:30,870 --> 00:11:33,240
sender rule that's used to detect the a

289
00:11:33,240 --> 00:11:37,950
to T very popular Chinese actor che code

290
00:11:37,950 --> 00:11:41,940
so just looking for an object inside an

291
00:11:41,940 --> 00:11:46,620
RTF file with the name of a duty so what

292
00:11:46,620 --> 00:11:48,810
as we said like shell code might be a

293
00:11:48,810 --> 00:11:50,370
little bit complex because you might

294
00:11:50,370 --> 00:11:51,960
need a little bit of reverse engineering

295
00:11:51,960 --> 00:11:53,580
to be able to spot the shell code and

296
00:11:53,580 --> 00:11:55,740
try to rule for it but it's very

297
00:11:55,740 --> 00:11:58,080
resistance like act actually we see

298
00:11:58,080 --> 00:12:00,690
actors reusing their old shell codes

299
00:12:00,690 --> 00:12:02,520
when they are moving to new exploits and

300
00:12:02,520 --> 00:12:04,860
even in some cases we have seen them

301
00:12:04,860 --> 00:12:07,470
using old shell codes with zero days so

302
00:12:07,470 --> 00:12:09,600
if you are able to develop a good rule

303
00:12:09,600 --> 00:12:11,610
to detect shell codes and attribute them

304
00:12:11,610 --> 00:12:13,680
you might be able to do a very good

305
00:12:13,680 --> 00:12:18,180
hunting on two and two cell codes so the

306
00:12:18,180 --> 00:12:19,470
next technique we are going to discuss

307
00:12:19,470 --> 00:12:22,350
our RTF obfuscation artifacts as we said

308
00:12:22,350 --> 00:12:24,720
RTF specification was designed to be

309
00:12:24,720 --> 00:12:27,320
very flexible and flexibility meant

310
00:12:27,320 --> 00:12:30,000
complex parsers and that doesn't only

311
00:12:30,000 --> 00:12:32,610
result into a lot of exploits that also

312
00:12:32,610 --> 00:12:34,590
results into a different implementation

313
00:12:34,590 --> 00:12:37,320
of the RTF specification and that means

314
00:12:37,320 --> 00:12:39,510
when you are developing an AV parser or

315
00:12:39,510 --> 00:12:41,700
analysis tool parser it's very difficult

316
00:12:41,700 --> 00:12:44,010
to implement all the options and actual

317
00:12:44,010 --> 00:12:46,470
actually actress you usually make use of

318
00:12:46,470 --> 00:12:48,780
this by when the when you are developing

319
00:12:48,780 --> 00:12:51,230
and exploit that's targeting a certain

320
00:12:51,230 --> 00:12:54,000
parser you can make use of this by

321
00:12:54,000 --> 00:12:55,890
inserting some obfuscation artifacts

322
00:12:55,890 --> 00:12:58,680
that might make it difficult for an AV

323
00:12:58,680 --> 00:13:01,050
to extract the bae load so how things

324
00:13:01,050 --> 00:13:03,420
works in RTF is that we have an object

325
00:13:03,420 --> 00:13:05,130
header and then we have an object data

326
00:13:05,130 --> 00:13:08,160
and usually the shell code or the bae

327
00:13:08,160 --> 00:13:10,410
load or the malicious payload are in the

328
00:13:10,410 --> 00:13:13,410
object data so actual actor are always

329
00:13:13,410 --> 00:13:16,200
trying to insert the obfuscation strings

330
00:13:16,200 --> 00:13:17,790
into the payload to make it more

331
00:13:17,790 --> 00:13:21,190
difficult to parse and extract the final

332
00:13:21,190 --> 00:13:24,490
load this office caching artifacts or

333
00:13:24,490 --> 00:13:26,800
strings are usually or sometimes unique

334
00:13:26,800 --> 00:13:28,330
to the actor who have been developing it

335
00:13:28,330 --> 00:13:30,570
and can be used to track and again

336
00:13:30,570 --> 00:13:35,310
attribute an RTF file to these actors

337
00:13:35,460 --> 00:13:38,890
again so there is a lot a lot of options

338
00:13:38,890 --> 00:13:40,840
and techniques that can be used for RTF

339
00:13:40,840 --> 00:13:43,240
confiscation it's out of the scope to be

340
00:13:43,240 --> 00:13:44,860
discussing them and explaining them but

341
00:13:44,860 --> 00:13:46,420
there's already a lot of good write-ups

342
00:13:46,420 --> 00:13:47,890
on the internet explaining our

343
00:13:47,890 --> 00:13:50,260
application and how they work we are

344
00:13:50,260 --> 00:13:51,760
just going to give a small or quick

345
00:13:51,760 --> 00:13:53,650
examples of how they look like and how

346
00:13:53,650 --> 00:13:55,750
we can use them in our yard signatures

347
00:13:55,750 --> 00:13:58,210
so as we said we can see that there is

348
00:13:58,210 --> 00:14:00,370
an object here different and objects

349
00:14:00,370 --> 00:14:02,230
have a header and object have an object

350
00:14:02,230 --> 00:14:04,090
data the object data as we said is the

351
00:14:04,090 --> 00:14:07,780
Balogh that contains the malicious data

352
00:14:07,780 --> 00:14:09,790
the actors are gonna use to exploit the

353
00:14:09,790 --> 00:14:12,040
vulnerability and we can see here actors

354
00:14:12,040 --> 00:14:14,560
can make use of the flexibility of RTF

355
00:14:14,560 --> 00:14:17,140
file so for example like you can define

356
00:14:17,140 --> 00:14:19,090
an object inside the data and this

357
00:14:19,090 --> 00:14:21,280
object can be invalid characters and

358
00:14:21,280 --> 00:14:23,560
still RTF parsers will be able to parse

359
00:14:23,560 --> 00:14:25,300
it in the right way you can use

360
00:14:25,300 --> 00:14:28,720
different character encoding techniques

361
00:14:28,720 --> 00:14:30,970
you can use white spaces you can use new

362
00:14:30,970 --> 00:14:33,490
character lines and still the our TIFF

363
00:14:33,490 --> 00:14:36,460
file will be valid but for a V file for

364
00:14:36,460 --> 00:14:38,260
a V scanners or for analysis tool it

365
00:14:38,260 --> 00:14:40,690
will be very challenging to extract the

366
00:14:40,690 --> 00:14:44,380
Balog so an example by our rule that we

367
00:14:44,380 --> 00:14:46,360
can use to detect this is again very

368
00:14:46,360 --> 00:14:48,310
simple you just detect obfuscation

369
00:14:48,310 --> 00:14:50,140
strengths which are unique as we said

370
00:14:50,140 --> 00:14:52,630
you have them in IR rule and you look

371
00:14:52,630 --> 00:14:54,640
for this inside any RTF file and you can

372
00:14:54,640 --> 00:14:58,440
easily attribute it to the same actor

373
00:14:58,440 --> 00:15:00,970
okay so the last technique we are going

374
00:15:00,970 --> 00:15:02,620
to discuss today and the one which we

375
00:15:02,620 --> 00:15:04,810
have been using and have been proven to

376
00:15:04,810 --> 00:15:08,250
be very flexible is RTF object

377
00:15:08,250 --> 00:15:11,080
dimensions and object characteristics as

378
00:15:11,080 --> 00:15:13,180
we said like RTF files can embed

379
00:15:13,180 --> 00:15:15,040
different type of objects some of these

380
00:15:15,040 --> 00:15:16,450
objects might have graphical

381
00:15:16,450 --> 00:15:19,210
representation and as per RTF

382
00:15:19,210 --> 00:15:21,490
specification when you have an object

383
00:15:21,490 --> 00:15:23,410
with graphical representation you need

384
00:15:23,410 --> 00:15:25,300
to define the object dimension in the

385
00:15:25,300 --> 00:15:27,460
object header this table is from RTF

386
00:15:27,460 --> 00:15:28,900
specification and we can see you can

387
00:15:28,900 --> 00:15:31,900
define properties like object ID object

388
00:15:31,900 --> 00:15:34,780
which opposite scaling dimensions

389
00:15:34,780 --> 00:15:37,980
and location so the main idea here is

390
00:15:37,980 --> 00:15:41,110
when you are developing an exploit these

391
00:15:41,110 --> 00:15:42,610
dimensions and these graphical

392
00:15:42,610 --> 00:15:44,590
representation properties are developed

393
00:15:44,590 --> 00:15:46,270
or generated during the exploit

394
00:15:46,270 --> 00:15:48,940
developing process and usually they are

395
00:15:48,940 --> 00:15:51,250
very unique and they are very resistant

396
00:15:51,250 --> 00:15:52,720
that's mean when you develop and exploit

397
00:15:52,720 --> 00:15:54,580
and then you have it hard-coded inside

398
00:15:54,580 --> 00:15:56,980
the organizer it's very rare to have

399
00:15:56,980 --> 00:15:59,590
this change it so actual actors might

400
00:15:59,590 --> 00:16:01,780
find that they need to update the shell

401
00:16:01,780 --> 00:16:03,370
code they will update the shape code but

402
00:16:03,370 --> 00:16:04,840
they will not play with object

403
00:16:04,840 --> 00:16:07,270
dimensions that's how object dimensions

404
00:16:07,270 --> 00:16:09,370
look inside an RTF file so again we have

405
00:16:09,370 --> 00:16:11,260
an object definition in here and then we

406
00:16:11,260 --> 00:16:13,600
can see that in the object header we

407
00:16:13,600 --> 00:16:16,060
have a defined object widths 8 1 1 and

408
00:16:16,060 --> 00:16:20,080
object header 3 1 0 and that's the

409
00:16:20,080 --> 00:16:21,790
dimension of the object and again this

410
00:16:21,790 --> 00:16:24,520
is usually very unique and this how it

411
00:16:24,520 --> 00:16:26,290
looks inside the file this is our two

412
00:16:26,290 --> 00:16:27,730
different fishing documents from

413
00:16:27,730 --> 00:16:30,010
different actors they are post using

414
00:16:30,010 --> 00:16:31,960
equation editor vulnerabilities and we

415
00:16:31,960 --> 00:16:33,610
can see the boxes in here which

416
00:16:33,610 --> 00:16:35,830
represent the equation editor object and

417
00:16:35,830 --> 00:16:37,870
again it have a graphical representation

418
00:16:37,870 --> 00:16:39,850
and these two boxes have exact

419
00:16:39,850 --> 00:16:42,550
dimensions which defines the same

420
00:16:42,550 --> 00:16:45,700
developer of the exploit so as we said

421
00:16:45,700 --> 00:16:48,250
this technique is very resistance we

422
00:16:48,250 --> 00:16:50,560
have been using signature for the

423
00:16:50,560 --> 00:16:52,360
well-known railroad webinar for more

424
00:16:52,360 --> 00:16:55,060
than one year it was very successful we

425
00:16:55,060 --> 00:16:57,940
have nearly catch all the samples used

426
00:16:57,940 --> 00:16:59,770
by the actors using the open oysters we

427
00:16:59,770 --> 00:17:01,690
have never seen a false positive in it

428
00:17:01,690 --> 00:17:03,610
and we have implemented this technique

429
00:17:03,610 --> 00:17:06,160
was as we said different weaponize errs

430
00:17:06,160 --> 00:17:07,839
at least 22 organizer we are currently

431
00:17:07,839 --> 00:17:10,660
tracking and again if you look here

432
00:17:10,660 --> 00:17:14,470
that's one of the road organizer files

433
00:17:14,470 --> 00:17:17,140
that was submitted to VT after one year

434
00:17:17,140 --> 00:17:19,270
of using the exploit it had a very low

435
00:17:19,270 --> 00:17:21,099
AV detection actually one AV was

436
00:17:21,099 --> 00:17:22,810
detecting it but still it had the same

437
00:17:22,810 --> 00:17:24,369
strength if you look at strengths from

438
00:17:24,369 --> 00:17:26,859
VT object dimensions the same object I

439
00:17:26,859 --> 00:17:28,569
mentioned we used to track the RTF file

440
00:17:28,569 --> 00:17:30,250
so again it's a very successful

441
00:17:30,250 --> 00:17:33,490
technique if you if these really use it

442
00:17:33,490 --> 00:17:35,830
for detection which means actors really

443
00:17:35,830 --> 00:17:37,630
need to change it so that's very

444
00:17:37,630 --> 00:17:39,340
persistence and you can depend on it to

445
00:17:39,340 --> 00:17:44,410
track an RTF fault ok so that was a very

446
00:17:44,410 --> 00:17:46,390
thorough and very good coverage of these

447
00:17:46,390 --> 00:17:48,520
RTF attribution techniques let's

448
00:17:48,520 --> 00:17:49,750
because we quickly compare and contrast

449
00:17:49,750 --> 00:17:51,070
them to understand strengths and

450
00:17:51,070 --> 00:17:53,770
weaknesses so the metadata is perhaps

451
00:17:53,770 --> 00:17:55,270
the simplest method that we presented

452
00:17:55,270 --> 00:17:57,370
it's easy to track and provides a level

453
00:17:57,370 --> 00:17:59,320
of persona operator visibility however

454
00:17:59,320 --> 00:18:01,120
these are very impertinent and not all

455
00:18:01,120 --> 00:18:03,520
metadata author tags are unique to a

456
00:18:03,520 --> 00:18:06,250
file windows user shows up in a lot of

457
00:18:06,250 --> 00:18:08,470
places shell code is more permanent

458
00:18:08,470 --> 00:18:10,300
probably the most permanent that we

459
00:18:10,300 --> 00:18:11,860
talked about and can be very unique to

460
00:18:11,860 --> 00:18:14,230
the actor but there is a sophistication

461
00:18:14,230 --> 00:18:15,910
boundary for analysts to be able to

462
00:18:15,910 --> 00:18:17,170
track these and make appropriate

463
00:18:17,170 --> 00:18:19,150
comparisons across campaigns so

464
00:18:19,150 --> 00:18:21,190
technically challenging to do shell code

465
00:18:21,190 --> 00:18:23,410
attribution obfuscation on the other

466
00:18:23,410 --> 00:18:25,810
hand like metadata is easy to track it's

467
00:18:25,810 --> 00:18:27,610
plain text in the strings of an RTF file

468
00:18:27,610 --> 00:18:29,560
and it provides supply chain visibility

469
00:18:29,560 --> 00:18:31,030
meaning if you're seeing different

470
00:18:31,030 --> 00:18:33,160
obfuscation gadgets used in different

471
00:18:33,160 --> 00:18:34,780
campaigns you're able to understand the

472
00:18:34,780 --> 00:18:36,790
adoption of that obfuscation gadget

473
00:18:36,790 --> 00:18:38,110
across the threat landscape and

474
00:18:38,110 --> 00:18:41,050
therefore the weapon Iser however these

475
00:18:41,050 --> 00:18:43,270
are impermanent as well actors are often

476
00:18:43,270 --> 00:18:44,950
changing these obfuscation gadgets to

477
00:18:44,950 --> 00:18:47,320
frustrate static AV detection and then

478
00:18:47,320 --> 00:18:49,840
finally the object dimensions we believe

479
00:18:49,840 --> 00:18:51,670
to be very very efficient they are more

480
00:18:51,670 --> 00:18:53,080
permanent than either metadata or

481
00:18:53,080 --> 00:18:55,360
obfuscation they provide the same supply

482
00:18:55,360 --> 00:18:57,760
chain visibility as obfuscation and they

483
00:18:57,760 --> 00:19:00,910
can often be very unique to an actor so

484
00:19:00,910 --> 00:19:02,920
let's visualize that quickly we map

485
00:19:02,920 --> 00:19:04,540
these from the most fleeting to the most

486
00:19:04,540 --> 00:19:06,700
permanent and then operator visibility

487
00:19:06,700 --> 00:19:08,980
to supply chain visibility metadata is

488
00:19:08,980 --> 00:19:10,720
the most fleeting with the most persona

489
00:19:10,720 --> 00:19:13,000
visibility operator visibility the

490
00:19:13,000 --> 00:19:14,770
encoding schema is the next less

491
00:19:14,770 --> 00:19:16,630
permanent that's the obfuscation gadgets

492
00:19:16,630 --> 00:19:18,790
that provides a decent level of supply

493
00:19:18,790 --> 00:19:21,190
chain visibility moving to the more

494
00:19:21,190 --> 00:19:23,260
permanent now object dimensions are more

495
00:19:23,260 --> 00:19:25,030
permanent and provide probably the

496
00:19:25,030 --> 00:19:26,200
highest level of supply chain visibility

497
00:19:26,200 --> 00:19:28,630
and then finally shellcode is the most

498
00:19:28,630 --> 00:19:30,580
permanent providing a low-level of

499
00:19:30,580 --> 00:19:34,060
operator visibility so at the beginning

500
00:19:34,060 --> 00:19:35,680
we promised we were going to do an apt

501
00:19:35,680 --> 00:19:39,010
use case here it is the Royal Road RTF

502
00:19:39,010 --> 00:19:41,290
weaponize er this was a toolkit

503
00:19:41,290 --> 00:19:44,320
introduced in late 2017 coinciding with

504
00:19:44,320 --> 00:19:48,460
the publication of CV 2017 1 182 it we

505
00:19:48,460 --> 00:19:49,990
remained in use through the middle of

506
00:19:49,990 --> 00:19:52,930
2019 it was utilized by six different

507
00:19:52,930 --> 00:19:55,450
Chinese I'm sorry five different Chinese

508
00:19:55,450 --> 00:19:58,090
apt groups and one Indian apt group very

509
00:19:58,090 --> 00:20:00,910
briefly it eventually made its way into

510
00:20:00,910 --> 00:20:02,230
the crimeware landscape

511
00:20:02,230 --> 00:20:03,940
and you can find it delivering a sink

512
00:20:03,940 --> 00:20:06,070
rep to day probably in many of your

513
00:20:06,070 --> 00:20:08,860
organizations so it exploits three

514
00:20:08,860 --> 00:20:10,840
distinct CVS from Microsoft equation

515
00:20:10,840 --> 00:20:12,370
editor which I'll cover and it's

516
00:20:12,370 --> 00:20:14,980
identifiable by these unique object

517
00:20:14,980 --> 00:20:17,350
dimensions object with 2180 object

518
00:20:17,350 --> 00:20:23,620
height 300 so like I said the Royal Road

519
00:20:23,620 --> 00:20:25,900
weapon Iser exploits equation editor

520
00:20:25,900 --> 00:20:27,700
vulnerabilities or anyone not familiar

521
00:20:27,700 --> 00:20:29,290
with the equation editor it's a tool in

522
00:20:29,290 --> 00:20:30,640
the Microsoft Office suite that allows

523
00:20:30,640 --> 00:20:32,290
you to write complex equations

524
00:20:32,290 --> 00:20:34,450
it actually was a feature that has been

525
00:20:34,450 --> 00:20:36,669
in office suite for many many years and

526
00:20:36,669 --> 00:20:38,830
it was acquired by Microsoft rather than

527
00:20:38,830 --> 00:20:40,990
having then write the code themselves

528
00:20:40,990 --> 00:20:43,330
and maintain the code base that ended up

529
00:20:43,330 --> 00:20:45,429
being problematic in November 2017 when

530
00:20:45,429 --> 00:20:49,390
CVE 2017 1:1 882 was disclosed because

531
00:20:49,390 --> 00:20:51,100
they didn't maintain the initial code

532
00:20:51,100 --> 00:20:52,299
base and they acquired it they were

533
00:20:52,299 --> 00:20:54,850
forced to release an ad hoc patch binary

534
00:20:54,850 --> 00:20:57,760
for the equation editor the result of

535
00:20:57,760 --> 00:20:59,799
that was it exposed additional

536
00:20:59,799 --> 00:21:01,090
vulnerabilities in the equation editor

537
00:21:01,090 --> 00:21:04,570
CVE 2080 no 802 and then later CVE 20

538
00:21:04,570 --> 00:21:08,559
1807 9 808 o2 was exploited in the wild

539
00:21:08,559 --> 00:21:10,210
almost immediately following the patch

540
00:21:10,210 --> 00:21:13,450
in january so despite being patched the

541
00:21:13,450 --> 00:21:15,400
equation editor exploits including the

542
00:21:15,400 --> 00:21:18,580
Royal Road Builder exploits equation

543
00:21:18,580 --> 00:21:20,410
editor vulnerabilities which sure we're

544
00:21:20,410 --> 00:21:22,960
seeing these every day so let me talk

545
00:21:22,960 --> 00:21:24,460
very briefly about the constancy of

546
00:21:24,460 --> 00:21:27,309
object dimensions we found five

547
00:21:27,309 --> 00:21:29,140
different versions of the Royal Road

548
00:21:29,140 --> 00:21:31,450
weapon Iser in use in the wild they're

549
00:21:31,450 --> 00:21:35,049
identifiable by their unique object I'm

550
00:21:35,049 --> 00:21:35,679
sorry excuse me

551
00:21:35,679 --> 00:21:37,960
obfuscation gadgets so all five versions

552
00:21:37,960 --> 00:21:40,030
had different obfuscation gadgets that

553
00:21:40,030 --> 00:21:42,429
they utilized they targeted three

554
00:21:42,429 --> 00:21:44,520
different C V's those equation editor

555
00:21:44,520 --> 00:21:46,990
vulnerabilities I just mentioned however

556
00:21:46,990 --> 00:21:49,960
despite the varying obfuscation gadgets

557
00:21:49,960 --> 00:21:51,070
they utilized and the different

558
00:21:51,070 --> 00:21:53,169
vulnerabilities targeted all of the

559
00:21:53,169 --> 00:21:54,880
object dimensions remain constant

560
00:21:54,880 --> 00:21:56,799
through these versions so this is again

561
00:21:56,799 --> 00:21:58,330
the technique that we believe most

562
00:21:58,330 --> 00:22:00,040
successful for identifying different

563
00:22:00,040 --> 00:22:03,429
versions one thing I do want to say is

564
00:22:03,429 --> 00:22:05,290
in our attribution process we did not

565
00:22:05,290 --> 00:22:07,660
rely only on these object dimensions we

566
00:22:07,660 --> 00:22:09,520
utilized metadata to be able to

567
00:22:09,520 --> 00:22:12,010
determine different operating areas

568
00:22:12,010 --> 00:22:14,049
between apts from Mongolia or Central

569
00:22:14,049 --> 00:22:16,050
Asia we used characters

570
00:22:16,050 --> 00:22:17,970
six of shellcodes and payload dropper

571
00:22:17,970 --> 00:22:20,370
methods to discern 8.2 Chinese groups

572
00:22:20,370 --> 00:22:22,650
from the HTA methods utilized by Indian

573
00:22:22,650 --> 00:22:25,080
apt group so we really utilized all of

574
00:22:25,080 --> 00:22:26,850
the four methods across this

575
00:22:26,850 --> 00:22:29,250
presentation to attribute and identify

576
00:22:29,250 --> 00:22:31,350
the different apt samples that this

577
00:22:31,350 --> 00:22:36,060
research was based on okay so the

578
00:22:36,060 --> 00:22:38,580
railroad weaponize er and CV 2018 zero

579
00:22:38,580 --> 00:22:40,350
seven nine eight that's a very good

580
00:22:40,350 --> 00:22:42,960
story that shows how persistent Chinese

581
00:22:42,960 --> 00:22:45,300
actors are or whoever's behind their

582
00:22:45,300 --> 00:22:47,910
oriole Royal Road with manizer so as

583
00:22:47,910 --> 00:22:50,400
Michael said like they have one week

584
00:22:50,400 --> 00:22:53,280
after the batch for 2017 one one eight

585
00:22:53,280 --> 00:22:55,080
eight two was released they started

586
00:22:55,080 --> 00:22:56,460
developing or they released their own

587
00:22:56,460 --> 00:22:58,890
road to open either version one and then

588
00:22:58,890 --> 00:23:02,070
after that zero a co2 was discovered and

589
00:23:02,070 --> 00:23:04,140
in patch was released for it they

590
00:23:04,140 --> 00:23:05,550
developed version two which was

591
00:23:05,550 --> 00:23:06,960
basically exploiting the new

592
00:23:06,960 --> 00:23:09,090
vulnerability and then from one year we

593
00:23:09,090 --> 00:23:10,620
have been seeing a lot of samples

594
00:23:10,620 --> 00:23:12,840
submitted to VT exploiting post

595
00:23:12,840 --> 00:23:15,600
vulnerabilities until I think the early

596
00:23:15,600 --> 00:23:18,390
2019 we started seeing some Royal Road

597
00:23:18,390 --> 00:23:20,790
womaniser samples submitted to VT with

598
00:23:20,790 --> 00:23:23,160
very low detection and our scripts were

599
00:23:23,160 --> 00:23:24,930
not able to attribute it to either of

600
00:23:24,930 --> 00:23:27,270
the two exploits so we started doing

601
00:23:27,270 --> 00:23:29,100
static analysis and we figured out that

602
00:23:29,100 --> 00:23:31,230
they are using a new exploit and we were

603
00:23:31,230 --> 00:23:33,300
not able to attribute it to a certain CV

604
00:23:33,300 --> 00:23:35,580
because we didn't find more information

605
00:23:35,580 --> 00:23:37,080
on it and we had to reach for our

606
00:23:37,080 --> 00:23:38,880
colleagues on Microsoft for help and

607
00:23:38,880 --> 00:23:41,670
they said okay that's CVE 2018 years

608
00:23:41,670 --> 00:23:43,920
seven nine eight and that was very

609
00:23:43,920 --> 00:23:46,260
strange why would they invest time into

610
00:23:46,260 --> 00:23:48,090
developing and you exploit if a new

611
00:23:48,090 --> 00:23:49,950
patch is already working four of them

612
00:23:49,950 --> 00:23:52,650
and we figured out that for the actors

613
00:23:52,650 --> 00:23:54,630
when you use the exploit one one eight

614
00:23:54,630 --> 00:23:56,940
eight two only works with old version of

615
00:23:56,940 --> 00:23:59,820
equation editor while 0a0 works only

616
00:23:59,820 --> 00:24:02,370
with new or the Patchett one after the

617
00:24:02,370 --> 00:24:04,950
one one eight two batch so when they are

618
00:24:04,950 --> 00:24:07,110
explode exploiting a target they have a

619
00:24:07,110 --> 00:24:10,710
50/50 probability of successful

620
00:24:10,710 --> 00:24:13,020
exploitation so they were working for

621
00:24:13,020 --> 00:24:15,240
one year and to finding a new CVE which

622
00:24:15,240 --> 00:24:17,700
is a little bit different because was

623
00:24:17,700 --> 00:24:19,490
with post all civvies they were

624
00:24:19,490 --> 00:24:22,740
vulnerabilities in how equation editor

625
00:24:22,740 --> 00:24:25,080
were parsing the font string name while

626
00:24:25,080 --> 00:24:27,300
this one was in the metrics record

627
00:24:27,300 --> 00:24:30,090
parsing and for this vulnerability

628
00:24:30,090 --> 00:24:31,950
works and all known version of equation

629
00:24:31,950 --> 00:24:33,720
editor which means higher success rate

630
00:24:33,720 --> 00:24:35,820
and thus again shows how resistant they

631
00:24:35,820 --> 00:24:37,679
are and how hard they are working to

632
00:24:37,679 --> 00:24:43,980
make higher success rates okay so now

633
00:24:43,980 --> 00:24:45,059
that we've covered a lot of the

634
00:24:45,059 --> 00:24:46,740
technical methodologies and the

635
00:24:46,740 --> 00:24:48,120
attribution methods let's talk about the

636
00:24:48,120 --> 00:24:49,250
groups that we're actually using these

637
00:24:49,250 --> 00:24:52,080
from beginning in November 2017 to May

638
00:24:52,080 --> 00:24:54,029
20 19 we saw the five different versions

639
00:24:54,029 --> 00:24:56,730
of Royal Road in the wild beginning five

640
00:24:56,730 --> 00:24:59,130
days after the disclosure of CVD 2017

641
00:24:59,130 --> 00:25:01,200
one one eight a two the group believed

642
00:25:01,200 --> 00:25:02,700
to be aligned with the Chinese state

643
00:25:02,700 --> 00:25:05,820
referred to as a PT forty Leviathan also

644
00:25:05,820 --> 00:25:08,580
ten periscope started using a version

645
00:25:08,580 --> 00:25:11,250
one that exploited CVE 2017 one one

646
00:25:11,250 --> 00:25:13,770
eight a to shortly after that time

647
00:25:13,770 --> 00:25:15,750
another group believed to be associated

648
00:25:15,750 --> 00:25:17,039
with the Chinese state primarily

649
00:25:17,039 --> 00:25:19,590
targeting Vietnam Co names in goblin

650
00:25:19,590 --> 00:25:22,110
panda began utilizing that same version

651
00:25:22,110 --> 00:25:24,500
one of royal road identifiable by the

652
00:25:24,500 --> 00:25:27,799
obfuscation gadgets shortly after in

653
00:25:27,799 --> 00:25:31,799
January we saw a new group a group that

654
00:25:31,799 --> 00:25:33,809
some refer to as temp Trident that are

655
00:25:33,809 --> 00:25:35,610
known in different areas for their use

656
00:25:35,610 --> 00:25:38,490
of the ice fog payload ashley Shen from

657
00:25:38,490 --> 00:25:39,659
fireEye has done some great work

658
00:25:39,659 --> 00:25:41,460
tracking the different ice fog clusters

659
00:25:41,460 --> 00:25:43,350
we saw them adopting a Royal Road

660
00:25:43,350 --> 00:25:45,330
version two that had different

661
00:25:45,330 --> 00:25:47,730
obfuscation strings goblin panda shortly

662
00:25:47,730 --> 00:25:50,070
jumped on that version to then something

663
00:25:50,070 --> 00:25:52,020
interesting happened in spring of 2018

664
00:25:52,020 --> 00:25:54,149
for a very short amount of time we saw

665
00:25:54,149 --> 00:25:57,390
two to three samples by a group that is

666
00:25:57,390 --> 00:25:59,760
known as Sidewinder associated with the

667
00:25:59,760 --> 00:26:01,409
Indian state interest primarily

668
00:26:01,409 --> 00:26:04,429
targeting Pakistani defense and military

669
00:26:04,429 --> 00:26:06,539
we're not exactly sure how they got

670
00:26:06,539 --> 00:26:08,549
their hands on version three it is a

671
00:26:08,549 --> 00:26:10,679
very similar version to version two just

672
00:26:10,679 --> 00:26:12,029
with a slightly different obfuscation

673
00:26:12,029 --> 00:26:14,070
gadgets still exploiting one one eight a

674
00:26:14,070 --> 00:26:17,220
two so it's possible it's a fourth party

675
00:26:17,220 --> 00:26:18,990
collection situation we've also broached

676
00:26:18,990 --> 00:26:21,360
the possibility that there is a shared

677
00:26:21,360 --> 00:26:24,029
supplier of these builders selling to

678
00:26:24,029 --> 00:26:26,279
multiple apt groups but anyways after

679
00:26:26,279 --> 00:26:28,110
that point in time we see version four

680
00:26:28,110 --> 00:26:31,620
enter the landscape this is when CB 2018

681
00:26:31,620 --> 00:26:34,590
oh 802 enters the picture a group called

682
00:26:34,590 --> 00:26:37,740
Reaver or Sun or Cal reported by silence

683
00:26:37,740 --> 00:26:40,110
started utilizing this in spring of 2018

684
00:26:40,110 --> 00:26:43,049
and we see goblin Panda and Tim trident

685
00:26:43,049 --> 00:26:44,100
also jump

686
00:26:44,100 --> 00:26:47,280
the version for for quite a while and

687
00:26:47,280 --> 00:26:49,920
then finally version 5 the O 7 9 8 that

688
00:26:49,920 --> 00:26:51,780
Gareeb explains they're adopting new

689
00:26:51,780 --> 00:26:54,150
methods to avoid detection we see a

690
00:26:54,150 --> 00:26:57,300
group known as goblin panda use it first

691
00:26:57,300 --> 00:27:00,440
then another apt that primarily targets

692
00:27:00,440 --> 00:27:02,580
Mongolian geographies referred to as

693
00:27:02,580 --> 00:27:07,080
temp X or ta 428 using a cot X rat

694
00:27:07,080 --> 00:27:09,630
malware payload and then finally Tim

695
00:27:09,630 --> 00:27:14,070
trident adopts Royal Road version 5 one

696
00:27:14,070 --> 00:27:15,330
thing that I do want to state and there

697
00:27:15,330 --> 00:27:16,860
have been other talks here on the Belton

698
00:27:16,860 --> 00:27:19,140
road initiative the areas of operations

699
00:27:19,140 --> 00:27:21,480
for these groups are mapped on here with

700
00:27:21,480 --> 00:27:24,240
blue triangles we believe that it is not

701
00:27:24,240 --> 00:27:25,980
insignificant that all of the areas of

702
00:27:25,980 --> 00:27:27,480
operations as well as some of the themes

703
00:27:27,480 --> 00:27:30,900
have economically motivated and have

704
00:27:30,900 --> 00:27:32,580
some sort of relevance to one of the

705
00:27:32,580 --> 00:27:34,140
operating areas of the Belton Road

706
00:27:34,140 --> 00:27:36,120
initiative so the correlation between

707
00:27:36,120 --> 00:27:38,340
the Belton Road initiative and the Royal

708
00:27:38,340 --> 00:27:43,560
Road RT f weaponize er is significant so

709
00:27:43,560 --> 00:27:45,660
the railroad womaniser usage timeline

710
00:27:45,660 --> 00:27:47,370
Michael have explained was a very good

711
00:27:47,370 --> 00:27:49,410
example of what we called weaponize ER

712
00:27:49,410 --> 00:27:51,810
lifecycle so the two scenarios we have

713
00:27:51,810 --> 00:27:53,820
for the Earl were Road womanizer was

714
00:27:53,820 --> 00:27:56,340
that possibly the Chinese actor have

715
00:27:56,340 --> 00:27:58,350
exploited devolving capabilities and

716
00:27:58,350 --> 00:28:00,120
they were able to develop the weaponize

717
00:28:00,120 --> 00:28:02,610
er and then they handle it first to the

718
00:28:02,610 --> 00:28:05,010
most sophisticated Chinese actor or the

719
00:28:05,010 --> 00:28:07,830
actor who have the more prioritized

720
00:28:07,830 --> 00:28:11,130
objective to the Chinese operators this

721
00:28:11,130 --> 00:28:13,110
actually used it exclusively for a

722
00:28:13,110 --> 00:28:14,910
couple of months until they have version

723
00:28:14,910 --> 00:28:17,130
2 of the exploit then version 1 was

724
00:28:17,130 --> 00:28:19,800
given to the least important actors who

725
00:28:19,800 --> 00:28:21,780
started using it and then the most

726
00:28:21,780 --> 00:28:23,910
sophisticated got version 2 and then

727
00:28:23,910 --> 00:28:26,760
when they got version 3 version 1 got

728
00:28:26,760 --> 00:28:29,910
being given to an Indian actor or sold

729
00:28:29,910 --> 00:28:32,580
to an Indian actor which we have seen

730
00:28:32,580 --> 00:28:35,910
using it too twice and then the cycle

731
00:28:35,910 --> 00:28:37,680
goes on when they have a new version the

732
00:28:37,680 --> 00:28:39,960
old version is being sold out to

733
00:28:39,960 --> 00:28:42,510
commodity malware or cyber criminal and

734
00:28:42,510 --> 00:28:43,950
that's an important point where we

735
00:28:43,950 --> 00:28:46,530
always say we are worried about cyber

736
00:28:46,530 --> 00:28:48,330
weapons and exploit devolve by

737
00:28:48,330 --> 00:28:49,170
state-sponsored

738
00:28:49,170 --> 00:28:51,720
attacks ending out being used by cyber

739
00:28:51,720 --> 00:28:53,670
criminals and commodity malware and then

740
00:28:53,670 --> 00:28:55,170
the cycle goes on whenever they have a

741
00:28:55,170 --> 00:28:57,380
new version the most of scale

742
00:28:57,380 --> 00:28:59,060
get the new version the old one is

743
00:28:59,060 --> 00:29:00,500
handle it to the list substitute it and

744
00:29:00,500 --> 00:29:03,860
the old one is sold to other actors to

745
00:29:03,860 --> 00:29:06,320
summarize the lessons we learn from

746
00:29:06,320 --> 00:29:08,240
tracking the railroad organizer as we

747
00:29:08,240 --> 00:29:10,280
said as we said in the beginning it's

748
00:29:10,280 --> 00:29:11,930
very useful to be able to tag and

749
00:29:11,930 --> 00:29:14,000
attribute webinars it give you higher

750
00:29:14,000 --> 00:29:16,010
visibility on the actors what are their

751
00:29:16,010 --> 00:29:18,080
supply chain what are the connection

752
00:29:18,080 --> 00:29:20,000
between them being able to track role

753
00:29:20,000 --> 00:29:21,980
organizer we found connection between

754
00:29:21,980 --> 00:29:24,470
different Chinese actor we find possible

755
00:29:24,470 --> 00:29:26,150
connection in supply chain between

756
00:29:26,150 --> 00:29:29,060
Indian and Chinese actor and we figured

757
00:29:29,060 --> 00:29:31,220
out that how they work and how they are

758
00:29:31,220 --> 00:29:33,890
improving their exploits and trying to

759
00:29:33,890 --> 00:29:36,920
find new ways for more success rates I

760
00:29:36,920 --> 00:29:38,750
think that's it and we are out of time

761
00:29:38,750 --> 00:29:42,240
so if you have any questions

762
00:29:42,240 --> 00:29:49,829
[Applause]

