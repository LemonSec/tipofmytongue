1
00:00:00,089 --> 00:00:03,210
interesting topic a motet maybe you've

2
00:00:03,210 --> 00:00:05,700
heard about it it's not you will but

3
00:00:05,700 --> 00:00:07,020
that it has been around for a long time

4
00:00:07,020 --> 00:00:08,910
and loose a screw to present some

5
00:00:08,910 --> 00:00:11,450
interesting things about it

6
00:00:11,450 --> 00:00:14,700
greetings everyone my name is Lu tonight

7
00:00:14,700 --> 00:00:17,990
and I'm from supposed nuts from Budapest

8
00:00:17,990 --> 00:00:20,939
I'm working as a threat researcher since

9
00:00:20,939 --> 00:00:24,359
I finished my studies last year and now

10
00:00:24,359 --> 00:00:26,580
I would like to give you an insight into

11
00:00:26,580 --> 00:00:30,269
a Trojan family which is one of the most

12
00:00:30,269 --> 00:00:33,170
destructive and prevalent Marvel

13
00:00:33,170 --> 00:00:35,489
presented in the last couple of some

14
00:00:35,489 --> 00:00:40,410
years in the year of 2013 summer a new

15
00:00:40,410 --> 00:00:42,840
banking mother appeared their eyes

16
00:00:42,840 --> 00:00:45,840
continued in the year of 2014 when

17
00:00:45,840 --> 00:00:48,090
emoted a member of the field of Trojan

18
00:00:48,090 --> 00:00:51,360
family first appeared the first time

19
00:00:51,360 --> 00:00:53,579
probably detected both the female and

20
00:00:53,579 --> 00:00:55,920
the intention of that sample was

21
00:00:55,920 --> 00:00:57,539
completely different from the current

22
00:00:57,539 --> 00:01:00,000
ones as the earlier samples were

23
00:01:00,000 --> 00:01:01,829
designed to steer bang cockin details

24
00:01:01,829 --> 00:01:04,049
that's why this pervert is banking

25
00:01:04,049 --> 00:01:07,430
Trojans these variants were delivered by

26
00:01:07,430 --> 00:01:10,229
spam campaigns targeting German and

27
00:01:10,229 --> 00:01:12,450
Austrian banks so this samples

28
00:01:12,450 --> 00:01:14,490
downloaded a configuration file

29
00:01:14,490 --> 00:01:16,590
including the targeted banks to monitor

30
00:01:16,590 --> 00:01:19,560
and this downloaded a DLL which was

31
00:01:19,560 --> 00:01:22,200
injected into sensitive processes in

32
00:01:22,200 --> 00:01:24,570
order to some API send intercept the

33
00:01:24,570 --> 00:01:28,170
outgoing Network traffic's later that

34
00:01:28,170 --> 00:01:30,659
year in November a new version appeared

35
00:01:30,659 --> 00:01:32,670
and it was improved to a modular

36
00:01:32,670 --> 00:01:35,009
structure so it had a banking module

37
00:01:35,009 --> 00:01:36,869
which was developed to steal money

38
00:01:36,869 --> 00:01:38,640
automatically from the victims bank

39
00:01:38,640 --> 00:01:41,729
account and it had a spambot module

40
00:01:41,729 --> 00:01:45,600
which could log in to the email services

41
00:01:45,600 --> 00:01:47,970
with stolen credential and send out

42
00:01:47,970 --> 00:01:52,189
several spam messages this variant still

43
00:01:52,189 --> 00:01:54,990
focused on a small number of German and

44
00:01:54,990 --> 00:01:59,820
Austrian banks but later in January a

45
00:01:59,820 --> 00:02:02,549
new version appeared and it targeted

46
00:02:02,549 --> 00:02:05,610
Swiss banks this variant focused on

47
00:02:05,610 --> 00:02:07,200
making the torture less visible

48
00:02:07,200 --> 00:02:09,209
so it started using some Antillean

49
00:02:09,209 --> 00:02:11,190
techniques and the strings were

50
00:02:11,190 --> 00:02:13,900
encrypted in the binaries but was

51
00:02:13,900 --> 00:02:16,120
most interesting that I started apply

52
00:02:16,120 --> 00:02:18,959
social engineering tricks in order to

53
00:02:18,959 --> 00:02:21,760
evade two-factor authentication because

54
00:02:21,760 --> 00:02:24,189
it could appear a fake message on the

55
00:02:24,189 --> 00:02:26,860
target website which warned the victim

56
00:02:26,860 --> 00:02:29,920
to a new security system and to a test

57
00:02:29,920 --> 00:02:32,530
transaction which had to be done and the

58
00:02:32,530 --> 00:02:35,200
user had to enter the earlier SMS or

59
00:02:35,200 --> 00:02:38,220
chip transactional identification number

60
00:02:38,220 --> 00:02:41,260
as time went by we haven't seen any

61
00:02:41,260 --> 00:02:43,390
significant campaign only some

62
00:02:43,390 --> 00:02:45,819
occasional attack with DJ phishing

63
00:02:45,819 --> 00:02:49,599
messages which had PDF documents however

64
00:02:49,599 --> 00:02:52,750
and the at the end of 2016 we realized

65
00:02:52,750 --> 00:02:55,450
that a motet was delivered by regex

66
00:02:55,450 --> 00:02:59,980
poetic it after that long break emoted

67
00:02:59,980 --> 00:03:02,200
was back in full force and targeted UK

68
00:03:02,200 --> 00:03:06,040
victims so we have seen several besides

69
00:03:06,040 --> 00:03:08,290
the usual fishing we have seen go to

70
00:03:08,290 --> 00:03:10,750
telecom water from spam messages with

71
00:03:10,750 --> 00:03:15,010
JavaScript drop person what was very

72
00:03:15,010 --> 00:03:17,470
unusual for this type of model that this

73
00:03:17,470 --> 00:03:19,629
very entry left its banking module and

74
00:03:19,629 --> 00:03:21,790
still got other capabilities to

75
00:03:21,790 --> 00:03:23,709
spreading through the local network by a

76
00:03:23,709 --> 00:03:25,989
numerating SME and brute forcing the

77
00:03:25,989 --> 00:03:29,290
credentials and last but not least what

78
00:03:29,290 --> 00:03:31,389
was the most interesting that this

79
00:03:31,389 --> 00:03:33,879
variant started act as a loader for

80
00:03:33,879 --> 00:03:37,419
other tests the right after computing

81
00:03:37,419 --> 00:03:40,030
the UK it arrived to the US so we have

82
00:03:40,030 --> 00:03:40,659
seen

83
00:03:40,659 --> 00:03:43,780
revert documents that had DB macro codes

84
00:03:43,780 --> 00:03:45,729
and that launched the PowerShell script

85
00:03:45,729 --> 00:03:50,290
which was actually downloader and in at

86
00:03:50,290 --> 00:03:54,760
that point we have see that the our

87
00:03:54,760 --> 00:03:56,560
binary was out of dated with high

88
00:03:56,560 --> 00:03:58,780
frequency and it started dropping other

89
00:03:58,780 --> 00:04:03,340
orders in October a new module appeared

90
00:04:03,340 --> 00:04:06,340
and it harvested the email contents not

91
00:04:06,340 --> 00:04:08,169
only the email contact list but the own

92
00:04:08,169 --> 00:04:11,229
email contents as well and in spring of

93
00:04:11,229 --> 00:04:14,199
this year we realized and we found those

94
00:04:14,199 --> 00:04:16,750
in previously stolen email conversation

95
00:04:16,750 --> 00:04:21,959
changed in emoted spam campaigns in

96
00:04:21,959 --> 00:04:25,330
early June this never stopped responding

97
00:04:25,330 --> 00:04:26,750
to infected computers

98
00:04:26,750 --> 00:04:29,060
and during the summer summer it was

99
00:04:29,060 --> 00:04:31,400
unclear whether they retired or just

100
00:04:31,400 --> 00:04:33,110
started working on new features again

101
00:04:33,110 --> 00:04:36,380
but in August some of the server started

102
00:04:36,380 --> 00:04:40,070
working and the frequency of out

103
00:04:40,070 --> 00:04:43,910
updating the binary was increased and in

104
00:04:43,910 --> 00:04:46,310
the middle of September the these

105
00:04:46,310 --> 00:04:48,830
binaries were delivered with heavy spam

106
00:04:48,830 --> 00:04:51,200
campaigns which made limited back into

107
00:04:51,200 --> 00:04:54,260
the spotlight again I would like to

108
00:04:54,260 --> 00:04:56,600
demonstrate how frequently the new

109
00:04:56,600 --> 00:05:00,020
binaries and downloaders appear because

110
00:05:00,020 --> 00:05:03,020
it is virtus and it in mass numbers so

111
00:05:03,020 --> 00:05:04,790
this is the three month observations

112
00:05:04,790 --> 00:05:07,070
right before they went on a break about

113
00:05:07,070 --> 00:05:08,870
this frequency shows similar values

114
00:05:08,870 --> 00:05:09,950
there right now

115
00:05:09,950 --> 00:05:15,520
so on average around 70 new binaries and

116
00:05:15,520 --> 00:05:18,710
vanta was under 70 hundred new

117
00:05:18,710 --> 00:05:20,840
downloaders appeared every day in order

118
00:05:20,840 --> 00:05:24,340
to still have signature based detection

119
00:05:24,340 --> 00:05:27,410
and imitative infectious radius with our

120
00:05:27,410 --> 00:05:30,380
spam campaigns so victim receives a

121
00:05:30,380 --> 00:05:33,890
message that claims to be a invoice of a

122
00:05:33,890 --> 00:05:36,860
bank or telecommunication company even a

123
00:05:36,860 --> 00:05:38,990
Snowden book offer what we had seen

124
00:05:38,990 --> 00:05:41,270
starting here two weeks ago but this

125
00:05:41,270 --> 00:05:44,210
image has a malicious link leading the

126
00:05:44,210 --> 00:05:46,100
victims to the downloader or these

127
00:05:46,100 --> 00:05:48,169
downloaders can be as an attachment as

128
00:05:48,169 --> 00:05:51,880
via so we have seen Word documents PDF

129
00:05:51,880 --> 00:05:54,200
JavaScript what is what we have seen

130
00:05:54,200 --> 00:05:56,360
possible protected zip ties as the

131
00:05:56,360 --> 00:05:59,960
attachment but the most avoid spending

132
00:05:59,960 --> 00:06:02,330
methods when these malicious objects are

133
00:06:02,330 --> 00:06:04,340
interested into an email conversation

134
00:06:04,340 --> 00:06:06,260
thread and as I have mentioned it

135
00:06:06,260 --> 00:06:09,350
happened some time after when the email

136
00:06:09,350 --> 00:06:11,240
harvesting module came into being and

137
00:06:11,240 --> 00:06:15,370
harvested the email contents as well and

138
00:06:15,370 --> 00:06:18,590
in many cases we observe that this

139
00:06:18,590 --> 00:06:21,410
domain name of that malicious link in

140
00:06:21,410 --> 00:06:24,800
the field reply is the same exactly the

141
00:06:24,800 --> 00:06:27,229
same as the Amanda wind of that current

142
00:06:27,229 --> 00:06:29,780
sender and you can see a typical

143
00:06:29,780 --> 00:06:32,570
executor method van this link leads to a

144
00:06:32,570 --> 00:06:35,780
zip file that has a word document and

145
00:06:35,780 --> 00:06:37,789
that word document try to trick the

146
00:06:37,789 --> 00:06:39,260
victim to in

147
00:06:39,260 --> 00:06:41,540
the macro codes these macro pots are

148
00:06:41,540 --> 00:06:43,970
heavily obfuscated with full of chunks

149
00:06:43,970 --> 00:06:46,490
and garbage but the onions it will

150
00:06:46,490 --> 00:06:48,950
result in a partial script which is

151
00:06:48,950 --> 00:06:53,570
actually the downloader the binary

152
00:06:53,570 --> 00:06:55,700
discovers the environment it is running

153
00:06:55,700 --> 00:06:59,360
on so the earlier samples contain the

154
00:06:59,360 --> 00:07:01,970
hard-coded hash list of the VM related

155
00:07:01,970 --> 00:07:04,640
processes process names and these were

156
00:07:04,640 --> 00:07:07,310
compared with the running processes and

157
00:07:07,310 --> 00:07:09,620
in the case they detected the VM they

158
00:07:09,620 --> 00:07:11,960
had a second set of fake IP lists in

159
00:07:11,960 --> 00:07:14,270
order to connect to them unsuccessfully

160
00:07:14,270 --> 00:07:17,390
and mislead the analyst besides a Miam

161
00:07:17,390 --> 00:07:19,520
and antivirus latest files and folders

162
00:07:19,520 --> 00:07:22,040
were detected about some variants were

163
00:07:22,040 --> 00:07:24,650
capable to detect whether they run on a

164
00:07:24,650 --> 00:07:27,080
sandbox environment so they could detect

165
00:07:27,080 --> 00:07:29,690
the most frequently used sandbox related

166
00:07:29,690 --> 00:07:32,630
files combined with user names with

167
00:07:32,630 --> 00:07:35,330
night BIOS name and with permissions for

168
00:07:35,330 --> 00:07:38,000
instance the recent sample sends the

169
00:07:38,000 --> 00:07:40,340
whole process list to the server so this

170
00:07:40,340 --> 00:07:41,990
VM tracking taste based on that server

171
00:07:41,990 --> 00:07:44,510
side and in in the case the VM is

172
00:07:44,510 --> 00:07:47,870
detected at the boat ID or our public IP

173
00:07:47,870 --> 00:07:52,400
block as the modular structure appeared

174
00:07:52,400 --> 00:07:54,950
in Imhotep the process injection started

175
00:07:54,950 --> 00:07:57,290
to be used only by the downloaded

176
00:07:57,290 --> 00:07:59,510
modules so for instance developer

177
00:07:59,510 --> 00:08:02,210
modules which because it's embedded

178
00:08:02,210 --> 00:08:04,370
executable and inject them into another

179
00:08:04,370 --> 00:08:06,650
process and what caught my attention

180
00:08:06,650 --> 00:08:09,890
that some of these wrapper modules used

181
00:08:09,890 --> 00:08:12,380
a technique in order to switch to 64-bit

182
00:08:12,380 --> 00:08:15,140
code execution and the reason of that

183
00:08:15,140 --> 00:08:17,810
was some of these executives and that

184
00:08:17,810 --> 00:08:20,990
didn't these wrappers use the out of

185
00:08:20,990 --> 00:08:23,450
messaging API and in order to harvest

186
00:08:23,450 --> 00:08:26,060
some information from Outlook and the

187
00:08:26,060 --> 00:08:28,610
outlook messaging API is methods and

188
00:08:28,610 --> 00:08:30,650
function calls we have failed in the

189
00:08:30,650 --> 00:08:32,299
case of the installed version of the

190
00:08:32,299 --> 00:08:35,479
Lucas 64-bit and the messaging API using

191
00:08:35,479 --> 00:08:37,549
application is 32 bit process

192
00:08:37,549 --> 00:08:40,460
so this wrappers has a 64 bit version of

193
00:08:40,460 --> 00:08:44,990
this executive bus and in order to avoid

194
00:08:44,990 --> 00:08:47,690
these exit to tables being written to

195
00:08:47,690 --> 00:08:50,090
the disk they rather put more effort to

196
00:08:50,090 --> 00:08:52,769
inject them into a 64 bit process

197
00:08:52,769 --> 00:08:55,079
as these rappers has to switch to 64-bit

198
00:08:55,079 --> 00:08:57,679
code execution in order to manage this

199
00:08:57,679 --> 00:09:00,809
injection so in the picture you can see

200
00:09:00,809 --> 00:09:03,389
a code snippet from these rapper parts

201
00:09:03,389 --> 00:09:07,619
and in order to access the different

202
00:09:07,619 --> 00:09:10,439
code execution is possible from

203
00:09:10,439 --> 00:09:13,379
different code segments so the segment

204
00:09:13,379 --> 00:09:15,809
selector has to be modified that's why

205
00:09:15,809 --> 00:09:17,939
you can see the processor t3 which is

206
00:09:17,939 --> 00:09:20,220
the segment selector of the 64-bit code

207
00:09:20,220 --> 00:09:23,730
execution so the fire return instruction

208
00:09:23,730 --> 00:09:25,799
can specify when the code segments as

209
00:09:25,799 --> 00:09:28,110
well so from the yellow addresses on the

210
00:09:28,110 --> 00:09:30,689
left side those are in fact 64-bit

211
00:09:30,689 --> 00:09:33,239
instructions and can be seen correctly

212
00:09:33,239 --> 00:09:36,689
in a 64-bit disassembler and the recent

213
00:09:36,689 --> 00:09:38,879
mother family started use the technic

214
00:09:38,879 --> 00:09:41,879
again because as you can see this can be

215
00:09:41,879 --> 00:09:45,119
used as an aunty analysis techniques as

216
00:09:45,119 --> 00:09:47,040
the most vulgar disassembler cannot

217
00:09:47,040 --> 00:09:49,589
handle this switch but it can be also

218
00:09:49,589 --> 00:09:53,040
used to evade some hooking based sandbox

219
00:09:53,040 --> 00:09:55,679
or AV products because those may hook

220
00:09:55,679 --> 00:09:58,049
only the 32-bit version of the anti DLL

221
00:09:58,049 --> 00:10:03,449
for both 64 processes I would like to

222
00:10:03,449 --> 00:10:06,929
mention a custom backer which I was

223
00:10:06,929 --> 00:10:09,209
struggling with a lot because it was

224
00:10:09,209 --> 00:10:11,759
different than the other backers used by

225
00:10:11,759 --> 00:10:14,279
motets it could make the flow tracking

226
00:10:14,279 --> 00:10:16,379
much more difficult it was a two-layer

227
00:10:16,379 --> 00:10:19,379
backer and the second layer wrote the

228
00:10:19,379 --> 00:10:21,449
small quadrants in two different memory

229
00:10:21,449 --> 00:10:24,389
blocks so that payload couldn't be

230
00:10:24,389 --> 00:10:26,069
observed as a whole but without putting

231
00:10:26,069 --> 00:10:30,480
some effort to it and you can see this

232
00:10:30,480 --> 00:10:33,779
CC bytes in a picture D which refer to

233
00:10:33,779 --> 00:10:37,019
these memory of these of these payload

234
00:10:37,019 --> 00:10:38,759
chunks in different memory blocks

235
00:10:38,759 --> 00:10:40,049
because those

236
00:10:40,049 --> 00:10:42,389
replace the real upwards and the jump

237
00:10:42,389 --> 00:10:45,119
instructions ensure the proper execution

238
00:10:45,119 --> 00:10:48,049
between the

239
00:10:53,750 --> 00:10:57,780
okay the main functionalities of the

240
00:10:57,780 --> 00:10:59,610
binary are organized into a big

241
00:10:59,610 --> 00:11:00,600
statement

242
00:11:00,600 --> 00:11:02,940
so this core code is not modified

243
00:11:02,940 --> 00:11:05,790
frequently in the case of Amata what has

244
00:11:05,790 --> 00:11:07,770
been changing along the time is that

245
00:11:07,770 --> 00:11:09,840
timing monies which caused the switch

246
00:11:09,840 --> 00:11:12,840
statement periodically so some variants

247
00:11:12,840 --> 00:11:15,300
register hidden window with a callback

248
00:11:15,300 --> 00:11:18,470
function and set a timer for it others

249
00:11:18,470 --> 00:11:21,450
created you for timers that enable

250
00:11:21,450 --> 00:11:23,220
callback function pointing to the switch

251
00:11:23,220 --> 00:11:27,510
statement or recent samples wait until a

252
00:11:27,510 --> 00:11:29,880
specified even owner timeout and these

253
00:11:29,880 --> 00:11:32,670
timeouts are modified in different

254
00:11:32,670 --> 00:11:34,860
branches in order to make the Piazza

255
00:11:34,860 --> 00:11:38,460
random there is also always a zero piece

256
00:11:38,460 --> 00:11:40,410
which is the persistent process creator

257
00:11:40,410 --> 00:11:43,530
block it will generate finding with a

258
00:11:43,530 --> 00:11:46,080
persistent process which is always the

259
00:11:46,080 --> 00:11:48,780
same on that same machine from the same

260
00:11:48,780 --> 00:11:50,550
string list because this should never

261
00:11:50,550 --> 00:11:53,030
find International going to use the

262
00:11:53,030 --> 00:11:55,620
volume serial number of the hard drive

263
00:11:55,620 --> 00:11:57,480
which is always identical on the same

264
00:11:57,480 --> 00:12:01,250
machine and it in this branch it will

265
00:12:01,250 --> 00:12:03,810
copies a description of an other large

266
00:12:03,810 --> 00:12:05,610
service to its newly created this

267
00:12:05,610 --> 00:12:09,260
service in order to looks more legit and

268
00:12:09,260 --> 00:12:12,600
the first kiss is an initialization

269
00:12:12,600 --> 00:12:14,520
block as it has to initialize the

270
00:12:14,520 --> 00:12:16,620
cryptographic key to the network

271
00:12:16,620 --> 00:12:18,900
communication and did not promoted pay

272
00:12:18,900 --> 00:12:22,440
attention to encrypt their communication

273
00:12:22,440 --> 00:12:25,140
properly so it has a email addressed by

274
00:12:25,140 --> 00:12:27,990
a public key and it rates and AES key

275
00:12:27,990 --> 00:12:31,350
here the second case is the main block

276
00:12:31,350 --> 00:12:34,500
this block will run in every periode and

277
00:12:34,500 --> 00:12:37,110
in every period it will collect the

278
00:12:37,110 --> 00:12:39,270
information it will compress them and

279
00:12:39,270 --> 00:12:41,040
encrypt them and sends to the c2 server

280
00:12:41,040 --> 00:12:43,890
and this block also handles the response

281
00:12:43,890 --> 00:12:46,710
from the server the c2 server

282
00:12:46,710 --> 00:12:49,260
communication would based on Google Talk

283
00:12:49,260 --> 00:12:51,540
or buffers so you can see a serialized

284
00:12:51,540 --> 00:12:54,420
protocol buffer message here in its

285
00:12:54,420 --> 00:12:56,250
binary format right before it's

286
00:12:56,250 --> 00:12:58,380
compressed speech he lived and encrypted

287
00:12:58,380 --> 00:13:01,170
so these are the sent information like

288
00:13:01,170 --> 00:13:03,520
the process list

289
00:13:03,520 --> 00:13:07,120
the sum OS information the CRC check sum

290
00:13:07,120 --> 00:13:10,300
of the sample the boat ID which is made

291
00:13:10,300 --> 00:13:12,550
up of a computer name and serial number

292
00:13:12,550 --> 00:13:15,250
and these are the downloaded modules IDs

293
00:13:15,250 --> 00:13:19,300
as well the Sun payload is made up of

294
00:13:19,300 --> 00:13:20,920
the message which was encrypted by the

295
00:13:20,920 --> 00:13:24,220
es key and there is an SVG 1 hash which

296
00:13:24,220 --> 00:13:26,260
is generated every time for validating

297
00:13:26,260 --> 00:13:29,320
the messages and there is the es key

298
00:13:29,320 --> 00:13:31,420
which is encrypted by the RSA public key

299
00:13:31,420 --> 00:13:34,240
so it means if we intercept this packet

300
00:13:34,240 --> 00:13:36,190
in order to decrypt it we should know

301
00:13:36,190 --> 00:13:41,260
the RSA private key or the alias secret

302
00:13:41,260 --> 00:13:43,390
key which is not possible and the

303
00:13:43,390 --> 00:13:45,730
response will contain the AES secret key

304
00:13:45,730 --> 00:13:48,430
as it's not passed net necessary to send

305
00:13:48,430 --> 00:13:50,740
back to the client as the client

306
00:13:50,740 --> 00:13:54,040
generated it and it will but it will

307
00:13:54,040 --> 00:13:56,050
contain the digital signature of that

308
00:13:56,050 --> 00:13:59,020
message so it means in order to accept

309
00:13:59,020 --> 00:14:02,800
both accept message from the server side

310
00:14:02,800 --> 00:14:04,930
that message has to be signed by the

311
00:14:04,930 --> 00:14:13,240
private key of that receiver so here you

312
00:14:13,240 --> 00:14:16,450
can see the IP addresses extracted from

313
00:14:16,450 --> 00:14:19,390
the binaries collected in the beginning

314
00:14:19,390 --> 00:14:22,290
of this year and these IP addresses

315
00:14:22,290 --> 00:14:26,160
locations based on mostly in US Canada

316
00:14:26,160 --> 00:14:31,300
in but in Europe in UK Belgium France

317
00:14:31,300 --> 00:14:34,089
Germany as well and if we observe these

318
00:14:34,089 --> 00:14:38,170
locations these are the most targeted

319
00:14:38,170 --> 00:14:41,410
countries by imitators well and it can

320
00:14:41,410 --> 00:14:44,470
be observed by this Pam campaigns by Al

321
00:14:44,470 --> 00:14:47,320
and from our detection as well so those

322
00:14:47,320 --> 00:14:49,450
are mostly located in here as well and

323
00:14:49,450 --> 00:14:52,810
this similarity wouldn't be by chance if

324
00:14:52,810 --> 00:14:56,680
we suppose that this these victims from

325
00:14:56,680 --> 00:14:58,660
these targeted countries can be the IP

326
00:14:58,660 --> 00:15:01,029
addresses are coding in the binary which

327
00:15:01,029 --> 00:15:03,579
the binary connects to in order to reach

328
00:15:03,579 --> 00:15:06,570
the C 2 servers so it suggested us that

329
00:15:06,570 --> 00:15:09,339
these IP addresses are the infected

330
00:15:09,339 --> 00:15:12,310
victims and function as an additional

331
00:15:12,310 --> 00:15:14,140
layer between the rear seat or servers

332
00:15:14,140 --> 00:15:15,810
but we

333
00:15:15,810 --> 00:15:17,490
there can be and probably there are

334
00:15:17,490 --> 00:15:20,370
other layers between the agency to

335
00:15:20,370 --> 00:15:24,210
servers and the clients before I talk

336
00:15:24,210 --> 00:15:25,980
about the downloaded modules I would

337
00:15:25,980 --> 00:15:27,810
like to mention that it's very often the

338
00:15:27,810 --> 00:15:30,330
case that the response contains only an

339
00:15:30,330 --> 00:15:33,480
updated version of the binary as the CSU

340
00:15:33,480 --> 00:15:34,980
checked some of that sample is sent to

341
00:15:34,980 --> 00:15:37,320
the Seto server that server makes a

342
00:15:37,320 --> 00:15:39,660
simple decision whether Lee plays that

343
00:15:39,660 --> 00:15:42,420
binary or not but let's assume that we

344
00:15:42,420 --> 00:15:44,640
have the latest binary which is

345
00:15:44,640 --> 00:15:46,920
communicating with the server and our

346
00:15:46,920 --> 00:15:49,320
bowtie the public IP is not blocked as a

347
00:15:49,320 --> 00:15:52,500
DVM is not detected then the list of the

348
00:15:52,500 --> 00:15:54,960
latest modules are downloaded and this

349
00:15:54,960 --> 00:15:57,150
can be covered with additional marver as

350
00:15:57,150 --> 00:16:01,260
well but these modules are dealers very

351
00:16:01,260 --> 00:16:04,860
similar area structures and I would

352
00:16:04,860 --> 00:16:06,839
divide it into two groups because half

353
00:16:06,839 --> 00:16:09,210
of the modules image decoding intimidate

354
00:16:09,210 --> 00:16:11,339
executable and inject them into another

355
00:16:11,339 --> 00:16:15,360
process and these executives can be

356
00:16:15,360 --> 00:16:18,000
supported to us like near subtours but

357
00:16:18,000 --> 00:16:20,430
can be own homebrew proprietary executed

358
00:16:20,430 --> 00:16:24,390
versus well this executive is injected

359
00:16:24,390 --> 00:16:26,550
into the arch dot X in in the case of

360
00:16:26,550 --> 00:16:28,680
the installed version of our jockey 64b

361
00:16:28,680 --> 00:16:32,339
and the developer parts of this where

362
00:16:32,339 --> 00:16:34,410
you will they have a scape to switch to

363
00:16:34,410 --> 00:16:37,140
64-bit code execution but in every other

364
00:16:37,140 --> 00:16:40,230
case it will inject into a new instance

365
00:16:40,230 --> 00:16:42,839
of itself which is a little bit weird

366
00:16:42,839 --> 00:16:45,390
but why why not into an other legit

367
00:16:45,390 --> 00:16:47,670
process but my thought would be maybe

368
00:16:47,670 --> 00:16:49,950
because these executives can be like

369
00:16:49,950 --> 00:16:52,260
near soft tools which aren't really the

370
00:16:52,260 --> 00:16:54,870
birth and those may load into a reserved

371
00:16:54,870 --> 00:16:58,020
memory address in the case of picking up

372
00:16:58,020 --> 00:17:01,050
a random process from the system but the

373
00:17:01,050 --> 00:17:01,890
Matata

374
00:17:01,890 --> 00:17:04,589
pay attention to leave those addresses

375
00:17:04,589 --> 00:17:09,900
available there are 2 years of the

376
00:17:09,900 --> 00:17:12,359
executive also used by a method like the

377
00:17:12,359 --> 00:17:14,339
web browser Posse which is a phosphor

378
00:17:14,339 --> 00:17:17,160
recovery tool which scans the bruisers

379
00:17:17,160 --> 00:17:20,280
in order to find deceive passwords and

380
00:17:20,280 --> 00:17:22,709
the may pass you which is the same so

381
00:17:22,709 --> 00:17:24,329
it's a possible recovery tool with the

382
00:17:24,329 --> 00:17:27,569
difference of it scans the email clients

383
00:17:27,569 --> 00:17:29,710
and the most important

384
00:17:29,710 --> 00:17:32,770
email settings can be extracted with it

385
00:17:32,770 --> 00:17:35,590
and this the results of this module will

386
00:17:35,590 --> 00:17:37,990
be used by the spam bot module because

387
00:17:37,990 --> 00:17:42,850
this will be the hijack dobkins there

388
00:17:42,850 --> 00:17:45,610
are two a proprietary executable

389
00:17:45,610 --> 00:17:47,890
appeared last year with the intention of

390
00:17:47,890 --> 00:17:49,660
harvesting the email contact list and

391
00:17:49,660 --> 00:17:53,140
the email contents as well so this uses

392
00:17:53,140 --> 00:17:56,710
the out of messaging API like the you

393
00:17:56,710 --> 00:17:58,390
can see the email contact restructure

394
00:17:58,390 --> 00:18:01,620
results and these addresses are sorted

395
00:18:01,620 --> 00:18:04,090
descending by how often they occur in

396
00:18:04,090 --> 00:18:08,800
the email email conversations and the

397
00:18:08,800 --> 00:18:11,290
recipients from one emails are located

398
00:18:11,290 --> 00:18:12,850
in next to each other in the stem files

399
00:18:12,850 --> 00:18:15,970
and the email content harvest and can

400
00:18:15,970 --> 00:18:19,510
harvest all the emails back to 180 days

401
00:18:19,510 --> 00:18:22,270
with the subject and the body and the

402
00:18:22,270 --> 00:18:27,370
recipients as well as I have mentioned

403
00:18:27,370 --> 00:18:29,230
there is another group of the downloaded

404
00:18:29,230 --> 00:18:31,150
modules which don't have any embodied

405
00:18:31,150 --> 00:18:35,380
executable to inject them they had only

406
00:18:35,380 --> 00:18:37,480
their own home brew Co which is run on

407
00:18:37,480 --> 00:18:39,880
the main process memory and as opposed

408
00:18:39,880 --> 00:18:42,490
to the other modules but I have

409
00:18:42,490 --> 00:18:45,550
explained so far and those were purposed

410
00:18:45,550 --> 00:18:48,400
to information harvesting these main

411
00:18:48,400 --> 00:18:51,160
purpose is the spreading so like the net

412
00:18:51,160 --> 00:18:54,100
first spreading module which scans the

413
00:18:54,100 --> 00:18:56,350
network in order to find the network

414
00:18:56,350 --> 00:18:59,110
resources and it will try to establish a

415
00:18:59,110 --> 00:19:01,630
new session connection to that IPC share

416
00:19:01,630 --> 00:19:05,440
of that victim and this new session

417
00:19:05,440 --> 00:19:07,390
connection doesn't allow for access to

418
00:19:07,390 --> 00:19:09,940
that victim's machine but it can enable

419
00:19:09,940 --> 00:19:11,950
the enumeration and extracting of

420
00:19:11,950 --> 00:19:14,650
information from that account and those

421
00:19:14,650 --> 00:19:16,540
accounts can be brute force by a

422
00:19:16,540 --> 00:19:19,330
hard-coded password list which is

423
00:19:19,330 --> 00:19:22,360
expanded through the years so it's right

424
00:19:22,360 --> 00:19:24,910
now 10,000 passwords around in this

425
00:19:24,910 --> 00:19:26,860
module but when this module first

426
00:19:26,860 --> 00:19:29,830
appeared it was only 300 passwords

427
00:19:29,830 --> 00:19:33,280
embedded in it and after it will gain

428
00:19:33,280 --> 00:19:35,170
persistence on that victim's machine by

429
00:19:35,170 --> 00:19:36,790
the mean of it will create a service

430
00:19:36,790 --> 00:19:40,480
from a copy of itself the next module

431
00:19:40,480 --> 00:19:41,690
uses the

432
00:19:41,690 --> 00:19:43,610
the empty library in order to set up

433
00:19:43,610 --> 00:19:45,980
port forwarding on that gate filter and

434
00:19:45,980 --> 00:19:48,680
the port forwarding is necessary in the

435
00:19:48,680 --> 00:19:51,080
case of setting up a proxy server on

436
00:19:51,080 --> 00:19:54,110
that maka victim machine this module

437
00:19:54,110 --> 00:19:56,960
firstly will create a simple server to

438
00:19:56,960 --> 00:19:59,150
answer to the incoming messages in order

439
00:19:59,150 --> 00:20:01,220
to verify the port forwarding from

440
00:20:01,220 --> 00:20:04,100
outside of the local network and in

441
00:20:04,100 --> 00:20:06,440
order to manage this it will bypass some

442
00:20:06,440 --> 00:20:08,930
fire rules and it will sends information

443
00:20:08,930 --> 00:20:13,190
to the server related to this success of

444
00:20:13,190 --> 00:20:15,860
these settings in order to make the

445
00:20:15,860 --> 00:20:18,080
decision easier to the server whether

446
00:20:18,080 --> 00:20:20,180
setting up a proxy server on that

447
00:20:20,180 --> 00:20:23,930
victim's machine and you can see the

448
00:20:23,930 --> 00:20:25,460
port numbers which are set by this

449
00:20:25,460 --> 00:20:27,710
module and this was what firstly caught

450
00:20:27,710 --> 00:20:29,810
my attention when I analyzed this module

451
00:20:29,810 --> 00:20:33,140
and this lead to figure out the

452
00:20:33,140 --> 00:20:35,390
intention of this module because these

453
00:20:35,390 --> 00:20:37,640
port numbers are exactly the same as the

454
00:20:37,640 --> 00:20:39,470
port numbers belonging to the IP

455
00:20:39,470 --> 00:20:41,720
belonging to the IP addresses or coding

456
00:20:41,720 --> 00:20:43,700
in the binaries which the binary

457
00:20:43,700 --> 00:20:46,640
connects so it again suggested me that

458
00:20:46,640 --> 00:20:49,310
these IP addresses are the infected

459
00:20:49,310 --> 00:20:54,740
victims and the active proxy server the

460
00:20:54,740 --> 00:20:57,970
next module is the spambot module which

461
00:20:57,970 --> 00:21:00,650
firstly before start communicating with

462
00:21:00,650 --> 00:21:03,800
the server in order to ask every

463
00:21:03,800 --> 00:21:06,800
information to these famous switches it

464
00:21:06,800 --> 00:21:09,440
will check whether that IP address of

465
00:21:09,440 --> 00:21:11,390
that victim's machine can be found on

466
00:21:11,390 --> 00:21:13,580
online spam bat lists so it will sends

467
00:21:13,580 --> 00:21:16,280
DNS queries to the most frequently used

468
00:21:16,280 --> 00:21:19,400
on my spam blacklist and in the case

469
00:21:19,400 --> 00:21:21,680
it's not found there it will start

470
00:21:21,680 --> 00:21:24,110
communicating and ask every pieces of

471
00:21:24,110 --> 00:21:27,080
information which are highlighted here

472
00:21:27,080 --> 00:21:30,860
in dark blue and this information were

473
00:21:30,860 --> 00:21:34,010
collected by the other modules but there

474
00:21:34,010 --> 00:21:36,680
is not any connection between the the

475
00:21:36,680 --> 00:21:40,190
connection and between the modules on a

476
00:21:40,190 --> 00:21:43,400
particular machine rather every module

477
00:21:43,400 --> 00:21:45,500
sends the information to the server and

478
00:21:45,500 --> 00:21:47,810
an other bot module via receives the

479
00:21:47,810 --> 00:21:50,330
previously collected information from

480
00:21:50,330 --> 00:21:54,500
other bots so for instance it

481
00:21:54,500 --> 00:21:57,440
receives the recipients if we receive

482
00:21:57,440 --> 00:22:00,740
the account settings which was a

483
00:22:00,740 --> 00:22:02,690
collected Bible may pass you for

484
00:22:02,690 --> 00:22:06,650
instance and the credentials several

485
00:22:06,650 --> 00:22:12,440
settings and it will it will also

486
00:22:12,440 --> 00:22:14,990
receive the template the template can be

487
00:22:14,990 --> 00:22:17,960
a simple direct template that can be an

488
00:22:17,960 --> 00:22:22,700
email conversation thread as well as I

489
00:22:22,700 --> 00:22:24,590
have mentioned in what that can act as a

490
00:22:24,590 --> 00:22:29,500
loader for other tests so it can deliver

491
00:22:29,500 --> 00:22:32,360
banking Trojans but secondly it can

492
00:22:32,360 --> 00:22:34,309
contribute to run Sumerian factions as

493
00:22:34,309 --> 00:22:37,309
well so we have seen several signs for

494
00:22:37,309 --> 00:22:40,130
arrived ransomware encrypted unprotected

495
00:22:40,130 --> 00:22:43,610
servers after trick both were robbed by

496
00:22:43,610 --> 00:22:47,210
emotive and trick bought three port can

497
00:22:47,210 --> 00:22:49,370
bypass security products and can perform

498
00:22:49,370 --> 00:22:54,230
reconnaissance on that network and click

499
00:22:54,230 --> 00:22:57,230
both we demoted seems to be successful

500
00:22:57,230 --> 00:23:00,230
combination in increasing the mass

501
00:23:00,230 --> 00:23:01,909
distribution because imitate is

502
00:23:01,909 --> 00:23:04,970
affecting if spreading to divide area

503
00:23:04,970 --> 00:23:07,700
network by three bodies has other

504
00:23:07,700 --> 00:23:09,679
capabilities spending on the local

505
00:23:09,679 --> 00:23:12,200
network and in later or more runs by

506
00:23:12,200 --> 00:23:14,929
consumer focus on only high volume

507
00:23:14,929 --> 00:23:18,140
profile companies which can export and

508
00:23:18,140 --> 00:23:21,080
can be selected by the with the support

509
00:23:21,080 --> 00:23:24,320
of imitate enteric body capabilities the

510
00:23:24,320 --> 00:23:27,950
other frequently seen attack chain is

511
00:23:27,950 --> 00:23:29,720
made up of a dry text which is dropped

512
00:23:29,720 --> 00:23:31,909
by motor and after a bit premiere on

513
00:23:31,909 --> 00:23:35,150
summer encrypt CD machines in the case

514
00:23:35,150 --> 00:23:37,460
of the micro cortex transformer we also

515
00:23:37,460 --> 00:23:39,710
sing correlations between the emotive

516
00:23:39,710 --> 00:23:42,710
and mega cortex attack but we cannot say

517
00:23:42,710 --> 00:23:45,549
for sure that it was aided by a motet

518
00:23:45,549 --> 00:23:48,980
let me summarize the function of the

519
00:23:48,980 --> 00:23:51,799
effect and the results of our limited

520
00:23:51,799 --> 00:23:54,679
infections since the moment of an user

521
00:23:54,679 --> 00:23:56,960
is infected by a sample so the

522
00:23:56,960 --> 00:23:59,030
information belonging to the user to the

523
00:23:59,030 --> 00:24:00,980
operating system and the machines are

524
00:24:00,980 --> 00:24:03,679
stolen not to mention the safe

525
00:24:03,679 --> 00:24:05,960
credentials from the browsers so it

526
00:24:05,960 --> 00:24:06,980
means maybe the

527
00:24:06,980 --> 00:24:09,210
credentials maybe the Versailles

528
00:24:09,210 --> 00:24:11,399
potentials are stolen and can be

529
00:24:11,399 --> 00:24:14,360
hijacked and reused by other emotive

530
00:24:14,360 --> 00:24:18,390
activities as well that victims machine

531
00:24:18,390 --> 00:24:20,490
will provide spreading capabilities on

532
00:24:20,490 --> 00:24:23,039
that local network and by a brute

533
00:24:23,039 --> 00:24:25,950
forcing the credentials and as the email

534
00:24:25,950 --> 00:24:28,350
address books are stolen it means that

535
00:24:28,350 --> 00:24:30,570
other both receives those email

536
00:24:30,570 --> 00:24:33,720
addresses and the acquaintances of that

537
00:24:33,720 --> 00:24:36,630
victims will receive a spam message in

538
00:24:36,630 --> 00:24:38,970
the name of that victim which contains a

539
00:24:38,970 --> 00:24:42,840
motor downloader as the email of concept

540
00:24:42,840 --> 00:24:44,399
things are stolen that means other both

541
00:24:44,399 --> 00:24:47,640
received was credentials of the concept

542
00:24:47,640 --> 00:24:50,010
things and we are being hijacked and

543
00:24:50,010 --> 00:24:53,549
reused to spam server as spam messages

544
00:24:53,549 --> 00:24:56,370
as the email conversation threads are

545
00:24:56,370 --> 00:24:59,159
stolen that means the Oakland tenses of

546
00:24:59,159 --> 00:25:01,529
that victims were received a fake reply

547
00:25:01,529 --> 00:25:03,600
to that previous of stolen American

548
00:25:03,600 --> 00:25:06,659
versions and by applying that trick that

549
00:25:06,659 --> 00:25:08,159
I have mentioned at the beginning when

550
00:25:08,159 --> 00:25:11,220
this domain name of that URL is exactly

551
00:25:11,220 --> 00:25:14,100
the same as the email domain of the

552
00:25:14,100 --> 00:25:18,110
Quran sender is it's very effective that

553
00:25:18,110 --> 00:25:21,419
victims machine will be capable to send

554
00:25:21,419 --> 00:25:24,029
out several spam message independently

555
00:25:24,029 --> 00:25:26,100
from any other module and independently

556
00:25:26,100 --> 00:25:29,730
from any local information additionally

557
00:25:29,730 --> 00:25:33,120
it that machine can act as a proxy

558
00:25:33,120 --> 00:25:35,730
server and contribute to hiding the use2

559
00:25:35,730 --> 00:25:39,870
servers and besides all these that user

560
00:25:39,870 --> 00:25:42,750
can become easily victim for other

561
00:25:42,750 --> 00:25:45,809
threats as well and concluding these

562
00:25:45,809 --> 00:25:48,870
functions we can see that the spreading

563
00:25:48,870 --> 00:25:51,360
capabilities are dominant and well

564
00:25:51,360 --> 00:25:54,000
developed in the case of a motet and can

565
00:25:54,000 --> 00:25:55,980
support effectively the business model

566
00:25:55,980 --> 00:25:58,649
of emotive as a marvel delivery service

567
00:25:58,649 --> 00:26:01,620
and due to these we have seen Sarah MO

568
00:26:01,620 --> 00:26:04,500
testify messages and the emotive spam

569
00:26:04,500 --> 00:26:06,270
messages made up for the biggest rates

570
00:26:06,270 --> 00:26:10,158
of daily spam messages

571
00:26:11,900 --> 00:26:17,450
so sorry as I have mentioned emoted has

572
00:26:17,450 --> 00:26:20,600
been on our long break and maybe for

573
00:26:20,600 --> 00:26:22,400
some time we thought they really retired

574
00:26:22,400 --> 00:26:25,640
it for good but each time we have seen

575
00:26:25,640 --> 00:26:27,980
that each time they went on a break they

576
00:26:27,980 --> 00:26:30,140
made quite the entrance afterwards they

577
00:26:30,140 --> 00:26:33,650
came back so I in my opinion the most

578
00:26:33,650 --> 00:26:36,320
likely scenario would be that they will

579
00:26:36,320 --> 00:26:39,200
still keep putting it forth to the mass

580
00:26:39,200 --> 00:26:42,350
distribution and as they already started

581
00:26:42,350 --> 00:26:45,500
it again and will keep improving their

582
00:26:45,500 --> 00:26:49,220
spreading capabilities however it's also

583
00:26:49,220 --> 00:26:51,050
a possible case although much less

584
00:26:51,050 --> 00:26:54,770
probable that maybe they will change

585
00:26:54,770 --> 00:26:57,620
their ship of their attack again as they

586
00:26:57,620 --> 00:26:59,540
did in two years ago when they left

587
00:26:59,540 --> 00:27:01,520
their banking more you and there are

588
00:27:01,520 --> 00:27:04,750
other started rock bottom throw trans

589
00:27:04,750 --> 00:27:07,360
thank you very much

590
00:27:07,360 --> 00:27:10,909
[Applause]

