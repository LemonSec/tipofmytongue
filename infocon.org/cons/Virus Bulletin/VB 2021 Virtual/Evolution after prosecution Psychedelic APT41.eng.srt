1
00:00:02,640 --> 00:00:05,819
[Music]

2
00:00:08,639 --> 00:00:10,400
hello everyone

3
00:00:10,400 --> 00:00:14,480
this talk is evolution after prosecution

4
00:00:14,480 --> 00:00:17,359
psychedelic apt-41

5
00:00:17,359 --> 00:00:20,400
we will talk about fpd41's operation in

6
00:00:20,400 --> 00:00:23,119
the past year

7
00:00:23,119 --> 00:00:26,160
we are t5 from taiwan

8
00:00:26,160 --> 00:00:29,840
i'm al gore also a malware researcher

9
00:00:29,840 --> 00:00:31,840
there are three other speakers in this

10
00:00:31,840 --> 00:00:32,880
talk

11
00:00:32,880 --> 00:00:35,600
charles is the chief analyst and cto in

12
00:00:35,600 --> 00:00:37,040
ting tifi

13
00:00:37,040 --> 00:00:40,480
peter and tong are the security engineer

14
00:00:40,480 --> 00:00:44,919
they are good at incident response

15
00:00:45,440 --> 00:00:48,719
our talk is divided into six parts

16
00:00:48,719 --> 00:00:51,840
including initial access cover strike

17
00:00:51,840 --> 00:00:52,879
loader

18
00:00:52,879 --> 00:00:55,360
apd-41 spectral

19
00:00:55,360 --> 00:00:57,680
c2 hiding technique

20
00:00:57,680 --> 00:01:00,160
relation to other operations and

21
00:01:00,160 --> 00:01:02,800
takeaway

22
00:01:03,199 --> 00:01:06,159
the content of apt4dy in this talk is

23
00:01:06,159 --> 00:01:09,880
mainly from september 2020 to august

24
00:01:09,880 --> 00:01:11,760
2021

25
00:01:11,760 --> 00:01:16,159
we won't cover the operation before then

26
00:01:17,280 --> 00:01:20,000
the target countries of apd-41 are

27
00:01:20,000 --> 00:01:22,880
distributed all over the world

28
00:01:22,880 --> 00:01:26,400
especially in the asia-pacific region

29
00:01:26,400 --> 00:01:28,720
we have also observed some attacks in

30
00:01:28,720 --> 00:01:32,000
europe and the united states

31
00:01:32,000 --> 00:01:34,799
as for china we will talk about it in

32
00:01:34,799 --> 00:01:37,920
the next chapter

33
00:01:38,400 --> 00:01:40,880
the target industries are also very

34
00:01:40,880 --> 00:01:43,600
diverse ranging from healthcare

35
00:01:43,600 --> 00:01:45,600
high-tech to major national

36
00:01:45,600 --> 00:01:48,600
infrastructures

37
00:01:50,000 --> 00:01:53,520
after being sued by fbi last year

38
00:01:53,520 --> 00:01:56,640
apt 41 began to use many new attack

39
00:01:56,640 --> 00:01:58,079
techniques

40
00:01:58,079 --> 00:02:01,040
we will introduce them one by one in the

41
00:02:01,040 --> 00:02:04,159
following chapters

42
00:02:04,320 --> 00:02:06,320
in initial access

43
00:02:06,320 --> 00:02:08,479
we have observed that they use print

44
00:02:08,479 --> 00:02:11,520
line mirror in recent attacks

45
00:02:11,520 --> 00:02:14,080
in many ir instruments we found that

46
00:02:14,080 --> 00:02:15,720
they may not use the latest

47
00:02:15,720 --> 00:02:18,239
vulnerabilities to attack

48
00:02:18,239 --> 00:02:21,280
they just use some sql or some web

49
00:02:21,280 --> 00:02:24,640
vulnerabilities to get into the target

50
00:02:24,640 --> 00:02:27,040
they also continue to use some phishing

51
00:02:27,040 --> 00:02:29,840
methods such as using fak flash

52
00:02:29,840 --> 00:02:32,879
installers or phishing emails

53
00:02:32,879 --> 00:02:35,519
like the decoy document on the right

54
00:02:35,519 --> 00:02:38,720
they used kobe 19 related thing to made

55
00:02:38,720 --> 00:02:41,680
a decoy which was targeted at telecom

56
00:02:41,680 --> 00:02:45,040
company in hong kong

57
00:02:45,920 --> 00:02:48,160
we are going to talk about kobo strike

58
00:02:48,160 --> 00:02:51,599
load in this part

59
00:02:51,599 --> 00:02:54,720
in the past year we saw that fbd-41

60
00:02:54,720 --> 00:02:56,640
heavily used cobra strike in their

61
00:02:56,640 --> 00:02:57,840
operation

62
00:02:57,840 --> 00:02:59,599
and they also give involved their

63
00:02:59,599 --> 00:03:01,680
technique to

64
00:03:01,680 --> 00:03:04,480
disseminate kobo strikes and use some

65
00:03:04,480 --> 00:03:07,200
techniques to avoid tracing back to the

66
00:03:07,200 --> 00:03:09,680
real c2ip address

67
00:03:09,680 --> 00:03:10,959
at the beginning

68
00:03:10,959 --> 00:03:13,680
they started to use a load that used the

69
00:03:13,680 --> 00:03:16,720
charger 20 algorithm to encrypt and

70
00:03:16,720 --> 00:03:19,840
decrease the kobo strike

71
00:03:19,840 --> 00:03:22,319
they started to use cdn service and

72
00:03:22,319 --> 00:03:24,480
cloud fair worker under c2

73
00:03:24,480 --> 00:03:29,519
infrastructure since november 2020

74
00:03:29,519 --> 00:03:31,920
and we found they used their hauling

75
00:03:31,920 --> 00:03:34,319
technique and certificate bypass in chat

76
00:03:34,319 --> 00:03:37,840
loader in march this year

77
00:03:37,840 --> 00:03:40,480
and they started to use standard loader

78
00:03:40,480 --> 00:03:46,480
and misused install uto in april 2021

79
00:03:46,480 --> 00:03:49,200
they started to use funny switch loader

80
00:03:49,200 --> 00:03:52,000
to load cable strike and use early code

81
00:03:52,000 --> 00:03:54,959
bird injection technique in order since

82
00:03:54,959 --> 00:03:57,280
june

83
00:03:58,799 --> 00:04:01,200
the name of the child load is from the

84
00:04:01,200 --> 00:04:04,799
charger 20 algorithm it used to decrease

85
00:04:04,799 --> 00:04:06,239
the payload

86
00:04:06,239 --> 00:04:08,799
the loader will load cobra strike or

87
00:04:08,799 --> 00:04:10,319
other vector

88
00:04:10,319 --> 00:04:11,920
child loader also have some

89
00:04:11,920 --> 00:04:14,799
characteristics among different versions

90
00:04:14,799 --> 00:04:16,320
like etf

91
00:04:16,320 --> 00:04:18,238
etw bypass

92
00:04:18,238 --> 00:04:20,639
the halloween and certificate

93
00:04:20,639 --> 00:04:22,960
certificate bypass

94
00:04:22,960 --> 00:04:25,360
below is the config structure before

95
00:04:25,360 --> 00:04:27,759
decrypting by charger 20.

96
00:04:27,759 --> 00:04:29,600
there are nones

97
00:04:29,600 --> 00:04:31,600
crt 32

98
00:04:31,600 --> 00:04:33,919
then of encryption config

99
00:04:33,919 --> 00:04:38,560
cipher text and the encryption key

100
00:04:39,680 --> 00:04:43,199
we have now seen two config structures

101
00:04:43,199 --> 00:04:46,240
which can be identified by their header

102
00:04:46,240 --> 00:04:48,720
respectively

103
00:04:48,720 --> 00:04:51,919
the config on the left has more options

104
00:04:51,919 --> 00:04:55,799
for the theo howie

105
00:04:56,080 --> 00:04:58,320
here is an example of the config

106
00:04:58,320 --> 00:05:01,280
structure before and after decryption of

107
00:05:01,280 --> 00:05:04,400
the chat loader

108
00:05:06,639 --> 00:05:09,199
this is a schematic diagram of the or

109
00:05:09,199 --> 00:05:10,880
howie

110
00:05:10,880 --> 00:05:14,080
the loader will first create a process

111
00:05:14,080 --> 00:05:15,280
sync host

112
00:05:15,280 --> 00:05:18,320
and read the certificate bypassed or

113
00:05:18,320 --> 00:05:19,759
payload

114
00:05:19,759 --> 00:05:23,720
and then find a suitable deal file in

115
00:05:23,720 --> 00:05:28,160
system32 folder starting with alphabet a

116
00:05:28,160 --> 00:05:31,039
which size of the text section can be

117
00:05:31,039 --> 00:05:33,520
inserted by the payload

118
00:05:33,520 --> 00:05:36,479
in this example the file selected by the

119
00:05:36,479 --> 00:05:40,639
loader is aa client data

120
00:05:40,639 --> 00:05:43,600
so the loader will load aa client.dl as

121
00:05:43,600 --> 00:05:46,639
a module into sync host process

122
00:05:46,639 --> 00:05:50,240
and then inject the payload into the

123
00:05:50,240 --> 00:05:54,520
text section of aacrite.dl

124
00:05:55,919 --> 00:05:58,560
judging from the code in child load

125
00:05:58,560 --> 00:06:01,280
we expect that that they should modify

126
00:06:01,280 --> 00:06:04,800
with forest poc code on github

127
00:06:04,800 --> 00:06:08,800
because there are a lot of similarities

128
00:06:08,800 --> 00:06:11,520
if we use process hacker to look at the

129
00:06:11,520 --> 00:06:13,120
injected process

130
00:06:13,120 --> 00:06:15,960
we can see that the text section of

131
00:06:15,960 --> 00:06:20,280
aac.dl is rwx

132
00:06:21,360 --> 00:06:24,240
in the above case they also use another

133
00:06:24,240 --> 00:06:26,800
technique certificate bypass

134
00:06:26,800 --> 00:06:27,680
which

135
00:06:27,680 --> 00:06:32,120
is abuse of ms13-098

136
00:06:32,720 --> 00:06:35,039
to allow them to hide its parallel in

137
00:06:35,039 --> 00:06:38,560
the pe file signature section

138
00:06:38,560 --> 00:06:42,319
we found the parallel file deep egl.dl

139
00:06:42,319 --> 00:06:46,000
has a valid signature

140
00:06:46,000 --> 00:06:48,000
and it has set with certificate

141
00:06:48,000 --> 00:06:50,479
structure and security direct a

142
00:06:50,479 --> 00:06:53,759
bernoulli lodge to hide its malicious

143
00:06:53,759 --> 00:06:55,440
payload

144
00:06:55,440 --> 00:06:57,919
we can also understand this attack

145
00:06:57,919 --> 00:07:00,240
method from the picture below

146
00:07:00,240 --> 00:07:03,280
on the left is a normal nobita which was

147
00:07:03,280 --> 00:07:04,560
a cartoon

148
00:07:04,560 --> 00:07:06,319
character

149
00:07:06,319 --> 00:07:09,120
and has a valid certificate

150
00:07:09,120 --> 00:07:11,440
and the right novita also

151
00:07:11,440 --> 00:07:14,000
has a valid certificate

152
00:07:14,000 --> 00:07:17,360
but he has grown taller

153
00:07:17,360 --> 00:07:18,639
and he

154
00:07:18,639 --> 00:07:23,599
maybe he was inserted by some shellcode

155
00:07:24,240 --> 00:07:28,160
because he has a valid uh certificate so

156
00:07:28,160 --> 00:07:31,759
we may consider he also a very novita if

157
00:07:31,759 --> 00:07:34,720
we are careless

158
00:07:36,479 --> 00:07:39,039
since child order and its variants can

159
00:07:39,039 --> 00:07:42,479
be detected by most security products we

160
00:07:42,479 --> 00:07:45,039
found that they began to use donald load

161
00:07:45,039 --> 00:07:46,240
instead

162
00:07:46,240 --> 00:07:48,879
in some environments with insufficient

163
00:07:48,879 --> 00:07:50,000
protection

164
00:07:50,000 --> 00:07:52,800
we have seen some simple donate loads

165
00:07:52,800 --> 00:07:54,720
in some environments with sufficient

166
00:07:54,720 --> 00:07:55,919
protection

167
00:07:55,919 --> 00:07:59,520
we observed that they use install uto

168
00:07:59,520 --> 00:08:02,479
to legally bring up their download and

169
00:08:02,479 --> 00:08:04,800
the downloader is relatively more

170
00:08:04,800 --> 00:08:07,800
complicated

171
00:08:07,919 --> 00:08:11,199
install uto is a legitimate installer

172
00:08:11,199 --> 00:08:13,280
tool which is a command line utility

173
00:08:13,280 --> 00:08:16,000
that allows you to install and uninstall

174
00:08:16,000 --> 00:08:18,479
server resource by executing the

175
00:08:18,479 --> 00:08:20,800
installer components in

176
00:08:20,800 --> 00:08:23,840
specified assemblies

177
00:08:23,840 --> 00:08:26,240
this tool works in conjunction with

178
00:08:26,240 --> 00:08:28,479
classes in the

179
00:08:28,479 --> 00:08:32,799
system configuration installed namespace

180
00:08:32,799 --> 00:08:36,399
the console utility install uto runs a

181
00:08:36,399 --> 00:08:38,640
malicious standard assembly by passing

182
00:08:38,640 --> 00:08:41,200
the entry point of the assembly

183
00:08:41,200 --> 00:08:43,679
all malicious activity is then hidden in

184
00:08:43,679 --> 00:08:47,440
the context of the trusted process

185
00:08:47,440 --> 00:08:49,440
the donate load

186
00:08:49,440 --> 00:08:52,959
main purpose is to decode the payload

187
00:08:52,959 --> 00:08:55,920
and do the process halloween

188
00:08:55,920 --> 00:08:58,640
to inject the pillow like cobra strike

189
00:08:58,640 --> 00:09:01,680
or other vector

190
00:09:02,240 --> 00:09:06,200
the donate loader he used sha

191
00:09:06,200 --> 00:09:07,760
256

192
00:09:07,760 --> 00:09:12,000
to generate aes key then use nd5 to

193
00:09:12,000 --> 00:09:14,720
generate asiv

194
00:09:14,720 --> 00:09:18,320
and then use aes ecb mode to decrypt the

195
00:09:18,320 --> 00:09:20,560
payload and config

196
00:09:20,560 --> 00:09:23,519
after decryption the parallel and config

197
00:09:23,519 --> 00:09:26,000
it will use the process hollowing

198
00:09:26,000 --> 00:09:28,399
technique to

199
00:09:28,399 --> 00:09:30,000
inject the pedal

200
00:09:30,000 --> 00:09:32,080
and we have seen two versions of the

201
00:09:32,080 --> 00:09:33,519
done builder

202
00:09:33,519 --> 00:09:35,040
and the tables

203
00:09:35,040 --> 00:09:39,040
are there config before and after the

204
00:09:39,040 --> 00:09:41,599
decryption

205
00:09:43,959 --> 00:09:45,519
apd-41

206
00:09:45,519 --> 00:09:48,160
also performed a large-scale scanning on

207
00:09:48,160 --> 00:09:50,480
the gadfish server all over the world

208
00:09:50,480 --> 00:09:51,600
this year

209
00:09:51,600 --> 00:09:54,399
and they use the vulnerable server a c2

210
00:09:54,399 --> 00:09:55,519
server

211
00:09:55,519 --> 00:09:57,360
some of the cobblestride loaders in this

212
00:09:57,360 --> 00:10:00,000
operation will have the pdb string

213
00:10:00,000 --> 00:10:01,680
fishmaster

214
00:10:01,680 --> 00:10:04,560
and some of have abandoned happy happy

215
00:10:04,560 --> 00:10:07,760
happy in their streams

216
00:10:07,760 --> 00:10:10,079
in this operation there are many two

217
00:10:10,079 --> 00:10:12,399
ways to decrypt the pattern

218
00:10:12,399 --> 00:10:14,720
the first one is to use

219
00:10:14,720 --> 00:10:15,760
xor

220
00:10:15,760 --> 00:10:19,360
with the hakko key and the other is to

221
00:10:19,360 --> 00:10:21,680
use uid show code

222
00:10:21,680 --> 00:10:26,560
and execute it through the copy function

223
00:10:28,320 --> 00:10:30,800
we have also observed that they will use

224
00:10:30,800 --> 00:10:33,519
the load of funny switch to distribute

225
00:10:33,519 --> 00:10:35,279
the kobo strike

226
00:10:35,279 --> 00:10:37,600
the name of funny switch is mentioned in

227
00:10:37,600 --> 00:10:40,160
the pt security report

228
00:10:40,160 --> 00:10:43,440
recently we have speculate that such

229
00:10:43,440 --> 00:10:45,279
load may be attacking

230
00:10:45,279 --> 00:10:49,200
my cafe users from the file name

231
00:10:49,200 --> 00:10:50,560
and from the

232
00:10:50,560 --> 00:10:53,920
uh the pdb string because the pdb string

233
00:10:53,920 --> 00:10:56,320
here is mccoffee

234
00:10:56,320 --> 00:11:01,160
yeah he pronounced like my coffee

235
00:11:02,800 --> 00:11:05,920
and recently we have also observed a new

236
00:11:05,920 --> 00:11:09,360
loader which is modified from open

237
00:11:09,360 --> 00:11:10,320
source

238
00:11:10,320 --> 00:11:14,079
uh a lot raised loader which directly

239
00:11:14,079 --> 00:11:18,399
use this code to execute the payload

240
00:11:18,399 --> 00:11:20,959
and there are also many version of this

241
00:11:20,959 --> 00:11:22,160
loader

242
00:11:22,160 --> 00:11:24,640
in these versions there are some

243
00:11:24,640 --> 00:11:26,399
different features

244
00:11:26,399 --> 00:11:28,800
such as using rc4

245
00:11:28,800 --> 00:11:31,519
to decode the pillow from the resource

246
00:11:31,519 --> 00:11:32,800
picture

247
00:11:32,800 --> 00:11:35,839
or using detour

248
00:11:35,839 --> 00:11:39,920
one of microsoft library to hook the

249
00:11:39,920 --> 00:11:42,480
free library of the launcher

250
00:11:42,480 --> 00:11:44,720
and

251
00:11:44,800 --> 00:11:47,360
you are using early vertical injection

252
00:11:47,360 --> 00:11:52,800
technique to bypass some edr detection

253
00:11:53,920 --> 00:11:56,320
and finishing the cover short loader in

254
00:11:56,320 --> 00:11:58,959
next section we will talk about

255
00:11:58,959 --> 00:12:02,800
some lbd4 d1s backdoor

256
00:12:02,839 --> 00:12:05,920
ape-41 still using some old backdoor

257
00:12:05,920 --> 00:12:06,959
like

258
00:12:06,959 --> 00:12:08,079
high noon

259
00:12:08,079 --> 00:12:10,399
shadow paint and progress

260
00:12:10,399 --> 00:12:14,880
during 2020 to 2021 but also using some

261
00:12:14,880 --> 00:12:18,399
new backdoor like rb rate or

262
00:12:18,399 --> 00:12:22,240
network or spider

263
00:12:22,560 --> 00:12:25,120
and the first vector we want to is to

264
00:12:25,120 --> 00:12:27,519
introduce is error root

265
00:12:27,519 --> 00:12:30,720
uh the error root is a uh the sample

266
00:12:30,720 --> 00:12:33,600
backdoor and we found a new version in

267
00:12:33,600 --> 00:12:39,560
2021 it has a pdb string js.pdf

268
00:12:39,600 --> 00:12:43,839
and we first saw error root is in

269
00:12:43,839 --> 00:12:45,680
2019.

270
00:12:45,680 --> 00:12:48,320
it doesn't have much documentation

271
00:12:48,320 --> 00:12:49,760
before

272
00:12:49,760 --> 00:12:53,360
errol root used http api to create

273
00:12:53,360 --> 00:12:56,720
create an http server and then add

274
00:12:56,720 --> 00:13:00,000
this url to the url group

275
00:13:00,000 --> 00:13:02,399
of the server to enable the server to

276
00:13:02,399 --> 00:13:04,880
open port 80

277
00:13:04,880 --> 00:13:08,160
and the plus is a strong webcast which

278
00:13:08,160 --> 00:13:10,399
means that the server will process all

279
00:13:10,399 --> 00:13:14,240
domains or ips connecting to this host

280
00:13:14,240 --> 00:13:16,720
if the format of package which

281
00:13:16,720 --> 00:13:19,519
connecting to the error route is run the

282
00:13:19,519 --> 00:13:24,240
server will send a unique error message

283
00:13:24,480 --> 00:13:26,079
like this

284
00:13:26,079 --> 00:13:30,000
so we call this backdoor arrow root

285
00:13:30,000 --> 00:13:33,680
and this backdoor can just use curl to

286
00:13:33,680 --> 00:13:35,920
send the instruction

287
00:13:35,920 --> 00:13:38,079
and this is the

288
00:13:38,079 --> 00:13:40,639
example of the

289
00:13:40,639 --> 00:13:43,519
curl command

290
00:13:44,079 --> 00:13:49,479
and this is the command of error root

291
00:13:50,800 --> 00:13:52,720
we found a new red

292
00:13:52,720 --> 00:13:55,279
used by apd-41 last year

293
00:13:55,279 --> 00:13:57,760
since there is a prefix

294
00:13:57,760 --> 00:14:01,360
rb in some functions

295
00:14:01,360 --> 00:14:03,600
like this like this

296
00:14:03,600 --> 00:14:06,639
so we named it rb red

297
00:14:06,639 --> 00:14:09,360
and it is different from rb door which

298
00:14:09,360 --> 00:14:12,639
was also used by apd41 but have some

299
00:14:12,639 --> 00:14:15,680
relations we will talk about later

300
00:14:15,680 --> 00:14:18,079
and it will show the

301
00:14:18,079 --> 00:14:21,040
versions on its mutex like

302
00:14:21,040 --> 00:14:25,240
google updater 1.0.1

303
00:14:25,760 --> 00:14:28,560
and it will use wind divert for pro

304
00:14:28,560 --> 00:14:30,440
reuse in version

305
00:14:30,440 --> 00:14:32,079
1.0.2

306
00:14:32,079 --> 00:14:34,160
wind diver has been added to their

307
00:14:34,160 --> 00:14:35,680
import table

308
00:14:35,680 --> 00:14:39,040
as for 1.0.1 version

309
00:14:39,040 --> 00:14:41,120
though we did not find such feature

310
00:14:41,120 --> 00:14:43,680
however we did observe wind divert on

311
00:14:43,680 --> 00:14:46,240
that infected host

312
00:14:46,240 --> 00:14:49,120
before executing the vector function it

313
00:14:49,120 --> 00:14:51,760
will first add some firewall rules for

314
00:14:51,760 --> 00:14:54,560
wind divert

315
00:14:55,519 --> 00:14:58,240
rb red also has the matching number for

316
00:14:58,240 --> 00:15:00,399
package like obvi door

317
00:15:00,399 --> 00:15:02,399
but different from the matching number

318
00:15:02,399 --> 00:15:04,399
before

319
00:15:04,399 --> 00:15:08,079
the matrix number uh in rp red we have

320
00:15:08,079 --> 00:15:09,519
seen is

321
00:15:09,519 --> 00:15:11,360
this and this

322
00:15:11,360 --> 00:15:14,240
but the arby door in

323
00:15:14,240 --> 00:15:16,560
this github

324
00:15:16,560 --> 00:15:20,560
give us is this they are different

325
00:15:20,560 --> 00:15:23,920
and in the shell command of the rb rate

326
00:15:23,920 --> 00:15:26,560
we saw some similarities with another

327
00:15:26,560 --> 00:15:30,079
open source tool uh quick kate

328
00:15:30,079 --> 00:15:33,519
so we speculate that maybe revised

329
00:15:33,519 --> 00:15:36,079
from then

330
00:15:36,880 --> 00:15:40,880
and here is another new vector we called

331
00:15:40,880 --> 00:15:44,000
network it was dropped by chad dodger

332
00:15:44,000 --> 00:15:46,399
and he it was a

333
00:15:46,399 --> 00:15:49,040
shellcode based vector

334
00:15:49,040 --> 00:15:52,480
it was first seen in

335
00:15:52,480 --> 00:15:53,399
march

336
00:15:53,399 --> 00:15:57,759
2021 and first thing on price total in

337
00:15:57,759 --> 00:16:01,240
july 2021

338
00:16:01,279 --> 00:16:02,440
network

339
00:16:02,440 --> 00:16:05,279
dynamically resolves the imports in a

340
00:16:05,279 --> 00:16:09,120
function with almost 150 if codes

341
00:16:09,120 --> 00:16:12,000
it creates a table of the windows api

342
00:16:12,000 --> 00:16:15,360
and use register plus of c

343
00:16:15,360 --> 00:16:18,639
to code the api function to make the

344
00:16:18,639 --> 00:16:20,959
analyze more complex

345
00:16:20,959 --> 00:16:23,440
this technique has also used by

346
00:16:23,440 --> 00:16:25,279
crosswork

347
00:16:25,279 --> 00:16:28,560
after dynamically resolving the api it

348
00:16:28,560 --> 00:16:32,000
will first check if all user profile ut

349
00:16:32,000 --> 00:16:36,720
xp nat directory is exist if not

350
00:16:36,720 --> 00:16:39,040
it will create that directory if the

351
00:16:39,040 --> 00:16:42,079
directory is exists it will try to read

352
00:16:42,079 --> 00:16:45,279
some file in that directory and use nd5

353
00:16:45,279 --> 00:16:48,240
and charger 20 to decode it

354
00:16:48,240 --> 00:16:51,120
so we name the backdoor network from the

355
00:16:51,120 --> 00:16:52,720
paddle pad

356
00:16:52,720 --> 00:16:55,279
an at

357
00:16:55,279 --> 00:16:57,519
there are two transport protocols for

358
00:16:57,519 --> 00:17:00,800
network the first is raw tcp socket you

359
00:17:00,800 --> 00:17:02,880
can see in this picture

360
00:17:02,880 --> 00:17:05,599
and the other is https

361
00:17:05,599 --> 00:17:08,640
in a pulse request to c2 server there

362
00:17:08,640 --> 00:17:11,039
are two elements in the header

363
00:17:11,039 --> 00:17:15,359
gtx id was generated by cryptogen render

364
00:17:15,359 --> 00:17:19,199
and gtu vid was generated by crypt gen

365
00:17:19,199 --> 00:17:22,720
rendering and nd5 operation

366
00:17:22,720 --> 00:17:27,039
they are different in every request

367
00:17:27,039 --> 00:17:29,760
and the message between c2 server are

368
00:17:29,760 --> 00:17:33,679
included by charger 20 and md5

369
00:17:33,679 --> 00:17:36,160
in the cnc command handler

370
00:17:36,160 --> 00:17:38,320
network creates a message queue using

371
00:17:38,320 --> 00:17:39,919
the peak message

372
00:17:39,919 --> 00:17:41,440
wapi

373
00:17:41,440 --> 00:17:43,760
after receiving the message the message

374
00:17:43,760 --> 00:17:46,960
will also decoded by md5 and charger 20

375
00:17:46,960 --> 00:17:51,039
and pause to the command handler

376
00:17:52,080 --> 00:17:53,280
and we have

377
00:17:53,280 --> 00:17:54,640
found some

378
00:17:54,640 --> 00:17:55,919
connection

379
00:17:55,919 --> 00:17:58,000
between network and the

380
00:17:58,000 --> 00:17:59,760
crosswork

381
00:17:59,760 --> 00:18:01,200
the first one

382
00:18:01,200 --> 00:18:04,799
is they are both use register plus

383
00:18:04,799 --> 00:18:07,200
offset to call the windows api in the

384
00:18:07,200 --> 00:18:08,880
shell code

385
00:18:08,880 --> 00:18:11,840
and the second is the

386
00:18:11,840 --> 00:18:15,360
their first command code are both

387
00:18:15,360 --> 00:18:18,360
0x64

388
00:18:18,480 --> 00:18:22,480
but the commands are very different

389
00:18:23,520 --> 00:18:25,840
and there is another similarity between

390
00:18:25,840 --> 00:18:28,880
network and crosswalk which we have some

391
00:18:28,880 --> 00:18:32,080
top domain streams like microsoft and

392
00:18:32,080 --> 00:18:34,559
google.com

393
00:18:34,559 --> 00:18:37,120
on the right is the comment of network

394
00:18:37,120 --> 00:18:39,200
we don't know all the comments yet if

395
00:18:39,200 --> 00:18:41,440
anyone know the unknown comment please

396
00:18:41,440 --> 00:18:44,160
share with us

397
00:18:45,679 --> 00:18:47,679
we have found a new load that will

398
00:18:47,679 --> 00:18:49,440
inject bot deal

399
00:18:49,440 --> 00:18:51,600
a new version of high noon red into

400
00:18:51,600 --> 00:18:52,640
memory

401
00:18:52,640 --> 00:18:54,720
the loader have two version

402
00:18:54,720 --> 00:18:56,799
the main difference is the decryption

403
00:18:56,799 --> 00:18:58,000
algorithm

404
00:18:58,000 --> 00:19:01,520
one will use dpe api to decrease pedal

405
00:19:01,520 --> 00:19:04,720
and another use aes

406
00:19:04,720 --> 00:19:06,960
and the wind diverter dl was also

407
00:19:06,960 --> 00:19:10,720
embedded in the body of 64.0

408
00:19:10,720 --> 00:19:14,559
the wind diver deal can capture packets

409
00:19:14,559 --> 00:19:18,799
and listening port while wind diver does

410
00:19:18,799 --> 00:19:22,240
sits in the kernel mode

411
00:19:22,400 --> 00:19:26,080
you can see last stop-bot string in both

412
00:19:26,080 --> 00:19:27,280
version

413
00:19:27,280 --> 00:19:29,280
we think that called the new version of

414
00:19:29,280 --> 00:19:32,559
high noon as a bot the error

415
00:19:32,559 --> 00:19:36,880
the loader which use dpi dp api

416
00:19:36,880 --> 00:19:39,360
technique has a pdb string

417
00:19:39,360 --> 00:19:42,320
middle 64. pdb

418
00:19:42,320 --> 00:19:44,799
the new version of high noon will choose

419
00:19:44,799 --> 00:19:47,919
the kernel driver according to the dw

420
00:19:47,919 --> 00:19:50,080
minor version of windows

421
00:19:50,080 --> 00:19:52,799
if it is more than two it will choose

422
00:19:52,799 --> 00:19:55,520
wind divert

423
00:19:55,600 --> 00:19:58,400
a command of high noon is still same as

424
00:19:58,400 --> 00:20:00,880
the version mentioned by mechanical in

425
00:20:00,880 --> 00:20:02,320
2018

426
00:20:02,320 --> 00:20:06,039
it has five convents

427
00:20:06,880 --> 00:20:11,200
in 2021 apd-41 still using funny switch

428
00:20:11,200 --> 00:20:13,760
which was a vector written in dotnet and

429
00:20:13,760 --> 00:20:17,039
have mentioned in pd security's report

430
00:20:17,039 --> 00:20:19,919
it will first decode stage 1 shell code

431
00:20:19,919 --> 00:20:22,960
in memory and the first stage 1 show

432
00:20:22,960 --> 00:20:25,760
code will use xor to decrease stage 2

433
00:20:25,760 --> 00:20:28,320
shell code and funny deal in memory

434
00:20:28,320 --> 00:20:30,960
the main purpose of stage 2 shellcode is

435
00:20:30,960 --> 00:20:33,520
to run the donate pe in the

436
00:20:33,520 --> 00:20:35,120
memory

437
00:20:35,120 --> 00:20:37,919
after the funny deal was running in the

438
00:20:37,919 --> 00:20:40,799
memory it will decrease the config and

439
00:20:40,799 --> 00:20:43,679
js module for the command and here is

440
00:20:43,679 --> 00:20:44,880
the

441
00:20:44,880 --> 00:20:47,840
example of the configuration of funny

442
00:20:47,840 --> 00:20:50,000
deal

443
00:20:50,000 --> 00:20:52,880
in 2020 the config of funny deal is

444
00:20:52,880 --> 00:20:56,480
plain text in the load but in 2021 the

445
00:20:56,480 --> 00:20:58,559
config was encrypted

446
00:20:58,559 --> 00:20:59,360
and

447
00:20:59,360 --> 00:21:01,679
we are decrypted by funny that code are

448
00:21:01,679 --> 00:21:04,960
run in funny deal function

449
00:21:04,960 --> 00:21:05,760
which

450
00:21:05,760 --> 00:21:06,720
use

451
00:21:06,720 --> 00:21:08,400
aes and

452
00:21:08,400 --> 00:21:10,559
base64 to

453
00:21:10,559 --> 00:21:12,240
decode

454
00:21:12,240 --> 00:21:15,120
and the command protocol and js module

455
00:21:15,120 --> 00:21:20,000
are same as 2020 version

456
00:21:20,559 --> 00:21:23,280
and starting from 2020 the shadow page

457
00:21:23,280 --> 00:21:26,400
used by apd-41 is a new build

458
00:21:26,400 --> 00:21:28,400
this builder was also mentioned in the

459
00:21:28,400 --> 00:21:30,400
pt securities report

460
00:21:30,400 --> 00:21:33,840
which use new obfuscation and decryption

461
00:21:33,840 --> 00:21:34,880
methods

462
00:21:34,880 --> 00:21:36,960
but we think this builder should be a

463
00:21:36,960 --> 00:21:39,679
shell tool because we have also seen the

464
00:21:39,679 --> 00:21:42,720
nikon team use this builder too this is

465
00:21:42,720 --> 00:21:46,000
the antivire hedge of that builder used

466
00:21:46,000 --> 00:21:48,400
by nikon team

467
00:21:48,400 --> 00:21:50,480
the following code is the method to

468
00:21:50,480 --> 00:21:52,720
decrypt the string of the configuration

469
00:21:52,720 --> 00:21:55,679
in the new builder

470
00:21:56,159 --> 00:21:58,720
and here is an example of the config of

471
00:21:58,720 --> 00:22:02,880
the new builder of the shadow pad

472
00:22:04,159 --> 00:22:06,320
and this part we are going to talk about

473
00:22:06,320 --> 00:22:09,679
some c2 heightened hiding technique

474
00:22:09,679 --> 00:22:11,039
used by

475
00:22:11,039 --> 00:22:13,919
mbdv1

476
00:22:13,919 --> 00:22:16,640
we have seen that fpd41 tried to use

477
00:22:16,640 --> 00:22:19,760
crowdfare cdn or other cdn service for

478
00:22:19,760 --> 00:22:21,440
cobblestrike a lot

479
00:22:21,440 --> 00:22:23,919
since november 2020

480
00:22:23,919 --> 00:22:28,000
in https because they directly use cdn

481
00:22:28,000 --> 00:22:30,919
service like the domain here micro

482
00:22:30,919 --> 00:22:32,480
google.ml

483
00:22:32,480 --> 00:22:36,240
the resolve iprocdnip

484
00:22:36,240 --> 00:22:39,520
and in dns beacon we can usually use an

485
00:22:39,520 --> 00:22:42,960
s breaker to test back the real c2ip but

486
00:22:42,960 --> 00:22:45,840
in some cases we can repeat the method

487
00:22:45,840 --> 00:22:47,120
for example

488
00:22:47,120 --> 00:22:48,960
like this document

489
00:22:48,960 --> 00:22:51,960
uns.l01.tk

490
00:22:52,159 --> 00:22:55,520
which used in 2021 was proclaimed at uh

491
00:22:55,520 --> 00:22:57,440
airport airport m.a

492
00:22:57,440 --> 00:23:00,000
but we can use the uns wrecker to

493
00:23:00,000 --> 00:23:04,159
transpect and find the real c2 ipq

494
00:23:04,159 --> 00:23:07,760
but in some cases like the dsb current

495
00:23:07,760 --> 00:23:09,840
y

496
00:23:10,320 --> 00:23:12,960
it didn't have any resolve ip and also

497
00:23:12,960 --> 00:23:16,159
didn't have any ns record so we can use

498
00:23:16,159 --> 00:23:18,559
the same way to trace back the real

499
00:23:18,559 --> 00:23:21,360
single ip address

500
00:23:21,360 --> 00:23:23,520
another interesting thing is that we

501
00:23:23,520 --> 00:23:25,679
found that they usually park their c2

502
00:23:25,679 --> 00:23:29,039
domain on some specific ip like

503
00:23:29,039 --> 00:23:32,039
8.8.8.251

504
00:23:34,960 --> 00:23:38,799
and six since january 2020 we have seen

505
00:23:38,799 --> 00:23:41,200
the used crowdfare workers

506
00:23:41,200 --> 00:23:44,559
as a redirector to hide the real c2ip

507
00:23:44,559 --> 00:23:47,440
therefore he can only see the connection

508
00:23:47,440 --> 00:23:50,480
with the crowdfare ip in the victim host

509
00:23:50,480 --> 00:23:52,880
which not only causes difficulties in

510
00:23:52,880 --> 00:23:55,039
chasing but also adds some difficulties

511
00:23:55,039 --> 00:23:57,200
to blocking

512
00:23:57,200 --> 00:23:59,440
in addition to cover strike other

513
00:23:59,440 --> 00:24:01,840
backdoors c2 have also been used with

514
00:24:01,840 --> 00:24:04,480
such technique for example

515
00:24:04,480 --> 00:24:08,640
this c2 domain was used by network

516
00:24:08,640 --> 00:24:11,120
we can just get the cloudflare ip from

517
00:24:11,120 --> 00:24:14,239
this situ domain

518
00:24:14,640 --> 00:24:16,000
and

519
00:24:16,000 --> 00:24:18,400
the last part we are going to

520
00:24:18,400 --> 00:24:20,320
talk about some relation

521
00:24:20,320 --> 00:24:21,919
uh

522
00:24:21,919 --> 00:24:26,640
operation uh to apd-41

523
00:24:26,960 --> 00:24:31,440
at the beginning uh fishmaster also

524
00:24:31,440 --> 00:24:36,159
called thu 22 by recorded future

525
00:24:36,159 --> 00:24:39,600
their uh fishmaster loader and c2 could

526
00:24:39,600 --> 00:24:42,000
not be directly connected to

527
00:24:42,000 --> 00:24:45,200
mpd41 first but we have seen some

528
00:24:45,200 --> 00:24:47,679
correlation in recent samples

529
00:24:47,679 --> 00:24:50,080
the starting point is that the funny

530
00:24:50,080 --> 00:24:52,240
switch and our shadow pace sample we

531
00:24:52,240 --> 00:24:53,120
found

532
00:24:53,120 --> 00:24:55,520
the pdb string of the funny switch allow

533
00:24:55,520 --> 00:24:57,200
us to connect

534
00:24:57,200 --> 00:24:59,360
to another sample

535
00:24:59,360 --> 00:25:00,720
which also

536
00:25:00,720 --> 00:25:03,919
a funny switch load but the parallel

537
00:25:03,919 --> 00:25:05,600
is cobol strike

538
00:25:05,600 --> 00:25:08,000
and the c2 of this cable strike can be

539
00:25:08,000 --> 00:25:11,120
directly connected to another fishmaster

540
00:25:11,120 --> 00:25:12,080
sample

541
00:25:12,080 --> 00:25:16,320
and the cobalt strike though by fun uh

542
00:25:16,320 --> 00:25:17,760
uh

543
00:25:17,760 --> 00:25:19,919
the the cobblestone lobe by finding

544
00:25:19,919 --> 00:25:23,400
switch has a specific uh xor key for the

545
00:25:23,400 --> 00:25:27,440
configuration it's a little x3a

546
00:25:27,440 --> 00:25:29,679
and from this uh

547
00:25:29,679 --> 00:25:32,640
super specific parallel we can connect

548
00:25:32,640 --> 00:25:34,880
with another cobalt strike parallel and

549
00:25:34,880 --> 00:25:38,720
this cable strike payload c2 is this

550
00:25:38,720 --> 00:25:43,039
and with this ip we can connect to an

551
00:25:43,039 --> 00:25:47,120
another fishmaster sample

552
00:25:47,120 --> 00:25:49,919
and the situ of the sample we found in

553
00:25:49,919 --> 00:25:52,320
the ir keys is also related to the

554
00:25:52,320 --> 00:25:55,679
fishmaster sample the subdomain of the

555
00:25:55,679 --> 00:25:59,440
c2io wikimedia.vip

556
00:25:59,440 --> 00:26:02,080
so this course make us believe the

557
00:26:02,080 --> 00:26:07,720
fishmaster operation is done by apd-41

558
00:26:08,640 --> 00:26:11,200
and in the beginning of 2020 we

559
00:26:11,200 --> 00:26:13,520
discovered that kobo strike and high

560
00:26:13,520 --> 00:26:17,760
noon appear together in two our uh ir

561
00:26:17,760 --> 00:26:18,720
cases

562
00:26:18,720 --> 00:26:20,320
one of c2

563
00:26:20,320 --> 00:26:23,600
is this domain and another c2 is this

564
00:26:23,600 --> 00:26:24,400
domain

565
00:26:24,400 --> 00:26:27,919
and the two c2 domain both resolve to

566
00:26:27,919 --> 00:26:29,159
this ip

567
00:26:29,159 --> 00:26:30,720
66

568
00:26:30,720 --> 00:26:33,279
and then from this ips

569
00:26:33,279 --> 00:26:36,080
ips certificate

570
00:26:36,080 --> 00:26:40,000
well we can link to another four ips

571
00:26:40,000 --> 00:26:42,480
uh also have kobo strike c2 domain

572
00:26:42,480 --> 00:26:45,120
resolution records

573
00:26:45,120 --> 00:26:47,480
and one of these ip

574
00:26:47,480 --> 00:26:49,200
149.

575
00:26:49,200 --> 00:26:51,279
it's past dna

576
00:26:51,279 --> 00:26:52,400
six-man

577
00:26:52,400 --> 00:26:55,679
this domain also mentioned in race iq's

578
00:26:55,679 --> 00:26:56,960
report

579
00:26:56,960 --> 00:26:58,880
which they said it may have some

580
00:26:58,880 --> 00:27:01,840
connection to goblin panda

581
00:27:01,840 --> 00:27:04,480
and one of the past years of the situ

582
00:27:04,480 --> 00:27:05,600
document

583
00:27:05,600 --> 00:27:09,000
the ip45.176

584
00:27:09,440 --> 00:27:11,520
can relate to another domain

585
00:27:11,520 --> 00:27:13,600
chalkmywire.org

586
00:27:13,600 --> 00:27:16,320
and this domain has been using an rtf

587
00:27:16,320 --> 00:27:18,840
sample security audit template

588
00:27:18,840 --> 00:27:22,559
final.dlc during 2019

589
00:27:22,559 --> 00:27:24,960
and the sample was mentioned in recorded

590
00:27:24,960 --> 00:27:27,919
futures repo this

591
00:27:27,919 --> 00:27:29,360
june

592
00:27:29,360 --> 00:27:32,720
it will drop the pc ship vector

593
00:27:32,720 --> 00:27:35,679
the attribution of this pct share sample

594
00:27:35,679 --> 00:27:39,120
was not too clear we just can speculate

595
00:27:39,120 --> 00:27:42,880
the sample belongs to chinese ipt

596
00:27:42,880 --> 00:27:45,200
and there were the possibilities that

597
00:27:45,200 --> 00:27:48,440
this ip

598
00:27:48,440 --> 00:27:50,240
149

599
00:27:50,240 --> 00:27:52,080
uh

600
00:27:52,080 --> 00:27:54,960
have changed the ownership to mpd41

601
00:27:54,960 --> 00:27:56,159
after

602
00:27:56,159 --> 00:27:58,240
march 2020

603
00:27:58,240 --> 00:28:02,320
because the uh apd-4d ones operation is

604
00:28:02,320 --> 00:28:03,679
after

605
00:28:03,679 --> 00:28:05,840
2020

606
00:28:05,840 --> 00:28:07,279
much

607
00:28:07,279 --> 00:28:09,760
and this operation didn't have any

608
00:28:09,760 --> 00:28:12,000
connection to fbd-41

609
00:28:12,000 --> 00:28:14,080
yes maybe they are

610
00:28:14,080 --> 00:28:17,840
these are possibilities

611
00:28:18,159 --> 00:28:18,960
and

612
00:28:18,960 --> 00:28:20,960
hw operation

613
00:28:20,960 --> 00:28:23,600
is chinese government plan to

614
00:28:23,600 --> 00:28:26,320
detect the security issues of key uh

615
00:28:26,320 --> 00:28:28,559
national infrastructure and to test

616
00:28:28,559 --> 00:28:31,120
their event monitoring and

617
00:28:31,120 --> 00:28:34,240
ability to quickly coordinate with the

618
00:28:34,240 --> 00:28:37,360
emergency incident

619
00:28:37,360 --> 00:28:39,760
the target involves many industries

620
00:28:39,760 --> 00:28:42,880
including government finance electricity

621
00:28:42,880 --> 00:28:45,440
and business key enterprises

622
00:28:45,440 --> 00:28:48,799
from austin info the operation started

623
00:28:48,799 --> 00:28:49,840
from

624
00:28:49,840 --> 00:28:54,000
april 8 2021

625
00:28:54,000 --> 00:28:56,399
and there are some samples here we have

626
00:28:56,399 --> 00:28:59,120
median confidence that they will use for

627
00:28:59,120 --> 00:29:01,520
the hw operation

628
00:29:01,520 --> 00:29:03,120
and upload

629
00:29:03,120 --> 00:29:07,120
the time and file content of this sample

630
00:29:07,120 --> 00:29:10,159
almost in the middle of april this year

631
00:29:10,159 --> 00:29:12,399
and question with the time of the

632
00:29:12,399 --> 00:29:16,959
starting debt of hw operation

633
00:29:17,120 --> 00:29:19,600
here are some tools we found the first

634
00:29:19,600 --> 00:29:21,679
one is like the cover strike loader we

635
00:29:21,679 --> 00:29:23,760
found in the ir case which was modified

636
00:29:23,760 --> 00:29:25,679
with alaris and

637
00:29:25,679 --> 00:29:28,000
decrypt the png as paid from the

638
00:29:28,000 --> 00:29:30,880
resource in mid-april there were a

639
00:29:30,880 --> 00:29:33,600
download uploaded from china

640
00:29:33,600 --> 00:29:35,760
the second is that we found a sample

641
00:29:35,760 --> 00:29:37,039
that was also

642
00:29:37,039 --> 00:29:39,120
uploaded from china which should

643
00:29:39,120 --> 00:29:40,799
function to calculate

644
00:29:40,799 --> 00:29:43,840
api h is sent as funny switch

645
00:29:43,840 --> 00:29:46,640
and this function has not been found on

646
00:29:46,640 --> 00:29:48,480
other samples

647
00:29:48,480 --> 00:29:50,960
the third is the cobol strike load that

648
00:29:50,960 --> 00:29:53,360
we saw in another ir case which use

649
00:29:53,360 --> 00:29:55,360
early vertical injection

650
00:29:55,360 --> 00:29:57,039
from the header of the cable strike

651
00:29:57,039 --> 00:29:59,440
parallel we can connect to other samples

652
00:29:59,440 --> 00:30:02,640
which was also uploaded from china

653
00:30:02,640 --> 00:30:05,200
there are two possibilities here the

654
00:30:05,200 --> 00:30:07,440
first possibility is that these samples

655
00:30:07,440 --> 00:30:10,399
are used in the hw operation

656
00:30:10,399 --> 00:30:13,360
and mpd41 was also involved

657
00:30:13,360 --> 00:30:15,600
the second possibility is that these

658
00:30:15,600 --> 00:30:18,080
samples are used in real attacks

659
00:30:18,080 --> 00:30:20,559
in the past we have also observed that

660
00:30:20,559 --> 00:30:23,279
fpd41 had attacked internal units in

661
00:30:23,279 --> 00:30:25,039
china

662
00:30:25,039 --> 00:30:27,120
we do not have a high confidence in the

663
00:30:27,120 --> 00:30:30,240
relation for hw operation we just put

664
00:30:30,240 --> 00:30:32,799
forward our observations

665
00:30:32,799 --> 00:30:33,919
if other

666
00:30:33,919 --> 00:30:36,480
have different views welcome to share

667
00:30:36,480 --> 00:30:38,799
with us

668
00:30:38,799 --> 00:30:41,279
in fish masters operation we saw that

669
00:30:41,279 --> 00:30:43,760
they had stolen and used the certificate

670
00:30:43,760 --> 00:30:46,159
of taiwan and south korean game

671
00:30:46,159 --> 00:30:47,200
companies

672
00:30:47,200 --> 00:30:48,480
in addition

673
00:30:48,480 --> 00:30:50,640
we observed that the other three

674
00:30:50,640 --> 00:30:52,240
certificates which have medium

675
00:30:52,240 --> 00:30:55,760
confidence that may be related to fpd41

676
00:30:55,760 --> 00:30:58,159
but we have not found the actual

677
00:30:58,159 --> 00:31:00,320
evidence to prove it yet

678
00:31:00,320 --> 00:31:02,840
these three certificates are related to

679
00:31:02,840 --> 00:31:05,519
various cable strike samples which also

680
00:31:05,519 --> 00:31:08,720
use cdn service and also use

681
00:31:08,720 --> 00:31:11,039
fak flash in the dollar to drop kerbal

682
00:31:11,039 --> 00:31:13,200
strike

683
00:31:13,200 --> 00:31:15,760
and here's our takeaway

684
00:31:15,760 --> 00:31:18,399
we found a various kind of cobblestrike

685
00:31:18,399 --> 00:31:21,279
loader and found some new

686
00:31:21,279 --> 00:31:23,519
ttb for

687
00:31:23,519 --> 00:31:25,039
fpg41

688
00:31:25,039 --> 00:31:27,600
and we also found some new backdoor and

689
00:31:27,600 --> 00:31:28,720
some new

690
00:31:28,720 --> 00:31:32,640
characteristics for the old vector

691
00:31:32,640 --> 00:31:34,880
and we also

692
00:31:34,880 --> 00:31:37,279
talked about some c2 hiding techniques

693
00:31:37,279 --> 00:31:39,360
used by abd4d1

694
00:31:39,360 --> 00:31:40,720
and we also

695
00:31:40,720 --> 00:31:42,000
gave us

696
00:31:42,000 --> 00:31:43,039
give

697
00:31:43,039 --> 00:31:46,000
everyone some observation from the ap

698
00:31:46,000 --> 00:31:48,640
t41 to

699
00:31:48,640 --> 00:31:50,399
relation

700
00:31:50,399 --> 00:31:54,799
to the operations other operations

701
00:31:54,960 --> 00:31:59,039
and here is our ioc for the loader and

702
00:31:59,039 --> 00:32:03,279
the backdoor and here is our our ioc for

703
00:32:03,279 --> 00:32:05,840
the c2 domain and some ip

704
00:32:05,840 --> 00:32:09,120
and this is our reference

705
00:32:09,120 --> 00:32:12,918
and thank you everyone

706
00:32:13,580 --> 00:32:16,720
[Music]

707
00:32:16,720 --> 00:32:18,799
you

