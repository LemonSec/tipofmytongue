1
00:00:02,640 --> 00:00:05,819
[Music]

2
00:00:08,639 --> 00:00:10,080
hello everyone

3
00:00:10,080 --> 00:00:13,360
welcome to my vb local host 2021

4
00:00:13,360 --> 00:00:15,519
presentation titled when malware changed

5
00:00:15,519 --> 00:00:17,440
its mind an empirical study of variable

6
00:00:17,440 --> 00:00:19,840
program behaviors in the real world my

7
00:00:19,840 --> 00:00:22,080
name is serena vlazada and this work has

8
00:00:22,080 --> 00:00:22,880
been

9
00:00:22,880 --> 00:00:25,599
done with my collaborators xeon zhu

10
00:00:25,599 --> 00:00:28,080
zlata big david bazaroti and my advisor

11
00:00:28,080 --> 00:00:31,560
tudor du midrash

12
00:00:32,719 --> 00:00:34,800
again my name is serena vlasica i'm a

13
00:00:34,800 --> 00:00:36,960
phd student at the university of

14
00:00:36,960 --> 00:00:39,920
maryland college park and my research is

15
00:00:39,920 --> 00:00:42,320
mainly focused on data-driven analysis

16
00:00:42,320 --> 00:00:43,680
of malware

17
00:00:43,680 --> 00:00:45,840
in the world

18
00:00:45,840 --> 00:00:48,160
so the agenda for today is as follows

19
00:00:48,160 --> 00:00:49,200
we're gonna

20
00:00:49,200 --> 00:00:51,120
talk about the drawbacks of using

21
00:00:51,120 --> 00:00:52,719
dynamic analysis

22
00:00:52,719 --> 00:00:54,320
we're gonna measure the malware

23
00:00:54,320 --> 00:00:57,039
variability in the real world and we're

24
00:00:57,039 --> 00:01:00,399
gonna find invariants and we'll present

25
00:01:00,399 --> 00:01:02,559
some actionable implications about how

26
00:01:02,559 --> 00:01:04,479
to find them

27
00:01:04,479 --> 00:01:07,200
and last we're also gonna talk about how

28
00:01:07,200 --> 00:01:09,920
the malware in the wild uh compares

29
00:01:09,920 --> 00:01:12,080
against current dynamical analysis

30
00:01:12,080 --> 00:01:13,040
techniques

31
00:01:13,040 --> 00:01:16,640
and the lessons we learned from those

32
00:01:16,640 --> 00:01:18,479
so it's well known that malware behavior

33
00:01:18,479 --> 00:01:20,960
changes changes across environments

34
00:01:20,960 --> 00:01:22,799
in fact prior work has shown that

35
00:01:22,799 --> 00:01:25,119
malware changes due to different reasons

36
00:01:25,119 --> 00:01:26,479
for example

37
00:01:26,479 --> 00:01:28,479
missing libraries different language

38
00:01:28,479 --> 00:01:31,040
settings etc

39
00:01:31,040 --> 00:01:33,119
and there's also been some other work

40
00:01:33,119 --> 00:01:34,560
that has

41
00:01:34,560 --> 00:01:37,040
uh advised to be more cautious when

42
00:01:37,040 --> 00:01:40,400
generalizing results that are taken from

43
00:01:40,400 --> 00:01:43,840
using a single os version

44
00:01:44,240 --> 00:01:46,640
and let's take an example the ramnet

45
00:01:46,640 --> 00:01:49,360
worm and in this case if you look at the

46
00:01:49,360 --> 00:01:52,320
code on the right which was uh

47
00:01:52,320 --> 00:01:54,720
very well reverse engineered by sir

48
00:01:54,720 --> 00:01:56,079
dorpier

49
00:01:56,079 --> 00:01:57,920
we can see that the malware is trying to

50
00:01:57,920 --> 00:02:00,960
perform in line 22 and exploit and this

51
00:02:00,960 --> 00:02:03,600
is a local privileges exploit which can

52
00:02:03,600 --> 00:02:06,159
also be detected by looking into the

53
00:02:06,159 --> 00:02:08,959
hundreds of mutrix mutex creations that

54
00:02:08,959 --> 00:02:10,800
will happen

55
00:02:10,800 --> 00:02:14,000
however they will only happen if the

56
00:02:14,000 --> 00:02:16,319
malware is being run on a windows 7

57
00:02:16,319 --> 00:02:18,560
vulnerable version of windows 7 and in

58
00:02:18,560 --> 00:02:21,599
non-admin privileges so it will have to

59
00:02:21,599 --> 00:02:24,959
pass the first if statement and uh

60
00:02:24,959 --> 00:02:28,800
fail the second and third

61
00:02:30,239 --> 00:02:32,319
so the research questions are as follows

62
00:02:32,319 --> 00:02:34,160
first we are trying to measure the

63
00:02:34,160 --> 00:02:37,120
variability we want to

64
00:02:37,120 --> 00:02:39,599
be able to see what parts of the malware

65
00:02:39,599 --> 00:02:42,480
behavior changes in an execution trace

66
00:02:42,480 --> 00:02:43,840
and by how much

67
00:02:43,840 --> 00:02:46,319
so for example in the previous case we'd

68
00:02:46,319 --> 00:02:47,760
want to see

69
00:02:47,760 --> 00:02:50,560
if in fact the mutex creations is the

70
00:02:50,560 --> 00:02:52,879
one that changes more in the remnant

71
00:02:52,879 --> 00:02:55,200
form

72
00:02:55,519 --> 00:02:57,200
then we also want to

73
00:02:57,200 --> 00:02:59,280
find behavioral invariance across

74
00:02:59,280 --> 00:03:01,680
multiple executions and we're trying to

75
00:03:01,680 --> 00:03:02,480
see

76
00:03:02,480 --> 00:03:07,200
what is the appropriate way of doing it

77
00:03:07,200 --> 00:03:08,959
unless we also want to measure the

78
00:03:08,959 --> 00:03:11,200
impact of uh

79
00:03:11,200 --> 00:03:13,840
variability in malware's behavior in

80
00:03:13,840 --> 00:03:15,360
existing

81
00:03:15,360 --> 00:03:17,519
malware detection or malware clustering

82
00:03:17,519 --> 00:03:19,360
tools

83
00:03:19,360 --> 00:03:21,360
however answering these questions

84
00:03:21,360 --> 00:03:23,360
requires data from many machines in the

85
00:03:23,360 --> 00:03:26,480
world because sandbox observations may

86
00:03:26,480 --> 00:03:28,640
not be able to capture all the user

87
00:03:28,640 --> 00:03:31,440
interactions or all the environments in

88
00:03:31,440 --> 00:03:33,280
the world

89
00:03:33,280 --> 00:03:36,560
therefore in 2018 we collected 7.6

90
00:03:36,560 --> 00:03:38,799
million execution traces

91
00:03:38,799 --> 00:03:41,440
of malware pp or b9

92
00:03:41,440 --> 00:03:43,360
in 5.4 million

93
00:03:43,360 --> 00:03:44,879
real users

94
00:03:44,879 --> 00:03:47,519
real users machines across more than 100

95
00:03:47,519 --> 00:03:50,480
countries in the world

96
00:03:50,560 --> 00:03:53,439
as with other real user data the privacy

97
00:03:53,439 --> 00:03:56,400
is at utmost importance so in our data

98
00:03:56,400 --> 00:03:59,599
set we do not collect any identifiable

99
00:03:59,599 --> 00:04:02,159
identifiable informations additionally

100
00:04:02,159 --> 00:04:04,560
we don't put the user at risk by having

101
00:04:04,560 --> 00:04:06,959
them run the malware but we only record

102
00:04:06,959 --> 00:04:09,439
passively as a less line of defense to

103
00:04:09,439 --> 00:04:12,720
detect the more stealthy malware

104
00:04:12,720 --> 00:04:14,000
therefore

105
00:04:14,000 --> 00:04:16,880
we believe that our data set captures

106
00:04:16,880 --> 00:04:19,519
the real threat

107
00:04:19,519 --> 00:04:23,040
landscape in the wild

108
00:04:24,880 --> 00:04:26,880
technically our data set looks like a

109
00:04:26,880 --> 00:04:30,320
big table with rows corresponding to

110
00:04:30,320 --> 00:04:32,639
events or actions

111
00:04:32,639 --> 00:04:34,560
and the columns

112
00:04:34,560 --> 00:04:37,120
containing all the metadata and also

113
00:04:37,120 --> 00:04:40,720
parameters for those actions

114
00:04:41,120 --> 00:04:42,479
and

115
00:04:42,479 --> 00:04:45,759
one thing we did in the beginning of our

116
00:04:45,759 --> 00:04:49,280
analysis is that we split the data

117
00:04:49,280 --> 00:04:50,080
uh

118
00:04:50,080 --> 00:04:52,080
into hashes so

119
00:04:52,080 --> 00:04:54,960
uh one we'd have one different table for

120
00:04:54,960 --> 00:04:57,600
each hash

121
00:04:57,600 --> 00:04:59,600
and then to determine whether this hash

122
00:04:59,600 --> 00:05:02,320
is smaller or benign we look back into

123
00:05:02,320 --> 00:05:06,400
virustotal and we

124
00:05:06,639 --> 00:05:09,280
expect that the malware will be detected

125
00:05:09,280 --> 00:05:11,840
at least one year later so we use the

126
00:05:11,840 --> 00:05:15,600
virustotal label from 2019 to classify

127
00:05:15,600 --> 00:05:16,639
uh

128
00:05:16,639 --> 00:05:17,840
our

129
00:05:17,840 --> 00:05:20,160
executions and we found out that there

130
00:05:20,160 --> 00:05:20,880
is

131
00:05:20,880 --> 00:05:26,080
22 000 benigns 2.4 k malware and

132
00:05:26,080 --> 00:05:27,680
1600

133
00:05:27,680 --> 00:05:30,240
rupees

134
00:05:36,479 --> 00:05:39,680
again to motivate our analysis

135
00:05:39,680 --> 00:05:42,240
of variability across machines we take a

136
00:05:42,240 --> 00:05:45,120
look better back at the remnant sample

137
00:05:45,120 --> 00:05:48,240
as we saw earlier in line 22 the malware

138
00:05:48,240 --> 00:05:50,000
will try to create

139
00:05:50,000 --> 00:05:52,639
multiple mutexes in fact hundreds of

140
00:05:52,639 --> 00:05:53,840
mutexes

141
00:05:53,840 --> 00:05:55,440
to exploit

142
00:05:55,440 --> 00:05:56,800
a certain

143
00:05:56,800 --> 00:05:59,440
vulnerable version of windows

144
00:05:59,440 --> 00:06:02,000
however this is only

145
00:06:02,000 --> 00:06:04,240
going to happen in some of the machines

146
00:06:04,240 --> 00:06:07,440
because in some others maybe the malware

147
00:06:07,440 --> 00:06:09,520
is already running in

148
00:06:09,520 --> 00:06:11,840
admin privileges or

149
00:06:11,840 --> 00:06:13,199
the

150
00:06:13,199 --> 00:06:16,639
version is no longer vulnerable

151
00:06:16,639 --> 00:06:19,360
therefore to perform such analysis we

152
00:06:19,360 --> 00:06:20,639
need to

153
00:06:20,639 --> 00:06:22,720
split our data

154
00:06:22,720 --> 00:06:26,000
for instead of only for each hash now we

155
00:06:26,000 --> 00:06:28,639
also need to split it for each machine

156
00:06:28,639 --> 00:06:30,400
so then we can have

157
00:06:30,400 --> 00:06:33,199
a table that has a group of all the

158
00:06:33,199 --> 00:06:36,240
executions of that sample in

159
00:06:36,240 --> 00:06:38,800
that machine

160
00:06:38,800 --> 00:06:40,880
then what we do is as follows for all

161
00:06:40,880 --> 00:06:44,240
the machines we simply perform a count

162
00:06:44,240 --> 00:06:46,560
of how many file creations there are how

163
00:06:46,560 --> 00:06:51,360
many mutex creations etc and then

164
00:06:51,360 --> 00:06:53,440
for the purpose of this presentation

165
00:06:53,440 --> 00:06:55,840
we'll only consider the total number of

166
00:06:55,840 --> 00:06:58,239
events

167
00:06:59,039 --> 00:07:00,319
then

168
00:07:00,319 --> 00:07:01,360
we

169
00:07:01,360 --> 00:07:03,360
simply uh

170
00:07:03,360 --> 00:07:06,479
put all of these numbers for all of the

171
00:07:06,479 --> 00:07:08,960
machines that this malware sample has

172
00:07:08,960 --> 00:07:10,720
run on into a

173
00:07:10,720 --> 00:07:13,759
a big array and we simply calculate the

174
00:07:13,759 --> 00:07:17,199
iqr which is basically the 75th

175
00:07:17,199 --> 00:07:20,400
percentile minus the 25th percentile

176
00:07:20,400 --> 00:07:24,160
and the iqr is used because we also have

177
00:07:24,160 --> 00:07:25,360
some

178
00:07:25,360 --> 00:07:28,080
we also have some cases where the model

179
00:07:28,080 --> 00:07:29,520
is performing

180
00:07:29,520 --> 00:07:30,639
too many

181
00:07:30,639 --> 00:07:34,160
file creations in one single machines or

182
00:07:34,160 --> 00:07:36,319
or it is uh

183
00:07:36,319 --> 00:07:38,479
doing almost nothing in some other

184
00:07:38,479 --> 00:07:39,440
machines

185
00:07:39,440 --> 00:07:42,639
so to get rid of these extreme cases we

186
00:07:42,639 --> 00:07:45,599
chose to use the iqr

187
00:07:45,599 --> 00:07:47,680
and for the rest of the

188
00:07:47,680 --> 00:07:49,759
action types we

189
00:07:49,759 --> 00:07:53,759
we have our analysis in the paper

190
00:07:53,759 --> 00:07:57,599
and then once we collect the iqrs we

191
00:07:57,599 --> 00:08:01,680
create a box plot of iqrs for all of the

192
00:08:01,680 --> 00:08:02,800
malware

193
00:08:02,800 --> 00:08:07,560
pop and binay samples

194
00:08:14,000 --> 00:08:16,479
so for example if we take a look back at

195
00:08:16,479 --> 00:08:19,599
our remnant sample here we have a

196
00:08:19,599 --> 00:08:20,960
splunk

197
00:08:20,960 --> 00:08:23,039
dashboard where we

198
00:08:23,039 --> 00:08:26,319
analyzed two different traces of the

199
00:08:26,319 --> 00:08:27,280
sample

200
00:08:27,280 --> 00:08:29,599
when it's being run on a windows 7 and

201
00:08:29,599 --> 00:08:32,719
windows 10. so on the left side we have

202
00:08:32,719 --> 00:08:36,000
the tracer executed on a windows 7 and

203
00:08:36,000 --> 00:08:41,039
you can see that uh the most dominant

204
00:08:41,039 --> 00:08:43,519
action is a mutex creation

205
00:08:43,519 --> 00:08:46,720
and in the right side is a normal

206
00:08:46,720 --> 00:08:49,279
execution that would happen in a windows

207
00:08:49,279 --> 00:08:51,440
10 machine or maybe in the case where

208
00:08:51,440 --> 00:08:53,120
the malware is running in admin

209
00:08:53,120 --> 00:08:54,959
privileges

210
00:08:54,959 --> 00:08:57,120
and in between you can see the green

211
00:08:57,120 --> 00:08:58,000
bars

212
00:08:58,000 --> 00:09:00,720
then the mutex creation has a value of

213
00:09:00,720 --> 00:09:02,240
more than 50

214
00:09:02,240 --> 00:09:04,480
which means that if

215
00:09:04,480 --> 00:09:06,080
we have an

216
00:09:06,080 --> 00:09:11,040
a considerable number of cases where the

217
00:09:11,040 --> 00:09:14,880
remnant has been executed on user mode

218
00:09:14,880 --> 00:09:17,279
and vulnerable version we'll have a lot

219
00:09:17,279 --> 00:09:20,000
of metex creation and if we also have a

220
00:09:20,000 --> 00:09:22,320
considerable number of cases where the

221
00:09:22,320 --> 00:09:23,600
uh

222
00:09:23,600 --> 00:09:26,800
exploit didn't happen then we would have

223
00:09:26,800 --> 00:09:30,560
cases as you can see in the trace2

224
00:09:30,560 --> 00:09:31,519
then

225
00:09:31,519 --> 00:09:34,160
the green bars would be the iqr

226
00:09:34,160 --> 00:09:37,160
variability

227
00:09:38,959 --> 00:09:41,360
and here we show our

228
00:09:41,360 --> 00:09:44,880
results for malware up and benign

229
00:09:44,880 --> 00:09:45,839
across

230
00:09:45,839 --> 00:09:48,080
all the number of actions in an

231
00:09:48,080 --> 00:09:51,040
execution trace and we see that for at

232
00:09:51,040 --> 00:09:54,240
least 50 of the malware samples

233
00:09:54,240 --> 00:09:57,200
there are 59 missing or additional

234
00:09:57,200 --> 00:09:59,920
actions happening across machines

235
00:09:59,920 --> 00:10:02,560
and this number is considerably higher

236
00:10:02,560 --> 00:10:05,839
than the few piece and benign

237
00:10:05,839 --> 00:10:08,800
and we then investigate further and we

238
00:10:08,800 --> 00:10:10,079
try to

239
00:10:10,079 --> 00:10:11,519
see

240
00:10:11,519 --> 00:10:13,600
which action type

241
00:10:13,600 --> 00:10:16,640
is actually more variable in malware

242
00:10:16,640 --> 00:10:19,360
than in the other ones and we found out

243
00:10:19,360 --> 00:10:21,680
that the file creation is the most

244
00:10:21,680 --> 00:10:23,279
variable

245
00:10:23,279 --> 00:10:24,000
so

246
00:10:24,000 --> 00:10:26,000
most of the variability

247
00:10:26,000 --> 00:10:27,760
that you see in

248
00:10:27,760 --> 00:10:29,920
in the figure above is actually coming

249
00:10:29,920 --> 00:10:33,399
from file creations

250
00:10:33,839 --> 00:10:35,600
but then we also

251
00:10:35,600 --> 00:10:38,320
look more into details on

252
00:10:38,320 --> 00:10:40,720
what exactly varies in those file

253
00:10:40,720 --> 00:10:41,839
creations

254
00:10:41,839 --> 00:10:44,880
so the methodology is pretty simple so

255
00:10:44,880 --> 00:10:48,959
we have a count for the number of unique

256
00:10:48,959 --> 00:10:50,000
uh

257
00:10:50,000 --> 00:10:52,399
file names or file paths or file

258
00:10:52,399 --> 00:10:56,399
extensions that happens for each machine

259
00:10:56,399 --> 00:10:59,360
and we found out that the number of

260
00:10:59,360 --> 00:11:01,040
unique file names

261
00:11:01,040 --> 00:11:03,920
changes a lot across multiple machines

262
00:11:03,920 --> 00:11:05,920
for malware samples

263
00:11:05,920 --> 00:11:09,519
so for at least 50 of the samples there

264
00:11:09,519 --> 00:11:12,480
is 25

265
00:11:12,480 --> 00:11:16,160
more or less uh file names appearing

266
00:11:16,160 --> 00:11:18,560
across machines

267
00:11:18,560 --> 00:11:20,800
but this in fact is not the only

268
00:11:20,800 --> 00:11:24,480
indicator so it doesn't really show much

269
00:11:24,480 --> 00:11:25,279
uh

270
00:11:25,279 --> 00:11:28,880
what is happening so if there is any

271
00:11:28,880 --> 00:11:31,279
file name that is

272
00:11:31,279 --> 00:11:33,360
that remains the same across machines

273
00:11:33,360 --> 00:11:35,680
this metric doesn't show it to us

274
00:11:35,680 --> 00:11:36,480
so

275
00:11:36,480 --> 00:11:38,160
the next thing we do is that we measure

276
00:11:38,160 --> 00:11:39,920
the jacquard index

277
00:11:39,920 --> 00:11:41,839
and this one would show that whether

278
00:11:41,839 --> 00:11:44,160
there is a value uh shared across

279
00:11:44,160 --> 00:11:46,399
machines that the jakarta index would be

280
00:11:46,399 --> 00:11:49,600
non-zero at least but we found out that

281
00:11:49,600 --> 00:11:51,440
for more than 99

282
00:11:51,440 --> 00:11:53,680
of the malware samples

283
00:11:53,680 --> 00:11:55,839
this is not the case so there is only

284
00:11:55,839 --> 00:11:59,120
very few samples in which the file name

285
00:11:59,120 --> 00:12:00,079
uh

286
00:12:00,079 --> 00:12:01,120
remains

287
00:12:01,120 --> 00:12:04,480
the same across all machines

288
00:12:04,480 --> 00:12:08,079
so let's take for example the good table

289
00:12:08,079 --> 00:12:08,959
and

290
00:12:08,959 --> 00:12:12,720
this case we we found out that there is

291
00:12:12,720 --> 00:12:14,079
a zero

292
00:12:14,079 --> 00:12:16,399
value for jakarta index and 0.2 for

293
00:12:16,399 --> 00:12:18,720
mutex names and we also found that it

294
00:12:18,720 --> 00:12:23,279
had an iqr of 0 for for file creations

295
00:12:23,279 --> 00:12:26,560
and a2 for the mutex creations

296
00:12:26,560 --> 00:12:30,320
so it actually tells us that

297
00:12:30,320 --> 00:12:32,639
the mutexes are better candidate for

298
00:12:32,639 --> 00:12:34,880
building signatures because we can see

299
00:12:34,880 --> 00:12:37,839
that there is an overlap of 0.2 and in

300
00:12:37,839 --> 00:12:39,839
fact from what we

301
00:12:39,839 --> 00:12:43,519
saw from a trend micro report is this is

302
00:12:43,519 --> 00:12:45,360
actually what's happening so the mutex

303
00:12:45,360 --> 00:12:47,120
creation uh

304
00:12:47,120 --> 00:12:51,200
has that uh random value the age 48

305
00:12:51,200 --> 00:12:54,000
appearing in all machines however the

306
00:12:54,000 --> 00:12:56,000
zone cache counter mutex and zone

307
00:12:56,000 --> 00:12:58,240
attribute cache counter mutex only

308
00:12:58,240 --> 00:13:00,480
appeared in half of the machines which

309
00:13:00,480 --> 00:13:01,680
explains

310
00:13:01,680 --> 00:13:04,560
the iqrf 2 which means that in the

311
00:13:04,560 --> 00:13:06,480
half of the machines there are two

312
00:13:06,480 --> 00:13:10,320
mutexes that are missing

313
00:13:11,440 --> 00:13:13,920
and this is as i said confirmed by a

314
00:13:13,920 --> 00:13:16,639
trend micro report that you can see the

315
00:13:16,639 --> 00:13:18,959
link below

316
00:13:18,959 --> 00:13:21,360
so as a summary we

317
00:13:21,360 --> 00:13:23,279
showed that there is a high variability

318
00:13:23,279 --> 00:13:25,519
in malware across machines and file

319
00:13:25,519 --> 00:13:27,040
creation makes up for most of the

320
00:13:27,040 --> 00:13:29,519
variability in malware and the file name

321
00:13:29,519 --> 00:13:31,839
is the most variable parameter

322
00:13:31,839 --> 00:13:35,440
for most mother there is also no single

323
00:13:35,440 --> 00:13:37,600
parameter value that is shared across

324
00:13:37,600 --> 00:13:42,000
machines except for the file extension

325
00:13:43,279 --> 00:13:45,120
so with

326
00:13:45,120 --> 00:13:48,399
what we saw so far we

327
00:13:48,399 --> 00:13:50,800
seem to have lost hope of detecting the

328
00:13:50,800 --> 00:13:53,839
malware but in fact we only looked at

329
00:13:53,839 --> 00:13:57,440
using the full parameter value so we

330
00:13:57,440 --> 00:13:59,440
have not seen whether a part of the

331
00:13:59,440 --> 00:14:01,360
parameter value is enough to capture the

332
00:14:01,360 --> 00:14:02,399
malware

333
00:14:02,399 --> 00:14:04,560
and this is what we're doing

334
00:14:04,560 --> 00:14:06,800
to answer the research question number

335
00:14:06,800 --> 00:14:08,160
two

336
00:14:08,160 --> 00:14:10,720
so in this case we focus on action

337
00:14:10,720 --> 00:14:13,440
parameter pair signatures something like

338
00:14:13,440 --> 00:14:16,720
uh what is used in sigma and or other

339
00:14:16,720 --> 00:14:19,519
s-i-e-m rules

340
00:14:19,519 --> 00:14:21,839
for example if you can see on the right

341
00:14:21,839 --> 00:14:24,000
side there is a

342
00:14:24,000 --> 00:14:26,720
sigma rule that is created for process

343
00:14:26,720 --> 00:14:28,079
creations

344
00:14:28,079 --> 00:14:29,120
and

345
00:14:29,120 --> 00:14:31,120
it tries to match whether a process

346
00:14:31,120 --> 00:14:33,760
creation with the following uh command

347
00:14:33,760 --> 00:14:35,519
line that matches that regular

348
00:14:35,519 --> 00:14:37,519
expression is happening

349
00:14:37,519 --> 00:14:41,040
and if so it may be something suspicious

350
00:14:41,040 --> 00:14:42,959
and it's also

351
00:14:42,959 --> 00:14:46,480
the same thing is also used in cuckoo to

352
00:14:46,480 --> 00:14:48,880
detect some suspicious activity for

353
00:14:48,880 --> 00:14:50,000
example

354
00:14:50,000 --> 00:14:53,440
to determine whether the malware is

355
00:14:53,440 --> 00:14:55,360
establishing persistence there might be

356
00:14:55,360 --> 00:14:56,560
certain

357
00:14:56,560 --> 00:14:58,880
regular expressions on file creation

358
00:14:58,880 --> 00:15:01,279
events

359
00:15:01,760 --> 00:15:03,760
however all of these

360
00:15:03,760 --> 00:15:07,199
regular expressions rely on some very

361
00:15:07,199 --> 00:15:08,800
simple tokens

362
00:15:08,800 --> 00:15:11,839
so for example users add data documents

363
00:15:11,839 --> 00:15:15,440
settings etc as we show in the green

364
00:15:15,440 --> 00:15:17,199
boxes

365
00:15:17,199 --> 00:15:19,600
the four is in our best interest to only

366
00:15:19,600 --> 00:15:21,760
focus on these tokens because if these

367
00:15:21,760 --> 00:15:24,240
tokens don't match then the whole rule

368
00:15:24,240 --> 00:15:27,120
will fail to match

369
00:15:27,120 --> 00:15:29,519
but to motivate the

370
00:15:29,519 --> 00:15:32,399
analysis of these tokens we

371
00:15:32,399 --> 00:15:34,959
have a look back at the largest

372
00:15:34,959 --> 00:15:38,880
database of cm rules in the world sigma

373
00:15:38,880 --> 00:15:41,680
and in sigma we're trying to see how

374
00:15:41,680 --> 00:15:44,560
many of those rules have at least one

375
00:15:44,560 --> 00:15:46,480
token in them

376
00:15:46,480 --> 00:15:48,399
and to find out

377
00:15:48,399 --> 00:15:50,480
if the rule has a token

378
00:15:50,480 --> 00:15:51,839
we

379
00:15:51,839 --> 00:15:54,240
first look into the rules that have no

380
00:15:54,240 --> 00:15:56,160
regular expression at all

381
00:15:56,160 --> 00:15:58,079
and see if those can be tokenized

382
00:15:58,079 --> 00:15:59,199
meaning that

383
00:15:59,199 --> 00:16:02,560
there is one token for those rules

384
00:16:02,560 --> 00:16:04,720
and if the rules have a regular

385
00:16:04,720 --> 00:16:07,519
expression which in this case

386
00:16:07,519 --> 00:16:09,360
is most of them

387
00:16:09,360 --> 00:16:10,480
we

388
00:16:10,480 --> 00:16:13,120
have a look at those cases in which we

389
00:16:13,120 --> 00:16:14,959
have three tokens

390
00:16:14,959 --> 00:16:17,279
at least three tokens between two

391
00:16:17,279 --> 00:16:18,959
regular expression characters which

392
00:16:18,959 --> 00:16:22,560
means that if there is a case where

393
00:16:22,560 --> 00:16:26,480
the the leftmost token has a star and

394
00:16:26,480 --> 00:16:29,279
the rightmost token has a star the token

395
00:16:29,279 --> 00:16:32,320
in the middle should match which is

396
00:16:32,320 --> 00:16:35,839
uh indicator that if we're uh studying

397
00:16:35,839 --> 00:16:37,199
these tokens

398
00:16:37,199 --> 00:16:40,399
that then those tokens should match for

399
00:16:40,399 --> 00:16:43,199
these rules to match

400
00:16:43,199 --> 00:16:45,839
so we found out that around 70 percent

401
00:16:45,839 --> 00:16:48,720
of all the sigma open source rules have

402
00:16:48,720 --> 00:16:52,480
at least one full token for the other 30

403
00:16:52,480 --> 00:16:54,959
we found that they they were like half a

404
00:16:54,959 --> 00:16:57,519
token and maybe a star or maybe two

405
00:16:57,519 --> 00:17:00,720
stars and half a token

406
00:17:00,959 --> 00:17:03,600
so the invariant analysis we perform is

407
00:17:03,600 --> 00:17:05,919
as follows we take all the malware

408
00:17:05,919 --> 00:17:08,959
samples and all the binary samples

409
00:17:08,959 --> 00:17:09,919
and

410
00:17:09,919 --> 00:17:13,839
we look into their parameters so we

411
00:17:13,839 --> 00:17:15,839
strip those parameters based on the

412
00:17:15,839 --> 00:17:19,119
tokens as we show in the red

413
00:17:19,119 --> 00:17:20,640
and then

414
00:17:20,640 --> 00:17:23,280
after we split them by delimiters

415
00:17:23,280 --> 00:17:24,079
we

416
00:17:24,079 --> 00:17:25,280
remove

417
00:17:25,280 --> 00:17:27,599
all the values in

418
00:17:27,599 --> 00:17:28,640
the

419
00:17:28,640 --> 00:17:30,799
in the malware samples that appear in

420
00:17:30,799 --> 00:17:33,280
any of the benign samples and this is

421
00:17:33,280 --> 00:17:36,960
done because we are only interested in

422
00:17:36,960 --> 00:17:39,120
malware specific tokens so we want to

423
00:17:39,120 --> 00:17:41,360
remove tokens that are like

424
00:17:41,360 --> 00:17:45,760
a csidl profile or like a setup.exe

425
00:17:45,760 --> 00:17:46,760
or

426
00:17:46,760 --> 00:17:48,320
something.png

427
00:17:48,320 --> 00:17:51,120
so the png part is not really an

428
00:17:51,120 --> 00:17:52,799
indicator of the

429
00:17:52,799 --> 00:17:54,720
malicious activity

430
00:17:54,720 --> 00:17:57,440
so once we remove those uh we are left

431
00:17:57,440 --> 00:18:00,880
with let's say wnr1 which is a wannacry

432
00:18:00,880 --> 00:18:02,000
extension

433
00:18:02,000 --> 00:18:04,240
and something like virus

434
00:18:04,240 --> 00:18:05,840
and then we

435
00:18:05,840 --> 00:18:08,880
measure in how many of the machines we

436
00:18:08,880 --> 00:18:10,799
see that to appear

437
00:18:10,799 --> 00:18:13,120
so for example

438
00:18:13,120 --> 00:18:15,520
as an hypothetical example

439
00:18:15,520 --> 00:18:17,440
one token appears in sixty percent of

440
00:18:17,440 --> 00:18:19,280
the machines the other one appears in

441
00:18:19,280 --> 00:18:21,120
twenty percent

442
00:18:21,120 --> 00:18:22,000
and

443
00:18:22,000 --> 00:18:24,799
in our interest we uh if we are the

444
00:18:24,799 --> 00:18:28,080
analysts we want to deploy two rules one

445
00:18:28,080 --> 00:18:29,679
for the first token and one for the

446
00:18:29,679 --> 00:18:32,640
second so then what we measure is a

447
00:18:32,640 --> 00:18:35,280
combination of those and how would that

448
00:18:35,280 --> 00:18:38,080
rule or maybe a regular expression of

449
00:18:38,080 --> 00:18:42,480
those tokens appear in the wild and so

450
00:18:42,480 --> 00:18:44,880
to better be able to

451
00:18:44,880 --> 00:18:47,120
replicate this process

452
00:18:47,120 --> 00:18:48,559
we

453
00:18:48,559 --> 00:18:52,480
came up with the following methodology

454
00:18:53,120 --> 00:18:56,080
first we perform a random sampling of n

455
00:18:56,080 --> 00:18:57,280
machines

456
00:18:57,280 --> 00:18:59,679
and then we measure the amount of

457
00:18:59,679 --> 00:19:01,360
malware tokens

458
00:19:01,360 --> 00:19:04,320
in that we find in those n machines and

459
00:19:04,320 --> 00:19:06,559
then we compare this with all the

460
00:19:06,559 --> 00:19:08,480
samples uh

461
00:19:08,480 --> 00:19:10,559
malware tokens that we have in our data

462
00:19:10,559 --> 00:19:11,520
set

463
00:19:11,520 --> 00:19:14,559
so the idea of this experiment is to

464
00:19:14,559 --> 00:19:17,840
find out how many machines do we need to

465
00:19:17,840 --> 00:19:20,080
capture all the tokens

466
00:19:20,080 --> 00:19:22,000
and we do this for

467
00:19:22,000 --> 00:19:24,000
different parameter types such as file

468
00:19:24,000 --> 00:19:25,679
name file path

469
00:19:25,679 --> 00:19:28,799
command line etc

470
00:19:28,799 --> 00:19:30,559
and

471
00:19:30,559 --> 00:19:32,880
the results are shown in the figure

472
00:19:32,880 --> 00:19:33,840
below

473
00:19:33,840 --> 00:19:36,880
as and as we see the file names are more

474
00:19:36,880 --> 00:19:40,000
the most difficult to completely capture

475
00:19:40,000 --> 00:19:42,080
meanwhile the command line tokens and

476
00:19:42,080 --> 00:19:44,080
the subdirectories

477
00:19:44,080 --> 00:19:45,679
are captured with

478
00:19:45,679 --> 00:19:48,640
about 10 machines

479
00:19:48,640 --> 00:19:51,600
so how do we use these tokens to detect

480
00:19:51,600 --> 00:19:54,080
and how do we maximize the coverage of

481
00:19:54,080 --> 00:19:55,440
those tokens

482
00:19:55,440 --> 00:19:57,360
so the assumption

483
00:19:57,360 --> 00:20:00,480
in this other experiment is that the

484
00:20:00,480 --> 00:20:02,000
sandbox is

485
00:20:02,000 --> 00:20:05,200
undetectable therefore whatever

486
00:20:05,200 --> 00:20:07,280
we see in the world the analysts would

487
00:20:07,280 --> 00:20:10,400
be able to capture in their sandbox

488
00:20:10,400 --> 00:20:12,400
just like in the real machine

489
00:20:12,400 --> 00:20:13,760
uh

490
00:20:13,760 --> 00:20:16,960
so we pick n machines to get the bag of

491
00:20:16,960 --> 00:20:19,840
tokens and then we check how much

492
00:20:19,840 --> 00:20:22,480
coverage would we get with all the

493
00:20:22,480 --> 00:20:25,120
tokens with an or value of all the

494
00:20:25,120 --> 00:20:26,960
tokens

495
00:20:26,960 --> 00:20:29,679
and so we get the following results

496
00:20:29,679 --> 00:20:32,799
uh as we show in the figure below that

497
00:20:32,799 --> 00:20:35,520
you get the maximum coverage

498
00:20:35,520 --> 00:20:38,799
if you are using at least three machines

499
00:20:38,799 --> 00:20:40,640
for the file name

500
00:20:40,640 --> 00:20:41,760
and

501
00:20:41,760 --> 00:20:42,799
then

502
00:20:42,799 --> 00:20:44,880
uh if you're using more machines then

503
00:20:44,880 --> 00:20:47,280
you'd get diminishing returns

504
00:20:47,280 --> 00:20:49,520
so how do we interpret this is that if

505
00:20:49,520 --> 00:20:50,640
you can see

506
00:20:50,640 --> 00:20:53,600
uh the green uh box plot

507
00:20:53,600 --> 00:20:56,720
will show the amount of coverage

508
00:20:56,720 --> 00:20:58,720
that you'll get from all the tokens that

509
00:20:58,720 --> 00:21:02,960
you extract from three machines

510
00:21:02,960 --> 00:21:05,200
so this means that we get at least

511
00:21:05,200 --> 00:21:07,679
eighty seven percent coverage for all

512
00:21:07,679 --> 00:21:10,320
the model samples in the wild

513
00:21:10,320 --> 00:21:12,640
if we are using three machines and if

514
00:21:12,640 --> 00:21:15,679
we're using more you'd get uh

515
00:21:15,679 --> 00:21:17,039
more coverage

516
00:21:17,039 --> 00:21:22,400
but it wouldn't be worth to invest more

517
00:21:22,400 --> 00:21:26,000
but that was only for file name so

518
00:21:26,000 --> 00:21:28,720
we also do the same thing for the file

519
00:21:28,720 --> 00:21:30,720
path and the command line

520
00:21:30,720 --> 00:21:32,880
since those were the other two most

521
00:21:32,880 --> 00:21:35,360
popular

522
00:21:35,440 --> 00:21:39,600
sources of signatures in sigma

523
00:21:39,600 --> 00:21:42,640
and as we show from figure b and c

524
00:21:42,640 --> 00:21:46,240
the analyst needs seven machines to

525
00:21:46,240 --> 00:21:48,480
collect enough tokens to get a high

526
00:21:48,480 --> 00:21:51,520
coverage for the file path and

527
00:21:51,520 --> 00:21:52,960
uh they need

528
00:21:52,960 --> 00:21:56,080
four machines to connect to collect

529
00:21:56,080 --> 00:21:59,760
enough tokens for the command line

530
00:21:59,760 --> 00:22:00,799
therefore

531
00:22:00,799 --> 00:22:02,880
what we conclude from this results is

532
00:22:02,880 --> 00:22:06,640
that while it's easier to obtain command

533
00:22:06,640 --> 00:22:11,039
line and file path signatures or tokens

534
00:22:11,039 --> 00:22:14,320
it's more difficult to get coverage for

535
00:22:14,320 --> 00:22:16,639
those

536
00:22:20,960 --> 00:22:22,559
but how would

537
00:22:22,559 --> 00:22:25,120
a analyst create

538
00:22:25,120 --> 00:22:26,559
three or four

539
00:22:26,559 --> 00:22:28,480
different sandboxes

540
00:22:28,480 --> 00:22:29,679
and

541
00:22:29,679 --> 00:22:31,760
what we think it would be possible is to

542
00:22:31,760 --> 00:22:36,480
use a random vm generator like second

543
00:22:36,480 --> 00:22:39,280
with the features proposed by prior work

544
00:22:39,280 --> 00:22:43,200
so as you can see from table one uh

545
00:22:43,200 --> 00:22:45,840
there are multiple features that

546
00:22:45,840 --> 00:22:46,880
different

547
00:22:46,880 --> 00:22:49,760
uh users machines in the world would

548
00:22:49,760 --> 00:22:50,720
have

549
00:22:50,720 --> 00:22:53,520
and we could create some sandboxes that

550
00:22:53,520 --> 00:22:56,159
have various values for different

551
00:22:56,159 --> 00:22:58,080
features

552
00:22:58,080 --> 00:23:00,640
and av vendors can collect such features

553
00:23:00,640 --> 00:23:03,679
with minimum overhead

554
00:23:03,679 --> 00:23:06,400
lastly we take a look at the impact of

555
00:23:06,400 --> 00:23:09,520
malware behavior variability in

556
00:23:09,520 --> 00:23:11,600
existing techniques such as malware

557
00:23:11,600 --> 00:23:14,480
clustering or anomaly detection such as

558
00:23:14,480 --> 00:23:17,440
xs miner or siem

559
00:23:17,440 --> 00:23:19,919
systems etc

560
00:23:19,919 --> 00:23:22,960
so first we we tackle the clustering the

561
00:23:22,960 --> 00:23:25,440
question we want to answer is as follows

562
00:23:25,440 --> 00:23:26,960
how does the malware behavior

563
00:23:26,960 --> 00:23:29,679
variability affect clustering

564
00:23:29,679 --> 00:23:31,600
and for this we follow the following

565
00:23:31,600 --> 00:23:32,960
methodology

566
00:23:32,960 --> 00:23:36,720
we get four executions from our sample

567
00:23:36,720 --> 00:23:38,480
in the same week

568
00:23:38,480 --> 00:23:41,200
such that we can get rid of

569
00:23:41,200 --> 00:23:44,400
time variability and then we use one of

570
00:23:44,400 --> 00:23:47,200
the classic techniques from prior work

571
00:23:47,200 --> 00:23:49,600
as proposed by bailly at all because

572
00:23:49,600 --> 00:23:50,640
they had

573
00:23:50,640 --> 00:23:53,760
the same features as us and so

574
00:23:53,760 --> 00:23:56,559
we use four executions

575
00:23:56,559 --> 00:23:59,919
and the idea is that all of those four

576
00:23:59,919 --> 00:24:02,080
executions should fall into the same

577
00:24:02,080 --> 00:24:03,760
clusters

578
00:24:03,760 --> 00:24:04,400
and

579
00:24:04,400 --> 00:24:06,960
what we find out is that

580
00:24:06,960 --> 00:24:08,080
for

581
00:24:08,080 --> 00:24:09,679
67

582
00:24:09,679 --> 00:24:12,640
of the malware the four executions fall

583
00:24:12,640 --> 00:24:15,520
into the same cluster however

584
00:24:15,520 --> 00:24:19,760
for the rest of the manga there is 27

585
00:24:19,760 --> 00:24:20,720
of them

586
00:24:20,720 --> 00:24:22,880
that have executions fold into two

587
00:24:22,880 --> 00:24:24,400
different clusters

588
00:24:24,400 --> 00:24:26,799
and five percent of them have execution

589
00:24:26,799 --> 00:24:28,720
falling into three different clusters

590
00:24:28,720 --> 00:24:31,520
and one percent have all the executions

591
00:24:31,520 --> 00:24:35,679
fall into all four different clusters

592
00:24:35,840 --> 00:24:37,360
and therefore we conclude that

593
00:24:37,360 --> 00:24:40,159
clustering results uh with one trace per

594
00:24:40,159 --> 00:24:42,720
sample may not correctly cluster malware

595
00:24:42,720 --> 00:24:45,360
into families so an analyst needs to be

596
00:24:45,360 --> 00:24:48,400
careful when using one executions per

597
00:24:48,400 --> 00:24:51,919
one execution per malware

598
00:24:54,240 --> 00:24:57,200
and next we look into anomaly detector

599
00:24:57,200 --> 00:24:58,880
and the questions we

600
00:24:58,880 --> 00:25:01,200
want to answer are as follows

601
00:25:01,200 --> 00:25:03,760
is one execution per benign sample

602
00:25:03,760 --> 00:25:07,120
enough to generalize

603
00:25:07,120 --> 00:25:10,080
and second is what is the success rate

604
00:25:10,080 --> 00:25:14,159
for catching malware and pop in the wild

605
00:25:14,159 --> 00:25:17,200
and basically the intuition is that we

606
00:25:17,200 --> 00:25:18,240
want to

607
00:25:18,240 --> 00:25:21,440
be able to capture most of the benign

608
00:25:21,440 --> 00:25:24,159
executions

609
00:25:24,159 --> 00:25:26,559
so basically the methodology

610
00:25:26,559 --> 00:25:29,600
for anomaly detection experiment is as

611
00:25:29,600 --> 00:25:32,960
follows we first implement a very well

612
00:25:32,960 --> 00:25:35,679
known technique known the sc access

613
00:25:35,679 --> 00:25:36,559
miner

614
00:25:36,559 --> 00:25:37,520
and then

615
00:25:37,520 --> 00:25:40,159
in this case we select 90 percent of the

616
00:25:40,159 --> 00:25:42,960
benign samples to extract all the file

617
00:25:42,960 --> 00:25:44,400
right directories

618
00:25:44,400 --> 00:25:46,240
and then once you extract the file right

619
00:25:46,240 --> 00:25:48,799
directories you create a tree of

620
00:25:48,799 --> 00:25:50,559
well-known behavior

621
00:25:50,559 --> 00:25:51,520
and

622
00:25:51,520 --> 00:25:55,279
the next step is to test it on other b9

623
00:25:55,279 --> 00:25:57,919
and malware samples to see whether they

624
00:25:57,919 --> 00:26:01,039
fit into this well-known benign behavior

625
00:26:01,039 --> 00:26:02,720
and if they do not they would raise an

626
00:26:02,720 --> 00:26:04,720
alarm as for

627
00:26:04,720 --> 00:26:07,360
axis miner

628
00:26:07,360 --> 00:26:10,559
so we start off with one random

629
00:26:10,559 --> 00:26:12,640
benign execution

630
00:26:12,640 --> 00:26:13,520
and

631
00:26:13,520 --> 00:26:16,559
we construct this

632
00:26:16,640 --> 00:26:20,480
benign behavior tree and we found out

633
00:26:20,480 --> 00:26:23,120
that we get a very high detection rate

634
00:26:23,120 --> 00:26:26,000
for malware however at the same time we

635
00:26:26,000 --> 00:26:28,880
also get a very high false positive rate

636
00:26:28,880 --> 00:26:31,760
so if you can see from the picture below

637
00:26:31,760 --> 00:26:35,760
a 1.0 detection means that for

638
00:26:35,760 --> 00:26:38,640
about 70 percent of the malware samples

639
00:26:38,640 --> 00:26:41,440
we could detect them in all machines

640
00:26:41,440 --> 00:26:44,320
and 0.9 means means that we

641
00:26:44,320 --> 00:26:46,480
would miss them in 10

642
00:26:46,480 --> 00:26:47,760
of the machines

643
00:26:47,760 --> 00:26:51,158
and so on

644
00:26:52,559 --> 00:26:55,600
then we use all the benign executions

645
00:26:55,600 --> 00:26:58,240
and we can see that the false positive

646
00:26:58,240 --> 00:27:01,200
rate drops significantly however there

647
00:27:01,200 --> 00:27:02,080
are

648
00:27:02,080 --> 00:27:05,200
also more than 10 of the benign samples

649
00:27:05,200 --> 00:27:07,520
that we still detect in all machines as

650
00:27:07,520 --> 00:27:10,799
if they were malware samples

651
00:27:10,799 --> 00:27:12,640
and and however

652
00:27:12,640 --> 00:27:15,919
this also shows that the

653
00:27:15,919 --> 00:27:18,720
malware detection rate is low because

654
00:27:18,720 --> 00:27:19,600
now

655
00:27:19,600 --> 00:27:20,960
you

656
00:27:20,960 --> 00:27:25,360
can only detect up to 43 or 44

657
00:27:25,360 --> 00:27:27,440
of the malware samples

658
00:27:27,440 --> 00:27:30,559
in all machines

659
00:27:33,279 --> 00:27:36,080
therefore as a summary we conclude the

660
00:27:36,080 --> 00:27:38,640
following when employing a model

661
00:27:38,640 --> 00:27:42,080
analysis method such as clustering or

662
00:27:42,080 --> 00:27:43,360
detection

663
00:27:43,360 --> 00:27:44,320
uh

664
00:27:44,320 --> 00:27:46,840
the analyst needs to be careful

665
00:27:46,840 --> 00:27:48,799
and

666
00:27:48,799 --> 00:27:51,360
the analyst needs to use more than one

667
00:27:51,360 --> 00:27:54,559
execution for a malware sample and also

668
00:27:54,559 --> 00:27:57,039
more than one execution for the benign

669
00:27:57,039 --> 00:28:00,080
samples such that they can generalize

670
00:28:00,080 --> 00:28:02,399
them benign and malicious behavior

671
00:28:02,399 --> 00:28:04,880
and be able to really capture what's

672
00:28:04,880 --> 00:28:08,000
happening in the wild

673
00:28:11,200 --> 00:28:14,080
so to conclude the talk our work

674
00:28:14,080 --> 00:28:16,480
presents the first measurement of

675
00:28:16,480 --> 00:28:18,399
malware behavior at scale

676
00:28:18,399 --> 00:28:20,960
and we show that a single trace from our

677
00:28:20,960 --> 00:28:22,640
malware sample is

678
00:28:22,640 --> 00:28:24,240
is not enough

679
00:28:24,240 --> 00:28:27,520
next we also measure the variability and

680
00:28:27,520 --> 00:28:30,000
we show that the variability in malware

681
00:28:30,000 --> 00:28:32,480
is greater than pup and benign across

682
00:28:32,480 --> 00:28:35,919
both time and machines and we refer to

683
00:28:35,919 --> 00:28:37,600
our

684
00:28:37,600 --> 00:28:39,679
timing variability results from the

685
00:28:39,679 --> 00:28:42,080
paper

686
00:28:42,559 --> 00:28:45,039
last we say that it is still feasible to

687
00:28:45,039 --> 00:28:47,520
find an invariant in malware behavior

688
00:28:47,520 --> 00:28:49,840
and we show that ev vendors can safely

689
00:28:49,840 --> 00:28:52,158
do it

690
00:28:53,120 --> 00:28:54,799
and thank you again for attending my

691
00:28:54,799 --> 00:28:56,880
talk my name is erin of los angeles and

692
00:28:56,880 --> 00:28:59,440
you can ask me questions in my email

693
00:28:59,440 --> 00:29:02,440
below

694
00:29:02,820 --> 00:29:05,990
[Music]

