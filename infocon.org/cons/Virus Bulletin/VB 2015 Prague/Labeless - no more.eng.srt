1
00:00:04,670 --> 00:00:09,090
good morning welcome to this session in

2
00:00:09,090 --> 00:00:10,889
the Red Room and thank you for coming

3
00:00:10,889 --> 00:00:14,160
here escaping the apt definition madness

4
00:00:14,160 --> 00:00:16,800
in the other room this talk is

5
00:00:16,800 --> 00:00:18,900
definitely proving to be much more and

6
00:00:18,900 --> 00:00:20,760
looking for the paper is going to be

7
00:00:20,760 --> 00:00:22,170
much more interesting than the other

8
00:00:22,170 --> 00:00:24,510
thing in that room who can define these

9
00:00:24,510 --> 00:00:28,380
apts anyway so we have a Alexander

10
00:00:28,380 --> 00:00:31,289
Jellicoe from checkpoint who's going to

11
00:00:31,289 --> 00:00:33,510
talk about interesting integration

12
00:00:33,510 --> 00:00:35,489
between those two tools that we very

13
00:00:35,489 --> 00:00:38,160
commonly used either and all the dbg

14
00:00:38,160 --> 00:00:43,500
like standard thank you so hello and

15
00:00:43,500 --> 00:00:45,719
welcome to the presentation about our

16
00:00:45,719 --> 00:00:48,539
two meant for mobile researchers and

17
00:00:48,539 --> 00:00:51,140
reverse engineers called label asst

18
00:00:51,140 --> 00:00:53,579
first of all let me introduce one of my

19
00:00:53,579 --> 00:00:55,260
team members who has done most of the

20
00:00:55,260 --> 00:00:57,539
programming work for the project it's

21
00:00:57,539 --> 00:01:00,690
Alexander traffic-choked he's working as

22
00:01:00,690 --> 00:01:03,120
mulberry circle in my team but

23
00:01:03,120 --> 00:01:04,559
unfortunately he's not on the stage

24
00:01:04,559 --> 00:01:07,650
today and my name is Alexandra che lead

25
00:01:07,650 --> 00:01:10,770
cow I'm a team leader for malware

26
00:01:10,770 --> 00:01:13,950
research team and checkpoint a little

27
00:01:13,950 --> 00:01:16,530
bit about myself I started to learn

28
00:01:16,530 --> 00:01:19,770
things about malware and hacking and all

29
00:01:19,770 --> 00:01:22,740
this stuff at the age of 14 and my first

30
00:01:22,740 --> 00:01:26,689
serious project was at age of 17 so

31
00:01:26,689 --> 00:01:28,950
basically it's more than 10 years of

32
00:01:28,950 --> 00:01:30,600
experience for me in the sphere of

33
00:01:30,600 --> 00:01:33,600
reverse engineering when we started

34
00:01:33,600 --> 00:01:35,460
developing label is we haven't realized

35
00:01:35,460 --> 00:01:39,060
that it will come up like that it even

36
00:01:39,060 --> 00:01:42,119
at the stage of proof of concept my

37
00:01:42,119 --> 00:01:44,220
whole team started to use that too in

38
00:01:44,220 --> 00:01:46,770
our day-to-day work and it's improved

39
00:01:46,770 --> 00:01:48,740
our productivity by significant amount

40
00:01:48,740 --> 00:01:51,720
so now we want to present this tool to

41
00:01:51,720 --> 00:01:54,119
you and by the way it's available as

42
00:01:54,119 --> 00:01:56,880
open source and on our bit bucket and

43
00:01:56,880 --> 00:01:59,399
we'll be posting the link in the end of

44
00:01:59,399 --> 00:02:04,380
our presentation so let's start here are

45
00:02:04,380 --> 00:02:06,479
the problems that would have been facing

46
00:02:06,479 --> 00:02:09,508
in our day-to-day work the first problem

47
00:02:09,508 --> 00:02:12,810
is that we cannot synchronize labels on

48
00:02:12,810 --> 00:02:13,920
the fly between

49
00:02:13,920 --> 00:02:17,310
I Denali the second problem is that we

50
00:02:17,310 --> 00:02:19,319
were using an inconvenient and manual

51
00:02:19,319 --> 00:02:22,739
way basically imported constructor to to

52
00:02:22,739 --> 00:02:27,239
fix imports and in our dumps and finally

53
00:02:27,239 --> 00:02:29,730
the third problem is that if we needed

54
00:02:29,730 --> 00:02:32,580
some sort of data to be found protest

55
00:02:32,580 --> 00:02:36,120
and sent back from added to the debugger

56
00:02:36,120 --> 00:02:41,130
we were using we're writing a script for

57
00:02:41,130 --> 00:02:43,530
ollie executing in there's an expert in

58
00:02:43,530 --> 00:02:45,239
the result of the file then writing

59
00:02:45,239 --> 00:02:47,459
another script for idea to work on the

60
00:02:47,459 --> 00:02:49,319
expert data set so you've got a point

61
00:02:49,319 --> 00:02:51,260
it's like not seamless interaction and

62
00:02:51,260 --> 00:02:56,430
it took that much time and that's it now

63
00:02:56,430 --> 00:03:01,140
it's all changed with help of labels so

64
00:03:01,140 --> 00:03:02,280
let's take a look at the main features

65
00:03:02,280 --> 00:03:05,370
of labels they will all be discussed in

66
00:03:05,370 --> 00:03:08,299
more details later the first speaker is

67
00:03:08,299 --> 00:03:11,040
label synchronization and its image

68
00:03:11,040 --> 00:03:14,010
based independent the second one is

69
00:03:14,010 --> 00:03:17,280
dumping code directly from ally and we

70
00:03:17,280 --> 00:03:21,450
call this figure I the dump automatic on

71
00:03:21,450 --> 00:03:23,930
the fly inverts fixing while dumping

72
00:03:23,930 --> 00:03:26,609
remove all the Python scripts execution

73
00:03:26,609 --> 00:03:32,310
and I'd all these croutons in routine in

74
00:03:32,310 --> 00:03:33,630
order to better understand all for the

75
00:03:33,630 --> 00:03:35,549
material let's start from quick overview

76
00:03:35,549 --> 00:03:39,900
of the architecture of labels labels

77
00:03:39,900 --> 00:03:42,299
isn't a comp two component system one

78
00:03:42,299 --> 00:03:43,650
part of the system is running on the

79
00:03:43,650 --> 00:03:45,959
other side and the other on the other

80
00:03:45,959 --> 00:03:49,109
side they share the same core interface

81
00:03:49,109 --> 00:03:52,380
called big score basically all the

82
00:03:52,380 --> 00:03:57,060
communications are done through it since

83
00:03:57,060 --> 00:03:58,410
it's the most significant part of the

84
00:03:58,410 --> 00:04:00,810
system let's take a look at it in more

85
00:04:00,810 --> 00:04:04,290
details big score provides like RPC

86
00:04:04,290 --> 00:04:06,239
server client communication

87
00:04:06,239 --> 00:04:08,190
functionality and that's how they

88
00:04:08,190 --> 00:04:10,910
identity are able to hear each other and

89
00:04:10,910 --> 00:04:13,500
if something needs to be done RPC

90
00:04:13,500 --> 00:04:15,900
request will be easy it then it will

91
00:04:15,900 --> 00:04:18,988
trigger an underline module and which is

92
00:04:18,988 --> 00:04:20,630
responsible for it type of requests

93
00:04:20,630 --> 00:04:23,460
right now we have like 300 line models

94
00:04:23,460 --> 00:04:26,940
it's idle ramp model its label

95
00:04:26,940 --> 00:04:27,720
synchronization

96
00:04:27,720 --> 00:04:29,670
oil and buy some scripts execution and

97
00:04:29,670 --> 00:04:34,140
direction model so what's under the hood

98
00:04:34,140 --> 00:04:37,380
of label is we're using Ida API in

99
00:04:37,380 --> 00:04:40,910
Python for either side plug-in module

100
00:04:40,910 --> 00:04:46,890
Python 40 lee side plug-in module it's

101
00:04:46,890 --> 00:04:48,600
basically switch generated wrappers

102
00:04:48,600 --> 00:04:52,500
around all the dbgap I and probe based

103
00:04:52,500 --> 00:04:54,300
communication for the code for all kind

104
00:04:54,300 --> 00:04:58,610
of receive server client interactions

105
00:04:59,030 --> 00:05:03,060
now let's start to take a look at the

106
00:05:03,060 --> 00:05:08,760
label synchronization figure for example

107
00:05:08,760 --> 00:05:10,770
we've opened some executable in ida and

108
00:05:10,770 --> 00:05:12,810
produce manifold names for all the

109
00:05:12,810 --> 00:05:16,640
functions they are all saved in idv and

110
00:05:16,640 --> 00:05:19,590
now we start at the bugger and have no

111
00:05:19,590 --> 00:05:21,810
information here so we just have damaged

112
00:05:21,810 --> 00:05:24,030
function addresses instead of names and

113
00:05:24,030 --> 00:05:26,520
of course makes debugging process an

114
00:05:26,520 --> 00:05:28,350
unpleasant experience it's like the bug

115
00:05:28,350 --> 00:05:34,200
and without symbols basically so what

116
00:05:34,200 --> 00:05:37,260
are the existing solution for that first

117
00:05:37,260 --> 00:05:40,410
one we can use a map file but there are

118
00:05:40,410 --> 00:05:43,169
limitations for example it requires a

119
00:05:43,169 --> 00:05:45,720
lot of steps to be done manually we need

120
00:05:45,720 --> 00:05:47,940
expert labels from Ida to files and

121
00:05:47,940 --> 00:05:49,020
transfer that file to the virtual

122
00:05:49,020 --> 00:05:52,200
machine then manila selected file from

123
00:05:52,200 --> 00:05:54,740
the menu and find what to import and

124
00:05:54,740 --> 00:05:58,669
finally applied it's takes too much time

125
00:05:58,669 --> 00:06:01,919
also automatic updating of labels is not

126
00:06:01,919 --> 00:06:04,320
supported so you need to perform

127
00:06:04,320 --> 00:06:06,330
aforementioned steps every time your

128
00:06:06,330 --> 00:06:10,110
update something either Andrew basin is

129
00:06:10,110 --> 00:06:12,930
not supported so it's if the model that

130
00:06:12,930 --> 00:06:14,760
you're working on will be mapped to a

131
00:06:14,760 --> 00:06:16,650
different image base you'll be in

132
00:06:16,650 --> 00:06:20,299
trouble and forced into even more walk

133
00:06:20,419 --> 00:06:22,650
another possible solution is to apply

134
00:06:22,650 --> 00:06:26,610
labels manila by hand but it's time

135
00:06:26,610 --> 00:06:29,310
consuming and it's getting worse when

136
00:06:29,310 --> 00:06:35,520
the IDB grows and it's error-prone so to

137
00:06:35,520 --> 00:06:38,340
address the issues labels was great

138
00:06:38,340 --> 00:06:40,320
invented and

139
00:06:40,320 --> 00:06:42,580
it allows seamless synchronization of

140
00:06:42,580 --> 00:06:45,870
labels which include function names

141
00:06:45,870 --> 00:06:49,450
comments global variable syncing with

142
00:06:49,450 --> 00:06:53,530
the mangling we can synchronize all this

143
00:06:53,530 --> 00:06:55,240
information on demand by clicking sync

144
00:06:55,240 --> 00:06:58,150
now button in either and also

145
00:06:58,150 --> 00:07:02,890
automatically on any rename event so

146
00:07:02,890 --> 00:07:04,360
every time you change you label our

147
00:07:04,360 --> 00:07:06,280
function name or something else and I

148
00:07:06,280 --> 00:07:07,840
db's is that will bethe matically

149
00:07:07,840 --> 00:07:11,440
propagate it as a debugger and finally

150
00:07:11,440 --> 00:07:13,300
we support image-based independent

151
00:07:13,300 --> 00:07:14,980
synchronization we'll talk about that in

152
00:07:14,980 --> 00:07:20,290
a minute here's how the executable looks

153
00:07:20,290 --> 00:07:22,350
like in the bugger if you have no labels

154
00:07:22,350 --> 00:07:25,960
even with if we have a perfect idb we're

155
00:07:25,960 --> 00:07:29,650
still blind in that environment and now

156
00:07:29,650 --> 00:07:38,039
we use labels now it looks much better

157
00:07:39,120 --> 00:07:41,500
so what's based independent

158
00:07:41,500 --> 00:07:44,050
synchronization it means that even if

159
00:07:44,050 --> 00:07:45,910
the executable will be located on the

160
00:07:45,910 --> 00:07:48,730
next run to a different image base for

161
00:07:48,730 --> 00:07:50,410
example due to malware executable

162
00:07:50,410 --> 00:07:52,120
dynamically allocate memory in a

163
00:07:52,120 --> 00:07:54,190
different region we will still be able

164
00:07:54,190 --> 00:07:55,840
to synchronize labels like nothing

165
00:07:55,840 --> 00:08:00,880
happened here is an example until after

166
00:08:00,880 --> 00:08:02,440
we have a model maps that they match

167
00:08:02,440 --> 00:08:06,160
base that you can see on the screen we

168
00:08:06,160 --> 00:08:07,870
have the IDP that contains it model also

169
00:08:07,870 --> 00:08:11,590
mapped at this address and on the right

170
00:08:11,590 --> 00:08:13,540
we have the same model but map at a

171
00:08:13,540 --> 00:08:21,090
different image base what what can we do

172
00:08:21,090 --> 00:08:25,720
we can fill all labels by hand takes too

173
00:08:25,720 --> 00:08:28,350
much time and leads to an obvious errors

174
00:08:28,350 --> 00:08:33,880
and we can also can try to rebase the

175
00:08:33,880 --> 00:08:36,610
model in ID itself but usually it leads

176
00:08:36,610 --> 00:08:39,460
to problems with jumps calls offsets and

177
00:08:39,460 --> 00:08:42,669
all this kind of stuff and finally we

178
00:08:42,669 --> 00:08:43,990
can force binary to allocate memory

179
00:08:43,990 --> 00:08:47,140
address that we need but this requires a

180
00:08:47,140 --> 00:08:48,430
lot of additional trace in and

181
00:08:48,430 --> 00:08:52,319
controlling of the executable

182
00:08:52,329 --> 00:09:01,569
all we can just use labels despite three

183
00:09:01,569 --> 00:09:04,119
completely different image basis we're

184
00:09:04,119 --> 00:09:06,399
still able to sync labels and other

185
00:09:06,399 --> 00:09:14,139
information now to the next and my from

186
00:09:14,139 --> 00:09:15,759
my point of view the most powerful

187
00:09:15,759 --> 00:09:19,089
feature of labels I de dum i de damp is

188
00:09:19,089 --> 00:09:20,559
a feature that allows you to dump any

189
00:09:20,559 --> 00:09:22,720
memory region of the executable directly

190
00:09:22,720 --> 00:09:25,449
to ID be without using any third-party

191
00:09:25,449 --> 00:09:27,910
tools and while automatically thinks in

192
00:09:27,910 --> 00:09:33,850
import on the fly the reuse cases when

193
00:09:33,850 --> 00:09:35,199
using I damn can be really beneficial

194
00:09:35,199 --> 00:09:38,739
for example the debug process has

195
00:09:38,739 --> 00:09:40,449
attracted model which doesn't bring the

196
00:09:40,449 --> 00:09:44,040
models list a heap spray was performed

197
00:09:44,040 --> 00:09:48,639
no valid p header grab the tempered

198
00:09:48,639 --> 00:09:52,899
table analyzed model contains stolen

199
00:09:52,899 --> 00:09:55,839
bytes or while following multiple

200
00:09:55,839 --> 00:10:00,790
injections here's how the main view of

201
00:10:00,790 --> 00:10:03,309
the ida dump looks like we can select

202
00:10:03,309 --> 00:10:05,529
required regions of memories it needs to

203
00:10:05,529 --> 00:10:12,249
be dumped or provide them manually there

204
00:10:12,249 --> 00:10:14,049
are free mode of operation of ida dump

205
00:10:14,049 --> 00:10:17,110
the first one is wipe and import it will

206
00:10:17,110 --> 00:10:21,399
wipe your current ID beam and a dump

207
00:10:21,399 --> 00:10:28,269
selected region state the second is ad

208
00:10:28,269 --> 00:10:31,119
segment it will preserve your current

209
00:10:31,119 --> 00:10:35,220
adb and add the selected region to it

210
00:10:35,220 --> 00:10:39,759
and the third one is all over right

211
00:10:39,759 --> 00:10:42,160
segment you can think of it like an

212
00:10:42,160 --> 00:10:44,459
update

213
00:10:50,910 --> 00:10:54,670
how does it all work basically I the

214
00:10:54,670 --> 00:10:56,620
damn performs safe memory to avoiding

215
00:10:56,620 --> 00:10:59,920
page card tricks also it performs

216
00:10:59,920 --> 00:11:02,740
exported functions and API scan and

217
00:11:02,740 --> 00:11:04,300
external models and fixes these

218
00:11:04,300 --> 00:11:06,820
functions references in target ID be so

219
00:11:06,820 --> 00:11:07,930
it's basically interest fixing

220
00:11:07,930 --> 00:11:11,410
capability p header analysis has been

221
00:11:11,410 --> 00:11:15,339
performed so it's if it's valid it helps

222
00:11:15,339 --> 00:11:17,020
haider to decide where the deities and

223
00:11:17,020 --> 00:11:20,410
where the code is and finally perform

224
00:11:20,410 --> 00:11:24,510
sports protest analysis of dumped code

225
00:11:25,320 --> 00:11:28,260
here's how post-petition alice is formed

226
00:11:28,260 --> 00:11:30,880
we have coals and jumps like that and

227
00:11:30,880 --> 00:11:33,100
the codes references by such calls and

228
00:11:33,100 --> 00:11:34,570
chants will not be disassembled by

229
00:11:34,570 --> 00:11:40,390
either in the damp wet track in such

230
00:11:40,390 --> 00:11:42,339
situations fixing them and forced into

231
00:11:42,339 --> 00:11:49,060
the sample now let's talk about how I

232
00:11:49,060 --> 00:11:50,950
did dump can be useful when follow the

233
00:11:50,950 --> 00:11:53,620
multiple injections first of all we'll

234
00:11:53,620 --> 00:11:55,750
discuss the case how to solve the

235
00:11:55,750 --> 00:11:57,880
problem without either damp here's our

236
00:11:57,880 --> 00:12:01,000
malware and it in checks itself in the

237
00:12:01,000 --> 00:12:06,130
protest number one so we can down the

238
00:12:06,130 --> 00:12:08,290
tree Jen using ordinary tools like Lord

239
00:12:08,290 --> 00:12:10,600
p restore p header and fixing boots

240
00:12:10,600 --> 00:12:15,240
using i prefer constructor two and

241
00:12:15,240 --> 00:12:17,350
finally which refers the resulting down

242
00:12:17,350 --> 00:12:18,970
from virtual machine and loaded lead

243
00:12:18,970 --> 00:12:22,300
azide then malware performs another

244
00:12:22,300 --> 00:12:27,700
inject into the second proaches we are

245
00:12:27,700 --> 00:12:28,900
performing all the phone management

246
00:12:28,900 --> 00:12:30,310
actions again while loading the

247
00:12:30,310 --> 00:12:32,020
resultant dump in separate idea instance

248
00:12:32,020 --> 00:12:36,280
and separate adb as well while we can

249
00:12:36,280 --> 00:12:39,720
perform a lot of injections like that

250
00:12:42,720 --> 00:12:44,850
we'll end up with a lot of separate I

251
00:12:44,850 --> 00:12:47,779
DBS without any connections between them

252
00:12:47,779 --> 00:12:52,769
it's like crazy so and here is the

253
00:12:52,769 --> 00:12:56,220
solution that either damn provides once

254
00:12:56,220 --> 00:12:58,319
again he's our man we're eating chex

255
00:12:58,319 --> 00:13:02,879
itself in the first process we're

256
00:13:02,879 --> 00:13:04,350
dumping that directly to the IDB with

257
00:13:04,350 --> 00:13:10,110
automatic fixing of inputs and then andy

258
00:13:10,110 --> 00:13:15,569
jackson to the second process what

259
00:13:15,569 --> 00:13:17,189
happened once again using ad segment

260
00:13:17,189 --> 00:13:22,170
mode of operation the damn friction will

261
00:13:22,170 --> 00:13:28,350
be edited the same ID be so here are

262
00:13:28,350 --> 00:13:31,889
advantages of using I damn all valuable

263
00:13:31,889 --> 00:13:34,019
information is located in one I DB file

264
00:13:34,019 --> 00:13:36,449
we call it single research case one ID

265
00:13:36,449 --> 00:13:39,930
be no need to handle multiple other

266
00:13:39,930 --> 00:13:41,850
instances and look for correlation with

267
00:13:41,850 --> 00:13:45,060
other databases the same external

268
00:13:45,060 --> 00:13:48,689
section for jumping call separation it's

269
00:13:48,689 --> 00:13:50,519
basically a legitimate fixed simple

270
00:13:50,519 --> 00:13:54,120
stable and also sections relations are

271
00:13:54,120 --> 00:13:58,199
preserved we also have some

272
00:13:58,199 --> 00:14:00,240
disadvantages at the moment for example

273
00:14:00,240 --> 00:14:02,939
my from reaches of memory with addresses

274
00:14:02,939 --> 00:14:06,779
that is already used however it can we

275
00:14:06,779 --> 00:14:08,610
have a solution for that we can use

276
00:14:08,610 --> 00:14:10,500
segments in either to address this issue

277
00:14:10,500 --> 00:14:16,589
we just need to implement that next

278
00:14:16,589 --> 00:14:22,259
imports fixing functionality here's how

279
00:14:22,259 --> 00:14:24,480
we usually make jumps and call human

280
00:14:24,480 --> 00:14:26,160
readable and dumped memory and without

281
00:14:26,160 --> 00:14:28,800
using either dam we'll use some dumping

282
00:14:28,800 --> 00:14:32,100
tool and then apply imprint

283
00:14:32,100 --> 00:14:34,769
reconstructor like tool to the dump to

284
00:14:34,769 --> 00:14:37,920
restore inputs and basically it's a lot

285
00:14:37,920 --> 00:14:39,449
of numbers a lot of data and all those

286
00:14:39,449 --> 00:14:45,300
rooms for errors so dry even more

287
00:14:45,300 --> 00:14:47,879
disadvantages for example you need to

288
00:14:47,879 --> 00:14:49,740
perform manual search of imports table

289
00:14:49,740 --> 00:14:52,829
in already running binary you also need

290
00:14:52,829 --> 00:14:55,110
to manually calculate relevant upsets

291
00:14:55,110 --> 00:14:56,810
and addresses

292
00:14:56,810 --> 00:14:59,250
in Perth table may reside in multiple

293
00:14:59,250 --> 00:15:03,350
sections time consuming and error-prone

294
00:15:03,350 --> 00:15:06,650
so here's our solution to that problem

295
00:15:06,650 --> 00:15:09,120
we have an ID be with damned member

296
00:15:09,120 --> 00:15:11,040
regions by the heaven and resulting

297
00:15:11,040 --> 00:15:13,590
bridge table so label send in a request

298
00:15:13,590 --> 00:15:16,290
to enumerate all loaded models in the

299
00:15:16,290 --> 00:15:21,000
target process then it will gather all

300
00:15:21,000 --> 00:15:22,860
exported functions from this model

301
00:15:22,860 --> 00:15:27,150
alongside with their addresses this that

302
00:15:27,150 --> 00:15:28,860
will be transferred to either install it

303
00:15:28,860 --> 00:15:35,790
in the labels internal structure next we

304
00:15:35,790 --> 00:15:38,610
find all unresolved calls jumps etc in

305
00:15:38,610 --> 00:15:41,570
our idb we take that address and check

306
00:15:41,570 --> 00:15:46,100
if we have it in external structure if

307
00:15:46,100 --> 00:15:51,600
yes we'll turn the label for that create

308
00:15:51,600 --> 00:15:53,760
an external segment and place an

309
00:15:53,760 --> 00:15:55,470
appropriate import record here and fix

310
00:15:55,470 --> 00:15:58,250
it in the co 2 points its record

311
00:15:58,250 --> 00:16:00,630
basically we're Eastern imports tables

312
00:16:00,630 --> 00:16:09,140
on the fly so we go from this to this

313
00:16:11,600 --> 00:16:15,170
then advantages are obvious for example

314
00:16:15,170 --> 00:16:17,430
no need to perform error-prone tests

315
00:16:17,430 --> 00:16:19,350
such as searching for sections with

316
00:16:19,350 --> 00:16:22,700
imprints or manipulative satin dresses

317
00:16:22,700 --> 00:16:25,530
the next advantage is automatic fiction

318
00:16:25,530 --> 00:16:28,190
of functions located in external modules

319
00:16:28,190 --> 00:16:30,630
it's quicker than an existing solution

320
00:16:30,630 --> 00:16:33,390
and it saves precious rich researchers

321
00:16:33,390 --> 00:16:36,930
time and it can be performed on the fly

322
00:16:36,930 --> 00:16:38,460
while dampens approach is resulting in

323
00:16:38,460 --> 00:16:43,320
to the seamless experience and the last

324
00:16:43,320 --> 00:16:45,690
picture of labels I'd always cruising

325
00:16:45,690 --> 00:16:51,540
interaction here is the main idea view

326
00:16:51,540 --> 00:16:54,570
of it on the left side you can see the

327
00:16:54,570 --> 00:16:56,250
code that will be executed in either and

328
00:16:56,250 --> 00:16:59,070
on the right side view the code that

329
00:16:59,070 --> 00:17:01,590
will be execute an ollie it has syntax

330
00:17:01,590 --> 00:17:03,780
highlighting different color schemes in

331
00:17:03,780 --> 00:17:07,459
a report in a lot of other stuff

332
00:17:08,599 --> 00:17:10,640
these scripts can share data between

333
00:17:10,640 --> 00:17:12,949
them for example we can produce a

334
00:17:12,949 --> 00:17:15,049
dictionary nida placed into external

335
00:17:15,049 --> 00:17:18,980
variable and propagate it over some data

336
00:17:18,980 --> 00:17:23,329
on the other side it's a complete

337
00:17:23,329 --> 00:17:28,789
scripts interaction here's how it works

338
00:17:28,789 --> 00:17:31,820
internally we are feeding I dentally

339
00:17:31,820 --> 00:17:34,100
Python scripts provided by the user to

340
00:17:34,100 --> 00:17:36,080
label scripting engine which is the part

341
00:17:36,080 --> 00:17:40,610
of big score then we execute an either

342
00:17:40,610 --> 00:17:42,409
python script infilling external

343
00:17:42,409 --> 00:17:46,460
variable it will pass along side with

344
00:17:46,460 --> 00:17:49,809
all the Python script to all the dbg

345
00:17:49,809 --> 00:17:52,929
finally it will be executed nollie

346
00:17:52,929 --> 00:17:55,400
external variable will be used as needed

347
00:17:55,400 --> 00:18:01,309
so we can pass any data here and the

348
00:18:01,309 --> 00:18:08,000
conclusion labels is automatic tool for

349
00:18:08,000 --> 00:18:09,679
on-the-fly label synchronization between

350
00:18:09,679 --> 00:18:12,580
identity that supports model rebasing

351
00:18:12,580 --> 00:18:14,990
it's automatic tool for on-the-fly

352
00:18:14,990 --> 00:18:16,640
Empress fixing that is faster than any

353
00:18:16,640 --> 00:18:20,299
existing tool it's convenient tool for

354
00:18:20,299 --> 00:18:24,350
idea all descriptions energy and easy to

355
00:18:24,350 --> 00:18:30,470
use memory dumping tool so of course

356
00:18:30,470 --> 00:18:34,370
there are some areas of improvement we

357
00:18:34,370 --> 00:18:36,559
want to add a vin DB to support it will

358
00:18:36,559 --> 00:18:39,409
virtually allow you to dump the code

359
00:18:39,409 --> 00:18:41,539
directly from Colonel while remove the

360
00:18:41,539 --> 00:18:46,280
bug in and we want to add an x64

361
00:18:46,280 --> 00:18:51,799
architecture support and the best of all

362
00:18:51,799 --> 00:18:54,770
labels is available as open source you

363
00:18:54,770 --> 00:18:57,950
can find it on a big bucket and you can

364
00:18:57,950 --> 00:19:04,520
see the link in the slide also I have a

365
00:19:04,520 --> 00:19:13,909
demo of how the order tool works I don't

366
00:19:13,909 --> 00:19:17,860
know if it can be can be seen

367
00:19:22,760 --> 00:19:29,460
yeah so basically we have region in

368
00:19:29,460 --> 00:19:34,500
alley where the mulberry sides so here

369
00:19:34,500 --> 00:19:39,930
is a function and basically we want this

370
00:19:39,930 --> 00:19:45,990
in the idea and we can easily dump it

371
00:19:45,990 --> 00:19:48,600
using either dump we're just testing the

372
00:19:48,600 --> 00:19:51,150
connection to the virtual machine it's

373
00:19:51,150 --> 00:19:54,900
talking to the RPC server the connection

374
00:19:54,900 --> 00:19:58,080
is ok so we select why poll and import

375
00:19:58,080 --> 00:20:00,920
so we'll create a new ID be basically

376
00:20:00,920 --> 00:20:04,130
with the region that we need from Holly

377
00:20:04,130 --> 00:20:09,080
so we just select this region click OK

378
00:20:09,770 --> 00:20:12,990
it is transferring data between aliens

379
00:20:12,990 --> 00:20:15,960
either right now so you can see live how

380
00:20:15,960 --> 00:20:20,610
it's propagating data data and here is a

381
00:20:20,610 --> 00:20:24,840
fixed inputs so you just click on the ne

382
00:20:24,840 --> 00:20:27,000
region select any region and it will

383
00:20:27,000 --> 00:20:28,350
automatically restore imports and

384
00:20:28,350 --> 00:20:33,300
everything also of course we'll grab the

385
00:20:33,300 --> 00:20:37,320
strings and all our stuff so it's it's

386
00:20:37,320 --> 00:20:46,560
pretty easy oh here's the strings all

387
00:20:46,560 --> 00:20:54,360
here just with one click also if the

388
00:20:54,360 --> 00:20:56,250
malware is performing like multiple

389
00:20:56,250 --> 00:21:01,920
injections will be shown it later you

390
00:21:01,920 --> 00:21:06,120
can select another region that you want

391
00:21:06,120 --> 00:21:10,080
to dump and it will be dumped in the end

392
00:21:10,080 --> 00:21:14,970
of this database and we'll add the

393
00:21:14,970 --> 00:21:18,030
imports to the same external region so

394
00:21:18,030 --> 00:21:22,200
it will be all in one database you will

395
00:21:22,200 --> 00:21:24,930
be able to see it later so we've run am

396
00:21:24,930 --> 00:21:27,210
aware for some time and it's in there

397
00:21:27,210 --> 00:21:29,160
it's injected itself to different

398
00:21:29,160 --> 00:21:30,419
addresses

399
00:21:30,419 --> 00:21:42,659
a 7000 and a 2000 so it's saying you

400
00:21:42,659 --> 00:21:45,019
addresses it when it needs to be dumped

401
00:21:45,019 --> 00:21:48,989
which is select labels I dumped keep

402
00:21:48,989 --> 00:21:51,809
existing and import so preserving the

403
00:21:51,809 --> 00:21:54,480
database current database and starting

404
00:21:54,480 --> 00:21:57,289
the new region sets need to be done

405
00:21:57,289 --> 00:22:05,100
click OK and as you can see dr functions

406
00:22:05,100 --> 00:22:07,529
are dumping directly into either from

407
00:22:07,529 --> 00:22:13,309
ally with also all the inputs restored

408
00:22:19,730 --> 00:22:26,360
so this basically is basically it you

409
00:22:26,360 --> 00:22:29,080
have any questions

410
00:22:31,710 --> 00:22:35,039
thank you very much Alexander this was

411
00:22:35,039 --> 00:22:36,600
really great presentation so light a

412
00:22:36,600 --> 00:22:38,610
second Alexander with a round of

413
00:22:38,610 --> 00:22:46,770
applause okay do we have any questions

414
00:22:46,770 --> 00:22:57,980
from the audience anybody

415
00:22:58,640 --> 00:23:04,050
so okay so I'll have one question my

416
00:23:04,050 --> 00:23:06,630
question is whether you guys contacted

417
00:23:06,630 --> 00:23:09,240
the either guys about this because it

418
00:23:09,240 --> 00:23:11,490
seems like should also almost be like an

419
00:23:11,490 --> 00:23:13,320
integral part considering the fact they

420
00:23:13,320 --> 00:23:14,820
also have integration with some other

421
00:23:14,820 --> 00:23:17,070
debuggers also not although not as

422
00:23:17,070 --> 00:23:19,680
powerful as this basically when we were

423
00:23:19,680 --> 00:23:21,450
working on the project we found some

424
00:23:21,450 --> 00:23:24,000
bugs in in either so we contacted in

425
00:23:24,000 --> 00:23:26,100
fact Gulf enough to fix out bugs and

426
00:23:26,100 --> 00:23:29,130
they're building custom builds for us

427
00:23:29,130 --> 00:23:34,200
basically and where we will be pushing

428
00:23:34,200 --> 00:23:39,680
that into the 2010 16 plugins contest so

429
00:23:39,680 --> 00:23:44,160
we will see they will notice us anyway

430
00:23:44,160 --> 00:23:46,920
so eventually it may become a part who

431
00:23:46,920 --> 00:23:51,240
knows em why not okay it is great

432
00:23:51,240 --> 00:24:00,240
anybody else more questions nope then

433
00:24:00,240 --> 00:24:02,730
let us think Alexander once again and

434
00:24:02,730 --> 00:24:04,440
thank you for the great presentation

435
00:24:04,440 --> 00:24:05,270
it's time for break

436
00:24:05,270 --> 00:24:07,980
[Applause]

