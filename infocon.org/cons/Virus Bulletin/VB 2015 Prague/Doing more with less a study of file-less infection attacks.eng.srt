1
00:00:00,000 --> 00:00:02,700
there is no need to leave it here before

2
00:00:02,700 --> 00:00:10,200
this end okay so our next presentation

3
00:00:10,200 --> 00:00:14,099
is done by Benjamin Rivera and Rina

4
00:00:14,099 --> 00:00:17,699
innocencio and the subject is doing more

5
00:00:17,699 --> 00:00:18,420
or less

6
00:00:18,420 --> 00:00:23,880
a study of virus infection attacks hello

7
00:00:23,880 --> 00:00:27,960
everyone so traditional malware

8
00:00:27,960 --> 00:00:30,599
infections usually require a malicious

9
00:00:30,599 --> 00:00:33,180
file to be planted on the target system

10
00:00:33,180 --> 00:00:36,059
which then creates a corresponding Auto

11
00:00:36,059 --> 00:00:37,800
Start registry entry to remain

12
00:00:37,800 --> 00:00:41,059
persistent this infections are however

13
00:00:41,059 --> 00:00:43,620
relatively easy to detect and resolve

14
00:00:43,620 --> 00:00:45,690
with the help of constantly improving

15
00:00:45,690 --> 00:00:48,539
file based antivirus solutions now

16
00:00:48,539 --> 00:00:51,270
there's a stealthier way to infect

17
00:00:51,270 --> 00:00:53,910
computers without the users knowledge by

18
00:00:53,910 --> 00:00:57,690
going file s good afternoon everyone

19
00:00:57,690 --> 00:01:00,449
it's awesome to be here in Prague and to

20
00:01:00,449 --> 00:01:04,438
be part of Vivi 2015 conference my name

21
00:01:04,438 --> 00:01:07,380
is Benjamin Rivera and I'm a threat

22
00:01:07,380 --> 00:01:09,510
research and Training Manager from Trend

23
00:01:09,510 --> 00:01:11,820
Micro all the way from Philippines and

24
00:01:11,820 --> 00:01:15,060
Whitney hi I'm Rena inessential also

25
00:01:15,060 --> 00:01:17,880
tried P searcher from Trend Micro and we

26
00:01:17,880 --> 00:01:19,530
will be presenting doing more witness

27
00:01:19,530 --> 00:01:22,619
study of virus infection attacks okay

28
00:01:22,619 --> 00:01:24,659
you heard it right doing more with less

29
00:01:24,659 --> 00:01:27,299
and it's a good way of putting it like

30
00:01:27,299 --> 00:01:30,000
doing nothing with something and I hope

31
00:01:30,000 --> 00:01:32,670
our presentation will better explain

32
00:01:32,670 --> 00:01:37,350
this title so in to start in this

33
00:01:37,350 --> 00:01:40,380
presentation we will present real-world

34
00:01:40,380 --> 00:01:42,600
case scenarios of disinfection

35
00:01:42,600 --> 00:01:44,670
techniques that includes the abuse of

36
00:01:44,670 --> 00:01:48,149
Windows PowerShell features notable

37
00:01:48,149 --> 00:01:50,159
malware families where binaries are

38
00:01:50,159 --> 00:01:52,890
placed in the registry entries recent

39
00:01:52,890 --> 00:01:54,990
attack launch where the malicious code

40
00:01:54,990 --> 00:01:57,030
is injected directly into running

41
00:01:57,030 --> 00:02:00,509
processes and more importantly how users

42
00:02:00,509 --> 00:02:02,340
and organization can protect themselves

43
00:02:02,340 --> 00:02:06,210
from these threats so first what is

44
00:02:06,210 --> 00:02:09,060
finest infection or a wireless malware

45
00:02:09,060 --> 00:02:11,730
so this is a malicious coating that

46
00:02:11,730 --> 00:02:12,540
exists

47
00:02:12,540 --> 00:02:15,209
only in memory rather than installed

48
00:02:15,209 --> 00:02:18,000
into the target computers had harddrive

49
00:02:18,000 --> 00:02:21,180
so the code is written directly into

50
00:02:21,180 --> 00:02:23,760
this is into the system's run so the

51
00:02:23,760 --> 00:02:26,340
code is injected directly into running

52
00:02:26,340 --> 00:02:28,890
processes such as let's say Explorer

53
00:02:28,890 --> 00:02:33,750
that XA or SVC hose that exit and to

54
00:02:33,750 --> 00:02:38,189
provide you a visualization so this is

55
00:02:38,189 --> 00:02:41,340
one or several events or entities from

56
00:02:41,340 --> 00:02:44,129
the web intelligence data set that pops

57
00:02:44,129 --> 00:02:47,250
about file s infections or file s

58
00:02:47,250 --> 00:02:49,560
malware and this includes malware

59
00:02:49,560 --> 00:02:53,430
families such as Pollux and Rambler

60
00:02:53,430 --> 00:02:58,829
exploit kit and baseball so to discuss

61
00:02:58,829 --> 00:03:01,349
details are in details more about this

62
00:03:01,349 --> 00:03:03,720
malware families so let's start with

63
00:03:03,720 --> 00:03:08,400
Pollux so five is the culture of pilot

64
00:03:08,400 --> 00:03:11,250
infection is not you but it's actually

65
00:03:11,250 --> 00:03:14,790
there because file s infections cannot

66
00:03:14,790 --> 00:03:17,010
survive usually a system reboot because

67
00:03:17,010 --> 00:03:20,310
normally it will clears the RAM but this

68
00:03:20,310 --> 00:03:22,409
change however with the emergence of a

69
00:03:22,409 --> 00:03:26,970
malware called Pollux wherein if you

70
00:03:26,970 --> 00:03:29,220
utilize or leverage the Windows registry

71
00:03:29,220 --> 00:03:33,419
and - despite being file s so it

72
00:03:33,419 --> 00:03:38,629
continues to ran upon system startup so

73
00:03:38,629 --> 00:03:41,489
there are many places in the Windows

74
00:03:41,489 --> 00:03:44,010
system including the registry that a

75
00:03:44,010 --> 00:03:46,049
program that a program or piece of

76
00:03:46,049 --> 00:03:49,979
malware may alter to to be able to

77
00:03:49,979 --> 00:03:52,250
achieve persistent across reboots and

78
00:03:52,250 --> 00:03:54,840
one interesting about the developers of

79
00:03:54,840 --> 00:03:57,959
Pollux malware is that it takes

80
00:03:57,959 --> 00:04:00,329
advantage of a flaws in the Windows

81
00:04:00,329 --> 00:04:03,239
registry editor tool by creating a null

82
00:04:03,239 --> 00:04:05,939
value or when you try to court race the

83
00:04:05,939 --> 00:04:08,759
malware you can actually see a non ASCII

84
00:04:08,759 --> 00:04:13,199
string subkey name so as you can see in

85
00:04:13,199 --> 00:04:16,048
the slide ah you are not able to see the

86
00:04:16,048 --> 00:04:18,720
content of the registry key but to be

87
00:04:18,720 --> 00:04:21,810
able to see the content or extract the

88
00:04:21,810 --> 00:04:23,969
contact you can actually use some

89
00:04:23,969 --> 00:04:26,730
programs or tools such as the

90
00:04:26,730 --> 00:04:29,280
registry dumper so this tool actually

91
00:04:29,280 --> 00:04:33,090
scans for and discovers unreadable keys

92
00:04:33,090 --> 00:04:35,700
so in this case as you can see there's a

93
00:04:35,700 --> 00:04:38,840
quite few complex steps and processes

94
00:04:38,840 --> 00:04:43,290
which make it's different from and very

95
00:04:43,290 --> 00:04:45,360
advanced novel compared to a standard

96
00:04:45,360 --> 00:04:48,150
grand key entries because normally a

97
00:04:48,150 --> 00:04:51,210
malicious registry registry entry key

98
00:04:51,210 --> 00:04:54,330
just link it to an executable or a dll

99
00:04:54,330 --> 00:04:57,210
file which the malware wishes to run at

100
00:04:57,210 --> 00:05:00,330
every system startup so let's discuss

101
00:05:00,330 --> 00:05:03,240
more in details about the register

102
00:05:03,240 --> 00:05:06,240
content of the registry so we all know

103
00:05:06,240 --> 00:05:09,270
familiar with the run dll 32 this is

104
00:05:09,270 --> 00:05:12,660
actually used to call an expert that

105
00:05:12,660 --> 00:05:15,480
function of a dll file so in the case of

106
00:05:15,480 --> 00:05:19,440
Pollock's it used to call the run HTML

107
00:05:19,440 --> 00:05:24,540
application function of a mhtml dll file

108
00:05:24,540 --> 00:05:29,010
and then the run HTML application

109
00:05:29,010 --> 00:05:31,440
function actually execute the JavaScript

110
00:05:31,440 --> 00:05:34,470
which is contained in the same registry

111
00:05:34,470 --> 00:05:37,020
entry key so in this case you can

112
00:05:37,020 --> 00:05:39,840
actually see the document that write

113
00:05:39,840 --> 00:05:46,320
function and its content so another

114
00:05:46,320 --> 00:05:51,600
interesting fact about this auto start

115
00:05:51,600 --> 00:05:53,760
feature of the public's malware is that

116
00:05:53,760 --> 00:05:59,670
it has an encoded registry entry so it

117
00:05:59,670 --> 00:06:03,660
uses Jas and clip J a script that encode

118
00:06:03,660 --> 00:06:06,470
that which actually contains the

119
00:06:06,470 --> 00:06:08,880
encoding of the contents of the registry

120
00:06:08,880 --> 00:06:10,770
key so here in the slide you can

121
00:06:10,770 --> 00:06:13,770
actually see that it's not really

122
00:06:13,770 --> 00:06:17,130
readable so as we all know security

123
00:06:17,130 --> 00:06:19,320
searchers are very good and have been

124
00:06:19,320 --> 00:06:22,590
able to reverse the encoding technique

125
00:06:22,590 --> 00:06:25,050
in order to decode the J's clip encode

126
00:06:25,050 --> 00:06:28,350
data and as you can see in the decoded

127
00:06:28,350 --> 00:06:33,090
script so the first stage is actually it

128
00:06:33,090 --> 00:06:36,420
tries to look for the presence of the

129
00:06:36,420 --> 00:06:38,820
windows powershell and the.net framework

130
00:06:38,820 --> 00:06:40,510
so if it is

131
00:06:40,510 --> 00:06:43,480
at present it will download and install

132
00:06:43,480 --> 00:06:46,660
this software on the infected machine

133
00:06:46,660 --> 00:06:51,400
and in the decoded function you can

134
00:06:51,400 --> 00:06:56,860
actually see more of some sort of base64

135
00:06:56,860 --> 00:06:58,690
encoded text within the decoded

136
00:06:58,690 --> 00:06:59,560
functions

137
00:06:59,560 --> 00:07:03,340
so once the coded I think basically four

138
00:07:03,340 --> 00:07:06,460
is very easy to decode or online or you

139
00:07:06,460 --> 00:07:08,980
can actually download a create an

140
00:07:08,980 --> 00:07:11,350
offline tool to decode it so it will

141
00:07:11,350 --> 00:07:14,500
contain a PowerShell script so now it

142
00:07:14,500 --> 00:07:16,360
makes sense why in the first place on

143
00:07:16,360 --> 00:07:18,550
the stage one it actually looks for

144
00:07:18,550 --> 00:07:21,250
PowerShell because the score the store

145
00:07:21,250 --> 00:07:24,010
code is actually a PowerShell script so

146
00:07:24,010 --> 00:07:26,950
in this case the first section we call

147
00:07:26,950 --> 00:07:31,270
it function Gd this script the main

148
00:07:31,270 --> 00:07:33,700
purpose is actually to interact with the

149
00:07:33,700 --> 00:07:36,640
system memory so this is in order to

150
00:07:36,640 --> 00:07:38,440
change the permission and a section of

151
00:07:38,440 --> 00:07:41,830
memory in order for the code that will

152
00:07:41,830 --> 00:07:45,430
be written to it will be executable the

153
00:07:45,430 --> 00:07:48,310
second section is the function GA so

154
00:07:48,310 --> 00:07:50,890
what's the fan the purpose of function

155
00:07:50,890 --> 00:07:54,720
GA it used to interact with or utilized

156
00:07:54,720 --> 00:07:57,430
functionality provided provided by

157
00:07:57,430 --> 00:08:00,910
function or API which it's exports from

158
00:08:00,910 --> 00:08:04,240
the system that we ll which in this case

159
00:08:04,240 --> 00:08:10,060
it uses kernel32 and user 32 DLL and on

160
00:08:10,060 --> 00:08:14,140
the last part because typically for

161
00:08:14,140 --> 00:08:18,220
encoding which in this case there's a

162
00:08:18,220 --> 00:08:22,510
variable P so this variable in summary

163
00:08:22,510 --> 00:08:24,130
of these three sections of the

164
00:08:24,130 --> 00:08:26,620
powershell script what is what it

165
00:08:26,620 --> 00:08:29,590
actually does it calls or it uses the

166
00:08:29,590 --> 00:08:32,830
function GD + GA witches which i have

167
00:08:32,830 --> 00:08:35,979
mentioned earlier to use the Whitwell

168
00:08:35,979 --> 00:08:40,599
protect windows api in order to change

169
00:08:40,599 --> 00:08:44,380
the access restriction on an area of a

170
00:08:44,380 --> 00:08:47,320
virtual address space in order to make

171
00:08:47,320 --> 00:08:51,400
it executable and then the powershell

172
00:08:51,400 --> 00:08:53,720
script injects

173
00:08:53,720 --> 00:08:56,720
the shellcode which is contained in the

174
00:08:56,720 --> 00:09:00,230
variable P currently it is the decoded

175
00:09:00,230 --> 00:09:02,440
using basics before into memory and then

176
00:09:02,440 --> 00:09:05,810
executes it using the call window

177
00:09:05,810 --> 00:09:10,310
process windows function so as a purpose

178
00:09:10,310 --> 00:09:13,070
of illustration the variable B when

179
00:09:13,070 --> 00:09:15,020
decoded you could actually see the

180
00:09:15,020 --> 00:09:18,500
shellcode and then the DLL component so

181
00:09:18,500 --> 00:09:21,170
as you can see here why it's a ble

182
00:09:21,170 --> 00:09:23,420
component I know every one of us is

183
00:09:23,420 --> 00:09:26,090
familiar it has the MC and PE header and

184
00:09:26,090 --> 00:09:28,160
it even have some indicator that the

185
00:09:28,160 --> 00:09:31,880
compressor use which is the Empress so

186
00:09:31,880 --> 00:09:35,360
as we said earlier during our discussion

187
00:09:35,360 --> 00:09:38,480
that it doesn't give any files on the

188
00:09:38,480 --> 00:09:41,780
target system or on the computer's hard

189
00:09:41,780 --> 00:09:45,740
drive so what is does is injects the

190
00:09:45,740 --> 00:09:49,850
malicious DLL into the DLL host dot

191
00:09:49,850 --> 00:09:52,340
x-ray so the malicious binary is now

192
00:09:52,340 --> 00:09:54,650
executing the de system memory through

193
00:09:54,650 --> 00:09:59,630
the process DLL host dot xn now I'll try

194
00:09:59,630 --> 00:10:02,960
to quickly explain some of the payload

195
00:10:02,960 --> 00:10:08,750
for for public malware so it connects to

196
00:10:08,750 --> 00:10:12,410
the C&C server to send the status of

197
00:10:12,410 --> 00:10:14,300
infection with the information such as

198
00:10:14,300 --> 00:10:17,870
the yo-yo IDs the malware version

199
00:10:17,870 --> 00:10:21,500
installed the build deep OS versions and

200
00:10:21,500 --> 00:10:24,650
architecture and another part of the

201
00:10:24,650 --> 00:10:27,080
public payload is the click-fraud

202
00:10:27,080 --> 00:10:30,320
routine so which involves downloading of

203
00:10:30,320 --> 00:10:32,780
arbitrary files that includes

204
00:10:32,780 --> 00:10:36,530
configuration data involving the URL to

205
00:10:36,530 --> 00:10:39,860
click so in the discussion of politics

206
00:10:39,860 --> 00:10:42,200
you can actually see that starting from

207
00:10:42,200 --> 00:10:44,780
the execution of the JavaScript until to

208
00:10:44,780 --> 00:10:48,589
the GI Bill and DeLand DLL infection

209
00:10:48,589 --> 00:10:50,960
there is no actually physical file that

210
00:10:50,960 --> 00:10:52,850
was installed in the system and this is

211
00:10:52,850 --> 00:10:55,700
what we are talking about file s

212
00:10:55,700 --> 00:11:00,410
infection now following the success of

213
00:11:00,410 --> 00:11:04,310
Pollock's we have the pace bot so pace

214
00:11:04,310 --> 00:11:06,230
both similar to Pollock's

215
00:11:06,230 --> 00:11:06,910
it

216
00:11:06,910 --> 00:11:10,390
uses PowerShell to run a binary which is

217
00:11:10,390 --> 00:11:13,260
hidden in the registry so unlike

218
00:11:13,260 --> 00:11:16,420
public's base what created three

219
00:11:16,420 --> 00:11:19,300
registry entry the first one is the Auto

220
00:11:19,300 --> 00:11:21,910
Start registry entry so I have explained

221
00:11:21,910 --> 00:11:24,760
earlier already the the use of the

222
00:11:24,760 --> 00:11:29,140
command line code run dll 32 so this is

223
00:11:29,140 --> 00:11:31,180
the opposite art registry and leave for

224
00:11:31,180 --> 00:11:34,000
the pace bot malware and then for the

225
00:11:34,000 --> 00:11:35,770
loader registry entry you can actually

226
00:11:35,770 --> 00:11:39,430
see the script that will execute the

227
00:11:39,430 --> 00:11:42,130
PowerShell script so the PowerShell

228
00:11:42,130 --> 00:11:46,590
script is still encoded into base 64 and

229
00:11:46,590 --> 00:11:50,650
of course once decoded for the

230
00:11:50,650 --> 00:11:53,200
PowerShell script its main purpose is

231
00:11:53,200 --> 00:11:55,540
actually to read the code and execute

232
00:11:55,540 --> 00:11:59,080
the shell code that is embedded in the

233
00:11:59,080 --> 00:12:02,170
third registry entry so the third

234
00:12:02,170 --> 00:12:05,800
register entry contains the executable

235
00:12:05,800 --> 00:12:07,930
binary or the binary which is then

236
00:12:07,930 --> 00:12:10,330
injected to the run running legitimate

237
00:12:10,330 --> 00:12:15,130
process Explorer dot excel so they said

238
00:12:15,130 --> 00:12:18,220
another clone of Pollux is the good keep

239
00:12:18,220 --> 00:12:22,330
malware so but unlike Pollux and pate

240
00:12:22,330 --> 00:12:25,270
pastebot good kit doesn't use the run

241
00:12:25,270 --> 00:12:30,730
DLL command line code it uses mhm ta so

242
00:12:30,730 --> 00:12:34,570
here is the auto start registry entry

243
00:12:34,570 --> 00:12:37,090
for the good get and similar to paste

244
00:12:37,090 --> 00:12:40,870
what it also creates 303 registry entry

245
00:12:40,870 --> 00:12:43,090
the first one is the auto start registry

246
00:12:43,090 --> 00:12:45,640
entry the second one is the loader

247
00:12:45,640 --> 00:12:48,190
registry entry so this part this is

248
00:12:48,190 --> 00:12:51,250
actually on the slide you can only see a

249
00:12:51,250 --> 00:12:53,650
portion of the code snippet because this

250
00:12:53,650 --> 00:12:55,780
is actually large a very large pal it

251
00:12:55,780 --> 00:13:01,870
contains the MHA mhm ta that x a dynamic

252
00:13:01,870 --> 00:13:04,600
wrapper that vll its manifest and even

253
00:13:04,600 --> 00:13:07,360
the shell code so it's a very big file

254
00:13:07,360 --> 00:13:14,190
and then for the difference between the

255
00:13:14,190 --> 00:13:17,080
Pollux and base but it doesn't use

256
00:13:17,080 --> 00:13:19,030
PowerShell to execute the shell code or

257
00:13:19,030 --> 00:13:21,000
the binary it uses

258
00:13:21,000 --> 00:13:24,240
rapper X and this shellcodes main

259
00:13:24,240 --> 00:13:27,030
purpose is actually to read and inject

260
00:13:27,030 --> 00:13:28,820
the binary to around illegitimate

261
00:13:28,820 --> 00:13:31,500
processes so in this case the registry

262
00:13:31,500 --> 00:13:34,350
entry contains the executable binary so

263
00:13:34,350 --> 00:13:36,540
it was written in hex now so it's more

264
00:13:36,540 --> 00:13:39,450
visible compared to the previous malware

265
00:13:39,450 --> 00:13:41,750
family that have been discussed that

266
00:13:41,750 --> 00:13:45,560
integrated several layer of obfuscation

267
00:13:45,560 --> 00:13:51,480
so what it does is to be of course we

268
00:13:51,480 --> 00:13:53,550
wanted the payload or the the maverick

269
00:13:53,550 --> 00:13:55,830
code to run on the infected machine so

270
00:13:55,830 --> 00:13:59,400
what is the what it does is it suspends

271
00:13:59,400 --> 00:14:02,820
the SVC hosts that Excel and map the

272
00:14:02,820 --> 00:14:05,940
original code map the malicious code and

273
00:14:05,940 --> 00:14:11,640
then run it so um fire less infection is

274
00:14:11,640 --> 00:14:15,390
not that easy but I know as a security

275
00:14:15,390 --> 00:14:18,080
researcher we could always find better

276
00:14:18,080 --> 00:14:20,400
solution to combat this type of malware

277
00:14:20,400 --> 00:14:24,120
and another interesting fact about the

278
00:14:24,120 --> 00:14:25,440
file disinfection that I have been

279
00:14:25,440 --> 00:14:27,330
discussed is that it uses a

280
00:14:27,330 --> 00:14:31,710
multi-layered code execution so using

281
00:14:31,710 --> 00:14:34,830
the first registry and then reading the

282
00:14:34,830 --> 00:14:36,630
second registry and till to the third

283
00:14:36,630 --> 00:14:39,210
registry which contains the executable

284
00:14:39,210 --> 00:14:42,990
binary but this is just fire less

285
00:14:42,990 --> 00:14:45,630
infection leveraging the Windows

286
00:14:45,630 --> 00:14:48,480
registry there are more fire less

287
00:14:48,480 --> 00:14:51,210
infection that even before it arrives on

288
00:14:51,210 --> 00:14:54,570
the system you could call it a fire less

289
00:14:54,570 --> 00:14:57,570
infection and to discuss more about this

290
00:14:57,570 --> 00:15:00,150
infection technique I will introduce to

291
00:15:00,150 --> 00:15:03,480
you my partner my co-author and speaker

292
00:15:03,480 --> 00:15:11,280
Reyna hi thanks bench so before we go to

293
00:15:11,280 --> 00:15:14,250
the recommended solutions first let's

294
00:15:14,250 --> 00:15:15,780
summarize and compare those phyleus

295
00:15:15,780 --> 00:15:17,880
malware that were discussed so in a

296
00:15:17,880 --> 00:15:19,589
traditional Maori infection the author

297
00:15:19,589 --> 00:15:21,270
start contains the full part of the file

298
00:15:21,270 --> 00:15:23,610
to be executed but for a file s

299
00:15:23,610 --> 00:15:25,440
infection it leverages the use of

300
00:15:25,440 --> 00:15:27,690
scripts in the registry so as you can

301
00:15:27,690 --> 00:15:29,670
see here you can see that powicke

302
00:15:29,670 --> 00:15:32,610
spaceball and good get both used scripts

303
00:15:32,610 --> 00:15:34,889
in the registry but the difference is

304
00:15:34,889 --> 00:15:37,079
that bollocks and face bought both used

305
00:15:37,079 --> 00:15:39,149
rondell l32 to run the script

306
00:15:39,149 --> 00:15:43,350
well good get used MSHDA so upon

307
00:15:43,350 --> 00:15:45,329
execution of the script it would just

308
00:15:45,329 --> 00:15:47,759
read another registry and we call that

309
00:15:47,759 --> 00:15:51,389
as the loader registry so this loader

310
00:15:51,389 --> 00:15:53,699
registry just contains another script

311
00:15:53,699 --> 00:15:55,799
and upon the obfuscation

312
00:15:55,799 --> 00:15:58,019
this script is responsible for executing

313
00:15:58,019 --> 00:16:00,869
the shell code so for Pollux and

314
00:16:00,869 --> 00:16:03,359
Facebook it uses PowerShell to execute

315
00:16:03,359 --> 00:16:05,699
the shell code while good kit used a

316
00:16:05,699 --> 00:16:09,720
dynamic rapper X so this shell code

317
00:16:09,720 --> 00:16:12,179
executes the binary so we have another

318
00:16:12,179 --> 00:16:14,759
registry which contains the binary for

319
00:16:14,759 --> 00:16:16,889
Pollux the binary which is the DLL

320
00:16:16,889 --> 00:16:18,509
described by bench a while ago is

321
00:16:18,509 --> 00:16:20,819
already located in the loader registry

322
00:16:20,819 --> 00:16:23,249
but for the Facebook and good kid it can

323
00:16:23,249 --> 00:16:25,290
be located in another registry as you

324
00:16:25,290 --> 00:16:31,259
can see so we've already discussed about

325
00:16:31,259 --> 00:16:34,679
file s infection assuming that that that

326
00:16:34,679 --> 00:16:36,149
they're already in the system

327
00:16:36,149 --> 00:16:38,730
so however there are instances were in

328
00:16:38,730 --> 00:16:41,610
file s technique was adopted to deploy

329
00:16:41,610 --> 00:16:44,369
other malware in a stealthier way so on

330
00:16:44,369 --> 00:16:47,249
August 2014 it was seen that angry it is

331
00:16:47,249 --> 00:16:50,459
now capable of file s infection so

332
00:16:50,459 --> 00:16:52,319
before it was capable of only this base

333
00:16:52,319 --> 00:16:54,059
download wherein we could see the

334
00:16:54,059 --> 00:16:56,189
physical file being downloaded and shoot

335
00:16:56,189 --> 00:16:58,139
usually it's it's in the user temp

336
00:16:58,139 --> 00:17:01,439
folder so now we are seeing memory base

337
00:17:01,439 --> 00:17:03,360
download we're in the payload is

338
00:17:03,360 --> 00:17:07,529
directly injected to running process so

339
00:17:07,529 --> 00:17:09,720
for files arrival we would be discussing

340
00:17:09,720 --> 00:17:12,529
the anger and the Honjo an exploit kit

341
00:17:12,529 --> 00:17:15,659
so for anger exploit kit typically

342
00:17:15,659 --> 00:17:17,609
there's the landing page which assesses

343
00:17:17,609 --> 00:17:20,939
the vulnerability example as you can see

344
00:17:20,939 --> 00:17:22,949
it checks for the flash version the

345
00:17:22,949 --> 00:17:25,919
Silverlight version and the version and

346
00:17:25,919 --> 00:17:27,959
Java version so for this case it's

347
00:17:27,959 --> 00:17:32,519
triggered by CVE 2013 to 551 so in the

348
00:17:32,519 --> 00:17:34,919
script also it contains the script with

349
00:17:34,919 --> 00:17:38,669
download the binary from another URL so

350
00:17:38,669 --> 00:17:42,929
that binary is encrypted and upon the

351
00:17:42,929 --> 00:17:44,490
 ssin you would see that there's the

352
00:17:44,490 --> 00:17:47,240
knobs led the 9990

353
00:17:47,240 --> 00:17:50,420
and then there would be the MC so with

354
00:17:50,420 --> 00:17:52,280
the knobs led it triggers the exploit

355
00:17:52,280 --> 00:17:56,290
get to choose to deploy this by a

356
00:17:56,290 --> 00:18:01,640
injection to memory so this binary would

357
00:18:01,640 --> 00:18:04,309
be running in the exploited application

358
00:18:04,309 --> 00:18:06,710
so the typical payload of the angler is

359
00:18:06,710 --> 00:18:09,710
the B DEP and the politics so similar

360
00:18:09,710 --> 00:18:12,290
concept with the Honjo an exploit kit it

361
00:18:12,290 --> 00:18:15,020
also has the landing page but for this

362
00:18:15,020 --> 00:18:17,900
case it's triggered by SWF exploit and

363
00:18:17,900 --> 00:18:20,660
it would also download the payload from

364
00:18:20,660 --> 00:18:23,059
another URL as you can see and this

365
00:18:23,059 --> 00:18:24,980
would be directly injected to Explorer

366
00:18:24,980 --> 00:18:27,290
so you can see that that expert that

367
00:18:27,290 --> 00:18:28,850
Excel would be communicating with the

368
00:18:28,850 --> 00:18:30,770
CNC as well with the ad fraud servers

369
00:18:30,770 --> 00:18:33,710
and it would be delivering the DEP this

370
00:18:33,710 --> 00:18:35,630
hands-on exploit kit so build up is

371
00:18:35,630 --> 00:18:37,670
known to display ad fraud in a hidden

372
00:18:37,670 --> 00:18:42,860
desktop so how do we counter file s

373
00:18:42,860 --> 00:18:45,530
infections so we've mapped the major

374
00:18:45,530 --> 00:18:47,929
items as you can see here how to

375
00:18:47,929 --> 00:18:49,910
identify and counter those file s

376
00:18:49,910 --> 00:18:50,780
infections

377
00:18:50,780 --> 00:18:53,420
so first correlation and one components

378
00:18:53,420 --> 00:18:55,970
of an attack so we believe that if we

379
00:18:55,970 --> 00:18:58,940
know the components of an attack it's

380
00:18:58,940 --> 00:19:00,800
possible to block them at the source

381
00:19:00,800 --> 00:19:02,809
since prevention is still the best right

382
00:19:02,809 --> 00:19:05,780
so for example here's the ecosystem of

383
00:19:05,780 --> 00:19:08,240
imitate imitate as a background only

384
00:19:08,240 --> 00:19:10,790
it's a banking Trojan which seeds the

385
00:19:10,790 --> 00:19:15,200
binary banking module in the registry so

386
00:19:15,200 --> 00:19:18,080
for emoted it usually arrives via email

387
00:19:18,080 --> 00:19:21,290
which contains a fully so when users

388
00:19:21,290 --> 00:19:23,300
click on that link they will be

389
00:19:23,300 --> 00:19:26,090
downloading an archive and that archive

390
00:19:26,090 --> 00:19:29,780
would contain the inverted malware so

391
00:19:29,780 --> 00:19:32,000
once we know the component for example

392
00:19:32,000 --> 00:19:35,809
we already have the URLs so we get all

393
00:19:35,809 --> 00:19:39,950
the related URLs here so we could do we

394
00:19:39,950 --> 00:19:41,600
could pattern the content format of the

395
00:19:41,600 --> 00:19:44,360
URL so gathering all the URLs we could

396
00:19:44,360 --> 00:19:46,970
see that mostly it contains the Vox Bank

397
00:19:46,970 --> 00:19:49,370
and string but the domain is not Vox

398
00:19:49,370 --> 00:19:51,620
banking so we could filter all those

399
00:19:51,620 --> 00:19:55,520
unrated URLs with this patter format for

400
00:19:55,520 --> 00:19:57,620
email pattern is the same concept so we

401
00:19:57,620 --> 00:19:59,990
could gather all patterns all emails to

402
00:19:59,990 --> 00:20:00,890
create

403
00:20:00,890 --> 00:20:02,720
pattern so we could pattern the content

404
00:20:02,720 --> 00:20:04,820
formative email so we could get the

405
00:20:04,820 --> 00:20:07,490
sender subject format image message

406
00:20:07,490 --> 00:20:09,380
format and we could also check the full

407
00:20:09,380 --> 00:20:11,960
URL if it's malicious so the solution

408
00:20:11,960 --> 00:20:14,780
given beforehand and the URL blocking

409
00:20:14,780 --> 00:20:19,280
could also be applied in the email for a

410
00:20:19,280 --> 00:20:20,990
network solution of course we could do

411
00:20:20,990 --> 00:20:23,450
packet detection so here's example of a

412
00:20:23,450 --> 00:20:26,450
packet of Pollock's so we could check if

413
00:20:26,450 --> 00:20:28,820
it has valid get request or it contains

414
00:20:28,820 --> 00:20:32,180
several strings such as query version

415
00:20:32,180 --> 00:20:35,990
UID date queue or other strings such as

416
00:20:35,990 --> 00:20:37,880
query and click URL format enter

417
00:20:37,880 --> 00:20:41,540
response for exploit gets of course we

418
00:20:41,540 --> 00:20:43,190
need vulnerability assessment and

419
00:20:43,190 --> 00:20:45,250
software updates to prevent exploitation

420
00:20:45,250 --> 00:20:47,930
but of course there would be zero days

421
00:20:47,930 --> 00:20:50,600
so we recommend dynamic emulation on web

422
00:20:50,600 --> 00:20:53,050
objects so for example if a user

423
00:20:53,050 --> 00:20:56,150
accesses an obfuscated a website

424
00:20:56,150 --> 00:20:58,190
containing an obfuscated script we could

425
00:20:58,190 --> 00:21:00,800
do dynamic emulation so that we could

426
00:21:00,800 --> 00:21:02,630
see read the blog content and create a

427
00:21:02,630 --> 00:21:04,700
pattern for it so here's for an example

428
00:21:04,700 --> 00:21:07,400
so we could see that it checks for AV

429
00:21:07,400 --> 00:21:11,360
related drivers and once this strings

430
00:21:11,360 --> 00:21:14,440
are found we could block the website

431
00:21:14,440 --> 00:21:17,420
another is that we could do behavioral

432
00:21:17,420 --> 00:21:19,700
rule and monitoring I think this is the

433
00:21:19,700 --> 00:21:21,770
effective way of monitoring a virus

434
00:21:21,770 --> 00:21:24,440
infection as we all know a file is

435
00:21:24,440 --> 00:21:28,190
malware typically creates registry

436
00:21:28,190 --> 00:21:30,530
containing scripts which is unusual so

437
00:21:30,530 --> 00:21:32,570
we could check and monitor for that

438
00:21:32,570 --> 00:21:35,840
behavior and once that behavior is found

439
00:21:35,840 --> 00:21:40,550
we could block it another is we could

440
00:21:40,550 --> 00:21:42,920
implement memory scanning for example

441
00:21:42,920 --> 00:21:44,930
indicating the error rule in a toolkit

442
00:21:44,930 --> 00:21:47,390
so we could scan all running processes

443
00:21:47,390 --> 00:21:51,050
with strings so for example here and we

444
00:21:51,050 --> 00:21:53,000
could check all running processes for

445
00:21:53,000 --> 00:21:55,970
related strings or codes for example

446
00:21:55,970 --> 00:22:01,130
here Pollock's triaging a system

447
00:22:01,130 --> 00:22:03,140
infected with virus malware although of

448
00:22:03,140 --> 00:22:05,720
the infection is palace it doesn't mean

449
00:22:05,720 --> 00:22:07,820
that there's no traces anymore right so

450
00:22:07,820 --> 00:22:10,280
for example we know that Pollock's runs

451
00:22:10,280 --> 00:22:13,250
run DLL 32 and then DLL host so we could

452
00:22:13,250 --> 00:22:14,630
check the P fetch

453
00:22:14,630 --> 00:22:16,850
folder since it contains this up files

454
00:22:16,850 --> 00:22:19,700
which are executed on sequence so we

455
00:22:19,700 --> 00:22:23,960
could check it by date modified also we

456
00:22:23,960 --> 00:22:25,490
could check the registries for scripts

457
00:22:25,490 --> 00:22:28,070
which I said before is unusual so we

458
00:22:28,070 --> 00:22:30,080
could use tools such as rag Ripper

459
00:22:30,080 --> 00:22:33,169
registry dumper and registry view for

460
00:22:33,169 --> 00:22:36,710
those registry entries containing non

461
00:22:36,710 --> 00:22:41,360
ASCII so are we really in the age of

462
00:22:41,360 --> 00:22:44,960
file s infection so recently we've seen

463
00:22:44,960 --> 00:22:47,090
another file as malware known as geek

464
00:22:47,090 --> 00:22:50,059
after that delivers krippwall dll so

465
00:22:50,059 --> 00:22:52,789
before a crippled watching us and XA

466
00:22:52,789 --> 00:22:57,320
only and now we're seeing it as dll so

467
00:22:57,320 --> 00:23:00,049
similar with the good kit it uses MSHDA

468
00:23:00,049 --> 00:23:04,250
to execute the script and similar to

469
00:23:04,250 --> 00:23:06,409
other file as malware it contains other

470
00:23:06,409 --> 00:23:09,140
registries which contains its data such

471
00:23:09,140 --> 00:23:11,390
as the malware copy and rc4 encryption

472
00:23:11,390 --> 00:23:15,289
and the loader registry which contains

473
00:23:15,289 --> 00:23:17,929
scrip responsible for executing the

474
00:23:17,929 --> 00:23:21,559
shell code so similar with publix and

475
00:23:21,559 --> 00:23:24,830
the faceball it contains it uses

476
00:23:24,830 --> 00:23:27,020
PowerShell to execute the shell code as

477
00:23:27,020 --> 00:23:32,570
you can see here so the shell code is

478
00:23:32,570 --> 00:23:34,370
just responsible for decrypting and

479
00:23:34,370 --> 00:23:36,409
executing the binary so first it just

480
00:23:36,409 --> 00:23:39,140
queries the other registry and then it

481
00:23:39,140 --> 00:23:41,929
decrypts it using our c4 then afterwards

482
00:23:41,929 --> 00:23:44,030
is just injects the code to rec as we

483
00:23:44,030 --> 00:23:47,900
are 32 are as we see host so we've also

484
00:23:47,900 --> 00:23:50,299
observed or there were also reports

485
00:23:50,299 --> 00:23:53,990
about algorithm boss reconnaissance

486
00:23:53,990 --> 00:23:59,840
Trojan so it does this in order to check

487
00:23:59,840 --> 00:24:02,900
the system if it is in the post network

488
00:24:02,900 --> 00:24:05,600
or it is in a post machine in a

489
00:24:05,600 --> 00:24:08,990
stealthier way and we've also observed

490
00:24:08,990 --> 00:24:11,360
anger ek serving desert clip in that

491
00:24:11,360 --> 00:24:16,490
stealthier way so are we really in the

492
00:24:16,490 --> 00:24:19,970
age of file is infection according to

493
00:24:19,970 --> 00:24:22,850
data from recorded future researchers

494
00:24:22,850 --> 00:24:24,799
are seeing and reporting more and more

495
00:24:24,799 --> 00:24:27,620
on file as infection this 2015

496
00:24:27,620 --> 00:24:30,590
as a recap only observe items that

497
00:24:30,590 --> 00:24:32,600
played a major role are the use of

498
00:24:32,600 --> 00:24:34,520
scripts in the registry to attain

499
00:24:34,520 --> 00:24:37,010
persistence and the direct injection of

500
00:24:37,010 --> 00:24:40,490
binaries in the running process to

501
00:24:40,490 --> 00:24:45,320
attain Stelter arrival so are we really

502
00:24:45,320 --> 00:24:52,250
in the age of virus infection okay thank

503
00:24:52,250 --> 00:24:56,960
you you said yes that ends our

504
00:24:56,960 --> 00:25:07,160
presentation thank you thank you thank

505
00:25:07,160 --> 00:25:08,870
you for your presentation and now it's

506
00:25:08,870 --> 00:25:12,428
time for several questions

507
00:25:17,560 --> 00:25:29,630
any questions here's a question did you

508
00:25:29,630 --> 00:25:32,120
find any legitimate purposes to set

509
00:25:32,120 --> 00:25:35,020
these scripts and register keys and run

510
00:25:35,020 --> 00:25:38,420
keys like is there any good purpose for

511
00:25:38,420 --> 00:25:41,440
using MSHDA

512
00:25:42,580 --> 00:25:45,050
so why not just black list everything

513
00:25:45,050 --> 00:25:47,170
every run key which starts within MSHDA

514
00:25:47,170 --> 00:25:52,280
um usually it's common to use MSHDA to

515
00:25:52,280 --> 00:25:55,310
run HDA applications but for this case

516
00:25:55,310 --> 00:25:57,280
it was just used to perform malicious

517
00:25:57,280 --> 00:26:02,120
absence yeah I think nowadays can you

518
00:26:02,120 --> 00:26:04,280
hear me so I think nowadays sorry

519
00:26:04,280 --> 00:26:06,320
nowadays because malware try to leverage

520
00:26:06,320 --> 00:26:08,870
also normal applications to their

521
00:26:08,870 --> 00:26:11,060
malicious intent and this is a bit

522
00:26:11,060 --> 00:26:13,250
tricky for us as security researchers

523
00:26:13,250 --> 00:26:15,380
that is why we need to understand what

524
00:26:15,380 --> 00:26:17,300
are really malicious and what are not

525
00:26:17,300 --> 00:26:21,230
so by of course doing some research and

526
00:26:21,230 --> 00:26:24,170
how it actually used versus the good and

527
00:26:24,170 --> 00:26:28,060
the bad we could understand better

528
00:26:28,060 --> 00:26:32,110
well thanks thank you

529
00:26:32,110 --> 00:26:35,860
any other question

530
00:26:37,650 --> 00:26:40,890
No so I wish to thank you for

531
00:26:40,890 --> 00:26:42,540
representation pink

532
00:26:42,540 --> 00:26:48,149
[Applause]

