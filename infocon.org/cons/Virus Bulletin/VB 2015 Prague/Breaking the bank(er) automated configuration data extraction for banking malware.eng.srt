1
00:00:06,080 --> 00:00:09,630
okay so thanks for joining us for dreams

2
00:00:09,630 --> 00:00:13,500
talk about breaking the bank air thank

3
00:00:13,500 --> 00:00:16,379
you and good morning everyone my name is

4
00:00:16,379 --> 00:00:18,300
James White i'm a senior threat

5
00:00:18,300 --> 00:00:21,840
researcher with sauce based in our UK

6
00:00:21,840 --> 00:00:24,779
headquarters in sunny abingdon and this

7
00:00:24,779 --> 00:00:26,640
presentation is called breaking the

8
00:00:26,640 --> 00:00:29,070
banker and it's about automated

9
00:00:29,070 --> 00:00:31,199
configuration data extraction for

10
00:00:31,199 --> 00:00:35,550
banking malware so i begin with a brief

11
00:00:35,550 --> 00:00:37,910
introduction talk a little bit about

12
00:00:37,910 --> 00:00:39,930
what's been happening with banking

13
00:00:39,930 --> 00:00:41,100
malware over the last couple of years

14
00:00:41,100 --> 00:00:42,390
some of the good things and the bad

15
00:00:42,390 --> 00:00:46,710
things and then i'll talk about and what

16
00:00:46,710 --> 00:00:48,480
kind of information can we understand

17
00:00:48,480 --> 00:00:50,910
about banking malware what kind of data

18
00:00:50,910 --> 00:00:54,239
can we extract why that data is useful

19
00:00:54,239 --> 00:00:57,090
and how we can go about actually

20
00:00:57,090 --> 00:00:59,570
extracting the data in the first place

21
00:00:59,570 --> 00:01:01,800
I'll then talk about the system that

22
00:01:01,800 --> 00:01:04,349
we've built to basically automate this

23
00:01:04,349 --> 00:01:06,689
process and talk a little bit about the

24
00:01:06,689 --> 00:01:08,400
architecture some of the important

25
00:01:08,400 --> 00:01:11,939
stages and then briefly show some of the

26
00:01:11,939 --> 00:01:13,530
output and the results that we're

27
00:01:13,530 --> 00:01:16,020
getting from the system and I'll then

28
00:01:16,020 --> 00:01:17,100
talk a little bit about some of the

29
00:01:17,100 --> 00:01:18,540
pitfalls and some of the problems that

30
00:01:18,540 --> 00:01:21,000
we've encountered during the development

31
00:01:21,000 --> 00:01:24,780
of this system so that we can share the

32
00:01:24,780 --> 00:01:26,820
knowledge that we've built up for anyone

33
00:01:26,820 --> 00:01:28,350
else who's thinking of developing a

34
00:01:28,350 --> 00:01:30,900
similar sort of system and then I'll sum

35
00:01:30,900 --> 00:01:34,850
things up at the end so over the last

36
00:01:34,850 --> 00:01:37,290
year two years or so there's been some

37
00:01:37,290 --> 00:01:40,020
really successful banking malware bought

38
00:01:40,020 --> 00:01:43,619
that takedowns so operation tovar took

39
00:01:43,619 --> 00:01:47,340
down game overs use and was a huge or a

40
00:01:47,340 --> 00:01:49,860
huge operation with many different law

41
00:01:49,860 --> 00:01:51,780
enforcement departments from lots of

42
00:01:51,780 --> 00:01:53,280
different jurisdictions from lots of

43
00:01:53,280 --> 00:01:54,590
different countries all over the world

44
00:01:54,590 --> 00:01:57,210
lots of security companies involved as

45
00:01:57,210 --> 00:01:59,850
well and a huge amount of resources a

46
00:01:59,850 --> 00:02:01,469
huge amount of people a huge amount of

47
00:02:01,469 --> 00:02:03,750
organization involved but ultimately it

48
00:02:03,750 --> 00:02:06,030
was pretty successful that pretty much

49
00:02:06,030 --> 00:02:08,878
ended gameover zeus which was one of the

50
00:02:08,878 --> 00:02:11,530
largest botnets not yell owned by

51
00:02:11,530 --> 00:02:13,060
came out where botnets that there's ever

52
00:02:13,060 --> 00:02:16,450
been and also the take down a

53
00:02:16,450 --> 00:02:18,940
was very successful and was a

54
00:02:18,940 --> 00:02:20,290
banking malware family that had

55
00:02:20,290 --> 00:02:22,959
particularly interest in the UK some

56
00:02:22,959 --> 00:02:24,640
other European countries as well but

57
00:02:24,640 --> 00:02:26,500
again the network infrastructure was

58
00:02:26,500 --> 00:02:29,920
seized and it was very successful and we

59
00:02:29,920 --> 00:02:31,600
haven't seen we emerged since

60
00:02:31,600 --> 00:02:35,410
and but what we have seen since these

61
00:02:35,410 --> 00:02:37,720
kind of takedowns is for other banking

62
00:02:37,720 --> 00:02:40,480
malware families to emerge and take the

63
00:02:40,480 --> 00:02:42,250
place and fill the vacant space left

64
00:02:42,250 --> 00:02:45,030
behind so families like dried X and

65
00:02:45,030 --> 00:02:48,880
Diaries a ball track various Zeus

66
00:02:48,880 --> 00:02:51,100
variants particularly kins variants and

67
00:02:51,100 --> 00:02:54,190
they've all become more popular since

68
00:02:54,190 --> 00:02:55,840
these other families have been taking

69
00:02:55,840 --> 00:02:59,890
down so banking malware and despite some

70
00:02:59,890 --> 00:03:01,630
really successful actions it's not a

71
00:03:01,630 --> 00:03:04,000
problem that's going away it cut off the

72
00:03:04,000 --> 00:03:08,890
hydrogen and two more emerged and so

73
00:03:08,890 --> 00:03:11,620
what can we do about it and arresting

74
00:03:11,620 --> 00:03:14,110
people is a pretty good way to go about

75
00:03:14,110 --> 00:03:17,560
stopping them right malware especially

76
00:03:17,560 --> 00:03:19,090
if you arrested right people the people

77
00:03:19,090 --> 00:03:20,709
at the top of the chain the people who

78
00:03:20,709 --> 00:03:22,570
are actually right in the malware and

79
00:03:22,570 --> 00:03:24,489
making all the money out of it that

80
00:03:24,489 --> 00:03:26,380
stops them from doing that but it also

81
00:03:26,380 --> 00:03:29,260
acts as a very strong deterrent to stop

82
00:03:29,260 --> 00:03:31,650
other people doing the same thing and

83
00:03:31,650 --> 00:03:34,540
but arresting people is not an easy task

84
00:03:34,540 --> 00:03:36,780
particularly when they live in

85
00:03:36,780 --> 00:03:38,890
jurisdictions and in countries that

86
00:03:38,890 --> 00:03:41,200
perhaps don't have extradition treaties

87
00:03:41,200 --> 00:03:44,650
or they live on the government's that

88
00:03:44,650 --> 00:03:48,459
are not cooperating with the process of

89
00:03:48,459 --> 00:03:51,010
trying to arrest them and so stopping

90
00:03:51,010 --> 00:03:52,540
sure arresting people one of the things

91
00:03:52,540 --> 00:03:54,130
we can try and do is to understand the

92
00:03:54,130 --> 00:03:56,290
malware and to find out as much as we

93
00:03:56,290 --> 00:03:59,320
possibly can about it and find out about

94
00:03:59,320 --> 00:04:01,930
how it's working what the people using

95
00:04:01,930 --> 00:04:04,510
it trying to do and we can do things

96
00:04:04,510 --> 00:04:07,180
like track the campaigns detect active

97
00:04:07,180 --> 00:04:09,190
compromises and try and prove you

98
00:04:09,190 --> 00:04:11,890
prevent future compromises as well try

99
00:04:11,890 --> 00:04:14,070
and make the banking malware effectively

100
00:04:14,070 --> 00:04:20,108
not as good at doing its job and some

101
00:04:20,108 --> 00:04:21,668
we're talking about finding out about

102
00:04:21,668 --> 00:04:22,780
banking malware

103
00:04:22,780 --> 00:04:24,670
and I'm really talking about what kind

104
00:04:24,670 --> 00:04:27,490
of technical information can we extract

105
00:04:27,490 --> 00:04:30,450
about banking malware samples and the

106
00:04:30,450 --> 00:04:33,430
artifacts of execution when banking

107
00:04:33,430 --> 00:04:37,150
malware runs on infected machine so it's

108
00:04:37,150 --> 00:04:39,070
things like commander control addresses

109
00:04:39,070 --> 00:04:40,930
and so all of the commander control

110
00:04:40,930 --> 00:04:44,200
addresses as well not just any addresses

111
00:04:44,200 --> 00:04:46,180
we might observe the malware

112
00:04:46,180 --> 00:04:48,280
communicating with but backup command

113
00:04:48,280 --> 00:04:50,250
and control addresses as well and

114
00:04:50,250 --> 00:04:53,380
cryptographic keys so many of the other

115
00:04:53,380 --> 00:04:54,730
types of information that we want to

116
00:04:54,730 --> 00:04:57,160
extract will be encrypted or encoded in

117
00:04:57,160 --> 00:04:59,440
some way and we need to extract the

118
00:04:59,440 --> 00:05:01,780
cryptographic key material that is

119
00:05:01,780 --> 00:05:03,840
necessary to decrypt that data and

120
00:05:03,840 --> 00:05:06,669
things like campaign IDs and botnet

121
00:05:06,669 --> 00:05:08,860
names and build versions this is all

122
00:05:08,860 --> 00:05:11,160
meter data which we can use to

123
00:05:11,160 --> 00:05:14,979
differentiate one sample from one

124
00:05:14,979 --> 00:05:16,540
banking malware family with another

125
00:05:16,540 --> 00:05:18,070
sample from the same banking malware

126
00:05:18,070 --> 00:05:20,710
family and so things like botnet names

127
00:05:20,710 --> 00:05:23,229
and project IDs and campaign ideas can

128
00:05:23,229 --> 00:05:26,410
tell us information about when the

129
00:05:26,410 --> 00:05:28,540
sample was in circulation and where it

130
00:05:28,540 --> 00:05:31,360
was targeted at and build versions can

131
00:05:31,360 --> 00:05:33,070
tell us exactly which version of the

132
00:05:33,070 --> 00:05:35,380
malware we're dealing with and and

133
00:05:35,380 --> 00:05:36,820
things like the main generation

134
00:05:36,820 --> 00:05:39,010
algorithm seed values so if the banking

135
00:05:39,010 --> 00:05:40,180
malware family that we're dealing with

136
00:05:40,180 --> 00:05:43,539
users at DGA and typically these

137
00:05:43,539 --> 00:05:45,640
algorithms will take some sort of seed

138
00:05:45,640 --> 00:05:48,729
value which and goes into the algorithm

139
00:05:48,729 --> 00:05:51,940
and will change the entire list of

140
00:05:51,940 --> 00:05:53,410
domains that generates a change the seed

141
00:05:53,410 --> 00:05:54,850
value and you get a completely different

142
00:05:54,850 --> 00:05:58,800
list of domains so if we want to and

143
00:05:58,800 --> 00:06:01,270
replicate the algorithm and pre generate

144
00:06:01,270 --> 00:06:03,669
all the possible domains offline and see

145
00:06:03,669 --> 00:06:05,169
which ones are alive and proactively

146
00:06:05,169 --> 00:06:08,500
block them we need to know what the DJ C

147
00:06:08,500 --> 00:06:11,740
values are and it's pretty common for

148
00:06:11,740 --> 00:06:14,710
banking malware families to have sort of

149
00:06:14,710 --> 00:06:17,410
traditional BOTS and capabilities where

150
00:06:17,410 --> 00:06:19,150
command and control server can issue a

151
00:06:19,150 --> 00:06:22,810
command to the infected machine and so

152
00:06:22,810 --> 00:06:24,370
if that happens we want to know what

153
00:06:24,370 --> 00:06:26,380
commands were issued or the arguments

154
00:06:26,380 --> 00:06:28,060
those commands workers again that could

155
00:06:28,060 --> 00:06:30,510
contain very useful information and

156
00:06:30,510 --> 00:06:32,470
potentially the responsive to those

157
00:06:32,470 --> 00:06:33,370
commands at the

158
00:06:33,370 --> 00:06:36,370
effective machine-made as well and and

159
00:06:36,370 --> 00:06:38,530
downloaded configuration files so again

160
00:06:38,530 --> 00:06:40,870
pretty much every banking malware family

161
00:06:40,870 --> 00:06:43,210
during execution downloads a

162
00:06:43,210 --> 00:06:45,790
configuration file which contains data

163
00:06:45,790 --> 00:06:49,919
like web injects and URL redirects and

164
00:06:49,919 --> 00:06:52,660
URLs from which further modules can be

165
00:06:52,660 --> 00:06:54,430
downloaded so these configuration files

166
00:06:54,430 --> 00:06:56,770
are full of extremely useful information

167
00:06:56,770 --> 00:06:58,630
so that's the kind of data we want to

168
00:06:58,630 --> 00:07:02,800
extract as well so once you've extracted

169
00:07:02,800 --> 00:07:06,820
this data and how can we use it so we

170
00:07:06,820 --> 00:07:08,889
can do things like generate in the cases

171
00:07:08,889 --> 00:07:11,470
of compromise so host based in the case

172
00:07:11,470 --> 00:07:13,169
of compromise things like file names

173
00:07:13,169 --> 00:07:16,660
registry key names mutex names process

174
00:07:16,660 --> 00:07:20,020
names all pieces of data that we can use

175
00:07:20,020 --> 00:07:23,560
to flag up instances on a host where

176
00:07:23,560 --> 00:07:26,289
this malware has infected and a network

177
00:07:26,289 --> 00:07:27,850
based in the case as well so things like

178
00:07:27,850 --> 00:07:30,639
IP addresses URLs domain names all

179
00:07:30,639 --> 00:07:32,669
pieces of data that we can use to

180
00:07:32,669 --> 00:07:35,590
highlight active infections from the

181
00:07:35,590 --> 00:07:39,010
network and being security vendors this

182
00:07:39,010 --> 00:07:42,340
kind of data is also and the kind of

183
00:07:42,340 --> 00:07:43,419
thing that we can use to provide

184
00:07:43,419 --> 00:07:45,849
protection so we can take this type of

185
00:07:45,849 --> 00:07:47,740
data feed them back into our products

186
00:07:47,740 --> 00:07:50,080
and actually protect our customers and

187
00:07:50,080 --> 00:07:53,650
from this happening as well we can also

188
00:07:53,650 --> 00:07:55,270
use this data to tell us a lot of

189
00:07:55,270 --> 00:07:57,280
information about the kind of targets

190
00:07:57,280 --> 00:08:00,370
and bath the people behind the malware

191
00:08:00,370 --> 00:08:03,820
are aiming at so especially when we're

192
00:08:03,820 --> 00:08:06,099
looking at configuration files web

193
00:08:06,099 --> 00:08:08,500
injects and we can see which URLs are

194
00:08:08,500 --> 00:08:10,270
being targeted which banks they're

195
00:08:10,270 --> 00:08:13,500
trying to steal data from and if those

196
00:08:13,500 --> 00:08:15,460
organizations aren't in the financial

197
00:08:15,460 --> 00:08:17,949
sector we can also see exactly which

198
00:08:17,949 --> 00:08:20,110
industry sector they're targeting we can

199
00:08:20,110 --> 00:08:21,370
also see which countries they're

200
00:08:21,370 --> 00:08:23,620
targeting as well and it's becoming

201
00:08:23,620 --> 00:08:25,539
increasingly common that particularly

202
00:08:25,539 --> 00:08:28,419
web inject packs will target banks and

203
00:08:28,419 --> 00:08:30,639
organizations in a specific country or a

204
00:08:30,639 --> 00:08:33,339
specific group of countries and so if we

205
00:08:33,339 --> 00:08:36,039
extract this data we can see which which

206
00:08:36,039 --> 00:08:39,039
countries are trying to target and

207
00:08:39,039 --> 00:08:40,929
another common feature of banking

208
00:08:40,929 --> 00:08:44,470
malware is to enable keystroke logging

209
00:08:44,470 --> 00:08:45,220
when

210
00:08:45,220 --> 00:08:47,829
certain processes launched and so if we

211
00:08:47,829 --> 00:08:49,329
get that list of processed names that

212
00:08:49,329 --> 00:08:51,220
they're targeting again I can tell us

213
00:08:51,220 --> 00:08:53,139
information about what kind of data

214
00:08:53,139 --> 00:08:55,810
they're trying to steal so if we see

215
00:08:55,810 --> 00:08:57,279
things like point of sale software

216
00:08:57,279 --> 00:09:00,040
processes and enterprise resource

217
00:09:00,040 --> 00:09:02,889
management processes and again that

218
00:09:02,889 --> 00:09:04,060
tells us especially when it's something

219
00:09:04,060 --> 00:09:06,189
that's slightly out of the ordinary can

220
00:09:06,189 --> 00:09:08,110
tell us a lot of information about what

221
00:09:08,110 --> 00:09:10,060
kind of data they tried that what kind

222
00:09:10,060 --> 00:09:13,120
of data they're trying to target and and

223
00:09:13,120 --> 00:09:16,990
we can also use this data to tell us so

224
00:09:16,990 --> 00:09:19,089
reveal the actions of what the malware

225
00:09:19,089 --> 00:09:21,009
did so we can find out what commands

226
00:09:21,009 --> 00:09:23,170
were executed and potentially we can use

227
00:09:23,170 --> 00:09:25,149
this data to tell us what data was

228
00:09:25,149 --> 00:09:29,550
stolen what data was exfiltrated as well

229
00:09:29,550 --> 00:09:32,769
so how do we go about getting this data

230
00:09:32,769 --> 00:09:35,589
so the manual approach is we need to do

231
00:09:35,589 --> 00:09:37,480
some reverse engineering we're going to

232
00:09:37,480 --> 00:09:39,579
debug disassemble the sample dump

233
00:09:39,579 --> 00:09:42,370
regions of memory will dump data from

234
00:09:42,370 --> 00:09:44,889
the packet captures will decode it find

235
00:09:44,889 --> 00:09:46,509
the data we're interested in and then

236
00:09:46,509 --> 00:09:48,009
we'll do the same thing with the next

237
00:09:48,009 --> 00:09:50,709
sample and so this is going to be slow

238
00:09:50,709 --> 00:09:52,660
the first time because we need to do the

239
00:09:52,660 --> 00:09:54,670
initial reverse engineering but when we

240
00:09:54,670 --> 00:09:56,589
have to do a manual process for the next

241
00:09:56,589 --> 00:09:58,600
sample as well again it's going to be

242
00:09:58,600 --> 00:10:00,579
slow as well it requires an analyst to

243
00:10:00,579 --> 00:10:02,079
do this every single time for every

244
00:10:02,079 --> 00:10:05,410
single sample so obviously we need to

245
00:10:05,410 --> 00:10:07,959
automate this process and if we wanted

246
00:10:07,959 --> 00:10:09,819
to scale we want this to be repeatable

247
00:10:09,819 --> 00:10:12,639
and it needs to be automated the

248
00:10:12,639 --> 00:10:15,550
argument that's very clear we're still

249
00:10:15,550 --> 00:10:17,170
going to need some human input because

250
00:10:17,170 --> 00:10:18,850
we still need to do some reverse

251
00:10:18,850 --> 00:10:20,559
engineering we need to write the code in

252
00:10:20,559 --> 00:10:22,480
the first place but once we've done that

253
00:10:22,480 --> 00:10:24,550
the system should take care of the rest

254
00:10:24,550 --> 00:10:28,480
of the samples for us so obviously we

255
00:10:28,480 --> 00:10:30,040
need to automate how do we go about

256
00:10:30,040 --> 00:10:33,160
automating something like this and so I

257
00:10:33,160 --> 00:10:35,920
think there's a wide range of possible

258
00:10:35,920 --> 00:10:38,110
ways of automating something like this

259
00:10:38,110 --> 00:10:39,879
and they've been several presentations

260
00:10:39,879 --> 00:10:42,459
this week where other companies are

261
00:10:42,459 --> 00:10:43,990
doing similar sort of things in slightly

262
00:10:43,990 --> 00:10:46,360
different ways and so a couple of the

263
00:10:46,360 --> 00:10:49,259
options that we looked at is you can

264
00:10:49,259 --> 00:10:52,679
implement something like a crawler so

265
00:10:52,679 --> 00:10:55,149
implement the client side part of the

266
00:10:55,149 --> 00:10:57,329
command control protocol

267
00:10:57,329 --> 00:10:59,399
get a bunch of command and control

268
00:10:59,399 --> 00:11:01,049
addresses for the malware family and

269
00:11:01,049 --> 00:11:03,089
reach out download configuration files

270
00:11:03,089 --> 00:11:06,809
and a few possible stumbling blocks

271
00:11:06,809 --> 00:11:08,399
there are that we're going to need to

272
00:11:08,399 --> 00:11:11,819
feed the system with up-to-date data we

273
00:11:11,819 --> 00:11:13,439
need to get new samples of our malware

274
00:11:13,439 --> 00:11:15,299
families extract the command-and-control

275
00:11:15,299 --> 00:11:17,339
addresses feed them into the cooler

276
00:11:17,339 --> 00:11:19,110
system so that it can continue to

277
00:11:19,110 --> 00:11:23,299
download live configuration data and

278
00:11:23,299 --> 00:11:27,449
we're only really getting data that's

279
00:11:27,449 --> 00:11:29,069
been downloaded as well so we're not

280
00:11:29,069 --> 00:11:30,179
really extracting information from

281
00:11:30,179 --> 00:11:33,119
particular sample and we're not

282
00:11:33,119 --> 00:11:34,439
necessarily going to find anything that

283
00:11:34,439 --> 00:11:37,679
we're not sort of expecting to find so

284
00:11:37,679 --> 00:11:39,420
if sort of new samples do something

285
00:11:39,420 --> 00:11:41,970
slightly differently our cool is not

286
00:11:41,970 --> 00:11:43,079
going to know about it because we're

287
00:11:43,079 --> 00:11:45,679
just downloading configuration files and

288
00:11:45,679 --> 00:11:47,489
another thing we have to be worried

289
00:11:47,489 --> 00:11:50,220
about with a system like that is and if

290
00:11:50,220 --> 00:11:52,769
the bad guys start realizing that our

291
00:11:52,769 --> 00:11:55,199
system is a crawler and not a genuine

292
00:11:55,199 --> 00:11:57,959
infected machine and if they do that

293
00:11:57,959 --> 00:11:59,970
they might just take simple steps like

294
00:11:59,970 --> 00:12:03,029
blacklisting us but they can also get a

295
00:12:03,029 --> 00:12:05,669
bit more creative and start feeding us

296
00:12:05,669 --> 00:12:09,949
false dummy data and this designed to

297
00:12:09,949 --> 00:12:12,779
mislead may be designed to likely induce

298
00:12:12,779 --> 00:12:15,689
false positive or just maybe keep it

299
00:12:15,689 --> 00:12:17,429
sweet and not realize what they're doing

300
00:12:17,429 --> 00:12:19,259
and sometimes it can be really difficult

301
00:12:19,259 --> 00:12:23,100
to work out when that's happening and so

302
00:12:23,100 --> 00:12:24,899
another possible solution and one that

303
00:12:24,899 --> 00:12:26,549
we've gone for in the end is we're

304
00:12:26,549 --> 00:12:29,220
basically we can embed this system into

305
00:12:29,220 --> 00:12:32,459
an existing and sandbox system so many

306
00:12:32,459 --> 00:12:34,769
security vendors and many companies that

307
00:12:34,769 --> 00:12:37,290
aren't security vendors have very large

308
00:12:37,290 --> 00:12:39,569
scale sandbox system through which

309
00:12:39,569 --> 00:12:42,299
they're putting many thousands many

310
00:12:42,299 --> 00:12:43,709
hundreds of thousands of samples every

311
00:12:43,709 --> 00:12:46,679
day and so if we can use this existing

312
00:12:46,679 --> 00:12:48,839
infrastructure then there's lots of

313
00:12:48,839 --> 00:12:49,889
problems that we're going to need to

314
00:12:49,889 --> 00:12:52,230
solve that we don't have to solve

315
00:12:52,230 --> 00:12:54,029
anymore they become the problem of the

316
00:12:54,029 --> 00:12:56,040
underlying system that we're using which

317
00:12:56,040 --> 00:12:57,779
is most likely going to have a large

318
00:12:57,779 --> 00:12:59,850
team of people whose responsibility is

319
00:12:59,850 --> 00:13:02,100
to maintain and to ensure that it

320
00:13:02,100 --> 00:13:03,569
continues to work and doesn't fall over

321
00:13:03,569 --> 00:13:05,519
and so we don't have to worry about

322
00:13:05,519 --> 00:13:06,899
those problems anymore which is great

323
00:13:06,899 --> 00:13:07,910
and

324
00:13:07,910 --> 00:13:10,340
and because we're generally putting

325
00:13:10,340 --> 00:13:12,260
pretty much every sample we can through

326
00:13:12,260 --> 00:13:14,420
a system like this we also don't have to

327
00:13:14,420 --> 00:13:16,760
worry about finding new samples of our

328
00:13:16,760 --> 00:13:18,590
malware families and they're already

329
00:13:18,590 --> 00:13:21,860
going through the system another nice

330
00:13:21,860 --> 00:13:24,530
thing about sandbox type system is that

331
00:13:24,530 --> 00:13:26,840
they're one of the things they're geared

332
00:13:26,840 --> 00:13:30,440
towards is providing a report of like on

333
00:13:30,440 --> 00:13:32,660
a per sample basis so submit a sample

334
00:13:32,660 --> 00:13:35,510
see what it does and again this is the

335
00:13:35,510 --> 00:13:36,890
kind of thing we're going to want full

336
00:13:36,890 --> 00:13:39,380
configuration data extraction we want to

337
00:13:39,380 --> 00:13:41,570
submit a sample to it and see what

338
00:13:41,570 --> 00:13:43,790
configuration data we can extract so

339
00:13:43,790 --> 00:13:45,580
again that's good for our purposes and

340
00:13:45,580 --> 00:13:48,140
and another feature of these kind of

341
00:13:48,140 --> 00:13:50,000
systems is that generally part of the

342
00:13:50,000 --> 00:13:52,970
larger sort of flow of data so they're

343
00:13:52,970 --> 00:13:55,090
receiving data in the form of samples

344
00:13:55,090 --> 00:13:57,740
they're doing work and then the data

345
00:13:57,740 --> 00:13:59,180
that they're producing is generally

346
00:13:59,180 --> 00:14:01,520
being passed off to other systems again

347
00:14:01,520 --> 00:14:03,500
that's exactly what we want to do with

348
00:14:03,500 --> 00:14:07,600
automated configuration data extraction

349
00:14:07,600 --> 00:14:12,320
so a solution to banking malware it's

350
00:14:12,320 --> 00:14:13,910
not really the solution to bank now but

351
00:14:13,910 --> 00:14:15,200
you know the system that we've built to

352
00:14:15,200 --> 00:14:18,410
try and help with this problem and so

353
00:14:18,410 --> 00:14:20,630
sandbox is based on the cuckoo

354
00:14:20,630 --> 00:14:22,850
open-source sandbox which is written in

355
00:14:22,850 --> 00:14:24,560
Python which is a great framework

356
00:14:24,560 --> 00:14:30,170
extremely and nice to update to modify

357
00:14:30,170 --> 00:14:31,700
which is again is exactly what we want

358
00:14:31,700 --> 00:14:34,730
to do and so we've added a few things

359
00:14:34,730 --> 00:14:37,370
around things like enhanced data capture

360
00:14:37,370 --> 00:14:38,870
we need to make sure that we've got as

361
00:14:38,870 --> 00:14:41,120
much data as possible so that we can

362
00:14:41,120 --> 00:14:43,790
extract this configuration data we're

363
00:14:43,790 --> 00:14:46,210
interested in we've added some

364
00:14:46,210 --> 00:14:49,790
processing modules which is the staging

365
00:14:49,790 --> 00:14:51,110
cookie where you take the data that's

366
00:14:51,110 --> 00:14:53,810
being captured and sort of analyze it

367
00:14:53,810 --> 00:14:55,910
and convert it into useful information

368
00:14:55,910 --> 00:14:57,410
and that's where we do the actual

369
00:14:57,410 --> 00:15:00,640
configuration data extraction itself and

370
00:15:00,640 --> 00:15:03,320
we have various reporting modules which

371
00:15:03,320 --> 00:15:05,870
is where the data that's been handled by

372
00:15:05,870 --> 00:15:07,430
the processing modules goes on to the

373
00:15:07,430 --> 00:15:09,800
next stage which formats it and presents

374
00:15:09,800 --> 00:15:11,420
it and can send it on to downstream

375
00:15:11,420 --> 00:15:13,990
systems

376
00:15:14,420 --> 00:15:18,260
this is a graphical overview and it's

377
00:15:18,260 --> 00:15:20,269
really a simplified overview of the

378
00:15:20,269 --> 00:15:24,200
cuckoo architecture really and so the

379
00:15:24,200 --> 00:15:26,930
job starts the samples executing we're

380
00:15:26,930 --> 00:15:30,079
collecting data during analysis and then

381
00:15:30,079 --> 00:15:31,610
once it's finished executing we're

382
00:15:31,610 --> 00:15:32,959
collecting more data at the end of

383
00:15:32,959 --> 00:15:35,690
analysis and once we've got all the raw

384
00:15:35,690 --> 00:15:37,730
data it then goes on to the processing

385
00:15:37,730 --> 00:15:39,800
modules which is where we do the

386
00:15:39,800 --> 00:15:42,010
configuration data extraction itself and

387
00:15:42,010 --> 00:15:44,329
and then it goes on to the cookie

388
00:15:44,329 --> 00:15:45,889
reporting modules which is where the

389
00:15:45,889 --> 00:15:48,410
data gets prepared and formatted and

390
00:15:48,410 --> 00:15:50,089
then you can send it on to other systems

391
00:15:50,089 --> 00:15:53,029
so we can send on to things like sample

392
00:15:53,029 --> 00:15:55,250
database system your L database system

393
00:15:55,250 --> 00:15:57,800
than any other database or system where

394
00:15:57,800 --> 00:16:00,589
we think we can do useful things with

395
00:16:00,589 --> 00:16:04,970
the data that we've extracted and so

396
00:16:04,970 --> 00:16:06,529
just to highlight a couple of the sort

397
00:16:06,529 --> 00:16:08,000
of important stages of that then the

398
00:16:08,000 --> 00:16:09,680
first one is when we're capturing the

399
00:16:09,680 --> 00:16:11,870
data 3m we need to make sure that we've

400
00:16:11,870 --> 00:16:16,610
got all the raw data available to us for

401
00:16:16,610 --> 00:16:17,899
latest status want to make sure we're

402
00:16:17,899 --> 00:16:19,670
not throwing away anything that we might

403
00:16:19,670 --> 00:16:22,640
later want to use and so in terms of the

404
00:16:22,640 --> 00:16:24,920
memory and we need full memory dump at

405
00:16:24,920 --> 00:16:27,140
the end of analysis and but it's also

406
00:16:27,140 --> 00:16:29,839
useful to capture data at certain stages

407
00:16:29,839 --> 00:16:32,180
during analysis as well particularly

408
00:16:32,180 --> 00:16:33,980
when we've got things like process

409
00:16:33,980 --> 00:16:36,769
starts and finishes before analysis ends

410
00:16:36,769 --> 00:16:39,649
and the memory space of that process is

411
00:16:39,649 --> 00:16:41,209
generally not going to be available at

412
00:16:41,209 --> 00:16:43,940
the end of analysis and so we add sort

413
00:16:43,940 --> 00:16:46,550
of an extra hook on exit process so

414
00:16:46,550 --> 00:16:49,640
we'll dump the memory when it's in when

415
00:16:49,640 --> 00:16:51,380
the process ends and in certain

416
00:16:51,380 --> 00:16:54,529
situations when memories being freed as

417
00:16:54,529 --> 00:16:56,779
well and so we're looking to try and

418
00:16:56,779 --> 00:17:00,860
catch as much unpack data as possible on

419
00:17:00,860 --> 00:17:03,110
the network side of things we want a

420
00:17:03,110 --> 00:17:05,809
full capture and all the network traffic

421
00:17:05,809 --> 00:17:07,459
in a pcap file again which is something

422
00:17:07,459 --> 00:17:10,490
that Google already does for us and but

423
00:17:10,490 --> 00:17:11,839
several banking malware families

424
00:17:11,839 --> 00:17:15,079
communicate over encrypted and Charles

425
00:17:15,079 --> 00:17:19,069
as well HTTPS ssl/tls so we need to man

426
00:17:19,069 --> 00:17:20,569
in the middle that so that we can get an

427
00:17:20,569 --> 00:17:21,270
unencrypted

428
00:17:21,270 --> 00:17:24,450
of that traffic in terms of the disk

429
00:17:24,450 --> 00:17:26,099
there were certain files that we want to

430
00:17:26,099 --> 00:17:28,920
capture as well but probably more

431
00:17:28,920 --> 00:17:30,720
importantly the registry as well as it's

432
00:17:30,720 --> 00:17:32,070
quite common for banking malware to

433
00:17:32,070 --> 00:17:34,590
store especially configuration data in

434
00:17:34,590 --> 00:17:36,240
the registry so I need to make sure

435
00:17:36,240 --> 00:17:38,340
we're lifting the hives off the disk so

436
00:17:38,340 --> 00:17:39,900
that we can analyze and process them at

437
00:17:39,900 --> 00:17:44,490
the end of analysis and it's also quite

438
00:17:44,490 --> 00:17:48,590
handy to have slightly unusual

439
00:17:48,590 --> 00:17:51,480
conditions for execution doing houses so

440
00:17:51,480 --> 00:17:53,640
certain now where families fourtrax a

441
00:17:53,640 --> 00:17:55,200
good example a simple example where

442
00:17:55,200 --> 00:17:58,110
there won't be any communication with

443
00:17:58,110 --> 00:18:00,060
the command and control server until the

444
00:18:00,060 --> 00:18:01,740
browser process is launched and an

445
00:18:01,740 --> 00:18:03,480
outbound request is made so it basically

446
00:18:03,480 --> 00:18:06,540
puts a hook on HTTP send requests in a

447
00:18:06,540 --> 00:18:09,240
browser process and as soon as that hook

448
00:18:09,240 --> 00:18:10,830
gets triggered it will then start

449
00:18:10,830 --> 00:18:13,500
looping through its speaking process and

450
00:18:13,500 --> 00:18:15,630
so we need to make sure that those kind

451
00:18:15,630 --> 00:18:17,880
of conditions happen during analysis

452
00:18:17,880 --> 00:18:20,010
because we want to see that full

453
00:18:20,010 --> 00:18:21,420
interaction load of command and control

454
00:18:21,420 --> 00:18:23,700
server so cuckoo has a nice feature

455
00:18:23,700 --> 00:18:25,980
called analysis packages which is where

456
00:18:25,980 --> 00:18:28,080
you can effectively set up those kind of

457
00:18:28,080 --> 00:18:29,640
slightly unusual conditions for

458
00:18:29,640 --> 00:18:34,260
execution so once we've captured the

459
00:18:34,260 --> 00:18:36,540
data we need to process it and this is

460
00:18:36,540 --> 00:18:39,060
where the cuckoo processing modules come

461
00:18:39,060 --> 00:18:42,300
in so we have a configuration data

462
00:18:42,300 --> 00:18:46,080
processing module and that every single

463
00:18:46,080 --> 00:18:47,550
job that goes through the sandbox will

464
00:18:47,550 --> 00:18:49,470
run through so we need to filter it to

465
00:18:49,470 --> 00:18:53,190
only run against the specific malware

466
00:18:53,190 --> 00:18:54,480
families that we're going to do data

467
00:18:54,480 --> 00:18:57,720
extraction for and so once you've

468
00:18:57,720 --> 00:18:59,130
identified the family will then

469
00:18:59,130 --> 00:19:01,290
instantiate a new Python class that will

470
00:19:01,290 --> 00:19:03,690
do the data extraction for this malware

471
00:19:03,690 --> 00:19:08,820
family and so a slightly hopefully clear

472
00:19:08,820 --> 00:19:11,460
a graphical view of that processing and

473
00:19:11,460 --> 00:19:13,920
stage so there are various cuckoo

474
00:19:13,920 --> 00:19:16,590
processing modules behavior processing

475
00:19:16,590 --> 00:19:19,560
which analyzes the trace of events from

476
00:19:19,560 --> 00:19:22,470
the injected dll and the network

477
00:19:22,470 --> 00:19:24,060
processing module which deals with the

478
00:19:24,060 --> 00:19:26,040
network traffic and then we have a

479
00:19:26,040 --> 00:19:28,470
configuration data processing module we

480
00:19:28,470 --> 00:19:31,290
perform that filtering step and identify

481
00:19:31,290 --> 00:19:32,640
a specific family

482
00:19:32,640 --> 00:19:34,710
want to extract data for and then we

483
00:19:34,710 --> 00:19:36,240
launched the new Python class that will

484
00:19:36,240 --> 00:19:38,370
do the data extraction and then the

485
00:19:38,370 --> 00:19:40,320
remaining cuckoo processing modules will

486
00:19:40,320 --> 00:19:44,010
run so we need to implement one of these

487
00:19:44,010 --> 00:19:47,280
and Python classes for each family that

488
00:19:47,280 --> 00:19:49,670
we want to perform data extraction for

489
00:19:49,670 --> 00:19:52,110
so generally these classes will do

490
00:19:52,110 --> 00:19:55,530
things like find certain data structures

491
00:19:55,530 --> 00:19:58,740
in the memory of dumped malware files

492
00:19:58,740 --> 00:20:01,500
and will extract a piece of code we're

493
00:20:01,500 --> 00:20:04,080
interested in will decode it and take

494
00:20:04,080 --> 00:20:07,440
files from the disk the registry pieces

495
00:20:07,440 --> 00:20:09,090
of the network capture decode the data

496
00:20:09,090 --> 00:20:11,820
and then add it all to a Python

497
00:20:11,820 --> 00:20:14,220
dictionary which gets passed on to the

498
00:20:14,220 --> 00:20:16,380
overall results dictionary for the

499
00:20:16,380 --> 00:20:18,510
analysis job and then handed off to the

500
00:20:18,510 --> 00:20:22,760
next layer of cuckoo processing and

501
00:20:22,760 --> 00:20:26,130
slightly more a quick sort of example of

502
00:20:26,130 --> 00:20:27,780
one of the processing modules for

503
00:20:27,780 --> 00:20:30,870
vortrag also knows never quest which is

504
00:20:30,870 --> 00:20:34,680
from the gozi sort of dynasty of banking

505
00:20:34,680 --> 00:20:37,680
malware and so the filter stage for

506
00:20:37,680 --> 00:20:39,630
track is just viera signature against

507
00:20:39,630 --> 00:20:41,970
memory dump files because we're dealing

508
00:20:41,970 --> 00:20:44,340
with files done from memory and not

509
00:20:44,340 --> 00:20:46,080
files from the disk they're not packed

510
00:20:46,080 --> 00:20:48,870
and generates quite easy to write these

511
00:20:48,870 --> 00:20:50,880
kind of signatures for both tracks a

512
00:20:50,880 --> 00:20:52,710
nice example because once you've dumped

513
00:20:52,710 --> 00:20:54,330
it from memory it's full of easily

514
00:20:54,330 --> 00:20:56,460
identifiable strings so we can write a

515
00:20:56,460 --> 00:20:59,910
nice simple yarra signature for it once

516
00:20:59,910 --> 00:21:01,410
we've identified we're dealing with vol

517
00:21:01,410 --> 00:21:03,840
track we launched a new class football

518
00:21:03,840 --> 00:21:06,780
track config and so these classes

519
00:21:06,780 --> 00:21:08,820
inherit from apparent conflict data

520
00:21:08,820 --> 00:21:10,970
class that we've got various sort of and

521
00:21:10,970 --> 00:21:13,530
fields and helper functions things like

522
00:21:13,530 --> 00:21:16,920
a family name and the path to the

523
00:21:16,920 --> 00:21:19,140
analysis directory which is where cuckoo

524
00:21:19,140 --> 00:21:21,030
stores all the data that's been gathered

525
00:21:21,030 --> 00:21:24,030
during the analysis job we then need to

526
00:21:24,030 --> 00:21:26,670
implement a get data routine which is

527
00:21:26,670 --> 00:21:29,190
where we do all the actual extraction

528
00:21:29,190 --> 00:21:31,950
work and then we return a dictionary of

529
00:21:31,950 --> 00:21:35,160
data at the end of the routine so inside

530
00:21:35,160 --> 00:21:37,140
this get data routine for vol track

531
00:21:37,140 --> 00:21:39,110
we've got various methods including and

532
00:21:39,110 --> 00:21:41,400
gets the two addresses which is where

533
00:21:41,400 --> 00:21:42,030
we're going to pull out the

534
00:21:42,030 --> 00:21:44,060
command-and-control servers

535
00:21:44,060 --> 00:21:46,970
and that routine is basically just going

536
00:21:46,970 --> 00:21:48,800
to perform a regex for this block of

537
00:21:48,800 --> 00:21:51,860
code because in there we have a pointer

538
00:21:51,860 --> 00:21:53,900
to the encrypted blob which is where

539
00:21:53,900 --> 00:21:55,670
board for X stores its command and

540
00:21:55,670 --> 00:21:57,920
control servers and a few other pieces

541
00:21:57,920 --> 00:22:01,550
of useful information so we do a regex

542
00:22:01,550 --> 00:22:03,320
for that block of code find out where

543
00:22:03,320 --> 00:22:05,570
the encrypted blob is decode it and then

544
00:22:05,570 --> 00:22:09,260
we've got that data and we've also got

545
00:22:09,260 --> 00:22:11,300
various other routines inside get data

546
00:22:11,300 --> 00:22:13,880
things like get downloaded confi get

547
00:22:13,880 --> 00:22:16,280
receive commands get decoded modules and

548
00:22:16,280 --> 00:22:18,500
these are all looking at the network

549
00:22:18,500 --> 00:22:21,140
capture and pulling out certain pieces

550
00:22:21,140 --> 00:22:24,770
of useful information from them so one

551
00:22:24,770 --> 00:22:26,780
trick that we find quite handy when

552
00:22:26,780 --> 00:22:29,900
dealing especially with HTTP data and is

553
00:22:29,900 --> 00:22:32,390
we convert the pcap file to an HTM arc

554
00:22:32,390 --> 00:22:36,020
HTML archive file a half aisle because

555
00:22:36,020 --> 00:22:38,750
that's its we're dealing with HTTP data

556
00:22:38,750 --> 00:22:41,210
it's a bit easier to process how far is

557
00:22:41,210 --> 00:22:44,030
Jason requests and responses are grouped

558
00:22:44,030 --> 00:22:47,150
together and it makes it slightly easier

559
00:22:47,150 --> 00:22:50,630
to deal with than a raw pcap file and so

560
00:22:50,630 --> 00:22:53,570
once we've extracted all this data we

561
00:22:53,570 --> 00:22:55,550
store it in a Python dictionary and we

562
00:22:55,550 --> 00:22:57,110
turn it back to the next layer of

563
00:22:57,110 --> 00:23:03,080
processing and so the protein X layer

564
00:23:03,080 --> 00:23:05,000
that comes in is the reporting modules

565
00:23:05,000 --> 00:23:09,230
and so these they take the cooked the

566
00:23:09,230 --> 00:23:10,940
data that's been collected during

567
00:23:10,940 --> 00:23:12,740
analysis and we've processed and we've

568
00:23:12,740 --> 00:23:15,140
extracted our figuration data and the

569
00:23:15,140 --> 00:23:16,760
reporting modules present it to other

570
00:23:16,760 --> 00:23:21,020
systems and so one of the reporting

571
00:23:21,020 --> 00:23:23,950
modules that's already in cuckoo and is

572
00:23:23,950 --> 00:23:26,810
basically generates a web-based report

573
00:23:26,810 --> 00:23:28,850
of all the results of the analysis so it

574
00:23:28,850 --> 00:23:30,440
takes the data stores it in

575
00:23:30,440 --> 00:23:33,350
database and there's a nice Django based

576
00:23:33,350 --> 00:23:36,350
web interface into the results so we can

577
00:23:36,350 --> 00:23:38,390
use this existing reporting module to

578
00:23:38,390 --> 00:23:42,410
generate a purr purr sample report for a

579
00:23:42,410 --> 00:23:44,690
human on all the data extracted for this

580
00:23:44,690 --> 00:23:47,300
particular sample and then we have

581
00:23:47,300 --> 00:23:48,950
various other reporting modules that

582
00:23:48,950 --> 00:23:51,350
take elements of the data we've

583
00:23:51,350 --> 00:23:53,250
extracted and

584
00:23:53,250 --> 00:23:55,020
come on to other systems to be actioned

585
00:23:55,020 --> 00:23:58,050
on so things like URLs domain names and

586
00:23:58,050 --> 00:24:00,240
IP addresses will send them on to a

587
00:24:00,240 --> 00:24:02,580
network reputation system if we've

588
00:24:02,580 --> 00:24:06,390
managed to decode p files from the

589
00:24:06,390 --> 00:24:08,130
network capture from the registry from

590
00:24:08,130 --> 00:24:10,080
anywhere else we can then send those p

591
00:24:10,080 --> 00:24:12,990
files onto a sample processing system

592
00:24:12,990 --> 00:24:15,270
they may get fed back into the sandbox

593
00:24:15,270 --> 00:24:18,810
system or they may be automated

594
00:24:18,810 --> 00:24:21,090
detection added for them and that kind

595
00:24:21,090 --> 00:24:23,670
of thing if we've extracted web injects

596
00:24:23,670 --> 00:24:25,320
and if we've matched decode any

597
00:24:25,320 --> 00:24:27,780
downloaded configuration files again we

598
00:24:27,780 --> 00:24:29,570
can send that data on to another system

599
00:24:29,570 --> 00:24:36,420
and so a few quick examples of portions

600
00:24:36,420 --> 00:24:37,470
of some of the data that we're

601
00:24:37,470 --> 00:24:39,240
extracting for various malware families

602
00:24:39,240 --> 00:24:43,860
and so this one is Citadel so you can

603
00:24:43,860 --> 00:24:45,930
see we've got the command and control

604
00:24:45,930 --> 00:24:48,290
addresses we've got the family name

605
00:24:48,290 --> 00:24:50,490
specific variant of Citadel we're

606
00:24:50,490 --> 00:24:54,120
dealing with and various items of key

607
00:24:54,120 --> 00:24:56,700
material we get a need to decode the

608
00:24:56,700 --> 00:24:58,950
network traffic and you can also use

609
00:24:58,950 --> 00:25:03,210
those kind of key like the rc4 key for

610
00:25:03,210 --> 00:25:04,860
example is quite an interesting way to

611
00:25:04,860 --> 00:25:07,320
track samples as well and when the

612
00:25:07,320 --> 00:25:09,570
Mawlid guys we use the rc4 key it might

613
00:25:09,570 --> 00:25:14,910
mean that it's the same guy and Tyrese

614
00:25:14,910 --> 00:25:16,890
or example so again we've got all the

615
00:25:16,890 --> 00:25:19,500
command and control addresses and got

616
00:25:19,500 --> 00:25:22,470
the campaign ID in this example so by

617
00:25:22,470 --> 00:25:25,080
riza campaign IDs tell us some useful

618
00:25:25,080 --> 00:25:27,050
information about when the sample was

619
00:25:27,050 --> 00:25:29,880
sent out and we're targeting as well so

620
00:25:29,880 --> 00:25:32,790
this is 25 06 UK 12 it was on the

621
00:25:32,790 --> 00:25:34,080
twenty-fifth of June and it was

622
00:25:34,080 --> 00:25:39,150
targeting the UK bull track example so

623
00:25:39,150 --> 00:25:40,500
again we've got all the config all the

624
00:25:40,500 --> 00:25:42,990
command and control addresses and we've

625
00:25:42,990 --> 00:25:45,720
got various items of meter data that's

626
00:25:45,720 --> 00:25:48,660
interesting about four track samples so

627
00:25:48,660 --> 00:25:50,460
we've got the specific build version

628
00:25:50,460 --> 00:25:52,800
we've got the project ID which can tell

629
00:25:52,800 --> 00:25:56,160
us about where where it's targeted at

630
00:25:56,160 --> 00:25:58,830
and we've got things like the the format

631
00:25:58,830 --> 00:26:00,720
string which is used to generate the

632
00:26:00,720 --> 00:26:03,150
post request that ball track will use to

633
00:26:03,150 --> 00:26:04,679
communicate with this command control

634
00:26:04,679 --> 00:26:05,520
servers

635
00:26:05,520 --> 00:26:07,110
and we've got to check some of the

636
00:26:07,110 --> 00:26:09,330
public key which is which is used to

637
00:26:09,330 --> 00:26:12,360
verify updates and configuration data by

638
00:26:12,360 --> 00:26:14,790
broad track so we can see if that public

639
00:26:14,790 --> 00:26:16,950
key ever changes for example which

640
00:26:16,950 --> 00:26:18,540
scrunch thing because in with vol track

641
00:26:18,540 --> 00:26:21,750
and that doesn't change which also tells

642
00:26:21,750 --> 00:26:24,000
you some sort of information about the

643
00:26:24,000 --> 00:26:25,710
botnet I mean that implies that there's

644
00:26:25,710 --> 00:26:29,070
one entity that is pushing all the

645
00:26:29,070 --> 00:26:31,020
updates and assigning all the data

646
00:26:31,020 --> 00:26:34,730
that's being verified with that key and

647
00:26:34,730 --> 00:26:38,520
a web inject example so you can see that

648
00:26:38,520 --> 00:26:42,630
from the back and we've got the specific

649
00:26:42,630 --> 00:26:45,530
URL that this code will be injected into

650
00:26:45,530 --> 00:26:48,030
we're in the page it will be injected

651
00:26:48,030 --> 00:26:50,760
and and the actual code itself that's

652
00:26:50,760 --> 00:26:55,110
going to be ejected into the page when

653
00:26:55,110 --> 00:26:57,780
it comes to extending this and adding

654
00:26:57,780 --> 00:27:00,000
new malware families it's a relatively

655
00:27:00,000 --> 00:27:02,100
painless process so we need to add a new

656
00:27:02,100 --> 00:27:04,410
filtering stage which is generally just

657
00:27:04,410 --> 00:27:07,230
adding a new era signature and then we

658
00:27:07,230 --> 00:27:09,720
need to implement a new Python class to

659
00:27:09,720 --> 00:27:12,140
extract data for this particular sample

660
00:27:12,140 --> 00:27:14,430
because this is relatively painless and

661
00:27:14,430 --> 00:27:15,720
it shouldn't take too long to actually

662
00:27:15,720 --> 00:27:17,640
code this part of it we don't need to

663
00:27:17,640 --> 00:27:19,140
update the framework we do anything

664
00:27:19,140 --> 00:27:20,880
complicated like that means we've got

665
00:27:20,880 --> 00:27:22,710
plenty of time to focus on the bit which

666
00:27:22,710 --> 00:27:24,630
does take time the reverse engineering

667
00:27:24,630 --> 00:27:28,470
part so some of the pitfalls that we've

668
00:27:28,470 --> 00:27:31,560
encountered and so execution conditions

669
00:27:31,560 --> 00:27:34,020
is something I mentioned before so we

670
00:27:34,020 --> 00:27:36,450
can use cuckoo analysis packages to make

671
00:27:36,450 --> 00:27:38,340
sure that the right conditions are there

672
00:27:38,340 --> 00:27:41,040
during execution to see the fullest

673
00:27:41,040 --> 00:27:43,350
extent of the samples interaction with

674
00:27:43,350 --> 00:27:45,120
command and control server and just to

675
00:27:45,120 --> 00:27:47,130
see as much as possible about what it's

676
00:27:47,130 --> 00:27:49,560
going to do and that the length of the

677
00:27:49,560 --> 00:27:51,840
analysis is another thing which can be

678
00:27:51,840 --> 00:27:54,660
important to keep in mind and

679
00:27:54,660 --> 00:27:57,930
particularly families that use domain

680
00:27:57,930 --> 00:28:00,240
generation algorithms timber is quite a

681
00:28:00,240 --> 00:28:03,000
good example and it can cycle through a

682
00:28:03,000 --> 00:28:05,790
very large number of domains and it

683
00:28:05,790 --> 00:28:07,710
might be some time before we generate a

684
00:28:07,710 --> 00:28:10,080
domain that's actually live so we need

685
00:28:10,080 --> 00:28:11,880
to make sure the analysis goes on long

686
00:28:11,880 --> 00:28:14,400
enough that we generate a live domain

687
00:28:14,400 --> 00:28:17,010
and we can see some interaction with

688
00:28:17,010 --> 00:28:18,559
that server

689
00:28:18,559 --> 00:28:22,100
and geo-targeting is another thing to be

690
00:28:22,100 --> 00:28:26,570
wary of so it's an increasing trend that

691
00:28:26,570 --> 00:28:31,129
on the server side some banking malware

692
00:28:31,129 --> 00:28:32,929
families will deliver a different

693
00:28:32,929 --> 00:28:36,830
configuration file based on the country

694
00:28:36,830 --> 00:28:39,110
that the victim is connecting from so

695
00:28:39,110 --> 00:28:41,389
there's geoip lookup of the victims IP

696
00:28:41,389 --> 00:28:44,149
address and if they're in the UK they'll

697
00:28:44,149 --> 00:28:46,399
get a configuration file with webbing

698
00:28:46,399 --> 00:28:48,889
Jack's targeting UK banks if you're in

699
00:28:48,889 --> 00:28:51,860
the US will be targeting US banks and so

700
00:28:51,860 --> 00:28:54,919
on around the world so if your sandbox

701
00:28:54,919 --> 00:28:57,769
or whatever else whatever other system

702
00:28:57,769 --> 00:28:59,240
you're using to gather these

703
00:28:59,240 --> 00:29:02,360
configuration files is always connecting

704
00:29:02,360 --> 00:29:04,730
through one IP address in one country

705
00:29:04,730 --> 00:29:07,549
you might only ever see data that's

706
00:29:07,549 --> 00:29:10,789
targeting and banks and organizations in

707
00:29:10,789 --> 00:29:12,769
that country so if you want to get full

708
00:29:12,769 --> 00:29:13,909
coverage of all the possible

709
00:29:13,909 --> 00:29:15,889
configuration files you might see you

710
00:29:15,889 --> 00:29:18,019
need to have multiple exit points in as

711
00:29:18,019 --> 00:29:19,610
many different countries as possible as

712
00:29:19,610 --> 00:29:21,259
many different regions as possible and

713
00:29:21,259 --> 00:29:26,210
and cycle through them or try the same

714
00:29:26,210 --> 00:29:29,090
sample with from different exit IP

715
00:29:29,090 --> 00:29:30,320
addresses and see if you're getting

716
00:29:30,320 --> 00:29:34,100
different data back platform coverage is

717
00:29:34,100 --> 00:29:36,860
another thing to be wary of droid x is a

718
00:29:36,860 --> 00:29:40,970
good example where has an x86 downloader

719
00:29:40,970 --> 00:29:43,820
but if you're running under x64 it will

720
00:29:43,820 --> 00:29:46,220
download an x64 version of the main dll

721
00:29:46,220 --> 00:29:48,950
under x86 they'll download an x86

722
00:29:48,950 --> 00:29:51,679
version so if the system you're running

723
00:29:51,679 --> 00:29:55,009
under is only x86 you're never going to

724
00:29:55,009 --> 00:29:57,950
see the x64 version of the files so it's

725
00:29:57,950 --> 00:29:59,779
important to have as wider platform

726
00:29:59,779 --> 00:30:04,759
coverage as possible so something up

727
00:30:04,759 --> 00:30:07,909
then so we've got a system which is

728
00:30:07,909 --> 00:30:09,889
doing automatic configuration data

729
00:30:09,889 --> 00:30:11,570
extraction we're extracting that data

730
00:30:11,570 --> 00:30:14,600
and in a human readable form in terms of

731
00:30:14,600 --> 00:30:16,419
the the web report that we're generating

732
00:30:16,419 --> 00:30:18,999
but probably more importantly a

733
00:30:18,999 --> 00:30:22,940
machine-readable form as well so certain

734
00:30:22,940 --> 00:30:25,220
portions of that data being handed off

735
00:30:25,220 --> 00:30:26,990
to other systems to be actioned on and

736
00:30:26,990 --> 00:30:28,669
that's really where the protection

737
00:30:28,669 --> 00:30:29,760
aspect comes in

738
00:30:29,760 --> 00:30:31,740
and we can provide immediate protection

739
00:30:31,740 --> 00:30:34,920
against those artifacts as soon as

740
00:30:34,920 --> 00:30:37,200
they've been extracted and it's

741
00:30:37,200 --> 00:30:39,180
relatively simple to extend we can add

742
00:30:39,180 --> 00:30:42,060
new male their families without having

743
00:30:42,060 --> 00:30:43,920
to update the larger framework we could

744
00:30:43,920 --> 00:30:47,010
just focus on the specific and part of

745
00:30:47,010 --> 00:30:48,780
the malware the payload pie if you like

746
00:30:48,780 --> 00:30:51,090
and not have to copy and paste and we

747
00:30:51,090 --> 00:30:53,730
implement anything and because we're

748
00:30:53,730 --> 00:30:55,560
using an existing sandbox framework

749
00:30:55,560 --> 00:30:57,540
which hopefully scales and we could be

750
00:30:57,540 --> 00:30:59,490
putting half a million samples through

751
00:30:59,490 --> 00:31:01,170
it a day we're now potentially

752
00:31:01,170 --> 00:31:02,940
extracting data from half a million

753
00:31:02,940 --> 00:31:05,310
samples as well there's whole team

754
00:31:05,310 --> 00:31:09,870
managing this system and resourcing the

755
00:31:09,870 --> 00:31:14,420
system as well and so we benefit from

756
00:31:14,420 --> 00:31:16,290
those kind of things that the underlying

757
00:31:16,290 --> 00:31:19,320
sandbox system has and ultimately the

758
00:31:19,320 --> 00:31:21,570
kind of data that we're extracting we're

759
00:31:21,570 --> 00:31:23,310
seeing a positive benefit in terms of

760
00:31:23,310 --> 00:31:25,260
the protection that we're providing to

761
00:31:25,260 --> 00:31:31,470
our customers and that is it okay six

762
00:31:31,470 --> 00:31:38,220
for your presentation unfortunately we

763
00:31:38,220 --> 00:31:40,230
won't have any time for questions so if

764
00:31:40,230 --> 00:31:42,120
you have any specific question for James

765
00:31:42,120 --> 00:31:45,540
please ask him directly later today or

766
00:31:45,540 --> 00:31:48,590
if a bar later tonight

