1
00:00:00,000 --> 00:00:02,280
the doors are being closed as we speak

2
00:00:02,280 --> 00:00:04,400
could you please take your seats and

3
00:00:04,400 --> 00:00:08,970
help me welcome Sameer and Gregory or so

4
00:00:08,970 --> 00:00:11,040
who will tell us how to ransom our ways

5
00:00:11,040 --> 00:00:13,530
out of this room again over to you stop

6
00:00:13,530 --> 00:00:18,600
yeah okay so hi my name is Samir and

7
00:00:18,600 --> 00:00:20,520
this is my colleague Gregory pinnacle

8
00:00:20,520 --> 00:00:22,710
I'm a both representing case of a threat

9
00:00:22,710 --> 00:00:24,449
control lab by going to talk about

10
00:00:24,449 --> 00:00:27,359
ransomware today run somewhere is a

11
00:00:27,359 --> 00:00:30,929
particularly nasty type of malware very

12
00:00:30,929 --> 00:00:33,300
destructive and we need to do something

13
00:00:33,300 --> 00:00:36,480
to fight back against it and we think we

14
00:00:36,480 --> 00:00:37,860
can do that we're going to show you how

15
00:00:37,860 --> 00:00:41,309
to do that so all of us can put that

16
00:00:41,309 --> 00:00:43,350
nasty stuff in that sarcophagus and

17
00:00:43,350 --> 00:00:49,110
close the lid okay start off with the

18
00:00:49,110 --> 00:00:50,820
couple of types of ransomware there is

19
00:00:50,820 --> 00:00:53,460
this one type over here behind me which

20
00:00:53,460 --> 00:00:57,539
is a kind of screen locker type which is

21
00:00:57,539 --> 00:00:58,800
not the kind of malware we're going to

22
00:00:58,800 --> 00:01:00,270
be talking about or ransom we're going

23
00:01:00,270 --> 00:01:03,300
to talk about instead we're going to

24
00:01:03,300 --> 00:01:06,390
talk about something like this which is

25
00:01:06,390 --> 00:01:10,409
the file encryption kind it's the kind

26
00:01:10,409 --> 00:01:13,590
of ransomware which find locates target

27
00:01:13,590 --> 00:01:17,130
files and encrypts them with a large key

28
00:01:17,130 --> 00:01:18,990
and the only way in which you can get

29
00:01:18,990 --> 00:01:21,060
your files back is by paying the ransom

30
00:01:21,060 --> 00:01:24,840
and get me a private key to decrypt the

31
00:01:24,840 --> 00:01:26,490
files and then you've got them back if

32
00:01:26,490 --> 00:01:31,220
you're lucky so before we go any further

33
00:01:31,220 --> 00:01:34,590
just want to talk about the motivation

34
00:01:34,590 --> 00:01:37,829
behind why we were talking about

35
00:01:37,829 --> 00:01:39,990
ransomware I did say that ransom was

36
00:01:39,990 --> 00:01:43,680
nasty so a few months ago there was a

37
00:01:43,680 --> 00:01:47,369
particularly aggressive campaign of CTB

38
00:01:47,369 --> 00:01:50,450
Locker which was doing the rounds and I

39
00:01:50,450 --> 00:01:53,729
was trying to provide quick generic

40
00:01:53,729 --> 00:01:56,719
detection against this stuff and

41
00:01:56,719 --> 00:01:58,950
accidentally on my research machine

42
00:01:58,950 --> 00:02:03,329
which is isolated my desktop looked a

43
00:02:03,329 --> 00:02:06,140
bit like this so it meant that and

44
00:02:06,140 --> 00:02:10,440
accidentally run the ransomware on from

45
00:02:10,440 --> 00:02:11,730
the command prompt so it didn't actually

46
00:02:11,730 --> 00:02:13,879
care what the extension of the file

47
00:02:13,879 --> 00:02:16,860
but that effective meant that a lot of

48
00:02:16,860 --> 00:02:20,790
my stuff was encrypted so we have to do

49
00:02:20,790 --> 00:02:22,560
something about that so I started

50
00:02:22,560 --> 00:02:25,140
discussing with my colleague Greg and we

51
00:02:25,140 --> 00:02:30,299
came up with a plan Oh ransom why is

52
00:02:30,299 --> 00:02:33,269
something that is very you know as I say

53
00:02:33,269 --> 00:02:34,590
it's very prevalent actually gets

54
00:02:34,590 --> 00:02:37,440
through and infects lots of stuff but it

55
00:02:37,440 --> 00:02:38,970
is actually like lots of other malware

56
00:02:38,970 --> 00:02:41,849
and of malware these days they tend to

57
00:02:41,849 --> 00:02:43,799
be obfuscated 'add and this is one of

58
00:02:43,799 --> 00:02:45,480
the reasons why they're very successful

59
00:02:45,480 --> 00:02:48,540
at getting past scanners right so here

60
00:02:48,540 --> 00:02:51,750
are a few examples here's an example of

61
00:02:51,750 --> 00:02:53,700
the first suffering of rapper Wiz we've

62
00:02:53,700 --> 00:02:57,150
seen is you know MSIL so it's a dotnet

63
00:02:57,150 --> 00:03:00,329
rapper and behind that there was CTB

64
00:03:00,329 --> 00:03:03,420
locker after that we saw at the same

65
00:03:03,420 --> 00:03:07,379
time a visual basic rapper and behind

66
00:03:07,379 --> 00:03:12,150
that was also ctp locker and again

67
00:03:12,150 --> 00:03:13,920
within the same sort of campaign

68
00:03:13,920 --> 00:03:16,620
timeframe there was an all soft

69
00:03:16,620 --> 00:03:20,449
self-extracting archive behind that was

70
00:03:20,449 --> 00:03:24,120
Clark Gable and behind Clark Gable there

71
00:03:24,120 --> 00:03:27,150
was CT bellaca so just explain that what

72
00:03:27,150 --> 00:03:30,750
happened was that the NCS archive had a

73
00:03:30,750 --> 00:03:33,569
dll which would load a file call Clark

74
00:03:33,569 --> 00:03:37,010
Gable or mp3 which was encrypted encoded

75
00:03:37,010 --> 00:03:40,349
data which was then loaded and it ran

76
00:03:40,349 --> 00:03:43,049
ctp locker so City bellaca was a good

77
00:03:43,049 --> 00:03:45,599
example of something that uses a variety

78
00:03:45,599 --> 00:03:47,370
of different Packers to make sure it

79
00:03:47,370 --> 00:03:49,799
gets part scanners and there are other

80
00:03:49,799 --> 00:03:51,569
runs somewhere that also do that like

81
00:03:51,569 --> 00:03:54,930
crypto also it's particularly easy to

82
00:03:54,930 --> 00:03:57,780
get past static scanning what about

83
00:03:57,780 --> 00:04:01,159
dynamic blocking well the thing is that

84
00:04:01,159 --> 00:04:04,829
ransom attends to something to decrypt

85
00:04:04,829 --> 00:04:07,949
itself or inject itself into new process

86
00:04:07,949 --> 00:04:10,139
it inkjets Excel into a new process and

87
00:04:10,139 --> 00:04:12,299
then decrypts itself into that and it

88
00:04:12,299 --> 00:04:14,519
can either be a non OS process so it

89
00:04:14,519 --> 00:04:16,949
could be a child process of itself in

90
00:04:16,949 --> 00:04:19,589
which case sometimes what happens is you

91
00:04:19,589 --> 00:04:21,450
lose some process context if you're

92
00:04:21,450 --> 00:04:24,570
trying to block dynamically but a lot of

93
00:04:24,570 --> 00:04:26,730
them also inject into opera

94
00:04:26,730 --> 00:04:28,550
system processes so like you know a

95
00:04:28,550 --> 00:04:31,410
explorer or svchost or something like

96
00:04:31,410 --> 00:04:33,930
that and maybe that's done because those

97
00:04:33,930 --> 00:04:37,200
are less likely to be monitored however

98
00:04:37,200 --> 00:04:38,640
it does give you an opportunity because

99
00:04:38,640 --> 00:04:41,490
if there is an untrusted process which

100
00:04:41,490 --> 00:04:44,610
is injecting into explorer or svchost or

101
00:04:44,610 --> 00:04:46,620
you know elsasser one of you you like to

102
00:04:46,620 --> 00:04:49,320
call it and it should be raising some

103
00:04:49,320 --> 00:04:51,990
eyebrows it is suspicious if you have

104
00:04:51,990 --> 00:04:54,060
rights to target files which are coming

105
00:04:54,060 --> 00:04:57,180
from an operating system process or if

106
00:04:57,180 --> 00:05:00,210
you have some magic numbers related to

107
00:05:00,210 --> 00:05:03,330
encryption or related to hash functions

108
00:05:03,330 --> 00:05:05,610
within the memory space of an operating

109
00:05:05,610 --> 00:05:07,410
system process then that should be

110
00:05:07,410 --> 00:05:09,030
something that raises some flags so you

111
00:05:09,030 --> 00:05:11,310
should be able to block that so it does

112
00:05:11,310 --> 00:05:14,190
give us opportunities before we talk

113
00:05:14,190 --> 00:05:17,460
about a proof-of-concept demo we should

114
00:05:17,460 --> 00:05:19,380
talk about what happens typically during

115
00:05:19,380 --> 00:05:23,400
an encryption you know procedure so this

116
00:05:23,400 --> 00:05:26,040
is a typical life cycle first of all

117
00:05:26,040 --> 00:05:28,350
there's a target file which is perfectly

118
00:05:28,350 --> 00:05:30,630
decent it could be an image file or docx

119
00:05:30,630 --> 00:05:33,180
file and we have a CNC server which is

120
00:05:33,180 --> 00:05:36,540
controlled by the bad guys then there is

121
00:05:36,540 --> 00:05:40,500
a key pair created so you have a master

122
00:05:40,500 --> 00:05:43,050
key a so you have a master public key

123
00:05:43,050 --> 00:05:45,630
and master private key and we're not

124
00:05:45,630 --> 00:05:47,760
going to use them quite yet we use them

125
00:05:47,760 --> 00:05:50,160
using them shortly so let's say that

126
00:05:50,160 --> 00:05:53,550
this local machine is now infected what

127
00:05:53,550 --> 00:05:55,530
is usually generated locally is a

128
00:05:55,530 --> 00:05:57,590
session key this is a symmetric key

129
00:05:57,590 --> 00:06:01,170
which is something like a ESO hace for

130
00:06:01,170 --> 00:06:03,480
something which uses an initialization

131
00:06:03,480 --> 00:06:05,810
vector which is local to the Machine and

132
00:06:05,810 --> 00:06:10,770
that is then used to encrypt a target

133
00:06:10,770 --> 00:06:12,780
file to create what we call a cupid blob

134
00:06:12,780 --> 00:06:15,690
now why do you call a pupa blob it's

135
00:06:15,690 --> 00:06:18,420
because this target file which used to

136
00:06:18,420 --> 00:06:21,210
have a recognizable format so it's a

137
00:06:21,210 --> 00:06:24,450
known file type usually is created is

138
00:06:24,450 --> 00:06:27,090
then converted into an amorphous blob so

139
00:06:27,090 --> 00:06:30,090
we call it a pupate blob okay that is

140
00:06:30,090 --> 00:06:33,120
central to our strategy so keep that in

141
00:06:33,120 --> 00:06:36,360
mind then what happens is the session

142
00:06:36,360 --> 00:06:39,289
key is operated on by the

143
00:06:39,289 --> 00:06:42,619
public key from the bad guys and the

144
00:06:42,619 --> 00:06:45,110
entire thing is then shipped to the CNC

145
00:06:45,110 --> 00:06:48,110
server and then we would expect the

146
00:06:48,110 --> 00:06:49,669
session key that encrypted all the

147
00:06:49,669 --> 00:06:51,710
target files to be destroyed on the

148
00:06:51,710 --> 00:06:54,499
local machine so using this kind of

149
00:06:54,499 --> 00:06:56,300
method the only way in which you can get

150
00:06:56,300 --> 00:06:58,849
your files back is by the private key

151
00:06:58,849 --> 00:07:00,800
after paying the ransom of course the

152
00:07:00,800 --> 00:07:04,180
private key operating on this encrypted

153
00:07:04,180 --> 00:07:06,349
session key and the session key is then

154
00:07:06,349 --> 00:07:09,080
used to get all the files back now

155
00:07:09,080 --> 00:07:12,309
something to bear in mind is that this

156
00:07:12,309 --> 00:07:14,719
public here metal are talking about over

157
00:07:14,719 --> 00:07:18,050
here can either be embedded in the mal y

158
00:07:18,050 --> 00:07:20,449
itself or it could be obtained via the

159
00:07:20,449 --> 00:07:22,339
network now if it's obtained via the

160
00:07:22,339 --> 00:07:24,770
network and as in the case of something

161
00:07:24,770 --> 00:07:27,740
like cryptolocker in 2013 or crypt of

162
00:07:27,740 --> 00:07:29,539
all it does give you an opportunity to

163
00:07:29,539 --> 00:07:31,789
block at the network level itself which

164
00:07:31,789 --> 00:07:34,279
means that the encryption won't go any

165
00:07:34,279 --> 00:07:40,009
further a couple of assumptions where we

166
00:07:40,009 --> 00:07:41,330
have four assumptions which are

167
00:07:41,330 --> 00:07:43,580
reasonable they're reasonable because if

168
00:07:43,580 --> 00:07:46,159
it just so happens that all of these are

169
00:07:46,159 --> 00:07:47,899
true with the ransomware we've seen so

170
00:07:47,899 --> 00:07:51,139
far first of all ransomware does get

171
00:07:51,139 --> 00:07:53,479
past first lines of defense so it means

172
00:07:53,479 --> 00:07:56,089
your gate wait you can come by email it

173
00:07:56,089 --> 00:07:58,279
gets past your static scanners it gets

174
00:07:58,279 --> 00:08:02,059
past dynamic scanners and you AC is not

175
00:08:02,059 --> 00:08:04,099
going to help you either so we assume

176
00:08:04,099 --> 00:08:05,779
all of these things are true others are

177
00:08:05,779 --> 00:08:07,669
proof of concept doesn't it doesn't mean

178
00:08:07,669 --> 00:08:09,259
anything will always already block the

179
00:08:09,259 --> 00:08:13,669
stuff we also assume that ransomware

180
00:08:13,669 --> 00:08:16,069
comes from an untrusted source we will

181
00:08:16,069 --> 00:08:18,469
explain this later after we have shown

182
00:08:18,469 --> 00:08:21,649
you the demo and finally we assume that

183
00:08:21,649 --> 00:08:24,289
the ransomware will run in ring 3 so

184
00:08:24,289 --> 00:08:27,740
it's a user mode process ok so with that

185
00:08:27,740 --> 00:08:31,509
I'll hand over to my colleague Greg

186
00:08:33,969 --> 00:08:37,839
so much like the real world scenario the

187
00:08:37,839 --> 00:08:40,269
ransom I follows a few critical stages

188
00:08:40,269 --> 00:08:43,089
as part of its infection process first

189
00:08:43,089 --> 00:08:45,310
is of course locating the target files

190
00:08:45,310 --> 00:08:47,649
so in this case is basically enumerates

191
00:08:47,649 --> 00:08:49,300
through the directories that's on the

192
00:08:49,300 --> 00:08:51,879
user system looks for files that could

193
00:08:51,879 --> 00:08:53,649
be of value to the user based on the

194
00:08:53,649 --> 00:08:56,319
extension and then once that is those

195
00:08:56,319 --> 00:08:59,050
are identified the data is basically

196
00:08:59,050 --> 00:09:00,819
taken hostage that means that it

197
00:09:00,819 --> 00:09:02,680
basically is getting encrypted and the

198
00:09:02,680 --> 00:09:05,110
original data is destroyed once that is

199
00:09:05,110 --> 00:09:08,319
done then the user is you know presented

200
00:09:08,319 --> 00:09:09,519
with an option to you know basically

201
00:09:09,519 --> 00:09:12,160
they are asking for ransom so that he

202
00:09:12,160 --> 00:09:16,170
can decrypt and retrieve his data now

203
00:09:16,170 --> 00:09:19,509
one of the things what we did or what we

204
00:09:19,509 --> 00:09:20,889
wanted to do as part of a proof of

205
00:09:20,889 --> 00:09:23,529
concept was basically establish the

206
00:09:23,529 --> 00:09:27,160
intent of ransomware so that we could to

207
00:09:27,160 --> 00:09:29,800
a you know certain degree of confidence

208
00:09:29,800 --> 00:09:31,629
that we could say that it is indeed a

209
00:09:31,629 --> 00:09:34,360
ransomware process that is happening so

210
00:09:34,360 --> 00:09:37,149
in order to do that we had to have some

211
00:09:37,149 --> 00:09:38,980
sort of interception points placing to

212
00:09:38,980 --> 00:09:42,129
the operating system so you know

213
00:09:42,129 --> 00:09:43,750
watching various activities fine system

214
00:09:43,750 --> 00:09:46,180
activities etc so the options that were

215
00:09:46,180 --> 00:09:48,189
available us is basically you know place

216
00:09:48,189 --> 00:09:51,610
hook using user mode the user mode hooks

217
00:09:51,610 --> 00:09:53,079
and you know basically intercept the

218
00:09:53,079 --> 00:09:54,790
basic standard APs and things like that

219
00:09:54,790 --> 00:09:57,040
but there's a disadvantage in that

220
00:09:57,040 --> 00:10:00,129
process because it doesn't give you a

221
00:10:00,129 --> 00:10:02,800
privileged access and also there is an

222
00:10:02,800 --> 00:10:05,199
issue with getting a bird's-eye view of

223
00:10:05,199 --> 00:10:08,170
all the activities that's there so what

224
00:10:08,170 --> 00:10:09,879
we did finally was we ended up using a

225
00:10:09,879 --> 00:10:12,160
kernel mode driver which Bozek basically

226
00:10:12,160 --> 00:10:13,660
you know runs with a higher privilege

227
00:10:13,660 --> 00:10:17,290
and in addition to that it also helps us

228
00:10:17,290 --> 00:10:19,569
gain a bird's-eye view of the whole you

229
00:10:19,569 --> 00:10:20,800
know file system activities that's

230
00:10:20,800 --> 00:10:23,800
happening on the system then we had to

231
00:10:23,800 --> 00:10:25,689
identify the interception points where

232
00:10:25,689 --> 00:10:28,029
we had to place in our hoops or you know

233
00:10:28,029 --> 00:10:29,949
is basically the interception point so

234
00:10:29,949 --> 00:10:31,269
these are the ones that we identified

235
00:10:31,269 --> 00:10:33,399
these are all major functions defined in

236
00:10:33,399 --> 00:10:36,309
the kernel one is of course the create

237
00:10:36,309 --> 00:10:38,800
operation this includes both file

238
00:10:38,800 --> 00:10:40,809
creation and direct recreation and

239
00:10:40,809 --> 00:10:43,720
they're open as well then we intercepted

240
00:10:43,720 --> 00:10:46,059
the directory control operation this was

241
00:10:46,059 --> 00:10:47,800
for basically in this

242
00:10:47,800 --> 00:10:49,570
think the directory enumeration that the

243
00:10:49,570 --> 00:10:51,850
ransomware does in addition to that we

244
00:10:51,850 --> 00:10:54,220
added interception point at right so

245
00:10:54,220 --> 00:10:56,529
that we could have a you know and we

246
00:10:56,529 --> 00:10:58,230
could identify an encryption process

247
00:10:58,230 --> 00:11:00,880
lastly we place an interception point in

248
00:11:00,880 --> 00:11:03,130
close and clean up this is necessary so

249
00:11:03,130 --> 00:11:06,940
that we have an opportunity to revert

250
00:11:06,940 --> 00:11:10,089
some of the let's say damage that the

251
00:11:10,089 --> 00:11:12,940
ransomware does and we we do know that

252
00:11:12,940 --> 00:11:15,160
okay this operation is being ended now

253
00:11:15,160 --> 00:11:17,290
now it's an opportunity for us to take

254
00:11:17,290 --> 00:11:20,380
action the framework which we use to

255
00:11:20,380 --> 00:11:22,660
implement the proof-of-concept we are we

256
00:11:22,660 --> 00:11:24,160
basically use the file system mini

257
00:11:24,160 --> 00:11:26,110
filter it's an architecture that is

258
00:11:26,110 --> 00:11:28,630
available from windows 2000 sp4 and

259
00:11:28,630 --> 00:11:31,180
above and basically gives you call backs

260
00:11:31,180 --> 00:11:33,550
and you know you are able to inspect the

261
00:11:33,550 --> 00:11:37,029
data and take actions on it so once we

262
00:11:37,029 --> 00:11:39,910
had the interception points decided the

263
00:11:39,910 --> 00:11:42,490
next step what we wanted to do was

264
00:11:42,490 --> 00:11:44,019
basically have some sort of a trigger

265
00:11:44,019 --> 00:11:46,480
point so that we could have deeper

266
00:11:46,480 --> 00:11:49,870
tracking of the activities involved so

267
00:11:49,870 --> 00:11:51,760
what we ended up using is basically

268
00:11:51,760 --> 00:11:54,579
directly enumeration now this is an

269
00:11:54,579 --> 00:11:57,010
operation that is common to a very few

270
00:11:57,010 --> 00:11:59,649
process but it's not very common across

271
00:11:59,649 --> 00:12:01,510
process the sense that for example

272
00:12:01,510 --> 00:12:03,670
Explorer and search indexes that runs on

273
00:12:03,670 --> 00:12:06,070
your Windows system does this all the

274
00:12:06,070 --> 00:12:08,709
time but not all the processes so this

275
00:12:08,709 --> 00:12:10,950
was being used as a trigger point and

276
00:12:10,950 --> 00:12:13,480
this was a critical first stage that the

277
00:12:13,480 --> 00:12:15,339
ransomware does in order to locate the

278
00:12:15,339 --> 00:12:18,550
target files the next step was tagging

279
00:12:18,550 --> 00:12:20,290
the various activities once you find

280
00:12:20,290 --> 00:12:23,050
this trigger point there are few options

281
00:12:23,050 --> 00:12:25,450
in front of us the first one was tagging

282
00:12:25,450 --> 00:12:29,170
at process level it would work for few

283
00:12:29,170 --> 00:12:31,540
brands on my family's but there are ants

284
00:12:31,540 --> 00:12:33,310
on my family's that injects code into

285
00:12:33,310 --> 00:12:35,770
the operating system processes which

286
00:12:35,770 --> 00:12:37,690
means that you had some process that

287
00:12:37,690 --> 00:12:39,160
does some good activities and bad

288
00:12:39,160 --> 00:12:42,459
activities and so you cannot with good

289
00:12:42,459 --> 00:12:43,990
confidence say that it is indeed a

290
00:12:43,990 --> 00:12:46,240
ransomware action that is taking place

291
00:12:46,240 --> 00:12:49,540
so we ruled that out the next option

292
00:12:49,540 --> 00:12:52,089
that was presented to us was tagging out

293
00:12:52,089 --> 00:12:53,820
maintaining the context at threat level

294
00:12:53,820 --> 00:12:56,170
it does work for some around somewhere

295
00:12:56,170 --> 00:12:59,199
process our answer my family's but a few

296
00:12:59,199 --> 00:13:01,180
of them such a CTB Locker spirit

297
00:13:01,180 --> 00:13:03,100
work among multiple threads you had one

298
00:13:03,100 --> 00:13:04,930
thread that enumerated the directories

299
00:13:04,930 --> 00:13:06,580
built up the list that needed to be

300
00:13:06,580 --> 00:13:09,790
encrypted and further another thread was

301
00:13:09,790 --> 00:13:11,200
spawned to dust the encryption process

302
00:13:11,200 --> 00:13:14,920
so this was also ruled out so what we

303
00:13:14,920 --> 00:13:16,630
notice during our study of this transfer

304
00:13:16,630 --> 00:13:19,450
my family is even though either in a

305
00:13:19,450 --> 00:13:20,980
single thread in ransom ransomware

306
00:13:20,980 --> 00:13:23,440
family or in case of multi-threaded 10

307
00:13:23,440 --> 00:13:26,740
the code basically or the threads

308
00:13:26,740 --> 00:13:28,780
originated from the same code block so

309
00:13:28,780 --> 00:13:30,520
if you are able to maintain a context

310
00:13:30,520 --> 00:13:32,740
tag along with the code block we are

311
00:13:32,740 --> 00:13:34,900
able to say that okay this code block

312
00:13:34,900 --> 00:13:36,730
first enumerated the directory followed

313
00:13:36,730 --> 00:13:39,400
by you know encryption process and so on

314
00:13:39,400 --> 00:13:41,140
so we were able to say with good

315
00:13:41,140 --> 00:13:42,910
conference that yes you just try it is

316
00:13:42,910 --> 00:13:44,920
acting like around somewhere so we went

317
00:13:44,920 --> 00:13:47,950
ahead with that the next step is

318
00:13:47,950 --> 00:13:50,530
basically we have to identify the actual

319
00:13:50,530 --> 00:13:53,530
encryption process so we we obviously

320
00:13:53,530 --> 00:13:57,670
use the IRP MJ right monitoring and in

321
00:13:57,670 --> 00:13:59,200
order to actually identify an encryption

322
00:13:59,200 --> 00:14:01,930
process we used a couple of techniques

323
00:14:01,930 --> 00:14:05,290
one was basically we saw earth or we try

324
00:14:05,290 --> 00:14:07,780
to identify change from a known file

325
00:14:07,780 --> 00:14:10,210
type into unknown file type so you have

326
00:14:10,210 --> 00:14:12,280
documents and you know various file

327
00:14:12,280 --> 00:14:14,140
formats with their you know fully

328
00:14:14,140 --> 00:14:16,930
documented magic values and if you see a

329
00:14:16,930 --> 00:14:18,430
such a file being changed or modified

330
00:14:18,430 --> 00:14:21,370
into a pupil blob that's a clear

331
00:14:21,370 --> 00:14:23,530
indication that okay it's something is

332
00:14:23,530 --> 00:14:25,330
trying to destroy its data for you we

333
00:14:25,330 --> 00:14:28,510
use that now for files which we are not

334
00:14:28,510 --> 00:14:30,790
aware of or things such as text files

335
00:14:30,790 --> 00:14:32,710
were it doesn't have a clearly marked

336
00:14:32,710 --> 00:14:37,300
magic values we used and we used an

337
00:14:37,300 --> 00:14:39,240
increase in entropy as an indication to

338
00:14:39,240 --> 00:14:42,370
know that yes is some sort of encryption

339
00:14:42,370 --> 00:14:44,860
process is happening there so with that

340
00:14:44,860 --> 00:14:47,470
we are able to say yes the ransomware is

341
00:14:47,470 --> 00:14:50,140
if the ransomware like activity and we

342
00:14:50,140 --> 00:14:53,620
could proceed further now we wanted

343
00:14:53,620 --> 00:14:56,350
minimize the damage so there are few

344
00:14:56,350 --> 00:14:58,960
things that the ransomware does which we

345
00:14:58,960 --> 00:15:01,240
needed to revert first of course is the

346
00:15:01,240 --> 00:15:04,600
the encryption of the data so we are not

347
00:15:04,600 --> 00:15:06,370
able to say probably from in the first

348
00:15:06,370 --> 00:15:08,200
write itself that okay it is indeed

349
00:15:08,200 --> 00:15:10,390
encryption process so we had to buffer

350
00:15:10,390 --> 00:15:13,120
few of the rights prior to being plugged

351
00:15:13,120 --> 00:15:14,019
us

352
00:15:14,019 --> 00:15:15,970
be ransomware as a ransomware encryption

353
00:15:15,970 --> 00:15:18,790
process so what we did in our POC was we

354
00:15:18,790 --> 00:15:20,589
basically let the right go through but

355
00:15:20,589 --> 00:15:22,329
backed up the original data in memory

356
00:15:22,329 --> 00:15:24,790
along with the attack did as part of the

357
00:15:24,790 --> 00:15:26,649
code block and once we identified that

358
00:15:26,649 --> 00:15:28,480
it was a ransomware activity we

359
00:15:28,480 --> 00:15:31,089
basically restored the data the other

360
00:15:31,089 --> 00:15:33,160
form of let's say a damaged that the

361
00:15:33,160 --> 00:15:35,529
ransomware does is more on the files why

362
00:15:35,529 --> 00:15:38,259
it was encrypting the you know the data

363
00:15:38,259 --> 00:15:41,139
on disk so you could see some of the

364
00:15:41,139 --> 00:15:42,910
ransom will take the files from the

365
00:15:42,910 --> 00:15:44,199
original location moved to temporary

366
00:15:44,199 --> 00:15:46,929
directory with a random name and encrypt

367
00:15:46,929 --> 00:15:49,480
the data then boom back with new you

368
00:15:49,480 --> 00:15:51,670
know extension attached to it so in

369
00:15:51,670 --> 00:15:53,259
order to minimize that damage we

370
00:15:53,259 --> 00:15:55,929
basically maintain a small journal as

371
00:15:55,929 --> 00:15:58,569
part of the code block context and once

372
00:15:58,569 --> 00:16:00,759
we identified that it was a ransomware

373
00:16:00,759 --> 00:16:02,799
that was you know it was being

374
00:16:02,799 --> 00:16:04,689
identifies around so when we went back

375
00:16:04,689 --> 00:16:06,339
through the journal and reverted all its

376
00:16:06,339 --> 00:16:08,439
actions so that's what we did to

377
00:16:08,439 --> 00:16:10,959
minimize our damage now let's see the

378
00:16:10,959 --> 00:16:16,179
demo we have a live demo in this so what

379
00:16:16,179 --> 00:16:19,420
I have here is a test or active sample

380
00:16:19,420 --> 00:16:24,689
and yeah it's from earlier this year and

381
00:16:24,689 --> 00:16:26,799
this is one of the files which we

382
00:16:26,799 --> 00:16:29,679
identified that is encrypted initially

383
00:16:29,679 --> 00:16:32,019
as soon as the ransomware is executed

384
00:16:32,019 --> 00:16:35,049
it's a text file so as you can see it's

385
00:16:35,049 --> 00:16:36,879
just recognizable content with you know

386
00:16:36,879 --> 00:16:40,059
English text I'm just going to launch

387
00:16:40,059 --> 00:16:42,490
our POC driver and the user mode

388
00:16:42,490 --> 00:16:44,860
application takes a few seconds to

389
00:16:44,860 --> 00:16:47,049
launch in the background I have some

390
00:16:47,049 --> 00:16:49,660
debug stings being printed out once the

391
00:16:49,660 --> 00:16:51,879
driver starts so that we could see the

392
00:16:51,879 --> 00:16:53,259
various activities such as it was

393
00:16:53,259 --> 00:16:55,209
striking the directly operation

394
00:16:55,209 --> 00:16:57,759
numeration and you know code block base

395
00:16:57,759 --> 00:17:00,669
tagging and extra etc so okay it's up

396
00:17:00,669 --> 00:17:03,610
and I'm going to basically execute the

397
00:17:03,610 --> 00:17:11,309
sample yeah it has identified the

398
00:17:11,309 --> 00:17:14,138
ransomware exe that try to do the

399
00:17:14,138 --> 00:17:16,209
encryption process I am just going to

400
00:17:16,209 --> 00:17:24,339
pause so in this case the it was flagged

401
00:17:24,339 --> 00:17:26,500
because there was a increase in entropy

402
00:17:26,500 --> 00:17:27,640
detected

403
00:17:27,640 --> 00:17:30,559
from as because the text file was being

404
00:17:30,559 --> 00:17:33,590
attempted to be encrypted now if you see

405
00:17:33,590 --> 00:17:37,220
the original text file that that it is

406
00:17:37,220 --> 00:17:46,070
unmodified so what I'm going to do now

407
00:17:46,070 --> 00:17:48,440
is I'm going to revert this snapshot and

408
00:17:48,440 --> 00:17:51,260
run the same Tesla sample without

409
00:17:51,260 --> 00:17:54,230
the driver in running without after poz

410
00:17:54,230 --> 00:17:56,000
running so that you could see what sort

411
00:17:56,000 --> 00:17:58,309
of damage it actually does without the

412
00:17:58,309 --> 00:18:01,210
infrastructure in place

413
00:18:09,010 --> 00:18:12,210
takes a few seconds

414
00:18:35,360 --> 00:18:40,070
take a lower usual yeah okay so I'm just

415
00:18:40,070 --> 00:18:47,870
going to run this sample ok now I will

416
00:18:47,870 --> 00:18:49,520
go back to the directory so as you can

417
00:18:49,520 --> 00:18:51,950
see the file name got changed an extra

418
00:18:51,950 --> 00:18:54,710
extension got added and if you see its

419
00:18:54,710 --> 00:18:57,890
content it's completely unrecognizable

420
00:18:57,890 --> 00:18:59,780
it has changed I basically got encrypted

421
00:18:59,780 --> 00:19:01,760
so I'm going to let the sample to run in

422
00:19:01,760 --> 00:19:04,010
the background and we could see the

423
00:19:04,010 --> 00:19:05,059
splash screen at the end of the

424
00:19:05,059 --> 00:19:11,900
presentation so back to some here okay

425
00:19:11,900 --> 00:19:15,169
so you see the devil they obviously a

426
00:19:15,169 --> 00:19:19,250
couple of risks that exist in doing this

427
00:19:19,250 --> 00:19:21,500
kind of detection it's no different from

428
00:19:21,500 --> 00:19:23,270
any other type of detection that we were

429
00:19:23,270 --> 00:19:25,970
used to doing no over the years so

430
00:19:25,970 --> 00:19:28,510
obviously one is false positives right

431
00:19:28,510 --> 00:19:31,100
there could be some legitimate program

432
00:19:31,100 --> 00:19:33,500
that wants to encrypt files which could

433
00:19:33,500 --> 00:19:35,690
then obviously it will change the magic

434
00:19:35,690 --> 00:19:37,790
markers it will increase entropy and so

435
00:19:37,790 --> 00:19:41,960
on so we need to consider that and there

436
00:19:41,960 --> 00:19:44,000
could be a slowdown in the system as

437
00:19:44,000 --> 00:19:45,980
well because we're now monitoring

438
00:19:45,980 --> 00:19:47,990
certain types of processes so obviously

439
00:19:47,990 --> 00:19:49,460
you know there are some hooks in place

440
00:19:49,460 --> 00:19:52,640
and it's going to run a bit slower so

441
00:19:52,640 --> 00:19:55,130
how do we mitigate against these well

442
00:19:55,130 --> 00:19:58,460
fortunately for us you know one thing

443
00:19:58,460 --> 00:20:00,799
that we can do is who is going to

444
00:20:00,799 --> 00:20:02,450
actually help with both of these and

445
00:20:02,450 --> 00:20:04,730
that is to tighten the process context

446
00:20:04,730 --> 00:20:07,340
we are not going to monitor absolutely

447
00:20:07,340 --> 00:20:11,270
everything we'll just monitor in a hook

448
00:20:11,270 --> 00:20:13,730
into executables that we think are

449
00:20:13,730 --> 00:20:15,620
coming from an untrusted source so that

450
00:20:15,620 --> 00:20:17,210
could be from the internet or it could

451
00:20:17,210 --> 00:20:20,179
be from a removal device something which

452
00:20:20,179 --> 00:20:22,790
we are allowed to tag it as suspicious

453
00:20:22,790 --> 00:20:25,400
if we can look deeper into it we could

454
00:20:25,400 --> 00:20:29,419
do things like well you know the program

455
00:20:29,419 --> 00:20:32,450
the process didn't come from Program

456
00:20:32,450 --> 00:20:34,580
Files directory because if it happens to

457
00:20:34,580 --> 00:20:36,200
be a legitimate program that is

458
00:20:36,200 --> 00:20:37,940
encrypting stuff it is most like to have

459
00:20:37,940 --> 00:20:41,419
been installed as a proper process of

460
00:20:41,419 --> 00:20:43,360
the proper program in program files

461
00:20:43,360 --> 00:20:45,590
apart from that there are various things

462
00:20:45,590 --> 00:20:47,809
we can do which is you know is the file

463
00:20:47,809 --> 00:20:49,130
this design

464
00:20:49,130 --> 00:20:51,140
we maintain a whitelist but these are

465
00:20:51,140 --> 00:20:52,400
things that we do normally with other

466
00:20:52,400 --> 00:20:54,500
types of detection so we don't really

467
00:20:54,500 --> 00:20:56,300
expect too much of an issue in this

468
00:20:56,300 --> 00:21:03,160
respect what about Android so there is

469
00:21:03,160 --> 00:21:05,510
ransomware for Android and this was

470
00:21:05,510 --> 00:21:08,660
mentioned by in a couple of my

471
00:21:08,660 --> 00:21:10,100
colleagues yesterday and they talked

472
00:21:10,100 --> 00:21:12,320
about simple lockers or so so i'll do

473
00:21:12,320 --> 00:21:16,490
that as well well the thing is that the

474
00:21:16,490 --> 00:21:18,080
same framework that we've described for

475
00:21:18,080 --> 00:21:20,000
windows malware can you know windows

476
00:21:20,000 --> 00:21:21,980
ransom work and also you be used for

477
00:21:21,980 --> 00:21:26,930
android in theory the issue is that in

478
00:21:26,930 --> 00:21:33,290
practice in android the malware process

479
00:21:33,290 --> 00:21:36,140
and the AV processor secured product the

480
00:21:36,140 --> 00:21:38,180
boat one is usable processes at the same

481
00:21:38,180 --> 00:21:41,990
level so it's not really possible to to

482
00:21:41,990 --> 00:21:44,300
provide low-level hooks to actually give

483
00:21:44,300 --> 00:21:46,010
us a bird's-eye view of what's going on

484
00:21:46,010 --> 00:21:48,700
so this is going to be very problematic

485
00:21:48,700 --> 00:21:52,700
in addition to that malware in android

486
00:21:52,700 --> 00:21:54,860
can also register for this callback the

487
00:21:54,860 --> 00:21:56,810
boot completed one which can ensure that

488
00:21:56,810 --> 00:22:00,650
it runs before your security app runs so

489
00:22:00,650 --> 00:22:03,260
you know this this actually does

490
00:22:03,260 --> 00:22:05,600
complicate the process of monitoring and

491
00:22:05,600 --> 00:22:08,240
blocking we talked about this at last is

492
00:22:08,240 --> 00:22:11,500
vb i'm a billion actually talk we had a

493
00:22:11,500 --> 00:22:14,090
presentation on it which is online if

494
00:22:14,090 --> 00:22:19,340
you care to look at that so just to wrap

495
00:22:19,340 --> 00:22:22,400
up ransomware is actually a very

496
00:22:22,400 --> 00:22:25,820
destructive type of malware and we must

497
00:22:25,820 --> 00:22:27,670
do something about it we can fight back

498
00:22:27,670 --> 00:22:31,190
we believe that we've shown you you know

499
00:22:31,190 --> 00:22:34,340
a very simple strategy wait it works and

500
00:22:34,340 --> 00:22:37,940
we actually have covered all of these

501
00:22:37,940 --> 00:22:41,180
very famous ransomware samples I mean as

502
00:22:41,180 --> 00:22:44,600
the ones that we have seen so far we do

503
00:22:44,600 --> 00:22:46,100
believe that obviously you know if if

504
00:22:46,100 --> 00:22:47,810
they straight change their strategies

505
00:22:47,810 --> 00:22:50,180
that we would have to you know keep up

506
00:22:50,180 --> 00:22:53,630
with that but I think we can put them to

507
00:22:53,630 --> 00:22:57,250
bed with that

508
00:22:57,250 --> 00:23:04,480
another any questions so are there any

509
00:23:04,480 --> 00:23:05,740
questions to this interesting

510
00:23:05,740 --> 00:23:11,140
presentation don't be shy there is a

511
00:23:11,140 --> 00:23:19,210
question up front here would it be easy

512
00:23:19,210 --> 00:23:22,540
for run somewhere writers to change the

513
00:23:22,540 --> 00:23:24,700
encryption mechanism so they don't touch

514
00:23:24,700 --> 00:23:27,400
the fields a 500 bytes of the document

515
00:23:27,400 --> 00:23:30,880
keeping the file type the same and if

516
00:23:30,880 --> 00:23:33,190
the entire industry say we were to adopt

517
00:23:33,190 --> 00:23:35,650
this approach to detection and the

518
00:23:35,650 --> 00:23:37,030
second question is have you tried it or

519
00:23:37,030 --> 00:23:39,790
not on text files but say jpg which will

520
00:23:39,790 --> 00:23:42,130
probably have high entropy and whether

521
00:23:42,130 --> 00:23:44,970
you have the thresholds for the kind of

522
00:23:44,970 --> 00:23:47,470
entropy changes that will work out for

523
00:23:47,470 --> 00:23:52,030
jtx not just with text files sure so the

524
00:23:52,030 --> 00:23:53,560
one the first question you talked about

525
00:23:53,560 --> 00:23:56,050
was supposing they don't overwrite the

526
00:23:56,050 --> 00:23:59,260
first they don't over at the markers

527
00:23:59,260 --> 00:24:01,300
right they encrypt somewhere else so we

528
00:24:01,300 --> 00:24:03,250
have as I said you know if we do

529
00:24:03,250 --> 00:24:04,330
something like this then that's the way

530
00:24:04,330 --> 00:24:06,340
they're going to go so we would have to

531
00:24:06,340 --> 00:24:09,600
mow it in another part of the file and

532
00:24:09,600 --> 00:24:11,770
we believe that if we are able to

533
00:24:11,770 --> 00:24:14,440
monitor it we can still see some chunks

534
00:24:14,440 --> 00:24:17,350
of data changing the format the second

535
00:24:17,350 --> 00:24:19,180
part which we talked about is a JPEG

536
00:24:19,180 --> 00:24:21,490
file now jpeg audrey has high entropy I

537
00:24:21,490 --> 00:24:23,860
suppose that is what you're driving at

538
00:24:23,860 --> 00:24:26,050
but the thing is that if they still

539
00:24:26,050 --> 00:24:29,740
change the jfif at the beginning we can

540
00:24:29,740 --> 00:24:31,630
still flag it so you have to do it in

541
00:24:31,630 --> 00:24:33,910
conjunction so as I said you know we

542
00:24:33,910 --> 00:24:36,400
would need to keep monitoring how they

543
00:24:36,400 --> 00:24:38,830
do things and we'd have to change the

544
00:24:38,830 --> 00:24:40,570
strategy and we'd have to keep you know

545
00:24:40,570 --> 00:24:43,540
morphing things on our side as well

546
00:24:43,540 --> 00:24:46,360
these are both valid questions and we

547
00:24:46,360 --> 00:24:50,230
have thought about them but for the

548
00:24:50,230 --> 00:24:52,960
current at the time being we believe

549
00:24:52,960 --> 00:24:55,900
we've covered everything but they make

550
00:24:55,900 --> 00:24:57,370
lots of money out of this right so

551
00:24:57,370 --> 00:24:59,110
obviously you know supposing we all

552
00:24:59,110 --> 00:25:01,870
implement this which is what we want so

553
00:25:01,870 --> 00:25:04,870
we can make the world a safer place for

554
00:25:04,870 --> 00:25:06,780
lots of people who

555
00:25:06,780 --> 00:25:09,210
lose their suffer no personal files and

556
00:25:09,210 --> 00:25:13,050
so on we will have to keep changing

557
00:25:13,050 --> 00:25:15,480
things and staying on top of it I don't

558
00:25:15,480 --> 00:25:20,280
know if that helps you but yeah so

559
00:25:20,280 --> 00:25:22,320
another question yea merrily can you

560
00:25:22,320 --> 00:25:24,030
talk a little bit more about the false

561
00:25:24,030 --> 00:25:27,020
positive cases that you have encounter

562
00:25:27,020 --> 00:25:30,960
yes I can we've encountered exactly 0

563
00:25:30,960 --> 00:25:33,680
false positive cases because it has not

564
00:25:33,680 --> 00:25:37,410
it has not been deployed in reality but

565
00:25:37,410 --> 00:25:44,250
see it's a proof of concept the thing is

566
00:25:44,250 --> 00:25:47,880
yes it is a possibility let's let's say

567
00:25:47,880 --> 00:25:49,920
it's a probability actually but we don't

568
00:25:49,920 --> 00:25:55,020
expect too many because if we lock down

569
00:25:55,020 --> 00:25:56,490
the process context as I said earlier

570
00:25:56,490 --> 00:26:01,310
you know we actually focus only on very

571
00:26:01,310 --> 00:26:03,780
targeted processes that seem to come

572
00:26:03,780 --> 00:26:06,330
from an untrusted source then it is less

573
00:26:06,330 --> 00:26:09,090
likely to flag something that's not

574
00:26:09,090 --> 00:26:12,990
supposed to and as we all know we all

575
00:26:12,990 --> 00:26:14,370
flat things that we're not supposed to

576
00:26:14,370 --> 00:26:17,070
in other context not just in this type

577
00:26:17,070 --> 00:26:18,810
of detective strategy in other types of

578
00:26:18,810 --> 00:26:21,090
detection strategy so under those

579
00:26:21,090 --> 00:26:24,720
situations we can always build in you

580
00:26:24,720 --> 00:26:26,730
know a white listing approach that we

581
00:26:26,730 --> 00:26:28,740
can be used which is probably going to

582
00:26:28,740 --> 00:26:31,830
happen on very few files we don't expect

583
00:26:31,830 --> 00:26:33,540
the kind of things that they talk about

584
00:26:33,540 --> 00:26:35,820
here to happen very regularly on lots of

585
00:26:35,820 --> 00:26:37,800
files where the false processes can be

586
00:26:37,800 --> 00:26:42,030
very high I know if that helps hopefully

587
00:26:42,030 --> 00:26:45,090
so another from the middle all right do

588
00:26:45,090 --> 00:26:47,970
you have any provisions for known file

589
00:26:47,970 --> 00:26:50,370
Packers performance say you could detect

590
00:26:50,370 --> 00:26:53,010
the science okay do you have any

591
00:26:53,010 --> 00:26:56,420
provisions for known file file forms

592
00:26:56,420 --> 00:26:59,940
Packers say the pizza zip archive tries

593
00:26:59,940 --> 00:27:03,210
to pack a file then you detect the PK in

594
00:27:03,210 --> 00:27:05,520
the front and then you skip it and the

595
00:27:05,520 --> 00:27:07,080
second question have you ever tried to

596
00:27:07,080 --> 00:27:09,270
actually intercept the symmetric key and

597
00:27:09,270 --> 00:27:11,940
store it somewhere when when

598
00:27:11,940 --> 00:27:14,129
when the pecking happens when the

599
00:27:14,129 --> 00:27:16,620
appreciation happens have you tried to

600
00:27:16,620 --> 00:27:19,350
get the key this is the key yes no

601
00:27:19,350 --> 00:27:21,990
because so I'm going to ask the second

602
00:27:21,990 --> 00:27:23,610
question first because she heard it and

603
00:27:23,610 --> 00:27:25,080
then you can repeat the first question

604
00:27:25,080 --> 00:27:27,659
which I didn't hear the second question

605
00:27:27,659 --> 00:27:30,029
was are we able to get the key that was

606
00:27:30,029 --> 00:27:33,120
used for the encryption your memory see

607
00:27:33,120 --> 00:27:35,460
the thing is I would you know one of my

608
00:27:35,460 --> 00:27:36,919
colleagues talked about that yesterday

609
00:27:36,919 --> 00:27:40,289
in one of these talks but I think

610
00:27:40,289 --> 00:27:41,519
there's a major issue with that because

611
00:27:41,519 --> 00:27:43,139
you need to recognize that you're

612
00:27:43,139 --> 00:27:45,840
actually being I mean I suppose we could

613
00:27:45,840 --> 00:27:47,490
do it in since they're monitoring stuff

614
00:27:47,490 --> 00:27:49,669
but you need to know where the key is

615
00:27:49,669 --> 00:27:53,299
which means that using different

616
00:27:53,299 --> 00:27:56,269
ransomware you would actually have to

617
00:27:56,269 --> 00:27:58,860
maybe look through quite a lot of memory

618
00:27:58,860 --> 00:28:00,750
space you know searching for something

619
00:28:00,750 --> 00:28:02,519
that looks like a key which is not

620
00:28:02,519 --> 00:28:05,820
necessarily going to be very a high

621
00:28:05,820 --> 00:28:07,470
percentage solution I mean we haven't

622
00:28:07,470 --> 00:28:09,529
looked into it we could if we needed to

623
00:28:09,529 --> 00:28:12,210
in the case of Tessa crypt know it

624
00:28:12,210 --> 00:28:14,460
maintains the key in a part of memory as

625
00:28:14,460 --> 00:28:17,039
you know was demonstrated yesterday but

626
00:28:17,039 --> 00:28:18,480
that is not always the case and we don't

627
00:28:18,480 --> 00:28:21,090
really we cannot predict exactly you

628
00:28:21,090 --> 00:28:23,789
know what's going on in that storm we

629
00:28:23,789 --> 00:28:26,070
can't do it right I mean we then need to

630
00:28:26,070 --> 00:28:28,379
for every type of ransomware we're

631
00:28:28,379 --> 00:28:30,620
looking at we'd have to have a different

632
00:28:30,620 --> 00:28:34,590
algorithm to see where that key is which

633
00:28:34,590 --> 00:28:37,440
is quite a lot of overhead I don't know

634
00:28:37,440 --> 00:28:38,610
what your first question was something

635
00:28:38,610 --> 00:28:39,929
well the first question was on the heels

636
00:28:39,929 --> 00:28:42,720
of the false positive saved the zip if

637
00:28:42,720 --> 00:28:44,610
you have a file that is getting backed

638
00:28:44,610 --> 00:28:47,610
by the zipper there but the arch or zip

639
00:28:47,610 --> 00:28:50,039
archive or the C program how do you

640
00:28:50,039 --> 00:28:55,049
discern that from the ransom ware file

641
00:28:55,049 --> 00:28:57,480
oh you mean that zip would also change

642
00:28:57,480 --> 00:28:59,549
the file format well the zip would

643
00:28:59,549 --> 00:29:01,259
change the entropy buddies were short

644
00:29:01,259 --> 00:29:06,179
change it in place okay we thought about

645
00:29:06,179 --> 00:29:10,590
that one too so I think there was yeah

646
00:29:10,590 --> 00:29:14,070
exactly somewhere from there hello you

647
00:29:14,070 --> 00:29:16,320
mentioned they were limiting the

648
00:29:16,320 --> 00:29:18,750
detection for like untrusted processes

649
00:29:18,750 --> 00:29:21,179
but on one of the first slide he also

650
00:29:21,179 --> 00:29:23,399
mentioned like injection to

651
00:29:23,399 --> 00:29:26,009
so that you cannot rely proceso how it

652
00:29:26,009 --> 00:29:28,979
works together basically we detect on

653
00:29:28,979 --> 00:29:31,169
the code block so even if you are

654
00:29:31,169 --> 00:29:33,419
injected into the target process OS

655
00:29:33,419 --> 00:29:36,479
process we only you know target on the

656
00:29:36,479 --> 00:29:37,589
code block so it's a newly allocated

657
00:29:37,589 --> 00:29:40,409
piece of memory so it's disconnected

658
00:29:40,409 --> 00:29:42,989
from you know tho s dll area memory area

659
00:29:42,989 --> 00:29:44,309
and things like that so we can identify

660
00:29:44,309 --> 00:29:46,950
that separately from the toasted content

661
00:29:46,950 --> 00:29:48,929
whatever part is a part is part of the

662
00:29:48,929 --> 00:29:55,559
always yeah so we still oppose still

663
00:29:55,559 --> 00:29:57,389
time for one or two more questions they

664
00:29:57,389 --> 00:29:59,429
are other is there anybody else who has

665
00:29:59,429 --> 00:30:03,869
a question at this point yes all the way

666
00:30:03,869 --> 00:30:07,009
in the back is inconvenient as possible

667
00:30:07,009 --> 00:30:10,489
sir you're making it our life difficult

668
00:30:10,489 --> 00:30:12,899
thank you for the presentation so I

669
00:30:12,899 --> 00:30:16,259
guess if the malware will create a copy

670
00:30:16,259 --> 00:30:18,269
of the file and then delete the original

671
00:30:18,269 --> 00:30:20,849
one your proof of concept will not catch

672
00:30:20,849 --> 00:30:25,519
it is it so or i'm wrong well there are

673
00:30:25,519 --> 00:30:28,409
various different ways in which soft

674
00:30:28,409 --> 00:30:30,210
another proof of concept can be broken

675
00:30:30,210 --> 00:30:33,419
as i said we'd have to keep evolving it

676
00:30:33,419 --> 00:30:35,609
depends on you know we can probably

677
00:30:35,609 --> 00:30:38,779
monitor even to the extent but yeah sure

678
00:30:38,779 --> 00:30:40,950
basically we should evolve to the

679
00:30:40,950 --> 00:30:43,739
strategies that's being employed at the

680
00:30:43,739 --> 00:30:47,339
moment I mean it's actually since it's a

681
00:30:47,339 --> 00:30:49,679
proof of concept I mean there are ways

682
00:30:49,679 --> 00:30:51,869
in which you could bypass but whatever

683
00:30:51,869 --> 00:30:54,059
is out there now we are covering all of

684
00:30:54,059 --> 00:30:56,789
them correct me for example let's say we

685
00:30:56,789 --> 00:30:58,589
had an assumption that everything runs

686
00:30:58,589 --> 00:31:00,960
in user mode right supposing they have a

687
00:31:00,960 --> 00:31:03,210
kernel mode boot kit which is able to

688
00:31:03,210 --> 00:31:05,669
hide what we can monitor you can get

689
00:31:05,669 --> 00:31:08,999
past get around it so there is no one

690
00:31:08,999 --> 00:31:10,409
hundred percent solution here we can

691
00:31:10,409 --> 00:31:13,830
only fight what we can see okay with

692
00:31:13,830 --> 00:31:16,080
with that we have to stop I'd like to

693
00:31:16,080 --> 00:31:17,909
thank the speakers for a wonderful talk

694
00:31:17,909 --> 00:31:19,950
and I saw people in the audience still

695
00:31:19,950 --> 00:31:21,539
actually I've been including the man

696
00:31:21,539 --> 00:31:24,089
without a voice back there so I'm sure

697
00:31:24,089 --> 00:31:25,649
you can make yourself available for

698
00:31:25,649 --> 00:31:26,759
other questions later thank you very

699
00:31:26,759 --> 00:31:28,840
much

700
00:31:28,840 --> 00:31:30,899
you

