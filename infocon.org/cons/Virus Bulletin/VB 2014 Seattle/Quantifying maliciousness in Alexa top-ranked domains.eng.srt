1
00:00:00,110 --> 00:00:02,399
alright I think we're ready to go so

2
00:00:02,399 --> 00:00:05,040
next up we have Paul royal and he's

3
00:00:05,040 --> 00:00:06,629
going to talk to us about how he has

4
00:00:06,629 --> 00:00:09,059
measured malicious activity related to

5
00:00:09,059 --> 00:00:13,620
Alexa top-ranked domains thank you so as

6
00:00:13,620 --> 00:00:15,839
mentioned I'm Paul royal I'm a research

7
00:00:15,839 --> 00:00:19,289
consultant for Barracuda labs which is

8
00:00:19,289 --> 00:00:21,090
the research and threat analysis

9
00:00:21,090 --> 00:00:23,160
division of Barracuda Networks and when

10
00:00:23,160 --> 00:00:25,350
I'm not consulting for Barracuda I am

11
00:00:25,350 --> 00:00:26,699
research faculty at the Georgia

12
00:00:26,699 --> 00:00:28,890
Institute of Technology and associate

13
00:00:28,890 --> 00:00:30,630
director of the Georgia Tech information

14
00:00:30,630 --> 00:00:32,308
security center but today i'm wearing my

15
00:00:32,308 --> 00:00:37,140
Barracuda had so i'll start by providing

16
00:00:37,140 --> 00:00:41,100
some very brief background including the

17
00:00:41,100 --> 00:00:42,629
establishment of for the purposes of

18
00:00:42,629 --> 00:00:44,550
this talk a common definition of what a

19
00:00:44,550 --> 00:00:47,460
drive-by download is and then i will

20
00:00:47,460 --> 00:00:49,620
reference several drive-by downloads

21
00:00:49,620 --> 00:00:51,539
that were facilitated via popular

22
00:00:51,539 --> 00:00:53,309
website compromises or at least those

23
00:00:53,309 --> 00:00:55,829
that Barracuda labs reported on within

24
00:00:55,829 --> 00:00:57,930
the last year and with that as a

25
00:00:57,930 --> 00:01:00,960
motivating segue I'll talk about what we

26
00:01:00,960 --> 00:01:02,760
hope to achieve by attempting to

27
00:01:02,760 --> 00:01:05,570
quantify the impact of maliciousness

28
00:01:05,570 --> 00:01:07,909
originating from top-ranked domains and

29
00:01:07,909 --> 00:01:11,010
then after I have pared away what I

30
00:01:11,010 --> 00:01:14,340
think can be measured I'll go into

31
00:01:14,340 --> 00:01:16,680
details of how we perform the experiment

32
00:01:16,680 --> 00:01:20,369
how we architected it and then i will

33
00:01:20,369 --> 00:01:22,740
discuss our present and analysis of the

34
00:01:22,740 --> 00:01:25,560
results and then i will conclude the

35
00:01:25,560 --> 00:01:29,070
talk with the with a few with a small

36
00:01:29,070 --> 00:01:31,339
summary

37
00:01:32,330 --> 00:01:35,070
okay so again for the purposes of this

38
00:01:35,070 --> 00:01:37,680
talk and I'll be as quick as i as i can

39
00:01:37,680 --> 00:01:39,180
because i'm sure everybody inherit he

40
00:01:39,180 --> 00:01:40,950
knows what a drive-by download is but

41
00:01:40,950 --> 00:01:42,330
it's an attack where malicious content

42
00:01:42,330 --> 00:01:44,670
is served to the web browser are its

43
00:01:44,670 --> 00:01:46,890
plugins it's intended to occur without

44
00:01:46,890 --> 00:01:48,360
the users knowledge so it's supposed to

45
00:01:48,360 --> 00:01:51,840
be surreptitious in nature and if it's

46
00:01:51,840 --> 00:01:54,120
successful you have arbitrary attacker

47
00:01:54,120 --> 00:01:55,830
decided code being executed on the

48
00:01:55,830 --> 00:01:58,980
target system in order to facilitate a

49
00:01:58,980 --> 00:02:01,740
drive-by download attackers for example

50
00:02:01,740 --> 00:02:03,840
can use emails links for example

51
00:02:03,840 --> 00:02:05,640
referencing a purchase that the target

52
00:02:05,640 --> 00:02:07,950
did not make are they'll employ

53
00:02:07,950 --> 00:02:09,959
traditional search engine optimization

54
00:02:09,959 --> 00:02:13,230
techniques so that search results lead

55
00:02:13,230 --> 00:02:15,990
to malicious content are finally they

56
00:02:15,990 --> 00:02:18,300
can compromise a popular legitimate

57
00:02:18,300 --> 00:02:20,940
website and that's this last bullet is

58
00:02:20,940 --> 00:02:25,620
what this talk is going to focus on as

59
00:02:25,620 --> 00:02:29,640
an example Barracuda Labs runs a URL

60
00:02:29,640 --> 00:02:31,140
analysis system that I'll describe in

61
00:02:31,140 --> 00:02:34,140
this talk but in June of last year we

62
00:02:34,140 --> 00:02:35,700
found that Rolling Stone which is a

63
00:02:35,700 --> 00:02:39,150
popular us arts at least a popular

64
00:02:39,150 --> 00:02:43,050
English website served visitors drive-by

65
00:02:43,050 --> 00:02:45,150
downloads in this case the malicious

66
00:02:45,150 --> 00:02:47,850
content originated from Rolling Stone

67
00:02:47,850 --> 00:02:49,890
coms use of an ad network in this case

68
00:02:49,890 --> 00:02:53,150
it was google's doubleclick and

69
00:02:53,150 --> 00:02:56,010
ultimately the browser and its plugins

70
00:02:56,010 --> 00:02:58,410
were served malicious content from a

71
00:02:58,410 --> 00:03:00,269
site backed by the sweet orange exploit

72
00:03:00,269 --> 00:03:02,580
kit which as some of you may know has

73
00:03:02,580 --> 00:03:05,910
become quite popular in this case zero

74
00:03:05,910 --> 00:03:10,019
access was installed if the if the

75
00:03:10,019 --> 00:03:12,720
system was successfully compromised and

76
00:03:12,720 --> 00:03:14,420
obviously there's a little bit of irony

77
00:03:14,420 --> 00:03:17,310
with regards to malware being delivered

78
00:03:17,310 --> 00:03:19,380
be an ad network that makes money for

79
00:03:19,380 --> 00:03:20,940
its operators primarily through click

80
00:03:20,940 --> 00:03:27,090
fraud continuing on in october of last

81
00:03:27,090 --> 00:03:29,670
year a much more significant event

82
00:03:29,670 --> 00:03:33,209
occurred in that PHP met with serving

83
00:03:33,209 --> 00:03:35,790
visitors drive-by downloads and in this

84
00:03:35,790 --> 00:03:37,640
case redirections to malicious content

85
00:03:37,640 --> 00:03:39,900
where the dirt with the result of a

86
00:03:39,900 --> 00:03:42,030
direct website compromised these

87
00:03:42,030 --> 00:03:44,220
ultimately the redirections ultimately

88
00:03:44,220 --> 00:03:45,870
led to a site backed by

89
00:03:45,870 --> 00:03:48,120
the magnitude exploit kit and I think

90
00:03:48,120 --> 00:03:50,549
this is much worse than say rolling

91
00:03:50,549 --> 00:03:54,269
stone or hasbro com because visitors at

92
00:03:54,269 --> 00:03:57,209
php.net are likely to be individuals in

93
00:03:57,209 --> 00:03:59,459
positions of technical authority and

94
00:03:59,459 --> 00:04:02,610
privilege so that's kind of a bummer

95
00:04:02,610 --> 00:04:06,480
when this was first identified this was

96
00:04:06,480 --> 00:04:08,250
actually first identified by Google I

97
00:04:08,250 --> 00:04:10,560
think publicly because they proceeded to

98
00:04:10,560 --> 00:04:13,650
add PHP net I believe to their blacklist

99
00:04:13,650 --> 00:04:17,070
and the php.net maintainer is responded

100
00:04:17,070 --> 00:04:18,779
by by saying that it was a false

101
00:04:18,779 --> 00:04:20,880
positive and then in response to that

102
00:04:20,880 --> 00:04:23,550
Barracuda labs released a pcap of an

103
00:04:23,550 --> 00:04:25,110
actual drive-by download session

104
00:04:25,110 --> 00:04:27,660
involving php.net at which point after

105
00:04:27,660 --> 00:04:31,380
some analysis the php.net operators took

106
00:04:31,380 --> 00:04:33,930
down a server and revoked some ssl

107
00:04:33,930 --> 00:04:37,110
certificates so in this case providing

108
00:04:37,110 --> 00:04:40,530
evidence to inform the community I think

109
00:04:40,530 --> 00:04:42,060
actually resulted in a quicker response

110
00:04:42,060 --> 00:04:48,990
but more on that later so obviously

111
00:04:48,990 --> 00:04:50,940
drive-by downloads are a big problem

112
00:04:50,940 --> 00:04:52,680
because they're a popular way to get

113
00:04:52,680 --> 00:04:55,050
malware onto target systems whether you

114
00:04:55,050 --> 00:04:57,560
want to build a commodity botnet are

115
00:04:57,560 --> 00:05:01,169
specifically infiltrate an organization

116
00:05:01,169 --> 00:05:05,580
are an individual of interest we'd like

117
00:05:05,580 --> 00:05:07,530
to better understand the extent of the

118
00:05:07,530 --> 00:05:09,389
problem what the incidence of drive-by

119
00:05:09,389 --> 00:05:13,349
downloads are and in this case that

120
00:05:13,349 --> 00:05:15,240
measurement necessarily involves

121
00:05:15,240 --> 00:05:17,610
detection the detection of drive-by

122
00:05:17,610 --> 00:05:20,639
downloads and in this case we would like

123
00:05:20,639 --> 00:05:24,560
detection to be as generic as possible

124
00:05:24,560 --> 00:05:27,120
so we don't want to if possibly we don't

125
00:05:27,120 --> 00:05:28,680
want to rely on prior knowledge of

126
00:05:28,680 --> 00:05:32,419
specific exploits or vulnerabilities and

127
00:05:32,419 --> 00:05:34,620
at least for me given that I come from

128
00:05:34,620 --> 00:05:37,349
an academic background I would like any

129
00:05:37,349 --> 00:05:40,760
results that we publish to be

130
00:05:40,760 --> 00:05:43,020
transparent in terms of in terms of

131
00:05:43,020 --> 00:05:44,630
their methodologies and more importantly

132
00:05:44,630 --> 00:05:46,979
reproducible by third parties who can

133
00:05:46,979 --> 00:05:52,169
verify our results of course the scale

134
00:05:52,169 --> 00:05:54,390
of the problem space checking the entire

135
00:05:54,390 --> 00:05:57,479
web for drive-by downloads makes

136
00:05:57,479 --> 00:05:59,320
comprehensive measurement of the

137
00:05:59,320 --> 00:06:01,330
problem difficult I guess unless you're

138
00:06:01,330 --> 00:06:04,800
an entity like Google or maybe Microsoft

139
00:06:04,800 --> 00:06:09,340
so for our case we decided to focus on

140
00:06:09,340 --> 00:06:11,350
looking at maliciousness in top rank

141
00:06:11,350 --> 00:06:14,050
sites we felt that the this subspace of

142
00:06:14,050 --> 00:06:16,720
the problem was tractable in size that

143
00:06:16,720 --> 00:06:18,310
basically three guys in a research lab

144
00:06:18,310 --> 00:06:22,720
could try and tackle it and significant

145
00:06:22,720 --> 00:06:25,000
in its impact because again you're

146
00:06:25,000 --> 00:06:27,070
dealing with the most popular presumably

147
00:06:27,070 --> 00:06:30,190
the most popular websites and in

148
00:06:30,190 --> 00:06:32,500
addition instead of sourcing the

149
00:06:32,500 --> 00:06:34,060
popularity are instead of determining

150
00:06:34,060 --> 00:06:36,310
the popularity of a website from say

151
00:06:36,310 --> 00:06:38,890
Barracuda Networks appliances we wanted

152
00:06:38,890 --> 00:06:40,060
something that would generalize

153
00:06:40,060 --> 00:06:42,970
popularity beyond for example the

154
00:06:42,970 --> 00:06:44,380
centricity associated with the

155
00:06:44,380 --> 00:06:46,060
deployments of appliances in a specific

156
00:06:46,060 --> 00:06:48,970
country so we ended up you actually

157
00:06:48,970 --> 00:06:51,310
using a different as implied by the

158
00:06:51,310 --> 00:06:54,040
title of this talk a different source of

159
00:06:54,040 --> 00:06:59,170
popular websites so again we want to

160
00:06:59,170 --> 00:07:02,020
identify drive-by downloads so we can

161
00:07:02,020 --> 00:07:03,400
again measure their impact as they

162
00:07:03,400 --> 00:07:05,620
pertain to their their their incidence

163
00:07:05,620 --> 00:07:07,470
or appearance in top rank websites

164
00:07:07,470 --> 00:07:11,890
without relying on on any specifics of

165
00:07:11,890 --> 00:07:14,410
what vulnerabilities are exploits what

166
00:07:14,410 --> 00:07:15,640
vote abilities are targeted or what

167
00:07:15,640 --> 00:07:17,620
specific exploit kits for example are

168
00:07:17,620 --> 00:07:20,680
used and we ended up settling on a black

169
00:07:20,680 --> 00:07:23,530
box approach so with that black box

170
00:07:23,530 --> 00:07:24,730
approach we decided to basically

171
00:07:24,730 --> 00:07:26,980
prioritize knowledge that something had

172
00:07:26,980 --> 00:07:28,510
happened over how it had happened

173
00:07:28,510 --> 00:07:30,220
because we can actually go back and

174
00:07:30,220 --> 00:07:33,970
determine how it had happened and indeed

175
00:07:33,970 --> 00:07:35,560
we felt and hopefully you'll be

176
00:07:35,560 --> 00:07:36,610
convinced at the end of this

177
00:07:36,610 --> 00:07:40,090
presentation that we were able to reduce

178
00:07:40,090 --> 00:07:42,610
our dependence on prior knowledge that

179
00:07:42,610 --> 00:07:46,570
we can didn't need to to look for any

180
00:07:46,570 --> 00:07:49,120
specific indicators other than the

181
00:07:49,120 --> 00:07:51,430
results of a drive-by download and I'll

182
00:07:51,430 --> 00:07:53,470
get to that in a little bit and then in

183
00:07:53,470 --> 00:07:55,720
order to make sure that our black box

184
00:07:55,720 --> 00:07:57,970
approach was a curator to assess its

185
00:07:57,970 --> 00:08:01,120
efficacy we can combine it with white

186
00:08:01,120 --> 00:08:02,830
box analysis to achieve whatever

187
00:08:02,830 --> 00:08:04,870
granularity of knowledge we want we can

188
00:08:04,870 --> 00:08:07,300
determine the how once we know that that

189
00:08:07,300 --> 00:08:09,780
something has happened

190
00:08:09,780 --> 00:08:12,760
so for our black box approach we

191
00:08:12,760 --> 00:08:14,800
actually made use of heavyweight

192
00:08:14,800 --> 00:08:18,310
virtualization so like a full of a fully

193
00:08:18,310 --> 00:08:20,580
instantiated heavyweight virtual machine

194
00:08:20,580 --> 00:08:22,960
we started by creating a vm that had

195
00:08:22,960 --> 00:08:24,850
ubiquitously targeted software

196
00:08:24,850 --> 00:08:26,490
components components that would likely

197
00:08:26,490 --> 00:08:29,920
be used or be targeted or attacked in a

198
00:08:29,920 --> 00:08:35,289
drive-by download and after we had the

199
00:08:35,289 --> 00:08:37,330
VM we basically established a drive-by

200
00:08:37,330 --> 00:08:39,640
download identification process whereby

201
00:08:39,640 --> 00:08:41,919
we would force a browser in the VM to

202
00:08:41,919 --> 00:08:44,500
visit the website or basically URL of

203
00:08:44,500 --> 00:08:47,380
our choice will record the network

204
00:08:47,380 --> 00:08:49,690
traffic of that force to visit and we'll

205
00:08:49,690 --> 00:08:51,820
obviously let the VM execute for a short

206
00:08:51,820 --> 00:08:54,910
period after the visit and then from

207
00:08:54,910 --> 00:08:56,710
that traffic heuristic we identify

208
00:08:56,710 --> 00:09:00,130
whether a drive-by download occurred and

209
00:09:00,130 --> 00:09:02,320
this basically gave us a process and

210
00:09:02,320 --> 00:09:04,990
they obviously a specific vm but then we

211
00:09:04,990 --> 00:09:07,390
built around that an automation harness

212
00:09:07,390 --> 00:09:09,340
that would operate many of these VMs

213
00:09:09,340 --> 00:09:13,840
simultaneously on a given box again

214
00:09:13,840 --> 00:09:15,820
using various systems engineering

215
00:09:15,820 --> 00:09:19,690
techniques and then once we actually had

216
00:09:19,690 --> 00:09:21,160
a harness we could perform experiments

217
00:09:21,160 --> 00:09:24,670
and once we had drive-by downloads that

218
00:09:24,670 --> 00:09:26,530
were heuristic identified they were

219
00:09:26,530 --> 00:09:28,870
automatically identified we performed a

220
00:09:28,870 --> 00:09:31,090
manual white box analysis of the

221
00:09:31,090 --> 00:09:32,920
corresponding network traffic to make

222
00:09:32,920 --> 00:09:35,170
sure we didn't have false positives and

223
00:09:35,170 --> 00:09:38,290
to stand again to identify the hell of a

224
00:09:38,290 --> 00:09:43,150
particular event so with with that

225
00:09:43,150 --> 00:09:44,980
covered now that we know what we're

226
00:09:44,980 --> 00:09:47,920
going to try and create experimental

227
00:09:47,920 --> 00:09:49,390
infrastructure to measure let's talk

228
00:09:49,390 --> 00:09:50,800
about the specifics of how we

229
00:09:50,800 --> 00:09:55,960
architected our experiments so obviously

230
00:09:55,960 --> 00:09:57,400
as the input source we ended up deciding

231
00:09:57,400 --> 00:10:01,180
on taking the top 25,000 of the Alexa

232
00:10:01,180 --> 00:10:03,520
top 1 million so Alexa basically

233
00:10:03,520 --> 00:10:04,960
provides an inorder ranking of these

234
00:10:04,960 --> 00:10:07,960
domains and we took the the top 25

235
00:10:07,960 --> 00:10:09,640
thousand now these are just the domains

236
00:10:09,640 --> 00:10:11,890
which means if you force a virtual

237
00:10:11,890 --> 00:10:13,330
machine to visit them you're only going

238
00:10:13,330 --> 00:10:15,790
to get the index page but this is of

239
00:10:15,790 --> 00:10:18,420
course a likely target for attackers

240
00:10:18,420 --> 00:10:20,200
because it will provide the greatest

241
00:10:20,200 --> 00:10:22,060
coverage relative to the

242
00:10:22,060 --> 00:10:24,340
two victims that that they'll get from

243
00:10:24,340 --> 00:10:26,920
the the corresponding campaign in terms

244
00:10:26,920 --> 00:10:29,890
of the actual hardware you can see here

245
00:10:29,890 --> 00:10:32,020
that we had just a 2-u database know

246
00:10:32,020 --> 00:10:33,910
this commodity hardware with mechanical

247
00:10:33,910 --> 00:10:35,860
disks that you can purchase from any

248
00:10:35,860 --> 00:10:39,030
major vendor we're an open source

249
00:10:39,030 --> 00:10:41,710
software in this case debian linux and

250
00:10:41,710 --> 00:10:43,450
postgresql is our database the database

251
00:10:43,450 --> 00:10:45,970
server just operates the database and

252
00:10:45,970 --> 00:10:49,450
houses the the outputs of the

253
00:10:49,450 --> 00:10:52,810
experiments and then together with the

254
00:10:52,810 --> 00:10:54,970
database did we had just a standard one

255
00:10:54,970 --> 00:10:57,190
you to socket processing node again no

256
00:10:57,190 --> 00:11:00,850
magic here but we were actually able to

257
00:11:00,850 --> 00:11:03,760
achieve significant scalability by using

258
00:11:03,760 --> 00:11:05,110
techniques like hardware virtualization

259
00:11:05,110 --> 00:11:06,940
extensions which allowed us to

260
00:11:06,940 --> 00:11:10,090
overcommit virtual machines to physical

261
00:11:10,090 --> 00:11:11,380
cores we're actually able to operate

262
00:11:11,380 --> 00:11:13,900
about 128 virtual machines at once on

263
00:11:13,900 --> 00:11:16,990
the Suwannee processing node and again

264
00:11:16,990 --> 00:11:19,420
we built it all off of open-source

265
00:11:19,420 --> 00:11:21,670
software in this case debian linux and

266
00:11:21,670 --> 00:11:23,770
the colonel virtual machine a

267
00:11:23,770 --> 00:11:25,510
virtualization container which has been

268
00:11:25,510 --> 00:11:27,310
mainlined in the linux kernel for some

269
00:11:27,310 --> 00:11:31,330
time so in terms of exactly what that

270
00:11:31,330 --> 00:11:34,780
vulnerable vm looked like we started

271
00:11:34,780 --> 00:11:37,030
with windows XP sp2 and added no

272
00:11:37,030 --> 00:11:38,830
additional patches again the plan is to

273
00:11:38,830 --> 00:11:40,600
create a virtual machine that is as

274
00:11:40,600 --> 00:11:42,730
vulnerable as possible to cast as wide

275
00:11:42,730 --> 00:11:44,290
and that is possible relative to

276
00:11:44,290 --> 00:11:45,880
potential exploits that will target it

277
00:11:45,880 --> 00:11:49,180
during these force to browser visits and

278
00:11:49,180 --> 00:11:52,960
we use the at the time that well we use

279
00:11:52,960 --> 00:11:54,700
the default version of the web browser

280
00:11:54,700 --> 00:11:56,230
that came with windows XP which is

281
00:11:56,230 --> 00:11:58,750
internet explorer 6 in terms of the

282
00:11:58,750 --> 00:12:00,520
overall system we actually migrated to

283
00:12:00,520 --> 00:12:04,360
ie8 last year and in terms of plugins we

284
00:12:04,360 --> 00:12:06,250
had an older version of Acrobat Reader

285
00:12:06,250 --> 00:12:09,130
flash player and the java web plug-in

286
00:12:09,130 --> 00:12:11,830
and I mean it's you typically don't want

287
00:12:11,830 --> 00:12:13,210
to choose something that's as old as

288
00:12:13,210 --> 00:12:14,890
possible because then certain newer

289
00:12:14,890 --> 00:12:17,680
exploits won't actually work with it and

290
00:12:17,680 --> 00:12:19,990
exploit kit operators as we know will

291
00:12:19,990 --> 00:12:22,120
actually abandon the use of exploits

292
00:12:22,120 --> 00:12:24,330
that are not actually netting them

293
00:12:24,330 --> 00:12:26,260
individuals because they're more they're

294
00:12:26,260 --> 00:12:27,640
more trouble than they're worth because

295
00:12:27,640 --> 00:12:32,740
they can be detected in addition will

296
00:12:32,740 --> 00:12:34,210
probably be adding the silverlight

297
00:12:34,210 --> 00:12:35,529
plugin soon because we've

298
00:12:35,529 --> 00:12:38,879
started seeing exploit kits make use of

299
00:12:38,879 --> 00:12:40,540
vulnerabilities in the silverlight

300
00:12:40,540 --> 00:12:43,029
plugin but this is this is the

301
00:12:43,029 --> 00:12:44,740
configuration as it was for the case

302
00:12:44,740 --> 00:12:47,490
studies that I'm going to report on

303
00:12:47,490 --> 00:12:49,660
obviously at some point with windows XP

304
00:12:49,660 --> 00:12:52,029
now end of life will also want to try

305
00:12:52,029 --> 00:12:54,009
moving to Windows 7 although that

306
00:12:54,009 --> 00:12:56,230
results in a factor 8 increase in the

307
00:12:56,230 --> 00:12:57,430
amount of memory you have to give each

308
00:12:57,430 --> 00:12:58,839
virtual machine so there is an

309
00:12:58,839 --> 00:13:02,829
implementation detail to work with all

310
00:13:02,829 --> 00:13:04,779
right so on the processing node we

311
00:13:04,779 --> 00:13:07,360
basically start a process the process

312
00:13:07,360 --> 00:13:09,279
spawns a bunch of threads and each

313
00:13:09,279 --> 00:13:12,639
thread will continuously do the

314
00:13:12,639 --> 00:13:14,740
following which is obtained an

315
00:13:14,740 --> 00:13:16,569
unprocessed URL using a row level

316
00:13:16,569 --> 00:13:18,009
locking mechanism to maintain

317
00:13:18,009 --> 00:13:19,540
concurrency and all that other stuff all

318
00:13:19,540 --> 00:13:21,550
that good stuff and once it has an

319
00:13:21,550 --> 00:13:23,949
unprocessed URL it will start basically

320
00:13:23,949 --> 00:13:26,189
a sterile version of the virtual machine

321
00:13:26,189 --> 00:13:28,720
that will be used to assess whether the

322
00:13:28,720 --> 00:13:30,850
URL when visited results in a drive-by

323
00:13:30,850 --> 00:13:33,430
download and right before we invoke the

324
00:13:33,430 --> 00:13:35,199
VM we will start recording all the

325
00:13:35,199 --> 00:13:37,499
network traffic that will take place

326
00:13:37,499 --> 00:13:40,959
during and after the forced visit and

327
00:13:40,959 --> 00:13:42,939
there's a basically a script inside the

328
00:13:42,939 --> 00:13:45,670
VM that will will will facilitate the

329
00:13:45,670 --> 00:13:47,759
browser going to the URL of our choice

330
00:13:47,759 --> 00:13:49,990
after the forest visit has occurred will

331
00:13:49,990 --> 00:13:52,389
let the VM execute for a little while

332
00:13:52,389 --> 00:13:55,600
which is again hopefully enough time for

333
00:13:55,600 --> 00:13:57,550
software to be compromised if it's going

334
00:13:57,550 --> 00:14:00,910
to be compromised and I would add that

335
00:14:00,910 --> 00:14:02,740
in contrast to the general malware

336
00:14:02,740 --> 00:14:04,660
analysis dynamic malware analysis

337
00:14:04,660 --> 00:14:06,970
playing where malware has many many

338
00:14:06,970 --> 00:14:09,699
different ways to exhibit stalling

339
00:14:09,699 --> 00:14:11,470
behavior it's a little bit trickier on

340
00:14:11,470 --> 00:14:14,290
the drive-by download side because if if

341
00:14:14,290 --> 00:14:15,850
an exploit kit operator again is going

342
00:14:15,850 --> 00:14:17,620
to try and evade sandbox systems by

343
00:14:17,620 --> 00:14:20,319
having having their malicious code

344
00:14:20,319 --> 00:14:21,879
activate after a certain period of time

345
00:14:21,879 --> 00:14:24,000
that could actually prevent them from

346
00:14:24,000 --> 00:14:26,050
successfully targeting legitimate user

347
00:14:26,050 --> 00:14:27,610
because the user will navigate to

348
00:14:27,610 --> 00:14:28,899
another portion of the site or to

349
00:14:28,899 --> 00:14:31,179
another site itself so in this case it

350
00:14:31,179 --> 00:14:32,439
looks like the defenders may actually

351
00:14:32,439 --> 00:14:35,829
have at least less of a disadvantage so

352
00:14:35,829 --> 00:14:39,309
in all cases after after the virtual

353
00:14:39,309 --> 00:14:40,540
machine is allowed to execute for a

354
00:14:40,540 --> 00:14:42,490
brief period of time we terminate it and

355
00:14:42,490 --> 00:14:45,459
then use automated means to to look at

356
00:14:45,459 --> 00:14:47,319
its network traffic and then a heuristic

357
00:14:47,319 --> 00:14:48,370
to determine whether

358
00:14:48,370 --> 00:14:51,010
or a drive-by download occurred so the

359
00:14:51,010 --> 00:14:53,589
question is what is that heuristic it's

360
00:14:53,589 --> 00:14:55,839
actually extremely simple for a given

361
00:14:55,839 --> 00:14:57,910
Network session we simply wanted to see

362
00:14:57,910 --> 00:14:59,560
whether an executable was forced to the

363
00:14:59,560 --> 00:15:02,589
vm so for example you can look for a

364
00:15:02,589 --> 00:15:04,750
given Ethernet frame assuming no gzip

365
00:15:04,750 --> 00:15:06,040
compression or other things are being

366
00:15:06,040 --> 00:15:09,250
used whether you can find an MZ header

367
00:15:09,250 --> 00:15:12,730
and a PE header and normally this

368
00:15:12,730 --> 00:15:15,100
heuristic for arbitrary HTTP traffic

369
00:15:15,100 --> 00:15:17,860
would result in a large number of false

370
00:15:17,860 --> 00:15:19,960
positives and in this case the the

371
00:15:19,960 --> 00:15:22,390
utility of this as a heuristic is is

372
00:15:22,390 --> 00:15:25,029
completely dependent on the context in

373
00:15:25,029 --> 00:15:27,730
which it is being used again in this

374
00:15:27,730 --> 00:15:30,100
case we have top-ranked sites and we

375
00:15:30,100 --> 00:15:31,839
have only the index page of top-ranked

376
00:15:31,839 --> 00:15:34,860
sites and I at least cannot name any

377
00:15:34,860 --> 00:15:37,450
top-ranked site that when you visit its

378
00:15:37,450 --> 00:15:39,220
index page will serve you a Windows

379
00:15:39,220 --> 00:15:41,410
executable so in this case the heuristic

380
00:15:41,410 --> 00:15:43,450
was was actually somewhat useful and

381
00:15:43,450 --> 00:15:44,890
actually in practice for our case

382
00:15:44,890 --> 00:15:47,710
studies it worked remarkably well we had

383
00:15:47,710 --> 00:15:50,380
two month-long case studies and in the

384
00:15:50,380 --> 00:15:52,210
februari in the first of those case

385
00:15:52,210 --> 00:15:53,680
studies we actually only had two false

386
00:15:53,680 --> 00:15:55,690
positives using this heuristic and then

387
00:15:55,690 --> 00:15:57,339
for the second case study we had no

388
00:15:57,339 --> 00:15:59,589
false positives so in context even a

389
00:15:59,589 --> 00:16:01,000
simple heuristic that normally wouldn't

390
00:16:01,000 --> 00:16:06,330
be very useful can actually fit the bill

391
00:16:06,420 --> 00:16:11,020
so once we've identified that a site

392
00:16:11,020 --> 00:16:12,850
when visited results in a drive-by

393
00:16:12,850 --> 00:16:14,800
download we need to try and estimate the

394
00:16:14,800 --> 00:16:17,260
number of affected users and we don't

395
00:16:17,260 --> 00:16:18,820
have visibility to the traffic to those

396
00:16:18,820 --> 00:16:20,920
sites so we're going to have to use some

397
00:16:20,920 --> 00:16:25,209
other means now Alexa published the

398
00:16:25,209 --> 00:16:28,180
popularity of a site as a relative eyes

399
00:16:28,180 --> 00:16:30,880
percentage of all views that site

400
00:16:30,880 --> 00:16:33,160
receives and it doesn't publish the hard

401
00:16:33,160 --> 00:16:34,839
number for whatever combination of

402
00:16:34,839 --> 00:16:36,910
reasons but you can actually use the

403
00:16:36,910 --> 00:16:39,070
statistics reported by other sites to

404
00:16:39,070 --> 00:16:42,190
determine this number so for example in

405
00:16:42,190 --> 00:16:45,400
February of 2012 Wikipedia self-reported

406
00:16:45,400 --> 00:16:49,300
about 15.75 billion views and Alexa

407
00:16:49,300 --> 00:16:51,070
reported a corresponding relative

408
00:16:51,070 --> 00:16:52,810
percentage of that so once you have that

409
00:16:52,810 --> 00:16:54,790
hard number because this a separate

410
00:16:54,790 --> 00:16:56,680
entity self-reported you simply work

411
00:16:56,680 --> 00:16:58,320
your way backwards to actually

412
00:16:58,320 --> 00:16:59,520
and what that number is and then you

413
00:16:59,520 --> 00:17:01,140
uniformly apply it to all the other

414
00:17:01,140 --> 00:17:02,580
sites for which you have a relative

415
00:17:02,580 --> 00:17:06,300
percentage of course that only gives you

416
00:17:06,300 --> 00:17:08,339
the number of affected views and there

417
00:17:08,339 --> 00:17:11,069
can be significant variability across

418
00:17:11,069 --> 00:17:13,410
sites some sites may have a small number

419
00:17:13,410 --> 00:17:14,790
of views at other sites have a large

420
00:17:14,790 --> 00:17:17,490
number of views fortunately Alexa also

421
00:17:17,490 --> 00:17:20,069
publishes an estimation of how many

422
00:17:20,069 --> 00:17:22,199
views there are per user so you can use

423
00:17:22,199 --> 00:17:24,020
this estimation to get the number of

424
00:17:24,020 --> 00:17:28,380
affected users of course not all users

425
00:17:28,380 --> 00:17:30,450
served malicious content are likely to

426
00:17:30,450 --> 00:17:32,940
be compromised so you have to then

427
00:17:32,940 --> 00:17:35,850
conservatively estimate the subset that

428
00:17:35,850 --> 00:17:37,770
you think actually had malware

429
00:17:37,770 --> 00:17:39,390
successfully installed on their systems

430
00:17:39,390 --> 00:17:42,960
and for that we again turn to both

431
00:17:42,960 --> 00:17:45,390
visitor statistics as well as vendor

432
00:17:45,390 --> 00:17:47,670
studies conducted by for example

433
00:17:47,670 --> 00:17:51,170
security companies and as one example

434
00:17:51,170 --> 00:17:54,990
over fifty percent of users for at least

435
00:17:54,990 --> 00:17:56,070
for the purposes of our study were

436
00:17:56,070 --> 00:17:57,720
immediately disqualified because they

437
00:17:57,720 --> 00:18:00,750
used a platform that was seldom targeted

438
00:18:00,750 --> 00:18:03,810
are relatively exploit resistant and

439
00:18:03,810 --> 00:18:06,000
then even if they have the right

440
00:18:06,000 --> 00:18:07,800
combination even if they even if they

441
00:18:07,800 --> 00:18:09,420
have a platform that is likely to be

442
00:18:09,420 --> 00:18:12,450
targeted they still have to have a

443
00:18:12,450 --> 00:18:14,520
vulnerable software a component that has

444
00:18:14,520 --> 00:18:17,730
a matching in the wild attack and is

445
00:18:17,730 --> 00:18:20,100
vulnerable to that in the wild attack so

446
00:18:20,100 --> 00:18:24,510
if we use Java and I think well what

447
00:18:24,510 --> 00:18:26,790
you'll see later why why Java was used

448
00:18:26,790 --> 00:18:29,070
it's enormously popular obviously as a

449
00:18:29,070 --> 00:18:33,930
target by attackers but according to a

450
00:18:33,930 --> 00:18:35,400
doe Bay who wants to try and show that

451
00:18:35,400 --> 00:18:36,900
flash is really really popular and

452
00:18:36,900 --> 00:18:39,420
presumably that Java is not the java web

453
00:18:39,420 --> 00:18:41,220
plug-in is installed on seventy-three

454
00:18:41,220 --> 00:18:42,960
percent of users systems so that's

455
00:18:42,960 --> 00:18:45,210
probably a low-order estimate and then

456
00:18:45,210 --> 00:18:48,870
according to qualis forty two percent of

457
00:18:48,870 --> 00:18:50,490
people who have the java web plug-in

458
00:18:50,490 --> 00:18:52,200
installed have a version that is

459
00:18:52,200 --> 00:18:55,320
vulnerable to an in the wild attack so

460
00:18:55,320 --> 00:18:57,000
you'll you basically use these sorts of

461
00:18:57,000 --> 00:18:59,100
filters and we ended up coming up with

462
00:18:59,100 --> 00:19:00,900
an estimation that about fifteen point

463
00:19:00,900 --> 00:19:02,610
five percent of people served malicious

464
00:19:02,610 --> 00:19:04,530
content were likely to have been

465
00:19:04,530 --> 00:19:06,360
successfully compromised it's really

466
00:19:06,360 --> 00:19:09,890
hard to actually to to verify the

467
00:19:09,890 --> 00:19:13,620
to verify the integrity of the of the

468
00:19:13,620 --> 00:19:15,630
sub parts of this this manner of this

469
00:19:15,630 --> 00:19:17,820
measurement but what you can do is is

470
00:19:17,820 --> 00:19:20,520
compared it to the overall result you

471
00:19:20,520 --> 00:19:23,690
get in this case there have been times

472
00:19:23,690 --> 00:19:26,070
when the security community will get

473
00:19:26,070 --> 00:19:28,920
visibility into a drive-by download

474
00:19:28,920 --> 00:19:30,720
campaign that's backed by an exploit kit

475
00:19:30,720 --> 00:19:32,820
they'll specifically get a look at the

476
00:19:32,820 --> 00:19:34,710
exploit kit control panel and one of the

477
00:19:34,710 --> 00:19:36,690
statistics that it reports is in fact

478
00:19:36,690 --> 00:19:38,970
the load percentage I what percentage of

479
00:19:38,970 --> 00:19:40,530
users that were served malicious content

480
00:19:40,530 --> 00:19:42,630
by this exploit kit were compromised and

481
00:19:42,630 --> 00:19:48,060
we see and we see variability a little

482
00:19:48,060 --> 00:19:49,890
bit of variability in that but a range

483
00:19:49,890 --> 00:19:51,450
of around twelve to seventeen percent

484
00:19:51,450 --> 00:19:53,970
and our estimation actually fits within

485
00:19:53,970 --> 00:19:58,260
this range so again it's hard to it's

486
00:19:58,260 --> 00:20:01,740
hard to to try and cross validate the

487
00:20:01,740 --> 00:20:04,050
other other bits that we used in this

488
00:20:04,050 --> 00:20:05,550
estimation but the percentage that we

489
00:20:05,550 --> 00:20:08,610
got does fit with inside the range of

490
00:20:08,610 --> 00:20:11,000
what we're actually seeing attackers be

491
00:20:11,000 --> 00:20:17,160
sorry attackers succeed with alright so

492
00:20:17,160 --> 00:20:22,470
with the with the architecture of the

493
00:20:22,470 --> 00:20:24,780
experiment described let's talk about

494
00:20:24,780 --> 00:20:29,130
the results so in February again we

495
00:20:29,130 --> 00:20:31,500
simply took the Alexa top 25,000 domains

496
00:20:31,500 --> 00:20:33,000
each day and fed them into the system

497
00:20:33,000 --> 00:20:34,980
and we found that when visited 58 of the

498
00:20:34,980 --> 00:20:37,980
Alexa top 25,000 resulted in a drive-by

499
00:20:37,980 --> 00:20:40,770
download and that these 58 were not

500
00:20:40,770 --> 00:20:43,470
specific to one day or a handful of days

501
00:20:43,470 --> 00:20:45,630
and that in fact seventy-three percent

502
00:20:45,630 --> 00:20:48,090
of the days in February corresponded to

503
00:20:48,090 --> 00:20:49,830
at least one top-ranked site serving

504
00:20:49,830 --> 00:20:52,350
malicious content and if we employ the

505
00:20:52,350 --> 00:20:54,750
previously described estimations we have

506
00:20:54,750 --> 00:20:57,720
again even though it's just 58 sites

507
00:20:57,720 --> 00:20:59,970
they might say 58 out of 25,000 there's

508
00:20:59,970 --> 00:21:01,620
there's there's no problem while these

509
00:21:01,620 --> 00:21:03,030
are the most popular sites in the world

510
00:21:03,030 --> 00:21:04,710
and as a consequence their impact is

511
00:21:04,710 --> 00:21:06,750
going to be significant from these 58

512
00:21:06,750 --> 00:21:08,520
sites we estimate that about 10 and a

513
00:21:08,520 --> 00:21:09,660
half million people were served

514
00:21:09,660 --> 00:21:11,040
malicious content and again a small

515
00:21:11,040 --> 00:21:13,740
subset of that about 1.6 million were

516
00:21:13,740 --> 00:21:16,990
likely successfully compromised

517
00:21:16,990 --> 00:21:20,480
here's a calendar that provides a a day

518
00:21:20,480 --> 00:21:22,670
wise breakdown of drive-by downloads per

519
00:21:22,670 --> 00:21:24,770
day in February and you see that some

520
00:21:24,770 --> 00:21:26,870
days are in fact higher than others I'm

521
00:21:26,870 --> 00:21:28,580
sure they're there they're potential

522
00:21:28,580 --> 00:21:30,620
social reasons or other technical

523
00:21:30,620 --> 00:21:32,690
reasons we definitely witness some some

524
00:21:32,690 --> 00:21:34,340
common malicious infrastructure being

525
00:21:34,340 --> 00:21:36,470
used across several sites common

526
00:21:36,470 --> 00:21:38,660
malicious traffic distribution system or

527
00:21:38,660 --> 00:21:41,330
common exploit kit and but but

528
00:21:41,330 --> 00:21:42,860
definitely more work in this area's is

529
00:21:42,860 --> 00:21:49,430
needed in terms of the age we found that

530
00:21:49,430 --> 00:21:50,780
over ninety eight percent of the sites

531
00:21:50,780 --> 00:21:53,150
were at least a year old and there are a

532
00:21:53,150 --> 00:21:54,950
couple of different viewpoints on on how

533
00:21:54,950 --> 00:21:56,930
that ties into the fact they were used

534
00:21:56,930 --> 00:21:58,700
to distribute are to serve drive-by

535
00:21:58,700 --> 00:22:03,620
downloads but I like the like the idea

536
00:22:03,620 --> 00:22:06,440
that even even popular sites that

537
00:22:06,440 --> 00:22:08,270
presumably have good resources and

538
00:22:08,270 --> 00:22:10,640
hopefully amateur security operations

539
00:22:10,640 --> 00:22:13,070
process can still have issues with with

540
00:22:13,070 --> 00:22:15,830
security that this isn't something that

541
00:22:15,830 --> 00:22:19,060
that can be uniformly and completely

542
00:22:19,060 --> 00:22:24,110
eliminated in terms of screenshots and

543
00:22:24,110 --> 00:22:25,550
one thing I haven't mentioned until now

544
00:22:25,550 --> 00:22:27,380
is that we actually we actually take a

545
00:22:27,380 --> 00:22:29,480
screenshot of the vm at regular

546
00:22:29,480 --> 00:22:31,100
intervals during the force visit so that

547
00:22:31,100 --> 00:22:32,390
we can see what the victim would have

548
00:22:32,390 --> 00:22:33,890
seen when their system was compromised

549
00:22:33,890 --> 00:22:36,560
and I basically chosen one example from

550
00:22:36,560 --> 00:22:38,270
from each of the two months they'll

551
00:22:38,270 --> 00:22:40,730
describe the 14 februari is a drive-by

552
00:22:40,730 --> 00:22:43,190
download served by PHP classes org and

553
00:22:43,190 --> 00:22:45,710
in the the lower left-hand corner you

554
00:22:45,710 --> 00:22:47,060
see what you would expect to see which

555
00:22:47,060 --> 00:22:50,750
is the PHP classes dorg website by the

556
00:22:50,750 --> 00:22:53,600
second screenshot interestingly enough

557
00:22:53,600 --> 00:22:55,670
the browser is gone and an executable

558
00:22:55,670 --> 00:22:59,110
has been placed on the users desktop and

559
00:22:59,110 --> 00:23:01,630
we can certainly talk about this maybe

560
00:23:01,630 --> 00:23:05,000
after afterwards but the icon of that

561
00:23:05,000 --> 00:23:06,920
executable is actually a picture of

562
00:23:06,920 --> 00:23:09,950
donnchadh on chev so perhaps it is an

563
00:23:09,950 --> 00:23:13,330
attempt to info mais him

564
00:23:13,640 --> 00:23:18,600
fourme when visited 39 the Alexa top 25

565
00:23:18,600 --> 00:23:20,520
thousand resulted in a drive-by download

566
00:23:20,520 --> 00:23:23,610
and in terms of the number of days where

567
00:23:23,610 --> 00:23:25,200
at least one domain served malicious

568
00:23:25,200 --> 00:23:28,620
content and the the number of affected

569
00:23:28,620 --> 00:23:30,270
and successfully compromised users they

570
00:23:30,270 --> 00:23:33,470
all look pretty similar to two februari

571
00:23:33,470 --> 00:23:36,660
but in addition 44 may we added

572
00:23:36,660 --> 00:23:38,460
functionality to try and determine for

573
00:23:38,460 --> 00:23:42,210
how long a site would be for how long a

574
00:23:42,210 --> 00:23:44,160
given compromised site would serve

575
00:23:44,160 --> 00:23:46,340
malicious content and what we found

576
00:23:46,340 --> 00:23:49,740
perhaps perhaps intuitively is that most

577
00:23:49,740 --> 00:23:51,510
sites are compromised for a single day

578
00:23:51,510 --> 00:23:53,010
probably because a portion of their

579
00:23:53,010 --> 00:23:55,380
users will will complain to that siteman

580
00:23:55,380 --> 00:23:57,660
stopper aters but others for example

581
00:23:57,660 --> 00:24:00,090
Harold mcom which corresponds to the

582
00:24:00,090 --> 00:24:02,060
Korea Herald it's an extremely popular

583
00:24:02,060 --> 00:24:06,450
news website in in South Korea was

584
00:24:06,450 --> 00:24:08,610
compromised I think eight out of 14 day

585
00:24:08,610 --> 00:24:11,460
period so that's that's unfortunate in

586
00:24:11,460 --> 00:24:13,680
all cases the average period of

587
00:24:13,680 --> 00:24:16,530
compromise was just over 36 hours as

588
00:24:16,530 --> 00:24:21,200
measured in terms of screenshots for may

589
00:24:21,200 --> 00:24:23,850
then this example was was sort of

590
00:24:23,850 --> 00:24:26,610
selected for its it's a lack of visual

591
00:24:26,610 --> 00:24:28,080
interestingness because this is

592
00:24:28,080 --> 00:24:29,670
typically what a drive-by download looks

593
00:24:29,670 --> 00:24:31,980
like you have in this case the site

594
00:24:31,980 --> 00:24:33,890
being picha haste calm that safe

595
00:24:33,890 --> 00:24:38,310
football as in soccer rumor website and

596
00:24:38,310 --> 00:24:41,250
in the first screenshot you see feature

597
00:24:41,250 --> 00:24:43,350
haste calm and in the second screenshot

598
00:24:43,350 --> 00:24:46,560
you see picha haste calm and that's it

599
00:24:46,560 --> 00:24:47,790
that's all you're going to see the only

600
00:24:47,790 --> 00:24:49,260
indication you have that something might

601
00:24:49,260 --> 00:24:51,540
be wrong as the fact the Java icon has

602
00:24:51,540 --> 00:24:54,360
popped up in the tray and in this case

603
00:24:54,360 --> 00:24:57,810
the Malheur actually served rendevouz

604
00:24:57,810 --> 00:25:00,480
with its command and control exclusively

605
00:25:00,480 --> 00:25:04,380
via dns and actually uses txt records

606
00:25:04,380 --> 00:25:07,320
with base64 encoded arguments so I mean

607
00:25:07,320 --> 00:25:09,690
that's this this is the type of stealth

608
00:25:09,690 --> 00:25:12,480
I would assume most exploit kit are at

609
00:25:12,480 --> 00:25:14,490
most drive-by download campaign

610
00:25:14,490 --> 00:25:18,620
operators are going to to strive for

611
00:25:18,690 --> 00:25:21,640
so for May we performed additional

612
00:25:21,640 --> 00:25:24,100
analysis of the drive-by downloads to

613
00:25:24,100 --> 00:25:26,830
try and validate some some intuitions

614
00:25:26,830 --> 00:25:28,659
that we had and one of them was that in

615
00:25:28,659 --> 00:25:30,940
the majority of cases the badness for

616
00:25:30,940 --> 00:25:32,169
these top rank sites it's going to come

617
00:25:32,169 --> 00:25:33,429
through their ad networks because the

618
00:25:33,429 --> 00:25:34,809
site's themselves should be relatively

619
00:25:34,809 --> 00:25:38,169
resistant to to intrusion but what we

620
00:25:38,169 --> 00:25:40,570
found was actually the opposite we found

621
00:25:40,570 --> 00:25:42,610
that only forty six point one percent of

622
00:25:42,610 --> 00:25:45,490
drive-by downloads from a arrived via

623
00:25:45,490 --> 00:25:47,520
the use of ad networks which means that

624
00:25:47,520 --> 00:25:51,820
more than the remaining half were the

625
00:25:51,820 --> 00:25:53,380
result of some type of direct website

626
00:25:53,380 --> 00:25:56,880
compromise and that's again unfortunate

627
00:25:56,880 --> 00:25:59,230
the second intuition that we had was

628
00:25:59,230 --> 00:26:01,630
that Java is going to be involved in an

629
00:26:01,630 --> 00:26:03,400
overwhelming majority of drive-by

630
00:26:03,400 --> 00:26:05,289
download attacks and again an exploit

631
00:26:05,289 --> 00:26:07,419
kits going to interrogate the web

632
00:26:07,419 --> 00:26:08,860
browser and its plugins and serve a

633
00:26:08,860 --> 00:26:10,900
cocktail of exploits that it believes

634
00:26:10,900 --> 00:26:13,150
are most likely to result in successful

635
00:26:13,150 --> 00:26:15,760
system compromise but what we found was

636
00:26:15,760 --> 00:26:17,590
that in eighty-seven percent of the

637
00:26:17,590 --> 00:26:19,419
cases at least one of those exploits was

638
00:26:19,419 --> 00:26:22,320
in fact for the java web plug-in and

639
00:26:22,320 --> 00:26:25,890
again it it speaks to the attackers

640
00:26:25,890 --> 00:26:28,419
preference of of java or perhaps to the

641
00:26:28,419 --> 00:26:31,890
java web plugins security track record

642
00:26:31,890 --> 00:26:36,450
so in conclusion most people assume that

643
00:26:36,450 --> 00:26:39,100
probably not those in this room but most

644
00:26:39,100 --> 00:26:40,870
people assume that it is safe to visit

645
00:26:40,870 --> 00:26:43,830
popular longed web long-lived websites

646
00:26:43,830 --> 00:26:46,750
and to systematically evaluate this

647
00:26:46,750 --> 00:26:51,130
intuition we we we performed several

648
00:26:51,130 --> 00:26:53,770
month-long studies and the results of

649
00:26:53,770 --> 00:26:55,659
those studies again perhaps not

650
00:26:55,659 --> 00:26:58,659
surprisingly to some indicate that even

651
00:26:58,659 --> 00:27:01,659
the mainstream popular web is not a safe

652
00:27:01,659 --> 00:27:07,929
place so subsequent to this research we

653
00:27:07,929 --> 00:27:09,460
created sort of a permanent version of

654
00:27:09,460 --> 00:27:11,950
the URL analysis system and at some

655
00:27:11,950 --> 00:27:15,370
point we got the okay to create a public

656
00:27:15,370 --> 00:27:17,500
web front-end for it and we call it

657
00:27:17,500 --> 00:27:21,669
threat class and in contrast to some

658
00:27:21,669 --> 00:27:25,030
other sites that may have technical are

659
00:27:25,030 --> 00:27:27,250
technically dense information we tried

660
00:27:27,250 --> 00:27:30,360
to make this site accessible to both

661
00:27:30,360 --> 00:27:32,820
casual users casual and users as well as

662
00:27:32,820 --> 00:27:35,550
as as professional members of the

663
00:27:35,550 --> 00:27:37,860
information information security

664
00:27:37,860 --> 00:27:41,130
research community threat glass provides

665
00:27:41,130 --> 00:27:43,050
virtual machine screenshots vm

666
00:27:43,050 --> 00:27:45,090
screenshots as well as different types

667
00:27:45,090 --> 00:27:48,630
of visualizations of the network

668
00:27:48,630 --> 00:27:50,370
activity that occurred via the drive-by

669
00:27:50,370 --> 00:27:52,230
downloaded in fact you can actually

670
00:27:52,230 --> 00:27:55,170
visually explore the data related to the

671
00:27:55,170 --> 00:27:57,150
event of course if you're like me you're

672
00:27:57,150 --> 00:27:58,410
probably just going to click on the link

673
00:27:58,410 --> 00:27:59,880
that provides you with a full packet

674
00:27:59,880 --> 00:28:03,870
capture in all cases to try and

675
00:28:03,870 --> 00:28:09,900
encourage people to to participate in in

676
00:28:09,900 --> 00:28:13,140
this effort of identifying threats we've

677
00:28:13,140 --> 00:28:15,090
created a comment system where for

678
00:28:15,090 --> 00:28:16,440
example people can annotate the type of

679
00:28:16,440 --> 00:28:18,120
exploit kit that was used a type of

680
00:28:18,120 --> 00:28:20,570
malware that was dropped as well as

681
00:28:20,570 --> 00:28:23,940
support for submitting websites to be

682
00:28:23,940 --> 00:28:25,950
inspected by the corresponding analysis

683
00:28:25,950 --> 00:28:28,650
system and if a site you submit is found

684
00:28:28,650 --> 00:28:31,050
to be malicious it will in turn appear

685
00:28:31,050 --> 00:28:35,430
on the threat class website so you can

686
00:28:35,430 --> 00:28:39,750
get again you can get to the all the

687
00:28:39,750 --> 00:28:42,870
source data as well as more structured

688
00:28:42,870 --> 00:28:45,150
high level representations of the

689
00:28:45,150 --> 00:28:46,380
drive-by downloads for the two

690
00:28:46,380 --> 00:28:47,940
month-long studies as well as everything

691
00:28:47,940 --> 00:28:49,140
else we've found since we started

692
00:28:49,140 --> 00:28:52,670
running the system at threat glass calm

693
00:28:52,670 --> 00:28:56,750
which again is free to use

