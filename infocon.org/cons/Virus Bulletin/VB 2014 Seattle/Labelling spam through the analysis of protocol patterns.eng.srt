1
00:00:00,000 --> 00:00:01,890
alrighty ladies and gentlemen we're

2
00:00:01,890 --> 00:00:04,830
ready to continue here in red room next

3
00:00:04,830 --> 00:00:07,410
up we have another talk from big

4
00:00:07,410 --> 00:00:09,540
defender this time Alex treefon talking

5
00:00:09,540 --> 00:00:15,809
about spam Alex thank you good afternoon

6
00:00:15,809 --> 00:00:18,510
my name is Alex and together with my

7
00:00:18,510 --> 00:00:21,689
colleague Andre and with the aid of the

8
00:00:21,689 --> 00:00:24,720
team back home we in the last a couple

9
00:00:24,720 --> 00:00:27,000
of months we have undergone an

10
00:00:27,000 --> 00:00:29,849
experiment about labeling spam through

11
00:00:29,849 --> 00:00:31,560
the analysis of connection protocol

12
00:00:31,560 --> 00:00:34,680
patterns now this may sound a bit

13
00:00:34,680 --> 00:00:37,230
critical but as I walk it through it'll

14
00:00:37,230 --> 00:00:41,219
become clearer and clearer let me draw

15
00:00:41,219 --> 00:00:42,750
an outline about what I'm going to talk

16
00:00:42,750 --> 00:00:45,750
to you about I'm gonna deliver a quick

17
00:00:45,750 --> 00:00:48,840
introduction about tcp/ip and some

18
00:00:48,840 --> 00:00:51,300
parameters which are really important in

19
00:00:51,300 --> 00:00:54,090
this experiment I'm going to talk to you

20
00:00:54,090 --> 00:01:01,489
about how this experiment started and

21
00:01:01,489 --> 00:01:05,129
about the experiment setup then about

22
00:01:05,129 --> 00:01:07,890
the things we discovered basically the

23
00:01:07,890 --> 00:01:10,710
protocol patterns and I'm going to talk

24
00:01:10,710 --> 00:01:12,060
to you about the most important ones

25
00:01:12,060 --> 00:01:15,869
which we found of course about the

26
00:01:15,869 --> 00:01:17,700
drawbacks and pitfalls which we

27
00:01:17,700 --> 00:01:19,920
encountered which which kind of

28
00:01:19,920 --> 00:01:22,380
influence the results as you will see

29
00:01:22,380 --> 00:01:25,259
and of course a bit of a conclusion a

30
00:01:25,259 --> 00:01:28,799
future work and how how this experiment

31
00:01:28,799 --> 00:01:35,220
may help the industry now as as you read

32
00:01:35,220 --> 00:01:37,170
the title of the presentation it all

33
00:01:37,170 --> 00:01:40,350
comes into your mind the next question

34
00:01:40,350 --> 00:01:42,960
in how many ways can you actually send

35
00:01:42,960 --> 00:01:46,649
an email message of course all smt mr.

36
00:01:46,649 --> 00:01:48,600
cendars respect the same more principle

37
00:01:48,600 --> 00:01:51,630
or more or less strictly but they all

38
00:01:51,630 --> 00:01:54,299
behave differently well the difference

39
00:01:54,299 --> 00:01:56,670
is actually show up the connection level

40
00:01:56,670 --> 00:02:00,180
and as you're about to see the tcp/ip

41
00:02:00,180 --> 00:02:02,460
transmission can say a lot about the

42
00:02:02,460 --> 00:02:05,759
sender if you know where to look now I'm

43
00:02:05,759 --> 00:02:07,380
going to talk to you about a little bit

44
00:02:07,380 --> 00:02:10,800
about the tcp/ip protocol of course you

45
00:02:10,800 --> 00:02:11,660
all know that

46
00:02:11,660 --> 00:02:14,060
the tcp/ip protocol is the foundation of

47
00:02:14,060 --> 00:02:16,540
reliable ordered and error checked

48
00:02:16,540 --> 00:02:20,150
delivery of data over networks now what

49
00:02:20,150 --> 00:02:22,610
you might not know is that the tcp/ip

50
00:02:22,610 --> 00:02:25,910
protocol is one of the most popular

51
00:02:25,910 --> 00:02:29,360
cases of the RAS syndrome you guys know

52
00:02:29,360 --> 00:02:33,080
what the RAS syndrome is no anyone you

53
00:02:33,080 --> 00:02:37,340
know of course the RS syndrome is the

54
00:02:37,340 --> 00:02:41,450
redundant acronym syndrome syndrome most

55
00:02:41,450 --> 00:02:44,840
notable cases of this our ATM machine

56
00:02:44,840 --> 00:02:48,130
LCD display and pin number so please

57
00:02:48,130 --> 00:02:50,180
henceforth please correct me if I ever

58
00:02:50,180 --> 00:02:52,730
say tcp/ip protocol or if you hear

59
00:02:52,730 --> 00:02:54,830
anyone saying tcp/ip protocol grammar

60
00:02:54,830 --> 00:02:59,240
nazi thank you okay in a nutshell very

61
00:02:59,240 --> 00:03:01,970
small nutshell how tcp/ip works is the

62
00:03:01,970 --> 00:03:03,830
application sends a chunk big chunk of

63
00:03:03,830 --> 00:03:07,700
data the tck the TCP layer is

64
00:03:07,700 --> 00:03:10,700
responsible for breaking it into small

65
00:03:10,700 --> 00:03:14,390
chunks of data and personalizing them

66
00:03:14,390 --> 00:03:18,290
with a beautiful I think I'm not sure

67
00:03:18,290 --> 00:03:19,880
about the colors i'm very colorblind

68
00:03:19,880 --> 00:03:23,959
sorry with TCP headers each of these

69
00:03:23,959 --> 00:03:27,200
becoming a TCP segment and of course

70
00:03:27,200 --> 00:03:29,450
bypassing each of them to the IP layer

71
00:03:29,450 --> 00:03:33,500
which in turn adds its own beautifully

72
00:03:33,500 --> 00:03:36,620
colored IP header creating an IP

73
00:03:36,620 --> 00:03:39,350
Datagram I'm sorry if any of you guys

74
00:03:39,350 --> 00:03:41,420
are called Bryant I'm too so it's ok

75
00:03:41,420 --> 00:03:47,570
good ok looking at a single chunk of

76
00:03:47,570 --> 00:03:53,690
data there is a very important parameter

77
00:03:53,690 --> 00:03:57,980
relevant to our experiment which is the

78
00:03:57,980 --> 00:04:01,520
maximum segment size now this maximum

79
00:04:01,520 --> 00:04:03,230
segment size has to be carefully chosen

80
00:04:03,230 --> 00:04:07,640
because if it is too small you can

81
00:04:07,640 --> 00:04:10,370
create overhead there's no point if in

82
00:04:10,370 --> 00:04:12,500
sending small chunks of data if you can

83
00:04:12,500 --> 00:04:14,959
send bigger ones if the network supports

84
00:04:14,959 --> 00:04:17,988
it now if it's too large and the network

85
00:04:17,988 --> 00:04:20,690
does not support it the IP layer will

86
00:04:20,690 --> 00:04:22,729
generate fragmentation and this is not

87
00:04:22,729 --> 00:04:23,510
the desired

88
00:04:23,510 --> 00:04:28,130
thing now of course I forgot to mention

89
00:04:28,130 --> 00:04:30,830
what the maximum segment size is the

90
00:04:30,830 --> 00:04:33,080
maximum segment size is really refer to

91
00:04:33,080 --> 00:04:35,870
as MSS is the largest amount of payload

92
00:04:35,870 --> 00:04:39,140
data specified in bytes that TCP is

93
00:04:39,140 --> 00:04:43,030
willing to receive in a single segment

94
00:04:43,210 --> 00:04:45,890
although it is specified at connection

95
00:04:45,890 --> 00:04:48,380
time and it's establish that connection

96
00:04:48,380 --> 00:04:50,900
time the maximum segment size can be

97
00:04:50,900 --> 00:04:55,010
adjusted dynamically due to network

98
00:04:55,010 --> 00:04:56,750
conditions if the network conditions

99
00:04:56,750 --> 00:04:59,720
allow it it will get bigger and if the

100
00:04:59,720 --> 00:05:01,760
network conditions are poor it will get

101
00:05:01,760 --> 00:05:05,530
smaller as to accommodate the two

102
00:05:05,530 --> 00:05:09,160
impediments overhead an IP fragmentation

103
00:05:09,160 --> 00:05:13,940
okay moving on I want to talk to you a

104
00:05:13,940 --> 00:05:16,040
little bit about how this experiment

105
00:05:16,040 --> 00:05:20,720
came to life and to cut it short it came

106
00:05:20,720 --> 00:05:25,040
to life by mistake we were fine tuning

107
00:05:25,040 --> 00:05:28,370
debugging our smtp servers which is

108
00:05:28,370 --> 00:05:30,380
written in nodejs and we started

109
00:05:30,380 --> 00:05:35,900
selectively logging some tcp segments in

110
00:05:35,900 --> 00:05:40,100
order to improve something and well we

111
00:05:40,100 --> 00:05:41,900
went through the four stages of

112
00:05:41,900 --> 00:05:44,180
discovery as I like as I like to point

113
00:05:44,180 --> 00:05:48,200
them out so of course the first stage of

114
00:05:48,200 --> 00:05:54,890
discover is hmm wait what we simply got

115
00:05:54,890 --> 00:05:57,440
a lucky grip through like gigabytes of

116
00:05:57,440 --> 00:05:59,810
logs and we discovered by mistake a

117
00:05:59,810 --> 00:06:01,910
pattern which I will talk to you about

118
00:06:01,910 --> 00:06:07,390
in a couple of minutes and we were mmm

119
00:06:07,390 --> 00:06:12,440
the next stage of discovery here we kind

120
00:06:12,440 --> 00:06:14,390
of noticed that and started looking for

121
00:06:14,390 --> 00:06:16,970
it and of course we noticed a recurring

122
00:06:16,970 --> 00:06:18,980
pattern we figured out hey this

123
00:06:18,980 --> 00:06:20,810
connection pattern may be connected

124
00:06:20,810 --> 00:06:23,150
somehow with the spam bot for example

125
00:06:23,150 --> 00:06:26,630
and in through the way spambots sent

126
00:06:26,630 --> 00:06:29,600
messages and of course the next stage of

127
00:06:29,600 --> 00:06:33,590
discovery was whoa okay

128
00:06:33,590 --> 00:06:37,780
we started inferring similar patterns by

129
00:06:37,780 --> 00:06:41,120
we we know a lot of about how spam is

130
00:06:41,120 --> 00:06:43,670
sent by BOTS we know about templates

131
00:06:43,670 --> 00:06:46,100
they use and the whole lot of that and

132
00:06:46,100 --> 00:06:50,180
we kind of started inferring those those

133
00:06:50,180 --> 00:06:51,890
templates and we started looking for

134
00:06:51,890 --> 00:06:55,070
them and we kind of got a confirmation

135
00:06:55,070 --> 00:06:57,500
about most of them through a thro

136
00:06:57,500 --> 00:06:59,210
through searching through our data and

137
00:06:59,210 --> 00:07:00,860
of course the last stage of the

138
00:07:00,860 --> 00:07:03,440
discovery of course publish a paper to

139
00:07:03,440 --> 00:07:15,200
vb 2014 cool okay sorry second let's

140
00:07:15,200 --> 00:07:17,750
talk a bit about the setup of our

141
00:07:17,750 --> 00:07:19,520
experiment now there was there were

142
00:07:19,520 --> 00:07:21,530
actually two stages of the experiment

143
00:07:21,530 --> 00:07:24,800
one was the purpose of the first stage

144
00:07:24,800 --> 00:07:27,040
it was to better understand how tcp/ip

145
00:07:27,040 --> 00:07:32,440
and MSS work and for that we created a

146
00:07:32,440 --> 00:07:35,630
tcp/ip server located in the east coast

147
00:07:35,630 --> 00:07:37,880
in the US and the client we were thought

148
00:07:37,880 --> 00:07:40,310
was hosted back home at bitdefender HQ

149
00:07:40,310 --> 00:07:44,720
in Romania and for the actual experiment

150
00:07:44,720 --> 00:07:48,940
we in order to analyze and extract

151
00:07:48,940 --> 00:07:53,150
protocol patterns we created a better

152
00:07:53,150 --> 00:07:57,950
node.js smtp server and we pointed the

153
00:07:57,950 --> 00:08:01,640
spam trap domain store late and we let

154
00:08:01,640 --> 00:08:04,490
the spam flow now about the first stage

155
00:08:04,490 --> 00:08:07,390
of the experiment let's look at how TCP

156
00:08:07,390 --> 00:08:10,850
behaves under certain conditions the

157
00:08:10,850 --> 00:08:12,230
first experiment is a pretty

158
00:08:12,230 --> 00:08:15,650
straightforward the client wants to

159
00:08:15,650 --> 00:08:18,980
write a five kilobyte buffer to the

160
00:08:18,980 --> 00:08:23,150
server now how this scenario we repeat

161
00:08:23,150 --> 00:08:25,010
that well delimited intervals so that

162
00:08:25,010 --> 00:08:28,340
the writings do not overlap and what we

163
00:08:28,340 --> 00:08:33,500
discovered is the the packages with the

164
00:08:33,500 --> 00:08:36,470
the data will was split into segments

165
00:08:36,470 --> 00:08:41,950
sort of like this if you can see those

166
00:08:41,950 --> 00:08:46,940
rectangles represent actual segments and

167
00:08:46,940 --> 00:08:50,510
those are with the size of 1440 which is

168
00:08:50,510 --> 00:08:54,620
a pretty common MSS for decent internet

169
00:08:54,620 --> 00:08:57,740
connection ok there was there were three

170
00:08:57,740 --> 00:09:00,470
of packages of full size and the

171
00:09:00,470 --> 00:09:04,250
remainder of 800 sometimes when TCP got

172
00:09:04,250 --> 00:09:06,860
courageous due to network connect

173
00:09:06,860 --> 00:09:10,250
connection which was good raised the MSS

174
00:09:10,250 --> 00:09:14,750
to a multiple of 1440 and maybe

175
00:09:14,750 --> 00:09:19,240
sometimes it drove back to the base MSS

176
00:09:19,240 --> 00:09:23,050
sometimes it started low but it went

177
00:09:23,050 --> 00:09:25,850
went courageous at the end ok what is

178
00:09:25,850 --> 00:09:30,170
important is like the segments all

179
00:09:30,170 --> 00:09:33,680
feature sizes which are multiple of the

180
00:09:33,680 --> 00:09:37,610
base MSS ok now on to experiment number

181
00:09:37,610 --> 00:09:41,300
two which features two sequential writes

182
00:09:41,300 --> 00:09:44,600
no time between them and the scenario is

183
00:09:44,600 --> 00:09:46,220
obviously repeated at well delimited

184
00:09:46,220 --> 00:09:47,930
intervals so that the writings do not

185
00:09:47,930 --> 00:09:50,570
the right to calls not overlap and we

186
00:09:50,570 --> 00:09:55,250
noticed two patterns of sending the

187
00:09:55,250 --> 00:10:01,160
first one is clear delimitation in in in

188
00:10:01,160 --> 00:10:04,700
the two made by DCP between two the two

189
00:10:04,700 --> 00:10:07,700
writings the first three blocks

190
00:10:07,700 --> 00:10:09,800
represent the first 5k and the other

191
00:10:09,800 --> 00:10:12,590
four blocks represent the next 5k this

192
00:10:12,590 --> 00:10:14,480
occurred with the probability of thirty

193
00:10:14,480 --> 00:10:18,490
percent and the next pattern is

194
00:10:18,490 --> 00:10:22,280
obviously TCP decided to cash the two

195
00:10:22,280 --> 00:10:25,850
rides and merge them all together and of

196
00:10:25,850 --> 00:10:30,050
course choose whatever MSS they they

197
00:10:30,050 --> 00:10:32,750
wish for for the transmission depending

198
00:10:32,750 --> 00:10:36,580
on the network conditions now the next

199
00:10:36,580 --> 00:10:39,910
experiment is pretty similar to

200
00:10:39,910 --> 00:10:41,840
experiment number two

201
00:10:41,840 --> 00:10:44,900
but there's a there's a twist between

202
00:10:44,900 --> 00:10:47,990
the two right there is a hundred

203
00:10:47,990 --> 00:10:52,430
millisecond time out now in this case

204
00:10:52,430 --> 00:10:55,760
all of the patterns are definitely

205
00:10:55,760 --> 00:10:59,420
delimited so TCP sends clearly two

206
00:10:59,420 --> 00:11:03,100
sequences there is no caching between

207
00:11:03,100 --> 00:11:05,720
between these two rights this is a very

208
00:11:05,720 --> 00:11:09,020
important observation because as we will

209
00:11:09,020 --> 00:11:13,790
cover come and see it will say about a

210
00:11:13,790 --> 00:11:20,570
lot about how the bots send spam okay oh

211
00:11:20,570 --> 00:11:24,320
now let's get to the core of it let's

212
00:11:24,320 --> 00:11:27,410
describe a bit let's describe summarize

213
00:11:27,410 --> 00:11:30,380
ntp patterns we kind of grouped them

214
00:11:30,380 --> 00:11:34,640
into more categories first category was

215
00:11:34,640 --> 00:11:37,040
obviously official MTS like post fix

216
00:11:37,040 --> 00:11:41,630
whatever human error stuff the next

217
00:11:41,630 --> 00:11:45,320
category was smtp relay servers which is

218
00:11:45,320 --> 00:11:47,420
pretty similar to the first one but is

219
00:11:47,420 --> 00:11:53,810
it has a twist and clients which adjust

220
00:11:53,810 --> 00:11:56,240
the message on the fly basically here

221
00:11:56,240 --> 00:11:58,880
included the bots and so on and of

222
00:11:58,880 --> 00:12:00,560
course other interesting types which I

223
00:12:00,560 --> 00:12:05,390
will talk to you about ok on to official

224
00:12:05,390 --> 00:12:11,450
MTA's now persistence is one of the

225
00:12:11,450 --> 00:12:16,250
primary objective when designing email

226
00:12:16,250 --> 00:12:20,240
server amongst tenia of many other many

227
00:12:20,240 --> 00:12:23,350
other objectives now persistence leads

228
00:12:23,350 --> 00:12:26,000
so the software to write often write

229
00:12:26,000 --> 00:12:28,910
emails to the disk before send actually

230
00:12:28,910 --> 00:12:32,840
sending them and of course one of the

231
00:12:32,840 --> 00:12:37,220
other objectives is to prepare the the

232
00:12:37,220 --> 00:12:40,100
server for congested environments you

233
00:12:40,100 --> 00:12:42,560
know in peak traffic you have to undo a

234
00:12:42,560 --> 00:12:45,290
lot of messages so basically as a result

235
00:12:45,290 --> 00:12:48,350
of that to keep resources under control

236
00:12:48,350 --> 00:12:50,570
users consumption under control you have

237
00:12:50,570 --> 00:12:53,690
to minimize this calls for example and

238
00:12:53,690 --> 00:12:56,680
this is this is a thing we inferred and

239
00:12:56,680 --> 00:13:01,430
we tested and we decided that the result

240
00:13:01,430 --> 00:13:06,740
was that lots of official MTA's transmit

241
00:13:06,740 --> 00:13:11,750
messages in a single right call similar

242
00:13:11,750 --> 00:13:14,420
to TCP behavior number one we talked

243
00:13:14,420 --> 00:13:17,090
about in a single right call leaving the

244
00:13:17,090 --> 00:13:19,940
layers the below layers to perform the

245
00:13:19,940 --> 00:13:22,400
splitting of data in the manner which

246
00:13:22,400 --> 00:13:27,230
they find suitable the pattern shows

247
00:13:27,230 --> 00:13:33,650
like this for an official MTA you're

248
00:13:33,650 --> 00:13:35,450
going to see a lot of those basically on

249
00:13:35,450 --> 00:13:37,100
the Left column you're going to see some

250
00:13:37,100 --> 00:13:39,370
rectangles which represent the child a

251
00:13:39,370 --> 00:13:42,950
packet the package and the package size

252
00:13:42,950 --> 00:13:44,930
and to the right sometimes it's

253
00:13:44,930 --> 00:13:48,350
important the contents of the package so

254
00:13:48,350 --> 00:13:51,530
basically for an official MTA it looks

255
00:13:51,530 --> 00:13:55,580
like this it's pretty straightforward as

256
00:13:55,580 --> 00:13:59,930
we it's pretty smooth up until the end

257
00:13:59,930 --> 00:14:03,250
so you can see that but the pattern is

258
00:14:03,250 --> 00:14:06,500
this the packages I've sizes multiples

259
00:14:06,500 --> 00:14:12,170
of the base MSS so yeah we infer that

260
00:14:12,170 --> 00:14:17,960
the MTA's use a single right call to to

261
00:14:17,960 --> 00:14:22,820
output the data to the socket now smtp

262
00:14:22,820 --> 00:14:25,030
servers as i said are pretty similar to

263
00:14:25,030 --> 00:14:29,720
official mtas but they have a twist if i

264
00:14:29,720 --> 00:14:35,000
am not having to configure the smtp

265
00:14:35,000 --> 00:14:36,950
relay server but i think most of them

266
00:14:36,950 --> 00:14:41,300
what actually do in snow in addition is

267
00:14:41,300 --> 00:14:44,150
to add or receive header at the top of

268
00:14:44,150 --> 00:14:46,880
the message so basically we notice that

269
00:14:46,880 --> 00:14:49,460
and we kind of noticed that the received

270
00:14:49,460 --> 00:14:54,560
header is in its own right call so the

271
00:14:54,560 --> 00:14:56,930
pattern will look like this the first

272
00:14:56,930 --> 00:14:59,720
chunk of data is 77 bites it really

273
00:14:59,720 --> 00:15:02,120
represents strictly the received header

274
00:15:02,120 --> 00:15:06,380
and then moving on is like a standard

275
00:15:06,380 --> 00:15:06,990
and

276
00:15:06,990 --> 00:15:13,589
GA ending with a remainder now on to the

277
00:15:13,589 --> 00:15:22,220
cool stuff because the servers are sorry

278
00:15:22,220 --> 00:15:29,779
the next category is spambots now we

279
00:15:29,779 --> 00:15:32,640
noticed some patterns which were pretty

280
00:15:32,640 --> 00:15:35,970
obviously indicating that the message

281
00:15:35,970 --> 00:15:40,670
word was generated from a template well

282
00:15:40,670 --> 00:15:43,230
basically that's what spambots do they

283
00:15:43,230 --> 00:15:47,550
adjust the messages on the fly and the

284
00:15:47,550 --> 00:15:49,380
correlation in our head was pretty

285
00:15:49,380 --> 00:15:54,300
straight forward and we kind of got to

286
00:15:54,300 --> 00:15:58,020
this okay the first example of spambots

287
00:15:58,020 --> 00:16:02,820
pattern we noticed was with the headers

288
00:16:02,820 --> 00:16:06,560
in a distinct TCP IP tcp sequence

289
00:16:06,560 --> 00:16:09,270
basically indicating that the headers

290
00:16:09,270 --> 00:16:12,360
were probably forged and then after the

291
00:16:12,360 --> 00:16:15,870
first right call sending the headers the

292
00:16:15,870 --> 00:16:19,290
rest of the contents worse was said the

293
00:16:19,290 --> 00:16:23,910
the pattern looks like this as you can

294
00:16:23,910 --> 00:16:26,070
see the first chunk contains only the

295
00:16:26,070 --> 00:16:29,459
received and no not only the received

296
00:16:29,459 --> 00:16:34,670
all the only the headers and moving on

297
00:16:34,670 --> 00:16:38,220
the rest of the message interestingly

298
00:16:38,220 --> 00:16:43,680
enough a lot of bots seem to send this

299
00:16:43,680 --> 00:16:46,410
protocol ending sequence as you can see

300
00:16:46,410 --> 00:16:48,870
it the last to the frame sends send it

301
00:16:48,870 --> 00:16:51,810
in its own right call this is a pretty

302
00:16:51,810 --> 00:16:53,850
interesting we thought and we discovered

303
00:16:53,850 --> 00:16:57,600
a lot of patterns having this I'm not

304
00:16:57,600 --> 00:17:00,149
sure if any official i'm pretty sure

305
00:17:00,149 --> 00:17:05,490
actually that not no official MTA sends

306
00:17:05,490 --> 00:17:08,640
the protocol ending sequence in its own

307
00:17:08,640 --> 00:17:14,059
right call ok

308
00:17:15,310 --> 00:17:20,569
another pattern related to bots was

309
00:17:20,569 --> 00:17:22,310
actually the pattern that way I was

310
00:17:22,310 --> 00:17:24,829
talking to you about upon which we

311
00:17:24,829 --> 00:17:27,819
stumbled at the beginning of the study

312
00:17:27,819 --> 00:17:31,700
this is this contains a clearly

313
00:17:31,700 --> 00:17:34,310
delimited custom-tailored header in a

314
00:17:34,310 --> 00:17:37,910
distinct tcp sequence now for example

315
00:17:37,910 --> 00:17:41,150
the subject or the from or other headers

316
00:17:41,150 --> 00:17:43,340
this is a typical template filling

317
00:17:43,340 --> 00:17:47,240
behavior for a spam bot and it looks

318
00:17:47,240 --> 00:17:51,970
like this the first chunk is

319
00:17:52,000 --> 00:17:54,860
conveniently ends at the subject line if

320
00:17:54,860 --> 00:17:58,400
you notice the subject line is on its

321
00:17:58,400 --> 00:18:03,290
own line and then of course the rest of

322
00:18:03,290 --> 00:18:06,200
the headers including the from sometimes

323
00:18:06,200 --> 00:18:11,690
we got em templates we got patterns

324
00:18:11,690 --> 00:18:15,200
using the from as a distinct in a

325
00:18:15,200 --> 00:18:20,420
distinct sequence and then going on with

326
00:18:20,420 --> 00:18:22,520
the with the rest of the message this

327
00:18:22,520 --> 00:18:24,470
was a pretty pretty awesome to discover

328
00:18:24,470 --> 00:18:27,800
and I think that was the thing which we

329
00:18:27,800 --> 00:18:32,630
don't which started it all now a thing

330
00:18:32,630 --> 00:18:35,930
not to pattern not related to bots which

331
00:18:35,930 --> 00:18:39,170
we discovered and we call garage smtp

332
00:18:39,170 --> 00:18:42,140
servers now why do we call them that we

333
00:18:42,140 --> 00:18:44,180
find out in a moment what their

334
00:18:44,180 --> 00:18:49,250
characteristics are is the gcp segments

335
00:18:49,250 --> 00:18:53,030
are pretty uniform just like all mtas so

336
00:18:53,030 --> 00:18:56,870
was a pretty pretty good to assume that

337
00:18:56,870 --> 00:18:59,990
there was also an SMTP server however

338
00:18:59,990 --> 00:19:03,380
they have very small smss values which

339
00:19:03,380 --> 00:19:07,090
is consistent and does not fluctuate now

340
00:19:07,090 --> 00:19:11,660
this is a this looks like this butter

341
00:19:11,660 --> 00:19:14,330
looks like this it's pretty consistent

342
00:19:14,330 --> 00:19:19,280
as you can see 920 is a pretty small MSS

343
00:19:19,280 --> 00:19:24,080
for a connect for a email server so that

344
00:19:24,080 --> 00:19:26,240
that is why we came to

345
00:19:26,240 --> 00:19:29,210
think about why would our email server

346
00:19:29,210 --> 00:19:31,280
has to have such a low to your internet

347
00:19:31,280 --> 00:19:34,780
connection maybe it has a low reputation

348
00:19:34,780 --> 00:19:37,990
if you have a great time l server you

349
00:19:37,990 --> 00:19:40,370
maybe want to assure you it has a good

350
00:19:40,370 --> 00:19:42,620
internet connection or maybe it's a home

351
00:19:42,620 --> 00:19:46,190
user hosting a server anyway stuff like

352
00:19:46,190 --> 00:19:49,490
that really puts the reputation of the

353
00:19:49,490 --> 00:19:53,690
IP under question now moving on to some

354
00:19:53,690 --> 00:19:57,679
cool stuff we discover some patterns

355
00:19:57,679 --> 00:20:01,210
featuring very fluctuating MSS and

356
00:20:01,210 --> 00:20:05,750
frequently dropping to minimal values we

357
00:20:05,750 --> 00:20:08,090
immediately associated those with

358
00:20:08,090 --> 00:20:11,090
connections from older maybe no cellular

359
00:20:11,090 --> 00:20:13,940
networks and we started looking into it

360
00:20:13,940 --> 00:20:18,440
and of course we were surprised to see

361
00:20:18,440 --> 00:20:21,920
what we found what we found the patterns

362
00:20:21,920 --> 00:20:24,350
look like this so the first segment is

363
00:20:24,350 --> 00:20:29,179
courageous and then it the MSS drops to

364
00:20:29,179 --> 00:20:31,850
the lowest value of ms as possible that

365
00:20:31,850 --> 00:20:35,270
is 536 and it goes on like this and in

366
00:20:35,270 --> 00:20:39,920
some cases the size would go up again

367
00:20:39,920 --> 00:20:49,160
but not not all now okay of course we

368
00:20:49,160 --> 00:20:52,130
started to wonder why our spam messages

369
00:20:52,130 --> 00:20:56,410
coming from a cellular phone we started

370
00:20:56,410 --> 00:20:58,970
are we really dealing with the mobile

371
00:20:58,970 --> 00:21:01,220
but we could not let that go with our

372
00:21:01,220 --> 00:21:03,170
further further investigation of course

373
00:21:03,170 --> 00:21:07,340
and we started looking up the collecting

374
00:21:07,340 --> 00:21:10,309
the IPS from which these messages came

375
00:21:10,309 --> 00:21:14,120
from and surprisingly nineteen ninety

376
00:21:14,120 --> 00:21:15,830
percent of IP addresses in the in those

377
00:21:15,830 --> 00:21:19,059
patterns belong to cellular networks and

378
00:21:19,059 --> 00:21:23,480
we were surprised to find out classes of

379
00:21:23,480 --> 00:21:25,760
eyepiece from Peru and the biggest one

380
00:21:25,760 --> 00:21:28,520
for was from Turkey actually the wave

381
00:21:28,520 --> 00:21:32,750
wave look bigger one was from Turkey of

382
00:21:32,750 --> 00:21:34,880
course this is subject to further

383
00:21:34,880 --> 00:21:37,750
investigation

384
00:21:38,130 --> 00:21:41,560
well we're actually looking into it

385
00:21:41,560 --> 00:21:45,160
right now okay so now for some funny

386
00:21:45,160 --> 00:21:49,710
stuff we noticed some distinct sequences

387
00:21:49,710 --> 00:21:52,660
it was like people it was like the

388
00:21:52,660 --> 00:21:54,640
software words was trying to write in

389
00:21:54,640 --> 00:21:57,990
sequences of multiples of 124 1024

390
00:21:57,990 --> 00:22:03,700
notably 2048 and 88 192 and of course

391
00:22:03,700 --> 00:22:06,460
immediately we thought oh my god we have

392
00:22:06,460 --> 00:22:11,230
a obsessed obsessed guys with the 2048

393
00:22:11,230 --> 00:22:17,620
game okay I'm not presenting this is a

394
00:22:17,620 --> 00:22:23,410
this has a purpose because i want to to

395
00:22:23,410 --> 00:22:26,580
talk to you about how fragmentation can

396
00:22:26,580 --> 00:22:30,040
affect our study so the patterns look

397
00:22:30,040 --> 00:22:33,220
looks like this the first chunk is 1460

398
00:22:33,220 --> 00:22:37,750
which is a decent MSS the next is 588

399
00:22:37,750 --> 00:22:42,040
and so on now at first we thought really

400
00:22:42,040 --> 00:22:43,990
this is just fragmentation but high

401
00:22:43,990 --> 00:22:45,580
fragmentation usually triggers the

402
00:22:45,580 --> 00:22:50,500
mitigation from the TCP layer which

403
00:22:50,500 --> 00:22:53,170
usually immediately triggers an

404
00:22:53,170 --> 00:22:55,360
adjustments of MSS to avoid

405
00:22:55,360 --> 00:22:57,220
fragmentation this does not look like

406
00:22:57,220 --> 00:22:59,140
mitigation because as you can see it's

407
00:22:59,140 --> 00:23:02,320
repeating so we started editing adding

408
00:23:02,320 --> 00:23:05,260
things up and we discovered that these

409
00:23:05,260 --> 00:23:08,170
two actually make up 2048 and it's a

410
00:23:08,170 --> 00:23:13,990
pretty decent pattern to look now to

411
00:23:13,990 --> 00:23:16,180
reach a conclusion I want to talk to you

412
00:23:16,180 --> 00:23:18,760
a bit about the pitfalls of this method

413
00:23:18,760 --> 00:23:20,680
and how they affected our research and

414
00:23:20,680 --> 00:23:27,850
they still do and to give you some

415
00:23:27,850 --> 00:23:32,470
numbers about statistics of course about

416
00:23:32,470 --> 00:23:35,080
how how can this research have helped

417
00:23:35,080 --> 00:23:37,480
current industry and further or further

418
00:23:37,480 --> 00:23:42,250
on now the pitfalls of course coming in

419
00:23:42,250 --> 00:23:45,040
the following chain if you have network

420
00:23:45,040 --> 00:23:47,410
congestion basically what happens is a

421
00:23:47,410 --> 00:23:49,470
packet fragmentation

422
00:23:49,470 --> 00:23:53,429
and which leads to a mitigation reaction

423
00:23:53,429 --> 00:23:58,080
by tcp in order to to reduce those and

424
00:23:58,080 --> 00:24:00,900
usually the msse is adjusted to mitigate

425
00:24:00,900 --> 00:24:04,260
now this this mitigation reaction

426
00:24:04,260 --> 00:24:06,950
generates a lot of apparent white noise

427
00:24:06,950 --> 00:24:10,530
in our data collection and it's pretty

428
00:24:10,530 --> 00:24:15,960
it was pretty tough to overcome this let

429
00:24:15,960 --> 00:24:18,600
me give you an example of a pattern this

430
00:24:18,600 --> 00:24:22,980
is a start the transmission starts with

431
00:24:22,980 --> 00:24:28,289
a message of 30 3088 then there is a

432
00:24:28,289 --> 00:24:33,150
package of 72 and then again 1388 now of

433
00:24:33,150 --> 00:24:36,030
course if you look at this it's pretty

434
00:24:36,030 --> 00:24:39,419
similar to the pattern i described with

435
00:24:39,419 --> 00:24:42,480
the custom header in the zone for

436
00:24:42,480 --> 00:24:44,340
example the subject line it in its own

437
00:24:44,340 --> 00:24:48,780
sequence we stumbled upon this and we

438
00:24:48,780 --> 00:24:52,770
actually had to look at these 72 the

439
00:24:52,770 --> 00:24:54,780
packages of 72 and realize their words

440
00:24:54,780 --> 00:24:56,400
not there was no subject line there and

441
00:24:56,400 --> 00:25:00,299
we started doing the math and we what

442
00:25:00,299 --> 00:25:03,809
what really happened in this example was

443
00:25:03,809 --> 00:25:08,789
that the first tcp started tried to send

444
00:25:08,789 --> 00:25:13,620
the first chunk with an m SS of 1460 but

445
00:25:13,620 --> 00:25:17,190
failed to do so and it triggers a

446
00:25:17,190 --> 00:25:19,289
mitigation reaction and the mass m SS

447
00:25:19,289 --> 00:25:25,799
dropped 230 1388 to get to get past this

448
00:25:25,799 --> 00:25:29,429
what we what we did was to uris tickly

449
00:25:29,429 --> 00:25:32,309
determine the most probable MSS values

450
00:25:32,309 --> 00:25:35,970
but this is very tricky because we came

451
00:25:35,970 --> 00:25:38,490
up with the numerous problems with this

452
00:25:38,490 --> 00:25:42,990
so yeah this is a very very big pitfall

453
00:25:42,990 --> 00:25:48,510
for the study now we started counting

454
00:25:48,510 --> 00:25:52,169
those just to have a good picture about

455
00:25:52,169 --> 00:25:54,240
how we stand at the moment I'm pretty

456
00:25:54,240 --> 00:25:57,179
sure we will improve this but we kind of

457
00:25:57,179 --> 00:26:01,350
counted of the pattern occurrence in our

458
00:26:01,350 --> 00:26:02,350
spam flow

459
00:26:02,350 --> 00:26:06,400
and it was like million messages spanned

460
00:26:06,400 --> 00:26:09,580
over two days we had to actually sample

461
00:26:09,580 --> 00:26:11,740
the spell because we receive a lot more

462
00:26:11,740 --> 00:26:13,630
than a million messages per day we had

463
00:26:13,630 --> 00:26:16,960
to sample this that and that is also an

464
00:26:16,960 --> 00:26:19,299
issue and of course another issue

465
00:26:19,299 --> 00:26:21,789
affecting these numbers is definitely

466
00:26:21,789 --> 00:26:24,280
that the spam waves fluctuate there is a

467
00:26:24,280 --> 00:26:27,600
possibility that in a day spam wave

468
00:26:27,600 --> 00:26:31,169
consisting of a lot of million messages

469
00:26:31,169 --> 00:26:38,429
influencing your your numbers okay so

470
00:26:38,429 --> 00:26:44,980
this is a the header the pattern with

471
00:26:44,980 --> 00:26:47,289
the headers first is like two percent of

472
00:26:47,289 --> 00:26:52,470
what we found the pattern consisting of

473
00:26:52,470 --> 00:26:55,120
custom headers for example subject or

474
00:26:55,120 --> 00:26:58,659
from is close to one percent the

475
00:26:58,659 --> 00:27:01,539
patterns featuring the protocol sequence

476
00:27:01,539 --> 00:27:06,880
in its own distinct distinct sex segment

477
00:27:06,880 --> 00:27:10,780
is one point seventeen percent the

478
00:27:10,780 --> 00:27:13,030
mobile IPS we discovered our clothes

479
00:27:13,030 --> 00:27:17,380
2.5% and the 2048 for a fan club is also

480
00:27:17,380 --> 00:27:22,210
close to 4.2 43 now this may not seem

481
00:27:22,210 --> 00:27:26,049
much but think about the detection rates

482
00:27:26,049 --> 00:27:29,830
that products having the vbe spam test i

483
00:27:29,830 --> 00:27:32,500
don't think that there are many products

484
00:27:32,500 --> 00:27:34,600
which feature detect detection rates

485
00:27:34,600 --> 00:27:37,299
below ninety nine point five percent if

486
00:27:37,299 --> 00:27:40,780
we gamble with these percents in such a

487
00:27:40,780 --> 00:27:43,600
small not such a small detail now this

488
00:27:43,600 --> 00:27:46,120
percent may be quite haven't quite of

489
00:27:46,120 --> 00:27:55,440
interest now how does this research help

490
00:27:55,440 --> 00:28:00,280
there is a product suited for prospects

491
00:28:00,280 --> 00:28:03,250
it is called post screen and what it

492
00:28:03,250 --> 00:28:05,909
does is sit in front of postfix and

493
00:28:05,909 --> 00:28:08,080
performs heuristic connection level

494
00:28:08,080 --> 00:28:11,169
rules to filter out spam now I'm sure

495
00:28:11,169 --> 00:28:15,190
that we sort all this out we will be

496
00:28:15,190 --> 00:28:15,460
able

497
00:28:15,460 --> 00:28:20,130
to implement such such connection level

498
00:28:20,130 --> 00:28:23,020
heuristics in post screen and maybe in

499
00:28:23,020 --> 00:28:28,299
our product also how it helps further is

500
00:28:28,299 --> 00:28:33,100
to better detect botnet to add to the

501
00:28:33,100 --> 00:28:35,409
existing means of detecting botnet of

502
00:28:35,409 --> 00:28:38,289
course to evaluate server and IP

503
00:28:38,289 --> 00:28:42,309
reputation and also improving our image

504
00:28:42,309 --> 00:28:46,480
about threats coming from mobile devices

505
00:28:46,480 --> 00:28:51,039
and of course I want to hear maybe other

506
00:28:51,039 --> 00:28:52,870
ideas from you guys in the questions and

507
00:28:52,870 --> 00:28:56,169
maybe in the cafe after thank you so

508
00:28:56,169 --> 00:28:58,230
much

