1
00:00:03,440 --> 00:00:07,080
hi everyone I'm takairo hariyama

2
00:00:07,080 --> 00:00:10,440
today I talk about my internet World

3
00:00:10,440 --> 00:00:13,980
Marvel C2 scanning research focusing on

4
00:00:13,980 --> 00:00:16,940
apt Marvel

5
00:00:17,699 --> 00:00:20,180
I'm a senior threat researcher with

6
00:00:20,180 --> 00:00:22,500
bracelet analysis unit

7
00:00:22,500 --> 00:00:24,539
formally carbon black

8
00:00:24,539 --> 00:00:27,240
I did the Civil researches in the past

9
00:00:27,240 --> 00:00:31,619
such as farming acquisition MIT attack

10
00:00:31,619 --> 00:00:34,800
defeating compiler label obfuscations

11
00:00:34,800 --> 00:00:37,559
cobrasive extreme cyber scanning and so

12
00:00:37,559 --> 00:00:39,680
on

13
00:00:41,160 --> 00:00:45,120
first of all please take a look at this

14
00:00:45,120 --> 00:00:47,219
virus total result

15
00:00:47,219 --> 00:00:48,719
against

16
00:00:48,719 --> 00:00:51,739
one IP address

17
00:00:51,960 --> 00:00:55,320
antivirus engines detectors

18
00:00:55,320 --> 00:00:56,699
harmless

19
00:00:56,699 --> 00:00:59,399
zero detection

20
00:00:59,399 --> 00:01:02,399
but I'm sure it matches

21
00:01:02,399 --> 00:01:07,020
in fact this type is your vnti version

22
00:01:07,020 --> 00:01:11,340
for C2 server with Tres protocol

23
00:01:11,340 --> 00:01:14,100
the city server has been active

24
00:01:14,100 --> 00:01:16,200
since at least February

25
00:01:16,200 --> 00:01:20,780
and probably even now

26
00:01:21,360 --> 00:01:24,860
why can I conclude that

27
00:01:25,500 --> 00:01:29,040
because since 2019 I will build a system

28
00:01:29,040 --> 00:01:31,140
discovering

29
00:01:31,140 --> 00:01:33,840
active marker C2 servers on the Internet

30
00:01:33,840 --> 00:01:36,479
by protocol emulations

31
00:01:36,479 --> 00:01:40,560
and use these intelligence to detect and

32
00:01:40,560 --> 00:01:45,299
stop threats in almost real time

33
00:01:45,299 --> 00:01:47,880
as I show in this example

34
00:01:47,880 --> 00:01:51,060
IP repetition is not effective

35
00:01:51,060 --> 00:01:55,560
for catching fresh major city servers

36
00:01:55,560 --> 00:01:57,960
especially when

37
00:01:57,960 --> 00:02:01,380
APD access we meet their malware

38
00:02:01,380 --> 00:02:05,780
deployment to specific targets

39
00:02:06,240 --> 00:02:08,098
in this presentation

40
00:02:08,098 --> 00:02:11,640
I will explain how to emulate the C2

41
00:02:11,640 --> 00:02:16,220
Protocols of two long-term apt malware

42
00:02:16,220 --> 00:02:21,319
Ubi version 4 and Shadow path

43
00:02:23,879 --> 00:02:27,440
this is today's overview

44
00:02:31,800 --> 00:02:35,400
first I summarize the target malware

45
00:02:35,400 --> 00:02:37,260
in this table

46
00:02:37,260 --> 00:02:41,040
both are utilized by PRC links cyber

47
00:02:41,040 --> 00:02:42,900
experience reductors

48
00:02:42,900 --> 00:02:47,640
and support multiple City plot course

49
00:02:47,640 --> 00:02:52,560
the big difference is the preference

50
00:02:52,560 --> 00:02:55,800
there has been minimal reporting on

51
00:02:55,800 --> 00:02:59,760
winning ETI while there are a lot of

52
00:02:59,760 --> 00:03:03,599
Publications regarding Shadow path

53
00:03:03,599 --> 00:03:05,940
I will explain details

54
00:03:05,940 --> 00:03:09,420
including the unique feature in each

55
00:03:09,420 --> 00:03:11,720
section

56
00:03:13,200 --> 00:03:16,200
I explained the green API version for CT

57
00:03:16,200 --> 00:03:18,799
scanning first

58
00:03:19,700 --> 00:03:23,700
reality is malware seen in many large

59
00:03:23,700 --> 00:03:26,940
scale attacks and has been attributed to

60
00:03:26,940 --> 00:03:30,720
apt-41 at the list

61
00:03:30,720 --> 00:03:32,640
in 2013

62
00:03:32,640 --> 00:03:36,300
when NTI was first reported by Kaspersky

63
00:03:36,300 --> 00:03:40,080
and in 2015 no matter

64
00:03:40,080 --> 00:03:42,780
what the startup sequence and City

65
00:03:42,780 --> 00:03:45,720
portfolio of version 3.

66
00:03:45,720 --> 00:03:48,599
the winning Pi version 3 components

67
00:03:48,599 --> 00:03:51,560
separated into three components

68
00:03:51,560 --> 00:03:55,319
developer service and worker

69
00:03:55,319 --> 00:03:57,840
developer decorates and service and

70
00:03:57,840 --> 00:04:02,099
worker then service Branch worker

71
00:04:02,099 --> 00:04:05,359
other payroll

72
00:04:06,420 --> 00:04:09,000
and in 2016

73
00:04:09,000 --> 00:04:11,819
I observed the version 3 startup

74
00:04:11,819 --> 00:04:14,839
sequence changed

75
00:04:15,420 --> 00:04:19,199
micro networks first described the new

76
00:04:19,199 --> 00:04:22,280
variants at jstag Japan security

77
00:04:22,280 --> 00:04:25,440
analysis conference

78
00:04:25,440 --> 00:04:28,080
to differentiate from other previous

79
00:04:28,080 --> 00:04:31,080
versions I refer to the variance as

80
00:04:31,080 --> 00:04:33,060
version 4.

81
00:04:33,060 --> 00:04:34,919
the version 4 is more carefully

82
00:04:34,919 --> 00:04:37,740
implemented to make the worker code

83
00:04:37,740 --> 00:04:40,080
acquisition harder

84
00:04:40,080 --> 00:04:42,180
that's why there is very little public

85
00:04:42,180 --> 00:04:45,620
information about this version

86
00:04:46,979 --> 00:04:50,280
and in 2018

87
00:04:50,280 --> 00:04:53,100
I've identified a new worker component

88
00:04:53,100 --> 00:04:55,440
Food City protocol was completely

89
00:04:55,440 --> 00:04:58,280
different from version 3.

90
00:04:58,280 --> 00:05:01,380
so I got interested

91
00:05:01,380 --> 00:05:04,800
and analyzed the news version for City

92
00:05:04,800 --> 00:05:07,220
protocol

93
00:05:07,979 --> 00:05:10,040
the version for mobile component

94
00:05:10,040 --> 00:05:13,380
supports 5ct protocols

95
00:05:13,380 --> 00:05:16,080
basically the same customizer packet is

96
00:05:16,080 --> 00:05:19,620
100 in every protocol but

97
00:05:19,620 --> 00:05:21,900
there are minor differences and

98
00:05:21,900 --> 00:05:25,219
additional structures

99
00:05:25,919 --> 00:05:30,419
CRS and the https are encrypted versions

100
00:05:30,419 --> 00:05:34,199
of TCP and http

101
00:05:34,199 --> 00:05:37,440
as a unique point this malware has a

102
00:05:37,440 --> 00:05:38,759
server mode

103
00:05:38,759 --> 00:05:42,300
accepting incoming packets it behaves

104
00:05:42,300 --> 00:05:44,940
like a C2 server

105
00:05:44,940 --> 00:05:48,300
this Behavior was helpful to verify the

106
00:05:48,300 --> 00:05:50,720
correctness of the protocol format and

107
00:05:50,720 --> 00:05:53,759
encryption for the C2 scanner

108
00:05:53,759 --> 00:05:56,180
development

109
00:05:56,699 --> 00:05:58,860
their customized packet is separated

110
00:05:58,860 --> 00:06:01,919
into heter and payroll

111
00:06:01,919 --> 00:06:05,820
both are encrypted except for the 10th

112
00:06:05,820 --> 00:06:08,639
key City value in the header

113
00:06:08,639 --> 00:06:12,419
and the signature and payroll ranks

114
00:06:12,419 --> 00:06:15,660
values are validated validate validated

115
00:06:15,660 --> 00:06:18,720
after the decryption on the receiver

116
00:06:18,720 --> 00:06:20,460
side

117
00:06:20,460 --> 00:06:22,740
the initial handshake

118
00:06:22,740 --> 00:06:26,720
pocket payroll contents perotype guid

119
00:06:26,720 --> 00:06:31,400
pocket sequence number and so on

120
00:06:31,759 --> 00:06:35,520
actually the packet encryption algorithm

121
00:06:35,520 --> 00:06:37,919
is still no

122
00:06:37,919 --> 00:06:42,479
so I emulated using idap call function

123
00:06:42,479 --> 00:06:45,120
there are two kinds of keys

124
00:06:45,120 --> 00:06:46,620
one is

125
00:06:46,620 --> 00:06:52,199
dynamically generated key from temp kcw

126
00:06:52,199 --> 00:06:56,520
this code shows the key generation

127
00:06:56,520 --> 00:06:59,639
the other is a portion of the Java hash

128
00:06:59,639 --> 00:07:03,740
value over hard-coded string

129
00:07:05,220 --> 00:07:08,100
in the TCP and the UDP protocols the

130
00:07:08,100 --> 00:07:10,919
customized packet to data is simply sent

131
00:07:10,919 --> 00:07:15,479
on the other hand in HTTP protocol the

132
00:07:15,479 --> 00:07:17,880
packet is sent through a poster request

133
00:07:17,880 --> 00:07:20,460
with several headers

134
00:07:20,460 --> 00:07:24,180
and the cookie data value contains its

135
00:07:24,180 --> 00:07:26,660
packet size

136
00:07:28,199 --> 00:07:31,860
the value is a string made up of 5

137
00:07:31,860 --> 00:07:35,759
divided hex values in reader India

138
00:07:35,759 --> 00:07:38,699
by using this calculation

139
00:07:38,699 --> 00:07:40,199
the

140
00:07:40,199 --> 00:07:43,500
previous example uh

141
00:07:43,500 --> 00:07:49,759
storing his decoded as 34 in HEX

142
00:07:51,479 --> 00:07:54,660
prior to the post request

143
00:07:54,660 --> 00:07:57,900
and initial get request will be made

144
00:07:57,900 --> 00:08:01,020
and in the get request all parties

145
00:08:01,020 --> 00:08:04,979
accept the cookie are randomly generated

146
00:08:04,979 --> 00:08:09,660
so the decoded size value is zero

147
00:08:09,660 --> 00:08:13,020
I'm not sure about the purpose but this

148
00:08:13,020 --> 00:08:16,560
Behavior can be utilized for the CT

149
00:08:16,560 --> 00:08:18,979
scanning

150
00:08:21,180 --> 00:08:24,860
after the initial handshake

151
00:08:24,900 --> 00:08:28,319
the packet period contains the command

152
00:08:28,319 --> 00:08:30,180
ID and the dispatcher ID

153
00:08:30,180 --> 00:08:33,539
in the nested structure to control the

154
00:08:33,539 --> 00:08:36,240
infected host

155
00:08:36,240 --> 00:08:38,760
the city commands are related to problem

156
00:08:38,760 --> 00:08:42,919
management like version 3.

157
00:08:44,520 --> 00:08:47,880
for the winning TI system scanning I

158
00:08:47,880 --> 00:08:50,700
implemented the two Python scripts

159
00:08:50,700 --> 00:08:54,240
it's unrealistic to scan for range of

160
00:08:54,240 --> 00:08:56,519
Barbies on the internet with Python

161
00:08:56,519 --> 00:09:00,000
scripts so first I use

162
00:09:00,000 --> 00:09:03,300
that map to generate the input photo

163
00:09:03,300 --> 00:09:05,580
scan data

164
00:09:05,580 --> 00:09:09,899
the targeted for the tcp443 and 80 and

165
00:09:09,899 --> 00:09:13,860
UDP 443 and 53 based on the version for

166
00:09:13,860 --> 00:09:17,880
sample and all the vnti reports

167
00:09:17,880 --> 00:09:21,779
next the standard on python script

168
00:09:21,779 --> 00:09:24,779
handles two kinds of packets

169
00:09:24,779 --> 00:09:28,640
in HTTP the script sends a get request

170
00:09:28,640 --> 00:09:32,339
and the codes and validates to key value

171
00:09:32,339 --> 00:09:33,959
of the response

172
00:09:33,959 --> 00:09:36,600
any other protocols like

173
00:09:36,600 --> 00:09:41,040
TCP Tres and UDP protocols the script

174
00:09:41,040 --> 00:09:45,959
sends the fixed customizer packet then

175
00:09:45,959 --> 00:09:49,140
gets suspicious responses with the same

176
00:09:49,140 --> 00:09:51,899
size and the different key for excluding

177
00:09:51,899 --> 00:09:54,560
honeypots

178
00:09:55,080 --> 00:09:57,839
after that the either python of course

179
00:09:57,839 --> 00:10:00,720
script decrypts responses customize the

180
00:10:00,720 --> 00:10:03,839
packet and violates the values in the

181
00:10:03,839 --> 00:10:06,140
header

182
00:10:07,440 --> 00:10:10,019
by the way I explained

183
00:10:10,019 --> 00:10:13,680
when it supports the server mode so how

184
00:10:13,680 --> 00:10:16,560
can we differentiate the

185
00:10:16,560 --> 00:10:20,640
server mode infections and C2 servers

186
00:10:20,640 --> 00:10:25,260
at least in TCP TRS and UDP protocols

187
00:10:25,260 --> 00:10:27,720
we can identify the difference by

188
00:10:27,720 --> 00:10:31,560
checking the guid and packet sequence

189
00:10:31,560 --> 00:10:35,040
number in the the group State period

190
00:10:35,040 --> 00:10:37,699
specifically

191
00:10:37,980 --> 00:10:40,800
server mode infections send back the

192
00:10:40,800 --> 00:10:43,440
same guid value as client

193
00:10:43,440 --> 00:10:45,480
and the packet sequence number is

194
00:10:45,480 --> 00:10:47,100
incremented

195
00:10:47,100 --> 00:10:49,140
on the other hand

196
00:10:49,140 --> 00:10:50,940
system servers

197
00:10:50,940 --> 00:10:55,500
return or new guid value and the packet

198
00:10:55,500 --> 00:10:57,480
sequence number is reset

199
00:10:57,480 --> 00:11:01,399
so we can differentiate them

200
00:11:03,060 --> 00:11:05,640
I show the scanning result

201
00:11:05,640 --> 00:11:09,560
first population by protocol

202
00:11:09,980 --> 00:11:13,920
uh I've scanned v80 version for City

203
00:11:13,920 --> 00:11:17,220
servers since December 2019.

204
00:11:17,220 --> 00:11:21,600
so far I have identified 55 servers in

205
00:11:21,600 --> 00:11:23,959
total

206
00:11:24,000 --> 00:11:26,940
I think all of our record system servers

207
00:11:26,940 --> 00:11:28,019
because

208
00:11:28,019 --> 00:11:31,800
in TCP TLS udb protocols I could

209
00:11:31,800 --> 00:11:34,740
validate by payroll values that I

210
00:11:34,740 --> 00:11:36,959
explained in the previous slide

211
00:11:36,959 --> 00:11:40,820
and in HTTP protocol the scanner just

212
00:11:40,820 --> 00:11:43,380
decodes and validates the cookie value

213
00:11:43,380 --> 00:11:47,339
but the discovered IPS were hosted by

214
00:11:47,339 --> 00:11:49,560
previous providers

215
00:11:49,560 --> 00:11:51,600
which were overwrapped with other

216
00:11:51,600 --> 00:11:54,420
protocol servers so that's why I

217
00:11:54,420 --> 00:11:55,620
concluded

218
00:11:55,620 --> 00:12:00,060
uh over accuracy to servers

219
00:12:00,060 --> 00:12:02,779
I guess the server model infection

220
00:12:02,779 --> 00:12:07,760
samples use high ports for binding

221
00:12:08,760 --> 00:12:11,220
this graph shows a change in number of

222
00:12:11,220 --> 00:12:13,620
active main API version for C2 servers

223
00:12:13,620 --> 00:12:15,240
per month

224
00:12:15,240 --> 00:12:19,260
I discovered C2 iocs twice February 2020

225
00:12:19,260 --> 00:12:20,700
and

226
00:12:20,700 --> 00:12:23,279
November last year

227
00:12:23,279 --> 00:12:26,540
so I think

228
00:12:26,760 --> 00:12:29,700
that's why the number in November

229
00:12:29,700 --> 00:12:32,100
sharply dropped

230
00:12:32,100 --> 00:12:35,279
but even around 10 servers are still

231
00:12:35,279 --> 00:12:37,579
active

232
00:12:38,760 --> 00:12:40,740
as far as I know

233
00:12:40,740 --> 00:12:42,899
there are only two public reports

234
00:12:42,899 --> 00:12:45,600
related to win API version for C2

235
00:12:45,600 --> 00:12:48,079
servers

236
00:12:48,360 --> 00:12:51,120
both were published last year

237
00:12:51,120 --> 00:12:55,139
about two years after I disclosed

238
00:12:55,139 --> 00:12:58,320
I will keep tracking the city servers on

239
00:12:58,320 --> 00:13:01,139
the internet as long as the malware is

240
00:13:01,139 --> 00:13:03,320
used

241
00:13:06,620 --> 00:13:10,579
example is Shadow pad

242
00:13:11,399 --> 00:13:14,279
Shadow path is a modular Mario platform

243
00:13:14,279 --> 00:13:16,500
privately shared with multiple peers

244
00:13:16,500 --> 00:13:18,480
during this reductor straight access

245
00:13:18,480 --> 00:13:20,940
since 2015.

246
00:13:20,940 --> 00:13:23,940
according to Century one this is the

247
00:13:23,940 --> 00:13:27,120
successor two projects

248
00:13:27,120 --> 00:13:30,779
Shadow path supports 60 protocols

249
00:13:30,779 --> 00:13:35,279
but in this research I focus on TCP HTTP

250
00:13:35,279 --> 00:13:39,260
and the UDP protocols because SSR and

251
00:13:39,260 --> 00:13:42,600
DNS are not directly utilized by the

252
00:13:42,600 --> 00:13:46,880
recent samples as far as I know

253
00:13:48,300 --> 00:13:50,940
the CC protocol format and the encoding

254
00:13:50,940 --> 00:13:54,000
algorithms are different between TCP and

255
00:13:54,000 --> 00:13:57,180
HTTP UDP

256
00:13:57,180 --> 00:14:00,060
for example the key for the packet

257
00:14:00,060 --> 00:14:02,279
encoding is included in the header in

258
00:14:02,279 --> 00:14:05,579
both protocols but the key size is

259
00:14:05,579 --> 00:14:07,380
different

260
00:14:07,380 --> 00:14:11,160
and the header size is also different

261
00:14:11,160 --> 00:14:14,820
and randomly sized data will be appended

262
00:14:14,820 --> 00:14:19,079
as the payload to the initial handshake

263
00:14:19,079 --> 00:14:20,399
packet

264
00:14:20,399 --> 00:14:22,680
the size is random

265
00:14:22,680 --> 00:14:26,100
but the maximum size is different for

266
00:14:26,100 --> 00:14:28,820
each protocol

267
00:14:32,820 --> 00:14:37,560
besides the immediate values used by the

268
00:14:37,560 --> 00:14:39,899
encoding algorithms are different

269
00:14:39,899 --> 00:14:41,699
barbarians

270
00:14:41,699 --> 00:14:45,000
probably per Shadow participation

271
00:14:45,000 --> 00:14:48,300
so I analyze the three variants

272
00:14:48,300 --> 00:14:52,019
corrected in August the last year

273
00:14:52,019 --> 00:14:56,820
parent run also known as scatterby

274
00:14:56,820 --> 00:14:59,120
reported by positive Technologies

275
00:14:59,120 --> 00:15:03,959
variance to reported by ESET variously

276
00:15:03,959 --> 00:15:06,600
apparently actually was

277
00:15:06,600 --> 00:15:09,540
hunted from virus without that time but

278
00:15:09,540 --> 00:15:12,180
a few months ago positive Technologies

279
00:15:12,180 --> 00:15:15,439
also reported it

280
00:15:17,459 --> 00:15:20,279
the TCP protocol Hector format has been

281
00:15:20,279 --> 00:15:23,820
the same since 2015.

282
00:15:23,820 --> 00:15:27,560
the session key

283
00:15:27,839 --> 00:15:30,839
is randomly generated then used for

284
00:15:30,839 --> 00:15:33,899
encoding both the heter and payroll

285
00:15:33,899 --> 00:15:37,800
the next field contains programming ID

286
00:15:37,800 --> 00:15:40,620
and command ID

287
00:15:40,620 --> 00:15:44,100
the ID is a different Power variants

288
00:15:44,100 --> 00:15:46,560
my CT scanner

289
00:15:46,560 --> 00:15:49,019
utilizes

290
00:15:49,019 --> 00:15:52,440
the compressed and original payroll size

291
00:15:52,440 --> 00:15:55,860
information for the format validation

292
00:15:55,860 --> 00:15:58,740
the apparel is compressed with quicker

293
00:15:58,740 --> 00:16:01,519
that Arrow Zone

294
00:16:09,480 --> 00:16:12,839
the TCP protocol packet encoding is like

295
00:16:12,839 --> 00:16:14,760
this in Python

296
00:16:14,760 --> 00:16:17,399
among the shadow part variants that were

297
00:16:17,399 --> 00:16:20,579
analyzed only variant one had the TCP

298
00:16:20,579 --> 00:16:21,839
plugin

299
00:16:21,839 --> 00:16:24,560
so another variant may use different

300
00:16:24,560 --> 00:16:29,579
immediate value for the encoding

301
00:16:29,579 --> 00:16:31,680
after the initial handshake

302
00:16:31,680 --> 00:16:34,139
shadow fight executes the city commands

303
00:16:34,139 --> 00:16:37,920
specified by the C2 servers

304
00:16:37,920 --> 00:16:41,399
for the individual command IDs and

305
00:16:41,399 --> 00:16:43,560
payroll to formats please refer to the

306
00:16:43,560 --> 00:16:46,800
doctor wave white paper

307
00:16:46,800 --> 00:16:48,899
the sample analyzed in the paper is

308
00:16:48,899 --> 00:16:52,500
older than variant run but the formats

309
00:16:52,500 --> 00:16:55,279
should be similar

310
00:16:59,279 --> 00:17:03,899
in HTTP and UDP protocols the Hector and

311
00:17:03,899 --> 00:17:06,059
payroll that are sent

312
00:17:06,059 --> 00:17:10,260
as raw data in UDP or

313
00:17:10,260 --> 00:17:14,720
through a post method in http

314
00:17:15,419 --> 00:17:18,540
the header format also contains

315
00:17:18,540 --> 00:17:20,160
session key

316
00:17:20,160 --> 00:17:22,740
for pocket encoding but key size is the

317
00:17:22,740 --> 00:17:25,380
key size is different

318
00:17:25,380 --> 00:17:28,740
and the next field is a constant value I

319
00:17:28,740 --> 00:17:30,059
call it the type

320
00:17:30,059 --> 00:17:33,240
and the other session IDs

321
00:17:33,240 --> 00:17:36,299
the session Source ID

322
00:17:36,299 --> 00:17:39,539
sent by the client will be set in the

323
00:17:39,539 --> 00:17:42,000
session destination ID on the server

324
00:17:42,000 --> 00:17:42,900
side

325
00:17:42,900 --> 00:17:46,679
so we can utilize this red colored field

326
00:17:46,679 --> 00:17:51,260
values for the format validation

327
00:17:53,580 --> 00:17:57,480
in HTTP and UDP protocols the immediate

328
00:17:57,480 --> 00:17:59,940
values in the packet decoding code are

329
00:17:59,940 --> 00:18:01,919
different barbariance

330
00:18:01,919 --> 00:18:06,320
but the roism is identical

331
00:18:07,620 --> 00:18:11,100
after the initial handshake the payload

332
00:18:11,100 --> 00:18:13,440
will contain the same data structure as

333
00:18:13,440 --> 00:18:16,919
the TCP customizer packet and the type

334
00:18:16,919 --> 00:18:21,380
field in the header will be incremented

335
00:18:22,140 --> 00:18:24,480
before the scanner implementation

336
00:18:24,480 --> 00:18:28,039
the target protocols and ports were

337
00:18:28,039 --> 00:18:31,080
decided based on the recent samples

338
00:18:31,080 --> 00:18:33,720
configuration values

339
00:18:33,720 --> 00:18:35,880
I had to implement the scanner

340
00:18:35,880 --> 00:18:39,240
barbariance due to the difference of

341
00:18:39,240 --> 00:18:41,940
immediate values using the packet

342
00:18:41,940 --> 00:18:44,480
encoding

343
00:18:46,200 --> 00:18:49,980
like we need a version for City scanning

344
00:18:49,980 --> 00:18:53,340
first I create a list of hosts open at

345
00:18:53,340 --> 00:18:57,120
targeted ports using Zeto map

346
00:18:57,120 --> 00:19:00,740
then the standard on python script

347
00:19:00,740 --> 00:19:04,919
sends the shadow part formatted packets

348
00:19:04,919 --> 00:19:08,640
to our IPS on the list and

349
00:19:08,640 --> 00:19:11,820
the script decodes the response packet

350
00:19:11,820 --> 00:19:17,100
and validate the decoded values in TCP

351
00:19:17,100 --> 00:19:18,900
parallel site information

352
00:19:18,900 --> 00:19:23,640
in HTTP and UDP

353
00:19:23,640 --> 00:19:28,940
type and session ID will be validated

354
00:19:31,020 --> 00:19:33,480
by the way running this research

355
00:19:33,480 --> 00:19:36,780
I found one Shadow part sample including

356
00:19:36,780 --> 00:19:38,760
exactly the same

357
00:19:38,760 --> 00:19:43,320
host anemia on the port except protocol

358
00:19:43,320 --> 00:19:46,080
that hinted Shadow part 6 you can accept

359
00:19:46,080 --> 00:19:48,120
the multiple protocol requests after

360
00:19:48,120 --> 00:19:49,919
single port

361
00:19:49,919 --> 00:19:53,400
so I tested my guess by scanning one

362
00:19:53,400 --> 00:19:56,179
octave C2

363
00:19:57,240 --> 00:19:58,799
as a result

364
00:19:58,799 --> 00:20:01,919
the city could accept both protocols at

365
00:20:01,919 --> 00:20:04,020
the same port

366
00:20:04,020 --> 00:20:08,280
this is the reason why I just scan the

367
00:20:08,280 --> 00:20:11,940
HTTP protocol notables

368
00:20:11,940 --> 00:20:14,640
the same behavior may be seen in other

369
00:20:14,640 --> 00:20:16,799
protocol combinations like

370
00:20:16,799 --> 00:20:18,900
TCP and SSR

371
00:20:18,900 --> 00:20:20,340
or

372
00:20:20,340 --> 00:20:25,939
UDP and DNS but I will not restart it

373
00:20:28,080 --> 00:20:30,360
this graph is a population by Shadow

374
00:20:30,360 --> 00:20:33,139
part variant

375
00:20:33,980 --> 00:20:37,380
since September last year

376
00:20:37,380 --> 00:20:42,000
so far I I have identified 81 C2 servers

377
00:20:42,000 --> 00:20:44,580
in total

378
00:20:44,580 --> 00:20:47,760
during the tracking period variant one

379
00:20:47,760 --> 00:20:50,960
has become more active

380
00:20:53,220 --> 00:20:55,559
and this is a changing number of active

381
00:20:55,559 --> 00:20:58,620
Shadow part C to serve as performance

382
00:20:58,620 --> 00:21:01,260
the sharp Loop in February is just a

383
00:21:01,260 --> 00:21:03,000
system issue

384
00:21:03,000 --> 00:21:05,900
and currently around

385
00:21:05,900 --> 00:21:10,760
15 servers are active

386
00:21:13,200 --> 00:21:16,260
as shallow part is more prevalent than

387
00:21:16,260 --> 00:21:18,480
vidi version 4.

388
00:21:18,480 --> 00:21:20,820
I could identify

389
00:21:20,820 --> 00:21:23,100
three samples

390
00:21:23,100 --> 00:21:27,000
on barastatal communicating the with the

391
00:21:27,000 --> 00:21:30,539
discovered ctips

392
00:21:30,539 --> 00:21:34,860
automobile utilized by PRC linked Side

393
00:21:34,860 --> 00:21:37,500
by experience reductor

394
00:21:37,500 --> 00:21:40,740
spider is used by apt-41

395
00:21:40,740 --> 00:21:44,820
reverse window is used by

396
00:21:44,820 --> 00:21:49,760
luyu named by gmt5

397
00:21:50,580 --> 00:21:53,760
or C2 servers were discovered by the TCP

398
00:21:53,760 --> 00:21:57,720
443 variant variant run scanner

399
00:21:57,720 --> 00:22:00,720
and accept the spider case

400
00:22:00,720 --> 00:22:02,520
system servers

401
00:22:02,520 --> 00:22:06,000
accepted multiple protocols and Poets at

402
00:22:06,000 --> 00:22:08,840
the same time

403
00:22:09,539 --> 00:22:14,159
and in all cases the city scanning

404
00:22:14,159 --> 00:22:17,460
system called the C2 servers prior to

405
00:22:17,460 --> 00:22:20,159
the sample submissions

406
00:22:20,159 --> 00:22:24,780
this is the big big Advantage by the CC

407
00:22:24,780 --> 00:22:27,500
scanning research

408
00:22:31,140 --> 00:22:34,020
and last year the discovery of a shadow

409
00:22:34,020 --> 00:22:38,460
part C2 IP triggered an instant response

410
00:22:38,460 --> 00:22:41,400
the APK attack had to bypass the many

411
00:22:41,400 --> 00:22:44,640
methods of endpoint detections but it

412
00:22:44,640 --> 00:22:47,280
was erupted because of the fully

413
00:22:47,280 --> 00:22:49,860
identified ctip

414
00:22:49,860 --> 00:22:52,080
in this case the CT scanning technique

415
00:22:52,080 --> 00:22:54,360
works as their proactive threat

416
00:22:54,360 --> 00:22:57,139
detection method

417
00:22:58,559 --> 00:23:01,140
in this section I would like to share my

418
00:23:01,140 --> 00:23:02,340
findings

419
00:23:02,340 --> 00:23:05,520
for internet-wide C2 scanning not

420
00:23:05,520 --> 00:23:10,760
limited to win NTI and shadowbot

421
00:23:12,080 --> 00:23:15,659
I generate initial photo scan data for

422
00:23:15,659 --> 00:23:18,000
the CT scanning Python scripts using the

423
00:23:18,000 --> 00:23:19,260
domap

424
00:23:19,260 --> 00:23:21,419
not purchasing the third party

425
00:23:21,419 --> 00:23:25,020
commercial data service like Showdown

426
00:23:25,020 --> 00:23:28,679
census rapid 7 and so on

427
00:23:28,679 --> 00:23:32,400
because for UDP based protocols

428
00:23:32,400 --> 00:23:35,520
we must scan hosts with customized

429
00:23:35,520 --> 00:23:38,820
protocol formats or the system servers

430
00:23:38,820 --> 00:23:41,480
won't answer

431
00:23:42,659 --> 00:23:45,240
the Commercial Services normally don't

432
00:23:45,240 --> 00:23:47,280
provide the option

433
00:23:47,280 --> 00:23:48,960
additionally

434
00:23:48,960 --> 00:23:51,179
the Commercial Services don't scare

435
00:23:51,179 --> 00:23:53,580
minor puts actively

436
00:23:53,580 --> 00:23:57,720
this table is the result of the number

437
00:23:57,720 --> 00:24:02,780
of ips open at minor ports

438
00:24:02,940 --> 00:24:05,220
in rest of November

439
00:24:05,220 --> 00:24:08,340
if the ports are not targeted

440
00:24:08,340 --> 00:24:11,640
show them and census Returns the

441
00:24:11,640 --> 00:24:15,620
extremely small data

442
00:24:15,799 --> 00:24:19,020
by choosing the minor ports

443
00:24:19,020 --> 00:24:21,179
thread doctors can avoid the detections

444
00:24:21,179 --> 00:24:24,780
by Showdown and since senses easily

445
00:24:24,780 --> 00:24:27,600
that's why I generate

446
00:24:27,600 --> 00:24:31,340
photo scan data on my own

447
00:24:34,679 --> 00:24:38,580
another consideration is anonymization

448
00:24:38,580 --> 00:24:40,980
scanning operations are sometimes forced

449
00:24:40,980 --> 00:24:44,159
to be terminated by isps and VBS

450
00:24:44,159 --> 00:24:47,340
providers due to otherse reports

451
00:24:47,340 --> 00:24:51,900
in order to sustain the research

452
00:24:51,900 --> 00:24:56,659
The Source address should be anonymized

453
00:24:57,000 --> 00:25:00,659
there are two anonymization methods

454
00:25:00,659 --> 00:25:02,220
using tour

455
00:25:02,220 --> 00:25:05,820
and Commercial VPN service

456
00:25:05,820 --> 00:25:07,320
twice free

457
00:25:07,320 --> 00:25:10,500
but only supports TCP basic protocols

458
00:25:10,500 --> 00:25:14,400
and has a risk of being blocked because

459
00:25:14,400 --> 00:25:18,360
two are easy to relay risk is published

460
00:25:18,360 --> 00:25:20,940
on the other hand a commercial briefing

461
00:25:20,940 --> 00:25:23,820
service is known free but supports

462
00:25:23,820 --> 00:25:27,240
supports both of TCP and UDP based

463
00:25:27,240 --> 00:25:29,760
support course so that's why I utilize

464
00:25:29,760 --> 00:25:33,860
one of commercial grouping subseas

465
00:25:36,240 --> 00:25:39,740
by the way when we use that map with

466
00:25:39,740 --> 00:25:42,240
non-ethernet interface

467
00:25:42,240 --> 00:25:45,120
like VPN

468
00:25:45,120 --> 00:25:48,779
set map will cause a segmentation code

469
00:25:48,779 --> 00:25:51,480
and there's a bug has not been

470
00:25:51,480 --> 00:25:53,520
patcheduled yet

471
00:25:53,520 --> 00:25:56,659
so I recommend to patch using the code

472
00:25:56,659 --> 00:26:01,039
explained on the issue page

473
00:26:03,419 --> 00:26:06,960
I wrap up my presentation

474
00:26:06,960 --> 00:26:10,200
by emulating the city protocols then

475
00:26:10,200 --> 00:26:12,600
scanning the internet

476
00:26:12,600 --> 00:26:17,279
I've discovered over 130 vnti version 4

477
00:26:17,279 --> 00:26:20,419
and Shadow part 16 servers

478
00:26:20,419 --> 00:26:23,520
65 percent of the iocs have zero

479
00:26:23,520 --> 00:26:25,380
detections on virus Auto

480
00:26:25,380 --> 00:26:28,799
and around 10 C2 servers are always

481
00:26:28,799 --> 00:26:32,279
active in both Marvel

482
00:26:32,279 --> 00:26:35,340
I think GI is a little possibility of

483
00:26:35,340 --> 00:26:38,279
forceful tips because the city protocol

484
00:26:38,279 --> 00:26:43,580
formats and encoding Theory unique

485
00:26:43,679 --> 00:26:47,220
I believe the city scanning can become a

486
00:26:47,220 --> 00:26:49,320
game changer

487
00:26:49,320 --> 00:26:52,200
as if I was a most proactive threat to

488
00:26:52,200 --> 00:26:55,100
detection approaches

489
00:26:56,039 --> 00:26:57,779
for This research

490
00:26:57,779 --> 00:26:59,760
I appreciate the two external

491
00:26:59,760 --> 00:27:01,500
researchers

492
00:27:01,500 --> 00:27:04,740
tadash kobashi from internet in Seattle

493
00:27:04,740 --> 00:27:06,059
Japan

494
00:27:06,059 --> 00:27:08,820
his advice regarding the scalable

495
00:27:08,820 --> 00:27:10,320
scanner implementation and

496
00:27:10,320 --> 00:27:14,460
troubleshooting was super helpful for me

497
00:27:14,460 --> 00:27:18,240
I'm Leon Chang from Team T5

498
00:27:18,240 --> 00:27:22,140
he shared his knowledge to get a big big

499
00:27:22,140 --> 00:27:24,960
picture of the shadow fight variance

500
00:27:24,960 --> 00:27:26,640
thank you so much

501
00:27:26,640 --> 00:27:30,480
and last but not least

502
00:27:30,480 --> 00:27:35,279
I appreciate Brian basking my manager

503
00:27:35,279 --> 00:27:40,580
for his patient management as always

504
00:27:41,700 --> 00:27:44,580
this is a sample hash

505
00:27:44,580 --> 00:27:47,400
and the discovered city is really

506
00:27:47,400 --> 00:27:48,960
published

507
00:27:48,960 --> 00:27:52,320
here right after this presentation

508
00:27:52,320 --> 00:27:53,760
that's it

509
00:27:53,760 --> 00:27:56,600
thank you so much

510
00:27:58,140 --> 00:28:01,140
foreign

511
00:28:10,620 --> 00:28:12,419
if you don't have any questions from our

512
00:28:12,419 --> 00:28:14,880
audience I have uh one question so how

513
00:28:14,880 --> 00:28:16,799
much systems were involved on scanning

514
00:28:16,799 --> 00:28:20,460
the internet and how long did it take

515
00:28:20,460 --> 00:28:23,580
for genetic water scan data for for

516
00:28:23,580 --> 00:28:25,260
scaling the entire internet you could

517
00:28:25,260 --> 00:28:28,460
say yes uh faster

518
00:28:28,620 --> 00:28:32,520
my environment for

519
00:28:32,520 --> 00:28:35,400
portal scan data generation about two

520
00:28:35,400 --> 00:28:36,659
days

521
00:28:36,659 --> 00:28:40,080
because I have to adjust the packet

522
00:28:40,080 --> 00:28:40,980
right

523
00:28:40,980 --> 00:28:43,440
gently

524
00:28:43,440 --> 00:28:48,380
not to be terminated so and after the

525
00:28:48,380 --> 00:28:51,419
photo scan data creation python script

526
00:28:51,419 --> 00:28:52,980
scans

527
00:28:52,980 --> 00:28:55,940
uh

528
00:28:56,039 --> 00:28:58,500
probably

529
00:28:58,500 --> 00:29:02,100
three days to five days per

530
00:29:02,100 --> 00:29:03,840
single skin

531
00:29:03,840 --> 00:29:07,699
so in total

532
00:29:07,980 --> 00:29:10,080
five to seven days

533
00:29:10,080 --> 00:29:13,440
Okay cool so thanks again

534
00:29:13,440 --> 00:29:16,039
thank you

