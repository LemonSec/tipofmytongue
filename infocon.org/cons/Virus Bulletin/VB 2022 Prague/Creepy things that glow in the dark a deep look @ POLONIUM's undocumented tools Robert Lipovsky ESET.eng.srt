1
00:00:03,600 --> 00:00:05,819
hello everyone it's great to be back

2
00:00:05,819 --> 00:00:08,880
speaking at VB after a while uh so today

3
00:00:08,880 --> 00:00:12,059
we're talking about some creepy polonium

4
00:00:12,059 --> 00:00:15,299
malware uh the research has been done by

5
00:00:15,299 --> 00:00:17,580
my colleague matthiasporoli who was

6
00:00:17,580 --> 00:00:19,980
unable to be here today with us in

7
00:00:19,980 --> 00:00:22,260
Prague so I'll be presenting this on his

8
00:00:22,260 --> 00:00:25,500
behalf but the research credit all goes

9
00:00:25,500 --> 00:00:27,500
uh to Matthias

10
00:00:27,500 --> 00:00:32,520
so polonium is a cyber Espionage apt

11
00:00:32,520 --> 00:00:35,219
group first documented by the Microsoft

12
00:00:35,219 --> 00:00:38,940
thread Intelligence Center in June 2022

13
00:00:38,940 --> 00:00:42,420
uh in this publication uh Microsoft

14
00:00:42,420 --> 00:00:45,180
described a campaign that started this

15
00:00:45,180 --> 00:00:47,820
February where attackers used two custom

16
00:00:47,820 --> 00:00:51,239
implants creepy drive and creepy snail

17
00:00:51,239 --> 00:00:54,660
so we stuck with that uh creedy a creepy

18
00:00:54,660 --> 00:00:57,180
nomenclature uh but when we looked in

19
00:00:57,180 --> 00:00:59,699
our own Telemetry we've seen that

20
00:00:59,699 --> 00:01:02,760
polonium was active since at least uh

21
00:01:02,760 --> 00:01:04,739
September 2021

22
00:01:04,739 --> 00:01:07,020
using some previously undocumented

23
00:01:07,020 --> 00:01:10,380
backdoors and custom tools

24
00:01:10,380 --> 00:01:12,479
um the numerous versions of changes that

25
00:01:12,479 --> 00:01:15,540
they introduced uh all over that time

26
00:01:15,540 --> 00:01:18,420
period they showed that uh it's a

27
00:01:18,420 --> 00:01:20,820
continuous and long-term effort to spy

28
00:01:20,820 --> 00:01:22,200
on their targets so they're really about

29
00:01:22,200 --> 00:01:24,540
Espionage uh we haven't observed or

30
00:01:24,540 --> 00:01:27,299
noticed uh any efforts on their behalf

31
00:01:27,299 --> 00:01:31,979
for sabotage or ransomware actions

32
00:01:31,979 --> 00:01:34,560
so also according to our Telemetry uh

33
00:01:34,560 --> 00:01:36,900
polonium has targeted more than a dozen

34
00:01:36,900 --> 00:01:39,720
organizations in Israel in the verticals

35
00:01:39,720 --> 00:01:42,240
of engineering Information Technology

36
00:01:42,240 --> 00:01:45,540
law communication branding and marketing

37
00:01:45,540 --> 00:01:49,820
media insurance and Social Services

38
00:01:50,040 --> 00:01:53,040
we don't know uh how the group gained

39
00:01:53,040 --> 00:01:55,619
initial access to the targeted systems

40
00:01:55,619 --> 00:01:59,159
but about a third or 35 percent of the

41
00:01:59,159 --> 00:02:01,140
victims had their credentials made

42
00:02:01,140 --> 00:02:03,079
public in the September 21

43
00:02:03,079 --> 00:02:06,960
uh leak of the Fortinet VPN accounts so

44
00:02:06,960 --> 00:02:09,239
it's possible that the attackers gain

45
00:02:09,239 --> 00:02:12,180
access to their uh targets internal

46
00:02:12,180 --> 00:02:14,459
networks by abusing those leaked VPN

47
00:02:14,459 --> 00:02:16,920
accounts that would also be consistent

48
00:02:16,920 --> 00:02:19,200
with what was seen by Microsoft uh in

49
00:02:19,200 --> 00:02:21,420
the report they're saying that uh 80

50
00:02:21,420 --> 00:02:22,920
percent of the victims that were

51
00:02:22,920 --> 00:02:24,420
compromised with the creepy Drive

52
00:02:24,420 --> 00:02:28,500
implant uh were running 40 appliances

53
00:02:28,500 --> 00:02:30,959
now before I go into the details about

54
00:02:30,959 --> 00:02:34,680
each and every of uh polonium's tools I

55
00:02:34,680 --> 00:02:36,060
want to spend a minute talking about

56
00:02:36,060 --> 00:02:38,400
some of the common characteristics that

57
00:02:38,400 --> 00:02:41,099
we observed in their tool set overall

58
00:02:41,099 --> 00:02:44,099
so first is the sheer abundance of tools

59
00:02:44,099 --> 00:02:46,680
uh we've seen no fewer than seven

60
00:02:46,680 --> 00:02:49,680
different backdoors uh I would say back

61
00:02:49,680 --> 00:02:51,900
to our families used by the group to

62
00:02:51,900 --> 00:02:53,340
execute commands on the compromise

63
00:02:53,340 --> 00:02:56,160
systems and in addition to those many

64
00:02:56,160 --> 00:02:58,260
other malicious modules for either

65
00:02:58,260 --> 00:03:01,319
logging screenshot uh crystals taking

66
00:03:01,319 --> 00:03:03,660
screenshots opening reverse shells

67
00:03:03,660 --> 00:03:05,700
taking photos with a webcam Excel

68
00:03:05,700 --> 00:03:08,300
trading files and so on

69
00:03:08,300 --> 00:03:11,459
uh those cool those tools are mostly

70
00:03:11,459 --> 00:03:14,099
custom and most of the Motions tool that

71
00:03:14,099 --> 00:03:16,800
I just mentioned all those categories uh

72
00:03:16,800 --> 00:03:19,379
they also have various versions so if we

73
00:03:19,379 --> 00:03:20,940
take the screenshot module for example

74
00:03:20,940 --> 00:03:22,739
uh we'll find that they were using

75
00:03:22,739 --> 00:03:25,140
different versions that would exfiltrate

76
00:03:25,140 --> 00:03:27,360
the the files with different protocols

77
00:03:27,360 --> 00:03:30,300
either HTTP or FTP

78
00:03:30,300 --> 00:03:32,340
also in some cases we've seen that code

79
00:03:32,340 --> 00:03:35,580
was reused uh in different modules and

80
00:03:35,580 --> 00:03:37,560
in some other cases a module was coded

81
00:03:37,560 --> 00:03:39,900
from scratch but followed exactly the

82
00:03:39,900 --> 00:03:42,599
same logic as some other module

83
00:03:42,599 --> 00:03:44,940
also we've seen many versions of the

84
00:03:44,940 --> 00:03:47,099
same component with some minor changes

85
00:03:47,099 --> 00:03:49,799
using attacks in several campaigns over

86
00:03:49,799 --> 00:03:52,680
a short period of time all of this is to

87
00:03:52,680 --> 00:03:55,260
say that the attackers are building and

88
00:03:55,260 --> 00:03:58,379
maintaining their own tool set

89
00:03:58,379 --> 00:04:01,340
third uh their abuse of cloud services

90
00:04:01,340 --> 00:04:05,459
so polonium has been abusing Dropbox and

91
00:04:05,459 --> 00:04:08,099
OneDrive cloud storage services and

92
00:04:08,099 --> 00:04:10,019
recently we also discovered that they

93
00:04:10,019 --> 00:04:12,420
were abusing Mega for their CNC

94
00:04:12,420 --> 00:04:14,060
Communications

95
00:04:14,060 --> 00:04:17,339
and the last overall characteristic that

96
00:04:17,339 --> 00:04:19,320
I want to highlight is the use of really

97
00:04:19,320 --> 00:04:22,380
small components most of the group's

98
00:04:22,380 --> 00:04:24,479
malicious modules are small and have a

99
00:04:24,479 --> 00:04:27,600
really limited functionality uh in one

100
00:04:27,600 --> 00:04:29,639
case the attackers were using one module

101
00:04:29,639 --> 00:04:31,380
for taking screenshots and another

102
00:04:31,380 --> 00:04:33,540
module for uploading those screenshots

103
00:04:33,540 --> 00:04:37,380
to a CNC server similarly they like to

104
00:04:37,380 --> 00:04:39,479
divide the code in their backdoors

105
00:04:39,479 --> 00:04:41,820
Distributing various functionality into

106
00:04:41,820 --> 00:04:46,139
various tiny dlls perhaps expecting that

107
00:04:46,139 --> 00:04:48,120
Defenders or researchers wouldn't

108
00:04:48,120 --> 00:04:52,460
observe the complete chain of attack

109
00:04:52,500 --> 00:04:55,620
so now to give the overview of those

110
00:04:55,620 --> 00:04:57,360
seven vectors that we've seen over the

111
00:04:57,360 --> 00:04:59,639
course of the last 12 months I'll go

112
00:04:59,639 --> 00:05:02,820
into the details of every one of them in

113
00:05:02,820 --> 00:05:04,199
just a second but here's just the

114
00:05:04,199 --> 00:05:06,240
overview on to put them all on a

115
00:05:06,240 --> 00:05:07,199
timeline

116
00:05:07,199 --> 00:05:10,380
uh so the two oldest ones are techno

117
00:05:10,380 --> 00:05:13,139
creep and flip creep uh that we first

118
00:05:13,139 --> 00:05:15,840
found in our Telemetry in since

119
00:05:15,840 --> 00:05:18,360
September 2021 and we're last seen

120
00:05:18,360 --> 00:05:20,520
February this year

121
00:05:20,520 --> 00:05:23,820
then deep creep uh active in a similar

122
00:05:23,820 --> 00:05:25,680
but a bit longer period until May this

123
00:05:25,680 --> 00:05:28,320
year uh then creepy drive and creepy

124
00:05:28,320 --> 00:05:31,380
snail both starting this February uh but

125
00:05:31,380 --> 00:05:33,900
creepy Drive was last seen just this

126
00:05:33,900 --> 00:05:36,180
month this September and creepy snail

127
00:05:36,180 --> 00:05:38,000
until June

128
00:05:38,000 --> 00:05:40,979
then uh similarly Mega creep was seen

129
00:05:40,979 --> 00:05:43,919
until September and then the newest

130
00:05:43,919 --> 00:05:47,340
backdoor Papa creep we first saw it this

131
00:05:47,340 --> 00:05:49,560
month is in September and the campaigns

132
00:05:49,560 --> 00:05:51,500
are still ongoing

133
00:05:51,500 --> 00:05:55,139
so now on to the details um I won't go

134
00:05:55,139 --> 00:05:57,419
into too much of the detail of creepy

135
00:05:57,419 --> 00:05:59,160
driving creepy snail as those have been

136
00:05:59,160 --> 00:06:02,520
documented by Microsoft but we'll just

137
00:06:02,520 --> 00:06:04,199
look at them briefly

138
00:06:04,199 --> 00:06:06,180
um and talk about their their high level

139
00:06:06,180 --> 00:06:09,120
characteristics so first creepy Drive uh

140
00:06:09,120 --> 00:06:10,979
it's a Powershell backdoor uh that

141
00:06:10,979 --> 00:06:13,259
executes commands the attackers put on

142
00:06:13,259 --> 00:06:16,680
Dropbox or OneDrive it can download or

143
00:06:16,680 --> 00:06:18,600
upload files from attacker control

144
00:06:18,600 --> 00:06:21,139
accounts in these cloud storage services

145
00:06:21,139 --> 00:06:24,199
and they're using their respective apis

146
00:06:24,199 --> 00:06:28,319
and executing supplied Powershell code

147
00:06:28,319 --> 00:06:30,479
now there isn't just one single version

148
00:06:30,479 --> 00:06:32,940
of creepy drive so there are various

149
00:06:32,940 --> 00:06:35,039
different versions of that and some

150
00:06:35,039 --> 00:06:36,900
samples had fewer commands some had

151
00:06:36,900 --> 00:06:40,020
minor changes and so on so apparently

152
00:06:40,020 --> 00:06:42,840
polonium is tweaking their back doors

153
00:06:42,840 --> 00:06:45,060
before they're used on specific targets

154
00:06:45,060 --> 00:06:47,580
adding or removing functionality uh

155
00:06:47,580 --> 00:06:49,500
depending on their needs

156
00:06:49,500 --> 00:06:51,360
and this is something that we'll be

157
00:06:51,360 --> 00:06:54,240
seeing in all of their modules and shows

158
00:06:54,240 --> 00:06:57,240
just how active they are

159
00:06:57,240 --> 00:07:00,120
uh the second one described by Microsoft

160
00:07:00,120 --> 00:07:02,699
is creepy snail which is another

161
00:07:02,699 --> 00:07:05,340
Powershell backdoor that sends HTTP

162
00:07:05,340 --> 00:07:07,979
requests to the CNC server and receives

163
00:07:07,979 --> 00:07:10,800
and executes Powershell commands

164
00:07:10,800 --> 00:07:13,440
unlike the previous one uh creepy Drive

165
00:07:13,440 --> 00:07:16,319
uh creepy snail makes use of polonium's

166
00:07:16,319 --> 00:07:19,680
own CNC infrastructure

167
00:07:19,680 --> 00:07:21,780
so now on to the backdoors that haven't

168
00:07:21,780 --> 00:07:23,699
been documented elsewhere first let's

169
00:07:23,699 --> 00:07:26,099
begin with deep creep

170
00:07:26,099 --> 00:07:27,780
it's a custom backdoor written in

171
00:07:27,780 --> 00:07:30,539
c-sharp uh that reads commands from a

172
00:07:30,539 --> 00:07:33,539
text file stored in Dropbox accounts and

173
00:07:33,539 --> 00:07:35,400
it can upload and download files to and

174
00:07:35,400 --> 00:07:37,919
from these accounts it's running in an

175
00:07:37,919 --> 00:07:40,460
infinite Loop looking for a file called

176
00:07:40,460 --> 00:07:44,940
cdtxt in that cloud storage once it's

177
00:07:44,940 --> 00:07:47,220
read the file is deleted so that the

178
00:07:47,220 --> 00:07:48,960
commands are not processed for a second

179
00:07:48,960 --> 00:07:50,460
time

180
00:07:50,460 --> 00:07:53,220
authentication with the cloud uh is done

181
00:07:53,220 --> 00:07:55,860
using oauth 2.0 tokens which are

182
00:07:55,860 --> 00:07:58,020
hard-coded in the binaries

183
00:07:58,020 --> 00:08:00,539
now deep creep needs a legitimate dll

184
00:08:00,539 --> 00:08:03,360
from the Dropbox SDK to function and

185
00:08:03,360 --> 00:08:06,960
communicate with uh with the service

186
00:08:06,960 --> 00:08:10,319
in terms of supported commands uh here

187
00:08:10,319 --> 00:08:12,900
here's the list I think the first four

188
00:08:12,900 --> 00:08:15,180
are pretty self-explanatory

189
00:08:15,180 --> 00:08:18,360
uh the get no thing command deletes that

190
00:08:18,360 --> 00:08:22,319
cdtxt file and then execute with command

191
00:08:22,319 --> 00:08:24,780
XE so if none of the previous commands

192
00:08:24,780 --> 00:08:28,020
are found in the cdtxt file then the

193
00:08:28,020 --> 00:08:29,699
lines are taken as commands to be

194
00:08:29,699 --> 00:08:33,479
executed with command exit and then the

195
00:08:33,479 --> 00:08:36,539
output is uploaded to a text file in

196
00:08:36,539 --> 00:08:39,179
Dropbox something interesting is that

197
00:08:39,179 --> 00:08:41,399
the output encoding for the console is

198
00:08:41,399 --> 00:08:44,940
set to Windows 1255 which can handle

199
00:08:44,940 --> 00:08:47,940
Hebrew characters as well

200
00:08:47,940 --> 00:08:51,300
so deep creep establishes persistence by

201
00:08:51,300 --> 00:08:54,420
creating an lnk file in the startup

202
00:08:54,420 --> 00:08:57,959
folder and also creates a scheduled task

203
00:08:57,959 --> 00:09:00,360
a Powershell command is used to create

204
00:09:00,360 --> 00:09:04,260
the lnk file and this exact same code

205
00:09:04,260 --> 00:09:05,940
has been reused in some of the other

206
00:09:05,940 --> 00:09:09,000
polonium backdoors so the concept of

207
00:09:09,000 --> 00:09:11,820
using command XE to execute some of

208
00:09:11,820 --> 00:09:13,920
their duties is something that we'll see

209
00:09:13,920 --> 00:09:17,279
on a on a repeated basis

210
00:09:17,279 --> 00:09:20,220
but in some other cases a separate

211
00:09:20,220 --> 00:09:22,560
loader was used to execute deep creep

212
00:09:22,560 --> 00:09:25,560
and implement the persistence uh in

213
00:09:25,560 --> 00:09:27,660
these cases Deep Creek was executed with

214
00:09:27,660 --> 00:09:29,940
installed util uh the legitimate tool

215
00:09:29,940 --> 00:09:32,640
from the.net framework uh on the slide

216
00:09:32,640 --> 00:09:34,260
you can see part of the code of that

217
00:09:34,260 --> 00:09:36,660
loader and notice that the backdoor is

218
00:09:36,660 --> 00:09:39,500
installed with the slash U the uninstall

219
00:09:39,500 --> 00:09:43,500
option of install util XE because the

220
00:09:43,500 --> 00:09:45,360
malicious code is provided in the

221
00:09:45,360 --> 00:09:48,480
uninstallation routine perhaps it's an

222
00:09:48,480 --> 00:09:52,380
effort to mislead malware analysts

223
00:09:52,380 --> 00:09:56,519
now Mega creep uh is based on deep creep

224
00:09:56,519 --> 00:10:00,120
uh with some added functionalities so it

225
00:10:00,120 --> 00:10:02,339
reads and execute commands from a text

226
00:10:02,339 --> 00:10:05,519
file this time stored on Mega cloud

227
00:10:05,519 --> 00:10:06,779
storage

228
00:10:06,779 --> 00:10:09,240
and at first glance it may appear that

229
00:10:09,240 --> 00:10:11,820
Mega is just a newer version of Deep

230
00:10:11,820 --> 00:10:15,000
creep and it does in fact reuse some

231
00:10:15,000 --> 00:10:17,760
code from Deep creep but it looks like

232
00:10:17,760 --> 00:10:19,980
the attackers are considering both back

233
00:10:19,980 --> 00:10:23,040
doors as separate projects because both

234
00:10:23,040 --> 00:10:25,320
of their projects both of those back

235
00:10:25,320 --> 00:10:27,600
doors have their own separate version

236
00:10:27,600 --> 00:10:29,519
numbering

237
00:10:29,519 --> 00:10:33,240
uh Mega creep uses the mega API c-sharp

238
00:10:33,240 --> 00:10:35,339
Library uh to make to communicate with

239
00:10:35,339 --> 00:10:36,560
the cloud storage

240
00:10:36,560 --> 00:10:39,540
authentication in that case is done with

241
00:10:39,540 --> 00:10:41,700
a username and password which are stored

242
00:10:41,700 --> 00:10:44,160
uh encrypted in a local file called

243
00:10:44,160 --> 00:10:46,260
ses.dll

244
00:10:46,260 --> 00:10:48,120
and the decryption key for that is

245
00:10:48,120 --> 00:10:51,600
hard-coded uh in the back door so this

246
00:10:51,600 --> 00:10:53,399
idea of putting credentials in a

247
00:10:53,399 --> 00:10:55,620
separate text file started to be used

248
00:10:55,620 --> 00:10:58,560
with mega creep and now also is being

249
00:10:58,560 --> 00:11:02,339
applied in the newer polonium modules

250
00:11:02,339 --> 00:11:05,579
uh Deep Creek processes all the exact

251
00:11:05,579 --> 00:11:08,459
same commands uh that we described for a

252
00:11:08,459 --> 00:11:10,680
deep creep but this time they're stored

253
00:11:10,680 --> 00:11:14,720
in AES encrypted form in the cdtxt file

254
00:11:14,720 --> 00:11:18,060
to support that encryption uh there are

255
00:11:18,060 --> 00:11:19,920
two additional commands that you can see

256
00:11:19,920 --> 00:11:23,040
here these are related to updating the

257
00:11:23,040 --> 00:11:25,140
decryption key which is meant to be

258
00:11:25,140 --> 00:11:28,399
stored in a different file cert.dll

259
00:11:28,399 --> 00:11:32,220
and the key is not the same as the key

260
00:11:32,220 --> 00:11:33,660
that's used to decrypt the mega

261
00:11:33,660 --> 00:11:36,720
credentials from sas.dlo

262
00:11:36,720 --> 00:11:39,120
so Mega creep can also encrypt the

263
00:11:39,120 --> 00:11:41,100
output as well the output from the

264
00:11:41,100 --> 00:11:43,260
commands which are executed by command

265
00:11:43,260 --> 00:11:47,600
XZ before they're uploaded to the cloud

266
00:11:48,240 --> 00:11:50,760
and also Mega creep is a good example of

267
00:11:50,760 --> 00:11:52,740
how polonium likes to use those separate

268
00:11:52,740 --> 00:11:56,880
dlls with specific functionality uh in

269
00:11:56,880 --> 00:11:58,800
this example on the screen uh two

270
00:11:58,800 --> 00:12:01,920
methods from a dll are called for

271
00:12:01,920 --> 00:12:05,700
example CHP kills running processes with

272
00:12:05,700 --> 00:12:08,160
the same name as the backdoor executable

273
00:12:08,160 --> 00:12:10,500
in other words previous executions of

274
00:12:10,500 --> 00:12:13,519
the back door that still may be running

275
00:12:13,519 --> 00:12:17,579
this other function xvdfv is for

276
00:12:17,579 --> 00:12:20,040
implementing persistence in the same way

277
00:12:20,040 --> 00:12:23,959
as we described for deep creep

278
00:12:24,000 --> 00:12:26,820
the latest version of Mega creep that we

279
00:12:26,820 --> 00:12:29,579
saw was deployed using a loader and here

280
00:12:29,579 --> 00:12:32,760
we see the code loading main zero dll

281
00:12:32,760 --> 00:12:35,760
which contains the main code for the

282
00:12:35,760 --> 00:12:38,339
back door and we can also see there at

283
00:12:38,339 --> 00:12:40,320
the bottom that the attackers forgot to

284
00:12:40,320 --> 00:12:42,899
remove a line that they were using to

285
00:12:42,899 --> 00:12:45,680
test the malware

286
00:12:46,920 --> 00:12:50,399
now on to flip creep uh so flipper is

287
00:12:50,399 --> 00:12:52,680
yet another custom backdoor this time

288
00:12:52,680 --> 00:12:56,100
written in C sharp and it has again a

289
00:12:56,100 --> 00:12:57,839
very similar flow of execution to the

290
00:12:57,839 --> 00:12:59,820
other Vector that we described so it's

291
00:12:59,820 --> 00:13:01,560
reading commands from a text file this

292
00:13:01,560 --> 00:13:03,740
time it's called orders.txt

293
00:13:03,740 --> 00:13:06,360
which is stored on an FTP server

294
00:13:06,360 --> 00:13:10,019
operated by polonium and it can upload

295
00:13:10,019 --> 00:13:12,000
and download files from that

296
00:13:12,000 --> 00:13:14,100
the commands

297
00:13:14,100 --> 00:13:16,680
that flipgroup can process are again the

298
00:13:16,680 --> 00:13:18,420
same as the for the other backdoors

299
00:13:18,420 --> 00:13:21,000
however the commands upload and download

300
00:13:21,000 --> 00:13:24,959
do the opposite of what you would expect

301
00:13:24,959 --> 00:13:26,700
so it's hard to say if this was a

302
00:13:26,700 --> 00:13:30,120
mistake uh but up the upload command

303
00:13:30,120 --> 00:13:32,279
actually downloads files from the FTP

304
00:13:32,279 --> 00:13:34,680
server to the victim and the download

305
00:13:34,680 --> 00:13:37,019
command uploads files basically they

306
00:13:37,019 --> 00:13:39,120
were using the the view from the server

307
00:13:39,120 --> 00:13:41,880
rather than from the client uh also you

308
00:13:41,880 --> 00:13:43,680
can see that on on the slide here so

309
00:13:43,680 --> 00:13:45,779
this is the function that uploads files

310
00:13:45,779 --> 00:13:47,940
but we can see that it's looking for the

311
00:13:47,940 --> 00:13:50,639
string download

312
00:13:50,639 --> 00:13:54,260
hence the naming for this creep

313
00:13:54,260 --> 00:13:57,779
also there's a command FTP version that

314
00:13:57,779 --> 00:13:59,700
uploads the version of the backdoor

315
00:13:59,700 --> 00:14:03,000
which is hard-coded to a file on the FTP

316
00:14:03,000 --> 00:14:04,680
server kind of a strange way to do it

317
00:14:04,680 --> 00:14:08,399
but uh something worth noting

318
00:14:08,399 --> 00:14:11,040
so techno creep is also one of the

319
00:14:11,040 --> 00:14:13,800
oldest backdoors in polonium's Arsenal

320
00:14:13,800 --> 00:14:16,500
uh it's again a c-sharp backdoor that

321
00:14:16,500 --> 00:14:18,540
communicates with the CNC through TCP

322
00:14:18,540 --> 00:14:21,779
sockets and with this communication

323
00:14:21,779 --> 00:14:24,120
protocol the vectors has to exchange a

324
00:14:24,120 --> 00:14:25,740
couple of messages back and forth with

325
00:14:25,740 --> 00:14:28,980
the server for the execution of commands

326
00:14:28,980 --> 00:14:31,500
so the first message is sent by the

327
00:14:31,500 --> 00:14:33,420
backdoor to the server and it contains

328
00:14:33,420 --> 00:14:35,760
some initial information about the

329
00:14:35,760 --> 00:14:38,220
victim like the list of IP addresses

330
00:14:38,220 --> 00:14:40,199
that are resolved for the victim's

331
00:14:40,199 --> 00:14:42,720
hostname and this is obtained by the DNS

332
00:14:42,720 --> 00:14:45,720
get host by name API

333
00:14:45,720 --> 00:14:47,940
uh the server then replies with commands

334
00:14:47,940 --> 00:14:50,579
to be executed by the back door uh it

335
00:14:50,579 --> 00:14:53,100
supports what you would expect the same

336
00:14:53,100 --> 00:14:54,959
as with the other one so upload and

337
00:14:54,959 --> 00:14:56,940
download and there are quite a few

338
00:14:56,940 --> 00:14:58,560
messages exchanged between the backdoor

339
00:14:58,560 --> 00:15:01,260
and servers so for example for download

340
00:15:01,260 --> 00:15:03,899
uh after receiving the path where the

341
00:15:03,899 --> 00:15:06,120
files will be written locally the back

342
00:15:06,120 --> 00:15:09,120
door checks if that folder exists if it

343
00:15:09,120 --> 00:15:10,740
does then it sends a confirmation

344
00:15:10,740 --> 00:15:13,440
message to the server to which the

345
00:15:13,440 --> 00:15:15,360
server replies with sending the size of

346
00:15:15,360 --> 00:15:18,000
the file and eventually the file itself

347
00:15:18,000 --> 00:15:20,699
so so quite noisy

348
00:15:20,699 --> 00:15:23,579
uh if neither of these commands are

349
00:15:23,579 --> 00:15:25,500
received then the message is taken as a

350
00:15:25,500 --> 00:15:27,480
command to be executed with command XE

351
00:15:27,480 --> 00:15:30,720
and the output is sent back to the

352
00:15:30,720 --> 00:15:32,760
server

353
00:15:32,760 --> 00:15:35,579
so Papa creep uh it's the latest

354
00:15:35,579 --> 00:15:38,820
backdoor in their Arsenal uh and it it's

355
00:15:38,820 --> 00:15:40,560
also the first one that was not written

356
00:15:40,560 --> 00:15:43,260
in C sharp or in Powershell uh it's a

357
00:15:43,260 --> 00:15:46,199
custom modular backdoor uh written in C

358
00:15:46,199 --> 00:15:48,540
sharp and it receives and executes

359
00:15:48,540 --> 00:15:50,639
commands from a server through TCP

360
00:15:50,639 --> 00:15:52,440
sockets

361
00:15:52,440 --> 00:15:55,199
so it's a modular Vector so that means

362
00:15:55,199 --> 00:15:57,120
its code is divided into various

363
00:15:57,120 --> 00:15:59,639
components some of them again as we're

364
00:15:59,639 --> 00:16:02,160
seeing quite commonly with uh polonium

365
00:16:02,160 --> 00:16:05,519
with quite limited functionality so one

366
00:16:05,519 --> 00:16:08,339
of the components is called executive uh

367
00:16:08,339 --> 00:16:09,660
which is looking for a file with

368
00:16:09,660 --> 00:16:11,339
commands and executing them with

369
00:16:11,339 --> 00:16:14,519
surprise surprise command XE and then

370
00:16:14,519 --> 00:16:16,980
the output is saved to a file there's no

371
00:16:16,980 --> 00:16:19,880
CNC communication capability in this one

372
00:16:19,880 --> 00:16:23,220
but that's uh present in the mailman

373
00:16:23,220 --> 00:16:25,079
component which communicates with the

374
00:16:25,079 --> 00:16:28,199
server to receive commands and writes

375
00:16:28,199 --> 00:16:31,199
them to a file and it will also send the

376
00:16:31,199 --> 00:16:35,160
files with the output back to the C2

377
00:16:35,160 --> 00:16:37,980
uh two other components called creepy up

378
00:16:37,980 --> 00:16:39,660
and creepy down upload and download

379
00:16:39,660 --> 00:16:43,139
files to and from this uh the C2 so

380
00:16:43,139 --> 00:16:45,660
executive and mailman uh run

381
00:16:45,660 --> 00:16:48,060
independently of each other and are even

382
00:16:48,060 --> 00:16:50,639
persistent with uh their separate

383
00:16:50,639 --> 00:16:52,380
scheduled tasks

384
00:16:52,380 --> 00:16:54,839
and creepy up and creepy down are not

385
00:16:54,839 --> 00:16:57,240
part of the main flow of execution of

386
00:16:57,240 --> 00:16:59,279
the back door and they can be executed

387
00:16:59,279 --> 00:17:01,259
on demand

388
00:17:01,259 --> 00:17:03,899
also in terms of capabilities papakuri

389
00:17:03,899 --> 00:17:05,760
passed the same ones as the previous

390
00:17:05,760 --> 00:17:08,459
back doors however no commands are

391
00:17:08,459 --> 00:17:10,980
actually parsed everything is simply

392
00:17:10,980 --> 00:17:14,299
executed with command XE

393
00:17:14,299 --> 00:17:16,679
uh the communication with the server

394
00:17:16,679 --> 00:17:19,319
uses raw TCP sockets uh but the

395
00:17:19,319 --> 00:17:21,359
information that's sent and received by

396
00:17:21,359 --> 00:17:23,839
the backdoor is contained in HTML code

397
00:17:23,839 --> 00:17:28,020
with uh and a fake HTML header as you

398
00:17:28,020 --> 00:17:30,840
can see here uh the content length well

399
00:17:30,840 --> 00:17:33,960
that's always set to 1024 and also

400
00:17:33,960 --> 00:17:36,840
notice that the content type is Text

401
00:17:36,840 --> 00:17:40,380
slash Dash HTML which is not a normal

402
00:17:40,380 --> 00:17:42,059
value

403
00:17:42,059 --> 00:17:44,400
uh here's an example of what that looks

404
00:17:44,400 --> 00:17:46,760
like notice the bad content type there

405
00:17:46,760 --> 00:17:49,260
and this is a message sent to the server

406
00:17:49,260 --> 00:17:51,600
by the backdoor with the output of the

407
00:17:51,600 --> 00:17:54,199
deer command

408
00:17:55,260 --> 00:17:57,900
so the IP address and the port of the C2

409
00:17:57,900 --> 00:18:00,059
server is read from a file in the

410
00:18:00,059 --> 00:18:01,740
working directory of the malware called

411
00:18:01,740 --> 00:18:04,620
Yeti dll and just as we've seen in some

412
00:18:04,620 --> 00:18:06,720
of the previous backdoors it's not a dll

413
00:18:06,720 --> 00:18:08,940
it's a text file that's just

414
00:18:08,940 --> 00:18:11,520
masquerading as a dlm

415
00:18:11,520 --> 00:18:14,700
uh creepy up and creepy down modules are

416
00:18:14,700 --> 00:18:17,280
Standalone command line tools and

417
00:18:17,280 --> 00:18:20,100
curiously creepy Downs file name in the

418
00:18:20,100 --> 00:18:23,220
compromise computers is ucln and creepy

419
00:18:23,220 --> 00:18:27,120
UPS is dcln so again opposite of what

420
00:18:27,120 --> 00:18:28,860
you would expect and similarly similar

421
00:18:28,860 --> 00:18:31,820
to what we saw with flip creep

422
00:18:31,820 --> 00:18:34,740
uh as we described with the other

423
00:18:34,740 --> 00:18:37,559
previous back doors Papa creep also has

424
00:18:37,559 --> 00:18:40,860
parts of its code offloaded to small

425
00:18:40,860 --> 00:18:44,160
dlls for example the code for executing

426
00:18:44,160 --> 00:18:46,980
commands with command XZ is delegated to

427
00:18:46,980 --> 00:18:49,980
dll2d.dll

428
00:18:49,980 --> 00:18:51,840
on the slide you can see the import

429
00:18:51,840 --> 00:18:54,900
table for the executive component which

430
00:18:54,900 --> 00:19:00,500
Imports those two custom dlls at the top

431
00:19:00,780 --> 00:19:03,179
and here's the malware folder on a

432
00:19:03,179 --> 00:19:06,000
typical com PC compromise by Papa creep

433
00:19:06,000 --> 00:19:08,280
you can see that it uses uses quite a

434
00:19:08,280 --> 00:19:11,580
few files for its operation there's the

435
00:19:11,580 --> 00:19:13,620
top four which are the executables so

436
00:19:13,620 --> 00:19:15,419
executive and the mailman components

437
00:19:15,419 --> 00:19:18,299
creepy up and creepy down uh then those

438
00:19:18,299 --> 00:19:20,760
dll Imports that we mentioned and then

439
00:19:20,760 --> 00:19:22,559
the yeti dealer configuration with the

440
00:19:22,559 --> 00:19:24,059
command and control server information

441
00:19:24,059 --> 00:19:27,799
and a couple of other files

442
00:19:27,900 --> 00:19:30,419
so as I mentioned in the introduction

443
00:19:30,419 --> 00:19:33,480
polonium aside from their backdoors are

444
00:19:33,480 --> 00:19:36,299
also using several other modules uh to

445
00:19:36,299 --> 00:19:39,120
spy on the victims and we've clustered

446
00:19:39,120 --> 00:19:40,919
them according to their functionality

447
00:19:40,919 --> 00:19:44,820
and there were several versions uh in

448
00:19:44,820 --> 00:19:46,980
each of these categories

449
00:19:46,980 --> 00:19:48,660
um but I'll pick just a couple of

450
00:19:48,660 --> 00:19:51,179
Representative examples also these

451
00:19:51,179 --> 00:19:53,280
modules quite often have similar

452
00:19:53,280 --> 00:19:55,679
features and and and traits that we

453
00:19:55,679 --> 00:19:57,419
describe for the backdoors like

454
00:19:57,419 --> 00:19:59,220
persistence through scheduled tasks

455
00:19:59,220 --> 00:20:01,320
killing processes with the same name as

456
00:20:01,320 --> 00:20:03,620
itself and so on

457
00:20:03,620 --> 00:20:06,059
so screenshots

458
00:20:06,059 --> 00:20:07,919
um in one of the variants that we've

459
00:20:07,919 --> 00:20:10,559
seen it was taking screenshots in an

460
00:20:10,559 --> 00:20:12,299
infinite Loop and then writing the image

461
00:20:12,299 --> 00:20:15,299
files to a temporary folder and when the

462
00:20:15,299 --> 00:20:17,460
number of the screenshots taken reaches

463
00:20:17,460 --> 00:20:20,580
a hard-coded value the folder with the

464
00:20:20,580 --> 00:20:23,220
pictures is compressed in a zip archive

465
00:20:23,220 --> 00:20:26,460
and sent with a post request to an

466
00:20:26,460 --> 00:20:28,320
exfiltration server

467
00:20:28,320 --> 00:20:31,679
we saw various modifications of this uh

468
00:20:31,679 --> 00:20:33,539
as I already mentioned so some cases

469
00:20:33,539 --> 00:20:34,980
where the code for taking screenshots

470
00:20:34,980 --> 00:20:38,039
and the code for exfil trading them were

471
00:20:38,039 --> 00:20:41,280
you were placed in separate binaries

472
00:20:41,280 --> 00:20:44,520
key loggers polonium has used both

473
00:20:44,520 --> 00:20:47,220
custom and open source keyloggers

474
00:20:47,220 --> 00:20:50,520
uh in one of their custom key loggers

475
00:20:50,520 --> 00:20:52,679
um they were doing it by monitoring key

476
00:20:52,679 --> 00:20:55,559
keyboard input by hooking the set

477
00:20:55,559 --> 00:20:57,419
Windows hook X function

478
00:20:57,419 --> 00:21:00,480
and aside from keystrokes also clipboard

479
00:21:00,480 --> 00:21:03,720
contents were logged to a key file but

480
00:21:03,720 --> 00:21:06,240
other things like Windows titles or

481
00:21:06,240 --> 00:21:08,039
dates and times something that you

482
00:21:08,039 --> 00:21:10,200
typically see in other keyloggers were

483
00:21:10,200 --> 00:21:12,539
not logged in this one

484
00:21:12,539 --> 00:21:15,299
uh notice that both Hebrew and Arabic

485
00:21:15,299 --> 00:21:17,220
keyboards are supported by this custom

486
00:21:17,220 --> 00:21:19,679
keylogger

487
00:21:19,679 --> 00:21:21,780
we also saw that the group was using

488
00:21:21,780 --> 00:21:24,539
this open source c-sharp P logger and

489
00:21:24,539 --> 00:21:27,600
for this one uh it didn't handle Arabic

490
00:21:27,600 --> 00:21:30,439
or Hebrew input

491
00:21:31,440 --> 00:21:34,140
so we saw this one case where attackers

492
00:21:34,140 --> 00:21:36,900
used a simple module to take a snapshot

493
00:21:36,900 --> 00:21:38,820
from the webcam and save it to the temp

494
00:21:38,820 --> 00:21:41,940
folder on the slide you can see the code

495
00:21:41,940 --> 00:21:43,679
that's saving the frame from the video

496
00:21:43,679 --> 00:21:46,679
feed as an image and the module was also

497
00:21:46,679 --> 00:21:49,200
hiding in plain sight installed in

498
00:21:49,200 --> 00:21:52,080
program file slash default company name

499
00:21:52,080 --> 00:21:56,899
slash device one slash device exit

500
00:21:57,080 --> 00:22:00,419
and polonium has used a reverse shell

501
00:22:00,419 --> 00:22:03,720
module that communicates with a remote

502
00:22:03,720 --> 00:22:06,840
server using TCP so it works by starting

503
00:22:06,840 --> 00:22:09,000
command XE in a new process and

504
00:22:09,000 --> 00:22:11,400
redirects its input and output to a TCP

505
00:22:11,400 --> 00:22:14,280
socket and then the inputs received from

506
00:22:14,280 --> 00:22:17,039
the server are passed to the Shell as

507
00:22:17,039 --> 00:22:20,179
commands to execute

508
00:22:20,220 --> 00:22:22,260
and we mentioned that some modules

509
00:22:22,260 --> 00:22:23,880
separate the tasks of collecting

510
00:22:23,880 --> 00:22:25,500
information like the screenshots and

511
00:22:25,500 --> 00:22:27,780
keystroke logs and exfiltrating that

512
00:22:27,780 --> 00:22:30,000
information so in those cases the

513
00:22:30,000 --> 00:22:32,179
exfiltration modules are really trivial

514
00:22:32,179 --> 00:22:34,799
they would just take the compressed

515
00:22:34,799 --> 00:22:37,020
archives from one folder and send them

516
00:22:37,020 --> 00:22:39,480
to a remote server using either HTTP or

517
00:22:39,480 --> 00:22:40,559
FTP

518
00:22:40,559 --> 00:22:42,360
on the slide here you can see the code

519
00:22:42,360 --> 00:22:44,460
for one exfiltration module that's using

520
00:22:44,460 --> 00:22:47,400
uh 10 threads to send files to a remote

521
00:22:47,400 --> 00:22:50,159
server notice how the attackers named

522
00:22:50,159 --> 00:22:52,380
the method for uploading the files

523
00:22:52,380 --> 00:22:55,280
that's fun

524
00:22:56,340 --> 00:22:59,640
so to conclude our uh polonium modules

525
00:22:59,640 --> 00:23:03,360
overview we saw them using p-link which

526
00:23:03,360 --> 00:23:06,780
is putty link to create a tunnel from a

527
00:23:06,780 --> 00:23:09,059
compromise system to a remote server

528
00:23:09,059 --> 00:23:11,520
and on this slide you can see part of

529
00:23:11,520 --> 00:23:13,260
the code of the custom module that

530
00:23:13,260 --> 00:23:16,440
executes p-link in the command line and

531
00:23:16,440 --> 00:23:20,760
here's that command line decoded

532
00:23:23,340 --> 00:23:26,159
now a quick look at polonium's Network

533
00:23:26,159 --> 00:23:29,220
infrastructure so this really is just an

534
00:23:29,220 --> 00:23:31,620
overview to give you an idea no need to

535
00:23:31,620 --> 00:23:33,840
take pictures because we'll be releasing

536
00:23:33,840 --> 00:23:38,039
a blog post with the iocs uh soon uh so

537
00:23:38,039 --> 00:23:40,440
polonium didn't use domain names in any

538
00:23:40,440 --> 00:23:42,780
of the samples that we analyzed only IP

539
00:23:42,780 --> 00:23:44,100
addresses

540
00:23:44,100 --> 00:23:47,240
most of those servers are dedicated vpss

541
00:23:47,240 --> 00:23:50,460
likely purchased rather than compromised

542
00:23:50,460 --> 00:23:53,039
uh the table shows all the IP addresses

543
00:23:53,039 --> 00:23:55,200
that we've seen

544
00:23:55,200 --> 00:23:58,440
um as for the OneDrive Dropbox and mega

545
00:23:58,440 --> 00:24:01,380
accounts that were abused uh we reported

546
00:24:01,380 --> 00:24:04,380
those to the relevant vendors

547
00:24:04,380 --> 00:24:07,140
so wrapping up

548
00:24:07,140 --> 00:24:11,520
polonium is as you 've seen a very

549
00:24:11,520 --> 00:24:13,740
active threat actor with a vast arsenal

550
00:24:13,740 --> 00:24:16,380
of tools and is constantly modifying

551
00:24:16,380 --> 00:24:18,900
them and developing new ones I mean

552
00:24:18,900 --> 00:24:21,600
seven different custom backdoors in a

553
00:24:21,600 --> 00:24:25,260
relatively short time period is is a lot

554
00:24:25,260 --> 00:24:27,600
and we were able to successfully track

555
00:24:27,600 --> 00:24:29,460
their activity and hopefully this this

556
00:24:29,460 --> 00:24:31,500
overview of of all these all these

557
00:24:31,500 --> 00:24:33,840
modules and all the ttps that we've

558
00:24:33,840 --> 00:24:35,340
identified

559
00:24:35,340 --> 00:24:37,320
um can help you to track their activity

560
00:24:37,320 --> 00:24:38,600
as well

561
00:24:38,600 --> 00:24:41,400
now the intelligence and the public

562
00:24:41,400 --> 00:24:43,860
reports are them are really scarce and

563
00:24:43,860 --> 00:24:45,539
limited

564
00:24:45,539 --> 00:24:47,039
um and ask through the question who's

565
00:24:47,039 --> 00:24:50,039
behind it well Microsoft assessing their

566
00:24:50,039 --> 00:24:52,260
report that polonium is a group based in

567
00:24:52,260 --> 00:24:54,480
Lebanon whose activities may be

568
00:24:54,480 --> 00:24:57,240
coordinated with other actors affiliated

569
00:24:57,240 --> 00:24:59,940
with Iran's Ministry of intelligence or

570
00:24:59,940 --> 00:25:02,880
and security so mois

571
00:25:02,880 --> 00:25:05,280
um but we can't confirm that based on

572
00:25:05,280 --> 00:25:07,980
the activity that we observed

573
00:25:07,980 --> 00:25:11,039
what we did observe is that one specific

574
00:25:11,039 --> 00:25:14,000
Target of polonium was also targeted by

575
00:25:14,000 --> 00:25:16,919
apt-35 or charming kitten some months

576
00:25:16,919 --> 00:25:20,340
before now this could just be a

577
00:25:20,340 --> 00:25:22,500
coincidence or it could be an indication

578
00:25:22,500 --> 00:25:25,320
of possible cooperation or links between

579
00:25:25,320 --> 00:25:27,299
these groups

580
00:25:27,299 --> 00:25:29,640
and that's all we have for today

581
00:25:29,640 --> 00:25:31,679
um so thank you for listening if there

582
00:25:31,679 --> 00:25:34,679
was something that was not fully

583
00:25:34,679 --> 00:25:36,659
understood I'm happy to clarify that and

584
00:25:36,659 --> 00:25:39,659
for a more in-depth question I would

585
00:25:39,659 --> 00:25:42,120
divert those uh to the research author

586
00:25:42,120 --> 00:25:44,220
Matthias and here's our contact

587
00:25:44,220 --> 00:25:46,020
information in case you need to contact

588
00:25:46,020 --> 00:25:51,020
me or him and thanks for listening

589
00:25:52,220 --> 00:25:55,220
thank you

