1
00:00:03,240 --> 00:00:06,779
hello welcome to our talk uh in recent

2
00:00:06,779 --> 00:00:08,000
years

3
00:00:08,000 --> 00:00:12,360
Lazarus has become a regular Topic at

4
00:00:12,360 --> 00:00:14,759
not just virus bulletin but many other

5
00:00:14,759 --> 00:00:16,980
security conferences

6
00:00:16,980 --> 00:00:21,119
and we'd like to show you what's new and

7
00:00:21,119 --> 00:00:24,720
interesting around Lazarus recently

8
00:00:24,720 --> 00:00:27,720
so the outline of our talk is as follows

9
00:00:27,720 --> 00:00:31,260
we start with the story there was an

10
00:00:31,260 --> 00:00:34,260
attack by Lazarus where the key subject

11
00:00:34,260 --> 00:00:38,040
of our talk was involved and we

12
00:00:38,040 --> 00:00:40,980
described when and where did the attack

13
00:00:40,980 --> 00:00:44,399
happen and which tools were involved

14
00:00:44,399 --> 00:00:48,480
next we follow with demonstrations you

15
00:00:48,480 --> 00:00:50,340
will understand in a while what we mean

16
00:00:50,340 --> 00:00:54,059
by that and finally we conclude our talk

17
00:00:54,059 --> 00:00:56,879
with key takeaways

18
00:00:56,879 --> 00:00:59,280
so let's start with the story

19
00:00:59,280 --> 00:01:02,340
Lazarus attacked an aerospace company in

20
00:01:02,340 --> 00:01:05,400
the Netherlands in October 2021 with a

21
00:01:05,400 --> 00:01:08,400
new rootkit involved

22
00:01:08,400 --> 00:01:11,340
and the attack started as usual an

23
00:01:11,340 --> 00:01:13,799
employee of the company was conducted by

24
00:01:13,799 --> 00:01:16,320
these by the attackers through Linkedin

25
00:01:16,320 --> 00:01:20,520
messaging and got a job got a dream job

26
00:01:20,520 --> 00:01:24,840
offer so the communication continued in

27
00:01:24,840 --> 00:01:27,600
email he received a malicious email with

28
00:01:27,600 --> 00:01:31,560
attachment an Amazon themed document and

29
00:01:31,560 --> 00:01:34,080
after opening this document

30
00:01:34,080 --> 00:01:37,799
the victim compromised uh its endpoint

31
00:01:37,799 --> 00:01:40,740
afterwards the attackers Lazarus

32
00:01:40,740 --> 00:01:43,759
attackers started to deploy their tools

33
00:01:43,759 --> 00:01:47,299
as we used from the past they used

34
00:01:47,299 --> 00:01:50,640
multi-stage chains to deploy their

35
00:01:50,640 --> 00:01:52,740
payloads starting with droppers and

36
00:01:52,740 --> 00:01:55,799
intermediate loaders in order to avoid

37
00:01:55,799 --> 00:01:57,439
detection

38
00:01:57,439 --> 00:02:00,600
and the final payloads that were loaded

39
00:02:00,600 --> 00:02:03,180
in this case were this one

40
00:02:03,180 --> 00:02:04,939
blinding can

41
00:02:04,939 --> 00:02:08,459
the flagship remote access tool used by

42
00:02:08,459 --> 00:02:10,318
Lazarus

43
00:02:10,318 --> 00:02:14,760
next https uploader a custom tool a

44
00:02:14,760 --> 00:02:15,800
custom

45
00:02:15,800 --> 00:02:19,620
uh little tool that is able to leak

46
00:02:19,620 --> 00:02:22,020
sensitive data in high volumes from

47
00:02:22,020 --> 00:02:25,020
victim's computer and finally some

48
00:02:25,020 --> 00:02:28,680
generic https downloader that is able to

49
00:02:28,680 --> 00:02:30,780
bring additional tools onto the victim's

50
00:02:30,780 --> 00:02:32,959
system

51
00:02:33,180 --> 00:02:36,720
today we are releasing a blog post

52
00:02:36,720 --> 00:02:39,560
that describes all the technical details

53
00:02:39,560 --> 00:02:44,459
about these tools about attribution and

54
00:02:44,459 --> 00:02:47,760
links to other Lazarus campaigns

55
00:02:47,760 --> 00:02:50,400
but at this talk we would like to focus

56
00:02:50,400 --> 00:02:52,500
on something else

57
00:02:52,500 --> 00:02:56,220
let me introduce to Fat module it's a

58
00:02:56,220 --> 00:02:58,680
dynamically linked to dll

59
00:02:58,680 --> 00:03:01,920
of roughly 88 kilobytes it's not that

60
00:03:01,920 --> 00:03:04,800
big but to be honest we spent

61
00:03:04,800 --> 00:03:07,500
it was all new for us and we spent weeks

62
00:03:07,500 --> 00:03:11,159
even months analyzing these 88 kilobytes

63
00:03:11,159 --> 00:03:14,040
of code and data

64
00:03:14,040 --> 00:03:16,800
and the Press process where we

65
00:03:16,800 --> 00:03:22,019
identified this dll was MSI exec.exe of

66
00:03:22,019 --> 00:03:24,420
unknown Integrity but definitely

67
00:03:24,420 --> 00:03:27,239
administrator rights are required for

68
00:03:27,239 --> 00:03:30,120
proper functioning of fat module

69
00:03:30,120 --> 00:03:33,739
and it has one export close

70
00:03:34,459 --> 00:03:37,980
uh interestingly it contains an embedded

71
00:03:37,980 --> 00:03:41,940
legitimate sign driver by Dell

72
00:03:41,940 --> 00:03:45,060
and unfortunately this driver contains a

73
00:03:45,060 --> 00:03:48,239
vulnerability uh and so the the

74
00:03:48,239 --> 00:03:50,400
terminology has assigned this CV number

75
00:03:50,400 --> 00:03:52,319
it's from 2021

76
00:03:52,319 --> 00:03:54,840
and this is so called bring your own

77
00:03:54,840 --> 00:03:57,180
vulnerable driver technique uh and we

78
00:03:57,180 --> 00:04:01,680
refer to it in the title of our talk

79
00:04:01,680 --> 00:04:04,500
and exploiting this vulnerability fat

80
00:04:04,500 --> 00:04:08,340
module becomes a user mode module that

81
00:04:08,340 --> 00:04:10,439
is able to modify arbitrary kernel

82
00:04:10,439 --> 00:04:11,580
memory

83
00:04:11,580 --> 00:04:16,199
and why does fat module want to do that

84
00:04:16,199 --> 00:04:19,199
in order to turn off Windows system

85
00:04:19,199 --> 00:04:20,639
monitoring

86
00:04:20,639 --> 00:04:24,060
and this is why we add to the title evil

87
00:04:24,060 --> 00:04:27,080
to the windows core

88
00:04:27,840 --> 00:04:29,639
the installation of fat model is as

89
00:04:29,639 --> 00:04:31,740
follows initially it drops the

90
00:04:31,740 --> 00:04:33,479
vulnerable driver into the corresponding

91
00:04:33,479 --> 00:04:36,419
folder this is the operation that it

92
00:04:36,419 --> 00:04:38,940
requires administrator rights

93
00:04:38,940 --> 00:04:41,040
then it calls device I'll control with a

94
00:04:41,040 --> 00:04:44,520
specific code that triggers the exploit

95
00:04:44,520 --> 00:04:47,400
and a specifically crafted buffer of 32

96
00:04:47,400 --> 00:04:48,860
bytes

97
00:04:48,860 --> 00:04:50,840
oh where

98
00:04:50,840 --> 00:04:53,160
one significant

99
00:04:53,160 --> 00:04:57,300
bit is flipped in the kernel memory and

100
00:04:57,300 --> 00:04:59,900
what this bit represents

101
00:04:59,900 --> 00:05:04,440
uh it represents the status of the

102
00:05:04,440 --> 00:05:07,259
threads where fat modules is running and

103
00:05:07,259 --> 00:05:08,880
after this change

104
00:05:08,880 --> 00:05:12,780
Windows treats flood module as running

105
00:05:12,780 --> 00:05:14,699
in the kernel space

106
00:05:14,699 --> 00:05:17,820
therefore all costs of anti-ride virtual

107
00:05:17,820 --> 00:05:19,639
memory

108
00:05:19,639 --> 00:05:22,520
from kernel space or to Kernel space

109
00:05:22,520 --> 00:05:26,240
proceed successfully

110
00:05:27,300 --> 00:05:29,759
and this is an overview of the close

111
00:05:29,759 --> 00:05:33,120
export the first the the initial lines

112
00:05:33,120 --> 00:05:36,419
are just the installation and set up of

113
00:05:36,419 --> 00:05:38,400
mother configuration

114
00:05:38,400 --> 00:05:40,740
and highlighted in red are seven

115
00:05:40,740 --> 00:05:44,160
procedures and these procedures are

116
00:05:44,160 --> 00:05:47,699
related to various Windows Concepts

117
00:05:47,699 --> 00:05:50,580
mechanisms and that are related to

118
00:05:50,580 --> 00:05:53,280
system monitoring and in what follows we

119
00:05:53,280 --> 00:05:55,560
try to demonstrate the functionality of

120
00:05:55,560 --> 00:05:58,460
these Southern calls

121
00:05:58,460 --> 00:06:01,919
when we ask ourselves how to design our

122
00:06:01,919 --> 00:06:03,680
presentation

123
00:06:03,680 --> 00:06:07,259
of we we consider these things there are

124
00:06:07,259 --> 00:06:08,699
very low level

125
00:06:08,699 --> 00:06:11,639
core color variables involved like

126
00:06:11,639 --> 00:06:14,600
kernel structures pointers variables

127
00:06:14,600 --> 00:06:18,660
Behind These mechanisms and by reversing

128
00:06:18,660 --> 00:06:21,300
fat module we learned the exact method

129
00:06:21,300 --> 00:06:24,180
how fat module locates these structures

130
00:06:24,180 --> 00:06:27,360
and how it modifies them

131
00:06:27,360 --> 00:06:29,880
and they put all these details into the

132
00:06:29,880 --> 00:06:31,440
paper

133
00:06:31,440 --> 00:06:33,720
but in this presentation we would like

134
00:06:33,720 --> 00:06:35,880
to show high level perspective

135
00:06:35,880 --> 00:06:39,720
we choose a software that leverages such

136
00:06:39,720 --> 00:06:42,720
mechanism for example process monitor or

137
00:06:42,720 --> 00:06:45,120
various sample drivers offered by

138
00:06:45,120 --> 00:06:49,039
Microsoft in order to learn in order to

139
00:06:49,039 --> 00:06:52,319
let kernel developers learn various

140
00:06:52,319 --> 00:06:54,300
Windows Concepts Microsoft publishes

141
00:06:54,300 --> 00:06:57,660
openly a collection of sample drivers on

142
00:06:57,660 --> 00:06:59,160
their GitHub account

143
00:06:59,160 --> 00:07:02,460
so we pick some of those examples and

144
00:07:02,460 --> 00:07:04,319
show how fat module

145
00:07:04,319 --> 00:07:07,259
disables them blinds them like turns

146
00:07:07,259 --> 00:07:09,620
them off

147
00:07:10,020 --> 00:07:12,740
so let's start with the first mechanism

148
00:07:12,740 --> 00:07:15,300
registry callbacks

149
00:07:15,300 --> 00:07:19,199
uh these are basically notifications uh

150
00:07:19,199 --> 00:07:23,000
provided by by windows to third-party

151
00:07:23,000 --> 00:07:27,240
drivers in case of events related to

152
00:07:27,240 --> 00:07:28,680
registry

153
00:07:28,680 --> 00:07:31,800
and so the numbering here the hexade

154
00:07:31,800 --> 00:07:33,500
decimal one

155
00:07:33,500 --> 00:07:35,759
represents the position

156
00:07:35,759 --> 00:07:39,120
of this mechanism in a bit field that is

157
00:07:39,120 --> 00:07:42,720
returned to the attackers and represents

158
00:07:42,720 --> 00:07:45,539
the overall success of fat modules

159
00:07:45,539 --> 00:07:48,199
execution

160
00:07:48,720 --> 00:07:53,400
this is a screenshot of process monitor

161
00:07:53,400 --> 00:07:57,120
everything is filtered out except events

162
00:07:57,120 --> 00:07:58,440
related

163
00:07:58,440 --> 00:08:01,259
to registry event class

164
00:08:01,259 --> 00:08:06,240
you can see this icon is turned on all

165
00:08:06,240 --> 00:08:10,199
the other icons are turned off moreover

166
00:08:10,199 --> 00:08:12,660
we restrict our attention only to rec

167
00:08:12,660 --> 00:08:17,220
edits because not to have that many that

168
00:08:17,220 --> 00:08:21,840
noisy output so only Rec edits is

169
00:08:21,840 --> 00:08:24,960
displayed here and this is a normal

170
00:08:24,960 --> 00:08:30,198
activity recorded in process monitor

171
00:08:30,479 --> 00:08:33,179
after running fat module

172
00:08:33,179 --> 00:08:36,179
everything disappears or nothing is

173
00:08:36,179 --> 00:08:39,299
recorded the front picture

174
00:08:39,299 --> 00:08:43,080
just shows that the filter is correct we

175
00:08:43,080 --> 00:08:46,500
are including Rec edit registry events

176
00:08:46,500 --> 00:08:50,540
but nothing is displayed because

177
00:08:50,540 --> 00:08:54,540
registry callbacks were wiped by flood

178
00:08:54,540 --> 00:08:56,899
module

179
00:08:57,360 --> 00:09:00,540
let's move to the second mechanism

180
00:09:00,540 --> 00:09:03,240
object callbacks there's a sample driver

181
00:09:03,240 --> 00:09:05,940
in that Microsoft's collection that is

182
00:09:05,940 --> 00:09:07,860
related to this concept

183
00:09:07,860 --> 00:09:11,959
you are able to

184
00:09:12,000 --> 00:09:14,820
prevent a process from creation or

185
00:09:14,820 --> 00:09:16,260
termination

186
00:09:16,260 --> 00:09:20,880
and we chose notepad exe to be prevented

187
00:09:20,880 --> 00:09:22,680
from termination

188
00:09:22,680 --> 00:09:25,500
you can see that we have one instance of

189
00:09:25,500 --> 00:09:27,540
notepad running

190
00:09:27,540 --> 00:09:30,779
and when we try to kill it

191
00:09:30,779 --> 00:09:33,540
we receive an error access is denied

192
00:09:33,540 --> 00:09:37,019
because the sample driver protects that

193
00:09:37,019 --> 00:09:39,480
process from the kernel

194
00:09:39,480 --> 00:09:42,560
after running fat module this protection

195
00:09:42,560 --> 00:09:46,500
is over and we are able to kill notepad

196
00:09:46,500 --> 00:09:47,880
easily

197
00:09:47,880 --> 00:09:52,019
and we can imagine that uh this uh this

198
00:09:52,019 --> 00:09:53,640
option of

199
00:09:53,640 --> 00:09:55,740
preventing process from being created or

200
00:09:55,740 --> 00:09:58,680
terminated is a feature that could be a

201
00:09:58,680 --> 00:10:01,500
regular part of a security solution it's

202
00:10:01,500 --> 00:10:04,200
uh like Security Solutions prevents

203
00:10:04,200 --> 00:10:08,160
their uninstallation or

204
00:10:08,160 --> 00:10:10,800
um healing those processes so this is

205
00:10:10,800 --> 00:10:13,440
related to security solution

206
00:10:13,440 --> 00:10:15,180
products

207
00:10:15,180 --> 00:10:17,940
or it could be very likely

208
00:10:17,940 --> 00:10:20,820
let's move to the next mechanism process

209
00:10:20,820 --> 00:10:24,120
threat and image callbacks

210
00:10:24,120 --> 00:10:27,720
again let's test that with process

211
00:10:27,720 --> 00:10:31,200
monitor like previously all events are

212
00:10:31,200 --> 00:10:33,660
filtered out except

213
00:10:33,660 --> 00:10:36,240
process event class

214
00:10:36,240 --> 00:10:39,720
moreover we restrict our retention

215
00:10:39,720 --> 00:10:41,540
only to

216
00:10:41,540 --> 00:10:45,540
notepad.exe not to have too noisy output

217
00:10:45,540 --> 00:10:48,540
and after running Cloud module what

218
00:10:48,540 --> 00:10:49,740
would you expect

219
00:10:49,740 --> 00:10:53,100
yes no output there

220
00:10:53,100 --> 00:10:55,260
and the front picture just shows that

221
00:10:55,260 --> 00:10:58,500
our filter is correct and includes

222
00:10:58,500 --> 00:11:02,339
notepads within process even class

223
00:11:02,339 --> 00:11:05,940
and there is no output there regardless

224
00:11:05,940 --> 00:11:09,480
of how hard we are trying to open and

225
00:11:09,480 --> 00:11:11,880
close instances of notepad in the

226
00:11:11,880 --> 00:11:14,880
background I forgot to say this in the

227
00:11:14,880 --> 00:11:17,519
previous example we've got no outputs

228
00:11:17,519 --> 00:11:20,519
regardless what we were trying to

229
00:11:20,519 --> 00:11:24,200
open create modify delete registry

230
00:11:24,200 --> 00:11:29,300
keys in regarded in the previous example

231
00:11:29,940 --> 00:11:33,839
and now it's a time for mate to deliver

232
00:11:33,839 --> 00:11:36,740
his part

233
00:11:38,519 --> 00:11:39,839
hello everyone

234
00:11:39,839 --> 00:11:42,720
my name is and I am a malware Analyst at

235
00:11:42,720 --> 00:11:45,060
ESET research I have worked with Peter

236
00:11:45,060 --> 00:11:46,620
on researching this Lazarus campaign

237
00:11:46,620 --> 00:11:49,200
during the last year unfortunately I am

238
00:11:49,200 --> 00:11:50,700
not able to attend this year's virus

239
00:11:50,700 --> 00:11:52,680
bulletin in person so I hope you won't

240
00:11:52,680 --> 00:11:54,779
mind me presenting on video

241
00:11:54,779 --> 00:11:56,760
after Peter's explanation of how the

242
00:11:56,760 --> 00:11:58,740
module disables callbacks let's look at

243
00:11:58,740 --> 00:12:01,019
how the malware unhooks many filters

244
00:12:01,019 --> 00:12:02,579
many filters are a lightweight

245
00:12:02,579 --> 00:12:04,079
alternative to Legacy file system

246
00:12:04,079 --> 00:12:06,420
drivers used to track file activity

247
00:12:06,420 --> 00:12:08,459
they are very often used by EDR or

248
00:12:08,459 --> 00:12:10,380
anti-malware software to monitor what is

249
00:12:10,380 --> 00:12:12,180
going on in the file system

250
00:12:12,180 --> 00:12:13,980
the far module accesses the mini filter

251
00:12:13,980 --> 00:12:15,959
information structures in memory and

252
00:12:15,959 --> 00:12:17,459
iterates over all registered mini

253
00:12:17,459 --> 00:12:19,500
filters skipping white listed drivers

254
00:12:19,500 --> 00:12:21,420
the white list consists of several

255
00:12:21,420 --> 00:12:23,160
Windows drivers which are crucial to

256
00:12:23,160 --> 00:12:25,079
system stability and need to have access

257
00:12:25,079 --> 00:12:27,000
to these monitoring features

258
00:12:27,000 --> 00:12:29,160
for any other mini filters it discovers

259
00:12:29,160 --> 00:12:31,320
it identifies their Handler functions

260
00:12:31,320 --> 00:12:33,240
and modifies their prologues to make

261
00:12:33,240 --> 00:12:35,220
them immediately exit without processing

262
00:12:35,220 --> 00:12:36,420
any data

263
00:12:36,420 --> 00:12:38,279
modifying chronological code of other

264
00:12:38,279 --> 00:12:40,019
programs at runtime is a very risk

265
00:12:40,019 --> 00:12:41,700
operation that isn't often seen in the

266
00:12:41,700 --> 00:12:42,420
wild

267
00:12:42,420 --> 00:12:44,160
there is a lot of assumption going into

268
00:12:44,160 --> 00:12:46,500
this and unexpected changes in the OS

269
00:12:46,500 --> 00:12:48,060
configuration may lead to this method

270
00:12:48,060 --> 00:12:50,399
causing system instability

271
00:12:50,399 --> 00:12:52,079
here you can see the modification done

272
00:12:52,079 --> 00:12:54,180
to the scanner postcreate function of a

273
00:12:54,180 --> 00:12:55,800
file system monitoring driver that we

274
00:12:55,800 --> 00:12:57,120
used in our testing

275
00:12:57,120 --> 00:12:58,740
on the left there is the original

276
00:12:58,740 --> 00:13:01,320
function code on the right there is the

277
00:13:01,320 --> 00:13:02,639
patched version which immediately

278
00:13:02,639 --> 00:13:05,040
returns 0 and exits

279
00:13:05,040 --> 00:13:07,079
it also attempts to remove the post call

280
00:13:07,079 --> 00:13:09,240
hook for a number of IRP routines such

281
00:13:09,240 --> 00:13:10,980
as create write or system control

282
00:13:10,980 --> 00:13:12,959
further blocking access to information

283
00:13:12,959 --> 00:13:16,500
coming from the lowest levels of the OS

284
00:13:16,500 --> 00:13:18,600
instead of using real malware we

285
00:13:18,600 --> 00:13:20,040
demonstrate this on the industry

286
00:13:20,040 --> 00:13:22,019
standard antivirus test file the icar

287
00:13:22,019 --> 00:13:23,940
file using Microsoft's file system

288
00:13:23,940 --> 00:13:25,980
scanner mini filter the mini filter

289
00:13:25,980 --> 00:13:27,420
consists of a kernel mode driver

290
00:13:27,420 --> 00:13:29,820
intercepting file system operations and

291
00:13:29,820 --> 00:13:31,800
a user mode program doing the scanning

292
00:13:31,800 --> 00:13:33,899
as we can see on the left side when we

293
00:13:33,899 --> 00:13:35,459
attempt to access this file in a clean

294
00:13:35,459 --> 00:13:37,800
system the scan user driver intercepts

295
00:13:37,800 --> 00:13:39,779
the file read request inspects the file

296
00:13:39,779 --> 00:13:42,480
identifies it as malicious and blocks

297
00:13:42,480 --> 00:13:44,519
the excess the save to open value is 0

298
00:13:44,519 --> 00:13:46,860
meaning the file was deemed unsafe

299
00:13:46,860 --> 00:13:48,420
after running the full module and

300
00:13:48,420 --> 00:13:50,639
repeating this action we can observe the

301
00:13:50,639 --> 00:13:52,440
result on the right the file opens

302
00:13:52,440 --> 00:13:54,720
normally the saved open value is 1 and

303
00:13:54,720 --> 00:13:56,459
the file is considered safe

304
00:13:56,459 --> 00:13:58,620
the scan user driver did not report any

305
00:13:58,620 --> 00:14:00,120
file system activity to the user mode

306
00:14:00,120 --> 00:14:03,959
component so it wasn't able to scan it

307
00:14:03,959 --> 00:14:06,000
the next technique is disabling the

308
00:14:06,000 --> 00:14:08,459
Windows filtering platform callouts the

309
00:14:08,459 --> 00:14:10,260
Windows filtering platform is an API

310
00:14:10,260 --> 00:14:11,519
that provides access to network

311
00:14:11,519 --> 00:14:13,920
communication on the packet level it is

312
00:14:13,920 --> 00:14:15,600
used among others by Network filtering

313
00:14:15,600 --> 00:14:17,579
applications such as firewalls host

314
00:14:17,579 --> 00:14:19,560
intrusion prevention systems and EDR

315
00:14:19,560 --> 00:14:21,540
products to inspect incoming and

316
00:14:21,540 --> 00:14:24,240
outgoing traffic and detect animals here

317
00:14:24,240 --> 00:14:26,040
on the left you can see the contents of

318
00:14:26,040 --> 00:14:27,839
the callout structure the malware

319
00:14:27,839 --> 00:14:29,880
iterates through all enabled filters and

320
00:14:29,880 --> 00:14:31,800
their callout structures and attempts to

321
00:14:31,800 --> 00:14:34,200
modify the flags field we wanted to test

322
00:14:34,200 --> 00:14:35,760
if this modification would be able to

323
00:14:35,760 --> 00:14:38,160
disable a very simple firewall we found

324
00:14:38,160 --> 00:14:41,639
a minimalistic TCP and UDP firewall we

325
00:14:41,639 --> 00:14:43,440
customized it to block any traffic that

326
00:14:43,440 --> 00:14:45,839
contains the icar test file and on top

327
00:14:45,839 --> 00:14:47,699
of the screen we can see the filter in

328
00:14:47,699 --> 00:14:48,540
action

329
00:14:48,540 --> 00:14:50,639
letting legitimate traffic through and

330
00:14:50,639 --> 00:14:53,339
blocking the icar test file on the left

331
00:14:53,339 --> 00:14:55,199
side is the server on the right side is

332
00:14:55,199 --> 00:14:57,959
the client however in our testing this

333
00:14:57,959 --> 00:14:59,519
modification had no impact on the

334
00:14:59,519 --> 00:15:01,380
ability of Windows filtering platform

335
00:15:01,380 --> 00:15:03,000
drivers to access and inspect network

336
00:15:03,000 --> 00:15:04,399
activity

337
00:15:04,399 --> 00:15:06,839
it seems that it requires some specific

338
00:15:06,839 --> 00:15:08,399
conditions that we weren't able to

339
00:15:08,399 --> 00:15:09,540
reproduce

340
00:15:09,540 --> 00:15:11,519
it is possible that this method targets

341
00:15:11,519 --> 00:15:14,040
some specific EDR system or is still

342
00:15:14,040 --> 00:15:15,720
being developed and what we've seen

343
00:15:15,720 --> 00:15:18,240
wasn't the final mechanism

344
00:15:18,240 --> 00:15:21,300
the flag bit at 0x20 is used to disable

345
00:15:21,300 --> 00:15:23,940
Windows Event tracing event tracing for

346
00:15:23,940 --> 00:15:25,800
Windows is a kernel level tracing model

347
00:15:25,800 --> 00:15:28,079
that enables tracing and logging of both

348
00:15:28,079 --> 00:15:30,540
user mode and kernel mode events it can

349
00:15:30,540 --> 00:15:32,339
deal with both real-time events and log

350
00:15:32,339 --> 00:15:34,980
files on this screenshot you can see how

351
00:15:34,980 --> 00:15:36,540
event handlers are registered with event

352
00:15:36,540 --> 00:15:38,279
providers

353
00:15:38,279 --> 00:15:40,199
the third module enumerates all Windows

354
00:15:40,199 --> 00:15:42,300
Event tracing providers finds the

355
00:15:42,300 --> 00:15:44,100
handles of registered callbacks and

356
00:15:44,100 --> 00:15:46,620
replaces their addresses with zeros this

357
00:15:46,620 --> 00:15:48,120
means that non-white listed applications

358
00:15:48,120 --> 00:15:50,220
lose access to event tracing callbacks

359
00:15:50,220 --> 00:15:52,139
and will not be notified of any new

360
00:15:52,139 --> 00:15:53,160
events

361
00:15:53,160 --> 00:15:55,199
we weren't able to design a simple

362
00:15:55,199 --> 00:15:56,820
example that would demonstrate the role

363
00:15:56,820 --> 00:15:58,500
of event tracing in system monitoring

364
00:15:58,500 --> 00:16:00,959
however we strongly believe that there

365
00:16:00,959 --> 00:16:03,480
are edrs and other monitoring tools that

366
00:16:03,480 --> 00:16:05,040
utilize this method as part of their

367
00:16:05,040 --> 00:16:07,019
functionality and disabling it is

368
00:16:07,019 --> 00:16:10,380
beneficial for the mobile offers

369
00:16:10,380 --> 00:16:12,440
last on the list are prefetch files

370
00:16:12,440 --> 00:16:14,880
prefetch files serve as a cache for file

371
00:16:14,880 --> 00:16:17,100
metadata speeding up the load times for

372
00:16:17,100 --> 00:16:19,380
process creation it is possible to

373
00:16:19,380 --> 00:16:21,060
register a so-called prefetch Trace

374
00:16:21,060 --> 00:16:22,620
callback from a third-party program

375
00:16:22,620 --> 00:16:24,839
which will provide access to prefixed

376
00:16:24,839 --> 00:16:27,420
data there is a kernel variable called

377
00:16:27,420 --> 00:16:30,360
PFS and non-active traces that contains

378
00:16:30,360 --> 00:16:32,880
the number of active prefetch traces an

379
00:16:32,880 --> 00:16:34,500
interesting fact is that even though

380
00:16:34,500 --> 00:16:36,240
this variable exists with this name in

381
00:16:36,240 --> 00:16:38,339
Microsoft's pdb files it is not

382
00:16:38,339 --> 00:16:39,959
documented and there is nothing to be

383
00:16:39,959 --> 00:16:41,759
found about it on the internet

384
00:16:41,759 --> 00:16:44,100
it seems that until now nobody thought

385
00:16:44,100 --> 00:16:46,500
it was particularly important

386
00:16:46,500 --> 00:16:48,480
there is also an undocumented and

387
00:16:48,480 --> 00:16:50,339
unnamed kernel variable containing the

388
00:16:50,339 --> 00:16:52,019
maximum number of active traces for

389
00:16:52,019 --> 00:16:54,180
tracing to still be performed which we

390
00:16:54,180 --> 00:16:56,100
internally named trace this threshold as

391
00:16:56,100 --> 00:16:58,920
you can see here on line 16. as we can

392
00:16:58,920 --> 00:17:00,660
see in this image if the number of

393
00:17:00,660 --> 00:17:02,279
current Collective traces is bigger than

394
00:17:02,279 --> 00:17:04,020
this threshold the tracing Handler

395
00:17:04,020 --> 00:17:06,179
method of the OS will exit prematurely

396
00:17:06,179 --> 00:17:08,099
with the error value too many sessions

397
00:17:08,099 --> 00:17:09,900
and the prefetch info will not be

398
00:17:09,900 --> 00:17:11,160
propagated

399
00:17:11,160 --> 00:17:13,559
the malware sets the BFS and num active

400
00:17:13,559 --> 00:17:16,459
traces value to 0xff

401
00:17:16,459 --> 00:17:19,020
which is a high enough value to disable

402
00:17:19,020 --> 00:17:21,000
any prefetch tracing by making the OS

403
00:17:21,000 --> 00:17:22,740
thing that there are already too many

404
00:17:22,740 --> 00:17:24,119
active traces

405
00:17:24,119 --> 00:17:26,760
we tested this method against nearsoft's

406
00:17:26,760 --> 00:17:29,040
win prefetch view which relies on prefet

407
00:17:29,040 --> 00:17:31,799
tracing to provide us with information

408
00:17:31,799 --> 00:17:34,200
in the first test we run it on a clean

409
00:17:34,200 --> 00:17:36,539
system executed several programs such as

410
00:17:36,539 --> 00:17:38,760
calculator or notepad and observed lots

411
00:17:38,760 --> 00:17:41,400
of prefetch logs in the lower part we

412
00:17:41,400 --> 00:17:42,960
can see the result of the same actions

413
00:17:42,960 --> 00:17:45,660
on a system with far module active no

414
00:17:45,660 --> 00:17:47,700
privilege data could be accessed

415
00:17:47,700 --> 00:17:49,440
in addition to blocking some inspection

416
00:17:49,440 --> 00:17:51,840
tools removal of prefetch data also

417
00:17:51,840 --> 00:17:53,940
makes any forensic analysis of infected

418
00:17:53,940 --> 00:17:55,620
machines much harder

419
00:17:55,620 --> 00:17:58,080
as far as we are aware this is a brand

420
00:17:58,080 --> 00:17:59,820
new technique that was not observed in

421
00:17:59,820 --> 00:18:01,679
the while before and we might see it

422
00:18:01,679 --> 00:18:03,299
used more often now that it is being

423
00:18:03,299 --> 00:18:05,580
publicized

424
00:18:05,580 --> 00:18:07,500
this is all as far as the individual

425
00:18:07,500 --> 00:18:09,299
blinding techniques are concerned and

426
00:18:09,299 --> 00:18:11,520
also all from me thank you all for your

427
00:18:11,520 --> 00:18:13,260
attention and allow me to give the floor

428
00:18:13,260 --> 00:18:15,059
back to Peter

429
00:18:15,059 --> 00:18:20,280
yeah so let's continue with our talk

430
00:18:20,280 --> 00:18:24,900
um there was a talk at criticon 2019 uh

431
00:18:24,900 --> 00:18:28,440
where Christopher Vela was reversing and

432
00:18:28,440 --> 00:18:30,600
bypassing edrs

433
00:18:30,600 --> 00:18:34,020
and he said this on self-protection of

434
00:18:34,020 --> 00:18:37,320
edrs EDR is very compiled with as much

435
00:18:37,320 --> 00:18:39,960
Focus around security as an entity

436
00:18:39,960 --> 00:18:41,280
driver

437
00:18:41,280 --> 00:18:45,000
and he offered a comparison on one hand

438
00:18:45,000 --> 00:18:48,600
we have uh anti-cheat drivers with

439
00:18:48,600 --> 00:18:51,720
plenty of anti-malware and anti-deback

440
00:18:51,720 --> 00:18:54,440
techniques and virtualized code running

441
00:18:54,440 --> 00:18:57,600
and even experienced reverse Engineers

442
00:18:57,600 --> 00:19:00,600
struggle with the analysis

443
00:19:00,600 --> 00:19:04,740
and on the other hand he had these edrs

444
00:19:04,740 --> 00:19:07,620
that he reversed and there was no

445
00:19:07,620 --> 00:19:11,220
obfuscation no anti-analysis even

446
00:19:11,220 --> 00:19:13,799
debug prints explaining what's going on

447
00:19:13,799 --> 00:19:15,480
in the code

448
00:19:15,480 --> 00:19:18,360
and the complexity of the anti-cheat

449
00:19:18,360 --> 00:19:20,640
drivers is obvious there's a

450
00:19:20,640 --> 00:19:22,100
long-standing battle

451
00:19:22,100 --> 00:19:25,919
cat and mouse game between game hackers

452
00:19:25,919 --> 00:19:28,580
and anti-cheat Developers

453
00:19:28,580 --> 00:19:31,200
so the complexity is a natural

454
00:19:31,200 --> 00:19:34,559
consequence of such battle

455
00:19:34,559 --> 00:19:37,140
it seems there's nothing similar in the

456
00:19:37,140 --> 00:19:40,860
world of edrs and between edr's

457
00:19:40,860 --> 00:19:44,520
developers and malware authors

458
00:19:44,520 --> 00:19:47,720
up until now

459
00:19:47,720 --> 00:19:51,480
and uh perhaps the Simplicity of EDR

460
00:19:51,480 --> 00:19:54,720
drivers and the lack of self-protection

461
00:19:54,720 --> 00:19:56,640
was the main reason

462
00:19:56,640 --> 00:20:00,600
why Lazarus developers were able to

463
00:20:00,600 --> 00:20:01,620
develop

464
00:20:01,620 --> 00:20:04,440
third module

465
00:20:04,440 --> 00:20:08,539
so let's move to the conclusion

466
00:20:09,539 --> 00:20:12,900
Lazarus is capable of a complex process

467
00:20:12,900 --> 00:20:15,059
of research

468
00:20:15,059 --> 00:20:17,460
actually they really did their homework

469
00:20:17,460 --> 00:20:20,220
they were able to identify a little

470
00:20:20,220 --> 00:20:23,340
documented features of Windows operating

471
00:20:23,340 --> 00:20:27,660
system and find out the mechanisms

472
00:20:27,660 --> 00:20:30,539
behind uh interesting that were

473
00:20:30,539 --> 00:20:33,240
interesting for them to uh like to

474
00:20:33,240 --> 00:20:35,160
disable Windows monitoring

475
00:20:35,160 --> 00:20:37,740
moreover there is a wide range of

476
00:20:37,740 --> 00:20:41,220
Windows variants supported by fat module

477
00:20:41,220 --> 00:20:45,200
since Windows 7.1 up to the most recent

478
00:20:45,200 --> 00:20:47,280
variance of

479
00:20:47,280 --> 00:20:51,360
windows and uh it will we believe it was

480
00:20:51,360 --> 00:20:53,220
really time consuming because the

481
00:20:53,220 --> 00:20:55,440
location of crucial kernel components

482
00:20:55,440 --> 00:20:58,380
kernel data changes from one version to

483
00:20:58,380 --> 00:21:01,140
another so they really had to take a

484
00:21:01,140 --> 00:21:05,600
look on all variants of windows

485
00:21:06,840 --> 00:21:09,240
capable of development because fat

486
00:21:09,240 --> 00:21:11,160
module is not a project that you can

487
00:21:11,160 --> 00:21:13,559
clone from a repository somewhere on the

488
00:21:13,559 --> 00:21:15,780
Internet it's built from scratch

489
00:21:15,780 --> 00:21:19,620
and in it involves techniques that very

490
00:21:19,620 --> 00:21:22,220
likely only experts in Windows internals

491
00:21:22,220 --> 00:21:25,020
could develop

492
00:21:25,020 --> 00:21:28,320
and finally testing we didn't experience

493
00:21:28,320 --> 00:21:30,600
any problems during our analysis and

494
00:21:30,600 --> 00:21:32,580
debugging of fat module

495
00:21:32,580 --> 00:21:36,600
moreover when Lazarus finally gets

496
00:21:36,600 --> 00:21:38,700
foothold in the network of their

497
00:21:38,700 --> 00:21:39,900
interests

498
00:21:39,900 --> 00:21:42,720
I believe they wouldn't risk to deploy

499
00:21:42,720 --> 00:21:44,940
an unstable tool

500
00:21:44,940 --> 00:21:47,880
and cause blue screen of death on the

501
00:21:47,880 --> 00:21:50,220
victim's machine

502
00:21:50,220 --> 00:21:52,740
so from our perspective Lazarus is

503
00:21:52,740 --> 00:21:54,960
really a sophistic sophisticated thread

504
00:21:54,960 --> 00:21:57,200
actor

505
00:21:57,480 --> 00:22:00,659
many live monitoring tools may have been

506
00:22:00,659 --> 00:22:03,840
affected and are affected may like it's

507
00:22:03,840 --> 00:22:06,480
it's very likely that they are edrs

508
00:22:06,480 --> 00:22:09,120
Fireballs heapsis anti-malware

509
00:22:09,120 --> 00:22:12,120
if you are a developer of such products

510
00:22:12,120 --> 00:22:14,640
especially of Kernel components

511
00:22:14,640 --> 00:22:18,000
please take a look at what flood module

512
00:22:18,000 --> 00:22:20,419
does and so

513
00:22:20,419 --> 00:22:22,919
re-evaluate your implementation and if

514
00:22:22,919 --> 00:22:27,380
necessary increase self-protection

515
00:22:27,539 --> 00:22:30,600
moreover a post-morton postmorton

516
00:22:30,600 --> 00:22:32,820
digital forensics may be affected as

517
00:22:32,820 --> 00:22:35,280
well we already know that Lazarus

518
00:22:35,280 --> 00:22:36,900
deletes

519
00:22:36,900 --> 00:22:40,919
uh their files uh from victims computers

520
00:22:40,919 --> 00:22:42,900
securely when they are not needed

521
00:22:42,900 --> 00:22:44,159
anymore

522
00:22:44,159 --> 00:22:47,460
now with the loss of

523
00:22:47,460 --> 00:22:49,500
prefetch files and

524
00:22:49,500 --> 00:22:52,200
history of execution

525
00:22:52,200 --> 00:22:55,799
this may lead to the to investigators of

526
00:22:55,799 --> 00:22:58,380
Lazaro's incidents to a false impression

527
00:22:58,380 --> 00:23:01,559
that the attack was not as serious as it

528
00:23:01,559 --> 00:23:04,260
was in reality

529
00:23:04,260 --> 00:23:07,919
and the very last Point flood module is

530
00:23:07,919 --> 00:23:09,960
in active development we see new

531
00:23:09,960 --> 00:23:12,960
versions where they updated these

532
00:23:12,960 --> 00:23:15,659
mechanisms even they add a new one so

533
00:23:15,659 --> 00:23:18,419
now they have eight uh independent

534
00:23:18,419 --> 00:23:20,940
mechanisms how to turn off Windows

535
00:23:20,940 --> 00:23:22,919
system monitoring

536
00:23:22,919 --> 00:23:26,039
and we will we'll keep

537
00:23:26,039 --> 00:23:29,520
an eye on this thread because we will we

538
00:23:29,520 --> 00:23:31,559
are really curious how this will this

539
00:23:31,559 --> 00:23:32,820
will evolve

540
00:23:32,820 --> 00:23:34,919
and I guess this is the end of our

541
00:23:34,919 --> 00:23:37,559
presentation and

542
00:23:37,559 --> 00:23:40,380
these are our contact details in case

543
00:23:40,380 --> 00:23:42,000
you have

544
00:23:42,000 --> 00:23:47,059
questions and so on so

545
00:23:48,440 --> 00:23:54,960
[Applause]

546
00:23:54,960 --> 00:23:57,980
do we have any questions

547
00:24:00,539 --> 00:24:03,500
there is a question

548
00:24:04,020 --> 00:24:06,659
I really got a good talk Peter

549
00:24:06,659 --> 00:24:08,880
um now the thing is that you mentioned

550
00:24:08,880 --> 00:24:10,980
that security companies our area

551
00:24:10,980 --> 00:24:13,080
providers antivirus may have to look at

552
00:24:13,080 --> 00:24:16,380
the techniques being used and try to

553
00:24:16,380 --> 00:24:18,419
counter that but the problem is that

554
00:24:18,419 --> 00:24:19,919
when

555
00:24:19,919 --> 00:24:22,559
so if the bad guys are also internal and

556
00:24:22,559 --> 00:24:24,720
you are also in Colonel kind of all bets

557
00:24:24,720 --> 00:24:25,919
are kind of off

558
00:24:25,919 --> 00:24:27,720
right so you basically need to get in

559
00:24:27,720 --> 00:24:30,000
there before they get into Kano so is

560
00:24:30,000 --> 00:24:32,460
there something that we can do as well

561
00:24:32,460 --> 00:24:34,440
as what Microsoft can do to make sure

562
00:24:34,440 --> 00:24:37,860
that the vulnerable driver I mean that

563
00:24:37,860 --> 00:24:40,559
itself has not been loaded I mean is

564
00:24:40,559 --> 00:24:42,419
there something that can be done

565
00:24:42,419 --> 00:24:45,240
uh yes thank you for the question

566
00:24:45,240 --> 00:24:48,059
um yeah obviously the best best place

567
00:24:48,059 --> 00:24:50,520
where to stop the threat is not to let

568
00:24:50,520 --> 00:24:52,860
the bad guys to load their vulnerable

569
00:24:52,860 --> 00:24:54,600
driver and to get the ability to write

570
00:24:54,600 --> 00:24:57,299
kernel space but I I think there could

571
00:24:57,299 --> 00:25:00,000
be more mechanisms and Microsoft is

572
00:25:00,000 --> 00:25:03,240
improving like their kernel mechanisms

573
00:25:03,240 --> 00:25:06,240
that they would just take a look at the

574
00:25:06,240 --> 00:25:09,299
crucial kernel structures and yeah

575
00:25:09,299 --> 00:25:11,640
there's some kernel blue screen of that

576
00:25:11,640 --> 00:25:14,100
exception that says that the critical

577
00:25:14,100 --> 00:25:17,100
structures were modified so my

578
00:25:17,100 --> 00:25:18,960
suggestions would be to add to the list

579
00:25:18,960 --> 00:25:20,760
of critical structures also those

580
00:25:20,760 --> 00:25:24,720
involved uh like this to to Really um

581
00:25:24,720 --> 00:25:27,179
check Integrity of the callbacks if they

582
00:25:27,179 --> 00:25:30,179
are not wiped out or somehow somehow

583
00:25:30,179 --> 00:25:32,580
control the process at least to make the

584
00:25:32,580 --> 00:25:35,340
life of the bad guys harder because now

585
00:25:35,340 --> 00:25:38,240
now it's really easy

586
00:25:39,120 --> 00:25:41,940
uh hi Peter I'm over here

587
00:25:41,940 --> 00:25:44,159
um hello so you said that the original

588
00:25:44,159 --> 00:25:47,220
attack in which this was discovered was

589
00:25:47,220 --> 00:25:50,460
an email message that had an attachment

590
00:25:50,460 --> 00:25:53,520
um have you seen any other vectors for

591
00:25:53,520 --> 00:25:55,380
installing this malware

592
00:25:55,380 --> 00:25:57,960
um and you know being able to get hooked

593
00:25:57,960 --> 00:26:00,559
in on the operating system

594
00:26:00,559 --> 00:26:04,320
of actually uh we have seen only two

595
00:26:04,320 --> 00:26:07,200
instances uh that one in the Netherlands

596
00:26:07,200 --> 00:26:12,240
in October 2021 and the second in South

597
00:26:12,240 --> 00:26:13,260
Korea

598
00:26:13,260 --> 00:26:16,380
uh recently like two months ago or one

599
00:26:16,380 --> 00:26:19,880
month ago and so we didn't

600
00:26:19,880 --> 00:26:23,100
identify the intrusion mechanism at that

601
00:26:23,100 --> 00:26:26,279
okay but others have multiple options

602
00:26:26,279 --> 00:26:29,220
how to intrude how to infiltrate their

603
00:26:29,220 --> 00:26:31,919
victims obviously the easiest one is to

604
00:26:31,919 --> 00:26:34,940
contact the Target and let the target

605
00:26:34,940 --> 00:26:38,640
self-compromise themselves but uh they

606
00:26:38,640 --> 00:26:41,279
also do exploitation they we believe

607
00:26:41,279 --> 00:26:44,400
they have they have also some zero day

608
00:26:44,400 --> 00:26:48,900
uh capabilities so but it's very hard to

609
00:26:48,900 --> 00:26:51,179
prove right because if you don't do

610
00:26:51,179 --> 00:26:53,880
incidence response on the machine the

611
00:26:53,880 --> 00:26:56,279
intrusion Vector is really like in

612
00:26:56,279 --> 00:26:57,779
question

613
00:26:57,779 --> 00:27:01,159
so we don't know

614
00:27:05,039 --> 00:27:07,620
um last time when I checked that if you

615
00:27:07,620 --> 00:27:09,480
once have a vulnerable driver which is

616
00:27:09,480 --> 00:27:11,820
digitally signed and even if the digital

617
00:27:11,820 --> 00:27:14,039
signature is revoked you can still load

618
00:27:14,039 --> 00:27:16,440
it did you recheck for the last builds

619
00:27:16,440 --> 00:27:20,100
of Windows 10 on Windows 11 whether it's

620
00:27:20,100 --> 00:27:21,860
still possible to load it

621
00:27:21,860 --> 00:27:24,539
uh yeah it's a good point regarding

622
00:27:24,539 --> 00:27:29,240
mitigation we didn't check but of course

623
00:27:29,240 --> 00:27:31,919
it should be something

624
00:27:31,919 --> 00:27:34,260
that that should work so

625
00:27:34,260 --> 00:27:37,260
yeah thanks thanks for pointing this out

626
00:27:37,260 --> 00:27:40,460
but we didn't check

627
00:27:43,020 --> 00:27:46,879
we have time for one more question

628
00:27:49,500 --> 00:27:50,820
if you don't have any more questions

629
00:27:50,820 --> 00:27:53,700
please join me to congratulate on a nice

630
00:27:53,700 --> 00:27:55,940
paper

