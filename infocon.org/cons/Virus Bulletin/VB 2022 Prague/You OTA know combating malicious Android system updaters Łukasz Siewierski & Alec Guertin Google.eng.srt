1
00:00:02,639 --> 00:00:05,220
so first let me explain why there are

2
00:00:05,220 --> 00:00:06,960
two names on the slides and it's only me

3
00:00:06,960 --> 00:00:09,720
unfortunately Alec couldn't make it so I

4
00:00:09,720 --> 00:00:13,500
have to do his half of the talk as well

5
00:00:13,500 --> 00:00:17,039
um and my name is wukash and I indeed

6
00:00:17,039 --> 00:00:18,779
work for Google on the Android malware

7
00:00:18,779 --> 00:00:21,060
research team so

8
00:00:21,060 --> 00:00:22,800
um today I will talk to you about OTA

9
00:00:22,800 --> 00:00:24,300
apps

10
00:00:24,300 --> 00:00:27,300
not OTA updates so I will start with

11
00:00:27,300 --> 00:00:30,539
what are the OTA apps and how they can

12
00:00:30,539 --> 00:00:33,239
be abused by the malware authors I will

13
00:00:33,239 --> 00:00:36,059
then show you two real world cases where

14
00:00:36,059 --> 00:00:38,300
they were abused by the malware authors

15
00:00:38,300 --> 00:00:41,160
and at the end I will tell you how we

16
00:00:41,160 --> 00:00:43,200
combat that kind of abuse and what we do

17
00:00:43,200 --> 00:00:46,020
to prevent it and if we have some time

18
00:00:46,020 --> 00:00:48,059
left for questions I'm happy to answer

19
00:00:48,059 --> 00:00:51,120
them as well so the first thing is what

20
00:00:51,120 --> 00:00:53,940
are the OT apps and what do they do so

21
00:00:53,940 --> 00:00:56,100
the core functionality of the yogi app

22
00:00:56,100 --> 00:00:58,980
is relatively simple they do all the

23
00:00:58,980 --> 00:01:01,500
admin tasks of getting the OTA on the

24
00:01:01,500 --> 00:01:03,600
device so they check whether the OTA is

25
00:01:03,600 --> 00:01:05,640
available whether there's a new version

26
00:01:05,640 --> 00:01:08,159
that is compared to the version that you

27
00:01:08,159 --> 00:01:11,040
have they handle the downloading they

28
00:01:11,040 --> 00:01:13,619
handle the things that you may

29
00:01:13,619 --> 00:01:16,439
ordinarily expect like delaying it until

30
00:01:16,439 --> 00:01:19,880
you're on a Wi-Fi or this kinds of

31
00:01:19,880 --> 00:01:22,380
functionalities and then they pass over

32
00:01:22,380 --> 00:01:24,180
the whole system image to the end

33
00:01:24,180 --> 00:01:26,880
Android API and Android makes sure that

34
00:01:26,880 --> 00:01:29,220
it's properly signed then handles the

35
00:01:29,220 --> 00:01:31,439
update process the reboot and all that

36
00:01:31,439 --> 00:01:34,140
so they only do the admin task so

37
00:01:34,140 --> 00:01:36,960
there's nothing that influences the

38
00:01:36,960 --> 00:01:40,619
OTA system image in the app itself

39
00:01:40,619 --> 00:01:43,159
the problem or rather

40
00:01:43,159 --> 00:01:46,320
the abuse Vector comes from additional

41
00:01:46,320 --> 00:01:48,540
functionality that these apps Implement

42
00:01:48,540 --> 00:01:51,180
so the additional functionality is

43
00:01:51,180 --> 00:01:54,060
something that the device manufacturer

44
00:01:54,060 --> 00:01:56,579
may want so they may want to have a

45
00:01:56,579 --> 00:01:58,380
lightweight system update that means

46
00:01:58,380 --> 00:02:00,659
that if they want to have data and

47
00:02:00,659 --> 00:02:03,119
system app that's on your device and

48
00:02:03,119 --> 00:02:04,979
they just want to update this one system

49
00:02:04,979 --> 00:02:07,259
up it doesn't make sense to send you the

50
00:02:07,259 --> 00:02:08,758
whole system image because then you will

51
00:02:08,758 --> 00:02:10,199
have to go through the reboot process

52
00:02:10,199 --> 00:02:12,720
and it takes time and it's not very user

53
00:02:12,720 --> 00:02:15,060
friendly so they may send this one up

54
00:02:15,060 --> 00:02:17,879
and install the app or the image and an

55
00:02:17,879 --> 00:02:19,560
additional app and install it to enhance

56
00:02:19,560 --> 00:02:21,660
the user experience or they may have a

57
00:02:21,660 --> 00:02:23,280
configuration change which also doesn't

58
00:02:23,280 --> 00:02:26,700
require your phone to be rebooted or the

59
00:02:26,700 --> 00:02:28,860
system managed to be changed so these

60
00:02:28,860 --> 00:02:30,780
additional functionality that is added

61
00:02:30,780 --> 00:02:34,440
to some of the OTA apps is where we can

62
00:02:34,440 --> 00:02:37,340
find the potential for abuse the OTA

63
00:02:37,340 --> 00:02:42,060
part is is safe

64
00:02:42,060 --> 00:02:43,080
um

65
00:02:43,080 --> 00:02:46,800
and in Android you have uh you almost

66
00:02:46,800 --> 00:02:48,660
always have multiple parties involved so

67
00:02:48,660 --> 00:02:50,340
I already told you that there are device

68
00:02:50,340 --> 00:02:52,160
manufacturers there are of course

69
00:02:52,160 --> 00:02:54,900
third-party providers so for example if

70
00:02:54,900 --> 00:02:58,080
the OEM cannot uh it doesn't have a

71
00:02:58,080 --> 00:03:01,140
software team they make they may ask

72
00:03:01,140 --> 00:03:04,560
some subcontractor to do the OT app for

73
00:03:04,560 --> 00:03:06,060
them they may buy it from a different

74
00:03:06,060 --> 00:03:08,040
place they may write it themselves they

75
00:03:08,040 --> 00:03:10,980
may use Google OTA uh we also have the

76
00:03:10,980 --> 00:03:12,840
OTA app so there are many many different

77
00:03:12,840 --> 00:03:14,340
components

78
00:03:14,340 --> 00:03:16,200
um before the

79
00:03:16,200 --> 00:03:18,780
decision is being made so there are many

80
00:03:18,780 --> 00:03:21,720
different sources of these OTA apps and

81
00:03:21,720 --> 00:03:25,800
this is one of the uh one of the targets

82
00:03:25,800 --> 00:03:28,260
for abuse so they may be the app itself

83
00:03:28,260 --> 00:03:31,200
may be contracted to a vendor and may

84
00:03:31,200 --> 00:03:35,040
come from an untrusted Source uh and

85
00:03:35,040 --> 00:03:36,060
then

86
00:03:36,060 --> 00:03:38,400
you may have to check whether the app is

87
00:03:38,400 --> 00:03:41,819
safe and secure these apps usually also

88
00:03:41,819 --> 00:03:43,560
have sensitive permissions as you can

89
00:03:43,560 --> 00:03:46,799
imagine the OT app has to do a number of

90
00:03:46,799 --> 00:03:49,140
things on Android that are considered

91
00:03:49,140 --> 00:03:52,140
privilege privileged so it may install

92
00:03:52,140 --> 00:03:54,959
other apps obviously it may reboot the

93
00:03:54,959 --> 00:03:56,280
phone and

94
00:03:56,280 --> 00:03:58,500
fairly often the chance as a system user

95
00:03:58,500 --> 00:04:01,280
so it has even more elevated Privileges

96
00:04:01,280 --> 00:04:04,920
and then can access some hidden

97
00:04:04,920 --> 00:04:07,980
framework apis and share permissions

98
00:04:07,980 --> 00:04:10,379
with other system apps so every app that

99
00:04:10,379 --> 00:04:13,739
runs as a system user has the same super

100
00:04:13,739 --> 00:04:15,659
set of permissions and as I mentioned

101
00:04:15,659 --> 00:04:18,720
they also download the apps so this is

102
00:04:18,720 --> 00:04:21,120
for the purpose of updating the apps

103
00:04:21,120 --> 00:04:22,560
that you already have on your phone a

104
00:04:22,560 --> 00:04:24,840
lightweight update or installing a new

105
00:04:24,840 --> 00:04:27,060
app that will in some way enhance the

106
00:04:27,060 --> 00:04:29,639
user experience and you don't know what

107
00:04:29,639 --> 00:04:31,440
apps that you will download until they

108
00:04:31,440 --> 00:04:33,240
will download the apps obviously because

109
00:04:33,240 --> 00:04:36,900
that's all handled server side so these

110
00:04:36,900 --> 00:04:38,880
downloads have to be watched closely to

111
00:04:38,880 --> 00:04:41,160
make sure that once it's downloaded is

112
00:04:41,160 --> 00:04:42,139
actually

113
00:04:42,139 --> 00:04:44,940
non-nalicious and a B9 app

114
00:04:44,940 --> 00:04:47,820
so now I will move on to two real world

115
00:04:47,820 --> 00:04:50,580
case studies uh one of them was done by

116
00:04:50,580 --> 00:04:52,860
Alex so I'm presenting his work I want

117
00:04:52,860 --> 00:04:55,139
to make sure that you are all aware of

118
00:04:55,139 --> 00:04:58,020
that and also if I make any mistakes it

119
00:04:58,020 --> 00:05:00,419
it's all his fault

120
00:05:00,419 --> 00:05:04,620
um so the first one is uh is an OT app

121
00:05:04,620 --> 00:05:06,840
that downloaded additional apps that

122
00:05:06,840 --> 00:05:09,540
weren't so benign they were they were

123
00:05:09,540 --> 00:05:11,460
malicious apps and it was in the news

124
00:05:11,460 --> 00:05:13,380
two times or at least we were able to

125
00:05:13,380 --> 00:05:15,960
find it two times once was in a blog

126
00:05:15,960 --> 00:05:18,120
post by Malwarebytes and one of swaz in

127
00:05:18,120 --> 00:05:21,560
a blog on ninji's websites website sorry

128
00:05:21,560 --> 00:05:24,600
that had all the technical details about

129
00:05:24,600 --> 00:05:26,639
this app we were able to find the second

130
00:05:26,639 --> 00:05:28,199
version of this app obviously when we

131
00:05:28,199 --> 00:05:29,880
detected the first version they moved on

132
00:05:29,880 --> 00:05:32,039
to the second version and I will

133
00:05:32,039 --> 00:05:33,780
elaborate slightly more on that and I

134
00:05:33,780 --> 00:05:36,060
will also tell you what apps were

135
00:05:36,060 --> 00:05:39,120
downloaded by this OTA

136
00:05:39,120 --> 00:05:41,699
so the way the app worked is the

137
00:05:41,699 --> 00:05:44,520
classes.dex file contained the code to

138
00:05:44,520 --> 00:05:46,919
actually do the OTA and to do the all

139
00:05:46,919 --> 00:05:48,600
the downloads and all that stuff and

140
00:05:48,600 --> 00:05:50,699
that code was in Java and there was a

141
00:05:50,699 --> 00:05:53,639
second part that was written in Lua

142
00:05:53,639 --> 00:05:56,580
and it had workers workers were

143
00:05:56,580 --> 00:05:59,340
basically kind of Lua

144
00:05:59,340 --> 00:06:01,860
um plugins or whatever you want to call

145
00:06:01,860 --> 00:06:04,080
them and the first version of the app

146
00:06:04,080 --> 00:06:06,419
that came with the phone only had a very

147
00:06:06,419 --> 00:06:08,280
simple worker that checked in with the

148
00:06:08,280 --> 00:06:10,380
server and downloaded more stuff or

149
00:06:10,380 --> 00:06:12,300
upgraded itself to a more complex

150
00:06:12,300 --> 00:06:15,840
version that had other capabilities so

151
00:06:15,840 --> 00:06:18,479
the the kind of the work cycle was to

152
00:06:18,479 --> 00:06:20,340
check in with the server get the command

153
00:06:20,340 --> 00:06:23,100
from the server update itself and

154
00:06:23,100 --> 00:06:25,080
execute the command and and go in

155
00:06:25,080 --> 00:06:27,960
circles like that and this is almost

156
00:06:27,960 --> 00:06:31,560
always the case in every

157
00:06:31,560 --> 00:06:34,560
OTA app that we've seen that had this

158
00:06:34,560 --> 00:06:36,060
additional functionality of downloading

159
00:06:36,060 --> 00:06:37,979
malware that there are these two worlds

160
00:06:37,979 --> 00:06:41,880
one is this clean code written in with

161
00:06:41,880 --> 00:06:44,039
proper class names and whatnot and this

162
00:06:44,039 --> 00:06:45,900
is there's the code responsible for the

163
00:06:45,900 --> 00:06:46,979
actual OTE

164
00:06:46,979 --> 00:06:49,199
uh so downloading the system I mentioned

165
00:06:49,199 --> 00:06:51,539
all that and there's a second world that

166
00:06:51,539 --> 00:06:53,819
is usually obfuscated or somewhere else

167
00:06:53,819 --> 00:06:57,120
or dynamically loaded or or whatever and

168
00:06:57,120 --> 00:06:58,620
this is the code that's responsible for

169
00:06:58,620 --> 00:07:00,840
malware downloads so one of the ways you

170
00:07:00,840 --> 00:07:04,380
can see that the OTA maybe the OTF maybe

171
00:07:04,380 --> 00:07:06,120
malicious is that it will have two

172
00:07:06,120 --> 00:07:08,639
separate code paths for app downloads

173
00:07:08,639 --> 00:07:11,400
and installs one is the one that it

174
00:07:11,400 --> 00:07:13,080
should have and the other one is the one

175
00:07:13,080 --> 00:07:15,419
that uh that is additional and we found

176
00:07:15,419 --> 00:07:16,740
malware

177
00:07:16,740 --> 00:07:19,139
uh so this is the example of the upgrade

178
00:07:19,139 --> 00:07:22,440
command that was sent to the CNC and was

179
00:07:22,440 --> 00:07:24,300
used to upgrade that Lua worker to one

180
00:07:24,300 --> 00:07:25,080
with

181
00:07:25,080 --> 00:07:28,440
more capabilities the interesting thing

182
00:07:28,440 --> 00:07:31,380
you can see is the URL here so they are

183
00:07:31,380 --> 00:07:34,620
definitely trying to look legitimate and

184
00:07:34,620 --> 00:07:36,720
you have to look closely to know that

185
00:07:36,720 --> 00:07:39,960
that URL is not really the URL or of a

186
00:07:39,960 --> 00:07:42,720
very popular social media website and

187
00:07:42,720 --> 00:07:46,380
they use also uh very similar URLs I

188
00:07:46,380 --> 00:07:48,240
don't know if this is as a joke or to

189
00:07:48,240 --> 00:07:51,120
actually hide in the network traffic so

190
00:07:51,120 --> 00:07:53,060
they also used something that looks

191
00:07:53,060 --> 00:07:56,520
legit and in the network traffic and as

192
00:07:56,520 --> 00:07:58,919
I said the response to this was to send

193
00:07:58,919 --> 00:08:01,680
more Lua workers that were either

194
00:08:01,680 --> 00:08:04,160
downloading apps or doing something else

195
00:08:04,160 --> 00:08:07,139
everything here was sort obviously

196
00:08:07,139 --> 00:08:08,819
that's the best form of encryption isn't

197
00:08:08,819 --> 00:08:09,500
it

198
00:08:09,500 --> 00:08:13,199
so just to make sure that uh that it's

199
00:08:13,199 --> 00:08:16,800
harder to track the traffic

200
00:08:16,800 --> 00:08:18,419
um and you can see the code here that

201
00:08:18,419 --> 00:08:21,300
was uh used to not only download but

202
00:08:21,300 --> 00:08:24,000
also launch apps so when you download an

203
00:08:24,000 --> 00:08:26,699
install app any new app user has to

204
00:08:26,699 --> 00:08:28,500
click on the app icon for it to actually

205
00:08:28,500 --> 00:08:32,940
run or the the software that downloads

206
00:08:32,940 --> 00:08:34,979
it in this case OTA may have permissions

207
00:08:34,979 --> 00:08:38,580
to run it for the user but if you just

208
00:08:38,580 --> 00:08:40,799
install the app nothing will happen so

209
00:08:40,799 --> 00:08:42,899
they also might have to make sure that

210
00:08:42,899 --> 00:08:44,820
the app is run in addition to being

211
00:08:44,820 --> 00:08:47,279
downloaded

212
00:08:47,279 --> 00:08:49,800
um and one of the plugins was used for

213
00:08:49,800 --> 00:08:53,640
app fraud uh so it it loaded plugins

214
00:08:53,640 --> 00:08:56,160
dynamically that were linked to known

215
00:08:56,160 --> 00:08:59,880
advert families uh known uh kind of uh

216
00:08:59,880 --> 00:09:03,000
big advert botnets that we talked about

217
00:09:03,000 --> 00:09:05,940
before there were usually no user-facing

218
00:09:05,940 --> 00:09:07,500
components or launcher activities

219
00:09:07,500 --> 00:09:10,260
obviously everything one

220
00:09:10,260 --> 00:09:12,660
the purpose of everything was to run in

221
00:09:12,660 --> 00:09:15,000
the background and not to alert the user

222
00:09:15,000 --> 00:09:18,240
and here's some example of the code that

223
00:09:18,240 --> 00:09:20,760
they used to perform approach so this

224
00:09:20,760 --> 00:09:22,740
one wants to scroll the website and you

225
00:09:22,740 --> 00:09:24,720
can see a lot of Randomness Randomness

226
00:09:24,720 --> 00:09:28,260
is always set in any AD fraud kind of

227
00:09:28,260 --> 00:09:32,040
apps to make sure they simulate the user

228
00:09:32,040 --> 00:09:33,899
better right so if they will click on

229
00:09:33,899 --> 00:09:36,300
every single at the same exact point

230
00:09:36,300 --> 00:09:38,220
usually at the center of the ad it's

231
00:09:38,220 --> 00:09:39,899
fairly easy to detect that kind of

232
00:09:39,899 --> 00:09:42,480
behavior if they do it randomly they

233
00:09:42,480 --> 00:09:45,779
think it's harder to detect them

234
00:09:45,779 --> 00:09:48,060
um and this is another example of again

235
00:09:48,060 --> 00:09:49,620
this is a random click but the

236
00:09:49,620 --> 00:09:52,140
randomness of the click only comes to

237
00:09:52,140 --> 00:09:54,839
the clicking time not actually where the

238
00:09:54,839 --> 00:09:57,899
click is uh is done and it will click on

239
00:09:57,899 --> 00:10:01,800
every a element uh on the website uh in

240
00:10:01,800 --> 00:10:04,200
any random click time between four and

241
00:10:04,200 --> 00:10:07,740
six uh seconds I think that's it that's

242
00:10:07,740 --> 00:10:09,000
that

243
00:10:09,000 --> 00:10:10,620
um interestingly

244
00:10:10,620 --> 00:10:13,440
this particular OTA also used a system

245
00:10:13,440 --> 00:10:15,600
level back door so there was the system

246
00:10:15,600 --> 00:10:17,580
service this is the name for the system

247
00:10:17,580 --> 00:10:20,519
service and it's its purpose was to

248
00:10:20,519 --> 00:10:23,640
export the Android API so that they can

249
00:10:23,640 --> 00:10:26,040
be used without any permissions

250
00:10:26,040 --> 00:10:28,680
uh so this was an a system service that

251
00:10:28,680 --> 00:10:31,380
ran as a part as part of the operating

252
00:10:31,380 --> 00:10:33,480
system and it allowed to install an

253
00:10:33,480 --> 00:10:36,480
uninstall apks and set component enabled

254
00:10:36,480 --> 00:10:39,060
and all this uh this stuff that is

255
00:10:39,060 --> 00:10:41,640
mentioned here uh obviously the service

256
00:10:41,640 --> 00:10:43,380
didn't provide any kind of

257
00:10:43,380 --> 00:10:46,500
authentication so not only the OT app

258
00:10:46,500 --> 00:10:48,600
but also any app from the device that

259
00:10:48,600 --> 00:10:51,380
was able to detect this service could

260
00:10:51,380 --> 00:10:54,000
use the same kind of

261
00:10:54,000 --> 00:10:57,060
access to to the device without any

262
00:10:57,060 --> 00:11:00,180
permissions uh this is obviously a

263
00:11:00,180 --> 00:11:02,700
vulnerability and this was disclosed to

264
00:11:02,700 --> 00:11:06,060
our apvi Pro program which deals with

265
00:11:06,060 --> 00:11:07,980
vulnerabilities found in additional code

266
00:11:07,980 --> 00:11:10,260
the code that's not part of ausb but

267
00:11:10,260 --> 00:11:12,899
still this shipped with the device and

268
00:11:12,899 --> 00:11:15,060
under this link you can see the details

269
00:11:15,060 --> 00:11:16,740
of the vulnerability it was disclosed to

270
00:11:16,740 --> 00:11:19,019
the partners and they fixed it so it's

271
00:11:19,019 --> 00:11:22,380
no longer present on user devices or

272
00:11:22,380 --> 00:11:23,940
should be no longer present from user

273
00:11:23,940 --> 00:11:25,200
devices

274
00:11:25,200 --> 00:11:28,260
and after we started detecting version

275
00:11:28,260 --> 00:11:31,320
one and I will tell you in a at the end

276
00:11:31,320 --> 00:11:33,360
what I mean by detecting because it's a

277
00:11:33,360 --> 00:11:35,880
very uh kind of particular way of

278
00:11:35,880 --> 00:11:38,820
detecting otna apps they returned with

279
00:11:38,820 --> 00:11:41,399
version two version two the theme for

280
00:11:41,399 --> 00:11:44,519
version two was obfuscation so they

281
00:11:44,519 --> 00:11:46,920
introduced a lot of obfuscation in order

282
00:11:46,920 --> 00:11:49,279
to make it harder to detect presumably

283
00:11:49,279 --> 00:11:52,260
uh the first thing is that they moved

284
00:11:52,260 --> 00:11:54,420
all the malicious code outside of the

285
00:11:54,420 --> 00:11:55,140
app

286
00:11:55,140 --> 00:11:58,380
and they used an existing elf binary

287
00:11:58,380 --> 00:12:01,320
that is on the system image to put all

288
00:12:01,320 --> 00:12:03,959
the malicious code in as native methods

289
00:12:03,959 --> 00:12:06,360
so the app itself only had references to

290
00:12:06,360 --> 00:12:08,339
Native methods and these native methods

291
00:12:08,339 --> 00:12:11,700
were in a system Library uh in this case

292
00:12:11,700 --> 00:12:13,500
this is the name of the system library

293
00:12:13,500 --> 00:12:17,040
that they used so if you had the APK

294
00:12:17,040 --> 00:12:19,380
file itself you wouldn't know what it

295
00:12:19,380 --> 00:12:21,480
does because you didn't have that system

296
00:12:21,480 --> 00:12:23,700
library next to it it was just part of

297
00:12:23,700 --> 00:12:24,600
the system

298
00:12:24,600 --> 00:12:28,339
uh they also did a lot of detection of

299
00:12:28,339 --> 00:12:31,079
debugging tools and emulators you can

300
00:12:31,079 --> 00:12:34,079
see some examples here so if you have

301
00:12:34,079 --> 00:12:36,360
um like lock card running or whatever

302
00:12:36,360 --> 00:12:39,720
they they wouldn't even continue with

303
00:12:39,720 --> 00:12:41,720
the execution and this is done before

304
00:12:41,720 --> 00:12:44,760
any actual code is loaded right so if

305
00:12:44,760 --> 00:12:46,380
they detect something they will simply

306
00:12:46,380 --> 00:12:50,279
simply start working same for emulators

307
00:12:50,279 --> 00:12:52,680
so you can see here they detected some

308
00:12:52,680 --> 00:12:56,940
of the emulators uh and if they detected

309
00:12:56,940 --> 00:12:58,500
that they were running in an emulator

310
00:12:58,500 --> 00:13:01,860
they would stop running and then

311
00:13:01,860 --> 00:13:04,860
if all these tags have passed so they

312
00:13:04,860 --> 00:13:06,480
are sure that they are running on the

313
00:13:06,480 --> 00:13:08,519
right device because it has that elf

314
00:13:08,519 --> 00:13:11,040
file that they've modified it's not an

315
00:13:11,040 --> 00:13:13,380
emulator it's not a debugger it's not

316
00:13:13,380 --> 00:13:17,100
whatever then they will move on to uh oh

317
00:13:17,100 --> 00:13:18,899
sorry there's one more check the one

318
00:13:18,899 --> 00:13:21,360
additional check is for exposed so if

319
00:13:21,360 --> 00:13:23,579
you have an instrumented emulator and

320
00:13:23,579 --> 00:13:26,220
you use expose to instrument them as

321
00:13:26,220 --> 00:13:28,139
some of the dynamic evaluation

322
00:13:28,139 --> 00:13:30,600
environments do they will also detect

323
00:13:30,600 --> 00:13:33,480
detect distance stop running so after

324
00:13:33,480 --> 00:13:35,760
this one additional check they will

325
00:13:35,760 --> 00:13:38,459
unpack the the code that is used to

326
00:13:38,459 --> 00:13:40,320
install and download and install apps

327
00:13:40,320 --> 00:13:43,139
and they will also drop an additional

328
00:13:43,139 --> 00:13:46,560
text file to the Dalvik cache

329
00:13:46,560 --> 00:13:50,100
location and again same story Luan

330
00:13:50,100 --> 00:13:53,399
workers the uh they send the uh Pink to

331
00:13:53,399 --> 00:13:55,440
the CNC upgrade themselves there's a

332
00:13:55,440 --> 00:13:57,300
dual worker that downloads and installs

333
00:13:57,300 --> 00:13:59,700
apps and so on and so forth so this is

334
00:13:59,700 --> 00:14:01,800
the first

335
00:14:01,800 --> 00:14:03,660
case study

336
00:14:03,660 --> 00:14:05,940
um oh and I forgot to mention of course

337
00:14:05,940 --> 00:14:07,800
everything is sorry encrypted with one

338
00:14:07,800 --> 00:14:10,639
white key obviously it has to be

339
00:14:10,639 --> 00:14:13,980
otherwise it wouldn't count as malware

340
00:14:13,980 --> 00:14:16,019
um so the second case study is for a

341
00:14:16,019 --> 00:14:17,100
different

342
00:14:17,100 --> 00:14:18,139
OTA app

343
00:14:18,139 --> 00:14:20,579
and this one also came in different

344
00:14:20,579 --> 00:14:22,740
versions so whenever we detect something

345
00:14:22,740 --> 00:14:24,899
they switch to a new version when we

346
00:14:24,899 --> 00:14:26,579
detect new version they switch over to

347
00:14:26,579 --> 00:14:28,380
the next one

348
00:14:28,380 --> 00:14:30,360
um and this one was only mentioned once

349
00:14:30,360 --> 00:14:33,300
or at least I found it mentioned once

350
00:14:33,300 --> 00:14:35,339
um during Google search so if someone

351
00:14:35,339 --> 00:14:37,079
did mention that I'm sorry I didn't

352
00:14:37,079 --> 00:14:39,360
include you but again Malwarebytes uh

353
00:14:39,360 --> 00:14:41,699
did a blog post about that

354
00:14:41,699 --> 00:14:44,639
um this uh the part of the talk will

355
00:14:44,639 --> 00:14:46,800
also show you the newest the newer

356
00:14:46,800 --> 00:14:50,459
versions and what the uh OT actually

357
00:14:50,459 --> 00:14:52,860
downloaded so the first version was

358
00:14:52,860 --> 00:14:55,079
fairly simple you can see

359
00:14:55,079 --> 00:14:57,720
on the top right here that it had a jar

360
00:14:57,720 --> 00:15:00,959
file these numbers in the jar file are

361
00:15:00,959 --> 00:15:04,560
the version of the jar file so then it

362
00:15:04,560 --> 00:15:06,899
contacted the CNC and said this is the

363
00:15:06,899 --> 00:15:08,880
version that I have do you have a newer

364
00:15:08,880 --> 00:15:10,620
version it downloaded a newer version

365
00:15:10,620 --> 00:15:14,399
and and run with that so uh kind of this

366
00:15:14,399 --> 00:15:16,440
was the kind of a default version and

367
00:15:16,440 --> 00:15:19,440
then and then if it wanted to upgrade it

368
00:15:19,440 --> 00:15:22,500
did that through the CNC and there were

369
00:15:22,500 --> 00:15:24,480
two interesting features in this version

370
00:15:24,480 --> 00:15:26,940
so the first one was the opportunistic

371
00:15:26,940 --> 00:15:29,459
use of su and that is something that I

372
00:15:29,459 --> 00:15:33,600
fairly often see in uh Android malware

373
00:15:33,600 --> 00:15:36,360
if you have an Su binary that is not

374
00:15:36,360 --> 00:15:39,120
protected in any way malware will try to

375
00:15:39,120 --> 00:15:42,360
use it obviously it wants to get higher

376
00:15:42,360 --> 00:15:45,120
privileges so if your phone is rooted

377
00:15:45,120 --> 00:15:47,459
and you have an Su binary you may want

378
00:15:47,459 --> 00:15:49,920
to check whether it's properly secured

379
00:15:49,920 --> 00:15:52,199
for the malware use and the second

380
00:15:52,199 --> 00:15:54,720
feature was the complete and utter lack

381
00:15:54,720 --> 00:15:58,260
of any TLS certificate validation so you

382
00:15:58,260 --> 00:16:00,600
could substitute it with any other TLS

383
00:16:00,600 --> 00:16:02,760
certificate it didn't matter whether it

384
00:16:02,760 --> 00:16:04,860
was signed or not all the errors were

385
00:16:04,860 --> 00:16:06,920
ignored

386
00:16:06,920 --> 00:16:09,540
then when we started attacking this

387
00:16:09,540 --> 00:16:11,279
version they moved on to the second one

388
00:16:11,279 --> 00:16:13,740
and the second one

389
00:16:13,740 --> 00:16:15,620
shows you the

390
00:16:15,620 --> 00:16:18,420
additional classes with obfuscated names

391
00:16:18,420 --> 00:16:20,639
so the names are in Unicode and if you

392
00:16:20,639 --> 00:16:23,160
have uh if you're reverse engineering

393
00:16:23,160 --> 00:16:25,940
tool doesn't handle Unicode class names

394
00:16:25,940 --> 00:16:28,320
you will see something similar to this

395
00:16:28,320 --> 00:16:30,480
so obviously the code is now slightly

396
00:16:30,480 --> 00:16:32,459
more obfuscated the one in the jar file

397
00:16:32,459 --> 00:16:34,560
really wasn't that obfuscate that it was

398
00:16:34,560 --> 00:16:37,139
just separate and you can see that there

399
00:16:37,139 --> 00:16:39,560
is an app dropper here so

400
00:16:39,560 --> 00:16:43,019
this one works of intents you can send

401
00:16:43,019 --> 00:16:45,660
it a download URL and the package name

402
00:16:45,660 --> 00:16:48,720
version and also a couple of additional

403
00:16:48,720 --> 00:16:50,940
things are class name and action and

404
00:16:50,940 --> 00:16:53,519
start KV this is to make sure that the

405
00:16:53,519 --> 00:16:55,199
app is running again if you install the

406
00:16:55,199 --> 00:16:56,100
app

407
00:16:56,100 --> 00:16:58,199
you have to either click on it on or

408
00:16:58,199 --> 00:17:03,959
somehow make it run uh so they uh so the

409
00:17:03,959 --> 00:17:06,480
they included the class name and action

410
00:17:06,480 --> 00:17:09,000
to uh to start the app with a proper

411
00:17:09,000 --> 00:17:11,339
class name and action that they wanted

412
00:17:11,339 --> 00:17:14,520
and V2 features again the theme for this

413
00:17:14,520 --> 00:17:16,439
one was obfuscation much like for the

414
00:17:16,439 --> 00:17:19,380
previous V2 in a separate case so

415
00:17:19,380 --> 00:17:23,400
encoded CNC URLs base64 encoded

416
00:17:23,400 --> 00:17:26,760
um if you're if you're familiar with a

417
00:17:26,760 --> 00:17:29,220
lot if you did a lot of base64 encoding

418
00:17:29,220 --> 00:17:30,480
you might notice that the beginning

419
00:17:30,480 --> 00:17:33,240
spells HTTP

420
00:17:33,240 --> 00:17:35,640
um and then as I mentioned it starts

421
00:17:35,640 --> 00:17:37,740
activities using am start so again just

422
00:17:37,740 --> 00:17:39,179
to make sure that everything is running

423
00:17:39,179 --> 00:17:41,580
in the background and they ported the

424
00:17:41,580 --> 00:17:43,440
most important feature from V1 which is

425
00:17:43,440 --> 00:17:46,740
again a total and after lack of any TLS

426
00:17:46,740 --> 00:17:49,520
validation between the app and the CNC

427
00:17:49,520 --> 00:17:52,380
server so ignoring all them

428
00:17:52,380 --> 00:17:54,980
all the errors

429
00:17:54,980 --> 00:17:58,080
V3 was slightly more interesting because

430
00:17:58,080 --> 00:18:00,419
they came up with their own file format

431
00:18:00,419 --> 00:18:02,340
it's not a very complex file format that

432
00:18:02,340 --> 00:18:04,740
is still a file format so it starts with

433
00:18:04,740 --> 00:18:07,559
a magic header and that is either chord

434
00:18:07,559 --> 00:18:10,320
X1 or chord X2 depending on the version

435
00:18:10,320 --> 00:18:12,900
then you have four bytes of the file

436
00:18:12,900 --> 00:18:15,919
size and then you have the sort

437
00:18:15,919 --> 00:18:19,860
APK and now the sort key interestingly

438
00:18:19,860 --> 00:18:23,760
is different in different versions and

439
00:18:23,760 --> 00:18:25,380
different in different versions of the

440
00:18:25,380 --> 00:18:28,200
app I'm not sure how they make sure that

441
00:18:28,200 --> 00:18:31,500
the app is correctly unexored with the

442
00:18:31,500 --> 00:18:32,660
key

443
00:18:32,660 --> 00:18:36,059
but it's just a one bike circuit and as

444
00:18:36,059 --> 00:18:37,380
I mentioned you always have to have

445
00:18:37,380 --> 00:18:39,360
software encoding otherwise it doesn't

446
00:18:39,360 --> 00:18:42,720
count as malware and you can see on the

447
00:18:42,720 --> 00:18:44,520
left here that they also use the Unicode

448
00:18:44,520 --> 00:18:45,620
class names

449
00:18:45,620 --> 00:18:50,220
so here I left it so that you know that

450
00:18:50,220 --> 00:18:52,080
our reverse engineering tours can handle

451
00:18:52,080 --> 00:18:53,640
Unicode class names and render them

452
00:18:53,640 --> 00:18:56,700
properly and you can see that once it

453
00:18:56,700 --> 00:18:59,460
was unexored it contained classes the

454
00:18:59,460 --> 00:19:03,600
decks and manifest.mf and the unexcert

455
00:19:03,600 --> 00:19:05,340
file interestingly was not very

456
00:19:05,340 --> 00:19:08,340
obfuscated they did some class name

457
00:19:08,340 --> 00:19:11,640
stripping and like method name stripping

458
00:19:11,640 --> 00:19:13,220
but I don't know whether that's a

459
00:19:13,220 --> 00:19:15,720
software development practice like you

460
00:19:15,720 --> 00:19:17,700
want to make sure your text is kind of

461
00:19:17,700 --> 00:19:20,340
compact and smaller or whether that's an

462
00:19:20,340 --> 00:19:21,960
obfuscation thing

463
00:19:21,960 --> 00:19:24,059
um if they I assume that if they went

464
00:19:24,059 --> 00:19:25,440
with the obfuscation they're out they

465
00:19:25,440 --> 00:19:26,640
would use something like Unicode

466
00:19:26,640 --> 00:19:29,360
characters again just to be just to be

467
00:19:29,360 --> 00:19:32,039
consistent with that

468
00:19:32,039 --> 00:19:35,160
uh okay so this is the CNC response that

469
00:19:35,160 --> 00:19:37,860
we were able to find

470
00:19:37,860 --> 00:19:40,679
um this shows you what types of apps

471
00:19:40,679 --> 00:19:43,020
that you were Distributing right this is

472
00:19:43,020 --> 00:19:46,320
not the actual URLs that were used to

473
00:19:46,320 --> 00:19:48,900
download the apps this is a response to

474
00:19:48,900 --> 00:19:50,460
make sure that the apps are running so

475
00:19:50,460 --> 00:19:52,980
we will have which class will be run uh

476
00:19:52,980 --> 00:19:54,780
for any app just to make sure that the

477
00:19:54,780 --> 00:19:56,460
app is constantly running but it shows

478
00:19:56,460 --> 00:20:00,660
you that this uh app controls all these

479
00:20:00,660 --> 00:20:03,120
other apps so by now you probably have a

480
00:20:03,120 --> 00:20:06,600
question what are these other apps so

481
00:20:06,600 --> 00:20:09,660
again this is uh in a very very broad

482
00:20:09,660 --> 00:20:13,140
sense at fraud uh it's click front it's

483
00:20:13,140 --> 00:20:15,840
advertising spam hidden advertisements

484
00:20:15,840 --> 00:20:18,840
so something that you won't see but I

485
00:20:18,840 --> 00:20:20,820
will still count as an impression I

486
00:20:20,820 --> 00:20:23,160
guess and disruptive advertising which

487
00:20:23,160 --> 00:20:26,100
means out of out of place ads when you

488
00:20:26,100 --> 00:20:28,620
don't expect them and again The Click

489
00:20:28,620 --> 00:20:31,080
fraud here is slightly more randomized

490
00:20:31,080 --> 00:20:33,660
so they not only randomize the time but

491
00:20:33,660 --> 00:20:36,539
they also randomize the pressure of the

492
00:20:36,539 --> 00:20:40,440
click the position of the click and and

493
00:20:40,440 --> 00:20:42,600
all the other stuff is random to make

494
00:20:42,600 --> 00:20:45,900
sure that it looks more like user input

495
00:20:45,900 --> 00:20:48,000
rather than something that was

496
00:20:48,000 --> 00:20:50,640
automatically generated

497
00:20:50,640 --> 00:20:52,980
and here are some tricks from the actual

498
00:20:52,980 --> 00:20:55,080
payload so this is not from the OTA this

499
00:20:55,080 --> 00:20:57,539
is from the apps that were downloaded by

500
00:20:57,539 --> 00:21:01,320
this uh this malicious OTA so on the

501
00:21:01,320 --> 00:21:03,240
upper right hand side you can see that

502
00:21:03,240 --> 00:21:05,400
one of the apps had an icon and this

503
00:21:05,400 --> 00:21:08,580
icon is not only an icon it's a PNG file

504
00:21:08,580 --> 00:21:10,559
that contains a jar file and that jar

505
00:21:10,559 --> 00:21:13,500
file is sore encrypted with a one byte

506
00:21:13,500 --> 00:21:16,100
key that is also hidden in that PNG file

507
00:21:16,100 --> 00:21:18,419
which is pretty amazing isn't it it's

508
00:21:18,419 --> 00:21:21,419
just an icon and again store encryption

509
00:21:21,419 --> 00:21:23,880
you know otherwise you can malware

510
00:21:23,880 --> 00:21:27,360
really the other thing it did is it kept

511
00:21:27,360 --> 00:21:30,740
counters for different ad services

512
00:21:30,740 --> 00:21:33,659
so a very generous interpretation would

513
00:21:33,659 --> 00:21:35,280
be that they didn't want to spam the

514
00:21:35,280 --> 00:21:37,980
user with ads too often a less generous

515
00:21:37,980 --> 00:21:41,280
interpretation would be that if they did

516
00:21:41,280 --> 00:21:43,380
it too often it would probably be easy

517
00:21:43,380 --> 00:21:45,419
to detect server side that you requested

518
00:21:45,419 --> 00:21:49,860
too many ads for any sensible app uh but

519
00:21:49,860 --> 00:21:51,720
my favorite one is the one on the left

520
00:21:51,720 --> 00:21:53,700
that shows you how not to get the top

521
00:21:53,700 --> 00:21:56,820
activity let's go through it uh fairly

522
00:21:56,820 --> 00:22:00,000
quickly so uh this was a loop that was

523
00:22:00,000 --> 00:22:03,179
running constantly uh every

524
00:22:03,179 --> 00:22:07,320
um every so often and it pulls the PS

525
00:22:07,320 --> 00:22:09,059
command to get all the processes that

526
00:22:09,059 --> 00:22:11,520
we're running and the diff that with the

527
00:22:11,520 --> 00:22:13,380
previous one so it was not interested in

528
00:22:13,380 --> 00:22:15,179
the processes that were already running

529
00:22:15,179 --> 00:22:18,120
during the previous iteration right

530
00:22:18,120 --> 00:22:19,980
um it was only interested in new

531
00:22:19,980 --> 00:22:21,840
processes

532
00:22:21,840 --> 00:22:24,059
um and then it removed the processes

533
00:22:24,059 --> 00:22:27,000
that had the name not starting with com

534
00:22:27,000 --> 00:22:29,340
dot so it was only interested in

535
00:22:29,340 --> 00:22:30,900
processes that were starting with com

536
00:22:30,900 --> 00:22:33,600
dot something so we'd assumed that all

537
00:22:33,600 --> 00:22:36,900
of the interesting Android apps will

538
00:22:36,900 --> 00:22:38,640
have a name package name starting with

539
00:22:38,640 --> 00:22:42,240
com dot something then it did a bit more

540
00:22:42,240 --> 00:22:44,940
filtering it removed the processes that

541
00:22:44,940 --> 00:22:46,980
it was not interested in this was a list

542
00:22:46,980 --> 00:22:49,080
that was more hard-coded but also

543
00:22:49,080 --> 00:22:52,500
updatable from CNC so after all that

544
00:22:52,500 --> 00:22:55,080
filtering and removing all of the

545
00:22:55,080 --> 00:22:57,120
uninteresting processes it took the one

546
00:22:57,120 --> 00:22:59,640
with the highest process ID as the

547
00:22:59,640 --> 00:23:01,080
activity that was running in the

548
00:23:01,080 --> 00:23:03,179
foreground it has to do all of that

549
00:23:03,179 --> 00:23:05,159
because getting foreground activity on

550
00:23:05,159 --> 00:23:09,240
any new Android is very difficult so

551
00:23:09,240 --> 00:23:11,340
let's try doing that and if you think

552
00:23:11,340 --> 00:23:13,860
about it for maybe two minutes you can

553
00:23:13,860 --> 00:23:16,799
figure out multiple edge cases in which

554
00:23:16,799 --> 00:23:19,020
it was don't be the top activity that

555
00:23:19,020 --> 00:23:22,020
they were looking for also the PS

556
00:23:22,020 --> 00:23:24,720
process doesn't really our DPS command

557
00:23:24,720 --> 00:23:27,240
doesn't really work that way on new

558
00:23:27,240 --> 00:23:29,280
versions of Android anymore

559
00:23:29,280 --> 00:23:32,220
okay so finally uh last couple of

560
00:23:32,220 --> 00:23:34,320
minutes I will tell you what I meant

561
00:23:34,320 --> 00:23:35,760
through the whole talk when I said

562
00:23:35,760 --> 00:23:38,760
detection and how we combat that so

563
00:23:38,760 --> 00:23:41,100
obviously you cannot remove the OT app

564
00:23:41,100 --> 00:23:42,960
from user devices because users won't

565
00:23:42,960 --> 00:23:45,900
get the OTAs which is super important

566
00:23:45,900 --> 00:23:48,840
for the users this is also why it's

567
00:23:48,840 --> 00:23:51,240
particularly interesting abuse Vector

568
00:23:51,240 --> 00:23:53,880
right because the attackers know that

569
00:23:53,880 --> 00:23:56,700
the OT app has to stay on the device

570
00:23:56,700 --> 00:24:00,179
so um Whenever there is a new device

571
00:24:00,179 --> 00:24:03,360
being released with Google apps on them

572
00:24:03,360 --> 00:24:05,400
it has to go through a number of tests

573
00:24:05,400 --> 00:24:08,039
and these are fairly comprehensive tests

574
00:24:08,039 --> 00:24:12,059
they cover compatibility aspects so

575
00:24:12,059 --> 00:24:13,380
something that is probably not

576
00:24:13,380 --> 00:24:14,880
interesting for the audience here but

577
00:24:14,880 --> 00:24:18,179
it's very important for for the users up

578
00:24:18,179 --> 00:24:20,820
to security aspects like vulnerabilities

579
00:24:20,820 --> 00:24:24,179
patches and also malware scanning in

580
00:24:24,179 --> 00:24:26,460
particular BTS built test Suite is the

581
00:24:26,460 --> 00:24:28,380
one that we run on system images to make

582
00:24:28,380 --> 00:24:31,860
sure that that there are no malware apps

583
00:24:31,860 --> 00:24:33,600
and the Trends on the whole system image

584
00:24:33,600 --> 00:24:37,020
so the apps are scanned but also all the

585
00:24:37,020 --> 00:24:38,760
other binaries are scanned so I've

586
00:24:38,760 --> 00:24:41,460
mentioned a few binaries that were used

587
00:24:41,460 --> 00:24:44,280
to write by these OT apps or like system

588
00:24:44,280 --> 00:24:46,559
services this is all part of the system

589
00:24:46,559 --> 00:24:49,440
image so the BTS scanning process make

590
00:24:49,440 --> 00:24:51,000
sure it makes sure to take this into

591
00:24:51,000 --> 00:24:53,580
account and then the device is either

592
00:24:53,580 --> 00:24:55,200
approved or it's not if it's not

593
00:24:55,200 --> 00:24:58,140
approved it has to the system image has

594
00:24:58,140 --> 00:25:00,480
to change function the malware has to be

595
00:25:00,480 --> 00:25:02,820
has to be removed in this case that we

596
00:25:02,820 --> 00:25:06,600
are talking about and finally some stats

597
00:25:06,600 --> 00:25:11,159
for you so uh in 2021 last calendar year

598
00:25:11,159 --> 00:25:14,580
we scanned three more than 3.4 million

599
00:25:14,580 --> 00:25:16,740
pre-installed applications this is only

600
00:25:16,740 --> 00:25:19,020
the applications and they were scanned

601
00:25:19,020 --> 00:25:20,700
on over 100

602
00:25:20,700 --> 00:25:23,039
000 system images

603
00:25:23,039 --> 00:25:25,679
during the whole year so as I said apps

604
00:25:25,679 --> 00:25:27,720
are just one part of it the whole system

605
00:25:27,720 --> 00:25:30,260
images can't include including the

606
00:25:30,260 --> 00:25:35,400
binaries that are not in apps okay so

607
00:25:35,400 --> 00:25:37,380
this is everything thank you for

608
00:25:37,380 --> 00:25:39,900
listening uh go follow Alec even though

609
00:25:39,900 --> 00:25:42,480
he's not here uh go follow him on

610
00:25:42,480 --> 00:25:44,159
Twitter he did a lot of research that

611
00:25:44,159 --> 00:25:46,500
I've presented here uh and this is my

612
00:25:46,500 --> 00:25:48,360
Twitter handle so you can also follow me

613
00:25:48,360 --> 00:25:50,640
and thank you and if you have any

614
00:25:50,640 --> 00:25:52,799
questions I think we have some time to

615
00:25:52,799 --> 00:25:56,600
answer them yep yeah thank you

616
00:26:00,600 --> 00:26:02,580
do we have any questions there's one

617
00:26:02,580 --> 00:26:03,659
question over there wait for the

618
00:26:03,659 --> 00:26:05,220
microphone because otherwise we will not

619
00:26:05,220 --> 00:26:07,580
hear you

620
00:26:07,919 --> 00:26:11,520
hi Lucas can you hear me yes uh so you

621
00:26:11,520 --> 00:26:13,919
said that the uh these these malicious

622
00:26:13,919 --> 00:26:18,779
OTA apps were um ignoring TLS uh error

623
00:26:18,779 --> 00:26:21,360
messages does that mean it's easier to

624
00:26:21,360 --> 00:26:23,700
machine in the middle of them and sniff

625
00:26:23,700 --> 00:26:25,460
the traffic

626
00:26:25,460 --> 00:26:29,700
yeah kind of but this is only or I don't

627
00:26:29,700 --> 00:26:31,320
know if they may accidentally better but

628
00:26:31,320 --> 00:26:33,659
this is only about the CNC communication

629
00:26:33,659 --> 00:26:36,419
it's not about the OT communication

630
00:26:36,419 --> 00:26:39,120
which was done through a different set

631
00:26:39,120 --> 00:26:42,539
of source code does that make sense okay

632
00:26:42,539 --> 00:26:45,080
yeah

633
00:26:45,900 --> 00:26:48,000
um any further questions this one right

634
00:26:48,000 --> 00:26:50,279
over there

635
00:26:50,279 --> 00:26:52,860
are you able to reveal the device

636
00:26:52,860 --> 00:26:55,440
manufacturers which obviously have

637
00:26:55,440 --> 00:26:57,620
allowed these things to be pre-installed

638
00:26:57,620 --> 00:27:02,100
I don't remember them uh but it's not

639
00:27:02,100 --> 00:27:05,700
it's not limited to like one particular

640
00:27:05,700 --> 00:27:10,200
one if that helps it's uh again due to

641
00:27:10,200 --> 00:27:13,740
the way that the supply chain is set up

642
00:27:13,740 --> 00:27:15,900
they were just subcontracting into a

643
00:27:15,900 --> 00:27:18,120
third party and then that third party

644
00:27:18,120 --> 00:27:20,460
turns out it turned out to provide

645
00:27:20,460 --> 00:27:23,419
malicious code right

646
00:27:23,520 --> 00:27:25,380
we still have time for a couple more

647
00:27:25,380 --> 00:27:29,240
questions there's one way back there

648
00:27:30,240 --> 00:27:32,760
uh hi awesome talk uh just wanted to ask

649
00:27:32,760 --> 00:27:34,679
what's the recourse for the user if they

650
00:27:34,679 --> 00:27:36,720
end up with a device that has an OT at

651
00:27:36,720 --> 00:27:40,020
the downloads malware uh install updates

652
00:27:40,020 --> 00:27:43,080
because when we work with the oems I

653
00:27:43,080 --> 00:27:45,299
forgot to mention that uh that's a very

654
00:27:45,299 --> 00:27:47,220
good question to mention that we also

655
00:27:47,220 --> 00:27:49,559
reach out to oems to ask them to update

656
00:27:49,559 --> 00:27:51,720
the devices that already have malware in

657
00:27:51,720 --> 00:27:54,900
the wild so it's not only that we scan

658
00:27:54,900 --> 00:27:56,460
the devices before they hit the market

659
00:27:56,460 --> 00:27:59,580
we also do scan them once they are out

660
00:27:59,580 --> 00:28:02,400
and the oems will provide a system

661
00:28:02,400 --> 00:28:05,520
update for uh malware discovered that

662
00:28:05,520 --> 00:28:08,220
way so the request for the user is make

663
00:28:08,220 --> 00:28:10,200
sure you have the your phone is up to

664
00:28:10,200 --> 00:28:12,380
date

665
00:28:12,779 --> 00:28:15,059
we have one more question there I think

666
00:28:15,059 --> 00:28:17,220
then we have to well we'll see how long

667
00:28:17,220 --> 00:28:18,600
it takes let's see

668
00:28:18,600 --> 00:28:21,179
others are there certain

669
00:28:21,179 --> 00:28:23,400
um firmware over there service providers

670
00:28:23,400 --> 00:28:27,360
that uh oems use that you notice tend to

671
00:28:27,360 --> 00:28:28,919
be

672
00:28:28,919 --> 00:28:31,559
um tend to push out malicious OTA

673
00:28:31,559 --> 00:28:35,940
updates more often than others and if so

674
00:28:35,940 --> 00:28:38,820
um do you or can you scrutinize those

675
00:28:38,820 --> 00:28:41,179
providers a bit more than others

676
00:28:41,179 --> 00:28:44,580
so again this is not about the OT

677
00:28:44,580 --> 00:28:47,760
updates OT updates are just provided

678
00:28:47,760 --> 00:28:51,059
through their infrastructure but the

679
00:28:51,059 --> 00:28:53,279
whole process of providing the OT update

680
00:28:53,279 --> 00:28:57,360
is uh safe and secure and this is a

681
00:28:57,360 --> 00:29:00,360
separate thing with the additional code

682
00:29:00,360 --> 00:29:02,340
that was separate from the code that

683
00:29:02,340 --> 00:29:04,440
handled the OTA updates

684
00:29:04,440 --> 00:29:06,659
so

685
00:29:06,659 --> 00:29:08,940
to answer your questions I

686
00:29:08,940 --> 00:29:11,880
I don't they cannot really interfere

687
00:29:11,880 --> 00:29:14,820
with that because the OTA system image

688
00:29:14,820 --> 00:29:18,059
is signed they just use the fact that

689
00:29:18,059 --> 00:29:20,399
you have the OTA app to put some

690
00:29:20,399 --> 00:29:22,440
additional code to it that will download

691
00:29:22,440 --> 00:29:25,020
apps

692
00:29:25,020 --> 00:29:27,000
foreign

693
00:29:27,000 --> 00:29:29,760
questions

694
00:29:29,760 --> 00:29:32,340
because we're basically out of time if

695
00:29:32,340 --> 00:29:34,020
not then thank uh thank you very much

696
00:29:34,020 --> 00:29:34,930
lucrash

697
00:29:34,930 --> 00:29:36,650
[Music]

698
00:29:36,650 --> 00:29:39,969
[Applause]

