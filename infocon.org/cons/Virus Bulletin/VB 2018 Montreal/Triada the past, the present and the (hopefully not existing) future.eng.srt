1
00:00:01,110 --> 00:00:03,480
the first talk it's gonna be by Lucas

2
00:00:03,480 --> 00:00:07,080
from Google he's gonna talk about triada

3
00:00:07,080 --> 00:00:09,660
the past the present and they hopefully

4
00:00:09,660 --> 00:00:13,290
not exist in future so let's see how

5
00:00:13,290 --> 00:00:17,010
much fun Lucas has with Android

6
00:00:17,010 --> 00:00:19,890
Lucas is over there being put the mic

7
00:00:19,890 --> 00:00:23,900
and he will be on the state's right now

8
00:00:29,029 --> 00:00:31,170
let's give him an applause

9
00:00:31,170 --> 00:00:46,440
what hick okay so I'm Mukesh whiskey and

10
00:00:46,440 --> 00:00:48,899
I'm a reverse engineer at Google as was

11
00:00:48,899 --> 00:00:51,800
mentioned and I spend my day looking at

12
00:00:51,800 --> 00:00:54,770
apps and looking at apps for badness and

13
00:00:54,770 --> 00:00:57,120
perhaps surprisingly today I won't be

14
00:00:57,120 --> 00:00:59,460
talking to you about an app I will be

15
00:00:59,460 --> 00:01:02,629
talking about something that are more

16
00:01:02,629 --> 00:01:06,479
pre-installed or part of the operating

17
00:01:06,479 --> 00:01:08,820
system but we will start with an app and

18
00:01:08,820 --> 00:01:10,920
this app will be routing trojan fairly

19
00:01:10,920 --> 00:01:13,049
non-routine trojan it was first

20
00:01:13,049 --> 00:01:16,049
discovered and described in early 2016

21
00:01:16,049 --> 00:01:19,650
and back then it was a regular routing

22
00:01:19,650 --> 00:01:20,909
charge answer which routed the device

23
00:01:20,909 --> 00:01:22,650
and then did some badness connected with

24
00:01:22,650 --> 00:01:26,430
the root privileges and then we will

25
00:01:26,430 --> 00:01:29,670
move on to a system level backdoor which

26
00:01:29,670 --> 00:01:31,110
was the next evolution of this

27
00:01:31,110 --> 00:01:34,979
particular family and then I will talk a

28
00:01:34,979 --> 00:01:37,619
little about how we reached out to the

29
00:01:37,619 --> 00:01:40,770
OEMs and try to solve that problem so

30
00:01:40,770 --> 00:01:42,060
let's start with some historical

31
00:01:42,060 --> 00:01:44,460
information and some information about

32
00:01:44,460 --> 00:01:47,820
giada routing children it was first

33
00:01:47,820 --> 00:01:51,329
described by kaspersky in March 2016 and

34
00:01:51,329 --> 00:01:54,210
it used all the exploits to gain root

35
00:01:54,210 --> 00:01:57,180
access on the device by alt I mean the

36
00:01:57,180 --> 00:01:59,640
newest exploit that I've seen worked

37
00:01:59,640 --> 00:02:01,860
only on Android KitKat which is Android

38
00:02:01,860 --> 00:02:06,869
4.4 and when it got that root access it

39
00:02:06,869 --> 00:02:10,979
dropped an su binary SU binary is a

40
00:02:10,979 --> 00:02:13,740
binary that allows any other app to

41
00:02:13,740 --> 00:02:16,200
elevate itself to root but this

42
00:02:16,200 --> 00:02:17,810
particular issue binary was a

43
00:02:17,810 --> 00:02:20,490
non-standard one and the non-standard

44
00:02:20,490 --> 00:02:22,530
part of it was that it requires the

45
00:02:22,530 --> 00:02:25,290
password in order to run so the app that

46
00:02:25,290 --> 00:02:28,440
wanted to run this su binary and get the

47
00:02:28,440 --> 00:02:31,260
root access had to know the correct

48
00:02:31,260 --> 00:02:33,930
password and you can see the routine

49
00:02:33,930 --> 00:02:35,700
that checks for that password here and

50
00:02:35,700 --> 00:02:37,830
the password is just a number of

51
00:02:37,830 --> 00:02:40,650
different letters and numbers starting

52
00:02:40,650 --> 00:02:44,250
with AC so Tejada had a very complex

53
00:02:44,250 --> 00:02:46,260
infection chain there were many many

54
00:02:46,260 --> 00:02:47,760
components there were many different

55
00:02:47,760 --> 00:02:49,230
apps that got dropped

56
00:02:49,230 --> 00:02:52,500
they had different kind of features and

57
00:02:52,500 --> 00:02:54,180
they tried to do different things so

58
00:02:54,180 --> 00:02:56,370
they all wanted to use that as you

59
00:02:56,370 --> 00:02:58,890
binary to do different things and I kind

60
00:02:58,890 --> 00:03:00,560
of lumped all those things together so

61
00:03:00,560 --> 00:03:04,020
some of the components of Java tried to

62
00:03:04,020 --> 00:03:06,720
install apps on the system partition for

63
00:03:06,720 --> 00:03:08,040
those of you who don't know we're moving

64
00:03:08,040 --> 00:03:09,570
an app from the system partition is

65
00:03:09,570 --> 00:03:11,130
slightly more complicated than we're

66
00:03:11,130 --> 00:03:13,560
moving in the Ramona it also tried to

67
00:03:13,560 --> 00:03:15,180
turn off Google Play protect which is

68
00:03:15,180 --> 00:03:17,700
our anti-malware solution it tried to

69
00:03:17,700 --> 00:03:20,190
clean the device and now by cleaning the

70
00:03:20,190 --> 00:03:23,430
device they mean a kind of a space

71
00:03:23,430 --> 00:03:26,580
management system so because Jana was

72
00:03:26,580 --> 00:03:29,190
mainly targeting low-end devices they

73
00:03:29,190 --> 00:03:31,230
tend to have a lower disk space in

74
00:03:31,230 --> 00:03:34,320
general so they tried to make sure that

75
00:03:34,320 --> 00:03:36,750
there is enough disk space to drop new

76
00:03:36,750 --> 00:03:38,940
components and removed all the ones they

77
00:03:38,940 --> 00:03:43,560
didn't want they also make the some of

78
00:03:43,560 --> 00:03:45,570
the files immutable and that is done

79
00:03:45,570 --> 00:03:47,640
through a change attribute comment and

80
00:03:47,640 --> 00:03:49,380
if you do something like that to the

81
00:03:49,380 --> 00:03:51,450
data file to the file then you have to

82
00:03:51,450 --> 00:03:53,700
first remove the immutable flag from the

83
00:03:53,700 --> 00:03:56,100
file in order to remove it so again a

84
00:03:56,100 --> 00:03:59,280
kind of a persistence mechanism and it

85
00:03:59,280 --> 00:04:02,820
also used auth tokens on the device as

86
00:04:02,820 --> 00:04:04,290
far as I know that he never left the

87
00:04:04,290 --> 00:04:05,910
device the only thing they used it for

88
00:04:05,910 --> 00:04:09,600
is to install some apps from Google Play

89
00:04:09,600 --> 00:04:11,640
so it acts as the auth token and then

90
00:04:11,640 --> 00:04:15,810
install other apps but and one other

91
00:04:15,810 --> 00:04:18,029
thing that I did which I found quite

92
00:04:18,029 --> 00:04:22,169
interesting is it tried to inject into

93
00:04:22,169 --> 00:04:24,810
other processes memory again you need to

94
00:04:24,810 --> 00:04:27,130
root to do that so obviously

95
00:04:27,130 --> 00:04:28,960
you need to all to do all that feature

96
00:04:28,960 --> 00:04:32,680
so it was relying on being on having a

97
00:04:32,680 --> 00:04:35,200
successful exploit and it injected into

98
00:04:35,200 --> 00:04:38,610
four different browser processes and it

99
00:04:38,610 --> 00:04:41,560
it injected using a framework called

100
00:04:41,560 --> 00:04:44,230
droid injector so and that framework has

101
00:04:44,230 --> 00:04:47,620
a specific it takes a specific elf file

102
00:04:47,620 --> 00:04:51,160
a native code file and then it P traces

103
00:04:51,160 --> 00:04:54,010
into a remote process when it P traces

104
00:04:54,010 --> 00:04:57,160
into a remote process it Maps a memory

105
00:04:57,160 --> 00:05:00,880
address in a remote process and then has

106
00:05:00,880 --> 00:05:03,730
a very small shellcode and the only

107
00:05:03,730 --> 00:05:05,640
purpose of the shellcode is to load the

108
00:05:05,640 --> 00:05:08,980
elf file in this case inject the data so

109
00:05:08,980 --> 00:05:13,360
and then I ran a specific function that

110
00:05:13,360 --> 00:05:17,050
is being exported okay and there was

111
00:05:17,050 --> 00:05:19,480
another thing and another interesting

112
00:05:19,480 --> 00:05:21,730
thing was that they used a very specific

113
00:05:21,730 --> 00:05:24,280
decryption scheme and that decryption

114
00:05:24,280 --> 00:05:27,400
scheme is double sore because you know

115
00:05:27,400 --> 00:05:31,360
the boxer is stronger than just one X R

116
00:05:31,360 --> 00:05:34,570
so you can see a loop here when they

117
00:05:34,570 --> 00:05:36,490
went through a loop twice with two

118
00:05:36,490 --> 00:05:38,980
different passwords and I gave you the

119
00:05:38,980 --> 00:05:40,540
use and a number of different passwords

120
00:05:40,540 --> 00:05:42,220
and they use different passwords for GNC

121
00:05:42,220 --> 00:05:43,780
communication they use different

122
00:05:43,780 --> 00:05:44,890
passwords for Strings

123
00:05:44,890 --> 00:05:47,980
for assets all of this was encrypted

124
00:05:47,980 --> 00:05:49,630
using a number of this one different

125
00:05:49,630 --> 00:05:53,110
passwords and I I chose my two favorite

126
00:05:53,110 --> 00:05:56,260
ones that were used in conjunction and I

127
00:05:56,260 --> 00:05:58,480
bolded the second letter because it's

128
00:05:58,480 --> 00:06:01,690
the same in both passwords which I guess

129
00:06:01,690 --> 00:06:03,490
you can figure out what that means for

130
00:06:03,490 --> 00:06:07,630
the double sorry encryption so yeah they

131
00:06:07,630 --> 00:06:09,430
used a very specific form of encryption

132
00:06:09,430 --> 00:06:14,910
which helped us with identifying more

133
00:06:14,910 --> 00:06:19,990
apps the problem with that kind of

134
00:06:19,990 --> 00:06:23,320
approach is that if you are routing the

135
00:06:23,320 --> 00:06:25,570
device you are relying on exploits to do

136
00:06:25,570 --> 00:06:28,480
all the work and the problem with newer

137
00:06:28,480 --> 00:06:30,700
Android versions is that it's very hard

138
00:06:30,700 --> 00:06:33,190
to exploit it and it's very hard to

139
00:06:33,190 --> 00:06:37,240
exploit it reliably so that in addition

140
00:06:37,240 --> 00:06:38,500
to

141
00:06:38,500 --> 00:06:40,750
own detection mechanism that were based

142
00:06:40,750 --> 00:06:46,420
on some IOC s resulted in a very sharp

143
00:06:46,420 --> 00:06:49,390
decline of Giada routine surgeon on

144
00:06:49,390 --> 00:06:51,280
devices because people changed their

145
00:06:51,280 --> 00:06:54,280
devices to newer versions and and all

146
00:06:54,280 --> 00:06:57,940
that so the authors decided to kind of

147
00:06:57,940 --> 00:06:59,860
choose a different path instead of

148
00:06:59,860 --> 00:07:02,620
finding with detection and trying to get

149
00:07:02,620 --> 00:07:05,320
exploits which are again more expensive

150
00:07:05,320 --> 00:07:08,980
they decided to put a system-level

151
00:07:08,980 --> 00:07:11,940
vector a vector that was part of the

152
00:07:11,940 --> 00:07:14,410
system image on some low-end Android

153
00:07:14,410 --> 00:07:16,600
devices again they were targeting the

154
00:07:16,600 --> 00:07:19,450
low-end market so this system level

155
00:07:19,450 --> 00:07:21,930
vector was in fact just one line of code

156
00:07:21,930 --> 00:07:24,250
that jumped to a completely different

157
00:07:24,250 --> 00:07:28,150
subroutine and completely different part

158
00:07:28,150 --> 00:07:30,490
of the code and this was additional line

159
00:07:30,490 --> 00:07:32,669
of code was present in the lock function

160
00:07:32,669 --> 00:07:35,860
and when you think about it it's a very

161
00:07:35,860 --> 00:07:39,070
creative way through it's a very

162
00:07:39,070 --> 00:07:40,600
creative place to put it to put a

163
00:07:40,600 --> 00:07:43,360
backdoor in because every single app on

164
00:07:43,360 --> 00:07:45,669
your device probably will log something

165
00:07:45,669 --> 00:07:46,930
at some point right

166
00:07:46,930 --> 00:07:49,690
so every single app will execute the

167
00:07:49,690 --> 00:07:51,700
lock function and every single app will

168
00:07:51,700 --> 00:07:53,470
execute this particular line of code

169
00:07:53,470 --> 00:07:55,479
because it was again part of the system

170
00:07:55,479 --> 00:07:58,060
image so if you have a back there in

171
00:07:58,060 --> 00:08:00,880
this place what you are allowed to do is

172
00:08:00,880 --> 00:08:03,610
you are allowed to run in a context of

173
00:08:03,610 --> 00:08:08,020
any app that locks something which is of

174
00:08:08,020 --> 00:08:10,900
course very good for the for the

175
00:08:10,900 --> 00:08:13,270
malicious actors and this version was

176
00:08:13,270 --> 00:08:16,510
first described by dr. web in July 2017

177
00:08:16,510 --> 00:08:19,479
in the strings that you can see here is

178
00:08:19,479 --> 00:08:23,800
a part of the configuration so that a

179
00:08:23,800 --> 00:08:26,620
bunch of letters and numbers actually

180
00:08:26,620 --> 00:08:29,020
translates into different conflicts and

181
00:08:29,020 --> 00:08:31,450
was different based on the different

182
00:08:31,450 --> 00:08:35,020
devices and you can also see a familiar

183
00:08:35,020 --> 00:08:36,820
code structure so let's start with the

184
00:08:36,820 --> 00:08:38,770
strings first as you can see the strings

185
00:08:38,770 --> 00:08:41,200
are kind of office gated and I don't

186
00:08:41,200 --> 00:08:43,179
know if you know that but generally in

187
00:08:43,179 --> 00:08:44,950
the Android operating system we don't

188
00:08:44,950 --> 00:08:46,450
office create strings and we definitely

189
00:08:46,450 --> 00:08:50,440
don't use sort to do that so if you see

190
00:08:50,440 --> 00:08:51,610
a bunch of strings

191
00:08:51,610 --> 00:08:53,800
an Android library that probably means

192
00:08:53,800 --> 00:08:56,200
that there's some a bunch of encrypted

193
00:08:56,200 --> 00:08:57,910
or obfuscated things that probably means

194
00:08:57,910 --> 00:09:00,220
that there's something wrong with it and

195
00:09:00,220 --> 00:09:02,709
when I looked at the function that

196
00:09:02,709 --> 00:09:06,700
described that the crypts those strings

197
00:09:06,700 --> 00:09:09,790
it looked like you can see on the right

198
00:09:09,790 --> 00:09:11,350
hand side what you can see on the right

199
00:09:11,350 --> 00:09:14,589
hand side you can see two looks and you

200
00:09:14,589 --> 00:09:17,380
can just imagine that every one of those

201
00:09:17,380 --> 00:09:19,480
loops had one extra instruction in them

202
00:09:19,480 --> 00:09:23,829
because it was it was in fact true so

203
00:09:23,829 --> 00:09:26,649
again double saw and a completely

204
00:09:26,649 --> 00:09:29,589
different part of the code I design it

205
00:09:29,589 --> 00:09:31,480
was of course not implemented in Java

206
00:09:31,480 --> 00:09:34,480
because everything that they did on the

207
00:09:34,480 --> 00:09:36,940
system level was implemented in C C++ in

208
00:09:36,940 --> 00:09:40,779
native code and they also did code

209
00:09:40,779 --> 00:09:44,680
injection basically like the old version

210
00:09:44,680 --> 00:09:47,709
so the code injection was rewritten and

211
00:09:47,709 --> 00:09:50,890
it wasn't as straightforward as in the

212
00:09:50,890 --> 00:09:53,050
standalone version they introduced a new

213
00:09:53,050 --> 00:09:54,279
file format

214
00:09:54,279 --> 00:09:56,829
I'm calling this MMD file format but

215
00:09:56,829 --> 00:10:00,300
just based on the magic bytes that start

216
00:10:00,300 --> 00:10:03,279
every file so those bytes are MMD and

217
00:10:03,279 --> 00:10:07,959
after Magic bytes there is a hash of the

218
00:10:07,959 --> 00:10:11,140
file and then there is a hash auditor of

219
00:10:11,140 --> 00:10:13,510
the decrypted file and then there is the

220
00:10:13,510 --> 00:10:15,339
file length and then there is actual

221
00:10:15,339 --> 00:10:19,329
encrypted file as you can imagine all of

222
00:10:19,329 --> 00:10:22,149
those files were encrypted using again

223
00:10:22,149 --> 00:10:25,480
the books are obviously because this is

224
00:10:25,480 --> 00:10:27,339
the only encryption scheme that this

225
00:10:27,339 --> 00:10:29,370
being used throughout the whole triada

226
00:10:29,370 --> 00:10:33,040
and all those files had something in

227
00:10:33,040 --> 00:10:36,190
common so then their name was an md5

228
00:10:36,190 --> 00:10:39,310
hash of the process name and then some

229
00:10:39,310 --> 00:10:41,890
other characters that were not that

230
00:10:41,890 --> 00:10:45,550
important actually adding 36 to the mix

231
00:10:45,550 --> 00:10:48,130
kind of threw me off because it's it's

232
00:10:48,130 --> 00:10:50,199
numbers so the length of the fine line

233
00:10:50,199 --> 00:10:54,029
wasn't exactly the length of the md5 but

234
00:10:54,029 --> 00:10:57,459
the md5 hash was the md5 hash of the

235
00:10:57,459 --> 00:10:59,320
process that they were targeting so

236
00:10:59,320 --> 00:11:01,000
whatever code was in the encrypted

237
00:11:01,000 --> 00:11:04,480
portion was being injected into the

238
00:11:04,480 --> 00:11:05,510
process that

239
00:11:05,510 --> 00:11:10,519
this particular md5 hash which again is

240
00:11:10,519 --> 00:11:12,829
a kind of anti analysis measure because

241
00:11:12,829 --> 00:11:15,980
you have to figure out which process

242
00:11:15,980 --> 00:11:18,829
name maps to which md5 hash fortunately

243
00:11:18,829 --> 00:11:20,300
they were using very popular process

244
00:11:20,300 --> 00:11:24,139
names so it wasn't that hard to to

245
00:11:24,139 --> 00:11:26,899
figure that out and the process name

246
00:11:26,899 --> 00:11:29,060
that they were using we were able to

247
00:11:29,060 --> 00:11:32,089
find two different injections one was to

248
00:11:32,089 --> 00:11:35,510
calm the Android system UI and that

249
00:11:35,510 --> 00:11:40,130
injection had a very simple reason

250
00:11:40,130 --> 00:11:42,699
so back in android lollipop we

251
00:11:42,699 --> 00:11:45,740
deprecated get running tasks permission

252
00:11:45,740 --> 00:11:49,430
and you are not you are not able to get

253
00:11:49,430 --> 00:11:52,720
all the running tasks on the device and

254
00:11:52,720 --> 00:11:55,070
also there was a new permission

255
00:11:55,070 --> 00:11:58,940
introduced that is get real this is

256
00:11:58,940 --> 00:12:01,519
called get real tasks and system UI as

257
00:12:01,519 --> 00:12:04,459
it's a part of your system user

258
00:12:04,459 --> 00:12:06,709
interface has the permission in order to

259
00:12:06,709 --> 00:12:08,930
list all the running processes and tasks

260
00:12:08,930 --> 00:12:12,319
so what they did is that you really

261
00:12:12,319 --> 00:12:14,899
wanted to list the top-ranking process

262
00:12:14,899 --> 00:12:18,319
and they wanted to list the top running

263
00:12:18,319 --> 00:12:22,670
process in order to display more

264
00:12:22,670 --> 00:12:24,470
contacts ads I don't know something like

265
00:12:24,470 --> 00:12:28,970
that and they did so to a code injection

266
00:12:28,970 --> 00:12:31,220
and then they communicated with the

267
00:12:31,220 --> 00:12:33,319
system UI any process that wanted to

268
00:12:33,319 --> 00:12:35,360
could communicate with the system UI and

269
00:12:35,360 --> 00:12:38,839
send a specific intent to that system UI

270
00:12:38,839 --> 00:12:41,269
and if you send that specific intent

271
00:12:41,269 --> 00:12:44,930
system UI would simply run get running

272
00:12:44,930 --> 00:12:47,329
tasks and get the original running tasks

273
00:12:47,329 --> 00:12:48,980
and then respond using a different

274
00:12:48,980 --> 00:12:52,029
intent so not only you had to know the

275
00:12:52,029 --> 00:12:55,160
intent that you had to send to system UI

276
00:12:55,160 --> 00:12:57,019
but you also had to listen on the

277
00:12:57,019 --> 00:12:59,120
incoming intends to get the result and

278
00:12:59,120 --> 00:13:02,839
this kind of communication was also part

279
00:13:02,839 --> 00:13:05,930
of their another code injection and the

280
00:13:05,930 --> 00:13:09,980
other code injection was in the comm dot

281
00:13:09,980 --> 00:13:12,440
Android offending which is Google Play

282
00:13:12,440 --> 00:13:17,000
Store and for Google Play Store process

283
00:13:17,000 --> 00:13:19,130
they had five different come

284
00:13:19,130 --> 00:13:22,460
and there are 10 here because they used

285
00:13:22,460 --> 00:13:25,820
a command enum and that command enum had

286
00:13:25,820 --> 00:13:28,550
both the request and the result so again

287
00:13:28,550 --> 00:13:30,680
the communication was their intent being

288
00:13:30,680 --> 00:13:33,380
sent to the google play stir up and

289
00:13:33,380 --> 00:13:36,350
there was an a response from the Google

290
00:13:36,350 --> 00:13:38,360
Play Store app and if the intent that

291
00:13:38,360 --> 00:13:40,070
was sent to the Google Play Store app

292
00:13:40,070 --> 00:13:42,380
had one that means that it was the

293
00:13:42,380 --> 00:13:44,600
download request and the response had to

294
00:13:44,600 --> 00:13:50,330
endure extra strings so and the things

295
00:13:50,330 --> 00:13:54,020
that they did is they had the download

296
00:13:54,020 --> 00:13:57,080
request and the only thing they did is

297
00:13:57,080 --> 00:14:01,880
download that the add any file that they

298
00:14:01,880 --> 00:14:03,800
wanted and that file was downloaded in

299
00:14:03,800 --> 00:14:05,660
the Google Play app process using that

300
00:14:05,660 --> 00:14:08,300
inject so whenever it was finished that

301
00:14:08,300 --> 00:14:11,060
you will get the downloads result again

302
00:14:11,060 --> 00:14:14,990
this download was encrypted

303
00:14:14,990 --> 00:14:17,540
and when I say encrypted you all know

304
00:14:17,540 --> 00:14:20,060
how it was encrypted so I don't have to

305
00:14:20,060 --> 00:14:23,600
repeat it so then the other thing they

306
00:14:23,600 --> 00:14:26,590
did they also did an installer request

307
00:14:26,590 --> 00:14:28,670
so of course they downloaded something

308
00:14:28,670 --> 00:14:29,960
they wanted to install it on your device

309
00:14:29,960 --> 00:14:33,320
true and code injection in the Google

310
00:14:33,320 --> 00:14:35,780
Play Store app and interestingly they

311
00:14:35,780 --> 00:14:38,870
used real unpopular Google type package

312
00:14:38,870 --> 00:14:40,850
names the apps that they download that

313
00:14:40,850 --> 00:14:42,410
had nothing to do with the apps that

314
00:14:42,410 --> 00:14:44,150
were in Google Play sir

315
00:14:44,150 --> 00:14:46,400
and in fact they did not they didn't

316
00:14:46,400 --> 00:14:48,530
even pretend to have anything to do with

317
00:14:48,530 --> 00:14:50,360
the Google Play Store apps but they use

318
00:14:50,360 --> 00:14:55,330
their package names for some reason and

319
00:14:55,330 --> 00:14:58,600
they use those package names to install

320
00:14:58,600 --> 00:15:01,550
to in their AP case that were installed

321
00:15:01,550 --> 00:15:03,350
on the device and again installation

322
00:15:03,350 --> 00:15:05,960
results simply returned that the

323
00:15:05,960 --> 00:15:08,780
installation happened then there was

324
00:15:08,780 --> 00:15:10,730
activation activation is process if

325
00:15:10,730 --> 00:15:12,440
you're not familiar with how android

326
00:15:12,440 --> 00:15:14,360
apps work after you install an app you

327
00:15:14,360 --> 00:15:16,040
have to click on an icon to make the app

328
00:15:16,040 --> 00:15:18,140
back to actually run on the device

329
00:15:18,140 --> 00:15:21,230
otherwise it won't run and it won't be

330
00:15:21,230 --> 00:15:24,800
active as they call it

331
00:15:24,800 --> 00:15:28,280
so activation was a way to make the app

332
00:15:28,280 --> 00:15:31,670
run on the device for the first time so

333
00:15:31,670 --> 00:15:32,630
instead of making the

334
00:15:32,630 --> 00:15:34,960
user click on an icon they kind of

335
00:15:34,960 --> 00:15:40,340
wanted to automate that part then there

336
00:15:40,340 --> 00:15:42,140
was pull request and pulled the results

337
00:15:42,140 --> 00:15:44,810
and I'm using Google Translate here so

338
00:15:44,810 --> 00:15:46,400
it's a translation of the Chinese

339
00:15:46,400 --> 00:15:48,680
strings that you can see on the light on

340
00:15:48,680 --> 00:15:51,500
the left here to the English strings

341
00:15:51,500 --> 00:15:53,750
that we can see on the right here it was

342
00:15:53,750 --> 00:15:55,220
all described in Chinese obviously

343
00:15:55,220 --> 00:15:57,620
that's why I'm using Chinese strings and

344
00:15:57,620 --> 00:16:01,130
Poole was simply heartbeat a kind of

345
00:16:01,130 --> 00:16:03,980
communication that lets the process know

346
00:16:03,980 --> 00:16:05,270
whether the code injection was

347
00:16:05,270 --> 00:16:07,430
successful or not so the process could

348
00:16:07,430 --> 00:16:10,130
send the pull request and if you've got

349
00:16:10,130 --> 00:16:12,110
the results it meant that the inject was

350
00:16:12,110 --> 00:16:15,440
successful in foshan and finally there

351
00:16:15,440 --> 00:16:17,030
is an uninstall request and answer

352
00:16:17,030 --> 00:16:19,190
result again they need to uninstall all

353
00:16:19,190 --> 00:16:21,080
the apps in order to do this space

354
00:16:21,080 --> 00:16:23,960
management thing and this space

355
00:16:23,960 --> 00:16:27,710
management thing as I say is is done in

356
00:16:27,710 --> 00:16:33,050
order to sorry in order to to save the

357
00:16:33,050 --> 00:16:36,230
space on those low-end devices ok next

358
00:16:36,230 --> 00:16:39,170
thing there is another problem that they

359
00:16:39,170 --> 00:16:41,960
had to solve so now they have the gate

360
00:16:41,960 --> 00:16:44,270
running tasks that they wanted they can

361
00:16:44,270 --> 00:16:47,060
download and install app through Google

362
00:16:47,060 --> 00:16:48,770
Play process not through Google Fiber

363
00:16:48,770 --> 00:16:52,160
through Google Play process and the

364
00:16:52,160 --> 00:16:54,440
other thing they have to have is a way

365
00:16:54,440 --> 00:16:56,360
of communicating with the system level

366
00:16:56,360 --> 00:16:58,490
back door it's not another app so you

367
00:16:58,490 --> 00:17:02,330
cannot communicate with it using intents

368
00:17:02,330 --> 00:17:04,579
or any other standard Android

369
00:17:04,579 --> 00:17:07,490
communication mechanism so what they did

370
00:17:07,490 --> 00:17:11,359
is if the app that they downloaded and

371
00:17:11,359 --> 00:17:13,400
installed wanted to communicate

372
00:17:13,400 --> 00:17:15,199
something to the system level back there

373
00:17:15,199 --> 00:17:17,359
it simply sent a logline

374
00:17:17,359 --> 00:17:20,810
a pre-programmed hard-coded log line

375
00:17:20,810 --> 00:17:24,319
that said hey I'm running whatever do

376
00:17:24,319 --> 00:17:25,329
something for me

377
00:17:25,329 --> 00:17:28,610
so if that log line was captured by the

378
00:17:28,610 --> 00:17:31,070
backdoor then the burglar could easily

379
00:17:31,070 --> 00:17:33,620
now that app is running fine but they

380
00:17:33,620 --> 00:17:36,290
needed a way to communicate back from

381
00:17:36,290 --> 00:17:39,980
the backdoor to the app right and that's

382
00:17:39,980 --> 00:17:42,200
not an easy feat when you're lying when

383
00:17:42,200 --> 00:17:43,100
you're running

384
00:17:43,100 --> 00:17:48,230
only in the log function so what they

385
00:17:48,230 --> 00:17:49,970
did is they used something called Java

386
00:17:49,970 --> 00:17:52,310
properties and on Android you may be

387
00:17:52,310 --> 00:17:54,710
familiar with system properties system

388
00:17:54,710 --> 00:17:56,870
properties are those system-wide

389
00:17:56,870 --> 00:17:58,700
properties that are the same for every

390
00:17:58,700 --> 00:18:01,220
process like a good example of a system

391
00:18:01,220 --> 00:18:03,170
property is built fingerprint both

392
00:18:03,170 --> 00:18:04,820
fingerprint is the same for whole device

393
00:18:04,820 --> 00:18:07,280
Java properties are slightly different

394
00:18:07,280 --> 00:18:11,990
they are specific to one process that's

395
00:18:11,990 --> 00:18:14,840
running on the device so if you have a

396
00:18:14,840 --> 00:18:16,850
java property you can have the same java

397
00:18:16,850 --> 00:18:20,060
property in different processes and each

398
00:18:20,060 --> 00:18:21,680
of those processes can have a different

399
00:18:21,680 --> 00:18:24,050
value so what they did is because they

400
00:18:24,050 --> 00:18:26,960
were able to run in every single context

401
00:18:26,960 --> 00:18:29,450
they were able to run in the apps

402
00:18:29,450 --> 00:18:31,400
context and they were able to set up

403
00:18:31,400 --> 00:18:34,040
some Java properties and the process had

404
00:18:34,040 --> 00:18:35,690
to know which properties to look for

405
00:18:35,690 --> 00:18:39,110
obviously but it was kind of in the know

406
00:18:39,110 --> 00:18:40,820
either way because it wanted to

407
00:18:40,820 --> 00:18:42,770
communicate with the back the right so

408
00:18:42,770 --> 00:18:45,370
they were able to expose things like

409
00:18:45,370 --> 00:18:49,550
interesting directory paths and version

410
00:18:49,550 --> 00:18:51,260
number and whether the backdoor was

411
00:18:51,260 --> 00:18:53,270
there or not so the app could decide

412
00:18:53,270 --> 00:18:56,420
whether to run or not and there was

413
00:18:56,420 --> 00:19:00,790
another very specific part of giada that

414
00:19:00,790 --> 00:19:04,030
was in a completely different place and

415
00:19:04,030 --> 00:19:08,360
seemed kind of disjoint so the other

416
00:19:08,360 --> 00:19:11,510
part was in a webview code and let me

417
00:19:11,510 --> 00:19:13,640
just clean up clean this up a bit for

418
00:19:13,640 --> 00:19:17,300
you so what the webview code this did

419
00:19:17,300 --> 00:19:19,070
and it's a snippet from the loadurl

420
00:19:19,070 --> 00:19:21,920
function in the webview so what the

421
00:19:21,920 --> 00:19:24,830
loadurl function did is it checked for

422
00:19:24,830 --> 00:19:27,020
the system property and if the system

423
00:19:27,020 --> 00:19:31,700
property was set to 1 it invoked this YH

424
00:19:31,700 --> 00:19:35,240
the URL function in addition to the

425
00:19:35,240 --> 00:19:38,990
usual code so what happened is if you

426
00:19:38,990 --> 00:19:41,900
loaded anything in a webview you would

427
00:19:41,900 --> 00:19:45,290
go to the you will get redirected to

428
00:19:45,290 --> 00:19:48,260
this y8 function and now I was not able

429
00:19:48,260 --> 00:19:50,060
to find an implementation of the twice

430
00:19:50,060 --> 00:19:50,840
function

431
00:19:50,840 --> 00:19:54,050
it was mostly code steps or something

432
00:19:54,050 --> 00:19:55,000
that didn't do any

433
00:19:55,000 --> 00:20:01,100
but based on the previous historical

434
00:20:01,100 --> 00:20:03,200
reference to the old-style routing

435
00:20:03,200 --> 00:20:05,330
children remember I I mentioned that it

436
00:20:05,330 --> 00:20:07,550
also did kind of a code injection to the

437
00:20:07,550 --> 00:20:10,850
browsers so you can draw an analogy to

438
00:20:10,850 --> 00:20:13,400
this kind of behavior so what they use

439
00:20:13,400 --> 00:20:15,260
the code injection in the browser

440
00:20:15,260 --> 00:20:18,860
previously it was to rewrite add URLs so

441
00:20:18,860 --> 00:20:22,690
instead of seeing ads for coming from

442
00:20:22,690 --> 00:20:25,550
whatever address decayed the website

443
00:20:25,550 --> 00:20:28,130
used they will redirect you to a

444
00:20:28,130 --> 00:20:30,290
different ad and effectively rewrite the

445
00:20:30,290 --> 00:20:32,540
URL for a different ad so the user

446
00:20:32,540 --> 00:20:35,390
wasn't even aware that a different ad

447
00:20:35,390 --> 00:20:38,180
was being displayed and that was like

448
00:20:38,180 --> 00:20:41,990
their whole their whole monetization

449
00:20:41,990 --> 00:20:45,230
model that they used kind of different

450
00:20:45,230 --> 00:20:50,840
ad networks okay so we were successfully

451
00:20:50,840 --> 00:20:53,450
able to chase them through and numerous

452
00:20:53,450 --> 00:20:55,790
other versions the newest one that I

453
00:20:55,790 --> 00:20:58,250
know of is called one point five point

454
00:20:58,250 --> 00:21:00,500
one and I'm using one point five point

455
00:21:00,500 --> 00:21:02,510
one because they had version numbers so

456
00:21:02,510 --> 00:21:05,990
this was fairly easy to track and they

457
00:21:05,990 --> 00:21:08,930
had a and this is the change log that I

458
00:21:08,930 --> 00:21:11,030
compiled it was not including each other

459
00:21:11,030 --> 00:21:14,120
unfortunately so I kind of looked at two

460
00:21:14,120 --> 00:21:16,730
different versions and had to between

461
00:21:16,730 --> 00:21:19,750
them and what this change log shows is

462
00:21:19,750 --> 00:21:22,940
for me it shows that there is a real

463
00:21:22,940 --> 00:21:26,090
development going on they not only care

464
00:21:26,090 --> 00:21:28,880
about the features that you know do all

465
00:21:28,880 --> 00:21:30,800
the badness and rewrite evils and all

466
00:21:30,800 --> 00:21:35,060
this stuff but they also do a normal

467
00:21:35,060 --> 00:21:38,510
regular software development so they

468
00:21:38,510 --> 00:21:40,310
change md5 hashes that I mentioned

469
00:21:40,310 --> 00:21:43,460
before to sha-1 it doesn't make anything

470
00:21:43,460 --> 00:21:46,070
more difficult because they only inject

471
00:21:46,070 --> 00:21:47,930
popular processes that we think you can

472
00:21:47,930 --> 00:21:50,390
still like have a bunch of hashes and

473
00:21:50,390 --> 00:21:53,570
recalculate them they introduce a delay

474
00:21:53,570 --> 00:21:55,940
they change the code injection framework

475
00:21:55,940 --> 00:21:59,000
then the newer the newer one actually

476
00:21:59,000 --> 00:22:02,680
didn't was more friendly to Dex files

477
00:22:02,680 --> 00:22:04,810
and then

478
00:22:04,810 --> 00:22:07,180
did they also did some compatibility

479
00:22:07,180 --> 00:22:09,970
upgrades for Android nougat and I think

480
00:22:09,970 --> 00:22:13,060
they were preparing a code to the to add

481
00:22:13,060 --> 00:22:15,010
additional codes to the system uija

482
00:22:15,010 --> 00:22:19,030
but I haven't seen where where this went

483
00:22:19,030 --> 00:22:20,590
through so there were only stops and

484
00:22:20,590 --> 00:22:23,310
like random places that didn't do

485
00:22:23,310 --> 00:22:27,730
anything okay so a reverse engineering

486
00:22:27,730 --> 00:22:30,630
is done the technical part is over and

487
00:22:30,630 --> 00:22:34,030
we had a unique opportunity of actually

488
00:22:34,030 --> 00:22:36,640
reaching out to the OEMs and figuring

489
00:22:36,640 --> 00:22:39,670
out what to do with this so after I

490
00:22:39,670 --> 00:22:42,250
bored you with technical details here is

491
00:22:42,250 --> 00:22:48,730
the the more human part let's say so how

492
00:22:48,730 --> 00:22:50,440
did the back there actually got on the

493
00:22:50,440 --> 00:22:53,980
device it's not easy to get something on

494
00:22:53,980 --> 00:22:57,490
the device especially if it's such a

495
00:22:57,490 --> 00:23:00,280
low-level back there what the audience

496
00:23:00,280 --> 00:23:03,220
do and again I'm talking about today

497
00:23:03,220 --> 00:23:06,250
Lowenthal yams what they do is they want

498
00:23:06,250 --> 00:23:08,320
to include a bunch of software features

499
00:23:08,320 --> 00:23:10,750
baked into Android that are maybe not

500
00:23:10,750 --> 00:23:12,580
part of the Android Open Source project

501
00:23:12,580 --> 00:23:14,740
so and there are companies out there

502
00:23:14,740 --> 00:23:19,180
that allow them to include additional

503
00:23:19,180 --> 00:23:22,390
features like face unlock or something

504
00:23:22,390 --> 00:23:23,010
like that

505
00:23:23,010 --> 00:23:26,700
and the audience use those companies to

506
00:23:26,700 --> 00:23:30,630
include their code in their device

507
00:23:30,630 --> 00:23:32,980
Android system and one of those

508
00:23:32,980 --> 00:23:36,730
third-party vendors included also three

509
00:23:36,730 --> 00:23:40,390
other vector of course it didn't you

510
00:23:40,390 --> 00:23:42,640
know it didn't advertise itself as hey I

511
00:23:42,640 --> 00:23:45,640
will include this other vector it it

512
00:23:45,640 --> 00:23:48,040
added some additional features and this

513
00:23:48,040 --> 00:23:50,800
Jolla back there and they didn't mention

514
00:23:50,800 --> 00:23:56,380
anything about it to the OEMs so what we

515
00:23:56,380 --> 00:24:00,010
did is we contacted 16 different OEMs

516
00:24:00,010 --> 00:24:02,650
that were identified having with having

517
00:24:02,650 --> 00:24:06,820
this particular giada problem and this

518
00:24:06,820 --> 00:24:08,710
problem was on 30 different devices

519
00:24:08,710 --> 00:24:13,150
across 2.5 million users worldwide and

520
00:24:13,150 --> 00:24:14,980
we contacted them and asked them to

521
00:24:14,980 --> 00:24:17,620
provide a system update did you remove

522
00:24:17,620 --> 00:24:18,300
three other

523
00:24:18,300 --> 00:24:20,370
from their devices and this is I think

524
00:24:20,370 --> 00:24:22,500
this is my favorite screenshot like ever

525
00:24:22,500 --> 00:24:24,780
in my whole security career it comes

526
00:24:24,780 --> 00:24:27,810
from the device that's on my desk and it

527
00:24:27,810 --> 00:24:29,550
was a device with Chadha and this is the

528
00:24:29,550 --> 00:24:32,190
system update the dream of giada from

529
00:24:32,190 --> 00:24:34,800
that device and I verified that but

530
00:24:34,800 --> 00:24:36,180
really the stream of chilla from the

531
00:24:36,180 --> 00:24:39,900
from the device so they start the

532
00:24:39,900 --> 00:24:41,640
providing system updates to all their

533
00:24:41,640 --> 00:24:44,880
users and users are free to download it

534
00:24:44,880 --> 00:24:49,230
install it and they will get get really

535
00:24:49,230 --> 00:24:55,830
the reader which is really good so to

536
00:24:55,830 --> 00:24:59,700
recap and I don't know how much time is

537
00:24:59,700 --> 00:25:02,010
great so to recap see other authors

538
00:25:02,010 --> 00:25:03,540
moved from a routine surgeon to a

539
00:25:03,540 --> 00:25:07,350
pre-installed backdoor as I as I told

540
00:25:07,350 --> 00:25:09,720
you about and I only mentioned this

541
00:25:09,720 --> 00:25:11,820
encryption routine but of course there

542
00:25:11,820 --> 00:25:13,530
are different iOS's that we are praising

543
00:25:13,530 --> 00:25:16,980
the attributional and they retain more

544
00:25:16,980 --> 00:25:18,510
or less the same functionality rapport

545
00:25:18,510 --> 00:25:23,780
and purpose they wanted to provide an

546
00:25:23,780 --> 00:25:26,700
different ad experience let's say to the

547
00:25:26,700 --> 00:25:29,370
users reverse-engineering showed

548
00:25:29,370 --> 00:25:31,380
multiple different code changes which

549
00:25:31,380 --> 00:25:34,080
were really in line with like software

550
00:25:34,080 --> 00:25:35,930
development and not necessarily

551
00:25:35,930 --> 00:25:37,860
developing the malicious features and

552
00:25:37,860 --> 00:25:39,720
only consequence constants or anything

553
00:25:39,720 --> 00:25:42,360
on those and we worked with all the

554
00:25:42,360 --> 00:25:45,600
affected audience that we were able to

555
00:25:45,600 --> 00:25:48,150
find and ask them to provide a system

556
00:25:48,150 --> 00:25:50,970
image update that removes the other and

557
00:25:50,970 --> 00:25:56,820
they did say also so we effectively hope

558
00:25:56,820 --> 00:26:00,120
that Chad I want comeback in the future

559
00:26:00,120 --> 00:26:04,760
in the future and that is all thank you

