1
00:00:00,269 --> 00:00:03,570
please welcome I'd rooms and roll and

2
00:00:03,570 --> 00:00:06,839
watch Americana school they will be

3
00:00:06,839 --> 00:00:11,099
presenting talk hide-and-seek about a

4
00:00:11,099 --> 00:00:14,030
beautiful book

5
00:00:14,030 --> 00:00:16,590
good morning everyone

6
00:00:16,590 --> 00:00:19,320
we're here to talk about a new botnet

7
00:00:19,320 --> 00:00:22,650
which we found in January this year it's

8
00:00:22,650 --> 00:00:26,220
very unique and I'm sure you're going to

9
00:00:26,220 --> 00:00:28,619
agree with me this talk is going to a

10
00:00:28,619 --> 00:00:32,009
bit more technical for two reasons one

11
00:00:32,009 --> 00:00:34,020
being what we find it very interesting

12
00:00:34,020 --> 00:00:36,920
on how it behaves and the second being

13
00:00:36,920 --> 00:00:40,590
we know how it works we don't know

14
00:00:40,590 --> 00:00:43,800
actually why in the sense that we have

15
00:00:43,800 --> 00:00:45,719
no idea what the author's intention is

16
00:00:45,719 --> 00:00:48,420
to do with this so if anyone has any

17
00:00:48,420 --> 00:00:50,489
idea or if the offer is in this room

18
00:00:50,489 --> 00:00:52,760
please tell us what are you doing and

19
00:00:52,760 --> 00:00:58,920
let us live our lives okay so a bit of

20
00:00:58,920 --> 00:01:01,170
context the pointer doesn't seem to be

21
00:01:01,170 --> 00:01:09,350
working at this point all right

22
00:01:09,350 --> 00:01:13,140
small hiccup so we've seen in the

23
00:01:13,140 --> 00:01:15,960
previous talk the state of the art and

24
00:01:15,960 --> 00:01:18,900
IOT botnets of course is Mirai and all

25
00:01:18,900 --> 00:01:22,619
of its variants I'll just briefly walk

26
00:01:22,619 --> 00:01:24,150
you through it just so we're on the same

27
00:01:24,150 --> 00:01:26,640
page and give you a bit of context and

28
00:01:26,640 --> 00:01:30,119
perspective moving forward so we usually

29
00:01:30,119 --> 00:01:33,570
have a central situ server and we may

30
00:01:33,570 --> 00:01:35,640
also have some separate machines used

31
00:01:35,640 --> 00:01:39,600
for just for infecting or for to which

32
00:01:39,600 --> 00:01:42,509
BOTS report new newly found victims

33
00:01:42,509 --> 00:01:46,439
which will then be infected usually

34
00:01:46,439 --> 00:01:49,979
these are all on the same server the

35
00:01:49,979 --> 00:01:51,479
main takeaway from this slide is that

36
00:01:51,479 --> 00:01:53,939
regardless of implementation variants

37
00:01:53,939 --> 00:01:56,670
and details they all share the same

38
00:01:56,670 --> 00:02:00,630
purpose and that is denial of service so

39
00:02:00,630 --> 00:02:03,350
what is hide-and-seek in this landscape

40
00:02:03,350 --> 00:02:07,740
it's a peer-to-peer alt botnet it's not

41
00:02:07,740 --> 00:02:09,449
the first of its kind we've also seen

42
00:02:09,449 --> 00:02:12,480
Hajime although Hajime uses BitTorrent

43
00:02:12,480 --> 00:02:13,050
as its P

44
00:02:13,050 --> 00:02:17,810
the protocol mm-hmm excuse me

45
00:02:17,810 --> 00:02:20,850
hide-and-seek uses a custom purity or

46
00:02:20,850 --> 00:02:23,660
protocol written from scratch it's also

47
00:02:23,660 --> 00:02:26,460
modular what we mean by that is that it

48
00:02:26,460 --> 00:02:29,610
can be updated in real time it keeps a

49
00:02:29,610 --> 00:02:33,150
cache a not necessarily a cache but a

50
00:02:33,150 --> 00:02:36,450
configuration which contains all of its

51
00:02:36,450 --> 00:02:38,970
known exploits and this configuration

52
00:02:38,970 --> 00:02:42,090
can be updated on the fly from nearby

53
00:02:42,090 --> 00:02:44,090
neighbors

54
00:02:44,090 --> 00:02:47,340
it also supports file sharing

55
00:02:47,340 --> 00:02:49,950
so the malware has access to the local

56
00:02:49,950 --> 00:02:52,170
file system and it caches any data that

57
00:02:52,170 --> 00:02:55,500
it's found that is specified through a

58
00:02:55,500 --> 00:02:59,660
runtime argument and this data can be

59
00:02:59,660 --> 00:03:04,860
requested by via hashes I've mentioned

60
00:03:04,860 --> 00:03:10,260
the update system the bots can be

61
00:03:10,260 --> 00:03:13,350
updated only with a valid signature

62
00:03:13,350 --> 00:03:18,410
so each bot has a hard-coded ECDC a

63
00:03:18,410 --> 00:03:21,030
public key only the offer has the

64
00:03:21,030 --> 00:03:24,450
private key so no arbitrary peer can

65
00:03:24,450 --> 00:03:28,770
update the entire network one other

66
00:03:28,770 --> 00:03:32,190
interesting thing is that the bot itself

67
00:03:32,190 --> 00:03:35,640
can be replaced so it can run arbitrary

68
00:03:35,640 --> 00:03:37,590
executable to receive arbitrary

69
00:03:37,590 --> 00:03:42,060
executables in random and also from all

70
00:03:42,060 --> 00:03:45,209
that we've seen and analyzed it has no

71
00:03:45,209 --> 00:03:47,850
denial of service capabilities so that's

72
00:03:47,850 --> 00:03:50,760
why we're really befuddled on one honor

73
00:03:50,760 --> 00:03:56,989
festoon ok as any bot worth its salt

74
00:03:56,989 --> 00:03:59,489
features two main components one being

75
00:03:59,489 --> 00:04:02,489
the scanner component each bot randomly

76
00:04:02,489 --> 00:04:06,209
generates say an IP address and a port

77
00:04:06,209 --> 00:04:09,420
from its list of known ports meaning

78
00:04:09,420 --> 00:04:15,450
ports with which it can interact with it

79
00:04:15,450 --> 00:04:17,608
will then attempt to connect to set IP

80
00:04:17,608 --> 00:04:21,329
and port if it gets a reply then it will

81
00:04:21,329 --> 00:04:22,180
go

82
00:04:22,180 --> 00:04:24,250
for the ropes an attempt to exploit the

83
00:04:24,250 --> 00:04:28,270
found device and of course the

84
00:04:28,270 --> 00:04:31,780
peer-to-peer protocol itself this is

85
00:04:31,780 --> 00:04:34,000
used as I've said for file exchange for

86
00:04:34,000 --> 00:04:36,940
updates for propagating throughout the

87
00:04:36,940 --> 00:04:39,940
network for exchanging peers updating

88
00:04:39,940 --> 00:04:48,280
peers and so on so as I've said the

89
00:04:48,280 --> 00:04:50,620
scanning process goes a bit like this

90
00:04:50,620 --> 00:04:53,259
each bot generates a random IP address

91
00:04:53,259 --> 00:04:56,740
and then pick support from its known its

92
00:04:56,740 --> 00:04:58,960
list of known ports initially when we

93
00:04:58,960 --> 00:05:01,840
found it it started with the first two

94
00:05:01,840 --> 00:05:04,990
bullets down at an HTTP a DB is the

95
00:05:04,990 --> 00:05:08,820
latest addition so at this point I

96
00:05:08,820 --> 00:05:12,090
hide-and-seek is capable of hijacking

97
00:05:12,090 --> 00:05:17,050
ADB devices exposed over the Internet

98
00:05:17,050 --> 00:05:21,190
and also some other ports so let's take

99
00:05:21,190 --> 00:05:24,509
a look at that an example we have our

100
00:05:24,509 --> 00:05:28,120
potential victim here and of course we

101
00:05:28,120 --> 00:05:31,090
have a bot somewhere out and Internet at

102
00:05:31,090 --> 00:05:33,580
some point this bot will generate the

103
00:05:33,580 --> 00:05:36,940
victim's IP address and select let's say

104
00:05:36,940 --> 00:05:39,610
telnet if the victim has telnet open

105
00:05:39,610 --> 00:05:46,240
when the bot will send a Ross in to the

106
00:05:46,240 --> 00:05:48,340
victim if the victim replies when the

107
00:05:48,340 --> 00:05:52,449
bot will initiate a regular TCP

108
00:05:52,449 --> 00:05:55,840
connection it will then ask for a login

109
00:05:55,840 --> 00:05:59,370
prompt if the victim victim supplies

110
00:05:59,370 --> 00:06:03,669
such a prompt then it goes through a

111
00:06:03,669 --> 00:06:06,909
dictionary of hard-coded usernames and

112
00:06:06,909 --> 00:06:09,130
passwords to attempt to login to the

113
00:06:09,130 --> 00:06:15,759
actual device hmm if it manages to get a

114
00:06:15,759 --> 00:06:18,430
shell that means getting a valid

115
00:06:18,430 --> 00:06:21,310
username and password then it proceeds

116
00:06:21,310 --> 00:06:24,039
to probe around the device so it will

117
00:06:24,039 --> 00:06:28,620
attempt to find the architecture and

118
00:06:28,620 --> 00:06:32,880
various other information such as memory

119
00:06:32,880 --> 00:06:34,500
filesystem

120
00:06:34,500 --> 00:06:39,510
and so on and also it will probe around

121
00:06:39,510 --> 00:06:44,850
for tools which it will use to get the

122
00:06:44,850 --> 00:06:48,480
actual payload such as this so it will

123
00:06:48,480 --> 00:06:52,590
try to see if W get is on the system if

124
00:06:52,590 --> 00:06:55,020
curled if base64 if none of these are

125
00:06:55,020 --> 00:06:56,910
found then the last resort is to

126
00:06:56,910 --> 00:07:00,270
actually echoed the bytes into the file

127
00:07:00,270 --> 00:07:06,210
and make it run a ball and run it okay

128
00:07:06,210 --> 00:07:10,110
so at this point the malware is copied

129
00:07:10,110 --> 00:07:14,430
onto the victim and how does it get run

130
00:07:14,430 --> 00:07:16,890
it has a series of command line

131
00:07:16,890 --> 00:07:21,000
arguments one being a list of initial

132
00:07:21,000 --> 00:07:25,860
starting peers so high seek went through

133
00:07:25,860 --> 00:07:29,190
a few changes it started out with a list

134
00:07:29,190 --> 00:07:32,880
of 14 hard-coded peers into each bot

135
00:07:32,880 --> 00:07:36,630
then in a successive updated discarded

136
00:07:36,630 --> 00:07:39,270
those peers so the only method through

137
00:07:39,270 --> 00:07:43,470
which peers were propagated was by this

138
00:07:43,470 --> 00:07:46,979
command-line argument and nowadays it

139
00:07:46,979 --> 00:07:49,979
has over 100 hard-coded peers into the

140
00:07:49,979 --> 00:07:53,300
binary so it went for a lot of changes

141
00:07:53,300 --> 00:07:57,840
moving forward a kill port this means

142
00:07:57,840 --> 00:08:01,500
that the similar to other botanist

143
00:08:01,500 --> 00:08:05,190
Mariah also does this it looks through

144
00:08:05,190 --> 00:08:09,900
/proc for processes which listen on said

145
00:08:09,900 --> 00:08:12,570
port and terminates these processes this

146
00:08:12,570 --> 00:08:14,910
is to eliminate any competition and any

147
00:08:14,910 --> 00:08:17,100
potential competition which will attempt

148
00:08:17,100 --> 00:08:19,020
to connect with this device so it

149
00:08:19,020 --> 00:08:24,120
effectively shuts down telnet also

150
00:08:24,120 --> 00:08:25,650
another interesting argument is a

151
00:08:25,650 --> 00:08:27,720
listening port this is a UDP port

152
00:08:27,720 --> 00:08:30,500
through which the device is identified

153
00:08:30,500 --> 00:08:34,640
inside the network in the botnet itself

154
00:08:34,640 --> 00:08:38,909
this argument is optional if if it's

155
00:08:38,909 --> 00:08:42,690
missing when the bot will generate a IP

156
00:08:42,690 --> 00:08:46,800
at random excuse me a port at random

157
00:08:46,800 --> 00:08:48,480
through which it will advertise itself

158
00:08:48,480 --> 00:08:53,759
in the network lastly also an optional

159
00:08:53,759 --> 00:08:55,949
argument our additional scan targets as

160
00:08:55,949 --> 00:08:58,649
I've said the bar generates eyepiece at

161
00:08:58,649 --> 00:09:01,439
random it can also receive specific IPS

162
00:09:01,439 --> 00:09:10,350
to be scanned at some point okay go

163
00:09:10,350 --> 00:09:12,499
ahead

164
00:09:15,149 --> 00:09:17,769
okay so now we'll move on to the

165
00:09:17,769 --> 00:09:20,859
peer-to-peer protocol so as my colleague

166
00:09:20,859 --> 00:09:23,319
explained it's a peer it's a custom

167
00:09:23,319 --> 00:09:26,589
protocol over UDP and there are two

168
00:09:26,589 --> 00:09:29,079
topics that I want to cover one it's the

169
00:09:29,079 --> 00:09:30,879
data structures involved in this

170
00:09:30,879 --> 00:09:34,029
protocol and the other one are the

171
00:09:34,029 --> 00:09:36,729
messages that are going to be exchanged

172
00:09:36,729 --> 00:09:40,149
by the peers first data structure is

173
00:09:40,149 --> 00:09:42,489
very simple it's a peer table so

174
00:09:42,489 --> 00:09:45,189
basically every peer in the network will

175
00:09:45,189 --> 00:09:48,579
maintain a list of IPs and ports of the

176
00:09:48,579 --> 00:09:51,669
other peers that it knows about as my

177
00:09:51,669 --> 00:09:54,729
colleagues colleague said those entries

178
00:09:54,729 --> 00:09:58,209
come either from the command line from

179
00:09:58,209 --> 00:10:00,699
hard coded from the binary but most of

180
00:10:00,699 --> 00:10:04,299
them are dynamically obtained from the

181
00:10:04,299 --> 00:10:09,579
network itself and another bunch of data

182
00:10:09,579 --> 00:10:11,829
structures are those too and we call

183
00:10:11,829 --> 00:10:14,919
them a config cache and data cache and

184
00:10:14,919 --> 00:10:16,929
they are in fact just some hash tables

185
00:10:16,929 --> 00:10:20,259
some mappings the configures the one on

186
00:10:20,259 --> 00:10:23,829
the left is a mapping between a so

187
00:10:23,829 --> 00:10:26,949
called payload ID and the hash value and

188
00:10:26,949 --> 00:10:28,989
the other one the data cache is a

189
00:10:28,989 --> 00:10:32,259
mapping between a hash value and some

190
00:10:32,259 --> 00:10:36,069
actual data blob the entries in those

191
00:10:36,069 --> 00:10:38,109
structures again they come from the

192
00:10:38,109 --> 00:10:40,389
peer-to-peer network itself they are

193
00:10:40,389 --> 00:10:45,009
initially empty what is the usage of

194
00:10:45,009 --> 00:10:48,309
those two structures well if you go back

195
00:10:48,309 --> 00:10:53,019
to the scanning process so here we have

196
00:10:53,019 --> 00:10:56,829
the scenario where we have this infected

197
00:10:56,829 --> 00:10:59,319
machine the one in red that is trying to

198
00:10:59,319 --> 00:11:01,919
exploit another vulnerable machine and

199
00:11:01,919 --> 00:11:05,199
it has just to obtain the shell on this

200
00:11:05,199 --> 00:11:09,069
machine and what follows next is system

201
00:11:09,069 --> 00:11:11,949
identification stage where the

202
00:11:11,949 --> 00:11:13,749
architecture of the system is trying to

203
00:11:13,749 --> 00:11:17,289
be determined by using for example this

204
00:11:17,289 --> 00:11:20,520
kind of command proxy pin phone

205
00:11:20,520 --> 00:11:23,490
from where it might get an answer like

206
00:11:23,490 --> 00:11:25,950
this telling me that it's it's an arm

207
00:11:25,950 --> 00:11:29,790
system and now the question is what to

208
00:11:29,790 --> 00:11:33,320
actually download on this victim system

209
00:11:33,320 --> 00:11:37,589
normally in other botnets like Mirai a

210
00:11:37,589 --> 00:11:39,149
binary would be downloaded from

211
00:11:39,149 --> 00:11:41,910
somewhere but this here of course cannot

212
00:11:41,910 --> 00:11:43,800
be done because we're talking about a

213
00:11:43,800 --> 00:11:46,290
decentralized architecture and so

214
00:11:46,290 --> 00:11:48,480
there's no such thing as a as a central

215
00:11:48,480 --> 00:11:51,839
server and this is where those two

216
00:11:51,839 --> 00:11:54,690
structures come in handy

217
00:11:54,690 --> 00:11:57,690
basically the bots will we'll know about

218
00:11:57,690 --> 00:12:00,360
a correspondence between an architecture

219
00:12:00,360 --> 00:12:03,540
like arm and the payload ID for example

220
00:12:03,540 --> 00:12:07,440
arm is payload ID 15 so it's going to

221
00:12:07,440 --> 00:12:09,180
look up this value into the first

222
00:12:09,180 --> 00:12:11,370
structure into the config cache he's

223
00:12:11,370 --> 00:12:14,790
gonna find out some hash value and look

224
00:12:14,790 --> 00:12:17,760
it up into the second data structure and

225
00:12:17,760 --> 00:12:21,870
finally find some actual data which is

226
00:12:21,870 --> 00:12:24,089
the data that it cannot be actually

227
00:12:24,089 --> 00:12:27,600
injected into the system which you can

228
00:12:27,600 --> 00:12:29,700
see it's an actual as binary it's an

229
00:12:29,700 --> 00:12:32,730
executable file and not only this but

230
00:12:32,730 --> 00:12:36,110
it's actually the highest example itself

231
00:12:36,110 --> 00:12:38,100
compiled for this particular

232
00:12:38,100 --> 00:12:42,209
architecture so you see in fact what

233
00:12:42,209 --> 00:12:44,850
happens is that every every peer in the

234
00:12:44,850 --> 00:12:47,100
network every infected machine can act

235
00:12:47,100 --> 00:12:51,450
as a download server and it has it keeps

236
00:12:51,450 --> 00:12:53,250
in memory a list of all the samples

237
00:12:53,250 --> 00:12:56,220
compiled for each major architecture

238
00:12:56,220 --> 00:13:01,500
like arm needs 8 equal x86 and so on of

239
00:13:01,500 --> 00:13:03,600
course if you find this sample running

240
00:13:03,600 --> 00:13:05,910
and you dump its memory you can very

241
00:13:05,910 --> 00:13:11,279
easily get all those samples and again

242
00:13:11,279 --> 00:13:13,320
the fact that all those entries come

243
00:13:13,320 --> 00:13:15,120
from the peer-to-peer network makes it

244
00:13:15,120 --> 00:13:17,550
quite flexible so the offer can very

245
00:13:17,550 --> 00:13:19,770
easily change those payloads by pushing

246
00:13:19,770 --> 00:13:22,050
the modifications throughout the

247
00:13:22,050 --> 00:13:27,000
peer-to-peer network ok now I'm gonna

248
00:13:27,000 --> 00:13:30,029
move on to the protocol itself and I'm

249
00:13:30,029 --> 00:13:32,850
gonna present three scenarios in which

250
00:13:32,850 --> 00:13:35,189
when I see what kind of messages are

251
00:13:35,189 --> 00:13:38,279
gonna be exchanged by the peers and

252
00:13:38,279 --> 00:13:40,109
we're gonna see what the network is

253
00:13:40,109 --> 00:13:42,139
capable of achieving

254
00:13:42,139 --> 00:13:44,910
first of all them the message format is

255
00:13:44,910 --> 00:13:46,919
this one presented here quite simple

256
00:13:46,919 --> 00:13:50,009
just one bite to identify the message

257
00:13:50,009 --> 00:13:53,329
type followed by the rest of the message

258
00:13:53,329 --> 00:13:57,809
depending on the message type first

259
00:13:57,809 --> 00:14:00,629
scenario is how this config cache is

260
00:14:00,629 --> 00:14:02,970
updated as I've said before it is empty

261
00:14:02,970 --> 00:14:05,549
in the beginning and it it must get

262
00:14:05,549 --> 00:14:09,029
those entries and this happened like

263
00:14:09,029 --> 00:14:11,970
this so we have this peer in the middle

264
00:14:11,970 --> 00:14:15,089
the one in orange which let's say has

265
00:14:15,089 --> 00:14:18,199
just started so it's structure is empty

266
00:14:18,199 --> 00:14:21,029
and it's gonna send this message

267
00:14:21,029 --> 00:14:23,359
throughout the network lowercase age

268
00:14:23,359 --> 00:14:26,939
together with the value 0 this is to say

269
00:14:26,939 --> 00:14:29,129
like like oh my my version of this

270
00:14:29,129 --> 00:14:31,859
structure is 0 that is empty so please

271
00:14:31,859 --> 00:14:34,109
anyone else who has a greater version

272
00:14:34,109 --> 00:14:37,859
can this please reply and this happens

273
00:14:37,859 --> 00:14:40,049
so every peer will send back their own

274
00:14:40,049 --> 00:14:44,309
version of the config cash and our peer

275
00:14:44,309 --> 00:14:46,259
in the middle will eventually pick the

276
00:14:46,259 --> 00:14:49,069
one with the greatest version as the

277
00:14:49,069 --> 00:14:52,229
source from from where to download this

278
00:14:52,229 --> 00:14:55,139
config cache and it's gonna do this by

279
00:14:55,139 --> 00:14:58,199
using another class of messages related

280
00:14:58,199 --> 00:15:03,299
to data transfer what is important to

281
00:15:03,299 --> 00:15:05,100
know is that every every transfer

282
00:15:05,100 --> 00:15:08,939
happens in chunks of 256 bytes and we

283
00:15:08,939 --> 00:15:11,039
have those two messages chunk requests

284
00:15:11,039 --> 00:15:14,279
which includes the chunk index in this

285
00:15:14,279 --> 00:15:17,039
case is 0 it means the first chunk and

286
00:15:17,039 --> 00:15:19,409
trying to apply which has the actual

287
00:15:19,409 --> 00:15:24,629
data after the transfer is complete the

288
00:15:24,629 --> 00:15:28,079
signature check step follows as my

289
00:15:28,079 --> 00:15:33,449
colleague explained why is that you see

290
00:15:33,449 --> 00:15:35,909
that this this config cache is quite an

291
00:15:35,909 --> 00:15:38,699
important structure because every every

292
00:15:38,699 --> 00:15:41,039
infection process starts with a lookup

293
00:15:41,039 --> 00:15:43,529
in this structure so whoever controls

294
00:15:43,529 --> 00:15:44,579
this

295
00:15:44,579 --> 00:15:46,529
can actually control what payloads are

296
00:15:46,529 --> 00:15:49,529
going to be injected so probably this is

297
00:15:49,529 --> 00:15:52,199
why the author decided to require this

298
00:15:52,199 --> 00:15:56,730
to be digitally signed and of course

299
00:15:56,730 --> 00:15:58,470
those two messages chunk requesting

300
00:15:58,470 --> 00:16:00,660
shank reply are used for any kind of

301
00:16:00,660 --> 00:16:04,439
data transfer not only for this but for

302
00:16:04,439 --> 00:16:06,389
the other structure as well so all these

303
00:16:06,389 --> 00:16:09,269
all these binary blobs are also

304
00:16:09,269 --> 00:16:11,790
transferred in kind of in the same way -

305
00:16:11,790 --> 00:16:16,939
the digital signature checks step a

306
00:16:17,569 --> 00:16:19,889
second scenario is related to peer

307
00:16:19,889 --> 00:16:25,350
management as I've said before most of

308
00:16:25,350 --> 00:16:27,269
the peers are obtained from the network

309
00:16:27,269 --> 00:16:30,239
itself so this is how a peer will

310
00:16:30,239 --> 00:16:33,869
broadcast this request message upon

311
00:16:33,869 --> 00:16:36,989
receiving this the other peers will pick

312
00:16:36,989 --> 00:16:40,049
an entry from their own table and send

313
00:16:40,049 --> 00:16:43,199
it back and this peer upon receiving all

314
00:16:43,199 --> 00:16:47,160
those replies will will insert those IPs

315
00:16:47,160 --> 00:16:49,889
and ports into its own peer table so

316
00:16:49,889 --> 00:16:52,290
this is how it ensures that everyone

317
00:16:52,290 --> 00:16:54,869
kind of sees has a constant consistent

318
00:16:54,869 --> 00:17:00,779
view of the peer table and the last

319
00:17:00,779 --> 00:17:04,109
scenario is this one described here so

320
00:17:04,109 --> 00:17:07,619
we have we have an infected machine that

321
00:17:07,619 --> 00:17:09,679
is trying to exploit some other

322
00:17:09,679 --> 00:17:13,619
vulnerable device using for example this

323
00:17:13,619 --> 00:17:19,319
HTTP exploit but this export fails for

324
00:17:19,319 --> 00:17:22,829
some reason so what might happen is this

325
00:17:22,829 --> 00:17:25,679
peer will use this message to report the

326
00:17:25,679 --> 00:17:28,500
IP and the port of this target device to

327
00:17:28,500 --> 00:17:31,830
another peer in the network and when

328
00:17:31,830 --> 00:17:34,830
this other peer will go to the scanning

329
00:17:34,830 --> 00:17:35,850
routine

330
00:17:35,850 --> 00:17:38,549
it will also consider this IP besides

331
00:17:38,549 --> 00:17:40,320
all the other ones that were randomly

332
00:17:40,320 --> 00:17:44,159
generated this means that this this peer

333
00:17:44,159 --> 00:17:46,440
will also try to exploit this device as

334
00:17:46,440 --> 00:17:49,310
well hoping that

335
00:17:49,310 --> 00:17:52,370
it was succeed in this case maybe maybe

336
00:17:52,370 --> 00:17:54,440
this period is running a newer version

337
00:17:54,440 --> 00:17:57,700
of the bot that is more capable of

338
00:17:57,700 --> 00:18:05,780
exploiting more devices so to sum up the

339
00:18:05,780 --> 00:18:09,110
botnet that we just presented is a

340
00:18:09,110 --> 00:18:11,750
partner that can spread very efficiently

341
00:18:11,750 --> 00:18:14,810
throughout the Internet and in fact many

342
00:18:14,810 --> 00:18:18,050
kinds of IOT systems it has a

343
00:18:18,050 --> 00:18:19,780
decentralized peer-to-peer architecture

344
00:18:19,780 --> 00:18:23,270
and of course the control of this

345
00:18:23,270 --> 00:18:25,400
network is still in the hands of the

346
00:18:25,400 --> 00:18:28,160
author due to the fact that the most

347
00:18:28,160 --> 00:18:31,430
important structure in the botnet needs

348
00:18:31,430 --> 00:18:34,070
to be digitally signed in order to be

349
00:18:34,070 --> 00:18:40,220
updated so now let's move on to a little

350
00:18:40,220 --> 00:18:43,430
bit of history so I'd be defender we've

351
00:18:43,430 --> 00:18:46,390
seen over 30 samples of this binary

352
00:18:46,390 --> 00:18:49,610
which kind of suggests that the author

353
00:18:49,610 --> 00:18:52,340
is still trying and testing different

354
00:18:52,340 --> 00:18:58,220
things most of them were code

355
00:18:58,220 --> 00:19:00,980
refactoring minor changes but the new

356
00:19:00,980 --> 00:19:04,190
functionalities were added as well among

357
00:19:04,190 --> 00:19:09,280
which we can mention persistency so many

358
00:19:09,280 --> 00:19:12,320
many other botnets like me right they

359
00:19:12,320 --> 00:19:14,720
usually delete their own executable file

360
00:19:14,720 --> 00:19:17,720
after startup that means they will not

361
00:19:17,720 --> 00:19:21,440
survive after device reboot but hide and

362
00:19:21,440 --> 00:19:24,560
seek is able to copy itself to the

363
00:19:24,560 --> 00:19:28,520
standard location / t c / init dot d and

364
00:19:28,520 --> 00:19:31,850
it will copy itself under this name as

365
00:19:31,850 --> 00:19:37,840
99 followed by some random characters

366
00:19:39,010 --> 00:19:41,930
another one is the ability to drop and

367
00:19:41,930 --> 00:19:43,550
execute arbitrary binaries as my

368
00:19:43,550 --> 00:19:47,330
colleague explained again those those

369
00:19:47,330 --> 00:19:49,850
binaries that are dropped come from the

370
00:19:49,850 --> 00:19:54,800
peer-to-peer network and this means the

371
00:19:54,800 --> 00:19:57,560
author only the author can control what

372
00:19:57,560 --> 00:19:59,700
exactly is being dropped

373
00:19:59,700 --> 00:20:02,520
and in particular we've seen a case

374
00:20:02,520 --> 00:20:04,760
where the Monaro miner who was dropped

375
00:20:04,760 --> 00:20:07,230
but it didn't really have that much

376
00:20:07,230 --> 00:20:08,010
success

377
00:20:08,010 --> 00:20:10,410
probably because those devices are not

378
00:20:10,410 --> 00:20:14,210
really that powerful to be able to mine

379
00:20:14,210 --> 00:20:18,600
cryptocurrencies and of course we've

380
00:20:18,600 --> 00:20:22,440
seen updates responsible for extending

381
00:20:22,440 --> 00:20:26,760
the exploited capabilities the the first

382
00:20:26,760 --> 00:20:28,950
sample that we've seen had only two

383
00:20:28,950 --> 00:20:33,500
exploits I think or some TP link and

384
00:20:33,500 --> 00:20:38,270
something else but more more were added

385
00:20:38,270 --> 00:20:41,040
kind of the same idea some command

386
00:20:41,040 --> 00:20:44,550
injection in the HTTP interface of some

387
00:20:44,550 --> 00:20:49,020
cameras and routers and so on but we've

388
00:20:49,020 --> 00:20:51,360
also seen some other interesting things

389
00:20:51,360 --> 00:20:54,750
for example we have these two database

390
00:20:54,750 --> 00:20:58,080
servers or NDB and CouchDB they also

391
00:20:58,080 --> 00:21:02,220
provide an HTTP API and this API allows

392
00:21:02,220 --> 00:21:04,950
code execution under some circumstances

393
00:21:04,950 --> 00:21:08,730
and hide-and-seek is able to take

394
00:21:08,730 --> 00:21:10,560
advantage of this and hijack those

395
00:21:10,560 --> 00:21:14,520
devices and the one that my colleague

396
00:21:14,520 --> 00:21:18,180
said about the hijacking the Android via

397
00:21:18,180 --> 00:21:26,580
ADB okay some words about to monitoring

398
00:21:26,580 --> 00:21:28,980
this of course is quite a challenge

399
00:21:28,980 --> 00:21:33,390
because of the decentralized nature of

400
00:21:33,390 --> 00:21:38,550
the network so one one place from where

401
00:21:38,550 --> 00:21:40,920
we can start is to look at the peers

402
00:21:40,920 --> 00:21:43,970
that we found hard-coded in the samples

403
00:21:43,970 --> 00:21:47,790
we gathered all of those and we're

404
00:21:47,790 --> 00:21:50,700
talking about 40 countries and here's

405
00:21:50,700 --> 00:21:54,090
like the top 10 the rest of them have

406
00:21:54,090 --> 00:22:00,660
like more 5 or less hits but of course

407
00:22:00,660 --> 00:22:02,490
there there is another way of doing

408
00:22:02,490 --> 00:22:04,830
things which maybe have figured out by

409
00:22:04,830 --> 00:22:08,130
ourselves and that one is to take

410
00:22:08,130 --> 00:22:10,710
advantage of these commands the period

411
00:22:10,710 --> 00:22:14,280
reply so what we can do is we can start

412
00:22:14,280 --> 00:22:17,370
from some peers and send this command

413
00:22:17,370 --> 00:22:20,880
ourselves and we get back some my piece

414
00:22:20,880 --> 00:22:24,080
and continue the process until we have

415
00:22:24,080 --> 00:22:29,250
reached a stable list of peers and we've

416
00:22:29,250 --> 00:22:31,050
we've done this and since the beginning

417
00:22:31,050 --> 00:22:35,550
we've found around 200,000 peers 300,000

418
00:22:35,550 --> 00:22:37,770
infected devices with this kind of

419
00:22:37,770 --> 00:22:42,180
geographical distribution what is

420
00:22:42,180 --> 00:22:45,180
important to notice here is that even

421
00:22:45,180 --> 00:22:47,880
though this number is quite high if we

422
00:22:47,880 --> 00:22:50,220
consider the number of active peers at

423
00:22:50,220 --> 00:22:52,560
one moment of time the number is not

424
00:22:52,560 --> 00:22:55,410
that big for example if we consider the

425
00:22:55,410 --> 00:22:57,840
peers active in the last 24 hours we

426
00:22:57,840 --> 00:23:01,790
only get like 4,000 or 5,000 devices

427
00:23:01,790 --> 00:23:06,060
which one explanation might be that the

428
00:23:06,060 --> 00:23:09,300
net network is not that stable it's kind

429
00:23:09,300 --> 00:23:11,700
of losing peers over time or something

430
00:23:11,700 --> 00:23:18,750
like this as for conclusions we believe

431
00:23:18,750 --> 00:23:21,390
that there is a new trend emerging in

432
00:23:21,390 --> 00:23:25,410
the IOT landscape since in the past

433
00:23:25,410 --> 00:23:28,440
we've we've seen both smile words like

434
00:23:28,440 --> 00:23:30,900
qubit or mirai which were not very

435
00:23:30,900 --> 00:23:33,570
complex in themselves but they were kind

436
00:23:33,570 --> 00:23:36,750
of the proof that there is a lot to do

437
00:23:36,750 --> 00:23:39,990
in this area given the existence of all

438
00:23:39,990 --> 00:23:43,350
those cheap and insecure and hard to

439
00:23:43,350 --> 00:23:47,010
update devices and now we believe that

440
00:23:47,010 --> 00:23:50,910
and a new trend is emerging towards more

441
00:23:50,910 --> 00:23:53,100
complicated and more complex and more

442
00:23:53,100 --> 00:23:56,490
dangerous malware so if we've seen

443
00:23:56,490 --> 00:23:59,120
things like Hajime with its complex

444
00:23:59,120 --> 00:24:02,820
network over BitTorrent we've seen

445
00:24:02,820 --> 00:24:05,760
Satori and other mirror variants which

446
00:24:05,760 --> 00:24:10,200
are able to also exploit HTTP interfaces

447
00:24:10,200 --> 00:24:13,320
of IOT devices we've seen the reaper

448
00:24:13,320 --> 00:24:15,750
which comes with some exploits embedded

449
00:24:15,750 --> 00:24:17,110
as well

450
00:24:17,110 --> 00:24:20,620
we've seen probably the most complex so

451
00:24:20,620 --> 00:24:25,900
far VPN filter which is multi-staged and

452
00:24:25,900 --> 00:24:27,850
also is able to exploit many kinds of

453
00:24:27,850 --> 00:24:32,440
devices and we believe that the one that

454
00:24:32,440 --> 00:24:34,890
we presented today hide-and-seek is also

455
00:24:34,890 --> 00:24:38,410
part of this trend even though we cannot

456
00:24:38,410 --> 00:24:41,380
say for sure what the purpose of these

457
00:24:41,380 --> 00:24:44,940
bodies but the the complexity and the

458
00:24:44,940 --> 00:24:48,490
decentralized architecture makes it part

459
00:24:48,490 --> 00:24:52,840
of this and since the security of those

460
00:24:52,840 --> 00:24:55,120
devices hasn't really improved that much

461
00:24:55,120 --> 00:24:57,910
we believe that this is kind of an

462
00:24:57,910 --> 00:25:01,720
interesting research area in the future

463
00:25:01,720 --> 00:25:04,210
and it's an area of worthy to keep an

464
00:25:04,210 --> 00:25:06,560
eye on for more turrets to emerge

465
00:25:06,560 --> 00:25:09,579
[Music]

