1
00:00:00,030 --> 00:00:02,659
a warm welcome after the coffee break

2
00:00:02,659 --> 00:00:04,650
unfortunately the two presenters from

3
00:00:04,650 --> 00:00:07,350
Simon Tech didn't get a visa so instead

4
00:00:07,350 --> 00:00:09,990
of the dark side of the web assembly we

5
00:00:09,990 --> 00:00:11,130
hear a very interesting presentation

6
00:00:11,130 --> 00:00:14,280
about Android Android at the obfuscation

7
00:00:14,280 --> 00:00:16,320
using static and dynamic cooperation

8
00:00:16,320 --> 00:00:21,090
from Union Yanni from checkpoint thank

9
00:00:21,090 --> 00:00:33,180
you good morning everybody thank you for

10
00:00:33,180 --> 00:00:37,230
joining we're here to talk about mobile

11
00:00:37,230 --> 00:00:42,030
threat detection I have two kids and for

12
00:00:42,030 --> 00:00:45,360
quite a long time I had the bad feelings

13
00:00:45,360 --> 00:00:47,760
that my kids cannot come to the

14
00:00:47,760 --> 00:00:50,010
kindergarten and say something like my

15
00:00:50,010 --> 00:00:55,559
dad is a firefighter but quite recently

16
00:00:55,559 --> 00:00:57,600
my six-year-old son approached me and

17
00:00:57,600 --> 00:01:01,680
said so that are you kind of a computers

18
00:01:01,680 --> 00:01:07,830
policeman I chuckle the did feel a

19
00:01:07,830 --> 00:01:11,340
little bit proud and thought about it

20
00:01:11,340 --> 00:01:15,270
and said well maybe not quite a

21
00:01:15,270 --> 00:01:18,439
policeman more like an investigator

22
00:01:18,439 --> 00:01:25,110
Sherlock Holmes so for us threat

23
00:01:25,110 --> 00:01:27,150
prevention on mobile is our day-to-day

24
00:01:27,150 --> 00:01:30,360
job we proudly hunt malicious Android

25
00:01:30,360 --> 00:01:34,170
applications for living my name is Ian

26
00:01:34,170 --> 00:01:37,200
Eve nice to meet you my dear friend here

27
00:01:37,200 --> 00:01:39,390
is the only Moses we're security

28
00:01:39,390 --> 00:01:41,130
researchers at the mobile threat

29
00:01:41,130 --> 00:01:44,360
prevention grouping checkpoint and as a

30
00:01:44,360 --> 00:01:49,850
security professionals maybe not yet

31
00:01:49,850 --> 00:01:53,880
okay so as security professionals we our

32
00:01:53,880 --> 00:01:57,570
main task is to protect the mobile

33
00:01:57,570 --> 00:02:00,869
devices of our users from any malicious

34
00:02:00,869 --> 00:02:05,280
activity that might happen there and to

35
00:02:05,280 --> 00:02:09,690
do that we have to process enormous and

36
00:02:09,690 --> 00:02:11,530
ever-growing volumes of

37
00:02:11,530 --> 00:02:14,770
application searching for increasing and

38
00:02:14,770 --> 00:02:17,490
increasing numbers of malicious

39
00:02:17,490 --> 00:02:21,610
behaviors and well naturally the only

40
00:02:21,610 --> 00:02:24,520
viable way to process all those volumes

41
00:02:24,520 --> 00:02:28,000
of data is to rely on automated

42
00:02:28,000 --> 00:02:31,390
processes automatic types of analysis

43
00:02:31,390 --> 00:02:36,760
and the precision and ability to scale

44
00:02:36,760 --> 00:02:39,190
that those processes are the things that

45
00:02:39,190 --> 00:02:42,640
actually define our success so while we

46
00:02:42,640 --> 00:02:47,590
as security researchers usually want to

47
00:02:47,590 --> 00:02:52,810
deal with a new zero-day or to find cool

48
00:02:52,810 --> 00:02:55,870
and sexy new vulnerabilities the reality

49
00:02:55,870 --> 00:03:00,700
is that our success is mostly defined by

50
00:03:00,700 --> 00:03:05,010
our ability and our tenacity and

51
00:03:05,010 --> 00:03:09,130
scalability to actually find all the

52
00:03:09,130 --> 00:03:12,330
vulnerabilities that were there ever and

53
00:03:12,330 --> 00:03:16,900
still mostly are relevant on very big

54
00:03:16,900 --> 00:03:21,209
volumes of data and devices and

55
00:03:21,209 --> 00:03:26,079
end-users and the companies so through

56
00:03:26,079 --> 00:03:28,690
the course of the last year we little

57
00:03:28,690 --> 00:03:31,780
bit departed from our usual let's find

58
00:03:31,780 --> 00:03:34,590
new vulnerability kind of approach to

59
00:03:34,590 --> 00:03:38,530
trauma mobile threat detection and we

60
00:03:38,530 --> 00:03:41,370
invested a lot of effort in developing

61
00:03:41,370 --> 00:03:44,170
new and quite innovative techniques that

62
00:03:44,170 --> 00:03:47,170
actually allows to be much more precise

63
00:03:47,170 --> 00:03:49,720
and much more scalable so one of the

64
00:03:49,720 --> 00:03:51,549
things that we were able to discuss now

65
00:03:51,549 --> 00:03:55,660
is deals with code obfuscation but first

66
00:03:55,660 --> 00:03:59,140
let's talk a little bit how our whole

67
00:03:59,140 --> 00:04:02,739
process works because the real story

68
00:04:02,739 --> 00:04:06,370
here like weather will be like Bri texts

69
00:04:06,370 --> 00:04:08,859
of black screens and like cold and sexy

70
00:04:08,859 --> 00:04:11,350
things but the real story is that the

71
00:04:11,350 --> 00:04:14,470
ability actually to to have a research

72
00:04:14,470 --> 00:04:19,329
that ends in the production and actually

73
00:04:19,329 --> 00:04:22,300
breeds does that value to to your

74
00:04:22,300 --> 00:04:23,120
customers

75
00:04:23,120 --> 00:04:26,570
so our analysis process I guess not

76
00:04:26,570 --> 00:04:29,320
surprisingly works in cycles where we

77
00:04:29,320 --> 00:04:31,910
first cycles are very cheap take

78
00:04:31,910 --> 00:04:35,810
milliseconds and we mostly there it ends

79
00:04:35,810 --> 00:04:39,770
like for the best amount of from a tech

80
00:04:39,770 --> 00:04:42,320
forth of attempts it ends there a

81
00:04:42,320 --> 00:04:44,750
millisecond and we we are done and we

82
00:04:44,750 --> 00:04:46,850
know what it is and we are good good to

83
00:04:46,850 --> 00:04:48,850
go first mostly these are known things

84
00:04:48,850 --> 00:04:52,070
if things get more complicated we use

85
00:04:52,070 --> 00:04:56,240
more and more expensive cycles until it

86
00:04:56,240 --> 00:04:58,340
gets to cycles that take hours to

87
00:04:58,340 --> 00:05:01,910
complete and there are various engines

88
00:05:01,910 --> 00:05:05,150
that works those who seek for data those

89
00:05:05,150 --> 00:05:08,630
who analyze that data and all the kinds

90
00:05:08,630 --> 00:05:12,590
in between but generally we divide the

91
00:05:12,590 --> 00:05:14,810
engines into the static ones until the

92
00:05:14,810 --> 00:05:17,720
dynamic ones the static ones our project

93
00:05:17,720 --> 00:05:20,450
practically those who behave in a way

94
00:05:20,450 --> 00:05:23,360
like a human that tries to read the code

95
00:05:23,360 --> 00:05:26,900
it the assembles there the applications

96
00:05:26,900 --> 00:05:29,000
are try to understand what goes there in

97
00:05:29,000 --> 00:05:33,889
a very theoretical way as a human being

98
00:05:33,889 --> 00:05:36,789
reading it's printed on a paper while

99
00:05:36,789 --> 00:05:40,820
dynamic approaches are the opposite its

100
00:05:40,820 --> 00:05:43,610
sandbox the execution of an application

101
00:05:43,610 --> 00:05:49,099
and in general we just sit on the

102
00:05:49,099 --> 00:05:52,820
sidelines and try to understand what

103
00:05:52,820 --> 00:05:58,240
goes down there so the static analysis

104
00:05:58,240 --> 00:06:03,340
has its main advantage is that there is

105
00:06:03,340 --> 00:06:05,810
practically nothing that prevents from

106
00:06:05,810 --> 00:06:08,900
covering all the available code in the

107
00:06:08,900 --> 00:06:11,270
application for the analysis because it

108
00:06:11,270 --> 00:06:13,520
just blows through all of it and reads

109
00:06:13,520 --> 00:06:16,630
it but the main weakness of it is the

110
00:06:16,630 --> 00:06:20,360
dynamic loading that if an application

111
00:06:20,360 --> 00:06:24,050
downloads actually parts of itself or

112
00:06:24,050 --> 00:06:26,720
binary additional binary and runs that

113
00:06:26,720 --> 00:06:29,270
during its its runtime then static

114
00:06:29,270 --> 00:06:31,640
analysis has no there's no solution for

115
00:06:31,640 --> 00:06:33,470
that because it doesn't have that

116
00:06:33,470 --> 00:06:37,120
dynamic part also the encrypted parts a

117
00:06:37,120 --> 00:06:39,650
problematic too because the ability of

118
00:06:39,650 --> 00:06:42,410
static analysis to actually decrypt the

119
00:06:42,410 --> 00:06:45,500
data a while it skims through the code

120
00:06:45,500 --> 00:06:47,800
is very limited

121
00:06:47,800 --> 00:06:52,280
while dynamic analysis is quite the

122
00:06:52,280 --> 00:06:56,360
opposite it's it is very very good with

123
00:06:56,360 --> 00:06:58,460
handling all the dynamic parts because

124
00:06:58,460 --> 00:07:00,740
the application just runs so if it

125
00:07:00,740 --> 00:07:03,710
downloads a binary they decrypt

126
00:07:03,710 --> 00:07:07,220
something dynamic analysis doesn't care

127
00:07:07,220 --> 00:07:09,050
because it just will

128
00:07:09,050 --> 00:07:11,420
if application does something nature it

129
00:07:11,420 --> 00:07:13,610
will just happen and we will just go on

130
00:07:13,610 --> 00:07:17,180
but on the other side dynamic analysis

131
00:07:17,180 --> 00:07:20,510
is quite poor with coverage because to

132
00:07:20,510 --> 00:07:22,430
get to all the corners of an

133
00:07:22,430 --> 00:07:25,370
applications it depends on on many

134
00:07:25,370 --> 00:07:28,070
various things either it's a user

135
00:07:28,070 --> 00:07:30,560
interaction like we have to click on

136
00:07:30,560 --> 00:07:33,350
buttons in very particular way to get to

137
00:07:33,350 --> 00:07:35,870
some corner and automatically it's very

138
00:07:35,870 --> 00:07:39,050
difficult to do or it's based on on your

139
00:07:39,050 --> 00:07:42,740
location on your device model on your

140
00:07:42,740 --> 00:07:45,350
parading system on other application

141
00:07:45,350 --> 00:07:47,090
installed on device and there are many

142
00:07:47,090 --> 00:07:49,130
many factors that affect how

143
00:07:49,130 --> 00:07:51,620
applications behave you all know

144
00:07:51,620 --> 00:07:54,350
applications that are very malicious in

145
00:07:54,350 --> 00:07:57,640
very specific locations but it's just a

146
00:07:57,640 --> 00:08:02,320
funny game in all the rest of the world

147
00:08:02,320 --> 00:08:06,800
so yeah when you think about these two

148
00:08:06,800 --> 00:08:09,680
approaches together they they they in a

149
00:08:09,680 --> 00:08:12,350
way they complete each other and it was

150
00:08:12,350 --> 00:08:15,140
for a long time very logical for us to

151
00:08:15,140 --> 00:08:17,990
think that okay if we can do all this

152
00:08:17,990 --> 00:08:21,410
thing not divided in like two huge

153
00:08:21,410 --> 00:08:24,050
approaches with with different efforts

154
00:08:24,050 --> 00:08:29,720
but do it together then dynamic approach

155
00:08:29,720 --> 00:08:32,360
allows us to get for example all the

156
00:08:32,360 --> 00:08:35,089
binaries and all the decryption while

157
00:08:35,089 --> 00:08:38,390
the static approaches can show what

158
00:08:38,390 --> 00:08:39,740
should be Oh

159
00:08:39,740 --> 00:08:42,440
the conditions and all the branchings to

160
00:08:42,440 --> 00:08:48,740
get to the whole coverage yeah and

161
00:08:48,740 --> 00:08:51,110
that's what we thought like five years

162
00:08:51,110 --> 00:08:54,890
ago so I'm telling you oh very old news

163
00:08:54,890 --> 00:08:59,300
why why did it take so long for us to to

164
00:08:59,300 --> 00:09:00,860
get here first of all because it's very

165
00:09:00,860 --> 00:09:03,890
complicated each one of these changes is

166
00:09:03,890 --> 00:09:08,120
very complicated by itself and saying

167
00:09:08,120 --> 00:09:10,459
that now we want something that is all

168
00:09:10,459 --> 00:09:14,540
of them together is almost impossible to

169
00:09:14,540 --> 00:09:17,839
do just like that also these are very

170
00:09:17,839 --> 00:09:19,760
different skill sets these are very

171
00:09:19,760 --> 00:09:22,130
different types of people who are good

172
00:09:22,130 --> 00:09:24,980
at these two things static analysis guys

173
00:09:24,980 --> 00:09:28,760
they are mathematical algorithmic guys

174
00:09:28,760 --> 00:09:31,070
that good with data structures and

175
00:09:31,070 --> 00:09:33,620
traversing trees and graphs and things

176
00:09:33,620 --> 00:09:36,200
like those while dynamic analysis guys

177
00:09:36,200 --> 00:09:38,870
they're very operating system people

178
00:09:38,870 --> 00:09:41,180
they're also guys who recite Linux

179
00:09:41,180 --> 00:09:45,760
kernel for their pleasure at night so

180
00:09:45,760 --> 00:09:50,029
and also sometimes these two groups as

181
00:09:50,029 --> 00:09:52,640
it many times happens with Challenger

182
00:09:52,640 --> 00:09:54,740
the researchers think that their

183
00:09:54,740 --> 00:09:56,570
approach is the best and all the rest is

184
00:09:56,570 --> 00:10:04,010
redundant and why to bother so well okay

185
00:10:04,010 --> 00:10:07,250
I still prefer to recite Linux kernel at

186
00:10:07,250 --> 00:10:16,810
night and so eventually we we got to

187
00:10:16,810 --> 00:10:20,089
understanding that we want that

188
00:10:20,089 --> 00:10:22,730
investment because we want to be much

189
00:10:22,730 --> 00:10:25,279
faster and much better on one side

190
00:10:25,279 --> 00:10:30,320
understand we our ancients were mature

191
00:10:30,320 --> 00:10:35,540
enough I think that my slides are kind

192
00:10:35,540 --> 00:10:41,709
of progressing by themselves okay but

193
00:10:41,709 --> 00:10:45,700
maybe sometimes we'll get them back so

194
00:10:45,700 --> 00:10:48,770
and also our engines became mature

195
00:10:48,770 --> 00:10:51,290
enough that we felt confident enough to

196
00:10:51,290 --> 00:10:52,910
say that okay let's

197
00:10:52,910 --> 00:10:57,860
just a leap of faith just doesn't matter

198
00:10:57,860 --> 00:11:00,920
the time length whatever just plunge in

199
00:11:00,920 --> 00:11:03,830
and and let's let's try to do something

200
00:11:03,830 --> 00:11:04,490
good with it

201
00:11:04,490 --> 00:11:07,490
so actually we we started there more

202
00:11:07,490 --> 00:11:09,380
than a year ago with their with the

203
00:11:09,380 --> 00:11:13,690
first attempts we first started

204
00:11:13,690 --> 00:11:16,700
capturing the binaries on the dynamic

205
00:11:16,700 --> 00:11:18,560
sides and transferring to the static

206
00:11:18,560 --> 00:11:22,430
side which is technically quite easy to

207
00:11:22,430 --> 00:11:25,160
do because you just move files and

208
00:11:25,160 --> 00:11:27,920
there's very little interaction then we

209
00:11:27,920 --> 00:11:32,530
had research about unpacking that

210
00:11:32,530 --> 00:11:36,980
dynamic sides unpacks packed binaries

211
00:11:36,980 --> 00:11:38,900
and passes the intro static suicide that

212
00:11:38,900 --> 00:11:40,900
was a very interesting research that was

213
00:11:40,900 --> 00:11:45,050
presented last year and DEF CON and now

214
00:11:45,050 --> 00:11:48,260
it is in production and we are very

215
00:11:48,260 --> 00:11:53,300
pleased with how it works so this year

216
00:11:53,300 --> 00:11:55,790
we deal with with FISC Asian and the

217
00:11:55,790 --> 00:11:57,740
interesting thing of the procession is

218
00:11:57,740 --> 00:12:00,350
because there you cannot already solve

219
00:12:00,350 --> 00:12:02,660
it with this easy interaction of just

220
00:12:02,660 --> 00:12:04,790
take this file check that file

221
00:12:04,790 --> 00:12:07,610
it actually required all the ancients to

222
00:12:07,610 --> 00:12:10,580
work in kind of a pink pump like help me

223
00:12:10,580 --> 00:12:15,910
here help you there and the more

224
00:12:15,910 --> 00:12:19,390
interesting details Yummie will

225
00:12:19,390 --> 00:12:28,760
elaborate Thanks ok so the focus today

226
00:12:28,760 --> 00:12:31,460
will be really how dynamic analysis

227
00:12:31,460 --> 00:12:33,980
actually helped static analysis deal

228
00:12:33,980 --> 00:12:39,370
with obfuscated code in Android apps and

229
00:12:39,370 --> 00:12:41,800
why is really an issue for us

230
00:12:41,800 --> 00:12:44,540
obfuscation is quite common in Android

231
00:12:44,540 --> 00:12:47,660
because as you know most of the code in

232
00:12:47,660 --> 00:12:50,060
Android apps is written in Java which is

233
00:12:50,060 --> 00:12:54,260
really easy to decompile and that's why

234
00:12:54,260 --> 00:12:57,450
many developers choose to

235
00:12:57,450 --> 00:13:00,399
to use obfuscation it can be a benign

236
00:13:00,399 --> 00:13:02,470
developer that just wants to protect

237
00:13:02,470 --> 00:13:04,089
their intellectual property from reverse

238
00:13:04,089 --> 00:13:07,180
engineering and maybe it's a malicious

239
00:13:07,180 --> 00:13:10,480
author that wants to avoid detection

240
00:13:10,480 --> 00:13:13,450
so obfuscation is an issue for us I

241
00:13:13,450 --> 00:13:17,649
think the you hear a strange feedback to

242
00:13:17,649 --> 00:13:25,120
it so the most common biscuit technique

243
00:13:25,120 --> 00:13:28,690
would be renaming of classes and methods

244
00:13:28,690 --> 00:13:31,709
that the developer defined in their code

245
00:13:31,709 --> 00:13:34,990
just to naming them to gibberish it's

246
00:13:34,990 --> 00:13:37,000
not really an issue for automated static

247
00:13:37,000 --> 00:13:39,550
analysis because it doesn't rely on the

248
00:13:39,550 --> 00:13:42,880
meaning of names unlike human performing

249
00:13:42,880 --> 00:13:44,860
reverse engineering who obviously relies

250
00:13:44,860 --> 00:13:48,480
on on the meanings of the names but

251
00:13:48,480 --> 00:13:51,130
string a ssin especially when it's

252
00:13:51,130 --> 00:13:53,649
combined with function called by

253
00:13:53,649 --> 00:13:56,350
reflection that's a serious issue for

254
00:13:56,350 --> 00:13:59,589
static analysis and what do I mean by

255
00:13:59,589 --> 00:14:02,980
that suppose an app wants to use a

256
00:14:02,980 --> 00:14:06,070
sensitive Android API and it was to do

257
00:14:06,070 --> 00:14:09,240
so in a hidden manner so instead of just

258
00:14:09,240 --> 00:14:12,160
calling a function for regular function

259
00:14:12,160 --> 00:14:14,610
call it can call it with reflection and

260
00:14:14,610 --> 00:14:17,670
encrypt the name of the class and

261
00:14:17,670 --> 00:14:22,360
methods that compose the API and so

262
00:14:22,360 --> 00:14:25,570
static analysis can't follow this API

263
00:14:25,570 --> 00:14:28,980
call also many other kinds of

264
00:14:28,980 --> 00:14:30,850
interesting strings can be encrypted

265
00:14:30,850 --> 00:14:34,660
like paths to content providers that

266
00:14:34,660 --> 00:14:37,240
provide access to sensitive user data

267
00:14:37,240 --> 00:14:42,640
like text messages so ok string

268
00:14:42,640 --> 00:14:44,199
encryption is a problem for static

269
00:14:44,199 --> 00:14:47,170
analysis why can't we just deal with it

270
00:14:47,170 --> 00:14:50,949
on our own without asking for help from

271
00:14:50,949 --> 00:14:53,490
these guys

272
00:14:53,490 --> 00:14:56,260
well decryption is static analysis is

273
00:14:56,260 --> 00:14:59,230
possible but it's hard because all

274
00:14:59,230 --> 00:15:02,170
information is already inside the apps

275
00:15:02,170 --> 00:15:04,149
code right otherwise the app itself

276
00:15:04,149 --> 00:15:05,770
wouldn't be able to decrypt the string

277
00:15:05,770 --> 00:15:08,500
on runtime so the decryption algorithm

278
00:15:08,500 --> 00:15:09,260
is the

279
00:15:09,260 --> 00:15:12,170
the decryption key is there but I don't

280
00:15:12,170 --> 00:15:14,120
want to start implementing decryption

281
00:15:14,120 --> 00:15:16,520
algorithms in my static analysis codes

282
00:15:16,520 --> 00:15:19,460
and I don't want to come up with a way

283
00:15:19,460 --> 00:15:22,520
to automatically find the decryption key

284
00:15:22,520 --> 00:15:25,310
inside the app code doing static

285
00:15:25,310 --> 00:15:27,950
analysis time it's just too much hard

286
00:15:27,950 --> 00:15:32,650
work so okay if we consider that

287
00:15:32,650 --> 00:15:35,300
decryption is done automatically when

288
00:15:35,300 --> 00:15:38,600
the app is run maybe we should indeed

289
00:15:38,600 --> 00:15:40,970
ask for help from our nice friends in

290
00:15:40,970 --> 00:15:43,730
the dynamic analysis team and have

291
00:15:43,730 --> 00:15:46,250
dynamic analysis simply read the

292
00:15:46,250 --> 00:15:49,730
decrypted strings during analysis time

293
00:15:49,730 --> 00:15:52,220
and then pass them over to static

294
00:15:52,220 --> 00:15:56,660
analysis so before we show how this

295
00:15:56,660 --> 00:15:59,510
actually works let's first take a closer

296
00:15:59,510 --> 00:16:03,080
look on how string encryption looks in

297
00:16:03,080 --> 00:16:06,380
the obfuscated app so a typical

298
00:16:06,380 --> 00:16:07,310
obfuscator

299
00:16:07,310 --> 00:16:09,290
would just take the string

300
00:16:09,290 --> 00:16:13,070
initialization code and rapids with a

301
00:16:13,070 --> 00:16:15,890
function call to a function that was

302
00:16:15,890 --> 00:16:19,870
generated by the obfuscator itself and

303
00:16:19,870 --> 00:16:23,390
this function basically returns the

304
00:16:23,390 --> 00:16:26,150
decrypted string and it received as

305
00:16:26,150 --> 00:16:28,220
parameters I guess you can consider it

306
00:16:28,220 --> 00:16:30,920
is the encrypted string and maybe some

307
00:16:30,920 --> 00:16:33,530
kind of decryption key this smaller

308
00:16:33,530 --> 00:16:38,660
number and many times it would be a

309
00:16:38,660 --> 00:16:41,420
static function which means it's not

310
00:16:41,420 --> 00:16:44,620
dependent on the way the slides keep

311
00:16:44,620 --> 00:16:48,350
moving on the road but never mind it's a

312
00:16:48,350 --> 00:16:50,480
static function which means it's not

313
00:16:50,480 --> 00:16:53,270
dependent on any previously initialized

314
00:16:53,270 --> 00:16:58,070
objects so this is how it looks like so

315
00:16:58,070 --> 00:17:01,970
I guess the first naive solution we

316
00:17:01,970 --> 00:17:04,849
considered was just to have static

317
00:17:04,849 --> 00:17:08,390
analysis look for calls to these

318
00:17:08,390 --> 00:17:11,000
decryption functions maybe it's one copy

319
00:17:11,000 --> 00:17:13,339
of the function call several times maybe

320
00:17:13,339 --> 00:17:14,630
there are several different copies

321
00:17:14,630 --> 00:17:18,230
nevermind so just find them in static

322
00:17:18,230 --> 00:17:20,359
analysis and pass over

323
00:17:20,359 --> 00:17:23,569
list two dynamic analysis and dynamic

324
00:17:23,569 --> 00:17:26,179
analysis could place breakpoints so that

325
00:17:26,179 --> 00:17:30,470
during runtime it can save the return

326
00:17:30,470 --> 00:17:32,929
value which is the decrypted string and

327
00:17:32,929 --> 00:17:36,940
pass it over to static analysis so

328
00:17:36,940 --> 00:17:41,000
basically it's a nice idea but if you

329
00:17:41,000 --> 00:17:43,220
remember if you recall you Neve

330
00:17:43,220 --> 00:17:45,770
mentioned a major issue with dynamic

331
00:17:45,770 --> 00:17:50,780
analysis which is partial coverage we

332
00:17:50,780 --> 00:17:54,830
don't expect in this case that dynamic

333
00:17:54,830 --> 00:17:56,630
analysis would be able to cover all

334
00:17:56,630 --> 00:17:59,240
string decryptions because it doesn't

335
00:17:59,240 --> 00:18:03,410
usually cover any possible flow in the

336
00:18:03,410 --> 00:18:07,750
app's code so a better more

337
00:18:07,750 --> 00:18:10,700
comprehensive solution will require a

338
00:18:10,700 --> 00:18:13,190
bit more work during the static analysis

339
00:18:13,190 --> 00:18:18,080
phase we will not only find all calls to

340
00:18:18,080 --> 00:18:19,970
the decryption function in this case

341
00:18:19,970 --> 00:18:23,000
it's the function here Bar will also

342
00:18:23,000 --> 00:18:24,640
have to perform a backtrack search

343
00:18:24,640 --> 00:18:27,919
looking for the values of the arguments

344
00:18:27,919 --> 00:18:30,169
passed to the decryption function in

345
00:18:30,169 --> 00:18:31,970
this case it's a constant string and a

346
00:18:31,970 --> 00:18:34,910
constant number so that's not hard to do

347
00:18:34,910 --> 00:18:37,669
in static analysis it's basically the

348
00:18:37,669 --> 00:18:41,090
basic stuff that we do so no static

349
00:18:41,090 --> 00:18:42,770
analysis can pass to the network

350
00:18:42,770 --> 00:18:45,710
analysis a comprehensive list of all the

351
00:18:45,710 --> 00:18:48,559
cripton function calls with the values

352
00:18:48,559 --> 00:18:51,470
of the parameters so basically the Namek

353
00:18:51,470 --> 00:18:53,840
analysis now has all the information it

354
00:18:53,840 --> 00:18:56,570
needs to perform the cripton on its own

355
00:18:56,570 --> 00:18:59,990
to execute the decryption code outside

356
00:18:59,990 --> 00:19:04,549
of its ordinary context or flow so what

357
00:19:04,549 --> 00:19:06,650
would happen then I reckon Allison would

358
00:19:06,650 --> 00:19:09,320
load the apk but it wouldn't start the

359
00:19:09,320 --> 00:19:12,490
app yet and start the main activity

360
00:19:12,490 --> 00:19:15,559
instead it would patch Android runtime

361
00:19:15,559 --> 00:19:19,190
to execute the decryption calls one

362
00:19:19,190 --> 00:19:22,370
after the other and would save the

363
00:19:22,370 --> 00:19:24,620
return value of the decrypted strings in

364
00:19:24,620 --> 00:19:26,929
order to pass them all later the static

365
00:19:26,929 --> 00:19:30,770
analysis and the static analysis can use

366
00:19:30,770 --> 00:19:33,049
the values of the decrypted string to

367
00:19:33,049 --> 00:19:37,489
sort of patch the code what do I mean by

368
00:19:37,489 --> 00:19:40,159
patching the code first we just replace

369
00:19:40,159 --> 00:19:43,009
the function calls to decryption with

370
00:19:43,009 --> 00:19:47,299
the values of the decrypted strings but

371
00:19:47,299 --> 00:19:49,399
if we also want to deal with the problem

372
00:19:49,399 --> 00:19:51,950
of function call by reflection we want

373
00:19:51,950 --> 00:19:54,980
to change these function calls to just

374
00:19:54,980 --> 00:19:56,869
ordinary function calls that static

375
00:19:56,869 --> 00:20:00,169
analysis knows how to follow so we will

376
00:20:00,169 --> 00:20:03,230
look for calls to the method invoke the

377
00:20:03,230 --> 00:20:07,159
API before a backtrack search to find

378
00:20:07,159 --> 00:20:10,249
the names of the invoked classes and

379
00:20:10,249 --> 00:20:13,190
methods and by now these names have

380
00:20:13,190 --> 00:20:15,859
already been decrypted so it's ok and

381
00:20:15,859 --> 00:20:19,070
then we just replace calls to method

382
00:20:19,070 --> 00:20:24,669
invoke with ordinary function calls so I

383
00:20:24,669 --> 00:20:27,830
hope it's clear enough but if not don't

384
00:20:27,830 --> 00:20:30,619
worry it's a it's just a basic example

385
00:20:30,619 --> 00:20:33,859
of how a patched code would look like

386
00:20:33,859 --> 00:20:35,659
it's really a simple example without

387
00:20:35,659 --> 00:20:37,909
reflection so basically what we have

388
00:20:37,909 --> 00:20:41,480
here is a piece of code that wants to

389
00:20:41,480 --> 00:20:44,869
get the device ID and to do so it needs

390
00:20:44,869 --> 00:20:48,049
first of all to pass the string phone to

391
00:20:48,049 --> 00:20:51,830
the gate system service API so in the

392
00:20:51,830 --> 00:20:55,340
original apk we had the string phone

393
00:20:55,340 --> 00:21:03,950
encrypted and now it's decrypted so as

394
00:21:03,950 --> 00:21:05,929
some of you may have noticed there are

395
00:21:05,929 --> 00:21:08,629
limitations to the solution that we just

396
00:21:08,629 --> 00:21:13,549
talked about so first I mean I think

397
00:21:13,549 --> 00:21:15,590
it's worth noting that for us the most

398
00:21:15,590 --> 00:21:19,070
important thing wasn't to necessarily

399
00:21:19,070 --> 00:21:21,169
get the best most comprehensive the

400
00:21:21,169 --> 00:21:23,570
obfuscation solution but to really

401
00:21:23,570 --> 00:21:25,940
implement and deploy to production a

402
00:21:25,940 --> 00:21:27,980
feature that combines static analysis

403
00:21:27,980 --> 00:21:30,889
with dynamic so it's okay for us that

404
00:21:30,889 --> 00:21:33,080
there are limitations but you know let's

405
00:21:33,080 --> 00:21:36,649
just state them for the record at the

406
00:21:36,649 --> 00:21:39,320
moment it only works if the decryption

407
00:21:39,320 --> 00:21:41,809
function is static and it's not

408
00:21:41,809 --> 00:21:43,700
dependent on any previously initialized

409
00:21:43,700 --> 00:21:45,920
objects

410
00:21:45,920 --> 00:21:48,710
static and also receives constant

411
00:21:48,710 --> 00:21:51,950
arguments and also we assume that the

412
00:21:51,950 --> 00:21:53,570
decryption function doesn't have any

413
00:21:53,570 --> 00:21:55,429
side effects right because now it will

414
00:21:55,429 --> 00:22:02,390
run like twice instead of once so just

415
00:22:02,390 --> 00:22:05,660
quickly about a little experiment that

416
00:22:05,660 --> 00:22:09,350
we did to test our approach we wanted to

417
00:22:09,350 --> 00:22:10,730
start with a relatively simple

418
00:22:10,730 --> 00:22:13,490
obfuscator - oh it's a commonly

419
00:22:13,490 --> 00:22:17,420
available commercial obfuscator and the

420
00:22:17,420 --> 00:22:20,179
example previously saw was a code that

421
00:22:20,179 --> 00:22:23,570
was indeed obfuscated with - oh so we

422
00:22:23,570 --> 00:22:25,670
implemented a signature to find that

423
00:22:25,670 --> 00:22:28,670
show samples we found about 600 samples

424
00:22:28,670 --> 00:22:32,120
with - all string encryption in our APK

425
00:22:32,120 --> 00:22:35,929
database and the example of strings

426
00:22:35,929 --> 00:22:40,130
we've found there and so we ran our

427
00:22:40,130 --> 00:22:43,600
complete solution on these 600 samples

428
00:22:43,600 --> 00:22:46,970
we found that many of them had hundreds

429
00:22:46,970 --> 00:22:48,920
or even thousands of encrypted strings

430
00:22:48,920 --> 00:22:51,950
and it was nice to see that static

431
00:22:51,950 --> 00:22:55,010
analysis detected new sensitive flows in

432
00:22:55,010 --> 00:22:57,830
10% of these every apps

433
00:22:57,830 --> 00:23:00,350
I mean flows that it didn't detect

434
00:23:00,350 --> 00:23:02,330
before when the strings were encrypted

435
00:23:02,330 --> 00:23:05,120
so access to Google account credentials

436
00:23:05,120 --> 00:23:10,820
text messages user contacts and 10% may

437
00:23:10,820 --> 00:23:13,220
not sound like much but Mary in mind

438
00:23:13,220 --> 00:23:15,679
that most of these apps are actually

439
00:23:15,679 --> 00:23:18,410
benign so it's perfectly possible but

440
00:23:18,410 --> 00:23:20,210
they don't have a lot of access to

441
00:23:20,210 --> 00:23:25,820
sensitive user data so easier said than

442
00:23:25,820 --> 00:23:26,120
done

443
00:23:26,120 --> 00:23:28,580
we did have to face some challenges at

444
00:23:28,580 --> 00:23:31,309
the implementation phase because first

445
00:23:31,309 --> 00:23:33,050
of all static analysis and dynamic

446
00:23:33,050 --> 00:23:35,570
analysis weren't designed in our case to

447
00:23:35,570 --> 00:23:37,790
work together and they run in different

448
00:23:37,790 --> 00:23:39,770
environments because the narvik analysis

449
00:23:39,770 --> 00:23:42,620
needs a fancy Android emulator and study

450
00:23:42,620 --> 00:23:45,860
analysis doesn't and also dynamic

451
00:23:45,860 --> 00:23:48,710
analysis had to violate a kind of prime

452
00:23:48,710 --> 00:23:50,450
directive which is kind of similar to

453
00:23:50,450 --> 00:23:53,929
the prime directive in Star Trek those

454
00:23:53,929 --> 00:23:55,730
of you are familiar you're not supposed

455
00:23:55,730 --> 00:23:58,650
to interfere with what you see but you

456
00:23:58,650 --> 00:24:01,170
discover so dynamic analysis usually and

457
00:24:01,170 --> 00:24:03,300
you don't want it to interfere if the

458
00:24:03,300 --> 00:24:05,940
applications run because then it makes

459
00:24:05,940 --> 00:24:08,580
it easier from our to realize that it's

460
00:24:08,580 --> 00:24:11,370
being emulated being analyzed but in

461
00:24:11,370 --> 00:24:16,590
this case we did interfere and testing

462
00:24:16,590 --> 00:24:18,660
it's also required an interesting

463
00:24:18,660 --> 00:24:21,510
infrastructure to run all these 600 apps

464
00:24:21,510 --> 00:24:25,310
on both dynamic and static analysis so

465
00:24:25,310 --> 00:24:28,080
just a quick note about what happened

466
00:24:28,080 --> 00:24:29,880
when we deployed it to our production

467
00:24:29,880 --> 00:24:35,910
environment first of all it currently

468
00:24:35,910 --> 00:24:37,950
supports decryption of

469
00:24:37,950 --> 00:24:40,770
- Oh obfuscated apps and also some

470
00:24:40,770 --> 00:24:45,960
verses of text guard and most apps we

471
00:24:45,960 --> 00:24:48,500
ran in production and had just a few

472
00:24:48,500 --> 00:24:50,700
encrypted strings but some of them had

473
00:24:50,700 --> 00:24:53,130
like megabytes of off encrypted string

474
00:24:53,130 --> 00:24:55,040
data which really caused interesting

475
00:24:55,040 --> 00:24:58,590
performance issues for us at first and

476
00:24:58,590 --> 00:25:00,150
also the the whole thing was much more

477
00:25:00,150 --> 00:25:01,800
volatile than you initially thought

478
00:25:01,800 --> 00:25:05,040
because some apps are just not written

479
00:25:05,040 --> 00:25:07,590
very well maybe they only work well on

480
00:25:07,590 --> 00:25:10,880
some Android variants so they just

481
00:25:10,880 --> 00:25:13,080
crashed in our analysis environment

482
00:25:13,080 --> 00:25:16,980
before we even managed to run the string

483
00:25:16,980 --> 00:25:22,110
decryption flow but overall it's

484
00:25:22,110 --> 00:25:23,220
currently working in our production

485
00:25:23,220 --> 00:25:26,510
environment and the performance impact

486
00:25:26,510 --> 00:25:30,780
isn't very significant so to sum things

487
00:25:30,780 --> 00:25:32,820
up and I hope we'll have time for a

488
00:25:32,820 --> 00:25:37,110
couple of questions back to you thank

489
00:25:37,110 --> 00:25:39,060
you ok so we were very pleased with our

490
00:25:39,060 --> 00:25:40,290
results were running in two different

491
00:25:40,290 --> 00:25:42,420
production for for a couple of months

492
00:25:42,420 --> 00:25:44,580
for us so the main achievement was

493
00:25:44,580 --> 00:25:49,620
actual ability to to get all the people

494
00:25:49,620 --> 00:25:52,560
together and do that and reach that

495
00:25:52,560 --> 00:25:54,990
stage where we just can actually

496
00:25:54,990 --> 00:25:58,920
engineer that thing and the results were

497
00:25:58,920 --> 00:26:00,390
so good

498
00:26:00,390 --> 00:26:03,840
compared to like original skeptical

499
00:26:03,840 --> 00:26:06,810
views that there is a lot of hunger now

500
00:26:06,810 --> 00:26:11,110
to continue with this approach so we are

501
00:26:11,110 --> 00:26:13,950
early working on much more sophisticated

502
00:26:13,950 --> 00:26:16,780
depreciation techniques that actually do

503
00:26:16,780 --> 00:26:21,700
handle state and try to work with with

504
00:26:21,700 --> 00:26:23,830
more complicated situations where it's

505
00:26:23,830 --> 00:26:26,710
even not necessarily a function because

506
00:26:26,710 --> 00:26:29,770
not all ofus caters necessarily create a

507
00:26:29,770 --> 00:26:31,480
separate function so we have to handle

508
00:26:31,480 --> 00:26:33,820
actually pieces of a code that will have

509
00:26:33,820 --> 00:26:39,790
to replicate and a lot of directional

510
00:26:39,790 --> 00:26:44,020
things to do hopefully next year thank

511
00:26:44,020 --> 00:26:47,000
you you have any questions

512
00:26:47,000 --> 00:26:50,829
[Applause]

