1
00:00:00,030 --> 00:00:01,500
all right we're ready to start with our

2
00:00:01,500 --> 00:00:03,870
second presentations dice from f-secure

3
00:00:03,870 --> 00:00:09,030
will be presenting now good morning

4
00:00:09,030 --> 00:00:13,370
I hope you are not so it likewise I am

5
00:00:13,370 --> 00:00:18,210
I've been talking about logic and SMGs

6
00:00:18,210 --> 00:00:20,070
overs for a while now-like the last

7
00:00:20,070 --> 00:00:22,949
whole year and this is the last time

8
00:00:22,949 --> 00:00:25,710
not about binaries and not about SMT

9
00:00:25,710 --> 00:00:28,650
sofas but maybe about malware with smj

10
00:00:28,650 --> 00:00:32,929
Sobers together so I'm really nervous

11
00:00:34,070 --> 00:00:36,600
because this research was mostly done

12
00:00:36,600 --> 00:00:40,410
also in my free time so it's a hobby

13
00:00:40,410 --> 00:00:44,789
project don't be no have a high you

14
00:00:44,789 --> 00:00:46,559
should not have high expectations on

15
00:00:46,559 --> 00:00:51,930
that during the day I'm I'm watching I'm

16
00:00:51,930 --> 00:00:54,120
looking at binaries I have security

17
00:00:54,120 --> 00:00:56,579
system around a year now

18
00:00:56,579 --> 00:00:59,850
I also a member of the black hoodie it's

19
00:00:59,850 --> 00:01:02,190
a reverse engineering which came for

20
00:01:02,190 --> 00:01:06,540
women I am in the board of some nice

21
00:01:06,540 --> 00:01:10,860
hacking conferences and also lead off

22
00:01:10,860 --> 00:01:16,470
some stuff on the hacker space but I'm

23
00:01:16,470 --> 00:01:19,860
mostly a with my computer playing with

24
00:01:19,860 --> 00:01:23,250
Prolog and without a computer you can

25
00:01:23,250 --> 00:01:28,560
find me in some walls in the montes so

26
00:01:28,560 --> 00:01:30,750
and what I'm going to talk about today

27
00:01:30,750 --> 00:01:34,229
is I try to put together two of the

28
00:01:34,229 --> 00:01:37,530
things that I was like that's logical

29
00:01:37,530 --> 00:01:41,540
programming SMGs overs and math and

30
00:01:41,540 --> 00:01:46,259
malware so I'm going to talk about

31
00:01:46,259 --> 00:01:48,450
constrain logical programming

32
00:01:48,450 --> 00:01:50,700
I'm going to talk about solvers again

33
00:01:50,700 --> 00:01:55,140
I'm talk really fast about malware

34
00:01:55,140 --> 00:01:56,549
reverse engineering because I'm pretty

35
00:01:56,549 --> 00:01:58,320
sure you know more about that than me

36
00:01:58,320 --> 00:02:01,649
and then I will talk about how it was

37
00:02:01,649 --> 00:02:05,790
playing with logic against malware so

38
00:02:05,790 --> 00:02:07,740
during this year I heard a lot of times

39
00:02:07,740 --> 00:02:10,889
the same question like what are you

40
00:02:10,889 --> 00:02:12,840
talking about s/m what

41
00:02:12,840 --> 00:02:16,560
and I know that the college is really

42
00:02:16,560 --> 00:02:19,950
far away for me at least and we learn it

43
00:02:19,950 --> 00:02:21,390
at the theoretical computer science

44
00:02:21,390 --> 00:02:25,520
about a such problem and the set is just

45
00:02:25,520 --> 00:02:29,430
a problem that it's reasoning if we can

46
00:02:29,430 --> 00:02:33,390
say if you have like a very both of a

47
00:02:33,390 --> 00:02:37,560
giving boolean formula and it is trying

48
00:02:37,560 --> 00:02:40,500
to replace all the variables to one and

49
00:02:40,500 --> 00:02:43,650
zeros in a way that will always evaluate

50
00:02:43,650 --> 00:02:48,540
to 1 that means to true and the issue if

51
00:02:48,540 --> 00:02:51,510
the set problem is that it's a know any

52
00:02:51,510 --> 00:02:54,989
Pekin pleat problem and like all the

53
00:02:54,989 --> 00:02:57,260
problems in this complexity class it's

54
00:02:57,260 --> 00:03:00,000
there is no efficient algorithm to solve

55
00:03:00,000 --> 00:03:02,940
the set problem that window about at

56
00:03:02,940 --> 00:03:06,989
least and but sets office is to be

57
00:03:06,989 --> 00:03:08,700
efficient enough to solve the problems

58
00:03:08,700 --> 00:03:10,500
that we have in there is a Q&A chat list

59
00:03:10,500 --> 00:03:17,310
and the hard part on that is to

60
00:03:17,310 --> 00:03:21,420
translate the higher-level problems that

61
00:03:21,420 --> 00:03:24,450
we have into boolean formulas and that's

62
00:03:24,450 --> 00:03:29,310
there that's why this SMG come into the

63
00:03:29,310 --> 00:03:32,970
play so that's the primary goal of the

64
00:03:32,970 --> 00:03:34,890
research in the SMT it's to create this

65
00:03:34,890 --> 00:03:37,140
kind of verification engines that can

66
00:03:37,140 --> 00:03:40,560
reason achieve Li from this higher level

67
00:03:40,560 --> 00:03:44,670
of abstraction while still retaining all

68
00:03:44,670 --> 00:03:47,220
the speed and automation that we have

69
00:03:47,220 --> 00:03:52,109
already in the boolean engines so to

70
00:03:52,109 --> 00:03:55,829
make it easy it's almost like the same

71
00:03:55,829 --> 00:03:57,540
outside so you don't need to look at a

72
00:03:57,540 --> 00:03:59,549
picture you can know you can't look at

73
00:03:59,549 --> 00:04:02,280
through the window but the same trees

74
00:04:02,280 --> 00:04:03,810
over you haven't this up this picture

75
00:04:03,810 --> 00:04:07,139
and you are here inside and us like can

76
00:04:07,139 --> 00:04:09,380
I go outside without getting wet and

77
00:04:09,380 --> 00:04:11,910
then it will look outside you will find

78
00:04:11,910 --> 00:04:14,780
some people there that have umbrellas

79
00:04:14,780 --> 00:04:17,789
it's raining but maybe and then it's a

80
00:04:17,789 --> 00:04:19,978
yeah it's possible if you have an

81
00:04:19,978 --> 00:04:21,149
umbrella and then you put another

82
00:04:21,149 --> 00:04:23,580
constraint you say yeah I don't have a

83
00:04:23,580 --> 00:04:24,450
number

84
00:04:24,450 --> 00:04:26,160
and then there simcha so we'll probably

85
00:04:26,160 --> 00:04:30,750
say no so I talked about constraints

86
00:04:30,750 --> 00:04:35,760
what are constraints if you think about

87
00:04:35,760 --> 00:04:39,120
a maze you haven't liked the easy mazes

88
00:04:39,120 --> 00:04:40,800
that you can you have multiple paths

89
00:04:40,800 --> 00:04:43,200
from coming to one side to the next and

90
00:04:43,200 --> 00:04:45,600
you can take multiple paths and you

91
00:04:45,600 --> 00:04:47,520
still go into the end of the maze right

92
00:04:47,520 --> 00:04:49,590
and come straight select walls in this

93
00:04:49,590 --> 00:04:52,950
maze if you put more walls you have less

94
00:04:52,950 --> 00:04:57,060
paths that are possible and you can play

95
00:04:57,060 --> 00:04:58,920
with constraint programming putting more

96
00:04:58,920 --> 00:05:01,470
and more walls into your maze and she

97
00:05:01,470 --> 00:05:05,220
will have no way out any more and then

98
00:05:05,220 --> 00:05:08,130
it's like your problem is not solvable

99
00:05:08,130 --> 00:05:12,180
and this is the guy that inspire me

100
00:05:12,180 --> 00:05:13,950
starting working with constraint

101
00:05:13,950 --> 00:05:16,410
programming because he's all about the

102
00:05:16,410 --> 00:05:19,080
same stuff that I saw I saw it after

103
00:05:19,080 --> 00:05:22,560
he's clever but it's kind of like the

104
00:05:22,560 --> 00:05:24,270
computer is doing the job for me that's

105
00:05:24,270 --> 00:05:25,950
exactly what I want for my computer I

106
00:05:25,950 --> 00:05:29,430
have a problem I know what is how the

107
00:05:29,430 --> 00:05:32,940
solution should look like and a computer

108
00:05:32,940 --> 00:05:35,400
you do it for me I don't need to think

109
00:05:35,400 --> 00:05:38,480
about how to solve the problem like

110
00:05:38,480 --> 00:05:41,990
imperative programming works I can just

111
00:05:41,990 --> 00:05:44,460
state the problems that I have the

112
00:05:44,460 --> 00:05:46,890
constraints that I have in my situation

113
00:05:46,890 --> 00:05:49,350
and the computer will find a solution

114
00:05:49,350 --> 00:05:54,570
for me so if you want to know more how I

115
00:05:54,570 --> 00:05:56,700
symmetries overworks internals of it and

116
00:05:56,700 --> 00:05:58,800
everything you can talk to me later I

117
00:05:58,800 --> 00:06:01,080
love to talk about it I'm always happy

118
00:06:01,080 --> 00:06:05,910
about talking about logic but I just

119
00:06:05,910 --> 00:06:08,400
have 30 minutes so for now we are going

120
00:06:08,400 --> 00:06:10,890
to talk to see SMT solvers as a black

121
00:06:10,890 --> 00:06:14,520
box and you will feed it with a formula

122
00:06:14,520 --> 00:06:17,700
and this formula is like the theory that

123
00:06:17,700 --> 00:06:20,730
you have the problem that you have the

124
00:06:20,730 --> 00:06:23,850
starting conditions and also the goal

125
00:06:23,850 --> 00:06:26,970
that you want to achieve and then you

126
00:06:26,970 --> 00:06:29,490
put everything inside this smg's over

127
00:06:29,490 --> 00:06:33,060
your engine and this engine will deal

128
00:06:33,060 --> 00:06:35,250
with all the logical connections that

129
00:06:35,250 --> 00:06:37,390
you have and if

130
00:06:37,390 --> 00:06:39,160
it finds a possible solution for a

131
00:06:39,160 --> 00:06:42,700
problem like a way to find to get out of

132
00:06:42,700 --> 00:06:47,800
the maze it will return the for you

133
00:06:47,800 --> 00:06:51,250
something like set or feasible and more

134
00:06:51,250 --> 00:06:54,400
than that most of the engines right now

135
00:06:54,400 --> 00:06:57,820
they can also use backtracking and give

136
00:06:57,820 --> 00:07:01,300
you how it got out of there coming down

137
00:07:01,300 --> 00:07:04,030
from the end from the solution back to

138
00:07:04,030 --> 00:07:09,100
the starting point and each of these

139
00:07:09,100 --> 00:07:10,810
possibilities because it can find more

140
00:07:10,810 --> 00:07:12,520
than one as I thought before it will

141
00:07:12,520 --> 00:07:14,200
give you an answer if it's not good

142
00:07:14,200 --> 00:07:16,030
enough for you like using our umbrella

143
00:07:16,030 --> 00:07:18,670
it will try another another solution for

144
00:07:18,670 --> 00:07:21,670
you each of these possibilities are

145
00:07:21,670 --> 00:07:24,910
called instances your instance of

146
00:07:24,910 --> 00:07:26,590
qualifier the axioms but that's not the

147
00:07:26,590 --> 00:07:35,950
paper and that is how it works but why

148
00:07:35,950 --> 00:07:37,870
would you need that in computer science

149
00:07:37,870 --> 00:07:40,300
and my specifically clean security

150
00:07:40,300 --> 00:07:43,270
before they the mathematicians are using

151
00:07:43,270 --> 00:07:46,140
this kind of engines to prove large

152
00:07:46,140 --> 00:07:49,030
theorems so you could state and prove

153
00:07:49,030 --> 00:07:51,370
really tiny mathematical theorems and

154
00:07:51,370 --> 00:07:54,430
from that infer that larger and more

155
00:07:54,430 --> 00:07:58,860
complicated problems were also true and

156
00:07:58,860 --> 00:08:01,390
why could not the computer scientists do

157
00:08:01,390 --> 00:08:04,210
the same so you can also state asserts

158
00:08:04,210 --> 00:08:06,550
and stuff that you want your software or

159
00:08:06,550 --> 00:08:09,430
hardware to do and make sure that it's

160
00:08:09,430 --> 00:08:11,200
set so that it's useful that it's

161
00:08:11,200 --> 00:08:17,530
feasible and doing is proving about our

162
00:08:17,530 --> 00:08:20,530
verifying smaller pieces of code you can

163
00:08:20,530 --> 00:08:23,920
also infer and make it possible with

164
00:08:23,920 --> 00:08:28,300
large-scale verification large-scale

165
00:08:28,300 --> 00:08:29,980
verification of hardware and software

166
00:08:29,980 --> 00:08:34,090
can also be morally ibook and it's also

167
00:08:34,090 --> 00:08:39,370
another big field already it's getting

168
00:08:39,370 --> 00:08:40,929
bigger and bigger right now it's the

169
00:08:40,929 --> 00:08:45,490
long stack that it's also using SMT

170
00:08:45,490 --> 00:08:48,610
source and then we have logic also in

171
00:08:48,610 --> 00:08:50,340
the symbolic education

172
00:08:50,340 --> 00:08:52,440
symbolic education is more known

173
00:08:52,440 --> 00:08:54,930
technique it's just automatically

174
00:08:54,930 --> 00:08:57,750
exploring all the program program paths

175
00:08:57,750 --> 00:09:00,570
that you have and verifying which kind

176
00:09:00,570 --> 00:09:02,580
of inputs you need each branching point

177
00:09:02,580 --> 00:09:07,730
so it works almost like that

178
00:09:08,270 --> 00:09:11,070
the problem here as you can see it's

179
00:09:11,070 --> 00:09:12,960
like you just have not even eleven lines

180
00:09:12,960 --> 00:09:16,580
of code and you have a huge amount of

181
00:09:16,580 --> 00:09:20,490
data to store already so in a

182
00:09:20,490 --> 00:09:22,050
theoretical approach you can say that

183
00:09:22,050 --> 00:09:23,940
the language accepted by this Turing

184
00:09:23,940 --> 00:09:27,839
machine is even it's going to be

185
00:09:27,839 --> 00:09:30,660
extended with some kind of symbolic

186
00:09:30,660 --> 00:09:33,930
values for the reading input and this

187
00:09:33,930 --> 00:09:36,330
will represent your unknown or possible

188
00:09:36,330 --> 00:09:39,120
state and then all the education pets

189
00:09:39,120 --> 00:09:43,980
will be collected along the way so this

190
00:09:43,980 --> 00:09:46,680
is a really simple algorithm for

191
00:09:46,680 --> 00:09:48,210
symbolic education so if you think about

192
00:09:48,210 --> 00:09:52,320
it's not so hard to implement but as you

193
00:09:52,320 --> 00:09:55,110
could see before it's also in the

194
00:09:55,110 --> 00:09:57,690
exponential complexity class so it's

195
00:09:57,690 --> 00:09:59,550
going to increase increase increase like

196
00:09:59,550 --> 00:10:03,000
crazy and as symbolic education

197
00:10:03,000 --> 00:10:06,680
algorithm is forking every branch point

198
00:10:06,680 --> 00:10:09,960
when you are implementing it you should

199
00:10:09,960 --> 00:10:12,570
try to implement all already check with

200
00:10:12,570 --> 00:10:14,310
the SMT solvers in the branching point

201
00:10:14,310 --> 00:10:17,339
so you can limit the breadth of your

202
00:10:17,339 --> 00:10:22,710
control flow graph when you are talking

203
00:10:22,710 --> 00:10:24,540
about the control flow graph that we are

204
00:10:24,540 --> 00:10:26,490
trying to generate here we should also

205
00:10:26,490 --> 00:10:28,440
remember that the precision of this

206
00:10:28,440 --> 00:10:32,400
graph and the performance of the hair

207
00:10:32,400 --> 00:10:35,370
analysis are codependent and they are

208
00:10:35,370 --> 00:10:37,260
also relying on the options that you are

209
00:10:37,260 --> 00:10:41,280
using to generate this graph if you want

210
00:10:41,280 --> 00:10:44,310
a high context sensitivity of course you

211
00:10:44,310 --> 00:10:46,470
were going to be able to do cross

212
00:10:46,470 --> 00:10:49,170
referencing and check how the parameters

213
00:10:49,170 --> 00:10:52,380
involved and everything but that also

214
00:10:52,380 --> 00:10:54,029
means that increasing the contact

215
00:10:54,029 --> 00:10:57,180
sensitivity will result in a greater

216
00:10:57,180 --> 00:11:00,510
number of clones of your nodes on your

217
00:11:00,510 --> 00:11:01,480
graph

218
00:11:01,480 --> 00:11:04,410
so it's important to keep in mind that

219
00:11:04,410 --> 00:11:08,560
symbols are now also arguments work for

220
00:11:08,560 --> 00:11:11,320
your program and the that you re story

221
00:11:11,320 --> 00:11:15,480
not just visible past but any of it and

222
00:11:15,480 --> 00:11:18,160
that not just the program stage right

223
00:11:18,160 --> 00:11:21,100
now is in your liking your debugger but

224
00:11:21,100 --> 00:11:21,610
you have

225
00:11:21,610 --> 00:11:23,950
oh the program possible program states

226
00:11:23,950 --> 00:11:27,670
is starting our memory another problem

227
00:11:27,670 --> 00:11:29,590
in the symbolic education is that

228
00:11:29,590 --> 00:11:33,070
symbolic images also use it in memory

229
00:11:33,070 --> 00:11:35,320
allocations and all the peph

230
00:11:35,320 --> 00:11:37,630
conditionals are also going to be stored

231
00:11:37,630 --> 00:11:42,640
somewhere in your memory now that we

232
00:11:42,640 --> 00:11:44,440
know all the problems I'm going to talk

233
00:11:44,440 --> 00:11:46,030
really quickly about the applications in

234
00:11:46,030 --> 00:11:49,630
the IC IT security and to think really

235
00:11:49,630 --> 00:11:53,140
simple you just need a model and the

236
00:11:53,140 --> 00:11:56,200
model that I tried to use it's really

237
00:11:56,200 --> 00:12:00,010
neat it's like my program is safe if

238
00:12:00,010 --> 00:12:03,190
nothing bad happens easy right so this

239
00:12:03,190 --> 00:12:06,040
way you can just infer that if you have

240
00:12:06,040 --> 00:12:08,080
a model and you have a state that it's

241
00:12:08,080 --> 00:12:10,440
like something bad happens and then you

242
00:12:10,440 --> 00:12:12,910
you have these estate property and you

243
00:12:12,910 --> 00:12:15,040
check all the reachable points that you

244
00:12:15,040 --> 00:12:16,780
have in your code and you just made

245
00:12:16,780 --> 00:12:19,240
intersection if your intersection is

246
00:12:19,240 --> 00:12:22,030
like a you've just said you are good to

247
00:12:22,030 --> 00:12:26,620
go but I will show some applications in

248
00:12:26,620 --> 00:12:29,200
the real world you have the bug in

249
00:12:29,200 --> 00:12:31,450
hunting people are using it for fuzzing

250
00:12:31,450 --> 00:12:33,280
for code verification as I thought

251
00:12:33,280 --> 00:12:37,630
before and for binary analysis some

252
00:12:37,630 --> 00:12:39,070
other people are also using for

253
00:12:39,070 --> 00:12:43,330
exploitation so you cannot write box and

254
00:12:43,330 --> 00:12:46,510
work with automated exploit generation

255
00:12:46,510 --> 00:12:49,300
and automated a payload generation with

256
00:12:49,300 --> 00:12:53,410
that and today I'm going to talk about

257
00:12:53,410 --> 00:12:56,020
malware analysis the first one is

258
00:12:56,020 --> 00:12:58,540
obfuscation because it's how it later

259
00:12:58,540 --> 00:13:01,360
but compiler optimizations are also

260
00:13:01,360 --> 00:13:03,580
inside already programming it too and

261
00:13:03,580 --> 00:13:08,140
also some crypto analysis when area

262
00:13:08,140 --> 00:13:11,410
location is what make me for totally in

263
00:13:11,410 --> 00:13:13,050
love with malware

264
00:13:13,050 --> 00:13:16,410
my way is so interesting and just

265
00:13:16,410 --> 00:13:19,440
because it it's like the techniques that

266
00:13:19,440 --> 00:13:22,350
you see in the malware is the same

267
00:13:22,350 --> 00:13:24,020
things that you have in the real world

268
00:13:24,020 --> 00:13:26,280
there are only difference that's what is

269
00:13:26,280 --> 00:13:30,240
inside they obfuscated code because even

270
00:13:30,240 --> 00:13:33,150
in the AV if you think about the malware

271
00:13:33,150 --> 00:13:35,190
is obfuscated we think it's really bad

272
00:13:35,190 --> 00:13:38,280
but then our signatures are also

273
00:13:38,280 --> 00:13:39,840
obfuscated somewhere in the code because

274
00:13:39,840 --> 00:13:41,160
you don't want that people can read it

275
00:13:41,160 --> 00:13:45,090
right so you always have these two sides

276
00:13:45,090 --> 00:13:47,550
and almost everything that you find in

277
00:13:47,550 --> 00:13:50,810
malware can also be used for good and

278
00:13:50,810 --> 00:13:54,660
how my way obfuscation works I guess I

279
00:13:54,660 --> 00:13:56,010
don't need to talk about that because

280
00:13:56,010 --> 00:14:03,270
you know better than me but I'm going to

281
00:14:03,270 --> 00:14:05,850
talk about the parts that it's easier to

282
00:14:05,850 --> 00:14:10,710
show the is this a way to show

283
00:14:10,710 --> 00:14:13,320
obfuscated malware is creating carpet

284
00:14:13,320 --> 00:14:16,470
code so you just have some complex why

285
00:14:16,470 --> 00:14:19,290
or go through code that's never going to

286
00:14:19,290 --> 00:14:22,830
be executed but who cares when you're

287
00:14:22,830 --> 00:14:25,260
doing static analysis you have this huge

288
00:14:25,260 --> 00:14:27,000
amount of code and then you open eating

289
00:14:27,000 --> 00:14:28,230
either and you are shocked and think

290
00:14:28,230 --> 00:14:35,220
 there goes my weekend but no other

291
00:14:35,220 --> 00:14:37,230
people are also using more than that

292
00:14:37,230 --> 00:14:40,530
also like so sorry some parts of the of

293
00:14:40,530 --> 00:14:42,300
the code that if you don't have like

294
00:14:42,300 --> 00:14:44,370
trainer dice to see okay this is

295
00:14:44,370 --> 00:14:47,430
something sometimes you just don't get

296
00:14:47,430 --> 00:14:53,210
it readable but it's there yeah I know

297
00:14:53,210 --> 00:14:56,520
and also so sometimes malware writers go

298
00:14:56,520 --> 00:14:58,470
a bit further and write their own

299
00:14:58,470 --> 00:15:02,100
peckers using a same cheese over and

300
00:15:02,100 --> 00:15:06,000
that's the lesson even that I have it's

301
00:15:06,000 --> 00:15:07,740
also possible to unpack the code without

302
00:15:07,740 --> 00:15:10,650
needing to actually run it so you don't

303
00:15:10,650 --> 00:15:12,630
need to debug the code to unpack it

304
00:15:12,630 --> 00:15:14,280
anymore

305
00:15:14,280 --> 00:15:16,890
so you avoid all the cases when you

306
00:15:16,890 --> 00:15:18,690
don't want to run the malicious code in

307
00:15:18,690 --> 00:15:21,300
your production because you are afraid

308
00:15:21,300 --> 00:15:25,600
of running malware right this

309
00:15:25,600 --> 00:15:26,860
just possible because there's some

310
00:15:26,860 --> 00:15:28,569
cheese service as I told before is

311
00:15:28,569 --> 00:15:31,060
giving your instances of possible and

312
00:15:31,060 --> 00:15:34,630
packet codes so yeah I'm really saying

313
00:15:34,630 --> 00:15:37,060
to you it's possible to a static generic

314
00:15:37,060 --> 00:15:41,110
unpacking or the code that you have so

315
00:15:41,110 --> 00:15:43,420
the implementation that I have right now

316
00:15:43,420 --> 00:15:46,089
is I have the control flow

317
00:15:46,089 --> 00:15:48,339
implementation I'm just doing a scan

318
00:15:48,339 --> 00:15:51,069
looking for conditional jumps where I

319
00:15:51,069 --> 00:15:54,180
have two operands to compare the

320
00:15:54,180 --> 00:15:57,279
location 1 and the where I am going to

321
00:15:57,279 --> 00:15:59,920
jump so the SM cheese always reasoning

322
00:15:59,920 --> 00:16:02,709
about the conditional one with the

323
00:16:02,709 --> 00:16:05,949
comparison 1 and then checks if I need

324
00:16:05,949 --> 00:16:07,990
to move the instruction pointer or not

325
00:16:07,990 --> 00:16:11,110
and if it's possible that I'm never

326
00:16:11,110 --> 00:16:13,350
going to take one of these options and

327
00:16:13,350 --> 00:16:15,880
if one of the condition is possible

328
00:16:15,880 --> 00:16:18,279
impossible to meet it doesn't matter if

329
00:16:18,279 --> 00:16:20,500
it's the true one or the false one the

330
00:16:20,500 --> 00:16:22,660
server will just remove the whole path

331
00:16:22,660 --> 00:16:24,399
is starting from the benching point so

332
00:16:24,399 --> 00:16:26,889
it would like till each all the code

333
00:16:26,889 --> 00:16:30,130
that I don't need to analyze anyway the

334
00:16:30,130 --> 00:16:33,100
data flow is pretty simple I never

335
00:16:33,100 --> 00:16:34,449
needed more than that I'm actually

336
00:16:34,449 --> 00:16:37,029
implementing it on the flow so every

337
00:16:37,029 --> 00:16:40,029
time when I make my code finds something

338
00:16:40,029 --> 00:16:41,889
that it's not implemented they will say

339
00:16:41,889 --> 00:16:43,660
hey I need this destruction then I

340
00:16:43,660 --> 00:16:46,930
implemented it and the API calls I'm

341
00:16:46,930 --> 00:16:48,610
just using the standard between de

342
00:16:48,610 --> 00:16:52,120
bellas from MSDN and I'm changing it

343
00:16:52,120 --> 00:16:54,100
also on the go because it's just

344
00:16:54,100 --> 00:17:00,339
scripting right as results from my name

345
00:17:00,339 --> 00:17:04,329
oh I have this external from sofa CFG

346
00:17:04,329 --> 00:17:08,140
2850 bear you name it it was 1.7

347
00:17:08,140 --> 00:17:10,059
megabyte and looked like that when I

348
00:17:10,059 --> 00:17:12,880
opened the first time and then I run it

349
00:17:12,880 --> 00:17:13,569
three times

350
00:17:13,569 --> 00:17:18,179
and it turned like this one megabit and

351
00:17:18,179 --> 00:17:22,030
the same happened with get justice for

352
00:17:22,030 --> 00:17:24,640
comparison so you can see how much code

353
00:17:24,640 --> 00:17:27,689
is just gone

354
00:17:29,030 --> 00:17:31,820
and the same with this one I had like

355
00:17:31,820 --> 00:17:35,510
96k it's not a big sample and then you

356
00:17:35,510 --> 00:17:37,640
run it twice and that's everything I

357
00:17:37,640 --> 00:17:42,620
need to analyze and just for comparison

358
00:17:42,620 --> 00:17:47,360
again so the limitations I thought

359
00:17:47,360 --> 00:17:50,870
before we have data reg : that's a

360
00:17:50,870 --> 00:17:53,270
better place not just for a V but and

361
00:17:53,270 --> 00:17:57,440
for my code but for everything that you

362
00:17:57,440 --> 00:17:59,060
have in the code verification with

363
00:17:59,060 --> 00:18:01,700
another code that it the rest your name

364
00:18:01,700 --> 00:18:03,710
is just saying that whatever property of

365
00:18:03,710 --> 00:18:07,250
a code that you want to check no other

366
00:18:07,250 --> 00:18:11,990
code can check or can it cannot say that

367
00:18:11,990 --> 00:18:14,420
it will always hold for us this kind of

368
00:18:14,420 --> 00:18:17,240
checks that you want to do and the thing

369
00:18:17,240 --> 00:18:18,890
with their ice theorem is that you can

370
00:18:18,890 --> 00:18:20,720
also reduce this to the housing problem

371
00:18:20,720 --> 00:18:22,910
and I guess everybody know what that

372
00:18:22,910 --> 00:18:27,910
means but yeah

373
00:18:28,000 --> 00:18:30,770
let's just say that if the problem

374
00:18:30,770 --> 00:18:32,750
cannot be solved by a Turing machine it

375
00:18:32,750 --> 00:18:35,420
cannot also not be solved by any kind of

376
00:18:35,420 --> 00:18:39,620
code or systematic way and the practical

377
00:18:39,620 --> 00:18:43,610
one is as I said before if you were

378
00:18:43,610 --> 00:18:45,500
going to have a good analysis of the

379
00:18:45,500 --> 00:18:47,480
code we also need a high contact

380
00:18:47,480 --> 00:18:49,610
sensitivity to have all the nodes that

381
00:18:49,610 --> 00:18:51,200
we need all the information that you can

382
00:18:51,200 --> 00:18:55,580
get from the sample and it also directly

383
00:18:55,580 --> 00:18:59,450
increase the the storage that we need

384
00:18:59,450 --> 00:19:01,060
and the time that we need right and

385
00:19:01,060 --> 00:19:04,670
however the Constitution may become like

386
00:19:04,670 --> 00:19:07,310
exponential resource expensive if you

387
00:19:07,310 --> 00:19:10,940
think about that it's exponential class

388
00:19:10,940 --> 00:19:14,600
complexity and for the processor that's

389
00:19:14,600 --> 00:19:17,540
not fun and most of the cases if you are

390
00:19:17,540 --> 00:19:19,630
doing static analysis is always about

391
00:19:19,630 --> 00:19:22,220
what you want to know what you need to

392
00:19:22,220 --> 00:19:24,700
know and how much time you have and

393
00:19:24,700 --> 00:19:28,730
that's not different here and this

394
00:19:28,730 --> 00:19:30,800
process needs to be repeated a lot of

395
00:19:30,800 --> 00:19:32,600
times I needed to run the code like

396
00:19:32,600 --> 00:19:34,010
three or four times until I get the

397
00:19:34,010 --> 00:19:38,840
final one so it it still cost a lot of

398
00:19:38,840 --> 00:19:41,050
time

399
00:19:42,320 --> 00:19:45,919
does that mean for me SMP is always a

400
00:19:45,919 --> 00:19:48,500
kind of integral part of my security

401
00:19:48,500 --> 00:19:51,230
toolkit right now I'm always using it

402
00:19:51,230 --> 00:19:53,690
for a lot of different stuff and he I

403
00:19:53,690 --> 00:19:56,029
just wanted to show her why servers are

404
00:19:56,029 --> 00:20:00,429
really good when to assist when you are

405
00:20:00,429 --> 00:20:04,610
reversing malware because they don't

406
00:20:04,610 --> 00:20:06,980
need to take care anymore or spend time

407
00:20:06,980 --> 00:20:09,169
on this code that it's like not

408
00:20:09,169 --> 00:20:11,509
important at all

409
00:20:11,509 --> 00:20:13,399
so that's support also the analyst

410
00:20:13,399 --> 00:20:16,250
looking for code vulnerabilities or

411
00:20:16,250 --> 00:20:18,470
exploit code or anything you want

412
00:20:18,470 --> 00:20:20,629
because it will scan it for you for the

413
00:20:20,629 --> 00:20:22,399
pattern that you want so you don't need

414
00:20:22,399 --> 00:20:27,259
to look at yourself important to know is

415
00:20:27,259 --> 00:20:30,080
that s in service I dare to simplify the

416
00:20:30,080 --> 00:20:31,970
control flow graph but it's not going to

417
00:20:31,970 --> 00:20:35,330
and just yeah just for supporting it and

418
00:20:35,330 --> 00:20:37,429
not replacing the analyst behind it

419
00:20:37,429 --> 00:20:39,710
because for the preliminary constraint

420
00:20:39,710 --> 00:20:41,899
generation step like the formula you

421
00:20:41,899 --> 00:20:43,759
still need an analyst behind it to say

422
00:20:43,759 --> 00:20:48,710
what you are looking for as I said it's

423
00:20:48,710 --> 00:20:51,850
the last one so it's back like dawn I

424
00:20:51,850 --> 00:20:55,159
did the binary garbage collector

425
00:20:55,159 --> 00:20:57,740
I did take source search some

426
00:20:57,740 --> 00:21:00,350
cryptographic algorithm a breaker they

427
00:21:00,350 --> 00:21:02,509
were mostly broken already in the

428
00:21:02,509 --> 00:21:05,899
implementation so the generic comebacker

429
00:21:05,899 --> 00:21:08,600
and I'm really happy about the binary

430
00:21:08,600 --> 00:21:10,759
structure recognizer that means I can

431
00:21:10,759 --> 00:21:13,580
tell which language was coded from the

432
00:21:13,580 --> 00:21:16,879
structure of the binary and the C++

433
00:21:16,879 --> 00:21:18,860
class is rocking a constructor that I

434
00:21:18,860 --> 00:21:22,909
just finished last week I'm still

435
00:21:22,909 --> 00:21:25,190
working on the hidari integration

436
00:21:25,190 --> 00:21:28,269
because it's broken its broken again and

437
00:21:28,269 --> 00:21:31,070
maybe an Ida plug-in but it's a big

438
00:21:31,070 --> 00:21:33,139
maybe because on other methods I'm also

439
00:21:33,139 --> 00:21:36,340
working on using specialized constrain

440
00:21:36,340 --> 00:21:40,639
inference assistant so I can improve or

441
00:21:40,639 --> 00:21:43,450
maybe even help the generation of the

442
00:21:43,450 --> 00:21:46,370
form of problem definition for the

443
00:21:46,370 --> 00:21:48,799
security matters like because right now

444
00:21:48,799 --> 00:21:51,980
I know that most of the people in

445
00:21:51,980 --> 00:21:54,289
security they have problems with the

446
00:21:54,289 --> 00:21:56,080
stage in the form Oh

447
00:21:56,080 --> 00:21:58,360
they know what they are looking for for

448
00:21:58,360 --> 00:22:00,640
exploit but they it's hard to write a

449
00:22:00,640 --> 00:22:04,179
formal equation for how the exploit

450
00:22:04,179 --> 00:22:07,659
should look like and it's also good to

451
00:22:07,659 --> 00:22:09,429
remember that improving the constraint

452
00:22:09,429 --> 00:22:12,429
generation phase in the beginning will

453
00:22:12,429 --> 00:22:15,669
help if you are looking for alternate

454
00:22:15,669 --> 00:22:18,010
exploit generation that it's the next

455
00:22:18,010 --> 00:22:23,049
topic friend maybe another year so and

456
00:22:23,049 --> 00:22:25,408
that's it

457
00:22:25,860 --> 00:22:30,840
[Applause]

