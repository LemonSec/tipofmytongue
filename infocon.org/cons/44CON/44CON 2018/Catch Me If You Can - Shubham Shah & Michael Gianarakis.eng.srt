1
00:00:00,030 --> 00:00:04,350
all right let's do it okay so we're

2
00:00:01,740 --> 00:00:05,310
gonna talk about a title of that talk is

3
00:00:04,350 --> 00:00:07,379
catch me if you can

4
00:00:05,310 --> 00:00:12,678
if thermal butter us do you guys serious

5
00:00:07,379 --> 00:00:15,990
yeah at the mics on yeah

6
00:00:12,679 --> 00:00:18,690
is that better yeah you guys see me can

7
00:00:15,990 --> 00:00:19,770
you guys see me yeah oh yeah cool all

8
00:00:18,690 --> 00:00:20,490
right so it's part of our talk is catch

9
00:00:19,770 --> 00:00:22,320
me if you can

10
00:00:20,490 --> 00:00:25,380
ephemeral vulnerabilities in bug

11
00:00:22,320 --> 00:00:28,019
brownies so my name is Michael Turner

12
00:00:25,380 --> 00:00:30,599
arcus I'm CEO of asset note formerly I

13
00:00:28,019 --> 00:00:32,850
was with spider labs in a g-pack I spoke

14
00:00:30,599 --> 00:00:34,739
in a bunch of conferences so maybe

15
00:00:32,850 --> 00:00:38,070
you'll see me from there mostly mobile

16
00:00:34,739 --> 00:00:39,360
security I'm the organizer of a couple

17
00:00:38,070 --> 00:00:42,960
of meetups and a conference in Australia

18
00:00:39,360 --> 00:00:45,780
which is much less organized than 44 con

19
00:00:42,960 --> 00:00:49,350
much more but yeah go Tuscon thanks man

20
00:00:45,780 --> 00:00:50,760
oh sure so I'm the CTO of acid note I

21
00:00:49,350 --> 00:00:54,120
used to work as a senior security

22
00:00:50,760 --> 00:00:55,949
analyst at Bishop Fox I'm a part of a

23
00:00:54,120 --> 00:00:58,949
hacker one top 50 and I'm the co-founder

24
00:00:55,949 --> 00:01:00,500
of hackers helping hackers so you wanna

25
00:00:58,949 --> 00:01:02,699
give a quick spiel for hackers helping

26
00:01:00,500 --> 00:01:05,280
absolutely it's a really good charity

27
00:01:02,699 --> 00:01:07,200
so Nathan and I co-founded a charity in

28
00:01:05,280 --> 00:01:09,000
Australia where what we do is we take

29
00:01:07,200 --> 00:01:11,100
money from a bunch of sponsors within

30
00:01:09,000 --> 00:01:12,810
the InfoSec space and we redistribute it

31
00:01:11,100 --> 00:01:14,880
to two hackers that actually need help

32
00:01:12,810 --> 00:01:16,650
in education and getting into this

33
00:01:14,880 --> 00:01:18,420
industry so students who have just

34
00:01:16,650 --> 00:01:19,799
basically you know got into a point

35
00:01:18,420 --> 00:01:21,750
where they have no idea how to break

36
00:01:19,799 --> 00:01:23,340
into the industry we take them send them

37
00:01:21,750 --> 00:01:25,020
to conferences pay for their flights and

38
00:01:23,340 --> 00:01:26,460
accommodation and train them up

39
00:01:25,020 --> 00:01:28,048
throughout a year so if you want to

40
00:01:26,460 --> 00:01:32,639
check that out definitely do it and hit

41
00:01:28,049 --> 00:01:33,659
us up if you want at any point cool all

42
00:01:32,640 --> 00:01:36,990
right so what are ephemeral

43
00:01:33,659 --> 00:01:38,880
vulnerabilities so put simply ephemeral

44
00:01:36,990 --> 00:01:40,589
vulnerabilities vulnerabilities that

45
00:01:38,880 --> 00:01:42,600
exist in an application system for a

46
00:01:40,590 --> 00:01:44,570
short period of time right usually a

47
00:01:42,600 --> 00:01:47,880
matter of hours or days so

48
00:01:44,570 --> 00:01:50,508
straightforward yeah so why do they

49
00:01:47,880 --> 00:01:52,890
exist why is this a problem

50
00:01:50,509 --> 00:01:55,560
how common are they and what is the

51
00:01:52,890 --> 00:01:57,299
impact and is this a real thing or we

52
00:01:55,560 --> 00:02:00,479
just a couple of Ozzie wankers trying to

53
00:01:57,299 --> 00:02:02,340
come up with fancy names the answer to

54
00:02:00,479 --> 00:02:03,829
that hopefully is no well you you can be

55
00:02:02,340 --> 00:02:06,869
the judge of that

56
00:02:03,829 --> 00:02:07,350
ok just to set the scene take a step

57
00:02:06,869 --> 00:02:08,970
back

58
00:02:07,350 --> 00:02:10,348
let's start with bug bounties so a few

59
00:02:08,970 --> 00:02:11,849
years ago there was a shift that

60
00:02:10,348 --> 00:02:14,399
introduced a new form of security

61
00:02:11,849 --> 00:02:16,410
assessment on a large scale bug bounties

62
00:02:14,400 --> 00:02:18,780
but Benny platforms you know like

63
00:02:16,410 --> 00:02:20,310
bugcrowd hacker one packaged up to this

64
00:02:18,780 --> 00:02:23,160
sort of the internal bug bounty model

65
00:02:20,310 --> 00:02:24,780
and prioritize it for many companies who

66
00:02:23,160 --> 00:02:26,660
had it and in a lot of cases probably

67
00:02:24,780 --> 00:02:29,700
wouldn't have run a bounty before and

68
00:02:26,660 --> 00:02:31,470
the bug bounty model and and more

69
00:02:29,700 --> 00:02:33,989
specifically the reward based economic

70
00:02:31,470 --> 00:02:35,640
model that underpins it has kind of

71
00:02:33,990 --> 00:02:38,280
shifted the behavior in the way that

72
00:02:35,640 --> 00:02:39,839
people are testing applications if you

73
00:02:38,280 --> 00:02:42,180
aren't successful you don't get paid

74
00:02:39,840 --> 00:02:43,650
that's the kind of the approach and if

75
00:02:42,180 --> 00:02:46,050
you approach bounties like a pen test

76
00:02:43,650 --> 00:02:49,350
you won't be successful yeah at the very

77
00:02:46,050 --> 00:02:50,970
least not on on any real scale and I

78
00:02:49,350 --> 00:02:52,890
think and I think jobs will agree with

79
00:02:50,970 --> 00:02:54,450
me it's absolutely fair to say that most

80
00:02:52,890 --> 00:02:56,579
of the innovative techniques and tools

81
00:02:54,450 --> 00:02:58,140
in web application space in recent years

82
00:02:56,580 --> 00:03:01,170
have been borne out of the bug bounty

83
00:02:58,140 --> 00:03:03,179
space so pennies not paying taxes yeah

84
00:03:01,170 --> 00:03:05,609
so I'm essentially bounties are not pen

85
00:03:03,180 --> 00:03:06,930
tests they differ in so many ways in a

86
00:03:05,610 --> 00:03:08,730
pen test that's normally point in time

87
00:03:06,930 --> 00:03:11,580
it's usually you know one to two weeks

88
00:03:08,730 --> 00:03:13,410
it's tightly scoped it's typically a

89
00:03:11,580 --> 00:03:14,970
static scope so you have a list of IP

90
00:03:13,410 --> 00:03:16,620
ranges or subdomains that you were

91
00:03:14,970 --> 00:03:19,170
explicitly allowed to go after and

92
00:03:16,620 --> 00:03:21,260
nothing beyond that you pentest new

93
00:03:19,170 --> 00:03:23,790
projects and then it's business as usual

94
00:03:21,260 --> 00:03:25,530
it's performed in some sort of test

95
00:03:23,790 --> 00:03:27,000
slash non production environment

96
00:03:25,530 --> 00:03:28,380
something that's imply the QA or

97
00:03:27,000 --> 00:03:30,690
something that's not actually having it

98
00:03:28,380 --> 00:03:33,660
doesn't replicate the pure production

99
00:03:30,690 --> 00:03:35,970
environment the standards and

100
00:03:33,660 --> 00:03:38,640
methodology is you know it's driven on

101
00:03:35,970 --> 00:03:40,950
it's focused on coverage and it usually

102
00:03:38,640 --> 00:03:44,540
is compliance driven a lot of pen tests

103
00:03:40,950 --> 00:03:46,649
are quite frankly done for a checkbox

104
00:03:44,540 --> 00:03:48,450
alternatively on the flip side you've

105
00:03:46,650 --> 00:03:51,300
got bug bounties where it's kind of the

106
00:03:48,450 --> 00:03:52,950
opposite its ongoing it's typically

107
00:03:51,300 --> 00:03:57,030
broader scope so there are although

108
00:03:52,950 --> 00:03:58,260
there are limits it's evolving so every

109
00:03:57,030 --> 00:04:00,180
time you're testing it things have

110
00:03:58,260 --> 00:04:02,549
changed and and it's not point in time

111
00:04:00,180 --> 00:04:04,290
your scope that you're going after has

112
00:04:02,550 --> 00:04:05,520
changed from what it was yesterday and

113
00:04:04,290 --> 00:04:08,489
then the day after and the day after day

114
00:04:05,520 --> 00:04:10,290
after it's evolving very quickly and as

115
00:04:08,490 --> 00:04:14,820
we hopefully demonstrate sometimes

116
00:04:10,290 --> 00:04:17,488
involving on an hourly basis yes and in

117
00:04:14,820 --> 00:04:19,440
bug bounties is performed in production

118
00:04:17,488 --> 00:04:21,329
which is kind of scary for a lot of

119
00:04:19,440 --> 00:04:23,430
people but I really do think that's the

120
00:04:21,329 --> 00:04:24,300
best way to do security testing when

121
00:04:23,430 --> 00:04:27,060
you're looking at something at that

122
00:04:24,300 --> 00:04:31,139
scale and to find all the act

123
00:04:27,060 --> 00:04:33,300
bugs its results-driven only pay and get

124
00:04:31,139 --> 00:04:34,889
paid on results have to be first to get

125
00:04:33,300 --> 00:04:37,770
that result and and this one's actually

126
00:04:34,889 --> 00:04:40,139
super important because in my opinion I

127
00:04:37,770 --> 00:04:42,060
think that bounties have you see a lot

128
00:04:40,139 --> 00:04:44,280
more innovation and bounties because of

129
00:04:42,060 --> 00:04:45,990
the fact that it is result driven people

130
00:04:44,280 --> 00:04:47,580
aren't going to be making tools that

131
00:04:45,990 --> 00:04:50,000
aren't going to be making them money in

132
00:04:47,580 --> 00:04:52,740
bounties it that's a waste of their time

133
00:04:50,000 --> 00:04:55,200
bounty hunters who do it full-time like

134
00:04:52,740 --> 00:04:56,430
myself for some time Nathan and so forth

135
00:04:55,200 --> 00:04:59,640
many other bounty hunters that do it

136
00:04:56,430 --> 00:05:02,220
full-time you you can't invest your time

137
00:04:59,640 --> 00:05:03,419
in creating tools and software if you're

138
00:05:02,220 --> 00:05:06,660
not going to get a return from it

139
00:05:03,419 --> 00:05:09,120
because that is your income and usually

140
00:05:06,660 --> 00:05:13,980
it's security driven it's not as much of

141
00:05:09,120 --> 00:05:15,450
a compliance focus so if you want to be

142
00:05:13,980 --> 00:05:17,040
successful in about dspace you can't

143
00:05:15,450 --> 00:05:18,060
just approach it like a pen test you

144
00:05:17,040 --> 00:05:21,600
have to approach it like a competition

145
00:05:18,060 --> 00:05:23,070
and you are competing with everyone else

146
00:05:21,600 --> 00:05:24,419
to find new bugs that are actually but

147
00:05:23,070 --> 00:05:26,430
actually have a security impact before

148
00:05:24,419 --> 00:05:28,590
anyone else does and and in in this

149
00:05:26,430 --> 00:05:30,389
sense when it comes to competition I

150
00:05:28,590 --> 00:05:31,890
think it's super healthy because that is

151
00:05:30,389 --> 00:05:35,220
what actually breeds the innovation in

152
00:05:31,890 --> 00:05:37,919
our in our bug bounty industry so if

153
00:05:35,220 --> 00:05:41,130
you're not first you don't get paid no

154
00:05:37,919 --> 00:05:43,200
actual security impact don't get paid X

155
00:05:41,130 --> 00:05:45,900
technology stopped you sucks to be you

156
00:05:43,200 --> 00:05:47,070
you don't get paid for us if we're

157
00:05:45,900 --> 00:05:48,870
spending time doing computer stuff

158
00:05:47,070 --> 00:05:53,219
instead of drinking beer we want to be

159
00:05:48,870 --> 00:05:57,090
paid for it essentially so getting paid

160
00:05:53,220 --> 00:05:58,410
yeah so over to me yeah sure alright so

161
00:05:57,090 --> 00:06:00,780
yeah we like getting paid to find bugs

162
00:05:58,410 --> 00:06:02,700
but to get paid on any kind of decent

163
00:06:00,780 --> 00:06:04,890
scale that replaces sitting on a data

164
00:06:02,700 --> 00:06:08,700
center floor for eight hours a day you

165
00:06:04,890 --> 00:06:11,280
need to take a different approach so you

166
00:06:08,700 --> 00:06:13,349
need to cover all of the possible scope

167
00:06:11,280 --> 00:06:15,659
if you miss something you're missing an

168
00:06:13,350 --> 00:06:17,340
opportunity for a payer you need to be

169
00:06:15,660 --> 00:06:19,410
fast there's no prizes for second place

170
00:06:17,340 --> 00:06:22,109
in the bounty world if you're if you're

171
00:06:19,410 --> 00:06:24,419
second that's great but it's a jus sucks

172
00:06:22,110 --> 00:06:26,250
to be you it needs to be continuous if

173
00:06:24,419 --> 00:06:28,260
you're not looking at things constantly

174
00:06:26,250 --> 00:06:30,180
you will miss opportunities to be paid

175
00:06:28,260 --> 00:06:32,969
you know everything the modern

176
00:06:30,180 --> 00:06:34,650
application environments and and modern

177
00:06:32,970 --> 00:06:36,510
tack surfaces are constantly evolving

178
00:06:34,650 --> 00:06:38,010
and if you're not looking at this stuff

179
00:06:36,510 --> 00:06:40,070
continuously you're going to miss those

180
00:06:38,010 --> 00:06:40,070
opportunities

181
00:06:40,380 --> 00:06:44,280
you need to adapt to how organizations

182
00:06:43,050 --> 00:06:45,750
are actually developing their

183
00:06:44,280 --> 00:06:47,820
applications and deploying the

184
00:06:45,750 --> 00:06:48,930
infrastructure in the real world so all

185
00:06:47,820 --> 00:06:50,760
of the protections that are in place

186
00:06:48,930 --> 00:06:52,920
whatever technology is that they're

187
00:06:50,760 --> 00:06:54,599
using you have to adapt to that as

188
00:06:52,920 --> 00:06:58,860
opposed to just doing what you've always

189
00:06:54,600 --> 00:07:03,150
done you need to keep up with it so yeah

190
00:06:58,860 --> 00:07:04,590
automating it with an approach with that

191
00:07:03,150 --> 00:07:07,530
sort of approach but down those sort of

192
00:07:04,590 --> 00:07:09,539
principles the next challenge was to

193
00:07:07,530 --> 00:07:11,460
scale so we built a tool that will

194
00:07:09,540 --> 00:07:13,740
automatically find new assets in a given

195
00:07:11,460 --> 00:07:15,750
scope check for bugs on a continuous

196
00:07:13,740 --> 00:07:17,610
basis this is a tool that would

197
00:07:15,750 --> 00:07:18,960
eventually form the genesis of astronaut

198
00:07:17,610 --> 00:07:21,570
but that's another story come see us

199
00:07:18,960 --> 00:07:23,310
later if you want to find out and by

200
00:07:21,570 --> 00:07:25,140
continuous we mean performing all the

201
00:07:23,310 --> 00:07:28,860
recon and security checks at least every

202
00:07:25,140 --> 00:07:30,930
hour this works extremely well bugs were

203
00:07:28,860 --> 00:07:33,630
found money was made alcohol was

204
00:07:30,930 --> 00:07:35,280
consumed it's great but one of the

205
00:07:33,630 --> 00:07:38,219
interesting things that came out of

206
00:07:35,280 --> 00:07:39,960
building this tool is that shifting to a

207
00:07:38,220 --> 00:07:42,180
more of a continuous security process

208
00:07:39,960 --> 00:07:43,609
opposed to a point in time presented a

209
00:07:42,180 --> 00:07:49,560
whole bunch of new opportunities that

210
00:07:43,610 --> 00:07:50,790
started to emerge from that so shifting

211
00:07:49,560 --> 00:07:52,830
the approach to a security assessment

212
00:07:50,790 --> 00:07:54,240
from a point in time into a more

213
00:07:52,830 --> 00:07:55,830
continuous approach ends up morphing

214
00:07:54,240 --> 00:07:58,200
into into much more of a monitor and

215
00:07:55,830 --> 00:07:59,820
respond approach and I can totally

216
00:07:58,200 --> 00:08:00,840
testify against this I used to be a

217
00:07:59,820 --> 00:08:02,610
tester he used to go through the

218
00:08:00,840 --> 00:08:04,710
application find every app application

219
00:08:02,610 --> 00:08:07,440
as a part of the scope go through each

220
00:08:04,710 --> 00:08:09,150
one and take a look but but today it's

221
00:08:07,440 --> 00:08:11,490
the other way around I want to now be

222
00:08:09,150 --> 00:08:13,320
notified of what the things I should be

223
00:08:11,490 --> 00:08:15,120
looking at what are the indicators what

224
00:08:13,320 --> 00:08:17,730
are the things that are on this huge

225
00:08:15,120 --> 00:08:19,650
scope that do deserve my time I want to

226
00:08:17,730 --> 00:08:23,100
reduce the amount of time taken to find

227
00:08:19,650 --> 00:08:24,599
a really good bugs so this this numb

228
00:08:23,100 --> 00:08:27,090
this hand ended up having a number of

229
00:08:24,600 --> 00:08:28,080
benefits it adapts to the organisation

230
00:08:27,090 --> 00:08:30,179
and how they actually develop

231
00:08:28,080 --> 00:08:31,830
applications so if I get notifications

232
00:08:30,180 --> 00:08:33,719
about a new sub domain that this

233
00:08:31,830 --> 00:08:36,299
organization is released you know in the

234
00:08:33,719 --> 00:08:38,490
last hour or so I might be able to tell

235
00:08:36,299 --> 00:08:39,929
depending on the previous subdomains and

236
00:08:38,490 --> 00:08:43,500
so forth what they're working on or

237
00:08:39,929 --> 00:08:45,120
what's new or what has changed you can

238
00:08:43,500 --> 00:08:46,470
find bugs quickly and you can find all

239
00:08:45,120 --> 00:08:49,110
instances of that bug across an

240
00:08:46,470 --> 00:08:50,910
organization so if you have a really

241
00:08:49,110 --> 00:08:52,770
good idea of where all of your assets

242
00:08:50,910 --> 00:08:53,889
are located and you have some sort of

243
00:08:52,770 --> 00:08:55,209
way of testing

244
00:08:53,889 --> 00:08:57,850
a particular thing across all these

245
00:08:55,209 --> 00:08:59,589
assets then that's actually you know not

246
00:08:57,850 --> 00:09:01,959
only can that be used to test for

247
00:08:59,589 --> 00:09:04,179
remediation like regressions but it can

248
00:09:01,959 --> 00:09:08,248
also be used to test across a huge scope

249
00:09:04,179 --> 00:09:10,899
very quickly to find quick results and

250
00:09:08,249 --> 00:09:13,119
ultimately it leads to the ability to

251
00:09:10,899 --> 00:09:16,449
find ephemeral vulnerabilities there's

252
00:09:13,119 --> 00:09:19,869
no money left on the table so this photo

253
00:09:16,449 --> 00:09:21,309
I put in a slide this is this is how

254
00:09:19,869 --> 00:09:23,290
you'll often find sharks this is in the

255
00:09:21,309 --> 00:09:26,079
taxi on the way from the airport here

256
00:09:23,290 --> 00:09:28,089
and he really embodies this monitor and

257
00:09:26,079 --> 00:09:31,329
respond approach any time there's a ping

258
00:09:28,089 --> 00:09:32,439
from from our tools it's like straight

259
00:09:31,329 --> 00:09:38,589
on the laptop doesn't matter where you

260
00:09:32,439 --> 00:09:41,290
are so yeah so just to yeah I can do

261
00:09:38,589 --> 00:09:42,579
this much cool so just to to kind of

262
00:09:41,290 --> 00:09:43,779
visualize what we're talking about with

263
00:09:42,579 --> 00:09:45,790
the thermal vulnerabilities and this

264
00:09:43,779 --> 00:09:47,679
whole idea of continuous assessment to

265
00:09:45,790 --> 00:09:48,849
take this kind of timeline right there's

266
00:09:47,679 --> 00:09:50,319
an organization you know they've got

267
00:09:48,850 --> 00:09:52,359
they do a bunch of vulnerability

268
00:09:50,319 --> 00:09:55,329
assessments you know different points in

269
00:09:52,359 --> 00:09:57,850
time you do a bunch of pen tests

270
00:09:55,329 --> 00:09:59,498
different points in time you know and

271
00:09:57,850 --> 00:10:01,119
along that scale you know things are

272
00:09:59,499 --> 00:10:03,639
changing things are being developed and

273
00:10:01,119 --> 00:10:05,339
then sort of in between is where you had

274
00:10:03,639 --> 00:10:07,720
these sorts of ephemeral vulnerabilities

275
00:10:05,339 --> 00:10:09,699
that you get because you're looking at

276
00:10:07,720 --> 00:10:12,939
it all the way along the timeline as

277
00:10:09,699 --> 00:10:15,329
opposed to just the points in time so

278
00:10:12,939 --> 00:10:17,709
recourses of ephemeral vulnerabilities

279
00:10:15,329 --> 00:10:19,779
so ephemeral vulnerabilities as a

280
00:10:17,709 --> 00:10:21,609
concept isn't necessarily a unique or

281
00:10:19,779 --> 00:10:23,769
new idea right and any bug can be

282
00:10:21,610 --> 00:10:26,379
ephemeral that said if Fermin

283
00:10:23,769 --> 00:10:29,649
vulnerabilities are in our experience at

284
00:10:26,379 --> 00:10:32,290
least becoming more prevalent and you

285
00:10:29,649 --> 00:10:33,699
can't really pinpoint a single root

286
00:10:32,290 --> 00:10:35,230
cause based on looking for these bugs

287
00:10:33,699 --> 00:10:36,699
but based on looking for these bugs

288
00:10:35,230 --> 00:10:38,350
across a number of programs and

289
00:10:36,699 --> 00:10:39,699
organizations there are actually a

290
00:10:38,350 --> 00:10:41,679
number of elements that seem to be

291
00:10:39,699 --> 00:10:44,469
driving this increased prevalence of

292
00:10:41,679 --> 00:10:48,339
these sorts of issues so these elements

293
00:10:44,470 --> 00:10:50,169
include cloud first architecture rapid

294
00:10:48,339 --> 00:10:52,569
development deploy cycles like you know

295
00:10:50,169 --> 00:10:55,569
devops is is you know becoming more of

296
00:10:52,569 --> 00:10:57,569
the norm board attack surfaces so you

297
00:10:55,569 --> 00:11:01,209
know having lots of externally facing

298
00:10:57,569 --> 00:11:03,639
assets and large organizations that have

299
00:11:01,209 --> 00:11:05,679
somewhat complicated internal structures

300
00:11:03,639 --> 00:11:07,240
so I have multiple subsidiaries often in

301
00:11:05,679 --> 00:11:08,829
different countries different

302
00:11:07,240 --> 00:11:10,959
teams with that that have either

303
00:11:08,830 --> 00:11:13,180
development capability or budget to get

304
00:11:10,959 --> 00:11:15,609
things developed you know can can be

305
00:11:13,180 --> 00:11:18,099
good indicators of you know where you're

306
00:11:15,610 --> 00:11:19,690
gonna find the firm or fun abilities but

307
00:11:18,100 --> 00:11:21,029
really ephemeral bugs are really just

308
00:11:19,690 --> 00:11:25,089
mostly down to the pace of change

309
00:11:21,029 --> 00:11:26,830
complexity and scale securing systems

310
00:11:25,089 --> 00:11:28,810
that are constantly changing across a

311
00:11:26,830 --> 00:11:30,910
large and complex attack service it's

312
00:11:28,810 --> 00:11:33,160
hard right I mean we're gonna show you

313
00:11:30,910 --> 00:11:34,600
some bugs today and you look at that and

314
00:11:33,160 --> 00:11:36,430
think wow that's that's crazy but you

315
00:11:34,600 --> 00:11:38,200
know these are very large organizations

316
00:11:36,430 --> 00:11:40,540
it's really hard to do this at scale and

317
00:11:38,200 --> 00:11:43,360
and even just keeping on top of what

318
00:11:40,540 --> 00:11:44,770
assets you have on the Internet at any

319
00:11:43,360 --> 00:11:46,570
kind of scale is a difficult challenge

320
00:11:44,770 --> 00:11:49,000
even for very well-funded

321
00:11:46,570 --> 00:11:52,480
teams let alone monitoring for security

322
00:11:49,000 --> 00:11:54,850
issues at that scale and pace mistakes

323
00:11:52,480 --> 00:11:59,080
happen people screw up you know

324
00:11:54,850 --> 00:12:00,250
happens basically so the impact right

325
00:11:59,080 --> 00:12:02,589
that's that's what matters the most

326
00:12:00,250 --> 00:12:03,940
about all of this and the impact of

327
00:12:02,589 --> 00:12:05,440
ephemeral vulnerabilities is usually

328
00:12:03,940 --> 00:12:08,230
quite quite huge

329
00:12:05,440 --> 00:12:09,610
the defining characteristic in is that

330
00:12:08,230 --> 00:12:11,560
it happens in a short period of time

331
00:12:09,610 --> 00:12:13,120
that their life but ephemeral

332
00:12:11,560 --> 00:12:15,130
vulnerabilities is a short pier time of

333
00:12:13,120 --> 00:12:16,810
their life that means that the impact of

334
00:12:15,130 --> 00:12:18,100
these bugs vary because of the type of

335
00:12:16,810 --> 00:12:21,609
honorable any type of vulnerability can

336
00:12:18,100 --> 00:12:23,020
be ephemeral now that being said the

337
00:12:21,610 --> 00:12:24,339
impact of these bugs tend to be pretty

338
00:12:23,020 --> 00:12:26,260
high because they're short-lived in

339
00:12:24,339 --> 00:12:27,250
nature and generally reflective of an

340
00:12:26,260 --> 00:12:28,329
issue that shouldn't have been there in

341
00:12:27,250 --> 00:12:31,029
the first place when they fix quickly

342
00:12:28,329 --> 00:12:33,520
now like I hope that I can really

343
00:12:31,029 --> 00:12:35,230
reiterate how important this is once I

344
00:12:33,520 --> 00:12:38,110
show the bugs that we found because

345
00:12:35,230 --> 00:12:39,700
these bugs definitely are critical and

346
00:12:38,110 --> 00:12:42,690
they're definitely bugs that were only

347
00:12:39,700 --> 00:12:45,339
there for short periods of time

348
00:12:42,690 --> 00:12:49,029
companies don't tend to fix things that

349
00:12:45,339 --> 00:12:50,410
have no real impact that quickly so to

350
00:12:49,029 --> 00:12:52,209
help illustrate this we have some

351
00:12:50,410 --> 00:12:53,770
examples and we've submitted and

352
00:12:52,209 --> 00:12:55,839
submitted them to multiple bounty

353
00:12:53,770 --> 00:12:57,069
programs they're all being paid quite a

354
00:12:55,839 --> 00:12:58,240
bit of money that that's been resolved

355
00:12:57,070 --> 00:13:00,640
for quite some time so we can talk about

356
00:12:58,240 --> 00:13:02,410
them today we've got three examples to

357
00:13:00,640 --> 00:13:04,449
show you two of them we can disclose

358
00:13:02,410 --> 00:13:07,209
completely the company as well one of

359
00:13:04,450 --> 00:13:09,130
them is slightly redacted these these

360
00:13:07,209 --> 00:13:11,260
funds get paid out very well so

361
00:13:09,130 --> 00:13:12,610
ephemeral issues are definitely things

362
00:13:11,260 --> 00:13:15,760
that I think bug bounty hunters should

363
00:13:12,610 --> 00:13:17,110
be looking for and before we go through

364
00:13:15,760 --> 00:13:18,279
them I think it's worth pointing out

365
00:13:17,110 --> 00:13:20,260
that all these companies that we've

366
00:13:18,279 --> 00:13:21,070
worked with we're an absolute pleasure

367
00:13:20,260 --> 00:13:22,569
to work with

368
00:13:21,070 --> 00:13:24,880
we ended up resolving these issues quite

369
00:13:22,570 --> 00:13:28,900
quite swiftly and we didn't have any

370
00:13:24,880 --> 00:13:30,760
complications throughout so the first

371
00:13:28,900 --> 00:13:36,490
bug the first bug I want to talk about

372
00:13:30,760 --> 00:13:37,840
is evaluating AB script on uber so for

373
00:13:36,490 --> 00:13:40,350
quite some time we knew about a

374
00:13:37,840 --> 00:13:43,420
subdomain called exact target web - -

375
00:13:40,350 --> 00:13:46,480
web.com and it always returned something

376
00:13:43,420 --> 00:13:48,339
like this and I've seen this page a

377
00:13:46,480 --> 00:13:50,890
thousand times and I've always been like

378
00:13:48,340 --> 00:13:52,810
it's a Java Script expressjs application

379
00:13:50,890 --> 00:13:54,640
but nothing seems to be on it I've done

380
00:13:52,810 --> 00:13:57,729
heaps of content discovery work and I

381
00:13:54,640 --> 00:14:00,490
still can't find anything so do I forget

382
00:13:57,730 --> 00:14:02,830
about this asset well it was forgotten

383
00:14:00,490 --> 00:14:05,050
and it was with them until we detected a

384
00:14:02,830 --> 00:14:06,400
change and once we detected a change

385
00:14:05,050 --> 00:14:09,189
it actually looks something like this

386
00:14:06,400 --> 00:14:11,890
one day and that's a pretty dodgy

387
00:14:09,190 --> 00:14:14,110
looking application already and if you

388
00:14:11,890 --> 00:14:16,449
take a look at it it's got this iPhone

389
00:14:14,110 --> 00:14:18,550
it's got this little message and all the

390
00:14:16,450 --> 00:14:20,260
all the details that you know this this

391
00:14:18,550 --> 00:14:21,939
whole thing is like alright I want to

392
00:14:20,260 --> 00:14:23,860
send a message to someone and

393
00:14:21,940 --> 00:14:25,120
personalize it so that's that's what I

394
00:14:23,860 --> 00:14:26,530
picked up from looking at this page

395
00:14:25,120 --> 00:14:28,960
initially this was served on the index

396
00:14:26,530 --> 00:14:32,470
page instead of that that 404 not found

397
00:14:28,960 --> 00:14:34,690
that I showed you earlier so now that we

398
00:14:32,470 --> 00:14:35,770
we found this new functionality we have

399
00:14:34,690 --> 00:14:37,540
to figure out where to go next

400
00:14:35,770 --> 00:14:39,970
we tried interacting with the UI tried

401
00:14:37,540 --> 00:14:42,370
making API calls while listening for

402
00:14:39,970 --> 00:14:44,410
requests but it didn't work all the

403
00:14:42,370 --> 00:14:47,200
requests failed a return an empty JSON

404
00:14:44,410 --> 00:14:49,870
response so we then reverse the

405
00:14:47,200 --> 00:14:51,940
JavaScript we recreated a legitimate API

406
00:14:49,870 --> 00:14:54,100
call and finally swapped out all the

407
00:14:51,940 --> 00:14:56,140
goober uu IDs which is essentially like

408
00:14:54,100 --> 00:14:59,290
a unique ID that identifies you on the

409
00:14:56,140 --> 00:15:00,760
uber platform with our own uu IDs

410
00:14:59,290 --> 00:15:03,329
instead of the ones that were provided

411
00:15:00,760 --> 00:15:06,160
on the front page that I showed earlier

412
00:15:03,330 --> 00:15:07,720
and that worked and that that actually

413
00:15:06,160 --> 00:15:09,930
led to something super awesome so I

414
00:15:07,720 --> 00:15:12,580
won't explain what it led to

415
00:15:09,930 --> 00:15:15,219
so the API was working and there was no

416
00:15:12,580 --> 00:15:16,660
output received when running the the

417
00:15:15,220 --> 00:15:20,430
example am script shown on the front

418
00:15:16,660 --> 00:15:23,280
page of the app that example am script

419
00:15:20,430 --> 00:15:26,050
well actually so let's learn how script

420
00:15:23,280 --> 00:15:30,250
and you might be asking yourself like

421
00:15:26,050 --> 00:15:32,530
what what the hell is a script what wTF

422
00:15:30,250 --> 00:15:34,420
is a script so am script is actually a

423
00:15:32,530 --> 00:15:36,100
part of Salesforce's marketing cloud

424
00:15:34,420 --> 00:15:37,689
and they provide AM script as a

425
00:15:36,100 --> 00:15:40,360
scripting language that they can embed

426
00:15:37,689 --> 00:15:44,079
marketing content within emails SMS is

427
00:15:40,360 --> 00:15:45,850
anything that needs to be dynamic so

428
00:15:44,079 --> 00:15:48,459
what what can an script actually do

429
00:15:45,850 --> 00:15:50,769
turns out it can do quite a lot so if

430
00:15:48,459 --> 00:15:52,149
you take a look here there's quite a lot

431
00:15:50,769 --> 00:15:53,049
of things you'd expect in basically any

432
00:15:52,149 --> 00:15:55,299
scripting language

433
00:15:53,049 --> 00:15:57,279
they've got HTTP functions encryption

434
00:15:55,299 --> 00:16:02,739
functions data related functions all

435
00:15:57,279 --> 00:16:06,100
sorts of things so let's try and use

436
00:16:02,739 --> 00:16:07,569
Apps Script to to create I use the HTTP

437
00:16:06,100 --> 00:16:09,100
functions within am script to see if we

438
00:16:07,569 --> 00:16:10,449
get a call out just to confirm whether

439
00:16:09,100 --> 00:16:13,209
or not this is actually a vulnerability

440
00:16:10,449 --> 00:16:15,969
we need to care about so this was the

441
00:16:13,209 --> 00:16:20,049
the syntax in AB script to make a HTTP

442
00:16:15,970 --> 00:16:22,420
request to an arbitrary URL and it

443
00:16:20,049 --> 00:16:25,329
worked we've got a response saying that

444
00:16:22,420 --> 00:16:26,979
you know this you know this AB script

445
00:16:25,329 --> 00:16:29,109
has been evaluated and we've got the

446
00:16:26,980 --> 00:16:31,360
result of that which is basically a full

447
00:16:29,110 --> 00:16:33,970
full response srf here you've got that

448
00:16:31,360 --> 00:16:36,730
it's actually coming from ExactTarget

449
00:16:33,970 --> 00:16:38,949
Inc now that was really interesting when

450
00:16:36,730 --> 00:16:40,660
I saw this because that meant that the

451
00:16:38,949 --> 00:16:42,878
script that I was sending through and

452
00:16:40,660 --> 00:16:45,249
where it was getting evaluated it was

453
00:16:42,879 --> 00:16:47,679
actually just getting evaluated on exact

454
00:16:45,249 --> 00:16:49,179
target service not an uber service so

455
00:16:47,679 --> 00:16:50,559
we've proved that we can execute our

456
00:16:49,179 --> 00:16:54,910
script through the bar but it's being

457
00:16:50,559 --> 00:16:56,319
executed on exact targets service and

458
00:16:54,910 --> 00:16:57,339
and that's where it gets interesting is

459
00:16:56,319 --> 00:16:58,929
like where do we how do we go further

460
00:16:57,339 --> 00:17:00,850
and we found out that Salesforce

461
00:16:58,929 --> 00:17:02,919
marketing cloud allows you to pull data

462
00:17:00,850 --> 00:17:06,130
from a number of sources using something

463
00:17:02,919 --> 00:17:08,019
called data extensions so daughter

464
00:17:06,130 --> 00:17:09,639
extensions are like database tables that

465
00:17:08,019 --> 00:17:14,949
can be accessed through AM scripts data

466
00:17:09,638 --> 00:17:17,799
extension extension functions so this is

467
00:17:14,949 --> 00:17:19,720
the app script that we saw returned by

468
00:17:17,799 --> 00:17:21,250
the application itself it looks

469
00:17:19,720 --> 00:17:23,679
something like this

470
00:17:21,250 --> 00:17:25,750
it sets a first name by doing a lookup

471
00:17:23,679 --> 00:17:27,370
in a daughter extension and then prints

472
00:17:25,750 --> 00:17:30,639
that first name out when personalizing

473
00:17:27,369 --> 00:17:32,260
the message so as you can see it does

474
00:17:30,639 --> 00:17:34,029
like a lookup in that little data

475
00:17:32,260 --> 00:17:37,299
extension called driver underscore

476
00:17:34,029 --> 00:17:39,070
partners so even though this answered

477
00:17:37,299 --> 00:17:40,870
query did not work it had enough

478
00:17:39,070 --> 00:17:42,789
information for us that we could use it

479
00:17:40,870 --> 00:17:44,649
to create our own am script that could

480
00:17:42,789 --> 00:17:47,940
pull down data from the driver partners

481
00:17:44,649 --> 00:17:47,939
data extension

482
00:17:48,350 --> 00:17:52,530
so this was the final proof of concept

483
00:17:50,670 --> 00:17:53,910
this proof of concept trust me was very

484
00:17:52,530 --> 00:17:55,710
hard to write AB script I didn't even

485
00:17:53,910 --> 00:17:58,260
know it existed until I found this bug

486
00:17:55,710 --> 00:18:00,810
but this proof of concept is actually

487
00:17:58,260 --> 00:18:02,879
quite simple it looks at the data

488
00:18:00,810 --> 00:18:05,040
extension called driver underscore

489
00:18:02,880 --> 00:18:06,630
partners and it does a search it does a

490
00:18:05,040 --> 00:18:09,629
search for every one which has the first

491
00:18:06,630 --> 00:18:11,070
name shoves based off that it assigns

492
00:18:09,630 --> 00:18:13,830
some variables and then it finally

493
00:18:11,070 --> 00:18:16,649
prints them out and to our surprise we

494
00:18:13,830 --> 00:18:19,379
gave this a shot and it actually you

495
00:18:16,650 --> 00:18:21,780
know it worked we got a list of users

496
00:18:19,380 --> 00:18:23,850
that were registered on uber and a lot

497
00:18:21,780 --> 00:18:25,800
of their details as long as their first

498
00:18:23,850 --> 00:18:28,199
thing was jobs it printed it out so

499
00:18:25,800 --> 00:18:30,870
essentially this one bug that you know

500
00:18:28,200 --> 00:18:33,030
one day it was just a four or four with

501
00:18:30,870 --> 00:18:34,590
no content whatsoever and then the next

502
00:18:33,030 --> 00:18:37,230
day it turned into something this

503
00:18:34,590 --> 00:18:39,060
critical you know that's because we were

504
00:18:37,230 --> 00:18:40,920
testing the day before and then the day

505
00:18:39,060 --> 00:18:42,690
after like we're continuously testing

506
00:18:40,920 --> 00:18:44,550
we're finding these bugs in the gaps

507
00:18:42,690 --> 00:18:46,380
where there's development cycles but

508
00:18:44,550 --> 00:18:48,149
there's no security testing done there's

509
00:18:46,380 --> 00:18:49,740
a lot of development happening because

510
00:18:48,150 --> 00:18:51,570
as thousands of engineers pushing out

511
00:18:49,740 --> 00:18:53,460
code to the cloud but there's still no

512
00:18:51,570 --> 00:18:55,439
oversight on what's being pushed out at

513
00:18:53,460 --> 00:18:58,860
all times or or even just nothing to

514
00:18:55,440 --> 00:19:01,080
catch the gotchas like simple network

515
00:18:58,860 --> 00:19:03,300
access control mistakes that often leads

516
00:19:01,080 --> 00:19:04,919
to very critical vulnerabilities and

517
00:19:03,300 --> 00:19:06,750
there's in this being a burrow right

518
00:19:04,920 --> 00:19:08,880
they would be doing some kind of

519
00:19:06,750 --> 00:19:10,920
security in development probably but at

520
00:19:08,880 --> 00:19:12,450
the end of it like we spoke about before

521
00:19:10,920 --> 00:19:15,090
with pen tests they'll probably be doing

522
00:19:12,450 --> 00:19:16,650
a pen test before they deploy and then

523
00:19:15,090 --> 00:19:18,750
you know doing sort of regular pen tests

524
00:19:16,650 --> 00:19:20,610
but this was being actively developed

525
00:19:18,750 --> 00:19:22,410
and this is why we saw it like it was

526
00:19:20,610 --> 00:19:23,790
just as you saw it was nothing there and

527
00:19:22,410 --> 00:19:25,050
then we were just monitoring it and it

528
00:19:23,790 --> 00:19:26,490
changed so they it's sort of

529
00:19:25,050 --> 00:19:28,790
demonstrating you about the value of

530
00:19:26,490 --> 00:19:31,770
like looking and things continuously

531
00:19:28,790 --> 00:19:34,260
okay cool so this is the one that was

532
00:19:31,770 --> 00:19:36,480
rejected hopefully I do not ask you up

533
00:19:34,260 --> 00:19:41,940
here but we'll see so breaking into

534
00:19:36,480 --> 00:19:44,820
large US ecommerce companies ci so if we

535
00:19:41,940 --> 00:19:46,470
set up large US ecommerce company into

536
00:19:44,820 --> 00:19:49,649
our automated monitoring systems and

537
00:19:46,470 --> 00:19:53,250
overnight it found the host HTTP Jenkins

538
00:19:49,650 --> 00:19:55,680
TFS webhook dot e commerce company comm

539
00:19:53,250 --> 00:19:57,600
and it was found to be running publicly

540
00:19:55,680 --> 00:19:59,430
facing Jenkins's so it was overnight we

541
00:19:57,600 --> 00:20:00,810
got out having breakfast showing the

542
00:19:59,430 --> 00:20:01,410
morning looking at sort of Jenkins

543
00:20:00,810 --> 00:20:03,690
machine

544
00:20:01,410 --> 00:20:06,030
had a cursory kind of look but it

545
00:20:03,690 --> 00:20:08,640
requires authentication and no really

546
00:20:06,030 --> 00:20:09,870
serious bugs were found at the time but

547
00:20:08,640 --> 00:20:12,690
you know we're going on going about our

548
00:20:09,870 --> 00:20:15,330
business in the afternoon drinking you

549
00:20:12,690 --> 00:20:18,360
know as we do and casually checking it

550
00:20:15,330 --> 00:20:21,720
out and notice that they replace Jenkins

551
00:20:18,360 --> 00:20:24,120
with the concourse C I a plication but

552
00:20:21,720 --> 00:20:27,930
had not removed the DNS records for the

553
00:20:24,120 --> 00:20:29,580
Jenkins - TFS webhook at blood comp so

554
00:20:27,930 --> 00:20:32,010
most accounts registered on their

555
00:20:29,580 --> 00:20:34,530
concourse CI were accessible without any

556
00:20:32,010 --> 00:20:36,060
authentication and this was a very

557
00:20:34,530 --> 00:20:38,220
recent change that was detected for the

558
00:20:36,060 --> 00:20:39,870
asset within a couple of hours so so

559
00:20:38,220 --> 00:20:41,550
again like this is the time that kind of

560
00:20:39,870 --> 00:20:43,110
time scales were looking at and when you

561
00:20:41,550 --> 00:20:45,419
continuously monitoring stuff and

562
00:20:43,110 --> 00:20:47,699
continue looking at things you know you

563
00:20:45,420 --> 00:20:49,830
start to be able to work at these time

564
00:20:47,700 --> 00:20:53,120
scales and something to mention here is

565
00:20:49,830 --> 00:20:56,100
that like the fact that they were

566
00:20:53,120 --> 00:20:58,530
changing from Jenkins to concourse and

567
00:20:56,100 --> 00:21:00,689
the fact that we found that there was no

568
00:20:58,530 --> 00:21:02,730
authentication required I would dare say

569
00:21:00,690 --> 00:21:04,620
that if I check that same concourse see

570
00:21:02,730 --> 00:21:06,390
I am like a week's time they might have

571
00:21:04,620 --> 00:21:08,129
actually set up authentication properly

572
00:21:06,390 --> 00:21:10,650
I think what had happened is that we

573
00:21:08,130 --> 00:21:12,840
found them in the act of changing C is

574
00:21:10,650 --> 00:21:14,340
completely and they were working on that

575
00:21:12,840 --> 00:21:19,350
but we had gotten to them before they

576
00:21:14,340 --> 00:21:21,209
even implemented authentication cool so

577
00:21:19,350 --> 00:21:23,550
once we logged in where I was view the

578
00:21:21,210 --> 00:21:26,280
CI pipeline's here's some of the

579
00:21:23,550 --> 00:21:28,290
examples here hopefully if anybody

580
00:21:26,280 --> 00:21:32,850
recognizes anything don't say anything

581
00:21:28,290 --> 00:21:35,790
please see a bunch of CI pipelines and

582
00:21:32,850 --> 00:21:38,730
so in order to react with the server we

583
00:21:35,790 --> 00:21:40,830
downloaded the fly CLI tool which you

584
00:21:38,730 --> 00:21:45,360
can get from that URL to start

585
00:21:40,830 --> 00:21:47,429
interacting with with the CI and this

586
00:21:45,360 --> 00:21:49,350
allowed us most importantly to read the

587
00:21:47,430 --> 00:21:51,720
config of existing builds and get access

588
00:21:49,350 --> 00:21:53,389
to the docker registry so we logged in

589
00:21:51,720 --> 00:21:56,310
using flying that's the command there

590
00:21:53,390 --> 00:21:58,860
and yeah so pretty straightforward and

591
00:21:56,310 --> 00:22:00,210
then the most critical vulnerability was

592
00:21:58,860 --> 00:22:03,330
being able to read the config of

593
00:22:00,210 --> 00:22:05,420
existing builds and that contained the

594
00:22:03,330 --> 00:22:10,230
credentials to the docker registry which

595
00:22:05,420 --> 00:22:13,230
hopefully all redacted they're just

596
00:22:10,230 --> 00:22:14,630
checking bit nervous pretty emphatic not

597
00:22:13,230 --> 00:22:16,370
to mention their name

598
00:22:14,630 --> 00:22:18,530
so then we can log into the doctor

599
00:22:16,370 --> 00:22:21,169
registry using those credentials that we

600
00:22:18,530 --> 00:22:24,139
just found and get all these doctor

601
00:22:21,170 --> 00:22:27,860
images pretty straight

602
00:22:24,140 --> 00:22:31,160
yep and then using docker we decided to

603
00:22:27,860 --> 00:22:33,110
pull down the payments resource and then

604
00:22:31,160 --> 00:22:35,690
run the following commands started

605
00:22:33,110 --> 00:22:39,590
exploring the container a little bit and

606
00:22:35,690 --> 00:22:42,380
we found the mango mango file and in the

607
00:22:39,590 --> 00:22:44,600
main dock go file it contained these

608
00:22:42,380 --> 00:22:47,660
your cloud secret keys that were

609
00:22:44,600 --> 00:22:53,000
hard-coded into the source which is here

610
00:22:47,660 --> 00:22:54,440
hopefully redacted yes good we did

611
00:22:53,000 --> 00:22:57,970
double-check but you know we've been

612
00:22:54,440 --> 00:23:00,410
drinking for a bit so um so we were able

613
00:22:57,970 --> 00:23:01,970
we're Australian come on like give us a

614
00:23:00,410 --> 00:23:03,920
break how we were able to confirm that

615
00:23:01,970 --> 00:23:06,740
the keys works using the following

616
00:23:03,920 --> 00:23:09,950
command so log into Azure the keys were

617
00:23:06,740 --> 00:23:12,260
actually valid keys and returned the

618
00:23:09,950 --> 00:23:14,660
list of assets and we'd proven the keys

619
00:23:12,260 --> 00:23:16,550
work and which is a critical

620
00:23:14,660 --> 00:23:19,160
vulnerability obviously getting keys to

621
00:23:16,550 --> 00:23:20,690
their is your environment and at this

622
00:23:19,160 --> 00:23:22,910
point no further exploitation was

623
00:23:20,690 --> 00:23:24,950
required and will pay fourteen thousand

624
00:23:22,910 --> 00:23:28,910
dollars for the bugs so pretty great

625
00:23:24,950 --> 00:23:30,770
good bug and the final one I think this

626
00:23:28,910 --> 00:23:32,750
one's actually quite quite quite a cool

627
00:23:30,770 --> 00:23:35,330
one actually it's also the reason why I

628
00:23:32,750 --> 00:23:37,370
quit my job so it one of them one of the

629
00:23:35,330 --> 00:23:39,649
reasons why why I quit my job in January

630
00:23:37,370 --> 00:23:41,719
last year I was considering quitting my

631
00:23:39,650 --> 00:23:44,570
job and going full-time to run a startup

632
00:23:41,720 --> 00:23:46,640
and this was the bug that convinced me

633
00:23:44,570 --> 00:23:49,189
that said look alright ephemeral issues

634
00:23:46,640 --> 00:23:51,500
are valid continuous security is a valid

635
00:23:49,190 --> 00:23:53,720
thing and I need to explore further so

636
00:23:51,500 --> 00:23:55,640
it's about an exposed get repository on

637
00:23:53,720 --> 00:24:00,110
slack that led to all of this source

638
00:23:55,640 --> 00:24:03,440
code and the secrets being leaked so

639
00:24:00,110 --> 00:24:05,300
just to set the scene 10th December 2016

640
00:24:03,440 --> 00:24:07,400
we set up our automated monitoring

641
00:24:05,300 --> 00:24:09,710
systems and we look at everything which

642
00:24:07,400 --> 00:24:11,090
has an SSL cert related to slack and we

643
00:24:09,710 --> 00:24:12,560
look at every you know we look at

644
00:24:11,090 --> 00:24:14,780
reverse who has started to find domains

645
00:24:12,560 --> 00:24:16,790
that are owned by slack - very simple

646
00:24:14,780 --> 00:24:19,160
reconnaissance methods to find domains

647
00:24:16,790 --> 00:24:22,670
that are owned by slack we add them all

648
00:24:19,160 --> 00:24:24,980
into our own top automation systems and

649
00:24:22,670 --> 00:24:27,380
these domains in particular looks

650
00:24:24,980 --> 00:24:28,120
something like slack - reader comm slack

651
00:24:27,380 --> 00:24:30,670
- files

652
00:24:28,120 --> 00:24:34,899
calm and slack or calm to give you some

653
00:24:30,670 --> 00:24:36,910
examples by using passive DNS data

654
00:24:34,900 --> 00:24:38,170
sources our systems collected thousands

655
00:24:36,910 --> 00:24:39,520
of subdomains but there weren't any

656
00:24:38,170 --> 00:24:42,910
vulnerabilities that were picked up

657
00:24:39,520 --> 00:24:45,520
immediately in December through

658
00:24:42,910 --> 00:24:47,110
automation we kept on testing these some

659
00:24:45,520 --> 00:24:50,020
things that we picked up we tested them

660
00:24:47,110 --> 00:24:51,879
every hour of every day from 10th of

661
00:24:50,020 --> 00:24:53,290
December until we finally found the

662
00:24:51,880 --> 00:24:58,630
vulnerability that led to the critical

663
00:24:53,290 --> 00:25:00,250
bottom so 14th of January 2017 for a

664
00:24:58,630 --> 00:25:02,590
short period of time a git Reaper is

665
00:25:00,250 --> 00:25:05,290
exposed which contains the source code

666
00:25:02,590 --> 00:25:08,740
for slack's entire web application this

667
00:25:05,290 --> 00:25:10,420
source code was 1.6 gigs it had over 300

668
00:25:08,740 --> 00:25:14,710
secrets hard-coded within the source

669
00:25:10,420 --> 00:25:18,400
code this is how it looked like QA 30

670
00:25:14,710 --> 00:25:20,020
lakh - reader com / get / config now

671
00:25:18,400 --> 00:25:21,850
what was interesting is that it wasn't

672
00:25:20,020 --> 00:25:23,770
just QA 30 that was exhibiting this

673
00:25:21,850 --> 00:25:26,320
behavior on 14th of January it was

674
00:25:23,770 --> 00:25:28,840
actually around 10 to 15 different QA

675
00:25:26,320 --> 00:25:31,330
subdomains that were ordered and numbers

676
00:25:28,840 --> 00:25:33,639
like QA 20 to 30 that were exposing this

677
00:25:31,330 --> 00:25:35,439
vulnerability and it seems as if what

678
00:25:33,640 --> 00:25:37,300
had happened is someone who was doing

679
00:25:35,440 --> 00:25:39,580
DevOps or setting up a new staging

680
00:25:37,300 --> 00:25:41,590
application for slack's main web app had

681
00:25:39,580 --> 00:25:45,669
cloned it to the web route but forgotten

682
00:25:41,590 --> 00:25:48,790
about the git repo in the web root so

683
00:25:45,670 --> 00:25:52,030
14th of January we we use this tool to

684
00:25:48,790 --> 00:25:54,760
pull down this entire git repo it cloned

685
00:25:52,030 --> 00:25:57,010
it successfully in its entirety and at

686
00:25:54,760 --> 00:25:58,600
the time slacks config dot PHP file

687
00:25:57,010 --> 00:26:01,420
contained the credentials from multiple

688
00:25:58,600 --> 00:26:02,830
services including Dropbox Zendesk

689
00:26:01,420 --> 00:26:05,530
Salesforce Google OAuth

690
00:26:02,830 --> 00:26:08,379
twily a screen hero stripe Twitter or

691
00:26:05,530 --> 00:26:10,149
Amazon AWS Braintree github asana help

692
00:26:08,380 --> 00:26:12,670
Scout box wunderlist and possibly more

693
00:26:10,150 --> 00:26:14,110
that's all there were 300 those days so

694
00:26:12,670 --> 00:26:16,150
there were a lot of credentials there

695
00:26:14,110 --> 00:26:20,320
and I feel really really sad for whoever

696
00:26:16,150 --> 00:26:22,330
had to rotate all yeah we reported this

697
00:26:20,320 --> 00:26:24,399
bug to slack why hack one as soon as we

698
00:26:22,330 --> 00:26:26,439
confirm the findings and slack we were

699
00:26:24,400 --> 00:26:31,020
very quick within hours to remove the

700
00:26:26,440 --> 00:26:31,020
git repo from the library you'd hope so

701
00:26:31,110 --> 00:26:38,760
so 23rd of January 2018 this issue's

702
00:26:35,680 --> 00:26:41,170
result and we worked with them and they

703
00:26:38,760 --> 00:26:41,410
responded fairly quickly helped sort it

704
00:26:41,170 --> 00:26:43,390
out

705
00:26:41,410 --> 00:26:44,830
of course they would but it's like

706
00:26:43,390 --> 00:26:47,050
rotated all the credentials and fix the

707
00:26:44,830 --> 00:26:49,389
issue and I I definitely don't envy the

708
00:26:47,050 --> 00:26:52,659
guys who had to do that we were awarded

709
00:26:49,390 --> 00:26:54,220
$10,000 for this Fogg Hikawa and this is

710
00:26:52,660 --> 00:26:55,720
some of the sauce credit line that's how

711
00:26:54,220 --> 00:26:59,610
so there's some of the keys in the

712
00:26:55,720 --> 00:27:03,820
Sasuke just straight-out hard cut yeah

713
00:26:59,610 --> 00:27:07,000
cool so some more examples one going it

714
00:27:03,820 --> 00:27:09,879
won't go into as much depth but video

715
00:27:07,000 --> 00:27:11,470
game company company runs a program that

716
00:27:09,880 --> 00:27:14,590
for a time was paying out really well

717
00:27:11,470 --> 00:27:16,480
for subdomain takers this obviously led

718
00:27:14,590 --> 00:27:19,060
to people focusing on discovering

719
00:27:16,480 --> 00:27:20,650
subdomain takeovers and after a while

720
00:27:19,060 --> 00:27:22,360
this company got sick of paying out a

721
00:27:20,650 --> 00:27:23,710
bunch of money for all these takeovers

722
00:27:22,360 --> 00:27:25,659
and wrote a tool that would

723
00:27:23,710 --> 00:27:30,130
automatically detect and fix subdomain

724
00:27:25,660 --> 00:27:32,050
take of issues it's just great tool does

725
00:27:30,130 --> 00:27:33,370
have did an awesome job at finding and

726
00:27:32,050 --> 00:27:35,860
fixing these issues automatically I

727
00:27:33,370 --> 00:27:38,919
believe it's open source right really

728
00:27:35,860 --> 00:27:40,179
great tool except our continuous monie

729
00:27:38,920 --> 00:27:42,700
tools were out we're finding the

730
00:27:40,180 --> 00:27:44,370
subdomain takeovers faster than their

731
00:27:42,700 --> 00:27:48,070
tool was fixing it by about a few hours

732
00:27:44,370 --> 00:27:50,260
so like it's great that they did it but

733
00:27:48,070 --> 00:27:51,790
you know again the kind of continuous

734
00:27:50,260 --> 00:27:54,129
security monitoring it and getting that

735
00:27:51,790 --> 00:27:58,360
speed you can pick those issues before

736
00:27:54,130 --> 00:28:00,520
before they're fixed same video game

737
00:27:58,360 --> 00:28:03,399
company so remember the photo of our

738
00:28:00,520 --> 00:28:05,290
jobs in the taxi this is this bug so

739
00:28:03,400 --> 00:28:07,330
when we landed yesterday in London we

740
00:28:05,290 --> 00:28:09,940
reviewed our tools and notice that this

741
00:28:07,330 --> 00:28:12,070
company had exposed a gitlab signup page

742
00:28:09,940 --> 00:28:14,980
that may have allowed anyone to signup

743
00:28:12,070 --> 00:28:17,050
to their internal get lab instance I say

744
00:28:14,980 --> 00:28:19,120
may have because it was introduced found

745
00:28:17,050 --> 00:28:20,590
and then fixed by the company while

746
00:28:19,120 --> 00:28:23,500
we're on the flight over here so we so

747
00:28:20,590 --> 00:28:25,480
we kind of missed it but even though

748
00:28:23,500 --> 00:28:27,610
it's a long-ass flight from Australia

749
00:28:25,480 --> 00:28:29,530
and it really is a long-ass flight um

750
00:28:27,610 --> 00:28:31,719
that it was still only exposed for less

751
00:28:29,530 --> 00:28:32,860
than 24 hours so had we not been on a

752
00:28:31,720 --> 00:28:34,540
flight over here we probably would have

753
00:28:32,860 --> 00:28:35,649
picked that up and hopefully that you

754
00:28:34,540 --> 00:28:37,780
know we would have been able to make

755
00:28:35,650 --> 00:28:39,190
some money from that but you know you

756
00:28:37,780 --> 00:28:40,899
can sort of see now with like continuous

757
00:28:39,190 --> 00:28:44,380
security assessment you can find and

758
00:28:40,900 --> 00:28:46,110
capitalize on those issues so what can

759
00:28:44,380 --> 00:28:48,820
you do about ephemeral vulnerabilities

760
00:28:46,110 --> 00:28:50,610
so if federal bugs are mostly down to

761
00:28:48,820 --> 00:28:52,659
pace of change complexity and scale

762
00:28:50,610 --> 00:28:54,219
securing systems that are constantly

763
00:28:52,660 --> 00:28:55,210
changing across large and complex

764
00:28:54,220 --> 00:28:58,720
attacks services

765
00:28:55,210 --> 00:29:01,170
is hard your automation really is the

766
00:28:58,720 --> 00:29:03,220
key to helping mitigate these issues

767
00:29:01,170 --> 00:29:05,470
there are many things that you can do on

768
00:29:03,220 --> 00:29:07,570
the prevent side so you know baking

769
00:29:05,470 --> 00:29:08,800
better automated security checks into

770
00:29:07,570 --> 00:29:11,679
your development and deployment

771
00:29:08,800 --> 00:29:13,659
processes but in reality doing that

772
00:29:11,680 --> 00:29:15,820
effectively a scale is going to be quite

773
00:29:13,660 --> 00:29:17,770
difficult and probably not going to stop

774
00:29:15,820 --> 00:29:19,480
all the the issues realistically like

775
00:29:17,770 --> 00:29:21,280
 happens I use other kinds of

776
00:29:19,480 --> 00:29:22,870
companies they were talking there they

777
00:29:21,280 --> 00:29:25,300
spend lots of money on security

778
00:29:22,870 --> 00:29:28,000
they have talented developers and you

779
00:29:25,300 --> 00:29:29,470
know it's tough that's not to say that

780
00:29:28,000 --> 00:29:30,820
you shouldn't try doing this and and

781
00:29:29,470 --> 00:29:32,350
that's definitely good practice you

782
00:29:30,820 --> 00:29:34,510
should be trying to do so from the

783
00:29:32,350 --> 00:29:37,600
prevent side but really the more

784
00:29:34,510 --> 00:29:39,580
realistic approach at scale is to

785
00:29:37,600 --> 00:29:41,530
essentially minimize the level exposure

786
00:29:39,580 --> 00:29:42,730
from these ephemeral vulnerabilities so

787
00:29:41,530 --> 00:29:46,540
essentially you want to make them even

788
00:29:42,730 --> 00:29:48,940
more ephemeral so having a strong handle

789
00:29:46,540 --> 00:29:51,430
on your only facing assets is the first

790
00:29:48,940 --> 00:29:53,200
step and critical to to helping to stop

791
00:29:51,430 --> 00:29:54,880
these issues if you don't know what

792
00:29:53,200 --> 00:29:56,910
you're trying to protect you won't be

793
00:29:54,880 --> 00:29:59,770
able to protect them pretty fundamental

794
00:29:56,910 --> 00:30:01,630
and then from there monitoring all your

795
00:29:59,770 --> 00:30:04,060
assets for these types of issues

796
00:30:01,630 --> 00:30:06,820
continuously so you can identify and

797
00:30:04,060 --> 00:30:09,159
respond quickly as you identify them in

798
00:30:06,820 --> 00:30:10,270
part and you know they pop up I don't

799
00:30:09,160 --> 00:30:12,160
know it might seem a little bit like

800
00:30:10,270 --> 00:30:14,620
whack-a-mole security but for ephemeral

801
00:30:12,160 --> 00:30:16,570
issues on a large attack surface it's

802
00:30:14,620 --> 00:30:20,320
often the most realistic approach to

803
00:30:16,570 --> 00:30:22,480
minimizing the exposure and that's the

804
00:30:20,320 --> 00:30:46,080
end any questions

805
00:30:22,480 --> 00:30:46,080
[Music]

