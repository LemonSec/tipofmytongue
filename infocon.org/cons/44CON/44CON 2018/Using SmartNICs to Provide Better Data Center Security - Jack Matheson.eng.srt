1
00:00:00,030 --> 00:00:05,759
hello everyone my name is Jack I am one

2
00:00:03,480 --> 00:00:08,370
of the the principal engineers at at

3
00:00:05,759 --> 00:00:11,190
Mellanox if you haven't heard of the

4
00:00:08,370 --> 00:00:14,040
company we primarily make networking

5
00:00:11,190 --> 00:00:18,420
equipment and I'm gonna I'm gonna try

6
00:00:14,040 --> 00:00:20,430
and explain a little bit about why some

7
00:00:18,420 --> 00:00:23,760
of the stuff that that we're seeing in

8
00:00:20,430 --> 00:00:25,350
in networking hardware is intersecting

9
00:00:23,760 --> 00:00:27,060
with networking security in kind of an

10
00:00:25,350 --> 00:00:30,869
interesting way

11
00:00:27,060 --> 00:00:33,059
just a few aside at the beginning so the

12
00:00:30,869 --> 00:00:35,730
first one is I know that I'm the

13
00:00:33,059 --> 00:00:38,430
gatekeeper to your lunch being the 11

14
00:00:35,730 --> 00:00:42,750
o'clock talk so I'll try and be aware of

15
00:00:38,430 --> 00:00:44,789
that the next one is I I apologize for

16
00:00:42,750 --> 00:00:46,980
the name smart NIC sounds kind of like

17
00:00:44,789 --> 00:00:48,989
you know smart refrigerator or something

18
00:00:46,980 --> 00:00:51,078
like that this is an industry term I

19
00:00:48,989 --> 00:00:54,449
didn't I didn't make it up but I am

20
00:00:51,079 --> 00:00:59,030
reusing it so apologies if you think

21
00:00:54,449 --> 00:01:04,679
smart whatever is a bit played out and

22
00:00:59,030 --> 00:01:06,920
lastly I I never I never really meant to

23
00:01:04,680 --> 00:01:09,920
become a security engineer I kind of

24
00:01:06,920 --> 00:01:09,920
accidental

25
00:01:11,210 --> 00:01:16,770
2007 or so I was I was at a company and

26
00:01:14,159 --> 00:01:19,439
we were launching our first software as

27
00:01:16,770 --> 00:01:21,960
a service offering until then I'd been

28
00:01:19,439 --> 00:01:23,699
shipping on CD ROMs and we thought we

29
00:01:21,960 --> 00:01:26,610
knew what we were doing and the service

30
00:01:23,700 --> 00:01:28,650
went live and about midnight that night

31
00:01:26,610 --> 00:01:30,869
they phoned all the engineers because we

32
00:01:28,650 --> 00:01:32,970
were under a massive attack already and

33
00:01:30,869 --> 00:01:34,979
that was kind of the the introduction to

34
00:01:32,970 --> 00:01:37,200
the the side effects of building

35
00:01:34,979 --> 00:01:40,560
software in a in a modern way and since

36
00:01:37,200 --> 00:01:43,890
then I kind of I kind of got hooked okay

37
00:01:40,560 --> 00:01:45,750
so what we're gonna do is I'm going to

38
00:01:43,890 --> 00:01:48,299
talk a little bit about some of the

39
00:01:45,750 --> 00:01:52,170
trends that we're seeing in in a modern

40
00:01:48,299 --> 00:01:54,240
data center and this is both with the

41
00:01:52,170 --> 00:01:56,280
way infrastructure is deployed and also

42
00:01:54,240 --> 00:01:59,729
the way software is deployed onto that

43
00:01:56,280 --> 00:02:01,759
infrastructure and that'll hopefully

44
00:01:59,729 --> 00:02:05,158
outline some of the problems that

45
00:02:01,759 --> 00:02:07,200
created the need for something like like

46
00:02:05,159 --> 00:02:10,080
a more intelligent more secure

47
00:02:07,200 --> 00:02:14,040
infrastructure then we'll talk about

48
00:02:10,080 --> 00:02:16,080
what a what a smart NIC is and kind of

49
00:02:14,040 --> 00:02:19,530
the reasons why it's different from a

50
00:02:16,080 --> 00:02:22,230
dumb NIC or or one that's less

51
00:02:19,530 --> 00:02:24,989
positioned to be to be useful for for

52
00:02:22,230 --> 00:02:26,790
data center security well look at what

53
00:02:24,989 --> 00:02:29,330
it what a what a data center looks like

54
00:02:26,790 --> 00:02:31,650
if they're deploying something like a

55
00:02:29,330 --> 00:02:34,709
networking infrastructure security

56
00:02:31,650 --> 00:02:36,900
solution and then finally we'll show you

57
00:02:34,709 --> 00:02:40,349
some of the some of the cooler things

58
00:02:36,900 --> 00:02:41,940
that go beyond networking security to

59
00:02:40,349 --> 00:02:44,760
actually talk about how it affects host

60
00:02:41,940 --> 00:02:48,660
security how smart NICs can do things

61
00:02:44,760 --> 00:02:51,480
like just give you a better picture of

62
00:02:48,660 --> 00:02:53,609
the world it's it's not just a you know

63
00:02:51,480 --> 00:02:55,440
a clip on the wire capturing packets you

64
00:02:53,609 --> 00:02:58,680
can actually do some some really unique

65
00:02:55,440 --> 00:03:02,970
things so so first it's kind of a

66
00:02:58,680 --> 00:03:05,400
problem that you might be aware of if if

67
00:03:02,970 --> 00:03:08,670
you're you're one of the people who are

68
00:03:05,400 --> 00:03:10,920
in charge of racking and stacking if if

69
00:03:08,670 --> 00:03:15,179
you're simply deploying software you've

70
00:03:10,920 --> 00:03:17,010
probably seen this as a more of a side

71
00:03:15,180 --> 00:03:19,220
effect for how much software you

72
00:03:17,010 --> 00:03:22,858
actually have to deploy and that's that

73
00:03:19,220 --> 00:03:25,230
what we're seeing is that we're no

74
00:03:22,859 --> 00:03:26,489
longer deploying appliances in in the

75
00:03:25,230 --> 00:03:28,560
network most of these things are

76
00:03:26,489 --> 00:03:31,319
becoming virtualized so you're not going

77
00:03:28,560 --> 00:03:34,049
to see a rack of a bunch of machines

78
00:03:31,319 --> 00:03:36,089
with you know at or at the top and then

79
00:03:34,049 --> 00:03:38,910
like a ginormous firewall appliance

80
00:03:36,090 --> 00:03:40,410
we're more or less virtualizing all of

81
00:03:38,910 --> 00:03:43,168
that right so you'll you'll have a

82
00:03:40,410 --> 00:03:45,989
virtualized firewall you'll have a bunch

83
00:03:43,169 --> 00:03:48,599
of virtual switches you'll have say like

84
00:03:45,989 --> 00:03:50,700
you know an IPS would used to be an

85
00:03:48,599 --> 00:03:53,190
appliance is now virtualized and living

86
00:03:50,700 --> 00:03:55,679
as an agent on the host and all of this

87
00:03:53,190 --> 00:03:59,910
is actually taking up an insane amount

88
00:03:55,680 --> 00:04:02,220
of hosts compute power so these are the

89
00:03:59,910 --> 00:04:04,079
these aren't meant to represent actual

90
00:04:02,220 --> 00:04:08,160
numbers but more the kind of trend that

91
00:04:04,079 --> 00:04:09,930
we're seeing so simply taking the the

92
00:04:08,160 --> 00:04:12,540
switching problem you know just pushing

93
00:04:09,930 --> 00:04:14,760
packets between virtual machines pushing

94
00:04:12,540 --> 00:04:16,548
packets between different hosts on a

95
00:04:14,760 --> 00:04:19,560
network within a data center it's

96
00:04:16,548 --> 00:04:21,448
consuming so much compute that the more

97
00:04:19,560 --> 00:04:23,640
services you deploy and the more hosts

98
00:04:21,449 --> 00:04:25,830
you need the more compute on each host

99
00:04:23,640 --> 00:04:27,760
is required for actually moving packets

100
00:04:25,830 --> 00:04:30,250
around and it gets even

101
00:04:27,760 --> 00:04:31,719
when we start to virtualize the security

102
00:04:30,250 --> 00:04:34,240
infrastructure so where we used to have

103
00:04:31,720 --> 00:04:36,280
this appliances that we can throw into

104
00:04:34,240 --> 00:04:38,110
the into the data center once we

105
00:04:36,280 --> 00:04:40,000
virtualized those and put them on the

106
00:04:38,110 --> 00:04:43,420
host living alongside each of these

107
00:04:40,000 --> 00:04:45,670
services we see them consume pretty much

108
00:04:43,420 --> 00:04:47,200
your entire like if you have a GN farm

109
00:04:45,670 --> 00:04:51,520
it's going to consume most of those

110
00:04:47,200 --> 00:04:54,670
cores so I think for instance if you

111
00:04:51,520 --> 00:04:56,979
wanted to provide wall-to-wall ipsec

112
00:04:54,670 --> 00:05:00,910
between each of your your machines in

113
00:04:56,980 --> 00:05:02,800
kind of a V PC I he'll consume I think

114
00:05:00,910 --> 00:05:05,950
on a 48 core machine it's something like

115
00:05:02,800 --> 00:05:07,570
12 cores just to maintain IPSec so right

116
00:05:05,950 --> 00:05:11,200
off the bat you're just taking a huge

117
00:05:07,570 --> 00:05:14,050
hit on your your your compute power but

118
00:05:11,200 --> 00:05:16,690
in my mind this is this is kind of this

119
00:05:14,050 --> 00:05:18,730
is kind of a boring problem but but the

120
00:05:16,690 --> 00:05:22,210
real the real worry is this last bullet

121
00:05:18,730 --> 00:05:24,670
point so most data centers are around 10

122
00:05:22,210 --> 00:05:26,200
gigabit maybe 25 gigabit

123
00:05:24,670 --> 00:05:31,450
once once you start to get into those

124
00:05:26,200 --> 00:05:33,370
kind of bandwidth areas you consume so

125
00:05:31,450 --> 00:05:36,159
much CPU that you have nothing left for

126
00:05:33,370 --> 00:05:37,780
first security right but like I said

127
00:05:36,160 --> 00:05:39,990
this is this is kind of a boring problem

128
00:05:37,780 --> 00:05:41,770
this is this is just what what caused

129
00:05:39,990 --> 00:05:43,810
some of the things that I'm talking

130
00:05:41,770 --> 00:05:45,760
about today so we get into this

131
00:05:43,810 --> 00:05:47,500
situation where everything is

132
00:05:45,760 --> 00:05:49,659
virtualized it's getting closer to the

133
00:05:47,500 --> 00:05:51,610
data the network is becoming dumber and

134
00:05:49,660 --> 00:05:53,440
the edges are becoming where everything

135
00:05:51,610 --> 00:05:54,750
is done ok so let's let's keep that in

136
00:05:53,440 --> 00:05:57,880
mind

137
00:05:54,750 --> 00:06:01,840
ok that leads to the attack surface

138
00:05:57,880 --> 00:06:03,640
problem so once we virtualized literally

139
00:06:01,840 --> 00:06:06,969
everything including the switches our

140
00:06:03,640 --> 00:06:09,969
firewalls hips all that kind of stuff

141
00:06:06,970 --> 00:06:11,830
it's now living on the same the same

142
00:06:09,970 --> 00:06:14,110
compute platform the same trust domain

143
00:06:11,830 --> 00:06:17,080
as all of your regular services so let's

144
00:06:14,110 --> 00:06:19,330
say you have a single host you have some

145
00:06:17,080 --> 00:06:21,550
number of virtual machines you've also

146
00:06:19,330 --> 00:06:22,750
got obviously a hypervisor to manage the

147
00:06:21,550 --> 00:06:25,180
resources for those virtual machines

148
00:06:22,750 --> 00:06:26,620
within the hypervisor you've got some

149
00:06:25,180 --> 00:06:28,450
kind of switching framework so that

150
00:06:26,620 --> 00:06:30,700
those VMs have access to the network and

151
00:06:28,450 --> 00:06:33,610
they can push packets around the the

152
00:06:30,700 --> 00:06:35,590
hypervisor the switching in this case I

153
00:06:33,610 --> 00:06:37,990
used OVS just because it's very commonly

154
00:06:35,590 --> 00:06:39,580
deployed along with all of the policy

155
00:06:37,990 --> 00:06:41,409
for that dead switching framework

156
00:06:39,580 --> 00:06:44,709
they're all stored on the

157
00:06:41,409 --> 00:06:46,989
host right and and we know VMs can can

158
00:06:44,709 --> 00:06:49,029
escape their their sandbox we know that

159
00:06:46,989 --> 00:06:51,248
there's l1 terminal faults so that we

160
00:06:49,029 --> 00:06:52,989
can have VMs inspecting memory from

161
00:06:51,249 --> 00:06:56,349
other VMs we know that there's a whole

162
00:06:52,989 --> 00:06:59,649
host of host problems and now we've got

163
00:06:56,349 --> 00:07:01,779
this this really sticky problem where as

164
00:06:59,649 --> 00:07:03,009
a result of virtualizing literally

165
00:07:01,779 --> 00:07:05,649
everything and putting it on the same

166
00:07:03,009 --> 00:07:08,559
host we now find that the attack surface

167
00:07:05,649 --> 00:07:11,469
is now shared so what was once isolated

168
00:07:08,559 --> 00:07:14,050
at least physically maybe not logically

169
00:07:11,469 --> 00:07:16,869
is now shared both physically and

170
00:07:14,050 --> 00:07:19,809
logically right the other problem is

171
00:07:16,869 --> 00:07:21,789
that things like the hypervisor and and

172
00:07:19,809 --> 00:07:23,589
certainly services that are connected to

173
00:07:21,789 --> 00:07:25,568
the hypervisor those are all running

174
00:07:23,589 --> 00:07:27,849
with escalated privileges right so a

175
00:07:25,569 --> 00:07:29,229
breach on any of a number of systems

176
00:07:27,849 --> 00:07:31,989
that are required just for these

177
00:07:29,229 --> 00:07:33,639
applications to exist is going to affect

178
00:07:31,989 --> 00:07:36,578
not only applications but all of your

179
00:07:33,639 --> 00:07:38,319
infrastructure as well so there have

180
00:07:36,579 --> 00:07:40,659
been a number of exploits for example

181
00:07:38,319 --> 00:07:43,389
where now this isn't a hardware switch

182
00:07:40,659 --> 00:07:45,159
this is a software switch this is open

183
00:07:43,389 --> 00:07:47,949
to all the same type of software crap

184
00:07:45,159 --> 00:07:49,209
that you might expect like forget to

185
00:07:47,949 --> 00:07:51,459
forget the advanced stuff like

186
00:07:49,209 --> 00:07:53,860
side-channel that these are this is just

187
00:07:51,459 --> 00:07:55,599
playing out software right I can I can

188
00:07:53,860 --> 00:07:57,999
exploit any number of buffer problems

189
00:07:55,599 --> 00:07:59,949
within the switch itself right and so

190
00:07:57,999 --> 00:08:01,929
we've seen attacks where simply by

191
00:07:59,949 --> 00:08:04,869
pushing packets in an intelligent way I

192
00:08:01,929 --> 00:08:06,638
can I can breach the embedded switch

193
00:08:04,869 --> 00:08:08,469
within my hypervisor and now I have

194
00:08:06,639 --> 00:08:09,819
access to the entire host which includes

195
00:08:08,469 --> 00:08:12,719
all the applications that are on that

196
00:08:09,819 --> 00:08:15,279
host so as a result of the consolidation

197
00:08:12,719 --> 00:08:17,769
we've created this really nasty trust

198
00:08:15,279 --> 00:08:21,789
domain everything is sort of switched

199
00:08:17,769 --> 00:08:24,339
together in in a very small way and this

200
00:08:21,789 --> 00:08:28,989
is kind of what we call problem number

201
00:08:24,339 --> 00:08:31,959
two okay the real problem with this is

202
00:08:28,989 --> 00:08:35,679
that host security is terrible right so

203
00:08:31,959 --> 00:08:37,240
if we if we look at if we look at

204
00:08:35,679 --> 00:08:39,489
traditional host security you might

205
00:08:37,240 --> 00:08:42,250
think of something like like a malware

206
00:08:39,490 --> 00:08:44,589
agent or something that's monitoring an

207
00:08:42,250 --> 00:08:48,100
application whitelist or it could even

208
00:08:44,589 --> 00:08:49,959
be some kind of IPS system or firewall

209
00:08:48,100 --> 00:08:52,420
the fact that they're all running on the

210
00:08:49,959 --> 00:08:54,790
same host is kind of a problem when we

211
00:08:52,420 --> 00:08:57,219
look at the total landscape for

212
00:08:54,790 --> 00:08:59,790
host-based security and this is this is

213
00:08:57,220 --> 00:09:02,800
a very small subset it's just kind of a

214
00:08:59,790 --> 00:09:04,800
selective one just to give you kind of

215
00:09:02,800 --> 00:09:09,400
an idea so we we put some of the

216
00:09:04,800 --> 00:09:11,680
technological revolutionary items in in

217
00:09:09,400 --> 00:09:14,530
black and the subsequent exploits in

218
00:09:11,680 --> 00:09:16,599
yellow finally ending with the the l1

219
00:09:14,530 --> 00:09:19,060
terminal faults now which have reduced

220
00:09:16,600 --> 00:09:22,090
the compute problem on the host to an

221
00:09:19,060 --> 00:09:25,920
even more severe situation but the idea

222
00:09:22,090 --> 00:09:28,570
is we know that host-based security is

223
00:09:25,920 --> 00:09:31,479
maybe not bad but it's it's impossible

224
00:09:28,570 --> 00:09:32,980
to do what you want to do if you if you

225
00:09:31,480 --> 00:09:34,720
have two air gapped systems that's

226
00:09:32,980 --> 00:09:36,610
fantastic once you smash them together

227
00:09:34,720 --> 00:09:38,350
they're a little bit a little bit worse

228
00:09:36,610 --> 00:09:41,740
and even with things like like Stuxnet

229
00:09:38,350 --> 00:09:45,220
but that crossed an air gap by design

230
00:09:41,740 --> 00:09:48,610
right so so even even in the presence of

231
00:09:45,220 --> 00:09:50,440
very sophisticated prevention techniques

232
00:09:48,610 --> 00:09:52,990
we find that host-based security is

233
00:09:50,440 --> 00:09:55,000
still incredibly lacking that's right I

234
00:09:52,990 --> 00:09:58,300
absolutely love this quote I try and use

235
00:09:55,000 --> 00:10:00,280
it whenever I can I'm not going to read

236
00:09:58,300 --> 00:10:03,160
it out loud I'll let you read it but

237
00:10:00,280 --> 00:10:05,520
it's it kind of summarizes my my entire

238
00:10:03,160 --> 00:10:08,260
my entire stance on host-based security

239
00:10:05,520 --> 00:10:09,970
everyone everyone thinks that it's it's

240
00:10:08,260 --> 00:10:11,319
this lockstep thing where you've got two

241
00:10:09,970 --> 00:10:12,430
zero day and then you gotta pack you got

242
00:10:11,320 --> 00:10:14,020
a zero day and you got a patch and

243
00:10:12,430 --> 00:10:15,489
that's how they get in the answer is no

244
00:10:14,020 --> 00:10:18,310
it's really just time and persistence

245
00:10:15,490 --> 00:10:20,250
right that was that was exactly what the

246
00:10:18,310 --> 00:10:23,530
the opening talk this morning was about

247
00:10:20,250 --> 00:10:25,000
was there's no possible way for it to

248
00:10:23,530 --> 00:10:26,680
get better and there's no possible way

249
00:10:25,000 --> 00:10:29,710
for you to get ahead of it the most you

250
00:10:26,680 --> 00:10:32,319
can do is try and minimize it and and

251
00:10:29,710 --> 00:10:34,270
take advantage of the fact that time is

252
00:10:32,320 --> 00:10:36,400
the factor so if you increase time that

253
00:10:34,270 --> 00:10:38,470
gives you more chance to remediate

254
00:10:36,400 --> 00:10:41,650
things or inspect vulnerabilities or

255
00:10:38,470 --> 00:10:44,260
keep track of your assets but the only

256
00:10:41,650 --> 00:10:45,850
thing that you can't do is shove

257
00:10:44,260 --> 00:10:47,830
everything together on the same trust

258
00:10:45,850 --> 00:10:49,420
domain because that'll actually decrease

259
00:10:47,830 --> 00:10:52,570
the amount of time that you have and

260
00:10:49,420 --> 00:10:54,459
it'll it'll essentially make it so the

261
00:10:52,570 --> 00:10:56,080
persistence and focus that we're talking

262
00:10:54,460 --> 00:10:58,990
about here the thing that'll always get

263
00:10:56,080 --> 00:11:03,370
you in is basically guaranteed to effect

264
00:10:58,990 --> 00:11:04,440
everything once it goes down I love this

265
00:11:03,370 --> 00:11:07,920
quote

266
00:11:04,440 --> 00:11:09,540
okay so so what can we do about this by

267
00:11:07,920 --> 00:11:10,878
the way is the Sun in my double okay

268
00:11:09,540 --> 00:11:13,649
good

269
00:11:10,879 --> 00:11:15,720
essentially the the real solution here

270
00:11:13,649 --> 00:11:18,389
is to create some kind of isolation

271
00:11:15,720 --> 00:11:19,589
between security controls and the

272
00:11:18,389 --> 00:11:22,649
applications that you're trying to

273
00:11:19,589 --> 00:11:24,269
protect and as a bonus the security

274
00:11:22,649 --> 00:11:26,160
controls the applications you're trying

275
00:11:24,269 --> 00:11:29,389
to protect and the infrastructure itself

276
00:11:26,160 --> 00:11:32,910
so if you've got something like a

277
00:11:29,389 --> 00:11:35,699
sensitive application and you know that

278
00:11:32,910 --> 00:11:38,100
it's going to be targeted right the the

279
00:11:35,699 --> 00:11:40,290
best thing that can possibly be done is

280
00:11:38,100 --> 00:11:42,180
to say when I get breached

281
00:11:40,290 --> 00:11:44,099
I need my infrastructure to still be

282
00:11:42,180 --> 00:11:46,439
stable so I want to always be able to

283
00:11:44,100 --> 00:11:48,149
trust my infrastructure even if I can't

284
00:11:46,439 --> 00:11:50,399
trust my application and I can't trust

285
00:11:48,149 --> 00:11:51,810
the data that that is originated from

286
00:11:50,399 --> 00:11:53,459
that application I still need to be able

287
00:11:51,810 --> 00:11:54,989
to trust the infrastructure right

288
00:11:53,459 --> 00:11:56,550
because I need to be able to take

289
00:11:54,990 --> 00:11:58,259
machines offline I need to be able to

290
00:11:56,550 --> 00:12:00,180
reap revision them I need to be able to

291
00:11:58,259 --> 00:12:02,639
you know rollback and hot deploy

292
00:12:00,180 --> 00:12:04,349
software in a trusted way if if I don't

293
00:12:02,639 --> 00:12:05,519
have a trusted rollback mechanism what

294
00:12:04,350 --> 00:12:07,230
good is that going to do I'm simply

295
00:12:05,519 --> 00:12:08,970
going to roll back into another piece of

296
00:12:07,230 --> 00:12:12,410
software that I don't even potentially

297
00:12:08,970 --> 00:12:15,509
own right so so the bottom line is I

298
00:12:12,410 --> 00:12:18,360
need to trust my infrastructure even if

299
00:12:15,509 --> 00:12:20,310
I can't trust my applications and so

300
00:12:18,360 --> 00:12:23,910
that's where a smart and it comes in

301
00:12:20,310 --> 00:12:25,589
so basically when when you hear smart

302
00:12:23,910 --> 00:12:28,380
NIC and you can even look it up it'll

303
00:12:25,589 --> 00:12:30,209
include everything from you know like a

304
00:12:28,380 --> 00:12:30,839
like a 10 gigabit adapter with some

305
00:12:30,209 --> 00:12:32,399
offloads

306
00:12:30,839 --> 00:12:35,399
like it might have enough smarts to do

307
00:12:32,399 --> 00:12:37,139
some TCP handling or it might might

308
00:12:35,399 --> 00:12:39,360
accelerate some crypto functions or

309
00:12:37,139 --> 00:12:41,430
something those are those are dumb NICs

310
00:12:39,360 --> 00:12:43,350
those aren't smart NICs all that all

311
00:12:41,430 --> 00:12:45,089
that's doing is making it so the host

312
00:12:43,350 --> 00:12:46,529
runs a little bit better which means

313
00:12:45,089 --> 00:12:48,600
it's only solving that first problem

314
00:12:46,529 --> 00:12:52,290
that compute problem it's not solving

315
00:12:48,600 --> 00:12:54,000
the attack surface problem so so for the

316
00:12:52,290 --> 00:12:55,980
purpose of this presentation I'm gonna

317
00:12:54,000 --> 00:13:00,329
say that a smart NIC is just a computer

318
00:12:55,980 --> 00:13:02,819
okay it can be treated like an entire

319
00:13:00,329 --> 00:13:05,819
computer it's got a memory subsystem it

320
00:13:02,819 --> 00:13:07,860
has some amount of compute power where

321
00:13:05,819 --> 00:13:11,040
you can run applications

322
00:13:07,860 --> 00:13:12,540
it's got we can just assume it's it's

323
00:13:11,040 --> 00:13:15,660
Linux it's got some kind of embedded

324
00:13:12,540 --> 00:13:17,180
Linux but the point is it's deployed on

325
00:13:15,660 --> 00:13:18,770
a network adapter

326
00:13:17,180 --> 00:13:22,189
so the reason for this is a few things

327
00:13:18,770 --> 00:13:24,319
one we know that that applications are

328
00:13:22,190 --> 00:13:26,480
moving closer to the data the the edges

329
00:13:24,320 --> 00:13:28,550
becoming where everything is done and

330
00:13:26,480 --> 00:13:32,720
the pipe is becoming just sort of a big

331
00:13:28,550 --> 00:13:34,609
fast dumb pipe so if we want an isolated

332
00:13:32,720 --> 00:13:36,830
environment in which we can run some

333
00:13:34,610 --> 00:13:38,930
kind of security control the best place

334
00:13:36,830 --> 00:13:41,300
we could possibly do it is something

335
00:13:38,930 --> 00:13:42,349
hanging off the host which is not on the

336
00:13:41,300 --> 00:13:45,290
host right

337
00:13:42,350 --> 00:13:47,060
we know the host is a target if we can

338
00:13:45,290 --> 00:13:49,370
give it to be as close to the host as

339
00:13:47,060 --> 00:13:52,099
possible and have some effect over the

340
00:13:49,370 --> 00:13:53,300
host but not be there and also not be on

341
00:13:52,100 --> 00:13:55,250
the infrastructure that's going to be

342
00:13:53,300 --> 00:13:57,020
the most scalable but still the most

343
00:13:55,250 --> 00:13:59,120
relevant thing we can do especially

344
00:13:57,020 --> 00:14:01,400
since the data that we're operating over

345
00:13:59,120 --> 00:14:02,900
could even be you know terminated on the

346
00:14:01,400 --> 00:14:04,670
NIC where we still have access to raw

347
00:14:02,900 --> 00:14:08,000
data and we can still implement our

348
00:14:04,670 --> 00:14:10,790
security controls so so this is sort of

349
00:14:08,000 --> 00:14:14,600
what we came into we figured out that if

350
00:14:10,790 --> 00:14:18,140
we could put security controls in a

351
00:14:14,600 --> 00:14:21,410
programmable way using regular compute

352
00:14:18,140 --> 00:14:23,540
software throw it on a network card have

353
00:14:21,410 --> 00:14:25,189
the network card hang off the PCIe so

354
00:14:23,540 --> 00:14:27,199
it's still connected to the host that's

355
00:14:25,190 --> 00:14:28,990
sort of the ideal situation but I'm

356
00:14:27,200 --> 00:14:32,450
gonna I'm gonna attach some caveats here

357
00:14:28,990 --> 00:14:34,970
excuse me so so these are sort of my my

358
00:14:32,450 --> 00:14:37,640
must-haves for for classifying a smart

359
00:14:34,970 --> 00:14:41,390
NIC some of these will be will be

360
00:14:37,640 --> 00:14:43,610
obvious so obviously we want some kind

361
00:14:41,390 --> 00:14:46,970
of high speed networking I'm mostly

362
00:14:43,610 --> 00:14:49,250
talking about 25 gigabit and upward

363
00:14:46,970 --> 00:14:53,480
the reasoning here is that we're talking

364
00:14:49,250 --> 00:14:55,340
about datacenter hosts that have you

365
00:14:53,480 --> 00:14:58,040
know let's say 48 cores

366
00:14:55,340 --> 00:14:59,840
64 cores a large number of cores on

367
00:14:58,040 --> 00:15:01,939
board it'll have a large number of

368
00:14:59,840 --> 00:15:04,580
memory you know one terabyte is not

369
00:15:01,940 --> 00:15:07,280
uncommon we're protecting services that

370
00:15:04,580 --> 00:15:09,440
are deployed at scale and if you

371
00:15:07,280 --> 00:15:11,449
multiply out the bandwidth requirements

372
00:15:09,440 --> 00:15:14,120
by the number of VMS or containers that

373
00:15:11,450 --> 00:15:15,320
are running on the bare metal and you

374
00:15:14,120 --> 00:15:17,090
want to still secure that network

375
00:15:15,320 --> 00:15:21,710
traffic it needs to be high-performance

376
00:15:17,090 --> 00:15:23,030
enough the next is some set of offloads

377
00:15:21,710 --> 00:15:25,190
that you would probably find on a dumb

378
00:15:23,030 --> 00:15:26,930
NIC but these are things like like

379
00:15:25,190 --> 00:15:29,330
crypto offloads or things that you don't

380
00:15:26,930 --> 00:15:32,209
want done on the host

381
00:15:29,330 --> 00:15:33,380
the networking virtualization I'll talk

382
00:15:32,209 --> 00:15:37,430
about in a second if you're not familiar

383
00:15:33,380 --> 00:15:39,620
with how how NFV works we'll we'll go

384
00:15:37,430 --> 00:15:45,130
into that with a few examples I've put

385
00:15:39,620 --> 00:15:48,170
security and Trust bonuses because well

386
00:15:45,130 --> 00:15:49,760
the security software is more or less

387
00:15:48,170 --> 00:15:51,290
the same it's just kind of done in

388
00:15:49,760 --> 00:15:55,069
isolation but but the idea is that

389
00:15:51,290 --> 00:15:58,160
within this this sandbox here it needs

390
00:15:55,070 --> 00:16:00,410
to be it needs to be like a plus plus

391
00:15:58,160 --> 00:16:02,120
right it can't be exactly what's done on

392
00:16:00,410 --> 00:16:05,480
the host but but done in the nick it has

393
00:16:02,120 --> 00:16:07,430
to have some additive value so the the

394
00:16:05,480 --> 00:16:09,380
software flexibility is there because we

395
00:16:07,430 --> 00:16:11,899
have to be able to deploy and manage it

396
00:16:09,380 --> 00:16:13,730
like an appliance or like any other

397
00:16:11,899 --> 00:16:16,459
piece of software that we would deploy

398
00:16:13,730 --> 00:16:18,110
like an agent or something like that and

399
00:16:16,459 --> 00:16:20,869
it has to be managed as if it were a

400
00:16:18,110 --> 00:16:24,050
deployed node so for example if I want

401
00:16:20,870 --> 00:16:26,390
to deploy new networking policy or new

402
00:16:24,050 --> 00:16:29,180
authentication policy or something like

403
00:16:26,390 --> 00:16:30,620
that it has to be able to tie into the

404
00:16:29,180 --> 00:16:32,810
normal DevOps cycle that you would

405
00:16:30,620 --> 00:16:34,279
normally be using so if you're running

406
00:16:32,810 --> 00:16:36,439
say ansible

407
00:16:34,279 --> 00:16:38,029
to make sure that all of the

408
00:16:36,440 --> 00:16:40,670
authentication policies on all the

409
00:16:38,029 --> 00:16:42,470
machines in a data center are in sync

410
00:16:40,670 --> 00:16:44,329
with each other and and up-to-date with

411
00:16:42,470 --> 00:16:46,279
whatever authentication policy you've

412
00:16:44,329 --> 00:16:47,899
got version controlled we want to treat

413
00:16:46,279 --> 00:16:50,079
the smart NIC as the same exact thing so

414
00:16:47,899 --> 00:16:53,630
treat it like like a deployed endpoint

415
00:16:50,079 --> 00:16:55,910
so let's let's take a look at what a

416
00:16:53,630 --> 00:16:57,980
typical smart NIC will look like so

417
00:16:55,910 --> 00:17:00,890
there's there's a lot of a lot of junk

418
00:16:57,980 --> 00:17:02,420
here but the it's it's actually not a

419
00:17:00,890 --> 00:17:05,929
lot I'm gonna try and go through it a

420
00:17:02,420 --> 00:17:08,359
little bit here so so first off since

421
00:17:05,929 --> 00:17:10,669
the NIC is just a networking card with a

422
00:17:08,359 --> 00:17:13,520
computer on board we have to have some

423
00:17:10,669 --> 00:17:15,949
measure of assurance that the computer

424
00:17:13,520 --> 00:17:18,500
on board the smart NIC came up in a

425
00:17:15,949 --> 00:17:21,079
trusted known way so normally this would

426
00:17:18,500 --> 00:17:23,480
be done with something like like

427
00:17:21,079 --> 00:17:24,649
registers that indicate the the state of

428
00:17:23,480 --> 00:17:27,050
the world so that you can check them

429
00:17:24,650 --> 00:17:29,210
against a gold state for example it

430
00:17:27,050 --> 00:17:31,820
could be that you're verifying the

431
00:17:29,210 --> 00:17:34,370
signature on some some early boot image

432
00:17:31,820 --> 00:17:36,050
or possibly even the firmware itself and

433
00:17:34,370 --> 00:17:38,689
you do that verification and hardware

434
00:17:36,050 --> 00:17:41,210
before you boot the system either way we

435
00:17:38,690 --> 00:17:43,070
need this to be a trusted compute entity

436
00:17:41,210 --> 00:17:45,440
on the network so we don't even

437
00:17:43,070 --> 00:17:47,659
attach it to the host until it's booted

438
00:17:45,440 --> 00:17:49,400
up in a good state okay and by doing

439
00:17:47,660 --> 00:17:51,170
that that means the host will actually

440
00:17:49,400 --> 00:17:52,730
be completely disconnected until we

441
00:17:51,170 --> 00:17:55,100
verified the authenticity of the

442
00:17:52,730 --> 00:17:56,660
security controls on the smart NIC all

443
00:17:55,100 --> 00:18:00,709
right because the the host can't do

444
00:17:56,660 --> 00:18:02,720
anything without a NIC right next up is

445
00:18:00,710 --> 00:18:04,670
we've got some kind of policy these are

446
00:18:02,720 --> 00:18:08,000
just a couple of couple little examples

447
00:18:04,670 --> 00:18:10,190
but the idea is that security policy is

448
00:18:08,000 --> 00:18:12,230
defined elsewhere it's usually version

449
00:18:10,190 --> 00:18:13,580
controlled it's usually tied to the

450
00:18:12,230 --> 00:18:16,010
applications in the configuration

451
00:18:13,580 --> 00:18:17,060
themselves so if you can imagine in your

452
00:18:16,010 --> 00:18:19,220
head when you're deploying software

453
00:18:17,060 --> 00:18:21,560
let's say you've got some kind of

454
00:18:19,220 --> 00:18:23,690
security policy in like a distributed

455
00:18:21,560 --> 00:18:25,790
key store like like at CD or something

456
00:18:23,690 --> 00:18:27,950
like that you would typically have these

457
00:18:25,790 --> 00:18:29,270
type of rules right they may not be flow

458
00:18:27,950 --> 00:18:31,010
rules because these are these are kind

459
00:18:29,270 --> 00:18:34,430
of NIC specific but you could have

460
00:18:31,010 --> 00:18:36,110
things like application controls and

461
00:18:34,430 --> 00:18:38,570
then what actions to take on violations

462
00:18:36,110 --> 00:18:41,540
things like that those would normally be

463
00:18:38,570 --> 00:18:45,439
revision controlled network security

464
00:18:41,540 --> 00:18:48,110
policy right and then we'll have some

465
00:18:45,440 --> 00:18:49,550
number of accelerators so these are kind

466
00:18:48,110 --> 00:18:51,949
of the typical accelerators that you

467
00:18:49,550 --> 00:18:54,230
would find in a modern-day high-speed

468
00:18:51,950 --> 00:18:56,510
network card so these are things like

469
00:18:54,230 --> 00:18:59,840
packet classification packet header

470
00:18:56,510 --> 00:19:02,720
parsing some offloads to do bulk crypto

471
00:18:59,840 --> 00:19:05,740
so for example excuse me

472
00:19:02,720 --> 00:19:07,940
if you're doing TOS on the host

473
00:19:05,740 --> 00:19:09,440
ordinarily you wouldn't actually do it

474
00:19:07,940 --> 00:19:10,490
in software you'd have some offload

475
00:19:09,440 --> 00:19:12,410
engines so that could be done

476
00:19:10,490 --> 00:19:14,770
efficiently those are still going to be

477
00:19:12,410 --> 00:19:17,570
present we're gonna make the case that

478
00:19:14,770 --> 00:19:18,980
these will also be used by the the

479
00:19:17,570 --> 00:19:22,010
embedded compute to do some neat things

480
00:19:18,980 --> 00:19:23,720
I'll show you that in a little bit and

481
00:19:22,010 --> 00:19:26,600
then we've got some type of compute

482
00:19:23,720 --> 00:19:30,020
hanging off here so I just threw up 16

483
00:19:26,600 --> 00:19:31,340
cores connected on some some memory

484
00:19:30,020 --> 00:19:33,980
subsystem you can think of these as

485
00:19:31,340 --> 00:19:36,649
normal cores they might have like shared

486
00:19:33,980 --> 00:19:37,940
l2 between a couple of cores with its

487
00:19:36,650 --> 00:19:40,370
local cache then they might be

488
00:19:37,940 --> 00:19:42,680
distributed to a larger you know say

489
00:19:40,370 --> 00:19:44,719
ddr4 channel or something like that it's

490
00:19:42,680 --> 00:19:47,780
a computer right with a normal memory

491
00:19:44,720 --> 00:19:50,780
hierarchy okay and then there's there's

492
00:19:47,780 --> 00:19:53,570
there's two important pieces here the

493
00:19:50,780 --> 00:19:55,780
first is that I'm going to claim that a

494
00:19:53,570 --> 00:19:58,360
smart NIC needs to have two

495
00:19:55,780 --> 00:20:00,370
types of interfaces so the first one is

496
00:19:58,360 --> 00:20:02,169
going to be a data link and this is

497
00:20:00,370 --> 00:20:04,000
where virtual machines and containers

498
00:20:02,170 --> 00:20:05,770
and anything running on the host gets

499
00:20:04,000 --> 00:20:07,660
all of its data this is the the

500
00:20:05,770 --> 00:20:09,250
high-speed data link that you would

501
00:20:07,660 --> 00:20:11,590
normally connect through some kind of

502
00:20:09,250 --> 00:20:13,960
external switch and then it's going to

503
00:20:11,590 --> 00:20:16,389
have a management link okay and this is

504
00:20:13,960 --> 00:20:17,560
where you would get something like if

505
00:20:16,390 --> 00:20:21,100
you're going to control the NIC or

506
00:20:17,560 --> 00:20:22,960
reconfigure the policy or maybe modify

507
00:20:21,100 --> 00:20:24,610
the security controls that you want to

508
00:20:22,960 --> 00:20:26,470
apply to the host it would be done

509
00:20:24,610 --> 00:20:27,669
through this management NIC so this

510
00:20:26,470 --> 00:20:29,680
isn't this isn't kind of a new concept

511
00:20:27,670 --> 00:20:31,420
if you've deployed appliances before in

512
00:20:29,680 --> 00:20:34,210
the data center they're always separated

513
00:20:31,420 --> 00:20:36,520
like this but the idea here is we want

514
00:20:34,210 --> 00:20:38,500
we want physical separation so if you

515
00:20:36,520 --> 00:20:40,660
imagine a like a concrete wall between

516
00:20:38,500 --> 00:20:42,550
these two we don't want data packets to

517
00:20:40,660 --> 00:20:44,320
be interfering with anything listening

518
00:20:42,550 --> 00:20:48,940
for management packets and and vice

519
00:20:44,320 --> 00:20:51,330
versa okay so the last thing is all of

520
00:20:48,940 --> 00:20:56,130
this is connected via PCIe to the host

521
00:20:51,330 --> 00:20:58,990
and what that does is the host NIC will

522
00:20:56,130 --> 00:21:00,310
look like a NIC to the host the host

523
00:20:58,990 --> 00:21:03,130
will see it as a high-performance

524
00:21:00,310 --> 00:21:04,960
Network card underneath the hood what

525
00:21:03,130 --> 00:21:07,240
we've done is created an isolated

526
00:21:04,960 --> 00:21:10,120
sandbox where we can run our security

527
00:21:07,240 --> 00:21:12,280
controls on behalf of the host the host

528
00:21:10,120 --> 00:21:14,229
doesn't even need to know about it and

529
00:21:12,280 --> 00:21:17,110
we have a place where even if the host

530
00:21:14,230 --> 00:21:18,580
is breached we've got this sandboxed

531
00:21:17,110 --> 00:21:20,439
environment where we can do things like

532
00:21:18,580 --> 00:21:23,340
take it off the network we can raise

533
00:21:20,440 --> 00:21:26,230
alerts we can modify ingress and egress

534
00:21:23,340 --> 00:21:27,310
traffic that will we can even run like a

535
00:21:26,230 --> 00:21:29,590
full nginx

536
00:21:27,310 --> 00:21:31,000
on this terminate all traffic and then

537
00:21:29,590 --> 00:21:33,840
put all of our controls right on the

538
00:21:31,000 --> 00:21:37,110
neck so let's go through a few of these

539
00:21:33,840 --> 00:21:39,490
this is how we create isolation so

540
00:21:37,110 --> 00:21:41,669
normally if you think of a PCIe card

541
00:21:39,490 --> 00:21:44,350
like a like a GPU or something like that

542
00:21:41,670 --> 00:21:46,900
it's actually not that isolated the host

543
00:21:44,350 --> 00:21:49,060
uses it for anything it wants to do and

544
00:21:46,900 --> 00:21:52,840
and this is this is pretty true for most

545
00:21:49,060 --> 00:21:55,020
PCIe cards because of how the PCIe is

546
00:21:52,840 --> 00:21:59,379
divided amongst the different resources

547
00:21:55,020 --> 00:22:01,840
what we've done here is kind of the the

548
00:21:59,380 --> 00:22:04,870
most basic thing is we said look we want

549
00:22:01,840 --> 00:22:07,389
the host to still be able to create VFS

550
00:22:04,870 --> 00:22:09,110
and PS on the device these are our

551
00:22:07,390 --> 00:22:10,820
physical functions and and virtual

552
00:22:09,110 --> 00:22:12,678
functions in this case there's always a

553
00:22:10,820 --> 00:22:15,169
physical function which you used to

554
00:22:12,679 --> 00:22:16,370
allocate stuff on the Nick and then you

555
00:22:15,170 --> 00:22:18,350
can create any number of virtual

556
00:22:16,370 --> 00:22:21,320
functions which means you carve up the

557
00:22:18,350 --> 00:22:23,178
PCIe bandwidth to use as you will we

558
00:22:21,320 --> 00:22:24,860
still want the host to do that but

559
00:22:23,179 --> 00:22:28,429
instead since we've got a little

560
00:22:24,860 --> 00:22:30,379
embedded computer here the the normal

561
00:22:28,429 --> 00:22:32,870
physical function is a fake physical

562
00:22:30,380 --> 00:22:34,880
function okay we create a virtual one on

563
00:22:32,870 --> 00:22:36,889
our side so we still want the host to be

564
00:22:34,880 --> 00:22:38,510
able to do its stuff but we don't want

565
00:22:36,890 --> 00:22:41,059
it to be able to do anything under the

566
00:22:38,510 --> 00:22:43,700
Sun so you can configure it how it wants

567
00:22:41,059 --> 00:22:44,990
and we've got a parent physical function

568
00:22:43,700 --> 00:22:46,790
which is connected directly to the

569
00:22:44,990 --> 00:22:49,130
embedded computer so we can override

570
00:22:46,790 --> 00:22:52,370
those commands if it wants to do

571
00:22:49,130 --> 00:22:54,830
something that's against policy for

572
00:22:52,370 --> 00:22:56,840
example like like create a VF to a

573
00:22:54,830 --> 00:22:58,939
container that we haven't authorized we

574
00:22:56,840 --> 00:23:00,860
can make sure it doesn't happen we can

575
00:22:58,940 --> 00:23:02,720
also make it so that the actual

576
00:23:00,860 --> 00:23:04,370
switching behavior is not controlled by

577
00:23:02,720 --> 00:23:06,590
the host it controls it's a little

578
00:23:04,370 --> 00:23:08,449
little subset but but the host isn't

579
00:23:06,590 --> 00:23:11,449
controlling any of that the the host is

580
00:23:08,450 --> 00:23:13,669
simply controlling its own portion and

581
00:23:11,450 --> 00:23:16,669
the the Nick itself is in charge of the

582
00:23:13,669 --> 00:23:18,049
main portion and I'll get into each of

583
00:23:16,669 --> 00:23:20,660
these components a bit more but the

584
00:23:18,049 --> 00:23:23,270
important part is we have to have an

585
00:23:20,660 --> 00:23:26,090
embedded switch to route packets we have

586
00:23:23,270 --> 00:23:28,160
to have some type of impetus compute to

587
00:23:26,090 --> 00:23:31,820
make sure this is in policy and to make

588
00:23:28,160 --> 00:23:34,970
sure this isn't misbehaving right so the

589
00:23:31,820 --> 00:23:37,820
second part of isolation what you

590
00:23:34,970 --> 00:23:41,559
normally do is something called SR io v

591
00:23:37,820 --> 00:23:44,360
that's basically a way to make sure that

592
00:23:41,559 --> 00:23:47,090
that you can run at near-native speed

593
00:23:44,360 --> 00:23:49,070
even when virtualized okay so if we take

594
00:23:47,090 --> 00:23:50,330
a look at each of the VMS what you would

595
00:23:49,070 --> 00:23:52,399
normally do is you would have a pair of

596
00:23:50,330 --> 00:23:54,320
virtualized NIC driver within the

597
00:23:52,400 --> 00:23:56,690
hypervisor and that's kind of emulating

598
00:23:54,320 --> 00:23:58,790
a network card and then the hypervisor

599
00:23:56,690 --> 00:24:00,980
would be in charge of taking the packet

600
00:23:58,790 --> 00:24:03,620
from the from the para virtualized NIC

601
00:24:00,980 --> 00:24:05,020
and giving it over to the actual NIC

602
00:24:03,620 --> 00:24:08,209
right and that's all done in software

603
00:24:05,020 --> 00:24:09,710
with sr io v we allow the the VMS to

604
00:24:08,210 --> 00:24:13,880
actually communicate with the hardware

605
00:24:09,710 --> 00:24:15,320
and so it bypasses all of this and gives

606
00:24:13,880 --> 00:24:18,620
them their own little their own little

607
00:24:15,320 --> 00:24:20,840
slice of the the PCIe bandwidth so what

608
00:24:18,620 --> 00:24:22,639
that does is it means that this traffic

609
00:24:20,840 --> 00:24:23,060
is actually physically isolated from

610
00:24:22,640 --> 00:24:25,160
this

611
00:24:23,060 --> 00:24:26,750
they're connecting directly to the PCIe

612
00:24:25,160 --> 00:24:28,100
and they're not commingling with each

613
00:24:26,750 --> 00:24:30,860
other and they're not interfering within

614
00:24:28,100 --> 00:24:35,090
the hypervisor so that's isolation step

615
00:24:30,860 --> 00:24:37,669
number two so let's take a look and kind

616
00:24:35,090 --> 00:24:38,449
of piece out exactly how how these are

617
00:24:37,670 --> 00:24:42,350
accomplished here

618
00:24:38,450 --> 00:24:46,040
so across the Goldfinger's on the actual

619
00:24:42,350 --> 00:24:49,189
card we've got we've got virtual

620
00:24:46,040 --> 00:24:53,090
functions that are kind of cohabitating

621
00:24:49,190 --> 00:24:55,520
the the physical hardware resources with

622
00:24:53,090 --> 00:25:00,490
SR EOB there's no hypervisor involvement

623
00:24:55,520 --> 00:25:02,360
with with or there's no hypervisor

624
00:25:00,490 --> 00:25:05,420
interaction with any of the packets that

625
00:25:02,360 --> 00:25:08,110
are going from the VM to the NIC we've

626
00:25:05,420 --> 00:25:12,350
got basically bare metal performance

627
00:25:08,110 --> 00:25:14,750
we've got this fake sort of physical

628
00:25:12,350 --> 00:25:16,219
function that the host sees it still

629
00:25:14,750 --> 00:25:18,050
thinks it's in control of the NIC but

630
00:25:16,220 --> 00:25:20,030
but actually the embedded compute is in

631
00:25:18,050 --> 00:25:23,810
charge of the NIC and then we've got

632
00:25:20,030 --> 00:25:25,970
this sort of override behavior in the in

633
00:25:23,810 --> 00:25:28,700
the compute and so here's how we would

634
00:25:25,970 --> 00:25:32,090
normally program the embedded switch or

635
00:25:28,700 --> 00:25:35,000
really any any network type of packet

636
00:25:32,090 --> 00:25:37,100
processing pipeline I'm I don't want

637
00:25:35,000 --> 00:25:41,480
spend too much time on this but but the

638
00:25:37,100 --> 00:25:44,379
idea is if you can imagine cobbling

639
00:25:41,480 --> 00:25:46,730
together any of these triggers like say

640
00:25:44,380 --> 00:25:49,520
could be on a five tuple or a

641
00:25:46,730 --> 00:25:52,400
destination MAC or it could even be a

642
00:25:49,520 --> 00:25:54,500
session or something like that I'm gonna

643
00:25:52,400 --> 00:25:55,880
match on that I want to take some action

644
00:25:54,500 --> 00:25:57,620
the action could be manipulate the

645
00:25:55,880 --> 00:26:00,530
packet it could be drop the packet it

646
00:25:57,620 --> 00:26:01,699
could be simply move it to you know VM

647
00:26:00,530 --> 00:26:03,830
number one because that's where it

648
00:26:01,700 --> 00:26:07,610
should be destined and then it's got

649
00:26:03,830 --> 00:26:10,040
some logging or cataloging capability

650
00:26:07,610 --> 00:26:11,540
like incrementing a type of counter and

651
00:26:10,040 --> 00:26:14,570
then a next pointer so think of it like

652
00:26:11,540 --> 00:26:17,690
a you know like a tree of actions you

653
00:26:14,570 --> 00:26:19,580
can take and there's a deterministic set

654
00:26:17,690 --> 00:26:20,900
of actions for every incoming packet

655
00:26:19,580 --> 00:26:25,370
that's that's the way switches normally

656
00:26:20,900 --> 00:26:26,990
work right so the way this works in a

657
00:26:25,370 --> 00:26:29,239
smart NIC and again I'm going to use

658
00:26:26,990 --> 00:26:32,540
open V switch as sort of the standard

659
00:26:29,240 --> 00:26:35,540
here if you're familiar with the the

660
00:26:32,540 --> 00:26:36,590
zaqqum ol policy model it's maybe a bit

661
00:26:35,540 --> 00:26:39,950
old-school but

662
00:26:36,590 --> 00:26:42,678
the the principle still applies what

663
00:26:39,950 --> 00:26:44,360
we've effectively done is turned this

664
00:26:42,679 --> 00:26:49,279
portion of the smart neck into the

665
00:26:44,360 --> 00:26:52,879
enforcement point for that policy we've

666
00:26:49,279 --> 00:26:54,950
turned the embedded compute into an

667
00:26:52,879 --> 00:26:58,039
additional enforcement policy so we can

668
00:26:54,950 --> 00:27:00,799
enforce policy and software we can also

669
00:26:58,039 --> 00:27:02,929
make decisions about policy again on the

670
00:27:00,799 --> 00:27:04,158
software embedded in the neck and then

671
00:27:02,929 --> 00:27:07,940
we can create any number of additional

672
00:27:04,159 --> 00:27:10,159
enforcement some things like I'll post

673
00:27:07,940 --> 00:27:12,999
for one I'll show you that in a bit we

674
00:27:10,159 --> 00:27:15,799
can also do things like you know is is

675
00:27:12,999 --> 00:27:17,539
1vf using too much bandwidth is it

676
00:27:15,799 --> 00:27:20,350
connecting or accepting connections from

677
00:27:17,539 --> 00:27:23,230
things that shouldn't that kind of thing

678
00:27:20,350 --> 00:27:25,879
okay so the way this normally works is

679
00:27:23,230 --> 00:27:29,299
if you're familiar with V switch this

680
00:27:25,879 --> 00:27:31,879
will be a repeat if not what will happen

681
00:27:29,299 --> 00:27:34,129
is in order for this to perform at at

682
00:27:31,879 --> 00:27:36,320
native speeds we'll have a packet that

683
00:27:34,129 --> 00:27:38,570
comes in it'll miss in the embedded

684
00:27:36,320 --> 00:27:40,970
switch it'll go all the way to the

685
00:27:38,570 --> 00:27:42,619
embedded software where we'll look it up

686
00:27:40,970 --> 00:27:44,840
in the policy and we'll say yeah this

687
00:27:42,619 --> 00:27:46,549
this packet is within policy or or no

688
00:27:44,840 --> 00:27:49,668
this this packet violates a security

689
00:27:46,549 --> 00:27:51,379
policy this will make that decision and

690
00:27:49,669 --> 00:27:54,499
then program it into the embedded switch

691
00:27:51,379 --> 00:27:56,539
so that subsequent packets are at

692
00:27:54,499 --> 00:27:58,490
near-native speed they're completely

693
00:27:56,539 --> 00:28:00,470
offloaded and again that's just to solve

694
00:27:58,490 --> 00:28:02,749
the the compute problem it's not

695
00:28:00,470 --> 00:28:06,039
actually addressing the the attack

696
00:28:02,749 --> 00:28:08,899
surface problem so let's look at that

697
00:28:06,039 --> 00:28:12,799
this is this is a made-up policy that I

698
00:28:08,899 --> 00:28:15,229
created so I'm gonna I'm gonna say here

699
00:28:12,799 --> 00:28:18,559
that there's two hosts this one and this

700
00:28:15,230 --> 00:28:19,970
one it's not always done this way but

701
00:28:18,559 --> 00:28:24,230
often you'll find that containers are

702
00:28:19,970 --> 00:28:25,759
deployed inside VMs the it is becoming a

703
00:28:24,230 --> 00:28:27,139
little bit more common to do bare metal

704
00:28:25,759 --> 00:28:29,240
containers but not really most of the

705
00:28:27,139 --> 00:28:31,158
time you'll still find containers inside

706
00:28:29,240 --> 00:28:33,080
a virtualized environment inside a host

707
00:28:31,159 --> 00:28:34,519
which is a little funky but it's just

708
00:28:33,080 --> 00:28:37,070
sort of the trend

709
00:28:34,519 --> 00:28:38,929
so I've partitioned these into what I'm

710
00:28:37,070 --> 00:28:40,220
going to call different tenants think of

711
00:28:38,929 --> 00:28:42,860
each color is a different tenant and

712
00:28:40,220 --> 00:28:44,830
this would be if you're not having some

713
00:28:42,860 --> 00:28:47,330
kind of commingled multi-tenancy

714
00:28:44,830 --> 00:28:49,309
software solution this might be like a

715
00:28:47,330 --> 00:28:50,720
container or set of containers per

716
00:28:49,309 --> 00:28:54,320
tenant

717
00:28:50,720 --> 00:28:57,050
I've connected them through some kind of

718
00:28:54,320 --> 00:28:58,460
combination of SR iov and VFS that are

719
00:28:57,050 --> 00:29:01,250
allocated on the gold fingers so that

720
00:28:58,460 --> 00:29:04,160
each of these hosts have networking

721
00:29:01,250 --> 00:29:07,100
bandwidth from the PCIe and let's just

722
00:29:04,160 --> 00:29:08,780
say that I want I want a policy up there

723
00:29:07,100 --> 00:29:13,639
I want to say ten and one database one

724
00:29:08,780 --> 00:29:15,980
can only talk to HR processes okay now

725
00:29:13,640 --> 00:29:17,810
this is completely made-up policy but

726
00:29:15,980 --> 00:29:19,760
but this is one that is typically

727
00:29:17,810 --> 00:29:20,960
implemented around firewalls or

728
00:29:19,760 --> 00:29:23,540
microsegmentation

729
00:29:20,960 --> 00:29:27,140
or least privileged type network access

730
00:29:23,540 --> 00:29:30,260
right so let's say that this application

731
00:29:27,140 --> 00:29:32,540
needs to make a database request the way

732
00:29:30,260 --> 00:29:34,250
this is normally done after it resolves

733
00:29:32,540 --> 00:29:37,430
the address and all of that it'll it'll

734
00:29:34,250 --> 00:29:39,050
initiate a networking handshake and it

735
00:29:37,430 --> 00:29:40,700
will find its way across the network

736
00:29:39,050 --> 00:29:43,129
spanning through the blue path which is

737
00:29:40,700 --> 00:29:47,270
the data path get routed back here and

738
00:29:43,130 --> 00:29:49,520
then into database one but but what if I

739
00:29:47,270 --> 00:29:52,040
want to make that path a little bit more

740
00:29:49,520 --> 00:29:53,690
robust and say it can only talk to it I

741
00:29:52,040 --> 00:29:56,930
can do that through a few things I can

742
00:29:53,690 --> 00:29:59,660
create access control lists and put them

743
00:29:56,930 --> 00:30:02,180
into a firewall I can do things like the

744
00:29:59,660 --> 00:30:04,730
above and say okay I want I want a

745
00:30:02,180 --> 00:30:06,500
custom encrypted tunnel between this

746
00:30:04,730 --> 00:30:08,630
tenant and this tenant so that even if

747
00:30:06,500 --> 00:30:10,910
there's a rogue tenant and eclipse on in

748
00:30:08,630 --> 00:30:13,460
some way or starts intercepting traffic

749
00:30:10,910 --> 00:30:15,590
off the hypervisor that it still can't

750
00:30:13,460 --> 00:30:19,070
do anything with it this is a custom per

751
00:30:15,590 --> 00:30:21,260
session encrypted tunnel so how would we

752
00:30:19,070 --> 00:30:23,600
actually implement this first of all I I

753
00:30:21,260 --> 00:30:25,520
dig this type of use case because it's

754
00:30:23,600 --> 00:30:27,020
it's sort of typical of a multi-tenant

755
00:30:25,520 --> 00:30:29,330
environment most of the multi tenant

756
00:30:27,020 --> 00:30:31,610
breaches you see affect all customers

757
00:30:29,330 --> 00:30:34,340
right they they typically don't have any

758
00:30:31,610 --> 00:30:36,469
kind of per tenant or per application

759
00:30:34,340 --> 00:30:38,870
isolation but but I'm assuming that

760
00:30:36,470 --> 00:30:40,490
that's the policy they want let's let's

761
00:30:38,870 --> 00:30:42,199
see how we can possibly implement that

762
00:30:40,490 --> 00:30:46,640
so this would this would be the

763
00:30:42,200 --> 00:30:48,350
checklist right so the first thing I'd

764
00:30:46,640 --> 00:30:50,060
want to do is authenticate that it's a

765
00:30:48,350 --> 00:30:52,730
legitimate policy right that's usually

766
00:30:50,060 --> 00:30:55,070
done on the management layer then I'll

767
00:30:52,730 --> 00:30:57,080
program some set of flow tables it could

768
00:30:55,070 --> 00:30:58,939
be in the Nick or it could be in in the

769
00:30:57,080 --> 00:31:01,429
agent or something but what it'll

770
00:30:58,940 --> 00:31:03,590
typically do is say that a certain

771
00:31:01,430 --> 00:31:05,990
packet from a certain destination

772
00:31:03,590 --> 00:31:08,389
going towards a certain host and that'll

773
00:31:05,990 --> 00:31:11,419
that'll have a flow associated with it

774
00:31:08,390 --> 00:31:13,250
right I'm gonna have to exchange some

775
00:31:11,419 --> 00:31:14,480
information between these two because

776
00:31:13,250 --> 00:31:17,240
it's gonna have to be a night right

777
00:31:14,480 --> 00:31:18,770
they'll have to be some kind of key

778
00:31:17,240 --> 00:31:21,650
exchange before we can create that

779
00:31:18,770 --> 00:31:24,529
tunnel then I'm gonna have to figure out

780
00:31:21,650 --> 00:31:27,559
okay the the policy says I've got ten

781
00:31:24,529 --> 00:31:29,630
one database one and tenant one HR 1

782
00:31:27,559 --> 00:31:30,950
where are those actually located so I'll

783
00:31:29,630 --> 00:31:33,080
have to figure out on which host they're

784
00:31:30,950 --> 00:31:35,150
running and then which NIC is associated

785
00:31:33,080 --> 00:31:39,139
with those hosts create the tunnels and

786
00:31:35,150 --> 00:31:41,779
then track it this is this is a bit

787
00:31:39,140 --> 00:31:43,370
complicated but but this is sort of the

788
00:31:41,779 --> 00:31:45,289
the checklist we'll go over how to

789
00:31:43,370 --> 00:31:47,389
actually implement it in a second

790
00:31:45,289 --> 00:31:52,760
this is these are the steps that need to

791
00:31:47,390 --> 00:31:54,890
be taken okay the the problem is these

792
00:31:52,760 --> 00:31:58,070
need to be programmable enough to accept

793
00:31:54,890 --> 00:32:00,919
policy like that so in order to do that

794
00:31:58,070 --> 00:32:03,379
I'm gonna say that that smart NICs have

795
00:32:00,919 --> 00:32:05,059
a number of options and and if you look

796
00:32:03,380 --> 00:32:06,440
at at smart Nick's on the market right

797
00:32:05,059 --> 00:32:10,779
now these are these are the typical

798
00:32:06,440 --> 00:32:13,190
options okay so we'll have things like

799
00:32:10,779 --> 00:32:15,529
the exact same software you would have

800
00:32:13,190 --> 00:32:17,090
with a virtualized network function but

801
00:32:15,529 --> 00:32:18,799
shrunk down and running on the neck

802
00:32:17,090 --> 00:32:20,689
that's option number one it may be kind

803
00:32:18,799 --> 00:32:23,600
of crappy but at least it's an option

804
00:32:20,690 --> 00:32:26,120
the next one is manipulating traffic

805
00:32:23,600 --> 00:32:28,820
within OVS so this is actually a pretty

806
00:32:26,120 --> 00:32:30,559
easy one I'll show you an example if

807
00:32:28,820 --> 00:32:32,570
you've got hurt you you has anyone heard

808
00:32:30,559 --> 00:32:36,470
of DP DK the data plane development

809
00:32:32,570 --> 00:32:39,408
toolkit it's developed by Intel it's and

810
00:32:36,470 --> 00:32:41,630
now it's open source it's developed by a

811
00:32:39,409 --> 00:32:43,309
huge community of networking companies

812
00:32:41,630 --> 00:32:45,260
and what they're what they're

813
00:32:43,309 --> 00:32:47,418
essentially doing is giving you raw

814
00:32:45,260 --> 00:32:49,039
access to all the networking interfaces

815
00:32:47,419 --> 00:32:51,049
and they provide a nice library for

816
00:32:49,039 --> 00:32:52,760
doing that so I can I can grab a raw

817
00:32:51,049 --> 00:32:53,059
packet from interface one do something

818
00:32:52,760 --> 00:32:55,600
with it

819
00:32:53,059 --> 00:32:59,779
put it on to raw interface number two

820
00:32:55,600 --> 00:33:01,279
the next is to take a pre-built sort of

821
00:32:59,779 --> 00:33:02,899
like a security appliance like an engine

822
00:33:01,279 --> 00:33:04,399
X or an H a proxy or something and

823
00:33:02,899 --> 00:33:07,070
actually run it directly on the embedded

824
00:33:04,399 --> 00:33:10,219
compute within the smart NIC I can also

825
00:33:07,070 --> 00:33:12,379
just simply do it in Linux right I can I

826
00:33:10,220 --> 00:33:15,380
can utilize netfilter or the transform

827
00:33:12,380 --> 00:33:17,210
module to create any of those IPSec

828
00:33:15,380 --> 00:33:19,010
tunnels I just talked about and

829
00:33:17,210 --> 00:33:22,250
do it right within the the networking

830
00:33:19,010 --> 00:33:23,450
kernel and then lastly just make it up

831
00:33:22,250 --> 00:33:25,159
it could be anything at all because a

832
00:33:23,450 --> 00:33:26,720
smart Nick is a computer it's got an

833
00:33:25,159 --> 00:33:28,730
embedded Linux it's got embedded memory

834
00:33:26,720 --> 00:33:30,860
it's got access to all the same devices

835
00:33:28,730 --> 00:33:34,070
and and resources that the host does

836
00:33:30,860 --> 00:33:35,539
it's just embedded and isolated so let's

837
00:33:34,070 --> 00:33:37,939
take a look at it how to actually do

838
00:33:35,539 --> 00:33:41,419
this let's say I wanted to do that the

839
00:33:37,940 --> 00:33:45,620
OVS model okay with an open V switch if

840
00:33:41,419 --> 00:33:48,919
I if I create a single switch with an o

841
00:33:45,620 --> 00:33:51,979
vs and let's say I give it here I'm

842
00:33:48,919 --> 00:33:54,080
using en P as as the various types of

843
00:33:51,980 --> 00:33:57,320
data ports I'll add those to the V

844
00:33:54,080 --> 00:33:58,939
switch representers zero here is is a

845
00:33:57,320 --> 00:34:01,460
net dev representor that would represent

846
00:33:58,940 --> 00:34:04,159
the link between the NIC and the host

847
00:34:01,460 --> 00:34:07,010
I'll add that to the switch as well and

848
00:34:04,159 --> 00:34:10,250
then what we have is a software model

849
00:34:07,010 --> 00:34:12,859
for how packets would flow from the wire

850
00:34:10,250 --> 00:34:16,010
to the NIC to the host so let's just

851
00:34:12,859 --> 00:34:17,929
start adding some rules so so this is

852
00:34:16,010 --> 00:34:20,859
just a quick set of rules to do

853
00:34:17,929 --> 00:34:24,290
connection tracking within open V switch

854
00:34:20,859 --> 00:34:27,500
so we'll do things like say you know ARP

855
00:34:24,290 --> 00:34:30,739
traffic is is okay down below DNS

856
00:34:27,500 --> 00:34:32,690
traffic that's that's also ok if we get

857
00:34:30,739 --> 00:34:34,668
anything else and it's it's an IP packet

858
00:34:32,690 --> 00:34:37,730
doesn't matter what the layer above it

859
00:34:34,668 --> 00:34:40,489
is but if it's an IP packet and it's not

860
00:34:37,730 --> 00:34:43,310
being tracked the the - Trk let's add to

861
00:34:40,489 --> 00:34:47,290
the connection tracking table and then

862
00:34:43,310 --> 00:34:51,770
if we've got a established in tracked

863
00:34:47,290 --> 00:34:54,649
packet let that one through this is this

864
00:34:51,770 --> 00:34:56,480
is a very typical type firewall policy

865
00:34:54,649 --> 00:34:59,180
it's basically just saying everything is

866
00:34:56,480 --> 00:35:01,099
good and I can I can restrict it more

867
00:34:59,180 --> 00:35:03,830
after that so what would it look like if

868
00:35:01,099 --> 00:35:05,960
we tried to restrict it a little bit so

869
00:35:03,830 --> 00:35:10,580
here we want to say let's say we want to

870
00:35:05,960 --> 00:35:12,680
allow inbound SSH right so if we've got

871
00:35:10,580 --> 00:35:15,560
a packet coming from the wire and it's a

872
00:35:12,680 --> 00:35:17,000
TCP packet and the destination is 22 we

873
00:35:15,560 --> 00:35:18,770
can add it to the connection tracking

874
00:35:17,000 --> 00:35:21,530
table and we know the downstream the

875
00:35:18,770 --> 00:35:22,970
switch will allow it into the host if we

876
00:35:21,530 --> 00:35:24,920
wanted to do the same for outbound

877
00:35:22,970 --> 00:35:27,618
traffic these are some example rules but

878
00:35:24,920 --> 00:35:29,060
the idea here is this is all implemented

879
00:35:27,619 --> 00:35:31,640
and enforced on the net

880
00:35:29,060 --> 00:35:33,500
the host has no idea this is going on so

881
00:35:31,640 --> 00:35:37,098
normally what would happen is the host

882
00:35:33,500 --> 00:35:38,599
has its own set of IP tables or or

883
00:35:37,099 --> 00:35:42,260
firewall on board it might be a

884
00:35:38,599 --> 00:35:44,240
virtualized firewall if if the host is

885
00:35:42,260 --> 00:35:46,099
ever compromised the first thing that's

886
00:35:44,240 --> 00:35:49,189
going to be manipulated is the way to

887
00:35:46,099 --> 00:35:51,109
get traffic into the host okay so what

888
00:35:49,190 --> 00:35:52,940
we've done is we've taken the first line

889
00:35:51,109 --> 00:35:54,440
of defense which is usually a security

890
00:35:52,940 --> 00:35:56,869
group or a firewall or something like

891
00:35:54,440 --> 00:35:58,550
that and we've offloaded it onto the NIC

892
00:35:56,869 --> 00:36:01,310
so that it's no longer on the same trust

893
00:35:58,550 --> 00:36:04,280
domain as the host and that way what

894
00:36:01,310 --> 00:36:06,170
we've done is is essentially said the

895
00:36:04,280 --> 00:36:08,780
host can have its own more finer grained

896
00:36:06,170 --> 00:36:12,500
policy if it wants but we've still got

897
00:36:08,780 --> 00:36:14,660
an isolated separately managed way to to

898
00:36:12,500 --> 00:36:18,859
control network ingress and egress okay

899
00:36:14,660 --> 00:36:20,299
so that's sort of one example but we can

900
00:36:18,859 --> 00:36:22,970
get a lot more complicated than that we

901
00:36:20,300 --> 00:36:25,069
can actually embed basically anything so

902
00:36:22,970 --> 00:36:26,779
what I'm gonna say is if we've got this

903
00:36:25,069 --> 00:36:29,029
embedded switch and we've got some kind

904
00:36:26,780 --> 00:36:32,990
of compute we can hang anything off of

905
00:36:29,030 --> 00:36:36,500
it right so let's say I what I wanted to

906
00:36:32,990 --> 00:36:38,629
do is have a man-in-the-middle running

907
00:36:36,500 --> 00:36:41,210
in the NIC to intercept traffic and

908
00:36:38,630 --> 00:36:44,089
shape it it could be for something like

909
00:36:41,210 --> 00:36:46,310
you know metering my tenants or services

910
00:36:44,089 --> 00:36:48,049
or it could be enforcing some networking

911
00:36:46,310 --> 00:36:50,240
policy what I can I can actually

912
00:36:48,050 --> 00:36:52,730
approach it the same way all I need to

913
00:36:50,240 --> 00:36:56,240
do is create a vet pair hang it off the

914
00:36:52,730 --> 00:36:58,970
the embedded switch attach one end of

915
00:36:56,240 --> 00:37:00,680
the Veth pair to the application that I

916
00:36:58,970 --> 00:37:03,020
want to have added into the switch the

917
00:37:00,680 --> 00:37:04,310
other end goes into OBS and I can create

918
00:37:03,020 --> 00:37:06,230
the same type of rules I can say

919
00:37:04,310 --> 00:37:09,049
anything coming from the wire needs to

920
00:37:06,230 --> 00:37:10,819
go to the vet tail for that isolated app

921
00:37:09,050 --> 00:37:13,250
and then the app can communicate with

922
00:37:10,819 --> 00:37:15,349
OVS and then that goes to the host so I

923
00:37:13,250 --> 00:37:20,869
can I can interject anything I want to

924
00:37:15,349 --> 00:37:23,630
do so you would see if I wanted to do

925
00:37:20,869 --> 00:37:25,339
this in opiate in OVS all I did was I

926
00:37:23,630 --> 00:37:26,930
created a best pair and then added it

927
00:37:25,339 --> 00:37:28,670
into the switch and I can dangle

928
00:37:26,930 --> 00:37:31,310
whatever application I want off of that

929
00:37:28,670 --> 00:37:33,589
through a tap interface or or literally

930
00:37:31,310 --> 00:37:36,020
anything so let's go back to the policy

931
00:37:33,589 --> 00:37:40,279
that we made up and see how we might

932
00:37:36,020 --> 00:37:42,550
implement this so assume we want to do

933
00:37:40,280 --> 00:37:44,800
it in OBS

934
00:37:42,550 --> 00:37:48,600
we take the same steps that we followed

935
00:37:44,800 --> 00:37:51,400
before we would create an OVS instance

936
00:37:48,600 --> 00:37:54,360
configure it as as a switch within the

937
00:37:51,400 --> 00:37:57,880
embedded compute inside the smart NIC

938
00:37:54,360 --> 00:38:01,930
will create some kind of death pair and

939
00:37:57,880 --> 00:38:03,720
connect it to the switch the the Veth

940
00:38:01,930 --> 00:38:06,940
tail would go into the Linux kernel

941
00:38:03,720 --> 00:38:09,160
we're gonna modify the the Linux kernel

942
00:38:06,940 --> 00:38:10,750
to do what you would normally do in the

943
00:38:09,160 --> 00:38:12,190
transform module which is create a

944
00:38:10,750 --> 00:38:14,170
security Association it'll have a

945
00:38:12,190 --> 00:38:17,080
session key which specifies the type of

946
00:38:14,170 --> 00:38:18,100
encryption to apply we bind that against

947
00:38:17,080 --> 00:38:20,009
the other part of the security

948
00:38:18,100 --> 00:38:22,480
Association which is the match criteria

949
00:38:20,010 --> 00:38:24,550
and then as long as we forward packets

950
00:38:22,480 --> 00:38:26,380
into the Linux kernel if it matches that

951
00:38:24,550 --> 00:38:28,570
criteria it'll get encrypted the way we

952
00:38:26,380 --> 00:38:30,730
want it to and then on the opposite side

953
00:38:28,570 --> 00:38:32,590
of the OVS switch we can dump it out

954
00:38:30,730 --> 00:38:35,200
onto the wire so the host will never

955
00:38:32,590 --> 00:38:36,220
know it's happening this HR app will

956
00:38:35,200 --> 00:38:38,859
want to communicate with the database

957
00:38:36,220 --> 00:38:40,839
and we'll let it but inside the smart

958
00:38:38,860 --> 00:38:42,870
Nick will be intercepting it wrapping it

959
00:38:40,840 --> 00:38:45,730
in a custom encryption protocol and

960
00:38:42,870 --> 00:38:48,520
sending it off under the wire so this is

961
00:38:45,730 --> 00:38:50,770
how we would take a very straightforward

962
00:38:48,520 --> 00:38:53,560
policy like like these two can only

963
00:38:50,770 --> 00:38:56,200
communicate with each other and we would

964
00:38:53,560 --> 00:38:58,779
remove it from the host so that the host

965
00:38:56,200 --> 00:39:00,819
has no idea that it's going on we would

966
00:38:58,780 --> 00:39:02,830
put it in an isolated environment where

967
00:39:00,820 --> 00:39:04,720
the only way to modify it is to go in

968
00:39:02,830 --> 00:39:08,319
through an out-of-band air-gapped port

969
00:39:04,720 --> 00:39:10,089
okay and then it would act on behalf of

970
00:39:08,320 --> 00:39:12,040
the host it's still connected to it so

971
00:39:10,090 --> 00:39:13,360
it's still very close to the data so

972
00:39:12,040 --> 00:39:14,830
anything coming out of the host if you

973
00:39:13,360 --> 00:39:16,870
clicked into the wire it would look like

974
00:39:14,830 --> 00:39:19,779
normal host traffic except it's totally

975
00:39:16,870 --> 00:39:23,500
encrypted right but it's it's actually

976
00:39:19,780 --> 00:39:26,440
not quite perfect so what we're doing

977
00:39:23,500 --> 00:39:29,020
here is we're saying okay we want each

978
00:39:26,440 --> 00:39:31,540
our apps to talk to two databases and

979
00:39:29,020 --> 00:39:34,390
and we're doing that by identifying the

980
00:39:31,540 --> 00:39:36,610
networking criteria for this hrl like we

981
00:39:34,390 --> 00:39:38,160
might know its IP address for example

982
00:39:36,610 --> 00:39:40,720
we'll say anything from this IP address

983
00:39:38,160 --> 00:39:44,200
to this IP address needs to be encrypted

984
00:39:40,720 --> 00:39:49,529
by you know criteria X but that's this a

985
00:39:44,200 --> 00:39:53,390
bit weak right so it would be much more

986
00:39:49,530 --> 00:39:55,970
robust if we actually knew

987
00:39:53,390 --> 00:39:58,519
that it was the real application and not

988
00:39:55,970 --> 00:39:58,759
just a five tuple that's associated with

989
00:39:58,519 --> 00:40:01,279
that

990
00:39:58,759 --> 00:40:04,819
HRM and it would be great if we actually

991
00:40:01,279 --> 00:40:07,519
knew the runtime criteria of this so we

992
00:40:04,819 --> 00:40:10,099
could say something like an HR app with

993
00:40:07,519 --> 00:40:11,988
a valid signature can only talk to

994
00:40:10,099 --> 00:40:14,239
database one that would be a very

995
00:40:11,989 --> 00:40:18,079
powerful statement but we can't do that

996
00:40:14,239 --> 00:40:20,180
with with this alone so so what you can

997
00:40:18,079 --> 00:40:23,269
actually do with where the smart Nick is

998
00:40:20,180 --> 00:40:25,720
is make this a little bit better so I'm

999
00:40:23,269 --> 00:40:27,769
gonna I'm gonna pose a few questions

1000
00:40:25,720 --> 00:40:32,930
what if we had some more information

1001
00:40:27,769 --> 00:40:35,238
about about the host for example since

1002
00:40:32,930 --> 00:40:37,399
the smart Nick is a PCIe device it can

1003
00:40:35,239 --> 00:40:39,769
access all of host memory right and

1004
00:40:37,400 --> 00:40:41,630
literally all of it I mean all of it and

1005
00:40:39,769 --> 00:40:44,149
and this might bring some alarm bells

1006
00:40:41,630 --> 00:40:46,009
but hang on for a second you know and

1007
00:40:44,150 --> 00:40:49,910
I'll show you I'll show you why that's

1008
00:40:46,009 --> 00:40:52,579
okay but but the idea is PCIe devices

1009
00:40:49,910 --> 00:40:54,680
can already access either selected

1010
00:40:52,579 --> 00:40:56,749
memory based on configuration all memory

1011
00:40:54,680 --> 00:40:59,480
based on configuration and it can access

1012
00:40:56,749 --> 00:41:01,788
it very very quickly right it can access

1013
00:40:59,480 --> 00:41:04,910
it for four gen three it's about a

1014
00:41:01,789 --> 00:41:07,400
gigabit per second per Lane and there

1015
00:41:04,910 --> 00:41:10,249
might be up to say 16 lanes on the PCIe

1016
00:41:07,400 --> 00:41:12,200
bus for a given device so so here we're

1017
00:41:10,249 --> 00:41:14,598
talking about 16 gigabit a second

1018
00:41:12,200 --> 00:41:16,009
reading host memory just looking for

1019
00:41:14,599 --> 00:41:21,920
stuff ok so let's assume that we have

1020
00:41:16,009 --> 00:41:24,170
that next let's assume if we have access

1021
00:41:21,920 --> 00:41:26,539
to that memory we're gonna need an

1022
00:41:24,170 --> 00:41:28,160
isolated space in which to check it out

1023
00:41:26,539 --> 00:41:30,559
to make sure that certain applications

1024
00:41:28,160 --> 00:41:32,509
are running or not running what criteria

1025
00:41:30,559 --> 00:41:34,160
they're running against like for

1026
00:41:32,509 --> 00:41:36,380
instance did they start in a trusted way

1027
00:41:34,160 --> 00:41:36,890
are they authenticated to the network in

1028
00:41:36,380 --> 00:41:39,499
a good way

1029
00:41:36,890 --> 00:41:40,730
do they match a certain signature right

1030
00:41:39,499 --> 00:41:41,538
so these are all things we want to ask

1031
00:41:40,730 --> 00:41:45,039
about that

1032
00:41:41,539 --> 00:41:45,039
HR app before I can talk to the database

1033
00:41:46,180 --> 00:41:52,848
we've also got a lot of accelerators on

1034
00:41:49,220 --> 00:41:57,288
smart Nix so these are specifically for

1035
00:41:52,849 --> 00:41:59,539
for remote DMA so we can write on a

1036
00:41:57,289 --> 00:42:03,230
typical smart NIC like like the one that

1037
00:41:59,539 --> 00:42:05,239
Mellanox makes we can we can take memory

1038
00:42:03,230 --> 00:42:06,770
from one host and move it to another

1039
00:42:05,239 --> 00:42:09,110
host

1040
00:42:06,770 --> 00:42:11,210
why're speed so if you're on a 25

1041
00:42:09,110 --> 00:42:14,000
gigabit network will be moving memory

1042
00:42:11,210 --> 00:42:15,590
around at 25 gigabit on a local

1043
00:42:14,000 --> 00:42:18,020
environment like a smart NIC where we

1044
00:42:15,590 --> 00:42:20,420
have two hosts dangling off the PCIe

1045
00:42:18,020 --> 00:42:22,670
we've got the real hosts and then the

1046
00:42:20,420 --> 00:42:25,400
embedded host right those are those are

1047
00:42:22,670 --> 00:42:26,869
operating again at wire speed and

1048
00:42:25,400 --> 00:42:29,960
they're able to transfer memory back and

1049
00:42:26,869 --> 00:42:31,610
forth so we've got a very high speed and

1050
00:42:29,960 --> 00:42:40,310
efficient way to move memory around

1051
00:42:31,610 --> 00:42:46,160
right okay so if we put this all

1052
00:42:40,310 --> 00:42:49,580
together let's draw another picture so

1053
00:42:46,160 --> 00:42:51,560
this is this is the typical way that the

1054
00:42:49,580 --> 00:42:55,819
systems will be connected to the memory

1055
00:42:51,560 --> 00:42:58,670
subsystem if we assume here that we've

1056
00:42:55,820 --> 00:43:01,070
got some some hosts I'll I'll label the

1057
00:42:58,670 --> 00:43:03,020
processor separately here if we follow

1058
00:43:01,070 --> 00:43:05,680
the right red arrow that would be how it

1059
00:43:03,020 --> 00:43:10,369
communicates with external memory DRAM

1060
00:43:05,680 --> 00:43:12,618
right if we've got the left red arrow

1061
00:43:10,369 --> 00:43:16,790
that's how it communicates over the

1062
00:43:12,619 --> 00:43:19,010
network okay and so it'll it'll follow a

1063
00:43:16,790 --> 00:43:25,130
path over the PCIe and out through the

1064
00:43:19,010 --> 00:43:26,869
NIC okay so the right or the left red

1065
00:43:25,130 --> 00:43:28,369
arrow is already taken care of right we

1066
00:43:26,869 --> 00:43:30,680
showed that we can take a networking

1067
00:43:28,369 --> 00:43:33,020
function put it on the embedded compute

1068
00:43:30,680 --> 00:43:34,940
and enforce some networking policy the

1069
00:43:33,020 --> 00:43:39,259
the right red arrow is a little bit

1070
00:43:34,940 --> 00:43:41,960
funky but we're a PCIe device and we're

1071
00:43:39,260 --> 00:43:42,910
specifically designed to access memory

1072
00:43:41,960 --> 00:43:45,530
out-of-band

1073
00:43:42,910 --> 00:43:50,990
so if we follow the green arrow you can

1074
00:43:45,530 --> 00:43:53,390
see that PCIe devices can access let's

1075
00:43:50,990 --> 00:43:56,299
let's just say read memory they can read

1076
00:43:53,390 --> 00:43:58,879
memory in an isolated and out-of-band

1077
00:43:56,300 --> 00:44:03,230
manner as long as there is available

1078
00:43:58,880 --> 00:44:05,690
PCIe bandwidth so without the host even

1079
00:44:03,230 --> 00:44:07,750
knowing we can look at memory and make

1080
00:44:05,690 --> 00:44:10,190
sure it's legitimate more or less and

1081
00:44:07,750 --> 00:44:12,560
more importantly there's no performance

1082
00:44:10,190 --> 00:44:14,480
hit these two systems are designed to be

1083
00:44:12,560 --> 00:44:18,350
running in parallel they're designed to

1084
00:44:14,480 --> 00:44:19,550
be not synchronized and they're they're

1085
00:44:18,350 --> 00:44:20,420
both designed to be incredibly high

1086
00:44:19,550 --> 00:44:23,240
performance

1087
00:44:20,420 --> 00:44:24,769
so let's let's look at this so we've

1088
00:44:23,240 --> 00:44:27,348
we've got the first part we've got all

1089
00:44:24,769 --> 00:44:29,058
of our analysis running in an isolated

1090
00:44:27,349 --> 00:44:31,940
trust domain and by the way I switched

1091
00:44:29,059 --> 00:44:33,980
from smart Nick to blue field this is

1092
00:44:31,940 --> 00:44:36,619
just the name of the smart Nick that

1093
00:44:33,980 --> 00:44:39,500
that I work on and the only reason I did

1094
00:44:36,619 --> 00:44:41,240
that is because doing doing memory

1095
00:44:39,500 --> 00:44:42,650
analysis like this doesn't work in every

1096
00:44:41,240 --> 00:44:45,348
smart and it kitchens first in this one

1097
00:44:42,650 --> 00:44:48,289
okay but but so we've got this this

1098
00:44:45,349 --> 00:44:51,220
isolated environment which represents

1099
00:44:48,289 --> 00:44:54,619
its own trust domain okay

1100
00:44:51,220 --> 00:44:56,118
next we've got some accelerators to to

1101
00:44:54,619 --> 00:44:58,640
move memory around quickly but more

1102
00:44:56,119 --> 00:45:01,369
importantly it's a secure memory

1103
00:44:58,640 --> 00:45:04,038
acquisition because we're running out of

1104
00:45:01,369 --> 00:45:06,200
band from the CPU and the CPU can't do

1105
00:45:04,039 --> 00:45:10,190
anything about it and it also has no

1106
00:45:06,200 --> 00:45:12,879
impact on what memory we read next we've

1107
00:45:10,190 --> 00:45:15,799
got some accelerators to help us out so

1108
00:45:12,880 --> 00:45:17,420
scanning memory is tough especially when

1109
00:45:15,799 --> 00:45:19,630
you're talking about like a terabyte of

1110
00:45:17,420 --> 00:45:21,289
memory so we've got some-some

1111
00:45:19,630 --> 00:45:22,970
accelerators to help with that process

1112
00:45:21,289 --> 00:45:25,190
and make it a little bit more real-time

1113
00:45:22,970 --> 00:45:28,129
these are things like regular expression

1114
00:45:25,190 --> 00:45:29,839
processors or check sums you know

1115
00:45:28,130 --> 00:45:32,569
cryptographic check sums to verify

1116
00:45:29,839 --> 00:45:34,250
signatures address translation you know

1117
00:45:32,569 --> 00:45:39,470
sticky problems that really benefit from

1118
00:45:34,250 --> 00:45:42,650
from hardware acceleration next if you

1119
00:45:39,470 --> 00:45:45,230
can imagine trying to take a snapshot of

1120
00:45:42,650 --> 00:45:47,000
memory constantly to figure out what's

1121
00:45:45,230 --> 00:45:49,460
going on and make sure that applications

1122
00:45:47,000 --> 00:45:51,440
are in sync with networking policy this

1123
00:45:49,460 --> 00:45:54,500
has to be done incredibly rapidly but

1124
00:45:51,440 --> 00:45:56,990
fortunately the PCI PCIe bandwidth is

1125
00:45:54,500 --> 00:45:58,880
great right so you can imagine let's say

1126
00:45:56,990 --> 00:46:01,970
we're interested in a small subsection

1127
00:45:58,880 --> 00:46:03,829
maybe a via a particular V M has a

1128
00:46:01,970 --> 00:46:06,439
particular kernel table that you're

1129
00:46:03,829 --> 00:46:08,210
interested in the validity of it might

1130
00:46:06,440 --> 00:46:10,069
be in a specific set of pages that we

1131
00:46:08,210 --> 00:46:12,410
know about we can hammer those pages

1132
00:46:10,069 --> 00:46:14,119
constantly on a very rapid interval to

1133
00:46:12,410 --> 00:46:17,450
make sure that even though we can't have

1134
00:46:14,119 --> 00:46:19,400
a full trigger we can have a pretty good

1135
00:46:17,450 --> 00:46:22,759
idea of what's going on within those

1136
00:46:19,400 --> 00:46:26,630
tables in the kernel so let's say a

1137
00:46:22,759 --> 00:46:28,190
real-time type interval and then finally

1138
00:46:26,630 --> 00:46:31,309
we put all these together and we can

1139
00:46:28,190 --> 00:46:32,900
reconstruct all kinds of memory

1140
00:46:31,309 --> 00:46:34,220
structures that would normally be in a

1141
00:46:32,900 --> 00:46:37,280
host system so

1142
00:46:34,220 --> 00:46:38,600
you can imagine the process list in in

1143
00:46:37,280 --> 00:46:40,130
Linux right the first thing that I would

1144
00:46:38,600 --> 00:46:42,380
do is I would look up the process

1145
00:46:40,130 --> 00:46:44,120
information the the task struct for in

1146
00:46:42,380 --> 00:46:46,130
it and I would walk it and see exactly

1147
00:46:44,120 --> 00:46:48,140
what processes are available on the

1148
00:46:46,130 --> 00:46:49,550
system eventually it'll circle back to

1149
00:46:48,140 --> 00:46:50,690
an it and I have the full picture for

1150
00:46:49,550 --> 00:46:52,820
everything that's running on that system

1151
00:46:50,690 --> 00:46:54,200
including you know containers operate in

1152
00:46:52,820 --> 00:46:56,810
the same way write those processes are

1153
00:46:54,200 --> 00:47:00,290
still within the the same Linux kernel

1154
00:46:56,810 --> 00:47:02,960
for VMs it's very similar except we have

1155
00:47:00,290 --> 00:47:04,430
one level of indirection past that right

1156
00:47:02,960 --> 00:47:06,860
we have to first find out where the VMS

1157
00:47:04,430 --> 00:47:08,779
are figure out what physical memory is

1158
00:47:06,860 --> 00:47:11,270
mapped to the virtual memory associated

1159
00:47:08,780 --> 00:47:13,160
with that vm and then we can walk its

1160
00:47:11,270 --> 00:47:15,770
processed list right so we can actually

1161
00:47:13,160 --> 00:47:19,609
go into memory and reconstruct Linux

1162
00:47:15,770 --> 00:47:22,370
structures and I want to show you a demo

1163
00:47:19,610 --> 00:47:25,970
for how this is done and this is my

1164
00:47:22,370 --> 00:47:27,560
caveat if you're into gaming especially

1165
00:47:25,970 --> 00:47:30,230
speed gaming they have this concept

1166
00:47:27,560 --> 00:47:32,540
called marathon luck which means that if

1167
00:47:30,230 --> 00:47:34,970
you're in a marathon setting you're

1168
00:47:32,540 --> 00:47:38,060
guaranteed to bone it a few times in

1169
00:47:34,970 --> 00:47:41,689
this particular setting I've got my

1170
00:47:38,060 --> 00:47:44,360
hotspot running on my phone my laptop is

1171
00:47:41,690 --> 00:47:47,150
on the hotspot and I have a smart NIC

1172
00:47:44,360 --> 00:47:49,400
emulator running on a bare-metal machine

1173
00:47:47,150 --> 00:47:52,760
that I've instanced out of packet net in

1174
00:47:49,400 --> 00:47:55,850
the United States so this is my my

1175
00:47:52,760 --> 00:47:57,560
marathon luck prayer but but I'd like to

1176
00:47:55,850 --> 00:48:00,799
show you the kind of things that we can

1177
00:47:57,560 --> 00:48:02,750
do here and this will be especially fun

1178
00:48:00,800 --> 00:48:06,590
because I can't see what I'm typing this

1179
00:48:02,750 --> 00:48:10,900
is actually ok I've got a separate

1180
00:48:06,590 --> 00:48:10,900
screen down here that I can they can use

1181
00:48:11,200 --> 00:48:15,859
ok so I'm gonna I'm gonna log into the

1182
00:48:14,090 --> 00:48:17,630
the machine where I've got the emulator

1183
00:48:15,860 --> 00:48:20,660
running and we'll see if I'm still

1184
00:48:17,630 --> 00:48:22,670
connected to the network by the way if

1185
00:48:20,660 --> 00:48:27,379
you guys use packet it's a bare metal in

1186
00:48:22,670 --> 00:48:28,310
have it's awesome isn't it we have to

1187
00:48:27,380 --> 00:48:30,410
use packet because we're emulating

1188
00:48:28,310 --> 00:48:31,700
Hardware here if I wanted to run this on

1189
00:48:30,410 --> 00:48:34,609
a virtual machine I'd have a virtual

1190
00:48:31,700 --> 00:48:36,109
machine running a half virtual emulator

1191
00:48:34,610 --> 00:48:38,500
and inside it a bunch of virtual

1192
00:48:36,110 --> 00:48:41,540
machines there would be total chaos ok

1193
00:48:38,500 --> 00:48:45,790
so this is my instance where I've got

1194
00:48:41,540 --> 00:48:50,450
the smart NIC emulator

1195
00:48:45,790 --> 00:48:55,009
oops okay so I'm gonna show you a couple

1196
00:48:50,450 --> 00:48:56,750
of systems here so in a smart NIC

1197
00:48:55,010 --> 00:48:59,740
environment I've got two systems I've

1198
00:48:56,750 --> 00:49:03,560
got a host system and an embedded system

1199
00:48:59,740 --> 00:49:06,770
here as you can see this is this is our

1200
00:49:03,560 --> 00:49:09,710
host system it's a regular Linux I'm not

1201
00:49:06,770 --> 00:49:12,290
I'm not doing anything crazy but what I

1202
00:49:09,710 --> 00:49:14,210
do want to do is see if I can analyze

1203
00:49:12,290 --> 00:49:17,240
the memory associated with this machine

1204
00:49:14,210 --> 00:49:19,310
on the smart NIC by going over the PCIe

1205
00:49:17,240 --> 00:49:21,379
device capturing a bunch of memory

1206
00:49:19,310 --> 00:49:22,910
through through our DMA parsing it

1207
00:49:21,380 --> 00:49:26,660
seeing what it's doing and see if I can

1208
00:49:22,910 --> 00:49:30,529
enforce some policy so let's let's start

1209
00:49:26,660 --> 00:49:37,700
up a process here I'm gonna just ping

1210
00:49:30,530 --> 00:49:40,700
Google a bunch and then exit now I'm

1211
00:49:37,700 --> 00:49:44,990
going to go into the embedded compute

1212
00:49:40,700 --> 00:49:46,669
okay so this is our Bluefield device if

1213
00:49:44,990 --> 00:49:48,919
you remember the the layout here I've

1214
00:49:46,670 --> 00:49:51,349
got a host system I've got the smart NIC

1215
00:49:48,920 --> 00:49:55,130
that's providing it network and I've got

1216
00:49:51,349 --> 00:49:58,099
some embedded compute on the inside so

1217
00:49:55,130 --> 00:50:01,010
you'll see is as soon as I want to start

1218
00:49:58,099 --> 00:50:02,960
analyzing memory first of all it's

1219
00:50:01,010 --> 00:50:06,170
running at emulation speed but but what

1220
00:50:02,960 --> 00:50:09,410
it is doing is going over the embedded

1221
00:50:06,170 --> 00:50:11,060
PCIe connection going into memory where

1222
00:50:09,410 --> 00:50:13,368
where it knows that some structures

1223
00:50:11,060 --> 00:50:16,460
might exist and physically walking that

1224
00:50:13,369 --> 00:50:19,130
memory so what will exist as virtual

1225
00:50:16,460 --> 00:50:20,900
addresses on the on the host side it's

1226
00:50:19,130 --> 00:50:23,030
obviously mapped to some physical memory

1227
00:50:20,900 --> 00:50:24,650
we have that translation table we're

1228
00:50:23,030 --> 00:50:27,410
actually doing the translation in the

1229
00:50:24,650 --> 00:50:28,910
embedded compute and every time we want

1230
00:50:27,410 --> 00:50:30,799
to access some page we'll do the

1231
00:50:28,910 --> 00:50:32,960
translation request the physical page

1232
00:50:30,800 --> 00:50:35,720
over the PCIe device get that physical

1233
00:50:32,960 --> 00:50:38,720
page back and parse it a little bit so

1234
00:50:35,720 --> 00:50:42,709
let's say I want to see what processes

1235
00:50:38,720 --> 00:50:45,618
are running what this will do is it'll

1236
00:50:42,710 --> 00:50:47,720
negotiate with with the PCIe you know

1237
00:50:45,619 --> 00:50:50,300
simultaneous to doing some some network

1238
00:50:47,720 --> 00:50:52,640
traffic so we're setting up with what's

1239
00:50:50,300 --> 00:50:57,410
called a cue pair this is sort of a a

1240
00:50:52,640 --> 00:50:59,679
very primitive type of setup for

1241
00:50:57,410 --> 00:51:02,058
transferring over our DM

1242
00:50:59,679 --> 00:51:04,339
we're doing some translation and now

1243
00:51:02,059 --> 00:51:06,439
we've got the processed list for the

1244
00:51:04,339 --> 00:51:08,569
hosts so we're not actually on the hosts

1245
00:51:06,439 --> 00:51:10,368
we're on we're on the Nick but we can

1246
00:51:08,569 --> 00:51:13,359
see exactly what's running on the host I

1247
00:51:10,369 --> 00:51:15,859
mean time stamps aside

1248
00:51:13,359 --> 00:51:18,650
okay so let's scroll up here and see if

1249
00:51:15,859 --> 00:51:23,119
we could find our process here we've got

1250
00:51:18,650 --> 00:51:26,419
some drivers up there we go

1251
00:51:23,119 --> 00:51:29,809
I could see ping is running I could see

1252
00:51:26,419 --> 00:51:31,489
if obviously the time stamp is is not

1253
00:51:29,809 --> 00:51:33,679
correct but it's it's ahead of the

1254
00:51:31,489 --> 00:51:38,029
system boot time and I can see it's

1255
00:51:33,679 --> 00:51:40,609
running in userspace I can also see the

1256
00:51:38,029 --> 00:51:43,609
exact state of the rest of the the

1257
00:51:40,609 --> 00:51:46,729
drivers that are running as well as any

1258
00:51:43,609 --> 00:51:49,880
watch dogs or demons now let's say I

1259
00:51:46,729 --> 00:51:51,499
wanted to remember that we're trying to

1260
00:51:49,880 --> 00:51:52,849
implement this policy of a certain

1261
00:51:51,499 --> 00:51:55,939
application can talk to a certain

1262
00:51:52,849 --> 00:51:57,709
application so let's check out what

1263
00:51:55,939 --> 00:51:59,808
applications have open network sockets

1264
00:51:57,709 --> 00:52:01,640
this is again this is a table that's

1265
00:51:59,809 --> 00:52:03,709
maintained in the Linux kernel on the

1266
00:52:01,640 --> 00:52:06,169
host so we're going to go across the

1267
00:52:03,709 --> 00:52:08,058
PCIe bus we're going to access a bunch

1268
00:52:06,169 --> 00:52:09,499
of physical memory we know where the

1269
00:52:08,059 --> 00:52:11,539
where the kernel structure starts we're

1270
00:52:09,499 --> 00:52:14,118
gonna parse it out doing the translation

1271
00:52:11,539 --> 00:52:16,579
from virtual to physical and once we

1272
00:52:14,119 --> 00:52:19,579
reconstitute it we'll be able to see

1273
00:52:16,579 --> 00:52:25,429
exactly which processes have a network

1274
00:52:19,579 --> 00:52:30,829
socket open this is where marathon luck

1275
00:52:25,429 --> 00:52:34,159
comes in ah okay so again this is this

1276
00:52:30,829 --> 00:52:36,169
is a normal Linux kernel structure so I

1277
00:52:34,159 --> 00:52:38,299
can reconstitute it I can introspect

1278
00:52:36,169 --> 00:52:41,629
into the host and see what's what's

1279
00:52:38,299 --> 00:52:45,489
running if I if I look around here you

1280
00:52:41,630 --> 00:52:45,489
can see what ports are open

1281
00:52:46,080 --> 00:52:53,819
you could see I'm listening on this SSH

1282
00:52:50,700 --> 00:52:55,980
port I can see a full snapshot of every

1283
00:52:53,820 --> 00:52:57,990
application that has network activity

1284
00:52:55,980 --> 00:53:00,180
going on and so if we go back to the

1285
00:52:57,990 --> 00:53:02,669
policy that I was trying to create what

1286
00:53:00,180 --> 00:53:04,379
I really wanted to do was say HR app is

1287
00:53:02,670 --> 00:53:06,000
the only one who can talk to the

1288
00:53:04,380 --> 00:53:07,560
database and previously I to do it based

1289
00:53:06,000 --> 00:53:10,110
on IP addresses and networking stuff

1290
00:53:07,560 --> 00:53:12,960
here I can actually go into the machine

1291
00:53:10,110 --> 00:53:15,720
I can find that HR app and I could see

1292
00:53:12,960 --> 00:53:17,940
okay it has a network socket open I can

1293
00:53:15,720 --> 00:53:20,700
figure out its Pig its its process ID

1294
00:53:17,940 --> 00:53:23,220
verify that that process is in a good

1295
00:53:20,700 --> 00:53:25,379
state I can dump the entire process look

1296
00:53:23,220 --> 00:53:27,450
at it verify the signature I could say

1297
00:53:25,380 --> 00:53:31,140
okay not only is this thing in a known

1298
00:53:27,450 --> 00:53:33,390
state I recognize the signature but yes

1299
00:53:31,140 --> 00:53:35,549
it's allowed to attach to the network I

1300
00:53:33,390 --> 00:53:38,790
have the network connection parameters

1301
00:53:35,550 --> 00:53:41,100
like for example I know exactly which

1302
00:53:38,790 --> 00:53:43,110
port is associated with that HR process

1303
00:53:41,100 --> 00:53:44,730
and then I can apply my encrypted tunnel

1304
00:53:43,110 --> 00:53:48,960
and I could do the same on the database

1305
00:53:44,730 --> 00:53:53,490
side too finally you could see I was I

1306
00:53:48,960 --> 00:53:56,280
was playing a bit let me show you

1307
00:53:53,490 --> 00:53:57,930
something really cool actually so we

1308
00:53:56,280 --> 00:54:00,240
connected to this framework are you guys

1309
00:53:57,930 --> 00:54:05,118
familiar with the the recall memory

1310
00:54:00,240 --> 00:54:08,310
forensics framework anybody awesome so

1311
00:54:05,119 --> 00:54:10,350
normally what you do with with toolkits

1312
00:54:08,310 --> 00:54:12,420
like that seem for things like like

1313
00:54:10,350 --> 00:54:14,549
volatility or any any post-mortem

1314
00:54:12,420 --> 00:54:17,850
forensics library is you'll take a crash

1315
00:54:14,550 --> 00:54:19,410
dump or a memory dump from a system that

1316
00:54:17,850 --> 00:54:21,210
you want to look at you'll take that

1317
00:54:19,410 --> 00:54:23,220
entire file feed it into the forensics

1318
00:54:21,210 --> 00:54:26,220
library and you can dissect it a little

1319
00:54:23,220 --> 00:54:28,980
bit right well we we've done something

1320
00:54:26,220 --> 00:54:32,250
very cool where we we took the same

1321
00:54:28,980 --> 00:54:33,780
concept except where normally something

1322
00:54:32,250 --> 00:54:37,109
like recall would be operating over a

1323
00:54:33,780 --> 00:54:39,210
memory dump we manipulated it so that

1324
00:54:37,109 --> 00:54:40,950
anytime I want to access a page within

1325
00:54:39,210 --> 00:54:43,800
that memory dump it's gonna go into the

1326
00:54:40,950 --> 00:54:45,899
host and do it live so instead of

1327
00:54:43,800 --> 00:54:48,810
operating over a static dump we're gonna

1328
00:54:45,900 --> 00:54:51,060
operate over live memory instead and and

1329
00:54:48,810 --> 00:54:52,650
there's there's a million plugins before

1330
00:54:51,060 --> 00:54:54,509
for recall and I'm not going to go

1331
00:54:52,650 --> 00:54:58,770
through them but I can do everything

1332
00:54:54,510 --> 00:54:59,910
from dump a process to you can see I was

1333
00:54:58,770 --> 00:55:01,829
playing with dumps the

1334
00:54:59,910 --> 00:55:05,220
these are all these are all processed

1335
00:55:01,829 --> 00:55:06,990
dumps so earlier I did an entire dump of

1336
00:55:05,220 --> 00:55:08,788
the machine took every process dumped it

1337
00:55:06,990 --> 00:55:11,160
into a file so we could check it out

1338
00:55:08,789 --> 00:55:13,020
these are things that I can do live on

1339
00:55:11,160 --> 00:55:15,089
the smart Nick to make sure that the

1340
00:55:13,020 --> 00:55:17,579
host is behaving properly right so

1341
00:55:15,089 --> 00:55:19,349
whether it's a VM or a container or just

1342
00:55:17,579 --> 00:55:22,380
applications running on the host the

1343
00:55:19,349 --> 00:55:24,180
smart Nick is this isolated sandbox

1344
00:55:22,380 --> 00:55:26,940
environment or I could reach into the

1345
00:55:24,180 --> 00:55:28,288
host manipulate the or not manipulate

1346
00:55:26,940 --> 00:55:30,359
but but pull out the memory and

1347
00:55:28,289 --> 00:55:32,369
manipulate the policy associated with

1348
00:55:30,359 --> 00:55:35,308
anything that's running on the host so

1349
00:55:32,369 --> 00:55:38,250
it's it's kind of a novel way to make

1350
00:55:35,309 --> 00:55:41,579
sure that one the host is in compliance

1351
00:55:38,250 --> 00:55:44,490
to that it's accessing the network

1352
00:55:41,579 --> 00:55:47,220
correctly three that I'm applying

1353
00:55:44,490 --> 00:55:50,189
network policy based on the criteria of

1354
00:55:47,220 --> 00:55:53,819
the host and not just guesses for what

1355
00:55:50,190 --> 00:55:56,880
it might be doing and for just making

1356
00:55:53,819 --> 00:55:58,770
sure that the host is in a good state

1357
00:55:56,880 --> 00:56:00,900
with regards to the processes themselves

1358
00:55:58,770 --> 00:56:02,520
I only want to be running processes I

1359
00:56:00,900 --> 00:56:05,670
know about I don't want to be running

1360
00:56:02,520 --> 00:56:07,380
anything else so in my Nick if I go into

1361
00:56:05,670 --> 00:56:09,059
the system and see that there are 20

1362
00:56:07,380 --> 00:56:11,520
processes and I have no idea what that

1363
00:56:09,059 --> 00:56:13,230
xx is it doesn't match any signatures I

1364
00:56:11,520 --> 00:56:14,520
know it's not on my whitelist and I can

1365
00:56:13,230 --> 00:56:17,490
just disconnect that host from the

1366
00:56:14,520 --> 00:56:18,960
network right away right I just deal

1367
00:56:17,490 --> 00:56:20,038
with it later it might be legitimate and

1368
00:56:18,960 --> 00:56:21,750
I might have forgotten about it it might

1369
00:56:20,039 --> 00:56:23,279
be part of some new rollout it might be

1370
00:56:21,750 --> 00:56:26,130
illegitimate and it might be part of

1371
00:56:23,279 --> 00:56:28,380
some some breach but either way without

1372
00:56:26,130 --> 00:56:31,380
having to worry about the infrastructure

1373
00:56:28,380 --> 00:56:33,510
being affected I can modify the hosts

1374
00:56:31,380 --> 00:56:38,430
relationship to the infrastructure from

1375
00:56:33,510 --> 00:56:41,579
the NIC okay so it is almost exactly

1376
00:56:38,430 --> 00:56:44,339
noon that's what I wanted to show you is

1377
00:56:41,579 --> 00:56:45,750
to show you how how smart NICs can

1378
00:56:44,339 --> 00:56:49,859
change the way we think about host

1379
00:56:45,750 --> 00:56:52,140
security and basically to merge the idea

1380
00:56:49,859 --> 00:56:54,058
that that networking security as it gets

1381
00:56:52,140 --> 00:56:55,770
closer to the edge or a closer to the

1382
00:56:54,059 --> 00:56:57,869
host doesn't have to be on the same

1383
00:56:55,770 --> 00:57:01,500
trust domain as the rest of the host

1384
00:56:57,869 --> 00:57:03,029
processes and then the the the memory

1385
00:57:01,500 --> 00:57:06,059
analysis is something that we're working

1386
00:57:03,029 --> 00:57:09,900
on which we think is is quite promising

1387
00:57:06,059 --> 00:57:11,640
if not a little bit a little bit scary

1388
00:57:09,900 --> 00:57:13,470
at the same time do you guys have any

1389
00:57:11,640 --> 00:57:25,029
questions for me

1390
00:57:13,470 --> 00:57:28,000
yeah oh we have a mic alright this fall

1391
00:57:25,030 --> 00:57:30,250
great talk okay good question so you're

1392
00:57:28,000 --> 00:57:35,830
dumping the memory from host key right

1393
00:57:30,250 --> 00:57:37,840
back to it I don't think we want to go

1394
00:57:35,830 --> 00:57:39,940
there so I do

1395
00:57:37,840 --> 00:57:42,550
III know so so here's the thing right

1396
00:57:39,940 --> 00:57:44,470
we're trying to be side-effect free and

1397
00:57:42,550 --> 00:57:45,550
you don't know exactly what's going on

1398
00:57:44,470 --> 00:57:49,330
on the host and I'll give you I'll give

1399
00:57:45,550 --> 00:57:51,040
you a perfect example okay so something

1400
00:57:49,330 --> 00:57:53,860
like the process list right it's a

1401
00:57:51,040 --> 00:57:58,930
linked list okay and and that means that

1402
00:57:53,860 --> 00:58:00,910
we are bounded in validity by the the

1403
00:57:58,930 --> 00:58:02,589
total time it takes to make one

1404
00:58:00,910 --> 00:58:04,540
transaction parse it and then move to

1405
00:58:02,590 --> 00:58:05,980
the next transaction so let's say I have

1406
00:58:04,540 --> 00:58:09,040
a hundred processes they're gonna be in

1407
00:58:05,980 --> 00:58:11,950
a list well I'll probably have one page

1408
00:58:09,040 --> 00:58:14,890
that represents one task struct from the

1409
00:58:11,950 --> 00:58:16,359
route I need to to fetch that check it

1410
00:58:14,890 --> 00:58:18,700
out grab the next pointer fetch that

1411
00:58:16,360 --> 00:58:21,040
check it out grab the next pointer so in

1412
00:58:18,700 --> 00:58:23,410
a read operation that that might not

1413
00:58:21,040 --> 00:58:25,210
even be safe because the the task list

1414
00:58:23,410 --> 00:58:27,430
might change in the time it takes to

1415
00:58:25,210 --> 00:58:29,290
actually parse and understand what

1416
00:58:27,430 --> 00:58:31,629
processes are running the best we can do

1417
00:58:29,290 --> 00:58:33,130
is make make an educated guess we can

1418
00:58:31,630 --> 00:58:37,030
probably with some degree of certainty

1419
00:58:33,130 --> 00:58:40,690
figure out at a given instance that a

1420
00:58:37,030 --> 00:58:41,860
process node that we found is legitimate

1421
00:58:40,690 --> 00:58:44,740
because there all sorts of other

1422
00:58:41,860 --> 00:58:47,500
indicators I can I can see the liveness

1423
00:58:44,740 --> 00:58:49,509
state of that particular task memory

1424
00:58:47,500 --> 00:58:51,850
associated with that task would probably

1425
00:58:49,510 --> 00:58:53,920
not be valid if I wanted to check and

1426
00:58:51,850 --> 00:58:58,330
see if that task has died and its place

1427
00:58:53,920 --> 00:59:01,210
subsumed within the process list so even

1428
00:58:58,330 --> 00:59:03,580
even the task of reading what's going on

1429
00:59:01,210 --> 00:59:05,020
on the host is not exactly side-effect

1430
00:59:03,580 --> 00:59:06,580
free there's an inherent race condition

1431
00:59:05,020 --> 00:59:08,759
that we're trying to overcome through

1432
00:59:06,580 --> 00:59:11,799
performance on the bandwidth side

1433
00:59:08,760 --> 00:59:14,760
writing would I would say be even more

1434
00:59:11,800 --> 00:59:14,760
catastrophic than that

1435
00:59:17,200 --> 00:59:22,270
yo follow ya follow up so you can write

1436
00:59:20,140 --> 00:59:26,920
it you don't want yes correct

1437
00:59:22,270 --> 00:59:28,960
okay and in fact I mean they do write it

1438
00:59:26,920 --> 00:59:31,809
like PCIe devices do right to memory

1439
00:59:28,960 --> 00:59:33,849
it's just normally there they're granted

1440
00:59:31,809 --> 00:59:35,710
supervised privileges by the host so

1441
00:59:33,849 --> 00:59:37,150
it'll say I've allocated this buffer I

1442
00:59:35,710 --> 00:59:40,720
know it's gonna be written so it's final

1443
00:59:37,150 --> 00:59:42,190
tile memory I you mentioned all Sun

1444
00:59:40,720 --> 00:59:43,480
starts up it's going to do a firmware

1445
00:59:42,190 --> 00:59:45,760
check to make sure we're in a known good

1446
00:59:43,480 --> 00:59:47,559
state before initialization given that

1447
00:59:45,760 --> 00:59:50,260
I've had plenty of Dominic's fell in

1448
00:59:47,559 --> 00:59:51,520
there time I'm obviously highly you know

1449
00:59:50,260 --> 00:59:53,589
we're worried about a single point of

1450
00:59:51,520 --> 00:59:55,390
failure how mature are we looking at in

1451
00:59:53,589 --> 00:59:57,160
terms of slaving multiple of these units

1452
00:59:55,390 --> 00:59:58,509
together to get some level of resiliency

1453
00:59:57,160 --> 00:59:59,828
in terms of management tools because if

1454
00:59:58,510 --> 01:00:01,780
we can have to patch down the line

1455
00:59:59,829 --> 01:00:03,569
because again it is just another form of

1456
01:00:01,780 --> 01:00:05,740
Linux somewhere down the line ya know

1457
01:00:03,569 --> 01:00:07,599
where is the market in terms of that

1458
01:00:05,740 --> 01:00:09,549
because if I'm I'm in a position where

1459
01:00:07,599 --> 01:00:11,049
we are pushing some of our stuff to

1460
01:00:09,549 --> 01:00:12,520
cloud and some of our stuff database

1461
01:00:11,049 --> 01:00:14,799
refresh so we are looking at

1462
01:00:12,520 --> 01:00:17,259
architecture stuff I haven't looked at

1463
01:00:14,799 --> 01:00:18,609
this prior so how mature or the

1464
01:00:17,260 --> 01:00:24,849
management side of things for actually

1465
01:00:18,609 --> 01:00:27,490
keeping these very very immature so I so

1466
01:00:24,849 --> 01:00:29,589
for example I'll give you an example if

1467
01:00:27,490 --> 01:00:31,598
you're on Azure they use smart Nix they

1468
01:00:29,589 --> 01:00:33,640
advertise it quite readily theirs are

1469
01:00:31,599 --> 01:00:35,920
based on FPGAs so that's what they use

1470
01:00:33,640 --> 01:00:37,750
for the embedded computer I talked to

1471
01:00:35,920 --> 01:00:40,000
one of the developers at a conference

1472
01:00:37,750 --> 01:00:41,920
lately I think it was maybe two months

1473
01:00:40,000 --> 01:00:45,190
ago and I asked him that exact same

1474
01:00:41,920 --> 01:00:47,319
question he said if there's a mismatch

1475
01:00:45,190 --> 01:00:49,540
on the bring up or something goes wrong

1476
01:00:47,319 --> 01:00:52,240
or even if they need to redeploy based

1477
01:00:49,540 --> 01:00:53,829
on form or change they take that note

1478
01:00:52,240 --> 01:00:57,189
down for anywhere between two and five

1479
01:00:53,829 --> 01:00:59,020
hours and it's simply because of that

1480
01:00:57,190 --> 01:01:00,309
problem they have to verify the known

1481
01:00:59,020 --> 01:01:02,980
good state and there isn't a good way to

1482
01:01:00,309 --> 01:01:04,359
do it so the answer is to be redundant

1483
01:01:02,980 --> 01:01:07,359
that's the only thing we can do

1484
01:01:04,359 --> 01:01:10,119
oh it's it's much easier with a software

1485
01:01:07,359 --> 01:01:12,040
base model than an FPGA model but it's

1486
01:01:10,119 --> 01:01:19,569
still it's you're still gonna have to

1487
01:01:12,040 --> 01:01:21,490
rely on redundancy anymore that me when

1488
01:01:19,569 --> 01:01:24,069
I look at everything you've just said

1489
01:01:21,490 --> 01:01:26,319
which all sounds relatively awesome in

1490
01:01:24,069 --> 01:01:28,690
terms of capabilities and so on I see a

1491
01:01:26,319 --> 01:01:29,770
huge massive complexity when most of the

1492
01:01:28,690 --> 01:01:31,040
admins I deal with my day-to-day

1493
01:01:29,770 --> 01:01:33,320
supervision and so

1494
01:01:31,040 --> 01:01:35,450
are having problems managing the Windows

1495
01:01:33,320 --> 01:01:37,460
GUI let alone morph

1496
01:01:35,450 --> 01:01:39,680
let alone configuring a smartening on a

1497
01:01:37,460 --> 01:01:43,280
Linux hose to correctly read talk

1498
01:01:39,680 --> 01:01:44,569
process etc I agree how do you solve

1499
01:01:43,280 --> 01:01:48,230
those doing Europe in here where are we

1500
01:01:44,570 --> 01:01:53,680
going with that yeah so so that's why if

1501
01:01:48,230 --> 01:01:53,680
you look at the deck I flip back here

1502
01:01:56,110 --> 01:02:03,500
basically what it comes down to is our

1503
01:01:59,680 --> 01:02:08,109
position on that is that we're trying to

1504
01:02:03,500 --> 01:02:10,430
create I don't know where the slides

1505
01:02:08,110 --> 01:02:13,220
we're trying I wasn't showing anyway

1506
01:02:10,430 --> 01:02:15,589
we're trying to create the right tool

1507
01:02:13,220 --> 01:02:21,379
set so that vendors can create the right

1508
01:02:15,590 --> 01:02:22,850
solution so I would say that smart

1509
01:02:21,380 --> 01:02:25,340
Knicks are more on the technology side

1510
01:02:22,850 --> 01:02:28,640
they're not on they're not they're not

1511
01:02:25,340 --> 01:02:31,430
meant to be exposed to someone like like

1512
01:02:28,640 --> 01:02:33,020
an IT admin because you're right is far

1513
01:02:31,430 --> 01:02:34,669
too complex and it would actually

1514
01:02:33,020 --> 01:02:38,090
increase the attack surface rather than

1515
01:02:34,670 --> 01:02:40,330
decrease it rather I think the the right

1516
01:02:38,090 --> 01:02:44,570
position is to treat it sort of like

1517
01:02:40,330 --> 01:02:47,990
secure enclaves from Intel where you

1518
01:02:44,570 --> 01:02:51,830
have this great tool well if we go back

1519
01:02:47,990 --> 01:02:53,959
a year it was a great tool to create the

1520
01:02:51,830 --> 01:02:56,090
same type of privileged execution

1521
01:02:53,960 --> 01:02:58,190
environment but you know who he used

1522
01:02:56,090 --> 01:03:00,860
enclaves it wasn't it wasn't normal

1523
01:02:58,190 --> 01:03:03,380
developers it was people like visa so

1524
01:03:00,860 --> 01:03:05,480
they would develop a solution which runs

1525
01:03:03,380 --> 01:03:07,130
on your host which creates an enclave so

1526
01:03:05,480 --> 01:03:09,170
they can do their their trusted compute

1527
01:03:07,130 --> 01:03:10,880
there and they don't have to do it in a

1528
01:03:09,170 --> 01:03:13,340
non sandbox environment like like a

1529
01:03:10,880 --> 01:03:15,430
browser window so so I would say this

1530
01:03:13,340 --> 01:03:17,690
type of technology is best suited for

1531
01:03:15,430 --> 01:03:19,640
vendors like that who would create their

1532
01:03:17,690 --> 01:03:22,520
own policy engines that you can use more

1533
01:03:19,640 --> 01:03:24,740
like a Windows GUI and you shouldn't be

1534
01:03:22,520 --> 01:03:26,990
mucking about with memory unless you're

1535
01:03:24,740 --> 01:03:28,490
someone like that then my follow up is

1536
01:03:26,990 --> 01:03:31,839
what do the major cloud providers feel

1537
01:03:28,490 --> 01:03:33,950
about this aspect of attack yeah so

1538
01:03:31,840 --> 01:03:36,920
interesting choice of words the the

1539
01:03:33,950 --> 01:03:39,020
attack there so the there's really two

1540
01:03:36,920 --> 01:03:43,010
two types of deployments that you'll see

1541
01:03:39,020 --> 01:03:44,420
with smart Nix the first is the large

1542
01:03:43,010 --> 01:03:47,529
hyper scalars

1543
01:03:44,420 --> 01:03:50,690
and and typically what they would do is

1544
01:03:47,529 --> 01:03:52,220
they want to be in a position to to

1545
01:03:50,690 --> 01:03:54,619
create security add-ons for their

1546
01:03:52,220 --> 01:03:56,750
customers look so for EWS for example

1547
01:03:54,619 --> 01:03:59,089
you can't create an instance without

1548
01:03:56,750 --> 01:04:01,039
specifying a security group right now

1549
01:03:59,089 --> 01:04:02,930
that security group is not implemented

1550
01:04:01,039 --> 01:04:04,400
on the hosts right you're not gonna spin

1551
01:04:02,930 --> 01:04:06,500
up a host and see a bunch of IP tables

1552
01:04:04,400 --> 01:04:09,109
rules that represent your security group

1553
01:04:06,500 --> 01:04:13,460
instead it's implemented on some machine

1554
01:04:09,109 --> 01:04:16,308
just next to the to the VM probably

1555
01:04:13,460 --> 01:04:18,260
right in front of it okay and and AWS is

1556
01:04:16,309 --> 01:04:22,430
actually in the process of making that

1557
01:04:18,260 --> 01:04:25,819
more smart Nikki okay so so their

1558
01:04:22,430 --> 01:04:28,640
rollout is that the hyper scalars see it

1559
01:04:25,819 --> 01:04:31,339
as a trusted way where they can control

1560
01:04:28,640 --> 01:04:33,680
policy on behalf of their customers okay

1561
01:04:31,339 --> 01:04:34,849
so when they define a policy they don't

1562
01:04:33,680 --> 01:04:36,558
want to interfere on anything you're

1563
01:04:34,849 --> 01:04:38,000
doing in the VM you own that but they

1564
01:04:36,559 --> 01:04:40,640
still want to provide some measure of

1565
01:04:38,000 --> 01:04:41,660
security for you to take advantage of

1566
01:04:40,640 --> 01:04:43,368
even if you don't know how it's

1567
01:04:41,660 --> 01:04:45,379
implemented and that would typically be

1568
01:04:43,369 --> 01:04:47,809
done in something like a smart Nick I

1569
01:04:45,380 --> 01:04:50,630
would propose the second one is more

1570
01:04:47,809 --> 01:04:52,700
like like an enterprise data center so

1571
01:04:50,630 --> 01:04:54,259
if a company owns the entire rollout

1572
01:04:52,700 --> 01:04:56,990
like say it's a Colo and they're racking

1573
01:04:54,259 --> 01:04:59,450
and stacking they they therefore control

1574
01:04:56,990 --> 01:05:01,189
the the Nick's as well if they use the

1575
01:04:59,450 --> 01:05:03,200
Smart NIC in that capacity they own the

1576
01:05:01,190 --> 01:05:05,150
hosts and they own a Nick and they're

1577
01:05:03,200 --> 01:05:07,490
there in sort of a you know a symbiotic

1578
01:05:05,150 --> 01:05:09,799
relationship so for example if you were

1579
01:05:07,490 --> 01:05:11,750
to take nginx and deploy it on the smart

1580
01:05:09,799 --> 01:05:13,700
Nick you would control the session keys

1581
01:05:11,750 --> 01:05:16,069
there you would also control the session

1582
01:05:13,700 --> 01:05:18,470
keys on the host and you can make sure

1583
01:05:16,069 --> 01:05:20,538
that the you know you know normally you

1584
01:05:18,470 --> 01:05:21,890
can't intercept TLS you you have to

1585
01:05:20,539 --> 01:05:23,900
terminate it in some kind of knowingly

1586
01:05:21,890 --> 01:05:27,049
and you have to make sure that the host

1587
01:05:23,900 --> 01:05:29,150
trusts the CA that's associated with the

1588
01:05:27,049 --> 01:05:30,950
smart NIC so in that case they both know

1589
01:05:29,150 --> 01:05:32,390
about each other it's not like the hyper

1590
01:05:30,950 --> 01:05:33,769
scalar where they only control this one

1591
01:05:32,390 --> 01:05:35,210
and the customer controls this one and

1592
01:05:33,769 --> 01:05:36,769
in enterprise they would they would know

1593
01:05:35,210 --> 01:05:38,960
each other and they would just be using

1594
01:05:36,769 --> 01:05:40,788
smart NICs to create a better security

1595
01:05:38,960 --> 01:05:45,589
posture but those are the two types of

1596
01:05:40,789 --> 01:05:47,750
rollouts thank you any more thank you

1597
01:05:45,589 --> 01:05:49,849
very much yeah absolutely I will say I'm

1598
01:05:47,750 --> 01:05:50,990
always scared when I hear deploy nginx

1599
01:05:49,849 --> 01:05:55,099
on my NIC

1600
01:05:50,990 --> 01:05:56,629
oh yeah no it's totally funky I've done

1601
01:05:55,099 --> 01:05:57,829
it it's very cool it's it's incredibly

1602
01:05:56,630 --> 01:05:59,599
satisfying so

1603
01:05:57,829 --> 01:06:01,249
okay you know it's just one of those

1604
01:05:59,599 --> 01:06:04,039
funky things if you have any questions

1605
01:06:01,249 --> 01:06:06,319
by the way I'm not much of a Twitter

1606
01:06:04,039 --> 01:06:08,749
person I I have a Twitter account but

1607
01:06:06,319 --> 01:06:10,640
it's mostly used by by a bot to post

1608
01:06:08,749 --> 01:06:12,828
World of Warcraft live status updates

1609
01:06:10,640 --> 01:06:15,679
it's not actually used for for actual

1610
01:06:12,829 --> 01:06:17,869
information but you can email me it's

1611
01:06:15,679 --> 01:06:19,219
Jack at the company named Mellanox I'm

1612
01:06:17,869 --> 01:06:20,719
the only Jack in the company it's one of

1613
01:06:19,219 --> 01:06:24,529
the advantages of working for an Israeli

1614
01:06:20,719 --> 01:06:26,239
company thank you very much everyone I

1615
01:06:24,529 --> 01:06:29,749
believe lunch is being served shortly if

1616
01:06:26,239 --> 01:06:32,059
not now that 1207 lunch that will be on

1617
01:06:29,749 --> 01:06:36,649
the first floor when it happens and see

1618
01:06:32,059 --> 01:06:37,999
you again this afternoon I just want to

1619
01:06:36,650 --> 01:06:40,130
give a shout out to the a/v crew they

1620
01:06:37,999 --> 01:06:41,448
were they were working up until like 60

1621
01:06:40,130 --> 01:06:44,499
seconds before the talks to make sure

1622
01:06:41,449 --> 01:06:44,499
everything was awesome so

1623
01:06:46,760 --> 01:07:06,190
[Music]

