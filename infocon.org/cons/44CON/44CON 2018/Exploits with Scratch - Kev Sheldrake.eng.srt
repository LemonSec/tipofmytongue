1
00:00:00,089 --> 00:00:05,310
before start we'll say that a hacker in

2
00:00:03,720 --> 00:00:07,259
our industry who's been a crooner

3
00:00:05,310 --> 00:00:09,300
industry for a good 20 plus years by

4
00:00:07,259 --> 00:00:12,719
Kemp otherwise known as clapping monkey

5
00:00:09,300 --> 00:00:15,780
as it's been in hospital with an illness

6
00:00:12,719 --> 00:00:17,070
that is quite possibly life-threatening

7
00:00:15,780 --> 00:00:20,039
and we're gonna have a collection for

8
00:00:17,070 --> 00:00:21,480
him so if you see a bucket with give

9
00:00:20,039 --> 00:00:23,840
money to mike kemper in on it then

10
00:00:21,480 --> 00:00:27,480
please give money to Mike Kemp because

11
00:00:23,840 --> 00:00:32,820
you know could happen 20 of us anyway

12
00:00:27,480 --> 00:00:34,980
I am keV and my heroes are coming in to

13
00:00:32,820 --> 00:00:37,250
watch my talk this is in the front row

14
00:00:34,980 --> 00:00:39,209
notice this is quite scary

15
00:00:37,250 --> 00:00:41,910
but at least this time I'm talking about

16
00:00:39,210 --> 00:00:46,469
stuff simpler and easier to understand

17
00:00:41,910 --> 00:00:48,989
than crypto if I don't make sense please

18
00:00:46,469 --> 00:00:52,469
shout out we have a microphone so you

19
00:00:48,989 --> 00:00:53,550
can like ask questions but let me know

20
00:00:52,469 --> 00:00:55,530
if I'm not making any sense

21
00:00:53,550 --> 00:00:58,589
I am capturing I'm gonna be talking my

22
00:00:55,530 --> 00:01:02,270
exploits with scratch here is the Who am

23
00:00:58,590 --> 00:01:06,510
I slide to tell you who I am basically I

24
00:01:02,270 --> 00:01:10,650
like crypto and I'm a hypnotist so do

25
00:01:06,510 --> 00:01:12,960
listen to the sound of my voice the talk

26
00:01:10,650 --> 00:01:14,760
is about how come we can take a kids

27
00:01:12,960 --> 00:01:15,779
programming language literally the thing

28
00:01:14,760 --> 00:01:18,659
they teach their schools to

29
00:01:15,780 --> 00:01:20,189
seven-year-olds and turn it into a

30
00:01:18,659 --> 00:01:23,490
hacking tool or use it to make hacking

31
00:01:20,189 --> 00:01:26,658
tools that's basically what this talk is

32
00:01:23,490 --> 00:01:30,509
all about so if you're here for you know

33
00:01:26,659 --> 00:01:32,640
Windows Active Directory exploits you're

34
00:01:30,509 --> 00:01:34,799
probably in the wrong room if you're

35
00:01:32,640 --> 00:01:36,180
here for random falling they get you a

36
00:01:34,799 --> 00:01:41,430
conference talk you in the right room

37
00:01:36,180 --> 00:01:43,890
and it kind of care about because I saw

38
00:01:41,430 --> 00:01:45,090
Travis good speed at a conference and I

39
00:01:43,890 --> 00:01:47,610
said look what I've been doing in my

40
00:01:45,090 --> 00:01:49,799
spare time and showed him some of the

41
00:01:47,610 --> 00:01:50,369
work on this and he said that's

42
00:01:49,799 --> 00:01:52,740
brilliant

43
00:01:50,369 --> 00:01:55,950
oh I'll publish that in poeple get the

44
00:01:52,740 --> 00:02:00,210
 out and if you look at this one

45
00:01:55,950 --> 00:02:02,100
it's the stack smashing Academy for

46
00:02:00,210 --> 00:02:03,750
youngsters gifted and not and the reason

47
00:02:02,100 --> 00:02:05,669
for that is because the second article

48
00:02:03,750 --> 00:02:09,270
chapter 2 is fun memory corruption

49
00:02:05,670 --> 00:02:12,660
exploits for kids with scratch which is

50
00:02:09,270 --> 00:02:13,810
my article on this so I'm now published

51
00:02:12,660 --> 00:02:15,310
in the art in the mag

52
00:02:13,810 --> 00:02:19,569
seeing that all my heroes are published

53
00:02:15,310 --> 00:02:24,489
in maybe not for the same reasons but I

54
00:02:19,569 --> 00:02:26,109
am published so hey Paco Paco GTFO Alex

55
00:02:24,489 --> 00:02:27,970
18 if you're looking so let's talk about

56
00:02:26,110 --> 00:02:29,470
scratch I will make this more

57
00:02:27,970 --> 00:02:31,780
professional honestly I will make this

58
00:02:29,470 --> 00:02:33,160
more professional scratch is a language

59
00:02:31,780 --> 00:02:36,459
and an integrated development

60
00:02:33,160 --> 00:02:39,730
environment developed by MIT in 2003 ten

61
00:02:36,459 --> 00:02:43,150
years later they updated it and rewrote

62
00:02:39,730 --> 00:02:45,119
it in flash you know that famously great

63
00:02:43,150 --> 00:02:48,190
software environment

64
00:02:45,120 --> 00:02:49,600
which weirdly enough in this situation

65
00:02:48,190 --> 00:02:52,390
does actually work and then now we

66
00:02:49,600 --> 00:02:54,400
writing it again this time in html5 and

67
00:02:52,390 --> 00:02:57,069
JavaScript which I'm sure will be far

68
00:02:54,400 --> 00:02:59,650
more whiz-bang in sexy than the flash

69
00:02:57,069 --> 00:03:02,170
version I came into contact with it in

70
00:02:59,650 --> 00:03:05,260
the flash version of scratch to where

71
00:03:02,170 --> 00:03:07,630
you could add extra blocks you could you

72
00:03:05,260 --> 00:03:09,730
can make your own procedures which kind

73
00:03:07,630 --> 00:03:12,340
of extends it like far beyond what you

74
00:03:09,730 --> 00:03:14,560
could do with it in scratch 1 normally

75
00:03:12,340 --> 00:03:16,180
it's an online activity so normally your

76
00:03:14,560 --> 00:03:19,239
kids will go to this website

77
00:03:16,180 --> 00:03:21,130
scratch.mit.edu and they just start

78
00:03:19,239 --> 00:03:24,820
scratching which is the technical term

79
00:03:21,130 --> 00:03:27,880
for fighting scratch in a web browser

80
00:03:24,820 --> 00:03:33,069
but there was always an offline version

81
00:03:27,880 --> 00:03:35,380
available so when my son who's now 9 but

82
00:03:33,069 --> 00:03:37,869
when he graduated from scratch jr. on

83
00:03:35,380 --> 00:03:39,250
the iPad which wasn't very powerful you

84
00:03:37,870 --> 00:03:41,319
couldn't really do much with it but he

85
00:03:39,250 --> 00:03:44,079
graduated from that real scratch on a

86
00:03:41,319 --> 00:03:48,160
actual computer running Arch Linux

87
00:03:44,079 --> 00:03:51,090
because I'm a sadist I decided that the

88
00:03:48,160 --> 00:03:53,829
internet wasn't quite ready for him and

89
00:03:51,090 --> 00:03:56,500
protected the Internet and all of you by

90
00:03:53,829 --> 00:03:57,160
proxy from my son by not giving him

91
00:03:56,500 --> 00:03:58,569
Internet access

92
00:03:57,160 --> 00:04:00,100
but that meant I had to give him the

93
00:03:58,569 --> 00:04:01,899
offline version of scratch and in doing

94
00:04:00,100 --> 00:04:06,608
so discovered that scratch actually will

95
00:04:01,900 --> 00:04:07,989
allow experimental HTTP extensions so

96
00:04:06,609 --> 00:04:09,760
that you could control robots

97
00:04:07,989 --> 00:04:10,989
essentially that's what they like to do

98
00:04:09,760 --> 00:04:13,480
with things like scratch that's the

99
00:04:10,989 --> 00:04:16,200
whole variety 5 ecosystem is around is

100
00:04:13,480 --> 00:04:19,000
like making stuff move pretty much and

101
00:04:16,200 --> 00:04:21,880
ignore the word experimental it really

102
00:04:19,000 --> 00:04:23,289
does work so before we go any further

103
00:04:21,880 --> 00:04:25,060
we'll talk about scratch I'm not sure

104
00:04:23,289 --> 00:04:26,229
how clear this is maybe is actually

105
00:04:25,060 --> 00:04:27,280
quite clear maybe you can actually sort

106
00:04:26,229 --> 00:04:29,109
of see that

107
00:04:27,280 --> 00:04:31,179
is a game I downloaded from the scratch

108
00:04:29,110 --> 00:04:32,620
website everyone publishes their stuff

109
00:04:31,180 --> 00:04:33,850
you can download you can play online you

110
00:04:32,620 --> 00:04:35,440
can download the coach so download it

111
00:04:33,850 --> 00:04:37,090
just as a demonstration I haven't

112
00:04:35,440 --> 00:04:39,610
written this I don't know who wrote this

113
00:04:37,090 --> 00:04:41,469
this is somebody else's code what you

114
00:04:39,610 --> 00:04:42,940
can see there is a game in the top left

115
00:04:41,470 --> 00:04:45,550
corner that's the application on the

116
00:04:42,940 --> 00:04:48,639
stage it is a turtle moving around a

117
00:04:45,550 --> 00:04:50,710
maze down in the middle you can see the

118
00:04:48,639 --> 00:04:52,510
library of blocks that you can use

119
00:04:50,710 --> 00:04:54,190
separate entertaining categories we're

120
00:04:52,510 --> 00:04:56,620
looking at the motion category in this

121
00:04:54,190 --> 00:04:58,240
case and on the right hand side you can

122
00:04:56,620 --> 00:05:02,620
see the code behind the turtle

123
00:04:58,240 --> 00:05:04,570
so within scratch everything the stage

124
00:05:02,620 --> 00:05:06,570
and all the sprites are basically object

125
00:05:04,570 --> 00:05:09,370
so behind the objects lives code and

126
00:05:06,570 --> 00:05:12,730
it's completely object-oriented in that

127
00:05:09,370 --> 00:05:15,520
fashion not in any other fashion but in

128
00:05:12,730 --> 00:05:18,220
that fashion it's object-oriented and

129
00:05:15,520 --> 00:05:21,280
its multi-threaded everything happens at

130
00:05:18,220 --> 00:05:22,810
once and message driven so you can pass

131
00:05:21,280 --> 00:05:26,349
messages between different bits of code

132
00:05:22,810 --> 00:05:28,180
to start and stop things happening which

133
00:05:26,350 --> 00:05:31,240
you know it's got some quite grown-up

134
00:05:28,180 --> 00:05:34,450
things but at the same time you program

135
00:05:31,240 --> 00:05:36,070
it like it's basic really so if you

136
00:05:34,450 --> 00:05:38,890
remove the code on the right you can see

137
00:05:36,070 --> 00:05:40,630
the it's like jigsaw pieces so you can

138
00:05:38,890 --> 00:05:41,080
only plug together things that should go

139
00:05:40,630 --> 00:05:43,659
together

140
00:05:41,080 --> 00:05:45,820
so procedures which are the essentially

141
00:05:43,660 --> 00:05:47,380
the blocks I like jigsaw they can plug

142
00:05:45,820 --> 00:05:49,390
together but when you need a predicate

143
00:05:47,380 --> 00:05:51,039
like a true/false value then it's got

144
00:05:49,390 --> 00:05:52,599
angled brackets on the end and it only

145
00:05:51,039 --> 00:05:54,820
need to fit into a slot where there's

146
00:05:52,600 --> 00:05:56,650
angle brackets if you need a value it's

147
00:05:54,820 --> 00:05:58,570
got rounded ends and it'll only fit into

148
00:05:56,650 --> 00:06:00,640
a slot where there's rounded ends so you

149
00:05:58,570 --> 00:06:03,430
couldn't use a value where you needed a

150
00:06:00,640 --> 00:06:05,469
procedure or predicate we needed a value

151
00:06:03,430 --> 00:06:07,150
for example it kind of cos stranger in

152
00:06:05,470 --> 00:06:09,940
that sense - hopefully that you actually

153
00:06:07,150 --> 00:06:13,150
make code is likely to run even if it

154
00:06:09,940 --> 00:06:14,919
doesn't make sense if we flick to the

155
00:06:13,150 --> 00:06:16,390
data section you can see that there's a

156
00:06:14,919 --> 00:06:19,630
load of variables that have been defined

157
00:06:16,390 --> 00:06:21,190
and two of those variables Apple count

158
00:06:19,630 --> 00:06:23,260
and coin count happen to be global

159
00:06:21,190 --> 00:06:24,850
variables but they fact they've got a

160
00:06:23,260 --> 00:06:26,140
tick next to them doesn't make them glow

161
00:06:24,850 --> 00:06:29,169
but it just means that they're displayed

162
00:06:26,140 --> 00:06:32,740
on the screen so in the top in the in

163
00:06:29,169 --> 00:06:34,419
the stage you can see the coin count and

164
00:06:32,740 --> 00:06:37,630
the apple count actually on the screen

165
00:06:34,419 --> 00:06:40,130
that's what the tick means but they do

166
00:06:37,630 --> 00:06:41,659
also happen to be global variables

167
00:06:40,130 --> 00:06:44,810
rest of the variables in that section

168
00:06:41,660 --> 00:06:48,260
are local to this sprite so if I move on

169
00:06:44,810 --> 00:06:49,790
to another sprite the maze for example

170
00:06:48,260 --> 00:06:51,200
it's got different variables and if I

171
00:06:49,790 --> 00:06:52,850
cut between the two you can see the

172
00:06:51,200 --> 00:06:54,440
variables change but the Apple current

173
00:06:52,850 --> 00:06:56,870
coin cap stay there because they're

174
00:06:54,440 --> 00:06:58,219
global that's not what the tick means

175
00:06:56,870 --> 00:07:00,080
the tick means it's on the screen not

176
00:06:58,220 --> 00:07:02,750
not that they're global but they are

177
00:07:00,080 --> 00:07:05,090
global those ones in this case so each

178
00:07:02,750 --> 00:07:07,460
sprite has got its own code it's so

179
00:07:05,090 --> 00:07:09,219
variable but you can share variables

180
00:07:07,460 --> 00:07:12,950
between all the things within the thing

181
00:07:09,220 --> 00:07:16,310
basically variables can be global or

182
00:07:12,950 --> 00:07:18,349
local to a particular sprite and the

183
00:07:16,310 --> 00:07:22,370
stage is like a sprite in this case and

184
00:07:18,350 --> 00:07:24,980
blocks are all procedures there are no

185
00:07:22,370 --> 00:07:27,560
functions there's no return values which

186
00:07:24,980 --> 00:07:31,040
if you're used to writing code in a

187
00:07:27,560 --> 00:07:34,610
normal modern language and not 1986

188
00:07:31,040 --> 00:07:36,350
basic then that's a bit weird but it's

189
00:07:34,610 --> 00:07:38,630
kind of how it goes and you can make

190
00:07:36,350 --> 00:07:40,340
your own blocks in scratch - and they

191
00:07:38,630 --> 00:07:41,780
are all procedures there are no return

192
00:07:40,340 --> 00:07:42,710
values there so you do everything

193
00:07:41,780 --> 00:07:44,599
through side-effects

194
00:07:42,710 --> 00:07:46,520
you basically have global variables or

195
00:07:44,600 --> 00:07:48,680
local variables to the sprite and your

196
00:07:46,520 --> 00:07:50,150
procedure modifies the global variable

197
00:07:48,680 --> 00:07:51,590
but obviously not while another bit of

198
00:07:50,150 --> 00:07:53,239
procedure is modifying the global

199
00:07:51,590 --> 00:07:54,320
variable or reading from it because

200
00:07:53,240 --> 00:07:55,820
everything happens at once

201
00:07:54,320 --> 00:07:58,130
and everything's events living in

202
00:07:55,820 --> 00:08:00,110
multi-threaded so you end up needing

203
00:07:58,130 --> 00:08:04,190
state variables to know when to read

204
00:08:00,110 --> 00:08:05,750
global variables kids don't notice this

205
00:08:04,190 --> 00:08:07,760
because they're just too busy gave

206
00:08:05,750 --> 00:08:09,110
programming games but like for those of

207
00:08:07,760 --> 00:08:11,560
us that care about how the program

208
00:08:09,110 --> 00:08:15,050
languages work it's a it's a bit odd but

209
00:08:11,560 --> 00:08:17,840
as I say it works so let's talk briefly

210
00:08:15,050 --> 00:08:20,000
about experiment HDV extension so this

211
00:08:17,840 --> 00:08:21,890
is scratchy by the way or the scratch

212
00:08:20,000 --> 00:08:23,510
cat you know they didn't really give him

213
00:08:21,890 --> 00:08:25,550
a proper name but scratchy seems for

214
00:08:23,510 --> 00:08:30,320
what the kids call him I know I'm down

215
00:08:25,550 --> 00:08:32,030
with the kids as you bro know normally

216
00:08:30,320 --> 00:08:34,218
when you click the file menu you get

217
00:08:32,030 --> 00:08:37,459
this menu on the left but if you shift

218
00:08:34,219 --> 00:08:39,680
click it you get the super-secret file

219
00:08:37,460 --> 00:08:42,740
menu which gives you extra options one

220
00:08:39,679 --> 00:08:45,439
of which is import HD experimental HDTV

221
00:08:42,740 --> 00:08:47,120
extension and that lets you into this

222
00:08:45,440 --> 00:08:50,180
world where you can extend scratch to do

223
00:08:47,120 --> 00:08:52,400
other things the way it works is you run

224
00:08:50,180 --> 00:08:53,790
a web server on your localhost only on

225
00:08:52,400 --> 00:08:57,180
your localhost there is no

226
00:08:53,790 --> 00:09:00,180
IP address or hostname within the spec

227
00:08:57,180 --> 00:09:02,849
it's only a port number and you that's

228
00:09:00,180 --> 00:09:05,219
published to s to e file scratch -

229
00:09:02,850 --> 00:09:07,680
extension which you load in when you do

230
00:09:05,220 --> 00:09:09,510
that import exponent HTTP extension and

231
00:09:07,680 --> 00:09:11,219
then from there one which it adds blocks

232
00:09:09,510 --> 00:09:13,590
and then when you use those blocks it

233
00:09:11,220 --> 00:09:15,720
runs those as procedures against that

234
00:09:13,590 --> 00:09:18,030
web server and the web server does the

235
00:09:15,720 --> 00:09:20,310
stuff that you've asked it to do but the

236
00:09:18,030 --> 00:09:22,170
web server also exposes variables

237
00:09:20,310 --> 00:09:26,040
essentially global variables for that

238
00:09:22,170 --> 00:09:30,780
extension and they are polled 30 times a

239
00:09:26,040 --> 00:09:35,219
second over a web api yes 30 times a

240
00:09:30,780 --> 00:09:38,730
second it seems insane and it and it

241
00:09:35,220 --> 00:09:41,910
kind of is but so far it's never bit me

242
00:09:38,730 --> 00:09:43,560
on the ass so you generally use it like

243
00:09:41,910 --> 00:09:45,750
this you generally invoke procedures

244
00:09:43,560 --> 00:09:47,400
that do things they affect global

245
00:09:45,750 --> 00:09:49,140
variables within the extension and you

246
00:09:47,400 --> 00:09:50,760
pull those safety times a second and use

247
00:09:49,140 --> 00:09:54,360
those in your code to stop your code

248
00:09:50,760 --> 00:09:56,250
doing stuff when they change the reason

249
00:09:54,360 --> 00:09:58,590
that I mean this entire architecture is

250
00:09:56,250 --> 00:10:00,480
built for things like robot arms robot

251
00:09:58,590 --> 00:10:02,160
arms make perfect sense like you know if

252
00:10:00,480 --> 00:10:04,110
you want to move a robot arm move a

253
00:10:02,160 --> 00:10:05,040
motor there's no feedback there's no

254
00:10:04,110 --> 00:10:07,680
return value

255
00:10:05,040 --> 00:10:09,959
it's simply move the motor by a certain

256
00:10:07,680 --> 00:10:12,420
number of degrees but then there's also

257
00:10:09,960 --> 00:10:15,600
things like limit switches now if you

258
00:10:12,420 --> 00:10:17,069
hit crashing to a limit and you want to

259
00:10:15,600 --> 00:10:19,740
know if you're flashing to a limit for

260
00:10:17,070 --> 00:10:21,540
each soon hence the pauling theta times

261
00:10:19,740 --> 00:10:23,670
a second so you this is kind of what

262
00:10:21,540 --> 00:10:25,410
it's built for I guess that kind of

263
00:10:23,670 --> 00:10:26,699
makes some sort of sense clearly not to

264
00:10:25,410 --> 00:10:28,410
the two people they're just left because

265
00:10:26,700 --> 00:10:29,700
they're thinking it should be a hacky

266
00:10:28,410 --> 00:10:32,130
talk these two be talking about

267
00:10:29,700 --> 00:10:40,500
scratching robot arms and they have left

268
00:10:32,130 --> 00:10:44,070
one slide too early same for you because

269
00:10:40,500 --> 00:10:47,690
I thought what if you replaced that

270
00:10:44,070 --> 00:10:50,670
robot arm control with tcp/ip sockets

271
00:10:47,690 --> 00:10:53,520
now could you not like a loop in a

272
00:10:50,670 --> 00:10:54,810
socket and write to a socket and read

273
00:10:53,520 --> 00:10:55,980
from a socket of course when you read

274
00:10:54,810 --> 00:10:57,420
from a socket because these are

275
00:10:55,980 --> 00:10:59,130
procedures they're not functions there's

276
00:10:57,420 --> 00:11:00,479
no return value you can't let go read

277
00:10:59,130 --> 00:11:02,540
from socket and get the value back you

278
00:11:00,480 --> 00:11:05,370
have to go read from socket and then

279
00:11:02,540 --> 00:11:06,839
parlor state variable until the state

280
00:11:05,370 --> 00:11:07,590
variable has changed to say that the

281
00:11:06,840 --> 00:11:09,420
data is now in

282
00:11:07,590 --> 00:11:10,770
buffer and then read the data from the

283
00:11:09,420 --> 00:11:12,240
buffer that it's been affected as a

284
00:11:10,770 --> 00:11:15,600
global variable I mean it's not

285
00:11:12,240 --> 00:11:20,670
straightforward would that work as a as

286
00:11:15,600 --> 00:11:22,110
a system and yes is the answer so the

287
00:11:20,670 --> 00:11:26,160
easy way to implement this is through

288
00:11:22,110 --> 00:11:27,930
the Python block xed module which is

289
00:11:26,160 --> 00:11:30,150
available on github it's technically

290
00:11:27,930 --> 00:11:31,469
deprecated they've got lots of messages

291
00:11:30,150 --> 00:11:33,540
on their site saying don't use it but

292
00:11:31,470 --> 00:11:36,000
ignore that it all works

293
00:11:33,540 --> 00:11:40,020
I wouldn't install it from a Linux

294
00:11:36,000 --> 00:11:42,690
distro I would go to the github and

295
00:11:40,020 --> 00:11:45,420
clone it or download it and install it

296
00:11:42,690 --> 00:11:46,980
using the setup I because I've had all

297
00:11:45,420 --> 00:11:51,329
sorts of problems installing it from a

298
00:11:46,980 --> 00:11:52,740
distro arch Debian etc but if you

299
00:11:51,330 --> 00:11:56,130
actually just get the Python in just

300
00:11:52,740 --> 00:11:58,050
like you know sudo item set up got PI

301
00:11:56,130 --> 00:12:01,290
install it just installs and it just

302
00:11:58,050 --> 00:12:03,990
works right so the fact it's deprecated

303
00:12:01,290 --> 00:12:06,089
not a problem they link to a tutorial

304
00:12:03,990 --> 00:12:09,480
that actually explains how it works

305
00:12:06,090 --> 00:12:12,540
as in up-to-date advice you know link

306
00:12:09,480 --> 00:12:14,550
into the actual API definitions which is

307
00:12:12,540 --> 00:12:16,949
more than enough information to do this

308
00:12:14,550 --> 00:12:19,349
kind of stuff and what you end up

309
00:12:16,950 --> 00:12:22,140
writing is something like this so this

310
00:12:19,350 --> 00:12:25,470
would be your Python script obviously at

311
00:12:22,140 --> 00:12:28,470
the top we import block xed module the

312
00:12:25,470 --> 00:12:30,990
green bit where you define a class there

313
00:12:28,470 --> 00:12:32,280
of procedure or functions right and so

314
00:12:30,990 --> 00:12:33,990
some of those functions will will be

315
00:12:32,280 --> 00:12:36,030
procedures which don't have a return

316
00:12:33,990 --> 00:12:37,290
value but they do stuff now some of

317
00:12:36,030 --> 00:12:39,660
those functions will be things that

318
00:12:37,290 --> 00:12:41,990
return the value of a global variable a

319
00:12:39,660 --> 00:12:45,630
Python variable from within the class

320
00:12:41,990 --> 00:12:48,210
then in yellow we create descriptor

321
00:12:45,630 --> 00:12:51,480
which is from the module which basically

322
00:12:48,210 --> 00:12:53,880
names it gives it a port tells it what

323
00:12:51,480 --> 00:12:55,800
blocks you're going to provide and the

324
00:12:53,880 --> 00:12:58,590
menus which provide the drop-down menus

325
00:12:55,800 --> 00:13:00,599
within the blocks right and then the

326
00:12:58,590 --> 00:13:02,520
next line in white joins the class to

327
00:13:00,600 --> 00:13:05,010
the descriptor and the last line runs it

328
00:13:02,520 --> 00:13:06,780
it's as simple as that and to show you

329
00:13:05,010 --> 00:13:09,000
how simple it is I have an example using

330
00:13:06,780 --> 00:13:11,010
say and obviously if you have a Mac you

331
00:13:09,000 --> 00:13:13,350
know say cuz you can make your computer

332
00:13:11,010 --> 00:13:16,110
talk especially if you have a Mac is

333
00:13:13,350 --> 00:13:17,460
that you can log into remotely and you

334
00:13:16,110 --> 00:13:18,720
log in to a remotely and make you talk

335
00:13:17,460 --> 00:13:20,610
to somebody else when they're not

336
00:13:18,720 --> 00:13:23,759
expecting it so

337
00:13:20,610 --> 00:13:26,489
the clasp or scratch say is literally

338
00:13:23,759 --> 00:13:28,559
this it's kind of like it has one

339
00:13:26,489 --> 00:13:32,160
function one procedure which is safe

340
00:13:28,559 --> 00:13:33,719
right and the block definition is kind

341
00:13:32,160 --> 00:13:37,290
of like this which is a simple

342
00:13:33,720 --> 00:13:40,439
description basically the block is say a

343
00:13:37,290 --> 00:13:43,829
message % s % s is replaced with a

344
00:13:40,439 --> 00:13:46,259
message that you type in with voice %

345
00:13:43,829 --> 00:13:48,599
and got voices % m replaced with menus

346
00:13:46,259 --> 00:13:50,639
so basically within the in the block

347
00:13:48,600 --> 00:13:52,920
description you can have percent s where

348
00:13:50,639 --> 00:13:54,749
a user could provide a string percent n

349
00:13:52,920 --> 00:13:58,439
where they could provide a number and

350
00:13:54,749 --> 00:13:59,850
percent m dots the name of a menu where

351
00:13:58,439 --> 00:14:01,920
you can provide the details for a

352
00:13:59,850 --> 00:14:03,540
drop-down menu so you can constrain what

353
00:14:01,920 --> 00:14:06,569
they can put in that particular one and

354
00:14:03,540 --> 00:14:09,660
the you also provide the menus which as

355
00:14:06,569 --> 00:14:12,360
a dictionary and that plays a little bit

356
00:14:09,660 --> 00:14:15,600
of script basically grips up all the

357
00:14:12,360 --> 00:14:17,399
English voices that say you can use and

358
00:14:15,600 --> 00:14:21,239
stick some into a list which is then

359
00:14:17,399 --> 00:14:23,730
used so the whole example for making

360
00:14:21,239 --> 00:14:26,129
your scratch program be able to speak

361
00:14:23,730 --> 00:14:28,079
from a Mac is that that is the entire

362
00:14:26,129 --> 00:14:32,819
Python script using that module it's

363
00:14:28,079 --> 00:14:34,349
very very simple you won't when you run

364
00:14:32,819 --> 00:14:37,079
it up it sits on the port that you've

365
00:14:34,350 --> 00:14:39,509
told it for 5,000 G browse to that and

366
00:14:37,079 --> 00:14:41,099
it literally lets you download the

367
00:14:39,509 --> 00:14:44,399
scratch to extension or the

368
00:14:41,100 --> 00:14:46,319
snap blocks extension I don't use snap

369
00:14:44,399 --> 00:14:48,179
or new scratch but you can download it

370
00:14:46,319 --> 00:14:49,559
from there you get the s2e file which is

371
00:14:48,179 --> 00:14:52,410
the thing you load into scratch using

372
00:14:49,559 --> 00:14:56,249
the import experimental extensions menu

373
00:14:52,410 --> 00:14:58,649
item the file looks like this

374
00:14:56,249 --> 00:15:00,480
it's just JSON I mean obviously it's got

375
00:14:58,649 --> 00:15:03,029
the space ISM and I've pre printed that

376
00:15:00,480 --> 00:15:07,829
but like it's basically so the menu is a

377
00:15:03,029 --> 00:15:09,660
list of all the voices deport the block

378
00:15:07,829 --> 00:15:12,419
the name you know it's pretty simple

379
00:15:09,660 --> 00:15:15,389
so we're quick quick demo this is the

380
00:15:12,419 --> 00:15:18,299
this is the test to see if I am sober

381
00:15:15,389 --> 00:15:20,040
enough to do demos because if not I've

382
00:15:18,299 --> 00:15:22,169
got screenshots and we can skip the

383
00:15:20,040 --> 00:15:31,759
entire proper demo but we're going to

384
00:15:22,169 --> 00:15:31,759
try and do a demo so right

385
00:15:39,970 --> 00:15:53,930
this is like I can do this I tell you I

386
00:15:45,740 --> 00:15:55,820
can do this okay I put it to speak right

387
00:15:53,930 --> 00:15:59,439
so that's going to listen on port 5000

388
00:15:55,820 --> 00:16:01,760
now we need to go and use scratch

389
00:15:59,440 --> 00:16:03,620
it's like you can either look under the

390
00:16:01,760 --> 00:16:04,850
lectern at the screen or you can look at

391
00:16:03,620 --> 00:16:07,910
this one that noise it was actually

392
00:16:04,850 --> 00:16:11,329
useful and so what we're gonna do is

393
00:16:07,910 --> 00:16:25,760
import the extension so I'll shift click

394
00:16:11,329 --> 00:16:27,888
this and now if I go to more blocks we

395
00:16:25,760 --> 00:16:29,449
now have a new block which is to speak

396
00:16:27,889 --> 00:16:32,839
out loud say okay

397
00:16:29,449 --> 00:16:34,310
so McQuaid quick this I mean this demo

398
00:16:32,839 --> 00:16:36,410
is the shortest thing in the world and

399
00:16:34,310 --> 00:16:39,229
if you're waiting for the hacking bit

400
00:16:36,410 --> 00:16:45,260
don't worry it's coming so when I press

401
00:16:39,230 --> 00:17:03,050
the spacebar say something and that

402
00:16:45,260 --> 00:17:06,410
something will be so please give

403
00:17:03,050 --> 00:17:08,959
generously you're bastards so now you

404
00:17:06,410 --> 00:17:11,150
can make your scratch speak through the

405
00:17:08,959 --> 00:17:12,919
wonders of Python and block edged right

406
00:17:11,150 --> 00:17:15,230
so the that's just to show that the

407
00:17:12,919 --> 00:17:17,209
extension works like the module works

408
00:17:15,230 --> 00:17:19,760
it's as simple as that with it with that

409
00:17:17,209 --> 00:17:22,309
tiny one-page amount of fighting we can

410
00:17:19,760 --> 00:17:24,379
extend Python we can extend scratch

411
00:17:22,309 --> 00:17:28,660
sorry so if we cut back to the slides

412
00:17:24,380 --> 00:17:31,309
so scratch sockets I created a class

413
00:17:28,660 --> 00:17:33,620
which can do these kind of things this

414
00:17:31,309 --> 00:17:35,629
isn't the full list like it's hard to

415
00:17:33,620 --> 00:17:38,059
fit on a slide but these are the kind of

416
00:17:35,630 --> 00:17:40,700
things I added like create socket right

417
00:17:38,059 --> 00:17:44,240
socket rectify socket read line socket

418
00:17:40,700 --> 00:17:45,500
etc and I've actually got the fight and

419
00:17:44,240 --> 00:17:47,450
for some of these functions

420
00:17:45,500 --> 00:17:50,960
just to show you how simple it is but

421
00:17:47,450 --> 00:17:54,760
basically create socket literally uses s

422
00:17:50,960 --> 00:17:58,820
connect to create a socket right socket

423
00:17:54,760 --> 00:18:00,290
takes your data encodes it in decodes it

424
00:17:58,820 --> 00:18:02,990
from the format you've given it because

425
00:18:00,290 --> 00:18:04,790
scratch has no binary formats right so

426
00:18:02,990 --> 00:18:06,500
if you want to send bytes beyond the

427
00:18:04,790 --> 00:18:08,600
ASCII range you need some kind of

428
00:18:06,500 --> 00:18:11,080
encoding so I've built in like base64

429
00:18:08,600 --> 00:18:13,939
URL encoding C encoding etcetera right

430
00:18:11,080 --> 00:18:18,230
so you know Python just decodes that and

431
00:18:13,940 --> 00:18:20,810
then Chuck's it out with a socket not

432
00:18:18,230 --> 00:18:24,080
send essentially equally if you want to

433
00:18:20,810 --> 00:18:25,790
receive it uses socket receive and

434
00:18:24,080 --> 00:18:28,250
Chuck's it into a buffer it's got some

435
00:18:25,790 --> 00:18:30,080
flags in order to say if it's still

436
00:18:28,250 --> 00:18:32,180
reading if it's finished reading if the

437
00:18:30,080 --> 00:18:33,889
sockets dead that sort of thing and then

438
00:18:32,180 --> 00:18:36,380
read buff which actually reads the

439
00:18:33,890 --> 00:18:39,350
buffer of the stuff that you've just

440
00:18:36,380 --> 00:18:40,850
wrecked feed will encode it in the

441
00:18:39,350 --> 00:18:42,110
format that you want to encode it in so

442
00:18:40,850 --> 00:18:43,129
that scratch can actually deal with it

443
00:18:42,110 --> 00:18:44,750
because obviously like say it's got a

444
00:18:43,130 --> 00:18:47,030
binary type so if you've read binary

445
00:18:44,750 --> 00:18:48,980
data you need to encode it with like URL

446
00:18:47,030 --> 00:18:51,860
or basics before seeing coding or

447
00:18:48,980 --> 00:18:53,360
something on those lines they're

448
00:18:51,860 --> 00:18:55,580
descriptor for it looks a bit like this

449
00:18:53,360 --> 00:18:57,379
it's called scratch sockets port 5,000

450
00:18:55,580 --> 00:18:59,780
we have blocks this is just one of the

451
00:18:57,380 --> 00:19:01,220
blocks but there'd be a block for every

452
00:18:59,780 --> 00:19:02,810
function you could do so the crater

453
00:19:01,220 --> 00:19:06,770
socket is a command block which means

454
00:19:02,810 --> 00:19:09,200
it's a procedure and it's create proto

455
00:19:06,770 --> 00:19:11,540
as a drop-down menu connection to socket

456
00:19:09,200 --> 00:19:13,550
number as a menu I was going to use file

457
00:19:11,540 --> 00:19:16,159
descriptors but I thought that was

458
00:19:13,550 --> 00:19:17,540
probably overkill like who really needs

459
00:19:16,160 --> 00:19:19,370
more than five sockets when you're

460
00:19:17,540 --> 00:19:20,930
writing an exploit if you need more than

461
00:19:19,370 --> 00:19:23,600
five you can extend it easily but like

462
00:19:20,930 --> 00:19:26,900
merely you know so make that a drop-down

463
00:19:23,600 --> 00:19:28,520
to simplify things the host name is the

464
00:19:26,900 --> 00:19:30,920
string the port number is a number

465
00:19:28,520 --> 00:19:32,240
there's two folks for that and it gives

466
00:19:30,920 --> 00:19:34,430
you a block that looks a bit like that

467
00:19:32,240 --> 00:19:36,410
so literally in scratch you can create

468
00:19:34,430 --> 00:19:38,030
TCP connections which scratch is a

469
00:19:36,410 --> 00:19:39,350
sandboxed environment you're not

470
00:19:38,030 --> 00:19:42,860
supposed to be able to break out of it

471
00:19:39,350 --> 00:19:44,959
and do nasty things you know for those

472
00:19:42,860 --> 00:19:46,969
nefarious seven-year-old hackers you're

473
00:19:44,960 --> 00:19:48,590
not supposed to be able to talk to other

474
00:19:46,970 --> 00:19:50,990
people's computers but you know using

475
00:19:48,590 --> 00:19:53,030
this you kind of can and then of

476
00:19:50,990 --> 00:19:55,910
addiction move of menus for like the

477
00:19:53,030 --> 00:19:57,290
types of encoding the protocols etc so

478
00:19:55,910 --> 00:19:58,580
when you've loaded those blocks into

479
00:19:57,290 --> 00:19:59,290
scratch when you've installed the

480
00:19:58,580 --> 00:20:00,879
extension

481
00:19:59,290 --> 00:20:04,360
get all of these blocks into more blocks

482
00:20:00,880 --> 00:20:06,250
and some of them procedures which are

483
00:20:04,360 --> 00:20:08,139
the ones in like jigsaw pieces we've got

484
00:20:06,250 --> 00:20:10,480
predicates we've got angle brackets and

485
00:20:08,140 --> 00:20:12,550
we've got values which are the things

486
00:20:10,480 --> 00:20:18,100
that we've returned which also include

487
00:20:12,550 --> 00:20:20,740
state variables so let's hack what we're

488
00:20:18,100 --> 00:20:22,480
gonna hack today so scratch talk to a

489
00:20:20,740 --> 00:20:24,370
web server which is running block X

490
00:20:22,480 --> 00:20:26,590
which is on the localhost and then it

491
00:20:24,370 --> 00:20:28,540
goes on words to talk to another machine

492
00:20:26,590 --> 00:20:31,899
and that other machine is tiny spike

493
00:20:28,540 --> 00:20:33,460
from sawmill sha of net square and this

494
00:20:31,900 --> 00:20:35,980
is part of his exploit lab it's tiny

495
00:20:33,460 --> 00:20:40,540
exploit one you can get it spoiler alert

496
00:20:35,980 --> 00:20:42,490
I will be hacking it if you are going to

497
00:20:40,540 --> 00:20:46,510
hack it yourself then I might be giving

498
00:20:42,490 --> 00:20:48,400
away how you want to do that shall we do

499
00:20:46,510 --> 00:20:49,930
the demo it's only ten past eight I'm

500
00:20:48,400 --> 00:20:51,940
technically here for another twenty

501
00:20:49,930 --> 00:20:54,940
minutes so I think we should should try

502
00:20:51,940 --> 00:21:05,830
and do it live she's hilarious when you

503
00:20:54,940 --> 00:21:10,930
think about it that is tiny sploit it's

504
00:21:05,830 --> 00:21:19,899
time for so what is that in my beer so

505
00:21:10,930 --> 00:21:23,650
someone's cigarette actually never ever

506
00:21:19,900 --> 00:21:31,570
hacks over right so I'm tiny exploit you

507
00:21:23,650 --> 00:21:33,070
log in we type yes we can see there's

508
00:21:31,570 --> 00:21:42,939
processes running the one we care about

509
00:21:33,070 --> 00:21:44,980
is the HTTP D we can see that there's a

510
00:21:42,940 --> 00:21:49,210
webserver listening on port 80 that's

511
00:21:44,980 --> 00:21:56,580
what we're going to connect to so the

512
00:21:49,210 --> 00:22:04,450
first thing we'll do is set gdb on it

513
00:21:56,580 --> 00:22:07,270
711 and then in scratch where's my mouse

514
00:22:04,450 --> 00:22:11,100
pointer gone there is one last point

515
00:22:07,270 --> 00:22:11,100
yeah ah okay

516
00:22:11,360 --> 00:22:14,360
right

517
00:22:28,140 --> 00:22:32,610
so the first thing we want to do is

518
00:22:29,790 --> 00:22:34,350
crash it yeah cuz like you know where

519
00:22:32,610 --> 00:22:36,780
else do you start if you do it's a stack

520
00:22:34,350 --> 00:22:38,010
smash so I'll let you let you into a

521
00:22:36,780 --> 00:22:41,220
secret if you're going to crash tiny

522
00:22:38,010 --> 00:22:43,500
split it's a stack smash right so the

523
00:22:41,220 --> 00:22:45,150
first we're going to do is crash it can

524
00:22:43,500 --> 00:22:49,260
you read this or do I need to make it

525
00:22:45,150 --> 00:22:51,240
figure bigger would be better

526
00:22:49,260 --> 00:23:03,240
can anyone remember how to like zoom a

527
00:22:51,240 --> 00:23:08,490
Mac ctrl Alt + right so is that better

528
00:23:03,240 --> 00:23:11,250
yeah yes okay so this is all of the

529
00:23:08,490 --> 00:23:13,110
scratch code to crash it basically you

530
00:23:11,250 --> 00:23:16,470
would fuzz it normally you'd normally

531
00:23:13,110 --> 00:23:19,709
guess the length has been like 10 20 30

532
00:23:16,470 --> 00:23:22,110
40 50 and wait until it crashes but I

533
00:23:19,710 --> 00:23:26,820
guess mm because I'm a bit Cavalier and

534
00:23:22,110 --> 00:23:30,389
lazy and it works at 2,000 so I've

535
00:23:26,820 --> 00:23:32,428
created my own procedure here in more

536
00:23:30,390 --> 00:23:34,650
blocked section I'll click on it I'll

537
00:23:32,429 --> 00:23:36,660
show you more blocks I made a block you

538
00:23:34,650 --> 00:23:39,419
can make block or create a buff and

539
00:23:36,660 --> 00:23:43,620
here's create a birth and all that does

540
00:23:39,419 --> 00:23:47,340
is sets the a buff to the number of

541
00:23:43,620 --> 00:23:51,389
capital a's that is equal to size which

542
00:23:47,340 --> 00:23:53,760
we call it with alright so I wanted 2000

543
00:23:51,390 --> 00:23:58,140
days I've got 2,000 days and then I'll

544
00:23:53,760 --> 00:24:02,250
set my date at buffer to get slash 2008

545
00:23:58,140 --> 00:24:06,360
followed by HTTP slash wanted 0 battling

546
00:24:02,250 --> 00:24:12,150
but I saying and then I'm going to make

547
00:24:06,360 --> 00:24:19,500
a connection to a host 102 and it's on

548
00:24:12,150 --> 00:24:21,720
port 80 clearly and then it waits until

549
00:24:19,500 --> 00:24:24,059
that sockets connected because you know

550
00:24:21,720 --> 00:24:26,340
who knows how long that will take it

551
00:24:24,059 --> 00:24:29,580
writes it as a singing code your string

552
00:24:26,340 --> 00:24:31,649
because you know when we start doing

553
00:24:29,580 --> 00:24:33,389
exploit in will need to be saying coded

554
00:24:31,650 --> 00:24:37,050
wait for a couple of seconds and then

555
00:24:33,390 --> 00:24:41,910
quits so if I use if that back down in

556
00:24:37,050 --> 00:24:44,909
this window here you'll see what I say

557
00:24:41,910 --> 00:24:47,670
and and in this window here you'll see

558
00:24:44,910 --> 00:24:55,340
it crash if I've done it quickly so I'm

559
00:24:47,670 --> 00:24:58,340
gonna hit space meaning that go you did

560
00:24:55,340 --> 00:24:58,340
what

561
00:25:01,640 --> 00:25:09,780
slightly concerned what's happened over

562
00:25:06,240 --> 00:25:17,040
here yeah well they're not 102 but did I

563
00:25:09,780 --> 00:25:19,710
miss that neither is the bonus demo is

564
00:25:17,040 --> 00:25:31,100
not gonna work clearly somewhere I

565
00:25:19,710 --> 00:25:31,100
checked the IP address okay right honest

566
00:25:31,940 --> 00:25:39,600
we can do this

567
00:25:35,120 --> 00:25:42,000
56 not 102 right so if anyone spots my

568
00:25:39,600 --> 00:25:47,669
obvious error then do shout out what it

569
00:25:42,000 --> 00:25:56,340
is that's the right IP address that

570
00:25:47,670 --> 00:26:01,230
should be able to see it okay that is

571
00:25:56,340 --> 00:26:02,389
the right IP address port 80 sounds

572
00:26:01,230 --> 00:26:05,260
about right

573
00:26:02,390 --> 00:26:08,440
so what was going on in this window yeah

574
00:26:05,260 --> 00:26:08,440
[Music]

575
00:26:08,900 --> 00:26:14,430
why can't I out of that okay this is

576
00:26:12,930 --> 00:26:23,760
making me look super professional though

577
00:26:14,430 --> 00:26:25,640
I do apologize right am i you shipped

578
00:26:23,760 --> 00:26:29,879
load in but that sort of got it loads in

579
00:26:25,640 --> 00:26:32,130
that would normally work crate that it

580
00:26:29,880 --> 00:26:33,600
says oh I've got the wrong extension oh

581
00:26:32,130 --> 00:26:35,850
dude I've got the wrong one in this

582
00:26:33,600 --> 00:26:41,129
window that's what it is right we'll be

583
00:26:35,850 --> 00:26:44,189
fine right switching to what mirrored

584
00:26:41,130 --> 00:26:45,210
I'll be fine honestly right we have the

585
00:26:44,190 --> 00:26:47,780
right extension noted

586
00:26:45,210 --> 00:26:55,140
well don't him bye Tim a beer someone

587
00:26:47,780 --> 00:26:59,820
right so we'll reconnect that process

588
00:26:55,140 --> 00:27:04,340
right in scratch oh now it's stopped

589
00:26:59,820 --> 00:27:09,899
obviously stop right

590
00:27:04,340 --> 00:27:11,399
loads of A's process crashed at four one

591
00:27:09,900 --> 00:27:14,130
four more four more four one right so

592
00:27:11,400 --> 00:27:16,260
we've actually sent a packet to the web

593
00:27:14,130 --> 00:27:18,270
server and it has crashed with four more

594
00:27:16,260 --> 00:27:20,820
4 & 4 & 4 which is obviously four caps

595
00:27:18,270 --> 00:27:24,720
lays right so we're in business

596
00:27:20,820 --> 00:27:27,389
aren't we yeah so the next thing we want

597
00:27:24,720 --> 00:27:30,179
to do is we want to we know that we can

598
00:27:27,390 --> 00:27:31,860
overwrite a IP with something in our

599
00:27:30,179 --> 00:27:34,919
buffer so we were nowhere in our buffer

600
00:27:31,860 --> 00:27:40,080
over writing it so the next thing to do

601
00:27:34,919 --> 00:27:48,410
whoops not safe okay the next thing we

602
00:27:40,080 --> 00:27:52,428
do is we refined where that is in memory

603
00:27:48,410 --> 00:27:55,500
so we create an enormous amount of code

604
00:27:52,429 --> 00:27:58,650
so scratch doesn't have hexadecimal

605
00:27:55,500 --> 00:28:01,049
numbers and it doesn't also have a ASCII

606
00:27:58,650 --> 00:28:03,179
2 hex decimal conversion or a decimal to

607
00:28:01,049 --> 00:28:04,590
hexadecimal conversion which is really

608
00:28:03,179 --> 00:28:07,320
annoying so you have to write your own

609
00:28:04,590 --> 00:28:09,030
so a lot of this functions here this

610
00:28:07,320 --> 00:28:11,070
this is creating a pattern a non

611
00:28:09,030 --> 00:28:15,178
repeating pattern very much like msf

612
00:28:11,070 --> 00:28:17,428
patent dot RB which you know will create

613
00:28:15,179 --> 00:28:19,710
set your days worth of normal P in

614
00:28:17,429 --> 00:28:21,960
pattern data like Triplets of like

615
00:28:19,710 --> 00:28:27,090
largely a couple a location letter

616
00:28:21,960 --> 00:28:29,460
number but when you send it when you

617
00:28:27,090 --> 00:28:31,649
search when you look try and look it up

618
00:28:29,460 --> 00:28:34,580
you've actually got to take your hex

619
00:28:31,650 --> 00:28:36,870
number and convert it back to a ski

620
00:28:34,580 --> 00:28:38,159
somehow and that involves writing a

621
00:28:36,870 --> 00:28:40,280
whole load of scratch to do that which

622
00:28:38,160 --> 00:28:45,169
is what I've done there but basically

623
00:28:40,280 --> 00:28:45,168
don't preach it mm-hmm

624
00:28:45,230 --> 00:28:49,380
he's right the money said you should

625
00:28:47,490 --> 00:28:52,590
mirror your display was actually correct

626
00:28:49,380 --> 00:28:58,580
but anyway regardless so if we find this

627
00:28:52,590 --> 00:28:58,580
we just need fill in the host

628
00:29:01,230 --> 00:29:10,289
and the port number and then we can send

629
00:29:07,519 --> 00:29:12,450
our pattern buffer instead so we've said

630
00:29:10,289 --> 00:29:14,158
of send in 2008 we're going to send a

631
00:29:12,450 --> 00:29:16,649
pan but for this 2000 characters long

632
00:29:14,159 --> 00:29:21,179
which does not repeat ever within that

633
00:29:16,649 --> 00:29:24,889
2,000 characters so we connected to gdb

634
00:29:21,179 --> 00:29:27,240
again no we're not let's reconnect gdb

635
00:29:24,889 --> 00:29:28,168
we're now going to crash it again but

636
00:29:27,240 --> 00:29:29,600
this time we're going to crash it in

637
00:29:28,169 --> 00:29:32,700
spectacular fashion

638
00:29:29,600 --> 00:29:38,070
so hits space here you can see a number

639
00:29:32,700 --> 00:29:44,159
P in pattern buffer yeah over here we

640
00:29:38,070 --> 00:29:46,710
can see it's crashed at 64 137 6 C right

641
00:29:44,159 --> 00:29:52,230
which is and if we were to examine the

642
00:29:46,710 --> 00:29:53,970
top of the stack we've got a value for

643
00:29:52,230 --> 00:30:00,120
the top of the stack right so what we

644
00:29:53,970 --> 00:30:04,019
want to do is flip those up so maybe

645
00:30:00,120 --> 00:30:08,010
we'll maybe we can move this no we can't

646
00:30:04,019 --> 00:30:24,110
move that 6 C 4 1 3 7 6 T can we all

647
00:30:08,010 --> 00:30:29,720
remember that 64 1 anyone remember 3 766

648
00:30:24,110 --> 00:30:29,719
c43 760 yeah 3 7-6

649
00:30:30,860 --> 00:30:39,178
location 3 5 2 so we should write that

650
00:30:35,039 --> 00:30:43,590
down if anyone's got a pen and a piece

651
00:30:39,179 --> 00:30:45,899
of paper this is how live demo is we

652
00:30:43,590 --> 00:30:49,610
actually need to make notes as we go so

653
00:30:45,899 --> 00:30:53,760
location is 352 I feel like a magician

654
00:30:49,610 --> 00:31:02,279
right now is then I've got pin that

655
00:30:53,760 --> 00:31:06,450
works this will go down in history in 44

656
00:31:02,279 --> 00:31:09,570
cons lexicon 352 right ok now we'll do

657
00:31:06,450 --> 00:31:11,010
the same thing and this time we want to

658
00:31:09,570 --> 00:31:13,840
know like what's on the top of the stack

659
00:31:11,010 --> 00:31:21,990
right so 3 964

660
00:31:13,840 --> 00:31:24,879
one three eight three nine three eight

661
00:31:21,990 --> 00:31:27,039
position three five six which as you

662
00:31:24,880 --> 00:31:29,500
might notice is four bytes after the

663
00:31:27,039 --> 00:31:31,870
three five two that means if we put if

664
00:31:29,500 --> 00:31:33,970
we put a value at location 3 5 2 in the

665
00:31:31,870 --> 00:31:35,799
buffer that will end up in our

666
00:31:33,970 --> 00:31:37,570
instruction pointer that's where code is

667
00:31:35,799 --> 00:31:40,360
going to continue to execute form and

668
00:31:37,570 --> 00:31:42,939
position 3 5 6 which is literally after

669
00:31:40,360 --> 00:31:45,789
it in the buffer is the top of the stack

670
00:31:42,940 --> 00:31:47,440
so if we could put our shellcode at the

671
00:31:45,789 --> 00:31:50,408
top of the stack and somehow we could

672
00:31:47,440 --> 00:31:52,690
jump to the top of the stack at position

673
00:31:50,409 --> 00:31:54,909
3 5 6 we would have executed shellcode

674
00:31:52,690 --> 00:31:59,399
so in order to do that we probably want

675
00:31:54,909 --> 00:31:59,399
to find a jump ESP instruction within

676
00:32:00,029 --> 00:32:07,539
the binary right well obviously it's got

677
00:32:03,250 --> 00:32:10,630
a linked Lib Caesar I think it's got a

678
00:32:07,539 --> 00:32:12,158
link to Lipsy yeah yeah that looks

679
00:32:10,630 --> 00:32:16,750
remarkably different what it did the

680
00:32:12,159 --> 00:32:33,220
other day anyway so we'll quickly search

681
00:32:16,750 --> 00:32:41,140
Lib C b7 easy 5 D anyone remember a jump

682
00:32:33,220 --> 00:32:44,770
ESP instruction is c4 no I needed a

683
00:32:41,140 --> 00:32:49,179
comma don't do this when you've been

684
00:32:44,770 --> 00:32:51,429
drinking Guinness is it there yes and

685
00:32:49,179 --> 00:32:53,320
there's loads of jump ESP instructions

686
00:32:51,429 --> 00:33:02,080
so we'll write down the first one which

687
00:32:53,320 --> 00:33:04,480
is o X we nee 7 e c7 a 5 1 so basically

688
00:33:02,080 --> 00:33:06,760
they are all jump ESP instructors if we

689
00:33:04,480 --> 00:33:09,100
could land our execution our instruction

690
00:33:06,760 --> 00:33:11,320
pointer on one of those it would execute

691
00:33:09,100 --> 00:33:12,850
the instruction jump ESP it would jump

692
00:33:11,320 --> 00:33:14,379
to the stack pointer and the stack point

693
00:33:12,850 --> 00:33:17,199
you can take will contain our shellcode

694
00:33:14,380 --> 00:33:17,799
it will run our shell code stuff will

695
00:33:17,200 --> 00:33:20,049
happen

696
00:33:17,799 --> 00:33:22,840
no not stairs required it literally

697
00:33:20,049 --> 00:33:27,309
return to live see Allan 1995 it will

698
00:33:22,840 --> 00:33:27,830
work right you know this VM has no

699
00:33:27,309 --> 00:33:31,760
protection

700
00:33:27,830 --> 00:33:37,039
no NX or a SLR or any any stack Canaries

701
00:33:31,760 --> 00:33:41,870
or anything clever and so we could then

702
00:33:37,039 --> 00:33:42,980
probably where's my last point and we'll

703
00:33:41,870 --> 00:33:46,428
see the mouse point if there's a nice

704
00:33:42,980 --> 00:33:50,080
point right so let's let's kind of do

705
00:33:46,429 --> 00:33:52,880
that let's do it

706
00:33:50,080 --> 00:34:00,949
I'm excited even if you're not excited

707
00:33:52,880 --> 00:34:04,039
okay so I wrote an exploit you know

708
00:34:00,950 --> 00:34:05,299
because I like buying exploits but and I

709
00:34:04,039 --> 00:34:07,100
find that scratch is the easiest

710
00:34:05,299 --> 00:34:09,500
language to ie exploits in it's less

711
00:34:07,100 --> 00:34:11,149
than poison and it's definitely less

712
00:34:09,500 --> 00:34:13,550
than C right

713
00:34:11,149 --> 00:34:15,409
I mean all of that stuff there is

714
00:34:13,550 --> 00:34:17,720
literally sticking 8 bytes at a time

715
00:34:15,409 --> 00:34:19,399
into a shellcode variable only so it

716
00:34:17,719 --> 00:34:21,138
fits on the screen you could do all in

717
00:34:19,399 --> 00:34:23,359
one line it's really is that simple

718
00:34:21,139 --> 00:34:26,659
right that's the show code so that came

719
00:34:23,359 --> 00:34:28,989
from exploit dB Julian Aaron's it would

720
00:34:26,659 --> 00:34:32,839
normally be the shell code that runs

721
00:34:28,989 --> 00:34:34,759
suspense a with no ography or NP

722
00:34:32,839 --> 00:34:36,139
arguments right just to know for each of

723
00:34:34,760 --> 00:34:37,879
them but of course that doesn't work

724
00:34:36,139 --> 00:34:40,210
because our target environment tiniest

725
00:34:37,879 --> 00:34:42,409
boy is busy box and busy box is a

726
00:34:40,210 --> 00:34:44,960
multi-use binary and therefore it needs

727
00:34:42,409 --> 00:34:47,300
an Arg V zero value which is actually

728
00:34:44,960 --> 00:34:48,770
such been slashed sure or something on

729
00:34:47,300 --> 00:34:50,929
those lines in order to work so I had to

730
00:34:48,770 --> 00:34:52,369
actually modify the shellcode so there's

731
00:34:50,929 --> 00:34:54,409
more work that's gone into this come to

732
00:34:52,369 --> 00:34:55,580
my workshop tomorrow at half past one -

733
00:34:54,409 --> 00:34:57,200
half past three if we're going to learn

734
00:34:55,580 --> 00:34:59,210
a bit more about how to modify shellcode

735
00:34:57,200 --> 00:35:01,339
so that it works in busybox environments

736
00:34:59,210 --> 00:35:03,800
and not just in like normal like other

737
00:35:01,339 --> 00:35:06,049
people's Linux environments in fact the

738
00:35:03,800 --> 00:35:07,640
come to the workshop anyway it'll be the

739
00:35:06,050 --> 00:35:11,930
most fun thing you've done all weekend

740
00:35:07,640 --> 00:35:14,029
it's we will not already do another

741
00:35:11,930 --> 00:35:16,129
stack smash we will do a full mastering

742
00:35:14,030 --> 00:35:17,480
vulnerability where we'll be bouncing

743
00:35:16,130 --> 00:35:19,310
off got plot in order to get our

744
00:35:17,480 --> 00:35:21,770
shellcode to work it will be excellent

745
00:35:19,310 --> 00:35:23,930
but I mean gee I mean I know James

746
00:35:21,770 --> 00:35:25,880
Forshaw is running a proper workshop at

747
00:35:23,930 --> 00:35:28,520
the same time but don't go to that come

748
00:35:25,880 --> 00:35:31,430
to this this is far more interesting

749
00:35:28,520 --> 00:35:33,530
excited so first that's the sense of

750
00:35:31,430 --> 00:35:35,720
shellcode variable this thing creates an

751
00:35:33,530 --> 00:35:37,760
OP buffer so it's like the a buffer

752
00:35:35,720 --> 00:35:39,259
thing before except it's so X 90 so

753
00:35:37,760 --> 00:35:40,910
they're all knops if you don't want an

754
00:35:39,260 --> 00:35:41,660
OP is it's basically in no operations

755
00:35:40,910 --> 00:35:43,788
what it's the single

756
00:35:41,660 --> 00:35:45,288
machine code it does nothing you can

757
00:35:43,789 --> 00:35:46,640
have as many as you want of them it just

758
00:35:45,289 --> 00:35:49,130
fills this thing I'm going to use days

759
00:35:46,640 --> 00:35:50,779
I'll use dots instead and and what this

760
00:35:49,130 --> 00:35:53,890
is going to do we're going to set here

761
00:35:50,780 --> 00:35:57,530
like so the EIP location is going to be

762
00:35:53,890 --> 00:35:59,750
352 that we made a note of the jump ESPN

763
00:35:57,530 --> 00:36:07,670
dress in little-endian format is going

764
00:35:59,750 --> 00:36:09,950
to be /x 5 1 /x 7 a / x e c / x b7

765
00:36:07,670 --> 00:36:11,630
anyone point out if that is not correct

766
00:36:09,950 --> 00:36:13,129
because clearly pool just crush it and

767
00:36:11,630 --> 00:36:15,890
not actually get shell code if it's

768
00:36:13,130 --> 00:36:17,990
wrong and then it's going to attack that

769
00:36:15,890 --> 00:36:19,368
in its gonna like crate 350 tune ops

770
00:36:17,990 --> 00:36:20,959
it's going to follow it with the jump

771
00:36:19,369 --> 00:36:22,339
ESP address which is going to be the

772
00:36:20,960 --> 00:36:23,750
return address that is going to end up

773
00:36:22,339 --> 00:36:24,859
in erp which is where it's going to land

774
00:36:23,750 --> 00:36:26,630
on which is then it's going to jump to

775
00:36:24,859 --> 00:36:28,250
the stack pointer which is then going to

776
00:36:26,630 --> 00:36:30,079
be here which is going to be followed by

777
00:36:28,250 --> 00:36:31,609
shellcode which is then going to be

778
00:36:30,079 --> 00:36:33,200
followed by a number of knobs to make

779
00:36:31,609 --> 00:36:34,578
the buff for 2,000 points dong because

780
00:36:33,200 --> 00:36:36,470
that's what we crushed it with

781
00:36:34,579 --> 00:36:38,210
originally because who knows what would

782
00:36:36,470 --> 00:36:39,348
happen if we didn't do that it might not

783
00:36:38,210 --> 00:36:41,510
get to this particular point in the

784
00:36:39,349 --> 00:36:42,890
process execution and therefore it might

785
00:36:41,510 --> 00:36:44,960
not actually crash it the way we think

786
00:36:42,890 --> 00:36:46,788
it should crash lee that's what that's

787
00:36:44,960 --> 00:36:48,890
for and then we open that and then we

788
00:36:46,789 --> 00:36:50,359
tag acp so fond of doing practice of

789
00:36:48,890 --> 00:36:52,788
saying box a sin because it is a valid

790
00:36:50,359 --> 00:36:58,490
HTTP one get requests that we're doing

791
00:36:52,789 --> 00:37:01,160
and we are going to fill in the host IP

792
00:36:58,490 --> 00:37:05,959
address the only thoughts when I got in

793
00:37:01,160 --> 00:37:13,009
there 192 I did up to 168

794
00:37:05,960 --> 00:37:14,510
56 to 102 on port number 80 and then

795
00:37:13,010 --> 00:37:18,109
it's going to wait and then it says send

796
00:37:14,510 --> 00:37:22,099
it alright so in here in here you'll see

797
00:37:18,109 --> 00:37:25,009
it go flying by and in here we'll see

798
00:37:22,099 --> 00:37:31,430
magic right so if I do a net stepmonster

799
00:37:25,010 --> 00:37:33,950
landing spell clearly okay tight up in

800
00:37:31,430 --> 00:37:36,740
it's clearly I can spell I've just can't

801
00:37:33,950 --> 00:37:38,839
type everybody right so we've got four

802
00:37:36,740 --> 00:37:41,149
ports listing at the moment 50 2001 to

803
00:37:38,839 --> 00:37:45,500
2002 port 80 which we're going to trash

804
00:37:41,150 --> 00:37:48,980
port 22 which is ssh so let's fire it

805
00:37:45,500 --> 00:37:50,240
and see what see what gives words keep

806
00:37:48,980 --> 00:37:54,220
using my mouse point everywhere there's

807
00:37:50,240 --> 00:37:57,729
much point right so i'll hit space

808
00:37:54,220 --> 00:38:03,819
I hit space did I hit space I thought I

809
00:37:57,730 --> 00:38:06,940
hit space yeah okay right so in this

810
00:38:03,820 --> 00:38:08,590
window here if I scroll back

811
00:38:06,940 --> 00:38:10,450
scroll back score back sort back wait oh

812
00:38:08,590 --> 00:38:13,450
it did actually did it twice yeah okay

813
00:38:10,450 --> 00:38:14,890
but there's a little ops to get us all

814
00:38:13,450 --> 00:38:17,470
the way to where the return address

815
00:38:14,890 --> 00:38:18,549
needs to be so in here it will be the

816
00:38:17,470 --> 00:38:20,049
return address followed by loaded

817
00:38:18,550 --> 00:38:21,670
shellcode and then he'll be allowed an

818
00:38:20,050 --> 00:38:29,770
ops to make up or for opportunities and

819
00:38:21,670 --> 00:38:33,280
bytes long over here safe hole that

820
00:38:29,770 --> 00:38:35,500
should not have happened clearly ah but

821
00:38:33,280 --> 00:38:36,700
it's only because I run it twice so the

822
00:38:35,500 --> 00:38:38,619
first summer running before he worked

823
00:38:36,700 --> 00:38:41,500
because no there was no another port

824
00:38:38,619 --> 00:38:43,859
listening 133 7 which is what my

825
00:38:41,500 --> 00:38:47,080
shellcode is launched because clearly

826
00:38:43,859 --> 00:38:49,240
one 337 is going to be the port now

827
00:38:47,080 --> 00:38:51,520
normally if you are a hacker you'd now

828
00:38:49,240 --> 00:38:53,799
get out your neck hat and you would net

829
00:38:51,520 --> 00:38:57,780
cap to port 1 3 3 7 and expect to be

830
00:38:53,800 --> 00:39:00,430
route yeah that's normally what you do

831
00:38:57,780 --> 00:39:03,369
but we're in the world of scratch we

832
00:39:00,430 --> 00:39:06,359
don't have net cats you know we're not

833
00:39:03,369 --> 00:39:09,760
in a linux if I'm going scratch so

834
00:39:06,359 --> 00:39:13,210
where's my mouse pointer so what we need

835
00:39:09,760 --> 00:39:17,290
to do and this might seem a bit

836
00:39:13,210 --> 00:39:21,460
complicated to understand but we need to

837
00:39:17,290 --> 00:39:23,440
somehow connect that port so a row

838
00:39:21,460 --> 00:39:27,070
console which is basically net cat and

839
00:39:23,440 --> 00:39:28,780
scratch and it's that long and the

840
00:39:27,070 --> 00:39:30,339
bottom right one is only if you want to

841
00:39:28,780 --> 00:39:31,690
strip off the character turns which you

842
00:39:30,339 --> 00:39:33,790
may or may not need to pending if you're

843
00:39:31,690 --> 00:39:35,530
on your Mac or Linux in this case we do

844
00:39:33,790 --> 00:39:38,970
need them because we're running on Mac

845
00:39:35,530 --> 00:39:47,109
so really I need to add a strip

846
00:39:38,970 --> 00:39:49,259
statement we're strip in here so when we

847
00:39:47,109 --> 00:39:55,630
receive stuff we need to strip it and

848
00:39:49,260 --> 00:40:00,250
then we need to add stripped data to the

849
00:39:55,630 --> 00:40:03,640
thing right and we need to put in the

850
00:40:00,250 --> 00:40:07,870
host which we'll do now before explain

851
00:40:03,640 --> 00:40:13,779
any further one six eight dot one two

852
00:40:07,870 --> 00:40:21,700
on port number once three three seven

853
00:40:13,780 --> 00:40:23,050
hang on point three three seven yeah and

854
00:40:21,700 --> 00:40:27,220
then we'll make this screen here a

855
00:40:23,050 --> 00:40:28,750
little bit bigger like because that for

856
00:40:27,220 --> 00:40:31,240
some reason I end up being the wrong

857
00:40:28,750 --> 00:40:33,570
size so this is the list item and I'm

858
00:40:31,240 --> 00:40:37,479
basically abusing a list item as my

859
00:40:33,570 --> 00:40:39,310
console output for full-on 1990 so if I

860
00:40:37,480 --> 00:40:42,760
hit space this will run the program and

861
00:40:39,310 --> 00:40:46,779
I'll get a prompt and the obvious thing

862
00:40:42,760 --> 00:40:49,000
to type at this point is ID and now I'm

863
00:40:46,780 --> 00:40:53,080
there logged in so you know you could do

864
00:40:49,000 --> 00:40:55,150
like you name - a and we're running on

865
00:40:53,080 --> 00:41:08,410
tiny sprite and that is an exploit

866
00:40:55,150 --> 00:41:16,660
working in scratch oh not been busy box

867
00:41:08,410 --> 00:41:24,700
obviously so yeah busy box so we could

868
00:41:16,660 --> 00:41:34,029
probably sue at this point maybe I don't

869
00:41:24,700 --> 00:41:37,109
know oh it's gone beyond the thing I

870
00:41:34,030 --> 00:41:37,110
should pull it up a bit

871
00:41:37,260 --> 00:41:42,370
oh look we know root because I sued

872
00:41:41,110 --> 00:41:43,600
right because I haven't you know the

873
00:41:42,370 --> 00:41:44,920
password that's that's not a privilege

874
00:41:43,600 --> 00:41:48,400
escalation that's because I knew the

875
00:41:44,920 --> 00:41:51,900
password right but it does mean I can

876
00:41:48,400 --> 00:41:51,900
probably turn it off to finish my demo

877
00:41:54,300 --> 00:41:58,120
so we did I see your get on the box that

878
00:41:57,040 --> 00:42:02,590
we did burn in roseburg

879
00:41:58,120 --> 00:42:12,549
so now cut back to these slides that was

880
00:42:02,590 --> 00:42:14,530
the demo so these are so these are the

881
00:42:12,550 --> 00:42:16,720
slides of what we did so basically we

882
00:42:14,530 --> 00:42:18,610
create a buffer over loads of age we

883
00:42:16,720 --> 00:42:21,140
sent it through and it crashed the thing

884
00:42:18,610 --> 00:42:22,849
at four one four four four one

885
00:42:21,140 --> 00:42:25,098
we then created a pattern buffer with a

886
00:42:22,849 --> 00:42:27,319
whole load of scratch which we sent

887
00:42:25,099 --> 00:42:29,630
through and when it crashed it it

888
00:42:27,319 --> 00:42:31,759
crashed a unique value which we could

889
00:42:29,630 --> 00:42:34,010
then look up with a unique value on top

890
00:42:31,760 --> 00:42:35,779
of stack and a whole load of jump ESP

891
00:42:34,010 --> 00:42:39,230
instructions in Lib C so we could return

892
00:42:35,779 --> 00:42:41,269
a Lib C trampoline essentially we are

893
00:42:39,230 --> 00:42:43,609
scratch artists what the value was and

894
00:42:41,269 --> 00:42:45,439
told you it's three five two and we

895
00:42:43,609 --> 00:42:47,240
asked about one of the top of stack it's

896
00:42:45,440 --> 00:42:48,440
three five six so we created a bit of

897
00:42:47,240 --> 00:42:50,209
shell code that looks like the issue and

898
00:42:48,440 --> 00:42:51,529
a whole lot of knocked read the return

899
00:42:50,210 --> 00:42:53,000
address followed by some shell code

900
00:42:51,529 --> 00:42:54,440
followed by some own ops to finish off

901
00:42:53,000 --> 00:42:55,609
the buffer so at least it was the right

902
00:42:54,440 --> 00:42:57,260
size to make sure we crashed in the

903
00:42:55,609 --> 00:42:59,990
right point or not and the other point

904
00:42:57,260 --> 00:43:01,670
and then we created a show an exploit

905
00:42:59,990 --> 00:43:03,709
with actual shell code and we sent it

906
00:43:01,670 --> 00:43:06,859
through and so before we sent it there

907
00:43:03,710 --> 00:43:08,180
was no leech port listening and then we

908
00:43:06,859 --> 00:43:10,130
sent it through and there was that whole

909
00:43:08,180 --> 00:43:11,058
load of nops that got us to the point

910
00:43:10,130 --> 00:43:12,289
where we had to put in the return

911
00:43:11,059 --> 00:43:14,299
address and then we're putting the

912
00:43:12,289 --> 00:43:15,920
returning - load shell code and when we

913
00:43:14,299 --> 00:43:17,750
say it's through actually a port

914
00:43:15,920 --> 00:43:24,829
listening on one three three seven and

915
00:43:17,750 --> 00:43:28,190
so we we created a console which is like

916
00:43:24,829 --> 00:43:32,960
netcat and we had execution code

917
00:43:28,190 --> 00:43:39,289
execution so you might be asking why

918
00:43:32,960 --> 00:43:41,000
bother and I've kind of say the same to

919
00:43:39,289 --> 00:43:43,940
anybody else talking at these kind of

920
00:43:41,000 --> 00:43:47,539
conferences hey why care what is the

921
00:43:43,940 --> 00:43:50,089
point well for me it was a load of fun

922
00:43:47,539 --> 00:43:53,000
it was kind of a troll require hand but

923
00:43:50,089 --> 00:43:55,970
it was just fun why not do this sort of

924
00:43:53,000 --> 00:43:58,819
stuff of fun I mean to put into real

925
00:43:55,970 --> 00:44:00,890
terms there are code clubs and there are

926
00:43:58,819 --> 00:44:03,920
cyber academies for kids and they're all

927
00:44:00,890 --> 00:44:07,400
about making stuff and defending stuff

928
00:44:03,920 --> 00:44:09,769
as if the only thing interesting and

929
00:44:07,400 --> 00:44:12,380
useful in the world is making more

930
00:44:09,769 --> 00:44:15,649
software and defending it so that it

931
00:44:12,380 --> 00:44:16,910
works well I wasn't one of those kids

932
00:44:15,650 --> 00:44:19,160
and they were probably kids that

933
00:44:16,910 --> 00:44:21,200
actually just want to break stuff like I

934
00:44:19,160 --> 00:44:23,420
mean I does that expect room and I

935
00:44:21,200 --> 00:44:25,368
learned basic on it and I learned that a

936
00:44:23,420 --> 00:44:27,589
machine code so I could get infinite

937
00:44:25,369 --> 00:44:29,210
lives which is essentially hacking games

938
00:44:27,589 --> 00:44:32,029
I mean obviously you know protection

939
00:44:29,210 --> 00:44:34,250
yadda yadda but like the next thing I

940
00:44:32,029 --> 00:44:34,940
learned after today with 8086 machine

941
00:44:34,250 --> 00:44:38,500
code

942
00:44:34,940 --> 00:44:40,670
started my journey which they ended up

943
00:44:38,500 --> 00:44:45,109
turning scratched into a hacking tool

944
00:44:40,670 --> 00:44:46,190
but not all kids want to make stuff some

945
00:44:45,109 --> 00:44:48,770
of them just want to take things apart

946
00:44:46,190 --> 00:44:51,349
and know how they work and maybe there

947
00:44:48,770 --> 00:44:54,259
is a career for them in that so I think

948
00:44:51,349 --> 00:44:58,760
it's a good idea and perhaps in the

949
00:44:54,260 --> 00:45:00,619
world of cute fluffy introductions to

950
00:44:58,760 --> 00:45:03,349
computers and cyber perhaps we need

951
00:45:00,619 --> 00:45:07,670
something a little bit more scary does

952
00:45:03,349 --> 00:45:09,880
anyone have any questions apart from how

953
00:45:07,670 --> 00:45:12,859
do magnets work because I don't know

954
00:45:09,880 --> 00:45:14,839
there is a microphone here if not there

955
00:45:12,859 --> 00:45:17,720
there is a microphone there wait for the

956
00:45:14,839 --> 00:45:36,410
microphone the microphone is come in do

957
00:45:17,720 --> 00:45:40,240
not speak and how long so the question

958
00:45:36,410 --> 00:45:43,160
was how long did it take me to do that

959
00:45:40,240 --> 00:45:46,149
how many how many we could not spend

960
00:45:43,160 --> 00:45:49,299
with your wife and kids to do that yeah

961
00:45:46,150 --> 00:45:53,420
yeah exactly how long did it take well

962
00:45:49,300 --> 00:45:55,579
it was a bell half an hour of googling

963
00:45:53,420 --> 00:45:58,460
to find that you could make an extension

964
00:45:55,579 --> 00:46:01,609
and that there was a Python module to

965
00:45:58,460 --> 00:46:04,130
make the extension it was about an hour

966
00:46:01,609 --> 00:46:07,130
of reading the tutorial on their github

967
00:46:04,130 --> 00:46:09,319
and to understand it to know actually

968
00:46:07,130 --> 00:46:12,650
that's perfectly achievable which not me

969
00:46:09,319 --> 00:46:12,980
too that complicated and then it was I

970
00:46:12,650 --> 00:46:16,280
know

971
00:46:12,980 --> 00:46:18,290
20 minutes to prove it and the rest of

972
00:46:16,280 --> 00:46:20,540
an hour to actually make that actual

973
00:46:18,290 --> 00:46:22,490
extension that extensions not even been

974
00:46:20,540 --> 00:46:24,920
modified since the farmer wrote it it's

975
00:46:22,490 --> 00:46:27,410
as simple as that it took longer to

976
00:46:24,920 --> 00:46:29,510
write the talk and build the demo than

977
00:46:27,410 --> 00:46:31,910
it did to and the and the first thing I

978
00:46:29,510 --> 00:46:34,250
exploited was a virtual machine that I

979
00:46:31,910 --> 00:46:36,348
can't actually show you it was somebody

980
00:46:34,250 --> 00:46:40,069
else's project so I've actually had to

981
00:46:36,349 --> 00:46:43,700
redo all of that ensembl chars exploit

982
00:46:40,069 --> 00:46:44,210
lab but ya know two hours tops to get to

983
00:46:43,700 --> 00:46:46,790
that point

984
00:46:44,210 --> 00:46:48,520
I spent longer making scratch talk to

985
00:46:46,790 --> 00:46:50,560
MIDI instruments

986
00:46:48,520 --> 00:46:52,480
leggo power functions and leggo power

987
00:46:50,560 --> 00:46:55,960
functions are exceptionally fun right

988
00:46:52,480 --> 00:46:58,060
you can know the demos I could show with

989
00:46:55,960 --> 00:47:01,990
Lego power functions

990
00:46:58,060 --> 00:47:03,279
I mean if you if there's not another

991
00:47:01,990 --> 00:47:04,450
question or while you're getting the

992
00:47:03,280 --> 00:47:06,810
microphone to another question

993
00:47:04,450 --> 00:47:10,000
John rejoin us see what we do with Lego

994
00:47:06,810 --> 00:47:26,440
all right let's have a look if I can

995
00:47:10,000 --> 00:47:29,620
find some Lego then that was the hold

996
00:47:26,440 --> 00:47:31,900
music so um I gave a talk at EMF camp

997
00:47:29,620 --> 00:47:33,190
last weekend if you've never been to EMF

998
00:47:31,900 --> 00:47:36,190
camp go to EMF camp

999
00:47:33,190 --> 00:47:37,750
it's brilliant fun I made a ring it

1000
00:47:36,190 --> 00:47:42,940
shows me a lot of money but I made my

1001
00:47:37,750 --> 00:47:45,100
own ring of silver no less and gave a

1002
00:47:42,940 --> 00:47:47,500
couple talks there it was really good

1003
00:47:45,100 --> 00:47:52,330
fun it's I've been three times like

1004
00:47:47,500 --> 00:47:54,370
honestly it's like it's like but names

1005
00:47:52,330 --> 00:47:59,830
meets Breaking Bad that's the only way

1006
00:47:54,370 --> 00:48:01,509
to describe it but Lego pal gave a talk

1007
00:47:59,830 --> 00:48:04,150
about all the sorts of weird stuff we've

1008
00:48:01,510 --> 00:48:10,810
done with scratch and mice and this is

1009
00:48:04,150 --> 00:48:16,630
like Lego so my son made a sea monster

1010
00:48:10,810 --> 00:48:19,509
void for a like a theme park which is

1011
00:48:16,630 --> 00:48:21,190
programmed in scratch ocean it doesn't

1012
00:48:19,510 --> 00:48:25,780
do a lot he just like moves up and down

1013
00:48:21,190 --> 00:48:28,590
with kind of cool and that's the box

1014
00:48:25,780 --> 00:48:33,370
that come it's basically an Arduino that

1015
00:48:28,590 --> 00:48:34,180
kind of does the infrared but this is

1016
00:48:33,370 --> 00:48:37,299
the one I'm proud of

1017
00:48:34,180 --> 00:48:38,830
so basically what was he said can you

1018
00:48:37,300 --> 00:48:40,510
make your thing so we can control our

1019
00:48:38,830 --> 00:48:42,400
Lego motors and I was like yeah and I

1020
00:48:40,510 --> 00:48:44,260
went away and did that it took ages and

1021
00:48:42,400 --> 00:48:47,250
then he forgot about it he didn't care

1022
00:48:44,260 --> 00:48:49,900
it's too busy playing Minecraft and then

1023
00:48:47,250 --> 00:48:51,790
one day he was like dad have you got

1024
00:48:49,900 --> 00:48:54,280
that thing that like controls Lego

1025
00:48:51,790 --> 00:48:56,440
motors and I was like yes yes of course

1026
00:48:54,280 --> 00:49:01,260
I have no went round and this is what

1027
00:48:56,440 --> 00:49:01,260
he'd built a remote-controlled crossbow

1028
00:49:04,110 --> 00:49:09,370
basically elevates itself to a random

1029
00:49:06,820 --> 00:49:11,950
elevation and then far as a bolt whoever

1030
00:49:09,370 --> 00:49:14,740
was looking at it if we had one more

1031
00:49:11,950 --> 00:49:16,660
motor it would be with rotating and if

1032
00:49:14,740 --> 00:49:21,250
we had senses it would find you I mean

1033
00:49:16,660 --> 00:49:23,649
it's like I just like the pipes got

1034
00:49:21,250 --> 00:49:26,140
police on the side it's like this

1035
00:49:23,650 --> 00:49:29,940
you know forget Robocop that this is the

1036
00:49:26,140 --> 00:49:29,940
future of law enforcement you know oh

1037
00:49:30,000 --> 00:49:37,180
yeah yeah so this is sort of silly

1038
00:49:34,180 --> 00:49:40,859
things stuff we do we've with Lego

1039
00:49:37,180 --> 00:49:46,029
it's just moved on to Mindstorms so like

1040
00:49:40,860 --> 00:49:48,880
hey anyway any other questions

1041
00:49:46,030 --> 00:49:49,390
I mean it's 2037 I've still got time for

1042
00:49:48,880 --> 00:49:51,490
questions

1043
00:49:49,390 --> 00:49:53,379
I'm sure 44 corner administration will

1044
00:49:51,490 --> 00:49:55,509
say no your question should have ended

1045
00:49:53,380 --> 00:49:58,540
by now so ask another question so on any

1046
00:49:55,510 --> 00:50:02,260
questions yes I am drinking Guinness or

1047
00:49:58,540 --> 00:50:03,580
we'll be in the bar I can answer all of

1048
00:50:02,260 --> 00:50:06,490
your other questions there yes another

1049
00:50:03,580 --> 00:50:08,380
question wait for the microphone do not

1050
00:50:06,490 --> 00:50:09,819
speak until the book phone arrives I've

1051
00:50:08,380 --> 00:50:12,640
been told the microphone will arrive

1052
00:50:09,820 --> 00:50:16,720
there's work does it work thank you oh

1053
00:50:12,640 --> 00:50:19,870
oh hello hello yes thank you for

1054
00:50:16,720 --> 00:50:23,709
presenting tonight now you just go back

1055
00:50:19,870 --> 00:50:27,339
one slide yeah that's what I want to

1056
00:50:23,710 --> 00:50:30,310
read that one that's my question can I

1057
00:50:27,340 --> 00:50:37,240
go back one slide yes I can keynote on

1058
00:50:30,310 --> 00:50:39,250
the Mac does go backwards shall we call

1059
00:50:37,240 --> 00:50:43,959
it there unless anybody wants to know

1060
00:50:39,250 --> 00:50:47,290
anything I mean oh yes oh yes so give

1061
00:50:43,960 --> 00:50:49,690
generously to the Mike Kemp fund he is a

1062
00:50:47,290 --> 00:50:51,790
hacker and he's ill and I think we

1063
00:50:49,690 --> 00:50:54,880
should chuck some caches way to help him

1064
00:50:51,790 --> 00:50:57,100
out and tomorrow between Hoppus 1 and

1065
00:50:54,880 --> 00:50:59,770
hopper 3 I'm running a workshop where we

1066
00:50:57,100 --> 00:51:02,830
will teach you how to do a stack smash

1067
00:50:59,770 --> 00:51:04,660
and a format string vulnerability using

1068
00:51:02,830 --> 00:51:06,700
scratch and then at the end of it we'll

1069
00:51:04,660 --> 00:51:09,819
teach you how to do it in potent and C

1070
00:51:06,700 --> 00:51:11,319
so obviously this is only for

1071
00:51:09,820 --> 00:51:13,900
environments that don't have any modern

1072
00:51:11,320 --> 00:51:16,089
protections our NX SLR

1073
00:51:13,900 --> 00:51:17,829
Nerys except for etc right but if you've

1074
00:51:16,089 --> 00:51:18,849
never written a Stax Marshall you've

1075
00:51:17,829 --> 00:51:21,069
never written a format string

1076
00:51:18,849 --> 00:51:23,260
vulnerability and you would like to and

1077
00:51:21,069 --> 00:51:25,480
you would like to know how it's done so

1078
00:51:23,260 --> 00:51:28,150
to save you from like six hours of

1079
00:51:25,480 --> 00:51:29,980
googling come and spend two hours in the

1080
00:51:28,150 --> 00:51:32,020
company of myself and Tim Todd and we'll

1081
00:51:29,980 --> 00:51:34,869
show you how to do it it'll be so much

1082
00:51:32,020 --> 00:51:36,880
fun you'll be know you're ready to go to

1083
00:51:34,869 --> 00:51:39,010
the next conversation I convert to

1084
00:51:36,880 --> 00:51:41,740
format string vulnerability I have done

1085
00:51:39,010 --> 00:51:43,809
it and if you haven't done it and you

1086
00:51:41,740 --> 00:51:47,779
can't do it then shame on you come to

1087
00:51:43,809 --> 00:51:49,110
the workshop thank you very much

1088
00:51:47,780 --> 00:52:11,419
[Applause]

1089
00:51:49,110 --> 00:52:11,419
[Music]

