1
00:00:00,079 --> 00:00:06,540
hi everyone thanks for coming to see me

2
00:00:02,669 --> 00:00:08,400
talk I always find the beginning of the

3
00:00:06,540 --> 00:00:11,250
talk the hardest part I never quite know

4
00:00:08,400 --> 00:00:14,429
where to start so this time I decided to

5
00:00:11,250 --> 00:00:17,340
start with a story I went to this

6
00:00:14,429 --> 00:00:18,750
conference called DevOps days and it was

7
00:00:17,340 --> 00:00:22,080
in Chicago it wasn't an info SEC

8
00:00:18,750 --> 00:00:25,470
conference it was for for DevOps people

9
00:00:22,080 --> 00:00:28,109
and one of the guys was giving a talk

10
00:00:25,470 --> 00:00:29,490
and he said who in the crowd is you know

11
00:00:28,109 --> 00:00:32,309
works in the InfoSec works in security

12
00:00:29,490 --> 00:00:34,680
and my hand went up there was a few

13
00:00:32,308 --> 00:00:36,180
other hands that went up not many of us

14
00:00:34,680 --> 00:00:40,500
like two or three and then in the back

15
00:00:36,180 --> 00:00:42,269
of the room I had someone go boom so so

16
00:00:40,500 --> 00:00:44,870
I'm sure the guy was just joking and

17
00:00:42,270 --> 00:00:47,100
playing around but to me highlighted

18
00:00:44,870 --> 00:00:48,780
what these other teams think about

19
00:00:47,100 --> 00:00:51,539
security

20
00:00:48,780 --> 00:00:54,239
we're always seen as blockers we're the

21
00:00:51,539 --> 00:00:57,719
people to say no you can't go live or no

22
00:00:54,239 --> 00:01:00,800
you can't do your job so I wanted to try

23
00:00:57,719 --> 00:01:04,110
and give a talk to change that I want to

24
00:01:00,800 --> 00:01:07,009
make security become an enabler I want

25
00:01:04,110 --> 00:01:09,630
security to help developers go live to

26
00:01:07,010 --> 00:01:13,049
be able to push into production quicker

27
00:01:09,630 --> 00:01:15,179
with fewer issues so I think once we can

28
00:01:13,049 --> 00:01:16,770
start to automate security we can start

29
00:01:15,180 --> 00:01:19,140
to integrate it and that's when we're

30
00:01:16,770 --> 00:01:24,030
gonna start seeing security becoming

31
00:01:19,140 --> 00:01:26,549
more of an enabler than a blocker so

32
00:01:24,030 --> 00:01:28,950
quickly just two of my my name is Jamar

33
00:01:26,549 --> 00:01:32,040
Harris some people know me as J I'm a

34
00:01:28,950 --> 00:01:34,200
pen tester I work for this company I

35
00:01:32,040 --> 00:01:37,140
started digital interruption we're

36
00:01:34,200 --> 00:01:38,939
security consultancy but one of the

37
00:01:37,140 --> 00:01:41,130
things we really tried to push is this

38
00:01:38,939 --> 00:01:42,929
idea that developers should be in

39
00:01:41,130 --> 00:01:45,210
control of their own code and actually

40
00:01:42,930 --> 00:01:46,590
with better tools and methodologies they

41
00:01:45,210 --> 00:01:49,020
can start to integrate security into

42
00:01:46,590 --> 00:01:50,850
what they're doing I'm interested in

43
00:01:49,020 --> 00:01:52,710
mobile radio or do some reverse

44
00:01:50,850 --> 00:01:53,850
engineering things and just some

45
00:01:52,710 --> 00:01:57,298
accounts I think you should follow

46
00:01:53,850 --> 00:01:58,408
obviously the top one is me then I run a

47
00:01:57,299 --> 00:02:00,990
group in Manchester called Manchester

48
00:01:58,409 --> 00:02:04,170
gray hats where we run free workshops

49
00:02:00,990 --> 00:02:05,579
competing CTFs run CTF

50
00:02:04,170 --> 00:02:07,049
things like that so if you're interested

51
00:02:05,579 --> 00:02:10,530
in learning a bit more about you know

52
00:02:07,049 --> 00:02:11,970
cyber cyber security and kind of getting

53
00:02:10,530 --> 00:02:14,340
more involved with communities things

54
00:02:11,970 --> 00:02:16,020
feel free to follow us

55
00:02:14,340 --> 00:02:17,250
so we have the slack channel as well if

56
00:02:16,020 --> 00:02:18,780
you're not from Manchester that's

57
00:02:17,250 --> 00:02:22,170
absolutely fine we have - from kind of

58
00:02:18,780 --> 00:02:25,080
all over and then di security so this is

59
00:02:22,170 --> 00:02:26,849
the account of the company so this

60
00:02:25,080 --> 00:02:33,300
worked out our research and blogs and

61
00:02:26,849 --> 00:02:35,609
things so I've heard this quote a lot

62
00:02:33,300 --> 00:02:37,560
our pen testing sucks and I've heard

63
00:02:35,610 --> 00:02:41,160
that from both pen testers and from

64
00:02:37,560 --> 00:02:42,900
developers so speaking to some more pen

65
00:02:41,160 --> 00:02:44,730
tester friends and you know from my own

66
00:02:42,900 --> 00:02:48,180
experience as well why do I think pen

67
00:02:44,730 --> 00:02:50,369
testing doesn't doesn't quite work often

68
00:02:48,180 --> 00:02:52,140
it can be quite boring if you're looking

69
00:02:50,370 --> 00:02:54,630
at the same applications over and over

70
00:02:52,140 --> 00:02:55,920
again it stops getting exciting right

71
00:02:54,630 --> 00:02:57,450
we're looking at the same types of

72
00:02:55,920 --> 00:02:59,309
vulnerabilities we're finding things

73
00:02:57,450 --> 00:03:02,369
like cross-site scripting sequel

74
00:02:59,310 --> 00:03:05,730
injection cookie Flags not set but you

75
00:03:02,370 --> 00:03:07,079
know the same kinds of issues so yeah as

76
00:03:05,730 --> 00:03:09,149
a pen tester I don't really want to look

77
00:03:07,079 --> 00:03:09,690
at kind of boring stuff I don't do fun

78
00:03:09,150 --> 00:03:12,510
things

79
00:03:09,690 --> 00:03:13,310
a lot of the issues with finding a

80
00:03:12,510 --> 00:03:15,929
low-risk

81
00:03:13,310 --> 00:03:17,819
you know I need to highlight them in the

82
00:03:15,930 --> 00:03:20,100
report because there is some risks there

83
00:03:17,819 --> 00:03:22,738
but at the same time it just means I go

84
00:03:20,100 --> 00:03:24,120
spend ages writing this report that no

85
00:03:22,739 --> 00:03:26,100
one's gonna read because it's full of

86
00:03:24,120 --> 00:03:27,810
low-risk issues and people aren't gonna

87
00:03:26,100 --> 00:03:30,090
fix them anyway because again they seem

88
00:03:27,810 --> 00:03:32,220
like they're low risk from the other

89
00:03:30,090 --> 00:03:34,440
from the other point of view I'm from

90
00:03:32,220 --> 00:03:35,549
like the diverse point of view the

91
00:03:34,440 --> 00:03:38,130
reports they're padded with all these

92
00:03:35,549 --> 00:03:40,560
low risk issues right so they're charged

93
00:03:38,130 --> 00:03:42,209
the fortune that they charge a fortune

94
00:03:40,560 --> 00:03:44,010
for someone to come in perform the pen

95
00:03:42,209 --> 00:03:48,209
test I just full of all these low risk

96
00:03:44,010 --> 00:03:49,649
issues often the pen tester doesn't

97
00:03:48,209 --> 00:03:51,450
really understand the context of the

98
00:03:49,650 --> 00:03:54,090
vulnerability so we might raise it as a

99
00:03:51,450 --> 00:03:56,280
a medium risk issue and actually it's a

100
00:03:54,090 --> 00:03:58,829
high risk issue or maybe we say it's a

101
00:03:56,280 --> 00:04:00,599
high risk issue but you know because of

102
00:03:58,829 --> 00:04:02,329
the application it's actually a medium

103
00:04:00,599 --> 00:04:04,649
risk issue because we're only there for

104
00:04:02,329 --> 00:04:06,720
for a few weeks a few weeks so how can

105
00:04:04,650 --> 00:04:08,700
we really understand the application I

106
00:04:06,720 --> 00:04:10,380
don't know if everyone agrees with me

107
00:04:08,700 --> 00:04:14,069
but there's a lot of ego in InfoSec I

108
00:04:10,380 --> 00:04:16,320
was on a test front with a colleague of

109
00:04:14,069 --> 00:04:19,320
mine really really skilled a hacker and

110
00:04:16,320 --> 00:04:22,409
pen tester and we're doing a code review

111
00:04:19,320 --> 00:04:25,070
and we found some vulnerabilities my

112
00:04:22,409 --> 00:04:26,000
colleague starts mocking the developer I

113
00:04:25,070 --> 00:04:28,190
the developers they don't know what

114
00:04:26,000 --> 00:04:30,950
they're doing and the developer sitting

115
00:04:28,190 --> 00:04:33,080
right behind us so yeah we have a lot of

116
00:04:30,950 --> 00:04:35,539
eager so it's no doubt that developers

117
00:04:33,080 --> 00:04:38,810
don't really want to work with us and

118
00:04:35,540 --> 00:04:40,760
also I think most importantly pen

119
00:04:38,810 --> 00:04:43,910
testing as I said before it does get in

120
00:04:40,760 --> 00:04:46,670
the way we do stop development if you're

121
00:04:43,910 --> 00:04:48,350
an organization you want to release the

122
00:04:46,670 --> 00:04:49,550
product right that's kind of the most

123
00:04:48,350 --> 00:04:52,940
important thing for you you want to make

124
00:04:49,550 --> 00:04:55,310
money I'm sure we've all seen something

125
00:04:52,940 --> 00:04:57,650
like this where pen testing is in

126
00:04:55,310 --> 00:05:00,110
capitals you know I need the pen test

127
00:04:57,650 --> 00:05:03,080
report I think this kind of highlights

128
00:05:00,110 --> 00:05:06,860
that our clients don't really even know

129
00:05:03,080 --> 00:05:08,900
what pen testing is and in InfoSec we I

130
00:05:06,860 --> 00:05:11,450
think we are partly to blame we have

131
00:05:08,900 --> 00:05:13,659
different different ways of describing

132
00:05:11,450 --> 00:05:16,640
security testing or pen testing

133
00:05:13,660 --> 00:05:19,130
vulnerability assessments red teaming

134
00:05:16,640 --> 00:05:21,770
the bug bounties they all have slightly

135
00:05:19,130 --> 00:05:25,370
different purposes but this confuses our

136
00:05:21,770 --> 00:05:28,159
clients so I want to just have a talk

137
00:05:25,370 --> 00:05:30,560
about a quick case study this company

138
00:05:28,160 --> 00:05:32,660
let's go talk squared so it's a

139
00:05:30,560 --> 00:05:35,840
fictitious company they have a number of

140
00:05:32,660 --> 00:05:37,990
applications web applications you know

141
00:05:35,840 --> 00:05:41,239
in this case they say that there's a

142
00:05:37,990 --> 00:05:44,390
ecommerce application something that an

143
00:05:41,240 --> 00:05:45,920
attack a fan of an ability and maybe

144
00:05:44,390 --> 00:05:49,340
some like sequel injection and managed

145
00:05:45,920 --> 00:05:51,680
to you know dump databases and access

146
00:05:49,340 --> 00:05:53,840
the servers and things but we have pen

147
00:05:51,680 --> 00:05:57,050
testing right so why would this kind of

148
00:05:53,840 --> 00:05:58,760
company be in this situation so this

149
00:05:57,050 --> 00:06:00,830
company they have quite a traditional

150
00:05:58,760 --> 00:06:02,210
development approach I'm sure people are

151
00:06:00,830 --> 00:06:04,430
quite familiar with this type of thing

152
00:06:02,210 --> 00:06:07,969
so in addressed of requirements and

153
00:06:04,430 --> 00:06:09,860
design things get implemented and then

154
00:06:07,970 --> 00:06:10,400
they get tested but and then when things

155
00:06:09,860 --> 00:06:16,400
were okay

156
00:06:10,400 --> 00:06:18,310
it gets deployed so where does security

157
00:06:16,400 --> 00:06:21,380
come in sometimes it just doesn't

158
00:06:18,310 --> 00:06:23,780
sometimes there's there's no budget for

159
00:06:21,380 --> 00:06:25,400
security and they want to have a pentose

160
00:06:23,780 --> 00:06:27,409
but there's there's not time and there's

161
00:06:25,400 --> 00:06:29,630
there's no budget but in this case with

162
00:06:27,410 --> 00:06:34,280
this company let's assume that there he

163
00:06:29,630 --> 00:06:38,480
did have a pen test so for me when I'm

164
00:06:34,280 --> 00:06:38,989
doing a pen test I might if I have to be

165
00:06:38,480 --> 00:06:41,810
on site

166
00:06:38,990 --> 00:06:45,230
up and after wearing suit so feeling

167
00:06:41,810 --> 00:06:48,500
quite uncomfortable I will go through

168
00:06:45,230 --> 00:06:50,270
security I have to be checked in I meet

169
00:06:48,500 --> 00:06:53,540
my contacts that will show me where the

170
00:06:50,270 --> 00:06:56,150
toilets are sit down wait for some

171
00:06:53,540 --> 00:06:57,680
credentials by this point it's pretty

172
00:06:56,150 --> 00:06:58,429
lunchtime let's get a coffee or

173
00:06:57,680 --> 00:06:59,900
something

174
00:06:58,430 --> 00:07:01,760
and then finally I started testing which

175
00:06:59,900 --> 00:07:04,280
is awesome and then I've got waste for

176
00:07:01,760 --> 00:07:06,440
some more credentials and then do some

177
00:07:04,280 --> 00:07:08,359
testing and eventually you know I leave

178
00:07:06,440 --> 00:07:11,540
I write the report and then I send it to

179
00:07:08,360 --> 00:07:12,980
them developers while I'm doing this you

180
00:07:11,540 --> 00:07:14,870
can see how frustrated they are every

181
00:07:12,980 --> 00:07:16,550
time I find a vulnerability because they

182
00:07:14,870 --> 00:07:19,580
know that's one other thing that they

183
00:07:16,550 --> 00:07:22,970
now need to fix I was actually on site

184
00:07:19,580 --> 00:07:24,979
this one time and the company there was

185
00:07:22,970 --> 00:07:27,140
only a two-day test ah but that's those

186
00:07:24,980 --> 00:07:29,270
two of us on two days before they test

187
00:07:27,140 --> 00:07:31,010
in total the first day they were really

188
00:07:29,270 --> 00:07:32,570
welcoming you're coming you can start

189
00:07:31,010 --> 00:07:34,820
testing and we start to find some issues

190
00:07:32,570 --> 00:07:37,820
second day now you can't plug into the

191
00:07:34,820 --> 00:07:39,230
network so you can't you can see the

192
00:07:37,820 --> 00:07:41,540
frustration on their faces we start to

193
00:07:39,230 --> 00:07:44,960
find things because again with that kind

194
00:07:41,540 --> 00:07:46,280
of tell them that doing it wrong the

195
00:07:44,960 --> 00:07:48,229
organization's feel like they're just

196
00:07:46,280 --> 00:07:50,179
throwing money away really not only is

197
00:07:48,230 --> 00:07:52,220
it expensive to bring the pentester in

198
00:07:50,180 --> 00:07:54,530
but then they need to maybe redesign the

199
00:07:52,220 --> 00:07:57,410
application or fix the issues or pay for

200
00:07:54,530 --> 00:07:59,200
new developers but for us consultants is

201
00:07:57,410 --> 00:08:03,440
you know it's all good

202
00:07:59,200 --> 00:08:07,250
so so let's take this this fictitious

203
00:08:03,440 --> 00:08:09,050
application ecommerce application we

204
00:08:07,250 --> 00:08:11,180
have that we do the pen test and we get

205
00:08:09,050 --> 00:08:15,680
these kind of results we get remote code

206
00:08:11,180 --> 00:08:16,910
execution sequin injection prices and

207
00:08:15,680 --> 00:08:18,530
the app can't be trusted it's all

208
00:08:16,910 --> 00:08:20,930
trusted on the client sites we can

209
00:08:18,530 --> 00:08:22,940
modify that send that over to the server

210
00:08:20,930 --> 00:08:26,300
and it just lets us buy things for less

211
00:08:22,940 --> 00:08:29,930
money then maybe some high risk issues

212
00:08:26,300 --> 00:08:31,640
so lack of authentication we can access

213
00:08:29,930 --> 00:08:33,440
confidential documents XML into the

214
00:08:31,640 --> 00:08:36,699
injection you know kind of standard

215
00:08:33,440 --> 00:08:42,020
stuff loaded medium risk issues

216
00:08:36,700 --> 00:08:44,600
cross-site scripting you know things use

217
00:08:42,020 --> 00:08:47,120
it in ways that they are algorithms

218
00:08:44,600 --> 00:08:48,110
using in ways they shouldn't I don't

219
00:08:47,120 --> 00:08:50,600
know if everyone agrees that these

220
00:08:48,110 --> 00:08:52,200
things are medium risk issues but that's

221
00:08:50,600 --> 00:08:57,660
kind of one of the problems right

222
00:08:52,200 --> 00:08:59,100
it's very it's a very objective so it's

223
00:08:57,660 --> 00:09:01,410
been testing the it's quite subjective

224
00:08:59,100 --> 00:09:03,300
to how we rank these run abilities we

225
00:09:01,410 --> 00:09:06,180
might say yeah this is medium another

226
00:09:03,300 --> 00:09:07,770
pen tester might disagree we do have

227
00:09:06,180 --> 00:09:10,229
things like CVS s to try and help

228
00:09:07,770 --> 00:09:11,640
mitigate some of that but you know that

229
00:09:10,230 --> 00:09:13,320
in itself has some issues as well

230
00:09:11,640 --> 00:09:15,000
because it doesn't quite capture the

231
00:09:13,320 --> 00:09:17,910
details that we have that we need and

232
00:09:15,000 --> 00:09:21,000
then a load of low-risk issues so just

233
00:09:17,910 --> 00:09:24,300
to ask a question who would go live

234
00:09:21,000 --> 00:09:27,660
given these results is anyone would

235
00:09:24,300 --> 00:09:29,609
anyone okay so so what if this was the

236
00:09:27,660 --> 00:09:31,230
difference between your company making a

237
00:09:29,610 --> 00:09:33,320
profit this year or not you know you've

238
00:09:31,230 --> 00:09:35,310
got to go live on this particular today

239
00:09:33,320 --> 00:09:36,750
any pen tester in the room I'm sure

240
00:09:35,310 --> 00:09:38,729
you've dealt with clients where they've

241
00:09:36,750 --> 00:09:39,960
had to make this decision and they've

242
00:09:38,730 --> 00:09:41,940
decided to go live with these

243
00:09:39,960 --> 00:09:43,440
vulnerabilities you know there might be

244
00:09:41,940 --> 00:09:45,090
the assumption that they can fix it

245
00:09:43,440 --> 00:09:47,430
later and that's something that I hear

246
00:09:45,090 --> 00:09:50,190
quite a lot we go like live now we fix

247
00:09:47,430 --> 00:09:53,790
in next release often this doesn't

248
00:09:50,190 --> 00:09:56,010
happen I was on a test did I did a test

249
00:09:53,790 --> 00:09:58,410
once did it the test seven months later

250
00:09:56,010 --> 00:09:59,760
for the same people they didn't even

251
00:09:58,410 --> 00:10:02,100
know that I had done the pen test

252
00:09:59,760 --> 00:10:03,780
previously because the team had changed

253
00:10:02,100 --> 00:10:05,580
so much since then that the pen test

254
00:10:03,780 --> 00:10:10,829
results had just kind of been lost in

255
00:10:05,580 --> 00:10:12,750
someone's mailbox so I don't think it's

256
00:10:10,830 --> 00:10:14,370
fair for us to say you know they they

257
00:10:12,750 --> 00:10:16,380
can't go live what we should do is try

258
00:10:14,370 --> 00:10:18,810
and help them to alive and also be

259
00:10:16,380 --> 00:10:21,720
secure so what's the solution to this

260
00:10:18,810 --> 00:10:25,880
and I think if we can help left shift

261
00:10:21,720 --> 00:10:28,020
security if we can help developers

262
00:10:25,880 --> 00:10:29,580
understand security and perform a lot of

263
00:10:28,020 --> 00:10:31,890
testing themselves beginner in the

264
00:10:29,580 --> 00:10:33,330
lifecycle then it's gonna be cheaper for

265
00:10:31,890 --> 00:10:36,210
them to fix vulnerabilities they have to

266
00:10:33,330 --> 00:10:37,530
identify them in different ways don't

267
00:10:36,210 --> 00:10:39,000
them then we can you know they have

268
00:10:37,530 --> 00:10:40,980
their own tools and techniques such as

269
00:10:39,000 --> 00:10:42,960
unit testing they can use some of these

270
00:10:40,980 --> 00:10:50,520
things to help them discover of own

271
00:10:42,960 --> 00:10:52,020
abilities so let's look at the the that

272
00:10:50,520 --> 00:10:55,470
that developed methodologies that we

273
00:10:52,020 --> 00:10:57,569
looked at earlier I'm gonna kind of grip

274
00:10:55,470 --> 00:10:59,400
requirements to design together because

275
00:10:57,570 --> 00:11:01,110
it's kind of cheating but there's a lot

276
00:10:59,400 --> 00:11:03,000
of overlap and let's see how we might be

277
00:11:01,110 --> 00:11:05,959
able to integrate security into these

278
00:11:03,000 --> 00:11:09,089
these parts of the methodology

279
00:11:05,959 --> 00:11:10,529
so firstly I will just say for some

280
00:11:09,089 --> 00:11:12,509
applications you might decide that

281
00:11:10,529 --> 00:11:14,939
actually you don't need a pen test maybe

282
00:11:12,509 --> 00:11:17,100
it's an internal approach to where

283
00:11:14,939 --> 00:11:19,139
application the users that user a

284
00:11:17,100 --> 00:11:20,459
trusted you know they're on the internal

285
00:11:19,139 --> 00:11:23,790
network and to be honest they could

286
00:11:20,459 --> 00:11:25,618
probably do worse things anyway so you

287
00:11:23,790 --> 00:11:28,379
know it's no user data if you trust the

288
00:11:25,619 --> 00:11:30,629
users if it's a low-risk application

289
00:11:28,379 --> 00:11:33,239
don't spend your budget on security it

290
00:11:30,629 --> 00:11:35,069
doesn't really make sense instead spend

291
00:11:33,239 --> 00:11:36,989
your budget on things that does make

292
00:11:35,069 --> 00:11:39,420
sense high-risk applications things like

293
00:11:36,989 --> 00:11:41,670
FinTech applications things the handle

294
00:11:39,420 --> 00:11:42,719
sensitive data and and payments these

295
00:11:41,670 --> 00:11:44,160
are the ones that are likely to be

296
00:11:42,720 --> 00:11:46,079
attacked so they're the ones that we

297
00:11:44,160 --> 00:11:50,969
should spend most of the budget trying

298
00:11:46,079 --> 00:11:53,998
to protect and you know I try to think

299
00:11:50,970 --> 00:11:56,009
of it with this kind of this graph on

300
00:11:53,999 --> 00:11:57,899
the bottom left here if your application

301
00:11:56,009 --> 00:12:00,420
kind of falls into this part you know

302
00:11:57,899 --> 00:12:02,220
what ya spend some amount of budget on

303
00:12:00,420 --> 00:12:04,259
it but that's not where the priority

304
00:12:02,220 --> 00:12:06,600
should be instead the ones in the red

305
00:12:04,259 --> 00:12:09,179
quadrant up here should be the ones that

306
00:12:06,600 --> 00:12:12,679
we spend most of the security budget on

307
00:12:09,179 --> 00:12:12,679
the ones we try really hard to secure

308
00:12:16,360 --> 00:12:24,680
so how can we try and integrate security

309
00:12:22,220 --> 00:12:26,389
into those first parts obviously we want

310
00:12:24,680 --> 00:12:27,319
to try and think like an attacker right

311
00:12:26,389 --> 00:12:30,500
that's what we want to try and train

312
00:12:27,320 --> 00:12:32,149
people to do there are different

313
00:12:30,500 --> 00:12:34,399
techniques for the fullest threat

314
00:12:32,149 --> 00:12:36,860
modeling I think is a really big one

315
00:12:34,399 --> 00:12:38,089
I think if organizations start to threat

316
00:12:36,860 --> 00:12:40,190
model their applications as they're

317
00:12:38,089 --> 00:12:41,570
designing it they can say these are the

318
00:12:40,190 --> 00:12:43,459
assets that we're interested in how

319
00:12:41,570 --> 00:12:45,949
might an attacker get there what

320
00:12:43,459 --> 00:12:47,599
security controls can we put in place to

321
00:12:45,949 --> 00:12:48,579
make it to make that as difficult as

322
00:12:47,600 --> 00:12:51,350
possible

323
00:12:48,579 --> 00:12:52,609
Abbie stories I don't know if anyone's

324
00:12:51,350 --> 00:12:54,410
come across this idea before but I

325
00:12:52,610 --> 00:12:55,910
really like it I don't like it I don't

326
00:12:54,410 --> 00:12:57,500
like googling it it's really weird to

327
00:12:55,910 --> 00:13:00,319
have abuse stories in your browser

328
00:12:57,500 --> 00:13:02,600
history but it's a really really good

329
00:13:00,320 --> 00:13:04,540
technique for trying to embed security

330
00:13:02,600 --> 00:13:06,769
into think about security up front I

331
00:13:04,540 --> 00:13:08,360
would say to organizations to try and

332
00:13:06,769 --> 00:13:10,820
read your previous pentest reports are

333
00:13:08,360 --> 00:13:12,709
not understand anything that might be

334
00:13:10,820 --> 00:13:15,889
common throughout it maybe there are a

335
00:13:12,709 --> 00:13:17,810
set of libraries that offer vulnerable

336
00:13:15,889 --> 00:13:19,660
quite common or maybe there's technology

337
00:13:17,810 --> 00:13:22,369
is that you guys aren't using correctly

338
00:13:19,660 --> 00:13:23,839
if we read their previous reports we can

339
00:13:22,370 --> 00:13:25,490
try and understand that and put in

340
00:13:23,839 --> 00:13:28,220
controls to make sure those things don't

341
00:13:25,490 --> 00:13:30,680
keep happening and training of course if

342
00:13:28,220 --> 00:13:33,709
we if we train the developers correctly

343
00:13:30,680 --> 00:13:35,930
then hopefully there's gonna be fewer

344
00:13:33,709 --> 00:13:38,089
issues people will start to understand

345
00:13:35,930 --> 00:13:40,099
security kind of at their core like I

346
00:13:38,089 --> 00:13:41,779
think a lot of us an inverse sec we get

347
00:13:40,100 --> 00:13:44,269
security and we need to try and help

348
00:13:41,779 --> 00:13:46,070
other people who do the same thing and I

349
00:13:44,269 --> 00:13:48,130
will say this is where really we should

350
00:13:46,070 --> 00:13:51,380
be in investigate we should be helping

351
00:13:48,130 --> 00:13:52,910
we should be coming in at this point at

352
00:13:51,380 --> 00:13:55,699
the beginning of the development process

353
00:13:52,910 --> 00:13:58,010
and not at the end as we do receive an

354
00:13:55,699 --> 00:13:59,750
append test you know each of these

355
00:13:58,010 --> 00:14:01,490
things can be full talks on their own

356
00:13:59,750 --> 00:14:04,910
and so we're only going to look at some

357
00:14:01,490 --> 00:14:06,440
of these um so as I said abuse stories I

358
00:14:04,910 --> 00:14:09,620
really like this idea so what we want to

359
00:14:06,440 --> 00:14:11,720
say is like a user story in scrum we're

360
00:14:09,620 --> 00:14:14,329
gonna say as an attacker I want to

361
00:14:11,720 --> 00:14:15,620
perform some kind of actions I want to

362
00:14:14,329 --> 00:14:18,439
log into the application without knowing

363
00:14:15,620 --> 00:14:20,089
the password maybe as an attacker I want

364
00:14:18,440 --> 00:14:23,690
to try and get some free stuff right

365
00:14:20,089 --> 00:14:25,670
it's an e-commerce application I want to

366
00:14:23,690 --> 00:14:28,250
change the ranking of specific products

367
00:14:25,670 --> 00:14:29,120
and maybe I want to try and say this is

368
00:14:28,250 --> 00:14:30,890
a real

369
00:14:29,120 --> 00:14:32,000
cool products when when really you know

370
00:14:30,890 --> 00:14:35,150
it isn't it's something I'm trying to

371
00:14:32,000 --> 00:14:43,790
just flog or maybe I want to read some

372
00:14:35,150 --> 00:14:45,439
sensitive files so these things can be

373
00:14:43,790 --> 00:14:46,160
broken down even further and we can say

374
00:14:45,440 --> 00:14:47,270
as an attacker

375
00:14:46,160 --> 00:14:49,040
I want to log into the application

376
00:14:47,270 --> 00:14:51,079
without knowing the password how might

377
00:14:49,040 --> 00:14:53,630
we do this well we can brute force the

378
00:14:51,080 --> 00:14:54,860
password if we you know if we don't know

379
00:14:53,630 --> 00:14:56,720
the password but we can try and guess it

380
00:14:54,860 --> 00:14:58,520
then that's a value attack

381
00:14:56,720 --> 00:15:00,980
maybe sequel injection so we don't need

382
00:14:58,520 --> 00:15:04,550
to know the password at all password

383
00:15:00,980 --> 00:15:05,960
reset of a user if we if we can change

384
00:15:04,550 --> 00:15:07,310
their password something that we know

385
00:15:05,960 --> 00:15:10,040
then we don't need to know the original

386
00:15:07,310 --> 00:15:11,329
password this list of course it's almost

387
00:15:10,040 --> 00:15:13,370
endless I'm sure you guys are thinking

388
00:15:11,330 --> 00:15:15,830
of a hundred other ways we can try and

389
00:15:13,370 --> 00:15:18,260
get into the application this way this

390
00:15:15,830 --> 00:15:20,990
will be a brainstorming exercise so we

391
00:15:18,260 --> 00:15:24,290
can sit down as a team with the people

392
00:15:20,990 --> 00:15:26,510
that are developing the product with the

393
00:15:24,290 --> 00:15:28,730
info set people on the team as well and

394
00:15:26,510 --> 00:15:32,029
try to come up with as many ideas as

395
00:15:28,730 --> 00:15:35,860
possible so these can all be kind of

396
00:15:32,029 --> 00:15:35,860
logged and protected against early

397
00:15:38,300 --> 00:15:42,170
and this kind of least for this idea of

398
00:15:40,310 --> 00:15:44,930
security requirements so I don't see

399
00:15:42,170 --> 00:15:47,209
this very often unfortunately as

400
00:15:44,930 --> 00:15:49,130
software's being built often there is a

401
00:15:47,210 --> 00:15:51,500
requirements document that's created and

402
00:15:49,130 --> 00:15:53,840
the requirements document says what the

403
00:15:51,500 --> 00:15:56,210
application should do it says you know

404
00:15:53,840 --> 00:15:58,460
the user should be able to buy products

405
00:15:56,210 --> 00:16:01,160
and admin ship about to change prices I

406
00:15:58,460 --> 00:16:02,270
very rarely see security requirements so

407
00:16:01,160 --> 00:16:04,610
if we can put those into that document

408
00:16:02,270 --> 00:16:06,199
then we're in a much better position you

409
00:16:04,610 --> 00:16:09,560
know we can say all web traffic needs to

410
00:16:06,200 --> 00:16:11,500
go over HTTPS or you know capture

411
00:16:09,560 --> 00:16:13,790
answers shouldn't be sent to the user

412
00:16:11,500 --> 00:16:16,130
and once these are in a requirements

413
00:16:13,790 --> 00:16:17,810
document security becomes part of the

414
00:16:16,130 --> 00:16:19,430
quality of the application if the

415
00:16:17,810 --> 00:16:21,530
application is being written correctly

416
00:16:19,430 --> 00:16:28,969
then it includes those security

417
00:16:21,530 --> 00:16:30,709
requirements so if we can get those

418
00:16:28,970 --> 00:16:32,870
requirements right we can find design

419
00:16:30,710 --> 00:16:35,480
problems early I like to think a bit of

420
00:16:32,870 --> 00:16:37,040
like a house versus a bank a house is

421
00:16:35,480 --> 00:16:38,000
quite a difficult thing to secure you

422
00:16:37,040 --> 00:16:39,319
know I'm not gonna really put my

423
00:16:38,000 --> 00:16:41,810
super-sensitive things in a house

424
00:16:39,320 --> 00:16:44,330
because there are bad locks and there

425
00:16:41,810 --> 00:16:47,000
are glass windows and the door frames

426
00:16:44,330 --> 00:16:48,590
aren't very sturdy but in a bank is

427
00:16:47,000 --> 00:16:53,060
probably quite fun that's been designed

428
00:16:48,590 --> 00:16:53,870
from the ground up to be secure so let's

429
00:16:53,060 --> 00:16:55,699
look at the next step

430
00:16:53,870 --> 00:16:57,560
implementation so we've looked at how we

431
00:16:55,700 --> 00:16:59,330
can implement at least some techniques

432
00:16:57,560 --> 00:17:01,430
we can use to emit security at the first

433
00:16:59,330 --> 00:17:05,210
two stages so now in the actual program

434
00:17:01,430 --> 00:17:07,520
part of it again training I think is

435
00:17:05,210 --> 00:17:10,069
super important developers should be

436
00:17:07,520 --> 00:17:12,440
trained to write secure code they need

437
00:17:10,069 --> 00:17:15,980
to be sent on courses to to learn to do

438
00:17:12,440 --> 00:17:18,590
that pairing that this is a really

439
00:17:15,980 --> 00:17:20,089
really cool technique where we have two

440
00:17:18,589 --> 00:17:21,409
developers working together on the same

441
00:17:20,089 --> 00:17:23,750
bit of coding and maybe saying at the

442
00:17:21,410 --> 00:17:25,820
same terminal as well if one of those

443
00:17:23,750 --> 00:17:27,380
developers understand security they'll

444
00:17:25,819 --> 00:17:29,870
be able to influence what the other one

445
00:17:27,380 --> 00:17:32,030
is doing and make sure that security is

446
00:17:29,870 --> 00:17:35,989
kind of being integrated into the code

447
00:17:32,030 --> 00:17:37,580
is is being written then as those pairs

448
00:17:35,990 --> 00:17:39,080
split up and move into other pairs that

449
00:17:37,580 --> 00:17:40,850
knowledge is going to follow them around

450
00:17:39,080 --> 00:17:42,770
so you can take you can go from having

451
00:17:40,850 --> 00:17:44,000
one guy that's really good at security -

452
00:17:42,770 --> 00:17:47,180
it kind of infecting the whole team

453
00:17:44,000 --> 00:17:48,680
almost this the idea of a security SME I

454
00:17:47,180 --> 00:17:51,470
think is quite important if we can have

455
00:17:48,680 --> 00:17:52,220
maybe fewer pen testers and actually

456
00:17:51,470 --> 00:17:54,320
have these guys

457
00:17:52,220 --> 00:17:56,210
instead of working externally bring them

458
00:17:54,320 --> 00:17:59,090
into the team have them as full-time

459
00:17:56,210 --> 00:17:59,900
employees or inside a company inside a

460
00:17:59,090 --> 00:18:01,730
development team

461
00:17:59,900 --> 00:18:04,490
then they that there's going to be some

462
00:18:01,730 --> 00:18:05,540
security knowledge that is there the

463
00:18:04,490 --> 00:18:07,730
developers have someone that they can

464
00:18:05,540 --> 00:18:09,560
answer their questions I sorry they have

465
00:18:07,730 --> 00:18:11,960
someone to answer their questions and

466
00:18:09,560 --> 00:18:14,419
provide guidance and feedback as they're

467
00:18:11,960 --> 00:18:16,940
writing their applications this is quite

468
00:18:14,420 --> 00:18:18,500
similar to security champion but I'd say

469
00:18:16,940 --> 00:18:21,230
with a security n'that there's someone

470
00:18:18,500 --> 00:18:23,390
actually writing the code themselves it

471
00:18:21,230 --> 00:18:26,360
might be that one guy that is really

472
00:18:23,390 --> 00:18:28,190
into security I'm sure if he spent any

473
00:18:26,360 --> 00:18:29,540
time with a development team there's

474
00:18:28,190 --> 00:18:31,520
always that one dude there's just kind

475
00:18:29,540 --> 00:18:34,010
of a bit too into security I know

476
00:18:31,520 --> 00:18:35,090
because I was that guy right so I used

477
00:18:34,010 --> 00:18:37,070
to be a software engineer and

478
00:18:35,090 --> 00:18:39,439
unfortunately where I worked they didn't

479
00:18:37,070 --> 00:18:41,689
let me do security things so I left to

480
00:18:39,440 --> 00:18:43,070
become a pen tester and I have lots of

481
00:18:41,690 --> 00:18:45,020
friends that have very similar stories

482
00:18:43,070 --> 00:18:46,460
so instead maybe we should say these

483
00:18:45,020 --> 00:18:47,960
guys are here they're developers that

484
00:18:46,460 --> 00:18:49,640
own IT and their interests in security

485
00:18:47,960 --> 00:18:52,610
let's let them be the ones that are

486
00:18:49,640 --> 00:18:53,810
doing security things you know a company

487
00:18:52,610 --> 00:18:55,189
should be sending these guys to

488
00:18:53,810 --> 00:18:57,230
conferences for example they should be

489
00:18:55,190 --> 00:18:59,330
encouraging and encouraging them to do

490
00:18:57,230 --> 00:19:02,630
security stuff and keeping them within

491
00:18:59,330 --> 00:19:04,550
that in the team's code review also a

492
00:19:02,630 --> 00:19:06,710
really awesome technique for making sure

493
00:19:04,550 --> 00:19:09,980
things are developed securely right when

494
00:19:06,710 --> 00:19:12,260
I was a software engineer we did code

495
00:19:09,980 --> 00:19:14,330
review when we committed our code into

496
00:19:12,260 --> 00:19:15,590
our source code repo but normally lived

497
00:19:14,330 --> 00:19:17,720
it from a security point of view is

498
00:19:15,590 --> 00:19:21,290
always things like you know is the code

499
00:19:17,720 --> 00:19:23,390
testable or is it no is it one of these

500
00:19:21,290 --> 00:19:27,409
other measures of quality but there was

501
00:19:23,390 --> 00:19:30,320
never really a security thing is anyone

502
00:19:27,410 --> 00:19:32,630
familiar with the term chat ops one

503
00:19:30,320 --> 00:19:35,060
person okay awesome so I thought this

504
00:19:32,630 --> 00:19:37,340
was really cool um I spent a bit of time

505
00:19:35,060 --> 00:19:39,919
doing a as an internal pen tester for a

506
00:19:37,340 --> 00:19:41,959
company we were a very small team

507
00:19:39,920 --> 00:19:43,370
doesn't he I think five of us and it was

508
00:19:41,960 --> 00:19:45,860
a massive dev team but all these

509
00:19:43,370 --> 00:19:47,449
different projects by projects and one

510
00:19:45,860 --> 00:19:50,030
day I realized that the devs were

511
00:19:47,450 --> 00:19:52,190
talking on slack a lot and I said to my

512
00:19:50,030 --> 00:19:54,050
colleagues how come we're not slack I

513
00:19:52,190 --> 00:19:55,850
said ah we don't really need to be they

514
00:19:54,050 --> 00:19:57,680
won't ask us questions or whatever they

515
00:19:55,850 --> 00:20:01,129
can email us or there's Skype for

516
00:19:57,680 --> 00:20:02,390
business or they can phone us and you

517
00:20:01,130 --> 00:20:05,270
know they're just doing like dev stuff

518
00:20:02,390 --> 00:20:05,929
on slack okay fair enough but I joined

519
00:20:05,270 --> 00:20:07,460
anyway because I

520
00:20:05,929 --> 00:20:09,799
kind of wouldn't see what kind of things

521
00:20:07,460 --> 00:20:12,080
that were talking about and I answered

522
00:20:09,799 --> 00:20:13,940
more security questions on slack than I

523
00:20:12,080 --> 00:20:15,470
didn't through any other means I was

524
00:20:13,940 --> 00:20:17,269
just like random stuff devs were just be

525
00:20:15,470 --> 00:20:19,039
talking about themselves and say ah does

526
00:20:17,269 --> 00:20:21,350
anyone know how to do this thing in this

527
00:20:19,039 --> 00:20:23,090
library or does anyone know if there's

528
00:20:21,350 --> 00:20:25,820
any like security risk involved with

529
00:20:23,090 --> 00:20:27,678
doing this particular thing and just

530
00:20:25,820 --> 00:20:29,869
being involved with how they were

531
00:20:27,679 --> 00:20:31,899
talking and talking with them I think

532
00:20:29,869 --> 00:20:35,330
make the massive difference to them and

533
00:20:31,899 --> 00:20:38,239
then finally I would say conferences

534
00:20:35,330 --> 00:20:41,149
right so not only should we be more

535
00:20:38,240 --> 00:20:44,809
accepting of non InfoSec people in in

536
00:20:41,149 --> 00:20:47,149
frustrates we should be attending fewer

537
00:20:44,809 --> 00:20:50,899
infoset conferences and more converses

538
00:20:47,149 --> 00:20:51,949
around development and QA testing so

539
00:20:50,899 --> 00:20:53,479
this is something I've been doing quite

540
00:20:51,950 --> 00:20:56,299
a lot recently I've been trying to go to

541
00:20:53,480 --> 00:20:58,220
other conferences honestly it's it's

542
00:20:56,299 --> 00:21:00,619
really awesome to be able to be the

543
00:20:58,220 --> 00:21:01,999
security guy there because they have so

544
00:21:00,619 --> 00:21:04,519
many questions and no one they can

545
00:21:01,999 --> 00:21:06,740
really ask those so by being there and

546
00:21:04,519 --> 00:21:09,200
actually kind of telling our message to

547
00:21:06,740 --> 00:21:13,850
them then they will start to take that

548
00:21:09,200 --> 00:21:15,470
on board as I mentioned before

549
00:21:13,850 --> 00:21:17,178
developers have their own way of testing

550
00:21:15,470 --> 00:21:20,869
their code and unit testing is one of

551
00:21:17,179 --> 00:21:23,450
them and I again I very rarely see

552
00:21:20,869 --> 00:21:25,279
security unit tests but there's been a

553
00:21:23,450 --> 00:21:27,289
lot of effort involved in trying to

554
00:21:25,279 --> 00:21:29,960
understand how to have unit test code

555
00:21:27,289 --> 00:21:33,470
well so let's try and get security added

556
00:21:29,960 --> 00:21:34,039
to that and there are a few different

557
00:21:33,470 --> 00:21:35,509
techniques

558
00:21:34,039 --> 00:21:37,879
there's test-driven development and

559
00:21:35,509 --> 00:21:40,730
behavioral driven development so let's

560
00:21:37,879 --> 00:21:42,439
try and kind of latch onto that and

561
00:21:40,730 --> 00:21:44,119
potentially have the idea of you know

562
00:21:42,440 --> 00:21:45,889
one developer writes the unit test and

563
00:21:44,119 --> 00:21:46,820
the other one arrives the code so

564
00:21:45,889 --> 00:21:51,469
there's kind of some kind of separation

565
00:21:46,820 --> 00:21:53,178
there so with the unit test and with

566
00:21:51,470 --> 00:21:56,119
this behavior driven development

567
00:21:53,179 --> 00:21:58,610
approach I like doing this you know with

568
00:21:56,119 --> 00:22:00,428
my requirement like I say given an

569
00:21:58,610 --> 00:22:03,049
attacker can submit using a password

570
00:22:00,429 --> 00:22:04,730
when they try more than five incorrect

571
00:22:03,049 --> 00:22:06,740
passwords then they can't should be

572
00:22:04,730 --> 00:22:09,830
locked right and this is a very simple

573
00:22:06,740 --> 00:22:11,269
test but if it works then it means that

574
00:22:09,830 --> 00:22:13,939
as a pen tester I don't need to now

575
00:22:11,269 --> 00:22:15,679
write that users can either names could

576
00:22:13,940 --> 00:22:19,039
be brute forced and things I possibly

577
00:22:15,679 --> 00:22:19,789
forced so you know I try to write very

578
00:22:19,039 --> 00:22:22,369
basic

579
00:22:19,789 --> 00:22:24,139
for this now this is very naive and it

580
00:22:22,369 --> 00:22:26,869
probably won't work in the kind of ways

581
00:22:24,139 --> 00:22:28,279
we want depending on kind of how the

582
00:22:26,869 --> 00:22:30,499
test is implemented and that whether

583
00:22:28,279 --> 00:22:32,059
sessions are stored in everything but

584
00:22:30,499 --> 00:22:35,029
you can see you know what we do have is

585
00:22:32,059 --> 00:22:36,830
a test that says you know given a user

586
00:22:35,029 --> 00:22:38,929
consumed a user and password so we can

587
00:22:36,830 --> 00:22:41,178
have like the login Authenticator class

588
00:22:38,929 --> 00:22:43,309
and we can try and login a few times and

589
00:22:41,179 --> 00:22:44,720
then we check if it's been locked and if

590
00:22:43,309 --> 00:22:47,389
this is now in a unit test every time

591
00:22:44,720 --> 00:22:48,889
the software is built or compiled this

592
00:22:47,389 --> 00:22:51,498
test will run and we know that that is

593
00:22:48,889 --> 00:22:52,969
is always going to be true and if there

594
00:22:51,499 --> 00:22:59,019
ever spots being the case then it's

595
00:22:52,970 --> 00:23:00,889
flagged instantly to the developer so

596
00:22:59,019 --> 00:23:02,659
okay awesome we've looked at

597
00:23:00,889 --> 00:23:03,580
requirements design some implementation

598
00:23:02,659 --> 00:23:06,049
stuff

599
00:23:03,580 --> 00:23:08,539
what about testing now I don't mean

600
00:23:06,049 --> 00:23:10,908
security testing in this case how can we

601
00:23:08,539 --> 00:23:13,999
embed security testing into the QA

602
00:23:10,909 --> 00:23:15,950
testing process well I think that

603
00:23:13,999 --> 00:23:16,309
security tooling is really not where it

604
00:23:15,950 --> 00:23:18,619
should be

605
00:23:16,309 --> 00:23:21,019
security tooling it's fantastic for

606
00:23:18,619 --> 00:23:23,178
security people we have so many awesome

607
00:23:21,019 --> 00:23:25,700
hacker tools for hackers right sequel

608
00:23:23,179 --> 00:23:27,289
map Bob sweet like all these tools are

609
00:23:25,700 --> 00:23:29,899
awesome but have you ever tried to teach

610
00:23:27,289 --> 00:23:31,908
someone to use burp suite right it's

611
00:23:29,899 --> 00:23:33,379
really really hard I think we forget

612
00:23:31,909 --> 00:23:34,519
that because we've been using them so

613
00:23:33,379 --> 00:23:36,349
long we think oh yeah of course it's

614
00:23:34,519 --> 00:23:37,940
really simple but this isn't really how

615
00:23:36,349 --> 00:23:40,189
developers and QA testers want to test

616
00:23:37,940 --> 00:23:43,519
their applications i am i remember one

617
00:23:40,190 --> 00:23:46,599
one company they had this open-source

618
00:23:43,519 --> 00:23:49,309
pen testing tool for mobile applications

619
00:23:46,599 --> 00:23:51,379
and it worked really really well and i

620
00:23:49,309 --> 00:23:53,928
used it a lot and they tried to sell a

621
00:23:51,379 --> 00:23:55,668
pro version of it and nobody bought the

622
00:23:53,929 --> 00:23:57,139
pro version because what they did

623
00:23:55,669 --> 00:23:58,669
basically is they just added a GUI on

624
00:23:57,139 --> 00:24:00,649
top of the command line version because

625
00:23:58,669 --> 00:24:02,779
they were just the assumptions that devs

626
00:24:00,649 --> 00:24:04,279
you know they could they wanted to do

627
00:24:02,779 --> 00:24:06,349
the same stuff but they weren't quite as

628
00:24:04,279 --> 00:24:07,729
smart as those pen testers so just add a

629
00:24:06,349 --> 00:24:10,039
GUI to it and then that's what they're

630
00:24:07,729 --> 00:24:13,549
gonna want to use that's not quite right

631
00:24:10,039 --> 00:24:15,499
so we need to start to write more

632
00:24:13,549 --> 00:24:16,999
tooling for these people so they can

633
00:24:15,499 --> 00:24:21,259
actually so we can take our knowledge

634
00:24:16,999 --> 00:24:23,299
and embed it into what they do and i

635
00:24:21,259 --> 00:24:24,830
think a lot of the tooling should now

636
00:24:23,299 --> 00:24:26,749
start to look a bit more like this

637
00:24:24,830 --> 00:24:28,879
things that can be plugged into the

638
00:24:26,749 --> 00:24:31,309
build pipeline things that can be run on

639
00:24:28,879 --> 00:24:32,340
a trigger so like when an application is

640
00:24:31,309 --> 00:24:34,320
built

641
00:24:32,340 --> 00:24:36,418
then it runs although the security tools

642
00:24:34,320 --> 00:24:39,539
and gives them instant feedback is a

643
00:24:36,419 --> 00:24:42,059
this thing was that was secure it's not

644
00:24:39,539 --> 00:24:43,260
secure these one abilities exist sure

645
00:24:42,059 --> 00:24:44,549
it's not gonna pick up everything but

646
00:24:43,260 --> 00:24:46,440
it's gonna pick up a lot and it gives

647
00:24:44,549 --> 00:24:51,418
feedback to the developer and to the

648
00:24:46,440 --> 00:24:53,190
tester so quite naively I tried to write

649
00:24:51,419 --> 00:24:57,659
something like this this was actually a

650
00:24:53,190 --> 00:24:59,610
few years ago for Def Con so we took

651
00:24:57,659 --> 00:25:01,230
some of these Android tools and we wrote

652
00:24:59,610 --> 00:25:02,879
wrappers around them we plug them into

653
00:25:01,230 --> 00:25:04,620
Jenkins and actually worked really well

654
00:25:02,880 --> 00:25:06,630
you know we could build the application

655
00:25:04,620 --> 00:25:08,969
and when the vulnerabilities existed

656
00:25:06,630 --> 00:25:11,880
their build would fail and when it

657
00:25:08,970 --> 00:25:13,980
didn't when that whenever we didn't

658
00:25:11,880 --> 00:25:15,690
exist the bill to pass so we have a way

659
00:25:13,980 --> 00:25:17,450
to see instantly okay these run

660
00:25:15,690 --> 00:25:19,529
abilities do exist or they don't exist

661
00:25:17,450 --> 00:25:22,529
and again it's about this instant

662
00:25:19,529 --> 00:25:25,350
feedback right and yeah it was it was

663
00:25:22,529 --> 00:25:27,120
you know not too easy to really write

664
00:25:25,350 --> 00:25:30,178
these kind of wrappers but that was the

665
00:25:27,120 --> 00:25:32,070
only real way of doing it now we have

666
00:25:30,179 --> 00:25:34,169
we've actually expanded on that idea

667
00:25:32,070 --> 00:25:37,700
rate due to interruption we have taken

668
00:25:34,169 --> 00:25:41,010
we've written our own Android testing

669
00:25:37,700 --> 00:25:43,860
software and actually it's mostly run by

670
00:25:41,010 --> 00:25:45,960
an API now so we have a web front-end

671
00:25:43,860 --> 00:25:47,850
for it sure but it's just using the API

672
00:25:45,960 --> 00:25:49,740
in the background so that way we

673
00:25:47,850 --> 00:25:52,770
actually have the plugins that will plug

674
00:25:49,740 --> 00:25:55,770
into inter Jenkins or you know any other

675
00:25:52,770 --> 00:25:57,480
CI CD system that allows us to just run

676
00:25:55,770 --> 00:26:00,120
these scans and provide feedback to the

677
00:25:57,480 --> 00:26:01,919
developers so this is just an example of

678
00:26:00,120 --> 00:26:04,529
tooling but this is I think what well

679
00:26:01,919 --> 00:26:08,070
any info set we should be making our

680
00:26:04,529 --> 00:26:10,380
tools look like there are a few

681
00:26:08,070 --> 00:26:14,250
different ways of doing security tooling

682
00:26:10,380 --> 00:26:16,340
so we have sass tools so these are the

683
00:26:14,250 --> 00:26:19,679
ones that do gonna source code scanning

684
00:26:16,340 --> 00:26:21,029
they they look for you know maybe they

685
00:26:19,679 --> 00:26:22,950
do pattern matching or they do something

686
00:26:21,029 --> 00:26:25,529
called taint analysis where we look at

687
00:26:22,950 --> 00:26:26,789
the input that's coming in to it so they

688
00:26:25,529 --> 00:26:28,980
know this is the source and this is the

689
00:26:26,789 --> 00:26:31,140
sink we follow that through okay there

690
00:26:28,980 --> 00:26:32,340
might be sequel injection so it does

691
00:26:31,140 --> 00:26:34,529
these kind of things to try and find

692
00:26:32,340 --> 00:26:36,000
vulnerabilities and a guy called Nick

693
00:26:34,529 --> 00:26:39,000
Jones did a really good talk at Def Con

694
00:26:36,000 --> 00:26:40,950
on how this works but yeah this is a

695
00:26:39,000 --> 00:26:43,809
really really awesome way of performing

696
00:26:40,950 --> 00:26:46,179
some kind of security

697
00:26:43,809 --> 00:26:48,609
security scans as you're writing code

698
00:26:46,179 --> 00:26:51,129
this has the advantage of being able to

699
00:26:48,609 --> 00:26:53,139
run on the developers machine for zombie

700
00:26:51,129 --> 00:26:55,509
be built into the IDE so as they're

701
00:26:53,139 --> 00:26:57,728
typing code and as its found to be

702
00:26:55,509 --> 00:27:00,009
insecure he gets like highlighted in

703
00:26:57,729 --> 00:27:03,879
like you know red in the ID giving them

704
00:27:00,009 --> 00:27:07,119
again instant feedback that's this is

705
00:27:03,879 --> 00:27:08,709
more the dynamic stuff so thinks I'm

706
00:27:07,119 --> 00:27:10,029
like zapped right so this is actually

707
00:27:08,710 --> 00:27:12,789
running against an actual live

708
00:27:10,029 --> 00:27:14,139
application it can be almost harder than

709
00:27:12,789 --> 00:27:15,369
static testing in a way because we need

710
00:27:14,139 --> 00:27:18,099
to have the live vert and the app

711
00:27:15,369 --> 00:27:19,629
running it needs to be that the test

712
00:27:18,099 --> 00:27:21,609
case needs to run against the actual

713
00:27:19,629 --> 00:27:25,178
live version of the app so it can be a

714
00:27:21,609 --> 00:27:27,099
bit harder to get set up and once the

715
00:27:25,179 --> 00:27:28,719
tools are made application aware this

716
00:27:27,099 --> 00:27:31,089
can be quite a powerful technique and

717
00:27:28,719 --> 00:27:32,469
yeah I've seen that this can be a little

718
00:27:31,089 --> 00:27:35,320
better than finding some design flaws

719
00:27:32,469 --> 00:27:37,690
especially if you have given the tool

720
00:27:35,320 --> 00:27:39,820
knowledge about the application and

721
00:27:37,690 --> 00:27:43,929
you've you know using like custom custom

722
00:27:39,820 --> 00:27:45,908
rules and custom test cases and then

723
00:27:43,929 --> 00:27:47,190
if's this is quite a new thing this is

724
00:27:45,909 --> 00:27:49,210
like the new kid on the block really

725
00:27:47,190 --> 00:27:52,450
it's almost fast with the

726
00:27:49,210 --> 00:27:54,399
instrumentation so it has almost the

727
00:27:52,450 --> 00:27:57,309
advantages of neither but the

728
00:27:54,399 --> 00:27:58,959
disadvantage of both dastan sassed but

729
00:27:57,309 --> 00:28:01,330
it's quite a cool technique so what this

730
00:27:58,960 --> 00:28:03,249
will do is it will take your live

731
00:28:01,330 --> 00:28:06,189
application and it will inject yourself

732
00:28:03,249 --> 00:28:08,499
into the the runtime of the app and so

733
00:28:06,190 --> 00:28:10,059
as people are using the application or

734
00:28:08,499 --> 00:28:13,149
as test cases of running against the

735
00:28:10,059 --> 00:28:14,200
application it's actually doing security

736
00:28:13,149 --> 00:28:16,268
check so you don't really even need to

737
00:28:14,200 --> 00:28:18,389
write particularly security test cases

738
00:28:16,269 --> 00:28:21,249
or anything but it picks up security

739
00:28:18,389 --> 00:28:23,918
vulnerabilities now the disadvantage is

740
00:28:21,249 --> 00:28:26,139
a really only finds the same cuts by the

741
00:28:23,919 --> 00:28:28,059
types of issues as SAS does but it's

742
00:28:26,139 --> 00:28:30,699
just another way of another way of doing

743
00:28:28,059 --> 00:28:34,269
it another kind of Boeing are another

744
00:28:30,700 --> 00:28:37,119
just method of doing it so awesome we

745
00:28:34,269 --> 00:28:39,219
have automated security right not quite

746
00:28:37,119 --> 00:28:41,009
there yet so we have we have some of

747
00:28:39,219 --> 00:28:43,509
these tools and they work really well

748
00:28:41,009 --> 00:28:44,589
but actually I tried to do a bit of an

749
00:28:43,509 --> 00:28:46,919
analysis of some of these so I took

750
00:28:44,589 --> 00:28:50,379
hacker zone which is an open source

751
00:28:46,919 --> 00:28:53,649
vulnerable application and I've run burp

752
00:28:50,379 --> 00:28:56,159
suite and sapper gains there and but it

753
00:28:53,649 --> 00:28:57,689
took five minutes to run and

754
00:28:56,160 --> 00:29:00,720
the number of vulnerabilities zapped

755
00:28:57,690 --> 00:29:02,070
took around 38 minutes and actually I

756
00:29:00,720 --> 00:29:03,690
tried the new version of Burke's suite

757
00:29:02,070 --> 00:29:05,250
and that took 15 seconds but that's

758
00:29:03,690 --> 00:29:08,820
because it couldn't you run against the

759
00:29:05,250 --> 00:29:10,440
app it couldn't find anything so it's

760
00:29:08,820 --> 00:29:12,540
really naive to say okay we have these

761
00:29:10,440 --> 00:29:15,200
tools just run them and you're good to

762
00:29:12,540 --> 00:29:17,820
go these tools really do need to be

763
00:29:15,200 --> 00:29:19,410
configured properly and again I would

764
00:29:17,820 --> 00:29:22,020
say that this is a really good point to

765
00:29:19,410 --> 00:29:23,970
approach our organizations and to say

766
00:29:22,020 --> 00:29:25,710
you know as the security experts we're

767
00:29:23,970 --> 00:29:27,300
gonna help you set these tools up we're

768
00:29:25,710 --> 00:29:28,770
gonna you know set them up so you are

769
00:29:27,300 --> 00:29:33,870
getting as much coverage as far as

770
00:29:28,770 --> 00:29:37,200
possible so I actually ran it against

771
00:29:33,870 --> 00:29:39,629
the juice shop as well which is kind of

772
00:29:37,200 --> 00:29:43,080
why I'm basing you know this this talk

773
00:29:39,630 --> 00:29:44,970
squared company on so this runnable

774
00:29:43,080 --> 00:29:46,889
application called juice shop I ran it

775
00:29:44,970 --> 00:29:48,360
against that and honestly the tools they

776
00:29:46,890 --> 00:29:50,760
crashed before they even found when you

777
00:29:48,360 --> 00:29:53,040
run abilities because you shop is a more

778
00:29:50,760 --> 00:29:55,980
modern application and yeah these tools

779
00:29:53,040 --> 00:29:58,740
just that weren't quite configured to

780
00:29:55,980 --> 00:30:00,930
scan that type of app it can be they can

781
00:29:58,740 --> 00:30:03,450
be configured to scan it and again it's

782
00:30:00,930 --> 00:30:05,160
just about us in security helping to get

783
00:30:03,450 --> 00:30:07,680
those things set up and not just saying

784
00:30:05,160 --> 00:30:11,040
just run zapping and you'll get some

785
00:30:07,680 --> 00:30:12,690
stuff no these are the kind of things

786
00:30:11,040 --> 00:30:14,520
that we can find though you know we can

787
00:30:12,690 --> 00:30:17,340
find things like cross-site scripting

788
00:30:14,520 --> 00:30:20,129
and sequel injection so on one side so

789
00:30:17,340 --> 00:30:22,020
on the left here this is from birth and

790
00:30:20,130 --> 00:30:24,810
on the right is from zap so they do find

791
00:30:22,020 --> 00:30:25,830
different kinds of vulnerabilities but

792
00:30:24,810 --> 00:30:28,530
again you know these are things that

793
00:30:25,830 --> 00:30:30,120
could easily be be found and should

794
00:30:28,530 --> 00:30:32,520
definitely be found before the pen test

795
00:30:30,120 --> 00:30:34,229
I should never be in a position where I

796
00:30:32,520 --> 00:30:37,460
am reporting cross-site scripting

797
00:30:34,230 --> 00:30:39,600
because these tools will find it for you

798
00:30:37,460 --> 00:30:40,890
and also just because it's easy to find

799
00:30:39,600 --> 00:30:43,469
it doesn't mean that it's a lower risk

800
00:30:40,890 --> 00:30:46,380
issue either right so this idea of like

801
00:30:43,470 --> 00:30:47,670
low-hanging fruit it can still be a high

802
00:30:46,380 --> 00:30:49,740
risk issue and still be low-hanging

803
00:30:47,670 --> 00:30:55,260
fruit so things like sequin injection

804
00:30:49,740 --> 00:30:56,640
and XML injection so QA testers I found

805
00:30:55,260 --> 00:30:59,580
are actually really really good at

806
00:30:56,640 --> 00:31:01,290
automating what they do if you've not

807
00:30:59,580 --> 00:31:03,179
spent any time around QA testers I

808
00:31:01,290 --> 00:31:05,070
highly recommend it they have they've

809
00:31:03,180 --> 00:31:06,600
been doing some amazing work and how

810
00:31:05,070 --> 00:31:07,679
they actually also make their test cases

811
00:31:06,600 --> 00:31:08,399
I guess they're probably more lazy than

812
00:31:07,680 --> 00:31:11,220
we are

813
00:31:08,400 --> 00:31:13,170
but they do they have like such awesome

814
00:31:11,220 --> 00:31:15,420
frameworks and techniques to automate

815
00:31:13,170 --> 00:31:17,760
that their tests so if we can plug

816
00:31:15,420 --> 00:31:19,740
security into that it'll be even better

817
00:31:17,760 --> 00:31:21,840
unfortunate I hear a lot all the time in

818
00:31:19,740 --> 00:31:23,910
our security isn't our job from them I

819
00:31:21,840 --> 00:31:26,790
think it's up to us to try and convince

820
00:31:23,910 --> 00:31:30,180
them that actually a you know a security

821
00:31:26,790 --> 00:31:35,550
vulnerability is also a bug so you guys

822
00:31:30,180 --> 00:31:37,440
go and find the bugs and we looked at

823
00:31:35,550 --> 00:31:40,950
this idea of these security requirements

824
00:31:37,440 --> 00:31:42,840
earlier if we have our security

825
00:31:40,950 --> 00:31:45,330
requirements laid out we can actually

826
00:31:42,840 --> 00:31:46,980
say to the QA tester just make sure

827
00:31:45,330 --> 00:31:49,110
these things you know do or don't exist

828
00:31:46,980 --> 00:31:51,570
you don't need to be a security expert

829
00:31:49,110 --> 00:31:53,939
to test some of these things especially

830
00:31:51,570 --> 00:31:56,389
if the tooling is is good you know you

831
00:31:53,940 --> 00:31:58,920
can say to the tester and make sure that

832
00:31:56,390 --> 00:32:02,100
you know all the web traffic goes over

833
00:31:58,920 --> 00:32:04,050
HTTPS and again that this is one fewer

834
00:32:02,100 --> 00:32:11,459
thing that I need to put in the pen test

835
00:32:04,050 --> 00:32:13,409
report and actually I got this message a

836
00:32:11,460 --> 00:32:16,140
little while back from from a QA test I

837
00:32:13,410 --> 00:32:18,000
was at a conference called test bash and

838
00:32:16,140 --> 00:32:20,280
this is a QA testing conference and I

839
00:32:18,000 --> 00:32:22,260
was there I gave a workshop on mobile

840
00:32:20,280 --> 00:32:24,600
security also I was just there to just

841
00:32:22,260 --> 00:32:26,070
talk to people about security and then a

842
00:32:24,600 --> 00:32:28,590
little while later one of the testers

843
00:32:26,070 --> 00:32:30,179
messaged me and they said that they

844
00:32:28,590 --> 00:32:31,709
actually found their first run ability

845
00:32:30,180 --> 00:32:33,780
in one of the applications they were

846
00:32:31,710 --> 00:32:35,880
testing that was quite a basic thing for

847
00:32:33,780 --> 00:32:38,129
sure it was just sending the app was

848
00:32:35,880 --> 00:32:40,230
sending the password over HTTP to the

849
00:32:38,130 --> 00:32:42,120
API but again like it's awesome right

850
00:32:40,230 --> 00:32:45,590
that they're finding that before it even

851
00:32:42,120 --> 00:32:45,590
gets to the point of needing a pen test

852
00:32:45,890 --> 00:32:51,330
so infrastructure my guy who lived a lot

853
00:32:49,440 --> 00:32:52,320
about application stuff and then what

854
00:32:51,330 --> 00:32:54,449
about the infrastructure because a lot

855
00:32:52,320 --> 00:32:57,330
of time that can be the problem right

856
00:32:54,450 --> 00:33:00,930
maybe the you know dev spins up some

857
00:32:57,330 --> 00:33:03,389
some Jenkins server and you know they

858
00:33:00,930 --> 00:33:06,810
shouldn't and then the attacker gets in

859
00:33:03,390 --> 00:33:08,370
that way well one thing that I really

860
00:33:06,810 --> 00:33:11,820
like is this idea of infrastructure is

861
00:33:08,370 --> 00:33:14,100
code so there are there projects like

862
00:33:11,820 --> 00:33:16,889
like chef and pop inaudible that lets us

863
00:33:14,100 --> 00:33:19,050
write config files and source code to

864
00:33:16,890 --> 00:33:21,990
describe our infrastructure then that

865
00:33:19,050 --> 00:33:26,310
gets run and that brings up our

866
00:33:21,990 --> 00:33:29,760
environment if we can get a position

867
00:33:26,310 --> 00:33:32,220
where we're doing this then we can use

868
00:33:29,760 --> 00:33:34,110
the same kind of SAS tools against our

869
00:33:32,220 --> 00:33:36,870
infrastructure because it's now source

870
00:33:34,110 --> 00:33:40,909
code we can say you know there's this

871
00:33:36,870 --> 00:33:43,620
config file that says you know port 20

872
00:33:40,910 --> 00:33:46,470
22 is open and that's fine and that's a

873
00:33:43,620 --> 00:33:48,540
good baseline if that's ever changed to

874
00:33:46,470 --> 00:33:50,910
open up port 23 then that could be

875
00:33:48,540 --> 00:33:52,620
flagged and highlighted by our build

876
00:33:50,910 --> 00:33:55,020
system and say well actually there's a

877
00:33:52,620 --> 00:33:58,889
run ability here you know this needs to

878
00:33:55,020 --> 00:34:04,740
be this needs to be approved or needs to

879
00:33:58,890 --> 00:34:07,110
be changed back when when we can't use

880
00:34:04,740 --> 00:34:08,850
that kind of SAS tools then again we can

881
00:34:07,110 --> 00:34:10,560
kind of use some of these more dynamic

882
00:34:08,850 --> 00:34:11,699
stuff we can use things like like and

883
00:34:10,560 --> 00:34:13,649
map and necess but they need to be

884
00:34:11,699 --> 00:34:18,029
scripted and plugged into the pipe one

885
00:34:13,649 --> 00:34:19,440
and run continuously so we actually

886
00:34:18,030 --> 00:34:21,510
changed the build system to be something

887
00:34:19,440 --> 00:34:24,090
a bit more like this so the developer

888
00:34:21,510 --> 00:34:25,919
they commit their code to github after

889
00:34:24,090 --> 00:34:28,919
doing some kind of maybe some security

890
00:34:25,918 --> 00:34:31,560
code review then that's part of the

891
00:34:28,918 --> 00:34:33,560
build with Jenkins then it goes through

892
00:34:31,560 --> 00:34:35,820
and then just runs all these test cases

893
00:34:33,560 --> 00:34:38,250
it checks for vulnerable dependencies

894
00:34:35,820 --> 00:34:41,399
yeah it checks the source code to find

895
00:34:38,250 --> 00:34:42,719
some issues or it runs dynamic tests and

896
00:34:41,399 --> 00:34:44,639
then only if all those things are

897
00:34:42,719 --> 00:34:46,739
successful then actually deploys the new

898
00:34:44,639 --> 00:34:50,009
version of the application and reports

899
00:34:46,739 --> 00:34:51,989
back to the developer the build can fail

900
00:34:50,010 --> 00:34:54,149
at any time you know if the vulnerable

901
00:34:51,989 --> 00:34:55,319
if the dependencies are vulnerable then

902
00:34:54,149 --> 00:34:56,699
they should go back issue obviously

903
00:34:55,320 --> 00:34:59,490
shouldn't do the rest of the test and

904
00:34:56,699 --> 00:35:01,259
just say to the developer these these

905
00:34:59,490 --> 00:35:04,919
dependencies are now vulnerable and

906
00:35:01,260 --> 00:35:07,710
needs to be fixed and of course this

907
00:35:04,920 --> 00:35:10,140
happens or can happen every time the

908
00:35:07,710 --> 00:35:11,880
application is built the riot II is that

909
00:35:10,140 --> 00:35:13,170
we won't happen every time the app is

910
00:35:11,880 --> 00:35:15,450
built you know maybe that something like

911
00:35:13,170 --> 00:35:18,270
this only happens once a week in order

912
00:35:15,450 --> 00:35:19,319
to just kind of speed up process but you

913
00:35:18,270 --> 00:35:21,750
know for every company they should

914
00:35:19,320 --> 00:35:23,070
decide what is important to them how

915
00:35:21,750 --> 00:35:24,150
much security the risk that when I tell

916
00:35:23,070 --> 00:35:26,280
you compared to how long they want their

917
00:35:24,150 --> 00:35:28,170
project to take to build and they can

918
00:35:26,280 --> 00:35:30,530
decide themselves kind of how to to

919
00:35:28,170 --> 00:35:32,780
manage this

920
00:35:30,530 --> 00:35:37,340
so we have more of this continuous thing

921
00:35:32,780 --> 00:35:39,260
we say you know we're moving testing to

922
00:35:37,340 --> 00:35:42,710
be a continuous thing development is

923
00:35:39,260 --> 00:35:45,440
continuous it's going directly into into

924
00:35:42,710 --> 00:35:47,390
production maybe and the question really

925
00:35:45,440 --> 00:35:51,230
is where does pen testing fit into this

926
00:35:47,390 --> 00:35:52,430
now because when we do a pen test we

927
00:35:51,230 --> 00:35:54,860
kind of we do need a finished

928
00:35:52,430 --> 00:35:57,440
application I've tried to do pentesting

929
00:35:54,860 --> 00:35:58,700
in a crazy agile environment and it's

930
00:35:57,440 --> 00:36:00,590
really really difficult because the app

931
00:35:58,700 --> 00:36:02,870
just keeps changing you find a

932
00:36:00,590 --> 00:36:04,640
vulnerability the next day you find out

933
00:36:02,870 --> 00:36:06,410
that they've just removed the code right

934
00:36:04,640 --> 00:36:11,060
so we need to finish that when we doing

935
00:36:06,410 --> 00:36:13,549
pen testing so again when we looked at

936
00:36:11,060 --> 00:36:15,020
this and we said that maybe if if it's

937
00:36:13,550 --> 00:36:16,880
in the bottom left hand side we don't

938
00:36:15,020 --> 00:36:20,060
need a pen test and I would say you know

939
00:36:16,880 --> 00:36:22,010
with if we have all this security that

940
00:36:20,060 --> 00:36:24,410
we have automated and add to the build

941
00:36:22,010 --> 00:36:27,440
and to the process then it's totally

942
00:36:24,410 --> 00:36:30,259
cool to go live with without doing a pen

943
00:36:27,440 --> 00:36:32,240
test if it's a low-risk application if

944
00:36:30,260 --> 00:36:33,470
it's a high-risk application okay we

945
00:36:32,240 --> 00:36:35,299
probably still need the pen test right

946
00:36:33,470 --> 00:36:37,549
so I'm gonna say something a little bit

947
00:36:35,300 --> 00:36:41,030
controversial if you don't want to hear

948
00:36:37,550 --> 00:36:43,370
that feel free to to block your is what

949
00:36:41,030 --> 00:36:45,230
I'm gonna say is that if we're now in a

950
00:36:43,370 --> 00:36:47,779
position where we know that the baseline

951
00:36:45,230 --> 00:36:50,420
of the application is secure actually

952
00:36:47,780 --> 00:36:51,680
maybe a tick box pen test is okay now I

953
00:36:50,420 --> 00:36:53,390
think you should definitely different

954
00:36:51,680 --> 00:36:55,399
name it shouldn't be called a pen test

955
00:36:53,390 --> 00:36:58,790
but have someone manually going in to

956
00:36:55,400 --> 00:37:00,320
just review the application and say you

957
00:36:58,790 --> 00:37:02,240
know all these tools that we're running

958
00:37:00,320 --> 00:37:04,130
you know they are actually working you

959
00:37:02,240 --> 00:37:06,439
know have some menu going and check for

960
00:37:04,130 --> 00:37:09,740
in a cross-site scripting and sequel

961
00:37:06,440 --> 00:37:11,630
injection the things that are easy for

962
00:37:09,740 --> 00:37:13,069
them to look for and now this isn't

963
00:37:11,630 --> 00:37:15,650
really the process of trying to find

964
00:37:13,070 --> 00:37:17,390
like awesome new vulnerabilities but

965
00:37:15,650 --> 00:37:19,220
just kind of verifying that things are

966
00:37:17,390 --> 00:37:20,779
working correctly and I call this you

967
00:37:19,220 --> 00:37:23,660
know more like security verification or

968
00:37:20,780 --> 00:37:27,350
something and you can decide to do this

969
00:37:23,660 --> 00:37:29,029
maybe once every X number of releases or

970
00:37:27,350 --> 00:37:31,730
maybe after a specific change to some

971
00:37:29,030 --> 00:37:33,620
things now I think that this will kind

972
00:37:31,730 --> 00:37:35,120
of try and help with some of the skill

973
00:37:33,620 --> 00:37:37,490
shortages that we're seeing in info set

974
00:37:35,120 --> 00:37:40,609
it will say you know because this will

975
00:37:37,490 --> 00:37:42,160
be kind of what entry-level work some

976
00:37:40,610 --> 00:37:44,799
more people can be doing it

977
00:37:42,160 --> 00:37:46,629
it can be embedded into the into the

978
00:37:44,799 --> 00:37:49,390
organization a bit better than than we

979
00:37:46,630 --> 00:37:50,740
doing pen testing so again depends on

980
00:37:49,390 --> 00:37:52,270
the risk of the application you might

981
00:37:50,740 --> 00:37:53,558
decide that actually you know what you

982
00:37:52,270 --> 00:37:55,089
know all the tools are cool and they're

983
00:37:53,559 --> 00:37:56,890
always running and that's awesome

984
00:37:55,089 --> 00:38:00,160
we've had every you know every three

985
00:37:56,890 --> 00:38:01,328
months some manual person going in and

986
00:38:00,160 --> 00:38:03,038
just reviewing everything and making

987
00:38:01,329 --> 00:38:08,829
sure that that nothing weird is slipping

988
00:38:03,039 --> 00:38:11,079
by which honestly leads to this which is

989
00:38:08,829 --> 00:38:13,839
kind of where I would see myself more as

990
00:38:11,079 --> 00:38:16,420
someone doing kind of a proper pen test

991
00:38:13,839 --> 00:38:18,819
so it might be for those super high risk

992
00:38:16,420 --> 00:38:21,010
applications or high-risk industries we

993
00:38:18,819 --> 00:38:22,930
actually have another pen tester that's

994
00:38:21,010 --> 00:38:24,880
free to test you know in production

995
00:38:22,930 --> 00:38:27,250
against a number of their applications

996
00:38:24,880 --> 00:38:29,470
trying to find that weird that one edge

997
00:38:27,250 --> 00:38:31,750
case that one vulnerability that she has

998
00:38:29,470 --> 00:38:33,609
business impact so no longer am i

999
00:38:31,750 --> 00:38:35,500
reporting all these low risk issues

1000
00:38:33,609 --> 00:38:37,630
because by this point hopefully they

1001
00:38:35,500 --> 00:38:39,549
should all be fixed I get to spend my

1002
00:38:37,630 --> 00:38:42,750
time looking for the one thing that's

1003
00:38:39,549 --> 00:38:42,750
actually going to lose the company money

1004
00:38:44,190 --> 00:38:48,910
with all these things they should feed

1005
00:38:46,390 --> 00:38:50,230
back into the organization you know I

1006
00:38:48,910 --> 00:38:52,390
really hate this thing where we just

1007
00:38:50,230 --> 00:38:54,490
send PDF reports of our a pen test

1008
00:38:52,390 --> 00:38:57,038
instead you know I would like to see all

1009
00:38:54,490 --> 00:38:58,779
this data from all these tools and from

1010
00:38:57,039 --> 00:39:00,579
things like red teaming and you know

1011
00:38:58,779 --> 00:39:02,440
security test cases all going it's some

1012
00:39:00,579 --> 00:39:04,359
central repository and once it's in

1013
00:39:02,440 --> 00:39:06,700
their repository that's what the build

1014
00:39:04,359 --> 00:39:08,920
systems can use to decide whether the

1015
00:39:06,700 --> 00:39:11,169
application you know is okay to go alive

1016
00:39:08,920 --> 00:39:12,970
or not that way we are adding in some of

1017
00:39:11,170 --> 00:39:14,740
that human element and the things that

1018
00:39:12,970 --> 00:39:16,390
humans that we're good are finding the

1019
00:39:14,740 --> 00:39:20,770
tools on we're adding that into the

1020
00:39:16,390 --> 00:39:22,690
process as well this also allows us to

1021
00:39:20,770 --> 00:39:24,430
make it be easier to do regression

1022
00:39:22,690 --> 00:39:27,880
testing because the pen test is a point

1023
00:39:24,430 --> 00:39:30,460
in time right if we move to more some

1024
00:39:27,880 --> 00:39:32,170
like this think the tests are much

1025
00:39:30,460 --> 00:39:34,660
repeatable are much more repeatable and

1026
00:39:32,170 --> 00:39:36,579
they can if the run ability comes back

1027
00:39:34,660 --> 00:39:38,259
in at a later point this kind of

1028
00:39:36,579 --> 00:39:40,049
approach will hopefully pick that up as

1029
00:39:38,260 --> 00:39:42,160
well

1030
00:39:40,049 --> 00:39:43,720
so I've had some people say this to me

1031
00:39:42,160 --> 00:39:45,700
that's not gonna work

1032
00:39:43,720 --> 00:39:47,259
so I've tried to think of some of the

1033
00:39:45,700 --> 00:39:49,598
objections that some pen testers have

1034
00:39:47,260 --> 00:39:51,700
kind of raised and one of them is you

1035
00:39:49,599 --> 00:39:54,550
need to be super elite to find like some

1036
00:39:51,700 --> 00:39:57,069
security bombs and that's just not true

1037
00:39:54,550 --> 00:39:59,560
to exploit them I would say things are

1038
00:39:57,070 --> 00:40:01,000
different but to find them sometimes

1039
00:39:59,560 --> 00:40:03,880
it's just the case of putting a tick box

1040
00:40:01,000 --> 00:40:05,320
in a field and presen enter so to find

1041
00:40:03,880 --> 00:40:06,370
the vulnerabilities it's not the hard

1042
00:40:05,320 --> 00:40:08,260
thing and that's what we need to make it

1043
00:40:06,370 --> 00:40:10,150
easier for other people to do to find

1044
00:40:08,260 --> 00:40:11,530
vulnerabilities again a lot of the tools

1045
00:40:10,150 --> 00:40:14,020
that we've created for ourselves are

1046
00:40:11,530 --> 00:40:15,490
really good at exploiting bombs but we

1047
00:40:14,020 --> 00:40:21,100
just need the tooling and the

1048
00:40:15,490 --> 00:40:22,560
methodologies to just find them test

1049
00:40:21,100 --> 00:40:25,900
automated tests won't find everything

1050
00:40:22,560 --> 00:40:27,820
honestly nor does manual testing you

1051
00:40:25,900 --> 00:40:30,400
know I might be doing a test and maybe

1052
00:40:27,820 --> 00:40:33,250
I'm just quite tired in one day or maybe

1053
00:40:30,400 --> 00:40:35,550
and I've seen this before where a junior

1054
00:40:33,250 --> 00:40:37,810
pen tester is tend to do a pen test

1055
00:40:35,550 --> 00:40:39,760
manual testing doesn't find everything

1056
00:40:37,810 --> 00:40:40,840
either so if you're not gonna find

1057
00:40:39,760 --> 00:40:45,460
everything at least let's try and

1058
00:40:40,840 --> 00:40:47,920
automate as much as we can so you need a

1059
00:40:45,460 --> 00:40:52,090
pen test to be secure fix in front of

1060
00:40:47,920 --> 00:40:54,370
BT's makes you more secure if you know

1061
00:40:52,090 --> 00:40:56,400
if more volunteer fixed-width it's kind

1062
00:40:54,370 --> 00:40:59,680
of automated process than it is with

1063
00:40:56,400 --> 00:41:01,720
with pen testing then maybe that is

1064
00:40:59,680 --> 00:41:03,220
actually the better approach but yeah

1065
00:41:01,720 --> 00:41:07,029
doing a pen test is not the thing that

1066
00:41:03,220 --> 00:41:08,740
makes the companies secure and then blog

1067
00:41:07,030 --> 00:41:10,930
badges for life

1068
00:41:08,740 --> 00:41:12,720
bumper by panties are awesome like they

1069
00:41:10,930 --> 00:41:14,770
are a really really awesome technique

1070
00:41:12,720 --> 00:41:16,629
but they only really work with an

1071
00:41:14,770 --> 00:41:18,700
organization is mature if there's not

1072
00:41:16,630 --> 00:41:20,260
doing some of this other stuff then it

1073
00:41:18,700 --> 00:41:22,359
makes no real makes no sense for them to

1074
00:41:20,260 --> 00:41:25,960
to run a bug bounty there's gonna spend

1075
00:41:22,360 --> 00:41:28,420
way more money doing that and then and

1076
00:41:25,960 --> 00:41:30,070
if they were just taking that money and

1077
00:41:28,420 --> 00:41:32,020
applied this on these other things they

1078
00:41:30,070 --> 00:41:33,790
would be in a much better position so

1079
00:41:32,020 --> 00:41:35,170
I'm not really good at starting talks

1080
00:41:33,790 --> 00:41:38,259
and I'm not really good at ending them

1081
00:41:35,170 --> 00:41:39,730
so I'm just gonna quick summary we want

1082
00:41:38,260 --> 00:41:42,550
to make pen testing great again pen

1083
00:41:39,730 --> 00:41:44,830
testing used to be super fun

1084
00:41:42,550 --> 00:41:47,500
and then just became doing the boring

1085
00:41:44,830 --> 00:41:49,000
web apps again I never want to be in a

1086
00:41:47,500 --> 00:41:51,460
position where I'm finding a reporting

1087
00:41:49,000 --> 00:41:54,790
cross-site scripting companies need our

1088
00:41:51,460 --> 00:41:56,590
help right InfoSec needs to kind of put

1089
00:41:54,790 --> 00:41:58,630
the ego aside and realize that we are

1090
00:41:56,590 --> 00:41:59,980
actually trying to help these

1091
00:41:58,630 --> 00:42:02,260
organizations - we're part of the

1092
00:41:59,980 --> 00:42:04,720
process and let's just automate as much

1093
00:42:02,260 --> 00:42:06,910
as we can so I can find those one or two

1094
00:42:04,720 --> 00:42:08,399
things that are super interesting

1095
00:42:06,910 --> 00:42:13,538
thank you

1096
00:42:08,400 --> 00:42:13,539
[Applause]

1097
00:42:13,890 --> 00:42:36,219
[Music]

