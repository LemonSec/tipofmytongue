1
00:00:00,060 --> 00:00:05,939
we're going to talk about Stephan Pires

2
00:00:02,220 --> 00:00:08,189
and PHP stuff you might have seen some

3
00:00:05,940 --> 00:00:10,980
part of this tool before because we gave

4
00:00:08,189 --> 00:00:13,679
it like a couple of times in France

5
00:00:10,980 --> 00:00:17,340
Luxembourg Germany Germany as well as

6
00:00:13,679 --> 00:00:20,960
Switzerland also era and but we added a

7
00:00:17,340 --> 00:00:23,369
lot more content in it so if you're not

8
00:00:20,960 --> 00:00:29,250
obviously pure French that's why we have

9
00:00:23,369 --> 00:00:31,410
such a funny accent so happy to be

10
00:00:29,250 --> 00:00:34,950
working in a French company called the

11
00:00:31,410 --> 00:00:37,500
NBS system so doing mostly web hosting

12
00:00:34,950 --> 00:00:41,930
and trying to prevent our customers from

13
00:00:37,500 --> 00:00:45,809
getting owned on a daily basis so it

14
00:00:41,930 --> 00:00:47,489
ecommerce Austin in social hosting and

15
00:00:45,809 --> 00:00:50,250
that's the reason why we're presenting

16
00:00:47,489 --> 00:00:57,140
stuff up I use today because most of our

17
00:00:50,250 --> 00:01:01,109
customers are dealing with PHP so

18
00:00:57,140 --> 00:01:06,960
amongst you are some people having to

19
00:01:01,109 --> 00:01:09,210
defend PHP on a daily basis but we went

20
00:01:06,960 --> 00:01:12,089
a bit deeper and we edited PHP internal

21
00:01:09,210 --> 00:01:13,589
code and it's a really interesting piece

22
00:01:12,090 --> 00:01:17,610
of software wherever you'd recommend if

23
00:01:13,590 --> 00:01:21,270
you like to add it some C code but on

24
00:01:17,610 --> 00:01:24,860
the most reduce basis we all sing like

25
00:01:21,270 --> 00:01:28,380
really a lot a lot a lot of website like

26
00:01:24,860 --> 00:01:30,439
several thousand of them and PHP is a

27
00:01:28,380 --> 00:01:33,149
really nice language if you like to do

28
00:01:30,439 --> 00:01:34,770
an authorized remote administration I

29
00:01:33,150 --> 00:01:36,540
guess that's what we would say it and

30
00:01:34,770 --> 00:01:38,009
the question that we're trying to solve

31
00:01:36,540 --> 00:01:40,220
because we're working in the defensive

32
00:01:38,009 --> 00:01:43,020
side is how to prevent people from

33
00:01:40,220 --> 00:01:49,020
administrating the website been ever on

34
00:01:43,020 --> 00:01:51,420
a benevolent basis so we already worked

35
00:01:49,020 --> 00:01:53,610
quite hard to try to add on this because

36
00:01:51,420 --> 00:01:56,219
one of the change that were not allowed

37
00:01:53,610 --> 00:01:58,380
to replace the developer straighten say

38
00:01:56,219 --> 00:02:00,030
more things occurred in any way so we

39
00:01:58,380 --> 00:02:02,460
try to add and just like itself we are

40
00:02:00,030 --> 00:02:05,159
going from the lower levels like the

41
00:02:02,460 --> 00:02:06,750
system user things to just security we

42
00:02:05,159 --> 00:02:09,500
already

43
00:02:06,750 --> 00:02:13,230
open source web application 404 Ingenix

44
00:02:09,500 --> 00:02:16,140
and we have some kind of homegrown ideas

45
00:02:13,230 --> 00:02:18,600
software however as were not allowed to

46
00:02:16,140 --> 00:02:20,489
tell joka sometime we were lacking a bit

47
00:02:18,600 --> 00:02:22,950
of context when we're trying to virtual

48
00:02:20,490 --> 00:02:25,860
patch is venerable he said web

49
00:02:22,950 --> 00:02:29,700
application for all level hence the idea

50
00:02:25,860 --> 00:02:31,680
of going at the enzyme level as once

51
00:02:29,700 --> 00:02:36,359
again were not allowed to touch code

52
00:02:31,680 --> 00:02:38,520
itself that's why we should under itself

53
00:02:36,360 --> 00:02:40,560
there was the source in fact maybe some

54
00:02:38,520 --> 00:02:43,080
of you know about it it's a great PHP

55
00:02:40,560 --> 00:02:45,540
module written by the fancy people in of

56
00:02:43,080 --> 00:02:48,180
Germany from section is especially stiff

57
00:02:45,540 --> 00:02:50,070
and sre will like his work and this talk

58
00:02:48,180 --> 00:02:53,790
is a complete ripoff of chosen feature

59
00:02:50,070 --> 00:02:56,910
actually it's super nice but it doesn't

60
00:02:53,790 --> 00:03:00,090
scale very well and it doesn't fly in

61
00:02:56,910 --> 00:03:02,400
PHP 7 so what could we do and we thought

62
00:03:00,090 --> 00:03:04,500
about it and we had the great idea of

63
00:03:02,400 --> 00:03:08,220
writing your own PHP module because we

64
00:03:04,500 --> 00:03:12,030
had way too much free time so we wrote

65
00:03:08,220 --> 00:03:16,980
it in C because why not and we called it

66
00:03:12,030 --> 00:03:19,830
the stubble pages so the name might

67
00:03:16,980 --> 00:03:22,980
sound not very friendly for people for

68
00:03:19,830 --> 00:03:25,140
people at all however as you will see a

69
00:03:22,980 --> 00:03:27,268
staff help a goose has been chosen

70
00:03:25,140 --> 00:03:30,630
because as you can see it's quite a

71
00:03:27,269 --> 00:03:34,500
magnificent creature and actually it

72
00:03:30,630 --> 00:03:37,650
comes from caesium Street and it's a

73
00:03:34,500 --> 00:03:42,600
very fluffy elephant as is a elephant of

74
00:03:37,650 --> 00:03:48,330
PHP itself my god Mara the magnificence

75
00:03:42,600 --> 00:03:51,060
of the animal itself like PHP so it does

76
00:03:48,330 --> 00:03:52,769
live as a PHP model so it's a good point

77
00:03:51,060 --> 00:03:55,530
is that we wanted something that is not

78
00:03:52,769 --> 00:03:57,630
too descriptive to embed into a hosting

79
00:03:55,530 --> 00:04:00,720
platform so as it lives as a PHP model

80
00:03:57,630 --> 00:04:03,209
we can simply add it doesn't imply too

81
00:04:00,720 --> 00:04:06,840
much changes to the platform it's easily

82
00:04:03,209 --> 00:04:09,170
packaged and added to existing PHP

83
00:04:06,840 --> 00:04:09,170
stacks

84
00:04:11,470 --> 00:04:18,880
so via cha-ching so as we are saying we

85
00:04:15,740 --> 00:04:22,910
are will here inspired by shorting

86
00:04:18,880 --> 00:04:25,790
however and engine of PHP itself however

87
00:04:22,910 --> 00:04:28,750
like for example the veneer hardening of

88
00:04:25,790 --> 00:04:31,070
PHP allows you to enable or disable some

89
00:04:28,750 --> 00:04:33,140
dangerous function but it completely

90
00:04:31,070 --> 00:04:35,690
lacks of granularity so either you will

91
00:04:33,140 --> 00:04:37,340
disallow system for example which allows

92
00:04:35,690 --> 00:04:39,410
you to execute system commands on the

93
00:04:37,340 --> 00:04:41,869
wall PHP attack or you allow it

94
00:04:39,410 --> 00:04:43,880
completely however even legitimate

95
00:04:41,870 --> 00:04:48,470
software might require it for example

96
00:04:43,880 --> 00:04:51,980
for upgrade so either you have software

97
00:04:48,470 --> 00:04:56,710
that can't upgrade itself or you have a

98
00:04:51,980 --> 00:04:56,710
system that is a quite easily back dot

99
00:04:57,580 --> 00:05:02,990
and that's so simple package might help

100
00:05:00,950 --> 00:05:05,180
you actually we provide the granular

101
00:05:02,990 --> 00:05:07,430
object patching directly inside of PHP

102
00:05:05,180 --> 00:05:10,220
so for example you can see on the first

103
00:05:07,430 --> 00:05:12,350
line that you are able to drop the

104
00:05:10,220 --> 00:05:14,270
system function completely whoever on

105
00:05:12,350 --> 00:05:16,160
the second line the second part actually

106
00:05:14,270 --> 00:05:18,080
of the slide you can drop the system

107
00:05:16,160 --> 00:05:20,690
function but only you can allow it

108
00:05:18,080 --> 00:05:23,539
sorry actually only on the up file but

109
00:05:20,690 --> 00:05:25,820
drop its everywhere else and the last

110
00:05:23,540 --> 00:05:29,210
part is you can match on a fine name and

111
00:05:25,820 --> 00:05:31,790
also this checksum so it make the

112
00:05:29,210 --> 00:05:34,520
attacker job a lot more other actually

113
00:05:31,790 --> 00:05:36,800
and we provide a simple PHP script so

114
00:05:34,520 --> 00:05:38,599
you can freeze the user in the cool side

115
00:05:36,800 --> 00:05:41,690
of the dangerous function inside of your

116
00:05:38,600 --> 00:05:44,180
application and even like for example

117
00:05:41,690 --> 00:05:46,040
this feature alone as we have seen

118
00:05:44,180 --> 00:05:49,130
countless and calculator what fresh

119
00:05:46,040 --> 00:05:51,140
website getting owned and bag dot will

120
00:05:49,130 --> 00:05:53,060
rise about a lot for attacker because

121
00:05:51,140 --> 00:05:54,680
the usual scheme is that they are going

122
00:05:53,060 --> 00:05:56,330
somehow to get access to the back

123
00:05:54,680 --> 00:05:58,640
offices or through a bug or weak

124
00:05:56,330 --> 00:06:01,520
password and Zen's are going to backdoor

125
00:05:58,640 --> 00:06:04,190
existing PHP files to add the backdoor

126
00:06:01,520 --> 00:06:06,830
in it however while using like hashing

127
00:06:04,190 --> 00:06:09,260
mechanism it will make the back down and

128
00:06:06,830 --> 00:06:13,310
function at all and he will simply move

129
00:06:09,260 --> 00:06:16,219
away and find another target can do a

130
00:06:13,310 --> 00:06:18,480
lot of stuff with PHP level virtual

131
00:06:16,220 --> 00:06:20,490
machine surprisingly one

132
00:06:18,480 --> 00:06:22,110
the main advantage compared to wife and

133
00:06:20,490 --> 00:06:24,030
all the fancy boxes is that we are

134
00:06:22,110 --> 00:06:25,410
operating directly at the PHP level so

135
00:06:24,030 --> 00:06:26,909
there is no disparity between two

136
00:06:25,410 --> 00:06:28,500
puzzles because most of the time the

137
00:06:26,910 --> 00:06:30,690
puzzles right the waft tried to be

138
00:06:28,500 --> 00:06:32,970
clever and to interpret the data in a

139
00:06:30,690 --> 00:06:35,700
way that even disagree for example with

140
00:06:32,970 --> 00:06:37,590
PHP leading to all kind of bypasses but

141
00:06:35,700 --> 00:06:42,000
since we are the same level there are

142
00:06:37,590 --> 00:06:44,039
much more overlap about the syntax we've

143
00:06:42,000 --> 00:06:46,050
got a lot of filters you can filter on

144
00:06:44,040 --> 00:06:48,240
the IP so for example you can restrict

145
00:06:46,050 --> 00:06:49,830
the usage of the system function to your

146
00:06:48,240 --> 00:06:52,230
local administrator you can filter on

147
00:06:49,830 --> 00:06:54,210
functions called trace you can the

148
00:06:52,230 --> 00:06:56,130
reference methods you can filter on a

149
00:06:54,210 --> 00:06:58,890
lot a lot a lot a lot of stuff and we

150
00:06:56,130 --> 00:07:02,130
spend really much time documenting it

151
00:06:58,890 --> 00:07:04,289
and testing it on values exploits of

152
00:07:02,130 --> 00:07:06,330
vulnerability like every single word

153
00:07:04,290 --> 00:07:09,120
classes of vulnerability the rips people

154
00:07:06,330 --> 00:07:11,400
also did not van calendar with exotic

155
00:07:09,120 --> 00:07:14,550
virulence that we managed to patch

156
00:07:11,400 --> 00:07:16,590
almost all of them I profile exploit and

157
00:07:14,550 --> 00:07:19,680
also run vulnerability that we will talk

158
00:07:16,590 --> 00:07:23,400
about on Friday with the workshop for

159
00:07:19,680 --> 00:07:25,860
example so this one is a first line for

160
00:07:23,400 --> 00:07:27,719
support perfect example of something

161
00:07:25,860 --> 00:07:29,940
that's usually very hard to patch at a

162
00:07:27,720 --> 00:07:32,100
web application for level while we are

163
00:07:29,940 --> 00:07:34,320
going to deny internal phone to be

164
00:07:32,100 --> 00:07:36,180
called from method one of a specific

165
00:07:34,320 --> 00:07:38,610
class so it allows you as well to

166
00:07:36,180 --> 00:07:41,910
viateur add some more logical kind of

167
00:07:38,610 --> 00:07:44,310
words which are usually not kind of

168
00:07:41,910 --> 00:07:46,860
stuff that is easily to deal with a web

169
00:07:44,310 --> 00:07:49,740
application file as well we can like a

170
00:07:46,860 --> 00:07:54,240
restrict call to some specific functions

171
00:07:49,740 --> 00:07:57,870
from a non IP or we can simply drop any

172
00:07:54,240 --> 00:08:01,530
request where non parameter contains but

173
00:07:57,870 --> 00:08:03,990
button or things like this and there's

174
00:08:01,530 --> 00:08:07,770
quite a lot of filters ID that you are

175
00:08:03,990 --> 00:08:10,200
able to literally via to a patch almost

176
00:08:07,770 --> 00:08:14,669
anything or is that goal we are trying

177
00:08:10,200 --> 00:08:16,409
to achieve no we're going to list every

178
00:08:14,670 --> 00:08:19,380
single class inner abilities with

179
00:08:16,410 --> 00:08:22,890
killing with several pages for example

180
00:08:19,380 --> 00:08:24,990
system injection the documentation is

181
00:08:22,890 --> 00:08:26,400
saying that you're not supposed to pass

182
00:08:24,990 --> 00:08:28,259
arbitrary

183
00:08:26,400 --> 00:08:31,020
puts to the system comenzó at least that

184
00:08:28,259 --> 00:08:32,700
you should filter it but fortunately or

185
00:08:31,020 --> 00:08:34,348
unfortunately depending on which are the

186
00:08:32,700 --> 00:08:37,770
buyer standing people are doing silly

187
00:08:34,349 --> 00:08:39,750
stuff popping shells that's why you get

188
00:08:37,770 --> 00:08:42,900
the remote code execution or

189
00:08:39,750 --> 00:08:44,790
squirrelmail dokuwiki MediaWiki also i

190
00:08:42,900 --> 00:08:46,949
think at some point and the way we're

191
00:08:44,790 --> 00:08:48,779
killing it is actually pretty simple we

192
00:08:46,950 --> 00:08:50,820
say that in the function system the

193
00:08:48,779 --> 00:08:52,529
parameter command is not allowed to

194
00:08:50,820 --> 00:08:58,200
match the following projects like door

195
00:08:52,529 --> 00:09:00,839
are by semicolon ampersand and backticks

196
00:08:58,200 --> 00:09:04,230
and newline so it's much harder to

197
00:09:00,839 --> 00:09:05,910
actually do a shell injection it's still

198
00:09:04,230 --> 00:09:10,970
possible of course but it still raises

199
00:09:05,910 --> 00:09:13,469
the bar a bit another example which is

200
00:09:10,970 --> 00:09:17,400
maybe less known but still quite

201
00:09:13,470 --> 00:09:20,640
devastating is extra parameter of the

202
00:09:17,400 --> 00:09:23,220
male comment when not occur is able to

203
00:09:20,640 --> 00:09:25,220
parameters sorry to specify the extra

204
00:09:23,220 --> 00:09:27,810
parameter he will be all super an

205
00:09:25,220 --> 00:09:31,410
argument that will lead to remote code

206
00:09:27,810 --> 00:09:35,189
execution it was prepared by the info

207
00:09:31,410 --> 00:09:39,270
rips people and what who are so the

208
00:09:35,190 --> 00:09:41,370
documentation says that additional flag

209
00:09:39,270 --> 00:09:43,230
needs to be control however people

210
00:09:41,370 --> 00:09:47,430
usually don't really know what it stands

211
00:09:43,230 --> 00:09:49,650
for so they just let user control it so

212
00:09:47,430 --> 00:09:52,800
what we are getting is a value stream at

213
00:09:49,650 --> 00:09:54,870
code execution some of which affect like

214
00:09:52,800 --> 00:09:57,900
your PHP mirror which is basically used

215
00:09:54,870 --> 00:10:00,750
by any PHP software that is used to send

216
00:09:57,900 --> 00:10:03,240
mail including run Cuban Sun and so I've

217
00:10:00,750 --> 00:10:04,860
seen most of the web mails so what we

218
00:10:03,240 --> 00:10:08,550
are doing is that simply were droppings

219
00:10:04,860 --> 00:10:11,480
- in the extra parameter so that the

220
00:10:08,550 --> 00:10:15,209
user cannot specify an extra parameter

221
00:10:11,480 --> 00:10:17,130
leading to remote code execution because

222
00:10:15,209 --> 00:10:19,739
in most of the use case actually never

223
00:10:17,130 --> 00:10:23,040
used except for malval malevolent

224
00:10:19,740 --> 00:10:27,260
usage so with the system where we can

225
00:10:23,040 --> 00:10:30,029
more or less kill the winner with itself

226
00:10:27,260 --> 00:10:32,279
but to our rule that you supposed to

227
00:10:30,029 --> 00:10:34,680
write and the writing world is boring

228
00:10:32,279 --> 00:10:37,170
because you may want to purge the latest

229
00:10:34,680 --> 00:10:38,819
joomla remote code execution of the

230
00:10:37,170 --> 00:10:39,640
wordpress one and you have to wake up at

231
00:10:38,820 --> 00:10:41,170
like 6:00 a.m.

232
00:10:39,640 --> 00:10:43,689
because real times on his fruit compared

233
00:10:41,170 --> 00:10:45,010
to the one day Joomla is and this kind

234
00:10:43,690 --> 00:10:46,720
of stuff so maybe we can kill

235
00:10:45,010 --> 00:10:50,950
vulnerability in a generic manner for

236
00:10:46,720 --> 00:10:53,530
example one of my favorites one is

237
00:10:50,950 --> 00:10:56,290
actually cooki stealing XSS when you got

238
00:10:53,530 --> 00:10:57,699
an XSS the stupid basic payload is to

239
00:10:56,290 --> 00:11:01,959
actually steal the cookie from the user

240
00:10:57,700 --> 00:11:03,610
so you can impersonate him but we stole

241
00:11:01,960 --> 00:11:07,420
this idea from Susan

242
00:11:03,610 --> 00:11:09,460
the idea is to encode cookie with the

243
00:11:07,420 --> 00:11:12,550
secret key tied to the user agent in the

244
00:11:09,460 --> 00:11:14,380
IP or something else but client specific

245
00:11:12,550 --> 00:11:16,120
matter your cryptographic material so

246
00:11:14,380 --> 00:11:17,800
even if another car managed to steal

247
00:11:16,120 --> 00:11:20,350
your cookie you cannot use it because it

248
00:11:17,800 --> 00:11:23,859
doesn't it's not able to provide this

249
00:11:20,350 --> 00:11:27,820
user tied material she was seen use to

250
00:11:23,860 --> 00:11:29,620
use to use the IP address but 20:18

251
00:11:27,820 --> 00:11:31,360
people are doing roaming a lot like for

252
00:11:29,620 --> 00:11:33,190
example you using your mobile phone to

253
00:11:31,360 --> 00:11:34,750
go in facebook and then you connect to

254
00:11:33,190 --> 00:11:36,520
the Wi-Fi and then you go outside there

255
00:11:34,750 --> 00:11:38,530
is no more Wi-Fi so you change the

256
00:11:36,520 --> 00:11:40,090
network to IP address change wiki's and

257
00:11:38,530 --> 00:11:44,410
validated then you need to reload in

258
00:11:40,090 --> 00:11:45,880
that's why someone from actually the

259
00:11:44,410 --> 00:11:47,860
sponsor from the conference the safe

260
00:11:45,880 --> 00:11:50,140
space that me people had the bright idea

261
00:11:47,860 --> 00:11:51,880
of using the chalice extended master key

262
00:11:50,140 --> 00:11:53,620
so when you connect to Facebook to

263
00:11:51,880 --> 00:11:55,930
negotiate with the chalice session to

264
00:11:53,620 --> 00:11:57,970
get an excellent master key and even if

265
00:11:55,930 --> 00:12:00,189
you change NP you do not negotiate the

266
00:11:57,970 --> 00:12:02,110
TLS connection so even with roaming you

267
00:12:00,190 --> 00:12:03,940
don't need to reload again that's nice

268
00:12:02,110 --> 00:12:07,750
because Nautica is not able to steal it

269
00:12:03,940 --> 00:12:10,200
so it's pretty nice idea I think and

270
00:12:07,750 --> 00:12:13,960
still about cookie if you are coming

271
00:12:10,200 --> 00:12:16,000
yeah HTTP the cookie is Mac secure so

272
00:12:13,960 --> 00:12:20,110
you not authorized to send it through

273
00:12:16,000 --> 00:12:22,420
HTTP also if the cookie are encrypted

274
00:12:20,110 --> 00:12:24,160
your encryption mechanism it come with

275
00:12:22,420 --> 00:12:25,990
HTTP on this we not allowed to access

276
00:12:24,160 --> 00:12:29,860
them JavaScript because they are

277
00:12:25,990 --> 00:12:33,130
unusable anyway and also I really like

278
00:12:29,860 --> 00:12:35,920
this the same site thing to kill a CSRF

279
00:12:33,130 --> 00:12:39,040
so you can say on every single cookie

280
00:12:35,920 --> 00:12:40,599
put the same site flag or on tooth

281
00:12:39,040 --> 00:12:42,550
cookie matching these projects put the

282
00:12:40,600 --> 00:12:44,380
same site stuff and I think that by

283
00:12:42,550 --> 00:12:46,599
default it's activated on session

284
00:12:44,380 --> 00:12:48,230
cookies so it really raised the bar for

285
00:12:46,600 --> 00:12:53,000
a cross side

286
00:12:48,230 --> 00:12:54,320
request forgery so then failure caused

287
00:12:53,000 --> 00:12:56,360
it I think it's one of the

288
00:12:54,320 --> 00:12:58,670
vulnerabilities that is a most commonly

289
00:12:56,360 --> 00:13:02,420
phone so the documentation is actually

290
00:12:58,670 --> 00:13:04,280
one in you okay if you later

291
00:13:02,420 --> 00:13:06,260
if you don't validate the files I can

292
00:13:04,280 --> 00:13:08,630
access sensitive information can need to

293
00:13:06,260 --> 00:13:11,300
cut the execution etc etcetera

294
00:13:08,630 --> 00:13:15,110
however people are not reading the

295
00:13:11,300 --> 00:13:17,660
documentation and they are letting user

296
00:13:15,110 --> 00:13:20,090
approach univita so I think at least for

297
00:13:17,660 --> 00:13:23,060
PHP software it's one of the most common

298
00:13:20,090 --> 00:13:26,570
vulnerability so started quite aliens

299
00:13:23,060 --> 00:13:28,099
are way too much enemy of this kind that

300
00:13:26,570 --> 00:13:30,170
even when you are looking for civvies

301
00:13:28,100 --> 00:13:34,070
addressed early ok there's a lot of

302
00:13:30,170 --> 00:13:37,699
those so what we are doing to kill it is

303
00:13:34,070 --> 00:13:39,800
that we once again it idea that we

304
00:13:37,700 --> 00:13:42,050
borrowed for us from sourcing that you

305
00:13:39,800 --> 00:13:44,240
can provide the validation script that

306
00:13:42,050 --> 00:13:47,660
will be used to validate the file before

307
00:13:44,240 --> 00:13:50,150
it's made accessible to the PHP enzyme

308
00:13:47,660 --> 00:13:52,370
and what were using that were using some

309
00:13:50,150 --> 00:13:54,980
something called vld so we can no

310
00:13:52,370 --> 00:13:58,310
jiggies assembler and it will allow you

311
00:13:54,980 --> 00:14:01,310
to pre-compiled the opcode of the PHP

312
00:13:58,310 --> 00:14:04,010
file and you will be able to know if the

313
00:14:01,310 --> 00:14:07,250
file is a valid PHP that can be executed

314
00:14:04,010 --> 00:14:10,520
at all you don't have to attend to do

315
00:14:07,250 --> 00:14:13,040
some nasty and an efficient tricks such

316
00:14:10,520 --> 00:14:15,620
as relying on the mime type etc and you

317
00:14:13,040 --> 00:14:17,360
will really let the PHP and shine decide

318
00:14:15,620 --> 00:14:19,550
by itself whether it will execute it by

319
00:14:17,360 --> 00:14:21,290
generating the opcode and if it contains

320
00:14:19,550 --> 00:14:28,400
pH because you are going to simply drop

321
00:14:21,290 --> 00:14:30,170
it I really like this one unsterilized

322
00:14:28,400 --> 00:14:32,300
I think there is a going to be a

323
00:14:30,170 --> 00:14:35,209
workshop about internalization between

324
00:14:32,300 --> 00:14:37,760
Java at some point this one is obviously

325
00:14:35,210 --> 00:14:41,330
about pH cream the document is saying

326
00:14:37,760 --> 00:14:43,610
that you should you're not supposed to

327
00:14:41,330 --> 00:14:46,130
pass interest and input to a sterilized

328
00:14:43,610 --> 00:14:47,840
in SRS routine but people think that

329
00:14:46,130 --> 00:14:50,480
silencing is so handy to pass that

330
00:14:47,840 --> 00:14:53,300
around that they are doing it anyway and

331
00:14:50,480 --> 00:14:56,150
I'm going to rent about PHP

332
00:14:53,300 --> 00:14:57,870
really hard because I was browsing the

333
00:14:56,150 --> 00:15:00,240
back tracker of PHP

334
00:14:57,870 --> 00:15:02,640
development is gem it's a PHP developer

335
00:15:00,240 --> 00:15:04,620
saying yeah you found a memory

336
00:15:02,640 --> 00:15:06,630
corruption in an entirely session

337
00:15:04,620 --> 00:15:08,250
routine but since the documentation say

338
00:15:06,630 --> 00:15:11,700
that you're not supposed to do that it's

339
00:15:08,250 --> 00:15:13,589
not a security issue and we disagree I

340
00:15:11,700 --> 00:15:15,480
thought that that's not how you supposed

341
00:15:13,589 --> 00:15:17,220
to deal with security vulnerability you

342
00:15:15,480 --> 00:15:18,870
you're not supposed to fix it by

343
00:15:17,220 --> 00:15:20,250
documenting that's it really odd that

344
00:15:18,870 --> 00:15:21,630
you're not supposed to do it

345
00:15:20,250 --> 00:15:24,480
you're supposed to fix the memory

346
00:15:21,630 --> 00:15:25,880
corruption for fuck's sake so we're

347
00:15:24,480 --> 00:15:29,100
getting a lot of remote code execution

348
00:15:25,880 --> 00:15:33,900
basically every single big software I

349
00:15:29,100 --> 00:15:36,029
guess like forums or CMS we even found

350
00:15:33,900 --> 00:15:40,620
the remote boot in observe them the

351
00:15:36,029 --> 00:15:42,210
answer lies because the reasons and the

352
00:15:40,620 --> 00:15:44,220
way to kill it it's actually hinted in

353
00:15:42,210 --> 00:15:48,120
the documentation of PHP itself but it's

354
00:15:44,220 --> 00:15:50,910
not done in PHP in the PHP core that's

355
00:15:48,120 --> 00:15:53,550
really upsetting me we simply put a

356
00:15:50,910 --> 00:15:55,560
leash back I've got a secret key on the

357
00:15:53,550 --> 00:15:58,920
server and when we generate the

358
00:15:55,560 --> 00:15:59,459
sterilise payload we guarantee its

359
00:15:58,920 --> 00:16:03,510
integrity

360
00:15:59,460 --> 00:16:05,459
GIH Mac that's it's that easy and it

361
00:16:03,510 --> 00:16:07,620
works and it doesn't lower not a cure to

362
00:16:05,459 --> 00:16:15,479
actually forge and inside less payload

363
00:16:07,620 --> 00:16:17,070
to get a shell so R and so again the

364
00:16:15,480 --> 00:16:18,779
documentation is a pretty

365
00:16:17,070 --> 00:16:22,110
straightforward things that you should

366
00:16:18,779 --> 00:16:25,500
not use it for generating a strong

367
00:16:22,110 --> 00:16:27,510
cryptographic metals but people are not

368
00:16:25,500 --> 00:16:29,880
really reading the documentation and are

369
00:16:27,510 --> 00:16:32,490
using rain which is an unsafe version

370
00:16:29,880 --> 00:16:35,939
for doing things that are quite

371
00:16:32,490 --> 00:16:40,589
sensitive so I think it may be one of

372
00:16:35,940 --> 00:16:42,600
the more one of the very common kind

373
00:16:40,589 --> 00:16:45,870
familiar vulnerabilities that is leading

374
00:16:42,600 --> 00:16:48,870
to very if an evil habit is from auto

375
00:16:45,870 --> 00:16:51,870
capture bypass authentication bypass

376
00:16:48,870 --> 00:16:53,700
session issues etc and what we are doing

377
00:16:51,870 --> 00:16:56,790
is that simply were helping the

378
00:16:53,700 --> 00:17:00,180
developer with the documentation by

379
00:16:56,790 --> 00:17:01,860
replacing the call to rent to empty rent

380
00:17:00,180 --> 00:17:07,040
so that by default are going to use a

381
00:17:01,860 --> 00:17:07,040
sexual random function

382
00:17:07,089 --> 00:17:14,690
there is also the xxe basically able to

383
00:17:11,959 --> 00:17:17,390
read file with you for some relief and

384
00:17:14,690 --> 00:17:18,950
six million documents and PHP

385
00:17:17,390 --> 00:17:23,360
documentation doesn't mention this at

386
00:17:18,950 --> 00:17:26,030
all I don't know why and funny anecdote

387
00:17:23,359 --> 00:17:30,530
PHP comes with three or four XML parser

388
00:17:26,030 --> 00:17:33,710
I think because reasons also and people

389
00:17:30,530 --> 00:17:36,889
are passing interested XML documents to

390
00:17:33,710 --> 00:17:42,740
the bass cells and that's how you get

391
00:17:36,890 --> 00:17:45,350
x16 and it led of course to a lot of CV

392
00:17:42,740 --> 00:17:48,830
and the trick to call it is pretty

393
00:17:45,350 --> 00:17:51,560
simple we are for there is a single call

394
00:17:48,830 --> 00:17:54,199
to disable it succeed support for every

395
00:17:51,560 --> 00:17:55,490
single XML parser in PHP so we're

396
00:17:54,200 --> 00:17:59,540
calling it at the beginning of the

397
00:17:55,490 --> 00:18:01,900
request and then we are just hoping the

398
00:17:59,540 --> 00:18:04,610
call to the function itself so the

399
00:18:01,900 --> 00:18:10,910
developer cannot actually be able

400
00:18:04,610 --> 00:18:15,080
dysfunction that's that simple string

401
00:18:10,910 --> 00:18:16,760
wrappers so PHP support values can

402
00:18:15,080 --> 00:18:18,230
actually quite a lot of streams

403
00:18:16,760 --> 00:18:21,110
including Oggy

404
00:18:18,230 --> 00:18:23,390
for example because it might be a useful

405
00:18:21,110 --> 00:18:27,409
but there's a lot of rappers and it can

406
00:18:23,390 --> 00:18:29,120
be used in the exploitation when there

407
00:18:27,410 --> 00:18:32,120
is like a file manipulation operations

408
00:18:29,120 --> 00:18:35,449
because it will allow you to get code

409
00:18:32,120 --> 00:18:38,209
execution or simply or get easier access

410
00:18:35,450 --> 00:18:42,080
to bypass any kind of validation or

411
00:18:38,210 --> 00:18:44,720
verification so for example with a file

412
00:18:42,080 --> 00:18:46,669
you can easily get file access you get

413
00:18:44,720 --> 00:18:48,950
the bombs you can whitelist bypass

414
00:18:46,670 --> 00:18:52,730
quizzes if there's a lot of possible

415
00:18:48,950 --> 00:18:54,410
usage and once again it's a typical

416
00:18:52,730 --> 00:18:57,040
example one of the features that exist

417
00:18:54,410 --> 00:18:59,570
in PHP is that is mostly used by

418
00:18:57,040 --> 00:19:02,480
malevolent people and rarely for

419
00:18:59,570 --> 00:19:04,460
legitimate usage so what we are simply

420
00:19:02,480 --> 00:19:07,010
providing is a feature that will allow

421
00:19:04,460 --> 00:19:09,830
you to whitelist or blacklist specific

422
00:19:07,010 --> 00:19:12,110
stream ripe wrappers in order to only

423
00:19:09,830 --> 00:19:14,559
allow the ones that are useful in your

424
00:19:12,110 --> 00:19:17,559
application and avoiding

425
00:19:14,559 --> 00:19:20,350
stupid bypass we borrowed this feature

426
00:19:17,559 --> 00:19:22,509
from actually someone on the bug tracker

427
00:19:20,350 --> 00:19:25,149
asked us what about whitelisting the

428
00:19:22,509 --> 00:19:26,860
three mothers and I brought to a PHP

429
00:19:25,149 --> 00:19:29,979
source codes documentation and they

430
00:19:26,860 --> 00:19:32,080
stumble upon an issue in PHP bug tracker

431
00:19:29,980 --> 00:19:38,110
with someone asking for this feature

432
00:19:32,080 --> 00:19:40,389
like years ago and no one cared maybe we

433
00:19:38,110 --> 00:19:42,748
should read a more PHP bug tracker to

434
00:19:40,389 --> 00:19:45,908
find out some good ideas and features

435
00:19:42,749 --> 00:19:50,110
this one is also great smells a bit like

436
00:19:45,909 --> 00:19:52,119
JavaScript PHP has a lot of ways to do

437
00:19:50,110 --> 00:19:55,629
comparison this is an excerpt of the

438
00:19:52,119 --> 00:19:59,559
documentation and this is another one's

439
00:19:55,629 --> 00:20:01,809
an entirely different table and I really

440
00:19:59,559 --> 00:20:04,830
like for example when you're comparing

441
00:20:01,809 --> 00:20:06,879
true and Minnis one it's actually true

442
00:20:04,830 --> 00:20:10,210
because why not

443
00:20:06,879 --> 00:20:13,809
or when you compare zero the number to

444
00:20:10,210 --> 00:20:16,690
zero the string it's also true and I

445
00:20:13,809 --> 00:20:18,519
would bet that if we made a quiz with

446
00:20:16,690 --> 00:20:20,320
this array a lot of PHP developer will

447
00:20:18,519 --> 00:20:20,909
get it wrong because it doesn't make any

448
00:20:20,320 --> 00:20:24,879
sense

449
00:20:20,909 --> 00:20:27,700
also the comparison operator in PHP are

450
00:20:24,879 --> 00:20:30,100
not in the total order so you can get a

451
00:20:27,700 --> 00:20:33,759
DS greater than B greater than C greater

452
00:20:30,100 --> 00:20:36,908
than ABC and so and so and so on because

453
00:20:33,759 --> 00:20:38,529
PHP madness and people are trying to use

454
00:20:36,909 --> 00:20:42,220
PHP like it's a normal and decent

455
00:20:38,529 --> 00:20:44,350
language and they get bitten for example

456
00:20:42,220 --> 00:20:46,779
if you compare the password comparison

457
00:20:44,350 --> 00:20:49,570
with two equals or the function research

458
00:20:46,779 --> 00:20:51,369
that you can use to search for a value

459
00:20:49,570 --> 00:20:53,408
in an array but there is a third

460
00:20:51,369 --> 00:20:55,570
optional parameter that is tricked and

461
00:20:53,409 --> 00:20:58,899
if you not enable it there is smart

462
00:20:55,570 --> 00:21:02,200
comparison happening in the research

463
00:20:58,899 --> 00:21:04,869
function there is also the infamous

464
00:21:02,200 --> 00:21:07,389
sha-1 collision obviously choose two

465
00:21:04,869 --> 00:21:10,330
strings or not have same sha-1 but in

466
00:21:07,389 --> 00:21:12,029
the PHP world yes they do and the latest

467
00:21:10,330 --> 00:21:14,460
one is

468
00:21:12,029 --> 00:21:18,840
because the second value is starting

469
00:21:14,460 --> 00:21:21,239
with 1e meaning that it's one like a

470
00:21:18,840 --> 00:21:25,320
scientific notation and the same for the

471
00:21:21,239 --> 00:21:29,429
value on the left so just normal PHP

472
00:21:25,320 --> 00:21:31,468
stuff and if you grab for the double

473
00:21:29,429 --> 00:21:34,229
equal sign a lot of PHP code base you

474
00:21:31,469 --> 00:21:37,200
will stumble upon a lot a lot lot of

475
00:21:34,229 --> 00:21:39,509
durability and it lead to the no

476
00:21:37,200 --> 00:21:42,509
Passport comparison B being skewed or

477
00:21:39,509 --> 00:21:44,309
CSRF token being what possible even the

478
00:21:42,509 --> 00:21:46,529
e-commerce website using it to compare

479
00:21:44,309 --> 00:21:47,158
currencies so that that's not a great

480
00:21:46,529 --> 00:21:52,710
idea

481
00:21:47,159 --> 00:21:56,789
and we are killing it by using the re

482
00:21:52,710 --> 00:22:00,210
like yet the strict mode of PHP in the

483
00:21:56,789 --> 00:22:03,749
newer version of PHP PHP s7 and 7.1

484
00:22:00,210 --> 00:22:08,249
maybe they introduced the strict mode

485
00:22:03,749 --> 00:22:11,869
and all the cofunction are not 18j types

486
00:22:08,249 --> 00:22:14,639
like for example if you've got a

487
00:22:11,869 --> 00:22:16,738
research the second parameter must be an

488
00:22:14,639 --> 00:22:18,570
array and it's optional but if you

489
00:22:16,739 --> 00:22:20,279
enable this mode PHP might throw an

490
00:22:18,570 --> 00:22:22,439
error saying hey you're not giving me

491
00:22:20,279 --> 00:22:24,059
the right type something is wrong but

492
00:22:22,440 --> 00:22:27,719
there is no way to active is globally in

493
00:22:24,059 --> 00:22:30,299
PHP so we hacked it so you can just set

494
00:22:27,719 --> 00:22:32,669
please develop abuse enable the strict

495
00:22:30,299 --> 00:22:36,710
mode globally and you don't have type

496
00:22:32,669 --> 00:22:39,749
confusion in core functions anymore and

497
00:22:36,710 --> 00:22:42,210
also we are replacing the opcode the

498
00:22:39,749 --> 00:22:45,089
equal of code for the identical one so

499
00:22:42,210 --> 00:22:47,729
if you type double equal in PHP you get

500
00:22:45,089 --> 00:22:53,658
a triple one so no more fancy smart

501
00:22:47,729 --> 00:22:58,169
comparisons so this one is a series of

502
00:22:53,659 --> 00:23:01,440
example of EHR patches one of the very

503
00:22:58,169 --> 00:23:04,169
common and in Gavea we get from an

504
00:23:01,440 --> 00:23:06,359
unnamed ecommerce framework is a

505
00:23:04,169 --> 00:23:08,669
tendency to require as a developer

506
00:23:06,359 --> 00:23:10,589
suggests the developer to shmatte 777

507
00:23:08,669 --> 00:23:13,379
everything because your life is a lot

508
00:23:10,589 --> 00:23:17,399
easier like this so you can simply drop

509
00:23:13,379 --> 00:23:19,799
the call in order to stop this from

510
00:23:17,399 --> 00:23:24,310
happening so either with a number of

511
00:23:19,799 --> 00:23:27,910
when it's specific with others as well

512
00:23:24,310 --> 00:23:33,460
we can detect make a backdoor detection

513
00:23:27,910 --> 00:23:35,320
easier by detecting ones are making call

514
00:23:33,460 --> 00:23:39,180
to immediate or is callable for

515
00:23:35,320 --> 00:23:42,730
dangerous function such as a system etc

516
00:23:39,180 --> 00:23:45,070
so one with a read only exactly novel is

517
00:23:42,730 --> 00:23:48,670
very useful and interesting because we

518
00:23:45,070 --> 00:23:51,760
can simply tell PHP to on low execution

519
00:23:48,670 --> 00:23:54,070
of code that is read only so when you

520
00:23:51,760 --> 00:23:56,230
have a backdoor that can be uploaded or

521
00:23:54,070 --> 00:23:58,450
files that can be modified by the PHP

522
00:23:56,230 --> 00:24:02,380
and Jane we're going to simply deny it

523
00:23:58,450 --> 00:24:06,190
from being executed we can as well

524
00:24:02,380 --> 00:24:08,260
detect make some detection so we have at

525
00:24:06,190 --> 00:24:10,630
least that is done that will simply

526
00:24:08,260 --> 00:24:13,060
instruct staff helper used to dump the

527
00:24:10,630 --> 00:24:15,670
content of the request on the file

528
00:24:13,060 --> 00:24:16,929
system and we can then get all the

529
00:24:15,670 --> 00:24:20,050
requests that are going to trigger

530
00:24:16,930 --> 00:24:23,620
errors in P in sorry

531
00:24:20,050 --> 00:24:26,530
magical call so which will make easier

532
00:24:23,620 --> 00:24:29,979
detection to harvest all day what we're

533
00:24:26,530 --> 00:24:32,680
going to speak a bit later or as well

534
00:24:29,980 --> 00:24:37,870
like to ensure or force the certificate

535
00:24:32,680 --> 00:24:40,390
verification at the PHP engine for

536
00:24:37,870 --> 00:24:43,479
example for coal in order to force the

537
00:24:40,390 --> 00:24:45,460
certificate verification and block some

538
00:24:43,480 --> 00:24:48,250
and verified certificate certificate

539
00:24:45,460 --> 00:24:50,140
code because surprisingly the

540
00:24:48,250 --> 00:24:52,960
certificate validation is on by default

541
00:24:50,140 --> 00:24:55,930
in PHP that's one of the few good value

542
00:24:52,960 --> 00:24:59,440
by default that you might find speaking

543
00:24:55,930 --> 00:25:03,090
of free stuff we're using it internally

544
00:24:59,440 --> 00:25:05,860
to find some new vulnerabilities because

545
00:25:03,090 --> 00:25:09,370
if you have a system like this system

546
00:25:05,860 --> 00:25:11,169
grep available and then a file instead

547
00:25:09,370 --> 00:25:13,719
of auditing the code you can just throw

548
00:25:11,170 --> 00:25:16,360
some rules that are pretty lacks like

549
00:25:13,720 --> 00:25:17,680
you say there is an hello at the end so

550
00:25:16,360 --> 00:25:19,149
the request will not be dropped but

551
00:25:17,680 --> 00:25:22,900
there is also a dump keyword

552
00:25:19,150 --> 00:25:25,840
meaning that if the if I request if the

553
00:25:22,900 --> 00:25:27,190
execution flow of PHP messages rule the

554
00:25:25,840 --> 00:25:29,409
wall request will be dumped on a file

555
00:25:27,190 --> 00:25:32,560
system and you'll get a notification so

556
00:25:29,410 --> 00:25:34,920
that's pretty handy also as mentioned on

557
00:25:32,560 --> 00:25:37,770
this slide there is the

558
00:25:34,920 --> 00:25:39,150
my sequel query and even if it's

559
00:25:37,770 --> 00:25:41,429
happened to return false

560
00:25:39,150 --> 00:25:44,090
we are going to dumb the request so we

561
00:25:41,429 --> 00:25:46,710
have a lot of passive rules that are

562
00:25:44,090 --> 00:25:52,139
silently getting a vulnerability for us

563
00:25:46,710 --> 00:25:54,840
it's pretty nice so in terms of

564
00:25:52,140 --> 00:25:58,290
performance because it's quite a

565
00:25:54,840 --> 00:26:00,199
recurring question so performance impact

566
00:25:58,290 --> 00:26:04,500
at risk quite lightweight because well

567
00:26:00,200 --> 00:26:07,559
kinda only hooking the function on which

568
00:26:04,500 --> 00:26:10,140
we are playing via child patches and we

569
00:26:07,559 --> 00:26:12,720
have it running on some rather big

570
00:26:10,140 --> 00:26:15,690
website at least one that I set up 1k

571
00:26:12,720 --> 00:26:20,270
website and values ecommerce website

572
00:26:15,690 --> 00:26:23,160
which are some heavy PHP machinery and

573
00:26:20,270 --> 00:26:25,500
things that it's a good point of having

574
00:26:23,160 --> 00:26:28,080
it developed in scene with performances

575
00:26:25,500 --> 00:26:31,710
- that were trying as much as possible

576
00:26:28,080 --> 00:26:33,600
to lower the impact in terms of actual

577
00:26:31,710 --> 00:26:36,270
production I mean an actual website with

578
00:26:33,600 --> 00:26:40,290
databases that are not simply running

579
00:26:36,270 --> 00:26:43,139
PHP code so impact is not noticeable but

580
00:26:40,290 --> 00:26:46,049
even if we are running we are doing or

581
00:26:43,140 --> 00:26:48,090
in turn we make it we make him benchmark

582
00:26:46,049 --> 00:26:51,418
sniffle penguin room lattice suit and

583
00:26:48,090 --> 00:26:53,520
the result were pretty much the same so

584
00:26:51,419 --> 00:26:55,110
we don't have any measurable impact on

585
00:26:53,520 --> 00:26:58,080
Julis test suite I don't know if it's

586
00:26:55,110 --> 00:27:02,760
significant or not I think it's still a

587
00:26:58,080 --> 00:27:05,010
great number actually so it's running at

588
00:27:02,760 --> 00:27:06,870
full speed and this is how I imagine PHP

589
00:27:05,010 --> 00:27:10,140
running actually like screaming and just

590
00:27:06,870 --> 00:27:12,510
going forward obviously it's not

591
00:27:10,140 --> 00:27:14,370
complete we've got a lot of stuff to do

592
00:27:12,510 --> 00:27:16,470
because they are silvaner ability that

593
00:27:14,370 --> 00:27:19,199
we didn't kill yet like a sequel

594
00:27:16,470 --> 00:27:21,179
injection for example and we would like

595
00:27:19,200 --> 00:27:26,460
to implement more and more than the

596
00:27:21,179 --> 00:27:28,350
admin feature and actually the I think

597
00:27:26,460 --> 00:27:30,360
the last three or four feature that we

598
00:27:28,350 --> 00:27:33,570
implemented a snuffleupagus will provide

599
00:27:30,360 --> 00:27:35,879
a suggested by users at our conference

600
00:27:33,570 --> 00:27:38,280
so in the back tracker or from people

601
00:27:35,880 --> 00:27:41,010
coming to us and saying my developers

602
00:27:38,280 --> 00:27:42,960
doing this kind of hope could you

603
00:27:41,010 --> 00:27:44,910
mitigate it or patch it or improve the

604
00:27:42,960 --> 00:27:49,530
security of my website

605
00:27:44,910 --> 00:27:51,540
also we have like 24 filters I think but

606
00:27:49,530 --> 00:27:53,879
there are still some inner ability that

607
00:27:51,540 --> 00:27:55,680
we struggled to patch so we might need

608
00:27:53,880 --> 00:27:57,240
to provide even more coverage or even

609
00:27:55,680 --> 00:28:00,570
more flexibility to be a strong person

610
00:27:57,240 --> 00:28:03,900
the virtual patching process and also a

611
00:28:00,570 --> 00:28:06,840
party time for the version 1.00 that we

612
00:28:03,900 --> 00:28:09,930
might release some point maybe next year

613
00:28:06,840 --> 00:28:13,500
I don't know and Friday morning we are

614
00:28:09,930 --> 00:28:16,440
going to give two hours workshop about

615
00:28:13,500 --> 00:28:19,350
the full package so the idea of the

616
00:28:16,440 --> 00:28:21,870
workshop is that we had the intern

617
00:28:19,350 --> 00:28:25,290
intern with a bit too much spare time so

618
00:28:21,870 --> 00:28:27,780
we make him did values Seamus less

619
00:28:25,290 --> 00:28:30,200
famous EMS solution so don't express her

620
00:28:27,780 --> 00:28:33,120
don't they expect a wordpress or daybut

621
00:28:30,200 --> 00:28:35,400
value CMS solution in order just to find

622
00:28:33,120 --> 00:28:38,070
bugs in real life that are and discover

623
00:28:35,400 --> 00:28:41,700
sofa and to see how easy we can patch

624
00:28:38,070 --> 00:28:45,510
them with the Stanford police so so it

625
00:28:41,700 --> 00:28:47,430
is that we are going to cut out some

626
00:28:45,510 --> 00:28:49,320
vulnerabilities that were found how can

627
00:28:47,430 --> 00:28:51,960
we virtual page em and as well we are

628
00:28:49,320 --> 00:28:54,450
going to use some more classical things

629
00:28:51,960 --> 00:28:56,550
such as the available web application

630
00:28:54,450 --> 00:29:00,480
and here we can address each of the

631
00:28:56,550 --> 00:29:02,280
vulnerabilities so then stafford

632
00:29:00,480 --> 00:29:05,670
ragussis r is something that we built

633
00:29:02,280 --> 00:29:08,160
with option mines so security team and

634
00:29:05,670 --> 00:29:09,810
we're working with option we are trying

635
00:29:08,160 --> 00:29:12,390
to build something that is easily

636
00:29:09,810 --> 00:29:14,550
configurable so we are trying to avoid

637
00:29:12,390 --> 00:29:17,730
some mistakes that might have existed in

638
00:29:14,550 --> 00:29:20,159
Shushan whites like all black or white

639
00:29:17,730 --> 00:29:22,500
to have something with more energy where

640
00:29:20,160 --> 00:29:24,060
you can use one feature not user you

641
00:29:22,500 --> 00:29:26,160
have a learning mode that is present so

642
00:29:24,060 --> 00:29:27,960
that you can run it in a production

643
00:29:26,160 --> 00:29:30,360
website without breaking everything you

644
00:29:27,960 --> 00:29:32,490
can simply harvest data you have some

645
00:29:30,360 --> 00:29:34,229
tools to generate a whitelist as were

646
00:29:32,490 --> 00:29:36,690
explaining earlier so it's something

647
00:29:34,230 --> 00:29:39,950
that is written in with a production

648
00:29:36,690 --> 00:29:42,750
Reggie mindset in order not to break the

649
00:29:39,950 --> 00:29:45,480
production and make sure helps

650
00:29:42,750 --> 00:29:48,050
developers fixing some bug without even

651
00:29:45,480 --> 00:29:48,050
noticing it

652
00:29:48,170 --> 00:29:53,750
of course it's open source so you can

653
00:29:50,330 --> 00:29:55,549
get it on a github and I spend conscious

654
00:29:53,750 --> 00:29:58,940
hour of writing kind of distant

655
00:29:55,549 --> 00:30:00,799
documentation and I throw some admin

656
00:29:58,940 --> 00:30:02,299
system the documentation telling them

657
00:30:00,799 --> 00:30:04,760
please parties reliability and they

658
00:30:02,299 --> 00:30:07,309
managed to do it so apparently it's kind

659
00:30:04,760 --> 00:30:09,200
of usable and also you come you can

660
00:30:07,309 --> 00:30:11,870
control to us we are the guy with

661
00:30:09,200 --> 00:30:14,000
different accents and of course Friday

662
00:30:11,870 --> 00:30:16,669
you in your workshop

663
00:30:14,000 --> 00:30:18,920
speaking of open-source a lot of project

664
00:30:16,670 --> 00:30:20,630
that are presented at conferences are

665
00:30:18,920 --> 00:30:22,130
dying like two weeks after being

666
00:30:20,630 --> 00:30:23,960
presented because no one cares about

667
00:30:22,130 --> 00:30:25,370
them the difference with several

668
00:30:23,960 --> 00:30:27,620
failures is that we're using it

669
00:30:25,370 --> 00:30:33,260
internally because we are webmasters who

670
00:30:27,620 --> 00:30:35,239
is not going to die I hope so also maybe

671
00:30:33,260 --> 00:30:36,980
the company is that in the several bugs

672
00:30:35,240 --> 00:30:39,380
might die at some point but it's it's

673
00:30:36,980 --> 00:30:41,770
not plan so yeah it has been in

674
00:30:39,380 --> 00:30:44,150
development since one year and it's

675
00:30:41,770 --> 00:30:45,139
attracting contributors and IDs and

676
00:30:44,150 --> 00:30:47,179
people are using it

677
00:30:45,140 --> 00:30:49,820
we have someone that came on the back

678
00:30:47,179 --> 00:30:51,950
tracker it was reporting about and we

679
00:30:49,820 --> 00:30:53,720
fixed it and the guy was super happy and

680
00:30:51,950 --> 00:30:55,760
they say oh I'm going to test it on a

681
00:30:53,720 --> 00:30:58,820
pool of tests of I don't know a small

682
00:30:55,760 --> 00:31:01,160
number 200 customers maybe and were like

683
00:30:58,820 --> 00:31:03,379
wow that's a big number so apparently

684
00:31:01,160 --> 00:31:08,210
that people just slowly trying to use it

685
00:31:03,380 --> 00:31:11,350
in production and even big players we

686
00:31:08,210 --> 00:31:14,390
bitch lots on PHP during this talk I

687
00:31:11,350 --> 00:31:16,939
spent one year digging into PHP sauce

688
00:31:14,390 --> 00:31:19,250
coded it wasn't fun trust me I have a

689
00:31:16,940 --> 00:31:21,740
lot of story that I can tell you around

690
00:31:19,250 --> 00:31:26,000
the beer maybe later about PHP for

691
00:31:21,740 --> 00:31:28,010
example PHP supports emoji but it's it's

692
00:31:26,000 --> 00:31:30,470
not it wasn't the main goal actually a

693
00:31:28,010 --> 00:31:32,740
side-effect of PHP it doesn't support

694
00:31:30,470 --> 00:31:37,580
imaginatively okay that's complicated

695
00:31:32,740 --> 00:31:39,200
anyway John would the guy that's

696
00:31:37,580 --> 00:31:42,500
invented the Swiss press

697
00:31:39,200 --> 00:31:45,590
yeah that's he said that so everybody's

698
00:31:42,500 --> 00:31:48,020
complaining about PHP but PHP is running

699
00:31:45,590 --> 00:31:50,330
a lot of website and it's I think it's

700
00:31:48,020 --> 00:31:52,700
actually great to empower people to be

701
00:31:50,330 --> 00:31:54,230
able to write website imagine - and what

702
00:31:52,700 --> 00:31:57,110
presence in like that

703
00:31:54,230 --> 00:31:58,820
the things PHP thanks to PHP we have the

704
00:31:57,110 --> 00:32:01,820
world wide web as we know it securely

705
00:31:58,820 --> 00:32:03,800
because I think that the OpenBSD people

706
00:32:01,820 --> 00:32:07,189
are writing website in C but I wouldn't

707
00:32:03,800 --> 00:32:09,440
recommend anyone to do it yes I do

708
00:32:07,190 --> 00:32:14,900
so yeah we're bitching about PHP but we

709
00:32:09,440 --> 00:32:19,190
still like it in some ways also we want

710
00:32:14,900 --> 00:32:22,070
to thank a lot of people's so the rich

711
00:32:19,190 --> 00:32:24,920
people for a great camera in calendar as

712
00:32:22,070 --> 00:32:27,620
well and of course chosen for the

713
00:32:24,920 --> 00:32:29,420
inspiration because one of the main

714
00:32:27,620 --> 00:32:31,070
reason we actually started to write

715
00:32:29,420 --> 00:32:33,980
stuff a package that we spent so much

716
00:32:31,070 --> 00:32:36,710
time using short scenes that we started

717
00:32:33,980 --> 00:32:38,690
to identify its limit and we noticed

718
00:32:36,710 --> 00:32:44,300
that they were not free willing to party

719
00:32:38,690 --> 00:32:47,090
to PHP 7 and people or yeah greener pigs

720
00:32:44,300 --> 00:32:49,159
to alpha test everything in production

721
00:32:47,090 --> 00:32:51,709
even when it was giving some crashes

722
00:32:49,160 --> 00:32:53,210
yeah there was some crazy people we we

723
00:32:51,710 --> 00:32:55,070
just announced a full package and say

724
00:32:53,210 --> 00:32:57,500
it's completely I'll fight my crash and

725
00:32:55,070 --> 00:32:59,389
some guy tested in production was like

726
00:32:57,500 --> 00:33:02,000
there my website is rockin hooray you

727
00:32:59,390 --> 00:33:05,900
didn't even crash it's so yeah

728
00:33:02,000 --> 00:33:08,920
friends and guinea pigs and finally as

729
00:33:05,900 --> 00:33:11,330
its defensive open-source project we are

730
00:33:08,920 --> 00:33:13,460
welcoming everybody to give us

731
00:33:11,330 --> 00:33:15,409
constructive feedback either like this

732
00:33:13,460 --> 00:33:18,920
feature doesn't work or this is a bad

733
00:33:15,410 --> 00:33:22,310
idea having a more critic critical look

734
00:33:18,920 --> 00:33:24,560
at the code and features and how to make

735
00:33:22,310 --> 00:33:27,050
it more usable for everybody and of

736
00:33:24,560 --> 00:33:28,970
course a 40 for accepting the

737
00:33:27,050 --> 00:33:30,889
talk even we wish there will be more

738
00:33:28,970 --> 00:33:32,720
people in assembly tonight the

739
00:33:30,890 --> 00:33:36,080
apparently nobody cares about PHP and

740
00:33:32,720 --> 00:33:39,080
we've got a lot of time so speaking

741
00:33:36,080 --> 00:33:41,120
about for calling us names we when we

742
00:33:39,080 --> 00:33:43,760
release the project we wrote some

743
00:33:41,120 --> 00:33:46,580
article and I we published it on reddit

744
00:33:43,760 --> 00:33:49,850
and there is the net sec subreddit that

745
00:33:46,580 --> 00:33:53,270
is run by security oriented people

746
00:33:49,850 --> 00:33:55,189
security minded and we had a lot of good

747
00:33:53,270 --> 00:33:56,990
feedbacks and people giving ideas and

748
00:33:55,190 --> 00:33:57,330
saying wow that's a nice project we like

749
00:33:56,990 --> 00:34:00,180
it

750
00:33:57,330 --> 00:34:03,419
doing a great job and we also put it on

751
00:34:00,180 --> 00:34:05,100
the PHP subreddit and people really call

752
00:34:03,420 --> 00:34:06,540
this naming we're mad at us like you're

753
00:34:05,100 --> 00:34:08,699
going to break website you don't know

754
00:34:06,540 --> 00:34:10,199
what you're doing just get better

755
00:34:08,699 --> 00:34:15,330
developers blah blah blah

756
00:34:10,199 --> 00:34:17,069
so yeah just PHP stuff and if you have

757
00:34:15,330 --> 00:34:19,110
question will be super happy to answer

758
00:34:17,070 --> 00:34:22,590
them and if you'd like to know more will

759
00:34:19,110 --> 00:34:24,750
be even more up here to see you in the

760
00:34:22,590 --> 00:34:29,460
workshop on Friday morning thank you

761
00:34:24,750 --> 00:34:32,670
very much for attending oceans the

762
00:34:29,460 --> 00:34:32,670
[Applause]

763
00:34:33,130 --> 00:34:54,329
[Music]

