1
00:00:00,030 --> 00:00:05,270
okay all right so I work for a company

2
00:00:03,270 --> 00:00:08,450
called digital silence we're a Denver

3
00:00:05,270 --> 00:00:11,610
Colorado based security consulting firm

4
00:00:08,450 --> 00:00:12,989
I'm basically a senior security

5
00:00:11,610 --> 00:00:14,610
assessment manager and co-founder there

6
00:00:12,990 --> 00:00:16,440
used to work for a company called Gotham

7
00:00:14,610 --> 00:00:18,119
digital science they have an office in

8
00:00:16,440 --> 00:00:19,830
London so you might have heard them all

9
00:00:18,119 --> 00:00:21,570
cease work for a defense contractor

10
00:00:19,830 --> 00:00:24,119
called og systems probably haven't heard

11
00:00:21,570 --> 00:00:24,960
of them basically little about me about

12
00:00:24,119 --> 00:00:30,179
me I'm a red teamer

13
00:00:24,960 --> 00:00:31,380
researcher knew dad was pretty cool I'm

14
00:00:30,179 --> 00:00:34,170
a pretty interesting LinkedIn handle

15
00:00:31,380 --> 00:00:36,360
it's Emma zero eight zero six seven but

16
00:00:34,170 --> 00:00:39,000
yeah enough of that so this is a talk

17
00:00:36,360 --> 00:00:41,070
about well it's mainly about attacking a

18
00:00:39,000 --> 00:00:42,870
turtlenecks 2010 but before we go into

19
00:00:41,070 --> 00:00:44,100
that we should probably go over just

20
00:00:42,870 --> 00:00:46,800
kind of like how it would see that when

21
00:00:44,100 --> 00:00:48,899
X itself works so what is 82 dot 1 X

22
00:00:46,800 --> 00:00:51,180
it's an authentication protocol welcome

23
00:00:48,899 --> 00:00:53,309
everyone and it's used to protect local

24
00:00:51,180 --> 00:00:54,600
area networks and also Wireless local

25
00:00:53,309 --> 00:00:56,669
area networks with rudimentary

26
00:00:54,600 --> 00:00:58,620
authentication at the finest exchange

27
00:00:56,670 --> 00:00:59,699
between three parties the supplicant

28
00:00:58,620 --> 00:01:00,809
which is the client device that you're

29
00:00:59,699 --> 00:01:02,160
connecting to the network the

30
00:01:00,809 --> 00:01:03,809
Authenticator which is a network device

31
00:01:02,160 --> 00:01:05,459
such as a switch that's providing access

32
00:01:03,809 --> 00:01:06,750
to the network and you also have the

33
00:01:05,459 --> 00:01:08,130
authentication server which the host

34
00:01:06,750 --> 00:01:10,080
that's running triple-a software such as

35
00:01:08,130 --> 00:01:11,610
Radiesse that is going to make all ten

36
00:01:10,080 --> 00:01:13,170
occasion decisions you know what can and

37
00:01:11,610 --> 00:01:14,640
cannot be able to access the network

38
00:01:13,170 --> 00:01:16,020
that's usually sitting deeper inside the

39
00:01:14,640 --> 00:01:18,720
network but communicates with the

40
00:01:16,020 --> 00:01:20,070
Authenticator um you can think of the

41
00:01:18,720 --> 00:01:21,570
Authenticator which once again is just

42
00:01:20,070 --> 00:01:23,369
switch as a sort of gatekeeper or

43
00:01:21,570 --> 00:01:24,179
security guard the supplicants gonna

44
00:01:23,369 --> 00:01:27,150
connect to it provide it with

45
00:01:24,180 --> 00:01:28,290
credentials and as well as identity the

46
00:01:27,150 --> 00:01:29,960
Authenticator is going to afford these

47
00:01:28,290 --> 00:01:31,950
credentials to the authentication server

48
00:01:29,960 --> 00:01:33,089
but the finna cater itself actually

49
00:01:31,950 --> 00:01:34,920
doesn't have any decision-making power

50
00:01:33,090 --> 00:01:36,320
that's actually that's a role that's

51
00:01:34,920 --> 00:01:38,790
assigned to the authentication server

52
00:01:36,320 --> 00:01:39,750
once the authentication server receives

53
00:01:38,790 --> 00:01:41,400
these credentials it's gonna validate

54
00:01:39,750 --> 00:01:43,470
them and then make a final decision as

55
00:01:41,400 --> 00:01:44,759
to whether or not this device can access

56
00:01:43,470 --> 00:01:47,908
the network and the Authenticator is I'm

57
00:01:44,759 --> 00:01:49,460
going to carry out that decision it into

58
00:01:47,909 --> 00:01:51,210
an exit typically of four step sequence

59
00:01:49,460 --> 00:01:52,759
so it's gonna start out with

60
00:01:51,210 --> 00:01:55,798
initialization that initiation

61
00:01:52,759 --> 00:01:57,600
negotiation which is basically a pina

62
00:01:55,799 --> 00:01:58,610
goshi ation and finally we want to

63
00:01:57,600 --> 00:02:00,658
authentication

64
00:01:58,610 --> 00:02:02,189
ports have two states so if you have a

65
00:02:00,659 --> 00:02:04,079
port that's protected by 802 that one X

66
00:02:02,189 --> 00:02:05,579
you can either be authorized in which

67
00:02:04,079 --> 00:02:07,439
traffic is unrestricted you can send

68
00:02:05,579 --> 00:02:09,090
anything you want through that port or

69
00:02:07,439 --> 00:02:10,228
unauthorized so it's unauthorized which

70
00:02:09,090 --> 00:02:12,629
default State

71
00:02:10,229 --> 00:02:14,730
traffic is restricted to only a 22.1 X

72
00:02:12,629 --> 00:02:16,530
traffic

73
00:02:14,730 --> 00:02:19,109
so he mentioned the first step of this

74
00:02:16,530 --> 00:02:20,430
process is initialization initialization

75
00:02:19,110 --> 00:02:21,599
basically what's happening is that the

76
00:02:20,430 --> 00:02:23,400
supplicants gonna connect to the switch

77
00:02:21,599 --> 00:02:25,140
port which is gonna start out as

78
00:02:23,400 --> 00:02:26,849
disabled the Authenticator Sutekh gonna

79
00:02:25,140 --> 00:02:28,880
detect this new connection and able to

80
00:02:26,849 --> 00:02:30,988
switch port in the unauthorized state

81
00:02:28,880 --> 00:02:33,060
and they're gonna move on to initiation

82
00:02:30,989 --> 00:02:33,780
and basically what initiation means it

83
00:02:33,060 --> 00:02:35,760
means you're initiating the

84
00:02:33,780 --> 00:02:37,110
authentication process there either the

85
00:02:35,760 --> 00:02:39,268
supplicant or the Authenticator can

86
00:02:37,110 --> 00:02:40,650
start this if the supplicant starting

87
00:02:39,269 --> 00:02:42,450
it's gonna start by sending the equal

88
00:02:40,650 --> 00:02:45,030
start frame the Authenticator is gonna

89
00:02:42,450 --> 00:02:47,630
respond with an EAP request at any frame

90
00:02:45,030 --> 00:02:49,769
which is basically asking the supplicant

91
00:02:47,630 --> 00:02:51,540
who are you so it's gonna basically

92
00:02:49,769 --> 00:02:53,790
asking for its username the supplicants

93
00:02:51,540 --> 00:02:55,079
gonna send a response at any frame we're

94
00:02:53,790 --> 00:02:57,000
just gonna continue an identifier such

95
00:02:55,080 --> 00:02:58,739
as a username and that's can be received

96
00:02:57,000 --> 00:03:00,690
by the Authenticator which is going to

97
00:02:58,739 --> 00:03:02,010
encapsulate it into something that the

98
00:03:00,690 --> 00:03:03,630
radius server or the the authentication

99
00:03:02,010 --> 00:03:06,000
server can understand it's gonna forward

100
00:03:03,630 --> 00:03:07,349
it to the authentication server at that

101
00:03:06,000 --> 00:03:10,700
point we transition to step 3

102
00:03:07,349 --> 00:03:12,660
EAP negotiation so a long story short

103
00:03:10,700 --> 00:03:14,458
able to tow an X is basically an

104
00:03:12,660 --> 00:03:16,349
encapsulation of EAP extensible

105
00:03:14,459 --> 00:03:18,450
authentication protocol for use on on

106
00:03:16,349 --> 00:03:21,450
wired networks and also as we said in

107
00:03:18,450 --> 00:03:23,010
some case on wireless networks so you

108
00:03:21,450 --> 00:03:24,480
know there are many ways of implementing

109
00:03:23,010 --> 00:03:27,510
EAP we're gonna talk a little a little

110
00:03:24,480 --> 00:03:29,190
bit about that later but basically at

111
00:03:27,510 --> 00:03:30,630
this stage what's gonna happen is that

112
00:03:29,190 --> 00:03:31,920
the supplicant the authentication server

113
00:03:30,630 --> 00:03:34,769
we're gonna haggle for a bit until they

114
00:03:31,920 --> 00:03:36,089
decide on a basically both agree upon an

115
00:03:34,769 --> 00:03:38,549
EAP method that they're both comfortable

116
00:03:36,090 --> 00:03:40,470
with once that happens you move on to

117
00:03:38,549 --> 00:03:42,989
step four which is authentication and we

118
00:03:40,470 --> 00:03:44,489
mentioned that ap is kind of like you

119
00:03:42,989 --> 00:03:46,319
can implement it a number of different

120
00:03:44,489 --> 00:03:48,030
ways so the specific details about how

121
00:03:46,319 --> 00:03:49,470
step four is gonna play out or depending

122
00:03:48,030 --> 00:03:52,200
on the EAP method that we chose in the

123
00:03:49,470 --> 00:03:53,880
last step however the important things

124
00:03:52,200 --> 00:03:55,319
to remember here is that this process is

125
00:03:53,880 --> 00:03:57,780
always going to result in either at EAP

126
00:03:55,319 --> 00:04:00,030
success or AP failure message as you may

127
00:03:57,780 --> 00:04:01,950
guess the AP success means that the

128
00:04:00,030 --> 00:04:03,299
authentication attempt succeeded if we

129
00:04:01,950 --> 00:04:06,030
have an EAP failure it means that have

130
00:04:03,299 --> 00:04:07,560
failed so you know it's gonna happen

131
00:04:06,030 --> 00:04:10,500
forget the EAP success messages the

132
00:04:07,560 --> 00:04:14,340
port's gonna be set to unauthorized and

133
00:04:10,500 --> 00:04:16,560
all traffic can flow through freely so

134
00:04:14,340 --> 00:04:17,639
we've been talking a lot about EAP so we

135
00:04:16,560 --> 00:04:19,738
should probably go over what that what

136
00:04:17,639 --> 00:04:21,720
that's all about - if he stands for

137
00:04:19,738 --> 00:04:22,650
extensible authentication protocol it's

138
00:04:21,720 --> 00:04:24,210
really more of an aesthetic ation

139
00:04:22,650 --> 00:04:25,650
framework it's not really a protocol

140
00:04:24,210 --> 00:04:27,090
because it only defines message formats

141
00:04:25,650 --> 00:04:28,620
and individual

142
00:04:27,090 --> 00:04:30,330
aap implementations are known as EAP

143
00:04:28,620 --> 00:04:31,949
methods so you can kind of think of it

144
00:04:30,330 --> 00:04:33,389
as a black box box for performing

145
00:04:31,949 --> 00:04:34,800
authentication you know that if you give

146
00:04:33,389 --> 00:04:36,210
it a specific set of inputs you're gonna

147
00:04:34,800 --> 00:04:37,470
get a 6 into the output switch either

148
00:04:36,210 --> 00:04:39,090
you're gonna get on ten occasion success

149
00:04:37,470 --> 00:04:42,150
or an authentication failure plus some

150
00:04:39,090 --> 00:04:43,830
other stuff but the actual details are

151
00:04:42,150 --> 00:04:46,440
really just kind of you know boiled down

152
00:04:43,830 --> 00:04:48,719
to the specific implementation some

153
00:04:46,440 --> 00:04:50,850
notable implementations or methods yet

154
00:04:48,720 --> 00:04:53,340
PMD five big spoiler alert it's really

155
00:04:50,850 --> 00:04:56,010
bad if you peep

156
00:04:53,340 --> 00:04:57,630
it's another spoiler it's uh it's not

157
00:04:56,010 --> 00:04:59,159
quite as bad but it's still pretty bad I

158
00:04:57,630 --> 00:05:01,550
know it's just so but it looks delicious

159
00:04:59,160 --> 00:05:02,990
so I just have to throw it in here

160
00:05:01,550 --> 00:05:05,550
eap-tls

161
00:05:02,990 --> 00:05:07,530
you know so traditionally you pee TLS is

162
00:05:05,550 --> 00:05:10,080
one of these EP methods that has been

163
00:05:07,530 --> 00:05:11,099
thought to be a lot better than the

164
00:05:10,080 --> 00:05:12,510
other ones we just mentioned actually

165
00:05:11,100 --> 00:05:14,580
that's true it's probably one of the the

166
00:05:12,510 --> 00:05:16,500
more secure ones there wasn't released

167
00:05:14,580 --> 00:05:18,570
some research released at Def Con last

168
00:05:16,500 --> 00:05:20,820
year by a couple guys from sense post

169
00:05:18,570 --> 00:05:23,669
I'm not sorry last month should I say

170
00:05:20,820 --> 00:05:28,020
where they kind of kind of nuked that

171
00:05:23,669 --> 00:05:29,698
assumption to some degree so yeah that's

172
00:05:28,020 --> 00:05:32,700
that that kind of paradigms you know

173
00:05:29,699 --> 00:05:34,950
changing a little bit but anyways that's

174
00:05:32,700 --> 00:05:36,330
the AP I guess the next thing we got to

175
00:05:34,950 --> 00:05:37,139
do before kind of gets the stuff where

176
00:05:36,330 --> 00:05:41,490
the meat of what we're talking about

177
00:05:37,139 --> 00:05:43,039
today is talk about just go over like a

178
00:05:41,490 --> 00:05:44,550
brief history of wired for security and

179
00:05:43,039 --> 00:05:47,669
essentially why we're doing this

180
00:05:44,550 --> 00:05:49,440
research in the first place so the 802

181
00:05:47,669 --> 00:05:51,090
double-neck standard came about in 2001

182
00:05:49,440 --> 00:05:52,740
and the first version that was called a

183
00:05:51,090 --> 00:05:54,570
toe to toe when X 2001 and it was

184
00:05:52,740 --> 00:05:56,520
created to provide authentication for

185
00:05:54,570 --> 00:05:59,370
local area networks fast forward you

186
00:05:56,520 --> 00:06:01,200
know three years to 2004 and we have a

187
00:05:59,370 --> 00:06:02,729
to doubt when X 2004 which added a whole

188
00:06:01,200 --> 00:06:04,650
bunch of new stuff with a primary

189
00:06:02,729 --> 00:06:05,639
intention of extending 82 no one

190
00:06:04,650 --> 00:06:08,789
actually could use it over wireless

191
00:06:05,639 --> 00:06:10,470
environments as well a year after that

192
00:06:08,789 --> 00:06:11,849
in 2005 there's a researcher named Steve

193
00:06:10,470 --> 00:06:14,190
Riley your demonstrator you could

194
00:06:11,849 --> 00:06:15,690
actually bypass key to 1x 2004 by

195
00:06:14,190 --> 00:06:17,370
inserting a hub directly between the sub

196
00:06:15,690 --> 00:06:18,660
lock and the switch so essentially like

197
00:06:17,370 --> 00:06:20,310
you have the switch and the the

198
00:06:18,660 --> 00:06:21,720
workstation drivers connect into it you

199
00:06:20,310 --> 00:06:23,070
put a hub on it you can snip traffic

200
00:06:21,720 --> 00:06:25,349
which is pretty cool because it's a

201
00:06:23,070 --> 00:06:26,460
passive bypass you could also interact

202
00:06:25,349 --> 00:06:28,889
with network and limited agree you can

203
00:06:26,460 --> 00:06:30,599
inject PDP packets although with Riley's

204
00:06:28,889 --> 00:06:32,070
movement age DVD with TCP injection it

205
00:06:30,599 --> 00:06:34,219
causes a race condition things starts

206
00:06:32,070 --> 00:06:37,740
breaks he you couldn't really do that um

207
00:06:34,219 --> 00:06:40,229
that was fixed in 2006 though which you

208
00:06:37,740 --> 00:06:41,220
know basically like six years later and

209
00:06:40,229 --> 00:06:43,349
and

210
00:06:41,220 --> 00:06:46,410
so essentially two things happen in 2006

211
00:06:43,350 --> 00:06:47,850
2006 I'm gonna say 2011 two really

212
00:06:46,410 --> 00:06:48,720
interesting things happen in 2011 you

213
00:06:47,850 --> 00:06:50,220
know the first thing that happened was

214
00:06:48,720 --> 00:06:52,770
AB from Granville security create a tool

215
00:06:50,220 --> 00:06:54,120
called Marvin implemented in Java it the

216
00:06:52,770 --> 00:06:55,830
major breakthrough with Marvin was the

217
00:06:54,120 --> 00:06:58,620
fact that you no longer had to rely on a

218
00:06:55,830 --> 00:07:00,120
hub to bypass a 2.1 X instead you could

219
00:06:58,620 --> 00:07:01,290
place a rogue device directly between a

220
00:07:00,120 --> 00:07:03,630
sub look in the switch you'd have to

221
00:07:01,290 --> 00:07:07,050
network interfaces and you'd plug one

222
00:07:03,630 --> 00:07:08,310
into the the switch and one into the the

223
00:07:07,050 --> 00:07:10,290
workstation you know the supplicant

224
00:07:08,310 --> 00:07:11,880
device and you just bridge traffic use a

225
00:07:10,290 --> 00:07:13,950
Linux bridge to kind of forward traffic

226
00:07:11,880 --> 00:07:15,510
between these two interfaces and that

227
00:07:13,950 --> 00:07:16,590
would allow you to passively you know

228
00:07:15,510 --> 00:07:19,469
just kind of sit there on the network

229
00:07:16,590 --> 00:07:21,570
and inspect traffic and additionally you

230
00:07:19,470 --> 00:07:22,830
couldn't with with absent plantation you

231
00:07:21,570 --> 00:07:25,080
could get full interaction with the

232
00:07:22,830 --> 00:07:27,539
network using packet injection

233
00:07:25,080 --> 00:07:28,979
later that year this look one those

234
00:07:27,540 --> 00:07:30,180
cases where two researchers kind of came

235
00:07:28,980 --> 00:07:31,290
up with like something very similar and

236
00:07:30,180 --> 00:07:33,210
we're working in parallel didn't even

237
00:07:31,290 --> 00:07:35,370
know it all the duct wall at least

238
00:07:33,210 --> 00:07:37,380
something is only two not one X 2004

239
00:07:35,370 --> 00:07:38,790
bypass that also use a transparent

240
00:07:37,380 --> 00:07:40,350
bridge you know to kind of introduce the

241
00:07:38,790 --> 00:07:42,300
the rogue device between the supplicant

242
00:07:40,350 --> 00:07:43,380
switch but the cool thing about duct

243
00:07:42,300 --> 00:07:44,460
walls implementation is it didn't

244
00:07:43,380 --> 00:07:46,380
actually need packet injection because

245
00:07:44,460 --> 00:07:47,789
he just used IP tables to create a

246
00:07:46,380 --> 00:07:50,760
source NAT so that all traffic

247
00:07:47,790 --> 00:07:51,660
originating from the rogue device it

248
00:07:50,760 --> 00:07:53,610
would appear to be coming from the

249
00:07:51,660 --> 00:07:55,320
supplicant so that was a much simpler

250
00:07:53,610 --> 00:07:57,600
implementation it was all done in bash

251
00:07:55,320 --> 00:07:59,820
you know and comparatively it took it

252
00:07:57,600 --> 00:08:01,140
had a lot less that you could there's a

253
00:07:59,820 --> 00:08:02,640
lot less setup so that's kind of like

254
00:08:01,140 --> 00:08:04,740
the when people think of you know how to

255
00:08:02,640 --> 00:08:05,940
bypass you did 2.1 X 2004 this is

256
00:08:04,740 --> 00:08:09,960
usually what they think of we're gonna

257
00:08:05,940 --> 00:08:11,640
go over that a little more later 2017

258
00:08:09,960 --> 00:08:14,520
and hack in Paris so actually very

259
00:08:11,640 --> 00:08:15,930
recently Valera in the grand period a

260
00:08:14,520 --> 00:08:17,880
tool called Fenrir which works similarly

261
00:08:15,930 --> 00:08:19,740
to duct walls tool but implements the

262
00:08:17,880 --> 00:08:21,540
nabbing in python using escapee

263
00:08:19,740 --> 00:08:22,890
because by this point duck host was

264
00:08:21,540 --> 00:08:24,480
pretty old wasn't very you know it

265
00:08:22,890 --> 00:08:26,099
wasn't maintained at the moment and

266
00:08:24,480 --> 00:08:29,220
relied on you know kernel patches that

267
00:08:26,100 --> 00:08:31,590
no longer existed so LeGrande kind of

268
00:08:29,220 --> 00:08:33,780
fixed that you know threw it into a

269
00:08:31,590 --> 00:08:38,189
module design with support for responder

270
00:08:33,780 --> 00:08:39,929
and all kinds of other stuff so I think

271
00:08:38,190 --> 00:08:41,310
whenever you're starting a new resource

272
00:08:39,929 --> 00:08:43,799
project it's you know not only useful to

273
00:08:41,309 --> 00:08:45,390
kind of try to understand the existing

274
00:08:43,799 --> 00:08:46,589
work out there but also to see if you

275
00:08:45,390 --> 00:08:48,569
can implement it yourself and even

276
00:08:46,590 --> 00:08:51,540
improve upon it if there ways that that

277
00:08:48,570 --> 00:08:53,310
you can so that a might let's look at

278
00:08:51,540 --> 00:08:54,389
duck walls you know classic 82 that 1x

279
00:08:53,310 --> 00:08:55,768
bypassed a little more closely

280
00:08:54,389 --> 00:08:57,239
you mentioned use a transparent bridge

281
00:08:55,769 --> 00:08:58,999
to silently introduce the road device

282
00:08:57,239 --> 00:09:01,290
between the supplicant Authenticator and

283
00:08:58,999 --> 00:09:03,569
network interactions achieved using IP

284
00:09:01,290 --> 00:09:05,040
tables you to create a source net so the

285
00:09:03,569 --> 00:09:06,209
traffic originating from the from the

286
00:09:05,040 --> 00:09:08,849
road device appears to be coming from

287
00:09:06,209 --> 00:09:10,199
the sub looking interesting problem that

288
00:09:08,850 --> 00:09:11,939
the duct will had to face is you know

289
00:09:10,199 --> 00:09:13,529
when you think about the situation in

290
00:09:11,939 --> 00:09:16,349
the end if you're trying to bypass a 2 T

291
00:09:13,529 --> 00:09:17,339
dot 1 X in in most cases you're going to

292
00:09:16,350 --> 00:09:18,660
be an environment where you're not

293
00:09:17,339 --> 00:09:19,559
supposed to be there this is the kind of

294
00:09:18,660 --> 00:09:20,759
thing you have to do on a red team

295
00:09:19,559 --> 00:09:22,769
assessment when you've broken into a

296
00:09:20,759 --> 00:09:24,660
building and you actually need to like

297
00:09:22,769 --> 00:09:25,769
plant something so presumably you're not

298
00:09:24,660 --> 00:09:27,719
gonna have a lot of time to stick around

299
00:09:25,769 --> 00:09:29,399
and and fiddle with this stuff you need

300
00:09:27,720 --> 00:09:31,230
something that you can you can plug in

301
00:09:29,399 --> 00:09:33,059
leave behind and then later have a way

302
00:09:31,230 --> 00:09:34,350
of connecting back to this device

303
00:09:33,059 --> 00:09:35,999
getting access to it and doing

304
00:09:34,350 --> 00:09:37,529
everything else you need so it's

305
00:09:35,999 --> 00:09:40,139
important to have a way of accessing

306
00:09:37,529 --> 00:09:43,470
this device from or you know essentially

307
00:09:40,139 --> 00:09:45,629
remotely so Dunkel has an answer to this

308
00:09:43,470 --> 00:09:47,009
and we'll go into like a little why

309
00:09:45,629 --> 00:09:49,319
we're going to why you had to do this a

310
00:09:47,009 --> 00:09:50,999
little bit later but duxelles answer to

311
00:09:49,319 --> 00:09:52,829
this well he did two things the first

312
00:09:50,999 --> 00:09:54,869
thing he did was he uses destination

313
00:09:52,829 --> 00:09:56,429
adding to create a hidden SSH service

314
00:09:54,869 --> 00:09:58,619
that essentially you could you could

315
00:09:56,429 --> 00:09:59,999
access you know from a very specific IP

316
00:09:58,619 --> 00:10:03,480
address with a very specific you know

317
00:09:59,999 --> 00:10:05,279
route set up you know etc if you were on

318
00:10:03,480 --> 00:10:06,480
the internal network but also because

319
00:10:05,279 --> 00:10:09,989
you can't guarantee the ability to

320
00:10:06,480 --> 00:10:11,369
connect to a devices behind like nnat

321
00:10:09,989 --> 00:10:13,470
and fire one all this stuff you also

322
00:10:11,369 --> 00:10:15,569
implemented it so that you could you

323
00:10:13,470 --> 00:10:17,279
could set up so that you have a outgoing

324
00:10:15,569 --> 00:10:18,929
SSH tunnel that would allow you to

325
00:10:17,279 --> 00:10:19,949
essentially it would give you a reverse

326
00:10:18,929 --> 00:10:23,879
shell essentially that you can connect

327
00:10:19,949 --> 00:10:25,258
back to the device and do this over you

328
00:10:23,879 --> 00:10:28,379
know port 22 but you could do it over

329
00:10:25,259 --> 00:10:30,749
anything really the other problem that

330
00:10:28,379 --> 00:10:32,339
Dunkel had to face which is which was

331
00:10:30,749 --> 00:10:34,470
kind of interesting to me is that when

332
00:10:32,339 --> 00:10:35,579
duck walk created his original tool the

333
00:10:34,470 --> 00:10:38,579
Linux kernel at the time would not

334
00:10:35,579 --> 00:10:40,199
forward eople packets over a bridge and

335
00:10:38,579 --> 00:10:41,519
and presumably for security reasons and

336
00:10:40,199 --> 00:10:43,559
you know that's kind of what we're doing

337
00:10:41,519 --> 00:10:45,629
to do this bypass in the first place so

338
00:10:43,559 --> 00:10:48,259
what he did and what pretty much all

339
00:10:45,629 --> 00:10:51,449
existing tools do to solve this problem

340
00:10:48,259 --> 00:10:52,799
is to patch the Linux kernel so that you

341
00:10:51,449 --> 00:10:54,089
know essentially there's you changed

342
00:10:52,799 --> 00:10:56,069
some stuff and suddenly a Linux kernel

343
00:10:54,089 --> 00:10:59,369
kernel will forward packets over the

344
00:10:56,069 --> 00:11:01,110
bridge so you know existing tools either

345
00:10:59,369 --> 00:11:03,449
do it that way or they rely on

346
00:11:01,110 --> 00:11:06,199
high-level libraries such as KP we've

347
00:11:03,449 --> 00:11:07,459
mentioned the Grands tool that does that

348
00:11:06,199 --> 00:11:10,160
there's some

349
00:11:07,459 --> 00:11:11,779
with these with these approaches you

350
00:11:10,160 --> 00:11:14,809
know basically relying on Colonel

351
00:11:11,779 --> 00:11:16,339
patches can become unwieldy you know

352
00:11:14,809 --> 00:11:17,569
actually and the fact that they're no

353
00:11:16,339 --> 00:11:19,790
publicly available Colonel patches

354
00:11:17,569 --> 00:11:20,899
anymore that do this is testament to

355
00:11:19,790 --> 00:11:22,998
that you know you figure what it's like

356
00:11:20,899 --> 00:11:24,889
to try to maintain a patch that modifies

357
00:11:22,999 --> 00:11:26,449
something from what the Colonel's

358
00:11:24,889 --> 00:11:28,360
supposed to be doing you need to keep

359
00:11:26,449 --> 00:11:30,709
updating that patch as the Linux kernel

360
00:11:28,360 --> 00:11:32,329
continues to be updated over time you

361
00:11:30,709 --> 00:11:33,559
know and and and people move on from

362
00:11:32,329 --> 00:11:35,839
these tools so essentially if your tool

363
00:11:33,559 --> 00:11:38,118
like you know if you're lying on a

364
00:11:35,839 --> 00:11:39,769
kernel patch and you know development

365
00:11:38,119 --> 00:11:41,749
the kernel suddenly starts to go this

366
00:11:39,769 --> 00:11:43,189
way and something that existed in one

367
00:11:41,749 --> 00:11:45,439
file now is in two or isn't somewhere

368
00:11:43,189 --> 00:11:46,730
else the patch is gonna break and you

369
00:11:45,439 --> 00:11:47,719
know your your tools and longer gonna

370
00:11:46,730 --> 00:11:49,339
work

371
00:11:47,720 --> 00:11:50,540
and the problem is relying on

372
00:11:49,339 --> 00:11:51,740
higher-level tools that's escapee is

373
00:11:50,540 --> 00:11:53,059
that it can actually make the bridge

374
00:11:51,740 --> 00:11:56,179
kind of slow under heavy loads you won't

375
00:11:53,059 --> 00:11:58,819
notice it at first but you know it will

376
00:11:56,179 --> 00:12:00,170
you know in circumstances where you have

377
00:11:58,819 --> 00:12:01,878
a high volume traffic create a

378
00:12:00,170 --> 00:12:04,309
bottleneck and a bottleneck is a really

379
00:12:01,879 --> 00:12:05,480
good way to get caught because you know

380
00:12:04,309 --> 00:12:06,649
not only do you have the security guys

381
00:12:05,480 --> 00:12:08,119
who knows this plague but now you have

382
00:12:06,649 --> 00:12:09,980
like users complaining that their

383
00:12:08,119 --> 00:12:11,480
network is slow and and then here come

384
00:12:09,980 --> 00:12:12,410
the network admins looking for the

385
00:12:11,480 --> 00:12:13,759
bottleneck and they find a little

386
00:12:12,410 --> 00:12:18,230
sketchy box to plug into the network

387
00:12:13,759 --> 00:12:19,339
that's a problem so fortunately The

388
00:12:18,230 --> 00:12:21,319
Situation's actually dramatically

389
00:12:19,339 --> 00:12:24,799
improved since duck well originally made

390
00:12:21,319 --> 00:12:26,540
this his tool that did this as a 2012

391
00:12:24,799 --> 00:12:29,149
ETL bridging is actually you can

392
00:12:26,540 --> 00:12:30,709
actually enable it in the Linux kernels

393
00:12:29,149 --> 00:12:31,790
not on by default but you can interact

394
00:12:30,709 --> 00:12:33,199
with something called a profile system

395
00:12:31,790 --> 00:12:34,939
which you can kind of think of it as

396
00:12:33,199 --> 00:12:37,248
like a API for the Linux kernel for

397
00:12:34,939 --> 00:12:38,660
changing configs on-the-fly it's

398
00:12:37,249 --> 00:12:41,089
basically two files you modify the bots

399
00:12:38,660 --> 00:12:42,799
that the values and the files to do that

400
00:12:41,089 --> 00:12:44,329
but you can actually enable it using the

401
00:12:42,799 --> 00:12:45,230
cross file system and what this means is

402
00:12:44,329 --> 00:12:46,819
you don't have to rely on patching

403
00:12:45,230 --> 00:12:48,889
anymore so I added that to my

404
00:12:46,819 --> 00:12:50,118
implementation of this and just use the

405
00:12:48,889 --> 00:12:52,970
profs file system so you don't have to

406
00:12:50,119 --> 00:12:54,049
do pass the kernel anymore the other

407
00:12:52,970 --> 00:12:55,699
thing they added was support for side

408
00:12:54,049 --> 00:12:57,679
channel interaction we mentioned when

409
00:12:55,699 --> 00:12:58,758
duck will created his original bypass he

410
00:12:57,679 --> 00:13:00,670
had to figure out how to provide the

411
00:12:58,759 --> 00:13:03,230
attacker with access to the rogue device

412
00:13:00,670 --> 00:13:05,660
from a remote location this was back in

413
00:13:03,230 --> 00:13:07,399
2011 stellar modems were pretty

414
00:13:05,660 --> 00:13:08,600
unsophisticated they were slow they're

415
00:13:07,399 --> 00:13:10,610
really expensive you couldn't just go

416
00:13:08,600 --> 00:13:13,040
down to you know whatever your local

417
00:13:10,610 --> 00:13:15,199
Ektron store and buy like a USB LTE

418
00:13:13,040 --> 00:13:17,089
modem or you know that that wasn't like

419
00:13:15,199 --> 00:13:19,219
really something that was available in

420
00:13:17,089 --> 00:13:20,689
the commodity market so the solution you

421
00:13:19,220 --> 00:13:20,990
know his solution was to create the

422
00:13:20,689 --> 00:13:24,199
hiddenness

423
00:13:20,990 --> 00:13:25,640
save service and rely on SSH there are

424
00:13:24,200 --> 00:13:27,800
drawbacks to this approach though which

425
00:13:25,640 --> 00:13:29,870
you know now that you know a few years

426
00:13:27,800 --> 00:13:31,160
later we can actually mitigate you know

427
00:13:29,870 --> 00:13:32,149
the the first problem is that it relies

428
00:13:31,160 --> 00:13:34,100
on the assumption that egress filtering

429
00:13:32,149 --> 00:13:35,360
is something that can be bypassed which

430
00:13:34,100 --> 00:13:37,430
it's not always going to be something

431
00:13:35,360 --> 00:13:39,080
you can rely on if you'd be outgoing

432
00:13:37,430 --> 00:13:40,399
connection the other the other issue is

433
00:13:39,080 --> 00:13:41,870
that relying on pushing traffic through

434
00:13:40,399 --> 00:13:45,860
the target network is going to create

435
00:13:41,870 --> 00:13:48,649
another opportunity for detection so the

436
00:13:45,860 --> 00:13:50,300
updated implementation of this ID is

437
00:13:48,649 --> 00:13:52,160
essentially Eliza I modified some of the

438
00:13:50,300 --> 00:13:55,040
firewall rules in the original scripts

439
00:13:52,160 --> 00:13:57,529
to give it to work so now you can add a

440
00:13:55,040 --> 00:13:59,240
side channel interface whether a modem

441
00:13:57,529 --> 00:14:01,070
you know some kind of like you know RF

442
00:13:59,240 --> 00:14:03,020
device or whatever it does really matter

443
00:14:01,070 --> 00:14:03,770
but you can you can actually control the

444
00:14:03,020 --> 00:14:05,779
whole thing through a side channel

445
00:14:03,770 --> 00:14:07,250
interface and not have to rely on going

446
00:14:05,779 --> 00:14:10,850
through the target Network and maintain

447
00:14:07,250 --> 00:14:13,880
control over your device so I'm just

448
00:14:10,850 --> 00:14:15,380
gonna demo this really fast and I know

449
00:14:13,880 --> 00:14:17,300
you can't see it on my own but my screen

450
00:14:15,380 --> 00:14:20,180
is really really small for some reason

451
00:14:17,300 --> 00:14:22,729
so if I mess this up please forgive me

452
00:14:20,180 --> 00:14:27,170
okay so what you're gonna see here can

453
00:14:22,730 --> 00:14:29,870
you guys see my mouse okay cool Wow the

454
00:14:27,170 --> 00:14:31,579
mouse is totally different okay so in

455
00:14:29,870 --> 00:14:33,980
the in the bottom right we have the

456
00:14:31,579 --> 00:14:36,500
Authenticator the switch top right we

457
00:14:33,980 --> 00:14:38,390
have the supplicant on the left we have

458
00:14:36,500 --> 00:14:39,890
the attacker if you see this little

459
00:14:38,390 --> 00:14:41,630
Ethernet cable that the yellow one on

460
00:14:39,890 --> 00:14:43,399
the right that is connected to the

461
00:14:41,630 --> 00:14:46,399
supplicant and that little green light

462
00:14:43,399 --> 00:14:49,970
or should be green anyways blue green in

463
00:14:46,399 --> 00:14:51,290
a second you can actually see it that

464
00:14:49,970 --> 00:14:53,360
little green light right there

465
00:14:51,290 --> 00:14:55,219
indicates that the that something is

466
00:14:53,360 --> 00:14:56,899
currently both connected to the to that

467
00:14:55,220 --> 00:14:58,640
port and you'll think it's currently

468
00:14:56,899 --> 00:15:00,110
authenticated what you see here is this

469
00:14:58,640 --> 00:15:01,459
device is paying out to the outer

470
00:15:00,110 --> 00:15:03,230
network it's something outside the

471
00:15:01,459 --> 00:15:04,819
network specifically Google's DNS server

472
00:15:03,230 --> 00:15:06,079
and the reason why we're doing that is

473
00:15:04,820 --> 00:15:07,910
just to show that this thing has

474
00:15:06,079 --> 00:15:08,989
connectivity when we connect the rogue

475
00:15:07,910 --> 00:15:10,130
device you're gonna notice that this

476
00:15:08,990 --> 00:15:13,730
stops because it's gonna lose

477
00:15:10,130 --> 00:15:16,399
connectivity briefly by the way if this

478
00:15:13,730 --> 00:15:18,890
light turns off like you just see that

479
00:15:16,399 --> 00:15:20,120
little green light turns yellow it means

480
00:15:18,890 --> 00:15:21,800
authentication is currently in progress

481
00:15:20,120 --> 00:15:23,209
if it turns off and stays off it means

482
00:15:21,800 --> 00:15:24,859
that either nothing is connected to the

483
00:15:23,209 --> 00:15:27,829
port or thinks that nothing is connect

484
00:15:24,860 --> 00:15:29,240
to the port or authentication is failing

485
00:15:27,829 --> 00:15:32,660
we trip port security has been

486
00:15:29,240 --> 00:15:34,640
completely disabled so all right let me

487
00:15:32,660 --> 00:15:39,230
actually try to run through this

488
00:15:34,640 --> 00:15:41,260
whoa I feel like I'm playing helicopter

489
00:15:39,230 --> 00:15:44,810
you know that little arcade game yeah

490
00:15:41,260 --> 00:15:46,130
okay there we go so we're gonna run this

491
00:15:44,810 --> 00:15:48,949
command and it's gonna create our bridge

492
00:15:46,130 --> 00:15:51,220
and you see that we've lost connectivity

493
00:15:48,950 --> 00:15:53,660
here from the supplicants perspective

494
00:15:51,220 --> 00:15:54,829
but now that we create our bridge you

495
00:15:53,660 --> 00:15:56,680
can actually this turned yellow because

496
00:15:54,829 --> 00:15:59,959
the supplicants real authenticating

497
00:15:56,680 --> 00:16:01,339
through our rogue device and now you

498
00:15:59,959 --> 00:16:04,489
know we've real ten acade in the light

499
00:16:01,339 --> 00:16:05,779
screen again so that's the that gives us

500
00:16:04,490 --> 00:16:08,000
our passive bypass if you want the

501
00:16:05,779 --> 00:16:09,230
active bypass you have to add the source

502
00:16:08,000 --> 00:16:11,959
netting so you just run a second command

503
00:16:09,230 --> 00:16:12,980
all those little flags that have data

504
00:16:11,959 --> 00:16:15,069
and then you can actually sniff that

505
00:16:12,980 --> 00:16:18,200
when you're in the passive bypass mode

506
00:16:15,070 --> 00:16:20,300
we're gonna run the the active bypass by

507
00:16:18,200 --> 00:16:22,670
reading source net and I'm gonna just

508
00:16:20,300 --> 00:16:25,630
kind of fast-forward this little bit to

509
00:16:22,670 --> 00:16:27,620
save time but once instead of doing that

510
00:16:25,630 --> 00:16:30,200
you can actually interact with the

511
00:16:27,620 --> 00:16:32,620
network so just demonstrated that works

512
00:16:30,200 --> 00:16:34,700
it's gonna do a port scan bless you of

513
00:16:32,620 --> 00:16:39,589
hosting the internal network you see it

514
00:16:34,700 --> 00:16:41,360
works so that's that alright so all

515
00:16:39,589 --> 00:16:42,500
these traditional a 2.1 x bypasses you

516
00:16:41,360 --> 00:16:44,269
know the hub based one the injection

517
00:16:42,500 --> 00:16:45,380
based one the bridge based bypasses they

518
00:16:44,269 --> 00:16:46,820
all take advantage of the same

519
00:16:45,380 --> 00:16:49,310
fundamental security issues that affect

520
00:16:46,820 --> 00:16:50,720
it a 2.1 X 2004 and that is the protocol

521
00:16:49,310 --> 00:16:52,219
does not provide encryption and the

522
00:16:50,720 --> 00:16:55,670
protocol does not support authentication

523
00:16:52,220 --> 00:16:58,160
on a packet by packet basis which is

524
00:16:55,670 --> 00:16:59,180
kind of why it's Adamic 2010 was

525
00:16:58,160 --> 00:17:01,850
developed it's the latest revision of

526
00:16:59,180 --> 00:17:03,439
the protocol and it uses Mac sec to

527
00:17:01,850 --> 00:17:05,299
provide layer 2 encryption on a hop by

528
00:17:03,440 --> 00:17:08,569
hop basis and pack up iPad integrity

529
00:17:05,299 --> 00:17:10,359
checks so this is pretty cool because

530
00:17:08,569 --> 00:17:12,109
not only does the hop by hop encryption

531
00:17:10,359 --> 00:17:13,609
help you protect against the bridge

532
00:17:12,109 --> 00:17:14,809
based attacks but it also allows network

533
00:17:13,609 --> 00:17:16,040
administrator's which means to inspect

534
00:17:14,809 --> 00:17:17,569
data in transit because remember the

535
00:17:16,040 --> 00:17:19,069
encryption is going hop-by-hop so if you

536
00:17:17,569 --> 00:17:21,770
you know in between hops you can still

537
00:17:19,069 --> 00:17:23,089
look at traffic the editor directly does

538
00:17:21,770 --> 00:17:25,189
in protocol works in three stages

539
00:17:23,089 --> 00:17:27,049
begin with authentication and master key

540
00:17:25,189 --> 00:17:28,400
distribution and we have the session key

541
00:17:27,049 --> 00:17:32,480
agreement and we move on to the such a

542
00:17:28,400 --> 00:17:35,390
secure stage so the authentication stage

543
00:17:32,480 --> 00:17:36,650
is basically just it in all intense

544
00:17:35,390 --> 00:17:38,419
purposes it's pretty much a tenant when

545
00:17:36,650 --> 00:17:40,250
X as we as we described for previously

546
00:17:38,419 --> 00:17:42,620
you know you start have your initiation

547
00:17:40,250 --> 00:17:43,820
your initialization your negotiation you

548
00:17:42,620 --> 00:17:46,360
pick an AP method that works with

549
00:17:43,820 --> 00:17:47,559
whatever you're doing and then you

550
00:17:46,360 --> 00:17:49,658
perform

551
00:17:47,559 --> 00:17:51,279
indication and if it's successful you

552
00:17:49,659 --> 00:17:53,019
move on to stage two we have the session

553
00:17:51,279 --> 00:17:54,669
create key ribbon which actually isn't

554
00:17:53,019 --> 00:17:59,139
totally relevant to the bypass believe

555
00:17:54,669 --> 00:18:00,399
it or not but we're gonna do later but

556
00:17:59,139 --> 00:18:01,360
yeah simply during the session curry

557
00:18:00,399 --> 00:18:03,729
agreement the important things that

558
00:18:01,360 --> 00:18:04,508
happened here is that the the session

559
00:18:03,730 --> 00:18:05,679
Keys get installed

560
00:18:04,509 --> 00:18:07,419
well first you stop was the supplicant

561
00:18:05,679 --> 00:18:10,240
can actually support max ik in the first

562
00:18:07,419 --> 00:18:12,399
place and then you installed a you know

563
00:18:10,240 --> 00:18:13,870
that relevant session keys on it and

564
00:18:12,399 --> 00:18:15,370
then if all that succeeds you move on to

565
00:18:13,870 --> 00:18:16,658
stage three was the session secure and

566
00:18:15,370 --> 00:18:19,209
at this point everything is protected by

567
00:18:16,659 --> 00:18:22,059
max sec or should i say like the lyric

568
00:18:19,210 --> 00:18:24,879
encryption products spec and this is

569
00:18:22,059 --> 00:18:26,499
ultimately we're trying to end up so i

570
00:18:24,879 --> 00:18:29,529
think whenever you're trying to approach

571
00:18:26,499 --> 00:18:30,940
like a challenge in terms of you know

572
00:18:29,529 --> 00:18:32,440
finding way to attack a new technology

573
00:18:30,940 --> 00:18:35,289
of some kind it's useful to look for

574
00:18:32,440 --> 00:18:37,029
parallels between this you know this new

575
00:18:35,289 --> 00:18:39,190
technology and also things that have

576
00:18:37,029 --> 00:18:41,409
been either exploited or bypassed or or

577
00:18:39,190 --> 00:18:42,909
compromised in the past so with that in

578
00:18:41,409 --> 00:18:46,389
mind this particular clause and in the

579
00:18:42,909 --> 00:18:47,799
in the I Triple E standard for a 2.1 X

580
00:18:46,389 --> 00:18:49,979
2010 actually kind of stuck out of me

581
00:18:47,799 --> 00:18:52,119
it's in Section 6.6 and you know

582
00:18:49,980 --> 00:18:53,710
basically with this what this Clause is

583
00:18:52,119 --> 00:18:54,908
alluding to is it there parallels

584
00:18:53,710 --> 00:18:56,740
between the role that max Tech is

585
00:18:54,909 --> 00:19:00,190
playing and the roles that similar

586
00:18:56,740 --> 00:19:01,749
encryption kind of things are playing

587
00:19:00,190 --> 00:19:03,460
with in 802 dot 11 which is you know

588
00:19:01,749 --> 00:19:05,590
what used to implement wireless

589
00:19:03,460 --> 00:19:06,759
communication and you know what kind of

590
00:19:05,590 --> 00:19:08,168
took out of me is they must probably be

591
00:19:06,759 --> 00:19:12,129
talking about WPA

592
00:19:08,169 --> 00:19:14,529
and indeed there are parallels between

593
00:19:12,129 --> 00:19:16,090
Max ik and WPA although perhaps not the

594
00:19:14,529 --> 00:19:18,070
ones that they were intending to lose

595
00:19:16,090 --> 00:19:20,080
you but you know when you think about

596
00:19:18,070 --> 00:19:22,869
WPA it came out in 2003 that's when II

597
00:19:20,080 --> 00:19:24,460
had WPA 1 they provided it also provided

598
00:19:22,869 --> 00:19:25,840
hop-by-hop layer 2 encryption from the

599
00:19:24,460 --> 00:19:27,129
access points of the station station

600
00:19:25,840 --> 00:19:28,119
base station being your you know

601
00:19:27,129 --> 00:19:29,009
whatever device you connect to the

602
00:19:28,119 --> 00:19:31,090
wireless network

603
00:19:29,009 --> 00:19:33,759
it was also providing authentication

604
00:19:31,090 --> 00:19:35,889
using so WPA provides an authentication

605
00:19:33,759 --> 00:19:39,429
using either EAP or pre-shared key as a

606
00:19:35,889 --> 00:19:41,019
fallback or alternative you know there's

607
00:19:39,429 --> 00:19:42,340
a major like kind of paradigm shift that

608
00:19:41,019 --> 00:19:44,169
happened in the offensive security

609
00:19:42,340 --> 00:19:46,209
community when WPA was released

610
00:19:44,169 --> 00:19:48,850
excluding the being a whole slew of like

611
00:19:46,210 --> 00:19:51,309
tkip based attacks which kind of ended

612
00:19:48,850 --> 00:19:54,158
up getting mitigated by wpa2 at least

613
00:19:51,309 --> 00:19:55,899
for a pretty long time injection based

614
00:19:54,159 --> 00:19:57,369
attacks were no longer possible do the

615
00:19:55,899 --> 00:19:59,379
layer 2 encryption that the strong layer

616
00:19:57,369 --> 00:20:01,270
2 encryption being provided by WPA so

617
00:19:59,379 --> 00:20:02,530
this kind of led to a focus

618
00:20:01,270 --> 00:20:03,850
because you couldn't do the same style

619
00:20:02,530 --> 00:20:06,370
of injections based attacks that worked

620
00:20:03,850 --> 00:20:08,290
against web so you kind of had to do a

621
00:20:06,370 --> 00:20:10,149
focus shift and focus on attacking the

622
00:20:08,290 --> 00:20:11,470
authentication mechanism and in fact if

623
00:20:10,150 --> 00:20:15,070
you look at the traditional ways that

624
00:20:11,470 --> 00:20:16,690
you would breach a WPA Network you know

625
00:20:15,070 --> 00:20:18,820
the first ifs of PSK network you have

626
00:20:16,690 --> 00:20:20,230
the WPA handshake capture and subsequent

627
00:20:18,820 --> 00:20:21,550
dictionary attack and that's attacking

628
00:20:20,230 --> 00:20:23,140
at that occasion mechanism you also have

629
00:20:21,550 --> 00:20:26,680
the row of AP attacks against vici AP

630
00:20:23,140 --> 00:20:28,930
madness so you know fast forward a bit

631
00:20:26,680 --> 00:20:31,180
to 2010 82 82 that one acts 2010's

632
00:20:28,930 --> 00:20:33,130
released its providing hop-by-hop layer

633
00:20:31,180 --> 00:20:34,720
2 encryption using Mac's hack this time

634
00:20:33,130 --> 00:20:36,460
between either device to the switch or

635
00:20:34,720 --> 00:20:37,840
from two switches you know from one

636
00:20:36,460 --> 00:20:39,400
source to another but it also is

637
00:20:37,840 --> 00:20:42,490
providing authentication using EAP or

638
00:20:39,400 --> 00:20:45,760
PSK as a fallback or alternative which

639
00:20:42,490 --> 00:20:48,250
comes here I'm going with this you know

640
00:20:45,760 --> 00:20:49,420
with this bridge and injection based

641
00:20:48,250 --> 00:20:51,550
attacks that used to work against

642
00:20:49,420 --> 00:20:53,500
earlier versions of ADA 2x no longer

643
00:20:51,550 --> 00:20:54,460
work so I guess the first thing that

644
00:20:53,500 --> 00:20:55,840
kind of comes to mind is to try

645
00:20:54,460 --> 00:20:58,570
attacking the authentication mechanism

646
00:20:55,840 --> 00:21:00,340
and you know my this is pure conjecture

647
00:20:58,570 --> 00:21:02,439
but I would assume that some dictionary

648
00:21:00,340 --> 00:21:04,360
it would be at least worth exploring

649
00:21:02,440 --> 00:21:06,430
some kind of dictionary attack against

650
00:21:04,360 --> 00:21:08,530
the PSK variation I haven't really

651
00:21:06,430 --> 00:21:09,850
really fully delved into doing that yet

652
00:21:08,530 --> 00:21:13,210
so I can't really tell you one way or

653
00:21:09,850 --> 00:21:15,010
the other but the other one that that's

654
00:21:13,210 --> 00:21:16,780
kind of obvious is to you know try

655
00:21:15,010 --> 00:21:18,160
attacks against weak EAP implementations

656
00:21:16,780 --> 00:21:20,800
just the main takeaway of what we're

657
00:21:18,160 --> 00:21:21,700
going to talk about to kind of

658
00:21:20,800 --> 00:21:24,159
understand what we mean by attacks

659
00:21:21,700 --> 00:21:26,350
against weak EAP no plantations we're

660
00:21:24,160 --> 00:21:27,760
just gonna go over some attacks that

661
00:21:26,350 --> 00:21:29,830
work within a wireless environment what

662
00:21:27,760 --> 00:21:31,750
EAP is used or weak forms of EAP are

663
00:21:29,830 --> 00:21:33,850
used you see this diagram here this is a

664
00:21:31,750 --> 00:21:34,480
diagram of the EAP peep authentication

665
00:21:33,850 --> 00:21:36,610
process

666
00:21:34,480 --> 00:21:38,410
eep eep eep is an EAP method it's very

667
00:21:36,610 --> 00:21:40,870
very closely related very similar to EPT

668
00:21:38,410 --> 00:21:43,360
TLS which EPT CLS makes a little more

669
00:21:40,870 --> 00:21:44,949
sense within an ADA 2.1 X 2010

670
00:21:43,360 --> 00:21:46,330
environment so but they're close enough

671
00:21:44,950 --> 00:21:49,150
together that you understand one you can

672
00:21:46,330 --> 00:21:51,189
understand the other but the way eep eep

673
00:21:49,150 --> 00:21:52,960
eep works is that you know first the

674
00:21:51,190 --> 00:21:54,220
supplicant which is can the left which

675
00:21:52,960 --> 00:21:55,720
in this case is a wireless device is

676
00:21:54,220 --> 00:21:57,370
going to make an authentication request

677
00:21:55,720 --> 00:21:59,110
it's going to make authentication

678
00:21:57,370 --> 00:22:01,209
request to the authentication server the

679
00:21:59,110 --> 00:22:04,270
authentication server it's going to

680
00:22:01,210 --> 00:22:06,100
respond with an x.509 certificate and

681
00:22:04,270 --> 00:22:08,170
the role that's x.509 certificate is to

682
00:22:06,100 --> 00:22:09,760
prove to the supplicant that it is who

683
00:22:08,170 --> 00:22:10,960
it says it is you know before before

684
00:22:09,760 --> 00:22:12,940
this happens the supplicant really has

685
00:22:10,960 --> 00:22:14,560
no idea what it's connecting to so the

686
00:22:12,940 --> 00:22:14,890
the the fennec asian server has to prove

687
00:22:14,560 --> 00:22:16,659
it

688
00:22:14,890 --> 00:22:19,260
we trust it now the supplicant at this

689
00:22:16,660 --> 00:22:21,490
point can choose to either accept or

690
00:22:19,260 --> 00:22:24,550
reject a certificate if accepts the

691
00:22:21,490 --> 00:22:25,930
certificate it means that it trusts the

692
00:22:24,550 --> 00:22:28,180
authentication server it trusts who it

693
00:22:25,930 --> 00:22:29,950
says it is and it feels safe indicate to

694
00:22:28,180 --> 00:22:31,390
it if it rejects it this whole thing is

695
00:22:29,950 --> 00:22:34,120
called off and and nothing further

696
00:22:31,390 --> 00:22:36,490
happens so provided the the certificates

697
00:22:34,120 --> 00:22:37,750
accepted and the onus has kind of placed

698
00:22:36,490 --> 00:22:40,060
on the supplicant in some in a lot of

699
00:22:37,750 --> 00:22:42,250
cases the user to accept or deny this

700
00:22:40,060 --> 00:22:43,179
but if it's accepted you're gonna have

701
00:22:42,250 --> 00:22:44,140
we're gonna move from the outer

702
00:22:43,180 --> 00:22:45,910
authentication to the internal

703
00:22:44,140 --> 00:22:48,730
dedication which is you know the next

704
00:22:45,910 --> 00:22:50,710
stage of what we're showing here in

705
00:22:48,730 --> 00:22:51,820
which a secure tunnel is established

706
00:22:50,710 --> 00:22:53,560
between the supplicant and the

707
00:22:51,820 --> 00:22:55,600
authentication server and then what

708
00:22:53,560 --> 00:22:57,040
happens through that secure tunnel part

709
00:22:55,600 --> 00:22:58,360
happens is that the actual like that the

710
00:22:57,040 --> 00:22:59,620
meet of the authentication process you

711
00:22:58,360 --> 00:23:01,120
know where we actually typing your

712
00:22:59,620 --> 00:23:03,909
password and neck it's you know convert

713
00:23:01,120 --> 00:23:05,350
it into a hash of that that gets sent to

714
00:23:03,910 --> 00:23:06,520
the authentication server that happens

715
00:23:05,350 --> 00:23:07,659
through that secure tunnel that we've

716
00:23:06,520 --> 00:23:09,610
established the reason for that is

717
00:23:07,660 --> 00:23:11,350
because and we'll talk about this more

718
00:23:09,610 --> 00:23:14,409
toward the end of it with earlier

719
00:23:11,350 --> 00:23:15,639
versions of earlier VAP methods that

720
00:23:14,410 --> 00:23:16,660
didn't use a secure tunnel like that you

721
00:23:15,640 --> 00:23:20,470
can actually sniff this whole process

722
00:23:16,660 --> 00:23:22,570
offline so there are some issues with

723
00:23:20,470 --> 00:23:25,240
this process Brad and Tony Woodson Josh

724
00:23:22,570 --> 00:23:26,530
right back in 2008 they actually

725
00:23:25,240 --> 00:23:27,610
demonstrated that you can use the rogue

726
00:23:26,530 --> 00:23:29,139
access point attack to force the

727
00:23:27,610 --> 00:23:30,490
supplicant to authenticate with the

728
00:23:29,140 --> 00:23:32,830
robot than a casing server by rogue

729
00:23:30,490 --> 00:23:34,480
access point attack what we mean is

730
00:23:32,830 --> 00:23:36,220
there's a style of attack different

731
00:23:34,480 --> 00:23:38,440
variations of one of the rogue ap attack

732
00:23:36,220 --> 00:23:39,730
but the the I guess like the most

733
00:23:38,440 --> 00:23:41,230
fundamental form that's kind of easy to

734
00:23:39,730 --> 00:23:43,450
understand is the evil twin attack in

735
00:23:41,230 --> 00:23:45,700
which essentially you create a clone of

736
00:23:43,450 --> 00:23:47,050
the of the target access point with the

737
00:23:45,700 --> 00:23:48,190
same network name as so long as you can

738
00:23:47,050 --> 00:23:50,500
provide a better connection to these

739
00:23:48,190 --> 00:23:51,460
client devices here they'll connect to

740
00:23:50,500 --> 00:23:51,730
you and their couple ways of doing that

741
00:23:51,460 --> 00:23:53,890
either

742
00:23:51,730 --> 00:23:55,840
you know higher signal strength or

743
00:23:53,890 --> 00:23:56,830
better single signal or simply by

744
00:23:55,840 --> 00:23:58,840
spamming this one with the

745
00:23:56,830 --> 00:23:59,980
authentication packets once you do that

746
00:23:58,840 --> 00:24:01,570
you've essentially established a man in

747
00:23:59,980 --> 00:24:03,910
the middle and remember that until this

748
00:24:01,570 --> 00:24:05,200
whole process succeeds this essentially

749
00:24:03,910 --> 00:24:06,960
is operating as an open network because

750
00:24:05,200 --> 00:24:09,880
you need to authenticate before the WPA

751
00:24:06,960 --> 00:24:11,740
protections kick in so what they figured

752
00:24:09,880 --> 00:24:12,820
out was that you forced these devices to

753
00:24:11,740 --> 00:24:13,780
connect to you and then you run your own

754
00:24:12,820 --> 00:24:15,760
authentication server in the background

755
00:24:13,780 --> 00:24:17,920
and they'll tena Kate with you and you

756
00:24:15,760 --> 00:24:19,180
can capture in this case an MS chapter

757
00:24:17,920 --> 00:24:21,880
to challenge and response which are

758
00:24:19,180 --> 00:24:23,250
hashes that you can crack to obtain

759
00:24:21,880 --> 00:24:25,360
credentials

760
00:24:23,250 --> 00:24:26,650
did I make sense to everyone because

761
00:24:25,360 --> 00:24:28,510
it's pretty fundamental so I just want

762
00:24:26,650 --> 00:24:33,660
to make sure are we good at that

763
00:24:28,510 --> 00:24:33,660
anyone not good at that okay awesome

764
00:24:33,720 --> 00:24:39,730
right so to make this worse right like

765
00:24:36,820 --> 00:24:42,309
what they also you know the thing is

766
00:24:39,730 --> 00:24:45,100
like a few people so uses well okay so

767
00:24:42,309 --> 00:24:46,750
we mentioned that yep Emily EAP complete

768
00:24:45,100 --> 00:24:48,790
be implemented in any number of ways

769
00:24:46,750 --> 00:24:52,120
right I mean there there's a ton of EAP

770
00:24:48,790 --> 00:24:53,168
methods out there likewise when we talk

771
00:24:52,120 --> 00:24:55,418
about the internal dedication that

772
00:24:53,169 --> 00:24:57,760
happens through the secure tunnel over

773
00:24:55,419 --> 00:25:00,250
here there are a number of ways you can

774
00:24:57,760 --> 00:25:02,140
implement that mschap e2 is probably the

775
00:25:00,250 --> 00:25:05,500
most widely used for EEP EEP EEP and EAP

776
00:25:02,140 --> 00:25:06,669
TLS also one of the stronger ones I mean

777
00:25:05,500 --> 00:25:08,169
what's cool - MS Chaffee - is it

778
00:25:06,669 --> 00:25:10,210
actually does provide mutual

779
00:25:08,169 --> 00:25:12,130
authentication which is which is pretty

780
00:25:10,210 --> 00:25:14,679
interesting the problem is it's also

781
00:25:12,130 --> 00:25:16,390
vulnerable to cryptographic weakness as

782
00:25:14,679 --> 00:25:18,640
discovered back in 2012 by Moxie

783
00:25:16,390 --> 00:25:19,929
Marlinspike and David Holton and

784
00:25:18,640 --> 00:25:21,370
essentially what they figured out is

785
00:25:19,929 --> 00:25:22,929
that the EMAs cheffy - challenge and

786
00:25:21,370 --> 00:25:26,649
response is what you capture in order to

787
00:25:22,929 --> 00:25:27,970
crack and and obtain passwords demos

788
00:25:26,650 --> 00:25:30,490
traffic - challenger response can be

789
00:25:27,970 --> 00:25:32,830
kind of converted to ntlm v1 which as

790
00:25:30,490 --> 00:25:35,590
you may know can itself be reduced to a

791
00:25:32,830 --> 00:25:36,970
single 56 bits of das encryption which

792
00:25:35,590 --> 00:25:39,309
can be cracked really fast

793
00:25:36,970 --> 00:25:41,350
this was back you know like six years

794
00:25:39,309 --> 00:25:44,350
ago they were able to demonstrate that

795
00:25:41,350 --> 00:25:47,740
you could crack and essentially had

796
00:25:44,350 --> 00:25:51,040
passwords of arbitrary length within 24

797
00:25:47,740 --> 00:25:52,780
hours 100% success rate using an FPGA

798
00:25:51,040 --> 00:25:54,879
based crackling rig that they built now

799
00:25:52,780 --> 00:25:57,160
granted you know back you know they're

800
00:25:54,880 --> 00:25:59,559
rigged with a bill was $100,000 FPGA

801
00:25:57,160 --> 00:26:00,880
based cracking rig so it was kind of

802
00:25:59,559 --> 00:26:02,440
expensive however they did make it

803
00:26:00,880 --> 00:26:04,030
public so they you know they kind of

804
00:26:02,440 --> 00:26:06,010
knew the argument that well most people

805
00:26:04,030 --> 00:26:09,000
couldn't have access to this so they

806
00:26:06,010 --> 00:26:10,960
essentially said well you can use ours I

807
00:26:09,000 --> 00:26:12,610
know actually I had the pleasure of

808
00:26:10,960 --> 00:26:15,340
speaking with mr. Holten last summer and

809
00:26:12,610 --> 00:26:16,510
he was telling me that the the that

810
00:26:15,340 --> 00:26:17,949
hundred thousand dollar cracking rig

811
00:26:16,510 --> 00:26:19,780
that or that bed cracking where they

812
00:26:17,950 --> 00:26:22,240
built back to 2012 that cost him about a

813
00:26:19,780 --> 00:26:23,889
hundred thousand dollars to build now

814
00:26:22,240 --> 00:26:25,480
would probably cost anywhere between ten

815
00:26:23,890 --> 00:26:27,010
and twenty thousand dollars to build so

816
00:26:25,480 --> 00:26:28,690
that actually is a number that's much

817
00:26:27,010 --> 00:26:30,040
more approachable in terms of what would

818
00:26:28,690 --> 00:26:31,260
be affordable to like you know a

819
00:26:30,040 --> 00:26:34,210
mid-grade

820
00:26:31,260 --> 00:26:35,530
you know like criminal enterprise or at

821
00:26:34,210 --> 00:26:36,850
least something you could find someone

822
00:26:35,530 --> 00:26:40,510
to crack these hashes for you

823
00:26:36,850 --> 00:26:41,959
so like it it's actually far more within

824
00:26:40,510 --> 00:26:44,720
reach of that because the hard

825
00:26:41,960 --> 00:26:47,029
to do this has gotten cheaper anyway

826
00:26:44,720 --> 00:26:48,289
it's back to $82 next 2010 and why are

827
00:26:47,029 --> 00:26:50,390
we talking about this stuff in the first

828
00:26:48,289 --> 00:26:52,010
place okay so the main takeaway about 82

829
00:26:50,390 --> 00:26:54,260
dot 1x 2010 from attackers perspective

830
00:26:52,010 --> 00:26:57,020
is that it uses a ap to authenticate to

831
00:26:54,260 --> 00:26:58,100
places to the network and that's all

832
00:26:57,020 --> 00:26:59,510
well and good but it's remembered too

833
00:26:58,100 --> 00:27:03,049
it's important remember that EAP is only

834
00:26:59,510 --> 00:27:04,580
as secure as the EAP method used and if

835
00:27:03,049 --> 00:27:07,299
we look at the the EAP methods that are

836
00:27:04,580 --> 00:27:09,199
supported by attitude when X 2010

837
00:27:07,299 --> 00:27:10,990
basically the only requirements are that

838
00:27:09,200 --> 00:27:13,279
it supports the mutual authentication

839
00:27:10,990 --> 00:27:15,409
that supports derivation of key is there

840
00:27:13,279 --> 00:27:17,179
at least 128 bits in length and it's

841
00:27:15,409 --> 00:27:19,190
able to generate an MS Cave at least 64

842
00:27:17,179 --> 00:27:21,529
octaves and there plenty of commonly

843
00:27:19,190 --> 00:27:25,820
seen week EAP methods that meet these

844
00:27:21,529 --> 00:27:28,600
requirements including EPP EPP TLS so I

845
00:27:25,820 --> 00:27:32,330
think you see where I'm going with this

846
00:27:28,600 --> 00:27:33,590
so it makes sense now that you know we

847
00:27:32,330 --> 00:27:35,090
should be able to use a similar attack

848
00:27:33,590 --> 00:27:36,620
that what we used to defeat weak EAP

849
00:27:35,090 --> 00:27:38,600
methods on the wireless environment

850
00:27:36,620 --> 00:27:40,100
within a wired environment and I know

851
00:27:38,600 --> 00:27:41,480
this slide says defeating Mac's accusing

852
00:27:40,100 --> 00:27:43,850
rogue gateway attacks we're actually not

853
00:27:41,480 --> 00:27:46,669
doing that where it should say defeating

854
00:27:43,850 --> 00:27:50,629
a throw in X 2010 using rogue gateway

855
00:27:46,669 --> 00:27:51,890
attacks because like you know what we're

856
00:27:50,630 --> 00:27:53,539
about to do we're not actually going to

857
00:27:51,890 --> 00:27:55,880
approach Mexico at all we're going to

858
00:27:53,539 --> 00:27:58,690
avoid having to deal with Mac SEC by

859
00:27:55,880 --> 00:28:04,190
attacking a sonication mechanism which

860
00:27:58,690 --> 00:28:06,830
it's kind of sleazy but it it works so

861
00:28:04,190 --> 00:28:08,149
the goal of a rogue gateway attack is to

862
00:28:06,830 --> 00:28:09,470
force the supplicant to authenticate

863
00:28:08,149 --> 00:28:11,090
with the attackers device and this is

864
00:28:09,470 --> 00:28:12,770
happening our wired network once this

865
00:28:11,090 --> 00:28:14,059
happens you capture has just cracked

866
00:28:12,770 --> 00:28:16,220
them an authenticate directly with the

867
00:28:14,059 --> 00:28:17,840
network the challenge here is gonna be

868
00:28:16,220 --> 00:28:19,070
that you know we're no longer working

869
00:28:17,840 --> 00:28:20,330
with wireless we can't just pluck

870
00:28:19,070 --> 00:28:21,379
devices out of the sky and get them to

871
00:28:20,330 --> 00:28:23,029
connect to us we have to be a little

872
00:28:21,380 --> 00:28:25,159
more clever in terms of find work or not

873
00:28:23,029 --> 00:28:26,539
as the case may be in terms of actually

874
00:28:25,159 --> 00:28:28,549
getting this to happen but you can't use

875
00:28:26,539 --> 00:28:31,490
the traditional row VIP attack good work

876
00:28:28,549 --> 00:28:34,279
in a wireless environment with that said

877
00:28:31,490 --> 00:28:36,440
you know if we look at 82 that - 2004

878
00:28:34,279 --> 00:28:37,460
the bypasses that effect that they take

879
00:28:36,440 --> 00:28:38,990
kind of man the middle style approach

880
00:28:37,460 --> 00:28:40,850
you see we're inserting the device

881
00:28:38,990 --> 00:28:42,380
directly between the Authenticator and

882
00:28:40,850 --> 00:28:45,399
the supplicant in this case we can't

883
00:28:42,380 --> 00:28:47,029
really do that so we're going to be

884
00:28:45,399 --> 00:28:48,199
basically coming up with a way of

885
00:28:47,029 --> 00:28:51,289
stealing credentials so we can attend to

886
00:28:48,200 --> 00:28:52,669
keep directly with the switch so let's

887
00:28:51,289 --> 00:28:55,820
talk about how we build a road device to

888
00:28:52,669 --> 00:28:57,110
do that basically the platform that I

889
00:28:55,820 --> 00:28:59,030
used was an intel milk running through

890
00:28:57,110 --> 00:29:02,540
our 28 because for our 28 has support

891
00:28:59,030 --> 00:29:03,860
for mac sack which is pretty cool you

892
00:29:02,540 --> 00:29:05,240
know you'd want to give a two or three

893
00:29:03,860 --> 00:29:06,889
interfaces a slide channel interface you

894
00:29:05,240 --> 00:29:09,710
can control it an upstream interface

895
00:29:06,890 --> 00:29:11,210
that's connected to the switch a fire

896
00:29:09,710 --> 00:29:13,310
interface that's connected to the

897
00:29:11,210 --> 00:29:14,300
supplicant i threw in a transparent

898
00:29:13,310 --> 00:29:15,200
bridge they're just good it's useful to

899
00:29:14,300 --> 00:29:16,669
have low it's not looking to be

900
00:29:15,200 --> 00:29:18,590
applicable in this case but more on why

901
00:29:16,670 --> 00:29:21,860
we have this let me apply this other

902
00:29:18,590 --> 00:29:23,300
things but we need a way of diverting

903
00:29:21,860 --> 00:29:25,639
traffic to the road device so if you

904
00:29:23,300 --> 00:29:27,050
look at these these train tracks you

905
00:29:25,640 --> 00:29:28,730
know we can imagine right you know

906
00:29:27,050 --> 00:29:29,870
there's like a switch here and and when

907
00:29:28,730 --> 00:29:31,280
the switches in the a position the

908
00:29:29,870 --> 00:29:32,989
trains going to go directly into this

909
00:29:31,280 --> 00:29:34,700
this this train station right here and

910
00:29:32,990 --> 00:29:36,530
once in the B position it's gonna bypass

911
00:29:34,700 --> 00:29:38,450
the train station entirely you can do

912
00:29:36,530 --> 00:29:39,950
the same style of thing on with an

913
00:29:38,450 --> 00:29:42,020
Ethernet wit Network you can buy a

914
00:29:39,950 --> 00:29:44,030
little mechanical a B Ethernet splitters

915
00:29:42,020 --> 00:29:45,830
off of Amazon for like five bucks each

916
00:29:44,030 --> 00:29:47,990
they're wonderful you can take them

917
00:29:45,830 --> 00:29:49,189
apart and do things to them but

918
00:29:47,990 --> 00:29:50,210
essentially you click the a button on

919
00:29:49,190 --> 00:29:51,380
one of these things and traffic will

920
00:29:50,210 --> 00:29:53,750
flow into this little thing on the back

921
00:29:51,380 --> 00:29:55,160
and out through the a port you click the

922
00:29:53,750 --> 00:29:56,720
B button and it will switch it so the

923
00:29:55,160 --> 00:29:59,720
traffic will be you know the two ports

924
00:29:56,720 --> 00:30:01,700
that are connected here will be the the

925
00:29:59,720 --> 00:30:04,190
kind of primary one back here and the B

926
00:30:01,700 --> 00:30:05,180
port so a it goes one way B goes the

927
00:30:04,190 --> 00:30:07,040
other way it's a mechanical

928
00:30:05,180 --> 00:30:08,750
implementation you know it's not

929
00:30:07,040 --> 00:30:09,980
affected by the the protections that

930
00:30:08,750 --> 00:30:12,380
mitigate the bridging that we used

931
00:30:09,980 --> 00:30:14,540
earlier the problem is it doesn't really

932
00:30:12,380 --> 00:30:16,310
switch itself you know you can you can

933
00:30:14,540 --> 00:30:17,629
buy one that switches itself but like

934
00:30:16,310 --> 00:30:20,240
they're like a thousand bucks

935
00:30:17,630 --> 00:30:21,170
so it's either just a build one but we

936
00:30:20,240 --> 00:30:23,900
need a way of manipulating the push

937
00:30:21,170 --> 00:30:26,090
twist you I recently tried using relays

938
00:30:23,900 --> 00:30:27,620
but that led to like some pretty crazy

939
00:30:26,090 --> 00:30:29,750
impedance issues because I'm not an

940
00:30:27,620 --> 00:30:31,399
electrical engineer which probably

941
00:30:29,750 --> 00:30:33,530
explains why if you buy a relay based

942
00:30:31,400 --> 00:30:35,660
one online they're really expensive but

943
00:30:33,530 --> 00:30:37,510
the I think that the more easily

944
00:30:35,660 --> 00:30:40,580
reproducible option is to use solenoids

945
00:30:37,510 --> 00:30:44,120
much anyways what I did basically the

946
00:30:40,580 --> 00:30:45,350
solenoid is it's a linear it it's a

947
00:30:44,120 --> 00:30:47,360
linear it basically creates linear

948
00:30:45,350 --> 00:30:49,459
motion essentially you have a coil

949
00:30:47,360 --> 00:30:50,870
that's wrapped around a rod and you know

950
00:30:49,460 --> 00:30:53,210
when you run electricity through the

951
00:30:50,870 --> 00:30:54,889
coil you either get like a like a like a

952
00:30:53,210 --> 00:30:57,200
pushing motion if it's a push solenoid

953
00:30:54,890 --> 00:30:58,940
or a pulling motion if it's a pull

954
00:30:57,200 --> 00:31:01,360
solenoid so we essentially use push

955
00:30:58,940 --> 00:31:04,040
solenoids to manipulate the switches and

956
00:31:01,360 --> 00:31:05,090
allow us to switch this remotely and we

957
00:31:04,040 --> 00:31:07,399
can control the solenoids with an

958
00:31:05,090 --> 00:31:08,720
Arduino so like the final design of a

959
00:31:07,400 --> 00:31:09,290
road device is actually gonna look like

960
00:31:08,720 --> 00:31:10,880
this

961
00:31:09,290 --> 00:31:14,840
it's what we saw before except now we

962
00:31:10,880 --> 00:31:17,210
have a physical ABS footer on each side

963
00:31:14,840 --> 00:31:21,470
so two of them and you know the one of

964
00:31:17,210 --> 00:31:23,240
the left here is placed between the the

965
00:31:21,470 --> 00:31:25,760
switch and our upstream interface now on

966
00:31:23,240 --> 00:31:28,520
the right here is a place between the

967
00:31:25,760 --> 00:31:30,020
finer face and the supplicant and what's

968
00:31:28,520 --> 00:31:32,300
in the a position if you know the

969
00:31:30,020 --> 00:31:35,420
splitters are bypassing the RO device

970
00:31:32,300 --> 00:31:36,889
entirely we set up a land tap a passive

971
00:31:35,420 --> 00:31:38,570
tap which essentially has a one

972
00:31:36,890 --> 00:31:40,070
directional you know traffic can flow

973
00:31:38,570 --> 00:31:41,149
out of it but not in if you look up a

974
00:31:40,070 --> 00:31:42,919
throwing star land tap you'll see

975
00:31:41,150 --> 00:31:45,260
exactly I'm talking about but we placed

976
00:31:42,920 --> 00:31:47,570
that here when it's in bypass mode so we

977
00:31:45,260 --> 00:31:48,680
can still sniff traffic and we just kind

978
00:31:47,570 --> 00:31:52,399
of that gives us ability to listen to

979
00:31:48,680 --> 00:31:54,950
traffic from drove device so if we if we

980
00:31:52,400 --> 00:31:56,330
put the switches and you know if we if

981
00:31:54,950 --> 00:31:58,400
we run the command to put the switches

982
00:31:56,330 --> 00:32:00,580
in the B position now traffic is routed

983
00:31:58,400 --> 00:32:04,520
directly to the device which puts our

984
00:32:00,580 --> 00:32:06,199
device directly between the supplicant

985
00:32:04,520 --> 00:32:09,590
and the switch so you can kind of go

986
00:32:06,200 --> 00:32:11,450
back and forth like that so you know

987
00:32:09,590 --> 00:32:14,060
with this voice how do we implement the

988
00:32:11,450 --> 00:32:15,530
attack but what we do is we first you

989
00:32:14,060 --> 00:32:18,860
know once we've started out in bypass

990
00:32:15,530 --> 00:32:21,830
mode obviously but when we want to

991
00:32:18,860 --> 00:32:23,479
perform the attack we bring down the

992
00:32:21,830 --> 00:32:25,639
upstream interface the bridge interface

993
00:32:23,480 --> 00:32:27,650
because we're not really using it and

994
00:32:25,640 --> 00:32:29,420
and and leave the finder face up and we

995
00:32:27,650 --> 00:32:31,880
start host EPA PD or listening on the

996
00:32:29,420 --> 00:32:34,040
finer on the fire to face and we put

997
00:32:31,880 --> 00:32:36,140
these these mechanical switches both in

998
00:32:34,040 --> 00:32:37,670
mode B so what that's gonna do is that

999
00:32:36,140 --> 00:32:39,020
it's gonna connect the switch the

1000
00:32:37,670 --> 00:32:40,820
Authenticator to this this network

1001
00:32:39,020 --> 00:32:42,230
interface which is not currently up from

1002
00:32:40,820 --> 00:32:45,850
the switches perspective nothing is

1003
00:32:42,230 --> 00:32:47,990
connected to it and you know from the

1004
00:32:45,850 --> 00:32:50,570
what the other one is going to be

1005
00:32:47,990 --> 00:32:51,650
basically from the supplicants

1006
00:32:50,570 --> 00:32:54,379
perspective the supplicant is going to

1007
00:32:51,650 --> 00:32:55,610
be connected to this fie interface which

1008
00:32:54,380 --> 00:32:57,500
is running this authentication server

1009
00:32:55,610 --> 00:32:58,580
and then we essentially force the

1010
00:32:57,500 --> 00:33:01,670
supplicant to authenticate we tell it to

1011
00:32:58,580 --> 00:33:04,129
really negate by sending it below I

1012
00:33:01,670 --> 00:33:07,810
actually did it was I sent a equal start

1013
00:33:04,130 --> 00:33:10,670
frame to hostapd which then sends the

1014
00:33:07,810 --> 00:33:12,560
request identity frame to the supplicant

1015
00:33:10,670 --> 00:33:13,940
but that forces authentication and at

1016
00:33:12,560 --> 00:33:15,710
that point it proceeds very much like

1017
00:33:13,940 --> 00:33:17,150
the attack against weak EVP methods that

1018
00:33:15,710 --> 00:33:18,860
we just talked about you know they've

1019
00:33:17,150 --> 00:33:21,740
indicates with you you crack the hashes

1020
00:33:18,860 --> 00:33:22,790
and you're done then at that point you

1021
00:33:21,740 --> 00:33:23,059
can just authenticate with the network

1022
00:33:22,790 --> 00:33:24,529
to

1023
00:33:23,059 --> 00:33:26,120
Klee you do this like late at night when

1024
00:33:24,529 --> 00:33:30,679
no one's in the office people probably

1025
00:33:26,120 --> 00:33:32,689
won't notice so to do that we leave

1026
00:33:30,679 --> 00:33:34,070
these splitters in the beep position you

1027
00:33:32,690 --> 00:33:35,539
bring you know you leave the bridge down

1028
00:33:34,070 --> 00:33:37,279
you bring down the finer face you bring

1029
00:33:35,539 --> 00:33:39,080
up the upstream interface with static IP

1030
00:33:37,279 --> 00:33:40,879
address that matches the one used by the

1031
00:33:39,080 --> 00:33:43,129
sublet can spoof the supplicants MAC

1032
00:33:40,879 --> 00:33:45,049
address then use the correct credentials

1033
00:33:43,129 --> 00:33:47,748
to authenticate directly with the switch

1034
00:33:45,049 --> 00:33:49,279
and then you're on the network so just

1035
00:33:47,749 --> 00:33:50,899
to demonstrate this really fast same

1036
00:33:49,279 --> 00:33:52,759
stuff as before although you see here we

1037
00:33:50,899 --> 00:33:54,678
have our like our little Frankenstein

1038
00:33:52,759 --> 00:33:56,720
device you can do this in a much smaller

1039
00:33:54,679 --> 00:33:57,649
package but just you know if you're

1040
00:33:56,720 --> 00:34:00,379
building something for the first time

1041
00:33:57,649 --> 00:34:02,268
it's used it's useful to have like large

1042
00:34:00,379 --> 00:34:03,439
parts to work with and also it for

1043
00:34:02,269 --> 00:34:04,820
demonstrative purposes it's easier we

1044
00:34:03,440 --> 00:34:06,139
have our four solenoids there that are

1045
00:34:04,820 --> 00:34:07,340
manipulating the splitters which we've

1046
00:34:06,139 --> 00:34:08,779
taken apart and integrated them into our

1047
00:34:07,340 --> 00:34:11,359
little board there it's not really

1048
00:34:08,780 --> 00:34:15,829
little but and it's controlled by the

1049
00:34:11,359 --> 00:34:22,359
surgeon we know down there but it same

1050
00:34:15,829 --> 00:34:24,829
deal and we're gonna run this command

1051
00:34:22,359 --> 00:34:26,179
and it's gonna implement the real

1052
00:34:24,829 --> 00:34:27,530
gateway tech and you can see these

1053
00:34:26,179 --> 00:34:28,940
things lighting up and you can see that

1054
00:34:27,530 --> 00:34:30,470
the solenoids kind of kicking in and

1055
00:34:28,940 --> 00:34:32,599
they're flipping those switches so that

1056
00:34:30,469 --> 00:34:35,918
our supplicant device is connected

1057
00:34:32,599 --> 00:34:38,000
directly to the switch or and I'm sorry

1058
00:34:35,918 --> 00:34:41,839
subway device is connected directly to

1059
00:34:38,000 --> 00:34:43,879
our Rogue rogue device and you see there

1060
00:34:41,839 --> 00:34:49,149
we're able to capture the hashes and you

1061
00:34:43,879 --> 00:34:49,149
could just use those to authenticate so

1062
00:34:49,270 --> 00:34:53,480
yep that's the attack gonna do it you

1063
00:34:52,369 --> 00:34:54,710
know it still sometimes we get to a

1064
00:34:53,480 --> 00:34:57,380
quick detour to some other stuff that

1065
00:34:54,710 --> 00:35:00,440
kind of worked on in conjunction with

1066
00:34:57,380 --> 00:35:02,210
this we're gonna talk quickly about Mac

1067
00:35:00,440 --> 00:35:06,410
filtering and Mac application

1068
00:35:02,210 --> 00:35:09,560
authentication bypass so a fun fact not

1069
00:35:06,410 --> 00:35:11,720
all devices support 8 a 2.1 X and that's

1070
00:35:09,560 --> 00:35:14,960
surprising right but not all the devices

1071
00:35:11,720 --> 00:35:16,459
for a 2.1 X and when this happens in a

1072
00:35:14,960 --> 00:35:17,930
lot of cases organizations need to be

1073
00:35:16,460 --> 00:35:19,190
able to deploy these device anyway so a

1074
00:35:17,930 --> 00:35:20,810
lot of like historically a lot of

1075
00:35:19,190 --> 00:35:23,450
multifunction printers IP cameras

1076
00:35:20,810 --> 00:35:24,349
peripheral devices like that they don't

1077
00:35:23,450 --> 00:35:26,720
have the same kind of attitude on the

1078
00:35:24,349 --> 00:35:28,099
next support that that you'd see with

1079
00:35:26,720 --> 00:35:29,868
you know things that could be more

1080
00:35:28,099 --> 00:35:32,299
centrally managed so this happens you

1081
00:35:29,869 --> 00:35:33,530
don't always have the option to just not

1082
00:35:32,299 --> 00:35:34,579
deploy this device

1083
00:35:33,530 --> 00:35:35,980
you still need to hook it up to the

1084
00:35:34,579 --> 00:35:37,000
network some house when this happens you

1085
00:35:35,980 --> 00:35:40,720
to create what's known as a port

1086
00:35:37,000 --> 00:35:41,950
security exception and you know

1087
00:35:40,720 --> 00:35:43,299
essentially port security exception

1088
00:35:41,950 --> 00:35:44,740
you're changing your typical port

1089
00:35:43,300 --> 00:35:46,359
security policies what this usually

1090
00:35:44,740 --> 00:35:48,850
means that you're disabling 802 dot 1x

1091
00:35:46,359 --> 00:35:50,529
on the port used by this device and

1092
00:35:48,850 --> 00:35:51,700
usually replacing it with natural Turing

1093
00:35:50,530 --> 00:35:54,730
or some other weak form of access

1094
00:35:51,700 --> 00:35:56,350
control and historically these have been

1095
00:35:54,730 --> 00:35:58,119
very prevalent due to widespread lack of

1096
00:35:56,350 --> 00:35:59,950
a tonight when I support by these by

1097
00:35:58,119 --> 00:36:03,040
these devices as we talked about it's

1098
00:35:59,950 --> 00:36:04,270
also presented historically it's kind of

1099
00:36:03,040 --> 00:36:05,680
been viewed as pretty low-hanging fruit

1100
00:36:04,270 --> 00:36:08,619
by attackers because it's um it's much

1101
00:36:05,680 --> 00:36:11,410
easier to try to actually to just find a

1102
00:36:08,619 --> 00:36:12,670
device that has been given a port

1103
00:36:11,410 --> 00:36:14,649
security exception and spoof of MAC

1104
00:36:12,670 --> 00:36:16,930
address then to actually have to bypass

1105
00:36:14,650 --> 00:36:18,760
a 22.1 X using a bridge or hub it's it's

1106
00:36:16,930 --> 00:36:21,490
much easier as much faster it's much you

1107
00:36:18,760 --> 00:36:22,570
know so that's kind of one of the first

1108
00:36:21,490 --> 00:36:24,520
things you'd look for rather than

1109
00:36:22,570 --> 00:36:29,260
actually trying to bypass from an actual

1110
00:36:24,520 --> 00:36:30,640
bypass the thing is though port security

1111
00:36:29,260 --> 00:36:31,990
exceptions are slowly dying slowly I

1112
00:36:30,640 --> 00:36:35,560
mean we're not there yet but it's low

1113
00:36:31,990 --> 00:36:36,850
there they are slowly dying the reason

1114
00:36:35,560 --> 00:36:38,320
for this is that 802 that when X support

1115
00:36:36,850 --> 00:36:39,580
by peripheral device manufacturers has

1116
00:36:38,320 --> 00:36:41,590
increased dramatically

1117
00:36:39,580 --> 00:36:44,200
legacy hardware's currently being phased

1118
00:36:41,590 --> 00:36:45,880
out and replaced by you know devices

1119
00:36:44,200 --> 00:36:47,890
actually do support it a 2.1 X you know

1120
00:36:45,880 --> 00:36:50,080
if you go online and look at like Newegg

1121
00:36:47,890 --> 00:36:52,359
or does any site that sells you know

1122
00:36:50,080 --> 00:36:53,410
enterprise like printers for example if

1123
00:36:52,359 --> 00:36:55,420
you go and look for different models

1124
00:36:53,410 --> 00:36:57,190
available pretty much every minute major

1125
00:36:55,420 --> 00:36:59,920
from manufacturer out there has it like

1126
00:36:57,190 --> 00:37:01,330
at least one brand that supports 802 dot

1127
00:36:59,920 --> 00:37:02,890
1x and falls within a price range that

1128
00:37:01,330 --> 00:37:05,440
could be you know within the purchasing

1129
00:37:02,890 --> 00:37:08,230
power of you know even like you know a

1130
00:37:05,440 --> 00:37:09,850
lot of small businesses let alone let

1131
00:37:08,230 --> 00:37:11,050
alone like an enterprise organization so

1132
00:37:09,850 --> 00:37:13,330
what this means is that as like the old

1133
00:37:11,050 --> 00:37:15,130
legacy hardware breaks it's gonna it's

1134
00:37:13,330 --> 00:37:17,170
probably gonna get replaced or will be

1135
00:37:15,130 --> 00:37:20,619
replaced over time with these 802 dot

1136
00:37:17,170 --> 00:37:22,540
nice capable models which sounds like a

1137
00:37:20,619 --> 00:37:24,010
good thing because you know it is making

1138
00:37:22,540 --> 00:37:25,990
these port security exceptions less

1139
00:37:24,010 --> 00:37:27,670
prevalent and it's and really it's it's

1140
00:37:25,990 --> 00:37:29,109
really becoming not quite the

1141
00:37:27,670 --> 00:37:31,470
low-hanging fruit that it used to be and

1142
00:37:29,109 --> 00:37:33,460
this is only kind of getting better

1143
00:37:31,470 --> 00:37:35,649
accepted improve adoption of either John

1144
00:37:33,460 --> 00:37:37,119
tax did not necessarily implies strong

1145
00:37:35,650 --> 00:37:39,940
poor security for all devices for a

1146
00:37:37,119 --> 00:37:41,950
couple of reasons the first reason and

1147
00:37:39,940 --> 00:37:45,910
and you know I can't really fault him

1148
00:37:41,950 --> 00:37:47,560
for this but heito 2.1 X 2010 support

1149
00:37:45,910 --> 00:37:48,879
it's not really reality after peripheral

1150
00:37:47,560 --> 00:37:49,820
devices it's only just starting to take

1151
00:37:48,880 --> 00:37:52,730
off

1152
00:37:49,820 --> 00:37:55,940
with everything else you know like the

1153
00:37:52,730 --> 00:37:57,620
you know like the top maybe like maybe

1154
00:37:55,940 --> 00:38:00,830
like you know two three four or five

1155
00:37:57,620 --> 00:38:03,319
biggest manufacturers of enterprise

1156
00:38:00,830 --> 00:38:04,700
networking hardware have max set capable

1157
00:38:03,320 --> 00:38:06,860
models but they're all like you know

1158
00:38:04,700 --> 00:38:10,790
they they're all toward the higher end

1159
00:38:06,860 --> 00:38:12,800
of what you can purchase you know so you

1160
00:38:10,790 --> 00:38:13,880
know even if it's and also it's

1161
00:38:12,800 --> 00:38:15,920
complicated to implement so essentially

1162
00:38:13,880 --> 00:38:19,700
like it's 2010 it's only just trying to

1163
00:38:15,920 --> 00:38:21,020
take off in general and you know it's

1164
00:38:19,700 --> 00:38:22,339
it's it's something that enters a

1165
00:38:21,020 --> 00:38:26,240
peripheral devices they're not even

1166
00:38:22,340 --> 00:38:27,320
close so they're all using essentially

1167
00:38:26,240 --> 00:38:29,209
that means they're all using a device to

1168
00:38:27,320 --> 00:38:31,820
does before and as we saw you can bypass

1169
00:38:29,210 --> 00:38:33,380
that pretty pretty easily using bridges

1170
00:38:31,820 --> 00:38:35,360
injections etc but suppose you don't

1171
00:38:33,380 --> 00:38:38,870
want to do that well the other

1172
00:38:35,360 --> 00:38:40,610
interesting thing is that you know it it

1173
00:38:38,870 --> 00:38:43,040
kind of if you think about it you can

1174
00:38:40,610 --> 00:38:45,350
expect adoption for security ap methods

1175
00:38:43,040 --> 00:38:47,210
to be significantly lower on peripheral

1176
00:38:45,350 --> 00:38:50,980
devices than for centrally manageable

1177
00:38:47,210 --> 00:38:53,270
devices such as domain joint devices and

1178
00:38:50,980 --> 00:38:54,800
the reason for that is that you know

1179
00:38:53,270 --> 00:38:58,610
adoption of secure AP methods is already

1180
00:38:54,800 --> 00:39:00,950
pretty low across the board so you know

1181
00:38:58,610 --> 00:39:02,660
an adoption of security PAP methods can

1182
00:39:00,950 --> 00:39:03,830
expect it to being lower for peripheral

1183
00:39:02,660 --> 00:39:06,770
devices that you can manage from

1184
00:39:03,830 --> 00:39:07,670
centralized location so what this means

1185
00:39:06,770 --> 00:39:09,860
is that you do have the option of using

1186
00:39:07,670 --> 00:39:11,510
the road gateway attack against 802 that

1187
00:39:09,860 --> 00:39:14,840
when X 2004 if you want to leverage it

1188
00:39:11,510 --> 00:39:16,400
against these devices I would play out

1189
00:39:14,840 --> 00:39:18,230
much the same way that the attack that

1190
00:39:16,400 --> 00:39:19,940
we just saw but instead of you having

1191
00:39:18,230 --> 00:39:21,740
the the switches you actually could just

1192
00:39:19,940 --> 00:39:24,050
if you're using the rogue gateway attack

1193
00:39:21,740 --> 00:39:26,299
against $82 X 2004 you don't need the

1194
00:39:24,050 --> 00:39:27,590
added hardware capabilities you can just

1195
00:39:26,300 --> 00:39:30,320
connect the Authenticator and the

1196
00:39:27,590 --> 00:39:31,850
supplicant to your upstream and finer

1197
00:39:30,320 --> 00:39:33,740
phases respectively and then use that

1198
00:39:31,850 --> 00:39:36,529
bridge the bridge base that approach

1199
00:39:33,740 --> 00:39:38,180
that we talked about to kind of you know

1200
00:39:36,530 --> 00:39:39,530
sit there silently in the middle looking

1201
00:39:38,180 --> 00:39:40,609
at traffic and then when you want to

1202
00:39:39,530 --> 00:39:43,370
perform the row gateway attack and

1203
00:39:40,610 --> 00:39:44,390
actually steal credentials you you as

1204
00:39:43,370 --> 00:39:45,890
before you bring down the upstream

1205
00:39:44,390 --> 00:39:48,080
interface bring down the bridge and

1206
00:39:45,890 --> 00:39:50,060
start a hostapd listening on the finer

1207
00:39:48,080 --> 00:39:51,020
face that will get the supplicant holden

1208
00:39:50,060 --> 00:39:53,509
authenticate with you and you able to

1209
00:39:51,020 --> 00:39:56,840
capture credentials that way or actually

1210
00:39:53,510 --> 00:39:58,310
you can track to get credentials so

1211
00:39:56,840 --> 00:39:59,390
that'll help you out in cases where the

1212
00:39:58,310 --> 00:40:00,740
you know these peripheral devices are

1213
00:39:59,390 --> 00:40:02,240
using eep-eep eep-eep it's it LS

1214
00:40:00,740 --> 00:40:03,299
something like that where you actually

1215
00:40:02,240 --> 00:40:06,089
have to use them at the middle attack

1216
00:40:03,300 --> 00:40:08,700
get hashes but actually interestingly

1217
00:40:06,090 --> 00:40:13,800
enough a lot of peripheral devices use

1218
00:40:08,700 --> 00:40:17,759
EAP md5 you know and and the reason for

1219
00:40:13,800 --> 00:40:21,000
this is so md5 it's a much older much

1220
00:40:17,760 --> 00:40:22,290
much older AP method it's not really

1221
00:40:21,000 --> 00:40:25,110
that secure but the thing is it's very

1222
00:40:22,290 --> 00:40:26,670
easy to set up and configure and still

1223
00:40:25,110 --> 00:40:28,260
better than Mac filtering so if you need

1224
00:40:26,670 --> 00:40:31,140
to set up a 2.1 X on your printer and a

1225
00:40:28,260 --> 00:40:32,700
pinch you can pretty much just use EAP

1226
00:40:31,140 --> 00:40:33,930
md5 and you know it's probably gonna

1227
00:40:32,700 --> 00:40:36,089
work and you're not gonna have to fight

1228
00:40:33,930 --> 00:40:38,009
with it too much and you can still say

1229
00:40:36,090 --> 00:40:39,810
that yes I think we were deploying 82

1230
00:40:38,010 --> 00:40:41,370
networks 802 dot 1x on everything we

1231
00:40:39,810 --> 00:40:44,870
have EAP md5 running on all the printers

1232
00:40:41,370 --> 00:40:48,509
but you know who cares right

1233
00:40:44,870 --> 00:40:49,859
so the way ap md5 works it's going to

1234
00:40:48,510 --> 00:40:50,820
start out with an EAP request identity

1235
00:40:49,860 --> 00:40:53,580
frame coming from the authentication

1236
00:40:50,820 --> 00:40:55,920
server that's it's asking the supplicant

1237
00:40:53,580 --> 00:40:58,319
to provide its username the supplicants

1238
00:40:55,920 --> 00:40:59,640
then going to I respond with an EAP

1239
00:40:58,320 --> 00:41:02,100
response at any of our it's gonna

1240
00:40:59,640 --> 00:41:03,180
provide that username the authentication

1241
00:41:02,100 --> 00:41:04,440
service I'm gonna do something

1242
00:41:03,180 --> 00:41:06,029
interesting it's going to basically

1243
00:41:04,440 --> 00:41:09,900
generate a random string characters and

1244
00:41:06,030 --> 00:41:11,250
it's gonna send these off to the send us

1245
00:41:09,900 --> 00:41:13,530
RAM string of characters the supplicant

1246
00:41:11,250 --> 00:41:17,790
as an EAP response at

1247
00:41:13,530 --> 00:41:19,350
ap challenges at request and it's gonna

1248
00:41:17,790 --> 00:41:20,550
send that to the to the sub looking the

1249
00:41:19,350 --> 00:41:22,259
supplicants can receive this random

1250
00:41:20,550 --> 00:41:24,690
string of characters concatenate it with

1251
00:41:22,260 --> 00:41:26,550
its username and password to make one

1252
00:41:24,690 --> 00:41:29,460
long string that's I'm gonna put through

1253
00:41:26,550 --> 00:41:31,920
the md5 hash function that the output of

1254
00:41:29,460 --> 00:41:32,850
the md5 hash function is then going to

1255
00:41:31,920 --> 00:41:35,190
get sent off to the authentication

1256
00:41:32,850 --> 00:41:38,460
server as an EAP response I'm

1257
00:41:35,190 --> 00:41:39,420
challenge-response and the

1258
00:41:38,460 --> 00:41:40,830
authentication server is then going to

1259
00:41:39,420 --> 00:41:43,140
do the exact same thing it's going to

1260
00:41:40,830 --> 00:41:45,480
take the supplicants fat you know

1261
00:41:43,140 --> 00:41:46,560
password username and also the the

1262
00:41:45,480 --> 00:41:48,330
challenge string that generated earlier

1263
00:41:46,560 --> 00:41:50,490
and put it through the the md5 hash

1264
00:41:48,330 --> 00:41:53,120
function itself and if the output of the

1265
00:41:50,490 --> 00:41:55,410
hash function is equivalent to the

1266
00:41:53,120 --> 00:41:58,230
challenge response to receive from the

1267
00:41:55,410 --> 00:41:59,160
supplicant then the authentication

1268
00:41:58,230 --> 00:42:00,720
server is going to issue an

1269
00:41:59,160 --> 00:42:01,980
authentication success and the

1270
00:42:00,720 --> 00:42:04,399
supplicants can be able to connect the

1271
00:42:01,980 --> 00:42:06,210
network otherwise it fails and it can't

1272
00:42:04,400 --> 00:42:08,730
so the problem with this

1273
00:42:06,210 --> 00:42:10,440
this was another once again this is this

1274
00:42:08,730 --> 00:42:11,550
was Brad Antonia Woodson Josh right if

1275
00:42:10,440 --> 00:42:13,950
you pointed this out

1276
00:42:11,550 --> 00:42:15,390
back in 2008 is this entire process is

1277
00:42:13,950 --> 00:42:17,129
happening over plain text which is

1278
00:42:15,390 --> 00:42:19,980
really bad because if you can snip

1279
00:42:17,130 --> 00:42:23,609
this this process you can capture the

1280
00:42:19,980 --> 00:42:25,079
username the the challenge and the

1281
00:42:23,609 --> 00:42:26,869
challenge response then use a dictionary

1282
00:42:25,079 --> 00:42:28,920
attack where you successively trot

1283
00:42:26,869 --> 00:42:31,259
successively try passwords to get those

1284
00:42:28,920 --> 00:42:33,000
all to line up and then you can use that

1285
00:42:31,259 --> 00:42:36,900
to obtain a password using the captured

1286
00:42:33,000 --> 00:42:37,650
data actually and actually that you

1287
00:42:36,900 --> 00:42:40,140
don't necessarily have to use a

1288
00:42:37,650 --> 00:42:41,579
dictionary attack anymore in 2012 fan

1289
00:42:40,140 --> 00:42:43,259
Belu and and taozi

1290
00:42:41,579 --> 00:42:44,309
they figured out how to you that you

1291
00:42:43,259 --> 00:42:48,000
could actually doesn't length recovery

1292
00:42:44,309 --> 00:42:49,019
taxes to be this long even more so

1293
00:42:48,000 --> 00:42:51,180
without of mind if we leverage what we

1294
00:42:49,019 --> 00:42:53,519
know about how to attack EAP md5 and

1295
00:42:51,180 --> 00:42:56,819
boat and EAP 2004 and kind of combine

1296
00:42:53,519 --> 00:43:00,839
them you know here's how we would

1297
00:42:56,819 --> 00:43:04,380
essentially be able to go from this or

1298
00:43:00,839 --> 00:43:06,720
you know from this should i say to being

1299
00:43:04,380 --> 00:43:09,390
able to passively significant n chose

1300
00:43:06,720 --> 00:43:10,919
and let me kind of go where back to the

1301
00:43:09,390 --> 00:43:12,450
slide we're at now you first set up the

1302
00:43:10,920 --> 00:43:14,220
bridge you use the bridge based approach

1303
00:43:12,450 --> 00:43:15,629
to place the road device between the

1304
00:43:14,220 --> 00:43:17,519
supplicant Authenticator and then at

1305
00:43:15,630 --> 00:43:18,809
this point you could just start sniffing

1306
00:43:17,519 --> 00:43:20,669
traffic you're then wait for the

1307
00:43:18,809 --> 00:43:22,380
supplicant ill attend a gate and then

1308
00:43:20,670 --> 00:43:24,299
snip the EAP md5 challenge in the EAP

1309
00:43:22,380 --> 00:43:25,799
md5 response as well as the username

1310
00:43:24,299 --> 00:43:27,269
when this happens you then crack the

1311
00:43:25,799 --> 00:43:30,538
credentials and connect to the network

1312
00:43:27,269 --> 00:43:32,459
as we talked about before the major

1313
00:43:30,539 --> 00:43:33,839
drawback to this approach is that we

1314
00:43:32,460 --> 00:43:34,859
have to wait for the supplicant URI

1315
00:43:33,839 --> 00:43:36,779
authenticate with the switch actually

1316
00:43:34,859 --> 00:43:38,250
this is not gonna happen unless the

1317
00:43:36,779 --> 00:43:39,359
supplicant I was unplugged realistically

1318
00:43:38,250 --> 00:43:41,039
disabling a virtual network interface

1319
00:43:39,359 --> 00:43:43,710
usually is not enough to make this

1320
00:43:41,039 --> 00:43:45,599
happen we could use mechanical splitters

1321
00:43:43,710 --> 00:43:47,039
as we did earlier to kind of like you

1322
00:43:45,599 --> 00:43:48,839
know disconnected and then reconnect it

1323
00:43:47,039 --> 00:43:50,910
remotely but you know the less overhead

1324
00:43:48,839 --> 00:43:52,259
the better so the alternative is to

1325
00:43:50,910 --> 00:43:55,410
actually use something that I've dubbed

1326
00:43:52,259 --> 00:43:58,500
the forestry authentication attack in

1327
00:43:55,410 --> 00:43:59,549
which we know how we talked about really

1328
00:43:58,500 --> 00:44:00,990
the first two steps of the EAP

1329
00:43:59,549 --> 00:44:04,230
authentication process are as follows

1330
00:44:00,990 --> 00:44:06,689
the supplicants going to Sony

1331
00:44:04,230 --> 00:44:07,710
authenticated equal star frame and then

1332
00:44:06,690 --> 00:44:10,019
the Authenticator is going to respond to

1333
00:44:07,710 --> 00:44:12,289
that with an EAP requested any frame we

1334
00:44:10,019 --> 00:44:15,240
talked about that how that's optional

1335
00:44:12,289 --> 00:44:16,829
and and this the fact that the first

1336
00:44:15,240 --> 00:44:19,109
step is optional has security

1337
00:44:16,829 --> 00:44:20,730
implications right you know presumably

1338
00:44:19,109 --> 00:44:22,019
the reason why it's optional is that the

1339
00:44:20,730 --> 00:44:25,039
Authenticator needs a way of getting the

1340
00:44:22,019 --> 00:44:27,209
Authenticator to re-authenticate

1341
00:44:25,039 --> 00:44:28,470
the problem is the supplicant has no way

1342
00:44:27,210 --> 00:44:30,180
of verifying if the incoming EAP

1343
00:44:28,470 --> 00:44:30,689
requested any frame has been sent in

1344
00:44:30,180 --> 00:44:33,480
response

1345
00:44:30,690 --> 00:44:35,400
an equal start frame so what this means

1346
00:44:33,480 --> 00:44:36,569
that we can force real dedication by

1347
00:44:35,400 --> 00:44:37,859
setting an equal start frame to the

1348
00:44:36,569 --> 00:44:39,450
Authenticator as if it came from the sub

1349
00:44:37,859 --> 00:44:40,710
working using max do you think miss

1350
00:44:39,450 --> 00:44:42,089
proofing the result is the Authenticator

1351
00:44:40,710 --> 00:44:44,250
will send any AP requests on any frame

1352
00:44:42,089 --> 00:44:45,450
to the actual supplicant kick-starting

1353
00:44:44,250 --> 00:44:48,599
the real indication process and when

1354
00:44:45,450 --> 00:44:50,009
this happens both the Authenticator and

1355
00:44:48,599 --> 00:44:51,089
supplicant believe that the other party

1356
00:44:50,010 --> 00:44:53,420
has initiated the real authentication

1357
00:44:51,089 --> 00:44:57,920
attempt so it's kind of blind there and

1358
00:44:53,420 --> 00:45:02,160
I'll be done like two minutes or so so

1359
00:44:57,920 --> 00:45:03,780
just to kind of demonstrate this here's

1360
00:45:02,160 --> 00:45:06,299
this thing in action it we're just

1361
00:45:03,780 --> 00:45:07,829
sending we're just spamming equal start

1362
00:45:06,300 --> 00:45:11,609
frames using escapee as forcing real

1363
00:45:07,829 --> 00:45:13,410
authentication so our revised approach

1364
00:45:11,609 --> 00:45:14,759
to to attacking AP md5 insistence

1365
00:45:13,410 --> 00:45:16,529
introduced the rogue device into the

1366
00:45:14,760 --> 00:45:18,420
network between the Authenticator and

1367
00:45:16,530 --> 00:45:20,220
the supplicant start the transparent

1368
00:45:18,420 --> 00:45:21,660
bridge and pass they sniff traffic then

1369
00:45:20,220 --> 00:45:23,009
you finally you forced a real dedication

1370
00:45:21,660 --> 00:45:24,299
by setting this proof people start for

1371
00:45:23,010 --> 00:45:26,190
him to the thinner care that forces real

1372
00:45:24,300 --> 00:45:28,230
dedication and then we capture and crack

1373
00:45:26,190 --> 00:45:30,599
the EAP challenge and a pond5 response

1374
00:45:28,230 --> 00:45:32,310
and then could just credentials it's a

1375
00:45:30,599 --> 00:45:36,270
very fast attack when this happens like

1376
00:45:32,310 --> 00:45:38,240
you just run it and we've already got

1377
00:45:36,270 --> 00:45:41,490
those hazards that we can then crack

1378
00:45:38,240 --> 00:45:42,959
alright proposed mitigation I don't

1379
00:45:41,490 --> 00:45:43,859
actually know and it's probably might be

1380
00:45:42,960 --> 00:45:45,119
way around this but the first thing

1381
00:45:43,859 --> 00:45:47,490
comes to mind is introduced safety bits

1382
00:45:45,119 --> 00:45:48,450
the EP requested any frame I guess you

1383
00:45:47,490 --> 00:45:50,609
can read the blog post you want know

1384
00:45:48,450 --> 00:45:53,189
more about that but just some closing

1385
00:45:50,609 --> 00:45:54,900
thoughts so just to go over what we've

1386
00:45:53,190 --> 00:45:56,819
you know that the main contributions

1387
00:45:54,900 --> 00:45:58,170
that we've got over today the first is

1388
00:45:56,819 --> 00:46:00,720
the row gateway attack which can be used

1389
00:45:58,170 --> 00:46:03,270
to bypass a 2.1 X 2010 in cases where we

1390
00:46:00,720 --> 00:46:04,319
KP methods are used and does that by

1391
00:46:03,270 --> 00:46:05,880
tackling the authentication process

1392
00:46:04,319 --> 00:46:07,710
itself rather than dealing with max sec

1393
00:46:05,880 --> 00:46:10,200
we've introduced updated and improved

1394
00:46:07,710 --> 00:46:11,579
existing attitude we've basically

1395
00:46:10,200 --> 00:46:13,109
updated improve the existing edited out

1396
00:46:11,579 --> 00:46:14,520
when X 2004 bypassed techniques and

1397
00:46:13,109 --> 00:46:16,250
packaged them and are really easy to use

1398
00:46:14,520 --> 00:46:18,829
and install tool called silent bridge

1399
00:46:16,250 --> 00:46:21,089
and also we've introduced the EAP

1400
00:46:18,829 --> 00:46:23,880
md5 force real dedication attack which

1401
00:46:21,089 --> 00:46:25,529
you know it's kind of simple but it

1402
00:46:23,880 --> 00:46:27,300
makes that you know the process of

1403
00:46:25,530 --> 00:46:31,200
attacking a PMD 5 a lot easier a lot

1404
00:46:27,300 --> 00:46:33,030
faster some key takeaways for Security's

1405
00:46:31,200 --> 00:46:34,348
still a very positive thing do not stop

1406
00:46:33,030 --> 00:46:36,660
using it just because of any of this

1407
00:46:34,349 --> 00:46:37,950
stuff that I'm talking about today but

1408
00:46:36,660 --> 00:46:39,240
it's not a substitute for later pros to

1409
00:46:37,950 --> 00:46:40,828
network security by any means you know

1410
00:46:39,240 --> 00:46:42,240
deploying into not 1x

1411
00:46:40,829 --> 00:46:44,130
doesn't absolve anyone from patch

1412
00:46:42,240 --> 00:46:46,649
management responsibilities but I'm

1413
00:46:44,130 --> 00:46:48,390
by stating the obvious here the other

1414
00:46:46,650 --> 00:46:50,580
key takeaways you know the benefits

1415
00:46:48,390 --> 00:46:54,210
provided by ATC 1x can be undermined due

1416
00:46:50,580 --> 00:46:55,860
to essentially the benefits provided by

1417
00:46:54,210 --> 00:46:57,780
eighty to the 1x 2010 can be undermined

1418
00:46:55,860 --> 00:46:59,430
in a lot of cases do the continued use

1419
00:46:57,780 --> 00:47:01,560
of VAP as an authentication mechanism

1420
00:46:59,430 --> 00:47:03,000
and you know not only actually it's

1421
00:47:01,560 --> 00:47:04,380
interesting if you guys following the

1422
00:47:03,000 --> 00:47:07,290
research that was released at Def Con

1423
00:47:04,380 --> 00:47:08,580
this year but there was some you really

1424
00:47:07,290 --> 00:47:11,279
attacks that released by a couple guys

1425
00:47:08,580 --> 00:47:13,020
from sense post that kind of further

1426
00:47:11,280 --> 00:47:14,250
make this you know actually probably

1427
00:47:13,020 --> 00:47:17,490
blend itself nicely to this so I haven't

1428
00:47:14,250 --> 00:47:19,020
looked into it yet but yeah that's you

1429
00:47:17,490 --> 00:47:21,029
you're still healing with the APS the

1430
00:47:19,020 --> 00:47:22,380
authentication opt indication mechanism

1431
00:47:21,030 --> 00:47:23,670
and you so you can still attack it in

1432
00:47:22,380 --> 00:47:27,000
the same ways you traditionally attack

1433
00:47:23,670 --> 00:47:29,010
the AP also improved you know and I

1434
00:47:27,000 --> 00:47:30,720
support by peripheral devices is largely

1435
00:47:29,010 --> 00:47:32,970
undermined by lack of support for 802

1436
00:47:30,720 --> 00:47:35,580
that was 2010 and lo adoptions for trace

1437
00:47:32,970 --> 00:47:37,200
for strongly ap methods if you want like

1438
00:47:35,580 --> 00:47:38,880
more in-depth information than what we

1439
00:47:37,200 --> 00:47:40,410
saw there's a white paper and blog that

1440
00:47:38,880 --> 00:47:41,670
you can see if that URL there and also

1441
00:47:40,410 --> 00:47:44,879
if you want to play around with this

1442
00:47:41,670 --> 00:47:48,530
stuff there's a tool on github and I've

1443
00:47:44,880 --> 00:47:48,530
got the URL for that there thank you

