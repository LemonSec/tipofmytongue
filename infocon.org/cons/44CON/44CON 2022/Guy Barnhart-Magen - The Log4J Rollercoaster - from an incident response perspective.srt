1
00:00:00,000 --> 00:00:01,979
uh good morning everyone thank you for

2
00:00:01,979 --> 00:00:03,899
waking up and being here so early plus

3
00:00:03,899 --> 00:00:05,580
breakfast

4
00:00:05,580 --> 00:00:07,980
um I'm going to uh spend some time today

5
00:00:07,980 --> 00:00:10,320
I'm talking about the log 4J incident so

6
00:00:10,320 --> 00:00:12,300
I do have some trouble seeing you but if

7
00:00:12,300 --> 00:00:14,280
you can raise your hand does anyone here

8
00:00:14,280 --> 00:00:17,100
actually handle log4j during the

9
00:00:17,100 --> 00:00:20,340
incident or past incident

10
00:00:20,340 --> 00:00:23,160
okay that's a nice 50 percent

11
00:00:23,160 --> 00:00:25,199
so I'm going to share our experience

12
00:00:25,199 --> 00:00:26,939
I'll give a bit of background noise

13
00:00:26,939 --> 00:00:31,019
about myself and how we approach this uh

14
00:00:31,019 --> 00:00:34,079
I'll say problem but how we approach

15
00:00:34,079 --> 00:00:35,940
this incident and what we we've done

16
00:00:35,940 --> 00:00:37,800
with that later

17
00:00:37,800 --> 00:00:40,739
so when we started doing this talk

18
00:00:40,739 --> 00:00:42,840
building this talk my team and myself we

19
00:00:42,840 --> 00:00:44,219
thought about calling The Nightmare

20
00:00:44,219 --> 00:00:45,480
Before Christmas

21
00:00:45,480 --> 00:00:48,899
because that was basically log4j however

22
00:00:48,899 --> 00:00:51,180
we decided to talk more about the roller

23
00:00:51,180 --> 00:00:53,700
coaster theme for for me at least

24
00:00:53,700 --> 00:00:56,520
thinking back looking back at the look

25
00:00:56,520 --> 00:00:58,980
for J timeline it was a roller coaster

26
00:00:58,980 --> 00:01:00,960
of an event it started out something

27
00:01:00,960 --> 00:01:03,180
small grew to be something large we

28
00:01:03,180 --> 00:01:05,459
thought we had a cap on it then we had

29
00:01:05,459 --> 00:01:07,380
the new variant then we had to deploy

30
00:01:07,380 --> 00:01:09,240
more patches then we thought we were on

31
00:01:09,240 --> 00:01:10,860
top of it then we had another variant

32
00:01:10,860 --> 00:01:13,320
then we had to deploy more patches and

33
00:01:13,320 --> 00:01:15,540
it kind of it kind of got like a sinus

34
00:01:15,540 --> 00:01:17,460
wave we would do something we would wait

35
00:01:17,460 --> 00:01:18,900
a bit then we'll do something else we

36
00:01:18,900 --> 00:01:20,280
would wait a bit we'll do something else

37
00:01:20,280 --> 00:01:22,560
and the feeling of the emotional roller

38
00:01:22,560 --> 00:01:25,259
coaster was just there all the way

39
00:01:25,259 --> 00:01:27,900
so who am I uh my name is Guy Barnard

40
00:01:27,900 --> 00:01:30,799
from again I'm the CTO of a an incident

41
00:01:30,799 --> 00:01:33,960
response company called profero

42
00:01:33,960 --> 00:01:36,659
I'm also the one of the besides Tel Aviv

43
00:01:36,659 --> 00:01:39,360
co-organizers and chairman and also one

44
00:01:39,360 --> 00:01:41,240
of the organizers of the heck area

45
00:01:41,240 --> 00:01:44,220
organization so if you want to chat with

46
00:01:44,220 --> 00:01:46,680
me about any of these please step

47
00:01:46,680 --> 00:01:49,680
forward it'll be fun I also used to do a

48
00:01:49,680 --> 00:01:52,680
lot of public speaking before covid so

49
00:01:52,680 --> 00:01:55,380
maybe I'll come back to that or not and

50
00:01:55,380 --> 00:01:58,439
I've also I've been to 44con before so

51
00:01:58,439 --> 00:02:00,360
if you remember my talks from the

52
00:02:00,360 --> 00:02:03,439
previous two 44 cons

53
00:02:03,439 --> 00:02:05,460
that was me

54
00:02:05,460 --> 00:02:09,479
okay so log4j how it all began uh as an

55
00:02:09,479 --> 00:02:11,400
incidence response company we have a

56
00:02:11,400 --> 00:02:13,440
team sitting around the world and some

57
00:02:13,440 --> 00:02:15,120
of our team members sit in New Zealand

58
00:02:15,120 --> 00:02:18,000
and that was a Thursday night for them

59
00:02:18,000 --> 00:02:19,560
so we're talking about the New Zealand

60
00:02:19,560 --> 00:02:21,840
time frame and as Brenton one of our

61
00:02:21,840 --> 00:02:23,400
team members was just going to sleep

62
00:02:23,400 --> 00:02:25,560
some chatter started on Twitter that

63
00:02:25,560 --> 00:02:27,900
there's a a new hack coming out on

64
00:02:27,900 --> 00:02:30,540
Minecraft and he said look guys this is

65
00:02:30,540 --> 00:02:32,099
going to be interesting there's some

66
00:02:32,099 --> 00:02:34,620
interesting thing developing on Twitter

67
00:02:34,620 --> 00:02:36,780
take a look at it the next morning when

68
00:02:36,780 --> 00:02:39,540
you wake up which was fine we woke up

69
00:02:39,540 --> 00:02:42,360
and there we saw that there's a

70
00:02:42,360 --> 00:02:45,840
uh some Twitter discussions about a new

71
00:02:45,840 --> 00:02:48,540
hack of Minecraft servers we didn't see

72
00:02:48,540 --> 00:02:50,280
any cyber implications we didn't connect

73
00:02:50,280 --> 00:02:52,860
those dots and we said Okay Minecraft

74
00:02:52,860 --> 00:02:54,660
you know unless you actually have a

75
00:02:54,660 --> 00:02:56,220
Minecraft server running on a Raspberry

76
00:02:56,220 --> 00:02:58,260
Pi somewhere nobody really cares you're

77
00:02:58,260 --> 00:03:00,000
either running a very loud server and

78
00:03:00,000 --> 00:03:02,040
you already did some security or you're

79
00:03:02,040 --> 00:03:03,420
a hobbyist and you don't care about

80
00:03:03,420 --> 00:03:06,420
security so it didn't look important

81
00:03:06,420 --> 00:03:08,040
one bit

82
00:03:08,040 --> 00:03:09,360
however

83
00:03:09,360 --> 00:03:12,720
stuffing Bax I'll be in range

84
00:03:12,720 --> 00:03:16,140
so stepping back

85
00:03:16,140 --> 00:03:17,760
it wasn't fine

86
00:03:17,760 --> 00:03:21,659
by Friday morning our time we got the

87
00:03:21,659 --> 00:03:24,060
notice about the Minecraft hack being

88
00:03:24,060 --> 00:03:27,360
going Going On by Friday noon four or

89
00:03:27,360 --> 00:03:29,760
five hours later we already saw the

90
00:03:29,760 --> 00:03:32,760
first attacks based on log 4G

91
00:03:32,760 --> 00:03:35,819
so pocs sprung up actually they didn't

92
00:03:35,819 --> 00:03:38,519
really sprung sprung up immediately

93
00:03:38,519 --> 00:03:40,739
because of the vulnerability but because

94
00:03:40,739 --> 00:03:42,599
those POC already existed this

95
00:03:42,599 --> 00:03:44,700
vulnerability was not anything new it

96
00:03:44,700 --> 00:03:47,280
was actually in a talking black hat

97
00:03:47,280 --> 00:03:49,260
three years ago or four years ago

98
00:03:49,260 --> 00:03:51,060
something like that it was not a new

99
00:03:51,060 --> 00:03:53,340
vulnerability but somebody found out how

100
00:03:53,340 --> 00:03:55,019
to make use of that against Minecraft

101
00:03:55,019 --> 00:03:58,379
servers and get rce remote code

102
00:03:58,379 --> 00:04:00,659
execution on those Minecraft servers and

103
00:04:00,659 --> 00:04:02,159
he published a tweet about it and he

104
00:04:02,159 --> 00:04:04,379
showed his POC there were other pocs

105
00:04:04,379 --> 00:04:07,080
around so you know

106
00:04:07,080 --> 00:04:09,659
everything was on fire

107
00:04:09,659 --> 00:04:13,140
um the situation was that this kept

108
00:04:13,140 --> 00:04:17,399
happening so while we do uh get the

109
00:04:17,399 --> 00:04:20,160
feeling that you know uh log 4J is gone

110
00:04:20,160 --> 00:04:23,100
or has been that's not the reality so I

111
00:04:23,100 --> 00:04:24,960
collected a couple of Snippets just to

112
00:04:24,960 --> 00:04:27,180
show you that it still exists and we

113
00:04:27,180 --> 00:04:29,820
still see it and we still saw it months

114
00:04:29,820 --> 00:04:31,680
after the incident so we're talking

115
00:04:31,680 --> 00:04:33,960
about Christmas last year and we're

116
00:04:33,960 --> 00:04:36,660
still we still saw months into the new

117
00:04:36,660 --> 00:04:39,900
year uh log4j related incidents

118
00:04:39,900 --> 00:04:42,540
and they'll even say more than that

119
00:04:42,540 --> 00:04:44,759
this is from three days ago

120
00:04:44,759 --> 00:04:46,380
four days ago now

121
00:04:46,380 --> 00:04:49,400
so look for J based attacks still happen

122
00:04:49,400 --> 00:04:51,780
and for me that's interesting because

123
00:04:51,780 --> 00:04:54,600
patching log4j is the huge Monumental

124
00:04:54,600 --> 00:04:56,220
engineering task but it's something that

125
00:04:56,220 --> 00:04:57,840
should have been accomplished in the

126
00:04:57,840 --> 00:04:59,340
past I don't know where September now

127
00:04:59,340 --> 00:05:01,860
nine months that should have been enough

128
00:05:01,860 --> 00:05:05,520
time to patch log4j but the complexity

129
00:05:05,520 --> 00:05:07,440
of the problem which I'll describe in a

130
00:05:07,440 --> 00:05:10,440
moment actually makes it not as easy to

131
00:05:10,440 --> 00:05:12,840
solve as you might think

132
00:05:12,840 --> 00:05:15,540
so as I kind of hinted earlier it took

133
00:05:15,540 --> 00:05:18,060
us a while to connect the dots

134
00:05:18,060 --> 00:05:20,400
so let's talk about day zero day Zero

135
00:05:20,400 --> 00:05:25,080
for us is uh uh Thursday uh afternoon uh

136
00:05:25,080 --> 00:05:27,360
some Twitter attacking some Twitter

137
00:05:27,360 --> 00:05:30,419
thread on uh Minecraft attacks but we

138
00:05:30,419 --> 00:05:32,940
haven't seen anything cyber related per

139
00:05:32,940 --> 00:05:33,840
se

140
00:05:33,840 --> 00:05:36,060
however on day one

141
00:05:36,060 --> 00:05:39,060
by noon of Friday we already saw coin

142
00:05:39,060 --> 00:05:41,180
miners attack attacks specifically

143
00:05:41,180 --> 00:05:44,580
smring about but we saw coin Miner tax

144
00:05:44,580 --> 00:05:47,160
on our customer service coin miners

145
00:05:47,160 --> 00:05:49,080
attacks are very interesting in that

146
00:05:49,080 --> 00:05:51,539
respect where the way that those attacks

147
00:05:51,539 --> 00:05:53,160
work is that all of the infrastructure

148
00:05:53,160 --> 00:05:55,259
is usually already prepared ahead of

149
00:05:55,259 --> 00:05:57,180
time so you have the payloads you have

150
00:05:57,180 --> 00:05:59,400
the droppers you have the CNC and

151
00:05:59,400 --> 00:06:00,720
everything's just waiting for an attack

152
00:06:00,720 --> 00:06:02,820
Vector to go and take control of some

153
00:06:02,820 --> 00:06:05,220
machines so once a new vulnerability is

154
00:06:05,220 --> 00:06:08,280
exposed they quickly uh modify it or

155
00:06:08,280 --> 00:06:09,840
take advantage of it in order to

156
00:06:09,840 --> 00:06:11,940
introduce that Threat Vector into those

157
00:06:11,940 --> 00:06:13,500
machines and then they have everything

158
00:06:13,500 --> 00:06:16,400
else already prepared so they went from

159
00:06:16,400 --> 00:06:20,220
uh someone on Twitter saying there's a

160
00:06:20,220 --> 00:06:22,919
log4j thing going on to having control

161
00:06:22,919 --> 00:06:25,020
of servers with coin miners running on

162
00:06:25,020 --> 00:06:27,660
those servers in about 12 hours

163
00:06:27,660 --> 00:06:29,699
and they probably did it faster than

164
00:06:29,699 --> 00:06:33,259
that we detected it at 12 hours

165
00:06:35,819 --> 00:06:37,880
um

166
00:06:38,220 --> 00:06:40,259
the way that we discovered it was

167
00:06:40,259 --> 00:06:42,780
actually log4j related is that we saw a

168
00:06:42,780 --> 00:06:44,520
coin Miner incident but we didn't find

169
00:06:44,520 --> 00:06:46,620
the attack Vector we didn't see the the

170
00:06:46,620 --> 00:06:48,660
point of entry so we started looking at

171
00:06:48,660 --> 00:06:51,539
logs and when we looked at the logs it

172
00:06:51,539 --> 00:06:53,039
really stood out to us that there is a

173
00:06:53,039 --> 00:06:55,380
payload that didn't look like it

174
00:06:55,380 --> 00:06:57,360
belonged there and because we saw the

175
00:06:57,360 --> 00:06:59,940
payload the day before for log4j it's

176
00:06:59,940 --> 00:07:02,280
like things clicked we said okay this is

177
00:07:02,280 --> 00:07:04,680
actually the payload for log4j in the

178
00:07:04,680 --> 00:07:07,500
coin Miner attack so we knew it was the

179
00:07:07,500 --> 00:07:10,940
uh it was using the log4j

180
00:07:10,940 --> 00:07:13,380
semantics in order to perform their

181
00:07:13,380 --> 00:07:15,479
attack vector

182
00:07:15,479 --> 00:07:17,880
as I said it was not a new exploit they

183
00:07:17,880 --> 00:07:19,919
just took advantage of an existing

184
00:07:19,919 --> 00:07:22,500
infrastructure with a new entry a point

185
00:07:22,500 --> 00:07:24,000
of entry or a new method to take

186
00:07:24,000 --> 00:07:25,979
advantage however attacks were not

187
00:07:25,979 --> 00:07:27,960
limited to coin Miners And as time

188
00:07:27,960 --> 00:07:30,300
progressed we saw attacks shift to other

189
00:07:30,300 --> 00:07:32,639
parts of the attack industry so coin

190
00:07:32,639 --> 00:07:34,139
miners were pretty fast but they're not

191
00:07:34,139 --> 00:07:36,680
the only ones

192
00:07:36,720 --> 00:07:40,319
so day one plus plus which means the

193
00:07:40,319 --> 00:07:43,199
second third fifth 10 days into it we

194
00:07:43,199 --> 00:07:46,199
saw a lot of other types of attacks we

195
00:07:46,199 --> 00:07:48,120
came in to help with a new customer as

196
00:07:48,120 --> 00:07:49,979
an internet response company we either

197
00:07:49,979 --> 00:07:51,780
have customers coming into us when they

198
00:07:51,780 --> 00:07:53,340
have an issue or when they know they

199
00:07:53,340 --> 00:07:54,539
were going to have an issue in the

200
00:07:54,539 --> 00:07:56,520
future and want us to help them prepare

201
00:07:56,520 --> 00:07:58,800
so in this case it was someone actually

202
00:07:58,800 --> 00:08:00,780
suffering from a breach

203
00:08:00,780 --> 00:08:02,940
and they knew that the attack was locked

204
00:08:02,940 --> 00:08:04,979
for J and the reason for that they used

205
00:08:04,979 --> 00:08:07,259
our tool which I'll mention in uh in a

206
00:08:07,259 --> 00:08:08,699
moment and they knew that they were

207
00:08:08,699 --> 00:08:11,099
vulnerable to log4j so they're already

208
00:08:11,099 --> 00:08:13,080
aware that this type of attack is

209
00:08:13,080 --> 00:08:15,000
possible and they're already looking for

210
00:08:15,000 --> 00:08:17,220
signs are they being breached by lock 4G

211
00:08:17,220 --> 00:08:19,020
or not but they did not have any type of

212
00:08:19,020 --> 00:08:21,060
mitigation against it

213
00:08:21,060 --> 00:08:25,740
so those uh vendor appliances that they

214
00:08:25,740 --> 00:08:28,919
were using did not have patches released

215
00:08:28,919 --> 00:08:30,720
by those vendors so even though

216
00:08:30,720 --> 00:08:33,479
everybody was like having a spotlight on

217
00:08:33,479 --> 00:08:35,279
the problem everybody was aware that

218
00:08:35,279 --> 00:08:37,200
log4j is going to be used by attackers

219
00:08:37,200 --> 00:08:41,039
we had like a 48 Hour start a head start

220
00:08:41,039 --> 00:08:43,320
before attacks would begin

221
00:08:43,320 --> 00:08:45,540
still there are no patches and attacks

222
00:08:45,540 --> 00:08:47,100
were successful even though everybody

223
00:08:47,100 --> 00:08:48,899
was looking at the logs and seeing those

224
00:08:48,899 --> 00:08:50,940
attacks happen

225
00:08:50,940 --> 00:08:53,459
so let me digress for a moment and

226
00:08:53,459 --> 00:08:55,680
explain what the hell is log4j

227
00:08:55,680 --> 00:08:58,200
so a bit of a hand wavy explanation if

228
00:08:58,200 --> 00:08:59,580
you want to have a deeper explanation

229
00:08:59,580 --> 00:09:01,440
I'll be available after the talk but

230
00:09:01,440 --> 00:09:03,720
hand wavy thing think about logs

231
00:09:03,720 --> 00:09:05,760
basically what are logs these are text

232
00:09:05,760 --> 00:09:08,279
messages that have some sort of

233
00:09:08,279 --> 00:09:09,959
structure sometimes they are well

234
00:09:09,959 --> 00:09:12,959
structured like Json based logs and

235
00:09:12,959 --> 00:09:14,399
sometimes they are not structured at all

236
00:09:14,399 --> 00:09:18,600
where you have like a text line printed

237
00:09:18,600 --> 00:09:21,120
out to STD out by some application

238
00:09:21,120 --> 00:09:23,220
look for J as the Java based login

239
00:09:23,220 --> 00:09:25,380
Library tries to give additional

240
00:09:25,380 --> 00:09:27,540
information and additional inputs to the

241
00:09:27,540 --> 00:09:30,899
user of the library they will identify

242
00:09:30,899 --> 00:09:33,660
specific tags or specific tokens in the

243
00:09:33,660 --> 00:09:36,300
text and they will help the user or

244
00:09:36,300 --> 00:09:39,000
whoever is the user of those logs to get

245
00:09:39,000 --> 00:09:40,680
additional information what we call

246
00:09:40,680 --> 00:09:43,320
enrichment for example if the log line

247
00:09:43,320 --> 00:09:45,720
has the user ID some integer describing

248
00:09:45,720 --> 00:09:48,060
a user ID in the system the log4j

249
00:09:48,060 --> 00:09:51,420
library will go and replace that user ID

250
00:09:51,420 --> 00:09:53,940
with the username by performing an ldap

251
00:09:53,940 --> 00:09:56,339
query the end result of it would be logs

252
00:09:56,339 --> 00:09:57,779
that make more sense to hover is

253
00:09:57,779 --> 00:09:59,640
managing those logs so it's a benefit

254
00:09:59,640 --> 00:10:01,740
it's not something bad

255
00:10:01,740 --> 00:10:04,140
yeah and those type of enrichments

256
00:10:04,140 --> 00:10:06,480
really help out when you're trying to

257
00:10:06,480 --> 00:10:08,399
move from an unstructured set of data

258
00:10:08,399 --> 00:10:10,260
into a structured set that makes sense

259
00:10:10,260 --> 00:10:11,760
when we're trying to look at the logs

260
00:10:11,760 --> 00:10:14,399
and understand what they do

261
00:10:14,399 --> 00:10:18,480
however there has most large-scale

262
00:10:18,480 --> 00:10:21,899
systems go there are complications for

263
00:10:21,899 --> 00:10:24,480
example uh think about this pipeline

264
00:10:24,480 --> 00:10:26,339
maybe this will work I'm not I'm not

265
00:10:26,339 --> 00:10:28,279
sure

266
00:10:28,279 --> 00:10:33,060
no it doesn't Okay so attackers Supply

267
00:10:33,060 --> 00:10:35,160
some attacker controlled input into the

268
00:10:35,160 --> 00:10:36,779
website there's some form there's some

269
00:10:36,779 --> 00:10:38,820
API query whatever so some input

270
00:10:38,820 --> 00:10:41,160
controlled by the attacker the API

271
00:10:41,160 --> 00:10:42,720
captures that and writes that to the log

272
00:10:42,720 --> 00:10:45,240
file the log file itself is not runnable

273
00:10:45,240 --> 00:10:46,620
it's a text file there's nothing

274
00:10:46,620 --> 00:10:49,200
vulnerable in it however those log files

275
00:10:49,200 --> 00:10:50,760
go through another system the log

276
00:10:50,760 --> 00:10:53,519
enrichment system that will go and try

277
00:10:53,519 --> 00:10:56,279
to replace specific sets of data with

278
00:10:56,279 --> 00:10:58,920
some external Source data like an ldap

279
00:10:58,920 --> 00:11:01,920
query or a DNS query or something else

280
00:11:01,920 --> 00:11:05,279
however uh and to finish the pipeline

281
00:11:05,279 --> 00:11:07,260
after enrichment it would store that

282
00:11:07,260 --> 00:11:10,140
data in something a database a data

283
00:11:10,140 --> 00:11:12,540
store an S3 bucket whatever

284
00:11:12,540 --> 00:11:14,760
the interesting part is that between the

285
00:11:14,760 --> 00:11:16,860
block here that says log capture and the

286
00:11:16,860 --> 00:11:19,560
block that says log enrichment hours can

287
00:11:19,560 --> 00:11:22,500
pass in large scale systems you write a

288
00:11:22,500 --> 00:11:24,720
lot of logs and you collect them in bulk

289
00:11:24,720 --> 00:11:26,640
and make operations in bulk you don't

290
00:11:26,640 --> 00:11:29,519
act on each single line in the log you

291
00:11:29,519 --> 00:11:31,560
collect them and work at scale

292
00:11:31,560 --> 00:11:34,079
the ramification of this is that the

293
00:11:34,079 --> 00:11:36,180
log4j library doesn't sit here in log

294
00:11:36,180 --> 00:11:37,920
capture it actually sits in log

295
00:11:37,920 --> 00:11:39,959
enrichment and that means that there is

296
00:11:39,959 --> 00:11:41,940
a discrepancy between the time that you

297
00:11:41,940 --> 00:11:44,240
see the log coming in over your API

298
00:11:44,240 --> 00:11:47,940
12000 am versus the time it was actually

299
00:11:47,940 --> 00:11:50,399
ingested by the library and the remote

300
00:11:50,399 --> 00:11:52,740
code execution was executed which may be

301
00:11:52,740 --> 00:11:55,440
maybe hours later depending on the way

302
00:11:55,440 --> 00:11:57,720
that your pipeline is structured this is

303
00:11:57,720 --> 00:12:00,720
a big hurdle for investigations because

304
00:12:00,720 --> 00:12:02,459
there is a disconnect between when

305
00:12:02,459 --> 00:12:03,720
you're looking at the event in the log

306
00:12:03,720 --> 00:12:05,279
and whether actually the incident

307
00:12:05,279 --> 00:12:07,500
happens so it's very tough to tie those

308
00:12:07,500 --> 00:12:10,140
two timelines to the other

309
00:12:10,140 --> 00:12:14,339
so the problem was that okay we know

310
00:12:14,339 --> 00:12:17,160
that log 4J is the issue we know it's a

311
00:12:17,160 --> 00:12:19,500
software Library therefore we need to

312
00:12:19,500 --> 00:12:22,320
find the places where we are using log4j

313
00:12:22,320 --> 00:12:23,459
sounds easy

314
00:12:23,459 --> 00:12:24,779
it isn't

315
00:12:24,779 --> 00:12:27,540
so I'll try to explain why

316
00:12:27,540 --> 00:12:29,660
problem statement we want to find

317
00:12:29,660 --> 00:12:32,240
anywhere in our system in our Network

318
00:12:32,240 --> 00:12:35,279
all different machines that are using

319
00:12:35,279 --> 00:12:38,519
log4j in versions that are vulnerable to

320
00:12:38,519 --> 00:12:40,399
these types of attacks sounds sounds

321
00:12:40,399 --> 00:12:43,440
straightforward however

322
00:12:43,440 --> 00:12:45,540
how would you know if someone is using

323
00:12:45,540 --> 00:12:48,120
the log4j library this is not like

324
00:12:48,120 --> 00:12:49,980
someone using a virtual machine that you

325
00:12:49,980 --> 00:12:52,019
spun up in your system this is a library

326
00:12:52,019 --> 00:12:54,959
dependency usually loaded at as needed

327
00:12:54,959 --> 00:12:58,139
by the Java runtime so the problem is

328
00:12:58,139 --> 00:13:00,060
much more complex than that you have to

329
00:13:00,060 --> 00:13:01,980
find anything running Java on your

330
00:13:01,980 --> 00:13:03,000
system

331
00:13:03,000 --> 00:13:04,920
anything running Java that actually

332
00:13:04,920 --> 00:13:07,260
calls this library and actually makes

333
00:13:07,260 --> 00:13:09,660
use of that library and all and you need

334
00:13:09,660 --> 00:13:11,579
to do all of that both for your own code

335
00:13:11,579 --> 00:13:13,920
which is easy or relatively easy but

336
00:13:13,920 --> 00:13:15,899
also to any code used by any kind of

337
00:13:15,899 --> 00:13:17,220
appliance that you might have on the

338
00:13:17,220 --> 00:13:19,019
network where you have no access to the

339
00:13:19,019 --> 00:13:20,639
code and usually no access to the

340
00:13:20,639 --> 00:13:23,540
processes themselves

341
00:13:23,820 --> 00:13:28,139
vendors were between I don't know slow

342
00:13:28,139 --> 00:13:31,019
to extremely slow to respond so I'll

343
00:13:31,019 --> 00:13:33,899
refresh memories uh people reached out

344
00:13:33,899 --> 00:13:35,459
to their vendors asking them are you

345
00:13:35,459 --> 00:13:37,139
vulnerable to lock for Jay and the

346
00:13:37,139 --> 00:13:39,779
vendors will go uh I don't know uh I'll

347
00:13:39,779 --> 00:13:42,300
check uh I'm not sure and then people

348
00:13:42,300 --> 00:13:44,399
started sharing over GitHub there were

349
00:13:44,399 --> 00:13:46,380
big lists in GitHub about different

350
00:13:46,380 --> 00:13:49,019
appliances I don't know firewall version

351
00:13:49,019 --> 00:13:53,880
is it vulnerable or not uh uh a DPI

352
00:13:53,880 --> 00:13:55,620
solution is it vulnerable or not version

353
00:13:55,620 --> 00:13:58,320
so you would have this huge list in git

354
00:13:58,320 --> 00:14:00,360
in GitHub and you will go and search for

355
00:14:00,360 --> 00:14:02,820
your appliances in GitHub to from

356
00:14:02,820 --> 00:14:04,860
information shared by the community is

357
00:14:04,860 --> 00:14:06,600
that vulnerable or not because you were

358
00:14:06,600 --> 00:14:08,399
not able to get any answers from the

359
00:14:08,399 --> 00:14:10,019
vendors and I'll touch on that point

360
00:14:10,019 --> 00:14:12,839
again in a moment

361
00:14:12,839 --> 00:14:15,060
the last thing that made it so difficult

362
00:14:15,060 --> 00:14:17,820
was that you know there's the joke that

363
00:14:17,820 --> 00:14:19,320
Oracle made at the time the three

364
00:14:19,320 --> 00:14:21,480
billion devices run Java it's actually

365
00:14:21,480 --> 00:14:23,639
quite true a lot of devices run Java

366
00:14:23,639 --> 00:14:26,040
everything runs Java somewhere finding

367
00:14:26,040 --> 00:14:28,620
out who runs Java in your environment

368
00:14:28,620 --> 00:14:30,779
and which version of java is running and

369
00:14:30,779 --> 00:14:33,300
did he or did it did it or did it not

370
00:14:33,300 --> 00:14:36,720
load a log4j library that makes it a

371
00:14:36,720 --> 00:14:40,459
very difficult problem to solve

372
00:14:40,500 --> 00:14:42,720
so think about the the scope of the

373
00:14:42,720 --> 00:14:44,639
problem that you need to find you need

374
00:14:44,639 --> 00:14:46,680
to cover any kind of internal or

375
00:14:46,680 --> 00:14:48,899
third-party code that you may use you

376
00:14:48,899 --> 00:14:52,440
might not use any log4j code yourself

377
00:14:52,440 --> 00:14:54,420
but you might be dependent on some

378
00:14:54,420 --> 00:14:56,880
library that is dependent on log4j or

379
00:14:56,880 --> 00:14:58,920
maybe three times removed or four times

380
00:14:58,920 --> 00:15:01,620
removed log4j is such a popular library

381
00:15:01,620 --> 00:15:03,660
that if you're a developer writing

382
00:15:03,660 --> 00:15:06,300
anything in Java there's over 95 chance

383
00:15:06,300 --> 00:15:08,459
that you are going to use log4j

384
00:15:08,459 --> 00:15:10,920
so let that sink for a moment everybody

385
00:15:10,920 --> 00:15:13,920
who uses Java uses log4j is like a

386
00:15:13,920 --> 00:15:16,099
synonym

387
00:15:16,260 --> 00:15:18,959
um trying to understand what type of

388
00:15:18,959 --> 00:15:20,940
appliances that you have or cloud

389
00:15:20,940 --> 00:15:23,399
services that you have you are using or

390
00:15:23,399 --> 00:15:25,740
even Cloud instances that you spun up

391
00:15:25,740 --> 00:15:28,380
are using log4j is also a big problem

392
00:15:28,380 --> 00:15:30,720
they don't come with an s-bomb you have

393
00:15:30,720 --> 00:15:33,660
your favorite uh I don't know I'll give

394
00:15:33,660 --> 00:15:35,279
an example probably it's not true but

395
00:15:35,279 --> 00:15:38,339
I'll just say it as an example uh Adobe

396
00:15:38,339 --> 00:15:40,680
made an offer to buy figma for 20

397
00:15:40,680 --> 00:15:42,839
billion dollars maybe figma is using log

398
00:15:42,839 --> 00:15:45,060
4G do you have any idea if it's even

399
00:15:45,060 --> 00:15:47,220
running on Java you just have a web API

400
00:15:47,220 --> 00:15:48,600
you have no idea what's happening behind

401
00:15:48,600 --> 00:15:50,579
the scenes it might be vulnerable you

402
00:15:50,579 --> 00:15:52,800
will not know

403
00:15:52,800 --> 00:15:55,320
um and in the end you you own your own

404
00:15:55,320 --> 00:15:58,500
network to some degree your own cloud to

405
00:15:58,500 --> 00:16:00,779
a somewhat less degree you own your SAS

406
00:16:00,779 --> 00:16:03,779
uh connections to whatever and you worry

407
00:16:03,779 --> 00:16:05,279
about all of them because all of them

408
00:16:05,279 --> 00:16:08,180
may be compromised

409
00:16:08,519 --> 00:16:12,060
so obviously people were looking uh for

410
00:16:12,060 --> 00:16:15,959
tools what can they do in order to uh um

411
00:16:15,959 --> 00:16:18,959
mitigate this or even detect this if not

412
00:16:18,959 --> 00:16:20,820
mitigate this at least be aware of where

413
00:16:20,820 --> 00:16:24,779
the problem is and they opened uh they

414
00:16:24,779 --> 00:16:26,699
they went to they're looking for open

415
00:16:26,699 --> 00:16:28,620
source solution which is what most

416
00:16:28,620 --> 00:16:30,120
reasonable people will do when they

417
00:16:30,120 --> 00:16:32,040
don't get answers from anyone they will

418
00:16:32,040 --> 00:16:33,480
say I'll take the matter to my own hands

419
00:16:33,480 --> 00:16:35,040
and I'll scan my own network

420
00:16:35,040 --> 00:16:36,540
which is fine

421
00:16:36,540 --> 00:16:39,480
so the first open source that we saw on

422
00:16:39,480 --> 00:16:41,399
the scene and this is was Saturday

423
00:16:41,399 --> 00:16:43,680
morning so we are now at plus 24 hours

424
00:16:43,680 --> 00:16:47,579
more or less uh was a very nice tool and

425
00:16:47,579 --> 00:16:49,320
we did an evaluation of it we did a code

426
00:16:49,320 --> 00:16:51,899
review of it to see what exactly does it

427
00:16:51,899 --> 00:16:54,839
do and the algorithm or the concept was

428
00:16:54,839 --> 00:16:57,839
pretty straightforward uh the binary

429
00:16:57,839 --> 00:17:01,800
would send an HTTP packet to a server to

430
00:17:01,800 --> 00:17:04,260
whatever you tell the IP and port and in

431
00:17:04,260 --> 00:17:07,140
that payload it would say log4j please

432
00:17:07,140 --> 00:17:10,140
resolve this fq to n into an IP address

433
00:17:10,140 --> 00:17:12,720
for me and write the IP address into the

434
00:17:12,720 --> 00:17:15,419
log file pretty straightforward behind

435
00:17:15,419 --> 00:17:18,480
the scene the DNS registrar will be

436
00:17:18,480 --> 00:17:21,059
looking for anyone trying to do fqdn

437
00:17:21,059 --> 00:17:23,220
resolutions for that specific address

438
00:17:23,220 --> 00:17:26,459
like a canary DNS token so they would

439
00:17:26,459 --> 00:17:29,220
write down into a file saying someone

440
00:17:29,220 --> 00:17:30,960
reached out to me this is the IP address

441
00:17:30,960 --> 00:17:32,340
this is the name of the host whatever

442
00:17:32,340 --> 00:17:34,799
thing headers were in the HTTP request

443
00:17:34,799 --> 00:17:37,919
it asked to resolve the DNS request it

444
00:17:37,919 --> 00:17:40,140
has to resolve this fqdn and I gave him

445
00:17:40,140 --> 00:17:41,820
back this IP address therefore it is

446
00:17:41,820 --> 00:17:44,039
vulnerable to log4j

447
00:17:44,039 --> 00:17:46,860
so sounds straightforward sounds good it

448
00:17:46,860 --> 00:17:49,500
might work it actually does work so

449
00:17:49,500 --> 00:17:50,580
where's the problem

450
00:17:50,580 --> 00:17:53,039
so the first problem was that the DNS

451
00:17:53,039 --> 00:17:54,480
was sitting in China

452
00:17:54,480 --> 00:17:56,280
the second problem probably a bit bigger

453
00:17:56,280 --> 00:17:57,480
than the fact that it was sitting in

454
00:17:57,480 --> 00:18:00,179
China was that you basically handed over

455
00:18:00,179 --> 00:18:03,360
to some arbitrary entity in China a list

456
00:18:03,360 --> 00:18:04,980
of all of your internal vulnerable

457
00:18:04,980 --> 00:18:06,480
servers

458
00:18:06,480 --> 00:18:09,000
and when we told that to our customers

459
00:18:09,000 --> 00:18:11,100
they say oh no no no we're not going to

460
00:18:11,100 --> 00:18:12,900
use that tool and I think that as soon

461
00:18:12,900 --> 00:18:14,580
as people realize what that tool is

462
00:18:14,580 --> 00:18:16,679
doing they stopped using that tool as

463
00:18:16,679 --> 00:18:18,840
well but they didn't have any other

464
00:18:18,840 --> 00:18:21,480
solution instead so you still the only

465
00:18:21,480 --> 00:18:24,059
option of the table at that time at that

466
00:18:24,059 --> 00:18:25,860
point on the timeline was either use

467
00:18:25,860 --> 00:18:28,860
some unknown DNS register in China to

468
00:18:28,860 --> 00:18:30,120
try to understand if you're vulnerable

469
00:18:30,120 --> 00:18:33,419
or not or wait

470
00:18:33,419 --> 00:18:35,640
so we decided that we are going to do

471
00:18:35,640 --> 00:18:38,100
something else so we took a different

472
00:18:38,100 --> 00:18:39,840
approach we thought we are going to

473
00:18:39,840 --> 00:18:41,940
write an internal tool based on the nmap

474
00:18:41,940 --> 00:18:44,820
same kind of methodology give me a cidr

475
00:18:44,820 --> 00:18:47,820
and a range of IP addresses I'll scan

476
00:18:47,820 --> 00:18:50,039
all of that for specific parts I'll try

477
00:18:50,039 --> 00:18:51,720
to Ping each and every specific port

478
00:18:51,720 --> 00:18:54,780
with a payload that asks to call back to

479
00:18:54,780 --> 00:18:57,780
my own binary and if someone opens a TCP

480
00:18:57,780 --> 00:19:00,360
TCP socket against my own binary I'll

481
00:19:00,360 --> 00:19:01,919
write it down in a CSV file and I'll

482
00:19:01,919 --> 00:19:04,140
give you an end result saying these are

483
00:19:04,140 --> 00:19:05,880
the lists of all of the Callback

484
00:19:05,880 --> 00:19:08,220
addresses that try to open a TCP socket

485
00:19:08,220 --> 00:19:12,539
against my log4j scanner sounds good it

486
00:19:12,539 --> 00:19:13,380
wasn't

487
00:19:13,380 --> 00:19:16,080
so the problem was that we found out

488
00:19:16,080 --> 00:19:18,120
that inside the network there are a lot

489
00:19:18,120 --> 00:19:20,640
of other items scanning the network and

490
00:19:20,640 --> 00:19:22,140
you would see like random TCP

491
00:19:22,140 --> 00:19:24,000
connections being made even when we are

492
00:19:24,000 --> 00:19:25,740
not scanning anything so we knew we

493
00:19:25,740 --> 00:19:29,100
didn't give some 100 uh correct answer

494
00:19:29,100 --> 00:19:31,140
there are lots of noise that we had to

495
00:19:31,140 --> 00:19:33,360
clear out somehow so we released the

496
00:19:33,360 --> 00:19:36,020
first version of the tool on Sunday

497
00:19:36,020 --> 00:19:39,059
sorry first version on tune on Sunday

498
00:19:39,059 --> 00:19:42,000
and on Tuesday I think morning or lunch

499
00:19:42,000 --> 00:19:43,740
something like that we released the

500
00:19:43,740 --> 00:19:45,120
second version the second version was a

501
00:19:45,120 --> 00:19:47,760
bit more complex we actually implemented

502
00:19:47,760 --> 00:19:50,880
a neutered ldap server so just the first

503
00:19:50,880 --> 00:19:53,220
part of the ldap handshake in the binary

504
00:19:53,220 --> 00:19:55,500
so the binary would send payloads to

505
00:19:55,500 --> 00:19:57,720
whatever IP address it was scanning the

506
00:19:57,720 --> 00:20:00,600
payload would have a a request for a log

507
00:20:00,600 --> 00:20:03,960
for J library to do an ldap resolution

508
00:20:03,960 --> 00:20:06,539
to a specific user ID our binary was

509
00:20:06,539 --> 00:20:08,460
also an ldap server it would get a

510
00:20:08,460 --> 00:20:09,960
callback from whatever server was one

511
00:20:09,960 --> 00:20:12,419
word to log for J trying to do an ldot

512
00:20:12,419 --> 00:20:15,120
query we didn't actually implementalda

513
00:20:15,120 --> 00:20:16,799
we just took the handshake and we wrote

514
00:20:16,799 --> 00:20:19,140
down the demo and the the IP address and

515
00:20:19,140 --> 00:20:20,580
the port of the server trying to do this

516
00:20:20,580 --> 00:20:24,200
so now we have a full 100

517
00:20:24,200 --> 00:20:26,880
foolproof way to know this a specific

518
00:20:26,880 --> 00:20:29,280
server was actually vulnerable to log4j

519
00:20:29,280 --> 00:20:31,500
because we were not actually a load up

520
00:20:31,500 --> 00:20:33,059
server no one was actually reaching out

521
00:20:33,059 --> 00:20:35,160
to us to do an elder pancheck unless it

522
00:20:35,160 --> 00:20:36,600
came from an unlock for vulnerable

523
00:20:36,600 --> 00:20:39,080
Library

524
00:20:40,020 --> 00:20:42,720
the benefit that we had was that

525
00:20:42,720 --> 00:20:45,059
everything was running locally so we

526
00:20:45,059 --> 00:20:46,440
wrote everything in go it was course

527
00:20:46,440 --> 00:20:48,960
compiled for Linux and for Windows and

528
00:20:48,960 --> 00:20:51,960
for Mac even Chromebooks and you could

529
00:20:51,960 --> 00:20:53,460
run everything locally on your machine

530
00:20:53,460 --> 00:20:55,679
on your network you can also run it in

531
00:20:55,679 --> 00:20:57,720
parallel when you have huge Scopes when

532
00:20:57,720 --> 00:21:00,059
you have a lot of IP addresses and each

533
00:21:00,059 --> 00:21:02,340
one would get a specific subnet and scan

534
00:21:02,340 --> 00:21:04,860
the entire subnet and we did like 16

535
00:21:04,860 --> 00:21:07,080
addresses in like two hours

536
00:21:07,080 --> 00:21:10,020
so it was very efficient for our

537
00:21:10,020 --> 00:21:12,360
customers to use that and again for

538
00:21:12,360 --> 00:21:13,860
others we released that as an open

539
00:21:13,860 --> 00:21:15,960
source so

540
00:21:15,960 --> 00:21:18,539
uh just to Showcase kind of what it

541
00:21:18,539 --> 00:21:21,179
looked like we gave us an input a range

542
00:21:21,179 --> 00:21:24,240
of IP addresses and ports it will try uh

543
00:21:24,240 --> 00:21:26,580
to reach out to those addresses for each

544
00:21:26,580 --> 00:21:29,280
address that actually answered the the

545
00:21:29,280 --> 00:21:33,059
HTTP request we would send a payload so

546
00:21:33,059 --> 00:21:36,000
first step HTTP handshake Second Step a

547
00:21:36,000 --> 00:21:38,940
log4j payload third step weight patient

548
00:21:38,940 --> 00:21:40,980
printing someone calls you back

549
00:21:40,980 --> 00:21:43,440
notice that there is a problem here the

550
00:21:43,440 --> 00:21:45,480
moment that I send the HTTP payload to

551
00:21:45,480 --> 00:21:47,100
be written into the log file I get back

552
00:21:47,100 --> 00:21:49,559
a status 200. it means that the

553
00:21:49,559 --> 00:21:51,900
connected HTTP connection is over but

554
00:21:51,900 --> 00:21:54,179
the Callback might come back in 30

555
00:21:54,179 --> 00:21:55,799
seconds it might come back in three

556
00:21:55,799 --> 00:21:57,240
hours

557
00:21:57,240 --> 00:21:59,460
so the part of the system that needs to

558
00:21:59,460 --> 00:22:01,620
listen for any incoming callback is

559
00:22:01,620 --> 00:22:03,539
disconnected from the part of the system

560
00:22:03,539 --> 00:22:06,840
needs to send out requests so that is

561
00:22:06,840 --> 00:22:07,980
something to keep in mind whenever

562
00:22:07,980 --> 00:22:09,480
you're trying to scan for log4j because

563
00:22:09,480 --> 00:22:11,460
system might be disconnected exactly

564
00:22:11,460 --> 00:22:13,140
because of that pipeline issue that I

565
00:22:13,140 --> 00:22:15,600
described earlier

566
00:22:15,600 --> 00:22:18,000
so I'll skip it um

567
00:22:18,000 --> 00:22:19,740
real example

568
00:22:19,740 --> 00:22:20,340
um

569
00:22:20,340 --> 00:22:22,440
we ran a scanning on a customer's

570
00:22:22,440 --> 00:22:24,840
Network and we got back answers from an

571
00:22:24,840 --> 00:22:26,760
IP address that belonged to some vendor

572
00:22:26,760 --> 00:22:28,980
Appliance thing about that you have a

573
00:22:28,980 --> 00:22:30,720
data center some people still have

574
00:22:30,720 --> 00:22:33,120
on-premise data centers probably quite a

575
00:22:33,120 --> 00:22:35,100
few of them and they bought an appliance

576
00:22:35,100 --> 00:22:37,200
plugged it into the wall and we scanned

577
00:22:37,200 --> 00:22:39,000
it and reach it through the network and

578
00:22:39,000 --> 00:22:42,000
when we scanned it we got a callback so

579
00:22:42,000 --> 00:22:44,400
we know that it's vulnerable so it's not

580
00:22:44,400 --> 00:22:46,620
a guess it's not like we think it might

581
00:22:46,620 --> 00:22:47,820
be vulnerable to some version of

582
00:22:47,820 --> 00:22:49,140
Lockwood no no it's specifically

583
00:22:49,140 --> 00:22:51,360
vulnerable to log4j here is the payload

584
00:22:51,360 --> 00:22:52,679
here's the response we know it's

585
00:22:52,679 --> 00:22:54,720
vulnerable it's a true positive

586
00:22:54,720 --> 00:22:56,880
so the customer reached out to the

587
00:22:56,880 --> 00:23:01,860
vendor and the vendor went silent

588
00:23:01,860 --> 00:23:04,500
so we contacted the vendor and saying

589
00:23:04,500 --> 00:23:07,080
look I don't know why you're uh dragging

590
00:23:07,080 --> 00:23:09,120
your feet around this but this is a real

591
00:23:09,120 --> 00:23:11,280
scenario we actually tested this it

592
00:23:11,280 --> 00:23:13,440
actually works this is not the time to

593
00:23:13,440 --> 00:23:15,659
wait 90 days for disclosure you need to

594
00:23:15,659 --> 00:23:19,200
release a patch now and again silence

595
00:23:19,200 --> 00:23:22,620
so we followed up a couple of days later

596
00:23:22,620 --> 00:23:24,419
and asked what was going on why aren't

597
00:23:24,419 --> 00:23:27,240
you moving and they said look I'll be

598
00:23:27,240 --> 00:23:29,640
completely honest with you we we know we

599
00:23:29,640 --> 00:23:31,559
are vulnerable we ran your payload it

600
00:23:31,559 --> 00:23:34,440
works we are vulnerable but getting a

601
00:23:34,440 --> 00:23:36,960
patch through the QA cycle for the

602
00:23:36,960 --> 00:23:38,820
developers like everything else takes a

603
00:23:38,820 --> 00:23:40,740
lot of time we can't just patch and

604
00:23:40,740 --> 00:23:42,659
release a hotfix for this

605
00:23:42,659 --> 00:23:45,000
which was a bit weird in my opinion

606
00:23:45,000 --> 00:23:46,440
because I think there are ways to do a

607
00:23:46,440 --> 00:23:48,720
hotfix if needed but for them it was

608
00:23:48,720 --> 00:23:51,179
like never unheard of they can do a

609
00:23:51,179 --> 00:23:52,140
hotfix

610
00:23:52,140 --> 00:23:54,780
so it took them over uh I think it was

611
00:23:54,780 --> 00:23:56,640
almost two weeks in the end the tour

612
00:23:56,640 --> 00:23:58,860
released some sort of patch for the

613
00:23:58,860 --> 00:24:03,139
first type of issues that log4j had

614
00:24:03,360 --> 00:24:04,440
okay

615
00:24:04,440 --> 00:24:07,559
so to wrap up a bit about the timeline

616
00:24:07,559 --> 00:24:11,640
um on Friday we had a coin Miner turned

617
00:24:11,640 --> 00:24:14,280
into exploit wide around the world

618
00:24:14,280 --> 00:24:16,980
Saturday morning we already filed the

619
00:24:16,980 --> 00:24:19,559
first report with iocs to our customers

620
00:24:19,559 --> 00:24:21,600
and to the community it was adopted by

621
00:24:21,600 --> 00:24:24,179
the DHS the American DHS and was sent to

622
00:24:24,179 --> 00:24:26,940
other uh law enforcement inserts around

623
00:24:26,940 --> 00:24:29,760
the world on Sunday we released the

624
00:24:29,760 --> 00:24:32,220
first version of our tool Tuesday the

625
00:24:32,220 --> 00:24:34,260
version with the ldap by the end of the

626
00:24:34,260 --> 00:24:37,679
week we had already lists lists of lists

627
00:24:37,679 --> 00:24:41,539
of lists of servers with non-vulnerable

628
00:24:41,539 --> 00:24:43,919
that they were known to be vulnerable to

629
00:24:43,919 --> 00:24:47,760
lock 4J all of them waiting to be fixed

630
00:24:47,760 --> 00:24:50,520
so a question that we would ask was why

631
00:24:50,520 --> 00:24:53,039
did we go open source with this tool

632
00:24:53,039 --> 00:24:55,260
so for us it was a really easy decision

633
00:24:55,260 --> 00:24:57,840
to make we are not a software house we

634
00:24:57,840 --> 00:24:59,039
don't make money out of building

635
00:24:59,039 --> 00:25:01,020
software and selling people licenses to

636
00:25:01,020 --> 00:25:03,000
use our software that's not the way that

637
00:25:03,000 --> 00:25:06,240
we work and we saw that basically where

638
00:25:06,240 --> 00:25:08,520
everything was on fire and everybody was

639
00:25:08,520 --> 00:25:10,679
screaming for some sort of solution so

640
00:25:10,679 --> 00:25:12,539
the decision for us to say okay we have

641
00:25:12,539 --> 00:25:14,280
a tool which is better than what we saw

642
00:25:14,280 --> 00:25:15,720
previously and it has the following

643
00:25:15,720 --> 00:25:16,860
advantages

644
00:25:16,860 --> 00:25:19,320
was easy to make it has disadvantages it

645
00:25:19,320 --> 00:25:21,780
takes time it might not be easy to use

646
00:25:21,780 --> 00:25:24,299
to someone not used to the command line

647
00:25:24,299 --> 00:25:26,279
I don't know but in the bottom line it

648
00:25:26,279 --> 00:25:28,020
works you can use it and it's open

649
00:25:28,020 --> 00:25:29,580
source I'm not going to charge you for

650
00:25:29,580 --> 00:25:31,320
it in the middle of a crisis it's not

651
00:25:31,320 --> 00:25:33,059
something that we believe in

652
00:25:33,059 --> 00:25:35,820
and we also kind of counted on the

653
00:25:35,820 --> 00:25:37,919
community to provide us back with

654
00:25:37,919 --> 00:25:40,320
feedback you have a bug fix it you have

655
00:25:40,320 --> 00:25:42,419
a better way to improve this do that so

656
00:25:42,419 --> 00:25:44,340
we could do those iterations and by

657
00:25:44,340 --> 00:25:46,740
those iterations also help our customers

658
00:25:46,740 --> 00:25:49,679
but the community at Large

659
00:25:49,679 --> 00:25:52,140
so that kind of explains why did we

660
00:25:52,140 --> 00:25:55,200
actually even go the open source route

661
00:25:55,200 --> 00:25:58,500
I want to take a moment and uh

662
00:25:58,500 --> 00:26:00,840
talk about some of the more ugly stuff

663
00:26:00,840 --> 00:26:02,820
that happened during that time

664
00:26:02,820 --> 00:26:04,320
so I don't know how many of you were

665
00:26:04,320 --> 00:26:06,360
aware but there was a lot of hate going

666
00:26:06,360 --> 00:26:08,100
on in online communities I'm talking

667
00:26:08,100 --> 00:26:12,360
about uh Twitter Facebook LinkedIn all

668
00:26:12,360 --> 00:26:14,159
of those social communities people were

669
00:26:14,159 --> 00:26:16,260
really really riling up against the log

670
00:26:16,260 --> 00:26:19,380
4J team they ruined our Christmas can

671
00:26:19,380 --> 00:26:21,960
why the hell is my logging Library doing

672
00:26:21,960 --> 00:26:23,600
external calls

673
00:26:23,600 --> 00:26:26,580
why can they patch their work already do

674
00:26:26,580 --> 00:26:28,380
it once and solve the problem for all

675
00:26:28,380 --> 00:26:31,080
for for all eternity uh what kind of

676
00:26:31,080 --> 00:26:32,820
programmer you wrote this code this code

677
00:26:32,820 --> 00:26:34,880
is crap Etc

678
00:26:34,880 --> 00:26:38,299
and uh

679
00:26:39,900 --> 00:26:44,039
the fact that they've issued a fix as

680
00:26:44,039 --> 00:26:46,380
fast as they could and then someone else

681
00:26:46,380 --> 00:26:48,659
came in with a new way to exploit it and

682
00:26:48,659 --> 00:26:50,400
then they released a fix two days later

683
00:26:50,400 --> 00:26:54,240
again also uh it gave rise to a lot of

684
00:26:54,240 --> 00:26:56,580
hate speech because people were working

685
00:26:56,580 --> 00:26:58,679
through Christmas they applied those

686
00:26:58,679 --> 00:27:00,600
patches it was very complex to apply

687
00:27:00,600 --> 00:27:03,419
those patches all over your system and

688
00:27:03,419 --> 00:27:05,760
two days later you have to do it again

689
00:27:05,760 --> 00:27:08,700
so there was a lot of uh I don't know

690
00:27:08,700 --> 00:27:12,900
fight or uh uh disgruntled users of that

691
00:27:12,900 --> 00:27:15,240
library in the community saying why

692
00:27:15,240 --> 00:27:17,520
can't you just do your jobs already

693
00:27:17,520 --> 00:27:18,900
so

694
00:27:18,900 --> 00:27:20,520
I want to highlight that it was not

695
00:27:20,520 --> 00:27:22,200
their jobs

696
00:27:22,200 --> 00:27:25,020
the log4j team for whoever tried to find

697
00:27:25,020 --> 00:27:27,360
out what they're doing about three to

698
00:27:27,360 --> 00:27:30,059
four guys okay sitting in the US they

699
00:27:30,059 --> 00:27:32,279
have day jobs they are maintaining this

700
00:27:32,279 --> 00:27:34,620
library for the past 10 plus years they

701
00:27:34,620 --> 00:27:36,900
don't get paid it's not there what they

702
00:27:36,900 --> 00:27:38,880
do in their day-to-day lives they wrote

703
00:27:38,880 --> 00:27:40,620
this Library a long time ago actually

704
00:27:40,620 --> 00:27:41,940
someone else wrote the library a long

705
00:27:41,940 --> 00:27:43,799
time ago and they came in as open source

706
00:27:43,799 --> 00:27:45,059
maintainers to keep it up and running

707
00:27:45,059 --> 00:27:48,900
keep all of the code happening and Etc

708
00:27:48,900 --> 00:27:50,460
and on top of that I want to say

709
00:27:50,460 --> 00:27:52,559
something else about features the fact

710
00:27:52,559 --> 00:27:54,480
that the logging library is doing that

711
00:27:54,480 --> 00:27:56,820
enrichment operation those enrichment

712
00:27:56,820 --> 00:27:59,100
operation it doesn't come out of thin

713
00:27:59,100 --> 00:28:01,320
air somebody is using those operations a

714
00:28:01,320 --> 00:28:03,240
feature has been requested a feature has

715
00:28:03,240 --> 00:28:06,360
been implemented and tested so it might

716
00:28:06,360 --> 00:28:08,700
have a security vulnerability but the

717
00:28:08,700 --> 00:28:10,200
bottom line of that is that somebody

718
00:28:10,200 --> 00:28:12,120
wanted that feature if you're going to

719
00:28:12,120 --> 00:28:14,220
block that feature out of the blue some

720
00:28:14,220 --> 00:28:16,200
systems are going to break

721
00:28:16,200 --> 00:28:18,480
it's not a straightforward decision to

722
00:28:18,480 --> 00:28:20,820
say let's block everything you need to

723
00:28:20,820 --> 00:28:23,340
understand where it's being used and how

724
00:28:23,340 --> 00:28:25,679
the bottom line was that it really got

725
00:28:25,679 --> 00:28:27,480
ugly it got ugly to the point that

726
00:28:27,480 --> 00:28:30,240
people were disheartened at what's what

727
00:28:30,240 --> 00:28:32,279
was happening

728
00:28:32,279 --> 00:28:36,419
uh I I debated with myself if I should

729
00:28:36,419 --> 00:28:38,220
share those screenshots or should not

730
00:28:38,220 --> 00:28:39,539
share those screenshots and decided

731
00:28:39,539 --> 00:28:41,159
against it I don't think that it

732
00:28:41,159 --> 00:28:43,320
provides any value to show people being

733
00:28:43,320 --> 00:28:46,620
acting crap however I say that it's

734
00:28:46,620 --> 00:28:47,640
wrong

735
00:28:47,640 --> 00:28:50,159
we decided to take a stand and actually

736
00:28:50,159 --> 00:28:52,799
put our money where our mouth is thank

737
00:28:52,799 --> 00:28:55,919
you and uh we reached out to the

738
00:28:55,919 --> 00:28:57,779
developers and said look we know you're

739
00:28:57,779 --> 00:28:59,880
working hard we know that you are

740
00:28:59,880 --> 00:29:02,220
spitting Blood Sweat and Tears over

741
00:29:02,220 --> 00:29:04,679
doing this over your your own personal

742
00:29:04,679 --> 00:29:06,360
lives over your own personal Christmas

743
00:29:06,360 --> 00:29:08,520
while everybody else is shouting at you

744
00:29:08,520 --> 00:29:10,440
and we reached out to them and say we

745
00:29:10,440 --> 00:29:12,179
want to donate money to the project to

746
00:29:12,179 --> 00:29:14,700
you guys to offer some compensation to

747
00:29:14,700 --> 00:29:16,320
what we've been doing we understand how

748
00:29:16,320 --> 00:29:17,520
hard it is

749
00:29:17,520 --> 00:29:20,220
and we also had another objective we

750
00:29:20,220 --> 00:29:22,500
hoped that some other companies bigger

751
00:29:22,500 --> 00:29:25,200
than us much bigger than us will you

752
00:29:25,200 --> 00:29:26,760
know come to the flag and say you know

753
00:29:26,760 --> 00:29:29,039
this is wrong open source maintenance

754
00:29:29,039 --> 00:29:31,140
should not be put front and center and

755
00:29:31,140 --> 00:29:32,820
to blame when some security incident

756
00:29:32,820 --> 00:29:34,919
happens they should be supported they

757
00:29:34,919 --> 00:29:37,980
should be lifted when it happens

758
00:29:37,980 --> 00:29:39,659
we failed

759
00:29:39,659 --> 00:29:41,940
nobody gave a crap

760
00:29:41,940 --> 00:29:44,520
that's pretty sad

761
00:29:44,520 --> 00:29:45,600
um

762
00:29:45,600 --> 00:29:48,000
we did try and when we talked to them

763
00:29:48,000 --> 00:29:51,179
they told us that in the past years they

764
00:29:51,179 --> 00:29:52,679
received in total a couple hundred

765
00:29:52,679 --> 00:29:54,720
dollars if you're aware there's a in

766
00:29:54,720 --> 00:29:56,340
GitHub there's like donate to the

767
00:29:56,340 --> 00:29:58,140
maintainers thing that you can donate

768
00:29:58,140 --> 00:30:00,120
like 15 or 10 or something like that

769
00:30:00,120 --> 00:30:02,460
they buy them a cup of coffee so over

770
00:30:02,460 --> 00:30:04,020
all of the years for all maintainers

771
00:30:04,020 --> 00:30:05,399
they reached like a couple hundred

772
00:30:05,399 --> 00:30:06,779
dollars

773
00:30:06,779 --> 00:30:08,220
so

774
00:30:08,220 --> 00:30:10,919
I want you to think about that that when

775
00:30:10,919 --> 00:30:12,720
we try to reach out to them and saying

776
00:30:12,720 --> 00:30:13,919
we want to donate to you they didn't

777
00:30:13,919 --> 00:30:15,960
know what to do it never happened before

778
00:30:15,960 --> 00:30:18,120
nobody gave them money before nobody

779
00:30:18,120 --> 00:30:20,640
supported them before now think about

780
00:30:20,640 --> 00:30:22,200
this

781
00:30:22,200 --> 00:30:24,240
when you think about how prolific was

782
00:30:24,240 --> 00:30:25,679
the log 4J Library

783
00:30:25,679 --> 00:30:28,200
how many appliances were affected by

784
00:30:28,200 --> 00:30:31,460
this open source project how many Val

785
00:30:31,460 --> 00:30:34,200
how much value in engineering days

786
00:30:34,200 --> 00:30:37,080
engineering hours of people going to try

787
00:30:37,080 --> 00:30:39,240
to fix this and solve this went into it

788
00:30:39,240 --> 00:30:41,460
but not one of those companies stepped

789
00:30:41,460 --> 00:30:42,779
up and say look I understand you're

790
00:30:42,779 --> 00:30:44,640
working very hard here's ten thousand

791
00:30:44,640 --> 00:30:46,799
dollars to appreciate your effort here's

792
00:30:46,799 --> 00:30:48,179
one hundred thousand dollars you know

793
00:30:48,179 --> 00:30:49,620
what don't donate money it's complicated

794
00:30:49,620 --> 00:30:51,480
here are three Engineers for two weeks

795
00:30:51,480 --> 00:30:53,460
to help you solve these problems

796
00:30:53,460 --> 00:30:55,980
not one of those companies got up to do

797
00:30:55,980 --> 00:30:58,320
it and that's pretty sad and that is

798
00:30:58,320 --> 00:31:01,080
pretty uh recurring in open source

799
00:31:01,080 --> 00:31:04,100
software everybody is very happy to take

800
00:31:04,100 --> 00:31:07,200
that code into their systems but when

801
00:31:07,200 --> 00:31:09,000
they discover a bug they fix it

802
00:31:09,000 --> 00:31:10,799
internally they don't push it Upstream

803
00:31:10,799 --> 00:31:12,720
where they have security issues they go

804
00:31:12,720 --> 00:31:13,919
and complaints with the maintainers but

805
00:31:13,919 --> 00:31:15,480
they don't offer support

806
00:31:15,480 --> 00:31:17,279
think about that for your own companies

807
00:31:17,279 --> 00:31:18,960
where you work at whenever you're using

808
00:31:18,960 --> 00:31:20,760
open source how are you dealing with

809
00:31:20,760 --> 00:31:23,720
open source internally

810
00:31:23,820 --> 00:31:25,679
so with that discretion I want to go

811
00:31:25,679 --> 00:31:28,500
back into how to handle unknown uh

812
00:31:28,500 --> 00:31:31,140
incidents like log4j just spring at you

813
00:31:31,140 --> 00:31:32,940
out of the blue and you don't really

814
00:31:32,940 --> 00:31:34,679
have a Playbook to what are you going to

815
00:31:34,679 --> 00:31:35,820
do if there's a supply chain

816
00:31:35,820 --> 00:31:37,260
vulnerability in one of your software

817
00:31:37,260 --> 00:31:38,899
libraries

818
00:31:38,899 --> 00:31:41,760
so I do hope you know this quote because

819
00:31:41,760 --> 00:31:43,559
I have no intention to reading it out to

820
00:31:43,559 --> 00:31:44,580
you

821
00:31:44,580 --> 00:31:46,919
that's Donald rumsfold getting old and

822
00:31:46,919 --> 00:31:48,899
dizzy around the what's Known Unknown

823
00:31:48,899 --> 00:31:52,020
unknown and known unknowns but the basic

824
00:31:52,020 --> 00:31:54,360
thing here is that things would happen

825
00:31:54,360 --> 00:31:56,700
where you have no previous knowledge

826
00:31:56,700 --> 00:31:58,080
that it's going to happen it doesn't

827
00:31:58,080 --> 00:31:59,760
matter if it's a zero day or if it's a

828
00:31:59,760 --> 00:32:00,840
vulnerable something you never

829
00:32:00,840 --> 00:32:03,360
considered before some surprise is going

830
00:32:03,360 --> 00:32:05,580
to happen and you need to be prepared

831
00:32:05,580 --> 00:32:07,500
for it so how can you be prepared for

832
00:32:07,500 --> 00:32:08,760
something that you don't know is going

833
00:32:08,760 --> 00:32:10,679
to happen well the fact that it's going

834
00:32:10,679 --> 00:32:13,620
to happen gives you some Edge like most

835
00:32:13,620 --> 00:32:15,600
attackers like to do you can do living

836
00:32:15,600 --> 00:32:18,179
off the land you already have control of

837
00:32:18,179 --> 00:32:20,220
your systems you already have your own

838
00:32:20,220 --> 00:32:22,860
mechanisms to explore the system collect

839
00:32:22,860 --> 00:32:25,260
data from the system uh distribute

840
00:32:25,260 --> 00:32:27,720
patches to the system you already have a

841
00:32:27,720 --> 00:32:29,460
lot of tools in your tool chest to try

842
00:32:29,460 --> 00:32:31,500
to attack these types of problems get to

843
00:32:31,500 --> 00:32:33,840
know your tool sets well and if you are

844
00:32:33,840 --> 00:32:35,399
missing something

845
00:32:35,399 --> 00:32:37,799
bridge that Gap ahead of time you might

846
00:32:37,799 --> 00:32:39,899
not know what the next incident is going

847
00:32:39,899 --> 00:32:41,220
to be but you can prepare your

848
00:32:41,220 --> 00:32:43,860
infrastructure to deal with it

849
00:32:43,860 --> 00:32:45,120
um

850
00:32:45,120 --> 00:32:46,980
so I'll give an example of how we

851
00:32:46,980 --> 00:32:49,559
approach this think about the problem

852
00:32:49,559 --> 00:32:51,960
that I just described earlier find out

853
00:32:51,960 --> 00:32:54,720
all of the different uh code running

854
00:32:54,720 --> 00:32:57,360
vulnerable log for J Library that's a

855
00:32:57,360 --> 00:32:58,679
big problem to solve you don't have

856
00:32:58,679 --> 00:33:00,600
s-bombs you don't know how to do it but

857
00:33:00,600 --> 00:33:02,100
from an insert of response perspective

858
00:33:02,100 --> 00:33:04,500
let me rephrase the question let me

859
00:33:04,500 --> 00:33:06,000
rephrase the question

860
00:33:06,000 --> 00:33:08,880
find all processes in memory memory that

861
00:33:08,880 --> 00:33:10,799
fit the Java footprint that have a

862
00:33:10,799 --> 00:33:13,860
dependency on another memory object that

863
00:33:13,860 --> 00:33:16,320
is the log4j library that has another

864
00:33:16,320 --> 00:33:19,140
fingerprint matches a specific version

865
00:33:19,140 --> 00:33:20,820
do you know of any tools that can do

866
00:33:20,820 --> 00:33:22,679
that well we have plenty of tools then

867
00:33:22,679 --> 00:33:25,500
can do memory forensics we can also run

868
00:33:25,500 --> 00:33:27,899
those tools at scale we know how to do

869
00:33:27,899 --> 00:33:29,700
memory forensic collections from

870
00:33:29,700 --> 00:33:31,919
hundreds of thousands of machines over

871
00:33:31,919 --> 00:33:33,899
the network searching for specific

872
00:33:33,899 --> 00:33:36,539
patterns hopefully most of you are aware

873
00:33:36,539 --> 00:33:38,940
of what Sigma rules are or Java rules

874
00:33:38,940 --> 00:33:41,100
are and how to run these tools and if

875
00:33:41,100 --> 00:33:43,620
not your IR team are absolutely certain

876
00:33:43,620 --> 00:33:46,080
to know how to do that by rephrasing the

877
00:33:46,080 --> 00:33:48,779
question in a sense that makes I have an

878
00:33:48,779 --> 00:33:50,640
indicator of compromise I want to search

879
00:33:50,640 --> 00:33:52,440
my entire network for that indicator of

880
00:33:52,440 --> 00:33:54,840
compromise you switched the question

881
00:33:54,840 --> 00:33:56,580
around into something that is much

882
00:33:56,580 --> 00:33:58,380
easier to solve and you probably already

883
00:33:58,380 --> 00:34:00,360
have the tool sets to do that you have

884
00:34:00,360 --> 00:34:02,519
edrs installed in your machines you have

885
00:34:02,519 --> 00:34:04,019
patch management install do your

886
00:34:04,019 --> 00:34:05,519
machines you can probably run those

887
00:34:05,519 --> 00:34:09,480
tools at scale without additional effort

888
00:34:09,480 --> 00:34:11,760
so what worked for us and can probably

889
00:34:11,760 --> 00:34:13,260
help you out

890
00:34:13,260 --> 00:34:15,839
the biggest benefit that I can point out

891
00:34:15,839 --> 00:34:18,739
to for our customers was pre-integration

892
00:34:18,739 --> 00:34:21,179
unlike a lot of other incident companies

893
00:34:21,179 --> 00:34:23,520
we don't come in when somebody Blows the

894
00:34:23,520 --> 00:34:25,679
Whistle we pre-integrate with the

895
00:34:25,679 --> 00:34:27,480
customer we have a year-long

896
00:34:27,480 --> 00:34:29,159
relationship with them we try to help

897
00:34:29,159 --> 00:34:30,899
them out in different areas of security

898
00:34:30,899 --> 00:34:33,719
along the year for two major things one

899
00:34:33,719 --> 00:34:35,040
I want to be able to collect information

900
00:34:35,040 --> 00:34:37,619
from the network independently of it and

901
00:34:37,619 --> 00:34:40,199
security the thing that I care about for

902
00:34:40,199 --> 00:34:43,440
example DC logs I keep for one year back

903
00:34:43,440 --> 00:34:45,899
most DC servers are configured to keep

904
00:34:45,899 --> 00:34:47,399
the logs for two days

905
00:34:47,399 --> 00:34:49,440
so I have a different Viewpoint and

906
00:34:49,440 --> 00:34:51,480
what's important for me as an IR to keep

907
00:34:51,480 --> 00:34:53,820
the second thing is once I'm already

908
00:34:53,820 --> 00:34:55,918
integrated with a customer we already

909
00:34:55,918 --> 00:34:58,020
know the people in it we know who holds

910
00:34:58,020 --> 00:35:00,240
the password to what system we know the

911
00:35:00,240 --> 00:35:01,619
layout of the network we know the

912
00:35:01,619 --> 00:35:03,480
segmentation we have the credentials to

913
00:35:03,480 --> 00:35:05,580
access what's needed we already have the

914
00:35:05,580 --> 00:35:07,320
legal permission to do what's needed to

915
00:35:07,320 --> 00:35:09,420
be done so if an incident happens and

916
00:35:09,420 --> 00:35:12,480
you need to act quickly your IR team can

917
00:35:12,480 --> 00:35:14,820
help you by actually having all of that

918
00:35:14,820 --> 00:35:16,619
infrastructure ahead of time already

919
00:35:16,619 --> 00:35:18,900
ready in your organization or and if you

920
00:35:18,900 --> 00:35:20,339
don't then think about doing this

921
00:35:20,339 --> 00:35:24,660
because this will save you days of Labor

922
00:35:24,660 --> 00:35:26,280
before you even start working on the

923
00:35:26,280 --> 00:35:28,020
incident and if you can nip it in the

924
00:35:28,020 --> 00:35:31,619
bud everyone will be much happier

925
00:35:31,619 --> 00:35:33,960
the second thing is that

926
00:35:33,960 --> 00:35:36,000
you don't have to invent everything you

927
00:35:36,000 --> 00:35:37,440
don't need to write your own code to

928
00:35:37,440 --> 00:35:39,960
solve a problem most probably someone

929
00:35:39,960 --> 00:35:42,000
else already wrote that feature and you

930
00:35:42,000 --> 00:35:44,099
can just make use of it so if you have

931
00:35:44,099 --> 00:35:46,140
edrs deployed in your organization most

932
00:35:46,140 --> 00:35:48,240
ddrs today already have capabilities

933
00:35:48,240 --> 00:35:50,820
built for IR teams or for remote

934
00:35:50,820 --> 00:35:53,339
capabilities that allow them to scan

935
00:35:53,339 --> 00:35:55,859
memory or to look for artifacts on disk

936
00:35:55,859 --> 00:35:57,780
for example look for file names that are

937
00:35:57,780 --> 00:36:01,200
called log4j lib v01

938
00:36:01,200 --> 00:36:03,240
so you can scan the entire file system

939
00:36:03,240 --> 00:36:05,220
of your entire organization by take a

940
00:36:05,220 --> 00:36:06,599
couple of hours but it'll give you

941
00:36:06,599 --> 00:36:08,339
answers much faster with tools that you

942
00:36:08,339 --> 00:36:10,940
already possess

943
00:36:11,780 --> 00:36:14,160
whenever you're doing something like

944
00:36:14,160 --> 00:36:16,079
that think about sharing back to the

945
00:36:16,079 --> 00:36:18,540
community so it might be a hurdle for

946
00:36:18,540 --> 00:36:20,460
some companies sharing IPA going open

947
00:36:20,460 --> 00:36:22,020
source it might be a headache to support

948
00:36:22,020 --> 00:36:24,900
that I was previously a manager at Cisco

949
00:36:24,900 --> 00:36:26,839
and a manager at Intel and in both

950
00:36:26,839 --> 00:36:29,579
Enterprises I had to push back against

951
00:36:29,579 --> 00:36:31,140
legal whenever I wanted to do an open

952
00:36:31,140 --> 00:36:33,000
source contribution you know you have to

953
00:36:33,000 --> 00:36:34,980
protect the company's IP you have to not

954
00:36:34,980 --> 00:36:37,560
to take on liability but you know if

955
00:36:37,560 --> 00:36:40,079
you're let's say you have perseverance

956
00:36:40,079 --> 00:36:42,240
you can walk through all of that legal

957
00:36:42,240 --> 00:36:45,720
matter and find Solutions so I think

958
00:36:45,720 --> 00:36:48,119
it's worth the effort

959
00:36:48,119 --> 00:36:51,599
and before I wrap up how would you help

960
00:36:51,599 --> 00:36:53,040
your iot and what would be very

961
00:36:53,040 --> 00:36:54,900
beneficial whenever you have an incident

962
00:36:54,900 --> 00:36:57,859
and you need to help your IR team

963
00:36:57,859 --> 00:37:00,480
whenever you do keep more logs if you

964
00:37:00,480 --> 00:37:02,099
think you have enough logs right now

965
00:37:02,099 --> 00:37:04,260
that's fine double it

966
00:37:04,260 --> 00:37:06,960
if you're not sure triple it

967
00:37:06,960 --> 00:37:09,000
the reason for that is that when we come

968
00:37:09,000 --> 00:37:11,339
into an organization and we don't have

969
00:37:11,339 --> 00:37:12,599
previous integration that we haven't

970
00:37:12,599 --> 00:37:14,820
collected data from them we start the

971
00:37:14,820 --> 00:37:16,800
clock at whatever time we started now we

972
00:37:16,800 --> 00:37:20,280
try to look back in time and that the

973
00:37:20,280 --> 00:37:22,380
Viewpoint is limited by how many logs

974
00:37:22,380 --> 00:37:24,240
you have I don't have a problem to

975
00:37:24,240 --> 00:37:26,339
ingest hundreds of gigabytes of logs

976
00:37:26,339 --> 00:37:29,040
from a from an organization this is a

977
00:37:29,040 --> 00:37:30,599
scanning problem for my backend that's

978
00:37:30,599 --> 00:37:32,280
not a problem the problem is that most

979
00:37:32,280 --> 00:37:33,720
organizations don't have hundreds of

980
00:37:33,720 --> 00:37:36,300
gigabytes to give me so if there is an

981
00:37:36,300 --> 00:37:38,520
incident and your VPN access point only

982
00:37:38,520 --> 00:37:40,680
keeps logs for the last three days

983
00:37:40,680 --> 00:37:42,900
of whoever logged in through your VPN in

984
00:37:42,900 --> 00:37:44,760
the attacker logged in last time five

985
00:37:44,760 --> 00:37:46,920
days ago

986
00:37:46,920 --> 00:37:48,359
I don't really have a way to deal with

987
00:37:48,359 --> 00:37:49,079
that

988
00:37:49,079 --> 00:37:50,880
so I'll put some monitoring in it and

989
00:37:50,880 --> 00:37:52,560
wait for the attacker to connect again

990
00:37:52,560 --> 00:37:55,200
that's not very healthy but if I was

991
00:37:55,200 --> 00:37:57,300
already there collecting those logs I

992
00:37:57,300 --> 00:37:59,520
can just look back at my Splunk or my LK

993
00:37:59,520 --> 00:38:01,680
and find those indicators and build the

994
00:38:01,680 --> 00:38:04,079
entire map much faster and by the way

995
00:38:04,079 --> 00:38:06,540
much more in an automatic Manner and get

996
00:38:06,540 --> 00:38:08,099
those results and understand what

997
00:38:08,099 --> 00:38:11,339
exactly happened so keep those logs

998
00:38:11,339 --> 00:38:14,160
the second thing is if you don't have an

999
00:38:14,160 --> 00:38:17,760
EDR get one now if you have an EDR learn

1000
00:38:17,760 --> 00:38:19,020
how to use it

1001
00:38:19,020 --> 00:38:22,320
okay for I don't know 90 plus of

1002
00:38:22,320 --> 00:38:24,420
organization that we reach into they

1003
00:38:24,420 --> 00:38:25,980
don't know how to work their EDR and

1004
00:38:25,980 --> 00:38:28,079
give a real life example

1005
00:38:28,079 --> 00:38:30,720
um we got into an organization they said

1006
00:38:30,720 --> 00:38:32,400
we are we know we have an attack in the

1007
00:38:32,400 --> 00:38:35,640
system we had some iocs on the Sim and

1008
00:38:35,640 --> 00:38:37,380
we know it's been doing lateral movement

1009
00:38:37,380 --> 00:38:39,420
okay question number one do you have any

1010
00:38:39,420 --> 00:38:41,579
Dr yes we have crowdstrike listen

1011
00:38:41,579 --> 00:38:43,619
Croucher usually does the job we'll have

1012
00:38:43,619 --> 00:38:45,960
everything we go into crowd side and you

1013
00:38:45,960 --> 00:38:47,579
know it's a Christmas tree everything is

1014
00:38:47,579 --> 00:38:49,920
lit up it's red it's flashing say okay

1015
00:38:49,920 --> 00:38:52,800
so EDR is working it detected everything

1016
00:38:52,800 --> 00:38:55,680
but nobody configured the egress email

1017
00:38:55,680 --> 00:38:57,480
address so it wasn't sending alerts to

1018
00:38:57,480 --> 00:38:58,920
anyone

1019
00:38:58,920 --> 00:39:01,200
so you have a hundred thousand dollar

1020
00:39:01,200 --> 00:39:03,480
piece of Machinery running on your

1021
00:39:03,480 --> 00:39:06,180
network doing its job correctly

1022
00:39:06,180 --> 00:39:08,099
and nobody knows

1023
00:39:08,099 --> 00:39:10,740
so if you have an EDR test it learn to

1024
00:39:10,740 --> 00:39:12,359
use it make sure that you get those

1025
00:39:12,359 --> 00:39:15,000
emails those alerts and when an incident

1026
00:39:15,000 --> 00:39:16,980
comes you'll be much more prepared to

1027
00:39:16,980 --> 00:39:18,780
handle it

1028
00:39:18,780 --> 00:39:19,920
thank you

1029
00:39:19,920 --> 00:39:22,920
and lastly have a have a plan so a plan

1030
00:39:22,920 --> 00:39:24,500
doesn't have to be something very

1031
00:39:24,500 --> 00:39:27,420
complicated but it must have the first

1032
00:39:27,420 --> 00:39:30,119
section uh who to contact who's

1033
00:39:30,119 --> 00:39:33,300
responsible for what phone numbers

1034
00:39:33,300 --> 00:39:36,359
I spend a lot of time and an

1035
00:39:36,359 --> 00:39:37,980
insurmountable amount of time coming

1036
00:39:37,980 --> 00:39:39,900
into a new organization trying to find

1037
00:39:39,900 --> 00:39:42,000
out who has the password for this ID

1038
00:39:42,000 --> 00:39:44,339
system who can create a user for the IR

1039
00:39:44,339 --> 00:39:46,680
team for that system and usually not the

1040
00:39:46,680 --> 00:39:48,300
same person and usually it's not working

1041
00:39:48,300 --> 00:39:51,060
in the same time zone and if we had that

1042
00:39:51,060 --> 00:39:53,220
contact page ahead of time we could

1043
00:39:53,220 --> 00:39:56,640
shave off 8 to 24 hours of the initial

1044
00:39:56,640 --> 00:39:57,780
response time

1045
00:39:57,780 --> 00:39:59,760
that's part of why doing uh

1046
00:39:59,760 --> 00:40:01,680
pre-integration is so important you

1047
00:40:01,680 --> 00:40:03,839
already know Joe Joe can open your

1048
00:40:03,839 --> 00:40:05,460
account you can move from Dorman to

1049
00:40:05,460 --> 00:40:08,099
active fast if you don't know Joe or

1050
00:40:08,099 --> 00:40:09,420
even the people you're talking to don't

1051
00:40:09,420 --> 00:40:10,859
know Joe and you have to go through

1052
00:40:10,859 --> 00:40:11,940
three different Hoops in the

1053
00:40:11,940 --> 00:40:13,560
organization to find out who actually

1054
00:40:13,560 --> 00:40:16,680
knows Joe do that ahead of time you will

1055
00:40:16,680 --> 00:40:19,680
you will be able to resolve incidents so

1056
00:40:19,680 --> 00:40:22,020
much faster

1057
00:40:22,020 --> 00:40:24,960
so to summarize and in the immortal

1058
00:40:24,960 --> 00:40:27,900
worlds of Douglas Adams Don't Panic you

1059
00:40:27,900 --> 00:40:30,240
will panic but don't panic

1060
00:40:30,240 --> 00:40:33,060
uh talk to your IR team even if it's not

1061
00:40:33,060 --> 00:40:35,339
a cyber related incident most probably

1062
00:40:35,339 --> 00:40:37,740
your IR team by being incident

1063
00:40:37,740 --> 00:40:39,720
responders have a different way of

1064
00:40:39,720 --> 00:40:41,880
looking at problems they will think more

1065
00:40:41,880 --> 00:40:43,740
like attackers are thinking about those

1066
00:40:43,740 --> 00:40:45,720
problems and they probably have either

1067
00:40:45,720 --> 00:40:47,460
access or knowledge of different tool

1068
00:40:47,460 --> 00:40:49,560
sets than what you're aware of talk to

1069
00:40:49,560 --> 00:40:50,460
them they might have a different

1070
00:40:50,460 --> 00:40:52,260
Viewpoint that can save you a lot of

1071
00:40:52,260 --> 00:40:54,540
time and solve problems at scale that's

1072
00:40:54,540 --> 00:40:56,520
what IR does solving these types of

1073
00:40:56,520 --> 00:40:58,579
problems at scale

1074
00:40:58,579 --> 00:41:01,500
uh most Stallings don't have a white

1075
00:41:01,500 --> 00:41:04,260
label on them used in attack only you

1076
00:41:04,260 --> 00:41:05,880
can use tools for whatever purpose you

1077
00:41:05,880 --> 00:41:08,460
find useful to use them for and you can

1078
00:41:08,460 --> 00:41:10,020
utilize them for other things as well

1079
00:41:10,020 --> 00:41:11,780
think about how you do patch management

1080
00:41:11,780 --> 00:41:14,099
deploying scripts entire over your

1081
00:41:14,099 --> 00:41:15,660
entire organization can be used for

1082
00:41:15,660 --> 00:41:19,279
other things except patching

1083
00:41:19,680 --> 00:41:21,060
um

1084
00:41:21,060 --> 00:41:23,160
whatever exercises you're doing to

1085
00:41:23,160 --> 00:41:25,500
prepare for the unknown or what kind of

1086
00:41:25,500 --> 00:41:27,060
access criteria is you have for

1087
00:41:27,060 --> 00:41:28,859
preparing for unknown it's better to

1088
00:41:28,859 --> 00:41:30,420
have them ahead of time than trying to

1089
00:41:30,420 --> 00:41:32,820
make make shift of what you can during

1090
00:41:32,820 --> 00:41:35,280
an incident so even if only thing that

1091
00:41:35,280 --> 00:41:37,020
you have in your IR plan is the phone

1092
00:41:37,020 --> 00:41:38,820
number of the IR company and the contact

1093
00:41:38,820 --> 00:41:40,619
page your internal contact page of who

1094
00:41:40,619 --> 00:41:42,720
is responsible for what you are already

1095
00:41:42,720 --> 00:41:47,220
50 there so it's better than nothing

1096
00:41:47,220 --> 00:41:49,619
as I said previously and I will

1097
00:41:49,619 --> 00:41:52,920
re-emphasize have good logs and good

1098
00:41:52,920 --> 00:41:55,140
logs usually mean don't keep logs on the

1099
00:41:55,140 --> 00:41:56,820
machine themselves ship all of those

1100
00:41:56,820 --> 00:41:59,640
locks with some remote repository can be

1101
00:41:59,640 --> 00:42:01,740
in the cloud can be local but somewhere

1102
00:42:01,740 --> 00:42:03,300
that is not stored in the specific

1103
00:42:03,300 --> 00:42:04,260
machine

1104
00:42:04,260 --> 00:42:06,660
for a very simple reason if an attacker

1105
00:42:06,660 --> 00:42:08,220
has access to the machine doing

1106
00:42:08,220 --> 00:42:10,140
something interesting enough that it

1107
00:42:10,140 --> 00:42:12,000
will be logged by the machine the

1108
00:42:12,000 --> 00:42:14,220
attacker can also delete the logs on the

1109
00:42:14,220 --> 00:42:16,619
machine and remove traces of whatever

1110
00:42:16,619 --> 00:42:18,780
he's been doing there so by shipping

1111
00:42:18,780 --> 00:42:21,000
those logs to a remote repository some

1112
00:42:21,000 --> 00:42:22,560
write-only database or something like

1113
00:42:22,560 --> 00:42:24,660
that you negate the attacker's

1114
00:42:24,660 --> 00:42:26,579
possibility of removing traces of what

1115
00:42:26,579 --> 00:42:28,940
he's done

1116
00:42:29,220 --> 00:42:30,839
um another thing that happens in a lot

1117
00:42:30,839 --> 00:42:32,940
of organization is know your assets

1118
00:42:32,940 --> 00:42:36,359
again real world example we went into a

1119
00:42:36,359 --> 00:42:37,800
large-scale organization big Enterprise

1120
00:42:37,800 --> 00:42:39,480
organization they're already 10 days

1121
00:42:39,480 --> 00:42:41,880
into the incident and we spend like two

1122
00:42:41,880 --> 00:42:44,339
and a half days investigating their AWS

1123
00:42:44,339 --> 00:42:46,140
environment it was the larger AWS

1124
00:42:46,140 --> 00:42:48,359
environment two and a half days into the

1125
00:42:48,359 --> 00:42:50,579
process they say oh no you know we have

1126
00:42:50,579 --> 00:42:52,260
another Amazon account we forgot to tell

1127
00:42:52,260 --> 00:42:54,960
you about and it had double the number

1128
00:42:54,960 --> 00:42:56,700
of assets then everything that we

1129
00:42:56,700 --> 00:42:59,760
explored so far so restarting the

1130
00:42:59,760 --> 00:43:01,680
investigation with double the amount of

1131
00:43:01,680 --> 00:43:03,960
assets that we are trying to cover is

1132
00:43:03,960 --> 00:43:06,060
painful but you can save that ahead of

1133
00:43:06,060 --> 00:43:07,440
time if you have some sort of asset

1134
00:43:07,440 --> 00:43:09,119
management I can recommend some products

1135
00:43:09,119 --> 00:43:10,740
if you want

1136
00:43:10,740 --> 00:43:12,660
uh if you care enough and want to

1137
00:43:12,660 --> 00:43:14,520
explore the tool if it's helpful for you

1138
00:43:14,520 --> 00:43:18,540
feel free it's open source go ahead

1139
00:43:18,540 --> 00:43:21,859
and with that any questions

1140
00:43:26,700 --> 00:43:28,500
thank you

1141
00:43:28,500 --> 00:43:31,440
Scentsy guy I've got to say

1142
00:43:31,440 --> 00:43:33,359
thank you for your expertise in the

1143
00:43:33,359 --> 00:43:35,640
unknown knowns where those knowns might

1144
00:43:35,640 --> 00:43:37,319
even just be as simple as an end map

1145
00:43:37,319 --> 00:43:40,680
scan and exercising whatever tool you've

1146
00:43:40,680 --> 00:43:41,880
got regularly

1147
00:43:41,880 --> 00:43:44,400
question for you though yeah the root

1148
00:43:44,400 --> 00:43:46,380
cause seems to be the original work not

1149
00:43:46,380 --> 00:43:48,359
being mirrored correctly by corporates

1150
00:43:48,359 --> 00:43:50,339
I've got one in mind but I won't mention

1151
00:43:50,339 --> 00:43:51,420
them

1152
00:43:51,420 --> 00:43:54,240
and specifically when stelman recoded

1153
00:43:54,240 --> 00:43:57,240
Kerberos took it home when everyone said

1154
00:43:57,240 --> 00:43:59,640
oh great we can do A.D and failed to put

1155
00:43:59,640 --> 00:44:01,560
the one-third that closed that Loop

1156
00:44:01,560 --> 00:44:03,119
create that delay

1157
00:44:03,119 --> 00:44:05,040
do we need a new class defense around

1158
00:44:05,040 --> 00:44:06,839
our active directory in the light of log

1159
00:44:06,839 --> 00:44:09,319
4J

1160
00:44:10,680 --> 00:44:12,960
um good question

1161
00:44:12,960 --> 00:44:14,960
um

1162
00:44:15,000 --> 00:44:17,760
the bottom line was that active

1163
00:44:17,760 --> 00:44:20,280
directories were not usually directly

1164
00:44:20,280 --> 00:44:22,619
manipulated by log4j for most instances

1165
00:44:22,619 --> 00:44:25,560
that we've seen however once you have a

1166
00:44:25,560 --> 00:44:27,960
remote code execution on some piece

1167
00:44:27,960 --> 00:44:30,540
inside the network you can do lateral

1168
00:44:30,540 --> 00:44:32,819
movement and what we've seen was that a

1169
00:44:32,819 --> 00:44:34,680
lot of time the entry point was logged

1170
00:44:34,680 --> 00:44:36,960
for J but other than an entry point it

1171
00:44:36,960 --> 00:44:38,700
wasn't used to anything else because

1172
00:44:38,700 --> 00:44:40,800
usually the machine that the log

1173
00:44:40,800 --> 00:44:42,720
historian or the login gesture whatever

1174
00:44:42,720 --> 00:44:44,880
the machine does that scale bulk

1175
00:44:44,880 --> 00:44:46,800
manipulation of logs was not an

1176
00:44:46,800 --> 00:44:49,140
interesting machine in and by itself but

1177
00:44:49,140 --> 00:44:50,880
it's a foothold inside the network where

1178
00:44:50,880 --> 00:44:53,880
you can spend out to do other things so

1179
00:44:53,880 --> 00:44:56,280
we did see network scans run from those

1180
00:44:56,280 --> 00:44:58,980
machines we saw hops to other machines

1181
00:44:58,980 --> 00:45:01,140
like if there are shared credentials Etc

1182
00:45:01,140 --> 00:45:05,420
so usually it's just a point of entry

1183
00:45:05,640 --> 00:45:08,839
other questions please

1184
00:45:13,560 --> 00:45:15,540
thanks very interesting um I'd like to

1185
00:45:15,540 --> 00:45:17,280
take you up on your offer of of

1186
00:45:17,280 --> 00:45:18,780
assistance with regardless asset

1187
00:45:18,780 --> 00:45:20,760
Discovery where we we have a problem

1188
00:45:20,760 --> 00:45:23,280
with regards proliferation of cloud

1189
00:45:23,280 --> 00:45:26,940
assets across insert name of cloud

1190
00:45:26,940 --> 00:45:28,859
service provider here where will we

1191
00:45:28,859 --> 00:45:30,000
start

1192
00:45:30,000 --> 00:45:33,540
okay so the that problem is actually as

1193
00:45:33,540 --> 00:45:35,160
I see it broken down into two different

1194
00:45:35,160 --> 00:45:37,560
areas I'll first start with the caveat

1195
00:45:37,560 --> 00:45:40,500
uh as a company we are not resellers for

1196
00:45:40,500 --> 00:45:42,599
anyone so we try to keep ourselves

1197
00:45:42,599 --> 00:45:45,420
unbiased we did find two specific

1198
00:45:45,420 --> 00:45:48,599
products to be very very useful the

1199
00:45:48,599 --> 00:45:51,060
first one is axonius so if you're aware

1200
00:45:51,060 --> 00:45:53,460
of it if not I can connect you it's a

1201
00:45:53,460 --> 00:45:55,079
very good asset management program it

1202
00:45:55,079 --> 00:45:57,300
does its own Discovery it can do amazing

1203
00:45:57,300 --> 00:46:00,000
things for large-scale networks and for

1204
00:46:00,000 --> 00:46:03,180
us as IR people coming in trying to

1205
00:46:03,180 --> 00:46:05,819
understand what you actually have it's

1206
00:46:05,819 --> 00:46:07,800
it's a boon it's something amazing to

1207
00:46:07,800 --> 00:46:10,140
work with because we have extremely good

1208
00:46:10,140 --> 00:46:12,839
visibility into your asset inventory the

1209
00:46:12,839 --> 00:46:14,520
other thing is a company called Rumble

1210
00:46:14,520 --> 00:46:17,040
which was recently rebranded is run zero

1211
00:46:17,040 --> 00:46:19,079
they do a kind of network discovery

1212
00:46:19,079 --> 00:46:21,000
network-based Discovery so they will

1213
00:46:21,000 --> 00:46:22,680
scan the network repeatedly to try to

1214
00:46:22,680 --> 00:46:24,660
find new assets different techniques

1215
00:46:24,660 --> 00:46:26,640
bottom line they do the same thing they

1216
00:46:26,640 --> 00:46:28,980
try to create a list or an inventory of

1217
00:46:28,980 --> 00:46:31,079
all of your assets that includes Cloud

1218
00:46:31,079 --> 00:46:35,339
on-premise multi-cloud hybrids Etc

1219
00:46:35,339 --> 00:46:37,200
oh catch me later I'll give you more

1220
00:46:37,200 --> 00:46:38,880
details

1221
00:46:38,880 --> 00:46:41,460
yeah and today

1222
00:46:41,460 --> 00:46:43,920
where it was still doing the enrichment

1223
00:46:43,920 --> 00:46:46,440
but it was not vulnerable and if they

1224
00:46:46,440 --> 00:46:48,300
did could your tool tell the difference

1225
00:46:48,300 --> 00:46:51,119
yeah this this log4j has reached back to

1226
00:46:51,119 --> 00:46:52,319
me but it's okay because that one's been

1227
00:46:52,319 --> 00:46:55,200
patched so as far as I'm aware yes and

1228
00:46:55,200 --> 00:46:56,839
no which is the best answer

1229
00:46:56,839 --> 00:46:59,760
what they've done is that a first they

1230
00:46:59,760 --> 00:47:02,339
uh they added a flag or actually they

1231
00:47:02,339 --> 00:47:04,380
exposed an existing flag saying turn off

1232
00:47:04,380 --> 00:47:06,720
all remote Discovery so that was like

1233
00:47:06,720 --> 00:47:08,819
the first type of mitigation was don't

1234
00:47:08,819 --> 00:47:10,500
allow the log4j to make any outside

1235
00:47:10,500 --> 00:47:13,920
calls but that broke other things so

1236
00:47:13,920 --> 00:47:17,040
they uh finessed it to don't do any kind

1237
00:47:17,040 --> 00:47:19,440
of remote outside of my scope of IP

1238
00:47:19,440 --> 00:47:21,300
addresses calls but keep it in the

1239
00:47:21,300 --> 00:47:23,280
internal Network kind of thing that has

1240
00:47:23,280 --> 00:47:26,339
its own benefits and on issues as well

1241
00:47:26,339 --> 00:47:30,960
because it might give you uh some sort

1242
00:47:30,960 --> 00:47:33,240
of limitation into what kind of payloads

1243
00:47:33,240 --> 00:47:34,800
you can execute but it doesn't actually

1244
00:47:34,800 --> 00:47:36,660
stop it because it can circumvent it in

1245
00:47:36,660 --> 00:47:40,140
other ways the bottom line is that there

1246
00:47:40,140 --> 00:47:41,700
is no bulletproof Solutions like another

1247
00:47:41,700 --> 00:47:44,460
added layer of security the best thing

1248
00:47:44,460 --> 00:47:46,020
that you can do if you actually own the

1249
00:47:46,020 --> 00:47:48,839
code that if you don't use remote this

1250
00:47:48,839 --> 00:47:51,240
remote enrichment just turn off the flag

1251
00:47:51,240 --> 00:47:53,760
you'll be perfectly safe if you do need

1252
00:47:53,760 --> 00:47:56,400
those remote enrichments talking to ldap

1253
00:47:56,400 --> 00:47:58,619
doing database lookups whatever then you

1254
00:47:58,619 --> 00:48:00,599
need to think very carefully how would

1255
00:48:00,599 --> 00:48:02,099
you secure this against something that's

1256
00:48:02,099 --> 00:48:04,020
basically an input controlled by an

1257
00:48:04,020 --> 00:48:06,440
attacker

1258
00:48:13,079 --> 00:48:15,260
thank you very much what is your

1259
00:48:15,260 --> 00:48:18,119
approach to uh

1260
00:48:18,119 --> 00:48:22,920
uh uh scan your application Assets in

1261
00:48:22,920 --> 00:48:25,859
terms of log4j so let's say you have

1262
00:48:25,859 --> 00:48:29,460
hundreds of job applications in your

1263
00:48:29,460 --> 00:48:31,079
infrastructure

1264
00:48:31,079 --> 00:48:35,540
how would you scan that and uh

1265
00:48:35,640 --> 00:48:37,680
do you mean in a situation where you own

1266
00:48:37,680 --> 00:48:39,720
the code or where you need to scan a

1267
00:48:39,720 --> 00:48:42,359
black box Network yes you own the code

1268
00:48:42,359 --> 00:48:44,339
yes okay if you own the code I think the

1269
00:48:44,339 --> 00:48:46,260
best tool that I'm aware of right now is

1270
00:48:46,260 --> 00:48:49,859
Snick snyk they do an amazing job of

1271
00:48:49,859 --> 00:48:54,060
doing dependency checks and doing a

1272
00:48:54,060 --> 00:48:55,920
static analysis of your code trying to

1273
00:48:55,920 --> 00:48:57,300
find out what kind of vulnerabilities

1274
00:48:57,300 --> 00:49:00,660
you're importing inside your dependency

1275
00:49:00,660 --> 00:49:03,119
chain so they're a very good tool for

1276
00:49:03,119 --> 00:49:04,619
that there are other tools similar to

1277
00:49:04,619 --> 00:49:06,540
them just look at whatever competitor

1278
00:49:06,540 --> 00:49:09,599
snake in Google you'll find others the

1279
00:49:09,599 --> 00:49:12,480
bottom line here is usually that you

1280
00:49:12,480 --> 00:49:14,280
take on a lot of responsibility when you

1281
00:49:14,280 --> 00:49:16,380
you print Import in your code and

1282
00:49:16,380 --> 00:49:17,460
usually you don't know what kind of

1283
00:49:17,460 --> 00:49:19,800
issues you're bringing with it that kind

1284
00:49:19,800 --> 00:49:21,240
of problem is not only security related

1285
00:49:21,240 --> 00:49:23,640
a lot of times companies will import

1286
00:49:23,640 --> 00:49:26,339
license issues and legal issues into

1287
00:49:26,339 --> 00:49:28,740
their code base but not by not scanning

1288
00:49:28,740 --> 00:49:30,180
for what kind of libraries the

1289
00:49:30,180 --> 00:49:32,520
developers are ingesting into their code

1290
00:49:32,520 --> 00:49:34,740
so it's not just a cyber issue there are

1291
00:49:34,740 --> 00:49:36,599
other types of products that try to give

1292
00:49:36,599 --> 00:49:39,020
you an overview of what kind of

1293
00:49:39,020 --> 00:49:41,460
Licensing training you're doing inside

1294
00:49:41,460 --> 00:49:43,680
your code which is a very similar

1295
00:49:43,680 --> 00:49:47,040
problem to that dependency issue

1296
00:49:47,040 --> 00:49:50,060
that answers the question

1297
00:49:50,520 --> 00:49:52,800
anyone else anymore

1298
00:49:52,800 --> 00:49:55,079
so our last word for me I'll be hanging

1299
00:49:55,079 --> 00:49:56,940
out if any anybody wants to chat with me

1300
00:49:56,940 --> 00:49:58,500
I'll be out available for more questions

1301
00:49:58,500 --> 00:50:00,599
thank you very much thank you thank you

1302
00:50:00,599 --> 00:50:03,140
very much guy

