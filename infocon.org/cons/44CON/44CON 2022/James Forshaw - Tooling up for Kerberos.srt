1
00:00:00,900 --> 00:00:04,100
so yeah I

2
00:00:04,440 --> 00:00:06,180
did get asked to do this at last minute

3
00:00:06,180 --> 00:00:08,400
but right this is the same presentation

4
00:00:08,400 --> 00:00:11,099
I was going to give anyway so uh if

5
00:00:11,099 --> 00:00:12,059
you're

6
00:00:12,059 --> 00:00:17,940
interested in a keynote of the really

7
00:00:17,940 --> 00:00:20,279
big problems of today in the security

8
00:00:20,279 --> 00:00:22,020
industry I'm afraid you're going to have

9
00:00:22,020 --> 00:00:25,080
to be disappointed so

10
00:00:25,080 --> 00:00:27,240
let's go through

11
00:00:27,240 --> 00:00:29,699
um talking about Kerberos

12
00:00:29,699 --> 00:00:31,140
clearly everyone's favorite

13
00:00:31,140 --> 00:00:34,079
Authentication Protocol

14
00:00:34,079 --> 00:00:35,540
um

15
00:00:35,540 --> 00:00:38,640
I'm going to do obviously the usual very

16
00:00:38,640 --> 00:00:40,559
quick like what the hell is Kerberos and

17
00:00:40,559 --> 00:00:43,440
why you why she should you care and I'm

18
00:00:43,440 --> 00:00:45,420
also going to talk about

19
00:00:45,420 --> 00:00:48,800
um tooling for the purposes of

20
00:00:48,800 --> 00:00:51,000
manipulating care Bros and playing with

21
00:00:51,000 --> 00:00:52,200
Kerberos

22
00:00:52,200 --> 00:00:53,760
and of course Kerberos is quite

23
00:00:53,760 --> 00:00:56,760
important for things like red teaming

24
00:00:56,760 --> 00:00:59,399
exercises or in infrastructure testing

25
00:00:59,399 --> 00:01:02,579
because of course Windows Enterprise

26
00:01:02,579 --> 00:01:04,799
networks use Kerberos all the time to do

27
00:01:04,799 --> 00:01:06,420
authentication so it's kind of

28
00:01:06,420 --> 00:01:09,420
interesting to have a tooling to analyze

29
00:01:09,420 --> 00:01:11,820
the security aspects of it

30
00:01:11,820 --> 00:01:13,200
um but I'm also going to talk about my

31
00:01:13,200 --> 00:01:16,200
tooling and if you actually look at the

32
00:01:16,200 --> 00:01:18,000
types of things I

33
00:01:18,000 --> 00:01:20,460
have been doing recently like the bugs

34
00:01:20,460 --> 00:01:21,780
that I've been reporting in Google

35
00:01:21,780 --> 00:01:23,880
project zero you'll notice that there

36
00:01:23,880 --> 00:01:26,040
have been a bit of a theme of late

37
00:01:26,040 --> 00:01:27,360
of

38
00:01:27,360 --> 00:01:29,700
Windows authentication and Kerberos

39
00:01:29,700 --> 00:01:31,619
specifically vulnerabilities finding

40
00:01:31,619 --> 00:01:33,840
interesting bugs in Kerberos an

41
00:01:33,840 --> 00:01:35,880
interesting behaviors in Kerberos which

42
00:01:35,880 --> 00:01:38,280
I have found by writing my own tooling

43
00:01:38,280 --> 00:01:39,900
and I want to kind of show some of that

44
00:01:39,900 --> 00:01:42,540
tooling today so that you perhaps can

45
00:01:42,540 --> 00:01:45,119
also look for your own bugs in in the

46
00:01:45,119 --> 00:01:46,979
Kerberos stack and actually try and find

47
00:01:46,979 --> 00:01:49,439
interesting stuff there and as we go

48
00:01:49,439 --> 00:01:51,780
through there'll be plenty of demos

49
00:01:51,780 --> 00:01:53,939
um all in Powershell pretty much because

50
00:01:53,939 --> 00:01:56,640
that's just the types of things I write

51
00:01:56,640 --> 00:01:59,040
so the link is there

52
00:01:59,040 --> 00:02:01,560
um over tooling is all always on GitHub

53
00:02:01,560 --> 00:02:04,079
now it isn't just like Kerberos only

54
00:02:04,079 --> 00:02:05,880
stuff there's loads and loads of Tooling

55
00:02:05,880 --> 00:02:07,979
in there for doing Windows uh security

56
00:02:07,979 --> 00:02:10,919
analysis which is why it's called attack

57
00:02:10,919 --> 00:02:12,540
service analysis tools but it actually

58
00:02:12,540 --> 00:02:16,500
does a whole lot more than just that

59
00:02:16,500 --> 00:02:19,379
so why should I care about Kerberos

60
00:02:19,379 --> 00:02:21,959
well because it is used

61
00:02:21,959 --> 00:02:24,599
in an awful lot of Enterprise networks

62
00:02:24,599 --> 00:02:26,580
across the world now Microsoft would

63
00:02:26,580 --> 00:02:28,860
prefer that you start using some more

64
00:02:28,860 --> 00:02:31,980
modern protocols if you're using Azure

65
00:02:31,980 --> 00:02:34,200
active directory you might be using

66
00:02:34,200 --> 00:02:35,220
um

67
00:02:35,220 --> 00:02:38,040
ever sort of like oauth based off

68
00:02:38,040 --> 00:02:39,720
education protocols but also they've

69
00:02:39,720 --> 00:02:42,180
implemented like HTTP based

70
00:02:42,180 --> 00:02:44,400
authentication protocols which actually

71
00:02:44,400 --> 00:02:46,620
are kind of just Kerberos but they've

72
00:02:46,620 --> 00:02:48,840
just changed the the structure

73
00:02:48,840 --> 00:02:51,120
so some of the principles of Kerberos

74
00:02:51,120 --> 00:02:53,640
are still actually kind of applicable uh

75
00:02:53,640 --> 00:02:55,879
today

76
00:02:56,760 --> 00:02:59,160
now there's plenty of Kerberos tooling

77
00:02:59,160 --> 00:03:00,239
out there

78
00:03:00,239 --> 00:03:03,120
um if you have done a lot of this sort

79
00:03:03,120 --> 00:03:04,739
of stuff a sort of red teaming exercises

80
00:03:04,739 --> 00:03:07,739
you've probably seen either cacio I'm

81
00:03:07,739 --> 00:03:08,879
not even sure I'm pronouncing that

82
00:03:08,879 --> 00:03:10,440
correctly or rubius

83
00:03:10,440 --> 00:03:13,500
these are explicitly offensive tooling

84
00:03:13,500 --> 00:03:16,140
like their their purpose is kind of so

85
00:03:16,140 --> 00:03:18,120
that you you found yourself on a machine

86
00:03:18,120 --> 00:03:20,280
somewhere and you want to manipulate

87
00:03:20,280 --> 00:03:23,159
Kerberos to do something interesting

88
00:03:23,159 --> 00:03:25,379
um but my tooling isn't about offensive

89
00:03:25,379 --> 00:03:27,840
tooling I would say mine is more like a

90
00:03:27,840 --> 00:03:29,519
library

91
00:03:29,519 --> 00:03:31,680
uh and so you have

92
00:03:31,680 --> 00:03:33,239
things like kerberus.net which is

93
00:03:33,239 --> 00:03:35,459
written in.net you've got Kerberos and

94
00:03:35,459 --> 00:03:38,400
go you've got Kerberos in Python all

95
00:03:38,400 --> 00:03:40,920
these different ones so what's so

96
00:03:40,920 --> 00:03:43,500
special about mine if if there's already

97
00:03:43,500 --> 00:03:46,319
existing libraries why did I do it well

98
00:03:46,319 --> 00:03:48,780
one of the reasons was I wrote it

99
00:03:48,780 --> 00:03:50,819
because I wanted to understand how

100
00:03:50,819 --> 00:03:54,680
Kerberos works and that is really a very

101
00:03:54,680 --> 00:03:58,319
Salient point for doing any security

102
00:03:58,319 --> 00:04:00,720
research is that

103
00:04:00,720 --> 00:04:03,060
yes you can rely on somebody else's code

104
00:04:03,060 --> 00:04:05,040
and somebody else's tooling

105
00:04:05,040 --> 00:04:07,260
but you don't necessarily don't fully

106
00:04:07,260 --> 00:04:09,959
understand how things work so for me at

107
00:04:09,959 --> 00:04:12,299
least it was kind of useful for me to

108
00:04:12,299 --> 00:04:14,280
rewrite a lot of The Primitives of

109
00:04:14,280 --> 00:04:16,079
Kerberos so that I could actually

110
00:04:16,079 --> 00:04:18,660
understand how it really worked

111
00:04:18,660 --> 00:04:20,699
of course you're not going to

112
00:04:20,699 --> 00:04:22,919
necessarily rewrite your own tooling

113
00:04:22,919 --> 00:04:25,380
but the other reason is I've written

114
00:04:25,380 --> 00:04:27,060
this with the explicit purpose of

115
00:04:27,060 --> 00:04:28,680
finding vulnerabilities and if that is

116
00:04:28,680 --> 00:04:31,139
your goal then great if your goal is to

117
00:04:31,139 --> 00:04:33,360
do red teaming exercises then someone

118
00:04:33,360 --> 00:04:35,580
like rubius is probably a better bet in

119
00:04:35,580 --> 00:04:38,120
many cases

120
00:04:38,820 --> 00:04:41,180
so

121
00:04:41,180 --> 00:04:44,759
backgrounds that's Kerberos simple you

122
00:04:44,759 --> 00:04:47,820
see nice happy locks right everyone is

123
00:04:47,820 --> 00:04:49,380
happy

124
00:04:49,380 --> 00:04:51,300
um

125
00:04:51,300 --> 00:04:54,960
it is actually quite simple in principle

126
00:04:54,960 --> 00:04:57,540
but is quite complicated when you

127
00:04:57,540 --> 00:05:00,900
actually look at it in actual detail but

128
00:05:00,900 --> 00:05:04,020
at a basic level every user in a

129
00:05:04,020 --> 00:05:06,660
Kerberos realm as they call it which is

130
00:05:06,660 --> 00:05:09,180
synonymous with like a Windows domain

131
00:05:09,180 --> 00:05:11,520
usually has some sort of long-term key

132
00:05:11,520 --> 00:05:13,139
material

133
00:05:13,139 --> 00:05:15,360
and this key is basically used to sort

134
00:05:15,360 --> 00:05:18,240
of prove that you are who you say you

135
00:05:18,240 --> 00:05:19,020
are

136
00:05:19,020 --> 00:05:20,759
and the simplest way of achieving that

137
00:05:20,759 --> 00:05:24,300
is by converting say your user's

138
00:05:24,300 --> 00:05:26,340
password into some sort of key material

139
00:05:26,340 --> 00:05:28,979
that you can you can access

140
00:05:28,979 --> 00:05:30,419
so the client

141
00:05:30,419 --> 00:05:33,000
Bob wants to log into his uh his

142
00:05:33,000 --> 00:05:35,639
workstation he can send a request to the

143
00:05:35,639 --> 00:05:38,520
KDC the key distribution center which is

144
00:05:38,520 --> 00:05:40,979
the sort of Kerberos domain controller

145
00:05:40,979 --> 00:05:45,139
basically and say hey I've got my key

146
00:05:45,139 --> 00:05:48,900
can you authenticate me and he goes sure

147
00:05:48,900 --> 00:05:52,620
and generates a ticket or specifically a

148
00:05:52,620 --> 00:05:55,680
ticket granting ticket and this is a

149
00:05:55,680 --> 00:05:57,360
special kind of artifact in Kerberos

150
00:05:57,360 --> 00:05:59,340
which allows you to then authenticate to

151
00:05:59,340 --> 00:06:01,800
different services

152
00:06:01,800 --> 00:06:03,600
when you want to do that service

153
00:06:03,600 --> 00:06:05,100
authentication say you want to contact

154
00:06:05,100 --> 00:06:08,100
an SMB server you would actually have to

155
00:06:08,100 --> 00:06:09,900
then take that ticket granting ticket

156
00:06:09,900 --> 00:06:12,419
and the associated key that you've been

157
00:06:12,419 --> 00:06:16,259
given and use that to generate a another

158
00:06:16,259 --> 00:06:18,960
request to the KDC to say hey can you

159
00:06:18,960 --> 00:06:21,780
also give me a ticket which corresponds

160
00:06:21,780 --> 00:06:23,360
to this service

161
00:06:23,360 --> 00:06:25,500
and that's using something called a

162
00:06:25,500 --> 00:06:27,720
service principle name and this is a

163
00:06:27,720 --> 00:06:30,180
cifs ABC

164
00:06:30,180 --> 00:06:31,620
and

165
00:06:31,620 --> 00:06:33,780
you can use that then to prove that you

166
00:06:33,780 --> 00:06:37,340
are who you say you are to the service

167
00:06:37,380 --> 00:06:38,039
um

168
00:06:38,039 --> 00:06:39,660
so one of the things that I've written

169
00:06:39,660 --> 00:06:42,960
in my tooling is actually to control

170
00:06:42,960 --> 00:06:46,259
this directly so these are all

171
00:06:46,259 --> 00:06:48,900
um like simple Powershell commands so

172
00:06:48,900 --> 00:06:50,400
the first one is like create that

173
00:06:50,400 --> 00:06:52,740
initial authentication request and this

174
00:06:52,740 --> 00:06:54,660
is literally like

175
00:06:54,660 --> 00:06:57,060
this hides a massive amount of

176
00:06:57,060 --> 00:06:59,759
complexity like Kerberos uses asn1

177
00:06:59,759 --> 00:07:01,560
everyone's favorite serialization

178
00:07:01,560 --> 00:07:04,560
protocol or data structure protocol

179
00:07:04,560 --> 00:07:07,080
uh and so it has to build this asm1

180
00:07:07,080 --> 00:07:08,759
structure which you can then send to the

181
00:07:08,759 --> 00:07:10,160
KDC

182
00:07:10,160 --> 00:07:12,720
the actual protocol itself is you've got

183
00:07:12,720 --> 00:07:14,400
to convert say the password into that

184
00:07:14,400 --> 00:07:16,860
key material which because you don't

185
00:07:16,860 --> 00:07:18,479
send the password directly it's always

186
00:07:18,479 --> 00:07:20,940
like a derived key

187
00:07:20,940 --> 00:07:24,060
um and so about one command generates

188
00:07:24,060 --> 00:07:26,160
that request but it doesn't actually do

189
00:07:26,160 --> 00:07:28,860
anything just yet you still got to send

190
00:07:28,860 --> 00:07:32,220
it to the KDC so you can use DNS to

191
00:07:32,220 --> 00:07:35,520
resolve the KDC address

192
00:07:35,520 --> 00:07:37,020
and then you can actually send that

193
00:07:37,020 --> 00:07:38,940
request to the domain controller or the

194
00:07:38,940 --> 00:07:42,960
KDC and get back your TGT

195
00:07:42,960 --> 00:07:44,520
now if you're used to things like

196
00:07:44,520 --> 00:07:47,580
rubious or Keo or

197
00:07:47,580 --> 00:07:50,400
um mimikats You probably used to use the

198
00:07:50,400 --> 00:07:53,400
Kirby file format and this is like a

199
00:07:53,400 --> 00:07:55,199
credential structure so you can actually

200
00:07:55,199 --> 00:07:57,180
Import and Export these tickets as well

201
00:07:57,180 --> 00:07:58,979
once you've got it so that you can save

202
00:07:58,979 --> 00:08:00,660
them you can copy them to say a Linux

203
00:08:00,660 --> 00:08:02,880
machine run different tooling depending

204
00:08:02,880 --> 00:08:05,580
on what you've got and so you could use

205
00:08:05,580 --> 00:08:07,919
this on a on a different command and

206
00:08:07,919 --> 00:08:10,500
I've also even though this is Windows

207
00:08:10,500 --> 00:08:11,539
specific

208
00:08:11,539 --> 00:08:14,819
my libraries are windows specific

209
00:08:14,819 --> 00:08:17,580
all this will actually work on on Linux

210
00:08:17,580 --> 00:08:19,800
if you just use net core

211
00:08:19,800 --> 00:08:21,720
so if you use Powershell core you can

212
00:08:21,720 --> 00:08:23,340
actually run these commands on a Linux

213
00:08:23,340 --> 00:08:25,139
machine and do all the Kerberos

214
00:08:25,139 --> 00:08:26,340
authentication because none of this

215
00:08:26,340 --> 00:08:29,840
relies on on Windows

216
00:08:31,680 --> 00:08:34,200
um you can also use some ticket caching

217
00:08:34,200 --> 00:08:35,640
so again there's another structure

218
00:08:35,640 --> 00:08:38,219
called the um the credential cache which

219
00:08:38,219 --> 00:08:40,320
you can manipulate

220
00:08:40,320 --> 00:08:43,559
and this just allows you to maintain

221
00:08:43,559 --> 00:08:45,300
like a list of tickets that you've

222
00:08:45,300 --> 00:08:48,120
already requested and it makes things

223
00:08:48,120 --> 00:08:50,220
easier to uh to actually handle the

224
00:08:50,220 --> 00:08:51,300
structures

225
00:08:51,300 --> 00:08:53,399
and then just finally there's also some

226
00:08:53,399 --> 00:08:55,019
key handling

227
00:08:55,019 --> 00:08:56,580
um

228
00:08:56,580 --> 00:08:58,500
obviously the keys you need to derive

229
00:08:58,500 --> 00:09:01,019
from the passwords or well most of the

230
00:09:01,019 --> 00:09:01,980
time you have to drive from the

231
00:09:01,980 --> 00:09:05,640
passwords but you can also get them in

232
00:09:05,640 --> 00:09:09,060
HEX format so we'll see cases where we

233
00:09:09,060 --> 00:09:11,940
need to convert Keys into

234
00:09:11,940 --> 00:09:15,060
um like something that my tooling can

235
00:09:15,060 --> 00:09:19,740
use from a hex based string basically

236
00:09:19,740 --> 00:09:21,420
and from that you can actually just

237
00:09:21,420 --> 00:09:23,519
export and import key tabs and again

238
00:09:23,519 --> 00:09:26,220
this is like a standard format

239
00:09:26,220 --> 00:09:28,140
um like usually used by the MIT

240
00:09:28,140 --> 00:09:29,880
libraries so again if you have something

241
00:09:29,880 --> 00:09:32,279
on Linux and you can generate the keys

242
00:09:32,279 --> 00:09:34,800
on a Windows machine you can Port this

243
00:09:34,800 --> 00:09:37,440
across to a Linux box and then re-import

244
00:09:37,440 --> 00:09:39,860
them there

245
00:09:39,959 --> 00:09:41,880
so

246
00:09:41,880 --> 00:09:44,399
nope

247
00:09:44,399 --> 00:09:46,260
I have to uh

248
00:09:46,260 --> 00:09:49,519
log in my VMS

249
00:09:49,800 --> 00:09:50,640
um

250
00:09:50,640 --> 00:09:53,459
so uh

251
00:09:53,459 --> 00:09:56,279
as I say you can just this is just

252
00:09:56,279 --> 00:09:58,980
a simple Windows machine it doesn't have

253
00:09:58,980 --> 00:10:00,600
to be the main join because of course

254
00:10:00,600 --> 00:10:02,700
the libraries you don't have to uh

255
00:10:02,700 --> 00:10:05,580
necessarily uh join the domains on that

256
00:10:05,580 --> 00:10:10,580
but this does allow you to um

257
00:10:10,860 --> 00:10:14,160
um run this on on your domain so you can

258
00:10:14,160 --> 00:10:18,600
just do this new Kerberos as request

259
00:10:18,600 --> 00:10:19,320
um

260
00:10:19,320 --> 00:10:21,839
in this particular case we can

261
00:10:21,839 --> 00:10:22,620
um

262
00:10:22,620 --> 00:10:24,600
either specify a key

263
00:10:24,600 --> 00:10:27,480
uh there's also something called PK in

264
00:10:27,480 --> 00:10:29,279
it which allows you to use a certificate

265
00:10:29,279 --> 00:10:31,260
to do authentication it does that as

266
00:10:31,260 --> 00:10:33,360
well we'll just use the password for now

267
00:10:33,360 --> 00:10:35,040
because of course

268
00:10:35,040 --> 00:10:37,260
passwords easiest

269
00:10:37,260 --> 00:10:41,040
give it the client we'll give him Alice

270
00:10:41,040 --> 00:10:43,320
and then his realm which is currently

271
00:10:43,320 --> 00:10:45,540
domain.local and as I say that doesn't

272
00:10:45,540 --> 00:10:48,660
actually then go anywhere just yet

273
00:10:48,660 --> 00:10:52,200
but instead what we got to do is

274
00:10:52,200 --> 00:10:56,160
uh we can send the TGT

275
00:10:56,160 --> 00:11:00,720
um to the Kerberos KDC

276
00:11:00,720 --> 00:11:03,839
I hope if I do send

277
00:11:03,839 --> 00:11:07,019
and just requests and hopefully

278
00:11:07,019 --> 00:11:09,899
it should just work

279
00:11:09,899 --> 00:11:11,880
so the the interesting thing about all

280
00:11:11,880 --> 00:11:15,079
this is of course

281
00:11:15,420 --> 00:11:17,519
um you've now got your Kerberos tickets

282
00:11:17,519 --> 00:11:21,180
and because this is all just a uh object

283
00:11:21,180 --> 00:11:22,019
model

284
00:11:22,019 --> 00:11:25,320
you can actually uh like print off

285
00:11:25,320 --> 00:11:27,779
information about

286
00:11:27,779 --> 00:11:29,700
that ticket so you could you could

287
00:11:29,700 --> 00:11:31,320
inspect it manually if you wanted to

288
00:11:31,320 --> 00:11:33,899
there's various formatting commands

289
00:11:33,899 --> 00:11:35,519
and so this is the structure of the

290
00:11:35,519 --> 00:11:36,959
ticket

291
00:11:36,959 --> 00:11:39,540
but unfortunately it's all encrypted and

292
00:11:39,540 --> 00:11:41,279
in this particular case it's encrypted

293
00:11:41,279 --> 00:11:43,620
using a key which we don't directly have

294
00:11:43,620 --> 00:11:45,600
access to so

295
00:11:45,600 --> 00:11:47,700
um well you shouldn't have access to it

296
00:11:47,700 --> 00:11:50,220
this is the key which is owned by the

297
00:11:50,220 --> 00:11:53,160
KDC and of course if you had this key

298
00:11:53,160 --> 00:11:56,279
you can basically pretend to be anybody

299
00:11:56,279 --> 00:11:57,959
you like on the domain which would be

300
00:11:57,959 --> 00:11:59,820
probably bad would you ever really be

301
00:11:59,820 --> 00:12:01,800
considered a bad thing

302
00:12:01,800 --> 00:12:02,579
um

303
00:12:02,579 --> 00:12:04,500
but in this case we don't happen to have

304
00:12:04,500 --> 00:12:07,740
it however we could potentially get it

305
00:12:07,740 --> 00:12:09,540
um

306
00:12:09,540 --> 00:12:12,120
I have a get keys function

307
00:12:12,120 --> 00:12:15,000
if I just change this to

308
00:12:15,000 --> 00:12:18,440
curb TGT

309
00:12:18,480 --> 00:12:21,240
so this is using

310
00:12:21,240 --> 00:12:23,760
um a module called DS internals which I

311
00:12:23,760 --> 00:12:26,220
didn't write but this allows you to

312
00:12:26,220 --> 00:12:29,220
basically use replication to query any

313
00:12:29,220 --> 00:12:31,320
key in the domain so we can just get the

314
00:12:31,320 --> 00:12:34,019
Kerberos TGT key and then we can decrypt

315
00:12:34,019 --> 00:12:36,779
that um

316
00:12:36,779 --> 00:12:40,019
that uh that ticket and see what it

317
00:12:40,019 --> 00:12:42,600
actually contains so let's let's hope

318
00:12:42,600 --> 00:12:45,360
this actually works

319
00:12:45,360 --> 00:12:48,420
um in this particular case

320
00:12:48,420 --> 00:12:49,440
um

321
00:12:49,440 --> 00:12:51,180
we can just convert them this using this

322
00:12:51,180 --> 00:12:53,160
get kerbross key

323
00:12:53,160 --> 00:12:54,600
and we can actually then convert that

324
00:12:54,600 --> 00:12:55,920
into

325
00:12:55,920 --> 00:12:59,100
um into real keys so get

326
00:12:59,100 --> 00:13:00,660
get keys

327
00:13:00,660 --> 00:13:03,240
I type in my super secret administrator

328
00:13:03,240 --> 00:13:04,740
password which of course most people

329
00:13:04,740 --> 00:13:06,660
shouldn't know this is a domain

330
00:13:06,660 --> 00:13:07,740
administrator

331
00:13:07,740 --> 00:13:09,120
okay

332
00:13:09,120 --> 00:13:11,220
and we should now have

333
00:13:11,220 --> 00:13:13,139
a few keys for

334
00:13:13,139 --> 00:13:17,180
the curb TGT user okay so hopefully

335
00:13:17,180 --> 00:13:20,459
we can now decrypt

336
00:13:20,459 --> 00:13:22,079
this so

337
00:13:22,079 --> 00:13:27,680
we go decrypt and then go Keys zero

338
00:13:30,839 --> 00:13:33,680
we should hopefully

339
00:13:35,820 --> 00:13:38,639
apparently I can't type today

340
00:13:38,639 --> 00:13:41,360
hahaha

341
00:13:41,760 --> 00:13:43,860
one of those mornings

342
00:13:43,860 --> 00:13:46,139
okay so now we've actually got a

343
00:13:46,139 --> 00:13:50,600
substantial amount more data in here so

344
00:13:51,600 --> 00:13:53,519
this is now the ticket which has been

345
00:13:53,519 --> 00:13:56,160
fully decrypted and again it prints out

346
00:13:56,160 --> 00:13:58,079
all the useful information you might be

347
00:13:58,079 --> 00:13:59,700
interested in

348
00:13:59,700 --> 00:14:00,540
um

349
00:14:00,540 --> 00:14:02,639
things like the uh the privileged

350
00:14:02,639 --> 00:14:04,560
attribute certificate this is how

351
00:14:04,560 --> 00:14:07,680
Kerberos identifies who you are to

352
00:14:07,680 --> 00:14:11,040
everybody else and it contains like your

353
00:14:11,040 --> 00:14:13,920
your user Sid your user information your

354
00:14:13,920 --> 00:14:16,200
user groups and we'll see an example of

355
00:14:16,200 --> 00:14:18,899
how this can be abused later on to do

356
00:14:18,899 --> 00:14:21,000
some interesting stuff

357
00:14:21,000 --> 00:14:21,899
um

358
00:14:21,899 --> 00:14:24,120
as I say normally you can't decrypt this

359
00:14:24,120 --> 00:14:26,459
but in certain cases you can

360
00:14:26,459 --> 00:14:29,000
okay

361
00:14:30,300 --> 00:14:33,600
so that is that was using like actual

362
00:14:33,600 --> 00:14:35,220
like manual

363
00:14:35,220 --> 00:14:37,339
um

364
00:14:37,860 --> 00:14:39,959
manually authenticating to the to the

365
00:14:39,959 --> 00:14:42,000
domain but of course you may find

366
00:14:42,000 --> 00:14:44,579
yourself like you may just want to

367
00:14:44,579 --> 00:14:47,040
access Kerberos for the current user

368
00:14:47,040 --> 00:14:48,600
who's already logged on you don't want

369
00:14:48,600 --> 00:14:51,360
to actually call out to the KDC and

370
00:14:51,360 --> 00:14:54,839
windows actually provides a set of apis

371
00:14:54,839 --> 00:14:57,120
to interact with Kerberos in a sort of

372
00:14:57,120 --> 00:14:59,880
AG like simplistic form

373
00:14:59,880 --> 00:15:01,920
um in uh sort of abstract form it's

374
00:15:01,920 --> 00:15:03,360
designed for all different types of

375
00:15:03,360 --> 00:15:07,860
authentication like ntlm Kerberos but

376
00:15:07,860 --> 00:15:11,040
uh the the main sort of apis we need at

377
00:15:11,040 --> 00:15:12,839
least on the client is this initialized

378
00:15:12,839 --> 00:15:15,480
security context and this will allow

379
00:15:15,480 --> 00:15:18,180
your process to get access to your

380
00:15:18,180 --> 00:15:20,220
Kerberos authentication without ever

381
00:15:20,220 --> 00:15:21,959
knowing your own keys or your own

382
00:15:21,959 --> 00:15:24,240
password necessarily so of course if you

383
00:15:24,240 --> 00:15:26,459
find yourself on a machine

384
00:15:26,459 --> 00:15:29,579
you can use this to get Kerberos

385
00:15:29,579 --> 00:15:32,420
authentication running

386
00:15:32,579 --> 00:15:33,300
um

387
00:15:33,300 --> 00:15:36,779
so again I've got apis to to handle this

388
00:15:36,779 --> 00:15:40,079
so these wrap or those existing win32

389
00:15:40,079 --> 00:15:42,839
apis in in Powershell commands and

390
00:15:42,839 --> 00:15:45,480
provide them in in my opinion a fairly

391
00:15:45,480 --> 00:15:46,740
easy

392
00:15:46,740 --> 00:15:50,399
easy relatively speaking you to use API

393
00:15:50,399 --> 00:15:53,220
set or command set so we have like you

394
00:15:53,220 --> 00:15:54,839
need to get a credential handle which

395
00:15:54,839 --> 00:15:58,079
says I want to use Kerberos please

396
00:15:58,079 --> 00:16:01,139
um you then need uh to call that

397
00:16:01,139 --> 00:16:03,060
initialized security context

398
00:16:03,060 --> 00:16:05,639
and that will return back

399
00:16:05,639 --> 00:16:06,720
um

400
00:16:06,720 --> 00:16:09,540
Kerberos AP request which could be used

401
00:16:09,540 --> 00:16:11,399
to send to the service for that you need

402
00:16:11,399 --> 00:16:13,139
the service principal name so in this

403
00:16:13,139 --> 00:16:15,060
case we just picked like an archery one

404
00:16:15,060 --> 00:16:18,000
and again as I say I've already in this

405
00:16:18,000 --> 00:16:20,940
case if you do format LSA auth token you

406
00:16:20,940 --> 00:16:22,800
can actually format like the AP request

407
00:16:22,800 --> 00:16:25,560
in its entirety or decrypt it as I say

408
00:16:25,560 --> 00:16:29,060
in in this particular case

409
00:16:29,459 --> 00:16:30,420
um

410
00:16:30,420 --> 00:16:32,579
on the server side you can also do the

411
00:16:32,579 --> 00:16:34,079
server side and the interesting thing

412
00:16:34,079 --> 00:16:36,120
about the server side from a security

413
00:16:36,120 --> 00:16:38,820
research perspective is that once you've

414
00:16:38,820 --> 00:16:40,800
done the Authentication

415
00:16:40,800 --> 00:16:44,220
you can then get out the access token

416
00:16:44,220 --> 00:16:46,259
associated with that authentication and

417
00:16:46,259 --> 00:16:48,300
potentially you could impersonate it or

418
00:16:48,300 --> 00:16:50,820
do nasty things to it and gain

419
00:16:50,820 --> 00:16:52,380
additional privileges privilege

420
00:16:52,380 --> 00:16:54,180
escalation on the local system

421
00:16:54,180 --> 00:16:55,620
so those are the sort of things that

422
00:16:55,620 --> 00:16:59,360
I've been looking for of late

423
00:16:59,519 --> 00:17:02,220
um the user itself also has their own

424
00:17:02,220 --> 00:17:04,859
system ticket cache associated with them

425
00:17:04,859 --> 00:17:07,500
so any ticket that you see being

426
00:17:07,500 --> 00:17:09,540
accessed

427
00:17:09,540 --> 00:17:10,799
um

428
00:17:10,799 --> 00:17:13,500
get stored inside the ticket cache so it

429
00:17:13,500 --> 00:17:14,880
doesn't have to keep going out to the

430
00:17:14,880 --> 00:17:17,819
KDC every single time and say hey give

431
00:17:17,819 --> 00:17:19,439
me that ticket again because I forgot I

432
00:17:19,439 --> 00:17:21,599
forgot the previous one

433
00:17:21,599 --> 00:17:24,000
um so you can actually query that and

434
00:17:24,000 --> 00:17:26,939
get access to key material for these

435
00:17:26,939 --> 00:17:29,580
tickets and actually make request

436
00:17:29,580 --> 00:17:31,919
yourself without Ever Getting Windows

437
00:17:31,919 --> 00:17:33,900
involved which is a powerful primitive

438
00:17:33,900 --> 00:17:37,460
which we'll see a use for in a second

439
00:17:37,500 --> 00:17:38,220
um

440
00:17:38,220 --> 00:17:41,880
now you can query your own tdt which is

441
00:17:41,880 --> 00:17:43,020
basically the root of all your

442
00:17:43,020 --> 00:17:45,660
authentication but Windows generously

443
00:17:45,660 --> 00:17:47,820
zeros it out for you unless you're

444
00:17:47,820 --> 00:17:50,220
running as the the system privileged

445
00:17:50,220 --> 00:17:52,380
user it will Zero out your your session

446
00:17:52,380 --> 00:17:54,539
key which is kind of annoying

447
00:17:54,539 --> 00:17:55,919
um

448
00:17:55,919 --> 00:17:57,660
but it does turn out there's an

449
00:17:57,660 --> 00:17:59,940
interesting trick you can perform and

450
00:17:59,940 --> 00:18:01,679
this is pointed out by

451
00:18:01,679 --> 00:18:03,240
um

452
00:18:03,240 --> 00:18:04,440
um

453
00:18:04,440 --> 00:18:06,480
the author of mini cats like you can

454
00:18:06,480 --> 00:18:08,820
just do this and

455
00:18:08,820 --> 00:18:12,120
steal a TGT without

456
00:18:12,120 --> 00:18:14,640
Windows getting wise and it's basically

457
00:18:14,640 --> 00:18:16,799
abusing delegation now I don't know how

458
00:18:16,799 --> 00:18:19,140
many people know about unconstrained

459
00:18:19,140 --> 00:18:21,600
delegation in Kerberos it's generally

460
00:18:21,600 --> 00:18:24,120
considered a bad idea and it's one of

461
00:18:24,120 --> 00:18:25,500
these things that Microsoft have been

462
00:18:25,500 --> 00:18:27,179
trying to remove from Kerberos for a

463
00:18:27,179 --> 00:18:29,760
while but in this particular case it you

464
00:18:29,760 --> 00:18:31,740
works for our advantage because we can

465
00:18:31,740 --> 00:18:33,960
basically what actually happens under

466
00:18:33,960 --> 00:18:35,340
the hood

467
00:18:35,340 --> 00:18:38,100
is when you make a request say to

468
00:18:38,100 --> 00:18:39,840
um

469
00:18:39,840 --> 00:18:43,080
a service which has

470
00:18:43,080 --> 00:18:45,419
um delegation enabled so the KDC in this

471
00:18:45,419 --> 00:18:48,419
case always has delegation enabled it

472
00:18:48,419 --> 00:18:51,120
will actually package up your own TGT

473
00:18:51,120 --> 00:18:52,799
into that ticket

474
00:18:52,799 --> 00:18:55,200
but because of the Kerberos ticket cache

475
00:18:55,200 --> 00:18:57,720
we can extract the session key for the

476
00:18:57,720 --> 00:19:00,440
ticket you're sending out and decrypt

477
00:19:00,440 --> 00:19:03,780
that PGT and then just extract it

478
00:19:03,780 --> 00:19:06,660
ourselves and then use that to do fun

479
00:19:06,660 --> 00:19:09,419
funky stuff and again we'll we'll see an

480
00:19:09,419 --> 00:19:12,120
example of that in a bit so we can

481
00:19:12,120 --> 00:19:14,460
actually just extract that out fairly

482
00:19:14,460 --> 00:19:16,820
easily

483
00:19:16,919 --> 00:19:18,660
um

484
00:19:18,660 --> 00:19:21,419
if I can find the particular thing where

485
00:19:21,419 --> 00:19:23,160
is it there we are

486
00:19:23,160 --> 00:19:25,080
so this is

487
00:19:25,080 --> 00:19:27,860
A simple piece of code

488
00:19:27,860 --> 00:19:30,179
relatively speaking

489
00:19:30,179 --> 00:19:31,260
um

490
00:19:31,260 --> 00:19:34,559
and we use the windows apis

491
00:19:34,559 --> 00:19:37,500
to get this delegation ticket and then

492
00:19:37,500 --> 00:19:39,539
once we get it we can just get the TGT

493
00:19:39,539 --> 00:19:42,419
back and it's now our

494
00:19:42,419 --> 00:19:44,580
we have full access to that user's

495
00:19:44,580 --> 00:19:47,340
authentication credentials for Kerberos

496
00:19:47,340 --> 00:19:50,580
so I just run that and we should we

497
00:19:50,580 --> 00:19:52,939
should have

498
00:19:54,059 --> 00:19:56,640
again my typing is absolutely terrible

499
00:19:56,640 --> 00:19:58,559
this morning

500
00:19:58,559 --> 00:20:00,678
um

501
00:20:00,780 --> 00:20:03,419
and again it's just a

502
00:20:03,419 --> 00:20:05,400
it's just a TGT

503
00:20:05,400 --> 00:20:07,200
and from there you can actually use that

504
00:20:07,200 --> 00:20:10,440
in the same way you could use it before

505
00:20:10,440 --> 00:20:12,240
um

506
00:20:12,240 --> 00:20:14,820
so of course you can format it and all

507
00:20:14,820 --> 00:20:16,919
that sort of stuff

508
00:20:16,919 --> 00:20:19,980
but it is that and we should have just

509
00:20:19,980 --> 00:20:23,220
to prove a point we have a session key

510
00:20:23,220 --> 00:20:25,940
key

511
00:20:28,679 --> 00:20:31,860
and obviously that's not zero so we can

512
00:20:31,860 --> 00:20:33,600
actually use that TGT now without

513
00:20:33,600 --> 00:20:35,100
actually having to get Windows involved

514
00:20:35,100 --> 00:20:36,080
at all

515
00:20:36,080 --> 00:20:39,480
which is again quite useful for certain

516
00:20:39,480 --> 00:20:41,760
things as we'll see

517
00:20:41,760 --> 00:20:44,100
okay

518
00:20:44,100 --> 00:20:45,900
um

519
00:20:45,900 --> 00:20:48,679
so one of the things is

520
00:20:48,679 --> 00:20:51,740
if you have control over the

521
00:20:51,740 --> 00:20:54,179
authentication process

522
00:20:54,179 --> 00:20:56,580
uh you can actually bypass UAC as long

523
00:20:56,580 --> 00:20:58,500
as you're of course running as a as an

524
00:20:58,500 --> 00:21:00,240
administrator already right like

525
00:21:00,240 --> 00:21:03,480
Microsoft do not consider UAC to be a a

526
00:21:03,480 --> 00:21:04,919
security boundary

527
00:21:04,919 --> 00:21:07,860
so any bugs in the UAC are like yeah

528
00:21:07,860 --> 00:21:10,320
whatever we're not going to fix them why

529
00:21:10,320 --> 00:21:12,360
should we bother right

530
00:21:12,360 --> 00:21:13,860
um

531
00:21:13,860 --> 00:21:17,100
but of course it's such a important

532
00:21:17,100 --> 00:21:19,740
non-security boundary that they go to

533
00:21:19,740 --> 00:21:21,360
Great Lengths to make sure that you

534
00:21:21,360 --> 00:21:22,559
don't cross it

535
00:21:22,559 --> 00:21:25,260
until you cross it of course

536
00:21:25,260 --> 00:21:27,660
um which is one of the sort of weird

537
00:21:27,660 --> 00:21:29,580
weird parts of UAC like they've gone

538
00:21:29,580 --> 00:21:31,200
through so much effort

539
00:21:31,200 --> 00:21:33,360
but why bother if it was not a security

540
00:21:33,360 --> 00:21:35,520
boundary in the first place but there we

541
00:21:35,520 --> 00:21:36,720
go

542
00:21:36,720 --> 00:21:38,460
um so there's a structure which can end

543
00:21:38,460 --> 00:21:41,460
up inside a Kerberos ticket which says

544
00:21:41,460 --> 00:21:43,980
basically the user which created this

545
00:21:43,980 --> 00:21:45,840
Kerberos ticket

546
00:21:45,840 --> 00:21:48,780
um was actually a a low privileged user

547
00:21:48,780 --> 00:21:52,320
but running UAC so when you receive that

548
00:21:52,320 --> 00:21:53,760
ticket

549
00:21:53,760 --> 00:21:55,799
don't give a Madman privileges because

550
00:21:55,799 --> 00:21:57,960
that would be bad that would be crossing

551
00:21:57,960 --> 00:21:59,700
a non-security boundary and that would

552
00:21:59,700 --> 00:22:01,919
be the end of the world

553
00:22:01,919 --> 00:22:04,039
um

554
00:22:04,919 --> 00:22:07,980
and depending on the depending on what

555
00:22:07,980 --> 00:22:10,080
values are in that structure will depend

556
00:22:10,080 --> 00:22:11,520
on whether it actually filters your

557
00:22:11,520 --> 00:22:13,980
token which is the action of taking your

558
00:22:13,980 --> 00:22:15,900
administrator token

559
00:22:15,900 --> 00:22:18,360
and removing administrator access rights

560
00:22:18,360 --> 00:22:20,760
about your UAC user say you're

561
00:22:20,760 --> 00:22:23,360
connecting over SMB to the local system

562
00:22:23,360 --> 00:22:26,640
it will only connect as like a normal

563
00:22:26,640 --> 00:22:28,080
user it won't connect as an

564
00:22:28,080 --> 00:22:29,460
administrator user even if you're

565
00:22:29,460 --> 00:22:32,280
running as a UAC admin

566
00:22:32,280 --> 00:22:35,640
um so if we can affect this filtering

567
00:22:35,640 --> 00:22:40,380
process we can bypass UAC in that regard

568
00:22:40,380 --> 00:22:40,980
um

569
00:22:40,980 --> 00:22:43,020
so all we need to do

570
00:22:43,020 --> 00:22:46,559
realistically is can we remove this

571
00:22:46,559 --> 00:22:48,179
restriction entry can we remove this

572
00:22:48,179 --> 00:22:51,059
data from the Kerberos ticket

573
00:22:51,059 --> 00:22:54,240
well in normal cases no because if

574
00:22:54,240 --> 00:22:56,940
you're using the windows apis

575
00:22:56,940 --> 00:23:00,260
all that actually happens is

576
00:23:00,260 --> 00:23:03,360
it automatically inserts this data for

577
00:23:03,360 --> 00:23:05,400
you and you have no choice at that point

578
00:23:05,400 --> 00:23:07,620
like it's always going to do it but it

579
00:23:07,620 --> 00:23:10,620
turns out if you can control the entire

580
00:23:10,620 --> 00:23:13,380
Kerberos authentication process for that

581
00:23:13,380 --> 00:23:16,200
user then you can just not you can just

582
00:23:16,200 --> 00:23:19,140
say give me a service ticket but don't

583
00:23:19,140 --> 00:23:22,200
add this extra data because I don't want

584
00:23:22,200 --> 00:23:25,140
it just let me authenticate without this

585
00:23:25,140 --> 00:23:27,419
and that is all we need to do and once

586
00:23:27,419 --> 00:23:30,059
we've got things like the TGT we can do

587
00:23:30,059 --> 00:23:32,159
our own authentication and we can

588
00:23:32,159 --> 00:23:33,900
therefore get a ticket which doesn't

589
00:23:33,900 --> 00:23:38,299
have this UAC restriction in it

590
00:23:38,640 --> 00:23:39,299
um

591
00:23:39,299 --> 00:23:41,400
now in this particular case it's

592
00:23:41,400 --> 00:23:44,580
actually even simpler we don't actually

593
00:23:44,580 --> 00:23:46,799
need the TGT necessarily for the UAC

594
00:23:46,799 --> 00:23:50,520
admin bypass because if we request a

595
00:23:50,520 --> 00:23:52,380
service ticket we can get the session

596
00:23:52,380 --> 00:23:54,840
key for it now there's a special kind of

597
00:23:54,840 --> 00:23:57,600
operation called a renewal in in

598
00:23:57,600 --> 00:23:59,940
Kerberos because each service ticket has

599
00:23:59,940 --> 00:24:03,240
like an expiry date on it

600
00:24:03,240 --> 00:24:06,720
um but you can renew it and say Hey I

601
00:24:06,720 --> 00:24:08,640
want to get another couple of days on

602
00:24:08,640 --> 00:24:10,740
this ticket please can you do that for

603
00:24:10,740 --> 00:24:12,960
me and you send it to the KDC and the

604
00:24:12,960 --> 00:24:15,179
KDC has various policies as to whether

605
00:24:15,179 --> 00:24:17,539
it's allowed to do that or not

606
00:24:17,539 --> 00:24:20,700
but if it will do it it will return you

607
00:24:20,700 --> 00:24:24,240
a new ticket with a new date on it but

608
00:24:24,240 --> 00:24:25,980
crucially it will also allow you to

609
00:24:25,980 --> 00:24:28,799
specify any

610
00:24:28,799 --> 00:24:32,159
any of those extra data attributes that

611
00:24:32,159 --> 00:24:34,740
you like and of course you can specify

612
00:24:34,740 --> 00:24:37,500
nothing please it will not convert it

613
00:24:37,500 --> 00:24:40,020
will not copy across these structures

614
00:24:40,020 --> 00:24:42,780
into the new ticket from the old ticket

615
00:24:42,780 --> 00:24:45,419
so in this particular case we can just

616
00:24:45,419 --> 00:24:47,700
renew that ticket

617
00:24:47,700 --> 00:24:50,400
tell it to not specify any authorization

618
00:24:50,400 --> 00:24:53,280
data and then we can just log on to say

619
00:24:53,280 --> 00:24:55,140
the service control manager on the local

620
00:24:55,140 --> 00:24:57,780
system and say hey

621
00:24:57,780 --> 00:24:58,380
um

622
00:24:58,380 --> 00:25:03,000
can I just not be a restricted admin

623
00:25:03,000 --> 00:25:05,280
sure like I can now create services or

624
00:25:05,280 --> 00:25:07,860
whatever I need to do

625
00:25:07,860 --> 00:25:09,979
um

626
00:25:10,200 --> 00:25:13,140
so to do that you need to use you can

627
00:25:13,140 --> 00:25:15,240
use another command this Kerberos TGs

628
00:25:15,240 --> 00:25:16,500
request that's kind of like the as

629
00:25:16,500 --> 00:25:18,179
request one but for the service ticket

630
00:25:18,179 --> 00:25:20,580
and just give it an existing ticket with

631
00:25:20,580 --> 00:25:22,740
a session key and say I want to renew

632
00:25:22,740 --> 00:25:23,760
that please

633
00:25:23,760 --> 00:25:26,120
if you then send it to the KDC

634
00:25:26,120 --> 00:25:29,159
that will actually return you to service

635
00:25:29,159 --> 00:25:32,340
ticket and then you can actually my

636
00:25:32,340 --> 00:25:35,279
tooling has built basically a built-in

637
00:25:35,279 --> 00:25:37,159
library to construct

638
00:25:37,159 --> 00:25:41,400
Windows RPC clients on the fly it can be

639
00:25:41,400 --> 00:25:43,260
used to like extract RPC information

640
00:25:43,260 --> 00:25:45,120
from binaries and then just generate

641
00:25:45,120 --> 00:25:47,520
like a c-sharp client on the Fly and you

642
00:25:47,520 --> 00:25:48,720
can use arbitrary Kerberos

643
00:25:48,720 --> 00:25:50,880
authentication in that and we can use

644
00:25:50,880 --> 00:25:54,179
that to basically talk to the SCM as a

645
00:25:54,179 --> 00:25:56,820
as our full admin

646
00:25:56,820 --> 00:25:58,679
okay

647
00:25:58,679 --> 00:26:02,520
so we can demo that one

648
00:26:02,520 --> 00:26:06,020
down in UAC bypass

649
00:26:07,320 --> 00:26:08,340
um

650
00:26:08,340 --> 00:26:12,199
we are currently a non-admin

651
00:26:12,539 --> 00:26:14,880
hopefully

652
00:26:14,880 --> 00:26:16,140
uh

653
00:26:16,140 --> 00:26:18,840
yeah so if we try to say right

654
00:26:18,840 --> 00:26:20,100
hello

655
00:26:20,100 --> 00:26:21,900
to

656
00:26:21,900 --> 00:26:22,799
um

657
00:26:22,799 --> 00:26:25,380
the windows folder say it's going to

658
00:26:25,380 --> 00:26:27,059
fail on us

659
00:26:27,059 --> 00:26:29,760
because we're we're not admin okay

660
00:26:29,760 --> 00:26:32,000
we're definitely not admin

661
00:26:32,000 --> 00:26:36,360
but if we do uh UAC bypass

662
00:26:36,360 --> 00:26:39,659
in here what we do we get that that

663
00:26:39,659 --> 00:26:40,620
ticket

664
00:26:40,620 --> 00:26:43,460
for the service

665
00:26:43,460 --> 00:26:46,440
we then do the renewal just send it out

666
00:26:46,440 --> 00:26:48,659
to the renewal purposes and then we use

667
00:26:48,659 --> 00:26:52,559
this to construct our RPC client on the

668
00:26:52,559 --> 00:26:54,539
Fly

669
00:26:54,539 --> 00:26:56,700
and talk over Kerberos to it and then

670
00:26:56,700 --> 00:26:58,919
what we'll do is we'll just create a

671
00:26:58,919 --> 00:27:01,620
service which has full access to

672
00:27:01,620 --> 00:27:03,659
everybody so once it's created we can

673
00:27:03,659 --> 00:27:06,240
just manipulate it from a normal user we

674
00:27:06,240 --> 00:27:09,900
could change it to say run something of

675
00:27:09,900 --> 00:27:11,940
our choosing and get system privileges

676
00:27:11,940 --> 00:27:15,419
using that so let's just run that

677
00:27:15,419 --> 00:27:16,880
okay

678
00:27:16,880 --> 00:27:19,140
service name

679
00:27:19,140 --> 00:27:21,960
um hello 44 cotton I suppose probably

680
00:27:21,960 --> 00:27:23,640
always a good one

681
00:27:23,640 --> 00:27:27,059
um command we want to run Notepad

682
00:27:27,059 --> 00:27:28,320
which is

683
00:27:28,320 --> 00:27:30,360
ever since they got ever since they made

684
00:27:30,360 --> 00:27:32,520
calculator like that special weird

685
00:27:32,520 --> 00:27:35,039
modern UI you can't run calculator at

686
00:27:35,039 --> 00:27:37,020
system anymore or is very difficult to

687
00:27:37,020 --> 00:27:39,539
do so so notepad unfortunately is our

688
00:27:39,539 --> 00:27:42,360
our next best bet

689
00:27:42,360 --> 00:27:45,179
so it all just sort of magically works

690
00:27:45,179 --> 00:27:48,419
but we should hopefully see

691
00:27:48,419 --> 00:27:51,600
um we have now the hello 44 con

692
00:27:51,600 --> 00:27:53,820
service

693
00:27:53,820 --> 00:27:56,700
if we can just print data about that

694
00:27:56,700 --> 00:27:59,039
apparently I'll run notepad and we

695
00:27:59,039 --> 00:28:02,159
should even be able to start it

696
00:28:02,159 --> 00:28:05,159
um hello 44 com

697
00:28:05,159 --> 00:28:07,440
and of course it's not going to

698
00:28:07,440 --> 00:28:09,600
seemingly do an awful lot because of

699
00:28:09,600 --> 00:28:12,480
course notepad isn't a service

700
00:28:12,480 --> 00:28:14,760
but we do now have notepad running a

701
00:28:14,760 --> 00:28:15,840
system

702
00:28:15,840 --> 00:28:18,720
so again it's relatively easy to bypass

703
00:28:18,720 --> 00:28:20,940
UAC if you have full control over the

704
00:28:20,940 --> 00:28:23,520
Kerberos authentication process I'll let

705
00:28:23,520 --> 00:28:26,240
that time out

706
00:28:26,400 --> 00:28:27,860
foreign

707
00:28:27,860 --> 00:28:31,460
so another interesting area of Kerberos

708
00:28:31,460 --> 00:28:34,440
research is similar to the sort of UAC

709
00:28:34,440 --> 00:28:36,840
stuff if you have full control over the

710
00:28:36,840 --> 00:28:39,360
Kerberos authentication process

711
00:28:39,360 --> 00:28:41,640
you can use it to

712
00:28:41,640 --> 00:28:43,919
get admin privileges in The Limited

713
00:28:43,919 --> 00:28:45,360
service account so limited service

714
00:28:45,360 --> 00:28:48,240
accounts they're not administrators

715
00:28:48,240 --> 00:28:50,880
but they generally do have impersonate

716
00:28:50,880 --> 00:28:52,679
privilege and when you have impersonate

717
00:28:52,679 --> 00:28:55,140
privilege on Windows you can pretend to

718
00:28:55,140 --> 00:28:57,059
be anyone you like

719
00:28:57,059 --> 00:28:59,520
key is you need to have an access token

720
00:28:59,520 --> 00:29:02,840
for that anyone in order to actually

721
00:29:02,840 --> 00:29:05,880
exploit that in a useful way and so we

722
00:29:05,880 --> 00:29:07,860
can actually abuse Kerberos in this

723
00:29:07,860 --> 00:29:10,320
regard to get as an access token which

724
00:29:10,320 --> 00:29:12,419
we can impersonate and get admin

725
00:29:12,419 --> 00:29:15,740
privileges on the local machine

726
00:29:16,740 --> 00:29:19,020
um so the simplest One is using

727
00:29:19,020 --> 00:29:21,480
something called service for user to

728
00:29:21,480 --> 00:29:22,500
self

729
00:29:22,500 --> 00:29:24,559
there's a bit of a mouthful

730
00:29:24,559 --> 00:29:28,679
this is a a function of Kerberos which

731
00:29:28,679 --> 00:29:30,320
allows you to basically

732
00:29:30,320 --> 00:29:34,799
get a service ticket for any user but

733
00:29:34,799 --> 00:29:36,299
only for yourself

734
00:29:36,299 --> 00:29:39,120
so it effectively allows you to

735
00:29:39,120 --> 00:29:41,640
impersonate and that any user on the

736
00:29:41,640 --> 00:29:44,700
domain now the weird thing is there is

737
00:29:44,700 --> 00:29:46,440
actually a built-in API for this you can

738
00:29:46,440 --> 00:29:49,260
basically log on as a service for user

739
00:29:49,260 --> 00:29:50,820
to self user

740
00:29:50,820 --> 00:29:54,240
and you call LSA logon user that makes a

741
00:29:54,240 --> 00:29:56,760
request out of the KDC for you and it

742
00:29:56,760 --> 00:29:58,980
gives you an access token back however

743
00:29:58,980 --> 00:30:01,320
it gives you an access token back which

744
00:30:01,320 --> 00:30:03,899
is useless if you're running a system

745
00:30:03,899 --> 00:30:06,419
you can get back a useful access token

746
00:30:06,419 --> 00:30:09,360
but the access token you get back as a

747
00:30:09,360 --> 00:30:12,120
not a limited service account is locked

748
00:30:12,120 --> 00:30:13,880
so that you can't

749
00:30:13,880 --> 00:30:16,320
impersonate it and do useful things with

750
00:30:16,320 --> 00:30:17,159
that

751
00:30:17,159 --> 00:30:18,960
so that's kind of annoying but it

752
00:30:18,960 --> 00:30:21,480
actually is that's just a quirk of the

753
00:30:21,480 --> 00:30:24,360
apis that Microsoft implemented it's not

754
00:30:24,360 --> 00:30:26,700
actually how it really functions under

755
00:30:26,700 --> 00:30:28,020
the hood

756
00:30:28,020 --> 00:30:30,000
all it's doing is it's saying do you

757
00:30:30,000 --> 00:30:33,480
have this special TCB privilege if not

758
00:30:33,480 --> 00:30:36,360
get stuffed basically which is generous

759
00:30:36,360 --> 00:30:38,220
of it

760
00:30:38,220 --> 00:30:39,000
um

761
00:30:39,000 --> 00:30:41,640
so what we can do again now that we got

762
00:30:41,640 --> 00:30:45,000
that TGT we can make again arbitrary

763
00:30:45,000 --> 00:30:47,580
requests to the KDC to do whatever we

764
00:30:47,580 --> 00:30:49,559
like so if we're running as the network

765
00:30:49,559 --> 00:30:53,580
service user which so does two service

766
00:30:53,580 --> 00:30:55,440
accounts or two standard service

767
00:30:55,440 --> 00:30:58,320
accounts there's network service who has

768
00:30:58,320 --> 00:31:02,100
access to the the machines Kerberos

769
00:31:02,100 --> 00:31:03,179
account

770
00:31:03,179 --> 00:31:05,460
so every every computer has a Kerberos

771
00:31:05,460 --> 00:31:08,279
account and network service has access

772
00:31:08,279 --> 00:31:10,500
to that that Kerberos account and all

773
00:31:10,500 --> 00:31:13,620
the things that entail so it's TGT Etc

774
00:31:13,620 --> 00:31:15,779
however there is a second one called

775
00:31:15,779 --> 00:31:17,460
local service which doesn't have access

776
00:31:17,460 --> 00:31:18,899
to Kerberos and we'll have to come back

777
00:31:18,899 --> 00:31:20,220
to that in a second

778
00:31:20,220 --> 00:31:22,260
so if we get the TGT for that network

779
00:31:22,260 --> 00:31:24,840
service user we can actually do all

780
00:31:24,840 --> 00:31:26,520
those things that

781
00:31:26,520 --> 00:31:29,820
the system was doing for us when we

782
00:31:29,820 --> 00:31:33,120
called LSA logon user but never give it

783
00:31:33,120 --> 00:31:36,179
a chance to actually like restrict our

784
00:31:36,179 --> 00:31:38,039
access to it so we can just negotiate

785
00:31:38,039 --> 00:31:40,320
that get an access token and we've now

786
00:31:40,320 --> 00:31:43,500
got full access to that user

787
00:31:43,500 --> 00:31:47,039
so again we can go into here s for you

788
00:31:47,039 --> 00:31:48,779
to self

789
00:31:48,779 --> 00:31:49,440
um

790
00:31:49,440 --> 00:31:53,520
we query for users TGT get that back and

791
00:31:53,520 --> 00:31:55,200
then we can just make this request for

792
00:31:55,200 --> 00:31:57,320
this s4u to self

793
00:31:57,320 --> 00:32:00,600
for any username so for example we can

794
00:32:00,600 --> 00:32:03,659
say give me a ticket for the domain

795
00:32:03,659 --> 00:32:05,760
administrator now that won't give you

796
00:32:05,760 --> 00:32:08,159
access to the entire domain as domain

797
00:32:08,159 --> 00:32:09,419
administrator that would be a terrible

798
00:32:09,419 --> 00:32:11,940
thing but it will allow you to elevate

799
00:32:11,940 --> 00:32:15,299
privileges on the local machine

800
00:32:15,299 --> 00:32:17,880
uh we then just get an access token and

801
00:32:17,880 --> 00:32:20,100
in theory once we got that back we can

802
00:32:20,100 --> 00:32:22,620
then impersonate that user and get

803
00:32:22,620 --> 00:32:24,840
additional privileges

804
00:32:24,840 --> 00:32:29,159
um so in order to do that oops

805
00:32:29,159 --> 00:32:30,720
I wasn't expecting it to actually play

806
00:32:30,720 --> 00:32:32,460
audio though

807
00:32:32,460 --> 00:32:35,640
um let me just start a

808
00:32:35,640 --> 00:32:37,700
um

809
00:32:39,419 --> 00:32:41,279
start a process running as network

810
00:32:41,279 --> 00:32:43,080
service so who am I

811
00:32:43,080 --> 00:32:45,840
uh so we got network service we can do

812
00:32:45,840 --> 00:32:47,940
say get curb Ross ticket to query it's

813
00:32:47,940 --> 00:32:50,940
ticket cash and we should see we've got

814
00:32:50,940 --> 00:32:52,740
a couple of tgts

815
00:32:52,740 --> 00:32:54,840
etc etc in there

816
00:32:54,840 --> 00:32:58,500
so now if we do token equals s for you

817
00:32:58,500 --> 00:33:00,659
to self

818
00:33:00,659 --> 00:33:01,620
oh

819
00:33:01,620 --> 00:33:03,840
and we give it say administrator for a

820
00:33:03,840 --> 00:33:05,760
domain administrator

821
00:33:05,760 --> 00:33:07,320
okay

822
00:33:07,320 --> 00:33:11,240
we now have should have a token

823
00:33:11,240 --> 00:33:13,860
impersonation token and if we actually

824
00:33:13,860 --> 00:33:18,500
try and write to say uh oops

825
00:33:19,559 --> 00:33:21,419
if we go back to what we tried to do

826
00:33:21,419 --> 00:33:23,340
before and try and write to say the

827
00:33:23,340 --> 00:33:24,720
windows folder

828
00:33:24,720 --> 00:33:27,299
as network service this should fail

829
00:33:27,299 --> 00:33:28,860
and if it doesn't fail I've done

830
00:33:28,860 --> 00:33:30,720
something horribly wrong

831
00:33:30,720 --> 00:33:33,659
oops that's kind of annoying

832
00:33:33,659 --> 00:33:37,080
um okay definitely access denied however

833
00:33:37,080 --> 00:33:42,740
if I now wrap this in an impersonation

834
00:33:44,940 --> 00:33:47,760
we should have

835
00:33:47,760 --> 00:33:49,559
we get no errors which is always a good

836
00:33:49,559 --> 00:33:50,760
sign

837
00:33:50,760 --> 00:33:54,600
and this should now say hello

838
00:33:54,600 --> 00:33:56,159
okay

839
00:33:56,159 --> 00:33:58,679
so if you find yourself as say network

840
00:33:58,679 --> 00:34:01,580
service or equivalent you can use that

841
00:34:01,580 --> 00:34:04,559
Kerberos attack stuff to start like

842
00:34:04,559 --> 00:34:06,899
gaining additional Privileges and it's

843
00:34:06,899 --> 00:34:08,339
stuff which

844
00:34:08,339 --> 00:34:10,739
like you only sort of really find out

845
00:34:10,739 --> 00:34:12,899
where when you can just play with these

846
00:34:12,899 --> 00:34:14,040
sort of artifacts and actually

847
00:34:14,040 --> 00:34:16,619
manipulate things

848
00:34:16,619 --> 00:34:17,339
um

849
00:34:17,339 --> 00:34:20,040
but I did mention that

850
00:34:20,040 --> 00:34:22,099
um

851
00:34:23,040 --> 00:34:24,659
you've got a problem if your local

852
00:34:24,659 --> 00:34:27,359
service you don't have access to

853
00:34:27,359 --> 00:34:30,119
Kerberos like if I if I go back to here

854
00:34:30,119 --> 00:34:32,159
and start

855
00:34:32,159 --> 00:34:32,879
um

856
00:34:32,879 --> 00:34:34,260
oops

857
00:34:34,260 --> 00:34:37,320
I managed to close that down

858
00:34:37,320 --> 00:34:39,839
if I start

859
00:34:39,839 --> 00:34:42,119
a local service process

860
00:34:42,119 --> 00:34:45,740
and you get Kerberos ticket

861
00:34:49,500 --> 00:34:51,659
we get nothing and that's because local

862
00:34:51,659 --> 00:34:54,359
service has no access to your computer

863
00:34:54,359 --> 00:34:57,000
account so how do we get around that

864
00:34:57,000 --> 00:34:58,619
well

865
00:34:58,619 --> 00:35:01,140
um the one interesting thing is as long

866
00:35:01,140 --> 00:35:03,540
as you know your

867
00:35:03,540 --> 00:35:07,380
own user's key you can effectively fake

868
00:35:07,380 --> 00:35:08,700
an entire ticket

869
00:35:08,700 --> 00:35:10,619
and it's just that's kind of just by

870
00:35:10,619 --> 00:35:12,300
Design now there are protections against

871
00:35:12,300 --> 00:35:14,880
it so that that privileged attribute

872
00:35:14,880 --> 00:35:16,740
certificate has signatures which aren't

873
00:35:16,740 --> 00:35:18,720
supposed to allow you to do this

874
00:35:18,720 --> 00:35:20,880
however Windows bypasses those

875
00:35:20,880 --> 00:35:23,280
protections and those checks if your

876
00:35:23,280 --> 00:35:26,460
local service or network service or

877
00:35:26,460 --> 00:35:28,079
system

878
00:35:28,079 --> 00:35:31,320
and so we can just lie

879
00:35:31,320 --> 00:35:36,240
about our uh who we are and like just we

880
00:35:36,240 --> 00:35:38,579
can just create an arbitrary privileged

881
00:35:38,579 --> 00:35:39,960
attribute certificate give ourselves

882
00:35:39,960 --> 00:35:41,640
admin privilege all that sort of fun

883
00:35:41,640 --> 00:35:44,040
stuff and there's loads of little bits

884
00:35:44,040 --> 00:35:46,859
and pieces we can access in that regard

885
00:35:46,859 --> 00:35:48,720
if we could just craft their own pack

886
00:35:48,720 --> 00:35:51,480
but as a problem like we don't even at

887
00:35:51,480 --> 00:35:53,160
network service we don't know the

888
00:35:53,160 --> 00:35:55,079
Network Services password and it's key

889
00:35:55,079 --> 00:35:57,960
because that's like some randomly

890
00:35:57,960 --> 00:36:01,740
generated 200 character password which

891
00:36:01,740 --> 00:36:04,079
gets converted into a key

892
00:36:04,079 --> 00:36:07,980
so how are we going to do this well

893
00:36:07,980 --> 00:36:10,099
um

894
00:36:10,260 --> 00:36:13,200
it turns out that

895
00:36:13,200 --> 00:36:16,680
we can just authenticate to any domain

896
00:36:16,680 --> 00:36:19,380
we like and that domain controller that

897
00:36:19,380 --> 00:36:23,460
KDC can be anything we like and it

898
00:36:23,460 --> 00:36:25,940
returns and he said to be like

899
00:36:25,940 --> 00:36:29,099
now that would be kind of annoying to

900
00:36:29,099 --> 00:36:31,320
set up normally but it turns out that

901
00:36:31,320 --> 00:36:33,660
Windows provides a mechanism to

902
00:36:33,660 --> 00:36:35,339
basically say if you try and

903
00:36:35,339 --> 00:36:38,880
authenticate to fake.local as a domain

904
00:36:38,880 --> 00:36:41,099
well it's the main controller is

905
00:36:41,099 --> 00:36:43,140
actually on this address and in fact

906
00:36:43,140 --> 00:36:45,000
that domain controller can even be like

907
00:36:45,000 --> 00:36:48,540
on the Local Host if you so desire

908
00:36:48,540 --> 00:36:50,640
um so there's uh

909
00:36:50,640 --> 00:36:52,920
tooling to basically do that and then of

910
00:36:52,920 --> 00:36:54,420
course once you've got that you need to

911
00:36:54,420 --> 00:36:59,099
create a fake KDC now you could set up a

912
00:36:59,099 --> 00:37:00,960
server to do that you could build an

913
00:37:00,960 --> 00:37:03,599
entire Windows domain well no I'll just

914
00:37:03,599 --> 00:37:06,480
write my own KDC in in C sharp and then

915
00:37:06,480 --> 00:37:08,040
you can just authenticate to the local

916
00:37:08,040 --> 00:37:09,599
machine so

917
00:37:09,599 --> 00:37:12,420
the two commands there or the the bottom

918
00:37:12,420 --> 00:37:14,640
three commands are all you need to do to

919
00:37:14,640 --> 00:37:17,760
set up a fake KDC basically

920
00:37:17,760 --> 00:37:19,980
uh are running on the local local

921
00:37:19,980 --> 00:37:22,079
machine and then you can use the KDC

922
00:37:22,079 --> 00:37:25,619
pinning to uh do that and again

923
00:37:25,619 --> 00:37:28,560
um the KDC server will also run on Linux

924
00:37:28,560 --> 00:37:31,680
if you're if you're so inclined for that

925
00:37:31,680 --> 00:37:36,000
um so the idea here is that as our local

926
00:37:36,000 --> 00:37:38,240
service account we can

927
00:37:38,240 --> 00:37:42,300
pin our fake KDC to the local host or to

928
00:37:42,300 --> 00:37:45,960
a fake server Somewhere Out There

929
00:37:45,960 --> 00:37:47,760
um when it makes then the connection we

930
00:37:47,760 --> 00:37:50,040
can get it to create a ticket which we

931
00:37:50,040 --> 00:37:51,960
can then decrypt

932
00:37:51,960 --> 00:37:52,859
um

933
00:37:52,859 --> 00:37:55,020
because we control all the key materials

934
00:37:55,020 --> 00:37:57,240
so it doesn't matter what password we

935
00:37:57,240 --> 00:37:59,339
use for example we can say our password

936
00:37:59,339 --> 00:38:00,900
is password because it doesn't matter

937
00:38:00,900 --> 00:38:03,000
we're just authenticating is a

938
00:38:03,000 --> 00:38:03,859
completely

939
00:38:03,859 --> 00:38:06,839
unrelated user

940
00:38:06,839 --> 00:38:09,900
and we can then use that and because of

941
00:38:09,900 --> 00:38:12,119
the fact that they don't do the access

942
00:38:12,119 --> 00:38:14,099
the signature checking on the the

943
00:38:14,099 --> 00:38:16,200
privileged attribute certificates then

944
00:38:16,200 --> 00:38:17,880
we can get back an access token with

945
00:38:17,880 --> 00:38:20,640
virtually any groups we like and again

946
00:38:20,640 --> 00:38:22,619
even in local service account we can

947
00:38:22,619 --> 00:38:25,020
then use that to

948
00:38:25,020 --> 00:38:27,000
get administrative privileges on the

949
00:38:27,000 --> 00:38:29,040
local machine

950
00:38:29,040 --> 00:38:31,740
okay so we are running as local service

951
00:38:31,740 --> 00:38:33,420
on this machine

952
00:38:33,420 --> 00:38:36,540
or in in this Powershell but we can see

953
00:38:36,540 --> 00:38:37,920
it

954
00:38:37,920 --> 00:38:40,560
um where are we

955
00:38:40,560 --> 00:38:42,060
nope

956
00:38:42,060 --> 00:38:44,900
it's in here somewhere

957
00:38:45,780 --> 00:38:46,800
um

958
00:38:46,800 --> 00:38:48,859
create token

959
00:38:48,859 --> 00:38:51,359
I really should have named these better

960
00:38:51,359 --> 00:38:53,040
for the particular demos that I was

961
00:38:53,040 --> 00:38:55,920
doing so I can remember what it is so in

962
00:38:55,920 --> 00:38:59,400
this case we're we'll create a KDC uh

963
00:38:59,400 --> 00:39:03,420
we'll set it to to a sid of of an actual

964
00:39:03,420 --> 00:39:06,540
real user like the Alice user

965
00:39:06,540 --> 00:39:08,460
um because what that allows us to do is

966
00:39:08,460 --> 00:39:10,980
it it ensures that we get their groups

967
00:39:10,980 --> 00:39:12,359
when we log on

968
00:39:12,359 --> 00:39:15,119
because we can't add like the built-in

969
00:39:15,119 --> 00:39:18,060
administrators group but we can add the

970
00:39:18,060 --> 00:39:20,339
domain administrators group and the

971
00:39:20,339 --> 00:39:22,020
domain administrators group on a domain

972
00:39:22,020 --> 00:39:24,540
join system usually grants the local

973
00:39:24,540 --> 00:39:26,640
administrator group as well so we can

974
00:39:26,640 --> 00:39:28,440
use that to get full administrator

975
00:39:28,440 --> 00:39:29,760
access

976
00:39:29,760 --> 00:39:32,640
we create a user we just give it the

977
00:39:32,640 --> 00:39:34,560
username of LOLs

978
00:39:34,560 --> 00:39:37,280
because why not and password a password

979
00:39:37,280 --> 00:39:39,900
if we start the server running on the

980
00:39:39,900 --> 00:39:42,359
local host and then we just pin that to

981
00:39:42,359 --> 00:39:43,440
that

982
00:39:43,440 --> 00:39:43,980
um

983
00:39:43,980 --> 00:39:47,339
pin that fake realm to our local machine

984
00:39:47,339 --> 00:39:50,099
and then we just do authentication and

985
00:39:50,099 --> 00:39:51,480
once we've done Windows authentication

986
00:39:51,480 --> 00:39:54,119
we get back an access token which we can

987
00:39:54,119 --> 00:39:56,520
again impersonate as local system

988
00:39:56,520 --> 00:39:59,460
and or as a local service

989
00:39:59,460 --> 00:40:01,380
and get ourselves administrative

990
00:40:01,380 --> 00:40:03,119
privileges

991
00:40:03,119 --> 00:40:04,320
okay

992
00:40:04,320 --> 00:40:05,940
so

993
00:40:05,940 --> 00:40:09,300
am I am I on the right one yep okay

994
00:40:09,300 --> 00:40:11,040
so we are a local service on this

995
00:40:11,040 --> 00:40:12,359
machine

996
00:40:12,359 --> 00:40:15,119
again if we do create token

997
00:40:15,119 --> 00:40:17,760
oops

998
00:40:17,760 --> 00:40:18,960
okay

999
00:40:18,960 --> 00:40:22,140
nothing thickly interesting no errors or

1000
00:40:22,140 --> 00:40:24,599
no errors are always good

1001
00:40:24,599 --> 00:40:25,380
um

1002
00:40:25,380 --> 00:40:27,720
we can actually

1003
00:40:27,720 --> 00:40:30,119
print that out

1004
00:40:30,119 --> 00:40:35,460
and like our user is fake LOLs

1005
00:40:35,460 --> 00:40:37,440
because why not

1006
00:40:37,440 --> 00:40:39,320
um but we are

1007
00:40:39,320 --> 00:40:42,660
a built-in administrator

1008
00:40:42,660 --> 00:40:45,900
so again because our local service has

1009
00:40:45,900 --> 00:40:50,780
impersonate privileges we can

1010
00:40:51,060 --> 00:40:52,560
now

1011
00:40:52,560 --> 00:40:53,400
um

1012
00:40:53,400 --> 00:40:57,020
do the same thing we did before

1013
00:41:00,119 --> 00:41:02,099
and then we can say

1014
00:41:02,099 --> 00:41:03,119
um

1015
00:41:03,119 --> 00:41:05,280
from local service

1016
00:41:05,280 --> 00:41:08,040
High 44 cop

1017
00:41:08,040 --> 00:41:10,680
set content

1018
00:41:10,680 --> 00:41:12,000
and we should be able to just write that

1019
00:41:12,000 --> 00:41:16,040
into 44 conduct text

1020
00:41:16,500 --> 00:41:19,320
no errors and we can just read that back

1021
00:41:19,320 --> 00:41:21,780
out just to just to prove that we are

1022
00:41:21,780 --> 00:41:24,420
not lying to you

1023
00:41:24,420 --> 00:41:26,280
44 Khan

1024
00:41:26,280 --> 00:41:30,079
there we go so

1025
00:41:30,119 --> 00:41:32,119
um

1026
00:41:32,400 --> 00:41:35,000
we are pretty much at time

1027
00:41:35,000 --> 00:41:38,760
so I thought uh

1028
00:41:38,760 --> 00:41:42,420
obviously it'd be nice to get like

1029
00:41:42,420 --> 00:41:44,220
demonstrate some interesting

1030
00:41:44,220 --> 00:41:45,599
vulnerability

1031
00:41:45,599 --> 00:41:47,579
um that I've found

1032
00:41:47,579 --> 00:41:49,079
um because all those all those things

1033
00:41:49,079 --> 00:41:50,940
I've shown you up to now they're just

1034
00:41:50,940 --> 00:41:53,880
kind of by Design they're just

1035
00:41:53,880 --> 00:41:55,680
not something Microsoft's are going to

1036
00:41:55,680 --> 00:41:58,380
fix or certain ones you can fix by

1037
00:41:58,380 --> 00:42:00,900
enabling the credential guard which sort

1038
00:42:00,900 --> 00:42:03,240
of protects Kerberos on your local

1039
00:42:03,240 --> 00:42:05,820
Machine by hiding a lot of Kerberos bits

1040
00:42:05,820 --> 00:42:09,180
and pieces like the keys inside

1041
00:42:09,180 --> 00:42:10,200
um

1042
00:42:10,200 --> 00:42:12,240
inside a virtual machine on the local

1043
00:42:12,240 --> 00:42:14,119
system

1044
00:42:14,119 --> 00:42:17,220
but this is an this is a vulnerability

1045
00:42:17,220 --> 00:42:19,800
that I found about three months ago and

1046
00:42:19,800 --> 00:42:20,940
I thought it was kind of an interesting

1047
00:42:20,940 --> 00:42:22,500
one unfortunately

1048
00:42:22,500 --> 00:42:26,099
uh we generally have a policy now that

1049
00:42:26,099 --> 00:42:28,800
or project zero has a policy where we

1050
00:42:28,800 --> 00:42:30,960
can't discuss the full details of

1051
00:42:30,960 --> 00:42:34,079
vulnerability for up to 30 days after

1052
00:42:34,079 --> 00:42:36,119
the Patch was released the idea being

1053
00:42:36,119 --> 00:42:37,140
that

1054
00:42:37,140 --> 00:42:40,619
people want to patch but it's they don't

1055
00:42:40,619 --> 00:42:42,240
want people telling them what's actually

1056
00:42:42,240 --> 00:42:43,800
vulnerable and how the vulnerability

1057
00:42:43,800 --> 00:42:45,240
works from least improve the concept

1058
00:42:45,240 --> 00:42:47,820
because like maybe they would get

1059
00:42:47,820 --> 00:42:49,440
attacked in the meantime now you could

1060
00:42:49,440 --> 00:42:51,839
say that people should patch quicker all

1061
00:42:51,839 --> 00:42:53,099
that sort of stuff but that's never

1062
00:42:53,099 --> 00:42:55,680
never likely to happen but anyway so

1063
00:42:55,680 --> 00:42:57,900
unfortunately I can't go into real like

1064
00:42:57,900 --> 00:43:00,480
my new detail about this at this issue

1065
00:43:00,480 --> 00:43:02,520
which is a shame because it's really fun

1066
00:43:02,520 --> 00:43:06,060
issue however fortunately the the uh

1067
00:43:06,060 --> 00:43:08,880
advisory does actually give some hints

1068
00:43:08,880 --> 00:43:11,400
as to what's the problem is so the hints

1069
00:43:11,400 --> 00:43:13,020
are basically

1070
00:43:13,020 --> 00:43:15,480
um it's a bug in the in the way in which

1071
00:43:15,480 --> 00:43:18,480
Kerberos is handling the rc4 encryption

1072
00:43:18,480 --> 00:43:20,040
scheme

1073
00:43:20,040 --> 00:43:23,460
and this is kind of known that rc4 is a

1074
00:43:23,460 --> 00:43:25,260
bad thing

1075
00:43:25,260 --> 00:43:28,440
um but the sort of best attacks on rc4

1076
00:43:28,440 --> 00:43:31,859
in in Kerberos have been brute forcing

1077
00:43:31,859 --> 00:43:36,140
the user's password based on rc4

1078
00:43:36,660 --> 00:43:38,940
um but this particular case is it's

1079
00:43:38,940 --> 00:43:41,400
still kind of a brute forcing operation

1080
00:43:41,400 --> 00:43:45,599
but it can be done in in enough time

1081
00:43:45,599 --> 00:43:47,160
that I can finish before the end of this

1082
00:43:47,160 --> 00:43:48,839
presentation

1083
00:43:48,839 --> 00:43:51,900
um and as we'll see it's pretty quick uh

1084
00:43:51,900 --> 00:43:53,280
the other thing is in this particular

1085
00:43:53,280 --> 00:43:55,380
case there's two variants of this this

1086
00:43:55,380 --> 00:43:59,220
one uh basically you can when you do the

1087
00:43:59,220 --> 00:44:00,780
Authentication

1088
00:44:00,780 --> 00:44:03,300
uh what's normally supposed to happen is

1089
00:44:03,300 --> 00:44:06,119
you send a blob of data which is

1090
00:44:06,119 --> 00:44:08,339
encrypted using the user's key to the

1091
00:44:08,339 --> 00:44:12,540
KDC and the KDC can then go oh that that

1092
00:44:12,540 --> 00:44:14,420
client knows that user's password

1093
00:44:14,420 --> 00:44:17,700
therefore I'm willing to send back the

1094
00:44:17,700 --> 00:44:20,460
initial TGT to them which is normally

1095
00:44:20,460 --> 00:44:21,660
encrypted and contains like the

1096
00:44:21,660 --> 00:44:24,960
encrypted key associated with that

1097
00:44:24,960 --> 00:44:26,700
um but there's a way of turning that off

1098
00:44:26,700 --> 00:44:27,660
and this is like called

1099
00:44:27,660 --> 00:44:30,060
pre-authentication Data so you can

1100
00:44:30,060 --> 00:44:31,980
actually turn off this feature for

1101
00:44:31,980 --> 00:44:35,220
individual users now this particular

1102
00:44:35,220 --> 00:44:36,780
variant if you turn off

1103
00:44:36,780 --> 00:44:38,880
pre-authentication data and this is

1104
00:44:38,880 --> 00:44:41,760
actually written in the advisory

1105
00:44:41,760 --> 00:44:44,520
um it means that I can authenticate as

1106
00:44:44,520 --> 00:44:46,920
that user just by a relatively simple

1107
00:44:46,920 --> 00:44:49,859
brute forcing operation

1108
00:44:49,859 --> 00:44:51,859
um

1109
00:44:54,180 --> 00:44:59,400
so on here we have uh user Bob

1110
00:44:59,400 --> 00:45:01,440
um because I'm not particularly good at

1111
00:45:01,440 --> 00:45:03,900
naming things so I have Alice and Bob

1112
00:45:03,900 --> 00:45:04,920
right

1113
00:45:04,920 --> 00:45:06,420
come on

1114
00:45:06,420 --> 00:45:10,020
windows so terrible

1115
00:45:10,020 --> 00:45:11,640
um

1116
00:45:11,640 --> 00:45:13,920
and crucially in in these sort of

1117
00:45:13,920 --> 00:45:15,480
account options it's unfortunately it's

1118
00:45:15,480 --> 00:45:17,520
quite small and I can't make it very

1119
00:45:17,520 --> 00:45:21,660
much easily bigger so magnifier right is

1120
00:45:21,660 --> 00:45:23,640
actually there okay

1121
00:45:23,640 --> 00:45:25,859
so you can see there is this do not

1122
00:45:25,859 --> 00:45:29,520
require Kerberos pre-authentication and

1123
00:45:29,520 --> 00:45:32,160
as I say this doesn't just normally this

1124
00:45:32,160 --> 00:45:33,839
wouldn't normally allow you to trivially

1125
00:45:33,839 --> 00:45:37,200
get like like just run arbitrary code as

1126
00:45:37,200 --> 00:45:38,400
that user

1127
00:45:38,400 --> 00:45:41,940
what it does is it just stops you having

1128
00:45:41,940 --> 00:45:43,680
to prove that you know the key before

1129
00:45:43,680 --> 00:45:46,619
the KDC will return your data so

1130
00:45:46,619 --> 00:45:49,319
crucially because this is on on this

1131
00:45:49,319 --> 00:45:51,960
particular user we can attack it

1132
00:45:51,960 --> 00:45:55,140
so let's go back to

1133
00:45:55,140 --> 00:45:58,260
this okay you just close some things

1134
00:45:58,260 --> 00:46:02,240
down before we run

1135
00:46:02,940 --> 00:46:06,020
so go to our demos

1136
00:46:06,240 --> 00:46:08,299
um

1137
00:46:08,460 --> 00:46:09,599
see if we can remember what it's called

1138
00:46:09,599 --> 00:46:12,540
Park of course it is

1139
00:46:12,540 --> 00:46:13,079
um

1140
00:46:13,079 --> 00:46:15,420
right so

1141
00:46:15,420 --> 00:46:18,480
this is actually written in in C sharp

1142
00:46:18,480 --> 00:46:20,160
just because it was it was easier thing

1143
00:46:20,160 --> 00:46:21,140
to do

1144
00:46:21,140 --> 00:46:24,720
all those libraries that I've shown in

1145
00:46:24,720 --> 00:46:27,119
Powershell you can also access all that

1146
00:46:27,119 --> 00:46:30,380
that API set from

1147
00:46:30,380 --> 00:46:34,079
any.net API and as I say you can of

1148
00:46:34,079 --> 00:46:36,480
course use that in.net core on on Macos

1149
00:46:36,480 --> 00:46:39,240
or Linux it's primarily designed for

1150
00:46:39,240 --> 00:46:41,640
Windows usage so there's loads of apis

1151
00:46:41,640 --> 00:46:43,260
which probably will blow up immediately

1152
00:46:43,260 --> 00:46:46,200
if you try and use them but uh we should

1153
00:46:46,200 --> 00:46:48,660
be fine so

1154
00:46:48,660 --> 00:46:51,359
if I hit that

1155
00:46:51,359 --> 00:46:53,940
it's there it's thinking about it doing

1156
00:46:53,940 --> 00:46:55,619
some stuff doing some stuff doing some

1157
00:46:55,619 --> 00:46:57,240
stuff doing some stuff

1158
00:46:57,240 --> 00:46:58,680
okay

1159
00:46:58,680 --> 00:47:00,420
fingers crossed this is actually going

1160
00:47:00,420 --> 00:47:02,460
to work okay

1161
00:47:02,460 --> 00:47:06,180
so it is apparently got a TGT and it's

1162
00:47:06,180 --> 00:47:07,740
written it out to one of these Kirby

1163
00:47:07,740 --> 00:47:09,599
files

1164
00:47:09,599 --> 00:47:13,700
so I can import that

1165
00:47:14,940 --> 00:47:18,060
okay Bros ticket

1166
00:47:18,060 --> 00:47:20,280
path

1167
00:47:20,280 --> 00:47:24,140
Bob TGT oops

1168
00:47:24,380 --> 00:47:29,460
no I've broken something okay

1169
00:47:30,240 --> 00:47:31,980
I'm gonna have to do it manually which

1170
00:47:31,980 --> 00:47:34,319
is never a good idea

1171
00:47:34,319 --> 00:47:36,440
um

1172
00:47:39,780 --> 00:47:42,440
why is that

1173
00:47:42,980 --> 00:47:45,720
okay I've obviously uh done something

1174
00:47:45,720 --> 00:47:49,160
horribly wrong oh I know why

1175
00:47:50,040 --> 00:47:52,980
when the Microsoft have obviously done a

1176
00:47:52,980 --> 00:47:54,300
pretty good job of making everything

1177
00:47:54,300 --> 00:47:56,520
backwards compatible except for when

1178
00:47:56,520 --> 00:47:58,680
they don't make it backwards compatible

1179
00:47:58,680 --> 00:48:00,420
because

1180
00:48:00,420 --> 00:48:00,960
um

1181
00:48:00,960 --> 00:48:03,780
so that was using Powershell core and

1182
00:48:03,780 --> 00:48:06,480
Powershell core has slightly different

1183
00:48:06,480 --> 00:48:09,839
commands than normal Powershell because

1184
00:48:09,839 --> 00:48:11,460
it's annoying

1185
00:48:11,460 --> 00:48:14,099
because why not exactly

1186
00:48:14,099 --> 00:48:16,220
um

1187
00:48:16,380 --> 00:48:19,380
import cobross ticket okay so hopefully

1188
00:48:19,380 --> 00:48:21,900
this should this should work

1189
00:48:21,900 --> 00:48:24,800
okay

1190
00:48:25,980 --> 00:48:28,859
um and we can now

1191
00:48:28,859 --> 00:48:30,420
with that

1192
00:48:30,420 --> 00:48:32,480
um

1193
00:48:32,940 --> 00:48:35,520
actually access anything we like as Bob

1194
00:48:35,520 --> 00:48:39,740
we could obviously create um

1195
00:48:39,839 --> 00:48:42,720
a new TGs request

1196
00:48:42,720 --> 00:48:43,859
um

1197
00:48:43,859 --> 00:48:46,440
oops TGs reversed

1198
00:48:46,440 --> 00:48:49,079
credential TGT

1199
00:48:49,079 --> 00:48:50,040
um

1200
00:48:50,040 --> 00:48:54,540
and then give it a service name of

1201
00:48:54,540 --> 00:48:57,619
I like a machine

1202
00:48:57,960 --> 00:48:59,579
oops

1203
00:48:59,579 --> 00:49:01,859
uh

1204
00:49:01,859 --> 00:49:03,540
so obviously it's definitely one of

1205
00:49:03,540 --> 00:49:05,900
those days

1206
00:49:06,240 --> 00:49:08,240
um

1207
00:49:09,480 --> 00:49:12,480
but yeah so obviously in this particular

1208
00:49:12,480 --> 00:49:14,339
case

1209
00:49:14,339 --> 00:49:17,400
it's because I'm a complete idiot

1210
00:49:17,400 --> 00:49:22,099
and it's actually called ticket not TGT

1211
00:49:23,839 --> 00:49:28,380
domain.local yes thank you and then send

1212
00:49:28,380 --> 00:49:32,520
to Kerberos ADC request TGs

1213
00:49:32,520 --> 00:49:34,680
okay

1214
00:49:34,680 --> 00:49:36,839
and we get back

1215
00:49:36,839 --> 00:49:39,780
a ticket for that user

1216
00:49:39,780 --> 00:49:43,440
um for for Bob so

1217
00:49:43,440 --> 00:49:45,780
um we can then use that to

1218
00:49:45,780 --> 00:49:48,240
access anything as Bob and we never had

1219
00:49:48,240 --> 00:49:50,160
to know his password we never had to

1220
00:49:50,160 --> 00:49:53,640
actually ever see his password and just

1221
00:49:53,640 --> 00:49:55,680
Brute Force our way to Victory

1222
00:49:55,680 --> 00:49:58,260
unfortunately it's fixed so of course I

1223
00:49:58,260 --> 00:50:01,619
would recommend you uh

1224
00:50:01,619 --> 00:50:04,260
apply your Patches at the most expedient

1225
00:50:04,260 --> 00:50:06,540
time you can if you're running a Windows

1226
00:50:06,540 --> 00:50:08,220
domain

1227
00:50:08,220 --> 00:50:09,000
um

1228
00:50:09,000 --> 00:50:11,700
so thanks for listening to that I'm

1229
00:50:11,700 --> 00:50:13,560
sorry it wasn't uh

1230
00:50:13,560 --> 00:50:16,079
a boring dry keynote and instead was a

1231
00:50:16,079 --> 00:50:19,500
boring dry technical talk but in a sort

1232
00:50:19,500 --> 00:50:21,060
of unusual thing

1233
00:50:21,060 --> 00:50:22,560
I'm going to be in the workshop room

1234
00:50:22,560 --> 00:50:25,980
after workshop two I think

1235
00:50:25,980 --> 00:50:29,460
oh yeah okay and yeah you can in theory

1236
00:50:29,460 --> 00:50:31,319
ask me anything but of course caveats

1237
00:50:31,319 --> 00:50:32,819
are going to apply to that right because

1238
00:50:32,819 --> 00:50:34,560
there are certain things I will

1239
00:50:34,560 --> 00:50:36,060
definitely not be talking about in in

1240
00:50:36,060 --> 00:50:37,260
that

1241
00:50:37,260 --> 00:50:40,980
thanks for uh your time and uh have a

1242
00:50:40,980 --> 00:50:44,060
good rest of the conference

