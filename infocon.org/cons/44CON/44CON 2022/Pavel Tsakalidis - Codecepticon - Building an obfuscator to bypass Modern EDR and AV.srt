1
00:00:00,260 --> 00:00:03,240
uh hi everyone and thank you for joining

2
00:00:03,240 --> 00:00:05,880
this talk about concepticon which I hope

3
00:00:05,880 --> 00:00:07,799
it becomes part of your daily

4
00:00:07,799 --> 00:00:09,059
um Arsenal

5
00:00:09,059 --> 00:00:10,800
my name is Pablo sakalidis security

6
00:00:10,800 --> 00:00:13,920
delivery manager as uh just mentioned I

7
00:00:13,920 --> 00:00:15,540
used to be a developer and I currently

8
00:00:15,540 --> 00:00:18,180
specialize in delivering a red and

9
00:00:18,180 --> 00:00:20,340
purple team engagements and I'm a strong

10
00:00:20,340 --> 00:00:21,720
believer that purple theming is much

11
00:00:21,720 --> 00:00:24,840
much better than red teaming the agenda

12
00:00:24,840 --> 00:00:27,599
for today will be concepticon's origin

13
00:00:27,599 --> 00:00:30,060
story what it does the obfuscation

14
00:00:30,060 --> 00:00:33,600
techniques used across all

15
00:00:33,600 --> 00:00:36,540
um c-sharp VBA and Powershell modules

16
00:00:36,540 --> 00:00:38,760
and of course the Technologies used to

17
00:00:38,760 --> 00:00:41,219
do to kind of make make it work

18
00:00:41,219 --> 00:00:43,140
and we'll discuss some unintended

19
00:00:43,140 --> 00:00:45,059
consequences some tips something to do

20
00:00:45,059 --> 00:00:47,340
your life a lot easier

21
00:00:47,340 --> 00:00:50,940
so it All Began in February 2021 when I

22
00:00:50,940 --> 00:00:52,680
was an assumed compromise engagement and

23
00:00:52,680 --> 00:00:54,780
the client said we can't let you run an

24
00:00:54,780 --> 00:00:56,760
implant we can't let you run a soaps

25
00:00:56,760 --> 00:00:58,800
proxy but we still want you to evaluate

26
00:00:58,800 --> 00:01:01,219
our EDR and AV

27
00:01:01,219 --> 00:01:03,600
capabilities so I was like okay The

28
00:01:03,600 --> 00:01:04,799
Shield is going to be some sort of like

29
00:01:04,799 --> 00:01:06,659
obfuscation tools out there that I just

30
00:01:06,659 --> 00:01:08,880
use oversk tools bring them in and try

31
00:01:08,880 --> 00:01:09,960
to run

32
00:01:09,960 --> 00:01:12,600
I realized that most of the tools that

33
00:01:12,600 --> 00:01:13,740
are available

34
00:01:13,740 --> 00:01:15,659
they were either over obfuscating

35
00:01:15,659 --> 00:01:18,479
something making making it unusable or

36
00:01:18,479 --> 00:01:21,119
were not as customizable or they were

37
00:01:21,119 --> 00:01:23,640
just some plane scripts that do like

38
00:01:23,640 --> 00:01:25,380
um Replacements using regular

39
00:01:25,380 --> 00:01:27,600
Expressions as we say in the development

40
00:01:27,600 --> 00:01:29,340
world when you have a problem and you

41
00:01:29,340 --> 00:01:30,900
solve it with a regular expression now

42
00:01:30,900 --> 00:01:33,180
you have two problems and this is how

43
00:01:33,180 --> 00:01:36,180
concepticon was born concepticon's goal

44
00:01:36,180 --> 00:01:39,780
is to bypass AV and EDR fingerprinting

45
00:01:39,780 --> 00:01:41,579
it doesn't do any in-memory techniques

46
00:01:41,579 --> 00:01:43,619
anything challenging the kind of hooking

47
00:01:43,619 --> 00:01:44,880
and hooking processes trying to

48
00:01:44,880 --> 00:01:46,860
bypassing memory detection

49
00:01:46,860 --> 00:01:49,680
most cases that have currently used it

50
00:01:49,680 --> 00:01:52,259
include dropping the filter disk because

51
00:01:52,259 --> 00:01:54,180
let's say you find an open directory

52
00:01:54,180 --> 00:01:55,799
that allows execution and you can't run

53
00:01:55,799 --> 00:01:57,360
an implant just drop it there and just

54
00:01:57,360 --> 00:01:59,939
run it like 2015.

55
00:01:59,939 --> 00:02:02,340
it has been mostly used in Bible teams

56
00:02:02,340 --> 00:02:03,600
where you have like the freedom to fail

57
00:02:03,600 --> 00:02:05,700
so you can try and evaluate in a better

58
00:02:05,700 --> 00:02:08,038
in better conditions uh the

59
00:02:08,038 --> 00:02:10,500
um your clients capabilities

60
00:02:10,500 --> 00:02:11,940
but of course it has been used

61
00:02:11,940 --> 00:02:13,980
extensively in red teams as well

62
00:02:13,980 --> 00:02:16,020
originally it started as a C sharp

63
00:02:16,020 --> 00:02:18,540
obviously obfuscation tool only and then

64
00:02:18,540 --> 00:02:20,340
like while I was developing it I decided

65
00:02:20,340 --> 00:02:22,260
I'm going to add VBA and Powershell as

66
00:02:22,260 --> 00:02:23,220
well

67
00:02:23,220 --> 00:02:25,160
the difference between

68
00:02:25,160 --> 00:02:27,239
concepticon and other obfuscation tools

69
00:02:27,239 --> 00:02:28,920
is that concepticon targets the source

70
00:02:28,920 --> 00:02:31,379
code it doesn't take your assembly your

71
00:02:31,379 --> 00:02:33,480
compiled executable.net or whatever and

72
00:02:33,480 --> 00:02:35,340
then works with that it literally just

73
00:02:35,340 --> 00:02:37,020
you point it to the source code and it

74
00:02:37,020 --> 00:02:38,819
does its job it allows you to obfuscate

75
00:02:38,819 --> 00:02:40,500
the right

76
00:02:40,500 --> 00:02:42,720
command align arguments and then you can

77
00:02:42,720 --> 00:02:43,920
do whatever you want

78
00:02:43,920 --> 00:02:46,739
it has a lot of command line arguments

79
00:02:46,739 --> 00:02:48,720
so everything it can do leads back to

80
00:02:48,720 --> 00:02:51,540
command line argument and it already has

81
00:02:51,540 --> 00:02:53,040
profiles

82
00:02:53,040 --> 00:02:55,140
from some very common chart collection

83
00:02:55,140 --> 00:02:57,540
tools I would I would describe what the

84
00:02:57,540 --> 00:02:59,280
profile is fell down

85
00:02:59,280 --> 00:03:01,319
called septicon has been developed over

86
00:03:01,319 --> 00:03:03,660
the last year and a half that there have

87
00:03:03,660 --> 00:03:05,160
been a lot of Blood Sweat and beers

88
00:03:05,160 --> 00:03:07,319
involved but it has been vital tested

89
00:03:07,319 --> 00:03:09,959
against these environments

90
00:03:09,959 --> 00:03:12,420
as a bare minimum all of them have been

91
00:03:12,420 --> 00:03:14,220
like client environments I would I

92
00:03:14,220 --> 00:03:15,840
didn't use any kind of EDR with like

93
00:03:15,840 --> 00:03:17,940
very specific settings everything on

94
00:03:17,940 --> 00:03:19,379
this list have been used with

95
00:03:19,379 --> 00:03:21,239
concepticon successfully at one at some

96
00:03:21,239 --> 00:03:23,060
point in time

97
00:03:23,060 --> 00:03:26,760
so now let's discuss

98
00:03:26,760 --> 00:03:28,260
um the techniques that are used to

99
00:03:28,260 --> 00:03:29,640
obfuscate something and how would you

100
00:03:29,640 --> 00:03:30,780
let's say you wanted to build an office

101
00:03:30,780 --> 00:03:32,580
skater what challenges would you face

102
00:03:32,580 --> 00:03:34,019
and what would you have to kind of sort

103
00:03:34,019 --> 00:03:34,920
out

104
00:03:34,920 --> 00:03:36,599
there are two big families of things you

105
00:03:36,599 --> 00:03:38,400
need to obfuscate strings and

106
00:03:38,400 --> 00:03:40,200
identifiers each one of them has its own

107
00:03:40,200 --> 00:03:41,519
requirements its own restrictions and

108
00:03:41,519 --> 00:03:42,540
everything

109
00:03:42,540 --> 00:03:45,000
strings the good thing about strings is

110
00:03:45,000 --> 00:03:46,680
you can obfuscate using anything you

111
00:03:46,680 --> 00:03:48,060
want you can have unprintable characters

112
00:03:48,060 --> 00:03:49,440
you can compress them you can do

113
00:03:49,440 --> 00:03:51,840
whatever you want but you will have to

114
00:03:51,840 --> 00:03:53,940
bring back the original version of it

115
00:03:53,940 --> 00:03:56,640
when you execute the code that is its

116
00:03:56,640 --> 00:03:57,900
only requirement

117
00:03:57,900 --> 00:04:00,420
when it comes to identifiers then I will

118
00:04:00,420 --> 00:04:02,220
be calling identifier everything that is

119
00:04:02,220 --> 00:04:04,260
not a string and everything that is not

120
00:04:04,260 --> 00:04:07,680
a um a keyword and by keyword I mean the

121
00:04:07,680 --> 00:04:10,260
word function in C or the word class or

122
00:04:10,260 --> 00:04:11,400
anything like that

123
00:04:11,400 --> 00:04:12,659
so it means anything you write

124
00:04:12,659 --> 00:04:14,580
practically so the namespace names

125
00:04:14,580 --> 00:04:16,199
variable names function names you name

126
00:04:16,199 --> 00:04:17,220
it

127
00:04:17,220 --> 00:04:19,019
the problem with this is that you can't

128
00:04:19,019 --> 00:04:20,720
use special characters like space

129
00:04:20,720 --> 00:04:22,740
exclamation mark or anything like that

130
00:04:22,740 --> 00:04:24,780
you can use the underscore you can use

131
00:04:24,780 --> 00:04:28,620
digits but you can't start the name of a

132
00:04:28,620 --> 00:04:30,660
function with a digit any kind of

133
00:04:30,660 --> 00:04:32,460
complicates things a little bit

134
00:04:32,460 --> 00:04:34,080
but on the plus side you don't care

135
00:04:34,080 --> 00:04:36,180
about what the original value was so if

136
00:04:36,180 --> 00:04:38,280
you have sharp hound and you rename

137
00:04:38,280 --> 00:04:40,440
Shelton to hello world that's fine it's

138
00:04:40,440 --> 00:04:43,340
gonna it's still gonna work

139
00:04:43,500 --> 00:04:44,580
um

140
00:04:44,580 --> 00:04:47,180
so let's see how what kind of

141
00:04:47,180 --> 00:04:50,240
functionality and capabilities Got7

142
00:04:50,240 --> 00:04:52,919
offers first and foremost let's talk

143
00:04:52,919 --> 00:04:55,080
about string confiscation the first

144
00:04:55,080 --> 00:04:56,639
method and you have probably guessed it

145
00:04:56,639 --> 00:04:58,860
is basically for encoding this is like

146
00:04:58,860 --> 00:05:02,160
something every tool out there does

147
00:05:02,160 --> 00:05:05,220
the second one is just a simple explicit

148
00:05:05,220 --> 00:05:08,460
or encryption every string has its own

149
00:05:08,460 --> 00:05:10,500
key it's not that you have one key that

150
00:05:10,500 --> 00:05:12,660
decrypts all strings you just have one

151
00:05:12,660 --> 00:05:14,699
per string I don't remember why I made

152
00:05:14,699 --> 00:05:16,620
the decision it just ended up being like

153
00:05:16,620 --> 00:05:18,060
being such

154
00:05:18,060 --> 00:05:21,180
next method is a very basic Single

155
00:05:21,180 --> 00:05:23,160
Character substitution every time called

156
00:05:23,160 --> 00:05:25,199
septicon runs it will just create a

157
00:05:25,199 --> 00:05:27,000
mapping and just replace strings with

158
00:05:27,000 --> 00:05:28,979
those mappings

159
00:05:28,979 --> 00:05:31,139
following that

160
00:05:31,139 --> 00:05:32,940
excuse me that was loud

161
00:05:32,940 --> 00:05:35,940
we have group character substitution

162
00:05:35,940 --> 00:05:38,460
so it is an extension of a single

163
00:05:38,460 --> 00:05:40,139
character's character substitution but

164
00:05:40,139 --> 00:05:41,880
it's just every character is a like two

165
00:05:41,880 --> 00:05:44,100
three characters long

166
00:05:44,100 --> 00:05:47,039
but I was as I was developing this I

167
00:05:47,039 --> 00:05:48,780
realized that the main problem the main

168
00:05:48,780 --> 00:05:50,940
challenge I had to face was that the

169
00:05:50,940 --> 00:05:52,740
strings no matter how I obfuscate them

170
00:05:52,740 --> 00:05:54,840
they will increase the entropy of the

171
00:05:54,840 --> 00:05:57,900
executable in terms of what what the EDR

172
00:05:57,900 --> 00:06:00,539
and AV detects

173
00:06:00,539 --> 00:06:02,699
I realized that everything is still

174
00:06:02,699 --> 00:06:04,740
there everything is still in the file so

175
00:06:04,740 --> 00:06:07,139
I thought what if I take the all the

176
00:06:07,139 --> 00:06:08,639
strings out of the executable and just

177
00:06:08,639 --> 00:06:10,500
load them when I have to

178
00:06:10,500 --> 00:06:13,199
and this works up surprisingly well to

179
00:06:13,199 --> 00:06:14,160
be honest

180
00:06:14,160 --> 00:06:15,539
but the only

181
00:06:15,539 --> 00:06:17,160
um so what it does is it takes all the

182
00:06:17,160 --> 00:06:19,500
strings in basic support encodes them to

183
00:06:19,500 --> 00:06:21,539
deal with multi-line strings and then

184
00:06:21,539 --> 00:06:22,979
puts them in a file and then when you

185
00:06:22,979 --> 00:06:24,720
say give me line seven it will take line

186
00:06:24,720 --> 00:06:26,400
seven bring it back decode it and you

187
00:06:26,400 --> 00:06:28,680
can use it easily

188
00:06:28,680 --> 00:06:32,699
however the the caveat is that you will

189
00:06:32,699 --> 00:06:34,979
have to

190
00:06:34,979 --> 00:06:36,900
um have the file somewhere where it's

191
00:06:36,900 --> 00:06:39,120
accessible from the from your file from

192
00:06:39,120 --> 00:06:41,699
your um obfuscated Target if for example

193
00:06:41,699 --> 00:06:43,440
it was a VBA script

194
00:06:43,440 --> 00:06:46,639
oh thank you so much

195
00:06:47,699 --> 00:06:49,919
say for example

196
00:06:49,919 --> 00:06:52,319
am I allowed to do this okay

197
00:06:52,319 --> 00:06:54,180
say for example we have

198
00:06:54,180 --> 00:06:56,400
um it's a VBA you can hide your strings

199
00:06:56,400 --> 00:06:59,220
in a uh in Excel spreadsheet instead of

200
00:06:59,220 --> 00:07:00,780
a file and that way you're going to pack

201
00:07:00,780 --> 00:07:02,639
it together but it's not part of the VBA

202
00:07:02,639 --> 00:07:04,440
so you're kind of making your life a

203
00:07:04,440 --> 00:07:05,699
little bit easier

204
00:07:05,699 --> 00:07:07,500
and this kind of sums up all the string

205
00:07:07,500 --> 00:07:09,600
of associations uh that are supported by

206
00:07:09,600 --> 00:07:11,520
concepticon and like I said the last one

207
00:07:11,520 --> 00:07:12,720
is the most

208
00:07:12,720 --> 00:07:15,240
um the one that works the best

209
00:07:15,240 --> 00:07:16,740
remember that with identified

210
00:07:16,740 --> 00:07:18,479
application we can't use special

211
00:07:18,479 --> 00:07:20,039
characters digits have to be in a

212
00:07:20,039 --> 00:07:22,319
specific position uh so I said to make

213
00:07:22,319 --> 00:07:24,599
my life easier I'm just going to use

214
00:07:24,599 --> 00:07:27,060
um letters that's it

215
00:07:27,060 --> 00:07:30,360
the first way to actually the only way

216
00:07:30,360 --> 00:07:32,660
originally called septicon had to to

217
00:07:32,660 --> 00:07:35,759
generate these sort of names

218
00:07:35,759 --> 00:07:38,460
it was uh just random names you would

219
00:07:38,460 --> 00:07:40,319
give a character set you would give the

220
00:07:40,319 --> 00:07:42,120
length and it will just start generating

221
00:07:42,120 --> 00:07:45,180
things like that late last year I saw a

222
00:07:45,180 --> 00:07:48,060
tweet by emmeric Nasi where they

223
00:07:48,060 --> 00:07:49,500
discussed that in macro pack Pro they

224
00:07:49,500 --> 00:07:51,840
find some ways to kind of bypass the AV

225
00:07:51,840 --> 00:07:54,979
heuristics and how how it detects

226
00:07:54,979 --> 00:07:57,360
malicious implants

227
00:07:57,360 --> 00:07:59,280
I don't have access to microbox so I

228
00:07:59,280 --> 00:08:00,900
just work with the screenshot I had from

229
00:08:00,900 --> 00:08:02,340
that tweet and I was like okay maybe I

230
00:08:02,340 --> 00:08:04,020
can implement the same the same sort of

231
00:08:04,020 --> 00:08:06,539
methodology and um and functionality in

232
00:08:06,539 --> 00:08:08,940
concepticon and this is where these two

233
00:08:08,940 --> 00:08:10,139
came up

234
00:08:10,139 --> 00:08:12,180
the first one is the note twins which is

235
00:08:12,180 --> 00:08:14,460
practically the same thing as

236
00:08:14,460 --> 00:08:16,800
uh the random names we discussed before

237
00:08:16,800 --> 00:08:18,660
but you will just never have two

238
00:08:18,660 --> 00:08:20,400
consecutive characters one after the

239
00:08:20,400 --> 00:08:22,620
other the next one is a dictionary one

240
00:08:22,620 --> 00:08:24,599
which will give it a list of words and

241
00:08:24,599 --> 00:08:26,699
it will create combinations of those

242
00:08:26,699 --> 00:08:28,740
words and instead of like using a

243
00:08:28,740 --> 00:08:30,360
character set each word is going to be a

244
00:08:30,360 --> 00:08:33,360
character so if it creates the string

245
00:08:33,360 --> 00:08:35,700
Monday January March that can be your

246
00:08:35,700 --> 00:08:37,740
new

247
00:08:37,740 --> 00:08:39,659
um namespace for example

248
00:08:39,659 --> 00:08:42,120
the main problem with all these methods

249
00:08:42,120 --> 00:08:44,219
is entropy

250
00:08:44,219 --> 00:08:47,160
when the AV tries to understand if a

251
00:08:47,160 --> 00:08:48,420
file is malicious or not one of the

252
00:08:48,420 --> 00:08:49,620
things is going to do is going to check

253
00:08:49,620 --> 00:08:51,720
for example if it has anything that

254
00:08:51,720 --> 00:08:53,100
looks like a basic supporting or the

255
00:08:53,100 --> 00:08:54,660
string and if it does it's going to be

256
00:08:54,660 --> 00:08:56,220
like okay let's let's apply a little bit

257
00:08:56,220 --> 00:08:57,600
more scrutiny to this file because

258
00:08:57,600 --> 00:09:00,060
something might be off

259
00:09:00,060 --> 00:09:02,519
so the problem with random strings is

260
00:09:02,519 --> 00:09:06,240
the entropy the AV will be on you the

261
00:09:06,240 --> 00:09:08,100
problem with no twin strings practically

262
00:09:08,100 --> 00:09:10,440
random strings again the same the

263
00:09:10,440 --> 00:09:11,760
problem with dictionaries you have to

264
00:09:11,760 --> 00:09:13,019
make them or you have to download them

265
00:09:13,019 --> 00:09:14,580
you have to have it in hand or anything

266
00:09:14,580 --> 00:09:15,660
like that

267
00:09:15,660 --> 00:09:18,360
and then I thought what if we can

268
00:09:18,360 --> 00:09:20,580
generate something that looks like

269
00:09:20,580 --> 00:09:22,560
English words it doesn't have to be

270
00:09:22,560 --> 00:09:24,060
English words but it's just something to

271
00:09:24,060 --> 00:09:26,339
kind of trick the AV and EDR into

272
00:09:26,339 --> 00:09:27,720
thinking that okay this is something

273
00:09:27,720 --> 00:09:29,640
someone named

274
00:09:29,640 --> 00:09:31,500
and this after a little bit of research

275
00:09:31,500 --> 00:09:34,860
I found out that I can use Markov chains

276
00:09:34,860 --> 00:09:36,300
Markov chains and I'm just going to read

277
00:09:36,300 --> 00:09:38,160
this out is a process for which

278
00:09:38,160 --> 00:09:39,959
predictions can be made regarding future

279
00:09:39,959 --> 00:09:42,540
outcomes based solely on its present

280
00:09:42,540 --> 00:09:44,519
State and most importantly such

281
00:09:44,519 --> 00:09:46,920
predictions are just as good as the ones

282
00:09:46,920 --> 00:09:48,600
that could be made knowing the process

283
00:09:48,600 --> 00:09:51,120
is full history there is a lot to unpack

284
00:09:51,120 --> 00:09:51,899
here

285
00:09:51,899 --> 00:09:53,640
I'm not sure I even like like I

286
00:09:53,640 --> 00:09:55,500
understand the premise I have no idea

287
00:09:55,500 --> 00:09:57,180
how it actually works I'm not a

288
00:09:57,180 --> 00:09:58,800
mathematician if I was it would have

289
00:09:58,800 --> 00:10:00,360
been called buffalo chain but it isn't

290
00:10:00,360 --> 00:10:04,320
but in a very like short kind of um a

291
00:10:04,320 --> 00:10:06,600
very simplified explanation you throw a

292
00:10:06,600 --> 00:10:09,300
lot of data in it into the Markov

293
00:10:09,300 --> 00:10:11,880
algorithm and it kind of creates a

294
00:10:11,880 --> 00:10:13,380
frequency map of which layer comes out

295
00:10:13,380 --> 00:10:14,459
of which letter

296
00:10:14,459 --> 00:10:16,380
and that way it knows how to generate

297
00:10:16,380 --> 00:10:19,680
your your next um string or word or

298
00:10:19,680 --> 00:10:20,640
whatever

299
00:10:20,640 --> 00:10:23,279
like the first version of pagerank from

300
00:10:23,279 --> 00:10:25,019
Google had a version of Markov chains in

301
00:10:25,019 --> 00:10:28,019
it that's as far as my understanding

302
00:10:28,019 --> 00:10:30,480
goes obviously as a result and this is

303
00:10:30,480 --> 00:10:33,959
kind of my test to see how good

304
00:10:33,959 --> 00:10:35,779
everything I found on the internet was

305
00:10:35,779 --> 00:10:38,640
uh it may generate actual words some of

306
00:10:38,640 --> 00:10:40,140
these words are quite explicit as well

307
00:10:40,140 --> 00:10:42,899
but I don't think anybody cares

308
00:10:42,899 --> 00:10:46,019
at this point once I found this if it

309
00:10:46,019 --> 00:10:47,579
was me 10 years ago I would have been

310
00:10:47,579 --> 00:10:49,800
like I'm gonna write this I'm gonna I'm

311
00:10:49,800 --> 00:10:51,779
gonna read how it works I'm gonna study

312
00:10:51,779 --> 00:10:53,160
it I'm gonna have my own implementation

313
00:10:53,160 --> 00:10:55,380
it's gonna be perfect Glory will be mine

314
00:10:55,380 --> 00:10:57,720
but of course all of this was quite fun

315
00:10:57,720 --> 00:11:00,600
like in my 20s because now I literally

316
00:11:00,600 --> 00:11:03,420
go to bed at 10 and I'm 100 certain that

317
00:11:03,420 --> 00:11:04,920
someone out there has written something

318
00:11:04,920 --> 00:11:06,899
that is much much better than what I

319
00:11:06,899 --> 00:11:08,880
would have ever eaten because it would

320
00:11:08,880 --> 00:11:10,560
have taken me like weeks and I could

321
00:11:10,560 --> 00:11:12,480
have just find it

322
00:11:12,480 --> 00:11:14,160
so

323
00:11:14,160 --> 00:11:17,519
in search of something that works

324
00:11:17,519 --> 00:11:18,420
the main

325
00:11:18,420 --> 00:11:19,560
[Music]

326
00:11:19,560 --> 00:11:22,140
the main challenge

327
00:11:22,140 --> 00:11:24,180
is that you have to find something that

328
00:11:24,180 --> 00:11:26,399
not only works but it's also in a state

329
00:11:26,399 --> 00:11:28,079
that is very easy for you to lift and

330
00:11:28,079 --> 00:11:29,640
shift because you don't want to spend

331
00:11:29,640 --> 00:11:31,140
like four days trying to implement

332
00:11:31,140 --> 00:11:33,899
something from an open source into your

333
00:11:33,899 --> 00:11:35,579
own code and then realizing it's not

334
00:11:35,579 --> 00:11:36,899
exactly what you wanted you have to go

335
00:11:36,899 --> 00:11:39,300
back but also the most the second most

336
00:11:39,300 --> 00:11:41,040
important thing is you have

337
00:11:41,040 --> 00:11:44,880
to have a license that matches what you

338
00:11:44,880 --> 00:11:45,720
um

339
00:11:45,720 --> 00:11:47,640
the lessons of your project because if

340
00:11:47,640 --> 00:11:49,320
you're using it like internally I'm sure

341
00:11:49,320 --> 00:11:51,480
a lot of us sometimes just use something

342
00:11:51,480 --> 00:11:53,040
and just delete it but if you want to

343
00:11:53,040 --> 00:11:54,899
release something to the public you have

344
00:11:54,899 --> 00:11:56,399
to make sure that all your licenses are

345
00:11:56,399 --> 00:11:57,839
in order

346
00:11:57,839 --> 00:12:00,300
this is when I found this project by

347
00:12:00,300 --> 00:12:02,940
maori's Albers if you have ever been in

348
00:12:02,940 --> 00:12:04,079
a situation where you have to find

349
00:12:04,079 --> 00:12:05,700
something that works so you can use it

350
00:12:05,700 --> 00:12:08,040
if you see something like this it will

351
00:12:08,040 --> 00:12:10,079
at least for me it triggered a lot of

352
00:12:10,079 --> 00:12:12,540
red flags like first red flag just one

353
00:12:12,540 --> 00:12:15,240
commit second red flag seven years ago

354
00:12:15,240 --> 00:12:17,420
third third flag there's no license

355
00:12:17,420 --> 00:12:19,680
fourth red flag is a combination of the

356
00:12:19,680 --> 00:12:21,120
previous three it's like it's probably

357
00:12:21,120 --> 00:12:22,440
not even gonna work

358
00:12:22,440 --> 00:12:24,959
but I was like I was into deep of course

359
00:12:24,959 --> 00:12:27,120
into the whole process I thought I just

360
00:12:27,120 --> 00:12:29,279
give it a go it does exactly what I

361
00:12:29,279 --> 00:12:31,740
wanted it to do exactly it was very easy

362
00:12:31,740 --> 00:12:33,600
the code was brilliant and I was like

363
00:12:33,600 --> 00:12:36,420
okay I'm just gonna create a ticket

364
00:12:36,420 --> 00:12:39,899
um to see what the license is from the

365
00:12:39,899 --> 00:12:41,339
author

366
00:12:41,339 --> 00:12:44,040
but of course I never like hold a hold a

367
00:12:44,040 --> 00:12:46,620
lot of Hope into getting reply for for

368
00:12:46,620 --> 00:12:50,459
tickets as such so I create a ticket

369
00:12:50,459 --> 00:12:53,820
and then I go back into looking for

370
00:12:53,820 --> 00:12:57,300
um for other code in 14 minutes 14

371
00:12:57,300 --> 00:12:59,579
minutes Maori responded saying it's MIT

372
00:12:59,579 --> 00:13:02,220
which made my whole summer to be honest

373
00:13:02,220 --> 00:13:03,899
and now you're gonna say Pavel why you

374
00:13:03,899 --> 00:13:06,000
say why are you kind of telling us this

375
00:13:06,000 --> 00:13:08,820
story two reasons one you don't have to

376
00:13:08,820 --> 00:13:10,680
reinvent everything if you you're trying

377
00:13:10,680 --> 00:13:12,720
to to create something and two most

378
00:13:12,720 --> 00:13:15,779
importantly I'm sure that most of us

379
00:13:15,779 --> 00:13:17,639
here have some sort of script or

380
00:13:17,639 --> 00:13:19,079
something we have written at some point

381
00:13:19,079 --> 00:13:22,680
that saved us and we have never kind of

382
00:13:22,680 --> 00:13:23,940
released it to the into the wild because

383
00:13:23,940 --> 00:13:26,459
we thought nobody's gonna use it well I

384
00:13:26,459 --> 00:13:28,260
found this seven years later and it kind

385
00:13:28,260 --> 00:13:30,240
of saved my saved my day so please if

386
00:13:30,240 --> 00:13:31,500
you have something like that lying

387
00:13:31,500 --> 00:13:32,760
somewhere in your hard drive just please

388
00:13:32,760 --> 00:13:34,200
post it

389
00:13:34,200 --> 00:13:36,660
another very valid question from someone

390
00:13:36,660 --> 00:13:41,459
could have been uh Pavel so you have the

391
00:13:41,459 --> 00:13:43,019
dictionary which you use to train the

392
00:13:43,019 --> 00:13:45,360
Markov chains so why don't you just use

393
00:13:45,360 --> 00:13:47,040
that dictionary and words from that

394
00:13:47,040 --> 00:13:48,360
dictionary

395
00:13:48,360 --> 00:13:51,860
into kind of your obfuscation

396
00:13:52,320 --> 00:13:55,019
I have no answer for that because when I

397
00:13:55,019 --> 00:13:56,279
ask myself that question I was already

398
00:13:56,279 --> 00:13:58,139
too deep and I was like this is the only

399
00:13:58,139 --> 00:13:59,700
way this has to happen with Markov

400
00:13:59,700 --> 00:14:02,100
chains so I could have just skipped all

401
00:14:02,100 --> 00:14:03,899
of this and just use a dictionary but it

402
00:14:03,899 --> 00:14:05,700
didn't work

403
00:14:05,700 --> 00:14:08,220
let's talk about profiles so the current

404
00:14:08,220 --> 00:14:10,500
profiles because to be honest a lot of

405
00:14:10,500 --> 00:14:11,940
the talk is kind of geared towards C

406
00:14:11,940 --> 00:14:13,740
sharp but a lot of the things work Parts

407
00:14:13,740 --> 00:14:15,480
on DB as well

408
00:14:15,480 --> 00:14:17,459
the profiles that they currently support

409
00:14:17,459 --> 00:14:19,019
the certified review seat belt Chrome

410
00:14:19,019 --> 00:14:20,639
blah blah blah

411
00:14:20,639 --> 00:14:22,620
what a profile is

412
00:14:22,620 --> 00:14:25,019
so sorry um

413
00:14:25,019 --> 00:14:26,639
just by looking at that you will think

414
00:14:26,639 --> 00:14:28,440
oh concepticon only works for this

415
00:14:28,440 --> 00:14:31,079
project no it doesn't it works with any

416
00:14:31,079 --> 00:14:33,240
anything you can throw any throw at it

417
00:14:33,240 --> 00:14:34,459
that

418
00:14:34,459 --> 00:14:37,380
is written in C sharp Powershell or VBA

419
00:14:37,380 --> 00:14:39,300
it doesn't care the only difference is

420
00:14:39,300 --> 00:14:42,240
that your project might need a tweak or

421
00:14:42,240 --> 00:14:44,699
two to kind of make it work

422
00:14:44,699 --> 00:14:46,560
I mean if you try something it could be

423
00:14:46,560 --> 00:14:48,060
like a

424
00:14:48,060 --> 00:14:50,579
um it kind of over obfuscated something

425
00:14:50,579 --> 00:14:52,199
or left something hanging like a break

426
00:14:52,199 --> 00:14:53,699
statement or something because it does a

427
00:14:53,699 --> 00:14:54,779
lot of the writing to make everything

428
00:14:54,779 --> 00:14:56,040
work properly

429
00:14:56,040 --> 00:14:58,019
but if you're having trouble and it's a

430
00:14:58,019 --> 00:15:00,000
public uh project you can please raise a

431
00:15:00,000 --> 00:15:02,040
ticket and create an issue and we can

432
00:15:02,040 --> 00:15:04,019
have a look

433
00:15:04,019 --> 00:15:06,899
so profiles are practically Cherry the

434
00:15:06,899 --> 00:15:08,459
cherry on top to make something work

435
00:15:08,459 --> 00:15:10,620
that's it there's nothing extra

436
00:15:10,620 --> 00:15:13,680
at the moment those are used one to

437
00:15:13,680 --> 00:15:15,360
ensure that all command line parameters

438
00:15:15,360 --> 00:15:17,940
are renamed very important because each

439
00:15:17,940 --> 00:15:20,040
code is unique in its own way some

440
00:15:20,040 --> 00:15:22,320
developers use a package to parse the

441
00:15:22,320 --> 00:15:24,060
command line others do it manually like

442
00:15:24,060 --> 00:15:25,320
sharp view has a completely different

443
00:15:25,320 --> 00:15:26,579
way of doing it

444
00:15:26,579 --> 00:15:27,959
so you have to make sure that everything

445
00:15:27,959 --> 00:15:30,120
works works correctly the other thing is

446
00:15:30,120 --> 00:15:32,220
it removes the help output and custom

447
00:15:32,220 --> 00:15:34,680
logos so if you run rubius it's going to

448
00:15:34,680 --> 00:15:36,120
give you that ASCII art saying oh it's

449
00:15:36,120 --> 00:15:37,920
me reviews and you're going to be like

450
00:15:37,920 --> 00:15:40,199
fine but do I need it so if it runs in a

451
00:15:40,199 --> 00:15:41,459
sandbox that you want to get to give

452
00:15:41,459 --> 00:15:44,399
away the tool just by that logo

453
00:15:44,399 --> 00:15:47,339
and the other bit is it has to rewrite

454
00:15:47,339 --> 00:15:49,740
parts of the code to make it work so if

455
00:15:49,740 --> 00:15:52,620
you see the statement this this one says

456
00:15:52,620 --> 00:15:56,459
if extension is Json or zip and blah

457
00:15:56,459 --> 00:15:58,860
blah blah this is a syntax that's very

458
00:15:58,860 --> 00:16:01,740
specific to c-sharp if you obfuscate

459
00:16:01,740 --> 00:16:02,699
strings

460
00:16:02,699 --> 00:16:04,440
it will replace every string with a

461
00:16:04,440 --> 00:16:06,180
function call the problem with this

462
00:16:06,180 --> 00:16:07,800
specific statement is that that string

463
00:16:07,800 --> 00:16:09,300
when you use that statement that that

464
00:16:09,300 --> 00:16:12,240
syntax that string it has to be a

465
00:16:12,240 --> 00:16:14,519
constant it can't be a function call so

466
00:16:14,519 --> 00:16:16,560
what concepticon will do is it will take

467
00:16:16,560 --> 00:16:18,360
it and it will rewrite it in its

468
00:16:18,360 --> 00:16:21,000
original form saying if extension equals

469
00:16:21,000 --> 00:16:23,760
sequentiation or extension equals equals

470
00:16:23,760 --> 00:16:25,380
zip and then it will continue and then

471
00:16:25,380 --> 00:16:26,579
it will kind of start the whole

472
00:16:26,579 --> 00:16:28,320
obfuscation so that's where the profile

473
00:16:28,320 --> 00:16:29,940
will kick in and make your life a lot

474
00:16:29,940 --> 00:16:30,959
easier

475
00:16:30,959 --> 00:16:33,120
but let's see now specifically the

476
00:16:33,120 --> 00:16:35,279
technologies that we use for each

477
00:16:35,279 --> 00:16:36,600
language

478
00:16:36,600 --> 00:16:39,720
for C sharp it was Roslyn so a month

479
00:16:39,720 --> 00:16:41,759
after that engagement uh where the

480
00:16:41,759 --> 00:16:43,560
client said no you can't run this on our

481
00:16:43,560 --> 00:16:44,639
host

482
00:16:44,639 --> 00:16:46,259
a colleague of mine pointed me to a blog

483
00:16:46,259 --> 00:16:48,060
post by Adam Chester about building

484
00:16:48,060 --> 00:16:50,940
modifying and packing with Azure Ops

485
00:16:50,940 --> 00:16:53,820
that blog post practically is

486
00:16:53,820 --> 00:16:55,880
um

487
00:16:56,820 --> 00:16:58,440
excuse me

488
00:16:58,440 --> 00:17:01,040
break

489
00:17:02,940 --> 00:17:05,459
sorry about that as I mentioned all the

490
00:17:05,459 --> 00:17:07,260
previous obfuscators they just look at

491
00:17:07,260 --> 00:17:08,880
string Replacements or just like some of

492
00:17:08,880 --> 00:17:10,199
it's something very basic

493
00:17:10,199 --> 00:17:13,020
but in that blog post I realized there

494
00:17:13,020 --> 00:17:13,939
is

495
00:17:13,939 --> 00:17:16,619
Roslyn which allows you to have very

496
00:17:16,619 --> 00:17:18,480
granular control over what you want to

497
00:17:18,480 --> 00:17:21,540
do so you can you can safely say this

498
00:17:21,540 --> 00:17:23,880
tool exists because I read that blog

499
00:17:23,880 --> 00:17:26,339
post so thank you Adam

500
00:17:26,339 --> 00:17:28,620
so Roslyn is a.net compiler platform and

501
00:17:28,620 --> 00:17:30,360
it comes with Visual Studio you can

502
00:17:30,360 --> 00:17:32,100
literally write code that writes code

503
00:17:32,100 --> 00:17:33,720
and I don't mean you concatenate strings

504
00:17:33,720 --> 00:17:35,700
and be like okay this is fine just name

505
00:17:35,700 --> 00:17:38,340
it as dot CS compile it and it's done I

506
00:17:38,340 --> 00:17:40,679
mean you can see the tree here you can

507
00:17:40,679 --> 00:17:42,240
see a basic hello world and you can see

508
00:17:42,240 --> 00:17:44,400
the whole syntax tree broken down there

509
00:17:44,400 --> 00:17:46,860
so you can point to specific you can say

510
00:17:46,860 --> 00:17:49,020
I want all local declaration statements

511
00:17:49,020 --> 00:17:50,460
and it will bring you all local

512
00:17:50,460 --> 00:17:52,440
declaration statements you can rename

513
00:17:52,440 --> 00:17:53,820
nodes you can rewrite notes you can

514
00:17:53,820 --> 00:17:55,080
delete notes you can do anything you

515
00:17:55,080 --> 00:17:57,419
want with anything

516
00:17:57,419 --> 00:18:00,419
and because it's so granular and so like

517
00:18:00,419 --> 00:18:04,020
Advanced I might say you can rename just

518
00:18:04,020 --> 00:18:05,700
the name spaces if you want to you can

519
00:18:05,700 --> 00:18:07,500
just rename just the properties or you

520
00:18:07,500 --> 00:18:09,600
can rename everything it's up to you you

521
00:18:09,600 --> 00:18:12,360
have that control uh control in

522
00:18:12,360 --> 00:18:14,039
concepticon

523
00:18:14,039 --> 00:18:16,340
moving forward to

524
00:18:16,340 --> 00:18:20,340
VB and VB6 some of you may wonder why I

525
00:18:20,340 --> 00:18:23,400
put VBA and VB6 together because VBA is

526
00:18:23,400 --> 00:18:26,400
VB6 it's just geared towards Microsoft

527
00:18:26,400 --> 00:18:27,720
Office applications

528
00:18:27,720 --> 00:18:30,299
so anything you can do in gb6 you can do

529
00:18:30,299 --> 00:18:32,760
in VBA and the reason why I mentioned

530
00:18:32,760 --> 00:18:34,860
again it is because if you're looking

531
00:18:34,860 --> 00:18:36,840
for something on how to do something in

532
00:18:36,840 --> 00:18:39,240
VBA like hide and Excel spreadsheet you

533
00:18:39,240 --> 00:18:41,280
would Google VBA hide and Excel

534
00:18:41,280 --> 00:18:43,140
spreadsheet but if you're looking how to

535
00:18:43,140 --> 00:18:45,419
use an API how to hook into something

536
00:18:45,419 --> 00:18:47,460
what a constant is like a Windows

537
00:18:47,460 --> 00:18:49,679
content just put VB6 in front and the

538
00:18:49,679 --> 00:18:52,380
amount of resources out there is insane

539
00:18:52,380 --> 00:18:54,780
and I'm saying this because I've I was a

540
00:18:54,780 --> 00:18:58,320
VB6 developer for like a decade

541
00:18:58,320 --> 00:19:01,080
just like we had with C sharp had Roslyn

542
00:19:01,080 --> 00:19:05,280
here we have ntlr ntlr is a more genetic

543
00:19:05,280 --> 00:19:08,340
Rosalind if you may so you give NT a lot

544
00:19:08,340 --> 00:19:09,900
of grammar which a grammar is just a

545
00:19:09,900 --> 00:19:11,700
file that defines the keywords the

546
00:19:11,700 --> 00:19:13,799
syntax everything it needs to kind of

547
00:19:13,799 --> 00:19:17,460
parse properly the the the information

548
00:19:17,460 --> 00:19:19,559
and then it creates

549
00:19:19,559 --> 00:19:24,720
a parse a parsed tree that you can walk

550
00:19:24,720 --> 00:19:26,520
if you have never heard this expression

551
00:19:26,520 --> 00:19:30,059
it means it creates the tree in such a

552
00:19:30,059 --> 00:19:33,299
way that it allows you to

553
00:19:33,299 --> 00:19:35,100
what you did with Rosalind saying you

554
00:19:35,100 --> 00:19:36,000
know what give me all function

555
00:19:36,000 --> 00:19:37,500
declarations you know what give me all

556
00:19:37,500 --> 00:19:39,299
valuable assignments you can do this

557
00:19:39,299 --> 00:19:41,760
when you when you can walk a tree and

558
00:19:41,760 --> 00:19:43,620
I'm and I'm describing this because I'm

559
00:19:43,620 --> 00:19:45,539
gonna mention it in Powershell as well

560
00:19:45,539 --> 00:19:49,260
so long story short it is uh Rosalind

561
00:19:49,260 --> 00:19:49,980
for

562
00:19:49,980 --> 00:19:52,380
um VB

563
00:19:52,380 --> 00:19:53,520
can't

564
00:19:53,520 --> 00:19:55,020
as you saw with Rosalind you could

565
00:19:55,020 --> 00:19:56,340
literally rename anything you wanted

566
00:19:56,340 --> 00:19:58,200
just just a namespace just a function

567
00:19:58,200 --> 00:20:01,620
unfortunately with VB in ntlr this is

568
00:20:01,620 --> 00:20:03,600
very challenging because

569
00:20:03,600 --> 00:20:06,360
when you're collecting information

570
00:20:06,360 --> 00:20:08,220
you have

571
00:20:08,220 --> 00:20:09,840
you can get the function name you can

572
00:20:09,840 --> 00:20:10,980
get the variable let me get you can do

573
00:20:10,980 --> 00:20:12,840
whatever you want but when you have to

574
00:20:12,840 --> 00:20:15,179
actually rename something let's say you

575
00:20:15,179 --> 00:20:17,460
find it in the usage let's say you see a

576
00:20:17,460 --> 00:20:19,020
reference to a let's say you have a

577
00:20:19,020 --> 00:20:21,539
function called hello and you have a

578
00:20:21,539 --> 00:20:22,860
variable called hello

579
00:20:22,860 --> 00:20:24,900
when you see it in the usage saying

580
00:20:24,900 --> 00:20:26,880
hello something

581
00:20:26,880 --> 00:20:29,280
there isn't a way to tell if that usage

582
00:20:29,280 --> 00:20:31,320
is for the function or for the variable

583
00:20:31,320 --> 00:20:33,419
and it kind of make life easier I was

584
00:20:33,419 --> 00:20:35,220
like it's just going to be an all or

585
00:20:35,220 --> 00:20:36,660
nothing if I find a way to actually

586
00:20:36,660 --> 00:20:38,460
differentiate and classify that

587
00:20:38,460 --> 00:20:41,460
information more than happy to

588
00:20:41,460 --> 00:20:43,740
and this is an example of on the left

589
00:20:43,740 --> 00:20:46,380
you see a plane

590
00:20:46,380 --> 00:20:48,299
um a VBA and on the right you see the

591
00:20:48,299 --> 00:20:49,380
obfuscated

592
00:20:49,380 --> 00:20:51,780
I'm sure most of you would would have

593
00:20:51,780 --> 00:20:53,520
assumed that the obfuscated information

594
00:20:53,520 --> 00:20:55,140
is going to be like one long string of

595
00:20:55,140 --> 00:20:56,400
something that's going to be decoded in

596
00:20:56,400 --> 00:20:58,080
memory it's going to do things no it's

597
00:20:58,080 --> 00:21:00,299
literally like someone wrote it and just

598
00:21:00,299 --> 00:21:02,280
use like different functions and this

599
00:21:02,280 --> 00:21:05,700
works surprisingly well to bypass AV ndr

600
00:21:05,700 --> 00:21:07,980
as you can see it it kind of adds a

601
00:21:07,980 --> 00:21:09,720
little bit like um

602
00:21:09,720 --> 00:21:12,960
tweaks so if you see on the left the RTL

603
00:21:12,960 --> 00:21:15,059
get version doesn't have an alias so

604
00:21:15,059 --> 00:21:16,320
when you want to call it you'll have to

605
00:21:16,320 --> 00:21:19,740
use that specific string but on the

606
00:21:19,740 --> 00:21:21,840
right the RTL get version is the name to

607
00:21:21,840 --> 00:21:24,539
traffic SNES whatever that means all

608
00:21:24,539 --> 00:21:26,220
these words have been generated using

609
00:21:26,220 --> 00:21:28,140
Markov chains so you can see some of

610
00:21:28,140 --> 00:21:29,940
them like up there you can see wood you

611
00:21:29,940 --> 00:21:32,760
can see end uh

612
00:21:32,760 --> 00:21:34,860
you can see webbing but everything else

613
00:21:34,860 --> 00:21:37,500
like looks English but isn't actually

614
00:21:37,500 --> 00:21:39,900
English and this is kind of how how the

615
00:21:39,900 --> 00:21:42,000
obligation looks

616
00:21:42,000 --> 00:21:44,400
moving to Powershell Powershell we use

617
00:21:44,400 --> 00:21:46,020
the system management automation dll

618
00:21:46,020 --> 00:21:48,240
which again you throw away the source

619
00:21:48,240 --> 00:21:50,940
code uh you throw at the source code and

620
00:21:50,940 --> 00:21:53,280
it creates again the parsing tree with

621
00:21:53,280 --> 00:21:55,620
all the information but it is not in a

622
00:21:55,620 --> 00:21:57,600
way you can walk through it which makes

623
00:21:57,600 --> 00:21:59,159
it very difficult

624
00:21:59,159 --> 00:22:00,480
to just say give me function

625
00:22:00,480 --> 00:22:01,980
declarations give me like variable

626
00:22:01,980 --> 00:22:04,080
assignments give me something

627
00:22:04,080 --> 00:22:06,780
uh so it's like again like ntlr for VBA

628
00:22:06,780 --> 00:22:09,700
this is for um Powershell but it's less

629
00:22:09,700 --> 00:22:11,520
[Music]

630
00:22:11,520 --> 00:22:14,039
less easy to work with as well there's a

631
00:22:14,039 --> 00:22:15,059
lot of like

632
00:22:15,059 --> 00:22:18,120
tips and tricks we have to do

633
00:22:18,120 --> 00:22:19,679
and because of that and because of the

634
00:22:19,679 --> 00:22:22,140
freedom and how forgiving Powershell

635
00:22:22,140 --> 00:22:24,659
scripts can be it is very difficult to

636
00:22:24,659 --> 00:22:26,880
cover all edge cases this means that if

637
00:22:26,880 --> 00:22:28,500
you for example try to obfuscate Power

638
00:22:28,500 --> 00:22:30,539
view it's not going to work I'm telling

639
00:22:30,539 --> 00:22:32,220
you now don't even bother it will

640
00:22:32,220 --> 00:22:33,960
obfuscate everything but when you try to

641
00:22:33,960 --> 00:22:35,280
load it into memory you're going to get

642
00:22:35,280 --> 00:22:37,860
a bunch of errors so complex scripts if

643
00:22:37,860 --> 00:22:39,480
something uses like a managed code to

644
00:22:39,480 --> 00:22:40,919
run it in memory or load something in

645
00:22:40,919 --> 00:22:43,740
memory like an API in a strange way

646
00:22:43,740 --> 00:22:46,620
that may or may not work but simpler

647
00:22:46,620 --> 00:22:49,440
scripts uh will definitely work I'll

648
00:22:49,440 --> 00:22:51,900
show you an example further down

649
00:22:51,900 --> 00:22:55,380
just like with DB and ntlr

650
00:22:55,380 --> 00:22:56,700
um

651
00:22:56,700 --> 00:22:58,380
here you have some some sort of like

652
00:22:58,380 --> 00:23:00,600
differentiation you can just rename the

653
00:23:00,600 --> 00:23:01,860
function names you can just the name

654
00:23:01,860 --> 00:23:03,480
parameters and variables and this is the

655
00:23:03,480 --> 00:23:06,299
same Principle as with VBA

656
00:23:06,299 --> 00:23:08,580
and this is what a

657
00:23:08,580 --> 00:23:10,679
an obfuscated version of a script looks

658
00:23:10,679 --> 00:23:12,419
like so this is the get net in tlm

659
00:23:12,419 --> 00:23:14,280
script on the left you can see a string

660
00:23:14,280 --> 00:23:15,480
you can see a comment you can see

661
00:23:15,480 --> 00:23:17,880
information the the code on the right

662
00:23:17,880 --> 00:23:19,620
the comment has been removed the strings

663
00:23:19,620 --> 00:23:21,600
have been replaced with um

664
00:23:21,600 --> 00:23:23,460
basics for encoding and everything else

665
00:23:23,460 --> 00:23:25,559
has been replaced uh there you can see

666
00:23:25,559 --> 00:23:27,659
things like new object system that

667
00:23:27,659 --> 00:23:29,580
sockets TCP listener

668
00:23:29,580 --> 00:23:31,440
those are reserved words therefore those

669
00:23:31,440 --> 00:23:33,840
they as they are

670
00:23:33,840 --> 00:23:36,480
but it couldn't have been as easy could

671
00:23:36,480 --> 00:23:38,640
it because there's always unintended

672
00:23:38,640 --> 00:23:40,140
consequences

673
00:23:40,140 --> 00:23:42,059
if you have ever tried to obfuscate

674
00:23:42,059 --> 00:23:43,380
sharp hand

675
00:23:43,380 --> 00:23:45,059
you definitely came across this one

676
00:23:45,059 --> 00:23:47,640
because if you use collection methods

677
00:23:47,640 --> 00:23:49,620
let's say dash dash collection methods

678
00:23:49,620 --> 00:23:51,299
DC only

679
00:23:51,299 --> 00:23:53,220
you would expect that that information

680
00:23:53,220 --> 00:23:55,620
would be picked up as a string like the

681
00:23:55,620 --> 00:23:58,020
DC only variable it isn't it's literally

682
00:23:58,020 --> 00:24:00,539
this enum so if you rename this enum all

683
00:24:00,539 --> 00:24:01,679
the collection methods are going to

684
00:24:01,679 --> 00:24:02,940
break

685
00:24:02,940 --> 00:24:06,000
so we need a way once we obfuscate

686
00:24:06,000 --> 00:24:08,520
something we have to kind of map it into

687
00:24:08,520 --> 00:24:10,500
the new function this time to make to

688
00:24:10,500 --> 00:24:12,600
make sure that this works so if you

689
00:24:12,600 --> 00:24:15,240
wanted to use DC only you would use

690
00:24:15,240 --> 00:24:18,299
Terrace tons whatever that is

691
00:24:18,299 --> 00:24:20,640
for this reason concepticon creates an

692
00:24:20,640 --> 00:24:22,740
HTML mapping file which literally has

693
00:24:22,740 --> 00:24:24,900
all the information on the left what was

694
00:24:24,900 --> 00:24:27,000
and all the information on the right of

695
00:24:27,000 --> 00:24:28,980
what is and you can just search for

696
00:24:28,980 --> 00:24:30,179
whatever you want

697
00:24:30,179 --> 00:24:32,159
so if we wanted

698
00:24:32,159 --> 00:24:33,900
to

699
00:24:33,900 --> 00:24:36,539
rename this command line from sharkcon

700
00:24:36,539 --> 00:24:38,460
collection method to see only we would

701
00:24:38,460 --> 00:24:40,559
literally just search for collection

702
00:24:40,559 --> 00:24:43,260
methods get the get the value search for

703
00:24:43,260 --> 00:24:46,020
DC only get the value search for output

704
00:24:46,020 --> 00:24:49,140
directory get the value and then just

705
00:24:49,140 --> 00:24:51,659
replace them and it will work exactly

706
00:24:51,659 --> 00:24:54,360
like you wanted to and this I had this

707
00:24:54,360 --> 00:24:56,280
idea to kind of obfuscate the command

708
00:24:56,280 --> 00:24:58,380
line while I was on a call with on a

709
00:24:58,380 --> 00:24:59,640
purple team because they're much better

710
00:24:59,640 --> 00:25:01,919
of course and I realized that the client

711
00:25:01,919 --> 00:25:04,080
was actually using

712
00:25:04,080 --> 00:25:04,799
um

713
00:25:04,799 --> 00:25:06,480
they were searching in the command line

714
00:25:06,480 --> 00:25:08,400
for specific parameters like collection

715
00:25:08,400 --> 00:25:11,700
methods or uh like shaft handle exe and

716
00:25:11,700 --> 00:25:13,140
I was like I can just rename those and

717
00:25:13,140 --> 00:25:15,600
bypass it again this works surprisingly

718
00:25:15,600 --> 00:25:16,799
well

719
00:25:16,799 --> 00:25:18,960
however at the moment it's a manual task

720
00:25:18,960 --> 00:25:21,480
there isn't an easy way to map it

721
00:25:21,480 --> 00:25:24,299
because as you can see here

722
00:25:24,299 --> 00:25:27,720
this only belongs is a part of an enum

723
00:25:27,720 --> 00:25:29,700
is part of a property and is part of the

724
00:25:29,700 --> 00:25:30,960
parameter as well

725
00:25:30,960 --> 00:25:32,820
which makes it very difficult to kind of

726
00:25:32,820 --> 00:25:35,340
generate the command line for you so

727
00:25:35,340 --> 00:25:37,200
it's very critical

728
00:25:37,200 --> 00:25:39,000
critical

729
00:25:39,000 --> 00:25:42,179
to test your code before you kind of

730
00:25:42,179 --> 00:25:44,880
send it on on a client system don't

731
00:25:44,880 --> 00:25:46,919
think that oh it's compiled I think I

732
00:25:46,919 --> 00:25:48,419
have the command line everything should

733
00:25:48,419 --> 00:25:52,320
work it won't it never does

734
00:25:52,320 --> 00:25:53,039
um

735
00:25:53,039 --> 00:25:56,100
the next unintended consequence is that

736
00:25:56,100 --> 00:25:57,900
sometimes

737
00:25:57,900 --> 00:26:01,020
the output can be partially obfuscated

738
00:26:01,020 --> 00:26:04,140
as well this is the case in charcon 3.

739
00:26:04,140 --> 00:26:05,340
it doesn't exist anymore in the latest

740
00:26:05,340 --> 00:26:09,120
and greatest sharp hunt but

741
00:26:09,120 --> 00:26:10,020
um

742
00:26:10,020 --> 00:26:11,880
this is a very good uh for for

743
00:26:11,880 --> 00:26:14,340
illustration purposes you can see in the

744
00:26:14,340 --> 00:26:16,559
purple bits purple properties some of

745
00:26:16,559 --> 00:26:18,539
them have been obfuscated so if you

746
00:26:18,539 --> 00:26:19,559
throw this file into Bloodhound

747
00:26:19,559 --> 00:26:21,000
Bloodhound will not know what to do with

748
00:26:21,000 --> 00:26:22,380
it and you're just gonna end up with an

749
00:26:22,380 --> 00:26:25,559
error again very simple fix you use the

750
00:26:25,559 --> 00:26:27,600
mapping HTML file you parse it through

751
00:26:27,600 --> 00:26:29,460
concepticon and concepticon will just do

752
00:26:29,460 --> 00:26:31,679
a string and replace of what of the new

753
00:26:31,679 --> 00:26:33,840
variables or the old variables you'll

754
00:26:33,840 --> 00:26:36,779
end up again with this file Zipit

755
00:26:36,779 --> 00:26:39,480
Bloodhound done

756
00:26:39,480 --> 00:26:40,919
so in summary

757
00:26:40,919 --> 00:26:43,440
always test first never delete a mapping

758
00:26:43,440 --> 00:26:45,900
file and always test first like don't

759
00:26:45,900 --> 00:26:48,419
honestly I cannot tell you how critical

760
00:26:48,419 --> 00:26:49,919
it is that there's something on your own

761
00:26:49,919 --> 00:26:52,520
environment

762
00:26:53,279 --> 00:26:56,640
um known issues so of course there are

763
00:26:56,640 --> 00:26:57,900
some things you have to deal with that

764
00:26:57,900 --> 00:26:58,860
you're like you know what I'm going to

765
00:26:58,860 --> 00:27:00,360
deal with this later I can't be bothered

766
00:27:00,360 --> 00:27:03,299
with this right now one of them is

767
00:27:03,299 --> 00:27:06,299
a concepticon does not work with c-sharp

768
00:27:06,299 --> 00:27:07,620
solutions that have more than one

769
00:27:07,620 --> 00:27:10,919
project in it case in point sharp DP API

770
00:27:10,919 --> 00:27:13,500
if you try to rename or do something

771
00:27:13,500 --> 00:27:15,480
there it's just gonna throw an error

772
00:27:15,480 --> 00:27:19,260
saying I overly named something and

773
00:27:19,260 --> 00:27:20,520
there's no way I can't find the

774
00:27:20,520 --> 00:27:22,559
reference or whatever so just remove one

775
00:27:22,559 --> 00:27:23,580
project

776
00:27:23,580 --> 00:27:28,080
obfuscate it and then you'll be done

777
00:27:28,080 --> 00:27:29,220
another bit

778
00:27:29,220 --> 00:27:31,980
is that it works with Roselyn 3.9 only

779
00:27:31,980 --> 00:27:34,679
so don't update your nuget packages to

780
00:27:34,679 --> 00:27:36,299
the latest and greatest version because

781
00:27:36,299 --> 00:27:37,679
it's not going to work I have raised the

782
00:27:37,679 --> 00:27:39,779
ticket like in back in February but it

783
00:27:39,779 --> 00:27:42,179
still hasn't been resolved

784
00:27:42,179 --> 00:27:45,059
when it comes to Powershell as I

785
00:27:45,059 --> 00:27:47,220
mentioned complex scripts may or may not

786
00:27:47,220 --> 00:27:50,039
work probably will not work but if you

787
00:27:50,039 --> 00:27:51,659
want something specific from Power view

788
00:27:51,659 --> 00:27:54,240
just grab that specific bit make it work

789
00:27:54,240 --> 00:27:55,860
independently and then try to parse it

790
00:27:55,860 --> 00:27:57,120
through Powershell and that way you'll

791
00:27:57,120 --> 00:27:59,279
have more chances of succeeding

792
00:27:59,279 --> 00:28:01,919
and last but not least VBA you can't

793
00:28:01,919 --> 00:28:03,960
obfuscate a document so you can't throw

794
00:28:03,960 --> 00:28:06,120
an Excel file to it and be like okay

795
00:28:06,120 --> 00:28:08,279
this is going to work you have to get

796
00:28:08,279 --> 00:28:12,140
the modules like alt f11 get the modules

797
00:28:12,140 --> 00:28:15,059
copy them in a file obfuscate them and

798
00:28:15,059 --> 00:28:17,220
then send them back

799
00:28:17,220 --> 00:28:19,559
uh one thing to note here is that if you

800
00:28:19,559 --> 00:28:21,179
have

801
00:28:21,179 --> 00:28:24,539
a VBA document and it has two modules

802
00:28:24,539 --> 00:28:26,820
and one module is calling the other

803
00:28:26,820 --> 00:28:28,740
you can't obfuscate them independently

804
00:28:28,740 --> 00:28:31,080
because if the function names are

805
00:28:31,080 --> 00:28:32,940
changed you can't link them again

806
00:28:32,940 --> 00:28:35,760
together so take the two files put them

807
00:28:35,760 --> 00:28:37,440
one under the other obfuscate the whole

808
00:28:37,440 --> 00:28:39,480
thing and then

809
00:28:39,480 --> 00:28:40,140
um

810
00:28:40,140 --> 00:28:42,000
split it again into the modules you want

811
00:28:42,000 --> 00:28:44,460
already or whatever you want to do for

812
00:28:44,460 --> 00:28:46,860
the C sharp specifically our concepticon

813
00:28:46,860 --> 00:28:48,240
will

814
00:28:48,240 --> 00:28:50,940
check if any of these conditions apply

815
00:28:50,940 --> 00:28:52,799
so if you have a project a solution that

816
00:28:52,799 --> 00:28:54,179
has more than one project it will tell

817
00:28:54,179 --> 00:28:55,620
you it's going to be like are you sure

818
00:28:55,620 --> 00:28:57,360
you want to do this the same with the

819
00:28:57,360 --> 00:28:58,860
Roslyn version it's going to be like are

820
00:28:58,860 --> 00:29:01,699
you sure you want to do this

821
00:29:02,159 --> 00:29:03,419
um I understand this is a lot of

822
00:29:03,419 --> 00:29:06,240
technical information thrown at you

823
00:29:06,240 --> 00:29:09,000
so let's have a look at something that

824
00:29:09,000 --> 00:29:10,740
will make your life easier if you decide

825
00:29:10,740 --> 00:29:12,840
to use concepticon

826
00:29:12,840 --> 00:29:15,539
if you run the dash dash help command

827
00:29:15,539 --> 00:29:17,880
you'll be overwhelmed with the amount of

828
00:29:17,880 --> 00:29:20,220
information you will see there

829
00:29:20,220 --> 00:29:23,039
and the point is

830
00:29:23,039 --> 00:29:24,720
while I was developing it I started

831
00:29:24,720 --> 00:29:26,940
forgetting like which argument works

832
00:29:26,940 --> 00:29:28,919
with which one like can I use this one

833
00:29:28,919 --> 00:29:30,840
with that method or whatever and it just

834
00:29:30,840 --> 00:29:34,380
didn't work so I created an HTML file

835
00:29:34,380 --> 00:29:36,840
that practically guides you through

836
00:29:36,840 --> 00:29:39,240
creating a command so you don't have to

837
00:29:39,240 --> 00:29:40,980
think like oh it does command apply to

838
00:29:40,980 --> 00:29:43,380
c-sharp or something no you just go

839
00:29:43,380 --> 00:29:45,419
through the file click and it will auto

840
00:29:45,419 --> 00:29:47,580
generate the command up there you copy

841
00:29:47,580 --> 00:29:48,659
you're done

842
00:29:48,659 --> 00:29:52,500
so I would recommend against using the

843
00:29:52,500 --> 00:29:55,919
command line to generate a command just

844
00:29:55,919 --> 00:29:58,320
use the HTML file it will make your life

845
00:29:58,320 --> 00:30:01,140
a lot a lot easier

846
00:30:01,140 --> 00:30:05,520
another thing is the requirements to

847
00:30:05,520 --> 00:30:09,120
compile and run code septicon are vastly

848
00:30:09,120 --> 00:30:10,919
different than the requirements of the

849
00:30:10,919 --> 00:30:13,679
tool you're trying to compile and run so

850
00:30:13,679 --> 00:30:16,860
if you want to obfuscate group use you

851
00:30:16,860 --> 00:30:18,600
will have to make sure that rubius is

852
00:30:18,600 --> 00:30:20,940
able to be compiled independently first

853
00:30:20,940 --> 00:30:22,679
because you might be missing a.net

854
00:30:22,679 --> 00:30:24,419
framework you might be some missing

855
00:30:24,419 --> 00:30:25,980
something else in new nuget package or

856
00:30:25,980 --> 00:30:29,220
whatever you have to make sure that

857
00:30:29,220 --> 00:30:31,860
um it will it works

858
00:30:31,860 --> 00:30:35,580
specifically with C sharp it doesn't

859
00:30:35,580 --> 00:30:38,279
create a copy of your project and

860
00:30:38,279 --> 00:30:40,200
obfuscate that because you might have a

861
00:30:40,200 --> 00:30:41,820
kind of hard-coded path in there you

862
00:30:41,820 --> 00:30:42,899
might have something that works on

863
00:30:42,899 --> 00:30:44,940
internet location like a legacy project

864
00:30:44,940 --> 00:30:46,740
or or whatever

865
00:30:46,740 --> 00:30:49,860
so the the project itself will be

866
00:30:49,860 --> 00:30:50,940
obfuscated

867
00:30:50,940 --> 00:30:52,700
in this case

868
00:30:52,700 --> 00:30:55,740
don't obfuscate obfuscated code number

869
00:30:55,740 --> 00:30:57,419
one I mean it will work but why would

870
00:30:57,419 --> 00:30:59,580
you do that and the second one is git is

871
00:30:59,580 --> 00:31:00,539
your friend

872
00:31:00,539 --> 00:31:03,240
so I've seen a lot of well some of my

873
00:31:03,240 --> 00:31:04,860
colleagues when they try to use

874
00:31:04,860 --> 00:31:07,080
concepticon because I mean like as I

875
00:31:07,080 --> 00:31:08,520
said develop developed for a year and a

876
00:31:08,520 --> 00:31:11,340
half they download a project like in a

877
00:31:11,340 --> 00:31:13,919
zip file they extract the zip file they

878
00:31:13,919 --> 00:31:15,539
try to obfuscate it oh it doesn't work

879
00:31:15,539 --> 00:31:17,640
they delete the folder extract it again

880
00:31:17,640 --> 00:31:19,620
and then try again you don't have to do

881
00:31:19,620 --> 00:31:21,840
that just use git and then once you have

882
00:31:21,840 --> 00:31:23,220
something obfuscated and you're like

883
00:31:23,220 --> 00:31:25,380
this doesn't work just run this command

884
00:31:25,380 --> 00:31:27,659
this is what I run it will revert the

885
00:31:27,659 --> 00:31:29,340
project back to its original state as if

886
00:31:29,340 --> 00:31:31,740
you just cloned it I delete all files

887
00:31:31,740 --> 00:31:33,480
that were added it will it will make

888
00:31:33,480 --> 00:31:35,460
your life a lot a lot easier and then

889
00:31:35,460 --> 00:31:36,899
you can then you can open skate again

890
00:31:36,899 --> 00:31:39,299
and make it um

891
00:31:39,299 --> 00:31:41,279
you can practically make this into a

892
00:31:41,279 --> 00:31:42,360
pipeline

893
00:31:42,360 --> 00:31:44,520
you can for example point you know what

894
00:31:44,520 --> 00:31:46,919
I want Defender and then have a process

895
00:31:46,919 --> 00:31:49,080
running obfuscating something putting a

896
00:31:49,080 --> 00:31:51,360
device total checking all like your EDR

897
00:31:51,360 --> 00:31:53,880
lab checking if it passes then giving it

898
00:31:53,880 --> 00:31:56,580
back restoring and all that

899
00:31:56,580 --> 00:31:58,919
always test first

900
00:31:58,919 --> 00:32:01,140
uh and get comfortable with modifying

901
00:32:01,140 --> 00:32:01,860
code

902
00:32:01,860 --> 00:32:03,960
this is for things that may not have a

903
00:32:03,960 --> 00:32:05,039
profile

904
00:32:05,039 --> 00:32:07,679
uh and or let's say a new version of

905
00:32:07,679 --> 00:32:09,840
something that does have a profile comes

906
00:32:09,840 --> 00:32:10,919
out and you're like oh I don't know what

907
00:32:10,919 --> 00:32:11,940
to do

908
00:32:11,940 --> 00:32:13,559
just

909
00:32:13,559 --> 00:32:15,419
I mean if you know how to read code

910
00:32:15,419 --> 00:32:16,919
that's enough because then you'll be

911
00:32:16,919 --> 00:32:18,360
able to kind of make the change that you

912
00:32:18,360 --> 00:32:19,500
want to change

913
00:32:19,500 --> 00:32:21,840
and then you you can be creative and

914
00:32:21,840 --> 00:32:23,880
this has saved me a lot of times

915
00:32:23,880 --> 00:32:25,740
um on client engagements

916
00:32:25,740 --> 00:32:27,179
but do you really need all the

917
00:32:27,179 --> 00:32:28,380
functionality from sharp View and

918
00:32:28,380 --> 00:32:30,960
reviews probably not so if you're just

919
00:32:30,960 --> 00:32:31,919
using

920
00:32:31,919 --> 00:32:34,860
uh Kerberos with Rubios you can remove

921
00:32:34,860 --> 00:32:36,600
everything else just delete it from the

922
00:32:36,600 --> 00:32:40,620
file and a good application to

923
00:32:40,620 --> 00:32:43,320
um to find like unused code and code

924
00:32:43,320 --> 00:32:45,779
that's not kind of is it like that code

925
00:32:45,779 --> 00:32:48,480
technically uh it's called a jet Brains

926
00:32:48,480 --> 00:32:49,980
resharper it's going to save your life

927
00:32:49,980 --> 00:32:50,880
so

928
00:32:50,880 --> 00:32:53,399
I would recommend spending like three

929
00:32:53,399 --> 00:32:55,080
four days going through the tools

930
00:32:55,080 --> 00:32:56,760
creating like minimal versions of what

931
00:32:56,760 --> 00:32:58,260
you want and that will give you better

932
00:32:58,260 --> 00:33:01,679
success against client environments

933
00:33:01,679 --> 00:33:04,620
it may it may take a few tries to get it

934
00:33:04,620 --> 00:33:06,419
right

935
00:33:06,419 --> 00:33:08,659
so let's say you have a configuration

936
00:33:08,659 --> 00:33:11,039
you create your console command you have

937
00:33:11,039 --> 00:33:13,620
everything ready you run it once you put

938
00:33:13,620 --> 00:33:15,360
it against Defender Defender catches it

939
00:33:15,360 --> 00:33:17,279
you're like oh this isn't working no

940
00:33:17,279 --> 00:33:19,640
revert back to the original version

941
00:33:19,640 --> 00:33:21,779
obfuscate again

942
00:33:21,779 --> 00:33:23,340
and see if it works again because

943
00:33:23,340 --> 00:33:25,919
sometimes if taking like five tries the

944
00:33:25,919 --> 00:33:27,179
same with the same configuration five

945
00:33:27,179 --> 00:33:29,220
tries because everything's randomized to

946
00:33:29,220 --> 00:33:31,799
get past defender or any AV and that

947
00:33:31,799 --> 00:33:33,539
works

948
00:33:33,539 --> 00:33:35,760
the last bit is

949
00:33:35,760 --> 00:33:39,299
let's say you found a

950
00:33:39,299 --> 00:33:41,600
let's say you're in a client environment

951
00:33:41,600 --> 00:33:44,700
and you can't run command prompt you

952
00:33:44,700 --> 00:33:46,200
can't run Powershell there's no way for

953
00:33:46,200 --> 00:33:47,940
you to pass arguments into an executable

954
00:33:47,940 --> 00:33:49,860
but you did find an applocker folder

955
00:33:49,860 --> 00:33:53,100
that allows execution by any in any file

956
00:33:53,100 --> 00:33:55,500
you can create a

957
00:33:55,500 --> 00:33:57,240
um an open skated version using

958
00:33:57,240 --> 00:33:59,700
concepticon and then you can just hard

959
00:33:59,700 --> 00:34:01,200
code the command at the top of the

960
00:34:01,200 --> 00:34:02,640
function obviously this will be the

961
00:34:02,640 --> 00:34:04,919
obfuscated version of the command and

962
00:34:04,919 --> 00:34:06,720
then compile and that will be it you

963
00:34:06,720 --> 00:34:08,940
just drop the file double click and it

964
00:34:08,940 --> 00:34:10,080
works

965
00:34:10,080 --> 00:34:12,359
I think some of you may be like

966
00:34:12,359 --> 00:34:14,399
does it really work like dropping the

967
00:34:14,399 --> 00:34:16,199
file to disk and like working like

968
00:34:16,199 --> 00:34:18,119
something will pick it up

969
00:34:18,119 --> 00:34:20,460
something might but you'll be surprised

970
00:34:20,460 --> 00:34:23,760
how many times it doesn't and it's it it

971
00:34:23,760 --> 00:34:25,859
has been a very good like a year and a

972
00:34:25,859 --> 00:34:27,119
half let's say

973
00:34:27,119 --> 00:34:29,520
but let's see exactly how well it

974
00:34:29,520 --> 00:34:33,179
performs in terms of virus total because

975
00:34:33,179 --> 00:34:35,820
that that was my benchmark

976
00:34:35,820 --> 00:34:37,679
this is a very basic XML configuration

977
00:34:37,679 --> 00:34:40,739
because concepticon supports console if

978
00:34:40,739 --> 00:34:41,639
you want to put everything in the

979
00:34:41,639 --> 00:34:43,619
console command line you're fine but if

980
00:34:43,619 --> 00:34:45,000
you just want to use something like an

981
00:34:45,000 --> 00:34:47,399
XML even better

982
00:34:47,399 --> 00:34:49,500
so this is going to use

983
00:34:49,500 --> 00:34:51,599
um it's going to rename everything using

984
00:34:51,599 --> 00:34:53,940
the Markov chain and all the strings are

985
00:34:53,940 --> 00:34:56,099
going to be taken to a path outside it's

986
00:34:56,099 --> 00:34:57,720
going to be like extracted from the from

987
00:34:57,720 --> 00:35:00,119
the um executable

988
00:35:00,119 --> 00:35:02,339
so if we upload sharp Hound

989
00:35:02,339 --> 00:35:04,859
it's going to be 27 engines detected

990
00:35:04,859 --> 00:35:06,359
this is the clean version of childhound

991
00:35:06,359 --> 00:35:09,359
this is just clone and compile

992
00:35:09,359 --> 00:35:10,680
if you if you pass it through

993
00:35:10,680 --> 00:35:12,420
concepticon just with that configuration

994
00:35:12,420 --> 00:35:15,420
it drops down to eight

995
00:35:15,420 --> 00:35:18,660
um if you have sharp DP API it goes from

996
00:35:18,660 --> 00:35:21,060
34 down to 10.

997
00:35:21,060 --> 00:35:24,960
35 30 to 21. at this point you will say

998
00:35:24,960 --> 00:35:27,480
come on 21 is quite quite a lot remember

999
00:35:27,480 --> 00:35:29,880
you're going up against one the one that

1000
00:35:29,880 --> 00:35:31,440
your client has or two if they have an

1001
00:35:31,440 --> 00:35:33,359
EDR as well and that's that should be

1002
00:35:33,359 --> 00:35:34,920
your main focus because if you see this

1003
00:35:34,920 --> 00:35:36,660
you're like yeah that's quite a lot

1004
00:35:36,660 --> 00:35:38,820
there it is but for example Microsoft

1005
00:35:38,820 --> 00:35:40,200
isn't on the list so if they have

1006
00:35:40,200 --> 00:35:42,839
Defender you're done

1007
00:35:42,839 --> 00:35:46,820
seat belt 39 to 26 troubles

1008
00:35:46,820 --> 00:35:50,280
51-29 and last but not least sharp view

1009
00:35:50,280 --> 00:35:53,220
34 to 18.

1010
00:35:53,220 --> 00:35:55,140
remember the point I made

1011
00:35:55,140 --> 00:35:57,599
about like do you really need all the

1012
00:35:57,599 --> 00:36:00,000
all the functionality so I took a

1013
00:36:00,000 --> 00:36:01,500
version of sharp U and I removed

1014
00:36:01,500 --> 00:36:04,079
everything except the user and computer

1015
00:36:04,079 --> 00:36:05,400
enumeration

1016
00:36:05,400 --> 00:36:06,960
so that was the kind of minimal version

1017
00:36:06,960 --> 00:36:09,180
I thought I put it through code septicon

1018
00:36:09,180 --> 00:36:12,420
and the detection rate dropped to 10.

1019
00:36:12,420 --> 00:36:13,859
so

1020
00:36:13,859 --> 00:36:15,480
it is worth

1021
00:36:15,480 --> 00:36:17,820
going through the tools and just keeping

1022
00:36:17,820 --> 00:36:19,980
what you want and what you use day to

1023
00:36:19,980 --> 00:36:23,480
day it will make your life a lot easier

1024
00:36:23,579 --> 00:36:25,140
for the future

1025
00:36:25,140 --> 00:36:27,900
what I want to implement is stink

1026
00:36:27,900 --> 00:36:29,579
obfuscation using Markov chains I have

1027
00:36:29,579 --> 00:36:31,800
no idea how to do that yet but where

1028
00:36:31,800 --> 00:36:33,599
there is a will there is a way

1029
00:36:33,599 --> 00:36:35,940
I also want to integrate

1030
00:36:35,940 --> 00:36:36,540
um

1031
00:36:36,540 --> 00:36:38,339
office documents so you can literally

1032
00:36:38,339 --> 00:36:40,680
have your weaponized Excel or Word file

1033
00:36:40,680 --> 00:36:42,960
throw it at concepticon and conceptual

1034
00:36:42,960 --> 00:36:45,440
black okay here's the new file

1035
00:36:45,440 --> 00:36:48,780
uh to the next one is to actually create

1036
00:36:48,780 --> 00:36:50,460
the obfuscated command line you could

1037
00:36:50,460 --> 00:36:51,480
give it what you want the original

1038
00:36:51,480 --> 00:36:53,220
version it will give you back the

1039
00:36:53,220 --> 00:36:54,540
obfuscated one

1040
00:36:54,540 --> 00:36:56,280
and the last bit which is the biggest

1041
00:36:56,280 --> 00:36:57,900
one that I want to make is I want to

1042
00:36:57,900 --> 00:37:00,300
actually make changes in the structure

1043
00:37:00,300 --> 00:37:02,760
of the code especially with c-sharp I

1044
00:37:02,760 --> 00:37:04,380
would like to get let's say you have a

1045
00:37:04,380 --> 00:37:06,660
class and that class has 10 functions I

1046
00:37:06,660 --> 00:37:08,579
want to extract each function into its

1047
00:37:08,579 --> 00:37:10,320
own class and then I can have the

1048
00:37:10,320 --> 00:37:13,380
structure in any way I like and if nav

1049
00:37:13,380 --> 00:37:15,060
is checking for two things in different

1050
00:37:15,060 --> 00:37:17,579
functions in one go it's just gonna fail

1051
00:37:17,579 --> 00:37:19,740
at that point

1052
00:37:19,740 --> 00:37:23,579
in summary you can find the code on

1053
00:37:23,579 --> 00:37:26,400
GitHub or just go code septicon.com it

1054
00:37:26,400 --> 00:37:27,900
will just redirect you to GitHub there's

1055
00:37:27,900 --> 00:37:30,780
nothing on that page there will be no

1056
00:37:30,780 --> 00:37:33,000
compiled version on the releases because

1057
00:37:33,000 --> 00:37:36,000
a lot of the because the so third party

1058
00:37:36,000 --> 00:37:38,099
so many third-party components some of

1059
00:37:38,099 --> 00:37:40,500
them require like a written consent to

1060
00:37:40,500 --> 00:37:41,760
be shared

1061
00:37:41,760 --> 00:37:43,740
if you want

1062
00:37:43,740 --> 00:37:46,500
uh any feature requests bug reports and

1063
00:37:46,500 --> 00:37:48,480
contributions you're very welcome

1064
00:37:48,480 --> 00:37:50,339
and I think that this I think I have a

1065
00:37:50,339 --> 00:37:52,560
little bit of time to tell a story about

1066
00:37:52,560 --> 00:37:54,240
code septicon.com

1067
00:37:54,240 --> 00:37:56,880
uh this will give you an Insight on what

1068
00:37:56,880 --> 00:37:59,160
kind of person I am

1069
00:37:59,160 --> 00:38:02,520
um so a couple of weeks ago I was like

1070
00:38:02,520 --> 00:38:04,079
it's gonna be very cool if I just get

1071
00:38:04,079 --> 00:38:06,960
codecepticon.com to the direct back to

1072
00:38:06,960 --> 00:38:08,099
like the GitHub it's gonna be much

1073
00:38:08,099 --> 00:38:10,200
easier than say Accenture slash GitHub

1074
00:38:10,200 --> 00:38:11,940
and then you're gonna uh Accenture slash

1075
00:38:11,940 --> 00:38:13,200
code septicon and then you'll find the

1076
00:38:13,200 --> 00:38:14,640
project

1077
00:38:14,640 --> 00:38:17,520
so I went on namechip I just put

1078
00:38:17,520 --> 00:38:19,200
concepticon.com

1079
00:38:19,200 --> 00:38:21,180
domain is taken

1080
00:38:21,180 --> 00:38:23,640
taken I was livid I was like this is an

1081
00:38:23,640 --> 00:38:25,380
inside job like nobody knows about this

1082
00:38:25,380 --> 00:38:27,119
tool how can it be taken it's not it's

1083
00:38:27,119 --> 00:38:28,619
not even a real it's like Decepticon

1084
00:38:28,619 --> 00:38:29,940
called septicon nobody can ever like

1085
00:38:29,940 --> 00:38:32,099
make this up and all these thoughts go

1086
00:38:32,099 --> 00:38:34,020
through my mind like within seconds I'm

1087
00:38:34,020 --> 00:38:35,160
like I'm gonna find them it's gonna be

1088
00:38:35,160 --> 00:38:36,359
blood it's gonna be it's gonna be

1089
00:38:36,359 --> 00:38:37,320
horrible

1090
00:38:37,320 --> 00:38:39,240
and then I go to concepticon.com and I

1091
00:38:39,240 --> 00:38:40,920
see like a name chip

1092
00:38:40,920 --> 00:38:44,640
um parked page and I'm like that mother

1093
00:38:44,640 --> 00:38:45,960
oh

1094
00:38:45,960 --> 00:38:49,140
I use namecheap so I'll go back into my

1095
00:38:49,140 --> 00:38:50,820
account and I realize I bought the

1096
00:38:50,820 --> 00:38:52,800
domain and forgot about it

1097
00:38:52,800 --> 00:38:55,079
so I just

1098
00:38:55,079 --> 00:38:57,480
yeah so that's how good silicon came to

1099
00:38:57,480 --> 00:38:58,260
be

1100
00:38:58,260 --> 00:39:00,599
uh yeah this was uh the presentation

1101
00:39:00,599 --> 00:39:01,859
thank you very much everyone for

1102
00:39:01,859 --> 00:39:04,140
attending if anyone has any questions or

1103
00:39:04,140 --> 00:39:05,760
queries or anything you'd like to talk

1104
00:39:05,760 --> 00:39:06,660
about

1105
00:39:06,660 --> 00:39:08,460
please do

1106
00:39:08,460 --> 00:39:11,460
foreign

