1
00:00:00,000 --> 00:00:04,710
just in case<font color="#E5E5E5"> my battery lasts for about</font>

2
00:00:02,370 --> 00:00:08,160
<font color="#E5E5E5">six hours but just in</font><font color="#CCCCCC"> case</font><font color="#E5E5E5"> I plugged it</font>

3
00:00:04,710 --> 00:00:12,690
in because<font color="#E5E5E5"> of jet lag</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> white</font><font color="#CCCCCC"> my last</font>

4
00:00:08,160 --> 00:00:14,580
rehearsal lesson<font color="#E5E5E5"> over two hours so it's</font>

5
00:00:12,690 --> 00:00:17,030
good that<font color="#CCCCCC"> we have an open</font><font color="#E5E5E5"> mic up for my</font>

6
00:00:14,580 --> 00:00:17,030
presentation

7
00:00:17,960 --> 00:00:26,279
yeah<font color="#CCCCCC"> thanks everyone for staying late</font>

8
00:00:22,340 --> 00:00:30,509
<font color="#E5E5E5">for</font><font color="#CCCCCC"> why yeah why my talk it's not</font><font color="#E5E5E5"> really</font>

9
00:00:26,279 --> 00:00:35,280
my it's it's it's my end<font color="#E5E5E5"> Alex's talk</font><font color="#CCCCCC"> and</font>

10
00:00:30,510 --> 00:00:40,010
they they<font color="#CCCCCC"> they work</font><font color="#E5E5E5"> behind it</font><font color="#CCCCCC"> you might</font>

11
00:00:35,280 --> 00:00:43,800
have you might<font color="#E5E5E5"> have seen some</font><font color="#CCCCCC"> of our</font>

12
00:00:40,010 --> 00:00:47,129
research presentations<font color="#CCCCCC"> we did a lot of</font><font color="#E5E5E5"> a</font>

13
00:00:43,800 --> 00:00:50,578
lot<font color="#CCCCCC"> of</font><font color="#E5E5E5"> security research and the firmer</font>

14
00:00:47,129 --> 00:00:53,370
space specifically UEFI space or or<font color="#E5E5E5"> Mac</font>

15
00:00:50,579 --> 00:00:58,320
<font color="#E5E5E5">EFI or related it's recently a more</font>

16
00:00:53,370 --> 00:01:04,679
recent<font color="#CCCCCC"> decor but we've we've done that</font>

17
00:00:58,320 --> 00:01:06,150
back at Intel<font color="#CCCCCC"> and now we we have you</font>

18
00:01:04,680 --> 00:01:09,659
probably haven't heard<font color="#CCCCCC"> about this</font>

19
00:01:06,150 --> 00:01:11,430
company<font color="#E5E5E5"> it's very new</font><font color="#CCCCCC"> we started the</font>

20
00:01:09,659 --> 00:01:12,119
company<font color="#CCCCCC"> a few months ago it's called</font>

21
00:01:11,430 --> 00:01:18,650
<font color="#E5E5E5">Eclipse</font><font color="#CCCCCC"> ale</font>

22
00:01:12,119 --> 00:01:21,720
and so the<font color="#E5E5E5"> presentation</font><font color="#CCCCCC"> today is</font>

23
00:01:18,650 --> 00:01:27,420
discovering<font color="#E5E5E5"> you</font><font color="#CCCCCC"> v ulnar abilities at</font>

24
00:01:21,720 --> 00:01:33,090
scale or vulnerable<font color="#E5E5E5"> you fight systems at</font>

25
00:01:27,420 --> 00:01:34,560
scale<font color="#E5E5E5"> and so what motivated us to to do</font>

26
00:01:33,090 --> 00:01:38,479
that research<font color="#E5E5E5"> and it's slightly</font>

27
00:01:34,560 --> 00:01:42,170
different<font color="#CCCCCC"> it's more of a data analysis</font>

28
00:01:38,479 --> 00:01:46,079
than looking<font color="#CCCCCC"> for some new</font>

29
00:01:42,170 --> 00:01:49,920
vulnerabilities and new systems but the

30
00:01:46,079 --> 00:01:52,770
motivation<font color="#E5E5E5"> is that we tend</font><font color="#CCCCCC"> to focus and</font>

31
00:01:49,920 --> 00:01:55,020
we meaning research community and also

32
00:01:52,770 --> 00:01:56,789
<font color="#E5E5E5">also in particular</font><font color="#CCCCCC"> we tend to</font><font color="#E5E5E5"> focus on</font>

33
00:01:55,020 --> 00:01:59,329
trying<font color="#E5E5E5"> to find new classes of</font>

34
00:01:56,790 --> 00:02:03,830
<font color="#E5E5E5">vulnerabilities preferably new systems</font>

35
00:01:59,329 --> 00:02:07,669
<font color="#E5E5E5">you know the more complex the</font>

36
00:02:03,830 --> 00:02:11,950
the problem is even<font color="#CCCCCC"> the newest systems</font>

37
00:02:07,670 --> 00:02:14,840
<font color="#E5E5E5">today</font><font color="#CCCCCC"> a lot of</font><font color="#E5E5E5"> them the lack just basic</font>

38
00:02:11,950 --> 00:02:17,660
<font color="#CCCCCC">perma hygiene</font><font color="#E5E5E5"> they lack</font><font color="#CCCCCC"> basic</font>

39
00:02:14,840 --> 00:02:21,320
<font color="#E5E5E5">protections over there the</font><font color="#CCCCCC"> unify</font><font color="#E5E5E5"> firma</font>

40
00:02:17,660 --> 00:02:26,540
that they have<font color="#CCCCCC"> moreover</font><font color="#E5E5E5"> there are still</font>

41
00:02:21,320 --> 00:02:28,430
lots of old systems and use<font color="#E5E5E5"> especially</font>

42
00:02:26,540 --> 00:02:29,989
in the public<font color="#CCCCCC"> sector</font><font color="#E5E5E5"> there are still</font>

43
00:02:28,430 --> 00:02:34,540
systems that are telling<font color="#E5E5E5"> here</font><font color="#CCCCCC"> 10</font><font color="#E5E5E5"> year</font>

44
00:02:29,990 --> 00:02:38,390
<font color="#E5E5E5">old even running legacy</font><font color="#CCCCCC"> bias</font><font color="#E5E5E5"> let alone</font><font color="#CCCCCC"> a</font>

45
00:02:34,540 --> 00:02:42,609
<font color="#CCCCCC">ufi or</font><font color="#E5E5E5"> worry of Isis terms but</font>

46
00:02:38,390 --> 00:02:45,609
<font color="#E5E5E5">definitely not the the the most recent</font>

47
00:02:42,610 --> 00:02:49,600
<font color="#E5E5E5">seventh or whatever</font><font color="#CCCCCC"> generation of</font>

48
00:02:45,610 --> 00:02:54,320
install processors<font color="#CCCCCC"> you know the most</font>

49
00:02:49,600 --> 00:03:00,730
expensive Dell or HP servers<font color="#CCCCCC"> public</font>

50
00:02:54,320 --> 00:03:04,760
<font color="#E5E5E5">sector runs very old equipment</font><font color="#CCCCCC"> and so</font>

51
00:03:00,730 --> 00:03:07,340
there<font color="#CCCCCC"> are tools</font><font color="#E5E5E5"> currently available</font><font color="#CCCCCC"> to</font>

52
00:03:04,760 --> 00:03:09,709
test those systems or basic primer

53
00:03:07,340 --> 00:03:12,800
protections<font color="#CCCCCC"> like there's a there's</font><font color="#E5E5E5"> chips</font>

54
00:03:09,709 --> 00:03:16,040
<font color="#CCCCCC">AG that we've we've off authored</font><font color="#E5E5E5"> they</font>

55
00:03:12,800 --> 00:03:18,500
<font color="#E5E5E5">can test if the firmware on a particular</font>

56
00:03:16,040 --> 00:03:21,290
system<font color="#E5E5E5"> is vulnerable the problem is that</font>

57
00:03:18,500 --> 00:03:24,590
the problem with that<font color="#E5E5E5"> is is that in</font>

58
00:03:21,290 --> 00:03:26,989
order<font color="#CCCCCC"> to</font><font color="#E5E5E5"> do that we literally need</font><font color="#CCCCCC"> to</font>

59
00:03:24,590 --> 00:03:31,400
have all<font color="#CCCCCC"> of that equipment to</font><font color="#E5E5E5"> test it on</font>

60
00:03:26,989 --> 00:03:33,590
and that's not<font color="#E5E5E5"> always possible</font><font color="#CCCCCC"> and also</font>

61
00:03:31,400 --> 00:03:35,239
<font color="#CCCCCC">it</font><font color="#E5E5E5"> doesn't really not provide provide us</font>

62
00:03:33,590 --> 00:03:38,660
with the full<font color="#E5E5E5"> picture of where the</font>

63
00:03:35,239 --> 00:03:43,220
industry<font color="#CCCCCC"> is in terms of basic basic</font>

64
00:03:38,660 --> 00:03:44,989
<font color="#CCCCCC">firmer hygiene so how do</font><font color="#E5E5E5"> we how do we</font>

65
00:03:43,220 --> 00:03:47,209
understand the state<font color="#CCCCCC"> of an entire</font>

66
00:03:44,989 --> 00:03:50,180
population<font color="#E5E5E5"> of all the systems that's</font>

67
00:03:47,209 --> 00:03:53,780
<font color="#E5E5E5">what that's what motivated us to do this</font>

68
00:03:50,180 --> 00:03:56,780
research<font color="#CCCCCC"> but prior</font><font color="#E5E5E5"> to doing that I'll</font>

69
00:03:53,780 --> 00:04:00,250
I'll<font color="#E5E5E5"> just explain some basics in</font><font color="#CCCCCC"> terms</font>

70
00:03:56,780 --> 00:04:04,030
<font color="#E5E5E5">of how modern systems protect the</font>

71
00:04:00,250 --> 00:04:08,090
<font color="#CCCCCC">beautify firmer in the system flash</font>

72
00:04:04,030 --> 00:04:11,090
because<font color="#CCCCCC"> will will need that information</font>

73
00:04:08,090 --> 00:04:16,519
so system flash is something that stores

74
00:04:11,090 --> 00:04:18,590
your<font color="#CCCCCC"> main firmer</font><font color="#E5E5E5"> in in the recent in</font>

75
00:04:16,519 --> 00:04:20,329
modern systems<font color="#CCCCCC"> you</font><font color="#E5E5E5"> fire firmer but also</font>

76
00:04:18,589 --> 00:04:21,890
other types of<font color="#E5E5E5"> firmer like manageability</font>

77
00:04:20,329 --> 00:04:23,900
<font color="#E5E5E5">engine firmer like the embedded</font>

78
00:04:21,890 --> 00:04:25,909
controller firmer often like the

79
00:04:23,900 --> 00:04:30,380
<font color="#E5E5E5">persistent settings for a network</font>

80
00:04:25,910 --> 00:04:33,340
<font color="#E5E5E5">interface card</font><font color="#CCCCCC"> and other things so there</font>

81
00:04:30,380 --> 00:04:37,520
<font color="#E5E5E5">are two types of access that software</font>

82
00:04:33,340 --> 00:04:40,010
uses to get to that<font color="#CCCCCC"> perma on this buy</font>

83
00:04:37,520 --> 00:04:43,130
<font color="#E5E5E5">flash first is the direct access to</font>

84
00:04:40,010 --> 00:04:45,730
memory mapped memory through the memory

85
00:04:43,130 --> 00:04:50,990
addressable space<font color="#E5E5E5"> basically any any</font>

86
00:04:45,730 --> 00:04:56,110
address of a below certain<font color="#E5E5E5"> size</font>

87
00:04:50,990 --> 00:04:56,110
<font color="#E5E5E5">underneath the</font><font color="#CCCCCC"> the poor gigabytes</font><font color="#E5E5E5"> is</font>

88
00:04:56,140 --> 00:05:03,500
magically translated into this<font color="#CCCCCC"> buy read</font>

89
00:04:59,540 --> 00:05:07,070
cycles on the on the<font color="#CCCCCC"> spi bus and and and</font>

90
00:05:03,500 --> 00:05:11,570
and and<font color="#E5E5E5"> get to to the contents of the</font>

91
00:05:07,070 --> 00:05:15,890
<font color="#E5E5E5">SPI flash but there's there's a this is</font>

92
00:05:11,570 --> 00:05:19,730
all<font color="#CCCCCC"> the this</font><font color="#E5E5E5"> is only used for reads it</font>

93
00:05:15,890 --> 00:05:23,090
it's it's used to bootstrap the the<font color="#E5E5E5"> or</font>

94
00:05:19,730 --> 00:05:25,250
actually the<font color="#CCCCCC"> fetch the the reset vector</font>

95
00:05:23,090 --> 00:05:25,789
<font color="#E5E5E5">out of</font><font color="#CCCCCC"> Flash one they CPU</font><font color="#E5E5E5"> comes out of</font>

96
00:05:25,250 --> 00:05:28,730
reset

97
00:05:25,790 --> 00:05:30,950
but<font color="#CCCCCC"> there's</font><font color="#E5E5E5"> another access programmable</font>

98
00:05:28,730 --> 00:05:33,860
register access<font color="#E5E5E5"> that the software is</font>

99
00:05:30,950 --> 00:05:36,020
using in<font color="#E5E5E5"> order to read or write to the</font>

100
00:05:33,860 --> 00:05:37,370
system flash<font color="#E5E5E5"> and that's</font><font color="#CCCCCC"> usually done</font>

101
00:05:36,020 --> 00:05:40,219
<font color="#E5E5E5">through the memory mapped i/o registers</font>

102
00:05:37,370 --> 00:05:44,150
so<font color="#CCCCCC"> player of the chips out of a SPI</font>

103
00:05:40,220 --> 00:05:46,700
controller<font color="#E5E5E5"> in the chipset so with that</font>

104
00:05:44,150 --> 00:05:49,060
software programs the flashlight near

105
00:05:46,700 --> 00:05:52,390
address is explicitly<font color="#E5E5E5"> into the registers</font>

106
00:05:49,060 --> 00:05:56,450
<font color="#E5E5E5">indicating to the controller which which</font>

107
00:05:52,390 --> 00:05:59,780
or where<font color="#E5E5E5"> exactly it needs to write to or</font>

108
00:05:56,450 --> 00:06:04,460
read from<font color="#E5E5E5"> and so system flash can be</font>

109
00:05:59,780 --> 00:06:07,669
<font color="#E5E5E5">partitioned into multiple regions</font><font color="#CCCCCC"> one</font>

110
00:06:04,460 --> 00:06:10,039
region is the the<font color="#E5E5E5"> bias region</font><font color="#CCCCCC"> u5m region</font>

111
00:06:07,670 --> 00:06:11,360
another<font color="#E5E5E5"> is manageability engine embedded</font>

112
00:06:10,040 --> 00:06:12,249
<font color="#CCCCCC">controller region</font>

113
00:06:11,360 --> 00:06:14,679
<font color="#CCCCCC">GB</font>

114
00:06:12,249 --> 00:06:16,209
<font color="#E5E5E5">and so on but there is also this</font>

115
00:06:14,679 --> 00:06:18,998
partition table called<font color="#CCCCCC"> flashlights</font>

116
00:06:16,209 --> 00:06:23,859
scraper<font color="#E5E5E5"> which is also a region by itself</font>

117
00:06:18,999 --> 00:06:26,559
it's the first region<font color="#CCCCCC"> that actually</font>

118
00:06:23,859 --> 00:06:30,099
describes<font color="#E5E5E5"> the how the flash chip is is</font>

119
00:06:26,559 --> 00:06:34,179
partitioned<font color="#E5E5E5"> so that descriptor is is the</font>

120
00:06:30,099 --> 00:06:38,909
first<font color="#E5E5E5"> four kilobyte of of spy device by</font>

121
00:06:34,179 --> 00:06:42,248
chip device<font color="#E5E5E5"> located at the</font><font color="#CCCCCC"> fillet zero</font>

122
00:06:38,909 --> 00:06:44,259
<font color="#CCCCCC">it the way</font><font color="#E5E5E5"> hardware or</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> way chips</font>

123
00:06:42,249 --> 00:06:46,269
<font color="#E5E5E5">determines that the flash</font><font color="#CCCCCC"> is operating</font>

124
00:06:44,259 --> 00:06:47,799
in the<font color="#CCCCCC"> descriptor mode is it reads</font>

125
00:06:46,269 --> 00:06:51,309
certain signature and if it sees the

126
00:06:47,799 --> 00:06:53,609
<font color="#E5E5E5">signature then it considers that a</font><font color="#CCCCCC"> ten</font>

127
00:06:51,309 --> 00:06:56,939
hex offset then it considers that<font color="#E5E5E5"> their</font>

128
00:06:53,610 --> 00:06:59,499
flashes and is<font color="#E5E5E5"> valid and their</font>

129
00:06:56,939 --> 00:07:01,209
descriptor is valid and<font color="#E5E5E5"> the flash is</font>

130
00:06:59,499 --> 00:07:05,289
operating<font color="#E5E5E5"> and they and they just kept</font>

131
00:07:01,209 --> 00:07:06,579
remote<font color="#E5E5E5"> but in so that that that</font>

132
00:07:05,289 --> 00:07:09,669
descriptor

133
00:07:06,579 --> 00:07:12,189
it's a<font color="#CCCCCC"> literally a partition table</font><font color="#E5E5E5"> so</font>

134
00:07:09,669 --> 00:07:14,558
what it would what it has it describes

135
00:07:12,189 --> 00:07:17,799
all other regions<font color="#E5E5E5"> where those are</font>

136
00:07:14,559 --> 00:07:19,839
located<font color="#CCCCCC"> what's the size of</font><font color="#E5E5E5"> those regions</font>

137
00:07:17,799 --> 00:07:23,169
<font color="#E5E5E5">but it also describes who can access</font>

138
00:07:19,839 --> 00:07:26,019
which regions so<font color="#E5E5E5"> that there are there</font>

139
00:07:23,169 --> 00:07:28,239
could be multiple masters in the

140
00:07:26,019 --> 00:07:30,309
platform<font color="#E5E5E5"> that can</font><font color="#CCCCCC"> access the same flash</font>

141
00:07:28,239 --> 00:07:32,888
<font color="#CCCCCC">and some</font><font color="#E5E5E5"> masters should be able to</font>

142
00:07:30,309 --> 00:07:36,219
<font color="#CCCCCC">access some regions while others should</font>

143
00:07:32,889 --> 00:07:38,559
<font color="#CCCCCC">be able</font><font color="#E5E5E5"> to access other regions and so</font>

144
00:07:36,219 --> 00:07:40,479
that<font color="#E5E5E5"> particular so that access control</font>

145
00:07:38,559 --> 00:07:44,369
<font color="#E5E5E5">table within the descriptor region</font>

146
00:07:40,479 --> 00:07:46,820
defines which<font color="#CCCCCC"> master who</font><font color="#E5E5E5"> can access</font>

147
00:07:44,369 --> 00:07:49,280
<font color="#E5E5E5">which region in</font>

148
00:07:46,820 --> 00:07:56,900
<font color="#E5E5E5">in the flesh</font><font color="#CCCCCC"> and which type of</font><font color="#E5E5E5"> access</font>

149
00:07:49,280 --> 00:08:00,380
read or write access<font color="#E5E5E5"> so how how the how</font>

150
00:07:56,900 --> 00:08:04,030
<font color="#E5E5E5">that affects the security of the system</font>

151
00:08:00,380 --> 00:08:07,580
<font color="#E5E5E5">firma in that system flash well first is</font>

152
00:08:04,030 --> 00:08:10,250
<font color="#E5E5E5">or what are the what are the what are</font>

153
00:08:07,580 --> 00:08:12,530
the basic mechanisms to that systems use

154
00:08:10,250 --> 00:08:15,950
to protect<font color="#CCCCCC"> the firma</font>

155
00:08:12,530 --> 00:08:18,830
the first is the is pretty<font color="#E5E5E5"> obvious one</font>

156
00:08:15,950 --> 00:08:20,570
the this every<font color="#CCCCCC"> every system in order to</font>

157
00:08:18,830 --> 00:08:22,430
<font color="#E5E5E5">maintain some basic level of</font><font color="#CCCCCC"> protection</font>

158
00:08:20,570 --> 00:08:25,880
so the firmer it has to have has<font color="#E5E5E5"> to</font>

159
00:08:22,430 --> 00:08:29,120
<font color="#E5E5E5">support</font><font color="#CCCCCC"> sign updates</font><font color="#E5E5E5"> and in the</font><font color="#CCCCCC"> unified</font>

160
00:08:25,880 --> 00:08:32,809
<font color="#E5E5E5">keys those are typically signed updates</font>

161
00:08:29,120 --> 00:08:35,990
are typically used as the<font color="#CCCCCC"> so-called</font>

162
00:08:32,809 --> 00:08:39,520
<font color="#E5E5E5">capsules that sign capsules which are</font>

163
00:08:35,990 --> 00:08:43,430
submitted<font color="#CCCCCC"> by the software to the firmer</font>

164
00:08:39,520 --> 00:08:47,560
on well through memory or through<font color="#CCCCCC"> a file</font>

165
00:08:43,429 --> 00:08:51,199
system<font color="#E5E5E5"> to be flashed on reboot or upon</font>

166
00:08:47,560 --> 00:08:52,880
resume from sleep state from s3<font color="#E5E5E5"> and so</font>

167
00:08:51,200 --> 00:08:56,660
the those capsules contain multiple

168
00:08:52,880 --> 00:09:00,200
volumes<font color="#CCCCCC"> as a payload those volumes could</font>

169
00:08:56,660 --> 00:09:04,520
be the the<font color="#E5E5E5"> actual firmer volume that is</font>

170
00:09:00,200 --> 00:09:07,010
being written to the flash but also from

171
00:09:04,520 --> 00:09:11,540
volume<font color="#E5E5E5"> that includes executables that</font>

172
00:09:07,010 --> 00:09:14,030
<font color="#E5E5E5">will be there</font><font color="#CCCCCC"> for maybe</font><font color="#E5E5E5"> update so there</font>

173
00:09:11,540 --> 00:09:15,530
it's a<font color="#E5E5E5"> rather flexible mechanism the</font>

174
00:09:14,030 --> 00:09:18,980
capsules might also<font color="#E5E5E5"> include how they're</font>

175
00:09:15,530 --> 00:09:22,610
firmer blobs<font color="#E5E5E5"> so not not just</font><font color="#CCCCCC"> the UEFI</font>

176
00:09:18,980 --> 00:09:24,410
but embedded<font color="#E5E5E5"> controller and so on so</font>

177
00:09:22,610 --> 00:09:27,590
<font color="#CCCCCC">they when that capsule is submitted</font>

178
00:09:24,410 --> 00:09:29,209
<font color="#E5E5E5">through memory if it's a upon</font><font color="#CCCCCC"> a3 resume</font>

179
00:09:27,590 --> 00:09:32,180
or through file system if<font color="#E5E5E5"> it's upon a</font>

180
00:09:29,210 --> 00:09:35,120
reboot then the one one system comes up

181
00:09:32,180 --> 00:09:37,760
from reboot or sleep<font color="#CCCCCC"> it checks the</font>

182
00:09:35,120 --> 00:09:42,380
signature of<font color="#CCCCCC"> that capsule authenticate</font>

183
00:09:37,760 --> 00:09:43,790
said it also authenticates the the the

184
00:09:42,380 --> 00:09:46,610
<font color="#E5E5E5">actual executable that</font><font color="#CCCCCC"> will be</font>

185
00:09:43,790 --> 00:09:50,390
performing<font color="#CCCCCC"> the update typically through</font>

186
00:09:46,610 --> 00:09:53,430
<font color="#E5E5E5">a secure boot mechanism and and then</font>

187
00:09:50,390 --> 00:09:55,860
writes<font color="#CCCCCC"> the updates the</font>

188
00:09:53,430 --> 00:09:58,469
the<font color="#E5E5E5"> contents of the</font><font color="#CCCCCC"> firmware the</font>

189
00:09:55,860 --> 00:10:00,120
contents of that capsule<font color="#E5E5E5"> so that that's</font>

190
00:09:58,470 --> 00:10:02,880
the first<font color="#E5E5E5"> basic mechanism the second</font>

191
00:10:00,120 --> 00:10:05,850
basic mechanism obviously is the that

192
00:10:02,880 --> 00:10:08,100
the the the<font color="#CCCCCC"> actual</font><font color="#E5E5E5"> flash memory has</font><font color="#CCCCCC"> to</font>

193
00:10:05,850 --> 00:10:10,740
<font color="#CCCCCC">be right protected at one time because</font>

194
00:10:08,100 --> 00:10:12,420
if it's<font color="#E5E5E5"> not then the the fact that your</font>

195
00:10:10,740 --> 00:10:15,780
system implemented<font color="#E5E5E5"> sign update doesn't</font>

196
00:10:12,420 --> 00:10:18,030
<font color="#E5E5E5">mean anything because</font><font color="#CCCCCC"> if</font><font color="#E5E5E5"> the exploit can</font>

197
00:10:15,780 --> 00:10:20,010
just directly modify<font color="#CCCCCC"> the the</font><font color="#E5E5E5"> perma on</font>

198
00:10:18,030 --> 00:10:22,680
the flash<font color="#E5E5E5"> then they will be</font><font color="#CCCCCC"> able</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> uh</font>

199
00:10:20,010 --> 00:10:24,960
it will it would<font color="#E5E5E5"> be able</font><font color="#CCCCCC"> to modify</font><font color="#E5E5E5"> the</font>

200
00:10:22,680 --> 00:10:27,810
code<font color="#E5E5E5"> that is performing the signature</font>

201
00:10:24,960 --> 00:10:29,700
<font color="#E5E5E5">check so that's the</font><font color="#CCCCCC"> the other basic</font>

202
00:10:27,810 --> 00:10:33,300
mechanism that has to be present<font color="#CCCCCC"> on</font>

203
00:10:29,700 --> 00:10:35,190
<font color="#CCCCCC">every system</font><font color="#E5E5E5"> and on on x86 systems there</font>

204
00:10:33,300 --> 00:10:38,339
<font color="#CCCCCC">are a number number of ways</font><font color="#E5E5E5"> to achieve</font>

205
00:10:35,190 --> 00:10:40,260
that<font color="#E5E5E5"> one as</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> as which Chromebooks are</font>

206
00:10:38,340 --> 00:10:42,510
using they basically<font color="#CCCCCC"> just have a screw</font>

207
00:10:40,260 --> 00:10:45,140
that asserts<font color="#E5E5E5"> the</font><font color="#CCCCCC"> write-protect pin on</font>

208
00:10:42,510 --> 00:10:49,680
<font color="#E5E5E5">this pi devices</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> most of the non</font>

209
00:10:45,140 --> 00:10:51,870
<font color="#E5E5E5">chromebook devices they use chipset</font>

210
00:10:49,680 --> 00:10:55,349
based mechanisms one of them is the

211
00:10:51,870 --> 00:10:59,250
so-called protected range registers<font color="#CCCCCC"> the</font>

212
00:10:55,350 --> 00:11:03,150
other one is some members based<font color="#CCCCCC"> write</font>

213
00:10:59,250 --> 00:11:09,900
protect<font color="#CCCCCC"> mechanisms so basically that</font>

214
00:11:03,150 --> 00:11:10,439
<font color="#CCCCCC">allows software</font><font color="#E5E5E5"> to update the flash at</font>

215
00:11:09,900 --> 00:11:12,449
runtime

216
00:11:10,440 --> 00:11:15,570
only when<font color="#CCCCCC"> that software</font><font color="#E5E5E5"> execute sin that</font>

217
00:11:12,450 --> 00:11:18,270
special mode called<font color="#CCCCCC"> SMM and obviously</font>

218
00:11:15,570 --> 00:11:20,970
<font color="#E5E5E5">after checking</font><font color="#CCCCCC"> the second trough what</font>

219
00:11:18,270 --> 00:11:22,530
what is being<font color="#E5E5E5"> written to the flash so</font>

220
00:11:20,970 --> 00:11:25,320
that's the second mechanism<font color="#CCCCCC"> so obviously</font>

221
00:11:22,530 --> 00:11:27,959
the firmer has to be<font color="#CCCCCC"> write protected</font><font color="#E5E5E5"> and</font>

222
00:11:25,320 --> 00:11:30,420
the third protection is the descriptor

223
00:11:27,960 --> 00:11:35,400
itself has to be<font color="#E5E5E5"> write protected as well</font>

224
00:11:30,420 --> 00:11:37,500
<font color="#E5E5E5">and the way it's achieved is the the the</font>

225
00:11:35,400 --> 00:11:40,760
<font color="#CCCCCC">Saxa control table within</font><font color="#E5E5E5"> the descriptor</font>

226
00:11:37,500 --> 00:11:43,410
is<font color="#CCCCCC"> is program to the manufacturing to</font>

227
00:11:40,760 --> 00:11:45,390
prevent<font color="#CCCCCC"> writes to that</font><font color="#E5E5E5"> region</font><font color="#CCCCCC"> 0</font>

228
00:11:43,410 --> 00:11:47,640
<font color="#CCCCCC">descriptor region so it's a self</font>

229
00:11:45,390 --> 00:11:49,980
protecting and<font color="#E5E5E5"> that happens only once</font>

230
00:11:47,640 --> 00:11:53,520
when descriptor is<font color="#E5E5E5"> flushed into the</font>

231
00:11:49,980 --> 00:11:54,660
flash chip then<font color="#E5E5E5"> software is not</font><font color="#CCCCCC"> able to</font>

232
00:11:53,520 --> 00:11:57,449
<font color="#CCCCCC">update that description</font>

233
00:11:54,660 --> 00:11:59,310
<font color="#E5E5E5">anymore so that</font><font color="#CCCCCC"> that's how those</font>

234
00:11:57,450 --> 00:12:02,700
protections are supposed to<font color="#CCCCCC"> work</font><font color="#E5E5E5"> because</font>

235
00:11:59,310 --> 00:12:04,650
otherwise if exploit is<font color="#E5E5E5"> able</font>

236
00:12:02,700 --> 00:12:06,810
modified the descriptor<font color="#CCCCCC"> then it is able</font>

237
00:12:04,650 --> 00:12:09,510
<font color="#CCCCCC">to</font><font color="#E5E5E5"> modify that the partition table or</font>

238
00:12:06,810 --> 00:12:11,520
access control table<font color="#E5E5E5"> or other things for</font>

239
00:12:09,510 --> 00:12:13,590
just<font color="#CCCCCC"> even break</font><font color="#E5E5E5"> system so those are</font>

240
00:12:11,520 --> 00:12:16,290
three basic mechanisms that<font color="#E5E5E5"> have to be</font>

241
00:12:13,590 --> 00:12:18,660
<font color="#E5E5E5">present on</font><font color="#CCCCCC"> every system and I'm not</font>

242
00:12:16,290 --> 00:12:22,199
talking about any like complex

243
00:12:18,660 --> 00:12:26,569
vulnerabilities in the<font color="#CCCCCC"> unify or in</font><font color="#E5E5E5"> SM</font>

244
00:12:22,200 --> 00:12:29,730
<font color="#E5E5E5">those are basic things</font><font color="#CCCCCC"> that have to be</font>

245
00:12:26,570 --> 00:12:32,100
everywhere<font color="#E5E5E5"> and so the usual way to check</font>

246
00:12:29,730 --> 00:12:33,750
<font color="#CCCCCC">for those basic things is let's say</font><font color="#E5E5E5"> run</font>

247
00:12:32,100 --> 00:12:35,940
chip sack there are<font color="#E5E5E5"> modules and chips</font>

248
00:12:33,750 --> 00:12:41,400
like that just<font color="#E5E5E5"> test for each of those</font>

249
00:12:35,940 --> 00:12:43,560
<font color="#E5E5E5">and so sure enough a lot of platforms</font>

250
00:12:41,400 --> 00:12:48,120
even<font color="#E5E5E5"> the newest used ones they fail</font>

251
00:12:43,560 --> 00:12:50,069
those tests for example<font color="#CCCCCC"> you</font><font color="#E5E5E5"> just did we</font>

252
00:12:48,120 --> 00:12:53,670
did the<font color="#E5E5E5"> tests on there it's kind of like</font>

253
00:12:50,070 --> 00:12:56,760
<font color="#E5E5E5">based</font><font color="#CCCCCC"> MSI systems they they failed</font><font color="#E5E5E5"> Alex</font>

254
00:12:53,670 --> 00:13:00,660
Madras have recently did<font color="#CCCCCC"> the analysis of</font>

255
00:12:56,760 --> 00:13:06,050
gigabyte systems bricks and and those

256
00:13:00,660 --> 00:13:08,969
<font color="#E5E5E5">failed</font><font color="#CCCCCC"> we also did some Corbett analysis</font>

257
00:13:06,050 --> 00:13:11,670
on systems that<font color="#E5E5E5"> are that have</font><font color="#CCCCCC"> corbett's</font>

258
00:13:08,970 --> 00:13:15,870
<font color="#CCCCCC">not Chromebooks but just random systems</font>

259
00:13:11,670 --> 00:13:17,520
and those failed<font color="#E5E5E5"> as</font><font color="#CCCCCC"> well but again</font><font color="#E5E5E5"> the</font>

260
00:13:15,870 --> 00:13:20,910
downside<font color="#CCCCCC"> of this approach</font><font color="#E5E5E5"> is that it</font>

261
00:13:17,520 --> 00:13:22,800
<font color="#E5E5E5">requires a actual running</font><font color="#CCCCCC"> an actual</font>

262
00:13:20,910 --> 00:13:24,780
<font color="#CCCCCC">equipment so that</font><font color="#E5E5E5"> that's that's not</font>

263
00:13:22,800 --> 00:13:27,439
scalable we want to scale<font color="#CCCCCC"> to understand</font>

264
00:13:24,780 --> 00:13:30,420
the whole the<font color="#CCCCCC"> whole picture without</font>

265
00:13:27,440 --> 00:13:32,520
playing this whack-a-mole game of

266
00:13:30,420 --> 00:13:34,740
testing on every<font color="#E5E5E5"> single system and</font>

267
00:13:32,520 --> 00:13:38,210
<font color="#E5E5E5">finding the same things again and again</font>

268
00:13:34,740 --> 00:13:43,200
<font color="#CCCCCC">so that's</font><font color="#E5E5E5"> what that's that's why we</font>

269
00:13:38,210 --> 00:13:46,080
started that analysis so first is how we

270
00:13:43,200 --> 00:13:48,030
can achieve that<font color="#CCCCCC"> we have tons of efi</font>

271
00:13:46,080 --> 00:13:51,330
images<font color="#CCCCCC"> available to us through the</font>

272
00:13:48,030 --> 00:13:53,310
websites of manufacturers<font color="#E5E5E5"> can can we</font>

273
00:13:51,330 --> 00:13:57,270
actually use<font color="#CCCCCC"> them to test</font><font color="#E5E5E5"> for those</font>

274
00:13:53,310 --> 00:14:01,050
<font color="#E5E5E5">basic protections</font><font color="#CCCCCC"> can we find out which</font>

275
00:13:57,270 --> 00:14:02,520
systems<font color="#CCCCCC"> lack those protections just</font>

276
00:14:01,050 --> 00:14:06,209
based on<font color="#E5E5E5"> the analysis of the update</font>

277
00:14:02,520 --> 00:14:08,640
images<font color="#E5E5E5"> so we were not the first who did</font>

278
00:14:06,210 --> 00:14:11,490
<font color="#E5E5E5">this type of research</font>

279
00:14:08,640 --> 00:14:16,230
read in the<font color="#E5E5E5"> past three years ago it did</font>

280
00:14:11,490 --> 00:14:19,740
an awesome research<font color="#CCCCCC"> where he where he</font>

281
00:14:16,230 --> 00:14:23,840
essentially applied a<font color="#E5E5E5"> lot of analysis to</font>

282
00:14:19,740 --> 00:14:26,970
tons of update images<font color="#E5E5E5"> that</font><font color="#CCCCCC"> downloaded</font>

283
00:14:23,840 --> 00:14:28,830
<font color="#E5E5E5">and as part of that research he released</font>

284
00:14:26,970 --> 00:14:32,220
a number<font color="#E5E5E5"> of tools including</font><font color="#CCCCCC"> sub-zero</font>

285
00:14:28,830 --> 00:14:35,250
<font color="#E5E5E5">including the prizefighter</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> lot</font><font color="#CCCCCC"> of the</font>

286
00:14:32,220 --> 00:14:37,320
lot<font color="#CCCCCC"> of the ways that you fry spider gets</font>

287
00:14:35,250 --> 00:14:39,960
damages don't work today<font color="#E5E5E5"> because vendors</font>

288
00:14:37,320 --> 00:14:42,870
changed either<font color="#CCCCCC"> way they publish update</font>

289
00:14:39,960 --> 00:14:45,540
images<font color="#E5E5E5"> so we had to fix that</font><font color="#CCCCCC"> a lot a lot</font>

290
00:14:42,870 --> 00:14:47,820
<font color="#E5E5E5">of</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> but we have used</font><font color="#CCCCCC"> ufi spider</font>

291
00:14:45,540 --> 00:14:51,120
among other things to actually<font color="#E5E5E5"> grab all</font>

292
00:14:47,820 --> 00:14:53,900
<font color="#CCCCCC">the scrape all the websites from all the</font>

293
00:14:51,120 --> 00:14:57,180
vendors and and get all the updates

294
00:14:53,900 --> 00:14:59,819
<font color="#CCCCCC">there are also tools that can parse the</font>

295
00:14:57,180 --> 00:15:02,189
images<font color="#E5E5E5"> because in order to do some</font>

296
00:14:59,820 --> 00:15:05,190
analysis or any<font color="#E5E5E5"> analysis you need to</font>

297
00:15:02,190 --> 00:15:08,220
parse you need to<font color="#E5E5E5"> extract firmer volumes</font>

298
00:15:05,190 --> 00:15:13,230
and<font color="#E5E5E5"> so on so the teddy has a</font><font color="#CCCCCC"> ufi firmer</font>

299
00:15:08,220 --> 00:15:15,750
parser<font color="#CCCCCC"> nickel Ashley has a ufi</font><font color="#E5E5E5"> tool or</font>

300
00:15:13,230 --> 00:15:18,180
<font color="#CCCCCC">unified um specifically</font><font color="#E5E5E5"> utility that can</font>

301
00:15:15,750 --> 00:15:20,370
do that chip cycle so does<font color="#CCCCCC"> that so we</font>

302
00:15:18,180 --> 00:15:27,420
you can use either either of those tools

303
00:15:20,370 --> 00:15:30,450
so<font color="#E5E5E5"> but let's let's continue so this is a</font>

304
00:15:27,420 --> 00:15:35,400
this<font color="#CCCCCC"> is essentially this</font><font color="#E5E5E5"> is essentially</font>

305
00:15:30,450 --> 00:15:42,080
<font color="#E5E5E5">what we</font><font color="#CCCCCC"> based our research on</font><font color="#E5E5E5"> and we're</font>

306
00:15:35,400 --> 00:15:45,120
trying to remotely screen all<font color="#CCCCCC"> of the</font>

307
00:15:42,080 --> 00:15:46,710
<font color="#CCCCCC">firmer update images</font><font color="#E5E5E5"> for certain</font>

308
00:15:45,120 --> 00:15:55,110
problems<font color="#CCCCCC"> in order</font><font color="#E5E5E5"> to find</font>

309
00:15:46,710 --> 00:15:59,460
vulnerabilities<font color="#CCCCCC"> screening right</font><font color="#E5E5E5"> so or</font>

310
00:15:55,110 --> 00:16:02,870
even<font color="#E5E5E5"> shorter telescreen some of you</font>

311
00:15:59,460 --> 00:16:02,870
folks<font color="#E5E5E5"> might appreciate</font><font color="#CCCCCC"> this</font>

312
00:16:02,910 --> 00:16:14,219
especially here<font color="#E5E5E5"> so the</font><font color="#CCCCCC"> the idea behind</font>

313
00:16:06,699 --> 00:16:17,279
that<font color="#CCCCCC"> analysis is what if what if we find</font>

314
00:16:14,220 --> 00:16:21,810
<font color="#E5E5E5">firmer update packages that contain</font>

315
00:16:17,279 --> 00:16:28,060
images<font color="#CCCCCC"> firm Ramage's</font><font color="#E5E5E5"> that are not</font>

316
00:16:21,810 --> 00:16:32,050
<font color="#E5E5E5">capsules but images that include full</font>

317
00:16:28,060 --> 00:16:35,439
<font color="#E5E5E5">valid spy descriptor what does that mean</font>

318
00:16:32,050 --> 00:16:39,370
<font color="#E5E5E5">that means</font><font color="#CCCCCC"> that those images are most</font>

319
00:16:35,440 --> 00:16:42,399
likely<font color="#E5E5E5"> after filtering of course</font><font color="#CCCCCC"> false</font>

320
00:16:39,370 --> 00:16:47,579
positives most likely those images are

321
00:16:42,399 --> 00:16:50,560
full<font color="#E5E5E5"> spi flash images and so those</font><font color="#CCCCCC"> are</font>

322
00:16:47,579 --> 00:16:53,258
primary suspects for us because<font color="#CCCCCC"> that</font>

323
00:16:50,560 --> 00:16:55,660
means that<font color="#E5E5E5"> the update for the firmware</font>

324
00:16:53,259 --> 00:17:00,880
<font color="#E5E5E5">update</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> distributing the entire spy</font>

325
00:16:55,660 --> 00:17:03,790
flash<font color="#E5E5E5"> ROM image</font><font color="#CCCCCC"> which may be an</font>

326
00:17:00,880 --> 00:17:06,400
<font color="#E5E5E5">indication that there is no signature</font><font color="#CCCCCC"> on</font>

327
00:17:03,790 --> 00:17:09,908
the system that<font color="#CCCCCC"> this update is intended</font>

328
00:17:06,400 --> 00:17:13,140
<font color="#CCCCCC">for and there's no write protections of</font>

329
00:17:09,909 --> 00:17:17,230
<font color="#CCCCCC">the assistant flash that someday goes to</font>

330
00:17:13,140 --> 00:17:19,569
so that's easily automatable<font color="#E5E5E5"> but the</font>

331
00:17:17,230 --> 00:17:22,240
problem is a lot<font color="#E5E5E5"> of updates include</font>

332
00:17:19,569 --> 00:17:23,230
those images for<font color="#CCCCCC"> different reasons so</font><font color="#E5E5E5"> we</font>

333
00:17:22,240 --> 00:17:25,510
actually need<font color="#CCCCCC"> to hear in this</font><font color="#E5E5E5"> to</font>

334
00:17:23,230 --> 00:17:27,760
understand once we have this set<font color="#CCCCCC"> of</font>

335
00:17:25,510 --> 00:17:29,559
suspects we need to understand<font color="#E5E5E5"> if the</font>

336
00:17:27,760 --> 00:17:32,379
update is actually using that<font color="#CCCCCC"> image for</font>

337
00:17:29,559 --> 00:17:34,750
the update or<font color="#CCCCCC"> if that image is for</font>

338
00:17:32,380 --> 00:17:37,570
whatever other<font color="#CCCCCC"> reason</font><font color="#E5E5E5"> so that's is not</font>

339
00:17:34,750 --> 00:17:41,890
<font color="#E5E5E5">that that's that's a little bit more</font>

340
00:17:37,570 --> 00:17:46,510
complex<font color="#CCCCCC"> it's less easily automatable</font>

341
00:17:41,890 --> 00:17:48,700
but once we find those candidates<font color="#CCCCCC"> what</font>

342
00:17:46,510 --> 00:17:51,070
that tells us is<font color="#E5E5E5"> that the update</font>

343
00:17:48,700 --> 00:17:54,730
mechanism<font color="#E5E5E5"> is using entire ROM image</font>

344
00:17:51,070 --> 00:17:56,620
which means that<font color="#E5E5E5"> they</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> not signed and</font>

345
00:17:54,730 --> 00:17:58,809
if they are not signed that means that

346
00:17:56,620 --> 00:18:01,178
most<font color="#CCCCCC"> likely</font><font color="#E5E5E5"> means</font><font color="#CCCCCC"> that the system flash</font>

347
00:17:58,809 --> 00:18:03,129
is<font color="#CCCCCC"> not protected</font><font color="#E5E5E5"> because if you don't</font>

348
00:18:01,179 --> 00:18:06,039
<font color="#CCCCCC">implement signed updates why would you</font>

349
00:18:03,130 --> 00:18:10,040
protect the assistant flash at<font color="#E5E5E5"> all</font><font color="#CCCCCC"> and</font>

350
00:18:06,039 --> 00:18:11,510
in in in a lot of<font color="#E5E5E5"> cases now</font><font color="#CCCCCC"> explain</font><font color="#E5E5E5"> why</font>

351
00:18:10,040 --> 00:18:13,430
a lot<font color="#E5E5E5"> of cases that also means that the</font>

352
00:18:11,510 --> 00:18:15,470
descriptor is<font color="#E5E5E5"> right</font><font color="#CCCCCC"> at rewritable</font><font color="#E5E5E5"> so we</font>

353
00:18:13,430 --> 00:18:17,930
essentially if we<font color="#E5E5E5"> find those candidates</font>

354
00:18:15,470 --> 00:18:20,600
<font color="#E5E5E5">then we find systems that have those</font>

355
00:18:17,930 --> 00:18:22,940
three basic vulnerabilities there<font color="#E5E5E5"> so the</font>

356
00:18:20,600 --> 00:18:26,120
whole process looks<font color="#CCCCCC"> like that we</font><font color="#E5E5E5"> just</font>

357
00:18:22,940 --> 00:18:28,790
download a lot a lot of firmer updates

358
00:18:26,120 --> 00:18:31,659
<font color="#E5E5E5">from vendor websites then we extract all</font>

359
00:18:28,790 --> 00:18:34,220
sorts of binaries from those updates

360
00:18:31,660 --> 00:18:36,680
<font color="#CCCCCC">update packages which look like</font><font color="#E5E5E5"> firmer</font>

361
00:18:34,220 --> 00:18:39,620
<font color="#E5E5E5">images then of course the we get</font><font color="#CCCCCC"> a lot</font>

362
00:18:36,680 --> 00:18:41,840
<font color="#E5E5E5">of candidates for images but</font><font color="#CCCCCC"> not all of</font>

363
00:18:39,620 --> 00:18:43,879
<font color="#CCCCCC">them are</font><font color="#E5E5E5"> really firm Ramage's some of</font>

364
00:18:41,840 --> 00:18:47,419
them are<font color="#CCCCCC"> just too weird whiners so we</font>

365
00:18:43,880 --> 00:18:50,390
need to<font color="#CCCCCC"> filter out the</font><font color="#E5E5E5"> the binaries that</font>

366
00:18:47,420 --> 00:18:52,910
<font color="#E5E5E5">are really firm Ramage's and after that</font>

367
00:18:50,390 --> 00:18:56,120
<font color="#E5E5E5">we need to understand if those are unify</font>

368
00:18:52,910 --> 00:18:57,770
images or full spy images or bias images

369
00:18:56,120 --> 00:19:01,580
and so<font color="#E5E5E5"> on so we</font><font color="#CCCCCC"> need to parson analyze</font>

370
00:18:57,770 --> 00:19:04,970
those that's<font color="#CCCCCC"> uh that looks</font><font color="#E5E5E5"> rather simple</font>

371
00:19:01,580 --> 00:19:08,240
so<font color="#E5E5E5"> this is what essentially we did we</font>

372
00:19:04,970 --> 00:19:10,190
we've downloaded<font color="#E5E5E5"> approximately 33,000</font>

373
00:19:08,240 --> 00:19:14,690
<font color="#CCCCCC">firmware update packages</font><font color="#E5E5E5"> from nine</font>

374
00:19:10,190 --> 00:19:18,260
vendors<font color="#CCCCCC"> some of them better coverage had</font>

375
00:19:14,690 --> 00:19:21,470
better coverage than<font color="#E5E5E5"> others but it's</font>

376
00:19:18,260 --> 00:19:25,090
been a pretty significant<font color="#CCCCCC"> amount of big</font>

377
00:19:21,470 --> 00:19:29,200
packages that we got we've extracted

378
00:19:25,090 --> 00:19:33,220
<font color="#E5E5E5">44,000 different candidate images by</font>

379
00:19:29,200 --> 00:19:36,680
filtering<font color="#E5E5E5"> them through known known</font>

380
00:19:33,220 --> 00:19:40,730
binaries used in the in the updates like

381
00:19:36,680 --> 00:19:43,670
ROM<font color="#CCCCCC"> Ben</font><font color="#E5E5E5"> I am a cap and so on basically</font>

382
00:19:40,730 --> 00:19:47,390
the<font color="#E5E5E5"> typical typical extensions used by</font>

383
00:19:43,670 --> 00:19:49,400
the vendors for the firm Ramage's but we

384
00:19:47,390 --> 00:19:51,500
also applied some other things because

385
00:19:49,400 --> 00:19:53,900
sometimes<font color="#E5E5E5"> extensions are</font><font color="#CCCCCC"> not enough</font><font color="#E5E5E5"> so</font>

386
00:19:51,500 --> 00:19:57,320
we applied some some basic heuristics

387
00:19:53,900 --> 00:20:00,160
look for no magic valise and<font color="#E5E5E5"> looked</font>

388
00:19:57,320 --> 00:20:04,429
whether whether<font color="#E5E5E5"> the image looks like a</font>

389
00:20:00,160 --> 00:20:07,940
unify for example it<font color="#E5E5E5"> has some</font><font color="#CCCCCC"> FB</font><font color="#E5E5E5"> age</font>

390
00:20:04,430 --> 00:20:13,940
from<font color="#CCCCCC"> Reb Oleum signatures and so on</font><font color="#E5E5E5"> and</font>

391
00:20:07,940 --> 00:20:18,970
then after<font color="#CCCCCC"> that</font><font color="#E5E5E5"> filtering we've we've</font>

392
00:20:13,940 --> 00:20:20,260
got<font color="#CCCCCC"> 21</font><font color="#E5E5E5"> thousand unique ufy former images</font>

393
00:20:18,970 --> 00:20:22,270
<font color="#CCCCCC">in</font>

394
00:20:20,260 --> 00:20:26,560
<font color="#E5E5E5">there there there there were duplicates</font>

395
00:20:22,270 --> 00:20:30,670
so so that's why you know the number is

396
00:20:26,560 --> 00:20:36,850
<font color="#E5E5E5">lower so 21 thousands unique</font><font color="#CCCCCC"> ufi images</font>

397
00:20:30,670 --> 00:20:39,100
we've parsed them<font color="#CCCCCC"> analyze them the rest</font>

398
00:20:36,850 --> 00:20:44,980
of<font color="#E5E5E5"> the images were we're all so laggy</font>

399
00:20:39,100 --> 00:20:49,389
<font color="#E5E5E5">see biases so one thing in this</font><font color="#CCCCCC"> process</font>

400
00:20:44,980 --> 00:20:51,640
is that<font color="#CCCCCC"> it</font><font color="#E5E5E5"> it supposed to be</font><font color="#CCCCCC"> work it</font><font color="#E5E5E5"> it</font>

401
00:20:49,390 --> 00:20:53,470
it should<font color="#E5E5E5"> have been generic</font><font color="#CCCCCC"> it should</font>

402
00:20:51,640 --> 00:20:55,540
have been<font color="#E5E5E5"> simple</font><font color="#CCCCCC"> to extract</font><font color="#E5E5E5"> those images</font>

403
00:20:53,470 --> 00:20:57,610
but the reality is<font color="#CCCCCC"> there the update</font>

404
00:20:55,540 --> 00:21:00,580
<font color="#E5E5E5">packages there they're not equal</font><font color="#CCCCCC"> to the</font>

405
00:20:57,610 --> 00:21:02,560
actual actual firmware images that<font color="#E5E5E5"> Union</font>

406
00:21:00,580 --> 00:21:05,379
to analyze so there is no standard

407
00:21:02,560 --> 00:21:08,169
formats<font color="#E5E5E5"> so for examples that we've seen</font>

408
00:21:05,380 --> 00:21:10,030
that that we've seen that<font color="#E5E5E5"> update</font>

409
00:21:08,170 --> 00:21:13,170
packages include all<font color="#E5E5E5"> sorts of utilities</font>

410
00:21:10,030 --> 00:21:15,940
for different OSS like<font color="#CCCCCC"> das GFI</font><font color="#E5E5E5"> shell and</font>

411
00:21:13,170 --> 00:21:19,870
<font color="#CCCCCC">Windows and Linux and</font><font color="#E5E5E5"> so on for update</font>

412
00:21:15,940 --> 00:21:21,580
<font color="#E5E5E5">then the the firmware images in a lot of</font>

413
00:21:19,870 --> 00:21:24,010
updates were encrypted or in some

414
00:21:21,580 --> 00:21:25,840
updates were encrypted<font color="#CCCCCC"> so we actually</font>

415
00:21:24,010 --> 00:21:28,390
had to<font color="#E5E5E5"> understand how</font><font color="#CCCCCC"> they decrypt those</font>

416
00:21:25,840 --> 00:21:31,030
how<font color="#E5E5E5"> does the update package decrypt</font>

417
00:21:28,390 --> 00:21:34,330
those then there were multiple types of

418
00:21:31,030 --> 00:21:36,250
firm<font color="#E5E5E5"> Ramage's for the same</font><font color="#CCCCCC"> update</font><font color="#E5E5E5"> but</font>

419
00:21:34,330 --> 00:21:39,580
it's used in<font color="#CCCCCC"> different</font><font color="#E5E5E5"> cases in</font>

420
00:21:36,250 --> 00:21:43,900
<font color="#CCCCCC">different in different ways they updated</font>

421
00:21:39,580 --> 00:21:45,850
apply<font color="#CCCCCC"> and also in a lot of cases we've</font>

422
00:21:43,900 --> 00:21:48,610
seen<font color="#E5E5E5"> that they images were just plainly</font>

423
00:21:45,850 --> 00:21:52,330
<font color="#E5E5E5">embedded into the executables so all of</font>

424
00:21:48,610 --> 00:21:54,370
those<font color="#CCCCCC"> had to be had to be</font><font color="#E5E5E5"> somehow</font>

425
00:21:52,330 --> 00:21:56,949
understood<font color="#E5E5E5"> comprehended and and in order</font>

426
00:21:54,370 --> 00:22:03,040
to<font color="#E5E5E5"> just even extract their suspects at</font>

427
00:21:56,950 --> 00:22:05,170
images<font color="#CCCCCC"> and yeah so the the algorithm was</font>

428
00:22:03,040 --> 00:22:07,570
rather<font color="#CCCCCC"> straightforward so we try</font><font color="#E5E5E5"> to</font>

429
00:22:05,170 --> 00:22:09,880
apply common we'll try to understand if

430
00:22:07,570 --> 00:22:12,629
it's a<font color="#E5E5E5"> it's if it's a just</font>

431
00:22:09,880 --> 00:22:15,880
sort of<font color="#E5E5E5"> a known archive and we</font>

432
00:22:12,630 --> 00:22:18,340
decompress<font color="#CCCCCC"> it if it doesn't</font><font color="#E5E5E5"> work use</font><font color="#CCCCCC"> bin</font>

433
00:22:15,880 --> 00:22:21,550
walk<font color="#E5E5E5"> sometimes use</font><font color="#CCCCCC"> them there's specific</font>

434
00:22:18,340 --> 00:22:24,370
utilities<font color="#CCCCCC"> sometimes the vendor updates</font>

435
00:22:21,550 --> 00:22:25,899
<font color="#E5E5E5">had a special</font><font color="#CCCCCC"> command-line arguments in</font>

436
00:22:24,370 --> 00:22:29,110
<font color="#CCCCCC">order</font><font color="#E5E5E5"> to extract images</font><font color="#CCCCCC"> out of the</font>

437
00:22:25,900 --> 00:22:30,820
<font color="#CCCCCC">update</font><font color="#E5E5E5"> that we found it and we could use</font>

438
00:22:29,110 --> 00:22:32,949
and also<font color="#E5E5E5"> other</font><font color="#CCCCCC"> things</font><font color="#E5E5E5"> like</font><font color="#CCCCCC"> for example</font>

439
00:22:30,820 --> 00:22:34,929
just monitoring<font color="#E5E5E5"> the file system how the</font>

440
00:22:32,950 --> 00:22:37,900
update changes file system and where it

441
00:22:34,930 --> 00:22:41,230
drops the the contents of the date

442
00:22:37,900 --> 00:22:44,260
<font color="#E5E5E5">package so after</font><font color="#CCCCCC"> all of that</font><font color="#E5E5E5"> is done we</font>

443
00:22:41,230 --> 00:22:46,060
need<font color="#E5E5E5"> to search forest by descriptors in</font>

444
00:22:44,260 --> 00:22:53,020
the images<font color="#E5E5E5"> because we we need to find</font>

445
00:22:46,060 --> 00:22:56,679
<font color="#E5E5E5">those fools by</font><font color="#CCCCCC"> raw images</font><font color="#E5E5E5"> so in order</font><font color="#CCCCCC"> to</font>

446
00:22:53,020 --> 00:23:00,430
do that<font color="#CCCCCC"> we've excluded capsule known</font>

447
00:22:56,680 --> 00:23:03,370
capsules<font color="#CCCCCC"> cap</font><font color="#E5E5E5"> FL type of images from the</font>

448
00:23:00,430 --> 00:23:06,670
updates<font color="#E5E5E5"> we only included images with the</font>

449
00:23:03,370 --> 00:23:08,320
exact size of a spy flash<font color="#E5E5E5"> chip because</font>

450
00:23:06,670 --> 00:23:11,430
we're interested<font color="#E5E5E5"> in the fools by image</font>

451
00:23:08,320 --> 00:23:14,320
we only included images<font color="#E5E5E5"> which contain</font>

452
00:23:11,430 --> 00:23:17,650
valid spy flash descriptor<font color="#E5E5E5"> and also</font>

453
00:23:14,320 --> 00:23:19,500
<font color="#E5E5E5">rewritable descriptor so the valid flash</font>

454
00:23:17,650 --> 00:23:22,030
descriptor it has a couple<font color="#CCCCCC"> of conditions</font>

455
00:23:19,500 --> 00:23:24,730
<font color="#CCCCCC">first</font><font color="#E5E5E5"> it has</font><font color="#CCCCCC"> to have signature at the</font>

456
00:23:22,030 --> 00:23:26,620
<font color="#E5E5E5">offset</font><font color="#CCCCCC"> ton hax</font><font color="#E5E5E5"> then it's not really</font>

457
00:23:24,730 --> 00:23:28,090
sufficient<font color="#E5E5E5"> to look for just a signature</font>

458
00:23:26,620 --> 00:23:31,330
because there are spurious signatures

459
00:23:28,090 --> 00:23:34,419
all<font color="#E5E5E5"> over and</font><font color="#CCCCCC"> so we've we've looked for</font>

460
00:23:31,330 --> 00:23:37,540
the reserved<font color="#CCCCCC"> reserved bytes in the</font>

461
00:23:34,420 --> 00:23:40,240
description<font color="#E5E5E5"> so basically basic sanity</font>

462
00:23:37,540 --> 00:23:43,030
checking<font color="#CCCCCC"> rewrite access to the spy flash</font>

463
00:23:40,240 --> 00:23:44,860
<font color="#E5E5E5">descriptor is basically defined by that</font>

464
00:23:43,030 --> 00:23:48,220
access<font color="#CCCCCC"> table that I mentioned and</font>

465
00:23:44,860 --> 00:23:50,139
<font color="#E5E5E5">previously so we've</font><font color="#CCCCCC"> looked for the</font>

466
00:23:48,220 --> 00:23:53,260
images that<font color="#CCCCCC"> contain descriptor which is</font>

467
00:23:50,140 --> 00:23:56,380
read<font color="#E5E5E5"> writable basically this first our</font>

468
00:23:53,260 --> 00:23:59,650
<font color="#CCCCCC">RW</font><font color="#E5E5E5"> value of CP you can read right</font><font color="#CCCCCC"> to the</font>

469
00:23:56,380 --> 00:24:05,860
spine descriptor as a result of that

470
00:23:59,650 --> 00:24:13,060
<font color="#E5E5E5">we've</font><font color="#CCCCCC"> got out of 21,000 unique efi</font>

471
00:24:05,860 --> 00:24:15,129
images we get<font color="#E5E5E5"> approximately</font><font color="#CCCCCC"> 3 3,500 full</font>

472
00:24:13,060 --> 00:24:17,530
spy images and those are primary

473
00:24:15,130 --> 00:24:17,860
suspects<font color="#E5E5E5"> so that's approximately 17% of</font>

474
00:24:17,530 --> 00:24:20,500
all

475
00:24:17,860 --> 00:24:23,520
the images we actually<font color="#E5E5E5"> have analyzed</font><font color="#CCCCCC"> but</font>

476
00:24:20,500 --> 00:24:27,270
what stands out<font color="#CCCCCC"> is that</font><font color="#E5E5E5"> there is a</font><font color="#CCCCCC"> disk</font>

477
00:24:23,520 --> 00:24:30,490
disproportionate well there's a

478
00:24:27,270 --> 00:24:32,980
difference<font color="#CCCCCC"> from</font><font color="#E5E5E5"> vendor to vendor</font><font color="#CCCCCC"> some</font>

479
00:24:30,490 --> 00:24:35,260
<font color="#CCCCCC">vendors did not have spiteful images at</font>

480
00:24:32,980 --> 00:24:39,130
all like<font color="#E5E5E5"> in Seoul for example or Acer</font>

481
00:24:35,260 --> 00:24:41,470
had very very<font color="#CCCCCC"> few old</font><font color="#E5E5E5"> older images</font><font color="#CCCCCC"> some</font>

482
00:24:39,130 --> 00:24:44,170
<font color="#E5E5E5">vendors had more but</font><font color="#CCCCCC"> still kind of</font><font color="#E5E5E5"> a</font>

483
00:24:41,470 --> 00:24:49,090
lower number<font color="#E5E5E5"> of full spy images like</font>

484
00:24:44,170 --> 00:24:52,299
Dell HP Lenovo<font color="#E5E5E5"> but but there were a few</font>

485
00:24:49,090 --> 00:24:55,000
vendors<font color="#E5E5E5"> like gigabyte</font><font color="#CCCCCC"> Imus I an asus to</font>

486
00:24:52,299 --> 00:24:58,379
a lesser extent that had a huge<font color="#E5E5E5"> amount</font>

487
00:24:55,000 --> 00:25:03,370
of spy images within<font color="#E5E5E5"> the update packages</font>

488
00:24:58,380 --> 00:25:05,440
so so<font color="#E5E5E5"> obviously all of all</font><font color="#CCCCCC"> of those</font>

489
00:25:03,370 --> 00:25:07,570
don't necessarily mean vulnerable

490
00:25:05,440 --> 00:25:08,169
systems<font color="#E5E5E5"> automatically there are false</font>

491
00:25:07,570 --> 00:25:10,928
positives

492
00:25:08,169 --> 00:25:12,910
not all update packages which have<font color="#E5E5E5"> fools</font>

493
00:25:10,929 --> 00:25:15,160
<font color="#CCCCCC">buy images are</font><font color="#E5E5E5"> indicating that those</font>

494
00:25:12,910 --> 00:25:18,640
systems<font color="#CCCCCC"> are vulnerable because there</font>

495
00:25:15,160 --> 00:25:23,470
could be some updates had both capsule

496
00:25:18,640 --> 00:25:26,230
and a full spy image and when when the

497
00:25:23,470 --> 00:25:28,570
update<font color="#CCCCCC"> is happening from</font><font color="#E5E5E5"> the wrong time</font>

498
00:25:26,230 --> 00:25:30,820
then the update<font color="#E5E5E5"> is using capsule but</font>

499
00:25:28,570 --> 00:25:33,159
then this whole spy image is included

500
00:25:30,820 --> 00:25:36,189
for some other purposes like<font color="#E5E5E5"> essentially</font>

501
00:25:33,160 --> 00:25:39,940
you know<font color="#CCCCCC"> I used</font><font color="#E5E5E5"> it manufacturing but not</font>

502
00:25:36,190 --> 00:25:44,470
during<font color="#CCCCCC"> the update so that that</font><font color="#E5E5E5"> that</font>

503
00:25:39,940 --> 00:25:46,090
could<font color="#CCCCCC"> be a false positive or in some</font><font color="#E5E5E5"> of</font>

504
00:25:44,470 --> 00:25:48,549
some<font color="#E5E5E5"> of the updates included full spy</font>

505
00:25:46,090 --> 00:25:50,439
image but only<font color="#E5E5E5"> used with the user</font>

506
00:25:48,549 --> 00:25:52,929
interaction<font color="#E5E5E5"> basically when you reboot</font>

507
00:25:50,440 --> 00:25:54,700
the system you<font color="#CCCCCC"> enter the</font><font color="#E5E5E5"> bias settings</font>

508
00:25:52,929 --> 00:25:57,309
and then you<font color="#CCCCCC"> update the flash from that</font>

509
00:25:54,700 --> 00:25:59,610
<font color="#E5E5E5">image but it requires user interaction</font>

510
00:25:57,309 --> 00:26:02,470
<font color="#CCCCCC">physical present</font><font color="#E5E5E5"> user so</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> those</font><font color="#CCCCCC"> are</font>

511
00:25:59,610 --> 00:26:03,820
false positives<font color="#CCCCCC"> also there are false</font>

512
00:26:02,470 --> 00:26:07,179
negatives there are things that we've

513
00:26:03,820 --> 00:26:10,629
missed<font color="#E5E5E5"> for sure for example</font><font color="#CCCCCC"> the fact</font>

514
00:26:07,179 --> 00:26:12,970
that<font color="#CCCCCC"> this signed</font><font color="#E5E5E5"> capsule is in the</font>

515
00:26:10,630 --> 00:26:16,840
update package<font color="#E5E5E5"> and we consider it as a</font>

516
00:26:12,970 --> 00:26:18,669
non vulnerable<font color="#CCCCCC"> update package it doesn't</font>

517
00:26:16,840 --> 00:26:22,159
really mean<font color="#CCCCCC"> that this isn't</font><font color="#E5E5E5"> the system</font>

518
00:26:18,669 --> 00:26:25,130
<font color="#CCCCCC">isn't vulnerable because what we've</font><font color="#E5E5E5"> seen</font>

519
00:26:22,160 --> 00:26:27,560
in the past<font color="#E5E5E5"> with</font><font color="#CCCCCC"> ASUS for example is</font>

520
00:26:25,130 --> 00:26:29,540
<font color="#CCCCCC">that they</font><font color="#E5E5E5"> implemented capsule updates on</font>

521
00:26:27,560 --> 00:26:31,460
capsule<font color="#E5E5E5"> updates but they have not</font>

522
00:26:29,540 --> 00:26:34,460
implemented<font color="#CCCCCC"> write protection software</font>

523
00:26:31,460 --> 00:26:37,070
over the system system<font color="#CCCCCC"> flash</font><font color="#E5E5E5"> and Ivy</font>

524
00:26:34,460 --> 00:26:39,970
<font color="#E5E5E5">Bridge based systems in the past so we</font>

525
00:26:37,070 --> 00:26:43,070
<font color="#E5E5E5">would miss</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> through that analysis</font>

526
00:26:39,970 --> 00:26:46,210
<font color="#CCCCCC">there also</font><font color="#E5E5E5"> there were also updates with</font>

527
00:26:43,070 --> 00:26:49,250
<font color="#CCCCCC">the images that we just couldn't extract</font>

528
00:26:46,210 --> 00:26:52,640
<font color="#CCCCCC">and also we've excluded read-only flash</font>

529
00:26:49,250 --> 00:26:55,810
descriptors but those may indicate

530
00:26:52,640 --> 00:27:00,220
vulnerable systems<font color="#CCCCCC"> too in</font><font color="#E5E5E5"> case if update</font>

531
00:26:55,810 --> 00:27:02,419
ignores descriptor<font color="#CCCCCC"> so those would</font><font color="#E5E5E5"> be</font>

532
00:27:00,220 --> 00:27:04,820
those would be false negative as well

533
00:27:02,420 --> 00:27:07,550
and capsules don't necessarily have<font color="#CCCCCC"> to</font>

534
00:27:04,820 --> 00:27:12,740
be signs so capsules<font color="#E5E5E5"> there there may be</font>

535
00:27:07,550 --> 00:27:18,860
older systems that use capsules<font color="#E5E5E5"> without</font>

536
00:27:12,740 --> 00:27:21,110
signatures but<font color="#E5E5E5"> ultimately doing an</font>

537
00:27:18,860 --> 00:27:26,389
additional analysis over<font color="#CCCCCC"> all of those</font>

538
00:27:21,110 --> 00:27:27,740
<font color="#E5E5E5">suspects yield yield it certainly the</font>

539
00:27:26,390 --> 00:27:32,000
results you<font color="#E5E5E5"> can see here</font>

540
00:27:27,740 --> 00:27:36,350
so we've<font color="#CCCCCC"> we found ultimately over</font><font color="#E5E5E5"> 500</font>

541
00:27:32,000 --> 00:27:40,300
modal's through that analysis that<font color="#E5E5E5"> lack</font>

542
00:27:36,350 --> 00:27:44,810
basic protections of<font color="#CCCCCC"> the efi AFI firmer</font>

543
00:27:40,300 --> 00:27:50,530
<font color="#CCCCCC">some of those</font><font color="#E5E5E5"> are older for example a</font>

544
00:27:44,810 --> 00:27:52,610
<font color="#CCCCCC">Sturrock our asrock they they had 73</font>

545
00:27:50,530 --> 00:27:55,730
images that are potentially vulnerable

546
00:27:52,610 --> 00:27:57,409
which correspond to 53<font color="#CCCCCC"> medals</font><font color="#E5E5E5"> but all of</font>

547
00:27:55,730 --> 00:28:03,170
those are older than skylake<font color="#E5E5E5"> although</font>

548
00:27:57,410 --> 00:28:06,770
those are older than<font color="#E5E5E5"> 2015</font><font color="#CCCCCC"> asus had 600</font>

549
00:28:03,170 --> 00:28:10,250
<font color="#E5E5E5">ish potentially vulnerable images which</font>

550
00:28:06,770 --> 00:28:13,250
corresponds you 61 modal's<font color="#CCCCCC"> all of those</font>

551
00:28:10,250 --> 00:28:20,630
were older than<font color="#CCCCCC"> Ivy Bridge so basically</font>

552
00:28:13,250 --> 00:28:26,380
<font color="#E5E5E5">a</font><font color="#CCCCCC"> sand abrasion and so 20 2012 a few</font>

553
00:28:20,630 --> 00:28:29,200
<font color="#E5E5E5">vendors had a smaller amount of</font>

554
00:28:26,380 --> 00:28:31,149
<font color="#E5E5E5">modal's that are</font><font color="#CCCCCC"> appeared</font><font color="#E5E5E5"> to be</font>

555
00:28:29,200 --> 00:28:34,149
vulnerable which indicate that<font color="#E5E5E5"> they</font>

556
00:28:31,149 --> 00:28:35,799
might have just<font color="#E5E5E5"> forgotten to implement</font>

557
00:28:34,149 --> 00:28:38,939
you know<font color="#E5E5E5"> those protections</font><font color="#CCCCCC"> on those</font>

558
00:28:35,799 --> 00:28:41,860
<font color="#E5E5E5">systems</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> you can see that there are</font>

559
00:28:38,940 --> 00:28:45,690
some<font color="#E5E5E5"> of the some of the vendors like</font>

560
00:28:41,860 --> 00:28:48,758
like gigabyte had over a thousand

561
00:28:45,690 --> 00:28:52,120
potentially vulnerable images including

562
00:28:48,759 --> 00:28:56,730
345 skylake and above that's<font color="#E5E5E5"> 2015 and</font>

563
00:28:52,120 --> 00:28:59,379
above corresponding<font color="#E5E5E5"> to</font><font color="#CCCCCC"> 247 modal's</font><font color="#E5E5E5"> that</font>

564
00:28:56,730 --> 00:29:01,980
<font color="#E5E5E5">lack basic protection so that's pretty</font>

565
00:28:59,379 --> 00:29:06,428
much<font color="#E5E5E5"> almost every system</font><font color="#CCCCCC"> that they have</font>

566
00:29:01,980 --> 00:29:08,649
<font color="#CCCCCC">Emma</font><font color="#E5E5E5"> sighs same thing 1461 potentially</font>

567
00:29:06,429 --> 00:29:14,559
vulnerable images corresponding to<font color="#E5E5E5"> 98</font>

568
00:29:08,649 --> 00:29:18,779
modal's 495 modal images<font color="#E5E5E5"> are skylake and</font>

569
00:29:14,559 --> 00:29:24,220
above<font color="#E5E5E5"> so those are those are vulnerable</font>

570
00:29:18,779 --> 00:29:26,200
<font color="#CCCCCC">the novel had potentially up to 26</font>

571
00:29:24,220 --> 00:29:30,220
modal's that we found<font color="#E5E5E5"> potentially</font>

572
00:29:26,200 --> 00:29:33,970
vulnerable<font color="#CCCCCC"> and those</font><font color="#E5E5E5"> are a primarily</font>

573
00:29:30,220 --> 00:29:38,710
<font color="#CCCCCC">ThinkCentre idea Center and think</font>

574
00:29:33,970 --> 00:29:40,779
servers<font color="#CCCCCC"> they they used it was full spy</font>

575
00:29:38,710 --> 00:29:44,950
image for for the<font color="#E5E5E5"> update or they appear</font>

576
00:29:40,779 --> 00:29:48,090
to<font color="#CCCCCC"> use pools by image for the update so</font>

577
00:29:44,950 --> 00:29:51,490
a few<font color="#CCCCCC"> examples</font><font color="#E5E5E5"> Emma saw is what</font><font color="#CCCCCC"> standout</font>

578
00:29:48,090 --> 00:29:54,129
<font color="#E5E5E5">as I mentioned</font><font color="#CCCCCC"> almost 500 skylake and</font>

579
00:29:51,490 --> 00:29:57,879
above<font color="#E5E5E5"> images vulnerable total almost</font>

580
00:29:54,129 --> 00:30:01,240
<font color="#CCCCCC">1500</font><font color="#E5E5E5"> and corresponding to approximately</font>

581
00:29:57,879 --> 00:30:03,639
<font color="#CCCCCC">100 modal's we confirmed them on some</font><font color="#E5E5E5"> of</font>

582
00:30:01,240 --> 00:30:05,860
the<font color="#E5E5E5"> systems because there was a big huge</font>

583
00:30:03,639 --> 00:30:07,779
number<font color="#CCCCCC"> so we actually went</font><font color="#E5E5E5"> and confirmed</font>

584
00:30:05,860 --> 00:30:10,559
on some of the<font color="#CCCCCC"> MSI's systems and sure</font>

585
00:30:07,779 --> 00:30:14,320
enough they<font color="#E5E5E5"> don't have any protections</font>

586
00:30:10,559 --> 00:30:16,710
<font color="#E5E5E5">so one thing was was interesting is that</font>

587
00:30:14,320 --> 00:30:20,019
<font color="#E5E5E5">they they they provide a live</font><font color="#CCCCCC"> update</font>

588
00:30:16,710 --> 00:30:23,799
utility<font color="#CCCCCC"> through the software</font><font color="#E5E5E5"> that can</font>

589
00:30:20,019 --> 00:30:26,259
update their unify framer<font color="#E5E5E5"> and you can</font>

590
00:30:23,799 --> 00:30:30,940
see that it what it<font color="#CCCCCC"> does</font><font color="#E5E5E5"> it's a online</font>

591
00:30:26,259 --> 00:30:33,010
update of<font color="#CCCCCC"> BIOS</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> former</font><font color="#E5E5E5"> auto detects</font>

592
00:30:30,940 --> 00:30:36,190
and suggests<font color="#E5E5E5"> the latest</font><font color="#CCCCCC"> bias from</font>

593
00:30:33,010 --> 00:30:39,430
exactly what we need a<font color="#CCCCCC"> live update over</font>

594
00:30:36,190 --> 00:30:42,100
the network of a on science bias firmer

595
00:30:39,430 --> 00:30:43,660
<font color="#E5E5E5">on those systems and in addition to</font><font color="#CCCCCC"> that</font>

596
00:30:42,100 --> 00:30:45,669
you<font color="#CCCCCC"> can see that antivirus software is</font>

597
00:30:43,660 --> 00:30:49,440
actually conflicting with that tool so

598
00:30:45,670 --> 00:30:53,650
it has to be disabled as<font color="#CCCCCC"> well so that's</font>

599
00:30:49,440 --> 00:30:58,150
that's a very<font color="#E5E5E5"> good</font><font color="#CCCCCC"> live</font><font color="#E5E5E5"> update of Troy</font>

600
00:30:53,650 --> 00:31:01,090
<font color="#E5E5E5">and iced</font><font color="#CCCCCC"> Verma so del we we had 78</font>

601
00:30:58,150 --> 00:31:04,750
<font color="#E5E5E5">suspect suspects corresponding to 24</font>

602
00:31:01,090 --> 00:31:06,699
medals but<font color="#E5E5E5"> 13 updates corresponding to</font>

603
00:31:04,750 --> 00:31:09,810
four models<font color="#E5E5E5"> appear to be false positives</font>

604
00:31:06,700 --> 00:31:13,480
<font color="#CCCCCC">because they had capsule</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> ROM image</font>

605
00:31:09,810 --> 00:31:14,860
<font color="#CCCCCC">ROM image</font><font color="#E5E5E5"> together so the ROM image is</font>

606
00:31:13,480 --> 00:31:17,200
probably<font color="#E5E5E5"> used it manufacturing it</font>

607
00:31:14,860 --> 00:31:21,459
capsule<font color="#CCCCCC"> is</font><font color="#E5E5E5"> used</font><font color="#CCCCCC"> in the</font><font color="#E5E5E5"> actual update so</font>

608
00:31:17,200 --> 00:31:24,700
right now we suspect<font color="#E5E5E5"> up to 51 update</font>

609
00:31:21,460 --> 00:31:26,650
packages and 11<font color="#E5E5E5"> models that seem to be</font>

610
00:31:24,700 --> 00:31:29,860
<font color="#E5E5E5">vulnerable</font><font color="#CCCCCC"> most of them are inspiring</font>

611
00:31:26,650 --> 00:31:30,670
<font color="#E5E5E5">boss through older models older than</font>

612
00:31:29,860 --> 00:31:34,060
2014

613
00:31:30,670 --> 00:31:37,110
but with updates up to 2016<font color="#CCCCCC"> we're still</font>

614
00:31:34,060 --> 00:31:42,730
in this investigating some<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the others</font>

615
00:31:37,110 --> 00:31:45,030
<font color="#E5E5E5">Lenovo</font><font color="#CCCCCC"> as I mentioned</font><font color="#E5E5E5"> mostly things</font>

616
00:31:42,730 --> 00:31:48,070
server and<font color="#CCCCCC"> things</font><font color="#E5E5E5"> central idea</font><font color="#CCCCCC"> center</font>

617
00:31:45,030 --> 00:31:52,480
<font color="#E5E5E5">modal's all say older ones</font><font color="#CCCCCC"> although</font>

618
00:31:48,070 --> 00:32:00,520
<font color="#E5E5E5">things think server had rather recent</font>

619
00:31:52,480 --> 00:32:04,930
2016 updates so<font color="#E5E5E5"> you might you might look</font>

620
00:32:00,520 --> 00:32:06,790
at<font color="#CCCCCC"> this at this utility that Lenovo</font>

621
00:32:04,930 --> 00:32:10,440
provides for firmer updates<font color="#E5E5E5"> and what's</font>

622
00:32:06,790 --> 00:32:15,310
<font color="#E5E5E5">interesting is</font><font color="#CCCCCC"> that this is probably</font><font color="#E5E5E5"> the</font>

623
00:32:10,440 --> 00:32:17,860
the longest support period of the

624
00:32:15,310 --> 00:32:23,350
utility of a software tool I ever ever

625
00:32:17,860 --> 00:32:27,179
saw 1984 through 2016<font color="#E5E5E5"> that's how long</font>

626
00:32:23,350 --> 00:32:27,179
they support<font color="#E5E5E5"> that flash update utility</font>

627
00:32:29,100 --> 00:32:36,459
the<font color="#E5E5E5"> interesting</font><font color="#CCCCCC"> thing is that they</font>

628
00:32:31,390 --> 00:32:40,270
started in 1984 as well so with that

629
00:32:36,460 --> 00:32:42,860
analysis<font color="#E5E5E5"> we we seem</font><font color="#CCCCCC"> to be able</font><font color="#E5E5E5"> to at</font>

630
00:32:40,270 --> 00:32:47,340
<font color="#CCCCCC">least come up</font><font color="#E5E5E5"> with the</font>

631
00:32:42,860 --> 00:32:50,939
vulnerable<font color="#E5E5E5"> modal's will or modal's of</font>

632
00:32:47,340 --> 00:32:53,550
systems that lack<font color="#CCCCCC"> basic protections</font>

633
00:32:50,940 --> 00:32:58,590
which is important but we also<font color="#E5E5E5"> through</font>

634
00:32:53,550 --> 00:33:01,500
that through that<font color="#E5E5E5"> dump of update images</font>

635
00:32:58,590 --> 00:33:03,570
we can do other<font color="#E5E5E5"> things</font><font color="#CCCCCC"> we can we can</font>

636
00:33:01,500 --> 00:33:06,090
build<font color="#E5E5E5"> start building a list of known</font>

637
00:33:03,570 --> 00:33:09,389
executables<font color="#E5E5E5"> in the</font><font color="#CCCCCC"> ufi space and we can</font>

638
00:33:06,090 --> 00:33:16,080
apply<font color="#CCCCCC"> to you know to monitor changes in</font>

639
00:33:09,390 --> 00:33:18,780
<font color="#E5E5E5">the in the former so for example we we</font>

640
00:33:16,080 --> 00:33:20,399
cannot<font color="#E5E5E5"> if we want to monitor</font><font color="#CCCCCC"> a certain</font>

641
00:33:18,780 --> 00:33:22,260
change in the in the in<font color="#E5E5E5"> the</font><font color="#CCCCCC"> ufi</font>

642
00:33:20,400 --> 00:33:25,020
<font color="#CCCCCC">framework we</font><font color="#E5E5E5"> cannot just compare hash of</font>

643
00:33:22,260 --> 00:33:28,740
the entire from<font color="#CCCCCC"> ramage because there are</font>

644
00:33:25,020 --> 00:33:32,540
so<font color="#E5E5E5"> many modifiable data there the</font><font color="#CCCCCC"> NVRAM</font>

645
00:33:28,740 --> 00:33:35,160
<font color="#CCCCCC">and by tables and certificates and a</font>

646
00:33:32,540 --> 00:33:36,899
whole<font color="#E5E5E5"> bunch of other things that</font><font color="#CCCCCC"> would</font>

647
00:33:35,160 --> 00:33:38,760
<font color="#E5E5E5">be pretty useless so basically we need</font>

648
00:33:36,900 --> 00:33:41,640
to<font color="#E5E5E5"> extract all the executables out of</font>

649
00:33:38,760 --> 00:33:44,730
<font color="#E5E5E5">the every</font><font color="#CCCCCC"> year for image</font><font color="#E5E5E5"> and we we need</font>

650
00:33:41,640 --> 00:33:50,400
<font color="#E5E5E5">to compare the those executables against</font>

651
00:33:44,730 --> 00:33:53,730
<font color="#E5E5E5">the known list so what we found is by by</font>

652
00:33:50,400 --> 00:33:59,760
extracting<font color="#E5E5E5"> executables out of those</font><font color="#CCCCCC"> 21</font>

653
00:33:53,730 --> 00:34:01,800
thousand unique<font color="#E5E5E5"> efi images we've been</font>

654
00:33:59,760 --> 00:34:03,660
<font color="#E5E5E5">able to build this global</font><font color="#CCCCCC"> whitelist for</font>

655
00:34:01,800 --> 00:34:06,510
those<font color="#CCCCCC"> nine vendors and the tenth vendor</font>

656
00:34:03,660 --> 00:34:10,020
is is kind<font color="#E5E5E5"> of a work in progress by the</font>

657
00:34:06,510 --> 00:34:13,168
community at the moment<font color="#E5E5E5"> so we</font><font color="#CCCCCC"> also can</font>

658
00:34:10,020 --> 00:34:15,989
have<font color="#E5E5E5"> get some interesting</font><font color="#CCCCCC"> numbers for</font>

659
00:34:13,168 --> 00:34:19,109
example<font color="#CCCCCC"> there are 45 to 90 unique</font>

660
00:34:15,989 --> 00:34:21,569
executables per update<font color="#E5E5E5"> but at the same</font>

661
00:34:19,110 --> 00:34:24,330
time there are<font color="#E5E5E5"> about hundred to 300</font>

662
00:34:21,570 --> 00:34:25,890
unique executables on in your<font color="#CCCCCC"> firmer</font><font color="#E5E5E5"> so</font>

663
00:34:24,330 --> 00:34:29,400
which means that<font color="#CCCCCC"> the updates are</font>

664
00:34:25,889 --> 00:34:32,489
typically much<font color="#CCCCCC"> smaller than the actual</font>

665
00:34:29,400 --> 00:34:34,080
entire<font color="#E5E5E5"> image which is understandable</font>

666
00:34:32,489 --> 00:34:35,629
because the update is and updates are

667
00:34:34,080 --> 00:34:38,328
typically capsules and<font color="#CCCCCC"> donate</font>

668
00:34:35,629 --> 00:34:42,379
<font color="#CCCCCC">with everything</font><font color="#E5E5E5"> so now based on</font><font color="#CCCCCC"> that</font>

669
00:34:38,329 --> 00:34:44,690
data we can build<font color="#CCCCCC"> we can build</font><font color="#E5E5E5"> this wide</font>

670
00:34:42,379 --> 00:34:47,000
list or a<font color="#E5E5E5"> list of now</font><font color="#CCCCCC"> and executables</font><font color="#E5E5E5"> so</font>

671
00:34:44,690 --> 00:34:49,460
how do we<font color="#E5E5E5"> actually do that what what</font>

672
00:34:47,000 --> 00:34:52,009
<font color="#E5E5E5">would what hashes we were going to use</font>

673
00:34:49,460 --> 00:34:54,379
the<font color="#CCCCCC"> plain hash over</font><font color="#E5E5E5"> the entire PU cough</font>

674
00:34:52,009 --> 00:34:58,519
image or the authentic<font color="#CCCCCC"> code compliant</font>

675
00:34:54,379 --> 00:35:01,130
hash or something else<font color="#CCCCCC"> so for</font><font color="#E5E5E5"> example</font>

676
00:34:58,519 --> 00:35:03,979
<font color="#E5E5E5">most of the platforms in the</font><font color="#CCCCCC"> UI they</font>

677
00:35:01,130 --> 00:35:05,599
support authenticated hashes<font color="#E5E5E5"> for most of</font>

678
00:35:03,980 --> 00:35:11,119
the functionality like secure boot like

679
00:35:05,599 --> 00:35:13,400
<font color="#CCCCCC">TPM CPMs basically except will not</font>

680
00:35:11,119 --> 00:35:16,640
accept<font color="#CCCCCC"> that</font><font color="#E5E5E5"> UEFI firmware submits</font>

681
00:35:13,400 --> 00:35:20,269
<font color="#E5E5E5">authentic code compliant hashes to the</font>

682
00:35:16,640 --> 00:35:22,960
TPM so we can we<font color="#CCCCCC"> can build the the</font>

683
00:35:20,269 --> 00:35:26,089
whitelist<font color="#E5E5E5"> through all of those type</font><font color="#CCCCCC"> of</font>

684
00:35:22,960 --> 00:35:27,259
type of hashes<font color="#CCCCCC"> so for and and that's</font>

685
00:35:26,089 --> 00:35:30,519
what we did

686
00:35:27,259 --> 00:35:33,440
we we<font color="#CCCCCC"> built</font><font color="#E5E5E5"> approximately</font><font color="#CCCCCC"> 2 million</font>

687
00:35:30,519 --> 00:35:34,910
global whitelist<font color="#E5E5E5"> based in</font><font color="#CCCCCC"> plane hashes</font>

688
00:35:33,440 --> 00:35:37,190
but also<font color="#E5E5E5"> authentic code compatible</font>

689
00:35:34,910 --> 00:35:41,170
houses and we've build another wide list

690
00:35:37,190 --> 00:35:44,390
that contains approximately million

691
00:35:41,170 --> 00:35:46,400
executables unique executables<font color="#E5E5E5"> without</font>

692
00:35:44,390 --> 00:35:49,368
authentic code hashes but in<font color="#CCCCCC"> addition</font>

693
00:35:46,400 --> 00:35:53,960
with the<font color="#CCCCCC"> time/date stamp</font><font color="#E5E5E5"> filled in the</font><font color="#CCCCCC"> p</font>

694
00:35:49,369 --> 00:35:56,329
<font color="#E5E5E5">had a masked off so the authentic code</font><font color="#CCCCCC"> I</font>

695
00:35:53,960 --> 00:35:58,970
probably will<font color="#CCCCCC"> just you know</font><font color="#E5E5E5"> just skim</font>

696
00:35:56,329 --> 00:36:03,529
through<font color="#E5E5E5"> the authentic code hashes is the</font>

697
00:35:58,970 --> 00:36:06,319
way Microsoft specified how to calculate

698
00:36:03,529 --> 00:36:08,180
<font color="#E5E5E5">the hash of the</font><font color="#CCCCCC"> Peikoff executable</font><font color="#E5E5E5"> there</font>

699
00:36:06,319 --> 00:36:10,369
are certain fields that are<font color="#E5E5E5"> masked off</font>

700
00:36:08,180 --> 00:36:12,379
and not included<font color="#E5E5E5"> into the hash like</font>

701
00:36:10,369 --> 00:36:18,109
checksum<font color="#CCCCCC"> or a certificate table entry</font>

702
00:36:12,380 --> 00:36:20,329
and so on so that<font color="#E5E5E5"> basically</font><font color="#CCCCCC"> provides a</font>

703
00:36:18,109 --> 00:36:23,200
way to<font color="#E5E5E5"> uniquely identify</font><font color="#CCCCCC"> Peikoff</font>

704
00:36:20,329 --> 00:36:25,700
executable regardless of the checksum

705
00:36:23,200 --> 00:36:28,879
<font color="#E5E5E5">exclude some of the some of the some of</font>

706
00:36:25,700 --> 00:36:32,810
the data which is<font color="#CCCCCC"> not really</font>

707
00:36:28,880 --> 00:36:34,850
so in addition<font color="#CCCCCC"> to</font><font color="#E5E5E5"> that it in addition</font><font color="#CCCCCC"> to</font>

708
00:36:32,810 --> 00:36:38,000
<font color="#E5E5E5">that you can you</font><font color="#CCCCCC"> can mask off the time</font>

709
00:36:34,850 --> 00:36:40,640
the date stamp so that that would

710
00:36:38,000 --> 00:36:43,690
essentially<font color="#E5E5E5"> eliminate duplicate</font>

711
00:36:40,640 --> 00:36:46,400
executables which were just you<font color="#CCCCCC"> know</font>

712
00:36:43,690 --> 00:36:48,920
build at different time but haven't

713
00:36:46,400 --> 00:36:53,390
<font color="#E5E5E5">really changed so that's why there are</font>

714
00:36:48,920 --> 00:36:55,040
<font color="#E5E5E5">fewer executables</font><font color="#CCCCCC"> with within the</font>

715
00:36:53,390 --> 00:36:58,640
<font color="#CCCCCC">whitelist with the</font><font color="#E5E5E5"> authenticator plus</font>

716
00:36:55,040 --> 00:37:01,820
the time date stamp<font color="#E5E5E5"> cleared so that's</font>

717
00:36:58,640 --> 00:37:03,770
the some statistics over the the unique

718
00:37:01,820 --> 00:37:06,770
<font color="#E5E5E5">if I hash is that we gather through that</font>

719
00:37:03,770 --> 00:37:09,890
analysis<font color="#CCCCCC"> you can see that a million</font><font color="#E5E5E5"> nine</font>

720
00:37:06,770 --> 00:37:12,950
hundred<font color="#CCCCCC"> thousands plain hashes million</font>

721
00:37:09,890 --> 00:37:15,799
eight hundred thousand oh thank gosh

722
00:37:12,950 --> 00:37:22,430
it's approximately<font color="#E5E5E5"> the same same number</font>

723
00:37:15,800 --> 00:37:27,770
and lower<font color="#E5E5E5"> twice as low of authenticate</font>

724
00:37:22,430 --> 00:37:30,770
hashes with<font color="#CCCCCC"> timestamp</font><font color="#E5E5E5"> clear</font><font color="#CCCCCC"> so now with</font>

725
00:37:27,770 --> 00:37:32,560
that<font color="#E5E5E5"> whitelist and</font><font color="#CCCCCC"> there the the part of</font>

726
00:37:30,770 --> 00:37:37,210
the whitelist is open source right<font color="#CCCCCC"> now</font>

727
00:37:32,560 --> 00:37:42,080
<font color="#E5E5E5">on a github</font><font color="#CCCCCC"> other parts will probably be</font>

728
00:37:37,210 --> 00:37:43,820
publishing those<font color="#E5E5E5"> soon but now you can</font>

729
00:37:42,080 --> 00:37:46,400
what<font color="#CCCCCC"> you can do is you can actually</font>

730
00:37:43,820 --> 00:37:49,610
check<font color="#E5E5E5"> your a firmer against that known</font>

731
00:37:46,400 --> 00:37:52,100
list of executables and<font color="#E5E5E5"> finds if anyone</font>

732
00:37:49,610 --> 00:37:55,760
and you know added any extra executable

733
00:37:52,100 --> 00:37:58,880
<font color="#CCCCCC">that shouldn't be there it's not it's</font>

734
00:37:55,760 --> 00:38:01,580
not a you know fully perfect<font color="#E5E5E5"> because</font>

735
00:37:58,880 --> 00:38:04,490
there are<font color="#E5E5E5"> false positives and Alex for</font>

736
00:38:01,580 --> 00:38:06,500
example he<font color="#CCCCCC"> ran that global whitelist</font>

737
00:38:04,490 --> 00:38:09,890
<font color="#E5E5E5">against his</font><font color="#CCCCCC"> Lenovo</font>

738
00:38:06,500 --> 00:38:12,530
<font color="#CCCCCC">4:58 into 430</font><font color="#E5E5E5"> and found one single</font>

739
00:38:09,890 --> 00:38:14,210
executable that<font color="#CCCCCC"> wasn't</font><font color="#E5E5E5"> indium in the</font>

740
00:38:12,530 --> 00:38:16,640
white<font color="#E5E5E5"> list so</font><font color="#CCCCCC"> he freaked out</font><font color="#E5E5E5"> and but</font>

741
00:38:14,210 --> 00:38:18,710
<font color="#E5E5E5">after about four hours</font><font color="#CCCCCC"> of reverse</font>

742
00:38:16,640 --> 00:38:20,150
<font color="#CCCCCC">engineering of that executable he</font>

743
00:38:18,710 --> 00:38:24,520
figured<font color="#CCCCCC"> that this was a false</font><font color="#E5E5E5"> positive</font>

744
00:38:20,150 --> 00:38:27,130
level<font color="#CCCCCC"> there was a</font><font color="#E5E5E5"> Lenovo</font><font color="#CCCCCC"> m/sec be a</font>

745
00:38:24,520 --> 00:38:30,200
legitimate image with<font color="#CCCCCC"> a</font><font color="#E5E5E5"> small change</font>

746
00:38:27,130 --> 00:38:31,920
only<font color="#CCCCCC"> on that particular system and none</font>

747
00:38:30,200 --> 00:38:35,910
of the hashes detected it

748
00:38:31,920 --> 00:38:40,559
none of the<font color="#CCCCCC"> ashes not the authentic</font><font color="#E5E5E5"> cute</font>

749
00:38:35,910 --> 00:38:42,288
not the<font color="#CCCCCC"> plain house</font><font color="#E5E5E5"> have that hash of</font>

750
00:38:40,559 --> 00:38:46,940
that<font color="#E5E5E5"> executable in the</font><font color="#CCCCCC"> white list</font>

751
00:38:42,289 --> 00:38:50,569
<font color="#E5E5E5">so obviously it's it's not foolproof so</font>

752
00:38:46,940 --> 00:38:53,039
<font color="#E5E5E5">you can give false positive as well</font><font color="#CCCCCC"> but</font>

753
00:38:50,569 --> 00:38:54,558
in addition<font color="#CCCCCC"> to building</font><font color="#E5E5E5"> the white</font><font color="#CCCCCC"> lists</font>

754
00:38:53,039 --> 00:38:56,640
and checking the firmer<font color="#E5E5E5"> against the</font>

755
00:38:54,559 --> 00:38:58,470
against<font color="#E5E5E5"> that</font><font color="#CCCCCC"> white list we can also</font>

756
00:38:56,640 --> 00:39:01,799
start gathering statistics on

757
00:38:58,470 --> 00:39:03,779
interesting components and<font color="#CCCCCC"> features and</font>

758
00:39:01,799 --> 00:39:06,869
statistics on which<font color="#CCCCCC"> systems support</font>

759
00:39:03,779 --> 00:39:08,430
support or enable those components or

760
00:39:06,869 --> 00:39:11,099
features so for example you might

761
00:39:08,430 --> 00:39:13,739
remember absolute compute race<font color="#E5E5E5"> which is</font>

762
00:39:11,099 --> 00:39:18,720
<font color="#E5E5E5">kind of a firmer based anti-theft</font>

763
00:39:13,739 --> 00:39:20,940
technology but can be of dual<font color="#E5E5E5"> use and</font>

764
00:39:18,720 --> 00:39:24,328
there was some controversy about<font color="#CCCCCC"> that</font>

765
00:39:20,940 --> 00:39:26,880
<font color="#CCCCCC">some this technology what it does it</font>

766
00:39:24,329 --> 00:39:29,430
<font color="#E5E5E5">actually embeds a lot of executables</font>

767
00:39:26,880 --> 00:39:33,869
<font color="#CCCCCC">into the into your</font><font color="#E5E5E5"> firmer but in</font>

768
00:39:29,430 --> 00:39:37,499
addition<font color="#CCCCCC"> to the OS</font><font color="#E5E5E5"> so what we did is we</font>

769
00:39:33,869 --> 00:39:39,690
<font color="#CCCCCC">decided to apply very complex heuristic</font>

770
00:39:37,499 --> 00:39:43,618
to find systems that support compute

771
00:39:39,690 --> 00:39:44,940
race<font color="#E5E5E5"> we decided to search for word</font>

772
00:39:43,619 --> 00:39:48,839
compute race and the name<font color="#E5E5E5"> of the</font>

773
00:39:44,940 --> 00:39:53,119
executable<font color="#CCCCCC"> and so we found 13 39</font>

774
00:39:48,839 --> 00:39:57,980
different<font color="#CCCCCC"> Dixie MPI modules used by</font>

775
00:39:53,119 --> 00:40:00,450
<font color="#E5E5E5">computer ace on on the fly based systems</font>

776
00:39:57,980 --> 00:40:02,279
<font color="#CCCCCC">some of them specific to your</font><font color="#E5E5E5"> specific</font>

777
00:40:00,450 --> 00:40:05,700
vendors like Lenovo others are more

778
00:40:02,279 --> 00:40:07,920
generic<font color="#CCCCCC"> presence in several vendors</font><font color="#E5E5E5"> and</font>

779
00:40:05,700 --> 00:40:10,049
<font color="#E5E5E5">we yeah we</font><font color="#CCCCCC"> can we can we can now start</font>

780
00:40:07,920 --> 00:40:13,200
gathering statistics for those type<font color="#CCCCCC"> of</font>

781
00:40:10,049 --> 00:40:15,509
components or features<font color="#E5E5E5"> across</font><font color="#CCCCCC"> all</font><font color="#E5E5E5"> of the</font>

782
00:40:13,200 --> 00:40:18,649
entire population<font color="#CCCCCC"> of the system so in</font>

783
00:40:15,509 --> 00:40:20,910
the computer ace case we we found

784
00:40:18,650 --> 00:40:24,260
<font color="#CCCCCC">seventeen</font><font color="#E5E5E5"> thousand seventeen and a half</font>

785
00:40:20,910 --> 00:40:28,250
thousand computer ace modules across the

786
00:40:24,260 --> 00:40:32,030
vendors<font color="#E5E5E5"> which which were corresponding</font>

787
00:40:28,250 --> 00:40:36,410
to approximately<font color="#CCCCCC"> 7,000 unique if I efi</font>

788
00:40:32,030 --> 00:40:39,200
images which means that two

789
00:40:36,410 --> 00:40:42,500
<font color="#E5E5E5">two-and-a-half components on average in</font>

790
00:40:39,200 --> 00:40:47,359
each<font color="#E5E5E5"> efi image corresponding</font><font color="#CCCCCC"> to two the</font>

791
00:40:42,500 --> 00:40:50,630
company<font color="#CCCCCC"> trees so those were rather</font>

792
00:40:47,359 --> 00:40:53,420
simple heuristics<font color="#CCCCCC"> that</font><font color="#E5E5E5"> we've applied in</font>

793
00:40:50,630 --> 00:40:56,570
in in all cases both in in detecting

794
00:40:53,420 --> 00:40:58,400
those basic protections missing basic

795
00:40:56,570 --> 00:41:00,850
protections as well as building the

796
00:40:58,400 --> 00:41:04,010
<font color="#CCCCCC">whitelist</font><font color="#E5E5E5"> as well as searching for</font>

797
00:41:00,850 --> 00:41:08,900
<font color="#CCCCCC">specific</font><font color="#E5E5E5"> components so we can improve</font>

798
00:41:04,010 --> 00:41:13,430
that we can improve<font color="#CCCCCC"> we can detect</font><font color="#E5E5E5"> we can</font>

799
00:41:08,900 --> 00:41:15,170
detect<font color="#E5E5E5"> better detect capsules</font><font color="#CCCCCC"> we can</font>

800
00:41:13,430 --> 00:41:17,839
explicitly detect that the capsules are

801
00:41:15,170 --> 00:41:20,180
present<font color="#CCCCCC"> not just you know</font><font color="#E5E5E5"> by simple</font>

802
00:41:17,840 --> 00:41:27,020
heuristic versus the full<font color="#CCCCCC"> spy image but</font>

803
00:41:20,180 --> 00:41:28,819
more more precise things like for

804
00:41:27,020 --> 00:41:31,730
<font color="#E5E5E5">example detecting</font><font color="#CCCCCC"> the firm</font><font color="#E5E5E5"> update the</font>

805
00:41:28,820 --> 00:41:34,730
driver<font color="#E5E5E5"> detecting the system from a</font>

806
00:41:31,730 --> 00:41:38,330
<font color="#E5E5E5">discreet API module or detecting the</font>

807
00:41:34,730 --> 00:41:43,640
image authentication<font color="#CCCCCC"> structure in the</font>

808
00:41:38,330 --> 00:41:47,750
capsule which which contains the actual

809
00:41:43,640 --> 00:41:50,750
pkcs7 signature for the capsule<font color="#CCCCCC"> we can</font>

810
00:41:47,750 --> 00:41:54,470
also start detecting within the images

811
00:41:50,750 --> 00:41:56,660
that they support<font color="#E5E5E5"> sign capsule updates</font>

812
00:41:54,470 --> 00:42:00,230
<font color="#CCCCCC">and stay support secure flash update</font>

813
00:41:56,660 --> 00:42:02,569
<font color="#E5E5E5">because there are certain Dixie and P I</font>

814
00:42:00,230 --> 00:42:05,300
components that are<font color="#E5E5E5"> responsible in</font>

815
00:42:02,570 --> 00:42:08,000
aiding in EFI based systems for

816
00:42:05,300 --> 00:42:10,550
implementing those capsules and<font color="#E5E5E5"> secure</font>

817
00:42:08,000 --> 00:42:13,760
update and those are like the FMP

818
00:42:10,550 --> 00:42:17,570
authentication<font color="#CCCCCC"> lab as part of capsule</font>

819
00:42:13,760 --> 00:42:19,820
update<font color="#E5E5E5"> capsule package also PCH bias</font>

820
00:42:17,570 --> 00:42:21,740
<font color="#E5E5E5">right protects those are modules can</font>

821
00:42:19,820 --> 00:42:23,720
responsible for<font color="#CCCCCC"> protecting this</font><font color="#E5E5E5"> by flash</font>

822
00:42:21,740 --> 00:42:27,259
<font color="#E5E5E5">so we can start detecting those and</font>

823
00:42:23,720 --> 00:42:30,370
those would<font color="#CCCCCC"> be more precise</font><font color="#E5E5E5"> so as a</font>

824
00:42:27,260 --> 00:42:34,300
conclusion<font color="#CCCCCC"> as a conclusions</font>

825
00:42:30,370 --> 00:42:37,509
even<font color="#CCCCCC"> simple analysis of a huge</font><font color="#E5E5E5"> chunk of</font>

826
00:42:34,300 --> 00:42:42,340
update packages can yield certain

827
00:42:37,510 --> 00:42:44,730
results<font color="#CCCCCC"> can find systems that are that</font>

828
00:42:42,340 --> 00:42:48,820
lack basic protections of<font color="#CCCCCC"> the firmer</font>

829
00:42:44,730 --> 00:42:51,760
<font color="#E5E5E5">without without</font><font color="#CCCCCC"> the need to actually</font>

830
00:42:48,820 --> 00:42:53,800
purchase those systems and run tools on

831
00:42:51,760 --> 00:42:57,790
them through<font color="#CCCCCC"> just the analysis of the</font>

832
00:42:53,800 --> 00:43:00,550
updates<font color="#CCCCCC"> and what we've learned is that</font>

833
00:42:57,790 --> 00:43:03,670
some vendors have had those basic

834
00:43:00,550 --> 00:43:08,470
protections<font color="#E5E5E5"> for a while like Dell like</font>

835
00:43:03,670 --> 00:43:12,940
<font color="#E5E5E5">so like HP some vendors started recently</font>

836
00:43:08,470 --> 00:43:15,180
<font color="#E5E5E5">like aces or a throg and others haven't</font>

837
00:43:12,940 --> 00:43:19,300
<font color="#E5E5E5">even started yet it's like MSI gigabytes</font>

838
00:43:15,180 --> 00:43:21,069
<font color="#E5E5E5">so this this is kind of a type of</font>

839
00:43:19,300 --> 00:43:22,360
<font color="#E5E5E5">analysis</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> not perfect there are false</font>

840
00:43:21,070 --> 00:43:24,820
positives<font color="#E5E5E5"> there are false negatives</font>

841
00:43:22,360 --> 00:43:27,760
there room<font color="#CCCCCC"> for improvement and it also</font>

842
00:43:24,820 --> 00:43:30,250
can be applicable to<font color="#E5E5E5"> finding other</font>

843
00:43:27,760 --> 00:43:32,290
vulnerabilities<font color="#E5E5E5"> more complex things not</font>

844
00:43:30,250 --> 00:43:34,330
<font color="#E5E5E5">basic</font><font color="#CCCCCC"> - not just basic protections but</font>

845
00:43:32,290 --> 00:43:38,050
more complex things like<font color="#E5E5E5"> s3 bit</font><font color="#CCCCCC"> scrape</font>

846
00:43:34,330 --> 00:43:40,870
<font color="#CCCCCC">former ability</font><font color="#E5E5E5"> system</font><font color="#CCCCCC"> is use and all of</font>

847
00:43:38,050 --> 00:43:44,500
those without<font color="#CCCCCC"> the need to</font><font color="#E5E5E5"> get the</font>

848
00:43:40,870 --> 00:43:48,270
<font color="#CCCCCC">system's physical systems so with that I</font>

849
00:43:44,500 --> 00:43:48,270
<font color="#CCCCCC">think that's that's pretty much</font>

850
00:43:50,070 --> 00:43:55,699
[Applause]

851
00:43:56,460 --> 00:44:15,889
[Music]

