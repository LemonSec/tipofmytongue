1
00:00:00,030 --> 00:00:08,240
hello<font color="#E5E5E5"> people on the 44</font><font color="#CCCCCC"> gun oh</font><font color="#E5E5E5"> how are</font>

2
00:00:04,830 --> 00:00:12,389
<font color="#E5E5E5">you you well did you have a nice lunch</font>

3
00:00:08,240 --> 00:00:14,610
<font color="#CCCCCC">all right so I'm lost I'm here to talk</font>

4
00:00:12,389 --> 00:00:19,770
about a project<font color="#E5E5E5"> that I'm currently</font>

5
00:00:14,610 --> 00:00:22,850
working on involving radar - do you know

6
00:00:19,770 --> 00:00:26,820
what it is do you recognize this logo

7
00:00:22,850 --> 00:00:29,160
<font color="#E5E5E5">how many people come on oh yes really</font>

8
00:00:26,820 --> 00:00:32,549
cool cool<font color="#E5E5E5"> so for those who don't</font><font color="#CCCCCC"> know</font>

9
00:00:29,160 --> 00:00:34,649
<font color="#E5E5E5">what</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is it's a crazy project driven</font>

10
00:00:32,549 --> 00:00:38,399
by some people<font color="#CCCCCC"> in Spain I had to make</font>

11
00:00:34,649 --> 00:00:40,500
this super complicated<font color="#CCCCCC"> hex editor /</font><font color="#E5E5E5"> like</font>

12
00:00:38,399 --> 00:00:42,570
<font color="#E5E5E5">open-source version of either you know</font>

13
00:00:40,500 --> 00:00:44,309
you<font color="#E5E5E5"> disassemblers your debuggers</font>

14
00:00:42,570 --> 00:00:46,320
<font color="#E5E5E5">emulators or</font><font color="#CCCCCC"> all</font><font color="#E5E5E5"> that kind of</font><font color="#CCCCCC"> stuff</font><font color="#E5E5E5"> you</font>

15
00:00:44,309 --> 00:00:50,940
<font color="#E5E5E5">need to do reverse</font><font color="#CCCCCC"> engineering which is</font>

16
00:00:46,320 --> 00:00:53,550
what I do<font color="#E5E5E5"> so I primarily</font><font color="#CCCCCC"> reverse</font>

17
00:00:50,940 --> 00:00:55,860
<font color="#E5E5E5">engineer malware and I make</font><font color="#CCCCCC"> up automated</font>

18
00:00:53,550 --> 00:00:57,510
solutions in order<font color="#E5E5E5"> to</font><font color="#CCCCCC"> basically analyze</font>

19
00:00:55,860 --> 00:01:01,230
malware and sandbox isn't that kind of

20
00:00:57,510 --> 00:01:04,830
stuff so<font color="#CCCCCC"> I've</font><font color="#E5E5E5"> been</font><font color="#CCCCCC"> doing</font><font color="#E5E5E5"> this for quite</font>

21
00:01:01,230 --> 00:01:06,420
<font color="#CCCCCC">a long time</font><font color="#E5E5E5"> like 10 years or so but it's</font>

22
00:01:04,830 --> 00:01:09,298
only<font color="#E5E5E5"> just recently that</font><font color="#CCCCCC"> I've started</font>

23
00:01:06,420 --> 00:01:13,020
using<font color="#CCCCCC"> or making use of arching</font><font color="#E5E5E5"> and I do</font>

24
00:01:09,299 --> 00:01:17,180
really like<font color="#CCCCCC"> it so what I will</font><font color="#E5E5E5"> talk about</font>

25
00:01:13,020 --> 00:01:21,149
<font color="#E5E5E5">today is my project which is basically</font>

26
00:01:17,180 --> 00:01:24,930
<font color="#CCCCCC">I'm trying to build a hypervisor type of</font>

27
00:01:21,150 --> 00:01:27,659
debugger<font color="#CCCCCC"> quite similar to</font><font color="#E5E5E5"> what</font><font color="#CCCCCC"> we would</font>

28
00:01:24,930 --> 00:01:30,780
<font color="#E5E5E5">go about you saying say</font><font color="#CCCCCC"> Winberg for</font>

29
00:01:27,659 --> 00:01:36,329
remote<font color="#CCCCCC"> kernel mode debugging but not</font>

30
00:01:30,780 --> 00:01:39,479
quite<font color="#CCCCCC"> so</font><font color="#E5E5E5"> I'm using this ability in r2 to</font>

31
00:01:36,329 --> 00:01:43,820
extend its functionality through an<font color="#CCCCCC"> i/o</font>

32
00:01:39,479 --> 00:01:46,380
abstraction layer<font color="#E5E5E5"> so this means that</font>

33
00:01:43,820 --> 00:01:48,689
whenever<font color="#E5E5E5"> you're using</font><font color="#CCCCCC"> at the</font><font color="#E5E5E5"> debugging</font>

34
00:01:46,380 --> 00:01:52,259
UI<font color="#CCCCCC"> whatever and you type your commands</font>

35
00:01:48,689 --> 00:01:54,179
to say<font color="#E5E5E5"> single step</font><font color="#CCCCCC"> the CPU then my</font>

36
00:01:52,259 --> 00:01:56,009
<font color="#CCCCCC">plug-in which I call C debug for</font><font color="#E5E5E5"> a</font>

37
00:01:54,180 --> 00:02:00,030
little<font color="#E5E5E5"> good reasons other than my hacker</font>

38
00:01:56,009 --> 00:02:01,439
alias<font color="#E5E5E5"> well then just sort of do the job</font>

39
00:02:00,030 --> 00:02:06,329
for<font color="#E5E5E5"> you so it's basically a debugger</font>

40
00:02:01,439 --> 00:02:08,728
<font color="#CCCCCC">back-end yeah and similarly when you</font>

41
00:02:06,329 --> 00:02:09,449
want<font color="#CCCCCC"> to read or write to memory</font><font color="#E5E5E5"> and that</font>

42
00:02:08,729 --> 00:02:11,280
kind of stuff

43
00:02:09,449 --> 00:02:14,489
all of that<font color="#E5E5E5"> work</font><font color="#CCCCCC"> is done by</font>

44
00:02:11,280 --> 00:02:16,500
the<font color="#CCCCCC"> plug-in that I'm making</font><font color="#E5E5E5"> okay so we</font>

45
00:02:14,490 --> 00:02:20,660
on the other<font color="#CCCCCC"> hand</font><font color="#E5E5E5"> do you have on the</font>

46
00:02:16,500 --> 00:02:26,220
<font color="#CCCCCC">other side you have</font><font color="#E5E5E5"> my target which is a</font>

47
00:02:20,660 --> 00:02:32,970
<font color="#E5E5E5">Windows VM</font><font color="#CCCCCC"> where I personalize and tend</font>

48
00:02:26,220 --> 00:02:35,190
to to run<font color="#CCCCCC"> Malory so the idea is that</font><font color="#E5E5E5"> the</font>

49
00:02:32,970 --> 00:02:39,120
<font color="#E5E5E5">the windows</font><font color="#CCCCCC"> vm is running</font><font color="#E5E5E5"> under</font><font color="#CCCCCC"> qmu</font>

50
00:02:35,190 --> 00:02:42,050
<font color="#CCCCCC">we're just making use of KVM and there's</font>

51
00:02:39,120 --> 00:02:47,790
no debugging mechanism at all inside<font color="#E5E5E5"> the</font>

52
00:02:42,050 --> 00:02:51,000
VM<font color="#CCCCCC"> that's the ID so in order to do this</font>

53
00:02:47,790 --> 00:02:54,239
<font color="#E5E5E5">I'm making</font><font color="#CCCCCC"> use of a song it's a bit of</font>

54
00:02:51,000 --> 00:02:57,180
an ancient protocol called the gdb

55
00:02:54,240 --> 00:02:59,150
remote<font color="#E5E5E5"> serial protocol which was</font>

56
00:02:57,180 --> 00:03:04,410
designed<font color="#E5E5E5"> I don't know</font>

57
00:02:59,150 --> 00:03:08,280
thousand<font color="#E5E5E5"> years ago basically it's the</font>

58
00:03:04,410 --> 00:03:10,680
serial thingy<font color="#E5E5E5"> so rare to will be the gdb</font>

59
00:03:08,280 --> 00:03:13,380
client in this<font color="#E5E5E5"> case</font><font color="#CCCCCC"> eme will act as the</font>

60
00:03:10,680 --> 00:03:16,220
server<font color="#E5E5E5"> and Clara already has this</font>

61
00:03:13,380 --> 00:03:19,890
<font color="#E5E5E5">functionality built into it that it can</font>

62
00:03:16,220 --> 00:03:22,290
expose something<font color="#E5E5E5"> called a gdb</font><font color="#CCCCCC"> stub which</font>

63
00:03:19,890 --> 00:03:23,700
just basically speaks this protocol<font color="#E5E5E5"> and</font>

64
00:03:22,290 --> 00:03:25,620
it's quite straightforward<font color="#CCCCCC"> if you want</font>

65
00:03:23,700 --> 00:03:28,320
to single<font color="#E5E5E5"> step</font><font color="#CCCCCC"> to CPU you sounded just</font>

66
00:03:25,620 --> 00:03:31,860
like a lower<font color="#CCCCCC"> ASCII s and you get like</font><font color="#E5E5E5"> an</font>

67
00:03:28,320 --> 00:03:34,440
<font color="#E5E5E5">okay back or an error</font><font color="#CCCCCC"> message the second</font>

68
00:03:31,860 --> 00:03:36,660
thing you need as a debugger is to read

69
00:03:34,440 --> 00:03:38,220
registers<font color="#E5E5E5"> so that you know where the</font>

70
00:03:36,660 --> 00:03:41,459
instruction pointer is or the stack

71
00:03:38,220 --> 00:03:43,320
pointer<font color="#CCCCCC"> is that kind of stuff and</font><font color="#E5E5E5"> some</font>

72
00:03:41,459 --> 00:03:46,769
<font color="#E5E5E5">of the limitations</font><font color="#CCCCCC"> and the gdb protocol</font>

73
00:03:43,320 --> 00:03:48,209
<font color="#CCCCCC">s</font><font color="#E5E5E5"> that some of the registers I need we</font>

74
00:03:46,769 --> 00:03:50,760
were probably not around when<font color="#E5E5E5"> this was</font>

75
00:03:48,209 --> 00:03:53,370
<font color="#CCCCCC">designed so</font><font color="#E5E5E5"> you do get</font><font color="#CCCCCC"> some of</font><font color="#E5E5E5"> the</font>

76
00:03:50,760 --> 00:03:55,859
registers<font color="#E5E5E5"> but not all</font><font color="#CCCCCC"> of the registers</font>

77
00:03:53,370 --> 00:03:58,019
are elite so I had to sort of add<font color="#E5E5E5"> some</font>

78
00:03:55,860 --> 00:03:59,610
extra registers to this protocol and

79
00:03:58,019 --> 00:04:00,410
<font color="#CCCCCC">I'll talk a</font><font color="#E5E5E5"> little bit about that in a</font>

80
00:03:59,610 --> 00:04:04,200
<font color="#E5E5E5">minute</font>

81
00:04:00,410 --> 00:04:05,880
the more let's say<font color="#E5E5E5"> critical sort of</font>

82
00:04:04,200 --> 00:04:09,988
limitation to this is the way it's

83
00:04:05,880 --> 00:04:12,299
designed<font color="#E5E5E5"> to read and write to memory</font><font color="#CCCCCC"> so</font>

84
00:04:09,989 --> 00:04:14,940
first of<font color="#E5E5E5"> all the the</font><font color="#CCCCCC"> the main one of the</font>

85
00:04:12,299 --> 00:04:17,340
problems is<font color="#CCCCCC"> that it's you basically end</font>

86
00:04:14,940 --> 00:04:19,500
<font color="#E5E5E5">up transferring large amounts of data</font>

87
00:04:17,339 --> 00:04:23,549
over<font color="#CCCCCC"> a natural connection which can be</font>

88
00:04:19,500 --> 00:04:24,570
quite<font color="#E5E5E5"> slow</font><font color="#CCCCCC"> and it</font><font color="#E5E5E5"> doesn't really make</font>

89
00:04:23,550 --> 00:04:26,700
<font color="#E5E5E5">any</font><font color="#CCCCCC"> sense and</font>

90
00:04:24,570 --> 00:04:29,460
I'm actually running my debugger<font color="#E5E5E5"> on the</font>

91
00:04:26,700 --> 00:04:33,450
same host as the target<font color="#CCCCCC"> sermon my Linux</font>

92
00:04:29,460 --> 00:04:35,280
host is talking oh it doesn't<font color="#E5E5E5"> need to</font>

93
00:04:33,450 --> 00:04:37,380
talk through<font color="#E5E5E5"> the network to</font><font color="#CCCCCC"> communicate</font>

94
00:04:35,280 --> 00:04:42,599
with or to to read with the memory of

95
00:04:37,380 --> 00:04:45,270
<font color="#E5E5E5">Windows</font><font color="#CCCCCC"> but also it's meant</font><font color="#E5E5E5"> to read and</font>

96
00:04:42,600 --> 00:04:46,650
write<font color="#CCCCCC"> to virtual addresses which is a</font>

97
00:04:45,270 --> 00:04:49,109
problem<font color="#CCCCCC"> because</font><font color="#E5E5E5"> whenever you change</font>

98
00:04:46,650 --> 00:04:51,539
processes the contents<font color="#E5E5E5"> at whatever</font>

99
00:04:49,110 --> 00:04:57,060
<font color="#E5E5E5">address</font><font color="#CCCCCC"> a virtual dress will change as</font>

100
00:04:51,540 --> 00:04:59,790
well<font color="#CCCCCC"> and I intend to</font><font color="#E5E5E5"> typically I mean</font>

101
00:04:57,060 --> 00:05:01,860
yeah tip<font color="#E5E5E5"> the</font><font color="#CCCCCC"> malray would typically go</font>

102
00:04:59,790 --> 00:05:04,620
<font color="#CCCCCC">on a lot of processors and</font><font color="#E5E5E5"> inject code</font>

103
00:05:01,860 --> 00:05:08,010
everywhere<font color="#E5E5E5"> and so I need to sort</font><font color="#CCCCCC"> of</font>

104
00:05:04,620 --> 00:05:11,160
inspect all of<font color="#CCCCCC"> the</font><font color="#E5E5E5"> processes so a</font>

105
00:05:08,010 --> 00:05:12,950
colleague of mine<font color="#E5E5E5"> had this cool ID</font><font color="#CCCCCC"> he</font>

106
00:05:11,160 --> 00:05:16,170
was<font color="#E5E5E5"> working on some similar project and</font>

107
00:05:12,950 --> 00:05:18,630
he discovered a way to sort<font color="#E5E5E5"> of make um</font>

108
00:05:16,170 --> 00:05:20,730
you share the physical memory of the

109
00:05:18,630 --> 00:05:23,550
Windows host directly through like

110
00:05:20,730 --> 00:05:26,280
shared memory primitives<font color="#E5E5E5"> and Linux which</font>

111
00:05:23,550 --> 00:05:28,470
<font color="#CCCCCC">is cool</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> this means that instead of</font>

112
00:05:26,280 --> 00:05:29,880
<font color="#E5E5E5">transferring large</font><font color="#CCCCCC"> amounts of data</font><font color="#E5E5E5"> over</font>

113
00:05:28,470 --> 00:05:32,580
<font color="#CCCCCC">a network</font><font color="#E5E5E5"> connection you can basically</font>

114
00:05:29,880 --> 00:05:35,250
<font color="#E5E5E5">just do a mem copy between two buffers</font>

115
00:05:32,580 --> 00:05:38,310
which is much much faster<font color="#CCCCCC"> so this</font><font color="#E5E5E5"> is</font>

116
00:05:35,250 --> 00:05:40,980
what I'm using<font color="#E5E5E5"> basically</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> have two</font>

117
00:05:38,310 --> 00:05:42,420
i/o channels<font color="#CCCCCC"> one will basically</font><font color="#E5E5E5"> read the</font>

118
00:05:40,980 --> 00:05:45,960
physical memory directly<font color="#E5E5E5"> and the other</font>

119
00:05:42,420 --> 00:05:51,560
one would basically control the<font color="#E5E5E5"> CPU</font>

120
00:05:45,960 --> 00:05:51,560
using<font color="#CCCCCC"> T to be a debugging mechanism</font><font color="#E5E5E5"> so</font>

121
00:05:52,280 --> 00:06:04,250
let's do some demos this is a Windows 10

122
00:05:56,190 --> 00:06:05,670
VM this is my Linux host and I'll run

123
00:06:04,250 --> 00:06:12,120
right<font color="#CCCCCC"> on</font>

124
00:06:05,670 --> 00:06:14,400
so specify<font color="#CCCCCC"> 64-bit debug this</font><font color="#E5E5E5"> is the name</font>

125
00:06:12,120 --> 00:06:21,180
of<font color="#CCCCCC"> the shared memory file which contains</font>

126
00:06:14,400 --> 00:06:22,890
the<font color="#E5E5E5"> raw physical memory of Windows ok so</font>

127
00:06:21,180 --> 00:06:26,780
this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> how radar looks can you see</font><font color="#E5E5E5"> this</font>

128
00:06:22,890 --> 00:06:26,780
by<font color="#E5E5E5"> the way you said yeah cool</font>

129
00:06:27,999 --> 00:06:33,959
so you can see it's connected<font color="#CCCCCC"> to shared</font>

130
00:06:30,909 --> 00:06:36,938
memory but<font color="#CCCCCC"> two gigabytes of memory</font>

131
00:06:33,959 --> 00:06:39,279
<font color="#CCCCCC">connected to localhost it detects</font>

132
00:06:36,939 --> 00:06:41,919
diversion and<font color="#E5E5E5"> it says that the current</font>

133
00:06:39,279 --> 00:06:47,199
<font color="#E5E5E5">process ID is</font><font color="#CCCCCC"> four</font><font color="#E5E5E5"> and a current thread</font>

134
00:06:41,919 --> 00:06:51,429
ID is zero on<font color="#CCCCCC"> Windows the idle thread</font>

135
00:06:47,199 --> 00:06:58,029
will always be<font color="#CCCCCC"> tinted syrup</font><font color="#E5E5E5"> so from</font><font color="#CCCCCC"> here</font>

136
00:06:51,429 --> 00:07:01,149
we<font color="#CCCCCC"> can look around</font><font color="#E5E5E5"> so you can see that</font>

137
00:06:58,029 --> 00:07:03,039
we I don't<font color="#E5E5E5"> has anyone ever done some</font>

138
00:07:01,149 --> 00:07:05,979
remote<font color="#CCCCCC"> Kermode debugging</font><font color="#E5E5E5"> within the bug</font>

139
00:07:03,039 --> 00:07:07,360
before<font color="#CCCCCC"> ok</font><font color="#E5E5E5"> so what happens is when you</font>

140
00:07:05,979 --> 00:07:10,719
<font color="#E5E5E5">sort</font><font color="#CCCCCC"> of break into it there's a</font>

141
00:07:07,360 --> 00:07:12,009
<font color="#CCCCCC">mechanism</font><font color="#E5E5E5"> inside the windows VM</font><font color="#CCCCCC"> but it's</font>

142
00:07:10,719 --> 00:07:13,629
waiting<font color="#CCCCCC"> for connection so it's</font>

143
00:07:12,009 --> 00:07:15,489
continuously pulling to see if there's

144
00:07:13,629 --> 00:07:18,879
like a window trying to<font color="#E5E5E5"> connect to it</font>

145
00:07:15,489 --> 00:07:20,799
and when it connects it will sort<font color="#E5E5E5"> of</font>

146
00:07:18,879 --> 00:07:23,799
take you to the safe<font color="#CCCCCC"> place so you're</font>

147
00:07:20,799 --> 00:07:26,679
basically land<font color="#E5E5E5"> on an interrupt a safe</font>

148
00:07:23,799 --> 00:07:30,188
place which is meant for<font color="#E5E5E5"> debugging</font><font color="#CCCCCC"> so</font>

149
00:07:26,679 --> 00:07:33,188
with<font color="#E5E5E5"> this</font><font color="#CCCCCC"> approach</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> will basically</font>

150
00:07:30,189 --> 00:07:35,979
<font color="#E5E5E5">just freeze</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> machine whenever</font><font color="#CCCCCC"> we</font>

151
00:07:33,189 --> 00:07:40,419
connect to it so<font color="#E5E5E5"> wherever it is we will</font>

152
00:07:35,979 --> 00:07:42,849
break into<font color="#E5E5E5"> it so it's random pretty much</font>

153
00:07:40,419 --> 00:07:47,909
but as there's<font color="#E5E5E5"> nothing going on on</font>

154
00:07:42,849 --> 00:07:50,259
inside the windows VM<font color="#E5E5E5"> right now then</font>

155
00:07:47,909 --> 00:07:52,719
there's a high chance<font color="#E5E5E5"> that you will</font>

156
00:07:50,259 --> 00:07:54,309
break into<font color="#E5E5E5"> the idle thread and you can</font>

157
00:07:52,719 --> 00:07:56,649
see that<font color="#E5E5E5"> the instructions is basically</font>

158
00:07:54,309 --> 00:07:59,439
<font color="#E5E5E5">doing a halt</font><font color="#CCCCCC"> which is sort of</font><font color="#E5E5E5"> just a way</font>

159
00:07:56,649 --> 00:08:04,299
<font color="#E5E5E5">to power down the CPU and conserve I</font>

160
00:07:59,439 --> 00:08:07,340
mean power from here to make<font color="#CCCCCC"> up a</font><font color="#E5E5E5"> little</font>

161
00:08:04,299 --> 00:08:08,589
<font color="#E5E5E5">bit so I will load some symbols</font>

162
00:08:07,340 --> 00:08:13,328
[Music]

163
00:08:08,589 --> 00:08:18,759
yes first of all do this you can list

164
00:08:13,329 --> 00:08:21,849
all of the drivers on the system by

165
00:08:18,759 --> 00:08:23,529
using<font color="#CCCCCC"> a DMM command</font><font color="#E5E5E5"> also</font><font color="#CCCCCC"> if you want</font><font color="#E5E5E5"> to</font>

166
00:08:21,849 --> 00:08:27,549
know<font color="#E5E5E5"> which driver you're currently in</font>

167
00:08:23,529 --> 00:08:34,838
you add a dot<font color="#E5E5E5"> at the end of it this</font><font color="#CCCCCC"> is</font>

168
00:08:27,549 --> 00:08:37,179
<font color="#E5E5E5">the</font><font color="#CCCCCC"> radar syntax such as fun and you can</font>

169
00:08:34,839 --> 00:08:39,669
see that it's we're currently in the

170
00:08:37,179 --> 00:08:42,848
<font color="#E5E5E5">hardware abstraction layer which is a</font>

171
00:08:39,669 --> 00:08:44,980
<font color="#E5E5E5">dll that is being used by the kernel so</font>

172
00:08:42,849 --> 00:08:55,860
it's basically<font color="#E5E5E5"> kernel hardware</font>

173
00:08:44,980 --> 00:08:59,709
abstraction<font color="#E5E5E5"> hardware so</font><font color="#CCCCCC"> we load the</font>

174
00:08:55,860 --> 00:09:01,180
symbols for how<font color="#CCCCCC"> PDB which i've</font>

175
00:08:59,709 --> 00:09:13,000
downloaded from the Microsoft symbol

176
00:09:01,180 --> 00:09:15,599
server<font color="#E5E5E5"> after address let's type their</font>

177
00:09:13,000 --> 00:09:19,269
<font color="#E5E5E5">tribe and at the same time let's also do</font>

178
00:09:15,600 --> 00:09:25,199
<font color="#CCCCCC">slowed the symbols for the</font><font color="#E5E5E5"> kernel as</font>

179
00:09:19,269 --> 00:09:25,199
well to make this cooler

180
00:09:37,110 --> 00:09:41,830
<font color="#E5E5E5">okay cool</font>

181
00:09:38,589 --> 00:09:44,110
so we have symbols<font color="#E5E5E5"> which makes life a</font>

182
00:09:41,830 --> 00:09:45,790
lot easier<font color="#CCCCCC"> so</font><font color="#E5E5E5"> you can see that we</font><font color="#CCCCCC"> only</font>

183
00:09:44,110 --> 00:09:53,970
<font color="#E5E5E5">did in the harder abstraction layer we</font>

184
00:09:45,790 --> 00:09:53,969
are in the don't do that

185
00:10:03,710 --> 00:10:08,210
<font color="#E5E5E5">okay don't screw up my demo</font>

186
00:10:29,000 --> 00:10:32,090
[Music]

187
00:10:38,920 --> 00:10:45,540
<font color="#E5E5E5">okay anyway</font><font color="#CCCCCC"> so for me we can single step</font>

188
00:10:49,259 --> 00:10:58,439
<font color="#CCCCCC">things</font><font color="#E5E5E5"> up a little bit</font><font color="#CCCCCC"> we figured we are</font>

189
00:10:51,670 --> 00:11:01,209
inside<font color="#CCCCCC"> colonel</font><font color="#E5E5E5"> tralala we can step over</font>

190
00:10:58,439 --> 00:11:05,469
<font color="#E5E5E5">you place break point so</font><font color="#CCCCCC"> basically this</font>

191
00:11:01,209 --> 00:11:12,779
<font color="#CCCCCC">is intended to work just as a normal</font>

192
00:11:05,470 --> 00:11:17,649
column<font color="#CCCCCC"> of the</font><font color="#E5E5E5"> bugger I'm gonna be done</font>

193
00:11:12,779 --> 00:11:19,629
we can let<font color="#E5E5E5"> it continue</font><font color="#CCCCCC"> and the windows</font>

194
00:11:17,649 --> 00:11:26,220
<font color="#CCCCCC">be I'm just basically unfreezes and kind</font>

195
00:11:19,629 --> 00:11:26,220
of<font color="#E5E5E5"> carries on</font><font color="#CCCCCC"> but I was</font><font color="#E5E5E5"> doing okay so</font>

196
00:11:27,269 --> 00:11:31,470
let's talk a little<font color="#E5E5E5"> bit how I do this</font>

197
00:11:32,309 --> 00:11:37,089
basically<font color="#CCCCCC"> you saw in radar you're</font>

198
00:11:35,679 --> 00:11:42,759
working with virtual<font color="#E5E5E5"> addresses all the</font>

199
00:11:37,089 --> 00:11:44,619
time and this means<font color="#CCCCCC"> that since</font><font color="#E5E5E5"> I</font><font color="#CCCCCC"> had</font>

200
00:11:42,759 --> 00:11:47,919
access<font color="#CCCCCC"> to the physical memory I need to</font>

201
00:11:44,619 --> 00:11:49,419
actually do the translation myself and

202
00:11:47,919 --> 00:11:53,799
this<font color="#E5E5E5"> is sort of a simplified version of</font>

203
00:11:49,419 --> 00:11:56,799
how it's normally<font color="#CCCCCC"> done on</font><font color="#E5E5E5"> x86 64</font><font color="#CCCCCC"> it's on</font>

204
00:11:53,799 --> 00:11:57,249
<font color="#E5E5E5">by Intel so the thing</font><font color="#CCCCCC"> is there's two</font>

205
00:11:56,799 --> 00:11:59,529
inputs

206
00:11:57,249 --> 00:12:02,439
<font color="#E5E5E5">there's the virtual</font><font color="#CCCCCC"> address and there's</font>

207
00:11:59,529 --> 00:12:04,299
the value<font color="#CCCCCC"> of the cr3 register okay so</font>

208
00:12:02,439 --> 00:12:05,738
the value of the cr3 register will point

209
00:12:04,299 --> 00:12:09,399
to something called<font color="#E5E5E5"> a directory base</font>

210
00:12:05,739 --> 00:12:10,540
table<font color="#E5E5E5"> which is the first table and the</font>

211
00:12:09,399 --> 00:12:13,089
idea is that<font color="#E5E5E5"> whenever you change</font>

212
00:12:10,540 --> 00:12:15,610
processes<font color="#E5E5E5"> we</font><font color="#CCCCCC"> also change the value of</font>

213
00:12:13,089 --> 00:12:16,989
the cr3 register<font color="#CCCCCC"> which means it points</font>

214
00:12:15,610 --> 00:12:18,610
to a<font color="#CCCCCC"> different base table which means</font>

215
00:12:16,989 --> 00:12:21,279
the outcome<font color="#CCCCCC"> of</font><font color="#E5E5E5"> this process will be</font>

216
00:12:18,610 --> 00:12:24,089
<font color="#E5E5E5">different that's why you can have like</font>

217
00:12:21,279 --> 00:12:27,699
the same address in multiple processes

218
00:12:24,089 --> 00:12:29,799
<font color="#E5E5E5">with different</font><font color="#CCCCCC"> components so what you do</font>

219
00:12:27,699 --> 00:12:31,179
is that<font color="#CCCCCC"> you extract some indexes</font><font color="#E5E5E5"> from</font>

220
00:12:29,799 --> 00:12:33,339
the virtual<font color="#E5E5E5"> address which will give you</font>

221
00:12:31,179 --> 00:12:35,799
pointers<font color="#E5E5E5"> into like for various</font><font color="#CCCCCC"> tables</font>

222
00:12:33,339 --> 00:12:40,119
from<font color="#E5E5E5"> each of those you will read the</font>

223
00:12:35,799 --> 00:12:42,309
pointer to the<font color="#CCCCCC"> next table so on and at</font>

224
00:12:40,119 --> 00:12:44,410
<font color="#E5E5E5">the end you get something called a page</font>

225
00:12:42,309 --> 00:12:48,339
table<font color="#E5E5E5"> entry which may or may not be</font>

226
00:12:44,410 --> 00:12:49,389
valid<font color="#CCCCCC"> once you have a valid page table</font>

227
00:12:48,339 --> 00:12:52,000
<font color="#E5E5E5">entry</font><font color="#CCCCCC"> we've give you the physical</font>

228
00:12:49,389 --> 00:12:55,060
<font color="#CCCCCC">address of the page</font><font color="#E5E5E5"> and memory which</font>

229
00:12:52,000 --> 00:12:58,360
normally<font color="#CCCCCC"> for cable a big and then you</font>

230
00:12:55,060 --> 00:13:00,489
<font color="#E5E5E5">use the last few bits of the</font><font color="#CCCCCC"> virtual</font>

231
00:12:58,360 --> 00:13:02,320
<font color="#E5E5E5">address as an offset into that page</font>

232
00:13:00,490 --> 00:13:04,150
<font color="#E5E5E5">that's how it's done</font>

233
00:13:02,320 --> 00:13:05,680
but some of the<font color="#E5E5E5"> challenges with this is</font>

234
00:13:04,150 --> 00:13:07,120
that<font color="#E5E5E5"> it can be</font><font color="#CCCCCC"> a bit performance as a</font>

235
00:13:05,680 --> 00:13:09,579
performance overhead since you need<font color="#E5E5E5"> to</font>

236
00:13:07,120 --> 00:13:10,870
do that<font color="#E5E5E5"> for physical reads every time</font>

237
00:13:09,580 --> 00:13:12,340
you want to<font color="#CCCCCC"> do a read just for a</font>

238
00:13:10,870 --> 00:13:15,070
translation<font color="#E5E5E5"> which is why this is</font>

239
00:13:12,340 --> 00:13:17,830
<font color="#E5E5E5">normally implemented at hardware but the</font>

240
00:13:15,070 --> 00:13:21,190
thing<font color="#CCCCCC"> is this is sort of where where the</font>

241
00:13:17,830 --> 00:13:25,000
CPU ends and<font color="#CCCCCC"> windows begins there's also</font>

242
00:13:21,190 --> 00:13:30,850
a lot<font color="#CCCCCC"> of scenarios</font><font color="#E5E5E5"> where</font><font color="#CCCCCC"> you will not</font>

243
00:13:25,000 --> 00:13:32,440
get a valid page table entry which

244
00:13:30,850 --> 00:13:34,600
<font color="#E5E5E5">windows makes use of so basically</font>

245
00:13:32,440 --> 00:13:37,720
<font color="#CCCCCC">there's like the least significant bit</font>

246
00:13:34,600 --> 00:13:40,030
first bit if it's<font color="#CCCCCC"> said</font><font color="#E5E5E5"> it's valid</font><font color="#CCCCCC"> I will</font>

247
00:13:37,720 --> 00:13:43,090
give you the page if it's cleared<font color="#E5E5E5"> that</font>

248
00:13:40,030 --> 00:13:45,189
means that the CPU I mean the hardware

249
00:13:43,090 --> 00:13:47,740
won't touch it<font color="#E5E5E5"> which is like send a page</font>

250
00:13:45,190 --> 00:13:52,240
fault<font color="#CCCCCC"> back up to the kernel kernel will</font>

251
00:13:47,740 --> 00:13:58,330
intercept it<font color="#E5E5E5"> and it will then have 63</font>

252
00:13:52,240 --> 00:14:01,870
bits to play with this is the the case

253
00:13:58,330 --> 00:14:05,800
<font color="#E5E5E5">basically it can be paged out just</font><font color="#CCCCCC"> a lot</font>

254
00:14:01,870 --> 00:14:07,060
swap file if<font color="#CCCCCC"> you in which case there</font>

255
00:14:05,800 --> 00:14:09,490
will<font color="#E5E5E5"> be bits and they're telling you</font>

256
00:14:07,060 --> 00:14:11,609
like where to find the contents<font color="#E5E5E5"> so like</font>

257
00:14:09,490 --> 00:14:14,050
the number<font color="#E5E5E5"> of the page file the offset</font>

258
00:14:11,610 --> 00:14:15,610
it could be like<font color="#CCCCCC"> a demand zero thing</font>

259
00:14:14,050 --> 00:14:19,000
which isn't really interesting it's<font color="#CCCCCC"> just</font>

260
00:14:15,610 --> 00:14:20,800
saying<font color="#E5E5E5"> give</font><font color="#CCCCCC"> me a 4 K of</font><font color="#E5E5E5"> zeros can be in</font>

261
00:14:19,000 --> 00:14:24,070
transition<font color="#E5E5E5"> which is kind of weird it's a</font>

262
00:14:20,800 --> 00:14:27,010
the memory manager<font color="#E5E5E5"> has</font><font color="#CCCCCC"> the notice that</font>

263
00:14:24,070 --> 00:14:28,660
some page it could hasn't been accessed

264
00:14:27,010 --> 00:14:31,540
for<font color="#CCCCCC"> a while so maybe it's somewhere in</font>

265
00:14:28,660 --> 00:14:33,250
<font color="#E5E5E5">between in memory and on disk</font><font color="#CCCCCC"> but it's</font>

266
00:14:31,540 --> 00:14:36,490
actually in<font color="#E5E5E5"> memory and it's actually</font>

267
00:14:33,250 --> 00:14:38,500
valid so it's<font color="#CCCCCC"> no it's</font><font color="#E5E5E5"> not a problem and</font>

268
00:14:36,490 --> 00:14:40,300
the last<font color="#CCCCCC"> thing is that</font><font color="#E5E5E5"> I don't</font><font color="#CCCCCC"> I don't</font>

269
00:14:38,500 --> 00:14:43,470
know you need to go and search<font color="#E5E5E5"> something</font>

270
00:14:40,300 --> 00:14:47,589
called<font color="#CCCCCC"> a virtual address the</font><font color="#E5E5E5"> scriptures</font>

271
00:14:43,470 --> 00:14:49,720
<font color="#CCCCCC">okay so this</font><font color="#E5E5E5"> is where we</font><font color="#CCCCCC"> need to start</font>

272
00:14:47,589 --> 00:14:51,370
parsing<font color="#CCCCCC"> windows</font><font color="#E5E5E5"> like the kernels</font>

273
00:14:49,720 --> 00:14:53,710
<font color="#E5E5E5">structures in memory and that kind of</font>

274
00:14:51,370 --> 00:14:57,810
stuff there's a few<font color="#CCCCCC"> very important</font>

275
00:14:53,710 --> 00:15:01,780
<font color="#E5E5E5">registers on the CPU related to like</font>

276
00:14:57,810 --> 00:15:04,270
these<font color="#E5E5E5"> things there's a first and the GS</font>

277
00:15:01,780 --> 00:15:05,040
base which is normally in<font color="#E5E5E5"> using modules</font>

278
00:15:04,270 --> 00:15:07,290
<font color="#E5E5E5">for the thread</font>

279
00:15:05,040 --> 00:15:08,759
environment look I'm not<font color="#E5E5E5"> sure have you</font>

280
00:15:07,290 --> 00:15:12,230
ever seen like<font color="#E5E5E5"> shellcode and</font><font color="#CCCCCC"> that kind</font>

281
00:15:08,759 --> 00:15:15,029
of stuff on Windows using<font color="#E5E5E5"> FS prefix like</font>

282
00:15:12,230 --> 00:15:17,399
30-something<font color="#CCCCCC"> drop-d like it's basically</font>

283
00:15:15,029 --> 00:15:20,639
<font color="#E5E5E5">parsing structures</font><font color="#CCCCCC"> in memory</font><font color="#E5E5E5"> in order to</font>

284
00:15:17,399 --> 00:15:23,730
typically like<font color="#E5E5E5"> to find the</font><font color="#CCCCCC"> address of a</font>

285
00:15:20,639 --> 00:15:25,920
routine that<font color="#E5E5E5"> it wants to call</font><font color="#CCCCCC"> uncut</font>

286
00:15:23,730 --> 00:15:29,550
similarly in kernel it's in current mode

287
00:15:25,920 --> 00:15:35,360
<font color="#E5E5E5">you</font><font color="#CCCCCC"> have a very</font><font color="#E5E5E5"> similar concept of using</font>

288
00:15:29,550 --> 00:15:36,810
<font color="#E5E5E5">the GS register in order</font><font color="#CCCCCC"> to access</font><font color="#E5E5E5"> a</font>

289
00:15:35,360 --> 00:15:39,269
<font color="#CCCCCC">super</font><font color="#E5E5E5"> structure</font>

290
00:15:36,810 --> 00:15:43,349
<font color="#CCCCCC">outscore the</font><font color="#E5E5E5"> last</font><font color="#CCCCCC"> call</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> kernel</font>

291
00:15:39,269 --> 00:15:46,470
processor control region and<font color="#E5E5E5"> as when</font>

292
00:15:43,350 --> 00:15:48,899
you're in user mode<font color="#CCCCCC"> and when your kernel</font>

293
00:15:46,470 --> 00:15:51,170
you still using<font color="#CCCCCC"> the same GS prefix</font><font color="#E5E5E5"> what</font>

294
00:15:48,899 --> 00:15:54,509
I mean different<font color="#CCCCCC"> things and that's</font><font color="#E5E5E5"> why</font>

295
00:15:51,170 --> 00:15:57,029
<font color="#E5E5E5">AMD or Intel introduced something called</font>

296
00:15:54,509 --> 00:15:59,279
a swap GS<font color="#E5E5E5"> instruction whenever you go</font>

297
00:15:57,029 --> 00:16:01,649
from user mode into the kernel<font color="#E5E5E5"> it will</font>

298
00:15:59,279 --> 00:16:06,380
swap<font color="#CCCCCC"> the values of the street</font><font color="#E5E5E5"> and I can</font>

299
00:16:01,649 --> 00:16:06,380
show you how this where it is<font color="#E5E5E5"> see</font><font color="#CCCCCC"> it's</font>

300
00:16:26,519 --> 00:16:34,269
<font color="#E5E5E5">okay so yeah you can see this is the</font>

301
00:16:30,779 --> 00:16:37,269
<font color="#E5E5E5">basically whenever</font><font color="#CCCCCC"> you execute a</font><font color="#E5E5E5"> Cisco</font>

302
00:16:34,269 --> 00:16:39,730
instruction hold any<font color="#CCCCCC"> IPR</font><font color="#E5E5E5"> in Windows you</font>

303
00:16:37,269 --> 00:16:43,209
eventually end<font color="#CCCCCC"> up doing a Cisco which</font>

304
00:16:39,730 --> 00:16:46,209
will transfer<font color="#E5E5E5"> a construction transfer</font>

305
00:16:43,209 --> 00:16:47,739
control into this function so<font color="#CCCCCC"> you see</font>

306
00:16:46,209 --> 00:16:51,189
the first<font color="#E5E5E5"> thing it</font><font color="#CCCCCC"> does is doing a swap</font>

307
00:16:47,740 --> 00:16:53,259
<font color="#CCCCCC">TS so that the GS base register</font><font color="#E5E5E5"> now</font>

308
00:16:51,189 --> 00:16:54,699
points to<font color="#E5E5E5"> the kernel processor control</font>

309
00:16:53,259 --> 00:16:58,689
region instead<font color="#E5E5E5"> of the threat environment</font>

310
00:16:54,699 --> 00:17:01,689
block it<font color="#E5E5E5"> saves the user stack pointer it</font>

311
00:16:58,689 --> 00:17:03,610
will retrieve its own stack pointer it

312
00:17:01,689 --> 00:17:06,010
will build this<font color="#CCCCCC"> structure called a trap</font>

313
00:17:03,610 --> 00:17:09,220
frame on the stack<font color="#E5E5E5"> just to save some</font>

314
00:17:06,010 --> 00:17:13,119
information and down here it will start

315
00:17:09,220 --> 00:17:14,980
accessing<font color="#E5E5E5"> this is the current thread I'm</font>

316
00:17:13,119 --> 00:17:18,849
sort<font color="#CCCCCC"> of parse</font><font color="#E5E5E5"> that structure and do</font>

317
00:17:14,980 --> 00:17:20,799
things<font color="#E5E5E5"> with</font><font color="#CCCCCC"> it so that's what I intend</font>

318
00:17:18,849 --> 00:17:22,599
to do<font color="#CCCCCC"> this well basically I'm using</font><font color="#E5E5E5"> the</font>

319
00:17:20,799 --> 00:17:24,639
same<font color="#E5E5E5"> thing as long as I can manage</font><font color="#CCCCCC"> to</font>

320
00:17:22,599 --> 00:17:27,520
<font color="#E5E5E5">retrieve the value of the GS base</font>

321
00:17:24,640 --> 00:17:32,380
<font color="#CCCCCC">register which I</font><font color="#E5E5E5"> just added to the gdb</font>

322
00:17:27,520 --> 00:17:37,000
protocol because<font color="#CCCCCC"> qmu already has them so</font>

323
00:17:32,380 --> 00:17:40,659
it's not we can get this super<font color="#CCCCCC"> KPC our</font>

324
00:17:37,000 --> 00:17:43,390
structure<font color="#CCCCCC"> and find its thread from the</font>

325
00:17:40,659 --> 00:17:45,669
thread we can<font color="#E5E5E5"> found the process and the</font>

326
00:17:43,390 --> 00:17:48,549
process will have something called<font color="#E5E5E5"> a</font>

327
00:17:45,669 --> 00:17:50,590
virtual<font color="#CCCCCC"> address</font><font color="#E5E5E5"> descriptor root thingy</font>

328
00:17:48,549 --> 00:17:52,299
which you can see if you remember<font color="#CCCCCC"> from</font>

329
00:17:50,590 --> 00:17:56,830
<font color="#E5E5E5">university mode you've seen a red black</font>

330
00:17:52,299 --> 00:18:00,010
<font color="#CCCCCC">tree</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> is my attempt at illustrating</font>

331
00:17:56,830 --> 00:18:02,199
<font color="#E5E5E5">it which I'll be honest I didn't</font>

332
00:18:00,010 --> 00:18:05,770
remember what<font color="#E5E5E5"> I read back tree was so</font>

333
00:18:02,200 --> 00:18:08,200
hard to<font color="#E5E5E5"> googly but it's a</font><font color="#CCCCCC"> it's a binary</font>

334
00:18:05,770 --> 00:18:10,870
<font color="#E5E5E5">tree</font><font color="#CCCCCC"> as a</font><font color="#E5E5E5"> self-balancing binary tree</font>

335
00:18:08,200 --> 00:18:13,390
<font color="#CCCCCC">basically so the idea is that since</font><font color="#E5E5E5"> this</font>

336
00:18:10,870 --> 00:18:16,360
might happen quite often<font color="#E5E5E5"> it's supposed</font>

337
00:18:13,390 --> 00:18:17,980
to be fast to<font color="#E5E5E5"> search through it so you</font>

338
00:18:16,360 --> 00:18:20,350
can go<font color="#E5E5E5"> like left right left right</font>

339
00:18:17,980 --> 00:18:21,940
<font color="#E5E5E5">depending on if your value you're</font>

340
00:18:20,350 --> 00:18:24,820
searching for<font color="#E5E5E5"> is lower or higher where</font>

341
00:18:21,940 --> 00:18:27,760
you currently<font color="#E5E5E5"> are so that's what I'm</font>

342
00:18:24,820 --> 00:18:28,810
<font color="#E5E5E5">doing</font><font color="#CCCCCC"> basically have my target virtual</font>

343
00:18:27,760 --> 00:18:34,379
address I'll just

344
00:18:28,810 --> 00:18:37,780
<font color="#E5E5E5">the tree all of</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is memory yes</font><font color="#CCCCCC"> and</font>

345
00:18:34,380 --> 00:18:41,050
basically<font color="#E5E5E5"> each of</font><font color="#CCCCCC"> the V</font><font color="#E5E5E5"> IDs will</font>

346
00:18:37,780 --> 00:18:45,550
typically describe something<font color="#CCCCCC"> like in</font>

347
00:18:41,050 --> 00:18:48,520
like an entire<font color="#E5E5E5"> DLL for instance which</font>

348
00:18:45,550 --> 00:18:52,860
means that each node industry would

349
00:18:48,520 --> 00:18:57,580
typically contain information about

350
00:18:52,860 --> 00:19:02,709
multiple physical<font color="#CCCCCC"> pages most deals are</font>

351
00:18:57,580 --> 00:19:07,090
larger than<font color="#CCCCCC"> four K bytes</font><font color="#E5E5E5"> so there's this</font>

352
00:19:02,710 --> 00:19:09,070
array in memory<font color="#CCCCCC"> containing something</font>

353
00:19:07,090 --> 00:19:14,439
<font color="#E5E5E5">that</font><font color="#CCCCCC"> windows dreamt up and they call it</font>

354
00:19:09,070 --> 00:19:19,419
a prototype<font color="#CCCCCC"> DTE so you basically</font><font color="#E5E5E5"> find</font>

355
00:19:14,440 --> 00:19:22,900
the prototype<font color="#CCCCCC"> Pte related to that target</font>

356
00:19:19,420 --> 00:19:24,460
virtual address you grab<font color="#E5E5E5"> it</font><font color="#CCCCCC"> and then my</font>

357
00:19:22,900 --> 00:19:29,500
next<font color="#E5E5E5"> challenge was figuring out what</font><font color="#CCCCCC"> on</font>

358
00:19:24,460 --> 00:19:31,600
earth<font color="#E5E5E5"> is a prototype ete it's a struggle</font>

359
00:19:29,500 --> 00:19:33,670
but for some<font color="#E5E5E5"> time and thankfully there</font>

360
00:19:31,600 --> 00:19:36,550
<font color="#E5E5E5">was a new version</font><font color="#CCCCCC"> of the Windows</font>

361
00:19:33,670 --> 00:19:38,070
internals<font color="#E5E5E5"> book</font><font color="#CCCCCC"> 7th edition or something</font>

362
00:19:36,550 --> 00:19:43,210
<font color="#E5E5E5">that came out and</font><font color="#CCCCCC"> eventually like slowly</font>

363
00:19:38,070 --> 00:19:47,169
minor annoyances<font color="#CCCCCC"> to get it working</font>

364
00:19:43,210 --> 00:19:51,400
properly<font color="#CCCCCC"> I was going a</font><font color="#E5E5E5"> little bit</font>

365
00:19:47,170 --> 00:19:53,680
suicidal<font color="#CCCCCC"> at mode and basically if</font><font color="#E5E5E5"> the</font>

366
00:19:51,400 --> 00:19:56,410
valid bit is<font color="#E5E5E5"> set then the prototype it</font>

367
00:19:53,680 --> 00:19:58,150
is treated just<font color="#CCCCCC"> like a regular PT so you</font>

368
00:19:56,410 --> 00:20:00,910
would<font color="#CCCCCC"> just flip some bits over just</font>

369
00:19:58,150 --> 00:20:02,530
basically you get<font color="#E5E5E5"> the address of the the</font>

370
00:20:00,910 --> 00:20:06,280
physical<font color="#CCCCCC"> address of the patient memory</font>

371
00:20:02,530 --> 00:20:08,649
directly<font color="#CCCCCC"> now you can be a prototype bit</font>

372
00:20:06,280 --> 00:20:12,010
set<font color="#E5E5E5"> which for some reason means that</font>

373
00:20:08,650 --> 00:20:14,230
they<font color="#E5E5E5"> just encoded the PT</font><font color="#CCCCCC"> e in a</font>

374
00:20:12,010 --> 00:20:16,360
different way<font color="#CCCCCC"> so we just need</font><font color="#E5E5E5"> to figure</font>

375
00:20:14,230 --> 00:20:18,400
<font color="#E5E5E5">out where the bits are and sort of put</font>

376
00:20:16,360 --> 00:20:21,129
them together and then form a PT e from

377
00:20:18,400 --> 00:20:24,160
that and then get the page and then just

378
00:20:21,130 --> 00:20:26,860
<font color="#E5E5E5">to annoy</font><font color="#CCCCCC"> me even</font><font color="#E5E5E5"> more they also had a</font>

379
00:20:24,160 --> 00:20:29,680
prototype pointer a bit which means<font color="#E5E5E5"> that</font>

380
00:20:26,860 --> 00:20:33,219
the prototype<font color="#E5E5E5"> is a pointer</font><font color="#CCCCCC"> to a</font>

381
00:20:29,680 --> 00:20:35,050
<font color="#E5E5E5">prototype which is called has an encoded</font>

382
00:20:33,220 --> 00:20:37,660
PT<font color="#CCCCCC"> e which will give you the page so</font>

383
00:20:35,050 --> 00:20:38,730
this is sort<font color="#CCCCCC"> of my development</font><font color="#E5E5E5"> cycle as</font>

384
00:20:37,660 --> 00:20:40,140
I was doing<font color="#CCCCCC"> this and</font>

385
00:20:38,730 --> 00:20:42,750
sort of just<font color="#E5E5E5"> struggling and why isn't</font>

386
00:20:40,140 --> 00:20:44,610
<font color="#E5E5E5">this you know translating a why I</font><font color="#CCCCCC"> mean</font>

387
00:20:42,750 --> 00:20:47,549
<font color="#E5E5E5">typically this will</font><font color="#CCCCCC"> happen for</font><font color="#E5E5E5"> like</font>

388
00:20:44,610 --> 00:20:51,199
<font color="#E5E5E5">shared memory so in dll's and that's</font>

389
00:20:47,549 --> 00:20:53,059
kind of stuff<font color="#CCCCCC"> it's used quite a bit</font>

390
00:20:51,200 --> 00:20:56,130
funny

391
00:20:53,059 --> 00:20:59,240
so yeah big<font color="#E5E5E5"> overview of my translation</font>

392
00:20:56,130 --> 00:21:02,970
process you get you the first<font color="#E5E5E5"> step with</font>

393
00:20:59,240 --> 00:21:04,980
<font color="#E5E5E5">like the regular x86 stuff if it's valid</font>

394
00:21:02,970 --> 00:21:06,720
you get the page if it's paged out<font color="#E5E5E5"> and</font>

395
00:21:04,980 --> 00:21:08,850
you're<font color="#E5E5E5"> pretty much screwed but you do</font>

396
00:21:06,720 --> 00:21:10,410
know the location<font color="#E5E5E5"> of it so you could if</font>

397
00:21:08,850 --> 00:21:12,830
you can access disk somehow you could

398
00:21:10,410 --> 00:21:15,030
read it but I don't<font color="#CCCCCC"> want</font><font color="#E5E5E5"> to do that</font>

399
00:21:12,830 --> 00:21:20,059
traverse the tree and<font color="#E5E5E5"> do the craziness</font>

400
00:21:15,030 --> 00:21:21,240
<font color="#E5E5E5">with the prototype</font><font color="#CCCCCC"> pts and that's it</font>

401
00:21:20,059 --> 00:21:24,690
<font color="#E5E5E5">easy</font>

402
00:21:21,240 --> 00:21:26,190
<font color="#E5E5E5">no anyway</font><font color="#CCCCCC"> good thing is that once we've</font>

403
00:21:24,690 --> 00:21:27,540
done<font color="#E5E5E5"> all</font><font color="#CCCCCC"> this I mean it</font><font color="#E5E5E5"> took</font><font color="#CCCCCC"> me some</font>

404
00:21:26,190 --> 00:21:30,900
<font color="#E5E5E5">time to</font><font color="#CCCCCC"> actually</font><font color="#E5E5E5"> get this code working</font>

405
00:21:27,540 --> 00:21:33,299
<font color="#E5E5E5">and everything so the good</font><font color="#CCCCCC"> thing is that</font>

406
00:21:30,900 --> 00:21:35,130
<font color="#CCCCCC">you can also</font><font color="#E5E5E5"> use the same tree in order</font>

407
00:21:33,299 --> 00:21:38,010
<font color="#CCCCCC">to</font><font color="#E5E5E5"> get the full memory map of the</font>

408
00:21:35,130 --> 00:21:39,450
process<font color="#E5E5E5"> so it's kind of</font><font color="#CCCCCC"> similar I</font><font color="#E5E5E5"> mean</font>

409
00:21:38,010 --> 00:21:41,160
<font color="#CCCCCC">you've walked</font><font color="#E5E5E5"> the same tree</font><font color="#CCCCCC"> but instead</font>

410
00:21:39,450 --> 00:21:42,960
of<font color="#E5E5E5"> searching through the binary tree</font><font color="#CCCCCC"> you</font>

411
00:21:41,160 --> 00:21:45,570
just recursively<font color="#E5E5E5"> walk the entire thing</font>

412
00:21:42,960 --> 00:21:48,390
<font color="#CCCCCC">so you basically</font><font color="#E5E5E5"> want to list like you</font>

413
00:21:45,570 --> 00:21:49,889
get every node<font color="#CCCCCC"> of the tree which means</font>

414
00:21:48,390 --> 00:21:53,370
you get all of the<font color="#E5E5E5"> information related</font>

415
00:21:49,890 --> 00:21:55,620
<font color="#CCCCCC">to</font><font color="#E5E5E5"> a certain</font><font color="#CCCCCC"> process</font><font color="#E5E5E5"> in there you find</font>

416
00:21:53,370 --> 00:21:57,689
like the ranges<font color="#E5E5E5"> to start address the end</font>

417
00:21:55,620 --> 00:21:59,459
address like the protection stuff<font color="#E5E5E5"> and</font>

418
00:21:57,690 --> 00:22:01,440
there's a tag in there if you've ever

419
00:21:59,460 --> 00:22:04,970
coded windows drivers you might have

420
00:22:01,440 --> 00:22:08,520
used<font color="#E5E5E5"> allocate tool with tag should give</font>

421
00:22:04,970 --> 00:22:13,220
<font color="#CCCCCC">matter</font><font color="#E5E5E5"> on this information on the files</font>

422
00:22:08,520 --> 00:22:13,220
<font color="#E5E5E5">but so let me show you some stuff here</font>

423
00:22:14,840 --> 00:22:28,470
<font color="#E5E5E5">cool so what</font><font color="#CCCCCC"> you can do is you can list</font>

424
00:22:21,020 --> 00:22:33,200
<font color="#CCCCCC">processors on the system using DP we can</font>

425
00:22:28,470 --> 00:22:33,200
try no actually let's do something

426
00:22:37,570 --> 00:22:51,370
<font color="#E5E5E5">slightly simpler let's do this we don't</font>

427
00:22:40,780 --> 00:22:54,090
seem<font color="#CCCCCC"> d okay so we break it we search for</font>

428
00:22:51,370 --> 00:23:01,449
it now

429
00:22:54,090 --> 00:23:04,300
<font color="#E5E5E5">you can basically select it</font>

430
00:23:01,450 --> 00:23:06,430
this means two<font color="#CCCCCC"> things basically</font><font color="#E5E5E5"> the DMM</font>

431
00:23:04,300 --> 00:23:08,500
now a DMM command no changes from

432
00:23:06,430 --> 00:23:12,130
listing<font color="#CCCCCC"> kernel-mode drivers into you</font><font color="#E5E5E5"> say</font>

433
00:23:08,500 --> 00:23:15,100
<font color="#CCCCCC">into listing all of the</font><font color="#E5E5E5"> dll's it's</font>

434
00:23:12,130 --> 00:23:17,610
loaded<font color="#E5E5E5"> it's not very many</font><font color="#CCCCCC"> with CMD only</font>

435
00:23:15,100 --> 00:23:20,820
of the DM command which is basically

436
00:23:17,610 --> 00:23:26,169
giving you the entire<font color="#CCCCCC"> memory map of it</font>

437
00:23:20,820 --> 00:23:30,700
<font color="#E5E5E5">which is quite helpful so for instance</font>

438
00:23:26,170 --> 00:23:36,120
you can<font color="#CCCCCC"> see things like</font><font color="#E5E5E5"> this which</font><font color="#CCCCCC"> would</font>

439
00:23:30,700 --> 00:23:38,980
correspond to the PE header with like we

440
00:23:36,120 --> 00:23:41,139
had on having<font color="#E5E5E5"> read access you know it's</font>

441
00:23:38,980 --> 00:23:45,930
like the text section would have read

442
00:23:41,140 --> 00:23:49,099
and<font color="#E5E5E5"> write sort of</font><font color="#CCCCCC"> read</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> execute</font>

443
00:23:45,930 --> 00:23:49,099
[Music]

444
00:23:54,200 --> 00:24:08,550
anyway next<font color="#E5E5E5"> challenge is this so as I</font>

445
00:24:06,150 --> 00:24:10,410
saw I<font color="#CCCCCC"> just showed you how</font><font color="#E5E5E5"> you can sort</font>

446
00:24:08,550 --> 00:24:12,919
of list all of<font color="#E5E5E5"> the processes or of the</font>

447
00:24:10,410 --> 00:24:19,920
kernel modules and this<font color="#E5E5E5"> is actually kept</font>

448
00:24:12,920 --> 00:24:23,940
in memory<font color="#E5E5E5"> because it's it need I mean</font>

449
00:24:19,920 --> 00:24:28,230
the kernel needs to use this as well<font color="#CCCCCC"> the</font>

450
00:24:23,940 --> 00:24:30,360
challenge is that it contains a lot<font color="#CCCCCC"> of</font>

451
00:24:28,230 --> 00:24:33,600
information<font color="#E5E5E5"> that</font><font color="#CCCCCC"> can be used if you want</font>

452
00:24:30,360 --> 00:24:36,330
<font color="#E5E5E5">to I mean a</font><font color="#CCCCCC"> writer explores</font><font color="#E5E5E5"> I mean</font>

453
00:24:33,600 --> 00:24:40,159
typically large information leaks<font color="#CCCCCC"> such</font>

454
00:24:36,330 --> 00:24:42,750
as the kernels base address is in<font color="#E5E5E5"> there</font>

455
00:24:40,160 --> 00:24:46,440
<font color="#CCCCCC">I'm guessing</font><font color="#E5E5E5"> that for that reason</font><font color="#CCCCCC"> I</font>

456
00:24:42,750 --> 00:24:48,660
wanted<font color="#CCCCCC"> to just encode it but it's</font><font color="#E5E5E5"> got</font>

457
00:24:46,440 --> 00:24:51,990
<font color="#E5E5E5">similar to the other stuff basically</font>

458
00:24:48,660 --> 00:24:55,830
again<font color="#CCCCCC"> it's GES base register will point</font>

459
00:24:51,990 --> 00:24:57,900
to the K<font color="#E5E5E5"> PCR and if you look</font><font color="#CCCCCC"> around in</font>

460
00:24:55,830 --> 00:24:59,820
the symbol files<font color="#E5E5E5"> you can sort of figure</font>

461
00:24:57,900 --> 00:25:02,010
<font color="#CCCCCC">out that there's a fixed offset always</font>

462
00:24:59,820 --> 00:25:07,710
to this<font color="#E5E5E5"> structure so we can you can find</font>

463
00:25:02,010 --> 00:25:10,740
<font color="#E5E5E5">it but</font><font color="#CCCCCC"> you need to decode it</font><font color="#E5E5E5"> somehow</font>

464
00:25:07,710 --> 00:25:14,130
because both<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the process list and the</font>

465
00:25:10,740 --> 00:25:31,910
<font color="#E5E5E5">current</font><font color="#CCCCCC"> modulus maybe</font><font color="#E5E5E5"> there's pointers</font>

466
00:25:14,130 --> 00:25:31,910
to a linked list so we can<font color="#E5E5E5"> okay</font>

467
00:25:47,740 --> 00:25:57,650
so this is a routine in I'm basically

468
00:25:56,630 --> 00:26:01,070
just disassembling

469
00:25:57,650 --> 00:26:04,580
kernel-mode memory<font color="#E5E5E5"> so we're inside the</font>

470
00:26:01,070 --> 00:26:05,870
kernel<font color="#CCCCCC"> looking at this code and you</font><font color="#E5E5E5"> can</font>

471
00:26:04,580 --> 00:26:09,530
figure<font color="#CCCCCC"> out this has actually been used</font>

472
00:26:05,870 --> 00:26:12,110
whenever<font color="#CCCCCC"> windows</font><font color="#E5E5E5"> itself needs access</font><font color="#CCCCCC"> to</font>

473
00:26:09,530 --> 00:26:14,030
this structure<font color="#CCCCCC"> so typically will</font><font color="#E5E5E5"> it</font>

474
00:26:12,110 --> 00:26:16,340
would use it if you say if there's a

475
00:26:14,030 --> 00:26:18,680
<font color="#CCCCCC">crash dump</font><font color="#E5E5E5"> that needs to</font><font color="#CCCCCC"> be written</font>

476
00:26:16,340 --> 00:26:20,419
normally that<font color="#E5E5E5"> will include things like</font>

477
00:26:18,680 --> 00:26:26,210
<font color="#CCCCCC">the loaded modules so that you know</font>

478
00:26:20,420 --> 00:26:29,480
which driver<font color="#E5E5E5"> screwed up in any case if</font>

479
00:26:26,210 --> 00:26:38,810
you look<font color="#E5E5E5"> at this you can</font><font color="#CCCCCC"> see</font><font color="#E5E5E5"> its first</font>

480
00:26:29,480 --> 00:26:41,330
checking whether or not the block is

481
00:26:38,810 --> 00:26:45,379
encoded which it always has been

482
00:26:41,330 --> 00:26:49,909
<font color="#CCCCCC">unless on</font><font color="#E5E5E5"> my Windows 10</font><font color="#CCCCCC"> it's land moving</font>

483
00:26:45,380 --> 00:26:55,010
on to setting<font color="#CCCCCC"> these</font><font color="#E5E5E5"> size which must be</font>

484
00:26:49,910 --> 00:26:57,490
code and it's going<font color="#E5E5E5"> into this loop and</font>

485
00:26:55,010 --> 00:27:02,120
if you look at<font color="#E5E5E5"> this loop you can see</font>

486
00:26:57,490 --> 00:27:06,830
that it consists of an X or a rotate

487
00:27:02,120 --> 00:27:11,060
left another<font color="#E5E5E5"> X or about swap and next</font>

488
00:27:06,830 --> 00:27:15,220
door so it's typical like an obfuscation

489
00:27:11,060 --> 00:27:15,220
<font color="#E5E5E5">routine it's just flipping bits</font><font color="#CCCCCC"> around</font>

490
00:27:15,430 --> 00:27:20,590
so the other thing you<font color="#E5E5E5"> can see that it's</font>

491
00:27:17,960 --> 00:27:24,710
making<font color="#E5E5E5"> use of some something</font><font color="#CCCCCC"> called</font><font color="#E5E5E5"> a</font>

492
00:27:20,590 --> 00:27:30,350
symbol<font color="#CCCCCC"> called ki wait never and i</font><font color="#E5E5E5"> symbol</font>

493
00:27:24,710 --> 00:27:33,020
called ki wait always which is I don't

494
00:27:30,350 --> 00:27:34,939
<font color="#E5E5E5">know</font><font color="#CCCCCC"> where s</font><font color="#E5E5E5"> actually I did google it</font>

495
00:27:33,020 --> 00:27:36,220
apparently it's something<font color="#E5E5E5"> that is</font>

496
00:27:34,940 --> 00:27:38,270
randomized

497
00:27:36,220 --> 00:27:42,110
every time so<font color="#E5E5E5"> there are two random</font>

498
00:27:38,270 --> 00:27:43,879
<font color="#E5E5E5">values and then they're making</font><font color="#CCCCCC"> use of</font>

499
00:27:42,110 --> 00:27:46,250
the address of<font color="#CCCCCC"> this state</font><font color="#E5E5E5"> of looking</font>

500
00:27:43,880 --> 00:27:48,490
<font color="#E5E5E5">forward stuff so this is like good</font>

501
00:27:46,250 --> 00:27:51,040
example of how I'm using radar<font color="#E5E5E5"> in</font>

502
00:27:48,490 --> 00:27:52,480
some developing stuff for<font color="#CCCCCC"> it as well so</font>

503
00:27:51,040 --> 00:27:54,399
what I did<font color="#E5E5E5"> was basically just</font><font color="#CCCCCC"> figure</font>

504
00:27:52,480 --> 00:27:57,070
this out and<font color="#E5E5E5"> have</font><font color="#CCCCCC"> a look at</font><font color="#E5E5E5"> this code</font>

505
00:27:54,400 --> 00:28:03,550
<font color="#CCCCCC">and then if Windows can do it and so can</font>

506
00:27:57,070 --> 00:28:07,120
<font color="#CCCCCC">we basically</font><font color="#E5E5E5"> that's a day so</font><font color="#CCCCCC"> re</font>

507
00:28:03,550 --> 00:28:11,889
implemented in<font color="#E5E5E5"> C so this is basically</font>

508
00:28:07,120 --> 00:28:14,830
the same logic<font color="#E5E5E5"> it's not the easiest code</font>

509
00:28:11,890 --> 00:28:17,320
to read<font color="#CCCCCC"> but</font><font color="#E5E5E5"> you can see that basically</font>

510
00:28:14,830 --> 00:28:20,320
there's a next door there's a rotate

511
00:28:17,320 --> 00:28:23,350
left<font color="#E5E5E5"> with the line three</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> four</font><font color="#CCCCCC"> this</font>

512
00:28:20,320 --> 00:28:26,740
<font color="#E5E5E5">shift and the</font><font color="#CCCCCC"> pouring with the opposite</font>

513
00:28:23,350 --> 00:28:30,580
shift another<font color="#E5E5E5"> XOR built in bits per</font><font color="#CCCCCC"> byte</font>

514
00:28:26,740 --> 00:28:32,890
swap<font color="#E5E5E5"> story and a vector so the funny</font>

515
00:28:30,580 --> 00:28:36,189
thing<font color="#CCCCCC"> was actually</font><font color="#E5E5E5"> I went back and found</font>

516
00:28:32,890 --> 00:28:39,610
a an article in a magazine called

517
00:28:36,190 --> 00:28:44,380
uninformed<font color="#CCCCCC"> Sherrod and it was</font><font color="#E5E5E5"> released</font>

518
00:28:39,610 --> 00:28:46,959
<font color="#CCCCCC">in 2007 there was</font><font color="#E5E5E5"> a few famous people</font>

519
00:28:44,380 --> 00:28:48,910
<font color="#CCCCCC">escape and sky wing</font><font color="#E5E5E5"> scholar they did a</font>

520
00:28:46,960 --> 00:28:50,890
lot of research on early<font color="#E5E5E5"> patch guard</font>

521
00:28:48,910 --> 00:28:53,429
stuff if you familiar with<font color="#E5E5E5"> the kernel</font>

522
00:28:50,890 --> 00:28:56,320
patch protection thingy<font color="#E5E5E5"> which is this</font>

523
00:28:53,429 --> 00:28:58,900
obfuscated monster inside<font color="#E5E5E5"> of</font><font color="#CCCCCC"> the kernel</font>

524
00:28:56,320 --> 00:29:01,740
and<font color="#E5E5E5"> I just figure out that it's actually</font>

525
00:28:58,900 --> 00:29:04,510
using the same exact<font color="#E5E5E5"> application</font>

526
00:29:01,740 --> 00:29:08,530
algorithm ten years ago<font color="#E5E5E5"> which is weird I</font>

527
00:29:04,510 --> 00:29:13,870
would I wouldn't<font color="#E5E5E5"> I don't</font><font color="#CCCCCC"> know it was</font>

528
00:29:08,530 --> 00:29:16,379
just<font color="#CCCCCC"> read whatever</font><font color="#E5E5E5"> so just</font><font color="#CCCCCC"> check</font><font color="#E5E5E5"> how I'm</font>

529
00:29:13,870 --> 00:29:16,379
doing on time

530
00:29:21,950 --> 00:29:27,920
let's just<font color="#E5E5E5"> cuss something something cool</font>

531
00:29:26,430 --> 00:29:32,400
[Music]

532
00:29:27,920 --> 00:29:36,000
<font color="#CCCCCC">this</font><font color="#E5E5E5"> is a challenge of placing</font><font color="#CCCCCC"> break</font>

533
00:29:32,400 --> 00:29:37,980
<font color="#CCCCCC">points</font><font color="#E5E5E5"> for the most part</font><font color="#CCCCCC"> if you</font><font color="#E5E5E5"> look at</font>

534
00:29:36,000 --> 00:29:44,520
how this<font color="#CCCCCC"> is</font><font color="#E5E5E5"> intended to</font><font color="#CCCCCC"> work inside the</font>

535
00:29:37,980 --> 00:29:48,350
<font color="#E5E5E5">gdb protocol the idea is that the client</font>

536
00:29:44,520 --> 00:29:52,290
<font color="#E5E5E5">which would be awesome</font><font color="#CCCCCC"> me would request</font>

537
00:29:48,350 --> 00:29:55,310
to the server<font color="#CCCCCC"> that the server should</font>

538
00:29:52,290 --> 00:30:01,909
<font color="#E5E5E5">place a breakpoint at</font><font color="#CCCCCC"> a certain address</font>

539
00:29:55,310 --> 00:30:01,909
<font color="#E5E5E5">so let's say</font>

540
00:30:16,260 --> 00:30:34,799
let's say we wanted<font color="#E5E5E5"> to place a great</font>

541
00:30:18,510 --> 00:30:41,570
point<font color="#CCCCCC"> mother</font><font color="#E5E5E5"> Susan explorers so the</font>

542
00:30:34,799 --> 00:30:41,570
challenges<font color="#CCCCCC"> but</font><font color="#E5E5E5"> first of all the</font>

543
00:30:46,850 --> 00:30:54,629
challenges that<font color="#E5E5E5"> some qmu will use the</font>

544
00:30:52,649 --> 00:30:57,408
value<font color="#E5E5E5"> of the cr3 register of</font><font color="#CCCCCC"> the</font>

545
00:30:54,630 --> 00:31:00,059
whatever is<font color="#E5E5E5"> currently running on the CPU</font>

546
00:30:57,409 --> 00:31:02,700
<font color="#E5E5E5">and I don't really control what is</font>

547
00:31:00,059 --> 00:31:05,100
running<font color="#CCCCCC"> on the CPU</font><font color="#E5E5E5"> so right now I mean</font>

548
00:31:02,700 --> 00:31:06,570
I'm the idle thread is<font color="#CCCCCC"> running on there</font>

549
00:31:05,100 --> 00:31:10,230
so if I wanted<font color="#CCCCCC"> to place a breakpoint</font>

550
00:31:06,570 --> 00:31:12,590
inside some other process then how would

551
00:31:10,230 --> 00:31:12,590
<font color="#CCCCCC">you do that</font>

552
00:31:13,850 --> 00:31:22,408
okay so<font color="#CCCCCC"> qme needs to do basically the</font>

553
00:31:19,350 --> 00:31:24,870
same<font color="#E5E5E5"> translation</font><font color="#CCCCCC"> as we do more or less</font>

554
00:31:22,409 --> 00:31:26,370
in order to figure<font color="#E5E5E5"> out where to</font><font color="#CCCCCC"> place</font>

555
00:31:24,870 --> 00:31:27,719
the breakpoint so we're going to<font color="#E5E5E5"> write</font>

556
00:31:26,370 --> 00:31:32,639
the breakpoint somewhere you<font color="#E5E5E5"> need</font><font color="#CCCCCC"> to</font>

557
00:31:27,720 --> 00:31:38,669
write<font color="#E5E5E5"> the bytes</font><font color="#CCCCCC"> cc</font><font color="#E5E5E5"> interrupts</font><font color="#CCCCCC"> 3 to some</font>

558
00:31:32,639 --> 00:31:43,399
place<font color="#CCCCCC"> in memory</font><font color="#E5E5E5"> so I came up</font><font color="#CCCCCC"> with this</font>

559
00:31:38,669 --> 00:31:48,240
<font color="#E5E5E5">little trick basically</font><font color="#CCCCCC"> qme is you saying</font>

560
00:31:43,399 --> 00:31:50,189
whatever is in<font color="#CCCCCC"> CR 3 currently so if I</font>

561
00:31:48,240 --> 00:31:52,320
can<font color="#E5E5E5"> just</font><font color="#CCCCCC"> basically enumerate all of</font><font color="#E5E5E5"> the</font>

562
00:31:50,190 --> 00:31:55,710
<font color="#E5E5E5">processors and figure</font><font color="#CCCCCC"> out what the value</font>

563
00:31:52,320 --> 00:31:58,139
<font color="#CCCCCC">of C</font><font color="#E5E5E5"> R 3 is for explorer.exe</font><font color="#CCCCCC"> I can just</font>

564
00:31:55,710 --> 00:32:00,360
temporarily<font color="#CCCCCC"> write this new value G Co</font><font color="#E5E5E5"> 3</font>

565
00:31:58,139 --> 00:32:04,620
and then requested<font color="#E5E5E5"> to set the</font><font color="#CCCCCC"> breakpoint</font>

566
00:32:00,360 --> 00:32:08,969
<font color="#E5E5E5">and then just write it back which works</font>

567
00:32:04,620 --> 00:32:10,799
as long<font color="#E5E5E5"> as the translation works on the</font>

568
00:32:08,970 --> 00:32:12,929
challenge here<font color="#CCCCCC"> is that qmu doesn't</font>

569
00:32:10,799 --> 00:32:15,179
really know about<font color="#E5E5E5"> all of the madness</font><font color="#CCCCCC"> we</font>

570
00:32:12,929 --> 00:32:19,279
<font color="#E5E5E5">did with traversing the trees and the</font>

571
00:32:15,179 --> 00:32:21,750
prototypes and<font color="#E5E5E5"> that kind of stuff so if</font>

572
00:32:19,279 --> 00:32:25,139
the first step of<font color="#E5E5E5"> the translation</font>

573
00:32:21,750 --> 00:32:27,059
process fails then setting the

574
00:32:25,139 --> 00:32:29,658
breakpoint but you will not<font color="#E5E5E5"> be</font><font color="#CCCCCC"> able</font><font color="#E5E5E5"> to</font>

575
00:32:27,059 --> 00:32:29,658
<font color="#E5E5E5">set</font><font color="#CCCCCC"> the break point</font>

576
00:32:31,150 --> 00:32:44,630
<font color="#E5E5E5">let's if we say we wanted</font><font color="#CCCCCC"> to set a</font>

577
00:32:41,930 --> 00:32:56,860
breakpoint<font color="#E5E5E5"> at the entry point of</font>

578
00:32:44,630 --> 00:32:56,860
explorer.exe<font color="#E5E5E5"> like this</font>

579
00:33:00,680 --> 00:33:07,280
so again there is the oil thread is

580
00:33:05,090 --> 00:33:14,659
running<font color="#E5E5E5"> on the CPU or target is the</font>

581
00:33:07,280 --> 00:33:20,990
<font color="#E5E5E5">Explorer we can use command</font><font color="#CCCCCC"> cold duty</font>

582
00:33:14,660 --> 00:33:23,960
our<font color="#CCCCCC"> Sun</font><font color="#E5E5E5"> method which will then insert</font>

583
00:33:20,990 --> 00:33:26,390
<font color="#E5E5E5">the</font><font color="#CCCCCC"> breakpoint</font><font color="#E5E5E5"> okay</font>

584
00:33:23,960 --> 00:33:32,600
so this is in this<font color="#E5E5E5"> case</font><font color="#CCCCCC"> it actually</font>

585
00:33:26,390 --> 00:33:36,770
<font color="#E5E5E5">works because the initial</font><font color="#CCCCCC"> part of the</font>

586
00:33:32,600 --> 00:33:43,659
memory translation works if<font color="#E5E5E5"> we wanted to</font>

587
00:33:36,770 --> 00:33:49,220
<font color="#E5E5E5">do something</font><font color="#CCCCCC"> that doesn't</font><font color="#E5E5E5"> work let's see</font>

588
00:33:43,660 --> 00:33:51,640
if we wanted to debug a new process for

589
00:33:49,220 --> 00:33:51,640
<font color="#E5E5E5">instance</font>

590
00:34:00,680 --> 00:34:03,980
let's say

591
00:34:11,389 --> 00:34:19,349
just be funny<font color="#CCCCCC"> I start</font><font color="#E5E5E5"> either so problem</font>

592
00:34:16,619 --> 00:34:21,089
is if I wanted<font color="#CCCCCC"> to do</font><font color="#E5E5E5"> is at the</font><font color="#CCCCCC"> break</font>

593
00:34:19,349 --> 00:34:23,909
<font color="#CCCCCC">point and something that isn't loaded</font>

594
00:34:21,089 --> 00:34:26,279
yet one<font color="#E5E5E5"> of the challenges is that I</font>

595
00:34:23,909 --> 00:34:28,050
<font color="#E5E5E5">don't know it spit it doesn't exist yet</font>

596
00:34:26,280 --> 00:34:31,859
<font color="#CCCCCC">so</font><font color="#E5E5E5"> I don't know it spit it won't show up</font>

597
00:34:28,050 --> 00:34:45,810
in<font color="#E5E5E5"> my list and then I did manage to find</font>

598
00:34:31,859 --> 00:34:48,750
<font color="#E5E5E5">a place</font><font color="#CCCCCC"> in the kernel basically where I</font>

599
00:34:45,810 --> 00:34:51,270
wanted to break the kernel<font color="#CCCCCC"> just</font><font color="#E5E5E5"> before</font>

600
00:34:48,750 --> 00:34:56,780
<font color="#E5E5E5">it's inserting the new process in the</font>

601
00:34:51,270 --> 00:34:56,780
list<font color="#E5E5E5"> so I can play with</font><font color="#CCCCCC"> it</font>

602
00:35:09,050 --> 00:35:19,349
let's place a brakeman just after this

603
00:35:11,400 --> 00:35:37,730
one<font color="#E5E5E5"> insert objects let it go and then</font>

604
00:35:19,349 --> 00:35:37,730
from the inside start<font color="#E5E5E5"> item</font><font color="#CCCCCC"> it failed</font>

605
00:35:39,540 --> 00:35:42,849
[Music]

606
00:35:45,380 --> 00:35:48,380
<font color="#E5E5E5">see</font>

607
00:35:58,480 --> 00:36:16,420
what didn't break<font color="#CCCCCC"> oh I wrote</font><font color="#E5E5E5"> the second</font>

608
00:36:05,829 --> 00:36:19,839
time okay<font color="#E5E5E5"> so</font><font color="#CCCCCC"> we can</font><font color="#E5E5E5"> see we</font><font color="#CCCCCC"> didn't</font><font color="#E5E5E5"> fact</font>

609
00:36:16,420 --> 00:36:22,599
hit our break point<font color="#CCCCCC"> so you're obviously</font>

610
00:36:19,839 --> 00:36:29,250
so the entire VM is frozen<font color="#E5E5E5"> just because</font>

611
00:36:22,599 --> 00:36:33,400
that's<font color="#E5E5E5"> happen and you've</font><font color="#CCCCCC"> like the kernel</font>

612
00:36:29,250 --> 00:36:34,710
<font color="#E5E5E5">and then in our list we should find</font>

613
00:36:33,400 --> 00:36:44,470
[Music]

614
00:36:34,710 --> 00:36:46,599
<font color="#E5E5E5">either</font><font color="#CCCCCC"> yeah we can</font><font color="#E5E5E5"> select it</font><font color="#CCCCCC"> it won't</font>

615
00:36:44,470 --> 00:36:50,319
<font color="#E5E5E5">have</font><font color="#CCCCCC"> any modules loaded yet because this</font>

616
00:36:46,599 --> 00:36:52,770
is very early in<font color="#E5E5E5"> the</font><font color="#CCCCCC"> process creation</font>

617
00:36:50,320 --> 00:36:57,210
[Music]

618
00:36:52,770 --> 00:37:00,910
process<font color="#E5E5E5"> but we will have a memory</font><font color="#CCCCCC"> map</font>

619
00:36:57,210 --> 00:37:04,589
<font color="#E5E5E5">what is currently loaded</font><font color="#CCCCCC"> Oh buddy so you</font>

620
00:37:00,910 --> 00:37:09,730
can see it's loaded the main executable

621
00:37:04,589 --> 00:37:15,759
until<font color="#CCCCCC"> they allow both 32 and 64-bit</font>

622
00:37:09,730 --> 00:37:18,030
versions<font color="#CCCCCC"> of until yellow so let's say we</font>

623
00:37:15,760 --> 00:37:21,510
wanted to<font color="#E5E5E5"> place a breakpoint at the</font>

624
00:37:18,030 --> 00:37:21,510
entry point<font color="#CCCCCC"> divider</font>

625
00:37:30,500 --> 00:37:34,820
[Music]

626
00:37:37,010 --> 00:37:44,800
do seek to it

627
00:37:50,579 --> 00:38:00,819
so again this would be<font color="#E5E5E5"> the</font><font color="#CCCCCC"> example that</font>

628
00:37:52,920 --> 00:38:03,999
shouldn't work exactly

629
00:38:00,819 --> 00:38:07,869
so again the<font color="#CCCCCC"> break</font><font color="#E5E5E5"> wasn't set because</font>

630
00:38:03,999 --> 00:38:09,578
the translation<font color="#E5E5E5"> process</font><font color="#CCCCCC"> fail at the</font>

631
00:38:07,869 --> 00:38:11,559
first<font color="#E5E5E5"> step it's just like it's so early</font>

632
00:38:09,579 --> 00:38:12,579
<font color="#CCCCCC">that I mean all of</font><font color="#E5E5E5"> the page tables and</font>

633
00:38:11,559 --> 00:38:15,849
<font color="#E5E5E5">that kind of stuff hasn't been laid out</font>

634
00:38:12,579 --> 00:38:18,339
yet<font color="#CCCCCC"> so it reaches a challenge since qmu</font>

635
00:38:15,849 --> 00:38:20,319
doesn't know how to parse and<font color="#CCCCCC"> do all of</font>

636
00:38:18,339 --> 00:38:25,538
the crazy magic<font color="#E5E5E5"> that basically the</font>

637
00:38:20,319 --> 00:38:38,739
window specific stuff but we can do

638
00:38:25,539 --> 00:38:41,499
crazy stuff<font color="#E5E5E5"> sorry yes since</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> can read</font>

639
00:38:38,739 --> 00:38:43,390
it we can<font color="#CCCCCC"> also write to</font><font color="#E5E5E5"> it so I mean I</font>

640
00:38:41,499 --> 00:38:45,669
could write an interrupt<font color="#E5E5E5"> ream I self I</font>

641
00:38:43,390 --> 00:38:47,439
mean I could write the bite<font color="#CCCCCC"> see see the</font>

642
00:38:45,670 --> 00:38:49,539
challenge is that<font color="#E5E5E5"> currently how this is</font>

643
00:38:47,439 --> 00:38:54,459
<font color="#CCCCCC">supposed to</font><font color="#E5E5E5"> work is that</font><font color="#CCCCCC"> cube yummy</font>

644
00:38:49,539 --> 00:38:56,140
we're<font color="#CCCCCC"> always it will only give me</font>

645
00:38:54,459 --> 00:38:59,198
<font color="#E5E5E5">control</font><font color="#CCCCCC"> back if it knows about</font><font color="#E5E5E5"> the</font>

646
00:38:56,140 --> 00:39:00,879
<font color="#CCCCCC">breakpoint</font><font color="#E5E5E5"> so I might have</font><font color="#CCCCCC"> to change</font>

647
00:38:59,199 --> 00:39:05,759
something in there but<font color="#CCCCCC"> what we can do</font>

648
00:39:00,880 --> 00:39:05,759
for<font color="#E5E5E5"> now at least is to just make</font><font color="#CCCCCC"> sure we</font>

649
00:39:08,249 --> 00:39:16,178
<font color="#CCCCCC">just make</font><font color="#E5E5E5"> sure</font><font color="#CCCCCC"> we know what we're</font><font color="#E5E5E5"> doing</font>

650
00:39:11,729 --> 00:39:19,118
here<font color="#CCCCCC"> yeah make notes of</font><font color="#E5E5E5"> the bytes that I</font>

651
00:39:16,179 --> 00:39:21,069
am<font color="#E5E5E5"> suppose just about to replace so the</font>

652
00:39:19,119 --> 00:39:22,749
first few first two bytes<font color="#CCCCCC"> in this call</font>

653
00:39:21,069 --> 00:39:28,569
instruction<font color="#E5E5E5"> which is on the entry point</font>

654
00:39:22,749 --> 00:39:34,058
divider<font color="#CCCCCC"> you can do is</font><font color="#E5E5E5"> right yeah thanks</font>

655
00:39:28,569 --> 00:39:39,150
<font color="#E5E5E5">I could have gone wrong with</font><font color="#CCCCCC"> it why did</font>

656
00:39:34,059 --> 00:39:44,999
<font color="#E5E5E5">it explode</font><font color="#CCCCCC"> hmm because you can't type</font>

657
00:39:39,150 --> 00:39:44,999
<font color="#CCCCCC">you can</font><font color="#E5E5E5"> do is it right let's don't</font><font color="#CCCCCC"> ABF E</font>

658
00:39:46,410 --> 00:39:54,399
<font color="#E5E5E5">which would be an infinite loop right</font>

659
00:39:50,609 --> 00:39:57,999
<font color="#E5E5E5">it's my</font><font color="#CCCCCC"> idea</font><font color="#E5E5E5"> is just to let the entire</font>

660
00:39:54,400 --> 00:40:01,150
system continue and then hopefully<font color="#E5E5E5"> Euler</font>

661
00:39:57,999 --> 00:40:03,209
will just spin and go<font color="#E5E5E5"> crazy let's</font><font color="#CCCCCC"> try</font>

662
00:40:01,150 --> 00:40:03,209
this

663
00:40:04,720 --> 00:40:18,319
yep<font color="#E5E5E5"> spinning okay break it</font>

664
00:40:10,280 --> 00:40:26,569
<font color="#E5E5E5">see</font><font color="#CCCCCC"> what</font><font color="#E5E5E5"> we are we are in either yeah so</font>

665
00:40:18,319 --> 00:40:30,319
<font color="#E5E5E5">we are</font><font color="#CCCCCC"> at all it</font><font color="#E5E5E5"> hmm now</font><font color="#CCCCCC"> remembers those</font>

666
00:40:26,569 --> 00:40:40,119
<font color="#CCCCCC">bytes where</font><font color="#E5E5E5"> I need to</font><font color="#CCCCCC"> write them</font><font color="#E5E5E5"> back</font>

667
00:40:30,319 --> 00:40:42,980
<font color="#CCCCCC">right yeah</font><font color="#E5E5E5"> it right not</font><font color="#CCCCCC"> EB yeah good so</font>

668
00:40:40,119 --> 00:40:44,119
this<font color="#E5E5E5"> is like sort</font><font color="#CCCCCC"> of painful</font><font color="#E5E5E5"> process to</font>

669
00:40:42,980 --> 00:40:46,520
have to go through<font color="#E5E5E5"> whenever I want to</font>

670
00:40:44,119 --> 00:40:49,609
<font color="#E5E5E5">this debug a new executable</font><font color="#CCCCCC"> currently</font>

671
00:40:46,520 --> 00:40:53,780
need to make this simpler<font color="#E5E5E5"> at some points</font>

672
00:40:49,609 --> 00:40:55,940
<font color="#CCCCCC">but we are here I mean this is</font><font color="#E5E5E5"> still</font>

673
00:40:53,780 --> 00:41:02,869
frozen<font color="#E5E5E5"> are they we're on the entry point</font>

674
00:40:55,940 --> 00:41:06,529
<font color="#E5E5E5">of either and from here we can single</font>

675
00:41:02,869 --> 00:41:08,329
stop<font color="#E5E5E5"> also another thing to notice you</font>

676
00:41:06,529 --> 00:41:11,180
notice if<font color="#E5E5E5"> you do it</font><font color="#CCCCCC"> DMM</font><font color="#E5E5E5"> command right</font>

677
00:41:08,329 --> 00:41:14,960
now or if you look at this this assembly

678
00:41:11,180 --> 00:41:17,328
looks a little bit off you can see some

679
00:41:14,960 --> 00:41:20,839
out<font color="#E5E5E5"> instructions and this is not this is</font>

680
00:41:17,329 --> 00:41:24,859
not good<font color="#E5E5E5"> if you look at the you see</font>

681
00:41:20,839 --> 00:41:26,569
<font color="#CCCCCC">there's</font><font color="#E5E5E5"> like one dose on</font><font color="#CCCCCC"> Windows 64 so</font>

682
00:41:24,859 --> 00:41:32,538
it's just something<font color="#CCCCCC"> to keep in mind</font><font color="#E5E5E5"> that</font>

683
00:41:26,569 --> 00:41:34,460
<font color="#E5E5E5">this</font><font color="#CCCCCC"> is actually a 32-bit executable so</font>

684
00:41:32,539 --> 00:41:39,950
you should disassemble it as 32 bits are

685
00:41:34,460 --> 00:41:44,410
not<font color="#CCCCCC"> 64 bits</font><font color="#E5E5E5"> okay</font><font color="#CCCCCC"> so you can you can</font>

686
00:41:39,950 --> 00:41:51,618
<font color="#E5E5E5">debug your every like and eventually</font>

687
00:41:44,410 --> 00:41:54,190
just let it go and then<font color="#CCCCCC"> either should</font>

688
00:41:51,619 --> 00:41:54,190
pop<font color="#E5E5E5"> up in here</font>

689
00:41:58,010 --> 00:42:11,100
so that's pretty<font color="#E5E5E5"> much where</font><font color="#CCCCCC"> I am right</font>

690
00:42:01,860 --> 00:42:12,990
now<font color="#CCCCCC"> I hope to continue</font><font color="#E5E5E5"> developing this</font>

691
00:42:11,100 --> 00:42:14,910
and<font color="#CCCCCC"> maybe back</font><font color="#E5E5E5"> next year we're having</font>

692
00:42:12,990 --> 00:42:16,919
<font color="#CCCCCC">some</font><font color="#E5E5E5"> other even</font><font color="#CCCCCC"> more crazy stuff</font><font color="#E5E5E5"> but</font>

693
00:42:14,910 --> 00:42:20,040
there are some people<font color="#E5E5E5"> I need to thank</font><font color="#CCCCCC"> I</font>

694
00:42:16,920 --> 00:42:23,940
want to<font color="#CCCCCC"> invite</font><font color="#E5E5E5"> the entire</font><font color="#CCCCCC"> team I work</font>

695
00:42:20,040 --> 00:42:26,820
for<font color="#E5E5E5"> work with in Norway</font><font color="#CCCCCC"> Symantec Norway</font>

696
00:42:23,940 --> 00:42:28,860
team<font color="#E5E5E5"> specialist</font><font color="#CCCCCC"> Eon</font><font color="#E5E5E5"> Mira which is the</font>

697
00:42:26,820 --> 00:42:31,170
guy who came up<font color="#CCCCCC"> with this trick I showed</font>

698
00:42:28,860 --> 00:42:33,060
you where we<font color="#E5E5E5"> can share the physical</font>

699
00:42:31,170 --> 00:42:34,710
memory shared<font color="#E5E5E5"> memory which</font><font color="#CCCCCC"> is sort of</font>

700
00:42:33,060 --> 00:42:36,570
this<font color="#CCCCCC"> like minor thing but I think it's a</font>

701
00:42:34,710 --> 00:42:38,030
<font color="#E5E5E5">brilliant genius thing I wouldn't I'm</font>

702
00:42:36,570 --> 00:42:40,650
not smart<font color="#E5E5E5"> enough to come up with them</font>

703
00:42:38,030 --> 00:42:42,360
all<font color="#CCCCCC"> the stuff myself</font><font color="#E5E5E5"> it's nice to have</font>

704
00:42:40,650 --> 00:42:45,780
some<font color="#E5E5E5"> people around you and the other guy</font>

705
00:42:42,360 --> 00:42:47,760
behind for just<font color="#E5E5E5"> always taking time to</font>

706
00:42:45,780 --> 00:42:50,310
sit<font color="#CCCCCC"> down</font><font color="#E5E5E5"> with me and</font><font color="#CCCCCC"> discuss</font><font color="#E5E5E5"> windows</font>

707
00:42:47,760 --> 00:42:53,520
internal<font color="#CCCCCC"> Madden's not the radar so I'd</font>

708
00:42:50,310 --> 00:42:55,830
like<font color="#CCCCCC"> to thank pancake defrag err the</font>

709
00:42:53,520 --> 00:42:59,340
lemon man<font color="#E5E5E5"> insider and all of the other</font>

710
00:42:55,830 --> 00:43:01,770
contributors<font color="#CCCCCC"> thank you very</font><font color="#E5E5E5"> much for</font>

711
00:42:59,340 --> 00:43:07,170
listening<font color="#E5E5E5"> to me about this crazy thing</font>

712
00:43:01,770 --> 00:43:09,620
home are you<font color="#E5E5E5"> still awake you have any</font>

713
00:43:07,170 --> 00:43:09,620
questions

714
00:43:10,160 --> 00:43:31,190
[Music]

