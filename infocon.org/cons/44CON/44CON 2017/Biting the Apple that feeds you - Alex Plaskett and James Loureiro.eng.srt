1
00:00:00,030 --> 00:00:05,520
oh right<font color="#E5E5E5"> thanks everyone</font><font color="#CCCCCC"> this is a</font><font color="#E5E5E5"> math</font>

2
00:00:03,360 --> 00:00:08,480
course colonel<font color="#E5E5E5"> fuzzy so I'm James and</font>

3
00:00:05,520 --> 00:00:11,370
<font color="#CCCCCC">Alex is</font><font color="#E5E5E5"> down there</font><font color="#CCCCCC"> it'll</font><font color="#E5E5E5"> be</font><font color="#CCCCCC"> up shortly</font>

4
00:00:08,480 --> 00:00:12,210
so get cracking<font color="#E5E5E5"> a quick agenda I guess</font>

5
00:00:11,370 --> 00:00:13,410
so

6
00:00:12,210 --> 00:00:14,790
these are the<font color="#E5E5E5"> things we're going to</font>

7
00:00:13,410 --> 00:00:16,320
<font color="#CCCCCC">cover so we're going</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> go through a</font>

8
00:00:14,790 --> 00:00:17,698
system<font color="#E5E5E5"> called fuzzing</font><font color="#CCCCCC"> we're going to go</font>

9
00:00:16,320 --> 00:00:19,830
through our attempts to scale up<font color="#E5E5E5"> the</font>

10
00:00:17,699 --> 00:00:21,689
fuzzing<font color="#CCCCCC"> we're going to go</font><font color="#E5E5E5"> over our</font>

11
00:00:19,830 --> 00:00:24,900
approach to trying<font color="#E5E5E5"> to get code coverage</font>

12
00:00:21,689 --> 00:00:26,789
from mac o s-- as part<font color="#E5E5E5"> of fuzzing and</font>

13
00:00:24,900 --> 00:00:29,609
then alex is going<font color="#E5E5E5"> to go over I okay a</font>

14
00:00:26,789 --> 00:00:31,650
<font color="#E5E5E5">major fuzzing comparisons between our</font>

15
00:00:29,609 --> 00:00:33,410
two<font color="#E5E5E5"> fuzzers and just some conclusions</font>

16
00:00:31,650 --> 00:00:38,339
and<font color="#E5E5E5"> any questions at the end</font>

17
00:00:33,410 --> 00:00:40,800
second<font color="#CCCCCC"> OS X for us this</font><font color="#E5E5E5"> kind of came</font>

18
00:00:38,340 --> 00:00:42,649
<font color="#E5E5E5">around from our</font><font color="#CCCCCC"> windows kernel photo</font>

19
00:00:40,800 --> 00:00:46,110
<font color="#E5E5E5">which we released</font><font color="#CCCCCC"> last</font><font color="#E5E5E5"> year at Def Con</font>

20
00:00:42,649 --> 00:00:48,480
<font color="#CCCCCC">and the idea being is obviously we want</font>

21
00:00:46,110 --> 00:00:50,870
<font color="#E5E5E5">to try to find</font><font color="#CCCCCC"> prove</font><font color="#E5E5E5"> X you know for</font>

22
00:00:48,480 --> 00:00:54,269
things<font color="#E5E5E5"> like sandbox escapes getting root</font>

23
00:00:50,870 --> 00:00:55,860
<font color="#E5E5E5">etc etc and we found that the</font><font color="#CCCCCC"> files</font><font color="#E5E5E5"> that</font>

24
00:00:54,270 --> 00:00:57,539
<font color="#E5E5E5">we built last time around was pretty</font>

25
00:00:55,860 --> 00:01:00,180
effective we found a whole bunch<font color="#E5E5E5"> of</font>

26
00:00:57,539 --> 00:01:02,399
<font color="#CCCCCC">windows bugs</font><font color="#E5E5E5"> targeted at</font><font color="#CCCCCC"> Windows 7 but</font>

27
00:01:00,180 --> 00:01:05,700
<font color="#CCCCCC">it also works</font><font color="#E5E5E5"> on Windows 10 and it was</font>

28
00:01:02,399 --> 00:01:07,170
also<font color="#E5E5E5"> pretty scalable as well</font><font color="#CCCCCC"> the whole</font>

29
00:01:05,700 --> 00:01:08,790
point<font color="#CCCCCC"> of the</font><font color="#E5E5E5"> fuzzer that we released</font>

30
00:01:07,170 --> 00:01:11,040
<font color="#CCCCCC">last year</font><font color="#E5E5E5"> as well was that it could be</font>

31
00:01:08,790 --> 00:01:12,390
targeted against other systems so we

32
00:01:11,040 --> 00:01:15,240
<font color="#E5E5E5">wanted</font><font color="#CCCCCC"> to try</font><font color="#E5E5E5"> and see</font><font color="#CCCCCC"> if we could</font><font color="#E5E5E5"> get it</font>

33
00:01:12,390 --> 00:01:17,159
to<font color="#CCCCCC"> work on Mac OS as well as it's</font>

34
00:01:15,240 --> 00:01:19,080
obviously quite<font color="#E5E5E5"> popular target nowadays</font>

35
00:01:17,159 --> 00:01:22,619
and with iOS as well

36
00:01:19,080 --> 00:01:24,590
seemed like<font color="#E5E5E5"> it</font><font color="#CCCCCC"> might be fun</font><font color="#E5E5E5"> so just go</font>

37
00:01:22,619 --> 00:01:27,000
<font color="#CCCCCC">over some basic principles</font><font color="#E5E5E5"> of the fuzzer</font>

38
00:01:24,590 --> 00:01:29,189
the first thing we have<font color="#CCCCCC"> is this</font><font color="#E5E5E5"> or a</font>

39
00:01:27,000 --> 00:01:31,170
bunch of<font color="#E5E5E5"> functions which we can call me</font>

40
00:01:29,189 --> 00:01:34,169
in the<font color="#CCCCCC"> fuzzer</font><font color="#E5E5E5"> that just</font><font color="#CCCCCC"> return fuzz data</font>

41
00:01:31,170 --> 00:01:35,430
to us<font color="#CCCCCC"> so these cover will the basic</font>

42
00:01:34,170 --> 00:01:38,850
types you might expect so<font color="#E5E5E5"> you know</font>

43
00:01:35,430 --> 00:01:42,240
you're into your chars<font color="#CCCCCC"> and everything</font>

44
00:01:38,850 --> 00:01:45,059
else<font color="#CCCCCC"> we save</font><font color="#E5E5E5"> positive values as part of</font>

45
00:01:42,240 --> 00:01:46,320
<font color="#E5E5E5">this but we don't really mean fast and</font>

46
00:01:45,060 --> 00:01:48,930
the reason<font color="#CCCCCC"> behind this is we want</font><font color="#E5E5E5"> the</font>

47
00:01:46,320 --> 00:01:50,908
fuzzer to actually be<font color="#CCCCCC"> successful in</font>

48
00:01:48,930 --> 00:01:53,100
executing<font color="#CCCCCC"> system calls</font><font color="#E5E5E5"> but if you're</font>

49
00:01:50,909 --> 00:01:56,250
just<font color="#E5E5E5"> putting garbage data it's just not</font>

50
00:01:53,100 --> 00:01:58,589
<font color="#CCCCCC">going to</font><font color="#E5E5E5"> work the</font><font color="#CCCCCC"> OS is going to catch</font>

51
00:01:56,250 --> 00:02:01,320
anything that<font color="#CCCCCC"> doesn't make sense</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> what</font>

52
00:01:58,590 --> 00:02:03,090
we do is<font color="#E5E5E5"> we tend to return sensible</font>

53
00:02:01,320 --> 00:02:04,559
values there<font color="#E5E5E5"> are some edge cases in</font>

54
00:02:03,090 --> 00:02:07,950
there but<font color="#E5E5E5"> for the most part we want the</font>

55
00:02:04,560 --> 00:02:09,780
system<font color="#E5E5E5"> calls to work</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> let's say on</font>

56
00:02:07,950 --> 00:02:11,340
<font color="#E5E5E5">the slide it massively increases our</font>

57
00:02:09,780 --> 00:02:12,160
<font color="#CCCCCC">likelihood of the call</font><font color="#E5E5E5"> succeed in which</font>

58
00:02:11,340 --> 00:02:16,120
massively increase

59
00:02:12,160 --> 00:02:18,220
the chance of<font color="#E5E5E5"> actually finding bugs</font><font color="#CCCCCC"> the</font>

60
00:02:16,120 --> 00:02:20,410
other<font color="#E5E5E5"> part to the fuzzer is what we call</font>

61
00:02:18,220 --> 00:02:22,750
the<font color="#E5E5E5"> object database and this just allows</font>

62
00:02:20,410 --> 00:02:24,579
<font color="#CCCCCC">us</font><font color="#E5E5E5"> to store things that you would use</font><font color="#CCCCCC"> as</font>

63
00:02:22,750 --> 00:02:26,020
<font color="#E5E5E5">part of system called</font><font color="#CCCCCC"> arguments as well</font>

64
00:02:24,580 --> 00:02:29,230
<font color="#CCCCCC">so these are</font><font color="#E5E5E5"> things like your file</font>

65
00:02:26,020 --> 00:02:30,640
descriptors and<font color="#CCCCCC"> things</font><font color="#E5E5E5"> like</font><font color="#CCCCCC"> that so what</font>

66
00:02:29,230 --> 00:02:32,890
we<font color="#CCCCCC"> do here is we</font><font color="#E5E5E5"> just create a</font><font color="#CCCCCC"> whole</font>

67
00:02:30,640 --> 00:02:33,690
<font color="#CCCCCC">bunch</font><font color="#E5E5E5"> of valid objects</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> the launch</font>

68
00:02:32,890 --> 00:02:37,359
<font color="#E5E5E5">of the fuzzer</font>

69
00:02:33,690 --> 00:02:40,000
and every time a system<font color="#E5E5E5"> call or some</font>

70
00:02:37,360 --> 00:02:42,400
other call returns<font color="#E5E5E5"> a valid</font><font color="#CCCCCC"> object</font><font color="#E5E5E5"> back</font>

71
00:02:40,000 --> 00:02:45,550
to us we stick that<font color="#E5E5E5"> back into the object</font>

72
00:02:42,400 --> 00:02:47,440
database<font color="#CCCCCC"> - and what we do is we pass</font>

73
00:02:45,550 --> 00:02:50,050
these objects around<font color="#E5E5E5"> throughout a</font>

74
00:02:47,440 --> 00:02:51,490
fuzzing run and this this kind<font color="#E5E5E5"> of works</font>

75
00:02:50,050 --> 00:02:53,770
quite effectively and finding<font color="#E5E5E5"> things</font>

76
00:02:51,490 --> 00:02:57,250
<font color="#CCCCCC">like use after free</font><font color="#E5E5E5"> bugs it's been</font>

77
00:02:53,770 --> 00:02:59,440
pretty successful<font color="#E5E5E5"> for that the one of</font>

78
00:02:57,250 --> 00:03:01,630
<font color="#CCCCCC">the things we've done</font><font color="#E5E5E5"> since we built the</font>

79
00:02:59,440 --> 00:03:03,370
<font color="#E5E5E5">fuzz and presented the puzzle last year</font>

80
00:03:01,630 --> 00:03:07,299
is we can now ask for<font color="#CCCCCC"> a specific object</font>

81
00:03:03,370 --> 00:03:09,310
type<font color="#CCCCCC"> obviously if you if you if your</font>

82
00:03:07,300 --> 00:03:11,350
system calls expecting a file descriptor

83
00:03:09,310 --> 00:03:13,840
<font color="#E5E5E5">you give it something</font><font color="#CCCCCC"> completely random</font>

84
00:03:11,350 --> 00:03:16,540
<font color="#E5E5E5">and garbage it's gonna crash out so what</font>

85
00:03:13,840 --> 00:03:17,680
we do now is a the capability to ask it

86
00:03:16,540 --> 00:03:19,359
for<font color="#E5E5E5"> a specific</font><font color="#CCCCCC"> type so there's some</font>

87
00:03:17,680 --> 00:03:21,640
examples<font color="#CCCCCC"> there</font><font color="#E5E5E5"> we've get random object</font>

88
00:03:19,360 --> 00:03:28,390
by name<font color="#E5E5E5"> for iOS surface</font><font color="#CCCCCC"> ref or</font><font color="#E5E5E5"> end I</font>

89
00:03:21,640 --> 00:03:30,010
<font color="#E5E5E5">connect</font><font color="#CCCCCC"> T so this</font><font color="#E5E5E5"> just some code pulled</font>

90
00:03:28,390 --> 00:03:31,630
out<font color="#CCCCCC"> at the fuzzer and just showing</font><font color="#E5E5E5"> that</font>

91
00:03:30,010 --> 00:03:34,750
<font color="#E5E5E5">you</font><font color="#CCCCCC"> know</font><font color="#E5E5E5"> we generate</font><font color="#CCCCCC"> all these objects</font>

92
00:03:31,630 --> 00:03:36,370
at the<font color="#CCCCCC"> lawn lawn chiller fuzzer</font><font color="#E5E5E5"> you can</font>

93
00:03:34,750 --> 00:03:38,380
see there we're just building<font color="#E5E5E5"> a load of</font>

94
00:03:36,370 --> 00:03:41,920
file descriptors<font color="#CCCCCC"> and a whole bunch of</font>

95
00:03:38,380 --> 00:03:45,390
coyotes as well<font color="#CCCCCC"> let's say we could pass</font>

96
00:03:41,920 --> 00:03:48,910
those values<font color="#CCCCCC"> around</font><font color="#E5E5E5"> during a fuzzing run</font>

97
00:03:45,390 --> 00:03:50,140
so when you ask for<font color="#E5E5E5"> an object from the</font>

98
00:03:48,910 --> 00:03:52,170
<font color="#E5E5E5">fuzz</font><font color="#CCCCCC"> that this is actually what</font><font color="#E5E5E5"> you get</font>

99
00:03:50,140 --> 00:03:55,899
returned<font color="#CCCCCC"> back to is a object</font><font color="#E5E5E5"> struct</font><font color="#CCCCCC"> and</font>

100
00:03:52,170 --> 00:03:57,220
what this<font color="#E5E5E5"> contains is the value so this</font>

101
00:03:55,900 --> 00:04:00,250
<font color="#E5E5E5">is the value you would pass</font><font color="#CCCCCC"> to the</font>

102
00:03:57,220 --> 00:04:03,010
system<font color="#CCCCCC"> cool the next thing you get is an</font>

103
00:04:00,250 --> 00:04:07,090
index<font color="#CCCCCC"> so</font><font color="#E5E5E5"> this is actually an offset into</font>

104
00:04:03,010 --> 00:04:09,010
<font color="#E5E5E5">the database so during a repro run you</font>

105
00:04:07,090 --> 00:04:10,510
can't just give it<font color="#CCCCCC"> the value you were</font>

106
00:04:09,010 --> 00:04:13,209
<font color="#E5E5E5">using before because that</font><font color="#CCCCCC"> value doesn't</font>

107
00:04:10,510 --> 00:04:14,769
exist<font color="#CCCCCC"> right so</font><font color="#E5E5E5"> instead what because the</font>

108
00:04:13,209 --> 00:04:16,930
fuzzer should work in<font color="#E5E5E5"> the same way on</font>

109
00:04:14,770 --> 00:04:18,370
each run<font color="#E5E5E5"> you can just call in to the</font>

110
00:04:16,930 --> 00:04:21,190
same place<font color="#E5E5E5"> in the database and you</font>

111
00:04:18,370 --> 00:04:23,170
should get the<font color="#CCCCCC"> same thing back and</font><font color="#E5E5E5"> the</font>

112
00:04:21,190 --> 00:04:25,480
other thing<font color="#E5E5E5"> you get back is that</font>

113
00:04:23,170 --> 00:04:27,100
<font color="#E5E5E5">as</font><font color="#CCCCCC"> therefore</font><font color="#E5E5E5"> you know you want to make</font>

114
00:04:25,480 --> 00:04:28,900
sure<font color="#E5E5E5"> that what you're getting</font><font color="#CCCCCC"> back from</font>

115
00:04:27,100 --> 00:04:30,280
<font color="#E5E5E5">the object database is what you or you</font>

116
00:04:28,900 --> 00:04:31,659
<font color="#E5E5E5">expecting so if you're expecting a file</font>

117
00:04:30,280 --> 00:04:32,530
descriptor you'll be<font color="#CCCCCC"> able to check to</font>

118
00:04:31,660 --> 00:04:37,450
<font color="#CCCCCC">make sure you actually</font><font color="#E5E5E5"> got file</font>

119
00:04:32,530 --> 00:04:40,090
descriptor back as well so<font color="#CCCCCC"> Cisco's we</font>

120
00:04:37,450 --> 00:04:42,159
just pulled the<font color="#CCCCCC"> cistal's bsd Cisco's out</font>

121
00:04:40,090 --> 00:04:43,659
from the source<font color="#E5E5E5"> code which Apple make</font>

122
00:04:42,160 --> 00:04:47,290
freely available so there's a<font color="#CCCCCC"> fallen</font>

123
00:04:43,660 --> 00:04:49,390
<font color="#CCCCCC">air-cooled cesspools</font><font color="#E5E5E5"> master and we also</font>

124
00:04:47,290 --> 00:04:52,300
added<font color="#E5E5E5"> in main straps as well</font><font color="#CCCCCC"> as a</font>

125
00:04:49,390 --> 00:04:55,300
separate table<font color="#E5E5E5"> initially we were just</font>

126
00:04:52,300 --> 00:04:57,850
incredibly lazy and just wrote a script

127
00:04:55,300 --> 00:04:59,410
that<font color="#E5E5E5"> pulled out all the Cisco's and just</font>

128
00:04:57,850 --> 00:05:02,230
grabbed<font color="#E5E5E5"> them the arguments and we try to</font>

129
00:04:59,410 --> 00:05:04,450
<font color="#E5E5E5">turn those into argument types that the</font>

130
00:05:02,230 --> 00:05:08,110
facet<font color="#CCCCCC"> would understand so if it was an</font>

131
00:05:04,450 --> 00:05:09,789
<font color="#CCCCCC">INT we would</font><font color="#E5E5E5"> get a fuzz then you know if</font>

132
00:05:08,110 --> 00:05:11,710
it was a file descriptor get a file

133
00:05:09,790 --> 00:05:13,240
descriptor from the object database and

134
00:05:11,710 --> 00:05:14,979
everything else<font color="#E5E5E5"> and if we didn't know</font>

135
00:05:13,240 --> 00:05:19,420
what it<font color="#E5E5E5"> was then we go well his avoid</font>

136
00:05:14,980 --> 00:05:22,960
star<font color="#E5E5E5"> try and make sense of that which</font>

137
00:05:19,420 --> 00:05:25,120
kind<font color="#E5E5E5"> of worked initially the other cool</font>

138
00:05:22,960 --> 00:05:27,640
thing as well is<font color="#E5E5E5"> so initially we were</font>

139
00:05:25,120 --> 00:05:28,810
just using assembly<font color="#E5E5E5"> for calling the</font>

140
00:05:27,640 --> 00:05:30,700
Cisco's but there's<font color="#CCCCCC"> actually just a</font>

141
00:05:28,810 --> 00:05:33,160
<font color="#E5E5E5">really nice little</font><font color="#CCCCCC"> syscall function that</font>

142
00:05:30,700 --> 00:05:35,860
you<font color="#E5E5E5"> can call so you literally give it</font>

143
00:05:33,160 --> 00:05:37,360
the<font color="#E5E5E5"> Cisco you want to call the arguments</font>

144
00:05:35,860 --> 00:05:39,040
and it goes away and<font color="#E5E5E5"> executes it for you</font>

145
00:05:37,360 --> 00:05:40,870
and gives you<font color="#E5E5E5"> the return value back from</font>

146
00:05:39,040 --> 00:05:42,460
the Cisco so no<font color="#E5E5E5"> messing around with</font>

147
00:05:40,870 --> 00:05:44,250
<font color="#CCCCCC">assembly</font><font color="#E5E5E5"> or anything like that it's</font>

148
00:05:42,460 --> 00:05:47,440
really nice and<font color="#E5E5E5"> easy to use</font>

149
00:05:44,250 --> 00:05:49,660
so initially this is<font color="#E5E5E5"> just how a fuzzing</font>

150
00:05:47,440 --> 00:05:52,060
<font color="#E5E5E5">run would look like so you would go away</font>

151
00:05:49,660 --> 00:05:54,160
<font color="#E5E5E5">your picture Cisco you would generate</font>

152
00:05:52,060 --> 00:05:56,980
the<font color="#E5E5E5"> arguments for</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> Cisco and then</font>

153
00:05:54,160 --> 00:06:00,370
<font color="#E5E5E5">calling really basic</font><font color="#CCCCCC"> really</font><font color="#E5E5E5"> easy</font>

154
00:05:56,980 --> 00:06:02,110
I said worked<font color="#CCCCCC"> okay for really basic</font>

155
00:06:00,370 --> 00:06:04,090
Siskel's and you know if it was

156
00:06:02,110 --> 00:06:07,780
expecting just<font color="#CCCCCC"> an INT or whatever yeah</font>

157
00:06:04,090 --> 00:06:09,669
<font color="#E5E5E5">it'd probably work</font><font color="#CCCCCC"> vast majority failed</font>

158
00:06:07,780 --> 00:06:12,520
<font color="#E5E5E5">because</font><font color="#CCCCCC"> they're expecting things like</font>

159
00:06:09,670 --> 00:06:14,890
<font color="#CCCCCC">trucks</font><font color="#E5E5E5"> or whatever which we just didn't</font>

160
00:06:12,520 --> 00:06:16,599
account for so we were giving it<font color="#CCCCCC"> voice</font>

161
00:06:14,890 --> 00:06:20,289
star obviously the<font color="#E5E5E5"> cisco was picking up</font>

162
00:06:16,600 --> 00:06:22,420
on<font color="#E5E5E5"> that and it was</font><font color="#CCCCCC"> just dying so</font><font color="#E5E5E5"> and</font>

163
00:06:20,290 --> 00:06:26,200
also<font color="#E5E5E5"> the matrix just just didn't work at</font>

164
00:06:22,420 --> 00:06:29,200
<font color="#E5E5E5">all for this so basically we just have</font>

165
00:06:26,200 --> 00:06:32,020
to stop being lazy and<font color="#E5E5E5"> right actually</font>

166
00:06:29,200 --> 00:06:33,310
each Cisco individually<font color="#CCCCCC"> you might think</font>

167
00:06:32,020 --> 00:06:36,099
that's<font color="#E5E5E5"> not</font><font color="#CCCCCC"> a big task</font><font color="#E5E5E5"> but there's like</font>

168
00:06:33,310 --> 00:06:38,260
<font color="#E5E5E5">500 BSD Cisco's or something</font>

169
00:06:36,100 --> 00:06:41,320
thing<font color="#E5E5E5"> so going</font><font color="#CCCCCC"> through those and writing</font>

170
00:06:38,260 --> 00:06:43,990
them all individually<font color="#CCCCCC"> took a</font><font color="#E5E5E5"> while and</font>

171
00:06:41,320 --> 00:06:44,290
was pretty painful<font color="#E5E5E5"> but we got there in</font>

172
00:06:43,990 --> 00:06:47,500
the end

173
00:06:44,290 --> 00:06:50,260
<font color="#E5E5E5">so what we do now is each</font><font color="#CCCCCC"> Cisco is</font>

174
00:06:47,500 --> 00:06:52,810
actually a separate<font color="#CCCCCC"> function</font><font color="#E5E5E5"> it's the</font>

175
00:06:50,260 --> 00:06:54,070
exact<font color="#CCCCCC"> same principle but we actually try</font>

176
00:06:52,810 --> 00:06:55,960
<font color="#CCCCCC">and make sure that the arguments were</font>

177
00:06:54,070 --> 00:06:58,710
going to provide<font color="#E5E5E5"> or potentially provide</font>

178
00:06:55,960 --> 00:07:02,020
to the to the Cisco<font color="#E5E5E5"> actually</font><font color="#CCCCCC"> makes sense</font>

179
00:06:58,710 --> 00:07:03,760
<font color="#CCCCCC">so this is things like</font><font color="#E5E5E5"> if it's expecting</font>

180
00:07:02,020 --> 00:07:06,640
a struct well will populate that<font color="#CCCCCC"> strut</font>

181
00:07:03,760 --> 00:07:10,570
as it's expected<font color="#CCCCCC"> to</font><font color="#E5E5E5"> be populated</font><font color="#CCCCCC"> but</font>

182
00:07:06,640 --> 00:07:11,919
with<font color="#E5E5E5"> ARBs or</font><font color="#CCCCCC"> fuzz</font><font color="#E5E5E5"> fast data and you know</font>

183
00:07:10,570 --> 00:07:13,330
this<font color="#E5E5E5"> just ensures that the arguments</font>

184
00:07:11,920 --> 00:07:15,250
we're going to provide<font color="#CCCCCC"> up roughly</font>

185
00:07:13,330 --> 00:07:17,050
correct<font color="#E5E5E5"> which means</font><font color="#CCCCCC"> that cisco</font><font color="#E5E5E5"> was more</font>

186
00:07:15,250 --> 00:07:18,310
<font color="#E5E5E5">likely to execute the</font><font color="#CCCCCC"> cisco was</font>

187
00:07:17,050 --> 00:07:25,360
executing you're more likely to<font color="#E5E5E5"> find</font>

188
00:07:18,310 --> 00:07:27,910
<font color="#E5E5E5">bugs so the next bit is logging</font><font color="#CCCCCC"> log in</font>

189
00:07:25,360 --> 00:07:30,490
in a<font color="#E5E5E5"> in a kernel</font><font color="#CCCCCC"> fuzzer is a bit painful</font>

190
00:07:27,910 --> 00:07:32,200
<font color="#E5E5E5">at the best of times</font><font color="#CCCCCC"> I think</font><font color="#E5E5E5"> the way</font>

191
00:07:30,490 --> 00:07:34,630
we've approached it which I'm<font color="#E5E5E5"> not</font>

192
00:07:32,200 --> 00:07:37,539
convinced is the best way is essentially

193
00:07:34,630 --> 00:07:40,180
we<font color="#CCCCCC"> just log valid</font><font color="#E5E5E5"> C and I'll show an</font>

194
00:07:37,540 --> 00:07:41,980
example<font color="#E5E5E5"> in a minute</font><font color="#CCCCCC"> the reason we did</font>

195
00:07:40,180 --> 00:07:44,410
this<font color="#CCCCCC"> is we</font><font color="#E5E5E5"> thought well it'll be really</font>

196
00:07:41,980 --> 00:07:46,480
<font color="#E5E5E5">nice if</font><font color="#CCCCCC"> we've got a crash</font><font color="#E5E5E5"> and the log</font>

197
00:07:44,410 --> 00:07:47,980
file we could just compile it<font color="#E5E5E5"> and then</font>

198
00:07:46,480 --> 00:07:49,480
we got the same crash out<font color="#CCCCCC"> at the end</font>

199
00:07:47,980 --> 00:07:52,000
<font color="#E5E5E5">yeah that's that just seems nice and</font>

200
00:07:49,480 --> 00:07:53,770
<font color="#CCCCCC">easy and there's also you know lots of</font>

201
00:07:52,000 --> 00:07:56,950
tools<font color="#E5E5E5"> out there for minimizing C files</font>

202
00:07:53,770 --> 00:07:59,859
as<font color="#E5E5E5"> well creating these logging</font>

203
00:07:56,950 --> 00:08:02,469
<font color="#E5E5E5">statements</font><font color="#CCCCCC"> upfront is really painful and</font>

204
00:07:59,860 --> 00:08:04,230
it's just taken a lot of<font color="#E5E5E5"> time but if you</font>

205
00:08:02,470 --> 00:08:07,770
get them<font color="#E5E5E5"> correct</font><font color="#CCCCCC"> it should just work</font>

206
00:08:04,230 --> 00:08:11,230
which is all the benefits<font color="#CCCCCC"> were I guess</font>

207
00:08:07,770 --> 00:08:13,570
what we do is we send<font color="#E5E5E5"> these logs over</font><font color="#CCCCCC"> a</font>

208
00:08:11,230 --> 00:08:14,590
<font color="#E5E5E5">network port to fuzzer control</font><font color="#CCCCCC"> the</font>

209
00:08:13,570 --> 00:08:17,950
reason<font color="#E5E5E5"> for this is</font><font color="#CCCCCC"> we were initially</font>

210
00:08:14,590 --> 00:08:19,869
<font color="#E5E5E5">saving these to disk but the log files</font>

211
00:08:17,950 --> 00:08:21,789
just<font color="#E5E5E5"> wouldn't</font><font color="#CCCCCC"> cache</font><font color="#E5E5E5"> so if we got crash</font>

212
00:08:19,870 --> 00:08:23,800
<font color="#E5E5E5">we would miss the last three or</font><font color="#CCCCCC"> four</font>

213
00:08:21,790 --> 00:08:25,390
lines of<font color="#E5E5E5"> the log file so that's kind of</font>

214
00:08:23,800 --> 00:08:27,670
not<font color="#CCCCCC"> really helpful if you want to try</font>

215
00:08:25,390 --> 00:08:30,550
and then<font color="#E5E5E5"> reproduce that so instead we</font>

216
00:08:27,670 --> 00:08:32,140
send this over<font color="#E5E5E5"> a network</font><font color="#CCCCCC"> call and then</font>

217
00:08:30,550 --> 00:08:33,849
we wait till we get response back from

218
00:08:32,140 --> 00:08:36,130
<font color="#CCCCCC">files Oh</font><font color="#E5E5E5"> control and then we know our</font>

219
00:08:33,849 --> 00:08:37,570
log has<font color="#CCCCCC"> been received</font><font color="#E5E5E5"> and we know if we</font>

220
00:08:36,130 --> 00:08:41,710
get<font color="#E5E5E5"> crash we should be able to reproduce</font>

221
00:08:37,570 --> 00:08:44,260
it<font color="#CCCCCC"> so that's an example log file</font><font color="#E5E5E5"> the</font>

222
00:08:41,710 --> 00:08:46,450
<font color="#CCCCCC">other</font><font color="#E5E5E5"> thing we do is we</font><font color="#CCCCCC"> log the</font><font color="#E5E5E5"> seed</font>

223
00:08:44,260 --> 00:08:47,589
<font color="#CCCCCC">value so all the decisions in</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> fuzzer</font>

224
00:08:46,450 --> 00:08:50,120
<font color="#E5E5E5">just use</font><font color="#CCCCCC"> Rand</font>

225
00:08:47,589 --> 00:08:52,579
so the idea<font color="#E5E5E5"> being is we can just</font><font color="#CCCCCC"> seed</font>

226
00:08:50,120 --> 00:08:54,350
<font color="#CCCCCC">round with the same seed value</font><font color="#E5E5E5"> we should</font>

227
00:08:52,579 --> 00:08:57,529
<font color="#CCCCCC">be</font><font color="#E5E5E5"> able to just run it again and</font><font color="#CCCCCC"> get the</font>

228
00:08:54,350 --> 00:08:59,360
<font color="#CCCCCC">same</font><font color="#E5E5E5"> output so if for some reason we</font>

229
00:08:57,529 --> 00:09:01,850
don't<font color="#E5E5E5"> get a log file</font>

230
00:08:59,360 --> 00:09:03,440
we should always get the seed<font color="#CCCCCC"> value out</font>

231
00:09:01,850 --> 00:09:05,810
though and we can just<font color="#E5E5E5"> replay the</font><font color="#CCCCCC"> files</font>

232
00:09:03,440 --> 00:09:07,370
<font color="#CCCCCC">out</font><font color="#E5E5E5"> be</font><font color="#CCCCCC"> reverse-engineering</font><font color="#E5E5E5"> and debugging</font>

233
00:09:05,810 --> 00:09:11,209
<font color="#E5E5E5">but we should be able to figure out the</font>

234
00:09:07,370 --> 00:09:14,180
crash<font color="#E5E5E5"> from that so this is what a</font>

235
00:09:11,209 --> 00:09:16,430
function<font color="#E5E5E5"> looks like</font><font color="#CCCCCC"> this is</font><font color="#E5E5E5"> the exit</font>

236
00:09:14,180 --> 00:09:17,870
<font color="#CCCCCC">Cisco</font><font color="#E5E5E5"> probably don't want to fuzz that</font>

237
00:09:16,430 --> 00:09:21,469
<font color="#CCCCCC">you're probably not going to get very</font>

238
00:09:17,870 --> 00:09:23,570
<font color="#CCCCCC">far but</font><font color="#E5E5E5"> what you got here is we generate</font>

239
00:09:21,470 --> 00:09:25,910
<font color="#E5E5E5">a variable ID so as I said we log</font>

240
00:09:23,570 --> 00:09:28,339
<font color="#CCCCCC">invalid C but we cut we can't obviously</font>

241
00:09:25,910 --> 00:09:29,750
<font color="#E5E5E5">then have a whole bunch of variables</font>

242
00:09:28,339 --> 00:09:31,070
<font color="#CCCCCC">named the same</font><font color="#E5E5E5"> because you can't compile</font>

243
00:09:29,750 --> 00:09:35,089
that's what we do is generate a random

244
00:09:31,070 --> 00:09:36,230
number<font color="#E5E5E5"> to append to our variables then</font>

245
00:09:35,089 --> 00:09:38,660
what we're doing<font color="#CCCCCC"> there is we're getting</font>

246
00:09:36,230 --> 00:09:40,760
an int so we get to getting<font color="#E5E5E5"> and fast in</font>

247
00:09:38,660 --> 00:09:43,969
32<font color="#CCCCCC"> we'll login the value that got</font>

248
00:09:40,760 --> 00:09:46,100
returned to us what we then do is we<font color="#CCCCCC"> log</font>

249
00:09:43,970 --> 00:09:47,930
the siskel<font color="#E5E5E5"> they were about to execute</font>

250
00:09:46,100 --> 00:09:50,690
<font color="#E5E5E5">obviously we need</font><font color="#CCCCCC"> to log</font><font color="#E5E5E5"> this before we</font>

251
00:09:47,930 --> 00:09:52,310
<font color="#CCCCCC">actually execute it because if you can't</font>

252
00:09:50,690 --> 00:09:55,220
log if you've got a kernel crash after

253
00:09:52,310 --> 00:09:58,699
the<font color="#CCCCCC"> Cisco and then the other thing we do</font>

254
00:09:55,220 --> 00:09:59,870
<font color="#E5E5E5">is we log the return value as well and</font>

255
00:09:58,699 --> 00:10:03,399
this<font color="#CCCCCC"> is actually quite</font><font color="#E5E5E5"> helpful for</font>

256
00:09:59,870 --> 00:10:05,899
debugging<font color="#E5E5E5"> so if we have lots and</font><font color="#CCCCCC"> lots of</font>

257
00:10:03,399 --> 00:10:08,029
<font color="#E5E5E5">Cisco's that appear to</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> failing we can</font>

258
00:10:05,899 --> 00:10:09,589
quickly just<font color="#CCCCCC"> rip through the log files</font>

259
00:10:08,029 --> 00:10:14,570
<font color="#E5E5E5">and figure out which ones are crashing</font>

260
00:10:09,589 --> 00:10:16,160
and<font color="#E5E5E5"> then front</font><font color="#CCCCCC"> fix them up as well we</font>

261
00:10:14,570 --> 00:10:17,720
also have<font color="#CCCCCC"> a whole</font><font color="#E5E5E5"> bunch of what we call</font>

262
00:10:16,160 --> 00:10:20,930
library cause but<font color="#E5E5E5"> essentially this is</font>

263
00:10:17,720 --> 00:10:22,310
<font color="#E5E5E5">just a catalog of common API calls so</font>

264
00:10:20,930 --> 00:10:25,250
these are things covering things<font color="#E5E5E5"> like IO</font>

265
00:10:22,310 --> 00:10:27,560
surf is the<font color="#CCCCCC"> hypervisor</font><font color="#E5E5E5"> I</font><font color="#CCCCCC"> hid library and</font>

266
00:10:25,250 --> 00:10:30,440
<font color="#CCCCCC">IO kit as well</font><font color="#E5E5E5"> again it's the exact</font><font color="#CCCCCC"> same</font>

267
00:10:27,560 --> 00:10:32,930
<font color="#E5E5E5">principle where we're</font><font color="#CCCCCC"> using the get</font><font color="#E5E5E5"> fast</font>

268
00:10:30,440 --> 00:10:35,240
values and the object database as well

269
00:10:32,930 --> 00:10:36,680
and<font color="#E5E5E5"> again we've had some success from</font>

270
00:10:35,240 --> 00:10:40,519
this as<font color="#CCCCCC"> well and getting some bugs out</font>

271
00:10:36,680 --> 00:10:41,959
<font color="#E5E5E5">so this is the</font><font color="#CCCCCC"> IO</font><font color="#E5E5E5"> connect</font><font color="#CCCCCC"> add ref as you</font>

272
00:10:40,519 --> 00:10:45,800
can see<font color="#CCCCCC"> there all it's doing is grabbing</font>

273
00:10:41,959 --> 00:10:48,739
<font color="#E5E5E5">a object and then calling it and then we</font>

274
00:10:45,800 --> 00:10:51,800
just<font color="#E5E5E5"> returning</font><font color="#CCCCCC"> the word look in the</font>

275
00:10:48,740 --> 00:10:54,529
return value as well<font color="#CCCCCC"> so this is what our</font>

276
00:10:51,800 --> 00:10:56,599
<font color="#CCCCCC">new fuzz loop looks like so essentially</font>

277
00:10:54,529 --> 00:10:59,360
<font color="#E5E5E5">what we do is we choose either a library</font>

278
00:10:56,600 --> 00:11:00,780
<font color="#CCCCCC">call assist call</font><font color="#E5E5E5"> or a maze trap we</font>

279
00:10:59,360 --> 00:11:03,300
generate the arguments<font color="#E5E5E5"> for</font><font color="#CCCCCC"> it</font>

280
00:11:00,780 --> 00:11:05,280
and we make the call<font color="#E5E5E5"> and what we do is</font>

281
00:11:03,300 --> 00:11:08,040
we have an execution limit

282
00:11:05,280 --> 00:11:11,850
so either we hit our execution limit and

283
00:11:08,040 --> 00:11:14,069
we stop<font color="#E5E5E5"> or we've got preferably a crash</font>

284
00:11:11,850 --> 00:11:18,120
and then we can grab<font color="#E5E5E5"> the</font><font color="#CCCCCC"> kernel dumps</font>

285
00:11:14,070 --> 00:11:20,970
and a lot<font color="#E5E5E5"> files and stuff</font><font color="#CCCCCC"> so that's</font><font color="#E5E5E5"> if</font>

286
00:11:18,120 --> 00:11:24,600
our sex<font color="#CCCCCC"> bus next</font><font color="#E5E5E5"> up is how we went</font><font color="#CCCCCC"> about</font>

287
00:11:20,970 --> 00:11:27,060
scaling<font color="#E5E5E5"> up the fuzzy</font><font color="#CCCCCC"> the fuzz oh</font><font color="#E5E5E5"> sorry</font>

288
00:11:24,600 --> 00:11:29,100
<font color="#CCCCCC">and so</font><font color="#E5E5E5"> obviously we want</font><font color="#CCCCCC"> to be able</font><font color="#E5E5E5"> to</font>

289
00:11:27,060 --> 00:11:32,280
run this as scale<font color="#E5E5E5"> because you're much</font>

290
00:11:29,100 --> 00:11:34,500
more likely<font color="#CCCCCC"> to get bugs the other thing</font>

291
00:11:32,280 --> 00:11:36,089
we're<font color="#E5E5E5"> really keen on is we've kind of</font>

292
00:11:34,500 --> 00:11:39,180
<font color="#E5E5E5">just</font><font color="#CCCCCC"> want to be able to do this in a</font>

293
00:11:36,090 --> 00:11:40,230
<font color="#CCCCCC">kick and run kind</font><font color="#E5E5E5"> of way</font><font color="#CCCCCC"> so we want</font>

294
00:11:39,180 --> 00:11:42,479
things<font color="#E5E5E5"> that</font><font color="#CCCCCC"> are going</font><font color="#E5E5E5"> to capture our</font>

295
00:11:40,230 --> 00:11:44,670
<font color="#E5E5E5">bugs</font><font color="#CCCCCC"> grab our kernel dance you know</font>

296
00:11:42,480 --> 00:11:46,050
revert the<font color="#CCCCCC"> VM for</font><font color="#E5E5E5"> us and carry on a</font>

297
00:11:44,670 --> 00:11:48,300
fuzzing run<font color="#E5E5E5"> what we</font><font color="#CCCCCC"> don't want to do is</font>

298
00:11:46,050 --> 00:11:50,160
sit<font color="#E5E5E5"> and babysit the</font><font color="#CCCCCC"> fuzzer essentially</font>

299
00:11:48,300 --> 00:11:51,599
<font color="#E5E5E5">and so what we have is a whole bunch of</font>

300
00:11:50,160 --> 00:11:56,640
Python<font color="#E5E5E5"> scripts</font><font color="#CCCCCC"> that basically control</font>

301
00:11:51,600 --> 00:11:59,630
everything<font color="#E5E5E5"> for this so in</font><font color="#CCCCCC"> fusion we we</font>

302
00:11:56,640 --> 00:12:03,270
basically<font color="#E5E5E5"> make heavy use of VM</font><font color="#CCCCCC"> runs so</font>

303
00:11:59,630 --> 00:12:06,180
<font color="#E5E5E5">VMware expose a nice API so we can give</font>

304
00:12:03,270 --> 00:12:10,430
<font color="#E5E5E5">it a</font><font color="#CCCCCC"> VM</font><font color="#E5E5E5"> LLL go away snapshot it for us</font>

305
00:12:06,180 --> 00:12:14,819
<font color="#E5E5E5">copy the</font><font color="#CCCCCC"> buzzer by an area called</font><font color="#E5E5E5"> across</font>

306
00:12:10,430 --> 00:12:17,400
<font color="#E5E5E5">set up all</font><font color="#CCCCCC"> our logger</font><font color="#E5E5E5"> staff set up our</font>

307
00:12:14,820 --> 00:12:19,170
panic<font color="#E5E5E5"> diamonds and everything</font><font color="#CCCCCC"> else and</font>

308
00:12:17,400 --> 00:12:22,620
<font color="#CCCCCC">we can</font><font color="#E5E5E5"> just let it</font><font color="#CCCCCC"> run</font><font color="#E5E5E5"> we don't have to</font>

309
00:12:19,170 --> 00:12:27,300
worry about<font color="#E5E5E5"> it the next thing we've been</font>

310
00:12:22,620 --> 00:12:29,100
<font color="#E5E5E5">looking</font><font color="#CCCCCC"> at is qmu obviously you have to</font>

311
00:12:27,300 --> 00:12:30,750
run this on Mac<font color="#E5E5E5"> hardware is part of</font>

312
00:12:29,100 --> 00:12:35,760
<font color="#CCCCCC">their licensing agreement and we</font>

313
00:12:30,750 --> 00:12:37,530
obviously do this if Apple<font color="#CCCCCC"> were here</font><font color="#E5E5E5"> but</font>

314
00:12:35,760 --> 00:12:39,569
the<font color="#E5E5E5"> reason we did this is</font><font color="#CCCCCC"> we wanted it</font>

315
00:12:37,530 --> 00:12:42,900
to<font color="#E5E5E5"> investigate Co coverage support which</font>

316
00:12:39,570 --> 00:12:47,490
is a little<font color="#E5E5E5"> bit easier and</font><font color="#CCCCCC"> qmu there</font>

317
00:12:42,900 --> 00:12:49,680
were a few challenges<font color="#CCCCCC"> to this so we had</font>

318
00:12:47,490 --> 00:12:53,160
to mess around with our<font color="#E5E5E5"> ovm</font><font color="#CCCCCC"> F and clove</font>

319
00:12:49,680 --> 00:12:56,520
of<font color="#CCCCCC"> NVRAM support we also had to use and</font>

320
00:12:53,160 --> 00:12:59,069
<font color="#E5E5E5">I own net driver and because otherwise</font>

321
00:12:56,520 --> 00:13:01,770
we<font color="#CCCCCC"> can</font><font color="#E5E5E5"> we can't use the IO kernel debug</font>

322
00:12:59,070 --> 00:13:03,930
interface which yeah we need if we get a

323
00:13:01,770 --> 00:13:05,020
<font color="#E5E5E5">crash we weren't able to send our kernel</font>

324
00:13:03,930 --> 00:13:08,620
dumps out over

325
00:13:05,020 --> 00:13:09,850
<font color="#E5E5E5">a network</font><font color="#CCCCCC"> port and also</font><font color="#E5E5E5"> the final</font>

326
00:13:08,620 --> 00:13:12,520
<font color="#CCCCCC">remaining issue we've got at the</font><font color="#E5E5E5"> moment</font>

327
00:13:09,850 --> 00:13:14,170
is memory snapshot support so in fusion

328
00:13:12,520 --> 00:13:17,020
we can just revert to a<font color="#CCCCCC"> snapshot which</font>

329
00:13:14,170 --> 00:13:22,180
is a lot quicker<font color="#CCCCCC"> under</font><font color="#E5E5E5"> qmu what we have</font>

330
00:13:17,020 --> 00:13:23,560
to do is reboot the whole whole<font color="#E5E5E5"> VM if</font>

331
00:13:22,180 --> 00:13:28,239
<font color="#E5E5E5">we're getting</font><font color="#CCCCCC"> crash or</font><font color="#E5E5E5"> if we hit</font><font color="#CCCCCC"> our</font>

332
00:13:23,560 --> 00:13:30,849
execution limit so this is just<font color="#E5E5E5"> a</font><font color="#CCCCCC"> short</font>

333
00:13:28,240 --> 00:13:32,500
<font color="#E5E5E5">diagram of how</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> will works and so we</font>

334
00:13:30,850 --> 00:13:34,480
have a whole<font color="#E5E5E5"> bunch of OSX</font><font color="#CCCCCC"> Fuzzy's</font>

335
00:13:32,500 --> 00:13:36,310
running on top of a bunch<font color="#CCCCCC"> of math</font><font color="#E5E5E5"> course</font>

336
00:13:34,480 --> 00:13:39,640
<font color="#CCCCCC">guests</font><font color="#E5E5E5"> which run on top</font><font color="#CCCCCC"> of a hypervisor</font>

337
00:13:36,310 --> 00:13:41,410
<font color="#CCCCCC">then on</font><font color="#E5E5E5"> our host</font><font color="#CCCCCC"> we have our logo and</font>

338
00:13:39,640 --> 00:13:44,319
<font color="#E5E5E5">our Python scripts controlling</font>

339
00:13:41,410 --> 00:13:46,120
everything<font color="#E5E5E5"> with the panic daemon so what</font>

340
00:13:44,320 --> 00:13:49,720
we have is through<font color="#E5E5E5"> a</font><font color="#CCCCCC"> three</font><font color="#E5E5E5"> or</font><font color="#CCCCCC"> four</font><font color="#E5E5E5"> max</font>

341
00:13:46,120 --> 00:13:52,210
<font color="#CCCCCC">setup</font><font color="#E5E5E5"> and what they do is push all the</font>

342
00:13:49,720 --> 00:13:53,440
crashes<font color="#E5E5E5"> out to</font><font color="#CCCCCC"> CouchDB</font><font color="#E5E5E5"> and the reason</font>

343
00:13:52,210 --> 00:13:55,660
<font color="#CCCCCC">for this</font><font color="#E5E5E5"> is we want</font><font color="#CCCCCC"> to be able to have a</font>

344
00:13:53,440 --> 00:13:58,090
centralized<font color="#E5E5E5"> place for our crashes but we</font>

345
00:13:55,660 --> 00:14:00,100
can also do some<font color="#E5E5E5"> basic deduplication as</font>

346
00:13:58,090 --> 00:14:02,170
stuff as well<font color="#E5E5E5"> based on</font><font color="#CCCCCC"> that so if we've</font>

347
00:14:00,100 --> 00:14:04,030
another<font color="#E5E5E5"> you know host of whatever scene</font>

348
00:14:02,170 --> 00:14:06,520
at the same crash we'll just dump<font color="#E5E5E5"> it out</font>

349
00:14:04,030 --> 00:14:09,100
we're<font color="#CCCCCC"> not interested</font><font color="#E5E5E5"> and we also do some</font>

350
00:14:06,520 --> 00:14:15,490
really<font color="#CCCCCC"> basic and</font><font color="#E5E5E5"> exploitability</font><font color="#CCCCCC"> chess as</font>

351
00:14:09,100 --> 00:14:17,950
well<font color="#CCCCCC"> so moving on to</font><font color="#E5E5E5"> code coverage we've</font>

352
00:14:15,490 --> 00:14:20,230
only<font color="#E5E5E5"> really recently started looking at</font>

353
00:14:17,950 --> 00:14:23,470
how we might<font color="#CCCCCC"> utilize this so at the</font>

354
00:14:20,230 --> 00:14:24,880
<font color="#CCCCCC">moment we're utilizing</font><font color="#E5E5E5"> NCC</font><font color="#CCCCCC"> triforce for</font>

355
00:14:23,470 --> 00:14:26,920
the code coverage<font color="#E5E5E5"> it's a pretty cool</font>

356
00:14:24,880 --> 00:14:28,770
project<font color="#CCCCCC"> let's say we've only got a</font>

357
00:14:26,920 --> 00:14:31,810
really<font color="#E5E5E5"> basic set up at the moment</font>

358
00:14:28,770 --> 00:14:34,060
and again we've had<font color="#CCCCCC"> a few</font><font color="#E5E5E5"> challenges</font>

359
00:14:31,810 --> 00:14:36,400
with this we've had<font color="#CCCCCC"> to bat</font><font color="#E5E5E5"> for all the</font><font color="#CCCCCC"> Q</font>

360
00:14:34,060 --> 00:14:38,680
<font color="#CCCCCC">mu patches</font><font color="#E5E5E5"> to support latest Mac or</font>

361
00:14:36,400 --> 00:14:41,920
<font color="#CCCCCC">Ciera</font><font color="#E5E5E5"> on top of the patches we've had to</font>

362
00:14:38,680 --> 00:14:44,170
do to<font color="#E5E5E5"> get it</font><font color="#CCCCCC"> to work anyway but what we</font>

363
00:14:41,920 --> 00:14:47,949
<font color="#E5E5E5">will do is we'll publish these changes</font>

364
00:14:44,170 --> 00:14:49,599
we've made<font color="#CCCCCC"> to support</font><font color="#E5E5E5"> Mac O's to try</font><font color="#CCCCCC"> for</font>

365
00:14:47,950 --> 00:14:50,860
so whether we push those into<font color="#E5E5E5"> the</font>

366
00:14:49,600 --> 00:14:52,660
<font color="#CCCCCC">triforce project or make them available</font>

367
00:14:50,860 --> 00:14:56,500
some other way<font color="#CCCCCC"> we'll try and get</font><font color="#E5E5E5"> those</font>

368
00:14:52,660 --> 00:14:59,230
out next<font color="#E5E5E5"> week</font><font color="#CCCCCC"> so other people can get</font>

369
00:14:56,500 --> 00:15:02,020
involved<font color="#E5E5E5"> in this as well</font><font color="#CCCCCC"> but this</font><font color="#E5E5E5"> is how</font>

370
00:14:59,230 --> 00:15:03,490
it works<font color="#E5E5E5"> at the</font><font color="#CCCCCC"> moment with our</font><font color="#E5E5E5"> cocoa</font>

371
00:15:02,020 --> 00:15:04,810
free support<font color="#E5E5E5"> so what we're doing is</font>

372
00:15:03,490 --> 00:15:07,120
we're choosing<font color="#E5E5E5"> one of those calls so</font>

373
00:15:04,810 --> 00:15:08,180
whether that's our library call or our

374
00:15:07,120 --> 00:15:11,300
sis call

375
00:15:08,180 --> 00:15:13,969
or<font color="#CCCCCC"> made</font><font color="#E5E5E5"> strap</font><font color="#CCCCCC"> what we do then is we</font>

376
00:15:11,300 --> 00:15:16,189
start our tracing in the kernel<font color="#E5E5E5"> we make</font>

377
00:15:13,970 --> 00:15:20,510
our<font color="#CCCCCC"> call</font><font color="#E5E5E5"> we stop the tracing and then we</font>

378
00:15:16,190 --> 00:15:22,160
take our coverage information<font color="#CCCCCC"> at the</font>

379
00:15:20,510 --> 00:15:24,890
<font color="#E5E5E5">moment we're still working out on how to</font>

380
00:15:22,160 --> 00:15:26,540
really<font color="#E5E5E5"> effectively utilize that coverage</font>

381
00:15:24,890 --> 00:15:27,890
information<font color="#CCCCCC"> but these are some of</font><font color="#E5E5E5"> the</font>

382
00:15:26,540 --> 00:15:29,930
things<font color="#E5E5E5"> we want to be able to do with it</font>

383
00:15:27,890 --> 00:15:31,310
<font color="#E5E5E5">so we want to be able to take the</font>

384
00:15:29,930 --> 00:15:32,839
<font color="#CCCCCC">information and understand obviously</font><font color="#E5E5E5"> if</font>

385
00:15:31,310 --> 00:15:34,550
it's<font color="#CCCCCC"> hitting new paths because that's</font>

386
00:15:32,839 --> 00:15:37,220
going<font color="#E5E5E5"> to potentially be more interesting</font>

387
00:15:34,550 --> 00:15:38,750
to<font color="#E5E5E5"> us you know so if it does then we</font>

388
00:15:37,220 --> 00:15:40,550
want to<font color="#E5E5E5"> keep that</font><font color="#CCCCCC"> call keep the</font>

389
00:15:38,750 --> 00:15:42,170
arguments that<font color="#E5E5E5"> hit the new paths and use</font>

390
00:15:40,550 --> 00:15:45,500
it<font color="#E5E5E5"> for future runs maybe tweaking the</font>

391
00:15:42,170 --> 00:15:47,120
arguments or something and the<font color="#E5E5E5"> other</font>

392
00:15:45,500 --> 00:15:50,120
thing that<font color="#CCCCCC"> would be</font><font color="#E5E5E5"> really</font><font color="#CCCCCC"> useful for</font><font color="#E5E5E5"> us</font>

393
00:15:47,120 --> 00:15:51,860
is if we're hitting we're just

394
00:15:50,120 --> 00:15:53,180
<font color="#E5E5E5">constantly hitting the same paths or</font>

395
00:15:51,860 --> 00:15:55,279
whatever we might be able<font color="#E5E5E5"> to do some of</font>

396
00:15:53,180 --> 00:15:59,089
<font color="#E5E5E5">the e bug in you know or figure out ways</font>

397
00:15:55,279 --> 00:16:00,910
<font color="#CCCCCC">to just not waste cycles I'd say it</font>

398
00:15:59,089 --> 00:16:03,500
needs a<font color="#E5E5E5"> fair bit of work at the moment</font>

399
00:16:00,910 --> 00:16:05,480
<font color="#CCCCCC">our original design really</font><font color="#E5E5E5"> just didn't</font>

400
00:16:03,500 --> 00:16:07,610
take into<font color="#CCCCCC"> account code coverage you know</font>

401
00:16:05,480 --> 00:16:09,410
the sort of feeling<font color="#E5E5E5"> on it was well we're</font>

402
00:16:07,610 --> 00:16:12,110
getting bugs<font color="#E5E5E5"> why bother</font>

403
00:16:09,410 --> 00:16:16,189
<font color="#CCCCCC">but it</font><font color="#E5E5E5"> feels like it'll</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> a nice a nice</font>

404
00:16:12,110 --> 00:16:17,420
thing to<font color="#CCCCCC"> have going forwards so now I'm</font>

405
00:16:16,190 --> 00:16:20,650
<font color="#E5E5E5">gonna hand over to Alex who's going to</font>

406
00:16:17,420 --> 00:16:22,430
talk<font color="#CCCCCC"> about the in memory</font><font color="#E5E5E5"> fuzzing</font><font color="#CCCCCC"> pot</font>

407
00:16:20,650 --> 00:16:25,010
yeah thanks James

408
00:16:22,430 --> 00:16:28,400
so basically James's approach was

409
00:16:25,010 --> 00:16:30,350
looking at the<font color="#CCCCCC"> bsd side of may show us</font>

410
00:16:28,400 --> 00:16:32,240
but there's different<font color="#E5E5E5"> subsystems within</font>

411
00:16:30,350 --> 00:16:35,839
may show us for those who aren't that

412
00:16:32,240 --> 00:16:38,330
familiar<font color="#E5E5E5"> so there's the</font><font color="#CCCCCC"> iokit side which</font>

413
00:16:35,839 --> 00:16:42,890
is<font color="#E5E5E5"> the device driver stack and also</font><font color="#CCCCCC"> the</font>

414
00:16:38,330 --> 00:16:44,720
mesh microkernel side<font color="#E5E5E5"> essentially so my</font>

415
00:16:42,890 --> 00:16:47,390
idea was<font color="#CCCCCC"> to focus on the common</font>

416
00:16:44,720 --> 00:16:51,110
vulnerability classes so things<font color="#E5E5E5"> were</font>

417
00:16:47,390 --> 00:16:54,949
those basically<font color="#E5E5E5"> lots of bugs being like</font>

418
00:16:51,110 --> 00:16:57,380
found in in the past for so the device

419
00:16:54,950 --> 00:17:01,370
driver stack<font color="#CCCCCC"> I or</font><font color="#E5E5E5"> kit if basic comes up</font>

420
00:16:57,380 --> 00:17:04,280
in every<font color="#CCCCCC"> Apple</font><font color="#E5E5E5"> patch security patch</font>

421
00:17:01,370 --> 00:17:06,800
release and so it's a common source of

422
00:17:04,280 --> 00:17:09,619
issues so things like<font color="#CCCCCC"> IO connect call</font>

423
00:17:06,800 --> 00:17:12,800
method<font color="#E5E5E5"> that's where essentially uses</font>

424
00:17:09,619 --> 00:17:16,909
<font color="#CCCCCC">Bayes can pass data to</font><font color="#E5E5E5"> kernel space to a</font>

425
00:17:12,800 --> 00:17:18,948
device driver<font color="#CCCCCC"> a to an</font><font color="#E5E5E5"> I</font><font color="#CCCCCC"> kick driver and</font>

426
00:17:16,910 --> 00:17:21,839
hand a lot and call the selector in zone

427
00:17:18,949 --> 00:17:25,689
<font color="#E5E5E5">there's also the</font><font color="#CCCCCC"> IO registry which</font>

428
00:17:21,839 --> 00:17:28,208
persistent properties so things which

429
00:17:25,689 --> 00:17:30,490
the device<font color="#E5E5E5"> drivers going to act on then</font>

430
00:17:28,209 --> 00:17:33,700
there's shared memory mappings where the

431
00:17:30,490 --> 00:17:35,620
user space can request the kernel<font color="#E5E5E5"> Maps</font>

432
00:17:33,700 --> 00:17:38,409
<font color="#E5E5E5">some memory which is shared</font><font color="#CCCCCC"> between the</font>

433
00:17:35,620 --> 00:17:41,199
user space and kernel space<font color="#E5E5E5"> and then</font>

434
00:17:38,409 --> 00:17:43,149
finally a time of tracking<font color="#E5E5E5"> time of use</font>

435
00:17:41,200 --> 00:17:44,770
issues so I basically<font color="#E5E5E5"> wanted</font><font color="#CCCCCC"> to write a</font>

436
00:17:43,149 --> 00:17:48,520
<font color="#CCCCCC">fuzzer which would find these kind of</font>

437
00:17:44,770 --> 00:17:51,520
issues<font color="#E5E5E5"> the the approach I took was to</font>

438
00:17:48,520 --> 00:17:53,320
combine static<font color="#E5E5E5"> binary analysis so as</font>

439
00:17:51,520 --> 00:17:57,250
much information<font color="#E5E5E5"> as I</font><font color="#CCCCCC"> can possibly get</font>

440
00:17:53,320 --> 00:17:59,168
<font color="#E5E5E5">from the binaries themselves with with</font>

441
00:17:57,250 --> 00:18:02,320
also<font color="#CCCCCC"> some kind of dynamic side as well</font>

442
00:17:59,169 --> 00:18:04,360
<font color="#E5E5E5">and I also wanted to do as much as I</font>

443
00:18:02,320 --> 00:18:06,220
could with<font color="#E5E5E5"> in memory because every time</font>

444
00:18:04,360 --> 00:18:08,678
you touch<font color="#E5E5E5"> disk it slows down your</font><font color="#CCCCCC"> faiza</font>

445
00:18:06,220 --> 00:18:11,070
<font color="#E5E5E5">I know with fuzzing like if you can get</font>

446
00:18:08,679 --> 00:18:15,340
as much execution cycles as possible and

447
00:18:11,070 --> 00:18:18,610
finding bugs is easier so<font color="#E5E5E5"> um for this</font>

448
00:18:15,340 --> 00:18:22,689
<font color="#CCCCCC">fuzzer I developed and three different</font>

449
00:18:18,610 --> 00:18:24,820
<font color="#CCCCCC">components they</font><font color="#E5E5E5"> basically want the</font>

450
00:18:22,690 --> 00:18:28,649
called coral<font color="#E5E5E5"> Sun the first one which</font><font color="#CCCCCC"> is</font>

451
00:18:24,820 --> 00:18:34,299
an i/o kit and mesh library but

452
00:18:28,649 --> 00:18:36,668
essentially<font color="#E5E5E5"> that's used for calling well</font>

453
00:18:34,299 --> 00:18:41,590
<font color="#E5E5E5">using Python to call C functions and</font>

454
00:18:36,669 --> 00:18:45,100
<font color="#CCCCCC">iocket functions then is the KXT Lib</font>

455
00:18:41,590 --> 00:18:47,789
which is used for<font color="#E5E5E5"> extracting data</font><font color="#CCCCCC"> from</font>

456
00:18:45,100 --> 00:18:51,428
the<font color="#E5E5E5"> KX T's from the device drivers</font>

457
00:18:47,789 --> 00:18:53,710
<font color="#E5E5E5">retina</font><font color="#CCCCCC"> NIDA Python and then finally the</font>

458
00:18:51,429 --> 00:18:57,399
<font color="#CCCCCC">the pleasure itself called opal robots</font>

459
00:18:53,710 --> 00:18:58,840
<font color="#E5E5E5">and which is like the fuzzing</font><font color="#CCCCCC"> components</font>

460
00:18:57,399 --> 00:19:01,299
and sniffing component of the

461
00:18:58,840 --> 00:19:02,529
architecture are using code names<font color="#E5E5E5"> as</font>

462
00:19:01,299 --> 00:19:04,120
well just<font color="#E5E5E5"> because it seems to be the</font>

463
00:19:02,529 --> 00:19:07,690
cool thing<font color="#E5E5E5"> to do at the moment I'm</font><font color="#CCCCCC"> not</font>

464
00:19:04,120 --> 00:19:10,299
very good<font color="#CCCCCC"> at</font><font color="#E5E5E5"> naming projects</font><font color="#CCCCCC"> oh yeah but</font>

465
00:19:07,690 --> 00:19:14,049
there are similar approaches already

466
00:19:10,299 --> 00:19:18,610
that there's been a kernel<font color="#E5E5E5"> based</font><font color="#CCCCCC"> and I</font>

467
00:19:14,049 --> 00:19:21,039
think<font color="#E5E5E5"> King</font><font color="#CCCCCC"> Timo Tencent have been doing</font>

468
00:19:18,610 --> 00:19:26,439
similar<font color="#CCCCCC"> stuff</font><font color="#E5E5E5"> but they've never released</font>

469
00:19:21,039 --> 00:19:28,120
any<font color="#E5E5E5"> codes</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> I'm so firstly the the</font>

470
00:19:26,440 --> 00:19:31,770
wrapper library it's called<font color="#CCCCCC"> Karlsson</font>

471
00:19:28,120 --> 00:19:34,010
it's written in siphon which is

472
00:19:31,770 --> 00:19:37,250
essentially a way of compiling

473
00:19:34,010 --> 00:19:38,930
see<font color="#CCCCCC"> within -</font><font color="#E5E5E5"> and it</font><font color="#CCCCCC"> basically makes</font><font color="#E5E5E5"> it a</font>

474
00:19:37,250 --> 00:19:42,560
quick way<font color="#CCCCCC"> of just like testing out</font>

475
00:19:38,930 --> 00:19:44,470
prototyping<font color="#CCCCCC"> and fuzzing ideas so common</font>

476
00:19:42,560 --> 00:19:47,000
things would you<font color="#E5E5E5"> do when</font><font color="#CCCCCC"> you're am</font>

477
00:19:44,470 --> 00:19:49,430
fuzzing iokit device drivers you'd want

478
00:19:47,000 --> 00:19:51,650
to<font color="#E5E5E5"> like open</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> connection to the to the</font>

479
00:19:49,430 --> 00:19:54,830
<font color="#E5E5E5">i/o kit service you'd like to call</font>

480
00:19:51,650 --> 00:19:56,570
<font color="#E5E5E5">methods using</font><font color="#CCCCCC"> i/o</font><font color="#E5E5E5"> connect call mapping</font>

481
00:19:54,830 --> 00:19:58,070
<font color="#E5E5E5">share memory essentially the</font>

482
00:19:56,570 --> 00:19:59,929
vulnerability of classes which<font color="#E5E5E5"> I talked</font>

483
00:19:58,070 --> 00:20:04,460
about<font color="#E5E5E5"> previously</font><font color="#CCCCCC"> I was</font><font color="#E5E5E5"> just writing</font>

484
00:19:59,930 --> 00:20:12,020
wrappers for this<font color="#E5E5E5"> and</font><font color="#CCCCCC"> to supplier and I</font>

485
00:20:04,460 --> 00:20:13,970
guess that's quite small<font color="#E5E5E5"> so hopefully</font>

486
00:20:12,020 --> 00:20:17,150
you<font color="#E5E5E5"> can see</font><font color="#CCCCCC"> that and but essentially</font>

487
00:20:13,970 --> 00:20:19,700
this just gives an example<font color="#E5E5E5"> of you can</font>

488
00:20:17,150 --> 00:20:22,640
write C code inside<font color="#E5E5E5"> of the Python and</font>

489
00:20:19,700 --> 00:20:24,740
then essentially have that and<font color="#E5E5E5"> to handle</font>

490
00:20:22,640 --> 00:20:27,040
type conversions between<font color="#CCCCCC"> Python and C</font>

491
00:20:24,740 --> 00:20:30,920
without<font color="#E5E5E5"> actually having to write lots of</font>

492
00:20:27,040 --> 00:20:33,770
native<font color="#E5E5E5"> C with the Python</font><font color="#CCCCCC"> interpreter</font><font color="#E5E5E5"> and</font>

493
00:20:30,920 --> 00:20:36,500
it just it's quite<font color="#E5E5E5"> similar to swig if</font>

494
00:20:33,770 --> 00:20:39,290
you are familiar<font color="#E5E5E5"> with</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> but I like I</font>

495
00:20:36,500 --> 00:20:42,470
like<font color="#E5E5E5"> to</font><font color="#CCCCCC"> syphon very quickly I write in</font>

496
00:20:39,290 --> 00:20:44,570
<font color="#E5E5E5">this prototype code and and you can see</font>

497
00:20:42,470 --> 00:20:48,110
can do things like native memory

498
00:20:44,570 --> 00:20:50,480
<font color="#E5E5E5">management using malloc so taking this</font>

499
00:20:48,110 --> 00:20:53,780
as an<font color="#CCCCCC"> example and I</font><font color="#E5E5E5"> or connect call</font>

500
00:20:50,480 --> 00:20:57,080
method<font color="#CCCCCC"> and essentially takes in an array</font>

501
00:20:53,780 --> 00:20:59,210
of scale of<font color="#E5E5E5"> values so</font><font color="#CCCCCC"> implying that yup</font>

502
00:20:57,080 --> 00:21:05,090
your<font color="#E5E5E5"> Python array then I can manually</font>

503
00:20:59,210 --> 00:21:07,790
allocate memory for<font color="#E5E5E5"> that</font><font color="#CCCCCC"> and yeah money</font>

504
00:21:05,090 --> 00:21:08,750
<font color="#E5E5E5">will allocate memory and then the type</font>

505
00:21:07,790 --> 00:21:12,680
of conversion<font color="#E5E5E5"> will</font><font color="#CCCCCC"> be handled</font>

506
00:21:08,750 --> 00:21:15,280
automatically<font color="#E5E5E5"> so</font><font color="#CCCCCC"> and with these I</font>

507
00:21:12,680 --> 00:21:18,830
basically did this<font color="#CCCCCC"> I wrote wrappers</font><font color="#E5E5E5"> for</font>

508
00:21:15,280 --> 00:21:20,750
the difference<font color="#E5E5E5"> like sort of common areas</font>

509
00:21:18,830 --> 00:21:24,730
<font color="#CCCCCC">of vulnerability classes and common</font>

510
00:21:20,750 --> 00:21:28,130
methods some mapping shared memory

511
00:21:24,730 --> 00:21:30,740
setting<font color="#E5E5E5"> iokit registry properties and</font>

512
00:21:28,130 --> 00:21:33,110
<font color="#E5E5E5">also sending mesh messages so the mesh</font>

513
00:21:30,740 --> 00:21:35,930
side of things there's um<font color="#CCCCCC"> there's a big</font>

514
00:21:33,110 --> 00:21:37,580
IPC<font color="#CCCCCC"> sub system from sending messages</font>

515
00:21:35,930 --> 00:21:40,100
from like a low privileged process to a

516
00:21:37,580 --> 00:21:41,840
high privilege process across the trust

517
00:21:40,100 --> 00:21:44,060
<font color="#E5E5E5">boundaries so you can use that so kind</font>

518
00:21:41,840 --> 00:21:47,139
<font color="#E5E5E5">of like exploits higher</font><font color="#CCCCCC"> privilege</font>

519
00:21:44,060 --> 00:21:47,139
<font color="#E5E5E5">services as well</font>

520
00:21:49,000 --> 00:21:52,640
then

521
00:21:50,480 --> 00:21:55,100
so that was my utility library kind of

522
00:21:52,640 --> 00:21:57,890
<font color="#E5E5E5">underpinning the whole thing but I</font>

523
00:21:55,100 --> 00:21:59,990
needed a way of essentially pulling<font color="#E5E5E5"> out</font>

524
00:21:57,890 --> 00:22:03,440
as much<font color="#E5E5E5"> information as I could</font><font color="#CCCCCC"> to build</font>

525
00:21:59,990 --> 00:22:05,090
up the attack surface of<font color="#E5E5E5"> I orchid and so</font>

526
00:22:03,440 --> 00:22:07,940
I wanted to automate<font color="#E5E5E5"> the extraction of</font>

527
00:22:05,090 --> 00:22:10,429
the<font color="#E5E5E5"> details from the</font><font color="#CCCCCC"> KX days</font><font color="#E5E5E5"> using</font><font color="#CCCCCC"> an</font>

528
00:22:07,940 --> 00:22:12,230
Ida<font color="#E5E5E5"> Python I</font>

529
00:22:10,430 --> 00:22:15,320
I basically<font color="#E5E5E5"> scripted this up to build</font>

530
00:22:12,230 --> 00:22:17,570
like a JSON representation of the device

531
00:22:15,320 --> 00:22:19,220
driver<font color="#E5E5E5"> and</font><font color="#CCCCCC"> in that way you could got</font>

532
00:22:17,570 --> 00:22:21,770
like a visual<font color="#CCCCCC"> representation of the</font>

533
00:22:19,220 --> 00:22:23,540
device drivers attack surface and also

534
00:22:21,770 --> 00:22:27,350
<font color="#E5E5E5">it can</font><font color="#CCCCCC"> be consumed by the</font><font color="#E5E5E5"> fire and used</font>

535
00:22:23,540 --> 00:22:29,180
by the fire and I batch run that against

536
00:22:27,350 --> 00:22:30,530
all<font color="#E5E5E5"> of the</font><font color="#CCCCCC"> K X</font><font color="#E5E5E5"> T's there's quite a few</font>

537
00:22:29,180 --> 00:22:33,800
there's like<font color="#E5E5E5"> maybe a couple</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> hundred</font>

538
00:22:30,530 --> 00:22:35,800
<font color="#E5E5E5">of device</font><font color="#CCCCCC"> drivers and</font><font color="#E5E5E5"> things that you</font>

539
00:22:33,800 --> 00:22:38,570
can do to extract<font color="#E5E5E5"> this kind of the</font>

540
00:22:35,800 --> 00:22:40,750
<font color="#CCCCCC">attack surface from that</font><font color="#E5E5E5"> so that's kind</font>

541
00:22:38,570 --> 00:22:43,280
of my pipeline<font color="#E5E5E5"> of how things work</font>

542
00:22:40,750 --> 00:22:44,960
extracts that<font color="#E5E5E5"> you say</font><font color="#CCCCCC"> stack binary</font>

543
00:22:43,280 --> 00:22:48,530
<font color="#E5E5E5">analysis to extract the attack surface</font>

544
00:22:44,960 --> 00:22:51,320
in Ida Python produce some<font color="#E5E5E5"> JSON</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> then</font>

545
00:22:48,530 --> 00:22:54,770
feed that<font color="#E5E5E5"> into the</font><font color="#CCCCCC"> fuzzer</font><font color="#E5E5E5"> itself opal</font>

546
00:22:51,320 --> 00:22:55,939
robot so how do we<font color="#E5E5E5"> kind of pull these</font>

547
00:22:54,770 --> 00:22:58,340
things out well

548
00:22:55,940 --> 00:23:01,430
we what do we want to<font color="#E5E5E5"> extract Lauren to</font>

549
00:22:58,340 --> 00:23:03,320
extract them the<font color="#E5E5E5"> i/o services so the</font>

550
00:23:01,430 --> 00:23:05,390
services which<font color="#E5E5E5"> you can call under</font><font color="#CCCCCC"> each</font>

551
00:23:03,320 --> 00:23:09,830
i/o service there's a different user

552
00:23:05,390 --> 00:23:12,920
clients<font color="#E5E5E5"> which essentially</font><font color="#CCCCCC"> C++ like</font>

553
00:23:09,830 --> 00:23:15,949
classes for<font color="#E5E5E5"> for the device drivers and</font>

554
00:23:12,920 --> 00:23:18,890
<font color="#E5E5E5">things which you can instantiate within</font>

555
00:23:15,950 --> 00:23:21,830
the<font color="#E5E5E5"> kernel and there's also a number of</font>

556
00:23:18,890 --> 00:23:23,750
dispatch tables called<font color="#E5E5E5"> which are called</font>

557
00:23:21,830 --> 00:23:26,419
IO external method and<font color="#E5E5E5"> IO external</font>

558
00:23:23,750 --> 00:23:28,850
method dispatch<font color="#CCCCCC"> M which is a which</font>

559
00:23:26,420 --> 00:23:32,750
provide you with<font color="#CCCCCC"> the arguments for</font><font color="#E5E5E5"> IO</font>

560
00:23:28,850 --> 00:23:34,459
<font color="#CCCCCC">connect call and also</font><font color="#E5E5E5"> finally I'd like</font>

561
00:23:32,750 --> 00:23:37,220
to extract things<font color="#E5E5E5"> like the shared memory</font>

562
00:23:34,460 --> 00:23:41,330
mappings<font color="#CCCCCC"> if the device driver supports</font>

563
00:23:37,220 --> 00:23:43,550
or<font color="#CCCCCC"> their registry properties like if he</font>

564
00:23:41,330 --> 00:23:47,570
can say<font color="#E5E5E5"> like a string property then what</font>

565
00:23:43,550 --> 00:23:50,270
are<font color="#CCCCCC"> the string properties so the way of</font>

566
00:23:47,570 --> 00:23:54,590
<font color="#E5E5E5">doing that and that's kind of the</font>

567
00:23:50,270 --> 00:23:57,530
<font color="#E5E5E5">decidió codes algorithm for this um see</font>

568
00:23:54,590 --> 00:23:58,490
I used two methods<font color="#E5E5E5"> the</font><font color="#CCCCCC"> first way was</font>

569
00:23:57,530 --> 00:24:01,129
using

570
00:23:58,490 --> 00:24:03,410
idec's references and like kind<font color="#E5E5E5"> of code</font>

571
00:24:01,130 --> 00:24:05,929
flow tracing to basically determine<font color="#CCCCCC"> what</font>

572
00:24:03,410 --> 00:24:08,059
<font color="#CCCCCC">functions called</font><font color="#E5E5E5"> look for a symbol name</font>

573
00:24:05,929 --> 00:24:11,150
<font color="#CCCCCC">and</font><font color="#E5E5E5"> then from that symbol name walk the</font>

574
00:24:08,059 --> 00:24:14,629
graph and find out what<font color="#E5E5E5"> i'm looking</font><font color="#CCCCCC"> for</font>

575
00:24:11,150 --> 00:24:16,970
<font color="#CCCCCC">and so for example</font><font color="#E5E5E5"> for matching iOS</font>

576
00:24:14,630 --> 00:24:19,580
services then if you loop through every

577
00:24:16,970 --> 00:24:21,200
function within<font color="#CCCCCC"> the</font><font color="#E5E5E5"> code segment if it</font>

578
00:24:19,580 --> 00:24:24,740
contains new<font color="#CCCCCC"> user client</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> the name</font>

579
00:24:21,200 --> 00:24:27,110
then<font color="#E5E5E5"> it's instantiating a</font><font color="#CCCCCC"> new user</font>

580
00:24:24,740 --> 00:24:28,309
client<font color="#E5E5E5"> and</font><font color="#CCCCCC"> UI okay user client</font><font color="#E5E5E5"> and then</font>

581
00:24:27,110 --> 00:24:30,559
fire if<font color="#E5E5E5"> you look for the actor</font>

582
00:24:28,309 --> 00:24:32,510
<font color="#CCCCCC">references from that and look for type</font>

583
00:24:30,559 --> 00:24:35,629
<font color="#CCCCCC">constants</font><font color="#E5E5E5"> and that's probably a user</font>

584
00:24:32,510 --> 00:24:38,480
client<font color="#E5E5E5"> and so it was a</font><font color="#CCCCCC"> reasonably good</font>

585
00:24:35,630 --> 00:24:41,540
heuristic for matching<font color="#E5E5E5"> and these things</font>

586
00:24:38,480 --> 00:24:44,900
within the binary then same thing<font color="#CCCCCC"> with</font>

587
00:24:41,540 --> 00:24:47,710
the like<font color="#E5E5E5"> IO existing IO external method</font>

588
00:24:44,900 --> 00:24:50,870
matching as well you can do loop through

589
00:24:47,710 --> 00:24:52,640
everything in the<font color="#E5E5E5"> con segments every</font>

590
00:24:50,870 --> 00:24:54,770
line in the disassembly<font color="#E5E5E5"> look for a cross</font>

591
00:24:52,640 --> 00:24:56,630
references for the function names<font color="#E5E5E5"> that</font>

592
00:24:54,770 --> 00:25:00,290
<font color="#E5E5E5">you're looking for and in process that</font>

593
00:24:56,630 --> 00:25:03,140
table as well and that kind<font color="#E5E5E5"> of worked</font>

594
00:25:00,290 --> 00:25:05,330
okay but<font color="#E5E5E5"> and it would it would miss</font>

595
00:25:03,140 --> 00:25:06,980
<font color="#CCCCCC">certain things so I wanted to supplement</font>

596
00:25:05,330 --> 00:25:10,100
<font color="#CCCCCC">that with</font><font color="#E5E5E5"> another kind of binary</font>

597
00:25:06,980 --> 00:25:12,080
matching mechanism as well which<font color="#CCCCCC"> is just</font>

598
00:25:10,100 --> 00:25:15,350
<font color="#CCCCCC">essentially done pattern matching on</font><font color="#E5E5E5"> the</font>

599
00:25:12,080 --> 00:25:18,169
<font color="#CCCCCC">struts</font><font color="#E5E5E5"> because the compiler will</font>

600
00:25:15,350 --> 00:25:19,850
basically compile these struts and

601
00:25:18,170 --> 00:25:22,250
<font color="#E5E5E5">they're</font><font color="#CCCCCC"> hard-coded arguments into the</font>

602
00:25:19,850 --> 00:25:25,189
<font color="#E5E5E5">con section</font><font color="#CCCCCC"> of the binary</font><font color="#E5E5E5"> you can just</font>

603
00:25:22,250 --> 00:25:28,070
look for you<font color="#CCCCCC"> can loop over every line</font>

604
00:25:25,190 --> 00:25:30,470
within the<font color="#E5E5E5"> constant</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> see if the lines</font>

605
00:25:28,070 --> 00:25:32,360
<font color="#CCCCCC">a cross reference</font><font color="#E5E5E5"> to something in the</font>

606
00:25:30,470 --> 00:25:35,120
foot in the code<font color="#E5E5E5"> segment so it's a</font>

607
00:25:32,360 --> 00:25:38,719
function<font color="#CCCCCC"> pointer</font><font color="#E5E5E5"> and followed by</font><font color="#CCCCCC"> four</font>

608
00:25:35,120 --> 00:25:42,250
<font color="#E5E5E5">bit images then it's likely that it's an</font>

609
00:25:38,720 --> 00:25:44,420
<font color="#CCCCCC">IO external method dispatch struct</font><font color="#E5E5E5"> and</font>

610
00:25:42,250 --> 00:25:47,270
that's a pretty good heuristic and

611
00:25:44,420 --> 00:25:51,230
actually pulls out most of the the<font color="#CCCCCC"> IO</font>

612
00:25:47,270 --> 00:25:53,389
<font color="#E5E5E5">device driver</font><font color="#CCCCCC"> dispatch tables and this</font>

613
00:25:51,230 --> 00:25:54,770
there's a few which do their own like<font color="#E5E5E5"> do</font>

614
00:25:53,390 --> 00:25:57,590
their own thing<font color="#E5E5E5"> I don't</font><font color="#CCCCCC"> really know why</font>

615
00:25:54,770 --> 00:26:01,160
this is<font color="#E5E5E5"> but</font><font color="#CCCCCC"> an ad should kind of require</font>

616
00:25:57,590 --> 00:26:02,750
manual reverse engineering and I think

617
00:26:01,160 --> 00:26:06,200
you could probably<font color="#E5E5E5"> improve this like if</font>

618
00:26:02,750 --> 00:26:08,419
you take an account<font color="#E5E5E5"> like C++ inheritance</font>

619
00:26:06,200 --> 00:26:11,630
and<font color="#E5E5E5"> V table structure and</font><font color="#CCCCCC"> how the</font>

620
00:26:08,419 --> 00:26:15,230
compiler creates like doesn't does

621
00:26:11,630 --> 00:26:17,510
<font color="#E5E5E5">C++ but my way worked and I was kind of</font>

622
00:26:15,230 --> 00:26:20,720
in a hurry and<font color="#E5E5E5"> to find bugs so it was</font>

623
00:26:17,510 --> 00:26:25,570
<font color="#E5E5E5">good enough and</font><font color="#CCCCCC"> so what does</font><font color="#E5E5E5"> this look</font>

624
00:26:20,720 --> 00:26:28,850
like<font color="#E5E5E5"> and so he's</font><font color="#CCCCCC"> just an example of an</font>

625
00:26:25,570 --> 00:26:31,700
<font color="#E5E5E5">i/o</font><font color="#CCCCCC"> connect call method arguments being</font>

626
00:26:28,850 --> 00:26:34,129
<font color="#E5E5E5">pulled being converted to JSON and for</font>

627
00:26:31,700 --> 00:26:36,770
the Intel<font color="#CCCCCC"> accelerated driver</font><font color="#E5E5E5"> so you can</font>

628
00:26:34,130 --> 00:26:38,990
basically see for the for<font color="#E5E5E5"> the IU user</font>

629
00:26:36,770 --> 00:26:40,460
<font color="#E5E5E5">client</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> there then the different</font>

630
00:26:38,990 --> 00:26:42,920
selector numbers which<font color="#E5E5E5"> are the methods</font>

631
00:26:40,460 --> 00:26:44,660
<font color="#CCCCCC">which you can call in the</font><font color="#E5E5E5"> colonel</font><font color="#CCCCCC"> the</font>

632
00:26:42,920 --> 00:26:47,840
arguments<font color="#E5E5E5"> the number of arguments</font><font color="#CCCCCC"> it</font>

633
00:26:44,660 --> 00:26:50,390
takes the size of the data and<font color="#E5E5E5"> number of</font>

634
00:26:47,840 --> 00:26:52,699
output arguments and so on as<font color="#E5E5E5"> well and</font>

635
00:26:50,390 --> 00:26:54,980
you can<font color="#CCCCCC"> also see it pulls out things</font>

636
00:26:52,700 --> 00:27:01,730
like<font color="#E5E5E5"> the</font><font color="#CCCCCC"> shared memory mapping side of</font>

637
00:26:54,980 --> 00:27:03,380
things yeah so that's pretty good<font color="#E5E5E5"> but</font>

638
00:27:01,730 --> 00:27:05,540
there's some limitations<font color="#CCCCCC"> on what</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> can</font>

639
00:27:03,380 --> 00:27:07,610
actually do is like kind of stack the

640
00:27:05,540 --> 00:27:09,200
stack binary side like you know the size

641
00:27:07,610 --> 00:27:13,669
of<font color="#E5E5E5"> the arguments so you're going to get</font>

642
00:27:09,200 --> 00:27:15,740
and reasonably<font color="#E5E5E5"> like you're fighting</font>

643
00:27:13,670 --> 00:27:18,980
<font color="#CCCCCC">isn't good</font><font color="#E5E5E5"> get rejected</font><font color="#CCCCCC"> straightaway by</font>

644
00:27:15,740 --> 00:27:20,780
by checking<font color="#E5E5E5"> of</font><font color="#CCCCCC"> the of the number of</font>

645
00:27:18,980 --> 00:27:23,180
arguments<font color="#CCCCCC"> it's</font><font color="#E5E5E5"> gonna get into the</font>

646
00:27:20,780 --> 00:27:24,560
function at least but the<font color="#CCCCCC"> day of which</font>

647
00:27:23,180 --> 00:27:26,570
you're passing into the function<font color="#CCCCCC"> that</font>

648
00:27:24,560 --> 00:27:28,879
might not<font color="#CCCCCC"> be valid so you might not got</font>

649
00:27:26,570 --> 00:27:31,909
very<font color="#CCCCCC"> good code coverage because you did</font>

650
00:27:28,880 --> 00:27:35,540
get checked validated so really I wanted

651
00:27:31,910 --> 00:27:37,370
<font color="#E5E5E5">like a sample</font><font color="#CCCCCC"> of day two which which</font>

652
00:27:35,540 --> 00:27:39,230
would get me deeper within<font color="#CCCCCC"> the functions</font>

653
00:27:37,370 --> 00:27:44,209
and<font color="#E5E5E5"> allow me to get better code coverage</font>

654
00:27:39,230 --> 00:27:48,440
<font color="#E5E5E5">um there's also things like issues with</font>

655
00:27:44,210 --> 00:27:50,360
like kernel<font color="#CCCCCC"> CAPTCHA</font><font color="#E5E5E5"> like if you say if</font>

656
00:27:48,440 --> 00:27:52,490
you<font color="#E5E5E5"> get a kernel panic</font><font color="#CCCCCC"> and then you dump</font>

657
00:27:50,360 --> 00:27:54,889
it out from the from kernel space or you

658
00:27:52,490 --> 00:27:57,080
do your<font color="#E5E5E5"> instrumentation on the kernel</font>

659
00:27:54,890 --> 00:28:00,320
side<font color="#E5E5E5"> then I think it makes reproduction</font>

660
00:27:57,080 --> 00:28:02,000
logging actually harder so I wanted<font color="#E5E5E5"> a</font>

661
00:28:00,320 --> 00:28:04,010
way which I could capture this<font color="#E5E5E5"> from user</font>

662
00:28:02,000 --> 00:28:06,380
<font color="#CCCCCC">space as well and know that</font><font color="#E5E5E5"> I could</font>

663
00:28:04,010 --> 00:28:09,320
actually<font color="#E5E5E5"> definitely am trigger the</font>

664
00:28:06,380 --> 00:28:11,330
issues so my idea<font color="#CCCCCC"> was to use frida which</font>

665
00:28:09,320 --> 00:28:13,429
is a pretty<font color="#CCCCCC"> awesome</font><font color="#E5E5E5"> hooking framework</font><font color="#CCCCCC"> I</font>

666
00:28:11,330 --> 00:28:16,669
totally<font color="#E5E5E5"> recommend you check that</font><font color="#CCCCCC"> out if</font>

667
00:28:13,430 --> 00:28:19,520
you've not heard of<font color="#E5E5E5"> it um but yeah</font>

668
00:28:16,670 --> 00:28:21,290
<font color="#E5E5E5">essentially do some hacking create some</font>

669
00:28:19,520 --> 00:28:23,090
pickles of like the day of<font color="#CCCCCC"> which you've</font>

670
00:28:21,290 --> 00:28:25,420
captured and then feed<font color="#E5E5E5"> that into the</font>

671
00:28:23,090 --> 00:28:28,040
<font color="#CCCCCC">fuzz Oh so</font>

672
00:28:25,420 --> 00:28:30,530
so this was this was<font color="#CCCCCC"> developed using</font><font color="#E5E5E5"> two</font>

673
00:28:28,040 --> 00:28:32,080
modules there was a sniffing module so

674
00:28:30,530 --> 00:28:35,720
the sniffing module would essentially

675
00:28:32,080 --> 00:28:38,600
<font color="#E5E5E5">intercept data from user</font><font color="#CCCCCC"> space to kernel</font>

676
00:28:35,720 --> 00:28:40,850
space<font color="#E5E5E5"> dump it to disk by hooking the key</font>

677
00:28:38,600 --> 00:28:43,669
functions<font color="#E5E5E5"> and then basically pickling it</font>

678
00:28:40,850 --> 00:28:47,270
up starring and providing a persistent

679
00:28:43,670 --> 00:28:49,420
way of distributing out the these

680
00:28:47,270 --> 00:28:51,650
pickles to the different to my<font color="#E5E5E5"> father</font>

681
00:28:49,420 --> 00:28:53,450
then the<font color="#E5E5E5"> fuzzing side which is the</font>

682
00:28:51,650 --> 00:28:55,460
actual like mutation part<font color="#E5E5E5"> that we</font>

683
00:28:53,450 --> 00:28:56,930
download the<font color="#E5E5E5"> pickled there</font><font color="#CCCCCC"> if there was</font>

684
00:28:55,460 --> 00:28:59,690
some data and then<font color="#CCCCCC"> use that</font><font color="#E5E5E5"> as kind of</font>

685
00:28:56,930 --> 00:29:01,640
the base for my mutations or if the what

686
00:28:59,690 --> 00:29:03,890
if<font color="#CCCCCC"> I didn't have any data</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> example</font>

687
00:29:01,640 --> 00:29:07,010
this<font color="#E5E5E5"> I hadn't captured any then and I</font>

688
00:29:03,890 --> 00:29:09,290
would use<font color="#E5E5E5"> the JSON data the</font><font color="#CCCCCC"> state binary</font>

689
00:29:07,010 --> 00:29:11,420
side<font color="#E5E5E5"> to basically meet like pick that</font>

690
00:29:09,290 --> 00:29:15,379
<font color="#CCCCCC">there mutator and test it and</font><font color="#E5E5E5"> check</font><font color="#CCCCCC"> it</font>

691
00:29:11,420 --> 00:29:20,150
worked and so<font color="#CCCCCC"> he's just a quick</font><font color="#E5E5E5"> example</font>

692
00:29:15,380 --> 00:29:22,610
of<font color="#CCCCCC"> hooking</font><font color="#E5E5E5"> I connect call method in</font>

693
00:29:20,150 --> 00:29:23,960
<font color="#E5E5E5">Frieda it's like like say it's really</font>

694
00:29:22,610 --> 00:29:27,290
easy<font color="#CCCCCC"> to</font><font color="#E5E5E5"> use it</font><font color="#CCCCCC"> allows you to</font><font color="#E5E5E5"> write</font>

695
00:29:23,960 --> 00:29:29,180
JavaScript<font color="#E5E5E5"> to hook</font><font color="#CCCCCC"> see functions</font>

696
00:29:27,290 --> 00:29:32,020
<font color="#E5E5E5">obviously injects</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> JavaScript</font>

697
00:29:29,180 --> 00:29:35,240
<font color="#E5E5E5">interpreter in so this is just attaching</font>

698
00:29:32,020 --> 00:29:37,879
to the to the function name<font color="#E5E5E5"> finding the</font>

699
00:29:35,240 --> 00:29:40,130
exported symbol and<font color="#E5E5E5"> then getting access</font>

700
00:29:37,880 --> 00:29:42,800
to the arguments<font color="#E5E5E5"> I'm being able to dump</font>

701
00:29:40,130 --> 00:29:44,210
<font color="#E5E5E5">out the arguments and so on and I</font><font color="#CCCCCC"> use</font>

702
00:29:42,800 --> 00:29:46,399
<font color="#E5E5E5">pretty quite a lot for mobile</font>

703
00:29:44,210 --> 00:29:50,690
assessments so it's quite familiar<font color="#CCCCCC"> with</font>

704
00:29:46,400 --> 00:29:54,830
the<font color="#CCCCCC"> API and there are some challenges</font>

705
00:29:50,690 --> 00:29:57,800
<font color="#CCCCCC">with this though because some of</font><font color="#E5E5E5"> the</font>

706
00:29:54,830 --> 00:29:59,689
like<font color="#CCCCCC"> io service handles and</font><font color="#E5E5E5"> mesh ports</font>

707
00:29:57,800 --> 00:30:03,200
they're<font color="#E5E5E5"> essentially like a peg to</font><font color="#CCCCCC"> the</font>

708
00:29:59,690 --> 00:30:06,020
process<font color="#E5E5E5"> itself so if you take</font><font color="#CCCCCC"> Iowa</font>

709
00:30:03,200 --> 00:30:07,550
<font color="#CCCCCC">Service reference mesh</font><font color="#E5E5E5"> part from one</font>

710
00:30:06,020 --> 00:30:10,879
process and<font color="#CCCCCC"> then move it into</font><font color="#E5E5E5"> another</font>

711
00:30:07,550 --> 00:30:14,180
<font color="#E5E5E5">process it won't really be valid because</font>

712
00:30:10,880 --> 00:30:15,680
<font color="#E5E5E5">it's not a valid kind of handle but so</font>

713
00:30:14,180 --> 00:30:17,980
the way I got<font color="#E5E5E5"> around that was just do</font>

714
00:30:15,680 --> 00:30:21,830
even more hooking<font color="#E5E5E5"> and basically create</font>

715
00:30:17,980 --> 00:30:24,560
like a lookup table to kind<font color="#CCCCCC"> of like</font>

716
00:30:21,830 --> 00:30:27,439
track the creation of handles and mesh

717
00:30:24,560 --> 00:30:29,300
parts<font color="#E5E5E5"> and basically map them back to how</font>

718
00:30:27,440 --> 00:30:31,250
they were<font color="#CCCCCC"> created and then that way my</font>

719
00:30:29,300 --> 00:30:33,800
father could reproduce the steps and

720
00:30:31,250 --> 00:30:37,179
basically reproduce the<font color="#E5E5E5"> the exact kind</font>

721
00:30:33,800 --> 00:30:42,980
<font color="#E5E5E5">of flow of yeah after going there</font>

722
00:30:37,179 --> 00:30:44,929
<font color="#E5E5E5">a quick</font><font color="#CCCCCC"> example of this is that</font><font color="#E5E5E5"> so he's</font>

723
00:30:42,980 --> 00:30:49,039
another hook on the iOS service<font color="#E5E5E5"> open</font>

724
00:30:44,929 --> 00:30:53,000
method<font color="#E5E5E5"> which essentially resolves the</font>

725
00:30:49,039 --> 00:30:54,799
<font color="#E5E5E5">the class</font><font color="#CCCCCC"> brenton looks at the</font><font color="#E5E5E5"> class</font><font color="#CCCCCC"> of</font>

726
00:30:53,000 --> 00:30:58,970
<font color="#CCCCCC">runtimes and</font><font color="#E5E5E5"> you know what device driver</font>

727
00:30:54,799 --> 00:31:00,289
<font color="#E5E5E5">and well all were calling processes</font><font color="#CCCCCC"> what</font>

728
00:30:58,970 --> 00:31:02,980
service has been opened

729
00:31:00,289 --> 00:31:07,280
then when the function returns then and

730
00:31:02,980 --> 00:31:10,130
<font color="#E5E5E5">I essentially read out the data from the</font>

731
00:31:07,280 --> 00:31:12,408
<font color="#E5E5E5">the hand check put it in my map and in</font>

732
00:31:10,130 --> 00:31:16,309
that way I've got<font color="#CCCCCC"> a lookup</font><font color="#E5E5E5"> of handles so</font>

733
00:31:12,409 --> 00:31:19,039
yeah<font color="#CCCCCC"> and so what</font><font color="#E5E5E5"> does this look like</font>

734
00:31:16,309 --> 00:31:20,870
this<font color="#E5E5E5"> basically allows like builds up a</font>

735
00:31:19,039 --> 00:31:23,299
bunch of pickles of the attack surface

736
00:31:20,870 --> 00:31:25,760
you can<font color="#E5E5E5"> see this like things for the</font>

737
00:31:23,299 --> 00:31:28,070
different<font color="#E5E5E5"> iokit services</font><font color="#CCCCCC"> apple key star</font>

738
00:31:25,760 --> 00:31:30,679
<font color="#CCCCCC">IO Bluetooth controller</font><font color="#E5E5E5"> I was surface</font>

739
00:31:28,070 --> 00:31:34,070
etc<font color="#CCCCCC"> and I'm getting a reasonably decent</font>

740
00:31:30,679 --> 00:31:36,320
<font color="#E5E5E5">and sample size like if you look at say</font>

741
00:31:34,070 --> 00:31:38,600
the selected numbers<font color="#E5E5E5"> and what methods</font>

742
00:31:36,320 --> 00:31:42,200
are being capturing to the<font color="#E5E5E5"> see the</font>

743
00:31:38,600 --> 00:31:44,928
hooking and just a quick<font color="#E5E5E5"> example as well</font>

744
00:31:42,200 --> 00:31:47,450
of that's just<font color="#CCCCCC"> a pickle of me starting</font>

745
00:31:44,929 --> 00:31:49,250
the day or<font color="#E5E5E5"> on</font><font color="#CCCCCC"> disk which has been</font>

746
00:31:47,450 --> 00:31:51,549
captured from<font color="#CCCCCC"> the air from the hooking</font>

747
00:31:49,250 --> 00:31:51,549
as well

748
00:31:55,910 --> 00:32:01,670
so the problem with<font color="#CCCCCC"> that</font><font color="#E5E5E5"> is that when</font>

749
00:31:58,560 --> 00:32:06,149
<font color="#CCCCCC">you</font><font color="#E5E5E5"> run a process on Marcos that</font>

750
00:32:01,670 --> 00:32:08,670
essentially it'll open similar like

751
00:32:06,150 --> 00:32:10,470
similar<font color="#E5E5E5"> connections to the</font><font color="#CCCCCC"> iokit drivers</font>

752
00:32:08,670 --> 00:32:14,280
every time<font color="#E5E5E5"> it'll open up a connection to</font>

753
00:32:10,470 --> 00:32:16,410
the to the<font color="#E5E5E5"> Intel accelerates the windows</font>

754
00:32:14,280 --> 00:32:20,190
manager and so on there isn't really

755
00:32:16,410 --> 00:32:21,750
that<font color="#CCCCCC"> much variation</font><font color="#E5E5E5"> of of the day to</font>

756
00:32:20,190 --> 00:32:23,430
which you're capturing and really you

757
00:32:21,750 --> 00:32:25,290
want to extend<font color="#E5E5E5"> is like capture as much</font>

758
00:32:23,430 --> 00:32:27,960
data as<font color="#CCCCCC"> you can to</font><font color="#E5E5E5"> get as much of the</font>

759
00:32:25,290 --> 00:32:30,750
attack surface<font color="#CCCCCC"> fuzzing</font><font color="#E5E5E5"> so what I did was</font>

760
00:32:27,960 --> 00:32:32,280
um I<font color="#E5E5E5"> wrote some like I was thinking</font>

761
00:32:30,750 --> 00:32:33,270
<font color="#CCCCCC">about this like</font><font color="#E5E5E5"> how could I do this</font><font color="#CCCCCC"> I</font>

762
00:32:32,280 --> 00:32:35,250
could<font color="#CCCCCC"> just sit in front</font><font color="#E5E5E5"> of my computer</font>

763
00:32:33,270 --> 00:32:37,470
and<font color="#E5E5E5"> then hook things then use it but</font>

764
00:32:35,250 --> 00:32:39,510
<font color="#E5E5E5">that's pretty like time consuming and</font>

765
00:32:37,470 --> 00:32:41,010
like a bit of<font color="#CCCCCC"> a pain</font><font color="#E5E5E5"> shift like go</font>

766
00:32:39,510 --> 00:32:43,710
through<font color="#CCCCCC"> all the menus</font><font color="#E5E5E5"> and stuff and it's</font>

767
00:32:41,010 --> 00:32:45,540
just<font color="#E5E5E5"> like it's</font><font color="#CCCCCC"> not very cool</font><font color="#E5E5E5"> so instead</font>

768
00:32:43,710 --> 00:32:47,820
<font color="#CCCCCC">I just</font><font color="#E5E5E5"> brought some UI automation to</font>

769
00:32:45,540 --> 00:32:50,639
just click click<font color="#E5E5E5"> buttons like slide</font>

770
00:32:47,820 --> 00:32:54,540
stuff<font color="#E5E5E5"> and just generally just dealers</font>

771
00:32:50,640 --> 00:32:56,430
crazy<font color="#CCCCCC"> shirt with the UI</font><font color="#E5E5E5"> and yeah and</font>

772
00:32:54,540 --> 00:32:59,970
they capture and that allows you to

773
00:32:56,430 --> 00:33:03,890
<font color="#E5E5E5">capture</font><font color="#CCCCCC"> as much data as possible</font><font color="#E5E5E5"> and so</font>

774
00:32:59,970 --> 00:33:06,450
things like the like<font color="#CCCCCC"> quicktime FaceTime</font>

775
00:33:03,890 --> 00:33:09,990
like the settings up they<font color="#E5E5E5"> basically</font>

776
00:33:06,450 --> 00:33:11,850
generate loads<font color="#CCCCCC"> if</font><font color="#E5E5E5"> yeah they basically</font>

777
00:33:09,990 --> 00:33:15,870
<font color="#E5E5E5">generate loads of different</font><font color="#CCCCCC"> traffic's so</font>

778
00:33:11,850 --> 00:33:17,610
um<font color="#E5E5E5"> but the problem is as well that you</font>

779
00:33:15,870 --> 00:33:19,560
need to make sure the blacklist<font color="#E5E5E5"> certain</font>

780
00:33:17,610 --> 00:33:22,080
UI calls<font color="#E5E5E5"> because you don't really want</font>

781
00:33:19,560 --> 00:33:23,669
the<font color="#E5E5E5"> the VM shutting down like business</font>

782
00:33:22,080 --> 00:33:24,750
<font color="#E5E5E5">doing loads of crazy actions like it</font>

783
00:33:23,670 --> 00:33:30,320
just goes off and then<font color="#E5E5E5"> you've got no</font>

784
00:33:24,750 --> 00:33:33,810
captures<font color="#E5E5E5"> you like</font><font color="#CCCCCC"> migrate</font><font color="#E5E5E5"> right yeah</font><font color="#CCCCCC"> so</font>

785
00:33:30,320 --> 00:33:35,850
the mutation side<font color="#E5E5E5"> you basically got all</font>

786
00:33:33,810 --> 00:33:38,580
of this<font color="#CCCCCC"> data you've got your static</font>

787
00:33:35,850 --> 00:33:40,860
binary analysis scripts and well<font color="#E5E5E5"> they</font>

788
00:33:38,580 --> 00:33:44,010
<font color="#CCCCCC">static binary</font><font color="#E5E5E5"> analysis JSON</font><font color="#CCCCCC"> you've got</font>

789
00:33:40,860 --> 00:33:46,500
the the pickled<font color="#CCCCCC"> dates</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> won't</font><font color="#E5E5E5"> feed it</font>

790
00:33:44,010 --> 00:33:48,990
to your<font color="#CCCCCC"> files</font><font color="#E5E5E5"> now so basically choosing</font>

791
00:33:46,500 --> 00:33:51,960
<font color="#E5E5E5">the the pickled data or choosing the</font>

792
00:33:48,990 --> 00:33:54,180
JSON data mutating it and then finally

793
00:33:51,960 --> 00:33:56,700
making<font color="#E5E5E5"> the call as you as you do with</font>

794
00:33:54,180 --> 00:33:59,250
<font color="#E5E5E5">any photo really I also implemented</font>

795
00:33:56,700 --> 00:34:00,810
support for leak detection as well<font color="#E5E5E5"> so</font>

796
00:33:59,250 --> 00:34:04,200
all the<font color="#E5E5E5"> data which is</font><font color="#CCCCCC"> coming</font><font color="#E5E5E5"> back from</font>

797
00:34:00,810 --> 00:34:06,480
<font color="#E5E5E5">kernel space</font><font color="#CCCCCC"> to user space</font><font color="#E5E5E5"> it's possible</font>

798
00:34:04,200 --> 00:34:08,399
kernel pointers will be leaked<font color="#E5E5E5"> and then</font>

799
00:34:06,480 --> 00:34:11,069
you<font color="#CCCCCC"> could use those to</font><font color="#E5E5E5"> find chaos</font>

800
00:34:08,399 --> 00:34:12,980
bypasses<font color="#CCCCCC"> or other kind</font><font color="#E5E5E5"> of kernel memory</font>

801
00:34:11,069 --> 00:34:18,299
<font color="#E5E5E5">leaks which will be useful</font><font color="#CCCCCC"> for</font>

802
00:34:12,980 --> 00:34:21,029
<font color="#E5E5E5">exploitation</font><font color="#CCCCCC"> yeah</font><font color="#E5E5E5"> um the architecture is</font>

803
00:34:18,299 --> 00:34:25,859
pretty much the same as the as James

804
00:34:21,029 --> 00:34:28,260
described<font color="#E5E5E5"> however I was using like I was</font>

805
00:34:25,859 --> 00:34:30,659
scaling<font color="#E5E5E5"> out the JSON the pickles to my</font>

806
00:34:28,260 --> 00:34:33,569
different<font color="#E5E5E5"> upper robot instances and</font><font color="#CCCCCC"> then</font>

807
00:34:30,659 --> 00:34:35,760
<font color="#E5E5E5">that way that was shared between all my</font>

808
00:34:33,569 --> 00:34:37,649
<font color="#CCCCCC">different VMs</font><font color="#E5E5E5"> so I could have some vm's</font>

809
00:34:35,760 --> 00:34:40,289
doing sniffing something like data

810
00:34:37,649 --> 00:34:42,899
capture<font color="#CCCCCC"> and other VMs doing mutation and</font>

811
00:34:40,289 --> 00:34:46,619
basically increase in my my<font color="#E5E5E5"> data sets</font>

812
00:34:42,899 --> 00:34:48,328
and<font color="#E5E5E5"> yeah mutation and then finally</font>

813
00:34:46,619 --> 00:34:52,230
feeding all the<font color="#E5E5E5"> repos back to my</font>

814
00:34:48,329 --> 00:34:55,859
database<font color="#E5E5E5"> and cycle to triage and logging</font>

815
00:34:52,230 --> 00:34:58,289
<font color="#E5E5E5">and so on so what did what</font><font color="#CCCCCC"> did it find</font>

816
00:34:55,859 --> 00:35:03,299
like and how do these<font color="#E5E5E5"> fuzzies kind of</font>

817
00:34:58,289 --> 00:35:05,940
compare at the moment and the<font color="#E5E5E5"> so OSX</font>

818
00:35:03,299 --> 00:35:09,089
fuzz like it's found quite<font color="#E5E5E5"> a few use</font>

819
00:35:05,940 --> 00:35:12,569
<font color="#CCCCCC">after phrase</font><font color="#E5E5E5"> it's found a number of heap</font>

820
00:35:09,089 --> 00:35:14,279
of flows<font color="#CCCCCC"> and</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> kind</font><font color="#E5E5E5"> of expected that</font>

821
00:35:12,569 --> 00:35:17,910
<font color="#E5E5E5">because the design choices which were</font>

822
00:35:14,279 --> 00:35:20,849
made with<font color="#CCCCCC"> OSX fuzz</font><font color="#E5E5E5"> like the way it was</font>

823
00:35:17,910 --> 00:35:22,740
kind<font color="#E5E5E5"> of like reusing essentially</font>

824
00:35:20,849 --> 00:35:24,809
descriptors<font color="#CCCCCC"> and then</font><font color="#E5E5E5"> freeing memory and</font>

825
00:35:22,740 --> 00:35:26,250
then using<font color="#CCCCCC"> it again it was kind of yeah</font>

826
00:35:24,809 --> 00:35:29,250
that was kind<font color="#CCCCCC"> of a common vulnerability</font>

827
00:35:26,250 --> 00:35:30,900
pattern with the fuzzy and<font color="#CCCCCC"> open robot</font>

828
00:35:29,250 --> 00:35:32,250
<font color="#E5E5E5">also found like similar issues but it</font>

829
00:35:30,900 --> 00:35:35,010
was finding some<font color="#CCCCCC"> interesting stuff with</font>

830
00:35:32,250 --> 00:35:38,309
<font color="#CCCCCC">like uninitialized memory</font><font color="#E5E5E5"> like being</font>

831
00:35:35,010 --> 00:35:41,039
used<font color="#E5E5E5"> as like a function point a call</font>

832
00:35:38,309 --> 00:35:42,960
yeah within kernel space<font color="#CCCCCC"> I also found a</font>

833
00:35:41,039 --> 00:35:45,089
<font color="#CCCCCC">number</font><font color="#E5E5E5"> of issues with</font><font color="#CCCCCC"> them</font><font color="#E5E5E5"> the i/o</font>

834
00:35:42,960 --> 00:35:48,809
registry as well with like writable<font color="#E5E5E5"> i/o</font>

835
00:35:45,089 --> 00:35:50,849
registry properties and so the issues

836
00:35:48,809 --> 00:35:52,500
which have<font color="#CCCCCC"> been fixed</font><font color="#E5E5E5"> so far I've got</font><font color="#CCCCCC"> CV</font>

837
00:35:50,849 --> 00:35:54,510
numbers on there there's still<font color="#CCCCCC"> a few</font>

838
00:35:52,500 --> 00:35:57,450
which are<font color="#E5E5E5"> like outstanding or ones I</font>

839
00:35:54,510 --> 00:35:58,920
<font color="#E5E5E5">haven't</font><font color="#CCCCCC"> triaged yet</font><font color="#E5E5E5"> so so they should be</font>

840
00:35:57,450 --> 00:36:01,558
<font color="#E5E5E5">coming up within the</font><font color="#CCCCCC"> next kind</font><font color="#E5E5E5"> of patch</font>

841
00:35:58,920 --> 00:36:03,150
releases and when I get<font color="#CCCCCC"> around to watch</font>

842
00:36:01,559 --> 00:36:07,650
the<font color="#E5E5E5"> triage and stuff because I'm quite</font>

843
00:36:03,150 --> 00:36:10,829
slow at doing<font color="#CCCCCC"> that so yeah</font><font color="#E5E5E5"> I'm so yeah</font>

844
00:36:07,650 --> 00:36:13,200
basically the<font color="#E5E5E5"> Cisco fuzzy</font><font color="#CCCCCC"> like it's good</font>

845
00:36:10,829 --> 00:36:16,170
for years after freeze in the car<font color="#E5E5E5"> new</font>

846
00:36:13,200 --> 00:36:20,819
kernel code<font color="#E5E5E5"> in the open source new code</font>

847
00:36:16,170 --> 00:36:21,990
and yeah the i/o kit is<font color="#E5E5E5"> still a pretty</font>

848
00:36:20,819 --> 00:36:25,200
<font color="#CCCCCC">good source of bugs</font>

849
00:36:21,990 --> 00:36:29,279
like<font color="#E5E5E5"> Apple have gone to a lot of extent</font>

850
00:36:25,200 --> 00:36:31,470
now to introduce entitlements on on the

851
00:36:29,280 --> 00:36:33,119
<font color="#CCCCCC">iokit drivers to basically reduce the</font>

852
00:36:31,470 --> 00:36:35,910
<font color="#CCCCCC">attack surface and prevent you from</font>

853
00:36:33,119 --> 00:36:39,090
speaking<font color="#E5E5E5"> to</font><font color="#CCCCCC"> Iowa</font><font color="#E5E5E5"> cab drivers but if you</font>

854
00:36:35,910 --> 00:36:40,410
can either bypass the entitlements<font color="#CCCCCC"> hit</font>

855
00:36:39,090 --> 00:36:42,240
<font color="#E5E5E5">things which are protected by</font>

856
00:36:40,410 --> 00:36:45,750
entitlements then you can<font color="#E5E5E5"> possibly find</font>

857
00:36:42,240 --> 00:36:47,640
bugs<font color="#E5E5E5"> in those it's also really important</font>

858
00:36:45,750 --> 00:36:51,030
when<font color="#E5E5E5"> you're fuzzing as well to focus on</font>

859
00:36:47,640 --> 00:36:53,759
like new areas<font color="#E5E5E5"> so things like when new</font>

860
00:36:51,030 --> 00:36:57,420
<font color="#E5E5E5">sis calls are added or when new</font>

861
00:36:53,760 --> 00:36:59,940
functionality is added to<font color="#CCCCCC"> a now ass so</font>

862
00:36:57,420 --> 00:37:01,560
for<font color="#CCCCCC"> example with with Exxon you like</font>

863
00:36:59,940 --> 00:37:03,780
business<font color="#E5E5E5"> open</font><font color="#CCCCCC"> source you</font><font color="#E5E5E5"> can differ</font>

864
00:37:01,560 --> 00:37:05,490
<font color="#E5E5E5">against the previous version</font><font color="#CCCCCC"> you can</font><font color="#E5E5E5"> see</font>

865
00:37:03,780 --> 00:37:07,110
what's being added<font color="#E5E5E5"> and then you can feed</font>

866
00:37:05,490 --> 00:37:07,529
that<font color="#E5E5E5"> information</font><font color="#CCCCCC"> into</font><font color="#E5E5E5"> develop in your</font>

867
00:37:07,110 --> 00:37:09,869
<font color="#E5E5E5">Pfizer</font>

868
00:37:07,530 --> 00:37:12,630
<font color="#CCCCCC">an adding like new functionality to hit</font>

869
00:37:09,869 --> 00:37:15,930
the new areas<font color="#E5E5E5"> and so code review</font>

870
00:37:12,630 --> 00:37:18,330
definitely helped me<font color="#E5E5E5"> from like with the</font>

871
00:37:15,930 --> 00:37:20,129
<font color="#E5E5E5">Apple open source stuff</font><font color="#CCCCCC"> basically helped</font>

872
00:37:18,330 --> 00:37:23,490
me focus<font color="#CCCCCC"> on some</font><font color="#E5E5E5"> of the new like new</font>

873
00:37:20,130 --> 00:37:25,530
<font color="#CCCCCC">syscalls for example awesome just</font>

874
00:37:23,490 --> 00:37:27,770
scaling<font color="#CCCCCC"> Marcus is more challenging like</font>

875
00:37:25,530 --> 00:37:31,170
some windows like there's been<font color="#E5E5E5"> a lot</font><font color="#CCCCCC"> of</font>

876
00:37:27,770 --> 00:37:32,730
like talks on scaling up windows<font color="#CCCCCC"> and</font>

877
00:37:31,170 --> 00:37:35,910
cloud support and stuff and you<font color="#E5E5E5"> don't</font>

878
00:37:32,730 --> 00:37:37,109
really<font color="#E5E5E5"> have that with macros and so what</font>

879
00:37:35,910 --> 00:37:39,270
do we<font color="#E5E5E5"> want to do in</font><font color="#CCCCCC"> future well</font>

880
00:37:37,109 --> 00:37:39,450
basically<font color="#E5E5E5"> we want</font><font color="#CCCCCC"> to scale it</font><font color="#E5E5E5"> up even</font>

881
00:37:39,270 --> 00:37:41,690
more

882
00:37:39,450 --> 00:37:46,770
<font color="#E5E5E5">we were thinking</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> investigating and</font>

883
00:37:41,690 --> 00:37:48,869
like like constraint solving or like

884
00:37:46,770 --> 00:37:52,410
<font color="#E5E5E5">Khan</font><font color="#CCCCCC"> Kollek execution or any other kind</font>

885
00:37:48,869 --> 00:37:55,619
of more mathematical ways of fuzzing<font color="#E5E5E5"> to</font>

886
00:37:52,410 --> 00:37:57,330
kind of explore more code paths and

887
00:37:55,619 --> 00:37:59,400
things but<font color="#E5E5E5"> right now it wasn't really</font>

888
00:37:57,330 --> 00:38:03,569
<font color="#CCCCCC">necessary because we like finding bugs</font>

889
00:37:59,400 --> 00:38:07,050
<font color="#E5E5E5">even just like</font><font color="#CCCCCC"> dunno I guess</font><font color="#E5E5E5"> so and the</font>

890
00:38:03,570 --> 00:38:09,869
I also would<font color="#E5E5E5"> like</font><font color="#CCCCCC"> to explore iOS</font>

891
00:38:07,050 --> 00:38:12,000
integration as well<font color="#E5E5E5"> and like port</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> my</font>

892
00:38:09,869 --> 00:38:13,980
<font color="#E5E5E5">photos across to the mobile platform and</font>

893
00:38:12,000 --> 00:38:17,040
seeing what are these issues<font color="#CCCCCC"> affect</font><font color="#E5E5E5"> iOS</font>

894
00:38:13,980 --> 00:38:20,010
and I've also recently<font color="#E5E5E5"> written some</font>

895
00:38:17,040 --> 00:38:22,109
coding which would target the IPC

896
00:38:20,010 --> 00:38:23,820
subsystem because there's quite<font color="#CCCCCC"> a lot of</font>

897
00:38:22,109 --> 00:38:26,819
services you can<font color="#E5E5E5"> hit higher</font><font color="#CCCCCC"> privileged</font>

898
00:38:23,820 --> 00:38:28,740
services which can<font color="#CCCCCC"> get from so a low</font>

899
00:38:26,820 --> 00:38:30,359
<font color="#CCCCCC">privileged service can send messages to</font>

900
00:38:28,740 --> 00:38:32,520
<font color="#CCCCCC">a high privilege service</font><font color="#E5E5E5"> across</font><font color="#CCCCCC"> the</font>

901
00:38:30,359 --> 00:38:33,600
trust boundary<font color="#E5E5E5"> and then if you exploit</font>

902
00:38:32,520 --> 00:38:36,900
<font color="#E5E5E5">those you can elevate</font>

903
00:38:33,600 --> 00:38:38,460
privileges and we also need<font color="#E5E5E5"> to do</font><font color="#CCCCCC"> more</font>

904
00:38:36,900 --> 00:38:40,290
work on<font color="#E5E5E5"> the code coverage and feedback</font>

905
00:38:38,460 --> 00:38:42,480
side<font color="#E5E5E5"> because right now we've got the</font>

906
00:38:40,290 --> 00:38:45,090
code coverage<font color="#CCCCCC"> data</font><font color="#E5E5E5"> but we need to make</font>

907
00:38:42,480 --> 00:38:47,480
best usage of of this to drive the

908
00:38:45,090 --> 00:38:50,400
fuzzer and provide the feedback Sam<font color="#E5E5E5"> and</font>

909
00:38:47,480 --> 00:38:53,490
I want<font color="#CCCCCC"> to</font><font color="#E5E5E5"> open source as much</font><font color="#CCCCCC"> of this as</font>

910
00:38:50,400 --> 00:38:58,770
<font color="#CCCCCC">possible so</font><font color="#E5E5E5"> um I'm gonna start off by</font>

911
00:38:53,490 --> 00:39:01,439
releasing my<font color="#E5E5E5"> siphon I okay</font><font color="#CCCCCC"> dry IO</font><font color="#E5E5E5"> kick</font>

912
00:38:58,770 --> 00:39:05,490
code and to make<font color="#E5E5E5"> it like quick to write</font>

913
00:39:01,440 --> 00:39:08,220
<font color="#E5E5E5">I okay and rising</font><font color="#CCCCCC"> our i/o</font><font color="#E5E5E5"> communication</font>

914
00:39:05,490 --> 00:39:11,009
type<font color="#CCCCCC"> of stuff we're also gonna</font><font color="#E5E5E5"> release</font>

915
00:39:08,220 --> 00:39:13,379
an updated version of OS X was which<font color="#CCCCCC"> is</font>

916
00:39:11,010 --> 00:39:16,140
built on<font color="#E5E5E5"> the Windows kernel</font><font color="#CCCCCC"> Faiza</font><font color="#E5E5E5"> so</font>

917
00:39:13,380 --> 00:39:20,750
those should<font color="#E5E5E5"> be available at at our</font>

918
00:39:16,140 --> 00:39:23,430
github<font color="#E5E5E5"> and it github /m due to our labs</font>

919
00:39:20,750 --> 00:39:25,800
<font color="#E5E5E5">and</font><font color="#CCCCCC"> also just</font><font color="#E5E5E5"> like</font><font color="#CCCCCC"> I say thanks to all</font>

920
00:39:23,430 --> 00:39:27,870
<font color="#E5E5E5">the people who have done work in this</font>

921
00:39:25,800 --> 00:39:30,750
area previously<font color="#CCCCCC"> as well</font><font color="#E5E5E5"> like I</font><font color="#CCCCCC"> always</font>

922
00:39:27,870 --> 00:39:32,069
kind of<font color="#CCCCCC"> knew it Marko's I come from a</font>

923
00:39:30,750 --> 00:39:34,170
Windows background I've been doing

924
00:39:32,070 --> 00:39:36,240
windows from like a long time so it's

925
00:39:34,170 --> 00:39:38,670
taken a while<font color="#CCCCCC"> to get up to speed on am</font>

926
00:39:36,240 --> 00:39:41,250
unlike us and learn<font color="#E5E5E5"> about it and</font><font color="#CCCCCC"> learn</font>

927
00:39:38,670 --> 00:39:43,710
<font color="#E5E5E5">the internal type side of things so some</font>

928
00:39:41,250 --> 00:39:46,740
of<font color="#E5E5E5"> the people like E&P embarrassed and</font>

929
00:39:43,710 --> 00:39:50,160
<font color="#E5E5E5">loads of good bug hunting for project</font>

930
00:39:46,740 --> 00:39:53,120
zero<font color="#E5E5E5"> like</font><font color="#CCCCCC"> mini lead has spoke a parsec</font>

931
00:39:50,160 --> 00:39:54,810
about doing kernel fising but from I am

932
00:39:53,120 --> 00:39:57,330
but from a slightly<font color="#CCCCCC"> different</font>

933
00:39:54,810 --> 00:39:59,520
perspective<font color="#E5E5E5"> and then there's been</font>

934
00:39:57,330 --> 00:40:02,190
numerous talks previously on<font color="#CCCCCC"> i/o kit as</font>

935
00:39:59,520 --> 00:40:04,140
<font color="#CCCCCC">well like of the last like six years</font><font color="#E5E5E5"> or</font>

936
00:40:02,190 --> 00:40:07,590
something<font color="#CCCCCC"> and then finally there was</font><font color="#E5E5E5"> a</font>

937
00:40:04,140 --> 00:40:09,150
Python talk as well about<font color="#E5E5E5"> how sex but</font>

938
00:40:07,590 --> 00:40:13,260
which there was no code release from

939
00:40:09,150 --> 00:40:15,440
yeah<font color="#CCCCCC"> and that's it ready</font><font color="#E5E5E5"> so are there</font>

940
00:40:13,260 --> 00:40:15,440
any questions

941
00:40:17,260 --> 00:40:36,619
[Music]

