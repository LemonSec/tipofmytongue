1
00:00:00,030 --> 00:00:10,799
good<font color="#CCCCCC"> evening hope you're well fed</font><font color="#E5E5E5"> and</font>

2
00:00:03,270 --> 00:00:14,370
<font color="#E5E5E5">well caffeinated and well</font><font color="#CCCCCC"> alcohol I am</font><font color="#E5E5E5"> I</font>

3
00:00:10,800 --> 00:00:17,070
had some<font color="#E5E5E5"> gin earlier</font><font color="#CCCCCC"> okay so</font><font color="#E5E5E5"> getting</font>

4
00:00:14,370 --> 00:00:19,680
settled in will get<font color="#E5E5E5"> you will get begun</font>

5
00:00:17,070 --> 00:00:21,689
in a couple<font color="#E5E5E5"> of minutes</font>

6
00:00:19,680 --> 00:00:24,900
<font color="#CCCCCC">a quick check</font><font color="#E5E5E5"> I hope you can read the</font>

7
00:00:21,689 --> 00:00:27,740
text<font color="#E5E5E5"> at the back if not you're welcome</font>

8
00:00:24,900 --> 00:00:27,740
to<font color="#CCCCCC"> set up</font><font color="#E5E5E5"> front</font><font color="#CCCCCC"> o</font>

9
00:00:28,340 --> 00:00:36,120
<font color="#E5E5E5">clothes</font><font color="#CCCCCC"> Network</font><font color="#E5E5E5"> we sorry I'm not able to</font>

10
00:00:32,130 --> 00:00:37,920
bridge it to the 44<font color="#CCCCCC"> con Wi-Fi so for</font>

11
00:00:36,120 --> 00:00:40,649
these couple of hours let's suffer

12
00:00:37,920 --> 00:00:44,370
<font color="#CCCCCC">without internet access is that if</font>

13
00:00:40,649 --> 00:00:47,700
that's<font color="#CCCCCC"> comfortable</font><font color="#E5E5E5"> with you</font><font color="#CCCCCC"> either of</font>

14
00:00:44,370 --> 00:00:52,140
the<font color="#E5E5E5"> two SSIDs</font><font color="#CCCCCC"> exploit</font><font color="#E5E5E5"> lab 2.4 or exploit</font>

15
00:00:47,700 --> 00:00:57,629
lab<font color="#E5E5E5"> 5</font><font color="#CCCCCC"> password</font><font color="#E5E5E5"> is make security great</font>

16
00:00:52,140 --> 00:01:03,840
again<font color="#CCCCCC"> I'm just</font><font color="#E5E5E5"> gonna put up a class web</font>

17
00:00:57,629 --> 00:01:06,570
server for the for the workshop when you

18
00:01:03,840 --> 00:01:11,310
get connected<font color="#E5E5E5"> the IP</font><font color="#CCCCCC"> address is 10.50</font>

19
00:01:06,570 --> 00:01:14,990
dot<font color="#CCCCCC"> 1.1 85 you</font><font color="#E5E5E5"> pop up the home page you</font>

20
00:01:11,310 --> 00:01:17,070
should<font color="#E5E5E5"> see a tools icon or a tools link</font>

21
00:01:14,990 --> 00:01:20,669
<font color="#E5E5E5">except there</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> no tools but there's</font>

22
00:01:17,070 --> 00:01:24,600
<font color="#CCCCCC">just the slides</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> download</font><font color="#E5E5E5"> the PDF of</font>

23
00:01:20,670 --> 00:01:29,040
<font color="#CCCCCC">the slides and as you're also getting</font>

24
00:01:24,600 --> 00:01:31,979
settled in once you've connected as a

25
00:01:29,040 --> 00:01:35,579
network I will let you<font color="#CCCCCC"> know what we need</font>

26
00:01:31,979 --> 00:01:37,560
<font color="#E5E5E5">to</font><font color="#CCCCCC"> do to access the targets</font><font color="#E5E5E5"> these are</font>

27
00:01:35,579 --> 00:01:39,149
two<font color="#E5E5E5"> little</font><font color="#CCCCCC"> raspberry pi</font><font color="#E5E5E5"> sitting in the</font>

28
00:01:37,560 --> 00:01:44,759
<font color="#E5E5E5">corner that will be running the lab of</font>

29
00:01:39,150 --> 00:01:47,009
us for us<font color="#CCCCCC"> please don't kick that</font><font color="#E5E5E5"> power</font>

30
00:01:44,759 --> 00:01:50,579
strip<font color="#E5E5E5"> cause it's a little finicky</font>

31
00:01:47,009 --> 00:01:54,240
I'm already<font color="#CCCCCC"> overloading it</font><font color="#E5E5E5"> and running</font>

32
00:01:50,579 --> 00:01:56,399
<font color="#E5E5E5">the</font><font color="#CCCCCC"> risk of fire so we don't want that</font>

33
00:01:54,240 --> 00:01:59,820
<font color="#E5E5E5">outer to go off you know fire is</font><font color="#CCCCCC"> okay</font>

34
00:01:56,399 --> 00:02:02,490
but<font color="#CCCCCC"> we don't know that</font><font color="#E5E5E5"> how to go</font><font color="#CCCCCC"> up</font><font color="#E5E5E5"> then</font>

35
00:01:59,820 --> 00:02:06,029
everything is going<font color="#CCCCCC"> to die</font><font color="#E5E5E5"> so right here</font>

36
00:02:02,490 --> 00:02:07,919
welcome settle in<font color="#E5E5E5"> and Maria</font><font color="#CCCCCC"> and I shall</font>

37
00:02:06,030 --> 00:02:11,849
be sorry

38
00:02:07,920 --> 00:02:13,720
<font color="#CCCCCC">Azaria and I shall be taking you through</font>

39
00:02:11,849 --> 00:02:16,769
this<font color="#CCCCCC"> workshop on</font>

40
00:02:13,720 --> 00:02:19,210
just some basics<font color="#E5E5E5"> about arm assembly and</font>

41
00:02:16,770 --> 00:02:22,390
<font color="#CCCCCC">shell code quick question how many</font><font color="#E5E5E5"> of</font>

42
00:02:19,210 --> 00:02:24,190
you written<font color="#CCCCCC"> Intel assembly before okay</font>

43
00:02:22,390 --> 00:02:25,929
so you guys know what machine code is

44
00:02:24,190 --> 00:02:28,800
and what registers are and what the

45
00:02:25,930 --> 00:02:31,390
stack is and pointers and you know

46
00:02:28,800 --> 00:02:33,360
<font color="#E5E5E5">32-bit and</font><font color="#CCCCCC"> sixteen</font><font color="#E5E5E5"> it's not like Java</font>

47
00:02:31,390 --> 00:02:36,040
and<font color="#CCCCCC"> cross-sex scripting junk</font><font color="#E5E5E5"> that</font>

48
00:02:33,360 --> 00:02:38,320
otherwise gets talked about<font color="#CCCCCC"> okay if you</font>

49
00:02:36,040 --> 00:02:41,109
are<font color="#E5E5E5"> expecting</font><font color="#CCCCCC"> that this is totally not</font>

50
00:02:38,320 --> 00:02:44,079
<font color="#E5E5E5">the workshop for it right how have you</font>

51
00:02:41,110 --> 00:02:47,620
written<font color="#CCCCCC"> shellcode before by hand not</font>

52
00:02:44,080 --> 00:02:50,290
<font color="#CCCCCC">Metasploit Metascore cheating okay</font><font color="#E5E5E5"> okay</font>

53
00:02:47,620 --> 00:02:52,959
so that's good so<font color="#CCCCCC"> we will do some</font><font color="#E5E5E5"> I mean</font>

54
00:02:50,290 --> 00:02:56,260
this<font color="#E5E5E5"> is by no means a full-fledged</font>

55
00:02:52,959 --> 00:02:58,810
<font color="#E5E5E5">shellcode workshop this is the idea of</font>

56
00:02:56,260 --> 00:03:01,929
this workshop<font color="#E5E5E5"> is</font><font color="#CCCCCC"> to get you started with</font>

57
00:02:58,810 --> 00:03:06,900
writing<font color="#E5E5E5"> assembly in writing shellcode in</font>

58
00:03:01,930 --> 00:03:10,650
arm quick over of the tools some

59
00:03:06,900 --> 00:03:15,280
templates and processes that<font color="#E5E5E5"> we follow</font>

60
00:03:10,650 --> 00:03:20,470
<font color="#E5E5E5">we</font><font color="#CCCCCC"> will do a simple</font><font color="#E5E5E5"> shell code exactly</font>

61
00:03:15,280 --> 00:03:22,780
<font color="#CCCCCC">just like drop</font><font color="#E5E5E5"> tube in shell along this</font>

62
00:03:20,470 --> 00:03:25,630
process<font color="#CCCCCC"> we'll learn</font><font color="#E5E5E5"> a lot about you know</font>

63
00:03:22,780 --> 00:03:27,930
<font color="#CCCCCC">just</font><font color="#E5E5E5"> the basics of arm assembly</font><font color="#CCCCCC"> a little</font>

64
00:03:25,630 --> 00:03:31,480
bit about the arm way of doing things

65
00:03:27,930 --> 00:03:36,820
thumb mode arm mode instructions load

66
00:03:31,480 --> 00:03:41,040
store<font color="#CCCCCC"> that</font><font color="#E5E5E5"> and then time permitting we</font>

67
00:03:36,820 --> 00:03:43,329
<font color="#CCCCCC">will</font><font color="#E5E5E5"> also talk about</font><font color="#CCCCCC"> River shell and</font>

68
00:03:41,040 --> 00:03:47,590
give you an<font color="#CCCCCC"> idea of how</font><font color="#E5E5E5"> to implement</font>

69
00:03:43,330 --> 00:03:49,180
reverse shell I would like to hand<font color="#CCCCCC"> over</font>

70
00:03:47,590 --> 00:03:51,250
the reverse shell to you as an<font color="#E5E5E5"> exercise</font>

71
00:03:49,180 --> 00:03:53,100
<font color="#CCCCCC">basically by the end of</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> workshop</font>

72
00:03:51,250 --> 00:03:57,250
you<font color="#E5E5E5"> should have enough armament to write</font>

73
00:03:53,100 --> 00:03:59,590
your own<font color="#CCCCCC"> river shell and if you do</font><font color="#E5E5E5"> that</font>

74
00:03:57,250 --> 00:04:05,170
successfully I will I<font color="#E5E5E5"> will buy you a</font>

75
00:03:59,590 --> 00:04:11,230
beer tomorrow show me of course<font color="#E5E5E5"> right</font>

76
00:04:05,170 --> 00:04:14,260
<font color="#CCCCCC">okay oh yeah you know the microphone so</font>

77
00:04:11,230 --> 00:04:17,738
to introduce<font color="#CCCCCC"> us area how many of you</font>

78
00:04:14,260 --> 00:04:21,849
read her fantastic<font color="#CCCCCC"> arm tutorials that's</font>

79
00:04:17,738 --> 00:04:24,340
<font color="#E5E5E5">what she's - well I think you're gonna</font>

80
00:04:21,849 --> 00:04:27,190
<font color="#CCCCCC">get a lot more hits on the site</font><font color="#E5E5E5"> tonight</font>

81
00:04:24,340 --> 00:04:29,349
but yeah she's done a fantastic job<font color="#CCCCCC"> off</font>

82
00:04:27,190 --> 00:04:31,180
introduction<font color="#CCCCCC"> to arm assembly</font><font color="#E5E5E5"> and also</font>

83
00:04:29,350 --> 00:04:32,560
<font color="#E5E5E5">introduction to our shellcode so a lot</font>

84
00:04:31,180 --> 00:04:35,650
<font color="#CCCCCC">of what we are</font><font color="#E5E5E5"> going to talk</font><font color="#CCCCCC"> about is</font>

85
00:04:32,560 --> 00:04:37,510
also<font color="#E5E5E5"> beautifully documented with anyway</font>

86
00:04:35,650 --> 00:04:40,390
tip<font color="#E5E5E5"> shifts not just static diagrams</font>

87
00:04:37,510 --> 00:04:43,150
<font color="#CCCCCC">menus with animated gifs on</font><font color="#E5E5E5"> on her</font>

88
00:04:40,390 --> 00:04:47,440
<font color="#E5E5E5">website</font><font color="#CCCCCC"> yeah you don't have</font><font color="#E5E5E5"> to get all</font>

89
00:04:43,150 --> 00:04:49,330
the<font color="#CCCCCC"> coops you don't have to get</font><font color="#E5E5E5"> all the</font>

90
00:04:47,440 --> 00:04:51,790
concepts right now so if you<font color="#E5E5E5"> don't</font>

91
00:04:49,330 --> 00:04:53,950
understand<font color="#CCCCCC"> everything that's</font><font color="#E5E5E5"> okay you</font>

92
00:04:51,790 --> 00:05:08,470
<font color="#E5E5E5">can just</font><font color="#CCCCCC"> read it up on the website at</font>

93
00:04:53,950 --> 00:05:11,380
home so no big deal<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> a couple of</font>

94
00:05:08,470 --> 00:05:16,330
administrative<font color="#E5E5E5"> things those of you on</font>

95
00:05:11,380 --> 00:05:18,700
the is this<font color="#CCCCCC"> say my left and</font><font color="#E5E5E5"> therefore</font>

96
00:05:16,330 --> 00:05:23,440
your right<font color="#CCCCCC"> and then directionally</font>

97
00:05:18,700 --> 00:05:27,039
challenged<font color="#E5E5E5"> honestly no idea but those of</font>

98
00:05:23,440 --> 00:05:31,810
you on the right side<font color="#E5E5E5"> your Raspberry Pi</font>

99
00:05:27,040 --> 00:05:34,450
is 10.50 dot 50.4<font color="#E5E5E5"> and those of you on</font>

100
00:05:31,810 --> 00:05:37,270
<font color="#E5E5E5">the left side your Raspberry Pi is 10.50</font>

101
00:05:34,450 --> 00:05:39,940
or<font color="#E5E5E5"> fifty or</font><font color="#CCCCCC"> three the same image they're</font>

102
00:05:37,270 --> 00:05:41,799
basically running<font color="#E5E5E5"> raspbian and</font><font color="#CCCCCC"> we've</font>

103
00:05:39,940 --> 00:05:44,680
loaded<font color="#E5E5E5"> them up with gdb and some</font>

104
00:05:41,800 --> 00:05:47,380
<font color="#CCCCCC">debugging tools and the bin tools to</font>

105
00:05:44,680 --> 00:05:49,630
write assembly which we are going to

106
00:05:47,380 --> 00:05:52,200
only use<font color="#CCCCCC"> one login the user name and</font>

107
00:05:49,630 --> 00:05:54,880
<font color="#E5E5E5">password is</font><font color="#CCCCCC"> exploited lab</font><font color="#E5E5E5"> exploit lab</font>

108
00:05:52,200 --> 00:05:58,810
please don't delete other people's work

109
00:05:54,880 --> 00:06:03,520
<font color="#CCCCCC">and play nice this is not like a you</font>

110
00:05:58,810 --> 00:06:09,580
know<font color="#CCCCCC"> deathmatch is not death match more</font>

111
00:06:03,520 --> 00:06:12,599
so when you<font color="#CCCCCC"> log</font><font color="#E5E5E5"> in there is a directory</font>

112
00:06:09,580 --> 00:06:16,330
called<font color="#E5E5E5"> workshop which contains the basic</font>

113
00:06:12,600 --> 00:06:18,520
templates<font color="#E5E5E5"> just</font><font color="#CCCCCC"> make your</font><font color="#E5E5E5"> own directory</font>

114
00:06:16,330 --> 00:06:21,960
<font color="#E5E5E5">just give it whatever directory name you</font>

115
00:06:18,520 --> 00:06:24,520
like<font color="#E5E5E5"> and copy the contents of the</font>

116
00:06:21,960 --> 00:06:26,349
everything<font color="#CCCCCC"> in workshop to that directory</font>

117
00:06:24,520 --> 00:06:28,000
<font color="#CCCCCC">and then stay within</font><font color="#E5E5E5"> that directory</font>

118
00:06:26,350 --> 00:06:32,290
don't go killing other people's

119
00:06:28,000 --> 00:06:34,890
directories<font color="#E5E5E5"> okay so that's just a</font><font color="#CCCCCC"> little</font>

120
00:06:32,290 --> 00:06:34,890
<font color="#CCCCCC">bit of the setup</font>

121
00:06:37,870 --> 00:06:45,110
if you've already been<font color="#CCCCCC"> in our</font><font color="#E5E5E5"> armed</font>

122
00:06:41,060 --> 00:06:48,110
exploit lab class in the on Monday

123
00:06:45,110 --> 00:06:51,500
<font color="#E5E5E5">Tuesday and Wednesday</font><font color="#CCCCCC"> please leave the</font>

124
00:06:48,110 --> 00:06:53,840
room<font color="#CCCCCC"> you've already studied this joking</font>

125
00:06:51,500 --> 00:07:02,870
<font color="#CCCCCC">we can stay</font><font color="#E5E5E5"> but there's nothing new</font><font color="#CCCCCC"> to</font>

126
00:06:53,840 --> 00:07:16,130
be<font color="#E5E5E5"> discussed</font><font color="#CCCCCC"> here yeah</font><font color="#E5E5E5"> it's a</font><font color="#CCCCCC"> username</font>

127
00:07:02,870 --> 00:07:21,470
<font color="#CCCCCC">password</font><font color="#E5E5E5"> is explored okay if my name is</font>

128
00:07:16,130 --> 00:07:22,159
<font color="#E5E5E5">so</font><font color="#CCCCCC"> Misha and this is this</font><font color="#E5E5E5"> area let's</font>

129
00:07:21,470 --> 00:07:25,070
<font color="#E5E5E5">begin</font>

130
00:07:22,160 --> 00:07:26,900
why are we<font color="#E5E5E5"> talking about</font><font color="#CCCCCC"> armed</font><font color="#E5E5E5"> this is</font>

131
00:07:25,070 --> 00:07:29,000
one<font color="#CCCCCC"> of my favorite quotes</font><font color="#E5E5E5"> and this is</font>

132
00:07:26,900 --> 00:07:30,679
actually my<font color="#CCCCCC"> own quote that there's an</font>

133
00:07:29,000 --> 00:07:32,810
intel on every<font color="#E5E5E5"> desktop</font><font color="#CCCCCC"> but there's an</font>

134
00:07:30,680 --> 00:07:35,560
<font color="#CCCCCC">animal</font><font color="#E5E5E5"> arm in every pocket this arms</font>

135
00:07:32,810 --> 00:07:38,180
<font color="#E5E5E5">outnumbering internships five to one</font>

136
00:07:35,560 --> 00:07:41,510
<font color="#E5E5E5">maybe six to one by the time we finish</font>

137
00:07:38,180 --> 00:07:46,040
this workshop<font color="#CCCCCC"> what are</font><font color="#E5E5E5"> some of the</font>

138
00:07:41,510 --> 00:07:48,950
salient features<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the arm CPU unlike</font>

139
00:07:46,040 --> 00:07:51,350
<font color="#E5E5E5">intel intel has what we call as a</font>

140
00:07:48,950 --> 00:07:54,590
complex instruction<font color="#CCCCCC"> set computer</font><font color="#E5E5E5"> arm is</font>

141
00:07:51,350 --> 00:07:57,920
a risk<font color="#CCCCCC"> CPU which means there's very few</font>

142
00:07:54,590 --> 00:08:01,789
instructions<font color="#E5E5E5"> but each instruction has</font>

143
00:07:57,920 --> 00:08:03,350
several permutations to<font color="#E5E5E5"> it</font><font color="#CCCCCC"> somewhat</font><font color="#E5E5E5"> like</font>

144
00:08:01,790 --> 00:08:05,270
<font color="#CCCCCC">c programming you have</font><font color="#E5E5E5"> a limited</font>

145
00:08:03,350 --> 00:08:09,740
<font color="#E5E5E5">keywords but do you know pretty much</font>

146
00:08:05,270 --> 00:08:11,930
everything with it<font color="#E5E5E5"> so the the</font><font color="#CCCCCC"> whole</font>

147
00:08:09,740 --> 00:08:15,170
<font color="#E5E5E5">philosophy of arm is simplicity and</font>

148
00:08:11,930 --> 00:08:16,910
frugality I will try to save on the

149
00:08:15,170 --> 00:08:20,030
number of<font color="#E5E5E5"> instructions</font><font color="#CCCCCC"> that will</font><font color="#E5E5E5"> try to</font>

150
00:08:16,910 --> 00:08:34,100
save on memory it will try<font color="#CCCCCC"> to save on</font>

151
00:08:20,030 --> 00:08:40,010
rewrite<font color="#CCCCCC"> abortions not my fault and and</font>

152
00:08:34,100 --> 00:08:43,990
yes<font color="#E5E5E5"> a few differences between arm and</font>

153
00:08:40,010 --> 00:08:43,990
Intel<font color="#E5E5E5"> the risk world is very different</font>

154
00:08:44,169 --> 00:08:48,459
<font color="#CCCCCC">pretty much</font>

155
00:08:45,820 --> 00:08:51,100
our journey<font color="#CCCCCC"> and</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> four-second reversing</font>

156
00:08:48,460 --> 00:08:53,740
has been with<font color="#CCCCCC"> intel that's at least</font>

157
00:08:51,100 --> 00:08:56,020
that's how<font color="#CCCCCC"> I have grown up so we</font><font color="#E5E5E5"> are</font>

158
00:08:53,740 --> 00:08:57,490
<font color="#E5E5E5">very familiar with the wrong way of</font>

159
00:08:56,020 --> 00:09:00,189
doing<font color="#CCCCCC"> things because</font><font color="#E5E5E5"> that's what we've</font>

160
00:08:57,490 --> 00:09:02,560
learned<font color="#CCCCCC"> from the get-go and</font><font color="#E5E5E5"> Intel</font>

161
00:09:00,190 --> 00:09:06,490
assembly is now natural and familiar<font color="#E5E5E5"> to</font>

162
00:09:02,560 --> 00:09:09,849
us<font color="#CCCCCC"> arm assembly therefore at first will</font>

163
00:09:06,490 --> 00:09:12,640
sounds very weird<font color="#CCCCCC"> good even sounds</font>

164
00:09:09,850 --> 00:09:15,790
illogical<font color="#CCCCCC"> but the more you study the</font>

165
00:09:12,640 --> 00:09:17,800
more it makes sense<font color="#E5E5E5"> up until the point</font>

166
00:09:15,790 --> 00:09:22,599
that<font color="#E5E5E5"> you will totally just not like</font>

167
00:09:17,800 --> 00:09:25,060
looking<font color="#CCCCCC"> at Intel assembly or</font><font color="#E5E5E5"> however you</font>

168
00:09:22,600 --> 00:09:26,950
know<font color="#CCCCCC"> especially we start doing Rob</font>

169
00:09:25,060 --> 00:09:28,479
<font color="#CCCCCC">chainsaw now they're really</font><font color="#E5E5E5"> cute and</font>

170
00:09:26,950 --> 00:09:30,550
they're really<font color="#CCCCCC"> beautiful and really</font>

171
00:09:28,480 --> 00:09:32,680
<font color="#E5E5E5">really elegant</font><font color="#CCCCCC"> Rob chains on</font>

172
00:09:30,550 --> 00:09:37,810
<font color="#E5E5E5">intelligence look absolutely ugly just</font>

173
00:09:32,680 --> 00:09:39,790
<font color="#E5E5E5">like a Picasso painting quick</font>

174
00:09:37,810 --> 00:09:43,150
differences are is what we call as a

175
00:09:39,790 --> 00:09:46,480
load store architecture<font color="#CCCCCC"> short answer</font>

176
00:09:43,150 --> 00:09:49,329
what load store is it means that<font color="#CCCCCC"> you</font>

177
00:09:46,480 --> 00:09:52,360
cannot<font color="#E5E5E5"> perform any computation directly</font>

178
00:09:49,330 --> 00:09:56,590
on memory in Intel you can do something

179
00:09:52,360 --> 00:09:59,920
like increment in DirectX<font color="#E5E5E5"> which means</font><font color="#CCCCCC"> ax</font>

180
00:09:56,590 --> 00:10:01,690
is used as a pointer<font color="#E5E5E5"> you dereference a</font>

181
00:09:59,920 --> 00:10:04,540
pointer and increment the value of

182
00:10:01,690 --> 00:10:08,200
memory at that address<font color="#E5E5E5"> by one one</font>

183
00:10:04,540 --> 00:10:10,480
instruction does it all<font color="#CCCCCC"> you do</font><font color="#E5E5E5"> call</font>

184
00:10:08,200 --> 00:10:14,290
dereference<font color="#CCCCCC"> CX that</font><font color="#E5E5E5"> is called a function</font>

185
00:10:10,480 --> 00:10:17,190
<font color="#CCCCCC">pointer</font><font color="#E5E5E5"> you cannot do</font><font color="#CCCCCC"> that on our on our</font>

186
00:10:14,290 --> 00:10:21,069
if you want to do any such calculations

187
00:10:17,190 --> 00:10:23,770
<font color="#E5E5E5">on memory pointers</font><font color="#CCCCCC"> you first</font><font color="#E5E5E5"> have to</font>

188
00:10:21,070 --> 00:10:26,500
load the values<font color="#E5E5E5"> into a register do the</font>

189
00:10:23,770 --> 00:10:28,689
calculations<font color="#E5E5E5"> and</font><font color="#CCCCCC"> then store them back</font><font color="#E5E5E5"> so</font>

190
00:10:26,500 --> 00:10:30,400
everything<font color="#E5E5E5"> in arm is load store and</font>

191
00:10:28,690 --> 00:10:32,950
there's a lot<font color="#E5E5E5"> of load store going on</font>

192
00:10:30,400 --> 00:10:35,020
there's a lot<font color="#E5E5E5"> of instructions</font><font color="#CCCCCC"> available</font>

193
00:10:32,950 --> 00:10:37,600
for load<font color="#CCCCCC"> store as well so there's a lot</font>

194
00:10:35,020 --> 00:10:39,370
<font color="#CCCCCC">of instructions for calculations mega</font>

195
00:10:37,600 --> 00:10:41,740
<font color="#CCCCCC">decimating and logical instructions</font><font color="#E5E5E5"> and</font>

196
00:10:39,370 --> 00:10:44,530
there's a lot<font color="#E5E5E5"> of instructions for load</font>

197
00:10:41,740 --> 00:10:45,550
store<font color="#E5E5E5"> there's pretty much no other types</font>

198
00:10:44,530 --> 00:10:48,339
of instructions

199
00:10:45,550 --> 00:10:53,790
except program control transfer which is

200
00:10:48,340 --> 00:10:57,580
branching<font color="#E5E5E5"> and things like</font><font color="#CCCCCC"> that from</font><font color="#E5E5E5"> our</font>

201
00:10:53,790 --> 00:10:59,120
<font color="#CCCCCC">ARMA several evolution steps along the</font>

202
00:10:57,580 --> 00:11:04,810
way<font color="#E5E5E5"> it started with our movie</font>

203
00:10:59,120 --> 00:11:08,660
one that is the basic 32-bit computer

204
00:11:04,810 --> 00:11:10,489
which was the acorn archimedes<font color="#CCCCCC"> that</font>

205
00:11:08,660 --> 00:11:13,040
computer was<font color="#E5E5E5"> way ahead of its time in</font>

206
00:11:10,490 --> 00:11:14,120
the<font color="#E5E5E5"> late 80s it was the successor to the</font>

207
00:11:13,040 --> 00:11:16,849
BBC<font color="#E5E5E5"> micro</font>

208
00:11:14,120 --> 00:11:20,089
so<font color="#E5E5E5"> are we once first came up</font><font color="#CCCCCC"> with a</font>

209
00:11:16,850 --> 00:11:24,110
32-bit arm instruction set and currently

210
00:11:20,089 --> 00:11:26,839
<font color="#E5E5E5">we are using</font><font color="#CCCCCC"> on v6 on v7 and</font><font color="#E5E5E5"> our v8</font>

211
00:11:24,110 --> 00:11:30,110
instruction sets<font color="#E5E5E5"> most of your phones are</font>

212
00:11:26,839 --> 00:11:32,060
on v8<font color="#E5E5E5"> most of your embedded devices</font>

213
00:11:30,110 --> 00:11:35,830
including that black router and the

214
00:11:32,060 --> 00:11:39,589
raspberry<font color="#E5E5E5"> PI's up to PI</font><font color="#CCCCCC"> 2 there</font><font color="#E5E5E5"> are</font><font color="#CCCCCC"> b7</font>

215
00:11:35,830 --> 00:11:44,630
some of the older<font color="#CCCCCC"> iot devices</font><font color="#E5E5E5"> are</font><font color="#CCCCCC"> on</font><font color="#E5E5E5"> v6</font>

216
00:11:39,589 --> 00:11:48,620
the<font color="#E5E5E5"> PI ones are on v6 at one point of</font>

217
00:11:44,630 --> 00:11:52,970
time<font color="#CCCCCC"> on v4 onwards</font><font color="#E5E5E5"> arm introduced what</font>

218
00:11:48,620 --> 00:11:56,210
we call as the<font color="#E5E5E5"> thumb mode</font><font color="#CCCCCC"> this is</font><font color="#E5E5E5"> a very</font>

219
00:11:52,970 --> 00:12:00,050
unique<font color="#E5E5E5"> feature to</font><font color="#CCCCCC"> have this is probably</font>

220
00:11:56,210 --> 00:12:05,140
the<font color="#E5E5E5"> only CPU I know that supports two</font>

221
00:12:00,050 --> 00:12:09,339
<font color="#CCCCCC">types of instruction sets under one CPU</font>

222
00:12:05,140 --> 00:12:12,770
by default you have<font color="#E5E5E5"> the 32-bit arm</font>

223
00:12:09,339 --> 00:12:16,750
instruction set one key<font color="#CCCCCC"> difference</font>

224
00:12:12,770 --> 00:12:20,150
between Intel and arm is that all

225
00:12:16,750 --> 00:12:22,970
instructions in<font color="#CCCCCC"> are are fixed with</font>

226
00:12:20,150 --> 00:12:24,980
instructions Intel<font color="#CCCCCC"> your variable</font><font color="#E5E5E5"> with</font>

227
00:12:22,970 --> 00:12:28,160
<font color="#E5E5E5">instruction</font><font color="#CCCCCC"> an OP can be one byte of</font>

228
00:12:24,980 --> 00:12:29,870
call can be<font color="#CCCCCC"> five</font><font color="#E5E5E5"> bytes</font><font color="#CCCCCC"> an</font><font color="#E5E5E5"> ad can be</font>

229
00:12:28,160 --> 00:12:32,510
three bytes in arm

230
00:12:29,870 --> 00:12:35,510
everything is<font color="#E5E5E5"> eight four byte or a</font>

231
00:12:32,510 --> 00:12:40,100
32-bit instruction<font color="#CCCCCC"> fixed-width opcode</font>

232
00:12:35,510 --> 00:12:43,420
and<font color="#E5E5E5"> operand is fixed</font><font color="#CCCCCC"> rv4</font><font color="#E5E5E5"> onwards</font>

233
00:12:40,100 --> 00:12:47,810
introduced a smaller subset<font color="#CCCCCC"> of</font>

234
00:12:43,420 --> 00:12:51,229
instructions<font color="#E5E5E5"> the most popularly used arm</font>

235
00:12:47,810 --> 00:12:54,469
instructions were also available in what

236
00:12:51,230 --> 00:12:57,620
is called<font color="#E5E5E5"> a thumb mode where at some is</font>

237
00:12:54,470 --> 00:13:02,900
smaller than an hour some instructions

238
00:12:57,620 --> 00:13:05,630
are 16 bits<font color="#CCCCCC"> why</font><font color="#E5E5E5"> 2 bytes only what is the</font>

239
00:13:02,900 --> 00:13:08,810
<font color="#E5E5E5">purpose why is there</font><font color="#CCCCCC"> a thumb or</font><font color="#E5E5E5"> what so</font>

240
00:13:05,630 --> 00:13:11,000
what's the<font color="#E5E5E5"> rationale behind having</font><font color="#CCCCCC"> a</font>

241
00:13:08,810 --> 00:13:12,979
subset of instructions also<font color="#E5E5E5"> with a</font>

242
00:13:11,000 --> 00:13:15,680
blessed thumb<font color="#E5E5E5"> so</font><font color="#CCCCCC"> for</font>

243
00:13:12,980 --> 00:13:17,959
<font color="#CCCCCC">we'll</font><font color="#E5E5E5"> add is available in arm as 32-bit</font>

244
00:13:15,680 --> 00:13:20,388
instruction and the same instruction is

245
00:13:17,959 --> 00:13:22,699
<font color="#E5E5E5">also available as 16-bit some more why</font>

246
00:13:20,389 --> 00:13:26,839
<font color="#E5E5E5">why is this why is this important</font>

247
00:13:22,699 --> 00:13:28,750
<font color="#CCCCCC">unnecessary</font><font color="#E5E5E5"> memory yes so your compiled</font>

248
00:13:26,839 --> 00:13:31,459
binaries will be smaller so<font color="#CCCCCC"> about</font>

249
00:13:28,750 --> 00:13:38,360
ideally<font color="#E5E5E5"> half the size but about 60%</font><font color="#CCCCCC"> of</font>

250
00:13:31,459 --> 00:13:41,869
<font color="#E5E5E5">the size yes yes</font><font color="#CCCCCC"> absolutely so</font><font color="#E5E5E5"> your your</font>

251
00:13:38,360 --> 00:13:44,750
binary can have both 32-bit and 16-bit

252
00:13:41,870 --> 00:13:48,170
<font color="#E5E5E5">instructions coexisting together you can</font>

253
00:13:44,750 --> 00:13:52,100
switch between one<font color="#E5E5E5"> another</font><font color="#CCCCCC"> at will</font><font color="#E5E5E5"> while</font>

254
00:13:48,170 --> 00:13:53,870
execution<font color="#E5E5E5"> is going</font><font color="#CCCCCC"> on you know</font><font color="#E5E5E5"> your you</font>

255
00:13:52,100 --> 00:13:55,699
might be executing<font color="#E5E5E5"> one two three four</font>

256
00:13:53,870 --> 00:13:56,899
instructions in arm then<font color="#CCCCCC"> you flip to</font>

257
00:13:55,699 --> 00:13:59,300
thumb mode in the rest<font color="#E5E5E5"> of the</font>

258
00:13:56,899 --> 00:14:02,230
<font color="#CCCCCC">instruction</font><font color="#E5E5E5"> and some no disruption</font>

259
00:13:59,300 --> 00:14:06,529
nothing whatsoever and as<font color="#CCCCCC"> the</font><font color="#E5E5E5"> beauty of</font>

260
00:14:02,230 --> 00:14:10,220
arm<font color="#CCCCCC"> they call this feature interworking</font>

261
00:14:06,529 --> 00:14:12,260
so arm and thumb can be flipped<font color="#E5E5E5"> almost</font>

262
00:14:10,220 --> 00:14:14,240
instantly from<font color="#CCCCCC"> one</font><font color="#E5E5E5"> instruction to</font>

263
00:14:12,260 --> 00:14:18,260
another you<font color="#E5E5E5"> can flip to</font><font color="#CCCCCC"> a mode of flip</font>

264
00:14:14,240 --> 00:14:19,940
to<font color="#CCCCCC"> thermo the assembly</font><font color="#E5E5E5"> language remains</font>

265
00:14:18,260 --> 00:14:22,130
the same so<font color="#CCCCCC"> you</font><font color="#E5E5E5"> don't have to memorize</font>

266
00:14:19,940 --> 00:14:24,470
different<font color="#E5E5E5"> mnemonics</font><font color="#CCCCCC"> for are</font><font color="#E5E5E5"> more</font>

267
00:14:22,130 --> 00:14:26,870
different<font color="#CCCCCC"> when demonics forethe you just</font>

268
00:14:24,470 --> 00:14:29,660
have to tell<font color="#E5E5E5"> the assembler that hey you</font>

269
00:14:26,870 --> 00:14:32,149
know output these instructions as<font color="#E5E5E5"> 32 bit</font>

270
00:14:29,660 --> 00:14:34,189
wide and those<font color="#E5E5E5"> instructions is 16 bit</font>

271
00:14:32,149 --> 00:14:37,160
wide<font color="#CCCCCC"> so the assembler will choose the</font>

272
00:14:34,190 --> 00:14:40,100
correct opcode<font color="#E5E5E5"> for arm or thumb you just</font>

273
00:14:37,160 --> 00:14:41,959
<font color="#E5E5E5">remember the mnemonics as</font><font color="#CCCCCC"> their</font><font color="#E5E5E5"> certain</font>

274
00:14:40,100 --> 00:14:44,740
mnemonics are just not available<font color="#CCCCCC"> in</font>

275
00:14:41,959 --> 00:14:49,099
thumb mode<font color="#E5E5E5"> so you</font><font color="#CCCCCC"> know some instructions</font>

276
00:14:44,740 --> 00:14:50,959
<font color="#CCCCCC">for example</font><font color="#E5E5E5"> there's some strange</font>

277
00:14:49,100 --> 00:14:56,319
instructions<font color="#E5E5E5"> that you won't you won't</font>

278
00:14:50,959 --> 00:14:58,819
see<font color="#E5E5E5"> enter but you'll see them in right</font>

279
00:14:56,319 --> 00:15:01,250
<font color="#E5E5E5">then the arm is something called</font>

280
00:14:58,819 --> 00:15:03,349
conditional execution which we will<font color="#E5E5E5"> not</font>

281
00:15:01,250 --> 00:15:05,449
get<font color="#E5E5E5"> into too</font><font color="#CCCCCC"> much of</font><font color="#E5E5E5"> detail but</font>

282
00:15:03,350 --> 00:15:08,389
essentially every instruction<font color="#E5E5E5"> can be</font>

283
00:15:05,449 --> 00:15:10,670
<font color="#E5E5E5">predicated with a condition clause so</font>

284
00:15:08,389 --> 00:15:12,560
you can have add two<font color="#CCCCCC"> numbers or</font><font color="#E5E5E5"> add if</font>

285
00:15:10,670 --> 00:15:14,750
greater than two numbers it will look at

286
00:15:12,560 --> 00:15:17,209
the status flags<font color="#E5E5E5"> and the instruction</font>

287
00:15:14,750 --> 00:15:19,459
will trigger only<font color="#E5E5E5"> if these condition</font>

288
00:15:17,209 --> 00:15:22,670
flags are met otherwise it just falls

289
00:15:19,459 --> 00:15:24,609
through<font color="#CCCCCC"> as a</font><font color="#E5E5E5"> mob there is something</font>

290
00:15:22,670 --> 00:15:26,790
called an<font color="#CCCCCC"> inline barrel shifter</font>

291
00:15:24,610 --> 00:15:28,800
<font color="#E5E5E5">basically for arithmetic</font>

292
00:15:26,790 --> 00:15:31,500
<font color="#E5E5E5">or numeric calculations you get the</font>

293
00:15:28,800 --> 00:15:34,500
ability<font color="#CCCCCC"> to</font><font color="#E5E5E5"> write shift and left shift</font>

294
00:15:31,500 --> 00:15:37,200
<font color="#E5E5E5">for free this is hardwired into the</font>

295
00:15:34,500 --> 00:15:38,940
<font color="#CCCCCC">rithmetic and logic unit so you don't</font>

296
00:15:37,200 --> 00:15:41,940
have to pay an<font color="#CCCCCC"> extra penalty for</font>

297
00:15:38,940 --> 00:15:44,460
<font color="#CCCCCC">multiplication by 2 or division by 2 you</font>

298
00:15:41,940 --> 00:15:46,860
just<font color="#E5E5E5"> you get it for free</font><font color="#CCCCCC"> with every</font>

299
00:15:44,460 --> 00:15:52,740
instruction<font color="#E5E5E5"> if you don't want to use it</font>

300
00:15:46,860 --> 00:15:55,170
<font color="#CCCCCC">you set the pit shift to zero arm</font><font color="#E5E5E5"> also</font>

301
00:15:52,740 --> 00:15:57,300
<font color="#E5E5E5">has fully aligned memory access</font>

302
00:15:55,170 --> 00:16:00,449
that means all data and<font color="#CCCCCC"> the instructions</font>

303
00:15:57,300 --> 00:16:02,910
<font color="#E5E5E5">must be perfectly aligned to</font><font color="#CCCCCC"> four-bike</font>

304
00:16:00,450 --> 00:16:06,030
boundaries or<font color="#CCCCCC"> two</font><font color="#E5E5E5"> byte boundaries and</font>

305
00:16:02,910 --> 00:16:10,800
thumb you cannot have unaligned access

306
00:16:06,030 --> 00:16:13,050
unlike<font color="#CCCCCC"> Intel</font><font color="#E5E5E5"> and data in certain arm</font>

307
00:16:10,800 --> 00:16:17,849
processors certain modern ARM processors

308
00:16:13,050 --> 00:16:21,719
<font color="#E5E5E5">data can be accessed in both Indian</font>

309
00:16:17,850 --> 00:16:24,480
modes<font color="#CCCCCC"> by</font><font color="#E5E5E5"> default you always start by</font>

310
00:16:21,720 --> 00:16:27,780
<font color="#E5E5E5">accessing data in little-endian mode but</font>

311
00:16:24,480 --> 00:16:31,200
if you wish you<font color="#CCCCCC"> can set a flag</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> treat</font>

312
00:16:27,780 --> 00:16:33,150
<font color="#CCCCCC">our data as big-endian i have not yet</font>

313
00:16:31,200 --> 00:16:35,370
<font color="#E5E5E5">seen a practical implementation</font><font color="#CCCCCC"> of</font>

314
00:16:33,150 --> 00:16:37,140
<font color="#E5E5E5">big-endian yet but the feature exists if</font>

315
00:16:35,370 --> 00:16:39,450
there's a certain<font color="#E5E5E5"> microcontroller you</font>

316
00:16:37,140 --> 00:16:44,460
want to derive<font color="#CCCCCC"> that uses big-endian</font><font color="#E5E5E5"> data</font>

317
00:16:39,450 --> 00:16:46,350
it's possible anyway<font color="#E5E5E5"> so the way we're</font>

318
00:16:44,460 --> 00:16:48,120
<font color="#CCCCCC">going to do this is there's a little</font><font color="#E5E5E5"> bit</font>

319
00:16:46,350 --> 00:16:50,330
<font color="#CCCCCC">of theory that we have to get through</font>

320
00:16:48,120 --> 00:16:53,460
before<font color="#E5E5E5"> we</font><font color="#CCCCCC"> can even</font><font color="#E5E5E5"> start writing some</font>

321
00:16:50,330 --> 00:16:55,800
instructions so the first 45<font color="#E5E5E5"> minutes</font><font color="#CCCCCC"> of</font>

322
00:16:53,460 --> 00:16:57,530
<font color="#E5E5E5">the workshop will cruise through some</font>

323
00:16:55,800 --> 00:17:02,540
theory and then<font color="#CCCCCC"> we'll</font><font color="#E5E5E5"> have some</font>

324
00:16:57,530 --> 00:17:02,540
<font color="#E5E5E5">exercises</font><font color="#CCCCCC"> and some stuff</font><font color="#E5E5E5"> to play</font><font color="#CCCCCC"> with</font>

325
00:17:02,720 --> 00:17:11,610
the next thing<font color="#CCCCCC"> i want to talk</font><font color="#E5E5E5"> about are</font>

326
00:17:05,310 --> 00:17:15,780
the<font color="#CCCCCC"> arm CPU registers intel has</font><font color="#E5E5E5"> very few</font>

327
00:17:11,609 --> 00:17:18,719
registers<font color="#E5E5E5"> arm and every risk cpu for</font>

328
00:17:15,780 --> 00:17:21,379
that matter has lots of registers

329
00:17:18,720 --> 00:17:25,410
typically you have<font color="#CCCCCC"> a lot more registers</font>

330
00:17:21,380 --> 00:17:29,070
<font color="#CCCCCC">you have all the registers are</font><font color="#E5E5E5"> numbered</font>

331
00:17:25,410 --> 00:17:33,180
<font color="#E5E5E5">you refer to them from</font><font color="#CCCCCC"> r0 r1 or through</font>

332
00:17:29,070 --> 00:17:36,659
to r15 each of these are 32-bit

333
00:17:33,180 --> 00:17:40,530
registers some registers have

334
00:17:36,660 --> 00:17:44,160
<font color="#CCCCCC">special-purpose</font><font color="#E5E5E5"> for example our</font><font color="#CCCCCC"> fifth</font>

335
00:17:40,530 --> 00:17:47,910
is the program<font color="#CCCCCC"> counter PC</font><font color="#E5E5E5"> the equivalent</font>

336
00:17:44,160 --> 00:17:49,470
of Intel<font color="#CCCCCC"> AIP</font><font color="#E5E5E5"> so PC stores the</font><font color="#CCCCCC"> address</font>

337
00:17:47,910 --> 00:17:55,680
where the<font color="#E5E5E5"> next fetch and execute is</font>

338
00:17:49,470 --> 00:18:00,650
<font color="#CCCCCC">going to</font><font color="#E5E5E5"> happen</font><font color="#CCCCCC"> r-13 is</font><font color="#E5E5E5"> the stack</font>

339
00:17:55,680 --> 00:18:02,970
pointer SP for<font color="#CCCCCC"> the stack pointer to</font><font color="#E5E5E5"> do</font>

340
00:18:00,650 --> 00:18:05,460
points<font color="#E5E5E5"> to the top of the stack</font><font color="#CCCCCC"> you do</font>

341
00:18:02,970 --> 00:18:07,250
push and pop you do push the stack<font color="#E5E5E5"> one</font>

342
00:18:05,460 --> 00:18:11,040
<font color="#CCCCCC">to decrements pop the stack pointer</font>

343
00:18:07,250 --> 00:18:14,340
<font color="#E5E5E5">increments are 11 is the frame pointer</font>

344
00:18:11,040 --> 00:18:19,290
<font color="#E5E5E5">pretty much like Intel EBP what is the</font>

345
00:18:14,340 --> 00:18:22,230
frame pointer<font color="#CCCCCC"> do points to the frame the</font>

346
00:18:19,290 --> 00:18:26,159
base of the frame<font color="#E5E5E5"> then any local</font>

347
00:18:22,230 --> 00:18:28,350
<font color="#CCCCCC">variables are lower than the EBP any</font>

348
00:18:26,160 --> 00:18:31,560
parameters are greater than<font color="#E5E5E5"> leaving so</font>

349
00:18:28,350 --> 00:18:33,659
<font color="#CCCCCC">that equivalent is FP there are</font><font color="#E5E5E5"> two</font>

350
00:18:31,560 --> 00:18:37,080
<font color="#E5E5E5">registers which the likes of which are</font>

351
00:18:33,660 --> 00:18:39,690
not<font color="#E5E5E5"> present in the Intel world there is</font>

352
00:18:37,080 --> 00:18:42,270
the IP register which<font color="#CCCCCC"> is not instruction</font>

353
00:18:39,690 --> 00:18:45,000
<font color="#E5E5E5">pointer it is the intra procedural</font><font color="#CCCCCC"> cause</font>

354
00:18:42,270 --> 00:18:49,860
scratch register<font color="#E5E5E5"> which is used to</font>

355
00:18:45,000 --> 00:18:51,150
support something like far jumps we are

356
00:18:49,860 --> 00:18:53,780
not going to<font color="#E5E5E5"> talk about it we don't care</font>

357
00:18:51,150 --> 00:18:58,680
<font color="#CCCCCC">about it</font><font color="#E5E5E5"> in this workshop so ignore it</font>

358
00:18:53,780 --> 00:19:02,070
<font color="#E5E5E5">and our 14 is a link register which</font><font color="#CCCCCC"> is</font>

359
00:18:58,680 --> 00:19:06,840
very interesting<font color="#CCCCCC"> and actually several</font>

360
00:19:02,070 --> 00:19:10,919
<font color="#E5E5E5">risk CPUs also have a link register is</font>

361
00:19:06,840 --> 00:19:14,459
also got a branch link register now<font color="#E5E5E5"> to</font>

362
00:19:10,920 --> 00:19:17,460
kind<font color="#E5E5E5"> of give</font><font color="#CCCCCC"> you a little idea</font><font color="#E5E5E5"> about</font>

363
00:19:14,460 --> 00:19:19,080
what this link register does let me

364
00:19:17,460 --> 00:19:21,900
first take you to the Intel world for a

365
00:19:19,080 --> 00:19:25,230
little<font color="#CCCCCC"> while in Intel if you have a</font>

366
00:19:21,900 --> 00:19:31,170
function what instruction is used to

367
00:19:25,230 --> 00:19:34,550
call a function call<font color="#CCCCCC"> ok</font><font color="#E5E5E5"> why not jump</font><font color="#CCCCCC"> why</font>

368
00:19:31,170 --> 00:19:34,550
don't you just jump<font color="#E5E5E5"> to a function</font>

369
00:19:37,250 --> 00:19:41,370
<font color="#E5E5E5">brilliant we want to push</font><font color="#CCCCCC"> the return</font>

370
00:19:39,690 --> 00:19:43,410
address<font color="#E5E5E5"> on to the stack so</font><font color="#CCCCCC"> that we know</font>

371
00:19:41,370 --> 00:19:47,610
<font color="#E5E5E5">the breadcrumbs and we can find our way</font>

372
00:19:43,410 --> 00:19:50,280
<font color="#CCCCCC">back like Hansel</font><font color="#E5E5E5"> and Gretel</font><font color="#CCCCCC"> if you do a</font>

373
00:19:47,610 --> 00:19:51,719
<font color="#E5E5E5">job guess what you don't know where you</font>

374
00:19:50,280 --> 00:19:53,590
where<font color="#E5E5E5"> you came from so you do not know</font>

375
00:19:51,720 --> 00:19:56,230
where to<font color="#E5E5E5"> return to</font>

376
00:19:53,590 --> 00:19:57,699
well guess<font color="#CCCCCC"> what arm has no concept</font><font color="#E5E5E5"> of a</font>

377
00:19:56,230 --> 00:20:01,300
college<font color="#E5E5E5"> structure there's no cause</font>

378
00:19:57,700 --> 00:20:03,190
there's<font color="#E5E5E5"> only branch you want to do a</font>

379
00:20:01,300 --> 00:20:05,980
function branch to it and then<font color="#E5E5E5"> figure</font>

380
00:20:03,190 --> 00:20:09,510
out<font color="#E5E5E5"> a way of branching back there's only</font>

381
00:20:05,980 --> 00:20:13,360
<font color="#E5E5E5">four branch instructions in this branch</font>

382
00:20:09,510 --> 00:20:16,270
this branch and<font color="#CCCCCC"> Exchange</font><font color="#E5E5E5"> this branch and</font>

383
00:20:13,360 --> 00:20:19,899
link in this branch and Lincoln<font color="#E5E5E5"> exchange</font>

384
00:20:16,270 --> 00:20:23,050
<font color="#E5E5E5">the link is the interesting</font><font color="#CCCCCC"> part</font><font color="#E5E5E5"> so arm</font>

385
00:20:19,900 --> 00:20:25,170
is<font color="#E5E5E5"> not that terrible</font><font color="#CCCCCC"> little</font><font color="#E5E5E5"> branch but</font>

386
00:20:23,050 --> 00:20:28,629
<font color="#E5E5E5">instead of the call</font><font color="#CCCCCC"> instruction</font>

387
00:20:25,170 --> 00:20:32,340
automatically pushing the return address

388
00:20:28,630 --> 00:20:36,250
on<font color="#E5E5E5"> the</font><font color="#CCCCCC"> stack the branch which link</font>

389
00:20:32,340 --> 00:20:40,689
instruction will save the program

390
00:20:36,250 --> 00:20:43,420
<font color="#E5E5E5">counter</font><font color="#CCCCCC"> in the link register</font><font color="#E5E5E5"> so just</font>

391
00:20:40,690 --> 00:20:48,760
like a temporary<font color="#E5E5E5"> register</font><font color="#CCCCCC"> to like you</font>

392
00:20:43,420 --> 00:20:51,460
know hold my beer<font color="#E5E5E5"> that's that's the</font>

393
00:20:48,760 --> 00:20:53,590
that's<font color="#E5E5E5"> the link register you say here's</font>

394
00:20:51,460 --> 00:20:56,170
my return address<font color="#CCCCCC"> is</font><font color="#E5E5E5"> keep it</font><font color="#CCCCCC"> when I go</font>

395
00:20:53,590 --> 00:20:58,990
to this<font color="#CCCCCC"> function when I come back</font><font color="#E5E5E5"> I'm</font>

396
00:20:56,170 --> 00:21:02,860
going<font color="#E5E5E5"> to just branch back to the link</font>

397
00:20:58,990 --> 00:21:05,860
register so this is how functions are

398
00:21:02,860 --> 00:21:07,629
done enough<font color="#CCCCCC"> you might</font><font color="#E5E5E5"> be already</font>

399
00:21:05,860 --> 00:21:10,270
thinking<font color="#CCCCCC"> that</font><font color="#E5E5E5"> okay whatever function</font>

400
00:21:07,630 --> 00:21:14,830
calls another function<font color="#E5E5E5"> then what do you</font>

401
00:21:10,270 --> 00:21:17,410
do then it<font color="#E5E5E5"> is the duty</font><font color="#CCCCCC"> of the</font><font color="#E5E5E5"> function</font>

402
00:21:14,830 --> 00:21:20,050
to preserve the link register the CPU

403
00:21:17,410 --> 00:21:22,510
doesn't<font color="#E5E5E5"> do it so it's the burden is</font>

404
00:21:20,050 --> 00:21:23,649
pushed<font color="#CCCCCC"> on to the</font><font color="#E5E5E5"> compiler okay you want</font>

405
00:21:22,510 --> 00:21:25,960
<font color="#CCCCCC">to you want</font><font color="#E5E5E5"> to call another function</font>

406
00:21:23,650 --> 00:21:28,960
<font color="#CCCCCC">we'll go save the link register yourself</font>

407
00:21:25,960 --> 00:21:31,930
if you wish to<font color="#E5E5E5"> return back so typically</font>

408
00:21:28,960 --> 00:21:34,660
<font color="#E5E5E5">in arm your functions are</font><font color="#CCCCCC"> of two</font>

409
00:21:31,930 --> 00:21:37,330
<font color="#E5E5E5">different types</font><font color="#CCCCCC"> you have what we call</font><font color="#E5E5E5"> as</font>

410
00:21:34,660 --> 00:21:39,370
<font color="#E5E5E5">leaf functions which don't call any</font>

411
00:21:37,330 --> 00:21:42,070
other<font color="#E5E5E5"> functions there are no branches</font>

412
00:21:39,370 --> 00:21:43,989
<font color="#CCCCCC">from a leaf essentially and you have non</font>

413
00:21:42,070 --> 00:21:47,230
leaf functions which are<font color="#CCCCCC"> functions that</font>

414
00:21:43,990 --> 00:21:48,580
call another function the<font color="#E5E5E5"> prologues for</font>

415
00:21:47,230 --> 00:21:51,370
these<font color="#E5E5E5"> these functions will be very</font>

416
00:21:48,580 --> 00:21:53,620
different<font color="#E5E5E5"> the leaf function</font><font color="#CCCCCC"> has pretty</font>

417
00:21:51,370 --> 00:21:56,500
<font color="#E5E5E5">much nothing you save the link register</font>

418
00:21:53,620 --> 00:21:59,649
you return by branching back to the link

419
00:21:56,500 --> 00:22:03,220
register<font color="#CCCCCC"> a</font><font color="#E5E5E5"> non</font><font color="#CCCCCC"> link function will push</font>

420
00:21:59,650 --> 00:22:04,750
the link register<font color="#E5E5E5"> on the stack then go</font>

421
00:22:03,220 --> 00:22:07,000
<font color="#E5E5E5">up its job</font><font color="#CCCCCC"> they will call another</font>

422
00:22:04,750 --> 00:22:07,390
<font color="#E5E5E5">function the link register might be over</font>

423
00:22:07,000 --> 00:22:09,640
it

424
00:22:07,390 --> 00:22:13,090
but<font color="#E5E5E5"> whether function returns then you</font>

425
00:22:09,640 --> 00:22:15,280
pop the program counter from the same

426
00:22:13,090 --> 00:22:18,490
link register<font color="#E5E5E5"> pretty much like the</font>

427
00:22:15,280 --> 00:22:20,440
<font color="#E5E5E5">return will restore</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> Eid so this is</font>

428
00:22:18,490 --> 00:22:24,549
the purpose<font color="#CCCCCC"> of the link register in a</font>

429
00:22:20,440 --> 00:22:30,400
nutshell and then<font color="#E5E5E5"> r0 is a cumulative</font>

430
00:22:24,549 --> 00:22:33,070
<font color="#CCCCCC">just like a xr7 in</font><font color="#E5E5E5"> linux is used to</font>

431
00:22:30,400 --> 00:22:35,980
sometimes<font color="#E5E5E5"> store the</font><font color="#CCCCCC"> sis</font><font color="#E5E5E5"> call number we</font>

432
00:22:33,070 --> 00:22:37,780
want to make use of<font color="#E5E5E5"> kernel services you</font>

433
00:22:35,980 --> 00:22:41,130
invoke a system<font color="#CCCCCC"> policy Scott</font>

434
00:22:37,780 --> 00:22:44,350
well then<font color="#CCCCCC"> r7 is used for the cisco and</font>

435
00:22:41,130 --> 00:22:47,530
lastly<font color="#CCCCCC"> CP sr</font><font color="#E5E5E5"> is the flags register</font>

436
00:22:44,350 --> 00:22:49,480
current program status<font color="#E5E5E5"> register now on</font>

437
00:22:47,530 --> 00:22:51,129
has like several<font color="#E5E5E5"> privileged modes and</font>

438
00:22:49,480 --> 00:22:53,260
register banks and all we're<font color="#CCCCCC"> not gonna</font>

439
00:22:51,130 --> 00:22:59,169
<font color="#CCCCCC">get</font><font color="#E5E5E5"> to do that this is</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> good enough</font>

440
00:22:53,260 --> 00:23:03,520
<font color="#E5E5E5">for the userland viewpoint</font><font color="#CCCCCC"> okay and a</font>

441
00:22:59,169 --> 00:23:07,000
quick<font color="#CCCCCC"> look about the</font><font color="#E5E5E5"> CP sr is you have</font>

442
00:23:03,520 --> 00:23:09,010
<font color="#CCCCCC">32 bits in the CP sr the least</font>

443
00:23:07,000 --> 00:23:13,720
significant 5 bits indicate which

444
00:23:09,010 --> 00:23:16,090
<font color="#CCCCCC">privilege mode you're in like 1 0 0 0 0</font>

445
00:23:13,720 --> 00:23:18,490
<font color="#E5E5E5">will be user mode and then the others</font>

446
00:23:16,090 --> 00:23:20,860
will be like system mode supervisor mode

447
00:23:18,490 --> 00:23:22,809
<font color="#E5E5E5">fast in traffic you mode</font>

448
00:23:20,860 --> 00:23:24,879
there's several<font color="#CCCCCC"> privileged modes in</font>

449
00:23:22,809 --> 00:23:27,610
<font color="#CCCCCC">intel you</font><font color="#E5E5E5"> just have like user mode</font><font color="#CCCCCC"> and</font>

450
00:23:24,880 --> 00:23:28,750
kernel mode<font color="#CCCCCC"> ring-ring 300 ring</font><font color="#E5E5E5"> 0 here</font>

451
00:23:27,610 --> 00:23:34,389
you<font color="#CCCCCC"> have seven eight or even nine</font>

452
00:23:28,750 --> 00:23:39,040
different<font color="#CCCCCC"> privilege mode bit number</font><font color="#E5E5E5"> six</font>

453
00:23:34,390 --> 00:23:41,950
is the<font color="#CCCCCC"> combo flag if it is set the CPUs</font>

454
00:23:39,040 --> 00:23:45,340
in<font color="#E5E5E5"> thumb would if it is not set CPUs in</font>

455
00:23:41,950 --> 00:23:49,530
<font color="#E5E5E5">arm then there are these design D&S flag</font>

456
00:23:45,340 --> 00:23:52,990
<font color="#E5E5E5">this</font><font color="#CCCCCC"> 24th bit is the giselle flag at</font>

457
00:23:49,530 --> 00:23:55,540
some point the folks that<font color="#CCCCCC"> are</font><font color="#E5E5E5"> thought</font>

458
00:23:52,990 --> 00:24:00,120
that Jo is<font color="#E5E5E5"> going to be a thing so</font>

459
00:23:55,540 --> 00:24:03,909
several<font color="#CCCCCC"> arm CPUs</font><font color="#E5E5E5"> yeah kid you</font><font color="#CCCCCC"> know</font>

460
00:24:00,120 --> 00:24:06,729
<font color="#CCCCCC">several hard CPUs have</font><font color="#E5E5E5"> built-in hardware</font>

461
00:24:03,910 --> 00:24:08,380
<font color="#E5E5E5">support for Java bytecode</font><font color="#CCCCCC"> you flip this</font>

462
00:24:06,730 --> 00:24:11,530
thing into Giselle what this becomes

463
00:24:08,380 --> 00:24:13,390
like<font color="#CCCCCC"> a hardware Java machine except I've</font>

464
00:24:11,530 --> 00:24:16,899
seen more<font color="#E5E5E5"> documentation about it</font>

465
00:24:13,390 --> 00:24:19,090
I wonder why and I<font color="#E5E5E5"> have not met anybody</font>

466
00:24:16,900 --> 00:24:21,190
who's really used<font color="#E5E5E5"> Giselle for I'm hoping</font>

467
00:24:19,090 --> 00:24:23,709
to find<font color="#E5E5E5"> some folks from Cambridge</font>

468
00:24:21,190 --> 00:24:25,330
more how to use it and<font color="#E5E5E5"> get them drunk</font>

469
00:24:23,710 --> 00:24:30,730
and<font color="#E5E5E5"> then we can have shellcode in</font>

470
00:24:25,330 --> 00:24:33,100
<font color="#E5E5E5">Giselle there's no</font><font color="#CCCCCC"> job if</font><font color="#E5E5E5"> I'm sure it's</font>

471
00:24:30,730 --> 00:24:35,500
possible<font color="#CCCCCC"> it's just like some research</font>

472
00:24:33,100 --> 00:24:37,360
meeting to happen<font color="#E5E5E5"> if you guys find that</font>

473
00:24:35,500 --> 00:24:40,330
<font color="#E5E5E5">out please tell us how it's done</font><font color="#CCCCCC"> right</font><font color="#E5E5E5"> I</font>

474
00:24:37,360 --> 00:24:44,189
mean you can go<font color="#E5E5E5"> publish it claim claim</font>

475
00:24:40,330 --> 00:24:47,949
all<font color="#CCCCCC"> the</font><font color="#E5E5E5"> frames speak at</font><font color="#CCCCCC"> 44 gone</font><font color="#E5E5E5"> but Lisa</font>

476
00:24:44,190 --> 00:24:49,690
<font color="#CCCCCC">and then you have these flags</font><font color="#E5E5E5"> the</font>

477
00:24:47,950 --> 00:24:52,690
negative<font color="#E5E5E5"> zero carrying overflow</font>

478
00:24:49,690 --> 00:24:54,430
underflow these are set typically the

479
00:24:52,690 --> 00:24:56,830
same type of<font color="#E5E5E5"> flags as you have one until</font>

480
00:24:54,430 --> 00:25:00,520
<font color="#CCCCCC">this set when you perform</font><font color="#E5E5E5"> computation</font>

481
00:24:56,830 --> 00:25:02,530
and<font color="#E5E5E5"> all that now whenever we're</font>

482
00:25:00,520 --> 00:25:05,800
debugging or<font color="#E5E5E5"> we you know we're looking</font>

483
00:25:02,530 --> 00:25:11,500
<font color="#E5E5E5">at gdb how many of you have suffered gdb</font>

484
00:25:05,800 --> 00:25:13,389
before several<font color="#CCCCCC"> right is terrible and</font><font color="#E5E5E5"> gdb</font>

485
00:25:11,500 --> 00:25:15,730
just throws up big bunches of hex

486
00:25:13,390 --> 00:25:18,820
numbers very hard to make sense<font color="#E5E5E5"> of it</font>

487
00:25:15,730 --> 00:25:21,130
one of<font color="#CCCCCC"> the things that we never bothered</font>

488
00:25:18,820 --> 00:25:23,260
in<font color="#E5E5E5"> the Intel world really is like we</font>

489
00:25:21,130 --> 00:25:26,050
rarely look<font color="#E5E5E5"> at the flags register unless</font>

490
00:25:23,260 --> 00:25:28,120
is a condition but<font color="#E5E5E5"> in our with every</font>

491
00:25:26,050 --> 00:25:29,280
step along the<font color="#CCCCCC"> way you need to know</font>

492
00:25:28,120 --> 00:25:31,540
which<font color="#E5E5E5"> mode you</font><font color="#CCCCCC"> are in</font>

493
00:25:29,280 --> 00:25:33,670
like especially<font color="#CCCCCC"> when</font><font color="#E5E5E5"> dealing with</font>

494
00:25:31,540 --> 00:25:35,260
<font color="#E5E5E5">shellcode using like Oh have we</font>

495
00:25:33,670 --> 00:25:37,930
accidentally flipped with some<font color="#E5E5E5"> moral</font>

496
00:25:35,260 --> 00:25:41,110
<font color="#E5E5E5">what you must keep an eye on this flag</font>

497
00:25:37,930 --> 00:25:43,870
<font color="#E5E5E5">and typically gdb won't break these bits</font>

498
00:25:41,110 --> 00:25:46,330
out to you separately so you have to if

499
00:25:43,870 --> 00:25:49,239
you<font color="#CCCCCC"> don't have any special</font><font color="#E5E5E5"> extensions or</font>

500
00:25:46,330 --> 00:25:51,669
superpowers to gdb<font color="#CCCCCC"> added</font><font color="#E5E5E5"> you will have</font>

501
00:25:49,240 --> 00:25:54,310
to look at<font color="#E5E5E5"> the CPS on yourself and see</font>

502
00:25:51,670 --> 00:25:57,490
<font color="#E5E5E5">if the last byte is 30 then it is thermo</font>

503
00:25:54,310 --> 00:26:02,080
last bet is 10 that<font color="#E5E5E5"> is our</font><font color="#CCCCCC"> mode we're</font>

504
00:25:57,490 --> 00:26:04,810
going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> use gdb with</font><font color="#CCCCCC"> gef that is gdb</font>

505
00:26:02,080 --> 00:26:08,580
enhanced features it's a set of Python

506
00:26:04,810 --> 00:26:13,149
scripts written by huggsy and they make

507
00:26:08,580 --> 00:26:16,750
gdb great again that's<font color="#CCCCCC"> catch phrase</font><font color="#E5E5E5"> but</font>

508
00:26:13,150 --> 00:26:19,150
<font color="#E5E5E5">they basically he it's it's like you</font>

509
00:26:16,750 --> 00:26:22,270
heard of the<font color="#E5E5E5"> Python</font><font color="#CCCCCC"> beta extensions for</font>

510
00:26:19,150 --> 00:26:24,820
x86<font color="#CCCCCC"> then decode the flags it show you</font>

511
00:26:22,270 --> 00:26:28,389
the stack<font color="#E5E5E5"> frame show you the little bit</font>

512
00:26:24,820 --> 00:26:33,040
of<font color="#E5E5E5"> code snippet so gif does exactly this</font>

513
00:26:28,390 --> 00:26:34,690
<font color="#E5E5E5">puts cross-platform great arm</font>

514
00:26:33,040 --> 00:26:35,110
instructions I mentioned they are all

515
00:26:34,690 --> 00:26:37,059
free

516
00:26:35,110 --> 00:26:39,879
landfall by down to<font color="#CCCCCC"> buy some</font>

517
00:26:37,059 --> 00:26:43,420
instructions<font color="#CCCCCC"> inline barrel</font><font color="#E5E5E5"> shifter few</font>

518
00:26:39,880 --> 00:26:45,660
instructions many combinations<font color="#CCCCCC"> thumb we</font>

519
00:26:43,420 --> 00:26:47,679
talked about<font color="#E5E5E5"> what thumb instructions are</font>

520
00:26:45,660 --> 00:26:50,860
<font color="#E5E5E5">they the most popularly used</font>

521
00:26:47,679 --> 00:26:54,460
instructions<font color="#E5E5E5"> talk about assembly</font>

522
00:26:50,860 --> 00:26:57,370
language this gives you a<font color="#CCCCCC"> quick view</font>

523
00:26:54,460 --> 00:27:01,480
<font color="#E5E5E5">into how</font><font color="#CCCCCC"> the assembly notation is</font>

524
00:26:57,370 --> 00:27:04,629
<font color="#CCCCCC">written in are a few things you always</font>

525
00:27:01,480 --> 00:27:09,220
<font color="#E5E5E5">have the opto the mnemonic of the</font>

526
00:27:04,630 --> 00:27:15,700
instruction at<font color="#CCCCCC"> the first</font><font color="#E5E5E5"> then you have</font>

527
00:27:09,220 --> 00:27:19,390
<font color="#E5E5E5">deep target</font><font color="#CCCCCC"> if you're a big fan of AT&T</font>

528
00:27:15,700 --> 00:27:22,030
<font color="#E5E5E5">assembly syntax this will totally</font><font color="#CCCCCC"> not</font>

529
00:27:19,390 --> 00:27:23,470
make sense<font color="#E5E5E5"> to</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> but then</font><font color="#CCCCCC"> again</font><font color="#E5E5E5"> you</font>

530
00:27:22,030 --> 00:27:25,540
will<font color="#E5E5E5"> find that the whole world is</font>

531
00:27:23,470 --> 00:27:29,710
<font color="#CCCCCC">completely weird because nobody can</font><font color="#E5E5E5"> make</font>

532
00:27:25,540 --> 00:27:31,750
sense<font color="#E5E5E5"> of you either this</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> you always</font>

533
00:27:29,710 --> 00:27:33,790
have destination source and other

534
00:27:31,750 --> 00:27:42,190
<font color="#E5E5E5">operators I cannot read it in</font><font color="#CCCCCC"> T sentence</font>

535
00:27:33,790 --> 00:27:45,520
<font color="#CCCCCC">it</font><font color="#E5E5E5"> it kills me</font><font color="#CCCCCC"> so the first operand will</font>

536
00:27:42,190 --> 00:27:47,740
always be a register always and this

537
00:27:45,520 --> 00:27:50,620
will be the target<font color="#CCCCCC"> of</font><font color="#E5E5E5"> any computation of</font>

538
00:27:47,740 --> 00:27:51,850
any activity that<font color="#E5E5E5"> you perform for</font>

539
00:27:50,620 --> 00:27:58,049
example<font color="#CCCCCC"> there is more</font>

540
00:27:51,850 --> 00:28:02,110
this is load immediate move<font color="#CCCCCC"> R 0 comma 5</font>

541
00:27:58,049 --> 00:28:05,440
<font color="#E5E5E5">all numbers by default in R and treated</font>

542
00:28:02,110 --> 00:28:08,350
as decimal integers<font color="#CCCCCC"> and they will be</font>

543
00:28:05,440 --> 00:28:15,160
represented<font color="#CCCCCC"> with a hash these are not</font>

544
00:28:08,350 --> 00:28:18,129
hash tags<font color="#CCCCCC"> a</font><font color="#E5E5E5"> decimal</font><font color="#CCCCCC"> number 5 the origins</font>

545
00:28:15,160 --> 00:28:20,679
<font color="#E5E5E5">of this goes back</font><font color="#CCCCCC"> to 6</font><font color="#E5E5E5"> 5 0</font><font color="#CCCCCC"> to assembly</font>

546
00:28:18,130 --> 00:28:23,890
because 6 5 0<font color="#CCCCCC"> 2 also they used hash for</font>

547
00:28:20,679 --> 00:28:26,290
all all numbers and they<font color="#E5E5E5"> were by default</font>

548
00:28:23,890 --> 00:28:31,030
treated as decimal<font color="#E5E5E5"> so this will set R 0</font>

549
00:28:26,290 --> 00:28:33,730
<font color="#CCCCCC">equal to 5 so 5 gets loaded into r0 some</font>

550
00:28:31,030 --> 00:28:36,330
instructions will have multiple operands

551
00:28:33,730 --> 00:28:39,280
typically<font color="#E5E5E5"> Intel always has two operands</font>

552
00:28:36,330 --> 00:28:41,230
<font color="#E5E5E5">arm instructions may have</font><font color="#CCCCCC"> two three four</font>

553
00:28:39,280 --> 00:28:43,870
or sometimes<font color="#CCCCCC"> even five operates and the</font>

554
00:28:41,230 --> 00:28:46,480
way<font color="#CCCCCC"> you read it</font><font color="#E5E5E5"> is you read them from</font>

555
00:28:43,870 --> 00:28:48,280
<font color="#E5E5E5">left to right but are you that example</font>

556
00:28:46,480 --> 00:28:48,990
here's<font color="#E5E5E5"> the other instruction forget the</font>

557
00:28:48,280 --> 00:28:53,879
gtp

558
00:28:48,990 --> 00:29:02,010
<font color="#CCCCCC">and r2 r1 hash three the way you read it</font>

559
00:28:53,880 --> 00:29:04,200
is r2<font color="#E5E5E5"> equals r1 plus three in</font><font color="#CCCCCC"> internal</font>

560
00:29:02,010 --> 00:29:06,810
<font color="#E5E5E5">you'll always have the same register</font>

561
00:29:04,200 --> 00:29:08,610
being added to in this<font color="#E5E5E5"> case now you can</font>

562
00:29:06,810 --> 00:29:11,179
have<font color="#E5E5E5"> two different</font><font color="#CCCCCC"> things and then they</font>

563
00:29:08,610 --> 00:29:15,500
<font color="#E5E5E5">get added into a totally third register</font>

564
00:29:11,180 --> 00:29:19,230
now this GT part is the conditional flag

565
00:29:15,500 --> 00:29:21,450
it<font color="#E5E5E5"> is the same instruction add but when</font>

566
00:29:19,230 --> 00:29:23,880
you suffix<font color="#E5E5E5"> GT to it this instruction</font>

567
00:29:21,450 --> 00:29:27,750
turns conditional which means this

568
00:29:23,880 --> 00:29:30,150
instruction will trigger<font color="#E5E5E5"> only</font><font color="#CCCCCC"> yes the</font>

569
00:29:27,750 --> 00:29:33,540
greater than condition is met in the

570
00:29:30,150 --> 00:29:36,210
flags<font color="#E5E5E5"> most used when you perform a</font>

571
00:29:33,540 --> 00:29:38,520
comparison<font color="#E5E5E5"> and then you do something</font>

572
00:29:36,210 --> 00:29:43,590
<font color="#CCCCCC">like</font><font color="#E5E5E5"> this if let's say if you want to do</font>

573
00:29:38,520 --> 00:29:48,360
a<font color="#CCCCCC"> you want to do</font><font color="#E5E5E5"> something like if it is</font>

574
00:29:43,590 --> 00:29:50,429
negative<font color="#E5E5E5"> then do this like if let's</font><font color="#CCCCCC"> say</font>

575
00:29:48,360 --> 00:29:53,100
<font color="#E5E5E5">you take two</font><font color="#CCCCCC"> numbers a and B if a is</font>

576
00:29:50,430 --> 00:29:56,580
greater<font color="#CCCCCC"> than B you want to subtract B</font>

577
00:29:53,100 --> 00:29:59,490
minus a or<font color="#E5E5E5"> sorry if a is greater</font><font color="#CCCCCC"> than B</font>

578
00:29:56,580 --> 00:30:01,740
you<font color="#E5E5E5"> want</font><font color="#CCCCCC"> to do a minus B if</font><font color="#E5E5E5"> is less than</font>

579
00:29:59,490 --> 00:30:04,230
B you<font color="#E5E5E5"> want to</font><font color="#CCCCCC"> B minus a you know</font>

580
00:30:01,740 --> 00:30:09,150
comparison between a and B then<font color="#CCCCCC"> you do</font>

581
00:30:04,230 --> 00:30:11,250
some GT and some LT or sub<font color="#E5E5E5"> le sub less</font>

582
00:30:09,150 --> 00:30:13,320
than equals so only one<font color="#E5E5E5"> of those</font><font color="#CCCCCC"> two</font>

583
00:30:11,250 --> 00:30:15,960
instructions<font color="#CCCCCC"> will trigger based on the</font>

584
00:30:13,320 --> 00:30:17,730
condition<font color="#E5E5E5"> and then the other you so you</font>

585
00:30:15,960 --> 00:30:20,010
avoid excessive branching with this

586
00:30:17,730 --> 00:30:22,350
conditional instruction and then you

587
00:30:20,010 --> 00:30:26,690
have<font color="#E5E5E5"> instructions like move with</font><font color="#CCCCCC"> s this</font>

588
00:30:22,350 --> 00:30:30,360
S is<font color="#E5E5E5"> just to</font><font color="#CCCCCC"> update the status registers</font>

589
00:30:26,690 --> 00:30:33,420
after the result of an instruction let's

590
00:30:30,360 --> 00:30:37,169
not worry about<font color="#E5E5E5"> that to watch some</font>

591
00:30:33,420 --> 00:30:40,590
conventions when writing assembly in<font color="#E5E5E5"> the</font>

592
00:30:37,170 --> 00:30:43,320
assembler<font color="#E5E5E5"> you have hash n which is a</font>

593
00:30:40,590 --> 00:30:45,689
<font color="#E5E5E5">decimal integer by default if you like</font>

594
00:30:43,320 --> 00:30:48,360
hex you can always<font color="#E5E5E5"> use the 0x notation</font>

595
00:30:45,690 --> 00:30:52,500
to represent hex numbers and you<font color="#CCCCCC"> can use</font>

596
00:30:48,360 --> 00:30:54,330
<font color="#E5E5E5">0 B to even represent binary integers</font><font color="#CCCCCC"> by</font>

597
00:30:52,500 --> 00:30:55,980
<font color="#E5E5E5">default whenever you invoke the</font>

598
00:30:54,330 --> 00:31:00,179
assembler<font color="#CCCCCC"> all your code will be</font>

599
00:30:55,980 --> 00:31:02,940
assembled in our<font color="#CCCCCC"> mode you can explicitly</font>

600
00:31:00,180 --> 00:31:08,190
have assembler directives like<font color="#E5E5E5"> dot</font>

601
00:31:02,940 --> 00:31:11,340
code 32<font color="#E5E5E5"> or dot code 16 is not</font><font color="#CCCCCC"> code space</font>

602
00:31:08,190 --> 00:31:13,499
32 or dot workspace 16<font color="#CCCCCC"> dot port 3000</font>

603
00:31:11,340 --> 00:31:16,529
<font color="#E5E5E5">means all subsequent instructions will</font>

604
00:31:13,499 --> 00:31:18,299
<font color="#CCCCCC">be assembled in our mode dot</font><font color="#E5E5E5"> port 16 all</font>

605
00:31:16,529 --> 00:31:33,919
subsequent instructions will<font color="#CCCCCC"> be</font>

606
00:31:18,299 --> 00:31:39,269
assembled in some popular instructions

607
00:31:33,919 --> 00:31:42,359
<font color="#E5E5E5">this is pretty</font><font color="#CCCCCC"> much</font><font color="#E5E5E5"> the more or less all</font>

608
00:31:39,269 --> 00:31:44,519
the<font color="#E5E5E5"> instructions or a large subset of it</font>

609
00:31:42,359 --> 00:31:48,269
<font color="#CCCCCC">I'm kind</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> tried</font><font color="#E5E5E5"> to break them up into</font>

610
00:31:44,519 --> 00:31:50,940
groups<font color="#CCCCCC"> so the main workhorse instruction</font>

611
00:31:48,269 --> 00:31:53,429
is move which is<font color="#E5E5E5"> you load a value</font><font color="#CCCCCC"> into a</font>

612
00:31:50,940 --> 00:31:56,279
register or<font color="#CCCCCC"> you move the contents of one</font>

613
00:31:53,429 --> 00:31:59,989
register into another then all these

614
00:31:56,279 --> 00:32:03,269
blue ones<font color="#E5E5E5"> are arithmetic instructions</font>

615
00:31:59,989 --> 00:32:06,690
<font color="#CCCCCC">mvn is like a negated struction you you</font>

616
00:32:03,269 --> 00:32:09,809
move a negative value<font color="#E5E5E5"> add subtract</font>

617
00:32:06,690 --> 00:32:12,809
multiply there is no divide instruction

618
00:32:09,809 --> 00:32:14,940
<font color="#E5E5E5">I am doesn't believe in division well</font>

619
00:32:12,809 --> 00:32:16,859
it's too expensive and hardware so they

620
00:32:14,940 --> 00:32:18,629
say you rarely you guys really<font color="#E5E5E5"> use</font>

621
00:32:16,859 --> 00:32:22,158
division<font color="#E5E5E5"> anyways so if you want to do it</font>

622
00:32:18,629 --> 00:32:26,029
<font color="#E5E5E5">Emily</font><font color="#CCCCCC"> at it in software don't bother us</font>

623
00:32:22,159 --> 00:32:28,710
you do have<font color="#CCCCCC"> LS l and LS r which are</font>

624
00:32:26,029 --> 00:32:31,259
logical shift<font color="#E5E5E5"> left logical shift right</font>

625
00:32:28,710 --> 00:32:33,139
the big shift instructions you have

626
00:32:31,259 --> 00:32:35,460
arithmetic shift<font color="#E5E5E5"> right</font>

627
00:32:33,139 --> 00:32:38,459
there's no arithmetic shift left<font color="#E5E5E5"> it's</font>

628
00:32:35,460 --> 00:32:41,340
all LS l is equal to<font color="#CCCCCC"> SL anyways</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> you</font>

629
00:32:38,460 --> 00:32:44,960
<font color="#CCCCCC">have rotate right there's</font><font color="#E5E5E5"> no rotate left</font>

630
00:32:41,340 --> 00:32:47,908
rotate left<font color="#CCCCCC"> to a very large rotate right</font>

631
00:32:44,960 --> 00:32:49,710
so<font color="#E5E5E5"> are trying to say same on</font>

632
00:32:47,909 --> 00:32:51,599
instructions<font color="#E5E5E5"> if they're not necessary</font>

633
00:32:49,710 --> 00:32:53,419
<font color="#E5E5E5">because they don't expect you to write</font>

634
00:32:51,599 --> 00:32:56,330
the<font color="#E5E5E5"> assembly by hand they'll always</font>

635
00:32:53,419 --> 00:33:00,059
expect a good compiler to generate

636
00:32:56,330 --> 00:33:02,299
efficient<font color="#E5E5E5"> driscoll basically if you have</font>

637
00:33:00,059 --> 00:33:05,399
a compiler<font color="#E5E5E5"> that's really rotten compiler</font>

638
00:33:02,299 --> 00:33:07,619
<font color="#E5E5E5">CPUs will be terrible but if you have a</font>

639
00:33:05,399 --> 00:33:12,080
good optimizing compilers<font color="#E5E5E5"> and</font><font color="#CCCCCC"> receive</font>

640
00:33:07,619 --> 00:33:12,080
use will<font color="#E5E5E5"> be very very fast</font>

641
00:33:15,540 --> 00:33:19,290
I think this is pretty<font color="#CCCCCC"> much it and then</font>

642
00:33:17,430 --> 00:33:24,680
there are<font color="#E5E5E5"> some extensions like vector</font>

643
00:33:19,290 --> 00:33:29,270
processing instructions<font color="#CCCCCC"> around 100 okay</font>

644
00:33:24,680 --> 00:33:36,900
I'm sure but I<font color="#E5E5E5"> honestly I didn't even</font>

645
00:33:29,270 --> 00:33:38,670
<font color="#E5E5E5">what as much as on Intel these are the</font>

646
00:33:36,900 --> 00:33:41,790
big<font color="#E5E5E5"> boys instruction where this is</font>

647
00:33:38,670 --> 00:33:45,600
<font color="#CCCCCC">compare which will basically set the</font>

648
00:33:41,790 --> 00:33:50,850
<font color="#CCCCCC">flags</font><font color="#E5E5E5"> when you compare two values you</font>

649
00:33:45,600 --> 00:33:54,540
know<font color="#E5E5E5"> and</font><font color="#CCCCCC"> bitwise then or is</font><font color="#E5E5E5"> not a type</font>

650
00:33:50,850 --> 00:33:56,760
of<font color="#E5E5E5"> good is water and I always screw up</font>

651
00:33:54,540 --> 00:33:58,649
<font color="#CCCCCC">in</font><font color="#E5E5E5"> writing the or instruction</font><font color="#CCCCCC"> the</font>

652
00:33:56,760 --> 00:34:00,810
assembler complains I<font color="#E5E5E5"> say okay damn it</font>

653
00:33:58,650 --> 00:34:04,230
<font color="#CCCCCC">I'll go and fix it but the more annoying</font>

654
00:34:00,810 --> 00:34:07,020
thing is they they call it a or and not

655
00:34:04,230 --> 00:34:09,179
X or<font color="#CCCCCC"> somebody's are</font><font color="#E5E5E5"> winning the</font><font color="#CCCCCC"> Pooh</font>

656
00:34:07,020 --> 00:34:11,969
<font color="#CCCCCC">Fair for sure</font>

657
00:34:09,179 --> 00:34:14,370
exclusive or<font color="#E5E5E5"> is Evo is another thing</font>

658
00:34:11,969 --> 00:34:17,428
<font color="#E5E5E5">that</font><font color="#CCCCCC"> I always make a mistake with so</font>

659
00:34:14,370 --> 00:34:24,089
these are bitwise these ones red ones

660
00:34:17,429 --> 00:34:29,429
are<font color="#CCCCCC"> load store</font><font color="#E5E5E5"> LDR and</font><font color="#CCCCCC"> STR this will</font>

661
00:34:24,090 --> 00:34:31,770
load a pointer<font color="#E5E5E5"> into a register STR will</font>

662
00:34:29,429 --> 00:34:34,320
store a value from a register<font color="#CCCCCC"> into our</font>

663
00:34:31,770 --> 00:34:36,690
<font color="#E5E5E5">memory trace so this is where you read</font>

664
00:34:34,320 --> 00:34:39,270
<font color="#E5E5E5">memory the contents of a memory by</font>

665
00:34:36,690 --> 00:34:41,639
address into a register this<font color="#E5E5E5"> is where</font>

666
00:34:39,270 --> 00:34:44,449
you store<font color="#CCCCCC"> the value in the register</font><font color="#E5E5E5"> into</font>

667
00:34:41,639 --> 00:34:47,429
an<font color="#E5E5E5"> address in memory</font>

668
00:34:44,449 --> 00:34:49,949
<font color="#E5E5E5">you also have LD m and s TM you can do</font>

669
00:34:47,429 --> 00:34:53,280
load multiple and store multiple<font color="#E5E5E5"> so you</font>

670
00:34:49,949 --> 00:34:55,379
can like read<font color="#E5E5E5"> eight elements of a time</font>

671
00:34:53,280 --> 00:34:58,380
and populate them<font color="#CCCCCC"> in eight registers in</font>

672
00:34:55,379 --> 00:35:00,299
one go<font color="#CCCCCC"> and you can write them back you</font>

673
00:34:58,380 --> 00:35:03,690
can write multiple registers back to

674
00:35:00,300 --> 00:35:06,840
memory as well even push and pop these

675
00:35:03,690 --> 00:35:09,000
are also variants<font color="#E5E5E5"> of load store in Intel</font>

676
00:35:06,840 --> 00:35:11,670
<font color="#E5E5E5">you can only push one element or pop one</font>

677
00:35:09,000 --> 00:35:17,090
element at a time<font color="#CCCCCC"> Iran</font><font color="#E5E5E5"> we can like push</font>

678
00:35:11,670 --> 00:35:19,740
n number<font color="#CCCCCC"> of registers and</font><font color="#E5E5E5"> pop in one go</font>

679
00:35:17,090 --> 00:35:21,510
then the<font color="#CCCCCC"> for branch instructions I</font>

680
00:35:19,740 --> 00:35:24,029
<font color="#E5E5E5">already talked to you about there's a</font>

681
00:35:21,510 --> 00:35:26,970
simple branch which is<font color="#E5E5E5"> like a jump this</font>

682
00:35:24,030 --> 00:35:29,310
branch will link then<font color="#E5E5E5"> you have branch</font>

683
00:35:26,970 --> 00:35:32,850
and exchange exchange me

684
00:35:29,310 --> 00:35:34,799
slip the thumb bit<font color="#E5E5E5"> it's needed if you're</font>

685
00:35:32,850 --> 00:35:37,140
<font color="#E5E5E5">going from an arm function to a thumb</font>

686
00:35:34,800 --> 00:35:38,760
function it will flip the bit if you're

687
00:35:37,140 --> 00:35:40,770
going from a thumb function to an arm

688
00:35:38,760 --> 00:35:43,230
function<font color="#CCCCCC"> we'll also</font><font color="#E5E5E5"> flip the bit so</font>

689
00:35:40,770 --> 00:35:46,200
exchange<font color="#E5E5E5"> will switch the mood only if</font>

690
00:35:43,230 --> 00:35:48,060
<font color="#E5E5E5">needed you can also branch with exchange</font>

691
00:35:46,200 --> 00:35:50,460
from an arm<font color="#CCCCCC"> function to an arm function</font>

692
00:35:48,060 --> 00:35:52,290
and<font color="#E5E5E5"> no bit will be flip</font><font color="#CCCCCC"> it'll look at</font>

693
00:35:50,460 --> 00:35:54,180
the address and figure<font color="#CCCCCC"> out whether it's</font>

694
00:35:52,290 --> 00:35:56,970
an arm address or a thumb<font color="#E5E5E5"> batarus and do</font>

695
00:35:54,180 --> 00:35:59,220
the bit flipping only if it<font color="#E5E5E5"> is going</font>

696
00:35:56,970 --> 00:36:01,279
from one<font color="#E5E5E5"> mode to another if it is the</font>

697
00:35:59,220 --> 00:36:03,930
same mode<font color="#E5E5E5"> it's not gonna flip bits</font>

698
00:36:01,280 --> 00:36:06,000
there's a<font color="#CCCCCC"> bit</font><font color="#E5E5E5"> confusion sometimes that</font>

699
00:36:03,930 --> 00:36:08,430
when you begin writing assembly you

700
00:36:06,000 --> 00:36:10,830
think<font color="#E5E5E5"> to</font><font color="#CCCCCC"> be X will always flip the mode</font>

701
00:36:08,430 --> 00:36:14,339
no not necessary

702
00:36:10,830 --> 00:36:16,920
and<font color="#CCCCCC"> BLX</font><font color="#E5E5E5"> is like branch with link and</font>

703
00:36:14,340 --> 00:36:19,020
exchange<font color="#E5E5E5"> so you save the return address</font>

704
00:36:16,920 --> 00:36:25,020
<font color="#E5E5E5">in the link register and exchange if</font>

705
00:36:19,020 --> 00:36:27,450
needed<font color="#E5E5E5"> and lastly the</font><font color="#CCCCCC"> SWI instruction is</font>

706
00:36:25,020 --> 00:36:30,240
the<font color="#E5E5E5"> same as the SVC instruction this is</font>

707
00:36:27,450 --> 00:36:33,960
<font color="#CCCCCC">supervisory call or a</font><font color="#E5E5E5"> software interrupt</font>

708
00:36:30,240 --> 00:36:35,609
<font color="#CCCCCC">this is like trap</font><font color="#E5E5E5"> to kernel use it when</font>

709
00:36:33,960 --> 00:36:40,830
you want<font color="#CCCCCC"> to invoke a sis college they</font>

710
00:36:35,610 --> 00:36:44,460
can interrupt<font color="#CCCCCC"> ok so this</font><font color="#E5E5E5"> kind of takes</font>

711
00:36:40,830 --> 00:36:47,759
us through<font color="#CCCCCC"> the basics of registers arm</font>

712
00:36:44,460 --> 00:36:50,610
CPU<font color="#CCCCCC"> end</font><font color="#E5E5E5"> instructions what we going to do</font>

713
00:36:47,760 --> 00:36:55,460
next is<font color="#CCCCCC"> just put</font><font color="#E5E5E5"> the first little bits</font>

714
00:36:50,610 --> 00:36:58,370
of assembly together<font color="#CCCCCC"> and then we will</font>

715
00:36:55,460 --> 00:37:01,710
study<font color="#E5E5E5"> we'll just write our own assembly</font>

716
00:36:58,370 --> 00:37:03,900
then we will do a very<font color="#E5E5E5"> simple stack</font>

717
00:37:01,710 --> 00:37:05,940
overflow exploit<font color="#E5E5E5"> and then we'll write</font>

718
00:37:03,900 --> 00:37:09,590
<font color="#CCCCCC">the</font><font color="#E5E5E5"> exact shell code for it so that's</font>

719
00:37:05,940 --> 00:37:09,590
<font color="#E5E5E5">how the rest of the workshops</font><font color="#CCCCCC"> Kuroko</font>

720
00:37:17,210 --> 00:37:23,940
<font color="#CCCCCC">we'll do the first yeah we can just go</font>

721
00:37:21,090 --> 00:37:27,810
<font color="#E5E5E5">with the</font><font color="#CCCCCC"> first bits of the assembly</font>

722
00:37:23,940 --> 00:37:30,150
<font color="#E5E5E5">length you know just</font><font color="#CCCCCC"> simple</font><font color="#E5E5E5"> first or not</font>

723
00:37:27,810 --> 00:37:33,029
and that<font color="#E5E5E5"> will we'll try it out we'll try</font>

724
00:37:30,150 --> 00:37:34,380
it out<font color="#CCCCCC"> on the we'll try it</font><font color="#E5E5E5"> out of the</font>

725
00:37:33,030 --> 00:37:36,330
<font color="#CCCCCC">Raspberry Pi let's just get the</font>

726
00:37:34,380 --> 00:37:39,270
assembler going and you<font color="#E5E5E5"> know run one</font>

727
00:37:36,330 --> 00:37:42,710
program gdb single step and then that

728
00:37:39,270 --> 00:37:48,080
<font color="#E5E5E5">that should should be</font><font color="#CCCCCC"> good</font>

729
00:37:42,710 --> 00:37:51,140
so let's get right into<font color="#E5E5E5"> it okay so this</font>

730
00:37:48,080 --> 00:38:02,230
is a<font color="#E5E5E5"> structure of a very simple assembly</font>

731
00:37:51,140 --> 00:38:05,839
program<font color="#E5E5E5"> right so our code goes obviously</font>

732
00:38:02,230 --> 00:38:09,200
into the text section which means that

733
00:38:05,840 --> 00:38:11,390
we<font color="#E5E5E5"> need some starting point</font><font color="#CCCCCC"> our default</font>

734
00:38:09,200 --> 00:38:15,080
starting point is on the<font color="#E5E5E5"> call on the</font>

735
00:38:11,390 --> 00:38:18,350
line start and this is where<font color="#CCCCCC"> our code</font>

736
00:38:15,080 --> 00:38:22,160
goes so we have to<font color="#E5E5E5"> indicate</font><font color="#CCCCCC"> that we</font>

737
00:38:18,350 --> 00:38:28,069
start with<font color="#CCCCCC"> our</font><font color="#E5E5E5"> mode and we do it by</font>

738
00:38:22,160 --> 00:38:31,730
specifying<font color="#E5E5E5"> code 32 later we will switch</font>

739
00:38:28,070 --> 00:38:33,470
<font color="#E5E5E5">to</font><font color="#CCCCCC"> thumb mode and then</font><font color="#E5E5E5"> we need to</font>

740
00:38:31,730 --> 00:38:37,120
indicate<font color="#CCCCCC"> that we are thumb mode so we</font>

741
00:38:33,470 --> 00:38:41,180
will write code 16

742
00:38:37,120 --> 00:38:43,549
<font color="#E5E5E5">all right so this</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> how we assemble our</font>

743
00:38:41,180 --> 00:38:46,279
assembly program<font color="#E5E5E5"> just two simple</font>

744
00:38:43,550 --> 00:38:50,090
commands is the assembler then the

745
00:38:46,280 --> 00:38:53,630
linker<font color="#CCCCCC"> and</font><font color="#E5E5E5"> then we get our program how</font>

746
00:38:50,090 --> 00:38:56,600
we inspect our assembly code<font color="#E5E5E5"> very simple</font>

747
00:38:53,630 --> 00:39:02,090
with object dump<font color="#E5E5E5"> most of you might know</font>

748
00:38:56,600 --> 00:39:04,940
the tool already and<font color="#E5E5E5"> yet gdb very</font>

749
00:39:02,090 --> 00:39:09,140
<font color="#E5E5E5">popular tool and some of you have</font>

750
00:39:04,940 --> 00:39:11,720
<font color="#E5E5E5">already some experience with gdb</font><font color="#CCCCCC"> we will</font>

751
00:39:09,140 --> 00:39:14,810
cover<font color="#E5E5E5"> some basics</font><font color="#CCCCCC"> so we will</font><font color="#E5E5E5"> just load</font>

752
00:39:11,720 --> 00:39:20,230
our program into gdb we set a breakpoint

753
00:39:14,810 --> 00:39:20,230
at<font color="#CCCCCC"> underline start and we'll run it</font>

754
00:39:20,350 --> 00:39:28,730
right so on the right you<font color="#CCCCCC"> see the</font><font color="#E5E5E5"> basic</font>

755
00:39:24,440 --> 00:39:30,770
<font color="#E5E5E5">commands that we will need in gdb how to</font>

756
00:39:28,730 --> 00:39:35,450
set a<font color="#E5E5E5"> breakpoint either you can write</font>

757
00:39:30,770 --> 00:39:40,130
break<font color="#CCCCCC"> with the with with</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> start</font><font color="#E5E5E5"> you</font>

758
00:39:35,450 --> 00:39:45,319
can<font color="#CCCCCC"> just write be run continue or just</font>

759
00:39:40,130 --> 00:39:48,580
see you can use step<font color="#E5E5E5"> e to step into an</font>

760
00:39:45,320 --> 00:39:51,230
instruction<font color="#E5E5E5"> or next</font><font color="#CCCCCC"> for next instruction</font>

761
00:39:48,580 --> 00:39:53,630
<font color="#CCCCCC">info registers will show you all</font><font color="#E5E5E5"> the</font>

762
00:39:51,230 --> 00:39:57,040
registers however you will see the

763
00:39:53,630 --> 00:39:57,040
registers in gdb anyway

764
00:39:57,319 --> 00:40:05,279
yeah so and<font color="#CCCCCC"> this very interesting syntax</font>

765
00:40:01,770 --> 00:40:10,619
you see here is<font color="#E5E5E5"> basically the</font><font color="#CCCCCC"> X stands</font>

766
00:40:05,280 --> 00:40:14,220
<font color="#E5E5E5">for examine and</font><font color="#CCCCCC"> xx like 20 we want</font><font color="#E5E5E5"> 20</font>

767
00:40:10,619 --> 00:40:21,980
words in<font color="#E5E5E5"> hexadecimal format</font><font color="#CCCCCC"> that's what</font>

768
00:40:14,220 --> 00:40:26,098
the second X stands<font color="#CCCCCC"> for right</font><font color="#E5E5E5"> so very</font>

769
00:40:21,980 --> 00:40:29,240
<font color="#CCCCCC">simple</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> is how it looks</font><font color="#E5E5E5"> like it</font>

770
00:40:26,099 --> 00:40:32,309
<font color="#E5E5E5">looks a little bit more fancy</font><font color="#CCCCCC"> on our</font>

771
00:40:29,240 --> 00:40:35,790
like<font color="#E5E5E5"> yeah</font><font color="#CCCCCC"> on the real gdb</font><font color="#E5E5E5"> with a little</font>

772
00:40:32,309 --> 00:40:40,890
bit<font color="#E5E5E5"> more colors but here you can</font><font color="#CCCCCC"> see</font><font color="#E5E5E5"> all</font>

773
00:40:35,790 --> 00:40:42,599
the registers<font color="#E5E5E5"> so everything we have a</font>

774
00:40:40,890 --> 00:40:47,670
good<font color="#E5E5E5"> overview</font><font color="#CCCCCC"> over</font><font color="#E5E5E5"> the registers and</font>

775
00:40:42,599 --> 00:40:50,579
<font color="#E5E5E5">here how some already told you the flags</font>

776
00:40:47,670 --> 00:40:53,670
<font color="#CCCCCC">the most important part for us is the</font>

777
00:40:50,579 --> 00:40:56,069
thumb the thumb flag<font color="#E5E5E5"> so as soon as</font><font color="#CCCCCC"> we</font>

778
00:40:53,670 --> 00:40:58,920
are<font color="#CCCCCC"> entering the thumb mode this will be</font>

779
00:40:56,069 --> 00:41:02,250
bold<font color="#CCCCCC"> and this will indicate</font><font color="#E5E5E5"> that we</font><font color="#CCCCCC"> are</font>

780
00:40:58,920 --> 00:41:05,069
in fact in<font color="#CCCCCC"> thumb oh here you can see the</font>

781
00:41:02,250 --> 00:41:07,770
stack obviously the stack pointer points

782
00:41:05,069 --> 00:41:11,700
at the top<font color="#E5E5E5"> of the stack and here goes</font>

783
00:41:07,770 --> 00:41:18,869
our<font color="#CCCCCC"> code and pc points to the next</font>

784
00:41:11,700 --> 00:41:24,118
instruction that<font color="#CCCCCC"> will be</font><font color="#E5E5E5"> executed</font><font color="#CCCCCC"> pc and</font>

785
00:41:18,869 --> 00:41:28,260
unarmed has its nuances<font color="#CCCCCC"> it's not as</font>

786
00:41:24,119 --> 00:41:30,950
straightforward as on x86 so usually<font color="#CCCCCC"> pc</font>

787
00:41:28,260 --> 00:41:33,720
<font color="#CCCCCC">points through next instruction and</font>

788
00:41:30,950 --> 00:41:36,210
<font color="#E5E5E5">however if you disassemble so if you</font>

789
00:41:33,720 --> 00:41:40,740
would actually<font color="#E5E5E5"> write an</font><font color="#CCCCCC"> instruction</font>

790
00:41:36,210 --> 00:41:44,220
which<font color="#E5E5E5"> says move pc into</font><font color="#CCCCCC"> a register and</font>

791
00:41:40,740 --> 00:41:46,290
you<font color="#E5E5E5"> just before executing this</font>

792
00:41:44,220 --> 00:41:49,169
instruction you<font color="#E5E5E5"> would look at pc and</font>

793
00:41:46,290 --> 00:41:51,779
just memorize that address and then you

794
00:41:49,170 --> 00:41:53,609
would execute that instruction and<font color="#CCCCCC"> not</font>

795
00:41:51,780 --> 00:41:58,079
the same<font color="#E5E5E5"> address would land into that</font>

796
00:41:53,609 --> 00:42:01,348
register but the next after that<font color="#CCCCCC"> and</font>

797
00:41:58,079 --> 00:42:05,110
this<font color="#E5E5E5"> is because all there are merchants</font>

798
00:42:01,349 --> 00:42:09,220
fetched<font color="#E5E5E5"> two instructions ahead</font>

799
00:42:05,110 --> 00:42:12,880
well backwards-compatibility these

800
00:42:09,220 --> 00:42:14,799
reasons are kind<font color="#E5E5E5"> of retained that so if</font>

801
00:42:12,880 --> 00:42:17,430
you don't get<font color="#CCCCCC"> confused in case you</font>

802
00:42:14,800 --> 00:42:18,810
encounter<font color="#E5E5E5"> that and it's confusing</font><font color="#CCCCCC"> but</font>

803
00:42:17,430 --> 00:42:23,470
yeah

804
00:42:18,810 --> 00:42:28,270
so yeah if we step or<font color="#E5E5E5"> next year and so</font>

805
00:42:23,470 --> 00:42:35,709
on<font color="#E5E5E5"> so this is how registers change it</font>

806
00:42:28,270 --> 00:42:41,220
will indicate with<font color="#E5E5E5"> red right so this is</font>

807
00:42:35,710 --> 00:42:44,670
the very<font color="#CCCCCC"> basic overview</font><font color="#E5E5E5"> of a very first</font>

808
00:42:41,220 --> 00:42:47,259
<font color="#E5E5E5">assembly program</font><font color="#CCCCCC"> I guess it's not</font>

809
00:42:44,670 --> 00:42:50,500
necessary that<font color="#E5E5E5"> they already start</font>

810
00:42:47,260 --> 00:42:50,890
writing this down<font color="#CCCCCC"> no no right no no this</font>

811
00:42:50,500 --> 00:42:53,860
is

812
00:42:50,890 --> 00:42:59,379
<font color="#E5E5E5">I mean basically the template is given</font>

813
00:42:53,860 --> 00:43:04,900
this<font color="#E5E5E5"> just to kind of give you</font><font color="#CCCCCC"> a let's do</font>

814
00:42:59,380 --> 00:43:10,240
this<font color="#E5E5E5"> let's do this all right let's jump</font>

815
00:43:04,900 --> 00:43:17,710
right<font color="#E5E5E5"> into it yeah why not all right I</font>

816
00:43:10,240 --> 00:43:19,899
<font color="#CCCCCC">will today yeah</font><font color="#E5E5E5"> that's all</font><font color="#CCCCCC"> right</font><font color="#E5E5E5"> this is</font>

817
00:43:17,710 --> 00:43:22,090
when we wish we had the dual screens

818
00:43:19,900 --> 00:43:24,580
<font color="#E5E5E5">when we teach we like to have two</font>

819
00:43:22,090 --> 00:43:27,360
projectors<font color="#CCCCCC"> i it's true it makes a world</font>

820
00:43:24,580 --> 00:43:34,779
<font color="#E5E5E5">of a difference</font><font color="#CCCCCC"> okay I'm gonna try</font>

821
00:43:27,360 --> 00:43:37,320
one-handed typing<font color="#E5E5E5"> and no it's gonna be</font>

822
00:43:34,780 --> 00:43:37,320
really<font color="#E5E5E5"> weird</font>

823
00:43:58,480 --> 00:44:02,050
[Music]

824
00:44:07,500 --> 00:44:16,300
<font color="#CCCCCC">okay</font><font color="#E5E5E5"> when I get set up just a couple</font><font color="#CCCCCC"> of</font>

825
00:44:10,210 --> 00:44:16,810
minutes<font color="#E5E5E5"> any questions about arm stuff so</font>

826
00:44:16,300 --> 00:44:20,619
far

827
00:44:16,810 --> 00:44:23,650
anything anything confusing anything

828
00:44:20,619 --> 00:44:26,920
doesn't<font color="#E5E5E5"> make sense yeah</font>

829
00:44:23,650 --> 00:44:31,119
well good I mean arm is beautiful<font color="#E5E5E5"> it's</font>

830
00:44:26,920 --> 00:44:34,359
much more simple<font color="#E5E5E5"> than x86 truly once you</font>

831
00:44:31,119 --> 00:44:38,320
know it<font color="#CCCCCC"> I heard one person actually said</font>

832
00:44:34,359 --> 00:44:41,799
<font color="#E5E5E5">he he finds arm assembly much more</font>

833
00:44:38,320 --> 00:44:49,240
confusing<font color="#CCCCCC"> than x86 I can't understand</font>

834
00:44:41,800 --> 00:44:50,680
<font color="#CCCCCC">that but we get tuned to the Intel way</font>

835
00:44:49,240 --> 00:44:57,700
of thinking then this is this is

836
00:44:50,680 --> 00:44:59,799
<font color="#E5E5E5">different they're very simple</font><font color="#CCCCCC"> it's very</font>

837
00:44:57,700 --> 00:45:02,109
<font color="#E5E5E5">simple if that's your first assembly</font>

838
00:44:59,800 --> 00:45:05,260
language then it's awesome and<font color="#CCCCCC"> it's</font>

839
00:45:02,109 --> 00:45:08,740
really simple<font color="#E5E5E5"> should we cover some of</font>

840
00:45:05,260 --> 00:45:10,720
these<font color="#CCCCCC"> more okay yeah yeah let's do that</font>

841
00:45:08,740 --> 00:45:13,479
<font color="#E5E5E5">let's do that and</font><font color="#CCCCCC"> then</font><font color="#E5E5E5"> we'll get into</font>

842
00:45:10,720 --> 00:45:15,609
<font color="#E5E5E5">the</font><font color="#CCCCCC"> thick</font><font color="#E5E5E5"> of things</font><font color="#CCCCCC"> how about that go go</font>

843
00:45:13,480 --> 00:45:19,180
ahead<font color="#CCCCCC"> alright alright</font><font color="#E5E5E5"> so these are some</font>

844
00:45:15,609 --> 00:45:21,340
or is anyone<font color="#CCCCCC"> yeah everyone's</font><font color="#E5E5E5"> kind of</font>

845
00:45:19,180 --> 00:45:23,440
setting things up<font color="#E5E5E5"> but just in the</font>

846
00:45:21,340 --> 00:45:27,790
background<font color="#E5E5E5"> so these are some arithmetic</font>

847
00:45:23,440 --> 00:45:31,960
and logical<font color="#CCCCCC"> instructions</font><font color="#E5E5E5"> simpler I</font><font color="#CCCCCC"> guess</font>

848
00:45:27,790 --> 00:45:35,020
I don't<font color="#E5E5E5"> have to</font><font color="#CCCCCC"> explain that yeah some</font>

849
00:45:31,960 --> 00:45:39,670
will already<font color="#E5E5E5"> mentioned branches so we</font>

850
00:45:35,020 --> 00:45:41,259
have four<font color="#CCCCCC"> different</font><font color="#E5E5E5"> kinds of branches</font><font color="#CCCCCC"> we</font>

851
00:45:39,670 --> 00:45:44,080
have a very simple branch where you just

852
00:45:41,260 --> 00:45:47,859
branch to a specific offset<font color="#E5E5E5"> where we</font>

853
00:45:44,080 --> 00:45:51,130
just branch to<font color="#CCCCCC"> a PC plus offset</font><font color="#E5E5E5"> then we</font>

854
00:45:47,859 --> 00:45:54,880
have<font color="#CCCCCC"> B X branch and exchange this</font><font color="#E5E5E5"> is</font>

855
00:45:51,130 --> 00:46:01,859
<font color="#E5E5E5">when we</font><font color="#CCCCCC"> actually</font><font color="#E5E5E5"> want</font><font color="#CCCCCC"> to exchange our</font>

856
00:45:54,880 --> 00:46:08,230
modes basically BL<font color="#E5E5E5"> which first saves the</font>

857
00:46:01,859 --> 00:46:10,900
value of PC into LR<font color="#E5E5E5"> and then jumps or</font>

858
00:46:08,230 --> 00:46:12,310
like then branches and BL<font color="#E5E5E5"> X is just a</font>

859
00:46:10,900 --> 00:46:15,540
combination of px and

860
00:46:12,310 --> 00:46:21,070
<font color="#CCCCCC">so it will also exchange but also saved</font>

861
00:46:15,540 --> 00:46:25,540
particular link register right<font color="#CCCCCC"> so what</font>

862
00:46:21,070 --> 00:46:30,690
we will need is<font color="#E5E5E5"> B X for</font><font color="#CCCCCC"> example</font><font color="#E5E5E5"> because</font>

863
00:46:25,540 --> 00:46:35,080
we will need to jump or we will need to

864
00:46:30,690 --> 00:46:39,190
<font color="#CCCCCC">ya jump to thumb mode because</font><font color="#E5E5E5"> no this is</font>

865
00:46:35,080 --> 00:46:41,799
a good time<font color="#CCCCCC"> to also ask ourselves how</font>

866
00:46:39,190 --> 00:46:45,460
does the CPU know when to switch modes

867
00:46:41,800 --> 00:46:49,090
<font color="#E5E5E5">write an instruction</font><font color="#CCCCCC"> let us say the</font>

868
00:46:45,460 --> 00:46:51,190
<font color="#E5E5E5">instructions</font><font color="#CCCCCC"> that address 8 0 6 0 just</font>

869
00:46:49,090 --> 00:46:53,440
making them<font color="#E5E5E5"> how do you know this address</font>

870
00:46:51,190 --> 00:46:54,810
contains an arm instruction or<font color="#E5E5E5"> thumb</font>

871
00:46:53,440 --> 00:46:57,550
instruction

872
00:46:54,810 --> 00:47:01,330
you don't<font color="#E5E5E5"> write it's just going to be</font>

873
00:46:57,550 --> 00:47:05,650
bytes<font color="#E5E5E5"> so well the assembler will have</font>

874
00:47:01,330 --> 00:47:10,690
created<font color="#CCCCCC"> these directives so if you're</font>

875
00:47:05,650 --> 00:47:13,900
branching<font color="#E5E5E5"> to a label</font><font color="#CCCCCC"> that contains a</font>

876
00:47:10,690 --> 00:47:20,470
thumb instruction the assembler will

877
00:47:13,900 --> 00:47:24,070
generate an address which will force the

878
00:47:20,470 --> 00:47:29,350
CPU to go to some more<font color="#E5E5E5"> this can be</font>

879
00:47:24,070 --> 00:47:34,050
<font color="#E5E5E5">little confusing at first step back a</font>

880
00:47:29,350 --> 00:47:37,150
little<font color="#E5E5E5"> bit in arm I told you that all</font>

881
00:47:34,050 --> 00:47:41,320
instructions are either<font color="#CCCCCC"> for bite or two</font>

882
00:47:37,150 --> 00:47:44,800
<font color="#CCCCCC">bytes and all access</font><font color="#E5E5E5"> to instruction is</font>

883
00:47:41,320 --> 00:47:50,620
fully aligned so your<font color="#E5E5E5"> program counter</font>

884
00:47:44,800 --> 00:47:55,780
can only have even numbers<font color="#E5E5E5"> multiple of</font>

885
00:47:50,620 --> 00:47:57,759
<font color="#CCCCCC">four or multiple of</font><font color="#E5E5E5"> two so the engineers</font>

886
00:47:55,780 --> 00:48:01,660
<font color="#CCCCCC">that arm did</font><font color="#E5E5E5"> cleverly is they use the</font>

887
00:47:57,760 --> 00:48:07,710
<font color="#CCCCCC">least significant bit of the program</font>

888
00:48:01,660 --> 00:48:11,589
counter itself to force a thumb change

889
00:48:07,710 --> 00:48:16,380
so if you take address<font color="#E5E5E5"> a to</font><font color="#CCCCCC"> 0 6 0</font><font color="#E5E5E5"> and</font>

890
00:48:11,590 --> 00:48:19,960
branch to it the CPU will<font color="#CCCCCC"> be in</font><font color="#E5E5E5"> our</font><font color="#CCCCCC"> mode</font>

891
00:48:16,380 --> 00:48:22,500
least significant bit is<font color="#E5E5E5"> 0 but if you</font>

892
00:48:19,960 --> 00:48:24,890
take address eight<font color="#E5E5E5"> zero six one and</font>

893
00:48:22,500 --> 00:48:28,180
branch to it

894
00:48:24,890 --> 00:48:32,629
the<font color="#E5E5E5"> CPU will flip to thumb mode and</font>

895
00:48:28,180 --> 00:48:34,669
clear off the least significant bit<font color="#E5E5E5"> so</font>

896
00:48:32,630 --> 00:48:38,299
your program<font color="#E5E5E5"> counter</font><font color="#CCCCCC"> will still be 806</font>

897
00:48:34,670 --> 00:48:41,450
<font color="#CCCCCC">or</font><font color="#E5E5E5"> will you go to some more so this is</font>

898
00:48:38,299 --> 00:48:43,999
what we mean<font color="#CCCCCC"> by this statement</font><font color="#E5E5E5"> when the</font>

899
00:48:41,450 --> 00:48:46,399
branch happens you inspect the least

900
00:48:43,999 --> 00:48:49,368
significant bit of<font color="#E5E5E5"> the target program</font>

901
00:48:46,400 --> 00:48:53,210
counter if the target address is<font color="#CCCCCC"> an odd</font>

902
00:48:49,369 --> 00:49:00,730
number<font color="#E5E5E5"> set thumb mode the target</font><font color="#CCCCCC"> number</font>

903
00:48:53,210 --> 00:49:04,839
is an even number<font color="#E5E5E5"> set</font><font color="#CCCCCC"> arm or this is how</font>

904
00:49:00,730 --> 00:49:08,329
<font color="#CCCCCC">the mode</font><font color="#E5E5E5"> switch and this is one</font><font color="#CCCCCC"> of the</font>

905
00:49:04,839 --> 00:49:10,549
most confusing<font color="#CCCCCC"> things about arm branches</font>

906
00:49:08,329 --> 00:49:13,329
when going from arm to thumb and thumb<font color="#CCCCCC"> -</font>

907
00:49:10,549 --> 00:49:28,579
<font color="#E5E5E5">ah yes your question go ahead</font>

908
00:49:13,329 --> 00:49:29,680
binary exponential<font color="#E5E5E5"> back-off it's the</font><font color="#CCCCCC"> CPA</font>

909
00:49:28,579 --> 00:49:32,900
<font color="#CCCCCC">sir</font>

910
00:49:29,680 --> 00:49:36,259
the CPI sir will be<font color="#E5E5E5"> set when you go to</font>

911
00:49:32,900 --> 00:49:41,210
someone yeah<font color="#E5E5E5"> so basically when you</font>

912
00:49:36,259 --> 00:49:44,630
branch like<font color="#E5E5E5"> this this LSB equals</font><font color="#CCCCCC"> 1 we'll</font>

913
00:49:41,210 --> 00:49:48,200
turn that<font color="#E5E5E5"> CPS our flag on and then the</font>

914
00:49:44,630 --> 00:49:58,430
<font color="#CCCCCC">CPU will decode some instructions</font><font color="#E5E5E5"> your</font>

915
00:49:48,200 --> 00:50:00,410
your<font color="#E5E5E5"> question no the assembler will is</font>

916
00:49:58,430 --> 00:50:02,348
never<font color="#E5E5E5"> offset the</font><font color="#CCCCCC"> instruction</font><font color="#E5E5E5"> so the</font>

917
00:50:00,410 --> 00:50:05,029
instructions are not<font color="#E5E5E5"> at an odd number</font>

918
00:50:02,349 --> 00:50:08,359
the instructions are still fully aligned

919
00:50:05,029 --> 00:50:12,319
<font color="#E5E5E5">the branch values will be</font><font color="#CCCCCC"> at an odd</font>

920
00:50:08,359 --> 00:50:15,200
number correct correct

921
00:50:12,319 --> 00:50:16,759
so the branches will seem<font color="#CCCCCC"> to go to an</font>

922
00:50:15,200 --> 00:50:19,390
<font color="#CCCCCC">odd numbered address but it you just</font>

923
00:50:16,759 --> 00:50:24,460
<font color="#E5E5E5">flip</font><font color="#CCCCCC"> the bit and back to</font><font color="#E5E5E5"> even numbered</font>

924
00:50:19,390 --> 00:50:24,460
<font color="#E5E5E5">LSB</font><font color="#CCCCCC"> will be cleared off in the actual PC</font>

925
00:50:24,670 --> 00:50:31,099
right so we will see an example<font color="#CCCCCC"> of that</font>

926
00:50:28,400 --> 00:50:36,589
<font color="#CCCCCC">but in theory how this will look like is</font>

927
00:50:31,099 --> 00:50:37,480
<font color="#CCCCCC">that we need to branch an</font><font color="#E5E5E5"> exchange to</font>

928
00:50:36,589 --> 00:50:39,880
something

929
00:50:37,480 --> 00:50:42,520
and we will branch an exchange to a

930
00:50:39,880 --> 00:50:49,030
register<font color="#E5E5E5"> however in that register</font>

931
00:50:42,520 --> 00:50:51,309
we will first put<font color="#E5E5E5"> PC plus</font><font color="#CCCCCC"> 1 right the</font>

932
00:50:49,030 --> 00:50:52,990
least significant bit<font color="#E5E5E5"> so this is all we</font>

933
00:50:51,309 --> 00:50:56,950
just<font color="#E5E5E5"> did those are</font><font color="#CCCCCC"> two</font><font color="#E5E5E5"> simple</font>

934
00:50:52,990 --> 00:51:01,270
instructions<font color="#E5E5E5"> how we prepare and then we</font>

935
00:50:56,950 --> 00:51:04,540
basically<font color="#E5E5E5"> just branch</font><font color="#CCCCCC"> an exchange and we</font>

936
00:51:01,270 --> 00:51:08,319
<font color="#CCCCCC">enter mode it will be very trivial once</font>

937
00:51:04,540 --> 00:51:11,460
you see it it's<font color="#CCCCCC"> very</font><font color="#E5E5E5"> easy</font><font color="#CCCCCC"> so don't get</font>

938
00:51:08,319 --> 00:51:11,460
confused too early

939
00:51:12,089 --> 00:51:19,240
<font color="#E5E5E5">all right so yeah as samuel mentions arm</font>

940
00:51:16,750 --> 00:51:22,329
is a load and store Y at<font color="#E5E5E5"> Lawrence or</font>

941
00:51:19,240 --> 00:51:26,410
architecture which means<font color="#E5E5E5"> only Lord load</font>

942
00:51:22,329 --> 00:51:29,380
<font color="#E5E5E5">and store</font><font color="#CCCCCC"> instructions</font><font color="#E5E5E5"> can access memory</font>

943
00:51:26,410 --> 00:51:31,000
<font color="#CCCCCC">and here are</font><font color="#E5E5E5"> some examples</font><font color="#CCCCCC"> you don't</font>

944
00:51:29,380 --> 00:51:34,329
need to memorize all<font color="#CCCCCC"> of them it's just</font>

945
00:51:31,000 --> 00:51:36,730
<font color="#E5E5E5">like for the overview also these are not</font>

946
00:51:34,329 --> 00:51:39,609
all variations<font color="#E5E5E5"> actually there's only two</font>

947
00:51:36,730 --> 00:51:41,349
instructions<font color="#CCCCCC"> in slay yeah there's just</font>

948
00:51:39,609 --> 00:51:43,450
<font color="#CCCCCC">two instructions at five different</font>

949
00:51:41,349 --> 00:51:45,849
variations each there's us alone so

950
00:51:43,450 --> 00:51:47,558
multiple which works<font color="#E5E5E5"> slightly different</font>

951
00:51:45,849 --> 00:51:51,540
but<font color="#CCCCCC"> for</font><font color="#E5E5E5"> now you don't</font><font color="#CCCCCC"> need</font><font color="#E5E5E5"> to remember</font>

952
00:51:47,559 --> 00:51:55,349
<font color="#E5E5E5">what is so multiple learn any of that so</font>

953
00:51:51,540 --> 00:51:58,119
here is an<font color="#CCCCCC"> example so we when</font><font color="#E5E5E5"> we lose</font>

954
00:51:55,349 --> 00:52:01,079
when we<font color="#E5E5E5"> use loads we want to load</font>

955
00:51:58,119 --> 00:52:04,630
<font color="#E5E5E5">something from memory</font><font color="#CCCCCC"> into a register</font>

956
00:52:01,079 --> 00:52:09,160
<font color="#CCCCCC">when we use store we store</font><font color="#E5E5E5"> something</font>

957
00:52:04,630 --> 00:52:14,290
from a register to<font color="#CCCCCC"> memory address that's</font>

958
00:52:09,160 --> 00:52:21,009
it it's just<font color="#E5E5E5"> just that so here you can</font>

959
00:52:14,290 --> 00:52:25,029
see something from<font color="#E5E5E5"> memory will be stored</font>

960
00:52:21,010 --> 00:52:28,059
<font color="#CCCCCC">in two</font><font color="#E5E5E5"> it will be loaded</font><font color="#CCCCCC"> sorry into r0</font>

961
00:52:25,030 --> 00:52:31,240
<font color="#E5E5E5">and here whatever is in R 0 will be</font>

962
00:52:28,059 --> 00:52:35,260
stored at<font color="#CCCCCC"> the memory</font><font color="#E5E5E5"> address you find in</font>

963
00:52:31,240 --> 00:52:38,879
our<font color="#E5E5E5"> one and what we will need in our</font>

964
00:52:35,260 --> 00:52:41,650
example is for<font color="#CCCCCC"> example</font><font color="#E5E5E5"> the store bytes</font>

965
00:52:38,880 --> 00:52:44,920
<font color="#CCCCCC">because we will need this one</font>

966
00:52:41,650 --> 00:52:48,250
instruction to<font color="#E5E5E5"> store a byte the specific</font>

967
00:52:44,920 --> 00:52:51,160
location<font color="#CCCCCC"> and I guess we will</font><font color="#E5E5E5"> also need</font>

968
00:52:48,250 --> 00:52:54,489
<font color="#E5E5E5">to use</font><font color="#CCCCCC"> Lord load for</font>

969
00:52:51,160 --> 00:52:56,259
one simple example<font color="#E5E5E5"> but for now that's</font>

970
00:52:54,489 --> 00:53:00,910
all you need to remember<font color="#CCCCCC"> I mean we all</font>

971
00:52:56,259 --> 00:53:03,700
know it's late<font color="#CCCCCC"> you know so</font><font color="#E5E5E5"> okay</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> by</font>

972
00:53:00,910 --> 00:53:09,368
<font color="#E5E5E5">default the Lord will be loading 32-bit</font>

973
00:53:03,700 --> 00:53:12,970
values<font color="#E5E5E5"> load H so</font><font color="#CCCCCC"> LD RHS trh 16-bit LDR</font>

974
00:53:09,369 --> 00:53:15,819
<font color="#E5E5E5">be</font><font color="#CCCCCC"> STR b8</font><font color="#E5E5E5"> three modes</font><font color="#CCCCCC"> either just</font>

975
00:53:12,970 --> 00:53:18,640
directly<font color="#E5E5E5"> the addresses it will refer</font>

976
00:53:15,819 --> 00:53:21,640
address<font color="#E5E5E5"> plus numeric offset address plus</font>

977
00:53:18,640 --> 00:53:23,049
<font color="#E5E5E5">the register offset these modes are very</font>

978
00:53:21,640 --> 00:53:36,879
useful<font color="#CCCCCC"> when</font><font color="#E5E5E5"> you're walking through</font><font color="#CCCCCC"> an</font>

979
00:53:23,049 --> 00:53:39,910
array<font color="#E5E5E5"> bays and offset all right so I'm</font>

980
00:53:36,880 --> 00:53:42,489
loading<font color="#E5E5E5"> immediate values or storing them</font>

981
00:53:39,910 --> 00:53:46,299
loading them into<font color="#CCCCCC"> a register it's not as</font>

982
00:53:42,489 --> 00:53:53,289
trivial as in x86<font color="#E5E5E5"> there are restrictions</font>

983
00:53:46,299 --> 00:53:58,089
<font color="#CCCCCC">a lot of them</font><font color="#E5E5E5"> so we have</font><font color="#CCCCCC"> nature</font><font color="#E5E5E5"> should I</font>

984
00:53:53,289 --> 00:54:01,569
go<font color="#CCCCCC"> into a lot of detail or</font><font color="#E5E5E5"> all right</font>

985
00:53:58,089 --> 00:54:05,410
<font color="#CCCCCC">okay so long</font><font color="#E5E5E5"> story</font><font color="#CCCCCC"> short</font><font color="#E5E5E5"> we only have</font>

986
00:54:01,569 --> 00:54:08,589
<font color="#E5E5E5">eight bits plus yeah we only have eight</font>

987
00:54:05,410 --> 00:54:12,700
bits for the immediate value<font color="#E5E5E5"> which means</font>

988
00:54:08,589 --> 00:54:16,150
this is<font color="#CCCCCC"> a problem we cannot load or yeah</font>

989
00:54:12,700 --> 00:54:19,558
we cannot load a<font color="#CCCCCC"> 32 bits</font><font color="#E5E5E5"> value into a 32</font>

990
00:54:16,150 --> 00:54:22,329
bit register it's just not possible<font color="#CCCCCC"> and</font>

991
00:54:19,559 --> 00:54:25,749
<font color="#CCCCCC">assembler will complain it will say</font><font color="#E5E5E5"> what</font>

992
00:54:22,329 --> 00:54:28,450
<font color="#CCCCCC">does</font><font color="#E5E5E5"> it error</font><font color="#CCCCCC"> something would invalid</font>

993
00:54:25,749 --> 00:54:31,538
constant so if you encounter<font color="#E5E5E5"> that</font><font color="#CCCCCC"> you</font>

994
00:54:28,450 --> 00:54:36,700
know<font color="#E5E5E5"> exactly what's happening</font><font color="#CCCCCC"> but there</font>

995
00:54:31,539 --> 00:54:39,059
are bypasses for<font color="#CCCCCC"> that so is it already</font>

996
00:54:36,700 --> 00:54:47,319
at the next slide

997
00:54:39,059 --> 00:54:51,519
<font color="#CCCCCC">yeah yeah yeah so um</font><font color="#E5E5E5"> basically there are</font>

998
00:54:47,319 --> 00:54:55,509
two<font color="#CCCCCC"> ways</font><font color="#E5E5E5"> first you can either split your</font>

999
00:54:51,519 --> 00:54:58,769
number and<font color="#CCCCCC"> then piece</font><font color="#E5E5E5"> it together or you</font>

1000
00:54:55,509 --> 00:55:03,190
can<font color="#CCCCCC"> use make</font><font color="#E5E5E5"> use of the literal pool and</font>

1001
00:54:58,769 --> 00:55:05,930
the literal pool is<font color="#CCCCCC"> just a</font><font color="#E5E5E5"> section</font>

1002
00:55:03,190 --> 00:55:06,920
it's just a region and memory<font color="#E5E5E5"> in the</font>

1003
00:55:05,930 --> 00:55:09,910
same section

1004
00:55:06,920 --> 00:55:13,400
it's<font color="#E5E5E5"> basically also part of the code and</font>

1005
00:55:09,910 --> 00:55:16,190
we<font color="#CCCCCC"> can use a specific</font><font color="#E5E5E5"> syntax that we</font>

1006
00:55:13,400 --> 00:55:19,400
<font color="#E5E5E5">will later see it's not in the slide</font>

1007
00:55:16,190 --> 00:55:27,380
right<font color="#E5E5E5"> now but all you</font><font color="#CCCCCC"> need to know right</font>

1008
00:55:19,400 --> 00:55:32,300
<font color="#CCCCCC">now is let's look at an example so let's</font>

1009
00:55:27,380 --> 00:55:35,540
say you want to place a string or a

1010
00:55:32,300 --> 00:55:38,000
constant into the literal pool now<font color="#CCCCCC"> you</font>

1011
00:55:35,540 --> 00:55:40,940
need to access it<font color="#E5E5E5"> somehow</font><font color="#CCCCCC"> how do you</font>

1012
00:55:38,000 --> 00:55:43,940
access it for that we need<font color="#CCCCCC"> pc-relative</font>

1013
00:55:40,940 --> 00:55:48,910
addressing what that simply means is

1014
00:55:43,940 --> 00:55:54,880
that we need<font color="#CCCCCC"> to calculate</font><font color="#E5E5E5"> the relative</font>

1015
00:55:48,910 --> 00:55:54,879
distance or<font color="#E5E5E5"> offsets relative to PC and</font>

1016
00:55:54,940 --> 00:56:01,760
<font color="#E5E5E5">since we know that PC behaves a little</font>

1017
00:55:58,130 --> 00:56:05,150
bit strangely<font color="#CCCCCC"> and we don't we don't</font>

1018
00:56:01,760 --> 00:56:07,580
start counting<font color="#CCCCCC"> from</font><font color="#E5E5E5"> the next instruction</font>

1019
00:56:05,150 --> 00:56:17,990
but<font color="#CCCCCC"> to ahead</font><font color="#E5E5E5"> so again this is the</font>

1020
00:56:07,580 --> 00:56:19,460
literal pool<font color="#CCCCCC"> right this is our PC kind</font>

1021
00:56:17,990 --> 00:56:24,290
of give you an analogy of<font color="#CCCCCC"> what the</font>

1022
00:56:19,460 --> 00:56:26,840
literal pool is<font color="#E5E5E5"> you're not allowed</font><font color="#CCCCCC"> to</font>

1023
00:56:24,290 --> 00:56:30,710
store<font color="#E5E5E5"> anybody don't basic programming</font>

1024
00:56:26,840 --> 00:56:41,060
like<font color="#CCCCCC"> hard core basic</font><font color="#E5E5E5"> hit bit basic</font><font color="#CCCCCC"> no</font>

1025
00:56:30,710 --> 00:56:43,820
you guys are all Python guys in basic

1026
00:56:41,060 --> 00:56:44,110
there used to<font color="#CCCCCC"> be oh god</font><font color="#E5E5E5"> this makes me</font>

1027
00:56:43,820 --> 00:56:54,050
<font color="#E5E5E5">feel</font>

1028
00:56:44,110 --> 00:56:56,440
<font color="#CCCCCC">I am the 44 and 44 convey</font><font color="#E5E5E5"> in basic there</font>

1029
00:56:54,050 --> 00:56:59,390
isn't this a statement<font color="#E5E5E5"> called read data</font>

1030
00:56:56,440 --> 00:57:01,130
you heard of<font color="#E5E5E5"> had you-you-you write like</font>

1031
00:56:59,390 --> 00:57:04,910
at the end<font color="#E5E5E5"> of your program</font><font color="#CCCCCC"> you'd</font><font color="#E5E5E5"> like</font>

1032
00:57:01,130 --> 00:57:06,680
write data then all the numbers are<font color="#E5E5E5"> in</font>

1033
00:57:04,910 --> 00:57:09,319
this data section every<font color="#E5E5E5"> time you read it</font>

1034
00:57:06,680 --> 00:57:11,450
<font color="#E5E5E5">will just read from this data</font><font color="#CCCCCC"> saying</font><font color="#E5E5E5"> of</font>

1035
00:57:09,320 --> 00:57:13,760
<font color="#E5E5E5">the literal pool exactly like</font><font color="#CCCCCC"> that no</font>

1036
00:57:11,450 --> 00:57:17,000
other programming languages<font color="#CCCCCC"> have this</font>

1037
00:57:13,760 --> 00:57:20,450
feature of read data<font color="#E5E5E5"> but I kind of think</font>

1038
00:57:17,000 --> 00:57:22,220
<font color="#E5E5E5">for literal pool as that analogy let's</font>

1039
00:57:20,450 --> 00:57:25,850
<font color="#E5E5E5">say this</font><font color="#CCCCCC"> is your function or this is the</font>

1040
00:57:22,220 --> 00:57:29,660
end of your subroutine<font color="#CCCCCC"> and</font><font color="#E5E5E5"> your</font>

1041
00:57:25,850 --> 00:57:31,370
subroutine is using large constants the

1042
00:57:29,660 --> 00:57:33,529
assembler will stick these<font color="#E5E5E5"> large</font>

1043
00:57:31,370 --> 00:57:36,290
constants at the end of your subroutine

1044
00:57:33,530 --> 00:57:37,340
<font color="#E5E5E5">in the code itself down below might be</font>

1045
00:57:36,290 --> 00:57:39,800
another subroutine

1046
00:57:37,340 --> 00:57:42,890
so between subroutines<font color="#E5E5E5"> you'll have these</font>

1047
00:57:39,800 --> 00:57:45,290
little literal literal pools with values

1048
00:57:42,890 --> 00:57:47,629
hanging up<font color="#CCCCCC"> now as you're going through</font>

1049
00:57:45,290 --> 00:57:51,110
the<font color="#E5E5E5"> subroutine say</font><font color="#CCCCCC"> okay Here I am</font><font color="#E5E5E5"> I need</font>

1050
00:57:47,630 --> 00:57:53,240
<font color="#E5E5E5">to load one</font><font color="#CCCCCC"> of these into this so the</font>

1051
00:57:51,110 --> 00:57:55,310
pointer at this<font color="#CCCCCC"> address is the program</font>

1052
00:57:53,240 --> 00:57:59,120
counter<font color="#E5E5E5"> and that is where you take</font>

1053
00:57:55,310 --> 00:58:02,270
program counter plus an offset to get to

1054
00:57:59,120 --> 00:58:05,120
the literal pool and you'd be wondering

1055
00:58:02,270 --> 00:58:07,060
<font color="#E5E5E5">like okay you know program counter plus</font>

1056
00:58:05,120 --> 00:58:09,680
<font color="#E5E5E5">12 is only going to</font><font color="#CCCCCC"> get us here</font>

1057
00:58:07,060 --> 00:58:21,040
<font color="#E5E5E5">how the hell is the literal pool over</font>

1058
00:58:09,680 --> 00:58:21,040
there<font color="#E5E5E5"> it so yeah that's what yeah so</font>

1059
00:58:21,190 --> 00:58:27,680
exactly so since the PC<font color="#CCCCCC"> is not</font><font color="#E5E5E5"> really</font>

1060
00:58:25,040 --> 00:58:30,529
where PC<font color="#CCCCCC"> should point to so we always</font>

1061
00:58:27,680 --> 00:58:33,529
have to<font color="#CCCCCC"> start</font><font color="#E5E5E5"> calculating from the</font>

1062
00:58:30,530 --> 00:58:37,070
current instruction<font color="#E5E5E5"> plus</font><font color="#CCCCCC"> eight</font><font color="#E5E5E5"> then we</font>

1063
00:58:33,530 --> 00:58:40,580
start calculating so basically count

1064
00:58:37,070 --> 00:58:45,680
instruction plus<font color="#E5E5E5"> eight and then we</font>

1065
00:58:40,580 --> 00:58:51,980
basically four eight<font color="#E5E5E5"> twelve and relent</font>

1066
00:58:45,680 --> 00:58:59,750
here ends<font color="#CCCCCC"> my current instruction plus</font>

1067
00:58:51,980 --> 00:59:01,940
eight because<font color="#CCCCCC"> it is the way it is</font><font color="#E5E5E5"> well</font>

1068
00:58:59,750 --> 00:59:05,030
<font color="#CCCCCC">basically does not think of it</font><font color="#E5E5E5"> like this</font>

1069
00:59:01,940 --> 00:59:07,490
<font color="#E5E5E5">it's not well yes sorry</font><font color="#CCCCCC"> as serious</font>

1070
00:59:05,030 --> 00:59:11,270
question<font color="#E5E5E5"> yeah</font><font color="#CCCCCC"> well one thing I want</font><font color="#E5E5E5"> to</font>

1071
00:59:07,490 --> 00:59:13,850
<font color="#E5E5E5">just care wrap this plus 18 don't think</font>

1072
00:59:11,270 --> 00:59:17,110
it of PC is equal<font color="#CCCCCC"> to current</font><font color="#E5E5E5"> instruction</font>

1073
00:59:13,850 --> 00:59:19,790
plus<font color="#CCCCCC"> eight think of it as two</font>

1074
00:59:17,110 --> 00:59:22,520
instructions below<font color="#E5E5E5"> this one if it is in</font>

1075
00:59:19,790 --> 00:59:25,850
our mode it<font color="#CCCCCC"> is plus eight if it is in</font>

1076
00:59:22,520 --> 00:59:28,610
some mode it<font color="#E5E5E5"> will be plus four the true</font>

1077
00:59:25,850 --> 00:59:30,520
<font color="#E5E5E5">reason is the old arm</font><font color="#CCCCCC"> CPUs had a</font>

1078
00:59:28,610 --> 00:59:33,220
<font color="#E5E5E5">three-stage pipeline</font>

1079
00:59:30,520 --> 00:59:35,830
so the<font color="#E5E5E5"> PC they're really easy</font><font color="#CCCCCC"> we'll be</font>

1080
00:59:33,220 --> 00:59:38,410
<font color="#CCCCCC">all ready to two instructions</font><font color="#E5E5E5"> would be</font>

1081
00:59:35,830 --> 00:59:41,860
prefetched<font color="#E5E5E5"> so therefore it would go to</font>

1082
00:59:38,410 --> 00:59:43,810
<font color="#E5E5E5">the Turk but now of course you have like</font>

1083
00:59:41,860 --> 00:59:47,020
<font color="#E5E5E5">this multi-state pipelines but this</font>

1084
00:59:43,810 --> 00:59:49,990
thing was just<font color="#E5E5E5"> kept because of the way</font>

1085
00:59:47,020 --> 00:59:54,610
it was<font color="#CCCCCC"> once</font><font color="#E5E5E5"> upon a</font><font color="#CCCCCC"> time</font><font color="#E5E5E5"> and that's why</font>

1086
00:59:49,990 --> 00:59:59,439
whenever you have the<font color="#CCCCCC"> PC used as an</font>

1087
00:59:54,610 --> 01:00:03,490
operand<font color="#E5E5E5"> always take PC the address of PC</font>

1088
00:59:59,440 --> 01:00:10,690
plus<font color="#CCCCCC"> two instructions below your</font>

1089
01:00:03,490 --> 01:00:12,368
question why<font color="#E5E5E5"> plus</font><font color="#CCCCCC"> 12 so what's going to</font>

1090
01:00:10,690 --> 01:00:16,570
<font color="#E5E5E5">be the effective PC over here</font>

1091
01:00:12,369 --> 01:00:20,710
<font color="#CCCCCC">eight one zero zero</font><font color="#E5E5E5"> plus</font><font color="#CCCCCC"> four eight one</font>

1092
01:00:16,570 --> 01:00:24,760
<font color="#CCCCCC">zero</font><font color="#E5E5E5"> plus 8 so 8 1 0 8 the literal pool</font>

1093
01:00:20,710 --> 01:00:32,020
is 4 8 and 12<font color="#E5E5E5"> bytes for so</font><font color="#CCCCCC"> add an</font>

1094
01:00:24,760 --> 01:00:34,030
<font color="#E5E5E5">extract oil to this so when you're</font>

1095
01:00:32,020 --> 01:00:37,840
writing<font color="#E5E5E5"> shellcode when you're writing</font>

1096
01:00:34,030 --> 01:00:40,030
normal assembly you<font color="#E5E5E5"> can use some macros</font>

1097
01:00:37,840 --> 01:00:42,609
to<font color="#E5E5E5"> automatically generate literal pools</font>

1098
01:00:40,030 --> 01:00:44,830
<font color="#E5E5E5">but when</font><font color="#CCCCCC"> we writing shellcode we'll have</font>

1099
01:00:42,609 --> 01:00:50,230
to write the literal pools and<font color="#CCCCCC"> the</font>

1100
01:00:44,830 --> 01:00:52,600
offsets manually so in our<font color="#E5E5E5"> shell code we</font>

1101
01:00:50,230 --> 01:00:57,180
will have one<font color="#E5E5E5"> instruction that will look</font>

1102
01:00:52,600 --> 01:00:57,180
<font color="#CCCCCC">like this this is why we are covering it</font>

1103
01:00:57,570 --> 01:01:05,980
<font color="#CCCCCC">ok question the next one</font><font color="#E5E5E5"> at address</font><font color="#CCCCCC"> 8 1</font>

1104
01:01:02,080 --> 01:01:11,609
<font color="#CCCCCC">0 for your the instruction add r1 comma</font>

1105
01:01:05,980 --> 01:01:11,609
PC comma 12 what will be stored in r1

1106
01:01:14,070 --> 01:01:17,070
nope

1107
01:01:19,190 --> 01:01:29,430
let's read how this instruction plays

1108
01:01:21,690 --> 01:01:36,270
out r1 equals PC plus 12 what will be

1109
01:01:29,430 --> 01:01:41,940
the value of PC<font color="#E5E5E5"> 8 104 plus 4 plus 8 so</font>

1110
01:01:36,270 --> 01:01:45,359
PC will be 8 1 0<font color="#CCCCCC"> C in here</font><font color="#E5E5E5"> plus 12 so PC</font>

1111
01:01:41,940 --> 01:01:49,170
will be I mean<font color="#E5E5E5"> this will</font><font color="#CCCCCC"> be 8 1 1 8</font><font color="#E5E5E5"> r1</font>

1112
01:01:45,359 --> 01:01:51,990
will<font color="#E5E5E5"> have the</font><font color="#CCCCCC"> value 8 1 1 8 you</font><font color="#E5E5E5"> not</font><font color="#CCCCCC"> D</font>

1113
01:01:49,170 --> 01:01:59,819
<font color="#E5E5E5">rebel this is dereferencing you know</font>

1114
01:01:51,990 --> 01:02:05,700
dereferencing<font color="#E5E5E5"> this is just a pointer see</font>

1115
01:01:59,819 --> 01:02:07,650
how confusing<font color="#CCCCCC"> it gets so every notation</font>

1116
01:02:05,700 --> 01:02:09,779
every symbol<font color="#E5E5E5"> is very important brackets</font>

1117
01:02:07,650 --> 01:02:11,640
no brackets<font color="#E5E5E5"> what do</font><font color="#CCCCCC"> you do</font>

1118
01:02:09,780 --> 01:02:13,470
simplest means<font color="#E5E5E5"> just</font><font color="#CCCCCC"> go back</font><font color="#E5E5E5"> to first</font>

1119
01:02:11,640 --> 01:02:20,160
<font color="#E5E5E5">principles read the instruction and this</font>

1120
01:02:13,470 --> 01:02:23,399
put it down on paper right<font color="#E5E5E5"> and always</font>

1121
01:02:20,160 --> 01:02:28,069
<font color="#CCCCCC">remember everything</font><font color="#E5E5E5"> must be full by its</font>

1122
01:02:23,400 --> 01:02:32,730
alliance which means that if<font color="#E5E5E5"> we</font><font color="#CCCCCC"> are in</font>

1123
01:02:28,069 --> 01:02:37,109
some mode then<font color="#E5E5E5"> we don't</font><font color="#CCCCCC"> calculate it</font>

1124
01:02:32,730 --> 01:02:40,289
with 4 steps but with 2<font color="#E5E5E5"> so we can end up</font>

1125
01:02:37,109 --> 01:02:43,049
<font color="#E5E5E5">having something not for by the line in</font>

1126
01:02:40,289 --> 01:02:45,660
that case we will<font color="#CCCCCC"> just add</font><font color="#E5E5E5"> not what</font>

1127
01:02:43,049 --> 01:02:49,020
there is is really<font color="#E5E5E5"> an</font><font color="#CCCCCC"> oven arm so</font><font color="#E5E5E5"> you're</font>

1128
01:02:45,660 --> 01:02:53,520
just a useless instruction so that's

1129
01:02:49,020 --> 01:02:56,160
that so in in this case<font color="#CCCCCC"> we add enough</font>

1130
01:02:53,520 --> 01:03:00,240
<font color="#E5E5E5">because we are just imagine this is</font>

1131
01:02:56,160 --> 01:03:04,940
<font color="#CCCCCC">thumb</font><font color="#E5E5E5"> modes and we just don't get the</font>

1132
01:03:00,240 --> 01:03:10,229
12th really we are<font color="#CCCCCC"> in ending up</font><font color="#E5E5E5"> it's</font>

1133
01:03:04,940 --> 01:03:12,900
right little<font color="#E5E5E5"> pool for by the lines we</font>

1134
01:03:10,230 --> 01:03:16,109
<font color="#CCCCCC">added</font><font color="#E5E5E5"> x-ray so once it's</font><font color="#CCCCCC"> just two</font><font color="#E5E5E5"> things</font>

1135
01:03:12,900 --> 01:03:18,119
to remember<font color="#E5E5E5"> really this address of the</font>

1136
01:03:16,109 --> 01:03:20,430
<font color="#CCCCCC">literal pool must be for bad line and</font>

1137
01:03:18,119 --> 01:03:25,319
this number<font color="#E5E5E5"> of the offset must before</font>

1138
01:03:20,430 --> 01:03:27,690
<font color="#E5E5E5">bed</font><font color="#CCCCCC"> that's it</font><font color="#E5E5E5"> that's</font><font color="#CCCCCC"> if</font><font color="#E5E5E5"> if it's not if</font>

1139
01:03:25,319 --> 01:03:29,700
it is<font color="#CCCCCC"> not fitting</font><font color="#E5E5E5"> you know to put an OP</font>

1140
01:03:27,690 --> 01:03:31,850
in<font color="#E5E5E5"> between to kind of make it fit</font><font color="#CCCCCC"> today</font>

1141
01:03:29,700 --> 01:03:53,049
this<font color="#E5E5E5"> only applies to</font><font color="#CCCCCC"> some</font><font color="#E5E5E5"> not</font>

1142
01:03:31,850 --> 01:03:55,730
<font color="#E5E5E5">yes No so look at this trick</font>

1143
01:03:53,050 --> 01:03:58,060
yes let's study this code look at the

1144
01:03:55,730 --> 01:04:02,330
<font color="#E5E5E5">addresses this is</font><font color="#CCCCCC"> plus eight plus AC</font>

1145
01:03:58,060 --> 01:04:04,370
<font color="#E5E5E5">these are two byte addresses this is</font>

1146
01:04:02,330 --> 01:04:06,650
<font color="#CCCCCC">eight ten twelve fourteen</font>

1147
01:04:04,370 --> 01:04:09,200
these are thump instructions<font color="#E5E5E5"> you see</font>

1148
01:04:06,650 --> 01:04:11,540
though of course<font color="#E5E5E5"> the the sizes</font><font color="#CCCCCC"> are also</font>

1149
01:04:09,200 --> 01:04:15,230
<font color="#E5E5E5">two bytes so in thumb cord</font>

1150
01:04:11,540 --> 01:04:18,680
everything will be<font color="#CCCCCC"> two byte aligned but</font>

1151
01:04:15,230 --> 01:04:20,780
offset of literal pool this value must

1152
01:04:18,680 --> 01:04:33,009
be<font color="#CCCCCC"> four</font><font color="#E5E5E5"> by tulane</font><font color="#CCCCCC"> whether it</font><font color="#E5E5E5"> is our or</font>

1153
01:04:20,780 --> 01:04:55,910
<font color="#CCCCCC">sum which I didn't you didn't get to it</font>

1154
01:04:33,010 --> 01:04:57,980
this<font color="#CCCCCC"> is</font><font color="#E5E5E5"> a multiple</font><font color="#CCCCCC"> of four yeah well</font>

1155
01:04:55,910 --> 01:05:03,710
<font color="#E5E5E5">typically at the end</font><font color="#CCCCCC"> of every function</font>

1156
01:04:57,980 --> 01:05:07,100
<font color="#E5E5E5">you're gonna return anyways</font><font color="#CCCCCC"> oh there</font>

1157
01:05:03,710 --> 01:05:08,780
will<font color="#E5E5E5"> be a return</font><font color="#CCCCCC"> instruction so here</font><font color="#E5E5E5"> is</font>

1158
01:05:07,100 --> 01:05:12,380
<font color="#E5E5E5">we're not returning what we're invoking</font>

1159
01:05:08,780 --> 01:05:18,740
a an interrupt so it's<font color="#E5E5E5"> again gonna go</font>

1160
01:05:12,380 --> 01:05:21,650
away from the<font color="#CCCCCC"> ISR</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> return away yes</font>

1161
01:05:18,740 --> 01:05:23,919
speaking of<font color="#E5E5E5"> invoking you want to make</font>

1162
01:05:21,650 --> 01:05:29,000
the x86 part sure

1163
01:05:23,920 --> 01:05:33,080
so now again let's kind of think<font color="#E5E5E5"> of the</font>

1164
01:05:29,000 --> 01:05:34,910
<font color="#E5E5E5">focus</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> she'll go for</font><font color="#CCCCCC"> those of us</font>

1165
01:05:33,080 --> 01:05:39,020
<font color="#CCCCCC">who've written Intel shellcode</font><font color="#E5E5E5"> what a</font>

1166
01:05:34,910 --> 01:05:39,680
<font color="#CCCCCC">share will really do what do we do in</font>

1167
01:05:39,020 --> 01:05:41,690
<font color="#CCCCCC">she'll go</font>

1168
01:05:39,680 --> 01:05:44,210
you know there's several<font color="#E5E5E5"> types of share</font>

1169
01:05:41,690 --> 01:05:47,700
for this exact shell

1170
01:05:44,210 --> 01:05:50,280
<font color="#E5E5E5">mindshare reverse shell but effectively</font>

1171
01:05:47,700 --> 01:05:53,640
<font color="#CCCCCC">what are you doing in shell</font><font color="#E5E5E5"> you'd making</font>

1172
01:05:50,280 --> 01:05:56,329
use of operating system services<font color="#CCCCCC"> IDEs or</font>

1173
01:05:53,640 --> 01:06:00,450
to launch<font color="#E5E5E5"> a binary or to open a socket</font>

1174
01:05:56,329 --> 01:06:03,210
<font color="#CCCCCC">to</font><font color="#E5E5E5"> establish a connection change the</font>

1175
01:06:00,450 --> 01:06:07,288
iostream standard in standard or<font color="#E5E5E5"> all</font>

1176
01:06:03,210 --> 01:06:10,319
these are<font color="#E5E5E5"> Cisco's so effectively</font><font color="#CCCCCC"> your</font>

1177
01:06:07,289 --> 01:06:12,359
shell<font color="#CCCCCC"> pod is nothing but set up some</font>

1178
01:06:10,319 --> 01:06:14,849
<font color="#E5E5E5">parameters in focus is called set up</font>

1179
01:06:12,359 --> 01:06:19,430
some parameters<font color="#CCCCCC"> invoker sisqual until</font>

1180
01:06:14,849 --> 01:06:24,839
you get the activity that<font color="#E5E5E5"> you want so</font>

1181
01:06:19,430 --> 01:06:25,200
how do<font color="#CCCCCC"> sis cars get invoked in Intel you</font>

1182
01:06:24,839 --> 01:06:30,319
either

1183
01:06:25,200 --> 01:06:32,848
push the parameters on the stack<font color="#E5E5E5"> or some</font>

1184
01:06:30,319 --> 01:06:36,089
operating<font color="#E5E5E5"> systems</font><font color="#CCCCCC"> also have the</font>

1185
01:06:32,849 --> 01:06:40,020
parameters loaded in registers the<font color="#CCCCCC"> SIS</font>

1186
01:06:36,089 --> 01:06:41,970
<font color="#E5E5E5">call number goes into</font><font color="#CCCCCC"> e^x</font><font color="#E5E5E5"> so every</font>

1187
01:06:40,020 --> 01:06:44,940
operating<font color="#CCCCCC"> system will have several Cisco</font>

1188
01:06:41,970 --> 01:06:47,430
hundreds of Cisco's and each of them

1189
01:06:44,940 --> 01:06:49,970
have a<font color="#E5E5E5"> number like number</font><font color="#CCCCCC"> eleven</font><font color="#E5E5E5"> means</font>

1190
01:06:47,430 --> 01:06:53,669
exactly<font color="#E5E5E5"> number sixty-three means due to</font>

1191
01:06:49,970 --> 01:06:55,348
<font color="#E5E5E5">number 281 means socket so whatever</font>

1192
01:06:53,670 --> 01:06:58,349
service you want you put<font color="#E5E5E5"> that number</font>

1193
01:06:55,349 --> 01:07:02,099
into the accumulator<font color="#CCCCCC"> any eggs and then</font>

1194
01:06:58,349 --> 01:07:04,980
either<font color="#CCCCCC"> invoke say Center</font><font color="#E5E5E5"> or interrupt</font>

1195
01:07:02,099 --> 01:07:06,869
<font color="#E5E5E5">eighty this will trap to</font><font color="#CCCCCC"> kernel more the</font>

1196
01:07:04,980 --> 01:07:15,839
kernel will process this is<font color="#E5E5E5"> call for</font><font color="#CCCCCC"> you</font>

1197
01:07:06,869 --> 01:07:19,619
and<font color="#E5E5E5"> return inner so should</font><font color="#CCCCCC"> i</font><font color="#E5E5E5"> all right</font>

1198
01:07:15,839 --> 01:07:24,058
<font color="#CCCCCC">so this works a little</font><font color="#E5E5E5"> bit slightly</font>

1199
01:07:19,619 --> 01:07:26,520
<font color="#E5E5E5">different so whenever we want to invoke</font>

1200
01:07:24,059 --> 01:07:30,210
a system call we first need to load all

1201
01:07:26,520 --> 01:07:32,849
the parameters into registers<font color="#E5E5E5"> once we</font>

1202
01:07:30,210 --> 01:07:36,299
have done that we need<font color="#E5E5E5"> to invoke the</font>

1203
01:07:32,849 --> 01:07:41,339
<font color="#E5E5E5">system call by first figuring out a</font>

1204
01:07:36,299 --> 01:07:44,970
<font color="#CCCCCC">Cisco number then</font><font color="#E5E5E5"> moving it into our</font>

1205
01:07:41,339 --> 01:07:50,339
seven which is<font color="#CCCCCC"> a specific register for</font>

1206
01:07:44,970 --> 01:07:54,450
<font color="#CCCCCC">that purpose</font><font color="#E5E5E5"> and then being woke the</font>

1207
01:07:50,339 --> 01:07:56,860
system call very simple very<font color="#E5E5E5"> simple so</font>

1208
01:07:54,450 --> 01:08:04,240
let's<font color="#E5E5E5"> look at an</font><font color="#CCCCCC"> example</font>

1209
01:07:56,860 --> 01:08:06,490
let's say we<font color="#E5E5E5"> take right so how</font><font color="#CCCCCC"> many how</font>

1210
01:08:04,240 --> 01:08:11,529
many registers will we need for the

1211
01:08:06,490 --> 01:08:17,769
variables in this in this<font color="#CCCCCC"> example yeah</font>

1212
01:08:11,530 --> 01:08:24,310
<font color="#CCCCCC">three so we will use our 0 r1 r2 and</font>

1213
01:08:17,770 --> 01:08:28,359
then this is<font color="#E5E5E5"> called this looks like this</font>

1214
01:08:24,310 --> 01:08:32,500
<font color="#E5E5E5">so very simple we just stored the one we</font>

1215
01:08:28,359 --> 01:08:34,150
move the<font color="#CCCCCC"> one and two are 0 the string</font>

1216
01:08:32,500 --> 01:08:39,370
reloads the pointer to the<font color="#E5E5E5"> string we</font>

1217
01:08:34,149 --> 01:08:42,189
<font color="#CCCCCC">load</font><font color="#E5E5E5"> into r1 and then the the bytes the</font>

1218
01:08:39,370 --> 01:08:46,290
length into<font color="#CCCCCC"> r2 and then syscall number</font>

1219
01:08:42,189 --> 01:08:52,059
<font color="#CCCCCC">four</font><font color="#E5E5E5"> off right into our</font><font color="#CCCCCC"> seven and we</font>

1220
01:08:46,290 --> 01:08:56,910
invoke the same we will do with<font color="#CCCCCC"> our</font>

1221
01:08:52,060 --> 01:08:58,890
<font color="#E5E5E5">shellcode well we won't invoke right but</font>

1222
01:08:56,910 --> 01:09:01,510
principle is the same

1223
01:08:58,890 --> 01:09:03,359
<font color="#E5E5E5">so effectively</font><font color="#CCCCCC"> your arm shellcodes</font><font color="#E5E5E5"> gonna</font>

1224
01:09:01,510 --> 01:09:07,930
be exactly<font color="#CCCCCC"> like this</font><font color="#E5E5E5"> you're setting</font>

1225
01:09:03,359 --> 01:09:10,960
registers r0 r1 r2 or r3<font color="#E5E5E5"> set r7 to</font>

1226
01:09:07,930 --> 01:09:23,770
whatever<font color="#E5E5E5"> value</font><font color="#CCCCCC"> you want is a syscall SVC</font>

1227
01:09:10,960 --> 01:09:26,290
<font color="#CCCCCC">zero then</font><font color="#E5E5E5"> so yeah there's there's</font><font color="#CCCCCC"> only</font>

1228
01:09:23,770 --> 01:09:30,970
<font color="#E5E5E5">where this 15 registers but we can't use</font>

1229
01:09:26,290 --> 01:09:35,049
the last<font color="#E5E5E5"> 5 this special in arm generally</font>

1230
01:09:30,970 --> 01:09:38,680
functions<font color="#E5E5E5"> will pass parameters</font><font color="#CCCCCC"> vary</font>

1231
01:09:35,049 --> 01:09:42,609
registers up to<font color="#CCCCCC"> 4 parameters</font><font color="#E5E5E5"> will pass</font>

1232
01:09:38,680 --> 01:09:45,430
will be passed by R 1 R<font color="#CCCCCC"> 0 R</font><font color="#E5E5E5"> 1 R 2 R 3</font><font color="#CCCCCC"> if</font>

1233
01:09:42,609 --> 01:09:47,560
you have more<font color="#E5E5E5"> than that then the</font><font color="#CCCCCC"> rest of</font>

1234
01:09:45,430 --> 01:09:50,350
them<font color="#CCCCCC"> can be spilled over on the stack</font>

1235
01:09:47,560 --> 01:09:53,440
<font color="#CCCCCC">that</font><font color="#E5E5E5"> is the ARM architecture procedure</font>

1236
01:09:50,350 --> 01:09:55,870
call standard so so compilers will

1237
01:09:53,439 --> 01:09:57,610
choose<font color="#CCCCCC"> for pair if your function is 4</font>

1238
01:09:55,870 --> 01:10:00,070
parameters<font color="#CCCCCC"> the</font><font color="#E5E5E5"> compilers will generate</font>

1239
01:09:57,610 --> 01:10:03,759
code for registered bound parameters

1240
01:10:00,070 --> 01:10:06,759
<font color="#E5E5E5">more than 4</font><font color="#CCCCCC"> then</font><font color="#E5E5E5"> you spill them</font><font color="#CCCCCC"> onto</font><font color="#E5E5E5"> the</font>

1241
01:10:03,760 --> 01:10:09,490
stack<font color="#E5E5E5"> if you have to have a siscon which</font>

1242
01:10:06,760 --> 01:10:10,150
requires more<font color="#CCCCCC"> than</font><font color="#E5E5E5"> 6 parameters and you</font>

1243
01:10:09,490 --> 01:10:11,800
catch<font color="#CCCCCC"> holder</font>

1244
01:10:10,150 --> 01:10:18,969
the developer and teach them a lesson in

1245
01:10:11,800 --> 01:10:20,680
modular<font color="#CCCCCC"> programming</font><font color="#E5E5E5"> so no but no</font><font color="#CCCCCC"> syscall</font>

1246
01:10:18,970 --> 01:10:28,060
<font color="#E5E5E5">uses more</font><font color="#CCCCCC"> than</font><font color="#E5E5E5"> six at</font><font color="#CCCCCC"> least not that</font>

1247
01:10:20,680 --> 01:10:29,980
<font color="#E5E5E5">I've seen right all right</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> so let's</font>

1248
01:10:28,060 --> 01:10:30,580
let's<font color="#E5E5E5"> play the next play with some</font>

1249
01:10:29,980 --> 01:10:33,190
assembly

1250
01:10:30,580 --> 01:10:35,680
let's assemble some code and<font color="#E5E5E5"> gdb it and</font>

1251
01:10:33,190 --> 01:10:38,230
get<font color="#E5E5E5"> familiar then we will do a quick</font>

1252
01:10:35,680 --> 01:10:41,460
<font color="#E5E5E5">crash and then we will start</font><font color="#CCCCCC"> getting the</font>

1253
01:10:38,230 --> 01:10:41,459
<font color="#E5E5E5">shell code in place</font>

1254
01:11:29,120 --> 01:11:32,540
this is<font color="#E5E5E5"> readable</font>

1255
01:12:11,880 --> 01:12:18,660
<font color="#E5E5E5">okay so I've just set up my working</font>

1256
01:12:16,510 --> 01:12:18,660
directory

1257
01:12:28,150 --> 01:12:36,200
let us look at this<font color="#E5E5E5"> one first notice</font>

1258
01:12:31,730 --> 01:12:39,200
<font color="#E5E5E5">that's your first assembly program now</font>

1259
01:12:36,200 --> 01:12:40,880
you can use VI or<font color="#CCCCCC"> Nano</font><font color="#E5E5E5"> if you like if</font>

1260
01:12:39,200 --> 01:12:49,700
you<font color="#E5E5E5"> don't know</font><font color="#CCCCCC"> any of these two editors</font>

1261
01:12:40,880 --> 01:12:52,370
then<font color="#E5E5E5"> sucks to be you</font><font color="#CCCCCC"> I don't have Emacs</font>

1262
01:12:49,700 --> 01:12:58,070
on it and I'm<font color="#E5E5E5"> not gonna have to get it</font>

1263
01:12:52,370 --> 01:13:00,769
I'm so sorry ma<font color="#E5E5E5"> yeah I mean I think I</font>

1264
01:12:58,070 --> 01:13:04,519
think<font color="#CCCCCC"> I have been on it it's VI even</font>

1265
01:13:00,770 --> 01:13:07,670
more<font color="#CCCCCC"> so difference</font><font color="#E5E5E5"> okay so this is how</font>

1266
01:13:04,520 --> 01:13:10,040
we are gonna<font color="#E5E5E5"> compile all or assemble all</font>

1267
01:13:07,670 --> 01:13:15,500
<font color="#CCCCCC">our code whenever I use the word compile</font>

1268
01:13:10,040 --> 01:13:19,160
think assemble<font color="#E5E5E5"> every code begins with</font>

1269
01:13:15,500 --> 01:13:22,610
section dot<font color="#E5E5E5"> text whenever we are writing</font>

1270
01:13:19,160 --> 01:13:25,340
assembly we will<font color="#E5E5E5"> create an elf binary to</font>

1271
01:13:22,610 --> 01:13:27,320
test it out but when we writing shell

1272
01:13:25,340 --> 01:13:29,630
<font color="#E5E5E5">code this will be then injected in the</font>

1273
01:13:27,320 --> 01:13:32,150
in a payload somewhere<font color="#E5E5E5"> however for</font>

1274
01:13:29,630 --> 01:13:33,860
testing<font color="#E5E5E5"> we'll still will still put it as</font>

1275
01:13:32,150 --> 01:13:37,099
an elf binary so to test whether it

1276
01:13:33,860 --> 01:13:39,740
works or not<font color="#E5E5E5"> so</font><font color="#CCCCCC"> we always begin section</font>

1277
01:13:37,100 --> 01:13:42,620
text and define a global label

1278
01:13:39,740 --> 01:13:46,610
underscore start this<font color="#E5E5E5"> will be the entry</font>

1279
01:13:42,620 --> 01:13:48,380
point of<font color="#CCCCCC"> the elf binary and then all</font>

1280
01:13:46,610 --> 01:13:51,500
your instructions<font color="#E5E5E5"> will fall under start</font>

1281
01:13:48,380 --> 01:13:56,120
so here we have move our<font color="#CCCCCC"> zero comma</font><font color="#E5E5E5"> 2</font>

1282
01:13:51,500 --> 01:13:59,120
and<font color="#E5E5E5"> our</font><font color="#CCCCCC"> 1</font><font color="#E5E5E5"> add</font><font color="#CCCCCC"> our 1 equals R 0 plus R 0</font>

1283
01:13:56,120 --> 01:14:02,330
and this BK PT is just a<font color="#CCCCCC"> breakpoint so</font>

1284
01:13:59,120 --> 01:14:04,880
that's the end of your<font color="#CCCCCC"> code</font><font color="#E5E5E5"> you will run</font>

1285
01:14:02,330 --> 01:14:06,530
this in a debugger<font color="#E5E5E5"> there's no standard</font>

1286
01:14:04,880 --> 01:14:07,760
in standard out so whenever we're

1287
01:14:06,530 --> 01:14:11,000
testing our code

1288
01:14:07,760 --> 01:14:12,950
we'll just gdb this and and single step

1289
01:14:11,000 --> 01:14:19,420
<font color="#E5E5E5">through and see what changes</font><font color="#CCCCCC"> happen to</font>

1290
01:14:12,950 --> 01:14:23,870
the registers right<font color="#E5E5E5"> so very</font><font color="#CCCCCC"> simple I am</font>

1291
01:14:19,420 --> 01:14:26,140
<font color="#CCCCCC">going to now assemble</font><font color="#E5E5E5"> this code now</font>

1292
01:14:23,870 --> 01:14:34,940
let's be<font color="#E5E5E5"> very careful in the assembly a</font>

1293
01:14:26,140 --> 01:14:38,110
s first dot s -<font color="#CCCCCC"> o</font><font color="#E5E5E5"> first dot o this will</font>

1294
01:14:34,940 --> 01:14:38,110
generate the object file

1295
01:14:41,350 --> 01:14:47,980
if you want to check the disassembly<font color="#CCCCCC"> you</font>

1296
01:14:45,260 --> 01:14:59,889
can disassemble the object file by using

1297
01:14:47,980 --> 01:14:59,888
object<font color="#E5E5E5"> dump object dump -</font><font color="#CCCCCC"> D first dot o</font>

1298
01:15:02,380 --> 01:15:09,110
<font color="#CCCCCC">and this will show you that okay</font><font color="#E5E5E5"> this is</font>

1299
01:15:05,989 --> 01:15:11,409
the start<font color="#CCCCCC"> although all the addresses</font><font color="#E5E5E5"> are</font>

1300
01:15:09,110 --> 01:15:16,119
relative<font color="#E5E5E5"> because it has not been linked</font>

1301
01:15:11,409 --> 01:15:20,570
here you see the relative<font color="#E5E5E5"> offset</font><font color="#CCCCCC"> zero</font>

1302
01:15:16,119 --> 01:15:24,469
this is the instruction in encoded form

1303
01:15:20,570 --> 01:15:28,670
<font color="#E5E5E5">four bytes and this are the mnemonics</font>

1304
01:15:24,469 --> 01:15:32,600
<font color="#E5E5E5">before that instruction each instruction</font>

1305
01:15:28,670 --> 01:15:39,500
you see is<font color="#E5E5E5"> four bytes long the move the</font>

1306
01:15:32,600 --> 01:15:43,969
<font color="#CCCCCC">add</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> BK</font><font color="#E5E5E5"> PT is how object</font><font color="#CCCCCC"> up looks</font>

1307
01:15:39,500 --> 01:15:48,429
like<font color="#CCCCCC"> now let us link it so you're going</font>

1308
01:15:43,969 --> 01:15:52,429
to<font color="#E5E5E5"> use the linker LD while linking</font>

1309
01:15:48,429 --> 01:15:55,010
always remember this is<font color="#E5E5E5"> very specific</font><font color="#CCCCCC"> to</font>

1310
01:15:52,429 --> 01:16:00,250
shell quarry<font color="#E5E5E5"> always remember</font><font color="#CCCCCC"> to link</font>

1311
01:15:55,010 --> 01:16:00,250
with uppercase in as<font color="#E5E5E5"> a flag</font>

1312
01:16:07,010 --> 01:16:21,100
so LD -<font color="#CCCCCC"> Ian first</font><font color="#E5E5E5"> Otto -</font><font color="#CCCCCC"> OH</font>

1313
01:16:11,420 --> 01:16:26,750
first<font color="#E5E5E5"> this will generate an elf binary</font>

1314
01:16:21,100 --> 01:16:32,030
<font color="#E5E5E5">what is this - in the do it will turn</font>

1315
01:16:26,750 --> 01:16:34,160
the text section<font color="#E5E5E5"> into writable memory by</font>

1316
01:16:32,030 --> 01:16:37,009
default all binaries have the text

1317
01:16:34,160 --> 01:16:39,170
<font color="#E5E5E5">section read and execute the - n turns</font>

1318
01:16:37,010 --> 01:16:42,980
it<font color="#E5E5E5"> back to writable why do we want it</font>

1319
01:16:39,170 --> 01:16:44,840
right Abel because<font color="#CCCCCC"> our shell code is</font>

1320
01:16:42,980 --> 01:16:48,860
going<font color="#E5E5E5"> to</font><font color="#CCCCCC"> be eventually injected in</font>

1321
01:16:44,840 --> 01:16:51,680
writable memory we might modify some

1322
01:16:48,860 --> 01:16:55,519
data in the shell code itself so that<font color="#CCCCCC"> is</font>

1323
01:16:51,680 --> 01:16:57,170
why we always want to use<font color="#CCCCCC"> the - in just</font>

1324
01:16:55,520 --> 01:16:59,960
make that<font color="#E5E5E5"> a rule whenever</font><font color="#CCCCCC"> you linking</font>

1325
01:16:57,170 --> 01:17:07,070
shell code and testing it always is LD -

1326
01:16:59,960 --> 01:17:12,310
<font color="#E5E5E5">n so</font><font color="#CCCCCC"> how this</font><font color="#E5E5E5"> is linked and you will see</font>

1327
01:17:07,070 --> 01:17:12,309
<font color="#E5E5E5">that you</font><font color="#CCCCCC"> have a compiled binary</font><font color="#E5E5E5"> present</font>

1328
01:17:15,760 --> 01:17:21,790
once we<font color="#E5E5E5"> have a binary present will go to</font>

1329
01:17:18,610 --> 01:17:21,790
debug it

1330
01:17:21,940 --> 01:17:27,790
gdb first

1331
01:17:41,019 --> 01:17:48,219
and if we run<font color="#E5E5E5"> it it's just</font><font color="#CCCCCC"> gonna</font>

1332
01:17:45,369 --> 01:17:50,018
straight<font color="#E5E5E5"> away crash the way we will test</font>

1333
01:17:48,219 --> 01:17:52,719
our assembly is typically set a

1334
01:17:50,019 --> 01:17:56,860
<font color="#E5E5E5">breakpoint in the beginning and then we</font>

1335
01:17:52,719 --> 01:18:10,090
will<font color="#E5E5E5"> single step the instructions so I</font>

1336
01:17:56,860 --> 01:18:12,460
say break<font color="#E5E5E5"> underscores start is everyone</font>

1337
01:18:10,090 --> 01:18:14,380
<font color="#E5E5E5">following what I want to do is I'm just</font>

1338
01:18:12,460 --> 01:18:16,659
going<font color="#E5E5E5"> to</font><font color="#CCCCCC"> open a little</font><font color="#E5E5E5"> notepad and start</font>

1339
01:18:14,380 --> 01:18:20,400
<font color="#CCCCCC">typing the commands on the side so we</font>

1340
01:18:16,659 --> 01:18:20,400
just<font color="#E5E5E5"> have a little</font><font color="#CCCCCC"> list of it</font>

1341
01:18:33,310 --> 01:18:37,000
<font color="#E5E5E5">also change the microphone</font>

1342
01:19:14,150 --> 01:19:19,379
<font color="#E5E5E5">okay so just</font><font color="#CCCCCC"> to kind</font><font color="#E5E5E5"> of give a little</font>

1343
01:19:17,159 --> 01:19:22,099
command reference on the side to<font color="#CCCCCC"> make</font>

1344
01:19:19,380 --> 01:19:22,100
things a bit<font color="#CCCCCC"> easier</font>

1345
01:19:39,969 --> 01:19:44,840
okay<font color="#E5E5E5"> so we set a breakpoint at</font>

1346
01:19:42,650 --> 01:19:57,199
underscore start and now you just<font color="#E5E5E5"> type</font>

1347
01:19:44,840 --> 01:20:02,690
it on and here you<font color="#E5E5E5"> get the all this is</font>

1348
01:19:57,199 --> 01:20:04,759
nice<font color="#CCCCCC"> gef stuff so you're at</font><font color="#E5E5E5"> the</font>

1349
01:20:02,690 --> 01:20:07,509
breakpoint<font color="#CCCCCC"> let me just give a quick tour</font>

1350
01:20:04,760 --> 01:20:10,699
of G if it says starting program

1351
01:20:07,510 --> 01:20:14,540
breakpoint is at 8:05<font color="#E5E5E5"> for that is the</font>

1352
01:20:10,699 --> 01:20:18,969
entry<font color="#CCCCCC"> point of</font><font color="#E5E5E5"> your elf binary this is</font>

1353
01:20:14,540 --> 01:20:21,769
this stuff is the the stack section and

1354
01:20:18,969 --> 01:20:25,340
here you see the registers your program

1355
01:20:21,770 --> 01:20:30,489
counter<font color="#CCCCCC"> is at 8:05 four by default your</font>

1356
01:20:25,340 --> 01:20:32,840
in<font color="#CCCCCC"> arm mode</font><font color="#E5E5E5"> all your registers</font><font color="#CCCCCC"> as 0</font><font color="#E5E5E5"> and</font>

1357
01:20:30,489 --> 01:20:34,489
these are the<font color="#CCCCCC"> instructions that you're</font>

1358
01:20:32,840 --> 01:20:38,869
going<font color="#E5E5E5"> to now execute your current</font>

1359
01:20:34,489 --> 01:20:46,308
instruction is more<font color="#CCCCCC"> r02 you then going</font>

1360
01:20:38,869 --> 01:20:50,659
to do a step<font color="#E5E5E5"> I that will then set the</font>

1361
01:20:46,309 --> 01:20:55,300
<font color="#CCCCCC">value to</font><font color="#E5E5E5"> into r0</font><font color="#CCCCCC"> all modified registers</font>

1362
01:20:50,659 --> 01:21:03,049
you will see by you see in the red<font color="#E5E5E5"> color</font>

1363
01:20:55,300 --> 01:21:07,809
the next step I will do the<font color="#CCCCCC"> ad you</font><font color="#E5E5E5"> see</font>

1364
01:21:03,050 --> 01:21:11,150
<font color="#CCCCCC">r1 as 4</font><font color="#E5E5E5"> and then you hit the breakpoint</font>

1365
01:21:07,809 --> 01:21:16,190
<font color="#CCCCCC">you can even</font><font color="#E5E5E5"> to continue to let it run</font>

1366
01:21:11,150 --> 01:21:18,259
further and then<font color="#E5E5E5"> you say it's it's</font>

1367
01:21:16,190 --> 01:21:20,710
crashed because<font color="#E5E5E5"> now it</font><font color="#CCCCCC"> has it has hit</font>

1368
01:21:18,260 --> 01:21:20,710
the breakpoint

1369
01:21:25,490 --> 01:21:33,889
still all good<font color="#CCCCCC"> okay</font>

1370
01:21:35,660 --> 01:21:45,240
once you're done debugging<font color="#E5E5E5"> you do Q to</font>

1371
01:21:40,320 --> 01:21:47,219
quit<font color="#E5E5E5"> with the debugger so this out</font>

1372
01:21:45,240 --> 01:21:49,050
<font color="#E5E5E5">typically your test session will be</font>

1373
01:21:47,220 --> 01:22:02,310
whenever<font color="#E5E5E5"> you playing with assembly this</font>

1374
01:21:49,050 --> 01:22:06,080
<font color="#E5E5E5">is your test session ok any questions</font>

1375
01:22:02,310 --> 01:22:13,470
about gdb or assembly or the process or

1376
01:22:06,080 --> 01:22:17,970
things like<font color="#E5E5E5"> this now we will see a very</font>

1377
01:22:13,470 --> 01:22:21,780
quick<font color="#E5E5E5"> crash and we're gonna write a</font>

1378
01:22:17,970 --> 01:22:25,080
shell code for the crash<font color="#E5E5E5"> so I'm going</font><font color="#CCCCCC"> to</font>

1379
01:22:21,780 --> 01:22:31,410
show you how many<font color="#E5E5E5"> of you are familiar</font>

1380
01:22:25,080 --> 01:22:34,170
<font color="#E5E5E5">with stack overflows that's</font><font color="#CCCCCC"> alright just</font>

1381
01:22:31,410 --> 01:22:37,320
<font color="#CCCCCC">the</font><font color="#E5E5E5"> overall concept of stack</font><font color="#CCCCCC"> holds all</font>

1382
01:22:34,170 --> 01:22:44,040
right so here is<font color="#E5E5E5"> your classic spot the</font>

1383
01:22:37,320 --> 01:22:46,440
bug thing where is the<font color="#E5E5E5"> bug</font><font color="#CCCCCC"> your string</font>

1384
01:22:44,040 --> 01:22:50,610
copy this is what's paying our salaries

1385
01:22:46,440 --> 01:22:54,629
for<font color="#E5E5E5"> 30 years now business good old</font>

1386
01:22:50,610 --> 01:22:57,089
string<font color="#E5E5E5"> copy somebody</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> wearing a shirt</font>

1387
01:22:54,630 --> 01:22:59,580
string copy and string cat<font color="#E5E5E5"> that is the</font>

1388
01:22:57,090 --> 01:23:03,420
most fantastic<font color="#E5E5E5"> shirt</font><font color="#CCCCCC"> ever satisfy I just</font>

1389
01:22:59,580 --> 01:23:07,280
saw that walking past year<font color="#E5E5E5"> so what's</font>

1390
01:23:03,420 --> 01:23:10,890
going to<font color="#CCCCCC"> happen if s is greater than 128</font>

1391
01:23:07,280 --> 01:23:13,950
<font color="#CCCCCC">lower flow the buffer</font><font color="#E5E5E5"> it will go pass</font>

1392
01:23:10,890 --> 01:23:20,220
the stack frame it will overwrite the

1393
01:23:13,950 --> 01:23:21,990
<font color="#E5E5E5">saved program counter in this</font><font color="#CCCCCC"> stack why</font>

1394
01:23:20,220 --> 01:23:24,480
will the<font color="#CCCCCC"> program counter be saved on</font><font color="#E5E5E5"> the</font>

1395
01:23:21,990 --> 01:23:27,650
stack<font color="#E5E5E5"> that's what it</font><font color="#CCCCCC"> is only saved in</font>

1396
01:23:24,480 --> 01:23:27,650
the link register isn't<font color="#CCCCCC"> it</font>

1397
01:23:30,199 --> 01:23:40,519
so is function<font color="#E5E5E5"> one a leaf function or a</font>

1398
01:23:33,260 --> 01:23:44,360
non leaf function it<font color="#E5E5E5"> is how many</font><font color="#CCCCCC"> is in</font>

1399
01:23:40,520 --> 01:23:49,760
not a leaf function how many of you say

1400
01:23:44,360 --> 01:23:50,839
leaf function well here it<font color="#CCCCCC"> is not</font><font color="#E5E5E5"> a Z</font>

1401
01:23:49,760 --> 01:23:54,320
<font color="#CCCCCC">function because it's going to call</font>

1402
01:23:50,840 --> 01:23:56,480
string<font color="#CCCCCC"> copy</font><font color="#E5E5E5"> function one does invoke a</font>

1403
01:23:54,320 --> 01:23:58,549
library function for a string<font color="#E5E5E5"> copy so it</font>

1404
01:23:56,480 --> 01:24:01,160
is not a leaf function and therefore

1405
01:23:58,550 --> 01:24:04,460
function<font color="#E5E5E5"> one will save the link register</font>

1406
01:24:01,160 --> 01:24:07,699
<font color="#E5E5E5">push it on the stack</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> when</font><font color="#CCCCCC"> it returns</font>

1407
01:24:04,460 --> 01:24:10,040
it<font color="#E5E5E5"> will pop the same link register into</font>

1408
01:24:07,699 --> 01:24:13,309
the program<font color="#E5E5E5"> counter so we will overflow</font>

1409
01:24:10,040 --> 01:24:15,260
the frame we will get control of the

1410
01:24:13,310 --> 01:24:17,390
program<font color="#CCCCCC"> counter will</font><font color="#E5E5E5"> get a</font><font color="#CCCCCC"> segmentation</font>

1411
01:24:15,260 --> 01:24:20,480
fault<font color="#CCCCCC"> will get a core dump and all that</font>

1412
01:24:17,390 --> 01:24:22,550
<font color="#CCCCCC">right and towards</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> end of our crash</font>

1413
01:24:20,480 --> 01:24:25,580
<font color="#CCCCCC">let me show you what the crash looks</font>

1414
01:24:22,550 --> 01:24:33,980
like we will<font color="#E5E5E5"> see this is how the crash</font>

1415
01:24:25,580 --> 01:24:37,239
is<font color="#CCCCCC"> there like a very quick crash course</font>

1416
01:24:33,980 --> 01:24:37,239
in stack overflow

1417
01:24:40,210 --> 01:24:55,929
we have victim<font color="#E5E5E5"> 1 dot</font><font color="#CCCCCC"> C over here is the</font>

1418
01:24:49,370 --> 01:24:55,929
same<font color="#CCCCCC"> thing let</font><font color="#E5E5E5"> us make victim 1</font>

1419
01:25:05,460 --> 01:25:10,060
<font color="#E5E5E5">he's gonna compile the code</font><font color="#CCCCCC"> I've cheated</font>

1420
01:25:08,740 --> 01:25:12,610
a little have turned the stack

1421
01:25:10,060 --> 01:25:16,030
executable and all that so<font color="#E5E5E5"> kind of just</font>

1422
01:25:12,610 --> 01:25:17,290
get us through the workshop really as I

1423
01:25:16,030 --> 01:25:23,950
don't<font color="#E5E5E5"> have time to teach you</font>

1424
01:25:17,290 --> 01:25:28,750
<font color="#CCCCCC">return-oriented programming</font><font color="#E5E5E5"> make victim</font>

1425
01:25:23,950 --> 01:25:37,420
<font color="#E5E5E5">one then let us run it</font><font color="#CCCCCC"> we have to</font><font color="#E5E5E5"> be</font>

1426
01:25:28,750 --> 01:25:40,920
polite first we can't crash it yet see

1427
01:25:37,420 --> 01:25:40,920
victim<font color="#CCCCCC"> one hello world</font>

1428
01:25:46,990 --> 01:25:51,769
and it says okay so that means<font color="#CCCCCC"> the</font>

1429
01:25:49,280 --> 01:25:55,969
<font color="#E5E5E5">program ran it finished now we can be</font>

1430
01:25:51,770 --> 01:26:00,350
rude<font color="#CCCCCC"> now let's do victim 1 hello world</font>

1431
01:25:55,970 --> 01:26:08,780
<font color="#E5E5E5">and like and</font><font color="#CCCCCC"> the screaming</font><font color="#E5E5E5"> yeah unless</font>

1432
01:26:00,350 --> 01:26:12,290
<font color="#E5E5E5">screaming to line full of</font><font color="#CCCCCC"> face and we</font>

1433
01:26:08,780 --> 01:26:23,179
get segmentation fault<font color="#E5E5E5"> now if we do this</font>

1434
01:26:12,290 --> 01:26:24,920
in gdb<font color="#E5E5E5"> let's see what we get actually</font>

1435
01:26:23,180 --> 01:26:27,190
there's a there's a file which we will

1436
01:26:24,920 --> 01:26:27,190
<font color="#E5E5E5">use</font>

1437
01:26:37,449 --> 01:26:43,598
<font color="#E5E5E5">now let's just do</font><font color="#CCCCCC"> it this way</font>

1438
01:26:39,880 --> 01:26:43,599
gdb victim<font color="#E5E5E5"> 1</font>

1439
01:26:59,400 --> 01:27:15,809
and then you just<font color="#E5E5E5"> do a run with endless</font>

1440
01:27:03,330 --> 01:27:16,670
screaming is<font color="#CCCCCC"> two-line fools of it here</font>

1441
01:27:15,810 --> 01:27:25,230
we are

1442
01:27:16,670 --> 01:27:27,750
what do you see classic crash yeah<font color="#E5E5E5"> if it</font>

1443
01:27:25,230 --> 01:27:33,660
<font color="#CCCCCC">was Intel you'd get EIP equals 4 1 4 1 4</font>

1444
01:27:27,750 --> 01:27:39,510
1 4 1 if it is armed what do you get 4 1

1445
01:27:33,660 --> 01:27:42,809
4 1 4 1 4<font color="#CCCCCC"> 0 is</font><font color="#E5E5E5"> how you tell if somebody</font>

1446
01:27:39,510 --> 01:27:44,940
really<font color="#E5E5E5"> knows I am exploits you tell them</font>

1447
01:27:42,810 --> 01:27:46,800
and<font color="#E5E5E5"> you you go</font><font color="#CCCCCC"> to themselves oh dude I</font>

1448
01:27:44,940 --> 01:27:49,830
have this proof of<font color="#E5E5E5"> concept</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> gives</font>

1449
01:27:46,800 --> 01:27:52,670
<font color="#E5E5E5">you</font><font color="#CCCCCC"> PC equals</font><font color="#E5E5E5"> 4 1 4 1 4 1 4 if they fist</font>

1450
01:27:49,830 --> 01:27:56,640
<font color="#CCCCCC">bump you they know nothing</font><font color="#E5E5E5"> absolutely</font>

1451
01:27:52,670 --> 01:28:02,180
you suck<font color="#CCCCCC"> good</font><font color="#E5E5E5"> you'll never get 4 1 4 1 4</font>

1452
01:27:56,640 --> 01:28:02,180
1 in a<font color="#E5E5E5"> ok why is it 4</font><font color="#CCCCCC"> 1 4 1 4 1 4 0</font>

1453
01:28:02,300 --> 01:28:09,380
exactly<font color="#CCCCCC"> that's right you try to make a</font>

1454
01:28:06,450 --> 01:28:13,559
jump<font color="#E5E5E5"> to an</font><font color="#CCCCCC"> odd numbered address it</font>

1455
01:28:09,380 --> 01:28:17,060
jumped<font color="#E5E5E5"> to 4 1 4 1 4 1 4 0</font><font color="#CCCCCC"> and see what</font>

1456
01:28:13,560 --> 01:28:19,860
happens to the mode now it is thumb mode

1457
01:28:17,060 --> 01:28:22,460
so we<font color="#CCCCCC"> control the return address and we</font>

1458
01:28:19,860 --> 01:28:28,259
also control<font color="#CCCCCC"> what more we can</font><font color="#E5E5E5"> flip it in</font>

1459
01:28:22,460 --> 01:28:34,320
<font color="#CCCCCC">ok so this is what we get this</font><font color="#E5E5E5"> is the</font>

1460
01:28:28,260 --> 01:28:36,720
overall crash and this slide represents

1461
01:28:34,320 --> 01:28:38,460
what<font color="#CCCCCC"> you get in the crash this is your</font>

1462
01:28:36,720 --> 01:28:40,920
typical payload right you have your

1463
01:28:38,460 --> 01:28:43,260
<font color="#E5E5E5">buffer then this blue part is the</font>

1464
01:28:40,920 --> 01:28:45,690
<font color="#CCCCCC">overwritten program counter and your</font>

1465
01:28:43,260 --> 01:28:53,730
stack pointer will now be pointing to

1466
01:28:45,690 --> 01:28:55,740
the end of the frame<font color="#CCCCCC"> how are</font><font color="#E5E5E5"> we going</font><font color="#CCCCCC"> to</font>

1467
01:28:53,730 --> 01:28:58,320
now play this<font color="#E5E5E5"> out let's say</font><font color="#CCCCCC"> you're now</font>

1468
01:28:55,740 --> 01:29:00,150
writing<font color="#E5E5E5"> a exploit where will you place</font>

1469
01:28:58,320 --> 01:29:02,599
the shellcode<font color="#CCCCCC"> and</font><font color="#E5E5E5"> how do you jump to the</font>

1470
01:29:00,150 --> 01:29:02,599
<font color="#E5E5E5">shell go</font>

1471
01:29:06,949 --> 01:29:11,789
so we generate the pattern string let's

1472
01:29:09,300 --> 01:29:13,889
let me I mean we can do the pattern

1473
01:29:11,789 --> 01:29:16,409
<font color="#CCCCCC">thing</font><font color="#E5E5E5"> okay I just say that</font><font color="#CCCCCC"> this is</font>

1474
01:29:13,889 --> 01:29:18,570
offset 128 for example<font color="#E5E5E5"> let's say the</font>

1475
01:29:16,409 --> 01:29:24,980
offsets are known this is offset 128

1476
01:29:18,570 --> 01:29:29,909
<font color="#E5E5E5">this is 132 where does a shellcode go</font>

1477
01:29:24,980 --> 01:29:32,848
blue part or orange part we can put the

1478
01:29:29,909 --> 01:29:33,749
<font color="#CCCCCC">shellcode over here nicely</font><font color="#E5E5E5"> a line with a</font>

1479
01:29:32,849 --> 01:29:36,239
stack pointer

1480
01:29:33,749 --> 01:29:38,369
it was<font color="#E5E5E5"> Windows what do you do or or</font>

1481
01:29:36,239 --> 01:29:43,018
Linux or Intel what do you do how do<font color="#E5E5E5"> you</font>

1482
01:29:38,369 --> 01:29:45,480
get to the<font color="#E5E5E5"> shellcode you return to jump</font>

1483
01:29:43,019 --> 01:29:49,050
ESP so here you<font color="#CCCCCC"> find the address of a</font>

1484
01:29:45,480 --> 01:29:51,780
<font color="#CCCCCC">dll or a library and you</font><font color="#E5E5E5"> return to jump</font>

1485
01:29:49,050 --> 01:29:54,769
<font color="#CCCCCC">TSP jump ESP</font><font color="#E5E5E5"> lines here off you go</font>

1486
01:29:51,780 --> 01:29:58,199
<font color="#E5E5E5">shellcodes over will do the same thing</font>

1487
01:29:54,769 --> 01:30:02,730
<font color="#CCCCCC">you know</font><font color="#E5E5E5"> except we won't</font>

1488
01:29:58,199 --> 01:30:09,329
we don't have jump ESP what instruction

1489
01:30:02,730 --> 01:30:10,980
do we return to to the stack pointer so

1490
01:30:09,329 --> 01:30:16,768
what<font color="#CCCCCC"> instruction will that be on are</font>

1491
01:30:10,980 --> 01:30:20,039
there's no job<font color="#E5E5E5"> branch</font><font color="#CCCCCC"> bx</font><font color="#E5E5E5"> SP that's the</font>

1492
01:30:16,769 --> 01:30:22,499
instruction we want what idiot compiler

1493
01:30:20,039 --> 01:30:26,849
will generate<font color="#CCCCCC"> a</font><font color="#E5E5E5"> b</font><font color="#CCCCCC"> x SP instructions for</font>

1494
01:30:22,499 --> 01:30:29,579
you why did jump ESP<font color="#E5E5E5"> work in</font><font color="#CCCCCC"> intel i</font>

1495
01:30:26,849 --> 01:30:31,440
mean jump ESP is also complete<font color="#E5E5E5"> bizarre</font>

1496
01:30:29,579 --> 01:30:33,058
instruction<font color="#CCCCCC"> right think</font><font color="#E5E5E5"> about it who the</font>

1497
01:30:31,440 --> 01:30:35,369
<font color="#E5E5E5">hell wants to jump to the stack</font><font color="#CCCCCC"> pointer</font>

1498
01:30:33,059 --> 01:30:39,989
<font color="#E5E5E5">why should this instruction even</font><font color="#CCCCCC"> exist</font>

1499
01:30:35,369 --> 01:30:42,839
what makes it<font color="#E5E5E5"> exist on intel why do we</font>

1500
01:30:39,989 --> 01:30:59,610
find it with<font color="#CCCCCC"> ms FP scan or MSF else</font><font color="#E5E5E5"> can</font>

1501
01:30:42,840 --> 01:31:01,499
<font color="#CCCCCC">so</font><font color="#E5E5E5"> many of them no not really we just</font>

1502
01:30:59,610 --> 01:31:04,139
need<font color="#CCCCCC"> the byte sequence exactly an Intel</font>

1503
01:31:01,499 --> 01:31:07,260
you<font color="#E5E5E5"> can have unaligned</font><font color="#CCCCCC"> XS any two bytes</font>

1504
01:31:04,139 --> 01:31:08,820
become<font color="#CCCCCC"> jump ESP we're good</font><font color="#E5E5E5"> even if</font>

1505
01:31:07,260 --> 01:31:10,499
they're like the last byte of<font color="#E5E5E5"> one</font>

1506
01:31:08,820 --> 01:31:12,360
instruction the first byte<font color="#CCCCCC"> of the</font><font color="#E5E5E5"> next</font>

1507
01:31:10,499 --> 01:31:14,728
instruction if you can take them<font color="#E5E5E5"> and</font>

1508
01:31:12,360 --> 01:31:17,579
<font color="#CCCCCC">just compose a third instruction out of</font>

1509
01:31:14,729 --> 01:31:21,749
it that<font color="#E5E5E5"> that works well</font><font color="#CCCCCC"> in arm you</font>

1510
01:31:17,579 --> 01:31:24,089
<font color="#CCCCCC">no</font><font color="#E5E5E5"> Underland</font><font color="#CCCCCC"> is unaligned access so in</font>

1511
01:31:21,749 --> 01:31:26,849
that case what we do in arm is<font color="#CCCCCC"> just to</font>

1512
01:31:24,089 --> 01:31:29,599
cut a long<font color="#E5E5E5"> story</font><font color="#CCCCCC"> short instead</font><font color="#E5E5E5"> of</font>

1513
01:31:26,849 --> 01:31:35,129
looking for<font color="#E5E5E5"> for bite arm instructions</font><font color="#CCCCCC"> we</font>

1514
01:31:29,599 --> 01:31:37,679
force disassemble a binary<font color="#E5E5E5"> into thumb</font>

1515
01:31:35,129 --> 01:31:39,599
mode whether it's thumb but not because

1516
01:31:37,679 --> 01:31:41,609
<font color="#CCCCCC">you can always</font><font color="#E5E5E5"> split an arm instruction</font>

1517
01:31:39,599 --> 01:31:44,189
and to<font color="#CCCCCC"> thumbed instructions and if any</font>

1518
01:31:41,609 --> 01:31:47,820
of<font color="#CCCCCC"> those</font><font color="#E5E5E5"> two</font><font color="#CCCCCC"> bites becomes B XSP we're</font>

1519
01:31:44,189 --> 01:31:50,459
good<font color="#E5E5E5"> so we'll find a B X</font><font color="#CCCCCC"> SP</font><font color="#E5E5E5"> and then we</font>

1520
01:31:47,820 --> 01:31:52,709
will return<font color="#CCCCCC"> to</font><font color="#E5E5E5"> the stack and this is</font>

1521
01:31:50,459 --> 01:31:54,829
where our<font color="#E5E5E5"> shellcode goes</font><font color="#CCCCCC"> we are only</font>

1522
01:31:52,709 --> 01:31:58,619
focused on<font color="#E5E5E5"> the shellcode right now</font>

1523
01:31:54,829 --> 01:32:00,179
<font color="#E5E5E5">forget</font><font color="#CCCCCC"> about how to get the BX</font><font color="#E5E5E5"> SP what</font>

1524
01:31:58,619 --> 01:32:05,129
we're going to do in the shellcode<font color="#CCCCCC"> is</font>

1525
01:32:00,179 --> 01:32:07,139
we're gonna now return to<font color="#E5E5E5"> bin</font><font color="#CCCCCC"> sh we're</font>

1526
01:32:05,129 --> 01:32:10,669
going to<font color="#E5E5E5"> exec</font><font color="#CCCCCC"> been sh that's our</font>

1527
01:32:07,139 --> 01:32:17,070
shellcode<font color="#E5E5E5"> okay</font>

1528
01:32:10,669 --> 01:32:18,898
so some goals of writing shellcode<font color="#E5E5E5"> the</font>

1529
01:32:17,070 --> 01:32:20,938
shellcode must be self-contained<font color="#E5E5E5"> that</font>

1530
01:32:18,899 --> 01:32:23,820
means you can place it anywhere<font color="#CCCCCC"> use it</font>

1531
01:32:20,939 --> 01:32:26,159
anywhere as long<font color="#CCCCCC"> as it is Linux</font><font color="#E5E5E5"> and on</font>

1532
01:32:23,820 --> 01:32:28,709
this<font color="#CCCCCC"> shell</font><font color="#E5E5E5"> go through run independent of</font>

1533
01:32:26,159 --> 01:32:30,449
the Linux distro independent of the

1534
01:32:28,709 --> 01:32:31,979
kernel independent of the library

1535
01:32:30,449 --> 01:32:34,648
independent of<font color="#CCCCCC"> the target being</font>

1536
01:32:31,979 --> 01:32:37,229
exploited<font color="#E5E5E5"> which means we cannot have</font><font color="#CCCCCC"> any</font>

1537
01:32:34,649 --> 01:32:40,139
absolute<font color="#E5E5E5"> address we cannot have any</font>

1538
01:32:37,229 --> 01:32:44,129
library calls<font color="#E5E5E5"> everything</font><font color="#CCCCCC"> we need to</font>

1539
01:32:40,139 --> 01:32:46,949
<font color="#CCCCCC">access is via sis calls and to make</font>

1540
01:32:44,129 --> 01:32:50,219
<font color="#E5E5E5">matters worse</font><font color="#CCCCCC"> it has</font><font color="#E5E5E5"> to be free of null</font>

1541
01:32:46,949 --> 01:32:51,780
bytes otherwise string copy stops<font color="#E5E5E5"> so</font>

1542
01:32:50,219 --> 01:32:53,429
these are some of the<font color="#CCCCCC"> objectives which</font>

1543
01:32:51,780 --> 01:32:58,829
we will use<font color="#CCCCCC"> in</font><font color="#E5E5E5"> constructing the</font>

1544
01:32:53,429 --> 01:33:00,359
<font color="#CCCCCC">shellcode right</font><font color="#E5E5E5"> so this is how we're</font>

1545
01:32:58,829 --> 01:33:02,759
going to do it we're going<font color="#E5E5E5"> to find a</font><font color="#CCCCCC"> be</font>

1546
01:33:00,359 --> 01:33:06,289
<font color="#CCCCCC">XSP instruction</font><font color="#E5E5E5"> place the shellcode over</font>

1547
01:33:02,760 --> 01:33:11,339
here and then branch to it

1548
01:33:06,289 --> 01:33:14,209
and now we will<font color="#CCCCCC"> just jump</font><font color="#E5E5E5"> over to the</font>

1549
01:33:11,339 --> 01:33:14,209
<font color="#E5E5E5">shellcode</font>

1550
01:33:35,110 --> 01:33:47,389
<font color="#E5E5E5">all right so a very simple</font><font color="#CCCCCC"> shellcode</font>

1551
01:33:42,280 --> 01:33:49,940
will<font color="#CCCCCC"> be just a simple well system</font>

1552
01:33:47,390 --> 01:33:56,630
<font color="#CCCCCC">buiness H however system Bennis H</font>

1553
01:33:49,940 --> 01:34:00,500
invokes<font color="#E5E5E5"> x ik</font><font color="#CCCCCC"> v and this</font><font color="#E5E5E5"> is what we will</font>

1554
01:33:56,630 --> 01:34:03,800
be<font color="#CCCCCC"> paying attention to and as you can</font>

1555
01:34:00,500 --> 01:34:05,510
<font color="#E5E5E5">see we will need three parameters again</font>

1556
01:34:03,800 --> 01:34:07,990
<font color="#CCCCCC">like the right function you will</font><font color="#E5E5E5"> need</font>

1557
01:34:05,510 --> 01:34:11,990
three parameters<font color="#E5E5E5"> and we will need a</font>

1558
01:34:07,990 --> 01:34:17,840
<font color="#CCCCCC">Cisco number which will be</font><font color="#E5E5E5"> 11 in this</font>

1559
01:34:11,990 --> 01:34:20,900
case so again very simple<font color="#E5E5E5"> first</font>

1560
01:34:17,840 --> 01:34:23,210
parameter<font color="#E5E5E5"> the string goes into</font><font color="#CCCCCC"> r0</font><font color="#E5E5E5"> then</font>

1561
01:34:20,900 --> 01:34:28,129
we make it<font color="#CCCCCC"> very simple</font><font color="#E5E5E5"> we will just</font>

1562
01:34:23,210 --> 01:34:32,120
leave<font color="#E5E5E5"> the next to</font><font color="#CCCCCC"> zero and then</font><font color="#E5E5E5"> we need</font>

1563
01:34:28,130 --> 01:34:35,240
our<font color="#E5E5E5"> seven for our swift call and then we</font>

1564
01:34:32,120 --> 01:34:38,260
invoke it so this<font color="#CCCCCC"> is</font><font color="#E5E5E5"> how exit vu looks</font>

1565
01:34:35,240 --> 01:34:42,380
like right and<font color="#E5E5E5"> this is our simplified</font>

1566
01:34:38,260 --> 01:34:52,880
version and we will<font color="#E5E5E5"> translate this into</font>

1567
01:34:42,380 --> 01:34:56,210
<font color="#CCCCCC">RM assembly all we have to do is these</font>

1568
01:34:52,880 --> 01:34:59,420
five operations right<font color="#E5E5E5"> set our zero to</font>

1569
01:34:56,210 --> 01:35:00,430
the pointer of<font color="#CCCCCC"> bin SH set r1 and r2</font><font color="#E5E5E5"> to</font>

1570
01:34:59,420 --> 01:35:04,130
be<font color="#CCCCCC"> zero</font>

1571
01:35:00,430 --> 01:35:06,440
set our<font color="#CCCCCC"> seven</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> eleven and then</font><font color="#E5E5E5"> the</font>

1572
01:35:04,130 --> 01:35:09,800
next<font color="#CCCCCC"> instruction is SVC zero to invoke</font>

1573
01:35:06,440 --> 01:35:12,219
this is<font color="#E5E5E5"> called what should our assembly</font>

1574
01:35:09,800 --> 01:35:12,220
look like

1575
01:35:16,610 --> 01:35:23,389
let's forget<font color="#E5E5E5"> this one these three</font><font color="#CCCCCC"> are</font>

1576
01:35:20,760 --> 01:35:26,610
easy what do you do

1577
01:35:23,390 --> 01:35:30,360
move<font color="#CCCCCC"> R</font><font color="#E5E5E5"> 1 comma</font><font color="#CCCCCC"> zero move R 2 comma zero</font>

1578
01:35:26,610 --> 01:35:32,969
move r 7 come 11 and<font color="#E5E5E5"> SVC zero so</font><font color="#CCCCCC"> wake</font>

1579
01:35:30,360 --> 01:35:38,370
you've got<font color="#CCCCCC"> 4 out of 5 not</font><font color="#E5E5E5"> bad this is</font>

1580
01:35:32,970 --> 01:35:58,560
<font color="#E5E5E5">one</font><font color="#CCCCCC"> okay keep that in</font><font color="#E5E5E5"> mind as we go</font>

1581
01:35:38,370 --> 01:36:01,349
ahead does that yeah so if<font color="#E5E5E5"> we move R 1</font>

1582
01:35:58,560 --> 01:36:03,150
equal to<font color="#E5E5E5"> 0</font><font color="#CCCCCC"> that'll cause a null in the</font>

1583
01:36:01,350 --> 01:36:07,380
argument<font color="#E5E5E5"> and there will be a null byte</font>

1584
01:36:03,150 --> 01:36:09,750
<font color="#CCCCCC">yes there will be and we will do Nala</font><font color="#E5E5E5"> by</font>

1585
01:36:07,380 --> 01:36:12,810
it<font color="#E5E5E5"> so we will always</font><font color="#CCCCCC"> take</font><font color="#E5E5E5"> two steps to</font>

1586
01:36:09,750 --> 01:36:15,750
writing<font color="#CCCCCC"> the first</font><font color="#E5E5E5"> pass let's just make</font>

1587
01:36:12,810 --> 01:36:19,260
it<font color="#CCCCCC"> work in second pass we will be</font>

1588
01:36:15,750 --> 01:36:21,750
nullified it so first<font color="#CCCCCC"> let's</font><font color="#E5E5E5"> just focus</font>

1589
01:36:19,260 --> 01:36:30,620
<font color="#CCCCCC">on making</font><font color="#E5E5E5"> it work then we'll get the</font>

1590
01:36:21,750 --> 01:36:30,620
nose out<font color="#CCCCCC"> Hey so let's</font><font color="#E5E5E5"> just try it out</font>

1591
01:36:42,860 --> 01:36:52,389
<font color="#E5E5E5">there's a very simple script over here</font>

1592
01:36:48,650 --> 01:36:52,389
<font color="#CCCCCC">exact arm dot s</font>

1593
01:37:09,899 --> 01:37:16,739
this is your<font color="#E5E5E5"> bare-bones exact</font><font color="#CCCCCC"> shell code</font>

1594
01:37:18,629 --> 01:37:25,269
we will<font color="#E5E5E5"> link it I have made a mistake</font><font color="#CCCCCC"> in</font>

1595
01:37:21,639 --> 01:37:29,289
here we<font color="#CCCCCC"> should link it with - in so keep</font>

1596
01:37:25,269 --> 01:37:31,499
that in mind<font color="#CCCCCC"> but let's see how it is</font>

1597
01:37:29,289 --> 01:37:31,499
done

1598
01:37:31,829 --> 01:37:39,699
so again you see what we encountered

1599
01:37:35,979 --> 01:37:41,499
with the<font color="#E5E5E5"> PC relative addressing this is</font>

1600
01:37:39,699 --> 01:37:44,409
what we<font color="#E5E5E5"> will need because we will need</font>

1601
01:37:41,499 --> 01:37:51,129
to place our string into the literal

1602
01:37:44,409 --> 01:37:54,898
pool and we just use dot<font color="#E5E5E5"> ASCII and write</font>

1603
01:37:51,129 --> 01:37:59,139
a string ending it with a null by<font color="#E5E5E5"> it and</font>

1604
01:37:54,899 --> 01:38:08,039
then<font color="#E5E5E5"> again where is our effective PC</font><font color="#CCCCCC"> two</font>

1605
01:37:59,139 --> 01:38:08,039
instructions ahead right and then<font color="#CCCCCC"> 4 8 12</font>

1606
01:38:12,839 --> 01:38:26,769
so our 0 will be PC<font color="#CCCCCC"> plus 12 our</font><font color="#E5E5E5"> 0 will</font>

1607
01:38:19,179 --> 01:38:31,209
point to bin<font color="#E5E5E5"> sh 0 any of our</font><font color="#CCCCCC"> 1 the no</font>

1608
01:38:26,769 --> 01:38:38,820
<font color="#CCCCCC">our two and you</font><font color="#E5E5E5"> have our 7 is 11 and SVC</font>

1609
01:38:31,209 --> 01:38:42,719
0 let's try it let's assemble it let us

1610
01:38:38,820 --> 01:38:42,719
then debug<font color="#E5E5E5"> it</font>

1611
01:39:16,420 --> 01:39:20,770
<font color="#CCCCCC">alright first let's</font><font color="#E5E5E5"> test if it works</font>

1612
01:39:21,790 --> 01:39:30,920
<font color="#E5E5E5">we'll run it dot slash</font><font color="#CCCCCC"> exec</font><font color="#E5E5E5"> on whom you</font>

1613
01:39:27,440 --> 01:39:33,110
<font color="#E5E5E5">dropped into a shell</font><font color="#CCCCCC"> ok this works that</font>

1614
01:39:30,920 --> 01:39:34,820
<font color="#E5E5E5">means the exact work heck we</font><font color="#CCCCCC"> got the</font>

1615
01:39:33,110 --> 01:39:44,420
code and the<font color="#CCCCCC"> SIS call right it didn't</font>

1616
01:39:34,820 --> 01:39:47,990
didn't crash on us we exit it<font color="#E5E5E5"> whoops</font>

1617
01:39:44,420 --> 01:39:53,330
works for everyone<font color="#CCCCCC"> ok now let's look at</font>

1618
01:39:47,990 --> 01:39:57,010
the<font color="#CCCCCC"> opt curves</font><font color="#E5E5E5"> in there now</font><font color="#CCCCCC"> we're going</font>

1619
01:39:53,330 --> 01:39:57,010
to object dump it

1620
01:40:18,920 --> 01:40:26,880
now what do<font color="#E5E5E5"> you see</font>

1621
01:40:23,270 --> 01:40:32,760
yeah - honey a lot<font color="#E5E5E5"> of them a lot</font><font color="#CCCCCC"> of it</font>

1622
01:40:26,880 --> 01:40:38,130
too many there's one two<font color="#CCCCCC"> three four five</font>

1623
01:40:32,760 --> 01:40:42,510
six and<font color="#E5E5E5"> seven seven months how do we</font><font color="#CCCCCC"> do</font>

1624
01:40:38,130 --> 01:40:44,640
nullify these thoughts so the<font color="#E5E5E5"> zero as we</font>

1625
01:40:42,510 --> 01:40:51,030
get rid<font color="#CCCCCC"> of it instead</font><font color="#E5E5E5"> of our one we just</font>

1626
01:40:44,640 --> 01:40:55,550
<font color="#CCCCCC">see or not</font><font color="#E5E5E5"> X or</font><font color="#CCCCCC"> E or r1 r1 r1 or r2 r2</font>

1627
01:40:51,030 --> 01:41:00,469
r2 daddy get rid of<font color="#E5E5E5"> those nulls yeah but</font>

1628
01:40:55,550 --> 01:41:00,470
let's try<font color="#E5E5E5"> it let's yeah let's try it</font>

1629
01:41:05,960 --> 01:41:09,800
so these<font color="#E5E5E5"> moves go</font>

1630
01:41:30,349 --> 01:41:38,480
and now we're going to assemble<font color="#E5E5E5"> and</font><font color="#CCCCCC"> link</font>

1631
01:41:32,060 --> 01:41:42,409
it again you<font color="#E5E5E5"> can also use sub would have</font>

1632
01:41:38,480 --> 01:41:45,290
the same effect<font color="#CCCCCC"> so forth</font>

1633
01:41:42,409 --> 01:41:53,659
those guys we got rid<font color="#E5E5E5"> of those nuts so</font>

1634
01:41:45,290 --> 01:41:55,960
this yeah this<font color="#E5E5E5"> is okay</font><font color="#CCCCCC"> this got D</font>

1635
01:41:53,659 --> 01:42:05,598
nullified this got D nullified

1636
01:41:55,960 --> 01:42:07,340
what about<font color="#E5E5E5"> this one</font><font color="#CCCCCC"> ad R zero pc-12 we</font>

1637
01:42:05,599 --> 01:42:12,369
have to have it in our<font color="#E5E5E5"> zero there's no</font>

1638
01:42:07,340 --> 01:42:12,369
<font color="#E5E5E5">other me</font><font color="#CCCCCC"> because R 0 so</font><font color="#E5E5E5"> first parameter</font>

1639
01:42:14,199 --> 01:42:24,500
this<font color="#CCCCCC"> is</font><font color="#E5E5E5"> this is the R zero part and this</font>

1640
01:42:19,010 --> 01:42:26,869
is the<font color="#CCCCCC"> twelve part so you're saying</font>

1641
01:42:24,500 --> 01:42:29,650
<font color="#E5E5E5">something so how do we generally</font>

1642
01:42:26,869 --> 01:42:37,540
decrease the likelihood of having them

1643
01:42:29,650 --> 01:42:37,540
because now we<font color="#E5E5E5"> are we have those 32 bits</font>

1644
01:42:37,810 --> 01:42:45,290
<font color="#CCCCCC">yes nicely dot code 16</font>

1645
01:42:43,099 --> 01:42:49,760
<font color="#E5E5E5">you decrease</font><font color="#CCCCCC"> the likelihood of having</font>

1646
01:42:45,290 --> 01:42:52,820
them and then you can<font color="#CCCCCC"> dinella phi</font><font color="#E5E5E5"> the</font>

1647
01:42:49,760 --> 01:42:57,500
rest of them but thing is<font color="#CCCCCC"> your</font><font color="#E5E5E5"> shell</font>

1648
01:42:52,820 --> 01:42:59,210
<font color="#E5E5E5">code will always start in</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> more even</font>

1649
01:42:57,500 --> 01:43:03,969
in the middle of an exploit it will

1650
01:42:59,210 --> 01:43:03,969
start in our mo<font color="#E5E5E5"> why</font>

1651
01:43:12,280 --> 01:43:21,889
in fact when you branch to the<font color="#E5E5E5"> stack</font>

1652
01:43:20,180 --> 01:43:23,540
pointer you are going to branch<font color="#E5E5E5"> and</font>

1653
01:43:21,890 --> 01:43:25,700
thumb more<font color="#E5E5E5"> because there's a thumb</font>

1654
01:43:23,540 --> 01:43:28,430
instruction<font color="#E5E5E5"> she'll use an odd</font>

1655
01:43:25,700 --> 01:43:29,389
instruction but when you return<font color="#CCCCCC"> to</font><font color="#E5E5E5"> the</font>

1656
01:43:28,430 --> 01:43:31,430
<font color="#CCCCCC">shellcode</font>

1657
01:43:29,390 --> 01:43:36,080
what will your value<font color="#E5E5E5"> of the program</font>

1658
01:43:31,430 --> 01:43:38,300
counter be odd or<font color="#CCCCCC"> even</font><font color="#E5E5E5"> always</font><font color="#CCCCCC"> even</font>

1659
01:43:36,080 --> 01:43:42,290
because a stack pointer will be<font color="#CCCCCC"> at an</font>

1660
01:43:38,300 --> 01:43:44,150
even evenly aligned value so it doesn't

1661
01:43:42,290 --> 01:43:47,540
<font color="#E5E5E5">matter what mode you were in you will</font>

1662
01:43:44,150 --> 01:43:49,809
always<font color="#E5E5E5"> be</font><font color="#CCCCCC"> when you enter your shellcode</font>

1663
01:43:47,540 --> 01:43:57,230
<font color="#E5E5E5">which is aligned at the stack pointer</font>

1664
01:43:49,810 --> 01:43:59,630
<font color="#E5E5E5">will always be in</font><font color="#CCCCCC"> Armagh always so yes</font>

1665
01:43:57,230 --> 01:44:03,559
you want to<font color="#E5E5E5"> write your</font><font color="#CCCCCC"> shellcode and</font>

1666
01:43:59,630 --> 01:44:13,130
thumb but you have to<font color="#CCCCCC"> begin in arm</font><font color="#E5E5E5"> how</font>

1667
01:44:03,560 --> 01:44:17,600
are you<font color="#E5E5E5"> going to solve that bit two</font>

1668
01:44:13,130 --> 01:44:19,580
instructions basically dot<font color="#CCCCCC"> core system</font>

1669
01:44:17,600 --> 01:44:22,610
will<font color="#CCCCCC"> emit the</font><font color="#E5E5E5"> code in</font><font color="#CCCCCC"> thumb but how do</font>

1670
01:44:19,580 --> 01:44:26,030
you force the mode to go<font color="#E5E5E5"> to thumb when</font>

1671
01:44:22,610 --> 01:44:35,599
<font color="#E5E5E5">executing</font><font color="#CCCCCC"> I started on a hunch</font><font color="#E5E5E5"> and</font>

1672
01:44:26,030 --> 01:44:38,389
before that<font color="#E5E5E5"> we</font><font color="#CCCCCC"> branched to what so we</font>

1673
01:44:35,600 --> 01:44:49,550
branch to a register but what is<font color="#E5E5E5"> inside</font>

1674
01:44:38,390 --> 01:44:52,070
of<font color="#CCCCCC"> that</font><font color="#E5E5E5"> register the least significant</font>

1675
01:44:49,550 --> 01:44:58,010
bit right right yeah<font color="#E5E5E5"> so not this one</font>

1676
01:44:52,070 --> 01:45:01,849
yeah so um you know<font color="#E5E5E5"> last examples we</font>

1677
01:44:58,010 --> 01:45:08,290
would use to jump to PC<font color="#E5E5E5"> however if we</font>

1678
01:45:01,850 --> 01:45:08,290
add PC into a register<font color="#E5E5E5"> plus one right</font>

1679
01:45:10,660 --> 01:45:19,430
what

1680
01:45:12,020 --> 01:45:25,880
<font color="#E5E5E5">what was the question other words right</font>

1681
01:45:19,430 --> 01:45:27,740
should<font color="#CCCCCC"> we just make</font><font color="#E5E5E5"> an example so let's</font>

1682
01:45:25,880 --> 01:45:34,360
look at exact<font color="#CCCCCC"> um</font>

1683
01:45:27,740 --> 01:45:34,360
dot s that's precisely what we're doing

1684
01:45:44,100 --> 01:45:49,110
right here<font color="#CCCCCC"> of course an exact time I</font>

1685
01:45:47,050 --> 01:45:51,760
have not<font color="#E5E5E5"> be nullified this bit</font><font color="#CCCCCC"> so I</font>

1686
01:45:49,110 --> 01:45:54,549
notify that<font color="#E5E5E5"> but in the meantime you</font><font color="#CCCCCC"> can</font>

1687
01:45:51,760 --> 01:45:58,540
just<font color="#E5E5E5"> write explain it</font>

1688
01:45:54,550 --> 01:46:01,480
so here again we<font color="#E5E5E5"> start in our mode so we</font>

1689
01:45:58,540 --> 01:46:05,830
need to indicate<font color="#E5E5E5"> this with dot</font><font color="#CCCCCC"> cos</font><font color="#E5E5E5"> 32</font>

1690
01:46:01,480 --> 01:46:10,419
and then we just<font color="#CCCCCC"> use all three and we</font>

1691
01:46:05,830 --> 01:46:14,019
add first we add<font color="#CCCCCC"> just these two together</font>

1692
01:46:10,420 --> 01:46:17,260
<font color="#E5E5E5">and place them into our three which</font>

1693
01:46:14,020 --> 01:46:19,840
makes the least significant<font color="#E5E5E5"> bits</font><font color="#CCCCCC"> 1 and</font>

1694
01:46:17,260 --> 01:46:24,640
then we just branch<font color="#CCCCCC"> and exchange to that</font>

1695
01:46:19,840 --> 01:46:28,090
<font color="#CCCCCC">register and</font><font color="#E5E5E5"> then it will just jump</font><font color="#CCCCCC"> into</font>

1696
01:46:24,640 --> 01:46:30,220
like switch into thumb mode and then we

1697
01:46:28,090 --> 01:46:33,040
<font color="#CCCCCC">need to</font><font color="#E5E5E5"> indicate</font><font color="#CCCCCC"> that we are in thumb</font>

1698
01:46:30,220 --> 01:46:36,210
<font color="#CCCCCC">mode</font><font color="#E5E5E5"> basically</font><font color="#CCCCCC"> in our</font><font color="#E5E5E5"> assembly program</font>

1699
01:46:33,040 --> 01:46:36,210
with dots<font color="#E5E5E5"> of code 16</font>

1700
01:46:37,140 --> 01:46:42,060
so is this switch to<font color="#E5E5E5"> some more clear you</font>

1701
01:46:43,260 --> 01:46:48,910
<font color="#CCCCCC">just</font><font color="#E5E5E5"> add</font><font color="#CCCCCC"> 1 to program counter the</font>

1702
01:46:46,510 --> 01:46:52,480
effective program counter will<font color="#CCCCCC"> be 2</font>

1703
01:46:48,910 --> 01:46:54,220
instructions below<font color="#E5E5E5"> so one and this one</font>

1704
01:46:52,480 --> 01:46:57,339
but this will<font color="#CCCCCC"> be then</font><font color="#E5E5E5"> taken as an</font>

1705
01:46:54,220 --> 01:47:01,990
ordered dress when you do a<font color="#E5E5E5"> bxr</font><font color="#CCCCCC"> 3 you</font>

1706
01:46:57,340 --> 01:47:06,340
branch to it you're now in thumb so

1707
01:47:01,990 --> 01:47:10,380
quick arm to thumb<font color="#CCCCCC"> switch now what</font>

1708
01:47:06,340 --> 01:47:10,380
happens<font color="#E5E5E5"> to the PC relative address your</font>

1709
01:47:12,390 --> 01:47:23,110
what is your<font color="#E5E5E5"> effective PC in this add</font>

1710
01:47:15,130 --> 01:47:30,850
instruction<font color="#E5E5E5"> to instructions</font><font color="#CCCCCC"> below then +</font>

1711
01:47:23,110 --> 01:47:32,980
<font color="#CCCCCC">2 + 4 and it would if</font><font color="#E5E5E5"> this move wasn't</font>

1712
01:47:30,850 --> 01:47:38,260
<font color="#E5E5E5">there</font><font color="#CCCCCC"> it'll be</font><font color="#E5E5E5"> plus 6 and that has been</font>

1713
01:47:32,980 --> 01:47:40,990
SH but plus six is<font color="#E5E5E5"> not a multiple of</font>

1714
01:47:38,260 --> 01:47:43,750
<font color="#CCCCCC">four</font><font color="#E5E5E5"> so you have to have this junk mop</font>

1715
01:47:40,990 --> 01:47:45,790
in there there's no<font color="#CCCCCC"> knob instructions we</font>

1716
01:47:43,750 --> 01:47:49,900
just move<font color="#E5E5E5"> our</font><font color="#CCCCCC"> 5 in to our 5 treated as a</font>

1717
01:47:45,790 --> 01:47:52,900
knob and then you have the been SH so

1718
01:47:49,900 --> 01:47:56,519
that will be plus<font color="#E5E5E5"> 8 and that's your new</font>

1719
01:47:52,900 --> 01:47:56,519
PC relative address

1720
01:47:58,050 --> 01:48:05,860
so now let's<font color="#CCCCCC"> check this out</font>

1721
01:48:01,590 --> 01:48:11,340
let's<font color="#E5E5E5"> check out what we have let's</font>

1722
01:48:05,860 --> 01:48:11,339
assemble exact<font color="#E5E5E5"> thumb and see what we get</font>

1723
01:49:00,570 --> 01:49:08,499
<font color="#CCCCCC">let's first</font><font color="#E5E5E5"> tested if this doesn't work</font>

1724
01:49:06,669 --> 01:49:12,309
then<font color="#CCCCCC"> we have a problem</font><font color="#E5E5E5"> if this works</font>

1725
01:49:08,499 --> 01:49:19,840
then<font color="#E5E5E5"> we'll be nullify it</font><font color="#CCCCCC"> okay exact</font><font color="#E5E5E5"> some</font>

1726
01:49:12,309 --> 01:49:22,439
works<font color="#E5E5E5"> getting there let's object dump it</font>

1727
01:49:19,840 --> 01:49:22,439
and check

1728
01:49:51,630 --> 01:49:57,120
see check<font color="#E5E5E5"> out the disassembly</font><font color="#CCCCCC"> the first</font>

1729
01:49:55,030 --> 01:50:01,750
two instructions are<font color="#CCCCCC"> four bytes</font>

1730
01:49:57,120 --> 01:50:07,330
but no nulls now these are all 2 byte

1731
01:50:01,750 --> 01:50:20,590
instructions<font color="#E5E5E5"> no nulls until here's a</font>

1732
01:50:07,330 --> 01:50:27,130
null SVC<font color="#CCCCCC"> zero we can</font><font color="#E5E5E5"> do SVC r1</font><font color="#CCCCCC"> or</font>

1733
01:50:20,590 --> 01:50:28,410
something no it has<font color="#CCCCCC"> to</font><font color="#E5E5E5"> be a constant I'm</font>

1734
01:50:27,130 --> 01:50:31,960
sorry

1735
01:50:28,410 --> 01:50:38,440
well nobody said<font color="#E5E5E5"> it is not it cannot not</font>

1736
01:50:31,960 --> 01:50:42,700
be<font color="#CCCCCC"> zero so so we</font><font color="#E5E5E5"> just try with SVC one</font>

1737
01:50:38,440 --> 01:50:45,759
and the damn thing<font color="#CCCCCC"> works it does in</font><font color="#E5E5E5"> most</font>

1738
01:50:42,700 --> 01:50:49,929
Linux is it it actually<font color="#CCCCCC"> works I did</font><font color="#E5E5E5"> it's</font>

1739
01:50:45,760 --> 01:50:51,940
supposed to<font color="#E5E5E5"> be you know like it an ideal</font>

1740
01:50:49,930 --> 01:50:55,300
implementation should<font color="#E5E5E5"> pay attention to</font>

1741
01:50:51,940 --> 01:50:59,190
<font color="#E5E5E5">it but the Linux kernel ignores anything</font>

1742
01:50:55,300 --> 01:51:01,540
after SVC say<font color="#E5E5E5"> okay yes we see one</font>

1743
01:50:59,190 --> 01:51:04,960
doesn't matter the same<font color="#E5E5E5"> since</font><font color="#CCCCCC"> call table</font>

1744
01:51:01,540 --> 01:51:12,660
is available<font color="#E5E5E5"> so we'll make this as SVC</font><font color="#CCCCCC"> 1</font>

1745
01:51:04,960 --> 01:51:20,580
<font color="#E5E5E5">and then this last null bytes to remains</font>

1746
01:51:12,660 --> 01:51:20,580
is a string<font color="#E5E5E5"> terminator which</font>

1747
01:51:31,719 --> 01:51:40,329
precisely<font color="#E5E5E5"> so</font><font color="#CCCCCC"> we will put some character</font>

1748
01:51:36,280 --> 01:51:45,369
like<font color="#CCCCCC"> X instead</font><font color="#E5E5E5"> of the null byte and</font><font color="#CCCCCC"> then</font>

1749
01:51:40,329 --> 01:51:47,590
we overwrite that<font color="#E5E5E5"> with a null byte yes</font>

1750
01:51:45,369 --> 01:51:52,179
that's precisely what we'll do<font color="#CCCCCC"> so</font><font color="#E5E5E5"> let's</font>

1751
01:51:47,590 --> 01:51:55,479
let's edit the exact thumb and make

1752
01:51:52,179 --> 01:51:59,439
those two changes<font color="#E5E5E5"> let's ponder upon how</font>

1753
01:51:55,479 --> 01:52:02,139
we're going to do this null byte bombing

1754
01:51:59,439 --> 01:52:10,840
<font color="#E5E5E5">bit first let me</font><font color="#CCCCCC"> just get rid of this</font>

1755
01:52:02,139 --> 01:52:17,459
SVC<font color="#E5E5E5"> 0</font><font color="#CCCCCC"> 2 SVC</font><font color="#E5E5E5"> 1</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> and then last instead</font>

1756
01:52:10,840 --> 01:52:17,459
of<font color="#E5E5E5"> bin</font><font color="#CCCCCC"> sh</font><font color="#E5E5E5"> 0</font><font color="#CCCCCC"> I want to make it</font><font color="#E5E5E5"> bin</font><font color="#CCCCCC"> SH X</font>

1757
01:52:18,479 --> 01:52:29,739
now how do<font color="#CCCCCC"> i override is X with a null</font>

1758
01:52:22,989 --> 01:52:35,169
byte that's it like one last step

1759
01:52:29,739 --> 01:52:38,379
<font color="#E5E5E5">remaining in your</font><font color="#CCCCCC"> forms done</font><font color="#E5E5E5"> so we had</font>

1760
01:52:35,169 --> 01:52:40,900
this one<font color="#E5E5E5"> instruction when we covered</font>

1761
01:52:38,380 --> 01:52:45,400
load and store there's this one

1762
01:52:40,900 --> 01:52:47,679
instruction called<font color="#E5E5E5"> store bytes right so</font>

1763
01:52:45,400 --> 01:52:51,610
this<font color="#E5E5E5"> is why we linked it</font><font color="#CCCCCC"> with the</font>

1764
01:52:47,679 --> 01:52:56,349
<font color="#E5E5E5">uppercase M and we will use that</font>

1765
01:52:51,610 --> 01:53:01,469
instruction to<font color="#E5E5E5"> store a null byte at this</font>

1766
01:52:56,349 --> 01:53:06,249
exact place<font color="#CCCCCC"> where we now place the</font><font color="#E5E5E5"> X and</font>

1767
01:53:01,469 --> 01:53:10,150
where do<font color="#E5E5E5"> we get</font><font color="#CCCCCC"> that now</font><font color="#E5E5E5"> from to store</font>

1768
01:53:06,249 --> 01:53:15,849
it<font color="#CCCCCC"> too right</font><font color="#E5E5E5"> so we already have it we</font>

1769
01:53:10,150 --> 01:53:21,900
<font color="#CCCCCC">have</font><font color="#E5E5E5"> it in registers right</font><font color="#CCCCCC"> r1 and</font><font color="#E5E5E5"> r2</font><font color="#CCCCCC"> so</font>

1770
01:53:15,849 --> 01:53:21,900
we just take that<font color="#E5E5E5"> and just put it there</font>

1771
01:53:25,330 --> 01:53:37,180
it's gonna be store bite<font color="#CCCCCC"> are - what's</font>

1772
01:53:31,600 --> 01:53:41,020
the target<font color="#E5E5E5"> address now again with</font>

1773
01:53:37,180 --> 01:53:43,750
<font color="#CCCCCC">pc-relative</font><font color="#E5E5E5"> addressing we end up here</font>

1774
01:53:41,020 --> 01:53:46,270
<font color="#E5E5E5">okay</font><font color="#CCCCCC"> okay and</font><font color="#E5E5E5"> you will see that the</font>

1775
01:53:43,750 --> 01:53:49,410
right at the<font color="#CCCCCC"> beginning of this string</font>

1776
01:53:46,270 --> 01:53:51,910
<font color="#CCCCCC">right at the beginning</font><font color="#E5E5E5"> now we need to go</font>

1777
01:53:49,410 --> 01:53:56,740
to the right we<font color="#E5E5E5"> need to somehow</font>

1778
01:53:51,910 --> 01:54:05,740
calculate here<font color="#E5E5E5"> we need to store that</font>

1779
01:53:56,740 --> 01:54:07,690
<font color="#E5E5E5">here so</font><font color="#CCCCCC"> our zero</font><font color="#E5E5E5"> here this one points as</font>

1780
01:54:05,740 --> 01:54:10,830
you<font color="#CCCCCC"> remember</font><font color="#E5E5E5"> with</font><font color="#CCCCCC"> piece relative</font>

1781
01:54:07,690 --> 01:54:17,620
addressing to<font color="#CCCCCC"> the beginning of this</font>

1782
01:54:10,830 --> 01:54:32,970
string<font color="#CCCCCC"> right and now we need to place it</font>

1783
01:54:17,620 --> 01:54:32,970
here<font color="#E5E5E5"> plus</font><font color="#CCCCCC"> seven</font><font color="#E5E5E5"> so our store</font><font color="#CCCCCC"> byte R</font><font color="#E5E5E5"> 0 R</font>

1784
01:54:37,470 --> 01:54:48,900
0 comma<font color="#CCCCCC"> ash</font><font color="#E5E5E5"> 7 this you read this</font>

1785
01:54:45,790 --> 01:54:48,900
notation as

1786
01:54:55,000 --> 01:55:01,790
this is how the instruction means take

1787
01:54:59,390 --> 01:55:17,870
<font color="#CCCCCC">the value of</font><font color="#E5E5E5"> our two and store it at R 0</font>

1788
01:55:01,790 --> 01:55:19,340
<font color="#CCCCCC">plus</font><font color="#E5E5E5"> 7</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> direct yeah we added one</font>

1789
01:55:17,870 --> 01:55:23,720
instruction so that's going<font color="#E5E5E5"> to change</font>

1790
01:55:19,340 --> 01:55:26,570
<font color="#E5E5E5">the PC relative offset so we remove them</font>

1791
01:55:23,720 --> 01:55:28,340
<font color="#E5E5E5">not because yeah</font><font color="#CCCCCC"> we don't you</font><font color="#E5E5E5"> don't</font>

1792
01:55:26,570 --> 01:55:31,309
increase the<font color="#E5E5E5"> length of the shellcode we</font>

1793
01:55:28,340 --> 01:55:33,520
just add that instruction remove the

1794
01:55:31,310 --> 01:55:33,520
knob

1795
01:55:59,340 --> 01:56:09,190
if you're linking<font color="#E5E5E5"> without the</font><font color="#CCCCCC"> - n we'll</font>

1796
01:56:04,180 --> 01:56:14,130
get a<font color="#CCCCCC"> segmentation fault</font><font color="#E5E5E5"> you need to</font>

1797
01:56:09,190 --> 01:56:17,589
definitely<font color="#E5E5E5"> linked with the - uppercase n</font>

1798
01:56:14,130 --> 01:56:31,480
otherwise the text segment<font color="#E5E5E5"> is</font><font color="#CCCCCC"> read-only</font>

1799
01:56:17,590 --> 01:56:46,690
and<font color="#E5E5E5"> disturb will fail yeah the LD with -</font>

1800
01:56:31,480 --> 01:56:50,459
n is important exact some works and

1801
01:56:46,690 --> 01:56:50,460
<font color="#CCCCCC">let's object dump it</font>

1802
01:57:06,340 --> 01:57:12,260
not beautiful

1803
01:57:08,600 --> 01:57:15,340
no no<font color="#E5E5E5"> bites no nose I'll go</font>

1804
01:57:12,260 --> 01:57:15,340
all those are<font color="#CCCCCC"> gone</font>

1805
01:58:16,700 --> 01:58:24,059
so as everybody<font color="#E5E5E5"> have the everybody have</font>

1806
01:58:19,680 --> 01:58:27,570
the<font color="#CCCCCC"> shellcode</font><font color="#E5E5E5"> ready quick walk through</font>

1807
01:58:24,060 --> 01:58:32,160
<font color="#E5E5E5">this is the and then we're going</font><font color="#CCCCCC"> to</font>

1808
01:58:27,570 --> 01:58:36,389
complete the the<font color="#CCCCCC"> exploit exercise so</font>

1809
01:58:32,160 --> 01:58:40,590
this is your final shell Corp<font color="#CCCCCC"> a few</font>

1810
01:58:36,390 --> 01:58:44,070
things to keep in<font color="#CCCCCC"> mind first</font><font color="#E5E5E5"> is the arm</font>

1811
01:58:40,590 --> 01:58:46,650
to thumb switch you branch to an

1812
01:58:44,070 --> 01:58:51,719
<font color="#CCCCCC">odd-numbered</font><font color="#E5E5E5"> address you switch to some</font>

1813
01:58:46,650 --> 01:58:56,969
more then you have the<font color="#CCCCCC"> our</font><font color="#E5E5E5"> zero point in</font>

1814
01:58:51,720 --> 01:58:59,340
tube in<font color="#E5E5E5"> SH X in your</font><font color="#CCCCCC"> literal pool the</font>

1815
01:58:56,970 --> 01:59:05,850
store byte instruction will write in

1816
01:58:59,340 --> 01:59:11,370
null<font color="#E5E5E5"> at the end of your literal pool so</font>

1817
01:59:05,850 --> 01:59:21,270
that<font color="#E5E5E5"> now this byte is this basically</font>

1818
01:59:11,370 --> 01:59:25,400
this is completely null byte<font color="#CCCCCC"> free now</font>

1819
01:59:21,270 --> 01:59:29,640
typically how do you then convert this

1820
01:59:25,400 --> 01:59:31,549
assembly<font color="#E5E5E5"> shell code into hex code that</font>

1821
01:59:29,640 --> 01:59:34,080
you can cut and<font color="#CCCCCC"> paste in an exploit</font>

1822
01:59:31,550 --> 01:59:36,210
typically<font color="#CCCCCC"> Metasploit will give you that</font>

1823
01:59:34,080 --> 01:59:39,150
stuff and you<font color="#E5E5E5"> want to now assemble the</font>

1824
01:59:36,210 --> 01:59:41,640
string so this<font color="#E5E5E5"> here is how you go</font><font color="#CCCCCC"> out go</font>

1825
01:59:39,150 --> 01:59:45,059
about generating<font color="#E5E5E5"> the final shell code</font>

1826
01:59:41,640 --> 01:59:48,420
you assemble the shell code you link the

1827
01:59:45,060 --> 01:59:53,160
shell code<font color="#E5E5E5"> as an rwx binary then we use</font>

1828
01:59:48,420 --> 01:59:58,860
the object copy command<font color="#E5E5E5"> obj copy -</font><font color="#CCCCCC"> oh</font>

1829
01:59:53,160 --> 02:00:01,710
binary shell code the elf file and then

1830
01:59:58,860 --> 02:00:04,580
it will<font color="#CCCCCC"> output a bin file</font><font color="#E5E5E5"> the bin file</font>

1831
02:00:01,710 --> 02:00:07,820
will only contain the<font color="#E5E5E5"> raw bytes of the</font>

1832
02:00:04,580 --> 02:00:07,820
<font color="#CCCCCC">shell code</font>

1833
02:00:15,350 --> 02:00:22,970
does everybody have the exact some

1834
02:00:18,650 --> 02:00:22,969
working<font color="#CCCCCC"> D nullified</font>

1835
02:00:47,060 --> 02:00:58,400
so<font color="#CCCCCC"> I'm</font><font color="#E5E5E5"> going to now do object copy - Oh</font>

1836
02:00:52,700 --> 02:01:03,110
binary<font color="#E5E5E5"> exact</font><font color="#CCCCCC"> sum exact sum dot bin this</font>

1837
02:00:58,400 --> 02:01:08,900
<font color="#E5E5E5">will just get the raw bytes into</font><font color="#CCCCCC"> a bin</font>

1838
02:01:03,110 --> 02:01:12,849
file you just<font color="#CCCCCC"> do an LS - la here you see</font>

1839
02:01:08,900 --> 02:01:12,849
this<font color="#E5E5E5"> is a 28 bytes shellcode</font>

1840
02:01:27,910 --> 02:01:41,800
and now you can do a dot slash<font color="#E5E5E5"> Hicks in</font>

1841
02:01:31,450 --> 02:01:45,070
code<font color="#E5E5E5"> dot PL exec some dot bin and this</font>

1842
02:01:41,800 --> 02:01:51,790
is<font color="#E5E5E5"> your ready to cut and</font><font color="#CCCCCC"> paste</font><font color="#E5E5E5"> shell</font>

1843
02:01:45,070 --> 02:01:55,320
code so how you go from assembling<font color="#E5E5E5"> the</font>

1844
02:01:51,790 --> 02:01:58,990
shell code<font color="#E5E5E5"> testing it</font><font color="#CCCCCC"> D nullifying it</font>

1845
02:01:55,320 --> 02:02:02,590
<font color="#E5E5E5">extracting the bin file and then hexif</font>

1846
02:01:58,990 --> 02:02:19,240
<font color="#CCCCCC">eyeing it any proof let us check out</font>

1847
02:02:02,590 --> 02:02:30,040
whether it works in our exploit now here

1848
02:02:19,240 --> 02:02:33,070
is the oops I lost<font color="#E5E5E5"> Michelle go and dump</font>

1849
02:02:30,040 --> 02:02:34,900
it again and<font color="#E5E5E5"> I'll copy the string in</font>

1850
02:02:33,070 --> 02:02:37,660
<font color="#E5E5E5">your slides at the</font><font color="#CCCCCC"> end of your</font><font color="#E5E5E5"> slide</font>

1851
02:02:34,900 --> 02:02:39,639
deck I have<font color="#CCCCCC"> the exact string set and all</font>

1852
02:02:37,660 --> 02:02:42,970
that so<font color="#CCCCCC"> therefore your</font><font color="#E5E5E5"> reference you</font>

1853
02:02:39,640 --> 02:02:48,400
<font color="#E5E5E5">have it but now let's look at this final</font>

1854
02:02:42,970 --> 02:02:51,190
exploit smash one dot<font color="#E5E5E5"> PL in smash one</font>

1855
02:02:48,400 --> 02:02:53,019
dot<font color="#E5E5E5"> PL we have basically all the</font>

1856
02:02:51,190 --> 02:02:55,809
calculations for<font color="#E5E5E5"> the offset and</font>

1857
02:02:53,020 --> 02:02:58,600
<font color="#E5E5E5">everything that's all set we also have a</font>

1858
02:02:55,810 --> 02:03:01,060
return to be<font color="#E5E5E5"> x SP and then it will</font>

1859
02:02:58,600 --> 02:03:04,360
branch to<font color="#CCCCCC"> the shell code right</font><font color="#E5E5E5"> now my</font>

1860
02:03:01,060 --> 02:03:09,030
shell code is<font color="#CCCCCC"> breakpoint but we will</font>

1861
02:03:04,360 --> 02:03:12,339
<font color="#E5E5E5">replace this string dollar shell code</font>

1862
02:03:09,030 --> 02:03:14,940
with with the hex string that we

1863
02:03:12,340 --> 02:03:14,940
<font color="#E5E5E5">generated</font>

1864
02:03:22,469 --> 02:03:33,090
so simply paste the<font color="#CCCCCC"> shellcode</font><font color="#E5E5E5"> over here</font>

1865
02:03:25,769 --> 02:03:33,090
in the exploit in smash<font color="#CCCCCC"> 1 dot</font><font color="#E5E5E5"> DL</font>

1866
02:03:48,020 --> 02:04:04,440
and then we will save it and<font color="#E5E5E5"> now</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> test</font>

1867
02:04:01,380 --> 02:04:08,340
it we will capture the output<font color="#CCCCCC"> of smash 1</font>

1868
02:04:04,440 --> 02:04:13,919
in an environment variable to<font color="#E5E5E5"> be a</font>

1869
02:04:08,340 --> 02:04:18,090
careful of the<font color="#E5E5E5"> syntax if you just do a</font>

1870
02:04:13,920 --> 02:04:21,060
dot slash smash<font color="#E5E5E5"> 1 you see some junk</font><font color="#CCCCCC"> over</font>

1871
02:04:18,090 --> 02:04:25,110
here this<font color="#CCCCCC"> output will</font><font color="#E5E5E5"> capture into an</font>

1872
02:04:21,060 --> 02:04:30,240
<font color="#E5E5E5">environment variable and export it shall</font>

1873
02:04:25,110 --> 02:04:34,820
say export attack choose a<font color="#E5E5E5"> different</font>

1874
02:04:30,240 --> 02:04:41,519
variable if you guys want equals dollar

1875
02:04:34,820 --> 02:04:44,040
<font color="#E5E5E5">bracket dot slash smash</font><font color="#CCCCCC"> 1 so this will</font>

1876
02:04:41,520 --> 02:04:45,840
now save the output<font color="#CCCCCC"> of smash</font><font color="#E5E5E5"> 1 into an</font>

1877
02:04:44,040 --> 02:04:49,100
environment<font color="#CCCCCC"> variable called dollar</font>

1878
02:04:45,840 --> 02:04:49,100
<font color="#E5E5E5">called attack</font>

1879
02:04:57,760 --> 02:05:08,110
if you don't echo dollar<font color="#E5E5E5"> attack just to</font>

1880
02:05:01,250 --> 02:05:08,110
test use it use<font color="#CCCCCC"> it</font><font color="#E5E5E5"> within courts always</font>

1881
02:05:17,890 --> 02:05:26,060
as a final test<font color="#CCCCCC"> let's</font><font color="#E5E5E5"> run it with victim</font>

1882
02:05:22,100 --> 02:05:47,890
<font color="#CCCCCC">one dot slash victim one into quotes</font>

1883
02:05:26,060 --> 02:05:47,890
dollar attack and if you got<font color="#E5E5E5"> it right</font>

1884
02:06:01,990 --> 02:06:09,950
questions<font color="#E5E5E5"> yes so this was a very simple</font>

1885
02:06:06,290 --> 02:06:12,890
shell you<font color="#E5E5E5"> can obviously</font><font color="#CCCCCC"> something more</font>

1886
02:06:09,950 --> 02:06:15,559
sophisticated<font color="#CCCCCC"> you</font><font color="#E5E5E5"> know like reverse</font>

1887
02:06:12,890 --> 02:06:20,480
shell<font color="#E5E5E5"> you know for that you need to</font>

1888
02:06:15,560 --> 02:06:23,090
<font color="#CCCCCC">figure out how would it look like in C</font>

1889
02:06:20,480 --> 02:06:26,809
then translated<font color="#E5E5E5"> in assembly again this</font>

1890
02:06:23,090 --> 02:06:35,120
will be<font color="#CCCCCC"> a</font><font color="#E5E5E5"> little bit larger but</font><font color="#CCCCCC"> same</font>

1891
02:06:26,810 --> 02:06:38,780
procedure<font color="#CCCCCC"> you want to go into it</font><font color="#E5E5E5"> yeah so</font>

1892
02:06:35,120 --> 02:06:40,309
just<font color="#CCCCCC"> to kind</font><font color="#E5E5E5"> of wrap</font><font color="#CCCCCC"> things up</font><font color="#E5E5E5"> the</font>

1893
02:06:38,780 --> 02:06:42,800
purpose of the workshop<font color="#E5E5E5"> was to kind of</font>

1894
02:06:40,310 --> 02:06:45,350
give<font color="#E5E5E5"> you an</font><font color="#CCCCCC"> overview of the</font><font color="#E5E5E5"> process of</font>

1895
02:06:42,800 --> 02:06:47,810
writing arm assembly<font color="#E5E5E5"> shell code and</font>

1896
02:06:45,350 --> 02:06:50,900
testing it pretty much the way<font color="#CCCCCC"> we do it</font>

1897
02:06:47,810 --> 02:06:53,450
that being said the in the world of<font color="#E5E5E5"> harm</font>

1898
02:06:50,900 --> 02:06:55,330
exploitation there<font color="#E5E5E5"> is very little work</font>

1899
02:06:53,450 --> 02:06:57,980
that's<font color="#E5E5E5"> been actually done on</font><font color="#CCCCCC"> shellcode</font>

1900
02:06:55,330 --> 02:07:01,910
<font color="#E5E5E5">there are some publicly available shell</font>

1901
02:06:57,980 --> 02:07:04,009
<font color="#CCCCCC">curves the truth is they don't work</font><font color="#E5E5E5"> they</font>

1902
02:07:01,910 --> 02:07:06,680
only work on<font color="#E5E5E5"> the author's</font><font color="#CCCCCC"> qemu they</font>

1903
02:07:04,010 --> 02:07:08,660
don't really<font color="#E5E5E5"> work on hardware now arm</font>

1904
02:07:06,680 --> 02:07:08,980
hardware is<font color="#CCCCCC"> very different than</font><font color="#E5E5E5"> Intel</font>

1905
02:07:08,660 --> 02:07:11,349
her

1906
02:07:08,980 --> 02:07:14,589
in the sense that arm follows<font color="#CCCCCC"> a pseudo</font>

1907
02:07:11,350 --> 02:07:16,480
<font color="#CCCCCC">Harvard architecture</font><font color="#E5E5E5"> the data pipeline</font>

1908
02:07:14,590 --> 02:07:19,750
and the instruction pipeline are

1909
02:07:16,480 --> 02:07:23,230
completely different<font color="#CCCCCC"> in Intel these</font>

1910
02:07:19,750 --> 02:07:25,240
pipelines sync up so Intel you can have

1911
02:07:23,230 --> 02:07:27,070
cells modifying shellcode<font color="#E5E5E5"> you can have</font>

1912
02:07:25,240 --> 02:07:29,469
polymorphic code you can have encoded

1913
02:07:27,070 --> 02:07:32,530
<font color="#CCCCCC">shellcode you can have cord that will</font>

1914
02:07:29,470 --> 02:07:35,980
decode itself<font color="#E5E5E5"> and then these when you do</font>

1915
02:07:32,530 --> 02:07:39,370
the decoding the instruction cache gets

1916
02:07:35,980 --> 02:07:42,400
refreshed<font color="#E5E5E5"> and your shellcode works in</font>

1917
02:07:39,370 --> 02:07:44,800
<font color="#CCCCCC">are will</font><font color="#E5E5E5"> fall flat on your face all the</font>

1918
02:07:42,400 --> 02:07:47,469
<font color="#CCCCCC">decoding will happen but</font><font color="#E5E5E5"> that will</font>

1919
02:07:44,800 --> 02:07:50,920
<font color="#CCCCCC">happen in the data pipeline the eye</font>

1920
02:07:47,470 --> 02:07:52,690
cache will not be<font color="#CCCCCC"> synced up because who</font>

1921
02:07:50,920 --> 02:07:56,680
<font color="#CCCCCC">the heck who the hell wants to record</font>

1922
02:07:52,690 --> 02:08:02,379
<font color="#E5E5E5">their own instructions no one so when</font>

1923
02:07:56,680 --> 02:08:04,390
you try it you<font color="#CCCCCC"> know in lot of people say</font>

1924
02:08:02,380 --> 02:08:06,520
oh you you you<font color="#E5E5E5"> have</font><font color="#CCCCCC"> arm shellcode and</font>

1925
02:08:04,390 --> 02:08:08,800
SVC<font color="#CCCCCC"> zero and then they encode it with</font>

1926
02:08:06,520 --> 02:08:10,570
<font color="#CCCCCC">soar encoding and</font><font color="#E5E5E5"> all that it will only</font>

1927
02:08:08,800 --> 02:08:13,840
<font color="#E5E5E5">work in QAM you you try it on the</font>

1928
02:08:10,570 --> 02:08:15,880
<font color="#E5E5E5">Raspberry Pi</font><font color="#CCCCCC"> it flat out fail that's why</font>

1929
02:08:13,840 --> 02:08:19,180
<font color="#E5E5E5">we always like</font><font color="#CCCCCC"> to try a shellcode</font><font color="#E5E5E5"> on</font><font color="#CCCCCC"> a</font>

1930
02:08:15,880 --> 02:08:22,480
<font color="#E5E5E5">on an actual</font><font color="#CCCCCC"> hardware and the thing is</font>

1931
02:08:19,180 --> 02:08:27,460
<font color="#E5E5E5">you</font><font color="#CCCCCC"> die nullified yourself one question</font>

1932
02:08:22,480 --> 02:08:32,379
<font color="#CCCCCC">though did we just not right back</font><font color="#E5E5E5"> into</font>

1933
02:08:27,460 --> 02:08:34,690
<font color="#E5E5E5">our own</font><font color="#CCCCCC"> shell go they do not STR B and</font>

1934
02:08:32,380 --> 02:08:38,520
write<font color="#CCCCCC"> a null by then how</font><font color="#E5E5E5"> come it's</font>

1935
02:08:34,690 --> 02:08:38,519
working in that<font color="#CCCCCC"> to one hardware as well</font>

1936
02:08:38,730 --> 02:08:44,230
it's a data literal pool is<font color="#E5E5E5"> in the data</font>

1937
02:08:41,620 --> 02:08:47,349
<font color="#E5E5E5">not in the instructions so you can</font>

1938
02:08:44,230 --> 02:08:49,209
modify literal pools but<font color="#E5E5E5"> you cannot</font>

1939
02:08:47,350 --> 02:08:51,250
modify<font color="#CCCCCC"> instructions this is</font><font color="#E5E5E5"> one thing</font>

1940
02:08:49,210 --> 02:08:54,100
about<font color="#CCCCCC"> arm</font><font color="#E5E5E5"> shellcode that you got to</font>

1941
02:08:51,250 --> 02:08:56,590
remember<font color="#E5E5E5"> and lastly I want to</font><font color="#CCCCCC"> kind of</font>

1942
02:08:54,100 --> 02:08:59,590
give<font color="#E5E5E5"> you an overview of how to go about</font>

1943
02:08:56,590 --> 02:09:01,180
writing<font color="#E5E5E5"> your own reverse shell so I'll</font>

1944
02:08:59,590 --> 02:09:05,650
just walk you<font color="#E5E5E5"> through the last few</font>

1945
02:09:01,180 --> 02:09:06,100
slides<font color="#E5E5E5"> you</font><font color="#CCCCCC"> all know the concept of</font><font color="#E5E5E5"> river</font>

1946
02:09:05,650 --> 02:09:10,420
shells

1947
02:09:06,100 --> 02:09:15,430
what does the devotional do connect

1948
02:09:10,420 --> 02:09:21,489
<font color="#E5E5E5">rather why is it really cool because</font>

1949
02:09:15,430 --> 02:09:27,429
<font color="#CCCCCC">yeah I mean even the old concepts like</font>

1950
02:09:21,489 --> 02:09:31,629
I believe this is<font color="#E5E5E5"> the first documented</font>

1951
02:09:27,429 --> 02:09:34,780
paper<font color="#E5E5E5"> on the river shells this</font>

1952
02:09:31,630 --> 02:09:38,050
<font color="#E5E5E5">co-authored by me and my my boss when we</font>

1953
02:09:34,780 --> 02:09:40,840
were<font color="#E5E5E5"> working at Ernst & Young and at</font>

1954
02:09:38,050 --> 02:09:42,820
that<font color="#CCCCCC"> time we thought</font><font color="#E5E5E5"> about this whole</font>

1955
02:09:40,840 --> 02:09:45,219
inside-out concept we called it an

1956
02:09:42,820 --> 02:09:47,710
<font color="#CCCCCC">inside-out attack we never we never</font>

1957
02:09:45,219 --> 02:09:49,480
really coined<font color="#E5E5E5"> the word river shell but</font>

1958
02:09:47,710 --> 02:09:51,429
the<font color="#E5E5E5"> idea was that you exploit something</font>

1959
02:09:49,480 --> 02:09:53,830
<font color="#E5E5E5">and just get an X term or a reverse</font>

1960
02:09:51,429 --> 02:09:56,520
telnet<font color="#E5E5E5"> or you know native</font><font color="#CCCCCC"> shell code</font>

1961
02:09:53,830 --> 02:10:02,890
come out on a<font color="#CCCCCC"> back</font><font color="#E5E5E5"> connection and that</font>

1962
02:09:56,520 --> 02:10:05,199
goes through everything<font color="#E5E5E5"> so the way</font>

1963
02:10:02,890 --> 02:10:07,090
<font color="#E5E5E5">reverse shell works is you need</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> have</font>

1964
02:10:05,199 --> 02:10:09,639
a listener which is a green box

1965
02:10:07,090 --> 02:10:12,580
<font color="#E5E5E5">you run a let cat listener on</font><font color="#CCCCCC"> board for</font>

1966
02:10:09,640 --> 02:10:15,010
<font color="#E5E5E5">four</font><font color="#CCCCCC"> for four in the victim what</font>

1967
02:10:12,580 --> 02:10:20,190
syscalls do you need to pull off a river

1968
02:10:15,010 --> 02:10:24,969
shell you first need to<font color="#CCCCCC"> create a socket</font>

1969
02:10:20,190 --> 02:10:28,299
<font color="#E5E5E5">then connect the socket to remote host</font>

1970
02:10:24,969 --> 02:10:30,190
and port then you need to redirect your

1971
02:10:28,300 --> 02:10:34,659
standard<font color="#E5E5E5"> and</font><font color="#CCCCCC"> standard out standard error</font>

1972
02:10:30,190 --> 02:10:37,089
so<font color="#CCCCCC"> dewpt:23</font><font color="#E5E5E5"> syscalls and then lastly you</font>

1973
02:10:34,659 --> 02:10:39,699
replace the<font color="#CCCCCC"> victim binary by exerting</font>

1974
02:10:37,090 --> 02:10:42,429
<font color="#CCCCCC">pin shell the redirection is done</font>

1975
02:10:39,699 --> 02:10:47,169
already to<font color="#E5E5E5"> TCP</font><font color="#CCCCCC"> socket so that's that's</font>

1976
02:10:42,429 --> 02:10:49,780
<font color="#E5E5E5">how your reverse shell will work here is</font>

1977
02:10:47,170 --> 02:10:53,199
a<font color="#E5E5E5"> snippet in C this is how you'd write a</font>

1978
02:10:49,780 --> 02:10:55,900
reverse cell shell in C you<font color="#CCCCCC"> have to have</font>

1979
02:10:53,199 --> 02:10:58,928
the socket address<font color="#E5E5E5"> data structure which</font>

1980
02:10:55,900 --> 02:11:02,230
is always<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> be two bytes of zero</font>

1981
02:10:58,929 --> 02:11:05,080
zero zero<font color="#E5E5E5"> two</font><font color="#CCCCCC"> that is a TCP socket</font><font color="#E5E5E5"> the</font>

1982
02:11:02,230 --> 02:11:07,150
next four bytes are port number in the

1983
02:11:05,080 --> 02:11:09,580
next<font color="#E5E5E5"> for</font><font color="#CCCCCC"> the next two bytes are port</font>

1984
02:11:07,150 --> 02:11:13,629
number<font color="#CCCCCC"> the next</font><font color="#E5E5E5"> four bytes are IP</font>

1985
02:11:09,580 --> 02:11:16,719
address then<font color="#E5E5E5"> you have socket connect</font>

1986
02:11:13,630 --> 02:11:20,320
<font color="#CCCCCC">Duke - Duke - Duke -</font><font color="#E5E5E5"> and and exactly</font>

1987
02:11:16,719 --> 02:11:22,330
this is somehow<font color="#E5E5E5"> not sure it's appearing</font>

1988
02:11:20,320 --> 02:11:26,739
in white for some reason yeah there is a

1989
02:11:22,330 --> 02:11:30,489
socket<font color="#CCCCCC"> decoder</font><font color="#E5E5E5"> so if you want to</font>

1990
02:11:26,739 --> 02:11:33,009
<font color="#E5E5E5">implement your</font><font color="#CCCCCC"> river shell these these</font>

1991
02:11:30,489 --> 02:11:35,459
<font color="#E5E5E5">are your sis call numbers is called 281</font>

1992
02:11:33,010 --> 02:11:40,690
for<font color="#E5E5E5"> socket 283 for connect</font>

1993
02:11:35,460 --> 02:11:42,760
63 for<font color="#CCCCCC"> doop - and</font><font color="#E5E5E5"> 11 for exact</font><font color="#CCCCCC"> ve here</font>

1994
02:11:40,690 --> 02:11:45,669
is an approach so<font color="#E5E5E5"> you begin your</font>

1995
02:11:42,760 --> 02:11:48,220
shellcode with<font color="#E5E5E5"> an armed force which you</font>

1996
02:11:45,670 --> 02:11:51,010
invoke a socket call you write a null

1997
02:11:48,220 --> 02:11:54,220
byte at a finite address<font color="#E5E5E5"> you write</font>

1998
02:11:51,010 --> 02:11:56,890
<font color="#E5E5E5">another null byte at</font><font color="#CCCCCC"> - H then invoke</font>

1999
02:11:54,220 --> 02:12:00,850
connect doop do doop<font color="#E5E5E5"> - we got to be</font><font color="#CCCCCC"> very</font>

2000
02:11:56,890 --> 02:12:03,820
<font color="#E5E5E5">careful of the parameters</font><font color="#CCCCCC"> and this last</font>

2001
02:12:00,850 --> 02:12:07,870
slide shows you what parameters you need

2002
02:12:03,820 --> 02:12:09,309
<font color="#E5E5E5">to place in each register so for socket</font>

2003
02:12:07,870 --> 02:12:12,250
the parameters are always<font color="#E5E5E5"> going to</font><font color="#CCCCCC"> be</font>

2004
02:12:09,310 --> 02:12:15,730
<font color="#CCCCCC">two one</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> zero and it will return a</font>

2005
02:12:12,250 --> 02:12:18,100
socket descriptor in<font color="#CCCCCC"> r0 this socket</font>

2006
02:12:15,730 --> 02:12:20,830
descriptor you to reuse in connect and

2007
02:12:18,100 --> 02:12:23,040
<font color="#CCCCCC">doop - so you save it in another</font>

2008
02:12:20,830 --> 02:12:25,900
<font color="#CCCCCC">register and then make the connect call</font>

2009
02:12:23,040 --> 02:12:29,140
the pointer to<font color="#E5E5E5"> the socket</font><font color="#CCCCCC"> address will</font>

2010
02:12:25,900 --> 02:12:31,240
be<font color="#CCCCCC"> in the literal pool then you do the</font>

2011
02:12:29,140 --> 02:12:34,150
dupe tools and then lastly<font color="#E5E5E5"> you do the</font>

2012
02:12:31,240 --> 02:12:36,969
exact<font color="#CCCCCC"> V</font><font color="#E5E5E5"> the exactly bit you know how to</font>

2013
02:12:34,150 --> 02:12:40,030
do so you want to take<font color="#E5E5E5"> it as a nice</font>

2014
02:12:36,970 --> 02:12:47,820
exercise<font color="#E5E5E5"> to work off right in our River</font>

2015
02:12:40,030 --> 02:12:47,820
she'll get a beer you get a beer

2016
02:12:50,910 --> 02:12:56,019
you do get immense joy which is<font color="#E5E5E5"> not</font>

2017
02:12:53,680 --> 02:13:03,700
doesn't compare to<font color="#E5E5E5"> any number of beers</font>

2018
02:12:56,020 --> 02:13:07,160
<font color="#E5E5E5">at you so well any last questions yeah</font>

2019
02:13:03,700 --> 02:13:10,290
sure<font color="#CCCCCC"> okay</font>

2020
02:13:07,160 --> 02:13:10,290
[Music]

2021
02:13:21,710 --> 02:13:28,860
here we are<font color="#E5E5E5"> yeah this one this is</font><font color="#CCCCCC"> not</font>

2022
02:13:27,120 --> 02:13:30,750
<font color="#E5E5E5">this</font><font color="#CCCCCC"> is not the program</font><font color="#E5E5E5"> counter</font>

2023
02:13:28,860 --> 02:13:34,139
overnight<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is this goes</font><font color="#E5E5E5"> into</font><font color="#CCCCCC"> the</font>

2024
02:13:30,750 --> 02:13:41,730
frame pointer<font color="#E5E5E5"> R 1 R 11 I can easily just</font>

2025
02:13:34,140 --> 02:13:44,790
just as well do this<font color="#E5E5E5"> and 132 I just</font>

2026
02:13:41,730 --> 02:13:46,559
separated<font color="#CCCCCC"> these</font><font color="#E5E5E5"> because when you return</font>

2027
02:13:44,790 --> 02:13:48,540
the<font color="#CCCCCC"> function your frame pointer</font><font color="#E5E5E5"> gets</font>

2028
02:13:46,560 --> 02:13:51,090
over it in a program<font color="#CCCCCC"> counter gets over</font>

2029
02:13:48,540 --> 02:13:53,670
it<font color="#CCCCCC"> I just</font><font color="#E5E5E5"> did the</font><font color="#CCCCCC"> bbbb to see the</font>

2030
02:13:51,090 --> 02:13:56,160
difference in the frame pointer<font color="#E5E5E5"> the</font>

2031
02:13:53,670 --> 02:13:58,820
actual offset to<font color="#E5E5E5"> the program counter</font><font color="#CCCCCC"> is</font>

2032
02:13:56,160 --> 02:13:58,820
132

2033
02:13:59,960 --> 02:14:04,370
bbbb is not treated as an address<font color="#E5E5E5"> at all</font>

2034
02:14:06,260 --> 02:14:10,770
right well well if you have more

2035
02:14:09,210 --> 02:14:15,420
<font color="#CCCCCC">questions about arm assembly</font>

2036
02:14:10,770 --> 02:14:17,400
specifically is<font color="#CCCCCC"> Samuel showed it in the</font>

2037
02:14:15,420 --> 02:14:20,130
<font color="#CCCCCC">beginning of the slides</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> serie laps</font>

2038
02:14:17,400 --> 02:14:23,190
<font color="#E5E5E5">comm you get all the basics</font><font color="#CCCCCC"> it gets a</font>

2039
02:14:20,130 --> 02:14:26,010
<font color="#E5E5E5">little bit more into detail</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> there's</font>

2040
02:14:23,190 --> 02:14:28,290
also one tutorial covering specifically

2041
02:14:26,010 --> 02:14:30,900
how<font color="#E5E5E5"> to write this</font><font color="#CCCCCC"> xav shell code that we</font>

2042
02:14:28,290 --> 02:14:33,180
<font color="#E5E5E5">just did like step by step in case you</font>

2043
02:14:30,900 --> 02:14:38,370
forget what we did<font color="#E5E5E5"> you want to repeat a</font>

2044
02:14:33,180 --> 02:14:41,090
<font color="#E5E5E5">little bit and yeah yeah let me uh put</font>

2045
02:14:38,370 --> 02:14:41,090
<font color="#E5E5E5">this up</font>

2046
02:14:50,170 --> 02:15:13,330
yeah so all the tutorials<font color="#CCCCCC"> I think it's</font>

2047
02:14:53,650 --> 02:15:16,780
back<font color="#CCCCCC"> at my party visible</font><font color="#E5E5E5"> so tutorials on</font>

2048
02:15:13,330 --> 02:15:19,870
<font color="#CCCCCC">Azaria Labs calm these are our Twitter</font>

2049
02:15:16,780 --> 02:15:22,940
IDs ladies and gentlemen thank you<font color="#E5E5E5"> very</font>

2050
02:15:19,870 --> 02:15:27,830
<font color="#E5E5E5">much for playing even late at night</font>

2051
02:15:22,940 --> 02:15:27,830
[Applause]

2052
02:15:28,510 --> 02:15:47,960
[Music]

