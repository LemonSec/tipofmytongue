1
00:00:02,890 --> 00:00:07,160
okay good so I'm here to talk about

2
00:00:05,560 --> 00:00:10,040
continuous integration continuous

3
00:00:07,160 --> 00:00:13,280
bounties so this is a presentation based

4
00:00:10,040 --> 00:00:15,620
on books that I've found in real life ci

5
00:00:13,280 --> 00:00:18,589
City pipelines that I've got paid for

6
00:00:15,620 --> 00:00:20,060
because I'm a bug bounty hunter so in

7
00:00:18,589 --> 00:00:22,130
this presentation I say oh my

8
00:00:20,060 --> 00:00:24,948
methodology for finding bugs in Co City

9
00:00:22,130 --> 00:00:28,579
pipelines I'm not gonna touch framework

10
00:00:24,949 --> 00:00:30,679
bugs CES or anything here they're all

11
00:00:28,579 --> 00:00:33,470
there we can all go find them I'm more

12
00:00:30,679 --> 00:00:36,140
looking at logic issues implementation

13
00:00:33,470 --> 00:00:39,430
issues configuration issues that we find

14
00:00:36,140 --> 00:00:42,019
found in any CIO city pipeline out there

15
00:00:39,430 --> 00:00:44,059
are details from the tooling I used so I

16
00:00:42,019 --> 00:00:46,579
think that's really valuable mostly my

17
00:00:44,059 --> 00:00:48,260
tooling so mostly self-promotion but you

18
00:00:46,579 --> 00:00:50,390
know it's pretty good I use it and it

19
00:00:48,260 --> 00:00:54,260
works for me so I'll show you some of

20
00:00:50,390 --> 00:00:56,780
those Who am I that is me spent far too

21
00:00:54,260 --> 00:00:58,250
long on that little image I'd say I'm

22
00:00:56,780 --> 00:01:00,320
Alex chairman and I'm a full-time bug

23
00:00:58,250 --> 00:01:02,449
grants hunter I've been doing this since

24
00:01:00,320 --> 00:01:05,870
January this year and it's going pretty

25
00:01:02,449 --> 00:01:07,939
well so far been in security for 12

26
00:01:05,870 --> 00:01:10,430
years pen test of 10 internal security

27
00:01:07,939 --> 00:01:12,199
and on the vendor side so I've kind of

28
00:01:10,430 --> 00:01:14,900
done done all around and represented

29
00:01:12,200 --> 00:01:16,909
here previously Def Con a black hats and

30
00:01:14,900 --> 00:01:19,310
cool stuff so if you're interested go

31
00:01:16,909 --> 00:01:23,119
look it up and I'm a DX chairman on

32
00:01:19,310 --> 00:01:24,229
Twitter so firstly I guess what are we

33
00:01:23,119 --> 00:01:27,829
what am I talking about when I talk

34
00:01:24,229 --> 00:01:30,140
about a CIC pipeline so these obviously

35
00:01:27,829 --> 00:01:31,639
back in the day used to be throwing them

36
00:01:30,140 --> 00:01:32,899
away and compiled on your on your

37
00:01:31,640 --> 00:01:35,210
desktop because we didn't have laptops

38
00:01:32,899 --> 00:01:38,479
and you'd go get a coffee

39
00:01:35,210 --> 00:01:39,798
give him another coffee get a pub come

40
00:01:38,479 --> 00:01:41,719
back the next day and probably still be

41
00:01:39,799 --> 00:01:43,969
compiling so then I floated kind of

42
00:01:41,719 --> 00:01:45,169
compilation efforts to build servers so

43
00:01:43,969 --> 00:01:47,360
we could do other stuff our desktops

44
00:01:45,170 --> 00:01:48,530
while we were compiling stuff and then

45
00:01:47,360 --> 00:01:50,210
obviously cloud and all the rest of it

46
00:01:48,530 --> 00:01:52,399
came along and we thought why don't we

47
00:01:50,210 --> 00:01:53,750
just kind of pipeline this so that any

48
00:01:52,399 --> 00:01:55,280
change you make the source code will

49
00:01:53,750 --> 00:01:57,770
just go off from compile somewhere and

50
00:01:55,280 --> 00:01:59,750
I'll get an updated binary a couple of

51
00:01:57,770 --> 00:02:00,649
hours later so that's kind of what I'm

52
00:01:59,750 --> 00:02:05,040
talking about when I'm talking about

53
00:02:00,649 --> 00:02:07,230
CICE pipeline the general steps that

54
00:02:05,040 --> 00:02:08,760
code goes through when it runs through a

55
00:02:07,230 --> 00:02:09,960
pipeline is what you've got two things

56
00:02:08,759 --> 00:02:11,760
you've got the actual code you're trying

57
00:02:09,960 --> 00:02:13,800
to compile I'm gonna build build

58
00:02:11,760 --> 00:02:16,320
definition and the build definition is

59
00:02:13,800 --> 00:02:17,550
it tends to be piped by specific but

60
00:02:16,320 --> 00:02:18,900
it'll include all the builds steps you

61
00:02:17,550 --> 00:02:21,720
want to do and how you want to deploy it

62
00:02:18,900 --> 00:02:22,950
at the end of it so when a builds kicked

63
00:02:21,720 --> 00:02:24,359
off for any reason either manually

64
00:02:22,950 --> 00:02:26,910
kicked off or triggered by an automated

65
00:02:24,360 --> 00:02:29,040
process our building since we'll will

66
00:02:26,910 --> 00:02:31,280
kick up it will grab your source code

67
00:02:29,040 --> 00:02:33,989
from source be a manager or something

68
00:02:31,280 --> 00:02:36,330
and then start running the build if

69
00:02:33,990 --> 00:02:38,160
you've written some tests in there we'll

70
00:02:36,330 --> 00:02:40,470
run the tests and let you know that kind

71
00:02:38,160 --> 00:02:41,940
of success or failure of the tests if

72
00:02:40,470 --> 00:02:44,970
we're recessed succeed it will store the

73
00:02:41,940 --> 00:02:47,940
artifacts in an artifact factory or

74
00:02:44,970 --> 00:02:49,530
deploy them straight to straight to a

75
00:02:47,940 --> 00:02:51,320
survey if if you got that set up and

76
00:02:49,530 --> 00:02:53,730
I've see the instance will get torn down

77
00:02:51,320 --> 00:02:54,900
and just just looking at this you can

78
00:02:53,730 --> 00:02:56,790
see it's quite a complex set of

79
00:02:54,900 --> 00:02:58,920
interactions between many different

80
00:02:56,790 --> 00:03:00,989
systems a number of different

81
00:02:58,920 --> 00:03:02,760
technologies so there are gonna be bugs

82
00:03:00,990 --> 00:03:05,070
there are always gonna be bugs and it's

83
00:03:02,760 --> 00:03:10,019
really interesting environments ago go

84
00:03:05,070 --> 00:03:11,880
bug hunting in so women talk about bugs

85
00:03:10,020 --> 00:03:14,640
obviously the kind of pinnacle of the

86
00:03:11,880 --> 00:03:16,740
bug is getting RC on a server that's not

87
00:03:14,640 --> 00:03:18,540
really what we're looking for in COC

88
00:03:16,740 --> 00:03:20,880
pipelines they are command execution as

89
00:03:18,540 --> 00:03:23,820
a service what they're meant to do is

90
00:03:20,880 --> 00:03:26,340
run your commands run your builds run

91
00:03:23,820 --> 00:03:29,010
your code if it's running tests so we

92
00:03:26,340 --> 00:03:31,920
can't just report our CA and go home

93
00:03:29,010 --> 00:03:35,220
unfortunately these three examples on

94
00:03:31,920 --> 00:03:38,280
the screen are from three popular COC

95
00:03:35,220 --> 00:03:40,500
pipelines so Travis CI surface air and

96
00:03:38,280 --> 00:03:43,050
an open source seriously pipeline called

97
00:03:40,500 --> 00:03:44,790
screwdriver all showing that actually in

98
00:03:43,050 --> 00:03:49,260
the docs in the definition it tells you

99
00:03:44,790 --> 00:03:51,269
how to run commands on their servers but

100
00:03:49,260 --> 00:03:53,370
in order to fully assess the COC

101
00:03:51,270 --> 00:03:55,110
pipeline command attribution is our

102
00:03:53,370 --> 00:03:57,209
first step we need to be able to run our

103
00:03:55,110 --> 00:04:00,959
own commands to then start probing and

104
00:03:57,209 --> 00:04:03,500
looking at for for bugs in the in the

105
00:04:00,959 --> 00:04:03,500
build processes

106
00:04:03,660 --> 00:04:07,920
it's an outline of my of my methodology

107
00:04:06,300 --> 00:04:11,280
when I'm looking at these sorts of

108
00:04:07,920 --> 00:04:13,140
things so as I said a build starts with

109
00:04:11,280 --> 00:04:16,440
two things two starts with your your

110
00:04:13,140 --> 00:04:18,510
source code and a definition for run

111
00:04:16,440 --> 00:04:20,430
through the execution of the build some

112
00:04:18,510 --> 00:04:21,750
way during that bill is the build

113
00:04:20,430 --> 00:04:24,210
systems going to have to access some

114
00:04:21,750 --> 00:04:27,120
secrets that could be deployment keys or

115
00:04:24,210 --> 00:04:29,219
SCM credentials something on those lines

116
00:04:27,120 --> 00:04:31,170
internal API is in order to to throw

117
00:04:29,220 --> 00:04:34,220
code or throw code out there or deploy

118
00:04:31,170 --> 00:04:37,110
code a build system going to report on

119
00:04:34,220 --> 00:04:38,940
its build it's whether it succeeded

120
00:04:37,110 --> 00:04:40,110
whether it didn't the logs something to

121
00:04:38,940 --> 00:04:42,450
look at that and it's finding in the

122
00:04:40,110 --> 00:04:44,730
deploy code so the first thing I'm going

123
00:04:42,450 --> 00:04:45,870
to assess when I when I look at any CIC

124
00:04:44,730 --> 00:04:49,020
pipeline it's gonna be the difference

125
00:04:45,870 --> 00:04:51,030
the build definition so when taking a

126
00:04:49,020 --> 00:04:53,099
definition it can be taken in the amel

127
00:04:51,030 --> 00:04:55,229
format in XML I've seen some that just

128
00:04:53,100 --> 00:04:57,620
straight up to take bash scripts but any

129
00:04:55,230 --> 00:05:00,210
processing that's done on these

130
00:04:57,620 --> 00:05:01,890
definition files can lead to bugs so

131
00:05:00,210 --> 00:05:03,719
you've got your standard bugs for

132
00:05:01,890 --> 00:05:06,300
looking at yeah Malan XML so Yama

133
00:05:03,720 --> 00:05:09,360
rejection xxe that kind of a bit dull

134
00:05:06,300 --> 00:05:11,160
but they can be there anytime that the

135
00:05:09,360 --> 00:05:13,110
files are processed and then you have

136
00:05:11,160 --> 00:05:16,440
application specific Jets what I'd like

137
00:05:13,110 --> 00:05:18,450
to send pre-flight checks so this could

138
00:05:16,440 --> 00:05:21,270
be you've told a build pipeline that

139
00:05:18,450 --> 00:05:23,880
your source code exists some get and a

140
00:05:21,270 --> 00:05:25,200
private repo so it needs credentials to

141
00:05:23,880 --> 00:05:26,670
go and get them so it will check the

142
00:05:25,200 --> 00:05:28,050
credentials that you've given it and

143
00:05:26,670 --> 00:05:30,630
this will happen before the build starts

144
00:05:28,050 --> 00:05:34,310
so it can alert you to incorrect

145
00:05:30,630 --> 00:05:36,540
financials before it kicks off the

146
00:05:34,310 --> 00:05:38,610
built-in miny to clone the sort the

147
00:05:36,540 --> 00:05:41,780
source first before it starts to build

148
00:05:38,610 --> 00:05:41,780
so that's another pre-flight check

149
00:05:42,560 --> 00:05:46,730
excuse me

150
00:05:43,830 --> 00:05:49,680
and there'll be a lot of pipeline's

151
00:05:46,730 --> 00:05:52,770
implementation specific things and

152
00:05:49,680 --> 00:05:56,490
that's one thing you've got to take on a

153
00:05:52,770 --> 00:05:59,460
case-by-case basis that one kind of dive

154
00:05:56,490 --> 00:06:03,500
into one of these and talk about an IRS

155
00:05:59,460 --> 00:06:06,120
so an issue I found in real life on a

156
00:06:03,500 --> 00:06:09,140
reasonably popular build platform the

157
00:06:06,120 --> 00:06:11,580
future I can't tell you which one it was

158
00:06:09,140 --> 00:06:13,710
that's assessing this this definition

159
00:06:11,580 --> 00:06:16,780
stage and it's the build systems

160
00:06:13,710 --> 00:06:18,820
preflight checks and I saw that it was

161
00:06:16,780 --> 00:06:21,969
the repository before the build instance

162
00:06:18,820 --> 00:06:23,500
was being spun up so the pipeline McLean

163
00:06:21,970 --> 00:06:25,060
repository and then passed all of the

164
00:06:23,500 --> 00:06:26,620
files from the repository into the build

165
00:06:25,060 --> 00:06:28,330
instance although that's a bit funny

166
00:06:26,620 --> 00:06:30,400
normally happens in the instance clones

167
00:06:28,330 --> 00:06:30,729
the source so is there anything I can do

168
00:06:30,400 --> 00:06:32,859
that

169
00:06:30,730 --> 00:06:34,360
looking through the the list of

170
00:06:32,860 --> 00:06:37,060
supported source control systems some

171
00:06:34,360 --> 00:06:38,950
kind of usual get SVN okay bit old but

172
00:06:37,060 --> 00:06:42,070
whatever mercurial okay slightly older

173
00:06:38,950 --> 00:06:44,260
fine team foundation server still use

174
00:06:42,070 --> 00:06:47,860
out there and then put that holds

175
00:06:44,260 --> 00:06:49,510
perforce is anyone use perforce I had no

176
00:06:47,860 --> 00:06:52,240
idea what for the two people thank you I

177
00:06:49,510 --> 00:06:53,680
had no idea what perforce was is that

178
00:06:52,240 --> 00:06:58,150
what on earth is this thing so I'm

179
00:06:53,680 --> 00:06:59,290
coming go digging perforce is actually

180
00:06:58,150 --> 00:07:02,380
quite widely used in the gaming industry

181
00:06:59,290 --> 00:07:04,930
for some reason no idea why but there we

182
00:07:02,380 --> 00:07:07,750
go so the first thing I found out about

183
00:07:04,930 --> 00:07:09,910
perforce most source control systems are

184
00:07:07,750 --> 00:07:11,800
client driven so the client says I've

185
00:07:09,910 --> 00:07:14,350
made changes these files push the

186
00:07:11,800 --> 00:07:16,000
changes to the server perforce server

187
00:07:14,350 --> 00:07:18,160
acts slightly differently a server

188
00:07:16,000 --> 00:07:20,200
driven the server requests the client

189
00:07:18,160 --> 00:07:29,860
can I have the changes to that file I

190
00:07:20,200 --> 00:07:30,659
thought that that's a bit odd so move on

191
00:07:29,860 --> 00:07:32,919
oh sorry

192
00:07:30,660 --> 00:07:34,120
the next thing I found was the the

193
00:07:32,919 --> 00:07:35,680
perforce quite sir I was playing around

194
00:07:34,120 --> 00:07:37,930
the peripherals protocol here so I've

195
00:07:35,680 --> 00:07:39,520
written some some janky pipe err Python

196
00:07:37,930 --> 00:07:41,410
scripts and kind of just about doing

197
00:07:39,520 --> 00:07:43,450
what I needed to except for it didn't

198
00:07:41,410 --> 00:07:45,280
have this state and the the control flow

199
00:07:43,450 --> 00:07:46,659
quite right and then I noticed the

200
00:07:45,280 --> 00:07:48,609
client didn't care about the control

201
00:07:46,660 --> 00:07:50,200
flow so the client would say to me I

202
00:07:48,610 --> 00:07:52,750
want to authenticate to the server and

203
00:07:50,200 --> 00:07:55,330
as a server I would say ok sorry the

204
00:07:52,750 --> 00:07:56,650
server should be saying here's your user

205
00:07:55,330 --> 00:07:59,770
challenge and then the client should

206
00:07:56,650 --> 00:08:02,590
response that user challenge but I found

207
00:07:59,770 --> 00:08:03,849
out that the the client could say I want

208
00:08:02,590 --> 00:08:05,190
to a fence gate and the server would say

209
00:08:03,850 --> 00:08:07,990
okay give me the contents of this file

210
00:08:05,190 --> 00:08:09,880
which makes no sense in that in terms of

211
00:08:07,990 --> 00:08:11,620
the the authentication flow they're fine

212
00:08:09,880 --> 00:08:15,100
okay all right fine service I need to do

213
00:08:11,620 --> 00:08:16,660
something I'm gonna do it and taking

214
00:08:15,100 --> 00:08:19,990
these things together I thought that's

215
00:08:16,660 --> 00:08:21,550
really quite interesting so that's fine

216
00:08:19,990 --> 00:08:23,080
if you're dealing with a trusty fine

217
00:08:21,550 --> 00:08:26,560
it's ok itch you're dealing with a

218
00:08:23,080 --> 00:08:28,510
trusted server then the CI CD pipeline

219
00:08:26,560 --> 00:08:29,330
you define the server it's going to talk

220
00:08:28,510 --> 00:08:31,909
to

221
00:08:29,330 --> 00:08:34,218
so the P the perforce client people

222
00:08:31,909 --> 00:08:35,630
client system I server user login and

223
00:08:34,219 --> 00:08:37,789
I'm going to say okay send me the font

224
00:08:35,630 --> 00:08:39,559
the contents of Etsy password and the

225
00:08:37,789 --> 00:08:43,309
client says sure why not

226
00:08:39,559 --> 00:08:47,810
I thought this freako so it's great I'm

227
00:08:43,309 --> 00:08:49,209
happy with this this is going well but

228
00:08:47,810 --> 00:08:51,589
why stop there where else can we take it

229
00:08:49,209 --> 00:08:52,910
looking through the list of commands

230
00:08:51,589 --> 00:08:53,779
supported by the perforce client so

231
00:08:52,910 --> 00:08:55,880
you've got you've got you sent for

232
00:08:53,779 --> 00:08:56,510
that's great move farm ok that's pretty

233
00:08:55,880 --> 00:08:59,570
interesting

234
00:08:56,510 --> 00:09:03,980
delete for that could be funny and write

235
00:08:59,570 --> 00:09:06,260
file so now the perforce client is

236
00:09:03,980 --> 00:09:08,240
saying I'd like to authenticate and I'm

237
00:09:06,260 --> 00:09:10,670
saying please write this bash - I'll see

238
00:09:08,240 --> 00:09:15,829
for me and that was a very simple way of

239
00:09:10,670 --> 00:09:17,959
taking a weird client interaction with

240
00:09:15,829 --> 00:09:21,829
the server to full RCE

241
00:09:17,959 --> 00:09:23,268
in it in a pallet in a pipeline and this

242
00:09:21,829 --> 00:09:25,069
was outside the buildings and so this

243
00:09:23,269 --> 00:09:27,230
gave me much more access than just

244
00:09:25,070 --> 00:09:28,579
having LC in a build instance would so I

245
00:09:27,230 --> 00:09:33,140
thought being the response researcher

246
00:09:28,579 --> 00:09:34,760
and let the vendor name so kind of email

247
00:09:33,140 --> 00:09:36,880
security app on their on their website

248
00:09:34,760 --> 00:09:39,620
and their response and security text ok

249
00:09:36,880 --> 00:09:42,320
Twitter so anybody have a security

250
00:09:39,620 --> 00:09:44,839
contact at but I love those love those

251
00:09:42,320 --> 00:09:46,940
tweets it's some of you from their

252
00:09:44,839 --> 00:09:48,680
support team gets in contact with me you

253
00:09:46,940 --> 00:09:50,120
share the details of an ability and then

254
00:09:48,680 --> 00:09:53,779
the response from their development team

255
00:09:50,120 --> 00:09:55,190
comes back saying this what can the

256
00:09:53,779 --> 00:09:56,810
server's ability to write to arbitrary

257
00:09:55,190 --> 00:10:01,279
locations would impact application

258
00:09:56,810 --> 00:10:03,140
functionality great however there is an

259
00:10:01,279 --> 00:10:06,140
optional environment variable you can

260
00:10:03,140 --> 00:10:07,579
set to restrict the client the the past

261
00:10:06,140 --> 00:10:11,120
that the people client can speak to

262
00:10:07,579 --> 00:10:15,199
understand except it doesn't actually

263
00:10:11,120 --> 00:10:17,089
work the way they think it works I can't

264
00:10:15,199 --> 00:10:23,930
go into this or that they tell me the

265
00:10:17,089 --> 00:10:26,089
fixing him that was my first major bug I

266
00:10:23,930 --> 00:10:28,099
found in it seriously pipeline and I

267
00:10:26,089 --> 00:10:28,640
thought this is this is pretty good I'm

268
00:10:28,100 --> 00:10:31,610
liking this

269
00:10:28,640 --> 00:10:33,199
I'm gonna throw in a bit more so then I

270
00:10:31,610 --> 00:10:36,860
get to the the kind of build instance

271
00:10:33,199 --> 00:10:38,120
execution stage of my methodology and

272
00:10:36,860 --> 00:10:39,860
this is where it becomes much more like

273
00:10:38,120 --> 00:10:42,260
a normal pen test so you've got your

274
00:10:39,860 --> 00:10:42,890
your local system builder view so you're

275
00:10:42,260 --> 00:10:45,170
looking at difference

276
00:10:42,890 --> 00:10:47,510
between a base build of if it's running

277
00:10:45,170 --> 00:10:48,770
on Debian docker literally just differ

278
00:10:47,510 --> 00:10:52,189
the files to find out what they've

279
00:10:48,770 --> 00:10:53,600
changed in the base build sometimes

280
00:10:52,190 --> 00:10:55,610
looking for local privilege escalation

281
00:10:53,600 --> 00:10:57,800
depends on the privilege privileges

282
00:10:55,610 --> 00:10:59,300
you've been given to start with getting

283
00:10:57,800 --> 00:11:01,400
routes great doesn't always get you very

284
00:10:59,300 --> 00:11:03,670
much but sometimes it won't allow you to

285
00:11:01,400 --> 00:11:05,740
access certain scripts that were

286
00:11:03,670 --> 00:11:08,599
reproductive from low privilege geezers

287
00:11:05,740 --> 00:11:11,210
looking for network services so what's

288
00:11:08,600 --> 00:11:13,130
listening on my local system are other

289
00:11:11,210 --> 00:11:15,280
buildings is listening on those supports

290
00:11:13,130 --> 00:11:17,750
as well how about network storage

291
00:11:15,280 --> 00:11:20,240
management systems and can I can access

292
00:11:17,750 --> 00:11:23,540
the given MCS back-end systems from from

293
00:11:20,240 --> 00:11:26,420
the build instance for example quick

294
00:11:23,540 --> 00:11:28,280
issue there so one pipeline I'm scanning

295
00:11:26,420 --> 00:11:30,020
around their local network found the net

296
00:11:28,280 --> 00:11:31,220
NFS share that was exported to the

297
00:11:30,020 --> 00:11:32,750
entire network and feel great

298
00:11:31,220 --> 00:11:35,870
go and have a look on that and it's got

299
00:11:32,750 --> 00:11:37,610
their their container images so I

300
00:11:35,870 --> 00:11:39,050
thought I'd took a look at the size

301
00:11:37,610 --> 00:11:42,890
roots 40k just like ok I'm going to ask

302
00:11:39,050 --> 00:11:44,599
somebody if I can do this so email their

303
00:11:42,890 --> 00:11:49,100
security scene saying hey I found this

304
00:11:44,600 --> 00:11:51,500
can I go grab your you'll build images

305
00:11:49,100 --> 00:11:53,900
and they're like yes sure why not let's

306
00:11:51,500 --> 00:11:55,730
see what happens here so grab before T

307
00:11:53,900 --> 00:11:59,090
get out of there I think great first

308
00:11:55,730 --> 00:12:02,680
thing in Dave's trying crack with Chris

309
00:11:59,090 --> 00:12:05,390
the root password couldn't get that ok

310
00:12:02,680 --> 00:12:06,890
did man did manage to find some early

311
00:12:05,390 --> 00:12:08,870
initialization configuration scripts

312
00:12:06,890 --> 00:12:10,880
that were deleted by the time you build

313
00:12:08,870 --> 00:12:12,290
instance so she starts up that's quite

314
00:12:10,880 --> 00:12:13,610
cool we're doing it there was throwing

315
00:12:12,290 --> 00:12:15,589
some secrets in there but policing them

316
00:12:13,610 --> 00:12:18,080
before before you build instance started

317
00:12:15,590 --> 00:12:18,650
and that gave the access to internal API

318
00:12:18,080 --> 00:12:22,070
credentials

319
00:12:18,650 --> 00:12:26,020
pretty good win happy with that so again

320
00:12:22,070 --> 00:12:28,700
reported that and and got that one fixed

321
00:12:26,020 --> 00:12:30,590
further things can look out on the

322
00:12:28,700 --> 00:12:32,980
execution phase so if we're running in a

323
00:12:30,590 --> 00:12:35,240
docking docker container or kubernetes

324
00:12:32,980 --> 00:12:38,720
you do your standard kind of container

325
00:12:35,240 --> 00:12:41,410
breakout stuff there's a great tool by a

326
00:12:38,720 --> 00:12:44,030
chap called Chris Laroy

327
00:12:41,410 --> 00:12:45,469
break out the box I think it's cool on

328
00:12:44,030 --> 00:12:47,959
github which will do a lot of these

329
00:12:45,470 --> 00:12:52,900
sorts of container breakout things for

330
00:12:47,960 --> 00:12:54,640
you and come up great common container

331
00:12:52,900 --> 00:12:56,079
container issues

332
00:12:54,640 --> 00:12:57,579
and then you got cross instance

333
00:12:56,079 --> 00:13:00,399
compromise and this is probably one of

334
00:12:57,579 --> 00:13:01,269
the biggest areas of risk in co2

335
00:13:00,399 --> 00:13:03,160
pipelines

336
00:13:01,269 --> 00:13:05,110
you obviously want your user data to be

337
00:13:03,160 --> 00:13:06,610
segregated so one users build shouldn't

338
00:13:05,110 --> 00:13:11,260
be able to impact on access another

339
00:13:06,610 --> 00:13:14,829
users build so a lot of effort should be

340
00:13:11,260 --> 00:13:18,790
put into segregating build instances

341
00:13:14,829 --> 00:13:20,560
making sure that can't access by the

342
00:13:18,790 --> 00:13:26,290
network each other's association

343
00:13:20,560 --> 00:13:27,459
instances or or other services so in

344
00:13:26,290 --> 00:13:30,430
order to test all of these things

345
00:13:27,459 --> 00:13:31,930
rolling back slightly you saw at the

346
00:13:30,430 --> 00:13:33,430
start we have the animal definition so

347
00:13:31,930 --> 00:13:35,170
I'm not typing all these commands into

348
00:13:33,430 --> 00:13:36,969
llamo and then throwing it to the build

349
00:13:35,170 --> 00:13:39,339
instance to build its come back 20

350
00:13:36,970 --> 00:13:40,860
minutes later for a result you can start

351
00:13:39,339 --> 00:13:45,430
doing that but it gets old pretty quick

352
00:13:40,860 --> 00:13:47,110
so the obvious thing today to do there

353
00:13:45,430 --> 00:13:49,810
is just throw up a reverse shell and run

354
00:13:47,110 --> 00:13:51,910
it I didn't want to use Metasploit

355
00:13:49,810 --> 00:13:55,268
dormitories are doing this so I kind of

356
00:13:51,910 --> 00:13:56,709
thought is a bit overkill so looking at

357
00:13:55,269 --> 00:13:58,779
a lot of kind of netcat reverse shells

358
00:13:56,709 --> 00:14:01,719
that are out there and they're all very

359
00:13:58,779 --> 00:14:03,160
basic and then I was working on one

360
00:14:01,720 --> 00:14:04,690
pipeline where actually some of the data

361
00:14:03,160 --> 00:14:06,130
would have been very sensitive that I

362
00:14:04,690 --> 00:14:07,620
was putting out okay don't let just

363
00:14:06,130 --> 00:14:09,880
throw it over net axe it's not encrypted

364
00:14:07,620 --> 00:14:10,959
and then suddenly thought well why can't

365
00:14:09,880 --> 00:14:13,959
you do the same thing as a net cut

366
00:14:10,959 --> 00:14:16,268
reverse shell using SSH quick script

367
00:14:13,959 --> 00:14:19,329
later and I wrote this very handy tool

368
00:14:16,269 --> 00:14:22,089
to do this so it takes your standard

369
00:14:19,329 --> 00:14:25,239
kind of FIFO input output to interested

370
00:14:22,089 --> 00:14:28,209
H will connect to an SSH server which

371
00:14:25,240 --> 00:14:30,850
you can then connect to from your server

372
00:14:28,209 --> 00:14:32,859
so the the SSH server brokers the

373
00:14:30,850 --> 00:14:35,829
connection for you and you get a full

374
00:14:32,860 --> 00:14:39,220
interactive SSH shell which means you

375
00:14:35,829 --> 00:14:40,810
can also do things like SC SCP port

376
00:14:39,220 --> 00:14:42,880
forwarding and have full job control on

377
00:14:40,810 --> 00:14:46,239
there which is really quite quite nice

378
00:14:42,880 --> 00:14:47,680
in terms of assessing an internal

379
00:14:46,240 --> 00:14:49,300
environment so I thought that was quite

380
00:14:47,680 --> 00:14:53,560
cool sorry about that on github

381
00:14:49,300 --> 00:14:55,269
feel free to check it out so looking at

382
00:14:53,560 --> 00:14:57,939
cross instance compromise

383
00:14:55,269 --> 00:14:59,320
as I say is a really big really big

384
00:14:57,940 --> 00:15:01,720
thing in a really really high area of

385
00:14:59,320 --> 00:15:03,130
risk so when I'm looking at this you

386
00:15:01,720 --> 00:15:04,930
want to see all of the processes that

387
00:15:03,130 --> 00:15:06,279
are running on your buildings all of the

388
00:15:04,930 --> 00:15:08,969
network services that are going to be

389
00:15:06,279 --> 00:15:08,970
running on your building

390
00:15:09,009 --> 00:15:13,350
in this particular case I saw there was

391
00:15:11,620 --> 00:15:15,100
a debug service running a hi Paul

392
00:15:13,350 --> 00:15:17,709
fantastic

393
00:15:15,100 --> 00:15:20,470
I didn't quite know what it was so grab

394
00:15:17,709 --> 00:15:22,899
the binary and the they did the debug

395
00:15:20,470 --> 00:15:26,649
binaries kind of track replicated and a

396
00:15:22,899 --> 00:15:28,809
local system do some this seems to be

397
00:15:26,649 --> 00:15:31,540
simple enough on my local system I could

398
00:15:28,809 --> 00:15:33,490
use the e-book service to call our three

399
00:15:31,540 --> 00:15:35,769
functions within the within the debug

400
00:15:33,490 --> 00:15:37,680
binary so great but it didn't work in

401
00:15:35,769 --> 00:15:39,699
place it didn't work in the pipeline so

402
00:15:37,680 --> 00:15:42,519
off to get frustrated to get more

403
00:15:39,699 --> 00:15:43,899
frustrated and then figure out the way

404
00:15:42,519 --> 00:15:46,569
they would launching in the pipeline

405
00:15:43,899 --> 00:15:47,829
it had no interactive threads to run any

406
00:15:46,569 --> 00:15:52,479
of the any of the functions that

407
00:15:47,829 --> 00:15:53,739
normally you would be able to cool so

408
00:15:52,480 --> 00:15:55,480
kept kind of pokin it this is one of

409
00:15:53,740 --> 00:15:57,879
those things that kind of just doesn't

410
00:15:55,480 --> 00:15:59,139
feel right and and doesn't feel like you

411
00:15:57,879 --> 00:16:01,480
should have been able to or should have

412
00:15:59,139 --> 00:16:03,579
been accessible except so found out the

413
00:16:01,480 --> 00:16:06,899
debug it was was open source so if they

414
00:16:03,579 --> 00:16:09,758
get a source on on github and then found

415
00:16:06,899 --> 00:16:13,089
what I thought was semi vulnerability so

416
00:16:09,759 --> 00:16:15,009
it was an arbitrary memory read in a

417
00:16:13,089 --> 00:16:16,089
project that was actually debugger that

418
00:16:15,009 --> 00:16:20,319
should allow you remote code execution

419
00:16:16,089 --> 00:16:21,610
by default so it helped me in this case

420
00:16:20,319 --> 00:16:23,889
so it could actually dump all the

421
00:16:21,610 --> 00:16:26,350
process memory from a remote build

422
00:16:23,889 --> 00:16:27,730
instance and extract environment

423
00:16:26,350 --> 00:16:30,279
variables which included great things

424
00:16:27,730 --> 00:16:32,439
like usernames and API keys API

425
00:16:30,279 --> 00:16:36,339
endpoints so that was pretty cool

426
00:16:32,439 --> 00:16:39,670
I went to report this bug and it could

427
00:16:36,339 --> 00:16:42,399
not be reproduced i've always doing this

428
00:16:39,670 --> 00:16:44,469
20 minutes ago so I can do this I spin

429
00:16:42,399 --> 00:16:47,040
up my instance again and it happens

430
00:16:44,470 --> 00:16:49,269
again instantly I think what's going on

431
00:16:47,040 --> 00:16:50,319
fire it back to the the security team

432
00:16:49,269 --> 00:16:52,089
and they're like yeah no we cannot

433
00:16:50,319 --> 00:16:54,878
reproduce so I showed them my entire

434
00:16:52,089 --> 00:16:57,399
terminal output they sent me their

435
00:16:54,879 --> 00:16:59,709
thermal output and yeah we can see the

436
00:16:57,399 --> 00:17:01,990
bugs they're you doing it we can't

437
00:16:59,709 --> 00:17:03,819
reproduce it here and it turned out in

438
00:17:01,990 --> 00:17:05,559
one of their data centers in Northern

439
00:17:03,819 --> 00:17:07,869
America they had an implemented Network

440
00:17:05,559 --> 00:17:10,539
segregation in the other seven they had

441
00:17:07,869 --> 00:17:12,819
so I just managed to stumble on that one

442
00:17:10,539 --> 00:17:14,919
the one day Center where they hadn't got

443
00:17:12,819 --> 00:17:16,149
that particular segregation in place

444
00:17:14,919 --> 00:17:22,420
which

445
00:17:16,150 --> 00:17:24,069
pretty lucky for me but yeah so in the

446
00:17:22,420 --> 00:17:25,780
end they were able to implement their

447
00:17:24,069 --> 00:17:27,730
segregation that I think they also did

448
00:17:25,780 --> 00:17:28,990
host play segregation or host place

449
00:17:27,730 --> 00:17:30,430
locked down of a sport and no a

450
00:17:28,990 --> 00:17:34,680
segregation in that place Center which

451
00:17:30,430 --> 00:17:37,120
is pretty cool it's in terms of secret

452
00:17:34,680 --> 00:17:39,040
secret management in order to anything

453
00:17:37,120 --> 00:17:40,689
interesting a building's build instance

454
00:17:39,040 --> 00:17:43,780
is going to be have to going to have to

455
00:17:40,690 --> 00:17:45,580
access secret data so as I said the

456
00:17:43,780 --> 00:17:46,840
starkness could be source control

457
00:17:45,580 --> 00:17:48,220
management credentials it's gotta be

458
00:17:46,840 --> 00:17:50,559
able to clone this source unless it's

459
00:17:48,220 --> 00:17:52,000
given the source another way it's gonna

460
00:17:50,559 --> 00:17:54,600
want to deploy this source somewhere

461
00:17:52,000 --> 00:17:58,420
even whether it's an artifact factory or

462
00:17:54,600 --> 00:18:03,490
or to a server it's gonna work one

463
00:17:58,420 --> 00:18:05,380
report log files and success/failure of

464
00:18:03,490 --> 00:18:07,000
tests so in order to all of these things

465
00:18:05,380 --> 00:18:11,320
there's going to be some back in the

466
00:18:07,000 --> 00:18:12,940
api's excuse me or other systems that

467
00:18:11,320 --> 00:18:16,270
the the instance is going to have to

468
00:18:12,940 --> 00:18:18,070
access via a credential source so we

469
00:18:16,270 --> 00:18:20,500
want to look at how they're they're

470
00:18:18,070 --> 00:18:22,990
accessing secrets and how they're

471
00:18:20,500 --> 00:18:25,090
accessing these credentials installing

472
00:18:22,990 --> 00:18:27,610
these credentials so cody covered in his

473
00:18:25,090 --> 00:18:30,639
talk meditates services so if these are

474
00:18:27,610 --> 00:18:33,219
running in AWS you see if you can access

475
00:18:30,640 --> 00:18:35,950
the arduino Sandpoint container services

476
00:18:33,220 --> 00:18:37,360
also have their own meditates important

477
00:18:35,950 --> 00:18:40,090
so you could try and access docker

478
00:18:37,360 --> 00:18:42,219
endpoints already mentioned that sadaqa

479
00:18:40,090 --> 00:18:45,459
stop when looking at container break now

480
00:18:42,220 --> 00:18:49,980
or kubernetes backends virtual machine

481
00:18:45,460 --> 00:18:52,690
configured all cover on the next slide

482
00:18:49,980 --> 00:18:54,100
execution violence as well so there

483
00:18:52,690 --> 00:18:56,470
could be strong secrets in custom

484
00:18:54,100 --> 00:18:59,350
scripts so that could be on the network

485
00:18:56,470 --> 00:19:00,220
that could be on the system removed from

486
00:18:59,350 --> 00:19:02,050
the system before

487
00:19:00,220 --> 00:19:04,780
startup as i mentioned or it could just

488
00:19:02,050 --> 00:19:07,720
be locked down in a directory that you

489
00:19:04,780 --> 00:19:10,240
as it'll oprah blue previous you can't

490
00:19:07,720 --> 00:19:11,470
access they could just be some secrets

491
00:19:10,240 --> 00:19:14,350
and pretend process environment

492
00:19:11,470 --> 00:19:16,750
variables I've seen it in more than one

493
00:19:14,350 --> 00:19:20,500
case where they store API keys in a

494
00:19:16,750 --> 00:19:22,780
parent's process environment variables

495
00:19:20,500 --> 00:19:26,350
so in your running instance if you just

496
00:19:22,780 --> 00:19:28,330
run and it doesn't show you any any

497
00:19:26,350 --> 00:19:29,280
secrets but if you check the the

498
00:19:28,330 --> 00:19:31,290
environment of

499
00:19:29,280 --> 00:19:33,060
process you'll see the API keys that was

500
00:19:31,290 --> 00:19:35,670
quite a sneaky one but always worth

501
00:19:33,060 --> 00:19:38,399
checking the environment of every single

502
00:19:35,670 --> 00:19:41,670
running process that you can access and

503
00:19:38,400 --> 00:19:46,320
then internal API so had a great

504
00:19:41,670 --> 00:19:48,600
instance of a built a build pipeline

505
00:19:46,320 --> 00:19:50,310
that would access an internal API using

506
00:19:48,600 --> 00:19:56,040
a single set of credentials across the

507
00:19:50,310 --> 00:19:57,690
entire entire build pipeline and that

508
00:19:56,040 --> 00:20:00,330
API would then give you the crown jewels

509
00:19:57,690 --> 00:20:02,100
that you were supposed to have but you

510
00:20:00,330 --> 00:20:03,629
had the credentials to access the API so

511
00:20:02,100 --> 00:20:07,469
here anybodies credentials which they

512
00:20:03,630 --> 00:20:09,780
didn't really think that through what

513
00:20:07,470 --> 00:20:12,750
was the virtual machine metadata that

514
00:20:09,780 --> 00:20:13,700
really stuck out to me so I'm not seen

515
00:20:12,750 --> 00:20:18,030
this one before

516
00:20:13,700 --> 00:20:20,310
so VMware has this thing called guest

517
00:20:18,030 --> 00:20:22,639
info variables and I did a lot of

518
00:20:20,310 --> 00:20:25,889
googling on this and it's really satiric

519
00:20:22,640 --> 00:20:29,400
there's a few weird posts on there and a

520
00:20:25,890 --> 00:20:32,400
few very limited VMware help documents

521
00:20:29,400 --> 00:20:34,020
but this functionality is there so I saw

522
00:20:32,400 --> 00:20:36,330
a configuration script with the commands

523
00:20:34,020 --> 00:20:40,410
saying the metals diamond command in

524
00:20:36,330 --> 00:20:44,040
forget and then a guest info variable

525
00:20:40,410 --> 00:20:45,840
name and eventually worked out that

526
00:20:44,040 --> 00:20:49,700
these guests info variables were just

527
00:20:45,840 --> 00:20:52,980
set in the VM X configuration files as

528
00:20:49,700 --> 00:20:54,600
get info dot whatever you want and this

529
00:20:52,980 --> 00:20:56,610
would then be able to expose that value

530
00:20:54,600 --> 00:20:59,669
to the internal virtual machine via

531
00:20:56,610 --> 00:21:01,919
VMware tools I thought that's pretty

532
00:20:59,670 --> 00:21:07,530
good so we had this API URL try to

533
00:21:01,920 --> 00:21:09,240
access it credentials required so it's

534
00:21:07,530 --> 00:21:10,710
doing some more googling cannot for the

535
00:21:09,240 --> 00:21:13,740
life for me find a way to list all of

536
00:21:10,710 --> 00:21:16,680
these get info variables that are

537
00:21:13,740 --> 00:21:19,560
available to a machine so what I mean

538
00:21:16,680 --> 00:21:21,570
what do you do you script up a quick

539
00:21:19,560 --> 00:21:23,340
brute force with a word list I said

540
00:21:21,570 --> 00:21:25,110
quick brute force this is running you

541
00:21:23,340 --> 00:21:27,510
will take natively so you can brute

542
00:21:25,110 --> 00:21:29,250
force several million of these and in a

543
00:21:27,510 --> 00:21:30,860
couple of minutes ran through a massive

544
00:21:29,250 --> 00:21:32,360
word list

545
00:21:30,860 --> 00:21:33,799
and obviously probably could have

546
00:21:32,360 --> 00:21:36,559
guessed that without actually running

547
00:21:33,799 --> 00:21:38,899
through a worthless but the API user ID

548
00:21:36,559 --> 00:21:40,220
password came out and then I thought

549
00:21:38,899 --> 00:21:42,739
that was really cool that was one that I

550
00:21:40,220 --> 00:21:45,260
didn't know about before going into into

551
00:21:42,740 --> 00:21:47,630
this that that was available to VMware

552
00:21:45,260 --> 00:21:49,129
virtual machine guests to store

553
00:21:47,630 --> 00:21:51,080
obviously shouldn't be storing

554
00:21:49,130 --> 00:21:57,019
credentials there but destroying some

555
00:21:51,080 --> 00:21:59,269
information looking at reporting as I

556
00:21:57,019 --> 00:22:01,640
say buildin sis is gonna want to report

557
00:21:59,269 --> 00:22:03,139
the build looks it's all very well

558
00:22:01,640 --> 00:22:04,460
saying bill failed but you'll know where

559
00:22:03,139 --> 00:22:06,590
it failed why it failed what the error

560
00:22:04,460 --> 00:22:10,010
message was so somewhere there's gonna

561
00:22:06,590 --> 00:22:12,649
be an accessible build log you might be

562
00:22:10,010 --> 00:22:14,570
up set up web server looks so you want

563
00:22:12,649 --> 00:22:16,610
you and you want to know beeping for a

564
00:22:14,570 --> 00:22:17,870
web hook if your build fails and then

565
00:22:16,610 --> 00:22:20,209
somebody can go and investigate it will

566
00:22:17,870 --> 00:22:21,768
slack or something like that

567
00:22:20,210 --> 00:22:24,909
as an aside there's some really good

568
00:22:21,769 --> 00:22:27,710
research into CRC pipeline bill blogs

569
00:22:24,909 --> 00:22:29,659
done by Justin Gardner covering their

570
00:22:27,710 --> 00:22:32,389
head overflow if you've not seen that

571
00:22:29,659 --> 00:22:34,880
blog post check it out some really cool

572
00:22:32,389 --> 00:22:37,129
stuff going on there one of the kind of

573
00:22:34,880 --> 00:22:38,750
more subtle points that is drowned out a

574
00:22:37,130 --> 00:22:42,440
little bit is they were also checking

575
00:22:38,750 --> 00:22:44,149
for third-party packages that didn't

576
00:22:42,440 --> 00:22:46,039
exist so they're looking for NPM

577
00:22:44,149 --> 00:22:48,260
packages that were being pulled into a

578
00:22:46,039 --> 00:22:50,059
build that didn't exist so then they

579
00:22:48,260 --> 00:22:52,279
could in theory go and register them and

580
00:22:50,059 --> 00:22:53,418
gain code execution in somebody else's

581
00:22:52,279 --> 00:22:57,200
build which I thought was really cool

582
00:22:53,419 --> 00:22:59,360
but it kind of stuck as a as a as an

583
00:22:57,200 --> 00:23:03,980
aside note at the at the end of all of

584
00:22:59,360 --> 00:23:05,629
that research so just as cody has

585
00:23:03,980 --> 00:23:06,769
written himself a really cool dns

586
00:23:05,630 --> 00:23:08,630
summation should be server I've done

587
00:23:06,769 --> 00:23:09,889
exactly the same thing this has been

588
00:23:08,630 --> 00:23:12,409
used in the making there and it's still

589
00:23:09,889 --> 00:23:15,918
really badly documented so my tooling

590
00:23:12,409 --> 00:23:17,600
that I use for anything SS RF is called

591
00:23:15,919 --> 00:23:20,419
research service again available on

592
00:23:17,600 --> 00:23:22,219
github and it allows me to very quickly

593
00:23:20,419 --> 00:23:25,760
create custom a she's freezing

594
00:23:22,220 --> 00:23:27,889
servers through loads of stuff I'm

595
00:23:25,760 --> 00:23:30,519
running very close to time so I'll run

596
00:23:27,889 --> 00:23:33,350
through this very quickly looking at a

597
00:23:30,519 --> 00:23:36,500
vulnerable web hook that I found so this

598
00:23:33,350 --> 00:23:38,949
was some Ruby code it gets the URI

599
00:23:36,500 --> 00:23:41,899
hostname address make sure it's not in

600
00:23:38,950 --> 00:23:44,509
sorry so in this instance resolves to

601
00:23:41,899 --> 00:23:46,549
eight eight eight checks is not low

602
00:23:44,509 --> 00:23:52,039
I salute back local metaphor link local

603
00:23:46,549 --> 00:23:55,190
and then request the URI worms if the

604
00:23:52,039 --> 00:23:57,679
DNS changes between those two checks so

605
00:23:55,190 --> 00:23:59,329
this is one area we using classic DNS

606
00:23:57,679 --> 00:24:01,429
rebinding this is actually Ruby which

607
00:23:59,329 --> 00:24:03,379
doesn't have it in thei NS cache and you

608
00:24:01,429 --> 00:24:06,139
could set the TTL to zero so didn't need

609
00:24:03,379 --> 00:24:08,509
to do any any cool stuff but that was

610
00:24:06,139 --> 00:24:13,309
that was quite a fun one I found in a

611
00:24:08,509 --> 00:24:14,359
major CICS pipeline and finally the last

612
00:24:13,309 --> 00:24:16,999
stage you're gonna be looking at is

613
00:24:14,359 --> 00:24:19,759
deployment so how artifacts stored where

614
00:24:16,999 --> 00:24:21,559
are they stored of a namespace correctly

615
00:24:19,759 --> 00:24:22,459
are you allowed to place artifacts into

616
00:24:21,559 --> 00:24:24,529
different namespaces

617
00:24:22,459 --> 00:24:26,569
well they access controlled more often

618
00:24:24,529 --> 00:24:28,219
than not from a CD pipeline you can

619
00:24:26,569 --> 00:24:32,408
access all of the artifacts from within

620
00:24:28,219 --> 00:24:34,429
the build instance and then how are

621
00:24:32,409 --> 00:24:37,759
builds actually deployed so how other

622
00:24:34,429 --> 00:24:40,069
keys for a build managed I don't have

623
00:24:37,759 --> 00:24:41,809
any examples that and I am running out

624
00:24:40,069 --> 00:24:44,089
of time so I'll finish on the summary

625
00:24:41,809 --> 00:24:46,339
that's my methodology they're looking

626
00:24:44,089 --> 00:24:47,809
the definition execution health secrets

627
00:24:46,339 --> 00:24:49,729
are handled how reporting is handled and

628
00:24:47,809 --> 00:24:52,399
how deployment is handled these are very

629
00:24:49,729 --> 00:24:55,819
complex systems there are bugs plenty to

630
00:24:52,399 --> 00:24:58,369
be found in them I'm Alex Sherman I'm a

631
00:24:55,819 --> 00:25:01,959
gentleman on Twitter Email Pak Iwan

632
00:24:58,369 --> 00:25:05,120
github LinkedIn probably other places

633
00:25:01,959 --> 00:25:08,250
Thank You 44 Khan and thank you hack on

634
00:25:05,120 --> 00:25:08,250
[Applause]

