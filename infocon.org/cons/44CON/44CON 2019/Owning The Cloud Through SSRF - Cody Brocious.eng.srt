1
00:00:02,420 --> 00:00:09,800
see all right so today I may be talking

2
00:00:06,649 --> 00:00:12,680
about SS RF server side request forgery

3
00:00:09,800 --> 00:00:15,350
vulnerabilities and some very fun things

4
00:00:12,680 --> 00:00:16,820
that you can do with this this is as you

5
00:00:15,350 --> 00:00:18,800
may notice there are two names on there

6
00:00:16,820 --> 00:00:21,460
and only one person up here this is a

7
00:00:18,800 --> 00:00:26,300
talk that I did with my coworker and

8
00:00:21,460 --> 00:00:29,179
collaborator Benson T Kapoor but I'm

9
00:00:26,300 --> 00:00:32,060
going to go through it just just myself

10
00:00:29,179 --> 00:00:35,239
for this one so just a quick

11
00:00:32,060 --> 00:00:37,100
introduction to who we and especially me

12
00:00:35,239 --> 00:00:40,309
are in this case I head up hacker

13
00:00:37,100 --> 00:00:42,649
education at hacker 1 so if you've seen

14
00:00:40,309 --> 00:00:44,690
the site hacker 101 where anyone can

15
00:00:42,649 --> 00:00:46,519
learn everything from the basics of web

16
00:00:44,690 --> 00:00:48,949
hacking up through mobile and native

17
00:00:46,519 --> 00:00:51,440
hacking reverse engineering that's my

18
00:00:48,949 --> 00:00:53,210
baby I worked on hacking hotel locks

19
00:00:51,440 --> 00:00:55,010
released that back in black hat packed

20
00:00:53,210 --> 00:00:58,309
between 4 and 10 million hotel logs

21
00:00:55,010 --> 00:01:00,170
hacked a Nintendo switch iTunes couple

22
00:00:58,309 --> 00:01:05,360
other things and you can find me on

23
00:01:00,170 --> 00:01:08,450
twitter at at Dakin so just jump right

24
00:01:05,360 --> 00:01:09,860
in what what is SS r f so SS r f is

25
00:01:08,450 --> 00:01:12,409
server side request forgery and

26
00:01:09,860 --> 00:01:15,590
essentially what that means is you're

27
00:01:12,409 --> 00:01:19,700
telling the server okay I want to fetch

28
00:01:15,590 --> 00:01:22,640
this resource from somewhere you give it

29
00:01:19,700 --> 00:01:25,369
a URL it goes out grabs that it might

30
00:01:22,640 --> 00:01:27,500
process it and show you nothing it might

31
00:01:25,369 --> 00:01:29,420
grab it and then show you exactly what

32
00:01:27,500 --> 00:01:32,290
you just told it to grab any number of

33
00:01:29,420 --> 00:01:35,270
things in the simplest cases these are

34
00:01:32,290 --> 00:01:38,090
just absolutely trivial bugs to exploit

35
00:01:35,270 --> 00:01:40,369
you know you you might just give it a

36
00:01:38,090 --> 00:01:42,200
URL it'll go oh great I got that data

37
00:01:40,369 --> 00:01:43,939
here's the data that I got here's

38
00:01:42,200 --> 00:01:46,159
everything you need to know about it and

39
00:01:43,939 --> 00:01:47,809
then you can access any internal

40
00:01:46,159 --> 00:01:50,570
services that are on its network whether

41
00:01:47,810 --> 00:01:53,560
that's you know a lot of no sequel

42
00:01:50,570 --> 00:01:55,788
databases expose themselves over HTTP

43
00:01:53,560 --> 00:01:58,359
internal services that you may want to

44
00:01:55,789 --> 00:02:00,740
hit that are custom to a company

45
00:01:58,359 --> 00:02:02,899
metadata services we're gonna be talking

46
00:02:00,740 --> 00:02:06,020
a lot about those those are all things

47
00:02:02,899 --> 00:02:08,750
that you can hit with this RF so

48
00:02:06,020 --> 00:02:10,959
basically the TLDR is your gonna make a

49
00:02:08,750 --> 00:02:13,879
request to some target and in some cases

50
00:02:10,959 --> 00:02:15,230
the ones that are most fun and we're

51
00:02:13,879 --> 00:02:17,569
going to talk about how that

52
00:02:15,230 --> 00:02:20,810
happens well actually have JavaScript

53
00:02:17,569 --> 00:02:25,488
just executing on a server and usually

54
00:02:20,810 --> 00:02:26,930
not a confined enough way so cloud

55
00:02:25,489 --> 00:02:29,569
metadata is something that we're gonna

56
00:02:26,930 --> 00:02:31,280
be talking about a lot typically what

57
00:02:29,569 --> 00:02:33,379
it's going to be is some service that's

58
00:02:31,280 --> 00:02:35,269
at one sixty nine to five four one six

59
00:02:33,379 --> 00:02:37,518
nine to five four that's what it is for

60
00:02:35,269 --> 00:02:40,730
Google Google Cloud that's what it is

61
00:02:37,519 --> 00:02:42,829
for Amazon ec2 and ECS that's it is for

62
00:02:40,730 --> 00:02:45,379
as you're pretty much all of them just

63
00:02:42,829 --> 00:02:48,440
use the same IP and it just sits there

64
00:02:45,379 --> 00:02:50,298
listening on plain HTTP and it'll

65
00:02:48,440 --> 00:02:52,790
provide you know innocuous things like

66
00:02:50,299 --> 00:02:55,190
what the name of the project is what the

67
00:02:52,790 --> 00:02:57,379
host name of the server is things like

68
00:02:55,190 --> 00:03:01,069
that it also provides slightly less

69
00:02:57,379 --> 00:03:04,399
innocuous things like SSH keys or AWS

70
00:03:01,069 --> 00:03:06,048
access keys and secret keys pretty much

71
00:03:04,400 --> 00:03:08,840
anything that you need to own the

72
00:03:06,049 --> 00:03:11,569
project entirely can come straight from

73
00:03:08,840 --> 00:03:12,859
the metadata service or you can push

74
00:03:11,569 --> 00:03:14,929
data up to it there's a lot of stuff

75
00:03:12,859 --> 00:03:18,650
that you can do with it that's fun but

76
00:03:14,930 --> 00:03:21,470
that's that's basically that in 2019 if

77
00:03:18,650 --> 00:03:23,090
you're able to hit that IP from that

78
00:03:21,470 --> 00:03:25,310
side you know you're able to hit it from

79
00:03:23,090 --> 00:03:27,319
the context of that server it's game

80
00:03:25,310 --> 00:03:35,060
over like there's just no no way around

81
00:03:27,319 --> 00:03:36,349
it so a basic example here would be you

82
00:03:35,060 --> 00:03:40,669
know let's say you can upload an avatar

83
00:03:36,349 --> 00:03:44,298
to a site you tell it to go fetch fetch

84
00:03:40,669 --> 00:03:46,130
this URL you give it you know whatever

85
00:03:44,299 --> 00:03:48,109
site that you're gonna hit and if you

86
00:03:46,130 --> 00:03:50,780
change that URL parameter to something

87
00:03:48,109 --> 00:03:54,380
internal it may go get that pull it down

88
00:03:50,780 --> 00:03:56,989
as an image and and just render that

89
00:03:54,380 --> 00:03:59,540
straight to the browser what's fun about

90
00:03:56,989 --> 00:04:01,819
a lot of those cases is that you're not

91
00:03:59,540 --> 00:04:04,328
just limited to hitting HTTP you might

92
00:04:01,819 --> 00:04:07,458
be able to open up files and just read

93
00:04:04,329 --> 00:04:10,549
arbitrary files off the disk you may be

94
00:04:07,459 --> 00:04:12,829
able to make it you know make requests

95
00:04:10,549 --> 00:04:15,650
on other protocols like making FTP

96
00:04:12,829 --> 00:04:19,190
connections or HTTP and automatically

97
00:04:15,650 --> 00:04:22,789
passing passing credentials things like

98
00:04:19,190 --> 00:04:25,880
that those are there are a lot of

99
00:04:22,789 --> 00:04:27,260
interesting routes there but for this

100
00:04:25,880 --> 00:04:28,820
one we're going to talk primarily about

101
00:04:27,260 --> 00:04:30,050
HTTP

102
00:04:28,820 --> 00:04:31,670
just because a lot of the other ones

103
00:04:30,050 --> 00:04:39,890
have been kind of well trot over the

104
00:04:31,670 --> 00:04:42,500
last 20 years there we go so there are

105
00:04:39,890 --> 00:04:45,320
two quick CDs that that I'd like to talk

106
00:04:42,500 --> 00:04:47,960
about so one was a JIRA bug back in 2017

107
00:04:45,320 --> 00:04:50,090
that if you find JIRA instances that you

108
00:04:47,960 --> 00:04:51,530
can hit today there's still a pretty

109
00:04:50,090 --> 00:04:54,260
damn good chance that you're actually

110
00:04:51,530 --> 00:04:56,359
gonna find this bug which is mildly

111
00:04:54,260 --> 00:04:59,000
terrifying and it works basically like

112
00:04:56,360 --> 00:05:03,440
that trivial example where you just give

113
00:04:59,000 --> 00:05:06,770
it a an icon URI and just say consumer

114
00:05:03,440 --> 00:05:09,590
uri equals Google and it just hands you

115
00:05:06,770 --> 00:05:11,900
back whatever the hell it gets it's

116
00:05:09,590 --> 00:05:15,710
absolutely trivial and it's something

117
00:05:11,900 --> 00:05:17,270
you'll still see today so here you can

118
00:05:15,710 --> 00:05:23,450
see pulling from the metadata Service

119
00:05:17,270 --> 00:05:28,010
169 254 etc and same thing with Jenkins

120
00:05:23,450 --> 00:05:30,469
Jenkins last year had a fairly close bug

121
00:05:28,010 --> 00:05:32,810
where you could go and pull any of the

122
00:05:30,470 --> 00:05:35,990
metadata services any URL you could just

123
00:05:32,810 --> 00:05:37,640
make a request you did you could only

124
00:05:35,990 --> 00:05:41,570
make get requests which limits you in

125
00:05:37,640 --> 00:05:44,210
certain capacities but at the end of the

126
00:05:41,570 --> 00:05:46,460
day for the vast majority of Jenkins

127
00:05:44,210 --> 00:05:50,270
installations this was an absolute game

128
00:05:46,460 --> 00:05:52,310
over packing up go home situation and

129
00:05:50,270 --> 00:05:56,900
again it's another one that you can

130
00:05:52,310 --> 00:05:58,430
still find out there way too often so

131
00:05:56,900 --> 00:06:00,590
what we've talked about so far the

132
00:05:58,430 --> 00:06:02,870
trivial SSR eff like these are a single

133
00:06:00,590 --> 00:06:05,810
HTTP request they just hand you the data

134
00:06:02,870 --> 00:06:07,340
maybe it's not everything maybe they're

135
00:06:05,810 --> 00:06:10,030
parsing out certain bits of it or

136
00:06:07,340 --> 00:06:13,510
whatever but usually those are pretty

137
00:06:10,030 --> 00:06:15,799
those are pretty straightforward but

138
00:06:13,510 --> 00:06:17,090
those aren't the really interesting ones

139
00:06:15,800 --> 00:06:17,990
and those are things that people have

140
00:06:17,090 --> 00:06:20,659
talked about a lot is they're

141
00:06:17,990 --> 00:06:22,250
straightforward ones but there are a lot

142
00:06:20,660 --> 00:06:26,420
of options for the less straightforward

143
00:06:22,250 --> 00:06:28,640
ones so for instance one of the major

144
00:06:26,420 --> 00:06:30,260
problems is that metadata or internal

145
00:06:28,640 --> 00:06:35,419
IPs get filtered like it just won't take

146
00:06:30,260 --> 00:06:38,419
an IP conveniently if you just do a WS

147
00:06:35,420 --> 00:06:40,340
MD SS RF test comm it resolves to the

148
00:06:38,419 --> 00:06:42,180
exact same IP and if they're not

149
00:06:40,340 --> 00:06:44,909
actually resolving what the hostname

150
00:06:42,180 --> 00:06:48,360
that you're accessing you just get right

151
00:06:44,910 --> 00:06:50,250
in if you can only use white listed

152
00:06:48,360 --> 00:06:53,070
domains you have the option to find an

153
00:06:50,250 --> 00:06:54,680
open redirect on there and redirect to

154
00:06:53,070 --> 00:06:58,980
those metadata services or other

155
00:06:54,680 --> 00:07:00,750
internal services if the SS RF is there

156
00:06:58,980 --> 00:07:02,220
but you can't see the output in any

157
00:07:00,750 --> 00:07:04,260
capacity you have a couple different

158
00:07:02,220 --> 00:07:06,120
routes one of the easiest is to use

159
00:07:04,260 --> 00:07:07,950
JavaScript and exfiltrate the data and

160
00:07:06,120 --> 00:07:10,590
you'll see why javascript would run in

161
00:07:07,950 --> 00:07:13,710
this context at all in just a moment

162
00:07:10,590 --> 00:07:15,830
another option that you have is almost a

163
00:07:13,710 --> 00:07:18,030
neck sexy style where you're chaining

164
00:07:15,830 --> 00:07:19,620
requests together so that it's making a

165
00:07:18,030 --> 00:07:22,109
request to one server and then handing

166
00:07:19,620 --> 00:07:23,730
the data off to another those get a

167
00:07:22,110 --> 00:07:25,200
little messy but they do pop up from

168
00:07:23,730 --> 00:07:27,330
time to time and I can show you some

169
00:07:25,200 --> 00:07:33,539
examples after the talk if you're

170
00:07:27,330 --> 00:07:35,640
curious so one of the things that I've

171
00:07:33,540 --> 00:07:39,870
been looking at for the last year and

172
00:07:35,640 --> 00:07:44,849
what actually spawned this talk was XSS

173
00:07:39,870 --> 00:07:46,560
leading to SSR F so you know if you if

174
00:07:44,850 --> 00:07:48,450
you have things like PDF generators

175
00:07:46,560 --> 00:07:52,230
which we're going to talk about in much

176
00:07:48,450 --> 00:07:54,120
greater detail here oftentimes they're

177
00:07:52,230 --> 00:07:56,250
just taking HTML and converting it over

178
00:07:54,120 --> 00:07:59,220
to a PDF which happens in a couple

179
00:07:56,250 --> 00:08:01,020
different ways but often times you can

180
00:07:59,220 --> 00:08:04,590
just get straight JavaScript executing

181
00:08:01,020 --> 00:08:08,070
in the context of a server via that you

182
00:08:04,590 --> 00:08:10,710
also can have a number of redirection

183
00:08:08,070 --> 00:08:13,710
style bugs where it's attempting to go

184
00:08:10,710 --> 00:08:16,080
fetch fetch a certain page to render to

185
00:08:13,710 --> 00:08:21,359
a PDF you can redirect it over to one of

186
00:08:16,080 --> 00:08:24,599
those metadata pages things like that so

187
00:08:21,360 --> 00:08:27,300
PDF generation is really interesting in

188
00:08:24,600 --> 00:08:29,070
the context of SSR F because it just

189
00:08:27,300 --> 00:08:31,850
gives you so much power as an attacker

190
00:08:29,070 --> 00:08:34,110
there's so many fun ways that it breaks

191
00:08:31,850 --> 00:08:36,480
so one of the routes is headless

192
00:08:34,110 --> 00:08:38,190
browsers these are exactly what they

193
00:08:36,480 --> 00:08:40,680
sound like so you have things like WK

194
00:08:38,190 --> 00:08:42,780
HTML to PDF which is literally just

195
00:08:40,679 --> 00:08:45,599
WebKit where instead of rendering to the

196
00:08:42,780 --> 00:08:48,560
screen you know using 3d acceleration

197
00:08:45,600 --> 00:08:50,790
and all that it renders to a PDF

198
00:08:48,560 --> 00:08:54,199
headless Chrome is literally just

199
00:08:50,790 --> 00:08:56,209
desktop Chrome - the GUI

200
00:08:54,200 --> 00:08:58,700
instead of instead of their back-end

201
00:08:56,210 --> 00:09:02,270
rendering to the hardware it renders to

202
00:08:58,700 --> 00:09:04,970
a PDF or an image headless chrome is

203
00:09:02,270 --> 00:09:08,960
sandbox has all the same protections the

204
00:09:04,970 --> 00:09:11,380
standard desktop chrome house it is very

205
00:09:08,960 --> 00:09:14,360
hard to break

206
00:09:11,380 --> 00:09:16,930
except when you're generating PDFs there

207
00:09:14,360 --> 00:09:18,950
are some really interesting things there

208
00:09:16,930 --> 00:09:20,030
and what's really what's really

209
00:09:18,950 --> 00:09:21,560
convenient about these for the

210
00:09:20,030 --> 00:09:23,810
developers is there there are wrappers

211
00:09:21,560 --> 00:09:25,760
for all of this like you can no matter

212
00:09:23,810 --> 00:09:28,819
what language you're using you're gonna

213
00:09:25,760 --> 00:09:30,950
get a simple integration here and be

214
00:09:28,820 --> 00:09:36,110
able to be able to implement this in

215
00:09:30,950 --> 00:09:38,360
your in your application in minutes the

216
00:09:36,110 --> 00:09:39,980
other option for doing PDF generation

217
00:09:38,360 --> 00:09:42,140
these days because nobody wants to

218
00:09:39,980 --> 00:09:44,260
generate PDFs directly it's hard you

219
00:09:42,140 --> 00:09:46,520
have to duplicate all of your style work

220
00:09:44,260 --> 00:09:48,560
you know you're gonna end up creating

221
00:09:46,520 --> 00:09:51,949
entirely new templates just to create

222
00:09:48,560 --> 00:09:54,469
PDFs rather than using the HTML and CSS

223
00:09:51,950 --> 00:09:56,870
that you've already generated so one of

224
00:09:54,470 --> 00:10:00,530
the other options here is to use an HTML

225
00:09:56,870 --> 00:10:01,460
renderer things like wheezy print are

226
00:10:00,530 --> 00:10:04,189
common ones

227
00:10:01,460 --> 00:10:06,590
that's a Python library that just

228
00:10:04,190 --> 00:10:10,070
literally parses in HTML and some basic

229
00:10:06,590 --> 00:10:14,420
CSS does the layout stuff and then spits

230
00:10:10,070 --> 00:10:15,800
out a PDF what sucks about this from an

231
00:10:14,420 --> 00:10:18,680
attacker perspective is that it's very

232
00:10:15,800 --> 00:10:21,020
limited you have no JavaScript you don't

233
00:10:18,680 --> 00:10:23,030
have real CSS there's not a whole lot of

234
00:10:21,020 --> 00:10:25,910
magic that you can do there only certain

235
00:10:23,030 --> 00:10:28,280
tags are gonna be supported these work

236
00:10:25,910 --> 00:10:29,510
well for doing simple you know invoices

237
00:10:28,280 --> 00:10:32,689
and other things like that in

238
00:10:29,510 --> 00:10:34,760
applications but they're very limited

239
00:10:32,690 --> 00:10:42,080
and they they make it a problem for

240
00:10:34,760 --> 00:10:43,790
attackers so as I said most of the time

241
00:10:42,080 --> 00:10:45,860
you're not generating PDFs directly it

242
00:10:43,790 --> 00:10:49,670
does happen I would say about 1/8 of the

243
00:10:45,860 --> 00:10:50,660
time in the applications that I test but

244
00:10:49,670 --> 00:10:52,760
most of the time you're just spinning

245
00:10:50,660 --> 00:10:55,640
out HTML and what's great about that is

246
00:10:52,760 --> 00:10:58,250
that if you have XSS into that HTML if

247
00:10:55,640 --> 00:11:00,290
you're able to get any kind of any kind

248
00:10:58,250 --> 00:11:02,030
of script tag or an iframe in there

249
00:11:00,290 --> 00:11:04,160
things like that

250
00:11:02,030 --> 00:11:07,579
you're not running on the client you're

251
00:11:04,160 --> 00:11:10,310
running on the server you are running

252
00:11:07,580 --> 00:11:12,940
there where you can do whatever the

253
00:11:10,310 --> 00:11:15,079
browser is able to do in their world

254
00:11:12,940 --> 00:11:19,280
you're able to control it from their

255
00:11:15,080 --> 00:11:22,040
side how you actually go about attacking

256
00:11:19,280 --> 00:11:24,199
that is gonna depend on what that what

257
00:11:22,040 --> 00:11:29,530
that category of attack is either that

258
00:11:24,200 --> 00:11:33,020
is headless browser to HTML renders so

259
00:11:29,530 --> 00:11:37,130
you notice that you have HTML rendering

260
00:11:33,020 --> 00:11:39,650
you know inside of a inside of a PDF how

261
00:11:37,130 --> 00:11:41,750
do we actually see that it's doing

262
00:11:39,650 --> 00:11:43,939
something with that so we can actually

263
00:11:41,750 --> 00:11:46,400
just usually put in an iframe or even an

264
00:11:43,940 --> 00:11:49,280
image source point it to some host that

265
00:11:46,400 --> 00:11:50,660
you control and if you just run neck hat

266
00:11:49,280 --> 00:11:53,270
on there you'll see a connection where

267
00:11:50,660 --> 00:11:56,390
it just handily tells you wk HTML Linux

268
00:11:53,270 --> 00:11:58,460
amd64 and then you know exactly what

269
00:11:56,390 --> 00:12:03,610
what engine you're up against you can

270
00:11:58,460 --> 00:12:06,800
figure out what your what your target is

271
00:12:03,610 --> 00:12:09,200
and if you go ahead and you just throw

272
00:12:06,800 --> 00:12:11,900
in that user data endpoint for Amazon

273
00:12:09,200 --> 00:12:13,280
AWS once you've seen you know where it's

274
00:12:11,900 --> 00:12:15,470
coming from you're gonna know exactly

275
00:12:13,280 --> 00:12:17,240
what it's hosted on and all that you're

276
00:12:15,470 --> 00:12:19,760
just gonna get it to spit out the access

277
00:12:17,240 --> 00:12:21,589
key ID and the secret access key if they

278
00:12:19,760 --> 00:12:24,740
haven't set their permissions perfectly

279
00:12:21,589 --> 00:12:27,110
in AWS this will allow you to spin up

280
00:12:24,740 --> 00:12:30,110
instances access any of the instances

281
00:12:27,110 --> 00:12:32,300
access all their data stores and s3 all

282
00:12:30,110 --> 00:12:35,120
that stuff just using this data that's

283
00:12:32,300 --> 00:12:39,890
dumped out from that iframe and it just

284
00:12:35,120 --> 00:12:41,839
goes right into your PDF so that that's

285
00:12:39,890 --> 00:12:43,310
the trivial case and that's what you

286
00:12:41,839 --> 00:12:45,410
always hope for you hope that it's just

287
00:12:43,310 --> 00:12:49,609
gonna be that one and done putting the

288
00:12:45,410 --> 00:12:52,160
iframe it loads perfect unfortunately

289
00:12:49,610 --> 00:12:53,690
that's not how that tends to go or

290
00:12:52,160 --> 00:12:55,870
fortunately because I like this I like

291
00:12:53,690 --> 00:12:57,860
the challenge

292
00:12:55,870 --> 00:12:59,630
headless Chrome as I said is just

293
00:12:57,860 --> 00:13:01,880
desktop Chrome with a different

294
00:12:59,630 --> 00:13:03,680
rendering back-end and that means that

295
00:13:01,880 --> 00:13:05,450
you have to worry about things like same

296
00:13:03,680 --> 00:13:08,030
origin policy you have to worry about

297
00:13:05,450 --> 00:13:10,760
the fact that if you load an iframe in

298
00:13:08,030 --> 00:13:13,490
it it's not going to load a plain text

299
00:13:10,760 --> 00:13:14,750
HTTP resource if it's loading an H if

300
00:13:13,490 --> 00:13:18,080
it's loading from an h2

301
00:13:14,750 --> 00:13:20,210
GPS context which is often what happens

302
00:13:18,080 --> 00:13:23,360
with you know invoice applications and

303
00:13:20,210 --> 00:13:25,250
things like that if you do a redirect it

304
00:13:23,360 --> 00:13:26,840
sees oh I finished loading the first

305
00:13:25,250 --> 00:13:29,660
page I'm gonna kill it and render that

306
00:13:26,840 --> 00:13:33,290
so you can't redirect off to you know

307
00:13:29,660 --> 00:13:35,209
just a different page that's there so

308
00:13:33,290 --> 00:13:36,740
this kind of makes it so you're you're

309
00:13:35,210 --> 00:13:38,270
trying to exploit it much like you would

310
00:13:36,740 --> 00:13:40,760
you know if you were accessing

311
00:13:38,270 --> 00:13:43,490
somebody's router from their browser you

312
00:13:40,760 --> 00:13:45,140
know via XSS there's just not not a

313
00:13:43,490 --> 00:13:47,840
whole lot that you can do with it

314
00:13:45,140 --> 00:13:49,939
because it's it's a browser in browsers

315
00:13:47,840 --> 00:13:51,800
well Google puts a lot of money into

316
00:13:49,940 --> 00:13:57,170
making sure that that's that stuff isn't

317
00:13:51,800 --> 00:14:01,040
easy one of the things to point out is

318
00:13:57,170 --> 00:14:03,020
you know if you have if let's say you

319
00:14:01,040 --> 00:14:04,640
have an application that takes in some

320
00:14:03,020 --> 00:14:08,510
Styles you're able to theme these

321
00:14:04,640 --> 00:14:10,370
invoices was the actual case here in

322
00:14:08,510 --> 00:14:11,840
this case we were able to escape the

323
00:14:10,370 --> 00:14:15,590
style tag because we were able to

324
00:14:11,840 --> 00:14:19,330
control I believe it was the the font

325
00:14:15,590 --> 00:14:22,880
color or the font style so just using

326
00:14:19,330 --> 00:14:24,620
Helvetica closing tag style was able to

327
00:14:22,880 --> 00:14:27,650
actually break the PDF and get us in

328
00:14:24,620 --> 00:14:31,820
there so we had XSS slide is slightly

329
00:14:27,650 --> 00:14:34,060
out of order there so in this case we

330
00:14:31,820 --> 00:14:37,490
confirm that it renders HTML in there

331
00:14:34,060 --> 00:14:40,400
and we see that that it's making a

332
00:14:37,490 --> 00:14:43,160
request to our site using Java it's

333
00:14:40,400 --> 00:14:45,620
fetching this image from our from our

334
00:14:43,160 --> 00:14:49,459
domain so what actually what actually

335
00:14:45,620 --> 00:14:51,320
happens here well in this case we just

336
00:14:49,460 --> 00:14:54,320
replaced that with closing tag style

337
00:14:51,320 --> 00:14:56,360
iframe source user data we get those

338
00:14:54,320 --> 00:15:00,530
secret access keys so that's that's

339
00:14:56,360 --> 00:15:03,140
again that trivial case now easy print

340
00:15:00,530 --> 00:15:04,670
was a fun one Weezy print was one we

341
00:15:03,140 --> 00:15:08,030
actually were hacking a ride share app

342
00:15:04,670 --> 00:15:11,300
where at the end of the ride you could

343
00:15:08,030 --> 00:15:13,459
put in a reason for an expense so if you

344
00:15:11,300 --> 00:15:16,550
were using it in a commercial context

345
00:15:13,460 --> 00:15:17,930
you can put in what the what the reason

346
00:15:16,550 --> 00:15:21,560
for that ride was so you could expense

347
00:15:17,930 --> 00:15:22,760
it through your company so we noticed

348
00:15:21,560 --> 00:15:25,819
that there was cross-site scripting in

349
00:15:22,760 --> 00:15:27,740
here into a PDF we had no idea what we

350
00:15:25,820 --> 00:15:29,150
were doing it was entirely through a

351
00:15:27,740 --> 00:15:30,860
mobile app and we had to take a ride

352
00:15:29,150 --> 00:15:32,810
share every single time we wanted to

353
00:15:30,860 --> 00:15:35,030
test this thing so for every single

354
00:15:32,810 --> 00:15:38,239
payload that we wanted to do we had to

355
00:15:35,030 --> 00:15:40,459
actually take a ride I think our total

356
00:15:38,240 --> 00:15:41,810
was something like 13 throughout New

357
00:15:40,459 --> 00:15:48,079
York City over the course of a couple

358
00:15:41,810 --> 00:15:50,119
days well this one this one actually did

359
00:15:48,080 --> 00:15:53,360
take a while though like it was it was a

360
00:15:50,120 --> 00:15:55,370
couple days in New York but this was I

361
00:15:53,360 --> 00:15:57,440
think three months after the bug was

362
00:15:55,370 --> 00:15:59,839
actually first discovered my my

363
00:15:57,440 --> 00:16:01,130
colleague found the bug had no idea what

364
00:15:59,839 --> 00:16:02,810
to do with it but knew that there was

365
00:16:01,130 --> 00:16:05,480
something there like he just had that

366
00:16:02,810 --> 00:16:09,079
that spidey sense of I know that I can

367
00:16:05,480 --> 00:16:11,540
do something um but once we were in

368
00:16:09,080 --> 00:16:13,070
there like we couldn't run any scripts

369
00:16:11,540 --> 00:16:14,540
we couldn't get any frames they just

370
00:16:13,070 --> 00:16:17,900
showed up you know almost like a

371
00:16:14,540 --> 00:16:20,180
Netscape broken image type thing it

372
00:16:17,900 --> 00:16:22,069
would load images but that was it unless

373
00:16:20,180 --> 00:16:24,979
it was a valid image it was screwed and

374
00:16:22,070 --> 00:16:30,709
as I said every single payload was a

375
00:16:24,980 --> 00:16:32,480
rideshare got expensive quick but once

376
00:16:30,709 --> 00:16:34,640
we got this actually working we got it

377
00:16:32,480 --> 00:16:36,589
to talk to a server and just request an

378
00:16:34,640 --> 00:16:38,660
image it's all we cared about was make a

379
00:16:36,589 --> 00:16:40,640
request for an image and we saw that it

380
00:16:38,660 --> 00:16:43,430
was wheezy print which at the time we

381
00:16:40,640 --> 00:16:44,930
had never heard of did a Google search

382
00:16:43,430 --> 00:16:47,930
for it found out it's just an open

383
00:16:44,930 --> 00:16:50,329
source Python library and at that point

384
00:16:47,930 --> 00:16:52,400
we could actually take a step back write

385
00:16:50,330 --> 00:16:55,339
a little test test harness that made it

386
00:16:52,400 --> 00:16:56,930
look like that environment and be able

387
00:16:55,339 --> 00:16:58,040
to generate PDFs just like they were

388
00:16:56,930 --> 00:17:00,979
doing so we could test in our

389
00:16:58,040 --> 00:17:04,790
environment instead of racking up rides

390
00:17:00,980 --> 00:17:08,120
on the service but this was where I kind

391
00:17:04,790 --> 00:17:10,069
of like I despaired I I spent a good

392
00:17:08,119 --> 00:17:12,619
like 12 hours looking through the source

393
00:17:10,069 --> 00:17:13,730
looking at what it could do and it

394
00:17:12,619 --> 00:17:20,869
seemed like there was nothing

395
00:17:13,730 --> 00:17:22,339
interesting to this at all so in terms

396
00:17:20,869 --> 00:17:24,409
of actually using this you can literally

397
00:17:22,339 --> 00:17:27,169
just install the weazy print utility and

398
00:17:24,410 --> 00:17:30,020
just give it to me HTML and give it an

399
00:17:27,170 --> 00:17:31,250
output and it does the thing but like we

400
00:17:30,020 --> 00:17:33,110
were doing things like this have you

401
00:17:31,250 --> 00:17:34,580
know a script of a document right we did

402
00:17:33,110 --> 00:17:38,350
an image source we did in the iframe

403
00:17:34,580 --> 00:17:38,350
source and it just did nothing

404
00:17:40,160 --> 00:17:45,300
we looked at the eight actual HTML about

405
00:17:42,990 --> 00:17:47,610
PI file on the repo and we saw that we

406
00:17:45,300 --> 00:17:49,830
have images and I actually started going

407
00:17:47,610 --> 00:17:52,199
down the path of like okay it loads

408
00:17:49,830 --> 00:17:53,760
these images using GDK maybe there's a

409
00:17:52,200 --> 00:17:55,980
vulnerability there maybe there's some

410
00:17:53,760 --> 00:17:57,810
old CVE that just isn't patched

411
00:17:55,980 --> 00:18:00,300
who knows like maybe there's something

412
00:17:57,810 --> 00:18:03,720
and I'm gonna end up you know doing some

413
00:18:00,300 --> 00:18:05,040
memory corruption insanity but I you

414
00:18:03,720 --> 00:18:07,380
know really didn't want to go down that

415
00:18:05,040 --> 00:18:09,629
path there was embed but it just ended

416
00:18:07,380 --> 00:18:11,130
up going to the same exact path same

417
00:18:09,630 --> 00:18:14,060
thing with object like they all just

418
00:18:11,130 --> 00:18:15,780
loaded images and super limited at that

419
00:18:14,060 --> 00:18:17,820
but then I saw that there was this

420
00:18:15,780 --> 00:18:19,830
parser for a link tag and that just

421
00:18:17,820 --> 00:18:25,980
seemed unusual you know if we want links

422
00:18:19,830 --> 00:18:28,199
we just use a right well turns out that

423
00:18:25,980 --> 00:18:30,660
in Weezy print there's a very fun

424
00:18:28,200 --> 00:18:36,210
function where you can literally just

425
00:18:30,660 --> 00:18:37,740
tell it to go fetch a URI and what

426
00:18:36,210 --> 00:18:39,660
happens is it doesn't actually show you

427
00:18:37,740 --> 00:18:41,610
on the page you see nothing when this

428
00:18:39,660 --> 00:18:44,640
happens so even if you're looking at the

429
00:18:41,610 --> 00:18:47,010
PDFs you don't see anything PDFs can

430
00:18:44,640 --> 00:18:49,260
have multiple data streams and it will

431
00:18:47,010 --> 00:18:54,990
embed whatever it fetched as a data

432
00:18:49,260 --> 00:18:56,670
stream in the PDF so of course the first

433
00:18:54,990 --> 00:18:59,240
thing we did is read it to password like

434
00:18:56,670 --> 00:19:02,720
we had to do this we knew that we had to

435
00:18:59,240 --> 00:19:05,070
but we also could make web requests so

436
00:19:02,720 --> 00:19:05,760
we did one rideshare to read Etsy

437
00:19:05,070 --> 00:19:08,820
password

438
00:19:05,760 --> 00:19:12,720
we did one rideshare to get the username

439
00:19:08,820 --> 00:19:14,460
for AWS and then one more rideshare to

440
00:19:12,720 --> 00:19:20,580
actually pull their secret access key

441
00:19:14,460 --> 00:19:22,350
using that username and yeah we just

442
00:19:20,580 --> 00:19:24,179
wrote a little script that that would

443
00:19:22,350 --> 00:19:27,090
pull it out it's just you know Zeeland

444
00:19:24,180 --> 00:19:29,670
can see Lib deflated data you just

445
00:19:27,090 --> 00:19:33,659
handed a PDF and boom it just it pulls

446
00:19:29,670 --> 00:19:35,430
out that whatever file was in there so

447
00:19:33,660 --> 00:19:37,050
that was a really fun one we actually

448
00:19:35,430 --> 00:19:38,910
are still that was back in November

449
00:19:37,050 --> 00:19:40,440
we're still working with the company to

450
00:19:38,910 --> 00:19:43,260
to get permission because we actually

451
00:19:40,440 --> 00:19:44,790
had videographers following us for the

452
00:19:43,260 --> 00:19:46,440
entire things it was during one of

453
00:19:44,790 --> 00:19:47,580
hacker one's life hacking events and

454
00:19:46,440 --> 00:19:49,230
they just happened to be around and it

455
00:19:47,580 --> 00:19:50,669
seemed interesting so we have

456
00:19:49,230 --> 00:19:51,090
professional video of all this stuff and

457
00:19:50,670 --> 00:19:54,440
one

458
00:19:51,090 --> 00:19:57,299
one day we're gonna get to release that

459
00:19:54,440 --> 00:19:58,919
but let's talk about DNS rebinding and

460
00:19:57,299 --> 00:20:04,168
actually a proof of concept that I can

461
00:19:58,919 --> 00:20:05,759
show you those really cool so same

462
00:20:04,169 --> 00:20:07,799
origin policy like I talked about before

463
00:20:05,759 --> 00:20:09,899
makes things really difficult when

464
00:20:07,799 --> 00:20:12,720
you're actually trying to fetch some you

465
00:20:09,899 --> 00:20:15,689
know some random hosts if you're on

466
00:20:12,720 --> 00:20:19,320
exploit info and you try to make an XML

467
00:20:15,690 --> 00:20:22,049
HTTP requests from JavaScript to 169 254

468
00:20:19,320 --> 00:20:23,939
etc it's gonna fail the browser's gonna

469
00:20:22,049 --> 00:20:25,230
say no you don't have permission to do

470
00:20:23,940 --> 00:20:26,999
this

471
00:20:25,230 --> 00:20:29,129
this is not a thing you you're allowed

472
00:20:26,999 --> 00:20:32,220
to do that's standard standard browser

473
00:20:29,129 --> 00:20:34,498
security that we've all known about but

474
00:20:32,220 --> 00:20:36,720
of course it can make XML HTTP requests

475
00:20:34,499 --> 00:20:38,759
to itself like its own domain is safe

476
00:20:36,720 --> 00:20:40,230
its secure it knows that it loaded the

477
00:20:38,759 --> 00:20:45,499
code from there so of course it can make

478
00:20:40,230 --> 00:20:49,169
requests to there how can that go wrong

479
00:20:45,499 --> 00:20:50,850
well here's how you know so let's say

480
00:20:49,169 --> 00:20:54,419
that the browser actually does load that

481
00:20:50,850 --> 00:20:57,658
X top plate that info when it loads the

482
00:20:54,419 --> 00:21:01,590
script tells the server okay I'm here

483
00:20:57,659 --> 00:21:03,749
I've loaded rebind and the DNS server on

484
00:21:01,590 --> 00:21:08,879
the other side says okay exploit that

485
00:21:03,749 --> 00:21:10,799
info is now 169 254 etc at this point

486
00:21:08,879 --> 00:21:12,779
the browser if it tries making requests

487
00:21:10,799 --> 00:21:15,210
to exploit info is still going to hit

488
00:21:12,779 --> 00:21:19,169
the original server the reason is that

489
00:21:15,210 --> 00:21:22,049
Chrome has its own DNS cache but it's

490
00:21:19,169 --> 00:21:24,899
only limited to 2,500 entries so if we

491
00:21:22,049 --> 00:21:28,470
just open a zero dot exploit that info

492
00:21:24,899 --> 00:21:30,748
through a to 499 that I exploit info we

493
00:21:28,470 --> 00:21:34,110
just blow away the entire damn DNS cache

494
00:21:30,749 --> 00:21:37,860
and now whatever request we make is

495
00:21:34,110 --> 00:21:39,928
going to make a new DNS request so it

496
00:21:37,860 --> 00:21:43,379
goes ahead it makes you request to

497
00:21:39,929 --> 00:21:45,749
exploit info and it suddenly sees ok I'm

498
00:21:43,379 --> 00:21:48,719
here I can actually make any requests

499
00:21:45,749 --> 00:21:50,399
whatsoever to the metadata service the

500
00:21:48,720 --> 00:21:53,490
metadata service doesn't look at a toast

501
00:21:50,399 --> 00:21:56,369
field possibly something they should do

502
00:21:53,490 --> 00:21:57,840
in the future I think that's gonna be a

503
00:21:56,369 --> 00:21:58,830
change that they're going to make they

504
00:21:57,840 --> 00:22:00,480
don't look at the hosts to it they don't

505
00:21:58,830 --> 00:22:01,530
care where you're coming from as long as

506
00:22:00,480 --> 00:22:04,890
you're able to hit it

507
00:22:01,530 --> 00:22:08,100
it doesn't matter and of course we keep

508
00:22:04,890 --> 00:22:09,930
BC to exploit info as a back-channel for

509
00:22:08,100 --> 00:22:11,550
exfiltration and by the way

510
00:22:09,930 --> 00:22:12,990
X dot ploy dozen if it was actually a

511
00:22:11,550 --> 00:22:16,770
domain that I bought for this attack

512
00:22:12,990 --> 00:22:18,420
because I couldn't resist but we have a

513
00:22:16,770 --> 00:22:20,639
back channel so that we can actually

514
00:22:18,420 --> 00:22:22,170
keep that map to the same server and we

515
00:22:20,640 --> 00:22:24,210
can just send up log messages so

516
00:22:22,170 --> 00:22:25,770
anything that we pull the progress

517
00:22:24,210 --> 00:22:31,830
through the attack all of that goes to

518
00:22:25,770 --> 00:22:35,460
that same same host and here I can

519
00:22:31,830 --> 00:22:37,470
actually demonstrate a fun little

520
00:22:35,460 --> 00:22:42,330
proof-of-concept using this exact attack

521
00:22:37,470 --> 00:22:46,929
and this is on snapchat so snapchat ad

522
00:22:42,330 --> 00:22:49,909
program they have the ability to

523
00:22:46,929 --> 00:22:51,679
they have the ability to add these brand

524
00:22:49,910 --> 00:22:53,540
logos and of course you would think that

525
00:22:51,679 --> 00:22:55,850
they were just like maybe take a URL for

526
00:22:53,540 --> 00:22:58,190
the fur and image and maybe fetch that

527
00:22:55,850 --> 00:22:59,899
know they go ham they actually go and

528
00:22:58,190 --> 00:23:02,690
make a request so whatever server it is

529
00:22:59,900 --> 00:23:04,370
run the HTML and then pull image tags

530
00:23:02,690 --> 00:23:07,429
out of it so if there's a Java Script

531
00:23:04,370 --> 00:23:09,350
that spits images out into it it just it

532
00:23:07,429 --> 00:23:12,559
goes there so we just intercept that

533
00:23:09,350 --> 00:23:15,530
request or repeat that request change

534
00:23:12,559 --> 00:23:21,740
google comm to at this point it was

535
00:23:15,530 --> 00:23:22,940
demon not taken down to have and we just

536
00:23:21,740 --> 00:23:24,340
go ahead and we tell it to make that

537
00:23:22,940 --> 00:23:27,070
request

538
00:23:24,340 --> 00:23:29,080
and running on that server we can see

539
00:23:27,070 --> 00:23:31,629
okay we triggered in this place and it's

540
00:23:29,080 --> 00:23:33,460
just going to loop this is before I

541
00:23:31,630 --> 00:23:35,770
figured out the cash stuff so it took a

542
00:23:33,460 --> 00:23:39,790
little bit longer but I actually just

543
00:23:35,770 --> 00:23:47,320
repoint that domain to 169 and then wait

544
00:23:39,790 --> 00:23:49,840
a few seconds 20 but this if I could

545
00:23:47,320 --> 00:23:51,639
actually zoom in here maybe I can it

546
00:23:49,840 --> 00:23:53,500
actually shows you the SSH keys the

547
00:23:51,640 --> 00:23:55,870
hostname everything for that instance

548
00:23:53,500 --> 00:23:57,880
because it was running on Google Cloud

549
00:23:55,870 --> 00:24:00,459
we actually got full control over a

550
00:23:57,880 --> 00:24:02,290
large part of snapchats environment and

551
00:24:00,460 --> 00:24:03,850
found this exact thing on their dev

552
00:24:02,290 --> 00:24:07,629
environment as well and got even more

553
00:24:03,850 --> 00:24:18,340
access and this was all done via that

554
00:24:07,630 --> 00:24:19,960
DNS rebinding attack so that the way

555
00:24:18,340 --> 00:24:22,659
that I showed you earlier with like the

556
00:24:19,960 --> 00:24:24,310
Python script and then having to change

557
00:24:22,660 --> 00:24:25,900
it in CloudFlare and wait for a while

558
00:24:24,310 --> 00:24:29,500
that sucked

559
00:24:25,900 --> 00:24:31,930
it was it was fraught with difficulty so

560
00:24:29,500 --> 00:24:34,000
I made a script that actually combines a

561
00:24:31,930 --> 00:24:35,680
DNS server and an HTTP server you have

562
00:24:34,000 --> 00:24:37,060
to have a domain that you can point its

563
00:24:35,680 --> 00:24:39,910
name servers to a server that you

564
00:24:37,060 --> 00:24:41,700
control but if you run this it actually

565
00:24:39,910 --> 00:24:45,310
will work against any headless browser

566
00:24:41,700 --> 00:24:47,320
it'll pop GCP AWS and azure

567
00:24:45,310 --> 00:24:48,220
automatically i'm sure we're gonna be

568
00:24:47,320 --> 00:24:51,159
adding more later

569
00:24:48,220 --> 00:24:53,290
it runs in less than two seconds due to

570
00:24:51,160 --> 00:24:55,990
the DNS cache poisoning attack or cache

571
00:24:53,290 --> 00:24:57,820
flushing attack and it's all open source

572
00:24:55,990 --> 00:25:01,090
you can literally just tell it what your

573
00:24:57,820 --> 00:25:02,500
target is like what what environment it

574
00:25:01,090 --> 00:25:05,260
should be you know testing against

575
00:25:02,500 --> 00:25:07,420
whether that's AWS or whatever and it

576
00:25:05,260 --> 00:25:09,970
just doesn't it just goes and handles

577
00:25:07,420 --> 00:25:12,160
this rebinding attack automatically

578
00:25:09,970 --> 00:25:14,770
because it does combine that DNS an HTTP

579
00:25:12,160 --> 00:25:16,570
server together very poorly documented

580
00:25:14,770 --> 00:25:17,860
at the moment like this is something

581
00:25:16,570 --> 00:25:21,220
that I threw together right after the

582
00:25:17,860 --> 00:25:23,139
initial talk for this actually making it

583
00:25:21,220 --> 00:25:25,120
public rather than just something I was

584
00:25:23,140 --> 00:25:26,860
running so if anyone wants to help out

585
00:25:25,120 --> 00:25:28,899
and contribute there and make it a

586
00:25:26,860 --> 00:25:31,419
little bit nicer to use appreciate the

587
00:25:28,900 --> 00:25:34,290
help but it's all up on github super

588
00:25:31,420 --> 00:25:36,300
useful this tool at this point has like

589
00:25:34,290 --> 00:25:39,440
$40,000 and

590
00:25:36,300 --> 00:25:42,500
behind it just in the last couple months

591
00:25:39,440 --> 00:25:46,260
and there's another really useful tool

592
00:25:42,500 --> 00:25:49,530
I'm biased I read this one too that is

593
00:25:46,260 --> 00:25:52,440
useful for us as RF where it just it

594
00:25:49,530 --> 00:25:54,240
automatically you can set up buckets for

595
00:25:52,440 --> 00:25:56,970
different projects and it'll give you a

596
00:25:54,240 --> 00:25:58,680
unique URL if something hits that it

597
00:25:56,970 --> 00:26:00,890
will automatically log all the requests

598
00:25:58,680 --> 00:26:04,050
as well as try to do some basic

599
00:26:00,890 --> 00:26:06,390
JavaScript exfiltration so if javascript

600
00:26:04,050 --> 00:26:07,649
will run it'll one log that javascript

601
00:26:06,390 --> 00:26:08,160
is running which is a useful thing to

602
00:26:07,650 --> 00:26:11,370
know

603
00:26:08,160 --> 00:26:15,390
it'll also try to pull ec2 and I think

604
00:26:11,370 --> 00:26:17,699
as your keys but it's really not great

605
00:26:15,390 --> 00:26:21,360
just because same origin policy locks in

606
00:26:17,700 --> 00:26:22,680
99% of cases but this is how I like if

607
00:26:21,360 --> 00:26:25,919
I'm testing to see if something is

608
00:26:22,680 --> 00:26:27,600
vulnerable at all to SSR F test or SSR F

609
00:26:25,920 --> 00:26:29,250
this is how I do it

610
00:26:27,600 --> 00:26:31,770
you can find the source code up on

611
00:26:29,250 --> 00:26:34,080
github you can also just use my instance

612
00:26:31,770 --> 00:26:35,700
if you trust my server and then I'm not

613
00:26:34,080 --> 00:26:40,189
gonna go try to steal your bugs you can

614
00:26:35,700 --> 00:26:46,230
do it at SSR f test comm all free and

615
00:26:40,190 --> 00:26:48,600
pretty easy to use so a quick recap SSR

616
00:26:46,230 --> 00:26:51,330
apps are dangerous in my opinion they

617
00:26:48,600 --> 00:26:53,310
are they are the most dangerous bug

618
00:26:51,330 --> 00:26:55,740
that's out there right now in terms of

619
00:26:53,310 --> 00:26:58,919
just broad scope I've found them

620
00:26:55,740 --> 00:27:01,560
everywhere I think I think between

621
00:26:58,920 --> 00:27:04,110
myself and homme SEC my collaborator I

622
00:27:01,560 --> 00:27:07,050
think we're up over 75,000 in bounties

623
00:27:04,110 --> 00:27:10,379
and like we both hack at most one day a

624
00:27:07,050 --> 00:27:13,889
week just from Asus RF over the last

625
00:27:10,380 --> 00:27:15,660
year they're everywhere

626
00:27:13,890 --> 00:27:17,820
especially if you look at finance apps

627
00:27:15,660 --> 00:27:19,440
they just like for a while that I only

628
00:27:17,820 --> 00:27:20,820
looked at invoicing apps because I knew

629
00:27:19,440 --> 00:27:23,880
that every single one of them was going

630
00:27:20,820 --> 00:27:25,710
to be vulnerable one of the things to

631
00:27:23,880 --> 00:27:29,510
note is that like don't give up on your

632
00:27:25,710 --> 00:27:31,920
bugs if you see an SSR F of any form

633
00:27:29,510 --> 00:27:33,420
there's a pretty damn good chance that

634
00:27:31,920 --> 00:27:36,390
you're gonna be able to exploit it to a

635
00:27:33,420 --> 00:27:41,430
critical level or multiple different

636
00:27:36,390 --> 00:27:43,620
critical levels out of probably 40 or 50

637
00:27:41,430 --> 00:27:46,200
SSR F bugs that I found total over the

638
00:27:43,620 --> 00:27:48,479
last last year

639
00:27:46,200 --> 00:27:51,120
maybe one or two of them weren't

640
00:27:48,480 --> 00:27:53,160
exploitable one in particular still

641
00:27:51,120 --> 00:27:54,959
haunts me to this day I'm still

642
00:27:53,160 --> 00:27:57,300
confident that it is somehow exploitable

643
00:27:54,960 --> 00:28:00,120
and I just haven't figured it out but

644
00:27:57,300 --> 00:28:01,830
don't give up on them and if you do have

645
00:28:00,120 --> 00:28:04,469
something where you're like if you're

646
00:28:01,830 --> 00:28:06,540
able to run JavaScript especially don't

647
00:28:04,470 --> 00:28:08,460
just report that bug without figuring

648
00:28:06,540 --> 00:28:09,659
out the impact because you're one you're

649
00:28:08,460 --> 00:28:11,430
not gonna get paid for it and two

650
00:28:09,660 --> 00:28:12,870
they're not gonna understand what's

651
00:28:11,430 --> 00:28:15,780
really happening there and they're not

652
00:28:12,870 --> 00:28:18,510
gonna fix it effectively if you see a

653
00:28:15,780 --> 00:28:21,720
PDF generator somewhere nine times out

654
00:28:18,510 --> 00:28:23,760
of ten its vulnerable um like I I would

655
00:28:21,720 --> 00:28:24,750
bet good money on it anytime I see a PDF

656
00:28:23,760 --> 00:28:26,810
generator

657
00:28:24,750 --> 00:28:31,110
nobody does them from scratch anymore

658
00:28:26,810 --> 00:28:32,820
they just do a B HTML so if you're able

659
00:28:31,110 --> 00:28:34,590
to chain any other vulnerabilities with

660
00:28:32,820 --> 00:28:38,360
it if you're able to get an XSS into it

661
00:28:34,590 --> 00:28:43,110
you're gonna be able to pop that thing

662
00:28:38,360 --> 00:28:45,030
in terms of the defender side don't run

663
00:28:43,110 --> 00:28:46,679
JavaScript in the cloud like if it's

664
00:28:45,030 --> 00:28:48,750
your own JavaScript go for it you know

665
00:28:46,680 --> 00:28:51,300
notice a thing

666
00:28:48,750 --> 00:28:54,270
you know if you're running arbitrary

667
00:28:51,300 --> 00:28:56,310
JavaScript from from random attackers

668
00:28:54,270 --> 00:28:58,320
you're basically just like printing

669
00:28:56,310 --> 00:28:59,310
money for them that's it just don't do

670
00:28:58,320 --> 00:29:02,129
it

671
00:28:59,310 --> 00:29:03,960
do whitelisting don't blacklist

672
00:29:02,130 --> 00:29:06,660
if you try to blacklist domains if you

673
00:29:03,960 --> 00:29:09,240
blacklist 160 92 5 4 etc I'm just gonna

674
00:29:06,660 --> 00:29:11,580
go in VIP v6 like you don't don't

675
00:29:09,240 --> 00:29:13,260
blacklist whitelist and be very strict

676
00:29:11,580 --> 00:29:15,600
about it and make sure that you actually

677
00:29:13,260 --> 00:29:17,940
do that effectively like make sure that

678
00:29:15,600 --> 00:29:21,149
if I redirect from a domain that you are

679
00:29:17,940 --> 00:29:22,590
fine with over to the metadata service

680
00:29:21,150 --> 00:29:24,030
that you're checking it at each redirect

681
00:29:22,590 --> 00:29:27,270
that you're actually resolving the host

682
00:29:24,030 --> 00:29:29,340
that you're heading etc configure your

683
00:29:27,270 --> 00:29:32,300
cloud instances to minimize impact make

684
00:29:29,340 --> 00:29:36,060
sure that make sure that you're actually

685
00:29:32,300 --> 00:29:38,399
handling make sure that you're handling

686
00:29:36,060 --> 00:29:41,399
your roles properly so like the role for

687
00:29:38,400 --> 00:29:44,280
the you know snapchat ad server should

688
00:29:41,400 --> 00:29:46,860
not have access to the s3 bucket that

689
00:29:44,280 --> 00:29:48,870
has user data like that's just a thing

690
00:29:46,860 --> 00:29:51,270
that it should should not do and you can

691
00:29:48,870 --> 00:29:53,250
also firewall off you know these these

692
00:29:51,270 --> 00:29:55,290
internal services especially if you are

693
00:29:53,250 --> 00:29:56,610
knowing that you're taking on

694
00:29:55,290 --> 00:29:58,950
to data and you're handling that in

695
00:29:56,610 --> 00:30:00,780
various ways um and finally be nice to

696
00:29:58,950 --> 00:30:02,130
hackers like work with them I don't

697
00:30:00,780 --> 00:30:05,280
think I have to tell anybody in this

698
00:30:02,130 --> 00:30:06,720
room that work with them be kind to your

699
00:30:05,280 --> 00:30:08,820
hackers and they will be kind to you

700
00:30:06,720 --> 00:30:12,240
they'll continue to find good bugs and

701
00:30:08,820 --> 00:30:16,530
keep your users safe so that's about it

702
00:30:12,240 --> 00:30:18,270
I am on Twitter at Dakin you can also

703
00:30:16,530 --> 00:30:20,129
find me on the hacker 101 discord if you

704
00:30:18,270 --> 00:30:22,050
go to hacker 101.com there's a discord

705
00:30:20,130 --> 00:30:26,160
link at the top I'm always there we have

706
00:30:22,050 --> 00:30:28,169
like 8500 amazing hackers now that just

707
00:30:26,160 --> 00:30:31,800
want to work together and learn and and

708
00:30:28,170 --> 00:30:34,250
break stuff so thank you for for

709
00:30:31,800 --> 00:30:39,219
watching and being here

710
00:30:34,250 --> 00:30:39,219
[Applause]

