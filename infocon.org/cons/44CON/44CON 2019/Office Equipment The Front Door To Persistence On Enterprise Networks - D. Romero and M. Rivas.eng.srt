1
00:00:00,000 --> 00:00:02,029
Oh

2
00:00:02,600 --> 00:00:07,759
I thought well hi everyone since we're

3
00:00:05,870 --> 00:00:09,440
going to all talk with the end of his

4
00:00:07,759 --> 00:00:11,809
equipment the front door too persistent

5
00:00:09,440 --> 00:00:13,879
on enterprise winter networks where

6
00:00:11,809 --> 00:00:17,360
we're going to present our enterprise

7
00:00:13,880 --> 00:00:21,369
Pinta research and things also to 44

8
00:00:17,360 --> 00:00:21,369
companies even has the great opportunity

9
00:00:24,489 --> 00:00:28,550
okay first of all just a brief

10
00:00:27,050 --> 00:00:31,130
introduction about who we are this is

11
00:00:28,550 --> 00:00:32,290
Mario Rivas named Ed Romero and both

12
00:00:31,130 --> 00:00:35,690
work as a security consultant

13
00:00:32,290 --> 00:00:38,300
understated and at the entity group in

14
00:00:35,690 --> 00:00:41,330
the Madrid office have information about

15
00:00:38,300 --> 00:00:43,610
us like interests Twitter account emails

16
00:00:41,330 --> 00:00:47,570
but if you want to know it very well

17
00:00:43,610 --> 00:00:49,790
always have forever so just fingers this

18
00:00:47,570 --> 00:00:51,860
is Jennifer all talk classical agenda

19
00:00:49,790 --> 00:00:53,839
frizzen introduction and that extra fee

20
00:00:51,860 --> 00:00:55,370
that we have covered mari will present

21
00:00:53,840 --> 00:00:57,340
the testing methodology and some facets

22
00:00:55,370 --> 00:00:59,449
that we have the blog and a way across

23
00:00:57,340 --> 00:01:01,310
the different bullet is that we have

24
00:00:59,450 --> 00:01:03,110
phone and after that we'll show you some

25
00:01:01,310 --> 00:01:06,259
exploits and the difficulties that we

26
00:01:03,110 --> 00:01:07,970
came across in order to exploit this we

27
00:01:06,259 --> 00:01:09,440
will talk about persistent post

28
00:01:07,970 --> 00:01:11,870
exploitation of finally the big

29
00:01:09,440 --> 00:01:14,570
conclusions okay let's go with the

30
00:01:11,870 --> 00:01:17,780
introduction okay the main goal of the

31
00:01:14,570 --> 00:01:19,009
research was testing enterprise devices

32
00:01:17,780 --> 00:01:23,060
and figure out the current state of

33
00:01:19,010 --> 00:01:25,190
security to them so we decided that the

34
00:01:23,060 --> 00:01:27,020
printed would be a good target so we

35
00:01:25,190 --> 00:01:29,479
selected six medium-sized enterprise

36
00:01:27,020 --> 00:01:31,520
printers and we decide to focus this

37
00:01:29,479 --> 00:01:33,470
research on a vitamin approach so the

38
00:01:31,520 --> 00:01:35,089
outcomes of the reason can be using

39
00:01:33,470 --> 00:01:39,080
already medication so we did

40
00:01:35,090 --> 00:01:41,750
collaborative research exploitation and

41
00:01:39,080 --> 00:01:44,658
process flotation keep in mind that is

42
00:01:41,750 --> 00:01:45,799
not it is not an assessment so we don't

43
00:01:44,659 --> 00:01:48,409
need to find all the only this is a

44
00:01:45,799 --> 00:01:50,659
printer half so only we only need to

45
00:01:48,409 --> 00:01:52,820
find wobble it is a pro bias remote code

46
00:01:50,659 --> 00:01:55,310
execution okay

47
00:01:52,820 --> 00:01:56,570
why printers these are really good

48
00:01:55,310 --> 00:01:58,280
questions

49
00:01:56,570 --> 00:02:01,070
business a big well extended in

50
00:01:58,280 --> 00:02:02,330
companies and many years ago and they

51
00:02:01,070 --> 00:02:04,460
are usually connected to different

52
00:02:02,330 --> 00:02:06,080
networks and different balance so we can

53
00:02:04,460 --> 00:02:08,090
do for example them in order to be

54
00:02:06,080 --> 00:02:09,669
voting so different departments attack

55
00:02:08,090 --> 00:02:12,109
an attack different departments

56
00:02:09,669 --> 00:02:13,939
obviously the information managed by the

57
00:02:12,109 --> 00:02:16,040
printer are really sensitive we have

58
00:02:13,939 --> 00:02:18,859
corporate personal financial

59
00:02:16,040 --> 00:02:20,269
customer another information I don't

60
00:02:18,860 --> 00:02:22,040
forget information including within the

61
00:02:20,269 --> 00:02:25,310
configuration like passport domain

62
00:02:22,040 --> 00:02:27,409
account credentials etc okay printers

63
00:02:25,310 --> 00:02:29,810
are usually considered low-risk targets

64
00:02:27,409 --> 00:02:32,420
so probably they they are not configured

65
00:02:29,810 --> 00:02:35,299
securely properly by the IT department

66
00:02:32,420 --> 00:02:37,010
so again we have uncontrolled devices

67
00:02:35,299 --> 00:02:39,409
managing really sensitive information

68
00:02:37,010 --> 00:02:41,090
and connected to the most of the princes

69
00:02:39,409 --> 00:02:45,019
come with painted Negros

70
00:02:41,090 --> 00:02:46,280
sorry companies networks so these are an

71
00:02:45,019 --> 00:02:48,319
example of some weeks hello were

72
00:02:46,280 --> 00:02:50,870
Microsoft at the rising stock hackers

73
00:02:48,319 --> 00:02:54,768
using Enterprise devices in order to

74
00:02:50,870 --> 00:02:57,109
attack companies ok quite not some

75
00:02:54,769 --> 00:03:00,069
Bendel's decide to make a stimulus if

76
00:02:57,109 --> 00:03:02,569
one so it is a challenge for us to do it

77
00:03:00,069 --> 00:03:04,790
okay I'll go with the tax rephrase first

78
00:03:02,569 --> 00:03:09,409
comment we intend to fight to the finish

79
00:03:04,790 --> 00:03:11,750
the operating system in or printers rtos

80
00:03:09,409 --> 00:03:14,629
real-time operating system and language

81
00:03:11,750 --> 00:03:16,579
and probably we found many attacks for

82
00:03:14,629 --> 00:03:20,030
faces like web applications and web

83
00:03:16,579 --> 00:03:22,970
services mobile applications filed

84
00:03:20,030 --> 00:03:25,010
passes obtain print words written

85
00:03:22,970 --> 00:03:27,799
languages and services stainless

86
00:03:25,010 --> 00:03:30,379
services like for example airplane or

87
00:03:27,799 --> 00:03:32,569
Google Cloud Print management services

88
00:03:30,379 --> 00:03:33,069
and all that like telnet is an MP et

89
00:03:32,569 --> 00:03:35,388
cetera

90
00:03:33,069 --> 00:03:37,909
proxy me that that's like Wi-Fi use be

91
00:03:35,389 --> 00:03:40,519
NFC etc and we also decided to do two

92
00:03:37,909 --> 00:03:44,179
other tests in this exact screw face was

93
00:03:40,519 --> 00:03:45,409
exploitation and harvest but only we

94
00:03:44,180 --> 00:03:47,540
didn't have enough time to cover all

95
00:03:45,409 --> 00:03:50,328
these attacks Facebook we finally cover

96
00:03:47,540 --> 00:03:52,340
the following was those pretty degrees

97
00:03:50,329 --> 00:03:55,400
because we did include assessing all the

98
00:03:52,340 --> 00:03:58,190
printers this is another picture about

99
00:03:55,400 --> 00:03:59,449
or over texture face where you can see

100
00:03:58,190 --> 00:04:01,819
the difference element and we're

101
00:03:59,449 --> 00:04:03,620
including it within each part for

102
00:04:01,819 --> 00:04:06,228
example for the printer language in a

103
00:04:03,620 --> 00:04:09,319
file format we decide to take the PTL

104
00:04:06,229 --> 00:04:12,970
the PCL and PS languages ok a little

105
00:04:09,319 --> 00:04:15,560
with the testimony I'm passing okay

106
00:04:12,970 --> 00:04:18,409
so this is the main mythology that we

107
00:04:15,560 --> 00:04:20,000
follow during the research process we

108
00:04:18,409 --> 00:04:23,810
started with the state of the art and

109
00:04:20,000 --> 00:04:25,639
setting our our printers then we chosen

110
00:04:23,810 --> 00:04:26,680
a scope from the attack surface as we do

111
00:04:25,639 --> 00:04:29,020
so

112
00:04:26,680 --> 00:04:31,750
and then in a cycling process we started

113
00:04:29,020 --> 00:04:33,430
searching for vulnerabilities fussing

114
00:04:31,750 --> 00:04:35,289
different protocols and finding some

115
00:04:33,430 --> 00:04:37,270
crashes then analyzing them and then

116
00:04:35,289 --> 00:04:39,009
trying to exploit them in order to

117
00:04:37,270 --> 00:04:40,900
compromise the printer or at least get

118
00:04:39,009 --> 00:04:43,300
some additional knowledge about it

119
00:04:40,900 --> 00:04:46,030
all these guys also analyzing the thing

120
00:04:43,300 --> 00:04:48,280
were in the cases we have it also taking

121
00:04:46,030 --> 00:04:51,929
advantage of the hardware to get some

122
00:04:48,280 --> 00:04:54,758
more useful information as we will see

123
00:04:51,930 --> 00:04:56,860
talking old fussing we started with down

124
00:04:54,759 --> 00:04:58,419
faster which are really quick to launch

125
00:04:56,860 --> 00:05:01,320
and then we continued developing a

126
00:04:58,419 --> 00:05:05,198
smarter ones which give better results

127
00:05:01,320 --> 00:05:09,969
but required more time actually both

128
00:05:05,199 --> 00:05:12,340
techniques gave us great results but we

129
00:05:09,970 --> 00:05:14,590
felt that it was being more than

130
00:05:12,340 --> 00:05:20,138
consuming that it should be so we

131
00:05:14,590 --> 00:05:22,270
decided to create our own faster we were

132
00:05:20,139 --> 00:05:23,650
looking at the state of the art we found

133
00:05:22,270 --> 00:05:27,130
two amazing tools

134
00:05:23,650 --> 00:05:28,630
sally-ann Buffa's both with great

135
00:05:27,130 --> 00:05:30,400
functionalities and a lot of the things

136
00:05:28,630 --> 00:05:32,500
that we needed but we were changing a

137
00:05:30,400 --> 00:05:35,049
lot of the code above us so we decided

138
00:05:32,500 --> 00:05:37,930
to fork it and we ended up creating a

139
00:05:35,050 --> 00:05:40,840
different monster and after Sally ambu

140
00:05:37,930 --> 00:05:43,630
the next one was Mike Wazowski so we

141
00:05:40,840 --> 00:05:46,840
decided to call it fascist key we wrote

142
00:05:43,630 --> 00:05:48,219
it in Python 3 we improved some of the

143
00:05:46,840 --> 00:05:51,789
libraries like the stream passing

144
00:05:48,220 --> 00:05:53,800
libraries and we made faster modules to

145
00:05:51,789 --> 00:05:56,010
give oral protocol faster Xander a

146
00:05:53,800 --> 00:05:58,599
single program with a similar behavior

147
00:05:56,010 --> 00:06:00,880
between the rest of the changes we

148
00:05:58,599 --> 00:06:04,150
wanted to solve some difficulties that

149
00:06:00,880 --> 00:06:06,580
we were having while facing the first

150
00:06:04,150 --> 00:06:08,260
one was that different implementation of

151
00:06:06,580 --> 00:06:11,020
the same protocol behaved different and

152
00:06:08,260 --> 00:06:13,449
when a device crashes it can go totally

153
00:06:11,020 --> 00:06:16,090
down or maybe a service stopped

154
00:06:13,449 --> 00:06:19,780
answering or maybe it just prints some

155
00:06:16,090 --> 00:06:22,690
stack trace in some debug interface so

156
00:06:19,780 --> 00:06:24,520
to solve this we did a main program with

157
00:06:22,690 --> 00:06:26,500
a lot of arguments to control another

158
00:06:24,520 --> 00:06:28,770
the fuzzing session and we made monitor

159
00:06:26,500 --> 00:06:31,690
modules to constantly check the target

160
00:06:28,770 --> 00:06:34,060
then when the device crashes sometimes

161
00:06:31,690 --> 00:06:36,510
we needed to manually reboot it so all

162
00:06:34,060 --> 00:06:39,099
that we did we made restart the modules

163
00:06:36,510 --> 00:06:40,030
to for example tune off I know Nana

164
00:06:39,099 --> 00:06:41,950
smart black

165
00:06:40,030 --> 00:06:44,679
and then to give you stability to the

166
00:06:41,950 --> 00:06:46,810
faster we made a nice console where we

167
00:06:44,680 --> 00:06:49,660
can pause and control the fussing

168
00:06:46,810 --> 00:06:52,930
sessions do something like the retest a

169
00:06:49,660 --> 00:06:55,060
suspect as case and we can also do from

170
00:06:52,930 --> 00:06:57,550
the console and things like print in

171
00:06:55,060 --> 00:06:59,920
human readable format or test cases and

172
00:06:57,550 --> 00:07:02,440
save a stand on a script that we can

173
00:06:59,920 --> 00:07:04,540
sell later to the manufacturer or we can

174
00:07:02,440 --> 00:07:14,800
use while further developing some

175
00:07:04,540 --> 00:07:25,590
sprites and let's see a quick demo let

176
00:07:14,800 --> 00:07:28,990
me check the Nazis okay so below we have

177
00:07:25,590 --> 00:07:31,979
ping to our printer and about you can

178
00:07:28,990 --> 00:07:34,840
see some of the options of the faster

179
00:07:31,980 --> 00:07:36,580
more importantly the protocol faster

180
00:07:34,840 --> 00:07:38,380
that we have developed and the restarted

181
00:07:36,580 --> 00:07:42,400
modules and the monitor modules and

182
00:07:38,380 --> 00:07:46,419
other options we are not going to launch

183
00:07:42,400 --> 00:07:48,520
or faster - or target the printer one in

184
00:07:46,419 --> 00:07:50,799
the port six three one using the

185
00:07:48,520 --> 00:07:53,620
internet printing protocol faster IPP

186
00:07:50,800 --> 00:07:55,930
and they get printer attributes part of

187
00:07:53,620 --> 00:07:58,210
the IP people at all and we are also

188
00:07:55,930 --> 00:08:01,870
going to use our starter module that

189
00:07:58,210 --> 00:08:05,200
terms of unknown and a smart block you

190
00:08:01,870 --> 00:08:08,080
can see here or cool logo and some of

191
00:08:05,200 --> 00:08:10,030
the comments that we have implemented we

192
00:08:08,080 --> 00:08:14,229
are now going to test the connection to

193
00:08:10,030 --> 00:08:17,530
the target sending a non fast packet and

194
00:08:14,229 --> 00:08:19,390
after receiving the the answer that

195
00:08:17,530 --> 00:08:21,400
everything is going okay we are going to

196
00:08:19,390 --> 00:08:22,930
go to a different test case and we are

197
00:08:21,400 --> 00:08:31,780
going to continue the execution from

198
00:08:22,930 --> 00:08:34,240
there we can see here some test cases

199
00:08:31,780 --> 00:08:38,039
being being transmitted with very

200
00:08:34,240 --> 00:08:41,650
similar logging as similar to Buffa's

201
00:08:38,039 --> 00:08:43,659
and after this second one you will see

202
00:08:41,650 --> 00:08:46,720
below that we have a stop receiving ICP

203
00:08:43,659 --> 00:08:48,370
ICMP messages the printer has class now

204
00:08:46,720 --> 00:08:51,160
we have the data reading the faster I

205
00:08:48,370 --> 00:08:52,940
know we are going to try to restart it

206
00:08:51,160 --> 00:08:54,949
with the rest art and module

207
00:08:52,940 --> 00:08:57,830
turning off an honest man and after that

208
00:08:54,950 --> 00:09:00,560
we will wait for the target to recover

209
00:08:57,830 --> 00:09:02,420
and it will continue the execution from

210
00:09:00,560 --> 00:09:04,310
the NS test case but we don't want to do

211
00:09:02,420 --> 00:09:06,770
that we can control C and go to our

212
00:09:04,310 --> 00:09:09,229
console where we can do something like

213
00:09:06,770 --> 00:09:12,050
check or suspects the Fife owning one is

214
00:09:09,230 --> 00:09:15,650
a suspect now and we can print it in a

215
00:09:12,050 --> 00:09:19,040
human readable format as you can see

216
00:09:15,650 --> 00:09:21,980
here this longest line you can see that

217
00:09:19,040 --> 00:09:26,030
we are sending 10,000 C's instead of the

218
00:09:21,980 --> 00:09:28,430
default value which was Ian and we can

219
00:09:26,030 --> 00:09:30,230
also print it a proof of concept that we

220
00:09:28,430 --> 00:09:35,109
can copy and paste him to on a script

221
00:09:30,230 --> 00:09:39,020
and do all the things we did after that

222
00:09:35,110 --> 00:09:42,200
now after the target recovers we are

223
00:09:39,020 --> 00:09:44,030
going to retest it to check if it was

224
00:09:42,200 --> 00:09:49,520
this test case which caused the crafts

225
00:09:44,030 --> 00:09:52,250
or it was any other thing so now we can

226
00:09:49,520 --> 00:09:55,160
use the fast command for this and we can

227
00:09:52,250 --> 00:09:59,720
select a range of test cases or just one

228
00:09:55,160 --> 00:10:01,939
as this case and after launching it you

229
00:09:59,720 --> 00:10:05,270
will see below that we will stop

230
00:10:01,940 --> 00:10:07,850
receiving ICMP s again that are obsessed

231
00:10:05,270 --> 00:10:09,680
crush again we have a back in this case

232
00:10:07,850 --> 00:10:12,500
was a skip buffer flow after analyzing

233
00:10:09,680 --> 00:10:14,599
it and we can also save this proof of

234
00:10:12,500 --> 00:10:16,760
concept into a file with a craft common

235
00:10:14,600 --> 00:10:18,200
and we can also disable this element we

236
00:10:16,760 --> 00:10:20,150
don't want to fast it anymore

237
00:10:18,200 --> 00:10:22,250
because we already know it's vulnerable

238
00:10:20,150 --> 00:10:33,770
and we don't want to spend more time

239
00:10:22,250 --> 00:10:35,870
with it and that was this first demo all

240
00:10:33,770 --> 00:10:37,819
the code is already available in our

241
00:10:35,870 --> 00:10:40,130
external is up so check it out and

242
00:10:37,820 --> 00:10:42,500
follow it because there will be a lot of

243
00:10:40,130 --> 00:10:46,340
thing is coming soon

244
00:10:42,500 --> 00:10:49,190
let's go for just a bit of hardware we

245
00:10:46,340 --> 00:10:50,690
took a very quick look mainly searching

246
00:10:49,190 --> 00:10:53,630
for things that will help us with the

247
00:10:50,690 --> 00:10:57,530
exploitation of the printers like the

248
00:10:53,630 --> 00:11:00,350
back interfaces like you art or JTAG

249
00:10:57,530 --> 00:11:04,010
ports or something that may allow us to

250
00:11:00,350 --> 00:11:06,530
dump the finger or get some other some

251
00:11:04,010 --> 00:11:07,149
more useful informations and while doing

252
00:11:06,530 --> 00:11:10,779
that

253
00:11:07,149 --> 00:11:12,429
we were having too much fun we did some

254
00:11:10,779 --> 00:11:15,579
things that we shouldn't while testing

255
00:11:12,429 --> 00:11:17,289
hardware and now we saw some magical

256
00:11:15,579 --> 00:11:19,179
smoke and one of the painter is not

257
00:11:17,289 --> 00:11:22,149
going to print anymore

258
00:11:19,179 --> 00:11:23,709
we can't say something like a Kela

259
00:11:22,149 --> 00:11:27,129
printer safe a tree or something like

260
00:11:23,709 --> 00:11:29,559
that so one of the first thing we did

261
00:11:27,129 --> 00:11:31,059
was looking for his post memories to get

262
00:11:29,559 --> 00:11:33,939
some more useful information from but

263
00:11:31,059 --> 00:11:36,039
from that in this example we use a buzz

264
00:11:33,939 --> 00:11:37,899
pirate the red thing in the photo to

265
00:11:36,039 --> 00:11:41,649
them the finger from one of the memories

266
00:11:37,899 --> 00:11:43,479
of that printer we also found serial

267
00:11:41,649 --> 00:11:46,239
ports in three of the six printers

268
00:11:43,479 --> 00:11:49,029
tested and also some deck that pour that

269
00:11:46,239 --> 00:11:51,009
in this case seemed to be disabled the

270
00:11:49,029 --> 00:11:52,419
serial port where a stream Lee is full

271
00:11:51,009 --> 00:11:55,749
as they gave us a lot of information

272
00:11:52,419 --> 00:11:59,228
like the bat roars and a stack traces

273
00:11:55,749 --> 00:12:01,929
and one of them one was special

274
00:11:59,229 --> 00:12:04,569
interesting because it gave us an

275
00:12:01,929 --> 00:12:05,978
interactive shell where we could read

276
00:12:04,569 --> 00:12:07,988
and write the memory and execute

277
00:12:05,979 --> 00:12:11,709
something so it was perfect for our

278
00:12:07,989 --> 00:12:15,759
server back door so we connected a

279
00:12:11,709 --> 00:12:17,199
Raspberry Pi to the serial port and the

280
00:12:15,759 --> 00:12:17,919
single port was also powering the

281
00:12:17,199 --> 00:12:19,419
Raspberry Pi

282
00:12:17,919 --> 00:12:21,839
so whenever the printer is on the

283
00:12:19,419 --> 00:12:24,489
Raspberry Pi will be on and this

284
00:12:21,839 --> 00:12:27,369
Raspberry Pi will connect to a Wi-Fi

285
00:12:24,489 --> 00:12:30,099
access point and from that we will have

286
00:12:27,369 --> 00:12:31,749
all these capabilities these could be

287
00:12:30,099 --> 00:12:33,489
implanted by someone with physical

288
00:12:31,749 --> 00:12:45,509
access to the printer in two or three

289
00:12:33,489 --> 00:12:48,969
minutes and let's see another demo okay

290
00:12:45,509 --> 00:12:50,649
we are in or PC were the Raspberry Pi is

291
00:12:48,969 --> 00:12:52,869
connecting to through the cell so to

292
00:12:50,649 --> 00:12:56,859
access point so we can just SSA it's

293
00:12:52,869 --> 00:12:59,439
into it from here we can directly

294
00:12:56,859 --> 00:13:02,069
connect to the to the serial port using

295
00:12:59,439 --> 00:13:02,069
PI kokum

296
00:13:02,369 --> 00:13:08,139
now we are in the serial port console we

297
00:13:06,129 --> 00:13:10,929
can show the help and we can execute

298
00:13:08,139 --> 00:13:14,109
some commands for example to them some

299
00:13:10,929 --> 00:13:16,659
memory address this is not very nice

300
00:13:14,109 --> 00:13:19,500
format so we are going to show some of

301
00:13:16,659 --> 00:13:26,880
these with a simple story that we made

302
00:13:19,500 --> 00:13:28,860
to them some secrets from the memory we

303
00:13:26,880 --> 00:13:31,020
can execute it as specifying the serial

304
00:13:28,860 --> 00:13:33,450
port and about rate and now after

305
00:13:31,020 --> 00:13:36,689
executing this we will see some of the

306
00:13:33,450 --> 00:13:38,730
secrets that we dump at in this case for

307
00:13:36,690 --> 00:13:42,720
example you can see that the miss rate

308
00:13:38,730 --> 00:13:45,270
or password was Lala in this case and

309
00:13:42,720 --> 00:13:46,920
after that there is a null byte and then

310
00:13:45,270 --> 00:13:49,860
you can see something that seems like

311
00:13:46,920 --> 00:13:52,439
part of the previous password that was

312
00:13:49,860 --> 00:13:54,570
not really reset after setting the new

313
00:13:52,440 --> 00:13:57,030
one that was shorter and of course all

314
00:13:54,570 --> 00:14:07,170
secrets are in clear test because it

315
00:13:57,030 --> 00:14:08,880
seems we are still in the 2000 okay

316
00:14:07,170 --> 00:14:11,400
and after this quick look at the

317
00:14:08,880 --> 00:14:15,210
hardware let's go for some of the common

318
00:14:11,400 --> 00:14:17,280
flaws found first a quick overview of

319
00:14:15,210 --> 00:14:21,810
the issues that we found in different

320
00:14:17,280 --> 00:14:24,060
parts of the printers just a red means

321
00:14:21,810 --> 00:14:26,489
high core critical risk orange mean

322
00:14:24,060 --> 00:14:28,290
medium risk and the skull means that we

323
00:14:26,490 --> 00:14:30,720
execute the code using that whatever it

324
00:14:28,290 --> 00:14:34,140
is we will see some of these hexagons in

325
00:14:30,720 --> 00:14:36,300
some of the slides we start with the

326
00:14:34,140 --> 00:14:38,069
application where we found really weak

327
00:14:36,300 --> 00:14:40,439
default configuration is posting almost

328
00:14:38,070 --> 00:14:42,960
all services available in the printer

329
00:14:40,440 --> 00:14:44,400
more than 20 in some cases also posting

330
00:14:42,960 --> 00:14:47,040
the management panel with the falkland

331
00:14:44,400 --> 00:14:49,860
service or without them and giving us

332
00:14:47,040 --> 00:14:52,620
the sensation of the security pros of 20

333
00:14:49,860 --> 00:14:54,260
years ago we found all the typical

334
00:14:52,620 --> 00:14:57,000
issues of web applications like

335
00:14:54,260 --> 00:14:59,550
cross-site request forgery broken access

336
00:14:57,000 --> 00:15:01,830
controls like for example to lower the

337
00:14:59,550 --> 00:15:04,349
full configuration of the device a full

338
00:15:01,830 --> 00:15:07,140
backup with theatres passwords and

339
00:15:04,350 --> 00:15:10,650
everything and some cross-site scripting

340
00:15:07,140 --> 00:15:13,050
issues like 1 2 3 & 4 basically all this

341
00:15:10,650 --> 00:15:14,850
is not bad but we were looking for

342
00:15:13,050 --> 00:15:17,339
something that may allow us to get full

343
00:15:14,850 --> 00:15:19,950
control device so looking at the fingers

344
00:15:17,340 --> 00:15:23,640
we found a few slightly more interesting

345
00:15:19,950 --> 00:15:26,900
functionalities like this one where you

346
00:15:23,640 --> 00:15:28,650
can see we got a lot of information like

347
00:15:26,900 --> 00:15:30,810
authorization of security locks

348
00:15:28,650 --> 00:15:33,100
including session cookies Active

349
00:15:30,810 --> 00:15:36,040
Directory locks travelers

350
00:15:33,100 --> 00:15:37,360
the full list of processes on more

351
00:15:36,040 --> 00:15:40,930
information about the underlying

352
00:15:37,360 --> 00:15:42,880
operating system these case we will see

353
00:15:40,930 --> 00:15:44,979
a bit more of this in one of the

354
00:15:42,880 --> 00:15:48,040
exploitation of one of this place after

355
00:15:44,980 --> 00:15:50,170
loop in a few minutes and the second

356
00:15:48,040 --> 00:15:52,230
case was similar to the first one we had

357
00:15:50,170 --> 00:15:55,630
different functionalities under

358
00:15:52,230 --> 00:15:58,270
different URLs and this third one was

359
00:15:55,630 --> 00:16:00,570
even better because it allowed us to

360
00:15:58,270 --> 00:16:05,079
dole out the full memory of the device

361
00:16:00,570 --> 00:16:06,190
dialect from here giving us any secret

362
00:16:05,080 --> 00:16:09,550
in the memory at that time like

363
00:16:06,190 --> 00:16:11,770
passwords or documents or whatever and

364
00:16:09,550 --> 00:16:13,240
of course all these issues do not

365
00:16:11,770 --> 00:16:18,610
require an authentication because they

366
00:16:13,240 --> 00:16:20,950
are hidden functionally this and let's

367
00:16:18,610 --> 00:16:24,399
go for the memory corruptions we found a

368
00:16:20,950 --> 00:16:27,010
lot too many more than we could handle

369
00:16:24,399 --> 00:16:30,640
or investigate so we stopped searching

370
00:16:27,010 --> 00:16:32,470
for more after finding a few of them we

371
00:16:30,640 --> 00:16:35,069
found in them in a lot of services not

372
00:16:32,470 --> 00:16:40,120
only the application but also in the

373
00:16:35,070 --> 00:16:41,980
printer services like IP PE or LTV also

374
00:16:40,120 --> 00:16:44,440
in the Google Cloud Print implementation

375
00:16:41,980 --> 00:16:47,260
is an innocent MP but we found but

376
00:16:44,440 --> 00:16:51,279
realities everywhere which leader to

377
00:16:47,260 --> 00:16:53,170
gracias everywhere and some useful

378
00:16:51,279 --> 00:16:56,110
structure ICC like this one in one of

379
00:16:53,170 --> 00:16:58,180
the debug interfaces where we are

380
00:16:56,110 --> 00:16:59,620
written the PC and this is from an

381
00:16:58,180 --> 00:17:02,640
asteroid that we are going to see in a

382
00:16:59,620 --> 00:17:02,640
few minutes okay

383
00:17:05,260 --> 00:17:10,000
let's go with a couple of examples this

384
00:17:07,510 --> 00:17:11,290
is the first one this bug was from my

385
00:17:10,000 --> 00:17:13,300
injury the Google Cloud

386
00:17:11,290 --> 00:17:14,949
pre-implementation you know though this

387
00:17:13,300 --> 00:17:17,079
services Google Cloud Print allows you

388
00:17:14,949 --> 00:17:20,230
to print remotely obviously in a printed

389
00:17:17,079 --> 00:17:23,050
you have probably configure it so the

390
00:17:20,230 --> 00:17:26,740
below the video diagram and you can for

391
00:17:23,050 --> 00:17:28,419
example use the the mobile them on your

392
00:17:26,740 --> 00:17:31,929
mobile phone or you brought her in order

393
00:17:28,420 --> 00:17:34,750
to bring from pending works okay let's

394
00:17:31,929 --> 00:17:36,640
go to see the registration process

395
00:17:34,750 --> 00:17:38,410
between the user and the printers for

396
00:17:36,640 --> 00:17:40,150
example you can see here the methods the

397
00:17:38,410 --> 00:17:42,370
first method which is a private info

398
00:17:40,150 --> 00:17:44,290
which is usually in order to get

399
00:17:42,370 --> 00:17:46,719
information about the Google brain

400
00:17:44,290 --> 00:17:48,610
a configurable within the printer and it

401
00:17:46,720 --> 00:17:50,620
also includes a token that we shall be

402
00:17:48,610 --> 00:17:51,610
used in the next recess your message

403
00:17:50,620 --> 00:17:54,610
okay

404
00:17:51,610 --> 00:17:57,429
and after that the first pivot register

405
00:17:54,610 --> 00:18:00,010
which has two parameters the action and

406
00:17:57,430 --> 00:18:02,020
the user and if everything is corded the

407
00:18:00,010 --> 00:18:03,610
printer will knowledge this message and

408
00:18:02,020 --> 00:18:05,500
after that you can continue with the

409
00:18:03,610 --> 00:18:07,899
recent registration process

410
00:18:05,500 --> 00:18:10,090
okay but we take a look at the first

411
00:18:07,900 --> 00:18:15,190
reason is in process you can see for

412
00:18:10,090 --> 00:18:16,959
example how stock Iraq was declared and

413
00:18:15,190 --> 00:18:19,330
after that for example where the code is

414
00:18:16,960 --> 00:18:21,700
checking the token that we are providing

415
00:18:19,330 --> 00:18:25,120
in order to see if this was ballot or

416
00:18:21,700 --> 00:18:27,850
not so what we can do here is first just

417
00:18:25,120 --> 00:18:30,399
record a private info get a ballot token

418
00:18:27,850 --> 00:18:32,770
and just the second Center second

419
00:18:30,400 --> 00:18:35,080
request with a ballot token and after

420
00:18:32,770 --> 00:18:37,330
that you use below the code you can see

421
00:18:35,080 --> 00:18:40,570
how the code is taking the actual value

422
00:18:37,330 --> 00:18:43,300
for this case is a start and this ticket

423
00:18:40,570 --> 00:18:44,889
is not value a cop in this value is a

424
00:18:43,300 --> 00:18:47,470
mem copy into a saccharide

425
00:18:44,890 --> 00:18:49,840
as will have any check here or bundle

426
00:18:47,470 --> 00:18:52,540
limitation it's a classic pass for a

427
00:18:49,840 --> 00:18:54,159
stack buffer overflow okay with the

428
00:18:52,540 --> 00:18:56,770
difficulty that we in that we came

429
00:18:54,160 --> 00:18:59,290
across in note expertise we detect a

430
00:18:56,770 --> 00:19:01,780
slur within the hip and stock obviously

431
00:18:59,290 --> 00:19:04,930
we'll have saw what about we can include

432
00:19:01,780 --> 00:19:07,720
GZ being within the printer the stock

433
00:19:04,930 --> 00:19:11,320
was executable we are trying to attack

434
00:19:07,720 --> 00:19:13,420
our TOS so in order to create or circle

435
00:19:11,320 --> 00:19:15,879
we should reverse engineer the RTOS

436
00:19:13,420 --> 00:19:18,520
detect or identify some useful

437
00:19:15,880 --> 00:19:20,170
information that we can use in our TOS

438
00:19:18,520 --> 00:19:23,040
and usually in order to create original

439
00:19:20,170 --> 00:19:23,040
code okay

440
00:19:23,410 --> 00:19:27,580
once this problems that we also in the

441
00:19:25,180 --> 00:19:29,110
five years that we didn't have no

442
00:19:27,580 --> 00:19:31,300
supplies in space in order to allocate

443
00:19:29,110 --> 00:19:34,000
original code so we solve this problem

444
00:19:31,300 --> 00:19:38,710
with a classical leg hunter they'll help

445
00:19:34,000 --> 00:19:41,470
us we have did we obviously have direct

446
00:19:38,710 --> 00:19:43,630
PC algorithm the hip atom fury and

447
00:19:41,470 --> 00:19:45,820
configuration addresses wall executable

448
00:19:43,630 --> 00:19:48,070
and the configuration addresses were

449
00:19:45,820 --> 00:19:50,620
also static so we can using these in

450
00:19:48,070 --> 00:19:52,629
order to bypass their SLR okay so this

451
00:19:50,620 --> 00:19:54,669
petition change that we did we are going

452
00:19:52,630 --> 00:19:56,440
to set a heart like hunter within

453
00:19:54,670 --> 00:19:57,560
unknown configuration others remember

454
00:19:56,440 --> 00:19:59,600
they are studying

455
00:19:57,560 --> 00:20:01,700
we're going to send a short code with an

456
00:19:59,600 --> 00:20:03,080
egg to the printer I said that we are

457
00:20:01,700 --> 00:20:05,720
going to try to trigger the buffer

458
00:20:03,080 --> 00:20:07,790
overflow and jump it or a Egg hunter and

459
00:20:05,720 --> 00:20:09,980
always hunting we start looking for

460
00:20:07,790 --> 00:20:13,730
ocean coding memory for example in the

461
00:20:09,980 --> 00:20:17,180
hip and after find it this handle will

462
00:20:13,730 --> 00:20:19,540
jump into our shell code ok let's do a

463
00:20:17,180 --> 00:20:23,120
quick demo for this mo want to modify

464
00:20:19,540 --> 00:20:25,129
printer functionality we saw that we

465
00:20:23,120 --> 00:20:26,959
decide to implement not tell it

466
00:20:25,130 --> 00:20:37,790
authentication bypass that we'll see now

467
00:20:26,960 --> 00:20:42,350
ok this is this is Floyd displayed needs

468
00:20:37,790 --> 00:20:43,850
a target AP and a target port but before

469
00:20:42,350 --> 00:20:46,219
that we are going to check the tailored

470
00:20:43,850 --> 00:20:47,570
Fla services as you can see here after

471
00:20:46,220 --> 00:20:50,840
coming to the telnet service it is

472
00:20:47,570 --> 00:20:54,320
requesting a local credentials to do now

473
00:20:50,840 --> 00:20:56,120
is use orgs exploit in order to bypass

474
00:20:54,320 --> 00:20:59,750
this we are going to attack the pizza to

475
00:20:56,120 --> 00:21:01,760
import 80 and after two cuties you can

476
00:20:59,750 --> 00:21:03,740
see for example how we are getting a

477
00:21:01,760 --> 00:21:06,970
token a valid token in order to do this

478
00:21:03,740 --> 00:21:09,950
and we are executing all a hunter ok and

479
00:21:06,970 --> 00:21:12,110
we are going to do to a check or teller

480
00:21:09,950 --> 00:21:14,660
down as you can see here we were able to

481
00:21:12,110 --> 00:21:17,929
bypass the 10 L going like we can

482
00:21:14,660 --> 00:21:20,230
accidentally to all telnet menu and we

483
00:21:17,930 --> 00:21:23,960
are also implemented cool payload within

484
00:21:20,230 --> 00:21:25,790
the within the exploit that provide us

485
00:21:23,960 --> 00:21:28,430
the administration password which is

486
00:21:25,790 --> 00:21:30,260
super powerful so in case you forgot it

487
00:21:28,430 --> 00:21:34,180
you can use this deployed in order to to

488
00:21:30,260 --> 00:21:38,390
get it ok so let's go with the next

489
00:21:34,180 --> 00:21:42,260
Floyd this is the second exploit we call

490
00:21:38,390 --> 00:21:44,750
it this the Edit Twiggy case not because

491
00:21:42,260 --> 00:21:46,400
for the because a printer implements a

492
00:21:44,750 --> 00:21:47,690
strong protection but for the

493
00:21:46,400 --> 00:21:49,910
difficulties that we came across in

494
00:21:47,690 --> 00:21:50,390
order to exploit this bug that we will

495
00:21:49,910 --> 00:21:53,630
see now

496
00:21:50,390 --> 00:21:55,370
ok this bug was for my one of a web

497
00:21:53,630 --> 00:21:59,120
application classes as you can see in

498
00:21:55,370 --> 00:22:03,169
the image as a semi-aquatic crafted HTTP

499
00:21:59,120 --> 00:22:07,239
request with a long path the printer

500
00:22:03,170 --> 00:22:09,590
classes properties and no buffer also so

501
00:22:07,240 --> 00:22:10,759
these are contained in order to cross

502
00:22:09,590 --> 00:22:14,948
the printer

503
00:22:10,759 --> 00:22:18,529
we glued 200 eggs within the bath okay

504
00:22:14,949 --> 00:22:20,299
but the baby probably is the five here

505
00:22:18,529 --> 00:22:22,699
when we start to exploit this fact is

506
00:22:20,299 --> 00:22:24,918
that we were enabled to decrease the

507
00:22:22,699 --> 00:22:26,570
finger okay so probably because they are

508
00:22:24,919 --> 00:22:29,359
encrypting the finger with a private key

509
00:22:26,570 --> 00:22:31,458
included within the printer so we have a

510
00:22:29,359 --> 00:22:33,079
bulletin but we all have the finger

511
00:22:31,459 --> 00:22:35,389
we'll have the binary we will have any

512
00:22:33,079 --> 00:22:37,940
code associated to this variety we need

513
00:22:35,389 --> 00:22:40,129
we need to find a way in order to

514
00:22:37,940 --> 00:22:42,320
exploit this vulnerability okay so we

515
00:22:40,129 --> 00:22:43,968
thought here it was great we don't have

516
00:22:42,320 --> 00:22:46,309
that information but we are going to try

517
00:22:43,969 --> 00:22:48,619
to collect as much information as we can

518
00:22:46,309 --> 00:22:51,289
in order to find a way in order to split

519
00:22:48,619 --> 00:22:52,908
disability okay so we remember for

520
00:22:51,289 --> 00:22:56,479
example as Mary committee before that

521
00:22:52,909 --> 00:23:00,579
this printer provide us I suppose

522
00:22:56,479 --> 00:23:02,749
URT serial port were after execute or

523
00:23:00,579 --> 00:23:05,599
previous proof of concept you can see

524
00:23:02,749 --> 00:23:08,809
for example how we were able to override

525
00:23:05,599 --> 00:23:11,539
the PC register they are a lower

526
00:23:08,809 --> 00:23:14,359
register our resistor from the r4 and

527
00:23:11,539 --> 00:23:16,279
until they are 11 resistors so we have

528
00:23:14,359 --> 00:23:19,698
some information useful information here

529
00:23:16,279 --> 00:23:22,219
in the in or you are T in the bat-pole

530
00:23:19,699 --> 00:23:24,889
but this was not you know we need more

531
00:23:22,219 --> 00:23:26,509
information north to this so we found

532
00:23:24,889 --> 00:23:29,119
another interesting information if

533
00:23:26,509 --> 00:23:31,489
molarity the an information distillate

534
00:23:29,119 --> 00:23:35,208
ability the provides token cookies

535
00:23:31,489 --> 00:23:37,190
blocks etc system and process

536
00:23:35,209 --> 00:23:40,429
information process information like

537
00:23:37,190 --> 00:23:42,859
this one this process mapping so with

538
00:23:40,429 --> 00:23:44,929
salt here is okay we have the proceed

539
00:23:42,859 --> 00:23:46,698
mapping so we're going to 25 work

540
00:23:44,929 --> 00:23:49,909
process crashing I want to try to

541
00:23:46,699 --> 00:23:52,309
compare both mappings okay well this is

542
00:23:49,909 --> 00:23:54,469
that we in in two differents execution

543
00:23:52,309 --> 00:23:58,099
obviously we're going to wanna see that

544
00:23:54,469 --> 00:24:00,379
we defy here is we have we don't have an

545
00:23:58,099 --> 00:24:03,859
SLA within the text section so we can

546
00:24:00,379 --> 00:24:07,428
use in order to this address in or

547
00:24:03,859 --> 00:24:09,168
include to in North Shore code sorry but

548
00:24:07,429 --> 00:24:11,559
we in fact that the first white wasn't

549
00:24:09,169 --> 00:24:14,329
nobody so it could be a problem for us

550
00:24:11,559 --> 00:24:18,079
next is things that we defy that the a

551
00:24:14,329 --> 00:24:20,149
so the library did not implement as well

552
00:24:18,079 --> 00:24:22,560
so it's time that is loaded into their

553
00:24:20,149 --> 00:24:25,290
binary it's going to be lost in the same

554
00:24:22,560 --> 00:24:28,409
okay but remember that we don't have the

555
00:24:25,290 --> 00:24:32,580
code for the libraries okay

556
00:24:28,410 --> 00:24:34,860
the next thing is what the stat was

557
00:24:32,580 --> 00:24:36,360
implementing I solar as you can see here

558
00:24:34,860 --> 00:24:40,409
this is a different knowledge that this

559
00:24:36,360 --> 00:24:42,300
one and the last is that this the stock

560
00:24:40,410 --> 00:24:44,310
was executable which is really good for

561
00:24:42,300 --> 00:24:48,210
us because we can allocate a shellcode

562
00:24:44,310 --> 00:24:50,700
in memory in this time okay let's go

563
00:24:48,210 --> 00:24:52,410
with the difficulties early remember and

564
00:24:50,700 --> 00:24:55,950
again that we have the thing were the

565
00:24:52,410 --> 00:24:58,050
binaries we have a slur within the heap

566
00:24:55,950 --> 00:25:00,240
and the stack we they have so what the

567
00:24:58,050 --> 00:25:02,280
back and it helped us that we have is

568
00:25:00,240 --> 00:25:05,100
the PC overwritten this tab was

569
00:25:02,280 --> 00:25:09,240
executable of we saw in the previous

570
00:25:05,100 --> 00:25:12,810
slide we in the stack trace sorry the

571
00:25:09,240 --> 00:25:14,850
libraries would did not use a solar as

572
00:25:12,810 --> 00:25:17,060
we saw in the previous slide we have

573
00:25:14,850 --> 00:25:19,679
some interesting information within them

574
00:25:17,060 --> 00:25:22,409
sorry within the stack trace that we've

575
00:25:19,680 --> 00:25:24,960
been using order to exploit this bug so

576
00:25:22,410 --> 00:25:26,820
thinking about it we define three three

577
00:25:24,960 --> 00:25:29,670
different approach that you can use for

578
00:25:26,820 --> 00:25:31,290
this the the first one is taking

579
00:25:29,670 --> 00:25:33,600
advantage of the hovering for debug

580
00:25:31,290 --> 00:25:36,090
information the second one is brute

581
00:25:33,600 --> 00:25:38,429
force in the stack pointer address and

582
00:25:36,090 --> 00:25:40,889
the last one is something a we call it

583
00:25:38,430 --> 00:25:44,490
blind written or in the program which

584
00:25:40,890 --> 00:25:46,500
needs a name that we call its phone okay

585
00:25:44,490 --> 00:25:47,670
let's go with the first one this taking

586
00:25:46,500 --> 00:25:49,800
advantage of the heart with the bug

587
00:25:47,670 --> 00:25:51,960
information well this is that we

588
00:25:49,800 --> 00:25:54,629
identify when we were analyzing the

589
00:25:51,960 --> 00:25:56,640
stack trace is that destructor

590
00:25:54,630 --> 00:26:00,600
also brings from something like a code

591
00:25:56,640 --> 00:26:03,750
or op codes okay we identify that this

592
00:26:00,600 --> 00:26:06,389
code was diddly associated to or PC

593
00:26:03,750 --> 00:26:08,220
register so we thought if we can totally

594
00:26:06,390 --> 00:26:11,000
BC register well we can do is for

595
00:26:08,220 --> 00:26:15,090
example brute force APC listicles from

596
00:26:11,000 --> 00:26:17,580
library address and try to dump all call

597
00:26:15,090 --> 00:26:20,070
associated to a library okay so we can

598
00:26:17,580 --> 00:26:23,370
build the library code is the library

599
00:26:20,070 --> 00:26:25,110
code offline and use this library in

600
00:26:23,370 --> 00:26:25,820
order to create a shell code for a

601
00:26:25,110 --> 00:26:29,520
change

602
00:26:25,820 --> 00:26:30,929
but this was a big fail because what we

603
00:26:29,520 --> 00:26:33,510
thought that was potential code knows

604
00:26:30,930 --> 00:26:35,280
was not code is go see stack data so we

605
00:26:33,510 --> 00:26:36,710
can use this in order to create ocean

606
00:26:35,280 --> 00:26:39,740
post

607
00:26:36,710 --> 00:26:41,970
they fell let's go with the second

608
00:26:39,740 --> 00:26:45,420
approach which is a brute-force in the

609
00:26:41,970 --> 00:26:49,290
stack pointer or goal here is just was

610
00:26:45,420 --> 00:26:52,260
defeat the stack entropy okay so but

611
00:26:49,290 --> 00:26:55,399
after more than one thousand hundred one

612
00:26:52,260 --> 00:27:01,050
hundred thousand sorry tries to identify

613
00:26:55,400 --> 00:27:03,540
we got less than 0.1 percentage of

614
00:27:01,050 --> 00:27:06,330
success so probably or exploit is going

615
00:27:03,540 --> 00:27:09,149
to be less reliable that some Metasploit

616
00:27:06,330 --> 00:27:12,080
exploit so is this not work for us these

617
00:27:09,150 --> 00:27:15,060
are another be fed too many our question

618
00:27:12,080 --> 00:27:17,340
that will be the last approach with his

619
00:27:15,060 --> 00:27:19,649
blind return oriented programming

620
00:27:17,340 --> 00:27:23,220
okay the mingle with this approach this

621
00:27:19,650 --> 00:27:25,640
quest was trying to figure out what

622
00:27:23,220 --> 00:27:28,680
extraction squad executed in memory

623
00:27:25,640 --> 00:27:32,730
based on the stud trace information and

624
00:27:28,680 --> 00:27:34,110
try and try to find some useful regards

625
00:27:32,730 --> 00:27:37,590
that we're going to use within old Rob

626
00:27:34,110 --> 00:27:39,270
change okay so what we're going to do is

627
00:27:37,590 --> 00:27:41,639
brute force in the PC register with

628
00:27:39,270 --> 00:27:44,700
unknown libraries the address library

629
00:27:41,640 --> 00:27:47,850
address and try to guess exactly what is

630
00:27:44,700 --> 00:27:50,130
happening in the memory okay all based

631
00:27:47,850 --> 00:27:52,860
in the registers at that phase the

632
00:27:50,130 --> 00:27:54,740
structure is information so in order to

633
00:27:52,860 --> 00:27:58,500
do that we're going to use this payload

634
00:27:54,740 --> 00:28:03,210
we are going to override from the r5 and

635
00:27:58,500 --> 00:28:05,640
until our terroristic with ABC etc and

636
00:28:03,210 --> 00:28:09,120
we are going to brute force the frame

637
00:28:05,640 --> 00:28:12,210
pointer the FFP and PC register with

638
00:28:09,120 --> 00:28:14,939
library like Lipsy Allah remember the

639
00:28:12,210 --> 00:28:16,650
lady gnome implement SLR so we know in

640
00:28:14,940 --> 00:28:19,950
Salik where they were allocated in

641
00:28:16,650 --> 00:28:22,650
memory okay and after that we are going

642
00:28:19,950 --> 00:28:23,330
to include 100 eggs within the stack

643
00:28:22,650 --> 00:28:26,040
pointer

644
00:28:23,330 --> 00:28:28,340
let's go with the some examples in order

645
00:28:26,040 --> 00:28:32,820
to do that this is the first one you

646
00:28:28,340 --> 00:28:34,740
look good yeah okay for example after

647
00:28:32,820 --> 00:28:37,020
the executor and now there is a random

648
00:28:34,740 --> 00:28:39,000
address we we were identified that they

649
00:28:37,020 --> 00:28:41,730
are for register was already within my

650
00:28:39,000 --> 00:28:45,120
data including within stop pointer for X

651
00:28:41,730 --> 00:28:47,880
okay so probably we are going to try to

652
00:28:45,120 --> 00:28:49,229
get this correct what the application is

653
00:28:47,880 --> 00:28:51,630
executing is this

654
00:28:49,230 --> 00:28:56,010
- a pop which is popping the r4 register

655
00:28:51,630 --> 00:28:58,530
okay and after that we were able to to

656
00:28:56,010 --> 00:29:00,809
see that or PC register was also over

657
00:28:58,530 --> 00:29:02,220
with him by the information included all

658
00:29:00,809 --> 00:29:04,200
the others included within there are

659
00:29:02,220 --> 00:29:05,940
seven so probably with the kinetic in

660
00:29:04,200 --> 00:29:08,580
the cameras or the application is acute

661
00:29:05,940 --> 00:29:11,730
in is something like a move moving the

662
00:29:08,580 --> 00:29:14,159
Earth's register into the PDF so these

663
00:29:11,730 --> 00:29:16,049
are basic basic gadget Rob gadget that

664
00:29:14,160 --> 00:29:18,210
we can use this you can use these

665
00:29:16,049 --> 00:29:20,730
digital gadget in order to control the

666
00:29:18,210 --> 00:29:24,090
art for register and as I continue with

667
00:29:20,730 --> 00:29:26,940
execution flow okay the second example

668
00:29:24,090 --> 00:29:29,010
and is a bit more complicated we have

669
00:29:26,940 --> 00:29:31,320
the same here we can control there are

670
00:29:29,010 --> 00:29:33,720
seven register within stock data

671
00:29:31,320 --> 00:29:36,510
so probably executing a pop are seven

672
00:29:33,720 --> 00:29:38,730
another important point here is that the

673
00:29:36,510 --> 00:29:41,429
article Register has a similar large

674
00:29:38,730 --> 00:29:43,049
others that or a stack pointer so

675
00:29:41,429 --> 00:29:45,570
probably what the connect the

676
00:29:43,049 --> 00:29:47,730
application is executing is an artist

677
00:29:45,570 --> 00:29:50,189
rating which is adding two hundred four

678
00:29:47,730 --> 00:29:52,799
bytes into the stack pointer and storing

679
00:29:50,190 --> 00:29:57,150
these in this address into there into a

680
00:29:52,799 --> 00:29:59,549
six register okay and after that the PC

681
00:29:57,150 --> 00:30:02,130
district was probably waiting by the r7

682
00:29:59,549 --> 00:30:06,418
others so which is written a mob

683
00:30:02,130 --> 00:30:09,419
associate address sorry also let's go

684
00:30:06,419 --> 00:30:11,700
with the last last example which is this

685
00:30:09,419 --> 00:30:15,270
one we can also control the r4 register

686
00:30:11,700 --> 00:30:18,090
with a stack data and the important

687
00:30:15,270 --> 00:30:20,129
point here is that or PC register was

688
00:30:18,090 --> 00:30:23,280
operating with the stack pointer address

689
00:30:20,130 --> 00:30:25,919
so what that means is that within this

690
00:30:23,280 --> 00:30:29,250
rock attic we can jump into our stack

691
00:30:25,919 --> 00:30:31,679
and so using all these gadgets we can

692
00:30:29,250 --> 00:30:33,990
create a rope change in order to jump or

693
00:30:31,679 --> 00:30:37,799
a stack and remember that all stock or

694
00:30:33,990 --> 00:30:39,809
stock was executable so using these Rock

695
00:30:37,799 --> 00:30:41,400
ideas we were able to create an initial

696
00:30:39,809 --> 00:30:44,360
call in order to scroll this one already

697
00:30:41,400 --> 00:30:52,640
so these are great success for us so

698
00:30:44,360 --> 00:30:54,840
let's go with the demo this one this one

699
00:30:52,640 --> 00:30:59,520
okay this display that we're going to

700
00:30:54,840 --> 00:31:01,678
execute let me this is Floyd we did it a

701
00:30:59,520 --> 00:31:02,480
target API recipe others opening we are

702
00:31:01,679 --> 00:31:06,140
going to

703
00:31:02,480 --> 00:31:10,390
nation to or machine so let's go with to

704
00:31:06,140 --> 00:31:10,390
take or IP address which is this one

705
00:31:10,780 --> 00:31:18,410
but before wanted to go to exploit in

706
00:31:15,350 --> 00:31:20,689
the printer Freeport this is a DPR going

707
00:31:18,410 --> 00:31:23,180
to receive the rebus connection but

708
00:31:20,690 --> 00:31:25,940
before that we will exploit hallo we're

709
00:31:23,180 --> 00:31:29,780
going to stick with metal in there port

710
00:31:25,940 --> 00:31:32,210
1 3 3 7 and after that we are going to

711
00:31:29,780 --> 00:31:35,240
execute or exploit we can see here for

712
00:31:32,210 --> 00:31:37,220
example how we are using sublease ers

713
00:31:35,240 --> 00:31:43,000
you know it well over a change execute

714
00:31:37,220 --> 00:31:45,800
the shellcode and we got printer 3 rebus

715
00:31:43,000 --> 00:31:47,240
connection so we now execute some

716
00:31:45,800 --> 00:31:51,320
comments like Who am I

717
00:31:47,240 --> 00:31:54,860
we got a basis in this printer ok we can

718
00:31:51,320 --> 00:31:58,970
secure another comment like LS or other

719
00:31:54,860 --> 00:32:00,860
comments like if config but what is it

720
00:31:58,970 --> 00:32:03,170
that we can also do it for example read

721
00:32:00,860 --> 00:32:04,969
census information from the printer

722
00:32:03,170 --> 00:32:08,090
we was the thing that we identify that

723
00:32:04,970 --> 00:32:10,220
this printer was was configured an echo

724
00:32:08,090 --> 00:32:12,980
folder with the mine account so we are

725
00:32:10,220 --> 00:32:14,600
going to read this file and we can find

726
00:32:12,980 --> 00:32:17,360
for example here they don't mind the

727
00:32:14,600 --> 00:32:20,360
user Dominick on and the density path

728
00:32:17,360 --> 00:32:23,810
which is don't mind don't mind use

729
00:32:20,360 --> 00:32:26,479
domain passport so we were able to get a

730
00:32:23,810 --> 00:32:28,129
rebel cell with group events I get

731
00:32:26,480 --> 00:32:32,870
sensitive information from the printer

732
00:32:28,130 --> 00:32:36,080
ok this is a second demo and we have a

733
00:32:32,870 --> 00:32:38,239
bonus exploit or demo here this is a

734
00:32:36,080 --> 00:32:40,580
buffer flow that we define another

735
00:32:38,240 --> 00:32:42,440
printer but sorry but we don't have

736
00:32:40,580 --> 00:32:45,110
enough time to show you all the tiles

737
00:32:42,440 --> 00:32:48,290
but no worry because we create we

738
00:32:45,110 --> 00:32:51,740
publish a blog post soon okay so for the

739
00:32:48,290 --> 00:32:53,030
previous demo we were able to get root

740
00:32:51,740 --> 00:32:54,590
shelves

741
00:32:53,030 --> 00:32:59,540
read sensitive information like

742
00:32:54,590 --> 00:33:02,889
passwords oh great Senta content

743
00:32:59,540 --> 00:33:05,659
syndication bypass but we asked it as

744
00:33:02,890 --> 00:33:09,470
what what is one of the most important

745
00:33:05,660 --> 00:33:11,240
data managed by a printer only the

746
00:33:09,470 --> 00:33:13,160
documents so why don't create a

747
00:33:11,240 --> 00:33:15,770
shortcode that hooks the brief in

748
00:33:13,160 --> 00:33:17,920
tonality and still all data and

749
00:33:15,770 --> 00:33:21,170
throughout the best connection okay so

750
00:33:17,920 --> 00:33:23,240
reversal so seems like a good plan for

751
00:33:21,170 --> 00:33:24,590
us so let's go with the demo for this

752
00:33:23,240 --> 00:33:26,180
demo we're going to have two different

753
00:33:24,590 --> 00:33:28,250
machines that occur machine that will

754
00:33:26,180 --> 00:33:29,960
execute exploit and or exploit handler

755
00:33:28,250 --> 00:33:33,560
that will receive the information from

756
00:33:29,960 --> 00:33:35,510
the printer and the Big D machine that

757
00:33:33,560 --> 00:33:37,879
will send the document to the printer

758
00:33:35,510 --> 00:33:41,660
and the right side you can also see the

759
00:33:37,880 --> 00:33:52,970
Hackett printer ok so let me open the

760
00:33:41,660 --> 00:33:55,130
demo which is this one or consider oh ok

761
00:33:52,970 --> 00:33:59,360
this is the attacker machine and this is

762
00:33:55,130 --> 00:34:02,780
the PLSS to the attacker machine below

763
00:33:59,360 --> 00:34:04,580
you can see the exploit ok this point

764
00:34:02,780 --> 00:34:06,500
need three different argument the target

765
00:34:04,580 --> 00:34:09,500
IP the target pot and the reverse IP

766
00:34:06,500 --> 00:34:11,570
address which will be for machine so

767
00:34:09,500 --> 00:34:14,090
we're going to attack the printer 1 port

768
00:34:11,570 --> 00:34:16,399
80 I'm going to group here or attacking

769
00:34:14,090 --> 00:34:18,679
machine IP address but before that we

770
00:34:16,399 --> 00:34:20,270
are going to execute or explode healthy

771
00:34:18,679 --> 00:34:22,760
that we receive all information from the

772
00:34:20,270 --> 00:34:24,679
printer we're going to execute this with

773
00:34:22,760 --> 00:34:29,060
black color which is listening the port

774
00:34:24,679 --> 00:34:32,000
157 I'm going now to execute or exploit

775
00:34:29,060 --> 00:34:35,750
I don't know if you can see well but the

776
00:34:32,000 --> 00:34:37,699
satellite you can see how we we use

777
00:34:35,750 --> 00:34:41,389
memory in early twenty five original

778
00:34:37,699 --> 00:34:43,009
code in memory and we got our

779
00:34:41,389 --> 00:34:44,569
explanation from the printer with the

780
00:34:43,010 --> 00:34:46,550
presented had the planning frame which

781
00:34:44,570 --> 00:34:49,100
is a centric way that we included within

782
00:34:46,550 --> 00:34:51,590
the shell code so let's go change to the

783
00:34:49,100 --> 00:34:54,168
victim machine which is which has a

784
00:34:51,590 --> 00:34:56,300
different IP address what we're going to

785
00:34:54,168 --> 00:34:59,000
do now is send a document this document

786
00:34:56,300 --> 00:35:02,990
to the to the printer using the same

787
00:34:59,000 --> 00:35:05,030
printer which is the printer one which

788
00:35:02,990 --> 00:35:08,870
is the protect one another click in ok

789
00:35:05,030 --> 00:35:11,420
button we can see how or exploit Holly's

790
00:35:08,870 --> 00:35:13,580
receive in Delta ok from the printer we

791
00:35:11,420 --> 00:35:19,850
are now converting the data from PCL to

792
00:35:13,580 --> 00:35:21,680
the a PDF and NASA seconds if you know

793
00:35:19,850 --> 00:35:23,540
this is the document we were able to

794
00:35:21,680 --> 00:35:25,940
steal from the printer and the printer

795
00:35:23,540 --> 00:35:27,350
the hakka pretty continuous still pretty

796
00:35:25,940 --> 00:35:29,750
normally

797
00:35:27,350 --> 00:35:33,020
and or explore you holler also implement

798
00:35:29,750 --> 00:35:34,340
a few generated that allow us to forward

799
00:35:33,020 --> 00:35:36,500
the document to another printer

800
00:35:34,340 --> 00:35:39,500
controlled by the hacker so we have the

801
00:35:36,500 --> 00:35:43,250
same document in PDF and in paper so

802
00:35:39,500 --> 00:35:49,760
let's go for us so let's go with the

803
00:35:43,250 --> 00:35:52,700
process position ok I hope you are all

804
00:35:49,760 --> 00:35:57,620
still alive after and any trying to

805
00:35:52,700 --> 00:36:01,520
explain these last sprites so a question

806
00:35:57,620 --> 00:36:04,460
many people asked us was if you we were

807
00:36:01,520 --> 00:36:06,680
able to achieve situ persistent with

808
00:36:04,460 --> 00:36:08,630
these vulnerabilities so depending on

809
00:36:06,680 --> 00:36:11,660
the operating system we may have

810
00:36:08,630 --> 00:36:13,370
different options with offer to but

811
00:36:11,660 --> 00:36:17,540
there may be others and there may be

812
00:36:13,370 --> 00:36:19,670
printer dependent ones in the case of

813
00:36:17,540 --> 00:36:21,440
devices running line notes we will try

814
00:36:19,670 --> 00:36:24,320
to write a file system for example we

815
00:36:21,440 --> 00:36:27,860
can try to add a line to Ana startup

816
00:36:24,320 --> 00:36:30,050
script this is not what we see see as

817
00:36:27,860 --> 00:36:32,510
the mount points with the script some

818
00:36:30,050 --> 00:36:35,060
wineries may be mounted at read-only but

819
00:36:32,510 --> 00:36:36,500
we can always try to use the one where

820
00:36:35,060 --> 00:36:39,980
the user configuration he said we'd

821
00:36:36,500 --> 00:36:42,530
surely write about and in note we can

822
00:36:39,980 --> 00:36:44,980
also try to remount the read-only mount

823
00:36:42,530 --> 00:36:48,200
points if that's possible

824
00:36:44,980 --> 00:36:52,970
the second option will be just to pass

825
00:36:48,200 --> 00:36:54,830
nothing where we can for example to pass

826
00:36:52,970 --> 00:36:57,649
the to reverse-engineer the

827
00:36:54,830 --> 00:37:01,940
functionality and Pudsey to disable any

828
00:36:57,650 --> 00:37:04,490
integrity or signator checks or we could

829
00:37:01,940 --> 00:37:06,560
also try to delete pass the finger in

830
00:37:04,490 --> 00:37:09,560
that persistent memory directly of

831
00:37:06,560 --> 00:37:11,600
course these two last options are a bit

832
00:37:09,560 --> 00:37:13,520
more time-consuming quite more

833
00:37:11,600 --> 00:37:15,110
time-consuming and may easily end up

834
00:37:13,520 --> 00:37:17,960
with a big device so we need to be very

835
00:37:15,110 --> 00:37:20,150
careful for that and to show the

836
00:37:17,960 --> 00:37:22,640
potential capabilities of an embedded

837
00:37:20,150 --> 00:37:25,940
device backdoor in for example a

838
00:37:22,640 --> 00:37:28,000
printers we make one medievalists our

839
00:37:25,940 --> 00:37:30,110
college from NCC hadass with this

840
00:37:28,000 --> 00:37:32,600
developing a command and control client

841
00:37:30,110 --> 00:37:34,810
and a generic line is bad or that can be

842
00:37:32,600 --> 00:37:37,040
cross-compiled for different detectors

843
00:37:34,810 --> 00:37:40,100
the backdoor has so far these

844
00:37:37,040 --> 00:37:41,000
capabilities that you consider for

845
00:37:40,100 --> 00:37:42,560
example one

846
00:37:41,000 --> 00:37:46,430
we didn't so in some of the examples

847
00:37:42,560 --> 00:37:48,529
before that will be to use the printer

848
00:37:46,430 --> 00:37:52,368
to pivot into an internal network and

849
00:37:48,530 --> 00:38:05,690
let's see some of this in in the last

850
00:37:52,369 --> 00:38:09,230
demo okay we have here or command and

851
00:38:05,690 --> 00:38:11,750
control client and some of the commands

852
00:38:09,230 --> 00:38:12,290
that we implemented you can see about

853
00:38:11,750 --> 00:38:14,690
that

854
00:38:12,290 --> 00:38:17,330
we have received a connection from the

855
00:38:14,690 --> 00:38:21,680
bot Co it's your printer from that IP

856
00:38:17,330 --> 00:38:23,630
address so we can for example list the

857
00:38:21,680 --> 00:38:26,660
bots connected to the command and

858
00:38:23,630 --> 00:38:29,450
control in this case only one and we can

859
00:38:26,660 --> 00:38:32,240
use it and start executing commands for

860
00:38:29,450 --> 00:38:34,700
example so we are going to show you some

861
00:38:32,240 --> 00:38:37,069
commands to get some useful information

862
00:38:34,700 --> 00:38:41,868
from the from on target the printer this

863
00:38:37,070 --> 00:38:44,030
case Helena's one and you can see that

864
00:38:41,869 --> 00:38:48,170
we are route it was from the last sprite

865
00:38:44,030 --> 00:38:49,820
and we are going to pull a file from the

866
00:38:48,170 --> 00:38:51,650
printer to our machine we are going to

867
00:38:49,820 --> 00:38:53,900
load for example a private certificate

868
00:38:51,650 --> 00:38:56,510
that was generated inside the printer

869
00:38:53,900 --> 00:38:59,349
and we are saving it locally so after

870
00:38:56,510 --> 00:39:04,250
just executing that we can read that

871
00:38:59,349 --> 00:39:08,540
present file and see for example the

872
00:39:04,250 --> 00:39:12,440
contents of a private key which was in

873
00:39:08,540 --> 00:39:14,540
for SSL now we are going to shop for

874
00:39:12,440 --> 00:39:16,099
example where the management panels are

875
00:39:14,540 --> 00:39:18,680
stored we already know where they are so

876
00:39:16,099 --> 00:39:21,230
we can just execute a cut command with

877
00:39:18,680 --> 00:39:24,230
them and surprisingly this case they are

878
00:39:21,230 --> 00:39:26,900
hiding sha-256 instead of winning clear

879
00:39:24,230 --> 00:39:31,010
test which seems like something big now

880
00:39:26,900 --> 00:39:33,980
for what we saw before he was also

881
00:39:31,010 --> 00:39:37,190
salted and now let's see how we

882
00:39:33,980 --> 00:39:41,420
persisted in this printer we can execute

883
00:39:37,190 --> 00:39:44,839
our show and start issuing commands for

884
00:39:41,420 --> 00:39:51,740
example we are going to see that VAR f s

885
00:39:44,839 --> 00:39:53,420
is writable and so we can store things

886
00:39:51,740 --> 00:39:54,319
here for example we already store or

887
00:39:53,420 --> 00:39:57,229
ignore

888
00:39:54,319 --> 00:39:59,569
this folder manifest totally nota back

889
00:39:57,229 --> 00:40:03,019
door and where we have the or teat

890
00:39:59,569 --> 00:40:05,269
service which is our back door and how

891
00:40:03,019 --> 00:40:08,419
can we execute this automatically we

892
00:40:05,269 --> 00:40:11,508
found in this case that the VNC folder

893
00:40:08,420 --> 00:40:13,999
contains two links to binary on us and

894
00:40:11,509 --> 00:40:16,940
start up a script so we can just replace

895
00:40:13,999 --> 00:40:21,499
it for some reason is being a seed from

896
00:40:16,940 --> 00:40:23,989
here itself from the original file so we

897
00:40:21,499 --> 00:40:28,609
can edit the server let's say it's a

898
00:40:23,989 --> 00:40:30,890
save a copy and I'll replace it you can

899
00:40:28,609 --> 00:40:34,190
see that we are these three lines and

900
00:40:30,890 --> 00:40:36,109
the second one we are just executive or

901
00:40:34,190 --> 00:40:38,989
tick surgeries with or command and

902
00:40:36,109 --> 00:40:42,589
control IP address and a port and that's

903
00:40:38,989 --> 00:40:45,259
how we could persist in this printer and

904
00:40:42,589 --> 00:40:47,328
finally let's see how we can use the

905
00:40:45,259 --> 00:40:50,479
backdoor to pivot to the printers

906
00:40:47,329 --> 00:40:54,469
network so we are going to use the socks

907
00:40:50,479 --> 00:40:58,160
proxy capability creating a proxy in the

908
00:40:54,469 --> 00:41:01,729
port wenches before as you can see here

909
00:40:58,160 --> 00:41:04,160
we have already created it I know let's

910
00:41:01,729 --> 00:41:06,468
go to a web browser and we are going to

911
00:41:04,160 --> 00:41:09,170
try to access the internal server local

912
00:41:06,469 --> 00:41:11,959
address we don't know even how to

913
00:41:09,170 --> 00:41:15,380
resolve that name from our machine so we

914
00:41:11,959 --> 00:41:21,140
can now configure proxy we have

915
00:41:15,380 --> 00:41:23,630
configured it here and after changing to

916
00:41:21,140 --> 00:41:26,839
use the proxy in stuff instead of none

917
00:41:23,630 --> 00:41:31,039
if we try again you can see that we can

918
00:41:26,839 --> 00:41:40,969
just access using the printer to people

919
00:41:31,039 --> 00:41:42,709
through their network let's go okay all

920
00:41:40,969 --> 00:41:44,449
the code will be published soon in

921
00:41:42,709 --> 00:41:48,140
orison Alyssa prolly to the Year

922
00:41:44,449 --> 00:41:50,299
tomorrow so you can check it probably

923
00:41:48,140 --> 00:41:52,098
tomorrow it will be there not at the end

924
00:41:50,299 --> 00:41:56,150
of the week for sure

925
00:41:52,099 --> 00:41:57,650
let's go for the conclusions starting

926
00:41:56,150 --> 00:41:59,839
with the responsive or whenever it is

927
00:41:57,650 --> 00:42:01,359
closer we started in February and we got

928
00:41:59,839 --> 00:42:04,610
a very nice response from the

929
00:42:01,359 --> 00:42:06,950
manufacturers some hot

930
00:42:04,610 --> 00:42:08,600
very mature procedure for this and they

931
00:42:06,950 --> 00:42:13,939
were really quick patching the issues

932
00:42:08,600 --> 00:42:15,470
and helping us and everything on they

933
00:42:13,940 --> 00:42:20,210
did a great response and on the other

934
00:42:15,470 --> 00:42:21,950
hand we could just say that sometimes it

935
00:42:20,210 --> 00:42:24,050
was easier to find the vulnerabilities

936
00:42:21,950 --> 00:42:27,259
than the security department or the

937
00:42:24,050 --> 00:42:29,420
manufacturer so they have some work to

938
00:42:27,260 --> 00:42:32,000
do in that area most of them have

939
00:42:29,420 --> 00:42:33,620
published patches solving most of the

940
00:42:32,000 --> 00:42:38,600
issues and we already polish all the

941
00:42:33,620 --> 00:42:44,810
advisories and now let's go for the CV

942
00:42:38,600 --> 00:42:47,540
party we got 50 CDs 14 of them were

943
00:42:44,810 --> 00:42:49,910
rated as medium risk Noah 14 were high

944
00:42:47,540 --> 00:42:53,779
risk ones and the rest of them 22 were

945
00:42:49,910 --> 00:42:56,330
critical raise ones just to say that the

946
00:42:53,780 --> 00:42:58,160
number of issues of TV's per

947
00:42:56,330 --> 00:42:59,720
manufacturers will then be taken as an

948
00:42:58,160 --> 00:43:01,850
indicative of their state of security

949
00:42:59,720 --> 00:43:03,980
because some of the manufacturers

950
00:43:01,850 --> 00:43:09,380
grouped different issues under the same

951
00:43:03,980 --> 00:43:12,830
CD entries and just for reference out

952
00:43:09,380 --> 00:43:15,910
the full list and let's go for the

953
00:43:12,830 --> 00:43:15,910
Menken questions

954
00:43:17,680 --> 00:43:23,270
so these results aim to show how the

955
00:43:21,290 --> 00:43:25,310
state of security of common office

956
00:43:23,270 --> 00:43:27,860
devices such as printers which are

957
00:43:25,310 --> 00:43:31,370
present in most organizations is still

958
00:43:27,860 --> 00:43:33,200
very mature and larger lynyrd we found a

959
00:43:31,370 --> 00:43:36,560
large number of critical high risk

960
00:43:33,200 --> 00:43:39,589
issues in all the printers tested we

961
00:43:36,560 --> 00:43:42,850
wrote exploit prove concept as place for

962
00:43:39,590 --> 00:43:45,260
four of them and we ran out of time to

963
00:43:42,850 --> 00:43:47,750
develop exploits for the other two but

964
00:43:45,260 --> 00:43:52,090
they also have an abilities that do you

965
00:43:47,750 --> 00:43:52,090
think they can lead to a remote location

966
00:43:52,240 --> 00:43:57,560
we may different proof of concept so win

967
00:43:55,150 --> 00:43:59,800
samples are stealing them in passwords

968
00:43:57,560 --> 00:44:02,720
from the configuration or the memory

969
00:43:59,800 --> 00:44:05,420
still in documents using the printer to

970
00:44:02,720 --> 00:44:08,509
pivot and an example of situ persistence

971
00:44:05,420 --> 00:44:10,190
and remember we stopped searching after

972
00:44:08,510 --> 00:44:11,720
finding a few vulnerabilities so we

973
00:44:10,190 --> 00:44:15,650
think there are probably a lot more and

974
00:44:11,720 --> 00:44:17,330
we only looked at a small a few services

975
00:44:15,650 --> 00:44:19,430
so

976
00:44:17,330 --> 00:44:22,220
there is a lot more to researching here

977
00:44:19,430 --> 00:44:24,140
and by what we solve we think that the

978
00:44:22,220 --> 00:44:28,730
first one looking at it will probably

979
00:44:24,140 --> 00:44:31,450
find gold in that not so we do not think

980
00:44:28,730 --> 00:44:33,710
that different the same manufacturer is

981
00:44:31,450 --> 00:44:36,140
having different implantation for some

982
00:44:33,710 --> 00:44:38,150
of the protocols such as IDP or Ltd so

983
00:44:36,140 --> 00:44:41,180
probably the number of our devices

984
00:44:38,150 --> 00:44:43,520
affected by these issues is huge in some

985
00:44:41,180 --> 00:44:48,830
cases quite bigger than the least made

986
00:44:43,520 --> 00:44:51,170
by some of the manufacturers the main

987
00:44:48,830 --> 00:44:53,060
recommendation for manufacturers will be

988
00:44:51,170 --> 00:44:56,420
to start investing in security it's

989
00:44:53,060 --> 00:44:58,820
obviously necessary in all the phases of

990
00:44:56,420 --> 00:45:00,590
approach development lifecycle for

991
00:44:58,820 --> 00:45:03,860
organizations they should start

992
00:45:00,590 --> 00:45:05,090
considering these devices as the threads

993
00:45:03,860 --> 00:45:07,460
they are which are connected to that

994
00:45:05,090 --> 00:45:09,560
corporate networks process sensitive

995
00:45:07,460 --> 00:45:14,090
information and stuff a lot of banality

996
00:45:09,560 --> 00:45:17,509
Zaru you so and for hackers this is a

997
00:45:14,090 --> 00:45:20,420
very mature field if you start looking

998
00:45:17,510 --> 00:45:23,480
at an embedded device with a very

999
00:45:20,420 --> 00:45:25,640
starting with the very basics you will

1000
00:45:23,480 --> 00:45:27,950
probably find some interesting issues

1001
00:45:25,640 --> 00:45:29,629
you will learn a lot and there is a lot

1002
00:45:27,950 --> 00:45:30,939
of funny here so you should give it a

1003
00:45:29,630 --> 00:45:35,030
try

1004
00:45:30,940 --> 00:45:37,190
and what internet expected quick short

1005
00:45:35,030 --> 00:45:38,990
answers showed us that there were a lot

1006
00:45:37,190 --> 00:45:42,730
of these printers dialy connected to

1007
00:45:38,990 --> 00:45:45,500
internet and it seems that even some

1008
00:45:42,730 --> 00:45:48,500
different manufacturers seem to be using

1009
00:45:45,500 --> 00:45:50,780
the same code for their printer so as

1010
00:45:48,500 --> 00:45:54,260
you can see in these two images which

1011
00:45:50,780 --> 00:45:56,560
are quite similar so probably with tests

1012
00:45:54,260 --> 00:45:59,330
and more vendors than without and

1013
00:45:56,560 --> 00:46:00,860
finally at knowledge cement we want just

1014
00:45:59,330 --> 00:46:02,450
to say thank you to all the people who

1015
00:46:00,860 --> 00:46:05,600
helped us during the research project

1016
00:46:02,450 --> 00:46:09,740
and finally we want to thank you all for

1017
00:46:05,600 --> 00:46:12,529
suffering us this afternoon so it was

1018
00:46:09,740 --> 00:46:17,660
hard to put this into buying more than

1019
00:46:12,530 --> 00:46:17,870
45 minutes just thank you

1020
00:46:17,660 --> 00:46:26,930
[Applause]

1021
00:46:17,870 --> 00:46:35,598
[Music]

1022
00:46:26,930 --> 00:46:40,160
despite us together yeah if there is any

1023
00:46:35,599 --> 00:46:44,559
question or anything yeah there's no

1024
00:46:40,160 --> 00:46:50,240
question perfect for us yeah okay great

1025
00:46:44,559 --> 00:46:51,920
well you know we can do you have an

1026
00:46:50,240 --> 00:46:57,038
assessment of how many printers are

1027
00:46:51,920 --> 00:46:59,660
exploitable in the world we we used

1028
00:46:57,039 --> 00:47:03,319
printers also we bought several printers

1029
00:46:59,660 --> 00:47:05,680
and we just assess those assessing a

1030
00:47:03,319 --> 00:47:16,339
printer in the wall probably will be

1031
00:47:05,680 --> 00:47:18,169
difficult and I legal okay so okay so if

1032
00:47:16,339 --> 00:47:19,910
you have any more question we are we

1033
00:47:18,170 --> 00:47:22,609
will be around all these day so you can

1034
00:47:19,910 --> 00:47:25,560
ask us having a very probably so yes the

1035
00:47:22,609 --> 00:47:25,850
bar Thanks

1036
00:47:25,560 --> 00:47:29,170
[Music]

1037
00:47:25,850 --> 00:47:29,170
[Applause]

