1
00:00:02,520 --> 00:00:09,050
okay yes so yes it's my talk I'm trustee

2
00:00:07,410 --> 00:00:11,250
reports the second time I've

3
00:00:09,050 --> 00:00:12,900
unfortunately volunteered to do

4
00:00:11,250 --> 00:00:15,809
something like this the first time being

5
00:00:12,900 --> 00:00:21,060
eight years ago at the first 44 Khan in

6
00:00:15,809 --> 00:00:23,848
2011 and back then well the talk didn't

7
00:00:21,060 --> 00:00:25,830
actually go down too well depends on who

8
00:00:23,849 --> 00:00:29,009
you what side of the fence she happens

9
00:00:25,830 --> 00:00:32,400
for on so I spoke at 44 Khan 2011 and

10
00:00:29,009 --> 00:00:35,790
haven't done since primarily because of

11
00:00:32,400 --> 00:00:40,769
what actually happened after 44 Khan

12
00:00:35,790 --> 00:00:44,160
2011 and well what people said about

13
00:00:40,770 --> 00:00:47,220
myself personally I'm a source code

14
00:00:44,160 --> 00:00:50,429
auditor a reverse engineer I'm an avid

15
00:00:47,220 --> 00:00:53,700
exploit : habitual hoarder I've said

16
00:00:50,430 --> 00:00:54,210
exploits I very rarely release anything

17
00:00:53,700 --> 00:00:56,820
anymore

18
00:00:54,210 --> 00:00:59,940
after 2011 I don't think I released

19
00:00:56,820 --> 00:01:01,980
anything ever since then and also

20
00:00:59,940 --> 00:01:03,780
somewhat known for ranting apparently

21
00:01:01,980 --> 00:01:05,789
and if you look in the top right-hand

22
00:01:03,780 --> 00:01:07,049
corner of most of the slides you'll see

23
00:01:05,790 --> 00:01:10,079
quotes

24
00:01:07,049 --> 00:01:13,320
those aren't taken out of context they

25
00:01:10,079 --> 00:01:16,859
are quotes from people related to

26
00:01:13,320 --> 00:01:19,408
trustee sometimes the CEO of Trusteer at

27
00:01:16,859 --> 00:01:22,288
the time don't think he has anything to

28
00:01:19,409 --> 00:01:26,340
do with the company anymore or quotes

29
00:01:22,289 --> 00:01:28,409
from trustee as lawyers to various you

30
00:01:26,340 --> 00:01:31,439
know media organizations telling them to

31
00:01:28,409 --> 00:01:33,659
get rid of stories basically so in that

32
00:01:31,439 --> 00:01:38,538
case it was a trustees lawyer telling

33
00:01:33,659 --> 00:01:41,579
that the times to change their article

34
00:01:38,539 --> 00:01:44,100
so things I learnt about myself as a

35
00:01:41,579 --> 00:01:46,408
result of 44 con 2011 now there's a

36
00:01:44,100 --> 00:01:48,809
caveat to this these are what people

37
00:01:46,409 --> 00:01:50,909
said about me you know this isn't well

38
00:01:48,810 --> 00:01:53,969
that I actually am yeah I'm a liar

39
00:01:50,909 --> 00:01:56,700
apparently everything I did in 2011 was

40
00:01:53,969 --> 00:01:58,499
a joke despite the fact that it was

41
00:01:56,700 --> 00:02:02,639
provable I never at least any source

42
00:01:58,499 --> 00:02:04,649
code for it so well you could argue that

43
00:02:02,639 --> 00:02:06,839
yes I made it all up unfortunately I

44
00:02:04,649 --> 00:02:09,600
didn't I don't understand the difference

45
00:02:06,840 --> 00:02:12,000
between practical and theoretical that

46
00:02:09,600 --> 00:02:13,769
was a common comment particularly from

47
00:02:12,000 --> 00:02:15,840
guys at banks who wanted me to lie to

48
00:02:13,770 --> 00:02:16,390
reporters to say that what I did wasn't

49
00:02:15,840 --> 00:02:18,910
practical

50
00:02:16,390 --> 00:02:21,730
the exploits didn't exist and it was all

51
00:02:18,910 --> 00:02:25,569
just theory the next one is actually the

52
00:02:21,730 --> 00:02:28,299
worst one by far worse by far I'm

53
00:02:25,569 --> 00:02:30,519
anti-semitic apparently because I happen

54
00:02:28,300 --> 00:02:33,580
to look it justive code and that makes

55
00:02:30,520 --> 00:02:35,410
me evil basically I like to use

56
00:02:33,580 --> 00:02:36,850
PowerPoint design ideas because I don't

57
00:02:35,410 --> 00:02:38,859
really have any design ideas of my own

58
00:02:36,850 --> 00:02:43,329
and I read Paul a little bit too much

59
00:02:38,860 --> 00:02:46,569
which is why I get the why I come across

60
00:02:43,330 --> 00:02:48,310
as a bit of a troll so why is this a

61
00:02:46,569 --> 00:02:50,380
decent topic well memories are short

62
00:02:48,310 --> 00:02:53,560
unfortunately Trusteer rapport is still

63
00:02:50,380 --> 00:02:57,040
around despite my best efforts last time

64
00:02:53,560 --> 00:02:59,769
around trusty and IBM are still found in

65
00:02:57,040 --> 00:03:00,489
the UK banking sector they're still

66
00:02:59,769 --> 00:03:02,769
being pushed

67
00:03:00,489 --> 00:03:06,220
although nowhere near as bad as they

68
00:03:02,769 --> 00:03:07,860
once were after the buyout they kind of

69
00:03:06,220 --> 00:03:10,540
dropped off a little bit but there are

70
00:03:07,860 --> 00:03:12,970
bad examples sometime there being one of

71
00:03:10,540 --> 00:03:15,570
the worst they will constantly pop this

72
00:03:12,970 --> 00:03:17,920
box up but all the time even today

73
00:03:15,570 --> 00:03:21,459
basically trying to get people to

74
00:03:17,920 --> 00:03:23,649
install this thing and the issues

75
00:03:21,459 --> 00:03:27,190
disclosed in 2011 are quite often still

76
00:03:23,650 --> 00:03:28,600
present the fixes they put into place

77
00:03:27,190 --> 00:03:31,329
and claimed that it fixed everything

78
00:03:28,600 --> 00:03:33,250
just didn't fix anything of course I

79
00:03:31,329 --> 00:03:36,269
never at least the exploits or any of

80
00:03:33,250 --> 00:03:39,160
the cold so they just fell into

81
00:03:36,269 --> 00:03:43,329
disrepair and nobody bet else bothered

82
00:03:39,160 --> 00:03:44,280
to look and no follow-ups so we're here

83
00:03:43,329 --> 00:03:48,220
again

84
00:03:44,280 --> 00:03:51,130
unfortunately why is it still decent

85
00:03:48,220 --> 00:03:54,660
topic well back then I did get a lot of

86
00:03:51,130 --> 00:03:57,489
rather brad press articles such as this

87
00:03:54,660 --> 00:03:59,950
were published they contain nothing book

88
00:03:57,489 --> 00:04:03,160
quotes basically from trustees basically

89
00:03:59,950 --> 00:04:06,010
an exercise in advertising I mean I even

90
00:04:03,160 --> 00:04:07,420
calculated it at the 681 words four

91
00:04:06,010 --> 00:04:10,209
hundred and twelve words of which are

92
00:04:07,420 --> 00:04:12,970
quotes from the CEO it's austere which

93
00:04:10,209 --> 00:04:14,680
is sixty point five percent so if you if

94
00:04:12,970 --> 00:04:18,789
you want advertising the registers the

95
00:04:14,680 --> 00:04:22,570
way to go yet the Daily Mail also took

96
00:04:18,789 --> 00:04:25,240
down an article within an hour this was

97
00:04:22,570 --> 00:04:28,460
an email that I sent to reporter just

98
00:04:25,240 --> 00:04:32,030
after force for con asking him why

99
00:04:28,460 --> 00:04:34,789
the story disappeared he replied quite

100
00:04:32,030 --> 00:04:36,198
honestly and said that it disappeared

101
00:04:34,790 --> 00:04:38,979
because trustee had told him it wasn't a

102
00:04:36,199 --> 00:04:41,449
problem anymore so we just delete it

103
00:04:38,979 --> 00:04:47,240
doesn't have to exist anymore because

104
00:04:41,449 --> 00:04:50,509
it's just not true so that's the past at

105
00:04:47,240 --> 00:04:52,100
the present well unfortunately the this

106
00:04:50,509 --> 00:04:56,020
talk should have been longer than it was

107
00:04:52,100 --> 00:05:00,340
meant to be and that's partly my fault

108
00:04:56,020 --> 00:05:03,409
you see in mid to late 2018 I decided to

109
00:05:00,340 --> 00:05:06,289
go trawling or fishing with IBM and

110
00:05:03,410 --> 00:05:09,110
trustee and see how they would react to

111
00:05:06,289 --> 00:05:11,919
a couple of bugs in Mac OS X

112
00:05:09,110 --> 00:05:15,979
implementation so I baited a hook and

113
00:05:11,919 --> 00:05:18,889
promptly casted it the issue itself was

114
00:05:15,979 --> 00:05:21,530
known back in 2011 was actually put in

115
00:05:18,889 --> 00:05:24,919
by trust in and attempt to fix the

116
00:05:21,530 --> 00:05:28,190
original books but in trying to fix the

117
00:05:24,919 --> 00:05:30,198
original problems they created more but

118
00:05:28,190 --> 00:05:33,639
of course I never at least the source so

119
00:05:30,199 --> 00:05:36,289
I waited seven years as it was and

120
00:05:33,639 --> 00:05:38,840
decided well I'll see how IBM and

121
00:05:36,289 --> 00:05:42,469
Trusteer will respond to these these

122
00:05:38,840 --> 00:05:45,849
bugs the CVA itself is 2018 nineteen

123
00:05:42,470 --> 00:05:48,169
eighty four plus one is actually 1985

124
00:05:45,849 --> 00:05:50,240
it's an issue in the mathcast kernel

125
00:05:48,169 --> 00:05:52,729
driver component permitting arbitrary

126
00:05:50,240 --> 00:05:56,870
code execution and it was eight years

127
00:05:52,729 --> 00:06:00,949
old at the time of disclosure yeah so

128
00:05:56,870 --> 00:06:02,889
that's the IDM book report there the

129
00:06:00,949 --> 00:06:07,430
actual issue itself was pretty simple

130
00:06:02,889 --> 00:06:09,849
it was a user assign this book in a

131
00:06:07,430 --> 00:06:13,099
length parameter so you have the the

132
00:06:09,849 --> 00:06:14,599
conditional move here is signed and of

133
00:06:13,099 --> 00:06:17,150
course if you specify a negative length

134
00:06:14,599 --> 00:06:22,639
you basically get an arbitrary length

135
00:06:17,150 --> 00:06:24,489
mem copy into kernel land and thus

136
00:06:22,639 --> 00:06:27,889
facilitating arbitrary code execution

137
00:06:24,490 --> 00:06:29,659
that was the book that was disclosed so

138
00:06:27,889 --> 00:06:33,470
the book was disclosed on the 15th of

139
00:06:29,659 --> 00:06:36,710
August the vulnerability details would

140
00:06:33,470 --> 00:06:40,539
don't public just before Christmas 2018

141
00:06:36,710 --> 00:06:42,789
without a patch because IBM just

142
00:06:40,539 --> 00:06:44,469
we're simply taking too long they were

143
00:06:42,789 --> 00:06:47,139
given 90 days and you were given an

144
00:06:44,469 --> 00:06:49,210
extra 60 days and blah blah blah and he

145
00:06:47,139 --> 00:06:51,699
just kept saying no no no no no anyway

146
00:06:49,210 --> 00:06:54,219
the patch was finally made available by

147
00:06:51,699 --> 00:06:56,469
IBM and Trusteer in and around February

148
00:06:54,219 --> 00:07:00,580
of this year I can't know exactly when

149
00:06:56,469 --> 00:07:03,189
my simple wasn't told so the problem

150
00:07:00,580 --> 00:07:06,058
with this is that the issue itself could

151
00:07:03,189 --> 00:07:09,909
have been sold with a nine bike patch

152
00:07:06,059 --> 00:07:11,830
now this is why I was effectively

153
00:07:09,909 --> 00:07:13,180
fishing and trolling to see what IBM

154
00:07:11,830 --> 00:07:15,818
would actually do because I knew that

155
00:07:13,180 --> 00:07:17,949
the book itself could be patched really

156
00:07:15,819 --> 00:07:21,400
quickly and really easily however there

157
00:07:17,949 --> 00:07:23,800
was a caveat to it you see to access

158
00:07:21,400 --> 00:07:27,159
this bug you had to figure out how to

159
00:07:23,800 --> 00:07:30,759
bypass trustees protections to birth to

160
00:07:27,159 --> 00:07:32,770
bypass its checks to make sure that the

161
00:07:30,759 --> 00:07:36,310
person calling the driver is actually

162
00:07:32,770 --> 00:07:38,289
trustee or IBM cold and in giving them

163
00:07:36,310 --> 00:07:41,110
the exploit I'd let them know that I'd

164
00:07:38,289 --> 00:07:43,029
figured out how to bypass it so I wanted

165
00:07:41,110 --> 00:07:45,819
to see how they would react would they

166
00:07:43,029 --> 00:07:49,749
fix the bug and ignore the rest or would

167
00:07:45,819 --> 00:07:53,469
the try and fix the rest well it turned

168
00:07:49,749 --> 00:07:57,580
out that they were up to something more

169
00:07:53,469 --> 00:08:01,360
substantial instead of just fixing the

170
00:07:57,580 --> 00:08:03,639
bug they actually removed it entirely

171
00:08:01,360 --> 00:08:06,520
they destroyed everything just took the

172
00:08:03,639 --> 00:08:08,439
driver out completely which is pretty

173
00:08:06,520 --> 00:08:10,688
much exactly what I wanted them to do in

174
00:08:08,439 --> 00:08:11,159
2011 but it's what the wait years to do

175
00:08:10,689 --> 00:08:14,139
it

176
00:08:11,159 --> 00:08:16,569
despite the bug was actually known for

177
00:08:14,139 --> 00:08:19,330
eight years perhaps if I'd sent it

178
00:08:16,569 --> 00:08:21,009
earlier you know what more or less

179
00:08:19,330 --> 00:08:23,529
people would be infected with Trusteer

180
00:08:21,009 --> 00:08:27,639
rapport right about now but you know

181
00:08:23,529 --> 00:08:30,729
that's something I should have done all

182
00:08:27,639 --> 00:08:33,448
right so why would I be EM trustee

183
00:08:30,729 --> 00:08:36,218
removed the entire driver well as I said

184
00:08:33,448 --> 00:08:38,559
they had to have known that given my

185
00:08:36,219 --> 00:08:42,159
exploit that there were other books as

186
00:08:38,559 --> 00:08:44,078
well so in dropping this book and

187
00:08:42,159 --> 00:08:45,970
getting IBM to destroy and completely

188
00:08:44,078 --> 00:08:47,709
remove the driver I'd accidentally

189
00:08:45,970 --> 00:08:49,060
killed about three or four other books

190
00:08:47,709 --> 00:08:51,699
so I was planning to release at the same

191
00:08:49,060 --> 00:08:53,819
time but I had no idea that IBM would

192
00:08:51,699 --> 00:08:55,920
actually take such a so

193
00:08:53,820 --> 00:08:57,570
course of action I honestly thought that

194
00:08:55,920 --> 00:09:00,900
they just do what your Sudheer usually

195
00:08:57,570 --> 00:09:05,580
do do the simplest patch say

196
00:09:00,900 --> 00:09:07,230
everything's fine back to normal in case

197
00:09:05,580 --> 00:09:09,030
you're wondering what the actual bypass

198
00:09:07,230 --> 00:09:11,540
was it was a cryptographic signature

199
00:09:09,030 --> 00:09:15,180
which is there that's how you bypass it

200
00:09:11,540 --> 00:09:16,949
you create a section with a segment and

201
00:09:15,180 --> 00:09:19,290
the contents have to be validate

202
00:09:16,950 --> 00:09:20,930
underscore check underscore data that's

203
00:09:19,290 --> 00:09:23,910
cryptographic signature

204
00:09:20,930 --> 00:09:25,770
according to Trusteer rapport yeah and

205
00:09:23,910 --> 00:09:27,750
it is crown stealing to prove that one

206
00:09:25,770 --> 00:09:30,090
this because it's that's really good

207
00:09:27,750 --> 00:09:34,770
crypt so you have to say excellent

208
00:09:30,090 --> 00:09:36,090
crypto but other bugs existed as I said

209
00:09:34,770 --> 00:09:39,680
there were at least three or four other

210
00:09:36,090 --> 00:09:42,150
more these were all code execs in

211
00:09:39,680 --> 00:09:43,650
validating the the binary they had to

212
00:09:42,150 --> 00:09:45,750
pass it and of course if you're gonna

213
00:09:43,650 --> 00:09:47,069
walk the Matco headers and segments

214
00:09:45,750 --> 00:09:50,730
you've got to at least do it correctly

215
00:09:47,070 --> 00:09:52,340
and so stairs couldn't do that and so

216
00:09:50,730 --> 00:09:54,990
there were at least two or three

217
00:09:52,340 --> 00:09:59,280
arbitrary code execution books in the

218
00:09:54,990 --> 00:10:00,840
passing of the binaries all of which

219
00:09:59,280 --> 00:10:03,480
were unfortunately rendered useless in

220
00:10:00,840 --> 00:10:08,760
the IBM purge when they removed all the

221
00:10:03,480 --> 00:10:09,840
the kernel driver from OS X so now we're

222
00:10:08,760 --> 00:10:14,340
pretty much left with the Windows

223
00:10:09,840 --> 00:10:16,080
version still wisest a decent topic well

224
00:10:14,340 --> 00:10:20,130
to steer were bought out for a billion

225
00:10:16,080 --> 00:10:24,060
dollars two years after 2011 there 44

226
00:10:20,130 --> 00:10:27,450
con 2011 which is reason enough in and

227
00:10:24,060 --> 00:10:28,859
of itself because IBM I don't know what

228
00:10:27,450 --> 00:10:30,000
they actually paid a billion dollars for

229
00:10:28,860 --> 00:10:33,120
they can't have paid a billion dollars

230
00:10:30,000 --> 00:10:35,100
for the program because if they did and

231
00:10:33,120 --> 00:10:37,700
there are any IBM buyers in the room

232
00:10:35,100 --> 00:10:40,950
I've got a bridge to sell you because

233
00:10:37,700 --> 00:10:45,090
that's just not worth anything like that

234
00:10:40,950 --> 00:10:46,620
you know yeah yeah I did find out he

235
00:10:45,090 --> 00:10:51,960
made his money and unfortunately it's

236
00:10:46,620 --> 00:10:53,820
legal yeah so the goal originally was to

237
00:10:51,960 --> 00:10:57,750
just show all the bugs but unfortunately

238
00:10:53,820 --> 00:11:00,780
since IBM killed the markov stuff I'm

239
00:10:57,750 --> 00:11:02,430
left with another goal since they're

240
00:11:00,780 --> 00:11:04,290
willing to kill the Matco stuff are they

241
00:11:02,430 --> 00:11:07,608
willing to kill the Windows stuff

242
00:11:04,290 --> 00:11:14,728
so can I get them to delete everything

243
00:11:07,609 --> 00:11:16,139
with any work I will so Windows since

244
00:11:14,729 --> 00:11:17,999
the Mac OS version is pretty much

245
00:11:16,139 --> 00:11:19,919
neutered from a perv s standpoint

246
00:11:17,999 --> 00:11:22,319
there's nothing left anymore it's just a

247
00:11:19,919 --> 00:11:24,989
bunch of user line programs that inject

248
00:11:22,319 --> 00:11:28,219
code into browsers you know just like

249
00:11:24,989 --> 00:11:30,720
any other piece of malware so it's yeah

250
00:11:28,220 --> 00:11:33,209
we've no point in really looking at it

251
00:11:30,720 --> 00:11:36,449
well left with the windows and we didn't

252
00:11:33,209 --> 00:11:38,728
give this much attention and 44 con 2011

253
00:11:36,449 --> 00:11:41,008
I mostly looked at the OS X which is

254
00:11:38,729 --> 00:11:45,529
something that just a used an awful lot

255
00:11:41,009 --> 00:11:48,660
in their press campaigns to talk it down

256
00:11:45,529 --> 00:11:51,089
back way back when eight years ago they

257
00:11:48,660 --> 00:11:53,789
would often say that the bugs were Marco

258
00:11:51,089 --> 00:11:55,470
song we and that only affects 355,000

259
00:11:53,789 --> 00:11:57,299
people you know the Windows version

260
00:11:55,470 --> 00:11:58,529
effects farm what would affect far more

261
00:11:57,299 --> 00:12:01,679
but of course he didn't say anything

262
00:11:58,529 --> 00:12:04,069
about the Windows version well let's

263
00:12:01,679 --> 00:12:08,910
talk about the Windows version and

264
00:12:04,069 --> 00:12:11,729
furthermore I do have to say that this

265
00:12:08,910 --> 00:12:14,368
is actually the the CEO of trust with

266
00:12:11,730 --> 00:12:17,639
Trusteer one of his quotes to me in an

267
00:12:14,369 --> 00:12:19,589
email where he claimed that I'd released

268
00:12:17,639 --> 00:12:21,839
a fully baked

269
00:12:19,589 --> 00:12:23,339
you know export code to the public I've

270
00:12:21,839 --> 00:12:27,509
never released any put the code to the

271
00:12:23,339 --> 00:12:33,600
public ever for any of this um but

272
00:12:27,509 --> 00:12:37,769
seemingly he thought and I did so there

273
00:12:33,600 --> 00:12:40,019
are several drivers in rapport in the

274
00:12:37,769 --> 00:12:42,239
current version the most useful is this

275
00:12:40,019 --> 00:12:44,789
one report and I don't know how to say

276
00:12:42,239 --> 00:12:47,309
that second word aygul which apparently

277
00:12:44,789 --> 00:12:51,720
according to Wikipedia is ancient Greek

278
00:12:47,309 --> 00:12:53,309
for dazzling light yeah there's some

279
00:12:51,720 --> 00:12:57,600
hidden meaning there somewhere probably

280
00:12:53,309 --> 00:13:00,679
but anyway and it is absolutely racked

281
00:12:57,600 --> 00:13:04,319
with backdoors you can spot them

282
00:13:00,679 --> 00:13:07,108
blatantly that they're everywhere the

283
00:13:04,319 --> 00:13:10,259
ones in red are the places you will find

284
00:13:07,109 --> 00:13:12,899
CVS or ways to get around permissions in

285
00:13:10,259 --> 00:13:15,640
the Windows kernel the word the the box

286
00:13:12,899 --> 00:13:18,820
is highlighted in blue are arbitrary

287
00:13:15,640 --> 00:13:21,850
obviously registry access API so you can

288
00:13:18,820 --> 00:13:26,860
call some of these red boxes actually

289
00:13:21,850 --> 00:13:29,200
have multiple bugs in them so multiple

290
00:13:26,860 --> 00:13:31,540
choice there are so many si V's you

291
00:13:29,200 --> 00:13:34,300
couldn't count this is probably more

292
00:13:31,540 --> 00:13:36,790
Seavey's in this line here than there

293
00:13:34,300 --> 00:13:38,859
are people in the room if you actually

294
00:13:36,790 --> 00:13:42,880
took the time to go through them but

295
00:13:38,860 --> 00:13:45,180
there is actually a problem to access

296
00:13:42,880 --> 00:13:48,850
these books

297
00:13:45,180 --> 00:13:50,199
repor no or must know that they're not

298
00:13:48,850 --> 00:13:51,820
meant to be doing the things that they

299
00:13:50,200 --> 00:13:54,940
are doing or permitting their own

300
00:13:51,820 --> 00:13:58,450
programs to do so they try and restrict

301
00:13:54,940 --> 00:14:01,600
it much like they did on Mac off but

302
00:13:58,450 --> 00:14:05,130
it's an implementation that is by

303
00:14:01,600 --> 00:14:07,600
passable and we'll go through it now

304
00:14:05,130 --> 00:14:11,649
that implementation is contained in that

305
00:14:07,600 --> 00:14:13,899
big yellow box by the way No so why did

306
00:14:11,649 --> 00:14:16,769
when did I actually look at this well I

307
00:14:13,899 --> 00:14:19,750
was looking at it during the evenings

308
00:14:16,769 --> 00:14:25,240
about when the World Cup started late

309
00:14:19,750 --> 00:14:27,940
last year yeah I did try for about two

310
00:14:25,240 --> 00:14:29,260
months to get to Windows VMs to talk to

311
00:14:27,940 --> 00:14:31,480
each other with a kernel debugger and

312
00:14:29,260 --> 00:14:33,569
gave up I've never actually used a

313
00:14:31,480 --> 00:14:35,380
kernel debugger much to my hair

314
00:14:33,570 --> 00:14:38,019
detriment I probably should actually

315
00:14:35,380 --> 00:14:39,490
learn how to use one button never have I

316
00:14:38,019 --> 00:14:41,199
then step through the entire

317
00:14:39,490 --> 00:14:42,579
implementation instruction by

318
00:14:41,199 --> 00:14:45,010
instruction which took about two and a

319
00:14:42,579 --> 00:14:46,359
half weeks and then promptly neglected

320
00:14:45,010 --> 00:14:49,060
to document a single thing

321
00:14:46,360 --> 00:14:52,630
so I promptly forgot everything

322
00:14:49,060 --> 00:14:55,060
absolutely everything in trying to

323
00:14:52,630 --> 00:14:57,279
bypass the sink and kind of bypassed it

324
00:14:55,060 --> 00:14:59,560
just by accident really now you'll

325
00:14:57,279 --> 00:15:01,660
probably figure out almost instantly how

326
00:14:59,560 --> 00:15:07,899
to do it none of this stuff is very

327
00:15:01,660 --> 00:15:10,779
difficult at all right so the short of

328
00:15:07,899 --> 00:15:12,850
it is quite simple it requires a match

329
00:15:10,779 --> 00:15:15,250
against a specific DLL in the

330
00:15:12,850 --> 00:15:17,079
distribution so to access the kernel

331
00:15:15,250 --> 00:15:20,079
driver you have to have come from a

332
00:15:17,079 --> 00:15:22,000
specific DLL and the name is pretty

333
00:15:20,079 --> 00:15:25,660
simple its rapport you told DLL all

334
00:15:22,000 --> 00:15:27,459
rapport Utah underscore x64 DLL if you

335
00:15:25,660 --> 00:15:29,980
happen to be 64-bit

336
00:15:27,459 --> 00:15:31,508
and it requires a file to match the

337
00:15:29,980 --> 00:15:33,100
cryptographic signatures so it actually

338
00:15:31,509 --> 00:15:35,319
validates that the file hasn't been

339
00:15:33,100 --> 00:15:37,839
imaged manipulated on the disk so you

340
00:15:35,319 --> 00:15:42,819
can't just edit file and then you know

341
00:15:37,839 --> 00:15:45,399
make the calls it validates that but

342
00:15:42,819 --> 00:15:49,420
longer if it is somewhat more complex as

343
00:15:45,399 --> 00:15:52,149
these things often are first I'd really

344
00:15:49,420 --> 00:15:55,029
like to give some you know props to the

345
00:15:52,149 --> 00:15:56,769
guy who actually wrote this code in the

346
00:15:55,029 --> 00:16:00,220
big yellow box because it is actually

347
00:15:56,769 --> 00:16:02,439
very very good cold I had no idea that

348
00:16:00,220 --> 00:16:06,490
you could ever do any of these things

349
00:16:02,439 --> 00:16:09,579
that this guy actually implemented easy

350
00:16:06,490 --> 00:16:12,629
and his code is pretty much impeccable I

351
00:16:09,579 --> 00:16:14,649
can find no way to make it crash at all

352
00:16:12,629 --> 00:16:17,050
about the only way you can make it

353
00:16:14,649 --> 00:16:18,610
crashes if you happen to be a running of

354
00:16:17,050 --> 00:16:20,649
version of Windows that the repor don't

355
00:16:18,610 --> 00:16:22,480
know about because if you happen to be

356
00:16:20,649 --> 00:16:24,220
if you happen to try and load their

357
00:16:22,480 --> 00:16:26,470
driver on a version of Windows that

358
00:16:24,220 --> 00:16:28,929
doesn't exactly match a list of known

359
00:16:26,470 --> 00:16:31,600
build numbers you'll instantly get a

360
00:16:28,929 --> 00:16:32,679
book check for you for you know so your

361
00:16:31,600 --> 00:16:34,990
machine will be completely useless

362
00:16:32,679 --> 00:16:39,730
because every time you reboot it'll just

363
00:16:34,990 --> 00:16:42,040
bug check again but in trying to access

364
00:16:39,730 --> 00:16:44,949
and bypass the protections this guy's

365
00:16:42,040 --> 00:16:47,170
cold impeccable as far as I can see

366
00:16:44,949 --> 00:16:50,920
anyway and you won't find any bugs in it

367
00:16:47,170 --> 00:16:52,509
yeah I guardedly look it grabs all

368
00:16:50,920 --> 00:16:55,628
manner of pointers from opaque data

369
00:16:52,509 --> 00:16:57,220
structures these guys are the guy wrote

370
00:16:55,629 --> 00:16:59,290
this is obviously a Windows kernel

371
00:16:57,220 --> 00:17:02,259
reverse engineer he knows what he's

372
00:16:59,290 --> 00:17:04,240
doing and he really knows opaque data

373
00:17:02,259 --> 00:17:07,720
structures either that or he sits with a

374
00:17:04,240 --> 00:17:09,849
debugger all day long because he really

375
00:17:07,720 --> 00:17:13,360
knows the internals of these data

376
00:17:09,849 --> 00:17:15,908
structures each is validated extensively

377
00:17:13,359 --> 00:17:17,948
and so all these pointers to everywhere

378
00:17:15,909 --> 00:17:21,220
they're all validated absolutely

379
00:17:17,949 --> 00:17:24,640
everything is checked no crashes as far

380
00:17:21,220 --> 00:17:28,539
as I can see the implementation performs

381
00:17:24,640 --> 00:17:30,309
two phases firstly it obtains pointers

382
00:17:28,539 --> 00:17:32,020
to the K process and the K thread

383
00:17:30,309 --> 00:17:33,700
structures for the calling process these

384
00:17:32,020 --> 00:17:35,980
are opaque windows kernel data

385
00:17:33,700 --> 00:17:39,000
structures I won't really go into the

386
00:17:35,980 --> 00:17:41,320
the structure of these you can pour the

387
00:17:39,000 --> 00:17:43,300
definitions from just about anywhere

388
00:17:41,320 --> 00:17:45,220
it computes the location of the pet and

389
00:17:43,300 --> 00:17:48,600
the tab for the calling process in the

390
00:17:45,220 --> 00:17:52,900
calling thread and then performs magic

391
00:17:48,600 --> 00:17:55,899
essentially it proceeds to read from the

392
00:17:52,900 --> 00:17:59,170
the calling thread its entire stack

393
00:17:55,900 --> 00:18:03,370
I'm validate the call chain all the way

394
00:17:59,170 --> 00:18:05,980
back so it pulls trap frame reads EBP e

395
00:18:03,370 --> 00:18:09,040
IP and hardware ESP values and then

396
00:18:05,980 --> 00:18:11,320
validates the stack looks valid that is

397
00:18:09,040 --> 00:18:13,510
it's growing the right way the pointers

398
00:18:11,320 --> 00:18:18,280
point to valid memory you can read the

399
00:18:13,510 --> 00:18:19,930
memory the values of store d IP EBP 4

400
00:18:18,280 --> 00:18:22,690
different stat levels of the stack are

401
00:18:19,930 --> 00:18:28,900
all valid the old point to use on code

402
00:18:22,690 --> 00:18:32,770
it's all correct it does this for the

403
00:18:28,900 --> 00:18:35,680
top 5 stacks of the calling process the

404
00:18:32,770 --> 00:18:39,100
only the top five and then matches the

405
00:18:35,680 --> 00:18:42,490
stat err stack frame saved EIP values to

406
00:18:39,100 --> 00:18:46,629
dll's so it tries to look up for each

407
00:18:42,490 --> 00:18:49,390
saved for the top 5 stack frames it

408
00:18:46,630 --> 00:18:51,520
looks up the address the IP value and

409
00:18:49,390 --> 00:18:54,760
tries to match it to a unknown dll

410
00:18:51,520 --> 00:18:59,650
that's loaded into that processes memory

411
00:18:54,760 --> 00:19:04,090
space the paths of each of these deals

412
00:18:59,650 --> 00:19:07,510
is then matched so it tries to match the

413
00:19:04,090 --> 00:19:10,540
top two at least two windows system32

414
00:19:07,510 --> 00:19:14,200
the reason simply there is the top two

415
00:19:10,540 --> 00:19:18,790
stack frames have to be SC windows

416
00:19:14,200 --> 00:19:21,090
system32 kernel32.dll the top daresay

417
00:19:18,790 --> 00:19:23,860
the top two entries must be kernel32.dll

418
00:19:21,090 --> 00:19:26,620
one that the top five must not be in

419
00:19:23,860 --> 00:19:29,889
windows system32 or suit or windows this

420
00:19:26,620 --> 00:19:33,280
one 64 and this one must be rapport you

421
00:19:29,890 --> 00:19:38,230
told the oil or rapport youto x64 DLL

422
00:19:33,280 --> 00:19:41,170
that is the match at that point if it

423
00:19:38,230 --> 00:19:44,320
gets that far if you actually rapport

424
00:19:41,170 --> 00:19:48,180
util dot dl it will read pars the dll

425
00:19:44,320 --> 00:19:53,350
and validate the cryptographic signature

426
00:19:48,180 --> 00:19:55,179
in jest to try and get around this I did

427
00:19:53,350 --> 00:19:57,399
a couple of tests

428
00:19:55,179 --> 00:19:59,200
what if I actually made the call from

429
00:19:57,399 --> 00:20:01,689
rapport you talk about DLL so the

430
00:19:59,200 --> 00:20:04,390
original idea in 2011 was just to world

431
00:20:01,690 --> 00:20:06,130
the library so we load the library and

432
00:20:04,390 --> 00:20:08,110
just resolve a symbol make a call

433
00:20:06,130 --> 00:20:09,720
through their own code because it came

434
00:20:08,110 --> 00:20:12,459
from their code old he'll pass

435
00:20:09,720 --> 00:20:14,140
unfortunately that doesn't work it

436
00:20:12,460 --> 00:20:16,360
doesn't work because they figured out

437
00:20:14,140 --> 00:20:18,519
after 2011 they should pack their

438
00:20:16,360 --> 00:20:21,250
library and pack it in such a way that I

439
00:20:18,519 --> 00:20:24,429
can't be bothered to figure out so I

440
00:20:21,250 --> 00:20:26,169
didn't bother to decrypt it and so I

441
00:20:24,429 --> 00:20:28,380
can't resolve symbols and I can't make

442
00:20:26,169 --> 00:20:33,490
calls through their binary but there is

443
00:20:28,380 --> 00:20:37,000
potentially another way what if I loaded

444
00:20:33,490 --> 00:20:38,980
the library change the first page to

445
00:20:37,000 --> 00:20:40,539
read write execute drop to shim or a

446
00:20:38,980 --> 00:20:44,370
trampoline in and made a call to the

447
00:20:40,539 --> 00:20:48,210
driver from there and that one works

448
00:20:44,370 --> 00:20:50,529
unfortunately well fortunately for me

449
00:20:48,210 --> 00:20:52,360
caveat for the implementation well it

450
00:20:50,529 --> 00:20:54,580
catches the dll's that call to the

451
00:20:52,360 --> 00:20:56,830
driver in a doubly linked list this is a

452
00:20:54,580 --> 00:20:59,980
simple task if anyone would ever wanted

453
00:20:56,830 --> 00:21:01,960
to try it it caches these on the kernel

454
00:20:59,980 --> 00:21:03,399
heat persistently so if you wanted if

455
00:21:01,960 --> 00:21:06,809
you wanted to test this you could knock

456
00:21:03,399 --> 00:21:11,379
up a simple PLC just make multiple calls

457
00:21:06,809 --> 00:21:14,200
create a DLL load it make a call to the

458
00:21:11,380 --> 00:21:17,440
driver from the DLL on the world the D

459
00:21:14,200 --> 00:21:20,769
I'll rename it reload it etc so to fill

460
00:21:17,440 --> 00:21:22,840
up the memory and persistently drop

461
00:21:20,769 --> 00:21:24,850
every box that report happened to run on

462
00:21:22,840 --> 00:21:26,820
until the user on installs it which

463
00:21:24,850 --> 00:21:29,709
would be the best course of action

464
00:21:26,820 --> 00:21:32,850
so I created a function for this called

465
00:21:29,710 --> 00:21:35,380
rapport device I'll control

466
00:21:32,850 --> 00:21:38,158
identical to device IO control except

467
00:21:35,380 --> 00:21:41,590
the first argument is a return address

468
00:21:38,159 --> 00:21:47,789
I'll get to how exactly you use this and

469
00:21:41,590 --> 00:21:47,789
a few minutes all right

470
00:21:48,090 --> 00:21:54,699
creating your shim or your trampoline

471
00:21:50,830 --> 00:21:56,230
it's pretty simple in fact it takes only

472
00:21:54,700 --> 00:21:58,899
takes about ten maybe twelve

473
00:21:56,230 --> 00:22:01,000
instructions to do it we just create a

474
00:21:58,899 --> 00:22:04,870
dummy snack frame push the arguments and

475
00:22:01,000 --> 00:22:07,480
jump the only problem is the return

476
00:22:04,870 --> 00:22:10,629
value from device IO control must be

477
00:22:07,480 --> 00:22:12,760
most point to rapport util DLL so we

478
00:22:10,630 --> 00:22:14,440
can't do this in C we we have to write

479
00:22:12,760 --> 00:22:18,550
our own small little piece of assembler

480
00:22:14,440 --> 00:22:22,570
to do it and there we have it for 32-bit

481
00:22:18,550 --> 00:22:25,120
x86 this is the exact code that you'll

482
00:22:22,570 --> 00:22:27,879
find in all these exports that calls

483
00:22:25,120 --> 00:22:29,590
through to the driver so we have the

484
00:22:27,880 --> 00:22:32,470
first argument being the return address

485
00:22:29,590 --> 00:22:36,340
and the return address here must point

486
00:22:32,470 --> 00:22:39,820
to I the following two bytes 5d c3 or

487
00:22:36,340 --> 00:22:42,550
our pop ret pair and the return address

488
00:22:39,820 --> 00:22:45,340
points into report util DLL memory space

489
00:22:42,550 --> 00:22:47,379
so effectively what we've what we do is

490
00:22:45,340 --> 00:22:50,620
we've world library report util into our

491
00:22:47,380 --> 00:22:52,930
own program change the first page to

492
00:22:50,620 --> 00:22:57,550
read write execute change the first two

493
00:22:52,930 --> 00:22:59,260
bytes to 5d c3 and then call report

494
00:22:57,550 --> 00:23:01,149
device I all control will ret address

495
00:22:59,260 --> 00:23:03,970
being the base address of the library we

496
00:23:01,150 --> 00:23:08,140
just hold it and rapport will believe

497
00:23:03,970 --> 00:23:11,080
that we are rapport the same thing for

498
00:23:08,140 --> 00:23:15,220
64-bit except we actually require a

499
00:23:11,080 --> 00:23:17,320
little bit more in the in the return but

500
00:23:15,220 --> 00:23:22,120
aside from that it's identical

501
00:23:17,320 --> 00:23:25,149
pretty much and we have access granted

502
00:23:22,120 --> 00:23:27,699
at that point now pretty much all the

503
00:23:25,150 --> 00:23:30,160
floors after this revolve around system

504
00:23:27,700 --> 00:23:31,390
call functions with a previous mode of

505
00:23:30,160 --> 00:23:34,420
kernel mode and thus bypassing

506
00:23:31,390 --> 00:23:36,880
permissions checks the the image there

507
00:23:34,420 --> 00:23:39,190
was stolen from James for Shore believe

508
00:23:36,880 --> 00:23:41,650
it Google project zero but these issues

509
00:23:39,190 --> 00:23:44,020
have been known for many years this is

510
00:23:41,650 --> 00:23:45,790
the best if you're looking for details

511
00:23:44,020 --> 00:23:48,790
on how you actually exploit these books

512
00:23:45,790 --> 00:23:51,190
this link here is by far the best and

513
00:23:48,790 --> 00:23:53,920
simplest explanation I've ever found it

514
00:23:51,190 --> 00:23:55,630
was written by Microsoft way back when

515
00:23:53,920 --> 00:23:58,780
when they actually thought of security

516
00:23:55,630 --> 00:24:00,610
bugs as reliability force so that the

517
00:23:58,780 --> 00:24:03,610
title of this document is actually

518
00:24:00,610 --> 00:24:05,199
common driver reliability issues despite

519
00:24:03,610 --> 00:24:10,899
the fact that the only thing it details

520
00:24:05,200 --> 00:24:13,120
is security bugs for there you go as I

521
00:24:10,900 --> 00:24:16,150
said the explanations on MSDN for these

522
00:24:13,120 --> 00:24:18,219
type of befores are a bit esoteric but

523
00:24:16,150 --> 00:24:19,940
if you really want to understand them if

524
00:24:18,220 --> 00:24:22,250
you if you pull that link

525
00:24:19,940 --> 00:24:24,530
while it still exists there are very

526
00:24:22,250 --> 00:24:28,340
simple explanations as to you know what

527
00:24:24,530 --> 00:24:30,820
this stuff does well these type of books

528
00:24:28,340 --> 00:24:35,240
I've seen before I saw one in 2010

529
00:24:30,820 --> 00:24:37,429
pulling apart disk encryption drivers to

530
00:24:35,240 --> 00:24:39,260
give you an idea of why I won't pose the

531
00:24:37,430 --> 00:24:41,090
question that our IBM intentionally

532
00:24:39,260 --> 00:24:42,500
backdoor in their machines I've seen

533
00:24:41,090 --> 00:24:44,270
these books before and they are

534
00:24:42,500 --> 00:24:46,070
intentional

535
00:24:44,270 --> 00:24:49,150
they're usually oh they're usually put

536
00:24:46,070 --> 00:24:51,590
in for one purpose are nice to subvert

537
00:24:49,150 --> 00:24:52,940
permissions the security of the system

538
00:24:51,590 --> 00:24:54,770
because you want to do something that

539
00:24:52,940 --> 00:24:57,410
you're not meant to be able to do in

540
00:24:54,770 --> 00:25:00,620
this case it was a kernel driver written

541
00:24:57,410 --> 00:25:02,840
by don't know if there are any old

542
00:25:00,620 --> 00:25:04,639
people in the room that member 8-bit

543
00:25:02,840 --> 00:25:07,879
days there's a guy called Sean

544
00:25:04,640 --> 00:25:10,430
Hollingworth who wrote am a full disk

545
00:25:07,880 --> 00:25:12,650
encryption driver it's still in sale

546
00:25:10,430 --> 00:25:14,900
today he used to work for gremlin

547
00:25:12,650 --> 00:25:16,490
graphics writing games two spectrums as

548
00:25:14,900 --> 00:25:19,040
for the old spectrums their decks

549
00:25:16,490 --> 00:25:21,020
machines he's pitiful fall from grace

550
00:25:19,040 --> 00:25:22,550
because back then he was writing games

551
00:25:21,020 --> 00:25:24,200
that I used to play as a kid now he's

552
00:25:22,550 --> 00:25:28,070
back dooring machine so he can read of

553
00:25:24,200 --> 00:25:29,900
Ison's files and he doesn't need to run

554
00:25:28,070 --> 00:25:31,429
he doesn't need to run his code with

555
00:25:29,900 --> 00:25:34,450
permissions when he just backdoors the

556
00:25:31,430 --> 00:25:37,160
kernel and just reads any file he likes

557
00:25:34,450 --> 00:25:40,580
so these things are if you ask me they

558
00:25:37,160 --> 00:25:42,260
are intentional if you look at the

559
00:25:40,580 --> 00:25:44,360
actual structure of the code in the

560
00:25:42,260 --> 00:25:48,379
report driver it's written very much

561
00:25:44,360 --> 00:25:51,379
like an API no make one call you get one

562
00:25:48,380 --> 00:25:57,230
thing done and so you make a call to the

563
00:25:51,380 --> 00:25:58,850
deleted file you delete the file the CVE

564
00:25:57,230 --> 00:26:02,150
themselves that you would actually find

565
00:25:58,850 --> 00:26:04,760
if you look at this driver well there

566
00:26:02,150 --> 00:26:09,200
are no numbers as yet because these

567
00:26:04,760 --> 00:26:11,390
aren't actually reported so I'll give as

568
00:26:09,200 --> 00:26:14,720
much detail as I can but I prefer not to

569
00:26:11,390 --> 00:26:17,150
give out you know weaponized information

570
00:26:14,720 --> 00:26:18,830
I got moaned up for that last time so

571
00:26:17,150 --> 00:26:21,320
I'd rather not get moaned out again

572
00:26:18,830 --> 00:26:23,830
the first one is straight-up Harbinger

573
00:26:21,320 --> 00:26:26,540
code execution in stack-based over from

574
00:26:23,830 --> 00:26:27,500
device I'll control number there two two

575
00:26:26,540 --> 00:26:29,990
two zero four eight

576
00:26:27,500 --> 00:26:34,200
it's an unguarded mem copy

577
00:26:29,990 --> 00:26:37,260
from whatever you put in here it gets

578
00:26:34,200 --> 00:26:40,940
copied to a stack straight over from the

579
00:26:37,260 --> 00:26:43,560
same I opted for code well this one is

580
00:26:40,940 --> 00:26:46,830
one of the bit worse back doors this is

581
00:26:43,560 --> 00:26:48,720
an arbitrary file rename and move you

582
00:26:46,830 --> 00:26:51,270
give it a file name it will move it or

583
00:26:48,720 --> 00:26:53,540
rename it to any place you like now you

584
00:26:51,270 --> 00:26:56,940
can think about how you might abuse that

585
00:26:53,540 --> 00:26:58,950
your guest or you know some unprivileged

586
00:26:56,940 --> 00:27:00,330
user and you don't like a file in a

587
00:26:58,950 --> 00:27:02,610
particular place even though it's owned

588
00:27:00,330 --> 00:27:04,470
by system not a problem just ask to

589
00:27:02,610 --> 00:27:08,969
report to do it for you and it will

590
00:27:04,470 --> 00:27:11,280
oblige if you want to delete a file you

591
00:27:08,970 --> 00:27:13,590
can delete a file now I've left that on

592
00:27:11,280 --> 00:27:14,970
open there because I couldn't be

593
00:27:13,590 --> 00:27:17,730
bothered to figure out what the actual

594
00:27:14,970 --> 00:27:19,470
device I are told cold for it is but

595
00:27:17,730 --> 00:27:20,210
it's right next to the file rename you

596
00:27:19,470 --> 00:27:22,670
can't miss it

597
00:27:20,210 --> 00:27:25,290
and so you can delete any file you like

598
00:27:22,670 --> 00:27:27,150
remember these are just a flavor if you

599
00:27:25,290 --> 00:27:31,070
want the rest or to enumerate them

600
00:27:27,150 --> 00:27:34,320
completely just download either free

601
00:27:31,070 --> 00:27:38,220
pulldown rapport throw the binary is it

602
00:27:34,320 --> 00:27:39,870
simple to take less than 10 minutes you

603
00:27:38,220 --> 00:27:41,130
can also write to arbitrate files but

604
00:27:39,870 --> 00:27:43,139
you have to have the fact of the handle

605
00:27:41,130 --> 00:27:45,180
open unfortunately there's no

606
00:27:43,140 --> 00:27:47,610
unfortunately these as far as I know

607
00:27:45,180 --> 00:27:50,430
there's no way to have trustee report

608
00:27:47,610 --> 00:27:53,729
open a file for you so you can't just

609
00:27:50,430 --> 00:27:55,740
open you know any file your I can read

610
00:27:53,730 --> 00:27:58,290
it and all right to it unfortunately

611
00:27:55,740 --> 00:28:00,540
there may be a way to do that with a

612
00:27:58,290 --> 00:28:04,830
race condition button you know I haven't

613
00:28:00,540 --> 00:28:07,639
had the time to look at it and another

614
00:28:04,830 --> 00:28:11,490
useful one is an arbitrary process kill

615
00:28:07,640 --> 00:28:15,600
now this one I've actually used in one

616
00:28:11,490 --> 00:28:19,290
of the demos so one thing actually

617
00:28:15,600 --> 00:28:22,800
wanted to do was to get trusty report to

618
00:28:19,290 --> 00:28:25,200
kill itself and then backdoor itself on

619
00:28:22,800 --> 00:28:28,020
the same system using its own driver and

620
00:28:25,200 --> 00:28:30,000
so I actually use this one so you can

621
00:28:28,020 --> 00:28:32,610
kill any arbitrary processor you happen

622
00:28:30,000 --> 00:28:35,720
to to want to kill it's running as any

623
00:28:32,610 --> 00:28:40,050
user and of course there's plenty more

624
00:28:35,720 --> 00:28:42,669
you just have to look for them so let's

625
00:28:40,050 --> 00:28:45,850
see if we can actually get this into

626
00:28:42,669 --> 00:28:48,570
work I had an awful lot of problems

627
00:28:45,850 --> 00:28:55,209
getting these things to work earlier

628
00:28:48,570 --> 00:28:57,789
nice so you can see that this was is

629
00:28:55,210 --> 00:29:00,609
just a rapport installed yesterday on a

630
00:28:57,789 --> 00:29:02,499
Windows 7 host 32-bit they're either

631
00:29:00,609 --> 00:29:05,980
32-bit or 64-bit and doesn't really

632
00:29:02,499 --> 00:29:07,570
matter it was updated as of yesterday so

633
00:29:05,980 --> 00:29:12,669
these are the latest and greatest

634
00:29:07,570 --> 00:29:17,259
updates as far as I'm aware anyway right

635
00:29:12,669 --> 00:29:19,239
so first and foremost we will show so

636
00:29:17,259 --> 00:29:23,859
here we have rapport management service

637
00:29:19,239 --> 00:29:30,940
DXE running the system process ID 3 5 0

638
00:29:23,859 --> 00:29:34,689
4 leaking terminate that view and 0 4

639
00:29:30,940 --> 00:29:35,529
and that should kill it should yes there

640
00:29:34,690 --> 00:29:39,489
we go dead

641
00:29:35,529 --> 00:29:42,539
so that's process termination obviously

642
00:29:39,489 --> 00:29:45,549
it gets a little bit better than that I

643
00:29:42,539 --> 00:29:53,158
can show you how you might of London

644
00:29:45,549 --> 00:29:58,480
that's the wrong one where is it start

645
00:29:53,159 --> 00:30:03,009
very much okay right so if we actually

646
00:29:58,480 --> 00:30:09,009
wanted to backdoor program one way to do

647
00:30:03,009 --> 00:30:12,190
it would be to rename to kill the

648
00:30:09,009 --> 00:30:14,970
process and then rename the executable

649
00:30:12,190 --> 00:30:17,739
report management service somewhere else

650
00:30:14,970 --> 00:30:19,989
so we have the directory over here

651
00:30:17,739 --> 00:30:21,879
I can't delete that file and if you're

652
00:30:19,989 --> 00:30:24,429
not without elevating privileges anyway

653
00:30:21,879 --> 00:30:25,988
now let's see if this will actually work

654
00:30:24,429 --> 00:30:29,679
this is where it starts to get sketchy

655
00:30:25,989 --> 00:30:33,669
there's a race condition here yeah as a

656
00:30:29,679 --> 00:30:36,539
race condition so we killed it but not

657
00:30:33,669 --> 00:30:48,389
moved in see it's still there

658
00:30:36,539 --> 00:30:48,389
unfortunately start it again nope yeah

659
00:30:57,249 --> 00:31:03,769
yeah anyway one of the problems with my

660
00:31:00,980 --> 00:31:05,509
exploit is suit it assumes that rapport

661
00:31:03,769 --> 00:31:07,879
service management service will be

662
00:31:05,509 --> 00:31:10,700
running so it tries to kill it first and

663
00:31:07,879 --> 00:31:15,738
sometimes it doesn't respawn you have to

664
00:31:10,700 --> 00:31:24,649
do it manually it doesn't seem to want

665
00:31:15,739 --> 00:31:27,470
to work now oh hang on I might be

666
00:31:24,649 --> 00:31:38,029
copying it to a place where I already

667
00:31:27,470 --> 00:31:42,369
exists yeah that's likely what is go

668
00:31:38,029 --> 00:31:42,369
away see next slash

669
00:31:48,140 --> 00:31:51,520
yeah so a dealer

670
00:32:01,850 --> 00:32:11,330
No delete all right and of course it's

671
00:32:07,020 --> 00:32:11,330
not running now so as to start a again

672
00:32:14,029 --> 00:32:22,830
and now it works there we go so at this

673
00:32:19,980 --> 00:32:24,299
point we've killed rapport it's

674
00:32:22,830 --> 00:32:27,870
management service which is ruining a

675
00:32:24,299 --> 00:32:29,940
system using its own driver and then use

676
00:32:27,870 --> 00:32:31,139
this very own driver to move the binary

677
00:32:29,940 --> 00:32:34,549
completely out of the way into a

678
00:32:31,140 --> 00:32:36,779
temporary folder for us at that point

679
00:32:34,549 --> 00:32:38,730
you can just drop in another piece of

680
00:32:36,779 --> 00:32:40,409
code into the same exploit to move

681
00:32:38,730 --> 00:32:42,720
whatever binary you happen to want to

682
00:32:40,409 --> 00:32:44,929
execute when it responds back into the

683
00:32:42,720 --> 00:32:48,929
same directory and away you go and

684
00:32:44,929 --> 00:32:52,260
that's using nothing but functionality

685
00:32:48,929 --> 00:32:56,309
that is there and is only meant to be

686
00:32:52,260 --> 00:32:57,658
used if your IBM report if you figure

687
00:32:56,309 --> 00:33:00,990
out I say if you figure out how to

688
00:32:57,659 --> 00:33:03,240
identify itself as report then you can

689
00:33:00,990 --> 00:33:21,929
use out all of these function calls

690
00:33:03,240 --> 00:33:23,220
directly so is it intentional ybm did

691
00:33:21,929 --> 00:33:24,779
the following the implemented

692
00:33:23,220 --> 00:33:26,789
functionality there they knew would

693
00:33:24,779 --> 00:33:29,460
subvert permissions of the operating

694
00:33:26,789 --> 00:33:32,220
system they distributed it around the

695
00:33:29,460 --> 00:33:36,090
world using Trusteer rapport and then

696
00:33:32,220 --> 00:33:37,919
they hid it behind a firewall that you

697
00:33:36,090 --> 00:33:41,520
can only access if you happen to be

698
00:33:37,919 --> 00:33:44,580
there cold personally I'd say that that

699
00:33:41,520 --> 00:33:46,440
kind of implies intentionality you're

700
00:33:44,580 --> 00:33:48,389
using this functionality in your own

701
00:33:46,440 --> 00:33:52,289
program you just don't want other people

702
00:33:48,390 --> 00:33:55,110
to use it but it's there and it's on

703
00:33:52,289 --> 00:33:57,658
every single Windows installation that's

704
00:33:55,110 --> 00:34:01,740
currently existing and the banks are

705
00:33:57,659 --> 00:34:04,169
still pushing it and it doesn't take

706
00:34:01,740 --> 00:34:07,350
more than a few hours to figure out how

707
00:34:04,169 --> 00:34:10,260
to subvert the protections and the API

708
00:34:07,350 --> 00:34:14,000
is simple to figure out these exploit

709
00:34:10,260 --> 00:34:17,030
all these exploits are trivial to write

710
00:34:14,000 --> 00:34:19,399
one of the things I'll dump all the

711
00:34:17,030 --> 00:34:22,700
emails I got from Trusteer after the

712
00:34:19,399 --> 00:34:24,830
first 44 con 2011 which are just for

713
00:34:22,699 --> 00:34:28,668
true comedic value if anybody remembers

714
00:34:24,830 --> 00:34:32,509
back then the some of the things that

715
00:34:28,668 --> 00:34:34,969
were said were just hilarious and

716
00:34:32,510 --> 00:34:37,310
another lesson learned I did spend about

717
00:34:34,969 --> 00:34:39,138
a week trying to figure out if the code

718
00:34:37,310 --> 00:34:41,629
I was looking at was actually the code

719
00:34:39,139 --> 00:34:43,909
was meant to be looking at digital

720
00:34:41,629 --> 00:34:45,560
signatures and you know validating that

721
00:34:43,909 --> 00:34:48,429
the module is actually rapport or not

722
00:34:45,560 --> 00:34:51,409
and then I just had so happened to

723
00:34:48,429 --> 00:34:53,599
remember that I installed it on a 32-bit

724
00:34:51,409 --> 00:34:56,210
machine put on a 64 pulled the binaries

725
00:34:53,599 --> 00:35:00,200
off and it turns out that rusty left in

726
00:34:56,210 --> 00:35:02,540
all the debug symbols so you can just

727
00:35:00,200 --> 00:35:04,129
all the debug messages all the symbols

728
00:35:02,540 --> 00:35:06,680
everything so it's all there for you to

729
00:35:04,130 --> 00:35:09,740
look at if you happen to want to reverse

730
00:35:06,680 --> 00:35:14,509
it I encourage you to look at the 64 bit

731
00:35:09,740 --> 00:35:17,479
version not the 32 okay does anyone have

732
00:35:14,510 --> 00:35:20,859
any questions at the bottom that's a bit

733
00:35:17,480 --> 00:35:24,410
of a troll I was considering removing it

734
00:35:20,859 --> 00:35:28,910
the quality at the top there that one

735
00:35:24,410 --> 00:35:32,029
actually was a suggestion from a trustee

736
00:35:28,910 --> 00:35:34,279
area to the Times reporter I don't know

737
00:35:32,030 --> 00:35:36,230
if you remember back in 2011 The Times

738
00:35:34,280 --> 00:35:38,810
wrote an article about all that all the

739
00:35:36,230 --> 00:35:43,790
bugs in the first version and the trusty

740
00:35:38,810 --> 00:35:45,830
reporter thought it useful or pertinent

741
00:35:43,790 --> 00:35:48,290
to try and get the time to write a new

742
00:35:45,830 --> 00:35:50,230
article and the article he wanted

743
00:35:48,290 --> 00:35:54,230
publishing was basically an interview

744
00:35:50,230 --> 00:35:56,200
between Trusteer and banks so you can

745
00:35:54,230 --> 00:35:58,339
imagine what would have been said there

746
00:35:56,200 --> 00:36:03,970
but suffice to say the article was never

747
00:35:58,339 --> 00:36:03,970
printed thankfully okay that's the end

748
00:36:04,650 --> 00:36:06,710
you

