1
00:00:02,870 --> 00:00:07,710
all right well thank you all for coming

2
00:00:05,819 --> 00:00:09,240
fry start I just want to say forty-four

3
00:00:07,710 --> 00:00:11,759
kana is a really special place in my

4
00:00:09,240 --> 00:00:14,009
heart because six years ago this is the

5
00:00:11,759 --> 00:00:17,450
first conference that I ever gave a talk

6
00:00:14,009 --> 00:00:21,210
at and since then it's been a wild ride

7
00:00:17,450 --> 00:00:25,470
but if you want to actually see a video

8
00:00:21,210 --> 00:00:28,560
of how not to do a talk that's available

9
00:00:25,470 --> 00:00:29,820
on YouTube for you all to enjoy some

10
00:00:28,560 --> 00:00:32,369
really good stuff happened during that

11
00:00:29,820 --> 00:00:34,080
talk like my laptop died there was a

12
00:00:32,369 --> 00:00:35,430
bunch of stuff that yeah so if you ever

13
00:00:34,080 --> 00:00:37,379
need a reference point on like how

14
00:00:35,430 --> 00:00:39,480
things to not do during a talk

15
00:00:37,380 --> 00:00:41,670
definitely go see that one I think it

16
00:00:39,480 --> 00:00:44,040
was it was called mi TMF it was like in

17
00:00:41,670 --> 00:00:46,590
2000 and it was like six years ago at

18
00:00:44,040 --> 00:00:49,140
this point but yeah it's great to be

19
00:00:46,590 --> 00:00:53,190
back again hopefully this talk won't

20
00:00:49,140 --> 00:00:56,930
suck as bad as that did so I'm gonna be

21
00:00:53,190 --> 00:01:00,420
talking to you about dotnet tradecraft

22
00:00:56,930 --> 00:01:03,360
specifically how to fuse if you will

23
00:01:00,420 --> 00:01:04,530
scripting languages into your dot net

24
00:01:03,360 --> 00:01:05,670
tradecraft and there's a bunch of

25
00:01:04,530 --> 00:01:08,490
reasons why we want to do this in the

26
00:01:05,670 --> 00:01:10,920
first place the main reason why I even

27
00:01:08,490 --> 00:01:13,439
went down this rabbit hole was to start

28
00:01:10,920 --> 00:01:15,240
was to shift back the paradigm to

29
00:01:13,439 --> 00:01:17,398
PowerShell style like attacks okay

30
00:01:15,240 --> 00:01:18,990
because with the recent migration to

31
00:01:17,399 --> 00:01:20,969
c-sharp tooling if you're not familiar

32
00:01:18,990 --> 00:01:23,100
the offensive community has been

33
00:01:20,969 --> 00:01:25,859
migrating all of their offensive tooling

34
00:01:23,100 --> 00:01:28,829
to C sharp from PowerShell that's mainly

35
00:01:25,859 --> 00:01:30,298
because up until net four point eight

36
00:01:28,829 --> 00:01:32,279
there weren't any protections in the

37
00:01:30,299 --> 00:01:35,329
underlying framework and I'm gonna be

38
00:01:32,280 --> 00:01:38,670
discussing this during this talk as well

39
00:01:35,329 --> 00:01:41,068
but the operationally speaking that

40
00:01:38,670 --> 00:01:43,049
whole tool migration has brought a lot

41
00:01:41,069 --> 00:01:45,090
of disadvantages one of them is that

42
00:01:43,049 --> 00:01:46,469
it's now come we're now switching to a

43
00:01:45,090 --> 00:01:48,389
compiled language which means that

44
00:01:46,469 --> 00:01:49,798
everything is not dynamic anymore we

45
00:01:48,389 --> 00:01:52,619
have to compile things server-side

46
00:01:49,799 --> 00:01:53,880
client-side all the stuff during limited

47
00:01:52,619 --> 00:01:55,139
time engagements if you haven't set up

48
00:01:53,880 --> 00:01:56,818
your like continuous integration

49
00:01:55,139 --> 00:01:59,130
pipelines or anything like that

50
00:01:56,819 --> 00:02:03,959
compiling stuff can be time-consuming

51
00:01:59,130 --> 00:02:05,850
and often brain hurting so this is my

52
00:02:03,959 --> 00:02:08,250
approach to doing that I really like the

53
00:02:05,850 --> 00:02:10,258
old way of doing things with PowerShell

54
00:02:08,250 --> 00:02:12,510
I wanted to continue to do things that

55
00:02:10,258 --> 00:02:14,100
way because of all the flexibility is

56
00:02:12,510 --> 00:02:14,920
provided so this this is sort of my

57
00:02:14,100 --> 00:02:17,799
approach on

58
00:02:14,920 --> 00:02:19,600
like solving that problem this is the

59
00:02:17,800 --> 00:02:21,370
obligatory who am i slide my name is

60
00:02:19,600 --> 00:02:23,739
marchello I go by bike bleeder on the

61
00:02:21,370 --> 00:02:25,420
Twitty tweet Twitter's I work for Black

62
00:02:23,740 --> 00:02:26,860
Hills InfoSec written a bunch of stuff

63
00:02:25,420 --> 00:02:28,170
over the years if you're inclined to

64
00:02:26,860 --> 00:02:30,850
look at other stuff that I've written

65
00:02:28,170 --> 00:02:34,899
you can check out the stuff at that

66
00:02:30,850 --> 00:02:35,859
github profile there and this is the

67
00:02:34,900 --> 00:02:38,830
agenda for today so we're really

68
00:02:35,860 --> 00:02:40,300
covering some motivations we're also

69
00:02:38,830 --> 00:02:41,680
really going into some key dotnet

70
00:02:40,300 --> 00:02:43,180
framework concepts because to understand

71
00:02:41,680 --> 00:02:44,680
what I'm going to be talking about we

72
00:02:43,180 --> 00:02:46,540
sort of have to be all on the same

73
00:02:44,680 --> 00:02:47,800
playing field I'm not gonna be this is

74
00:02:46,540 --> 00:02:49,780
gonna be very that's gonna be a very

75
00:02:47,800 --> 00:02:50,830
high-level introduction to the framer

76
00:02:49,780 --> 00:02:52,750
because I don't want to bore you if

77
00:02:50,830 --> 00:02:54,040
you're not interested at all with dotnet

78
00:02:52,750 --> 00:02:55,900
development or anything like that but

79
00:02:54,040 --> 00:02:57,579
we're definitely enough to get on the

80
00:02:55,900 --> 00:02:59,130
same playing field then how many

81
00:02:57,580 --> 00:03:01,750
actually talking about how to embed

82
00:02:59,130 --> 00:03:03,790
interpreters and engines so the the meat

83
00:03:01,750 --> 00:03:05,950
of this talk so like how to actually go

84
00:03:03,790 --> 00:03:07,959
about embedding third-party or Microsoft

85
00:03:05,950 --> 00:03:10,119
officially supported scripting languages

86
00:03:07,959 --> 00:03:12,280
into your c-sharp assemblies or really

87
00:03:10,120 --> 00:03:13,930
any dotnet language and then I'm gonna

88
00:03:12,280 --> 00:03:16,209
be talking I'm gonna giving I'm gonna be

89
00:03:13,930 --> 00:03:18,310
doing some demos about how to bring your

90
00:03:16,209 --> 00:03:19,720
own interpreter demos so BYO AI is the

91
00:03:18,310 --> 00:03:22,239
term that I've been starting to call

92
00:03:19,720 --> 00:03:23,519
this type of payload bring your own

93
00:03:22,239 --> 00:03:25,930
interpreter I'm gonna be demoing some

94
00:03:23,519 --> 00:03:27,250
for you today hopefully they'll they'll

95
00:03:25,930 --> 00:03:30,040
work so let's all start premium to the

96
00:03:27,250 --> 00:03:31,600
demo gods right now and then I'm gonna

97
00:03:30,040 --> 00:03:34,660
be talking about if you didn't want to

98
00:03:31,600 --> 00:03:35,950
embed these interpreters and engines at

99
00:03:34,660 --> 00:03:37,510
all I'm gonna be talking about how to

100
00:03:35,950 --> 00:03:40,149
actually go about weaponizing some of

101
00:03:37,510 --> 00:03:42,250
these concepts that I'm gonna be

102
00:03:40,150 --> 00:03:44,350
explaining to you really quickly without

103
00:03:42,250 --> 00:03:46,750
doing any and the embedding also I'm

104
00:03:44,350 --> 00:03:49,239
gonna be demoing silent Trinity which is

105
00:03:46,750 --> 00:03:51,370
a c2 framework that I've been building

106
00:03:49,239 --> 00:03:53,709
over the course of the past year ish now

107
00:03:51,370 --> 00:03:55,750
that sort of tries to weaponize these

108
00:03:53,709 --> 00:03:57,340
concepts and put a nice little ribbon on

109
00:03:55,750 --> 00:03:58,390
top of everything so I'm gonna be

110
00:03:57,340 --> 00:03:59,739
demoing that as well then we're gonna be

111
00:03:58,390 --> 00:04:01,809
going over detection and were we talking

112
00:03:59,739 --> 00:04:05,560
about and then we're getting opens for a

113
00:04:01,810 --> 00:04:07,540
question and answers okay so like I said

114
00:04:05,560 --> 00:04:09,400
before when I opened up the key

115
00:04:07,540 --> 00:04:11,170
motivation behind this originally was

116
00:04:09,400 --> 00:04:13,329
just to find the way to execute power

117
00:04:11,170 --> 00:04:15,280
shell without power shell okay and going

118
00:04:13,329 --> 00:04:17,019
into this I really didn't have any

119
00:04:15,280 --> 00:04:18,339
dotnet development experience I didn't

120
00:04:17,019 --> 00:04:20,769
have any c-sharp experience I don't even

121
00:04:18,339 --> 00:04:22,570
know how the hell I anything worked so

122
00:04:20,769 --> 00:04:24,290
needless to say I was I was venturing

123
00:04:22,570 --> 00:04:27,140
into unknown territory

124
00:04:24,290 --> 00:04:28,670
but again like because of the whole sea

125
00:04:27,140 --> 00:04:30,260
shark wheelie migration it was just a

126
00:04:28,670 --> 00:04:32,030
matter of time I'm gonna I'm gonna have

127
00:04:30,260 --> 00:04:34,310
to need to learn all this stuff but I

128
00:04:32,030 --> 00:04:35,840
really did not like the fact that you

129
00:04:34,310 --> 00:04:38,090
just had to compile stuff all the time

130
00:04:35,840 --> 00:04:40,369
now like that I didn't like that at all

131
00:04:38,090 --> 00:04:44,150
and it brought it really made me feel

132
00:04:40,370 --> 00:04:45,560
nostalgic of the PowerShell era where we

133
00:04:44,150 --> 00:04:48,590
could just like throw down source code

134
00:04:45,560 --> 00:04:50,390
and done that's it right and that's

135
00:04:48,590 --> 00:04:52,190
because we've started migrating over the

136
00:04:50,390 --> 00:04:53,960
c-sharp mainly because of all the

137
00:04:52,190 --> 00:04:55,400
PowerShell defenses that have been

138
00:04:53,960 --> 00:04:57,770
implemented in the PowerShell runtime

139
00:04:55,400 --> 00:04:59,120
itself so MZ script block logging

140
00:04:57,770 --> 00:05:01,310
transcription logging all this stuff

141
00:04:59,120 --> 00:05:04,580
made the red semen community migrate

142
00:05:01,310 --> 00:05:08,230
over the c-sharp I really like scripting

143
00:05:04,580 --> 00:05:10,550
languages as well I'm a Python fanboy so

144
00:05:08,230 --> 00:05:12,980
the minute I heard like oh we're all

145
00:05:10,550 --> 00:05:16,340
migrating over to c-sharp I was like no

146
00:05:12,980 --> 00:05:18,110
please stop and also like developing

147
00:05:16,340 --> 00:05:19,669
weird tools so whenever a new concept

148
00:05:18,110 --> 00:05:21,860
comes out I tend to just like take it

149
00:05:19,670 --> 00:05:23,900
and see how weird I can get with it

150
00:05:21,860 --> 00:05:27,230
so there was a bunch of motivations

151
00:05:23,900 --> 00:05:30,020
behind doing this type of work so this

152
00:05:27,230 --> 00:05:31,580
is where we're gonna have to sort of get

153
00:05:30,020 --> 00:05:34,580
all on the same playing field and learn

154
00:05:31,580 --> 00:05:36,740
a bit about dotnet development and some

155
00:05:34,580 --> 00:05:39,740
ki dotnet framework concepts if you've

156
00:05:36,740 --> 00:05:42,080
dealt with C sharp or dotnet at all

157
00:05:39,740 --> 00:05:43,910
you've probably heard the term dotnet

158
00:05:42,080 --> 00:05:47,030
assembly been thrown around a lot okay

159
00:05:43,910 --> 00:05:48,650
and the question that I get asked a lot

160
00:05:47,030 --> 00:05:49,789
is well well what can you please explain

161
00:05:48,650 --> 00:05:51,560
to me what is it that net assembly

162
00:05:49,790 --> 00:05:53,210
because I still understand well a dotnet

163
00:05:51,560 --> 00:05:55,130
assembly all you really need to know is

164
00:05:53,210 --> 00:05:58,520
the dotnet assembly is a single unit of

165
00:05:55,130 --> 00:06:00,980
execution that any dotnet language can

166
00:05:58,520 --> 00:06:02,750
interpret it executes okay and I'm not

167
00:06:00,980 --> 00:06:04,370
gonna be delving into like the the

168
00:06:02,750 --> 00:06:06,110
format without net assembly because that

169
00:06:04,370 --> 00:06:08,320
can be a whole talk of its own but the

170
00:06:06,110 --> 00:06:10,430
key part of that sentence really is any

171
00:06:08,320 --> 00:06:11,630
dotnet language can interpret and

172
00:06:10,430 --> 00:06:14,750
execute because that actually has some

173
00:06:11,630 --> 00:06:16,250
pretty interesting implications how do

174
00:06:14,750 --> 00:06:17,810
you go about generating a dotnet

175
00:06:16,250 --> 00:06:20,060
assembly well it's pretty easy all

176
00:06:17,810 --> 00:06:22,520
either take is any dotnet language okay

177
00:06:20,060 --> 00:06:24,830
so in this case c-sharp but really it

178
00:06:22,520 --> 00:06:26,960
can be any anything any dotnet language

179
00:06:24,830 --> 00:06:27,979
that's another key and an important

180
00:06:26,960 --> 00:06:29,900
thing to understand by the way the

181
00:06:27,980 --> 00:06:33,500
dotnet framework isn't C sharp C sharp

182
00:06:29,900 --> 00:06:34,820
is in the.net framework okay you can the

183
00:06:33,500 --> 00:06:36,710
dotnet framework is nothing more than a

184
00:06:34,820 --> 00:06:38,150
set of tools and infrastructure that

185
00:06:36,710 --> 00:06:40,190
Microsoft developed for you to build

186
00:06:38,150 --> 00:06:41,539
your own language okay the de facto

187
00:06:40,190 --> 00:06:44,270
language without net framework is

188
00:06:41,540 --> 00:06:46,520
c-sharp but they're not coupled together

189
00:06:44,270 --> 00:06:47,930
like it's dotnet framework is literally

190
00:06:46,520 --> 00:06:50,210
just the framework for you to build your

191
00:06:47,930 --> 00:06:52,280
own language on okay so in order to

192
00:06:50,210 --> 00:06:54,320
actually generate that and assembly all

193
00:06:52,280 --> 00:06:57,109
you really need to do is take any dotnet

194
00:06:54,320 --> 00:06:59,240
language and compile it okay so c-sharp

195
00:06:57,110 --> 00:07:01,190
pretty easy right your c-sharp code

196
00:06:59,240 --> 00:07:02,950
Visual Studio compiles into a dotnet

197
00:07:01,190 --> 00:07:06,469
assembly which you can execute right

198
00:07:02,950 --> 00:07:08,800
this is in the dotnet world though this

199
00:07:06,470 --> 00:07:11,150
is things start differing a lot

200
00:07:08,800 --> 00:07:12,530
immediately like when you try to compile

201
00:07:11,150 --> 00:07:14,989
it to a DLL so if you take that same

202
00:07:12,530 --> 00:07:17,090
c-sharp code and in compile it to a DLL

203
00:07:14,990 --> 00:07:18,920
that DLL is also dotnet assembly okay so

204
00:07:17,090 --> 00:07:20,869
from the dotnet framework perspective

205
00:07:18,920 --> 00:07:23,120
that executable and DLL really are the

206
00:07:20,870 --> 00:07:26,210
same thing which is might differ from

207
00:07:23,120 --> 00:07:28,280
what you'd expect from C++ or C which

208
00:07:26,210 --> 00:07:30,739
are unmanaged languages so outside of

209
00:07:28,280 --> 00:07:33,739
the dotnet framework okay so that's an

210
00:07:30,740 --> 00:07:37,340
important key thing to understand these

211
00:07:33,740 --> 00:07:38,990
are both net assemblies also dotnet

212
00:07:37,340 --> 00:07:40,849
assemblies like the format are

213
00:07:38,990 --> 00:07:42,950
completely almost completely different

214
00:07:40,850 --> 00:07:44,270
from native executables and dll's okay

215
00:07:42,950 --> 00:07:46,190
so just because they have the same

216
00:07:44,270 --> 00:07:48,140
extension does not mean they're the same

217
00:07:46,190 --> 00:07:50,810
format okay so that's that's also

218
00:07:48,140 --> 00:07:52,340
another important thing to understand so

219
00:07:50,810 --> 00:07:55,130
remember when I talked about dotnet

220
00:07:52,340 --> 00:07:57,919
assemblies earlier like it's a single

221
00:07:55,130 --> 00:07:59,360
unit of execution at any data frame that

222
00:07:57,920 --> 00:08:00,320
in a language can interpret and execute

223
00:07:59,360 --> 00:08:04,310
that has some pretty interesting

224
00:08:00,320 --> 00:08:06,380
consequences so these are three

225
00:08:04,310 --> 00:08:08,960
officially Microsoft supported languages

226
00:08:06,380 --> 00:08:10,969
okay so we got c-sharp PowerShell if you

227
00:08:08,960 --> 00:08:12,289
didn't know is a dotnet language there's

228
00:08:10,970 --> 00:08:17,450
F sharp and there's a bunch of others

229
00:08:12,290 --> 00:08:18,830
this vb.net there's C++ cly which is

230
00:08:17,450 --> 00:08:21,320
like mixed mode assemblies which is a

231
00:08:18,830 --> 00:08:24,140
wheel well really weird world to tread

232
00:08:21,320 --> 00:08:26,960
in because it's like it's C++ but it's

233
00:08:24,140 --> 00:08:30,080
also dotnet it's really weird but there

234
00:08:26,960 --> 00:08:32,299
are also a bunch of other third-party

235
00:08:30,080 --> 00:08:34,340
dotnet languages because again like the

236
00:08:32,299 --> 00:08:35,870
dotnet framework is nothing more than a

237
00:08:34,340 --> 00:08:37,490
set of infrastructure for you to build

238
00:08:35,870 --> 00:08:40,130
your own language so Microsoft has built

239
00:08:37,490 --> 00:08:41,750
some languages with it third parties

240
00:08:40,130 --> 00:08:43,640
have also built some languages with it

241
00:08:41,750 --> 00:08:44,570
and these languages are very interesting

242
00:08:43,640 --> 00:08:46,850
for a number of reasons

243
00:08:44,570 --> 00:08:48,440
Ramar gonna be going and going over some

244
00:08:46,850 --> 00:08:50,540
of these there's ironpython for example

245
00:08:48,440 --> 00:08:53,360
so ironpython is nothing more

246
00:08:50,540 --> 00:08:54,709
a dotnet implementation of the Python

247
00:08:53,360 --> 00:08:57,110
programming language so you got normal

248
00:08:54,709 --> 00:08:58,160
Python which is based on C and c plus c

249
00:08:57,110 --> 00:09:00,320
and c python right

250
00:08:58,160 --> 00:09:01,430
ironpython is based on the.net framework

251
00:09:00,320 --> 00:09:02,899
okay

252
00:09:01,430 --> 00:09:05,479
there's also boo lang how many of you

253
00:09:02,899 --> 00:09:09,050
have heard of bulan before well you

254
00:09:05,480 --> 00:09:10,670
don't count but but okay but that's so

255
00:09:09,050 --> 00:09:11,810
boo lang is amazing boo Lang was

256
00:09:10,670 --> 00:09:13,790
originally developed I'm gonna be

257
00:09:11,810 --> 00:09:15,469
talking about playing a lot I'm gonna

258
00:09:13,790 --> 00:09:17,329
ranting and raving over in the next

259
00:09:15,470 --> 00:09:18,740
couple slides because boo Lang from an

260
00:09:17,329 --> 00:09:20,449
operational tradecraft perspective is

261
00:09:18,740 --> 00:09:22,610
amazing and it was originally developed

262
00:09:20,449 --> 00:09:24,589
I found this out recently it was

263
00:09:22,610 --> 00:09:26,810
originally developed for the Unity

264
00:09:24,589 --> 00:09:29,000
gaming engine to provide scripting

265
00:09:26,810 --> 00:09:31,180
capabilities to it I had no clue I've

266
00:09:29,000 --> 00:09:33,319
been using it for malware all this time

267
00:09:31,180 --> 00:09:35,689
so that was something new I found out

268
00:09:33,319 --> 00:09:37,610
and someone at Def Con approached me and

269
00:09:35,690 --> 00:09:39,680
told me about that that was amazing

270
00:09:37,610 --> 00:09:42,560
and an iron Ruby I'm Ruby again like

271
00:09:39,680 --> 00:09:44,239
it's just another language built on top

272
00:09:42,560 --> 00:09:45,949
of the dotnet framework it's similar to

273
00:09:44,240 --> 00:09:47,720
Ruby in almost every way she perform but

274
00:09:45,949 --> 00:09:52,849
instead of calling C API you're calling

275
00:09:47,720 --> 00:09:54,410
net API so these languages some of them

276
00:09:52,850 --> 00:09:56,180
most of them are scripting languages so

277
00:09:54,410 --> 00:09:58,279
bula and iron Python and Ruby are

278
00:09:56,180 --> 00:09:59,750
interpreted languages okay what that

279
00:09:58,279 --> 00:10:01,130
means is that from an operational

280
00:09:59,750 --> 00:10:02,329
perspective these are really really

281
00:10:01,130 --> 00:10:05,449
interesting because they allow you to

282
00:10:02,329 --> 00:10:07,489
dynamically call dotnet API is through a

283
00:10:05,449 --> 00:10:11,329
scripting language which is what exactly

284
00:10:07,490 --> 00:10:14,000
PowerShell allowed us to do okay so what

285
00:10:11,329 --> 00:10:16,040
we're basically doing is we're going

286
00:10:14,000 --> 00:10:18,230
back to powershell style like attacks

287
00:10:16,040 --> 00:10:20,269
right because powershell allowed us to

288
00:10:18,230 --> 00:10:22,370
dynamically call done an API switch

289
00:10:20,269 --> 00:10:24,019
allowed us to do all the great things

290
00:10:22,370 --> 00:10:25,430
that as red teamers we all know and love

291
00:10:24,019 --> 00:10:28,100
like injecting shell code and

292
00:10:25,430 --> 00:10:30,800
interacting with low-level API calls

293
00:10:28,100 --> 00:10:34,040
only an iron Python boolong an iron ruby

294
00:10:30,800 --> 00:10:35,689
okay so like this is this is some pretty

295
00:10:34,040 --> 00:10:38,500
I personally think this is some pretty

296
00:10:35,689 --> 00:10:43,810
interesting stuff and in order to

297
00:10:38,500 --> 00:10:47,269
understand why the red teaming community

298
00:10:43,810 --> 00:10:49,069
migrated to c-sharp we need to sort of

299
00:10:47,269 --> 00:10:51,380
also understand like that all the

300
00:10:49,069 --> 00:10:53,569
defenses of the PowerShell runtime all

301
00:10:51,380 --> 00:10:55,939
the fences in the PowerShell runtime are

302
00:10:53,569 --> 00:10:58,519
only in the PowerShell runtime okay so

303
00:10:55,939 --> 00:11:00,469
the minute you jump to another dotnet

304
00:10:58,519 --> 00:11:02,180
language you're automatically getting

305
00:11:00,470 --> 00:11:03,990
around all of those PowerShell defenses

306
00:11:02,180 --> 00:11:05,489
that's that's that's

307
00:11:03,990 --> 00:11:09,080
so like that's that's the main reason

308
00:11:05,490 --> 00:11:11,430
why we've been jumping to c-sharp

309
00:11:09,080 --> 00:11:13,290
there's also some really interesting

310
00:11:11,430 --> 00:11:14,790
dotnet the dotnet languages in general

311
00:11:13,290 --> 00:11:16,740
have some really interesting properties

312
00:11:14,790 --> 00:11:18,329
and functions that allow us to do some

313
00:11:16,740 --> 00:11:20,250
pretty cool stuff so assembly that load

314
00:11:18,330 --> 00:11:24,089
for example and assembly that load is by

315
00:11:20,250 --> 00:11:26,580
far like the the main culprit of why C

316
00:11:24,089 --> 00:11:30,570
sharp and dotnet and net are like really

317
00:11:26,580 --> 00:11:32,220
really a sought-after for red teaming

318
00:11:30,570 --> 00:11:34,050
trade craft okay it's because assembly

319
00:11:32,220 --> 00:11:35,520
that load is fantastic because it

320
00:11:34,050 --> 00:11:37,560
accepts a byte array among many other

321
00:11:35,520 --> 00:11:39,660
things but what that means is you can

322
00:11:37,560 --> 00:11:41,550
just throw it and assembly so remember

323
00:11:39,660 --> 00:11:44,520
how I told you before like generate that

324
00:11:41,550 --> 00:11:46,620
an assembly by compiling C put a c-sharp

325
00:11:44,520 --> 00:11:48,930
you get a compiler into an executable or

326
00:11:46,620 --> 00:11:51,120
dll if you throw that executable in dll

327
00:11:48,930 --> 00:11:54,239
to this function it'll automatically

328
00:11:51,120 --> 00:11:56,279
load it in memory okay now all of a

329
00:11:54,240 --> 00:11:58,920
sudden you have access to all the code

330
00:11:56,279 --> 00:12:00,870
that you've defined in your c-sharp

331
00:11:58,920 --> 00:12:02,459
source code okay so this basically this

332
00:12:00,870 --> 00:12:04,589
this one function is basically the

333
00:12:02,459 --> 00:12:07,349
equivalent of having reflective PE and

334
00:12:04,589 --> 00:12:09,690
DLL injection natively supported by a

335
00:12:07,350 --> 00:12:10,890
language okay which is kind of crazy

336
00:12:09,690 --> 00:12:13,980
when you go to think about it and this

337
00:12:10,890 --> 00:12:17,069
is the main reason why a lot like that

338
00:12:13,980 --> 00:12:19,290
red teaming tradecraft has been has been

339
00:12:17,070 --> 00:12:21,600
migrating over to net and c-sharp

340
00:12:19,290 --> 00:12:25,230
languages because this one function

341
00:12:21,600 --> 00:12:28,110
offers us so much flexibility so like I

342
00:12:25,230 --> 00:12:30,500
said before like the main reason why the

343
00:12:28,110 --> 00:12:33,720
red teaming community has jumped to

344
00:12:30,500 --> 00:12:36,779
c-sharp is because as of very recently

345
00:12:33,720 --> 00:12:38,670
all the defenses were put into the

346
00:12:36,779 --> 00:12:40,170
PowerShell runtime but Microsoft but

347
00:12:38,670 --> 00:12:42,630
they weren't actually put into the

348
00:12:40,170 --> 00:12:44,939
underlying framework okay so what this

349
00:12:42,630 --> 00:12:46,709
means is that to bypass all of the

350
00:12:44,940 --> 00:12:48,180
PowerShell protections all you have to

351
00:12:46,709 --> 00:12:50,250
do is just jump to another dotnet

352
00:12:48,180 --> 00:12:52,770
language and the red teaming community

353
00:12:50,250 --> 00:12:54,209
has jumped to c-sharp just because it

354
00:12:52,770 --> 00:12:56,040
was a very natural transition from

355
00:12:54,209 --> 00:12:57,599
powershell because in order to do some

356
00:12:56,040 --> 00:12:59,490
low-level powerful stuff you sort need

357
00:12:57,600 --> 00:13:02,370
to do c-sharp anyway and they're very

358
00:12:59,490 --> 00:13:06,420
similar but so my thought like this this

359
00:13:02,370 --> 00:13:08,430
whole talk is based around the idea that

360
00:13:06,420 --> 00:13:10,349
well we've jumped the c-sharp but what

361
00:13:08,430 --> 00:13:12,120
happens if we jump to ironpython instead

362
00:13:10,350 --> 00:13:14,810
right what happens if we jump to

363
00:13:12,120 --> 00:13:16,170
bullying or ironruby because these are

364
00:13:14,810 --> 00:13:19,050
scripting like

365
00:13:16,170 --> 00:13:21,479
they're not compiled languages so those

366
00:13:19,050 --> 00:13:22,859
gives a technically they would give us

367
00:13:21,480 --> 00:13:26,820
the same amount of flexibility that

368
00:13:22,860 --> 00:13:28,079
PowerShell gave us only in Python only

369
00:13:26,820 --> 00:13:30,389
instead of coding a PowerShell we'd be

370
00:13:28,079 --> 00:13:32,489
coding in Python or guling a ruby so

371
00:13:30,389 --> 00:13:36,149
that I thought this would be like a

372
00:13:32,490 --> 00:13:38,760
really interesting idea to try out and

373
00:13:36,149 --> 00:13:40,130
as it recently these defenses weren't

374
00:13:38,760 --> 00:13:43,560
put in place in the underlying framework

375
00:13:40,130 --> 00:13:45,329
what that means is that again like we

376
00:13:43,560 --> 00:13:47,849
could just jump to another language but

377
00:13:45,329 --> 00:13:49,439
as of dotnet for pointing MZ has been

378
00:13:47,850 --> 00:13:52,680
integrated in dotnet framework although

379
00:13:49,440 --> 00:13:55,560
when it comes to these scripting

380
00:13:52,680 --> 00:13:59,130
languages MZ really doesn't have that

381
00:13:55,560 --> 00:14:00,750
much insight into it and I think you'll

382
00:13:59,130 --> 00:14:04,949
start to understand like why when I

383
00:14:00,750 --> 00:14:07,290
started demoing this stuff so that's the

384
00:14:04,949 --> 00:14:09,029
basic principle around this talk this is

385
00:14:07,290 --> 00:14:11,310
gonna get this is we're gonna be making

386
00:14:09,029 --> 00:14:13,050
some weird today this is this is

387
00:14:11,310 --> 00:14:15,479
you can get weird real fast especially

388
00:14:13,050 --> 00:14:19,790
once you start embedding stuff another

389
00:14:15,480 --> 00:14:21,930
consequence of doing this is that

390
00:14:19,790 --> 00:14:24,120
because all of these languages are

391
00:14:21,930 --> 00:14:25,260
interoperable with each other because

392
00:14:24,120 --> 00:14:26,880
they're all based on the same framework

393
00:14:25,260 --> 00:14:29,399
right so what that means is that

394
00:14:26,880 --> 00:14:31,860
ironpython can do whatever PowerShell

395
00:14:29,399 --> 00:14:33,810
did PowerShell can do whatever I earn

396
00:14:31,860 --> 00:14:36,060
Ruby can do Lu lang can do whatever

397
00:14:33,810 --> 00:14:37,109
c-sharp can do they're all interoperable

398
00:14:36,060 --> 00:14:39,329
with each other which means you can also

399
00:14:37,110 --> 00:14:41,370
embed them within one another so you can

400
00:14:39,329 --> 00:14:44,189
take the ironpython engine embed it in a

401
00:14:41,370 --> 00:14:46,440
pool powershell script embed that into a

402
00:14:44,190 --> 00:14:48,300
spooling script and embed that into a

403
00:14:46,440 --> 00:14:49,890
c-sharp script and keep on going and

404
00:14:48,300 --> 00:14:51,959
going and going and everything will just

405
00:14:49,890 --> 00:14:55,319
work because they're all based on the

406
00:14:51,959 --> 00:14:57,630
same framework the underlying framework

407
00:14:55,320 --> 00:15:00,269
they all can interpret and execute see

408
00:14:57,630 --> 00:15:01,860
char M Blees dotnet assemblies so

409
00:15:00,269 --> 00:15:03,810
they're all interoperable with each

410
00:15:01,860 --> 00:15:06,569
other so what this means is that you can

411
00:15:03,810 --> 00:15:08,430
embed them and if you've been using any

412
00:15:06,569 --> 00:15:11,069
pen testing or PowerShell red teaming

413
00:15:08,430 --> 00:15:13,138
tools recently you've probably done this

414
00:15:11,069 --> 00:15:15,510
once or twice without even knowing it

415
00:15:13,139 --> 00:15:16,769
okay because there are some tools out

416
00:15:15,510 --> 00:15:19,260
there right now that allow you to

417
00:15:16,769 --> 00:15:22,980
execute power shell code within a

418
00:15:19,260 --> 00:15:25,110
c-sharp binary or C sharp within

419
00:15:22,980 --> 00:15:27,720
PowerShell okay so this is basically the

420
00:15:25,110 --> 00:15:28,890
same concept all I'm saying is hey well

421
00:15:27,720 --> 00:15:29,880
we've been using PowerShell in c-sharp

422
00:15:28,890 --> 00:15:31,890
to do this

423
00:15:29,880 --> 00:15:33,330
why not embed the ironpython interpreter

424
00:15:31,890 --> 00:15:35,310
and said or the bullying interpreter and

425
00:15:33,330 --> 00:15:37,470
said so this is just like some code from

426
00:15:35,310 --> 00:15:39,869
power line but basically the same code

427
00:15:37,470 --> 00:15:41,790
you can take from like NPS or pone shell

428
00:15:39,870 --> 00:15:43,980
if you're familiar with those they embed

429
00:15:41,790 --> 00:15:46,260
the power shell run space within a

430
00:15:43,980 --> 00:15:47,460
c-sharp binary right and you can do the

431
00:15:46,260 --> 00:15:49,590
same it you can do the same thing in

432
00:15:47,460 --> 00:15:51,780
Reverse you can take c-sharp code embed

433
00:15:49,590 --> 00:15:53,550
it in a PowerShell file you might if

434
00:15:51,780 --> 00:15:55,079
you're dealing with like red teaming

435
00:15:53,550 --> 00:15:56,729
tradecraft you might not want to do what

436
00:15:55,080 --> 00:15:58,980
I just mentioned just because if you do

437
00:15:56,730 --> 00:16:00,960
decide to compile C sharp within

438
00:15:58,980 --> 00:16:03,960
PowerShell by default it'll drop

439
00:16:00,960 --> 00:16:05,460
artifacts to this okay and you'll see

440
00:16:03,960 --> 00:16:06,960
with some of the demos that I'll be

441
00:16:05,460 --> 00:16:08,790
showing you that that with other

442
00:16:06,960 --> 00:16:10,470
third-party the scripting languages that

443
00:16:08,790 --> 00:16:14,699
isn't necessarily the case which is

444
00:16:10,470 --> 00:16:16,830
great from an object perspective so when

445
00:16:14,700 --> 00:16:18,060
you start embedding these interpreters

446
00:16:16,830 --> 00:16:20,760
and engines or whatever the language

447
00:16:18,060 --> 00:16:22,439
calls them you're gonna find that there

448
00:16:20,760 --> 00:16:24,030
is some common issues slash code

449
00:16:22,440 --> 00:16:25,830
patterns that you're gonna have to keep

450
00:16:24,030 --> 00:16:29,880
using over and over again in order to

451
00:16:25,830 --> 00:16:32,790
solve certain problems the main issue is

452
00:16:29,880 --> 00:16:35,880
that most of these languages only

453
00:16:32,790 --> 00:16:37,290
support net 4.0 and up although in my

454
00:16:35,880 --> 00:16:38,430
mind that really isn't an issue because

455
00:16:37,290 --> 00:16:39,480
they don't the reason you want to do

456
00:16:38,430 --> 00:16:42,630
this in the first place

457
00:16:39,480 --> 00:16:44,580
is to not use PowerShell so if you're

458
00:16:42,630 --> 00:16:46,020
running any dotnet version lower than

459
00:16:44,580 --> 00:16:47,820
four you can just revert back to

460
00:16:46,020 --> 00:16:49,040
powershell tradecraft because none of

461
00:16:47,820 --> 00:16:54,210
those protections are in place but

462
00:16:49,040 --> 00:16:55,770
that's just my opinion on that the the

463
00:16:54,210 --> 00:16:56,370
languages usually are going to need some

464
00:16:55,770 --> 00:16:59,040
dll's

465
00:16:56,370 --> 00:17:00,780
those deals are usually not on disk so

466
00:16:59,040 --> 00:17:03,390
what that means is you can have to find

467
00:17:00,780 --> 00:17:04,920
a way to load them on runtime and you

468
00:17:03,390 --> 00:17:07,589
can do that pretty easily with dotnet

469
00:17:04,920 --> 00:17:09,630
there are some certain events that you

470
00:17:07,589 --> 00:17:13,020
can hook which I'll talk about in the

471
00:17:09,630 --> 00:17:15,270
next few slides that basically you can

472
00:17:13,020 --> 00:17:19,560
insert any logic into them and you can

473
00:17:15,270 --> 00:17:20,910
automatically resolve those do laus so

474
00:17:19,560 --> 00:17:22,679
like I said before like the main the

475
00:17:20,910 --> 00:17:24,030
main the biggest problem you're gonna

476
00:17:22,680 --> 00:17:25,829
probably run into is that those deals

477
00:17:24,030 --> 00:17:27,300
aren't present on Windows by default

478
00:17:25,829 --> 00:17:29,190
right so like ironpython for example

479
00:17:27,300 --> 00:17:30,659
requires for DLLs to run Google and

480
00:17:29,190 --> 00:17:32,610
requires three clear script which I'll

481
00:17:30,660 --> 00:17:35,040
be talking about requires one so the

482
00:17:32,610 --> 00:17:37,649
main so the problem arises is like how

483
00:17:35,040 --> 00:17:39,510
do we get these to load on runtime right

484
00:17:37,650 --> 00:17:42,780
well thankfully

485
00:17:39,510 --> 00:17:44,790
a lot like that net provides us with the

486
00:17:42,780 --> 00:17:47,639
assembly resolved event okay so you can

487
00:17:44,790 --> 00:17:49,918
hook this event net and put any logic

488
00:17:47,640 --> 00:17:51,480
you want into it okay so what that means

489
00:17:49,919 --> 00:17:53,040
is that when you run your c-sharp

490
00:17:51,480 --> 00:17:55,410
assembly that embeds like the blank

491
00:17:53,040 --> 00:17:57,149
compiler for example that's the sharp

492
00:17:55,410 --> 00:17:59,220
assembly will run whatever code you put

493
00:17:57,150 --> 00:18:01,679
in that event to resolve its

494
00:17:59,220 --> 00:18:05,580
dependencies quote-unquote okay so if

495
00:18:01,679 --> 00:18:07,350
you for example tell the put some logic

496
00:18:05,580 --> 00:18:10,639
in there that goes out to any internet

497
00:18:07,350 --> 00:18:14,280
downloads dll's from like a server and

498
00:18:10,640 --> 00:18:16,049
load them on and pass that to assembly

499
00:18:14,280 --> 00:18:18,030
that load that'll work like so you can

500
00:18:16,049 --> 00:18:19,770
you can automatically make your c-sharp

501
00:18:18,030 --> 00:18:21,600
assembly or any of these interpreters

502
00:18:19,770 --> 00:18:23,790
just automatically download these dll's

503
00:18:21,600 --> 00:18:25,110
when they start up so that's probably

504
00:18:23,790 --> 00:18:27,120
the best way to do it

505
00:18:25,110 --> 00:18:30,299
boo Liang is special in this sense

506
00:18:27,120 --> 00:18:32,909
because usually so hooking the app

507
00:18:30,299 --> 00:18:34,490
domain assembly resolve event you're

508
00:18:32,910 --> 00:18:37,679
going to need to do that with most

509
00:18:34,490 --> 00:18:39,510
scripted dotnet languages because I help

510
00:18:37,679 --> 00:18:40,919
if you're not familiar with alum or just

511
00:18:39,510 --> 00:18:43,260
a tool that basically allows you just to

512
00:18:40,919 --> 00:18:47,280
pack all the necessary dll's into a

513
00:18:43,260 --> 00:18:49,110
single executable a lot of these dotnet

514
00:18:47,280 --> 00:18:51,660
scripting languages don't really work

515
00:18:49,110 --> 00:18:53,909
with il merge for one reason or another

516
00:18:51,660 --> 00:18:55,620
so hooking this assembly resolve event

517
00:18:53,910 --> 00:18:57,630
is probably the main way to deal with

518
00:18:55,620 --> 00:18:59,070
this issue boo lying on the other hand

519
00:18:57,630 --> 00:19:01,169
is special in the sense because it

520
00:18:59,070 --> 00:19:03,080
actually does support il merge so if you

521
00:19:01,169 --> 00:19:06,179
do decide to compile a pooling script

522
00:19:03,080 --> 00:19:07,590
you can actually use I'll emerge with it

523
00:19:06,179 --> 00:19:12,000
which allows you do some really fun

524
00:19:07,590 --> 00:19:13,949
stuff so now I'm gonna be starting to

525
00:19:12,000 --> 00:19:15,540
demo a lot of a lot of these concepts

526
00:19:13,950 --> 00:19:17,250
that I've talked about hopefully I've

527
00:19:15,540 --> 00:19:19,740
relayed this information to you at that

528
00:19:17,250 --> 00:19:21,480
just a little minor but ironpython is

529
00:19:19,740 --> 00:19:23,340
the first dotnet scripting languages

530
00:19:21,480 --> 00:19:25,710
that scripting languages I started out

531
00:19:23,340 --> 00:19:27,510
using mainly because I'm a Python fanboy

532
00:19:25,710 --> 00:19:29,150
so I was like okay well this is this is

533
00:19:27,510 --> 00:19:32,250
easy right

534
00:19:29,150 --> 00:19:34,140
so I started actually you this was the

535
00:19:32,250 --> 00:19:35,970
first language that I put into silent

536
00:19:34,140 --> 00:19:38,850
unity which is just to tool that I wrote

537
00:19:35,970 --> 00:19:41,790
and but but unfortunately our Python has

538
00:19:38,850 --> 00:19:43,649
some major downsides one of them being

539
00:19:41,790 --> 00:19:45,240
from at least the Red Team tradecraft

540
00:19:43,650 --> 00:19:48,020
perspective one of them being that the

541
00:19:45,240 --> 00:19:50,190
module that you use to do P invoke

542
00:19:48,020 --> 00:19:52,379
basically a lot which allows us to call

543
00:19:50,190 --> 00:19:53,240
like native windows API functions to

544
00:19:52,380 --> 00:19:56,360
inject shell code

545
00:19:53,240 --> 00:19:58,580
that stuff it works when ironpython is

546
00:19:56,360 --> 00:20:00,889
on disk but when you load the ironpython

547
00:19:58,580 --> 00:20:03,439
runtime in memory and then try to do p

548
00:20:00,890 --> 00:20:04,160
invoke it just breaks so right out the

549
00:20:03,440 --> 00:20:08,180
gate

550
00:20:04,160 --> 00:20:11,840
ironpython wasn't exactly the best when

551
00:20:08,180 --> 00:20:13,400
it came to Red Team tradecraft okay so

552
00:20:11,840 --> 00:20:14,780
all of these code examples that I'm

553
00:20:13,400 --> 00:20:16,340
gonna add all these code examples that

554
00:20:14,780 --> 00:20:18,230
I'm gonna be executing and demonstrating

555
00:20:16,340 --> 00:20:19,490
along that github repo right there so

556
00:20:18,230 --> 00:20:22,340
they're publicly available so if you

557
00:20:19,490 --> 00:20:23,660
want to follow along while I demo or or

558
00:20:22,340 --> 00:20:25,790
take a look at them after you can go to

559
00:20:23,660 --> 00:20:28,670
that link I'm gonna be demoing invoker

560
00:20:25,790 --> 00:20:30,530
and Python that PS one right now but

561
00:20:28,670 --> 00:20:32,000
there's also an example out that github

562
00:20:30,530 --> 00:20:35,090
repo that embeds the arm Python

563
00:20:32,000 --> 00:20:36,980
interpreter within a c-sharp binary so

564
00:20:35,090 --> 00:20:39,290
you can use that so you can do that as

565
00:20:36,980 --> 00:20:41,960
well and because again like you can

566
00:20:39,290 --> 00:20:44,690
embed these languages within any other

567
00:20:41,960 --> 00:20:46,940
dotnet language okay

568
00:20:44,690 --> 00:20:50,660
ironpython requires for.net assemblies

569
00:20:46,940 --> 00:20:51,920
to run to two of them have been written

570
00:20:50,660 --> 00:20:54,860
by Microsoft they're not signed

571
00:20:51,920 --> 00:20:56,390
unfortunately but those basically just

572
00:20:54,860 --> 00:20:58,879
allow arm Python to interface with

573
00:20:56,390 --> 00:21:00,380
the.net DLR which is the dynamic

574
00:20:58,880 --> 00:21:03,200
language runtime which is the feature

575
00:21:00,380 --> 00:21:06,400
that allows you to build dotnet

576
00:21:03,200 --> 00:21:09,140
scripting languages okay so I'm gonna be

577
00:21:06,400 --> 00:21:13,070
demoing invoke ironpython here real

578
00:21:09,140 --> 00:21:15,050
quick and this is a really really simple

579
00:21:13,070 --> 00:21:18,020
example okay and I'm gonna be embedding

580
00:21:15,050 --> 00:21:20,750
the powdi aren't Python runtime within a

581
00:21:18,020 --> 00:21:23,810
PowerShell script and then executing

582
00:21:20,750 --> 00:21:28,340
Python code within the embedded runtime

583
00:21:23,810 --> 00:21:29,540
okay so this is the just a little simple

584
00:21:28,340 --> 00:21:31,730
iron Python script that I'm gonna be

585
00:21:29,540 --> 00:21:34,490
executing notice that instead of like

586
00:21:31,730 --> 00:21:37,270
Python libraries is that font okay by

587
00:21:34,490 --> 00:21:39,380
the way you see in the back okay sweet

588
00:21:37,270 --> 00:21:41,870
notice that I'm not importing Python

589
00:21:39,380 --> 00:21:44,450
libraries but I'm importing dotnet api's

590
00:21:41,870 --> 00:21:46,070
again that's because these are dotnet

591
00:21:44,450 --> 00:21:49,910
scripting languages you can dynamically

592
00:21:46,070 --> 00:21:51,560
call dotnet api's right so this is the

593
00:21:49,910 --> 00:21:53,660
little just a little simple iron Python

594
00:21:51,560 --> 00:21:54,860
script that allows you I'm just printing

595
00:21:53,660 --> 00:21:59,270
hello from iron Python

596
00:21:54,860 --> 00:22:00,919
okay these are the four deal assemblies

597
00:21:59,270 --> 00:22:03,440
that meant assemblies that are needed to

598
00:22:00,920 --> 00:22:05,630
actually spin the iron Python runtime up

599
00:22:03,440 --> 00:22:08,510
and I'm just loading them this is just

600
00:22:05,630 --> 00:22:10,430
some code that just makes it a little

601
00:22:08,510 --> 00:22:11,750
bit prettier and loading those

602
00:22:10,430 --> 00:22:13,430
assemblies in memory so that we can

603
00:22:11,750 --> 00:22:15,710
actually spin the iron Python engine up

604
00:22:13,430 --> 00:22:17,720
this is the code responsible where all

605
00:22:15,710 --> 00:22:18,980
the magic happens so you can see that

606
00:22:17,720 --> 00:22:21,650
once we load those assemblies we have

607
00:22:18,980 --> 00:22:23,690
access to the create engine function

608
00:22:21,650 --> 00:22:27,020
within the iron Python hosting API which

609
00:22:23,690 --> 00:22:29,180
allows us to spin the engine up you can

610
00:22:27,020 --> 00:22:32,750
actually set global variables to the

611
00:22:29,180 --> 00:22:34,670
engine itself without before actually

612
00:22:32,750 --> 00:22:37,360
running anything so in this case we're

613
00:22:34,670 --> 00:22:39,440
just setting just the CLR type source

614
00:22:37,360 --> 00:22:40,669
just a little variable demonstrate that

615
00:22:39,440 --> 00:22:44,390
you can actually set global variables

616
00:22:40,670 --> 00:22:45,970
and then we're executing the embedded

617
00:22:44,390 --> 00:22:50,600
script okay

618
00:22:45,970 --> 00:22:53,030
so I'm gonna run this real quick there

619
00:22:50,600 --> 00:22:56,990
you go so hello from ironpython

620
00:22:53,030 --> 00:23:01,220
okay so we were basically able to run on

621
00:22:56,990 --> 00:23:02,900
Python code within a other dotnet

622
00:23:01,220 --> 00:23:04,400
scripting language so you're probably

623
00:23:02,900 --> 00:23:07,130
wondering okay well this is great but

624
00:23:04,400 --> 00:23:08,840
like from an offensive perspective what

625
00:23:07,130 --> 00:23:10,250
did this mean well if you think about

626
00:23:08,840 --> 00:23:12,050
this for a second what this means is

627
00:23:10,250 --> 00:23:14,870
that this is basically going back to the

628
00:23:12,050 --> 00:23:19,460
old ways that we use PowerShell right

629
00:23:14,870 --> 00:23:23,209
because once you load the ironpython

630
00:23:19,460 --> 00:23:25,310
engine here any not none of the

631
00:23:23,210 --> 00:23:27,590
powershell protections in place have any

632
00:23:25,310 --> 00:23:30,320
visibility into the python code that

633
00:23:27,590 --> 00:23:32,750
you're executing within the embedded

634
00:23:30,320 --> 00:23:34,730
ironpython engine because we're that

635
00:23:32,750 --> 00:23:36,350
that little create engine function there

636
00:23:34,730 --> 00:23:38,090
is immediately making a transition to

637
00:23:36,350 --> 00:23:41,330
another net language where none of these

638
00:23:38,090 --> 00:23:42,439
defenses are in place okay so the minute

639
00:23:41,330 --> 00:23:46,280
you start running

640
00:23:42,440 --> 00:23:49,790
ironpython code within that ironpython

641
00:23:46,280 --> 00:23:52,550
engine powershell is like i have no clue

642
00:23:49,790 --> 00:23:56,030
what you're doing anymore you feel free

643
00:23:52,550 --> 00:23:58,040
to run whatever you want okay so this is

644
00:23:56,030 --> 00:23:59,510
just an example so and whatever you do

645
00:23:58,040 --> 00:24:01,040
with powershell you can do within

646
00:23:59,510 --> 00:24:02,600
ironpython or any other of these

647
00:24:01,040 --> 00:24:04,670
languages I'm gonna be demonstrating by

648
00:24:02,600 --> 00:24:07,189
the way okay so like if you wanted to

649
00:24:04,670 --> 00:24:09,440
inject shellcode maybe not with our in

650
00:24:07,190 --> 00:24:11,060
Python because like I said before the P

651
00:24:09,440 --> 00:24:13,100
invoke module that allows you to do that

652
00:24:11,060 --> 00:24:14,120
it's broken but in bulan you can totally

653
00:24:13,100 --> 00:24:15,830
do that I'm gonna be actually

654
00:24:14,120 --> 00:24:18,439
demonstrating that in a second

655
00:24:15,830 --> 00:24:20,210
but with like you can do whatever

656
00:24:18,440 --> 00:24:23,870
you could do with PowerShell within any

657
00:24:20,210 --> 00:24:25,659
of these languages let's go back to my

658
00:24:23,870 --> 00:24:27,889
slides here

659
00:24:25,659 --> 00:24:30,679
so that's just a really stupid simple

660
00:24:27,889 --> 00:24:32,719
example okay but let's actually do

661
00:24:30,679 --> 00:24:34,009
something you know worthwhile doing and

662
00:24:32,720 --> 00:24:36,379
this is where bullying comes in so

663
00:24:34,009 --> 00:24:38,299
bullying is amazing for a number of

664
00:24:36,379 --> 00:24:40,070
reasons and every time I go to the wiki

665
00:24:38,299 --> 00:24:41,149
page so bullying is hosted on github

666
00:24:40,070 --> 00:24:43,279
it's a free open-source

667
00:24:41,149 --> 00:24:45,258
dotnet scripting language the wiki is

668
00:24:43,279 --> 00:24:46,730
amazing and especially if you're a red

669
00:24:45,259 --> 00:24:48,169
teamer I encourage you to go look at the

670
00:24:46,730 --> 00:24:49,940
wiki and the examples in there because

671
00:24:48,169 --> 00:24:51,440
some of them are just pure gold from

672
00:24:49,940 --> 00:24:53,960
like a offensive trade crafts

673
00:24:51,440 --> 00:24:56,000
perspective it is sort of like a love

674
00:24:53,960 --> 00:24:57,889
child between Python and C sharp so

675
00:24:56,000 --> 00:24:59,779
which is great from my perspective as

676
00:24:57,889 --> 00:25:01,428
again I'm a Python Python fanboy so it

677
00:24:59,779 --> 00:25:02,809
takes constructs of both languages and

678
00:25:01,429 --> 00:25:04,879
sort of mishmash ha's them together

679
00:25:02,809 --> 00:25:06,259
you'd expect that to be somewhat weird

680
00:25:04,879 --> 00:25:07,908
but it's actually a very beautiful

681
00:25:06,259 --> 00:25:09,799
language like the more I code in this

682
00:25:07,909 --> 00:25:11,450
the more I think like this is just a

683
00:25:09,799 --> 00:25:13,700
beautiful language and it was developed

684
00:25:11,450 --> 00:25:15,320
by one guy too so definitely show him

685
00:25:13,700 --> 00:25:17,379
some love for making malware out of it I

686
00:25:15,320 --> 00:25:19,610
think that's that's the least we can do

687
00:25:17,379 --> 00:25:21,408
again it's heavily inspired by Python

688
00:25:19,610 --> 00:25:23,570
like that you can use like for loops as

689
00:25:21,409 --> 00:25:25,100
you'd expect in Python using statement

690
00:25:23,570 --> 00:25:27,889
like the context managers all that stuff

691
00:25:25,100 --> 00:25:30,889
but the best thing about pooling is that

692
00:25:27,889 --> 00:25:34,039
it natively supports the DLL cord

693
00:25:30,889 --> 00:25:36,709
attribute so it actually has P invoke

694
00:25:34,039 --> 00:25:39,230
that works from within memory and on

695
00:25:36,710 --> 00:25:42,740
this which is fantastic so now what this

696
00:25:39,230 --> 00:25:44,750
means is that we can do anything we a

697
00:25:42,740 --> 00:25:46,309
can actually do like anything from a

698
00:25:44,750 --> 00:25:50,620
offensive tree crafts perspective so

699
00:25:46,309 --> 00:25:52,820
this is a 16 line bullying script that

700
00:25:50,620 --> 00:25:55,840
imports the mini dump right thump API

701
00:25:52,820 --> 00:25:58,009
which allows us to dump memory and

702
00:25:55,840 --> 00:26:00,279
basically just makes a memory dump of

703
00:25:58,009 --> 00:26:03,470
alsace and puts that on this okay

704
00:26:00,279 --> 00:26:05,210
sixteen lines and no visual studio

705
00:26:03,470 --> 00:26:07,370
required by the way this is just like

706
00:26:05,210 --> 00:26:09,830
sublime text and the boo lang

707
00:26:07,370 --> 00:26:11,209
interpreter and compiler and you can

708
00:26:09,830 --> 00:26:12,649
just take if you don't want to embed the

709
00:26:11,210 --> 00:26:14,450
boo Lang interpreter like I said before

710
00:26:12,649 --> 00:26:16,219
you can take the script and compile it

711
00:26:14,450 --> 00:26:18,080
to an executable using the provided

712
00:26:16,220 --> 00:26:20,440
compiler at the blueline runtime gives

713
00:26:18,080 --> 00:26:23,689
you okay so you can really quickly

714
00:26:20,440 --> 00:26:25,879
weaponize any of these examples that I'm

715
00:26:23,690 --> 00:26:28,100
gonna be showing you so that that's

716
00:26:25,879 --> 00:26:28,549
that's that's the main beauty of this as

717
00:26:28,100 --> 00:26:30,800
well

718
00:26:28,549 --> 00:26:32,780
another thing about bullying is that I

719
00:26:30,800 --> 00:26:34,399
from again like this is I'm giving you

720
00:26:32,780 --> 00:26:35,660
my current understanding of how bullying

721
00:26:34,400 --> 00:26:39,020
works which might change in the future

722
00:26:35,660 --> 00:26:41,150
but I think it directly compiles to ms

723
00:26:39,020 --> 00:26:43,879
IL so what that means is that you can

724
00:26:41,150 --> 00:26:46,100
actually take this script compile it and

725
00:26:43,880 --> 00:26:48,140
then with the the resulting binary will

726
00:26:46,100 --> 00:26:50,810
work on any version of.net doesn't

727
00:26:48,140 --> 00:26:53,330
matter what version of.net the host the

728
00:26:50,810 --> 00:26:54,980
endpoint has it'll just work it even

729
00:26:53,330 --> 00:26:56,720
works out like Windows 7 and like I've

730
00:26:54,980 --> 00:26:59,150
tried even old versions of like Windows

731
00:26:56,720 --> 00:27:00,710
XP and stuff that had met on it and it

732
00:26:59,150 --> 00:27:03,890
seems to work everywhere that I've tried

733
00:27:00,710 --> 00:27:06,830
it on if you start referencing the

734
00:27:03,890 --> 00:27:08,600
actual bullying infrastructure from

735
00:27:06,830 --> 00:27:12,070
within the script so like if you import

736
00:27:08,600 --> 00:27:14,540
like blank the blowing assemblies that

737
00:27:12,070 --> 00:27:16,970
well then it won't work it'll only work

738
00:27:14,540 --> 00:27:18,980
on that 4.0 okay because the ruling

739
00:27:16,970 --> 00:27:20,270
requires that 4.0 but if you don't

740
00:27:18,980 --> 00:27:24,760
reference anything in the blank

741
00:27:20,270 --> 00:27:26,900
infrastructure then you're good to go so

742
00:27:24,760 --> 00:27:29,510
I'm gonna be demonstrating invoke

743
00:27:26,900 --> 00:27:32,450
jump-scare right now and again like

744
00:27:29,510 --> 00:27:34,490
these these code snippets are hosted on

745
00:27:32,450 --> 00:27:36,320
that github rebel so this embeds the

746
00:27:34,490 --> 00:27:38,540
blank compiler within a PowerShell

747
00:27:36,320 --> 00:27:41,060
script and we're gonna be injecting

748
00:27:38,540 --> 00:27:44,240
shell code through the embedded bool and

749
00:27:41,060 --> 00:27:45,740
compiler okay booooo requires 3000

750
00:27:44,240 --> 00:27:47,450
assemblies to run so it's even better

751
00:27:45,740 --> 00:27:51,740
than arm Python one less assembly to

752
00:27:47,450 --> 00:27:52,670
load and so do them in the example I'm

753
00:27:51,740 --> 00:27:54,140
gonna be demonstrating right now is

754
00:27:52,670 --> 00:27:55,730
embedding the boolean compiled within

755
00:27:54,140 --> 00:27:57,590
powershell but again like there's an

756
00:27:55,730 --> 00:28:01,220
example on that github repla that embeds

757
00:27:57,590 --> 00:28:04,699
it in a c-sharp executable as well okay

758
00:28:01,220 --> 00:28:09,410
so let's go back to our VM here this is

759
00:28:04,700 --> 00:28:11,270
invoked jump-scare okay what I put some

760
00:28:09,410 --> 00:28:12,620
description in there again like you'll

761
00:28:11,270 --> 00:28:14,600
see that it's a common pattern that

762
00:28:12,620 --> 00:28:16,909
you're gonna have three a.net assemblies

763
00:28:14,600 --> 00:28:18,169
to actually spin up the engine or

764
00:28:16,910 --> 00:28:20,420
interpreter whatever the language calls

765
00:28:18,170 --> 00:28:23,390
it this is our shell code which is pops

766
00:28:20,420 --> 00:28:25,550
calc okay this is generated from Emma so

767
00:28:23,390 --> 00:28:27,860
venom this is in the PowerShell script

768
00:28:25,550 --> 00:28:29,300
but obviously like if you wanted to make

769
00:28:27,860 --> 00:28:31,969
this a lot more stealthier you could

770
00:28:29,300 --> 00:28:33,470
probably you you can totally take this

771
00:28:31,970 --> 00:28:36,860
shell code and put it in the boo light

772
00:28:33,470 --> 00:28:39,590
source so that like from a PowerShell

773
00:28:36,860 --> 00:28:41,120
from a PowerShell like scripting script

774
00:28:39,590 --> 00:28:42,409
logging point of view or MZ point of

775
00:28:41,120 --> 00:28:44,219
view there really isn't anything to

776
00:28:42,410 --> 00:28:48,960
trigger on

777
00:28:44,220 --> 00:28:50,940
and also what's in this particular

778
00:28:48,960 --> 00:28:54,650
example I'm actually loading the blank

779
00:28:50,940 --> 00:28:57,060
source from another file on disk but

780
00:28:54,650 --> 00:28:59,670
just by literally commenting out these

781
00:28:57,060 --> 00:29:01,409
two lines you can just embed the source

782
00:28:59,670 --> 00:29:03,240
within the PowerShell script itself so

783
00:29:01,410 --> 00:29:06,900
it's all self-contained and you have to

784
00:29:03,240 --> 00:29:09,540
worry about like other files on disk and

785
00:29:06,900 --> 00:29:10,830
then here this is again like this is

786
00:29:09,540 --> 00:29:14,820
where the magic happens we're basically

787
00:29:10,830 --> 00:29:17,520
just spinning up the boolean compiler

788
00:29:14,820 --> 00:29:21,060
and we're telling it to compile to

789
00:29:17,520 --> 00:29:23,580
memory now what's another thing great

790
00:29:21,060 --> 00:29:26,429
about pooling is that when you set true

791
00:29:23,580 --> 00:29:29,520
to this compile to memory flag excuse me

792
00:29:26,430 --> 00:29:32,070
it actually compiles to memory so as

793
00:29:29,520 --> 00:29:33,720
opposed to embedding c-sharp within

794
00:29:32,070 --> 00:29:35,520
PowerShell and calling add type on that

795
00:29:33,720 --> 00:29:37,110
where it leaves artifacts to this boob

796
00:29:35,520 --> 00:29:38,670
just compiles straight to memory

797
00:29:37,110 --> 00:29:42,060
there's no artifacts left on this which

798
00:29:38,670 --> 00:29:44,520
is amazing and then over here we're just

799
00:29:42,060 --> 00:29:47,280
executing the main function of the

800
00:29:44,520 --> 00:29:48,960
generated assembly and then it'll

801
00:29:47,280 --> 00:29:51,810
execute the shell code now I'm gonna

802
00:29:48,960 --> 00:29:53,880
actually show you the boo Lang source

803
00:29:51,810 --> 00:29:55,350
for this so this is the PowerShell

804
00:29:53,880 --> 00:29:57,330
script embedding the boolean compiler

805
00:29:55,350 --> 00:30:00,389
right the actual blue line code that

806
00:29:57,330 --> 00:30:02,370
we're gonna be executing is this okay so

807
00:30:00,390 --> 00:30:04,410
this is boo lang and you can see that I

808
00:30:02,370 --> 00:30:06,389
pour it over some very common shell code

809
00:30:04,410 --> 00:30:09,270
injection techniques we're here we're

810
00:30:06,390 --> 00:30:12,630
doing all the DLL imports necessary this

811
00:30:09,270 --> 00:30:16,230
is the cue a PC show code injection

812
00:30:12,630 --> 00:30:18,060
method pretty straightforward the inject

813
00:30:16,230 --> 00:30:20,490
self which is what users wait for single

814
00:30:18,060 --> 00:30:21,899
object injection technique and inject

815
00:30:20,490 --> 00:30:36,240
remote which does create remote thread

816
00:30:21,900 --> 00:30:39,780
okay so let's pop calc not demo fail

817
00:30:36,240 --> 00:30:40,380
because it does not exist I beg to

818
00:30:39,780 --> 00:30:44,490
differ

819
00:30:40,380 --> 00:30:56,090
oh no no he's right one second let's try

820
00:30:44,490 --> 00:30:56,090
this again so let's up here and

821
00:31:02,200 --> 00:31:10,779
okay let's try that one more time no I

822
00:31:09,529 --> 00:31:16,100
guess not

823
00:31:10,779 --> 00:31:17,840
hmm okay well let's do this let's try

824
00:31:16,100 --> 00:31:20,590
this one more time because I really

825
00:31:17,840 --> 00:31:28,870
wanted to show you this kind of sucks

826
00:31:20,590 --> 00:31:28,870
okay that's weird okay

827
00:31:30,909 --> 00:32:01,159
and this is open from desktop all right

828
00:31:48,770 --> 00:32:06,970
one more time all right you know what

829
00:32:01,159 --> 00:32:18,070
I'm gonna use this close this out and

830
00:32:06,970 --> 00:32:18,070
then jump-scare it okay

831
00:32:25,419 --> 00:32:33,470
hey there you go

832
00:32:28,270 --> 00:32:35,809
took us a while but we did it so so what

833
00:32:33,470 --> 00:32:37,490
this did just to recap here okay we've

834
00:32:35,809 --> 00:32:41,090
embedded the bulan compiler within

835
00:32:37,490 --> 00:32:43,279
powershell we then through we've then

836
00:32:41,090 --> 00:32:45,139
read some gulang source code off this

837
00:32:43,279 --> 00:32:46,760
but you can as easily embed it in here

838
00:32:45,140 --> 00:32:48,289
or download it from the internet for

839
00:32:46,760 --> 00:32:51,710
example which would be stealthy approach

840
00:32:48,289 --> 00:32:53,960
probably and then use bootleg source to

841
00:32:51,710 --> 00:32:55,909
actually call of our native API is to

842
00:32:53,960 --> 00:32:57,289
exit execute shell code and then execute

843
00:32:55,909 --> 00:33:02,120
it some shell code okay

844
00:32:57,289 --> 00:33:03,559
so again like this like hopefully I've

845
00:33:02,120 --> 00:33:04,939
conveyed this information in a way where

846
00:33:03,559 --> 00:33:07,160
you're probably realizing like all the

847
00:33:04,940 --> 00:33:09,289
possibilities that this opens up

848
00:33:07,160 --> 00:33:14,690
but yeah I find this to be pretty

849
00:33:09,289 --> 00:33:16,760
interesting so clear script so clear

850
00:33:14,690 --> 00:33:18,919
script is a recent discovery of mine

851
00:33:16,760 --> 00:33:21,620
this is an officially Microsoft

852
00:33:18,919 --> 00:33:23,360
supported project ok and clew skip was

853
00:33:21,620 --> 00:33:25,969
specifically designed to actually add

854
00:33:23,360 --> 00:33:29,360
scripting capabilities to your dotnet

855
00:33:25,970 --> 00:33:32,120
language okay and what's great about

856
00:33:29,360 --> 00:33:34,090
clear script is that it has what I think

857
00:33:32,120 --> 00:33:36,949
is its own J script and vbscript

858
00:33:34,090 --> 00:33:39,289
implementation now I say I think because

859
00:33:36,950 --> 00:33:41,960
I still am NOT able to find the calm

860
00:33:39,289 --> 00:33:43,850
calls necessary for it to spin up the

861
00:33:41,960 --> 00:33:46,909
windows script host environment so

862
00:33:43,850 --> 00:33:49,219
because of that I'm assuming that it

863
00:33:46,909 --> 00:33:50,870
uses its own jscript

864
00:33:49,220 --> 00:33:53,179
implementation although I can't find the

865
00:33:50,870 --> 00:33:54,649
code anywhere for me to actually say for

866
00:33:53,179 --> 00:33:58,700
certain because it's written in a really

867
00:33:54,650 --> 00:34:01,940
awkward way but this allows us to do a

868
00:33:58,700 --> 00:34:05,419
lot of cool stuff for one it allows us

869
00:34:01,940 --> 00:34:08,300
to access J script from clear script

870
00:34:05,419 --> 00:34:09,980
itself so J script if you're familiar

871
00:34:08,300 --> 00:34:11,450
with like red team tradecraft and like

872
00:34:09,980 --> 00:34:13,429
sub T's where Casey Smith's work

873
00:34:11,449 --> 00:34:15,168
recently there are a bunch of functions

874
00:34:13,429 --> 00:34:17,330
that J scripts allows us to access that

875
00:34:15,168 --> 00:34:19,129
can download like SCT files from the

876
00:34:17,330 --> 00:34:21,290
internet ok so I see T is just like a

877
00:34:19,129 --> 00:34:23,929
another whole nother talk basically but

878
00:34:21,290 --> 00:34:26,179
you can just like embed commands within

879
00:34:23,929 --> 00:34:27,649
SCT files or shell code within SCT files

880
00:34:26,179 --> 00:34:30,470
and downloads from from the internet and

881
00:34:27,649 --> 00:34:33,560
execute them through J script okay the

882
00:34:30,469 --> 00:34:36,199
problem is my the built in version of J

883
00:34:33,560 --> 00:34:37,879
script in Windows uses the windows

884
00:34:36,199 --> 00:34:39,888
script host environment and it has Hamsi

885
00:34:37,879 --> 00:34:41,868
in it right for what I understand since

886
00:34:39,889 --> 00:34:43,369
clear script has its own J script and

887
00:34:41,869 --> 00:34:45,470
fermentation doesn't go through an z so

888
00:34:43,369 --> 00:34:48,730
you can just call whatever you used to

889
00:34:45,469 --> 00:34:53,060
do in J script within clear script and

890
00:34:48,730 --> 00:34:55,699
it'll just work ok and this is an

891
00:34:53,060 --> 00:34:57,710
example of using J script with in

892
00:34:55,699 --> 00:34:59,509
c-sharp I'm gonna be demonstrating

893
00:34:57,710 --> 00:35:01,340
invoke clear script which is clear

894
00:34:59,510 --> 00:35:03,109
script within powershell and again like

895
00:35:01,340 --> 00:35:07,369
all of these code snippets are available

896
00:35:03,109 --> 00:35:09,020
on the github repo there

897
00:35:07,369 --> 00:35:12,070
what's great to know now I'm just gonna

898
00:35:09,020 --> 00:35:15,170
reopen this real quick

899
00:35:12,070 --> 00:35:17,390
about clear script there you go so clear

900
00:35:15,170 --> 00:35:20,330
script also supports a high-performance

901
00:35:17,390 --> 00:35:21,049
v8 JavaScript engine which requires you

902
00:35:20,330 --> 00:35:22,670
to have

903
00:35:21,050 --> 00:35:24,320
three additional dll's if you just want

904
00:35:22,670 --> 00:35:27,980
G script and VB script you can just have

905
00:35:24,320 --> 00:35:30,110
one DLL and you're good to go so what

906
00:35:27,980 --> 00:35:31,970
we're gonna do in this demo is we're

907
00:35:30,110 --> 00:35:34,310
gonna use the get object function in

908
00:35:31,970 --> 00:35:37,009
jscript to actually download an SCT file

909
00:35:34,310 --> 00:35:38,750
from a HTTP server that I've hosted on

910
00:35:37,010 --> 00:35:43,310
my laptop here and that's gonna execute

911
00:35:38,750 --> 00:35:44,630
calc okay so just looking at the code

912
00:35:43,310 --> 00:35:47,299
real quick this is just the embedded

913
00:35:44,630 --> 00:35:48,920
clear script yellow we load the assembly

914
00:35:47,300 --> 00:35:53,150
to the we load the assembly and then

915
00:35:48,920 --> 00:35:54,230
call the leader script engine another

916
00:35:53,150 --> 00:35:56,690
great thing about clear script by the

917
00:35:54,230 --> 00:35:59,240
way is because this whole because I

918
00:35:56,690 --> 00:36:00,530
don't know I talked to Microsoft to

919
00:35:59,240 --> 00:36:04,370
understand like why this is even a thing

920
00:36:00,530 --> 00:36:07,580
but you can expose the CLR to jscript

921
00:36:04,370 --> 00:36:08,870
through the clear script implementation

922
00:36:07,580 --> 00:36:11,990
so what this means is that you can call

923
00:36:08,870 --> 00:36:13,940
dotnet api's through J script itself

924
00:36:11,990 --> 00:36:15,919
which is kind of crazy so like here

925
00:36:13,940 --> 00:36:17,990
we're starting up the jscript engine

926
00:36:15,920 --> 00:36:19,790
where we're saying allow reflection

927
00:36:17,990 --> 00:36:21,770
which is fantastic so we can call

928
00:36:19,790 --> 00:36:24,650
assembly that load from J script which

929
00:36:21,770 --> 00:36:27,800
is mind boggling and then we're

930
00:36:24,650 --> 00:36:30,050
basically importing like dotnet api's

931
00:36:27,800 --> 00:36:32,420
and jason the J script source itself so

932
00:36:30,050 --> 00:36:34,430
we're importing system system dot core

933
00:36:32,420 --> 00:36:35,900
system reflection system runtime

934
00:36:34,430 --> 00:36:38,060
interrupt services we're done just

935
00:36:35,900 --> 00:36:40,220
printing hello from CLR inside clear

936
00:36:38,060 --> 00:36:43,250
script and then we're gonna download the

937
00:36:40,220 --> 00:36:45,830
actual SCT file so I got a Python HTTP

938
00:36:43,250 --> 00:36:48,800
server here up and running there you go

939
00:36:45,830 --> 00:36:53,569
so now all I have to do is hit play on

940
00:36:48,800 --> 00:36:57,380
this black bad boy and feeder script and

941
00:36:53,570 --> 00:37:01,390
there we go and I just want to point out

942
00:36:57,380 --> 00:37:06,170
that that throughout this entire demo

943
00:37:01,390 --> 00:37:08,359
this has been turned on the entire time

944
00:37:06,170 --> 00:37:10,280
manager settings there you go with the

945
00:37:08,360 --> 00:37:11,840
exception of automatic sample submission

946
00:37:10,280 --> 00:37:13,900
so because you know I don't want

947
00:37:11,840 --> 00:37:17,060
Microsoft seen my malware's before I

948
00:37:13,900 --> 00:37:18,020
decide to burn them but yeah throw out

949
00:37:17,060 --> 00:37:19,450
the rest of the demonstration that's

950
00:37:18,020 --> 00:37:24,500
gonna be on the entire time so like

951
00:37:19,450 --> 00:37:27,919
again I'm not sure if this goes through

952
00:37:24,500 --> 00:37:29,480
wsh or AM Z at all because again I can't

953
00:37:27,920 --> 00:37:31,610
find the code necessary for that to do

954
00:37:29,480 --> 00:37:32,900
that so that's something that I would

955
00:37:31,610 --> 00:37:34,040
love to hear if you have I don't I

956
00:37:32,900 --> 00:37:34,730
haven't had time yet to do like a

957
00:37:34,040 --> 00:37:36,710
thorough

958
00:37:34,730 --> 00:37:37,760
review or inspection of clear script but

959
00:37:36,710 --> 00:37:39,859
that would be interesting to see if like

960
00:37:37,760 --> 00:37:41,570
anyone here knows or can go through and

961
00:37:39,859 --> 00:37:44,770
like see it like validate this is

962
00:37:41,570 --> 00:37:44,770
actually a thing okay

963
00:37:46,180 --> 00:37:52,310
okay so I demonstrated three languages

964
00:37:49,730 --> 00:37:53,839
here today but there are many more and

965
00:37:52,310 --> 00:37:56,660
some of them are really really

966
00:37:53,839 --> 00:37:58,820
interesting we got some Lua

967
00:37:56,660 --> 00:38:01,129
implementations so if you ever wanted to

968
00:37:58,820 --> 00:38:01,940
like write your post exploitation or in

969
00:38:01,130 --> 00:38:06,050
malware in Lua

970
00:38:01,940 --> 00:38:07,579
I got you fam I got a JavaScript

971
00:38:06,050 --> 00:38:08,780
implementation I keep saying this at

972
00:38:07,579 --> 00:38:11,089
every conference because I haven't had

973
00:38:08,780 --> 00:38:13,640
the time to try this out but it would be

974
00:38:11,089 --> 00:38:16,609
interesting if you embedded the

975
00:38:13,640 --> 00:38:18,640
JavaScript engine within a c-sharp

976
00:38:16,609 --> 00:38:21,109
assembly and through it a beef hook I

977
00:38:18,640 --> 00:38:22,460
wonder what would happen like the idea

978
00:38:21,109 --> 00:38:24,049
of beefing endpoints is kind of

979
00:38:22,460 --> 00:38:26,300
hilarious so I kind of want to try it

980
00:38:24,050 --> 00:38:27,440
but I'd assume it break because it's not

981
00:38:26,300 --> 00:38:31,099
a browser but it'd be interesting to

982
00:38:27,440 --> 00:38:33,619
find out dotnet web assembly that's a

983
00:38:31,099 --> 00:38:35,390
really interesting one and the more I

984
00:38:33,619 --> 00:38:36,829
think about this the crazier it gets and

985
00:38:35,390 --> 00:38:40,670
the possibilities of this opens up but

986
00:38:36,829 --> 00:38:43,310
you can actually execute and create web

987
00:38:40,670 --> 00:38:46,609
assemblies from within a net application

988
00:38:43,310 --> 00:38:48,140
okay in memory so this that allows you

989
00:38:46,609 --> 00:38:51,619
to do that so that opens up a lot of

990
00:38:48,140 --> 00:38:53,299
interesting and weird possibilities from

991
00:38:51,619 --> 00:38:54,829
like tradecraft perspective and like

992
00:38:53,300 --> 00:38:56,089
shenanigans you can pull with that so

993
00:38:54,829 --> 00:38:58,130
I'm gonna be definitely taking a look at

994
00:38:56,089 --> 00:38:59,540
that more closely when I have the chance

995
00:38:58,130 --> 00:39:02,180
there's also armed pythons who aren't

996
00:38:59,540 --> 00:39:04,339
Python 3 is in the works hopefully oh it

997
00:39:02,180 --> 00:39:06,919
would be great if they fix the P invoke

998
00:39:04,339 --> 00:39:09,140
issue by armed Python 3 as it is right

999
00:39:06,920 --> 00:39:11,630
now I doubt that that will be ready by

1000
00:39:09,140 --> 00:39:13,520
the eol of Python 2 next year but

1001
00:39:11,630 --> 00:39:17,210
hopefully they'll finish it up somehow

1002
00:39:13,520 --> 00:39:18,710
there's also hyoeun Ruby but by far like

1003
00:39:17,210 --> 00:39:21,290
out of all of these that I found so far

1004
00:39:18,710 --> 00:39:23,750
bullying is reign supreme in terms of

1005
00:39:21,290 --> 00:39:25,730
just like tradecraft and bullying and

1006
00:39:23,750 --> 00:39:27,349
clear script boolean chris row add those

1007
00:39:25,730 --> 00:39:29,630
to reign supreme and sort of like

1008
00:39:27,349 --> 00:39:33,319
operational flexibility and tradecraft

1009
00:39:29,630 --> 00:39:34,430
okay and again like the great thing

1010
00:39:33,319 --> 00:39:36,800
about this is because the dotnet

1011
00:39:34,430 --> 00:39:38,690
framework is just something that gives

1012
00:39:36,800 --> 00:39:40,010
you tools to build your own language

1013
00:39:38,690 --> 00:39:42,950
it's not necessarily coupled to a

1014
00:39:40,010 --> 00:39:44,119
specific language itself these all these

1015
00:39:42,950 --> 00:39:45,890
scripting languages come with their

1016
00:39:44,119 --> 00:39:47,089
built-in compilers usually so what this

1017
00:39:45,890 --> 00:39:47,368
means is that you when you download the

1018
00:39:47,089 --> 00:39:48,900
arm

1019
00:39:47,369 --> 00:39:50,940
Python runtime or the bullying runtime

1020
00:39:48,900 --> 00:39:52,650
you can write your ironpython script

1021
00:39:50,940 --> 00:39:55,019
with sublime text and then run it

1022
00:39:52,650 --> 00:39:57,359
through the provided compiler and it'll

1023
00:39:55,019 --> 00:39:59,879
turn it into an executable or a DLL okay

1024
00:39:57,359 --> 00:40:01,049
and so without if you don't have to if

1025
00:39:59,880 --> 00:40:02,519
you're just saying I screw this

1026
00:40:01,049 --> 00:40:03,930
embedding stuff it's too hard I don't

1027
00:40:02,519 --> 00:40:05,549
want to deal with it you can just take

1028
00:40:03,930 --> 00:40:07,259
these those snippets that I just showed

1029
00:40:05,549 --> 00:40:08,670
you on that github repo and just compile

1030
00:40:07,259 --> 00:40:10,950
them and you could just run them on

1031
00:40:08,670 --> 00:40:12,420
endpoints which i think is like from a

1032
00:40:10,950 --> 00:40:13,410
flexibility standpoint that's awesome

1033
00:40:12,420 --> 00:40:15,269
because you don't have to set up your

1034
00:40:13,410 --> 00:40:17,160
development environment with like Visual

1035
00:40:15,269 --> 00:40:19,140
Studio and you know have to deal with

1036
00:40:17,160 --> 00:40:22,440
any of that you just compile it and it

1037
00:40:19,140 --> 00:40:23,160
runs okay so now I'm gonna be demoing

1038
00:40:22,440 --> 00:40:25,170
some eternity

1039
00:40:23,160 --> 00:40:26,578
okay then silent Trinity is the c2

1040
00:40:25,170 --> 00:40:28,799
framework that I wrote it's publicly

1041
00:40:26,579 --> 00:40:31,410
available it's at that URL that sort of

1042
00:40:28,799 --> 00:40:34,829
tries to wrap these concepts and a nice

1043
00:40:31,410 --> 00:40:36,960
little ribbon and it's got some pretty

1044
00:40:34,829 --> 00:40:41,369
interesting stuff it's actually a so

1045
00:40:36,960 --> 00:40:43,619
actually before I demo it recently we've

1046
00:40:41,369 --> 00:40:46,619
I've released the version 4.0 it's got

1047
00:40:43,619 --> 00:40:47,880
some it's pretty like it's it's getting

1048
00:40:46,619 --> 00:40:48,660
there slowly but surely it's getting

1049
00:40:47,880 --> 00:40:50,220
there

1050
00:40:48,660 --> 00:40:52,049
it's asynchronous so the whole thing is

1051
00:40:50,220 --> 00:40:53,640
asynchronous it's very similar to call

1052
00:40:52,049 --> 00:40:55,380
bot strike it's a team server

1053
00:40:53,640 --> 00:40:57,328
architecture so there's a client and a

1054
00:40:55,380 --> 00:40:59,759
server multiplayer multi server and

1055
00:40:57,329 --> 00:41:01,289
you'll get an idea during the demo it

1056
00:40:59,759 --> 00:41:02,819
supports multiple callbacks domains now

1057
00:41:01,289 --> 00:41:04,589
you can customize the jitter and sleep

1058
00:41:02,819 --> 00:41:07,710
intervals and you can actually kill

1059
00:41:04,589 --> 00:41:10,170
sessions now which is helpful uploads

1060
00:41:07,710 --> 00:41:12,359
and downloads you might think okay

1061
00:41:10,170 --> 00:41:15,140
uploads and downloads what's the big

1062
00:41:12,359 --> 00:41:18,210
deal that took a long time to implement

1063
00:41:15,140 --> 00:41:19,859
plugs and downloads is hard but it also

1064
00:41:18,210 --> 00:41:21,420
opens up a lot of possibilities is like

1065
00:41:19,859 --> 00:41:23,220
automating attack flows it also

1066
00:41:21,420 --> 00:41:26,700
integrates pipe ikats now which I'll be

1067
00:41:23,220 --> 00:41:29,368
demoing and as of last night I was up

1068
00:41:26,700 --> 00:41:32,009
until 4:00 a.m. dealing with this but I

1069
00:41:29,369 --> 00:41:34,440
actually integrated an azure CI build

1070
00:41:32,009 --> 00:41:36,989
pipeline ok so what this means is that

1071
00:41:34,440 --> 00:41:38,190
because the way all the stagers which

1072
00:41:36,989 --> 00:41:39,599
i'll be demonstrating are implemented

1073
00:41:38,190 --> 00:41:42,539
right now they have a c-sharp assembly

1074
00:41:39,599 --> 00:41:44,819
in it dotnet 4.8 has Am's integration so

1075
00:41:42,539 --> 00:41:48,089
it might start flagging on that c-sharp

1076
00:41:44,819 --> 00:41:50,009
assembly so when it does that all you

1077
00:41:48,089 --> 00:41:52,230
need to do to get around it is just do

1078
00:41:50,009 --> 00:41:54,089
an HTTP request to a certain URL and

1079
00:41:52,230 --> 00:41:55,559
azure will automatically build a new

1080
00:41:54,089 --> 00:41:56,450
assembly for you and push it to the rep

1081
00:41:55,559 --> 00:41:58,579
oh okay

1082
00:41:56,450 --> 00:42:00,410
and in the future I think I'm gonna be

1083
00:41:58,579 --> 00:42:02,450
doing is hooking this up the patreon so

1084
00:42:00,410 --> 00:42:04,310
if like if you give me a dollar you'll

1085
00:42:02,450 --> 00:42:05,930
also get a stager which is kind of cool

1086
00:42:04,310 --> 00:42:09,650
but I think that'd be kind of cool

1087
00:42:05,930 --> 00:42:11,868
so there's also Lux a lot lots of bug

1088
00:42:09,650 --> 00:42:13,550
squash and there's around like 60 post

1089
00:42:11,869 --> 00:42:15,170
exploitation modules now because I've

1090
00:42:13,550 --> 00:42:16,609
gotten some pretty awesome contributions

1091
00:42:15,170 --> 00:42:19,849
it's got everything from professed the

1092
00:42:16,609 --> 00:42:21,740
Kerberos thing to to like a rickroll

1093
00:42:19,849 --> 00:42:23,390
module if you feel so inclined like this

1094
00:42:21,740 --> 00:42:27,379
is a bunch of them now all and again

1095
00:42:23,390 --> 00:42:30,009
like all in boo lang and again so before

1096
00:42:27,380 --> 00:42:32,240
I go to the demo here I just want to

1097
00:42:30,010 --> 00:42:34,099
just really drive the point across and

1098
00:42:32,240 --> 00:42:37,250
how flexible this whole thing this

1099
00:42:34,099 --> 00:42:39,170
system is right so we're basically just

1100
00:42:37,250 --> 00:42:41,119
embedding the boolean compiler in

1101
00:42:39,170 --> 00:42:42,770
another dotnet Lang like every every

1102
00:42:41,119 --> 00:42:44,300
song Trinity stager is just embedding

1103
00:42:42,770 --> 00:42:46,579
the blank compiler in a dotnet

1104
00:42:44,300 --> 00:42:49,849
language okay so what this means is that

1105
00:42:46,579 --> 00:42:53,800
the modules are just source code okay so

1106
00:42:49,849 --> 00:42:56,839
this is like the cache GPP module in

1107
00:42:53,800 --> 00:42:59,030
silent Trinity and it's your source code

1108
00:42:56,839 --> 00:43:01,640
and because it's source code you can

1109
00:42:59,030 --> 00:43:03,619
make real-time edits to this module and

1110
00:43:01,640 --> 00:43:05,390
every time you run the module like that

1111
00:43:03,619 --> 00:43:08,150
those edits will be just pushed down to

1112
00:43:05,390 --> 00:43:10,160
the end point right because it's sort of

1113
00:43:08,150 --> 00:43:11,599
server size your source code so if you

1114
00:43:10,160 --> 00:43:13,460
wanted to like edit this on the fly for

1115
00:43:11,599 --> 00:43:14,869
some reason instead of compiling stuff

1116
00:43:13,460 --> 00:43:16,940
as you would do with like c-sharp

1117
00:43:14,869 --> 00:43:19,460
tradecraft and like server-side and then

1118
00:43:16,940 --> 00:43:22,339
sending it down you can just do it all

1119
00:43:19,460 --> 00:43:23,750
in like your preferred IDE and its

1120
00:43:22,339 --> 00:43:25,819
source code so you just edit it as long

1121
00:43:23,750 --> 00:43:28,970
as much as you want okay cuz I think is

1122
00:43:25,819 --> 00:43:32,089
is pretty cool okay so I'm gonna get rid

1123
00:43:28,970 --> 00:43:34,098
of this real quick alright so I have my

1124
00:43:32,089 --> 00:43:35,869
silent Trinity and how are we doing on

1125
00:43:34,099 --> 00:43:37,970
time okay I have my sound in Trinity

1126
00:43:35,869 --> 00:43:42,619
team server here I'm gonna start this up

1127
00:43:37,970 --> 00:43:47,149
and I think we're good to go I have my

1128
00:43:42,619 --> 00:43:49,940
client here start that up and you'll

1129
00:43:47,150 --> 00:43:51,650
notice that I passed it a whoa that's

1130
00:43:49,940 --> 00:43:53,569
going some funky stuff going on there I

1131
00:43:51,650 --> 00:43:55,010
passed it at our C file so if it's

1132
00:43:53,569 --> 00:43:56,960
really with like Metasploit you just put

1133
00:43:55,010 --> 00:44:00,380
a command and line by line and that just

1134
00:43:56,960 --> 00:44:02,359
helps automating a lot of stuff again

1135
00:44:00,380 --> 00:44:03,770
it's team server client their

1136
00:44:02,359 --> 00:44:05,690
architecture so what this means is that

1137
00:44:03,770 --> 00:44:07,730
the client supports multiple users so

1138
00:44:05,690 --> 00:44:09,680
you can share shells between each other

1139
00:44:07,730 --> 00:44:11,450
and from the client you can manage

1140
00:44:09,680 --> 00:44:14,660
multiple team servers as well so it's

1141
00:44:11,450 --> 00:44:20,810
multi client multi server so I started a

1142
00:44:14,660 --> 00:44:23,390
listener here in the client so that's a

1143
00:44:20,810 --> 00:44:25,910
that's a HTTP listener I got more comms

1144
00:44:23,390 --> 00:44:27,589
coming that's I just have to have the

1145
00:44:25,910 --> 00:44:29,390
time to actually implement them but

1146
00:44:27,590 --> 00:44:30,950
right now the ones that work are HTTP

1147
00:44:29,390 --> 00:44:33,259
and HTTPS just to you know give you an

1148
00:44:30,950 --> 00:44:35,509
idea of what this thing can do so once

1149
00:44:33,260 --> 00:44:37,580
we have that we have to generate a

1150
00:44:35,510 --> 00:44:38,690
stager and there are a bunch of them

1151
00:44:37,580 --> 00:44:41,900
right now some of them I've released

1152
00:44:38,690 --> 00:44:43,340
some of I have not but once I clean them

1153
00:44:41,900 --> 00:44:45,710
up and everything and actually use them

1154
00:44:43,340 --> 00:44:47,330
on an engagement I might release them

1155
00:44:45,710 --> 00:44:49,070
but for now like I'm just gonna

1156
00:44:47,330 --> 00:44:51,529
demonstrate the PowerShell stager so the

1157
00:44:49,070 --> 00:44:53,510
way you generate stages is you just use

1158
00:44:51,530 --> 00:44:55,310
PowerShell and you notice it's got some

1159
00:44:53,510 --> 00:44:57,890
fancy autocomplete options which I

1160
00:44:55,310 --> 00:44:59,960
personally like a lot and then once you

1161
00:44:57,890 --> 00:45:01,190
select the stager they're usually some

1162
00:44:59,960 --> 00:45:02,960
options that you can set

1163
00:45:01,190 --> 00:45:04,700
but if you're just good to go you just

1164
00:45:02,960 --> 00:45:06,440
generate in the name of the listener and

1165
00:45:04,700 --> 00:45:09,290
it will just automatically do everything

1166
00:45:06,440 --> 00:45:11,060
for you the stager gets generated

1167
00:45:09,290 --> 00:45:13,910
server-side gets sent down to the client

1168
00:45:11,060 --> 00:45:16,460
and gets saved on the clients machine

1169
00:45:13,910 --> 00:45:20,420
and then in this case it's PowerShell I

1170
00:45:16,460 --> 00:45:29,780
already copied that stager to this

1171
00:45:20,420 --> 00:45:31,100
Windows VM here okay so let's I do that

1172
00:45:29,780 --> 00:45:33,140
real quick so I'm just gonna execute the

1173
00:45:31,100 --> 00:45:34,490
stager on this because you know you can

1174
00:45:33,140 --> 00:45:37,629
do this with an IE X cradle I'm just

1175
00:45:34,490 --> 00:45:39,200
execute this for demonstration purposes

1176
00:45:37,630 --> 00:45:41,810
and there you go

1177
00:45:39,200 --> 00:45:44,868
so notice a couple of things one defined

1178
00:45:41,810 --> 00:45:47,660
it in trigger which is interesting and

1179
00:45:44,869 --> 00:45:49,730
two we have we have a sound Trinity

1180
00:45:47,660 --> 00:45:52,759
session now so it did a lot of things in

1181
00:45:49,730 --> 00:45:55,250
the hood by the way it it uses it all

1182
00:45:52,760 --> 00:45:56,780
the comms are encrypted so the it uses

1183
00:45:55,250 --> 00:45:59,390
encrypted key exchange to actually do

1184
00:45:56,780 --> 00:46:01,670
the initial diffie-hellman key exchange

1185
00:45:59,390 --> 00:46:02,540
encrypts the publicly sends its a server

1186
00:46:01,670 --> 00:46:04,460
and vice versa

1187
00:46:02,540 --> 00:46:06,680
I downloaded the stager which contained

1188
00:46:04,460 --> 00:46:09,230
the blank DLL is necessary for the

1189
00:46:06,680 --> 00:46:12,140
actual the actual compiler to spin up on

1190
00:46:09,230 --> 00:46:15,080
the endpoint and then we also stream

1191
00:46:12,140 --> 00:46:17,150
down the actual stage code so what's

1192
00:46:15,080 --> 00:46:20,390
great about this system too is that the

1193
00:46:17,150 --> 00:46:21,290
actual code that does all the malicious

1194
00:46:20,390 --> 00:46:24,950
stuff is

1195
00:46:21,290 --> 00:46:26,509
not in the PowerShell stager or the C

1196
00:46:24,950 --> 00:46:28,910
sharp assembly or whatever's on the end

1197
00:46:26,510 --> 00:46:30,800
point because it's dynamic right so if

1198
00:46:28,910 --> 00:46:33,020
you were to unless you do a memory dump

1199
00:46:30,800 --> 00:46:35,300
of the process live process running if

1200
00:46:33,020 --> 00:46:37,040
you were to just do like stat

1201
00:46:35,300 --> 00:46:38,570
reverse-engineering on like the this

1202
00:46:37,040 --> 00:46:40,430
embedded C sharp assembly or the

1203
00:46:38,570 --> 00:46:42,320
PowerShell script you wouldn't find the

1204
00:46:40,430 --> 00:46:43,879
actual malicious code there because it's

1205
00:46:42,320 --> 00:46:45,650
just getting executed on the fly when

1206
00:46:43,880 --> 00:46:47,780
you stream it down which i think is also

1207
00:46:45,650 --> 00:46:49,520
a pretty interesting thing as well so

1208
00:46:47,780 --> 00:46:51,770
we've successfully compiled the stage

1209
00:46:49,520 --> 00:46:55,960
code and now we should have a session

1210
00:46:51,770 --> 00:46:58,100
there you go so once we have a session

1211
00:46:55,960 --> 00:46:59,780
what we're gonna I'm gonna be

1212
00:46:58,100 --> 00:47:01,130
demonstrating because I'm sort of short

1213
00:46:59,780 --> 00:47:03,110
on time what I'm gonna be demonstrating

1214
00:47:01,130 --> 00:47:04,940
is the new mini dump module which

1215
00:47:03,110 --> 00:47:06,470
integrates pipe ikats which does a lot

1216
00:47:04,940 --> 00:47:08,120
of things so you can see have you got a

1217
00:47:06,470 --> 00:47:10,480
session here if you familiar with empire

1218
00:47:08,120 --> 00:47:13,279
Metasploit you'll feel at home in the UI

1219
00:47:10,480 --> 00:47:16,040
it gives you a little asterisk if the

1220
00:47:13,280 --> 00:47:18,110
session that you get is admin I'm gonna

1221
00:47:16,040 --> 00:47:19,910
go over to modules here and you'll see

1222
00:47:18,110 --> 00:47:22,610
that there's a lot of them the power of

1223
00:47:19,910 --> 00:47:24,830
open source when it works it's fantastic

1224
00:47:22,610 --> 00:47:27,110
when it doesn't I kind of want to jump

1225
00:47:24,830 --> 00:47:31,430
off a bridge but I'm gonna be

1226
00:47:27,110 --> 00:47:34,550
demonstrating use ooh matey dump mini

1227
00:47:31,430 --> 00:47:36,649
Limp module there you go so what this is

1228
00:47:34,550 --> 00:47:39,890
gonna do it's gonna use the mini dump

1229
00:47:36,650 --> 00:47:44,870
right dump API dump else has to disk

1230
00:47:39,890 --> 00:47:48,129
okay and then oh yeah dumbells has two

1231
00:47:44,870 --> 00:47:51,259
discs and and upload it to the server

1232
00:47:48,130 --> 00:47:54,670
let's see what happens actually now that

1233
00:47:51,260 --> 00:47:54,670
I think oh well see what happens

1234
00:47:56,500 --> 00:48:00,070
it's good as a

1235
00:48:10,319 --> 00:48:17,538
there you go so it dumped else ass and

1236
00:48:13,529 --> 00:48:20,669
it's now uploading the dumped else ass

1237
00:48:17,539 --> 00:48:21,989
memory dump to the server you'll

1238
00:48:20,669 --> 00:48:24,029
probably notice it's really slow that's

1239
00:48:21,989 --> 00:48:25,709
because by default check in it doesn't

1240
00:48:24,029 --> 00:48:27,599
check in every five seconds right but

1241
00:48:25,709 --> 00:48:34,558
what we can do now is tell it to go

1242
00:48:27,599 --> 00:48:42,839
interactive so sleep zero Oh nope what's

1243
00:48:34,559 --> 00:48:50,309
going on there okay I was weird sleep do

1244
00:48:42,839 --> 00:48:53,009
that in Reverse there you go and again

1245
00:48:50,309 --> 00:48:54,599
it's asynchronous right so once if it's

1246
00:48:53,009 --> 00:48:57,380
running one job it'll keep yeah that's

1247
00:48:54,599 --> 00:48:59,669
much faster if it's running run one job

1248
00:48:57,380 --> 00:49:01,669
it'll eat you can just keep sending a

1249
00:48:59,669 --> 00:49:05,400
jobs down and I'll keep executing them

1250
00:49:01,669 --> 00:49:07,499
so it uploaded else as to this and to

1251
00:49:05,400 --> 00:49:09,989
the server and these are the credentials

1252
00:49:07,499 --> 00:49:13,979
that were in the L system which were

1253
00:49:09,989 --> 00:49:16,709
parsed using pipe by cats so we're not

1254
00:49:13,979 --> 00:49:18,448
even executing Minnie Minnie cats on the

1255
00:49:16,709 --> 00:49:20,098
end point itself all of the actual

1256
00:49:18,449 --> 00:49:22,049
parsing of the credentials happens

1257
00:49:20,099 --> 00:49:26,150
server-side we're just just dumping else

1258
00:49:22,049 --> 00:49:26,150
as to this con the endpoint itself okay

1259
00:49:32,599 --> 00:49:39,719
okay so hopefully it's if you're if you

1260
00:49:37,709 --> 00:49:41,848
weren't a.net developer and you came to

1261
00:49:39,719 --> 00:49:43,439
this talk I know I threw a lot of

1262
00:49:41,849 --> 00:49:46,909
information at you but hopefully you've

1263
00:49:43,439 --> 00:49:49,319
I've explained things in a concise way

1264
00:49:46,909 --> 00:49:51,150
that you get an idea of why I think this

1265
00:49:49,319 --> 00:49:52,859
is cool and like the flexibility that it

1266
00:49:51,150 --> 00:49:54,539
provides you if not and I'm also gonna

1267
00:49:52,859 --> 00:49:56,219
be here until the end of the condom I

1268
00:49:54,539 --> 00:49:58,289
should be here for a full week so if you

1269
00:49:56,219 --> 00:50:00,419
have any questions after definitely grab

1270
00:49:58,289 --> 00:50:02,369
me an I'll be happy to answer them so

1271
00:50:00,419 --> 00:50:05,308
detection so this is where things get a

1272
00:50:02,369 --> 00:50:07,499
little funky because Donna freeway has

1273
00:50:05,309 --> 00:50:09,809
an G integration which already helps a

1274
00:50:07,499 --> 00:50:12,868
lot in terms of just like mitigating

1275
00:50:09,809 --> 00:50:15,119
like the common c-sharp malware and and

1276
00:50:12,869 --> 00:50:17,779
stuff there are reasons why MZ kind of

1277
00:50:15,119 --> 00:50:20,309
sucks but I will be getting into that

1278
00:50:17,779 --> 00:50:22,349
conet events by manifestation is a way

1279
00:50:20,309 --> 00:50:24,060
of just gaining some insight into the

1280
00:50:22,349 --> 00:50:26,340
CLR itself

1281
00:50:24,060 --> 00:50:28,950
a lot of this stuff is open-source or

1282
00:50:26,340 --> 00:50:32,130
proof of concept there really isn't a

1283
00:50:28,950 --> 00:50:35,029
good way at detecting this at scale just

1284
00:50:32,130 --> 00:50:37,050
because of the lack of tooling or

1285
00:50:35,030 --> 00:50:39,660
tooling necessary to do that right now

1286
00:50:37,050 --> 00:50:42,330
krabsy TWU is the official Microsoft

1287
00:50:39,660 --> 00:50:43,620
wrapper around etw which is a technology

1288
00:50:42,330 --> 00:50:46,410
what that allows you to detect this kind

1289
00:50:43,620 --> 00:50:48,779
of stuff but it's C++ and it's a wrapper

1290
00:50:46,410 --> 00:50:50,850
so it's more of like here take this

1291
00:50:48,780 --> 00:50:51,750
thing that you can definitely detect

1292
00:50:50,850 --> 00:50:53,790
this with what you're gonna have to

1293
00:50:51,750 --> 00:50:55,520
build your own tool which in an

1294
00:50:53,790 --> 00:50:58,830
organization that might not exactly be

1295
00:50:55,520 --> 00:51:00,660
be possible silky PW is a really good

1296
00:50:58,830 --> 00:51:03,600
open source solution to at least

1297
00:51:00,660 --> 00:51:06,660
detecting some of this it's again like

1298
00:51:03,600 --> 00:51:09,390
open source probably at scale won't

1299
00:51:06,660 --> 00:51:11,190
really help that much but you can

1300
00:51:09,390 --> 00:51:12,810
definitely put it on like specific high

1301
00:51:11,190 --> 00:51:14,370
value endpoints if you're really worried

1302
00:51:12,810 --> 00:51:16,590
about this kind of tradecraft

1303
00:51:14,370 --> 00:51:18,359
there's also a module monitor which can

1304
00:51:16,590 --> 00:51:20,840
give you into some insight into like

1305
00:51:18,360 --> 00:51:24,420
in.net processes running on the machine

1306
00:51:20,840 --> 00:51:26,700
and some and possibly like malicious

1307
00:51:24,420 --> 00:51:28,770
activity going on I definitely recommend

1308
00:51:26,700 --> 00:51:30,419
this talk by Luke Jenning at blackhat

1309
00:51:28,770 --> 00:51:32,400
eighteen memory resonant implants code

1310
00:51:30,420 --> 00:51:33,900
injection is live as well which all away

1311
00:51:32,400 --> 00:51:37,260
already started to talk about some of

1312
00:51:33,900 --> 00:51:38,700
these concepts and then there's also a

1313
00:51:37,260 --> 00:51:41,040
counter step blog which i think is an

1314
00:51:38,700 --> 00:51:42,450
NPR company and the hunting for eternal

1315
00:51:41,040 --> 00:51:43,710
eternity which did some which is it a

1316
00:51:42,450 --> 00:51:45,990
blog article and actually trying to

1317
00:51:43,710 --> 00:51:47,130
detect sanity and thank you for Ryan

1318
00:51:45,990 --> 00:51:48,509
Cobb inspector also putting some of

1319
00:51:47,130 --> 00:51:50,820
these together I just took these and

1320
00:51:48,510 --> 00:51:53,130
added some I think these are by far like

1321
00:51:50,820 --> 00:51:56,190
the the best ways you going about trying

1322
00:51:53,130 --> 00:51:58,410
to detect some of this stuff but on the

1323
00:51:56,190 --> 00:52:00,120
other hand there is this so if you

1324
00:51:58,410 --> 00:52:02,279
didn't know with process Explorer you

1325
00:52:00,120 --> 00:52:05,250
can actually inspect the app domain of

1326
00:52:02,280 --> 00:52:06,540
any dotnet process okay and you can list

1327
00:52:05,250 --> 00:52:08,820
all of the assemblies that are currently

1328
00:52:06,540 --> 00:52:11,340
loaded in the process you'll notice that

1329
00:52:08,820 --> 00:52:12,870
if anything's loaded in from memory it

1330
00:52:11,340 --> 00:52:15,360
doesn't have an assembly backing on this

1331
00:52:12,870 --> 00:52:17,339
okay I have yet to encounter a

1332
00:52:15,360 --> 00:52:19,830
legitimate dotnet application that loads

1333
00:52:17,340 --> 00:52:22,650
stuff from memory okay so what this

1334
00:52:19,830 --> 00:52:25,380
means is that if you do see like an

1335
00:52:22,650 --> 00:52:27,300
assembly loaded in memory that doesn't

1336
00:52:25,380 --> 00:52:29,400
have a file backing that's a pretty good

1337
00:52:27,300 --> 00:52:31,980
indication that something's funky going

1338
00:52:29,400 --> 00:52:33,180
on there and in this particular case is

1339
00:52:31,980 --> 00:52:34,560
kind of obvious because you know the

1340
00:52:33,180 --> 00:52:35,759
blue line interpreter and our Python

1341
00:52:34,560 --> 00:52:36,970
interpreter loaded and you know the

1342
00:52:35,760 --> 00:52:38,500
silent Trinity

1343
00:52:36,970 --> 00:52:41,319
says written sound surety right there

1344
00:52:38,500 --> 00:52:44,140
but definitely like this is by far like

1345
00:52:41,320 --> 00:52:46,030
the best way of I think just just at

1346
00:52:44,140 --> 00:52:47,290
least they're like a very general way of

1347
00:52:46,030 --> 00:52:50,200
detecting this kind of malicious

1348
00:52:47,290 --> 00:52:55,660
activity another important thing to note

1349
00:52:50,200 --> 00:52:58,000
is that gulang and arm Python I would

1350
00:52:55,660 --> 00:53:00,970
consider IO sees now like if you do see

1351
00:52:58,000 --> 00:53:03,970
any dotnet scripting languages loaded in

1352
00:53:00,970 --> 00:53:06,609
memory that's probably a indication that

1353
00:53:03,970 --> 00:53:08,939
something funky is going on as well so

1354
00:53:06,609 --> 00:53:16,150
take that take that as you will

1355
00:53:08,940 --> 00:53:18,910
questions thank you that was awesome and

1356
00:53:16,150 --> 00:53:21,250
you mentioned earlier about nesting

1357
00:53:18,910 --> 00:53:23,890
interpreters so again one inside of

1358
00:53:21,250 --> 00:53:25,750
another have you seen any performance

1359
00:53:23,890 --> 00:53:28,629
hits when you do that and at what point

1360
00:53:25,750 --> 00:53:30,849
do things start dying so obviously like

1361
00:53:28,630 --> 00:53:32,830
there are gonna be some major

1362
00:53:30,849 --> 00:53:36,970
performance hits once you hit like the

1363
00:53:32,830 --> 00:53:39,009
hundreth embedded interpreter but from I

1364
00:53:36,970 --> 00:53:41,669
think I've embedded successfully like

1365
00:53:39,010 --> 00:53:47,380
four or five altogether and there was

1366
00:53:41,670 --> 00:53:47,950
barely any performance it yeah any more

1367
00:53:47,380 --> 00:53:51,550
questions

1368
00:53:47,950 --> 00:53:52,960
probably time for one more all right

1369
00:53:51,550 --> 00:53:54,790
thank you very much

1370
00:53:52,960 --> 00:53:57,980
[Applause]

1371
00:53:54,790 --> 00:53:57,980
[Music]

