1
00:00:00,060 --> 00:00:03,480
so good morning friends my name is

2
00:00:03,480 --> 00:00:05,100
Francis and I'll be talking on

3
00:00:05,100 --> 00:00:07,589
pentesting no sequel databases with no

4
00:00:07,589 --> 00:00:10,639
secret exploitation framework okay so

5
00:00:10,639 --> 00:00:13,380
who am i i'm an independent security

6
00:00:13,380 --> 00:00:16,500
researcher so of course I'm jobless I'm

7
00:00:16,500 --> 00:00:18,869
a member of open security it's a

8
00:00:18,869 --> 00:00:22,380
community for like-minded people we put

9
00:00:22,380 --> 00:00:25,500
up tutorials and other stuff online

10
00:00:25,500 --> 00:00:27,420
you could go on to open security door

11
00:00:27,420 --> 00:00:32,579
tend to to grab a view of the site we

12
00:00:32,579 --> 00:00:34,800
also organize yearly conferences in

13
00:00:34,800 --> 00:00:38,489
India so it's a community where anyone

14
00:00:38,489 --> 00:00:40,710
can join so I'm currently pursuing my

15
00:00:40,710 --> 00:00:42,809
bachelor's degree it's in back in India

16
00:00:42,809 --> 00:00:45,980
so I've spoken a couple of conferences

17
00:00:45,980 --> 00:00:49,230
okay so these are some of the

18
00:00:49,230 --> 00:00:53,010
conference's I've been do back in the

19
00:00:53,010 --> 00:00:58,020
box cocoon in Alcorn etc okay so let's

20
00:00:58,020 --> 00:01:00,960
get into the agenda of the talk so what

21
00:01:00,960 --> 00:01:03,239
will what will I be more concentrating

22
00:01:03,239 --> 00:01:05,970
on I will be concentrating on server

23
00:01:05,970 --> 00:01:07,970
client and server management consults

24
00:01:07,970 --> 00:01:10,860
I'll be giving more importance to pen

25
00:01:10,860 --> 00:01:13,350
testing scenarios we are not deal with

26
00:01:13,350 --> 00:01:16,049
any memory related bugs are issues and

27
00:01:16,049 --> 00:01:18,150
of course I'll be will be looking onto

28
00:01:18,150 --> 00:01:20,700
no sequel exploitation framework and

29
00:01:20,700 --> 00:01:25,560
we'll have plenty of demos so how many

30
00:01:25,560 --> 00:01:28,340
of have heard of no sequel databases

31
00:01:28,340 --> 00:01:34,259
okay so that's that so let's have for

32
00:01:34,259 --> 00:01:36,180
those who are not aware of no sequel

33
00:01:36,180 --> 00:01:39,150
databases it's much more it's the main

34
00:01:39,150 --> 00:01:41,100
difference between sequel and no sequel

35
00:01:41,100 --> 00:01:43,740
databases is that you secretly have

36
00:01:43,740 --> 00:01:46,049
structured data and no sequel you do you

37
00:01:46,049 --> 00:01:48,329
don't have any structured data so some

38
00:01:48,329 --> 00:01:50,280
of the key features of no sequel

39
00:01:50,280 --> 00:01:52,590
databases are schema-less they have

40
00:01:52,590 --> 00:01:56,159
support it's open source it runs well on

41
00:01:56,159 --> 00:01:59,340
well on clusters it's it was built for

42
00:01:59,340 --> 00:02:02,009
the modern web it does not use a

43
00:02:02,009 --> 00:02:05,310
relational model and it follows the main

44
00:02:05,310 --> 00:02:07,740
four principles as that is atomicity

45
00:02:07,740 --> 00:02:11,840
consistency isolation and durability

46
00:02:11,890 --> 00:02:14,390
so what are they mean four types of no

47
00:02:14,390 --> 00:02:17,300
sequel databases there are white column

48
00:02:17,300 --> 00:02:19,430
store databases HBase and Cassandra

49
00:02:19,430 --> 00:02:21,980
examples of those you have documents or

50
00:02:21,980 --> 00:02:24,950
databases MongoDB and CouchDB come under

51
00:02:24,950 --> 00:02:27,260
those you have key value or tuple store

52
00:02:27,260 --> 00:02:29,240
databases right reduce are examples of

53
00:02:29,240 --> 00:02:32,030
those and you have grab databases that's

54
00:02:32,030 --> 00:02:34,220
near for the end X so these are some of

55
00:02:34,220 --> 00:02:37,580
the famous databases have taken upon so

56
00:02:37,580 --> 00:02:39,500
you'll have a look on all those

57
00:02:39,500 --> 00:02:44,180
databases so why no secret secondly so

58
00:02:44,180 --> 00:02:47,530
it's an important topic to deal with so

59
00:02:47,530 --> 00:02:50,300
why why does in the developer need to

60
00:02:50,300 --> 00:02:52,700
worry so in the next slide so you can

61
00:02:52,700 --> 00:02:55,790
see that this is a this snapshot I've

62
00:02:55,790 --> 00:02:58,190
taken from the shoreline so I hope that

63
00:02:58,190 --> 00:03:00,950
everyone is familiar with shodhan so as

64
00:03:00,950 --> 00:03:03,190
you could see that there are at least

65
00:03:03,190 --> 00:03:05,920
eighty four thousand results for MongoDB

66
00:03:05,920 --> 00:03:08,750
for couch you have at least 1,500

67
00:03:08,750 --> 00:03:10,760
results and for Redis you could see that

68
00:03:10,760 --> 00:03:13,400
it's thirty four thirty seven thousand

69
00:03:13,400 --> 00:03:16,340
so the main point to note is that at

70
00:03:16,340 --> 00:03:19,280
least 95% of the no single databases of

71
00:03:19,280 --> 00:03:21,530
 culturally savvy that I've taken

72
00:03:21,530 --> 00:03:23,450
the screenshots are one herbal and

73
00:03:23,450 --> 00:03:25,070
they're open and there that I could be

74
00:03:25,070 --> 00:03:27,110
easily be accessed so some of the

75
00:03:27,110 --> 00:03:29,270
hosting companies like Rackspace Amazon

76
00:03:29,270 --> 00:03:33,080
are vulnerable to attacks also so that

77
00:03:33,080 --> 00:03:35,180
these are some of the open databases and

78
00:03:35,180 --> 00:03:40,490
none of them had authentication so what

79
00:03:40,490 --> 00:03:43,010
are the main key points regarding the no

80
00:03:43,010 --> 00:03:44,960
sequel databases so they are lone

81
00:03:44,960 --> 00:03:47,960
security you could see if you read the

82
00:03:47,960 --> 00:03:50,060
documentation you could see that it

83
00:03:50,060 --> 00:03:53,690
emphasizes on a trust or environment we

84
00:03:53,690 --> 00:03:55,970
there are they have econ indication

85
00:03:55,970 --> 00:03:58,430
mechanisms man-in-the-middle attacks a

86
00:03:58,430 --> 00:04:01,370
very much popular day they're open

87
00:04:01,370 --> 00:04:03,200
source and hence their peers are widely

88
00:04:03,200 --> 00:04:07,040
exposed and the AP for api for PHP is

89
00:04:07,040 --> 00:04:11,390
easy to abuse okay so let's get whole on

90
00:04:11,390 --> 00:04:16,390
each of the databases so DB

91
00:04:16,390 --> 00:04:19,250
we have a general feature layout for

92
00:04:19,250 --> 00:04:23,090
MongoDB it is written in C++ it retains

93
00:04:23,090 --> 00:04:25,080
the friendly properties of see

94
00:04:25,080 --> 00:04:27,270
we'll explore it uses the bees on

95
00:04:27,270 --> 00:04:30,389
protocol you have the amount God as the

96
00:04:30,389 --> 00:04:31,919
server and d'mongo client

97
00:04:31,919 --> 00:04:34,979
it runs on port two seven zero one seven

98
00:04:34,979 --> 00:04:37,400
by default and the web interface runs on

99
00:04:37,400 --> 00:04:39,750
two son zero one seven plus thousand

100
00:04:39,750 --> 00:04:43,830
that's 20,000 zero one zero okay so it

101
00:04:43,830 --> 00:04:46,800
uses the mobo DB wire protocol and that

102
00:04:46,800 --> 00:04:50,729
is represented in the JSON format so

103
00:04:50,729 --> 00:04:52,530
let's have a look at the architecture

104
00:04:52,530 --> 00:04:56,280
this the architecture is of symbol

105
00:04:56,280 --> 00:04:59,419
server and client so where does the

106
00:04:59,419 --> 00:05:03,030
attacker kick in so the main attacks

107
00:05:03,030 --> 00:05:05,699
possible are sniffing enumeration the

108
00:05:05,699 --> 00:05:07,319
off script injection and denial of

109
00:05:07,319 --> 00:05:10,680
service attacks so let's have a look at

110
00:05:10,680 --> 00:05:14,069
all of these attacks so the JavaScript

111
00:05:14,069 --> 00:05:17,819
attack surface JavaScript attacks I used

112
00:05:17,819 --> 00:05:19,860
more mostly against MongoDB the reason

113
00:05:19,860 --> 00:05:22,050
is that MongoDB uses the JavaScript

114
00:05:22,050 --> 00:05:25,889
engine it uses it used the SpiderMonkey

115
00:05:25,889 --> 00:05:27,900
JavaScript engine for versions 2.4 and

116
00:05:27,900 --> 00:05:30,659
below and four versions 2.4 and above it

117
00:05:30,659 --> 00:05:34,590
you it was using the 4 it is using the

118
00:05:34,590 --> 00:05:38,099
Google's v8 JavaScript engine so this is

119
00:05:38,099 --> 00:05:41,060
one of the major changes that has

120
00:05:41,060 --> 00:05:45,419
evolved so 100 is keep popping up in

121
00:05:45,419 --> 00:05:48,360
MongoDB Nika Maddox

122
00:05:48,360 --> 00:05:49,889
there was a reason vulnerability for

123
00:05:49,889 --> 00:05:53,370
command execution in MongoDB for since

124
00:05:53,370 --> 00:05:56,699
2.0 and a below there are possible

125
00:05:56,699 --> 00:05:58,860
chances to overwrite defined shell

126
00:05:58,860 --> 00:06:01,229
functions and there are lots of

127
00:06:01,229 --> 00:06:02,969
resources attack exertion attacks also

128
00:06:02,969 --> 00:06:06,509
possible since the power of JavaScript

129
00:06:06,509 --> 00:06:07,949
could be used within the shell

130
00:06:07,949 --> 00:06:10,680
there are there's a huge possibility for

131
00:06:10,680 --> 00:06:15,120
attack with us ok so this is a key point

132
00:06:15,120 --> 00:06:17,729
over here mapping sequel commands to

133
00:06:17,729 --> 00:06:21,389
move ODB so the and is mapped to Amazon

134
00:06:21,389 --> 00:06:25,430
or to pipe and equal to W equal to

135
00:06:25,430 --> 00:06:27,270
JavaScript or in

136
00:06:27,270 --> 00:06:30,509
so I am showing is that as I shown has

137
00:06:30,509 --> 00:06:31,979
to display the demo you could see that

138
00:06:31,979 --> 00:06:35,069
I'll be using some of these rather than

139
00:06:35,069 --> 00:06:37,100
the and

140
00:06:37,100 --> 00:06:41,990
so injecting JavaScript so reference to

141
00:06:41,990 --> 00:06:45,350
database object in so the key

142
00:06:45,350 --> 00:06:47,990
point to be noted here is that

143
00:06:47,990 --> 00:06:50,390
refers to the database object and its

144
00:06:50,390 --> 00:06:53,030
main functions and if an attacker finds

145
00:06:53,030 --> 00:06:54,620
an injection point what he could do is

146
00:06:54,620 --> 00:06:57,800
that he could he could take the database

147
00:06:57,800 --> 00:06:59,540
object and called further functions like

148
00:06:59,540 --> 00:07:01,490
collections or any other phone functions

149
00:07:01,490 --> 00:07:04,820
possible within the shell so what

150
00:07:04,820 --> 00:07:06,740
so this was a problems within

151
00:07:06,740 --> 00:07:09,260
applications developed by by the

152
00:07:09,260 --> 00:07:11,420
developers so if an attacker finds an

153
00:07:11,420 --> 00:07:12,950
injection point what he could do is that

154
00:07:12,950 --> 00:07:15,440
he could call he could take the database

155
00:07:15,440 --> 00:07:18,080
object and access the functions within

156
00:07:18,080 --> 00:07:20,660
the API so it was found and it was

157
00:07:20,660 --> 00:07:24,920
passed for versions 2.0 and above so so

158
00:07:24,920 --> 00:07:27,080
what happened so does the JavaScript

159
00:07:27,080 --> 00:07:28,930
injection end here

160
00:07:28,930 --> 00:07:32,870
so this is where the again JavaScript

161
00:07:32,870 --> 00:07:34,370
techniques come up this point I

162
00:07:34,370 --> 00:07:36,320
reference so if those are familiar with

163
00:07:36,320 --> 00:07:40,160
JavaScript it is just many of I used the

164
00:07:40,160 --> 00:07:42,470
this pointer so what happens is that it

165
00:07:42,470 --> 00:07:45,020
returns the current object so as soon as

166
00:07:45,020 --> 00:07:46,760
you have an injection point and if you

167
00:07:46,760 --> 00:07:49,730
and if you tell the JavaScript to return

168
00:07:49,730 --> 00:07:53,000
at this point it dumps the whole

169
00:07:53,000 --> 00:07:56,780
database so that is one of the attack

170
00:07:56,780 --> 00:08:00,170
when he could use so what happens even

171
00:08:00,170 --> 00:08:03,380
if this point is blocked so version

172
00:08:03,380 --> 00:08:05,870
washing command the main feature of

173
00:08:05,870 --> 00:08:08,360
motion and is that it bounds to

174
00:08:08,360 --> 00:08:11,570
all database objects by default so what

175
00:08:11,570 --> 00:08:14,810
happens is that even if at this point is

176
00:08:14,810 --> 00:08:17,210
blocked you could reduce the erosion

177
00:08:17,210 --> 00:08:20,840
command to return to return true so what

178
00:08:20,840 --> 00:08:22,340
happens is that if you if I have an

179
00:08:22,340 --> 00:08:24,590
command you evaluating to true and if

180
00:08:24,590 --> 00:08:27,590
you tell to and if you specify the

181
00:08:27,590 --> 00:08:29,630
version command so it returns true so

182
00:08:29,630 --> 00:08:33,080
again you get to dump the data so this

183
00:08:33,080 --> 00:08:36,049
is used where you use the dollar where

184
00:08:36,049 --> 00:08:38,360
Oliver is used in MongoDB to evaluate

185
00:08:38,360 --> 00:08:42,770
JavaScript code so how do you check for

186
00:08:42,770 --> 00:08:45,920
JavaScript injection attacks in MongoDB

187
00:08:45,920 --> 00:08:48,450
so you have an application you

188
00:08:48,450 --> 00:08:50,760
check for JavaScript functions because

189
00:08:50,760 --> 00:08:52,829
since there are some of the some of

190
00:08:52,829 --> 00:08:54,540
predefined functions within the emotion

191
00:08:54,540 --> 00:08:58,560
you could use suppose sleep 500 means

192
00:08:58,560 --> 00:09:01,019
would sleep for 5 seconds and will turn

193
00:09:01,019 --> 00:09:02,760
the app and the application would render

194
00:09:02,760 --> 00:09:06,269
the response by 5 seconds delay so what

195
00:09:06,269 --> 00:09:08,730
happens you could check for so you could

196
00:09:08,730 --> 00:09:11,570
check for JavaScript injection attacks

197
00:09:11,570 --> 00:09:14,190
there as the module has been added to

198
00:09:14,190 --> 00:09:16,110
the no sequel exploitation framework

199
00:09:16,110 --> 00:09:18,149
which I have written and text address

200
00:09:18,149 --> 00:09:22,709
for web applications so saving

201
00:09:22,709 --> 00:09:25,170
JavaScript this is one of the features

202
00:09:25,170 --> 00:09:27,360
we we could use for post exploitation

203
00:09:27,360 --> 00:09:31,529
fees so it allows the attacker to write

204
00:09:31,529 --> 00:09:34,350
JavaScript functions and save them you

205
00:09:34,350 --> 00:09:36,300
can be used for further when needed

206
00:09:36,300 --> 00:09:39,630
rather than rather than writing the code

207
00:09:39,630 --> 00:09:43,829
again and again so the the concept is

208
00:09:43,829 --> 00:09:46,800
very simple you could you could give the

209
00:09:46,800 --> 00:09:48,690
ID which is the function name 44 count

210
00:09:48,690 --> 00:09:51,329
and the value of the function is what

211
00:09:51,329 --> 00:09:54,149
how you define the function so to load

212
00:09:54,149 --> 00:09:55,680
the JavaScript function into the

213
00:09:55,680 --> 00:09:58,740
shell you could use the levy dot a load

214
00:09:58,740 --> 00:10:00,949
server scripts API to load the

215
00:10:00,949 --> 00:10:05,010
JavaScript function within within the

216
00:10:05,010 --> 00:10:07,680
shell so as soon as you call the

217
00:10:07,680 --> 00:10:11,100
function so here it will return X plus y

218
00:10:11,100 --> 00:10:12,990
you could so how is this useful is that

219
00:10:12,990 --> 00:10:15,570
suppose if an attacker writes a script

220
00:10:15,570 --> 00:10:20,640
to those be among go shell so he could

221
00:10:20,640 --> 00:10:22,890
so after he gets into the server he

222
00:10:22,890 --> 00:10:24,180
could just again call this function

223
00:10:24,180 --> 00:10:26,430
rather than writing the code again and

224
00:10:26,430 --> 00:10:32,970
again so with PHP PHP converts the

225
00:10:32,970 --> 00:10:35,010
parameter with brackets to associative

226
00:10:35,010 --> 00:10:39,660
arrays as you could see that the user in

227
00:10:39,660 --> 00:10:41,790
the demo you could see that user dollar

228
00:10:41,790 --> 00:10:45,750
GT means dollar greater and the pass it

229
00:10:45,750 --> 00:10:47,550
converts the practice to associative

230
00:10:47,550 --> 00:10:50,310
arrays so what happens here is that as

231
00:10:50,310 --> 00:10:52,560
soon as you give a parameter within the

232
00:10:52,560 --> 00:10:57,540
associative array it gets converted it

233
00:10:57,540 --> 00:10:59,880
gets converted into the

234
00:10:59,880 --> 00:11:02,530
associative area and so here you could

235
00:11:02,530 --> 00:11:05,320
see that username array Dola any foo so

236
00:11:05,320 --> 00:11:07,720
what happens here is that as soon as you

237
00:11:07,720 --> 00:11:09,580
give you the dollar and niihka man and

238
00:11:09,580 --> 00:11:12,790
you specify the foo user it checks for

239
00:11:12,790 --> 00:11:14,410
any and checks within the database

240
00:11:14,410 --> 00:11:17,140
whether any user named foo exists since

241
00:11:17,140 --> 00:11:18,580
its dollar I need it checks whether

242
00:11:18,580 --> 00:11:22,690
there is a it checks whether foo user

243
00:11:22,690 --> 00:11:25,090
does not exist and returns true so what

244
00:11:25,090 --> 00:11:27,160
happens in retrieves all databases which

245
00:11:27,160 --> 00:11:31,630
all users which is not so let's have a

246
00:11:31,630 --> 00:11:33,850
look at some of the new vectors so some

247
00:11:33,850 --> 00:11:35,950
of the new vectors are doll axis dollar

248
00:11:35,950 --> 00:11:38,770
type and you could use this reg X which

249
00:11:38,770 --> 00:11:41,500
is within the JavaScript itself so that

250
00:11:41,500 --> 00:11:44,110
all axis Magisto kyumin's that have the

251
00:11:44,110 --> 00:11:46,960
specified field the doral type variable

252
00:11:46,960 --> 00:11:49,750
selects documents if a field is of the

253
00:11:49,750 --> 00:11:52,300
specified type suppose if it is

254
00:11:52,300 --> 00:11:54,280
character then return all documents

255
00:11:54,280 --> 00:11:58,360
after character dollar all matches erase

256
00:11:58,360 --> 00:12:00,700
that contains all elements are specific

257
00:12:00,700 --> 00:12:05,020
specified in the query so let's have a

258
00:12:05,020 --> 00:12:08,100
look at demos

259
00:12:36,390 --> 00:12:39,000
so this is a dummy application I have

260
00:12:39,000 --> 00:12:42,930
written so I've output indicating so

261
00:12:42,930 --> 00:12:46,140
then you could see so how do I check for

262
00:12:46,140 --> 00:12:55,410
JavaScript injection attacks and you

263
00:12:55,410 --> 00:12:56,910
could see that the application is

264
00:12:56,910 --> 00:12:59,670
loading and after five seconds the

265
00:12:59,670 --> 00:13:03,779
application returns so this is how is a

266
00:13:03,779 --> 00:13:05,190
possibility of how you could check for

267
00:13:05,190 --> 00:13:13,649
JavaScript attacks so this is the this

268
00:13:13,649 --> 00:13:20,399
pointer attack I told within de so so it

269
00:13:20,399 --> 00:13:22,860
returns since this object was bound it

270
00:13:22,860 --> 00:13:24,810
returns all the users within their

271
00:13:24,810 --> 00:13:29,550
database so what happens if that this

272
00:13:29,550 --> 00:13:36,779
point is blocked so if you try to so I

273
00:13:36,779 --> 00:13:39,649
have blocked this operator so and if i

274
00:13:39,649 --> 00:13:47,880
bypass it using the version command Co

275
00:13:47,880 --> 00:13:49,470
games you could see that the application

276
00:13:49,470 --> 00:13:52,709
runs and owns all the databases that are

277
00:13:52,709 --> 00:13:59,760
based ideals so this is the PHP which

278
00:13:59,760 --> 00:14:01,769
converts the converse to associative

279
00:14:01,769 --> 00:14:05,540
arrays it looks for it looks for any

280
00:14:05,540 --> 00:14:08,699
user which is not equal to 1 and runs

281
00:14:08,699 --> 00:14:11,420
all the details

282
00:14:15,750 --> 00:14:19,580
you can also use da Lexus

283
00:14:39,550 --> 00:14:43,500
okay so resource exceptional MongoDB

284
00:14:43,500 --> 00:14:46,600
MongoDB on 32-bit environments is too

285
00:14:46,600 --> 00:14:49,750
easy for attackers the use command

286
00:14:49,750 --> 00:14:52,530
creates arbitrary databases on the fly

287
00:14:52,530 --> 00:14:54,240
attacker could run it continuously

288
00:14:54,240 --> 00:14:57,160
exhausting the space as well as memory

289
00:14:57,160 --> 00:15:00,190
so this is a simple one-liner dinner

290
00:15:00,190 --> 00:15:02,980
service that act so he could write a

291
00:15:02,980 --> 00:15:05,980
while loop infinite and he could tell it

292
00:15:05,980 --> 00:15:11,410
to create databases unlimited so the

293
00:15:11,410 --> 00:15:13,090
problem is that an empty database

294
00:15:13,090 --> 00:15:15,940
occupies up to 1 and 192 MB by default

295
00:15:15,940 --> 00:15:21,130
on so within a few few loop

296
00:15:21,130 --> 00:15:23,440
execution the whole resource would be

297
00:15:23,440 --> 00:15:30,210
exhausted so let's move on to CouchDB

298
00:15:30,210 --> 00:15:33,100
some of the key features of CouchDB is

299
00:15:33,100 --> 00:15:36,750
that written in a line it uses the

300
00:15:36,750 --> 00:15:39,460
document yeah DB documents uses JSON

301
00:15:39,460 --> 00:15:43,270
object schema free it uses the HTTP

302
00:15:43,270 --> 00:15:46,840
protocol and the client uses the REST

303
00:15:46,840 --> 00:15:48,940
API to communicate with the backend it

304
00:15:48,940 --> 00:15:52,330
runs on port finally info by default and

305
00:15:52,330 --> 00:15:56,440
it has the futon web interface so this

306
00:15:56,440 --> 00:16:00,460
is the basic architecture of the CouchDB

307
00:16:00,460 --> 00:16:03,190
you have the database you have the JSON

308
00:16:03,190 --> 00:16:05,290
objects data objects and the client a

309
00:16:05,290 --> 00:16:07,450
client layer of which is the futon

310
00:16:07,450 --> 00:16:11,010
interface so the administrator

311
00:16:11,010 --> 00:16:12,880
communicates using the filter on the

312
00:16:12,880 --> 00:16:15,030
face and then you have the backend

313
00:16:15,030 --> 00:16:20,320
CouchDB so what are the attacks possible

314
00:16:20,320 --> 00:16:22,330
over here we have a cross-site scripting

315
00:16:22,330 --> 00:16:24,970
attacks you have CSRF attacks and you

316
00:16:24,970 --> 00:16:26,920
could sniff forth and authentication

317
00:16:26,920 --> 00:16:30,210
cookies you could across side for tags

318
00:16:30,210 --> 00:16:36,970
etc so admin parties some of the is one

319
00:16:36,970 --> 00:16:39,910
of the key feature of futon so as soon

320
00:16:39,910 --> 00:16:42,070
as you install the couch instance it by

321
00:16:42,070 --> 00:16:43,690
default goes on to admin party state

322
00:16:43,690 --> 00:16:45,690
which means that

323
00:16:45,690 --> 00:16:48,300
it is open and it does not have any

324
00:16:48,300 --> 00:16:50,490
users but by default and it is

325
00:16:50,490 --> 00:16:53,310
accessible to all the authentication

326
00:16:53,310 --> 00:16:55,500
cookies sniffer go the credentials are

327
00:16:55,500 --> 00:16:59,190
sent over unencrypted channel the cross

328
00:16:59,190 --> 00:17:01,620
and contacts in replication feature of

329
00:17:01,620 --> 00:17:03,300
the few tone-deaf is one of the key to

330
00:17:03,300 --> 00:17:07,439
be noted but it is limited to web server

331
00:17:07,439 --> 00:17:10,920
ports existences an HTML injection in

332
00:17:10,920 --> 00:17:14,179
few on the face XSS is quite not

333
00:17:14,179 --> 00:17:18,449
applicable couch since it uses the HTTP

334
00:17:18,449 --> 00:17:22,260
only cookie you have denial of service

335
00:17:22,260 --> 00:17:23,939
attacks and you have final enumeration

336
00:17:23,939 --> 00:17:27,900
attacks on couch so vulnerabilities you

337
00:17:27,900 --> 00:17:30,540
have accessing token interface you have

338
00:17:30,540 --> 00:17:33,419
a schema injection the cross side port

339
00:17:33,419 --> 00:17:36,320
attack like I said can be used to check

340
00:17:36,320 --> 00:17:39,600
so the whole point of cross side port

341
00:17:39,600 --> 00:17:42,780
attack is that suppose you have and you

342
00:17:42,780 --> 00:17:44,760
have an application within the network

343
00:17:44,760 --> 00:17:47,250
and you could and only a certain IP

344
00:17:47,250 --> 00:17:49,110
could access that Network so what you

345
00:17:49,110 --> 00:17:50,640
could do is that you can log on to the

346
00:17:50,640 --> 00:17:52,679
replication feature of couch and you

347
00:17:52,679 --> 00:17:55,740
could check whether they whether the

348
00:17:55,740 --> 00:17:59,309
other network port is open or not you

349
00:17:59,309 --> 00:18:02,130
can the the main feature of cross side

350
00:18:02,130 --> 00:18:03,690
port attack is that you can't scan

351
00:18:03,690 --> 00:18:05,490
directly why are the nmap or any other

352
00:18:05,490 --> 00:18:09,120
scanner you use so this is what I

353
00:18:09,120 --> 00:18:10,830
mentioned so this is one of the key

354
00:18:10,830 --> 00:18:13,980
features of vulnerabilities of CouchDB

355
00:18:13,980 --> 00:18:16,950
the maligne enumeration attack also

356
00:18:16,950 --> 00:18:22,169
stands you could do it by the XS PA so

357
00:18:22,169 --> 00:18:25,710
addressing auth cookie so it is default

358
00:18:25,710 --> 00:18:27,720
to expire within 10 minutes and an

359
00:18:27,720 --> 00:18:30,360
attacker gaining access would you want

360
00:18:30,360 --> 00:18:34,110
to use these 10 mins fruitfully so so as

361
00:18:34,110 --> 00:18:36,299
soon as suppose and at an attacker

362
00:18:36,299 --> 00:18:38,190
suppose an administrator is logging into

363
00:18:38,190 --> 00:18:41,730
his database and an attacker grabs the

364
00:18:41,730 --> 00:18:44,429
cookie so what he he would want to do is

365
00:18:44,429 --> 00:18:46,679
he would want to use those 10 minutes

366
00:18:46,679 --> 00:18:48,929
fruitfully so you want he would want to

367
00:18:48,929 --> 00:18:50,460
use the authentication cookie and grab

368
00:18:50,460 --> 00:18:52,710
the details of the database so what I

369
00:18:52,710 --> 00:18:54,330
have did is that I have added a feature

370
00:18:54,330 --> 00:18:56,100
into the no sequel database is that as

371
00:18:56,100 --> 00:18:57,990
soon as you grab the cookie it automatic

372
00:18:57,990 --> 00:19:00,390
Needham's the database and details for

373
00:19:00,390 --> 00:19:09,360
you so PHP on couch PHP on PHP on

374
00:19:09,360 --> 00:19:13,880
couches a driver developed for couchdb

375
00:19:13,880 --> 00:19:16,320
it uses the cold library to send

376
00:19:16,320 --> 00:19:18,540
requests to the API sensitive since

377
00:19:18,540 --> 00:19:22,350
couch uses the HTTP REST API unrelated

378
00:19:22,350 --> 00:19:25,350
PhD at p3 apps could result in arbitrary

379
00:19:25,350 --> 00:19:29,130
API call execution so the problem is

380
00:19:29,130 --> 00:19:33,809
that the the API has written our not

381
00:19:33,809 --> 00:19:36,030
secure it does not perform any

382
00:19:36,030 --> 00:19:38,550
validation so you could use certain

383
00:19:38,550 --> 00:19:42,690
commands within the API calls within the

384
00:19:42,690 --> 00:19:49,050
CouchDB to access certain resources so

385
00:19:49,050 --> 00:19:51,000
this is where the one herbal tea lies in

386
00:19:51,000 --> 00:19:55,730
PHP on couch driver you could see that

387
00:19:56,059 --> 00:19:59,490
it uses the query and test to pass it on

388
00:19:59,490 --> 00:20:03,809
to the core library and the you could

389
00:20:03,809 --> 00:20:05,309
see that the cold I per execute the

390
00:20:05,309 --> 00:20:12,080
query ok so

391
00:20:47,080 --> 00:20:50,470
so we check for all indication attacks

392
00:20:50,470 --> 00:20:54,509
oh yeah so as soon as the all docs

393
00:20:54,509 --> 00:20:57,700
command in account states that you could

394
00:20:57,700 --> 00:21:02,169
fetch all the documents and also examine

395
00:21:02,169 --> 00:21:04,499
would be

396
00:21:12,030 --> 00:21:17,170
so this is a this is a sample example of

397
00:21:17,170 --> 00:21:17,950
the Curie

398
00:21:17,950 --> 00:21:20,440
I would like to execute over here so the

399
00:21:20,440 --> 00:21:22,780
oarlocks command the open SEC is the

400
00:21:22,780 --> 00:21:25,020
database of the couch and the all docks

401
00:21:25,020 --> 00:21:28,930
is the dumps the all the documents of

402
00:21:28,930 --> 00:21:31,030
the corresponding database so what

403
00:21:31,030 --> 00:21:34,630
happens here is that since the it was

404
00:21:34,630 --> 00:21:38,680
sending it was sending arrest STD

405
00:21:38,680 --> 00:21:44,190
because STD be you can see here is that

406
00:21:44,280 --> 00:21:48,340
so the what I did here was that if the

407
00:21:48,340 --> 00:21:50,410
query executes and returns true since

408
00:21:50,410 --> 00:21:53,080
all dogs are returned true since or any

409
00:21:53,080 --> 00:21:55,000
of the user all the documents were

410
00:21:55,000 --> 00:21:57,490
matching any return true so logically

411
00:21:57,490 --> 00:22:00,540
the application logs in

412
00:22:10,670 --> 00:22:13,130
similarly the changes could be it's

413
00:22:13,130 --> 00:22:17,420
another API within the couch TV so this

414
00:22:17,420 --> 00:22:19,190
is one of the challenges we hosted for

415
00:22:19,190 --> 00:22:19,790
CDF's

416
00:22:19,790 --> 00:22:25,880
in back in India she dumps the entire

417
00:22:25,880 --> 00:22:32,179
result for you so you could see that the

418
00:22:32,179 --> 00:22:35,540
request being going and here we

419
00:22:35,540 --> 00:22:38,900
specified the changes that's why because

420
00:22:38,900 --> 00:22:41,230
the

421
00:22:50,480 --> 00:22:54,560
okay so Redis let's have a look at there

422
00:22:54,560 --> 00:22:58,450
it is architecture you can see that

423
00:22:58,450 --> 00:23:01,220
there's a client you have the API ready

424
00:23:01,220 --> 00:23:03,800
CPI and you have this connected to it

425
00:23:03,800 --> 00:23:05,060
and you could even connect to the

426
00:23:05,060 --> 00:23:09,500
PostScript database if you want so some

427
00:23:09,500 --> 00:23:11,330
of the key features of Redis is that you

428
00:23:11,330 --> 00:23:13,760
have the key value storage engine it has

429
00:23:13,760 --> 00:23:15,890
ready server and client it is driven by

430
00:23:15,890 --> 00:23:18,740
a configuration file and documentation

431
00:23:18,740 --> 00:23:21,170
is actually a huge laughs in the path if

432
00:23:21,170 --> 00:23:22,670
you read the documentation of Redis

433
00:23:22,670 --> 00:23:24,140
carefully you will find a whole lot of

434
00:23:24,140 --> 00:23:25,310
vulnerabilities within the ready

435
00:23:25,310 --> 00:23:29,330
strategies so ready supports fight data

436
00:23:29,330 --> 00:23:31,910
structures strings hashes lists sets and

437
00:23:31,910 --> 00:23:36,530
all up sets so let's have a look at the

438
00:23:36,530 --> 00:23:38,750
attacks brute force religious passwords

439
00:23:38,750 --> 00:23:41,450
denial of service on the fly command

440
00:23:41,450 --> 00:23:43,610
killing configuration regret arbitrary

441
00:23:43,610 --> 00:23:45,440
file rewrite and blind final elimination

442
00:23:45,440 --> 00:23:47,930
which is useful offenders so this is a

443
00:23:47,930 --> 00:23:50,390
snapshot of I have taken within the

444
00:23:50,390 --> 00:23:52,280
Redis configuration file so why I am

445
00:23:52,280 --> 00:23:54,620
specifying is that you could see that it

446
00:23:54,620 --> 00:23:56,600
actually increases us warning since

447
00:23:56,600 --> 00:23:58,910
Redis is pretty fast an outside user can

448
00:23:58,910 --> 00:24:00,980
try up to 150 K passwords per second

449
00:24:00,980 --> 00:24:03,020
against a good box this means that you

450
00:24:03,020 --> 00:24:04,180
should use a very strong password

451
00:24:04,180 --> 00:24:06,290
otherwise it will be very easy to break

452
00:24:06,290 --> 00:24:08,570
so this is a pretty much motivation for

453
00:24:08,570 --> 00:24:12,620
anyone so the Redis passes power so very

454
00:24:12,620 --> 00:24:15,590
fast so he could so the my tool the tool

455
00:24:15,590 --> 00:24:17,690
also uses you could use in addition

456
00:24:17,690 --> 00:24:20,540
areand you could crack pretty much long

457
00:24:20,540 --> 00:24:25,160
passes within few seconds so so this

458
00:24:25,160 --> 00:24:27,650
this was one of the main feature that

459
00:24:27,650 --> 00:24:30,080
helped many more attacks help getting

460
00:24:30,080 --> 00:24:32,780
into Redis for today's versions 2.6 and

461
00:24:32,780 --> 00:24:35,060
below there was no support for scripting

462
00:24:35,060 --> 00:24:38,710
for versions 2.6 and above they had its

463
00:24:38,710 --> 00:24:43,450
ability for scripting so Radice uses the

464
00:24:43,450 --> 00:24:48,860
scripting engine so since we subscript

465
00:24:48,860 --> 00:24:51,740
being let's have a look the let's have a

466
00:24:51,740 --> 00:24:53,180
look at the Lua scripting engine and

467
00:24:53,180 --> 00:24:56,410
basics Redis uses the lower two script

468
00:24:56,410 --> 00:25:00,050
and manage scripts the engine is publish

469
00:25:00,050 --> 00:25:03,080
unboxed and offers in a security global

470
00:25:03,080 --> 00:25:03,790
very

471
00:25:03,790 --> 00:25:05,560
they have an implement in global

472
00:25:05,560 --> 00:25:07,210
variables protection but it can be also

473
00:25:07,210 --> 00:25:08,200
bypassed

474
00:25:08,200 --> 00:25:10,420
scripts are executed using the eval so

475
00:25:10,420 --> 00:25:15,420
that's pretty much all about me you are

476
00:25:15,420 --> 00:25:18,310
it's available from cautions 2.6 and

477
00:25:18,310 --> 00:25:21,130
above so it has the problem is that red

478
00:25:21,130 --> 00:25:22,900
is limited descripting library so it

479
00:25:22,900 --> 00:25:27,190
enabled only a certain set of libraries

480
00:25:27,190 --> 00:25:31,000
for use for the user so these are some

481
00:25:31,000 --> 00:25:36,010
of the libraries available so the key

482
00:25:36,010 --> 00:25:39,820
points evil and evil shaadi to reduce

483
00:25:39,820 --> 00:25:42,310
api which is used to valid scripts in

484
00:25:42,310 --> 00:25:46,200
using the interpreter with ginger it is

485
00:25:46,200 --> 00:25:49,840
the script kill and listener Nexus some

486
00:25:49,840 --> 00:25:52,330
of the ApS within the Redis which is

487
00:25:52,330 --> 00:25:54,450
used to check whether the a script exes

488
00:25:54,450 --> 00:25:57,100
the x-axis is used to check whether

489
00:25:57,100 --> 00:26:01,150
script X's or not lists list the whether

490
00:26:01,150 --> 00:26:02,800
any script is running or not

491
00:26:02,800 --> 00:26:05,440
and script kill concludes the current

492
00:26:05,440 --> 00:26:08,140
script running so an important point to

493
00:26:08,140 --> 00:26:10,630
note is that when a script is running no

494
00:26:10,630 --> 00:26:12,190
other functions can be accessed or any

495
00:26:12,190 --> 00:26:14,110
operations can be performed so this is a

496
00:26:14,110 --> 00:26:16,450
key feature to note that it is a kind of

497
00:26:16,450 --> 00:26:18,400
denial of service so as soon so if you

498
00:26:18,400 --> 00:26:23,260
run a script within the Redis platform

499
00:26:23,260 --> 00:26:26,020
no other user will be able to access the

500
00:26:26,020 --> 00:26:30,280
database or extract resources from it so

501
00:26:30,280 --> 00:26:32,620
since looping was evolved is the one

502
00:26:32,620 --> 00:26:34,450
line denial of service attack so as soon

503
00:26:34,450 --> 00:26:37,060
as you run this script the rediscover

504
00:26:37,060 --> 00:26:39,730
crashes since it keeps on evaluating it

505
00:26:39,730 --> 00:26:42,010
and high returns for and the server

506
00:26:42,010 --> 00:26:44,550
crashes so this is one line attack

507
00:26:44,550 --> 00:26:48,330
possibilities so commands can be

508
00:26:48,330 --> 00:26:51,400
disabled by attack by an attacker so as

509
00:26:51,400 --> 00:26:52,960
soon as an attacker logs into theta DS

510
00:26:52,960 --> 00:26:55,470
server equal to use the rename command

511
00:26:55,470 --> 00:26:58,360
and he could rename the main

512
00:26:58,360 --> 00:26:59,830
configuration command which is used to

513
00:26:59,830 --> 00:27:01,810
list the configuration in Redis he could

514
00:27:01,810 --> 00:27:04,390
rename it to some other way a name he

515
00:27:04,390 --> 00:27:07,720
wants he could also even really simple

516
00:27:07,720 --> 00:27:10,780
the command by renaming nothing so there

517
00:27:10,780 --> 00:27:12,700
are two possible available possibilities

518
00:27:12,700 --> 00:27:16,800
available here so if I rewrite so

519
00:27:16,800 --> 00:27:19,140
this is one of the Fiji suppose you can

520
00:27:19,140 --> 00:27:22,020
you need to access the database dump of

521
00:27:22,020 --> 00:27:25,290
the of certain databases so what you can

522
00:27:25,290 --> 00:27:26,880
do is that you could rewrite the

523
00:27:26,880 --> 00:27:28,710
configuration file to somewhere where we

524
00:27:28,710 --> 00:27:32,540
want so where we have access to suppose

525
00:27:32,540 --> 00:27:36,690
aaww folder where we're very we could

526
00:27:36,690 --> 00:27:39,270
access access it so what an attacker

527
00:27:39,270 --> 00:27:40,820
could do is that he could write the

528
00:27:40,820 --> 00:27:44,130
configuration file to WWE so where he

529
00:27:44,130 --> 00:27:47,570
could access it remotely

530
00:27:48,930 --> 00:27:52,170
so finally enumeration this is possible

531
00:27:52,170 --> 00:27:53,700
when we opened in restricted

532
00:27:53,700 --> 00:27:57,270
environments the do file can be used in

533
00:27:57,270 --> 00:27:58,710
Lua scripting which is used to open

534
00:27:58,710 --> 00:28:02,160
files although it doesn't although

535
00:28:02,160 --> 00:28:04,230
doesn't open the file it gives the an

536
00:28:04,230 --> 00:28:06,030
indication whether the file exists or

537
00:28:06,030 --> 00:28:10,200
not so if I try while waiting what W it

538
00:28:10,200 --> 00:28:13,320
it show it puts the output that there

539
00:28:13,320 --> 00:28:17,250
exists but cannot open file so and if I

540
00:28:17,250 --> 00:28:21,060
if I do wwws it says that no such a

541
00:28:21,060 --> 00:28:21,600
exists

542
00:28:21,600 --> 00:28:23,850
so you could do a blind file enumeration

543
00:28:23,850 --> 00:28:26,040
attack so this morning Rose has been

544
00:28:26,040 --> 00:28:30,210
added to the framework so let's have a

545
00:28:30,210 --> 00:28:32,810
look at the demo

546
00:28:54,160 --> 00:28:56,110
so this is the one line

547
00:28:56,110 --> 00:28:59,380
denial-of-service attack as you could

548
00:28:59,380 --> 00:29:04,810
see there is server has jumped in CPU

549
00:29:04,810 --> 00:29:12,190
usage so actually trashes after a while

550
00:29:12,190 --> 00:29:14,500
I have written a script to restarted so

551
00:29:14,500 --> 00:29:17,490
don't crash

552
00:29:42,870 --> 00:29:45,780
okay so let's have a look for the blind

553
00:29:45,780 --> 00:29:50,550
value Malaysian I specify a file which

554
00:29:50,550 --> 00:29:53,250
doesn't exist so it says no such file

555
00:29:53,250 --> 00:29:57,230
access data access or not as soon as I

556
00:29:57,230 --> 00:30:02,100
specify a valid file it spits out

557
00:30:02,100 --> 00:30:04,320
another which means that it is not able

558
00:30:04,320 --> 00:30:06,919
to pacify

559
00:30:12,330 --> 00:30:19,499
so here you could see that the

560
00:30:19,499 --> 00:30:21,029
configuration file currently have

561
00:30:21,029 --> 00:30:27,869
returned it to by default in terms it in

562
00:30:27,869 --> 00:30:32,729
rights rights into our lips / Redis you

563
00:30:32,729 --> 00:30:37,909
could specify it - you could set it to

564
00:30:37,909 --> 00:30:40,409
configure set energy whatever is

565
00:30:40,409 --> 00:30:44,129
available so arbitrary right off is

566
00:30:44,129 --> 00:30:46,668
possible

567
00:31:00,960 --> 00:31:05,400
okay so Cassandra key takeaways I just

568
00:31:05,400 --> 00:31:08,100
written in Java the main point is you

569
00:31:08,100 --> 00:31:10,590
could store fuel huge data sets it's

570
00:31:10,590 --> 00:31:13,560
almost similar to sequel so it uses the

571
00:31:13,560 --> 00:31:17,040
sequel tree and trips protocol cq3 is

572
00:31:17,040 --> 00:31:19,680
very much similar to SQL but you have

573
00:31:19,680 --> 00:31:21,330
some limitations that come from

574
00:31:21,330 --> 00:31:23,670
scalability like you have no joints no

575
00:31:23,670 --> 00:31:26,670
aggregate functions etc by default

576
00:31:26,670 --> 00:31:28,910
Cassandra runs on port nine one six zero

577
00:31:28,910 --> 00:31:31,830
so some of the sad facts for attack is

578
00:31:31,830 --> 00:31:34,560
that you have no or no Union no sub

579
00:31:34,560 --> 00:31:37,740
Rica's terms must be indexed and primary

580
00:31:37,740 --> 00:31:39,420
key can only be carried for so these are

581
00:31:39,420 --> 00:31:40,800
some of the restraints that are

582
00:31:40,800 --> 00:31:45,270
applicable to Cassandra so what is the

583
00:31:45,270 --> 00:31:47,040
security issues so let's have a look at

584
00:31:47,040 --> 00:31:49,050
the Cassandra model you have the key

585
00:31:49,050 --> 00:31:50,970
space which is the data base and you

586
00:31:50,970 --> 00:31:52,530
have the column family which is the

587
00:31:52,530 --> 00:31:57,120
table and you have the data so similar

588
00:31:57,120 --> 00:31:58,620
to SQL injection you have sequel

589
00:31:58,620 --> 00:32:01,370
injection possible on Cassandra Web Apps

590
00:32:01,370 --> 00:32:03,840
shell commands can be useful to an

591
00:32:03,840 --> 00:32:07,050
attacker so supports you have suppose

592
00:32:07,050 --> 00:32:08,250
you get into a machine and you have

593
00:32:08,250 --> 00:32:10,230
Cassandra running could use the source

594
00:32:10,230 --> 00:32:13,530
command to read files within the within

595
00:32:13,530 --> 00:32:15,930
the I notice around if it is running as

596
00:32:15,930 --> 00:32:17,550
root then you could read pretty much all

597
00:32:17,550 --> 00:32:20,550
the files blind-fire

598
00:32:20,550 --> 00:32:23,310
emulation attack is also possible I have

599
00:32:23,310 --> 00:32:30,450
added and more used to the framework so

600
00:32:30,450 --> 00:32:32,760
I don't have an a demo for the PHP

601
00:32:32,760 --> 00:32:34,470
application but I have the source

602
00:32:34,470 --> 00:32:40,440
command you could see so although it

603
00:32:40,440 --> 00:32:43,500
does not display the you can see that in

604
00:32:43,500 --> 00:32:48,480
this place the and it is the password

605
00:32:48,480 --> 00:32:52,080
for you so it's useful while during

606
00:32:52,080 --> 00:32:54,560
vendors

607
00:33:04,100 --> 00:33:08,630
so each piece is written in Java the

608
00:33:08,630 --> 00:33:10,610
main point is we have billions of rows X

609
00:33:10,610 --> 00:33:14,240
millions of corns incision it also uses

610
00:33:14,240 --> 00:33:16,520
this GPRS protocol

611
00:33:16,520 --> 00:33:19,670
it runs on port port 637 nine or eight

612
00:33:19,670 --> 00:33:22,640
zero this is a rusty pair by default and

613
00:33:22,640 --> 00:33:24,980
also gives emphasis to restrict Russian

614
00:33:24,980 --> 00:33:27,950
environments so some of the secure

615
00:33:27,950 --> 00:33:30,140
dishes is that you have no security by

616
00:33:30,140 --> 00:33:31,700
default you have man the middle attacks

617
00:33:31,700 --> 00:33:36,100
and the rusty play is very much exposed

618
00:33:36,100 --> 00:33:39,590
okay so the no signal database research

619
00:33:39,590 --> 00:33:42,710
on security lesson and anywhere you have

620
00:33:42,710 --> 00:33:45,890
a neo4j memcache react also under the

621
00:33:45,890 --> 00:33:46,580
scanners

622
00:33:46,580 --> 00:33:48,800
someone someone abilities has been

623
00:33:48,800 --> 00:33:53,030
discussed support for the memcache near

624
00:33:53,030 --> 00:33:54,800
for gender x assumed to be added to the

625
00:33:54,800 --> 00:33:58,280
framework memory leaks and offers around

626
00:33:58,280 --> 00:34:00,890
rice those who are interested you could

627
00:34:00,890 --> 00:34:02,420
have a there's an interesting block

628
00:34:02,420 --> 00:34:07,250
return for neo4j recently so you could

629
00:34:07,250 --> 00:34:10,190
take down the thing if anyone wants so

630
00:34:10,190 --> 00:34:12,380
so the whole problem lies is there

631
00:34:12,380 --> 00:34:14,449
automation like suppose you have a

632
00:34:14,449 --> 00:34:17,090
sequence for signal injection and sequel

633
00:34:17,090 --> 00:34:20,929
and checks do we have a framework for no

634
00:34:20,929 --> 00:34:24,020
sequel so this is where they need

635
00:34:24,020 --> 00:34:26,690
foreign framework came there was already

636
00:34:26,690 --> 00:34:29,090
a framework for called sequin map but

637
00:34:29,090 --> 00:34:31,610
the problem was that it was it came ATM

638
00:34:31,610 --> 00:34:34,850
bus is truly so I wrote a

639
00:34:34,850 --> 00:34:36,590
framework where you could you have

640
00:34:36,590 --> 00:34:38,989
access to all the databases like out

641
00:34:38,989 --> 00:34:44,210
steadies HBase and Cassandra so the

642
00:34:44,210 --> 00:34:46,340
framework is one of its kind it's open

643
00:34:46,340 --> 00:34:48,440
source and written in Python and there

644
00:34:48,440 --> 00:34:51,020
are plenty of box so I'm not a hardcore

645
00:34:51,020 --> 00:34:53,989
I have documented the API so no secret

646
00:34:53,989 --> 00:34:57,290
project calm the code is available for

647
00:34:57,290 --> 00:35:00,320
download over there so what are the key

648
00:35:00,320 --> 00:35:02,390
features for tool for the tool you have

649
00:35:02,390 --> 00:35:04,970
as it has support for now knockouts

650
00:35:04,970 --> 00:35:08,480
Redis HBase and Cassandra I have support

651
00:35:08,480 --> 00:35:10,580
for no single run web applications you

652
00:35:10,580 --> 00:35:12,530
could specify the web app URL and

653
00:35:12,530 --> 00:35:14,640
specify the web app

654
00:35:14,640 --> 00:35:17,519
command for checking just for the hour

655
00:35:17,519 --> 00:35:19,309
that's for the other stupid attacks

656
00:35:19,309 --> 00:35:22,410
MongoDB Laura attacks couch PHP terror

657
00:35:22,410 --> 00:35:25,829
attacks etc it has a multi-threaded IP

658
00:35:25,829 --> 00:35:28,410
rescan I have also put put in that you

659
00:35:28,410 --> 00:35:30,089
could specify a huge list of IP and

660
00:35:30,089 --> 00:35:31,890
check for whether the ports are open or

661
00:35:31,890 --> 00:35:33,539
not and whether the attacks are possible

662
00:35:33,539 --> 00:35:36,539
or not and the list continues you have

663
00:35:36,539 --> 00:35:38,190
database cloning feature you have

664
00:35:38,190 --> 00:35:40,500
additionally attacks you could like I

665
00:35:40,500 --> 00:35:42,480
said the post exploitation module will

666
00:35:42,480 --> 00:35:44,910
be integrated soon you could JavaScript

667
00:35:44,910 --> 00:35:49,109
attacks in do it for the short and

668
00:35:49,109 --> 00:35:52,579
I peeled straps the

669
00:35:52,579 --> 00:35:55,140
takes the list from short and gives to

670
00:35:55,140 --> 00:35:57,450
you you could sniff for database

671
00:35:57,450 --> 00:35:58,589
credentials and cookies

672
00:35:58,589 --> 00:36:00,569
so the sniffing model automatically

673
00:36:00,569 --> 00:36:03,420
grabs the needed corresponding cookies

674
00:36:03,420 --> 00:36:06,990
for couch hundred is I have a

675
00:36:06,990 --> 00:36:11,130
payload list also for this so future

676
00:36:11,130 --> 00:36:13,349
updates on the tool you could get update

677
00:36:13,349 --> 00:36:15,390
for a Cassandra and HP's attacks

678
00:36:15,390 --> 00:36:18,599
resource exhaustion support for react

679
00:36:18,599 --> 00:36:21,539
memcache an annual forge a pin just a

680
00:36:21,539 --> 00:36:25,730
report generation and of course most

