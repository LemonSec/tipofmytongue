1
00:00:00,060 --> 00:00:03,330
hi my name is Joe it's stupid PCIe

2
00:00:03,330 --> 00:00:08,370
tricks I have an all engineering

3
00:00:08,370 --> 00:00:10,230
education with a lot of focus on

4
00:00:10,230 --> 00:00:12,750
computer science and InfoSec so I am a

5
00:00:12,750 --> 00:00:16,139
hardware guy I do know some software

6
00:00:16,139 --> 00:00:18,170
stuff but I avoid it whenever possible

7
00:00:18,170 --> 00:00:20,130
because there are much smarter people

8
00:00:20,130 --> 00:00:21,720
who can do a much better job of most of

9
00:00:21,720 --> 00:00:24,510
it than I can I spent eight years doing

10
00:00:24,510 --> 00:00:26,970
security research speed PAP debug and

11
00:00:26,970 --> 00:00:29,429
tool development for CPUs I also did

12
00:00:29,429 --> 00:00:33,540
hardware pen testing of CPUs and I did

13
00:00:33,540 --> 00:00:35,370
security training for functional

14
00:00:35,370 --> 00:00:36,540
validators functional Hardware

15
00:00:36,540 --> 00:00:38,910
validators how to extend their their

16
00:00:38,910 --> 00:00:41,520
validation you know objectives to

17
00:00:41,520 --> 00:00:43,129
include some security objectives as well

18
00:00:43,129 --> 00:00:47,190
I also teach a class software

19
00:00:47,190 --> 00:00:49,320
exploitation via Hardware exploits a

20
00:00:49,320 --> 00:00:52,039
case X via hex we just taught at

21
00:00:52,039 --> 00:00:54,629
blackhat a few weeks ago for the first

22
00:00:54,629 --> 00:00:56,850
time and will be teaching it a few more

23
00:00:56,850 --> 00:01:00,690
times from here on out that's a picture

24
00:01:00,690 --> 00:01:03,449
of me I wear sunglasses to hold my hair

25
00:01:03,449 --> 00:01:06,979
out of my face and I'm securely finn's

26
00:01:06,979 --> 00:01:09,360
and I had to include a meme

27
00:01:09,360 --> 00:01:14,310
because if Joe fits Joe sits some of you

28
00:01:14,310 --> 00:01:15,689
may have heard about this wonderful hot

29
00:01:15,689 --> 00:01:18,420
tub at tour camp it was in the back of a

30
00:01:18,420 --> 00:01:19,080
pickup truck

31
00:01:19,080 --> 00:01:21,420
we did not manage to fill the hot tub

32
00:01:21,420 --> 00:01:23,790
with water from the ocean that we didn't

33
00:01:23,790 --> 00:01:25,170
have enough hose to pump it all the way

34
00:01:25,170 --> 00:01:28,920
but we did have a hose running into the

35
00:01:28,920 --> 00:01:30,840
fire pit where there was a radiator coil

36
00:01:30,840 --> 00:01:33,299
and a wood fire that had heated the

37
00:01:33,299 --> 00:01:36,479
water it was pretty nice but that's

38
00:01:36,479 --> 00:01:39,210
that's all I got for silly pictures some

39
00:01:39,210 --> 00:01:41,009
disclaimers this is not academic caliber

40
00:01:41,009 --> 00:01:43,259
research this is for fun a lot of this

41
00:01:43,259 --> 00:01:44,610
stuff actually pretty much all this

42
00:01:44,610 --> 00:01:46,380
stuff has been done before the

43
00:01:46,380 --> 00:01:47,850
difference is I'm trying to show you

44
00:01:47,850 --> 00:01:49,920
some PCIe attacks that are really easy

45
00:01:49,920 --> 00:01:53,520
and really cheap so before we can jump

46
00:01:53,520 --> 00:01:56,430
into that how many of you know what PCIe

47
00:01:56,430 --> 00:02:00,570
is I'm even know what PCI is and it's

48
00:02:00,570 --> 00:02:02,520
not payment card industry standards

49
00:02:02,520 --> 00:02:07,439
that's a much more broken system PCI

50
00:02:07,439 --> 00:02:09,479
Express is

51
00:02:09,479 --> 00:02:12,540
I mean on PCI PCI is peripheral Connect

52
00:02:12,540 --> 00:02:16,560
interface I think I remember this is a

53
00:02:16,560 --> 00:02:19,950
tiny screen shot of LS PCI LS PCI as

54
00:02:19,950 --> 00:02:21,930
utility and Linux that will show you all

55
00:02:21,930 --> 00:02:26,940
the devices on your PCI bus PCI was

56
00:02:26,940 --> 00:02:29,069
pretty PCI Express is great cuz it just

57
00:02:29,069 --> 00:02:30,690
extended PCI from a software perspective

58
00:02:30,690 --> 00:02:32,459
it's exactly the same thing we don't

59
00:02:32,459 --> 00:02:35,670
mean to worry about any differences from

60
00:02:35,670 --> 00:02:37,019
a hardware perspective it is a little

61
00:02:37,019 --> 00:02:39,239
different though over here we've got an

62
00:02:39,239 --> 00:02:43,799
old PCI bus PCI had a whole bunch of had

63
00:02:43,799 --> 00:02:46,410
32 bits that connected all of these

64
00:02:46,410 --> 00:02:48,480
slots together so it was a big bus

65
00:02:48,480 --> 00:02:51,569
everything is shared PCI Express is this

66
00:02:51,569 --> 00:02:54,090
big this is a 4x slot this is a 16 X

67
00:02:54,090 --> 00:02:57,060
love this is a 1x slot and 4x slot and

68
00:02:57,060 --> 00:02:59,790
then at a PCI slot down there each of

69
00:02:59,790 --> 00:03:02,310
these cards has a dedicated link to the

70
00:03:02,310 --> 00:03:05,129
CPU so this 1x slot doesn't share

71
00:03:05,129 --> 00:03:06,989
anything with this 4x slot they each

72
00:03:06,989 --> 00:03:10,709
have their own X's so we have lanes

73
00:03:10,709 --> 00:03:13,620
lanes as if lanes are 4 wires two wires

74
00:03:13,620 --> 00:03:14,280
going each way

75
00:03:14,280 --> 00:03:17,489
right so you can talk in both directions

76
00:03:17,489 --> 00:03:19,620
just like Ethernet right even though you

77
00:03:19,620 --> 00:03:23,040
have wires going both ways on faster

78
00:03:23,040 --> 00:03:25,169
ethernet that's another story but you

79
00:03:25,169 --> 00:03:27,180
combine these and you can have up to 60

80
00:03:27,180 --> 00:03:30,930
or actually up to 30 two sets of lanes

81
00:03:30,930 --> 00:03:33,480
in your link right most graphics cards

82
00:03:33,480 --> 00:03:36,599
are 16x link PCI Express devices which

83
00:03:36,599 --> 00:03:38,519
means they have 64 sorry

84
00:03:38,519 --> 00:03:44,099
yeah 64 wires which are 32 are X's which

85
00:03:44,099 --> 00:03:47,040
are 32 X throw 16 pairs of our X and 16

86
00:03:47,040 --> 00:03:52,440
pairs of TX right actually I don't

87
00:03:52,440 --> 00:03:53,849
I should mention you know the reason why

88
00:03:53,849 --> 00:03:55,590
we went to this whole high-speed serial

89
00:03:55,590 --> 00:03:57,810
way of doing things is when you have 32

90
00:03:57,810 --> 00:03:59,819
wires they all have to be the same and

91
00:03:59,819 --> 00:04:01,919
the same limped and you know adjusted

92
00:04:01,919 --> 00:04:03,209
you might have seen in Josh's slides

93
00:04:03,209 --> 00:04:05,129
this morning he showed some memory buses

94
00:04:05,129 --> 00:04:06,750
on some systems where they do a lot of

95
00:04:06,750 --> 00:04:08,400
squiggling of wires to make them the

96
00:04:08,400 --> 00:04:09,930
same life you don't have to worry about

97
00:04:09,930 --> 00:04:11,639
with the PCI Express because each

98
00:04:11,639 --> 00:04:14,069
individual Lane carries its own clock

99
00:04:14,069 --> 00:04:16,228
you know I have every every individual

100
00:04:16,228 --> 00:04:18,209
so every individual linked is a separate

101
00:04:18,209 --> 00:04:20,219
connection that are aggregated at a

102
00:04:20,219 --> 00:04:22,500
higher level

103
00:04:22,500 --> 00:04:25,870
so there's a hierarchy you have what's

104
00:04:25,870 --> 00:04:27,490
called a root complex and PC express

105
00:04:27,490 --> 00:04:29,229
that's kind of like your chipset or your

106
00:04:29,229 --> 00:04:33,040
CPU and you have a bunch of links that

107
00:04:33,040 --> 00:04:35,710
dangle off of it right you can have a

108
00:04:35,710 --> 00:04:37,600
bridge which will bridge

109
00:04:37,600 --> 00:04:39,550
you know this bus to a different bus and

110
00:04:39,550 --> 00:04:41,370
this is could be an old-school PCI bus

111
00:04:41,370 --> 00:04:43,960
you can also have a switch which

112
00:04:43,960 --> 00:04:46,750
connects one bus to another bus to

113
00:04:46,750 --> 00:04:49,270
another device and really it's it's a

114
00:04:49,270 --> 00:04:52,180
lot like USB and in more ways than you'd

115
00:04:52,180 --> 00:04:55,660
be then you imagine you know it Auto

116
00:04:55,660 --> 00:04:58,960
enumerates it switches it's a you know a

117
00:04:58,960 --> 00:05:01,510
hub USB hub is like a switch inside

118
00:05:01,510 --> 00:05:04,210
we've got basically a virtual PCI to PCI

119
00:05:04,210 --> 00:05:05,860
bridge because we went from a software

120
00:05:05,860 --> 00:05:06,880
perspective we want everything to be

121
00:05:06,880 --> 00:05:09,280
backward compatible so we want to have a

122
00:05:09,280 --> 00:05:11,740
PCI Express system work fine in a

123
00:05:11,740 --> 00:05:13,330
operating system that only knows what

124
00:05:13,330 --> 00:05:15,550
PCI is so we have a bunch of virtual

125
00:05:15,550 --> 00:05:17,380
bridges that connect to this internal

126
00:05:17,380 --> 00:05:18,880
bus that's a bunch of virtual bridges

127
00:05:18,880 --> 00:05:22,710
that connect to two more buses right

128
00:05:22,710 --> 00:05:24,639
you're familiar with networks you have

129
00:05:24,639 --> 00:05:26,410
all these layers it's really very

130
00:05:26,410 --> 00:05:28,060
similar for PCI Express as well you have

131
00:05:28,060 --> 00:05:29,620
a transaction layer which is what you

132
00:05:29,620 --> 00:05:31,150
think of when you want to send stuff

133
00:05:31,150 --> 00:05:32,410
back and forth when you want to read and

134
00:05:32,410 --> 00:05:34,120
write memory underneath that you have a

135
00:05:34,120 --> 00:05:35,650
data link layer which worries about

136
00:05:35,650 --> 00:05:37,660
packet izing things and organizing

137
00:05:37,660 --> 00:05:39,760
things down below you have a physical

138
00:05:39,760 --> 00:05:41,260
layer which deals with the electronics

139
00:05:41,260 --> 00:05:43,960
it also delete deals with you know low

140
00:05:43,960 --> 00:05:46,120
level CRC and other you know making sure

141
00:05:46,120 --> 00:05:49,770
we get the right bits back and forth

142
00:05:50,099 --> 00:05:54,430
from a software perspective we have

143
00:05:54,430 --> 00:05:55,750
what's called a configuration space

144
00:05:55,750 --> 00:05:59,740
right when we look at LS PCI we're going

145
00:05:59,740 --> 00:06:01,470
into memory and we're reading this block

146
00:06:01,470 --> 00:06:04,620
right so this block sorry it's so small

147
00:06:04,620 --> 00:06:07,960
is basically at bit zero we have a

148
00:06:07,960 --> 00:06:10,900
vendor ID at bit 16 we have a device ID

149
00:06:10,900 --> 00:06:13,960
and so on and so forth so if we do LS

150
00:06:13,960 --> 00:06:16,930
PCI - D which chooses a specific device

151
00:06:16,930 --> 00:06:20,410
and we give it its identifiers - X and n

152
00:06:20,410 --> 00:06:22,570
it's going to give us a dump of this

153
00:06:22,570 --> 00:06:25,510
table and we see what it's gonna tell us

154
00:06:25,510 --> 00:06:29,039
is that we have an Intel Corporation

155
00:06:29,039 --> 00:06:33,070
which is 8086 for a vendor ID which we

156
00:06:33,070 --> 00:06:35,190
see 8086 is right there at bed 0

157
00:06:35,190 --> 00:06:41,640
and bite 1:01 and it's a 2 4 e 2 4 4 e

158
00:06:41,640 --> 00:06:44,430
which is the device ID which is an Intel

159
00:06:44,430 --> 00:06:46,860
product which is the 8th to 801 PCI

160
00:06:46,860 --> 00:06:50,520
bridge we have a revision ID which shows

161
00:06:50,520 --> 00:06:54,480
up right here a class code you know in

162
00:06:54,480 --> 00:06:58,020
in USB we have like like classes like a

163
00:06:58,020 --> 00:07:00,330
mass storage controller and a USB to

164
00:07:00,330 --> 00:07:02,370
serial adapter so certain things can

165
00:07:02,370 --> 00:07:04,530
just use generic drivers same thing

166
00:07:04,530 --> 00:07:06,810
happens for PC Express as well we have

167
00:07:06,810 --> 00:07:09,930
these class codes so all disk drives can

168
00:07:09,930 --> 00:07:11,610
use the same driver instead of having to

169
00:07:11,610 --> 00:07:13,440
have a separate you know driver for

170
00:07:13,440 --> 00:07:15,570
every single manufactured revision of

171
00:07:15,570 --> 00:07:20,400
every single hard drive controller so

172
00:07:20,400 --> 00:07:23,310
when you turn a system on you need to

173
00:07:23,310 --> 00:07:24,840
find all the devices on it it's called a

174
00:07:24,840 --> 00:07:27,090
numeration right we start from the root

175
00:07:27,090 --> 00:07:28,410
complex and he's going to go and do a

176
00:07:28,410 --> 00:07:31,170
depth first you know walk through the

177
00:07:31,170 --> 00:07:32,610
entire space who's gonna look at buzz

178
00:07:32,610 --> 00:07:35,310
zero which is this one has one device

179
00:07:35,310 --> 00:07:38,190
right so bus zero device zero

180
00:07:38,190 --> 00:07:42,780
okay next bus one is a bridge bus 2 is

181
00:07:42,780 --> 00:07:45,360
this bus 2 has several devices on it so

182
00:07:45,360 --> 00:07:48,120
bus 2 device 1 2 bus 2 device 2 plus 2

183
00:07:48,120 --> 00:07:50,910
device 3 then this is bus 3 right here

184
00:07:50,910 --> 00:07:53,760
and there's a virtual bus a bus number 4

185
00:07:53,760 --> 00:07:58,500
inside of here and then bus 5 6 7 8 and

186
00:07:58,500 --> 00:08:00,720
each one of them has one device on it

187
00:08:00,720 --> 00:08:03,630
right the way this enumeration happens

188
00:08:03,630 --> 00:08:05,070
is actually that the root complex goes

189
00:08:05,070 --> 00:08:07,530
and it writes to every single bus device

190
00:08:07,530 --> 00:08:10,530
function combination and gets answers

191
00:08:10,530 --> 00:08:14,280
back so let's say you wanted to actually

192
00:08:14,280 --> 00:08:17,280
make traces on a boar and connect PCIe

193
00:08:17,280 --> 00:08:20,630
to something there are some really

194
00:08:20,630 --> 00:08:22,710
step-by-step complicated mandatory

195
00:08:22,710 --> 00:08:24,860
inflexible rules that you have to follow

196
00:08:24,860 --> 00:08:32,280
when routing PCIe signals you have to

197
00:08:32,280 --> 00:08:35,190
route pairs adjacent and equal length

198
00:08:35,190 --> 00:08:37,890
right so in a lane you have TX and rx

199
00:08:37,890 --> 00:08:39,659
pairs each of those pairs have to be

200
00:08:39,659 --> 00:08:41,039
adjacent to each other right next to

201
00:08:41,039 --> 00:08:42,960
each other really close and that to be

202
00:08:42,960 --> 00:08:47,460
equal length okay you got that

203
00:08:47,460 --> 00:08:51,029
that's it that's pretty much it so they

204
00:08:51,029 --> 00:08:53,010
did a really good job of making PCIe

205
00:08:53,010 --> 00:08:56,040
really easy to to build hardware for

206
00:08:56,040 --> 00:08:59,250
because you know what makes something

207
00:08:59,250 --> 00:09:00,600
more difficult right we're no longer

208
00:09:00,600 --> 00:09:02,399
have 32 wires in parallel that we have

209
00:09:02,399 --> 00:09:03,600
to get all the lanes match we just need

210
00:09:03,600 --> 00:09:05,190
to get these two wires from end to end

211
00:09:05,190 --> 00:09:08,250
properly there's some nice limits that

212
00:09:08,250 --> 00:09:09,959
are set system board traces can be 12

213
00:09:09,959 --> 00:09:13,709
inches add-in cards can have 3.5 inches

214
00:09:13,709 --> 00:09:16,440
of trace before they get to a chip and

215
00:09:16,440 --> 00:09:18,570
between two chips on a single board you

216
00:09:18,570 --> 00:09:20,790
can go up to 15 inches and really if you

217
00:09:20,790 --> 00:09:22,649
follow these rules your board might work

218
00:09:22,649 --> 00:09:25,560
and if you don't it might not work it

219
00:09:25,560 --> 00:09:29,100
might still work too though so there's a

220
00:09:29,100 --> 00:09:30,510
lot of fun things we can do if we

221
00:09:30,510 --> 00:09:34,440
stretch these rules PCI Express actually

222
00:09:34,440 --> 00:09:37,290
the spec defines external cabling but

223
00:09:37,290 --> 00:09:39,330
it's all really expensive and I don't

224
00:09:39,330 --> 00:09:41,070
really like expensive things because I

225
00:09:41,070 --> 00:09:43,070
break most of the stuff I have anyway

226
00:09:43,070 --> 00:09:44,970
but when we think about it what do we

227
00:09:44,970 --> 00:09:48,330
have is PCI Express your TX pair is 2.5

228
00:09:48,330 --> 00:09:51,959
gigahertz at PCI x1 PCI Express 1.0 and

229
00:09:51,959 --> 00:09:54,750
then 2.0 added 5 gigahertz and 3.0 I

230
00:09:54,750 --> 00:09:56,610
have 8 gigahertz and so on and so forth

231
00:09:56,610 --> 00:09:59,430
and who knows where I'll go from now 2.5

232
00:09:59,430 --> 00:10:00,810
gigahertz pair for rx

233
00:10:00,810 --> 00:10:03,240
and a 100 megahertz clock and that 100

234
00:10:03,240 --> 00:10:04,680
megahertz clock is actually optional but

235
00:10:04,680 --> 00:10:06,720
it's really helpful to have it and

236
00:10:06,720 --> 00:10:08,160
that's a reference clock it doesn't mean

237
00:10:08,160 --> 00:10:10,440
that we have to be synchronous to this

238
00:10:10,440 --> 00:10:12,540
this is just giving our device our

239
00:10:12,540 --> 00:10:13,680
reference clocks which doesn't have to

240
00:10:13,680 --> 00:10:17,279
provide its own so if we look around and

241
00:10:17,279 --> 00:10:18,720
trying to find a cheap cable that'll

242
00:10:18,720 --> 00:10:20,459
hold that this is a cross-section of a

243
00:10:20,459 --> 00:10:23,279
USB 3 cable right if you've ever cut

244
00:10:23,279 --> 00:10:26,430
open a USB cable a normal one you have 4

245
00:10:26,430 --> 00:10:28,500
wires there's red and black which is

246
00:10:28,500 --> 00:10:30,120
your power and ground and then there's a

247
00:10:30,120 --> 00:10:32,610
twisted pair of green and white right

248
00:10:32,610 --> 00:10:34,709
and that's pair is rated for about 500

249
00:10:34,709 --> 00:10:37,410
megahertz right because that's what USB

250
00:10:37,410 --> 00:10:40,800
2.0 uses USB 3.0 has these two

251
00:10:40,800 --> 00:10:43,589
additional pairs that are sheathed green

252
00:10:43,589 --> 00:10:47,339
sorry purple and an orange and blue and

253
00:10:47,339 --> 00:10:49,649
yellow initiative those pairs are rated

254
00:10:49,649 --> 00:10:51,750
for 5 gigahertz right because that's

255
00:10:51,750 --> 00:10:55,589
what USB 3 is supposed to go at which is

256
00:10:55,589 --> 00:10:57,209
great because as we just mentioned we

257
00:10:57,209 --> 00:11:00,300
need 2.5 2.5 and 100 and we have 5 5 and

258
00:11:00,300 --> 00:11:01,170
500 so

259
00:11:01,170 --> 00:11:03,149
if we wanted to we could actually route

260
00:11:03,149 --> 00:11:06,029
Pisa Express over a USB cable so here's

261
00:11:06,029 --> 00:11:09,690
a little PCB I laid out basically what

262
00:11:09,690 --> 00:11:12,300
we've got on the bottom is a slot sorry

263
00:11:12,300 --> 00:11:14,160
an edge connector that goes into a slot

264
00:11:14,160 --> 00:11:16,920
here's a USB housing and there's a

265
00:11:16,920 --> 00:11:18,660
dotted line because you cut it in half

266
00:11:18,660 --> 00:11:20,940
yeah your board costs a certain amount

267
00:11:20,940 --> 00:11:23,399
under a certain square inch so this is a

268
00:11:23,399 --> 00:11:25,500
2 inch by 2 inch board which costs

269
00:11:25,500 --> 00:11:27,690
whatever and I had I'd rather than make

270
00:11:27,690 --> 00:11:29,610
2 boards I just put everything on one

271
00:11:29,610 --> 00:11:32,880
because I'm cheap so I got 10 boards

272
00:11:32,880 --> 00:11:34,139
that's all I needed so I have 5

273
00:11:34,139 --> 00:11:35,790
configured one way and five the other

274
00:11:35,790 --> 00:11:38,339
way and then so cut this here and we

275
00:11:38,339 --> 00:11:39,779
have the other and we have a USB

276
00:11:39,779 --> 00:11:42,029
connector and we have PCI Express slot

277
00:11:42,029 --> 00:11:45,180
and you know because I didn't want to go

278
00:11:45,180 --> 00:11:47,310
have carrot carry all the power over

279
00:11:47,310 --> 00:11:49,100
actually using an external power header

280
00:11:49,100 --> 00:11:51,930
and a voltage regulator to give me the

281
00:11:51,930 --> 00:11:55,440
voltages that I needed on this slot and

282
00:11:55,440 --> 00:11:57,420
there's a whole bunch of pins that you

283
00:11:57,420 --> 00:11:58,560
can see are not connected because

284
00:11:58,560 --> 00:12:00,149
they're just they don't matter they're

285
00:12:00,149 --> 00:12:02,339
not important so this is what the board

286
00:12:02,339 --> 00:12:04,440
looks like populate the one side with

287
00:12:04,440 --> 00:12:05,910
the header this one actually caught cut

288
00:12:05,910 --> 00:12:08,100
in half this one did not it's got the

289
00:12:08,100 --> 00:12:10,740
header on the other end power input some

290
00:12:10,740 --> 00:12:13,649
capacitors a regulator and the slot you

291
00:12:13,649 --> 00:12:15,779
see how that end right there looks a

292
00:12:15,779 --> 00:12:17,790
little messy that's because I got my

293
00:12:17,790 --> 00:12:19,800
soldering iron when I got it really hot

294
00:12:19,800 --> 00:12:21,269
and just kind of jammed it through there

295
00:12:21,269 --> 00:12:24,120
to cut it open because the only

296
00:12:24,120 --> 00:12:27,420
difference between a PCI X what PCI 1x

297
00:12:27,420 --> 00:12:30,209
card and a 16 X card is that it's longer

298
00:12:30,209 --> 00:12:32,910
and has more pins so it's Otto

299
00:12:32,910 --> 00:12:35,579
negotiating right if you have a 16 X

300
00:12:35,579 --> 00:12:37,529
card you put in an 8 X slot it'll work

301
00:12:37,529 --> 00:12:39,329
at 8 X if you put it in a 4 X lot but

302
00:12:39,329 --> 00:12:41,820
work at 4 X if you put it in a 16 X slot

303
00:12:41,820 --> 00:12:43,440
but you actually accidentally put a

304
00:12:43,440 --> 00:12:45,000
piece of tape over one of the lines or

305
00:12:45,000 --> 00:12:46,920
there was a error in the trace or

306
00:12:46,920 --> 00:12:48,480
something PCI Express will auto

307
00:12:48,480 --> 00:12:51,149
negotiate down to as low as 1x you know

308
00:12:51,149 --> 00:12:53,180
and whatever I used to do it also

309
00:12:53,180 --> 00:12:55,920
negotiate the speed so if you have a 3 X

310
00:12:55,920 --> 00:12:58,500
card in a 3 X slot but you're like

311
00:12:58,500 --> 00:13:00,449
standing next to a bunch of sunspots or

312
00:13:00,449 --> 00:13:02,910
something it'll pry slow down to like

313
00:13:02,910 --> 00:13:05,430
2.5 gigahertz and even at 2.5 gigahertz

314
00:13:05,430 --> 00:13:07,649
it won't go slower but it does error

315
00:13:07,649 --> 00:13:09,720
checking and will resend things if it

316
00:13:09,720 --> 00:13:11,370
doesn't go properly so it's it's really

317
00:13:11,370 --> 00:13:12,630
a well-designed

318
00:13:12,630 --> 00:13:14,610
all around so what can we do with this

319
00:13:14,610 --> 00:13:15,840
this is an Intel Galileo

320
00:13:15,840 --> 00:13:21,030
it's an Arduino supposedly and on the

321
00:13:21,030 --> 00:13:24,000
back it's got a mini PCI Express slot

322
00:13:24,000 --> 00:13:26,310
and this is supposed to be used for a

323
00:13:26,310 --> 00:13:28,820
very short list of Intel certified

324
00:13:28,820 --> 00:13:35,280
wireless adapters but who pays attention

325
00:13:35,280 --> 00:13:38,370
to rules like that right so I built this

326
00:13:38,370 --> 00:13:40,500
little board similar to the other one

327
00:13:40,500 --> 00:13:44,040
for a mini PCI slot populated it and

328
00:13:44,040 --> 00:13:46,230
hooked it up so it can't see it it's on

329
00:13:46,230 --> 00:13:49,850
the back popped it on ran a USB cable to

330
00:13:49,850 --> 00:13:52,920
this tiny little graphics card so here's

331
00:13:52,920 --> 00:13:56,010
400 megahertz 512 megabytes of RAM here

332
00:13:56,010 --> 00:13:59,520
is like 1.2 gigahertz like a thousand

333
00:13:59,520 --> 00:14:03,420
core 4 gear 3 gigabyte whatever and I

334
00:14:03,420 --> 00:14:05,280
had to use an external power connector

335
00:14:05,280 --> 00:14:07,290
because you know this uses a couple of

336
00:14:07,290 --> 00:14:09,450
watts this uses a couple mega watts or

337
00:14:09,450 --> 00:14:13,320
something and when you go in on you know

338
00:14:13,320 --> 00:14:16,410
the the Galileo actually runs down

339
00:14:16,410 --> 00:14:18,660
version of Linux you do LS PCI and sure

340
00:14:18,660 --> 00:14:20,940
enough you see all these items 8086 8086

341
00:14:20,940 --> 00:14:25,260
8086 8086 1 0 de right that's the vendor

342
00:14:25,260 --> 00:14:27,870
ID for nvidia right and you can see that

343
00:14:27,870 --> 00:14:29,610
I loaded a driver Nouveau is the

344
00:14:29,610 --> 00:14:32,940
open-source and video driver that I was

345
00:14:32,940 --> 00:14:35,310
able to compile for this platform so

346
00:14:35,310 --> 00:14:37,710
here we go we have we have our

347
00:14:37,710 --> 00:14:40,980
itty-bitty little Arduino hooked up to a

348
00:14:40,980 --> 00:14:43,590
giant piece of Express card

349
00:14:43,590 --> 00:14:46,290
running a full HD display right and

350
00:14:46,290 --> 00:14:49,440
actually I had that and it's sitting on

351
00:14:49,440 --> 00:14:51,630
my desk at home and I can't believe that

352
00:14:51,630 --> 00:14:53,250
I forgot to bring that because it makes

353
00:14:53,250 --> 00:14:56,070
for a cool demo but I apologize there's

354
00:14:56,070 --> 00:14:59,460
a picture of it and it too much to

355
00:14:59,460 --> 00:15:00,900
fiddle with all the cables and get it

356
00:15:00,900 --> 00:15:04,080
actually work so you know all that's

357
00:15:04,080 --> 00:15:05,550
well and good but let's talk more about

358
00:15:05,550 --> 00:15:07,589
the security and attack side of things

359
00:15:07,589 --> 00:15:10,890
so here's some brief history Joe grant

360
00:15:10,890 --> 00:15:12,779
put this thing together about ten years

361
00:15:12,779 --> 00:15:14,040
ago it's called Tribble

362
00:15:14,040 --> 00:15:16,770
it's a system-on-chip basically runs

363
00:15:16,770 --> 00:15:18,750
Linux it has a memory it has its own PCI

364
00:15:18,750 --> 00:15:22,589
slots this is for pci old pci plug it in

365
00:15:22,589 --> 00:15:25,830
and it reads your memory pretty cool huh

366
00:15:25,830 --> 00:15:28,020
and actually he just got this up and

367
00:15:28,020 --> 00:15:29,550
running and working a little while ago

368
00:15:29,550 --> 00:15:31,470
for some other guys to play with it

369
00:15:31,470 --> 00:15:34,560
because I apparently PCI attacks you

370
00:15:34,560 --> 00:15:38,029
have a new fun thing to do right so

371
00:15:38,029 --> 00:15:40,470
there was also a period in there where

372
00:15:40,470 --> 00:15:41,970
there's there's inception and a whole

373
00:15:41,970 --> 00:15:43,560
bunch of firewire attacks if you're

374
00:15:43,560 --> 00:15:45,330
about firewire attacks yeah basically

375
00:15:45,330 --> 00:15:47,700
you plug a firewire if you have a system

376
00:15:47,700 --> 00:15:50,550
with firewire it's easy if you don't you

377
00:15:50,550 --> 00:15:52,170
have to attach a fire wire adapter

378
00:15:52,170 --> 00:15:54,720
somehow the firewire driver loads and

379
00:15:54,720 --> 00:15:56,339
there's a certain profile where you can

380
00:15:56,339 --> 00:15:59,190
hook up a device that tells the firewire

381
00:15:59,190 --> 00:16:01,440
driver to give this device full access

382
00:16:01,440 --> 00:16:03,930
to lower four gigabytes of memory it

383
00:16:03,930 --> 00:16:07,170
sounds pretty cool huh but there's some

384
00:16:07,170 --> 00:16:09,660
limitations that if you just block that

385
00:16:09,660 --> 00:16:11,400
your blacklist that driver or remove

386
00:16:11,400 --> 00:16:12,720
that driver from your system or don't

387
00:16:12,720 --> 00:16:15,270
load it you know you you're essentially

388
00:16:15,270 --> 00:16:17,070
protected or if you just don't have any

389
00:16:17,070 --> 00:16:21,180
port so you can plug firewire into you

390
00:16:21,180 --> 00:16:23,400
can also go and if you're one of the

391
00:16:23,400 --> 00:16:25,170
special people who spends lots of money

392
00:16:25,170 --> 00:16:28,260
on interesting Hardware windows scope

393
00:16:28,260 --> 00:16:30,209
makes the capture guard physical memory

394
00:16:30,209 --> 00:16:32,310
acquisition hardware a PCI Express

395
00:16:32,310 --> 00:16:36,209
add-on for only for a scant 7000 7000

396
00:16:36,209 --> 00:16:39,959
999 dollars you can buy this Xilinx FPGA

397
00:16:39,959 --> 00:16:44,220
board that plugs into a slot and it says

398
00:16:44,220 --> 00:16:45,959
you have to load drivers I haven't I

399
00:16:45,959 --> 00:16:48,839
haven't bought one and tested it yet so

400
00:16:48,839 --> 00:16:50,640
if one take a collection we could do

401
00:16:50,640 --> 00:16:54,480
that but I I'm not going to bother so it

402
00:16:54,480 --> 00:16:55,680
says you need to actually install

403
00:16:55,680 --> 00:16:57,010
drivers

404
00:16:57,010 --> 00:16:59,709
to put this card in your system and get

405
00:16:59,709 --> 00:17:01,389
your memory dump and I don't know of why

406
00:17:01,389 --> 00:17:03,190
you would bother doing that if you could

407
00:17:03,190 --> 00:17:04,390
just install drivers you just do it the

408
00:17:04,390 --> 00:17:07,540
software but whatever someone someone

409
00:17:07,540 --> 00:17:09,669
needs to spend $8,000 and this is the

410
00:17:09,669 --> 00:17:12,069
way to do it if you're interested if you

411
00:17:12,069 --> 00:17:14,890
want another 8000 way to spend $8,000

412
00:17:14,890 --> 00:17:16,240
talk to me later I might have a similar

413
00:17:16,240 --> 00:17:18,910
card that I can sell you for four four

414
00:17:18,910 --> 00:17:24,130
seven thousand so some losers on the

415
00:17:24,130 --> 00:17:27,309
other side of the world I forget their

416
00:17:27,309 --> 00:17:29,049
names does anybody remember who these

417
00:17:29,049 --> 00:17:29,580
guys were

418
00:17:29,580 --> 00:17:34,360
no snare and Sam Collins and they put

419
00:17:34,360 --> 00:17:37,840
together an fpga board with a

420
00:17:37,840 --> 00:17:41,429
thunderbolt expansion adapter basically

421
00:17:41,429 --> 00:17:43,600
you've got a bunch of Macs and you've

422
00:17:43,600 --> 00:17:46,000
got a thunderbolt port and you lace this

423
00:17:46,000 --> 00:17:47,770
cable all the way sorry this is like

424
00:17:47,770 --> 00:17:49,630
this is the victim you run it around

425
00:17:49,630 --> 00:17:51,940
here and plug it in there so now we have

426
00:17:51,940 --> 00:17:54,910
this device plugged into this Mac and

427
00:17:54,910 --> 00:17:57,520
we've got programming cables hooked up

428
00:17:57,520 --> 00:17:59,590
to this one which is going to go and

429
00:17:59,590 --> 00:18:01,330
direct the attack on this computer right

430
00:18:01,330 --> 00:18:05,410
and pretty cool stuff it's kind of a

431
00:18:05,410 --> 00:18:07,510
large board though and it's an FPGA and

432
00:18:07,510 --> 00:18:10,030
FPGA Tsar complicated and I like easy

433
00:18:10,030 --> 00:18:16,500
things so I went for a tiny solution

434
00:18:16,500 --> 00:18:18,820
that didn't require any new hardware

435
00:18:18,820 --> 00:18:22,000
this is a reference board it's a chip

436
00:18:22,000 --> 00:18:24,940
made by plx technologies it's called the

437
00:18:24,940 --> 00:18:28,990
USB 3380 it's designed to let you turn a

438
00:18:28,990 --> 00:18:31,540
USB device into a PCI Express device or

439
00:18:31,540 --> 00:18:33,190
a PCI Express device into a USB device

440
00:18:33,190 --> 00:18:35,950
right so you have a USB graphics adapter

441
00:18:35,950 --> 00:18:38,790
right you could grab a PCI Express

442
00:18:38,790 --> 00:18:42,130
graphics chip and this chip glue them

443
00:18:42,130 --> 00:18:44,559
together put them in a box and plug it

444
00:18:44,559 --> 00:18:46,390
into USB and write your some special

445
00:18:46,390 --> 00:18:50,590
drivers but it's got some neat debug

446
00:18:50,590 --> 00:18:52,809
features and extra features that you can

447
00:18:52,809 --> 00:18:55,929
use to do fun stuff it also comes in

448
00:18:55,929 --> 00:18:57,610
different sizes this is a little Express

449
00:18:57,610 --> 00:18:59,770
card one that fits into a nice little

450
00:18:59,770 --> 00:19:02,830
Thunderbolt enclosure so you know on the

451
00:19:02,830 --> 00:19:04,929
go you can carry it it also has an arm

452
00:19:04,929 --> 00:19:06,910
core on it that you could

453
00:19:06,910 --> 00:19:09,580
no not an arm core it's a 8051 core on

454
00:19:09,580 --> 00:19:11,770
there so here fancy and like to

455
00:19:11,770 --> 00:19:13,240
cross-compile you can actually write all

456
00:19:13,240 --> 00:19:15,700
your attack code and store it natively

457
00:19:15,700 --> 00:19:17,170
on there

458
00:19:17,170 --> 00:19:19,120
this is what it looks like inside

459
00:19:19,120 --> 00:19:21,130
basically you have the PCI Express side

460
00:19:21,130 --> 00:19:23,650
and the USB side and some stuff in the

461
00:19:23,650 --> 00:19:26,890
middle that shuffles data back and forth

462
00:19:26,890 --> 00:19:29,140
what isn't shown on here basically this

463
00:19:29,140 --> 00:19:32,380
ship they took the silicon from an older

464
00:19:32,380 --> 00:19:35,320
ship at 20 to 80 which was a PCI device

465
00:19:35,320 --> 00:19:38,440
and they took a PCI to PCI to PCI

466
00:19:38,440 --> 00:19:40,450
Express Bridge and they took the silicon

467
00:19:40,450 --> 00:19:41,680
for both of those and crammed them onto

468
00:19:41,680 --> 00:19:45,850
one chip so it's kind of a somewhat

469
00:19:45,850 --> 00:19:47,170
crippled device it doesn't support

470
00:19:47,170 --> 00:19:50,230
things like 64-bit DMA which is

471
00:19:50,230 --> 00:19:53,260
unfortunate but whatever it's also cheap

472
00:19:53,260 --> 00:19:54,850
it's the chip itself is like ten to

473
00:19:54,850 --> 00:19:58,120
fifteen dollars in quantity so one of

474
00:19:58,120 --> 00:19:59,650
the things that has that no one ever

475
00:19:59,650 --> 00:20:02,860
uses and I confirm that because I asked

476
00:20:02,860 --> 00:20:05,860
the the field service engineer like what

477
00:20:05,860 --> 00:20:07,210
do we what's the intended use for this

478
00:20:07,210 --> 00:20:10,930
we don't know it has this PCI out

479
00:20:10,930 --> 00:20:14,140
endpoint so from USB using you can look

480
00:20:14,140 --> 00:20:15,880
at the end points the end points are

481
00:20:15,880 --> 00:20:18,340
like the input and output ports that it

482
00:20:18,340 --> 00:20:19,720
for in software that you see when you

483
00:20:19,720 --> 00:20:23,230
plug a USB device in and you get to

484
00:20:23,230 --> 00:20:25,540
basically define your PCI Express packet

485
00:20:25,540 --> 00:20:29,680
right so just spit these you know zero

486
00:20:29,680 --> 00:20:33,280
to seven or fifteen or however many D

487
00:20:33,280 --> 00:20:36,760
words out over USB and they magically go

488
00:20:36,760 --> 00:20:40,810
through and come into this device and go

489
00:20:40,810 --> 00:20:42,280
out over PCI Express and you get a

490
00:20:42,280 --> 00:20:44,080
response so you can you can basically

491
00:20:44,080 --> 00:20:46,990
craft your own PCI Express reads rights

492
00:20:46,990 --> 00:20:50,890
and everything so in order to do that we

493
00:20:50,890 --> 00:20:52,300
need to mess with the firmware and

494
00:20:52,300 --> 00:20:54,510
actually this is this is the extent of

495
00:20:54,510 --> 00:20:57,640
the code that I put together for the

496
00:20:57,640 --> 00:21:01,030
hardware this is all fourteen by bit

497
00:21:01,030 --> 00:21:02,950
bytes of the firmware that I wrote

498
00:21:02,950 --> 00:21:05,020
basically what I needed to do is say

499
00:21:05,020 --> 00:21:07,330
okay this is a valid firmware I'm gonna

500
00:21:07,330 --> 00:21:10,690
have zero C bytes and these are the

501
00:21:10,690 --> 00:21:12,280
addresses I want to write and the values

502
00:21:12,280 --> 00:21:14,770
I want to write this big value value up

503
00:21:14,770 --> 00:21:16,540
here tells me I want to

504
00:21:16,540 --> 00:21:18,400
yeah I should give you a kota card

505
00:21:18,400 --> 00:21:19,960
basically all I'm doing is turning on

506
00:21:19,960 --> 00:21:22,570
USB right when I plug in the card it's a

507
00:21:22,570 --> 00:21:24,700
PCI Express device it turns itself on it

508
00:21:24,700 --> 00:21:26,370
trains piece of Express automatically

509
00:21:26,370 --> 00:21:28,540
then it goes and checks the firmware and

510
00:21:28,540 --> 00:21:29,680
it says oh what do I do

511
00:21:29,680 --> 00:21:33,250
turn on USB and that's pretty much all

512
00:21:33,250 --> 00:21:38,380
you need what I did here is this is e 4

513
00:21:38,380 --> 00:21:41,080
1 4 b c 16 this is a vendor ID and a

514
00:21:41,080 --> 00:21:46,390
device ID of the SDXC card reader on

515
00:21:46,390 --> 00:21:49,600
certain models of Max and the reason I

516
00:21:49,600 --> 00:21:51,430
did that is what we'll see in a few

517
00:21:51,430 --> 00:21:54,460
moments because some some some crazy

518
00:21:54,460 --> 00:21:56,320
folks from down under give me a tip on

519
00:21:56,320 --> 00:22:02,110
which one to use yeah that that's all

520
00:22:02,110 --> 00:22:04,180
that's the extent of how it custom it if

521
00:22:04,180 --> 00:22:06,910
you wanted to build one of these this is

522
00:22:06,910 --> 00:22:08,620
part of the NSA playset there were a

523
00:22:08,620 --> 00:22:11,290
dozen half-a-dozen people who put

524
00:22:11,290 --> 00:22:13,480
together toys that resembled things out

525
00:22:13,480 --> 00:22:17,110
of the the NSA ant catalog for Def Con

526
00:22:17,110 --> 00:22:19,120
and so this is one of them you can go on

527
00:22:19,120 --> 00:22:20,260
here there's a whole bunch of different

528
00:22:20,260 --> 00:22:20,830
ones

529
00:22:20,830 --> 00:22:24,040
this is slot screamer when you put it in

530
00:22:24,040 --> 00:22:26,350
a box with people Thunderbolt we call it

531
00:22:26,350 --> 00:22:31,180
a halibut dugout there's a website you

532
00:22:31,180 --> 00:22:33,040
can do NSA name generator' to pick these

533
00:22:33,040 --> 00:22:37,440
names this is the board this is a

534
00:22:37,440 --> 00:22:39,970
another version of it I have a little

535
00:22:39,970 --> 00:22:42,220
mini PCI version this is a native PCI

536
00:22:42,220 --> 00:22:43,990
version this one's nicer because you can

537
00:22:43,990 --> 00:22:45,880
pop the firmware right off of there if

538
00:22:45,880 --> 00:22:48,130
you break it somehow you can buy these

539
00:22:48,130 --> 00:22:50,770
online I've been pleading with them

540
00:22:50,770 --> 00:22:52,300
because apparently they've been selling

541
00:22:52,300 --> 00:22:54,010
a lot more than they used to in the past

542
00:22:54,010 --> 00:22:57,010
month trying to get them to actually

543
00:22:57,010 --> 00:22:58,570
ship them with a firmware flasher

544
00:22:58,570 --> 00:23:00,280
already but right now you have to flash

545
00:23:00,280 --> 00:23:02,800
the firmware yourself there's github

546
00:23:02,800 --> 00:23:04,780
which has all the software you need to

547
00:23:04,780 --> 00:23:07,330
get up and running it has some flashing

548
00:23:07,330 --> 00:23:10,030
software the high USB stuff I'll show

549
00:23:10,030 --> 00:23:11,170
you in a second

550
00:23:11,170 --> 00:23:16,360
inception modified for this and actually

551
00:23:16,360 --> 00:23:17,440
done this is not all the stuff that's in

552
00:23:17,440 --> 00:23:19,090
the repository this is all the stuff the

553
00:23:19,090 --> 00:23:23,140
software we used preparing so what I did

554
00:23:23,140 --> 00:23:25,030
is made some attack side software so

555
00:23:25,030 --> 00:23:27,940
that the the the victim side software

556
00:23:27,940 --> 00:23:29,850
there is none right you don't

557
00:23:29,850 --> 00:23:31,110
and you software you just plug it in and

558
00:23:31,110 --> 00:23:36,179
you're on the bus you win right so

559
00:23:36,179 --> 00:23:39,360
basically I had to make a little read

560
00:23:39,360 --> 00:23:41,700
and write USB are sorry we read and

561
00:23:41,700 --> 00:23:44,400
write PCIe function which basically

562
00:23:44,400 --> 00:23:47,340
would go and pack out pack together the

563
00:23:47,340 --> 00:23:50,280
packet that says I want to do a DMA read

564
00:23:50,280 --> 00:23:51,990
I want to do read from this address and

565
00:23:51,990 --> 00:23:53,549
this is the number of bytes I want to

566
00:23:53,549 --> 00:23:55,500
read and then I have to read the

567
00:23:55,500 --> 00:23:59,549
response and parse it so Inception is

568
00:23:59,549 --> 00:24:04,250
this pretty cool tool and it lets you

569
00:24:04,250 --> 00:24:06,870
use the firewire attack right you plug

570
00:24:06,870 --> 00:24:08,850
firewire devices in to computers you run

571
00:24:08,850 --> 00:24:10,860
inception and it will go and read

572
00:24:10,860 --> 00:24:13,280
through memory and modify your login

573
00:24:13,280 --> 00:24:15,419
application so that it always returns

574
00:24:15,419 --> 00:24:18,210
true so any password you type in you

575
00:24:18,210 --> 00:24:20,760
just fall through so I modified it to

576
00:24:20,760 --> 00:24:22,950
instead of using the whole layer of fire

577
00:24:22,950 --> 00:24:25,710
wire to do memory accesses I just had it

578
00:24:25,710 --> 00:24:28,169
go straight and call my Python to do

579
00:24:28,169 --> 00:24:30,510
memory reads and writes which is a lot

580
00:24:30,510 --> 00:24:35,220
quicker the way that this is right out

581
00:24:35,220 --> 00:24:37,260
of their their text documentation

582
00:24:37,260 --> 00:24:40,289
basically you have a signature that

583
00:24:40,289 --> 00:24:43,950
you're looking for right and that's the

584
00:24:43,950 --> 00:24:45,539
assembly code that's gonna be at the

585
00:24:45,539 --> 00:24:46,919
very end you've just compared your

586
00:24:46,919 --> 00:24:49,320
password against a hash and yeah it

587
00:24:49,320 --> 00:24:51,600
passes or no it doesn't well there's a

588
00:24:51,600 --> 00:24:53,340
jump instruction somewhere and all you

589
00:24:53,340 --> 00:24:54,480
want to do is change that jump

590
00:24:54,480 --> 00:24:55,860
instruction to a different one - Jeff

591
00:24:55,860 --> 00:25:01,799
question oh sorry so we basically

592
00:25:01,799 --> 00:25:03,659
defined a bunch of patches of where to

593
00:25:03,659 --> 00:25:06,030
look for and what to patch them to every

594
00:25:06,030 --> 00:25:07,409
single version of every single operating

595
00:25:07,409 --> 00:25:08,610
system is a little different but you

596
00:25:08,610 --> 00:25:09,990
just write a script that looks for all

597
00:25:09,990 --> 00:25:12,480
of them it looks like this is the this

598
00:25:12,480 --> 00:25:15,030
is the structure that defines what to

599
00:25:15,030 --> 00:25:18,510
look for and how to fix it so attacking

600
00:25:18,510 --> 00:25:21,780
via PC so let's take a step back and

601
00:25:21,780 --> 00:25:23,789
talk about what PCIe does and the

602
00:25:23,789 --> 00:25:25,230
different types of attacks we can do

603
00:25:25,230 --> 00:25:27,600
this is a list of all the TLPs

604
00:25:27,600 --> 00:25:30,450
transaction level packets that PCI

605
00:25:30,450 --> 00:25:33,929
Express can generate right so Emery MRD

606
00:25:33,929 --> 00:25:36,059
is memory read/write we can read memory

607
00:25:36,059 --> 00:25:38,370
right we can find important values that

608
00:25:38,370 --> 00:25:40,020
known locations we can take to memory

609
00:25:40,020 --> 00:25:42,240
dumps for Nadel later analysis so an

610
00:25:42,240 --> 00:25:43,260
example we can use

611
00:25:43,260 --> 00:25:45,170
volatility have you heard of volatility

612
00:25:45,170 --> 00:25:47,790
it's a pretty cool tool they just

613
00:25:47,790 --> 00:25:49,680
released a book which I just got and

614
00:25:49,680 --> 00:25:51,000
started reading on the plane over here

615
00:25:51,000 --> 00:25:53,250
it's a pretty awesome book on memory

616
00:25:53,250 --> 00:25:56,640
forensics so basically you take on

617
00:25:56,640 --> 00:25:58,620
memory dump and you load it up in

618
00:25:58,620 --> 00:26:00,930
volatility and you know basically it can

619
00:26:00,930 --> 00:26:02,850
give you a you know look at the D

620
00:26:02,850 --> 00:26:05,340
message log you can look at names pids

621
00:26:05,340 --> 00:26:07,560
and you IDs of processes that are found

622
00:26:07,560 --> 00:26:09,450
in memory there's even a feature where

623
00:26:09,450 --> 00:26:11,760
it gives you like a virtual console like

624
00:26:11,760 --> 00:26:13,860
you can navigate around the system so

625
00:26:13,860 --> 00:26:21,150
it's kind of weird and we can extract

626
00:26:21,150 --> 00:26:25,710
machine info and in this system you know

627
00:26:25,710 --> 00:26:27,600
we have a 400 gigabytes of memory and

628
00:26:27,600 --> 00:26:29,700
again we're limited to 32-bit addresses

629
00:26:29,700 --> 00:26:33,540
so only four gigabytes NWR memory right

630
00:26:33,540 --> 00:26:35,790
we can modify known values in location

631
00:26:35,790 --> 00:26:38,280
we can manipulate code inception users

632
00:26:38,280 --> 00:26:41,280
to modify locks lock screen checking may

633
00:26:41,280 --> 00:26:42,570
be really cool to do this to drop the

634
00:26:42,570 --> 00:26:44,850
Metasploit you know payload to you know

635
00:26:44,850 --> 00:26:46,860
find the spot in memory and overwrite

636
00:26:46,860 --> 00:26:48,900
some code and insert your own stuff

637
00:26:48,900 --> 00:26:50,970
right it's a memory you have full access

638
00:26:50,970 --> 00:26:52,680
to it there's no one telling you you

639
00:26:52,680 --> 00:26:56,670
can't do it usually so that just a

640
00:26:56,670 --> 00:26:58,440
couple weeks ago Inception had a new new

641
00:26:58,440 --> 00:26:59,580
release where there was a proof of

642
00:26:59,580 --> 00:27:06,440
concept for win excuse me win 7 sp1

643
00:27:06,440 --> 00:27:09,450
proof of concept for you know Metasploit

644
00:27:09,450 --> 00:27:12,570
plugin which is pretty cool because for

645
00:27:12,570 --> 00:27:13,530
a long time people have been talking

646
00:27:13,530 --> 00:27:14,880
about DMA attacks but all they're doing

647
00:27:14,880 --> 00:27:16,350
is lockscreen bypass there's so much

648
00:27:16,350 --> 00:27:18,240
more fun stuff you can do but I guess

649
00:27:18,240 --> 00:27:19,590
software people like well if I can

650
00:27:19,590 --> 00:27:20,700
bypass the lock screen I can do

651
00:27:20,700 --> 00:27:21,870
everything in software and I don't need

652
00:27:21,870 --> 00:27:23,370
to use our hardware anymore go away

653
00:27:23,370 --> 00:27:30,120
hardware person silly software people so

654
00:27:30,120 --> 00:27:31,860
IO Reid and I are right

655
00:27:31,860 --> 00:27:35,550
io if you ever are familiar with x86

656
00:27:35,550 --> 00:27:37,830
assembly it's like the port committed in

657
00:27:37,830 --> 00:27:39,690
the out commands and you write to a port

658
00:27:39,690 --> 00:27:43,020
and a value really is not used at all

659
00:27:43,020 --> 00:27:44,970
anymore new PCI Express devices are not

660
00:27:44,970 --> 00:27:47,030
supposed to use this but for backward

661
00:27:47,030 --> 00:27:50,250
compatibility older devices can so it's

662
00:27:50,250 --> 00:27:53,010
legacy and legacy translates to not

663
00:27:53,010 --> 00:27:55,110
thoroughly tested recently we haven't

664
00:27:55,110 --> 00:27:56,790
been doing security testing for a

665
00:27:56,790 --> 00:27:59,430
so you know recently means probably was

666
00:27:59,430 --> 00:28:01,530
not tested to the same standard as we do

667
00:28:01,530 --> 00:28:05,240
today configure read and configure right

668
00:28:05,240 --> 00:28:08,310
this is how we would interact with other

669
00:28:08,310 --> 00:28:10,920
PCI devices if we look at that that

670
00:28:10,920 --> 00:28:12,900
structure we had before that we use to

671
00:28:12,900 --> 00:28:16,110
figure out LS PCI output that's what

672
00:28:16,110 --> 00:28:17,610
configure II does it goes through and

673
00:28:17,610 --> 00:28:19,770
parses that it's basically another

674
00:28:19,770 --> 00:28:22,380
separate address space that's giving us

675
00:28:22,380 --> 00:28:26,010
the access to that same information so

676
00:28:26,010 --> 00:28:27,840
you know when you have three different

677
00:28:27,840 --> 00:28:29,970
ways to get to one byte whether it's to

678
00:28:29,970 --> 00:28:31,320
read or to write that's three different

679
00:28:31,320 --> 00:28:33,420
areas you should have some sort of

680
00:28:33,420 --> 00:28:35,190
protection that should be similar right

681
00:28:35,190 --> 00:28:36,720
if your production isn't the same in all

682
00:28:36,720 --> 00:28:38,040
three spots then you just you figure out

683
00:28:38,040 --> 00:28:39,840
where the protection is weakest in the

684
00:28:39,840 --> 00:28:41,270
attack there right

685
00:28:41,270 --> 00:28:44,880
there's also messages they could be

686
00:28:44,880 --> 00:28:46,580
interrupts and vendor defined

687
00:28:46,580 --> 00:28:49,410
configuration messages there are lots of

688
00:28:49,410 --> 00:28:51,270
different types they're not very heavily

689
00:28:51,270 --> 00:28:55,800
used joanna rutkowska published a paper

690
00:28:55,800 --> 00:28:58,200
like two months after Sandy Bridge came

691
00:28:58,200 --> 00:29:00,030
out with a whole bunch of Sandy Bridge

692
00:29:00,030 --> 00:29:02,840
vtd vulnerabilities she found and

693
00:29:02,840 --> 00:29:05,250
basically she went through and she said

694
00:29:05,250 --> 00:29:07,290
oh well I can make a peace expressed if

695
00:29:07,290 --> 00:29:11,070
I send these message signal interrupts

696
00:29:11,070 --> 00:29:13,350
that should not be send about from an

697
00:29:13,350 --> 00:29:15,210
external device that would you know do

698
00:29:15,210 --> 00:29:17,880
something like reset a core in the

699
00:29:17,880 --> 00:29:24,540
middle of execution partly so how about

700
00:29:24,540 --> 00:29:31,080
mitigation is what do we have there we

701
00:29:31,080 --> 00:29:31,440
go

702
00:29:31,440 --> 00:29:34,650
so bus master enable devices are

703
00:29:34,650 --> 00:29:36,960
supposed to have this bit bus master

704
00:29:36,960 --> 00:29:38,250
enable that tells them whether they

705
00:29:38,250 --> 00:29:40,080
ought to be a bus master or not this

706
00:29:40,080 --> 00:29:42,450
mean this is from like old PCI days when

707
00:29:42,450 --> 00:29:44,400
you had eight cards and eight slots and

708
00:29:44,400 --> 00:29:46,940
they have to take turns to be in charge

709
00:29:46,940 --> 00:29:49,440
and you would actually have to tell a

710
00:29:49,440 --> 00:29:51,330
card okay you're allowed to be in charge

711
00:29:51,330 --> 00:29:53,850
now and then it would be able do

712
00:29:53,850 --> 00:29:56,010
whatever we wanted to what's funny about

713
00:29:56,010 --> 00:29:57,510
bus master enable there's a couple

714
00:29:57,510 --> 00:29:59,880
things number one this bit is stored on

715
00:29:59,880 --> 00:30:03,060
the device and tracked by the device and

716
00:30:03,060 --> 00:30:05,550
so the operating system tells the device

717
00:30:05,550 --> 00:30:08,760
okay you're allowed to be a bus master

718
00:30:08,760 --> 00:30:09,510
now

719
00:30:09,510 --> 00:30:11,040
track of that remember that you know

720
00:30:11,040 --> 00:30:13,740
don't do bus mastering and until I told

721
00:30:13,740 --> 00:30:15,120
you you can do it

722
00:30:15,120 --> 00:30:21,090
and this is a LSP CI grepping for a bus

723
00:30:21,090 --> 00:30:23,130
master and actually every single device

724
00:30:23,130 --> 00:30:25,680
in linux gets bus master turned on

725
00:30:25,680 --> 00:30:28,530
automatically all the time doesn't

726
00:30:28,530 --> 00:30:29,670
matter if a driver gets loaded or not

727
00:30:29,670 --> 00:30:31,950
every single device on PCI Express in

728
00:30:31,950 --> 00:30:33,510
Linux has bus mastered able turn on I

729
00:30:33,510 --> 00:30:36,060
didn't check for Windows Mac actually

730
00:30:36,060 --> 00:30:37,760
does not do this which is pretty cool

731
00:30:37,760 --> 00:30:40,490
they actually thought about it

732
00:30:40,490 --> 00:30:42,540
there's also this other one called

733
00:30:42,540 --> 00:30:44,430
access control services I don't know for

734
00:30:44,430 --> 00:30:46,350
sure what is actually causing it when I

735
00:30:46,350 --> 00:30:48,210
find out when I'm on my Mac if I don't

736
00:30:48,210 --> 00:30:51,630
have a valid driver I can't do DMA

737
00:30:51,630 --> 00:30:53,730
access right I'm pretty sure it's

738
00:30:53,730 --> 00:30:54,900
because they're using asus control

739
00:30:54,900 --> 00:30:56,970
services but i am not safe for savvy

740
00:30:56,970 --> 00:30:58,620
enough to go and figure out from the

741
00:30:58,620 --> 00:31:00,000
software side if that's the case and

742
00:31:00,000 --> 00:31:01,590
they haven't had enough time to do it

743
00:31:01,590 --> 00:31:03,840
from the hardware side access control

744
00:31:03,840 --> 00:31:06,900
services basically lets you know let's

745
00:31:06,900 --> 00:31:08,760
all the routing layers of your PCI

746
00:31:08,760 --> 00:31:10,140
hierarchy know what stuff they're

747
00:31:10,140 --> 00:31:11,910
allowed to route it has things like

748
00:31:11,910 --> 00:31:13,920
source validation which makes sure that

749
00:31:13,920 --> 00:31:16,320
you know you are who you say you are in

750
00:31:16,320 --> 00:31:18,770
your request

751
00:31:18,770 --> 00:31:21,870
translation blocking request redirecting

752
00:31:21,870 --> 00:31:24,240
a whole bunch of different things to

753
00:31:24,240 --> 00:31:26,220
make sure that things aren't sending

754
00:31:26,220 --> 00:31:28,350
things that are allowed to send so

755
00:31:28,350 --> 00:31:30,780
blocks things on on a hierarchy level as

756
00:31:30,780 --> 00:31:33,870
opposed to from the device there's an

757
00:31:33,870 --> 00:31:37,500
iommu for example vtd normal

758
00:31:37,500 --> 00:31:39,660
virtualization you have to software

759
00:31:39,660 --> 00:31:41,280
virtual machines and a layer that

760
00:31:41,280 --> 00:31:43,920
isolates you from hardware with an iommu

761
00:31:43,920 --> 00:31:45,450
what you can do is you can have two

762
00:31:45,450 --> 00:31:48,390
software virtual machines and then you

763
00:31:48,390 --> 00:31:50,910
can have two hardware devices and you

764
00:31:50,910 --> 00:31:53,910
can actually directly map these hardware

765
00:31:53,910 --> 00:31:56,310
devices into your virtual machine so you

766
00:31:56,310 --> 00:31:58,050
could have a system with two graphics

767
00:31:58,050 --> 00:32:00,660
cards and two operating systems running

768
00:32:00,660 --> 00:32:02,370
and each operating system has its own

769
00:32:02,370 --> 00:32:04,320
graphics card and the graphics card has

770
00:32:04,320 --> 00:32:06,060
its own operating system and no one is

771
00:32:06,060 --> 00:32:07,590
the wiser to anything else going on

772
00:32:07,590 --> 00:32:09,150
because it's all handled and these your

773
00:32:09,150 --> 00:32:14,190
intermediate layers so what can we do

774
00:32:14,190 --> 00:32:19,110
about all this stuff so first we when we

775
00:32:19,110 --> 00:32:20,370
have our own hardware that we're

776
00:32:20,370 --> 00:32:21,960
defining we can do whatever we want we

777
00:32:21,960 --> 00:32:22,290
can

778
00:32:22,290 --> 00:32:24,240
say whatever we want right so we have

779
00:32:24,240 --> 00:32:26,070
our own vendor ID and Product ID right

780
00:32:26,070 --> 00:32:28,560
in a tent that identifies our device to

781
00:32:28,560 --> 00:32:29,370
the operating system the operating

782
00:32:29,370 --> 00:32:31,080
system can choose which driver to load

783
00:32:31,080 --> 00:32:33,720
right once it does that it configures

784
00:32:33,720 --> 00:32:35,160
access control services that can show

785
00:32:35,160 --> 00:32:36,840
configures bus master enable and other

786
00:32:36,840 --> 00:32:39,690
things and then it loads a driver right

787
00:32:39,690 --> 00:32:43,050
so all we need to do to get a driver to

788
00:32:43,050 --> 00:32:45,150
get ourselves access to the bus is just

789
00:32:45,150 --> 00:32:46,890
look like something that the operating

790
00:32:46,890 --> 00:32:48,720
system trusts right don't even have to

791
00:32:48,720 --> 00:32:50,910
worry about the other layers yet maybe

792
00:32:50,910 --> 00:32:52,680
they'll fix this

793
00:32:52,680 --> 00:32:54,720
so default drivers some drivers are

794
00:32:54,720 --> 00:32:56,910
class drivers like I mentioned USB has

795
00:32:56,910 --> 00:32:58,230
different classes that have generic

796
00:32:58,230 --> 00:33:01,410
drivers some device specific drivers

797
00:33:01,410 --> 00:33:03,750
might be installed by default Mac OS has

798
00:33:03,750 --> 00:33:05,880
a ton the drivers for all hardware that

799
00:33:05,880 --> 00:33:08,120
Mac has ever at Apple's ever shipped

800
00:33:08,120 --> 00:33:10,470
what's great those drivers contain bugs

801
00:33:10,470 --> 00:33:13,140
and think about it like you you know you

802
00:33:13,140 --> 00:33:14,640
have you've heard of the face dancer

803
00:33:14,640 --> 00:33:18,750
right it's a USB emulating type layer

804
00:33:18,750 --> 00:33:21,930
thing and you can you can make hardware

805
00:33:21,930 --> 00:33:23,460
that's not really Hardware and making

806
00:33:23,460 --> 00:33:25,110
programmable script well whoa you can

807
00:33:25,110 --> 00:33:26,760
kind of almost do the same thing for PCI

808
00:33:26,760 --> 00:33:30,750
Express devices and you know the barrier

809
00:33:30,750 --> 00:33:32,670
entry is a lot lower for USB than is for

810
00:33:32,670 --> 00:33:34,620
PCI Express and there's been tons of

811
00:33:34,620 --> 00:33:36,060
stuff found in the past year year and a

812
00:33:36,060 --> 00:33:39,180
half using the face dancer on on USB so

813
00:33:39,180 --> 00:33:41,670
I think there's plenty of room for for

814
00:33:41,670 --> 00:33:43,890
for this kind of bugs on PCI Express as

815
00:33:43,890 --> 00:33:49,140
well another nice thing to know is that

816
00:33:49,140 --> 00:33:51,480
early boot the iommu is not configured

817
00:33:51,480 --> 00:33:52,800
yet right you turn on the system you

818
00:33:52,800 --> 00:33:55,290
don't have virtualization on neither is

819
00:33:55,290 --> 00:33:57,630
much else right it'd be really cool if

820
00:33:57,630 --> 00:33:59,880
volatility added support for EFI like an

821
00:33:59,880 --> 00:34:01,710
empty shell perhaps someone already has

822
00:34:01,710 --> 00:34:03,210
done that I just didn't look hard enough

823
00:34:03,210 --> 00:34:05,460
but that'd be really cool or the early

824
00:34:05,460 --> 00:34:06,660
Mac you know pretty boot environment

825
00:34:06,660 --> 00:34:08,969
where it asks for your password to start

826
00:34:08,969 --> 00:34:10,710
decrypting your disk because at that

827
00:34:10,710 --> 00:34:13,380
point in time you don't have any I mean

828
00:34:13,380 --> 00:34:14,760
you have very little code that's been

829
00:34:14,760 --> 00:34:17,690
loaded into memory it's like very little

830
00:34:17,690 --> 00:34:22,020
what's the word for random stuff entropy

831
00:34:22,020 --> 00:34:24,810
in the system right it it's a fun time

832
00:34:24,810 --> 00:34:28,380
to do fun things the other thing you

833
00:34:28,380 --> 00:34:31,590
have is option ROM and efi drivers some

834
00:34:31,590 --> 00:34:33,270
devices actually carry firmware that

835
00:34:33,270 --> 00:34:35,460
will get run on the host pc at early

836
00:34:35,460 --> 00:34:39,750
boot they're actually a few systems that

837
00:34:39,750 --> 00:34:41,070
block this but the reason they do that

838
00:34:41,070 --> 00:34:43,409
is more for anti-competitive reasons

839
00:34:43,409 --> 00:34:46,469
than security so like Dell and HP block

840
00:34:46,469 --> 00:34:48,150
you from putting your external graphics

841
00:34:48,150 --> 00:34:50,760
cards into systems because they don't

842
00:34:50,760 --> 00:34:52,889
want you to like do that on the low end

843
00:34:52,889 --> 00:34:54,270
systems they want you to buy a high end

844
00:34:54,270 --> 00:34:55,889
system and stuff like that our servers

845
00:34:55,889 --> 00:34:56,969
is what it is they don't want your byte

846
00:34:56,969 --> 00:34:58,800
server they want you to buy their

847
00:34:58,800 --> 00:35:03,480
Alienware laptop and desktop instead but

848
00:35:03,480 --> 00:35:05,900
you know you block the option ROM and

849
00:35:05,900 --> 00:35:09,330
you know you don't get your hardware to

850
00:35:09,330 --> 00:35:11,160
run whatever it wants Ederle boot before

851
00:35:11,160 --> 00:35:12,950
most of the security has been enabled

852
00:35:12,950 --> 00:35:15,240
and then there's just plain old breaking

853
00:35:15,240 --> 00:35:18,450
rules there's a request your ID it's

854
00:35:18,450 --> 00:35:19,920
kind of a think of a network terms you

855
00:35:19,920 --> 00:35:21,990
know you use some you know a packet and

856
00:35:21,990 --> 00:35:23,670
it tells you what your IP address is so

857
00:35:23,670 --> 00:35:25,440
it could send the response well what if

858
00:35:25,440 --> 00:35:26,790
you put something else in that response

859
00:35:26,790 --> 00:35:28,020
you know you won't get the response

860
00:35:28,020 --> 00:35:31,830
something else will well if you send a

861
00:35:31,830 --> 00:35:33,480
posted transaction or subtraction a

862
00:35:33,480 --> 00:35:34,770
transaction that doesn't require a

863
00:35:34,770 --> 00:35:36,630
response right if you just do a write to

864
00:35:36,630 --> 00:35:37,800
memory if you know where you're trying

865
00:35:37,800 --> 00:35:39,060
to go and you just do a write to memory

866
00:35:39,060 --> 00:35:40,920
and you pretend you're someone else will

867
00:35:40,920 --> 00:35:47,880
it get by maybe well timed spoofed

868
00:35:47,880 --> 00:35:49,620
request your ID for our non posted

869
00:35:49,620 --> 00:35:51,840
transaction let's say you know another

870
00:35:51,840 --> 00:35:53,700
device in the system is waiting for data

871
00:35:53,700 --> 00:35:56,220
if you can do a read to another spot in

872
00:35:56,220 --> 00:35:58,500
memory and get the response to go there

873
00:35:58,500 --> 00:36:01,800
you could do some fun stuff there's also

874
00:36:01,800 --> 00:36:04,260
this cool feature address translation

875
00:36:04,260 --> 00:36:07,500
services it's it's for performing

876
00:36:07,500 --> 00:36:09,990
performance on virtualization and I

877
00:36:09,990 --> 00:36:13,380
better hurry up and get moving so you

878
00:36:13,380 --> 00:36:14,730
can you can set this bit that says

879
00:36:14,730 --> 00:36:16,530
translated requests which means you

880
00:36:16,530 --> 00:36:20,580
already went and requested your

881
00:36:20,580 --> 00:36:22,290
translated address so you gave a virtual

882
00:36:22,290 --> 00:36:23,880
address that translated for you gave you

883
00:36:23,880 --> 00:36:25,290
the response and the next time you you

884
00:36:25,290 --> 00:36:26,640
go and you directly access that

885
00:36:26,640 --> 00:36:28,530
translated address which lets you bypass

886
00:36:28,530 --> 00:36:32,250
the iommu right the PCI spec says you're

887
00:36:32,250 --> 00:36:34,200
not supposed to ever be able to access

888
00:36:34,200 --> 00:36:36,720
register that value except from a

889
00:36:36,720 --> 00:36:40,260
response from a request translated

890
00:36:40,260 --> 00:36:42,660
response but when we have an FPGA we

891
00:36:42,660 --> 00:36:44,790
don't have to worry about rules right or

892
00:36:44,790 --> 00:36:47,670
specs or any of that stuff like the

893
00:36:47,670 --> 00:36:51,329
other PCI - no one follows that right so

894
00:36:51,329 --> 00:36:52,490
misconfigurations

895
00:36:52,490 --> 00:36:54,930
everything is MMI oh now a memory mapped

896
00:36:54,930 --> 00:36:58,859
i/o and you just need to have some

897
00:36:58,859 --> 00:37:01,800
memory protections but remember we also

898
00:37:01,800 --> 00:37:04,380
have config and i/o operations but we

899
00:37:04,380 --> 00:37:09,540
don't use them all that much so what

900
00:37:09,540 --> 00:37:12,300
about a hypervisor right if you have a

901
00:37:12,300 --> 00:37:14,040
computer that's protecting you with vtd

902
00:37:14,040 --> 00:37:17,250
and you install VMware and it uses vtd

903
00:37:17,250 --> 00:37:19,200
is it gonna blow away what your

904
00:37:19,200 --> 00:37:21,510
operating system is already done or is

905
00:37:21,510 --> 00:37:23,099
it going to collide with it at all

906
00:37:23,099 --> 00:37:26,270
good to to poke around and figure out

907
00:37:26,270 --> 00:37:29,910
oops I forgot to take that off putting

908
00:37:29,910 --> 00:37:31,380
it all together right so we've got

909
00:37:31,380 --> 00:37:32,790
Thunderbolt are you familiar with

910
00:37:32,790 --> 00:37:36,540
Thunderbolt yeah basically you plug this

911
00:37:36,540 --> 00:37:39,660
cable in and it makes makes it's it

912
00:37:39,660 --> 00:37:42,950
takes carries PCI Express as well as

913
00:37:42,950 --> 00:37:45,960
display to work and there's some muxing

914
00:37:45,960 --> 00:37:47,579
that happens and switching and it's all

915
00:37:47,579 --> 00:37:50,400
on the fly and we talked about halibut

916
00:37:50,400 --> 00:37:52,230
dug out this is a smaller version right

917
00:37:52,230 --> 00:37:54,329
basically we take my little PCI Express

918
00:37:54,329 --> 00:37:55,589
attack device put it inside a

919
00:37:55,589 --> 00:37:58,859
thunderbolt enclosure right and you

920
00:37:58,859 --> 00:38:00,359
notice the Great Scott I just sticker

921
00:38:00,359 --> 00:38:02,790
because my kossmann when he found out I

922
00:38:02,790 --> 00:38:04,560
was talking thinking about this stuff

923
00:38:04,560 --> 00:38:06,210
he's like oh you should work on that

924
00:38:06,210 --> 00:38:07,770
oh my god I don't I don't have enough

925
00:38:07,770 --> 00:38:09,150
times I know you really should work on

926
00:38:09,150 --> 00:38:10,349
that here I'll send you some hardware

927
00:38:10,349 --> 00:38:12,060
it's like okay I'll work on it so he

928
00:38:12,060 --> 00:38:15,930
sent me this box so sorry - previous

929
00:38:15,930 --> 00:38:18,480
track - speakers right we've got this

930
00:38:18,480 --> 00:38:20,069
computer I'm presenting from right I've

931
00:38:20,069 --> 00:38:24,300
plugged into the the DisplayPort to VGA

932
00:38:24,300 --> 00:38:26,000
adapter right you guys see that

933
00:38:26,000 --> 00:38:31,290
and that goes oh oh where does this go

934
00:38:31,290 --> 00:38:35,670
oh look look what we have up here so

935
00:38:35,670 --> 00:38:37,680
here is halibut dug out here's my little

936
00:38:37,680 --> 00:38:40,170
tack card here is the VGA cable that's

937
00:38:40,170 --> 00:38:41,400
going up on the screen right there

938
00:38:41,400 --> 00:38:44,160
so if you say like oh yeah I'm not dumb

939
00:38:44,160 --> 00:38:46,480
enough to put anything in my

940
00:38:46,480 --> 00:38:48,970
my Thunderbolt port well do you have a

941
00:38:48,970 --> 00:38:51,100
present because that's your Thunderbolt

942
00:38:51,100 --> 00:38:55,090
port so right now that's hooked up to

943
00:38:55,090 --> 00:38:57,610
here and I'm over here on this computer

944
00:38:57,610 --> 00:39:00,010
and I can I can read the memory on that

945
00:39:00,010 --> 00:39:03,580
computer which is the fun stuff so if

946
00:39:03,580 --> 00:39:04,660
you wanted to put one together you

947
00:39:04,660 --> 00:39:06,340
basically get the Thunderbolt cable a

948
00:39:06,340 --> 00:39:09,580
modular telephone jack a housing a

949
00:39:09,580 --> 00:39:11,620
ferrite bead for just because it looks

950
00:39:11,620 --> 00:39:13,390
cooler with the ferrite bead and some

951
00:39:13,390 --> 00:39:16,390
heat shrink tubing right you take it

952
00:39:16,390 --> 00:39:19,150
apart thread the cable through right and

953
00:39:19,150 --> 00:39:21,100
then you have this little housing you

954
00:39:21,100 --> 00:39:23,170
screw together on there and bam you've

955
00:39:23,170 --> 00:39:25,660
got something that looks a lot like the

956
00:39:25,660 --> 00:39:27,490
Apple one and you know you see that

957
00:39:27,490 --> 00:39:29,020
off-brand ones and the off Brad ones are

958
00:39:29,020 --> 00:39:31,060
kind of clunky and I was like I wanted

959
00:39:31,060 --> 00:39:32,710
to come up with like a crapple logo or

960
00:39:32,710 --> 00:39:34,390
something that I could put on there but

961
00:39:34,390 --> 00:39:37,540
I didn't get it done in time and it does

962
00:39:37,540 --> 00:39:38,950
kind of look hokey because the bottom is

963
00:39:38,950 --> 00:39:42,490
not obviously genuine but if you wanted

964
00:39:42,490 --> 00:39:43,510
to you can make a pretty convincing

965
00:39:43,510 --> 00:39:46,210
cable because really how often you have

966
00:39:46,210 --> 00:39:47,890
the right cable to plug in it's like oh

967
00:39:47,890 --> 00:39:51,270
I forgot my adapter I have a Mac sorry

968
00:39:51,270 --> 00:39:54,820
whatever I just wish everything had like

969
00:39:54,820 --> 00:39:58,060
real ports on it I think this has a mini

970
00:39:58,060 --> 00:40:01,330
VGA ever heard of mini VGA and neither

971
00:40:01,330 --> 00:40:06,400
have I I haven't lost the adapter yet so

972
00:40:06,400 --> 00:40:09,940
yeah I mean pay no attention to the men

973
00:40:09,940 --> 00:40:11,050
in the middle behind the curtain

974
00:40:11,050 --> 00:40:12,550
whatever

975
00:40:12,550 --> 00:40:16,390
that's another slide I stole basically

976
00:40:16,390 --> 00:40:20,500
the snare and Sam found that basically

977
00:40:20,500 --> 00:40:22,780
newer systems with newer operating

978
00:40:22,780 --> 00:40:25,810
systems on a Mac are not cannot be owned

979
00:40:25,810 --> 00:40:28,450
with current means right

980
00:40:28,450 --> 00:40:31,090
because vtd is enabled and blocks you

981
00:40:31,090 --> 00:40:34,420
from plugging something in and doing

982
00:40:34,420 --> 00:40:39,670
stuff so they also talked about so maybe

983
00:40:39,670 --> 00:40:40,840
we should make the kit a little bit

984
00:40:40,840 --> 00:40:45,040
smaller so hey smaller is that it's not

985
00:40:45,040 --> 00:40:48,720
as fully featured as yours what

986
00:40:49,050 --> 00:40:51,780
well yeah that's that's a software

987
00:40:51,780 --> 00:40:56,610
problem yeah so bypass vtd that'd be

988
00:40:56,610 --> 00:40:58,440
really cool and see if we can do without

989
00:40:58,440 --> 00:41:00,150
imitating a device so what about

990
00:41:00,150 --> 00:41:02,880
bypassing VT on a Macbook so VP TD is

991
00:41:02,880 --> 00:41:06,060
off at boot and reset and Broadcom

992
00:41:06,060 --> 00:41:10,580
Ethernet drivers crash this hello crap I

993
00:41:10,580 --> 00:41:12,840
was gonna actually do that but in order

994
00:41:12,840 --> 00:41:14,520
to do that I have to unplug the display

995
00:41:14,520 --> 00:41:17,450
so I can't actually show you doing that

996
00:41:17,450 --> 00:41:21,000
sorry so basically if I plug this in

997
00:41:21,000 --> 00:41:24,180
here right it'll try and load a

998
00:41:24,180 --> 00:41:28,440
thunderbolt even it sorry Broadcom

999
00:41:28,440 --> 00:41:30,930
Ethernet driver on to this this is not a

1000
00:41:30,930 --> 00:41:33,780
Broadcom ethernet device so something

1001
00:41:33,780 --> 00:41:36,080
will crash someone with some software

1002
00:41:36,080 --> 00:41:37,860
expertise would probably find something

1003
00:41:37,860 --> 00:41:40,140
really cool in that all I found is that

1004
00:41:40,140 --> 00:41:42,210
it reboots the system when it reboots

1005
00:41:42,210 --> 00:41:44,520
the system it comes up to the login

1006
00:41:44,520 --> 00:41:46,680
screen enter your password right enter

1007
00:41:46,680 --> 00:41:48,390
your full disk encryption password at

1008
00:41:48,390 --> 00:41:50,850
that point in time vtd is off what's

1009
00:41:50,850 --> 00:41:53,010
also convenient is that at that point in

1010
00:41:53,010 --> 00:41:56,220
time there are drivers for the same card

1011
00:41:56,220 --> 00:41:57,480
so the same card that

1012
00:41:57,480 --> 00:42:00,630
Broadcom adapter is enabled and has full

1013
00:42:00,630 --> 00:42:03,810
access to memory and again I haven't

1014
00:42:03,810 --> 00:42:07,260
gone I have it ya know POC yeah but

1015
00:42:07,260 --> 00:42:08,280
don't worry I only have us a couple

1016
00:42:08,280 --> 00:42:12,270
slides left so I'll GTFO soon can we do

1017
00:42:12,270 --> 00:42:14,670
it without imitating a device some PCIe

1018
00:42:14,670 --> 00:42:17,130
switches have this transparent mode that

1019
00:42:17,130 --> 00:42:17,850
they can go in

1020
00:42:17,850 --> 00:42:23,010
so some PCI switchers also have this

1021
00:42:23,010 --> 00:42:24,780
thing called TLP injection transaction

1022
00:42:24,780 --> 00:42:26,580
level packet injection basically you can

1023
00:42:26,580 --> 00:42:31,920
have an actual device then this switch

1024
00:42:31,920 --> 00:42:34,110
and then the rest of your system and

1025
00:42:34,110 --> 00:42:35,520
make it look like you don't have a

1026
00:42:35,520 --> 00:42:37,320
switch there and at the same time you

1027
00:42:37,320 --> 00:42:39,000
can also modify things that go through

1028
00:42:39,000 --> 00:42:41,010
that switch and at the same time you can

1029
00:42:41,010 --> 00:42:44,220
also inject packets to do extra read and

1030
00:42:44,220 --> 00:42:46,290
write stuff so it'd be a nice way to you

1031
00:42:46,290 --> 00:42:47,580
know when wouldn't be cool if we could

1032
00:42:47,580 --> 00:42:49,170
take a generating device and build it on

1033
00:42:49,170 --> 00:42:51,150
or maybe build another cool cable that

1034
00:42:51,150 --> 00:42:53,940
has like this PCI Express man in the

1035
00:42:53,940 --> 00:42:55,890
middle that'd be cool but again I don't

1036
00:42:55,890 --> 00:42:59,580
have a PSC here either and some other

1037
00:42:59,580 --> 00:43:01,920
cool enhancements greater than 64

1038
00:43:01,920 --> 00:43:03,299
dma would be great but that's not

1039
00:43:03,299 --> 00:43:04,619
something that this ships that we're

1040
00:43:04,619 --> 00:43:07,140
gonna do and I don't I don't get the

1041
00:43:07,140 --> 00:43:08,880
feeling that they're in any rush to

1042
00:43:08,880 --> 00:43:10,980
update this ship for my needs

1043
00:43:10,980 --> 00:43:15,359
unfortunately and full control over the

1044
00:43:15,359 --> 00:43:16,859
TLP header would let us do things like

1045
00:43:16,859 --> 00:43:18,599
spoofing the rest request her ID and

1046
00:43:18,599 --> 00:43:20,970
testing all those cool reserved bits I

1047
00:43:20,970 --> 00:43:22,200
mentioned joanna rutkowska

1048
00:43:22,200 --> 00:43:23,880
she basically found there were some

1049
00:43:23,880 --> 00:43:26,640
reserved bits and when she set those

1050
00:43:26,640 --> 00:43:28,170
reserved bits they were actually passed

1051
00:43:28,170 --> 00:43:31,170
through to the i/o a pic which is what

1052
00:43:31,170 --> 00:43:33,599
manages all your interrupts on your

1053
00:43:33,599 --> 00:43:35,609
system and that would allow her as a

1054
00:43:35,609 --> 00:43:38,250
hardware a PCI Express device to access

1055
00:43:38,250 --> 00:43:40,349
a bunch of interrupts that should only

1056
00:43:40,349 --> 00:43:44,069
be accessed by the core of the CPU so

1057
00:43:44,069 --> 00:43:46,170
enough unproven concept time for me to

1058
00:43:46,170 --> 00:43:49,460
judge dgfo so

