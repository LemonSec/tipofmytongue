1
00:00:15,679 --> 00:00:17,039
great thank you all for being here and

2
00:00:17,039 --> 00:00:18,720
as mentioned first slot slowed up

3
00:00:18,720 --> 00:00:20,240
straight after lunch it's uh

4
00:00:20,240 --> 00:00:21,760
good to see so many faces in the

5
00:00:21,760 --> 00:00:23,359
audience except at the back

6
00:00:23,359 --> 00:00:25,519
anyway i'm here to talk to you today

7
00:00:25,519 --> 00:00:27,599
about mad monster standards

8
00:00:27,599 --> 00:00:30,560
and my exploration of web authen so

9
00:00:30,560 --> 00:00:32,159
first up who am i

10
00:00:32,159 --> 00:00:34,000
my name is william brown i'm a senior

11
00:00:34,000 --> 00:00:36,320
software engineer at souza labs

12
00:00:36,320 --> 00:00:38,320
in my day job i professionally developed

13
00:00:38,320 --> 00:00:40,079
the 389 directory server which is one of

14
00:00:40,079 --> 00:00:42,160
the major open source ldap servers which

15
00:00:42,160 --> 00:00:42,640
is

16
00:00:42,640 --> 00:00:45,440
more better known as part of free ipa uh

17
00:00:45,440 --> 00:00:47,039
sold by red hat other other companies

18
00:00:47,039 --> 00:00:48,480
such as souza as well

19
00:00:48,480 --> 00:00:50,640
uh i'm creative of another other

20
00:00:50,640 --> 00:00:52,320
identity projects and i'm the author of

21
00:00:52,320 --> 00:00:54,320
the web authent library for rust

22
00:00:54,320 --> 00:00:55,920
uh and for anyone who is watching this

23
00:00:55,920 --> 00:00:58,079
stream online i'm based in brisbane

24
00:00:58,079 --> 00:00:59,760
australia which means that my time zone

25
00:00:59,760 --> 00:01:01,760
is uc 10. so the best way to get in

26
00:01:01,760 --> 00:01:02,960
contact with me if you have any

27
00:01:02,960 --> 00:01:04,239
questions after this

28
00:01:04,239 --> 00:01:08,080
is my email w brown souza.de

29
00:01:08,080 --> 00:01:09,840
yes i'm originally from south australia

30
00:01:09,840 --> 00:01:11,119
that's why iced coffee is the favorite

31
00:01:11,119 --> 00:01:13,040
drink well spotted in the front audience

32
00:01:13,040 --> 00:01:14,799
the heckling division is already going

33
00:01:14,799 --> 00:01:16,560
off

34
00:01:16,560 --> 00:01:18,400
all of us are used to probably seeing a

35
00:01:18,400 --> 00:01:19,759
screen that looks like this

36
00:01:19,759 --> 00:01:21,600
no i did not just lock my laptop that's

37
00:01:21,600 --> 00:01:23,280
been asked

38
00:01:23,280 --> 00:01:24,640
we're all used to this which is a

39
00:01:24,640 --> 00:01:26,720
username and a password field

40
00:01:26,720 --> 00:01:28,240
and this is how many of us have

41
00:01:28,240 --> 00:01:30,640
authenticated and identified ourselves

42
00:01:30,640 --> 00:01:32,640
to our personal machines our corporate

43
00:01:32,640 --> 00:01:34,960
machines and many other things

44
00:01:34,960 --> 00:01:37,360
the username and password was first used

45
00:01:37,360 --> 00:01:40,479
in a computer system in 1961

46
00:01:40,479 --> 00:01:43,280
in mit's compatible time sharing system

47
00:01:43,280 --> 00:01:44,240
and since then

48
00:01:44,240 --> 00:01:46,720
the password really hasn't evolved much

49
00:01:46,720 --> 00:01:48,000
we've certainly got a lot better in

50
00:01:48,000 --> 00:01:49,600
terms of asking things like about

51
00:01:49,600 --> 00:01:52,079
password quality and length

52
00:01:52,079 --> 00:01:53,520
but it hasn't really changed much as a

53
00:01:53,520 --> 00:01:55,600
technology

54
00:01:55,600 --> 00:01:57,040
and this is really interesting because

55
00:01:57,040 --> 00:01:58,960
the attacks against passwords that we

56
00:01:58,960 --> 00:01:59,759
see today

57
00:01:59,759 --> 00:02:03,040
have evolved so much and as alex vinet

58
00:02:03,040 --> 00:02:04,799
from the microsoft azure active

59
00:02:04,799 --> 00:02:05,600
directory team

60
00:02:05,600 --> 00:02:07,680
in their really excellent blog post your

61
00:02:07,680 --> 00:02:10,080
password doesn't matter has documented

62
00:02:10,080 --> 00:02:12,000
these days even the rules that we have

63
00:02:12,000 --> 00:02:14,000
around your password quality

64
00:02:14,000 --> 00:02:16,400
do not prevent an attacker from being

65
00:02:16,400 --> 00:02:18,160
able to gain access to your systems

66
00:02:18,160 --> 00:02:19,920
because in many of these attacks

67
00:02:19,920 --> 00:02:22,080
the exact content of that password is

68
00:02:22,080 --> 00:02:23,280
known and so

69
00:02:23,280 --> 00:02:25,120
really you know passwords are starting

70
00:02:25,120 --> 00:02:26,720
to kind of lose

71
00:02:26,720 --> 00:02:28,800
out in much more modern security

72
00:02:28,800 --> 00:02:30,640
scenarios

73
00:02:30,640 --> 00:02:32,800
so this is where we've seen the rise of

74
00:02:32,800 --> 00:02:34,879
multi-factor authentication

75
00:02:34,879 --> 00:02:37,840
so from about 2000 with rsa secure id

76
00:02:37,840 --> 00:02:38,560
tokens

77
00:02:38,560 --> 00:02:40,400
and a bit more publicly available with

78
00:02:40,400 --> 00:02:43,040
things like trtp and http

79
00:02:43,040 --> 00:02:45,920
being developed in 2011 uh such as you

80
00:02:45,920 --> 00:02:48,080
know free rtp app and things

81
00:02:48,080 --> 00:02:50,239
you know these tokens print out a six

82
00:02:50,239 --> 00:02:52,319
digit code which changes about every 60

83
00:02:52,319 --> 00:02:53,280
seconds or so

84
00:02:53,280 --> 00:02:54,640
and the the counter is continually

85
00:02:54,640 --> 00:02:57,200
advancing and changing which helps to

86
00:02:57,200 --> 00:02:59,120
add a source of entropy so that even if

87
00:02:59,120 --> 00:03:00,480
you know the password

88
00:03:00,480 --> 00:03:02,800
you you also need this second dynamic

89
00:03:02,800 --> 00:03:03,599
factor

90
00:03:03,599 --> 00:03:06,879
which is always changing to authenticate

91
00:03:06,879 --> 00:03:09,680
and this and this really helps with many

92
00:03:09,680 --> 00:03:12,080
of the attacks that we have today

93
00:03:12,080 --> 00:03:14,080
it really helps in terms of credential

94
00:03:14,080 --> 00:03:15,200
stuffing or

95
00:03:15,200 --> 00:03:17,599
breach password replays and things like

96
00:03:17,599 --> 00:03:19,599
that but it still doesn't prevent

97
00:03:19,599 --> 00:03:22,720
everything phishing is still a major

98
00:03:22,720 --> 00:03:24,799
source of compromise in organizations

99
00:03:24,799 --> 00:03:26,319
and especially now with real-time

100
00:03:26,319 --> 00:03:27,680
fishing capabilities

101
00:03:27,680 --> 00:03:30,560
even totps and other tokens like this

102
00:03:30,560 --> 00:03:32,239
can still be fished and you know

103
00:03:32,239 --> 00:03:34,640
accounts can still be compromised

104
00:03:34,640 --> 00:03:36,239
so we really want to get our

105
00:03:36,239 --> 00:03:38,000
authentication to a point

106
00:03:38,000 --> 00:03:39,840
where none of these attacks are possible

107
00:03:39,840 --> 00:03:41,200
and these things uh

108
00:03:41,200 --> 00:03:42,879
you know we close off a lot of these

109
00:03:42,879 --> 00:03:44,720
attacks

110
00:03:44,720 --> 00:03:47,040
what we really want is cryptographic

111
00:03:47,040 --> 00:03:48,319
authentication

112
00:03:48,319 --> 00:03:51,519
this is where we have a identity

113
00:03:51,519 --> 00:03:54,000
who has a private key and some piece of

114
00:03:54,000 --> 00:03:54,799
data

115
00:03:54,799 --> 00:03:55,920
and the service they want to

116
00:03:55,920 --> 00:03:58,400
authenticate which holds the public key

117
00:03:58,400 --> 00:04:00,560
given the private key and that data we

118
00:04:00,560 --> 00:04:02,480
can create a signature through a signing

119
00:04:02,480 --> 00:04:04,080
operation

120
00:04:04,080 --> 00:04:06,239
given the signature and that same data

121
00:04:06,239 --> 00:04:07,280
the public key can

122
00:04:07,280 --> 00:04:09,840
verify that only that private key could

123
00:04:09,840 --> 00:04:11,120
possibly have made

124
00:04:11,120 --> 00:04:14,560
that signature in reverse just knowing

125
00:04:14,560 --> 00:04:15,599
the public key

126
00:04:15,599 --> 00:04:18,798
is not sufficient in order to recreate

127
00:04:18,798 --> 00:04:19,680
that signature

128
00:04:19,680 --> 00:04:22,560
even when you have that data what would

129
00:04:22,560 --> 00:04:23,759
be even better

130
00:04:23,759 --> 00:04:26,560
is if this private key was in a secure

131
00:04:26,560 --> 00:04:28,800
tamper-proof environment which could not

132
00:04:28,800 --> 00:04:31,120
have that key disclosed removed or

133
00:04:31,120 --> 00:04:32,080
compromised

134
00:04:32,080 --> 00:04:34,320
in any way from our machines even if the

135
00:04:34,320 --> 00:04:37,040
hardware is somehow compromised

136
00:04:37,040 --> 00:04:38,960
thankfully we live in the future we

137
00:04:38,960 --> 00:04:40,639
already have these keys

138
00:04:40,639 --> 00:04:42,960
we've had these since 2013 with apple's

139
00:04:42,960 --> 00:04:44,080
touch id

140
00:04:44,080 --> 00:04:46,800
u2f from about 2014 through things like

141
00:04:46,800 --> 00:04:47,759
yuba keys

142
00:04:47,759 --> 00:04:49,840
and also through the standards that

143
00:04:49,840 --> 00:04:51,680
microsoft has been advancing with their

144
00:04:51,680 --> 00:04:52,160
um

145
00:04:52,160 --> 00:04:54,320
windows 10 hardware guidelines many more

146
00:04:54,320 --> 00:04:57,199
laptops have tpms in them especially

147
00:04:57,199 --> 00:04:59,199
since things like windows hello from

148
00:04:59,199 --> 00:05:01,520
2019 with their enterprise support

149
00:05:01,520 --> 00:05:03,120
so we're really starting to see that all

150
00:05:03,120 --> 00:05:04,639
of these different types of

151
00:05:04,639 --> 00:05:06,639
cryptographic hardware exist

152
00:05:06,639 --> 00:05:08,880
but for us to integrate with all of

153
00:05:08,880 --> 00:05:10,320
these different types of cryptographic

154
00:05:10,320 --> 00:05:12,080
hardware is very difficult and that's a

155
00:05:12,080 --> 00:05:14,000
lot of developer time to understand

156
00:05:14,000 --> 00:05:16,240
and interact with all of these this is

157
00:05:16,240 --> 00:05:18,320
where web authent comes in

158
00:05:18,320 --> 00:05:20,160
web authent is considered the future of

159
00:05:20,160 --> 00:05:21,520
authentication

160
00:05:21,520 --> 00:05:23,520
but companies like apple google

161
00:05:23,520 --> 00:05:25,520
microsoft and many more

162
00:05:25,520 --> 00:05:27,280
all of these companies are supporting

163
00:05:27,280 --> 00:05:28,479
the development and the progress as

164
00:05:28,479 --> 00:05:29,199
standard

165
00:05:29,199 --> 00:05:30,800
and the way this works is that we have a

166
00:05:30,800 --> 00:05:32,560
client which is uh

167
00:05:32,560 --> 00:05:34,000
more commonly known as a browser or a

168
00:05:34,000 --> 00:05:36,160
user agent which communicates to a web

169
00:05:36,160 --> 00:05:36,639
server

170
00:05:36,639 --> 00:05:38,720
or auth provider and which we are going

171
00:05:38,720 --> 00:05:40,240
to call a relying party as par

172
00:05:40,240 --> 00:05:43,440
of the the standard via web authen

173
00:05:43,440 --> 00:05:44,880
and then this allows the client to

174
00:05:44,880 --> 00:05:47,199
negotiate over various protocols

175
00:05:47,199 --> 00:05:48,960
to various classes of hardware

176
00:05:48,960 --> 00:05:50,800
authenticators to perform these

177
00:05:50,800 --> 00:05:52,880
cryptographic operations

178
00:05:52,880 --> 00:05:54,639
so let's show you what that user

179
00:05:54,639 --> 00:05:56,960
experience is going to look like

180
00:05:56,960 --> 00:05:59,199
so on the left we have a fully updated

181
00:05:59,199 --> 00:06:00,400
new version of chrome

182
00:06:00,400 --> 00:06:02,960
on the right we have the yubikey manager

183
00:06:02,960 --> 00:06:04,479
so what we can see is that when we

184
00:06:04,479 --> 00:06:06,080
insert the yubikey here

185
00:06:06,080 --> 00:06:08,080
you'll see that it comes up on the

186
00:06:08,080 --> 00:06:09,199
yubikey manager

187
00:06:09,199 --> 00:06:11,680
it doesn't have a pin set um and you can

188
00:06:11,680 --> 00:06:13,120
see that you know it matches the device

189
00:06:13,120 --> 00:06:14,400
that we've inserted

190
00:06:14,400 --> 00:06:16,160
what we can do next is we can register

191
00:06:16,160 --> 00:06:18,240
this device to our account

192
00:06:18,240 --> 00:06:20,080
so we begin the registration process so

193
00:06:20,080 --> 00:06:21,520
we enter in our username

194
00:06:21,520 --> 00:06:23,360
and we select that we want to register

195
00:06:23,360 --> 00:06:25,199
this web authent device

196
00:06:25,199 --> 00:06:26,639
what will happen is once we've selected

197
00:06:26,639 --> 00:06:28,960
register we are prompted to interact

198
00:06:28,960 --> 00:06:30,160
with our key and you can see that it

199
00:06:30,160 --> 00:06:32,000
begins to blink we touch it

200
00:06:32,000 --> 00:06:34,000
and then we say to the website that we

201
00:06:34,000 --> 00:06:36,080
allow to see our identity and we've now

202
00:06:36,080 --> 00:06:37,360
registered and that's really important

203
00:06:37,360 --> 00:06:38,880
that physical touch

204
00:06:38,880 --> 00:06:40,880
the signing process of this private key

205
00:06:40,880 --> 00:06:42,400
can only occur

206
00:06:42,400 --> 00:06:43,840
if the physical interaction with that

207
00:06:43,840 --> 00:06:46,160
token occurs this cannot be manipulated

208
00:06:46,160 --> 00:06:46,960
by the usb

209
00:06:46,960 --> 00:06:49,280
bus it must be physical presence to

210
00:06:49,280 --> 00:06:50,960
perform this

211
00:06:50,960 --> 00:06:52,720
the authentication process is really

212
00:06:52,720 --> 00:06:54,000
similar again

213
00:06:54,000 --> 00:06:56,639
put in the username and again we hit

214
00:06:56,639 --> 00:06:57,759
login

215
00:06:57,759 --> 00:07:00,000
and uh the the device will begin to

216
00:07:00,000 --> 00:07:00,800
blink

217
00:07:00,800 --> 00:07:02,479
we interact with it and we've now

218
00:07:02,479 --> 00:07:03,840
authenticated

219
00:07:03,840 --> 00:07:06,080
you know and this is such an amazingly

220
00:07:06,080 --> 00:07:08,080
simple process for so many users

221
00:07:08,080 --> 00:07:11,199
like this usability for

222
00:07:11,199 --> 00:07:13,520
so many classes of humans to be able to

223
00:07:13,520 --> 00:07:14,880
interact with and gain strong

224
00:07:14,880 --> 00:07:16,639
cryptographic auth with such a simple

225
00:07:16,639 --> 00:07:18,319
mechanism across a diverse

226
00:07:18,319 --> 00:07:21,599
range of hardware authenticators is

227
00:07:21,599 --> 00:07:23,840
really powerful and this is why so many

228
00:07:23,840 --> 00:07:24,960
people think this is the future of

229
00:07:24,960 --> 00:07:26,639
authentication

230
00:07:26,639 --> 00:07:28,080
but to really understand how to use

231
00:07:28,080 --> 00:07:30,479
webwork incorrectly to attack it

232
00:07:30,479 --> 00:07:32,720
defend it we're going to need to dive

233
00:07:32,720 --> 00:07:34,080
into the details

234
00:07:34,080 --> 00:07:36,880
of this standard so here's some light

235
00:07:36,880 --> 00:07:39,520
reading for you

236
00:07:39,919 --> 00:07:42,800
this is the web authent level 2 release

237
00:07:42,800 --> 00:07:45,680
it is 164 pages long

238
00:07:45,680 --> 00:07:47,759
and i promise you i have less than 164

239
00:07:47,759 --> 00:07:50,080
slides

240
00:07:50,080 --> 00:07:51,919
so let's give you a quick crash course

241
00:07:51,919 --> 00:07:54,240
as to what the content of those 164

242
00:07:54,240 --> 00:07:56,960
pages has

243
00:07:57,039 --> 00:07:58,479
so the first thing that happens is our

244
00:07:58,479 --> 00:08:00,319
client is going to initiate to our

245
00:08:00,319 --> 00:08:02,160
relying party that we want to register a

246
00:08:02,160 --> 00:08:02,960
device

247
00:08:02,960 --> 00:08:04,639
the relying party is going to send back

248
00:08:04,639 --> 00:08:06,000
that we want some credential creation

249
00:08:06,000 --> 00:08:08,000
options

250
00:08:08,000 --> 00:08:09,440
now this is tweaked for clarity on the

251
00:08:09,440 --> 00:08:10,720
slides this isn't actually what it's

252
00:08:10,720 --> 00:08:12,400
going to really look like it's just to

253
00:08:12,400 --> 00:08:13,759
help with communication but

254
00:08:13,759 --> 00:08:15,440
there's a lot of things going on that is

255
00:08:15,440 --> 00:08:17,039
sent back to our client so that it can

256
00:08:17,039 --> 00:08:18,879
begin this registration

257
00:08:18,879 --> 00:08:20,960
we are given a relying party identifier

258
00:08:20,960 --> 00:08:22,800
which is who we are trying to

259
00:08:22,800 --> 00:08:25,360
register this device to we are sent a

260
00:08:25,360 --> 00:08:26,080
randomized

261
00:08:26,080 --> 00:08:28,160
challenge which is a set of bytes which

262
00:08:28,160 --> 00:08:29,840
is going to eventually be signed that is

263
00:08:29,840 --> 00:08:31,680
now known to both the relying party and

264
00:08:31,680 --> 00:08:32,320
our client

265
00:08:32,320 --> 00:08:34,240
and this is what prevents replay attacks

266
00:08:34,240 --> 00:08:36,719
against our registrations

267
00:08:36,719 --> 00:08:38,320
we can request different parameters

268
00:08:38,320 --> 00:08:40,320
about our credentials we can say we only

269
00:08:40,320 --> 00:08:41,760
want say ecdsa

270
00:08:41,760 --> 00:08:43,919
we could say we only want rsa we can

271
00:08:43,919 --> 00:08:45,760
have rules around what cryptographic

272
00:08:45,760 --> 00:08:47,120
algorithms we want our hardware

273
00:08:47,120 --> 00:08:50,320
authenticators on that client to support

274
00:08:50,320 --> 00:08:52,399
we can see we can exclude a set of

275
00:08:52,399 --> 00:08:54,160
credentials from participating in this

276
00:08:54,160 --> 00:08:56,320
negotiation

277
00:08:56,320 --> 00:08:57,920
we can have different types of

278
00:08:57,920 --> 00:08:59,600
authenticators selected so for example

279
00:08:59,600 --> 00:09:01,440
we can request a platform authenticator

280
00:09:01,440 --> 00:09:02,800
which means it is an authenticator that

281
00:09:02,800 --> 00:09:04,720
is inseparable from the device this is

282
00:09:04,720 --> 00:09:06,000
things like touch id

283
00:09:06,000 --> 00:09:08,560
or an android secure enclave a

284
00:09:08,560 --> 00:09:10,080
cross-platform authenticator is one that

285
00:09:10,080 --> 00:09:11,600
can shift between platforms so things

286
00:09:11,600 --> 00:09:12,399
like a ubi key

287
00:09:12,399 --> 00:09:13,680
things that you can disconnect and plug

288
00:09:13,680 --> 00:09:16,240
in elsewhere and we can also request

289
00:09:16,240 --> 00:09:17,600
user verification

290
00:09:17,600 --> 00:09:19,360
user verification has three different

291
00:09:19,360 --> 00:09:21,760
levels discouraged means we don't want

292
00:09:21,760 --> 00:09:22,800
user verification

293
00:09:22,800 --> 00:09:24,160
so all this means is that someone has to

294
00:09:24,160 --> 00:09:26,800
interact with the device so that just

295
00:09:26,800 --> 00:09:28,480
so that just gives us the assertion that

296
00:09:28,480 --> 00:09:31,040
a person has interacted with this device

297
00:09:31,040 --> 00:09:33,040
at the other end we have required this

298
00:09:33,040 --> 00:09:34,320
means that not only does someone have to

299
00:09:34,320 --> 00:09:35,680
interact with that device

300
00:09:35,680 --> 00:09:37,600
that device must succeed on say a

301
00:09:37,600 --> 00:09:39,120
biometric test

302
00:09:39,120 --> 00:09:41,279
or the entry or the entry of a pin or

303
00:09:41,279 --> 00:09:42,480
something like that so we're now

304
00:09:42,480 --> 00:09:45,040
asserting that an exact person

305
00:09:45,040 --> 00:09:47,120
is probably the one who is interacting

306
00:09:47,120 --> 00:09:48,800
with this device right now

307
00:09:48,800 --> 00:09:50,720
and in the middle we have the default

308
00:09:50,720 --> 00:09:52,160
option which is preferred which is

309
00:09:52,160 --> 00:09:54,080
try user verification if we can but if

310
00:09:54,080 --> 00:09:55,600
the device is unable to offer it

311
00:09:55,600 --> 00:09:58,959
skip it finally we have at a station

312
00:09:58,959 --> 00:10:01,040
this is about what what information

313
00:10:01,040 --> 00:10:02,560
should the authenticator tell us about

314
00:10:02,560 --> 00:10:03,360
itself

315
00:10:03,360 --> 00:10:04,959
where are you from who are you things

316
00:10:04,959 --> 00:10:06,720
like that

317
00:10:06,720 --> 00:10:08,160
so now that we have these options in the

318
00:10:08,160 --> 00:10:10,000
client we can begin to set up so our

319
00:10:10,000 --> 00:10:12,160
authenticator can sign things

320
00:10:12,160 --> 00:10:14,079
and we take a bunch of this data and

321
00:10:14,079 --> 00:10:15,600
what we do is we take say the relying

322
00:10:15,600 --> 00:10:17,200
party identifier and these challenge

323
00:10:17,200 --> 00:10:18,240
bytes

324
00:10:18,240 --> 00:10:20,240
and we take the domain name as the

325
00:10:20,240 --> 00:10:21,680
client knows it this is called the

326
00:10:21,680 --> 00:10:22,560
origin

327
00:10:22,560 --> 00:10:24,399
and this domain name being brought from

328
00:10:24,399 --> 00:10:25,600
the client only

329
00:10:25,600 --> 00:10:26,880
is really important because this is what

330
00:10:26,880 --> 00:10:28,959
prevents phishing attacks because as

331
00:10:28,959 --> 00:10:30,480
we're going to be signing the domain

332
00:10:30,480 --> 00:10:32,000
name as the client sees it

333
00:10:32,000 --> 00:10:33,839
it means that we must be on exactly this

334
00:10:33,839 --> 00:10:35,760
domain that is wanting this registration

335
00:10:35,760 --> 00:10:37,440
or authentication to occur

336
00:10:37,440 --> 00:10:39,760
and so this also won't proceed unless

337
00:10:39,760 --> 00:10:41,440
we're on a tls connection all browsers

338
00:10:41,440 --> 00:10:43,040
enforce this

339
00:10:43,040 --> 00:10:44,480
we collect that up into our collected

340
00:10:44,480 --> 00:10:46,560
client data and we

341
00:10:46,560 --> 00:10:50,240
hash all of these with sha256

342
00:10:50,240 --> 00:10:52,720
we now take that signed combination of

343
00:10:52,720 --> 00:10:54,560
origin the relying party id and the

344
00:10:54,560 --> 00:10:55,839
challenge bytes

345
00:10:55,839 --> 00:10:58,839
and then we we send that into the

346
00:10:58,839 --> 00:11:00,079
authenticator

347
00:11:00,079 --> 00:11:03,279
and that is um concatenated with some id

348
00:11:03,279 --> 00:11:05,279
some data from the authenticator itself

349
00:11:05,279 --> 00:11:07,279
and this becomes the verification data

350
00:11:07,279 --> 00:11:09,040
uh and so from the credential itself we

351
00:11:09,040 --> 00:11:10,320
take its credential id and it's public

352
00:11:10,320 --> 00:11:10,880
key

353
00:11:10,880 --> 00:11:12,399
so this is the credential not only

354
00:11:12,399 --> 00:11:14,000
signing our origin that

355
00:11:14,000 --> 00:11:15,920
those challenge bias prevent replays but

356
00:11:15,920 --> 00:11:18,160
also signing its own identity to say yes

357
00:11:18,160 --> 00:11:20,560
i am actually who i say i am

358
00:11:20,560 --> 00:11:22,240
um and this signature process that

359
00:11:22,240 --> 00:11:23,360
occurs here which signs that

360
00:11:23,360 --> 00:11:24,800
verification data this is what only

361
00:11:24,800 --> 00:11:25,600
proceeds

362
00:11:25,600 --> 00:11:27,600
if the user presence test passes and if

363
00:11:27,600 --> 00:11:29,279
verification was requested only if that

364
00:11:29,279 --> 00:11:30,880
verification test passes

365
00:11:30,880 --> 00:11:32,240
the cryptographic element will not

366
00:11:32,240 --> 00:11:35,120
proceed if those fail

367
00:11:35,120 --> 00:11:36,880
finally now that we have that signature

368
00:11:36,880 --> 00:11:38,800
we begin to unwind this process

369
00:11:38,800 --> 00:11:41,519
and give data back to our relying party

370
00:11:41,519 --> 00:11:43,360
so we take that signature

371
00:11:43,360 --> 00:11:44,880
and we also combine it with some other

372
00:11:44,880 --> 00:11:47,120
elements from the device

373
00:11:47,120 --> 00:11:48,720
such as the public key the attestation

374
00:11:48,720 --> 00:11:50,399
certificate which is its uh chain of

375
00:11:50,399 --> 00:11:52,160
trust back to its manufacturer which we

376
00:11:52,160 --> 00:11:52,399
can

377
00:11:52,399 --> 00:11:54,480
use to assert the authenticity and the

378
00:11:54,480 --> 00:11:56,320
manufacture of this device

379
00:11:56,320 --> 00:11:59,440
we get the credential id and we also get

380
00:11:59,440 --> 00:12:00,880
the counter which is the

381
00:12:00,880 --> 00:12:02,560
hardware activation counts of this

382
00:12:02,560 --> 00:12:04,399
device which is always incrementing so

383
00:12:04,399 --> 00:12:04,880
again

384
00:12:04,880 --> 00:12:06,959
we have another layer of replay attack

385
00:12:06,959 --> 00:12:09,120
prevention

386
00:12:09,120 --> 00:12:10,399
and all of these are combined with this

387
00:12:10,399 --> 00:12:12,320
at a station object and this is a really

388
00:12:12,320 --> 00:12:14,160
scary thing like

389
00:12:14,160 --> 00:12:16,639
implementing this was a real fun ride

390
00:12:16,639 --> 00:12:18,320
but the reason this attestation object

391
00:12:18,320 --> 00:12:20,000
exists is that allows us to take

392
00:12:20,000 --> 00:12:21,360
many different classes of hard work

393
00:12:21,360 --> 00:12:22,880
indicators combine it into a

394
00:12:22,880 --> 00:12:24,720
standardized attestation format

395
00:12:24,720 --> 00:12:26,720
and then send that to our relying party

396
00:12:26,720 --> 00:12:28,320
so that way we actually can

397
00:12:28,320 --> 00:12:29,839
work across many different classes of

398
00:12:29,839 --> 00:12:32,079
hardware authenticators

399
00:12:32,079 --> 00:12:33,200
and this is one of those things that

400
00:12:33,200 --> 00:12:34,639
really makes webworld thing good is that

401
00:12:34,639 --> 00:12:38,160
use of different hardware authenticators

402
00:12:38,160 --> 00:12:40,720
finally we take this at a station object

403
00:12:40,720 --> 00:12:42,160
combine it with our collected client

404
00:12:42,160 --> 00:12:43,040
data

405
00:12:43,040 --> 00:12:45,440
and then we send it to our relying party

406
00:12:45,440 --> 00:12:48,800
once we've put it all together

407
00:12:49,120 --> 00:12:52,720
that's a weird transition so finally

408
00:12:52,720 --> 00:12:54,240
we're at the last step of the

409
00:12:54,240 --> 00:12:55,600
registration where now we've got this at

410
00:12:55,600 --> 00:12:57,040
a station we can send it to our relying

411
00:12:57,040 --> 00:12:57,600
party

412
00:12:57,600 --> 00:12:59,200
and it can take its originally offered

413
00:12:59,200 --> 00:13:00,880
credential creation options and begin to

414
00:13:00,880 --> 00:13:02,000
verify this

415
00:13:02,000 --> 00:13:06,160
registration now i've omitted a lot of

416
00:13:06,160 --> 00:13:07,519
steps here if you have a look at the

417
00:13:07,519 --> 00:13:08,399
numbers

418
00:13:08,399 --> 00:13:10,800
there's a lot of things missing these

419
00:13:10,800 --> 00:13:12,720
are just a few of the important ones

420
00:13:12,720 --> 00:13:15,040
so we verify that the origin as the

421
00:13:15,040 --> 00:13:16,320
client has signed it

422
00:13:16,320 --> 00:13:17,600
on that device from its knowledge of the

423
00:13:17,600 --> 00:13:19,600
domain name matches what we believe our

424
00:13:19,600 --> 00:13:20,000
domain

425
00:13:20,000 --> 00:13:21,600
name is this is again that phishing

426
00:13:21,600 --> 00:13:23,360
prevention

427
00:13:23,360 --> 00:13:24,800
if the user verification was set to

428
00:13:24,800 --> 00:13:26,639
required in our outbound registration

429
00:13:26,639 --> 00:13:28,240
options we verified that the user

430
00:13:28,240 --> 00:13:29,920
verification bit in that attestation

431
00:13:29,920 --> 00:13:30,560
object is

432
00:13:30,560 --> 00:13:33,680
set correctly we verify that the

433
00:13:33,680 --> 00:13:35,279
algorithms in use cryptographically

434
00:13:35,279 --> 00:13:36,639
returned from the device

435
00:13:36,639 --> 00:13:38,079
matches one of the ones that we actually

436
00:13:38,079 --> 00:13:40,480
requested them to use

437
00:13:40,480 --> 00:13:42,880
uh we assess the chain of trust of that

438
00:13:42,880 --> 00:13:44,320
attestation cert so we

439
00:13:44,320 --> 00:13:45,680
want to check that that manufacturer of

440
00:13:45,680 --> 00:13:47,120
that device is really trusted and it's

441
00:13:47,120 --> 00:13:48,639
not just you know ub key off the back of

442
00:13:48,639 --> 00:13:50,560
a truck which has been compromised

443
00:13:50,560 --> 00:13:52,240
and we also check if this credential id

444
00:13:52,240 --> 00:13:53,600
is being reused on another account to

445
00:13:53,600 --> 00:13:55,760
prevent duplicate registrations

446
00:13:55,760 --> 00:13:58,480
and finally once this is all done we can

447
00:13:58,480 --> 00:14:00,000
register this credential id and the

448
00:14:00,000 --> 00:14:00,720
public key

449
00:14:00,720 --> 00:14:02,639
to our users account so we can then use

450
00:14:02,639 --> 00:14:05,440
this for future authentications

451
00:14:05,440 --> 00:14:07,120
so there's a lot going on here and

452
00:14:07,120 --> 00:14:08,399
there's a lot of really good stuff in

453
00:14:08,399 --> 00:14:09,920
terms of phishing prevention replay

454
00:14:09,920 --> 00:14:11,760
attack prevention the cryptographics

455
00:14:11,760 --> 00:14:14,000
uh really sound the interaction is

456
00:14:14,000 --> 00:14:15,839
really important here

457
00:14:15,839 --> 00:14:17,279
in terms of that verification of all

458
00:14:17,279 --> 00:14:18,959
these elements there's a lot that is

459
00:14:18,959 --> 00:14:19,440
very

460
00:14:19,440 --> 00:14:22,240
very good within this so let's look at

461
00:14:22,240 --> 00:14:23,600
authentication quickly and this is a

462
00:14:23,600 --> 00:14:24,880
much quicker part

463
00:14:24,880 --> 00:14:26,160
i've highlighted what the differences

464
00:14:26,160 --> 00:14:28,639
are but the workflow is almost identical

465
00:14:28,639 --> 00:14:30,800
once again we initiate an authentication

466
00:14:30,800 --> 00:14:32,720
and we get a request options

467
00:14:32,720 --> 00:14:35,040
same kind of stuff relying party id

468
00:14:35,040 --> 00:14:36,959
which is our relying card is identifier

469
00:14:36,959 --> 00:14:39,120
challenge bytes again to prevent replay

470
00:14:39,120 --> 00:14:41,120
attacks and this time

471
00:14:41,120 --> 00:14:43,600
um something different is that we have

472
00:14:43,600 --> 00:14:45,120
an allowed credentials list

473
00:14:45,120 --> 00:14:46,959
which says what credentials are allowed

474
00:14:46,959 --> 00:14:48,959
to proceed within this operation so we

475
00:14:48,959 --> 00:14:50,320
say okay only these ones that you've

476
00:14:50,320 --> 00:14:53,279
registered to your account can proceed

477
00:14:53,279 --> 00:14:55,040
and again we have this user verification

478
00:14:55,040 --> 00:14:56,399
option about whether we want no

479
00:14:56,399 --> 00:14:57,199
verification

480
00:14:57,199 --> 00:14:59,199
must be required or whether we you know

481
00:14:59,199 --> 00:15:01,440
kind of want it

482
00:15:01,440 --> 00:15:03,279
now we've got that we begin to set up

483
00:15:03,279 --> 00:15:04,880
for our client to send this to our

484
00:15:04,880 --> 00:15:07,040
navigator credentials.get apis

485
00:15:07,040 --> 00:15:09,120
and we begin the signature process again

486
00:15:09,120 --> 00:15:11,279
once again this is almost identical

487
00:15:11,279 --> 00:15:13,760
we take this data challenge origin it

488
00:15:13,760 --> 00:15:15,839
must be on tls all that stuff went

489
00:15:15,839 --> 00:15:16,880
phishing

490
00:15:16,880 --> 00:15:19,279
it's collected together concatenated up

491
00:15:19,279 --> 00:15:20,000
and then sent

492
00:15:20,000 --> 00:15:23,040
into the authenticator again we take

493
00:15:23,040 --> 00:15:23,360
that

494
00:15:23,360 --> 00:15:24,639
send it to the authenticator but this

495
00:15:24,639 --> 00:15:26,639
time we actually add in the user

496
00:15:26,639 --> 00:15:28,560
presence boolean and the counter state

497
00:15:28,560 --> 00:15:30,320
in our signature so this way we have a

498
00:15:30,320 --> 00:15:32,639
signed verification of what the hardware

499
00:15:32,639 --> 00:15:34,480
activation counter state is

500
00:15:34,480 --> 00:15:36,399
so that we we have a cryptographic

501
00:15:36,399 --> 00:15:37,759
signing over

502
00:15:37,759 --> 00:15:39,199
that counter again this is another

503
00:15:39,199 --> 00:15:41,839
replay defense

504
00:15:42,160 --> 00:15:43,600
and once that signature's happened of

505
00:15:43,600 --> 00:15:45,759
course that again requires that

506
00:15:45,759 --> 00:15:47,759
interaction or that pin verification to

507
00:15:47,759 --> 00:15:49,040
pass

508
00:15:49,040 --> 00:15:50,959
now that we have that signature we can

509
00:15:50,959 --> 00:15:53,680
begin to return this up to our client

510
00:15:53,680 --> 00:15:56,000
so the client takes that signature

511
00:15:56,000 --> 00:15:57,839
credential id in the counter

512
00:15:57,839 --> 00:16:00,160
creates this assertion response we take

513
00:16:00,160 --> 00:16:01,600
the assertion response to collect client

514
00:16:01,600 --> 00:16:02,079
data

515
00:16:02,079 --> 00:16:04,320
send it to our relying party and it's

516
00:16:04,320 --> 00:16:05,680
going to begin and finalize the

517
00:16:05,680 --> 00:16:07,600
authentication

518
00:16:07,600 --> 00:16:09,279
again same thing we take what the

519
00:16:09,279 --> 00:16:10,800
server's knowledge of what we

520
00:16:10,800 --> 00:16:13,759
wanted to do and we take the uh details

521
00:16:13,759 --> 00:16:15,120
that we got back from the client and we

522
00:16:15,120 --> 00:16:16,480
verify this

523
00:16:16,480 --> 00:16:18,639
again lots of things here i've cut out a

524
00:16:18,639 --> 00:16:21,279
lot these are some of the important ones

525
00:16:21,279 --> 00:16:23,120
if we have a loud credential set we

526
00:16:23,120 --> 00:16:24,720
check that what credential was used was

527
00:16:24,720 --> 00:16:26,320
actually one of the ones we wanted to be

528
00:16:26,320 --> 00:16:27,600
allowed to use here

529
00:16:27,600 --> 00:16:29,040
so they can't just use any random

530
00:16:29,040 --> 00:16:31,680
credential that may exist

531
00:16:31,680 --> 00:16:33,040
we check the user verification if it was

532
00:16:33,040 --> 00:16:34,959
required

533
00:16:34,959 --> 00:16:37,199
using the public key that we previously

534
00:16:37,199 --> 00:16:38,959
assigned to the user's account we verify

535
00:16:38,959 --> 00:16:40,399
this signature and this is what does

536
00:16:40,399 --> 00:16:41,839
that authentication

537
00:16:41,839 --> 00:16:43,519
uh and the cryptographic element so that

538
00:16:43,519 --> 00:16:45,279
we know that it must be this key that is

539
00:16:45,279 --> 00:16:46,720
really authenticating

540
00:16:46,720 --> 00:16:49,040
um and then finally we check that the

541
00:16:49,040 --> 00:16:50,480
counter state is always advancing and if

542
00:16:50,480 --> 00:16:52,240
it is we we save that and if it's not

543
00:16:52,240 --> 00:16:54,880
then then we can choose to fail this

544
00:16:54,880 --> 00:16:57,279
so that's authentication and that's how

545
00:16:57,279 --> 00:16:57,920
that works

546
00:16:57,920 --> 00:16:59,360
again really similar registration but

547
00:16:59,360 --> 00:17:01,040
again there's a lot of really good stuff

548
00:17:01,040 --> 00:17:01,600
here

549
00:17:01,600 --> 00:17:03,120
defenses against replays domain

550
00:17:03,120 --> 00:17:05,280
validation um you know a lot of

551
00:17:05,280 --> 00:17:06,480
authenticity checks around the

552
00:17:06,480 --> 00:17:09,280
manufacturer and this is great because

553
00:17:09,280 --> 00:17:11,199
if we put it back into our scorecard

554
00:17:11,199 --> 00:17:12,720
weber then prevents a lot of these

555
00:17:12,720 --> 00:17:14,079
attacks that exist today

556
00:17:14,079 --> 00:17:15,839
you know we prevent you know credential

557
00:17:15,839 --> 00:17:17,199
stuffing we prevent

558
00:17:17,199 --> 00:17:18,880
phishing because you know you must be on

559
00:17:18,880 --> 00:17:21,039
the same origin we prevent uh

560
00:17:21,039 --> 00:17:22,640
you know especially with verification if

561
00:17:22,640 --> 00:17:24,079
someone steals your token they may not

562
00:17:24,079 --> 00:17:25,520
be able to use it because it requires

563
00:17:25,520 --> 00:17:27,039
extra verification

564
00:17:27,039 --> 00:17:28,160
so there's a lot of stuff that's really

565
00:17:28,160 --> 00:17:30,080
good here

566
00:17:30,080 --> 00:17:33,200
but there's always a part

567
00:17:33,200 --> 00:17:35,919
it's a large standard and there's

568
00:17:35,919 --> 00:17:36,960
already

569
00:17:36,960 --> 00:17:38,960
like there's a lot of ways that in any

570
00:17:38,960 --> 00:17:40,400
large standard you can use it

571
00:17:40,400 --> 00:17:41,440
incorrectly

572
00:17:41,440 --> 00:17:43,520
there's a lot of dark corners here and

573
00:17:43,520 --> 00:17:44,960
it's a bit of a labyrinth

574
00:17:44,960 --> 00:17:46,799
and many if of the issues we will talk

575
00:17:46,799 --> 00:17:48,960
about here today have already affected

576
00:17:48,960 --> 00:17:50,559
some major identity service providers

577
00:17:50,559 --> 00:17:52,480
and i have you know responsibly

578
00:17:52,480 --> 00:17:53,760
disclosed some of these things to them

579
00:17:53,760 --> 00:17:54,799
they are aware

580
00:17:54,799 --> 00:17:56,080
um all of this research was done

581
00:17:56,080 --> 00:17:57,919
publicly so none of this is um

582
00:17:57,919 --> 00:18:01,039
unknown to the world

583
00:18:01,039 --> 00:18:03,919
first one the standard doesn't define

584
00:18:03,919 --> 00:18:05,600
what the cryptographic challenges

585
00:18:05,600 --> 00:18:08,320
should look like it says that you

586
00:18:08,320 --> 00:18:09,039
probably

587
00:18:09,039 --> 00:18:12,160
should have 16 bytes

588
00:18:12,160 --> 00:18:14,480
and they must have enough entropy to

589
00:18:14,480 --> 00:18:16,320
make them guessing infeasible

590
00:18:16,320 --> 00:18:17,760
but it's not really strong on this

591
00:18:17,760 --> 00:18:19,440
language and you can

592
00:18:19,440 --> 00:18:21,280
very happily send a one byte challenge

593
00:18:21,280 --> 00:18:22,559
of a zero and

594
00:18:22,559 --> 00:18:24,559
every browser will accept it and pass it

595
00:18:24,559 --> 00:18:25,919
to your authenticator

596
00:18:25,919 --> 00:18:28,160
so this basically opens you to replay

597
00:18:28,160 --> 00:18:30,320
attacks and if you are not offering high

598
00:18:30,320 --> 00:18:31,760
quality random challenges

599
00:18:31,760 --> 00:18:34,000
then yeah you can have replay attacks

600
00:18:34,000 --> 00:18:37,200
against auth and registration

601
00:18:37,919 --> 00:18:39,679
now looking back at the steps here that

602
00:18:39,679 --> 00:18:42,240
are happening during registration uh

603
00:18:42,240 --> 00:18:43,760
i kind of said something interesting

604
00:18:43,760 --> 00:18:45,280
that maybe was overlooked i said we were

605
00:18:45,280 --> 00:18:46,640
looking at the level two version of the

606
00:18:46,640 --> 00:18:47,200
standard

607
00:18:47,200 --> 00:18:49,039
well the level two version is undergoing

608
00:18:49,039 --> 00:18:50,480
some final ratification before it

609
00:18:50,480 --> 00:18:52,320
becomes the version of the standard

610
00:18:52,320 --> 00:18:53,600
the version of the standard publicly

611
00:18:53,600 --> 00:18:55,679
today is level one which means that

612
00:18:55,679 --> 00:18:57,360
these steps don't occur

613
00:18:57,360 --> 00:18:59,200
the steps i have now crossed out are the

614
00:18:59,200 --> 00:19:00,799
verification that the algorithm

615
00:19:00,799 --> 00:19:02,559
as registered is one of the ones that we

616
00:19:02,559 --> 00:19:04,000
actually requested meaning that the

617
00:19:04,000 --> 00:19:05,840
credential is happily able to sign up

618
00:19:05,840 --> 00:19:07,360
any algorithm that it wants during

619
00:19:07,360 --> 00:19:08,960
registration provided you support it on

620
00:19:08,960 --> 00:19:10,160
the back end

621
00:19:10,160 --> 00:19:11,919
and it also doesn't actually check that

622
00:19:11,919 --> 00:19:13,520
you have a platform or cross-platform

623
00:19:13,520 --> 00:19:15,120
transport and it doesn't validate this

624
00:19:15,120 --> 00:19:15,840
whatsoever

625
00:19:15,840 --> 00:19:17,520
which means again you are free to ignore

626
00:19:17,520 --> 00:19:19,520
that and just sign up any credential you

627
00:19:19,520 --> 00:19:20,320
want

628
00:19:20,320 --> 00:19:21,919
which can have some interesting

629
00:19:21,919 --> 00:19:23,280
consequences given that some of the

630
00:19:23,280 --> 00:19:24,799
algorithms supported is things like

631
00:19:24,799 --> 00:19:28,000
rsa and sha-1

632
00:19:28,640 --> 00:19:30,720
another thing that's worth noting is

633
00:19:30,720 --> 00:19:32,400
that even in the level 2 and 3 versions

634
00:19:32,400 --> 00:19:33,840
of the standard this excluder

635
00:19:33,840 --> 00:19:35,440
credentials parameter is never actually

636
00:19:35,440 --> 00:19:37,280
checked server-side

637
00:19:37,280 --> 00:19:39,280
so this is just free to be ignored by

638
00:19:39,280 --> 00:19:40,880
the client so

639
00:19:40,880 --> 00:19:42,720
uh using this if you are trying to

640
00:19:42,720 --> 00:19:43,840
filter out credentials that have been

641
00:19:43,840 --> 00:19:45,440
compromised or things like that this

642
00:19:45,440 --> 00:19:47,280
isn't actually upheld whatsoever so

643
00:19:47,280 --> 00:19:48,640
the client is free to ignore this and

644
00:19:48,640 --> 00:19:50,880
just send whatever it wants

645
00:19:50,880 --> 00:19:52,240
and there's starting to be a bit of a

646
00:19:52,240 --> 00:19:54,000
theme here right

647
00:19:54,000 --> 00:19:55,039
there's some really interesting things

648
00:19:55,039 --> 00:19:57,360
here also around the uh replay

649
00:19:57,360 --> 00:20:00,000
prevention with the counter so the

650
00:20:00,000 --> 00:20:01,520
signature count on first registration

651
00:20:01,520 --> 00:20:02,720
could be zero which means that the

652
00:20:02,720 --> 00:20:04,840
counter will never actually be

653
00:20:04,840 --> 00:20:05,850
checked

654
00:20:05,850 --> 00:20:07,360
[Music]

655
00:20:07,360 --> 00:20:10,159
and the other thing is also that when

656
00:20:10,159 --> 00:20:11,120
the standard

657
00:20:11,120 --> 00:20:12,799
says some interesting things around what

658
00:20:12,799 --> 00:20:14,720
you do if the signature count has gone

659
00:20:14,720 --> 00:20:16,480
backwards

660
00:20:16,480 --> 00:20:18,720
the thing it says here is that whether

661
00:20:18,720 --> 00:20:20,640
the relying party chooses to update the

662
00:20:20,640 --> 00:20:22,400
counter that has moved backwards

663
00:20:22,400 --> 00:20:25,840
and save that data or not is up to them

664
00:20:25,840 --> 00:20:27,840
which means that many relying parties if

665
00:20:27,840 --> 00:20:29,360
implemented incorrectly

666
00:20:29,360 --> 00:20:31,440
if you send them an old challenge they

667
00:20:31,440 --> 00:20:32,799
will update the counter

668
00:20:32,799 --> 00:20:34,720
wind it backwards and then opens them up

669
00:20:34,720 --> 00:20:36,799
to you sending future challenges where

670
00:20:36,799 --> 00:20:40,640
the counter state may have advanced

671
00:20:40,640 --> 00:20:42,159
so there's some really interesting stuff

672
00:20:42,159 --> 00:20:46,240
where the counter can be replayed here

673
00:20:46,640 --> 00:20:48,320
but a lot of this is really coming down

674
00:20:48,320 --> 00:20:49,919
to something which is that there's a

675
00:20:49,919 --> 00:20:51,440
difference between a hint

676
00:20:51,440 --> 00:20:54,480
and a requirement in this standard as

677
00:20:54,480 --> 00:20:57,200
you may recall during registration

678
00:20:57,200 --> 00:21:00,799
and authentication the data that we sign

679
00:21:00,799 --> 00:21:03,039
is from this relying party id and this

680
00:21:03,039 --> 00:21:05,760
challenge bytes as well as the origin

681
00:21:05,760 --> 00:21:07,760
however if you remember this credential

682
00:21:07,760 --> 00:21:08,880
creation options

683
00:21:08,880 --> 00:21:12,080
has many more elements than that all of

684
00:21:12,080 --> 00:21:12,640
these are

685
00:21:12,640 --> 00:21:15,919
unsigned which means that the client is

686
00:21:15,919 --> 00:21:16,960
free to modify

687
00:21:16,960 --> 00:21:20,240
tamper and ignore all of them this is

688
00:21:20,240 --> 00:21:22,320
also generally done in javascript

689
00:21:22,320 --> 00:21:26,400
on the browser so

690
00:21:26,400 --> 00:21:28,000
this has some interesting consequences

691
00:21:28,000 --> 00:21:29,840
during our registration authentication

692
00:21:29,840 --> 00:21:30,320
process

693
00:21:30,320 --> 00:21:33,520
so once again we have a live demo on the

694
00:21:33,520 --> 00:21:35,280
left we have fully updated chrome

695
00:21:35,280 --> 00:21:37,600
and the web authenti demo site which is

696
00:21:37,600 --> 00:21:39,440
a standards compliant version of web

697
00:21:39,440 --> 00:21:41,919
authen as produced by duo labs

698
00:21:41,919 --> 00:21:44,559
on the right we have my authenticator

699
00:21:44,559 --> 00:21:45,600
which is set up

700
00:21:45,600 --> 00:21:48,159
um at the moment with no pin we're going

701
00:21:48,159 --> 00:21:49,679
to set a pin on this device this is

702
00:21:49,679 --> 00:21:51,679
what's going to enable user verification

703
00:21:51,679 --> 00:21:53,840
to occur because now that that pin is

704
00:21:53,840 --> 00:21:55,440
set we can now

705
00:21:55,440 --> 00:21:57,840
have this prompter for we're going to

706
00:21:57,840 --> 00:21:58,480
register

707
00:21:58,480 --> 00:22:00,880
our account so we're going to check that

708
00:22:00,880 --> 00:22:02,159
the user verification setting is

709
00:22:02,159 --> 00:22:03,120
preferred which means

710
00:22:03,120 --> 00:22:05,039
if you're capable of user verification

711
00:22:05,039 --> 00:22:06,559
you need to provide it

712
00:22:06,559 --> 00:22:08,559
and so we hit register we add our

713
00:22:08,559 --> 00:22:09,600
security key

714
00:22:09,600 --> 00:22:13,679
we enter in our pin and as you can see

715
00:22:13,679 --> 00:22:15,679
we entered in hit next and we've now

716
00:22:15,679 --> 00:22:17,360
registered our credential

717
00:22:17,360 --> 00:22:19,200
so at this point we can now begin to

718
00:22:19,200 --> 00:22:21,200
attempt to log in

719
00:22:21,200 --> 00:22:24,400
so we begin the login process

720
00:22:24,400 --> 00:22:26,960
we select we want to log in uh we'll

721
00:22:26,960 --> 00:22:28,080
enter our pin in

722
00:22:28,080 --> 00:22:30,240
um i can't remember which yeah we enter

723
00:22:30,240 --> 00:22:31,760
the p correctly

724
00:22:31,760 --> 00:22:35,360
authenticate and we've now succeeded

725
00:22:35,360 --> 00:22:37,200
great so at this point we believe we've

726
00:22:37,200 --> 00:22:38,559
registered and authenticated and

727
00:22:38,559 --> 00:22:40,400
verified credential

728
00:22:40,400 --> 00:22:42,559
we do this again and this time what

729
00:22:42,559 --> 00:22:44,240
we're going to do when we log in

730
00:22:44,240 --> 00:22:47,520
is we're going to enter in

731
00:22:49,039 --> 00:22:52,000
the incorrect pin so we begin to do the

732
00:22:52,000 --> 00:22:53,760
login process again

733
00:22:53,760 --> 00:22:56,159
we interact with the key we enter in the

734
00:22:56,159 --> 00:22:57,679
incorrect pin

735
00:22:57,679 --> 00:22:59,360
and you'll see we get an incorrect pin

736
00:22:59,360 --> 00:23:01,600
warning we cancel out of this

737
00:23:01,600 --> 00:23:04,720
the authentication has failed so

738
00:23:04,720 --> 00:23:06,960
once again we believe we have a verified

739
00:23:06,960 --> 00:23:09,520
credential here

740
00:23:09,520 --> 00:23:12,080
let's do this once more but this time

741
00:23:12,080 --> 00:23:13,120
we're going to pull up

742
00:23:13,120 --> 00:23:16,320
the javascript inspector

743
00:23:18,559 --> 00:23:21,840
so we pull up the sources and we put a

744
00:23:21,840 --> 00:23:23,600
break on navigator credentials get which

745
00:23:23,600 --> 00:23:24,159
as you

746
00:23:24,159 --> 00:23:26,000
may recall is the the part which takes

747
00:23:26,000 --> 00:23:27,520
the options which is for the

748
00:23:27,520 --> 00:23:28,720
authentication

749
00:23:28,720 --> 00:23:30,559
um and then hands it in we're going to

750
00:23:30,559 --> 00:23:32,320
break on this and when we get it

751
00:23:32,320 --> 00:23:34,559
we're going to edit this properties and

752
00:23:34,559 --> 00:23:35,600
we're going to update its user

753
00:23:35,600 --> 00:23:37,039
verification flag

754
00:23:37,039 --> 00:23:40,240
to be discouraged

755
00:23:40,240 --> 00:23:44,000
when we set this to discouraged

756
00:23:44,720 --> 00:23:47,600
and we allow our javascript to continue

757
00:23:47,600 --> 00:23:49,360
we interact with our key

758
00:23:49,360 --> 00:23:53,199
and we authenticate with no pin

759
00:23:53,440 --> 00:23:56,799
so why does this happen

760
00:23:56,799 --> 00:24:00,000
two reasons a registration

761
00:24:00,000 --> 00:24:02,880
the standard states to only store the

762
00:24:02,880 --> 00:24:05,039
credential id and the credential public

763
00:24:05,039 --> 00:24:05,919
key

764
00:24:05,919 --> 00:24:08,240
it does not say whether you should store

765
00:24:08,240 --> 00:24:09,600
the verification state

766
00:24:09,600 --> 00:24:13,039
of the token and second

767
00:24:13,039 --> 00:24:14,960
a stance compliant implementation will

768
00:24:14,960 --> 00:24:16,559
only check these verification bit if

769
00:24:16,559 --> 00:24:16,880
your

770
00:24:16,880 --> 00:24:19,440
outgoing options stated that it was

771
00:24:19,440 --> 00:24:21,360
required

772
00:24:21,360 --> 00:24:24,320
this means with no persistence of user

773
00:24:24,320 --> 00:24:26,400
verification result or registration

774
00:24:26,400 --> 00:24:27,840
with no persistence of the user

775
00:24:27,840 --> 00:24:30,159
verification policy of registration

776
00:24:30,159 --> 00:24:31,360
and actually not even storing the

777
00:24:31,360 --> 00:24:33,919
attestation cert this assertion is

778
00:24:33,919 --> 00:24:35,919
only verifying these varication bit if

779
00:24:35,919 --> 00:24:37,840
you always have required on all of your

780
00:24:37,840 --> 00:24:39,200
outgoing messages

781
00:24:39,200 --> 00:24:40,799
and this means that the preferred

782
00:24:40,799 --> 00:24:42,960
setting is by possible

783
00:24:42,960 --> 00:24:44,960
if your back end is not going above and

784
00:24:44,960 --> 00:24:46,320
beyond the standard to persist these

785
00:24:46,320 --> 00:24:49,120
verification states

786
00:24:49,120 --> 00:24:52,320
and why is this the case

787
00:24:52,320 --> 00:24:54,720
the standard assumes the browser and

788
00:24:54,720 --> 00:24:56,080
javascript on the site

789
00:24:56,080 --> 00:24:59,279
is a fully trusted uncompromised element

790
00:24:59,279 --> 00:25:02,400
of the negotiation this means

791
00:25:02,400 --> 00:25:03,840
that if you are able to modify the

792
00:25:03,840 --> 00:25:05,679
javascript or the host

793
00:25:05,679 --> 00:25:08,799
or tamper with the origin the browser

794
00:25:08,799 --> 00:25:11,200
will just happily do it because it's

795
00:25:11,200 --> 00:25:13,520
assumed to be trusted

796
00:25:13,520 --> 00:25:14,880
and part of this comes from the fact

797
00:25:14,880 --> 00:25:17,600
that the specification as intended

798
00:25:17,600 --> 00:25:19,919
to be used is not the specification as

799
00:25:19,919 --> 00:25:21,200
written

800
00:25:21,200 --> 00:25:23,039
the implementers of this standard

801
00:25:23,039 --> 00:25:24,640
intended for you to save this user

802
00:25:24,640 --> 00:25:26,240
verification information and to do

803
00:25:26,240 --> 00:25:27,760
further extended verification

804
00:25:27,760 --> 00:25:29,760
but that is not written in the standard

805
00:25:29,760 --> 00:25:30,880
there is work now

806
00:25:30,880 --> 00:25:32,799
occurring within that body to fix this

807
00:25:32,799 --> 00:25:34,559
but it still is going to take some time

808
00:25:34,559 --> 00:25:36,159
before that flows out

809
00:25:36,159 --> 00:25:38,559
to different deployments and uh

810
00:25:38,559 --> 00:25:41,120
integrators of web offend

811
00:25:41,120 --> 00:25:44,480
so what are our takeaways and

812
00:25:44,480 --> 00:25:46,640
effectively homework for everyone if

813
00:25:46,640 --> 00:25:48,159
you're a red team

814
00:25:48,159 --> 00:25:50,080
the core cryptographic elements within

815
00:25:50,080 --> 00:25:51,279
web authentic sound

816
00:25:51,279 --> 00:25:53,520
but the implementation around it is not

817
00:25:53,520 --> 00:25:54,880
always

818
00:25:54,880 --> 00:25:56,159
really look for user verification

819
00:25:56,159 --> 00:25:57,919
preferred or user verification being

820
00:25:57,919 --> 00:25:59,679
unset which implies preferred

821
00:25:59,679 --> 00:26:02,240
this can be bypassed giving many users a

822
00:26:02,240 --> 00:26:03,440
false sense of security

823
00:26:03,440 --> 00:26:05,840
that their tokens require verification

824
00:26:05,840 --> 00:26:07,840
and some people may believe that that's

825
00:26:07,840 --> 00:26:08,960
actually a policy

826
00:26:08,960 --> 00:26:10,320
meaning that you can downgrade the token

827
00:26:10,320 --> 00:26:11,760
from requiring verification just

828
00:26:11,760 --> 00:26:13,200
interaction so if you can get your hands

829
00:26:13,200 --> 00:26:13,840
on one

830
00:26:13,840 --> 00:26:16,559
you've got it weak algo algorithm

831
00:26:16,559 --> 00:26:17,440
registration

832
00:26:17,440 --> 00:26:20,240
which may be broken sha1 and rsa is used

833
00:26:20,240 --> 00:26:21,279
by a lot

834
00:26:21,279 --> 00:26:23,200
of tpms with windows hello because

835
00:26:23,200 --> 00:26:25,760
that's all the tpm can offer

836
00:26:25,760 --> 00:26:27,279
look for poor challenges which can be

837
00:26:27,279 --> 00:26:29,440
replayed or reused and may occur

838
00:26:29,440 --> 00:26:31,520
frequently

839
00:26:31,520 --> 00:26:33,279
also look for incorrect counter handling

840
00:26:33,279 --> 00:26:35,840
which again may allow replay attacks

841
00:26:35,840 --> 00:26:37,200
especially if you're registering if you

842
00:26:37,200 --> 00:26:38,640
can tamper with their counter value to

843
00:26:38,640 --> 00:26:40,159
be zero because i believe the counter

844
00:26:40,159 --> 00:26:42,080
value isn't signed during registration

845
00:26:42,080 --> 00:26:43,600
then that means that counters will never

846
00:26:43,600 --> 00:26:45,520
be checked for that device

847
00:26:45,520 --> 00:26:47,120
and of course the browser is still a

848
00:26:47,120 --> 00:26:49,120
large target for you

849
00:26:49,120 --> 00:26:52,400
during any kind of engagement

850
00:26:52,400 --> 00:26:54,320
if you're a relying party aka

851
00:26:54,320 --> 00:26:56,640
implementing this web authent standard

852
00:26:56,640 --> 00:26:58,799
just being standards compliant is not

853
00:26:58,799 --> 00:27:00,640
enough to be secure

854
00:27:00,640 --> 00:27:02,400
you must persist the user verification

855
00:27:02,400 --> 00:27:04,320
boolean and the policy that was used at

856
00:27:04,320 --> 00:27:05,600
registration

857
00:27:05,600 --> 00:27:07,200
and you must then subsequently check

858
00:27:07,200 --> 00:27:08,960
this boolean for that credential if it's

859
00:27:08,960 --> 00:27:10,320
used in the future

860
00:27:10,320 --> 00:27:12,240
this even happens with discouraged where

861
00:27:12,240 --> 00:27:14,240
apple's touch id will always send user

862
00:27:14,240 --> 00:27:15,279
verification true

863
00:27:15,279 --> 00:27:16,880
even if you weren't requesting it and

864
00:27:16,880 --> 00:27:18,320
you should be checking that because if

865
00:27:18,320 --> 00:27:19,120
it's not true

866
00:27:19,120 --> 00:27:20,240
something is really wrong with that

867
00:27:20,240 --> 00:27:22,559
credential you must ensure your

868
00:27:22,559 --> 00:27:23,600
challenges are coming from a

869
00:27:23,600 --> 00:27:24,960
cryptographically secure random number

870
00:27:24,960 --> 00:27:25,679
generator

871
00:27:25,679 --> 00:27:28,799
and must be 16 bytes or longer you must

872
00:27:28,799 --> 00:27:30,320
check your excluded credentials

873
00:27:30,320 --> 00:27:32,640
at registration if you're excluding them

874
00:27:32,640 --> 00:27:34,720
check that they aren't being used

875
00:27:34,720 --> 00:27:37,919
assume nothing about a registered device

876
00:27:37,919 --> 00:27:39,840
unless it is from the attestation data

877
00:27:39,840 --> 00:27:41,919
or a signed extension

878
00:27:41,919 --> 00:27:44,159
every other element of this standard is

879
00:27:44,159 --> 00:27:45,360
intended to be a

880
00:27:45,360 --> 00:27:48,080
hint and guidance to the client on what

881
00:27:48,080 --> 00:27:50,159
authenticators the user should select

882
00:27:50,159 --> 00:27:52,240
they are not policy and they are not

883
00:27:52,240 --> 00:27:54,960
enforceable

884
00:27:55,440 --> 00:27:57,440
if you're a consumer of web authent so

885
00:27:57,440 --> 00:27:59,039
let's say you're consuming an identity

886
00:27:59,039 --> 00:28:01,600
service of some kind that uses this

887
00:28:01,600 --> 00:28:03,679
check the javascript if your relying

888
00:28:03,679 --> 00:28:05,200
party is offering user verification

889
00:28:05,200 --> 00:28:05,919
preferred

890
00:28:05,919 --> 00:28:08,320
or user or no user verification at all

891
00:28:08,320 --> 00:28:09,679
you must pressure them

892
00:28:09,679 --> 00:28:11,440
to set this to be either discouraged or

893
00:28:11,440 --> 00:28:14,080
required you must be clear about this

894
00:28:14,080 --> 00:28:15,840
because that way you know exactly how

895
00:28:15,840 --> 00:28:18,000
your tokens are being used

896
00:28:18,000 --> 00:28:19,440
if they're asked if your relying party

897
00:28:19,440 --> 00:28:21,279
goes above and beyond this standard

898
00:28:21,279 --> 00:28:22,559
and they're persisting this user

899
00:28:22,559 --> 00:28:24,080
verification information because if they

900
00:28:24,080 --> 00:28:25,360
aren't

901
00:28:25,360 --> 00:28:27,840
this may be bypassable just being stance

902
00:28:27,840 --> 00:28:29,600
compliant is not enough

903
00:28:29,600 --> 00:28:31,039
you really need to understand your

904
00:28:31,039 --> 00:28:32,640
security policy requirements

905
00:28:32,640 --> 00:28:34,399
and you must understand what weber thing

906
00:28:34,399 --> 00:28:36,799
can and cannot enforce

907
00:28:36,799 --> 00:28:38,320
the only things you can really check is

908
00:28:38,320 --> 00:28:39,679
from that attestation certificate and

909
00:28:39,679 --> 00:28:40,799
those sign extensions

910
00:28:40,799 --> 00:28:43,039
everything else is a hint and finally

911
00:28:43,039 --> 00:28:44,240
you must

912
00:28:44,240 --> 00:28:46,080
protect your authentication site's

913
00:28:46,080 --> 00:28:47,840
javascript and ensure your browser

914
00:28:47,840 --> 00:28:48,559
updated

915
00:28:48,559 --> 00:28:50,159
because these are assumed to be trusted

916
00:28:50,159 --> 00:28:53,760
components in this entire operation

917
00:28:53,760 --> 00:28:56,399
and for everyone web authent is still

918
00:28:56,399 --> 00:28:58,080
today despite its flaws

919
00:28:58,080 --> 00:29:00,159
the most secure and accessible form of

920
00:29:00,159 --> 00:29:02,000
cryptographic authentication we have

921
00:29:02,000 --> 00:29:05,200
and it will only continue to improve so

922
00:29:05,200 --> 00:29:07,039
thank you very much and i hope that this

923
00:29:07,039 --> 00:29:13,840
has been informative

924
00:29:15,840 --> 00:29:18,960
your uh your timing was on point uh

925
00:29:18,960 --> 00:29:22,080
questions fraser i knew we'd have one

926
00:29:22,080 --> 00:29:23,520
no there's no heckling from fraser

927
00:29:23,520 --> 00:29:26,159
allowed thanks will

928
00:29:26,159 --> 00:29:28,640
um regarding the attestation

929
00:29:28,640 --> 00:29:29,520
certificates

930
00:29:29,520 --> 00:29:33,679
okay this um implies that the

931
00:29:33,679 --> 00:29:36,720
relying parties have a

932
00:29:36,720 --> 00:29:40,000
set of trusted certificates yep and

933
00:29:40,000 --> 00:29:41,600
that's also something if the relying

934
00:29:41,600 --> 00:29:42,399
party

935
00:29:42,399 --> 00:29:44,399
there is part of the standard uh which i

936
00:29:44,399 --> 00:29:45,600
didn't go over which is that

937
00:29:45,600 --> 00:29:47,279
there is actually a list of places where

938
00:29:47,279 --> 00:29:48,799
you can get those where you can get

939
00:29:48,799 --> 00:29:49,200
those

940
00:29:49,200 --> 00:29:52,000
uh certificate origins from and the cas

941
00:29:52,000 --> 00:29:52,799
and things like that

942
00:29:52,799 --> 00:29:55,679
and of course again uh the relying party

943
00:29:55,679 --> 00:29:56,480
may

944
00:29:56,480 --> 00:29:58,399
also not do this properly and so can you

945
00:29:58,399 --> 00:30:00,559
really trust that attestation

946
00:30:00,559 --> 00:30:02,480
right um and so my question is about

947
00:30:02,480 --> 00:30:04,720
onboarding so and curation who actually

948
00:30:04,720 --> 00:30:05,679
creates these

949
00:30:05,679 --> 00:30:09,039
uh trusted uh sets

950
00:30:09,039 --> 00:30:11,679
you know it's basically like a like the

951
00:30:11,679 --> 00:30:13,360
vendor of that token

952
00:30:13,360 --> 00:30:15,279
will issue and it will say okay i'm

953
00:30:15,279 --> 00:30:17,200
publishing my tokens that they are doing

954
00:30:17,200 --> 00:30:18,640
u2f at a station

955
00:30:18,640 --> 00:30:20,640
and then it will publish its ca chain

956
00:30:20,640 --> 00:30:22,080
and then that will be sent to the

957
00:30:22,080 --> 00:30:24,960
fido alliance which is the standards

958
00:30:24,960 --> 00:30:26,240
body that governs whether a token is

959
00:30:26,240 --> 00:30:27,520
phytocompliant or not

960
00:30:27,520 --> 00:30:30,960
and then they hold that list of the cas

961
00:30:30,960 --> 00:30:32,480
and then that way you can access that

962
00:30:32,480 --> 00:30:34,000
and then you get that information and

963
00:30:34,000 --> 00:30:35,120
then you can use that to

964
00:30:35,120 --> 00:30:36,880
build up your trust change so the fido

965
00:30:36,880 --> 00:30:38,880
alliance or the w3c is really kind of

966
00:30:38,880 --> 00:30:40,000
the ca group

967
00:30:40,000 --> 00:30:42,240
but it's many but the manufacturers of

968
00:30:42,240 --> 00:30:43,600
what actually does that

969
00:30:43,600 --> 00:30:47,120
uh creating that chain um and so yeah

970
00:30:47,120 --> 00:30:49,440
good mma a good representation uh it

971
00:30:49,440 --> 00:30:50,559
might be a little

972
00:30:50,559 --> 00:30:52,159
unrelated but like do you see this

973
00:30:52,159 --> 00:30:54,399
technology coming to phones at any time

974
00:30:54,399 --> 00:30:56,640
to what phones yeah mobile phones for

975
00:30:56,640 --> 00:30:57,679
you it's already that

976
00:30:57,679 --> 00:31:00,000
can you can can could i use my iphone as

977
00:31:00,000 --> 00:31:01,200
a hardware key to

978
00:31:01,200 --> 00:31:02,880
it's already in the standard touch id is

979
00:31:02,880 --> 00:31:05,279
already supported like uh

980
00:31:05,279 --> 00:31:07,679
uh uh sorry i mean uh could i use on my

981
00:31:07,679 --> 00:31:08,720
laptop

982
00:31:08,720 --> 00:31:10,320
yeah your laptop's touch id is super

983
00:31:10,320 --> 00:31:12,240
supportive too could i use my phone as

984
00:31:12,240 --> 00:31:13,919
the hardware key on my laptop

985
00:31:13,919 --> 00:31:15,279
so as in you can use your phone to

986
00:31:15,279 --> 00:31:16,320
authenticate and operation on your

987
00:31:16,320 --> 00:31:17,039
laptop yes

988
00:31:17,039 --> 00:31:18,480
that would be relying party-specific

989
00:31:18,480 --> 00:31:20,640
behavior this is more about

990
00:31:20,640 --> 00:31:22,240
this is not about can i use my phone to

991
00:31:22,240 --> 00:31:23,440
authenticate something on my laptop this

992
00:31:23,440 --> 00:31:24,320
is about saying

993
00:31:24,320 --> 00:31:26,320
i've logged into my phone my device can

994
00:31:26,320 --> 00:31:27,760
now continue to authenticate on my

995
00:31:27,760 --> 00:31:29,360
behalf with cryptographic auth

996
00:31:29,360 --> 00:31:32,320
whether your device that you have is

997
00:31:32,320 --> 00:31:33,600
doing cryptographic auth and then says

998
00:31:33,600 --> 00:31:35,279
oh that means my other device can then

999
00:31:35,279 --> 00:31:37,039
proceed that's a relying party specific

1000
00:31:37,039 --> 00:31:38,159
thing and that is

1001
00:31:38,159 --> 00:31:40,159
you know up to that but you know again

1002
00:31:40,159 --> 00:31:41,279
at that point it's kind of like well if

1003
00:31:41,279 --> 00:31:43,039
your laptop also has a cryptographic

1004
00:31:43,039 --> 00:31:44,080
co-processor

1005
00:31:44,080 --> 00:31:45,840
why do you need your phones one to do

1006
00:31:45,840 --> 00:31:47,120
the same operation that your secure

1007
00:31:47,120 --> 00:31:48,000
enclave on your

1008
00:31:48,000 --> 00:31:49,600
or your tpm on your your machine could

1009
00:31:49,600 --> 00:31:51,039
do because that device is continuing to

1010
00:31:51,039 --> 00:31:52,720
authenticate on your behalf

1011
00:31:52,720 --> 00:31:55,440
so uh like that would be relying party

1012
00:31:55,440 --> 00:31:56,399
specific behavior though

1013
00:31:56,399 --> 00:32:00,159
yeah okay cool thank you yeah good talk

1014
00:32:00,159 --> 00:32:03,200
um can something like this be um

1015
00:32:03,200 --> 00:32:05,200
have 2fa in addition to that so you have

1016
00:32:05,200 --> 00:32:07,039
like your token key that you have with

1017
00:32:07,039 --> 00:32:08,320
you and still generate like a

1018
00:32:08,320 --> 00:32:10,799
uh um you know the the code on your

1019
00:32:10,799 --> 00:32:12,240
phone or something like absolutely the

1020
00:32:12,240 --> 00:32:13,919
the workflow the relying party wants to

1021
00:32:13,919 --> 00:32:15,200
go through in terms of that offering

1022
00:32:15,200 --> 00:32:16,399
that authentication

1023
00:32:16,399 --> 00:32:18,399
um uh that's completely up to you you

1024
00:32:18,399 --> 00:32:20,000
can still say want to have a password

1025
00:32:20,000 --> 00:32:21,440
first or maybe you have your web within

1026
00:32:21,440 --> 00:32:23,360
first and then maybe have a totp as well

1027
00:32:23,360 --> 00:32:24,000
like

1028
00:32:24,000 --> 00:32:25,679
you know you can have it so maybe you

1029
00:32:25,679 --> 00:32:27,679
have just the user verified token for

1030
00:32:27,679 --> 00:32:28,000
touch

1031
00:32:28,000 --> 00:32:29,919
id maybe that's sufficient for your

1032
00:32:29,919 --> 00:32:32,080
policy maybe that's not maybe you need

1033
00:32:32,080 --> 00:32:34,159
a password and the user verified token

1034
00:32:34,159 --> 00:32:35,679
like it depends on how many factors you

1035
00:32:35,679 --> 00:32:36,320
want

1036
00:32:36,320 --> 00:32:38,240
all of this stuff again that is behavior

1037
00:32:38,240 --> 00:32:39,440
and policy that you

1038
00:32:39,440 --> 00:32:42,240
can configure as a relying party or an

1039
00:32:42,240 --> 00:32:43,279
auth provider

1040
00:32:43,279 --> 00:32:45,919
uh and many auth providers can do this

1041
00:32:45,919 --> 00:32:47,760
so it really comes down to what your

1042
00:32:47,760 --> 00:32:48,720
needs are

1043
00:32:48,720 --> 00:32:50,960
um and what you want like i would expect

1044
00:32:50,960 --> 00:32:52,720
to see that there are websites

1045
00:32:52,720 --> 00:32:54,559
uh which begin to just have unverified

1046
00:32:54,559 --> 00:32:55,919
web or then is the sole factor of

1047
00:32:55,919 --> 00:32:56,720
authentication

1048
00:32:56,720 --> 00:32:58,399
because that's already lifting the bar

1049
00:32:58,399 --> 00:32:59,600
so much higher than what we have with

1050
00:32:59,600 --> 00:33:00,320
passwords

1051
00:33:00,320 --> 00:33:02,000
but i can also see high security

1052
00:33:02,000 --> 00:33:04,000
environments requiring not only a

1053
00:33:04,000 --> 00:33:05,039
verified

1054
00:33:05,039 --> 00:33:07,120
web of end token in terms and probably

1055
00:33:07,120 --> 00:33:08,840
with a

1056
00:33:08,840 --> 00:33:11,519
discoverable uh key um there's a

1057
00:33:11,519 --> 00:33:12,720
something i didn't cover here which is

1058
00:33:12,720 --> 00:33:14,559
to do with where the keys are whether

1059
00:33:14,559 --> 00:33:16,159
it's in the token or whether it's

1060
00:33:16,159 --> 00:33:18,159
discoverable or whatever um but yeah you

1061
00:33:18,159 --> 00:33:19,919
can have that key non-discoverable

1062
00:33:19,919 --> 00:33:21,679
uh sorry discoverable in this case and

1063
00:33:21,679 --> 00:33:23,200
um

1064
00:33:23,200 --> 00:33:25,440
yeah the terminology is so confusing

1065
00:33:25,440 --> 00:33:27,200
it's like discoverable discoverable keys

1066
00:33:27,200 --> 00:33:28,320
means that they can't be

1067
00:33:28,320 --> 00:33:29,760
extracted and known whereas

1068
00:33:29,760 --> 00:33:31,840
non-discoverable are key wrapped keys

1069
00:33:31,840 --> 00:33:33,039
where the credential id

1070
00:33:33,039 --> 00:33:34,880
is actually an encrypted format of the

1071
00:33:34,880 --> 00:33:36,080
key and then you've got to give it back

1072
00:33:36,080 --> 00:33:37,679
to the authenticator before it can even

1073
00:33:37,679 --> 00:33:38,720
do the authentication

1074
00:33:38,720 --> 00:33:40,000
but the terminology is completely

1075
00:33:40,000 --> 00:33:41,120
backwards what you think so you hear

1076
00:33:41,120 --> 00:33:41,919
discoverable

1077
00:33:41,919 --> 00:33:43,039
what do you mean you can steal my

1078
00:33:43,039 --> 00:33:44,399
credential and it's not it actually

1079
00:33:44,399 --> 00:33:46,399
means you can't steal this one whereas

1080
00:33:46,399 --> 00:33:47,519
non-discoverable means you can

1081
00:33:47,519 --> 00:33:50,840
absolutely steal this one if you

1082
00:33:50,840 --> 00:33:53,030
yes

1083
00:33:53,030 --> 00:33:54,840
[Music]

1084
00:33:54,840 --> 00:33:57,440
[Applause]

1085
00:33:57,440 --> 00:34:07,840
awesome thank you

1086
00:34:14,560 --> 00:34:16,639
you

