1
00:00:17,630 --> 00:00:24,890
and our next speaker of course is Justin

2
00:00:19,610 --> 00:00:28,520
Stephen with the most puntastic calm

3
00:00:24,890 --> 00:00:29,599
talk title the IDS of March the Ides of

4
00:00:28,520 --> 00:00:31,880
March you get it

5
00:00:29,599 --> 00:00:34,100
software is eating the world and in the

6
00:00:31,880 --> 00:00:35,870
era of DevOps those who are cutting the

7
00:00:34,100 --> 00:00:37,340
code often have privileged access to

8
00:00:35,870 --> 00:00:39,829
production systems and software delivery

9
00:00:37,340 --> 00:00:42,559
pipelines a developer's workstation is a

10
00:00:39,829 --> 00:00:44,270
fantastic place for an adversary to be

11
00:00:42,559 --> 00:00:46,250
in 2019

12
00:00:44,270 --> 00:00:48,530
we're often hearing about supply chain

13
00:00:46,250 --> 00:00:50,120
stuff so yes absolutely

14
00:00:48,530 --> 00:00:51,980
we're relentlessly and rightfully

15
00:00:50,120 --> 00:00:54,349
focused on secure design code quality

16
00:00:51,980 --> 00:00:56,540
and killing bugs but are we hearing the

17
00:00:54,350 --> 00:00:58,910
call to protect the people and systems

18
00:00:56,540 --> 00:01:01,640
responsible for building and operating

19
00:00:58,910 --> 00:01:03,648
our squeaky clean code I see what you

20
00:01:01,640 --> 00:01:07,340
did there cuz you know it's not is it

21
00:01:03,649 --> 00:01:09,040
really anyway without further delay

22
00:01:07,340 --> 00:01:09,890
Justin Stephen

23
00:01:09,040 --> 00:01:17,140
[Applause]

24
00:01:09,890 --> 00:01:20,000
[Music]

25
00:01:17,140 --> 00:01:22,070
cool thanks very much Pat my name is

26
00:01:20,000 --> 00:01:23,509
Justin really excited as much as someone

27
00:01:22,070 --> 00:01:25,940
can be excited to talk about software

28
00:01:23,509 --> 00:01:27,619
delivery and software development

29
00:01:25,940 --> 00:01:29,750
software security today to share some

30
00:01:27,619 --> 00:01:32,750
thoughts opinions feelings I have about

31
00:01:29,750 --> 00:01:35,990
the security of tools and software used

32
00:01:32,750 --> 00:01:37,399
in developing software so I'm a

33
00:01:35,990 --> 00:01:39,199
freelance application security

34
00:01:37,399 --> 00:01:41,750
specialist in my spare time I enjoy

35
00:01:39,200 --> 00:01:44,270
playing CTF attempting to write exploits

36
00:01:41,750 --> 00:01:46,670
and long walks on the beach from time to

37
00:01:44,270 --> 00:01:48,740
time I stream on twitch TV where I do

38
00:01:46,670 --> 00:01:51,590
CTF challenges vulnerability stuff

39
00:01:48,740 --> 00:01:54,860
exploits stuff live and make a fool of

40
00:01:51,590 --> 00:01:58,130
myself on the spot really important to

41
00:01:54,860 --> 00:01:59,960
note I am NOT a developer nor am I a pen

42
00:01:58,130 --> 00:02:01,970
tester I've got some feelings and

43
00:01:59,960 --> 00:02:04,908
thoughts about both those disciplines

44
00:02:01,970 --> 00:02:07,039
about how developers use their tools and

45
00:02:04,909 --> 00:02:08,479
about how its secure those tools are

46
00:02:07,039 --> 00:02:11,030
when they're used in the way they are

47
00:02:08,479 --> 00:02:13,489
but I'm not a developer so apologies for

48
00:02:11,030 --> 00:02:15,200
any miss information I'd spread in that

49
00:02:13,489 --> 00:02:16,910
way but these are just my observations

50
00:02:15,200 --> 00:02:19,820
as someone who does source code review

51
00:02:16,910 --> 00:02:21,560
and application penetration testing I'm

52
00:02:19,820 --> 00:02:23,540
also not a pen tester so while I test

53
00:02:21,560 --> 00:02:25,640
software I don't do the business of

54
00:02:23,540 --> 00:02:28,160
hacking to businesses I do have some

55
00:02:25,640 --> 00:02:29,839
thoughts and feelings about the risks

56
00:02:28,160 --> 00:02:33,260
that software development software

57
00:02:29,840 --> 00:02:34,730
insecurities pose to enterprise but I'm

58
00:02:33,260 --> 00:02:36,970
not someone who's responsible for doing

59
00:02:34,730 --> 00:02:40,190
the business to businesses so again

60
00:02:36,970 --> 00:02:43,010
apologies if I am not quite on the mark

61
00:02:40,190 --> 00:02:45,560
there these are just my thoughts so this

62
00:02:43,010 --> 00:02:48,769
is me this is how I imagine myself as

63
00:02:45,560 --> 00:02:51,650
being Sid from Toy Story in as much as

64
00:02:48,769 --> 00:02:54,709
when I'm bored I tend to blow up my own

65
00:02:51,650 --> 00:02:56,989
toys I look at the tools in my pipeline

66
00:02:54,709 --> 00:02:59,299
and the tools that I use in my work and

67
00:02:56,989 --> 00:03:01,070
think about if I was to hack myself what

68
00:02:59,299 --> 00:03:02,989
sort of bugs are there in the tools that

69
00:03:01,070 --> 00:03:05,000
I use and if you're looking to get

70
00:03:02,989 --> 00:03:07,010
started in vulnerability discovery and

71
00:03:05,000 --> 00:03:08,630
bug hunting and exploit development I'd

72
00:03:07,010 --> 00:03:10,370
really encourage you to start with what

73
00:03:08,630 --> 00:03:12,290
you know start with the tools in your

74
00:03:10,370 --> 00:03:13,579
tool chain or start with the software

75
00:03:12,290 --> 00:03:14,989
relevant to your industry

76
00:03:13,579 --> 00:03:16,700
you've got the home till that field

77
00:03:14,989 --> 00:03:18,530
advantage there you know a bit about

78
00:03:16,700 --> 00:03:20,089
what's going on and it gives you some

79
00:03:18,530 --> 00:03:22,100
really interesting insight into the

80
00:03:20,090 --> 00:03:25,549
risks that you might be exposing your

81
00:03:22,100 --> 00:03:26,660
machine to with the tools you use so

82
00:03:25,549 --> 00:03:28,850
what are we going to cover today we'll

83
00:03:26,660 --> 00:03:29,060
start off with what do I mean when I say

84
00:03:28,850 --> 00:03:31,310
so

85
00:03:29,060 --> 00:03:33,920
we're development software we'll move on

86
00:03:31,310 --> 00:03:35,750
to some thoughts I have about why the

87
00:03:33,920 --> 00:03:38,390
people who use these tools are

88
00:03:35,750 --> 00:03:40,010
particularly interesting targets will

89
00:03:38,390 --> 00:03:41,720
unwrap the layers on a couple of

90
00:03:40,010 --> 00:03:44,810
vulnerabilities I found a few years ago

91
00:03:41,720 --> 00:03:46,849
now in our VM and Visual Studio code and

92
00:03:44,810 --> 00:03:49,190
we'll close with some thoughts on is

93
00:03:46,849 --> 00:03:51,099
this a risk and if it's a risk what sort

94
00:03:49,190 --> 00:03:54,050
of things can we do about it

95
00:03:51,099 --> 00:03:56,119
so to start off with what do I mean when

96
00:03:54,050 --> 00:03:58,370
I say software development software I'm

97
00:03:56,120 --> 00:04:01,130
talking about the tools applications and

98
00:03:58,370 --> 00:04:03,830
programs used by developers on their

99
00:04:01,130 --> 00:04:05,780
workstation use in build pipelines

100
00:04:03,830 --> 00:04:07,940
things like your Jenkins and your bamboo

101
00:04:05,780 --> 00:04:10,130
all the little bits and pieces that fit

102
00:04:07,940 --> 00:04:11,630
into that software delivery pipeline I'm

103
00:04:10,130 --> 00:04:13,400
talking about the tools that many of us

104
00:04:11,630 --> 00:04:17,659
as secure actually you know what I'm

105
00:04:13,400 --> 00:04:20,918
curious who here's a developer cool I'd

106
00:04:17,660 --> 00:04:23,479
say about 15-20 percent that's awesome

107
00:04:20,918 --> 00:04:25,310
these are tools that apply to software

108
00:04:23,479 --> 00:04:27,349
development but they also apply to many

109
00:04:25,310 --> 00:04:29,720
in kind of the pen testing or security

110
00:04:27,350 --> 00:04:31,160
hobbyist space as well a lot of these

111
00:04:29,720 --> 00:04:34,400
tools are ones that many of us in the

112
00:04:31,160 --> 00:04:35,720
room use so I'm talking and when I when

113
00:04:34,400 --> 00:04:37,159
I think of software development software

114
00:04:35,720 --> 00:04:39,710
I kind of split it into three different

115
00:04:37,160 --> 00:04:43,070
buckets very very roughly so the left

116
00:04:39,710 --> 00:04:44,900
hand slice here is bits and pieces and

117
00:04:43,070 --> 00:04:45,860
these are the environment tools there

118
00:04:44,900 --> 00:04:47,419
are things in your development

119
00:04:45,860 --> 00:04:49,520
environment and things in the build

120
00:04:47,419 --> 00:04:51,830
environment they're helper tools or

121
00:04:49,520 --> 00:04:53,060
their tasks runner tools they're kind of

122
00:04:51,830 --> 00:04:55,219
the bits and bobs that help you get

123
00:04:53,060 --> 00:04:56,960
things done when you're developing and

124
00:04:55,220 --> 00:04:58,970
delivering software the middle slice

125
00:04:56,960 --> 00:05:00,888
there is kind of the meat meat and

126
00:04:58,970 --> 00:05:03,169
potatoes of a software developers

127
00:05:00,889 --> 00:05:05,030
workstation it's your IDE or your

128
00:05:03,169 --> 00:05:07,159
integrated development environment it's

129
00:05:05,030 --> 00:05:09,700
it's a fancy text editor change my mind

130
00:05:07,160 --> 00:05:12,860
but it's a fancy text editor with

131
00:05:09,700 --> 00:05:14,690
features like syntax highlighting a tree

132
00:05:12,860 --> 00:05:16,900
view so you can see all the files in the

133
00:05:14,690 --> 00:05:21,770
project globe will find and replace

134
00:05:16,900 --> 00:05:23,630
refactoring tools little hover over tips

135
00:05:21,770 --> 00:05:25,549
it has integration with tools in the

136
00:05:23,630 --> 00:05:27,500
first slice here it's got an integration

137
00:05:25,550 --> 00:05:29,330
with a compiler a debugger all these

138
00:05:27,500 --> 00:05:32,479
things that make life easy when you're

139
00:05:29,330 --> 00:05:34,520
coding code and finally I put the rest

140
00:05:32,479 --> 00:05:36,469
of the tools in the third bucket of your

141
00:05:34,520 --> 00:05:38,000
build Orchestrator and these typically

142
00:05:36,470 --> 00:05:39,740
run on a centralized server

143
00:05:38,000 --> 00:05:42,020
it's your Jenkins it's your bamboo and

144
00:05:39,740 --> 00:05:44,419
these orchestrate the build and test of

145
00:05:42,020 --> 00:05:46,940
software in an enterprise so for those

146
00:05:44,419 --> 00:05:49,490
non developers in the room this is very

147
00:05:46,940 --> 00:05:51,169
very roughly what software delivery in

148
00:05:49,490 --> 00:05:53,270
an enterprise looks like you've got your

149
00:05:51,169 --> 00:05:56,870
developer workstation up the top they

150
00:05:53,270 --> 00:05:59,030
push code in to get Jenkins or bamboo or

151
00:05:56,870 --> 00:06:02,419
your build Orchestrator pulls the code

152
00:05:59,030 --> 00:06:05,659
from git compiles it runs all the tests

153
00:06:02,419 --> 00:06:07,609
if the tests pass it stores the bills in

154
00:06:05,659 --> 00:06:09,199
an artifact repository and sometimes it

155
00:06:07,610 --> 00:06:12,169
pushes it straight into production or

156
00:06:09,199 --> 00:06:13,669
test infrastructure also of note is the

157
00:06:12,169 --> 00:06:15,650
cheeky little channel I've put on the

158
00:06:13,669 --> 00:06:16,639
right-hand side there these days and

159
00:06:15,650 --> 00:06:18,258
we'll talk about this in a minute

160
00:06:16,639 --> 00:06:21,319
many developers have privileged access

161
00:06:18,259 --> 00:06:23,419
to infrastructure so today I wanted to

162
00:06:21,319 --> 00:06:25,729
talk about this whole story but that's

163
00:06:23,419 --> 00:06:27,710
that's a lot I found out so we're going

164
00:06:25,729 --> 00:06:29,719
to focus just today on the developers

165
00:06:27,710 --> 00:06:32,239
workstation and the tools that are used

166
00:06:29,720 --> 00:06:35,840
on that development workstation as part

167
00:06:32,240 --> 00:06:37,789
of delivering software so this is a flow

168
00:06:35,840 --> 00:06:40,099
that many in the room are probably quite

169
00:06:37,789 --> 00:06:43,250
familiar with where we pull code down

170
00:06:40,099 --> 00:06:45,800
off of github to look at it and/or run

171
00:06:43,250 --> 00:06:48,380
it so this is just an example me putting

172
00:06:45,800 --> 00:06:49,940
those tools into a security person's

173
00:06:48,380 --> 00:06:52,580
work folks I'm sure many of us have in

174
00:06:49,940 --> 00:06:54,110
the room have done this and we're all

175
00:06:52,580 --> 00:06:56,090
quite aware that when you run random

176
00:06:54,110 --> 00:06:58,159
stuff off github if there's malicious

177
00:06:56,090 --> 00:07:00,229
stuff in the code itself bad things

178
00:06:58,159 --> 00:07:02,090
might happen to your machine but what

179
00:07:00,229 --> 00:07:05,568
about the rest of the chain how many

180
00:07:02,090 --> 00:07:08,270
things in this git clone CD read the

181
00:07:05,569 --> 00:07:09,710
code build the code run the code how

182
00:07:08,270 --> 00:07:13,039
many of these actually exposing us to

183
00:07:09,710 --> 00:07:15,049
danger well when you run a build such as

184
00:07:13,039 --> 00:07:16,880
you know running make or bundled

185
00:07:15,050 --> 00:07:18,650
installed to go and get the third-party

186
00:07:16,880 --> 00:07:22,190
gems against something you've downloaded

187
00:07:18,650 --> 00:07:24,229
off github it's surprising what goes on

188
00:07:22,190 --> 00:07:26,690
under the hood if you're not aware you

189
00:07:24,229 --> 00:07:28,940
know a makefile is really just a really

190
00:07:26,690 --> 00:07:31,219
really fancy shell script so if you run

191
00:07:28,940 --> 00:07:31,940
make it can just run whatever it wants

192
00:07:31,219 --> 00:07:34,789
on your machine

193
00:07:31,940 --> 00:07:36,680
so maybe the the build metadata or the

194
00:07:34,789 --> 00:07:39,789
built manifest might be what gets you

195
00:07:36,680 --> 00:07:41,840
owned what about reading the code well

196
00:07:39,789 --> 00:07:43,909
surprise surprise when you view

197
00:07:41,840 --> 00:07:45,979
documents in a document editor sometimes

198
00:07:43,909 --> 00:07:49,130
bad things might happen so there might

199
00:07:45,979 --> 00:07:51,320
be vulnerabilities in your IDE such that

200
00:07:49,130 --> 00:07:53,330
just opening the code with no intention

201
00:07:51,320 --> 00:07:55,070
to build it and run it might be what

202
00:07:53,330 --> 00:07:55,969
gets you owned and we'll dig into one of

203
00:07:55,070 --> 00:07:59,839
these in a few men

204
00:07:55,969 --> 00:08:02,409
it's so what about CD so you download

205
00:07:59,839 --> 00:08:06,379
some code and CD into it

206
00:08:02,409 --> 00:08:07,998
pretty safe well some of these helper

207
00:08:06,379 --> 00:08:09,799
tools that I mentioned before they

208
00:08:07,999 --> 00:08:13,039
actually stitch themselves up into your

209
00:08:09,799 --> 00:08:15,109
shell and interfere or hook CD and

210
00:08:13,039 --> 00:08:16,878
seeding into a directory with a

211
00:08:15,110 --> 00:08:18,679
malicious file in it might cause some

212
00:08:16,879 --> 00:08:21,739
harm and we'll dig into one of these as

213
00:08:18,679 --> 00:08:23,869
well and finally get clone well there's

214
00:08:21,739 --> 00:08:25,518
been vulnerabilities in git itself so

215
00:08:23,869 --> 00:08:28,219
even just pulling stuff down off github

216
00:08:25,519 --> 00:08:30,199
if it's a malicious repository and git

217
00:08:28,219 --> 00:08:32,149
can stumble and end up getting your

218
00:08:30,199 --> 00:08:34,279
owned so it's kind of surprising when

219
00:08:32,149 --> 00:08:36,769
you look closely at the tools that go

220
00:08:34,279 --> 00:08:38,809
into this five step process just how

221
00:08:36,769 --> 00:08:43,310
much attack service there is under the

222
00:08:38,809 --> 00:08:45,229
hood in these tools we use so why why

223
00:08:43,309 --> 00:08:51,888
would we want to attack people who run

224
00:08:45,230 --> 00:08:53,000
these types of tools the first thing

225
00:08:51,889 --> 00:08:54,920
that comes to mind for me is

226
00:08:53,000 --> 00:08:57,589
confidentiality of enterprise source

227
00:08:54,920 --> 00:08:59,240
code so source code for an organization

228
00:08:57,589 --> 00:09:02,059
is often very valuable intellectual

229
00:08:59,240 --> 00:09:04,399
property and if it's leaked or stolen it

230
00:09:02,059 --> 00:09:07,370
could be stolen for economic espionage

231
00:09:04,399 --> 00:09:09,559
or it could be stolen so that a black

232
00:09:07,370 --> 00:09:11,480
box engagement for an adversary becomes

233
00:09:09,559 --> 00:09:14,290
a white box engagement you can read the

234
00:09:11,480 --> 00:09:17,059
code find the bugs exploit production

235
00:09:14,290 --> 00:09:18,889
also in many organizations there's in

236
00:09:17,059 --> 00:09:20,839
internal culture of sharing and

237
00:09:18,889 --> 00:09:23,029
collaboration and it's often the case

238
00:09:20,839 --> 00:09:24,860
that source code is available to all the

239
00:09:23,029 --> 00:09:26,990
developers in an organization so the

240
00:09:24,860 --> 00:09:29,509
developers will be split into teams but

241
00:09:26,990 --> 00:09:31,149
often every team can read everyone

242
00:09:29,509 --> 00:09:34,100
else's code for knowledge sharing

243
00:09:31,149 --> 00:09:36,170
collaboration and Inter operation so if

244
00:09:34,100 --> 00:09:38,209
you take one developers workstation you

245
00:09:36,170 --> 00:09:41,449
might have the access you need to take

246
00:09:38,209 --> 00:09:44,689
all the code so the supply chain has

247
00:09:41,449 --> 00:09:47,449
alluded to the supply chain is really

248
00:09:44,689 --> 00:09:49,699
really interesting and messy right now

249
00:09:47,449 --> 00:09:52,128
so there's the free open source supply

250
00:09:49,699 --> 00:09:54,019
chain you look at things like NPM you

251
00:09:52,129 --> 00:09:55,699
look at ruby gems and there's a whole

252
00:09:54,019 --> 00:09:57,559
bunch of awfulness being put out into

253
00:09:55,699 --> 00:09:59,449
that space and it's also a whole bunch

254
00:09:57,559 --> 00:10:02,329
of take over that's happening in that

255
00:09:59,449 --> 00:10:05,089
space so that was es lint a few months

256
00:10:02,329 --> 00:10:07,638
ago and just this week bootstraps sass I

257
00:10:05,089 --> 00:10:08,450
was mentioned by snick as having been

258
00:10:07,639 --> 00:10:11,029
compromised

259
00:10:08,450 --> 00:10:12,470
so I'm not saying that exploiting an

260
00:10:11,029 --> 00:10:14,930
open-source developers the best way to

261
00:10:12,470 --> 00:10:16,490
get yourself into this ecosystem you

262
00:10:14,930 --> 00:10:18,439
know in the case of the eslint it wasn't

263
00:10:16,490 --> 00:10:20,930
exploitation it was social engineering

264
00:10:18,440 --> 00:10:22,730
but takeovers of popular open source

265
00:10:20,930 --> 00:10:25,069
packages get you into a whole lot of

266
00:10:22,730 --> 00:10:27,800
interesting places and what about the

267
00:10:25,070 --> 00:10:30,860
non free supply chain we look at things

268
00:10:27,800 --> 00:10:32,719
like ccleaner Zeus and other such

269
00:10:30,860 --> 00:10:34,430
incidents we've got cases where

270
00:10:32,720 --> 00:10:36,170
organizations are compromised and

271
00:10:34,430 --> 00:10:38,449
malicious updates are pushing out to

272
00:10:36,170 --> 00:10:40,010
genuine customers in a really good place

273
00:10:38,449 --> 00:10:41,870
to do this sort of attack from in my

274
00:10:40,010 --> 00:10:47,300
opinion would be the developers

275
00:10:41,870 --> 00:10:49,699
workstation so 2019 from 2018 2017 all

276
00:10:47,300 --> 00:10:52,370
years of DevOps you know DevOps is

277
00:10:49,699 --> 00:10:54,800
pretty banging right now and so it's the

278
00:10:52,370 --> 00:10:56,959
case that in many places your software

279
00:10:54,800 --> 00:10:58,639
developers they are your sis admins and

280
00:10:56,959 --> 00:11:00,920
they are people maintaining

281
00:10:58,639 --> 00:11:04,070
troubleshooting and whatnot with

282
00:11:00,920 --> 00:11:06,319
infrastructure so again I'm not a pen

283
00:11:04,070 --> 00:11:07,970
tester but on a developer's workstation

284
00:11:06,320 --> 00:11:10,430
I think these three files would be

285
00:11:07,970 --> 00:11:12,380
pretty cool to have you know your bash

286
00:11:10,430 --> 00:11:14,180
history gives you the mud map of the

287
00:11:12,380 --> 00:11:17,060
network where did the developers connect

288
00:11:14,180 --> 00:11:19,550
to where do they SSH to take the SSH key

289
00:11:17,060 --> 00:11:22,969
take the AWS credentials I think you're

290
00:11:19,550 --> 00:11:25,550
having a pretty good day and finally the

291
00:11:22,970 --> 00:11:28,430
security team you know myself my review

292
00:11:25,550 --> 00:11:30,709
software source code my machine I think

293
00:11:28,430 --> 00:11:32,899
is a pretty cool place to be as well if

294
00:11:30,709 --> 00:11:34,760
you take over a machine of a software

295
00:11:32,899 --> 00:11:36,649
developer that's all well and good but

296
00:11:34,760 --> 00:11:39,140
someone who works in security who's also

297
00:11:36,649 --> 00:11:41,420
using the same tools on our workstations

298
00:11:39,140 --> 00:11:43,100
there are things like client reports we

299
00:11:41,420 --> 00:11:45,170
might take out machine from client to

300
00:11:43,100 --> 00:11:47,240
client without necessarily scrubbing it

301
00:11:45,170 --> 00:11:49,269
in-between we may be giving attackers

302
00:11:47,240 --> 00:11:51,529
free ride into our customers networks

303
00:11:49,269 --> 00:11:54,230
and I think it'd be really cool to kind

304
00:11:51,529 --> 00:11:56,240
of piggyback on a pentesters machine and

305
00:11:54,230 --> 00:11:58,490
go into an environment they start doing

306
00:11:56,240 --> 00:11:59,990
hacking you do hacking with them and

307
00:11:58,490 --> 00:12:04,670
then the blue team goes I don't worry

308
00:11:59,990 --> 00:12:06,860
there's a pen test going on so we've

309
00:12:04,670 --> 00:12:09,139
talked about what do I mean when I say

310
00:12:06,860 --> 00:12:11,690
software development software and we've

311
00:12:09,139 --> 00:12:13,579
talked about why I think the users of

312
00:12:11,690 --> 00:12:15,199
this software a couple of reasons why I

313
00:12:13,579 --> 00:12:17,719
think they're pretty interesting targets

314
00:12:15,199 --> 00:12:19,339
I really want to kind of peel back the

315
00:12:17,720 --> 00:12:20,880
layers now on a few vulnerabilities I

316
00:12:19,339 --> 00:12:25,710
found a few years ago so I think

317
00:12:20,880 --> 00:12:28,020
pretty cool so the first one I'd like to

318
00:12:25,710 --> 00:12:31,230
talk about is Ruby version manager or

319
00:12:28,020 --> 00:12:33,300
our VM so ruby version manager is one of

320
00:12:31,230 --> 00:12:37,710
those helper tools from the slide I

321
00:12:33,300 --> 00:12:40,560
showed earlier what it does is either as

322
00:12:37,710 --> 00:12:43,350
the developer of ruby code or the user

323
00:12:40,560 --> 00:12:45,869
of ruby code it helps you juggle and

324
00:12:43,350 --> 00:12:47,460
manage all the different rubies you need

325
00:12:45,870 --> 00:12:49,680
on your machine you know I've just

326
00:12:47,460 --> 00:12:51,300
picked three popular Ruby based pen

327
00:12:49,680 --> 00:12:52,849
testing tools and they all want

328
00:12:51,300 --> 00:12:55,500
different versions of Ruby

329
00:12:52,850 --> 00:12:56,550
so our VM helps you install all these

330
00:12:55,500 --> 00:12:58,260
different versions to your home

331
00:12:56,550 --> 00:13:01,079
directory and switch between them when

332
00:12:58,260 --> 00:13:01,860
you need to this is kind of funny and

333
00:13:01,080 --> 00:13:03,870
kind of cute

334
00:13:01,860 --> 00:13:06,000
I think the Metasploit development

335
00:13:03,870 --> 00:13:08,730
environment setup guide suggests that

336
00:13:06,000 --> 00:13:10,800
you install our VM to help you juggle

337
00:13:08,730 --> 00:13:12,540
your Ruby's while hacking on Metasploit

338
00:13:10,800 --> 00:13:15,930
and this is the reason why I used to

339
00:13:12,540 --> 00:13:18,959
have a VM on my machine so how does it

340
00:13:15,930 --> 00:13:21,449
work once you've installed our VM it

341
00:13:18,960 --> 00:13:23,460
pokes itself into your dot profile file

342
00:13:21,450 --> 00:13:25,860
which means that every single shell you

343
00:13:23,460 --> 00:13:30,240
open VM is there it's in the background

344
00:13:25,860 --> 00:13:32,910
waiting to help you out when you CD into

345
00:13:30,240 --> 00:13:35,790
a directory that is a ruby project like

346
00:13:32,910 --> 00:13:37,410
Metasploit framework our VM is kind of

347
00:13:35,790 --> 00:13:38,849
like clippy and it pokes its head out

348
00:13:37,410 --> 00:13:40,410
and goes hey looks like you're doing

349
00:13:38,850 --> 00:13:43,080
some really development would you like

350
00:13:40,410 --> 00:13:46,230
to install ruby version whatever and so

351
00:13:43,080 --> 00:13:48,500
you install it and from then on whenever

352
00:13:46,230 --> 00:13:52,320
you CD into the Metasploit directory

353
00:13:48,500 --> 00:13:54,900
your path changes and the Ruby that your

354
00:13:52,320 --> 00:13:58,830
system will choose to run switches

355
00:13:54,900 --> 00:14:00,510
behind the scenes automatically so I

356
00:13:58,830 --> 00:14:03,030
thought for a while that's pretty useful

357
00:14:00,510 --> 00:14:05,400
that's also pretty interesting I wonder

358
00:14:03,030 --> 00:14:08,060
how it achieves that how does our VM

359
00:14:05,400 --> 00:14:12,090
switch my Ruby's on-the-fly for me and

360
00:14:08,060 --> 00:14:14,489
then I didn't look into it until one day

361
00:14:12,090 --> 00:14:17,340
I was doing some shell scripting and I

362
00:14:14,490 --> 00:14:19,800
had turned on the set - X option in my

363
00:14:17,340 --> 00:14:22,350
shell so the set - X option is a debug

364
00:14:19,800 --> 00:14:24,120
option in bash or Bourne shell that

365
00:14:22,350 --> 00:14:26,070
basically prints out every time

366
00:14:24,120 --> 00:14:28,080
something happens it'll print out and

367
00:14:26,070 --> 00:14:29,400
what happened so it's really good for

368
00:14:28,080 --> 00:14:31,470
keeping an eye on what your shell

369
00:14:29,400 --> 00:14:34,810
scripts are doing and helping you debug

370
00:14:31,470 --> 00:14:38,200
your scripts so then I did a CD

371
00:14:34,810 --> 00:14:41,859
and this happened and like pages upon

372
00:14:38,200 --> 00:14:45,220
pages of debug output popped out all to

373
00:14:41,860 --> 00:14:49,090
do with our VM so first I was like this

374
00:14:45,220 --> 00:14:53,440
and then I was like this I realized that

375
00:14:49,090 --> 00:14:56,140
our VM was hooking CD and whenever I ran

376
00:14:53,440 --> 00:14:57,790
CD a VM would be like oh is there

377
00:14:56,140 --> 00:15:00,400
something that I can do to help you hear

378
00:14:57,790 --> 00:15:03,040
the place you're seeing - does it look

379
00:15:00,400 --> 00:15:04,900
like a ruby project if it does can I

380
00:15:03,040 --> 00:15:08,199
help you stitch up your environment to

381
00:15:04,900 --> 00:15:11,530
support you running it so I wanted to

382
00:15:08,200 --> 00:15:14,530
dig in and find out how was Ruby version

383
00:15:11,530 --> 00:15:17,650
manager checking to see if what I was

384
00:15:14,530 --> 00:15:20,260
seeding into was a ruby directory and

385
00:15:17,650 --> 00:15:23,410
all the parsing of files that I knew

386
00:15:20,260 --> 00:15:25,990
would have to do to help me out so I

387
00:15:23,410 --> 00:15:28,030
crept through the code for Ruby version

388
00:15:25,990 --> 00:15:29,860
which is one of the such files you know

389
00:15:28,030 --> 00:15:32,850
in a ruby project that specifies which

390
00:15:29,860 --> 00:15:36,940
version of ruby r vm should switch to

391
00:15:32,850 --> 00:15:40,390
then I dug into the RVM are see project

392
00:15:36,940 --> 00:15:41,650
file which looked kinda like this and

393
00:15:40,390 --> 00:15:44,949
there were all these chunks of code that

394
00:15:41,650 --> 00:15:46,569
pertained to different ruby version type

395
00:15:44,950 --> 00:15:49,870
files so I thought us on the right track

396
00:15:46,570 --> 00:15:52,090
and I saw this red highlight a bit of

397
00:15:49,870 --> 00:15:57,280
code which is to do with environment

398
00:15:52,090 --> 00:15:58,780
variables and I thought if I can if I

399
00:15:57,280 --> 00:16:00,880
can drop a file in a directory in

400
00:15:58,780 --> 00:16:03,790
someone's CDs into it and then I can set

401
00:16:00,880 --> 00:16:06,460
their environment arbitrarily I'm having

402
00:16:03,790 --> 00:16:07,990
a pretty good day so to make sure I was

403
00:16:06,460 --> 00:16:10,630
on the right track I use the age-old

404
00:16:07,990 --> 00:16:12,610
technique of debug by printf which is

405
00:16:10,630 --> 00:16:14,620
where you just like echo yes I'm in the

406
00:16:12,610 --> 00:16:16,630
function you thought I was in this is

407
00:16:14,620 --> 00:16:19,420
what the value of this variable is this

408
00:16:16,630 --> 00:16:20,650
is what it's basically how to debug when

409
00:16:19,420 --> 00:16:24,939
you don't know how to use a debugger

410
00:16:20,650 --> 00:16:26,740
like me and I followed the bouncing ball

411
00:16:24,940 --> 00:16:30,100
to where these environment variable

412
00:16:26,740 --> 00:16:31,600
things were being handled and ended up

413
00:16:30,100 --> 00:16:33,900
here

414
00:16:31,600 --> 00:16:36,550
down the bottom of the screen you'll see

415
00:16:33,900 --> 00:16:37,990
exports something equals something and

416
00:16:36,550 --> 00:16:40,060
this kind of confirmed to me that I

417
00:16:37,990 --> 00:16:42,250
could put arbitrary stuff into these

418
00:16:40,060 --> 00:16:43,900
versions files and put arbitrary stuff

419
00:16:42,250 --> 00:16:47,350
into people's environments so that was

420
00:16:43,900 --> 00:16:50,770
vulnerability number one and then I

421
00:16:47,350 --> 00:16:53,440
thought hmm that something equals

422
00:16:50,770 --> 00:16:55,720
something is wrapped in an eval so if I

423
00:16:53,440 --> 00:16:58,600
can get shell metacharacters into either

424
00:16:55,720 --> 00:17:00,430
the key or the value there's another

425
00:16:58,600 --> 00:17:04,959
vulnerability you can just straight-up

426
00:17:00,430 --> 00:17:08,440
run stuff inside that eval and I saw

427
00:17:04,959 --> 00:17:11,170
that there was code to sanitize the user

428
00:17:08,440 --> 00:17:13,209
supplied string and if it saw backticks

429
00:17:11,170 --> 00:17:17,199
or dollar bracket it would drop a

430
00:17:13,209 --> 00:17:19,120
backslash in front to sanitize it for

431
00:17:17,199 --> 00:17:20,949
anyone who's tried to bypass the sequel

432
00:17:19,119 --> 00:17:23,139
injection filters they might recognize

433
00:17:20,949 --> 00:17:24,699
this as you know you just bring your own

434
00:17:23,140 --> 00:17:26,970
backslash to the party and the two

435
00:17:24,699 --> 00:17:28,930
backslashes cancel each other out so

436
00:17:26,970 --> 00:17:31,390
let's have a look at what this actually

437
00:17:28,930 --> 00:17:33,640
looks like when you try both of these

438
00:17:31,390 --> 00:17:36,220
two things so this is a fresh docker

439
00:17:33,640 --> 00:17:39,550
container just with our VM an old

440
00:17:36,220 --> 00:17:42,280
version of our VM installed in it so if

441
00:17:39,550 --> 00:17:46,919
we make a directory called POC CD into

442
00:17:42,280 --> 00:17:49,840
it and then get our versions dot conf

443
00:17:46,920 --> 00:17:53,410
and we just do Ruby equals system

444
00:17:49,840 --> 00:17:56,260
otherwise things just kind of break and

445
00:17:53,410 --> 00:17:57,940
foo equals bar so based on my

446
00:17:56,260 --> 00:18:00,160
understanding of the code and following

447
00:17:57,940 --> 00:18:04,180
the bouncing ball this should set the

448
00:18:00,160 --> 00:18:07,510
foo environment variable to bar seeding

449
00:18:04,180 --> 00:18:10,810
into the directory echo dollar food so

450
00:18:07,510 --> 00:18:12,370
we've got this primitive we've got this

451
00:18:10,810 --> 00:18:14,500
primitive that lets us put arbitrary

452
00:18:12,370 --> 00:18:20,110
stuff into someone's environment if they

453
00:18:14,500 --> 00:18:21,580
CD into our directory when you control

454
00:18:20,110 --> 00:18:23,020
someone's environment there's a few

455
00:18:21,580 --> 00:18:24,970
options I know of a few that I'm sure

456
00:18:23,020 --> 00:18:27,100
there's many more there's a few options

457
00:18:24,970 --> 00:18:29,170
to going from that arbitrary code

458
00:18:27,100 --> 00:18:32,260
execution and the one that I chose to

459
00:18:29,170 --> 00:18:34,690
exploit because in this case my victim

460
00:18:32,260 --> 00:18:37,810
would be running a shell is to exploit

461
00:18:34,690 --> 00:18:40,510
the ps1 environment variable the ps1

462
00:18:37,810 --> 00:18:43,480
environment variable normally shows or

463
00:18:40,510 --> 00:18:45,210
specifies what the person's shell prompt

464
00:18:43,480 --> 00:18:50,140
looks like

465
00:18:45,210 --> 00:18:53,230
so if I set there ps1 to be the old ps1

466
00:18:50,140 --> 00:18:55,630
and then put some shell injections stuff

467
00:18:53,230 --> 00:18:57,010
in it we saw that our VM will drop a

468
00:18:55,630 --> 00:18:59,409
backslash in front of that shell

469
00:18:57,010 --> 00:19:02,830
injection but the cool thing is that

470
00:18:59,409 --> 00:19:04,960
when ps1 gets evaluated by the shell to

471
00:19:02,830 --> 00:19:07,210
show that status line it will actually

472
00:19:04,960 --> 00:19:09,250
expand it once more because we actually

473
00:19:07,210 --> 00:19:11,890
do want to be able to put arbitrary

474
00:19:09,250 --> 00:19:14,080
shell stuff you know prompt so we can

475
00:19:11,890 --> 00:19:17,830
have all sorts of funny statuses come up

476
00:19:14,080 --> 00:19:20,889
in our shell prompt so based on that if

477
00:19:17,830 --> 00:19:22,600
I CD into this directory we can run

478
00:19:20,890 --> 00:19:25,059
arbitrary commands every time someone

479
00:19:22,600 --> 00:19:26,760
presses enter and I think that's kind of

480
00:19:25,059 --> 00:19:30,970
cool

481
00:19:26,760 --> 00:19:34,299
the second bug was we'll go back to foo

482
00:19:30,970 --> 00:19:35,610
equals bar so we'll get rid of that one

483
00:19:34,299 --> 00:19:38,260
echo foo

484
00:19:35,610 --> 00:19:40,418
the second bug was to do with that

485
00:19:38,260 --> 00:19:44,350
escaping behavior because if we put

486
00:19:40,419 --> 00:19:47,740
dollar bracket ID in the foo environment

487
00:19:44,350 --> 00:19:49,418
variable the victim will have their

488
00:19:47,740 --> 00:19:54,700
through environment variable set to bar

489
00:19:49,419 --> 00:19:57,070
dollar bracket ID because our VM with

490
00:19:54,700 --> 00:19:58,419
sanitizing our string and putting a

491
00:19:57,070 --> 00:20:01,090
backslash in front of that shell

492
00:19:58,419 --> 00:20:03,610
injection if we put our own backslash in

493
00:20:01,090 --> 00:20:05,590
front of it and our VM puts another one

494
00:20:03,610 --> 00:20:07,600
the two backslashes cancel each other

495
00:20:05,590 --> 00:20:09,158
around and we get our it's challenge

496
00:20:07,600 --> 00:20:13,480
action because the two backslashes

497
00:20:09,159 --> 00:20:16,330
as the first escapes a second so if we

498
00:20:13,480 --> 00:20:19,210
just set that to one backslash CD into

499
00:20:16,330 --> 00:20:21,610
it dollar food we've got shell injection

500
00:20:19,210 --> 00:20:24,789
again and the victim doesn't even need

501
00:20:21,610 --> 00:20:27,639
to do that echo if we just go on spit

502
00:20:24,789 --> 00:20:29,890
the ex that the output of ID to standard

503
00:20:27,640 --> 00:20:31,960
error will see that it just runs

504
00:20:29,890 --> 00:20:39,760
automatically as soon as the user CDs

505
00:20:31,960 --> 00:20:41,110
into that directory so a quick recap it

506
00:20:39,760 --> 00:20:43,240
started off with a bit of a hunch in a

507
00:20:41,110 --> 00:20:44,830
bit of hypothesis started off with the

508
00:20:43,240 --> 00:20:46,870
hunch of I wonder how you know being

509
00:20:44,830 --> 00:20:47,949
that Kitty cap I wonder how our VM does

510
00:20:46,870 --> 00:20:49,689
this under the hood

511
00:20:47,950 --> 00:20:52,750
I should probably understand this it's

512
00:20:49,690 --> 00:20:54,549
in my tool chain it's in my shell 24/7

513
00:20:52,750 --> 00:20:58,180
I should probably think about what it's

514
00:20:54,549 --> 00:21:00,850
doing and then with the set - X it was

515
00:20:58,180 --> 00:21:02,230
that's a lot of output so then you just

516
00:21:00,850 --> 00:21:03,639
follow the bouncing ball through the

517
00:21:02,230 --> 00:21:05,770
code you put those little print

518
00:21:03,640 --> 00:21:07,300
statements in until you get to the place

519
00:21:05,770 --> 00:21:10,030
where interesting stuff is happening

520
00:21:07,300 --> 00:21:11,980
with your input so you do interesting

521
00:21:10,030 --> 00:21:17,710
stuff with that input and then you go to

522
00:21:11,980 --> 00:21:19,480
the pub so visual studio code so we'll

523
00:21:17,710 --> 00:21:22,480
put our VM aside for a moment visual

524
00:21:19,480 --> 00:21:26,620
studio code is a really really nice free

525
00:21:22,480 --> 00:21:29,500
IDE from Microsoft it scored really

526
00:21:26,620 --> 00:21:32,409
really really really high in last year's

527
00:21:29,500 --> 00:21:35,200
stackoverflow developer survey as being

528
00:21:32,410 --> 00:21:36,790
a IDE of choice and it gives you all the

529
00:21:35,200 --> 00:21:39,040
kind of the nice things in IDE gives you

530
00:21:36,790 --> 00:21:40,750
gives just syntax colouring gives you

531
00:21:39,040 --> 00:21:44,560
that tree view so you can see all your

532
00:21:40,750 --> 00:21:46,720
files has nice git integration the whole

533
00:21:44,560 --> 00:21:48,399
nine yards it's a really nice place to

534
00:21:46,720 --> 00:21:53,230
be when you're reading or writing codes

535
00:21:48,400 --> 00:21:55,660
and it's free I was really really bored

536
00:21:53,230 --> 00:21:58,330
one day and reading the documentation

537
00:21:55,660 --> 00:21:59,860
for vs code and in the documentation I

538
00:21:58,330 --> 00:22:02,649
saw that you could have something called

539
00:21:59,860 --> 00:22:04,479
workspace settings so the workspace

540
00:22:02,650 --> 00:22:07,150
settings it's it's a file that gets

541
00:22:04,480 --> 00:22:10,060
committed to us to a source code

542
00:22:07,150 --> 00:22:11,890
repository to a project so that all the

543
00:22:10,060 --> 00:22:14,050
developers can share the same

544
00:22:11,890 --> 00:22:16,270
configuration you know so we all have

545
00:22:14,050 --> 00:22:17,889
the same color the same font we all have

546
00:22:16,270 --> 00:22:20,200
important really really important things

547
00:22:17,890 --> 00:22:21,220
like the same tab width so we all have

548
00:22:20,200 --> 00:22:23,590
the same indentation

549
00:22:21,220 --> 00:22:25,600
it lets us sync up on those settings so

550
00:22:23,590 --> 00:22:31,330
that we have consistent source code as

551
00:22:25,600 --> 00:22:32,709
an output I recalled having heard about

552
00:22:31,330 --> 00:22:34,179
because this is a little bit before my

553
00:22:32,710 --> 00:22:36,370
time I was in high school at time I

554
00:22:34,180 --> 00:22:39,400
recalled hearing about a vim

555
00:22:36,370 --> 00:22:43,300
vulnerability in something called mode

556
00:22:39,400 --> 00:22:46,930
lines and mode lines were bins way of

557
00:22:43,300 --> 00:22:49,480
having settings declared in a file so

558
00:22:46,930 --> 00:22:51,130
every time you edited the file you would

559
00:22:49,480 --> 00:22:53,290
have the same settings as everyone else

560
00:22:51,130 --> 00:22:54,760
and there was a vulnerability in it in

561
00:22:53,290 --> 00:22:56,980
which you could execute arbitrary

562
00:22:54,760 --> 00:22:58,690
commands this was really cool because a

563
00:22:56,980 --> 00:23:01,180
lot of people used to write and read

564
00:22:58,690 --> 00:23:03,610
email with vim so you could send someone

565
00:23:01,180 --> 00:23:07,600
an email or they go to reply boom code

566
00:23:03,610 --> 00:23:09,850
execution I thought if vim had a

567
00:23:07,600 --> 00:23:10,730
vulnerability in its handling of these

568
00:23:09,850 --> 00:23:12,740
settings

569
00:23:10,730 --> 00:23:15,710
I wonder what Visual Studio code is

570
00:23:12,740 --> 00:23:18,110
doing so I read through the list of

571
00:23:15,710 --> 00:23:21,410
configuration options that could be set

572
00:23:18,110 --> 00:23:22,760
by this settings JSON file and one was

573
00:23:21,410 --> 00:23:26,660
pretty interesting

574
00:23:22,760 --> 00:23:29,030
I could configure the path to get to the

575
00:23:26,660 --> 00:23:32,480
binary git which I know vs code has

576
00:23:29,030 --> 00:23:34,700
really nice integration with so I could

577
00:23:32,480 --> 00:23:36,440
put a settings file in my project and

578
00:23:34,700 --> 00:23:39,080
other people download it they open it up

579
00:23:36,440 --> 00:23:40,790
in the vs code and I can tell their vs

580
00:23:39,080 --> 00:23:45,080
code where on the file system to find

581
00:23:40,790 --> 00:23:47,510
get this might be interesting so I

582
00:23:45,080 --> 00:23:51,199
started by setting the path to Zed Zed

583
00:23:47,510 --> 00:23:53,690
Zed Zed and then ran code under s trace

584
00:23:51,200 --> 00:23:56,930
and s trace is a Linux application that

585
00:23:53,690 --> 00:23:59,330
lets you debug and monitor all the sis

586
00:23:56,930 --> 00:24:01,580
calls that a process is making into the

587
00:23:59,330 --> 00:24:04,330
kernel including running external

588
00:24:01,580 --> 00:24:07,129
programs so I could see that yes indeed

589
00:24:04,330 --> 00:24:09,949
my vs code was trying to run something

590
00:24:07,130 --> 00:24:10,730
called Zed Zed Zed Zed I thought this is

591
00:24:09,950 --> 00:24:12,410
pretty cool

592
00:24:10,730 --> 00:24:15,260
I'll probably just put a whole bunch of

593
00:24:12,410 --> 00:24:17,180
shell commands in that get path and then

594
00:24:15,260 --> 00:24:19,970
people will end up running Bitcoin

595
00:24:17,180 --> 00:24:23,060
miners when they edit my code but it

596
00:24:19,970 --> 00:24:24,470
wasn't to be that easy and this might

597
00:24:23,060 --> 00:24:28,700
seem like a mundane point but I think

598
00:24:24,470 --> 00:24:30,980
it's super important if I put multiple

599
00:24:28,700 --> 00:24:33,830
commands in that git path they just they

600
00:24:30,980 --> 00:24:35,330
won't run as a shell command like my

601
00:24:33,830 --> 00:24:38,449
computer was actually looking for a

602
00:24:35,330 --> 00:24:43,220
binary called Zed Zed Zed Zed space xx

603
00:24:38,450 --> 00:24:45,560
xx semicolon why why why why so if I had

604
00:24:43,220 --> 00:24:48,800
just dropped in the get path you know

605
00:24:45,560 --> 00:24:50,540
touch slash temp slash win opened up the

606
00:24:48,800 --> 00:24:52,940
s code and nothing happened

607
00:24:50,540 --> 00:24:56,690
I might have gone ad dress and going to

608
00:24:52,940 --> 00:24:59,030
the pub turns out there's two different

609
00:24:56,690 --> 00:25:00,910
ways that a process on Linux will tend

610
00:24:59,030 --> 00:25:03,740
to start external processes

611
00:25:00,910 --> 00:25:07,880
there's the exec family of functions and

612
00:25:03,740 --> 00:25:10,250
there's system so exec is really really

613
00:25:07,880 --> 00:25:11,990
nicely well-formed it's a bit more

614
00:25:10,250 --> 00:25:14,360
verbose when you go to use it because

615
00:25:11,990 --> 00:25:16,700
when you use exec as a developer you

616
00:25:14,360 --> 00:25:19,399
need to say this is the binary I want to

617
00:25:16,700 --> 00:25:21,890
run and this is the array of arguments

618
00:25:19,400 --> 00:25:23,320
it should take and I know what I'm doing

619
00:25:21,890 --> 00:25:26,750
do it

620
00:25:23,320 --> 00:25:29,960
system is like yoloswag here's a

621
00:25:26,750 --> 00:25:32,150
command-line shell you figure it out it

622
00:25:29,960 --> 00:25:33,980
just like throws it over the fence so

623
00:25:32,150 --> 00:25:35,270
the system command is where you actually

624
00:25:33,980 --> 00:25:37,760
get these shell injection

625
00:25:35,270 --> 00:25:40,280
vulnerabilities with exec you don't get

626
00:25:37,760 --> 00:25:42,200
that flexibility as an attacker so it

627
00:25:40,280 --> 00:25:44,480
was really important to see this and see

628
00:25:42,200 --> 00:25:48,110
that I had an exact primitive so I knew

629
00:25:44,480 --> 00:25:51,080
what I was working with the next test I

630
00:25:48,110 --> 00:25:53,240
did was setting the get dot path to true

631
00:25:51,080 --> 00:25:55,760
which according to the man page does

632
00:25:53,240 --> 00:25:57,320
nothing successfully and I saw that

633
00:25:55,760 --> 00:26:00,710
there were multiple commands happening

634
00:25:57,320 --> 00:26:04,490
there was true - - version true Rev pars

635
00:26:00,710 --> 00:26:07,100
true status so on and so forth when I

636
00:26:04,490 --> 00:26:09,290
set the get path to false which is a

637
00:26:07,100 --> 00:26:12,590
binary that does nothing unsuccessfully

638
00:26:09,290 --> 00:26:15,350
it only did false - - version and then

639
00:26:12,590 --> 00:26:18,980
like killed the chain vs code was

640
00:26:15,350 --> 00:26:21,649
thinking well I tried to run git and I

641
00:26:18,980 --> 00:26:23,750
got back a bad exit code gets probably

642
00:26:21,650 --> 00:26:25,820
broken I'm not gonna try and keep on

643
00:26:23,750 --> 00:26:31,100
running it I was also really important

644
00:26:25,820 --> 00:26:34,129
to know the last little test I did was I

645
00:26:31,100 --> 00:26:41,540
wrote a small shell script that whenever

646
00:26:34,130 --> 00:26:44,510
it was run would log how it was run it

647
00:26:41,540 --> 00:26:47,570
would log the command that was used to

648
00:26:44,510 --> 00:26:50,420
execute it the arguments had got and the

649
00:26:47,570 --> 00:26:52,879
directory that the process that invoked

650
00:26:50,420 --> 00:26:54,380
it was sitting in at the time as its

651
00:26:52,880 --> 00:26:57,740
current working directory and

652
00:26:54,380 --> 00:27:00,350
interestingly the first instance of get

653
00:26:57,740 --> 00:27:03,370
being run was done from wherever the

654
00:27:00,350 --> 00:27:06,219
person was sitting when they wrote code

655
00:27:03,370 --> 00:27:09,919
past the repository on the command line

656
00:27:06,220 --> 00:27:12,500
but the second one the rev pars happened

657
00:27:09,920 --> 00:27:14,570
from within the project and this was a

658
00:27:12,500 --> 00:27:15,980
really important fact that I think

659
00:27:14,570 --> 00:27:19,399
without it I would have had trouble

660
00:27:15,980 --> 00:27:22,850
exploiting the issue so this is what I

661
00:27:19,400 --> 00:27:26,270
knew I was working with the s code was

662
00:27:22,850 --> 00:27:30,040
going to run whatever I told it the path

663
00:27:26,270 --> 00:27:33,560
to get was as a binary - - version and

664
00:27:30,040 --> 00:27:35,020
if that command failed code was going to

665
00:27:33,560 --> 00:27:36,340
give up and be like

666
00:27:35,020 --> 00:27:39,580
gonna happen but if that command

667
00:27:36,340 --> 00:27:41,949
succeeded it would CD behind-the-scenes

668
00:27:39,580 --> 00:27:45,939
into the workspace directory and then do

669
00:27:41,950 --> 00:27:50,830
the past to get Rev paths and so on and

670
00:27:45,940 --> 00:27:53,290
so forth I had two goals I wanted to not

671
00:27:50,830 --> 00:27:54,909
break the chain until I had done

672
00:27:53,290 --> 00:27:56,500
something naughty so you got to keep

673
00:27:54,910 --> 00:28:01,360
this chain going until you can get

674
00:27:56,500 --> 00:28:03,790
arbitrary command execution so what I

675
00:28:01,360 --> 00:28:07,840
did was I played around and and found

676
00:28:03,790 --> 00:28:10,270
out when you did SH - - version SH would

677
00:28:07,840 --> 00:28:13,330
exit with a bad error error code but

678
00:28:10,270 --> 00:28:16,000
bash - - version would return zero which

679
00:28:13,330 --> 00:28:19,570
is all good same with Python same with

680
00:28:16,000 --> 00:28:23,710
PHP so I decided to go with bash being

681
00:28:19,570 --> 00:28:26,770
on almost all boxes I think so bash - -

682
00:28:23,710 --> 00:28:29,170
version will succeed and then code will

683
00:28:26,770 --> 00:28:33,040
CD into the workspace and then do bash

684
00:28:29,170 --> 00:28:35,050
Rev paths but what if I had put a

685
00:28:33,040 --> 00:28:38,409
malicious shell script in the protein in

686
00:28:35,050 --> 00:28:44,770
the project called rev pars would bash

687
00:28:38,410 --> 00:28:46,600
run it maybe let's have a quick look so

688
00:28:44,770 --> 00:28:49,500
again this is just a docker container

689
00:28:46,600 --> 00:28:54,429
running an old version of the s code

690
00:28:49,500 --> 00:28:56,470
make our POC directory make our vs code

691
00:28:54,430 --> 00:29:00,040
directory which is where this workspace

692
00:28:56,470 --> 00:29:10,960
settings file has to go setting was doc

693
00:29:00,040 --> 00:29:16,000
JSON so we'll set the get dot path to be

694
00:29:10,960 --> 00:29:20,350
bash and then we'll create our Rev paths

695
00:29:16,000 --> 00:29:28,180
file and give it a shebang line because

696
00:29:20,350 --> 00:29:32,560
I'm pedantic run X calc and pwned as the

697
00:29:28,180 --> 00:29:35,040
users ID - temp win and then what we'll

698
00:29:32,560 --> 00:29:37,330
do is we'll just do exit 1 so that

699
00:29:35,040 --> 00:29:39,010
Visual Studio code when it runs this

700
00:29:37,330 --> 00:29:41,439
command will just give up and not run

701
00:29:39,010 --> 00:29:43,650
the rest of them and it'll kill the

702
00:29:41,440 --> 00:29:43,650
chain

703
00:29:44,580 --> 00:29:52,120
so we got big it da set to bash and the

704
00:29:49,750 --> 00:29:55,540
malicious payload is just going to pop

705
00:29:52,120 --> 00:29:58,959
calc and then just edit a text file that

706
00:29:55,540 --> 00:30:02,379
temp win file does not exist so if we

707
00:29:58,960 --> 00:30:05,500
run code on the current directory or if

708
00:30:02,380 --> 00:30:06,820
we CD out of it and run code against the

709
00:30:05,500 --> 00:30:09,520
POC directory we'll get the same

710
00:30:06,820 --> 00:30:15,010
behavior because of that very convenient

711
00:30:09,520 --> 00:30:20,700
CD that code does for us Visual Studio

712
00:30:15,010 --> 00:30:20,700
code opens up and we don't get a calc

713
00:30:22,020 --> 00:30:27,580
what I owe

714
00:30:23,620 --> 00:30:32,500
setting thank you didn't make enough

715
00:30:27,580 --> 00:30:37,530
sacrifices aha I'm in the wrong

716
00:30:32,500 --> 00:30:41,710
directory now so move the setting to

717
00:30:37,530 --> 00:30:44,830
settings thank you very much Glen try

718
00:30:41,710 --> 00:30:47,950
again so we'll make sure that file still

719
00:30:44,830 --> 00:30:52,590
doesn't exist run code against the POC

720
00:30:47,950 --> 00:30:57,540
directory and there's our calculator and

721
00:30:52,590 --> 00:30:58,929
[Applause]

722
00:30:57,540 --> 00:31:00,790
there we go

723
00:30:58,930 --> 00:31:04,210
arbitrary code execution has the person

724
00:31:00,790 --> 00:31:06,970
running vim proving once again that the

725
00:31:04,210 --> 00:31:08,950
best single step you can do to secure

726
00:31:06,970 --> 00:31:10,960
yourself against bad hackers is to

727
00:31:08,950 --> 00:31:13,440
remove calculator applications for more

728
00:31:10,960 --> 00:31:13,440
than machines

729
00:31:13,500 --> 00:31:16,780
see now that it's they've actually

730
00:31:15,280 --> 00:31:18,070
open-source calques are hopefully

731
00:31:16,780 --> 00:31:21,730
someone will fix the vulnerabilities

732
00:31:18,070 --> 00:31:25,629
soon or someone can use calc to pop calc

733
00:31:21,730 --> 00:31:27,190
that'd be brilliant see now we can

734
00:31:25,630 --> 00:31:28,720
actually get position independent calc

735
00:31:27,190 --> 00:31:30,490
shell code now we've got the source code

736
00:31:28,720 --> 00:31:32,910
and don't need to run the command

737
00:31:30,490 --> 00:31:35,200
anymore

738
00:31:32,910 --> 00:31:38,080
quick recap starts off with a bit of a

739
00:31:35,200 --> 00:31:39,850
hunch reading the documentation because

740
00:31:38,080 --> 00:31:42,040
you're very very bored and going

741
00:31:39,850 --> 00:31:44,409
didn't-didn't vim have a problem with

742
00:31:42,040 --> 00:31:46,060
this sort of behavior it's it's surely a

743
00:31:44,410 --> 00:31:48,760
lot of responsibility and a lot of

744
00:31:46,060 --> 00:31:51,159
attack surface when an editor reads the

745
00:31:48,760 --> 00:31:54,490
settings file out of a source code

746
00:31:51,160 --> 00:31:56,110
repository so then you dig in and use s

747
00:31:54,490 --> 00:31:57,610
trace to make sure it's actually running

748
00:31:56,110 --> 00:32:01,689
the cut the commands as you're telling

749
00:31:57,610 --> 00:32:03,699
it to and then you do the true or false

750
00:32:01,690 --> 00:32:05,500
thing and you do the shell script thing

751
00:32:03,700 --> 00:32:08,710
and you end up with a pretty reliable

752
00:32:05,500 --> 00:32:12,040
POC where you swap out Visual Studio

753
00:32:08,710 --> 00:32:13,810
codes idea of git for bash and you give

754
00:32:12,040 --> 00:32:18,490
it a nice little rev pass shell script

755
00:32:13,810 --> 00:32:21,129
to run so I much better bug than the one

756
00:32:18,490 --> 00:32:24,130
that I found it didn't exist for too

757
00:32:21,130 --> 00:32:28,780
long but code colorist found it in

758
00:32:24,130 --> 00:32:32,830
versions 1 9 1 19 1 through 119 2 or

759
00:32:28,780 --> 00:32:38,050
something no 1 1903 119 2 it was like

760
00:32:32,830 --> 00:32:40,540
only a few weeks I think in which Visual

761
00:32:38,050 --> 00:32:42,730
Studio code was shipping with certain

762
00:32:40,540 --> 00:32:46,420
parts of its electron based architecture

763
00:32:42,730 --> 00:32:49,870
running in debug mode which is deidre vs

764
00:32:46,420 --> 00:32:52,900
code did it first and when you run

765
00:32:49,870 --> 00:32:55,810
electron apps in a debug mode it opens

766
00:32:52,900 --> 00:32:58,510
up this localhost only debugging port

767
00:32:55,810 --> 00:33:00,280
although I think electron has also

768
00:32:58,510 --> 00:33:05,110
mitigated this sort of thing now with

769
00:33:00,280 --> 00:33:06,550
some magic cookie stuff code colorist

770
00:33:05,110 --> 00:33:08,409
figured out that if you can talk to

771
00:33:06,550 --> 00:33:10,389
someone's local host port nine triples

772
00:33:08,410 --> 00:33:12,610
three at the other end of it there's a

773
00:33:10,390 --> 00:33:14,500
chrome debugger and when you can talk to

774
00:33:12,610 --> 00:33:16,600
the chrome debugger you can just run

775
00:33:14,500 --> 00:33:18,220
arbitrary JavaScript that can actually

776
00:33:16,600 --> 00:33:21,280
interface with the file system and do

777
00:33:18,220 --> 00:33:24,010
awful things and built out a full DNS

778
00:33:21,280 --> 00:33:25,600
rebinding based proof of concept to get

779
00:33:24,010 --> 00:33:28,240
you know drive-by codex

780
00:33:25,600 --> 00:33:32,110
on vs code that's a really cool bug way

781
00:33:28,240 --> 00:33:34,720
better than my trash bug putting it all

782
00:33:32,110 --> 00:33:36,610
together so putting together the RVM bug

783
00:33:34,720 --> 00:33:38,650
and the visual studio code bug you know

784
00:33:36,610 --> 00:33:40,059
we've been developing locally and we can

785
00:33:38,650 --> 00:33:43,030
see we've got something that might be

786
00:33:40,059 --> 00:33:46,750
promising but what might it look like in

787
00:33:43,030 --> 00:33:47,980
a bit more of a real-world scenario so

788
00:33:46,750 --> 00:33:50,260
maybe it's the case that you can

789
00:33:47,980 --> 00:33:52,419
convince someone to download some of

790
00:33:50,260 --> 00:33:54,010
your source code like hey dude you

791
00:33:52,419 --> 00:33:57,610
should get cloned this it's really

792
00:33:54,010 --> 00:34:00,730
interesting when the victim then get

793
00:33:57,610 --> 00:34:02,439
clones and CDs into it if they've got a

794
00:34:00,730 --> 00:34:04,330
vulnerable version of our VM installed

795
00:34:02,440 --> 00:34:06,760
there's your first opportunity far

796
00:34:04,330 --> 00:34:09,069
betray code execution if they use Visual

797
00:34:06,760 --> 00:34:13,090
Studio code and it's out of date there's

798
00:34:09,070 --> 00:34:17,950
your second so this is the the party

799
00:34:13,090 --> 00:34:21,639
trick demo hopefully it works it's a

800
00:34:17,949 --> 00:34:23,710
little bit fragile so we've got to

801
00:34:21,639 --> 00:34:25,300
docker containers here on the left-hand

802
00:34:23,710 --> 00:34:27,250
side we're looking at the victim on the

803
00:34:25,300 --> 00:34:30,609
right-hand side we've got the attacker

804
00:34:27,250 --> 00:34:35,859
with three old-school netcat reverse

805
00:34:30,609 --> 00:34:37,270
shell listeners and one web server so

806
00:34:35,859 --> 00:34:39,699
the attacker sends an email to victim

807
00:34:37,270 --> 00:34:42,639
hey you should totally get clone this

808
00:34:39,699 --> 00:34:46,750
it's not malicious at all and the victim

809
00:34:42,639 --> 00:34:51,700
goes okay thinking you know get clones

810
00:34:46,750 --> 00:34:54,100
pretty safe right and we get our first

811
00:34:51,699 --> 00:34:55,689
reverse shell so this is actually an old

812
00:34:54,100 --> 00:34:59,140
version of get this bugs been patched

813
00:34:55,690 --> 00:35:04,869
and it wasn't it's not my bug it's a bug

814
00:34:59,140 --> 00:35:08,190
that if you do a git clone recursive to

815
00:35:04,869 --> 00:35:11,290
download all the sub modules

816
00:35:08,190 --> 00:35:13,210
that's terrible highlighting there we go

817
00:35:11,290 --> 00:35:15,040
do a git clone recursive which will

818
00:35:13,210 --> 00:35:18,040
download all the get sub modules along

819
00:35:15,040 --> 00:35:19,300
with the main repository really nice bug

820
00:35:18,040 --> 00:35:21,570
and you can get like shell injection

821
00:35:19,300 --> 00:35:25,119
it's really cool

822
00:35:21,570 --> 00:35:27,880
so the attackers got their first reverse

823
00:35:25,119 --> 00:35:29,890
shell so the victim has git clone

824
00:35:27,880 --> 00:35:33,040
something they go alright let's have a

825
00:35:29,890 --> 00:35:36,920
look at what's inside CD totally not

826
00:35:33,040 --> 00:35:39,839
malicious second shell

827
00:35:36,920 --> 00:35:42,299
thirdly and finally the victim thinks

828
00:35:39,839 --> 00:35:44,819
I'm going to use code to actually have a

829
00:35:42,299 --> 00:35:46,770
look at this project because someone

830
00:35:44,819 --> 00:35:51,930
clearly wanted me to to read what was in

831
00:35:46,770 --> 00:36:02,609
it open up visual studio code and in the

832
00:35:51,930 --> 00:36:04,500
background we get a third shell so I'm

833
00:36:02,609 --> 00:36:05,460
actually running super ahead of time

834
00:36:04,500 --> 00:36:07,020
which is awesome

835
00:36:05,460 --> 00:36:09,000
all my practice runs of this were way

836
00:36:07,020 --> 00:36:11,190
longer so now I'm freaking out I don't

837
00:36:09,000 --> 00:36:13,170
know what I forgot to say this is not

838
00:36:11,190 --> 00:36:15,390
what we discussed just know it's not I

839
00:36:13,170 --> 00:36:17,099
was gonna go right up to the end of the

840
00:36:15,390 --> 00:36:19,440
session so that I didn't have to answer

841
00:36:17,099 --> 00:36:24,109
questions well I got one for you can't

842
00:36:19,440 --> 00:36:26,160
you just fish the dev oh you got more

843
00:36:24,109 --> 00:36:27,538
sorry I do have a bit more but I am

844
00:36:26,160 --> 00:36:28,970
running well I was thinking I have to

845
00:36:27,539 --> 00:36:32,010
like blast through this

846
00:36:28,970 --> 00:36:34,589
is this a risk you know is this is this

847
00:36:32,010 --> 00:36:37,170
actually a problem I don't really know I

848
00:36:34,589 --> 00:36:38,460
don't do operational hacking I can't

849
00:36:37,170 --> 00:36:40,140
imagine that the bugs that I used

850
00:36:38,460 --> 00:36:42,960
earlier would be that useful like

851
00:36:40,140 --> 00:36:45,118
they're pretty high interaction that

852
00:36:42,960 --> 00:36:49,440
maybe you know we saw a case last year

853
00:36:45,119 --> 00:36:51,000
of espionage against the I think it was

854
00:36:49,440 --> 00:36:53,819
like engineering and industrial design

855
00:36:51,000 --> 00:36:55,829
vertical in which malicious AutoCAD

856
00:36:53,819 --> 00:36:57,839
files were being sent to victims and

857
00:36:55,829 --> 00:37:00,359
when you open them up they have like

858
00:36:57,839 --> 00:37:04,020
their own version of macros and away you

859
00:37:00,359 --> 00:37:06,029
go so if people were flinging AutoCAD

860
00:37:04,020 --> 00:37:08,009
files around to own each other maybe

861
00:37:06,029 --> 00:37:10,619
flinging code repositories around isn't

862
00:37:08,010 --> 00:37:12,210
that far-fetched but yes Pat I still

863
00:37:10,619 --> 00:37:13,549
think that phishing is probably the way

864
00:37:12,210 --> 00:37:16,740
to go

865
00:37:13,549 --> 00:37:17,460
ish dev or offer them 200 bucks to take

866
00:37:16,740 --> 00:37:18,930
over there

867
00:37:17,460 --> 00:37:20,760
yeah project that I don't care about

868
00:37:18,930 --> 00:37:22,649
anymore a little bit more

869
00:37:20,760 --> 00:37:24,799
I was acknowledging that you said that

870
00:37:22,650 --> 00:37:27,839
yes phishing will still work sorry dude

871
00:37:24,799 --> 00:37:30,839
he's doing this deliberately not at all

872
00:37:27,839 --> 00:37:32,220
a few more thoughts see this back and

873
00:37:30,839 --> 00:37:34,730
forth is what's gonna fill the time ups

874
00:37:32,220 --> 00:37:34,730
are there for

875
00:37:36,440 --> 00:37:40,440
patching so this is a bit of a

876
00:37:38,520 --> 00:37:42,990
no-brainer I hope but we need to be

877
00:37:40,440 --> 00:37:45,240
passing our software interestingly our

878
00:37:42,990 --> 00:37:47,370
VM doesn't have an auto updater

879
00:37:45,240 --> 00:37:50,250
so if you've got like a crusty old cally

880
00:37:47,370 --> 00:37:52,680
box and you had a VM installed to do

881
00:37:50,250 --> 00:37:54,570
some Metasploit hacking maybe you've got

882
00:37:52,680 --> 00:37:56,040
some rpms that need to be updated but

883
00:37:54,570 --> 00:37:57,980
patching is obviously a bit of a

884
00:37:56,040 --> 00:38:00,060
no-brainer

885
00:37:57,980 --> 00:38:03,660
Jeremiah Grossman tweeted this and I

886
00:38:00,060 --> 00:38:07,590
really liked it without going to like

887
00:38:03,660 --> 00:38:09,960
exploit zero day fuddy if what's

888
00:38:07,590 --> 00:38:12,390
standing between us and owned and owned

889
00:38:09,960 --> 00:38:14,550
catastrophic ly is hoping that there's

890
00:38:12,390 --> 00:38:16,680
no bugs in our software hoping we're up

891
00:38:14,550 --> 00:38:18,630
to date hopes not that much of a

892
00:38:16,680 --> 00:38:20,879
strategy so we need to think about how

893
00:38:18,630 --> 00:38:22,830
can we protect ourselves as security

894
00:38:20,880 --> 00:38:24,660
professionals using these tools and how

895
00:38:22,830 --> 00:38:29,790
can we protect developers who are using

896
00:38:24,660 --> 00:38:32,460
these tools as well one idea I have it's

897
00:38:29,790 --> 00:38:34,470
not fully baked but I think the future

898
00:38:32,460 --> 00:38:36,390
of end-user computing is certainly some

899
00:38:34,470 --> 00:38:38,700
form of containerization some form of

900
00:38:36,390 --> 00:38:40,560
sandboxing some form of isolation I

901
00:38:38,700 --> 00:38:43,680
think getting there for developer

902
00:38:40,560 --> 00:38:45,600
tooling is going to be hard I think you

903
00:38:43,680 --> 00:38:48,810
know downloading your IDE out of the

904
00:38:45,600 --> 00:38:50,420
windows App Store and being able to do

905
00:38:48,810 --> 00:38:53,460
the things you need to do with an IDE

906
00:38:50,420 --> 00:38:55,350
without it having access to your entire

907
00:38:53,460 --> 00:38:58,050
file system and being able to run

908
00:38:55,350 --> 00:39:00,420
arbitrary processes they don't really

909
00:38:58,050 --> 00:39:02,610
kind of go together that well so I'm

910
00:39:00,420 --> 00:39:05,280
looking forward to seeing what comes out

911
00:39:02,610 --> 00:39:07,890
from operating system vendors and IDE

912
00:39:05,280 --> 00:39:10,260
vendors to keep these very powerful

913
00:39:07,890 --> 00:39:12,390
tools safe or on the other hand we're

914
00:39:10,260 --> 00:39:15,330
just going to go well then IDE is meant

915
00:39:12,390 --> 00:39:17,339
to write and run arbitrary code it's too

916
00:39:15,330 --> 00:39:20,340
hard of a problem fair enough

917
00:39:17,340 --> 00:39:22,830
and so what I do is I run a Visual

918
00:39:20,340 --> 00:39:24,570
Studio code inside docker on my

919
00:39:22,830 --> 00:39:26,759
workstation because I'm a crazy person

920
00:39:24,570 --> 00:39:28,950
so like all the demos today we're done

921
00:39:26,760 --> 00:39:29,460
inside docker you can make a lot of

922
00:39:28,950 --> 00:39:32,069
tools

923
00:39:29,460 --> 00:39:34,320
I run burp suite inside docker I run my

924
00:39:32,070 --> 00:39:36,960
browsers inside docker so on and so

925
00:39:34,320 --> 00:39:40,050
forth and what you can do is you can

926
00:39:36,960 --> 00:39:42,870
choose to only expose to an instance of

927
00:39:40,050 --> 00:39:45,300
v/s code what you're working on you

928
00:39:42,870 --> 00:39:46,930
don't get my SSH keys you don't get all

929
00:39:45,300 --> 00:39:48,760
the other projects I'm working on

930
00:39:46,930 --> 00:39:53,529
just this one thing I want to work on

931
00:39:48,760 --> 00:39:55,869
today so Jesse for seller has some

932
00:39:53,529 --> 00:39:57,789
really good resources on docker rising

933
00:39:55,869 --> 00:40:00,220
arbitrary applications and you should

934
00:39:57,789 --> 00:40:03,160
definitely check them out something I'm

935
00:40:00,220 --> 00:40:04,868
very aware of is that docker is is

936
00:40:03,160 --> 00:40:08,170
certainly no silver bullet and it's also

937
00:40:04,869 --> 00:40:10,869
not technically a sandbox we saw a few

938
00:40:08,170 --> 00:40:13,569
months ago the run sea bug was a really

939
00:40:10,869 --> 00:40:15,819
really nice docker escape did require

940
00:40:13,569 --> 00:40:17,799
some admin interaction go back a little

941
00:40:15,819 --> 00:40:19,779
bit longer you know dirty car was a

942
00:40:17,799 --> 00:40:22,410
kernel bug that was very heavily

943
00:40:19,779 --> 00:40:24,400
advertised as being a docker escape and

944
00:40:22,410 --> 00:40:27,578
furthermore if you're going to run

945
00:40:24,400 --> 00:40:30,099
graphical applications inside docker on

946
00:40:27,579 --> 00:40:34,000
your Linux machine you need to expose

947
00:40:30,099 --> 00:40:35,680
x11 to the container and metal storm has

948
00:40:34,000 --> 00:40:38,289
this awesome video that you should

949
00:40:35,680 --> 00:40:40,299
definitely check out all about UNIX

950
00:40:38,289 --> 00:40:43,680
party tricks and in there he goes

951
00:40:40,299 --> 00:40:46,869
through what sort of stuff can you do as

952
00:40:43,680 --> 00:40:50,440
for example compromised docker container

953
00:40:46,869 --> 00:40:55,230
if you can talk to it users ex-demon

954
00:40:50,440 --> 00:40:58,779
turns out a lot of really uncomfortable

955
00:40:55,230 --> 00:41:01,660
in your IDE and your tools in a docker

956
00:40:58,779 --> 00:41:03,400
container is not Silver Bullet security

957
00:41:01,660 --> 00:41:05,549
I think it's getting us in the right

958
00:41:03,400 --> 00:41:07,420
sort of direction and I think

959
00:41:05,549 --> 00:41:09,759
containerization and sandboxing of

960
00:41:07,420 --> 00:41:12,190
end-user software is the way that we

961
00:41:09,760 --> 00:41:14,260
will probably go you look at Apple they

962
00:41:12,190 --> 00:41:16,779
had the opportunity with iOS to go

963
00:41:14,260 --> 00:41:18,549
ground-up the operating system and it

964
00:41:16,779 --> 00:41:22,029
was just like sandbox by default

965
00:41:18,549 --> 00:41:25,150
applications run in jails and sandboxes

966
00:41:22,029 --> 00:41:27,010
period and I think if we had the

967
00:41:25,150 --> 00:41:29,200
opportunity to read do you know

968
00:41:27,010 --> 00:41:32,529
incumbent operating systems again that's

969
00:41:29,200 --> 00:41:34,509
the sort of way we'd have to go so as

970
00:41:32,529 --> 00:41:38,589
well as that there's the standard stuff

971
00:41:34,510 --> 00:41:41,650
things like monitoring and detection are

972
00:41:38,589 --> 00:41:44,950
you doing monitoring on developer

973
00:41:41,650 --> 00:41:47,079
machines this is maybe a no-brainer but

974
00:41:44,950 --> 00:41:49,118
it's also quite tricky developers have

975
00:41:47,079 --> 00:41:51,819
this really interesting habit of

976
00:41:49,119 --> 00:41:54,099
bringing their own machine to work using

977
00:41:51,819 --> 00:41:55,690
MacBooks and so you need some sort of

978
00:41:54,099 --> 00:41:57,579
policy you need some sort of way to get

979
00:41:55,690 --> 00:41:59,589
monitoring on developerworks stations

980
00:41:57,579 --> 00:42:00,580
I believe that developer workstations

981
00:41:59,589 --> 00:42:02,590
are going to be kind of the new

982
00:42:00,580 --> 00:42:04,720
you domain administrator type of

983
00:42:02,590 --> 00:42:06,580
compromise where once you get a

984
00:42:04,720 --> 00:42:08,980
developer the whole world is your oyster

985
00:42:06,580 --> 00:42:10,360
in an organization so we need to be

986
00:42:08,980 --> 00:42:11,440
looking after these machines and

987
00:42:10,360 --> 00:42:14,500
treating them like gold

988
00:42:11,440 --> 00:42:15,880
what about two-factor or do you have to

989
00:42:14,500 --> 00:42:17,770
factor auth on your source code

990
00:42:15,880 --> 00:42:20,800
repositories do you have to factor auth

991
00:42:17,770 --> 00:42:24,610
when configuring build servers do you

992
00:42:20,800 --> 00:42:26,830
have to factor auth on AWS like on the

993
00:42:24,610 --> 00:42:29,440
web interface is one thing but on the

994
00:42:26,830 --> 00:42:32,380
CLI you know do developers have a habit

995
00:42:29,440 --> 00:42:35,470
of having AWS credentials files that

996
00:42:32,380 --> 00:42:38,170
don't require two-factor or through as I

997
00:42:35,470 --> 00:42:40,810
understand it you can force the

998
00:42:38,170 --> 00:42:44,110
developers token to have to assume a

999
00:42:40,810 --> 00:42:45,820
role and be challenged for MFA they

1000
00:42:44,110 --> 00:42:47,500
can't do anything else it's kind of like

1001
00:42:45,820 --> 00:42:48,250
sue do you know it kind of did something

1002
00:42:47,500 --> 00:42:50,320
right there

1003
00:42:48,250 --> 00:42:52,870
but you know if you're developing AWS

1004
00:42:50,320 --> 00:42:56,050
credentials go missing do you have to

1005
00:42:52,870 --> 00:42:58,180
factor auth on that API and so have a

1006
00:42:56,050 --> 00:43:00,820
discussion have a discussion with the

1007
00:42:58,180 --> 00:43:04,779
security team application security the

1008
00:43:00,820 --> 00:43:06,010
blue team GRC and the developers and aim

1009
00:43:04,780 --> 00:43:08,500
to make it a really collaborative

1010
00:43:06,010 --> 00:43:10,420
discussion you know don't go into it

1011
00:43:08,500 --> 00:43:12,130
thinking we're gonna walk out with a

1012
00:43:10,420 --> 00:43:14,320
list of things we need to take off of

1013
00:43:12,130 --> 00:43:16,090
our developers they've got a really hard

1014
00:43:14,320 --> 00:43:17,710
job to do and if they think they're

1015
00:43:16,090 --> 00:43:24,070
walking into an ambush they're not going

1016
00:43:17,710 --> 00:43:26,320
to play ball but instead just look to

1017
00:43:24,070 --> 00:43:28,720
understand if your machines were

1018
00:43:26,320 --> 00:43:29,110
compromised what's the worst that could

1019
00:43:28,720 --> 00:43:31,629
happen

1020
00:43:29,110 --> 00:43:33,520
ask your developers we know you're not

1021
00:43:31,630 --> 00:43:35,800
going to do this but if you turned rogue

1022
00:43:33,520 --> 00:43:38,350
tomorrow what sort of damage could you

1023
00:43:35,800 --> 00:43:40,660
do just with your laptop where would you

1024
00:43:38,350 --> 00:43:42,790
move from where would you move to how

1025
00:43:40,660 --> 00:43:46,509
would you do it we need to understand so

1026
00:43:42,790 --> 00:43:48,430
we can put monitoring so that we can put

1027
00:43:46,510 --> 00:43:52,690
strong with hen occation on those

1028
00:43:48,430 --> 00:43:54,730
channels and lastly this is a bit of a

1029
00:43:52,690 --> 00:43:57,640
crazy one but what about some sort of

1030
00:43:54,730 --> 00:43:59,980
Red Team engagement where you would give

1031
00:43:57,640 --> 00:44:01,720
the red teamers and assist and just drop

1032
00:43:59,980 --> 00:44:04,120
them straight on to a developer

1033
00:44:01,720 --> 00:44:07,149
workstation or on to the cloned of a

1034
00:44:04,120 --> 00:44:09,160
developer workstation and ask them how

1035
00:44:07,150 --> 00:44:11,080
far can you go if you're on a

1036
00:44:09,160 --> 00:44:14,180
development machine where can you get to

1037
00:44:11,080 --> 00:44:17,420
and if your reaction to this is a bit

1038
00:44:14,180 --> 00:44:19,250
I don't want a contract over it or a red

1039
00:44:17,420 --> 00:44:21,650
teamer starting from there they're gonna

1040
00:44:19,250 --> 00:44:23,029
they're gonna destroy us that might be

1041
00:44:21,650 --> 00:44:25,579
all you need to know about how important

1042
00:44:23,029 --> 00:44:27,170
these workstations are so thank you for

1043
00:44:25,579 --> 00:44:30,500
coming to my TED talk I've got a few

1044
00:44:27,170 --> 00:44:33,079
links follow me on Twitch to watch me do

1045
00:44:30,500 --> 00:44:34,970
dumb stuff live the slides will be up on

1046
00:44:33,079 --> 00:44:36,950
github today and if you want some more

1047
00:44:34,970 --> 00:44:39,740
of yum vulnerabilities they're in my

1048
00:44:36,950 --> 00:44:46,098
Advisory's repo now I'm done

1049
00:44:39,740 --> 00:44:49,220
just instead actually inside a docker

1050
00:44:46,099 --> 00:44:50,869
container they just containerized the

1051
00:44:49,220 --> 00:44:52,189
whole thing and if that's the metal talk

1052
00:44:50,869 --> 00:44:53,930
that I'm thinking of is that the one

1053
00:44:52,190 --> 00:44:55,400
where he could only use user accounts

1054
00:44:53,930 --> 00:44:57,078
and try to get persistence on Linux

1055
00:44:55,400 --> 00:44:58,400
boxes and he don't know but I have to

1056
00:44:57,079 --> 00:45:00,799
check that out that sound that one was

1057
00:44:58,400 --> 00:45:02,660
amazing because it you know yeah he was

1058
00:45:00,799 --> 00:45:04,579
doing red team engagements where he

1059
00:45:02,660 --> 00:45:07,549
couldn't he wasn't allowed to prove a

1060
00:45:04,579 --> 00:45:08,720
story on their production UNIX so he had

1061
00:45:07,549 --> 00:45:11,359
to come up with all these other party

1062
00:45:08,720 --> 00:45:14,629
tricks basically metal and UNIX party

1063
00:45:11,359 --> 00:45:16,400
tricks are always sobering let's put it

1064
00:45:14,630 --> 00:45:18,170
that way and it is very interesting what

1065
00:45:16,400 --> 00:45:20,690
you say especially as we move to dev

1066
00:45:18,170 --> 00:45:23,450
Sackhoff zero trust which is the latest

1067
00:45:20,690 --> 00:45:26,390
buzzword the idea that you know

1068
00:45:23,450 --> 00:45:28,308
developer machines are than you aad

1069
00:45:26,390 --> 00:45:30,609
admins I think that's a really

1070
00:45:28,309 --> 00:45:33,140
I'm totally gonna steal that line do it

1071
00:45:30,609 --> 00:45:34,890
that makes a lot of sense everyone give

1072
00:45:33,140 --> 00:45:37,770
it up again for Justin Stevens

1073
00:45:34,890 --> 00:45:40,879
[Applause]

1074
00:45:37,770 --> 00:45:40,880
[Music]

1075
00:45:42,770 --> 00:45:44,830
you

