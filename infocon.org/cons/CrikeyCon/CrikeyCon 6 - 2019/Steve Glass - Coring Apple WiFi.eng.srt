1
00:00:16,869 --> 00:00:21,740
my name is Steve glass I'm a software

2
00:00:19,250 --> 00:00:25,099
developer and sometimes researcher and

3
00:00:21,740 --> 00:00:26,750
very rarely an educator and I've got a

4
00:00:25,099 --> 00:00:30,230
specialist interest in networking

5
00:00:26,750 --> 00:00:32,149
software security so today's top talk is

6
00:00:30,230 --> 00:00:35,450
action on subject is a set of i/o

7
00:00:32,149 --> 00:00:38,510
security specifically looking at Wi-Fi

8
00:00:35,450 --> 00:00:40,360
is an attack vector and diving the the W

9
00:00:38,510 --> 00:00:46,070
Nick itself as the object of attack

10
00:00:40,360 --> 00:00:47,870
subject the dark so being quite a few I

11
00:00:46,070 --> 00:00:49,930
ask things in the news of the last 12

12
00:00:47,870 --> 00:00:51,980
months I don't know if you've noticed

13
00:00:49,930 --> 00:00:54,430
there was a report just came out of

14
00:00:51,980 --> 00:00:58,279
citizen lab in Toronto not so long ago

15
00:00:54,430 --> 00:01:00,860
which listed a whole heap of cases where

16
00:00:58,280 --> 00:01:03,950
people had had their iPhones compromised

17
00:01:00,860 --> 00:01:05,990
by malware probably the highest profile

18
00:01:03,950 --> 00:01:09,530
one you've heard of is that at the mood

19
00:01:05,990 --> 00:01:12,798
of Jamarcus OG just a few months ago in

20
00:01:09,530 --> 00:01:14,600
Turkey by the Saudi authorities and it

21
00:01:12,799 --> 00:01:16,580
was reported that his phone had been

22
00:01:14,600 --> 00:01:19,250
compromised by a particular piece of

23
00:01:16,580 --> 00:01:21,560
software and in that report that citizen

24
00:01:19,250 --> 00:01:23,720
iPod out they actually listed a whole

25
00:01:21,560 --> 00:01:26,060
heap of other incidents around the world

26
00:01:23,720 --> 00:01:27,740
where the work of one piece of software

27
00:01:26,060 --> 00:01:30,440
malware that you probably are familiar

28
00:01:27,740 --> 00:01:32,539
with came up again and again and again

29
00:01:30,440 --> 00:01:34,759
and that was the Pegasus malware which

30
00:01:32,540 --> 00:01:36,560
is sold by the Israeli company NSO group

31
00:01:34,760 --> 00:01:39,140
I'll say Israeli they're actually

32
00:01:36,560 --> 00:01:40,850
American owned outfit but they basically

33
00:01:39,140 --> 00:01:45,500
have a track record of supply and some

34
00:01:40,850 --> 00:01:48,830
of the most vicious regimes around the

35
00:01:45,500 --> 00:01:50,600
world and some very dodgy customers so

36
00:01:48,830 --> 00:01:55,640
we've got examples I've listed up here

37
00:01:50,600 --> 00:01:57,890
of Saudi citizen in in Canada who found

38
00:01:55,640 --> 00:01:59,900
his form packed we've had Ethiopian

39
00:01:57,890 --> 00:02:03,860
expatriates in London having their

40
00:01:59,900 --> 00:02:05,600
phones back we've had activists Against

41
00:02:03,860 --> 00:02:07,640
Corruption anti-corruption activists in

42
00:02:05,600 --> 00:02:08,810
Mexico who've been fighting find out

43
00:02:07,640 --> 00:02:10,549
what happened to some of the missing

44
00:02:08,810 --> 00:02:11,780
relatives because they believe they've

45
00:02:10,549 --> 00:02:14,959
been victims of cartels

46
00:02:11,780 --> 00:02:17,780
they found themselves victims of the the

47
00:02:14,959 --> 00:02:19,819
same malware it was even used against

48
00:02:17,780 --> 00:02:21,080
active and Sewer which is why we all

49
00:02:19,819 --> 00:02:23,119
know about Pegasus

50
00:02:21,080 --> 00:02:27,140
he was the guy that provided the very

51
00:02:23,120 --> 00:02:28,910
first hot link to the citizen lab people

52
00:02:27,140 --> 00:02:31,510
who got the tech analysts in on it and

53
00:02:28,910 --> 00:02:34,490
he basically received a text telling him

54
00:02:31,510 --> 00:02:35,929
secret report detailing torture in UAE

55
00:02:34,490 --> 00:02:38,690
pristine success rates live in the

56
00:02:35,930 --> 00:02:40,370
United Arab Emirates click this link but

57
00:02:38,690 --> 00:02:42,890
we've been formed several times before

58
00:02:40,370 --> 00:02:44,690
by gamma group software by hacking team

59
00:02:42,890 --> 00:02:46,429
software they've gone after him year

60
00:02:44,690 --> 00:02:49,820
after year because he's got this kind of

61
00:02:46,430 --> 00:02:52,280
record and he'd spoken citizen labid

62
00:02:49,820 --> 00:02:53,750
they'd set up a sting operation where

63
00:02:52,280 --> 00:02:55,280
they click the link for him they

64
00:02:53,750 --> 00:02:57,770
downloaded the first stage of the

65
00:02:55,280 --> 00:02:59,420
malware loader then they got the second

66
00:02:57,770 --> 00:03:00,560
stage to come down and then from there

67
00:02:59,420 --> 00:03:03,140
that's where we all found out about

68
00:03:00,560 --> 00:03:06,470
Pegasus so how do the things in that

69
00:03:03,140 --> 00:03:08,269
work well on a thorn that is a slightly

70
00:03:06,470 --> 00:03:10,970
different approach if you return the pop

71
00:03:08,270 --> 00:03:12,110
a normal shell on a normal box basically

72
00:03:10,970 --> 00:03:15,230
we've got to get remote code execution

73
00:03:12,110 --> 00:03:16,940
to start with and the usual target is

74
00:03:15,230 --> 00:03:18,950
going to be Safari because the attack

75
00:03:16,940 --> 00:03:21,050
surface on an iOS machine is almost

76
00:03:18,950 --> 00:03:23,810
non-existent if you look at the things

77
00:03:21,050 --> 00:03:26,720
that's listening for inbound connections

78
00:03:23,810 --> 00:03:29,300
there's very very little to go after but

79
00:03:26,720 --> 00:03:32,239
then you've got Safari millions of lines

80
00:03:29,300 --> 00:03:34,970
of court designed to run remotely

81
00:03:32,239 --> 00:03:37,190
provided unsigned chord that's awesome

82
00:03:34,970 --> 00:03:39,650
that's a great place to go in Safari is

83
00:03:37,190 --> 00:03:42,859
targeted for that reason but it brings

84
00:03:39,650 --> 00:03:44,989
in a whole heap of countermeasures it's

85
00:03:42,860 --> 00:03:47,870
got a SLR it's got write decks or

86
00:03:44,989 --> 00:03:51,290
execute it's got stack Canaries it's got

87
00:03:47,870 --> 00:03:53,269
a restrictive entitlements model in

88
00:03:51,290 --> 00:03:56,299
terms of what that process can do even

89
00:03:53,269 --> 00:03:59,540
when it's compromised but Pegasus

90
00:03:56,300 --> 00:04:02,750
managed to use a use after free exploit

91
00:03:59,540 --> 00:04:04,250
the gain native code execution that was

92
00:04:02,750 --> 00:04:06,440
good that's their first step that

93
00:04:04,250 --> 00:04:08,840
doesn't get you very far though I said

94
00:04:06,440 --> 00:04:11,000
there's a restrictive sandbox in place

95
00:04:08,840 --> 00:04:13,280
it's it's enforced by a demon called

96
00:04:11,000 --> 00:04:15,380
Humphrey D and that's Apple mobile file

97
00:04:13,280 --> 00:04:17,720
integrity demon and it's job basically

98
00:04:15,380 --> 00:04:20,000
is to run almost every process in the

99
00:04:17,720 --> 00:04:22,610
system runs is the mobile user use of

100
00:04:20,000 --> 00:04:24,650
500 with very very limited rights of

101
00:04:22,610 --> 00:04:26,360
what it can do any additional rights are

102
00:04:24,650 --> 00:04:28,849
granted by a system and mandatory access

103
00:04:26,360 --> 00:04:30,650
controls called entitlements and so if

104
00:04:28,850 --> 00:04:32,270
you don't have the right entitlement you

105
00:04:30,650 --> 00:04:34,229
just can't get anywhere you're not go

106
00:04:32,270 --> 00:04:36,000
anyway you've got native code execution

107
00:04:34,230 --> 00:04:39,300
it's not much better than Java you've

108
00:04:36,000 --> 00:04:41,400
got to go beyond know the step that

109
00:04:39,300 --> 00:04:43,320
people often do is a sandbox escape find

110
00:04:41,400 --> 00:04:44,880
another process on a system more

111
00:04:43,320 --> 00:04:47,310
privileged than you compromise that

112
00:04:44,880 --> 00:04:48,930
executes with its privileges but still

113
00:04:47,310 --> 00:04:51,570
you're gonna find that even route can't

114
00:04:48,930 --> 00:04:52,950
do that much on an iPhone it's really

115
00:04:51,570 --> 00:04:55,290
well protected subject to all the same

116
00:04:52,950 --> 00:04:56,909
controls those mandatory access controls

117
00:04:55,290 --> 00:04:58,710
it totally different what we normally

118
00:04:56,910 --> 00:04:59,790
used to do in the UNIX world when you

119
00:04:58,710 --> 00:05:01,500
need to have discretionary access

120
00:04:59,790 --> 00:05:03,090
controls where someone can sort of say

121
00:05:01,500 --> 00:05:05,970
I'm super you say I could reduce the

122
00:05:03,090 --> 00:05:07,919
religious of letters moonwick so what

123
00:05:05,970 --> 00:05:10,200
you force to do as a malware right there

124
00:05:07,920 --> 00:05:11,640
is go after the kernel get a kernel

125
00:05:10,200 --> 00:05:14,460
level compromise because that's really

126
00:05:11,640 --> 00:05:16,289
the next step up an apple is keep

127
00:05:14,460 --> 00:05:18,270
continuously raising the bar here and

128
00:05:16,290 --> 00:05:20,310
there moving things out so it's been

129
00:05:18,270 --> 00:05:21,930
much much more difficult the kernel

130
00:05:20,310 --> 00:05:22,620
itself uses all the same sweetener

131
00:05:21,930 --> 00:05:24,810
protections

132
00:05:22,620 --> 00:05:27,570
it's got a kernel ASLR mechanism right

133
00:05:24,810 --> 00:05:30,210
XOR execute etc and it's backed up by

134
00:05:27,570 --> 00:05:31,650
Hardware integrity protections you do

135
00:05:30,210 --> 00:05:34,440
anything even slightly dodgy in the

136
00:05:31,650 --> 00:05:36,989
kernel and pilot the Machine reboots and

137
00:05:34,440 --> 00:05:39,150
ice in hardware and I'm from the nasties

138
00:05:36,990 --> 00:05:41,940
I've read the necessary conditions on

139
00:05:39,150 --> 00:05:44,460
that are unlikely to be violated very

140
00:05:41,940 --> 00:05:46,740
trivially and so it's a very very strong

141
00:05:44,460 --> 00:05:48,630
guarantee but assuming you've got there

142
00:05:46,740 --> 00:05:50,040
and they actually used to separate

143
00:05:48,630 --> 00:05:52,440
approaches here they had to get a

144
00:05:50,040 --> 00:05:54,270
zero-day to give them an info leak on

145
00:05:52,440 --> 00:05:57,690
where the kernel it slid to and then

146
00:05:54,270 --> 00:05:59,580
they used another exploit pretty much in

147
00:05:57,690 --> 00:06:01,680
the same peace accord to give them court

148
00:05:59,580 --> 00:06:03,870
execution the context secure not at that

149
00:06:01,680 --> 00:06:05,430
point you can start awarding yourself

150
00:06:03,870 --> 00:06:07,440
the kind of privileges you want you can

151
00:06:05,430 --> 00:06:09,630
start disabling the restrictions that

152
00:06:07,440 --> 00:06:12,240
alpha D puts in place and you can get

153
00:06:09,630 --> 00:06:13,950
far more control over the device but

154
00:06:12,240 --> 00:06:15,810
even then the job's not completely over

155
00:06:13,950 --> 00:06:17,670
because it turns out that most of the

156
00:06:15,810 --> 00:06:21,450
data on an iPhone when that rest is

157
00:06:17,670 --> 00:06:24,090
encrypted so they have to use the level

158
00:06:21,450 --> 00:06:26,340
of access they've just got to insert

159
00:06:24,090 --> 00:06:28,140
shims basically to insert themselves or

160
00:06:26,340 --> 00:06:30,210
interpose themselves between the

161
00:06:28,140 --> 00:06:31,800
application the libraries because most

162
00:06:30,210 --> 00:06:35,640
of the application data that you want is

163
00:06:31,800 --> 00:06:38,280
encrypted on disk and right at the end

164
00:06:35,640 --> 00:06:39,570
well you've got usual jobs of sleeping

165
00:06:38,280 --> 00:06:40,159
and persistence and stuff like that

166
00:06:39,570 --> 00:06:42,080
please

167
00:06:40,160 --> 00:06:44,390
is really hard because every time you

168
00:06:42,080 --> 00:06:46,460
reboot the machine you in effect after

169
00:06:44,390 --> 00:06:48,860
we jailbreak it I have to react sploit

170
00:06:46,460 --> 00:06:51,140
it from scratch they did that by linking

171
00:06:48,860 --> 00:06:53,540
one of the startup items to be JSC the

172
00:06:51,140 --> 00:06:56,000
JavaScript core and executing a

173
00:06:53,540 --> 00:06:58,100
JavaScript program to repeat the same

174
00:06:56,000 --> 00:07:00,170
initial infection mechanism but it was

175
00:06:58,100 --> 00:07:02,000
difficult what people have tried to do

176
00:07:00,170 --> 00:07:04,460
instead is find new attack services

177
00:07:02,000 --> 00:07:05,720
because if you've got a fish somebody

178
00:07:04,460 --> 00:07:07,400
and get them to click your link that's

179
00:07:05,720 --> 00:07:09,050
an exploitive exposure you can have a

180
00:07:07,400 --> 00:07:10,789
time-limited link you could be good for

181
00:07:09,050 --> 00:07:13,040
one time only but it's a very limited

182
00:07:10,790 --> 00:07:15,260
way into the machine and it's not very

183
00:07:13,040 --> 00:07:18,050
trustworthy and recently reviewed but

184
00:07:15,260 --> 00:07:20,690
the UAE s own malware which is a

185
00:07:18,050 --> 00:07:22,820
targeting iMessage and this karma

186
00:07:20,690 --> 00:07:24,710
malware as it's known claims to be able

187
00:07:22,820 --> 00:07:26,930
to get you remote access without you

188
00:07:24,710 --> 00:07:30,349
doing anything so it reduces the risk of

189
00:07:26,930 --> 00:07:32,030
detection very significantly so you can

190
00:07:30,350 --> 00:07:34,040
go after games we can go after other

191
00:07:32,030 --> 00:07:37,119
things but maybe this is a different way

192
00:07:34,040 --> 00:07:39,110
of doing things and the people aqui lab

193
00:07:37,120 --> 00:07:41,630
they came up with a really interesting

194
00:07:39,110 --> 00:07:46,580
poem to own entry last year well they

195
00:07:41,630 --> 00:07:48,890
went after the they went after the

196
00:07:46,580 --> 00:07:49,909
captive portal software so I came up

197
00:07:48,890 --> 00:07:52,490
here in the training today between

198
00:07:49,910 --> 00:07:54,500
SunRail you connect to Queensland Wi-Fi

199
00:07:52,490 --> 00:07:56,480
and pops a page saying to you accept the

200
00:07:54,500 --> 00:07:58,970
terms of Riemann's click yes and that's

201
00:07:56,480 --> 00:08:01,580
because every time the interface comes

202
00:07:58,970 --> 00:08:04,040
up the web she Paul gets a chance to say

203
00:08:01,580 --> 00:08:06,380
can I contact captive da Apple comm and

204
00:08:04,040 --> 00:08:08,540
receive the webpage I think I can if it

205
00:08:06,380 --> 00:08:10,820
is anything else it displays it to the

206
00:08:08,540 --> 00:08:12,290
user and it uses the same WebKit Free

207
00:08:10,820 --> 00:08:15,620
American the same attack see if it

208
00:08:12,290 --> 00:08:17,810
happened Safari but you don't get the

209
00:08:15,620 --> 00:08:19,520
use of having to click on anything but

210
00:08:17,810 --> 00:08:20,690
to get it to work you've got to descend

211
00:08:19,520 --> 00:08:23,120
the stack of it because you've got to

212
00:08:20,690 --> 00:08:25,010
run an evil twin sort of Wi-Fi attacked

213
00:08:23,120 --> 00:08:27,020
where you have a fake access point

214
00:08:25,010 --> 00:08:28,640
that's putting up a fake page let's say

215
00:08:27,020 --> 00:08:30,560
now my captive portal you can connect to

216
00:08:28,640 --> 00:08:32,809
me or Google or whatever it is you think

217
00:08:30,560 --> 00:08:36,169
you're going to and then runs the

218
00:08:32,809 --> 00:08:38,239
exploit code but still it's a little bit

219
00:08:36,169 --> 00:08:40,490
clunky and there's been a drive to go

220
00:08:38,240 --> 00:08:42,590
down that stack rather than going across

221
00:08:40,490 --> 00:08:44,540
the applications and see what else we

222
00:08:42,590 --> 00:08:46,820
can do and if you go down the stack you

223
00:08:44,540 --> 00:08:48,560
can actually address traffic at the

224
00:08:46,820 --> 00:08:50,460
different layers you can see we can send

225
00:08:48,560 --> 00:08:52,500
different things to the IP layer

226
00:08:50,460 --> 00:08:53,670
it's not really great hunting run but

227
00:08:52,500 --> 00:08:55,500
this stuff in there you might be able to

228
00:08:53,670 --> 00:08:58,800
exploit or you can go after the link

229
00:08:55,500 --> 00:09:00,630
layer and at the link layer we've got

230
00:08:58,800 --> 00:09:02,849
two separate ones that we can go after

231
00:09:00,630 --> 00:09:04,640
that are obvious they've got like some

232
00:09:02,850 --> 00:09:07,860
kind of distance between you and the

233
00:09:04,640 --> 00:09:12,569
compromised machine and that's Wi-Fi and

234
00:09:07,860 --> 00:09:14,100
4G so today I'm talking about Wi-Fi I'm

235
00:09:12,570 --> 00:09:17,430
talking about actually attacking the W

236
00:09:14,100 --> 00:09:18,930
Nick itself so why not fall to you a 4G

237
00:09:17,430 --> 00:09:22,319
is actually quite difficult attack a

238
00:09:18,930 --> 00:09:24,630
Wi-Fi is actually a little bit easier to

239
00:09:22,320 --> 00:09:25,950
experiment with easy to play wave and

240
00:09:24,630 --> 00:09:28,350
gives you most of the same advantages

241
00:09:25,950 --> 00:09:30,720
without the problems of active and

242
00:09:28,350 --> 00:09:32,640
knocking on your door and saying why are

243
00:09:30,720 --> 00:09:34,440
you broadcasting in restricted spectrum

244
00:09:32,640 --> 00:09:36,449
and this does happen it happened to my

245
00:09:34,440 --> 00:09:38,520
employers many years ago on marine

246
00:09:36,450 --> 00:09:41,370
research they had some 900 megahertz

247
00:09:38,520 --> 00:09:44,040
cards with Wi-Fi that were accidentally

248
00:09:41,370 --> 00:09:45,839
strayed into the GSM band and it didn't

249
00:09:44,040 --> 00:09:47,610
take very long for ACMA to come knock in

250
00:09:45,839 --> 00:09:49,290
and saying you can't do that and we got

251
00:09:47,610 --> 00:09:50,870
an edict from the top management saying

252
00:09:49,290 --> 00:09:54,959
not gonna happen

253
00:09:50,870 --> 00:09:56,850
not good I ran a 4G and 2gb a station at

254
00:09:54,959 --> 00:09:59,790
home for experiments I Susan Otten BTS

255
00:09:56,850 --> 00:10:01,800
and see you sell te the great things to

256
00:09:59,790 --> 00:10:03,000
play with but they are not just complex

257
00:10:01,800 --> 00:10:04,979
which is great from an exploitation

258
00:10:03,000 --> 00:10:06,570
viewpoint we love to see complex things

259
00:10:04,980 --> 00:10:08,760
but they're actually a little bit

260
00:10:06,570 --> 00:10:12,180
complex even to get just working to

261
00:10:08,760 --> 00:10:14,040
start with and so Wi-Fi is got a much

262
00:10:12,180 --> 00:10:16,920
nicer feel to it to be honest and it is

263
00:10:14,040 --> 00:10:18,480
really easy to go after because one of

264
00:10:16,920 --> 00:10:20,579
the things that we talk well I'll talk

265
00:10:18,480 --> 00:10:22,170
about the protections but there are far

266
00:10:20,580 --> 00:10:23,820
fewer protections and go in at this

267
00:10:22,170 --> 00:10:28,829
lower layer the stack that if you go in

268
00:10:23,820 --> 00:10:30,839
through the application space every talk

269
00:10:28,830 --> 00:10:33,000
when we talk about Wi-Fi makes this

270
00:10:30,839 --> 00:10:34,740
fundamental distinction and there's a

271
00:10:33,000 --> 00:10:36,600
big spectrum of possible implementations

272
00:10:34,740 --> 00:10:39,029
of Wi-Fi chips can have so what we've

273
00:10:36,600 --> 00:10:40,620
got here is I'm talking about soft

274
00:10:39,029 --> 00:10:43,140
mattresses for Mac and there just to

275
00:10:40,620 --> 00:10:46,529
kind of points in a spectrum that goes

276
00:10:43,140 --> 00:10:48,630
from at one hand a completely hardware

277
00:10:46,529 --> 00:10:51,089
solution which almost all the work is

278
00:10:48,630 --> 00:10:52,980
done in Hardware of your frame in and

279
00:10:51,089 --> 00:10:55,200
amplification and all the processing

280
00:10:52,980 --> 00:10:57,930
that goes on for Wi-Fi but it'd be very

281
00:10:55,200 --> 00:10:59,370
inflexible and really wouldn't be suited

282
00:10:57,930 --> 00:11:00,310
to the real world or you could go to the

283
00:10:59,370 --> 00:11:01,660
other extreme

284
00:11:00,310 --> 00:11:03,819
and you can have a completely

285
00:11:01,660 --> 00:11:05,860
software-defined radio where the only

286
00:11:03,819 --> 00:11:08,019
Hardware jobs were signal amplification

287
00:11:05,860 --> 00:11:09,670
at the antenna everything else could be

288
00:11:08,019 --> 00:11:11,410
done in software the trouble with that

289
00:11:09,670 --> 00:11:13,540
is introduces latencies and things that

290
00:11:11,410 --> 00:11:14,529
Wi-Fi have got some very precise timing

291
00:11:13,540 --> 00:11:15,730
restrictions

292
00:11:14,529 --> 00:11:17,319
you've got responded in a few

293
00:11:15,730 --> 00:11:18,720
microseconds with an acknowledgment you

294
00:11:17,319 --> 00:11:21,160
go respond with a few microseconds

295
00:11:18,720 --> 00:11:23,980
didn't request it's just not going to

296
00:11:21,160 --> 00:11:26,469
work so what we ended up with is two

297
00:11:23,980 --> 00:11:30,730
approaches where the first one we

298
00:11:26,470 --> 00:11:32,980
implement the full Mac approach is the

299
00:11:30,730 --> 00:11:36,970
hardware does take on most of the jobs

300
00:11:32,980 --> 00:11:38,709
in this internal design the both these

301
00:11:36,970 --> 00:11:40,629
approaches you something approach in a

302
00:11:38,709 --> 00:11:44,559
software radio thing they don't expose

303
00:11:40,629 --> 00:11:46,990
the the samples up to the higher layers

304
00:11:44,559 --> 00:11:49,389
what they expose is frames which is what

305
00:11:46,990 --> 00:11:51,910
we want to see but in the case of the

306
00:11:49,389 --> 00:11:54,249
format design you have a processor

307
00:11:51,910 --> 00:11:56,199
that's not just implement in all those

308
00:11:54,249 --> 00:11:59,079
timing critical behaviors that I

309
00:11:56,199 --> 00:12:02,649
mentioned up here things like CSMA RTS

310
00:11:59,079 --> 00:12:04,388
CTS or acknowledgments all of that stuff

311
00:12:02,649 --> 00:12:06,279
but you will also implement the

312
00:12:04,389 --> 00:12:08,579
higher-level behaviors that will like

313
00:12:06,279 --> 00:12:10,899
probing key authentication exchange

314
00:12:08,579 --> 00:12:12,878
agreement all that kind of thing will

315
00:12:10,899 --> 00:12:15,490
actually occur on the card as well and

316
00:12:12,879 --> 00:12:17,439
not in the horse CPU what we've got

317
00:12:15,490 --> 00:12:19,750
mostly on desktop systems these days is

318
00:12:17,439 --> 00:12:21,160
the soft Mac approach with the kernel

319
00:12:19,750 --> 00:12:23,529
like the Linux kernel it's got its own e

320
00:12:21,160 --> 00:12:26,500
to 11 stack built in and it treats the

321
00:12:23,529 --> 00:12:28,959
card very much as a cue you are you get

322
00:12:26,500 --> 00:12:31,180
to transmit this but it's basically just

323
00:12:28,959 --> 00:12:33,339
a free delivery service it takes care of

324
00:12:31,180 --> 00:12:35,800
all those tiny critical bits but not the

325
00:12:33,339 --> 00:12:37,240
rest the full Mac approach says that

326
00:12:35,800 --> 00:12:39,309
we're gonna offload all that the

327
00:12:37,240 --> 00:12:42,009
hardware and strangely that's what the

328
00:12:39,309 --> 00:12:43,300
model has become for telephones because

329
00:12:42,009 --> 00:12:46,149
you can actually do it on a lower

330
00:12:43,300 --> 00:12:48,429
privacy PU all of its own so rather than

331
00:12:46,149 --> 00:12:51,850
having the Horst kernel doing the stack

332
00:12:48,429 --> 00:12:53,529
process in this stuff gets offloaded so

333
00:12:51,850 --> 00:12:55,839
look at the process that I've done

334
00:12:53,529 --> 00:12:57,850
basically has been to in dive into this

335
00:12:55,839 --> 00:13:00,429
question to research it and start doing

336
00:12:57,850 --> 00:13:03,370
a bit of reversing on the Wi-Fi card and

337
00:13:00,429 --> 00:13:05,559
trying to exploit that and I've come up

338
00:13:03,370 --> 00:13:07,269
with a like a four-stage process it's

339
00:13:05,559 --> 00:13:09,100
just interlocked in there's no kind of

340
00:13:07,269 --> 00:13:10,569
like you do this then you want to do

341
00:13:09,100 --> 00:13:12,070
this these things you find a little bit

342
00:13:10,569 --> 00:13:14,860
out you go back inside

343
00:13:12,070 --> 00:13:17,500
around and so try and research to

344
00:13:14,860 --> 00:13:19,750
understand the hardware software reverse

345
00:13:17,500 --> 00:13:22,060
into and actually sit-stand how it works

346
00:13:19,750 --> 00:13:23,590
fuzzing to try and break it and then

347
00:13:22,060 --> 00:13:27,729
exploit development to try and get on

348
00:13:23,590 --> 00:13:30,160
and see where we can go from there so

349
00:13:27,730 --> 00:13:31,780
when we do research I don't have many

350
00:13:30,160 --> 00:13:33,910
people here researchers but from the

351
00:13:31,780 --> 00:13:35,020
facing scientific researches that either

352
00:13:33,910 --> 00:13:36,250
related work

353
00:13:35,020 --> 00:13:39,220
look what other people have done already

354
00:13:36,250 --> 00:13:41,740
and going back as far as about 2006

355
00:13:39,220 --> 00:13:44,410
there was an attack against a soft Mac

356
00:13:41,740 --> 00:13:47,410
stacked on the Macintosh by L Tremaine

357
00:13:44,410 --> 00:13:49,540
or at blackhat and they proved that if

358
00:13:47,410 --> 00:13:51,819
there's a bug in the kernel stack for

359
00:13:49,540 --> 00:13:54,130
the 802 11 you get full colonel access

360
00:13:51,820 --> 00:13:55,900
immediately send a packet back you've

361
00:13:54,130 --> 00:13:58,420
got access and you can do anything you

362
00:13:55,900 --> 00:14:00,459
want it was very controversial because

363
00:13:58,420 --> 00:14:02,560
they didn't release that exploit they

364
00:14:00,460 --> 00:14:04,450
just hand waved and it wasn't for the

365
00:14:02,560 --> 00:14:06,310
actual chip used in the Macintosh at the

366
00:14:04,450 --> 00:14:08,710
time it was used for adding card it took

367
00:14:06,310 --> 00:14:10,180
about a year to get resolved they did

368
00:14:08,710 --> 00:14:12,180
some really good work and they published

369
00:14:10,180 --> 00:14:15,250
there but they did take an awful lot of

370
00:14:12,180 --> 00:14:17,979
rubbish in between time then there's the

371
00:14:15,250 --> 00:14:19,390
paper but you'll see our presentation

372
00:14:17,980 --> 00:14:21,340
materials he really went after the

373
00:14:19,390 --> 00:14:23,500
network card itself because it was

374
00:14:21,340 --> 00:14:24,670
common at this year that the typical

375
00:14:23,500 --> 00:14:27,220
Ethernet card would have its own

376
00:14:24,670 --> 00:14:29,860
processor so maybe we can compromise the

377
00:14:27,220 --> 00:14:32,080
processor on the network card use that

378
00:14:29,860 --> 00:14:34,270
position that running on that host to

379
00:14:32,080 --> 00:14:36,490
attack the host CPU directly from there

380
00:14:34,270 --> 00:14:38,530
it's kind of a two-stage step it's what

381
00:14:36,490 --> 00:14:39,820
I'm gonna describe today and this was

382
00:14:38,530 --> 00:14:41,620
the first paper then we've got a whole

383
00:14:39,820 --> 00:14:43,690
heap of others probably the most

384
00:14:41,620 --> 00:14:46,240
important that I want to highlight are

385
00:14:43,690 --> 00:14:49,930
the work of the next one people who did

386
00:14:46,240 --> 00:14:54,280
the same research and applied it to the

387
00:14:49,930 --> 00:14:56,170
W NIC the Wi-Fi NICs and they showed how

388
00:14:54,280 --> 00:14:58,140
you could actually review essentially

389
00:14:56,170 --> 00:15:00,849
the framework there's the firmware and

390
00:14:58,140 --> 00:15:03,189
modify it upload new behaviours to the

391
00:15:00,850 --> 00:15:04,960
Wi-Fi card so you could get monitor mode

392
00:15:03,190 --> 00:15:07,360
out of your iPhone because that's

393
00:15:04,960 --> 00:15:08,740
something you can't do but their work

394
00:15:07,360 --> 00:15:11,560
wasn't done on iPhone that was all on

395
00:15:08,740 --> 00:15:14,350
Android and then the paper by Ben Yamini

396
00:15:11,560 --> 00:15:15,880
was set to articles by tools projects it

397
00:15:14,350 --> 00:15:16,750
was absolutely stunning piece of work

398
00:15:15,880 --> 00:15:19,090
really good stuff

399
00:15:16,750 --> 00:15:21,370
Benny meanie showed a complete exploit

400
00:15:19,090 --> 00:15:22,840
chain of how you can exploit the W net

401
00:15:21,370 --> 00:15:23,240
can go all the way through to an Angus

402
00:15:22,840 --> 00:15:26,149
comp

403
00:15:23,240 --> 00:15:28,220
nice and right at the end I'll talked

404
00:15:26,149 --> 00:15:31,490
about the final paper just at the end

405
00:15:28,220 --> 00:15:33,740
here which was by astute air and others

406
00:15:31,490 --> 00:15:37,279
which talks about a wdl so I'll come

407
00:15:33,740 --> 00:15:39,260
back to that so that's the research and

408
00:15:37,279 --> 00:15:40,520
all those things in the links if you get

409
00:15:39,260 --> 00:15:42,290
the notes they're all links to the

410
00:15:40,520 --> 00:15:44,329
presentations you can download and go

411
00:15:42,290 --> 00:15:46,069
through and hopefully my presentation

412
00:15:44,330 --> 00:15:48,140
today will give you a handle on how you

413
00:15:46,070 --> 00:15:49,520
can get more value out of study in those

414
00:15:48,140 --> 00:15:51,890
things and how you can actually use

415
00:15:49,520 --> 00:15:53,630
those results to get yourself execution

416
00:15:51,890 --> 00:15:57,260
get yourself an exploit that at least

417
00:15:53,630 --> 00:15:58,730
runs on the W neck so the next part is

418
00:15:57,260 --> 00:16:01,279
to look at the publicly available data

419
00:15:58,730 --> 00:16:04,130
what we've got there is the data sheets

420
00:16:01,279 --> 00:16:07,510
from Cyprus Broadcom the company that

421
00:16:04,130 --> 00:16:10,399
produces the chips and all the Broadcom

422
00:16:07,510 --> 00:16:12,500
format chips look very similar they

423
00:16:10,399 --> 00:16:14,750
basically have a bus at the back end

424
00:16:12,500 --> 00:16:16,700
they're very modular design where these

425
00:16:14,750 --> 00:16:20,149
things called cos and I've described in

426
00:16:16,700 --> 00:16:22,940
here as there's a PCIe core and the SAS

427
00:16:20,149 --> 00:16:25,880
is a bridge between the bus the PCIe bus

428
00:16:22,940 --> 00:16:28,070
that the host is using and the internal

429
00:16:25,880 --> 00:16:30,200
silicon backplane bus that all the other

430
00:16:28,070 --> 00:16:32,899
cores are connected to and it allows you

431
00:16:30,200 --> 00:16:35,329
to basically present any one of those

432
00:16:32,899 --> 00:16:37,520
cores on the main PCI bus and switch

433
00:16:35,329 --> 00:16:40,010
between them and those cause do things

434
00:16:37,520 --> 00:16:41,420
like I've got an ARM Cortex CPU here so

435
00:16:40,010 --> 00:16:43,939
that's what's actually running there

436
00:16:41,420 --> 00:16:46,279
it's a 32 bit CPU just dedicated to do

437
00:16:43,940 --> 00:16:48,680
network process in for Wi-Fi that's all

438
00:16:46,279 --> 00:16:51,589
it's only job is it's got some RAM and

439
00:16:48,680 --> 00:16:54,579
ROM they can be read from the host

440
00:16:51,589 --> 00:16:56,959
device directly or certainly the RAM can

441
00:16:54,579 --> 00:16:58,250
everybody I said that the ROM can't and

442
00:16:56,959 --> 00:17:02,180
that's why I shaded out that you can't

443
00:16:58,250 --> 00:17:04,880
access the ROM itself we have a d 11

444
00:17:02,180 --> 00:17:06,589
core that stands for dr. Levin 802 dr.

445
00:17:04,880 --> 00:17:08,600
Levin and that's full of doing all the

446
00:17:06,589 --> 00:17:10,639
time critical stuff on the CPU that's

447
00:17:08,599 --> 00:17:12,649
not done by the cortex rather those

448
00:17:10,640 --> 00:17:14,569
high-level behaviors of key

449
00:17:12,650 --> 00:17:16,819
authentication exchange agreement you

450
00:17:14,569 --> 00:17:20,270
know join in and disassociated in from a

451
00:17:16,819 --> 00:17:22,699
particular logical network this is the

452
00:17:20,270 --> 00:17:24,500
stuff to do with I want to broadcast now

453
00:17:22,699 --> 00:17:26,839
do I have to back off

454
00:17:24,500 --> 00:17:28,040
do I have to re transmit do I have to

455
00:17:26,839 --> 00:17:30,678
generate acknowledgement

456
00:17:28,040 --> 00:17:32,600
all those kind of really low-level time

457
00:17:30,679 --> 00:17:33,200
critical stuff they had done the D 11

458
00:17:32,600 --> 00:17:35,090
core

459
00:17:33,200 --> 00:17:36,330
and that's then we used a programmable

460
00:17:35,090 --> 00:17:38,879
state machine market

461
00:17:36,330 --> 00:17:40,408
there is a publicly available PSM

462
00:17:38,880 --> 00:17:42,269
assembler for that as well so you can

463
00:17:40,409 --> 00:17:43,919
actually program that remotely if you

464
00:17:42,269 --> 00:17:47,190
can get access to the device and get

465
00:17:43,919 --> 00:17:49,350
access to the silicon backplane the

466
00:17:47,190 --> 00:17:52,140
third so I've said it's just more tiller

467
00:17:49,350 --> 00:17:53,668
and from the from the top-end they could

468
00:17:52,140 --> 00:17:56,549
be the same they can change that PCIe

469
00:17:53,669 --> 00:17:58,590
for other things earlier versions used a

470
00:17:56,549 --> 00:18:01,350
version of us be that like hard-coded

471
00:17:58,590 --> 00:18:02,610
USB call HSI see they've used that SDI

472
00:18:01,350 --> 00:18:04,620
or and all they have to do is change

473
00:18:02,610 --> 00:18:06,809
that one silica backplane core and

474
00:18:04,620 --> 00:18:08,100
they've provided a new interface so

475
00:18:06,809 --> 00:18:09,600
provides a great degree deal of

476
00:18:08,100 --> 00:18:12,889
consistency all the way and you'll see

477
00:18:09,600 --> 00:18:15,029
also on silicon backplane the Bluetooth

478
00:18:12,889 --> 00:18:16,918
capabilities are also integrated onto

479
00:18:15,029 --> 00:18:19,620
most of these ships and it'll appear as

480
00:18:16,919 --> 00:18:21,210
a core on the backplane you also have

481
00:18:19,620 --> 00:18:23,939
some source court obviously some one

482
00:18:21,210 --> 00:18:26,549
reverse it Apple make much of the source

483
00:18:23,940 --> 00:18:28,080
code of xnu available most of their your

484
00:18:26,549 --> 00:18:29,879
kit stuff is available and device

485
00:18:28,080 --> 00:18:32,250
drivers have great place to find bugs

486
00:18:29,880 --> 00:18:33,870
they've done some academic studies over

487
00:18:32,250 --> 00:18:36,210
the years if it's a very famous papers

488
00:18:33,870 --> 00:18:38,908
they find that the rate of bugs in core

489
00:18:36,210 --> 00:18:40,850
kernel court is about seven times lower

490
00:18:38,909 --> 00:18:44,190
than the device drivers so the eye or

491
00:18:40,850 --> 00:18:46,199
subsystem is very flaky part of your

492
00:18:44,190 --> 00:18:48,000
average operating system when you get

493
00:18:46,200 --> 00:18:49,740
with windows blue screens of death it's

494
00:18:48,000 --> 00:18:53,159
usually down to some flaky device driver

495
00:18:49,740 --> 00:18:54,539
not something the call itself the other

496
00:18:53,159 --> 00:18:57,419
thing that you're going to see is mdns

497
00:18:54,539 --> 00:18:59,730
responder now that's Apple's mobile DNS

498
00:18:57,419 --> 00:19:00,899
implementation but they do make the

499
00:18:59,730 --> 00:19:02,059
source code of some parts of that

500
00:19:00,899 --> 00:19:04,500
available that could be quite useful

501
00:19:02,059 --> 00:19:07,289
we've got the Linux device driver for

502
00:19:04,500 --> 00:19:08,279
the soft Mac devices since they program

503
00:19:07,289 --> 00:19:10,440
in the dealing with the same hardware

504
00:19:08,279 --> 00:19:11,789
that their full Mac device does it's

505
00:19:10,440 --> 00:19:14,250
logical to assume that we've got that

506
00:19:11,789 --> 00:19:15,990
stuff to go we've got the operating

507
00:19:14,250 --> 00:19:18,960
system that runs the format chip that

508
00:19:15,990 --> 00:19:20,700
cortex runs a version of thread X it's

509
00:19:18,960 --> 00:19:22,980
got its own operating monolithic

510
00:19:20,700 --> 00:19:25,679
operating system it's all one big binary

511
00:19:22,980 --> 00:19:27,990
image but it actually runs a vision of

512
00:19:25,679 --> 00:19:30,960
our thread X and then we've got some

513
00:19:27,990 --> 00:19:33,720
leaks that occurred of the source code

514
00:19:30,960 --> 00:19:35,399
from Broadcom that's awesome got that

515
00:19:33,720 --> 00:19:37,049
from one of the earlier presentations

516
00:19:35,399 --> 00:19:39,750
Martin Steen he pointed out I went

517
00:19:37,049 --> 00:19:41,970
looking the guy's my longitude this

518
00:19:39,750 --> 00:19:45,090
paper provides a link to them and then

519
00:19:41,970 --> 00:19:46,889
about 18 months ago I received a

520
00:19:45,090 --> 00:19:48,750
takedown notice because I simply forked

521
00:19:46,889 --> 00:19:49,860
it on github and

522
00:19:48,750 --> 00:19:51,650
that's what they've done they've

523
00:19:49,860 --> 00:19:55,080
basically gone after both of these

524
00:19:51,650 --> 00:19:57,030
repositories of EMG 1312 B I should have

525
00:19:55,080 --> 00:19:59,039
explained that that black box up there

526
00:19:57,030 --> 00:20:01,168
it's the source code for that box has

527
00:19:59,039 --> 00:20:03,809
become available in the VM G 1312 B

528
00:20:01,169 --> 00:20:06,000
repository and then the K hates him is

529
00:20:03,809 --> 00:20:07,139
probably even better again but you're

530
00:20:06,000 --> 00:20:08,970
not going to be able to get laws

531
00:20:07,140 --> 00:20:10,470
legitimately just by googling you can

532
00:20:08,970 --> 00:20:14,360
have to join weird Russian or Chinese

533
00:20:10,470 --> 00:20:16,559
forums I'm afraid so proceeding on to

534
00:20:14,360 --> 00:20:18,120
actually the real meat and drink

535
00:20:16,559 --> 00:20:20,970
development to begin on already 20

536
00:20:18,120 --> 00:20:23,399
minutes in its reverse engineer in how

537
00:20:20,970 --> 00:20:24,600
can we reverse engineer the double unit

538
00:20:23,400 --> 00:20:26,070
because we're not gonna get an exploit

539
00:20:24,600 --> 00:20:28,230
unless we understand what's going on and

540
00:20:26,070 --> 00:20:29,549
so we need to dive in and find out

541
00:20:28,230 --> 00:20:32,250
what's going on you're gonna need for

542
00:20:29,549 --> 00:20:33,600
something like this a reasonable setup

543
00:20:32,250 --> 00:20:36,150
something where you've got a jailbroken

544
00:20:33,600 --> 00:20:38,340
phone to experiment with some kind of

545
00:20:36,150 --> 00:20:41,490
controlled environment computer to

546
00:20:38,340 --> 00:20:44,100
actually do the reversal on and some

547
00:20:41,490 --> 00:20:46,110
disassembly software disassembler though

548
00:20:44,100 --> 00:20:49,260
I use LM in the slides here I'm actually

549
00:20:46,110 --> 00:20:51,959
using mostly Papa I do anybody uses hot

550
00:20:49,260 --> 00:20:53,370
baths accompied is awesome I'm not a fan

551
00:20:51,960 --> 00:20:55,409
about you do I think it's a piece of

552
00:20:53,370 --> 00:20:57,780
rubbish it's very complex but it's

553
00:20:55,409 --> 00:20:58,980
rubbish and of course we've got Ghidorah

554
00:20:57,780 --> 00:21:00,809
this came out last few weeks and I'd

555
00:20:58,980 --> 00:21:04,380
want to take a show hands how many

556
00:21:00,809 --> 00:21:08,250
people downloaded deidre how would you

557
00:21:04,380 --> 00:21:09,990
like it okay yeah it's quite good this

558
00:21:08,250 --> 00:21:12,240
is a really useful tool to be going on

559
00:21:09,990 --> 00:21:14,850
with in some ways it's changed how I

560
00:21:12,240 --> 00:21:16,350
look at disassembly because you're able

561
00:21:14,850 --> 00:21:18,030
to go a little bit through that up the

562
00:21:16,350 --> 00:21:19,500
stack and start looking at things at the

563
00:21:18,030 --> 00:21:20,908
semantically higher level than just a

564
00:21:19,500 --> 00:21:22,409
seminal I'm good at sem blur I

565
00:21:20,909 --> 00:21:24,510
understand what I'm doing I enjoy

566
00:21:22,409 --> 00:21:26,280
playing around at that level but you do

567
00:21:24,510 --> 00:21:27,720
allows you to go a little bit closer to

568
00:21:26,280 --> 00:21:32,730
C or something like that and it's much

569
00:21:27,720 --> 00:21:35,610
more useful so the film way now I've

570
00:21:32,730 --> 00:21:38,880
said that the back end the silicon

571
00:21:35,610 --> 00:21:40,590
backplate has got this CPU the double

572
00:21:38,880 --> 00:21:44,549
unique CPU the ARM Cortex

573
00:21:40,590 --> 00:21:47,070
it's got RAM and ROM no the ROM contains

574
00:21:44,549 --> 00:21:49,379
most of the behavior of the Wi-Fi stack

575
00:21:47,070 --> 00:21:51,720
all the high-level behaviours are up

576
00:21:49,380 --> 00:21:53,539
there and then there is some ROM which

577
00:21:51,720 --> 00:21:56,070
provides like runtime scratchpad memory

578
00:21:53,539 --> 00:21:57,419
places where all the message frames are

579
00:21:56,070 --> 00:21:59,129
going to get stored while they're being

580
00:21:57,419 --> 00:22:02,640
queued for transmission or

581
00:21:59,130 --> 00:22:05,400
from from reception and it also includes

582
00:22:02,640 --> 00:22:07,080
some patches includes changes to the rom

583
00:22:05,400 --> 00:22:09,270
and firmware because when I said about

584
00:22:07,080 --> 00:22:10,439
the spectrum of possible designs if you

585
00:22:09,270 --> 00:22:12,030
do everything in hardware it's really

586
00:22:10,440 --> 00:22:14,970
inflexible if you do everything it's off

587
00:22:12,030 --> 00:22:16,920
it's really flexible but the full Mac is

588
00:22:14,970 --> 00:22:19,590
kind of more towards the hardware end of

589
00:22:16,920 --> 00:22:21,060
that spectrum but they still want the

590
00:22:19,590 --> 00:22:22,649
benefits of doing it in software so what

591
00:22:21,060 --> 00:22:25,050
they do is they allow for patches to be

592
00:22:22,650 --> 00:22:28,620
shipped via Iran but Iran to the ROM

593
00:22:25,050 --> 00:22:30,210
program and so it gives us a chance to

594
00:22:28,620 --> 00:22:36,209
dive in and have a see what's going on

595
00:22:30,210 --> 00:22:37,920
there so here's how the RAM actually

596
00:22:36,210 --> 00:22:39,450
gets initialized is that there's a

597
00:22:37,920 --> 00:22:42,420
process that runs on your iPhone called

598
00:22:39,450 --> 00:22:45,810
the Wi-Fi thermal order daemon it speaks

599
00:22:42,420 --> 00:22:47,820
to the kernel API ultimately contacts

600
00:22:45,810 --> 00:22:49,290
the device driver and because it's a

601
00:22:47,820 --> 00:22:51,270
four Mac device the device driver is

602
00:22:49,290 --> 00:22:54,090
very thin and basically forwards honest

603
00:22:51,270 --> 00:22:55,650
all the calls made to it directly on to

604
00:22:54,090 --> 00:22:57,209
the device to satisfy if you're a

605
00:22:55,650 --> 00:22:59,460
Macintosh it would do much more of those

606
00:22:57,210 --> 00:23:01,680
inside the material itself but in the ir

607
00:22:59,460 --> 00:23:05,180
s-- kernel it's forwarded on across to

608
00:23:01,680 --> 00:23:07,710
this device so we want to recover as

609
00:23:05,180 --> 00:23:08,880
much as we can from the code from there

610
00:23:07,710 --> 00:23:12,660
in order to give us something that we

611
00:23:08,880 --> 00:23:15,150
can play with and that leads me to the

612
00:23:12,660 --> 00:23:17,130
series of steps basically the initial

613
00:23:15,150 --> 00:23:18,390
steps are i'm suggesting is that you

614
00:23:17,130 --> 00:23:19,380
want to recover the firmware while

615
00:23:18,390 --> 00:23:21,390
you're going to get the ram because

616
00:23:19,380 --> 00:23:23,250
that's something we can access so we're

617
00:23:21,390 --> 00:23:25,020
gonna find the ram image we're then

618
00:23:23,250 --> 00:23:27,450
going to reverse it sufficient at least

619
00:23:25,020 --> 00:23:29,250
to allow us to patch it so that we can

620
00:23:27,450 --> 00:23:31,950
insert the patch that will then let us

621
00:23:29,250 --> 00:23:33,210
get everything out of the ROM and once

622
00:23:31,950 --> 00:23:34,680
we've got the raw man the RAM in which

623
00:23:33,210 --> 00:23:36,030
is we can glue them back together and

624
00:23:34,680 --> 00:23:37,650
now we've got a piece of software that

625
00:23:36,030 --> 00:23:40,170
can analyze properly inside a

626
00:23:37,650 --> 00:23:42,660
disassembler so let's have a look at

627
00:23:40,170 --> 00:23:45,300
what steps involved where is the RAM

628
00:23:42,660 --> 00:23:48,870
image how can I be sure I've got the

629
00:23:45,300 --> 00:23:50,370
right thing well where is it can get in

630
00:23:48,870 --> 00:23:51,989
two ways and this is a place this is a

631
00:23:50,370 --> 00:23:54,270
general approach that I've abducted in

632
00:23:51,990 --> 00:23:56,100
other cases as well if you've got a like

633
00:23:54,270 --> 00:23:58,470
an embedded device of any kind this

634
00:23:56,100 --> 00:23:59,639
getting updates probably the easiest way

635
00:23:58,470 --> 00:24:00,870
to get a hold of some of the firmware on

636
00:23:59,640 --> 00:24:02,280
there is to look at one of the software

637
00:24:00,870 --> 00:24:06,030
updates and that's what I've done here

638
00:24:02,280 --> 00:24:08,430
whenever Apple ship an update as across

639
00:24:06,030 --> 00:24:09,990
Internet to your device it comes down

640
00:24:08,430 --> 00:24:13,800
off one of Apple servers

641
00:24:09,990 --> 00:24:15,179
a great big package with a IPSW

642
00:24:13,800 --> 00:24:17,550
extension that's just a name for the

643
00:24:15,179 --> 00:24:19,500
doctor zip archive you unzip the archive

644
00:24:17,550 --> 00:24:21,210
you get a couple of disk images you look

645
00:24:19,500 --> 00:24:23,730
inside that the biggest disk image you

646
00:24:21,210 --> 00:24:25,440
see a mirror of the file system that

647
00:24:23,730 --> 00:24:27,660
will be uploaded to your phone you can't

648
00:24:25,440 --> 00:24:29,970
change it because it's digitally signed

649
00:24:27,660 --> 00:24:32,400
Apple if you try and modify that image

650
00:24:29,970 --> 00:24:34,080
if you fall it's not signed or the

651
00:24:32,400 --> 00:24:36,059
signature doesn't compute for the file

652
00:24:34,080 --> 00:24:37,470
that you giving me not going to play but

653
00:24:36,059 --> 00:24:38,820
if you just want a little pork inside

654
00:24:37,470 --> 00:24:40,200
and get the software that's one way the

655
00:24:38,820 --> 00:24:41,939
other way used to go in the table inform

656
00:24:40,200 --> 00:24:43,679
you guys see if you got a jailbreak you

657
00:24:41,940 --> 00:24:45,750
can get it that way pick college Street

658
00:24:43,679 --> 00:24:48,210
off the file system so if you dive down

659
00:24:45,750 --> 00:24:52,050
here you can see I've gone in and we've

660
00:24:48,210 --> 00:24:53,309
got user share firmware Wi-Fi and then

661
00:24:52,050 --> 00:24:55,200
we've got a couple of different options

662
00:24:53,309 --> 00:24:56,820
and that's probably the first probably

663
00:24:55,200 --> 00:24:58,440
figure out is what do I do

664
00:24:56,820 --> 00:25:01,559
yeah what do I have to pull apart to

665
00:24:58,440 --> 00:25:06,740
find out where I'm going so it turns out

666
00:25:01,559 --> 00:25:09,660
that with this one the 4 3 3 4 3 3 4 2

667
00:25:06,740 --> 00:25:11,580
Series is just a part number from

668
00:25:09,660 --> 00:25:13,440
Broadcom and underneath it you'll see

669
00:25:11,580 --> 00:25:15,510
that there are not just several

670
00:25:13,440 --> 00:25:17,340
directories of that level but that one

671
00:25:15,510 --> 00:25:20,190
has got several different files

672
00:25:17,340 --> 00:25:22,290
underneath it they vary in size from the

673
00:25:20,190 --> 00:25:25,260
biggest one is the obvious one is cabin

674
00:25:22,290 --> 00:25:27,690
a TRX there that could be a good place

675
00:25:25,260 --> 00:25:29,760
to look but how do we know which one to

676
00:25:27,690 --> 00:25:31,500
go after well if you actually got shell

677
00:25:29,760 --> 00:25:32,730
access you can ask the Wi-Fi firmware

678
00:25:31,500 --> 00:25:34,920
lorded daemon

679
00:25:32,730 --> 00:25:36,240
what would you lord because you can if

680
00:25:34,920 --> 00:25:38,400
you run the option the command line you

681
00:25:36,240 --> 00:25:43,070
see here minus F will tell you what

682
00:25:38,400 --> 00:25:45,600
paths it is lured in and if you run it

683
00:25:43,070 --> 00:25:47,550
that's what you get very little on my

684
00:25:45,600 --> 00:25:50,250
phone it just hangs there forever

685
00:25:47,550 --> 00:25:52,490
and you have to control C Lea divisions

686
00:25:50,250 --> 00:25:54,750
of the firmware will actually give you a

687
00:25:52,490 --> 00:25:57,090
breakdown it'll say well I've got

688
00:25:54,750 --> 00:25:59,370
several things here this is from first

689
00:25:57,090 --> 00:26:01,530
ones from an old iPhone 5s this is from

690
00:25:59,370 --> 00:26:02,010
my iPhone 7 and on my phone service says

691
00:26:01,530 --> 00:26:04,830
Oh

692
00:26:02,010 --> 00:26:07,470
my firm is in our set up TRX I've got

693
00:26:04,830 --> 00:26:09,720
some NVRAM file and ice in the dot txt

694
00:26:07,470 --> 00:26:12,059
file I've got a CL MB which gives me

695
00:26:09,720 --> 00:26:13,500
regularly three restrictions aware the

696
00:26:12,059 --> 00:26:14,760
Wi-Fi so you've got all the files we

697
00:26:13,500 --> 00:26:16,740
know what they are now we know what the

698
00:26:14,760 --> 00:26:19,220
extensions are the interest when the

699
00:26:16,740 --> 00:26:21,600
firmware is contained in the TRX file

700
00:26:19,220 --> 00:26:23,040
going back to the earlier problem where

701
00:26:21,600 --> 00:26:25,110
I asked the firmware daemon

702
00:26:23,040 --> 00:26:27,030
it won't tell me what's going on we can

703
00:26:25,110 --> 00:26:28,770
look in the oil registry that's a

704
00:26:27,030 --> 00:26:31,020
database it's built at runtime hurrah

705
00:26:28,770 --> 00:26:32,610
he'll Vietnamese telling you it's a

706
00:26:31,020 --> 00:26:34,770
three-dimensional hierarchical database

707
00:26:32,610 --> 00:26:36,959
it's really weird but it tells you what

708
00:26:34,770 --> 00:26:38,160
the firmware is doing on the device at

709
00:26:36,960 --> 00:26:40,170
any one time it'll tell you what's

710
00:26:38,160 --> 00:26:42,360
loaded because you can grip for the

711
00:26:40,170 --> 00:26:44,940
firmware version and if you pick that

712
00:26:42,360 --> 00:26:46,679
out it comes up with a fumarole ID and

713
00:26:44,940 --> 00:26:48,960
so I grip for that firmware ID inside

714
00:26:46,680 --> 00:26:52,050
the files and lo and behold in this case

715
00:26:48,960 --> 00:26:53,040
it is company company that matches so I

716
00:26:52,050 --> 00:26:54,870
thought it was Chardonnay but I was

717
00:26:53,040 --> 00:26:56,159
wrong cabernet matches so the camel a

718
00:26:54,870 --> 00:26:58,379
dirty our access to file that want to

719
00:26:56,160 --> 00:27:00,150
pull apart for that one acid our t-rex

720
00:26:58,380 --> 00:27:01,650
for the other one Apple have got all

721
00:27:00,150 --> 00:27:03,240
these different names some of them come

722
00:27:01,650 --> 00:27:07,260
from frozen some of them come for wines

723
00:27:03,240 --> 00:27:09,980
it's it's really quite strange but once

724
00:27:07,260 --> 00:27:12,480
you've got it you're ready to reverse it

725
00:27:09,980 --> 00:27:14,130
okay so what we need to probably the

726
00:27:12,480 --> 00:27:16,440
next step is what find out what file

727
00:27:14,130 --> 00:27:18,780
formats in use where does it get double

728
00:27:16,440 --> 00:27:20,760
UNIX memory and basically how we make

729
00:27:18,780 --> 00:27:24,600
sense of the image and that's basically

730
00:27:20,760 --> 00:27:27,390
where I started off so have a look throw

731
00:27:24,600 --> 00:27:29,550
the basically throw the file have been

732
00:27:27,390 --> 00:27:30,960
walk I mean I'm sure most people have

733
00:27:29,550 --> 00:27:33,330
heared a bit more it's a really good

734
00:27:30,960 --> 00:27:34,760
tool it signatures it'll do things and

735
00:27:33,330 --> 00:27:38,460
the first thing that comes back I saw

736
00:27:34,760 --> 00:27:41,330
TRX phurba header so proximity clink TRX

737
00:27:38,460 --> 00:27:43,680
is a commonly used for package until and

738
00:27:41,330 --> 00:27:44,629
it's talentless it's got some really

739
00:27:43,680 --> 00:27:46,500
interesting things going on here

740
00:27:44,630 --> 00:27:48,810
particularly I like the fact that it

741
00:27:46,500 --> 00:27:51,510
says oh we've got a kernel offset a root

742
00:27:48,810 --> 00:27:53,730
filesystem offset we've got a boot

743
00:27:51,510 --> 00:27:57,530
loader offsetting something Linux this

744
00:27:53,730 --> 00:27:59,820
could be cool I wonder it's not the next

745
00:27:57,530 --> 00:28:01,379
what's happening is Ben walks trying to

746
00:27:59,820 --> 00:28:03,720
be a bit too helpful for you it's not

747
00:28:01,380 --> 00:28:05,580
actually a Linux kernel at all but the

748
00:28:03,720 --> 00:28:07,680
TRX file format is documented it's a

749
00:28:05,580 --> 00:28:09,389
great thing open wrt website probably

750
00:28:07,680 --> 00:28:10,680
google it comes back and you see

751
00:28:09,390 --> 00:28:14,100
something that looks like this little

752
00:28:10,680 --> 00:28:17,310
packet diagram at the site so what we

753
00:28:14,100 --> 00:28:19,560
have is a magic number HTR Z row we have

754
00:28:17,310 --> 00:28:21,780
the length of the file of the all the

755
00:28:19,560 --> 00:28:23,639
bytes in the file following that the CRC

756
00:28:21,780 --> 00:28:26,790
of all the bytes in the file following

757
00:28:23,640 --> 00:28:31,380
the CRC and then we have three partition

758
00:28:26,790 --> 00:28:33,210
lengths now in the in the own wrt thing

759
00:28:31,380 --> 00:28:33,810
they say their offsets not the lengths I

760
00:28:33,210 --> 00:28:35,910
know this

761
00:28:33,810 --> 00:28:38,190
subtle difference but allows you then to

762
00:28:35,910 --> 00:28:40,410
look at what's going on and in the Apple

763
00:28:38,190 --> 00:28:42,180
firm ways what you see the header is

764
00:28:40,410 --> 00:28:46,050
always present there is always a

765
00:28:42,180 --> 00:28:48,030
petition zero petition one petition zero

766
00:28:46,050 --> 00:28:51,060
will contain the firmware petition C was

767
00:28:48,030 --> 00:28:53,310
the big one petition one is zero padded

768
00:28:51,060 --> 00:28:55,080
out to some arbitrary length and they'll

769
00:28:53,310 --> 00:28:57,389
make all the different firm is in one

770
00:28:55,080 --> 00:28:59,100
directory all have the same length just

771
00:28:57,390 --> 00:29:00,540
so that they look nice when you ALS them

772
00:28:59,100 --> 00:29:03,719
I don't know what other reason they have

773
00:29:00,540 --> 00:29:07,590
for that so the first step is to extract

774
00:29:03,720 --> 00:29:12,210
that green blob out and so we do that

775
00:29:07,590 --> 00:29:14,760
and we're gonna throw it into xxd to see

776
00:29:12,210 --> 00:29:17,160
if we can make some sense of it so this

777
00:29:14,760 --> 00:29:19,050
is me x XD for cab later t-rex what i've

778
00:29:17,160 --> 00:29:21,090
done i've just exited a bit from the

779
00:29:19,050 --> 00:29:22,889
start the file a bit from near the end

780
00:29:21,090 --> 00:29:25,949
of the file and a bit right at the end

781
00:29:22,890 --> 00:29:27,840
of the file so the first two are if you

782
00:29:25,950 --> 00:29:30,990
like the start and end the petition c

783
00:29:27,840 --> 00:29:32,220
raw and if i look at that well HDR see

784
00:29:30,990 --> 00:29:34,590
you know can see that at the beginning

785
00:29:32,220 --> 00:29:36,300
that's the kind of the metadata that we

786
00:29:34,590 --> 00:29:38,790
expect to see at the start of TRX file

787
00:29:36,300 --> 00:29:41,250
so all they're all pans out the CRC

788
00:29:38,790 --> 00:29:44,190
computes correctly everything's fine the

789
00:29:41,250 --> 00:29:47,790
next thing we see is what looks like

790
00:29:44,190 --> 00:29:51,060
some structured data we see in these ooo

791
00:29:47,790 --> 00:29:52,620
and then followed by an address so if

792
00:29:51,060 --> 00:29:55,080
this is a low a little endian

793
00:29:52,620 --> 00:29:57,060
architecture those are kind of like the

794
00:29:55,080 --> 00:29:59,189
low in memory that's kind of a bit of a

795
00:29:57,060 --> 00:30:00,629
hint but otherwise it looks to me like

796
00:29:59,190 --> 00:30:02,370
some kind of exception backed and I'd

797
00:30:00,630 --> 00:30:04,260
expect that on an ARM processor to

798
00:30:02,370 --> 00:30:06,270
expect to see something down there that

799
00:30:04,260 --> 00:30:08,820
looks like an exception table or a jump

800
00:30:06,270 --> 00:30:10,110
table or something of that nature at the

801
00:30:08,820 --> 00:30:13,139
end of the file there's some textual

802
00:30:10,110 --> 00:30:14,699
metadata that's interesting so we've got

803
00:30:13,140 --> 00:30:17,460
the name of the file there's that CR AB

804
00:30:14,700 --> 00:30:19,890
there's the firmware ID that we grabbed

805
00:30:17,460 --> 00:30:22,860
there's a CRC in the file but it's not

806
00:30:19,890 --> 00:30:24,060
the same CRC you saw earlier but it kind

807
00:30:22,860 --> 00:30:26,219
of suggests that maybe there's a bit

808
00:30:24,060 --> 00:30:28,169
more going on well I tried this how to

809
00:30:26,220 --> 00:30:30,210
look at different things by iPad Mini 2

810
00:30:28,170 --> 00:30:33,300
because I've got some very old kit lots

811
00:30:30,210 --> 00:30:35,070
of iPhone 5s is all of them great I

812
00:30:33,300 --> 00:30:36,840
thought great we've got a solution now

813
00:30:35,070 --> 00:30:39,330
I've got the Fermi and if you throw that

814
00:30:36,840 --> 00:30:42,720
file as he's in to disassemble it kinda

815
00:30:39,330 --> 00:30:44,939
works but when I flick to my newer

816
00:30:42,720 --> 00:30:46,020
phones the iPhone 7 iPhone 10 the iPad

817
00:30:44,940 --> 00:30:48,240
pro

818
00:30:46,020 --> 00:30:49,710
they don't work bin wok actually chokes

819
00:30:48,240 --> 00:30:52,500
on all of them says don't know what's

820
00:30:49,710 --> 00:30:57,170
going on in here so we'll do the same

821
00:30:52,500 --> 00:31:00,510
thing throw it into X XD just pretext up

822
00:30:57,170 --> 00:31:02,220
we don't see hitch D are at the top we

823
00:31:00,510 --> 00:31:04,020
do see some structure did that some

824
00:31:02,220 --> 00:31:07,350
Squinkie sort of carrots but there's no

825
00:31:04,020 --> 00:31:09,929
longer oo or like address is low in

826
00:31:07,350 --> 00:31:12,240
memory in fact the donor address is

827
00:31:09,929 --> 00:31:13,830
an awful lot to me anyway but I'm gonna

828
00:31:12,240 --> 00:31:15,600
tell you the AXA jump instruction so you

829
00:31:13,830 --> 00:31:16,740
throw that into the disassembler it's

830
00:31:15,600 --> 00:31:18,360
gonna see you just a list of jump

831
00:31:16,740 --> 00:31:21,690
instruction so said exception vector

832
00:31:18,360 --> 00:31:23,309
again at the end of the file we see the

833
00:31:21,690 --> 00:31:24,929
same kind of structure met at the same

834
00:31:23,309 --> 00:31:28,410
kind of meta D at the text or meta did

835
00:31:24,929 --> 00:31:29,790
we saw before and something I ignored in

836
00:31:28,410 --> 00:31:32,100
the last slide was there's a length

837
00:31:29,790 --> 00:31:34,440
field actually that's the length of the

838
00:31:32,100 --> 00:31:36,330
preceding text or metadata if you walk

839
00:31:34,440 --> 00:31:39,210
back 94

840
00:31:36,330 --> 00:31:41,639
hexadecimal bytes episode 9 rows and

841
00:31:39,210 --> 00:31:43,679
then a couple of extras you end up with

842
00:31:41,640 --> 00:31:46,260
exactly the length of that metadata

843
00:31:43,679 --> 00:31:47,940
string of highlighted in pink so maybe

844
00:31:46,260 --> 00:31:52,559
that's actually not part of the firmer

845
00:31:47,940 --> 00:31:55,050
image itself in fact if we take the file

846
00:31:52,559 --> 00:31:57,629
that we extracted from the earlier TRX

847
00:31:55,050 --> 00:31:59,520
file it looks exactly like this all

848
00:31:57,630 --> 00:32:01,320
Apple of data and the newer formats

849
00:31:59,520 --> 00:32:03,210
they've thrown away the external wrapper

850
00:32:01,320 --> 00:32:04,860
they've stacked with the lower level one

851
00:32:03,210 --> 00:32:06,780
but it's still a wrap but it's still not

852
00:32:04,860 --> 00:32:09,809
the actual binary all that stuff at the

853
00:32:06,780 --> 00:32:11,389
end isn't quite right yet because if you

854
00:32:09,809 --> 00:32:14,190
want to change anything

855
00:32:11,390 --> 00:32:16,170
also I'm talk about this you see RC and

856
00:32:14,190 --> 00:32:19,860
again the CRC doesn't compute but there

857
00:32:16,170 --> 00:32:21,540
is within the CRC a clue about how we

858
00:32:19,860 --> 00:32:25,530
can understand what the data how its

859
00:32:21,540 --> 00:32:27,030
structured and so what I'm going to do

860
00:32:25,530 --> 00:32:29,370
is I skip ahead just a little to the

861
00:32:27,030 --> 00:32:31,620
next slide shows it quite well what we

862
00:32:29,370 --> 00:32:34,110
have in the file is the firma ROM image

863
00:32:31,620 --> 00:32:35,790
to start at the very end we have the

864
00:32:34,110 --> 00:32:37,620
length of the text metadata don't you

865
00:32:35,790 --> 00:32:40,710
step back and then it's a fixed size

866
00:32:37,620 --> 00:32:43,770
block in between and that block is I

867
00:32:40,710 --> 00:32:45,690
think 34 bytes and it's always the same

868
00:32:43,770 --> 00:32:47,879
the actual content of it changes from

869
00:32:45,690 --> 00:32:50,370
machine to machine and build to build so

870
00:32:47,880 --> 00:32:53,250
not really sure all of it except the

871
00:32:50,370 --> 00:32:56,290
first part is a CRC all the day there

872
00:32:53,250 --> 00:32:58,120
prior to that CRC that precedes it

873
00:32:56,290 --> 00:33:00,129
so I worked that out by literally

874
00:32:58,120 --> 00:33:02,649
computing and trying to find the textual

875
00:33:00,130 --> 00:33:04,150
CRC and find where it came from and just

876
00:33:02,650 --> 00:33:05,710
stepping through the file to say oh yeah

877
00:33:04,150 --> 00:33:07,450
there you go and it's always the same

878
00:33:05,710 --> 00:33:10,480
offset so that gives us something that

879
00:33:07,450 --> 00:33:11,710
we can now analyze and when you want to

880
00:33:10,480 --> 00:33:13,030
try and analyze something the first

881
00:33:11,710 --> 00:33:14,820
thing you're disassemblers gonna ask you

882
00:33:13,030 --> 00:33:17,110
swell what's kind of CPU have you got

883
00:33:14,820 --> 00:33:19,629
where do you want me to load this what's

884
00:33:17,110 --> 00:33:21,040
the base address and oh hang on

885
00:33:19,630 --> 00:33:22,690
I don't know what the base address is

886
00:33:21,040 --> 00:33:24,730
haven't really because I've just got

887
00:33:22,690 --> 00:33:27,100
this binary image a couple of ways that

888
00:33:24,730 --> 00:33:29,050
we can work it out they can guess you

889
00:33:27,100 --> 00:33:30,879
can look at the previous history there's

890
00:33:29,050 --> 00:33:32,350
been a lot of the published papers if

891
00:33:30,880 --> 00:33:35,710
you look at been you mean these paper

892
00:33:32,350 --> 00:33:37,149
iPhone 7 is there it's one 600 and

893
00:33:35,710 --> 00:33:41,080
that's where the RAM image goes every

894
00:33:37,150 --> 00:33:44,380
single tank not the same on my ancient

895
00:33:41,080 --> 00:33:47,169
my old-fashioned devices all the ones

896
00:33:44,380 --> 00:33:49,420
with the cortex m3 processor it actually

897
00:33:47,170 --> 00:33:51,400
they tend to load at zero and that was

898
00:33:49,420 --> 00:33:52,060
my first guess to be honest I picked 0

899
00:33:51,400 --> 00:33:53,830
to my head

900
00:33:52,060 --> 00:33:55,659
and then dropped them in the dissemble

901
00:33:53,830 --> 00:33:57,220
and do the symbols resolve to the

902
00:33:55,660 --> 00:33:59,950
branches resolve the strings resolve

903
00:33:57,220 --> 00:34:01,450
does it work it did and then dive even a

904
00:33:59,950 --> 00:34:02,590
little bit deeper we can start to see

905
00:34:01,450 --> 00:34:06,220
that there was a little bit more we

906
00:34:02,590 --> 00:34:09,909
could find out about the format in that

907
00:34:06,220 --> 00:34:11,110
the TRX the the start of the date that I

908
00:34:09,909 --> 00:34:16,810
didn't go back when I showed you I

909
00:34:11,110 --> 00:34:21,040
should have mentioned it actually let's

910
00:34:16,810 --> 00:34:22,600
get it in here so when I said about the

911
00:34:21,040 --> 00:34:25,750
structured data you got this far far off

912
00:34:22,600 --> 00:34:27,759
of half of our stuff there and then down

913
00:34:25,750 --> 00:34:29,710
there this is string the stands up DB PP

914
00:34:27,760 --> 00:34:31,510
and immediately following that is

915
00:34:29,710 --> 00:34:34,360
something that does look a bit like in a

916
00:34:31,510 --> 00:34:36,970
dress because it starts 1c to be one oh

917
00:34:34,360 --> 00:34:39,399
and it's an address it actually sits in

918
00:34:36,969 --> 00:34:41,020
the dress and I was saying well I gives

919
00:34:39,399 --> 00:34:43,690
me an idea of where you might be able to

920
00:34:41,020 --> 00:34:46,389
load something so you can pull things

921
00:34:43,690 --> 00:34:48,760
like that out turns out that DB PHP

922
00:34:46,389 --> 00:34:50,679
string if you google it you might come

923
00:34:48,760 --> 00:34:52,300
up with a Linux header file that tells

924
00:34:50,679 --> 00:34:54,399
you what's going on there and that's a

925
00:34:52,300 --> 00:34:56,470
pointer to an important structure that

926
00:34:54,399 --> 00:34:58,930
exists in all these firm is called hitch

927
00:34:56,469 --> 00:35:01,180
and DRTV debug and it's got basically

928
00:34:58,930 --> 00:35:03,609
the fields listed from a little tool I

929
00:35:01,180 --> 00:35:05,410
wrote at the side there that I not just

930
00:35:03,610 --> 00:35:07,180
picking up things from actual iOS

931
00:35:05,410 --> 00:35:08,170
devices so in this one we see a number

932
00:35:07,180 --> 00:35:10,660
of things and it gives you

933
00:35:08,170 --> 00:35:13,569
Rambis the rhombus the RAM size of the

934
00:35:10,660 --> 00:35:15,640
ROM size a trap pointer which is where

935
00:35:13,569 --> 00:35:19,029
the kernel will reset through that

936
00:35:15,640 --> 00:35:21,190
addresses here on the CPU and it'll give

937
00:35:19,030 --> 00:35:23,319
you a pointer to the event log and the

938
00:35:21,190 --> 00:35:25,089
console so it's a lot of information

939
00:35:23,319 --> 00:35:27,369
going on there and it turns out that

940
00:35:25,089 --> 00:35:30,069
this D BPPV occurs at a fixed offset and

941
00:35:27,369 --> 00:35:31,660
it says here it's f8 bytes into the

942
00:35:30,069 --> 00:35:35,410
firmware image it's always at the dress

943
00:35:31,660 --> 00:35:38,980
or f8 and it turns out on the Apple

944
00:35:35,410 --> 00:35:41,410
devices it actually can be at address 7

945
00:35:38,980 --> 00:35:43,270
4 as well and if it's at the lower

946
00:35:41,410 --> 00:35:45,220
address it's followed by the actual Lord

947
00:35:43,270 --> 00:35:47,950
addresses the pointer to the hitch and

948
00:35:45,220 --> 00:35:49,689
the RTD debug strap that's the stood

949
00:35:47,950 --> 00:35:51,939
over there but it's also followed by the

950
00:35:49,690 --> 00:35:53,799
load address of the file if its uses the

951
00:35:51,940 --> 00:35:56,020
earlier format it's always loads at the

952
00:35:53,799 --> 00:35:57,609
dress 0 so that's what we do throw it in

953
00:35:56,020 --> 00:35:59,680
there this is the list I came up with

954
00:35:57,609 --> 00:36:01,720
the devices I looked at you can see that

955
00:35:59,680 --> 00:36:04,419
we've got different file formats some

956
00:36:01,720 --> 00:36:06,520
use the TRX wrapper some have gotten rid

957
00:36:04,420 --> 00:36:09,250
of the TRX wrap and just use Apple's own

958
00:36:06,520 --> 00:36:10,599
no tricks format and then we have the

959
00:36:09,250 --> 00:36:13,059
different load addresses they're either

960
00:36:10,599 --> 00:36:14,799
0 and that's always in the process over

961
00:36:13,059 --> 00:36:17,260
the cortex m3 processor or it's got a

962
00:36:14,799 --> 00:36:18,400
different address where the cortex m4 so

963
00:36:17,260 --> 00:36:20,319
now we've got something we can look at

964
00:36:18,400 --> 00:36:22,750
inside the disassemble and start to

965
00:36:20,319 --> 00:36:24,490
reverse once you got that trap pointer

966
00:36:22,750 --> 00:36:26,530
which gives the starting point of the

967
00:36:24,490 --> 00:36:28,598
CPS we start this assembly from there

968
00:36:26,530 --> 00:36:29,530
that's really useful to read address 0

969
00:36:28,599 --> 00:36:32,500
find out what's doing

970
00:36:29,530 --> 00:36:34,950
set the disassembly going how do you

971
00:36:32,500 --> 00:36:37,270
make sense of just a random binary file

972
00:36:34,950 --> 00:36:39,790
I've tried this on a couple of things I

973
00:36:37,270 --> 00:36:41,740
did the opie 25 project years ago we

974
00:36:39,790 --> 00:36:43,779
didn't get very far with the motorola

975
00:36:41,740 --> 00:36:44,169
radios the police radios when we pulled

976
00:36:43,780 --> 00:36:45,910
them apart

977
00:36:44,170 --> 00:36:48,460
there was no strings in there any kind

978
00:36:45,910 --> 00:36:50,529
we together luckily if you pull apart

979
00:36:48,460 --> 00:36:52,329
one of these binary images you'll find

980
00:36:50,530 --> 00:36:54,309
quite a few strings in there yeah we can

981
00:36:52,329 --> 00:36:55,780
name a couple hundred functions just

982
00:36:54,309 --> 00:36:57,760
from print deaths that they're doing

983
00:36:55,780 --> 00:36:59,740
internally that go to an internal

984
00:36:57,760 --> 00:37:01,750
console that never is seen in the

985
00:36:59,740 --> 00:37:03,970
Macross world or the iOS world but they

986
00:37:01,750 --> 00:37:06,069
do get logged on the device and so you

987
00:37:03,970 --> 00:37:07,509
can look through a name function so you

988
00:37:06,069 --> 00:37:09,130
can write the script to do it because

989
00:37:07,510 --> 00:37:10,750
they use the same functions and it's

990
00:37:09,130 --> 00:37:13,089
always parameter X and you can go

991
00:37:10,750 --> 00:37:16,750
through pluck them out just very useful

992
00:37:13,089 --> 00:37:18,578
other things is like constants if you

993
00:37:16,750 --> 00:37:19,360
put if you throw the binary up in walk

994
00:37:18,579 --> 00:37:21,220
win of you're a complete

995
00:37:19,360 --> 00:37:23,020
but you're gonna get char Constance

996
00:37:21,220 --> 00:37:25,060
coming out you can get the CRC

997
00:37:23,020 --> 00:37:26,620
polynomial table coming out I'll just

998
00:37:25,060 --> 00:37:28,120
give you chunks of things you know if

999
00:37:26,620 --> 00:37:29,799
something is referring to CRC table as

1000
00:37:28,120 --> 00:37:32,560
to CRC function okay you can move one

1001
00:37:29,800 --> 00:37:34,090
step further along then you can also

1002
00:37:32,560 --> 00:37:35,680
look at neighboring code when you've got

1003
00:37:34,090 --> 00:37:38,740
some cord that you understand say I've

1004
00:37:35,680 --> 00:37:40,600
got mem copy then the compiler and the

1005
00:37:38,740 --> 00:37:42,160
linker tend to put these things next to

1006
00:37:40,600 --> 00:37:44,620
each other things from one translation

1007
00:37:42,160 --> 00:37:46,540
unit tend to get linked in consecutive

1008
00:37:44,620 --> 00:37:48,609
addresses so what you'll tend to find is

1009
00:37:46,540 --> 00:37:50,950
that if I mend copy or find memset

1010
00:37:48,610 --> 00:37:52,450
you'll find man move they're all going

1011
00:37:50,950 --> 00:37:53,439
to be in the same place together and

1012
00:37:52,450 --> 00:37:56,319
that's probably going to be near the

1013
00:37:53,440 --> 00:37:57,490
rest of the standard library as well the

1014
00:37:56,320 --> 00:37:59,950
three things have gone along the bottom

1015
00:37:57,490 --> 00:38:03,160
that I helped to help me a lot to get

1016
00:37:59,950 --> 00:38:04,509
used to this is CMP it is used by bin

1017
00:38:03,160 --> 00:38:06,069
DIF and stuff like that these are

1018
00:38:04,510 --> 00:38:07,870
metrics that you disassemble or make

1019
00:38:06,070 --> 00:38:09,580
available to a script that you can pluck

1020
00:38:07,870 --> 00:38:12,040
out so give the parameter count and type

1021
00:38:09,580 --> 00:38:13,930
you get the number of call as a function

1022
00:38:12,040 --> 00:38:15,759
and number of collies you can get the

1023
00:38:13,930 --> 00:38:16,930
number of basic blocks and you can get

1024
00:38:15,760 --> 00:38:18,220
the number of entries between those

1025
00:38:16,930 --> 00:38:20,740
basic blocks that gives you a

1026
00:38:18,220 --> 00:38:22,720
fingerprint unique to a function that's

1027
00:38:20,740 --> 00:38:25,149
actually quite stable across different

1028
00:38:22,720 --> 00:38:26,589
builds so if you as I've done I've done

1029
00:38:25,150 --> 00:38:28,510
about five or six of these devices

1030
00:38:26,590 --> 00:38:31,120
I find that the strings name and

1031
00:38:28,510 --> 00:38:33,010
function exist in one binary don't exist

1032
00:38:31,120 --> 00:38:35,380
in another but it still has the same

1033
00:38:33,010 --> 00:38:37,690
overall signature it still has the same

1034
00:38:35,380 --> 00:38:39,520
number of parameters it's still told by

1035
00:38:37,690 --> 00:38:41,380
the same call as it still got the same

1036
00:38:39,520 --> 00:38:46,320
call ease you can then port the name

1037
00:38:41,380 --> 00:38:48,940
across quite trivially okay

1038
00:38:46,320 --> 00:38:51,010
so let's assume I've got a round image

1039
00:38:48,940 --> 00:38:53,060
I've started to disassembly I'm starting

1040
00:38:51,010 --> 00:38:54,360
to make a little bit of sense of it

1041
00:38:53,060 --> 00:38:57,040
[Music]

1042
00:38:54,360 --> 00:38:58,600
what's next how do i patch it so I

1043
00:38:57,040 --> 00:39:01,509
suppose you're going to decide what to

1044
00:38:58,600 --> 00:39:02,770
patch and it should really be something

1045
00:39:01,510 --> 00:39:04,720
that's in the RAM sections that's all

1046
00:39:02,770 --> 00:39:07,060
the court I've got we want to be able to

1047
00:39:04,720 --> 00:39:08,470
trigger it to to mystically and we want

1048
00:39:07,060 --> 00:39:11,170
to be able to trigger it from user space

1049
00:39:08,470 --> 00:39:14,560
and preferably past it there to and from

1050
00:39:11,170 --> 00:39:17,350
so that's really the starting point

1051
00:39:14,560 --> 00:39:19,360
there now how do we communicate with the

1052
00:39:17,350 --> 00:39:22,210
patch kind of flows from what were patch

1053
00:39:19,360 --> 00:39:22,810
in how we patch alkalyn to that in a

1054
00:39:22,210 --> 00:39:29,130
second

1055
00:39:22,810 --> 00:39:29,130
and what exactly should the patch do so

1056
00:39:29,359 --> 00:39:33,319
I'm going to use a mechanism that was

1057
00:39:31,700 --> 00:39:34,788
first done by Blanco and Iceland their

1058
00:39:33,319 --> 00:39:37,729
presentation and that's basically packs

1059
00:39:34,789 --> 00:39:40,099
a function in the device called the BMC

1060
00:39:37,729 --> 00:39:41,328
device Ayaka Dells now you're probably

1061
00:39:40,099 --> 00:39:43,190
familiar if you've done any kernel

1062
00:39:41,329 --> 00:39:45,380
problem on UNIX with now Ellis a call

1063
00:39:43,190 --> 00:39:46,910
well you basically get to speak director

1064
00:39:45,380 --> 00:39:49,549
the device driver and provided some

1065
00:39:46,910 --> 00:39:52,729
special device specific magic in the

1066
00:39:49,549 --> 00:39:54,589
case of a full Mac card the device

1067
00:39:52,729 --> 00:39:56,359
driver basically turns around and passes

1068
00:39:54,589 --> 00:39:59,959
most of those requests straight on to

1069
00:39:56,359 --> 00:40:01,700
the actual device itself and so the

1070
00:39:59,959 --> 00:40:03,259
piece of code I'm doing is Emily doing

1071
00:40:01,700 --> 00:40:05,328
what the firm will order does itself

1072
00:40:03,259 --> 00:40:07,729
when it what has a piece of work to do

1073
00:40:05,329 --> 00:40:09,890
it cause secure API to device driver it

1074
00:40:07,729 --> 00:40:12,200
talks to the Mac protocol please do

1075
00:40:09,890 --> 00:40:14,749
something for me like Lord the image or

1076
00:40:12,200 --> 00:40:17,839
whatever in this case I'm gonna use the

1077
00:40:14,749 --> 00:40:20,390
same mechanism where I pass an apple 802

1078
00:40:17,839 --> 00:40:22,549
11 specific I octal and that just

1079
00:40:20,390 --> 00:40:24,140
bundles up a block idea to a special

1080
00:40:22,549 --> 00:40:25,849
request structure which when it's

1081
00:40:24,140 --> 00:40:29,058
received by the card it unpacks and

1082
00:40:25,849 --> 00:40:32,539
calls this internal function WLC I are

1083
00:40:29,059 --> 00:40:34,249
done now this is the weekly the central

1084
00:40:32,539 --> 00:40:35,839
dispatching point for everything goes

1085
00:40:34,249 --> 00:40:39,439
and so on inside then the double neck

1086
00:40:35,839 --> 00:40:41,660
and if you have a look at it this is a

1087
00:40:39,440 --> 00:40:44,180
snapshot from what the actual chip des

1088
00:40:41,660 --> 00:40:45,859
it's got this great big branch table as

1089
00:40:44,180 --> 00:40:47,419
you see the Lord registered call here is

1090
00:40:45,859 --> 00:40:50,119
actually a branch it's doing a switch

1091
00:40:47,420 --> 00:40:52,849
it's a 300 Way switch inside the cord

1092
00:40:50,119 --> 00:40:55,160
it's quite easy to spot but the trouble

1093
00:40:52,849 --> 00:40:58,489
is it's in ROM and we don't have the ROM

1094
00:40:55,160 --> 00:41:00,558
yet but fortunately for us Broadcom made

1095
00:40:58,489 --> 00:41:01,849
it easy because they knew that they were

1096
00:41:00,559 --> 00:41:03,619
going to be able to patch stuff they

1097
00:41:01,849 --> 00:41:06,680
wanted to be able to ship updates to

1098
00:41:03,619 --> 00:41:08,839
their software and so they use something

1099
00:41:06,680 --> 00:41:10,940
called a patch mode vector that all

1100
00:41:08,839 --> 00:41:13,519
functions that are intended to be

1101
00:41:10,940 --> 00:41:16,039
overridden by updates that they can

1102
00:41:13,519 --> 00:41:17,419
basically ship a ram update and it will

1103
00:41:16,039 --> 00:41:19,339
find it because it will look at the

1104
00:41:17,420 --> 00:41:22,099
certain location at the start of memory

1105
00:41:19,339 --> 00:41:24,199
and say is there an update WL CI off

1106
00:41:22,099 --> 00:41:26,420
tell if it is it calls it when the

1107
00:41:24,199 --> 00:41:28,489
result comes back he says did you handle

1108
00:41:26,420 --> 00:41:31,430
it or do I handle it if it handled it

1109
00:41:28,489 --> 00:41:33,410
fine it then returns but otherwise it

1110
00:41:31,430 --> 00:41:35,448
goes to its normal logic and we can

1111
00:41:33,410 --> 00:41:37,670
repurpose that so that we can intercept

1112
00:41:35,449 --> 00:41:41,370
it and do what we want but first we

1113
00:41:37,670 --> 00:41:43,230
gotta find it and the good

1114
00:41:41,370 --> 00:41:45,240
WLC iocked or patch bond is almost

1115
00:41:43,230 --> 00:41:47,400
always there when you got 300 waste

1116
00:41:45,240 --> 00:41:49,200
which is and you've got functionality

1117
00:41:47,400 --> 00:41:51,480
that's changing and it's exposed to the

1118
00:41:49,200 --> 00:41:54,450
user level this function gets overridden

1119
00:41:51,480 --> 00:41:56,550
and we're lucky or if you're lucky the

1120
00:41:54,450 --> 00:41:59,759
iPhone 7 actually names it in a little

1121
00:41:56,550 --> 00:42:02,640
log message easy job then found if you

1122
00:41:59,760 --> 00:42:04,530
don't have that iPhone 10 iPhone 10

1123
00:42:02,640 --> 00:42:06,990
doesn't actually even implement it in

1124
00:42:04,530 --> 00:42:09,150
the vision of 11.3 I think it didn't

1125
00:42:06,990 --> 00:42:11,490
implement it I think they did it later

1126
00:42:09,150 --> 00:42:13,770
but didn't do it then so you've gotta go

1127
00:42:11,490 --> 00:42:16,350
I have a bit of a lock and the way that

1128
00:42:13,770 --> 00:42:17,520
I lock is to say well double our seattle

1129
00:42:16,350 --> 00:42:18,900
packs what i happen to know because

1130
00:42:17,520 --> 00:42:22,140
everybody said she needed it several

1131
00:42:18,900 --> 00:42:24,120
times now takes 5 parameters and three

1132
00:42:22,140 --> 00:42:26,279
of those come from that use a piece of

1133
00:42:24,120 --> 00:42:28,529
code that i presented earlier didn't

1134
00:42:26,280 --> 00:42:30,120
actually play that little piece of code

1135
00:42:28,530 --> 00:42:32,550
comes from my user land utility that

1136
00:42:30,120 --> 00:42:34,259
Emily it's what Apple's called does it

1137
00:42:32,550 --> 00:42:37,140
populates number of fields they get

1138
00:42:34,260 --> 00:42:39,660
unpacked and passed across so we control

1139
00:42:37,140 --> 00:42:43,859
some of the data and I know it's five

1140
00:42:39,660 --> 00:42:46,310
parameters there are 3000 functions in

1141
00:42:43,860 --> 00:42:48,330
the the ROM patch the RAM patch

1142
00:42:46,310 --> 00:42:50,100
typically that you're gonna pull out

1143
00:42:48,330 --> 00:42:51,779
that's a lot of code to look through

1144
00:42:50,100 --> 00:42:53,430
especially because it all looks the same

1145
00:42:51,780 --> 00:42:57,870
binary code until you've got some lanes

1146
00:42:53,430 --> 00:43:00,029
behind it but there are only 100 that

1147
00:42:57,870 --> 00:43:02,130
have five parameters a reasonably a

1148
00:43:00,030 --> 00:43:04,500
smaller target and you can write

1149
00:43:02,130 --> 00:43:06,660
descriptor Ian says of those five

1150
00:43:04,500 --> 00:43:08,010
parameter ones are any referred to by

1151
00:43:06,660 --> 00:43:10,230
the patch mode vector because that's

1152
00:43:08,010 --> 00:43:11,820
where it would have to come from and it

1153
00:43:10,230 --> 00:43:13,470
turns out that you were a handful thirty

1154
00:43:11,820 --> 00:43:15,750
knew those in the patch mode back there

1155
00:43:13,470 --> 00:43:17,520
so you can find that function then by a

1156
00:43:15,750 --> 00:43:19,020
process of inspection so this is what it

1157
00:43:17,520 --> 00:43:21,120
looks like if you actually looked at the

1158
00:43:19,020 --> 00:43:23,040
patch mode back there just as assembly

1159
00:43:21,120 --> 00:43:25,230
without any names or else it kind of

1160
00:43:23,040 --> 00:43:26,490
doesn't really pop at you but if you

1161
00:43:25,230 --> 00:43:29,940
know what you're looking it becomes a

1162
00:43:26,490 --> 00:43:31,080
lot easier if it isn't implemented the

1163
00:43:29,940 --> 00:43:32,640
job is more difficult because you're

1164
00:43:31,080 --> 00:43:34,620
only control two of the five parameters

1165
00:43:32,640 --> 00:43:37,560
but I'll show you how we can insert the

1166
00:43:34,620 --> 00:43:38,580
patch that's a profit of time we don't

1167
00:43:37,560 --> 00:43:42,930
think I

1168
00:43:38,580 --> 00:43:45,150
right patching how do we patch what I've

1169
00:43:42,930 --> 00:43:48,060
done is there's differences of

1170
00:43:45,150 --> 00:43:49,530
approaches the CFS and the best approach

1171
00:43:48,060 --> 00:43:51,830
and the one that I use for programmatic

1172
00:43:49,530 --> 00:43:54,360
approaches is to have an external

1173
00:43:51,830 --> 00:43:56,430
implementation of my patch that it's

1174
00:43:54,360 --> 00:43:58,860
going to read the wrong and an external

1175
00:43:56,430 --> 00:44:00,839
invocation so what I mean by that is I

1176
00:43:58,860 --> 00:44:02,490
find a string in memory and I'm going to

1177
00:44:00,840 --> 00:44:04,560
overwrite that I find nice long string

1178
00:44:02,490 --> 00:44:06,000
and this happens to be this one it don't

1179
00:44:04,560 --> 00:44:08,160
even think it's the longest like 300

1180
00:44:06,000 --> 00:44:10,350
bytes long if I nail out the first

1181
00:44:08,160 --> 00:44:12,509
couple of bites anybody doing a print

1182
00:44:10,350 --> 00:44:13,980
def just gets nothing that's fine I

1183
00:44:12,510 --> 00:44:15,390
don't care I'm not really looking at the

1184
00:44:13,980 --> 00:44:17,580
moment I want the storage I'm going to

1185
00:44:15,390 --> 00:44:20,160
reclaim it a repurpose it so I'm gonna

1186
00:44:17,580 --> 00:44:21,180
put some code into that storage but I

1187
00:44:20,160 --> 00:44:24,230
only make the first couple of bites

1188
00:44:21,180 --> 00:44:27,029
Nell's and I'm gonna have that code

1189
00:44:24,230 --> 00:44:29,250
basically called the original code that

1190
00:44:27,030 --> 00:44:31,110
would have been called anyway and all I

1191
00:44:29,250 --> 00:44:33,600
do is change the patch mode back that

1192
00:44:31,110 --> 00:44:35,130
wanted it and it's gone insane right are

1193
00:44:33,600 --> 00:44:37,020
you the eye octal that Steve's is

1194
00:44:35,130 --> 00:44:39,750
hijacked I'm going to take control of

1195
00:44:37,020 --> 00:44:41,820
double LC dump and I'm going to use it

1196
00:44:39,750 --> 00:44:44,310
to implement my functionality and if

1197
00:44:41,820 --> 00:44:45,720
it's not my function it's gonna pass on

1198
00:44:44,310 --> 00:44:47,850
straight to handle it over to the

1199
00:44:45,720 --> 00:44:50,609
standard patch mode function that's very

1200
00:44:47,850 --> 00:44:53,160
easy yes quite safe the alternative is

1201
00:44:50,610 --> 00:44:55,650
to actually do an internal invocation

1202
00:44:53,160 --> 00:44:57,270
way basically you overwrite part of the

1203
00:44:55,650 --> 00:44:59,220
existing binary you find some

1204
00:44:57,270 --> 00:45:02,040
functionality that you think air this

1205
00:44:59,220 --> 00:45:03,569
double RCI octal patch mod function is

1206
00:45:02,040 --> 00:45:03,900
doing something I don't care for it to

1207
00:45:03,570 --> 00:45:06,540
do

1208
00:45:03,900 --> 00:45:09,330
I'll null it all out or I'll make it

1209
00:45:06,540 --> 00:45:11,250
call some external code that I've

1210
00:45:09,330 --> 00:45:13,529
written in a string somewhere else but

1211
00:45:11,250 --> 00:45:14,850
I'll duplicate this functionality what

1212
00:45:13,530 --> 00:45:17,160
I've done here is the most dangerous one

1213
00:45:14,850 --> 00:45:18,960
where basically these couple of basic

1214
00:45:17,160 --> 00:45:21,629
blocks are listed here all dominated by

1215
00:45:18,960 --> 00:45:25,020
the one at the top and all of those

1216
00:45:21,630 --> 00:45:26,760
handle one specific ioctl call that I

1217
00:45:25,020 --> 00:45:28,980
don't care about so I'm gonna steal it

1218
00:45:26,760 --> 00:45:30,870
for myself sliders not all that data out

1219
00:45:28,980 --> 00:45:32,820
and I'm gonna overwrite with my code

1220
00:45:30,870 --> 00:45:34,290
just have it execute in place that's

1221
00:45:32,820 --> 00:45:35,690
dangerous because I'm changing the

1222
00:45:34,290 --> 00:45:38,970
behavior of the thing that I'm modifying

1223
00:45:35,690 --> 00:45:40,710
but it works I wouldn't recommend it but

1224
00:45:38,970 --> 00:45:42,779
you can do it from time to time so now

1225
00:45:40,710 --> 00:45:44,340
you we've got how we can do it we know

1226
00:45:42,780 --> 00:45:48,390
what we do and we know we found the

1227
00:45:44,340 --> 00:45:50,190
target what should it do turns out the

1228
00:45:48,390 --> 00:45:52,950
getting hold of the ROM is really

1229
00:45:50,190 --> 00:45:55,800
vez if you do a basic bit of reverse

1230
00:45:52,950 --> 00:45:57,480
engineering upon that mem copy then

1231
00:45:55,800 --> 00:45:59,600
copies a great function because take one

1232
00:45:57,480 --> 00:46:01,590
block from here moves it over there

1233
00:45:59,600 --> 00:46:03,660
doesn't work if the input parameters

1234
00:46:01,590 --> 00:46:05,910
null unfortunately so if you want to

1235
00:46:03,660 --> 00:46:08,009
read D at the start at zero you might

1236
00:46:05,910 --> 00:46:10,080
have to start four bytes instead of zero

1237
00:46:08,010 --> 00:46:12,480
but you can get most of the data that

1238
00:46:10,080 --> 00:46:14,250
way and all this does a couple of

1239
00:46:12,480 --> 00:46:16,590
instructions three of them are setting

1240
00:46:14,250 --> 00:46:18,570
up the parameters and then to D call and

1241
00:46:16,590 --> 00:46:20,160
I'm using 2d call only because I want to

1242
00:46:18,570 --> 00:46:22,590
be able to put my patch anywhere in

1243
00:46:20,160 --> 00:46:23,730
memory but since I'm right in assembly

1244
00:46:22,590 --> 00:46:25,290
code and since I'm going through the

1245
00:46:23,730 --> 00:46:27,150
pain of patching it and doing all this

1246
00:46:25,290 --> 00:46:29,400
stuff the shenanigans of getting into

1247
00:46:27,150 --> 00:46:30,810
memory to begin with maybe there's a few

1248
00:46:29,400 --> 00:46:32,640
other things we can do you build a debug

1249
00:46:30,810 --> 00:46:35,190
platform we can build some tools can

1250
00:46:32,640 --> 00:46:36,690
allow us to do a lot more later on and

1251
00:46:35,190 --> 00:46:37,740
so I've come up with these five

1252
00:46:36,690 --> 00:46:39,750
functions can I think that's all you

1253
00:46:37,740 --> 00:46:41,819
ever need that gives you everything you

1254
00:46:39,750 --> 00:46:45,540
need to do read write exact Alec and

1255
00:46:41,820 --> 00:46:47,670
free and that is exposed with the user

1256
00:46:45,540 --> 00:46:48,900
tool a ceiling second and at that point

1257
00:46:47,670 --> 00:46:50,850
you should be able to bundle everything

1258
00:46:48,900 --> 00:46:52,500
up you can pick the CRC's because you

1259
00:46:50,850 --> 00:46:53,819
know how they are I'm putting it back in

1260
00:46:52,500 --> 00:46:56,820
the filesystem and they used to share

1261
00:46:53,820 --> 00:46:58,410
Wi-Fi appropriate file name and that

1262
00:46:56,820 --> 00:47:00,360
will should just load it for you but

1263
00:46:58,410 --> 00:47:02,520
they won't because what they did in

1264
00:47:00,360 --> 00:47:04,650
eleven three was introduced to hash

1265
00:47:02,520 --> 00:47:06,240
store into the kernel and ask the hashes

1266
00:47:04,650 --> 00:47:08,460
of all the firm uses cord and nothing

1267
00:47:06,240 --> 00:47:11,520
else so basically if you change one bit

1268
00:47:08,460 --> 00:47:13,200
in any of the four files it needs you're

1269
00:47:11,520 --> 00:47:14,910
done game over it will refuse to load

1270
00:47:13,200 --> 00:47:16,770
the firmware for stop it's an equivalent

1271
00:47:14,910 --> 00:47:19,170
of what happens with AP ticket with the

1272
00:47:16,770 --> 00:47:20,550
beasts patent Fermi's with the 4g when

1273
00:47:19,170 --> 00:47:22,770
that's loaded onto the baseband

1274
00:47:20,550 --> 00:47:23,760
processor they've just said we want the

1275
00:47:22,770 --> 00:47:26,370
same thing they just used a slightly

1276
00:47:23,760 --> 00:47:29,460
different mechanism so how do we get

1277
00:47:26,370 --> 00:47:31,620
past that well I did actually have a

1278
00:47:29,460 --> 00:47:32,970
really clever solution but I'm not gonna

1279
00:47:31,620 --> 00:47:37,020
present you here because it's a much

1280
00:47:32,970 --> 00:47:38,100
much easier one came up and it's very

1281
00:47:37,020 --> 00:47:40,830
very straightforward it's actually

1282
00:47:38,100 --> 00:47:43,710
document in the Benjamin the article in

1283
00:47:40,830 --> 00:47:45,630
that if the kernel won't load the data

1284
00:47:43,710 --> 00:47:47,730
for me and I've got a jailbroken device

1285
00:47:45,630 --> 00:47:49,380
why don't I just do it myself I've got

1286
00:47:47,730 --> 00:47:53,340
you in a level access I can do what I

1287
00:47:49,380 --> 00:47:55,230
want and it turns out that in the pcie

1288
00:47:53,340 --> 00:47:57,630
express our PCI Express

1289
00:47:55,230 --> 00:47:59,220
standard there's a concept where you can

1290
00:47:57,630 --> 00:48:01,290
map part of the address range of the

1291
00:47:59,220 --> 00:48:03,419
horse system that any reads or writes

1292
00:48:01,290 --> 00:48:07,920
are then forwarded across

1293
00:48:03,420 --> 00:48:10,559
across this pci bus to the back-end

1294
00:48:07,920 --> 00:48:14,339
processor and the resultant reads or

1295
00:48:10,559 --> 00:48:16,710
writes to the memory of the the the

1296
00:48:14,339 --> 00:48:19,040
double eunuch itself of the r4 processor

1297
00:48:16,710 --> 00:48:21,450
or the m3 processors running there and

1298
00:48:19,040 --> 00:48:22,829
if you read the original articles by the

1299
00:48:21,450 --> 00:48:24,450
enemy a little bit unclear because they

1300
00:48:22,829 --> 00:48:26,099
don't get the names quite right but

1301
00:48:24,450 --> 00:48:28,230
talks about what they call tightly

1302
00:48:26,099 --> 00:48:29,730
coupled memory and that's this basically

1303
00:48:28,230 --> 00:48:33,180
that block of memory that you've mapped

1304
00:48:29,730 --> 00:48:35,490
that's shared you allow any reads or

1305
00:48:33,180 --> 00:48:37,618
writes to that part of your address base

1306
00:48:35,490 --> 00:48:40,259
to in effect be satisfied by the wdx

1307
00:48:37,619 --> 00:48:42,049
memory itself and if you do a bit of

1308
00:48:40,260 --> 00:48:45,599
reverse engineering you'll come up with

1309
00:48:42,049 --> 00:48:48,030
four sets of write methods and four sets

1310
00:48:45,599 --> 00:48:51,540
of read methods on an object called the

1311
00:48:48,030 --> 00:48:53,819
Apple PC M W LAN chip memory that's a

1312
00:48:51,540 --> 00:48:56,308
big mouthful but it's an object in

1313
00:48:53,819 --> 00:48:58,650
memory in the kernel part of our kit

1314
00:48:56,309 --> 00:49:00,540
that allows you to be a cause and do the

1315
00:48:58,650 --> 00:49:01,950
reads or writes and if you look at how

1316
00:49:00,540 --> 00:49:04,319
the implementation works here for a

1317
00:49:01,950 --> 00:49:07,589
32-bit version it has an array of

1318
00:49:04,319 --> 00:49:09,058
mappings which have the host address the

1319
00:49:07,589 --> 00:49:11,250
device address and the length of the

1320
00:49:09,059 --> 00:49:13,589
block and it walks through and says well

1321
00:49:11,250 --> 00:49:15,780
I happen to know that the bus index

1322
00:49:13,589 --> 00:49:17,190
always is for you because if you really

1323
00:49:15,780 --> 00:49:18,599
essentially you see the call it's always

1324
00:49:17,190 --> 00:49:20,430
the fourth element we use of this array

1325
00:49:18,599 --> 00:49:23,460
and it just there's a little bit Punk

1326
00:49:20,430 --> 00:49:24,990
arithmetic to find the memory we can do

1327
00:49:23,460 --> 00:49:26,579
the same thing using the tool that was

1328
00:49:24,990 --> 00:49:29,578
written by Brandon Azad called men

1329
00:49:26,579 --> 00:49:31,559
control Brandon Saad should be famous

1330
00:49:29,579 --> 00:49:33,750
because he's guided the back of the pack

1331
00:49:31,559 --> 00:49:35,700
bypass for pointer authentication

1332
00:49:33,750 --> 00:49:37,380
recently for Google's Project 0 or the

1333
00:49:35,700 --> 00:49:39,960
first one they note got a second one

1334
00:49:37,380 --> 00:49:42,119
that they're doing mem control as long

1335
00:49:39,960 --> 00:49:43,290
as you've got a jailbroken kernel will

1336
00:49:42,119 --> 00:49:46,829
allow you to read and write arbitrary

1337
00:49:43,290 --> 00:49:48,630
kernel memory go do it right if you try

1338
00:49:46,829 --> 00:49:50,670
and write memory this outside of the or

1339
00:49:48,630 --> 00:49:52,740
is inside the read-only region it's

1340
00:49:50,670 --> 00:49:54,450
going to reset if you do misaligned read

1341
00:49:52,740 --> 00:49:56,129
or write this gonna reset there's all

1342
00:49:54,450 --> 00:49:58,169
those kind of hardware protection things

1343
00:49:56,130 --> 00:50:02,130
going on but it's a really powerful tool

1344
00:49:58,170 --> 00:50:04,500
so what we do we say fine class Apple PC

1345
00:50:02,130 --> 00:50:06,630
emwave landship memory and if I do that

1346
00:50:04,500 --> 00:50:08,609
it'll come back with the address of the

1347
00:50:06,630 --> 00:50:10,349
one and only object in memory let's go

1348
00:50:08,609 --> 00:50:11,130
back because only one PCI bus of one

1349
00:50:10,349 --> 00:50:14,339
double unit

1350
00:50:11,130 --> 00:50:15,220
so only one of these instantiated I can

1351
00:50:14,339 --> 00:50:17,920
ask it say

1352
00:50:15,220 --> 00:50:18,629
and will come back and tell me it's 208

1353
00:50:17,920 --> 00:50:21,070
bytes

1354
00:50:18,630 --> 00:50:25,300
those two pieces of information allow me

1355
00:50:21,070 --> 00:50:27,000
to read the block and now I get

1356
00:50:25,300 --> 00:50:29,170
something actually looks quite useful

1357
00:50:27,000 --> 00:50:31,480
and probably doesn't you right now

1358
00:50:29,170 --> 00:50:34,000
you've dr. Drew visit but I can tell you

1359
00:50:31,480 --> 00:50:36,970
that we here we have our sets of

1360
00:50:34,000 --> 00:50:38,619
mappings so we've got six mappings there

1361
00:50:36,970 --> 00:50:41,879
I've told you that the fifth elephant

1362
00:50:38,619 --> 00:50:45,400
fifth element is the one we want it and

1363
00:50:41,880 --> 00:50:47,530
there's the dress in memory of where the

1364
00:50:45,400 --> 00:50:50,230
W Nick's RAM is mapped into the horse

1365
00:50:47,530 --> 00:50:52,450
memory I can use that to rewrite

1366
00:50:50,230 --> 00:50:54,820
anything in that memory I want so I can

1367
00:50:52,450 --> 00:50:56,919
step around the shower by the char

1368
00:50:54,820 --> 00:50:58,480
protection mechanisms because I've got a

1369
00:50:56,920 --> 00:51:01,180
jailbroken phone it's still a worthwhile

1370
00:50:58,480 --> 00:51:04,930
bypass because it stops this thing being

1371
00:51:01,180 --> 00:51:06,460
used as a backdoor persistence mechanism

1372
00:51:04,930 --> 00:51:08,919
which is what I was planning on using it

1373
00:51:06,460 --> 00:51:10,780
for but now can't do that you can read

1374
00:51:08,920 --> 00:51:14,980
there and if you read under my highlight

1375
00:51:10,780 --> 00:51:16,480
then oops I will go back again I'm not

1376
00:51:14,980 --> 00:51:23,560
driving this well today except on my

1377
00:51:16,480 --> 00:51:26,380
iPad iPad it's not working right if you

1378
00:51:23,560 --> 00:51:28,180
look under the that address nine 1000

1379
00:51:26,380 --> 00:51:30,430
you can see that this is a length field

1380
00:51:28,180 --> 00:51:32,770
ethos and you can also see that the

1381
00:51:30,430 --> 00:51:36,790
address is mapped into the child process

1382
00:51:32,770 --> 00:51:40,390
is one six or so that's the address that

1383
00:51:36,790 --> 00:51:44,020
it's on the on the W neck so we use that

1384
00:51:40,390 --> 00:51:46,330
to read and I read just the first 100

1385
00:51:44,020 --> 00:51:48,220
hex bytes and we see exactly the same

1386
00:51:46,330 --> 00:51:50,259
bytes that we saw in the file where we

1387
00:51:48,220 --> 00:51:53,200
looked at the TRX file we've even got

1388
00:51:50,260 --> 00:51:53,589
the far far far far stuff DBP peas in

1389
00:51:53,200 --> 00:51:58,839
there

1390
00:51:53,589 --> 00:52:01,540
we now have as well the pointer the the

1391
00:51:58,839 --> 00:52:03,549
the one or two B 1 C value for the

1392
00:52:01,540 --> 00:52:05,589
Hitchin DRTV debug structs we can

1393
00:52:03,550 --> 00:52:10,150
actually read that we can now play we

1394
00:52:05,589 --> 00:52:11,710
can actually change things implemented

1395
00:52:10,150 --> 00:52:13,660
in my patch in approach I talked about

1396
00:52:11,710 --> 00:52:16,869
earlier this is where that string that I

1397
00:52:13,660 --> 00:52:20,049
was looking at basically I found a

1398
00:52:16,869 --> 00:52:21,970
string inside my the debugger I knew

1399
00:52:20,050 --> 00:52:23,950
what the offset was I did a little bit

1400
00:52:21,970 --> 00:52:26,020
arithmetic to come up based on that base

1401
00:52:23,950 --> 00:52:28,419
address with what it is and now listen

1402
00:52:26,020 --> 00:52:28,630
to the first 120 hex byte so we can see

1403
00:52:28,420 --> 00:52:30,370
if

1404
00:52:28,630 --> 00:52:32,680
something here whether the string it's

1405
00:52:30,370 --> 00:52:36,100
not stop check that that the second

1406
00:52:32,680 --> 00:52:42,910
string is new line D three underscore

1407
00:52:36,100 --> 00:52:45,009
suspend blur blur blur blur blur okay if

1408
00:52:42,910 --> 00:52:47,049
we read it again but this time I'm gonna

1409
00:52:45,010 --> 00:52:51,190
actually change it so now I've done a

1410
00:52:47,050 --> 00:52:52,480
write dear to command and then controls

1411
00:52:51,190 --> 00:52:53,920
really good like this it allows me to

1412
00:52:52,480 --> 00:52:55,870
force to read even if it thinks the

1413
00:52:53,920 --> 00:52:58,360
memories unmapped that's what the- F's

1414
00:52:55,870 --> 00:53:01,240
are everywhere in these commands and a

1415
00:52:58,360 --> 00:53:03,130
null doubt the d3 underscore s so if

1416
00:53:01,240 --> 00:53:07,750
anybody prints that original string they

1417
00:53:03,130 --> 00:53:08,590
get a new line end off oh sorry I am one

1418
00:53:07,750 --> 00:53:11,440
behind I'm not showing you the right

1419
00:53:08,590 --> 00:53:13,360
thing right so the first command up

1420
00:53:11,440 --> 00:53:16,030
there is raked in and Nullah note the

1421
00:53:13,360 --> 00:53:17,920
block of Emery then we want to upload

1422
00:53:16,030 --> 00:53:19,510
our patch into the remainder now it's on

1423
00:53:17,920 --> 00:53:20,800
I deliberately planned it out to the

1424
00:53:19,510 --> 00:53:21,910
four byte boundary if you don't do it

1425
00:53:20,800 --> 00:53:23,680
for buyback me you're gonna get a

1426
00:53:21,910 --> 00:53:25,629
hardware reset so I could go very wrong

1427
00:53:23,680 --> 00:53:26,859
on you and I was uploaded the patch and

1428
00:53:25,630 --> 00:53:27,970
this is what the binary the patch looked

1429
00:53:26,860 --> 00:53:31,240
like 108 bytes

1430
00:53:27,970 --> 00:53:33,459
it has readwrite alloc free and exact

1431
00:53:31,240 --> 00:53:34,990
and exact serves dual use as well

1432
00:53:33,460 --> 00:53:37,270
because that's what we use for rebooting

1433
00:53:34,990 --> 00:53:39,160
machine one more fuzz in by exec in the

1434
00:53:37,270 --> 00:53:41,800
thing that contents of zero zero zero

1435
00:53:39,160 --> 00:53:43,990
zero the trap vector so we actually get

1436
00:53:41,800 --> 00:53:46,960
six functions for the cost of five very

1437
00:53:43,990 --> 00:53:48,129
very easy to do but it's still not gonna

1438
00:53:46,960 --> 00:53:50,530
be called at this point because we've

1439
00:53:48,130 --> 00:53:52,510
not installed it yet and install it as

1440
00:53:50,530 --> 00:53:54,550
simple as doing that we basically write

1441
00:53:52,510 --> 00:53:56,860
the address of that string of that the

1442
00:53:54,550 --> 00:53:58,240
string itself now but of our patch into

1443
00:53:56,860 --> 00:54:02,580
the trees patch mode back then we're

1444
00:53:58,240 --> 00:54:05,850
done so ready where do we go from here

1445
00:54:02,580 --> 00:54:05,850
okay right

1446
00:54:10,339 --> 00:54:14,269
we want to recover the binary we've got

1447
00:54:12,799 --> 00:54:16,279
the patch in we've got the staff I've

1448
00:54:14,269 --> 00:54:18,649
done some use land chord that basically

1449
00:54:16,279 --> 00:54:20,299
just exposes those functions through so

1450
00:54:18,650 --> 00:54:22,549
we look at this is a shell actually

1451
00:54:20,299 --> 00:54:25,038
running on my phone that utilities close

1452
00:54:22,549 --> 00:54:29,839
b7w on I've just exposed Alec readwrite

1453
00:54:25,039 --> 00:54:31,789
free and I've got to extract exactly the

1454
00:54:29,839 --> 00:54:34,670
execs not the help message exactly as

1455
00:54:31,789 --> 00:54:37,670
well if you run in foreign force just a

1456
00:54:34,670 --> 00:54:40,209
repackaging of read that looks up the D

1457
00:54:37,670 --> 00:54:43,459
PPP looks up the hitch and the ah dddd

1458
00:54:40,209 --> 00:54:47,089
bug print solid fear and to get the ROM

1459
00:54:43,459 --> 00:54:48,259
we just say extracted the file and this

1460
00:54:47,089 --> 00:54:50,509
is where I have an admission to make

1461
00:54:48,259 --> 00:54:53,209
I told you a lie at the beginning I said

1462
00:54:50,509 --> 00:54:54,890
that you can't read the ROM and that's

1463
00:54:53,209 --> 00:54:57,828
because every single presentation I've

1464
00:54:54,890 --> 00:54:59,779
seen does says they said everybody goes

1465
00:54:57,829 --> 00:55:01,309
through this patch and shenanigans and

1466
00:54:59,779 --> 00:55:03,949
you read the comments on Benny minis

1467
00:55:01,309 --> 00:55:05,299
articles of project zero the next one

1468
00:55:03,949 --> 00:55:07,400
people are waited in and said this is

1469
00:55:05,299 --> 00:55:08,989
how we do this you can actually read it

1470
00:55:07,400 --> 00:55:11,150
because if you look at the block of

1471
00:55:08,989 --> 00:55:13,579
memory down there that's the RAM that we

1472
00:55:11,150 --> 00:55:17,439
want to read and it says yes yes it's

1473
00:55:13,579 --> 00:55:22,400
Lord in it 1 600 it's a thousand 800

1474
00:55:17,439 --> 00:55:24,019
bytes long 80,000 but if you look you

1475
00:55:22,400 --> 00:55:27,469
earlier there's another mapping up there

1476
00:55:24,019 --> 00:55:30,618
this one starts at address 20 and goes

1477
00:55:27,469 --> 00:55:34,160
on for dff easier bytes us exactly 20

1478
00:55:30,619 --> 00:55:36,949
bytes short of the e the the big thing

1479
00:55:34,160 --> 00:55:40,219
so we've got the ROM and we can read it

1480
00:55:36,949 --> 00:55:41,989
out directly here some men control we

1481
00:55:40,219 --> 00:55:42,910
just punch that into the commands we get

1482
00:55:41,989 --> 00:55:45,679
it

1483
00:55:42,910 --> 00:55:47,839
unfortunately the the format looks a bit

1484
00:55:45,679 --> 00:55:49,489
like xxd but you can't use it to revert

1485
00:55:47,839 --> 00:55:51,619
and get the binary back we're getting

1486
00:55:49,489 --> 00:55:55,479
close but a little bit of shell script

1487
00:55:51,619 --> 00:55:58,759
read gets through that image back ok

1488
00:55:55,479 --> 00:56:00,439
let's get that right so you've got your

1489
00:55:58,759 --> 00:56:01,789
binary you've now got the wrong you've

1490
00:56:00,439 --> 00:56:03,618
got the RAM you can predict them

1491
00:56:01,789 --> 00:56:04,999
together you can start assembling them

1492
00:56:03,619 --> 00:56:06,769
you're gonna spend an hour or two just

1493
00:56:04,999 --> 00:56:08,238
resolving all the references making sure

1494
00:56:06,769 --> 00:56:11,029
everything matches up going through and

1495
00:56:08,239 --> 00:56:12,289
having all the usual fun and now you can

1496
00:56:11,029 --> 00:56:15,799
start to get the picture it's great

1497
00:56:12,289 --> 00:56:17,150
dissecting what what's wrong law is

1498
00:56:15,799 --> 00:56:19,939
you're gonna see this happen

1499
00:56:17,150 --> 00:56:21,619
and not just once hundreds of times this

1500
00:56:19,939 --> 00:56:23,509
piece of cord is hopper hoppers go

1501
00:56:21,619 --> 00:56:25,010
really lovely UI I

1502
00:56:23,510 --> 00:56:26,590
it's actually much better than Ghidorah

1503
00:56:25,010 --> 00:56:29,240
it's certainly a lot better than either

1504
00:56:26,590 --> 00:56:31,970
because anything in that kind of yellowy

1505
00:56:29,240 --> 00:56:33,470
color is a procedure gnosis is something

1506
00:56:31,970 --> 00:56:35,600
that is actual function it does

1507
00:56:33,470 --> 00:56:36,589
something and anything with the white

1508
00:56:35,600 --> 00:56:38,839
background like that's just random

1509
00:56:36,590 --> 00:56:40,280
blesses instructions you know aren't

1510
00:56:38,840 --> 00:56:42,200
called by anything that it can work out

1511
00:56:40,280 --> 00:56:44,570
and that's because this function here

1512
00:56:42,200 --> 00:56:45,560
very first thing it does is branch and a

1513
00:56:44,570 --> 00:56:48,500
sit and a function that's going

1514
00:56:45,560 --> 00:56:50,090
somewhere else that's in ROM why would

1515
00:56:48,500 --> 00:56:51,740
they have all this in there like that

1516
00:56:50,090 --> 00:56:54,710
doesn't make any sense especially

1517
00:56:51,740 --> 00:56:56,899
because what follows there's action look

1518
00:56:54,710 --> 00:56:58,310
quite reasonable and as I say I did a

1519
00:56:56,900 --> 00:56:59,840
little bit of scrip tree as well I've

1520
00:56:58,310 --> 00:57:01,640
marked them all up here and tacked them

1521
00:56:59,840 --> 00:57:03,620
there are hundreds of undefined

1522
00:57:01,640 --> 00:57:05,330
functions in the ROM that just call in

1523
00:57:03,620 --> 00:57:07,609
out into the RAM it makes no sense

1524
00:57:05,330 --> 00:57:08,630
because the RAM every time we repackage

1525
00:57:07,610 --> 00:57:12,380
it could things could be in different

1526
00:57:08,630 --> 00:57:14,690
locations what actually is going on is

1527
00:57:12,380 --> 00:57:16,730
it's making use of something called the

1528
00:57:14,690 --> 00:57:19,700
flash patch a great point unit in the r4

1529
00:57:16,730 --> 00:57:22,850
processor it exists in actually most ARM

1530
00:57:19,700 --> 00:57:27,049
Cortex CPUs it's a way of changing the

1531
00:57:22,850 --> 00:57:29,810
flow of data that CPU sees you can set

1532
00:57:27,050 --> 00:57:32,450
up a table there's rebug registers

1533
00:57:29,810 --> 00:57:33,890
controller let's say when you try to

1534
00:57:32,450 --> 00:57:35,960
load from this address you try to a

1535
00:57:33,890 --> 00:57:38,299
literal rod or an instruction Lord I

1536
00:57:35,960 --> 00:57:40,850
want you to read this many bytes from

1537
00:57:38,300 --> 00:57:43,760
this location and Ram instead that

1538
00:57:40,850 --> 00:57:46,759
allows them to patch any function in ROM

1539
00:57:43,760 --> 00:57:48,410
and hook it to do things in RAM so they

1540
00:57:46,760 --> 00:57:50,480
don't have to have a patch mode vector

1541
00:57:48,410 --> 00:57:51,920
for everything just for the things they

1542
00:57:50,480 --> 00:57:54,530
knew they own all right but everything

1543
00:57:51,920 --> 00:57:56,240
that comes up as a must fix gets fixed

1544
00:57:54,530 --> 00:57:57,890
like this there's a couple of hundred

1545
00:57:56,240 --> 00:58:00,770
entries you can do on some of these CPUs

1546
00:57:57,890 --> 00:58:03,980
that allow you to do that the good thing

1547
00:58:00,770 --> 00:58:05,000
from an exploring point of view is it

1548
00:58:03,980 --> 00:58:07,700
means there's nothing you can't hook

1549
00:58:05,000 --> 00:58:10,070
yourself as well because use the debug

1550
00:58:07,700 --> 00:58:12,859
platform to upload a piece of code and

1551
00:58:10,070 --> 00:58:15,530
you can then say I want this to be hook

1552
00:58:12,860 --> 00:58:17,150
whatever function I want in memory at

1553
00:58:15,530 --> 00:58:19,070
any point I want something called I can

1554
00:58:17,150 --> 00:58:21,290
hook it that's really really really

1555
00:58:19,070 --> 00:58:23,990
powerful the main problem is that many

1556
00:58:21,290 --> 00:58:26,540
of these debug patches are already fixed

1557
00:58:23,990 --> 00:58:28,220
they're already in use and you're gonna

1558
00:58:26,540 --> 00:58:30,160
find that you may even exceed the table

1559
00:58:28,220 --> 00:58:33,538
size on the particular CPU you've got

1560
00:58:30,160 --> 00:58:35,368
but it's hugely hugely useful

1561
00:58:33,539 --> 00:58:36,989
the other thing is really good to look

1562
00:58:35,369 --> 00:58:38,459
at is the device council because you can

1563
00:58:36,989 --> 00:58:39,929
now call printf inside your pocket

1564
00:58:38,459 --> 00:58:42,479
inside any packages you want to upload

1565
00:58:39,929 --> 00:58:44,669
on top and like I said I've got my

1566
00:58:42,479 --> 00:58:47,129
little debug platform it's job is really

1567
00:58:44,669 --> 00:58:48,359
to get at the cord into the CPU and so

1568
00:58:47,130 --> 00:58:50,130
if I want to find out if something's

1569
00:58:48,359 --> 00:58:52,199
happens the easiest way to do it is to

1570
00:58:50,130 --> 00:58:53,999
print the error log because otherwise I

1571
00:58:52,199 --> 00:58:55,559
might not be able to interact with it if

1572
00:58:53,999 --> 00:58:58,769
it's outside the normal flow of me

1573
00:58:55,559 --> 00:59:00,209
poking it from the outside and here we

1574
00:58:58,769 --> 00:59:01,618
see an example where the console point

1575
00:59:00,209 --> 00:59:03,749
that parts of console object it could

1576
00:59:01,619 --> 00:59:06,809
puncture the buffer here you can see you

1577
00:59:03,749 --> 00:59:08,729
know just normal start up messages and

1578
00:59:06,809 --> 00:59:11,759
the final thing that I do once we've got

1579
00:59:08,729 --> 00:59:14,158
this far is compiled code for the W neck

1580
00:59:11,759 --> 00:59:16,319
you don't need to write an assembler

1581
00:59:14,159 --> 00:59:17,880
write in assembly even me I like I like

1582
00:59:16,319 --> 00:59:19,558
this and I've been writing in semla

1583
00:59:17,880 --> 00:59:23,130
since I was a kid I think it's great

1584
00:59:19,559 --> 00:59:26,130
it's just very painful so you can write

1585
00:59:23,130 --> 00:59:28,259
in C instead or C++ C and you can upload

1586
00:59:26,130 --> 00:59:30,239
that cor don't forget compiler options

1587
00:59:28,259 --> 00:59:32,069
C++ you've gotta turn off exceptions and

1588
00:59:30,239 --> 00:59:34,349
all cancers but if you've got the arm

1589
00:59:32,069 --> 00:59:36,119
nanny ABI toolchain installed in the

1590
00:59:34,349 --> 00:59:37,649
machine you can do it these are the

1591
00:59:36,119 --> 00:59:40,289
commands you do basically compile it

1592
00:59:37,649 --> 00:59:42,089
every for every stand in position

1593
00:59:40,289 --> 00:59:44,639
independent cord to pilot for the right

1594
00:59:42,089 --> 00:59:46,679
processor when you link it link it no

1595
00:59:44,639 --> 00:59:48,329
standard Lib you're going to need a

1596
00:59:46,679 --> 00:59:51,149
linker script to tell it what the entry

1597
00:59:48,329 --> 00:59:53,159
point of the cord is where the which

1598
00:59:51,149 --> 00:59:54,479
function to put first in effect but

1599
00:59:53,159 --> 00:59:59,249
that's like two or three lines of script

1600
00:59:54,479 --> 01:00:01,859
and then arm nanny ABI abba-abba-abba RP

1601
00:59:59,249 --> 01:00:03,749
just takes a nail file strips up the

1602
01:00:01,859 --> 01:00:05,130
cord that you care about and dumps out

1603
01:00:03,749 --> 01:00:08,459
enduring image file you can then upload

1604
01:00:05,130 --> 01:00:09,389
that using the debug platform so that

1605
01:00:08,459 --> 01:00:11,129
gets you to the point where you've now

1606
01:00:09,389 --> 01:00:13,679
teamed the CPU because you've got all

1607
01:00:11,130 --> 01:00:16,409
the cord down you've analyzed the cord

1608
01:00:13,679 --> 01:00:18,359
you can change the court and you can

1609
01:00:16,409 --> 01:00:20,459
change the flow of what's there even

1610
01:00:18,359 --> 01:00:22,589
when it's in ROM so you've pretty much

1611
01:00:20,459 --> 01:00:24,989
got full power of the CP over the the

1612
01:00:22,589 --> 01:00:28,949
embedded processor it's not the CPU

1613
01:00:24,989 --> 01:00:30,479
that's the horse device that brings me

1614
01:00:28,949 --> 01:00:36,929
to the next part which is how do we go

1615
01:00:30,479 --> 01:00:39,239
about breaking it I'm well I'm sorry we

1616
01:00:36,929 --> 01:00:40,289
talked about fuzzing and exploiting it's

1617
01:00:39,239 --> 01:00:44,069
right now I'm not really on the cover

1618
01:00:40,289 --> 01:00:46,330
today properly but in terms of fuzz in I

1619
01:00:44,069 --> 01:00:49,180
will encourage you to

1620
01:00:46,330 --> 01:00:50,950
look at some of the older less sexy

1621
01:00:49,180 --> 01:00:52,930
fuzzing technologies because everybody

1622
01:00:50,950 --> 01:00:54,759
likes it IFL and lip fuzz and they're

1623
01:00:52,930 --> 01:00:56,560
great but you kind of need sauce and you

1624
01:00:54,760 --> 01:00:57,849
kind of need a tractable environment

1625
01:00:56,560 --> 01:00:59,859
you're talking about a binary here

1626
01:00:57,849 --> 01:01:01,810
Fessenden binaries is a really

1627
01:00:59,859 --> 01:01:03,880
interesting and quite a captain area to

1628
01:01:01,810 --> 01:01:07,630
be honest because you kind of force back

1629
01:01:03,880 --> 01:01:08,920
to more old technologies and I suppose

1630
01:01:07,630 --> 01:01:11,530
the main first thing we should do is

1631
01:01:08,920 --> 01:01:13,119
decide what we're gonna face and since

1632
01:01:11,530 --> 01:01:15,280
we're on an apple platform I'm gonna

1633
01:01:13,119 --> 01:01:18,130
talk about if as in some apple specific

1634
01:01:15,280 --> 01:01:21,339
behaviors but Benny meanie and I know I

1635
01:01:18,130 --> 01:01:23,800
refer to the paper that the projects you

1636
01:01:21,339 --> 01:01:27,359
article a couple of times already when

1637
01:01:23,800 --> 01:01:31,180
after a later 211 facility called TLS

1638
01:01:27,359 --> 01:01:34,450
and that's used to set a tunnel data

1639
01:01:31,180 --> 01:01:37,210
link between say your laptop and your

1640
01:01:34,450 --> 01:01:38,529
Google chromecast without going via

1641
01:01:37,210 --> 01:01:40,690
their access point because normally

1642
01:01:38,530 --> 01:01:42,400
every packet with access point then do

1643
01:01:40,690 --> 01:01:44,920
the dance back there and that's just

1644
01:01:42,400 --> 01:01:46,750
having your bandwidth if you can provide

1645
01:01:44,920 --> 01:01:49,180
a tunnel between the two that's secure

1646
01:01:46,750 --> 01:01:52,440
then fine and that's what TTLs does

1647
01:01:49,180 --> 01:01:55,118
Apple of a very similar thing in a wdl

1648
01:01:52,440 --> 01:01:57,940
Apple also have the Bonjour Protocol

1649
01:01:55,119 --> 01:02:00,400
bonjours to repackage it it's mdns under

1650
01:01:57,940 --> 01:02:01,690
the skin and these two protocols kind of

1651
01:02:00,400 --> 01:02:04,570
work quite nicely together

1652
01:02:01,690 --> 01:02:07,450
aw dl i'm gonna recommend you read

1653
01:02:04,570 --> 01:02:10,720
street this paper i've linked to here

1654
01:02:07,450 --> 01:02:12,939
it's the only documentation on aw aw dl

1655
01:02:10,720 --> 01:02:14,500
you're gonna find and it's basically a

1656
01:02:12,940 --> 01:02:17,560
way of getting more than one channel at

1657
01:02:14,500 --> 01:02:19,089
the Wi-Fi it said we will for a certain

1658
01:02:17,560 --> 01:02:21,220
period because the card can only

1659
01:02:19,089 --> 01:02:25,180
broadcast receive on one frequency at

1660
01:02:21,220 --> 01:02:27,759
once or one channel at once then what it

1661
01:02:25,180 --> 01:02:30,250
does is it says well at certain points i

1662
01:02:27,760 --> 01:02:31,690
will switch to another frequency and I

1663
01:02:30,250 --> 01:02:34,300
will listen there and then I will go

1664
01:02:31,690 --> 01:02:36,070
back and saw this logical channel if you

1665
01:02:34,300 --> 01:02:38,080
can synchronize everybody to do that all

1666
01:02:36,070 --> 01:02:39,670
on a common clock you can have the

1667
01:02:38,080 --> 01:02:40,779
effect of having two channels you

1668
01:02:39,670 --> 01:02:42,550
shouldn't miss traffic on the first

1669
01:02:40,780 --> 01:02:44,530
channel cut off or over here you could

1670
01:02:42,550 --> 01:02:46,900
potentially do stuff but that would be

1671
01:02:44,530 --> 01:02:48,339
the case anyway it's really kind of

1672
01:02:46,900 --> 01:02:51,460
likely useful and it's equivalent to

1673
01:02:48,339 --> 01:02:53,500
what TDL essays and it uses three

1674
01:02:51,460 --> 01:02:55,770
special social channels to negotiate to

1675
01:02:53,500 --> 01:02:58,600
synchronize get times it also

1676
01:02:55,770 --> 01:03:00,040
incorporates into the air wdl frame

1677
01:02:58,600 --> 01:03:02,680
I want to point out this isn't what near

1678
01:03:00,040 --> 01:03:03,759
wdl frame looks like it incorporates in

1679
01:03:02,680 --> 01:03:04,899
that free in which you've seen a white

1680
01:03:03,760 --> 01:03:07,270
shark at the side

1681
01:03:04,900 --> 01:03:08,800
Wireshark has support since version

1682
01:03:07,270 --> 01:03:13,000
three which came out in February as

1683
01:03:08,800 --> 01:03:14,920
support for this you can actually see

1684
01:03:13,000 --> 01:03:16,300
the WL traffic and you can actually

1685
01:03:14,920 --> 01:03:18,430
sniff it and play around with it it's

1686
01:03:16,300 --> 01:03:19,960
quite useful but one of the things

1687
01:03:18,430 --> 01:03:23,589
you're gonna see is the bond Schumer

1688
01:03:19,960 --> 01:03:26,800
traffic mdns service discovery pack a

1689
01:03:23,590 --> 01:03:30,430
frames a piggybacked onto the end of the

1690
01:03:26,800 --> 01:03:32,620
wdl action frames a wdl itself starting

1691
01:03:30,430 --> 01:03:34,750
to particularly do the first part of it

1692
01:03:32,620 --> 01:03:39,520
is a standard 8 to 11 management frame

1693
01:03:34,750 --> 01:03:41,140
the second part of it is a wtl itself

1694
01:03:39,520 --> 01:03:42,940
and the really nice thing about that is

1695
01:03:41,140 --> 01:03:46,270
just got tagline filings at the end and

1696
01:03:42,940 --> 01:03:49,570
TLV cell lovely things to fuss with for

1697
01:03:46,270 --> 01:03:50,920
furs in EIU's Buffa's probably the most

1698
01:03:49,570 --> 01:03:52,270
important thing is to keep all the crash

1699
01:03:50,920 --> 01:03:53,710
reports in to given it to Apple you

1700
01:03:52,270 --> 01:03:55,509
don't want to be crashing things and

1701
01:03:53,710 --> 01:03:56,890
handing those off so turn off your crash

1702
01:03:55,510 --> 01:03:59,590
reports that's quite straightforward to

1703
01:03:56,890 --> 01:04:01,259
do you take all those buttons you turn

1704
01:03:59,590 --> 01:04:03,970
them off you get those buttons instead

1705
01:04:01,260 --> 01:04:06,010
try not to annoy your neighbors I'm

1706
01:04:03,970 --> 01:04:07,899
lucky because I do the cell phone stuff

1707
01:04:06,010 --> 01:04:09,280
I got a Faraday cage so I can actually

1708
01:04:07,900 --> 01:04:11,740
run this in the Faraday cage but even in

1709
01:04:09,280 --> 01:04:14,890
my house you can see like 15 wife

1710
01:04:11,740 --> 01:04:16,779
islands without trying and that that's

1711
01:04:14,890 --> 01:04:18,670
like trebled from last year or

1712
01:04:16,780 --> 01:04:20,080
something's getting ridiculous now so

1713
01:04:18,670 --> 01:04:21,310
yeah you'll know your neighbors if

1714
01:04:20,080 --> 01:04:22,600
you're facing because that's just a

1715
01:04:21,310 --> 01:04:25,299
continuous stream of traffic on one

1716
01:04:22,600 --> 01:04:27,549
channel in my particular setup I

1717
01:04:25,300 --> 01:04:29,140
actually go a bit further I've got a

1718
01:04:27,550 --> 01:04:30,670
setup that looks a bit like this we've

1719
01:04:29,140 --> 01:04:33,129
got a fuzzing box at the end which is a

1720
01:04:30,670 --> 01:04:33,670
little Alex 3d board I've got a Wi-Fi

1721
01:04:33,130 --> 01:04:36,250
router

1722
01:04:33,670 --> 01:04:37,660
to which the first target connects just

1723
01:04:36,250 --> 01:04:39,640
to lock you to one channel and keep it

1724
01:04:37,660 --> 01:04:43,509
all in the same place I use the social

1725
01:04:39,640 --> 01:04:47,350
channels that Awl defines and then the a

1726
01:04:43,510 --> 01:04:48,880
wtl if I said the NBN s father basically

1727
01:04:47,350 --> 01:04:50,799
injects frames over-the-air

1728
01:04:48,880 --> 01:04:51,940
but it's gonna someone know what's going

1729
01:04:50,800 --> 01:04:54,190
on in the back end that's why I said

1730
01:04:51,940 --> 01:04:56,860
we're the firmware stuff is different to

1731
01:04:54,190 --> 01:04:58,360
do it on a host because if you do things

1732
01:04:56,860 --> 01:05:00,130
on a host you've got a process monitor

1733
01:04:58,360 --> 01:05:01,870
Buffa's has got a prop mom that will

1734
01:05:00,130 --> 01:05:03,310
ship and you could have a Windows or a

1735
01:05:01,870 --> 01:05:04,690
unix but and a beast equates to a

1736
01:05:03,310 --> 01:05:07,420
process to fall over else about

1737
01:05:04,690 --> 01:05:08,530
monitoring that way can't do that in

1738
01:05:07,420 --> 01:05:11,230
firmware you've got to be a lot more

1739
01:05:08,530 --> 01:05:11,710
cleverer and so what I've done is I've

1740
01:05:11,230 --> 01:05:14,619
ripped

1741
01:05:11,710 --> 01:05:16,690
of the proc not a re-implemented it's a

1742
01:05:14,619 --> 01:05:20,440
C program and embedded that to run on

1743
01:05:16,690 --> 01:05:24,400
the actual device and then we use a

1744
01:05:20,440 --> 01:05:26,200
tunnel so Ali proxy a connection to

1745
01:05:24,400 --> 01:05:28,810
connect to the device so that I can

1746
01:05:26,200 --> 01:05:30,240
control it from remotely I'm very

1747
01:05:28,810 --> 01:05:32,680
conscious of my time and father J's

1748
01:05:30,240 --> 01:05:34,868
crash detection is difficult that's

1749
01:05:32,680 --> 01:05:37,270
basically the important thing is just

1750
01:05:34,869 --> 01:05:39,700
this sort of C++ program it sits on the

1751
01:05:37,270 --> 01:05:42,009
host side not on the W neck it literally

1752
01:05:39,700 --> 01:05:43,839
just runs on the iOS platform and it

1753
01:05:42,010 --> 01:05:46,150
monitors the device to see if it's if

1754
01:05:43,839 --> 01:05:48,549
it's crashed yet it does that because if

1755
01:05:46,150 --> 01:05:51,070
the device ever resets it'll basically

1756
01:05:48,550 --> 01:05:52,720
wipe out my patch because it gets

1757
01:05:51,070 --> 01:05:56,770
reinstalled it happens very very quickly

1758
01:05:52,720 --> 01:05:58,500
so I then reinstall it as by running a

1759
01:05:56,770 --> 01:06:02,430
mem control script from within my

1760
01:05:58,500 --> 01:06:04,990
process monitor with those things done

1761
01:06:02,430 --> 01:06:05,500
you should be good just set off and go

1762
01:06:04,990 --> 01:06:07,540
first

1763
01:06:05,500 --> 01:06:10,330
it's probably the start of your problems

1764
01:06:07,540 --> 01:06:11,740
because there are problems with silent

1765
01:06:10,330 --> 01:06:15,279
memory corruptions what you corrupt is

1766
01:06:11,740 --> 01:06:17,470
not necessarily what actually caused the

1767
01:06:15,280 --> 01:06:19,720
the crash the crash may happen sometime

1768
01:06:17,470 --> 01:06:21,310
later especially on an embedded device

1769
01:06:19,720 --> 01:06:23,080
because we don't have the kind of memory

1770
01:06:21,310 --> 01:06:24,339
protections you have in a UNIX process

1771
01:06:23,080 --> 01:06:26,109
we owe you've written a bad dress behind

1772
01:06:24,339 --> 01:06:28,359
you you're over all you want to write

1773
01:06:26,109 --> 01:06:30,160
the dress zero acid ram yeah fine no

1774
01:06:28,359 --> 01:06:32,049
problems whatsoever you want to trash

1775
01:06:30,160 --> 01:06:34,359
over that I'm quite happy to let you do

1776
01:06:32,050 --> 01:06:36,640
that so you do have a lot more problems

1777
01:06:34,359 --> 01:06:38,259
in reproducing crashes if a crash is

1778
01:06:36,640 --> 01:06:40,330
reproducible that's a really good candy

1779
01:06:38,260 --> 01:06:42,130
if it's not reproducible don't waste the

1780
01:06:40,330 --> 01:06:44,500
time move on because it's just hard at

1781
01:06:42,130 --> 01:06:45,970
this point and so I put a link down to a

1782
01:06:44,500 --> 01:06:47,589
really really good paper from last

1783
01:06:45,970 --> 01:06:49,169
year's end DSS called

1784
01:06:47,589 --> 01:06:52,029
what you corrupt is not what you crash

1785
01:06:49,170 --> 01:06:54,280
that really keep slavery what's going on

1786
01:06:52,030 --> 01:06:56,710
I'll rush it through to my end because

1787
01:06:54,280 --> 01:06:58,089
my exploit their part is really really

1788
01:06:56,710 --> 01:07:01,060
one slide and I'm not even talking about

1789
01:06:58,089 --> 01:07:03,029
exploit dev because at this point you've

1790
01:07:01,060 --> 01:07:06,190
tamed the double eunuch you've installed

1791
01:07:03,030 --> 01:07:08,200
if you basically if you reverse engineer

1792
01:07:06,190 --> 01:07:10,570
that you've got code run or not capable

1793
01:07:08,200 --> 01:07:13,210
of hockey and anything you want you've

1794
01:07:10,570 --> 01:07:15,099
got candidate crashes and then you could

1795
01:07:13,210 --> 01:07:17,290
go at your normal exploit process

1796
01:07:15,099 --> 01:07:20,410
because this is like hockey in the 1990s

1797
01:07:17,290 --> 01:07:22,119
computer there's no it ASL are there's

1798
01:07:20,410 --> 01:07:22,779
no doubt there's none of those things in

1799
01:07:22,119 --> 01:07:25,150
there

1800
01:07:22,779 --> 01:07:26,650
not carries in there it is really K so

1801
01:07:25,150 --> 01:07:29,079
you find a buffer overflow you've got

1802
01:07:26,650 --> 01:07:31,809
you've got execute access that part's

1803
01:07:29,079 --> 01:07:33,909
actually quite nice from there you could

1804
01:07:31,809 --> 01:07:36,609
turn around a pivot and start thinking

1805
01:07:33,909 --> 01:07:38,019
well I could face the host because I've

1806
01:07:36,609 --> 01:07:39,848
had that ever since the first part the

1807
01:07:38,019 --> 01:07:41,799
access once I've got cord running on the

1808
01:07:39,849 --> 01:07:43,689
W neck I could use it and turn around

1809
01:07:41,799 --> 01:07:45,459
defense the host from there because they

1810
01:07:43,689 --> 01:07:48,999
just don't expect it to happen that way

1811
01:07:45,459 --> 01:07:51,098
it causes a lot of crashes it because an

1812
01:07:48,999 --> 01:07:53,198
awful lot of reboots on your iOS machine

1813
01:07:51,099 --> 01:07:55,209
but it is a really good way of finding

1814
01:07:53,199 --> 01:07:56,439
just how flaky that stuff is because

1815
01:07:55,209 --> 01:07:58,868
most device driver software does not

1816
01:07:56,439 --> 01:08:00,219
expect to be talking to a hostile device

1817
01:07:58,869 --> 01:08:04,390
it's that simple

1818
01:08:00,219 --> 01:08:06,999
my last light is basically to wrap up

1819
01:08:04,390 --> 01:08:09,368
where I started off I started with the

1820
01:08:06,999 --> 01:08:13,779
real-world impacts of Mac Mac a virus

1821
01:08:09,369 --> 01:08:16,119
malware and basically there's this huge

1822
01:08:13,779 --> 01:08:18,069
market that sprang up you can go to 0 DM

1823
01:08:16,118 --> 01:08:20,738
if you've got a full chain exploit the

1824
01:08:18,069 --> 01:08:22,630
way that been emini did its allegedly

1825
01:08:20,738 --> 01:08:25,299
worth you have six-figure sums and stuff

1826
01:08:22,630 --> 01:08:26,650
like that there's a reason for that the

1827
01:08:25,299 --> 01:08:28,509
people who are buying this stuff are not

1828
01:08:26,649 --> 01:08:30,638
nice people they're doing rather nasty

1829
01:08:28,509 --> 01:08:32,618
things I hope I put that in perspective

1830
01:08:30,639 --> 01:08:34,659
there's definitely bad things going on

1831
01:08:32,618 --> 01:08:36,250
there are good things as well it's been

1832
01:08:34,658 --> 01:08:38,920
used here this kind of model has been

1833
01:08:36,250 --> 01:08:40,960
used to in today yeah in to intercept

1834
01:08:38,920 --> 01:08:42,730
people traffic is it's been used to

1835
01:08:40,960 --> 01:08:44,739
intercept smugglers and poachers and

1836
01:08:42,729 --> 01:08:47,198
that's that's good I think we probably

1837
01:08:44,738 --> 01:08:49,448
all support those kind of things but

1838
01:08:47,198 --> 01:08:50,710
it's also been used to attack the civil

1839
01:08:49,448 --> 01:08:52,178
rights of people it's been used to

1840
01:08:50,710 --> 01:08:53,920
undermine to enlist of people like that

1841
01:08:52,179 --> 01:08:55,690
so what are you going to ask you and

1842
01:08:53,920 --> 01:08:56,949
it's if you remember nothing else about

1843
01:08:55,689 --> 01:09:00,339
this talk and they went on way too long

1844
01:08:56,948 --> 01:09:02,379
is that I'd like to ask you if you ever

1845
01:09:00,339 --> 01:09:05,109
get involved in stuff like this don't

1846
01:09:02,380 --> 01:09:06,670
sell your exploits to creeps it's that

1847
01:09:05,109 --> 01:09:07,659
simple by all means sell them I own

1848
01:09:06,670 --> 01:09:10,979
these finer market

1849
01:09:07,658 --> 01:09:12,809
don't sell them to creeps thank you

1850
01:09:10,979 --> 01:09:15,909
[Applause]

1851
01:09:12,810 --> 01:09:15,909
[Music]

