1
00:00:09,059 --> 00:00:12,900
thank you thank you

2
00:00:12,900 --> 00:00:15,820
ICU re: enjoy

3
00:00:15,820 --> 00:00:21,310
for few minutes I would today about
securing a 50-year-old missus

4
00:00:21,310 --> 00:00:25,430
and this is our

5
00:00:25,430 --> 00:00:30,779
missus I guess very painful found out
during a recess

6
00:00:30,779 --> 00:00:34,350
gonna be talking about Visual Basic 66
or

7
00:00:34,350 --> 00:00:38,629
for specifically about rivers
engineering official 6

8
00:00:38,629 --> 00:00:41,850
which turned out to be room headache

9
00:00:41,850 --> 00:00:47,710
decided to call see my name is very much
like

10
00:00:47,710 --> 00:00:51,239
I work for Seyfert incorporated which is

11
00:00:51,239 --> 00:00:56,250
start-up in the United States and durian

12
00:00:56,250 --> 00:01:00,060
from Netherlands work on the same box as
well

13
00:01:00,060 --> 00:01:07,439
developers and I just feel right now

14
00:01:07,439 --> 00:01:11,530
after gloria steinem parents just as
excited as we are up

15
00:01:11,530 --> 00:01:14,530
and gonna start up with

16
00:01:14,530 --> 00:01:18,340
jump back in time know how many people
in there are actually

17
00:01:18,340 --> 00:01:22,859
something we haven't even had never seen
mine sweeper

18
00:01:22,859 --> 00:01:26,369
for anyone here who never played
minesweeper

19
00:01:26,369 --> 00:01:34,149
I got I am actually I admit they crept

20
00:01:34,149 --> 00:01:37,420
screenshots from the interweb somewhere
I haven't seen mine sweeper miss of my

21
00:01:37,420 --> 00:01:38,740
mother fish

22
00:01:38,740 --> 00:01:43,319
housing people should know arm never
back in the 1990s

23
00:01:43,319 --> 00:01:47,609
descriptions from when this 95 dust-up

24
00:01:47,609 --> 00:01:51,270
and with Visual Basic 6 for almost
nothing ever

25
00:01:51,270 --> 00:01:55,920
back in 1998 when Visual Basic 6 first
release from

26
00:01:55,920 --> 00:01:59,119
Microsoft its be

27
00:01:59,119 --> 00:02:02,659
it was one of the the first languishes
really easily

28
00:02:02,659 --> 00:02:06,579
develop greeeeat the cations missionary

29
00:02:06,579 --> 00:02:12,060
up to based even trippin applications
and

30
00:02:12,060 --> 00:02:16,569
well interesting thing about this a bit
66 was declared unsupported

31
00:02:16,569 --> 00:02:19,610
in 2008 replaced by but not

32
00:02:19,610 --> 00:02:24,340
as a development language which is
particularly

33
00:02:24,340 --> 00:02:28,380
interesting because wellesley area of

34
00:02:28,380 --> 00:02:32,090
Visual Basic 6 male version XD over

35
00:02:32,090 --> 00:02:37,240
arm I think to declare that support in
2008 was a

36
00:02:37,240 --> 00:02:40,760
stomach is to try to actually get rid
the at

37
00:02:40,760 --> 00:02:44,140
DC stay created their own and they
didn't really minutes

38
00:02:44,140 --> 00:02:47,690
up until today since they were

39
00:02:47,690 --> 00:02:50,830
tell you about Visual Basic 6 it just
wasn't there still around

40
00:02:50,830 --> 00:02:56,200
and still causing another licensing

41
00:02:56,200 --> 00:02:59,690
six dead we find all the cool actually

42
00:02:59,690 --> 00:03:04,320
agrees with us in preparing this talk I
was searching for

43
00:03:04,320 --> 00:03:08,500
the TPA patients planning with Visual
Basic 6 like arm

44
00:03:08,500 --> 00:03:11,880
and such information with 6 actually
rather

45
00:03:11,880 --> 00:03:15,580
found a diet called vegan

46
00:03:15,580 --> 00:03:19,660
before 6 which in the top results that
Google

47
00:03:19,660 --> 00:03:23,230
gifts you when you search sixes arm for

48
00:03:23,230 --> 00:03:26,540
other 6 entries me that was a

49
00:03:26,540 --> 00:03:29,549
proved six actually sort of that

50
00:03:29,549 --> 00:03:34,570
but well let's start at the beginning
right

51
00:03:34,570 --> 00:03:38,430
Visual Basic 6 yes great

52
00:03:38,430 --> 00:03:42,180
for writing Melbourne as it's really
really hard to analyzed

53
00:03:42,180 --> 00:03:47,100
her to reverse engineer for the sex we
cannot not very usual

54
00:03:47,100 --> 00:03:50,470
to use in up 63 even language

55
00:03:50,470 --> 00:03:53,560
to create Miller as it is

56
00:03:53,560 --> 00:03:57,260
can pain are ready to develop but

57
00:03:57,260 --> 00:04:01,230
the worst some members out in the wild

58
00:04:01,230 --> 00:04:04,750
being pretty successfully infected
machines back in

59
00:04:04,750 --> 00:04:08,079
2000 election from 2000 to 2010 the
first

60
00:04:08,079 --> 00:04:11,420
very well-known creature

61
00:04:11,420 --> 00:04:15,930
the sword was to catch a warm in 2000
which

62
00:04:15,930 --> 00:04:18,820
physically youth nicer because she's
your friend

63
00:04:18,820 --> 00:04:22,500
to get people to click a link which
would download

64
00:04:22,500 --> 00:04:25,610
a specific executable K

65
00:04:25,610 --> 00:04:28,700
when the person executed at excusable

66
00:04:28,700 --> 00:04:33,849
it will try to delete the wings 33 the
system32 directory

67
00:04:33,850 --> 00:04:37,419
30 people say that the swarm died out
pretty fast solely

68
00:04:37,419 --> 00:04:40,750
because it was so bad the code and had
so many books in there to the wouldn't

69
00:04:40,750 --> 00:04:42,380
run correctly when in fact emissions

70
00:04:42,380 --> 00:04:46,400
but that wasn't last Melbourne to
mention that was

71
00:04:46,400 --> 00:04:49,860
a second one in 2005 that kept in tumors

72
00:04:49,860 --> 00:04:53,730
industry busy was called Color and
spread through MSN Messenger

73
00:04:53,730 --> 00:04:57,100
sending out links don't people to
install a specific piece of

74
00:04:57,100 --> 00:05:00,310
and it's just enough it was just up
there too download

75
00:05:00,310 --> 00:05:03,990
for the Miller so it would spread like a
warm but

76
00:05:03,990 --> 00:05:08,570
mitterrand infected machine with a
different piece Miller and

77
00:05:08,570 --> 00:05:11,750
theory's going that with vb6

78
00:05:11,750 --> 00:05:15,530
which is limited in terms of

79
00:05:15,530 --> 00:05:19,729
development well with CRC you have way
more possibilities

80
00:05:19,729 --> 00:05:23,280
think this is the that's what was used
on other

81
00:05:23,280 --> 00:05:26,430
and third creature could show you

82
00:05:26,430 --> 00:05:30,720
which was a 2000 worse the change a warm
which is actually

83
00:05:30,720 --> 00:05:34,630
similar mother was also warm spring for
the network and

84
00:05:34,630 --> 00:05:40,090
downloading different executed since
like the system this was

85
00:05:40,090 --> 00:05:44,729
particularly interesting for me as I my
short period worked for a company who

86
00:05:44,729 --> 00:05:45,729
had an incident

87
00:05:45,729 --> 00:05:50,440
with exactly that now we're in the
network as someone you know I

88
00:05:50,440 --> 00:05:55,240
was working for an anti-virus company
before they regularly have

89
00:05:55,240 --> 00:05:59,780
interesting incidents concerning moment
specifically interesting about that

90
00:05:59,780 --> 00:06:00,150
piece

91
00:06:00,150 --> 00:06:03,650
was that it would spread through

92
00:06:03,650 --> 00:06:06,880
company shares it with place executed
shares

93
00:06:06,880 --> 00:06:11,160
with a folder icon most likely to the
windscreen

94
00:06:11,160 --> 00:06:14,220
and there for your people

95
00:06:14,220 --> 00:06:17,400
into double clicking that the folder to
see what's in there and

96
00:06:17,400 --> 00:06:22,260
in fact for the system's executing under
that's insane

97
00:06:22,260 --> 00:06:25,259
all these were in the 2000's like

98
00:06:25,259 --> 00:06:28,440
you might know that after 2010 there was
no more

99
00:06:28,440 --> 00:06:32,139
very mention widespread warm infection
anywhere

100
00:06:32,139 --> 00:06:35,180
after I think Conficker worm was a penis

101
00:06:35,180 --> 00:06:39,530
dying out two different reasons

102
00:06:39,530 --> 00:06:42,560
and well the singing

103
00:06:42,560 --> 00:06:46,110
Sims account for Visual Basic 6 Miller
like for last year's

104
00:06:46,110 --> 00:06:49,610
we haven't seen any widespread Visual
Basics number anymore

105
00:06:49,610 --> 00:06:53,090
but was up there now is Visual Basic
crypt is

106
00:06:53,090 --> 00:06:56,590
who not necessary do you things but

107
00:06:56,590 --> 00:07:00,240
protect evil execute it was from being
analyzed so

108
00:07:00,240 --> 00:07:05,110
arm plan to you know that this big six
numbers that there anymore

109
00:07:05,110 --> 00:07:08,780
you may ask there we find other

110
00:07:08,780 --> 00:07:12,360
Visual Basic 6 sadly not did its

111
00:07:12,360 --> 00:07:15,479
still out there and taking and keeping
people busy

112
00:07:15,479 --> 00:07:18,610
you will find out for this position that
there's

113
00:07:18,610 --> 00:07:23,440
very high lech very high demand the
analyzes

114
00:07:23,440 --> 00:07:27,020
tools are helpless to dissect is a busy
6 Miller

115
00:07:27,020 --> 00:07:30,909
which is just not present yet but
ritually

116
00:07:30,909 --> 00:07:35,539
believe that they will be necessary in
the future irises

117
00:07:35,539 --> 00:07:39,789
Center on the analysis of a specific
richter

118
00:07:39,789 --> 00:07:43,009
which what's the what's years ago

119
00:07:43,009 --> 00:07:46,229
by your item no which Russian or

120
00:07:46,229 --> 00:07:49,699
Eastern Europeans cookie which
physically

121
00:07:49,699 --> 00:07:53,020
takes on their custom Miller

122
00:07:53,020 --> 00:07:57,349
and reps into Visual Basic Script which
is compared with anything

123
00:07:57,349 --> 00:08:01,250
anti analyzes features a dick
televangelists features

124
00:08:01,250 --> 00:08:04,650
which have been 30 a sandbox

125
00:08:04,650 --> 00:08:07,669
or specific antivirus products or
specific other

126
00:08:07,669 --> 00:08:10,740
online analysts but from and

127
00:08:10,740 --> 00:08:14,280
during this having a repre- which is
really hard to analyze

128
00:08:14,280 --> 00:08:18,289
and adding antilles features which makes
it impossible

129
00:08:18,289 --> 00:08:22,240
to have begin into this is Miller makes
the very

130
00:08:22,240 --> 00:08:26,770
engines technique

131
00:08:26,770 --> 00:08:29,710
right so 101

132
00:08:29,710 --> 00:08:33,200
official Basic 6 official Basic 6 well

133
00:08:33,200 --> 00:08:40,660
official basic invented 1991 Microsoft
and then

134
00:08:40,660 --> 00:08:43,780
in 1998 official 5&6

135
00:08:43,780 --> 00:08:47,310
release and this was the latest version
official

136
00:08:47,310 --> 00:08:51,450
that this actually

137
00:08:51,450 --> 00:08:55,100
this nowadays net its

138
00:08:55,100 --> 00:08:58,230
my so that is

139
00:08:58,230 --> 00:09:02,020
love to that analyzes official Basic 6

140
00:09:02,020 --> 00:09:05,630
has been created released fifty years
ago

141
00:09:05,630 --> 00:09:09,240
session a lot of tools that's why folks

142
00:09:09,240 --> 00:09:12,940
so this is an example

143
00:09:12,940 --> 00:09:16,280
native so there are two options official

144
00:09:16,280 --> 00:09:19,620
xx you compile one option is to create
if

145
00:09:19,620 --> 00:09:23,470
and one option grid and in this

146
00:09:23,470 --> 00:09:26,880
example you can see a simple hello world

147
00:09:26,880 --> 00:09:30,110
on the right and bass the just

148
00:09:30,110 --> 00:09:35,920
goes a message box shows hello world WEA

149
00:09:35,920 --> 00:09:40,080
cedar so to compare we have

150
00:09:40,080 --> 00:09:43,570
readable x86 assembly I'm sure

151
00:09:43,570 --> 00:09:47,410
not sure if bid

152
00:09:47,410 --> 00:09:50,600
like a novel compared at least you can
read

153
00:09:50,600 --> 00:09:55,210
and then we aren't and basically you get

154
00:09:55,210 --> 00:10:02,380
this stuff

155
00:10:02,380 --> 00:10:05,820
his to the curb is a good nothing
ridiculously

156
00:10:05,820 --> 00:10:09,269
one by the another its later on gets
translated

157
00:10:09,269 --> 00:10:12,870
by the and the PVM 6

158
00:10:12,870 --> 00:10:16,930
T you know the 26 virtual machine

159
00:10:16,930 --> 00:10:20,009
which is a DLL think it's loaded with
every

160
00:10:20,009 --> 00:10:23,709
6 executed and there's nothing else than
taking the bytecode

161
00:10:23,709 --> 00:10:27,170
from excusable and translating its to

162
00:10:27,170 --> 00:10:30,800
the v6 number min mom yea right

163
00:10:30,800 --> 00:10:35,009
worked for up 'cause and cost a

164
00:10:35,009 --> 00:10:38,630
specific handler which applies to this
specific

165
00:10:38,630 --> 00:10:42,589
money home this whole process is

166
00:10:42,589 --> 00:10:46,560
in principle a really simple but in fact
if you have a bunch

167
00:10:46,560 --> 00:10:49,940
but couldn't try to figure out what it's
doing it is really hard

168
00:10:49,940 --> 00:10:53,319
to translated to useful information

169
00:10:53,319 --> 00:10:57,430
this is specifically for one single fact
which is

170
00:10:57,430 --> 00:11:02,329
Microsoft never took the chance to
actually documents their

171
00:11:02,329 --> 00:11:06,670
26 mnemonics so you have like

172
00:11:06,670 --> 00:11:10,019
some hundreds of

173
00:11:10,019 --> 00:11:13,250
up codes to the place 662 60 cals

174
00:11:13,250 --> 00:11:16,399
which are not documented there

175
00:11:16,399 --> 00:11:19,459
yes a very sparse documentation

176
00:11:19,459 --> 00:11:24,139
on the vb6 translation tables which will
talk about today

177
00:11:24,139 --> 00:11:28,870
rich just lists all the possible ok
coats

178
00:11:28,870 --> 00:11:31,870
and their index in the translation
tables

179
00:11:31,870 --> 00:11:35,360
was sometimes gives you a hint what
these

180
00:11:35,360 --> 00:11:39,810
up code is actually doing just basins
name but you can't call it the

181
00:11:39,810 --> 00:11:40,610
documentation

182
00:11:40,610 --> 00:11:44,519
city and actually translate the peacoat
back to its name onyx

183
00:11:44,519 --> 00:11:47,560
within to figure out what's the man
likes to

184
00:11:47,560 --> 00:11:50,760
which as well as a really x86 like a
normal

185
00:11:50,760 --> 00:11:54,410
you can actually figure out what they're
considering with pickled that's not the

186
00:11:54,410 --> 00:11:54,730
case

187
00:11:54,730 --> 00:11:58,029
so with you seen this graphic here for
short introduction

188
00:11:58,029 --> 00:12:01,329
is upside a pic in the into the peacoat

189
00:12:01,329 --> 00:12:04,339
and how this by stream of city code

190
00:12:04,339 --> 00:12:08,079
is said in 26 different tables inside

191
00:12:08,079 --> 00:12:10,230
of the view 6 p.m.

192
00:12:10,230 --> 00:12:14,150
and these tables is translated to call
in to the right handler

193
00:12:14,150 --> 00:12:17,320
for the for the specific instruction

194
00:12:17,320 --> 00:12:20,470
is executed so every instruction has
dedicated tender

195
00:12:20,470 --> 00:12:24,650
this is a virtual machine right so

196
00:12:24,650 --> 00:12:28,920
to at so yes official Basic 6

197
00:12:28,920 --> 00:12:31,970
virtual machine well the slots

198
00:12:31,970 --> 00:12:35,230
exported functions like for example

199
00:12:35,230 --> 00:12:38,390
RTC message box you see about on them

200
00:12:38,390 --> 00:12:42,130
but if you do any of these instructions

201
00:12:42,130 --> 00:12:45,280
and if these functions the only he will
get

202
00:12:45,280 --> 00:12:51,000
like fires Firestone like strings but
this

203
00:12:51,000 --> 00:12:55,050
like know that nation all and as Marion

204
00:12:55,050 --> 00:12:58,250
both about 800 instructions

205
00:12:58,250 --> 00:13:01,430
of which only a few hundred

206
00:13:01,430 --> 00:13:05,520
actually use in think about because

207
00:13:05,520 --> 00:13:11,070
and only thing we found was like a
listing of goats and

208
00:13:11,070 --> 00:13:14,610
the index and some russians comment

209
00:13:14,610 --> 00:13:18,390
version thing so here

210
00:13:18,390 --> 00:13:23,290
you see function called collation pro
collisions basically

211
00:13:23,290 --> 00:13:26,450
when official 6 met this executed

212
00:13:26,450 --> 00:13:30,550
you get like the data structure to
dysfunction

213
00:13:30,550 --> 00:13:34,450
like because the pressure and then

214
00:13:34,450 --> 00:13:38,300
uses population function because
exported so

215
00:13:38,300 --> 00:13:41,360
weekend get the address and

216
00:13:41,360 --> 00:13:44,710
in the bottom you see that tables 00

217
00:13:44,710 --> 00:13:49,110
that's the first lookup table 6 from
this table

218
00:13:49,110 --> 00:13:53,770
you see right you see if

219
00:13:53,770 --> 00:13:56,780
the table function pointers so distant

220
00:13:56,780 --> 00:14:00,810
56 function pointers in there at the
Ferry NCC

221
00:14:00,810 --> 00:14:03,970
handlers for getting

222
00:14:03,970 --> 00:14:09,740
into the other five tables so when you
have one bite of gold

223
00:14:09,740 --> 00:14:13,180
goes directly into the first table if to
buy

224
00:14:13,180 --> 00:14:17,000
goth the first looks up the second

225
00:14:17,000 --> 00:14:20,260
jump table and then goes them

226
00:14:20,260 --> 00:14:26,440
the French from there so that's how it
is like function

227
00:14:26,440 --> 00:14:30,550
here you see instruction handler

228
00:14:30,550 --> 00:14:34,029
this example which which is an

229
00:14:34,029 --> 00:14:37,940
sec so

230
00:14:37,940 --> 00:14:41,450
which UCS have highlighted highlighted
yessi

231
00:14:41,450 --> 00:14:44,910
here you see by so

232
00:14:44,910 --> 00:14:49,640
all the time the Sea Point for which
instruction this

233
00:14:49,640 --> 00:14:53,140
which they so this instruction x5

234
00:14:53,140 --> 00:14:57,470
lights 1s4 the goats 442

235
00:14:57,470 --> 00:15:01,510
here and so

236
00:15:01,510 --> 00:15:05,339
and then when instruction has pushed sec

237
00:15:05,339 --> 00:15:10,720
easy pointers be specified and the next
tell us:

238
00:15:10,720 --> 00:15:14,440
used to jump to the next instruction

239
00:15:14,440 --> 00:15:20,070
Gary C so the first instructions move EX

240
00:15:20,070 --> 00:15:23,680
from the you at point see and

241
00:15:23,680 --> 00:15:28,470
this basically loading 32-bit from the
bicycle

242
00:15:28,470 --> 00:15:33,470
from instruction and then it pushes and
this was the

243
00:15:33,470 --> 00:15:37,010
thing this instruction so there's

244
00:15:37,010 --> 00:15:40,709
on lots of these instructions and the
only way

245
00:15:40,709 --> 00:15:43,880
to identified by looking at the name

246
00:15:43,880 --> 00:15:46,980
she gets from boats listing by

247
00:15:46,980 --> 00:15:50,250
refers so 402

248
00:15:50,250 --> 00:15:53,650
later Irish musician

249
00:15:53,650 --> 00:15:57,160
all the instruction over interesting

250
00:15:57,160 --> 00:16:01,350
basement for this instruction if I want

251
00:16:01,350 --> 00:16:05,529
its value like sec and I have to look at

252
00:16:05,529 --> 00:16:11,670
32-bit answer ride

253
00:16:11,670 --> 00:16:16,660
so this is prepares for example to show
you

254
00:16:16,660 --> 00:16:20,440
in practice how the translation look
like they're actually how the binary

255
00:16:20,440 --> 00:16:24,330
itself would look like inside and they I
got mine

256
00:16:24,330 --> 00:16:27,450
phenomena programming skills &

257
00:16:27,450 --> 00:16:32,330
16 managed to write message a

258
00:16:32,330 --> 00:16:35,540
pretty archer because first I had to
find the

259
00:16:35,540 --> 00:16:38,670
the ID for for Visual Basic

260
00:16:38,670 --> 00:16:42,090
which is was like other support in 2008
not easy

261
00:16:42,090 --> 00:16:45,410
I also the other Neil

262
00:16:45,410 --> 00:16:50,670
still to them now in we get this message
box up front and running and

263
00:16:50,670 --> 00:16:53,580
everything it does is popping up hello
world and then you can click OK and

264
00:16:53,580 --> 00:16:54,520
applications

265
00:16:54,520 --> 00:16:58,600
so we can have a look at the handler of
one single button in the application

266
00:16:58,600 --> 00:17:02,950
let's start with the completion

267
00:17:02,950 --> 00:17:08,170
mother mentioned before there's a
Decompiler for vb6 because which works

268
00:17:08,170 --> 00:17:11,600
moralist good shows kinda weird

269
00:17:11,600 --> 00:17:14,960
because the you were here you see the
handler which

270
00:17:14,960 --> 00:17:19,400
possessive nothing else than and this is
young instruction other than their

271
00:17:19,400 --> 00:17:23,450
intensification and if you Lotus example

272
00:17:23,450 --> 00:17:27,840
into your either pro or your preferred
December the broker you will see

273
00:17:27,840 --> 00:17:31,190
this piece of x86 code and

274
00:17:31,190 --> 00:17:34,610
a lot of data so everything that the

275
00:17:34,610 --> 00:17:38,250
application does for starting up is
loading the Heather

276
00:17:38,250 --> 00:17:42,870
after view 6 excusable you can see if
they're pushing in second and calling

277
00:17:42,870 --> 00:17:46,540
further two main function which will
execute the excusable

278
00:17:46,540 --> 00:17:49,950
his shirt screenshot of the

279
00:17:49,950 --> 00:17:53,360
mentioned it before actually there's
some very useful scripts for

280
00:17:53,360 --> 00:17:56,440
the pro which you can download an RCA
think

281
00:17:56,440 --> 00:17:59,850
that can split up the Visual Basic 6
Heather for you

282
00:17:59,850 --> 00:18:04,310
and aidid with comments to the different
objects in

283
00:18:04,310 --> 00:18:07,480
inside her but if you have a closer look
now

284
00:18:07,480 --> 00:18:11,050
on be Heather or

285
00:18:11,050 --> 00:18:14,950
120 of said that's pushed onto the stick
humane

286
00:18:14,950 --> 00:18:18,210
it shows you the her structures and

287
00:18:18,210 --> 00:18:22,750
with a little bit of googling and
looking up custom documentation you can

288
00:18:22,750 --> 00:18:23,320
find out

289
00:18:23,320 --> 00:18:26,650
which pointers appointing you through
executables

290
00:18:26,650 --> 00:18:29,650
is important to understand that little
busy is

291
00:18:29,650 --> 00:18:33,170
event-driven so physically with you have
this objects

292
00:18:33,170 --> 00:18:37,790
and vans you have like an object should
be a button which is waiting for invent

293
00:18:37,790 --> 00:18:40,870
be some clicking the button which then
calls into

294
00:18:40,870 --> 00:18:44,140
handler executing the code is but

295
00:18:44,140 --> 00:18:48,299
services in doing this you have to
identify all the different objects

296
00:18:48,299 --> 00:18:51,460
inside have two tables further located
in the Heather

297
00:18:51,460 --> 00:18:56,299
to identify the Associated events and
the associate head nurse for events for

298
00:18:56,299 --> 00:18:56,830
the object

299
00:18:56,830 --> 00:19:00,570
so going through their please see the
searches

300
00:19:00,570 --> 00:19:04,520
you have and ice walk down for the
excusable

301
00:19:04,520 --> 00:19:08,799
to mention it just on his once
instruction but you have to work done on

302
00:19:08,799 --> 00:19:09,309
the Heather

303
00:19:09,309 --> 00:19:12,570
to finally locate the of of the handler

304
00:19:12,570 --> 00:19:15,640
of this one button in certification

305
00:19:15,640 --> 00:19:19,059
which is in stocks down here the 41

306
00:19:19,059 --> 00:19:22,070
8 0 which then looks like

307
00:19:22,070 --> 00:19:26,799
this so this is all the court is
actually

308
00:19:26,799 --> 00:19:30,299
executions application and everything
else is just

309
00:19:30,299 --> 00:19:34,790
at the for getting the application to
start you can see how the script

310
00:19:34,790 --> 00:19:38,360
thankfully already translated the
peacoat

311
00:19:38,360 --> 00:19:42,070
to useful name on it and it shows you
causing and

312
00:19:42,070 --> 00:19:45,460
instruction which consists of four bytes
and

313
00:19:45,460 --> 00:19:48,820
28 and TX forget result

314
00:19:48,820 --> 00:19:52,320
instruction which consists of one way so
these three bites are

315
00:19:52,320 --> 00:19:58,290
all the code this is executable me

316
00:19:58,290 --> 00:20:01,170
so less else's

317
00:20:01,170 --> 00:20:05,520
approaches so before so like

318
00:20:05,520 --> 00:20:08,570
looking at the sample and we were trying
other

319
00:20:08,570 --> 00:20:13,370
ways analyzes base

320
00:20:13,370 --> 00:20:16,460
were so we found some existing

321
00:20:16,460 --> 00:20:20,000
tools projects there's the compiler

322
00:20:20,000 --> 00:20:23,390
the compiler so basically it translates

323
00:20:23,390 --> 00:20:27,030
try to translate he goes back into

324
00:20:27,030 --> 00:20:30,940
readable should 6 with right

325
00:20:30,940 --> 00:20:34,690
burger which is debugger

326
00:20:34,690 --> 00:20:38,540
made by some Spanish guys ten years ago
it works

327
00:20:38,540 --> 00:20:43,910
also precious some I'm interesting under
the bed at ten years ago still the most

328
00:20:43,910 --> 00:20:44,950
accurate tool that's

329
00:20:44,950 --> 00:20:48,920
available yeah so if ideas

330
00:20:48,920 --> 00:20:55,240
and then there are some guys this a lot
of Basic 6

331
00:20:55,240 --> 00:20:58,660
that introduces publicly so it's
probably somewhere

332
00:20:58,660 --> 00:21:04,270
if company I guess nothing you can

333
00:21:04,270 --> 00:21:07,510
so we introduce you you

334
00:21:07,510 --> 00:21:11,560
most sophisticated

335
00:21:11,560 --> 00:21:18,710
solution 3 physically came up for their
own

336
00:21:18,710 --> 00:21:22,200
idea take a little break but

337
00:21:22,200 --> 00:21:25,440
we started this results basically back

338
00:21:25,440 --> 00:21:30,060
in October last year we first found the
problem

339
00:21:30,060 --> 00:21:33,480
last year and we tried lot for

340
00:21:33,480 --> 00:21:37,350
analyzing is executed like we

341
00:21:37,350 --> 00:21:41,540
we got their hands on three samples of
arm

342
00:21:41,540 --> 00:21:46,320
group that message boxes of the specific
route to mention before

343
00:21:46,320 --> 00:21:49,460
and so is it a lot I

344
00:21:49,460 --> 00:21:53,180
now will get you through the Phil
compilation all the classical

345
00:21:53,180 --> 00:21:57,360
knows the process that we tried and why
the failed whether or not

346
00:21:57,360 --> 00:22:00,600
successful mister cause of within
dynamic analysis

347
00:22:00,600 --> 00:22:01,940
indifference and boxes

348
00:22:01,940 --> 00:22:06,190
in virtual machines in an real machines
and

349
00:22:06,190 --> 00:22:09,419
anything and if they don't the regret
other wouldn't

350
00:22:09,419 --> 00:22:13,759
actually tell us what the cryptid circle
was not necessarily

351
00:22:13,759 --> 00:22:17,049
to analyze the message probably came out
afterwards

352
00:22:17,049 --> 00:22:20,679
but the crib to the was returned a
message but and

353
00:22:20,679 --> 00:22:24,159
anything either the crap from the

354
00:22:24,159 --> 00:22:27,690
dynamic approach was just

355
00:22:27,690 --> 00:22:31,789
a lot like descriptor with that lot of
activity

356
00:22:31,789 --> 00:22:35,700
I'll show you later on a plaza at a lot
of carbs code

357
00:22:35,700 --> 00:22:39,019
for home entering static analysis

358
00:22:39,019 --> 00:22:42,210
us for the name conoces it produced a
lot of crap

359
00:22:42,210 --> 00:22:45,679
like I can see in the screenshot will
start more than 100

360
00:22:45,679 --> 00:22:49,169
threats and X them again for

361
00:22:49,169 --> 00:22:56,149
very few reason on the next step to
which I laughter

362
00:22:56,149 --> 00:22:59,889
dynamic analysis didn't tell us what to
cook dealers was the compilation

363
00:22:59,889 --> 00:23:03,009
of course as mentioned there's the
compiler out there on the market

364
00:23:03,009 --> 00:23:06,220
was actually does a pretty good job in
the compelling applications

365
00:23:06,220 --> 00:23:09,779
so if you have enough to skate from
Krypton sample

366
00:23:09,779 --> 00:23:13,200
from BB sixty good you will most likely
be happy with the compiler

367
00:23:13,200 --> 00:23:18,379
because you can previews rather
beautiful little busy code arm

368
00:23:18,379 --> 00:23:21,840
which doesn't apply to could not the
skit simple with

369
00:23:21,840 --> 00:23:25,090
more than eighty percent of curbs
couldn't so

370
00:23:25,090 --> 00:23:28,100
the other this panel of time is a
Decompiler

371
00:23:28,100 --> 00:23:31,230
without actually figuring out what the

372
00:23:31,230 --> 00:23:35,879
code was doing we tried with missus not
static analysis

373
00:23:35,879 --> 00:23:39,250
on the code and trying to figure out our
way through

374
00:23:39,250 --> 00:23:43,320
the could sample and actually

375
00:23:43,320 --> 00:23:46,649
it reopened their was damn thing

376
00:23:46,649 --> 00:23:50,220
pretty soon as the winner functions call
lenore

377
00:23:50,220 --> 00:23:53,269
interesting Prometheus past were
handlers

378
00:23:53,269 --> 00:23:56,399
registers and no exceptions happening
and no

379
00:23:56,399 --> 00:24:01,220
nothing interesting going on so actually
over this

380
00:24:01,220 --> 00:24:04,269
static analysis didn't get us very far
in our

381
00:24:04,269 --> 00:24:07,700
top and of course

382
00:24:07,700 --> 00:24:11,039
which I play debugging that sample which

383
00:24:11,039 --> 00:24:14,869
after all most fun

384
00:24:14,869 --> 00:24:21,279
analyzes I'm there might be some fans by
the printer and

385
00:24:21,279 --> 00:24:25,289
12 insult anyone of these but actually
was re

386
00:24:25,289 --> 00:24:29,669
disappoint using on the fringe xx let me
get this in a second

387
00:24:29,669 --> 00:24:33,200
so we tried debugging they might think
the Brookings

388
00:24:33,200 --> 00:24:37,179
actually Canadian any sort of execute
because you really get to see

389
00:24:37,179 --> 00:24:40,289
that mister what's happening in their
which yet imagine

390
00:24:40,289 --> 00:24:43,330
doesn't apply to 26 peacoat because

391
00:24:43,330 --> 00:24:46,789
everything that you're debugging is the
the v6 version

392
00:24:46,789 --> 00:24:50,369
machine those growing bytecode from the
execute them

393
00:24:50,369 --> 00:24:53,869
and trying to translate it and call and
there afterwards so what you would have

394
00:24:53,869 --> 00:24:54,360
to do

395
00:24:54,360 --> 00:24:58,690
for successfully debugging these
applications is reverse engineer

396
00:24:58,690 --> 00:25:01,879
all the handlers the call and figure out
how they interact

397
00:25:01,879 --> 00:25:04,980
with each other which is never ends up

398
00:25:04,980 --> 00:25:08,139
so which item or debugging

399
00:25:08,139 --> 00:25:11,659
without traversing the missions in and

400
00:25:11,659 --> 00:25:14,899
encountered a of course

401
00:25:14,899 --> 00:25:18,799
much as I'd the pickers in the sample
but a lot of protection as a script

402
00:25:18,799 --> 00:25:19,200
written

403
00:25:19,200 --> 00:25:22,629
and tidy back heard Service Code it was

404
00:25:22,629 --> 00:25:26,490
obfuscated its probably had a bunch of
other

405
00:25:26,490 --> 00:25:30,360
anti features to including in and take a
cool feature

406
00:25:30,360 --> 00:25:34,049
and dizzle was really a

407
00:25:34,049 --> 00:25:37,570
very messed up situation handing it in
the debugger

408
00:25:37,570 --> 00:25:42,080
as encountered a lot of exceptions in
there I think we have one more

409
00:25:42,080 --> 00:25:46,049
Shin so I think it was two weeks ago

410
00:25:46,049 --> 00:25:51,049
when I finally tried yeah they're pretty
brokerage the for was my favorite

411
00:25:51,049 --> 00:25:56,230
to say on the HelloWorld sample to and
see how it would look like in the real

412
00:25:56,230 --> 00:25:56,940
world someone

413
00:25:56,940 --> 00:26:02,129
guess what the debugger trust which
brought me to the conclusion that maybe

414
00:26:02,129 --> 00:26:02,539
it's not

415
00:26:02,539 --> 00:26:06,110
copter giving trouble to a pro but for
itself

416
00:26:06,110 --> 00:26:09,669
so trying to execute a

417
00:26:09,669 --> 00:26:13,000
peacoat hello world in the pro wouldn't
work

418
00:26:13,000 --> 00:26:16,580
or so much which would be exceptions

419
00:26:16,580 --> 00:26:20,440
with happened either pro or would happen
caused by the critter

420
00:26:20,440 --> 00:26:24,549
anyway with ending up in the banking

421
00:26:24,549 --> 00:26:27,830
and eventually found the way not to
analyst descriptor

422
00:26:27,830 --> 00:26:31,649
but to bypasses so

423
00:26:31,649 --> 00:26:34,899
together we came up with the trick

424
00:26:34,899 --> 00:26:38,539
to Pasha sample to load

425
00:26:38,539 --> 00:26:42,260
a customized kernel32 inimical 33

426
00:26:42,260 --> 00:26:46,559
deal which would contain breakpoints on

427
00:26:46,559 --> 00:26:49,980
all the points and says excusable word
could

428
00:26:49,980 --> 00:26:54,840
eventually start a sup process
containing the final message box

429
00:26:54,840 --> 00:26:58,389
which eventually the successful putting
a break point

430
00:26:58,389 --> 00:27:01,559
on resume threat so I figured out the
simple with

431
00:27:01,559 --> 00:27:05,490
unpack the could sample at some point

432
00:27:05,490 --> 00:27:09,169
trade in the process their own call
reason for it if you recall

433
00:27:09,169 --> 00:27:12,779
to start the and picked executed so
touching

434
00:27:12,779 --> 00:27:16,080
the custom deal with the breakpoint on

435
00:27:16,080 --> 00:27:19,740
that if you recall eventually holds the
whole process

436
00:27:19,740 --> 00:27:22,859
make it possible to attach a debugger
after all the

437
00:27:22,859 --> 00:27:24,780
and debugging or whatever and T

438
00:27:24,780 --> 00:27:28,210
analyzes what's happening and we will be
able to get hold

439
00:27:28,210 --> 00:27:31,380
of the final executable but this was
still not

440
00:27:31,380 --> 00:27:35,270
tell us what the actual crypt it was
doing which the object for

441
00:27:35,270 --> 00:27:38,860
headache so which had a bit more on

442
00:27:38,860 --> 00:27:42,210
with a magic and finally came up with an
idea

443
00:27:42,210 --> 00:27:45,280
her to actually kick

444
00:27:45,280 --> 00:27:48,670
yes that could so basically we tried

445
00:27:48,670 --> 00:27:52,950
things their prices didn't really work
so

446
00:27:52,950 --> 00:27:56,780
start working which this is back to the
most

447
00:27:56,780 --> 00:28:00,520
intelligence

448
00:28:00,520 --> 00:28:04,760
solution said

449
00:28:04,760 --> 00:28:08,520
so what interest in

450
00:28:08,520 --> 00:28:12,870
our sample and is trying to avoid like
the buggers

451
00:28:12,870 --> 00:28:18,610
sandbox on first

452
00:28:18,610 --> 00:28:21,660
I'm interested in what isn't executed

453
00:28:21,660 --> 00:28:25,980
so you can see like for example

454
00:28:25,980 --> 00:28:29,220
some of the approaches create

455
00:28:29,220 --> 00:28:33,690
things but that doesn't really tell you
much

456
00:28:33,690 --> 00:28:36,960
has been so if

457
00:28:36,960 --> 00:28:41,590
all access to all the instructions
executed you can

458
00:28:41,590 --> 00:28:44,970
basin that analysis is this here

459
00:28:44,970 --> 00:28:49,630
this function is called here so

460
00:28:49,630 --> 00:28:53,580
that's one of the our girls we also want
to like

461
00:28:53,580 --> 00:28:57,910
monitor events like if I this created

462
00:28:57,910 --> 00:29:03,520
happening if like to follow it or see
want

463
00:29:03,520 --> 00:29:06,820
and most importantly we won't

464
00:29:06,820 --> 00:29:10,230
to see strings memory and x86

465
00:29:10,230 --> 00:29:13,670
which is being ran executed

466
00:29:13,670 --> 00:29:16,700
so especially strings interesting

467
00:29:16,700 --> 00:29:19,240
because for example

468
00:29:19,240 --> 00:29:22,050
sometimes this kind of tools

469
00:29:22,050 --> 00:29:27,150
in america processes and see if like
biting for example

470
00:29:27,150 --> 00:29:30,220
and if it is they don't run

471
00:29:30,220 --> 00:29:33,680
so in this case it would be useful like
three by 10

472
00:29:33,680 --> 00:29:37,220
okay by running working

473
00:29:37,220 --> 00:29:40,280
so these articles our to

474
00:29:40,280 --> 00:29:43,460
and I will now within 2

475
00:29:43,460 --> 00:29:47,060
how is developed it what it does and how
this

476
00:29:47,060 --> 00:29:50,370
so compacted earlier

477
00:29:50,370 --> 00:29:53,850
6 jump mind

478
00:29:53,850 --> 00:29:57,320
basically want to do is

479
00:29:57,320 --> 00:30:02,680
12 instrument instruction thats so

480
00:30:02,680 --> 00:30:06,430
month instrument every instruction and
therefore get like

481
00:30:06,430 --> 00:30:10,390
see affluent XQ and

482
00:30:10,390 --> 00:30:14,780
Logan file so the done all the

483
00:30:14,780 --> 00:30:19,150
destruction names other excuse than
excluding also

484
00:30:19,150 --> 00:30:22,780
she and just looking at

485
00:30:22,780 --> 00:30:26,080
think file we do that so

486
00:30:26,080 --> 00:30:29,140
god-like look forward few on I think

487
00:30:29,140 --> 00:30:32,250
and it's just filled with action names

488
00:30:32,250 --> 00:30:38,430
if you and sorted and they fly Council
instructions

489
00:30:38,430 --> 00:30:41,650
you see that for example this russian

490
00:30:41,650 --> 00:30:45,410
both ring use 10,000 times and

491
00:30:45,410 --> 00:30:48,470
so base in this

492
00:30:48,470 --> 00:30:51,620
we found that sexy from the eight

493
00:30:51,620 --> 00:30:54,730
unique instructions that's only around
to

494
00:30:54,730 --> 00:30:57,750
being used in this particular sample

495
00:30:57,750 --> 00:31:01,700
and we were like going through the locks
like

496
00:31:01,700 --> 00:31:05,750
see instructions are used solo que

497
00:31:05,750 --> 00:31:09,450
open file lots ring call a function

498
00:31:09,450 --> 00:31:13,090
and decided that these interesting
because they actually might

499
00:31:13,090 --> 00:31:16,860
represent what's happening because for
example

500
00:31:16,860 --> 00:31:21,800
if you've 2 int are being added to each
other was once to

501
00:31:21,800 --> 00:31:26,980
really interesting at the moment so
impressive statistics

502
00:31:26,980 --> 00:31:33,700
found a few dozen instructions with for
which he wrote specific such numbers

503
00:31:33,700 --> 00:31:38,290
so for example for open construction
like a small

504
00:31:38,290 --> 00:31:42,940
function which just dump

505
00:31:42,940 --> 00:31:49,090
up the files being open so here in the
bottom

506
00:31:49,090 --> 00:31:52,290
see two homers one folks people

507
00:31:52,290 --> 00:31:56,060
and one sure-fire and one for loading

508
00:31:56,060 --> 00:31:59,360
sure some seek with so Mac

509
00:31:59,360 --> 00:32:04,350
like shows like okay for this
instruction

510
00:32:04,350 --> 00:32:08,210
report this soda fun

511
00:32:08,210 --> 00:32:11,980
section and the failure that's being
reference

512
00:32:11,980 --> 00:32:15,260
so then we get to how we

513
00:32:15,260 --> 00:32:18,570
function because you can just just

514
00:32:18,570 --> 00:32:21,970
fresh so

515
00:32:21,970 --> 00:32:25,850
started by by making copy of

516
00:32:25,850 --> 00:32:29,660
all the pension and basically what you
do is

517
00:32:29,660 --> 00:32:33,350
replace the function pointers in the six
jumper cables with

518
00:32:33,350 --> 00:32:37,240
our front function pointers which Justin

519
00:32:37,240 --> 00:32:40,300
assemblies which

520
00:32:40,300 --> 00:32:44,450
goals our own reporting function this
here

521
00:32:44,450 --> 00:32:49,440
and after this function is executed it
goes back to the original

522
00:32:49,440 --> 00:32:53,590
so just that's a little bit of Archos

523
00:32:53,590 --> 00:32:57,600
within their and basin that

524
00:32:57,600 --> 00:33:00,980
instrumental thing so to do that

525
00:33:00,980 --> 00:33:03,900
restore the current she

526
00:33:03,900 --> 00:33:07,260
then we call this function we get some

527
00:33:07,260 --> 00:33:10,390
yes so as you can see bottom

528
00:33:10,390 --> 00:33:13,410
says yes I so that's actually reference

529
00:33:13,410 --> 00:33:17,550
yes I think by and

530
00:33:17,550 --> 00:33:21,310
use is beyond it's based

531
00:33:21,310 --> 00:33:25,370
just point so in the

532
00:33:25,370 --> 00:33:29,320
in this hammers you can do anything you
want you can see you can

533
00:33:29,320 --> 00:33:32,700
modify if you'd like we don't

534
00:33:32,700 --> 00:33:37,320
modify anything just just into interpret

535
00:33:37,320 --> 00:33:41,150
look but it's possible and then

536
00:33:41,150 --> 00:33:45,540
afterwards regional states restore we
jumped at all

537
00:33:45,540 --> 00:33:49,470
or snow handler and life goes on so that
space

538
00:33:49,470 --> 00:33:53,900
interns to and

539
00:33:53,900 --> 00:33:56,920
should already see here with everybody
function

540
00:33:56,920 --> 00:34:00,180
with song we made like a printer

541
00:34:00,180 --> 00:34:03,630
like function which makes he said

542
00:34:03,630 --> 00:34:06,700
all the information like to come for

543
00:34:06,700 --> 00:34:10,560
our two so for example actually

544
00:34:10,560 --> 00:34:14,580
particular in Visual Basic 6 to
datatypes

545
00:34:14,580 --> 00:34:18,220
1s the string its Unicode string

546
00:34:18,220 --> 00:34:21,919
and it has linked pippen so normally

547
00:34:21,919 --> 00:34:24,929
this would be if you want

548
00:34:24,929 --> 00:34:28,710
dump this with the normal print some you

549
00:34:28,710 --> 00:34:32,669
yes the reference point getting so

550
00:34:32,669 --> 00:34:36,610
we made our own printer which here

551
00:34:36,610 --> 00:34:39,730
yes like

552
00:34:39,730 --> 00:34:43,040
specific format throwing

553
00:34:43,040 --> 00:34:46,530
think this case is so you see person

554
00:34:46,530 --> 00:34:50,629
the in the for and

555
00:34:50,629 --> 00:34:55,399
this one comes pointers

556
00:34:55,399 --> 00:34:59,160
variant generic wrapper around

557
00:34:59,160 --> 00:35:02,780
any kind value so it can

558
00:35:02,780 --> 00:35:06,370
years think the character or 0.2 or
staying

559
00:35:06,370 --> 00:35:09,410
if

560
00:35:09,410 --> 00:35:14,990
just whatever is in there according to
its and then we have

561
00:35:14,990 --> 00:35:19,120
custom XM it's just a wrapper around
thing

562
00:35:19,120 --> 00:35:22,730
so you just a memory address in

563
00:35:22,730 --> 00:35:26,220
like this is from this this and a DOM

564
00:35:26,220 --> 00:35:31,610
it's not like a nice XM everything

565
00:35:31,610 --> 00:35:35,000
this exit I mean

566
00:35:35,000 --> 00:35:39,600
misreported basically goes into the log
file

567
00:35:39,600 --> 00:35:43,960
where we get now yes the

568
00:35:43,960 --> 00:35:46,970
infamous lock file the beginning

569
00:35:46,970 --> 00:35:52,500
I think we started off with 115
megabytes look for

570
00:35:52,500 --> 00:35:55,870
which SMS nursing alliance with

571
00:35:55,870 --> 00:35:59,660
up cause for sure I think about 166
million

572
00:35:59,660 --> 00:36:03,550
entries which is a connected to the

573
00:36:03,550 --> 00:36:07,900
message overhead Visual Basic 6 produces
for this if you can't be connected to

574
00:36:07,900 --> 00:36:08,130
the

575
00:36:08,130 --> 00:36:11,680
trip to rich thats overhead to the
overhead and first

576
00:36:11,680 --> 00:36:14,960
do as much as possible to hide the few

577
00:36:14,960 --> 00:36:18,690
things that is actually doing so

578
00:36:18,690 --> 00:36:22,380
for automating freshen up the block
while arm

579
00:36:22,380 --> 00:36:25,910
we use to Google Sandbox to

580
00:36:25,910 --> 00:36:30,960
generate and extract look phosphorous to
at least safe to work for

581
00:36:30,960 --> 00:36:34,940
copying executed you know for every
execution we want to do

582
00:36:34,940 --> 00:36:38,940
so we cook five our approach and just
exchanged

583
00:36:38,940 --> 00:36:42,460
DLL the cool with usually checked into
running process

584
00:36:42,460 --> 00:36:46,510
with the custom you know the roads to
monitor TV program

585
00:36:46,510 --> 00:36:50,230
and also at the cuckoo do extract

586
00:36:50,230 --> 00:36:53,900
the lock file that was written as a she

587
00:36:53,900 --> 00:36:58,640
the much mention and going out these
look for us

588
00:36:58,640 --> 00:37:01,750
we another was love time for

589
00:37:01,750 --> 00:37:05,660
looking into the millions instructions
we find other

590
00:37:05,660 --> 00:37:09,440
so basically instead of using

591
00:37:09,440 --> 00:37:12,490
goes the low which we

592
00:37:12,490 --> 00:37:16,160
place ordeal in the coop project

593
00:37:16,160 --> 00:37:19,250
and things inside December inside

594
00:37:19,250 --> 00:37:20,330
she

595
00:37:20,330 --> 00:37:23,430
and reinstruct to to

596
00:37:23,430 --> 00:37:27,500
bring logfile which is created back to
the house

597
00:37:27,500 --> 00:37:32,440
for dinner so basically

598
00:37:32,440 --> 00:37:35,869
some on the results

599
00:37:35,869 --> 00:37:39,000
this is so

600
00:37:39,000 --> 00:37:44,230
mostly fun some obfuscation which like
with which you can see

601
00:37:44,230 --> 00:37:50,550
in the the think about growth lot
mission Megan

602
00:37:50,550 --> 00:37:54,740
so there's couple of and i cant features

603
00:37:54,740 --> 00:37:57,859
and some other interesting so

604
00:37:57,859 --> 00:38:01,240
there's like three ways call external
functions

605
00:38:01,240 --> 00:38:06,660
the first one is lead with a stable

606
00:38:06,660 --> 00:38:11,470
and this actually only to should Basic 6

607
00:38:11,470 --> 00:38:15,700
stuff itself molotov actually uses then
there's

608
00:38:15,700 --> 00:38:19,730
than dynamic resource functions this is
a feature

609
00:38:19,730 --> 00:38:22,880
official Basic 6 well the sample us

610
00:38:22,880 --> 00:38:26,280
like and grits friction

611
00:38:26,280 --> 00:38:30,359
and then the group's runtime: before we
saw things simple

612
00:38:30,359 --> 00:38:34,150
so you get stuff like reshoot threat

613
00:38:34,150 --> 00:38:38,109
said W right virtual memory that

614
00:38:38,109 --> 00:38:41,260
Mexico that exit threat it's like

615
00:38:41,260 --> 00:38:44,280
you can see someone with with the name

616
00:38:44,280 --> 00:38:47,660
means because only one character
difference with the original

617
00:38:47,660 --> 00:38:50,990
by the iPhones

618
00:38:50,990 --> 00:38:54,480
fun you were wondering about the

619
00:38:54,480 --> 00:38:57,490
string up this cation that the author of
the cookbook

620
00:38:57,490 --> 00:39:00,990
actually intended as he's just like
replacing

621
00:39:00,990 --> 00:39:04,210
one letter in the word that might change
in

622
00:39:04,210 --> 00:39:07,500
hash resold inexcusable

623
00:39:07,500 --> 00:39:11,520
but actually doesn't make the API name
and readable

624
00:39:11,520 --> 00:39:15,720
yes that some other interesting stuff

625
00:39:15,720 --> 00:39:18,780
the sample excuse x86

626
00:39:18,780 --> 00:39:23,369
within the Pico and it does this by

627
00:39:23,369 --> 00:39:29,210
so this look may be a bit dark cocaine

628
00:39:29,210 --> 00:39:33,010
so at the very top you see highlighted

629
00:39:33,010 --> 00:39:36,650
a you foresee something something this
is actually

630
00:39:36,650 --> 00:39:41,270
hex x86 so

631
00:39:41,270 --> 00:39:44,430
what they do is they the concert like
texting then

632
00:39:44,430 --> 00:39:47,960
the the and exit Wednesday

633
00:39:47,960 --> 00:39:51,460
and call it at the top at the bottom

634
00:39:51,460 --> 00:39:55,910
you see this think something's from the
function

635
00:39:55,910 --> 00:39:59,680
this people they use this function to go

636
00:39:59,680 --> 00:40:03,800
x86 just crossed and in this case is
just like

637
00:40:03,800 --> 00:40:09,170
get current process these process and

638
00:40:09,170 --> 00:40:12,210
so so with this technique

639
00:40:12,210 --> 00:40:15,330
like executing x86

640
00:40:15,330 --> 00:40:19,369
at runtime they try to avoid

641
00:40:19,369 --> 00:40:23,239
static detection things

642
00:40:23,239 --> 00:40:26,739
because yeah because

643
00:40:26,739 --> 00:40:30,219
you you're analyzing a pick-up and then

644
00:40:30,219 --> 00:40:33,979
officer sent excuse x86

645
00:40:33,979 --> 00:40:37,319
so you this see

646
00:40:37,319 --> 00:40:40,640
and ultimately themselves x86 loves

647
00:40:40,640 --> 00:40:44,029
and so yet

648
00:40:44,029 --> 00:40:47,319
the log files pretty

649
00:40:47,319 --> 00:40:50,920
biggest analyze all things right

650
00:40:50,920 --> 00:40:56,420
writing get rid is and then

651
00:40:56,420 --> 00:40:59,759
something something else peculiar so

652
00:40:59,759 --> 00:41:03,410
at some point make their first stop for

653
00:41:03,410 --> 00:41:07,190
creates and then they use create threats
to create new

654
00:41:07,190 --> 00:41:10,709
just a cold one function so

655
00:41:10,709 --> 00:41:14,539
in this case is they go in and processes
right here

656
00:41:14,539 --> 00:41:18,029
so the hundredth created

657
00:41:18,029 --> 00:41:21,950
that we saw earlier it's just one thing
she got every time

658
00:41:21,950 --> 00:41:25,420
just obfuscation yes

659
00:41:25,420 --> 00:41:29,979
so our initial goal was to

660
00:41:29,979 --> 00:41:32,030
find out

661
00:41:32,030 --> 00:41:34,780
how to implement feature

662
00:41:34,780 --> 00:41:39,820
because it doesn't this

663
00:41:39,820 --> 00:41:42,880
yet to be identified but

664
00:41:42,880 --> 00:41:46,170
we have lots of luck now in on it then

665
00:41:46,170 --> 00:41:51,220
I'm sure we'll find it now working on an
automated

666
00:41:51,220 --> 00:41:57,530
text analysis approach work anyway the
things we found out about the critters

667
00:41:57,530 --> 00:42:00,900
thats headache did we mention bb6

668
00:42:00,900 --> 00:42:03,950
headache much he understood that message

669
00:42:03,950 --> 00:42:08,290
the curtain itself is richest only a
rapper

670
00:42:08,290 --> 00:42:12,730
that bill eventually after hundreds of
rats and two different suppresses

671
00:42:12,730 --> 00:42:18,260
call the original executed with respect
to the the packard self

672
00:42:18,260 --> 00:42:24,490
start off as if he was executed inside
the six shuttle crew is new for a

673
00:42:24,490 --> 00:42:28,110
new process into this process it will

674
00:42:28,110 --> 00:42:31,800
unpack a third executed

675
00:42:31,800 --> 00:42:35,280
if you say so which is another CRC

676
00:42:35,280 --> 00:42:38,670
first could some furniture which is
packed with P

677
00:42:38,670 --> 00:42:42,870
compact so it's actually readable x86
arm

678
00:42:42,870 --> 00:42:46,000
in the second step which then eventually

679
00:42:46,000 --> 00:42:49,230
after on Perkins & Marie will

680
00:42:49,230 --> 00:42:53,010
have the final executable unpacked and
call into the packed

681
00:42:53,010 --> 00:42:56,270
executable vb6 reference self is like

682
00:42:56,270 --> 00:42:59,530
one layer official Basic 6 with usual

683
00:42:59,530 --> 00:43:02,990
6 wrapped and analyzes features one
layer

684
00:43:02,990 --> 00:43:06,280
of P compact from not sure if it's on

685
00:43:06,280 --> 00:43:09,880
original P compact or a customers to
Asian

686
00:43:09,880 --> 00:43:13,690
and and finally unpack the original
executed

687
00:43:13,690 --> 00:43:17,530
so in that show

688
00:43:17,530 --> 00:43:21,000
we created analyzing sixth

689
00:43:21,000 --> 00:43:24,400
the project is currently not online yet

690
00:43:24,400 --> 00:43:27,570
I guess I will do it soon somebody gets

691
00:43:27,570 --> 00:43:33,150
some maybe may build thank you for
joining

692
00:43:33,150 --> 00:43:33,600
hope you like

