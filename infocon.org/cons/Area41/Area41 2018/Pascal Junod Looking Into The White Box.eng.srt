1
00:00:02,240 --> 00:00:09,059
so welcome everybody here my name is

2
00:00:07,080 --> 00:00:13,139
Pascal Gino and I have been a

3
00:00:09,059 --> 00:00:15,680
cryptographer now for a long time hoping

4
00:00:13,139 --> 00:00:18,779
between the academic world the industry

5
00:00:15,680 --> 00:00:26,549
and I'm currently working for large

6
00:00:18,779 --> 00:00:34,680
social network but kids mostly use so it

7
00:00:26,550 --> 00:00:37,649
doesn't work it works so I propose

8
00:00:34,680 --> 00:00:40,200
myself to to speak about a little bit

9
00:00:37,649 --> 00:00:42,660
about white-box cryptography so I'm

10
00:00:40,200 --> 00:00:47,730
going to introduce the subjects for a

11
00:00:42,660 --> 00:00:51,419
real world scenario then give you a few

12
00:00:47,730 --> 00:00:53,038
notions about the white-box crypto I'm

13
00:00:51,420 --> 00:00:54,719
going to speak a bit about security

14
00:00:53,039 --> 00:00:57,629
models because white box crypto is doing

15
00:00:54,719 --> 00:00:59,820
cryptography in a very specific security

16
00:00:57,629 --> 00:01:02,519
model I will give you also an academic

17
00:00:59,820 --> 00:01:04,019
viewpoint because the the current view

18
00:01:02,520 --> 00:01:07,080
of the academic world is pretty

19
00:01:04,019 --> 00:01:11,280
different of what what we do in the in

20
00:01:07,080 --> 00:01:14,400
the industry and then I'm going to give

21
00:01:11,280 --> 00:01:17,220
you a kind of list of recipes to how to

22
00:01:14,400 --> 00:01:19,619
build secure enough white box crypto if

23
00:01:17,220 --> 00:01:23,789
you need to what you have to care about

24
00:01:19,619 --> 00:01:27,119
what you have to watch and eventually I

25
00:01:23,790 --> 00:01:28,920
will speak about the difficulties of

26
00:01:27,119 --> 00:01:31,140
doing white box crypto even if you have

27
00:01:28,920 --> 00:01:33,390
a white box script or primitive that

28
00:01:31,140 --> 00:01:35,340
it's for long known that you have a

29
00:01:33,390 --> 00:01:37,320
working implementation of a

30
00:01:35,340 --> 00:01:41,670
cryptographic modes or cryptographic

31
00:01:37,320 --> 00:01:45,839
protocol so let's go to our standard

32
00:01:41,670 --> 00:01:47,369
scenario this is pretty much common so

33
00:01:45,840 --> 00:01:50,130
let's assume that you have a mobile

34
00:01:47,369 --> 00:01:53,460
mobile application that would like to

35
00:01:50,130 --> 00:01:55,949
talk to to some kind of back-end let's

36
00:01:53,460 --> 00:01:57,839
say that you at the moment what you

37
00:01:55,950 --> 00:02:01,590
don't have a lot of authentication maybe

38
00:01:57,840 --> 00:02:04,649
at the signup procedure let's assume

39
00:02:01,590 --> 00:02:07,079
that you would like to secure a bit

40
00:02:04,649 --> 00:02:10,530
design a procedure with respect for

41
00:02:07,079 --> 00:02:13,709
instance to register mass registering of

42
00:02:10,530 --> 00:02:19,710
accounts that could be used by births

43
00:02:13,710 --> 00:02:21,450
by spammers or I don't know maybe you

44
00:02:19,710 --> 00:02:23,310
don't like to use captures because

45
00:02:21,450 --> 00:02:25,799
CAPTCHAs are not that sick you and I

46
00:02:23,310 --> 00:02:26,540
knowing for people so what what can you

47
00:02:25,800 --> 00:02:30,180
do

48
00:02:26,540 --> 00:02:32,489
so it means you can have no security of

49
00:02:30,180 --> 00:02:34,920
course you just send a request

50
00:02:32,490 --> 00:02:37,050
maybe that whicker's will be encrypted

51
00:02:34,920 --> 00:02:39,480
using a TLS channel maybe you are going

52
00:02:37,050 --> 00:02:41,700
to use a certificate pinning but as you

53
00:02:39,480 --> 00:02:44,250
all know it's very easy to bypass

54
00:02:41,700 --> 00:02:49,200
certificate pinning and it's extremely

55
00:02:44,250 --> 00:02:52,320
easy to reverse engineer the the API the

56
00:02:49,200 --> 00:02:55,170
backend API so it mean that for almost

57
00:02:52,320 --> 00:02:59,220
free a bad guy could just figure out the

58
00:02:55,170 --> 00:03:01,530
backend API and just call it from from

59
00:02:59,220 --> 00:03:04,170
from anywhere so what you would like to

60
00:03:01,530 --> 00:03:06,840
have is a bit more insurance assurance

61
00:03:04,170 --> 00:03:09,619
that this comes from you mobile

62
00:03:06,840 --> 00:03:13,320
application and not from from a bad guy

63
00:03:09,620 --> 00:03:15,120
so what you could do is to say yourself

64
00:03:13,320 --> 00:03:17,910
ok I'm going to authenticate those

65
00:03:15,120 --> 00:03:21,150
requests cryptographically authenticate

66
00:03:17,910 --> 00:03:24,020
in that case it means that you will have

67
00:03:21,150 --> 00:03:27,630
to embed a secret cryptographic key

68
00:03:24,020 --> 00:03:30,300
proving that allowing the mobile

69
00:03:27,630 --> 00:03:35,549
application to sign or to authenticate

70
00:03:30,300 --> 00:03:37,860
those those queries so what you are

71
00:03:35,550 --> 00:03:39,360
going to do maybe is to hard-code a

72
00:03:37,860 --> 00:03:40,020
cryptographic key within your

73
00:03:39,360 --> 00:03:41,820
application

74
00:03:40,020 --> 00:03:43,530
and you that cryptographic key so it

75
00:03:41,820 --> 00:03:47,640
could be a symmetric key or a symmetric

76
00:03:43,530 --> 00:03:50,670
one maybe it's just a secret share with

77
00:03:47,640 --> 00:03:54,660
your back on and use a cryptographic Mac

78
00:03:50,670 --> 00:03:57,239
to to sign or to authenticate your

79
00:03:54,660 --> 00:03:58,770
requests so you are going to hard-code a

80
00:03:57,240 --> 00:04:01,200
key value in your application you are

81
00:03:58,770 --> 00:04:04,260
going to use maybe the storm dollar

82
00:04:01,200 --> 00:04:06,089
crypto library that your that you have

83
00:04:04,260 --> 00:04:09,179
at your disposal that is offered by the

84
00:04:06,090 --> 00:04:13,530
system open ssl on android maybe common

85
00:04:09,180 --> 00:04:16,709
Krypton on iOS but but then what what

86
00:04:13,530 --> 00:04:18,988
happens if you your Mac key gets stolen

87
00:04:16,709 --> 00:04:20,880
so basically the on address sorry that

88
00:04:18,988 --> 00:04:23,489
would like to replicate this effort just

89
00:04:20,880 --> 00:04:25,500
has to find the hard-coded cryptographic

90
00:04:23,490 --> 00:04:27,090
key within your application and use it

91
00:04:25,500 --> 00:04:29,430
and it's common crypto

92
00:04:27,090 --> 00:04:32,549
can you can just do exactly the same and

93
00:04:29,430 --> 00:04:38,610
a new time it will cost almost virtually

94
00:04:32,550 --> 00:04:42,690
nothing - to the bad guy so now you can

95
00:04:38,610 --> 00:04:45,180
go even a step further you are going to

96
00:04:42,690 --> 00:04:47,520
browse the web and see that there exist

97
00:04:45,180 --> 00:04:49,860
white box cryptography implementation

98
00:04:47,520 --> 00:04:52,620
for sale pretty expensive there are not

99
00:04:49,860 --> 00:04:55,080
so many vendors but they say that they

100
00:04:52,620 --> 00:04:59,160
offer you some guarantees with respect

101
00:04:55,080 --> 00:05:00,659
to two key extraction meaning that they

102
00:04:59,160 --> 00:05:04,110
are going to offer you the capabilities

103
00:05:00,660 --> 00:05:06,210
or maybe computing a match so they will

104
00:05:04,110 --> 00:05:09,090
give you a blob of software blob of

105
00:05:06,210 --> 00:05:11,190
executed executable code that embeds

106
00:05:09,090 --> 00:05:13,340
that you can personalize you that embed

107
00:05:11,190 --> 00:05:16,500
the secret key and for which it's

108
00:05:13,340 --> 00:05:20,039
claimed to be difficult to walk very

109
00:05:16,500 --> 00:05:23,550
costly to extract that secret key so

110
00:05:20,040 --> 00:05:26,850
cool now you'll have a very nice mobile

111
00:05:23,550 --> 00:05:29,280
application and it pika if we are in on

112
00:05:26,850 --> 00:05:31,710
the Android platform and maybe you have

113
00:05:29,280 --> 00:05:34,320
a dynamic library that embeds some white

114
00:05:31,710 --> 00:05:37,830
box script or native code and that

115
00:05:34,320 --> 00:05:39,870
embeds a secret key within it that is

116
00:05:37,830 --> 00:05:42,090
probably difficult to extract or that

117
00:05:39,870 --> 00:05:47,190
will require a lot of a lot of reverse

118
00:05:42,090 --> 00:05:50,429
engineering work to to extract now what

119
00:05:47,190 --> 00:05:53,880
could be what could do the the adversary

120
00:05:50,430 --> 00:05:55,919
or the bad guy is just not trying to

121
00:05:53,880 --> 00:05:59,280
exploit the secret key but just use the

122
00:05:55,919 --> 00:06:02,490
white box Mike primitive in that case

123
00:05:59,280 --> 00:06:03,210
and use it as a kind of signing Oracle

124
00:06:02,490 --> 00:06:05,970
No

125
00:06:03,210 --> 00:06:08,219
so here are the code and let the secrets

126
00:06:05,970 --> 00:06:10,050
but you can instead of just extract the

127
00:06:08,220 --> 00:06:12,479
secret and use it with Java code you can

128
00:06:10,050 --> 00:06:15,150
just choose that's very obfuscated and

129
00:06:12,479 --> 00:06:17,690
complicated code and use it for the same

130
00:06:15,150 --> 00:06:22,380
purpose so this is an attack that is a

131
00:06:17,690 --> 00:06:24,090
that is a cold code lifting and of

132
00:06:22,380 --> 00:06:27,060
course that is possible and for the

133
00:06:24,090 --> 00:06:33,840
adversary's still it's it's an attack

134
00:06:27,060 --> 00:06:36,720
that cost not a lot of money so you will

135
00:06:33,840 --> 00:06:39,150
have to go a step further most likely

136
00:06:36,720 --> 00:06:42,120
and to to

137
00:06:39,150 --> 00:06:45,810
makes this white box implementation with

138
00:06:42,120 --> 00:06:47,340
the application so mix how how are we

139
00:06:45,810 --> 00:06:51,080
going to mix I'm going to dispute that

140
00:06:47,340 --> 00:06:54,030
later but the idea is really to have

141
00:06:51,080 --> 00:06:56,070
everything for the business logic of the

142
00:06:54,030 --> 00:06:58,770
mobile application and cryptographic

143
00:06:56,070 --> 00:07:01,290
code embedding securely and varying the

144
00:06:58,770 --> 00:07:05,729
key together and glued together third

145
00:07:01,290 --> 00:07:08,370
that may be so that it's will be

146
00:07:05,730 --> 00:07:11,610
strictly more costly and much more

147
00:07:08,370 --> 00:07:13,440
difficult for for the bad guy to export

148
00:07:11,610 --> 00:07:18,510
the boundaries of the white box crypto

149
00:07:13,440 --> 00:07:20,010
and to use it as a signing Oracle maybe

150
00:07:18,510 --> 00:07:22,409
it will be possible for him with a lot

151
00:07:20,010 --> 00:07:24,349
of efforts a lot of money but that's

152
00:07:22,410 --> 00:07:27,810
really the goal it's he writes to make

153
00:07:24,350 --> 00:07:32,190
the life of the body I more costly more

154
00:07:27,810 --> 00:07:33,840
difficult and this is if you don't have

155
00:07:32,190 --> 00:07:37,980
any secure hardware at your disposal so

156
00:07:33,840 --> 00:07:41,549
any secure element that can hide that my

157
00:07:37,980 --> 00:07:45,630
key then it's pretty much what what you

158
00:07:41,550 --> 00:07:46,910
can do so let's speak a bit about white

159
00:07:45,630 --> 00:07:50,659
box crypto

160
00:07:46,910 --> 00:07:54,900
so essentially white box cryptography

161
00:07:50,660 --> 00:07:58,910
deals not with papers or algorithm but

162
00:07:54,900 --> 00:08:00,659
with implementations that embeds secrets

163
00:07:58,910 --> 00:08:04,350
implementations of cryptographic

164
00:08:00,660 --> 00:08:06,960
algorithm and that are running in what

165
00:08:04,350 --> 00:08:09,240
we call the white box security model

166
00:08:06,960 --> 00:08:12,239
which is logically the most hostile

167
00:08:09,240 --> 00:08:16,610
possible computing environment so I'm

168
00:08:12,240 --> 00:08:20,040
going to to define this a bit more later

169
00:08:16,610 --> 00:08:23,340
and what why is it an interesting

170
00:08:20,040 --> 00:08:25,620
subject because you know what the white

171
00:08:23,340 --> 00:08:28,349
box security model is really the

172
00:08:25,620 --> 00:08:30,180
relevant security model when you are in

173
00:08:28,350 --> 00:08:33,780
certain scenarios and in actually in

174
00:08:30,180 --> 00:08:36,060
many scenarios in many real-world ones

175
00:08:33,780 --> 00:08:37,980
and it is not always the one we think

176
00:08:36,059 --> 00:08:42,000
about when we are thinking about about

177
00:08:37,980 --> 00:08:44,270
crypto and I found also quite

178
00:08:42,000 --> 00:08:48,720
interesting to observe that there is a

179
00:08:44,270 --> 00:08:50,130
real none significant gap between the

180
00:08:48,720 --> 00:08:52,680
academic state-of-the-art

181
00:08:50,130 --> 00:08:55,410
and the way how academic

182
00:08:52,680 --> 00:08:58,349
look at this white book security model

183
00:08:55,410 --> 00:09:00,360
and other industry practices so

184
00:08:58,350 --> 00:09:02,730
basically as I said before the white

185
00:09:00,360 --> 00:09:05,790
book security model is very relevant in

186
00:09:02,730 --> 00:09:08,520
practice because hackers work or

187
00:09:05,790 --> 00:09:11,730
crackers of bad guys or adversary work

188
00:09:08,520 --> 00:09:18,050
in that model since the beginning but

189
00:09:11,730 --> 00:09:23,130
mostly might like is he fighting mostly

190
00:09:18,050 --> 00:09:27,420
though this security push or induce the

191
00:09:23,130 --> 00:09:29,189
industry to require such kind of such

192
00:09:27,420 --> 00:09:32,640
kind of secure implementation on crypto

193
00:09:29,190 --> 00:09:36,740
and for instance this was recently even

194
00:09:32,640 --> 00:09:36,740
boosted by the host card emulation

195
00:09:36,770 --> 00:09:42,810
effort so this is basically a way to do

196
00:09:39,870 --> 00:09:45,630
an FC payment so kind of stand on doing

197
00:09:42,810 --> 00:09:48,660
our owing to do NFC payment without any

198
00:09:45,630 --> 00:09:53,430
secure element like a smart card or or

199
00:09:48,660 --> 00:09:56,010
TPM chip for instance and this was also

200
00:09:53,430 --> 00:09:58,290
addressed by other industries like

201
00:09:56,010 --> 00:10:02,010
foreign foreign for instance the content

202
00:09:58,290 --> 00:10:04,650
protection industry deploying software

203
00:10:02,010 --> 00:10:06,720
only diagrams and right so there is some

204
00:10:04,650 --> 00:10:08,610
pressure for for the field for for such

205
00:10:06,720 --> 00:10:11,940
technology which is which still keeps

206
00:10:08,610 --> 00:10:14,430
today a kind of niche technology so if

207
00:10:11,940 --> 00:10:16,920
before you thought that cryptography is

208
00:10:14,430 --> 00:10:19,680
magic because it's a lot of formulas and

209
00:10:16,920 --> 00:10:22,199
and stuff then I can ensure you that

210
00:10:19,680 --> 00:10:24,540
white box crypto is really something

211
00:10:22,200 --> 00:10:27,720
even more magic so magic to the square

212
00:10:24,540 --> 00:10:31,230
even more why because if you are able to

213
00:10:27,720 --> 00:10:33,810
to design and to implement white box

214
00:10:31,230 --> 00:10:36,900
crypto primitive it essentially allows

215
00:10:33,810 --> 00:10:39,300
you to transform an RS symmetric

216
00:10:36,900 --> 00:10:43,050
encryption scheme into a public key

217
00:10:39,300 --> 00:10:45,719
scheme which looks like impossible kind

218
00:10:43,050 --> 00:10:47,339
of magic completely crazy at least or it

219
00:10:45,720 --> 00:10:50,310
could literally would allow you to

220
00:10:47,339 --> 00:10:52,350
transform a Mac asymmetry embedding a

221
00:10:50,310 --> 00:10:55,199
symmetric key in to and a symmetric

222
00:10:52,350 --> 00:10:56,610
digital signature so this sounds very

223
00:10:55,200 --> 00:10:59,640
interesting because

224
00:10:56,610 --> 00:11:03,450
RSA is a costly operation or any other

225
00:10:59,640 --> 00:11:04,740
public primitive is quite costly so if

226
00:11:03,450 --> 00:11:09,149
you manage to

227
00:11:04,740 --> 00:11:12,029
use a very fast transform a very fast

228
00:11:09,149 --> 00:11:14,670
crypto primitive like AES in a public

229
00:11:12,029 --> 00:11:17,550
key scheme that then maybe you can get

230
00:11:14,670 --> 00:11:19,800
rich and get the crypto girl and that's

231
00:11:17,550 --> 00:11:24,079
very funny but you know magic is

232
00:11:19,800 --> 00:11:26,579
sometimes not so magic so we'll see why

233
00:11:24,080 --> 00:11:30,209
let's speak about security models now a

234
00:11:26,580 --> 00:11:32,820
bit more in details so I am going to

235
00:11:30,209 --> 00:11:34,770
speak about black box gray box and white

236
00:11:32,820 --> 00:11:36,570
box security

237
00:11:34,770 --> 00:11:40,560
first of all let's let's speak about

238
00:11:36,570 --> 00:11:42,839
blue box security so this is the model

239
00:11:40,560 --> 00:11:47,880
of the abstraction that have been used

240
00:11:42,839 --> 00:11:50,700
by cryptographers for forever so in that

241
00:11:47,880 --> 00:11:52,850
model the crypto primitives like a yes

242
00:11:50,700 --> 00:11:56,420
or a symmetric encryption scheme

243
00:11:52,850 --> 00:12:00,029
authenticated encryption match public

244
00:11:56,420 --> 00:12:03,209
encryption digital signature they are

245
00:12:00,029 --> 00:12:06,120
just abstracted by black boxes we call

246
00:12:03,209 --> 00:12:09,779
all to them Oracle in the in the crypto

247
00:12:06,120 --> 00:12:12,110
world and basically what is what is a

248
00:12:09,779 --> 00:12:16,439
black box is just a well-defined and

249
00:12:12,110 --> 00:12:20,459
secure API which the adversary respects

250
00:12:16,440 --> 00:12:22,350
so you know when you have the towards

251
00:12:20,459 --> 00:12:25,640
adversary and respect in the same

252
00:12:22,350 --> 00:12:28,910
sentence this should ring a bell

253
00:12:25,640 --> 00:12:35,300
because adversaries don't tend to

254
00:12:28,910 --> 00:12:38,069
respect things but basically this is the

255
00:12:35,300 --> 00:12:40,979
cryptographers I've worked in that model

256
00:12:38,070 --> 00:12:45,020
and defined that model and it's quite

257
00:12:40,980 --> 00:12:47,550
useful because you can very formally

258
00:12:45,020 --> 00:12:50,069
modernize France on for encryption

259
00:12:47,550 --> 00:12:52,439
schemes attacks such as ciphertext only

260
00:12:50,070 --> 00:12:54,690
known plaintext chosen plaintext chosen

261
00:12:52,440 --> 00:12:58,230
ciphertext maybe in a non adaptive

262
00:12:54,690 --> 00:12:59,880
another that way and particularly it

263
00:12:58,230 --> 00:13:02,959
offers some kind of mathematical

264
00:12:59,880 --> 00:13:06,480
framework in which you can prove things

265
00:13:02,959 --> 00:13:09,170
so this is quite useful same for

266
00:13:06,480 --> 00:13:12,600
signature schemes for instance with

267
00:13:09,170 --> 00:13:16,410
attack model existential selective on

268
00:13:12,600 --> 00:13:18,570
reversal forgeries at least black both

269
00:13:16,410 --> 00:13:21,449
the black box security model arose to g4

270
00:13:18,570 --> 00:13:23,970
a very sound and precise framework in

271
00:13:21,450 --> 00:13:25,920
which the mathematic mathematicians and

272
00:13:23,970 --> 00:13:30,510
cryptographers can work to derive

273
00:13:25,920 --> 00:13:32,069
security proofs and the right but of

274
00:13:30,510 --> 00:13:34,890
course this is not the end of the story

275
00:13:32,070 --> 00:13:39,330
because in the middle of the 90s the

276
00:13:34,890 --> 00:13:42,840
academic community has known the great

277
00:13:39,330 --> 00:13:45,180
books security model mainly with papers

278
00:13:42,840 --> 00:13:48,780
by poly culture and Dan Bonilla and

279
00:13:45,180 --> 00:13:50,069
others that have introduced timing

280
00:13:48,780 --> 00:13:54,540
attacks against cryptographic

281
00:13:50,070 --> 00:13:57,540
implementations differential power

282
00:13:54,540 --> 00:13:58,620
analysis on Hardware implementation of

283
00:13:57,540 --> 00:14:00,990
smart cars implementation of

284
00:13:58,620 --> 00:14:03,090
cryptographic algorithms and body

285
00:14:00,990 --> 00:14:05,490
calluses great bus security model has

286
00:14:03,090 --> 00:14:07,590
triggered a lot of academic research and

287
00:14:05,490 --> 00:14:09,660
industrial research because while we

288
00:14:07,590 --> 00:14:13,440
will see this is very relevant in

289
00:14:09,660 --> 00:14:17,670
practice and basically it is defined as

290
00:14:13,440 --> 00:14:19,950
being a strict superset of the blackbox

291
00:14:17,670 --> 00:14:22,680
security so it means that in the gray

292
00:14:19,950 --> 00:14:25,860
box security model your your bad guys

293
00:14:22,680 --> 00:14:28,410
have all the same capabilities than in

294
00:14:25,860 --> 00:14:31,070
the black box one plus additional power

295
00:14:28,410 --> 00:14:35,310
and it's typically this additional power

296
00:14:31,070 --> 00:14:38,120
involves the exploitation of some mostly

297
00:14:35,310 --> 00:14:39,839
physical information about the scheme

298
00:14:38,120 --> 00:14:42,470
implementation so now we are not

299
00:14:39,840 --> 00:14:44,670
speaking only about papers algorithms

300
00:14:42,470 --> 00:14:46,640
and mathematics but we are really

301
00:14:44,670 --> 00:14:48,780
speaking already speaking about

302
00:14:46,640 --> 00:14:54,449
implementations being software hardware

303
00:14:48,780 --> 00:14:56,640
implementations that leak some that

304
00:14:54,450 --> 00:14:59,340
could leak some information which is

305
00:14:56,640 --> 00:15:03,660
correlated to the secrets for instance

306
00:14:59,340 --> 00:15:06,270
it could leak the time it takes to do to

307
00:15:03,660 --> 00:15:09,180
do a secret operation could take a could

308
00:15:06,270 --> 00:15:12,900
leak the power consumption it needs to

309
00:15:09,180 --> 00:15:15,680
require up a secret operation or if you

310
00:15:12,900 --> 00:15:18,959
consider Hardware chips you could have

311
00:15:15,680 --> 00:15:21,660
electromagnetic emanations or optical

312
00:15:18,960 --> 00:15:25,500
emanations sound leakage in certain

313
00:15:21,660 --> 00:15:27,180
setups or so this is all kind of passive

314
00:15:25,500 --> 00:15:29,370
attacks meaning that you will probe the

315
00:15:27,180 --> 00:15:31,739
implementations and for some physical

316
00:15:29,370 --> 00:15:32,430
signal and and get some information that

317
00:15:31,740 --> 00:15:35,160
you can call

318
00:15:32,430 --> 00:15:37,529
right and we saw stone down known

319
00:15:35,160 --> 00:15:40,500
plaintext or chosen plaintext or chosen

320
00:15:37,529 --> 00:15:44,220
ciphertext attack but you can also be a

321
00:15:40,500 --> 00:15:47,370
bit more active and inject false for

322
00:15:44,220 --> 00:15:50,910
instance by glitching the chip or by

323
00:15:47,370 --> 00:15:53,010
using a laser on an ASIC or something

324
00:15:50,910 --> 00:15:56,279
like that and observe the behavior of

325
00:15:53,010 --> 00:15:59,310
the implementation under fault so when

326
00:15:56,279 --> 00:16:00,930
the implementation compute without fault

327
00:15:59,310 --> 00:16:02,729
when it computes with the fault

328
00:16:00,930 --> 00:16:05,550
and just correlate those two behavior

329
00:16:02,730 --> 00:16:08,459
and then extract usually in a very

330
00:16:05,550 --> 00:16:12,229
efficient way information about the

331
00:16:08,459 --> 00:16:14,849
secrets are embedded into the chip

332
00:16:12,230 --> 00:16:19,770
unfortunately so the other tags have

333
00:16:14,850 --> 00:16:23,250
been there for for many years now we

334
00:16:19,770 --> 00:16:25,230
have a lot of work on defenses against

335
00:16:23,250 --> 00:16:28,680
these kind of attacks but for sure when

336
00:16:25,230 --> 00:16:30,899
you begin to defend against and to to

337
00:16:28,680 --> 00:16:34,079
implement different schemes then it's

338
00:16:30,899 --> 00:16:38,220
going to cost also some computing powers

339
00:16:34,080 --> 00:16:40,050
from chip area and you already have to

340
00:16:38,220 --> 00:16:43,770
take a trade-off between the security

341
00:16:40,050 --> 00:16:46,010
that you need and the defense cost that

342
00:16:43,770 --> 00:16:49,920
you are going to embed into your product

343
00:16:46,010 --> 00:16:55,890
obviously this is not still not the end

344
00:16:49,920 --> 00:16:58,079
of the story because most of the time if

345
00:16:55,890 --> 00:17:00,839
at least we if we consider software and

346
00:16:58,080 --> 00:17:04,530
implementation the attacker has still a

347
00:17:00,839 --> 00:17:07,860
lot more power so this is the white box

348
00:17:04,530 --> 00:17:10,410
security model it was introduced so it

349
00:17:07,859 --> 00:17:13,889
is really the one that is used by bad

350
00:17:10,410 --> 00:17:15,569
guys because why why we friend to use

351
00:17:13,890 --> 00:17:17,150
all the all the tools and all the

352
00:17:15,569 --> 00:17:20,459
techniques we have at our disposal

353
00:17:17,150 --> 00:17:23,220
software only settings so but

354
00:17:20,459 --> 00:17:29,520
interestingly it was introduced only in

355
00:17:23,220 --> 00:17:31,860
2002 into the academic literature by by

356
00:17:29,520 --> 00:17:35,879
academics and people working in the

357
00:17:31,860 --> 00:17:39,689
industry and medically those are the

358
00:17:35,880 --> 00:17:42,540
worst condition we can dream about to do

359
00:17:39,690 --> 00:17:44,220
crypto because of course those kind of

360
00:17:42,540 --> 00:17:46,170
adversaries have all black box

361
00:17:44,220 --> 00:17:48,810
possibilities there are all

362
00:17:46,170 --> 00:17:51,210
gray box possibilities plus additional

363
00:17:48,810 --> 00:17:53,669
pour and what is this additional power

364
00:17:51,210 --> 00:17:55,920
it's simply a full control of the

365
00:17:53,670 --> 00:18:00,240
implementation and its own environment

366
00:17:55,920 --> 00:18:02,940
so it means that it can perform static

367
00:18:00,240 --> 00:18:04,770
or dynamic reverse engineering with all

368
00:18:02,940 --> 00:18:07,610
kind of tool that we have at our

369
00:18:04,770 --> 00:18:10,950
disposal today it means that we can

370
00:18:07,610 --> 00:18:15,060
inject arbitrary for that original

371
00:18:10,950 --> 00:18:17,460
arbitrary location at arbitrary time as

372
00:18:15,060 --> 00:18:20,330
many times as we want to which is not

373
00:18:17,460 --> 00:18:22,980
always possible to do it with hardware

374
00:18:20,330 --> 00:18:25,970
because there are synchronization issues

375
00:18:22,980 --> 00:18:29,700
and when you are doing fault injection

376
00:18:25,970 --> 00:18:32,940
it means that you can have the bad guy

377
00:18:29,700 --> 00:18:35,880
can inspect in a laboratory where or the

378
00:18:32,940 --> 00:18:38,040
content of the CPU registers of the ROM

379
00:18:35,880 --> 00:18:40,650
as a storage meaning that if you just

380
00:18:38,040 --> 00:18:42,690
have a hard-coded key you just stop the

381
00:18:40,650 --> 00:18:45,360
program read the key and that's it

382
00:18:42,690 --> 00:18:48,420
okay so white box setting is really the

383
00:18:45,360 --> 00:18:49,310
worst security model that we can think

384
00:18:48,420 --> 00:18:53,520
about

385
00:18:49,310 --> 00:18:55,470
so black box security is mainly relevant

386
00:18:53,520 --> 00:18:59,070
for cryptography operated in trusted

387
00:18:55,470 --> 00:19:02,040
environment like for instance a remote

388
00:18:59,070 --> 00:19:04,560
and properly secure API for instance and

389
00:19:02,040 --> 00:19:08,030
signing or a cure for is here within an

390
00:19:04,560 --> 00:19:10,290
HSM this could be considered as being a

391
00:19:08,030 --> 00:19:14,100
black box security wouldn't would make

392
00:19:10,290 --> 00:19:16,170
sense but it I'm not saying it's not

393
00:19:14,100 --> 00:19:18,929
useful it's basically our our

394
00:19:16,170 --> 00:19:21,420
mathematical insurance that the crypto

395
00:19:18,930 --> 00:19:26,460
is secure at least as secure as a hard

396
00:19:21,420 --> 00:19:28,530
problem as we we tend to define it wave

397
00:19:26,460 --> 00:19:34,860
of security is very relevant to secure

398
00:19:28,530 --> 00:19:38,420
hardware environment so smart cards USB

399
00:19:34,860 --> 00:19:41,280
dongles TPM secure chipsets and now

400
00:19:38,420 --> 00:19:44,430
common shelf CPUs as we we have seen

401
00:19:41,280 --> 00:19:46,649
that with the attacks against the

402
00:19:44,430 --> 00:19:49,830
microarchitecture our attacks again this

403
00:19:46,650 --> 00:19:52,920
Intel CPU make it very relevant in in

404
00:19:49,830 --> 00:19:55,379
certain situations so that we are very

405
00:19:52,920 --> 00:20:00,030
security is really for for Hardware

406
00:19:55,380 --> 00:20:03,150
related implementation or considerations

407
00:20:00,030 --> 00:20:06,240
and white box security is very relevant

408
00:20:03,150 --> 00:20:08,220
for software only implementations so

409
00:20:06,240 --> 00:20:10,920
when you don't have any secure hardware

410
00:20:08,220 --> 00:20:14,370
are you at your disposal which is a very

411
00:20:10,920 --> 00:20:16,560
very frequent scenario so basically it

412
00:20:14,370 --> 00:20:19,290
happens all the time when we run

413
00:20:16,560 --> 00:20:23,820
software on untrusted endpoints like

414
00:20:19,290 --> 00:20:26,760
mobile phone a laptop etc this is also

415
00:20:23,820 --> 00:20:28,950
this model known as a man at the end

416
00:20:26,760 --> 00:20:33,360
security model which is completely

417
00:20:28,950 --> 00:20:36,170
different of what of the other so let's

418
00:20:33,360 --> 00:20:39,449
have a look at the academic viewpoints

419
00:20:36,170 --> 00:20:41,730
so basically white box crypto was

420
00:20:39,450 --> 00:20:45,060
introduced by Cho and other people in

421
00:20:41,730 --> 00:20:48,060
2002 and I just proposed design for a

422
00:20:45,060 --> 00:20:50,879
secure des and secure AES embedding and

423
00:20:48,060 --> 00:20:54,179
a hard-coded secret key supposed to

424
00:20:50,880 --> 00:20:56,190
resist to two key extraction so

425
00:20:54,180 --> 00:20:58,500
basically I won't go too much detail

426
00:20:56,190 --> 00:21:02,220
into how it was implemented but it

427
00:20:58,500 --> 00:21:04,740
consisted of a pre computed tables and

428
00:21:02,220 --> 00:21:08,670
the implementation was just a sequence

429
00:21:04,740 --> 00:21:10,980
of their lookups in those tables so an

430
00:21:08,670 --> 00:21:13,580
implementation was quite large hundreds

431
00:21:10,980 --> 00:21:16,020
of kilobytes maybe a few megabytes but

432
00:21:13,580 --> 00:21:17,909
unfortunately all this is also design

433
00:21:16,020 --> 00:21:18,840
have been quickly broken using either

434
00:21:17,910 --> 00:21:20,910
stone

435
00:21:18,840 --> 00:21:23,820
technique crypt analysis techniques or

436
00:21:20,910 --> 00:21:26,880
gray box type of attacks like for

437
00:21:23,820 --> 00:21:29,000
injection or differential computational

438
00:21:26,880 --> 00:21:32,850
analysis which is a kind of GPA up

439
00:21:29,000 --> 00:21:36,090
applied to this kind of implementation

440
00:21:32,850 --> 00:21:39,540
and last year there was even wiibox

441
00:21:36,090 --> 00:21:42,360
contexts or a context a contest where

442
00:21:39,540 --> 00:21:46,409
everybody was able to submit instances

443
00:21:42,360 --> 00:21:49,560
of white box AES Sujit people could also

444
00:21:46,410 --> 00:21:51,450
break it and try it it was possible to

445
00:21:49,560 --> 00:21:53,129
submit anonymous design which was which

446
00:21:51,450 --> 00:21:56,340
was quite good because some maybe some

447
00:21:53,130 --> 00:21:58,380
industry people sent some proposal and

448
00:21:56,340 --> 00:22:02,699
all of them were completely broken

449
00:21:58,380 --> 00:22:06,180
still the the most secure one was broken

450
00:22:02,700 --> 00:22:09,420
only after one month of intense

451
00:22:06,180 --> 00:22:12,970
crypt analysis by PhD students so it's

452
00:22:09,420 --> 00:22:16,420
been that you see that there is still

453
00:22:12,970 --> 00:22:19,180
a lot of time to invest to to break a

454
00:22:16,420 --> 00:22:23,560
good a good instance a good white

455
00:22:19,180 --> 00:22:26,350
booster now the academics have also

456
00:22:23,560 --> 00:22:28,419
tried to formalize what is what means

457
00:22:26,350 --> 00:22:30,669
resistance into the white box model and

458
00:22:28,420 --> 00:22:33,370
our several notions have been formalized

459
00:22:30,670 --> 00:22:36,100
I just would like to outline that in all

460
00:22:33,370 --> 00:22:38,679
of those models the white box compiler

461
00:22:36,100 --> 00:22:40,800
so taking a stand on implementation and

462
00:22:38,680 --> 00:22:42,990
transforming into a white box

463
00:22:40,800 --> 00:22:46,780
implementation is supposed to be public

464
00:22:42,990 --> 00:22:49,150
so which is quite maybe not so relevant

465
00:22:46,780 --> 00:22:50,830
into in the industry be whether you you

466
00:22:49,150 --> 00:22:54,780
can keep your white box compiler secret

467
00:22:50,830 --> 00:22:57,760
anyway so the strongest notion is VBB

468
00:22:54,780 --> 00:23:01,180
with virtual black box property so

469
00:22:57,760 --> 00:23:03,970
essentially if you have a VBB of frisket

470
00:23:01,180 --> 00:23:09,640
oh it's me and you apply it on a program

471
00:23:03,970 --> 00:23:14,020
P everything which can be computed from

472
00:23:09,640 --> 00:23:17,710
the obfuscated program is the same that

473
00:23:14,020 --> 00:23:20,320
if you give an Oracle to the program P 2

474
00:23:17,710 --> 00:23:23,530
mm or each means that it's really this

475
00:23:20,320 --> 00:23:25,450
notion if it were a VBB compiler exists

476
00:23:23,530 --> 00:23:28,899
means that you really transform your

477
00:23:25,450 --> 00:23:30,790
program into a black box which the only

478
00:23:28,900 --> 00:23:33,330
thing you can do is just to place submit

479
00:23:30,790 --> 00:23:36,129
plain text and get cipher text or submit

480
00:23:33,330 --> 00:23:38,770
message and get signature and this so

481
00:23:36,130 --> 00:23:41,230
this is a very very strong notion of

482
00:23:38,770 --> 00:23:43,060
course it is so strong that generic it

483
00:23:41,230 --> 00:23:45,160
was shown that a generic obfuscated or

484
00:23:43,060 --> 00:23:47,860
does not exist so a generic of mosquito

485
00:23:45,160 --> 00:23:50,500
is an obfuscator that is able to protect

486
00:23:47,860 --> 00:23:52,959
every program because either the

487
00:23:50,500 --> 00:23:56,530
researcher just exhibited the program

488
00:23:52,960 --> 00:23:59,550
that cannot be obfuscated still we know

489
00:23:56,530 --> 00:24:01,660
a few VBB office Cato for very specific

490
00:23:59,550 --> 00:24:04,750
mathematical functions like point

491
00:24:01,660 --> 00:24:07,180
functions so the fact that there is no

492
00:24:04,750 --> 00:24:08,320
VBB obfuscate or for every kind of

493
00:24:07,180 --> 00:24:10,720
program does not rule out the

494
00:24:08,320 --> 00:24:12,909
possibility that you have a VBB of this

495
00:24:10,720 --> 00:24:16,030
Cato for some canned some classes of

496
00:24:12,910 --> 00:24:17,950
program so but still this is a very

497
00:24:16,030 --> 00:24:21,100
powerful notion maybe too powerful for

498
00:24:17,950 --> 00:24:22,870
the guys have also introduced a weaker

499
00:24:21,100 --> 00:24:25,300
notion which is indistinguishability of

500
00:24:22,870 --> 00:24:26,539
discussion so radically if you have an

501
00:24:25,300 --> 00:24:29,600
eye office case

502
00:24:26,539 --> 00:24:31,429
and here we are not speaking my program

503
00:24:29,600 --> 00:24:33,709
but about Secrets which is slightly

504
00:24:31,429 --> 00:24:37,460
different because in a secret you don't

505
00:24:33,710 --> 00:24:39,950
have loops for instance and you apply

506
00:24:37,460 --> 00:24:44,090
your iap fisca tow on to equivalent

507
00:24:39,950 --> 00:24:46,429
secret so secret that does perform that

508
00:24:44,090 --> 00:24:49,158
perform the same competition the two

509
00:24:46,429 --> 00:24:55,039
output should be indistinguishable so

510
00:24:49,159 --> 00:24:58,159
this is IO notion this became very

511
00:24:55,039 --> 00:25:00,169
popular about four years ago or four

512
00:24:58,159 --> 00:25:02,990
five years ago in the academic world why

513
00:25:00,169 --> 00:25:05,720
because a first inefficient candidate

514
00:25:02,990 --> 00:25:09,139
has been published so it triggered a lot

515
00:25:05,720 --> 00:25:11,090
of academic research assuming now that

516
00:25:09,139 --> 00:25:13,039
we have an IO of the sky tow what can we

517
00:25:11,090 --> 00:25:14,779
do and actually it was demonstrated that

518
00:25:13,039 --> 00:25:17,480
you can be a lot of crypto primitives

519
00:25:14,779 --> 00:25:20,659
out of such a tool but still we don't

520
00:25:17,480 --> 00:25:23,240
know how to design an i/o app fisca tow

521
00:25:20,659 --> 00:25:24,649
that is really secure and really

522
00:25:23,240 --> 00:25:28,850
efficient so this is still

523
00:25:24,649 --> 00:25:30,529
work-in-progress and there are also a

524
00:25:28,850 --> 00:25:31,939
notion that are more related to the

525
00:25:30,529 --> 00:25:34,909
design that have been presented like

526
00:25:31,940 --> 00:25:37,909
wine - or it's also called strong white

527
00:25:34,909 --> 00:25:40,220
box so given the implementation of an

528
00:25:37,909 --> 00:25:43,190
encryption scheme it is infeasible to

529
00:25:40,220 --> 00:25:45,980
decrypt so it implies key extraction of

530
00:25:43,190 --> 00:25:48,440
course because if you have if you manage

531
00:25:45,980 --> 00:25:51,490
to extract the key out of an aes white

532
00:25:48,440 --> 00:25:56,600
box instance you can decrypt trivially

533
00:25:51,490 --> 00:25:58,549
we have some proposals but they all rely

534
00:25:56,600 --> 00:26:02,029
on public key which is and this kind of

535
00:25:58,549 --> 00:26:03,470
wine - property is kind of trivial to

536
00:26:02,029 --> 00:26:06,200
implement with public key so we don't

537
00:26:03,470 --> 00:26:10,899
have any proposal just using symmetric

538
00:26:06,200 --> 00:26:13,250
key techniques and so people were a bit

539
00:26:10,899 --> 00:26:15,320
you know when it's when the security

540
00:26:13,250 --> 00:26:16,909
models are too difficult to work in what

541
00:26:15,320 --> 00:26:19,309
you are doing is just you relax the

542
00:26:16,909 --> 00:26:22,309
security model and they say ok maybe we

543
00:26:19,309 --> 00:26:24,529
can try to achieve incompressibility at

544
00:26:22,309 --> 00:26:26,990
least meaning that if you have a huge

545
00:26:24,529 --> 00:26:29,779
white box instance at least I can

546
00:26:26,990 --> 00:26:31,880
guarantee that nobody can take this huge

547
00:26:29,779 --> 00:26:35,510
crypto instance maybe one gigabytes of

548
00:26:31,880 --> 00:26:37,909
code and reduce it to a smaller instance

549
00:26:35,510 --> 00:26:39,480
it could be useful in certain scenario

550
00:26:37,909 --> 00:26:42,540
when you would like to

551
00:26:39,480 --> 00:26:48,750
of X with X filtration of secret stuff

552
00:26:42,540 --> 00:26:51,480
difficult okay so here it is the only

553
00:26:48,750 --> 00:26:52,980
scenario we know good proposals because

554
00:26:51,480 --> 00:26:55,830
there are several solutions so they

555
00:26:52,980 --> 00:26:59,610
mainly typically use large random

556
00:26:55,830 --> 00:27:02,000
precomputed tables that is impossible to

557
00:26:59,610 --> 00:27:09,169
compress unless you break for instance

558
00:27:02,000 --> 00:27:13,590
AES or security or random generator so

559
00:27:09,170 --> 00:27:16,440
what what we don't have a very strong

560
00:27:13,590 --> 00:27:18,000
and efficient mathematical tool so still

561
00:27:16,440 --> 00:27:21,140
we need a white box crypto white box

562
00:27:18,000 --> 00:27:24,240
primitive so how are we going to do that

563
00:27:21,140 --> 00:27:25,920
so let's assume now that we are looking

564
00:27:24,240 --> 00:27:28,880
for a good resistance to two key

565
00:27:25,920 --> 00:27:31,020
extraction at least it is sufficient to

566
00:27:28,880 --> 00:27:33,090
if you can extract the key it's

567
00:27:31,020 --> 00:27:34,500
sufficient to break awareness it's not

568
00:27:33,090 --> 00:27:40,129
always necessary always we'll see it

569
00:27:34,500 --> 00:27:43,290
later so what are the requirement what

570
00:27:40,130 --> 00:27:45,240
let you take care of when you design

571
00:27:43,290 --> 00:27:47,540
such a primitive so of course you will

572
00:27:45,240 --> 00:27:51,150
have to address all these bad guys

573
00:27:47,540 --> 00:27:53,190
classes here so first of all for sure

574
00:27:51,150 --> 00:27:55,560
you need a secure crypto because without

575
00:27:53,190 --> 00:27:58,800
secure crypto you won't even be a secure

576
00:27:55,560 --> 00:28:00,600
in the black box model but you will have

577
00:27:58,800 --> 00:28:02,550
to settle many engineering details for

578
00:28:00,600 --> 00:28:05,250
instance whether you are going to have a

579
00:28:02,550 --> 00:28:09,860
static case of a real static embedded

580
00:28:05,250 --> 00:28:13,770
key or a white box that allows to take

581
00:28:09,860 --> 00:28:16,260
dynamic key it depends on the update

582
00:28:13,770 --> 00:28:20,400
ability of your instances and it depends

583
00:28:16,260 --> 00:28:23,040
also on the if one one instance is

584
00:28:20,400 --> 00:28:25,050
broken what can I tell on further

585
00:28:23,040 --> 00:28:27,990
instance what that will be generated by

586
00:28:25,050 --> 00:28:29,610
the same compiler you have to think

587
00:28:27,990 --> 00:28:31,830
about the crypto primitive maybe you

588
00:28:29,610 --> 00:28:33,870
have requirement sir that it is respond

589
00:28:31,830 --> 00:28:36,480
equipped or primitive because it it's

590
00:28:33,870 --> 00:28:39,290
you are using a standard that rely on a

591
00:28:36,480 --> 00:28:43,200
s and RS understand elliptic curves

592
00:28:39,290 --> 00:28:46,889
maybe you need a mode of operations so

593
00:28:43,200 --> 00:28:50,640
this is something that many subtle

594
00:28:46,890 --> 00:28:52,890
details can hide and of course so do you

595
00:28:50,640 --> 00:28:55,049
need a standard algorithm or are you

596
00:28:52,890 --> 00:28:58,350
is it possible for you to use a custom

597
00:28:55,049 --> 00:28:59,760
and secret algorithm I know some of you

598
00:28:58,350 --> 00:29:02,428
will say who's bad

599
00:28:59,760 --> 00:29:05,220
of course it's bad and another

600
00:29:02,429 --> 00:29:06,990
engineering detail do have to define is

601
00:29:05,220 --> 00:29:09,960
how you are going to derive randomness

602
00:29:06,990 --> 00:29:13,230
on an untrusted end point and this is a

603
00:29:09,960 --> 00:29:15,830
very very tough question of course you

604
00:29:13,230 --> 00:29:19,290
will have to resist gradebooks

605
00:29:15,830 --> 00:29:21,809
adversaries so you will have to follow

606
00:29:19,290 --> 00:29:24,510
all the good guidelines to make an

607
00:29:21,809 --> 00:29:27,178
implementation that is resistance to

608
00:29:24,510 --> 00:29:30,000
side-channel attacks it will have to be

609
00:29:27,179 --> 00:29:33,570
time constant depending on the algorithm

610
00:29:30,000 --> 00:29:37,020
it can be tricky it's more simple for

611
00:29:33,570 --> 00:29:38,939
for four years for instance if you are

612
00:29:37,020 --> 00:29:40,799
going to use blinding techniques then

613
00:29:38,940 --> 00:29:42,780
you will have to rely on randomness but

614
00:29:40,799 --> 00:29:46,799
you cannot trust one dullness extracted

615
00:29:42,780 --> 00:29:48,840
out of the of the platform so you cannot

616
00:29:46,799 --> 00:29:51,270
use only randomness coming out of this

617
00:29:48,840 --> 00:29:55,409
platform and you will have to take care

618
00:29:51,270 --> 00:29:57,870
about interaction with code obfuscated

619
00:29:55,410 --> 00:30:00,210
oh so normal stone table mosquitoes why

620
00:29:57,870 --> 00:30:03,719
because existing time dependencies can

621
00:30:00,210 --> 00:30:06,240
be amplified by obfuscating compilers or

622
00:30:03,720 --> 00:30:08,040
just think about code virtualization if

623
00:30:06,240 --> 00:30:10,230
you have a tiny difference with a code

624
00:30:08,040 --> 00:30:13,200
and you visualize each code using a

625
00:30:10,230 --> 00:30:16,620
conceptualize oh then this timing

626
00:30:13,200 --> 00:30:19,230
difference can be really amplified you

627
00:30:16,620 --> 00:30:21,479
will maybe have higher sensitivity to

628
00:30:19,230 --> 00:30:25,200
cache misses because you are using a lot

629
00:30:21,480 --> 00:30:27,929
of data that won't feel that will fill

630
00:30:25,200 --> 00:30:29,820
the cache and even worse time

631
00:30:27,929 --> 00:30:32,070
dependencies can sometimes also

632
00:30:29,820 --> 00:30:35,970
accidentally introduced by obfuscating

633
00:30:32,070 --> 00:30:39,510
compilers you white box implementation

634
00:30:35,970 --> 00:30:43,049
must be leakage free so this is this is

635
00:30:39,510 --> 00:30:45,960
a nice requirement but it's extremely

636
00:30:43,049 --> 00:30:48,090
difficult to implement in practice so

637
00:30:45,960 --> 00:30:49,980
first of all you will have to define the

638
00:30:48,090 --> 00:30:53,040
number of probes that you are going to

639
00:30:49,980 --> 00:30:55,140
allow usually in the hardware world you

640
00:30:53,040 --> 00:30:57,990
will allow one two maybe three probes

641
00:30:55,140 --> 00:31:01,620
but you know white box setting the guy

642
00:30:57,990 --> 00:31:04,240
can have a higher order attacks up to

643
00:31:01,620 --> 00:31:06,250
hundred probes if if he

644
00:31:04,240 --> 00:31:08,650
through here you have to choose a

645
00:31:06,250 --> 00:31:10,870
trade-off of course pitting secret data

646
00:31:08,650 --> 00:31:13,570
and multiple in multiple statistically

647
00:31:10,870 --> 00:31:16,750
encouraged each is possible but a new

648
00:31:13,570 --> 00:31:19,480
time you will have to rely on on

649
00:31:16,750 --> 00:31:22,240
randomness because most leakage

650
00:31:19,480 --> 00:31:24,550
prevention mechanism are using some kind

651
00:31:22,240 --> 00:31:28,150
of secure independent statistic

652
00:31:24,550 --> 00:31:30,309
statistically independent randomness and

653
00:31:28,150 --> 00:31:34,929
of course you white box implementation

654
00:31:30,309 --> 00:31:37,240
with matrices to false attacks and so we

655
00:31:34,929 --> 00:31:38,980
know a lot of strategies to protect and

656
00:31:37,240 --> 00:31:41,290
this kind of false attacks like your

657
00:31:38,980 --> 00:31:46,000
internal computations internal integrity

658
00:31:41,290 --> 00:31:48,120
checks maybe use also so you will have

659
00:31:46,000 --> 00:31:50,980
to protect again folds into the data

660
00:31:48,120 --> 00:31:53,229
which is done by the two first bullets

661
00:31:50,980 --> 00:31:57,220
but you will also have to protect force

662
00:31:53,230 --> 00:31:59,110
against the code just for instance you

663
00:31:57,220 --> 00:32:00,940
can just remove a check by in open it

664
00:31:59,110 --> 00:32:02,469
man opening a branch so you will have to

665
00:32:00,940 --> 00:32:04,510
use standard software temporal proofing

666
00:32:02,470 --> 00:32:06,610
techniques as well of course the main

667
00:32:04,510 --> 00:32:09,160
challenge here is other final

668
00:32:06,610 --> 00:32:12,370
performance of your implementation if

669
00:32:09,160 --> 00:32:14,020
you can afford to compute on AES in one

670
00:32:12,370 --> 00:32:16,479
hour then it's fine you can do a lot of

671
00:32:14,020 --> 00:32:19,120
things if you must do it in less than

672
00:32:16,480 --> 00:32:22,540
one millisecond and on a cheap mobile

673
00:32:19,120 --> 00:32:23,889
phone it's another story and I won't

674
00:32:22,540 --> 00:32:28,480
tell you who you will have to protect

675
00:32:23,890 --> 00:32:31,809
again white box attacks so as of today

676
00:32:28,480 --> 00:32:35,940
we don't have any choice but to accept

677
00:32:31,809 --> 00:32:38,260
to use a pragmatic approach meaning that

678
00:32:35,940 --> 00:32:40,660
it is like that because we don't have

679
00:32:38,260 --> 00:32:43,090
any efficient cryptographic official

680
00:32:40,660 --> 00:32:46,240
obfuscation tool in our hands still

681
00:32:43,090 --> 00:32:50,709
research in project in a research

682
00:32:46,240 --> 00:32:52,420
ongoing now and to the size and

683
00:32:50,710 --> 00:32:55,630
performance matter and practice so you

684
00:32:52,420 --> 00:32:57,790
won't be able to inject one gigabyte

685
00:32:55,630 --> 00:33:01,929
white box instance into a mobile phone

686
00:32:57,790 --> 00:33:04,360
off of foreign app and basically your

687
00:33:01,929 --> 00:33:08,350
goal is just be making the adversaries

688
00:33:04,360 --> 00:33:10,870
job as costly as possible so what you

689
00:33:08,350 --> 00:33:13,740
can do is to to use three different

690
00:33:10,870 --> 00:33:16,500
strategies that I'm going to discuss now

691
00:33:13,740 --> 00:33:20,640
so first of all what you can do is to

692
00:33:16,500 --> 00:33:23,580
rely on secrecy so in a white box

693
00:33:20,640 --> 00:33:25,800
contexts the yeah the security model is

694
00:33:23,580 --> 00:33:29,460
extremely tough for the defender so you

695
00:33:25,800 --> 00:33:33,240
can also afford stuff that you usually

696
00:33:29,460 --> 00:33:35,670
not that is usually not recommended so

697
00:33:33,240 --> 00:33:38,040
whenever possible you you can get rid of

698
00:33:35,670 --> 00:33:41,040
kerkoff's principle saying that the

699
00:33:38,040 --> 00:33:42,690
adversary knows every everything but the

700
00:33:41,040 --> 00:33:44,280
secret data so knows the white box

701
00:33:42,690 --> 00:33:48,300
compilers and not the algorithm

702
00:33:44,280 --> 00:33:52,050
specification etcetera so here you can

703
00:33:48,300 --> 00:33:55,139
use custom algorithm secret algorithm so

704
00:33:52,050 --> 00:33:58,830
it's really you can consider it as being

705
00:33:55,140 --> 00:34:01,830
security by obscurity or by considering

706
00:33:58,830 --> 00:34:03,929
what obscurity on top of a secured

707
00:34:01,830 --> 00:34:07,080
implementation which has a new layer of

708
00:34:03,930 --> 00:34:08,820
differences of course if you all go is

709
00:34:07,080 --> 00:34:12,319
not protected with respect to such an

710
00:34:08,820 --> 00:34:16,800
attacks and you are using Caesar cipher

711
00:34:12,320 --> 00:34:19,350
and you doomed anyway so and this is a

712
00:34:16,800 --> 00:34:21,000
tricky business because if you would

713
00:34:19,350 --> 00:34:24,839
like to design your own crypto it's

714
00:34:21,000 --> 00:34:30,480
better to have a crypto black belt

715
00:34:24,840 --> 00:34:32,340
so yeah you have to be careful here now

716
00:34:30,480 --> 00:34:35,270
another story another attack you would

717
00:34:32,340 --> 00:34:38,159
like to defend against this good lifting

718
00:34:35,270 --> 00:34:39,620
somatically code lifting is just use of

719
00:34:38,159 --> 00:34:42,510
a white box implementation as a

720
00:34:39,620 --> 00:34:45,449
encryption decryption signature record

721
00:34:42,510 --> 00:34:47,460
so they got the bad guy won't try to

722
00:34:45,449 --> 00:34:50,520
extract the key and understand how it is

723
00:34:47,460 --> 00:34:53,909
working we just use the big executable

724
00:34:50,520 --> 00:34:57,750
blob and use it like you are using it in

725
00:34:53,909 --> 00:35:00,240
your own application so it requires to

726
00:34:57,750 --> 00:35:02,580
reverse-engineering the white box crypto

727
00:35:00,240 --> 00:35:05,759
API boundaries and to understand how it

728
00:35:02,580 --> 00:35:07,680
works it's pretty easy with most of the

729
00:35:05,760 --> 00:35:09,480
time it's pretty easy you if your Y boss

730
00:35:07,680 --> 00:35:12,569
crypto is embedded to a dynamic library

731
00:35:09,480 --> 00:35:14,970
it's a bit less easy if everything is

732
00:35:12,570 --> 00:35:19,430
statically linked into a large blob of

733
00:35:14,970 --> 00:35:21,990
of native code but here attacks like

734
00:35:19,430 --> 00:35:24,330
common attack that that purpose are

735
00:35:21,990 --> 00:35:26,910
hooking and all this kind of stuff so

736
00:35:24,330 --> 00:35:27,420
what you can do is to implement two

737
00:35:26,910 --> 00:35:32,819
things

738
00:35:27,420 --> 00:35:37,230
instance in erm setting you could use

739
00:35:32,819 --> 00:35:39,150
what we call encoding for if here we

740
00:35:37,230 --> 00:35:42,030
have a kind of construction which is

741
00:35:39,150 --> 00:35:45,150
which resemble a colada so we have a

742
00:35:42,030 --> 00:35:47,970
first AES that encrypts a session key

743
00:35:45,150 --> 00:35:50,400
that is then used to to decrypt I don't

744
00:35:47,970 --> 00:35:51,959
know a movie for instance and this

745
00:35:50,400 --> 00:35:56,309
session key is going to change quite

746
00:35:51,960 --> 00:35:58,710
frequently so the key that encrypts the

747
00:35:56,309 --> 00:36:02,700
session key could be for instance

748
00:35:58,710 --> 00:36:03,150
embedded into a white box in our white

749
00:36:02,700 --> 00:36:06,629
box

750
00:36:03,150 --> 00:36:08,520
AES instance but it means that if you

751
00:36:06,630 --> 00:36:10,710
don't would like to if you'd like to

752
00:36:08,520 --> 00:36:14,730
protect again code lifting what you are

753
00:36:10,710 --> 00:36:18,030
going to do is maybe to add a layer as a

754
00:36:14,730 --> 00:36:20,280
kind of secret encoding function at the

755
00:36:18,030 --> 00:36:22,770
output of the years and the

756
00:36:20,280 --> 00:36:25,589
corresponding inverse of that secret

757
00:36:22,770 --> 00:36:27,839
encoding in the input of the key into

758
00:36:25,589 --> 00:36:30,599
the disk camera here the media

759
00:36:27,839 --> 00:36:34,308
descrambler and maybe this part here can

760
00:36:30,599 --> 00:36:37,349
be updated very frequently by software

761
00:36:34,309 --> 00:36:40,589
using a network but maybe that stuff

762
00:36:37,349 --> 00:36:45,240
here is embedded into a secured chip or

763
00:36:40,589 --> 00:36:47,279
secure system on chip and cannot so it

764
00:36:45,240 --> 00:36:50,640
means and cannot be updated so easily so

765
00:36:47,280 --> 00:36:53,180
it means here that you cannot choose a

766
00:36:50,640 --> 00:36:57,029
yes if you managed to extract the key

767
00:36:53,180 --> 00:37:00,690
still you have some more work to do and

768
00:36:57,030 --> 00:37:04,079
to reverse the encoding as well to be

769
00:37:00,690 --> 00:37:06,059
able to emulate that stuff the other

770
00:37:04,079 --> 00:37:09,780
difference that you can take is what I

771
00:37:06,059 --> 00:37:12,990
am calling code dissolving so magically

772
00:37:09,780 --> 00:37:15,900
if you have some native some some native

773
00:37:12,990 --> 00:37:17,910
code here with some parts which are

774
00:37:15,900 --> 00:37:20,730
while Bush implements your white box

775
00:37:17,910 --> 00:37:24,140
crypto what you can try to do is to

776
00:37:20,730 --> 00:37:26,240
dissolve that code that native code oops

777
00:37:24,140 --> 00:37:30,319
[Music]

778
00:37:26,240 --> 00:37:30,319
I broke everything

779
00:37:31,259 --> 00:37:47,410
what happens I touch the cable yeah

780
00:37:41,729 --> 00:37:55,029
let's try it a new term never touch a

781
00:37:47,410 --> 00:37:56,200
computer it's to the roof it works here

782
00:37:55,029 --> 00:37:58,509
we go

783
00:37:56,200 --> 00:38:01,558
and try to dissolve the white box

784
00:37:58,509 --> 00:38:04,690
instance with your business logic code

785
00:38:01,559 --> 00:38:07,630
around so it means here you are going to

786
00:38:04,690 --> 00:38:10,779
use a soft robe mosquito and that is

787
00:38:07,630 --> 00:38:13,029
able to split functions or split basic

788
00:38:10,779 --> 00:38:15,460
blocks and to merge function and merge

789
00:38:13,029 --> 00:38:18,099
basic block and to do a kind of soup of

790
00:38:15,460 --> 00:38:20,049
code of binary code that's embed

791
00:38:18,099 --> 00:38:24,339
everything so that's it's very difficult

792
00:38:20,049 --> 00:38:28,680
to carve the white box crypto and to and

793
00:38:24,339 --> 00:38:33,269
to use it as an Oracle for instance I

794
00:38:28,680 --> 00:38:35,618
have a bit of time to discuss about some

795
00:38:33,269 --> 00:38:38,649
some tricky parts of white box

796
00:38:35,619 --> 00:38:41,170
cryptography so when you think about

797
00:38:38,650 --> 00:38:43,329
cryptographic functionalities mostly in

798
00:38:41,170 --> 00:38:47,650
the academic world people think about

799
00:38:43,329 --> 00:38:52,329
one symmetric cipher like a ESO tripod

800
00:38:47,650 --> 00:38:55,690
us but crypto is not about block cipher

801
00:38:52,329 --> 00:38:58,690
it's really about authenticated

802
00:38:55,690 --> 00:39:01,660
encryption or mode of operations for

803
00:38:58,690 --> 00:39:05,109
encrypting large chunk of data and if

804
00:39:01,660 --> 00:39:06,848
you look at several examples then you

805
00:39:05,109 --> 00:39:10,239
are going to see that it's not so easy

806
00:39:06,849 --> 00:39:15,009
to have secure white box instance so if

807
00:39:10,239 --> 00:39:16,960
for instance if you take just a mode of

808
00:39:15,009 --> 00:39:19,150
operation that transfers a block cipher

809
00:39:16,960 --> 00:39:21,999
into a stream cipher at the counter mode

810
00:39:19,150 --> 00:39:25,059
or output thick but more a cipher

811
00:39:21,999 --> 00:39:28,868
feedback mode medically those mode of

812
00:39:25,059 --> 00:39:32,079
operation do not provide any inherent

813
00:39:28,869 --> 00:39:34,539
resistance to to inversion so basically

814
00:39:32,079 --> 00:39:38,769
if you have an alias in counter mode

815
00:39:34,539 --> 00:39:41,920
encryption Oracle so it's obviously

816
00:39:38,769 --> 00:39:43,598
trivial to transform it into a u.s.

817
00:39:41,920 --> 00:39:43,900
decryption Oracle because you just have

818
00:39:43,599 --> 00:39:45,520
to

819
00:39:43,900 --> 00:39:48,630
what plaintext and ciphertext and it

820
00:39:45,520 --> 00:39:50,799
works so this is not very white books

821
00:39:48,630 --> 00:39:52,750
and this is something you have to take

822
00:39:50,799 --> 00:39:55,509
about if you take here a counter

823
00:39:52,750 --> 00:39:57,910
feedback mode matically all you have to

824
00:39:55,510 --> 00:40:02,020
identify into the implementation is to

825
00:39:57,910 --> 00:40:05,170
identify that output here because you

826
00:40:02,020 --> 00:40:07,029
can swap plant xsl-fo text but basically

827
00:40:05,170 --> 00:40:09,339
what you have to inject into the next

828
00:40:07,029 --> 00:40:12,839
encryption block is cypher text in all

829
00:40:09,339 --> 00:40:15,339
cases but still this is a very fragile

830
00:40:12,839 --> 00:40:17,230
construction because what you need to

831
00:40:15,339 --> 00:40:21,940
identify the code is just this red

832
00:40:17,230 --> 00:40:23,980
bullet here take a Mac for instance

833
00:40:21,940 --> 00:40:28,539
let's assume that you would like to

834
00:40:23,980 --> 00:40:30,339
embed to derive a secure message

835
00:40:28,539 --> 00:40:33,130
authentication symmetric message

836
00:40:30,339 --> 00:40:38,859
authentication code embedding a hard

837
00:40:33,130 --> 00:40:41,470
coded key basically in and in in if you

838
00:40:38,859 --> 00:40:44,650
you have a verification for instance in

839
00:40:41,470 --> 00:40:47,500
to your mobile application you will have

840
00:40:44,650 --> 00:40:49,869
some difficulties because in most in

841
00:40:47,500 --> 00:40:51,670
virtually all Macs we know about the tag

842
00:40:49,869 --> 00:40:53,910
generation in the tag verification

843
00:40:51,670 --> 00:40:58,390
procedure are extremely similar

844
00:40:53,910 --> 00:41:00,279
magically it works all like that doesn't

845
00:40:58,390 --> 00:41:02,799
compute a mark on the message and

846
00:41:00,279 --> 00:41:05,410
transmit the message in the Mac and the

847
00:41:02,799 --> 00:41:08,619
receiver does exactly the same operation

848
00:41:05,410 --> 00:41:12,190
and just compare the to the received Mac

849
00:41:08,619 --> 00:41:14,470
and the other freshly recomputed much so

850
00:41:12,190 --> 00:41:17,079
it means that's here those two Oracle's

851
00:41:14,470 --> 00:41:19,118
the two operation are extremely similar

852
00:41:17,079 --> 00:41:21,730
and it's very difficult to make it

853
00:41:19,119 --> 00:41:25,359
dissymmetric if you would like to have a

854
00:41:21,730 --> 00:41:28,750
white box instance yes GCM authenticated

855
00:41:25,359 --> 00:41:30,788
encryption it's is really the same so

856
00:41:28,750 --> 00:41:33,609
you will have to be very careful about

857
00:41:30,789 --> 00:41:36,940
what you are doing because it uses kind

858
00:41:33,609 --> 00:41:39,578
of counter mode so basically we see that

859
00:41:36,940 --> 00:41:41,740
the encryption part is using always the

860
00:41:39,579 --> 00:41:45,220
same encryption direction so the same

861
00:41:41,740 --> 00:41:47,470
block cipher Direction here so if you

862
00:41:45,220 --> 00:41:50,919
swap just plaintext and ciphertext what

863
00:41:47,470 --> 00:41:53,730
you obtain will be depending on your

864
00:41:50,920 --> 00:41:56,680
implementation will be a decrypted

865
00:41:53,730 --> 00:41:57,670
ciphertext but with a wrong tag because

866
00:41:56,680 --> 00:41:59,980
what

867
00:41:57,670 --> 00:42:02,980
enter into the tag computation mechanism

868
00:41:59,980 --> 00:42:04,690
is a ciphertext and not the plaintext so

869
00:42:02,980 --> 00:42:08,650
it means a new time that each we would

870
00:42:04,690 --> 00:42:10,630
like to transform an Aes GCM white box

871
00:42:08,650 --> 00:42:14,349
encryption instance into a decryption

872
00:42:10,630 --> 00:42:17,890
instance what you have to do is just to

873
00:42:14,349 --> 00:42:20,589
be able to feed the ciphertext here into

874
00:42:17,890 --> 00:42:24,009
that path which is probably not not so

875
00:42:20,589 --> 00:42:26,859
difficult so it means here the message I

876
00:42:24,010 --> 00:42:30,430
would like to convey that if you have a

877
00:42:26,859 --> 00:42:33,098
secure white box OS it does not mean by

878
00:42:30,430 --> 00:42:36,490
far that you have a secure encryption or

879
00:42:33,099 --> 00:42:39,640
authenticated encryption or primitive in

880
00:42:36,490 --> 00:42:42,040
the same way you could be you could try

881
00:42:39,640 --> 00:42:44,379
to hide the public would you loose for

882
00:42:42,040 --> 00:42:47,140
instance I don't know why but you could

883
00:42:44,380 --> 00:42:50,980
imagine trying doing that so let's take

884
00:42:47,140 --> 00:42:54,578
our saya P so you have an encrypting

885
00:42:50,980 --> 00:42:58,569
erase away P white box instance so is it

886
00:42:54,579 --> 00:43:00,460
possible to output the public modules

887
00:42:58,569 --> 00:43:03,009
for instance if you would like to

888
00:43:00,460 --> 00:43:05,559
encrypt yourself some data to the

889
00:43:03,010 --> 00:43:09,130
backend if you can assume that the

890
00:43:05,559 --> 00:43:10,809
public exponent is a standard one and if

891
00:43:09,130 --> 00:43:12,910
you are in a white box setting it means

892
00:43:10,809 --> 00:43:14,470
that you can stick the randomness to to

893
00:43:12,910 --> 00:43:16,899
a known constant so it means that you

894
00:43:14,470 --> 00:43:19,419
can know what will be the value of the

895
00:43:16,900 --> 00:43:21,430
padded message for every message so what

896
00:43:19,420 --> 00:43:24,010
you can do is just use your instance to

897
00:43:21,430 --> 00:43:27,368
compute a ciphertext so with a non

898
00:43:24,010 --> 00:43:30,760
padding and do these operations here

899
00:43:27,369 --> 00:43:33,640
without in the modular reduction and we

900
00:43:30,760 --> 00:43:37,390
are going to take a huge number for

901
00:43:33,640 --> 00:43:37,990
instance if you have ego equal to the 16

902
00:43:37,390 --> 00:43:40,720
plus 1

903
00:43:37,990 --> 00:43:43,720
you see prime value here will be about 2

904
00:43:40,720 --> 00:43:46,359
to the 24 byte which is my 1 million

905
00:43:43,720 --> 00:43:49,390
bytes number but still if you compute

906
00:43:46,359 --> 00:43:53,619
the GCD so the greatest common divisor

907
00:43:49,390 --> 00:43:56,440
on those two value here so 256 bytes two

908
00:43:53,619 --> 00:43:58,809
to the 24 bytes computing the GCD

909
00:43:56,440 --> 00:44:00,609
between those two values is kind of

910
00:43:58,809 --> 00:44:02,619
trivial it takes less than one minute on

911
00:44:00,609 --> 00:44:04,660
my laptop and you will recover ends

912
00:44:02,619 --> 00:44:08,410
which mean that here you can extract

913
00:44:04,660 --> 00:44:11,529
very algorithmically a public modules so

914
00:44:08,410 --> 00:44:14,529
there are lot a lot of caveat here

915
00:44:11,530 --> 00:44:19,360
with respect to crypto and this is

916
00:44:14,530 --> 00:44:22,000
something I want 22 to outline so

917
00:44:19,360 --> 00:44:25,740
perfect it's time to conclude them so

918
00:44:22,000 --> 00:44:28,210
today we barely know how to implement

919
00:44:25,740 --> 00:44:33,419
secure cryptography in the white box

920
00:44:28,210 --> 00:44:36,640
model unless maybe for incompressible

921
00:44:33,420 --> 00:44:39,960
implementations by secure cryptography I

922
00:44:36,640 --> 00:44:42,490
mean an implementation that can be

923
00:44:39,960 --> 00:44:46,780
probably the who security can be

924
00:44:42,490 --> 00:44:49,689
probably linked to a hard difficult

925
00:44:46,780 --> 00:44:52,770
problem like we are doing it for for RSA

926
00:44:49,690 --> 00:44:55,510
or AP or ellipticals on the right today

927
00:44:52,770 --> 00:44:59,680
so we don't know how to do it

928
00:44:55,510 --> 00:45:02,110
research is in progress but still white

929
00:44:59,680 --> 00:45:04,419
box crypto is useful a white box crypto

930
00:45:02,110 --> 00:45:06,910
is performing practice by the industry

931
00:45:04,420 --> 00:45:12,340
there are many many secret designs out

932
00:45:06,910 --> 00:45:15,940
in in the wild and it's a very fun area

933
00:45:12,340 --> 00:45:19,410
to play with and I think that everything

934
00:45:15,940 --> 00:45:19,850
I wanted to to say so that's it

935
00:45:19,410 --> 00:45:23,799
[Music]

936
00:45:19,850 --> 00:45:23,799
[Applause]

937
00:45:25,340 --> 00:45:38,200
[Music]

938
00:45:27,930 --> 00:45:40,960
questions right the question is it

939
00:45:38,200 --> 00:45:43,509
possible to keep up the resistance

940
00:45:40,960 --> 00:45:45,100
against all the timing attacks and

941
00:45:43,510 --> 00:45:51,330
side-channel attacks when you do code

942
00:45:45,100 --> 00:45:51,330
dissolving that's a very good question

943
00:45:54,120 --> 00:45:59,140
depends of your algorithm for sure

944
00:45:56,440 --> 00:46:01,090
but you you will have to take you are

945
00:45:59,140 --> 00:46:03,549
you will have to ensure and to measure

946
00:46:01,090 --> 00:46:05,410
it and to have some experimental

947
00:46:03,550 --> 00:46:08,110
insurance that that it works but for

948
00:46:05,410 --> 00:46:10,440
sure it is a difficult as soon as you

949
00:46:08,110 --> 00:46:16,410
begin to obviously to cut off Fisk eight

950
00:46:10,440 --> 00:46:20,500
time constant time constant algorithms

951
00:46:16,410 --> 00:46:20,710
then everything evil can can happen for

952
00:46:20,500 --> 00:46:23,050
sure

953
00:46:20,710 --> 00:46:24,820
so it's mean here that will have also to

954
00:46:23,050 --> 00:46:28,330
to try to mitigate this by using

955
00:46:24,820 --> 00:46:31,870
blending tactics if you are doing ICP

956
00:46:28,330 --> 00:46:35,110
vicki operations but then you will have

957
00:46:31,870 --> 00:46:37,630
to use some randomness so the randomness

958
00:46:35,110 --> 00:46:39,190
communitas your system is maybe not you

959
00:46:37,630 --> 00:46:41,020
cannot trust it so you will have to

960
00:46:39,190 --> 00:46:43,470
extract the randomness out of the

961
00:46:41,020 --> 00:46:47,890
message in a secret way mixing this so

962
00:46:43,470 --> 00:46:50,169
is it possible to have a good difference

963
00:46:47,890 --> 00:46:56,819
yes it possible to have a perfect

964
00:46:50,170 --> 00:46:58,740
difference maybe not more questions

965
00:46:56,820 --> 00:47:02,140
[Music]

966
00:46:58,740 --> 00:47:06,250
hello is there anything between a white

967
00:47:02,140 --> 00:47:08,290
box and a grey box scenario for example

968
00:47:06,250 --> 00:47:10,180
you know in Windows you have the TPM so

969
00:47:08,290 --> 00:47:11,860
you know your ID stuff in there and

970
00:47:10,180 --> 00:47:15,819
nobody can access that is there anything

971
00:47:11,860 --> 00:47:18,010
where if you if you know that you're

972
00:47:15,820 --> 00:47:20,860
being observed by an attacker of

973
00:47:18,010 --> 00:47:22,960
malicious agent you can change your

974
00:47:20,860 --> 00:47:25,330
behavior a run time is there anything

975
00:47:22,960 --> 00:47:27,280
that is mentioning the kind of game

976
00:47:25,330 --> 00:47:30,069
theory right you get you know there's a

977
00:47:27,280 --> 00:47:31,840
lot of that in malware Packers and

978
00:47:30,070 --> 00:47:33,340
Packers you know if they know you know

979
00:47:31,840 --> 00:47:34,060
they have been executing an environment

980
00:47:33,340 --> 00:47:35,590
or a beyond row

981
00:47:34,060 --> 00:47:36,759
you know debug David they will change

982
00:47:35,590 --> 00:47:38,990
their behavior rights is there anything

983
00:47:36,760 --> 00:47:42,050
that so

984
00:47:38,990 --> 00:47:43,759
the role of deriving a right box script

985
00:47:42,050 --> 00:47:46,730
or instance is really to make their life

986
00:47:43,760 --> 00:47:49,520
of another sorry costly so everything is

987
00:47:46,730 --> 00:47:51,320
allowed so I have mentioned comments off

988
00:47:49,520 --> 00:47:52,910
top discussion as well common software

989
00:47:51,320 --> 00:47:56,060
tamper-proof in but for sure you can

990
00:47:52,910 --> 00:47:58,040
also use anti debug tricks and all this

991
00:47:56,060 --> 00:47:59,869
kind of stuff to take decision from

992
00:47:58,040 --> 00:48:03,529
internally and internally to the

993
00:47:59,869 --> 00:48:06,980
implementation all those wanted about

994
00:48:03,530 --> 00:48:10,400
tricks are relatively easy to bypass but

995
00:48:06,980 --> 00:48:13,100
to bypass them you will need some time

996
00:48:10,400 --> 00:48:14,330
so some time is some money so every time

997
00:48:13,100 --> 00:48:18,500
you increase the video cost of the

998
00:48:14,330 --> 00:48:20,150
address sorry but for sure why not you

999
00:48:18,500 --> 00:48:29,080
are in a white box setting so you must

1000
00:48:20,150 --> 00:48:34,619
defend anybody else know so thank you

1001
00:48:29,080 --> 00:48:34,619
[Applause]

1002
00:48:37,480 --> 00:48:39,540
you

