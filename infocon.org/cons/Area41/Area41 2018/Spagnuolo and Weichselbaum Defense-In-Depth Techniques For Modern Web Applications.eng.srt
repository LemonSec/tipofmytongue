1
00:00:02,990 --> 00:00:07,020
thank you

2
00:00:04,410 --> 00:00:09,330
hello everyone we're super glad to be

3
00:00:07,020 --> 00:00:14,540
here again we have been here like two

4
00:00:09,330 --> 00:00:17,100
years ago was really nice so we're both

5
00:00:14,540 --> 00:00:19,590
from Zurich actually so it was not too

6
00:00:17,100 --> 00:00:23,779
far for us to come here we work at

7
00:00:19,590 --> 00:00:26,789
Google and we are basically focusing on

8
00:00:23,779 --> 00:00:29,609
defense-in-depth technologies and we

9
00:00:26,789 --> 00:00:32,640
kind of try to roll out interesting

10
00:00:29,609 --> 00:00:34,620
browser features to protect the user if

11
00:00:32,640 --> 00:00:38,190
some you know if the primary defense

12
00:00:34,620 --> 00:00:43,349
maybe doesn't work so well

13
00:00:38,190 --> 00:00:45,769
this is Michaela I'm Lukas and yes we

14
00:00:43,350 --> 00:00:48,030
have a pretty interesting agenda today

15
00:00:45,770 --> 00:00:51,270
with a lot of very interesting

16
00:00:48,030 --> 00:00:53,910
defense-in-depth techniques I will start

17
00:00:51,270 --> 00:00:57,750
with content security policy two years

18
00:00:53,910 --> 00:01:00,750
ago we had a talk at area 41 are talking

19
00:00:57,750 --> 00:01:03,510
about how to break bad CSP this talk

20
00:01:00,750 --> 00:01:06,299
will basically build on top of that so

21
00:01:03,510 --> 00:01:08,729
will not restate all the you know the

22
00:01:06,299 --> 00:01:11,610
bypasses I would rather like to focus on

23
00:01:08,729 --> 00:01:12,900
how to roll out a strict policy that

24
00:01:11,610 --> 00:01:15,240
actually provides some security

25
00:01:12,900 --> 00:01:18,720
guarantees and what we've kind of

26
00:01:15,240 --> 00:01:21,149
learned in the last two three years at

27
00:01:18,720 --> 00:01:24,330
Google trying to roll out CSP is quite

28
00:01:21,150 --> 00:01:26,130
an interesting journey and then Michaela

29
00:01:24,330 --> 00:01:27,720
will talk about a lot of other very

30
00:01:26,130 --> 00:01:30,479
interesting defense-in-depth techniques

31
00:01:27,720 --> 00:01:32,729
some of them are not even implemented

32
00:01:30,479 --> 00:01:34,860
yet but are in the specking phase but we

33
00:01:32,729 --> 00:01:39,539
still believe they're very promising and

34
00:01:34,860 --> 00:01:41,640
wanted to share that so brief question

35
00:01:39,540 --> 00:01:44,939
around the room who knows what content

36
00:01:41,640 --> 00:01:47,640
security policy is awesome quite some

37
00:01:44,939 --> 00:01:49,470
folks that's very nice for those who

38
00:01:47,640 --> 00:01:54,409
don't know I will do like a super quick

39
00:01:49,470 --> 00:01:58,740
really quick intro on one or two slides

40
00:01:54,409 --> 00:02:02,189
but it will be kind of advanced actually

41
00:01:58,740 --> 00:02:05,329
so what is content security policy it's

42
00:02:02,189 --> 00:02:08,699
actually a response header that

43
00:02:05,329 --> 00:02:14,209
instructs the browser to kinda restrict

44
00:02:08,699 --> 00:02:14,209
what can be loaded in the browser

45
00:02:14,450 --> 00:02:21,839
so the most prominent use case is

46
00:02:19,250 --> 00:02:26,790
mitigating cross-site scripting there's

47
00:02:21,840 --> 00:02:29,360
still a very you know common issue so

48
00:02:26,790 --> 00:02:31,709
that's quite an interesting use case and

49
00:02:29,360 --> 00:02:34,860
but as I said it's a defense-in-depth

50
00:02:31,710 --> 00:02:36,660
mechanism so you always should fix the

51
00:02:34,860 --> 00:02:39,800
underlying box right you should not only

52
00:02:36,660 --> 00:02:43,350
rely on our content security policy to

53
00:02:39,800 --> 00:02:46,350
be your first client defense so you have

54
00:02:43,350 --> 00:02:48,960
to take care of you know input

55
00:02:46,350 --> 00:02:50,820
validation and output encoding since

56
00:02:48,960 --> 00:02:53,910
it's not a replacement for secure coding

57
00:02:50,820 --> 00:02:56,070
practices and something that we often

58
00:02:53,910 --> 00:02:57,959
see nowadays is that CSP is used to

59
00:02:56,070 --> 00:02:59,640
prevent data exfiltration it's

60
00:02:57,959 --> 00:03:02,340
absolutely not suited for that I'll have

61
00:02:59,640 --> 00:03:04,829
a slide at the end of the CSP part

62
00:03:02,340 --> 00:03:08,400
explaining this showing a two or three

63
00:03:04,830 --> 00:03:11,520
bypasses for that just wanted to

64
00:03:08,400 --> 00:03:15,390
highlight that as well so CSP is around

65
00:03:11,520 --> 00:03:19,500
for many years now and it's an extremely

66
00:03:15,390 --> 00:03:22,290
complex specification actually because

67
00:03:19,500 --> 00:03:24,390
they kept adding things they kind of

68
00:03:22,290 --> 00:03:25,859
liked houses peace deliver to the

69
00:03:24,390 --> 00:03:27,660
browser because it's a response header

70
00:03:25,860 --> 00:03:29,550
and you can plug in new things very

71
00:03:27,660 --> 00:03:31,560
easily with new keywords and new

72
00:03:29,550 --> 00:03:35,840
directives so it actually became quite

73
00:03:31,560 --> 00:03:37,860
popular for you know kind of unrelated

74
00:03:35,840 --> 00:03:40,290
techniques as well and they basically

75
00:03:37,860 --> 00:03:43,019
just use this USB transport mechanism so

76
00:03:40,290 --> 00:03:44,579
that makes it quite hard to understand

77
00:03:43,019 --> 00:03:45,690
if someone says they're all other CSP

78
00:03:44,580 --> 00:03:48,120
what do you actually mean with that

79
00:03:45,690 --> 00:03:49,980
right because it could be everything

80
00:03:48,120 --> 00:03:52,440
from you know blocking frames to

81
00:03:49,980 --> 00:03:55,320
mitigating trusted scripting to trying

82
00:03:52,440 --> 00:03:58,590
to prevent data exfiltration so I kind

83
00:03:55,320 --> 00:04:00,060
of collected the I don't know big use

84
00:03:58,590 --> 00:04:04,310
cases there's probably other ones as

85
00:04:00,060 --> 00:04:08,310
well as I said we'll focus on XSS here

86
00:04:04,310 --> 00:04:10,500
there's also more advanced you know

87
00:04:08,310 --> 00:04:13,560
injection attacks that a CSP can

88
00:04:10,500 --> 00:04:17,070
mitigate which are basically UI based so

89
00:04:13,560 --> 00:04:19,320
there was for example a key logger that

90
00:04:17,070 --> 00:04:24,180
was stealing password just written with

91
00:04:19,320 --> 00:04:27,210
with CSS and CSS selectors and in theory

92
00:04:24,180 --> 00:04:27,780
can also use CSP to protect against

93
00:04:27,210 --> 00:04:29,638
those but

94
00:04:27,780 --> 00:04:31,260
already quite an advanced topic then

95
00:04:29,639 --> 00:04:33,210
just completely different things like

96
00:04:31,260 --> 00:04:35,099
you know forcing HTTP by up with

97
00:04:33,210 --> 00:04:38,760
insecure requests or block or mixed

98
00:04:35,100 --> 00:04:40,830
content and then there is as already

99
00:04:38,760 --> 00:04:43,560
mentioned you can restrict framing like

100
00:04:40,830 --> 00:04:46,859
framing of childs but also like extreme

101
00:04:43,560 --> 00:04:48,900
options prevent who or more or less

102
00:04:46,860 --> 00:04:51,750
define who can frame your under which

103
00:04:48,900 --> 00:04:53,669
conditions for you know click checking

104
00:04:51,750 --> 00:04:55,680
protection mostly or if you're serving

105
00:04:53,669 --> 00:04:57,840
user content on the sensitive domain

106
00:04:55,680 --> 00:05:00,240
which you never shoot right then you

107
00:04:57,840 --> 00:05:02,099
could set a block all policy to prevent

108
00:05:00,240 --> 00:05:06,690
that any JavaScript ever gets executed

109
00:05:02,100 --> 00:05:08,660
on a certain response as I mentioned

110
00:05:06,690 --> 00:05:14,040
will focus on the first category here

111
00:05:08,660 --> 00:05:16,620
it's a huge topic actually and I think

112
00:05:14,040 --> 00:05:19,740
it's also Devon use case that CSP was

113
00:05:16,620 --> 00:05:23,700
originally designed for and varied so

114
00:05:19,740 --> 00:05:26,669
actually and it is strongest two or

115
00:05:23,700 --> 00:05:29,070
three years ago we did a study we

116
00:05:26,669 --> 00:05:31,770
basically took the google corpus of the

117
00:05:29,070 --> 00:05:34,409
internet and try to get all this year's

118
00:05:31,770 --> 00:05:35,549
piece that were set on responses and it

119
00:05:34,410 --> 00:05:37,680
turns out that most of them were

120
00:05:35,550 --> 00:05:40,560
whitelist pasted mentioned what that

121
00:05:37,680 --> 00:05:42,510
means in a second and with some generic

122
00:05:40,560 --> 00:05:45,930
rules we could basically automatically

123
00:05:42,510 --> 00:05:47,669
bypass 94% of all of these it's pretty

124
00:05:45,930 --> 00:05:49,050
bad right because it basically tells you

125
00:05:47,669 --> 00:05:51,659
that all these people who spend like

126
00:05:49,050 --> 00:05:55,440
years rolling out CSP actually gain very

127
00:05:51,660 --> 00:05:57,000
little from that so this part is

128
00:05:55,440 --> 00:05:58,200
actually a PD because the security

129
00:05:57,000 --> 00:06:02,039
guarantees in theory are quite

130
00:05:58,200 --> 00:06:04,909
interesting especially of non-space DSPs

131
00:06:02,039 --> 00:06:09,260
but they're almost impossible to use

132
00:06:04,910 --> 00:06:12,450
without any other help so we basically

133
00:06:09,260 --> 00:06:14,010
introduced strict dynamic which I'll

134
00:06:12,450 --> 00:06:15,479
explain in a second what it means and

135
00:06:14,010 --> 00:06:17,780
with that we actually were quite

136
00:06:15,479 --> 00:06:21,419
successful in rolling out CSP at Google

137
00:06:17,780 --> 00:06:23,549
so there's different types of content

138
00:06:21,419 --> 00:06:26,430
security policies

139
00:06:23,550 --> 00:06:30,120
if you want different flavors to protect

140
00:06:26,430 --> 00:06:34,250
against cross-site scripting widely

141
00:06:30,120 --> 00:06:37,349
spaced are basically in 95% of the cases

142
00:06:34,250 --> 00:06:38,909
trivially to bypass the idea is you have

143
00:06:37,349 --> 00:06:40,710
a content security policy here which

144
00:06:38,909 --> 00:06:41,760
gets delivered to the browser it

145
00:06:40,710 --> 00:06:44,549
basically tells the

146
00:06:41,760 --> 00:06:47,070
also you know you are a load allowed to

147
00:06:44,550 --> 00:06:50,490
load scripts from the same domain or yep

148
00:06:47,070 --> 00:06:52,980
dot-com and in this case yep top comm is

149
00:06:50,490 --> 00:06:55,380
allowed by the CSP and it loads if you

150
00:06:52,980 --> 00:06:57,780
have a markup injection and an attack it

151
00:06:55,380 --> 00:07:00,690
injects a script tag like a source

152
00:06:57,780 --> 00:07:03,150
script or an inline script this CSP will

153
00:07:00,690 --> 00:07:05,400
compare the source with the whitelist

154
00:07:03,150 --> 00:07:07,200
and say it's not allowed so I'm blocking

155
00:07:05,400 --> 00:07:09,090
it and also the inline script is

156
00:07:07,200 --> 00:07:11,640
disallowed because there's no answer

157
00:07:09,090 --> 00:07:13,609
Finland in the policy that's the seal

158
00:07:11,640 --> 00:07:15,840
the our basic concept of CSP

159
00:07:13,610 --> 00:07:18,240
unfortunately this is very broken

160
00:07:15,840 --> 00:07:21,000
there's a research paper we published

161
00:07:18,240 --> 00:07:23,310
about that and people who have been here

162
00:07:21,000 --> 00:07:27,660
two years ago also have seen all these

163
00:07:23,310 --> 00:07:31,320
bypasses basically if you host angular

164
00:07:27,660 --> 00:07:33,390
or have chasing PN points anywhere on

165
00:07:31,320 --> 00:07:36,480
your white lists your CSP is trivially

166
00:07:33,390 --> 00:07:40,020
by possible so then there's non-space

167
00:07:36,480 --> 00:07:43,830
DSPs which are quite interesting concept

168
00:07:40,020 --> 00:07:46,409
because basically you don't whitelist

169
00:07:43,830 --> 00:07:48,270
are all the domains which is super

170
00:07:46,410 --> 00:07:50,070
fragile and hard because whenever you

171
00:07:48,270 --> 00:07:52,620
change a path will break your site

172
00:07:50,070 --> 00:07:54,900
instead you in the policy you deliver

173
00:07:52,620 --> 00:07:57,780
you set a random nonce for every

174
00:07:54,900 --> 00:07:59,880
response and scripts that have the same

175
00:07:57,780 --> 00:08:04,919
nonce attribute set will be allowed to

176
00:07:59,880 --> 00:08:08,310
execute this is quite nice because you

177
00:08:04,920 --> 00:08:10,080
get rid of all the JSONP bypasses all

178
00:08:08,310 --> 00:08:11,430
this kind of stuff and it reduced the

179
00:08:10,080 --> 00:08:12,780
burden of creating a whitelist in the

180
00:08:11,430 --> 00:08:14,910
first place

181
00:08:12,780 --> 00:08:17,250
this is also a reason why it was so easy

182
00:08:14,910 --> 00:08:18,630
for us to roll it out at Google so what

183
00:08:17,250 --> 00:08:21,090
this is what the nonce based CSP looks

184
00:08:18,630 --> 00:08:23,430
like it just has a nonce here and these

185
00:08:21,090 --> 00:08:26,130
script tags also have the nonce so they

186
00:08:23,430 --> 00:08:27,960
will be allowed to execute if an

187
00:08:26,130 --> 00:08:31,140
attacker and check the script tag he

188
00:08:27,960 --> 00:08:33,449
will not know the random nonce that is

189
00:08:31,140 --> 00:08:35,309
set pair response so the browser will

190
00:08:33,450 --> 00:08:38,880
deny execution of these scripts inline

191
00:08:35,309 --> 00:08:41,609
scripts and source scripts so what's the

192
00:08:38,880 --> 00:08:43,740
problem of that in theory this is quite

193
00:08:41,610 --> 00:08:45,570
a cool concept the problem is if you

194
00:08:43,740 --> 00:08:47,550
don't control the entire JavaScript

195
00:08:45,570 --> 00:08:48,870
ecosystem of your website you'll

196
00:08:47,550 --> 00:08:50,819
probably get problems if you load

197
00:08:48,870 --> 00:08:52,650
widgets or other third-party JavaScript

198
00:08:50,820 --> 00:08:55,410
for example if you load a Twitter widget

199
00:08:52,650 --> 00:08:57,870
it will do like a trait element script

200
00:08:55,410 --> 00:09:00,000
and Load child scripts right since these

201
00:08:57,870 --> 00:09:02,339
transcripts don't have nonce except they

202
00:09:00,000 --> 00:09:03,930
will be blocked from execution and there

203
00:09:02,339 --> 00:09:05,399
is probably nothing you can do about it

204
00:09:03,930 --> 00:09:07,920
because you don't control the code base

205
00:09:05,399 --> 00:09:09,839
of the Twitter widget or the widget or

206
00:09:07,920 --> 00:09:12,240
Facebook widget or whatever right or add

207
00:09:09,839 --> 00:09:14,670
libraries I don't know so that's

208
00:09:12,240 --> 00:09:16,920
actually a problem this is why actually

209
00:09:14,670 --> 00:09:18,750
no one is using notes only csps

210
00:09:16,920 --> 00:09:20,339
nowadays because they're very hard to

211
00:09:18,750 --> 00:09:23,370
roll out is except if you have like

212
00:09:20,339 --> 00:09:25,610
maybe small applications so this is what

213
00:09:23,370 --> 00:09:28,620
Swick dynamic is for it basically the

214
00:09:25,610 --> 00:09:30,240
propagates trust to child scripts the

215
00:09:28,620 --> 00:09:32,310
assumption is if you already have script

216
00:09:30,240 --> 00:09:34,170
executioners and then you know even as

217
00:09:32,310 --> 00:09:37,469
an attacker it's game over anyway right

218
00:09:34,170 --> 00:09:40,979
so child script execution is not really

219
00:09:37,470 --> 00:09:43,920
the security boundary here so if you

220
00:09:40,980 --> 00:09:46,529
have a script with the norms that is

221
00:09:43,920 --> 00:09:48,569
blessed by CSP child scripts will be

222
00:09:46,529 --> 00:09:51,259
allowed to execute this is very nice

223
00:09:48,569 --> 00:09:54,839
because suddenly all the widgets and

224
00:09:51,259 --> 00:09:57,329
other code paths that do like you know

225
00:09:54,839 --> 00:10:01,740
module loading in JavaScript just start

226
00:09:57,329 --> 00:10:05,370
working out of the box and there's some

227
00:10:01,740 --> 00:10:07,949
details here only script creation

228
00:10:05,370 --> 00:10:10,949
fruited JavaScript a Dom API will be

229
00:10:07,949 --> 00:10:13,949
allowed anything that includes a parser

230
00:10:10,949 --> 00:10:15,990
like document write or in your HTML will

231
00:10:13,949 --> 00:10:17,459
not propagate the trust to Java scripts

232
00:10:15,990 --> 00:10:22,500
because these are very common sources of

233
00:10:17,459 --> 00:10:26,459
Nam XSS one problem is here though if

234
00:10:22,500 --> 00:10:29,189
this s dot script source is attacker

235
00:10:26,459 --> 00:10:31,380
control or user controlled you basically

236
00:10:29,189 --> 00:10:36,089
can bypass a strict dynamic CSP right

237
00:10:31,380 --> 00:10:41,610
because if this value is not you know

238
00:10:36,089 --> 00:10:45,899
trusted you know it's it will execute

239
00:10:41,610 --> 00:10:49,319
attacker code in that scenario so in

240
00:10:45,899 --> 00:10:52,709
general we can basically classify these

241
00:10:49,319 --> 00:10:54,649
nonce based CSP is into multiple levels

242
00:10:52,709 --> 00:10:58,229
with multiple security guarantees and

243
00:10:54,649 --> 00:11:01,079
multiple levels of difficulty on how

244
00:10:58,230 --> 00:11:04,170
hard they are to deploy so this is easy

245
00:11:01,079 --> 00:11:06,180
to deploy and some security guarantees

246
00:11:04,170 --> 00:11:09,030
right this PC speeds are basically

247
00:11:06,180 --> 00:11:11,520
useless I visit he didn't mention them

248
00:11:09,030 --> 00:11:14,280
but non-space cspp of strict dynamic and

249
00:11:11,520 --> 00:11:16,710
unsafe evil are quite easy to deploy and

250
00:11:14,280 --> 00:11:18,870
they give you quite some interesting

251
00:11:16,710 --> 00:11:19,830
security guarantees so for example there

252
00:11:18,870 --> 00:11:23,400
is no whitelist

253
00:11:19,830 --> 00:11:26,460
CSP bypasses they basically mitigate all

254
00:11:23,400 --> 00:11:29,760
reflected and stored XSS which is a

255
00:11:26,460 --> 00:11:32,670
pretty strong guarantee they mitigate

256
00:11:29,760 --> 00:11:37,140
the XS SS that are based on JavaScript

257
00:11:32,670 --> 00:11:39,449
your eyes and especially if you have

258
00:11:37,140 --> 00:11:41,100
templating systems that can put the

259
00:11:39,450 --> 00:11:42,600
norms as automatically on script tags

260
00:11:41,100 --> 00:11:45,690
because they kind of context-aware

261
00:11:42,600 --> 00:11:48,060
they are also quite easy to roll out and

262
00:11:45,690 --> 00:11:50,070
padam XSS many Dom excesses are

263
00:11:48,060 --> 00:11:53,550
mitigated like inner HTML this kind of

264
00:11:50,070 --> 00:11:56,010
stuff but Dom XSS is where the root

265
00:11:53,550 --> 00:12:00,750
cause of the XSS is a tacher controlled

266
00:11:56,010 --> 00:12:02,100
source are not mitigated if you want to

267
00:12:00,750 --> 00:12:05,970
mitigate that as well you have to go to

268
00:12:02,100 --> 00:12:09,390
here one one step in between is evil

269
00:12:05,970 --> 00:12:12,900
free CSPs some libraries still use

270
00:12:09,390 --> 00:12:15,330
unsafe evil so if you can just remove it

271
00:12:12,900 --> 00:12:19,380
I think it's 2018 so hopefully we don't

272
00:12:15,330 --> 00:12:21,000
rely on evil too much anymore then of

273
00:12:19,380 --> 00:12:23,030
course we don't allow unsafe evil you

274
00:12:21,000 --> 00:12:26,220
also get rid of evil based exercises

275
00:12:23,030 --> 00:12:27,449
very interesting categories up here as I

276
00:12:26,220 --> 00:12:30,120
mentioned before that is like to

277
00:12:27,450 --> 00:12:32,340
pronounce only CSP they are kind of hard

278
00:12:30,120 --> 00:12:36,510
to roll out because you need to control

279
00:12:32,340 --> 00:12:39,000
the full JavaScript ecosystem we

280
00:12:36,510 --> 00:12:42,900
basically have most of our Google csps

281
00:12:39,000 --> 00:12:44,430
are here you're quite strong but for you

282
00:12:42,900 --> 00:12:46,290
know accounts of google.com and other

283
00:12:44,430 --> 00:12:48,300
high sensitive domains we are actually

284
00:12:46,290 --> 00:12:49,530
currently trying to get up here since

285
00:12:48,300 --> 00:12:51,750
you're in the lucky position of like

286
00:12:49,530 --> 00:12:53,670
controlling basically all the JavaScript

287
00:12:51,750 --> 00:12:56,190
we load but it's still a tremendous task

288
00:12:53,670 --> 00:12:58,079
to you know implement manual nonce

289
00:12:56,190 --> 00:13:01,920
propagation trickle-down denounces to

290
00:12:58,080 --> 00:13:05,790
all child scripts and also yesterday I

291
00:13:01,920 --> 00:13:09,569
basically found out that there is a bug

292
00:13:05,790 --> 00:13:11,880
in Firefox that if you dynamically

293
00:13:09,570 --> 00:13:14,280
create a script tag and set the right

294
00:13:11,880 --> 00:13:15,650
nonce to it and delete the URL of the

295
00:13:14,280 --> 00:13:18,980
script redirect to another script

296
00:13:15,650 --> 00:13:21,600
Firefox blocks that script execution so

297
00:13:18,980 --> 00:13:22,980
luckily we discovered it internally

298
00:13:21,600 --> 00:13:25,980
before we rolled it out to users

299
00:13:22,980 --> 00:13:27,240
breaky login right but yeah if you

300
00:13:25,980 --> 00:13:30,149
follow me on twitter I'll probably file

301
00:13:27,240 --> 00:13:32,160
the back later so that's the interesting

302
00:13:30,149 --> 00:13:33,720
things you find out right if you working

303
00:13:32,160 --> 00:13:35,579
on this just like every now and then

304
00:13:33,720 --> 00:13:37,079
there's a browser parking second why

305
00:13:35,579 --> 00:13:41,880
it's not working and there's like what

306
00:13:37,079 --> 00:13:44,010
the browser yeah so just as an example

307
00:13:41,880 --> 00:13:48,029
this is how typical policy looks like

308
00:13:44,010 --> 00:13:48,750
for every of these levels if you if you

309
00:13:48,029 --> 00:13:50,459
look at that

310
00:13:48,750 --> 00:13:52,529
the really nice thing is you set the

311
00:13:50,459 --> 00:13:54,689
same policy for the entire application

312
00:13:52,529 --> 00:13:56,790
for all applications so you don't have

313
00:13:54,690 --> 00:13:59,639
different white lists and have to fiddle

314
00:13:56,790 --> 00:14:01,620
around as long as the nonce is randomly

315
00:13:59,639 --> 00:14:05,820
generated per response it's fine

316
00:14:01,620 --> 00:14:07,139
this makes it very easy to roll out and

317
00:14:05,820 --> 00:14:11,190
then there's also some interesting new

318
00:14:07,139 --> 00:14:13,949
features coming up in CSP free it's

319
00:14:11,190 --> 00:14:16,440
basically to ease roll out because

320
00:14:13,949 --> 00:14:20,519
sometimes so basically when you roll out

321
00:14:16,440 --> 00:14:21,930
a non-space CSP on click or can in

322
00:14:20,519 --> 00:14:23,880
general like event handlers are blocked

323
00:14:21,930 --> 00:14:27,870
by the browser because it's like inline

324
00:14:23,880 --> 00:14:29,639
scripts so you have to react them out if

325
00:14:27,870 --> 00:14:32,069
you again have some other library and

326
00:14:29,639 --> 00:14:34,949
you cannot be factored out a script

327
00:14:32,069 --> 00:14:37,949
sorry an event handler you can with this

328
00:14:34,949 --> 00:14:41,130
new have keyword hash hash this

329
00:14:37,949 --> 00:14:43,349
JavaScript code and manual allow it by

330
00:14:41,130 --> 00:14:45,360
putting the hash of this into policy of

331
00:14:43,350 --> 00:14:47,130
course this doesn't scale very well if

332
00:14:45,360 --> 00:14:49,680
you have a 15 line event handlers

333
00:14:47,130 --> 00:14:51,480
different ones your policy will explode

334
00:14:49,680 --> 00:14:53,699
so it's not really a working solution

335
00:14:51,480 --> 00:14:55,560
for this kind of case you'll still have

336
00:14:53,699 --> 00:14:57,329
to refactor and the other thing is you

337
00:14:55,560 --> 00:14:59,430
have to be careful because once you

338
00:14:57,329 --> 00:15:01,739
hatch this part they can an attacker

339
00:14:59,430 --> 00:15:03,510
could for example reuse this snippet in

340
00:15:01,740 --> 00:15:05,370
other event handlers in markup

341
00:15:03,510 --> 00:15:07,050
injections and if you hash a lot of

342
00:15:05,370 --> 00:15:10,170
these things you might can change on

343
00:15:07,050 --> 00:15:12,209
interesting action you can make and

344
00:15:10,170 --> 00:15:16,260
create some interesting action chains so

345
00:15:12,209 --> 00:15:18,569
use it with care with care and there's

346
00:15:16,260 --> 00:15:22,139
another one which is I think currently

347
00:15:18,569 --> 00:15:27,240
only the proposal state this is mostly

348
00:15:22,139 --> 00:15:29,370
for for styles i style block and the

349
00:15:27,240 --> 00:15:31,800
style attribute they are quite different

350
00:15:29,370 --> 00:15:35,010
in the power of you know in the

351
00:15:31,800 --> 00:15:36,170
expressive power so a style block can

352
00:15:35,010 --> 00:15:38,660
have query

353
00:15:36,170 --> 00:15:41,269
selectors and by that you can for

354
00:15:38,660 --> 00:15:44,029
example write CSS keylogger if you have

355
00:15:41,269 --> 00:15:46,190
a markup injection a style attribute is

356
00:15:44,029 --> 00:15:49,610
more restricted and cannot do these

357
00:15:46,190 --> 00:15:52,940
powerful queries lectures so developers

358
00:15:49,610 --> 00:15:55,100
love to use style attributes right so in

359
00:15:52,940 --> 00:15:57,920
theory if you want to protect against

360
00:15:55,100 --> 00:16:00,139
this UI paste attacks you could roll out

361
00:15:57,920 --> 00:16:02,500
a non space CSP that nonces all the

362
00:16:00,139 --> 00:16:04,519
style text the inline style text and

363
00:16:02,500 --> 00:16:07,130
prevents an attacker from injecting new

364
00:16:04,519 --> 00:16:09,500
style blocks and with putting in safe

365
00:16:07,130 --> 00:16:13,490
unsafe inline attributes you could still

366
00:16:09,500 --> 00:16:16,850
allow inline styles it's a bit of a hack

367
00:16:13,490 --> 00:16:20,560
but it kinda raises the bar to some

368
00:16:16,850 --> 00:16:24,949
extent hoping that the CSS spec never

369
00:16:20,560 --> 00:16:26,420
introduces too powerful security

370
00:16:24,949 --> 00:16:29,209
lectures into the style after abuse of

371
00:16:26,420 --> 00:16:30,889
elements so we're not using this was

372
00:16:29,209 --> 00:16:33,920
just interesting new features which we

373
00:16:30,889 --> 00:16:35,930
wanted to share and yeah why don't you

374
00:16:33,920 --> 00:16:37,670
see us before data exfiltration because

375
00:16:35,930 --> 00:16:40,750
basically it's game over once the

376
00:16:37,670 --> 00:16:43,219
attacker gains script execution access

377
00:16:40,750 --> 00:16:45,860
if you can execute scripts you can

378
00:16:43,220 --> 00:16:49,130
basically do like document write a link

379
00:16:45,860 --> 00:16:51,529
tag in the URL you put whatever data you

380
00:16:49,130 --> 00:16:53,709
want to exfiltrate and then for example

381
00:16:51,529 --> 00:16:56,959
you you click that with javascript right

382
00:16:53,709 --> 00:16:59,329
CSP does not cover navigation so these

383
00:16:56,959 --> 00:17:01,518
kind of things can be easily used to

384
00:16:59,329 --> 00:17:02,989
exfiltrate data so that the main goal

385
00:17:01,519 --> 00:17:05,150
really is to prevent the script

386
00:17:02,990 --> 00:17:07,040
execution in the first place once you

387
00:17:05,150 --> 00:17:09,500
have that script execution is game over

388
00:17:07,040 --> 00:17:12,020
right and this other ones like post

389
00:17:09,500 --> 00:17:14,000
message DNS prefetch vina to the open

390
00:17:12,020 --> 00:17:16,400
just countless of other Dom api's

391
00:17:14,000 --> 00:17:20,299
browser api's that allow you to

392
00:17:16,400 --> 00:17:22,790
exfiltrate data right very quick slide

393
00:17:20,299 --> 00:17:23,589
about what we have done the last two

394
00:17:22,790 --> 00:17:26,990
years

395
00:17:23,589 --> 00:17:30,379
basically we managed to roll out nonce

396
00:17:26,990 --> 00:17:33,380
based CSP at Google and currently we're

397
00:17:30,380 --> 00:17:35,900
over 50% of the outgoing traffic having

398
00:17:33,380 --> 00:17:39,710
a nonce based CSV set on the responses

399
00:17:35,900 --> 00:17:41,150
which is something I've three years ago

400
00:17:39,710 --> 00:17:43,940
I would not have believed that would be

401
00:17:41,150 --> 00:17:45,500
possible because it is like white lace

402
00:17:43,940 --> 00:17:47,990
piece based these pieces are so tedious

403
00:17:45,500 --> 00:17:49,630
to roll out and so fragile and the non

404
00:17:47,990 --> 00:17:53,470
spaced ones are actually really

405
00:17:49,630 --> 00:17:57,690
much better in that regard and of course

406
00:17:53,470 --> 00:18:00,640
we try to focus initially on it in very

407
00:17:57,690 --> 00:18:05,410
most sensitive domains like login gmail

408
00:18:00,640 --> 00:18:07,900
Docs and gradually we tried to move also

409
00:18:05,410 --> 00:18:10,510
to not only see his piece but for Google

410
00:18:07,900 --> 00:18:13,060
it's usually just a small improvement

411
00:18:10,510 --> 00:18:15,490
since we have very same JavaScript

412
00:18:13,060 --> 00:18:17,230
frameworks that don't do like dynamic

413
00:18:15,490 --> 00:18:18,640
script creation based on some Dom

414
00:18:17,230 --> 00:18:22,330
snippets like you know I don't know

415
00:18:18,640 --> 00:18:25,120
bootstrap or jQuery with dot HTML and is

416
00:18:22,330 --> 00:18:27,250
kind of things so it's an improvement

417
00:18:25,120 --> 00:18:29,679
but for us that strict dynamic based

418
00:18:27,250 --> 00:18:32,110
ones are also quite good except if you

419
00:18:29,680 --> 00:18:38,080
use polymer then it's yeah it's really

420
00:18:32,110 --> 00:18:41,260
bad framework yes and we also have a

421
00:18:38,080 --> 00:18:42,990
couple of tools for rolling out CSP some

422
00:18:41,260 --> 00:18:45,490
of them we open sourced like this ESP

423
00:18:42,990 --> 00:18:46,960
evaluator you can basically paste a

424
00:18:45,490 --> 00:18:49,240
policy and we'll tell you in how many

425
00:18:46,960 --> 00:18:51,010
ways the policy is broken if you have

426
00:18:49,240 --> 00:18:53,770
anything read it usually means there's

427
00:18:51,010 --> 00:18:56,320
very little benefit of having the policy

428
00:18:53,770 --> 00:18:58,870
in the first place there's also a lot of

429
00:18:56,320 --> 00:19:01,210
documentation I think it might be linked

430
00:18:58,870 --> 00:19:05,879
from there as well on how to roll out

431
00:19:01,210 --> 00:19:08,290
non-space CSP with strict dynamic I

432
00:19:05,880 --> 00:19:12,780
think it's ESP with google.com slash

433
00:19:08,290 --> 00:19:15,970
Docs and internally unfortunately not

434
00:19:12,780 --> 00:19:18,040
publicly available they also have CSP

435
00:19:15,970 --> 00:19:21,490
front-end to make sense of all the

436
00:19:18,040 --> 00:19:23,320
incoming CSP violation reports because

437
00:19:21,490 --> 00:19:25,000
you would be surprised once you roll out

438
00:19:23,320 --> 00:19:26,770
a policy how many violation reports you

439
00:19:25,000 --> 00:19:28,960
get although it's actually kind of

440
00:19:26,770 --> 00:19:31,930
working because of antivirus is

441
00:19:28,960 --> 00:19:34,450
injecting scripts in every page malware

442
00:19:31,930 --> 00:19:36,960
injecting scripts on you know money like

443
00:19:34,450 --> 00:19:41,470
monetizing all all page the user goes to

444
00:19:36,960 --> 00:19:44,770
or just browser extensions who use bad

445
00:19:41,470 --> 00:19:47,110
browser API is to also inject strips

446
00:19:44,770 --> 00:19:49,030
into pages right so you get a lot of

447
00:19:47,110 --> 00:19:51,939
noise and you kind of need to crunch it

448
00:19:49,030 --> 00:19:54,820
down to duplicate it to be able to find

449
00:19:51,940 --> 00:19:56,500
actual breakages and yeah this is

450
00:19:54,820 --> 00:19:59,350
something you know Makela mostly worked

451
00:19:56,500 --> 00:20:01,870
on and it's really nice actually

452
00:19:59,350 --> 00:20:02,799
and with that I'm handing over to s RI

453
00:20:01,870 --> 00:20:05,350
and

454
00:20:02,799 --> 00:20:06,549
can if you have questions we have like

455
00:20:05,350 --> 00:20:11,080
10 minutes at the end of the

456
00:20:06,549 --> 00:20:14,500
presentation for that so thank you

457
00:20:11,080 --> 00:20:17,639
hi everyone great to be here again so

458
00:20:14,500 --> 00:20:21,039
that was the first part is around CSB

459
00:20:17,640 --> 00:20:22,779
what we had to do how we achieved it and

460
00:20:21,039 --> 00:20:25,149
hopefully to give you a better picture

461
00:20:22,779 --> 00:20:27,840
of what's the current state and how you

462
00:20:25,149 --> 00:20:30,309
can also take advantage of of CSP and

463
00:20:27,840 --> 00:20:33,730
make your web properties more more

464
00:20:30,309 --> 00:20:35,860
secure now we're talking about some new

465
00:20:33,730 --> 00:20:39,010
and lesser-known web mitigation

466
00:20:35,860 --> 00:20:42,370
techniques some are it selects ESP

467
00:20:39,010 --> 00:20:45,580
header you can put and on your on your

468
00:20:42,370 --> 00:20:47,620
web properties to add some kind of extra

469
00:20:45,580 --> 00:20:49,689
protection defense in that and some

470
00:20:47,620 --> 00:20:53,320
others are maybe browser settings that I

471
00:20:49,690 --> 00:20:56,230
think we think it's good to know and

472
00:20:53,320 --> 00:20:59,908
they're not very much discussed so we

473
00:20:56,230 --> 00:21:03,659
are posted to spark your curiosity on

474
00:20:59,909 --> 00:21:07,630
these new and cutting-edge technologies

475
00:21:03,659 --> 00:21:10,450
we some of these are just in a proposal

476
00:21:07,630 --> 00:21:14,260
phase and I will say for each what is

477
00:21:10,450 --> 00:21:16,120
the browser support if any or it is just

478
00:21:14,260 --> 00:21:17,950
a draft that is being discussed so the

479
00:21:16,120 --> 00:21:22,360
first one which is very mature actually

480
00:21:17,950 --> 00:21:25,029
is some origin integrity or SR I so so

481
00:21:22,360 --> 00:21:26,469
sorry some resource integrity there was

482
00:21:25,029 --> 00:21:29,110
asleep because I'm gonna present

483
00:21:26,470 --> 00:21:31,120
something about the Borgias some

484
00:21:29,110 --> 00:21:32,770
resource integrity or SSRI SSRI is

485
00:21:31,120 --> 00:21:35,678
basically an attribute you can add to a

486
00:21:32,770 --> 00:21:40,110
script tag to basically enforce

487
00:21:35,679 --> 00:21:43,360
integrity checks on scripts basically

488
00:21:40,110 --> 00:21:46,209
often websites have to load third-party

489
00:21:43,360 --> 00:21:49,990
scripts usually from CDN for example to

490
00:21:46,210 --> 00:21:52,870
load jQuery or well a common JavaScript

491
00:21:49,990 --> 00:21:56,679
libraries so for performance reasons for

492
00:21:52,870 --> 00:21:58,719
bandwidth reasons they often load them

493
00:21:56,679 --> 00:22:01,390
from an external party the problem is if

494
00:21:58,720 --> 00:22:03,850
that external party is compromised this

495
00:22:01,390 --> 00:22:08,200
is basically XSS on your site because an

496
00:22:03,850 --> 00:22:09,820
attacker could host their own malicious

497
00:22:08,200 --> 00:22:12,270
JavaScript there and that will be

498
00:22:09,820 --> 00:22:14,260
executed in the context of your web page

499
00:22:12,270 --> 00:22:16,240
so SSRI

500
00:22:14,260 --> 00:22:18,480
basically ensures that there

501
00:22:16,240 --> 00:22:20,760
that resource is hosted on a third party

502
00:22:18,480 --> 00:22:24,160
servers have not been tampered win by

503
00:22:20,760 --> 00:22:26,800
doing integrity check with a hash so

504
00:22:24,160 --> 00:22:29,530
basically what you have here is a script

505
00:22:26,800 --> 00:22:33,090
tag in this case from a CDN loading

506
00:22:29,530 --> 00:22:35,678
jQuery you add integrity and you add a

507
00:22:33,090 --> 00:22:39,939
sha-256 hash of the content of the

508
00:22:35,679 --> 00:22:42,160
script how you generate it well in for

509
00:22:39,940 --> 00:22:44,920
common libraries like jQuery oftentimes

510
00:22:42,160 --> 00:22:47,080
you can basically copy paste the script

511
00:22:44,920 --> 00:22:49,270
tag which has already the integrity

512
00:22:47,080 --> 00:22:52,689
attribute so there is no work from your

513
00:22:49,270 --> 00:22:54,940
side but sometimes you don't have that

514
00:22:52,690 --> 00:22:58,750
ready-made and so you can go to websites

515
00:22:54,940 --> 00:23:00,250
such as SSRI hash org or you can also do

516
00:22:58,750 --> 00:23:02,800
it manually by look at a specification

517
00:23:00,250 --> 00:23:04,360
unfortunately this is a little bit

518
00:23:02,800 --> 00:23:06,820
tricky you would need to use open access

519
00:23:04,360 --> 00:23:09,010
open SSL or well some tools to do it

520
00:23:06,820 --> 00:23:15,820
this is B 64 encoded of the binary

521
00:23:09,010 --> 00:23:17,500
representation of that of the hash the

522
00:23:15,820 --> 00:23:19,389
browser support for SSRI is pretty

523
00:23:17,500 --> 00:23:22,000
extensive basically all real browsers

524
00:23:19,390 --> 00:23:26,320
supported chromium Firefox and Safari

525
00:23:22,000 --> 00:23:28,390
and the new versions of edge the only

526
00:23:26,320 --> 00:23:37,270
one not to support it is old Internet

527
00:23:28,390 --> 00:23:41,740
Explorer and Safari on iOS yes same set

528
00:23:37,270 --> 00:23:45,700
cookies same set cookies are a effective

529
00:23:41,740 --> 00:23:49,420
way to mitigate cross-site request

530
00:23:45,700 --> 00:23:51,429
forgery vulnerabilities the idea is to

531
00:23:49,420 --> 00:23:55,270
add a flag in cookies which is called

532
00:23:51,429 --> 00:23:56,950
since ID that allows servers to mitigate

533
00:23:55,270 --> 00:23:59,679
the risk of cross-site request forgery

534
00:23:56,950 --> 00:24:02,500
so crossing in in a typical cross-site

535
00:23:59,679 --> 00:24:05,860
request forgery attack the problem is

536
00:24:02,500 --> 00:24:09,070
that the browser is turned against the

537
00:24:05,860 --> 00:24:12,928
user by sending authenticated requests

538
00:24:09,070 --> 00:24:15,460
to some kind of vulnerable endpoint on a

539
00:24:12,929 --> 00:24:17,700
vulnerable server that has some kind of

540
00:24:15,460 --> 00:24:20,740
side effects so the typical the typical

541
00:24:17,700 --> 00:24:23,080
vector is having an outer submitting

542
00:24:20,740 --> 00:24:26,490
form with post that goes to bank

543
00:24:23,080 --> 00:24:28,919
vulnerable Bank calm slash withdraw and

544
00:24:26,490 --> 00:24:32,520
just

545
00:24:28,920 --> 00:24:35,310
perform a withdrawal operation the idea

546
00:24:32,520 --> 00:24:38,070
is what if cookies are not sent if the

547
00:24:35,310 --> 00:24:42,270
origin so if the request initiated from

548
00:24:38,070 --> 00:24:45,929
another origin from another site so the

549
00:24:42,270 --> 00:24:49,290
same site flag in a cookie can have two

550
00:24:45,930 --> 00:24:51,030
values strict and lacks strict says the

551
00:24:49,290 --> 00:24:55,820
cookies are not sent when there is cross

552
00:24:51,030 --> 00:24:58,170
site navigation this means any kind of

553
00:24:55,820 --> 00:25:00,389
navigation that comes from another site

554
00:24:58,170 --> 00:25:02,790
would not send cookies even if you are

555
00:25:00,390 --> 00:25:05,400
logged in in the vulnerable website this

556
00:25:02,790 --> 00:25:07,680
means that for example if the website

557
00:25:05,400 --> 00:25:11,580
uses same size stripped and you receive

558
00:25:07,680 --> 00:25:13,950
a link via email or via Facebook or

559
00:25:11,580 --> 00:25:15,689
Google+ you click it you click on it and

560
00:25:13,950 --> 00:25:18,210
you're not authenticated

561
00:25:15,690 --> 00:25:20,580
that's a get request and you're not as

562
00:25:18,210 --> 00:25:24,360
indicated because the request is cross

563
00:25:20,580 --> 00:25:27,419
the navigation is cross site there's

564
00:25:24,360 --> 00:25:29,310
also lacks absolute value which means as

565
00:25:27,420 --> 00:25:31,410
cookies are not sent when there is cross

566
00:25:29,310 --> 00:25:34,620
site navigation but only if there is an

567
00:25:31,410 --> 00:25:37,770
HTTP method that implies side-effects

568
00:25:34,620 --> 00:25:40,969
like post and put and delete so not get

569
00:25:37,770 --> 00:25:44,550
basically this means that the scenario I

570
00:25:40,970 --> 00:25:46,980
told before would still have you

571
00:25:44,550 --> 00:25:49,409
authenticated so logged in inside but

572
00:25:46,980 --> 00:25:52,050
basically all the common scenarios like

573
00:25:49,410 --> 00:25:55,310
for xsrf exploitation that usually are

574
00:25:52,050 --> 00:25:57,480
post base or food pays would not work

575
00:25:55,310 --> 00:25:59,940
because the requests would not be sent

576
00:25:57,480 --> 00:26:02,520
with the cookies unfortunately same site

577
00:25:59,940 --> 00:26:04,400
cookies support is for browsers it's a

578
00:26:02,520 --> 00:26:08,700
little bit more limited and it's

579
00:26:04,400 --> 00:26:14,280
restricted to good browsers so chromium

580
00:26:08,700 --> 00:26:17,460
and Firefox we hope to see more support

581
00:26:14,280 --> 00:26:19,160
this is actually would actually be

582
00:26:17,460 --> 00:26:23,820
pretty easy to implement it would be

583
00:26:19,160 --> 00:26:26,100
pretty radical in my way in my in my

584
00:26:23,820 --> 00:26:28,409
understanding way to get rid of excess

585
00:26:26,100 --> 00:26:35,490
ref without relying on tokens or

586
00:26:28,410 --> 00:26:38,490
orthogonal with tokens let's talk about

587
00:26:35,490 --> 00:26:40,380
site isolation core and from origin so

588
00:26:38,490 --> 00:26:42,690
here we are going a little bit in a more

589
00:26:40,380 --> 00:26:46,230
of an uncharted territory

590
00:26:42,690 --> 00:26:49,740
these are in a proposal state and some

591
00:26:46,230 --> 00:26:52,440
are being implemented some are

592
00:26:49,740 --> 00:26:54,980
implemented behind the flags and browser

593
00:26:52,440 --> 00:26:58,650
support is also a little bit more

594
00:26:54,980 --> 00:27:01,890
scattered let's talk more in detail so

595
00:26:58,650 --> 00:27:03,870
sight isolation is not something you can

596
00:27:01,890 --> 00:27:07,920
put in a header it's actually a browser

597
00:27:03,870 --> 00:27:10,860
setting in chromium it ensures that

598
00:27:07,920 --> 00:27:14,210
pages from different websites are put

599
00:27:10,860 --> 00:27:20,030
into different processes in a strict way

600
00:27:14,210 --> 00:27:23,130
this basically increases security but

601
00:27:20,030 --> 00:27:25,170
also adds some checks blocking the

602
00:27:23,130 --> 00:27:27,570
processes from receiving sensitive data

603
00:27:25,170 --> 00:27:30,650
from other sites we got without going

604
00:27:27,570 --> 00:27:34,169
too much into details this has been

605
00:27:30,650 --> 00:27:36,240
particularly with reprioritized so sweet

606
00:27:34,170 --> 00:27:39,080
at site isolation as a flag has been

607
00:27:36,240 --> 00:27:41,820
around for quite some time but it's been

608
00:27:39,080 --> 00:27:44,699
reprioritized in light of the recent

609
00:27:41,820 --> 00:27:48,480
speculate speak util speculative attacks

610
00:27:44,700 --> 00:27:50,810
like spectra and meltdown while having a

611
00:27:48,480 --> 00:27:53,520
more strict process boundaries is

612
00:27:50,810 --> 00:27:56,940
important it's important in chromium and

613
00:27:53,520 --> 00:27:59,430
it's important in other browsers other

614
00:27:56,940 --> 00:28:03,240
browsers have a different approach in

615
00:27:59,430 --> 00:28:06,510
like isolating context this context of

616
00:28:03,240 --> 00:28:11,120
navigation so they might benefit more

617
00:28:06,510 --> 00:28:14,250
from the technologies I'm about to talk

618
00:28:11,120 --> 00:28:16,409
but this is the chromium way so exciti

619
00:28:14,250 --> 00:28:19,650
solution will be turned on by default in

620
00:28:16,410 --> 00:28:23,280
next releases of chromium but you can

621
00:28:19,650 --> 00:28:26,330
enable it right away by going in chrome

622
00:28:23,280 --> 00:28:29,670
flags and enabling strict Sai desolation

623
00:28:26,330 --> 00:28:32,340
it's there are very very small

624
00:28:29,670 --> 00:28:36,660
performance it's in some cases but it's

625
00:28:32,340 --> 00:28:39,149
very limited and the only way where this

626
00:28:36,660 --> 00:28:41,640
can break is probably with plugins or in

627
00:28:39,150 --> 00:28:43,740
very weird cases so it's pretty safe to

628
00:28:41,640 --> 00:28:44,400
turn on it's actually the right thing to

629
00:28:43,740 --> 00:28:47,910
do

630
00:28:44,400 --> 00:28:49,950
to add a new layer of protection against

631
00:28:47,910 --> 00:28:51,530
speculative attacks speculative

632
00:28:49,950 --> 00:28:54,890
execution attacks

633
00:28:51,530 --> 00:28:56,960
what is core or cross-origin requests

634
00:28:54,890 --> 00:29:01,610
blocking used to be a resource blocking

635
00:28:56,960 --> 00:29:03,950
I was request blocking basically if it's

636
00:29:01,610 --> 00:29:05,929
an important part of site isolation that

637
00:29:03,950 --> 00:29:08,990
restricts with which cross-origin data

638
00:29:05,930 --> 00:29:12,740
is sent to a regular process limiting

639
00:29:08,990 --> 00:29:14,930
the access to such data using

640
00:29:12,740 --> 00:29:19,190
speculative attacks like spectra so the

641
00:29:14,930 --> 00:29:20,600
case here is for example an attacker has

642
00:29:19,190 --> 00:29:24,440
some kind of markup injection

643
00:29:20,600 --> 00:29:27,439
capabilities does not do outright XSS

644
00:29:24,440 --> 00:29:29,810
but so the attacker does not care about

645
00:29:27,440 --> 00:29:33,920
exfiltrating the data in a web context

646
00:29:29,810 --> 00:29:36,590
but have some somehow the possibility to

647
00:29:33,920 --> 00:29:39,290
exfiltrate it by a reading process

648
00:29:36,590 --> 00:29:41,000
memory so we here we are not in a web

649
00:29:39,290 --> 00:29:43,639
context we are in a memory corruption

650
00:29:41,000 --> 00:29:46,310
context or no actually in in a in a

651
00:29:43,640 --> 00:29:49,610
let's say binary vulnerability context

652
00:29:46,310 --> 00:29:53,000
so the idea is the attacker as an image

653
00:29:49,610 --> 00:29:54,590
tag with some sensitive HTML the

654
00:29:53,000 --> 00:29:56,330
attacker doesn't care that it's not

655
00:29:54,590 --> 00:29:58,760
possible to exfiltrate it with web

656
00:29:56,330 --> 00:30:02,720
technologies because of well same origin

657
00:29:58,760 --> 00:30:05,510
policy but the problem is just having it

658
00:30:02,720 --> 00:30:07,760
in the same process space memory space

659
00:30:05,510 --> 00:30:11,170
can be a problem for these speculative

660
00:30:07,760 --> 00:30:13,760
execution attacks so this prevents that

661
00:30:11,170 --> 00:30:15,620
from origin which is a proposal right

662
00:30:13,760 --> 00:30:17,150
now it's a header that prevents

663
00:30:15,620 --> 00:30:19,070
resources from being loaded and

664
00:30:17,150 --> 00:30:22,160
including by noon wait-listed origin so

665
00:30:19,070 --> 00:30:26,679
a website can add from origin header and

666
00:30:22,160 --> 00:30:29,900
basically lists so give a whitelist of

667
00:30:26,680 --> 00:30:34,160
origins where that are allowed to load

668
00:30:29,900 --> 00:30:36,650
the resources so basically from origin

669
00:30:34,160 --> 00:30:40,570
has been around for some time and it was

670
00:30:36,650 --> 00:30:42,740
thought originally as inline linking

671
00:30:40,570 --> 00:30:44,720
protection mechanism so for example if

672
00:30:42,740 --> 00:30:47,540
you have images you don't want you know

673
00:30:44,720 --> 00:30:49,970
the bandwidth leaching or hot linking

674
00:30:47,540 --> 00:30:54,020
and basically the browser would not

675
00:30:49,970 --> 00:30:55,640
fetch it in the first place but now it's

676
00:30:54,020 --> 00:30:57,290
been revisited together with the others

677
00:30:55,640 --> 00:31:00,130
I discussed before in like to attack

678
00:30:57,290 --> 00:31:00,129
such as Specter

679
00:31:02,349 --> 00:31:09,820
so let's talk about upcoming mitigations

680
00:31:05,559 --> 00:31:12,229
sub origins are very nice and important

681
00:31:09,820 --> 00:31:15,889
mitigation techniques that we would like

682
00:31:12,229 --> 00:31:19,129
to see more traction this is still in a

683
00:31:15,889 --> 00:31:22,519
stage of a proposal some origins a whole

684
00:31:19,129 --> 00:31:26,718
idea is to make web origins more

685
00:31:22,519 --> 00:31:28,940
fine-grained so web origins are tuples

686
00:31:26,719 --> 00:31:33,619
so web origins are the security boundary

687
00:31:28,940 --> 00:31:36,139
of all the web they are a tuple right

688
00:31:33,619 --> 00:31:38,329
now defined a scheme host and port the

689
00:31:36,139 --> 00:31:41,019
idea is with sub origins it would add a

690
00:31:38,329 --> 00:31:43,639
fourth field called namespace which is

691
00:31:41,019 --> 00:31:46,669
defined in a sub origin header so the

692
00:31:43,639 --> 00:31:49,269
idea is you sent a sub origin header

693
00:31:46,669 --> 00:31:54,499
with either no like admin area or

694
00:31:49,269 --> 00:31:56,269
sensitive or marketing pages and you

695
00:31:54,499 --> 00:31:58,579
would be able to further isolate your

696
00:31:56,269 --> 00:32:00,919
pages as if they were in a separate

697
00:31:58,579 --> 00:32:04,279
origin so an XSS there would not be able

698
00:32:00,919 --> 00:32:07,579
to exit rate content from the main

699
00:32:04,279 --> 00:32:09,529
origin so the idea is why are sub

700
00:32:07,579 --> 00:32:13,969
origins needed the idea is in some cases

701
00:32:09,529 --> 00:32:15,979
it's hard to isolate part of a website

702
00:32:13,969 --> 00:32:18,919
that are more sensitive or they have

703
00:32:15,979 --> 00:32:21,139
poorer coding practices by using

704
00:32:18,919 --> 00:32:24,919
subdomains or it's completely separate

705
00:32:21,139 --> 00:32:27,049
domains for example let's think of

706
00:32:24,919 --> 00:32:29,659
WordPress that has the slash wp-admin

707
00:32:27,049 --> 00:32:33,289
which is almost always on the same

708
00:32:29,659 --> 00:32:35,659
domain it would basically using I don't

709
00:32:33,289 --> 00:32:38,658
know WP admin sub origin that would make

710
00:32:35,659 --> 00:32:40,820
it basically segregated which is great

711
00:32:38,659 --> 00:32:42,859
thing let's also think about sensitive

712
00:32:40,820 --> 00:32:45,678
functionalities like a password reset or

713
00:32:42,859 --> 00:32:48,379
marketing pages that sometimes have

714
00:32:45,679 --> 00:32:49,999
subpar good quality standards but maybe

715
00:32:48,379 --> 00:32:54,649
for legacy reasons are on the main

716
00:32:49,999 --> 00:32:57,019
domain of a company so adopting sub

717
00:32:54,649 --> 00:33:02,478
origins might require often requires

718
00:32:57,019 --> 00:33:04,879
actually some refactoring because the

719
00:33:02,479 --> 00:33:06,219
the origin content is made more more and

720
00:33:04,879 --> 00:33:10,218
more fine great so basically

721
00:33:06,219 --> 00:33:12,559
communication depends on from what to

722
00:33:10,219 --> 00:33:15,049
what subordinates to some symbology is

723
00:33:12,559 --> 00:33:15,810
fine as long as both of the resources

724
00:33:15,049 --> 00:33:17,040
and the same

725
00:33:15,810 --> 00:33:20,129
origen Heather because they're

726
00:33:17,040 --> 00:33:23,820
considered same-origin sabor it into the

727
00:33:20,130 --> 00:33:26,280
parent origin requires the addition of

728
00:33:23,820 --> 00:33:28,050
access control allow sub origin which is

729
00:33:26,280 --> 00:33:30,389
very similar to access control allow

730
00:33:28,050 --> 00:33:37,409
origin of course cross origin request

731
00:33:30,390 --> 00:33:39,720
request sharing or sorcery sorry but it

732
00:33:37,410 --> 00:33:41,150
is tailored for sub origins and finally

733
00:33:39,720 --> 00:33:46,140
sub origins to an external origin

734
00:33:41,150 --> 00:33:49,440
require as currently the use of access

735
00:33:46,140 --> 00:33:53,490
control allow origin header so here I

736
00:33:49,440 --> 00:33:55,520
have a small demo to show Chrome

737
00:33:53,490 --> 00:33:58,320
extension that we developed internally

738
00:33:55,520 --> 00:34:00,840
unfortunately it's not out yet if sub

739
00:33:58,320 --> 00:34:04,919
origins get more traction we will think

740
00:34:00,840 --> 00:34:07,199
of open source it the extension was

741
00:34:04,920 --> 00:34:10,850
created by our intern Alena UNESCO and

742
00:34:07,200 --> 00:34:13,110
allows to prototype what kind of riff

743
00:34:10,850 --> 00:34:14,699
sub origins on your website to see

744
00:34:13,110 --> 00:34:16,620
what's the current state and what

745
00:34:14,699 --> 00:34:18,750
actions might be needed and what

746
00:34:16,620 --> 00:34:24,389
refactoring might be needed so let's

747
00:34:18,750 --> 00:34:26,250
have Google Finance so Google Finance

748
00:34:24,389 --> 00:34:28,440
for historical reasons is still mapped

749
00:34:26,250 --> 00:34:33,980
on dub dub dub dub Google comm which is

750
00:34:28,440 --> 00:34:38,130
the main well one of the most sensitive

751
00:34:33,980 --> 00:34:43,199
origins on google.com so we have this

752
00:34:38,130 --> 00:34:46,620
extension sub originator we define a

753
00:34:43,199 --> 00:34:56,100
target side and we start it once it

754
00:34:46,620 --> 00:34:58,859
started we okay now it's redirect

755
00:34:56,100 --> 00:35:03,170
immediately on to slash search which

756
00:34:58,860 --> 00:35:03,170
changed from last time I did this demo

757
00:35:03,920 --> 00:35:12,180
okay so this will be a little bit more

758
00:35:09,330 --> 00:35:16,140
noisy but let's just have it work for

759
00:35:12,180 --> 00:35:18,750
all tap-tap-tap to do the comp I know it

760
00:35:16,140 --> 00:35:20,580
works but anyway let's just browse

761
00:35:18,750 --> 00:35:23,310
around a little bit trying to stay on

762
00:35:20,580 --> 00:35:26,490
the same origin so we're looking at our

763
00:35:23,310 --> 00:35:30,720
stalks I can't click here because I will

764
00:35:26,490 --> 00:35:36,649
navigate away I think this might be good

765
00:35:30,720 --> 00:35:36,649
enough let's display the report okay

766
00:35:40,280 --> 00:35:46,280
okay this is different from the last

767
00:35:43,770 --> 00:35:50,690
time because probably when I put slash

768
00:35:46,280 --> 00:35:53,280
google.com this was larger but idea is

769
00:35:50,690 --> 00:35:56,280
here the extension populates a report

770
00:35:53,280 --> 00:35:59,790
with all these communications that it

771
00:35:56,280 --> 00:36:03,530
has found by using chrome debugging

772
00:35:59,790 --> 00:36:07,560
api's and in this case you can see that

773
00:36:03,530 --> 00:36:10,680
the page here had requested resources

774
00:36:07,560 --> 00:36:12,779
from slash a sink and left search so

775
00:36:10,680 --> 00:36:14,970
basically these will have to send the

776
00:36:12,780 --> 00:36:16,470
same sub origin header because they

777
00:36:14,970 --> 00:36:18,600
would need to be on the same sub origins

778
00:36:16,470 --> 00:36:23,490
and also there are some sub origins to

779
00:36:18,600 --> 00:36:25,080
external that require our course header

780
00:36:23,490 --> 00:36:30,000
basically Allah access control allow

781
00:36:25,080 --> 00:36:31,560
origin so you have to think of this

782
00:36:30,000 --> 00:36:35,040
reported in a little bit of a different

783
00:36:31,560 --> 00:36:38,580
way that it is displayed actually this

784
00:36:35,040 --> 00:36:41,670
slash search is very likely a sub origin

785
00:36:38,580 --> 00:36:43,500
to parent origin unless we want to put

786
00:36:41,670 --> 00:36:46,650
also slash search in another sub origin

787
00:36:43,500 --> 00:36:51,560
and so in that case it would be a sub

788
00:36:46,650 --> 00:36:54,420
origin to origin but let's talk about

789
00:36:51,560 --> 00:36:57,000
controls about maybe yes exactly exactly

790
00:36:54,420 --> 00:36:58,710
another another example which are some

791
00:36:57,000 --> 00:37:11,520
static pages that we have on dub dub dub

792
00:36:58,710 --> 00:37:16,670
to do become slash about so on this okay

793
00:37:11,520 --> 00:37:20,040
yes so here are some marketing pages and

794
00:37:16,670 --> 00:37:25,710
blog that is also Austin on dub dub dub

795
00:37:20,040 --> 00:37:33,680
on slash about so we perform a few

796
00:37:25,710 --> 00:37:33,680
actions like we we open videos we

797
00:37:36,930 --> 00:37:46,750
we just click around we open a new one

798
00:37:44,290 --> 00:37:55,270
still on slash about as you can see

799
00:37:46,750 --> 00:37:59,470
there is audio of a monkey okay so here

800
00:37:55,270 --> 00:38:01,180
we do this play report yes and we see

801
00:37:59,470 --> 00:38:03,850
that there are some submerge into sub

802
00:38:01,180 --> 00:38:05,799
origin requests which means on the slash

803
00:38:03,850 --> 00:38:07,630
about so basically this means that as

804
00:38:05,800 --> 00:38:11,040
long as the resources aren't slash about

805
00:38:07,630 --> 00:38:13,810
send the Sabourin whatever about maybe

806
00:38:11,040 --> 00:38:15,690
these will work out of the box but there

807
00:38:13,810 --> 00:38:18,130
are also some submerge into external

808
00:38:15,690 --> 00:38:19,480
basically these require course header so

809
00:38:18,130 --> 00:38:21,070
usually supposed to external do not

810
00:38:19,480 --> 00:38:24,090
require a factoring because they already

811
00:38:21,070 --> 00:38:27,040
require a course header set on the

812
00:38:24,090 --> 00:38:31,150
respondent response this means that for

813
00:38:27,040 --> 00:38:34,180
in this case in this case nor a factor

814
00:38:31,150 --> 00:38:35,350
is probably needed basically sub origins

815
00:38:34,180 --> 00:38:39,640
to origin is usually the case that

816
00:38:35,350 --> 00:38:47,710
requires refactoring ok let's continue a

817
00:38:39,640 --> 00:38:51,670
stop this and continue okay origin

818
00:38:47,710 --> 00:38:54,100
policy is another mechanism to actually

819
00:38:51,670 --> 00:38:56,950
apply a lot of difference in that

820
00:38:54,100 --> 00:38:59,440
mechanics as continuity policy refer

821
00:38:56,950 --> 00:39:03,160
policies and others to pin it to an

822
00:38:59,440 --> 00:39:05,590
entire origin so the idea is to maximize

823
00:39:03,160 --> 00:39:07,509
coverage by saying we want these

824
00:39:05,590 --> 00:39:09,760
policies to be applied to all the

825
00:39:07,510 --> 00:39:11,170
origins even if we don't explicitly if

826
00:39:09,760 --> 00:39:13,590
we miss something which we don't

827
00:39:11,170 --> 00:39:16,390
explicitly put it in the header of the

828
00:39:13,590 --> 00:39:18,730
resources this complements header based

829
00:39:16,390 --> 00:39:20,710
delivery and actually increases coverage

830
00:39:18,730 --> 00:39:23,230
so sometimes it happens that for example

831
00:39:20,710 --> 00:39:25,390
error pages or debug handlers are

832
00:39:23,230 --> 00:39:28,000
actually sent by a different part of the

833
00:39:25,390 --> 00:39:30,970
technology stack and so we might we

834
00:39:28,000 --> 00:39:32,980
might miss some some resources this

835
00:39:30,970 --> 00:39:38,169
makes make sure that this does not

836
00:39:32,980 --> 00:39:41,160
happen and this is still proposal future

837
00:39:38,170 --> 00:39:44,350
policies also our proposal it allows to

838
00:39:41,160 --> 00:39:45,220
selectively enable and disable some web

839
00:39:44,350 --> 00:39:47,220
api's

840
00:39:45,220 --> 00:39:49,149
so basically you as a webmaster

841
00:39:47,220 --> 00:39:49,660
especially in combination with origin

842
00:39:49,150 --> 00:39:51,309
policy

843
00:39:49,660 --> 00:39:52,839
I feel that future policies make sense

844
00:39:51,309 --> 00:39:55,030
the most in combination with origin

845
00:39:52,839 --> 00:39:57,069
policy so one pin to an origin you can

846
00:39:55,030 --> 00:39:59,140
decide you can say you can have a

847
00:39:57,069 --> 00:40:02,170
manifest that says I need geolocation

848
00:39:59,140 --> 00:40:05,529
API only on slash locate for example and

849
00:40:02,170 --> 00:40:07,630
not anywhere else so together with

850
00:40:05,530 --> 00:40:10,539
origin policy you can restrict we can

851
00:40:07,630 --> 00:40:13,660
reduce the attack surface of XSS on the

852
00:40:10,539 --> 00:40:17,530
domain by just saying we just need these

853
00:40:13,660 --> 00:40:21,160
web api's on these endpoints for example

854
00:40:17,530 --> 00:40:22,510
I think we're also slightly earlier

855
00:40:21,160 --> 00:40:24,430
which is great because we can have more

856
00:40:22,510 --> 00:40:26,349
questions and we really like to suit

857
00:40:24,430 --> 00:40:27,819
question so any question you might have

858
00:40:26,349 --> 00:40:33,209
thank you very much

859
00:40:27,820 --> 00:40:33,209
[Applause]

860
00:40:33,720 --> 00:40:37,480
awesome hey thank you very much guys as

861
00:40:35,920 --> 00:40:38,920
a really cool interesting talk and

862
00:40:37,480 --> 00:40:41,140
loving to see the cutting edge stuff

863
00:40:38,920 --> 00:40:42,880
beautiful thank you anyone have any

864
00:40:41,140 --> 00:40:44,618
questions that's all for these guys I

865
00:40:42,880 --> 00:40:47,170
know it's early morning but I'm hoping

866
00:40:44,619 --> 00:40:55,990
brains are working already and you won't

867
00:40:47,170 --> 00:40:58,390
have anything hi yes come on thanks for

868
00:40:55,990 --> 00:41:00,640
the talk guys um how realistic is it

869
00:40:58,390 --> 00:41:03,038
that some of these proposals actually

870
00:41:00,640 --> 00:41:06,160
end up being adopted across modern

871
00:41:03,039 --> 00:41:07,539
browsers or is this something that most

872
00:41:06,160 --> 00:41:09,609
of the other browser manufacturers are

873
00:41:07,539 --> 00:41:13,660
not interested in implementing well I

874
00:41:09,609 --> 00:41:17,430
guess Chrome is usually quite fast in

875
00:41:13,660 --> 00:41:21,549
picking them up Firefox kinda also and

876
00:41:17,430 --> 00:41:24,669
for Safari and edge I guess it depends

877
00:41:21,549 --> 00:41:28,900
if you know how much interest is showing

878
00:41:24,670 --> 00:41:31,569
it historically sometimes it took them

879
00:41:28,900 --> 00:41:35,230
quite a while to pick up these things

880
00:41:31,569 --> 00:41:37,799
but especially in the light of spectrum

881
00:41:35,230 --> 00:41:41,410
and just kind of odd all the other

882
00:41:37,799 --> 00:41:44,170
speculative execution attacks maybe at

883
00:41:41,410 --> 00:41:48,279
least you know the mitigations in that

884
00:41:44,170 --> 00:41:49,630
realm probably get more traction because

885
00:41:48,279 --> 00:41:52,420
I guess browser vendors also want to

886
00:41:49,630 --> 00:41:55,210
show that they you know care about

887
00:41:52,420 --> 00:41:58,059
security and that they also care about

888
00:41:55,210 --> 00:42:00,670
the current security threats right yes

889
00:41:58,059 --> 00:42:02,410
yeah exactly so I would say that like it

890
00:42:00,670 --> 00:42:03,550
depends on which one you're talking

891
00:42:02,410 --> 00:42:04,930
about so if you're talking for

892
00:42:03,550 --> 00:42:07,630
about the speculative execution one

893
00:42:04,930 --> 00:42:10,629
there is a lot of interest talking about

894
00:42:07,630 --> 00:42:12,610
Korb mostly and from origin from other

895
00:42:10,630 --> 00:42:16,150
browsers like non chromium browsers

896
00:42:12,610 --> 00:42:18,370
because it's basically very important

897
00:42:16,150 --> 00:42:22,060
for them since they chose to not pursue

898
00:42:18,370 --> 00:42:24,790
strict process isolation by site so it's

899
00:42:22,060 --> 00:42:27,970
actually very they're actually really

900
00:42:24,790 --> 00:42:30,759
wanted while for others like for example

901
00:42:27,970 --> 00:42:32,680
symbologies actually are very complex

902
00:42:30,760 --> 00:42:36,310
are very complex proposal required to

903
00:42:32,680 --> 00:42:37,690
touch very delicate components of web

904
00:42:36,310 --> 00:42:40,570
security which is the concept of origin

905
00:42:37,690 --> 00:42:43,930
so there have been some alternative

906
00:42:40,570 --> 00:42:45,490
proposals so for example some people

907
00:42:43,930 --> 00:42:48,370
think that it would be better to

908
00:42:45,490 --> 00:42:49,509
actually augment the sandbox attribute

909
00:42:48,370 --> 00:42:52,930
in html5

910
00:42:49,510 --> 00:42:54,880
I mean well in HTML instead of having

911
00:42:52,930 --> 00:42:57,370
add a header base delivering here I

912
00:42:54,880 --> 00:42:59,230
think for example Firefox containers

913
00:42:57,370 --> 00:43:02,380
they work on like a somewhat very

914
00:42:59,230 --> 00:43:05,200
similar technology tons of origin but

915
00:43:02,380 --> 00:43:06,340
more or less restricted to the user side

916
00:43:05,200 --> 00:43:08,980
right it's like not the web

917
00:43:06,340 --> 00:43:10,300
administrator who said to me no

918
00:43:08,980 --> 00:43:13,600
fine-grained origin it's more the user

919
00:43:10,300 --> 00:43:18,700
that can put different sites into

920
00:43:13,600 --> 00:43:21,460
different buckets yeah I mean also

921
00:43:18,700 --> 00:43:23,230
having some kind of uniform testing

922
00:43:21,460 --> 00:43:24,070
framework for all browsers would be

923
00:43:23,230 --> 00:43:26,740
great

924
00:43:24,070 --> 00:43:28,750
you know what try really hard to have it

925
00:43:26,740 --> 00:43:31,120
this is because the implementation of

926
00:43:28,750 --> 00:43:33,910
this mitigation sometimes differs

927
00:43:31,120 --> 00:43:35,560
between browsers and you know for

928
00:43:33,910 --> 00:43:37,899
somehow origins are implemented across

929
00:43:35,560 --> 00:43:39,700
browsers differs so maybe for some

930
00:43:37,900 --> 00:43:40,930
browsers is very easy to implement one

931
00:43:39,700 --> 00:43:42,970
of these mitigation techniques for

932
00:43:40,930 --> 00:43:45,940
another browsers might be very hard and

933
00:43:42,970 --> 00:43:48,459
require extensive refactoring

934
00:43:45,940 --> 00:43:51,190
so it happened actually in the past so

935
00:43:48,460 --> 00:44:00,610
this might also be something to think

936
00:43:51,190 --> 00:44:03,760
about cool any other questions I so you

937
00:44:00,610 --> 00:44:07,090
mentioned that 94% of the people that

938
00:44:03,760 --> 00:44:08,860
implemented CSP did it wrong or it can

939
00:44:07,090 --> 00:44:11,130
be bypassed you have any ideas how to

940
00:44:08,860 --> 00:44:14,740
fix that or at least improve that number

941
00:44:11,130 --> 00:44:16,539
yes so as I said revin was basically

942
00:44:14,740 --> 00:44:20,348
talk two years ago at every

943
00:44:16,539 --> 00:44:23,140
41 the TLDR is usually you should not

944
00:44:20,349 --> 00:44:27,969
use policies based on CSP white lists

945
00:44:23,140 --> 00:44:30,098
because the design is so fragile and you

946
00:44:27,969 --> 00:44:32,229
will basically almost always end up with

947
00:44:30,099 --> 00:44:35,559
white list entries that either have like

948
00:44:32,229 --> 00:44:38,319
you're chasing PN points hosting angular

949
00:44:35,559 --> 00:44:41,410
or other JavaScript frameworks are kind

950
00:44:38,319 --> 00:44:44,079
of like symbolic execution of code on

951
00:44:41,410 --> 00:44:46,089
top of JavaScript right so the

952
00:44:44,079 --> 00:44:48,699
recommendation really is move away from

953
00:44:46,089 --> 00:44:52,390
this type of policy and instead try to

954
00:44:48,699 --> 00:44:55,359
use an on-stage policy either if strict

955
00:44:52,390 --> 00:44:56,890
dynamic or if you can nonce only if you

956
00:44:55,359 --> 00:44:58,239
use strict and Amit you also have to be

957
00:44:56,890 --> 00:44:59,979
careful which kind of JavaScript

958
00:44:58,239 --> 00:45:03,999
framework you choose because some of

959
00:44:59,979 --> 00:45:06,308
them introduce bypasses themselves but

960
00:45:03,999 --> 00:45:10,959
the recommendation is basically not used

961
00:45:06,309 --> 00:45:12,880
widely spaced policies but that was like

962
00:45:10,959 --> 00:45:14,109
you know almost everyone uses widely

963
00:45:12,880 --> 00:45:17,229
spaced policies because this is

964
00:45:14,109 --> 00:45:21,279
apparently how everyone understood CSP

965
00:45:17,229 --> 00:45:22,868
and what they did and yeah could be

966
00:45:21,279 --> 00:45:27,279
interesting to do a study again and see

967
00:45:22,869 --> 00:45:29,289
if the percentage changed also in

968
00:45:27,279 --> 00:45:31,989
regards of CSP can you share your

969
00:45:29,289 --> 00:45:34,779
thoughts on the script research that

970
00:45:31,989 --> 00:45:39,519
your colleagues also also did yes so

971
00:45:34,779 --> 00:45:42,489
there is a very cool github page for by

972
00:45:39,519 --> 00:45:46,689
credit or mentored by Sebastian lackeys

973
00:45:42,489 --> 00:45:48,849
and Kovich so they basically collect all

974
00:45:46,689 --> 00:45:50,589
the bypasses there for all the

975
00:45:48,849 --> 00:45:54,969
frameworks and libraries to find and

976
00:45:50,589 --> 00:45:58,058
they also keep it updated it's I think

977
00:45:54,969 --> 00:45:59,619
it's it can be a problem for developers

978
00:45:58,059 --> 00:46:03,869
if they use one of these frameworks

979
00:45:59,619 --> 00:46:06,159
right luckily at Google we basically are

980
00:46:03,869 --> 00:46:08,919
sticking to a couple of core frameworks

981
00:46:06,159 --> 00:46:13,479
so it's less of a problem for us I think

982
00:46:08,919 --> 00:46:16,449
we had an XSS on page with strict

983
00:46:13,479 --> 00:46:18,368
dynamic that was using polymer but this

984
00:46:16,449 --> 00:46:21,659
is for us it's kind of a known issue

985
00:46:18,369 --> 00:46:23,679
because polymer is really you know the

986
00:46:21,659 --> 00:46:24,609
boundaries between the DOM and

987
00:46:23,679 --> 00:46:27,189
JavaScript

988
00:46:24,609 --> 00:46:28,959
they're so interleaved that CSP is a

989
00:46:27,189 --> 00:46:30,670
technology really cannot do much there

990
00:46:28,959 --> 00:46:32,950
right

991
00:46:30,670 --> 00:46:35,230
same for angular but starting from

992
00:46:32,950 --> 00:46:36,848
angular 2d actually kind of fixed it

993
00:46:35,230 --> 00:46:39,190
themselves by having your head of time

994
00:46:36,849 --> 00:46:45,700
or let basically compiling all the

995
00:46:39,190 --> 00:46:48,670
templates ahead of time and yes so if

996
00:46:45,700 --> 00:46:50,890
you use any of like these like fancy

997
00:46:48,670 --> 00:46:53,950
frameworks I would also recommend to

998
00:46:50,890 --> 00:46:56,558
check that page and see if it's there

999
00:46:53,950 --> 00:46:58,930
and if it's here you might have either

1000
00:46:56,559 --> 00:47:01,299
to patch some of these frameworks

1001
00:46:58,930 --> 00:47:03,069
for example at Google we use a check

1002
00:47:01,299 --> 00:47:09,038
internal version of jQuery that

1003
00:47:03,069 --> 00:47:12,940
basically patches the dollar HTML call

1004
00:47:09,039 --> 00:47:15,549
to be compatible with CSP and not

1005
00:47:12,940 --> 00:47:18,309
introduce this kind of gadgets basically

1006
00:47:15,549 --> 00:47:20,380
what you have to care for is if you use

1007
00:47:18,309 --> 00:47:23,289
this view if nonsense trick dynamic that

1008
00:47:20,380 --> 00:47:25,930
whenever like the framework creates a

1009
00:47:23,289 --> 00:47:27,430
script for you because of templates or

1010
00:47:25,930 --> 00:47:31,509
whatever you need to kind of make sure

1011
00:47:27,430 --> 00:47:32,919
that the source our inner HTML or in the

1012
00:47:31,509 --> 00:47:36,339
text of a script check is actually

1013
00:47:32,920 --> 00:47:39,730
already has a norms right or you just

1014
00:47:36,339 --> 00:47:42,509
disable it yeah I wanted to add that's

1015
00:47:39,730 --> 00:47:44,710
oh that's very cool research and

1016
00:47:42,509 --> 00:47:48,130
especially for the web I think there's

1017
00:47:44,710 --> 00:47:50,680
also a talk by the authors in black hats

1018
00:47:48,130 --> 00:47:52,980
this year in case you're interested they

1019
00:47:50,680 --> 00:48:03,399
will present also more yeah research

1020
00:47:52,980 --> 00:48:05,499
cool last chance any more questions yeah

1021
00:48:03,400 --> 00:48:08,980
there are so many issues with cross

1022
00:48:05,499 --> 00:48:11,019
domain calls and all that as a user I

1023
00:48:08,980 --> 00:48:13,599
would have liked to have a setting in

1024
00:48:11,019 --> 00:48:16,058
the browser and that completely disables

1025
00:48:13,599 --> 00:48:19,660
all cross domain walls would that also

1026
00:48:16,059 --> 00:48:24,099
be ok I guess it would break every site

1027
00:48:19,660 --> 00:48:26,379
but it would be an option I guess there

1028
00:48:24,099 --> 00:48:28,749
are extensions to do that I think right

1029
00:48:26,380 --> 00:48:32,589
so there's Chrome or Firefox extensions

1030
00:48:28,749 --> 00:48:37,078
that basically let you specify if you

1031
00:48:32,589 --> 00:48:39,940
want to allow any cross domain calls

1032
00:48:37,079 --> 00:48:42,970
well adding a default source non-policy

1033
00:48:39,940 --> 00:48:44,410
is your not exactly what you asked for

1034
00:48:42,970 --> 00:48:47,980
but it's very similar

1035
00:48:44,410 --> 00:48:50,740
if also self oh oh you just hit

1036
00:48:47,980 --> 00:48:52,750
cross-eyed okay I'm sorry but I mean

1037
00:48:50,740 --> 00:48:55,629
okay yeah the best what kind of request

1038
00:48:52,750 --> 00:48:56,980
you're talking about but yeah this would

1039
00:48:55,630 --> 00:48:59,050
definitely break because that's not how

1040
00:48:56,980 --> 00:49:01,630
the web works unfortunately right so I

1041
00:48:59,050 --> 00:49:03,520
think also the CSP whitelist approach

1042
00:49:01,630 --> 00:49:05,920
didn't work because it was a little bit

1043
00:49:03,520 --> 00:49:09,900
detached from how the web really worked

1044
00:49:05,920 --> 00:49:13,180
which is like a lot of cross-site

1045
00:49:09,900 --> 00:49:14,710
communication and you actually over time

1046
00:49:13,180 --> 00:49:16,540
any changes over time so you had this

1047
00:49:14,710 --> 00:49:19,090
like you know fluids wisely said you

1048
00:49:16,540 --> 00:49:21,490
have to maintain it was like a burden so

1049
00:49:19,090 --> 00:49:23,470
what what we're seeing is actually the

1050
00:49:21,490 --> 00:49:25,839
opposite is like the web is is very much

1051
00:49:23,470 --> 00:49:29,259
interconnected and a lot of requests are

1052
00:49:25,840 --> 00:49:32,950
made and actually they're dependent also

1053
00:49:29,260 --> 00:49:34,630
on on some you know origins like CBN's

1054
00:49:32,950 --> 00:49:36,089
yeah a sample that are actually

1055
00:49:34,630 --> 00:49:41,620
introduced a single point of failure and

1056
00:49:36,090 --> 00:49:42,790
so that that's a huge problem we don't

1057
00:49:41,620 --> 00:49:43,779
have any more questions I think with

1058
00:49:42,790 --> 00:49:45,890
Danone thank you very much gentlemen

1059
00:49:43,780 --> 00:49:50,520
once again fishing here is run out

1060
00:49:45,890 --> 00:49:50,520
[Music]

1061
00:49:53,410 --> 00:49:55,470
you

