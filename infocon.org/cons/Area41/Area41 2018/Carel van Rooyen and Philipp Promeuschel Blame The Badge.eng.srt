1
00:00:03,710 --> 00:00:11,629
so blame the badge we are here to tell

2
00:00:07,379 --> 00:00:16,259
you the story of how an area 41 badge

3
00:00:11,630 --> 00:00:18,810
can be blamed for some things extender

4
00:00:16,260 --> 00:00:22,260
is a really fun story it's a bit more

5
00:00:18,810 --> 00:00:23,788
fun than my history one caveat we don't

6
00:00:22,260 --> 00:00:26,580
do this full-time we do this on our

7
00:00:23,789 --> 00:00:28,500
weekends sometimes with a beer we said

8
00:00:26,580 --> 00:00:33,599
spend some hours every month on the

9
00:00:28,500 --> 00:00:35,760
topic where time allows yeah I also

10
00:00:33,600 --> 00:00:39,960
don't have much to say about me we

11
00:00:35,760 --> 00:00:42,079
talked about extender today okay so this

12
00:00:39,960 --> 00:00:44,309
all started with a conference badge that

13
00:00:42,079 --> 00:00:48,329
some of you guys actually have around

14
00:00:44,309 --> 00:00:53,180
your necks the older one and we received

15
00:00:48,329 --> 00:00:55,920
the esp8266 and doing what we do best is

16
00:00:53,180 --> 00:01:00,809
we take the badge we take it home we

17
00:00:55,920 --> 00:01:02,760
forget about it for a while but at some

18
00:01:00,809 --> 00:01:07,170
point we try and break things if we have

19
00:01:02,760 --> 00:01:09,960
enough time so the next generation

20
00:01:07,170 --> 00:01:12,810
follow-up of the 86 six chip that you

21
00:01:09,960 --> 00:01:16,559
find on the badge looked a bit

22
00:01:12,810 --> 00:01:18,479
interesting and I put out some alerts to

23
00:01:16,560 --> 00:01:21,530
watch for the hardware availability of

24
00:01:18,479 --> 00:01:24,270
that specific chip and some dev boards I

25
00:01:21,530 --> 00:01:26,430
basically wanted to build a small device

26
00:01:24,270 --> 00:01:29,640
where I can send a message home that

27
00:01:26,430 --> 00:01:31,229
said hey I'll be home in 30 or the

28
00:01:29,640 --> 00:01:33,150
girlfriend could do the same thing and

29
00:01:31,229 --> 00:01:35,520
whoever's at home could prep the food

30
00:01:33,150 --> 00:01:39,420
simple earring display didn't have much

31
00:01:35,520 --> 00:01:42,658
in terms of what was needed then shortly

32
00:01:39,420 --> 00:01:47,670
afterwards a colleague of ours at the

33
00:01:42,659 --> 00:01:51,030
time went ahead and built a POC device

34
00:01:47,670 --> 00:01:53,399
basically with the 86 6 as well to

35
00:01:51,030 --> 00:01:58,409
ensure that the plants at the office

36
00:01:53,399 --> 00:02:01,110
won't die and he took the device it was

37
00:01:58,409 --> 00:02:05,640
also distributed at suicide a storm at

38
00:02:01,110 --> 00:02:09,660
some point and my ESP 32s arrived at

39
00:02:05,640 --> 00:02:12,270
home and again too many devices too

40
00:02:09,660 --> 00:02:13,109
little time left it on my desk and kind

41
00:02:12,270 --> 00:02:18,600
of

42
00:02:13,110 --> 00:02:20,880
forgot about the whole thing okay so I

43
00:02:18,600 --> 00:02:24,180
was walking around in the office and I'm

44
00:02:20,880 --> 00:02:26,760
a thief I stole his devices and wanted

45
00:02:24,180 --> 00:02:28,500
to play around with it but I forget

46
00:02:26,760 --> 00:02:30,049
about them and they were hiding on my

47
00:02:28,500 --> 00:02:33,270
desk

48
00:02:30,050 --> 00:02:35,790
so while after this I started playing

49
00:02:33,270 --> 00:02:38,000
around with Mongoose OS which is

50
00:02:35,790 --> 00:02:40,709
basically a web server on the ESP and

51
00:02:38,000 --> 00:02:44,070
try to make it manually crash with Bob

52
00:02:40,709 --> 00:02:45,900
and found something interesting you can

53
00:02:44,070 --> 00:02:48,930
crash the web server because it's not

54
00:02:45,900 --> 00:02:53,340
handling multi-part data properly so we

55
00:02:48,930 --> 00:02:55,590
can crash IOT devices at the same time a

56
00:02:53,340 --> 00:02:58,680
customer had priority project based on

57
00:02:55,590 --> 00:03:00,630
Mongoose OS and he claimed there's

58
00:02:58,680 --> 00:03:03,420
nothing to exploit we don't have

59
00:03:00,630 --> 00:03:05,430
operating the samanas thing turns out

60
00:03:03,420 --> 00:03:08,609
the customer was not aware that there's

61
00:03:05,430 --> 00:03:10,580
at least two operating systems running

62
00:03:08,610 --> 00:03:16,890
before his app is running on the device

63
00:03:10,580 --> 00:03:18,600
so you can exploit it and yeah then we

64
00:03:16,890 --> 00:03:21,839
thought okay we can do something with

65
00:03:18,600 --> 00:03:24,090
this let's write the IOT botnet and the

66
00:03:21,840 --> 00:03:25,830
paper about it it's a very

67
00:03:24,090 --> 00:03:28,799
time-consuming task and we did not

68
00:03:25,830 --> 00:03:33,000
finish it so far so but we learnt a lot

69
00:03:28,799 --> 00:03:35,810
about the architecture and went deeper

70
00:03:33,000 --> 00:03:35,810
in the rabbit hole

71
00:03:37,160 --> 00:03:44,100
so this we decided because we software

72
00:03:41,700 --> 00:03:46,589
people and we mostly do software testing

73
00:03:44,100 --> 00:03:50,130
it would be funny to submit a workshop

74
00:03:46,590 --> 00:03:52,650
to Hardware dot IO in the Netherlands so

75
00:03:50,130 --> 00:03:54,750
we showed people our findings or our

76
00:03:52,650 --> 00:03:57,630
misconceptions or a combination at the

77
00:03:54,750 --> 00:03:59,220
time and how to get the general setup

78
00:03:57,630 --> 00:04:02,690
ready and how to get the configuration

79
00:03:59,220 --> 00:04:06,420
up and running and after some feedback

80
00:04:02,690 --> 00:04:10,430
from the workshop we decided to turn it

81
00:04:06,420 --> 00:04:17,459
into a talk this took us to Bucharest in

82
00:04:10,430 --> 00:04:19,228
Romania and over time the audience grew

83
00:04:17,459 --> 00:04:22,410
a bit and the hardware that IO

84
00:04:19,228 --> 00:04:25,349
organizers also do now Khan in India and

85
00:04:22,410 --> 00:04:26,580
in some other locations and they told us

86
00:04:25,349 --> 00:04:28,349
to

87
00:04:26,580 --> 00:04:30,359
modify the research a bit compared to

88
00:04:28,349 --> 00:04:35,069
arm make it applicable to what people

89
00:04:30,360 --> 00:04:36,840
already know and present this so this is

90
00:04:35,069 --> 00:04:39,870
where we learnt that after talk selfies

91
00:04:36,840 --> 00:04:41,549
is a big thing in India and Antoine if

92
00:04:39,870 --> 00:04:46,319
you're in the audience please don't

93
00:04:41,550 --> 00:04:49,050
troll us afterwards so today you we

94
00:04:46,319 --> 00:04:50,939
bring you back to complete the order

95
00:04:49,050 --> 00:04:53,039
Boris of conference time by presenting

96
00:04:50,939 --> 00:05:00,389
our time-lag findings about these

97
00:04:53,039 --> 00:05:03,479
specific devices so today we will take a

98
00:05:00,389 --> 00:05:07,110
look at extensor especially because for

99
00:05:03,479 --> 00:05:08,940
x86 arm MIPS and SPARC exploitation has

100
00:05:07,110 --> 00:05:11,879
been done a lot in the past it's very

101
00:05:08,940 --> 00:05:14,669
good documented and techniques are well

102
00:05:11,879 --> 00:05:16,139
known in the public this is not to say

103
00:05:14,669 --> 00:05:18,960
those are not interesting they're

104
00:05:16,139 --> 00:05:21,449
actually pretty interesting but new

105
00:05:18,960 --> 00:05:23,310
platforms arrive and we will look at the

106
00:05:21,449 --> 00:05:24,590
extends architecture compare the

107
00:05:23,310 --> 00:05:27,870
difference of the two most famous

108
00:05:24,590 --> 00:05:32,190
implementations or platforms the esp8266

109
00:05:27,870 --> 00:05:37,770
and ESB 32 and we compare it a bit to

110
00:05:32,190 --> 00:05:39,509
arm we also take a look at immediate

111
00:05:37,770 --> 00:05:42,270
mitigations available on modern

112
00:05:39,509 --> 00:05:45,210
architectures while on extender

113
00:05:42,270 --> 00:05:47,339
none of them are implemented and there's

114
00:05:45,210 --> 00:05:50,969
just architecture inherent

115
00:05:47,339 --> 00:05:55,740
non-executable stack for mitigation of

116
00:05:50,969 --> 00:05:57,800
stack overflows why we compare these

117
00:05:55,740 --> 00:06:02,279
architectures especially the boats

118
00:05:57,800 --> 00:06:04,110
esp8266 and the ESP 32 we will see that

119
00:06:02,279 --> 00:06:08,009
there's a very interesting thing about

120
00:06:04,110 --> 00:06:10,949
ESP 32 it has a thing called register

121
00:06:08,009 --> 00:06:12,509
windowing and we will take a look at

122
00:06:10,949 --> 00:06:19,020
this to understand it better

123
00:06:12,509 --> 00:06:21,210
in the view of an exploiter and we are

124
00:06:19,020 --> 00:06:23,490
closing with instructions on how to set

125
00:06:21,210 --> 00:06:26,279
up your own lap and how to perform

126
00:06:23,490 --> 00:06:28,620
efficient debugging and we've conclude

127
00:06:26,279 --> 00:06:31,469
with showing you a proof of concept

128
00:06:28,620 --> 00:06:34,469
exploits a buffer overflowing on

129
00:06:31,469 --> 00:06:39,409
extensors with redirection flow using

130
00:06:34,469 --> 00:06:39,409
rope chains on the ESP 32

131
00:06:39,800 --> 00:06:45,599
so I always like to show these slides

132
00:06:43,520 --> 00:06:48,119
security and privacy as silent

133
00:06:45,599 --> 00:06:50,119
prerequisites however not too many

134
00:06:48,119 --> 00:06:52,349
stakeholders will talk about them

135
00:06:50,119 --> 00:06:55,699
everybody takes these things for granted

136
00:06:52,349 --> 00:06:59,009
and the problem is securing a solution

137
00:06:55,699 --> 00:07:00,899
we know that it usually needs time and

138
00:06:59,009 --> 00:07:03,689
this is typically a strong contradiction

139
00:07:00,899 --> 00:07:05,999
to the market requirements that are out

140
00:07:03,689 --> 00:07:09,179
there especially in environments where

141
00:07:05,999 --> 00:07:14,990
people go to or go for a prototyping

142
00:07:09,179 --> 00:07:18,508
speed versus security at least initially

143
00:07:14,990 --> 00:07:23,430
so this is a bit from the last area 41

144
00:07:18,509 --> 00:07:25,740
and yeah we got this nice badge it was

145
00:07:23,430 --> 00:07:27,209
blinking around you have some weird

146
00:07:25,740 --> 00:07:28,399
light show on it when you press

147
00:07:27,209 --> 00:07:30,930
different buttons

148
00:07:28,399 --> 00:07:33,779
however we were mostly impressed that

149
00:07:30,930 --> 00:07:36,869
the batchat Wi-Fi on on the hardware so

150
00:07:33,779 --> 00:07:38,449
we thought this is very special I

151
00:07:36,869 --> 00:07:43,499
haven't seen something like this before

152
00:07:38,449 --> 00:07:45,360
so I was excited went home and the batch

153
00:07:43,499 --> 00:07:49,830
was lame lying around on my bookshelf

154
00:07:45,360 --> 00:07:53,039
for two years but later with the stolen

155
00:07:49,830 --> 00:07:55,438
devices from Carol I got back to

156
00:07:53,039 --> 00:07:58,558
extensors and started to take a look at

157
00:07:55,439 --> 00:08:01,740
architecture specification and ended up

158
00:07:58,559 --> 00:08:03,689
reading the 700 page instruction set

159
00:08:01,740 --> 00:08:07,050
architecture references several times

160
00:08:03,689 --> 00:08:08,180
and went looking into the code which is

161
00:08:07,050 --> 00:08:10,229
actually running on the device

162
00:08:08,180 --> 00:08:14,309
especially the difference between

163
00:08:10,229 --> 00:08:17,279
esp8266 and ESP 32 where highly

164
00:08:14,309 --> 00:08:19,499
interesting the extends our architecture

165
00:08:17,279 --> 00:08:23,129
allows the processor designer to design

166
00:08:19,499 --> 00:08:26,669
a processor to his wishes for specific

167
00:08:23,129 --> 00:08:31,169
use cases such as digital signal signal

168
00:08:26,669 --> 00:08:33,870
processing and IOT and especially the

169
00:08:31,169 --> 00:08:36,539
IOT part is interesting because as

170
00:08:33,870 --> 00:08:40,500
pressive is marketing the ESP series

171
00:08:36,539 --> 00:08:42,688
explicitly as IOT platform those devices

172
00:08:40,500 --> 00:08:44,519
are highly connected offering Bluetooth

173
00:08:42,688 --> 00:08:48,120
Bluetooth Low Energy and Wi-Fi

174
00:08:44,519 --> 00:08:49,390
connections and further expressive is

175
00:08:48,120 --> 00:08:52,030
offering the

176
00:08:49,390 --> 00:08:54,069
is the IOT development framework which

177
00:08:52,030 --> 00:08:56,800
allows you basically to build IOT apps

178
00:08:54,070 --> 00:09:00,130
almost instantly without any knowledge

179
00:08:56,800 --> 00:09:01,930
about hardware and to top that if you

180
00:09:00,130 --> 00:09:04,930
use the Mongoose OS framework you can

181
00:09:01,930 --> 00:09:13,150
even write a hardware code in JavaScript

182
00:09:04,930 --> 00:09:16,989
so but why do we talk so much about the

183
00:09:13,150 --> 00:09:19,990
ESP 32 it offers to register windowing

184
00:09:16,990 --> 00:09:22,150
it's a technique which allows for much

185
00:09:19,990 --> 00:09:24,400
more higher code density which is

186
00:09:22,150 --> 00:09:27,760
important on embedded devices as you

187
00:09:24,400 --> 00:09:30,060
don't want to waste cycles and some of

188
00:09:27,760 --> 00:09:32,950
new you might have seen this in the past

189
00:09:30,060 --> 00:09:35,170
there's the SPARC architecture with Auto

190
00:09:32,950 --> 00:09:38,710
which also is offering register

191
00:09:35,170 --> 00:09:41,079
windowing and until I 960 shape sets

192
00:09:38,710 --> 00:09:44,020
which were mostly used for military use

193
00:09:41,080 --> 00:09:46,420
and slot machines this is interesting

194
00:09:44,020 --> 00:09:53,470
and finally at use case for the storm

195
00:09:46,420 --> 00:09:59,589
devices and don't leave traces in your

196
00:09:53,470 --> 00:10:01,480
code as much before we identified a

197
00:09:59,590 --> 00:10:04,210
denial of service vulnerability in the

198
00:10:01,480 --> 00:10:07,690
Mongoose web server however no code

199
00:10:04,210 --> 00:10:12,900
execution so far it wrestling lead CTO

200
00:10:07,690 --> 00:10:15,760
of see Santa wrote a blog article about

201
00:10:12,900 --> 00:10:18,010
stating that developers should use not

202
00:10:15,760 --> 00:10:20,620
use the web server within the Magoo's OS

203
00:10:18,010 --> 00:10:23,140
framework which is funny because Magoo's

204
00:10:20,620 --> 00:10:25,570
OS is named after the mongoose web

205
00:10:23,140 --> 00:10:29,410
server they should instead use

206
00:10:25,570 --> 00:10:31,660
client-side libraries like MQTT the fun

207
00:10:29,410 --> 00:10:34,600
fact is at this time and github

208
00:10:31,660 --> 00:10:36,790
repository of say Santa and moguls OS

209
00:10:34,600 --> 00:10:41,230
all the examples were using the web

210
00:10:36,790 --> 00:10:44,560
server for communication so not so fast

211
00:10:41,230 --> 00:10:48,070
our colleague duping he has talked about

212
00:10:44,560 --> 00:10:50,560
fuzzing tomorrow identify the remote

213
00:10:48,070 --> 00:10:53,230
code execution vulnerability in the

214
00:10:50,560 --> 00:10:53,589
world youth OS MQTT snake with this

215
00:10:53,230 --> 00:10:56,380
father

216
00:10:53,590 --> 00:10:59,140
so the client-side code seems also not

217
00:10:56,380 --> 00:11:01,620
to be the silver bullet for avoiding

218
00:10:59,140 --> 00:11:01,620
memory corruption

219
00:11:01,990 --> 00:11:09,320
so besides the obvious differences of

220
00:11:06,980 --> 00:11:11,750
the ESP 30 to having Bluetooth Low

221
00:11:09,320 --> 00:11:15,019
Energy what these devices have in common

222
00:11:11,750 --> 00:11:17,389
is that both of them on both of them the

223
00:11:15,019 --> 00:11:20,720
stack is not executable and as you can

224
00:11:17,389 --> 00:11:22,370
see here from the ISO definition it

225
00:11:20,720 --> 00:11:25,220
doesn't look like there's much

226
00:11:22,370 --> 00:11:27,860
difference here we have zero on the half

227
00:11:25,220 --> 00:11:30,649
windowed and they we have a one how much

228
00:11:27,860 --> 00:11:33,380
difference can that cause on the actual

229
00:11:30,649 --> 00:11:36,680
architecture here we have sixteen

230
00:11:33,380 --> 00:11:38,540
registers that we have 64 registers you

231
00:11:36,680 --> 00:11:40,250
know how bad can it be to do

232
00:11:38,540 --> 00:11:44,509
exploitation on the one versus the other

233
00:11:40,250 --> 00:11:46,730
one and you know Phillip will mention

234
00:11:44,509 --> 00:11:49,490
later how this made our life a little

235
00:11:46,730 --> 00:11:51,440
bit more interesting apart from the

236
00:11:49,490 --> 00:11:54,350
registers and things like register

237
00:11:51,440 --> 00:11:56,600
windowing the ESP 32 is a bit of a

238
00:11:54,350 --> 00:12:03,560
highest frequency and a dual-core CPU

239
00:11:56,600 --> 00:12:05,860
called the Alex 6 okay so on this slide

240
00:12:03,560 --> 00:12:10,518
we can see how much the code of the

241
00:12:05,860 --> 00:12:12,740
esp8266 called zero ABI and the ESP 32

242
00:12:10,519 --> 00:12:15,769
register windowing differ this is both

243
00:12:12,740 --> 00:12:17,360
extends our assembly compat the register

244
00:12:15,769 --> 00:12:20,990
window and gives us a lot higher code

245
00:12:17,360 --> 00:12:22,670
density as you can see and the prologue

246
00:12:20,990 --> 00:12:25,459
and epilogue of the function on the

247
00:12:22,670 --> 00:12:27,649
right side there's only the entry call

248
00:12:25,459 --> 00:12:30,410
and then you have to return window dot

249
00:12:27,649 --> 00:12:32,569
end call which is basically everything

250
00:12:30,410 --> 00:12:34,910
for prologue and epilogue as on the

251
00:12:32,569 --> 00:12:38,870
other side there's a lot of operations

252
00:12:34,910 --> 00:12:41,959
happening on the stack and on the return

253
00:12:38,870 --> 00:12:45,949
there's also a lot of actions happening

254
00:12:41,959 --> 00:12:48,829
and to stack pointers increased this is

255
00:12:45,949 --> 00:12:51,319
a bit sad because we want such code on

256
00:12:48,829 --> 00:12:54,920
the ESP 32 to have it easier to write

257
00:12:51,319 --> 00:12:58,519
exploits but it's not so easy to find

258
00:12:54,920 --> 00:13:02,149
those good gadgets than the ESP 32 as we

259
00:12:58,519 --> 00:13:08,480
need to increment the stack pointer and

260
00:13:02,149 --> 00:13:11,000
write to the instruction right okay so

261
00:13:08,480 --> 00:13:13,279
when register windows are used we

262
00:13:11,000 --> 00:13:14,810
basically refer to this as a status

263
00:13:13,279 --> 00:13:18,230
architecture

264
00:13:14,810 --> 00:13:20,750
so what we know from normal exploitation

265
00:13:18,230 --> 00:13:22,490
at least in some other environments you

266
00:13:20,750 --> 00:13:25,130
want to be able to push and pop so here

267
00:13:22,490 --> 00:13:26,990
we don't have any push and pop but we

268
00:13:25,130 --> 00:13:29,960
need a gadget that needs to do the

269
00:13:26,990 --> 00:13:32,209
following first we need to populate the

270
00:13:29,960 --> 00:13:35,620
registers then we need to be able to

271
00:13:32,209 --> 00:13:39,560
write values to the instruction RAM

272
00:13:35,620 --> 00:13:43,970
finally we need to adjust the stack

273
00:13:39,560 --> 00:13:48,439
increment the pointer and we can all do

274
00:13:43,970 --> 00:13:55,160
this if we basically try to find gadgets

275
00:13:48,440 --> 00:13:57,800
in the existing code so now a bit more

276
00:13:55,160 --> 00:14:00,920
details on the register windowing which

277
00:13:57,800 --> 00:14:05,449
is a crucial part for exploiting and the

278
00:14:00,920 --> 00:14:07,939
ESP 32 has 64 reach registers but you

279
00:14:05,450 --> 00:14:11,600
can only see 16 registered at the same

280
00:14:07,940 --> 00:14:13,880
time so what's happening exactly on each

281
00:14:11,600 --> 00:14:17,060
stop routine call the registers are

282
00:14:13,880 --> 00:14:19,610
rotated so if I call a subroutine and

283
00:14:17,060 --> 00:14:23,920
the subroutine can use all 16 registers

284
00:14:19,610 --> 00:14:23,920
and the other registers are saved

285
00:14:24,370 --> 00:14:29,510
this allows us to use a lot of registers

286
00:14:27,890 --> 00:14:32,300
and obviously don't do a lot of stick

287
00:14:29,510 --> 00:14:36,170
handling code memory and recode which is

288
00:14:32,300 --> 00:14:38,870
time-consuming so house is functioning

289
00:14:36,170 --> 00:14:41,660
and exception handlers are triggered on

290
00:14:38,870 --> 00:14:45,320
function cards such as call x4 or call

291
00:14:41,660 --> 00:14:47,630
x8 and then the current register current

292
00:14:45,320 --> 00:14:52,959
active registers are moved to either

293
00:14:47,630 --> 00:14:55,760
free and invisible registers or if all

294
00:14:52,959 --> 00:14:57,439
physical registers are exhausted they

295
00:14:55,760 --> 00:15:00,740
are moved onto the stack and this is

296
00:14:57,440 --> 00:15:03,200
what we actually want to happen after

297
00:15:00,740 --> 00:15:06,350
force subroutine codes all of the 64

298
00:15:03,200 --> 00:15:08,630
registers are exhausted and now the

299
00:15:06,350 --> 00:15:15,230
stack is used to store the registers

300
00:15:08,630 --> 00:15:19,220
which we can overwrite to visualize this

301
00:15:15,230 --> 00:15:22,070
we made some nice graphs

302
00:15:19,220 --> 00:15:25,970
on the left you can see how the esp8266

303
00:15:22,070 --> 00:15:27,830
and arm is doing this basically the

304
00:15:25,970 --> 00:15:30,410
stack pointer or frame pointer is

305
00:15:27,830 --> 00:15:34,130
adjusted and all the data is on the

306
00:15:30,410 --> 00:15:36,410
stack on the right you can see I cannot

307
00:15:34,130 --> 00:15:40,630
see it on this graph but it should to

308
00:15:36,410 --> 00:15:44,870
show register windowing I didn't do it

309
00:15:40,630 --> 00:15:46,580
it's Garrett's work yeah blame the other

310
00:15:44,870 --> 00:15:49,760
guy that's offside

311
00:15:46,580 --> 00:15:51,200
so on this screen what you see is what

312
00:15:49,760 --> 00:15:55,100
we're aiming at is we're aiming at

313
00:15:51,200 --> 00:15:56,780
memory corruption and what happens what

314
00:15:55,100 --> 00:15:59,180
happens in technology technically it's

315
00:15:56,780 --> 00:16:01,010
always a race so you have attack vectors

316
00:15:59,180 --> 00:16:03,530
being found you have the attack vectors

317
00:16:01,010 --> 00:16:05,360
being exploited and the technology

318
00:16:03,530 --> 00:16:09,350
mitigation techniques need to be put in

319
00:16:05,360 --> 00:16:14,360
place in order for the bacteria to not

320
00:16:09,350 --> 00:16:16,940
be exploitable anymore so many of these

321
00:16:14,360 --> 00:16:20,600
mitigations were put in place on modern

322
00:16:16,940 --> 00:16:21,950
processes or on software so stack

323
00:16:20,600 --> 00:16:24,350
Canaries address space layout

324
00:16:21,950 --> 00:16:26,930
randomization non-executable data memory

325
00:16:24,350 --> 00:16:30,110
all of this was implemented on software

326
00:16:26,930 --> 00:16:32,150
initially with CPU manufacturers then

327
00:16:30,110 --> 00:16:35,360
catching on and implementing the NX on

328
00:16:32,150 --> 00:16:37,939
the architecture level and with IOT

329
00:16:35,360 --> 00:16:40,970
devices and the low power requirements

330
00:16:37,940 --> 00:16:42,800
these mitigating features might not have

331
00:16:40,970 --> 00:16:45,950
been important initial features that

332
00:16:42,800 --> 00:16:49,490
were implemented for platform providers

333
00:16:45,950 --> 00:16:51,490
and hardware manufacturers a crucial

334
00:16:49,490 --> 00:16:55,390
point that we need to get here is that

335
00:16:51,490 --> 00:16:58,460
all of these Canaries and SLR techniques

336
00:16:55,390 --> 00:17:00,680
register windows are just ways to cope

337
00:16:58,460 --> 00:17:04,280
with the aftermath of a particular

338
00:17:00,680 --> 00:17:05,959
overflow and the data was still damaged

339
00:17:04,280 --> 00:17:08,540
the attackers accomplished the two

340
00:17:05,959 --> 00:17:12,770
things that they wanted to do so access

341
00:17:08,540 --> 00:17:14,990
data change execution flow ideally we

342
00:17:12,770 --> 00:17:17,599
want to prevent this earlier and we want

343
00:17:14,990 --> 00:17:20,109
to prevent the overflow from happening

344
00:17:17,599 --> 00:17:23,240
at all so we can do this with rigorous

345
00:17:20,109 --> 00:17:25,329
compile time analysis or at least by

346
00:17:23,240 --> 00:17:30,170
blocking the overflow attempt at runtime

347
00:17:25,329 --> 00:17:31,250
turning this into an exception so the

348
00:17:30,170 --> 00:17:32,929
application would still start

349
00:17:31,250 --> 00:17:35,600
functioning properly

350
00:17:32,929 --> 00:17:38,389
but at least it does this cleanly and in

351
00:17:35,600 --> 00:17:41,059
a way that doesn't make the attackers

352
00:17:38,389 --> 00:17:44,360
other computer or your computer their

353
00:17:41,059 --> 00:17:47,980
other computer and it doesn't do this

354
00:17:44,360 --> 00:17:51,590
with blindly keeping on going with

355
00:17:47,980 --> 00:17:53,119
damaged memory structures so all of

356
00:17:51,590 --> 00:17:56,289
these things can be done and can be

357
00:17:53,119 --> 00:18:00,009
implemented to avoid memory corruption

358
00:17:56,289 --> 00:18:00,009
depending on the system ah

359
00:18:00,919 --> 00:18:07,100
it's Tony sorry to show you a visual

360
00:18:04,789 --> 00:18:08,840
example of code density and we said that

361
00:18:07,100 --> 00:18:10,299
code density was important for a couple

362
00:18:08,840 --> 00:18:13,158
of reasons

363
00:18:10,299 --> 00:18:16,340
Koh density is important because we want

364
00:18:13,159 --> 00:18:18,860
in low power devices we want to

365
00:18:16,340 --> 00:18:20,779
basically not drain the battery we want

366
00:18:18,860 --> 00:18:22,668
to put that device into low power mode

367
00:18:20,779 --> 00:18:26,119
and have it function for months with an

368
00:18:22,669 --> 00:18:28,990
e-ink display and a little battery so we

369
00:18:26,119 --> 00:18:32,090
have a hello world piece of code there

370
00:18:28,990 --> 00:18:35,440
then we compile this forearm this turns

371
00:18:32,090 --> 00:18:39,259
out to be nine instructions in total and

372
00:18:35,440 --> 00:18:42,279
then we do this same for extends our and

373
00:18:39,259 --> 00:18:47,779
that ends up being only six instructions

374
00:18:42,279 --> 00:18:53,899
so we have less compiled code that's

375
00:18:47,779 --> 00:18:55,700
actually being generated and on this

376
00:18:53,899 --> 00:18:57,619
screen you can see the mappings if

377
00:18:55,700 --> 00:18:59,090
you're familiar with arm exploitation if

378
00:18:57,619 --> 00:19:05,059
you've done some routine hacking in the

379
00:18:59,090 --> 00:19:07,119
past you can see that it's a similar

380
00:19:05,059 --> 00:19:09,499
architecture general-purpose registers

381
00:19:07,119 --> 00:19:13,189
we have a stack pointer a return address

382
00:19:09,499 --> 00:19:14,600
it's basically all the same most of the

383
00:19:13,190 --> 00:19:17,749
arm exploitation knowledge is

384
00:19:14,600 --> 00:19:21,350
transferable to the extender platform as

385
00:19:17,749 --> 00:19:24,350
well and here you have your mappings to

386
00:19:21,350 --> 00:19:27,860
save you five minutes of googling the a

387
00:19:24,350 --> 00:19:29,779
zero return address R 14 on arm we have

388
00:19:27,860 --> 00:19:31,879
the general-purpose registers there and

389
00:19:29,779 --> 00:19:35,450
the general-purpose registers on the arm

390
00:19:31,879 --> 00:19:42,050
and the program counter being PC and r15

391
00:19:35,450 --> 00:19:44,030
PC over there okay so let's have a look

392
00:19:42,050 --> 00:19:48,620
get instructions available on both of

393
00:19:44,030 --> 00:19:51,320
these architectures and yeah and you can

394
00:19:48,620 --> 00:19:53,899
on arm a simple rob chain would be a

395
00:19:51,320 --> 00:19:58,689
gadget like would be using a gadget like

396
00:19:53,900 --> 00:20:02,230
pop R 1 R 2 PC but as you can see

397
00:19:58,690 --> 00:20:04,970
somehow I didn't also include those

398
00:20:02,230 --> 00:20:08,390
instructions for arm but there's no push

399
00:20:04,970 --> 00:20:10,070
and pop instructions on extensor this

400
00:20:08,390 --> 00:20:12,500
means that our rob gadget

401
00:20:10,070 --> 00:20:15,139
needs to adjust the instruction and

402
00:20:12,500 --> 00:20:18,470
stake with the help of the gadget

403
00:20:15,140 --> 00:20:20,810
and this means increasing the stack

404
00:20:18,470 --> 00:20:24,230
pointer manually and setting a new

405
00:20:20,810 --> 00:20:25,550
return value as we cannot simply pop

406
00:20:24,230 --> 00:20:29,690
from the stack which will move

407
00:20:25,550 --> 00:20:32,260
automatically the stack pointer and now

408
00:20:29,690 --> 00:20:34,270
we come a bit to the debugging part

409
00:20:32,260 --> 00:20:36,170
debugging hardware sucks

410
00:20:34,270 --> 00:20:38,840
working with hardware is time-consuming

411
00:20:36,170 --> 00:20:42,740
you have to do a lot of rebooting

412
00:20:38,840 --> 00:20:44,990
reattach the debugger and you need to

413
00:20:42,740 --> 00:20:48,110
flash it a lot because you want to try

414
00:20:44,990 --> 00:20:50,390
different goat and you need to think of

415
00:20:48,110 --> 00:20:54,530
like flashing the device several times

416
00:20:50,390 --> 00:20:56,510
the minute and on the ESP I don't know

417
00:20:54,530 --> 00:20:59,389
if someone of you already used ESP

418
00:20:56,510 --> 00:21:01,820
serious if you try to flash more than

419
00:20:59,390 --> 00:21:04,940
once in a minute you need to remove

420
00:21:01,820 --> 00:21:08,060
power from the device let it relax a bit

421
00:21:04,940 --> 00:21:10,580
and then you can reattach the power and

422
00:21:08,060 --> 00:21:13,340
then you can flash again and it takes

423
00:21:10,580 --> 00:21:17,720
like 10 tries for one device so it's

424
00:21:13,340 --> 00:21:20,780
very time consuming also open OCD is

425
00:21:17,720 --> 00:21:22,430
sometimes a bit buggy I've seen several

426
00:21:20,780 --> 00:21:26,690
people struggling setting it up

427
00:21:22,430 --> 00:21:29,690
correctly and the most bad part about

428
00:21:26,690 --> 00:21:32,240
this is you can only set to breakpoints

429
00:21:29,690 --> 00:21:34,610
on actual Hardware which is extremely

430
00:21:32,240 --> 00:21:38,480
limiting if you have a dual-core CPU and

431
00:21:34,610 --> 00:21:41,510
want to debug just one procedure also I

432
00:21:38,480 --> 00:21:45,640
cannot solve that it good and the cables

433
00:21:41,510 --> 00:21:48,200
always go why it what I actually want is

434
00:21:45,640 --> 00:21:51,230
which you cannot really see that good

435
00:21:48,200 --> 00:21:55,010
I open the demo it's better so we have

436
00:21:51,230 --> 00:21:55,820
here on the left with the laser pointer

437
00:21:55,010 --> 00:22:00,560
you see it better

438
00:21:55,820 --> 00:22:02,770
I have started curiam or ESP on the

439
00:22:00,560 --> 00:22:06,379
right I have attached the debugger and

440
00:22:02,770 --> 00:22:08,150
here I have the code with I can

441
00:22:06,380 --> 00:22:10,700
automatically flash it into the ROM

442
00:22:08,150 --> 00:22:13,100
because I'm emulating this and now I

443
00:22:10,700 --> 00:22:18,670
tell you how to set up a setup like this

444
00:22:13,100 --> 00:22:21,800
to start exploring the architecture so

445
00:22:18,670 --> 00:22:25,010
the first thing you do is you can set up

446
00:22:21,800 --> 00:22:27,110
QE mo and q mo has extensive support for

447
00:22:25,010 --> 00:22:30,590
a very long time now and it's quite

448
00:22:27,110 --> 00:22:33,699
stable but we focus on the is P series

449
00:22:30,590 --> 00:22:36,470
and we want to use the ESB IDF

450
00:22:33,700 --> 00:22:42,290
especially for using free artists on the

451
00:22:36,470 --> 00:22:45,710
device so we need is PQ e mo e SP 32 if

452
00:22:42,290 --> 00:22:49,090
you set up here mo e SP 32 which is a

453
00:22:45,710 --> 00:22:52,880
bit painful because the documentation is

454
00:22:49,090 --> 00:22:56,060
updated in a long text and he's not

455
00:22:52,880 --> 00:22:59,360
removing the old parts you will actually

456
00:22:56,060 --> 00:23:01,490
need hardware or at least a boot ROM

457
00:22:59,360 --> 00:23:04,850
file because this is not shipped with

458
00:23:01,490 --> 00:23:06,770
the QE mode you can't find this in some

459
00:23:04,850 --> 00:23:09,350
get up repositories and you can also

460
00:23:06,770 --> 00:23:13,220
drop us mail for this or you can even

461
00:23:09,350 --> 00:23:18,949
use your actual current tech vetches to

462
00:23:13,220 --> 00:23:21,410
dump the esp8266 boot ROM next you will

463
00:23:18,950 --> 00:23:25,040
need to setup the ESP and IOT

464
00:23:21,410 --> 00:23:29,690
development framework which has all the

465
00:23:25,040 --> 00:23:32,540
tools you need like compilers and also

466
00:23:29,690 --> 00:23:34,660
tools for analyzing your code especially

467
00:23:32,540 --> 00:23:37,610
the boot rom which you can do with

468
00:23:34,660 --> 00:23:41,240
object dump it's quite a good tool

469
00:23:37,610 --> 00:23:42,949
because the extends our tool chain or

470
00:23:41,240 --> 00:23:44,810
the ESP twitch and removes the elf

471
00:23:42,950 --> 00:23:48,020
feathers of the binaries before it

472
00:23:44,810 --> 00:23:50,990
flashes them to the device so most of

473
00:23:48,020 --> 00:23:53,000
the normal if analyzing tools will fail

474
00:23:50,990 --> 00:23:56,240
to analyze this properly especially

475
00:23:53,000 --> 00:24:01,070
resolving symbols and object dump and

476
00:23:56,240 --> 00:24:02,930
can do this so then you need to set up a

477
00:24:01,070 --> 00:24:06,290
good tool for this and assembling and

478
00:24:02,930 --> 00:24:09,470
analyzing binaries I or we prefer a

479
00:24:06,290 --> 00:24:12,980
rather too because it's very good and

480
00:24:09,470 --> 00:24:20,350
very very good support for extender and

481
00:24:12,980 --> 00:24:24,559
also it will not make you poor yeah so

482
00:24:20,350 --> 00:24:29,360
after this it's time for gdb we use the

483
00:24:24,559 --> 00:24:30,500
gdb provided by the QE mu ESP 32 but

484
00:24:29,360 --> 00:24:33,918
it's also possible to use other

485
00:24:30,500 --> 00:24:35,750
debuggers via the gdb server and to have

486
00:24:33,919 --> 00:24:38,090
a better overview we strongly suggest

487
00:24:35,750 --> 00:24:39,590
you use gdb dashboard which Phillip

488
00:24:38,090 --> 00:24:41,270
already showed you hopefully it's better

489
00:24:39,590 --> 00:24:44,870
in the video or we have a bit more

490
00:24:41,270 --> 00:24:47,440
contrast as this makes the registers and

491
00:24:44,870 --> 00:24:50,870
everything puts it in a nice viewable

492
00:24:47,440 --> 00:24:52,970
dashboard that we have available at the

493
00:24:50,870 --> 00:24:56,600
time gdb Peter didn't work that well for

494
00:24:52,970 --> 00:24:58,730
us after that a next step is to get

495
00:24:56,600 --> 00:25:00,740
everything to display in one place so

496
00:24:58,730 --> 00:25:03,260
once you've run through all of the pain

497
00:25:00,740 --> 00:25:07,010
points of flashing reconnecting the

498
00:25:03,260 --> 00:25:09,080
device and all of that when we run it in

499
00:25:07,010 --> 00:25:12,470
emulated environments we want everything

500
00:25:09,080 --> 00:25:14,960
on one screen and easily accessible so

501
00:25:12,470 --> 00:25:17,120
for this we use T marks you'll need at

502
00:25:14,960 --> 00:25:19,100
least three windows to efficiently debug

503
00:25:17,120 --> 00:25:23,418
everything depending on your preference

504
00:25:19,100 --> 00:25:26,418
there and if everything is already set

505
00:25:23,419 --> 00:25:29,419
up you can write your vulnerable code to

506
00:25:26,419 --> 00:25:31,789
explore the actual architecture and then

507
00:25:29,419 --> 00:25:34,549
the final step start exploiting your

508
00:25:31,789 --> 00:25:36,860
code investigate the crashes try to

509
00:25:34,549 --> 00:25:37,850
learn where the data actually goes on

510
00:25:36,860 --> 00:25:40,189
the stack

511
00:25:37,850 --> 00:25:42,350
what registers sorry what registers are

512
00:25:40,190 --> 00:25:44,600
being affected you need to be able to

513
00:25:42,350 --> 00:25:47,350
find gadgets which we'll go into a bit

514
00:25:44,600 --> 00:25:52,549
more you need to build Rob chains and

515
00:25:47,350 --> 00:25:55,039
finally hopefully you can profit so in

516
00:25:52,549 --> 00:25:58,280
previous talks we've shown a POC of Rob

517
00:25:55,039 --> 00:26:00,140
chains working on extender but today

518
00:25:58,280 --> 00:26:02,780
we'll show you a rope chain working with

519
00:26:00,140 --> 00:26:07,640
actual gadgets that exists or pre-exists

520
00:26:02,780 --> 00:26:10,129
in the ESP IDF created boot roms first

521
00:26:07,640 --> 00:26:12,440
perhaps we need to go into what are

522
00:26:10,130 --> 00:26:14,809
gadgets and what are they good for so

523
00:26:12,440 --> 00:26:17,360
essentially a gadget is a piece of pre

524
00:26:14,809 --> 00:26:20,840
compiled code that exists in a boot ROM

525
00:26:17,360 --> 00:26:23,330
or deployed on the device it pre exists

526
00:26:20,840 --> 00:26:25,189
in the system that you want to exploit

527
00:26:23,330 --> 00:26:27,739
and this is the difference between a

528
00:26:25,190 --> 00:26:29,899
perfect gadget and a fake gadget

529
00:26:27,739 --> 00:26:31,669
sometimes for demos people do a fake

530
00:26:29,899 --> 00:26:34,129
gadget which is just code that you

531
00:26:31,669 --> 00:26:36,110
create that you can then access and

532
00:26:34,129 --> 00:26:39,738
reuse over time but it doesn't

533
00:26:36,110 --> 00:26:41,330
necessarily exist in the bootrom so for

534
00:26:39,739 --> 00:26:44,320
a perfect gadget we want something in

535
00:26:41,330 --> 00:26:46,189
the bootrom that exists that is a small

536
00:26:44,320 --> 00:26:48,439
instruction set like five or six

537
00:26:46,190 --> 00:26:52,269
instructions it accomplishes something

538
00:26:48,440 --> 00:26:54,799
by allowing us writing to registers and

539
00:26:52,269 --> 00:26:58,190
allowing us to affect the information

540
00:26:54,799 --> 00:27:00,259
flow on execution the fake gadget is

541
00:26:58,190 --> 00:27:02,840
something that you put in your code and

542
00:27:00,259 --> 00:27:05,450
that you deploy it's useful for a proof

543
00:27:02,840 --> 00:27:07,609
of concept but it's not useful because

544
00:27:05,450 --> 00:27:13,159
you can't exploit existing systems that

545
00:27:07,609 --> 00:27:15,320
are out there in the wild so for this

546
00:27:13,159 --> 00:27:17,989
very ugly slide what we have is we have

547
00:27:15,320 --> 00:27:21,619
some perfect gadgets for the a two six

548
00:27:17,989 --> 00:27:24,559
six we use this pre-existing code to

549
00:27:21,619 --> 00:27:28,189
populate registers if we need to write

550
00:27:24,559 --> 00:27:29,720
data we use this function with read and

551
00:27:28,190 --> 00:27:32,779
you'll see the difference on the next

552
00:27:29,720 --> 00:27:36,220
slide and then finally we use icing to

553
00:27:32,779 --> 00:27:39,919
inform the CPU that we've updated our

554
00:27:36,220 --> 00:27:41,659
instruction set so this would pre exist

555
00:27:39,919 --> 00:27:44,720
in the boot ROM and this code that we

556
00:27:41,659 --> 00:27:49,129
want to basically point to to execute

557
00:27:44,720 --> 00:27:52,460
but with different data for us so but

558
00:27:49,129 --> 00:27:55,668
this code is only on the esp8266 boot

559
00:27:52,460 --> 00:28:00,559
ROM and you cannot find code like this

560
00:27:55,669 --> 00:28:04,100
in these b32 boot ROM on Sunday I was

561
00:28:00,559 --> 00:28:06,950
reading a lot of disassembled code so it

562
00:28:04,100 --> 00:28:10,369
was his Sunday I was very sleepy but

563
00:28:06,950 --> 00:28:13,580
highly caffeinated and I discovered

564
00:28:10,369 --> 00:28:18,080
these gadgets I was some kind of in the

565
00:28:13,580 --> 00:28:20,418
zone so I don't know how and so first of

566
00:28:18,080 --> 00:28:23,418
all these gadgets are a little more

567
00:28:20,419 --> 00:28:26,960
complex than the gadgets we had on

568
00:28:23,419 --> 00:28:29,210
previous slide these consist usually on

569
00:28:26,960 --> 00:28:32,090
at least refers to on a lot more

570
00:28:29,210 --> 00:28:34,669
instructions and let's talk about to get

571
00:28:32,090 --> 00:28:36,970
it the first one we actually only use

572
00:28:34,669 --> 00:28:43,179
this to increase the stack pointer

573
00:28:36,970 --> 00:28:47,230
was point a thing so this is called here

574
00:28:43,179 --> 00:28:48,970
it's increasing our stack pointer this

575
00:28:47,230 --> 00:28:53,679
is not so important it will be trashed

576
00:28:48,970 --> 00:28:55,330
this sets the return value for the

577
00:28:53,679 --> 00:28:58,809
gadget so this is must be the address of

578
00:28:55,330 --> 00:29:03,428
this one and so this is just to increase

579
00:28:58,809 --> 00:29:05,520
the stack pointer and jump to the next

580
00:29:03,429 --> 00:29:08,559
gadget which is a bit more interesting

581
00:29:05,520 --> 00:29:11,918
this is to populate register gadget and

582
00:29:08,559 --> 00:29:14,110
this is a quite big gadget and also okay

583
00:29:11,919 --> 00:29:16,090
a slight side note this gadget is

584
00:29:14,110 --> 00:29:18,549
calling another function which is

585
00:29:16,090 --> 00:29:22,299
calling thrashing some registers we've

586
00:29:18,549 --> 00:29:25,929
populated anyway so the populate

587
00:29:22,299 --> 00:29:28,480
registers gadget has about 27

588
00:29:25,929 --> 00:29:30,039
instructions this is why you cannot

589
00:29:28,480 --> 00:29:32,440
fight this with tools you need to read

590
00:29:30,039 --> 00:29:34,990
the code because most Rob gadget finding

591
00:29:32,440 --> 00:29:40,210
tools search for gadgets in the size of

592
00:29:34,990 --> 00:29:43,390
five to seven instructions a good thing

593
00:29:40,210 --> 00:29:46,690
about this gadget is its populating all

594
00:29:43,390 --> 00:29:48,549
registers so this allows us to choose

595
00:29:46,690 --> 00:29:53,980
four different write gadgets because we

596
00:29:48,549 --> 00:29:57,039
have data in all registers we chose this

597
00:29:53,980 --> 00:30:00,580
write gadget this is storing the data

598
00:29:57,039 --> 00:30:04,270
data stored in the register a 14-2 the

599
00:30:00,580 --> 00:30:07,360
address stored in a 15 + to offset 60

600
00:30:04,270 --> 00:30:11,830
then it was loading a new return address

601
00:30:07,360 --> 00:30:15,100
which is the isin gadget and yeah it

602
00:30:11,830 --> 00:30:17,139
will sync the instruction RAM and one

603
00:30:15,100 --> 00:30:19,840
noteworthy thing here is you can only

604
00:30:17,140 --> 00:30:28,510
write to instruction RAM using the

605
00:30:19,840 --> 00:30:30,699
operations s8y I s16 I and as 32 I all

606
00:30:28,510 --> 00:30:37,620
other operations will trigger an

607
00:30:30,700 --> 00:30:37,620
exception so demo time

608
00:30:40,760 --> 00:30:45,460
maybe we can turn the lights off here

609
00:30:52,780 --> 00:31:02,770
where's my cursor yeah I think you can

610
00:31:11,230 --> 00:31:18,950
okay so this is the back environment we

611
00:31:14,960 --> 00:31:21,679
have to cue email call appear and we

612
00:31:18,950 --> 00:31:23,929
already have attached I know it's really

613
00:31:21,679 --> 00:31:27,200
bad to read but we will upload it in a

614
00:31:23,929 --> 00:31:29,390
better resolution later so in a that

615
00:31:27,200 --> 00:31:37,940
break point to the first gadget which is

616
00:31:29,390 --> 00:31:40,910
triggered after the initial overflow so

617
00:31:37,940 --> 00:31:43,220
now it is triggered and we can see the

618
00:31:40,910 --> 00:31:46,630
instructions of the gadget here we can

619
00:31:43,220 --> 00:31:53,090
see that the stack pointer is increased

620
00:31:46,630 --> 00:31:54,919
now we step through code and this is a

621
00:31:53,090 --> 00:31:58,159
function call it's a lot of operations

622
00:31:54,919 --> 00:32:01,820
happening which you usually don't want

623
00:31:58,160 --> 00:32:06,250
Rob pietà to do but it's just fresh in

624
00:32:01,820 --> 00:32:06,250
two registers so we can live with it so

625
00:32:07,690 --> 00:32:12,740
now we are populating all the registers

626
00:32:10,580 --> 00:32:19,580
you can see we populate registers

627
00:32:12,740 --> 00:32:28,070
starting from a 3 to a 15 and then we

628
00:32:19,580 --> 00:32:32,540
jump to the right gadget and now we take

629
00:32:28,070 --> 00:32:35,389
a look at the memory instruction RAM and

630
00:32:32,540 --> 00:32:38,870
you can see we've wrote area into the

631
00:32:35,390 --> 00:32:44,900
instruction RAM so this is actually get

632
00:32:38,870 --> 00:32:46,850
just existing in every ESP 32 and yep I

633
00:32:44,900 --> 00:32:49,370
didn't have enough time talking to more

634
00:32:46,850 --> 00:32:53,000
of this what we do and the next steps

635
00:32:49,370 --> 00:32:54,590
would be to do actual share codes and

636
00:32:53,000 --> 00:32:56,900
write implant

637
00:32:54,590 --> 00:33:00,740
would change the beer which changed the

638
00:32:56,900 --> 00:33:05,870
behavior of the device without deleting

639
00:33:00,740 --> 00:33:11,330
its original function so and next slide

640
00:33:05,870 --> 00:33:13,370
we already saw it so what are good

641
00:33:11,330 --> 00:33:15,620
reasons for blaming the badge

642
00:33:13,370 --> 00:33:17,750
step one we can blame the badge for

643
00:33:15,620 --> 00:33:20,870
being very frustrated for a very long

644
00:33:17,750 --> 00:33:24,200
time trying to get things to work with

645
00:33:20,870 --> 00:33:26,178
register way knowing crashing our

646
00:33:24,200 --> 00:33:30,169
registers that we've over Essen into all

647
00:33:26,179 --> 00:33:33,230
the time was it took some time to

648
00:33:30,169 --> 00:33:35,210
inspect how the architecture work step

649
00:33:33,230 --> 00:33:37,909
two you need to go and present your

650
00:33:35,210 --> 00:33:40,340
findings so present your frustration ask

651
00:33:37,909 --> 00:33:41,630
people for examples at hardware that I

652
00:33:40,340 --> 00:33:43,549
owe people gave us a lot of good

653
00:33:41,630 --> 00:33:46,940
suggestions of what we could possibly

654
00:33:43,549 --> 00:33:49,610
have a look at step three is to do bad

655
00:33:46,940 --> 00:33:53,390
post conference karaokes which led to

656
00:33:49,610 --> 00:33:57,379
that photo over there and step four is

657
00:33:53,390 --> 00:33:59,990
profits I mean we have the real gadgets

658
00:33:57,380 --> 00:34:02,960
in the ESP IDF now and it would be

659
00:33:59,990 --> 00:34:05,649
interesting to get persistence on the

660
00:34:02,960 --> 00:34:11,418
tasks on these devices and have them

661
00:34:05,649 --> 00:34:14,270
stay operational while having a backdoor

662
00:34:11,418 --> 00:34:16,629
into those devices so if any of you guys

663
00:34:14,270 --> 00:34:19,790
want to join us for the actual paper or

664
00:34:16,629 --> 00:34:24,560
helping us expand the labs please get in

665
00:34:19,790 --> 00:34:27,469
touch and then I would just like to

666
00:34:24,560 --> 00:34:30,649
thank my employer for giving me the time

667
00:34:27,469 --> 00:34:38,598
to be here on a Friday and present this

668
00:34:30,649 --> 00:34:41,598
talk yeah me too yes thankful some time

669
00:34:38,599 --> 00:34:44,149
I could spend on research and yeah

670
00:34:41,599 --> 00:34:49,510
that's about it contact me via my new

671
00:34:44,149 --> 00:34:56,138
emoji domain email or on Twitter any

672
00:34:49,510 --> 00:34:56,139
questions thank you for you

673
00:34:58,670 --> 00:35:10,869
[Applause]

674
00:35:02,530 --> 00:35:10,869
are there any questions don't be shy

675
00:35:18,550 --> 00:35:27,180
nobody okay so thank the speaker again

676
00:35:25,480 --> 00:35:31,920
thanks

677
00:35:27,180 --> 00:35:31,919
[Applause]

678
00:35:36,240 --> 00:35:38,299
you

