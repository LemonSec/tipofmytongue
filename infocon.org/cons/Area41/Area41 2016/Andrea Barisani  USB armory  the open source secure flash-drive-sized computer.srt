1
00:00:06,060 --> 00:00:12,850
hello<font color="#E5E5E5"> everyone I feel like a rock star I</font>

2
00:00:11,020 --> 00:00:14,770
mean they have a backstage with a super

3
00:00:12,850 --> 00:00:17,110
big bathroom with shower for people are

4
00:00:14,770 --> 00:00:19,420
singing I'm all miked up I mean I really

5
00:00:17,110 --> 00:00:20,770
<font color="#E5E5E5">feel like singing and dancing but we're</font>

6
00:00:19,420 --> 00:00:23,560
<font color="#E5E5E5">not here</font><font color="#CCCCCC"> for that and that's</font><font color="#E5E5E5"> probably</font>

7
00:00:20,770 --> 00:00:27,250
best for you<font color="#E5E5E5"> no I'm sorry I'm</font><font color="#CCCCCC"> sorry</font>

8
00:00:23,560 --> 00:00:28,869
those days are gone anyway so I'm the

9
00:00:27,250 --> 00:00:32,140
only<font color="#CCCCCC"> thing that stands between you and</font>

10
00:00:28,870 --> 00:00:34,660
lunch so let's<font color="#E5E5E5"> make it tidy and and in</font>

11
00:00:32,140 --> 00:00:36,460
short hopefully so Amanda Berry's ani

12
00:00:34,660 --> 00:00:38,589
I'm the founder of<font color="#E5E5E5"> a company called</font>

13
00:00:36,460 --> 00:00:40,929
<font color="#E5E5E5">inverse puff and I'm here to present</font>

14
00:00:38,589 --> 00:00:44,019
about our<font color="#E5E5E5"> little project called the USB</font>

15
00:00:40,929 --> 00:00:46,030
armory so how many of you<font color="#E5E5E5"> don't know</font>

16
00:00:44,019 --> 00:00:50,019
anything<font color="#E5E5E5"> about the USB armory raise your</font>

17
00:00:46,030 --> 00:00:51,370
<font color="#E5E5E5">hand</font><font color="#CCCCCC"> ok so I hope that</font><font color="#E5E5E5"> this would be</font>

18
00:00:50,019 --> 00:00:52,690
<font color="#E5E5E5">interesting for you and for the other</font>

19
00:00:51,370 --> 00:00:53,890
half i still hope you would be

20
00:00:52,690 --> 00:00:57,760
interesting for you than<font color="#CCCCCC"> i can</font><font color="#E5E5E5"> give you</font>

21
00:00:53,890 --> 00:00:58,839
<font color="#E5E5E5">more insights into our project so just</font>

22
00:00:57,760 --> 00:01:00,969
to tell you a<font color="#CCCCCC"> little bit of background</font>

23
00:00:58,839 --> 00:01:02,409
about what we do so we're<font color="#E5E5E5"> company has</font>

24
00:01:00,969 --> 00:01:04,479
been doing software as well as hardware

25
00:01:02,409 --> 00:01:06,100
security for more than<font color="#E5E5E5"> 10 years we</font>

26
00:01:04,479 --> 00:01:08,650
specialize in exotic sectors such as

27
00:01:06,100 --> 00:01:11,530
automotive avionics and every two years

28
00:01:08,650 --> 00:01:15,070
we try to do a public research where we

29
00:01:11,530 --> 00:01:16,689
present some exotic stuff in 2007 we

30
00:01:15,070 --> 00:01:19,119
went where one of<font color="#E5E5E5"> the first ones to</font>

31
00:01:16,689 --> 00:01:21,158
present to talk about car hacking with

32
00:01:19,119 --> 00:01:23,439
injecting traffic information signals on

33
00:01:21,159 --> 00:01:25,479
a car two years<font color="#E5E5E5"> after</font><font color="#CCCCCC"> that we did</font><font color="#E5E5E5"> a</font>

34
00:01:23,439 --> 00:01:28,240
tempest attack sniffing keystroke using

35
00:01:25,479 --> 00:01:32,079
either lasers or on the power line in

36
00:01:28,240 --> 00:01:34,960
2011 we broke Chip and<font color="#E5E5E5"> PIN in 2014 we</font>

37
00:01:32,079 --> 00:01:38,829
did packing impacted to in pocketing

38
00:01:34,960 --> 00:01:41,259
packet over<font color="#CCCCCC"> Ethernet attacks and then in</font>

39
00:01:38,829 --> 00:01:43,899
2015 we decided that we wanted to<font color="#E5E5E5"> build</font>

40
00:01:41,259 --> 00:01:46,840
<font color="#E5E5E5">something for a change rather than break</font>

41
00:01:43,899 --> 00:01:50,140
the things that we were being handed to

42
00:01:46,840 --> 00:01:52,179
and so we decided to build a hardware

43
00:01:50,140 --> 00:01:55,210
project called the USB armory which is

44
00:01:52,179 --> 00:01:58,390
this device over here which as you can

45
00:01:55,210 --> 00:02:00,969
see<font color="#E5E5E5"> it's very very very tiny so what is</font>

46
00:01:58,390 --> 00:02:03,999
the USB armory and why did we decide to

47
00:02:00,969 --> 00:02:06,520
do it so it's a advice which is<font color="#E5E5E5"> designed</font>

48
00:02:03,999 --> 00:02:09,970
for personal security applications and

49
00:02:06,520 --> 00:02:11,880
the main idea the first idea which

50
00:02:09,970 --> 00:02:15,489
prompted the creation of such a device

51
00:02:11,880 --> 00:02:17,230
was to simply have secure encrypted

52
00:02:15,489 --> 00:02:19,210
storage with something<font color="#CCCCCC"> that we could</font>

53
00:02:17,230 --> 00:02:22,000
trust in a week of control I mean

54
00:02:19,210 --> 00:02:24,160
you can get a lot<font color="#E5E5E5"> of USB drives which or</font>

55
00:02:22,000 --> 00:02:25,840
have military-grade encryption whatever

56
00:02:24,160 --> 00:02:30,070
that means and you have no idea<font color="#E5E5E5"> what</font>

57
00:02:25,840 --> 00:02:32,140
they do and hopefully<font color="#E5E5E5"> you would think</font>

58
00:02:30,070 --> 00:02:33,820
that they would implement good security

59
00:02:32,140 --> 00:02:35,950
but every time we test the harder of

60
00:02:33,820 --> 00:02:38,140
<font color="#E5E5E5">those things they're very successful</font>

61
00:02:35,950 --> 00:02:40,420
they're very vulnerable to trivial

62
00:02:38,140 --> 00:02:42,579
hardware attacks so we wanted<font color="#E5E5E5"> a device</font>

63
00:02:40,420 --> 00:02:45,280
which would present itself as a<font color="#E5E5E5"> hannah's</font>

64
00:02:42,580 --> 00:02:46,840
mass storage and then we could<font color="#E5E5E5"> just copy</font>

65
00:02:45,280 --> 00:02:50,620
a file to it then you will encrypt the

66
00:02:46,840 --> 00:02:52,990
file with ir g PG or whatever<font color="#CCCCCC"> algar in</font>

67
00:02:50,620 --> 00:02:55,180
which we would deem acceptable and<font color="#E5E5E5"> that</font>

68
00:02:52,990 --> 00:02:58,000
the user would would feel safe about it

69
00:02:55,180 --> 00:03:00,250
but then we thought why<font color="#E5E5E5"> using mass</font>

70
00:02:58,000 --> 00:03:02,320
storage why don't we make a device which

71
00:03:00,250 --> 00:03:05,410
is tcp/ip connected so<font color="#CCCCCC"> that we can</font>

72
00:03:02,320 --> 00:03:07,900
expose a more rich functionality to the

73
00:03:05,410 --> 00:03:09,609
<font color="#E5E5E5">host rather than a simple</font><font color="#CCCCCC"> of mass</font>

74
00:03:07,900 --> 00:03:14,290
storage device rather than a simple USB

75
00:03:09,610 --> 00:03:16,240
Drive with tcp/ip we could just have a

76
00:03:14,290 --> 00:03:18,790
web server and we could ever reach your

77
00:03:16,240 --> 00:03:20,830
interface to do more actions for

78
00:03:18,790 --> 00:03:22,450
encrypting the files and also sharing

79
00:03:20,830 --> 00:03:24,580
the files and maybe scanning the files

80
00:03:22,450 --> 00:03:27,070
<font color="#CCCCCC">from our</font><font color="#E5E5E5"> or whatever on the device on</font>

81
00:03:24,580 --> 00:03:29,950
the USB device itself so not on the host

82
00:03:27,070 --> 00:03:32,650
and then we fought<font color="#CCCCCC"> but we have TCP IP</font>

83
00:03:29,950 --> 00:03:34,420
connectivity<font color="#E5E5E5"> then we could also do</font>

84
00:03:32,650 --> 00:03:36,670
things like having the device

85
00:03:34,420 --> 00:03:39,220
authenticating the host and then<font color="#E5E5E5"> maybe</font>

86
00:03:36,670 --> 00:03:41,500
having the device doing the data

87
00:03:39,220 --> 00:03:43,330
self-destruction if we don't do a

88
00:03:41,500 --> 00:03:45,880
certain<font color="#CCCCCC"> action if we don't present a</font>

89
00:03:43,330 --> 00:03:48,370
valid certificate or if we trigger a

90
00:03:45,880 --> 00:03:49,750
fail-safe war for some reason we we're

91
00:03:48,370 --> 00:03:52,030
thinking about expanding with more and

92
00:03:49,750 --> 00:03:54,400
more<font color="#CCCCCC"> and more functionality ah and then</font>

93
00:03:52,030 --> 00:03:56,410
we thought<font color="#CCCCCC"> that if you</font><font color="#E5E5E5"> have which we put</font>

94
00:03:54,400 --> 00:03:59,160
a standard computer rather than having a

95
00:03:56,410 --> 00:04:01,990
single<font color="#E5E5E5"> purpose device on such a USB</font>

96
00:03:59,160 --> 00:04:04,210
device then we<font color="#E5E5E5"> could also have an SSH</font>

97
00:04:01,990 --> 00:04:06,460
proxy so if<font color="#E5E5E5"> I want</font><font color="#CCCCCC"> to connect to</font>

98
00:04:04,210 --> 00:04:09,520
whatever service I have I can hold the

99
00:04:06,460 --> 00:04:11,110
keys on the device itself<font color="#E5E5E5"> I can ssh to</font>

100
00:04:09,520 --> 00:04:13,630
the device itself with some disposable

101
00:04:11,110 --> 00:04:16,510
password and then<font color="#E5E5E5"> i can ssh out of the</font>

102
00:04:13,630 --> 00:04:19,000
device itself to the internet so slowly

103
00:04:16,510 --> 00:04:20,680
<font color="#E5E5E5">and slowly and we can have a passer</font>

104
00:04:19,000 --> 00:04:23,830
imagine and so on<font color="#E5E5E5"> so slowly and slowly</font>

105
00:04:20,680 --> 00:04:25,990
the idea came<font color="#CCCCCC"> that rather than having a</font>

106
00:04:23,830 --> 00:04:28,000
<font color="#CCCCCC">single purpose</font><font color="#E5E5E5"> device there would be a</font>

107
00:04:25,990 --> 00:04:30,280
great security<font color="#E5E5E5"> benefit in having a</font>

108
00:04:28,000 --> 00:04:32,350
generic purpose device in such a compact

109
00:04:30,280 --> 00:04:32,919
form factor because it would enable not

110
00:04:32,350 --> 00:04:35,140
only a

111
00:04:32,920 --> 00:04:37,780
single application so it<font color="#E5E5E5"> wouldn't just</font>

112
00:04:35,140 --> 00:04:41,050
be an authentication token or a wallet

113
00:04:37,780 --> 00:04:44,140
or an SSH proxy it could be more and

114
00:04:41,050 --> 00:04:48,490
more<font color="#E5E5E5"> applications into one device</font><font color="#CCCCCC"> um and</font>

115
00:04:44,140 --> 00:04:50,409
if we would allow to have a familiar

116
00:04:48,490 --> 00:04:52,120
development environment and a standard

117
00:04:50,410 --> 00:04:54,700
environment on<font color="#CCCCCC"> the device that the user</font>

118
00:04:52,120 --> 00:04:56,530
and developers could develop on we could

119
00:04:54,700 --> 00:04:58,240
enable advanced functionality such as

120
00:04:56,530 --> 00:04:59,559
this one like the USB device<font color="#E5E5E5"> ID</font>

121
00:04:58,240 --> 00:05:01,690
authenticate the host or data

122
00:04:59,560 --> 00:05:04,540
self-destruction and and so on which

123
00:05:01,690 --> 00:05:08,469
<font color="#CCCCCC">where features that you couldn't have on</font>

124
00:05:04,540 --> 00:05:12,520
such a small device at<font color="#CCCCCC"> the time so the</font>

125
00:05:08,470 --> 00:05:15,130
design goals were set very clearly it

126
00:05:12,520 --> 00:05:15,969
must be<font color="#CCCCCC"> a compact USB power device or</font>

127
00:05:15,130 --> 00:05:18,340
something that you can<font color="#E5E5E5"> carry in your</font>

128
00:05:15,970 --> 00:05:20,290
pocket it must have fast cpu in a

129
00:05:18,340 --> 00:05:21,969
generous amount of<font color="#E5E5E5"> RAM to enable all the</font>

130
00:05:20,290 --> 00:05:24,610
richer applications that we wanted<font color="#E5E5E5"> to a</font>

131
00:05:21,970 --> 00:05:26,620
mass support secure boot so that you can

132
00:05:24,610 --> 00:05:29,110
<font color="#CCCCCC">ensure that only the code that is signed</font>

133
00:05:26,620 --> 00:05:30,880
by you gets executed on the<font color="#E5E5E5"> device it</font>

134
00:05:29,110 --> 00:05:33,370
must provide standard connectivity means

135
00:05:30,880 --> 00:05:35,530
over USB so not too<font color="#CCCCCC"> many complex driver</font>

136
00:05:33,370 --> 00:05:37,810
required and very important<font color="#CCCCCC"> you must</font>

137
00:05:35,530 --> 00:05:39,729
have a familiar developing an execution

138
00:05:37,810 --> 00:05:41,680
environment so not something which

139
00:05:39,730 --> 00:05:45,690
requires a high learning curve to

140
00:05:41,680 --> 00:05:48,610
develop on and the design should<font color="#CCCCCC"> be open</font>

141
00:05:45,690 --> 00:05:51,250
so we built this device selecting

142
00:05:48,610 --> 00:05:53,830
freescale IMX 53<font color="#E5E5E5"> system-on-a-chip which</font>

143
00:05:51,250 --> 00:05:56,380
is fairly powerful given the size of the

144
00:05:53,830 --> 00:05:59,169
device this device is more powerful than

145
00:05:56,380 --> 00:06:01,210
the first<font color="#CCCCCC"> Prospero pie for instance it's</font>

146
00:05:59,170 --> 00:06:03,850
an arm cortex a8 which can be clocked

147
00:06:01,210 --> 00:06:06,250
between 800 megahertz and and 1.2 gig

148
00:06:03,850 --> 00:06:08,200
<font color="#CCCCCC">Earth's almost</font><font color="#E5E5E5"> all data sheets are</font>

149
00:06:06,250 --> 00:06:10,210
public and there's no NDA require which

150
00:06:08,200 --> 00:06:13,110
is a very<font color="#CCCCCC"> good thing the data sheets are</font>

151
00:06:10,210 --> 00:06:16,000
<font color="#CCCCCC">ok far better</font><font color="#E5E5E5"> than any</font><font color="#CCCCCC"> other vendors on</font>

152
00:06:13,110 --> 00:06:18,130
the device has<font color="#E5E5E5"> Trustin and secure boot</font>

153
00:06:16,000 --> 00:06:21,100
secure storage insecure arm support and

154
00:06:18,130 --> 00:06:22,750
this excellent native support for this

155
00:06:21,100 --> 00:06:24,040
system on a chip and this<font color="#E5E5E5"> good stock and</font>

156
00:06:22,750 --> 00:06:26,020
production support guarantee so you

157
00:06:24,040 --> 00:06:28,000
<font color="#E5E5E5">don't want to commit to</font><font color="#CCCCCC"> a design and</font>

158
00:06:26,020 --> 00:06:30,070
then you realize oh now i want<font color="#E5E5E5"> to make</font>

159
00:06:28,000 --> 00:06:31,450
<font color="#CCCCCC">3,000 of</font><font color="#E5E5E5"> these and sorry we don't have</font>

160
00:06:30,070 --> 00:06:33,550
enough system on the chips in the world

161
00:06:31,450 --> 00:06:36,219
for having your device being built so

162
00:06:33,550 --> 00:06:41,050
that would suck so<font color="#E5E5E5"> that was also one of</font>

163
00:06:36,220 --> 00:06:42,640
the requirements so the trust and

164
00:06:41,050 --> 00:06:44,800
<font color="#E5E5E5">support of this device so this system on</font>

165
00:06:42,640 --> 00:06:46,060
a chip is much more complex<font color="#E5E5E5"> than what it</font>

166
00:06:44,800 --> 00:06:46,569
needs to<font color="#E5E5E5"> be for</font><font color="#CCCCCC"> the sake of this</font>

167
00:06:46,060 --> 00:06:48,460
specific

168
00:06:46,569 --> 00:06:49,869
device so what we do in our design<font color="#CCCCCC"> is a</font>

169
00:06:48,460 --> 00:06:51,909
lot<font color="#E5E5E5"> of things</font><font color="#CCCCCC"> that we just don't power</font>

170
00:06:49,869 --> 00:06:53,860
on in order<font color="#CCCCCC"> to keep power consumption</font>

171
00:06:51,909 --> 00:06:55,479
and minimum and only focus<font color="#E5E5E5"> on the</font>

172
00:06:53,860 --> 00:06:57,569
interface that we care about which is

173
00:06:55,479 --> 00:07:01,378
<font color="#E5E5E5">mainly USB and then some other</font>

174
00:06:57,569 --> 00:07:04,179
peripheral connections that we have

175
00:07:01,379 --> 00:07:06,969
trust and support for this system on a

176
00:07:04,179 --> 00:07:08,739
chip is has a fairly good implementation

177
00:07:06,969 --> 00:07:10,449
we tested a<font color="#CCCCCC"> lot of trust and</font>

178
00:07:08,740 --> 00:07:13,330
implementation and we found<font color="#E5E5E5"> this one to</font>

179
00:07:10,449 --> 00:07:15,849
be to<font color="#CCCCCC"> be fully adequate for for</font><font color="#E5E5E5"> being</font>

180
00:07:13,330 --> 00:07:18,339
used so what trusted is if you don't

181
00:07:15,849 --> 00:07:20,709
know<font color="#CCCCCC"> about it think about it like kind</font>

182
00:07:18,339 --> 00:07:23,379
<font color="#E5E5E5">of like virtualization ah but it's a</font>

183
00:07:20,709 --> 00:07:26,289
<font color="#E5E5E5">much simpler scheme which only allows</font>

184
00:07:23,379 --> 00:07:28,449
you to have two domains running in your

185
00:07:26,289 --> 00:07:32,199
execution<font color="#E5E5E5"> context and these domains are</font>

186
00:07:28,449 --> 00:07:33,939
handled at a very low level by<font color="#E5E5E5"> the CPU</font>

187
00:07:32,199 --> 00:07:36,389
and<font color="#E5E5E5"> the hardware peripherals and what</font>

188
00:07:33,939 --> 00:07:38,889
this allows you to do<font color="#E5E5E5"> is to</font><font color="#CCCCCC"> have a</font>

189
00:07:36,389 --> 00:07:40,779
non-secure domain where you can add your

190
00:07:38,889 --> 00:07:42,339
user mode applications and your your

191
00:07:40,779 --> 00:07:44,469
kernel and then you can<font color="#E5E5E5"> have a</font>

192
00:07:42,339 --> 00:07:46,330
<font color="#E5E5E5">completely separate context which is</font>

193
00:07:44,469 --> 00:07:48,189
called<font color="#E5E5E5"> the secure domain when you have a</font>

194
00:07:46,330 --> 00:07:51,639
separate user mode and a separate

195
00:07:48,189 --> 00:07:54,399
privileged mode but the idea of<font color="#E5E5E5"> Trustin</font>

196
00:07:51,639 --> 00:07:57,639
is that you can also use<font color="#CCCCCC"> it</font><font color="#E5E5E5"> as a</font>

197
00:07:54,399 --> 00:08:00,519
hardware firewall so you can<font color="#CCCCCC"> decide to</font>

198
00:07:57,639 --> 00:08:03,610
assign a specific<font color="#E5E5E5"> Hardware sub component</font>

199
00:08:00,519 --> 00:08:06,099
of the system on a chip only to the

200
00:08:03,610 --> 00:08:08,349
secure mode and this allows you to

201
00:08:06,099 --> 00:08:11,619
segregate let's say the<font color="#E5E5E5"> microsd</font>

202
00:08:08,349 --> 00:08:14,829
interface or the USB interface only to a

203
00:08:11,619 --> 00:08:17,589
trust<font color="#CCCCCC"> the driver</font><font color="#E5E5E5"> that you put in secure</font>

204
00:08:14,829 --> 00:08:19,649
mode and you can define<font color="#E5E5E5"> a very clear set</font>

205
00:08:17,589 --> 00:08:23,289
of<font color="#E5E5E5"> api is very minimal and very</font>

206
00:08:19,649 --> 00:08:25,689
restricted to the task for exchanging

207
00:08:23,289 --> 00:08:27,490
data between the non-secure and the

208
00:08:25,689 --> 00:08:29,589
secure<font color="#CCCCCC"> world so this is</font><font color="#E5E5E5"> the mana cheap</font>

209
00:08:27,490 --> 00:08:32,469
as the capability of assigning each

210
00:08:29,589 --> 00:08:35,529
hardware<font color="#E5E5E5"> peripheral that's embedded in</font>

211
00:08:32,469 --> 00:08:38,680
the system on a chip to only<font color="#E5E5E5"> one of the</font>

212
00:08:35,529 --> 00:08:41,740
<font color="#CCCCCC">two domains um so for instance</font><font color="#E5E5E5"> you can</font>

213
00:08:38,679 --> 00:08:44,439
have the LED which is which is<font color="#E5E5E5"> present</font>

214
00:08:41,740 --> 00:08:46,630
on the device only confined to the

215
00:08:44,439 --> 00:08:49,750
secure domain which means that you<font color="#E5E5E5"> can</font>

216
00:08:46,630 --> 00:08:52,810
<font color="#E5E5E5">do things like if the LED turns on you</font>

217
00:08:49,750 --> 00:08:55,300
know by definition that the secure code

218
00:08:52,810 --> 00:08:56,739
is running at<font color="#CCCCCC"> that very moment and</font><font color="#E5E5E5"> then</font>

219
00:08:55,300 --> 00:08:59,170
maybe you<font color="#CCCCCC"> can ask for a password or</font>

220
00:08:56,740 --> 00:09:00,600
<font color="#CCCCCC">something like that making sure that the</font>

221
00:08:59,170 --> 00:09:02,670
non-secure domain

222
00:09:00,600 --> 00:09:05,509
not fishing for<font color="#E5E5E5"> that password and other</font>

223
00:09:02,670 --> 00:09:08,130
time it was<font color="#E5E5E5"> a lack of of a good</font>

224
00:09:05,509 --> 00:09:09,870
playground environment and research and

225
00:09:08,130 --> 00:09:13,009
training environment for for Trustin and

226
00:09:09,870 --> 00:09:15,690
this was also<font color="#E5E5E5"> one of the drivers for</font>

227
00:09:13,009 --> 00:09:18,720
developing this board with<font color="#CCCCCC"> this specific</font>

228
00:09:15,690 --> 00:09:20,370
system-on-a-chip the project is

229
00:09:18,720 --> 00:09:22,380
completely<font color="#CCCCCC"> open source is that open</font>

230
00:09:20,370 --> 00:09:24,449
source does it get the full software is

231
00:09:22,380 --> 00:09:26,519
open source and also the hard word the

232
00:09:24,449 --> 00:09:28,349
schematics the PCB layout everything is

233
00:09:26,519 --> 00:09:30,449
open source and has been done also with

234
00:09:28,350 --> 00:09:32,279
an open source tool so anyone can<font color="#E5E5E5"> open</font>

235
00:09:30,449 --> 00:09:33,779
the design files can easily modify the

236
00:09:32,279 --> 00:09:36,689
design files without requiring any

237
00:09:33,779 --> 00:09:39,509
license and and it can also send the

238
00:09:36,690 --> 00:09:42,089
<font color="#CCCCCC">output of the fabrication output of the</font>

239
00:09:39,509 --> 00:09:45,000
tool to a factory and<font color="#E5E5E5"> if you make a</font>

240
00:09:42,089 --> 00:09:48,690
hundred of these it gets economical to

241
00:09:45,000 --> 00:09:51,209
do so yourself as well um it is very

242
00:09:48,690 --> 00:09:52,829
tiny we have a micro<font color="#CCCCCC"> SD card slot where</font>

243
00:09:51,209 --> 00:09:55,138
all the codes come from there's no

244
00:09:52,829 --> 00:09:56,870
persistence on the device except for a

245
00:09:55,139 --> 00:10:00,300
few fuses which<font color="#E5E5E5"> I'm going to talk about</font>

246
00:09:56,870 --> 00:10:03,899
we<font color="#CCCCCC"> have a five-pin breakout adder where</font>

247
00:10:00,300 --> 00:10:05,819
you can attach<font color="#CCCCCC"> sbir i square c gpio and</font>

248
00:10:03,899 --> 00:10:07,680
serial port and so on and we have this

249
00:10:05,819 --> 00:10:10,620
led which can also be used for secure

250
00:10:07,680 --> 00:10:12,839
mode detection we're now supported we

251
00:10:10,620 --> 00:10:15,899
have official support for debian ubuntu

252
00:10:12,839 --> 00:10:17,970
arch linux and also if you want<font color="#E5E5E5"> to play</font>

253
00:10:15,899 --> 00:10:20,430
<font color="#CCCCCC">with Trustin there's a very nice project</font>

254
00:10:17,970 --> 00:10:23,880
called<font color="#CCCCCC"> GNote OS which implements a</font>

255
00:10:20,430 --> 00:10:25,620
domain separation are on the USB armory

256
00:10:23,880 --> 00:10:27,750
and allows you to<font color="#E5E5E5"> have a microkernel</font>

257
00:10:25,620 --> 00:10:30,360
into the secure domain handling drivers

258
00:10:27,750 --> 00:10:33,389
such as the micro SD card<font color="#CCCCCC"> and then you</font>

259
00:10:30,360 --> 00:10:35,639
can put a<font color="#E5E5E5"> Linux system in the non-secure</font>

260
00:10:33,389 --> 00:10:37,589
domain so kind of virtualizing it but

261
00:10:35,639 --> 00:10:40,290
not<font color="#E5E5E5"> really with this domain separation</font>

262
00:10:37,589 --> 00:10:43,050
that<font color="#E5E5E5"> the image and with this device we</font>

263
00:10:40,290 --> 00:10:44,490
can emulate arbitrary USB devices we can

264
00:10:43,050 --> 00:10:46,560
emulate on ethernet device and mass

265
00:10:44,490 --> 00:10:48,329
storage device a keyboard or whatever

266
00:10:46,560 --> 00:10:51,239
you like and<font color="#CCCCCC"> I'm going</font><font color="#E5E5E5"> to talk about</font>

267
00:10:48,329 --> 00:10:54,870
this so of<font color="#CCCCCC"> course the primary use of</font>

268
00:10:51,240 --> 00:10:57,449
this device is device mode as just

269
00:10:54,870 --> 00:11:00,029
<font color="#CCCCCC">mention but it turns out that we</font><font color="#E5E5E5"> can</font>

270
00:10:57,449 --> 00:11:02,639
also use<font color="#CCCCCC"> it in host mode so we can</font>

271
00:11:00,029 --> 00:11:04,649
invert the role of the device because

272
00:11:02,639 --> 00:11:07,949
the USB controller allows us to have<font color="#CCCCCC"> a</font>

273
00:11:04,649 --> 00:11:10,500
great freedom in configuring it and so

274
00:11:07,949 --> 00:11:11,969
we can have so this<font color="#E5E5E5"> is an</font><font color="#CCCCCC"> example of the</font>

275
00:11:10,500 --> 00:11:13,920
device running in host mode this was

276
00:11:11,970 --> 00:11:17,490
<font color="#CCCCCC">actually one of our first test</font>

277
00:11:13,920 --> 00:11:20,729
so we just change with a breadboard very

278
00:11:17,490 --> 00:11:23,430
crudely we change the gender of the plug

279
00:11:20,730 --> 00:11:25,980
and then we plug we attach a USB hub

280
00:11:23,430 --> 00:11:28,769
with a mouse a keyboard a USB display

281
00:11:25,980 --> 00:11:31,290
and also a Wi-Fi chip and it will just

282
00:11:28,769 --> 00:11:33,720
add the device running<font color="#CCCCCC"> standalone you</font>

283
00:11:31,290 --> 00:11:36,569
know with<font color="#E5E5E5"> X</font><font color="#CCCCCC"> Windows and just using it so</font>

284
00:11:33,720 --> 00:11:38,670
we made this in a much prettier form

285
00:11:36,570 --> 00:11:41,100
factor so now we also have this host

286
00:11:38,670 --> 00:11:44,760
adapter which merely changes the gender

287
00:11:41,100 --> 00:11:47,010
of the of the USB<font color="#E5E5E5"> ports you feed power</font>

288
00:11:44,760 --> 00:11:48,750
back in and then you can attach so here

289
00:11:47,010 --> 00:11:50,519
we<font color="#CCCCCC"> have a Wi-Fi dongle but you can</font>

290
00:11:48,750 --> 00:11:54,269
attach whatever you want so it can also

291
00:11:50,519 --> 00:11:55,949
<font color="#E5E5E5">work as a standalone device and we</font>

292
00:11:54,269 --> 00:11:58,019
realized this<font color="#E5E5E5"> only after building the</font>

293
00:11:55,949 --> 00:11:59,729
device but it was a it was a nice it was

294
00:11:58,019 --> 00:12:02,730
a nice thing it was a nice feature

295
00:11:59,730 --> 00:12:07,199
because the USB controller really allows

296
00:12:02,730 --> 00:12:09,180
you to do<font color="#E5E5E5"> whatever you like so uh some</font>

297
00:12:07,199 --> 00:12:11,729
pictures for the<font color="#E5E5E5"> development process so</font>

298
00:12:09,180 --> 00:12:15,899
this was a development board that we

299
00:12:11,730 --> 00:12:18,360
made<font color="#E5E5E5"> for accessing the BGA chip so bgaa</font>

300
00:12:15,899 --> 00:12:20,820
means that you have<font color="#E5E5E5"> a ball grid array so</font>

301
00:12:18,360 --> 00:12:23,760
you have a this matrix of little walls

302
00:12:20,820 --> 00:12:25,649
that it's very<font color="#E5E5E5"> difficult to solder and</font>

303
00:12:23,760 --> 00:12:27,660
<font color="#E5E5E5">desoler on your own you</font><font color="#CCCCCC"> can do it but</font>

304
00:12:25,649 --> 00:12:30,060
it's a messy process and prone to errors

305
00:12:27,660 --> 00:12:32,010
and we thought that for prototyping the

306
00:12:30,060 --> 00:12:35,040
device we could<font color="#E5E5E5"> just get this very</font>

307
00:12:32,010 --> 00:12:37,170
expensive socket that allows us<font color="#CCCCCC"> to have</font>

308
00:12:35,040 --> 00:12:39,449
a solderless connection with the BGA<font color="#CCCCCC"> and</font>

309
00:12:37,170 --> 00:12:42,060
then we would break out each ball and

310
00:12:39,449 --> 00:12:45,260
and and<font color="#E5E5E5"> and develop on this thing</font><font color="#CCCCCC"> but</font>

311
00:12:42,060 --> 00:12:48,089
the problem was that the power regulator

312
00:12:45,260 --> 00:12:50,220
tolerance requirements are so tight that

313
00:12:48,089 --> 00:12:54,149
<font color="#E5E5E5">you really need</font><font color="#CCCCCC"> to put all the power</font>

314
00:12:50,220 --> 00:12:56,130
components on a proper PCB and with the

315
00:12:54,149 --> 00:12:58,199
proper distances you cannot solder this

316
00:12:56,130 --> 00:13:00,449
on your own you're on and if you and

317
00:12:58,199 --> 00:13:02,790
<font color="#E5E5E5">also the system on a chip needs to be on</font>

318
00:13:00,449 --> 00:13:05,550
a PCB as well so if you put<font color="#E5E5E5"> the power on</font>

319
00:13:02,790 --> 00:13:07,709
a PCB<font color="#E5E5E5"> and sock on a PCB you might also</font>

320
00:13:05,550 --> 00:13:09,209
as well put a USB plug the<font color="#CCCCCC"> micro SD and</font>

321
00:13:07,709 --> 00:13:10,888
then you have the final board so at the

322
00:13:09,209 --> 00:13:12,930
end this effort was kind<font color="#E5E5E5"> of useless and</font>

323
00:13:10,889 --> 00:13:15,120
I was like being like Darth Vader

324
00:13:12,930 --> 00:13:16,829
telling to my colleagues you<font color="#E5E5E5"> fail me for</font>

325
00:13:15,120 --> 00:13:20,130
the last time<font color="#CCCCCC"> because they tried for</font><font color="#E5E5E5"> ten</font>

326
00:13:16,829 --> 00:13:21,989
times to build a<font color="#E5E5E5"> power up that would</font>

327
00:13:20,130 --> 00:13:24,360
power the device externally but at the

328
00:13:21,990 --> 00:13:26,190
end we said<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> let's just build this</font>

329
00:13:24,360 --> 00:13:27,850
thing and let's<font color="#CCCCCC"> hope</font><font color="#E5E5E5"> that reward so this</font>

330
00:13:26,190 --> 00:13:29,560
this was kind of like a super

331
00:13:27,850 --> 00:13:31,089
stardestroyer a big thing which costs a

332
00:13:29,560 --> 00:13:36,008
log but at the end it<font color="#CCCCCC"> just crashes down</font>

333
00:13:31,089 --> 00:13:38,949
into useless but it's pretty so this<font color="#CCCCCC"> is</font>

334
00:13:36,009 --> 00:13:40,420
<font color="#E5E5E5">the layout of</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> board this</font><font color="#CCCCCC"> is a key</font>

335
00:13:38,949 --> 00:13:42,069
card<font color="#E5E5E5"> or tie cut depending how you</font>

336
00:13:40,420 --> 00:13:46,060
pronounce<font color="#E5E5E5"> it</font><font color="#CCCCCC"> the open-source</font><font color="#E5E5E5"> software</font>

337
00:13:42,069 --> 00:13:49,569
which we use for the layout the<font color="#E5E5E5"> biggest</font>

338
00:13:46,060 --> 00:13:51,609
<font color="#CCCCCC">problem here was to route the RAM memory</font>

339
00:13:49,569 --> 00:13:55,209
to the<font color="#E5E5E5"> sock because when you're out</font>

340
00:13:51,610 --> 00:13:57,759
memory to a cpu all of these traces they

341
00:13:55,209 --> 00:13:59,430
need to be exactly of the same length to

342
00:13:57,759 --> 00:14:02,440
the decimal point of the millimeter and

343
00:13:59,430 --> 00:14:03,969
this<font color="#E5E5E5"> open-source tool doesn't really</font>

344
00:14:02,440 --> 00:14:06,630
help you in doing<font color="#E5E5E5"> that unlike</font>

345
00:14:03,970 --> 00:14:10,660
professional tools so all of<font color="#E5E5E5"> these were</font>

346
00:14:06,630 --> 00:14:13,449
length match with much<font color="#CCCCCC"> loved by hand</font>

347
00:14:10,660 --> 00:14:15,100
which was a very<font color="#E5E5E5"> painful</font><font color="#CCCCCC"> process but</font>

348
00:14:13,449 --> 00:14:18,758
this is the price<font color="#E5E5E5"> you pay for having</font>

349
00:14:15,100 --> 00:14:21,009
everything open source on the other<font color="#E5E5E5"> hand</font>

350
00:14:18,759 --> 00:14:22,600
the 3d graphics capability of key card

351
00:14:21,009 --> 00:14:24,100
are excellent when they are useless but

352
00:14:22,600 --> 00:14:26,230
you know if<font color="#E5E5E5"> you want to see your board</font>

353
00:14:24,100 --> 00:14:29,769
in 3d before having it produced you can

354
00:14:26,230 --> 00:14:31,690
you can do so so that was cool<font color="#E5E5E5"> so this</font>

355
00:14:29,769 --> 00:14:34,029
<font color="#CCCCCC">is</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> Alpha boy that we made the</font><font color="#E5E5E5"> very</font>

356
00:14:31,690 --> 00:14:36,040
first<font color="#CCCCCC"> one it is of course bigger than</font>

357
00:14:34,029 --> 00:14:39,399
the final product because we wanted to

358
00:14:36,040 --> 00:14:42,130
<font color="#E5E5E5">have a jtag header easily accessible to</font>

359
00:14:39,399 --> 00:14:44,649
understand if the board would not boot

360
00:14:42,130 --> 00:14:48,130
up on what the problem was and we made

361
00:14:44,649 --> 00:14:51,040
<font color="#E5E5E5">it so that we could also cut the excess</font>

362
00:14:48,130 --> 00:14:52,630
PCB compared to the original form factor

363
00:14:51,040 --> 00:14:56,110
so that then we<font color="#E5E5E5"> could also test the</font>

364
00:14:52,630 --> 00:14:57,519
original form factor even if it wouldn't

365
00:14:56,110 --> 00:14:59,560
make much of a difference but<font color="#E5E5E5"> maybe for</font>

366
00:14:57,519 --> 00:15:01,810
<font color="#CCCCCC">heat dissipation it could mean a</font>

367
00:14:59,560 --> 00:15:04,869
difference so it was designed<font color="#E5E5E5"> in that</font>

368
00:15:01,810 --> 00:15:07,119
way so this is<font color="#CCCCCC"> an almond tech jtag</font>

369
00:15:04,870 --> 00:15:09,339
controller attached to the device likely

370
00:15:07,120 --> 00:15:10,990
the device booted for at the very<font color="#E5E5E5"> first</font>

371
00:15:09,339 --> 00:15:13,120
version he booted up so this actually

372
00:15:10,990 --> 00:15:15,370
wasn't necessary but it was a precaution

373
00:15:13,120 --> 00:15:17,019
that<font color="#E5E5E5"> we needed to take and I think it's</font>

374
00:15:15,370 --> 00:15:18,970
pretty<font color="#E5E5E5"> amazing that we'd completely open</font>

375
00:15:17,019 --> 00:15:21,250
source technology we can<font color="#E5E5E5"> build such a</font>

376
00:15:18,970 --> 00:15:23,680
<font color="#CCCCCC">standalone USB connected computer which</font>

377
00:15:21,250 --> 00:15:25,779
is<font color="#E5E5E5"> more powerful than a pension</font><font color="#CCCCCC"> too but</font>

378
00:15:23,680 --> 00:15:29,138
dark later prefers this because it's

379
00:15:25,779 --> 00:15:32,199
black<font color="#E5E5E5"> so for this reason we made it</font>

380
00:15:29,139 --> 00:15:33,790
black and not and not green so these

381
00:15:32,199 --> 00:15:36,760
were the different provisions this was

382
00:15:33,790 --> 00:15:39,089
the<font color="#CCCCCC"> Alpha board then we made a beta</font>

383
00:15:36,760 --> 00:15:41,470
actually we made more than<font color="#E5E5E5"> one beta so</font>

384
00:15:39,089 --> 00:15:43,780
what we decided to do too

385
00:15:41,470 --> 00:15:47,920
optimize the design and and and cut the

386
00:15:43,780 --> 00:15:51,069
cost of building the device we when you

387
00:15:47,920 --> 00:15:54,939
build<font color="#E5E5E5"> PCBs you generally</font><font color="#CCCCCC"> have a sheet</font>

388
00:15:51,070 --> 00:15:56,950
where you can fit in one tooling in one

389
00:15:54,940 --> 00:15:59,560
manufacturing process more than one

390
00:15:56,950 --> 00:16:02,050
revision of<font color="#CCCCCC"> the board and we could do I</font>

391
00:15:59,560 --> 00:16:04,510
think<font color="#CCCCCC"> sex six or eight of them so with</font>

392
00:16:02,050 --> 00:16:07,449
<font color="#CCCCCC">just one production we</font><font color="#E5E5E5"> tested different</font>

393
00:16:04,510 --> 00:16:11,470
beta revisions where we try to power up

394
00:16:07,450 --> 00:16:13,870
the<font color="#CCCCCC"> RAM in different ways by converting</font>

395
00:16:11,470 --> 00:16:15,880
the<font color="#CCCCCC"> five volts directly with the voltage</font>

396
00:16:13,870 --> 00:16:17,620
required for the rum or we<font color="#CCCCCC"> use in by</font>

397
00:16:15,880 --> 00:16:19,180
using a buck converter by using<font color="#E5E5E5"> a</font>

398
00:16:17,620 --> 00:16:21,760
different power regulator in order to

399
00:16:19,180 --> 00:16:24,069
try and cut down<font color="#E5E5E5"> the cost eventually we</font>

400
00:16:21,760 --> 00:16:27,069
found what was the best compromise

401
00:16:24,070 --> 00:16:30,640
between price and end performance and

402
00:16:27,070 --> 00:16:33,340
then the final mark one design was

403
00:16:30,640 --> 00:16:34,569
selected from one of these we also try

404
00:16:33,340 --> 00:16:36,730
<font color="#E5E5E5">to change the number of layers</font>

405
00:16:34,570 --> 00:16:39,010
originally the board was eight layers

406
00:16:36,730 --> 00:16:42,100
and we were able to<font color="#E5E5E5"> drop to six layers</font>

407
00:16:39,010 --> 00:16:44,020
by you know just keeping certain

408
00:16:42,100 --> 00:16:45,760
recommendations that they give to you

409
00:16:44,020 --> 00:16:49,150
but<font color="#E5E5E5"> sometimes they just work you gotta</font>

410
00:16:45,760 --> 00:16:51,310
try<font color="#E5E5E5"> it so we when you make a device</font>

411
00:16:49,150 --> 00:16:53,079
which is this small<font color="#CCCCCC"> you cannot</font><font color="#E5E5E5"> be</font>

412
00:16:51,310 --> 00:16:54,760
conservative in the terms of the

413
00:16:53,080 --> 00:16:58,960
recommendation and guard lies that the

414
00:16:54,760 --> 00:17:01,090
<font color="#E5E5E5">part vendors tell to you so we did a lot</font>

415
00:16:58,960 --> 00:17:04,750
<font color="#E5E5E5">of things that were not by the book but</font>

416
00:17:01,090 --> 00:17:06,190
in the end<font color="#E5E5E5"> they work just fine so let me</font>

417
00:17:04,750 --> 00:17:08,200
talk<font color="#E5E5E5"> about secure boot because it's an</font>

418
00:17:06,190 --> 00:17:10,090
important feature of this board and and

419
00:17:08,200 --> 00:17:13,030
when testing so we do a lot<font color="#E5E5E5"> of hardware</font>

420
00:17:10,089 --> 00:17:15,220
testing and secure boot is often an

421
00:17:13,030 --> 00:17:17,410
overlooked feature which eventually

422
00:17:15,220 --> 00:17:19,210
allows jailbreaking on their own of a

423
00:17:17,410 --> 00:17:20,950
device because it's other not correctly

424
00:17:19,210 --> 00:17:22,810
implemented or because it's not

425
00:17:20,950 --> 00:17:25,180
implemented at all because its

426
00:17:22,810 --> 00:17:26,710
difficulty so this specific

427
00:17:25,180 --> 00:17:28,270
<font color="#CCCCCC">system-on-a-chip supports something</font>

428
00:17:26,710 --> 00:17:31,210
<font color="#E5E5E5">called high assurance boot which is the</font>

429
00:17:28,270 --> 00:17:34,750
freescale and XP terminology for secure

430
00:17:31,210 --> 00:17:36,430
boot and the<font color="#CCCCCC"> idea is that you fuse your</font>

431
00:17:34,750 --> 00:17:38,440
own keys so we're<font color="#E5E5E5"> not talking</font><font color="#CCCCCC"> about</font>

432
00:17:36,430 --> 00:17:40,300
secure boot such as the one on a<font color="#CCCCCC"> PC</font>

433
00:17:38,440 --> 00:17:42,910
where you might<font color="#E5E5E5"> have an OEM key phone</font>

434
00:17:40,300 --> 00:17:45,850
from Microsoft here the only content is

435
00:17:42,910 --> 00:17:50,470
content that you flash on<font color="#CCCCCC"> the device so</font>

436
00:17:45,850 --> 00:17:51,550
you fuse for public keys into<font color="#E5E5E5"> the system</font>

437
00:17:50,470 --> 00:17:54,559
on a chip and this is a one-time

438
00:17:51,550 --> 00:17:55,970
permanent irreversible operation and

439
00:17:54,559 --> 00:17:57,710
once that<font color="#CCCCCC"> is done in secure boot is</font>

440
00:17:55,970 --> 00:18:00,799
activated the system ownership will

441
00:17:57,710 --> 00:18:04,549
refuse to<font color="#E5E5E5"> boot any boot loader which is</font>

442
00:18:00,799 --> 00:18:07,639
not sign with one of those keys and you

443
00:18:04,549 --> 00:18:10,610
can revoke up to three keys out<font color="#CCCCCC"> of four</font>

444
00:18:07,639 --> 00:18:12,498
if you want to this also makes for some

445
00:18:10,610 --> 00:18:14,629
interesting scenarios where you can have

446
00:18:12,499 --> 00:18:16,999
free valid case the fourth one is junk

447
00:18:14,629 --> 00:18:18,889
and then if you revoke all of the free

448
00:18:16,999 --> 00:18:20,330
keys the device it becomes a brick

449
00:18:18,889 --> 00:18:22,519
because it can<font color="#E5E5E5"> never put any code</font>

450
00:18:20,330 --> 00:18:24,769
because the four feet key is random so

451
00:18:22,519 --> 00:18:27,350
you're<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to do</font><font color="#E5E5E5"> things like</font><font color="#CCCCCC"> that and</font>

452
00:18:24,769 --> 00:18:30,649
this unlike a modern PC this feature

453
00:18:27,350 --> 00:18:32,600
cannot be reset so once you do it it's

454
00:18:30,649 --> 00:18:35,389
done instant in a pc with a password you

455
00:18:32,600 --> 00:18:36,949
can go<font color="#CCCCCC"> into the bios and and remove the</font>

456
00:18:35,389 --> 00:18:41,240
secure boot functionality so this is<font color="#CCCCCC"> a</font>

457
00:18:36,950 --> 00:18:43,820
feature of this device not a bug um so

458
00:18:41,240 --> 00:18:45,860
you have certain parameters in the

459
00:18:43,820 --> 00:18:47,570
<font color="#E5E5E5">register of the system on a chip which</font>

460
00:18:45,860 --> 00:18:49,699
over<font color="#CCCCCC"> i square C so these</font><font color="#E5E5E5"> are the</font>

461
00:18:47,570 --> 00:18:52,639
commands<font color="#CCCCCC"> that you can invoke from the</font>

462
00:18:49,700 --> 00:18:54,619
bootloader you confuse the hashes of the

463
00:18:52,639 --> 00:18:58,729
public keys that<font color="#CCCCCC"> you want</font><font color="#E5E5E5"> to and then</font>

464
00:18:54,619 --> 00:19:03,470
you can<font color="#E5E5E5"> enable and lock them um in order</font>

465
00:18:58,730 --> 00:19:06,289
then to sign an image for a secure boot

466
00:19:03,470 --> 00:19:08,149
for<font color="#E5E5E5"> this I assurance boot um there's a</font>

467
00:19:06,289 --> 00:19:09,710
tool from freescale now and XP called

468
00:19:08,149 --> 00:19:11,508
the code signing tool which however at

469
00:19:09,710 --> 00:19:13,369
several issues so first of all it's

470
00:19:11,509 --> 00:19:15,710
close its source and under<font color="#CCCCCC"> and user</font>

471
00:19:13,369 --> 00:19:17,840
<font color="#E5E5E5">license agreement the</font><font color="#CCCCCC"> end-user license</font>

472
00:19:15,710 --> 00:19:21,049
agreement is not a bad one because it

473
00:19:17,840 --> 00:19:22,610
actually would allow resellers such as

474
00:19:21,049 --> 00:19:24,740
as or people that integrate the system

475
00:19:22,610 --> 00:19:27,080
on a chip to also distribute the tool to

476
00:19:24,740 --> 00:19:29,419
its users so it's not I<font color="#E5E5E5"> mean</font><font color="#CCCCCC"> it's</font>

477
00:19:27,080 --> 00:19:32,119
restrictive but it also allows a lot of

478
00:19:29,419 --> 00:19:34,480
freedom but saying that the tool is ugly

479
00:19:32,119 --> 00:19:38,209
is a severe understatement the tool is

480
00:19:34,480 --> 00:19:40,009
fairly horrible and also on the latest

481
00:19:38,210 --> 00:19:42,019
<font color="#E5E5E5">version of</font><font color="#CCCCCC"> the tool which is</font><font color="#E5E5E5"> the only</font>

482
00:19:40,009 --> 00:19:43,879
one that now can be downloaded<font color="#CCCCCC"> brace</font>

483
00:19:42,019 --> 00:19:46,039
compatibility with the specific<font color="#CCCCCC"> system</font>

484
00:19:43,879 --> 00:19:47,779
<font color="#E5E5E5">on a chip due to a trivial bug which</font><font color="#CCCCCC"> yet</font>

485
00:19:46,039 --> 00:19:49,610
that we identified but after<font color="#E5E5E5"> more than</font>

486
00:19:47,779 --> 00:19:52,850
eight months and several inquiries at

487
00:19:49,610 --> 00:19:55,008
all support levels<font color="#E5E5E5"> uh they didn't fix</font>

488
00:19:52,850 --> 00:19:57,590
<font color="#E5E5E5">the issue and they don't allow download</font>

489
00:19:55,009 --> 00:19:59,749
of<font color="#CCCCCC"> the previous version</font><font color="#E5E5E5"> which you know</font>

490
00:19:57,590 --> 00:20:01,220
kind of sucks so this<font color="#E5E5E5"> is a problem when</font>

491
00:19:59,749 --> 00:20:03,110
you're a very very<font color="#CCCCCC"> small</font><font color="#E5E5E5"> plane in the</font>

492
00:20:01,220 --> 00:20:05,509
hardware market is not that<font color="#E5E5E5"> you don't</font>

493
00:20:03,110 --> 00:20:08,060
get support from the vendor is that the

494
00:20:05,509 --> 00:20:09,710
support is<font color="#E5E5E5"> kind of offensive I'm</font>

495
00:20:08,060 --> 00:20:11,929
they tell<font color="#CCCCCC"> you that are</font><font color="#E5E5E5"> going to look</font>

496
00:20:09,710 --> 00:20:13,970
into<font color="#E5E5E5"> something</font><font color="#CCCCCC"> and then it's really a</font>

497
00:20:11,930 --> 00:20:16,070
process that goes nowhere and<font color="#CCCCCC"> you waste</font>

498
00:20:13,970 --> 00:20:17,660
a lot of time so we decide to just

499
00:20:16,070 --> 00:20:19,520
reimplement the tool as open source

500
00:20:17,660 --> 00:20:22,970
software which was the right thing to do

501
00:20:19,520 --> 00:20:26,120
so now the AMX<font color="#E5E5E5"> 50 free the secure boot</font>

502
00:20:22,970 --> 00:20:28,550
feature can be completely used and code

503
00:20:26,120 --> 00:20:29,689
can be signed for it with completely

504
00:20:28,550 --> 00:20:32,210
open source tools and this of course

505
00:20:29,690 --> 00:20:34,820
apply to any board that uses this is the

506
00:20:32,210 --> 00:20:37,370
motion<font color="#E5E5E5"> on a check not specifically to</font>

507
00:20:34,820 --> 00:20:41,179
this<font color="#E5E5E5"> one and we have two guides one</font>

508
00:20:37,370 --> 00:20:43,280
where you<font color="#CCCCCC"> can still we still have</font>

509
00:20:41,180 --> 00:20:46,220
instructions for using the<font color="#E5E5E5"> nxp tool ah</font>

510
00:20:43,280 --> 00:20:47,780
and we have the same guide converted

511
00:20:46,220 --> 00:20:49,610
also for the open<font color="#CCCCCC"> source</font><font color="#E5E5E5"> tool so that</font>

512
00:20:47,780 --> 00:20:53,570
you can compare the two<font color="#E5E5E5"> and you can</font>

513
00:20:49,610 --> 00:20:56,449
decide which one to use so this was also

514
00:20:53,570 --> 00:20:59,210
<font color="#E5E5E5">uh this was a considerable effort on our</font>

515
00:20:56,450 --> 00:21:01,880
part and we were very pleased<font color="#E5E5E5"> with the</font>

516
00:20:59,210 --> 00:21:05,390
results because in the end we make it

517
00:21:01,880 --> 00:21:08,690
easy to use this kind<font color="#E5E5E5"> of functionality</font>

518
00:21:05,390 --> 00:21:10,670
and and we often<font color="#E5E5E5"> see in all the hardware</font>

519
00:21:08,690 --> 00:21:14,390
designs that we test for our customers

520
00:21:10,670 --> 00:21:16,310
<font color="#E5E5E5">is that</font><font color="#CCCCCC"> sometime features such as secure</font>

521
00:21:14,390 --> 00:21:19,880
boot are not used at all because the

522
00:21:16,310 --> 00:21:22,210
tools or<font color="#E5E5E5"> the support or the lack of</font>

523
00:21:19,880 --> 00:21:25,010
support given to the vendor to customers

524
00:21:22,210 --> 00:21:27,080
doesn't<font color="#E5E5E5"> really allow you to use these</font>

525
00:21:25,010 --> 00:21:29,540
functionalities with confidence also

526
00:21:27,080 --> 00:21:31,040
because if you make a mistake<font color="#E5E5E5"> or if you</font>

527
00:21:29,540 --> 00:21:33,139
<font color="#E5E5E5">don't have a full control and overview</font>

528
00:21:31,040 --> 00:21:35,090
of the process you risk ending up with a

529
00:21:33,140 --> 00:21:37,130
lot of bricks which of course when you

530
00:21:35,090 --> 00:21:38,899
when you manufacture or mass manufacture

531
00:21:37,130 --> 00:21:41,210
an electronic device is not<font color="#E5E5E5"> something</font>

532
00:21:38,900 --> 00:21:43,450
that you want so there was a<font color="#E5E5E5"> lot of</font>

533
00:21:41,210 --> 00:21:48,280
engineering to make this procedure

534
00:21:43,450 --> 00:21:51,320
reliable and and fairly easy to<font color="#CCCCCC"> use and</font>

535
00:21:48,280 --> 00:21:53,240
also<font color="#CCCCCC"> by open sourcing the tools it also</font>

536
00:21:51,320 --> 00:21:56,210
very clear to anybody that<font color="#E5E5E5"> uses the</font>

537
00:21:53,240 --> 00:21:58,070
tools exactly<font color="#E5E5E5"> what's what goes on in the</font>

538
00:21:56,210 --> 00:22:02,750
process<font color="#E5E5E5"> of signing the images and</font>

539
00:21:58,070 --> 00:22:04,310
<font color="#E5E5E5">infusing the key ashes into into the</font>

540
00:22:02,750 --> 00:22:06,260
system on a chip<font color="#E5E5E5"> and we also make it</font>

541
00:22:04,310 --> 00:22:09,889
<font color="#E5E5E5">easy to create these certificates which</font>

542
00:22:06,260 --> 00:22:12,500
are required<font color="#CCCCCC"> for for this process so and</font>

543
00:22:09,890 --> 00:22:15,740
the idea<font color="#E5E5E5"> with this functionality is that</font>

544
00:22:12,500 --> 00:22:17,720
so the system on a chip verifies the

545
00:22:15,740 --> 00:22:20,810
bootloader so this<font color="#E5E5E5"> is called secure boot</font>

546
00:22:17,720 --> 00:22:21,900
and then to further maintain the chain

547
00:22:20,810 --> 00:22:24,600
<font color="#CCCCCC">of trust</font>

548
00:22:21,900 --> 00:22:27,180
the<font color="#CCCCCC"> bootloader which in our case is you</font>

549
00:22:24,600 --> 00:22:30,600
boot verifies the kernel image and<font color="#CCCCCC"> that</font>

550
00:22:27,180 --> 00:22:35,970
that's<font color="#E5E5E5"> called verified boot so you put</font>

551
00:22:30,600 --> 00:22:38,129
supports embedding<font color="#CCCCCC"> a key into his binary</font>

552
00:22:35,970 --> 00:22:40,530
<font color="#CCCCCC">blog the resulting compiled binary blob</font>

553
00:22:38,130 --> 00:22:43,080
and<font color="#E5E5E5"> this key can be done used to verify</font>

554
00:22:40,530 --> 00:22:45,330
the colonel so the chain of<font color="#E5E5E5"> trust is</font>

555
00:22:43,080 --> 00:22:49,169
maintained we fuse a key into the system

556
00:22:45,330 --> 00:22:50,820
on a chip we embed a key in the image in

557
00:22:49,170 --> 00:22:52,350
the<font color="#E5E5E5"> you boot image the you would image</font>

558
00:22:50,820 --> 00:22:55,830
is<font color="#E5E5E5"> a verified by the system on a chip</font>

559
00:22:52,350 --> 00:22:58,050
and the Linux kernel is verified<font color="#E5E5E5"> by the</font>

560
00:22:55,830 --> 00:23:00,060
bootloader so we fully maintained the

561
00:22:58,050 --> 00:23:03,330
chain<font color="#CCCCCC"> of trust from the very moment that</font>

562
00:23:00,060 --> 00:23:05,580
device powers up until the end<font color="#E5E5E5"> now of</font>

563
00:23:03,330 --> 00:23:07,919
course<font color="#E5E5E5"> in the system on a chip there is</font>

564
00:23:05,580 --> 00:23:10,110
an embedded binary blob which performs

565
00:23:07,920 --> 00:23:12,570
this operation<font color="#E5E5E5"> and one of</font><font color="#CCCCCC"> the issues</font>

566
00:23:10,110 --> 00:23:14,490
that is<font color="#E5E5E5"> always raised is that you cannot</font>

567
00:23:12,570 --> 00:23:16,200
inspect or read this memory blob you

568
00:23:14,490 --> 00:23:18,720
don't know what's the microcode which is

569
00:23:16,200 --> 00:23:21,000
inside the system on a chip on this

570
00:23:18,720 --> 00:23:22,980
specific system on a chip the binary

571
00:23:21,000 --> 00:23:25,410
this binary blob is memory mapped so

572
00:23:22,980 --> 00:23:28,830
unlike other shapes it can be freely

573
00:23:25,410 --> 00:23:30,540
read by memory and there's also one

574
00:23:28,830 --> 00:23:33,090
<font color="#E5E5E5">effort or some people that reverse</font>

575
00:23:30,540 --> 00:23:36,840
engineer to understand if if there's

576
00:23:33,090 --> 00:23:40,080
anything funny going on so of<font color="#CCCCCC"> course it</font>

577
00:23:36,840 --> 00:23:42,000
is not open source i mean III challenge

578
00:23:40,080 --> 00:23:43,919
you to find any system on a chip that

579
00:23:42,000 --> 00:23:46,350
would give you sources for the microcode

580
00:23:43,920 --> 00:23:48,000
but at least we can read it in this case

581
00:23:46,350 --> 00:23:50,219
which was a nice feature it's much

582
00:23:48,000 --> 00:23:53,040
better than just not being<font color="#E5E5E5"> able to</font>

583
00:23:50,220 --> 00:23:55,230
<font color="#E5E5E5">access</font><font color="#CCCCCC"> that code at all so it's a nice</font>

584
00:23:53,040 --> 00:23:57,780
feature of<font color="#E5E5E5"> that so in our documentation</font>

585
00:23:55,230 --> 00:24:00,030
page we do have hashes for this binary

586
00:23:57,780 --> 00:24:01,950
blob so you can also verify that when

587
00:24:00,030 --> 00:24:03,870
you receive your device you you get<font color="#E5E5E5"> the</font>

588
00:24:01,950 --> 00:24:06,090
same revision the same binary blob<font color="#CCCCCC"> in</font>

589
00:24:03,870 --> 00:24:08,010
<font color="#CCCCCC">the system on a chip and if you if you</font>

590
00:24:06,090 --> 00:24:09,629
like reverse engineering it can be it

591
00:24:08,010 --> 00:24:11,640
can be inspected and it's all it's not

592
00:24:09,630 --> 00:24:14,730
long so you can understand what it does

593
00:24:11,640 --> 00:24:18,390
for ensuring that the operation of this

594
00:24:14,730 --> 00:24:22,070
Buddha process so this<font color="#E5E5E5"> is an</font><font color="#CCCCCC"> example of</font>

595
00:24:18,390 --> 00:24:25,460
<font color="#CCCCCC">a successfully sign you good image ah</font>

596
00:24:22,070 --> 00:24:29,280
you got secure boot enable no events a

597
00:24:25,460 --> 00:24:32,070
and this<font color="#CCCCCC"> is an example of a</font><font color="#E5E5E5"> failed</font>

598
00:24:29,280 --> 00:24:35,309
attempt where we have assurance boot

599
00:24:32,070 --> 00:24:38,340
failures now this is done in

600
00:24:35,309 --> 00:24:40,740
a verification mode which means you put

601
00:24:38,340 --> 00:24:43,999
<font color="#E5E5E5">the device in a state where a secure</font>

602
00:24:40,740 --> 00:24:46,350
boot is only it's<font color="#E5E5E5"> not truly enforced ah</font>

603
00:24:43,999 --> 00:24:48,629
because otherwise you wouldn't see any

604
00:24:46,350 --> 00:24:51,090
debugging output when secure boot fails

605
00:24:48,629 --> 00:24:54,029
of course you will not see the you boot

606
00:24:51,090 --> 00:24:56,009
code at all because the system ownership

607
00:24:54,029 --> 00:24:57,450
will refuse to<font color="#CCCCCC"> boot the boot</font><font color="#E5E5E5"> loader so</font>

608
00:24:56,009 --> 00:24:58,710
this<font color="#E5E5E5"> screenshot here is done in</font>

609
00:24:57,450 --> 00:25:00,509
verification mode which is<font color="#E5E5E5"> an</font>

610
00:24:58,710 --> 00:25:02,820
<font color="#E5E5E5">intermediate step which allows you to</font>

611
00:25:00,509 --> 00:25:05,490
verify that you're able<font color="#E5E5E5"> to sign images</font>

612
00:25:02,820 --> 00:25:08,220
that you're you're fusing was correct

613
00:25:05,490 --> 00:25:12,899
and then you can<font color="#E5E5E5"> lock down the device as</font>

614
00:25:08,220 --> 00:25:14,700
a as a last step and<font color="#CCCCCC"> this is verified</font>

615
00:25:12,899 --> 00:25:16,590
boot so verified boot this is comes from

616
00:25:14,700 --> 00:25:18,990
you good from the bootloader we just

617
00:25:16,590 --> 00:25:20,879
verifies the fit image that's the

618
00:25:18,990 --> 00:25:23,399
<font color="#CCCCCC">terminology for the image study boots</font>

619
00:25:20,879 --> 00:25:25,559
which contains<font color="#CCCCCC"> the colonel</font><font color="#E5E5E5"> and the</font>

620
00:25:23,399 --> 00:25:29,279
so-called device tree which<font color="#CCCCCC"> is a</font>

621
00:25:25,559 --> 00:25:31,529
external file which is<font color="#CCCCCC"> pars by the boot</font>

622
00:25:29,279 --> 00:25:33,179
<font color="#E5E5E5">loader and Colonel to configure the</font>

623
00:25:31,529 --> 00:25:37,499
hardware<font color="#CCCCCC"> of the device so if you want</font><font color="#E5E5E5"> to</font>

624
00:25:33,179 --> 00:25:39,480
<font color="#CCCCCC">assign a GPIO to an LED or change</font>

625
00:25:37,499 --> 00:25:43,169
configuration of certain paths that's

626
00:25:39,480 --> 00:25:45,929
what you do on into the device tree so

627
00:25:43,169 --> 00:25:49,559
when we set the device in host mode

628
00:25:45,929 --> 00:25:56,100
that's where that configuration is into

629
00:25:49,559 --> 00:25:59,428
the<font color="#E5E5E5"> device tree file ok so this cover</font>

630
00:25:56,100 --> 00:26:01,439
<font color="#E5E5E5">the hardware of</font><font color="#CCCCCC"> the device as much as we</font>

631
00:25:59,429 --> 00:26:03,779
could and the software which enables you

632
00:26:01,440 --> 00:26:05,190
to use the hardware functionality but

633
00:26:03,779 --> 00:26:07,200
<font color="#E5E5E5">then of course we also needed an</font>

634
00:26:05,190 --> 00:26:08,639
application to show the potential for

635
00:26:07,200 --> 00:26:10,999
this device<font color="#CCCCCC"> the</font><font color="#E5E5E5"> potential use for the</font>

636
00:26:08,639 --> 00:26:12,689
device and and to unleash<font color="#CCCCCC"> the</font>

637
00:26:10,999 --> 00:26:15,029
functionalities and the use case

638
00:26:12,690 --> 00:26:16,379
scenarios I wanted to so for this<font color="#CCCCCC"> reason</font>

639
00:26:15,029 --> 00:26:21,509
we develop an application which is

640
00:26:16,379 --> 00:26:23,639
<font color="#E5E5E5">called</font><font color="#CCCCCC"> interlock all uppercase to as a</font>

641
00:26:21,509 --> 00:26:25,529
reference<font color="#E5E5E5"> to the NSA code names for</font>

642
00:26:23,639 --> 00:26:28,320
internal projects that's why<font color="#E5E5E5"> interlock</font>

643
00:26:25,529 --> 00:26:30,450
is always referred to all uppercase so

644
00:26:28,320 --> 00:26:32,879
interlock is an open source file

645
00:26:30,450 --> 00:26:34,590
encryption front end which is developed

646
00:26:32,879 --> 00:26:36,840
for the USB armory but it's not limited

647
00:26:34,590 --> 00:26:38,668
<font color="#CCCCCC">to being used on the USB armory if you</font>

648
00:26:36,840 --> 00:26:41,610
have a raspberry pi or whatever other

649
00:26:38,669 --> 00:26:43,230
arm board or even on your laptop you can

650
00:26:41,610 --> 00:26:47,250
you can use interlock<font color="#E5E5E5"> freely there is</font>

651
00:26:43,230 --> 00:26:48,990
nothing specific in interlock a no code

652
00:26:47,250 --> 00:26:51,570
which<font color="#CCCCCC"> is specific for</font><font color="#E5E5E5"> the USB are more</font>

653
00:26:48,990 --> 00:26:54,690
um and this project provides a

654
00:26:51,570 --> 00:26:57,000
web-accessible file manager which is

655
00:26:54,690 --> 00:27:00,480
tied to the<font color="#CCCCCC"> linux unified key system</font>

656
00:26:57,000 --> 00:27:03,929
framework for encrypting and decrypting

657
00:27:00,480 --> 00:27:06,300
our partitions and also we implemented

658
00:27:03,929 --> 00:27:09,929
additional encryption features on stored

659
00:27:06,300 --> 00:27:11,428
files we take<font color="#CCCCCC"> advantage of disposable</font>

660
00:27:09,929 --> 00:27:14,370
passwords and you can options of the

661
00:27:11,429 --> 00:27:16,140
<font color="#CCCCCC">linux unified key system to have more</font>

662
00:27:14,370 --> 00:27:18,689
than one password and i'm gonna i'm

663
00:27:16,140 --> 00:27:22,890
<font color="#E5E5E5">going to show you a demo of this of this</font>

664
00:27:18,690 --> 00:27:26,130
application<font color="#CCCCCC"> so first of all here see if</font>

665
00:27:22,890 --> 00:27:39,840
you<font color="#CCCCCC"> see it maybe</font><font color="#E5E5E5"> i can set the font a</font>

666
00:27:26,130 --> 00:27:41,850
little larger text looks looks looks no

667
00:27:39,840 --> 00:27:43,199
okay anyway it's not it's<font color="#E5E5E5"> not an</font>

668
00:27:41,850 --> 00:27:45,480
important<font color="#E5E5E5"> i just want to show you</font><font color="#CCCCCC"> that</font>

669
00:27:43,200 --> 00:27:47,580
here i'm<font color="#E5E5E5"> in windows because i'm</font>

670
00:27:45,480 --> 00:27:49,470
presenting a presentation to you and the

671
00:27:47,580 --> 00:27:52,230
biggest<font color="#CCCCCC"> problem in</font><font color="#E5E5E5"> IT nowadays is</font>

672
00:27:49,470 --> 00:27:54,870
presenting from a linux OS which is why

673
00:27:52,230 --> 00:27:56,490
we use windows for this but if I<font color="#E5E5E5"> feel</font>

674
00:27:54,870 --> 00:27:57,928
uncomfortable<font color="#CCCCCC"> for whatever reason and I</font>

675
00:27:56,490 --> 00:28:01,080
want<font color="#E5E5E5"> to jump into a Linux environment</font>

676
00:27:57,929 --> 00:28:03,750
here I just<font color="#E5E5E5"> SSH</font><font color="#CCCCCC"> into my USB device where</font>

677
00:28:01,080 --> 00:28:05,610
I feel warm and fuzzy that I have<font color="#E5E5E5"> this</font>

678
00:28:03,750 --> 00:28:07,620
real linux environment running and not a

679
00:28:05,610 --> 00:28:09,899
virtualized one so as you can see it's

680
00:28:07,620 --> 00:28:12,780
very spawn civ it's just you<font color="#CCCCCC"> know</font>

681
00:28:09,900 --> 00:28:16,860
connected to my Windows machine it just

682
00:28:12,780 --> 00:28:19,820
<font color="#CCCCCC">acts as a standard Linux box with half a</font>

683
00:28:16,860 --> 00:28:26,490
gig of a gigabyte of RAM available so

684
00:28:19,820 --> 00:28:28,379
simple<font color="#CCCCCC"> so now so this is</font><font color="#E5E5E5"> the interlock</font>

685
00:28:26,490 --> 00:28:32,130
application so i plug the device into my

686
00:28:28,380 --> 00:28:34,440
laptop windows assigns or actually d USB

687
00:28:32,130 --> 00:28:36,570
device assigns an IP address to windows

688
00:28:34,440 --> 00:28:39,480
<font color="#E5E5E5">because if you have a dhcp server</font>

689
00:28:36,570 --> 00:28:41,280
running on the USB device the windows OS

690
00:28:39,480 --> 00:28:43,800
will ask<font color="#E5E5E5"> for an IP address to the device</font>

691
00:28:41,280 --> 00:28:45,570
which also enables some offensive usage

692
00:28:43,800 --> 00:28:47,070
which<font color="#E5E5E5"> i'm going to mention later but the</font>

693
00:28:45,570 --> 00:28:50,909
first thing<font color="#CCCCCC"> that happens is that when i</font>

694
00:28:47,070 --> 00:28:52,860
connect<font color="#CCCCCC"> the interlock server asks for a</font>

695
00:28:50,910 --> 00:28:54,720
client certificate if I<font color="#E5E5E5"> don't have a</font>

696
00:28:52,860 --> 00:28:56,520
valid client certificate in my browser

697
00:28:54,720 --> 00:28:59,150
then I can<font color="#E5E5E5"> never talk</font><font color="#CCCCCC"> to this service</font>

698
00:28:56,520 --> 00:29:02,029
<font color="#E5E5E5">which is also you know a very very nice</font>

699
00:28:59,150 --> 00:29:06,299
<font color="#E5E5E5">feature</font>

700
00:29:02,029 --> 00:29:08,399
when as<font color="#CCCCCC"> soon as I pass this step igan</font>

701
00:29:06,299 --> 00:29:11,908
prompted with the volume<font color="#E5E5E5"> name and a</font>

702
00:29:08,399 --> 00:29:14,010
password now<font color="#CCCCCC"> this password</font><font color="#E5E5E5"> can also be</font>

703
00:29:11,909 --> 00:29:15,929
disposed<font color="#E5E5E5"> off after use so I can have</font>

704
00:29:14,010 --> 00:29:18,390
more than one password associated to my

705
00:29:15,929 --> 00:29:20,010
encrypted volume so if I'm using<font color="#CCCCCC"> this</font>

706
00:29:18,390 --> 00:29:23,970
device on a computer which I don't<font color="#E5E5E5"> fully</font>

707
00:29:20,010 --> 00:29:27,690
<font color="#E5E5E5">trust and I don't</font><font color="#CCCCCC"> want a loss of the</font>

708
00:29:23,970 --> 00:29:29,340
device<font color="#E5E5E5"> to cause compromise of the</font>

709
00:29:27,690 --> 00:29:31,289
encrypted contents because someone might

710
00:29:29,340 --> 00:29:33,059
have sniffed this password I can just

711
00:29:31,289 --> 00:29:34,770
tick that box and as soon as this

712
00:29:33,059 --> 00:29:37,110
password is being used for unlocking the

713
00:29:34,770 --> 00:29:38,520
contents it is wiped so it's<font color="#E5E5E5"> not valid</font>

714
00:29:37,110 --> 00:29:40,830
anymore and of course you can<font color="#E5E5E5"> have more</font>

715
00:29:38,520 --> 00:29:42,330
than one password in<font color="#CCCCCC"> the system so this</font>

716
00:29:40,830 --> 00:29:47,610
<font color="#E5E5E5">is a feature which</font><font color="#CCCCCC"> is provided by the</font>

717
00:29:42,330 --> 00:29:49,830
<font color="#CCCCCC">Linux unified key system so now these</font>

718
00:29:47,610 --> 00:29:51,629
credentials are the credentials which

719
00:29:49,830 --> 00:29:53,189
unlock the encrypted partition we don't

720
00:29:51,630 --> 00:29:55,710
have an external database we don't have

721
00:29:53,190 --> 00:29:57,779
a password file so as soon<font color="#E5E5E5"> as I log in</font>

722
00:29:55,710 --> 00:30:00,980
those credential unlock the encrypted

723
00:29:57,779 --> 00:30:03,929
partition and this is what this

724
00:30:00,980 --> 00:30:06,929
interface that we have is showing to me

725
00:30:03,929 --> 00:30:10,289
so it's a sort of kind of google drive

726
00:30:06,929 --> 00:30:15,419
interface where I can see my files<font color="#E5E5E5"> so</font>

727
00:30:10,289 --> 00:30:18,750
let's<font color="#E5E5E5"> say that</font><font color="#CCCCCC"> I want to upload a file</font>

728
00:30:15,419 --> 00:30:21,029
to it it is as easy as just dragging and

729
00:30:18,750 --> 00:30:23,370
dropping the files here<font color="#CCCCCC"> and the file</font><font color="#E5E5E5"> now</font>

730
00:30:21,029 --> 00:30:25,679
has been<font color="#E5E5E5"> uploaded onto the encrypted</font>

731
00:30:23,370 --> 00:30:30,120
partition every file that you see here

732
00:30:25,679 --> 00:30:32,610
is<font color="#CCCCCC"> uh is encrypted on it stays on the</font>

733
00:30:30,120 --> 00:30:34,979
encrypted partition and once the file is

734
00:30:32,610 --> 00:30:37,408
on the encrypted partition<font color="#E5E5E5"> I can also</font>

735
00:30:34,980 --> 00:30:40,529
decide to encrypt it with either a

736
00:30:37,409 --> 00:30:43,890
symmetric cipher a yes or with openpgp

737
00:30:40,529 --> 00:30:47,429
ah for instance so now I've encrypted

738
00:30:43,890 --> 00:30:49,110
this fight with PGP these operation all

739
00:30:47,429 --> 00:30:51,179
of these operations are running on the

740
00:30:49,110 --> 00:30:53,070
USB armor itself and there are no

741
00:30:51,179 --> 00:30:55,529
external dependencies for doing this so

742
00:30:53,070 --> 00:30:57,899
we don't<font color="#CCCCCC"> pipe to the gpg binary all of</font>

743
00:30:55,529 --> 00:31:00,990
this is used by all of this is done<font color="#E5E5E5"> by</font>

744
00:30:57,899 --> 00:31:04,110
using standard<font color="#CCCCCC"> go libraries this is a go</font>

745
00:31:00,990 --> 00:31:06,149
application which makes it i would say i

746
00:31:04,110 --> 00:31:08,340
would argue more auditable and it's also

747
00:31:06,149 --> 00:31:10,860
nice because we get one single static

748
00:31:08,340 --> 00:31:12,360
binary without any external dependencies

749
00:31:10,860 --> 00:31:15,159
so the environment for running<font color="#CCCCCC"> in</font>

750
00:31:12,360 --> 00:31:19,419
<font color="#CCCCCC">turlock can be</font><font color="#E5E5E5"> very very</font><font color="#CCCCCC"> minimal</font>

751
00:31:15,160 --> 00:31:22,720
I can view files from this interface of

752
00:31:19,420 --> 00:31:24,610
course<font color="#E5E5E5"> I can download a file I can</font><font color="#CCCCCC"> also</font>

753
00:31:22,720 --> 00:31:27,400
download a directory it will<font color="#CCCCCC"> just be</font>

754
00:31:24,610 --> 00:31:29,740
compressed and given<font color="#CCCCCC"> to me or I can</font>

755
00:31:27,400 --> 00:31:31,450
compress the directory I can encrypt the

756
00:31:29,740 --> 00:31:34,270
direct line and<font color="#E5E5E5"> just download it making</font>

757
00:31:31,450 --> 00:31:37,810
sure<font color="#E5E5E5"> that no clear text content get</font>

758
00:31:34,270 --> 00:31:41,170
downloaded to to the host we have a full

759
00:31:37,810 --> 00:31:45,070
log here of what's going on which also

760
00:31:41,170 --> 00:31:49,210
store on<font color="#E5E5E5"> the device we can generate gpg</font>

761
00:31:45,070 --> 00:31:52,889
key we can import a key if we want to

762
00:31:49,210 --> 00:31:57,190
and we also have functionality<font color="#CCCCCC"> 41 times</font>

763
00:31:52,890 --> 00:32:01,120
totp keys so the Google Authenticator

764
00:31:57,190 --> 00:32:02,770
<font color="#CCCCCC">keys that you</font><font color="#E5E5E5"> use so this is</font><font color="#CCCCCC"> the key for</font>

765
00:32:01,120 --> 00:32:04,810
my kid up like the second factor

766
00:32:02,770 --> 00:32:06,370
authentication and you can refresh it

767
00:32:04,810 --> 00:32:14,200
and so on so<font color="#CCCCCC"> you can also have a backup</font>

768
00:32:06,370 --> 00:32:16,989
of those here so on top of these

769
00:32:14,200 --> 00:32:20,500
features<font color="#E5E5E5"> are we also added integration</font>

770
00:32:16,990 --> 00:32:23,800
with signal for messaging so this device

771
00:32:20,500 --> 00:32:27,160
now has an associated number which you

772
00:32:23,800 --> 00:32:29,260
can register by using this function so

773
00:32:27,160 --> 00:32:33,010
you can register a number either via SMS

774
00:32:29,260 --> 00:32:34,600
or voice so have a sim or have a number

775
00:32:33,010 --> 00:32:37,120
<font color="#E5E5E5">it could be my landline or whatever</font>

776
00:32:34,600 --> 00:32:42,969
which I decided to associate to this

777
00:32:37,120 --> 00:32:45,780
device and<font color="#CCCCCC"> now if I want to and if the</font>

778
00:32:42,970 --> 00:32:50,110
network works here because it's a little

779
00:32:45,780 --> 00:32:53,800
going back and forth I can just decide

780
00:32:50,110 --> 00:32:59,490
<font color="#CCCCCC">to text my use vrr</font><font color="#E5E5E5"> me from my phone</font>

781
00:32:53,800 --> 00:32:59,490
<font color="#E5E5E5">using signal let's see if</font><font color="#CCCCCC"> that word</font>

782
00:33:09,670 --> 00:33:16,210
demo gods I should have sacrificed more

783
00:33:12,340 --> 00:33:23,860
goats to the<font color="#E5E5E5"> demo gods let's see if we</font>

784
00:33:16,210 --> 00:33:26,020
have connectivity yes we do<font color="#CCCCCC"> okay so</font><font color="#E5E5E5"> I</font>

785
00:33:23,860 --> 00:33:30,580
have<font color="#E5E5E5"> a contact here this is my contact</font>

786
00:33:26,020 --> 00:33:35,530
and I can<font color="#E5E5E5"> just decide to to open a chat</font>

787
00:33:30,580 --> 00:33:37,419
so I received hello here on my phone I

788
00:33:35,530 --> 00:33:40,360
can<font color="#CCCCCC"> do it</font><font color="#E5E5E5"> again so that you can see</font>

789
00:33:37,420 --> 00:33:43,360
hello and<font color="#CCCCCC"> then I got</font><font color="#E5E5E5"> another</font><font color="#CCCCCC"> one and</font><font color="#E5E5E5"> I</font>

790
00:33:40,360 --> 00:33:46,179
can also<font color="#E5E5E5"> decide to send files directly</font>

791
00:33:43,360 --> 00:33:49,540
from here to my phone so what I can do I

792
00:33:46,180 --> 00:33:53,160
have a file here I copy the file I go

793
00:33:49,540 --> 00:33:58,420
into my chat and I send the attachment

794
00:33:53,160 --> 00:34:05,050
and as you can see I<font color="#E5E5E5"> just really receive</font>

795
00:33:58,420 --> 00:34:07,630
the picture of a lovely cat so you can

796
00:34:05,050 --> 00:34:09,880
also and this of course also works from

797
00:34:07,630 --> 00:34:12,400
one USB armory to the other so what's

798
00:34:09,880 --> 00:34:15,130
the takeaway here the takeaway is that

799
00:34:12,400 --> 00:34:18,000
if<font color="#CCCCCC"> I want to</font><font color="#E5E5E5"> share a file with a trusted</font>

800
00:34:15,130 --> 00:34:21,340
party using the USB armory I could

801
00:34:18,000 --> 00:34:24,070
encrypt the file with gpg download the

802
00:34:21,340 --> 00:34:26,290
file give it to my mail client which

803
00:34:24,070 --> 00:34:28,120
must<font color="#E5E5E5"> have some kind of ugly</font><font color="#CCCCCC"> gbg plugging</font>

804
00:34:26,290 --> 00:34:30,219
and then send an email to my colleague

805
00:34:28,120 --> 00:34:33,040
but with the signal plugging

806
00:34:30,219 --> 00:34:34,959
connectivity what can I do if he's also

807
00:34:33,040 --> 00:34:36,668
has a USB armory which is registered to

808
00:34:34,960 --> 00:34:38,620
signal or maybe wants it to his mobile

809
00:34:36,668 --> 00:34:41,469
phone we don't care I can just share the

810
00:34:38,620 --> 00:34:43,179
<font color="#E5E5E5">fire directly from the domain</font><font color="#CCCCCC"> of the USD</font>

811
00:34:41,469 --> 00:34:45,730
be armory with end-to-end encryption

812
00:34:43,179 --> 00:34:48,340
twin bypassing all of this<font color="#E5E5E5"> I</font><font color="#CCCCCC"> can just</font>

813
00:34:45,730 --> 00:34:51,010
select a file and share it over signal

814
00:34:48,340 --> 00:34:52,600
going from the USB device itself which

815
00:34:51,010 --> 00:34:54,520
we think it's a pretty cool

816
00:34:52,600 --> 00:34:57,130
functionality and of course we can also

817
00:34:54,520 --> 00:35:02,280
receive files that will just be placed

818
00:34:57,130 --> 00:35:06,730
directly into the context the contacts

819
00:35:02,280 --> 00:35:10,660
folder so i can decide to send a picture

820
00:35:06,730 --> 00:35:15,330
back if<font color="#CCCCCC"> i want to so i can</font><font color="#E5E5E5"> just select a</font>

821
00:35:10,660 --> 00:35:15,330
picture and then send it

822
00:35:20,010 --> 00:35:23,430
let's see if it works

823
00:35:25,710 --> 00:35:34,150
no network<font color="#E5E5E5"> is really slow</font><font color="#CCCCCC"> so when the</font>

824
00:35:32,260 --> 00:35:42,520
Wi-Fi goes up and down this causes

825
00:35:34,150 --> 00:35:45,460
<font color="#E5E5E5">problem with windows</font><font color="#CCCCCC"> okay there</font><font color="#E5E5E5"> we go</font>

826
00:35:42,520 --> 00:35:48,579
you see the notification over there we

827
00:35:45,460 --> 00:35:51,520
receive a message another message<font color="#CCCCCC"> and</font>

828
00:35:48,579 --> 00:35:52,990
then here you see that a file up here so

829
00:35:51,520 --> 00:35:56,259
this<font color="#E5E5E5"> is the father we</font><font color="#CCCCCC"> just sent to</font><font color="#E5E5E5"> my</font>

830
00:35:52,990 --> 00:35:59,109
phone to to the device so we think<font color="#E5E5E5"> this</font>

831
00:35:56,260 --> 00:36:01,030
integration is is very<font color="#E5E5E5"> interesting and</font>

832
00:35:59,109 --> 00:36:05,440
it makes chatting and sharing files from

833
00:36:01,030 --> 00:36:08,560
the device very very<font color="#E5E5E5"> easy um as soon as</font>

834
00:36:05,440 --> 00:36:10,990
I<font color="#E5E5E5"> log out from the device uh the</font>

835
00:36:08,560 --> 00:36:13,359
contents are locked or I can<font color="#CCCCCC"> also decide</font>

836
00:36:10,990 --> 00:36:15,910
if I want to to power off the<font color="#CCCCCC"> device</font>

837
00:36:13,359 --> 00:36:17,799
from here I'm not going<font color="#E5E5E5"> to do that I'm</font>

838
00:36:15,910 --> 00:36:21,730
<font color="#E5E5E5">just going</font><font color="#CCCCCC"> to log out as soon as I log</font>

839
00:36:17,800 --> 00:36:24,369
out the partition is encrypted again and

840
00:36:21,730 --> 00:36:27,220
again this software can also be used not

841
00:36:24,369 --> 00:36:29,500
only on the USB armory but on also on

842
00:36:27,220 --> 00:36:33,879
whatever embedded system that you might

843
00:36:29,500 --> 00:36:36,160
<font color="#E5E5E5">like we also made an embedded</font>

844
00:36:33,880 --> 00:36:38,859
distribution for interlock meaning

845
00:36:36,160 --> 00:36:41,259
there's a framework called<font color="#E5E5E5"> build route</font>

846
00:36:38,859 --> 00:36:43,450
which allows you to compile just by

847
00:36:41,260 --> 00:36:45,280
using configuration files which are in

848
00:36:43,450 --> 00:36:47,680
the<font color="#E5E5E5"> form of the with the same standard</font>

849
00:36:45,280 --> 00:36:49,690
of the<font color="#E5E5E5"> Linux kernel where you can define</font>

850
00:36:47,680 --> 00:36:52,390
what<font color="#CCCCCC"> you want in the resulting image you</font>

851
00:36:49,690 --> 00:36:54,310
want<font color="#E5E5E5"> geely BCE you want SSH you want</font>

852
00:36:52,390 --> 00:36:56,859
<font color="#E5E5E5">Python whatever you like and then you</font>

853
00:36:54,310 --> 00:37:00,339
can compile a kernel image with a new

854
00:36:56,859 --> 00:37:04,299
method run disk to run another vice such

855
00:37:00,339 --> 00:37:06,369
as the USB armory so we<font color="#CCCCCC"> develop</font>

856
00:37:04,300 --> 00:37:09,400
configuration that allows easy creation

857
00:37:06,369 --> 00:37:11,319
of these kind of images for the USB

858
00:37:09,400 --> 00:37:14,530
armory so with just<font color="#CCCCCC"> two commands it's</font>

859
00:37:11,319 --> 00:37:16,750
just easy this<font color="#E5E5E5"> framework with just</font>

860
00:37:14,530 --> 00:37:20,140
download and compile everything you need

861
00:37:16,750 --> 00:37:23,619
to create a linux kernel which has an

862
00:37:20,140 --> 00:37:25,930
embedded ram disk with interlock and why

863
00:37:23,619 --> 00:37:27,220
do we<font color="#E5E5E5"> do this we do this because we want</font>

864
00:37:25,930 --> 00:37:29,259
the system<font color="#E5E5E5"> on a chip to verify the</font>

865
00:37:27,220 --> 00:37:31,270
bootloader and we want the bootloader to

866
00:37:29,260 --> 00:37:33,160
verify the kernel image but not only<font color="#E5E5E5"> the</font>

867
00:37:31,270 --> 00:37:35,170
<font color="#CCCCCC">Linux kernel but also the file system</font>

868
00:37:33,160 --> 00:37:36,910
which is associated to it and the

869
00:37:35,170 --> 00:37:39,000
interlock application with all of its

870
00:37:36,910 --> 00:37:41,580
dependencies can fit in in LA

871
00:37:39,000 --> 00:37:44,160
than<font color="#CCCCCC"> seven megabytes of a file system so</font>

872
00:37:41,580 --> 00:37:46,620
what we do<font color="#CCCCCC"> we put everything</font><font color="#E5E5E5"> in one</font>

873
00:37:44,160 --> 00:37:49,020
kernel image we load that into rom and

874
00:37:46,620 --> 00:37:50,850
what we have on the<font color="#CCCCCC"> microSD card I</font>

875
00:37:49,020 --> 00:37:53,130
<font color="#E5E5E5">either than this single image which is</font>

876
00:37:50,850 --> 00:37:55,410
verified by<font color="#CCCCCC"> the</font><font color="#E5E5E5"> hardware it's our</font>

877
00:37:53,130 --> 00:37:57,480
encrypted partition so this<font color="#E5E5E5"> is a very</font>

878
00:37:55,410 --> 00:38:00,120
minimal setup where we maintain the full

879
00:37:57,480 --> 00:38:01,200
chain of trust from the<font color="#E5E5E5"> hardware up to</font>

880
00:38:00,120 --> 00:38:02,790
the resulting encrypted partition

881
00:38:01,200 --> 00:38:05,609
because this can only be in luck with

882
00:38:02,790 --> 00:38:08,700
<font color="#E5E5E5">your</font><font color="#CCCCCC"> credentials so this allows us to</font>

883
00:38:05,610 --> 00:38:10,860
<font color="#CCCCCC">create very compact and very efficient</font>

884
00:38:08,700 --> 00:38:12,870
images that they just put in less than

885
00:38:10,860 --> 00:38:15,090
half a second on the armory and they're

886
00:38:12,870 --> 00:38:17,640
very fast and they only expose the code

887
00:38:15,090 --> 00:38:20,010
surface of interlocked itself and

888
00:38:17,640 --> 00:38:22,830
nothing more so you can even not have

889
00:38:20,010 --> 00:38:25,110
any<font color="#CCCCCC"> SSH</font><font color="#E5E5E5"> connection to this if you if you</font>

890
00:38:22,830 --> 00:38:28,799
if you want now let's talk<font color="#E5E5E5"> about your</font>

891
00:38:25,110 --> 00:38:30,660
fancy<font color="#E5E5E5"> fuses for the USB armory so is a</font>

892
00:38:28,800 --> 00:38:32,490
security tools any security tool can be

893
00:38:30,660 --> 00:38:34,290
used both<font color="#CCCCCC"> for protection but</font><font color="#E5E5E5"> also for</font>

894
00:38:32,490 --> 00:38:36,450
attacks and<font color="#E5E5E5"> being in the business of</font>

895
00:38:34,290 --> 00:38:39,330
doing security auditing and penetration

896
00:38:36,450 --> 00:38:42,390
testing we also benefit from devices

897
00:38:39,330 --> 00:38:45,720
such as this one in our job so the

898
00:38:42,390 --> 00:38:47,790
obvious application of this device is

899
00:38:45,720 --> 00:38:50,879
that<font color="#E5E5E5"> it</font><font color="#CCCCCC"> provides an easy and powerful</font>

900
00:38:47,790 --> 00:38:53,640
mean to emulate arbitrary USB devices

901
00:38:50,880 --> 00:38:55,710
and not only emulating them at a

902
00:38:53,640 --> 00:38:57,480
descriptor level which is<font color="#CCCCCC"> something</font>

903
00:38:55,710 --> 00:38:59,670
<font color="#E5E5E5">which can be easily done with something</font>

904
00:38:57,480 --> 00:39:02,100
like the face<font color="#CCCCCC"> Leinster board but you can</font>

905
00:38:59,670 --> 00:39:03,770
also expose a fool driver which might be

906
00:39:02,100 --> 00:39:07,110
<font color="#E5E5E5">already there in the linux kernel or</font>

907
00:39:03,770 --> 00:39:09,660
that you might want to develop and and

908
00:39:07,110 --> 00:39:11,490
and and<font color="#E5E5E5"> also the speed which you can</font>

909
00:39:09,660 --> 00:39:13,259
achieve<font color="#E5E5E5"> in executing this code is is</font>

910
00:39:11,490 --> 00:39:14,879
much faster than with our

911
00:39:13,260 --> 00:39:17,190
microcontroller baseboards because you

912
00:39:14,880 --> 00:39:19,020
have a full linux system running on this

913
00:39:17,190 --> 00:39:20,640
you can do passive sniffing you can do

914
00:39:19,020 --> 00:39:23,070
of course as I mentioned DNS hijacking

915
00:39:20,640 --> 00:39:25,440
and traffic diversion because if you

916
00:39:23,070 --> 00:39:27,510
expose a different driver from this

917
00:39:25,440 --> 00:39:29,400
<font color="#E5E5E5">device the host will ask for an IP</font>

918
00:39:27,510 --> 00:39:30,990
address<font color="#E5E5E5"> so you can present whatever DNS</font>

919
00:39:29,400 --> 00:39:32,520
you want you can present<font color="#E5E5E5"> whatever route</font>

920
00:39:30,990 --> 00:39:35,250
you<font color="#E5E5E5"> want and so on and in fact we also</font>

921
00:39:32,520 --> 00:39:38,520
had a few papers that were nicely done

922
00:39:35,250 --> 00:39:40,770
by other groups<font color="#E5E5E5"> oh one</font><font color="#CCCCCC"> is USB armor is</font>

923
00:39:38,520 --> 00:39:42,810
<font color="#CCCCCC">an offensive attack platform</font><font color="#E5E5E5"> or we have</font>

924
00:39:40,770 --> 00:39:46,680
USB devices phoning home which<font color="#CCCCCC"> is a</font>

925
00:39:42,810 --> 00:39:50,020
paper<font color="#E5E5E5"> about exploring how easily such a</font>

926
00:39:46,680 --> 00:39:53,080
device can then exfiltrate data home and

927
00:39:50,020 --> 00:39:54,850
and<font color="#CCCCCC"> a paper from IBM which is about</font>

928
00:39:53,080 --> 00:39:56,470
transparent defense against us be

929
00:39:54,850 --> 00:39:58,630
eavesdropping attack they use a USB

930
00:39:56,470 --> 00:40:00,009
armory for implementing protection but

931
00:39:58,630 --> 00:40:01,540
one<font color="#E5E5E5"> of the attacks that they do can also</font>

932
00:40:00,010 --> 00:40:07,210
be implemented<font color="#E5E5E5"> with the USB armory</font>

933
00:40:01,540 --> 00:40:08,890
itself so in our job of<font color="#E5E5E5"> exploring what</font>

934
00:40:07,210 --> 00:40:12,640
the device can do in<font color="#E5E5E5"> our testing we</font>

935
00:40:08,890 --> 00:40:16,750
found a vulnerability was which was kind

936
00:40:12,640 --> 00:40:21,850
of hyped because it applied to OS X and

937
00:40:16,750 --> 00:40:24,190
iOS this is<font color="#CCCCCC"> CVA 2016 17 34 any concerns</font>

938
00:40:21,850 --> 00:40:26,620
the emulation of a malicious ethernet

939
00:40:24,190 --> 00:40:29,260
device it was found and investigated on

940
00:40:26,620 --> 00:40:32,440
<font color="#CCCCCC">OS X but he also applies to I us because</font>

941
00:40:29,260 --> 00:40:34,270
the same driver code applies to both

942
00:40:32,440 --> 00:40:36,910
<font color="#E5E5E5">platforms because there's a lot</font><font color="#CCCCCC"> of code</font>

943
00:40:34,270 --> 00:40:39,130
reuse and this bug was interesting

944
00:40:36,910 --> 00:40:40,930
because he worked on<font color="#E5E5E5"> a locked session</font>

945
00:40:39,130 --> 00:40:43,090
without user intervention so you would

946
00:40:40,930 --> 00:40:46,450
just<font color="#CCCCCC"> be able to plug a device on a</font>

947
00:40:43,090 --> 00:40:50,050
locked<font color="#E5E5E5"> 06 laptop and it would just</font>

948
00:40:46,450 --> 00:40:52,120
trigger the the issue and and what made

949
00:40:50,050 --> 00:40:54,790
it interesting it was announced 24 hours

950
00:40:52,120 --> 00:40:57,009
<font color="#CCCCCC">after the FBI confirmed the iphone</font>

951
00:40:54,790 --> 00:40:58,720
unlock which is very interesting and

952
00:40:57,010 --> 00:41:00,610
<font color="#E5E5E5">also gives a lot of a lot of trouble and</font>

953
00:40:58,720 --> 00:41:02,640
<font color="#E5E5E5">a lot of inquiry speak because of it it</font>

954
00:41:00,610 --> 00:41:05,110
is we think<font color="#E5E5E5"> it's likely unrelated but</font>

955
00:41:02,640 --> 00:41:06,460
you never know now there's<font color="#E5E5E5"> one</font>

956
00:41:05,110 --> 00:41:08,410
interesting thing there was so much

957
00:41:06,460 --> 00:41:10,900
journalistic pressure on understanding

958
00:41:08,410 --> 00:41:14,020
if this bug was actually used in the<font color="#E5E5E5"> FBI</font>

959
00:41:10,900 --> 00:41:17,050
case or not that a week after<font color="#CCCCCC"> public</font>

960
00:41:14,020 --> 00:41:18,790
disclosure which is about four months

961
00:41:17,050 --> 00:41:21,130
after initial reporting so there was a

962
00:41:18,790 --> 00:41:23,680
lot<font color="#CCCCCC"> of time to investigate this miss</font>

963
00:41:21,130 --> 00:41:25,720
fame but a week after public disclosure

964
00:41:23,680 --> 00:41:28,060
because of the journal and very<font color="#E5E5E5"> strong</font>

965
00:41:25,720 --> 00:41:29,830
journalistic pressures that was there in

966
00:41:28,060 --> 00:41:32,259
inquiring whether this bug was used or

967
00:41:29,830 --> 00:41:35,190
not in the FBI case apple decided to

968
00:41:32,260 --> 00:41:37,540
downgrade the impact of the bug from

969
00:41:35,190 --> 00:41:40,720
execute arbitrary code with Colonel

970
00:41:37,540 --> 00:41:42,310
privileges to just a denial of service

971
00:41:40,720 --> 00:41:43,750
and the reason why they<font color="#CCCCCC"> did that is</font>

972
00:41:42,310 --> 00:41:46,590
because of the interpretation of<font color="#E5E5E5"> the</font>

973
00:41:43,750 --> 00:41:51,340
panic logs that were that were<font color="#E5E5E5"> sent out</font>

974
00:41:46,590 --> 00:41:53,440
so<font color="#E5E5E5"> I think the impact on</font><font color="#CCCCCC"> ground is</font>

975
00:41:51,340 --> 00:41:55,330
debatable but I'm going<font color="#E5E5E5"> to leave that to</font>

976
00:41:53,440 --> 00:41:57,490
<font color="#E5E5E5">whoever wants to test this vulnerability</font>

977
00:41:55,330 --> 00:41:59,830
which is why now we're giving details

978
00:41:57,490 --> 00:42:02,100
about it for the<font color="#CCCCCC"> very first time so the</font>

979
00:41:59,830 --> 00:42:03,850
issue is<font color="#CCCCCC"> that a high-speed</font><font color="#E5E5E5"> USB device</font>

980
00:42:02,100 --> 00:42:06,430
advertising specific use

981
00:42:03,850 --> 00:42:08,860
descriptors which match full speed

982
00:42:06,430 --> 00:42:10,509
values so not<font color="#E5E5E5"> high speed device but full</font>

983
00:42:08,860 --> 00:42:12,250
spin so we have a high speed device

984
00:42:10,510 --> 00:42:15,100
which pretends to be a full speed

985
00:42:12,250 --> 00:42:17,740
divisive and if it's not causes OS<font color="#E5E5E5"> X to</font>

986
00:42:15,100 --> 00:42:19,839
panic and reboot about specific messages

987
00:42:17,740 --> 00:42:21,669
which are sent by the device<font color="#E5E5E5"> to the host</font>

988
00:42:19,840 --> 00:42:24,040
so this is fully controlled by the

989
00:42:21,670 --> 00:42:26,070
device towards the host and this

990
00:42:24,040 --> 00:42:28,210
corruption memory corruption is trigger

991
00:42:26,070 --> 00:42:31,090
regardless of<font color="#E5E5E5"> the user being logged in</font>

992
00:42:28,210 --> 00:42:34,380
or around and it is triggered by setting

993
00:42:31,090 --> 00:42:38,020
first by setting the descriptors for the

994
00:42:34,380 --> 00:42:40,240
USB end point to those values and then

995
00:42:38,020 --> 00:42:43,780
to trigger a very specific payload from

996
00:42:40,240 --> 00:42:47,560
the network so we narrow down a very

997
00:42:43,780 --> 00:42:50,620
single a single ipv6 packet which can

998
00:42:47,560 --> 00:42:53,410
trigger this panic when send from<font color="#E5E5E5"> the</font>

999
00:42:50,620 --> 00:42:55,509
device<font color="#CCCCCC"> to the host however this is just</font>

1000
00:42:53,410 --> 00:42:57,009
a reproducer a reproducer of the bug

1001
00:42:55,510 --> 00:42:59,650
there are many<font color="#E5E5E5"> other effects that</font>

1002
00:42:57,010 --> 00:43:02,140
happens when this scenario takes place

1003
00:42:59,650 --> 00:43:05,380
and not<font color="#CCCCCC"> always a panic has been</font><font color="#E5E5E5"> it's</font>

1004
00:43:02,140 --> 00:43:07,180
been<font color="#E5E5E5"> trigger so we think that the panic</font>

1005
00:43:05,380 --> 00:43:09,160
is being triggered only if<font color="#CCCCCC"> we</font>

1006
00:43:07,180 --> 00:43:11,500
specifically corrupt memory in a manner

1007
00:43:09,160 --> 00:43:13,779
which is then passes this specific

1008
00:43:11,500 --> 00:43:15,430
embeth check memory buffer check but in

1009
00:43:13,780 --> 00:43:17,350
other cases we will get other results

1010
00:43:15,430 --> 00:43:20,020
and sometimes we're going to<font color="#E5E5E5"> not get a</font>

1011
00:43:17,350 --> 00:43:22,089
panic report or not supporting the fact

1012
00:43:20,020 --> 00:43:25,690
that the memory corruption is more

1013
00:43:22,090 --> 00:43:28,720
extensive<font color="#CCCCCC"> than that specific case when</font>

1014
00:43:25,690 --> 00:43:30,790
OS X survives the attack if you sniff

1015
00:43:28,720 --> 00:43:34,120
the incoming<font color="#E5E5E5"> network packets on the host</font>

1016
00:43:30,790 --> 00:43:36,490
you will see that let's say that<font color="#CCCCCC"> you</font>

1017
00:43:34,120 --> 00:43:38,350
send a ping a continuous ping to<font color="#CCCCCC"> the</font>

1018
00:43:36,490 --> 00:43:41,080
device you<font color="#CCCCCC"> will see that the palos for</font>

1019
00:43:38,350 --> 00:43:44,140
more than one thing gets collected into

1020
00:43:41,080 --> 00:43:45,549
one giant packet meaning that<font color="#E5E5E5"> we are</font>

1021
00:43:44,140 --> 00:43:47,339
corrupting the memory buffers and

1022
00:43:45,550 --> 00:43:50,920
somehow the host believes that the

1023
00:43:47,340 --> 00:43:54,190
network packets are much larger what

1024
00:43:50,920 --> 00:43:55,930
they are and also<font color="#E5E5E5"> I would like to point</font>

1025
00:43:54,190 --> 00:43:59,770
out<font color="#CCCCCC"> that memory buffer exploitation</font>

1026
00:43:55,930 --> 00:44:02,230
we're rtv6 on bsd code is something that

1027
00:43:59,770 --> 00:44:04,390
happened<font color="#E5E5E5"> in the past on openbsd so it's</font>

1028
00:44:02,230 --> 00:44:06,640
a<font color="#E5E5E5"> kind of interesting vulnerability and</font>

1029
00:44:04,390 --> 00:44:09,400
you know<font color="#E5E5E5"> I would I would I would give a</font>

1030
00:44:06,640 --> 00:44:11,710
second thought on the impact here anyway

1031
00:44:09,400 --> 00:44:13,540
regardless<font color="#E5E5E5"> of the impact this makes a</font>

1032
00:44:11,710 --> 00:44:15,880
very<font color="#E5E5E5"> good case for the efficiency of</font>

1033
00:44:13,540 --> 00:44:17,619
using the USB armory in such such

1034
00:44:15,880 --> 00:44:20,049
testing because we have to be

1035
00:44:17,619 --> 00:44:22,119
to easily manipulate descriptors by just

1036
00:44:20,049 --> 00:44:24,670
by changing a few lines of of kernel

1037
00:44:22,119 --> 00:44:27,789
code and at the same time we<font color="#CCCCCC"> can still</font>

1038
00:44:24,670 --> 00:44:30,249
present a full valid driver to<font color="#CCCCCC"> the host</font>

1039
00:44:27,789 --> 00:44:32,680
which is<font color="#E5E5E5"> exactly what happened</font><font color="#CCCCCC"> here not</font>

1040
00:44:30,249 --> 00:44:34,689
only we<font color="#E5E5E5"> required to manipulate the USB</font>

1041
00:44:32,680 --> 00:44:38,109
descriptors but we always had to have<font color="#CCCCCC"> a</font>

1042
00:44:34,690 --> 00:44:40,359
<font color="#E5E5E5">full-blown Ethernet USB driver working</font>

1043
00:44:38,109 --> 00:44:42,819
<font color="#CCCCCC">which would allows us to send packets</font>

1044
00:44:40,359 --> 00:44:45,190
from the device to<font color="#CCCCCC"> the</font><font color="#E5E5E5"> host and this is</font>

1045
00:44:42,819 --> 00:44:50,380
<font color="#E5E5E5">something which is not easy to do with</font>

1046
00:44:45,190 --> 00:44:52,749
other USB frameworks so five minutes

1047
00:44:50,380 --> 00:44:54,220
left for questions then there's lunch I

1048
00:44:52,749 --> 00:44:55,990
think we're doing very well with time

1049
00:44:54,220 --> 00:44:58,089
but first<font color="#E5E5E5"> of all</font><font color="#CCCCCC"> I would like to</font><font color="#E5E5E5"> thank</font>

1050
00:44:55,990 --> 00:44:59,470
you very much for<font color="#CCCCCC"> your for your patience</font>

1051
00:44:58,089 --> 00:45:01,089
and for your attention and<font color="#E5E5E5"> if you have</font>

1052
00:44:59,470 --> 00:45:03,538
<font color="#E5E5E5">any questions please raise your hand</font>

1053
00:45:01,089 --> 00:45:03,538
thank

1054
00:45:10,410 --> 00:45:18,430
any questions yeah hi thanks<font color="#CCCCCC"> for talk</font><font color="#E5E5E5"> is</font>

1055
00:45:16,540 --> 00:45:20,860
there a possibility<font color="#E5E5E5"> to load the pgp key</font>

1056
00:45:18,430 --> 00:45:25,569
in the secure Enclave so how do you

1057
00:45:20,860 --> 00:45:27,610
protect<font color="#CCCCCC"> a key material right so there</font><font color="#E5E5E5"> is</font>

1058
00:45:25,570 --> 00:45:30,850
no persistence on the device other than

1059
00:45:27,610 --> 00:45:33,880
the diffuse secure boot keys and there's

1060
00:45:30,850 --> 00:45:36,040
a symmetric unique Kiefer sock which

1061
00:45:33,880 --> 00:45:39,610
cannot be read which is embedded in the

1062
00:45:36,040 --> 00:45:41,920
system on a chip the model for securing

1063
00:45:39,610 --> 00:45:44,170
user data is that you<font color="#E5E5E5"> don't want to be</font>

1064
00:45:41,920 --> 00:45:45,670
too<font color="#E5E5E5"> tied on</font><font color="#CCCCCC"> the hardware features for</font>

1065
00:45:44,170 --> 00:45:47,730
doing that so you want to keep all of

1066
00:45:45,670 --> 00:45:50,980
this data on an encrypted partition

1067
00:45:47,730 --> 00:45:52,630
ideally or unencrypted few more and what

1068
00:45:50,980 --> 00:45:55,000
you do<font color="#E5E5E5"> is</font><font color="#CCCCCC"> that you need a combination of</font>

1069
00:45:52,630 --> 00:45:56,980
two<font color="#CCCCCC"> things you need to secure boot to</font>

1070
00:45:55,000 --> 00:45:58,360
ensure<font color="#E5E5E5"> that this specific device can</font>

1071
00:45:56,980 --> 00:46:00,730
only run your code from the<font color="#E5E5E5"> very</font>

1072
00:45:58,360 --> 00:46:03,220
beginning and then you need if you<font color="#CCCCCC"> want</font>

1073
00:46:00,730 --> 00:46:06,580
encryption<font color="#E5E5E5"> which is unattended</font>

1074
00:46:03,220 --> 00:46:09,759
encryption<font color="#E5E5E5"> okay you need to use a secret</font>

1075
00:46:06,580 --> 00:46:12,700
<font color="#E5E5E5">which is store on the device if you want</font>

1076
00:46:09,760 --> 00:46:14,380
to decrypt something with with a device

1077
00:46:12,700 --> 00:46:16,629
which is attended where you can input

1078
00:46:14,380 --> 00:46:17,980
data then you just care about secure

1079
00:46:16,630 --> 00:46:19,480
boot<font color="#E5E5E5"> because at some point</font><font color="#CCCCCC"> you will</font><font color="#E5E5E5"> have</font>

1080
00:46:17,980 --> 00:46:21,190
an encrypted partition and you can put

1081
00:46:19,480 --> 00:46:22,690
your credentials and you don't want

1082
00:46:21,190 --> 00:46:24,730
those credential to be<font color="#E5E5E5"> stored on the</font>

1083
00:46:22,690 --> 00:46:26,650
device itself if you want this to be

1084
00:46:24,730 --> 00:46:28,510
unattended let's say you have an IOT

1085
00:46:26,650 --> 00:46:30,130
device and you want to have the firmware

1086
00:46:28,510 --> 00:46:31,510
encrypted and you don't want local

1087
00:46:30,130 --> 00:46:33,580
attacks will be<font color="#E5E5E5"> able to extract a</font>

1088
00:46:31,510 --> 00:46:35,320
framework then you need to do secure

1089
00:46:33,580 --> 00:46:37,180
boot and then you need to read the

1090
00:46:35,320 --> 00:46:39,160
symmetric key from the<font color="#CCCCCC"> sock itself so</font>

1091
00:46:37,180 --> 00:46:41,740
not from an external memory which is

1092
00:46:39,160 --> 00:46:44,230
<font color="#E5E5E5">which is you know which is we where the</font>

1093
00:46:41,740 --> 00:46:46,299
bus can be intercepted on on the PCB and

1094
00:46:44,230 --> 00:46:49,330
on this software two ways<font color="#E5E5E5"> either you</font>

1095
00:46:46,300 --> 00:46:51,670
fuse your key in the<font color="#E5E5E5"> one-time fuses and</font>

1096
00:46:49,330 --> 00:46:53,950
you make<font color="#CCCCCC"> sure that your code does never</font>

1097
00:46:51,670 --> 00:46:56,770
allow external debugging to access those

1098
00:46:53,950 --> 00:46:59,140
fuses or you use the symmetric key which

1099
00:46:56,770 --> 00:47:00,820
is<font color="#E5E5E5"> in the system on a chip which nobody</font>

1100
00:46:59,140 --> 00:47:02,770
knows I mean<font color="#E5E5E5"> you can use it but you</font>

1101
00:47:00,820 --> 00:47:04,810
cannot know it which means that<font color="#E5E5E5"> when you</font>

1102
00:47:02,770 --> 00:47:06,400
provision the device you<font color="#CCCCCC"> need to use the</font>

1103
00:47:04,810 --> 00:47:09,190
actual device that you're going to

1104
00:47:06,400 --> 00:47:11,260
deploy which could be seen as<font color="#CCCCCC"> a feature</font>

1105
00:47:09,190 --> 00:47:12,850
or<font color="#CCCCCC"> it could be</font><font color="#E5E5E5"> very inconvenient but</font>

1106
00:47:11,260 --> 00:47:15,010
these are<font color="#CCCCCC"> the two ways we've seen</font><font color="#E5E5E5"> a lot</font>

1107
00:47:12,850 --> 00:47:16,450
of embedded devices that they just<font color="#E5E5E5"> have</font>

1108
00:47:15,010 --> 00:47:18,340
an external component for doing that

1109
00:47:16,450 --> 00:47:20,140
they're like a crypto of indicator which

1110
00:47:18,340 --> 00:47:22,420
is external but the<font color="#E5E5E5"> problem with that is</font>

1111
00:47:20,140 --> 00:47:24,160
that you can always intercept the bus

1112
00:47:22,420 --> 00:47:26,079
want to secure that communication then

1113
00:47:24,160 --> 00:47:28,029
you need<font color="#E5E5E5"> to use a secret which is in the</font>

1114
00:47:26,079 --> 00:47:29,890
code and some people they do secure boot

1115
00:47:28,030 --> 00:47:31,930
but<font color="#E5E5E5"> they do not encrypt the firmware and</font>

1116
00:47:29,890 --> 00:47:35,078
then you can find the secret bear so

1117
00:47:31,930 --> 00:47:37,000
it's it's strictly<font color="#CCCCCC"> interlock</font>

1118
00:47:35,079 --> 00:47:38,410
intentionally doesn't leverage on this

1119
00:47:37,000 --> 00:47:40,809
it only leverage is on secure boot

1120
00:47:38,410 --> 00:47:42,910
because the use case is<font color="#CCCCCC"> that you're</font>

1121
00:47:40,809 --> 00:47:44,859
<font color="#E5E5E5">going to put your password anyway so we</font>

1122
00:47:42,910 --> 00:47:47,859
don't want<font color="#CCCCCC"> to</font><font color="#E5E5E5"> waste time having secrets</font>

1123
00:47:44,859 --> 00:47:53,460
which are not necessary thank you that's

1124
00:47:47,859 --> 00:47:53,460
very good<font color="#E5E5E5"> question any other questions</font>

1125
00:47:56,130 --> 00:48:00,640
no okay<font color="#E5E5E5"> any time approached me if you</font>

1126
00:47:59,380 --> 00:48:04,059
want and I can show<font color="#CCCCCC"> you the device and</font>

1127
00:48:00,640 --> 00:48:06,098
ask your questions in person thank you

1128
00:48:04,059 --> 00:48:09,420
oh thank<font color="#CCCCCC"> you very much no just your</font>

1129
00:48:06,099 --> 00:48:09,420
applause thanks thank<font color="#E5E5E5"> you</font>

