1
00:00:06,770 --> 00:00:13,350
you can you hear me yeah thank<font color="#E5E5E5"> you</font>

2
00:00:10,260 --> 00:00:16,948
everybody my name is<font color="#CCCCCC"> Mikayla did Lucas</font>

3
00:00:13,350 --> 00:00:19,560
hey we work at Google here in Zurich in

4
00:00:16,949 --> 00:00:21,690
the information security team and we're

5
00:00:19,560 --> 00:00:26,310
here to talk about<font color="#E5E5E5"> the content security</font>

6
00:00:21,690 --> 00:00:28,560
policy just very<font color="#E5E5E5"> quickly how many of you</font>

7
00:00:26,310 --> 00:00:32,940
have<font color="#CCCCCC"> heard of</font><font color="#E5E5E5"> the contest acuity policy</font>

8
00:00:28,560 --> 00:00:35,430
of what it<font color="#E5E5E5"> is at least</font><font color="#CCCCCC"> Oh awesome let us</font>

9
00:00:32,940 --> 00:00:37,379
that's really great and how many<font color="#E5E5E5"> of you</font>

10
00:00:35,430 --> 00:00:42,390
have tried to<font color="#E5E5E5"> maybe deploy it on an</font>

11
00:00:37,379 --> 00:00:45,360
actual web application how many<font color="#CCCCCC"> zero</font>

12
00:00:42,390 --> 00:00:54,030
right<font color="#E5E5E5"> because some hands there okay</font><font color="#CCCCCC"> okay</font>

13
00:00:45,360 --> 00:00:59,070
did<font color="#E5E5E5"> you succeed yes awesome okay so yes</font>

14
00:00:54,030 --> 00:01:03,899
<font color="#E5E5E5">that was</font><font color="#CCCCCC"> the about us and in this talk</font>

15
00:00:59,070 --> 00:01:06,240
we'll talk about what CSP is and we'll

16
00:01:03,899 --> 00:01:08,780
see like a bit little<font color="#E5E5E5"> bit more in detail</font>

17
00:01:06,240 --> 00:01:11,818
what's<font color="#CCCCCC"> inside a policy what a policy is</font>

18
00:01:08,780 --> 00:01:18,959
then we'll talk about common mistakes

19
00:01:11,819 --> 00:01:21,749
that web admin do and how to bypass CSP

20
00:01:18,959 --> 00:01:23,880
not necessarily<font color="#CCCCCC"> because</font><font color="#E5E5E5"> of a mistake or</font>

21
00:01:21,749 --> 00:01:26,729
an error by did the web administrator

22
00:01:23,880 --> 00:01:28,979
but also because of I would<font color="#E5E5E5"> say inherent</font>

23
00:01:26,729 --> 00:01:34,408
<font color="#E5E5E5">flaws and in the contest QT policy as it</font>

24
00:01:28,979 --> 00:01:36,450
<font color="#E5E5E5">is now so this is i'd say like that the</font>

25
00:01:34,409 --> 00:01:39,779
first let the destructive part of the

26
00:01:36,450 --> 00:01:42,450
above the talk but then we will do we'll

27
00:01:39,779 --> 00:01:44,759
talk<font color="#CCCCCC"> about a new way of doing CSP so</font>

28
00:01:42,450 --> 00:01:46,799
what we worked on in the<font color="#E5E5E5"> last month's is</font>

29
00:01:44,759 --> 00:01:49,439
how to make CSP better how<font color="#E5E5E5"> to make it</font>

30
00:01:46,799 --> 00:01:54,719
actually<font color="#E5E5E5"> useful and more easily</font>

31
00:01:49,439 --> 00:01:56,369
deployable and safer more secure so does

32
00:01:54,719 --> 00:01:59,089
we talk about the<font color="#E5E5E5"> future of CSP what we</font>

33
00:01:56,369 --> 00:02:02,659
see for for CSP hopefully hopefully also

34
00:01:59,090 --> 00:02:05,009
thanks to<font color="#E5E5E5"> like your</font><font color="#CCCCCC"> L like the adoption</font>

35
00:02:02,659 --> 00:02:07,340
which is really really crucial in this

36
00:02:05,009 --> 00:02:10,800
kind of for this kind of mitigation and

37
00:02:07,340 --> 00:02:14,160
some success stories where we deployed

38
00:02:10,800 --> 00:02:18,060
CSP correctly and successfully and then

39
00:02:14,160 --> 00:02:19,319
there will<font color="#CCCCCC"> be a Q&A but I very warmly</font>

40
00:02:18,060 --> 00:02:20,819
invite you to

41
00:02:19,319 --> 00:02:24,540
Raptors in<font color="#CCCCCC"> any moment if</font><font color="#E5E5E5"> you have any</font>

42
00:02:20,819 --> 00:02:26,849
question really like to have questioned

43
00:02:24,540 --> 00:02:28,590
life not just at the<font color="#E5E5E5"> end</font><font color="#CCCCCC"> because if</font>

44
00:02:26,849 --> 00:02:34,709
something<font color="#E5E5E5"> is unclear it's always better</font>

45
00:02:28,590 --> 00:02:37,200
to clarify it<font color="#E5E5E5"> life okay so what is CSP</font>

46
00:02:34,709 --> 00:02:40,019
so the content security policy or CSP is

47
00:02:37,200 --> 00:02:44,518
a tool that you can use<font color="#E5E5E5"> to lock down</font>

48
00:02:40,019 --> 00:02:48,510
your up your web application so it's a

49
00:02:44,519 --> 00:02:51,799
defense-in-depth mechanism against these

50
00:02:48,510 --> 00:02:54,298
different type of malicious injections

51
00:02:51,799 --> 00:02:57,120
but it's<font color="#E5E5E5"> very important to say that it's</font>

52
00:02:54,299 --> 00:03:00,510
not<font color="#CCCCCC"> a replacement for the</font><font color="#E5E5E5"> usual careful</font>

53
00:02:57,120 --> 00:03:01,919
validation and input validation and

54
00:03:00,510 --> 00:03:05,548
output encoding you should do for

55
00:03:01,919 --> 00:03:07,230
example against xss vulnerabilities to

56
00:03:05,549 --> 00:03:09,449
prevent against cross-site scripting

57
00:03:07,230 --> 00:03:11,189
vulnerabilities this is a

58
00:03:09,449 --> 00:03:13,049
<font color="#E5E5E5">defense-in-depth this is basically</font>

59
00:03:11,189 --> 00:03:16,819
declaring what you expect your web

60
00:03:13,049 --> 00:03:20,010
application to load embed and execute

61
00:03:16,819 --> 00:03:21,629
and lock down your application to just

62
00:03:20,010 --> 00:03:27,810
do that and these allow<font color="#E5E5E5"> everything else</font>

63
00:03:21,629 --> 00:03:29,819
so you<font color="#E5E5E5"> would mitigate risk due to an</font>

64
00:03:27,810 --> 00:03:33,000
injection<font color="#E5E5E5"> because you'll never be bug</font>

65
00:03:29,819 --> 00:03:35,220
free right you can<font color="#CCCCCC"> have an XSS even if</font>

66
00:03:33,000 --> 00:03:39,060
you are very careful<font color="#E5E5E5"> and sis please the</font>

67
00:03:35,220 --> 00:03:41,310
second line of defense so you can have

68
00:03:39,060 --> 00:03:43,199
granular control over the resources that

69
00:03:41,310 --> 00:03:46,439
your web application can load<font color="#E5E5E5"> embedded</font>

70
00:03:43,199 --> 00:03:48,269
execute and this is for scripts mostly

71
00:03:46,439 --> 00:03:50,250
and we are mostly interested in scripts

72
00:03:48,269 --> 00:03:52,489
in this talk but it's also those applies

73
00:03:50,250 --> 00:03:57,150
to two styles for example of fonts or

74
00:03:52,489 --> 00:03:58,799
several types of<font color="#E5E5E5"> resources it can be</font>

75
00:03:57,150 --> 00:04:00,540
used<font color="#CCCCCC"> to lock down</font><font color="#E5E5E5"> to so to reduce</font>

76
00:03:58,799 --> 00:04:02,909
privilege of application I mean for

77
00:04:00,540 --> 00:04:05,280
<font color="#CCCCCC">example html5</font><font color="#E5E5E5"> introduced the sandbox</font>

78
00:04:02,909 --> 00:04:07,858
attribute for iframe that basically

79
00:04:05,280 --> 00:04:11,099
isolate the origin<font color="#CCCCCC"> or which an iframe</font>

80
00:04:07,859 --> 00:04:13,859
runs or this allows it to run to execute

81
00:04:11,099 --> 00:04:16,978
scripts and so on and with CSP it's

82
00:04:13,859 --> 00:04:20,750
possible to extend this<font color="#E5E5E5"> the sandboxing</font>

83
00:04:16,978 --> 00:04:23,130
to<font color="#E5E5E5"> a lot of other elements and and and</font>

84
00:04:20,750 --> 00:04:25,460
different things<font color="#CCCCCC"> so for sample for</font>

85
00:04:23,130 --> 00:04:28,620
plugins you can specify the exact

86
00:04:25,460 --> 00:04:31,489
plug-in types that are allowed to

87
00:04:28,620 --> 00:04:33,620
<font color="#E5E5E5">execute just</font><font color="#CCCCCC"> 0 flash if you</font>

88
00:04:31,490 --> 00:04:38,569
you want to suffer or<font color="#E5E5E5"> let something else</font>

89
00:04:33,620 --> 00:04:41,660
right java and you can for example

90
00:04:38,569 --> 00:04:43,669
lockdown what a form<font color="#CCCCCC"> submit to so the</font>

91
00:04:41,660 --> 00:04:46,819
form action so if<font color="#CCCCCC"> there is i don't know</font>

92
00:04:43,669 --> 00:04:51,318
like<font color="#E5E5E5"> some kind of injection there it was</font>

93
00:04:46,819 --> 00:04:53,500
the browser would still refuse to to

94
00:04:51,319 --> 00:04:58,940
submit a form to another unexpected

95
00:04:53,500 --> 00:05:00,680
location and lastly but not least you

96
00:04:58,940 --> 00:05:02,210
can use the SP also to detect

97
00:05:00,680 --> 00:05:06,639
exploitation because it is a powerful

98
00:05:02,210 --> 00:05:09,698
monitoring and reporting system and and

99
00:05:06,639 --> 00:05:13,909
basically<font color="#E5E5E5"> you can configure it to send</font>

100
00:05:09,699 --> 00:05:15,710
reports to you to like an endpoint you

101
00:05:13,909 --> 00:05:18,800
specify and then you would be<font color="#E5E5E5"> able to</font>

102
00:05:15,710 --> 00:05:21,400
<font color="#E5E5E5">monitor them set up alerting so that you</font>

103
00:05:18,800 --> 00:05:24,710
would get a heads-up<font color="#E5E5E5"> when something</font>

104
00:05:21,400 --> 00:05:26,568
weird happen so maybe you can discover

105
00:05:24,710 --> 00:05:29,508
that you have an exercise in place

106
00:05:26,569 --> 00:05:31,880
thanks to CSP otherwise you wouldn't

107
00:05:29,509 --> 00:05:39,590
have you wouldn't have<font color="#CCCCCC"> known at all</font>

108
00:05:31,880 --> 00:05:44,360
right and the CSP is<font color="#CCCCCC"> i would say work in</font>

109
00:05:39,590 --> 00:05:46,849
progress we the last specification is

110
00:05:44,360 --> 00:05:48,289
CSP version 2 and there is a draft which

111
00:05:46,849 --> 00:05:50,060
is pretty close<font color="#E5E5E5"> to becoming the new</font>

112
00:05:48,289 --> 00:05:53,449
standard which is CSP three but<font color="#CCCCCC"> it's</font>

113
00:05:50,060 --> 00:05:55,880
still in the works and we are working

114
00:05:53,449 --> 00:05:58,909
together with my quest from the chrome

115
00:05:55,880 --> 00:06:02,810
team and other people from<font color="#E5E5E5"> mozilla apple</font>

116
00:05:58,909 --> 00:06:06,319
and so on microsoft to standardize some

117
00:06:02,810 --> 00:06:08,659
modifications as i said before to try to

118
00:06:06,319 --> 00:06:11,900
make<font color="#CCCCCC"> it</font><font color="#E5E5E5"> better so we'll see also the</font>

119
00:06:08,659 --> 00:06:16,580
show will see the shortcomings to some

120
00:06:11,900 --> 00:06:19,758
aspects<font color="#E5E5E5"> of it and we see</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> later so</font>

121
00:06:16,580 --> 00:06:21,680
but what is<font color="#CCCCCC"> actually CSP CSP consecutive</font>

122
00:06:19,759 --> 00:06:23,449
policy is an HTTP header you can

123
00:06:21,680 --> 00:06:27,069
optionally add to your web application

124
00:06:23,449 --> 00:06:29,840
and it's<font color="#CCCCCC"> actually two HTTP</font><font color="#E5E5E5"> headers</font>

125
00:06:27,069 --> 00:06:32,840
content security policy with dashes and

126
00:06:29,840 --> 00:06:34,549
this is the normal<font color="#E5E5E5"> mode which is called</font>

127
00:06:32,840 --> 00:06:36,318
enforcing mode which is<font color="#E5E5E5"> the one it's</font>

128
00:06:34,550 --> 00:06:41,089
actually useful for blocking what you

129
00:06:36,319 --> 00:06:43,159
don't want and a report<font color="#E5E5E5"> only mode</font>

130
00:06:41,089 --> 00:06:44,990
content security policy report only

131
00:06:43,159 --> 00:06:46,640
which is if it<font color="#CCCCCC"> is you</font>

132
00:06:44,990 --> 00:06:49,700
are only interested in<font color="#E5E5E5"> the reporting</font>

133
00:06:46,640 --> 00:06:52,370
part of it so if<font color="#CCCCCC"> you you want to allow</font>

134
00:06:49,700 --> 00:06:54,650
<font color="#E5E5E5">everything but you want browsers to</font>

135
00:06:52,370 --> 00:06:56,090
still send you violation reports if

136
00:06:54,650 --> 00:07:01,099
there was<font color="#CCCCCC"> a violation which is not</font>

137
00:06:56,090 --> 00:07:02,630
enforced right and there are many many

138
00:07:01,100 --> 00:07:05,810
many directives that try to address

139
00:07:02,630 --> 00:07:07,480
different problems so for<font color="#E5E5E5"> example there</font>

140
00:07:05,810 --> 00:07:11,540
is the catch-all default I Circe's

141
00:07:07,480 --> 00:07:15,110
<font color="#E5E5E5">Exorcist is stands for source so for</font>

142
00:07:11,540 --> 00:07:16,840
images there is IMG SRC child SOC deals

143
00:07:15,110 --> 00:07:19,430
with frames and some other<font color="#CCCCCC"> things</font>

144
00:07:16,840 --> 00:07:22,489
connector so see deals with xhr

145
00:07:19,430 --> 00:07:26,870
phantosaur see deals with<font color="#E5E5E5"> fonts frame</font>

146
00:07:22,490 --> 00:07:28,790
ancestors you can for<font color="#CCCCCC"> example say i want</font>

147
00:07:26,870 --> 00:07:31,400
my application to<font color="#E5E5E5"> be framed just by</font>

148
00:07:28,790 --> 00:07:33,860
<font color="#CCCCCC">these origins but not the others you can</font>

149
00:07:31,400 --> 00:07:36,799
do the frame ancestors style media

150
00:07:33,860 --> 00:07:39,470
object so on but will focus in<font color="#CCCCCC"> this</font>

151
00:07:36,800 --> 00:07:42,460
presentation on script SRC because this

152
00:07:39,470 --> 00:07:49,400
is what matters most for against

153
00:07:42,460 --> 00:07:52,190
cross-site scripting attacks so how does

154
00:07:49,400 --> 00:07:54,580
it<font color="#CCCCCC"> look like standard context acuity</font>

155
00:07:52,190 --> 00:07:57,440
policy<font color="#CCCCCC"> it looks something like this so</font>

156
00:07:54,580 --> 00:08:02,060
in this case<font color="#E5E5E5"> you</font><font color="#CCCCCC"> have a catch-all</font>

157
00:07:57,440 --> 00:08:05,420
default SRC so default<font color="#CCCCCC"> ester-c</font><font color="#E5E5E5"> is fold</font>

158
00:08:02,060 --> 00:08:08,720
back for everything every other resource

159
00:08:05,420 --> 00:08:11,840
that does not fall in a more specified

160
00:08:08,720 --> 00:08:13,640
defined let's say bin so for example

161
00:08:11,840 --> 00:08:15,950
this case we define default assocn

162
00:08:13,640 --> 00:08:18,200
script SRC so scripts are governed by

163
00:08:15,950 --> 00:08:20,360
script<font color="#CCCCCC"> associ</font><font color="#E5E5E5"> and everything else is</font>

164
00:08:18,200 --> 00:08:22,219
governed by default as you see if you

165
00:08:20,360 --> 00:08:25,130
omit default as you see<font color="#CCCCCC"> you're just</font>

166
00:08:22,220 --> 00:08:28,370
governing scripts and everything else is

167
00:08:25,130 --> 00:08:31,430
free to be whatever you want so in this

168
00:08:28,370 --> 00:08:34,760
case we<font color="#CCCCCC"> are doing default associ self so</font>

169
00:08:31,430 --> 00:08:38,060
self is a special key words means same

170
00:08:34,760 --> 00:08:42,110
origin so it means allow every source

171
00:08:38,059 --> 00:08:44,930
that is on the<font color="#CCCCCC"> same origin script SSC is</font>

172
00:08:42,110 --> 00:08:48,290
also self but it's also relaxed it also

173
00:08:44,930 --> 00:08:53,329
<font color="#E5E5E5">adds yep</font><font color="#CCCCCC"> com so every script from uf.com</font>

174
00:08:48,290 --> 00:08:57,199
such as yep<font color="#CCCCCC"> com / x oj s or slash path /</font>

175
00:08:53,330 --> 00:08:58,819
<font color="#CCCCCC">x3s is allowed and then you also set up</font>

176
00:08:57,200 --> 00:09:00,669
report your<font color="#E5E5E5"> I to size</font>

177
00:08:58,819 --> 00:09:03,488
CSP violation logger on the same domain

178
00:09:00,669 --> 00:09:06,499
so let's<font color="#E5E5E5"> say that money that example.com</font>

179
00:09:03,489 --> 00:09:11,149
wants to embed a picture of a cat and it

180
00:09:06,499 --> 00:09:15,049
does IMG SRC cast of PNG it's an image

181
00:09:11,149 --> 00:09:17,049
so the CSP looks at default source in

182
00:09:15,049 --> 00:09:20,269
this case<font color="#E5E5E5"> because there is no IMG SRC</font>

183
00:09:17,049 --> 00:09:24,589
itself said sure catbug PNG is on the

184
00:09:20,269 --> 00:09:27,470
same origin so it allows it it works so

185
00:09:24,589 --> 00:09:30,470
they also want<font color="#E5E5E5"> to invite a script so</font>

186
00:09:27,470 --> 00:09:32,419
they do script SRC yep<font color="#E5E5E5"> com xvs and as I</font>

187
00:09:30,470 --> 00:09:33,919
<font color="#E5E5E5">said before yep dot-com is allowed by</font>

188
00:09:32,419 --> 00:09:39,019
the script<font color="#CCCCCC"> SOC directive so it also</font>

189
00:09:33,919 --> 00:09:41,989
<font color="#E5E5E5">works but let's say that you have xss</font>

190
00:09:39,019 --> 00:09:46,249
vulnerability on your page and the

191
00:09:41,989 --> 00:09:48,889
attacker wants to inject some malicious

192
00:09:46,249 --> 00:09:50,899
code like this he breaks out like the

193
00:09:48,889 --> 00:09:53,419
usual reflected XSS right it tries to

194
00:09:50,899 --> 00:09:55,160
<font color="#E5E5E5">break out and then it does for some</font>

195
00:09:53,419 --> 00:09:57,109
reason you<font color="#E5E5E5"> want</font><font color="#CCCCCC"> to I know like it's a</font>

196
00:09:55,160 --> 00:09:59,299
long<font color="#E5E5E5"> scraped along payload he wants to</font>

197
00:09:57,109 --> 00:10:01,639
source it from attacker com this would

198
00:09:59,299 --> 00:10:03,108
not work because the source is not

199
00:10:01,639 --> 00:10:06,489
whitelisted attacker com is not

200
00:10:03,109 --> 00:10:08,749
<font color="#CCCCCC">wait-listed so it would block the</font>

201
00:10:06,489 --> 00:10:12,319
fetching and execution of the script and

202
00:10:08,749 --> 00:10:14,479
it would also send a report to you the

203
00:10:12,319 --> 00:10:17,839
same if they put in line something<font color="#E5E5E5"> like</font>

204
00:10:14,479 --> 00:10:22,850
script alert 42 so inline scripts are

205
00:10:17,839 --> 00:10:24,739
not allowed by default right and<font color="#E5E5E5"> you see</font>

206
00:10:22,850 --> 00:10:26,359
later than the two in order<font color="#CCCCCC"> to allow</font>

207
00:10:24,739 --> 00:10:28,399
inline scripts you have to put a

208
00:10:26,359 --> 00:10:30,139
directory which is sorry a source

209
00:10:28,399 --> 00:10:32,539
expression which is called unsafe inline

210
00:10:30,139 --> 00:10:34,879
and it's called unsafe for a reason you

211
00:10:32,539 --> 00:10:38,109
should not do that because<font color="#CCCCCC"> otherwise you</font>

212
00:10:34,879 --> 00:10:40,129
basically<font color="#E5E5E5"> forgo all the benefits and</font>

213
00:10:38,109 --> 00:10:41,509
also in this case it is blocked because

214
00:10:40,129 --> 00:10:46,369
inline scripts are not allowed and a

215
00:10:41,509 --> 00:10:48,559
report<font color="#E5E5E5"> is sent your way</font><font color="#CCCCCC"> okay so going</font><font color="#E5E5E5"> to</font>

216
00:10:46,369 --> 00:10:52,179
show you very very<font color="#E5E5E5"> quickly a demo and</font>

217
00:10:48,559 --> 00:10:57,769
then<font color="#E5E5E5"> I'm going to look us going to talk</font>

218
00:10:52,179 --> 00:11:00,679
more<font color="#E5E5E5"> okay so this is a very simple web</font>

219
00:10:57,769 --> 00:11:03,889
application to test this so we can

220
00:11:00,679 --> 00:11:06,108
specify contest QT policy there and here

221
00:11:03,889 --> 00:11:09,619
we<font color="#CCCCCC"> have</font><font color="#E5E5E5"> a live HTML editor so you'll see</font>

222
00:11:06,109 --> 00:11:10,460
the changes working what gets blocked

223
00:11:09,619 --> 00:11:13,100
and

224
00:11:10,460 --> 00:11:15,020
and at the bottom you have a chrome

225
00:11:13,100 --> 00:11:19,190
console right so you see what gets

226
00:11:15,020 --> 00:11:23,960
blocked and what does not<font color="#CCCCCC"> okay so let's</font>

227
00:11:19,190 --> 00:11:27,020
say you put IMG SRC self policy which

228
00:11:23,960 --> 00:11:30,350
means I'm just interested about images

229
00:11:27,020 --> 00:11:32,870
just allow images to be from the same

230
00:11:30,350 --> 00:11:42,620
origin and then here I<font color="#E5E5E5"> put a cat image</font>

231
00:11:32,870 --> 00:11:46,040
which is IMG SRC cat<font color="#CCCCCC"> jpg and it works so</font>

232
00:11:42,620 --> 00:11:49,070
the cat is playing hide and seek we have

233
00:11:46,040 --> 00:11:51,130
internet probably<font color="#E5E5E5"> don't have internet do</font>

234
00:11:49,070 --> 00:11:51,130
I

235
00:11:56,990 --> 00:12:05,930
<font color="#E5E5E5">I do have internet but I don't like the</font>

236
00:12:03,320 --> 00:12:06,980
DNS is failing for some reason that

237
00:12:05,930 --> 00:12:09,140
should work more like it was the

238
00:12:06,980 --> 00:12:11,690
extension right<font color="#CCCCCC"> I think so I really hope</font>

239
00:12:09,140 --> 00:12:13,720
so<font color="#CCCCCC"> okay so we'll try again</font><font color="#E5E5E5"> this is the</font>

240
00:12:11,690 --> 00:12:17,390
beauty<font color="#CCCCCC"> of life demons so witty what</font>

241
00:12:13,720 --> 00:12:20,959
security we have some extensions and out

242
00:12:17,390 --> 00:12:22,970
browsers<font color="#CCCCCC"> okay this was probably a shady</font>

243
00:12:20,959 --> 00:12:26,540
dns and<font color="#E5E5E5"> this the conference so it was</font>

244
00:12:22,970 --> 00:12:29,839
<font color="#E5E5E5">blocking it okay so IMG SRC kappa jpg</font>

245
00:12:26,540 --> 00:12:34,730
and it works see the cat<font color="#E5E5E5"> okay thank you</font>

246
00:12:29,839 --> 00:12:36,680
thank you so much thank you like this we

247
00:12:34,730 --> 00:12:38,600
tried like really hard to<font color="#CCCCCC"> make this</font><font color="#E5E5E5"> cat</font>

248
00:12:36,680 --> 00:12:40,939
appear it was not revealed was not

249
00:12:38,600 --> 00:12:42,380
really we also spent a significant

250
00:12:40,940 --> 00:12:44,720
amount of time especially look as I

251
00:12:42,380 --> 00:12:45,830
think you finding the picture<font color="#E5E5E5"> I finding</font>

252
00:12:44,720 --> 00:12:48,320
<font color="#E5E5E5">the picture because it's really</font>

253
00:12:45,830 --> 00:12:53,060
<font color="#E5E5E5">important so let's say you want to to</font>

254
00:12:48,320 --> 00:12:54,970
load like a cat but from let's say to

255
00:12:53,060 --> 00:13:01,010
dps right because I want to be secure

256
00:12:54,970 --> 00:13:04,040
every evil cat calm cat the<font color="#E5E5E5"> jpg oops it</font>

257
00:13:01,010 --> 00:13:09,200
doesn't not work it says down there can

258
00:13:04,040 --> 00:13:11,390
you yes you can<font color="#E5E5E5"> refuse</font><font color="#CCCCCC"> to load the image</font>

259
00:13:09,200 --> 00:13:14,959
because it violates the console security

260
00:13:11,390 --> 00:13:25,069
policy IMG SRC self<font color="#E5E5E5"> okay so this is like</font>

261
00:13:14,959 --> 00:13:29,119
a toy example of course so yes the

262
00:13:25,070 --> 00:13:30,380
script<font color="#CCCCCC"> right so at the same time let's</font>

263
00:13:29,120 --> 00:13:40,430
play a little bit to the script source

264
00:13:30,380 --> 00:13:44,000
so if you put script source self you

265
00:13:40,430 --> 00:13:47,899
could do something<font color="#CCCCCC"> like if it existed</font>

266
00:13:44,000 --> 00:13:49,640
script SSC<font color="#E5E5E5"> jes</font><font color="#CCCCCC"> X 0 GS because it's the</font>

267
00:13:47,899 --> 00:13:50,839
same origin if<font color="#CCCCCC"> you'd return a 404 but as</font>

268
00:13:49,640 --> 00:13:53,870
you can see it fetches it and it

269
00:13:50,839 --> 00:13:56,690
executed but what you<font color="#E5E5E5"> can't do is inject</font>

270
00:13:53,870 --> 00:13:58,550
code like this alert one it will not

271
00:13:56,690 --> 00:13:59,660
work it will say it refuse to execute

272
00:13:58,550 --> 00:14:04,990
inline script so if you have an

273
00:13:59,660 --> 00:14:06,709
injection<font color="#CCCCCC"> this get blocked and here I</font>

274
00:14:04,990 --> 00:14:10,920
passed

275
00:14:06,709 --> 00:14:14,310
awesome yeah thank you very much Mickey

276
00:14:10,920 --> 00:14:17,189
for<font color="#E5E5E5"> the nice introduction so most</font>

277
00:14:14,310 --> 00:14:19,439
important takeaway CSP could be like a

278
00:14:17,190 --> 00:14:21,450
really really important mitigation

279
00:14:19,440 --> 00:14:22,950
<font color="#E5E5E5">against cross</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> scripting right because</font>

280
00:14:21,450 --> 00:14:24,600
<font color="#E5E5E5">if you can</font><font color="#CCCCCC"> inject Carver trips</font>

281
00:14:22,950 --> 00:14:26,760
<font color="#E5E5E5">JavaScript and it does not execute</font>

282
00:14:24,600 --> 00:14:29,930
that's<font color="#E5E5E5"> actually really cool and</font>

283
00:14:26,760 --> 00:14:33,600
unfortunately XSS is still one<font color="#CCCCCC"> of the</font>

284
00:14:29,930 --> 00:14:35,670
biggest issues in the<font color="#E5E5E5"> Weber</font><font color="#CCCCCC"> all right</font>

285
00:14:33,600 --> 00:14:39,180
like around for many<font color="#CCCCCC"> years but</font><font color="#E5E5E5"> still</font>

286
00:14:35,670 --> 00:14:45,149
kind of unfixed and CSP has a lot of

287
00:14:39,180 --> 00:14:48,290
potential but as it's currently is and

288
00:14:45,149 --> 00:14:51,870
like how the current design works it is

289
00:14:48,290 --> 00:14:53,160
just mostly useless i would say there

290
00:14:51,870 --> 00:14:55,920
are some corner cases where it makes

291
00:14:53,160 --> 00:14:57,510
sense right now but we have two examples

292
00:14:55,920 --> 00:15:01,110
here<font color="#E5E5E5"> that one is twitter com and the</font>

293
00:14:57,510 --> 00:15:03,480
second one is gmail.com both content

294
00:15:01,110 --> 00:15:05,880
security policies are massive right in

295
00:15:03,480 --> 00:15:09,149
size there very long it is super hard to

296
00:15:05,880 --> 00:15:11,310
come<font color="#CCCCCC"> up with</font><font color="#E5E5E5"> the white list entries as a</font>

297
00:15:09,149 --> 00:15:14,100
developer right you have to<font color="#CCCCCC"> go through</font>

298
00:15:11,310 --> 00:15:15,569
every single<font color="#E5E5E5"> page of your site and make</font>

299
00:15:14,100 --> 00:15:17,250
sure<font color="#CCCCCC"> that you write lists all endpoints</font>

300
00:15:15,570 --> 00:15:20,579
otherwise we'll have breakages which is

301
00:15:17,250 --> 00:15:22,620
very bad<font color="#E5E5E5"> and once you have that right</font>

302
00:15:20,579 --> 00:15:24,779
you made may end up with something<font color="#E5E5E5"> like</font>

303
00:15:22,620 --> 00:15:26,370
<font color="#E5E5E5">that right to say a colossus and if</font>

304
00:15:24,779 --> 00:15:29,100
<font color="#E5E5E5">something changes the site will break</font>

305
00:15:26,370 --> 00:15:31,110
maybe as well so maybe<font color="#E5E5E5"> it's a fair trade</font>

306
00:15:29,100 --> 00:15:34,860
off if you gain some security right but

307
00:15:31,110 --> 00:15:37,529
unfortunately<font color="#CCCCCC"> these twos CSPs which are</font>

308
00:15:34,860 --> 00:15:41,760
like real<font color="#CCCCCC"> CSPs are can be</font><font color="#E5E5E5"> trivially</font>

309
00:15:37,529 --> 00:15:43,439
bypassed in certain ways and<font color="#E5E5E5"> that's the</font>

310
00:15:41,760 --> 00:15:46,020
case<font color="#E5E5E5"> for most of the CSP is in the</font>

311
00:15:43,440 --> 00:15:48,870
internet like we did a big study and are

312
00:15:46,020 --> 00:15:50,850
in total<font color="#E5E5E5"> like more than</font><font color="#CCCCCC"> ninety-four</font>

313
00:15:48,870 --> 00:15:53,100
percent<font color="#CCCCCC"> of CSPs like really trivially by</font>

314
00:15:50,850 --> 00:15:54,480
possible and we've<font color="#CCCCCC"> truly by</font><font color="#E5E5E5"> possible</font><font color="#CCCCCC"> I</font>

315
00:15:53,100 --> 00:15:57,240
mean like you find one vulnerability

316
00:15:54,480 --> 00:15:59,730
like that in the CSP<font color="#E5E5E5"> and it's like a</font>

317
00:15:57,240 --> 00:16:04,110
binary fail model right you find one<font color="#E5E5E5"> and</font>

318
00:15:59,730 --> 00:16:07,970
the CSP can be bypassed so we'll go into

319
00:16:04,110 --> 00:16:11,430
detail a bit like what is<font color="#CCCCCC"> usually in</font>

320
00:16:07,970 --> 00:16:12,810
<font color="#CCCCCC">CSPs that make them</font><font color="#E5E5E5"> by possible to some</font>

321
00:16:11,430 --> 00:16:16,439
trivial examples there's some more

322
00:16:12,810 --> 00:16:18,599
<font color="#CCCCCC">trickier ones in this case the most</font>

323
00:16:16,440 --> 00:16:20,130
trivial one is<font color="#E5E5E5"> like unsafe inline as we</font>

324
00:16:18,600 --> 00:16:22,440
saw before if you allow that

325
00:16:20,130 --> 00:16:25,530
you can just execute inline scripts and

326
00:16:22,440 --> 00:16:28,650
if an attacker injects an inline script

327
00:16:25,530 --> 00:16:30,600
right then we'll just execute as well so

328
00:16:28,650 --> 00:16:33,000
the CSP does not provide<font color="#CCCCCC"> you any</font>

329
00:16:30,600 --> 00:16:35,340
protection against unwanted script

330
00:16:33,000 --> 00:16:39,030
execution which is in<font color="#E5E5E5"> our opinion one of</font>

331
00:16:35,340 --> 00:16:42,120
<font color="#E5E5E5">the most important you know properties</font>

332
00:16:39,030 --> 00:16:46,290
that CSP can offer so you will see many

333
00:16:42,120 --> 00:16:48,240
<font color="#CCCCCC">CSPs like that script source some white</font>

334
00:16:46,290 --> 00:16:53,880
list or whatever and then just unsafe

335
00:16:48,240 --> 00:16:55,230
inline<font color="#E5E5E5"> and then object</font><font color="#CCCCCC"> source none so as</font>

336
00:16:53,880 --> 00:16:58,620
you already<font color="#E5E5E5"> saw before this is</font><font color="#CCCCCC"> very</font>

337
00:16:55,230 --> 00:17:01,080
trivial to bypass right you just inject

338
00:16:58,620 --> 00:17:03,630
in some way XSS vector like<font color="#CCCCCC"> breakout and</font>

339
00:17:01,080 --> 00:17:05,819
then to script alert and it's like if

340
00:17:03,630 --> 00:17:07,800
there is no CSP in terms of prevention

341
00:17:05,819 --> 00:17:09,449
of script execution same holds<font color="#CCCCCC"> true if</font>

342
00:17:07,800 --> 00:17:13,669
there's no script source directive and

343
00:17:09,449 --> 00:17:13,670
this is in the default sauce directive

344
00:17:13,790 --> 00:17:21,060
other common mistakes if you<font color="#E5E5E5"> use stuff</font>

345
00:17:17,880 --> 00:17:24,839
like wild cards or URL schemes like

346
00:17:21,060 --> 00:17:27,899
<font color="#E5E5E5">HTTPS HTTP or data an attacker could</font>

347
00:17:24,839 --> 00:17:32,310
just you know injects a script talk like

348
00:17:27,900 --> 00:17:35,310
that<font color="#E5E5E5"> and source the script from whatever</font>

349
00:17:32,310 --> 00:17:36,629
domain he controls right<font color="#E5E5E5"> or if he's too</font>

350
00:17:35,310 --> 00:17:39,300
lazy to buy a domain he could<font color="#E5E5E5"> even use</font>

351
00:17:36,630 --> 00:17:42,000
maybe in the second case data URL right

352
00:17:39,300 --> 00:17:47,220
and just shipped a JavaScript right away

353
00:17:42,000 --> 00:17:48,930
with the the payload so the same

354
00:17:47,220 --> 00:17:56,100
actually<font color="#CCCCCC"> holds true for object sauce as</font>

355
00:17:48,930 --> 00:17:59,670
well right so this was very trivial so

356
00:17:56,100 --> 00:18:03,600
far right now<font color="#CCCCCC"> it's getting</font><font color="#E5E5E5"> a little bit</font>

357
00:17:59,670 --> 00:18:05,880
more<font color="#CCCCCC"> interesting a lot of people make</font>

358
00:18:03,600 --> 00:18:07,709
mistakes on coming<font color="#E5E5E5"> up</font><font color="#CCCCCC"> with a policy for</font>

359
00:18:05,880 --> 00:18:10,320
example this<font color="#E5E5E5"> policy is insecure because</font>

360
00:18:07,710 --> 00:18:12,990
they somehow<font color="#CCCCCC"> restrict the script source</font>

361
00:18:10,320 --> 00:18:16,860
to self which can be<font color="#E5E5E5"> okay but you forgot</font>

362
00:18:12,990 --> 00:18:18,330
to<font color="#E5E5E5"> add objects or active since there's</font>

363
00:18:16,860 --> 00:18:21,209
no default sauce directive either and

364
00:18:18,330 --> 00:18:24,389
<font color="#CCCCCC">attacker could just inject like flash</font>

365
00:18:21,210 --> 00:18:26,160
file and allow script access for that

366
00:18:24,390 --> 00:18:28,620
flash file right so for example

367
00:18:26,160 --> 00:18:31,350
something like<font color="#E5E5E5"> that right fetches a</font>

368
00:18:28,620 --> 00:18:33,899
flash file the flash has javascript

369
00:18:31,350 --> 00:18:36,179
execution capabilities will fly

370
00:18:33,900 --> 00:18:44,090
param name allowscriptaccess you in

371
00:18:36,180 --> 00:18:44,090
check that and CSP is bypassed again so

372
00:18:44,420 --> 00:18:53,100
even more less trivial<font color="#CCCCCC"> I would say is</font>

373
00:18:47,250 --> 00:18:56,280
the keyword self itself it might be<font color="#E5E5E5"> okay</font>

374
00:18:53,100 --> 00:18:59,010
to use it in some places but if you're

375
00:18:56,280 --> 00:19:00,510
on a big domain with many other<font color="#E5E5E5"> products</font>

376
00:18:59,010 --> 00:19:03,480
or if you're hosting like

377
00:19:00,510 --> 00:19:06,750
user-controlled stuff somewhere it is

378
00:19:03,480 --> 00:19:08,550
<font color="#CCCCCC">usually a very bad idea to</font><font color="#E5E5E5"> use self for</font>

379
00:19:06,750 --> 00:19:10,170
example if you take google.com just like

380
00:19:08,550 --> 00:19:12,240
so many products and if you're like

381
00:19:10,170 --> 00:19:14,490
whitelist google com it's already game

382
00:19:12,240 --> 00:19:18,390
over for a reason will show you<font color="#E5E5E5"> in a</font>

383
00:19:14,490 --> 00:19:22,280
second also same holds true for<font color="#E5E5E5"> object</font>

384
00:19:18,390 --> 00:19:24,750
source again so this is<font color="#CCCCCC"> like a made-up</font>

385
00:19:22,280 --> 00:19:27,330
example right if you have like an upload

386
00:19:24,750 --> 00:19:30,120
on the<font color="#E5E5E5"> same domain you could just maybe</font>

387
00:19:27,330 --> 00:19:36,449
use evil cat cheap back dot GS and

388
00:19:30,120 --> 00:19:40,800
source that so and now from the<font color="#E5E5E5"> mistakes</font>

389
00:19:36,450 --> 00:19:43,440
to the actual bypasses and these

390
00:19:40,800 --> 00:19:48,270
bypasses from now on are also the reason

391
00:19:43,440 --> 00:19:49,860
why the current CSP model is kind of

392
00:19:48,270 --> 00:19:53,639
failing<font color="#CCCCCC"> I think in terms of security</font>

393
00:19:49,860 --> 00:19:57,419
because almost everyone uses whitelists

394
00:19:53,640 --> 00:20:00,630
currently and unfortunately they're

395
00:19:57,420 --> 00:20:03,750
kinda inherently flawed so for<font color="#E5E5E5"> example</font>

396
00:20:00,630 --> 00:20:07,380
<font color="#CCCCCC">JSONP endpoints does it</font><font color="#E5E5E5"> wanna know what</font>

397
00:20:03,750 --> 00:20:12,750
Jason<font color="#CCCCCC"> PN point is I might give a quick</font>

398
00:20:07,380 --> 00:20:14,790
example so it's basically a JavaScript

399
00:20:12,750 --> 00:20:16,320
object notation with padding I guess

400
00:20:14,790 --> 00:20:20,040
<font color="#CCCCCC">that doesn't</font><font color="#E5E5E5"> explain it very well right</font>

401
00:20:16,320 --> 00:20:22,980
but it's basically<font color="#E5E5E5"> a URL and just</font>

402
00:20:20,040 --> 00:20:27,780
parameter<font color="#E5E5E5"> with a call back and you</font>

403
00:20:22,980 --> 00:20:31,250
specify<font color="#CCCCCC"> for example I don't know load it</font>

404
00:20:27,780 --> 00:20:36,020
right as a parameter and then the

405
00:20:31,250 --> 00:20:38,760
response<font color="#E5E5E5"> will have loaded and some other</font>

406
00:20:36,020 --> 00:20:40,470
JavaScript object as<font color="#E5E5E5"> pass this parameter</font>

407
00:20:38,760 --> 00:20:42,600
to the call you specified so it's

408
00:20:40,470 --> 00:20:44,520
basically JavaScript and you can control

409
00:20:42,600 --> 00:20:47,730
the very first part of it like the

410
00:20:44,520 --> 00:20:51,090
function so that's very<font color="#E5E5E5"> nice in</font><font color="#CCCCCC"> it</font>

411
00:20:47,730 --> 00:20:53,610
case of CSP because you could for

412
00:20:51,090 --> 00:20:56,970
example to something<font color="#E5E5E5"> like</font><font color="#CCCCCC"> that there's a</font>

413
00:20:53,610 --> 00:20:59,000
<font color="#CCCCCC">JSONP n point invite Lisa calm and there</font>

414
00:20:56,970 --> 00:21:01,440
are plenty<font color="#E5E5E5"> of Jason</font><font color="#CCCCCC"> P n points in like</font>

415
00:20:59,000 --> 00:21:03,480
<font color="#CCCCCC">CDNs and popular domains which people</font>

416
00:21:01,440 --> 00:21:04,950
usually white list and you can do

417
00:21:03,480 --> 00:21:07,950
<font color="#E5E5E5">something like that you have like Jason</font>

418
00:21:04,950 --> 00:21:17,910
<font color="#E5E5E5">P and then you say</font><font color="#CCCCCC"> kopek equals alert</font>

419
00:21:07,950 --> 00:21:20,400
what happens is the following so CSP

420
00:21:17,910 --> 00:21:23,430
says<font color="#CCCCCC"> okay whitelisted calm is white list</font>

421
00:21:20,400 --> 00:21:27,300
it so I allow<font color="#CCCCCC"> it white listed calm</font>

422
00:21:23,430 --> 00:21:29,340
response is alert<font color="#CCCCCC"> one see me call on</font><font color="#E5E5E5"> you</font>

423
00:21:27,300 --> 00:21:31,230
and<font color="#E5E5E5"> then some stuff which</font><font color="#CCCCCC"> is which we</font>

424
00:21:29,340 --> 00:21:34,649
provided or the attacker provided in the

425
00:21:31,230 --> 00:21:37,950
callback parameter and if you source

426
00:21:34,650 --> 00:21:40,920
that in your page it will look like<font color="#CCCCCC"> a</font>

427
00:21:37,950 --> 00:21:43,710
<font color="#CCCCCC">legit script right and you</font><font color="#E5E5E5"> again can</font>

428
00:21:40,920 --> 00:21:47,130
fully control the<font color="#E5E5E5"> JavaScript that is</font>

429
00:21:43,710 --> 00:21:51,270
executing in the origin of the bypass

430
00:21:47,130 --> 00:21:53,850
vault com site sometimes<font color="#CCCCCC"> JSONP endpoints</font>

431
00:21:51,270 --> 00:21:55,350
are somehow restricted because it's not

432
00:21:53,850 --> 00:21:57,629
so great if you can fully control the

433
00:21:55,350 --> 00:22:01,610
character set so this sometimes just you

434
00:21:57,630 --> 00:22:04,140
know allow you alphanumeric sand dots

435
00:22:01,610 --> 00:22:06,659
makes it harder but there's a very

436
00:22:04,140 --> 00:22:08,490
<font color="#CCCCCC">interesting paper on some which means</font>

437
00:22:06,660 --> 00:22:11,220
like same origin methyl execution and

438
00:22:08,490 --> 00:22:15,120
you basically can use like a couple of

439
00:22:11,220 --> 00:22:17,580
these to simulate like certain clicks on

440
00:22:15,120 --> 00:22:20,280
a page and by<font color="#E5E5E5"> that</font><font color="#CCCCCC"> you can represent</font>

441
00:22:17,580 --> 00:22:22,500
like any user interaction with the page

442
00:22:20,280 --> 00:22:24,810
and also like cross page so it's<font color="#E5E5E5"> like</font>

443
00:22:22,500 --> 00:22:29,460
very advanced what works like a charm

444
00:22:24,810 --> 00:22:32,780
and it's<font color="#E5E5E5"> actually really nice bypass so</font>

445
00:22:29,460 --> 00:22:35,100
we'll see a demo of that by Mickey and

446
00:22:32,780 --> 00:22:38,070
yes<font color="#CCCCCC"> we'll continue in a second with the</font>

447
00:22:35,100 --> 00:22:44,340
other stuff so is everything<font color="#E5E5E5"> kind of</font>

448
00:22:38,070 --> 00:22:48,090
<font color="#E5E5E5">clear so far yes good</font><font color="#CCCCCC"> okay so as Lucas</font>

449
00:22:44,340 --> 00:22:49,980
said Jason P is really a problem reason

450
00:22:48,090 --> 00:22:51,899
p is basically present every time<font color="#E5E5E5"> you</font>

451
00:22:49,980 --> 00:22:55,110
see called back in a URL basically

452
00:22:51,900 --> 00:22:58,170
that's very likely<font color="#E5E5E5"> JSON p so basically I</font>

453
00:22:55,110 --> 00:23:00,459
you can control the first bites of the

454
00:22:58,170 --> 00:23:04,549
response

455
00:23:00,460 --> 00:23:06,980
within the URL right so often<font color="#CCCCCC"> times you</font>

456
00:23:04,549 --> 00:23:09,860
can't control the fool you can inject

457
00:23:06,980 --> 00:23:12,620
the fool everyone but almost every time

458
00:23:09,860 --> 00:23:16,279
you can do something<font color="#E5E5E5"> like a gadget a</font>

459
00:23:12,620 --> 00:23:18,199
chain of user interaction right like

460
00:23:16,279 --> 00:23:20,360
click Submit you cannot just click you

461
00:23:18,200 --> 00:23:22,370
can also submit forms you can like<font color="#E5E5E5"> two</font>

462
00:23:20,360 --> 00:23:25,189
other things you can open frames and

463
00:23:22,370 --> 00:23:31,928
control them it's pretty advanced so in

464
00:23:25,190 --> 00:23:31,929
this case I want to specify a policy

465
00:23:32,320 --> 00:23:40,939
write a policy let's say yeah like<font color="#E5E5E5"> this</font>

466
00:23:37,309 --> 00:23:43,668
so in this case we have a<font color="#E5E5E5"> Google Maps</font>

467
00:23:40,940 --> 00:23:47,269
widget<font color="#E5E5E5"> okay this is like over Absalom</font>

468
00:23:43,669 --> 00:23:48,549
see that's a widget yeah and I had to

469
00:23:47,269 --> 00:23:51,590
put unsafe inline because i have this

470
00:23:48,549 --> 00:23:54,529
script lock here which is in line right

471
00:23:51,590 --> 00:23:57,559
but i don't really need it right now so

472
00:23:54,529 --> 00:24:05,389
what I want to do is I just<font color="#E5E5E5"> want to</font>

473
00:23:57,559 --> 00:24:07,580
focus<font color="#E5E5E5"> on this part so just ignore the</font>

474
00:24:05,389 --> 00:24:12,139
warnings right now the important<font color="#CCCCCC"> thing</font>

475
00:24:07,580 --> 00:24:13,789
<font color="#E5E5E5">is if somebody just white lists Maps or</font>

476
00:24:12,139 --> 00:24:18,590
Google API<font color="#E5E5E5"> scom because he wants to</font><font color="#CCCCCC"> use</font>

477
00:24:13,789 --> 00:24:21,039
<font color="#CCCCCC">the Maps API widget</font><font color="#E5E5E5"> okay look secure</font>

478
00:24:18,590 --> 00:24:24,289
right then it uses it<font color="#E5E5E5"> but an attacker</font>

479
00:24:21,039 --> 00:24:26,509
could just do<font color="#CCCCCC"> this could</font><font color="#E5E5E5"> just inject</font>

480
00:24:24,289 --> 00:24:28,669
like it<font color="#CCCCCC"> is an exercise</font><font color="#E5E5E5"> right so it does</font>

481
00:24:26,509 --> 00:24:31,460
<font color="#E5E5E5">something like like this and then it</font>

482
00:24:28,669 --> 00:24:36,559
does script SRC maps we will be<font color="#CCCCCC"> eyes</font>

483
00:24:31,460 --> 00:24:40,220
<font color="#CCCCCC">with calm / Maps API Jes</font><font color="#E5E5E5"> and cook back</font>

484
00:24:36,559 --> 00:24:41,928
you have<font color="#CCCCCC"> to</font><font color="#E5E5E5"> move to</font><font color="#CCCCCC"> am person right</font>

485
00:24:40,220 --> 00:24:43,639
thank you honey don't need<font color="#CCCCCC"> your person</font>

486
00:24:41,929 --> 00:24:48,769
here because the first<font color="#CCCCCC"> parameter called</font>

487
00:24:43,639 --> 00:24:52,070
back and you can put something<font color="#CCCCCC"> here so</font>

488
00:24:48,769 --> 00:24:54,110
for example here so<font color="#E5E5E5"> scripts execution is</font>

489
00:24:52,070 --> 00:24:56,269
bound and locked to maps google api so

490
00:24:54,110 --> 00:25:01,729
calm but an attacker can put alert here

491
00:24:56,269 --> 00:25:03,980
and it<font color="#CCCCCC"> will pop right so alert is a kind</font>

492
00:25:01,730 --> 00:25:05,899
of<font color="#E5E5E5"> toy example doesn't mean anything but</font>

493
00:25:03,980 --> 00:25:08,269
just want<font color="#E5E5E5"> to prove like execution of</font>

494
00:25:05,899 --> 00:25:12,739
arbitrary JavaScript so what you can do

495
00:25:08,269 --> 00:25:13,830
is for<font color="#CCCCCC"> example x don't click now it will</font>

496
00:25:12,740 --> 00:25:17,250
say in the

497
00:25:13,830 --> 00:25:18,870
that egg in sorry in this case if we<font color="#E5E5E5"> say</font>

498
00:25:17,250 --> 00:25:23,940
<font color="#CCCCCC">it will complain because the ex doesn't</font>

499
00:25:18,870 --> 00:25:26,189
exist but so if you had a like button or

500
00:25:23,940 --> 00:25:27,750
an element in the dome with the idx you

501
00:25:26,190 --> 00:25:30,210
would be<font color="#CCCCCC"> able</font><font color="#E5E5E5"> to click it right and so</font>

502
00:25:27,750 --> 00:25:31,649
on<font color="#E5E5E5"> and you can include</font><font color="#CCCCCC"> this thing this</font>

503
00:25:30,210 --> 00:25:33,480
thing every time you want you can do it

504
00:25:31,649 --> 00:25:37,049
two or three times right you're<font color="#CCCCCC"> not</font>

505
00:25:33,480 --> 00:25:43,529
limited normally so that's<font color="#E5E5E5"> pretty bad</font>

506
00:25:37,049 --> 00:25:46,080
and we're gonna<font color="#CCCCCC"> see more I think bit</font>

507
00:25:43,529 --> 00:25:51,960
later yo bit later awesome thank you

508
00:25:46,080 --> 00:25:53,970
much so yes so the<font color="#E5E5E5"> advice would be don't</font>

509
00:25:51,960 --> 00:25:57,779
Whiteley's chasing p<font color="#E5E5E5"> endpoints right</font>

510
00:25:53,970 --> 00:26:00,510
which is tricky because they're in many

511
00:25:57,779 --> 00:26:03,990
places like usually<font color="#CCCCCC"> over all the CD ends</font>

512
00:26:00,510 --> 00:26:05,460
are right and usually<font color="#CCCCCC"> you actually want</font>

513
00:26:03,990 --> 00:26:08,880
to<font color="#CCCCCC"> buy this CD ends because you're</font>

514
00:26:05,460 --> 00:26:11,580
sourcing stuff from them right so you

515
00:26:08,880 --> 00:26:14,370
cannot<font color="#E5E5E5"> really sometimes get fully rid of</font>

516
00:26:11,580 --> 00:26:16,168
them and sometimes you actually need the

517
00:26:14,370 --> 00:26:18,500
<font color="#CCCCCC">end point with a</font><font color="#E5E5E5"> JSONP for example if</font>

518
00:26:16,169 --> 00:26:23,720
you want to use the maps which it right

519
00:26:18,500 --> 00:26:27,510
but later more another nice bypass is

520
00:26:23,720 --> 00:26:31,590
angular libraries if<font color="#CCCCCC"> whitelist com are</font>

521
00:26:27,510 --> 00:26:34,350
hosting is hosting some angular library

522
00:26:31,590 --> 00:26:36,539
an attacker could just include that

523
00:26:34,350 --> 00:26:42,000
library because<font color="#E5E5E5"> it's might listed right</font>

524
00:26:36,539 --> 00:26:44,700
and then execute that and used a very

525
00:26:42,000 --> 00:26:47,490
powerful sources expression of angular

526
00:26:44,700 --> 00:26:49,080
right you can already do some

527
00:26:47,490 --> 00:26:52,289
interesting<font color="#E5E5E5"> stuff with that in the scope</font>

528
00:26:49,080 --> 00:26:54,570
right and maybe also click stuff but you

529
00:26:52,289 --> 00:26:59,460
could also use like an angular sandbox

530
00:26:54,570 --> 00:27:03,809
escape right and do<font color="#E5E5E5"> like a dollar</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> ban</font>

531
00:26:59,460 --> 00:27:11,059
tot few dot alert and have like full

532
00:27:03,809 --> 00:27:11,059
<font color="#CCCCCC">javascript script execution again so and</font>

533
00:27:11,179 --> 00:27:15,630
what is basically happening it's not

534
00:27:14,010 --> 00:27:17,850
hard right like whitelisted calm is

535
00:27:15,630 --> 00:27:20,250
still white listed of course so it can

536
00:27:17,850 --> 00:27:24,000
load the angular and then you just

537
00:27:20,250 --> 00:27:26,309
inject some angular markup and it will

538
00:27:24,000 --> 00:27:27,600
execute and there's<font color="#E5E5E5"> like you know dozens</font>

539
00:27:26,309 --> 00:27:30,660
of sandbox

540
00:27:27,600 --> 00:27:34,678
escapes ran angular through the dollar

541
00:27:30,660 --> 00:27:38,700
on that curried call will give you the I

542
00:27:34,679 --> 00:27:40,140
think the window<font color="#E5E5E5"> we object so this for</font>

543
00:27:38,700 --> 00:27:43,380
example works if just like also

544
00:27:40,140 --> 00:27:45,929
prototype GS these examples<font color="#E5E5E5"> are taken</font>

545
00:27:43,380 --> 00:27:49,140
from q50<font color="#CCCCCC"> fries mini challenge site which</font>

546
00:27:45,929 --> 00:27:50,640
is<font color="#CCCCCC"> a</font><font color="#E5E5E5"> really good source to get started</font>

547
00:27:49,140 --> 00:27:53,370
with reading that kind of stuff they

548
00:27:50,640 --> 00:27:56,190
stay just like a full collection of

549
00:27:53,370 --> 00:27:59,449
sandbox escapes and CSP<font color="#CCCCCC"> pi</font><font color="#E5E5E5"> passes so</font>

550
00:27:56,190 --> 00:28:05,220
highly recommended to read that is<font color="#CCCCCC"> Rico</font>

551
00:27:59,450 --> 00:28:07,169
yeah so the thing<font color="#CCCCCC"> is again angular</font>

552
00:28:05,220 --> 00:28:08,429
libraries are also hosted on CD ends<font color="#E5E5E5"> and</font>

553
00:28:07,169 --> 00:28:10,580
this<font color="#E5E5E5"> kind of stuff</font><font color="#CCCCCC"> and maybe you host it</font>

554
00:28:08,429 --> 00:28:15,600
yourself when you same domain right so

555
00:28:10,580 --> 00:28:18,960
that's a bit<font color="#E5E5E5"> unfortunate and then I mean</font>

556
00:28:15,600 --> 00:28:23,730
in theory you<font color="#CCCCCC"> could maybe white list all</font>

557
00:28:18,960 --> 00:28:26,690
files explicitly like the full path and

558
00:28:23,730 --> 00:28:31,409
the<font color="#CCCCCC"> file name CSP lets you do that but</font>

559
00:28:26,690 --> 00:28:33,929
first it's<font color="#E5E5E5"> really hard to get all the</font>

560
00:28:31,409 --> 00:28:36,240
files listed if you have a big

561
00:28:33,929 --> 00:28:37,890
application<font color="#E5E5E5"> sometimes they're the paths</font>

562
00:28:36,240 --> 00:28:41,669
are dynamic so you can't even<font color="#E5E5E5"> do the</font>

563
00:28:37,890 --> 00:28:43,380
full file listing it<font color="#E5E5E5"> also will lead to</font>

564
00:28:41,669 --> 00:28:46,320
like you see speed it is<font color="#E5E5E5"> like probably</font>

565
00:28:43,380 --> 00:28:50,850
two pages long and they keep changing

566
00:28:46,320 --> 00:28:53,039
right and this like really not very well

567
00:28:50,850 --> 00:28:55,199
decide will probably break eventually at

568
00:28:53,039 --> 00:28:57,809
some point in time but assume you can do

569
00:28:55,200 --> 00:29:02,460
it right you for example<font color="#E5E5E5"> vital is like</font>

570
00:28:57,809 --> 00:29:06,389
totally secure GS which is a script you

571
00:29:02,460 --> 00:29:09,809
trust and you have a second origin in

572
00:29:06,390 --> 00:29:13,350
your scripts or swipe list that has an

573
00:29:09,809 --> 00:29:15,539
open redirect and so what can an

574
00:29:13,350 --> 00:29:18,209
attacker to write this one does not work

575
00:29:15,539 --> 00:29:21,090
<font color="#E5E5E5">like if you if he wants to inject a</font>

576
00:29:18,210 --> 00:29:23,970
<font color="#E5E5E5">Dwight Lisa to come /</font><font color="#CCCCCC"> jsonp</font><font color="#E5E5E5"> callback</font>

577
00:29:21,090 --> 00:29:27,720
alert these people block it right

578
00:29:23,970 --> 00:29:32,520
because it's not on totally / secure but

579
00:29:27,720 --> 00:29:36,299
what he could do he could source that

580
00:29:32,520 --> 00:29:38,580
file through the<font color="#E5E5E5"> open redirect from the</font>

581
00:29:36,299 --> 00:29:41,010
bike listed redirect right and just put

582
00:29:38,580 --> 00:29:44,490
as a redirect you all day

583
00:29:41,010 --> 00:29:47,160
insecure one and although there's a

584
00:29:44,490 --> 00:29:51,420
JSONP in the path and not totally /

585
00:29:47,160 --> 00:29:53,880
secure it will work because CSP ignores

586
00:29:51,420 --> 00:29:55,860
the path alpha redirect it's basically a

587
00:29:53,880 --> 00:29:59,190
downgraded<font color="#E5E5E5"> attack right you downgrade</font>

588
00:29:55,860 --> 00:30:02,209
the first white list from a full file

589
00:29:59,190 --> 00:30:06,200
path whitelist to just the domain and

590
00:30:02,210 --> 00:30:09,630
this is<font color="#E5E5E5"> very unfortunate right because</font>

591
00:30:06,200 --> 00:30:12,570
yeah it basically lowers the security of

592
00:30:09,630 --> 00:30:15,420
the whole<font color="#E5E5E5"> thing a lot if you have any</font>

593
00:30:12,570 --> 00:30:18,950
open redirect and<font color="#CCCCCC"> dare I mean they're</font>

594
00:30:15,420 --> 00:30:23,400
usually some right and this<font color="#E5E5E5"> is actually</font>

595
00:30:18,950 --> 00:30:27,480
<font color="#E5E5E5">this was done on purpose to you know fix</font>

596
00:30:23,400 --> 00:30:28,950
another bug I think<font color="#CCCCCC"> eager</font><font color="#E5E5E5"> hama cough he</font>

597
00:30:27,480 --> 00:30:31,110
wrote a really cool blog post about

598
00:30:28,950 --> 00:30:33,810
using content security policy for evil

599
00:30:31,110 --> 00:30:36,300
and he basically used CSP to extract

600
00:30:33,810 --> 00:30:38,490
session tokens and other stuff<font color="#CCCCCC"> for</font>

601
00:30:36,300 --> 00:30:39,720
redirects and<font color="#E5E5E5"> brute forcing that it's</font>

602
00:30:38,490 --> 00:30:42,870
<font color="#E5E5E5">really interesting blog post you should</font>

603
00:30:39,720 --> 00:30:45,690
read it<font color="#E5E5E5"> and they kind of fix it in the</font>

604
00:30:42,870 --> 00:30:48,419
<font color="#E5E5E5">spec by you know ignoring the paths</font>

605
00:30:45,690 --> 00:30:50,280
after the redirect which on the other

606
00:30:48,420 --> 00:30:53,660
<font color="#CCCCCC">hand</font><font color="#E5E5E5"> Louis the security bit right good</font>

607
00:30:50,280 --> 00:30:57,149
so does this again what happens right so

608
00:30:53,660 --> 00:31:00,360
armani example.com sources the strip

609
00:30:57,150 --> 00:31:01,890
should redirect CSP says like you site

610
00:31:00,360 --> 00:31:03,780
with redirected commies whitelist this

611
00:31:01,890 --> 00:31:07,380
will allow that then this redirect and

612
00:31:03,780 --> 00:31:09,570
then CSP says yes whitelist<font color="#CCCCCC"> com is</font>

613
00:31:07,380 --> 00:31:12,180
allowed right and fully ignores the path

614
00:31:09,570 --> 00:31:13,649
and will<font color="#E5E5E5"> just ship back the response</font>

615
00:31:12,180 --> 00:31:15,810
from<font color="#E5E5E5"> the</font><font color="#CCCCCC"> chasing p and you can execute</font>

616
00:31:13,650 --> 00:31:20,340
JavaScript again and basically fully

617
00:31:15,810 --> 00:31:22,409
bypassed<font color="#CCCCCC"> the policy so this is</font><font color="#E5E5E5"> actually</font>

618
00:31:20,340 --> 00:31:25,770
a lot of<font color="#E5E5E5"> things to pay attention right</font>

619
00:31:22,410 --> 00:31:28,050
<font color="#E5E5E5">and these</font><font color="#CCCCCC"> peace getting</font><font color="#E5E5E5"> really complex</font>

620
00:31:25,770 --> 00:31:29,700
especially you sometimes have to ignore

621
00:31:28,050 --> 00:31:31,110
directives if there are<font color="#E5E5E5"> a directives</font>

622
00:31:29,700 --> 00:31:33,420
right if just for<font color="#E5E5E5"> example</font><font color="#CCCCCC"> if you've</font>

623
00:31:31,110 --> 00:31:34,649
announced as if in line gets ignored in

624
00:31:33,420 --> 00:31:37,410
this kind of stuff right it can be

625
00:31:34,650 --> 00:31:39,210
<font color="#E5E5E5">really confusing and explaining all</font>

626
00:31:37,410 --> 00:31:41,760
these pitfalls over and over again to

627
00:31:39,210 --> 00:31:44,010
developers is hard and<font color="#E5E5E5"> not very</font>

628
00:31:41,760 --> 00:31:45,660
<font color="#E5E5E5">efficient so internally we developed a</font>

629
00:31:44,010 --> 00:31:49,800
small tool that just runs all the checks

630
00:31:45,660 --> 00:31:52,490
right and gives the developer you know a

631
00:31:49,800 --> 00:31:54,300
lot of red exclamation marks usually and

632
00:31:52,490 --> 00:31:55,500
tells them like yep

633
00:31:54,300 --> 00:31:58,590
that doesn't work that doesn't work that

634
00:31:55,500 --> 00:32:02,010
doesn't work and then you<font color="#E5E5E5"> know they can</font>

635
00:31:58,590 --> 00:32:04,199
try to avoid it ideally would give

636
00:32:02,010 --> 00:32:06,060
proper guidance with some documentation

637
00:32:04,200 --> 00:32:07,380
in the first place but yeah we actually

638
00:32:06,060 --> 00:32:11,429
<font color="#E5E5E5">also planning to make it available</font>

639
00:32:07,380 --> 00:32:17,250
publicly soon so yeah maybe that's

640
00:32:11,430 --> 00:32:20,990
useful for artists as well yeah so the

641
00:32:17,250 --> 00:32:25,730
thing<font color="#CCCCCC"> is the current we have CSP is a</font>

642
00:32:20,990 --> 00:32:29,390
bit broken right but we<font color="#E5E5E5"> still think that</font>

643
00:32:25,730 --> 00:32:33,360
basically<font color="#E5E5E5"> the idea is awesome and</font>

644
00:32:29,390 --> 00:32:36,960
mitigating XSS is really a great<font color="#CCCCCC"> goal</font>

645
00:32:33,360 --> 00:32:40,320
right and we think CSP has potential to

646
00:32:36,960 --> 00:32:42,540
maybe solve that but not in the way it's

647
00:32:40,320 --> 00:32:44,939
currently used so as I said most people

648
00:32:42,540 --> 00:32:46,770
use a white list based approach which is

649
00:32:44,940 --> 00:32:50,520
flawed for all the reasons we saw right

650
00:32:46,770 --> 00:32:52,680
you basically cannot whitelist stuff

651
00:32:50,520 --> 00:32:54,750
safely because like white listing a

652
00:32:52,680 --> 00:32:56,610
domain is like white listing a full<font color="#E5E5E5"> city</font>

653
00:32:54,750 --> 00:32:58,710
instead of a single person right it's

654
00:32:56,610 --> 00:33:02,639
you never<font color="#E5E5E5"> know what's their right to</font>

655
00:32:58,710 --> 00:33:04,170
<font color="#E5E5E5">some examples I exceptions if you're</font>

656
00:33:02,640 --> 00:33:06,720
like what is the domain it is like only

657
00:33:04,170 --> 00:33:08,520
three free<font color="#CCCCCC"> JavaScript files that you</font>

658
00:33:06,720 --> 00:33:10,470
know and they're<font color="#E5E5E5"> perfectly fine</font><font color="#CCCCCC"> you can</font>

659
00:33:08,520 --> 00:33:12,810
make it but<font color="#E5E5E5"> usually it doesn't scale</font>

660
00:33:10,470 --> 00:33:14,790
very well for big applications and it's

661
00:33:12,810 --> 00:33:19,800
<font color="#E5E5E5">really</font><font color="#CCCCCC"> hard to come up with</font><font color="#E5E5E5"> to be a</font>

662
00:33:14,790 --> 00:33:21,960
whitelist and maintain it right so we

663
00:33:19,800 --> 00:33:24,960
<font color="#E5E5E5">thought it would</font><font color="#CCCCCC"> be much better to use</font>

664
00:33:21,960 --> 00:33:27,360
like nonces instead nonce it's already

665
00:33:24,960 --> 00:33:29,640
implemented in CSP this is actually

666
00:33:27,360 --> 00:33:31,229
nothing new but it's usually like only

667
00:33:29,640 --> 00:33:33,840
<font color="#E5E5E5">used like in less than one percent of</font>

668
00:33:31,230 --> 00:33:36,930
the<font color="#CCCCCC"> CSPs we found on the internet so</font>

669
00:33:33,840 --> 00:33:38,070
it's<font color="#E5E5E5"> not very broadly used right</font><font color="#CCCCCC"> now of</font>

670
00:33:36,930 --> 00:33:40,950
a good reason<font color="#CCCCCC"> which we will see in a</font>

671
00:33:38,070 --> 00:33:43,500
second and the advantage<font color="#CCCCCC"> is right you</font>

672
00:33:40,950 --> 00:33:44,820
could nonce the scripts on your page

673
00:33:43,500 --> 00:33:47,610
will see it in a second how that looks

674
00:33:44,820 --> 00:33:49,590
<font color="#E5E5E5">like and then first you would not have</font>

675
00:33:47,610 --> 00:33:51,300
<font color="#E5E5E5">to maintain the whitelist at all right</font>

676
00:33:49,590 --> 00:33:52,470
so it saves you all the time to<font color="#E5E5E5"> come up</font>

677
00:33:51,300 --> 00:33:54,330
<font color="#E5E5E5">with the whitelist and also the</font>

678
00:33:52,470 --> 00:33:57,660
maintenance and the breakages which is

679
00:33:54,330 --> 00:34:01,260
awesome and actually a huge adoption

680
00:33:57,660 --> 00:34:03,860
blocker and second stuff like chasing p

681
00:34:01,260 --> 00:34:07,350
endpoints you don't have to care right

682
00:34:03,860 --> 00:34:14,129
because<font color="#E5E5E5"> justin on strips can execute</font>

683
00:34:07,350 --> 00:34:15,600
the problem is<font color="#CCCCCC"> very often in modern rap</font>

684
00:34:14,129 --> 00:34:18,750
you have<font color="#E5E5E5"> like dynamically created</font>

685
00:34:15,600 --> 00:34:20,759
scripts so for<font color="#E5E5E5"> example you</font><font color="#CCCCCC"> have a script</font>

686
00:34:18,750 --> 00:34:24,090
<font color="#E5E5E5">that can execute because it has an arms</font>

687
00:34:20,760 --> 00:34:26,490
right but the script creates another

688
00:34:24,090 --> 00:34:29,429
stripped element and for example<font color="#CCCCCC"> loads</font>

689
00:34:26,489 --> 00:34:32,580
modules from somewhere else and appended

690
00:34:29,429 --> 00:34:35,280
to the Dom so this will fail because

691
00:34:32,580 --> 00:34:39,090
this script does not have the non Stan

692
00:34:35,280 --> 00:34:42,419
right and so this<font color="#E5E5E5"> is like a very common</font>

693
00:34:39,090 --> 00:34:44,490
pattern many libraries use that and it's

694
00:34:42,418 --> 00:34:48,569
you could refactor all the libraries but

695
00:34:44,489 --> 00:34:50,580
it's very hard and maybe the<font color="#CCCCCC"> library's</font>

696
00:34:48,570 --> 00:34:54,929
<font color="#E5E5E5">not in your control right so maybe it's</font>

697
00:34:50,580 --> 00:34:57,350
you can't do it<font color="#E5E5E5"> at all so we'll see</font><font color="#CCCCCC"> how</font>

698
00:34:54,929 --> 00:35:02,220
we fix<font color="#CCCCCC"> the problem in a second just</font>

699
00:34:57,350 --> 00:35:06,560
quick intro about<font color="#CCCCCC"> nonsense right so this</font>

700
00:35:02,220 --> 00:35:09,750
<font color="#E5E5E5">is like a CSP policy with an ounce and</font>

701
00:35:06,560 --> 00:35:12,540
<font color="#E5E5E5">the cat image still can load because</font>

702
00:35:09,750 --> 00:35:15,090
default sauce itself the script on the

703
00:35:12,540 --> 00:35:17,359
<font color="#E5E5E5">very left also can load because it has</font>

704
00:35:15,090 --> 00:35:20,880
the same knowns as in the header right

705
00:35:17,359 --> 00:35:26,670
the nonces are set pair response every

706
00:35:20,880 --> 00:35:32,160
response has a new random nonce and this

707
00:35:26,670 --> 00:35:35,040
is allowed but if you're an attacker you

708
00:35:32,160 --> 00:35:37,910
don't know the nonce beforehand right so

709
00:35:35,040 --> 00:35:41,070
you can<font color="#E5E5E5"> check something like that right</font>

710
00:35:37,910 --> 00:35:43,170
descriptors attacker<font color="#CCCCCC"> calm but it would</font>

711
00:35:41,070 --> 00:35:44,970
get denied because it's not<font color="#E5E5E5"> in</font><font color="#CCCCCC"> a</font>

712
00:35:43,170 --> 00:35:47,430
<font color="#E5E5E5">whitelist and it doesn't have a valid</font>

713
00:35:44,970 --> 00:35:49,020
nonce and the same holds true for inline

714
00:35:47,430 --> 00:35:51,000
scripts they would not<font color="#CCCCCC"> be allowed to</font>

715
00:35:49,020 --> 00:35:53,509
execute because there's also no correct

716
00:35:51,000 --> 00:35:56,160
<font color="#E5E5E5">nuns so as an attacker to actually</font>

717
00:35:53,510 --> 00:35:58,470
inject JavaScript in a way that gets

718
00:35:56,160 --> 00:36:01,319
executed I would need<font color="#E5E5E5"> to</font><font color="#CCCCCC"> know the norms</font>

719
00:35:58,470 --> 00:36:03,899
that was set in the header in the first

720
00:36:01,320 --> 00:36:05,820
place right so this is<font color="#E5E5E5"> usually not</font>

721
00:36:03,900 --> 00:36:10,200
possible if the nonce is random enough

722
00:36:05,820 --> 00:36:15,090
and not reused and it's a very<font color="#CCCCCC"> good</font>

723
00:36:10,200 --> 00:36:18,089
<font color="#E5E5E5">protection but yeah let's maybe take a</font>

724
00:36:15,090 --> 00:36:20,220
look at the demo first and for non says

725
00:36:18,089 --> 00:36:23,730
yes so

726
00:36:20,220 --> 00:36:26,399
is it clear why<font color="#CCCCCC"> nancy's are not</font>

727
00:36:23,730 --> 00:36:29,390
guessable by an attacker because

728
00:36:26,400 --> 00:36:32,910
<font color="#E5E5E5">sometimes when we</font><font color="#CCCCCC"> present this it's not</font>

729
00:36:29,390 --> 00:36:35,580
always clear why so basically idea is as

730
00:36:32,910 --> 00:36:37,799
Lucas said they have to be a unique<font color="#CCCCCC"> per</font>

731
00:36:35,580 --> 00:36:39,299
each page load right and the browser

732
00:36:37,800 --> 00:36:41,910
basically checks that the nonce

733
00:36:39,300 --> 00:36:44,970
attribute in the script tag is equal to

734
00:36:41,910 --> 00:36:47,848
the knowns in that is in the HTTP header

735
00:36:44,970 --> 00:36:49,500
so basically an attacker cannot get the

736
00:36:47,849 --> 00:36:50,670
nonce without having<font color="#E5E5E5"> JavaScript</font>

737
00:36:49,500 --> 00:36:54,300
execution in the fault in the first

738
00:36:50,670 --> 00:36:56,609
place to inspect the dome or well men in

739
00:36:54,300 --> 00:36:58,200
the middling an HTTP connection of

740
00:36:56,609 --> 00:37:01,650
course but if you can do that<font color="#E5E5E5"> you can</font>

741
00:36:58,200 --> 00:37:03,990
also inject JavaScript directly<font color="#CCCCCC"> okay so</font>

742
00:37:01,650 --> 00:37:10,230
that the<font color="#CCCCCC"> rationale from you from</font><font color="#E5E5E5"> using</font>

743
00:37:03,990 --> 00:37:15,660
announces<font color="#CCCCCC"> okay okay so we give a quick</font>

744
00:37:10,230 --> 00:37:17,670
example so in this case we call the nose

745
00:37:15,660 --> 00:37:19,200
like random of course it has to<font color="#E5E5E5"> be truly</font>

746
00:37:17,670 --> 00:37:22,230
random<font color="#E5E5E5"> for each page load right because</font>

747
00:37:19,200 --> 00:37:24,390
reusing nonces is defeats completely the

748
00:37:22,230 --> 00:37:29,240
purpose of nancy's because you the

749
00:37:24,390 --> 00:37:33,180
attacker knows them right<font color="#E5E5E5"> and let's say</font>

750
00:37:29,240 --> 00:37:36,180
you do alert<font color="#E5E5E5"> one and it does not work</font>

751
00:37:33,180 --> 00:37:38,129
right refuse to execute right because it

752
00:37:36,180 --> 00:37:41,580
does not<font color="#E5E5E5"> have an ounce and there is no</font>

753
00:37:38,130 --> 00:37:49,080
unsafe inline which is good but if we

754
00:37:41,580 --> 00:37:53,009
add here an ounce of like random it

755
00:37:49,080 --> 00:37:54,990
works<font color="#CCCCCC"> see so this applies for both</font>

756
00:37:53,010 --> 00:37:59,310
inline scripts this is an inline scripts

757
00:37:54,990 --> 00:38:01,490
because it has like you know the

758
00:37:59,310 --> 00:38:08,430
<font color="#CCCCCC">JavaScript inside the script tags and</font>

759
00:38:01,490 --> 00:38:10,770
for i'd say source scripts such as i

760
00:38:08,430 --> 00:38:14,190
don't<font color="#CCCCCC"> know let's</font><font color="#E5E5E5"> let's call it x vs it</font>

761
00:38:10,770 --> 00:38:16,859
will not exist but<font color="#E5E5E5"> we'll see a 44 that</font>

762
00:38:14,190 --> 00:38:18,180
means the browser allows it right

763
00:38:16,859 --> 00:38:22,080
because otherwise it would not even

764
00:38:18,180 --> 00:38:25,169
fetch it so if<font color="#CCCCCC"> we just do this it</font><font color="#E5E5E5"> will</font>

765
00:38:22,080 --> 00:38:28,290
say refuse to yes it will first execute

766
00:38:25,170 --> 00:38:30,599
a lot<font color="#E5E5E5"> 1 and then it will say refuse to</font>

767
00:38:28,290 --> 00:38:33,890
load script see because<font color="#E5E5E5"> it's not nice</font>

768
00:38:30,599 --> 00:38:37,860
but if<font color="#E5E5E5"> we announce it</font>

769
00:38:33,890 --> 00:38:40,560
if you say 404 it will alert one and it

770
00:38:37,860 --> 00:38:43,850
will<font color="#E5E5E5"> 404 which means it is trying to</font>

771
00:38:40,560 --> 00:38:47,220
fetch fetch it and load it ok so this

772
00:38:43,850 --> 00:38:49,529
applies in general this<font color="#E5E5E5"> is what nonces</font>

773
00:38:47,220 --> 00:38:51,919
are and i also want<font color="#E5E5E5"> to show really quick</font>

774
00:38:49,530 --> 00:38:55,170
the problem<font color="#E5E5E5"> that</font><font color="#CCCCCC"> look as internet before</font>

775
00:38:51,920 --> 00:38:59,010
<font color="#E5E5E5">which</font><font color="#CCCCCC"> is the here the water was</font><font color="#E5E5E5"> which</font>

776
00:38:55,170 --> 00:39:01,770
was saying here the<font color="#E5E5E5"> dynamic dynamically</font>

777
00:38:59,010 --> 00:39:03,750
created scripts so for<font color="#E5E5E5"> example a complex</font>

778
00:39:01,770 --> 00:39:06,240
widget like<font color="#E5E5E5"> google maps widgets right it</font>

779
00:39:03,750 --> 00:39:08,040
tries to load dynamically at least three

780
00:39:06,240 --> 00:39:14,990
four J's files that are on the same

781
00:39:08,040 --> 00:39:17,279
domain right and so here we have it so

782
00:39:14,990 --> 00:39:19,020
it works right so we have<font color="#E5E5E5"> a script to</font>

783
00:39:17,280 --> 00:39:20,520
denounce random right now we don't have

784
00:39:19,020 --> 00:39:23,759
<font color="#E5E5E5">a conductivity policy but just to let</font>

785
00:39:20,520 --> 00:39:26,280
<font color="#E5E5E5">you explain a little bit the code you</font>

786
00:39:23,760 --> 00:39:28,290
have a need map where<font color="#E5E5E5"> you specify the</font>

787
00:39:26,280 --> 00:39:30,480
coordinates of<font color="#E5E5E5"> Amsterdam</font><font color="#CCCCCC"> the zoom level</font>

788
00:39:28,290 --> 00:39:33,240
here we<font color="#E5E5E5"> have an ounce or script as i</font>

789
00:39:30,480 --> 00:39:37,950
showed before and this<font color="#CCCCCC"> is the key and</font>

790
00:39:33,240 --> 00:39:41,129
you have a<font color="#E5E5E5"> callback right right so one</font>

791
00:39:37,950 --> 00:39:43,379
could think now if I put scripta to see

792
00:39:41,130 --> 00:39:46,860
an ounce random it will<font color="#E5E5E5"> work right</font>

793
00:39:43,380 --> 00:39:49,820
because<font color="#E5E5E5"> all scripts have nouns random</font>

794
00:39:46,860 --> 00:39:56,010
here and here right as<font color="#E5E5E5"> I should before</font>

795
00:39:49,820 --> 00:39:58,970
but if we do it what happens it does not

796
00:39:56,010 --> 00:40:01,470
it says refused to load the script

797
00:39:58,970 --> 00:40:04,470
something else which is<font color="#E5E5E5"> common dodgy as</font>

798
00:40:01,470 --> 00:40:07,799
<font color="#E5E5E5">mapped ojs util dot GS and staff the GS</font>

799
00:40:04,470 --> 00:40:10,680
with a very obscure path 25 5 which is

800
00:40:07,800 --> 00:40:13,170
versioning problem<font color="#E5E5E5"> probably right that's</font>

801
00:40:10,680 --> 00:40:15,240
because this<font color="#CCCCCC"> Jes actually does exactly</font>

802
00:40:13,170 --> 00:40:17,850
what Lucas should before<font color="#E5E5E5"> late it tries</font>

803
00:40:15,240 --> 00:40:19,799
to dynamically load scrapes and the

804
00:40:17,850 --> 00:40:22,259
dynamically loaded script do not have

805
00:40:19,800 --> 00:40:24,810
nonces so in theory you could<font color="#E5E5E5"> refactor</font>

806
00:40:22,260 --> 00:40:27,300
Maps API library to do before doing a

807
00:40:24,810 --> 00:40:29,820
pen child do s like script dot

808
00:40:27,300 --> 00:40:32,280
setattribute knowns and then propagate

809
00:40:29,820 --> 00:40:34,650
the<font color="#CCCCCC"> knows that would work but it's</font>

810
00:40:32,280 --> 00:40:36,360
feasible to do it<font color="#E5E5E5"> right it at a web</font>

811
00:40:34,650 --> 00:40:38,610
<font color="#E5E5E5">scale and this is actually</font><font color="#CCCCCC"> all the</font>

812
00:40:36,360 --> 00:40:40,290
<font color="#CCCCCC">reason why nonsense did not take off so</font>

813
00:40:38,610 --> 00:40:43,770
far<font color="#E5E5E5"> I</font><font color="#CCCCCC"> during the specs already working</font>

814
00:40:40,290 --> 00:40:45,960
by some browsers but yeah it doesn't

815
00:40:43,770 --> 00:40:47,009
really<font color="#E5E5E5"> work</font><font color="#CCCCCC"> with a lot of very popular</font>

816
00:40:45,960 --> 00:40:49,470
libraries in which it

817
00:40:47,010 --> 00:40:51,150
so yeah exactly so this is a major

818
00:40:49,470 --> 00:40:52,709
blocker right it was a major blocker

819
00:40:51,150 --> 00:40:54,960
that's basically why nonces are almost

820
00:40:52,710 --> 00:40:57,930
never used right<font color="#CCCCCC"> now they're very rarely</font>

821
00:40:54,960 --> 00:40:59,790
used<font color="#E5E5E5"> because if you have</font><font color="#CCCCCC"> to dynamically</font>

822
00:40:57,930 --> 00:41:02,279
loaded scripts that's a problem and this

823
00:40:59,790 --> 00:41:09,080
is exactly what we focused on and what

824
00:41:02,280 --> 00:41:14,880
we try<font color="#CCCCCC"> to</font><font color="#E5E5E5"> to solve and I go on right so</font>

825
00:41:09,080 --> 00:41:18,259
yes so it would be cool if<font color="#E5E5E5"> you</font><font color="#CCCCCC"> could do</font>

826
00:41:14,880 --> 00:41:20,550
dynamic trust propagation somehow so

827
00:41:18,260 --> 00:41:22,650
let's say somehow relax a little bit

828
00:41:20,550 --> 00:41:26,540
announcing mechanism and say well I

829
00:41:22,650 --> 00:41:28,950
trust everything I have in my markup but

830
00:41:26,540 --> 00:41:31,140
nothing more so basically i trust that

831
00:41:28,950 --> 00:41:33,230
<font color="#E5E5E5">our a script like knows which</font><font color="#CCCCCC"> is</font>

832
00:41:31,140 --> 00:41:35,810
basically like saying<font color="#E5E5E5"> i bless right</font>

833
00:41:33,230 --> 00:41:39,930
could load dynamically other scripts

834
00:41:35,810 --> 00:41:43,140
right so for example<font color="#CCCCCC"> i load and this</font>

835
00:41:39,930 --> 00:41:46,470
script tries to know example.com<font color="#CCCCCC"> barge</font>

836
00:41:43,140 --> 00:41:49,319
<font color="#CCCCCC">yes and then</font><font color="#E5E5E5"> I say yes you can do it via</font>

837
00:41:46,470 --> 00:41:53,609
create element script a<font color="#E5E5E5"> panchayat yes</font>

838
00:41:49,320 --> 00:41:55,740
you can do it but maybe you<font color="#E5E5E5"> can't really</font>

839
00:41:53,610 --> 00:41:58,050
<font color="#E5E5E5">you can do other things you can't do</font>

840
00:41:55,740 --> 00:42:00,419
<font color="#E5E5E5">document right for example script you</font>

841
00:41:58,050 --> 00:42:03,330
<font color="#E5E5E5">can do inner HTML because these are API</font>

842
00:42:00,420 --> 00:42:06,870
is that are very prone to XS s and to

843
00:42:03,330 --> 00:42:09,390
abuse because basically it's free form

844
00:42:06,870 --> 00:42:11,790
Dom manipulation inner HTML you can put

845
00:42:09,390 --> 00:42:13,980
the HTML you want and so on and we

846
00:42:11,790 --> 00:42:15,259
document right well it is kind of

847
00:42:13,980 --> 00:42:17,610
deprecated because it's blocking

848
00:42:15,260 --> 00:42:19,740
sometimes it's unfortunately used with

849
00:42:17,610 --> 00:42:22,110
<font color="#E5E5E5">this it would be a blocker also for what</font>

850
00:42:19,740 --> 00:42:23,669
we call and safe dynamic here but it's

851
00:42:22,110 --> 00:42:26,610
very rarely used because document.write

852
00:42:23,670 --> 00:42:28,080
is blocking so a<font color="#CCCCCC"> lot of module loading</font>

853
00:42:26,610 --> 00:42:31,470
systems actually want<font color="#E5E5E5"> it to be</font>

854
00:42:28,080 --> 00:42:34,220
synchronously a synchronous so they

855
00:42:31,470 --> 00:42:37,200
actually<font color="#CCCCCC"> use the first thing right and</font>

856
00:42:34,220 --> 00:42:40,799
this is true<font color="#E5E5E5"> for most of the web so all</font>

857
00:42:37,200 --> 00:42:42,899
the widgets we tried work that way so

858
00:42:40,800 --> 00:42:48,840
for example Facebook like a facebook

859
00:42:42,900 --> 00:42:51,120
like widget Twitter Google+ everything

860
00:42:48,840 --> 00:42:56,070
use uses like create<font color="#CCCCCC"> element</font><font color="#E5E5E5"> so the dome</font>

861
00:42:51,120 --> 00:42:58,500
functions so we put this in the CSP 33

862
00:42:56,070 --> 00:42:59,830
specification<font color="#E5E5E5"> it's still a draft and it</font>

863
00:42:58,500 --> 00:43:03,110
might change name

864
00:42:59,830 --> 00:43:05,390
so we would really<font color="#E5E5E5"> like</font><font color="#CCCCCC"> it to not call</font>

865
00:43:03,110 --> 00:43:10,130
it and save something because in our

866
00:43:05,390 --> 00:43:14,060
view this makes a CSP better it makes it

867
00:43:10,130 --> 00:43:18,740
more secure and it makes it finally

868
00:43:14,060 --> 00:43:19,940
useful so deployable and simpler so

869
00:43:18,740 --> 00:43:23,990
maybe it will be<font color="#E5E5E5"> called something like</font>

870
00:43:19,940 --> 00:43:25,670
allow dynamic in<font color="#E5E5E5"> the final version so</font>

871
00:43:23,990 --> 00:43:31,720
anyway this is a source expression you

872
00:43:25,670 --> 00:43:34,580
had the script SRC that allows basically

873
00:43:31,720 --> 00:43:36,680
scripts that are created by what

874
00:43:34,580 --> 00:43:39,230
technique is technically<font color="#E5E5E5"> called known</font>

875
00:43:36,680 --> 00:43:40,580
parser inserted so the dynamically

876
00:43:39,230 --> 00:43:44,510
generated basically the<font color="#E5E5E5"> first scenario</font>

877
00:43:40,580 --> 00:43:48,140
<font color="#E5E5E5">in green they are allowed right if the</font>

878
00:43:44,510 --> 00:43:52,580
<font color="#E5E5E5">first script is most and also the most</font>

879
00:43:48,140 --> 00:43:56,420
useful feature it is that we out if the

880
00:43:52,580 --> 00:43:58,310
unsaved dynamic keyword is present it

881
00:43:56,420 --> 00:43:59,960
will automatically discard the whitelist

882
00:43:58,310 --> 00:44:02,810
because the whitelist are inherently

883
00:43:59,960 --> 00:44:05,320
flawed as<font color="#E5E5E5"> we shown before and and also</font>

884
00:44:02,810 --> 00:44:08,509
<font color="#E5E5E5">we shown it in a much</font><font color="#CCCCCC"> more rigorous way</font>

885
00:44:05,320 --> 00:44:14,450
with an academic<font color="#CCCCCC"> paper we currently</font><font color="#E5E5E5"> have</font>

886
00:44:08,510 --> 00:44:19,130
a pending review and we want to get<font color="#E5E5E5"> rid</font>

887
00:44:14,450 --> 00:44:21,589
<font color="#CCCCCC">of worthless completely and it's very</font>

888
00:44:19,130 --> 00:44:23,840
important to be backward compatible so

889
00:44:21,590 --> 00:44:26,420
we want to create a policy that works

890
00:44:23,840 --> 00:44:28,100
<font color="#CCCCCC">out of the box in CSP does not have</font>

891
00:44:26,420 --> 00:44:30,890
versioning it's very important to<font color="#E5E5E5"> create</font>

892
00:44:28,100 --> 00:44:35,270
a catch-all policy that works in all

893
00:44:30,890 --> 00:44:37,970
<font color="#CCCCCC">browsers with so with graceful fall</font>

894
00:44:35,270 --> 00:44:39,680
backs for all browsers so it's a<font color="#E5E5E5"> little</font>

895
00:44:37,970 --> 00:44:43,330
counterintuitive and a little dirty but

896
00:44:39,680 --> 00:44:46,490
please bear with us this is how it looks

897
00:44:43,330 --> 00:44:49,660
this is generic enough it could be used

898
00:44:46,490 --> 00:44:53,859
as<font color="#E5E5E5"> a copy paste in frameworks and in</font>

899
00:44:49,660 --> 00:44:55,970
like a<font color="#E5E5E5"> little like Ruby on Rails</font>

900
00:44:53,860 --> 00:44:59,030
WordPress you know things like<font color="#E5E5E5"> that and</font>

901
00:44:55,970 --> 00:45:01,700
it would actually very very likely work

902
00:44:59,030 --> 00:45:05,360
how<font color="#E5E5E5"> to alter the box and give you much</font>

903
00:45:01,700 --> 00:45:07,850
better security than CSP does right now

904
00:45:05,360 --> 00:45:10,250
<font color="#E5E5E5">with white list so it works like</font><font color="#CCCCCC"> this</font>

905
00:45:07,850 --> 00:45:12,170
script SRC there is a nose because

906
00:45:10,250 --> 00:45:13,370
<font color="#CCCCCC">unsaved dynamic is used useless without</font>

907
00:45:12,170 --> 00:45:16,130
an ounce or

908
00:45:13,370 --> 00:45:17,960
hash we didn't talk<font color="#E5E5E5"> about hash but if</font>

909
00:45:16,130 --> 00:45:19,580
the resource is static instead<font color="#CCCCCC"> of an</font>

910
00:45:17,960 --> 00:45:21,650
ounce you can also hashes content and

911
00:45:19,580 --> 00:45:26,509
write the hash of the<font color="#E5E5E5"> content but let's</font>

912
00:45:21,650 --> 00:45:29,180
focus on announces here because it's we

913
00:45:26,510 --> 00:45:31,610
talking about dynamic thing so<font color="#CCCCCC"> notice so</font>

914
00:45:29,180 --> 00:45:33,350
<font color="#E5E5E5">nice random means allow all script to</font>

915
00:45:31,610 --> 00:45:35,180
execute if the<font color="#CCCCCC"> correctness</font><font color="#E5E5E5"> is there a</font>

916
00:45:33,350 --> 00:45:37,339
safe dynamic is the shiny new<font color="#E5E5E5"> thing and</font>

917
00:45:35,180 --> 00:45:40,000
<font color="#CCCCCC">it's like propagate trust and discard</font>

918
00:45:37,340 --> 00:45:44,480
<font color="#E5E5E5">whitelist if you browse are supported</font>

919
00:45:40,000 --> 00:45:46,790
unsafe inline is discarded in present of

920
00:45:44,480 --> 00:45:49,760
unknowns so already<font color="#E5E5E5"> now like browser to</font>

921
00:45:46,790 --> 00:45:53,330
support dancing like nuns discard unsafe

922
00:45:49,760 --> 00:45:55,940
inline but browsers that do not support

923
00:45:53,330 --> 00:45:58,190
nothing will ignore the nonce directed

924
00:45:55,940 --> 00:45:59,780
the non source expression and will

925
00:45:58,190 --> 00:46:01,970
<font color="#CCCCCC">hunter and</font><font color="#E5E5E5"> safe in line which means</font>

926
00:45:59,780 --> 00:46:06,200
allow everything<font color="#E5E5E5"> so it's a no op for</font>

927
00:46:01,970 --> 00:46:07,819
them and<font color="#CCCCCC"> HTTPS means allow every HTTPS</font>

928
00:46:06,200 --> 00:46:09,830
script so this is exactly what we advise

929
00:46:07,820 --> 00:46:12,020
against before right when when Lucas

930
00:46:09,830 --> 00:46:13,759
said HTTPS is<font color="#E5E5E5"> completely useless useless</font>

931
00:46:12,020 --> 00:46:17,750
right because you can do<font color="#CCCCCC"> HTTPS attacker</font>

932
00:46:13,760 --> 00:46:20,210
common exactly so we want<font color="#E5E5E5"> to allow every</font>

933
00:46:17,750 --> 00:46:22,280
script in case the browser does not

934
00:46:20,210 --> 00:46:26,630
support and say dynamic and does not

935
00:46:22,280 --> 00:46:28,510
support nonsense this is very rare as

936
00:46:26,630 --> 00:46:34,100
we'll see<font color="#CCCCCC"> in</font><font color="#E5E5E5"> the browser compatibility</font>

937
00:46:28,510 --> 00:46:38,180
session this is basically<font color="#CCCCCC"> just I</font><font color="#E5E5E5"> think</font>

938
00:46:34,100 --> 00:46:44,960
very old browsers or well one browser

939
00:46:38,180 --> 00:46:48,220
and you'll see which one<font color="#E5E5E5"> okay so let's</font>

940
00:46:44,960 --> 00:46:51,200
just keep this this example you remember

941
00:46:48,220 --> 00:46:53,750
script<font color="#CCCCCC"> notes to script announced one in</font>

942
00:46:51,200 --> 00:46:56,240
line one sourced it did not work with

943
00:46:53,750 --> 00:47:02,360
<font color="#E5E5E5">this remember but what if</font><font color="#CCCCCC"> we add and</font>

944
00:46:56,240 --> 00:47:07,430
save dynamic it works<font color="#E5E5E5"> because we</font>

945
00:47:02,360 --> 00:47:10,940
automatically propagate announces to put

946
00:47:07,430 --> 00:47:15,049
or trust if<font color="#E5E5E5"> you prefer to this script</font>

947
00:47:10,940 --> 00:47:18,590
that is<font color="#CCCCCC"> not so this works and you can</font>

948
00:47:15,050 --> 00:47:21,910
move the<font color="#CCCCCC"> little man on a candle in</font>

949
00:47:18,590 --> 00:47:26,570
<font color="#E5E5E5">Amsterdam and enjoy the view</font>

950
00:47:21,910 --> 00:47:30,160
okay so um this is a policy<font color="#E5E5E5"> that works</font>

951
00:47:26,570 --> 00:47:35,630
for modern browsers well for chrome and

952
00:47:30,160 --> 00:47:38,029
beta but it would not work out of the

953
00:47:35,630 --> 00:47:40,100
box with other browsers so this is<font color="#CCCCCC"> the</font>

954
00:47:38,030 --> 00:47:42,530
<font color="#CCCCCC">fallback one I was talking about it</font>

955
00:47:40,100 --> 00:47:44,270
still works right of course but this

956
00:47:42,530 --> 00:47:46,310
works in all browsers this works in

957
00:47:44,270 --> 00:47:48,500
browsers that have CSP to support they

958
00:47:46,310 --> 00:47:52,460
have partial CSP to support they have<font color="#CCCCCC"> 61</font>

959
00:47:48,500 --> 00:47:55,010
support so it was every time it is<font color="#E5E5E5"> just</font>

960
00:47:52,460 --> 00:47:58,400
does not give protection because of

961
00:47:55,010 --> 00:48:01,280
these<font color="#E5E5E5"> right in those cases but we really</font>

962
00:47:58,400 --> 00:48:03,380
don't care<font color="#CCCCCC"> because we don't want you to</font>

963
00:48:01,280 --> 00:48:05,750
user agent sniffing and serve different

964
00:48:03,380 --> 00:48:07,220
policies this is a<font color="#E5E5E5"> policy that works</font>

965
00:48:05,750 --> 00:48:10,010
just<font color="#E5E5E5"> works at this backward</font>

966
00:48:07,220 --> 00:48:14,480
compatibility compatible and gives

967
00:48:10,010 --> 00:48:17,030
always the best it can yes so if you

968
00:48:14,480 --> 00:48:18,860
would inject a script without a nonzero

969
00:48:17,030 --> 00:48:20,660
it in the new browser it will still not

970
00:48:18,860 --> 00:48:24,070
execute those write the answer yes

971
00:48:20,660 --> 00:48:24,069
absolutely I can show that very quickly

972
00:48:24,340 --> 00:48:28,970
because this is not<font color="#E5E5E5"> design it will only</font>

973
00:48:26,870 --> 00:48:33,710
it's only fall back for the old browsers

974
00:48:28,970 --> 00:48:35,390
so same security it will block<font color="#CCCCCC"> okay or I</font>

975
00:48:33,710 --> 00:48:37,310
think we<font color="#CCCCCC"> don't have much time left oh</font>

976
00:48:35,390 --> 00:48:40,129
<font color="#E5E5E5">yes we don't have much</font><font color="#CCCCCC"> time left good i</font>

977
00:48:37,310 --> 00:48:45,560
love not having much time left<font color="#CCCCCC"> okay good</font>

978
00:48:40,130 --> 00:48:48,020
so yeah yes this is exactly what<font color="#E5E5E5"> it was</font>

979
00:48:45,560 --> 00:48:50,750
<font color="#E5E5E5">saying so with a new browser everything</font>

980
00:48:48,020 --> 00:48:53,570
great it's like saying knowns and same

981
00:48:50,750 --> 00:48:55,010
dynamic with like it's used to<font color="#CCCCCC"> be two</font>

982
00:48:53,570 --> 00:48:57,080
compatible browser which could be like

983
00:48:55,010 --> 00:48:59,390
the current chrome stable and firefox

984
00:48:57,080 --> 00:49:03,670
and so far the latest<font color="#CCCCCC"> Safari so WebKit</font>

985
00:48:59,390 --> 00:49:06,379
blink and like the real browsers you a

986
00:49:03,670 --> 00:49:08,390
safety line gets discarded because you

987
00:49:06,380 --> 00:49:11,650
have announced unsafe dinamic is not

988
00:49:08,390 --> 00:49:15,710
understood yet because it is<font color="#E5E5E5"> not draft</font>

989
00:49:11,650 --> 00:49:19,490
so<font color="#E5E5E5"> basically what what's happens it will</font>

990
00:49:15,710 --> 00:49:21,890
not drop it it<font color="#E5E5E5"> will not drop yes yes and</font>

991
00:49:19,490 --> 00:49:23,750
<font color="#CCCCCC">HTTPS will not get dropped because it's</font>

992
00:49:21,890 --> 00:49:25,430
a whitelist that would just get dropped

993
00:49:23,750 --> 00:49:28,520
<font color="#E5E5E5">if and safe dynamically supported so</font>

994
00:49:25,430 --> 00:49:30,980
well does not give a much security but

995
00:49:28,520 --> 00:49:33,680
when it support for a<font color="#CCCCCC"> sale dynamic is</font>

996
00:49:30,980 --> 00:49:34,840
introduced it will be secure by default

997
00:49:33,680 --> 00:49:36,669
without em

998
00:49:34,840 --> 00:49:38,980
to do<font color="#CCCCCC"> anything no maintenance of</font>

999
00:49:36,670 --> 00:49:41,860
waitlists so if you change your<font color="#CCCCCC"> l's if</font>

1000
00:49:38,980 --> 00:49:44,740
the<font color="#CCCCCC"> API changes you don't have to worry</font>

1001
00:49:41,860 --> 00:49:47,170
you are secure always and CSP one well

1002
00:49:44,740 --> 00:49:52,029
<font color="#CCCCCC">it's understands unsafe inline</font><font color="#E5E5E5"> HTTPS</font>

1003
00:49:47,170 --> 00:49:55,480
very sorry browser support it's a

1004
00:49:52,030 --> 00:49:58,240
fragmented environment wait for it yes

1005
00:49:55,480 --> 00:50:01,420
would even fall<font color="#CCCCCC"> off oh that's really</font><font color="#E5E5E5"> bad</font>

1006
00:49:58,240 --> 00:50:06,310
I think you briefly so<font color="#E5E5E5"> I should so can</font>

1007
00:50:01,420 --> 00:50:12,790
you guess which browser as the flames no

1008
00:50:06,310 --> 00:50:15,009
I exactly that's edge and the other one

1009
00:50:12,790 --> 00:50:16,750
is I which does not really supports ESP

1010
00:50:15,010 --> 00:50:22,780
at all it does support us how you start

1011
00:50:16,750 --> 00:50:25,000
animation yes<font color="#CCCCCC"> I mean yes yeah oh so bad</font>

1012
00:50:22,780 --> 00:50:27,490
anyway yeah so<font color="#CCCCCC"> Chrome has the best as</font>

1013
00:50:25,000 --> 00:50:31,300
the best support and firefox opera so

1014
00:50:27,490 --> 00:50:33,310
blink browsers and sorry firefox and

1015
00:50:31,300 --> 00:50:36,970
like blink browsers such as opera tube

1016
00:50:33,310 --> 00:50:38,710
and WebKit browsers recent ones so<font color="#E5E5E5"> far</font>

1017
00:50:36,970 --> 00:50:41,439
they all have known support so they get

1018
00:50:38,710 --> 00:50:44,550
<font color="#E5E5E5">something edge does not have no support</font>

1019
00:50:41,440 --> 00:50:47,470
but<font color="#CCCCCC"> it has partial slam go to timeout so</font>

1020
00:50:44,550 --> 00:50:51,460
very very<font color="#E5E5E5"> quickly we were able to at</font>

1021
00:50:47,470 --> 00:50:52,990
Google deploy as economic in a lot<font color="#CCCCCC"> of</font>

1022
00:50:51,460 --> 00:50:55,800
services<font color="#CCCCCC"> that serve millions of users</font>

1023
00:50:52,990 --> 00:50:58,799
and scale and cyber and big data and

1024
00:50:55,800 --> 00:50:58,800
questions

1025
00:51:13,470 --> 00:51:22,540
can you show the flash bypass again the

1026
00:51:20,020 --> 00:51:25,630
flash bypass again sure you mean a deep

1027
00:51:22,540 --> 00:51:28,210
shore if you have it in action yeah sure

1028
00:51:25,630 --> 00:51:29,740
<font color="#E5E5E5">I</font><font color="#CCCCCC"> guess we'll just</font><font color="#E5E5E5"> copying is an</font><font color="#CCCCCC"> xss</font>

1029
00:51:28,210 --> 00:51:32,830
sweet for my domain if I can see it<font color="#CCCCCC"> very</font>

1030
00:51:29,740 --> 00:51:34,149
quickly it should actually work oh yeah

1031
00:51:32,830 --> 00:51:36,250
you mean to copy paste that long one

1032
00:51:34,150 --> 00:51:38,500
yeah sure you<font color="#CCCCCC"> can do it but I can</font><font color="#E5E5E5"> show</font>

1033
00:51:36,250 --> 00:51:42,550
you also a slightly easier one if you

1034
00:51:38,500 --> 00:51:45,160
want because i have it on well that's

1035
00:51:42,550 --> 00:51:46,900
real one right that's real long so<font color="#E5E5E5"> i try</font>

1036
00:51:45,160 --> 00:51:49,170
array I just<font color="#E5E5E5"> don't want you</font><font color="#CCCCCC"> to mess it</font>

1037
00:51:46,900 --> 00:51:52,390
up too much so I will<font color="#E5E5E5"> do something</font>

1038
00:51:49,170 --> 00:51:55,180
easier for you so let's say<font color="#CCCCCC"> you just</font>

1039
00:51:52,390 --> 00:51:57,190
have script<font color="#CCCCCC"> SOC self ok so that was</font><font color="#E5E5E5"> a</font>

1040
00:51:55,180 --> 00:51:59,950
scenario you forgot object as a scene on

1041
00:51:57,190 --> 00:52:05,590
basically<font color="#E5E5E5"> right I don't know who asked</font>

1042
00:51:59,950 --> 00:52:13,149
but so let's say you have right so you

1043
00:52:05,590 --> 00:52:15,670
have object type application x I don't

1044
00:52:13,150 --> 00:52:19,870
know why these things still exists X

1045
00:52:15,670 --> 00:52:23,640
shockwave flash something like this

1046
00:52:19,870 --> 00:52:25,900
probably<font color="#E5E5E5"> data right data hmm I think</font>

1047
00:52:23,640 --> 00:52:27,190
well data let's keep it like this<font color="#E5E5E5"> and</font>

1048
00:52:25,900 --> 00:52:29,530
then<font color="#CCCCCC"> you have</font><font color="#E5E5E5"> to do the param name</font>

1049
00:52:27,190 --> 00:52:32,610
allowscriptaccess but you can also pass

1050
00:52:29,530 --> 00:52:39,940
it here<font color="#CCCCCC"> I think a low script</font><font color="#E5E5E5"> access</font>

1051
00:52:32,610 --> 00:52:44,250
always<font color="#CCCCCC"> okay and here you pass Mickey</font>

1052
00:52:39,940 --> 00:52:44,250
doubt<font color="#E5E5E5"> IT don't exercise those Swift</font>

1053
00:52:46,460 --> 00:52:53,330
and oh right right all right<font color="#CCCCCC"> so this one</font>

1054
00:52:50,960 --> 00:52:55,640
has<font color="#E5E5E5"> the</font><font color="#CCCCCC"> javascript URL so just copy and</font>

1055
00:52:53,330 --> 00:52:57,950
paste yeah it's<font color="#CCCCCC"> possible to do it</font>

1056
00:52:55,640 --> 00:53:01,400
<font color="#E5E5E5">without but I right now I don't it's a</font>

1057
00:52:57,950 --> 00:53:07,609
like it would exercise evil<font color="#CCCCCC"> okay yes</font>

1058
00:53:01,400 --> 00:53:11,990
let's try<font color="#E5E5E5"> to copy paste that one I do it</font>

1059
00:53:07,609 --> 00:53:20,089
<font color="#E5E5E5">okay so I'll try to I try to copy paste</font>

1060
00:53:11,990 --> 00:53:28,609
this so from here I'm okay so this

1061
00:53:20,089 --> 00:53:30,710
should work yeah that works so basically

1062
00:53:28,609 --> 00:53:32,089
my it was not working before because

1063
00:53:30,710 --> 00:53:34,160
what was trying to do is using a

1064
00:53:32,089 --> 00:53:36,080
<font color="#CCCCCC">JavaScript your eye which is not the</font>

1065
00:53:34,160 --> 00:53:40,490
only way of using javascript in job in

1066
00:53:36,080 --> 00:53:42,410
you can do it like this and this<font color="#CCCCCC"> is very</font>

1067
00:53:40,490 --> 00:53:45,020
I tell you you can do is also<font color="#E5E5E5"> in a</font>

1068
00:53:42,410 --> 00:53:47,118
simpler way but any<font color="#E5E5E5"> other questions or I</font>

1069
00:53:45,020 --> 00:53:49,880
guess you're out of time right<font color="#E5E5E5"> yeah it's</font>

1070
00:53:47,119 --> 00:53:52,910
time<font color="#CCCCCC"> for the break so the gas and thanks</font>

1071
00:53:49,880 --> 00:53:55,099
me kid thank you very much thank you if

1072
00:53:52,910 --> 00:53:57,879
you have yeah we're still around so<font color="#E5E5E5"> you</font>

1073
00:53:55,099 --> 00:53:57,880
have any questions

1074
00:54:05,260 --> 00:54:07,320
you

