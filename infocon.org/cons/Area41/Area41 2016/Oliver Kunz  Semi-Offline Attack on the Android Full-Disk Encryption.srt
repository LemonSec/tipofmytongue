1
00:00:06,099 --> 00:00:09,309
thank you

2
00:00:09,650 --> 00:00:13,849
everyone<font color="#E5E5E5"> I'm going to present my semi or</font>

3
00:00:12,530 --> 00:00:18,980
an attack on<font color="#CCCCCC"> Android full disk</font>

4
00:00:13,849 --> 00:00:21,020
encryption this is who I am Oliver

5
00:00:18,980 --> 00:00:25,189
<font color="#CCCCCC">Koontz if you want to contact</font><font color="#E5E5E5"> me that's</font>

6
00:00:21,020 --> 00:00:26,779
my Twitter handle and LinkedIn I studied

7
00:00:25,189 --> 00:00:28,970
Miami see<font color="#E5E5E5"> an information security at</font>

8
00:00:26,779 --> 00:00:31,939
Royal Holloway beautiful school down

9
00:00:28,970 --> 00:00:34,400
there if you have seen age of Ultron you

10
00:00:31,939 --> 00:00:35,809
probably<font color="#E5E5E5"> know the building and what so</font>

11
00:00:34,400 --> 00:00:37,820
many thanks<font color="#CCCCCC"> to the University and</font>

12
00:00:35,809 --> 00:00:40,400
especially professor Keith Martin if he

13
00:00:37,820 --> 00:00:42,320
ever watches this online he was a great

14
00:00:40,400 --> 00:00:46,040
<font color="#E5E5E5">help during the process of my master</font>

15
00:00:42,320 --> 00:00:47,900
<font color="#CCCCCC">thesis what will tell you is some parts</font>

16
00:00:46,040 --> 00:00:49,190
<font color="#E5E5E5">of my ma thesis unfortunately they don't</font>

17
00:00:47,900 --> 00:00:52,670
have the time<font color="#CCCCCC"> to go</font><font color="#E5E5E5"> through everything</font>

18
00:00:49,190 --> 00:00:55,280
and so I will focus on three types of

19
00:00:52,670 --> 00:00:57,140
<font color="#E5E5E5">attacks first to give you some</font>

20
00:00:55,280 --> 00:00:59,720
introduction into<font color="#CCCCCC"> Android and full disk</font>

21
00:00:57,140 --> 00:01:01,729
encryption and then we cover the

22
00:00:59,720 --> 00:01:04,220
baseline attack<font color="#CCCCCC"> the</font><font color="#E5E5E5"> baseline for the</font>

23
00:01:01,729 --> 00:01:06,650
benchmark the online attack you will see

24
00:01:04,220 --> 00:01:09,289
it's quite<font color="#E5E5E5"> the obvious one the often</font>

25
00:01:06,650 --> 00:01:12,020
attack is also quite<font color="#CCCCCC"> well-known it's an</font>

26
00:01:09,290 --> 00:01:14,360
attack that was previously presented by

27
00:01:12,020 --> 00:01:16,850
different speakers and discussed online

28
00:01:14,360 --> 00:01:19,039
and then comes my semi offline attack

29
00:01:16,850 --> 00:01:21,949
all three kind of attacks are brute

30
00:01:19,040 --> 00:01:24,440
force attacks and brute force all<font color="#E5E5E5"> the</font>

31
00:01:21,950 --> 00:01:26,659
scripts or proof of concepts the

32
00:01:24,440 --> 00:01:29,450
steepest most simple brute force

33
00:01:26,659 --> 00:01:33,500
strategy four digit<font color="#CCCCCC"> pin start at 0 0 0</font>

34
00:01:29,450 --> 00:01:36,320
run up to 9999 so you can increase<font color="#CCCCCC"> a lot</font>

35
00:01:33,500 --> 00:01:37,730
of efficiency there but that was not the

36
00:01:36,320 --> 00:01:41,479
point it was the point to prove that

37
00:01:37,730 --> 00:01:46,370
<font color="#E5E5E5">it's something</font><font color="#CCCCCC"> is possible right let's</font>

38
00:01:41,479 --> 00:01:48,110
jump in so in full disk encryption we

39
00:01:46,370 --> 00:01:50,420
have the situation<font color="#CCCCCC"> that if you lose your</font>

40
00:01:48,110 --> 00:01:53,030
device or someone steals your device you

41
00:01:50,420 --> 00:01:55,190
<font color="#CCCCCC">would like them not to be able</font><font color="#E5E5E5"> to access</font>

42
00:01:53,030 --> 00:01:58,130
<font color="#CCCCCC">your data that you store that's why you</font>

43
00:01:55,190 --> 00:02:00,408
have this full disk encryption the

44
00:01:58,130 --> 00:02:03,408
control encryption addressed I hope

45
00:02:00,409 --> 00:02:06,200
every one of you has hurt this term has

46
00:02:03,409 --> 00:02:08,840
the problem that as long<font color="#E5E5E5"> as the device</font>

47
00:02:06,200 --> 00:02:12,319
is running this encryption is

48
00:02:08,840 --> 00:02:15,110
transparent how many of<font color="#E5E5E5"> you</font><font color="#CCCCCC"> actually</font>

49
00:02:12,319 --> 00:02:17,238
shut down the smartphone I don't but

50
00:02:15,110 --> 00:02:20,389
it's still there probably<font color="#E5E5E5"> for marketing</font>

51
00:02:17,239 --> 00:02:22,489
reason I<font color="#E5E5E5"> don't know if I have the device</font>

52
00:02:20,389 --> 00:02:23,040
as an attacker I can do much more than

53
00:02:22,489 --> 00:02:25,500
chess

54
00:02:23,040 --> 00:02:28,048
look at the ciphertext I can attack the

55
00:02:25,500 --> 00:02:29,969
ciphertext I can attack the cipher I can

56
00:02:28,049 --> 00:02:32,129
attack the whole crystal cryptosystem I

57
00:02:29,969 --> 00:02:35,040
can do whatever I want I'm in possession

58
00:02:32,129 --> 00:02:37,078
of the device let's assume I will I

59
00:02:35,040 --> 00:02:41,700
won't give it back to you write it I'm

60
00:02:37,079 --> 00:02:44,069
not<font color="#E5E5E5"> a nice guy so the elemental full</font>

61
00:02:41,700 --> 00:02:45,810
disk encryption is obviously we need to

62
00:02:44,069 --> 00:02:48,450
date in the disk but forget about that

63
00:02:45,810 --> 00:02:51,030
we did<font color="#E5E5E5"> Anna corruption key and recalls</font>

64
00:02:48,450 --> 00:02:53,189
that master key and we need an

65
00:02:51,030 --> 00:02:57,269
encryption cipher in android that's a

66
00:02:53,189 --> 00:02:59,549
scbc and somehow<font color="#CCCCCC"> we need</font><font color="#E5E5E5"> this process of</font>

67
00:02:57,269 --> 00:03:01,139
encrypting and decrypting data and for

68
00:02:59,549 --> 00:03:03,720
those of you familiar with linux and

69
00:03:01,139 --> 00:03:06,450
full disk encryption notice this is<font color="#CCCCCC"> d</font>

70
00:03:03,720 --> 00:03:09,389
encrypt and that's exactly the thing

71
00:03:06,450 --> 00:03:11,369
that is for for every read operation it

72
00:03:09,389 --> 00:03:13,799
decrypts the data and for every write

73
00:03:11,370 --> 00:03:15,750
operation it<font color="#E5E5E5"> encrypts the data as long</font>

74
00:03:13,799 --> 00:03:17,909
as the device is running so it is a

75
00:03:15,750 --> 00:03:19,980
transparent encryption if you have

76
00:03:17,909 --> 00:03:22,620
access to a device which is encrypted

77
00:03:19,980 --> 00:03:26,849
and it doesn't<font color="#E5E5E5"> prevent you from</font>

78
00:03:22,620 --> 00:03:28,769
accessing the data else like the screen

79
00:03:26,849 --> 00:03:33,119
authentication you have access to

80
00:03:28,769 --> 00:03:36,150
encrypted data but if<font color="#E5E5E5"> I</font><font color="#CCCCCC"> ask my mother</font>

81
00:03:33,120 --> 00:03:38,579
please remember<font color="#CCCCCC"> at least hundred twenty</font>

82
00:03:36,150 --> 00:03:40,530
eight bits for EAS key she will say are

83
00:03:38,579 --> 00:03:42,690
you stupid right and she's<font color="#E5E5E5"> probably</font>

84
00:03:40,530 --> 00:03:44,699
right because let's face it hundred

85
00:03:42,690 --> 00:03:47,310
twenty eight bits so that's not<font color="#E5E5E5"> a good</font>

86
00:03:44,699 --> 00:03:49,500
<font color="#CCCCCC">idea we need something</font><font color="#E5E5E5"> else and what we</font>

87
00:03:47,310 --> 00:03:52,769
need<font color="#CCCCCC"> is a key encryption key that</font>

88
00:03:49,500 --> 00:03:55,229
introduces sort of key hierarchy the key

89
00:03:52,769 --> 00:03:58,349
encryption key occur encrypts the master

90
00:03:55,229 --> 00:04:00,540
key but we<font color="#E5E5E5"> still have the problem to</font>

91
00:03:58,349 --> 00:04:02,429
sufficiently secure the master key we

92
00:04:00,540 --> 00:04:05,668
need another hundred twenty eight bits

93
00:04:02,430 --> 00:04:08,220
right not really helpful there so that's

94
00:04:05,669 --> 00:04:12,479
why<font color="#CCCCCC"> we have password stretching or also</font>

95
00:04:08,220 --> 00:04:15,199
k derivation key derivation functions we

96
00:04:12,479 --> 00:04:19,079
use a<font color="#CCCCCC"> user-defined value password pin</font>

97
00:04:15,199 --> 00:04:22,380
most<font color="#E5E5E5"> users really bad at this and try to</font>

98
00:04:19,079 --> 00:04:25,620
create a cryptographic key which we then

99
00:04:22,380 --> 00:04:27,360
can use to encrypt the master key this

100
00:04:25,620 --> 00:04:29,430
allows<font color="#CCCCCC"> us the user can change the pin</font>

101
00:04:27,360 --> 00:04:32,909
<font color="#E5E5E5">and password it changes the key</font>

102
00:04:29,430 --> 00:04:34,730
encryption key and<font color="#CCCCCC"> this</font><font color="#E5E5E5"> just reinstall</font>

103
00:04:32,909 --> 00:04:37,230
sake

104
00:04:34,730 --> 00:04:39,450
let's a let's have a look at<font color="#CCCCCC"> all these</font>

105
00:04:37,230 --> 00:04:43,260
different things with exception of the

106
00:04:39,450 --> 00:04:45,420
encrypt because of the time yes I hope

107
00:04:43,260 --> 00:04:47,039
every one of you has heard<font color="#E5E5E5"> of that it's</font>

108
00:04:45,420 --> 00:04:50,630
a block cipher hundred twenty eight bits

109
00:04:47,040 --> 00:04:55,350
block size Android uses the lowest key

110
00:04:50,630 --> 00:04:58,830
128-bit key block cipher runs with sort

111
00:04:55,350 --> 00:05:00,950
of mode of operation CBC also something

112
00:04:58,830 --> 00:05:03,870
i hope you have already<font color="#E5E5E5"> heard of it's</font>

113
00:05:00,950 --> 00:05:07,620
probably one of the most well-known mode

114
00:05:03,870 --> 00:05:10,110
of operations and an alternative<font color="#CCCCCC"> mode</font>

115
00:05:07,620 --> 00:05:12,810
which was designed by i triple e and

116
00:05:10,110 --> 00:05:15,090
this standard is the xes what<font color="#CCCCCC"> axios</font>

117
00:05:12,810 --> 00:05:17,430
stands for is this long string down

118
00:05:15,090 --> 00:05:20,130
there you can really<font color="#E5E5E5"> yourself</font><font color="#CCCCCC"> i safe</font>

119
00:05:17,430 --> 00:05:22,260
this time for for me actually it's there

120
00:05:20,130 --> 00:05:23,909
in android but you need to change<font color="#E5E5E5"> the</font>

121
00:05:22,260 --> 00:05:26,700
source code you need to recompile the

122
00:05:23,910 --> 00:05:28,860
source code or you ask manufacture to

123
00:05:26,700 --> 00:05:31,680
actually do that for yourself so but

124
00:05:28,860 --> 00:05:36,060
it's<font color="#E5E5E5"> not the default</font><font color="#CCCCCC"> value and that's</font>

125
00:05:31,680 --> 00:05:37,830
why we<font color="#CCCCCC"> look at ASC bc it's used for</font>

126
00:05:36,060 --> 00:05:39,990
encryption and it's also used for

127
00:05:37,830 --> 00:05:44,070
<font color="#E5E5E5">building or the crypto primitives like</font>

128
00:05:39,990 --> 00:05:47,090
the CBC Mac how it works is you see it

129
00:05:44,070 --> 00:05:51,960
probably here<font color="#E5E5E5"> best on the on the graphic</font>

130
00:05:47,090 --> 00:05:55,590
you chop up the plain text into 128 bits

131
00:05:51,960 --> 00:05:58,320
blocks and then you XOR the plaintext

132
00:05:55,590 --> 00:06:01,530
block with<font color="#CCCCCC"> the previous ciphertext block</font>

133
00:05:58,320 --> 00:06:03,210
I guess your issue for the first

134
00:06:01,530 --> 00:06:06,570
plaintext block that's why you have an

135
00:06:03,210 --> 00:06:09,210
IV<font color="#CCCCCC"> and then you just do that</font><font color="#E5E5E5"> until you</font>

136
00:06:06,570 --> 00:06:12,060
<font color="#E5E5E5">reach the</font><font color="#CCCCCC"> end which is very nice if you</font>

137
00:06:09,210 --> 00:06:14,039
send you data from A to B because this

138
00:06:12,060 --> 00:06:15,870
mode of operation is self synchronizing

139
00:06:14,040 --> 00:06:17,760
you don't need<font color="#E5E5E5"> to synchronize a counter</font>

140
00:06:15,870 --> 00:06:21,930
or<font color="#CCCCCC"> something else you just sent the data</font>

141
00:06:17,760 --> 00:06:24,000
and it works when we<font color="#E5E5E5"> think about the</font>

142
00:06:21,930 --> 00:06:27,750
<font color="#CCCCCC">disk and we want to encrypt the disk in</font>

143
00:06:24,000 --> 00:06:31,740
that way<font color="#CCCCCC"> that means let's say honda</font>

144
00:06:27,750 --> 00:06:33,270
kicks chop it up into 128 bits blocks

145
00:06:31,740 --> 00:06:36,840
then we start encrypting with

146
00:06:33,270 --> 00:06:40,020
initialization vector at block<font color="#E5E5E5"> 0 and we</font>

147
00:06:36,840 --> 00:06:41,669
go up<font color="#E5E5E5"> till we reach the end and now</font><font color="#CCCCCC"> i</font>

148
00:06:40,020 --> 00:06:46,680
want to store something else on the disk

149
00:06:41,670 --> 00:06:47,700
on let's say plaintext block 2 that

150
00:06:46,680 --> 00:06:50,910
means<font color="#CCCCCC"> i have</font>

151
00:06:47,700 --> 00:06:54,500
to decrypt from the back down to block

152
00:06:50,910 --> 00:06:57,180
to change to bits and re encrypt done

153
00:06:54,500 --> 00:06:58,740
that's very inefficient right i mean we

154
00:06:57,180 --> 00:07:01,770
don't<font color="#E5E5E5"> have that much of time if you want</font>

155
00:06:58,740 --> 00:07:03,090
<font color="#E5E5E5">to write</font><font color="#CCCCCC"> something</font><font color="#E5E5E5"> on the disk so we</font>

156
00:07:01,770 --> 00:07:07,469
needed<font color="#CCCCCC"> something else for</font><font color="#E5E5E5"> that and</font>

157
00:07:03,090 --> 00:07:11,270
that's<font color="#E5E5E5"> the assi we it creates a per</font>

158
00:07:07,470 --> 00:07:15,120
sector<font color="#E5E5E5"> IV based on the sector number and</font>

159
00:07:11,270 --> 00:07:17,969
the master key it's a cryptographic

160
00:07:15,120 --> 00:07:20,540
function it gives you an IV which

161
00:07:17,970 --> 00:07:23,910
fulfills the properties up there and

162
00:07:20,540 --> 00:07:26,910
that's very<font color="#E5E5E5"> nice now you only have to</font>

163
00:07:23,910 --> 00:07:28,530
decrypt the sector and<font color="#E5E5E5"> Yuri encrypt the</font>

164
00:07:26,910 --> 00:07:38,550
sector if something changes in that

165
00:07:28,530 --> 00:07:40,739
sector probably one of the most

166
00:07:38,550 --> 00:07:44,430
important things the master key in

167
00:07:40,740 --> 00:07:47,910
android the<font color="#CCCCCC"> misaki is generated with</font>

168
00:07:44,430 --> 00:07:49,230
that function encrypt FSC that source

169
00:07:47,910 --> 00:07:50,490
code file if you<font color="#E5E5E5"> ever want to have a</font>

170
00:07:49,230 --> 00:07:52,860
look at an read full disk encryption

171
00:07:50,490 --> 00:07:54,780
start there it's sort of where

172
00:07:52,860 --> 00:07:58,200
everything<font color="#E5E5E5"> happens more or less or</font>

173
00:07:54,780 --> 00:07:59,969
<font color="#E5E5E5">everything else is called what the</font>

174
00:07:58,200 --> 00:08:02,670
function does is pretty simple it reads

175
00:07:59,970 --> 00:08:06,420
from def you random twice<font color="#E5E5E5"> 16 bytes which</font>

176
00:08:02,670 --> 00:08:09,330
is under 28 bits those values are static

177
00:08:06,420 --> 00:08:13,830
if you don't wipe your phone those

178
00:08:09,330 --> 00:08:16,349
wellies stay with<font color="#E5E5E5"> your phone as</font><font color="#CCCCCC"> i said</font>

179
00:08:13,830 --> 00:08:19,200
<font color="#CCCCCC">earlier it's protected the mosque is</font>

180
00:08:16,350 --> 00:08:22,500
protected by the CAC it's another<font color="#CCCCCC"> a scbc</font>

181
00:08:19,200 --> 00:08:25,590
encryption and the encrypted master key

182
00:08:22,500 --> 00:08:28,700
along<font color="#CCCCCC"> with the salt</font><font color="#E5E5E5"> and other values</font>

183
00:08:25,590 --> 00:08:28,700
stored in the crypt afoot

184
00:08:31,740 --> 00:08:39,299
the nice functions that let our users

185
00:08:34,979 --> 00:08:43,050
use some 'rememorable password values k

186
00:08:39,299 --> 00:08:46,170
<font color="#E5E5E5">DFS two functions here</font><font color="#CCCCCC"> Pass</font><font color="#E5E5E5"> or based key</font>

187
00:08:43,049 --> 00:08:48,719
derivation function to is also older

188
00:08:46,170 --> 00:08:52,079
well known function it was used in

189
00:08:48,720 --> 00:08:55,200
<font color="#E5E5E5">android until 44 to derive the CAC it's</font>

190
00:08:52,080 --> 00:08:58,290
not used anymore the issue with<font color="#E5E5E5"> PB</font><font color="#CCCCCC"> kdf</font>

191
00:08:55,200 --> 00:09:00,390
<font color="#E5E5E5">too is it's only cpu expensive and who</font>

192
00:08:58,290 --> 00:09:03,930
has a gaming<font color="#CCCCCC"> pc at home with a nice GPU</font>

193
00:09:00,390 --> 00:09:06,560
right it's it's basically done so there

194
00:09:03,930 --> 00:09:10,079
<font color="#E5E5E5">is a new version now a new</font><font color="#CCCCCC"> kdf and</font>

195
00:09:06,560 --> 00:09:12,959
that's used in android for for upwards

196
00:09:10,080 --> 00:09:16,200
it's script script has the advantage

197
00:09:12,959 --> 00:09:18,660
it's<font color="#E5E5E5"> not only processor expensive but it</font>

198
00:09:16,200 --> 00:09:20,970
on it is<font color="#E5E5E5"> also memory hard so for the</font>

199
00:09:18,660 --> 00:09:23,310
same operation that normally you would

200
00:09:20,970 --> 00:09:26,640
write something which takes less memory

201
00:09:23,310 --> 00:09:29,160
it blows up the memory quite large they

202
00:09:26,640 --> 00:09:31,620
were designed<font color="#E5E5E5"> to make brute force slow</font>

203
00:09:29,160 --> 00:09:33,990
slow down the brute force<font color="#CCCCCC"> and create the</font>

204
00:09:31,620 --> 00:09:37,020
cryptographic key that's their task and

205
00:09:33,990 --> 00:09:38,370
<font color="#CCCCCC">you see in script pbk</font><font color="#E5E5E5"> DF 2 is still</font><font color="#CCCCCC"> an</font>

206
00:09:37,020 --> 00:09:41,490
<font color="#CCCCCC">android because it's a building block</font>

207
00:09:38,370 --> 00:09:45,959
it's a set of algorithms and one of the

208
00:09:41,490 --> 00:09:48,060
algorithms is based on PB<font color="#CCCCCC"> kdf to what</font>

209
00:09:45,959 --> 00:09:50,729
both functions have in common they have

210
00:09:48,060 --> 00:09:53,219
tweaked values so with increasing

211
00:09:50,730 --> 00:09:57,180
processor power increasing memory we

212
00:09:53,220 --> 00:10:00,540
have we can<font color="#E5E5E5"> also increase the cost of of</font>

213
00:09:57,180 --> 00:10:02,790
these<font color="#E5E5E5"> functions and the user when he</font>

214
00:10:00,540 --> 00:10:06,540
just enters a pin or password once is

215
00:10:02,790 --> 00:10:08,370
not significantly significantly slowed

216
00:10:06,540 --> 00:10:10,949
down by that but if you do this a

217
00:10:08,370 --> 00:10:19,050
hundred thousand times yeah you really

218
00:10:10,950 --> 00:10:21,930
get the<font color="#CCCCCC"> timeout simple application pin</font>

219
00:10:19,050 --> 00:10:27,930
password apply the KDF and we have the

220
00:10:21,930 --> 00:10:30,569
CAC now good<font color="#E5E5E5"> I told you</font><font color="#CCCCCC"> about full disk</font>

221
00:10:27,930 --> 00:10:33,209
encryption the elements let's see what

222
00:10:30,570 --> 00:10:35,100
<font color="#E5E5E5">is</font><font color="#CCCCCC"> actually encrypted for every Android</font>

223
00:10:33,209 --> 00:10:38,099
device or<font color="#CCCCCC"> android version</font><font color="#E5E5E5"> google</font>

224
00:10:35,100 --> 00:10:40,230
releases<font color="#E5E5E5"> a CD d document and in the CDD</font>

225
00:10:38,100 --> 00:10:42,990
document you have all sorts of<font color="#CCCCCC"> things</font>

226
00:10:40,230 --> 00:10:45,720
that manufacturers need you must do must

227
00:10:42,990 --> 00:10:48,870
not do should do and in<font color="#E5E5E5"> android file</font>

228
00:10:45,720 --> 00:10:50,579
life it says that<font color="#CCCCCC"> the</font><font color="#E5E5E5"> user data should</font>

229
00:10:48,870 --> 00:10:53,579
be encrypted to user data partition

230
00:10:50,579 --> 00:10:57,388
that's / data and every non removable

231
00:10:53,579 --> 00:10:59,670
internal SD card and you need full disk

232
00:10:57,389 --> 00:11:03,329
encryption as a manufacturer as soon as

233
00:10:59,670 --> 00:11:05,370
you offer a screen unlock good we have

234
00:11:03,329 --> 00:11:08,699
to Don the smartphone right both use

235
00:11:05,370 --> 00:11:11,250
data is encrypted with<font color="#E5E5E5"> Android 5 they</font>

236
00:11:08,699 --> 00:11:14,069
said you should encrypt the device on

237
00:11:11,250 --> 00:11:16,889
the first boot that gave some backlash

238
00:11:14,069 --> 00:11:18,930
for<font color="#CCCCCC"> Google because once they they said</font>

239
00:11:16,889 --> 00:11:21,240
every Android<font color="#E5E5E5"> 5 device should be</font>

240
00:11:18,930 --> 00:11:23,609
encrypted out of the box but in his CD d

241
00:11:21,240 --> 00:11:25,920
it was<font color="#CCCCCC"> only written shoot so big</font>

242
00:11:23,610 --> 00:11:31,829
manufacturers ignored that for the time

243
00:11:25,920 --> 00:11:33,930
being so it's<font color="#E5E5E5"> not too full disk right</font>

244
00:11:31,829 --> 00:11:36,300
it's<font color="#E5E5E5"> only the user data partition the</font>

245
00:11:33,930 --> 00:11:39,180
system partition is not encrypted does

246
00:11:36,300 --> 00:11:42,089
it have to be probably<font color="#E5E5E5"> not</font><font color="#CCCCCC"> it's public</font>

247
00:11:39,180 --> 00:11:44,609
you<font color="#CCCCCC"> can compile it yourself and you know</font>

248
00:11:42,089 --> 00:11:46,620
<font color="#E5E5E5">what</font><font color="#CCCCCC"> Android is right so it should have</font>

249
00:11:44,610 --> 00:11:49,430
an integrity check but that's another

250
00:11:46,620 --> 00:11:51,720
chapter of the book and<font color="#E5E5E5"> we need another</font>

251
00:11:49,430 --> 00:11:54,599
important partition here for these

252
00:11:51,720 --> 00:11:56,730
attacks that's the meta data it's where

253
00:11:54,600 --> 00:11:58,800
the crypt of faulty relay is located and

254
00:11:56,730 --> 00:12:01,439
the crypto footer they said it earlier

255
00:11:58,800 --> 00:12:04,920
holds the encrypted master key holds the

256
00:12:01,439 --> 00:12:06,719
salt holds<font color="#CCCCCC"> kdf parameters and all other</font>

257
00:12:04,920 --> 00:12:13,529
stuff<font color="#CCCCCC"> that you need</font><font color="#E5E5E5"> for the full disk</font>

258
00:12:06,720 --> 00:12:16,500
encryption we are down to<font color="#E5E5E5"> the first</font>

259
00:12:13,529 --> 00:12:18,509
<font color="#E5E5E5">attack we are building the baseline for</font>

260
00:12:16,500 --> 00:12:22,230
our benchmark because we<font color="#E5E5E5"> need something</font>

261
00:12:18,509 --> 00:12:24,480
to compare against those are the

262
00:12:22,230 --> 00:12:27,089
conditions for this attack for as long

263
00:12:24,480 --> 00:12:29,879
<font color="#CCCCCC">as it takes to enter the pin on the</font>

264
00:12:27,089 --> 00:12:32,910
device I need access to the device if

265
00:12:29,879 --> 00:12:36,480
the device is lost or stolen that's no

266
00:12:32,910 --> 00:12:38,519
big deal right I have it you<font color="#CCCCCC"> can either</font>

267
00:12:36,480 --> 00:12:41,250
do that by a brew for script like<font color="#CCCCCC"> I did</font>

268
00:12:38,519 --> 00:12:42,689
in my work because I didn't want to do

269
00:12:41,250 --> 00:12:45,449
the physical attack machine which

270
00:12:42,689 --> 00:12:47,490
angular and<font color="#CCCCCC"> wines did it's one of</font><font color="#E5E5E5"> these</font>

271
00:12:45,449 --> 00:12:49,769
nice robots with where you have in<font color="#E5E5E5"> the</font>

272
00:12:47,490 --> 00:12:52,559
<font color="#CCCCCC">those you have</font><font color="#E5E5E5"> in the chip factory which</font>

273
00:12:49,769 --> 00:12:55,290
go around and and position the chips

274
00:12:52,559 --> 00:12:56,639
<font color="#E5E5E5">really nice</font><font color="#CCCCCC"> costs about</font><font color="#E5E5E5"> 200 bucks I</font>

275
00:12:55,290 --> 00:12:59,410
didn't<font color="#E5E5E5"> have the time didn't have the</font>

276
00:12:56,639 --> 00:13:03,190
money and I'm not<font color="#CCCCCC"> a robotic engineer so</font>

277
00:12:59,410 --> 00:13:06,009
stop that the script would be prevented

278
00:13:03,190 --> 00:13:09,519
from execution because a DB is disabled

279
00:13:06,009 --> 00:13:12,850
and they do we need an authentication so

280
00:13:09,519 --> 00:13:18,939
I accepted my attack host on the device

281
00:13:12,850 --> 00:13:20,889
and enabled a to be by default and then

282
00:13:18,939 --> 00:13:23,589
I have two methods to enter the pin i

283
00:13:20,889 --> 00:13:27,129
can use input tap which simulates the

284
00:13:23,589 --> 00:13:29,410
user tapping on the screen<font color="#CCCCCC"> i need</font><font color="#E5E5E5"> to map</font>

285
00:13:27,129 --> 00:13:31,660
out the keypad for that one and since

286
00:13:29,410 --> 00:13:36,040
the next was for is smaller than the

287
00:13:31,660 --> 00:13:38,050
<font color="#E5E5E5">nexus 6</font><font color="#CCCCCC"> i had to do this twice but then</font>

288
00:13:36,040 --> 00:13:40,420
<font color="#CCCCCC">I was looking around I didn't do it a</font>

289
00:13:38,050 --> 00:13:42,040
second time actually because i'm lazy so

290
00:13:40,420 --> 00:13:43,628
<font color="#CCCCCC">i was looking around first is there a</font>

291
00:13:42,040 --> 00:13:46,420
better option and they<font color="#E5E5E5"> found input.text</font>

292
00:13:43,629 --> 00:13:48,160
and hey it's not just more convenient

293
00:13:46,420 --> 00:13:51,279
because don't have to map out the key

294
00:13:48,160 --> 00:13:53,560
layout it's also just sending a string

295
00:13:51,279 --> 00:13:56,769
to the device<font color="#E5E5E5"> and it's much faster right</font>

296
00:13:53,560 --> 00:13:59,109
so good more efficient we have a very

297
00:13:56,769 --> 00:14:02,139
lousy brute force strategy but<font color="#CCCCCC"> I can</font>

298
00:13:59,110 --> 00:14:04,480
save some<font color="#E5E5E5"> time here and then I needed</font>

299
00:14:02,139 --> 00:14:09,399
something<font color="#E5E5E5"> to actually recognize if I</font>

300
00:14:04,480 --> 00:14:12,279
found the correct pin and for that<font color="#CCCCCC"> I run</font>

301
00:14:09,399 --> 00:14:15,100
adb dumps asst that's the tool where you

302
00:14:12,279 --> 00:14:20,920
you dumb BART system information there

303
00:14:15,100 --> 00:14:25,470
is a string<font color="#CCCCCC"> am lock screen shown 10,000</font>

304
00:14:20,920 --> 00:14:29,889
pins almost 23 hours that's a long<font color="#E5E5E5"> time</font>

305
00:14:25,470 --> 00:14:31,930
<font color="#CCCCCC">2000 time that's triggered here not and</font>

306
00:14:29,889 --> 00:14:34,449
only for 10,000 pins right so we don't

307
00:14:31,930 --> 00:14:35,920
<font color="#E5E5E5">have complex passwords but hey who is</font>

308
00:14:34,449 --> 00:14:40,479
using complex passwords in the phone

309
00:14:35,920 --> 00:14:43,329
anyhow we have actually two different

310
00:14:40,480 --> 00:14:45,759
prompts and that's<font color="#E5E5E5"> interesting now look</font>

311
00:14:43,329 --> 00:14:47,559
at the table we<font color="#CCCCCC"> have a start of prompt</font>

312
00:14:45,759 --> 00:14:51,819
which is where you<font color="#E5E5E5"> enter your PIN and</font>

313
00:14:47,559 --> 00:14:53,680
you use the KDF to derive the CAC and we

314
00:14:51,819 --> 00:14:54,939
have to screen unlock is when you lock

315
00:14:53,680 --> 00:14:56,258
the screen and you actually want<font color="#E5E5E5"> to</font>

316
00:14:54,939 --> 00:14:59,730
access your phone again you enter the

317
00:14:56,259 --> 00:15:02,290
pin both times it's the same value but

318
00:14:59,730 --> 00:15:03,819
the countermeasures are different much

319
00:15:02,290 --> 00:15:08,130
different<font color="#CCCCCC"> especially if you look at</font><font color="#E5E5E5"> the</font>

320
00:15:03,819 --> 00:15:11,889
action room if<font color="#CCCCCC"> i enter the pin 30 times</font>

321
00:15:08,130 --> 00:15:14,160
falls in the store top I<font color="#E5E5E5"> have a wipe the</font>

322
00:15:11,889 --> 00:15:17,079
data is lost

323
00:15:14,160 --> 00:15:19,719
and<font color="#E5E5E5"> a screen unlock I check it over</font>

324
00:15:17,079 --> 00:15:22,540
hundred<font color="#CCCCCC"> over two thousand times the time</font>

325
00:15:19,720 --> 00:15:25,540
out and there was<font color="#E5E5E5"> no action no final</font>

326
00:15:22,540 --> 00:15:28,990
penalty i would say probably there is

327
00:15:25,540 --> 00:15:31,930
none for<font color="#CCCCCC"> that really</font><font color="#E5E5E5"> all</font><font color="#CCCCCC"> right set off</font>

328
00:15:28,990 --> 00:15:34,509
the two thousand i assume it's<font color="#E5E5E5"> none we</font>

329
00:15:31,930 --> 00:15:36,160
could secure that a bit in a more

330
00:15:34,509 --> 00:15:37,690
efficient or more better way increase

331
00:15:36,160 --> 00:15:40,569
the penalty timeouts actually make it

332
00:15:37,690 --> 00:15:43,810
<font color="#E5E5E5">variable so that it's not all</font><font color="#CCCCCC"> the time</font>

333
00:15:40,569 --> 00:15:49,719
30 seconds so once it's five minutes

334
00:15:43,810 --> 00:15:53,500
once it's<font color="#E5E5E5"> ten minutes an hour you get or</font>

335
00:15:49,720 --> 00:15:55,630
we enforce the device wipe after i don't

336
00:15:53,500 --> 00:15:57,730
know i think these hasn't failed

337
00:15:55,630 --> 00:15:59,470
attempts it's quite enough even<font color="#E5E5E5"> if you</font>

338
00:15:57,730 --> 00:16:01,120
have a toddler who likes to play<font color="#E5E5E5"> around</font>

339
00:15:59,470 --> 00:16:04,810
on your phone don't give them your phone

340
00:16:01,120 --> 00:16:07,240
then it's probably the thing but it's

341
00:16:04,810 --> 00:16:09,040
important you know it's the same value

342
00:16:07,240 --> 00:16:12,279
and it's quite important it's an

343
00:16:09,040 --> 00:16:17,649
important value but once it triggers the

344
00:16:12,279 --> 00:16:19,329
final action and once it doesn't so this

345
00:16:17,649 --> 00:16:21,790
is<font color="#CCCCCC"> my</font><font color="#E5E5E5"> conclusion for the online attack</font>

346
00:16:19,329 --> 00:16:24,219
ad be secured sufficiently enough so you

347
00:16:21,790 --> 00:16:27,040
need a physical device physical devices

348
00:16:24,220 --> 00:16:30,430
well for the pin probably easy to create

349
00:16:27,040 --> 00:16:32,740
but for pattern and passwords<font color="#E5E5E5"> you get it</font>

350
00:16:30,430 --> 00:16:36,029
gets more and more complex time<font color="#CCCCCC"> cost</font>

351
00:16:32,740 --> 00:16:39,970
almost a day yeah that's<font color="#E5E5E5"> okay it's a</font>

352
00:16:36,029 --> 00:16:44,709
<font color="#E5E5E5">it's quite long but</font><font color="#CCCCCC"> i miss some security</font>

353
00:16:39,970 --> 00:16:47,680
controls we could still improve that so

354
00:16:44,709 --> 00:16:52,359
we have the baseline let's<font color="#E5E5E5"> go to the</font>

355
00:16:47,680 --> 00:16:54,790
second attack here we have the following

356
00:16:52,360 --> 00:16:57,310
preconditions I don't need the device

357
00:16:54,790 --> 00:17:00,939
for the full brute force attack anymore

358
00:16:57,310 --> 00:17:04,839
all<font color="#E5E5E5"> I need is to take the user data and</font>

359
00:17:00,939 --> 00:17:06,849
the metadata off the device so I need

360
00:17:04,839 --> 00:17:10,899
access to the device for as long as<font color="#E5E5E5"> it</font>

361
00:17:06,849 --> 00:17:13,688
takes to image those petitions and then

362
00:17:10,900 --> 00:17:19,630
as the name sighs you run the attack

363
00:17:13,689 --> 00:17:21,790
offline off the device so I'm now the

364
00:17:19,630 --> 00:17:24,429
attacker in<font color="#E5E5E5"> a best-case scenario there</font>

365
00:17:21,790 --> 00:17:26,649
is no locked bootloader if you have an

366
00:17:24,429 --> 00:17:29,790
unlocked bootloader lock your bootloader

367
00:17:26,650 --> 00:17:33,010
I just<font color="#E5E5E5"> proved the recovery image and</font>

368
00:17:29,790 --> 00:17:35,920
look for where the petitioners is

369
00:17:33,010 --> 00:17:37,870
residing and image it with DD send it

370
00:17:35,920 --> 00:17:42,130
over to the attack host we then see and

371
00:17:37,870 --> 00:17:43,659
it's done quite straightforward in the

372
00:17:42,130 --> 00:17:46,120
worst case for the attacker he has a

373
00:17:43,660 --> 00:17:49,930
locked bootloader and<font color="#CCCCCC"> ADB</font><font color="#E5E5E5"> is disabled</font>

374
00:17:46,120 --> 00:17:53,770
well unlocking the bootloader triggers

375
00:17:49,930 --> 00:17:56,080
the device wipe Simon & Anderson figured

376
00:17:53,770 --> 00:17:59,350
out that the device wipe or faulty

377
00:17:56,080 --> 00:18:02,379
sometimes it was mostly for older

378
00:17:59,350 --> 00:18:03,939
Android versions and they also said full

379
00:18:02,380 --> 00:18:06,760
disk encryption could help<font color="#E5E5E5"> with that one</font>

380
00:18:03,940 --> 00:18:08,560
but they also said they found enough

381
00:18:06,760 --> 00:18:11,650
material will fool disk encrypted

382
00:18:08,560 --> 00:18:14,889
devices that potential leads to

383
00:18:11,650 --> 00:18:16,990
decryption of the master key I just

384
00:18:14,890 --> 00:18:20,680
assumed they may have<font color="#E5E5E5"> found</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> crip the</font>

385
00:18:16,990 --> 00:18:22,480
footer but yeah you get it it's it's a

386
00:18:20,680 --> 00:18:24,310
it's an issue that we have there but

387
00:18:22,480 --> 00:18:26,380
something else<font color="#E5E5E5"> we need to figure out but</font>

388
00:18:24,310 --> 00:18:28,090
as an attacker no I don't want to do

389
00:18:26,380 --> 00:18:30,970
wanna gamble here I want your data so

390
00:18:28,090 --> 00:18:33,429
I'm not<font color="#CCCCCC"> doing that</font><font color="#E5E5E5"> instead I use the</font>

391
00:18:30,970 --> 00:18:38,380
jtag interface which probably almost any

392
00:18:33,430 --> 00:18:41,050
device has now you're still has you can

393
00:18:38,380 --> 00:18:43,930
read this article about<font color="#E5E5E5"> how to image</font>

394
00:18:41,050 --> 00:18:46,450
through jtag and lost but<font color="#E5E5E5"> not least not</font>

395
00:18:43,930 --> 00:18:48,550
on the slide unsold the two chip that's

396
00:18:46,450 --> 00:18:50,590
quite complex but still that's your lost

397
00:18:48,550 --> 00:18:56,409
resort as an attacker if you want to

398
00:18:50,590 --> 00:18:58,840
image the device so there is<font color="#E5E5E5"> an attack</font>

399
00:18:56,410 --> 00:19:02,470
script already there written by<font color="#CCCCCC"> Canon</font>

400
00:18:58,840 --> 00:19:04,929
and<font color="#E5E5E5"> Bradford from via forensics in our</font>

401
00:19:02,470 --> 00:19:07,060
ships with<font color="#CCCCCC"> satoko Linux i</font><font color="#E5E5E5"> actually</font><font color="#CCCCCC"> used</font>

402
00:19:04,930 --> 00:19:08,860
the<font color="#E5E5E5"> different version the one that the</font>

403
00:19:07,060 --> 00:19:11,260
author from android security internals

404
00:19:08,860 --> 00:19:14,919
nikolai ln cough made some some

405
00:19:11,260 --> 00:19:16,750
additional changes<font color="#E5E5E5"> to its as a set all</font>

406
00:19:14,920 --> 00:19:19,120
such as proof of concept following the

407
00:19:16,750 --> 00:19:22,960
same brute force strategy like all<font color="#E5E5E5"> the</font>

408
00:19:19,120 --> 00:19:26,439
other scripts running<font color="#E5E5E5"> from 0 0 0</font><font color="#CCCCCC"> 2 999</font>

409
00:19:22,960 --> 00:19:30,400
how does it work simple<font color="#CCCCCC"> i take a</font>

410
00:19:26,440 --> 00:19:35,470
candidate pin apply the<font color="#CCCCCC"> KDF decrypt the</font>

411
00:19:30,400 --> 00:19:39,070
mall Suki d cube the header file check

412
00:19:35,470 --> 00:19:40,419
if is actually decrypted this one is my

413
00:19:39,070 --> 00:19:42,820
inclusion in that script

414
00:19:40,419 --> 00:19:45,940
check for the<font color="#CCCCCC"> x4 magic signature number</font>

415
00:19:42,820 --> 00:19:49,720
before<font color="#E5E5E5"> that</font><font color="#CCCCCC"> it only looked at offset 16</font>

416
00:19:45,940 --> 00:19:52,269
to 32 if there are<font color="#E5E5E5"> 16 null bytes should</font>

417
00:19:49,720 --> 00:19:53,470
be way text for but you know it's<font color="#E5E5E5"> kind</font>

418
00:19:52,269 --> 00:19:57,090
of a poor man solution we have a

419
00:19:53,470 --> 00:19:59,889
signature here so I do now both checks

420
00:19:57,090 --> 00:20:02,590
and when I found it I found the pin and

421
00:19:59,889 --> 00:20:06,100
when I found<font color="#E5E5E5"> the pin I can decrypt the</font>

422
00:20:02,590 --> 00:20:08,230
master key and the whole data that's the

423
00:20:06,100 --> 00:20:10,029
script how you call it actually the

424
00:20:08,230 --> 00:20:14,470
header file is at least ten eighty eight

425
00:20:10,029 --> 00:20:16,809
bytes your photo file is to complete the

426
00:20:14,470 --> 00:20:19,450
complete metadata petition so the

427
00:20:16,809 --> 00:20:22,539
complete cryptic footer and guess<font color="#E5E5E5"> what</font>

428
00:20:19,450 --> 00:20:26,590
how long<font color="#CCCCCC"> it takes 51 minutes not 23</font>

429
00:20:22,539 --> 00:20:30,869
hours anymore yay no applause come on

430
00:20:26,590 --> 00:20:30,869
<font color="#E5E5E5">it's not my attack but still nice right</font>

431
00:20:31,230 --> 00:20:36,519
that's<font color="#CCCCCC"> um during my master thesis one of</font>

432
00:20:34,720 --> 00:20:40,090
the tests it took quite<font color="#E5E5E5"> a while so</font>

433
00:20:36,519 --> 00:20:41,980
that's why I didn't run it today yes

434
00:20:40,090 --> 00:20:46,480
that's<font color="#E5E5E5"> my birth year yes I'm not using</font>

435
00:20:41,980 --> 00:20:48,159
that anymore but many<font color="#E5E5E5"> people do in 42</font>

436
00:20:46,480 --> 00:20:51,299
pins they use their birth here or use

437
00:20:48,159 --> 00:20:53,950
their their zip codes or whatever so

438
00:20:51,299 --> 00:20:55,899
that's<font color="#CCCCCC"> how you</font><font color="#E5E5E5"> can make your brute force</font>

439
00:20:53,950 --> 00:21:00,309
strategy more efficient by starting with

440
00:20:55,899 --> 00:21:03,279
those numbers but still it works 51

441
00:21:00,309 --> 00:21:06,940
minutes not too bad for the whole pin

442
00:21:03,279 --> 00:21:09,129
section the countermeasures I<font color="#CCCCCC"> started</font>

443
00:21:06,940 --> 00:21:11,619
earlier hopefully<font color="#CCCCCC"> we have a locked</font>

444
00:21:09,129 --> 00:21:13,959
bootloader we<font color="#E5E5E5"> certainly have disabled</font>

445
00:21:11,619 --> 00:21:16,359
<font color="#CCCCCC">ADB and</font><font color="#E5E5E5"> we have adb authentication</font>

446
00:21:13,960 --> 00:21:20,499
that's on the device where we can try to

447
00:21:16,359 --> 00:21:23,859
prevent the imaging of<font color="#CCCCCC"> the device all we</font>

448
00:21:20,499 --> 00:21:26,139
have is how<font color="#E5E5E5"> strong the</font><font color="#CCCCCC"> KDF is and how</font>

449
00:21:23,859 --> 00:21:29,970
weak the attackers host is and that's

450
00:21:26,139 --> 00:21:29,969
just<font color="#CCCCCC"> a matter of time a matter of power</font>

451
00:21:30,720 --> 00:21:36,309
so here the conclusion to the offline

452
00:21:32,889 --> 00:21:39,129
attack well we're more efficient now as

453
00:21:36,309 --> 00:21:41,619
an attacker that's not good we're

454
00:21:39,129 --> 00:21:44,369
<font color="#CCCCCC">missing some security control here so we</font>

455
00:21:41,619 --> 00:21:47,080
don't<font color="#E5E5E5"> want this attack to happen right</font>

456
00:21:44,369 --> 00:21:49,720
even though the last resort<font color="#CCCCCC"> is unsold</font>

457
00:21:47,080 --> 00:21:52,289
ring the chip it's still<font color="#E5E5E5"> not good oui</font>

458
00:21:49,720 --> 00:21:54,250
oui and actually<font color="#E5E5E5"> Google as well has</font>

459
00:21:52,289 --> 00:21:56,770
acknowledged that imaging

460
00:21:54,250 --> 00:21:59,740
<font color="#E5E5E5">addition is possible how they have</font>

461
00:21:56,770 --> 00:22:01,210
acknowledged it it's good news they

462
00:21:59,740 --> 00:22:03,640
brought some improvements in the<font color="#CCCCCC"> Android</font>

463
00:22:01,210 --> 00:22:05,860
<font color="#CCCCCC">5 and that triggered me that is what I</font>

464
00:22:03,640 --> 00:22:08,470
wanted to<font color="#E5E5E5"> see in my master's thesis does</font>

465
00:22:05,860 --> 00:22:13,689
it work this is the often that not work

466
00:22:08,470 --> 00:22:15,760
anymore<font color="#CCCCCC"> so that's where I started let's</font>

467
00:22:13,690 --> 00:22:18,820
look at the improvements that Google

468
00:22:15,760 --> 00:22:21,070
Davis they call it hardware binding of

469
00:22:18,820 --> 00:22:25,169
the encryption key material to the

470
00:22:21,070 --> 00:22:29,110
device sounds nice that<font color="#E5E5E5"> actually means</font>

471
00:22:25,170 --> 00:22:32,950
you need the device which the encryption

472
00:22:29,110 --> 00:22:35,229
happened to decrypt it in the best

473
00:22:32,950 --> 00:22:37,270
scenario it means you cannot get the

474
00:22:35,230 --> 00:22:39,820
trip<font color="#CCCCCC"> defaulter</font><font color="#E5E5E5"> of the device you</font><font color="#CCCCCC"> can not</font>

475
00:22:37,270 --> 00:22:42,010
get the user data of the device and you

476
00:22:39,820 --> 00:22:45,730
cannot run it off the device so the

477
00:22:42,010 --> 00:22:47,260
offline attack would be prevented to be

478
00:22:45,730 --> 00:22:49,180
clear it's<font color="#CCCCCC"> not the master key that they</font>

479
00:22:47,260 --> 00:22:51,700
bind to the hardware it's the key

480
00:22:49,180 --> 00:22:54,010
encryption key the mouse key is still

481
00:22:51,700 --> 00:22:56,920
the same function read the 16 bytes from

482
00:22:54,010 --> 00:22:58,980
<font color="#CCCCCC">a</font><font color="#E5E5E5"> few random you also do that on the</font>

483
00:22:56,920 --> 00:23:01,450
first boot when you have<font color="#CCCCCC"> Android five</font>

484
00:22:58,980 --> 00:23:03,280
default encryption on the boot think

485
00:23:01,450 --> 00:23:05,500
about<font color="#E5E5E5"> yourself what that means that you</font>

486
00:23:03,280 --> 00:23:09,310
ran them from boot reading 16 bytes

487
00:23:05,500 --> 00:23:12,490
twice but let's look at how what

488
00:23:09,310 --> 00:23:14,159
actually changed how the heck generation

489
00:23:12,490 --> 00:23:17,680
process changed that's still the old one

490
00:23:14,160 --> 00:23:19,810
we have to pin a password previous 205

491
00:23:17,680 --> 00:23:23,020
user could only use those two screen

492
00:23:19,810 --> 00:23:25,750
lock methods we<font color="#CCCCCC"> have the KDF which is</font>

493
00:23:23,020 --> 00:23:31,240
applied to<font color="#CCCCCC"> the value and then we have to</font>

494
00:23:25,750 --> 00:23:34,240
CAC well that's the new one looks a bit

495
00:23:31,240 --> 00:23:36,160
more<font color="#CCCCCC"> complex with more signs up there</font>

496
00:23:34,240 --> 00:23:37,990
first you notice it's not<font color="#E5E5E5"> just pin and</font>

497
00:23:36,160 --> 00:23:42,040
password anymore we have patterns that's

498
00:23:37,990 --> 00:23:43,840
not good usability default on the scope

499
00:23:42,040 --> 00:23:46,149
a sword yes that's a string and yes

500
00:23:43,840 --> 00:23:48,399
that's there in the source<font color="#CCCCCC"> code because</font>

501
00:23:46,150 --> 00:23:50,560
when you encrypt the full disk on the

502
00:23:48,400 --> 00:23:52,720
first boot your user hasn't had any

503
00:23:50,560 --> 00:23:54,909
chance<font color="#E5E5E5"> to enter screen lock value so you</font>

504
00:23:52,720 --> 00:23:58,900
need something<font color="#CCCCCC"> to derive the CAC from</font>

505
00:23:54,910 --> 00:24:01,150
and that's the<font color="#CCCCCC"> default password</font><font color="#E5E5E5"> you</font>

506
00:23:58,900 --> 00:24:03,190
apply the<font color="#E5E5E5"> KDF now you get an</font>

507
00:24:01,150 --> 00:24:06,000
intermediate key not the CAC anymore the

508
00:24:03,190 --> 00:24:06,000
intermediate key

509
00:24:06,010 --> 00:24:09,490
next operation is signed this

510
00:24:07,750 --> 00:24:12,550
intermediate key with the<font color="#CCCCCC"> keymaster</font>

511
00:24:09,490 --> 00:24:14,530
trust<font color="#E5E5E5"> 'let the key most trusted is an</font>

512
00:24:12,550 --> 00:24:17,169
application that runs in the trusted

513
00:24:14,530 --> 00:24:19,960
execution environment of your system on

514
00:24:17,170 --> 00:24:25,090
a chip so if you're rolling running a

515
00:24:19,960 --> 00:24:27,160
<font color="#CCCCCC">Qualcomm sock it's the q SS q SE e you</font>

516
00:24:25,090 --> 00:24:29,199
probably read that in the<font color="#E5E5E5"> past weeks</font>

517
00:24:27,160 --> 00:24:31,600
because researchers are actually looking

518
00:24:29,200 --> 00:24:34,180
at the different api's of the different

519
00:24:31,600 --> 00:24:37,780
trust<font color="#E5E5E5"> 'let's there the keymaster is one</font>

520
00:24:34,180 --> 00:24:39,850
of which it has an internal key that's

521
00:24:37,780 --> 00:24:41,980
important to note right now but let's

522
00:24:39,850 --> 00:24:45,280
look at the signature key that's an RSA

523
00:24:41,980 --> 00:24:49,090
private key we use to sign the internal

524
00:24:45,280 --> 00:24:51,520
key with the keymaster because all the

525
00:24:49,090 --> 00:24:52,990
information<font color="#E5E5E5"> about the crypt</font><font color="#CCCCCC"> of the full</font>

526
00:24:51,520 --> 00:24:55,720
digital encryption is stored in the

527
00:24:52,990 --> 00:24:58,510
crypt of filter the signature key is

528
00:24:55,720 --> 00:25:00,340
also stored in the crypt of filter which

529
00:24:58,510 --> 00:25:02,590
is good for<font color="#CCCCCC"> me as an attacker which is</font>

530
00:25:00,340 --> 00:25:04,209
not so good<font color="#E5E5E5"> for the device but it's</font>

531
00:25:02,590 --> 00:25:06,340
protected it's the private key needs to

532
00:25:04,210 --> 00:25:10,300
be protected right and the protection is

533
00:25:06,340 --> 00:25:12,790
an internal<font color="#E5E5E5"> key in the keymaster that</font>

534
00:25:10,300 --> 00:25:14,590
encrypts the signature key and that's

535
00:25:12,790 --> 00:25:18,240
actually<font color="#E5E5E5"> the hardware binding</font><font color="#CCCCCC"> it's it's</font>

536
00:25:14,590 --> 00:25:21,399
not really down here it's up there but

537
00:25:18,240 --> 00:25:24,610
that happens<font color="#CCCCCC"> now so I need the internal</font>

538
00:25:21,400 --> 00:25:28,690
chemo so key to decrypt the private key

539
00:25:24,610 --> 00:25:32,320
to sign the intermediate key good after

540
00:25:28,690 --> 00:25:35,200
<font color="#CCCCCC">that</font><font color="#E5E5E5"> I have the signature we apply again</font>

541
00:25:32,320 --> 00:25:37,470
a<font color="#CCCCCC"> kdf and we have the CAC and we finally</font>

542
00:25:35,200 --> 00:25:40,780
<font color="#E5E5E5">can decrypt and</font><font color="#CCCCCC"> I encrypt the master key</font>

543
00:25:37,470 --> 00:25:47,320
so quite complex if you<font color="#CCCCCC"> compare to this</font>

544
00:25:40,780 --> 00:25:50,889
one<font color="#E5E5E5"> but is it sufficiently enough no</font>

545
00:25:47,320 --> 00:25:53,860
because that's<font color="#E5E5E5"> why I'm</font><font color="#CCCCCC"> here so let's</font>

546
00:25:50,890 --> 00:25:56,320
talk<font color="#CCCCCC"> about my</font><font color="#E5E5E5"> attack you see it's not</font>

547
00:25:53,860 --> 00:26:00,070
<font color="#E5E5E5">often anymore it's Sammy offline so you</font>

548
00:25:56,320 --> 00:26:02,260
probably get the hint these are the old

549
00:26:00,070 --> 00:26:05,409
attack preconditions from the offline

550
00:26:02,260 --> 00:26:06,970
attack and just look what changes yeah

551
00:26:05,410 --> 00:26:10,300
we know that<font color="#E5E5E5"> sentence right from the</font>

552
00:26:06,970 --> 00:26:12,400
online attack so still it's it's<font color="#E5E5E5"> not a</font>

553
00:26:10,300 --> 00:26:16,300
big deal because I've stolen your device

554
00:26:12,400 --> 00:26:17,770
I found<font color="#CCCCCC"> your device and I still have to</font>

555
00:26:16,300 --> 00:26:19,539
image the partition which is also<font color="#E5E5E5"> not</font>

556
00:26:17,770 --> 00:26:21,220
the<font color="#E5E5E5"> big deal i still can do it</font>

557
00:26:19,539 --> 00:26:23,139
last resort to remember unsold during

558
00:26:21,220 --> 00:26:25,179
the chip it's a bit nasty with that

559
00:26:23,139 --> 00:26:28,809
attack you would have to resole the chip

560
00:26:25,179 --> 00:26:31,720
afterwards so more complex but not

561
00:26:28,809 --> 00:26:33,639
impossible i guess i needed a new

562
00:26:31,720 --> 00:26:35,529
application and I needed<font color="#CCCCCC"> a client-server</font>

563
00:26:33,639 --> 00:26:37,928
application because hey it's semi

564
00:26:35,529 --> 00:26:39,999
offline not offline anymore we have the

565
00:26:37,929 --> 00:26:42,429
server that runs on<font color="#E5E5E5"> the device that's</font>

566
00:26:39,999 --> 00:26:45,129
why it snowed offline it's based on the

567
00:26:42,429 --> 00:26:46,690
<font color="#CCCCCC">crypt fic because I don't want to write</font>

568
00:26:45,129 --> 00:26:49,389
all the code which other<font color="#CCCCCC"> people have</font>

569
00:26:46,690 --> 00:26:51,729
already written for<font color="#CCCCCC"> me it's also based</font>

570
00:26:49,389 --> 00:26:55,029
on the offline attack script had to

571
00:26:51,729 --> 00:26:56,649
<font color="#E5E5E5">change their quite a lot actually they</font>

572
00:26:55,029 --> 00:27:01,090
communicate with<font color="#CCCCCC"> each other obviously</font>

573
00:26:56,649 --> 00:27:02,949
<font color="#CCCCCC">it's a client-server application one</font>

574
00:27:01,090 --> 00:27:07,928
runs on the host one runs on the device

575
00:27:02,950 --> 00:27:09,879
and that's their tasks and the client

576
00:27:07,929 --> 00:27:11,799
you say it's basically all<font color="#CCCCCC"> that you also</font>

577
00:27:09,879 --> 00:27:13,928
<font color="#E5E5E5">have to do on the offline attack or what</font>

578
00:27:11,799 --> 00:27:16,929
I had to do<font color="#CCCCCC"> on the on the online attack</font>

579
00:27:13,929 --> 00:27:19,989
all these kind<font color="#E5E5E5"> of steps process the</font>

580
00:27:16,929 --> 00:27:22,570
crypto footer run the strategy perform

581
00:27:19,989 --> 00:27:24,429
the KDF decrypt the master key decrypt

582
00:27:22,570 --> 00:27:28,229
we had a file and check if we are

583
00:27:24,429 --> 00:27:30,729
actually successful on the server I

584
00:27:28,229 --> 00:27:34,059
needed to find<font color="#E5E5E5"> a</font><font color="#CCCCCC"> way to initialize the</font>

585
00:27:30,729 --> 00:27:37,599
keymaster with the RSA private key that

586
00:27:34,059 --> 00:27:40,599
I have imaged of the device so I found<font color="#E5E5E5"> a</font>

587
00:27:37,599 --> 00:27:44,259
way to do that take<font color="#CCCCCC"> one step</font><font color="#E5E5E5"> closer to</font>

588
00:27:40,599 --> 00:27:47,439
the attack then I needed a way to get

589
00:27:44,259 --> 00:27:51,369
the chemostat raw slit to sign my value

590
00:27:47,440 --> 00:27:55,059
that I send him you do that check good

591
00:27:51,369 --> 00:27:58,178
we one step closer and that's the

592
00:27:55,059 --> 00:28:01,629
communication what happens i initialize

593
00:27:58,179 --> 00:28:06,700
the data on the<font color="#CCCCCC"> server basically i send</font>

594
00:28:01,629 --> 00:28:10,029
the RSA key blob over then i generate

595
00:28:06,700 --> 00:28:12,599
the first candidate pin apply<font color="#CCCCCC"> kdf on the</font>

596
00:28:10,029 --> 00:28:15,609
client sent the intermediate candidate

597
00:28:12,599 --> 00:28:19,149
over to the server and ask for the

598
00:28:15,609 --> 00:28:21,519
signature the server asks the trust late

599
00:28:19,149 --> 00:28:25,149
for the signature and the<font color="#CCCCCC"> sense of</font>

600
00:28:21,519 --> 00:28:27,549
signature back and yes<font color="#CCCCCC"> this works</font><font color="#E5E5E5"> I need</font>

601
00:28:25,149 --> 00:28:29,529
to be root on the<font color="#E5E5E5"> device but I have the</font>

602
00:28:27,549 --> 00:28:32,859
device<font color="#E5E5E5"> I have the images off the device</font>

603
00:28:29,529 --> 00:28:33,610
so i can get root and you do that until

604
00:28:32,859 --> 00:28:37,629
you<font color="#E5E5E5"> get</font>

605
00:28:33,610 --> 00:28:42,149
<font color="#CCCCCC">ki and you have found the pin that's all</font>

606
00:28:37,630 --> 00:28:46,870
it<font color="#CCCCCC"> takes at the</font><font color="#E5E5E5"> end we have the device</font>

607
00:28:42,150 --> 00:28:50,500
we have the application we<font color="#CCCCCC"> have the two</font>

608
00:28:46,870 --> 00:28:53,379
partitions I don't need<font color="#E5E5E5"> to device in its</font>

609
00:28:50,500 --> 00:28:55,030
original<font color="#E5E5E5"> state anymore I can wipe it I</font>

610
00:28:53,380 --> 00:29:00,070
can do whatever I want with<font color="#E5E5E5"> it as long</font>

611
00:28:55,030 --> 00:29:04,000
as I don't destroy it and basically I

612
00:29:00,070 --> 00:29:05,950
did I wiped it and I install the sewer

613
00:29:04,000 --> 00:29:08,410
application on it i got a new master key

614
00:29:05,950 --> 00:29:10,419
<font color="#E5E5E5">i got</font><font color="#CCCCCC"> in urs a keeper but i could ignore</font>

615
00:29:08,410 --> 00:29:13,059
it because<font color="#E5E5E5"> i initialize with the old key</font>

616
00:29:10,419 --> 00:29:16,179
material I just it's there I don't care

617
00:29:13,059 --> 00:29:20,230
this is my one this<font color="#E5E5E5"> is my old one please</font>

618
00:29:16,179 --> 00:29:22,840
use this one and it works and this is

619
00:29:20,230 --> 00:29:26,200
the steps you<font color="#E5E5E5"> have to perform you push</font>

620
00:29:22,840 --> 00:29:28,059
the binary up to the device<font color="#E5E5E5"> you create</font>

621
00:29:26,200 --> 00:29:29,740
the<font color="#E5E5E5"> TCP forwarding so that you can</font>

622
00:29:28,059 --> 00:29:34,168
actually communicate which with each

623
00:29:29,740 --> 00:29:39,370
other you start with the su binary the

624
00:29:34,169 --> 00:29:42,790
PRC server listening on 9999 understand

625
00:29:39,370 --> 00:29:44,739
/<font color="#E5E5E5"> I start on the host the client will</font>

626
00:29:42,790 --> 00:29:46,928
make the data which is<font color="#E5E5E5"> to crip the</font>

627
00:29:44,740 --> 00:29:51,059
footer with the header file which<font color="#CCCCCC"> is</font>

628
00:29:46,929 --> 00:29:55,120
again these 1088 or two<font color="#E5E5E5"> thousand bytes</font>

629
00:29:51,059 --> 00:29:57,570
let's send this to localhost 88 minus s

630
00:29:55,120 --> 00:29:59,739
oppresses the<font color="#E5E5E5"> crypto filter output</font>

631
00:29:57,570 --> 00:30:01,240
formatting because it's nice sometimes

632
00:29:59,740 --> 00:30:06,610
you want<font color="#E5E5E5"> to look at it was</font><font color="#CCCCCC"> is actually</font>

633
00:30:01,240 --> 00:30:10,720
stored minus minus brute force<font color="#E5E5E5"> two hours</font>

634
00:30:06,610 --> 00:30:13,479
<font color="#CCCCCC">8 minutes not 23 not 51 but still two</font>

635
00:30:10,720 --> 00:30:15,429
hours 18 minutes it's not too<font color="#E5E5E5"> bad we</font>

636
00:30:13,480 --> 00:30:17,950
will have one slide with the comparison

637
00:30:15,429 --> 00:30:21,690
of all results there you see what is

638
00:30:17,950 --> 00:30:26,110
<font color="#CCCCCC">actually the difference let's have a</font>

639
00:30:21,690 --> 00:30:30,809
small look at the demo and time is not

640
00:30:26,110 --> 00:30:34,000
<font color="#E5E5E5">too bad this is a demo run that they did</font>

641
00:30:30,809 --> 00:30:36,428
earlier this morning<font color="#CCCCCC"> you see on the</font>

642
00:30:34,000 --> 00:30:39,700
<font color="#CCCCCC">right hand side this is the server</font>

643
00:30:36,429 --> 00:30:43,330
running you see on the<font color="#E5E5E5"> left hand side</font>

644
00:30:39,700 --> 00:30:45,290
this is the<font color="#E5E5E5"> client running the pen is</font>

645
00:30:43,330 --> 00:30:49,760
zero eight-hundred

646
00:30:45,290 --> 00:30:51,740
the master key is there have fun write

647
00:30:49,760 --> 00:30:55,010
it down it's not arrived it in the

648
00:30:51,740 --> 00:30:59,030
meantime it took<font color="#E5E5E5"> a bit longer because I</font>

649
00:30:55,010 --> 00:31:01,760
reduced the the power of my machine for

650
00:30:59,030 --> 00:31:04,879
not overheating it but you get the deal

651
00:31:01,760 --> 00:31:15,560
and this<font color="#E5E5E5"> is now the attack</font><font color="#CCCCCC"> that I just</font>

652
00:31:04,880 --> 00:31:17,510
run earlier so what we see here<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is</font>

653
00:31:15,560 --> 00:31:19,520
what the server does all the time it all

654
00:31:17,510 --> 00:31:22,760
the time says oh I got the<font color="#CCCCCC"> Academy</font>

655
00:31:19,520 --> 00:31:30,860
candidate oh cool nice here get the

656
00:31:22,760 --> 00:31:33,860
signature back at the beginning<font color="#E5E5E5"> I print</font>

657
00:31:30,860 --> 00:31:36,740
out the format of<font color="#CCCCCC"> the Tiki block the RSA</font>

658
00:31:33,860 --> 00:31:38,990
key<font color="#E5E5E5"> block that I send out and then it</font>

659
00:31:36,740 --> 00:31:43,120
just<font color="#CCCCCC"> Waits and dancers</font><font color="#E5E5E5"> the requests</font>

660
00:31:38,990 --> 00:31:43,120
until it's done and it closes the<font color="#E5E5E5"> socket</font>

661
00:31:45,370 --> 00:31:55,340
here we have to start<font color="#CCCCCC"> come on and you</font>

662
00:31:51,800 --> 00:32:01,250
see here just simple from<font color="#CCCCCC"> 000 until you</font>

663
00:31:55,340 --> 00:32:06,470
get<font color="#E5E5E5"> lucky you see the cryptic photo</font>

664
00:32:01,250 --> 00:32:09,200
printed out yeah that's it basically

665
00:32:06,470 --> 00:32:10,940
that's the attack it's not rocket

666
00:32:09,200 --> 00:32:15,200
science when you have seen<font color="#CCCCCC"> in many of</font>

667
00:32:10,940 --> 00:32:18,080
the application<font color="#E5E5E5"> it's UCD an RMP factor</font>

668
00:32:15,200 --> 00:32:20,600
from the KDF script and to script the

669
00:32:18,080 --> 00:32:24,590
script and<font color="#CCCCCC"> keymaster that implies that</font>

670
00:32:20,600 --> 00:32:28,699
it uses the hardware binding we have to

671
00:32:24,590 --> 00:32:31,129
crip the<font color="#E5E5E5"> type the ASC bc and we have the</font>

672
00:32:28,700 --> 00:32:34,100
key size on the 28 bits all<font color="#CCCCCC"> the</font>

673
00:32:31,130 --> 00:32:39,130
information<font color="#CCCCCC"> is there and basically that</font>

674
00:32:34,100 --> 00:32:39,129
part down here<font color="#E5E5E5"> I send over to the server</font>

675
00:32:47,510 --> 00:32:57,020
not the last one yep so what

676
00:32:53,780 --> 00:32:59,360
countermeasures<font color="#E5E5E5"> did we have still all</font>

677
00:32:57,020 --> 00:33:02,240
the same from the offline attack because

678
00:32:59,360 --> 00:33:04,699
well basically it is the offline attack

679
00:33:02,240 --> 00:33:07,850
all I<font color="#E5E5E5"> did was I took the device into the</font>

680
00:33:04,700 --> 00:33:10,130
<font color="#E5E5E5">loop because that's all Google did in</font>

681
00:33:07,850 --> 00:33:12,889
their improvement they just took the

682
00:33:10,130 --> 00:33:16,100
device into<font color="#CCCCCC"> the loop but I am the owner</font>

683
00:33:12,890 --> 00:33:19,040
of the device not the legitimate owner

684
00:33:16,100 --> 00:33:20,810
but I am<font color="#E5E5E5"> the owner of the device the</font>

685
00:33:19,040 --> 00:33:23,899
<font color="#E5E5E5">current for select bootloader because</font>

686
00:33:20,810 --> 00:33:25,639
remember the CDD this nice document for

687
00:33:23,900 --> 00:33:27,530
the manufacturers that tells them what

688
00:33:25,640 --> 00:33:29,000
you do and<font color="#E5E5E5"> what not to do there is no</font>

689
00:33:27,530 --> 00:33:32,090
mentioning about the locked bootloader

690
00:33:29,000 --> 00:33:34,790
so Samsung gave this device with an

691
00:33:32,090 --> 00:33:36,770
unlocked bootloader and I really think

692
00:33:34,790 --> 00:33:40,100
<font color="#E5E5E5">we are now down to the time where</font>

693
00:33:36,770 --> 00:33:42,260
everyone knows lock your bootloader even

694
00:33:40,100 --> 00:33:44,000
if you hack your device you<font color="#CCCCCC"> want</font><font color="#E5E5E5"> to play</font>

695
00:33:42,260 --> 00:33:47,780
<font color="#E5E5E5">around with your device if you're done</font>

696
00:33:44,000 --> 00:33:51,140
lock your bootloader you could remove

697
00:33:47,780 --> 00:33:52,970
the jtag interface that's nice you will

698
00:33:51,140 --> 00:33:55,000
also get some outburst from the hacking

699
00:33:52,970 --> 00:33:57,950
community because<font color="#CCCCCC"> we like the jtech</font>

700
00:33:55,000 --> 00:34:00,200
interface and at the end you don't

701
00:33:57,950 --> 00:34:05,450
<font color="#E5E5E5">really resolve the issue because lost</font>

702
00:34:00,200 --> 00:34:07,310
resort on soldering the chip when we

703
00:34:05,450 --> 00:34:09,590
could also improve a key change

704
00:34:07,310 --> 00:34:12,799
mechanism for the internal key master

705
00:34:09,590 --> 00:34:15,080
key sounds complex right we only have

706
00:34:12,800 --> 00:34:17,210
one<font color="#E5E5E5"> key we can change and that's the key</font>

707
00:34:15,080 --> 00:34:22,730
encryption key and<font color="#CCCCCC"> that changes because</font>

708
00:34:17,210 --> 00:34:25,129
the user can change the user value you

709
00:34:22,730 --> 00:34:27,699
can brute force the internal chemo so

710
00:34:25,129 --> 00:34:29,810
key which protects the private key<font color="#CCCCCC"> i</font>

711
00:34:27,699 --> 00:34:32,928
think if i remember correctly it's

712
00:34:29,810 --> 00:34:35,270
thousand 24 bits have fun with<font color="#CCCCCC"> that you</font>

713
00:34:32,929 --> 00:34:39,918
can solve<font color="#E5E5E5"> the RSA key problem if you do</font>

714
00:34:35,270 --> 00:34:42,199
that ping me please it's nice<font color="#E5E5E5"> and if you</font>

715
00:34:39,918 --> 00:34:45,469
can do both of<font color="#CCCCCC"> that you probably can</font>

716
00:34:42,199 --> 00:34:49,399
just start brute forcing the<font color="#E5E5E5"> AES 128-bit</font>

717
00:34:45,469 --> 00:34:53,290
key right so solve this this work and

718
00:34:49,399 --> 00:34:56,779
and try to do something else<font color="#E5E5E5"> like I did</font>

719
00:34:53,290 --> 00:34:59,540
<font color="#CCCCCC">the question is when we want to</font><font color="#E5E5E5"> make an</font>

720
00:34:56,780 --> 00:35:01,240
internal key master key change when do

721
00:34:59,540 --> 00:35:04,100
we destroy the key

722
00:35:01,240 --> 00:35:07,069
do we destroy it and use a wipe so when

723
00:35:04,100 --> 00:35:10,700
the user or someone else unlocks the

724
00:35:07,070 --> 00:35:13,160
bootloader well would be good but if I

725
00:35:10,700 --> 00:35:15,169
image the device we are che tag<font color="#CCCCCC"> around</font>

726
00:35:13,160 --> 00:35:19,819
shouldering that doesn't trigger the key

727
00:35:15,170 --> 00:35:27,590
change so it's kind of chicken in<font color="#E5E5E5"> there</font>

728
00:35:19,820 --> 00:35:29,840
question actually let's look at the

729
00:35:27,590 --> 00:35:36,080
conclusion for my semi offline attack

730
00:35:29,840 --> 00:35:38,720
sorry google<font color="#E5E5E5"> said they fixed it</font><font color="#CCCCCC"> i met</font>

731
00:35:36,080 --> 00:35:41,690
across yes technically they did and i

732
00:35:38,720 --> 00:35:43,580
can confirm you you<font color="#CCCCCC"> can not brute force</font>

733
00:35:41,690 --> 00:35:46,550
the full disk encryption of an android

734
00:35:43,580 --> 00:35:54,250
<font color="#E5E5E5">five device without the semi offline</font>

735
00:35:46,550 --> 00:35:58,130
attack just<font color="#E5E5E5"> like but that gives me</font>

736
00:35:54,250 --> 00:36:01,520
actually no it's not resolved the base

737
00:35:58,130 --> 00:36:03,170
issue here is not resolved the

738
00:36:01,520 --> 00:36:05,600
efficiency yes it's less efficient than

739
00:36:03,170 --> 00:36:09,230
the the offline attack we come<font color="#E5E5E5"> to</font><font color="#CCCCCC"> that</font>

740
00:36:05,600 --> 00:36:12,080
in<font color="#CCCCCC"> the next slide but the bigger issues</font>

741
00:36:09,230 --> 00:36:15,800
are they had the wrong<font color="#E5E5E5"> assumptions about</font>

742
00:36:12,080 --> 00:36:19,310
the<font color="#E5E5E5"> attack i am in full possession of</font>

743
00:36:15,800 --> 00:36:22,880
the device<font color="#CCCCCC"> you lost it I stole it I have</font>

744
00:36:19,310 --> 00:36:25,549
it and I can do with<font color="#E5E5E5"> it what I want and</font>

745
00:36:22,880 --> 00:36:27,710
they forgot about that because I can

746
00:36:25,550 --> 00:36:30,230
root it and when I'm route I can<font color="#E5E5E5"> talk</font><font color="#CCCCCC"> to</font>

747
00:36:27,710 --> 00:36:33,350
the keymaster API which probably I

748
00:36:30,230 --> 00:36:41,030
should not be<font color="#CCCCCC"> able</font><font color="#E5E5E5"> to talk to when it's</font>

749
00:36:33,350 --> 00:36:43,730
that important so my Nexus 6 has an

750
00:36:41,030 --> 00:36:47,810
internal key master key and as long the

751
00:36:43,730 --> 00:36:51,140
device lifts this ski lifts and I have

752
00:36:47,810 --> 00:36:53,930
to<font color="#E5E5E5"> live</font><font color="#CCCCCC"> with that I work in corporate</font>

753
00:36:51,140 --> 00:36:56,359
now and we have some nice policy about

754
00:36:53,930 --> 00:36:59,060
key changes and if you work in corporate

755
00:36:56,360 --> 00:37:01,370
and you have<font color="#CCCCCC"> Andre devices so first of</font>

756
00:36:59,060 --> 00:37:03,950
all you have the master key which is

757
00:37:01,370 --> 00:37:05,930
static on<font color="#CCCCCC"> the 28 bits and you have a</font>

758
00:37:03,950 --> 00:37:08,319
policy saying you need to<font color="#E5E5E5"> change your</font>

759
00:37:05,930 --> 00:37:10,640
keys and password every now and then you

760
00:37:08,320 --> 00:37:12,530
<font color="#CCCCCC">need to</font><font color="#E5E5E5"> make an exclusion for that or</font>

761
00:37:10,640 --> 00:37:14,080
you have to force your user actually to

762
00:37:12,530 --> 00:37:16,780
do a vibe factory

763
00:37:14,080 --> 00:37:21,580
set of the device and they won't like

764
00:37:16,780 --> 00:37:23,830
you for that for me privately yes I can

765
00:37:21,580 --> 00:37:26,590
accept it I have to live<font color="#E5E5E5"> with that the</font>

766
00:37:23,830 --> 00:37:28,299
cheek the key never changes I was

767
00:37:26,590 --> 00:37:32,710
fortunate enough to talk to<font color="#E5E5E5"> Google about</font>

768
00:37:28,300 --> 00:37:36,040
this issue before releasing the thesis I

769
00:37:32,710 --> 00:37:37,930
send over<font color="#CCCCCC"> a small paper</font><font color="#E5E5E5"> to google and i</font>

770
00:37:36,040 --> 00:37:39,880
was<font color="#E5E5E5"> able to talk to the lead engineer or</font>

771
00:37:37,930 --> 00:37:41,620
full disk encryption he confirmed to me

772
00:37:39,880 --> 00:37:43,810
i'm<font color="#CCCCCC"> the first one who</font><font color="#E5E5E5"> came forward with</font>

773
00:37:41,620 --> 00:37:46,060
this attack maybe I'm not the first one

774
00:37:43,810 --> 00:37:49,330
who discovered it with the first one<font color="#E5E5E5"> who</font>

775
00:37:46,060 --> 00:37:50,890
told them and he also said they're

776
00:37:49,330 --> 00:37:54,009
already working on improvements they

777
00:37:50,890 --> 00:37:56,770
knew<font color="#E5E5E5"> something like</font><font color="#CCCCCC"> that is possible but</font>

778
00:37:54,010 --> 00:37:58,720
you<font color="#CCCCCC"> know when you</font><font color="#E5E5E5"> release the device or</font>

779
00:37:56,770 --> 00:38:00,370
whatever you do in your work you never

780
00:37:58,720 --> 00:38:02,680
<font color="#E5E5E5">get one hundred percent sure because you</font>

781
00:38:00,370 --> 00:38:05,319
don't have<font color="#E5E5E5"> the time so they're fixing it</font>

782
00:38:02,680 --> 00:38:08,020
and<font color="#E5E5E5"> it's still early release in Android</font>

783
00:38:05,320 --> 00:38:10,120
n so should come<font color="#CCCCCC"> out this year I haven't</font>

784
00:38:08,020 --> 00:38:12,730
looked at the code yet I hope we will

785
00:38:10,120 --> 00:38:14,910
find the time to look at the code what

786
00:38:12,730 --> 00:38:17,380
they told me it sounded promising and

787
00:38:14,910 --> 00:38:21,819
complex maybe that's why it sounded

788
00:38:17,380 --> 00:38:24,640
promising but yeah if you have the time

789
00:38:21,820 --> 00:38:30,900
look at it you know<font color="#E5E5E5"> now where to start</font>

790
00:38:24,640 --> 00:38:35,290
crypt FSC and we have the last slide

791
00:38:30,900 --> 00:38:39,130
comparison of<font color="#CCCCCC"> the attacks and look at it</font>

792
00:38:35,290 --> 00:38:42,430
23 hours almost the offer an attack

793
00:38:39,130 --> 00:38:44,950
almost one hour mine a little bit more

794
00:38:42,430 --> 00:38:47,919
<font color="#CCCCCC">than two hours will not think about what</font>

795
00:38:44,950 --> 00:38:51,960
happened in<font color="#E5E5E5"> your friend attack we have</font>

796
00:38:47,920 --> 00:38:54,340
one<font color="#CCCCCC"> kdf application once script an</font>

797
00:38:51,960 --> 00:38:57,460
assembly of lion attack<font color="#CCCCCC"> i have to deal</font>

798
00:38:54,340 --> 00:38:59,920
with to script applications and the

799
00:38:57,460 --> 00:39:03,040
public key operation and communication

800
00:38:59,920 --> 00:39:05,440
overhead and<font color="#E5E5E5"> i'm only a little bit more</font>

801
00:39:03,040 --> 00:39:09,520
<font color="#CCCCCC">than double of the time i didn't know</font>

802
00:39:05,440 --> 00:39:12,810
about you<font color="#CCCCCC"> i call that a success that's</font>

803
00:39:09,520 --> 00:39:12,810
another place for<font color="#CCCCCC"> an applause by the way</font>

804
00:39:16,249 --> 00:39:23,910
and with that and<font color="#E5E5E5"> I think more than</font><font color="#CCCCCC"> a</font>

805
00:39:21,599 --> 00:39:35,579
hat in the time we<font color="#CCCCCC"> have time for</font>

806
00:39:23,910 --> 00:39:38,670
<font color="#CCCCCC">questions no questions one question so</font>

807
00:39:35,579 --> 00:39:41,160
thanks for<font color="#CCCCCC"> the</font><font color="#E5E5E5"> excellent talk so first</font>

808
00:39:38,670 --> 00:39:43,559
of all<font color="#CCCCCC"> your you brute force pins</font><font color="#E5E5E5"> right</font>

809
00:39:41,160 --> 00:39:45,660
so if somebody has a 16 digit password

810
00:39:43,559 --> 00:39:47,729
with uppercase lowercase and special

811
00:39:45,660 --> 00:39:49,920
characters then those times probably

812
00:39:47,729 --> 00:39:52,979
changed drastically right yes certainly

813
00:39:49,920 --> 00:39:55,949
I mean those results are down to my

814
00:39:52,979 --> 00:39:59,218
attack host and down to what the input

815
00:39:55,949 --> 00:40:00,869
value is right basically the whole

816
00:39:59,219 --> 00:40:03,420
strength of the full disk encryption

817
00:40:00,869 --> 00:40:06,150
relies on the user which is not good

818
00:40:03,420 --> 00:40:08,699
<font color="#CCCCCC">news because</font><font color="#E5E5E5"> what you just told me if</font>

819
00:40:06,150 --> 00:40:11,309
<font color="#CCCCCC">you have this on your smartphone</font><font color="#E5E5E5"> I pay</font>

820
00:40:08,699 --> 00:40:16,289
you a beer you<font color="#CCCCCC"> can</font><font color="#E5E5E5"> pay</font><font color="#CCCCCC"> me a bit well</font>

821
00:40:11,309 --> 00:40:18,959
it's free beer anyway right so but and

822
00:40:16,289 --> 00:40:21,539
but you're<font color="#CCCCCC"> absolutely right right it's</font>

823
00:40:18,959 --> 00:40:23,698
down to the password I have a very dear

824
00:40:21,539 --> 00:40:26,009
colleague at work he says get rid of the

825
00:40:23,699 --> 00:40:27,660
passwords yeah i<font color="#CCCCCC"> agree with you get rid</font>

826
00:40:26,009 --> 00:40:29,729
<font color="#E5E5E5">of the passwords but bring something</font>

827
00:40:27,660 --> 00:40:33,808
better because i also looked at the face

828
00:40:29,729 --> 00:40:35,578
unlock which is terrible<font color="#E5E5E5"> yeah but and I</font>

829
00:40:33,809 --> 00:40:36,839
guess my second question is this<font color="#E5E5E5"> i mean</font>

830
00:40:35,579 --> 00:40:39,719
<font color="#E5E5E5">because this kind of goes into that</font>

831
00:40:36,839 --> 00:40:41,219
entire discussion the FBI vs apple where

832
00:40:39,719 --> 00:40:42,449
they try to brute force the<font color="#CCCCCC"> apple</font>

833
00:40:41,219 --> 00:40:45,690
because this was exactly what they're

834
00:40:42,449 --> 00:40:47,430
asking for<font color="#E5E5E5"> from</font><font color="#CCCCCC"> apple right well what</font>

835
00:40:45,690 --> 00:40:49,769
else do you think I OS<font color="#E5E5E5"> does better than</font>

836
00:40:47,430 --> 00:40:51,598
Android in that respect and I'm not an

837
00:40:49,769 --> 00:40:53,160
iOS guy just I'm just curious if<font color="#CCCCCC"> you</font>

838
00:40:51,599 --> 00:40:56,249
looked into yeah I'm not<font color="#E5E5E5"> an IRS guy as</font>

839
00:40:53,160 --> 00:40:58,288
well<font color="#E5E5E5"> I had a short look at it when I</font>

840
00:40:56,249 --> 00:40:59,968
understood it<font color="#E5E5E5"> correctly is does more</font>

841
00:40:58,289 --> 00:41:02,069
than just fool disk encryption it does a

842
00:40:59,969 --> 00:41:04,890
file based encryption and actually in

843
00:41:02,069 --> 00:41:06,599
<font color="#E5E5E5">Chrome OS ice also some signs that they</font>

844
00:41:04,890 --> 00:41:09,538
want to<font color="#E5E5E5"> build in that or maybe they've</font>

845
00:41:06,599 --> 00:41:11,940
already done it and I missed it it's

846
00:41:09,539 --> 00:41:13,650
certainly because of the lack what full

847
00:41:11,940 --> 00:41:16,619
disk encryption is you need<font color="#CCCCCC"> to shut down</font>

848
00:41:13,650 --> 00:41:19,019
the device we use smartphones I never

849
00:41:16,619 --> 00:41:20,489
shut<font color="#CCCCCC"> down my smartphone I reboot the</font>

850
00:41:19,019 --> 00:41:23,640
smartphone so the full disk encryption

851
00:41:20,489 --> 00:41:26,340
is never really working for me what we

852
00:41:23,640 --> 00:41:29,460
need is advice in

853
00:41:26,340 --> 00:41:31,350
option + file based encryption if you

854
00:41:29,460 --> 00:41:32,910
only have fire based encryption we still

855
00:41:31,350 --> 00:41:35,759
give away information in the metadata

856
00:41:32,910 --> 00:41:37,350
<font color="#E5E5E5">which also NSA FBI and everyone loves</font>

857
00:41:35,760 --> 00:41:40,650
and i'm not against law enforcement

858
00:41:37,350 --> 00:41:42,900
actually<font color="#CCCCCC"> i was a fortunate to talk to</font>

859
00:41:40,650 --> 00:41:45,330
the lead prosecutor of the canton of

860
00:41:42,900 --> 00:41:50,070
zurich for my master thesis and even he

861
00:41:45,330 --> 00:41:52,490
is on the point to say let's use device

862
00:41:50,070 --> 00:41:56,160
encryption using trypsin please use a do

863
00:41:52,490 --> 00:41:59,100
it's also the crooks that use it yes but

864
00:41:56,160 --> 00:42:01,290
they also use the bad stuff<font color="#E5E5E5"> to make you</font>

865
00:41:59,100 --> 00:42:03,210
hurt to<font color="#E5E5E5"> make you bleed so use it and</font>

866
00:42:01,290 --> 00:42:05,970
secure yourself we have to deal with<font color="#E5E5E5"> it</font>

867
00:42:03,210 --> 00:42:08,250
yes and there's a second trigger point

868
00:42:05,970 --> 00:42:09,990
why I started this topic one of which

869
00:42:08,250 --> 00:42:12,630
was the improvement of the<font color="#E5E5E5"> Android said</font>

870
00:42:09,990 --> 00:42:15,810
and the release of full disk encryption

871
00:42:12,630 --> 00:42:17,970
out of the box<font color="#CCCCCC"> the other</font><font color="#E5E5E5"> one was I think</font>

872
00:42:15,810 --> 00:42:22,470
it's his name is call<font color="#CCCCCC"> me the FBI</font>

873
00:42:17,970 --> 00:42:24,270
director who said we're going dark and I

874
00:42:22,470 --> 00:42:27,359
want<font color="#CCCCCC"> to</font><font color="#E5E5E5"> look at it are we going dark and</font>

875
00:42:24,270 --> 00:42:29,880
ya know not so much right at least<font color="#E5E5E5"> not</font>

876
00:42:27,360 --> 00:42:31,890
with Andre you still have options and

877
00:42:29,880 --> 00:42:35,100
yes brute force in text a howl a lot of

878
00:42:31,890 --> 00:42:38,549
time and a lot of processing power

879
00:42:35,100 --> 00:42:41,660
memory power it does it's complex but

880
00:42:38,550 --> 00:42:41,660
it's still possible

881
00:42:46,940 --> 00:42:54,119
you said<font color="#CCCCCC"> that 128-bit aes key is</font>

882
00:42:52,380 --> 00:42:56,279
stretching is generated on<font color="#CCCCCC"> the first</font>

883
00:42:54,119 --> 00:42:59,670
boot and you hinted that it wouldn't<font color="#CCCCCC"> be</font>

884
00:42:56,279 --> 00:43:01,890
the best<font color="#E5E5E5"> idea are you aware of any</font>

885
00:42:59,670 --> 00:43:04,710
research done looking into the entropy

886
00:43:01,890 --> 00:43:07,078
the effective and entropy of the<font color="#CCCCCC"> AES key</font>

887
00:43:04,710 --> 00:43:09,329
that's the<font color="#E5E5E5"> point no I'm not aware of</font>

888
00:43:07,079 --> 00:43:11,989
that i have this point in my thesis as

889
00:43:09,329 --> 00:43:14,999
future work feel free to<font color="#E5E5E5"> start on that</font>

890
00:43:11,989 --> 00:43:18,239
but think about<font color="#E5E5E5"> it if what is def you</font>

891
00:43:14,999 --> 00:43:21,779
random<font color="#CCCCCC"> its random number generator and</font>

892
00:43:18,239 --> 00:43:24,210
it never blocks and it's not just<font color="#E5E5E5"> the</font>

893
00:43:21,779 --> 00:43:27,059
sixth twice 16 bytes that read from def

894
00:43:24,210 --> 00:43:29,519
you random if android starts up every

895
00:43:27,059 --> 00:43:32,099
calorie that protects against memory

896
00:43:29,519 --> 00:43:36,538
corruption is right from def you random

897
00:43:32,099 --> 00:43:39,599
so<font color="#E5E5E5"> i have the idea that probably the</font>

898
00:43:36,539 --> 00:43:43,019
entropy of the<font color="#E5E5E5"> key kid lack because of</font>

899
00:43:39,599 --> 00:43:44,849
that but<font color="#E5E5E5"> i didn't know analyze this you</font>

900
00:43:43,019 --> 00:43:47,279
need the device<font color="#CCCCCC"> to do that you can not</font>

901
00:43:44,849 --> 00:43:50,309
do it on a virtual machine because it

902
00:43:47,279 --> 00:43:52,440
reads from from the hardware<font color="#E5E5E5"> and I</font>

903
00:43:50,309 --> 00:43:54,410
didn't want<font color="#E5E5E5"> to destroy my phone because</font>

904
00:43:52,440 --> 00:43:56,960
what you<font color="#CCCCCC"> have to do basically is</font>

905
00:43:54,410 --> 00:44:00,660
reiterate the full disk encryption

906
00:43:56,960 --> 00:44:03,029
initiation<font color="#E5E5E5"> process and that writes a lot</font>

907
00:44:00,660 --> 00:44:05,368
of time on your flash memory and as we

908
00:44:03,029 --> 00:44:08,489
all know SSD flash memory doesn't like a

909
00:44:05,369 --> 00:44:11,969
lot<font color="#E5E5E5"> of</font><font color="#CCCCCC"> rights all the time but the issue</font>

910
00:44:08,489 --> 00:44:14,099
is def you random if you shut down it

911
00:44:11,969 --> 00:44:16,589
writes the entropy into a file and

912
00:44:14,099 --> 00:44:21,359
reloads it but their file doesn't exist

913
00:44:16,589 --> 00:44:23,839
on the first boot if i'm<font color="#CCCCCC"> not mistaken so</font>

914
00:44:21,359 --> 00:44:23,839
i<font color="#E5E5E5"> have a look at it</font>

915
00:44:30,870 --> 00:44:36,038
q

916
00:44:32,650 --> 00:44:38,049
I presume that<font color="#CCCCCC"> in time measurement of</font>

917
00:44:36,039 --> 00:44:39,309
two hours includes the S crib

918
00:44:38,049 --> 00:44:41,920
computation of the client is that

919
00:44:39,309 --> 00:44:44,470
correct yes so how<font color="#CCCCCC"> much</font><font color="#E5E5E5"> faster could you</font>

920
00:44:41,920 --> 00:44:47,579
get if you kick I mean if you could

921
00:44:44,470 --> 00:44:50,200
<font color="#CCCCCC">precompute the first</font><font color="#E5E5E5"> iteration of line</font>

922
00:44:47,579 --> 00:44:53,109
then get all the signatures at once I

923
00:44:50,200 --> 00:44:56,589
then<font color="#CCCCCC"> continued on the pc</font><font color="#E5E5E5"> I mean how much</font>

924
00:44:53,109 --> 00:44:58,299
<font color="#E5E5E5">faster would it be I mean I'm asked</font>

925
00:44:56,589 --> 00:44:59,980
about the time minimizing the time you

926
00:44:58,299 --> 00:45:01,779
actually need access to the device yeah

927
00:44:59,980 --> 00:45:03,819
you're<font color="#E5E5E5"> right it's a it's a good point</font>

928
00:45:01,779 --> 00:45:05,859
it's a valid point it's<font color="#E5E5E5"> something how</font>

929
00:45:03,819 --> 00:45:07,980
you could improve the<font color="#E5E5E5"> D brute force</font>

930
00:45:05,859 --> 00:45:10,480
strategy you could start with

931
00:45:07,980 --> 00:45:13,420
essentially creating an intermediate key

932
00:45:10,480 --> 00:45:15,640
dictionary on the on the attack coast

933
00:45:13,420 --> 00:45:17,819
and send over the whole dictionary to

934
00:45:15,640 --> 00:45:21,400
the device and asked you<font color="#E5E5E5"> to sign them</font>

935
00:45:17,819 --> 00:45:24,400
what else we could do is run the attacks

936
00:45:21,400 --> 00:45:27,880
in parallel and increase my plc server

937
00:45:24,400 --> 00:45:29,920
script to take on more connection it

938
00:45:27,880 --> 00:45:31,690
could also<font color="#E5E5E5"> already helped and can you</font>

939
00:45:29,920 --> 00:45:34,869
make an educated guess without minutes

940
00:45:31,690 --> 00:45:36,520
would it be second no<font color="#CCCCCC"> you know well no I</font>

941
00:45:34,869 --> 00:45:39,880
don't want to<font color="#E5E5E5"> make an educated guess</font>

942
00:45:36,520 --> 00:45:41,740
because I can't<font color="#CCCCCC"> okay i'm more of the</font>

943
00:45:39,880 --> 00:45:46,150
person i will try it out and see<font color="#E5E5E5"> okay</font>

944
00:45:41,740 --> 00:45:48,160
I'm Emma if it took minutes are you able

945
00:45:46,150 --> 00:45:52,240
to<font color="#E5E5E5"> restore the device</font><font color="#CCCCCC"> to a usable state</font>

946
00:45:48,160 --> 00:45:55,029
after running the attack I mean it's at

947
00:45:52,240 --> 00:45:59,410
the end<font color="#CCCCCC"> it's writing back the image</font>

948
00:45:55,029 --> 00:46:04,770
right so I would<font color="#E5E5E5"> say yes you think about</font>

949
00:45:59,410 --> 00:46:08,618
evil made attack or something similar no

950
00:46:04,770 --> 00:46:09,910
no<font color="#CCCCCC"> there it's a good point and it means</font>

951
00:46:08,619 --> 00:46:11,440
<font color="#E5E5E5">you would you would probably need twice</font>

952
00:46:09,910 --> 00:46:13,180
because you first need to steal it from

953
00:46:11,440 --> 00:46:15,789
me for a few minutes to take the images

954
00:46:13,180 --> 00:46:18,009
<font color="#E5E5E5">insult and stuff then you can</font>

955
00:46:15,789 --> 00:46:19,510
pre-compute your tables then you wait

956
00:46:18,010 --> 00:46:21,309
until<font color="#CCCCCC"> i'll have lunch or something steal</font>

957
00:46:19,510 --> 00:46:22,539
it again run your attack yeah the

958
00:46:21,309 --> 00:46:24,339
question is how much time would you

959
00:46:22,539 --> 00:46:26,319
actually need that scenarios actually

960
00:46:24,339 --> 00:46:28,779
even better if the user has already a su

961
00:46:26,319 --> 00:46:30,670
binary on the phone all you need is<font color="#E5E5E5"> an</font>

962
00:46:28,779 --> 00:46:32,260
application that allows you<font color="#CCCCCC"> to connect</font>

963
00:46:30,670 --> 00:46:33,849
to the phone you can give<font color="#CCCCCC"> it back to him</font>

964
00:46:32,260 --> 00:46:36,400
and<font color="#E5E5E5"> you never have to go back to device</font>

965
00:46:33,849 --> 00:46:39,779
you just need to be able to to get on

966
00:46:36,400 --> 00:46:43,210
the device and run run the secret<font color="#E5E5E5"> and</font>

967
00:46:39,779 --> 00:46:45,520
<font color="#CCCCCC">okay I let's try it out I would say but</font>

968
00:46:43,210 --> 00:46:46,299
I cannot make<font color="#E5E5E5"> a guess thank you very</font>

969
00:46:45,520 --> 00:46:48,900
much

970
00:46:46,299 --> 00:46:48,900
Quintus

971
00:46:59,859 --> 00:47:01,920
you

