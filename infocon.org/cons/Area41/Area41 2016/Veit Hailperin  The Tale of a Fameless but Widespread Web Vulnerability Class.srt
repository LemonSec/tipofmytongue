1
00:00:08,200 --> 00:00:16,490
let me tell you a<font color="#E5E5E5"> story once upon a time</font>

2
00:00:13,220 --> 00:00:20,390
there were browsers and they were at war

3
00:00:16,490 --> 00:00:24,409
and so they were fighting over<font color="#E5E5E5"> features</font>

4
00:00:20,390 --> 00:00:27,970
and in the kingdom of Netscape they

5
00:00:24,410 --> 00:00:30,830
decided we will need client site

6
00:00:27,970 --> 00:00:33,379
languages and their night<font color="#E5E5E5"> Brendan I came</font>

7
00:00:30,830 --> 00:00:37,910
to the rescue and in only<font color="#CCCCCC"> 10 days they</font>

8
00:00:33,379 --> 00:00:42,289
had JavaScript but all was not good

9
00:00:37,910 --> 00:00:46,989
because<font color="#CCCCCC"> now the local brewery could</font>

10
00:00:42,289 --> 00:00:50,030
access data from the Kings Treasury so

11
00:00:46,989 --> 00:00:55,839
to avoid that they also developed the

12
00:00:50,030 --> 00:01:02,179
same origin policy to keep them out but

13
00:00:55,839 --> 00:01:05,140
this doesn't really hold for all content

14
00:01:02,179 --> 00:01:07,670
types including scripts and JSONP and

15
00:01:05,140 --> 00:01:10,490
they can be<font color="#E5E5E5"> included cross-domain and</font>

16
00:01:07,670 --> 00:01:13,700
that is why we have cross-site scripting

17
00:01:10,490 --> 00:01:15,759
clusion and that was the tale of a

18
00:01:13,700 --> 00:01:19,700
<font color="#CCCCCC">fameless' but widespread vulnerability</font>

19
00:01:15,759 --> 00:01:22,040
my name is fight hyperon<font color="#E5E5E5"> I am NOT a char</font>

20
00:01:19,700 --> 00:01:24,920
and the stalk is definitely not about

21
00:01:22,040 --> 00:01:27,890
cross-site scripting even though the

22
00:01:24,920 --> 00:01:30,049
name does<font color="#CCCCCC"> sound close</font><font color="#E5E5E5"> it has nothing to</font>

23
00:01:27,890 --> 00:01:31,600
do with it<font color="#E5E5E5"> so toss it out and if you</font>

24
00:01:30,049 --> 00:01:35,840
ever<font color="#E5E5E5"> want to give feedback on the</font>

25
00:01:31,600 --> 00:01:37,850
feedback list later on<font color="#E5E5E5"> it's you probably</font>

26
00:01:35,840 --> 00:01:39,439
<font color="#CCCCCC">have to put it into a shower but just</font>

27
00:01:37,850 --> 00:01:40,640
know it you're<font color="#E5E5E5"> not giving our shower the</font>

28
00:01:39,439 --> 00:01:43,490
feedback but you're giving<font color="#E5E5E5"> me the</font>

29
00:01:40,640 --> 00:01:48,320
feedback so be nice all right you can

30
00:01:43,490 --> 00:01:51,380
<font color="#CCCCCC">find me on Twitter and yeah so name was</font>

31
00:01:48,320 --> 00:01:53,869
fights not a char and I work for a

32
00:01:51,380 --> 00:01:55,850
company called<font color="#E5E5E5"> skip here in Switzerland</font>

33
00:01:53,869 --> 00:01:59,689
it's just about three minutes that way

34
00:01:55,850 --> 00:02:01,520
and it's a security<font color="#CCCCCC"> company we do</font>

35
00:01:59,689 --> 00:02:04,850
offensive security we do defense of

36
00:02:01,520 --> 00:02:08,899
security I'm in the offensive security

37
00:02:04,850 --> 00:02:12,859
department lots of auditing pentas web

38
00:02:08,899 --> 00:02:16,849
apps networks all that stuff we do

39
00:02:12,860 --> 00:02:18,910
research and it does overlap as as

40
00:02:16,849 --> 00:02:21,760
amazing graph shows you

41
00:02:18,910 --> 00:02:23,829
and oh that's what you were not

42
00:02:21,760 --> 00:02:25,510
wondering about that<font color="#CCCCCC"> all right so in</font>

43
00:02:23,830 --> 00:02:27,250
case that was too quick just before hand

44
00:02:25,510 --> 00:02:32,200
cross-site scripting clusion how does

45
00:02:27,250 --> 00:02:36,370
this work so for that<font color="#E5E5E5"> I like to quickly</font>

46
00:02:32,200 --> 00:02:41,260
go into a live demo let's<font color="#E5E5E5"> see if this</font>

47
00:02:36,370 --> 00:02:42,910
fails um so we need to quickly look at

48
00:02:41,260 --> 00:02:45,519
<font color="#E5E5E5">something that</font><font color="#CCCCCC"> is very</font><font color="#E5E5E5"> very essential</font>

49
00:02:42,910 --> 00:02:47,829
and that's the same origin policy so

50
00:02:45,520 --> 00:02:49,090
I've mentioned the same origin policy

51
00:02:47,830 --> 00:02:53,290
quickly in the same origin policy

52
00:02:49,090 --> 00:02:56,050
basically what it is it's as supposed to

53
00:02:53,290 --> 00:02:58,239
keep you out supposed to<font color="#E5E5E5"> keep you from</font>

54
00:02:56,050 --> 00:03:01,060
accessing data that's on different

55
00:02:58,240 --> 00:03:02,650
websites as a bit abstract maybe for

56
00:03:01,060 --> 00:03:05,170
some for some of the you this might be

57
00:03:02,650 --> 00:03:07,630
the most<font color="#E5E5E5"> normal thing ever but I decided</font>

58
00:03:05,170 --> 00:03:12,269
that<font color="#E5E5E5"> we're going to quickly look at what</font>

59
00:03:07,630 --> 00:03:15,460
<font color="#CCCCCC">that means so what we're going to do is</font>

60
00:03:12,270 --> 00:03:20,230
we're going<font color="#E5E5E5"> to have an</font><font color="#CCCCCC"> a frame and we're</font>

61
00:03:15,460 --> 00:03:24,250
going<font color="#CCCCCC"> to call it area and the source is</font>

62
00:03:20,230 --> 00:03:25,600
going to be it's gotta be<font color="#CCCCCC"> HTTPS</font>

63
00:03:24,250 --> 00:03:30,310
otherwise it's going to have a mixed

64
00:03:25,600 --> 00:03:34,510
content arrow can<font color="#CCCCCC"> I do this</font><font color="#E5E5E5"> a little bit</font>

65
00:03:30,310 --> 00:03:37,120
smaller<font color="#E5E5E5"> and you'll still see it so area</font>

66
00:03:34,510 --> 00:03:44,079
so let's take area 41 that I oh let's

67
00:03:37,120 --> 00:03:48,280
access their data hn whatever yeah so we

68
00:03:44,080 --> 00:03:50,860
include<font color="#CCCCCC"> that and then now we want</font><font color="#E5E5E5"> to</font>

69
00:03:48,280 --> 00:03:54,880
access their data so we go window that

70
00:03:50,860 --> 00:03:59,280
frames and we access that frame and we

71
00:03:54,880 --> 00:04:04,480
go give us that document and we run and

72
00:03:59,280 --> 00:04:06,910
it loads the image so something loads it

73
00:04:04,480 --> 00:04:09,640
frames<font color="#E5E5E5"> the page but the moment I want to</font>

74
00:04:06,910 --> 00:04:12,250
access it you can see down here and I'm

75
00:04:09,640 --> 00:04:13,720
<font color="#CCCCCC">not sure if you can see it uncut</font>

76
00:04:12,250 --> 00:04:16,810
security error blocked a frame with

77
00:04:13,720 --> 00:04:20,980
origin from accessing a frame with

78
00:04:16,810 --> 00:04:23,440
origin area 41 dot<font color="#CCCCCC"> io protocols domains</font>

79
00:04:20,980 --> 00:04:25,080
and ports must match so basically<font color="#E5E5E5"> what</font>

80
00:04:23,440 --> 00:04:27,910
that is<font color="#E5E5E5"> that's the same origin policy</font>

81
00:04:25,080 --> 00:04:31,030
same protocol the same domain and the

82
00:04:27,910 --> 00:04:32,560
same port that goes for all browsers

83
00:04:31,030 --> 00:04:38,409
except<font color="#E5E5E5"> Internet</font>

84
00:04:32,560 --> 00:04:40,210
order so yeah so<font color="#CCCCCC"> usually when we call we</font>

85
00:04:38,410 --> 00:04:45,820
talk about same origin policy we assume

86
00:04:40,210 --> 00:04:51,099
the one of modern browsers<font color="#CCCCCC"> all right so</font>

87
00:04:45,820 --> 00:04:53,159
let's let's clear this out and see what

88
00:04:51,100 --> 00:04:57,730
happens when we include a script

89
00:04:53,160 --> 00:05:03,220
actually I'm going<font color="#E5E5E5"> to so we have a text</font>

90
00:04:57,730 --> 00:05:05,290
javascript and we have a source and i'm

91
00:05:03,220 --> 00:05:08,220
going<font color="#E5E5E5"> to copy this URL because in this</font>

92
00:05:05,290 --> 00:05:08,220
is too much to type

93
00:05:16,040 --> 00:05:25,160
all right run a system not defined let's

94
00:05:23,270 --> 00:05:29,900
clear in this just so we don't get a

95
00:05:25,160 --> 00:05:32,030
hearse all right that's<font color="#E5E5E5"> an error inside</font>

96
00:05:29,900 --> 00:05:34,130
the angular 2 GS so it's already

97
00:05:32,030 --> 00:05:37,280
executing it<font color="#E5E5E5"> it's loading it in there's</font>

98
00:05:34,130 --> 00:05:39,050
no this is directly script so we're not

99
00:05:37,280 --> 00:05:41,900
executing anything down here if<font color="#E5E5E5"> this</font>

100
00:05:39,050 --> 00:05:44,750
would be<font color="#CCCCCC"> illegal it would throw an error</font>

101
00:05:41,900 --> 00:05:50,090
down here about<font color="#E5E5E5"> the origin</font><font color="#CCCCCC"> and not about</font>

102
00:05:44,750 --> 00:05:51,920
in javascript error so<font color="#E5E5E5"> basically what</font>

103
00:05:50,090 --> 00:05:54,469
we're seeing here now is that as soon as

104
00:05:51,920 --> 00:05:56,620
data is in form of scripts you can

105
00:05:54,470 --> 00:05:59,630
<font color="#CCCCCC">access it like this is the usual way of</font>

106
00:05:56,620 --> 00:06:02,120
including a model view controller

107
00:05:59,630 --> 00:06:05,170
framework in<font color="#E5E5E5"> JavaScript and then</font>

108
00:06:02,120 --> 00:06:11,660
<font color="#CCCCCC">afterwards you</font><font color="#E5E5E5"> can work</font><font color="#CCCCCC"> with it so</font>

109
00:06:05,170 --> 00:06:14,650
basically this is we could say behavior

110
00:06:11,660 --> 00:06:19,880
as intended you know it's nothing

111
00:06:14,650 --> 00:06:22,880
nothing out of the extraordinary but

112
00:06:19,880 --> 00:06:24,710
what happens<font color="#CCCCCC"> and this</font><font color="#E5E5E5"> is the the key</font>

113
00:06:22,880 --> 00:06:26,510
point about this vulnerability type is

114
00:06:24,710 --> 00:06:30,349
that<font color="#E5E5E5"> what happens if there is sensitive</font>

115
00:06:26,510 --> 00:06:32,900
data in JavaScript files and then it is

116
00:06:30,350 --> 00:06:34,970
the same way as with functionality you

117
00:06:32,900 --> 00:06:39,169
can still access it and that's when you

118
00:06:34,970 --> 00:06:41,990
have data leakage and now you also see

119
00:06:39,170 --> 00:06:47,060
why the name where the name comes from

120
00:06:41,990 --> 00:06:52,040
to include scripts cross-site and that's

121
00:06:47,060 --> 00:06:57,170
all<font color="#CCCCCC"> it is that's really</font><font color="#E5E5E5"> all</font><font color="#CCCCCC"> it is but</font>

122
00:06:52,040 --> 00:07:00,080
let's<font color="#E5E5E5"> look at one more thing so what</font>

123
00:06:57,170 --> 00:07:02,510
about ambient authority so ambient

124
00:07:00,080 --> 00:07:05,659
authorities are not<font color="#E5E5E5"> a word or term we</font>

125
00:07:02,510 --> 00:07:09,320
toss around very much in the in our

126
00:07:05,660 --> 00:07:10,940
field of pen testing or security but

127
00:07:09,320 --> 00:07:13,610
ambien<font color="#CCCCCC"> Authority is Authority</font>

128
00:07:10,940 --> 00:07:16,790
information that is globally stored and

129
00:07:13,610 --> 00:07:21,380
accessible such as cookies<font color="#E5E5E5"> which are</font>

130
00:07:16,790 --> 00:07:24,650
like in a cookie jar available and so I

131
00:07:21,380 --> 00:07:28,520
quickly need you to raise hands to who

132
00:07:24,650 --> 00:07:30,638
is a pen tester in this room or<font color="#E5E5E5"> alright</font>

133
00:07:28,520 --> 00:07:35,599
who is a developer

134
00:07:30,639 --> 00:07:37,610
all right what's the rest one there's

135
00:07:35,600 --> 00:07:41,750
<font color="#E5E5E5">just these two options in my world no</font>

136
00:07:37,610 --> 00:07:44,320
right so basically<font color="#E5E5E5"> it's it works the</font>

137
00:07:41,750 --> 00:07:46,130
same as with cross-site request forgery

138
00:07:44,320 --> 00:07:47,960
when you button cross-site request

139
00:07:46,130 --> 00:07:50,000
forgery for<font color="#E5E5E5"> those I don't know what it</font>

140
00:07:47,960 --> 00:07:53,440
<font color="#CCCCCC">is basically you send a post request to</font>

141
00:07:50,000 --> 00:07:56,030
a website from a malicious site and that

142
00:07:53,440 --> 00:07:58,730
<font color="#CCCCCC">if the users logged in to the other side</font>

143
00:07:56,030 --> 00:08:00,638
you can execute stuff in the context of

144
00:07:58,730 --> 00:08:03,230
the user because the<font color="#E5E5E5"> user is</font>

145
00:08:00,639 --> 00:08:05,990
authenticated and that cookie

146
00:08:03,230 --> 00:08:09,800
information is sent along despite<font color="#CCCCCC"> it</font>

147
00:08:05,990 --> 00:08:11,510
being originating from another yeah

148
00:08:09,800 --> 00:08:13,820
source and that's the same with

149
00:08:11,510 --> 00:08:16,039
cross-site scripting clusion so if<font color="#E5E5E5"> I</font>

150
00:08:13,820 --> 00:08:19,849
include a script from<font color="#E5E5E5"> another website</font>

151
00:08:16,040 --> 00:08:21,830
and the users log in to that website all

152
00:08:19,850 --> 00:08:25,220
the ambient<font color="#E5E5E5"> authority information such</font>

153
00:08:21,830 --> 00:08:26,930
as cookies is sent along so if the

154
00:08:25,220 --> 00:08:29,090
script contains stuff that is only for

155
00:08:26,930 --> 00:08:32,120
<font color="#E5E5E5">that session or only for that user will</font>

156
00:08:29,090 --> 00:08:35,030
get that data and so now you start to

157
00:08:32,120 --> 00:08:36,320
see where why this this is actually

158
00:08:35,030 --> 00:08:39,409
something we have to take serious

159
00:08:36,320 --> 00:08:44,839
because<font color="#E5E5E5"> that is user context relevant</font>

160
00:08:39,409 --> 00:08:46,660
data yeah so I look like to look at

161
00:08:44,839 --> 00:08:51,860
another example and this<font color="#E5E5E5"> is an example</font>

162
00:08:46,660 --> 00:08:55,819
<font color="#CCCCCC">from a website it's a top Alexa 150-page</font>

163
00:08:51,860 --> 00:08:59,570
so it's quite as a quite good base of

164
00:08:55,820 --> 00:09:02,350
users<font color="#CCCCCC"> I'll just see what we what we</font>

165
00:08:59,570 --> 00:09:05,540
found so I have to<font color="#E5E5E5"> explain a little more</font>

166
00:09:02,350 --> 00:09:09,470
some of you might know Jason fairly well

167
00:09:05,540 --> 00:09:12,500
maybe even personally but so we have

168
00:09:09,470 --> 00:09:14,870
basically Jason is nothing else an

169
00:09:12,500 --> 00:09:18,010
object notation for<font color="#E5E5E5"> JavaScript yeah</font>

170
00:09:14,870 --> 00:09:21,020
that's what<font color="#CCCCCC"> it</font><font color="#E5E5E5"> stands for and it's a key</font>

171
00:09:18,010 --> 00:09:23,780
value pair so as you can see for example

172
00:09:21,020 --> 00:09:27,350
there it goes status that's the key and

173
00:09:23,780 --> 00:09:28,880
<font color="#E5E5E5">the values 200 comma there's a next key</font>

174
00:09:27,350 --> 00:09:30,020
and then there's<font color="#CCCCCC"> a</font><font color="#E5E5E5"> next value and the</font>

175
00:09:28,880 --> 00:09:33,339
next<font color="#E5E5E5"> value is a little bit more</font>

176
00:09:30,020 --> 00:09:37,100
complicated when it's a new JSON object

177
00:09:33,339 --> 00:09:39,610
now in this<font color="#E5E5E5"> case if you return data is</font>

178
00:09:37,100 --> 00:09:42,620
Jason you can't access<font color="#E5E5E5"> it cross-domain</font>

179
00:09:39,610 --> 00:09:44,000
because the curly braces that we have

180
00:09:42,620 --> 00:09:46,470
here<font color="#E5E5E5"> in the beginning</font>

181
00:09:44,000 --> 00:09:49,140
after the foo open<font color="#CCCCCC"> parenthesis there's</font>

182
00:09:46,470 --> 00:09:53,480
curly braces here and they<font color="#CCCCCC"> are not</font>

183
00:09:49,140 --> 00:09:56,939
<font color="#CCCCCC">they're not</font><font color="#E5E5E5"> possibly valid JavaScript in</font>

184
00:09:53,480 --> 00:09:58,649
the context of that<font color="#E5E5E5"> so you can't execute</font>

185
00:09:56,940 --> 00:10:02,339
it if I<font color="#E5E5E5"> would include that cross domain</font>

186
00:09:58,649 --> 00:10:06,570
I would throw an error but this is jason

187
00:10:02,339 --> 00:10:09,300
p which is jason with padding and you

188
00:10:06,570 --> 00:10:11,490
provide a callback function to that

189
00:10:09,300 --> 00:10:14,579
Jason and which what it does<font color="#E5E5E5"> is you see</font>

190
00:10:11,490 --> 00:10:17,820
here that callback is a as a parameter

191
00:10:14,580 --> 00:10:21,420
and that parameter is basically the

192
00:10:17,820 --> 00:10:23,580
function name and<font color="#CCCCCC"> that is just with the</font>

193
00:10:21,420 --> 00:10:25,890
open parentis season and<font color="#E5E5E5"> close print so</font>

194
00:10:23,580 --> 00:10:28,200
it just gets wrapped around it so this

195
00:10:25,890 --> 00:10:33,980
gives us of course<font color="#E5E5E5"> access to the data</font>

196
00:10:28,200 --> 00:10:36,390
and it is valid script so am basically

197
00:10:33,980 --> 00:10:37,709
what we are<font color="#E5E5E5"> going to do now</font><font color="#CCCCCC"> to exploit</font>

198
00:10:36,390 --> 00:10:40,439
this we're<font color="#E5E5E5"> going to go from bottom to</font>

199
00:10:37,709 --> 00:10:43,170
top very counterintuitive but we include

200
00:10:40,440 --> 00:10:46,529
the script as we did before the source

201
00:10:43,170 --> 00:10:48,750
and then we provide<font color="#E5E5E5"> our own callback</font>

202
00:10:46,529 --> 00:10:50,790
which we're going to call leak and it's

203
00:10:48,750 --> 00:10:53,279
<font color="#E5E5E5">a type text/javascript</font><font color="#CCCCCC"> weld on and then</font>

204
00:10:50,790 --> 00:10:55,860
up here we define the callback that

205
00:10:53,279 --> 00:10:57,990
we're passing<font color="#E5E5E5"> on to them and it's going</font>

206
00:10:55,860 --> 00:10:59,790
<font color="#E5E5E5">to take an argument which is after which</font>

207
00:10:57,990 --> 00:11:02,089
they're going to be the<font color="#CCCCCC"> JSON of</font><font color="#E5E5E5"> course</font>

208
00:10:59,790 --> 00:11:07,319
and we're doing<font color="#E5E5E5"> nothing else then</font>

209
00:11:02,089 --> 00:11:11,339
json.stringify of the leaks data in

210
00:11:07,320 --> 00:11:15,690
there so if we<font color="#E5E5E5"> I'm not</font><font color="#CCCCCC"> sure if you saw</font>

211
00:11:11,339 --> 00:11:18,510
what was in that data so there is email

212
00:11:15,690 --> 00:11:19,830
address there's first name there's<font color="#E5E5E5"> last</font>

213
00:11:18,510 --> 00:11:22,020
name there's a phone number there's a

214
00:11:19,830 --> 00:11:25,500
user name there's a gender there's a

215
00:11:22,020 --> 00:11:32,699
date of birth and there's location with

216
00:11:25,500 --> 00:11:35,430
exact geolocation data so now as you've

217
00:11:32,700 --> 00:11:38,459
seen the exploit is not particularly

218
00:11:35,430 --> 00:11:41,339
difficult if you manage to get<font color="#E5E5E5"> anybody</font>

219
00:11:38,459 --> 00:11:43,020
on that website who's logged in and it's

220
00:11:41,339 --> 00:11:45,170
a website<font color="#CCCCCC"> that doesn't make any</font><font color="#E5E5E5"> sense if</font>

221
00:11:43,020 --> 00:11:47,730
you're<font color="#E5E5E5"> not logged in to be honest</font><font color="#CCCCCC"> i</font>

222
00:11:45,170 --> 00:11:50,550
<font color="#CCCCCC">blurt it out because</font><font color="#E5E5E5"> they haven't fixed</font>

223
00:11:47,730 --> 00:11:52,140
it which might be partially because they

224
00:11:50,550 --> 00:11:54,300
don't<font color="#E5E5E5"> know about I never reported it but</font>

225
00:11:52,140 --> 00:11:56,250
that's a different<font color="#E5E5E5"> it's a different</font>

226
00:11:54,300 --> 00:11:57,449
story and they have they have really

227
00:11:56,250 --> 00:12:01,470
have other issues and

228
00:11:57,450 --> 00:12:04,710
and which is not good for them but yeah

229
00:12:01,470 --> 00:12:08,070
so as soon as somebody goes now to to a

230
00:12:04,710 --> 00:12:12,960
website where this is written they'll

231
00:12:08,070 --> 00:12:15,060
see this so basically I've got access

232
00:12:12,960 --> 00:12:19,580
now on my own licious website to the

233
00:12:15,060 --> 00:12:19,579
<font color="#E5E5E5">content that the other side sent back</font>

234
00:12:20,210 --> 00:12:27,420
this is bad this is really bad this is

235
00:12:24,120 --> 00:12:30,740
way too<font color="#E5E5E5"> much personal information way</font>

236
00:12:27,420 --> 00:12:36,319
too sensitive data to just get like

237
00:12:30,740 --> 00:12:36,320
exploit it with basically one line yeah

238
00:12:37,190 --> 00:12:45,690
so yeah I did say<font color="#CCCCCC"> fameless' thanks for</font>

239
00:12:40,290 --> 00:12:48,240
asking there is there's one book that I

240
00:12:45,690 --> 00:12:51,660
that I like very much and it's the

241
00:12:48,240 --> 00:12:53,910
tangled web buy me a little<font color="#E5E5E5"> F ski it's</font>

242
00:12:51,660 --> 00:12:55,170
for a developer's I highly recommend it

243
00:12:53,910 --> 00:12:56,280
if you haven't<font color="#CCCCCC"> read it</font><font color="#E5E5E5"> if your pen</font>

244
00:12:55,170 --> 00:12:58,860
tester you haven't read<font color="#E5E5E5"> it i highly</font>

245
00:12:56,280 --> 00:13:00,380
recommend it to there is a german

246
00:12:58,860 --> 00:13:04,470
translation by mario<font color="#CCCCCC"> hydraulic and</font>

247
00:13:00,380 --> 00:13:07,020
excess SI this type of vulnerability

248
00:13:04,470 --> 00:13:09,150
it's mentioned in a footnote this is

249
00:13:07,020 --> 00:13:12,420
this is how much fame it gets in like a

250
00:13:09,150 --> 00:13:15,240
book about security this is not<font color="#E5E5E5"> a critic</font>

251
00:13:12,420 --> 00:13:17,610
about the book it's more<font color="#E5E5E5"> like it doesn't</font>

252
00:13:15,240 --> 00:13:19,710
seem to<font color="#E5E5E5"> appear important and if you go</font>

253
00:13:17,610 --> 00:13:21,720
to<font color="#E5E5E5"> the</font><font color="#CCCCCC"> OWASP website and you search for</font>

254
00:13:19,710 --> 00:13:26,610
cross-site scripting clusion you'll find

255
00:13:21,720 --> 00:13:30,270
<font color="#CCCCCC">nothing and if you if you search with</font>

256
00:13:26,610 --> 00:13:31,500
the<font color="#E5E5E5"> site dot org on google you'll find</font>

257
00:13:30,270 --> 00:13:33,780
two pdfs where cross-site scripting

258
00:13:31,500 --> 00:13:37,170
clusion is mentioned or about cross-site

259
00:13:33,780 --> 00:13:39,990
scripting clusion and basically we have

260
00:13:37,170 --> 00:13:43,229
<font color="#E5E5E5">to we have to think about this in a in a</font>

261
00:13:39,990 --> 00:13:46,110
way that we say<font color="#E5E5E5"> all right people come</font>

262
00:13:43,230 --> 00:13:47,550
into our industry all the time and what

263
00:13:46,110 --> 00:13:50,250
do they look at when they look for web

264
00:13:47,550 --> 00:13:53,040
vulnerabilities well they look at the

265
00:13:50,250 --> 00:13:55,230
<font color="#CCCCCC">OWASP standard and if it's</font><font color="#E5E5E5"> not in the</font>

266
00:13:53,040 --> 00:13:58,500
top<font color="#CCCCCC"> ten it's already get bad chances of</font>

267
00:13:55,230 --> 00:14:00,750
being<font color="#E5E5E5"> found at least for beginners and</font>

268
00:13:58,500 --> 00:14:02,880
if it's not mentioned anywhere on that

269
00:14:00,750 --> 00:14:04,770
site chances that anybody really cares

270
00:14:02,880 --> 00:14:10,620
about this is really really low so<font color="#E5E5E5"> yeah</font>

271
00:14:04,770 --> 00:14:11,279
it is<font color="#CCCCCC"> fameless' but I</font><font color="#E5E5E5"> also said it with</font>

272
00:14:10,620 --> 00:14:14,220
widespread

273
00:14:11,279 --> 00:14:16,319
and this is a quote from<font color="#E5E5E5"> a paper the</font>

274
00:14:14,220 --> 00:14:18,540
unexpected dangers of dynamic<font color="#E5E5E5"> JavaScript</font>

275
00:14:16,319 --> 00:14:21,149
we observed that<font color="#E5E5E5"> a third of the surveyed</font>

276
00:14:18,540 --> 00:14:22,439
sites utilize dynamic<font color="#E5E5E5"> JavaScript more</font>

277
00:14:21,149 --> 00:14:25,319
than eighty percent of the sites are

278
00:14:22,439 --> 00:14:29,748
susceptible to attacks via remote script

279
00:14:25,319 --> 00:14:32,759
inclusion that that is<font color="#E5E5E5"> quite a lot and</font>

280
00:14:29,749 --> 00:14:34,199
recently as somebody told me I I tried

281
00:14:32,759 --> 00:14:36,120
to search for it and I didn't find it on

282
00:14:34,199 --> 00:14:39,269
<font color="#CCCCCC">the first page so I I guess I stopped</font>

283
00:14:36,120 --> 00:14:41,040
again that's nice you should go through

284
00:14:39,269 --> 00:14:43,350
at least three pages which is

285
00:14:41,040 --> 00:14:46,498
statistically like really really low

286
00:14:43,350 --> 00:14:50,850
chance but still and to be honest this

287
00:14:46,499 --> 00:14:57,959
is like a number that correlates with my

288
00:14:50,850 --> 00:14:59,519
daily pen tests that I do and one more

289
00:14:57,959 --> 00:15:02,758
thing about<font color="#E5E5E5"> this this is just about</font>

290
00:14:59,519 --> 00:15:04,199
<font color="#E5E5E5">dynamic JavaScript but I'm talking about</font>

291
00:15:02,759 --> 00:15:09,529
<font color="#E5E5E5">cross-site scripting clusion and that's</font>

292
00:15:04,199 --> 00:15:11,779
just one part and I think<font color="#CCCCCC"> for</font>

293
00:15:09,529 --> 00:15:14,309
vulnerabilities to get more traction

294
00:15:11,779 --> 00:15:17,279
it's good if<font color="#E5E5E5"> they're categorized and</font>

295
00:15:14,309 --> 00:15:19,170
they're like you can see the different

296
00:15:17,279 --> 00:15:21,689
scopes like an XSS you've got reflected

297
00:15:19,170 --> 00:15:23,969
and stored and done based and universal

298
00:15:21,689 --> 00:15:25,920
and mutation based and got all the whole

299
00:15:23,970 --> 00:15:27,029
funky stories and in cross-site

300
00:15:25,920 --> 00:15:28,529
scripting solution is a little bit like

301
00:15:27,029 --> 00:15:31,589
it's a curse a script inclusion

302
00:15:28,529 --> 00:15:37,829
vulnerability we<font color="#E5E5E5"> don't really know what</font>

303
00:15:31,589 --> 00:15:43,019
it is exactly so I hoped<font color="#E5E5E5"> to fix this by</font>

304
00:15:37,829 --> 00:15:44,550
categorizing them myself<font color="#E5E5E5"> so if you if</font>

305
00:15:43,019 --> 00:15:46,139
you disagree with the categories feel

306
00:15:44,550 --> 00:15:48,689
free to let me know<font color="#E5E5E5"> if you have a better</font>

307
00:15:46,139 --> 00:15:51,600
idea or whatever but I think this sums

308
00:15:48,689 --> 00:15:55,050
it up pretty well first cattery static

309
00:15:51,600 --> 00:15:58,019
java script or<font color="#CCCCCC"> jsonp with</font><font color="#E5E5E5"> jason p of</font>

310
00:15:55,050 --> 00:15:59,370
course if there's other parameters you

311
00:15:58,019 --> 00:16:01,500
have to know<font color="#E5E5E5"> the values of them</font>

312
00:15:59,370 --> 00:16:03,329
otherwise it won't work so if there is a

313
00:16:01,500 --> 00:16:06,139
cross-site request forgery token in

314
00:16:03,329 --> 00:16:10,109
there unfortunately won't work but

315
00:16:06,139 --> 00:16:12,300
otherwise static JavaScript<font color="#E5E5E5"> you you've</font>

316
00:16:10,110 --> 00:16:18,569
<font color="#E5E5E5">seen it</font><font color="#CCCCCC"> in the example you just include</font>

317
00:16:12,300 --> 00:16:20,099
it and there it goes and then there's

318
00:16:18,569 --> 00:16:22,229
static<font color="#CCCCCC"> JavaScript requiring</font>

319
00:16:20,100 --> 00:16:24,660
authentication which I consider category

320
00:16:22,230 --> 00:16:27,389
number two and that is when<font color="#E5E5E5"> you agree</font>

321
00:16:24,660 --> 00:16:30,449
qwest something and you need the ambient

322
00:16:27,389 --> 00:16:33,029
authority to get that data you need the

323
00:16:30,449 --> 00:16:35,579
user to be<font color="#E5E5E5"> logged in it's really funny I</font>

324
00:16:33,029 --> 00:16:38,639
<font color="#CCCCCC">don't see much in</font><font color="#E5E5E5"> the back but I see</font>

325
00:16:35,579 --> 00:16:42,449
<font color="#CCCCCC">like blinking lights it's nice I know</font>

326
00:16:38,639 --> 00:16:45,149
somebody's there<font color="#E5E5E5"> all right yeah</font><font color="#CCCCCC"> so as</font>

327
00:16:42,449 --> 00:16:47,699
long<font color="#CCCCCC"> as you send the cookies along then</font>

328
00:16:45,149 --> 00:16:51,480
you'll get access to different static

329
00:16:47,699 --> 00:16:53,430
scripts and then<font color="#E5E5E5"> number category</font><font color="#CCCCCC"> three</font>

330
00:16:51,480 --> 00:16:56,430
is dynamic<font color="#E5E5E5"> JavaScript and dynamic</font>

331
00:16:53,430 --> 00:16:58,469
<font color="#E5E5E5">JavaScript basically can fall into the</font>

332
00:16:56,430 --> 00:17:01,019
unauthenticated or into the

333
00:16:58,470 --> 00:17:03,149
authenticated category doesn't really

334
00:17:01,019 --> 00:17:08,780
matter the<font color="#E5E5E5"> point about dynamic</font>

335
00:17:03,149 --> 00:17:11,400
javascript is is generated on some basis

336
00:17:08,780 --> 00:17:14,369
it could be because<font color="#E5E5E5"> of the user logging</font>

337
00:17:11,400 --> 00:17:16,230
in so it could<font color="#CCCCCC"> be dynamic on that but it</font>

338
00:17:14,369 --> 00:17:17,819
could be also dynamic because<font color="#E5E5E5"> it's</font>

339
00:17:16,230 --> 00:17:20,010
advertising or because there's a

340
00:17:17,819 --> 00:17:22,289
<font color="#CCCCCC">timestamp</font><font color="#E5E5E5"> in it which is has to be</font>

341
00:17:20,010 --> 00:17:26,549
renewed so there's many reasons for

342
00:17:22,289 --> 00:17:30,480
dynamic<font color="#CCCCCC"> javascript to be but</font><font color="#E5E5E5"> the</font>

343
00:17:26,549 --> 00:17:32,150
<font color="#E5E5E5">interesting one for us is and that's why</font>

344
00:17:30,480 --> 00:17:34,140
<font color="#E5E5E5">I didn't distinguish between</font>

345
00:17:32,150 --> 00:17:35,909
authenticated and unauthenticated one

346
00:17:34,140 --> 00:17:39,870
the<font color="#E5E5E5"> dynamic</font><font color="#CCCCCC"> JavaScript really starts to</font>

347
00:17:35,909 --> 00:17:41,820
get interesting when when a user is<font color="#E5E5E5"> in</font>

348
00:17:39,870 --> 00:17:44,820
an authenticated context so then when

349
00:17:41,820 --> 00:17:46,939
you request stuff it will be dynamic on

350
00:17:44,820 --> 00:17:49,860
the user context and then we'll<font color="#E5E5E5"> have</font>

351
00:17:46,940 --> 00:17:51,179
user data use a relevant data and then

352
00:17:49,860 --> 00:17:53,219
there is<font color="#CCCCCC"> a category number four</font><font color="#E5E5E5"> which</font>

353
00:17:51,179 --> 00:17:55,799
might sound a little odd because it's

354
00:17:53,220 --> 00:18:00,299
the non script one so cross-site non

355
00:17:55,799 --> 00:18:05,129
script inclusion basically the idea here

356
00:18:00,299 --> 00:18:07,440
is that we that we<font color="#E5E5E5"> include data in the</font>

357
00:18:05,130 --> 00:18:10,350
script tag in the source as we saw in

358
00:18:07,440 --> 00:18:12,360
the jsfiddle example before but it's not

359
00:18:10,350 --> 00:18:14,459
a script file that<font color="#E5E5E5"> we're including we're</font>

360
00:18:12,360 --> 00:18:17,129
just saying included as a script and

361
00:18:14,460 --> 00:18:21,530
then javascript is a fairly loosely

362
00:18:17,130 --> 00:18:24,539
defined language so we can we can trick

363
00:18:21,530 --> 00:18:26,639
sometimes the browser into thinking like

364
00:18:24,539 --> 00:18:27,960
oh this is JavaScript all right I think

365
00:18:26,640 --> 00:18:29,520
<font color="#CCCCCC">I think I see this this is the</font>

366
00:18:27,960 --> 00:18:32,070
<font color="#E5E5E5">identifier and then there's</font><font color="#CCCCCC"> account oh</font>

367
00:18:29,520 --> 00:18:34,320
no this<font color="#E5E5E5"> didn't work well I'll throw an</font>

368
00:18:32,070 --> 00:18:37,760
error but you'll still get access to the

369
00:18:34,320 --> 00:18:41,200
data so this<font color="#CCCCCC"> happened</font>

370
00:18:37,760 --> 00:18:45,830
with all sorts of data amongst others

371
00:18:41,200 --> 00:18:47,840
CSV data that was<font color="#E5E5E5"> a lot</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> fun and there</font>

372
00:18:45,830 --> 00:18:50,090
is a good paper about it by takeshi

373
00:18:47,840 --> 00:18:52,250
<font color="#CCCCCC">terada which</font><font color="#E5E5E5"> i highly recommend you read</font>

374
00:18:50,090 --> 00:18:54,439
lots of the stuff he reported like years

375
00:18:52,250 --> 00:18:59,320
<font color="#CCCCCC">ago and just some of them got fixed like</font>

376
00:18:54,440 --> 00:19:01,700
end last year<font color="#E5E5E5"> beginning this year so</font>

377
00:18:59,320 --> 00:19:04,490
there's also chances you'll find more of

378
00:19:01,700 --> 00:19:06,800
that but these issues number four they

379
00:19:04,490 --> 00:19:09,290
are<font color="#E5E5E5"> really they're really browser issues</font>

380
00:19:06,800 --> 00:19:12,290
and the other one our application issues

381
00:19:09,290 --> 00:19:16,820
so will not<font color="#E5E5E5"> look too much into the</font>

382
00:19:12,290 --> 00:19:20,870
category number four but mainly about

383
00:19:16,820 --> 00:19:25,189
the first three let's find some

384
00:19:20,870 --> 00:19:27,379
cross-site scripting clusion so finding

385
00:19:25,190 --> 00:19:29,320
category number one you will not get

386
00:19:27,380 --> 00:19:31,340
around it you'll have<font color="#CCCCCC"> to read the code</font>

387
00:19:29,320 --> 00:19:33,730
which might be unfortunate for you

388
00:19:31,340 --> 00:19:35,810
especially if you<font color="#E5E5E5"> don't like</font><font color="#CCCCCC"> javascript</font>

389
00:19:33,730 --> 00:19:37,790
but there is of course some things<font color="#CCCCCC"> that</font>

390
00:19:35,810 --> 00:19:41,360
<font color="#E5E5E5">you can do to to help this a little bit</font>

391
00:19:37,790 --> 00:19:44,420
so you can<font color="#E5E5E5"> grab for public keys or</font>

392
00:19:41,360 --> 00:19:46,760
private keys you can<font color="#E5E5E5"> grab for</font><font color="#CCCCCC"> social</font>

393
00:19:44,420 --> 00:19:48,500
<font color="#CCCCCC">security</font><font color="#E5E5E5"> numbers you can grab for credit</font>

394
00:19:46,760 --> 00:19:50,990
card<font color="#E5E5E5"> numbers they always there's like</font>

395
00:19:48,500 --> 00:19:53,900
reg ex as you can you can use for that

396
00:19:50,990 --> 00:19:59,120
and if you're using burp suite by the

397
00:19:53,900 --> 00:20:03,290
way burps not beef you'll you'll have a

398
00:19:59,120 --> 00:20:04,639
support<font color="#E5E5E5"> bye-bye burp to do that so it</font>

399
00:20:03,290 --> 00:20:10,010
will already<font color="#E5E5E5"> tell you they're sensitive</font>

400
00:20:04,640 --> 00:20:11,720
data inside inside the file so this<font color="#CCCCCC"> is</font>

401
00:20:10,010 --> 00:20:15,140
nice if you have burp if you don't have

402
00:20:11,720 --> 00:20:16,580
burp does a<font color="#E5E5E5"> little bit more work finding</font>

403
00:20:15,140 --> 00:20:19,790
category number two and three is a

404
00:20:16,580 --> 00:20:23,179
little bit like a mixed thing so<font color="#E5E5E5"> I</font>

405
00:20:19,790 --> 00:20:24,560
decided to<font color="#CCCCCC"> put it into this shape to</font>

406
00:20:23,180 --> 00:20:27,830
give you context for this where we're

407
00:20:24,560 --> 00:20:30,919
starting we are in<font color="#CCCCCC"> the situation</font><font color="#E5E5E5"> of</font>

408
00:20:27,830 --> 00:20:32,540
browsing a website in an authenticated

409
00:20:30,920 --> 00:20:37,970
context so that's important that we're

410
00:20:32,540 --> 00:20:41,899
in antic context and authenticated

411
00:20:37,970 --> 00:20:44,590
context and now that we've been like

412
00:20:41,900 --> 00:20:49,070
getting a lots<font color="#E5E5E5"> of the</font><font color="#CCCCCC"> JavaScript files</font>

413
00:20:44,590 --> 00:20:50,899
with the cookies sent along or we'll do

414
00:20:49,070 --> 00:20:51,649
is we'll re-request the javascript file

415
00:20:50,900 --> 00:20:55,460
now

416
00:20:51,650 --> 00:21:00,860
want to test and we remove the ambient

417
00:20:55,460 --> 00:21:03,260
<font color="#E5E5E5">authority information and if it's still</font>

418
00:21:00,860 --> 00:21:07,189
<font color="#E5E5E5">a screw if it's not a script anymore we</font>

419
00:21:03,260 --> 00:21:09,170
know that if it's authenticated we'll

420
00:21:07,190 --> 00:21:12,200
get a script and if we're not<font color="#E5E5E5"> we don't</font>

421
00:21:09,170 --> 00:21:14,360
so there's a static javascript file that

422
00:21:12,200 --> 00:21:18,140
is only available while we're

423
00:21:14,360 --> 00:21:21,860
authenticated if it is a script will

424
00:21:18,140 --> 00:21:25,040
have to check if the answer differs from

425
00:21:21,860 --> 00:21:28,090
<font color="#E5E5E5">the original and if it doesn't differ</font>

426
00:21:25,040 --> 00:21:30,170
it's just<font color="#E5E5E5"> a JavaScript file static</font>

427
00:21:28,090 --> 00:21:33,520
doesn't really matter scripts<font color="#E5E5E5"> not</font>

428
00:21:30,170 --> 00:21:38,240
dynamic scripts not probably sensitive

429
00:21:33,520 --> 00:21:40,940
unless category number one if it does

430
00:21:38,240 --> 00:21:42,950
differ what we'll do is we<font color="#E5E5E5"> could just</font>

431
00:21:40,940 --> 00:21:45,260
say<font color="#CCCCCC"> all right so we've got a different</font>

432
00:21:42,950 --> 00:21:47,240
one now in authenticated in an

433
00:21:45,260 --> 00:21:49,010
unauthenticated so what we know already

434
00:21:47,240 --> 00:21:52,340
is there something based on

435
00:21:49,010 --> 00:21:54,230
authentication but what<font color="#E5E5E5"> will now want to</font>

436
00:21:52,340 --> 00:21:56,540
exclude is we want<font color="#E5E5E5"> to exclude the</font>

437
00:21:54,230 --> 00:21:58,040
generically dynamic stuff the stuff

438
00:21:56,540 --> 00:22:00,740
we've been<font color="#E5E5E5"> talking about the time stamps</font>

439
00:21:58,040 --> 00:22:04,550
the advertising so<font color="#E5E5E5"> it will re request it</font>

440
00:22:00,740 --> 00:22:07,160
again and if it's if the answer doesn't

441
00:22:04,550 --> 00:22:08,899
<font color="#E5E5E5">differ again so from the the two</font>

442
00:22:07,160 --> 00:22:11,990
unauthenticated once if they're the same

443
00:22:08,900 --> 00:22:13,580
will know yes we've got<font color="#E5E5E5"> dynamic dynamic</font>

444
00:22:11,990 --> 00:22:16,490
JavaScript based on authentication and

445
00:22:13,580 --> 00:22:19,610
if it differs again is just generally

446
00:22:16,490 --> 00:22:22,070
generically dynamic so then you have

447
00:22:19,610 --> 00:22:25,459
nothing found but this is basically<font color="#E5E5E5"> how</font>

448
00:22:22,070 --> 00:22:28,939
<font color="#E5E5E5">you go about it it's not that tricky</font>

449
00:22:25,460 --> 00:22:32,900
really it's just a little<font color="#E5E5E5"> bit of an</font>

450
00:22:28,940 --> 00:22:35,000
effort and then category number<font color="#E5E5E5"> four and</font>

451
00:22:32,900 --> 00:22:37,720
<font color="#E5E5E5">on script I want to show you this</font>

452
00:22:35,000 --> 00:22:46,430
example because I think<font color="#E5E5E5"> it's very funny</font>

453
00:22:37,720 --> 00:22:48,710
so what we see here<font color="#CCCCCC"> is a jason jason</font>

454
00:22:46,430 --> 00:22:52,250
<font color="#E5E5E5">block and it's not a jason that starts</font>

455
00:22:48,710 --> 00:22:55,700
with curly braces but with brackets

456
00:22:52,250 --> 00:22:57,320
square brackets but that happens all the

457
00:22:55,700 --> 00:23:00,440
time that you'll get<font color="#CCCCCC"> jason in that</font>

458
00:22:57,320 --> 00:23:04,310
format and you'll see the key value pair

459
00:23:00,440 --> 00:23:05,480
friend Luke email and then there's some

460
00:23:04,310 --> 00:23:09,770
UT of seven

461
00:23:05,480 --> 00:23:12,320
encoded data and that is obviously

462
00:23:09,770 --> 00:23:14,480
user-provided because when you sign<font color="#CCCCCC"> up</font>

463
00:23:12,320 --> 00:23:17,210
you give you your<font color="#CCCCCC"> email so this is this</font>

464
00:23:14,480 --> 00:23:20,330
is your own data as a hacker that's what

465
00:23:17,210 --> 00:23:26,720
you<font color="#CCCCCC"> provided and if we translate that</font>

466
00:23:20,330 --> 00:23:29,230
will see that this actually is quote

467
00:23:26,720 --> 00:23:33,169
quote curly braces square brackets

468
00:23:29,230 --> 00:23:34,970
semicolon and it's like oh and<font color="#CCCCCC"> then we</font>

469
00:23:33,169 --> 00:23:36,919
<font color="#E5E5E5">just go with javascript alert may the</font>

470
00:23:34,970 --> 00:23:41,450
force be with you and we'll keep going

471
00:23:36,919 --> 00:23:45,500
about our job<font color="#CCCCCC"> all right so basically</font>

472
00:23:41,450 --> 00:23:48,100
<font color="#CCCCCC">this is UT of</font><font color="#E5E5E5"> seven and translates to</font>

473
00:23:45,500 --> 00:23:53,809
this and if you include the script now

474
00:23:48,100 --> 00:23:58,399
on a<font color="#E5E5E5"> malicious website and you give the</font>

475
00:23:53,809 --> 00:24:01,399
source and<font color="#E5E5E5"> it's Jason it's not</font>

476
00:23:58,400 --> 00:24:02,929
JavaScript it's not jason t this<font color="#E5E5E5"> is</font>

477
00:24:01,400 --> 00:24:06,110
<font color="#CCCCCC">really just chasing you including as a</font>

478
00:24:02,929 --> 00:24:07,970
script and then you say type

479
00:24:06,110 --> 00:24:11,620
text/javascript and the char set you say

480
00:24:07,970 --> 00:24:14,240
UT of seven the browser goes like ah<font color="#E5E5E5"> I</font>

481
00:24:11,620 --> 00:24:16,520
guess<font color="#E5E5E5"> I should interpret this interprets</font>

482
00:24:14,240 --> 00:24:19,970
it like this<font color="#E5E5E5"> and you're turning</font><font color="#CCCCCC"> Jason</font>

483
00:24:16,520 --> 00:24:21,650
into JavaScript like executable and that

484
00:24:19,970 --> 00:24:23,950
of course I<font color="#E5E5E5"> mean as you see the link</font>

485
00:24:21,650 --> 00:24:28,700
down here it's a hack by gareth hayes

486
00:24:23,950 --> 00:24:30,679
great researcher he did this in 2011 so

487
00:24:28,700 --> 00:24:32,570
of course all modern browsers have fixed

488
00:24:30,679 --> 00:24:33,890
this and of<font color="#CCCCCC"> course all none bro modern</font>

489
00:24:32,570 --> 00:24:37,299
browsers haven't fixed this<font color="#E5E5E5"> so this</font>

490
00:24:33,890 --> 00:24:42,890
<font color="#E5E5E5">still works in</font><font color="#CCCCCC"> Internet Explorer so and</font>

491
00:24:37,299 --> 00:24:45,440
and just because because why not this<font color="#E5E5E5"> I</font>

492
00:24:42,890 --> 00:24:47,210
mean 2011 was not the year of edge but

493
00:24:45,440 --> 00:24:49,880
it would just<font color="#E5E5E5"> not be fun if it wouldn't</font>

494
00:24:47,210 --> 00:24:53,720
be<font color="#E5E5E5"> an edge so it's also an edge</font><font color="#CCCCCC"> all</font>

495
00:24:49,880 --> 00:24:57,650
<font color="#CCCCCC">right so this still works yeah and this</font>

496
00:24:53,720 --> 00:25:00,710
<font color="#E5E5E5">is also why Jason and this is for the</font>

497
00:24:57,650 --> 00:25:04,100
developers here Jason should never

498
00:25:00,710 --> 00:25:06,140
really<font color="#E5E5E5"> use the square brackets in the</font>

499
00:25:04,100 --> 00:25:08,409
beginning because this is valid

500
00:25:06,140 --> 00:25:11,720
<font color="#E5E5E5">JavaScript or can be valid JavaScript</font>

501
00:25:08,410 --> 00:25:13,700
while the curly braces can't and even if

502
00:25:11,720 --> 00:25:16,460
your library allows it it is really

503
00:25:13,700 --> 00:25:19,809
<font color="#CCCCCC">smart</font><font color="#E5E5E5"> to go for the curly braces because</font>

504
00:25:16,460 --> 00:25:21,710
there's browser issues you can't control

505
00:25:19,809 --> 00:25:27,229
even if you report it to the browser

506
00:25:21,710 --> 00:25:31,609
vendors apparently yeah um yeah<font color="#CCCCCC"> there</font>

507
00:25:27,229 --> 00:25:36,639
was other fun stuff there was the<font color="#E5E5E5"> CSV as</font>

508
00:25:31,609 --> 00:25:36,639
I've told you but there was<font color="#CCCCCC"> also one</font>

509
00:25:36,969 --> 00:25:46,489
that we'll talk about later exploiting

510
00:25:40,839 --> 00:25:49,428
cross-site scripting clusion so I'm not

511
00:25:46,489 --> 00:25:51,919
particularly like really fancy about

512
00:25:49,429 --> 00:25:54,289
those<font color="#CCCCCC"> JavaScript things they don't</font><font color="#E5E5E5"> look</font>

513
00:25:51,919 --> 00:25:55,580
particularly pretty but for those that

514
00:25:54,289 --> 00:25:57,139
know<font color="#CCCCCC"> JavaScript this will be really easy</font>

515
00:25:55,580 --> 00:25:59,570
for<font color="#CCCCCC"> those that don't know</font><font color="#E5E5E5"> JavaScript</font>

516
00:25:57,139 --> 00:26:02,289
I'll take it slow<font color="#CCCCCC"> all right so what we</font>

517
00:25:59,570 --> 00:26:04,489
have here is we have<font color="#CCCCCC"> a global</font><font color="#E5E5E5"> variable</font>

518
00:26:02,289 --> 00:26:07,580
you'll see<font color="#E5E5E5"> your private key by the way</font>

519
00:26:04,489 --> 00:26:08,960
this<font color="#CCCCCC"> is an example from real life this</font>

520
00:26:07,580 --> 00:26:12,529
<font color="#CCCCCC">is not a made-up example this is</font>

521
00:26:08,960 --> 00:26:15,019
<font color="#E5E5E5">something I've seen yes private</font><font color="#CCCCCC"> key</font>

522
00:26:12,529 --> 00:26:18,619
anesthetic unauthenticated file in the

523
00:26:15,019 --> 00:26:23,809
global variable please don't do it

524
00:26:18,619 --> 00:26:28,218
developers and if you want to access for

525
00:26:23,809 --> 00:26:31,279
example the keys you just get the data

526
00:26:28,219 --> 00:26:34,339
keys because it's<font color="#CCCCCC"> Lobel you can take the</font>

527
00:26:31,279 --> 00:26:36,320
first one because it's an air eh eh it's

528
00:26:34,339 --> 00:26:39,678
a<font color="#E5E5E5"> JSON format so you have to string</font><font color="#CCCCCC"> if I</font>

529
00:26:36,320 --> 00:26:44,439
<font color="#E5E5E5">before you pop the alert and of course</font>

530
00:26:39,679 --> 00:26:46,639
<font color="#CCCCCC">you</font><font color="#E5E5E5"> include it the file cross-domain</font>

531
00:26:44,440 --> 00:26:50,509
that's the case of the global variable

532
00:26:46,639 --> 00:26:52,639
then function overriding it's a<font color="#E5E5E5"> little</font>

533
00:26:50,509 --> 00:26:56,599
<font color="#E5E5E5">bit different but basically you you</font>

534
00:26:52,639 --> 00:26:58,459
create a function and if this<font color="#E5E5E5"> is this</font>

535
00:26:56,599 --> 00:26:59,809
was the response you'll be like<font color="#CCCCCC"> all</font>

536
00:26:58,460 --> 00:27:02,450
right and then<font color="#CCCCCC"> I'll have a sub function</font>

537
00:26:59,809 --> 00:27:04,580
in a subset and then at the<font color="#E5E5E5"> last one</font>

538
00:27:02,450 --> 00:27:10,369
I'll actually take the data<font color="#E5E5E5"> that's in</font>

539
00:27:04,580 --> 00:27:13,699
there and lick it<font color="#CCCCCC"> and you call the</font>

540
00:27:10,369 --> 00:27:16,009
website<font color="#CCCCCC"> you include the website and you</font>

541
00:27:13,700 --> 00:27:18,619
have access to<font color="#E5E5E5"> the data now somebody</font>

542
00:27:16,009 --> 00:27:20,839
might know is that this looks<font color="#CCCCCC"> very much</font>

543
00:27:18,619 --> 00:27:22,279
like a JSONP call back so you<font color="#CCCCCC"> don't</font><font color="#E5E5E5"> need</font>

544
00:27:20,839 --> 00:27:24,499
<font color="#CCCCCC">to override the function you can just</font>

545
00:27:22,279 --> 00:27:30,409
provide your own call back as we did in

546
00:27:24,499 --> 00:27:31,940
<font color="#E5E5E5">the example but in case it's not a</font><font color="#CCCCCC"> call</font>

547
00:27:30,409 --> 00:27:33,200
<font color="#CCCCCC">back you can just override the functions</font>

548
00:27:31,940 --> 00:27:36,049
that's the beauty of

549
00:27:33,200 --> 00:27:38,080
the<font color="#E5E5E5"> dynamic pneus of JavaScript you can</font>

550
00:27:36,049 --> 00:27:41,090
just at runtime just be like<font color="#E5E5E5"> alright</font>

551
00:27:38,080 --> 00:27:42,620
let's change that and one<font color="#E5E5E5"> of the big</font>

552
00:27:41,090 --> 00:27:45,799
issues about this was<font color="#CCCCCC"> that people were</font>

553
00:27:42,620 --> 00:27:49,070
over writing the air a constructor back

554
00:27:45,799 --> 00:27:52,340
in the days and so if if you return<font color="#E5E5E5"> JSON</font>

555
00:27:49,070 --> 00:27:55,070
in square brackets and the area

556
00:27:52,340 --> 00:27:57,620
constructor is overridden you can just

557
00:27:55,070 --> 00:27:59,720
<font color="#E5E5E5">do anything with it that used to be the</font>

558
00:27:57,620 --> 00:28:02,418
case that is not possible anymore but

559
00:27:59,720 --> 00:28:05,570
function overriding itself is totally

560
00:28:02,419 --> 00:28:11,179
possible still but it's<font color="#E5E5E5"> not always as</font>

561
00:28:05,570 --> 00:28:13,100
easy sometimes yeah the data<font color="#E5E5E5"> is inside a</font>

562
00:28:11,179 --> 00:28:15,220
function for<font color="#CCCCCC"> example a self-executing</font>

563
00:28:13,100 --> 00:28:19,428
function that's the<font color="#CCCCCC"> parenthesis in front</font>

564
00:28:15,220 --> 00:28:21,799
and if there's a self-executing function

565
00:28:19,429 --> 00:28:24,139
and there is inside that<font color="#E5E5E5"> function the</font>

566
00:28:21,799 --> 00:28:27,049
you won't be excellent access it through

567
00:28:24,139 --> 00:28:29,479
<font color="#CCCCCC">the like there's a scope limitation but</font>

568
00:28:27,049 --> 00:28:34,340
usually data inside of functions is also

569
00:28:29,480 --> 00:28:37,220
manipulated so in this case the array

570
00:28:34,340 --> 00:28:41,120
with the secrets is passed to<font color="#E5E5E5"> the</font>

571
00:28:37,220 --> 00:28:44,149
function slice and all we have to do<font color="#CCCCCC"> is</font>

572
00:28:41,120 --> 00:28:45,879
we<font color="#CCCCCC"> have to tamper with the prototype so</font>

573
00:28:44,149 --> 00:28:54,649
we say<font color="#E5E5E5"> alright</font>

574
00:28:45,880 --> 00:28:57,320
array.prototype.slice.call different

575
00:28:54,649 --> 00:28:59,418
function even<font color="#E5E5E5"> though I included that</font>

576
00:28:57,320 --> 00:29:06,379
script from somewhere else and now of

577
00:28:59,419 --> 00:29:08,210
<font color="#CCCCCC">course I can</font><font color="#E5E5E5"> access it and we are</font>

578
00:29:06,380 --> 00:29:12,139
already getting to preventing cross-site

579
00:29:08,210 --> 00:29:15,529
scripting clusion yeah that's just<font color="#E5E5E5"> list</font>

580
00:29:12,139 --> 00:29:18,019
of stuff basically you have to<font color="#CCCCCC"> think</font>

581
00:29:15,529 --> 00:29:23,720
about so the easiest<font color="#E5E5E5"> thing is to just</font>

582
00:29:18,019 --> 00:29:25,309
never<font color="#E5E5E5"> ever put sensitive data into</font><font color="#CCCCCC"> jsonp</font>

583
00:29:23,720 --> 00:29:27,049
<font color="#E5E5E5">callbacks or script files if you don't</font>

584
00:29:25,309 --> 00:29:29,178
if you<font color="#CCCCCC"> don't do</font><font color="#E5E5E5"> that this vulnerability</font>

585
00:29:27,049 --> 00:29:32,690
is just not relevant for your

586
00:29:29,179 --> 00:29:35,179
application anymore the correct content

587
00:29:32,690 --> 00:29:38,870
type and the<font color="#CCCCCC"> X content type options no</font>

588
00:29:35,179 --> 00:29:42,350
sniff so those is the content type is

589
00:29:38,870 --> 00:29:44,899
basically if that is not set or not set

590
00:29:42,350 --> 00:29:46,850
properly it's easier for a browser to

591
00:29:44,899 --> 00:29:47,090
confuse<font color="#E5E5E5"> comma separated value with the</font>

592
00:29:46,850 --> 00:29:49,550
square

593
00:29:47,090 --> 00:29:51,949
then if it comes back and<font color="#E5E5E5"> says I am a</font>

594
00:29:49,550 --> 00:29:53,540
CSV file and then the browser go like

595
00:29:51,950 --> 00:29:55,280
you're<font color="#E5E5E5"> trying to include that as a</font>

596
00:29:53,540 --> 00:29:58,970
script oh no wait that's not possible

597
00:29:55,280 --> 00:30:00,889
because this is csv so setting their

598
00:29:58,970 --> 00:30:03,110
correct content type will help the

599
00:30:00,890 --> 00:30:05,240
browser to distinguish if this is<font color="#E5E5E5"> valid</font>

600
00:30:03,110 --> 00:30:08,120
or non valid and the<font color="#E5E5E5"> ex content type</font>

601
00:30:05,240 --> 00:30:11,240
options no sniff is to prevent<font color="#E5E5E5"> any</font>

602
00:30:08,120 --> 00:30:14,959
stupid charset sniffing on the side of

603
00:30:11,240 --> 00:30:16,850
the browser that we want to<font color="#E5E5E5"> avoid then</font>

604
00:30:14,960 --> 00:30:20,860
of course<font color="#E5E5E5"> the cross-site request forgery</font>

605
00:30:16,850 --> 00:30:24,139
token it helps against the

606
00:30:20,860 --> 00:30:25,520
authentication based XSS I it doesn't

607
00:30:24,140 --> 00:30:31,040
help against the static not

608
00:30:25,520 --> 00:30:33,020
authenticated once a if you do<font color="#E5E5E5"> that it</font>

609
00:30:31,040 --> 00:30:36,950
<font color="#E5E5E5">makes sense to send the sea sorry I've</font>

610
00:30:33,020 --> 00:30:39,590
token as a header because those are all

611
00:30:36,950 --> 00:30:41,500
get requests and you don't want to<font color="#E5E5E5"> have</font>

612
00:30:39,590 --> 00:30:45,379
one<font color="#E5E5E5"> that leaks easily through the URL</font>

613
00:30:41,500 --> 00:30:49,550
and all script inclusions so if you have

614
00:30:45,380 --> 00:30:51,200
scripts or something that is sent as a

615
00:30:49,550 --> 00:30:52,760
get request there is never post requests

616
00:30:51,200 --> 00:30:55,580
so you don't have to think<font color="#E5E5E5"> about</font>

617
00:30:52,760 --> 00:30:59,870
providing the CCF token in<font color="#CCCCCC"> the body of</font>

618
00:30:55,580 --> 00:31:01,370
the<font color="#E5E5E5"> post and then the same side cookie</font>

619
00:30:59,870 --> 00:31:02,899
attribute this is an interesting one

620
00:31:01,370 --> 00:31:05,899
this is currently just<font color="#E5E5E5"> the draft is an</font>

621
00:31:02,900 --> 00:31:09,260
RFC written by my quest and mark goodwin

622
00:31:05,900 --> 00:31:12,740
from mark goodwin is from Mozilla and my

623
00:31:09,260 --> 00:31:14,840
quest is at Google and this was just

624
00:31:12,740 --> 00:31:18,050
released in April so it's not that long

625
00:31:14,840 --> 00:31:21,439
ago it's a draft means it's not<font color="#CCCCCC"> a</font>

626
00:31:18,050 --> 00:31:23,060
standard yet they're trying<font color="#CCCCCC"> to make it a</font>

627
00:31:21,440 --> 00:31:25,370
standard in the<font color="#E5E5E5"> same site cookie</font>

628
00:31:23,060 --> 00:31:28,100
attribute if you set<font color="#CCCCCC"> it onto a cookie</font>

629
00:31:25,370 --> 00:31:29,570
and you say same<font color="#E5E5E5"> site strict basically</font>

630
00:31:28,100 --> 00:31:31,610
like it's in the same area<font color="#E5E5E5"> where the</font>

631
00:31:29,570 --> 00:31:35,450
HTTP only and the secure flags are

632
00:31:31,610 --> 00:31:38,149
located and then the cookie won't be

633
00:31:35,450 --> 00:31:39,710
sent from a different origin so it will

634
00:31:38,150 --> 00:31:41,930
<font color="#E5E5E5">make sure that in the cookie jar if</font>

635
00:31:39,710 --> 00:31:44,750
you're trying to send stuff<font color="#CCCCCC"> cross origin</font>

636
00:31:41,930 --> 00:31:47,120
it'll be<font color="#E5E5E5"> like ah this cookie just comes</font>

637
00:31:44,750 --> 00:31:50,570
along if the request was sent from the

638
00:31:47,120 --> 00:31:55,459
same origin which is really<font color="#CCCCCC"> just</font>

639
00:31:50,570 --> 00:31:59,179
patching the problem but it is a good

640
00:31:55,460 --> 00:32:00,890
good start I guess<font color="#E5E5E5"> and for testers</font>

641
00:31:59,180 --> 00:32:02,330
spread the<font color="#E5E5E5"> word</font><font color="#CCCCCC"> end report</font>

642
00:32:00,890 --> 00:32:07,760
put them<font color="#E5E5E5"> in your reports if you find</font>

643
00:32:02,330 --> 00:32:10,639
something and in<font color="#CCCCCC"> that context</font><font color="#E5E5E5"> we have to</font>

644
00:32:07,760 --> 00:32:13,190
quickly talk<font color="#CCCCCC"> about what do you get from</font>

645
00:32:10,640 --> 00:32:15,830
script inclusion so we have been talking

646
00:32:13,190 --> 00:32:17,660
about sensitive data all the time like

647
00:32:15,830 --> 00:32:19,850
in<font color="#CCCCCC"> Santa Claus like public keys or</font>

648
00:32:17,660 --> 00:32:23,330
private keys or public keys are not<font color="#E5E5E5"> that</font>

649
00:32:19,850 --> 00:32:27,010
sensitive but the like the whole user

650
00:32:23,330 --> 00:32:30,050
data etc etc but in dynamic<font color="#E5E5E5"> JavaScript</font>

651
00:32:27,010 --> 00:32:31,820
an authentication based cross-site

652
00:32:30,050 --> 00:32:33,980
scripting clusion when you'll always

653
00:32:31,820 --> 00:32:36,830
have if you get nothing from the script

654
00:32:33,980 --> 00:32:38,120
is a log in<font color="#E5E5E5"> Oracle so in the worst case</font>

655
00:32:36,830 --> 00:32:42,050
you'll know if the users logged in or

656
00:32:38,120 --> 00:32:44,389
not that always exists and that might

657
00:32:42,050 --> 00:32:48,590
not be<font color="#E5E5E5"> the big hit with your customers</font>

658
00:32:44,390 --> 00:32:51,590
when you<font color="#E5E5E5"> report it but it might be worth</font>

659
00:32:48,590 --> 00:32:53,990
just<font color="#E5E5E5"> putting it in to be like just</font>

660
00:32:51,590 --> 00:32:57,050
<font color="#E5E5E5">letting you know this is what happens</font>

661
00:32:53,990 --> 00:32:58,760
and this is possible and if you<font color="#CCCCCC"> ever</font>

662
00:32:57,050 --> 00:33:04,190
think about putting something sensitive

663
00:32:58,760 --> 00:33:05,750
in there this will get way worse let's

664
00:33:04,190 --> 00:33:07,400
talk<font color="#E5E5E5"> about a list of links and</font>

665
00:33:05,750 --> 00:33:10,430
<font color="#E5E5E5">references something I always like to</font>

666
00:33:07,400 --> 00:33:12,200
<font color="#E5E5E5">present because most of the work has</font>

667
00:33:10,430 --> 00:33:14,510
done by other been done by others and

668
00:33:12,200 --> 00:33:17,720
not by me and so the first link is

669
00:33:14,510 --> 00:33:21,350
Jeremiah<font color="#CCCCCC"> Grossman's article on advanced</font>

670
00:33:17,720 --> 00:33:23,870
web attacks where he uses cross-site

671
00:33:21,350 --> 00:33:27,379
scripting clusion to access the address

672
00:33:23,870 --> 00:33:29,000
book of<font color="#E5E5E5"> Google users that was in 2006</font>

673
00:33:27,380 --> 00:33:30,890
and it's been probably the first time

674
00:33:29,000 --> 00:33:34,190
the charm cross-site scripting<font color="#CCCCCC"> clusion</font>

675
00:33:30,890 --> 00:33:35,990
<font color="#CCCCCC">has been used then the next one is</font><font color="#E5E5E5"> Jason</font>

676
00:33:34,190 --> 00:33:43,430
is not as safe as people think it is

677
00:33:35,990 --> 00:33:48,020
that's an article by I don't know

678
00:33:43,430 --> 00:33:51,020
anymore exactly but what this article

679
00:33:48,020 --> 00:33:53,870
<font color="#CCCCCC">talks about is the array overriding the</font>

680
00:33:51,020 --> 00:33:55,100
air I constructor and that's the one

681
00:33:53,870 --> 00:33:56,389
I've been telling you<font color="#E5E5E5"> about that doesn't</font>

682
00:33:55,100 --> 00:33:57,980
exist anymore that doesn't work anymore

683
00:33:56,390 --> 00:34:02,270
but it's interesting<font color="#E5E5E5"> anyway to know what</font>

684
00:33:57,980 --> 00:34:05,900
they did<font color="#CCCCCC"> and how they did it and and the</font>

685
00:34:02,270 --> 00:34:07,190
<font color="#CCCCCC">next article by Jason hijacking that's</font>

686
00:34:05,900 --> 00:34:09,620
the one<font color="#E5E5E5"> that I showed you that still</font>

687
00:34:07,190 --> 00:34:12,889
works in internet explorer and newly

688
00:34:09,620 --> 00:34:14,779
also works in edge and that's by<font color="#CCCCCC"> gareth</font>

689
00:34:12,889 --> 00:34:17,629
<font color="#CCCCCC">hayes then the next issue is</font>

690
00:34:14,780 --> 00:34:21,200
from the current frack and that's an

691
00:34:17,630 --> 00:34:26,720
article by engine from fino<font color="#E5E5E5"> leads where</font>

692
00:34:21,199 --> 00:34:29,290
he writes about<font color="#E5E5E5"> Ruby and</font><font color="#CCCCCC"> it's its rails</font>

693
00:34:26,719 --> 00:34:33,139
<font color="#CCCCCC">3 that he writes about really and</font>

694
00:34:29,290 --> 00:34:36,259
attacks about rails 3 and those those

695
00:34:33,139 --> 00:34:37,908
attacks are all sorts of attacks but one

696
00:34:36,260 --> 00:34:40,040
of them is actually a cross-site

697
00:34:37,909 --> 00:34:43,130
scripting clusion and that is because<font color="#E5E5E5"> in</font>

698
00:34:40,040 --> 00:34:46,159
in back then you could provide the

699
00:34:43,130 --> 00:34:49,640
format of<font color="#CCCCCC"> the data that you want to</font>

700
00:34:46,159 --> 00:34:51,770
<font color="#E5E5E5">return so you could press a parameter ?</font>

701
00:34:49,639 --> 00:34:54,259
format equals JSON and you got it<font color="#CCCCCC"> back</font>

702
00:34:51,770 --> 00:34:56,360
<font color="#E5E5E5">as Jason or you could say format equals</font>

703
00:34:54,260 --> 00:34:58,730
XML<font color="#E5E5E5"> and you'll get it back as an XML and</font>

704
00:34:56,360 --> 00:35:01,400
you could sometimes also to say format

705
00:34:58,730 --> 00:35:04,310
equals jas you get it back<font color="#E5E5E5"> as JavaScript</font>

706
00:35:01,400 --> 00:35:06,110
and since that<font color="#E5E5E5"> is a parameter that is</font>

707
00:35:04,310 --> 00:35:08,480
passed in the<font color="#E5E5E5"> get request</font><font color="#CCCCCC"> that is very</font>

708
00:35:06,110 --> 00:35:10,790
easy we can't<font color="#CCCCCC"> just in the script</font>

709
00:35:08,480 --> 00:35:12,290
inclusion just be like<font color="#E5E5E5"> all right we'll</font>

710
00:35:10,790 --> 00:35:16,370
want this as JavaScript and now we can

711
00:35:12,290 --> 00:35:19,940
access it so<font color="#E5E5E5"> that was that's that</font>

712
00:35:16,370 --> 00:35:21,259
article the next one<font color="#E5E5E5"> is the one by</font>

713
00:35:19,940 --> 00:35:23,870
takeshi t radha that<font color="#CCCCCC"> i've been</font>

714
00:35:21,260 --> 00:35:29,000
mentioning that's the identifier based

715
00:35:23,870 --> 00:35:30,859
cross-site scripting clusion we're with

716
00:35:29,000 --> 00:35:32,960
<font color="#E5E5E5">the</font><font color="#CCCCCC"> CSV leaking for example but there</font><font color="#E5E5E5"> is</font>

717
00:35:30,860 --> 00:35:35,630
more stuff in there that's a really fun

718
00:35:32,960 --> 00:35:38,240
read the next paper is<font color="#CCCCCC"> the one that</font>

719
00:35:35,630 --> 00:35:40,820
inspired most of this getting<font color="#E5E5E5"> into it</font>

720
00:35:38,240 --> 00:35:44,899
that's the one<font color="#E5E5E5"> paper by Sebastian Lucas</font>

721
00:35:40,820 --> 00:35:47,210
and this is the one about dynamic

722
00:35:44,900 --> 00:35:48,740
<font color="#E5E5E5">JavaScript the unexpected dangers of</font>

723
00:35:47,210 --> 00:35:52,460
dynamic<font color="#E5E5E5"> JavaScript the one we've I've</font>

724
00:35:48,740 --> 00:35:54,169
been quoting before and on the next<font color="#E5E5E5"> one</font>

725
00:35:52,460 --> 00:35:58,970
you'll find different ways of leaking

726
00:35:54,170 --> 00:36:02,690
stuff that's also by<font color="#E5E5E5"> Sebastian the</font><font color="#CCCCCC"> post</font>

727
00:35:58,970 --> 00:36:05,600
afterwards is a cross-eyed script

728
00:36:02,690 --> 00:36:08,420
inclusion vulnerability in Zendesk that

729
00:36:05,600 --> 00:36:11,380
existed and<font color="#CCCCCC"> Twitter was using Zendesk so</font>

730
00:36:08,420 --> 00:36:14,360
I was Twitter dat<font color="#CCCCCC"> zendesk that come and</font>

731
00:36:11,380 --> 00:36:16,580
somehow for some reason<font color="#CCCCCC"> ever user was</font>

732
00:36:14,360 --> 00:36:19,220
logged in they would send a user

733
00:36:16,580 --> 00:36:20,990
relevant data to<font color="#CCCCCC"> Zendesk and that was</font>

734
00:36:19,220 --> 00:36:24,109
<font color="#CCCCCC">just standing there in a file that was</font>

735
00:36:20,990 --> 00:36:26,509
called user<font color="#CCCCCC"> Jas and so everybody who is</font>

736
00:36:24,110 --> 00:36:28,420
logged into Twitter and visited a

737
00:36:26,510 --> 00:36:30,420
malicious<font color="#CCCCCC"> website where the cross</font>

738
00:36:28,420 --> 00:36:33,270
script inclusion all NBD<font color="#CCCCCC"> t was exploited</font>

739
00:36:30,420 --> 00:36:37,240
they would<font color="#CCCCCC"> just</font><font color="#E5E5E5"> like get all the data</font>

740
00:36:33,270 --> 00:36:41,200
very nice<font color="#E5E5E5"> and fun attack and last but</font>

741
00:36:37,240 --> 00:36:43,839
not least skipped us eh that's the labs

742
00:36:41,200 --> 00:36:45,220
article the blog article about

743
00:36:43,840 --> 00:36:46,660
cross-site scripting clusion

744
00:36:45,220 --> 00:36:47,740
vulnerabilities that<font color="#CCCCCC"> I</font><font color="#E5E5E5"> wrote that's</font>

745
00:36:46,660 --> 00:36:50,680
<font color="#E5E5E5">basically what I've been telling you</font>

746
00:36:47,740 --> 00:36:54,430
<font color="#E5E5E5">about more or less with some extras and</font>

747
00:36:50,680 --> 00:36:57,580
some less stuff that exists and then

748
00:36:54,430 --> 00:36:59,410
this wouldn't be this wouldn't be

749
00:36:57,580 --> 00:37:02,920
complete if I wouldn't be sharing the

750
00:36:59,410 --> 00:37:05,529
love and of course I hate doing<font color="#E5E5E5"> stuff</font>

751
00:37:02,920 --> 00:37:10,120
manually that<font color="#E5E5E5"> I can automate so I wrote</font>

752
00:37:05,530 --> 00:37:11,770
a burp extension which is in your burps

753
00:37:10,120 --> 00:37:15,430
tour available you can already install

754
00:37:11,770 --> 00:37:16,720
it and what it<font color="#E5E5E5"> does it helps you find</font>

755
00:37:15,430 --> 00:37:18,399
the cross-site scripting clusion

756
00:37:16,720 --> 00:37:21,939
vulnerabilities that our authentication

757
00:37:18,400 --> 00:37:26,910
based so number two<font color="#E5E5E5"> and three mainly and</font>

758
00:37:21,940 --> 00:37:30,520
it doesn't really care too much about

759
00:37:26,910 --> 00:37:33,310
dynamic<font color="#CCCCCC"> javascript that</font><font color="#E5E5E5"> is boring so</font>

760
00:37:30,520 --> 00:37:39,130
they'll be reported as informations and

761
00:37:33,310 --> 00:37:41,230
the other ones<font color="#E5E5E5"> are mediums and it works</font>

762
00:37:39,130 --> 00:37:43,840
exactly<font color="#E5E5E5"> as I described before hand so it</font>

763
00:37:41,230 --> 00:37:46,710
fires two more requests and you have to

764
00:37:43,840 --> 00:37:51,970
<font color="#CCCCCC">notice because if</font><font color="#E5E5E5"> you're passive scanner</font>

765
00:37:46,710 --> 00:37:53,770
settings or too loose it might<font color="#E5E5E5"> just keep</font>

766
00:37:51,970 --> 00:37:57,930
firing requests and it's not that<font color="#CCCCCC"> much</font>

767
00:37:53,770 --> 00:37:59,860
is<font color="#E5E5E5"> just too / javascript file maximum</font>

768
00:37:57,930 --> 00:38:02,140
but just know it's a passive scanner

769
00:37:59,860 --> 00:38:04,540
module and<font color="#CCCCCC"> will do that anyway and it</font>

770
00:38:02,140 --> 00:38:06,580
has to<font color="#CCCCCC"> be that way unfortunately for the</font>

771
00:38:04,540 --> 00:38:09,550
current<font color="#E5E5E5"> moment because active scanner</font>

772
00:38:06,580 --> 00:38:11,200
modules are not really made for this

773
00:38:09,550 --> 00:38:13,710
purpose I've talked with the guys from

774
00:38:11,200 --> 00:38:15,669
burp ports wigger and they said like

775
00:38:13,710 --> 00:38:18,400
currently there's this is just the best

776
00:38:15,670 --> 00:38:20,020
way to do it<font color="#E5E5E5"> and so I leave it</font><font color="#CCCCCC"> at that</font>

777
00:38:18,400 --> 00:38:21,940
and<font color="#CCCCCC"> if they change the API I might</font>

778
00:38:20,020 --> 00:38:25,270
change the module type for right now

779
00:38:21,940 --> 00:38:29,140
it's that the it does filter for Jason

780
00:38:25,270 --> 00:38:32,560
PN scripts and it does also filter for

781
00:38:29,140 --> 00:38:35,680
Jason because we can sometimes get out

782
00:38:32,560 --> 00:38:37,299
as you've<font color="#E5E5E5"> seen so don't be surprised if</font>

783
00:38:35,680 --> 00:38:40,720
you'll see Jason answers and you'll be

784
00:38:37,300 --> 00:38:44,550
like why is this<font color="#E5E5E5"> a script it's not but</font>

785
00:38:40,720 --> 00:38:49,149
just check if you can exploit it in

786
00:38:44,550 --> 00:38:50,410
internet explorer or edge and for right

787
00:38:49,150 --> 00:38:53,530
now the only ambient<font color="#E5E5E5"> authority</font>

788
00:38:50,410 --> 00:38:58,060
information that I've included in it is

789
00:38:53,530 --> 00:39:02,770
our cookies but I hope there is more to

790
00:38:58,060 --> 00:39:06,700
come and I hope I'll the<font color="#E5E5E5"> I'm using it at</font>

791
00:39:02,770 --> 00:39:09,130
our place<font color="#E5E5E5"> and I think</font><font color="#CCCCCC"> the noise is</font>

792
00:39:06,700 --> 00:39:13,270
totally acceptable if<font color="#E5E5E5"> you don't think so</font>

793
00:39:09,130 --> 00:39:18,099
feel free to<font color="#E5E5E5"> let me know put a request a</font>

794
00:39:13,270 --> 00:39:20,520
pull request or then make an<font color="#E5E5E5"> issue or on</font>

795
00:39:18,099 --> 00:39:23,080
github and<font color="#E5E5E5"> I'll look into it I'm very</font>

796
00:39:20,520 --> 00:39:25,300
<font color="#E5E5E5">happy about feedback I know this is not</font>

797
00:39:23,080 --> 00:39:29,710
the most beautiful code and not a

798
00:39:25,300 --> 00:39:30,940
developer and with that<font color="#E5E5E5"> I liked thank</font>

799
00:39:29,710 --> 00:39:35,280
you very much all for listening and if

800
00:39:30,940 --> 00:39:35,280
<font color="#E5E5E5">there's any questions shoot</font>

801
00:39:40,780 --> 00:39:45,310
<font color="#E5E5E5">alright that is that is that about the</font>

802
00:39:44,050 --> 00:39:48,760
amount<font color="#E5E5E5"> of questions can we wrap this up</font>

803
00:39:45,310 --> 00:39:51,870
everybody<font color="#E5E5E5"> get some coffee wake up yeah I</font>

804
00:39:48,760 --> 00:39:51,870
guess that thank you very much

805
00:40:01,770 --> 00:40:03,830
you

