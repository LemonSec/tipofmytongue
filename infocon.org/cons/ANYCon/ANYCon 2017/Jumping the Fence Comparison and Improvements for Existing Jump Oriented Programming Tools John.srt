1
00:00:00,000 --> 00:00:05,420
good<font color="#CCCCCC"> come on start up</font><font color="#E5E5E5"> talking and do the</font>

2
00:00:03,780 --> 00:00:14,309
microphone

3
00:00:05,420 --> 00:00:15,800
<font color="#E5E5E5">okay microphone</font><font color="#CCCCCC"> alright yeah</font><font color="#E5E5E5"> yeah we're</font>

4
00:00:14,309 --> 00:00:20,070
ready

5
00:00:15,800 --> 00:00:21,660
you good<font color="#CCCCCC"> okay cool</font><font color="#E5E5E5"> hey I am John Dunlap</font>

6
00:00:20,070 --> 00:00:22,740
I am from Gotham<font color="#CCCCCC"> middle</font><font color="#E5E5E5"> class we're</font>

7
00:00:21,660 --> 00:00:24,900
<font color="#CCCCCC">gonna</font><font color="#E5E5E5"> talk</font><font color="#CCCCCC"> about you know Borean</font>

8
00:00:22,740 --> 00:00:27,028
programming<font color="#CCCCCC"> today</font><font color="#E5E5E5"> who here has heard of</font>

9
00:00:24,900 --> 00:00:28,590
John Pollard programming<font color="#CCCCCC"> know a little</font>

10
00:00:27,029 --> 00:00:30,869
<font color="#E5E5E5">bit</font><font color="#CCCCCC"> a little</font><font color="#E5E5E5"> bit maybe read the paper</font>

11
00:00:28,590 --> 00:00:32,278
that came<font color="#E5E5E5"> out</font><font color="#CCCCCC"> a few years</font><font color="#E5E5E5"> ago what about</font>

12
00:00:30,869 --> 00:00:33,690
return<font color="#E5E5E5"> orient programming who's familiar</font>

13
00:00:32,279 --> 00:00:36,660
<font color="#E5E5E5">yeah a little more</font>

14
00:00:33,690 --> 00:00:39,959
<font color="#CCCCCC">okay whoever</font><font color="#E5E5E5"> here has done a stack</font>

15
00:00:36,660 --> 00:00:42,599
buffer overflow<font color="#E5E5E5"> yeah that's it that's</font><font color="#CCCCCC"> a</font>

16
00:00:39,960 --> 00:00:45,030
little<font color="#E5E5E5"> more okay cool you know good tune</font>

17
00:00:42,600 --> 00:00:47,100
<font color="#CCCCCC">myself here to everyone</font><font color="#E5E5E5"> sort of</font><font color="#CCCCCC"> base</font><font color="#E5E5E5"> of</font>

18
00:00:45,030 --> 00:00:49,440
knowledge<font color="#CCCCCC"> because this is assuming</font><font color="#E5E5E5"> a</font>

19
00:00:47,100 --> 00:00:52,649
couple<font color="#E5E5E5"> things and let's get started</font><font color="#CCCCCC"> Who</font>

20
00:00:49,440 --> 00:00:54,410
am I I am John Dunlap I work for Gotham

21
00:00:52,649 --> 00:00:57,210
digital science<font color="#E5E5E5"> that's my</font><font color="#CCCCCC"> Twitter handle</font>

22
00:00:54,410 --> 00:00:59,339
<font color="#CCCCCC">I'm an exploit developer</font><font color="#E5E5E5"> reverse</font>

23
00:00:57,210 --> 00:01:03,750
<font color="#E5E5E5">engineer security researcher penetration</font>

24
00:00:59,340 --> 00:01:07,170
tester<font color="#E5E5E5"> huge assembly language guy a RM x</font>

25
00:01:03,750 --> 00:01:08,580
a<font color="#CCCCCC"> 6x is for even some much weirder</font>

26
00:01:07,170 --> 00:01:09,390
things<font color="#E5E5E5"> we're going to talk</font><font color="#CCCCCC"> about spark a</font>

27
00:01:08,580 --> 00:01:12,210
<font color="#E5E5E5">little bit</font><font color="#CCCCCC"> today</font>

28
00:01:09,390 --> 00:01:14,400
like<font color="#E5E5E5"> you remember spark you know even</font>

29
00:01:12,210 --> 00:01:17,339
maybe<font color="#E5E5E5"> a little bit a z/os assembly</font>

30
00:01:14,400 --> 00:01:21,180
that's<font color="#E5E5E5"> an interesting place</font><font color="#CCCCCC"> to go I'm</font>

31
00:01:17,340 --> 00:01:22,680
even you know for me like assembly

32
00:01:21,180 --> 00:01:24,360
instructions aren't<font color="#E5E5E5"> even low-level</font>

33
00:01:22,680 --> 00:01:26,759
enough you know I like messing<font color="#CCCCCC"> with the</font>

34
00:01:24,360 --> 00:01:30,060
encoding and<font color="#CCCCCC"> finding weird</font><font color="#E5E5E5"> edge cases</font>

35
00:01:26,759 --> 00:01:31,860
with instruction encodings<font color="#CCCCCC"> so that's me</font>

36
00:01:30,060 --> 00:01:33,240
I do play too much counter-strike if

37
00:01:31,860 --> 00:01:34,610
anyone's down to like start a clan or

38
00:01:33,240 --> 00:01:39,750
<font color="#E5E5E5">something I can</font><font color="#CCCCCC"> not get out</font><font color="#E5E5E5"> of silver</font>

39
00:01:34,610 --> 00:01:41,520
<font color="#E5E5E5">all right so what is job</font><font color="#CCCCCC"> what we're</font>

40
00:01:39,750 --> 00:01:43,170
going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> talk about today is a exploit</font>

41
00:01:41,520 --> 00:01:45,509
technique called jump orient programming

42
00:01:43,170 --> 00:01:48,210
it's similar in<font color="#E5E5E5"> concept to return on</font>

43
00:01:45,509 --> 00:01:52,350
<font color="#E5E5E5">rated programming</font><font color="#CCCCCC"> there's a paper ring</font>

44
00:01:48,210 --> 00:01:54,630
about it in with 2010 that sort of

45
00:01:52,350 --> 00:01:57,030
described the technique<font color="#CCCCCC"> but the paper</font>

46
00:01:54,630 --> 00:02:00,030
itself said that<font color="#E5E5E5"> they couldn't get an</font>

47
00:01:57,030 --> 00:02:01,710
exploit together<font color="#E5E5E5"> right</font><font color="#CCCCCC"> and as we sort of</font>

48
00:02:00,030 --> 00:02:04,530
look<font color="#CCCCCC"> into</font><font color="#E5E5E5"> the future of exploit</font>

49
00:02:01,710 --> 00:02:07,110
mitigations<font color="#E5E5E5"> this begins to look more and</font>

50
00:02:04,530 --> 00:02:10,169
more like an attractive<font color="#E5E5E5"> kind of exploit</font>

51
00:02:07,110 --> 00:02:11,400
we're going to talk<font color="#CCCCCC"> about why you know</font>

52
00:02:10,169 --> 00:02:12,750
<font color="#E5E5E5">there is</font><font color="#CCCCCC"> going to be a time when writing</font>

53
00:02:11,400 --> 00:02:14,790
<font color="#E5E5E5">rap chains on staff</font>

54
00:02:12,750 --> 00:02:21,150
it's going to be mostly kind of

55
00:02:14,790 --> 00:02:22,530
impossible<font color="#E5E5E5"> or undesirable</font><font color="#CCCCCC"> all right so</font>

56
00:02:21,150 --> 00:02:25,770
today<font color="#E5E5E5"> we're going to talk about</font>

57
00:02:22,530 --> 00:02:27,660
<font color="#E5E5E5">potential improvements to existing route</font>

58
00:02:25,770 --> 00:02:30,450
compilers to<font color="#E5E5E5"> support jump</font><font color="#CCCCCC"> where you're</font>

59
00:02:27,660 --> 00:02:32,670
programming<font color="#E5E5E5"> development</font><font color="#CCCCCC"> how we can add</font>

60
00:02:30,450 --> 00:02:34,739
more architecture support for current

61
00:02:32,670 --> 00:02:36,809
compilers<font color="#CCCCCC"> and what they support and what</font>

62
00:02:34,740 --> 00:02:39,720
architectures do we really want<font color="#CCCCCC"> job on</font>

63
00:02:36,810 --> 00:02:42,960
right and we're<font color="#E5E5E5"> going to apply</font><font color="#CCCCCC"> some of</font>

64
00:02:39,720 --> 00:02:45,240
the most modern cutting-edge<font color="#E5E5E5"> ish</font><font color="#CCCCCC"> Rock</font>

65
00:02:42,960 --> 00:02:46,770
compiler ideas to<font color="#E5E5E5"> jumper a programming</font>

66
00:02:45,240 --> 00:02:47,940
or talk<font color="#CCCCCC"> about</font><font color="#E5E5E5"> how we would do</font><font color="#CCCCCC"> that or</font>

67
00:02:46,770 --> 00:02:49,709
<font color="#E5E5E5">what the road is to that because it's</font>

68
00:02:47,940 --> 00:02:53,090
actually<font color="#E5E5E5"> a really</font><font color="#CCCCCC"> difficult technique to</font>

69
00:02:49,709 --> 00:02:56,820
pull off as much<font color="#E5E5E5"> as we'd like to</font><font color="#CCCCCC"> do it</font>

70
00:02:53,090 --> 00:02:58,260
<font color="#E5E5E5">so this</font><font color="#CCCCCC"> is here as a recap if you've</font>

71
00:02:56,820 --> 00:03:01,130
never<font color="#E5E5E5"> done return area programming the</font>

72
00:02:58,260 --> 00:03:03,989
idea is<font color="#CCCCCC"> that the modern</font><font color="#E5E5E5"> stack is</font>

73
00:03:01,130 --> 00:03:06,390
protected by digital execution

74
00:03:03,990 --> 00:03:08,610
prevention<font color="#E5E5E5"> you cannot execute code on</font>

75
00:03:06,390 --> 00:03:10,950
the modern stack all right so you<font color="#E5E5E5"> have</font>

76
00:03:08,610 --> 00:03:13,920
to<font color="#E5E5E5"> use return</font><font color="#CCCCCC"> Orion programming</font><font color="#E5E5E5"> to</font>

77
00:03:10,950 --> 00:03:17,220
<font color="#CCCCCC">disabled app</font><font color="#E5E5E5"> all right so what you have</font>

78
00:03:13,920 --> 00:03:19,619
is a list of gadgets existing code from

79
00:03:17,220 --> 00:03:23,190
libraries that you jump back to to

80
00:03:19,620 --> 00:03:25,290
disable DP<font color="#CCCCCC"> all</font><font color="#E5E5E5"> right</font>

81
00:03:23,190 --> 00:03:28,940
to pull this off you have<font color="#CCCCCC"> to control</font><font color="#E5E5E5"> the</font>

82
00:03:25,290 --> 00:03:32,609
stack<font color="#E5E5E5"> right</font><font color="#CCCCCC"> it's</font><font color="#E5E5E5"> a prerequisite</font>

83
00:03:28,940 --> 00:03:34,859
jump oriented programming improves this

84
00:03:32,610 --> 00:03:37,410
because we can do<font color="#E5E5E5"> jump or in programming</font>

85
00:03:34,860 --> 00:03:38,820
<font color="#E5E5E5">with or without the stack</font><font color="#CCCCCC"> right</font><font color="#E5E5E5"> that's</font>

86
00:03:37,410 --> 00:03:40,620
the main reason<font color="#CCCCCC"> we want to</font><font color="#E5E5E5"> do this</font>

87
00:03:38,820 --> 00:03:43,410
because the stack is becoming

88
00:03:40,620 --> 00:03:48,510
increasingly<font color="#E5E5E5"> undesirable as a place to</font>

89
00:03:43,410 --> 00:03:50,820
<font color="#CCCCCC">do exploits</font><font color="#E5E5E5"> so the idea is that instead</font>

90
00:03:48,510 --> 00:03:52,590
<font color="#CCCCCC">of finding gadgets that end in a</font><font color="#E5E5E5"> return</font>

91
00:03:50,820 --> 00:03:55,019
<font color="#CCCCCC">instruction</font><font color="#E5E5E5"> we're going to find gadgets</font>

92
00:03:52,590 --> 00:03:56,910
that<font color="#E5E5E5"> end in a like an unconditional</font><font color="#CCCCCC"> jump</font>

93
00:03:55,019 --> 00:03:59,790
instruction right you know we're going

94
00:03:56,910 --> 00:04:02,630
<font color="#CCCCCC">to jump EAX or jump EBX or jump ECX</font>

95
00:03:59,790 --> 00:04:05,400
right for<font color="#CCCCCC"> this to work without</font><font color="#E5E5E5"> the stack</font>

96
00:04:02,630 --> 00:04:07,859
<font color="#CCCCCC">we need a couple</font><font color="#E5E5E5"> more like prerequisites</font>

97
00:04:05,400 --> 00:04:08,940
<font color="#E5E5E5">it doesn't work all on its own you might</font>

98
00:04:07,860 --> 00:04:10,650
<font color="#E5E5E5">be wondering like how do we control</font>

99
00:04:08,940 --> 00:04:12,359
program flow if we don't have a stack

100
00:04:10,650 --> 00:04:18,510
<font color="#E5E5E5">we're going to talk</font><font color="#CCCCCC"> about that</font><font color="#E5E5E5"> and</font>

101
00:04:12,360 --> 00:04:20,660
second<font color="#E5E5E5"> it you might be asking yourself</font>

102
00:04:18,510 --> 00:04:24,430
<font color="#E5E5E5">why we want to do this</font>

103
00:04:20,660 --> 00:04:26,900
and the reasoning is that<font color="#E5E5E5"> number one</font>

104
00:04:24,430 --> 00:04:29,510
<font color="#CCCCCC">stack-based</font><font color="#E5E5E5"> exploits are sort of in the</font>

105
00:04:26,900 --> 00:04:31,539
<font color="#E5E5E5">sites of exploit mitigation systems</font><font color="#CCCCCC"> who</font>

106
00:04:29,510 --> 00:04:34,820
here<font color="#E5E5E5"> has heard of the</font><font color="#CCCCCC"> Intel shadow</font><font color="#E5E5E5"> stack</font>

107
00:04:31,540 --> 00:04:35,900
<font color="#CCCCCC">No so in a few years</font><font color="#E5E5E5"> until it's going to</font>

108
00:04:34,820 --> 00:04:37,790
start building<font color="#E5E5E5"> a feature into their</font>

109
00:04:35,900 --> 00:04:40,070
processors where it<font color="#E5E5E5"> keeps track of what</font>

110
00:04:37,790 --> 00:04:43,010
the stack should be and if the stack you

111
00:04:40,070 --> 00:04:45,680
<font color="#E5E5E5">put in</font><font color="#CCCCCC"> diverges too far from</font><font color="#E5E5E5"> what the</font>

112
00:04:43,010 --> 00:04:47,240
stack is or should be<font color="#E5E5E5"> it cancels</font>

113
00:04:45,680 --> 00:04:49,520
execution<font color="#E5E5E5"> in the program it kills your</font>

114
00:04:47,240 --> 00:04:50,930
exploit<font color="#CCCCCC"> we got to start thinking ahead</font>

115
00:04:49,520 --> 00:04:52,789
<font color="#E5E5E5">if we're going</font><font color="#CCCCCC"> to write good exploits</font>

116
00:04:50,930 --> 00:04:54,530
<font color="#E5E5E5">how we can avoid</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> the other thing is</font>

117
00:04:52,790 --> 00:04:56,660
if you're writing exploits for embedded

118
00:04:54,530 --> 00:04:59,000
<font color="#CCCCCC">systems for mobile you know</font><font color="#E5E5E5"> writing a</font>

119
00:04:56,660 --> 00:05:01,940
really<font color="#E5E5E5"> six zero day for for Android or</font>

120
00:04:59,000 --> 00:05:03,740
iOS<font color="#CCCCCC"> you're</font><font color="#E5E5E5"> probably writing some kernel</font>

121
00:05:01,940 --> 00:05:06,469
return on programming<font color="#CCCCCC"> and</font><font color="#E5E5E5"> that gets</font>

122
00:05:03,740 --> 00:05:08,510
<font color="#E5E5E5">really nasty</font><font color="#CCCCCC"> really fast</font><font color="#E5E5E5"> because as you</font>

123
00:05:06,470 --> 00:05:10,250
start<font color="#CCCCCC"> to alter the stack in the kernel</font>

124
00:05:08,510 --> 00:05:12,140
<font color="#CCCCCC">the chances of crashing</font><font color="#E5E5E5"> the entire</font>

125
00:05:10,250 --> 00:05:14,000
system go up exponentially it becomes

126
00:05:12,140 --> 00:05:15,380
harder and<font color="#E5E5E5"> harder</font><font color="#CCCCCC"> to maintain</font><font color="#E5E5E5"> the</font>

127
00:05:14,000 --> 00:05:17,480
integrity of the stack in such a way

128
00:05:15,380 --> 00:05:19,100
that<font color="#E5E5E5"> you can leave your exploit and have</font>

129
00:05:17,480 --> 00:05:22,250
the entire<font color="#E5E5E5"> system continue to function</font>

130
00:05:19,100 --> 00:05:23,960
happily<font color="#E5E5E5"> right and as we look at some</font><font color="#CCCCCC"> of</font>

131
00:05:22,250 --> 00:05:27,440
those systems<font color="#E5E5E5"> there's there's even more</font>

132
00:05:23,960 --> 00:05:28,729
<font color="#E5E5E5">mitigation it's like s map and pan that</font>

133
00:05:27,440 --> 00:05:30,020
will<font color="#E5E5E5"> protect the stack from being</font>

134
00:05:28,730 --> 00:05:34,310
altered<font color="#CCCCCC"> you know we're dealing with</font>

135
00:05:30,020 --> 00:05:35,990
<font color="#E5E5E5">stuff</font><font color="#CCCCCC"> like stack cookies so it more and</font>

136
00:05:34,310 --> 00:05:38,540
<font color="#E5E5E5">more we don't want to use the sec we</font>

137
00:05:35,990 --> 00:05:41,210
want to find<font color="#E5E5E5"> a way to avoid it</font>

138
00:05:38,540 --> 00:05:43,180
you know it's convenient<font color="#CCCCCC"> even in</font>

139
00:05:41,210 --> 00:05:47,810
situations<font color="#E5E5E5"> where I had a friend who was</font>

140
00:05:43,180 --> 00:05:49,550
writing<font color="#E5E5E5"> an Android kernel exploit right</font>

141
00:05:47,810 --> 00:05:53,180
he's a game controlled of the<font color="#CCCCCC"> enjoy</font>

142
00:05:49,550 --> 00:05:56,360
kernel<font color="#E5E5E5"> and he he used the</font><font color="#CCCCCC"> temporary</font>

143
00:05:53,180 --> 00:05:57,560
<font color="#E5E5E5">programming not because he couldn't mess</font>

144
00:05:56,360 --> 00:06:00,740
with the stack but because it was<font color="#CCCCCC"> just</font>

145
00:05:57,560 --> 00:06:04,430
easier to<font color="#CCCCCC"> keep</font><font color="#E5E5E5"> the kernel running by not</font>

146
00:06:00,740 --> 00:06:08,900
<font color="#E5E5E5">altering the stack</font><font color="#CCCCCC"> problem is it's hard</font>

147
00:06:04,430 --> 00:06:10,670
so here we have basic explanation of how

148
00:06:08,900 --> 00:06:11,989
a jump we're going<font color="#CCCCCC"> to exploit is</font>

149
00:06:10,670 --> 00:06:14,630
supposed<font color="#CCCCCC"> to work this comes</font><font color="#E5E5E5"> from the</font>

150
00:06:11,990 --> 00:06:18,410
<font color="#E5E5E5">original paper and I kind of want</font><font color="#CCCCCC"> to go</font>

151
00:06:14,630 --> 00:06:20,530
over it quasi slowly so that<font color="#CCCCCC"> we see what</font>

152
00:06:18,410 --> 00:06:23,990
we're<font color="#E5E5E5"> looking at so instead of having a</font>

153
00:06:20,530 --> 00:06:25,880
stack<font color="#CCCCCC"> what we have is a register</font>

154
00:06:23,990 --> 00:06:27,950
pointing into memory any memory it could

155
00:06:25,880 --> 00:06:32,840
be a buffer on<font color="#CCCCCC"> the heap or wherever we</font>

156
00:06:27,950 --> 00:06:33,620
<font color="#E5E5E5">can control</font><font color="#CCCCCC"> and we're going to</font><font color="#E5E5E5"> use that</font>

157
00:06:32,840 --> 00:06:36,799
<font color="#E5E5E5">sort of</font>

158
00:06:33,620 --> 00:06:38,450
as our stack so what we need is what we

159
00:06:36,800 --> 00:06:41,240
call like a<font color="#E5E5E5"> dispatch gadget something to</font>

160
00:06:38,450 --> 00:06:43,969
jump to an increase<font color="#E5E5E5"> to iterate our</font>

161
00:06:41,240 --> 00:06:46,010
pointer to our list of<font color="#CCCCCC"> instructions</font><font color="#E5E5E5"> and</font>

162
00:06:43,970 --> 00:06:50,420
then our list of instructions<font color="#E5E5E5"> will point</font>

163
00:06:46,010 --> 00:06:52,430
to our functional gadgets<font color="#E5E5E5"> that makes</font>

164
00:06:50,420 --> 00:06:57,710
sense so we're so we're<font color="#CCCCCC"> basically saying</font>

165
00:06:52,430 --> 00:06:59,590
you know<font color="#E5E5E5"> add</font><font color="#CCCCCC"> four to edx</font><font color="#E5E5E5"> jump to edx</font>

166
00:06:57,710 --> 00:07:03,950
<font color="#E5E5E5">right and edx is going to be pointing to</font>

167
00:06:59,590 --> 00:07:05,840
instruction like movie<font color="#CCCCCC"> e^x</font><font color="#E5E5E5"> jump EDI and</font>

168
00:07:03,950 --> 00:07:08,510
that's going<font color="#CCCCCC"> to hold</font><font color="#E5E5E5"> the location EDI in</font>

169
00:07:05,840 --> 00:07:12,619
this case we hold the location of our

170
00:07:08,510 --> 00:07:15,530
dispatcher<font color="#CCCCCC"> Jack gadget and this</font>

171
00:07:12,620 --> 00:07:17,780
<font color="#E5E5E5">obviously increases the complexity to</font>

172
00:07:15,530 --> 00:07:20,419
exploit quite a bit to the<font color="#CCCCCC"> point that</font>

173
00:07:17,780 --> 00:07:21,710
there is basically<font color="#CCCCCC"> no automated</font><font color="#E5E5E5"> tools of</font>

174
00:07:20,420 --> 00:07:23,960
hearing I<font color="#CCCCCC"> help you even think this way</font>

175
00:07:21,710 --> 00:07:26,200
about<font color="#CCCCCC"> the exploit</font><font color="#E5E5E5"> and true to</font><font color="#CCCCCC"> form the</font>

176
00:07:23,960 --> 00:07:28,430
original<font color="#E5E5E5"> describers of the exploit</font>

177
00:07:26,200 --> 00:07:30,830
<font color="#E5E5E5">couldn't even find an</font><font color="#CCCCCC"> x play that worked</font>

178
00:07:28,430 --> 00:07:32,450
this way in<font color="#E5E5E5"> lib see you know they went</font>

179
00:07:30,830 --> 00:07:34,490
through let's be like<font color="#E5E5E5"> forget a bit a SLR</font>

180
00:07:32,450 --> 00:07:37,250
<font color="#CCCCCC">forget</font><font color="#E5E5E5"> about any anything else in the</font>

181
00:07:34,490 --> 00:07:40,070
way if can we<font color="#E5E5E5"> make enough gadgets this</font>

182
00:07:37,250 --> 00:07:42,800
way in<font color="#CCCCCC"> Lipsy and they couldn't we'll</font><font color="#E5E5E5"> get</font>

183
00:07:40,070 --> 00:07:45,290
into why that<font color="#E5E5E5"> is in a second but it's</font>

184
00:07:42,800 --> 00:07:47,390
something we<font color="#CCCCCC"> really want</font><font color="#E5E5E5"> to overcome</font><font color="#CCCCCC"> all</font>

185
00:07:45,290 --> 00:07:49,640
<font color="#E5E5E5">right so I wrote here a couple to be</font>

186
00:07:47,390 --> 00:07:51,409
like requirements for the<font color="#E5E5E5"> dispatcher</font>

187
00:07:49,640 --> 00:07:53,690
gadget basically we need something

188
00:07:51,410 --> 00:07:59,120
that's<font color="#CCCCCC"> going to iterate in any kind of</font>

189
00:07:53,690 --> 00:08:01,010
control control<font color="#CCCCCC"> perform because</font><font color="#E5E5E5"> it's in</font>

190
00:07:59,120 --> 00:08:02,750
a data structure<font color="#E5E5E5"> we truly control unlike</font>

191
00:08:01,010 --> 00:08:05,030
the stack which has some like

192
00:08:02,750 --> 00:08:07,460
requirements<font color="#CCCCCC"> sack has to work a</font><font color="#E5E5E5"> certain</font>

193
00:08:05,030 --> 00:08:08,900
kind of way or<font color="#E5E5E5"> things break</font><font color="#CCCCCC"> we can</font>

194
00:08:07,460 --> 00:08:09,979
<font color="#CCCCCC">actually make any</font><font color="#E5E5E5"> kind of data structure</font>

195
00:08:08,900 --> 00:08:11,299
so it doesn't have<font color="#E5E5E5"> to be just like a</font>

196
00:08:09,980 --> 00:08:13,580
list of<font color="#E5E5E5"> instructions could be like a</font>

197
00:08:11,300 --> 00:08:15,440
linked list of instructions<font color="#E5E5E5"> or</font><font color="#CCCCCC"> something</font>

198
00:08:13,580 --> 00:08:18,109
<font color="#CCCCCC">even weirder than that</font>

199
00:08:15,440 --> 00:08:20,920
and what's<font color="#E5E5E5"> really going to like drive</font>

200
00:08:18,110 --> 00:08:23,420
<font color="#E5E5E5">how our list of instructions</font><font color="#CCCCCC"> looks is</font>

201
00:08:20,920 --> 00:08:25,850
what<font color="#CCCCCC"> kind of dispatcher gadgets we can</font>

202
00:08:23,420 --> 00:08:27,260
find so the<font color="#CCCCCC"> the adder one that we showed</font>

203
00:08:25,850 --> 00:08:29,660
earlier<font color="#CCCCCC"> where we're adding four to a</font>

204
00:08:27,260 --> 00:08:33,140
register constantly<font color="#E5E5E5"> is the most basic</font>

205
00:08:29,660 --> 00:08:35,090
<font color="#CCCCCC">form but</font><font color="#E5E5E5"> you could add four to some</font>

206
00:08:33,140 --> 00:08:37,189
other different dereference location<font color="#CCCCCC"> or</font>

207
00:08:35,090 --> 00:08:39,110
multiply two numbers again and expect

208
00:08:37,190 --> 00:08:40,880
addresses<font color="#E5E5E5"> that multiplied and change</font>

209
00:08:39,110 --> 00:08:44,600
through memory it really depends on what

210
00:08:40,880 --> 00:08:47,390
<font color="#E5E5E5">you can find the</font><font color="#CCCCCC"> original paper</font><font color="#E5E5E5"> goes</font>

211
00:08:44,600 --> 00:08:48,920
through all kinds of variations<font color="#CCCCCC"> on this</font>

212
00:08:47,390 --> 00:08:50,689
and again the<font color="#CCCCCC"> problem is there really</font>

213
00:08:48,920 --> 00:08:52,849
isn't an automated<font color="#E5E5E5"> tool they exist that</font>

214
00:08:50,690 --> 00:08:54,170
will help you visualize and put all this

215
00:08:52,850 --> 00:08:57,050
together it becomes a<font color="#E5E5E5"> lot of manual work</font>

216
00:08:54,170 --> 00:08:58,849
<font color="#E5E5E5">but the benefit is</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> again you can</font>

217
00:08:57,050 --> 00:09:01,130
put your list of return instructions or

218
00:08:58,850 --> 00:09:02,840
jump instructions in this<font color="#E5E5E5"> case anywhere</font>

219
00:09:01,130 --> 00:09:06,590
<font color="#E5E5E5">you want as</font><font color="#CCCCCC"> long as it's memory that you</font>

220
00:09:02,840 --> 00:09:08,690
can control<font color="#CCCCCC"> so you know buffers that</font>

221
00:09:06,590 --> 00:09:14,170
<font color="#CCCCCC">were potentially useless to you before</font>

222
00:09:08,690 --> 00:09:14,170
are now very<font color="#E5E5E5"> useful it useful all right</font>

223
00:09:15,100 --> 00:09:21,560
<font color="#E5E5E5">it's just tag going over what I said all</font>

224
00:09:19,700 --> 00:09:27,160
right<font color="#E5E5E5"> and</font><font color="#CCCCCC"> the functional gadgets are</font>

225
00:09:21,560 --> 00:09:27,160
just that<font color="#E5E5E5"> we do something</font><font color="#CCCCCC"> and then jump</font>

226
00:09:28,570 --> 00:09:36,620
so again it works just like Rob<font color="#CCCCCC"> you know</font>

227
00:09:33,440 --> 00:09:38,810
<font color="#E5E5E5">we have a memory access gadgets</font>

228
00:09:36,620 --> 00:09:42,800
<font color="#CCCCCC">arithmetic caches branching</font><font color="#E5E5E5"> gaskets</font>

229
00:09:38,810 --> 00:09:44,300
<font color="#E5E5E5">system calls all nine yards works the</font>

230
00:09:42,800 --> 00:09:46,640
same way<font color="#CCCCCC"> so here are the current tools</font>

231
00:09:44,300 --> 00:09:49,189
it's sort of kind<font color="#E5E5E5"> of support jump or</font>

232
00:09:46,640 --> 00:09:51,080
<font color="#E5E5E5">head programming and as I'll explain</font><font color="#CCCCCC"> a</font>

233
00:09:49,190 --> 00:09:52,880
second they don't really support<font color="#CCCCCC"> it</font>

234
00:09:51,080 --> 00:09:55,490
enough in the kinds of<font color="#E5E5E5"> ways</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> make the</font>

235
00:09:52,880 --> 00:09:58,310
classic<font color="#E5E5E5"> attack possible or easy</font><font color="#CCCCCC"> to do</font>

236
00:09:55,490 --> 00:10:01,400
and we're<font color="#CCCCCC"> going to talk about like</font><font color="#E5E5E5"> the</font>

237
00:09:58,310 --> 00:10:02,959
reasons we found<font color="#E5E5E5"> that was the</font><font color="#CCCCCC"> case</font><font color="#E5E5E5"> again</font>

238
00:10:01,400 --> 00:10:04,280
this is a<font color="#E5E5E5"> very desirable attack we want</font>

239
00:10:02,960 --> 00:10:08,330
an easy way<font color="#CCCCCC"> to do</font><font color="#E5E5E5"> it</font>

240
00:10:04,280 --> 00:10:09,800
easy way to<font color="#E5E5E5"> think about it so the sport</font>

241
00:10:08,330 --> 00:10:12,230
<font color="#CCCCCC">that you're given in all the tools</font>

242
00:10:09,800 --> 00:10:13,609
across<font color="#E5E5E5"> the board is basically we're</font>

243
00:10:12,230 --> 00:10:16,280
going<font color="#E5E5E5"> to search</font><font color="#CCCCCC"> for jump instructions</font>

244
00:10:13,610 --> 00:10:18,620
<font color="#E5E5E5">that's it right it basically dumps all</font>

245
00:10:16,280 --> 00:10:20,930
the unconditional jumps out<font color="#CCCCCC"> of the</font>

246
00:10:18,620 --> 00:10:23,330
binary<font color="#E5E5E5"> or theoretically all of them</font>

247
00:10:20,930 --> 00:10:25,489
actually<font color="#CCCCCC"> what I found was that</font><font color="#E5E5E5"> many of</font>

248
00:10:23,330 --> 00:10:27,290
the tools functionally failed to do that

249
00:10:25,490 --> 00:10:31,610
<font color="#E5E5E5">right and there's some</font><font color="#CCCCCC"> reasons for that</font>

250
00:10:27,290 --> 00:10:33,349
that<font color="#E5E5E5"> we'll get into in</font><font color="#CCCCCC"> a second and the</font>

251
00:10:31,610 --> 00:10:34,910
sad realization that you come<font color="#E5E5E5"> to when</font>

252
00:10:33,350 --> 00:10:36,380
<font color="#E5E5E5">you do this is that actually programs</font>

253
00:10:34,910 --> 00:10:38,360
that are generated with modern compilers

254
00:10:36,380 --> 00:10:40,880
don't have that many unconditional jumps

255
00:10:38,360 --> 00:10:43,690
built into them for<font color="#E5E5E5"> a variety of reasons</font>

256
00:10:40,880 --> 00:10:45,860
there's just<font color="#E5E5E5"> even even jumps that are</font>

257
00:10:43,690 --> 00:10:48,050
logically unconditional or sometimes

258
00:10:45,860 --> 00:10:50,000
expressed as conditional jumps<font color="#E5E5E5"> which</font>

259
00:10:48,050 --> 00:10:52,060
means that the things that's trying<font color="#E5E5E5"> to</font>

260
00:10:50,000 --> 00:10:54,200
dump out are going to be like limited

261
00:10:52,060 --> 00:10:56,780
fewer gadgets<font color="#E5E5E5"> than we</font><font color="#CCCCCC"> actually need to</font>

262
00:10:54,200 --> 00:10:58,340
pull this off<font color="#E5E5E5"> so the conclusion a lot of</font>

263
00:10:56,780 --> 00:11:00,439
people came to when this<font color="#CCCCCC"> attack first</font>

264
00:10:58,340 --> 00:11:02,690
<font color="#E5E5E5">came out was</font><font color="#CCCCCC"> that</font>

265
00:11:00,440 --> 00:11:04,250
it<font color="#E5E5E5"> just wasn't</font><font color="#CCCCCC"> turing-complete there</font><font color="#E5E5E5"> is</font>

266
00:11:02,690 --> 00:11:06,290
no way<font color="#E5E5E5"> to get enough gadgets even on a</font>

267
00:11:04,250 --> 00:11:09,529
really big binary<font color="#E5E5E5"> to pull this off</font><font color="#CCCCCC"> right</font>

268
00:11:06,290 --> 00:11:11,360
or that<font color="#E5E5E5"> way it would require something</font>

269
00:11:09,529 --> 00:11:13,960
that was very<font color="#CCCCCC"> manual and very</font>

270
00:11:11,360 --> 00:11:16,339
complicated<font color="#CCCCCC"> and be a big waste</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> time</font>

271
00:11:13,960 --> 00:11:17,720
[Music]

272
00:11:16,339 --> 00:11:20,180
the other thing is that<font color="#E5E5E5"> many of the</font>

273
00:11:17,720 --> 00:11:22,209
tools don't don't really vet the gadgets

274
00:11:20,180 --> 00:11:25,370
<font color="#E5E5E5">and a large number of them are</font>

275
00:11:22,209 --> 00:11:31,699
functionally useless<font color="#CCCCCC"> and we'll see that</font>

276
00:11:25,370 --> 00:11:33,680
in a second<font color="#CCCCCC"> so the</font><font color="#E5E5E5"> other problem</font><font color="#CCCCCC"> with</font>

277
00:11:31,699 --> 00:11:35,300
many of the existing tools is they don't

278
00:11:33,680 --> 00:11:37,459
<font color="#CCCCCC">support all the architectures that we</font>

279
00:11:35,300 --> 00:11:39,170
want and the ones<font color="#E5E5E5"> that they do</font><font color="#CCCCCC"> support</font>

280
00:11:37,459 --> 00:11:43,040
are not<font color="#E5E5E5"> supported in all the ways we</font>

281
00:11:39,170 --> 00:11:46,579
<font color="#E5E5E5">want them to end of the day a lot</font><font color="#CCCCCC"> of a</font>

282
00:11:43,040 --> 00:11:49,279
lot<font color="#CCCCCC"> of architectures very much</font><font color="#E5E5E5"> lend</font>

283
00:11:46,579 --> 00:11:51,439
themselves to this kind of attack<font color="#CCCCCC"> and</font><font color="#E5E5E5"> we</font>

284
00:11:49,279 --> 00:11:53,870
want our<font color="#E5E5E5"> jumper a programming tool to</font>

285
00:11:51,440 --> 00:11:55,880
<font color="#CCCCCC">support this correctly</font><font color="#E5E5E5"> so I'm going to</font>

286
00:11:53,870 --> 00:11:58,850
<font color="#E5E5E5">give you a quick table of the various</font>

287
00:11:55,880 --> 00:12:01,160
<font color="#CCCCCC">rap</font><font color="#E5E5E5"> tools to support job and the</font>

288
00:11:58,850 --> 00:12:03,819
<font color="#CCCCCC">architecture is this support</font><font color="#E5E5E5"> you know</font>

289
00:12:01,160 --> 00:12:07,969
across<font color="#CCCCCC"> the board</font><font color="#E5E5E5"> everything sports xa6</font>

290
00:12:03,819 --> 00:12:11,149
<font color="#CCCCCC">okayish x64 less so and then as we get</font>

291
00:12:07,970 --> 00:12:14,720
<font color="#E5E5E5">into embedded things or PowerPC</font><font color="#CCCCCC"> arm</font><font color="#E5E5E5"> it</font>

292
00:12:11,149 --> 00:12:18,050
really<font color="#E5E5E5"> drops off some of the reason that</font>

293
00:12:14,720 --> 00:12:19,610
is is that<font color="#CCCCCC"> all this relies on</font><font color="#E5E5E5"> capstone</font>

294
00:12:18,050 --> 00:12:21,859
support and understanding of<font color="#E5E5E5"> how</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> use</font>

295
00:12:19,610 --> 00:12:24,440
the capstone library correctly which not

296
00:12:21,860 --> 00:12:26,480
every people<font color="#E5E5E5"> not everyone does or it's</font>

297
00:12:24,440 --> 00:12:29,000
pretty complicated

298
00:12:26,480 --> 00:12:31,190
sadly<font color="#E5E5E5"> probably the best tool on this</font>

299
00:12:29,000 --> 00:12:35,690
list<font color="#CCCCCC"> monad up I only</font><font color="#E5E5E5"> supports</font><font color="#CCCCCC"> X basics</font>

300
00:12:31,190 --> 00:12:38,300
not even 64-bit binaries which sucks and

301
00:12:35,690 --> 00:12:40,220
then there's<font color="#CCCCCC"> read</font><font color="#E5E5E5"> Aria which supports</font>

302
00:12:38,300 --> 00:12:43,040
<font color="#E5E5E5">everything but has its own issues</font><font color="#CCCCCC"> its</font>

303
00:12:40,220 --> 00:12:46,399
<font color="#CCCCCC">we'll get</font><font color="#E5E5E5"> into a moment even support AVR</font>

304
00:12:43,040 --> 00:12:49,760
which i think is really<font color="#E5E5E5"> cool</font><font color="#CCCCCC"> evany you</font>

305
00:12:46,399 --> 00:12:51,290
guys<font color="#E5E5E5"> are in a VR code</font><font color="#CCCCCC"> bath so I actually</font>

306
00:12:49,760 --> 00:12:53,720
<font color="#CCCCCC">started my career in 3d printing</font>

307
00:12:51,290 --> 00:12:57,110
originally I was a 3d printing firmware

308
00:12:53,720 --> 00:12:58,939
software kind of guy and I wrote a lot

309
00:12:57,110 --> 00:13:00,920
<font color="#E5E5E5">of a VR quote and what's cool about a VR</font>

310
00:12:58,939 --> 00:13:03,079
is it's a<font color="#E5E5E5"> Harvard architecture data and</font>

311
00:13:00,920 --> 00:13:05,329
instructions are separate<font color="#E5E5E5"> right they</font>

312
00:13:03,079 --> 00:13:07,099
live in separate registers so techniques

313
00:13:05,329 --> 00:13:11,000
<font color="#E5E5E5">like drop and drop are the only way to</font>

314
00:13:07,100 --> 00:13:12,260
<font color="#CCCCCC">do memory corruption attacks so kind of</font>

315
00:13:11,000 --> 00:13:13,460
<font color="#CCCCCC">what</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> for a VR if you want to own a</font>

316
00:13:12,260 --> 00:13:17,140
3d printer

317
00:13:13,460 --> 00:13:17,140
which I do I don't<font color="#E5E5E5"> know if like</font><font color="#CCCCCC"> you guys</font>

318
00:13:19,390 --> 00:13:25,910
so the way that<font color="#CCCCCC"> these essentially</font><font color="#E5E5E5"> work</font>

319
00:13:22,940 --> 00:13:29,270
in all cases is that<font color="#CCCCCC"> what they've</font><font color="#E5E5E5"> done</font>

320
00:13:25,910 --> 00:13:31,640
is assembled a suite of<font color="#CCCCCC"> x86 instructions</font>

321
00:13:29,270 --> 00:13:33,170
<font color="#E5E5E5">and just</font><font color="#CCCCCC"> sort of hard-coded them and the</font>

322
00:13:31,640 --> 00:13:35,120
<font color="#E5E5E5">problem with</font><font color="#CCCCCC"> that is that you're relying</font>

323
00:13:33,170 --> 00:13:37,130
on your<font color="#E5E5E5"> assembler</font><font color="#CCCCCC"> or your</font><font color="#E5E5E5"> knowledge of</font>

324
00:13:35,120 --> 00:13:40,160
the encoding standard for x86<font color="#E5E5E5"> or</font>

325
00:13:37,130 --> 00:13:42,110
whatever the architecture is<font color="#E5E5E5"> you're</font>

326
00:13:40,160 --> 00:13:44,779
<font color="#E5E5E5">relying on</font><font color="#CCCCCC"> that to be complete which it</font>

327
00:13:42,110 --> 00:13:46,399
may not be and you're sort<font color="#E5E5E5"> of making</font>

328
00:13:44,779 --> 00:13:50,930
<font color="#E5E5E5">some assumptions about what</font><font color="#CCCCCC"> the exploit</font>

329
00:13:46,399 --> 00:13:52,399
developer<font color="#CCCCCC"> actually wants to do I'll get</font>

330
00:13:50,930 --> 00:13:54,979
into<font color="#E5E5E5"> some</font><font color="#CCCCCC"> of the like corner cases</font><font color="#E5E5E5"> I</font>

331
00:13:52,399 --> 00:13:58,190
found but in general none<font color="#CCCCCC"> of the tools</font>

332
00:13:54,980 --> 00:14:01,700
implemented every possible variation on

333
00:13:58,190 --> 00:14:04,910
the<font color="#CCCCCC"> encoding x'</font><font color="#E5E5E5"> that we want</font><font color="#CCCCCC"> and they're</font>

334
00:14:01,700 --> 00:14:07,130
sort<font color="#E5E5E5"> of more guided toward</font><font color="#CCCCCC"> classic-rock</font>

335
00:14:04,910 --> 00:14:08,750
<font color="#E5E5E5">attacks so when you're</font><font color="#CCCCCC"> looking</font><font color="#E5E5E5"> for jumps</font>

336
00:14:07,130 --> 00:14:11,000
really<font color="#CCCCCC"> what</font><font color="#E5E5E5"> these tools want to help you</font>

337
00:14:08,750 --> 00:14:12,620
do is find the classic jump<font color="#CCCCCC"> ESB</font>

338
00:14:11,000 --> 00:14:16,190
<font color="#E5E5E5">extraction that</font><font color="#CCCCCC"> you use at the beginning</font>

339
00:14:12,620 --> 00:14:17,360
of<font color="#E5E5E5"> a rap chain potentially and they</font>

340
00:14:16,190 --> 00:14:21,980
don't do anything<font color="#E5E5E5"> to</font><font color="#CCCCCC"> help you with</font>

341
00:14:17,360 --> 00:14:23,000
pulling this attack off and so we're

342
00:14:21,980 --> 00:14:25,459
going to give you<font color="#CCCCCC"> some examples</font><font color="#E5E5E5"> of the</font>

343
00:14:23,000 --> 00:14:27,290
output for jump instructions<font color="#E5E5E5"> on some of</font>

344
00:14:25,459 --> 00:14:28,939
these tools on like<font color="#E5E5E5"> medium to</font><font color="#CCCCCC"> large size</font>

345
00:14:27,290 --> 00:14:31,189
binaries and what you'll<font color="#CCCCCC"> see</font><font color="#E5E5E5"> is that</font>

346
00:14:28,940 --> 00:14:35,830
<font color="#E5E5E5">even on like relatively large stuff like</font>

347
00:14:31,190 --> 00:14:35,830
browsers<font color="#E5E5E5"> it finds practically nothing so</font>

348
00:14:36,550 --> 00:14:42,469
<font color="#CCCCCC">here's some smaller binaries on wrapper</font>

349
00:14:41,000 --> 00:14:46,100
have any of you guys use<font color="#E5E5E5"> Robert before</font>

350
00:14:42,470 --> 00:14:49,640
<font color="#E5E5E5">it's a yeah a little bit</font>

351
00:14:46,100 --> 00:14:52,490
it's<font color="#E5E5E5"> a rope gadget finding tool dumps</font>

352
00:14:49,640 --> 00:14:54,589
out all the you know instruction

353
00:14:52,490 --> 00:14:57,020
instruction<font color="#CCCCCC"> returned or in this case</font>

354
00:14:54,589 --> 00:15:00,290
instruction instruction jump in this

355
00:14:57,020 --> 00:15:03,500
<font color="#E5E5E5">case we're</font><font color="#CCCCCC"> looking</font><font color="#E5E5E5"> for jump ESB finds</font>

356
00:15:00,290 --> 00:15:06,140
practically nothing<font color="#CCCCCC"> asked for jump EDX</font>

357
00:15:03,500 --> 00:15:11,089
times practically nothing on a much

358
00:15:06,140 --> 00:15:13,459
larger<font color="#CCCCCC"> binary</font><font color="#E5E5E5"> we start to find stuff but</font>

359
00:15:11,089 --> 00:15:15,170
it's really not ideal for the attack<font color="#E5E5E5"> and</font>

360
00:15:13,459 --> 00:15:16,790
the<font color="#CCCCCC"> other problem</font><font color="#E5E5E5"> with it is that</font><font color="#CCCCCC"> if</font>

361
00:15:15,170 --> 00:15:18,680
you're developing this as X play

362
00:15:16,790 --> 00:15:21,890
developer what's giving you is a list<font color="#E5E5E5"> of</font>

363
00:15:18,680 --> 00:15:23,900
addresses which is cool but what you'd

364
00:15:21,890 --> 00:15:25,730
rather have is the stuff<font color="#E5E5E5"> leading up to</font>

365
00:15:23,900 --> 00:15:27,319
the address<font color="#E5E5E5"> and actually some</font><font color="#CCCCCC"> vetting of</font>

366
00:15:25,730 --> 00:15:30,820
<font color="#E5E5E5">it which is extra</font>

367
00:15:27,320 --> 00:15:30,820
super important in this<font color="#E5E5E5"> kind of attack</font>

368
00:15:31,509 --> 00:15:37,220
<font color="#E5E5E5">so will be really great is if it tried</font>

369
00:15:35,060 --> 00:15:39,439
to<font color="#E5E5E5"> put together the final like chain</font>

370
00:15:37,220 --> 00:15:41,540
attack for you<font color="#CCCCCC"> and this</font><font color="#E5E5E5"> is a feature</font>

371
00:15:39,440 --> 00:15:43,490
that is existed for<font color="#E5E5E5"> Rob and many tools</font>

372
00:15:41,540 --> 00:15:46,069
for<font color="#CCCCCC"> a while like if you use</font><font color="#E5E5E5"> modify or</font>

373
00:15:43,490 --> 00:15:48,019
<font color="#E5E5E5">offer does this you can tell it we're on</font>

374
00:15:46,069 --> 00:15:49,279
<font color="#E5E5E5">Windows and we want to</font><font color="#CCCCCC"> disabled app and</font>

375
00:15:48,019 --> 00:15:51,910
<font color="#CCCCCC">we'll try</font><font color="#E5E5E5"> and put together the pieces</font>

376
00:15:49,279 --> 00:15:54,079
for you in it more or less<font color="#CCCCCC"> kind of works</font>

377
00:15:51,910 --> 00:15:55,550
<font color="#CCCCCC">there's nothing like</font><font color="#E5E5E5"> that for job right</font>

378
00:15:54,079 --> 00:15:57,819
now<font color="#E5E5E5"> and we'll</font><font color="#CCCCCC"> get into some</font><font color="#E5E5E5"> of the</font>

379
00:15:55,550 --> 00:16:01,250
<font color="#E5E5E5">limitations why like no one's tried that</font>

380
00:15:57,819 --> 00:16:02,240
<font color="#CCCCCC">and some</font><font color="#E5E5E5"> of my basic</font><font color="#CCCCCC"> proof of concept</font>

381
00:16:01,250 --> 00:16:04,130
tools

382
00:16:02,240 --> 00:16:05,389
spoiler alert<font color="#E5E5E5"> you don't have anything</font>

383
00:16:04,130 --> 00:16:10,339
quite working<font color="#E5E5E5"> yet but we're getting</font>

384
00:16:05,389 --> 00:16:13,190
<font color="#E5E5E5">there</font><font color="#CCCCCC"> so let's look at another tool this</font>

385
00:16:10,339 --> 00:16:14,480
<font color="#E5E5E5">is</font><font color="#CCCCCC"> rock gadget it does a</font><font color="#E5E5E5"> lot better and</font>

386
00:16:13,190 --> 00:16:16,550
it gives us<font color="#CCCCCC"> some of the information that</font>

387
00:16:14,480 --> 00:16:19,220
we want again<font color="#E5E5E5"> we're asking</font><font color="#CCCCCC"> for jump</font>

388
00:16:16,550 --> 00:16:20,508
instructions and this<font color="#E5E5E5"> is sort of what</font><font color="#CCCCCC"> it</font>

389
00:16:19,220 --> 00:16:21,829
looks like<font color="#E5E5E5"> and</font><font color="#CCCCCC"> you can</font><font color="#E5E5E5"> tell what's</font>

390
00:16:20,509 --> 00:16:23,959
<font color="#CCCCCC">looking for is</font><font color="#E5E5E5"> anything</font><font color="#CCCCCC"> that ends in</font><font color="#E5E5E5"> a</font>

391
00:16:21,829 --> 00:16:25,758
<font color="#E5E5E5">jump anything</font><font color="#CCCCCC"> that is in a call</font><font color="#E5E5E5"> again</font>

392
00:16:23,959 --> 00:16:27,229
there's no vetting whatsoever<font color="#E5E5E5"> and it's</font>

393
00:16:25,759 --> 00:16:29,089
up to<font color="#CCCCCC"> the exploit developer to figure</font>

394
00:16:27,230 --> 00:16:31,819
out how all this stuff fits together in

395
00:16:29,089 --> 00:16:33,380
<font color="#E5E5E5">memory right and if you've ever done any</font>

396
00:16:31,819 --> 00:16:35,269
exploit development<font color="#E5E5E5"> what you'll know is</font>

397
00:16:33,380 --> 00:16:36,860
that the<font color="#E5E5E5"> usage of all this stuff is</font>

398
00:16:35,269 --> 00:16:38,779
<font color="#E5E5E5">really dependent on what comes before</font>

399
00:16:36,860 --> 00:16:41,360
and what the state of registers<font color="#CCCCCC"> and what</font>

400
00:16:38,779 --> 00:16:43,760
the state of<font color="#E5E5E5"> memory is so this is kind</font>

401
00:16:41,360 --> 00:16:44,930
of like<font color="#CCCCCC"> a menu for something that's way</font>

402
00:16:43,760 --> 00:16:46,459
more<font color="#E5E5E5"> complicated than</font><font color="#CCCCCC"> what you</font><font color="#E5E5E5"> want to</font>

403
00:16:44,930 --> 00:16:47,930
think<font color="#E5E5E5"> of that it becomes like massively</font>

404
00:16:46,459 --> 00:16:53,119
<font color="#E5E5E5">time consuming thing</font><font color="#CCCCCC"> even if you have</font>

405
00:16:47,930 --> 00:16:55,310
<font color="#E5E5E5">control</font><font color="#CCCCCC"> it can be really hard</font><font color="#E5E5E5"> here's Rob</font>

406
00:16:53,120 --> 00:16:58,279
gadget running against a bigger binary

407
00:16:55,310 --> 00:17:00,680
<font color="#E5E5E5">and here's the third tool we're looking</font>

408
00:16:58,279 --> 00:17:03,260
at is<font color="#CCCCCC"> Mona DUP pi it's written</font><font color="#E5E5E5"> by a guy</font>

409
00:17:00,680 --> 00:17:04,609
<font color="#E5E5E5">named calls himself Coraline coder</font><font color="#CCCCCC"> he's</font>

410
00:17:03,260 --> 00:17:05,990
like one of<font color="#E5E5E5"> the foremost experts</font><font color="#CCCCCC"> on</font>

411
00:17:04,609 --> 00:17:07,579
<font color="#CCCCCC">Windows</font><font color="#E5E5E5"> heap the exploitation this</font>

412
00:17:05,990 --> 00:17:09,799
probably<font color="#E5E5E5"> the best</font><font color="#CCCCCC"> rob tool out there</font>

413
00:17:07,579 --> 00:17:12,470
<font color="#CCCCCC">right now for</font><font color="#E5E5E5"> Windows at least</font><font color="#CCCCCC"> it's very</font>

414
00:17:09,799 --> 00:17:15,109
good<font color="#E5E5E5"> at putting together like preset</font><font color="#CCCCCC"> up</font>

415
00:17:12,470 --> 00:17:18,470
<font color="#E5E5E5">drop chains that will turn off digital</font>

416
00:17:15,109 --> 00:17:20,240
<font color="#CCCCCC">execution</font><font color="#E5E5E5"> prevention</font><font color="#CCCCCC"> on</font><font color="#E5E5E5"> Windows so this</font>

417
00:17:18,470 --> 00:17:22,309
is kind of<font color="#E5E5E5"> the functionality</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> we</font>

418
00:17:20,240 --> 00:17:24,109
want it<font color="#E5E5E5"> just doesn't</font><font color="#CCCCCC"> support jump Orient</font>

419
00:17:22,309 --> 00:17:26,240
programming the way we want<font color="#E5E5E5"> to it has</font>

420
00:17:24,109 --> 00:17:28,610
some features regarding jumps as we see

421
00:17:26,240 --> 00:17:31,970
here this is<font color="#E5E5E5"> like the jump feature but</font>

422
00:17:28,610 --> 00:17:34,100
it doesn't work super well<font color="#E5E5E5"> it doesn't</font>

423
00:17:31,970 --> 00:17:36,950
<font color="#CCCCCC">get get us</font><font color="#E5E5E5"> even</font><font color="#CCCCCC"> halfway to what we want</font>

424
00:17:34,100 --> 00:17:39,379
to be<font color="#E5E5E5"> so we need to start</font><font color="#CCCCCC"> thinking of</font>

425
00:17:36,950 --> 00:17:40,429
ways<font color="#CCCCCC"> to try and</font><font color="#E5E5E5"> improve</font><font color="#CCCCCC"> the process so</font>

426
00:17:39,380 --> 00:17:41,320
that<font color="#CCCCCC"> we don't spend the rest of our</font>

427
00:17:40,429 --> 00:17:45,250
lives<font color="#E5E5E5"> putting together</font>

428
00:17:41,320 --> 00:17:47,830
various jump gadgets<font color="#CCCCCC"> and of course my</font>

429
00:17:45,250 --> 00:17:51,730
<font color="#CCCCCC">top high doesn't support anything</font><font color="#E5E5E5"> but</font>

430
00:17:47,830 --> 00:17:53,408
x86<font color="#E5E5E5"> whatsoever in fact I think I had a</font>

431
00:17:51,730 --> 00:17:55,870
quote on here from from the guy who

432
00:17:53,409 --> 00:17:59,460
wrote<font color="#E5E5E5"> a said yeah it would probably take</font>

433
00:17:55,870 --> 00:18:02,529
some months to add<font color="#E5E5E5"> x64 support properly</font>

434
00:17:59,460 --> 00:18:04,269
so it's<font color="#E5E5E5"> not going to really work for</font>

435
00:18:02,529 --> 00:18:06,100
what we<font color="#CCCCCC"> want even modifying it it's not</font>

436
00:18:04,269 --> 00:18:09,820
<font color="#E5E5E5">going to guess the jump chains we want</font>

437
00:18:06,100 --> 00:18:12,189
which is sad<font color="#E5E5E5"> so general issues we</font>

438
00:18:09,820 --> 00:18:13,928
<font color="#CCCCCC">noticed so far is lack of gadgets</font>

439
00:18:12,190 --> 00:18:15,870
<font color="#CCCCCC">alright there's not enough jump gadgets</font>

440
00:18:13,929 --> 00:18:18,309
to do the exploit that<font color="#CCCCCC"> we want to</font><font color="#E5E5E5"> do</font>

441
00:18:15,870 --> 00:18:20,250
<font color="#CCCCCC">there's major analysis overhead right</font>

442
00:18:18,309 --> 00:18:22,450
there's a lot of stuff to look at

443
00:18:20,250 --> 00:18:24,850
manually and figure out how it<font color="#CCCCCC"> affects</font>

444
00:18:22,450 --> 00:18:26,649
<font color="#E5E5E5">state of the processor the big pain is</font>

445
00:18:24,850 --> 00:18:30,219
<font color="#CCCCCC">Big Time drain deters</font><font color="#E5E5E5"> us from writing</font>

446
00:18:26,649 --> 00:18:32,529
cool exploits<font color="#CCCCCC"> it offers no help in</font>

447
00:18:30,220 --> 00:18:34,179
finding that needed dispatch gadget<font color="#E5E5E5"> and</font>

448
00:18:32,529 --> 00:18:36,009
then implying<font color="#E5E5E5"> what the data structure</font>

449
00:18:34,179 --> 00:18:39,159
<font color="#E5E5E5">it's iterating through looks like which</font>

450
00:18:36,009 --> 00:18:41,200
will be really<font color="#CCCCCC"> great</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> know so</font>

451
00:18:39,159 --> 00:18:43,509
ultimately this<font color="#CCCCCC"> is</font><font color="#E5E5E5"> like hugely</font><font color="#CCCCCC"> time</font>

452
00:18:41,200 --> 00:18:44,590
<font color="#CCCCCC">consuming</font><font color="#E5E5E5"> major pain</font><font color="#CCCCCC"> that's</font><font color="#E5E5E5"> why people</font>

453
00:18:43,509 --> 00:18:48,009
<font color="#E5E5E5">don't do it that's why you don't</font><font color="#CCCCCC"> see</font>

454
00:18:44,590 --> 00:18:51,759
<font color="#E5E5E5">John</font><font color="#CCCCCC"> pori it exploits</font><font color="#E5E5E5"> in the wild</font><font color="#CCCCCC"> it's</font>

455
00:18:48,009 --> 00:18:52,990
<font color="#E5E5E5">really useful so we want it so some</font>

456
00:18:51,759 --> 00:18:55,299
<font color="#CCCCCC">basic things</font><font color="#E5E5E5"> I've done to improve these</font>

457
00:18:52,990 --> 00:18:57,580
tools is<font color="#E5E5E5"> to add better-off code support</font>

458
00:18:55,299 --> 00:18:59,830
so it turns out in our<font color="#E5E5E5"> jump or a attacks</font>

459
00:18:57,580 --> 00:19:01,928
like there's a<font color="#E5E5E5"> bunch of jump</font>

460
00:18:59,830 --> 00:19:07,629
instructions that<font color="#E5E5E5"> the tools as they're</font>

461
00:19:01,929 --> 00:19:09,220
implemented<font color="#CCCCCC"> don't include</font><font color="#E5E5E5"> so ensuring</font>

462
00:19:07,629 --> 00:19:13,360
that they find all the jump gadgets

463
00:19:09,220 --> 00:19:16,179
helps the attacks be tractable<font color="#E5E5E5"> to be</font>

464
00:19:13,360 --> 00:19:18,219
possible<font color="#E5E5E5"> the other idea here is</font><font color="#CCCCCC"> to start</font>

465
00:19:16,179 --> 00:19:19,570
<font color="#CCCCCC">looking at conditional jumps</font><font color="#E5E5E5"> now if we</font>

466
00:19:18,220 --> 00:19:22,330
can<font color="#E5E5E5"> find a way to include every</font>

467
00:19:19,570 --> 00:19:24,820
conditional jump in the binary<font color="#E5E5E5"> then we</font>

468
00:19:22,330 --> 00:19:26,408
have a lot more jumps right and since we

469
00:19:24,820 --> 00:19:27,850
already<font color="#E5E5E5"> have some control the processor</font>

470
00:19:26,409 --> 00:19:30,090
<font color="#E5E5E5">we can start and control the</font><font color="#CCCCCC"> flags</font>

471
00:19:27,850 --> 00:19:32,769
register and start<font color="#E5E5E5"> to put ourselves in a</font>

472
00:19:30,090 --> 00:19:34,240
<font color="#CCCCCC">situation where we</font><font color="#E5E5E5"> can do conditional</font>

473
00:19:32,769 --> 00:19:35,799
jumps instead of unconditional<font color="#E5E5E5"> jumps</font>

474
00:19:34,240 --> 00:19:37,480
that open this<font color="#E5E5E5"> whole other world of</font>

475
00:19:35,799 --> 00:19:39,129
exploitation up we just need a way to

476
00:19:37,480 --> 00:19:42,279
programmatically think about what that

477
00:19:39,129 --> 00:19:45,870
<font color="#E5E5E5">will</font><font color="#CCCCCC"> be or sort</font><font color="#E5E5E5"> of manage the side</font>

478
00:19:42,279 --> 00:19:45,870
effects of doing<font color="#E5E5E5"> these conditional jumps</font>

479
00:19:46,420 --> 00:19:53,390
<font color="#E5E5E5">all right so what we did with</font><font color="#CCCCCC"> robber was</font>

480
00:19:50,270 --> 00:19:57,200
to start including jumps<font color="#CCCCCC"> -</font><font color="#E5E5E5"> pointer right</font>

481
00:19:53,390 --> 00:20:01,880
it turned<font color="#E5E5E5"> out</font><font color="#CCCCCC"> it's not</font><font color="#E5E5E5"> something it</font>

482
00:19:57,200 --> 00:20:03,940
<font color="#CCCCCC">looks for</font><font color="#E5E5E5"> so you can jump to</font><font color="#CCCCCC"> eex but it</font>

483
00:20:01,880 --> 00:20:06,620
doesn't look for jump<font color="#CCCCCC"> to pointer if</font><font color="#E5E5E5"> eex</font>

484
00:20:03,940 --> 00:20:10,460
<font color="#E5E5E5">in</font><font color="#CCCCCC"> intel mocha notation what that looks</font>

485
00:20:06,620 --> 00:20:13,340
is<font color="#CCCCCC"> like we have</font><font color="#E5E5E5"> jump our ax instead</font><font color="#CCCCCC"> we</font>

486
00:20:10,460 --> 00:20:14,660
want jump our ax and brackets<font color="#CCCCCC"> right the</font>

487
00:20:13,340 --> 00:20:16,730
dereference jump that's something we

488
00:20:14,660 --> 00:20:20,480
want<font color="#E5E5E5"> and we also want the dereference</font>

489
00:20:16,730 --> 00:20:22,310
called<font color="#E5E5E5"> instruction</font><font color="#CCCCCC"> that's just something</font>

490
00:20:20,480 --> 00:20:24,740
they didn't add probably<font color="#E5E5E5"> because it</font>

491
00:20:22,310 --> 00:20:32,240
wasn't useful<font color="#E5E5E5"> in classic Rob attacks so</font>

492
00:20:24,740 --> 00:20:34,280
we added that<font color="#CCCCCC"> Rob gadget was</font><font color="#E5E5E5"> a little</font>

493
00:20:32,240 --> 00:20:40,190
more complete but<font color="#E5E5E5"> we did add some</font><font color="#CCCCCC"> like</font>

494
00:20:34,280 --> 00:20:44,600
corner case kind<font color="#E5E5E5"> of uh encoding all</font>

495
00:20:40,190 --> 00:20:48,020
right and<font color="#CCCCCC"> moanin</font><font color="#E5E5E5"> up high again</font><font color="#CCCCCC"> what we</font>

496
00:20:44,600 --> 00:20:50,030
want<font color="#E5E5E5"> to do was add x64 support and that</font>

497
00:20:48,020 --> 00:20:52,850
just wasn't<font color="#E5E5E5"> possible it turns out at the</font>

498
00:20:50,030 --> 00:20:54,800
<font color="#E5E5E5">end that the engine was far too</font>

499
00:20:52,850 --> 00:20:57,050
<font color="#E5E5E5">complicated in far too dependent on</font>

500
00:20:54,800 --> 00:20:59,570
<font color="#E5E5E5">being just</font><font color="#CCCCCC"> an x86 program to modify</font>

501
00:20:57,050 --> 00:21:01,250
which is sad<font color="#CCCCCC"> because</font><font color="#E5E5E5"> unlike all these</font>

502
00:20:59,570 --> 00:21:05,240
<font color="#E5E5E5">tools it sort of automatically just</font>

503
00:21:01,250 --> 00:21:07,280
works<font color="#CCCCCC"> you know it would be a</font><font color="#E5E5E5"> great tool</font>

504
00:21:05,240 --> 00:21:09,640
to<font color="#E5E5E5"> have in your</font><font color="#CCCCCC"> pocket just</font><font color="#E5E5E5"> for even for</font>

505
00:21:07,280 --> 00:21:13,190
doing<font color="#E5E5E5"> rap chains vanilla</font><font color="#CCCCCC"> rob chains in</font>

506
00:21:09,640 --> 00:21:14,780
x86<font color="#E5E5E5"> 64</font><font color="#CCCCCC"> so that's the project for</font><font color="#E5E5E5"> the</font>

507
00:21:13,190 --> 00:21:17,480
<font color="#CCCCCC">future I would be</font><font color="#E5E5E5"> glad</font><font color="#CCCCCC"> to help</font><font color="#E5E5E5"> call on</font>

508
00:21:14,780 --> 00:21:21,860
<font color="#E5E5E5">and add that but it's a massive</font><font color="#CCCCCC"> project</font>

509
00:21:17,480 --> 00:21:25,850
you really<font color="#E5E5E5"> assumed that x64 exploitation</font>

510
00:21:21,860 --> 00:21:28,100
wouldn't be a thing right oh and

511
00:21:25,850 --> 00:21:30,679
obviously<font color="#E5E5E5"> modify only</font><font color="#CCCCCC"> works with</font>

512
00:21:28,100 --> 00:21:33,199
immunity debugger<font color="#E5E5E5"> and the Windows kernel</font>

513
00:21:30,680 --> 00:21:34,790
debugger<font color="#E5E5E5"> wind</font><font color="#CCCCCC"> bug</font><font color="#E5E5E5"> so that's a massive</font>

514
00:21:33,200 --> 00:21:36,290
limitation if you're using some other

515
00:21:34,790 --> 00:21:37,639
kind<font color="#CCCCCC"> of debugger or don't want</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> be in</font>

516
00:21:36,290 --> 00:21:39,980
a debugger environment if we're<font color="#E5E5E5"> just</font>

517
00:21:37,640 --> 00:21:42,170
doing<font color="#E5E5E5"> stag analysis and it's not really</font>

518
00:21:39,980 --> 00:21:43,760
where we<font color="#CCCCCC"> want to</font><font color="#E5E5E5"> be in second Alice this</font>

519
00:21:42,170 --> 00:21:48,080
<font color="#E5E5E5">is actually a much better place to be</font>

520
00:21:43,760 --> 00:21:50,050
for<font color="#E5E5E5"> this kind of exploit right and what</font>

521
00:21:48,080 --> 00:21:52,429
we want<font color="#E5E5E5"> to work towards is a</font>

522
00:21:50,050 --> 00:21:53,780
comprehending what these gadgets<font color="#E5E5E5"> are</font>

523
00:21:52,430 --> 00:21:56,240
doing what kind<font color="#CCCCCC"> of side effects they're</font>

524
00:21:53,780 --> 00:21:58,680
adding<font color="#E5E5E5"> to our exploit</font>

525
00:21:56,240 --> 00:22:00,060
we want to<font color="#CCCCCC"> figure out</font><font color="#E5E5E5"> how to chain them</font>

526
00:21:58,680 --> 00:22:07,830
together and to do<font color="#E5E5E5"> that we need to</font>

527
00:22:00,060 --> 00:22:11,220
<font color="#CCCCCC">classify them going to how that's</font><font color="#E5E5E5"> how</font>

528
00:22:07,830 --> 00:22:14,280
that's done or how we want<font color="#E5E5E5"> to do it here</font>

529
00:22:11,220 --> 00:22:16,010
<font color="#CCCCCC">so the way that</font><font color="#E5E5E5"> crap classic</font><font color="#CCCCCC"> rope</font>

530
00:22:14,280 --> 00:22:17,790
compilers work is that they're basically

531
00:22:16,010 --> 00:22:20,460
disassembling the instruction in

532
00:22:17,790 --> 00:22:22,230
grepping<font color="#E5E5E5"> for</font><font color="#CCCCCC"> key words</font><font color="#E5E5E5"> you know it</font>

533
00:22:20,460 --> 00:22:25,380
disassembles an instruction it looks for

534
00:22:22,230 --> 00:22:26,820
pop or return or some other<font color="#E5E5E5"> ad like if</font>

535
00:22:25,380 --> 00:22:28,980
it's<font color="#E5E5E5"> trying to find an ad or</font><font color="#CCCCCC"> gadget it</font>

536
00:22:26,820 --> 00:22:31,919
literally<font color="#E5E5E5"> disassembled it and</font><font color="#CCCCCC"> then sort</font>

537
00:22:28,980 --> 00:22:33,900
<font color="#E5E5E5">of</font><font color="#CCCCCC"> greps for</font><font color="#E5E5E5"> ad in the disassembly</font><font color="#CCCCCC"> which</font>

538
00:22:31,920 --> 00:22:35,430
could could<font color="#CCCCCC"> be improved</font><font color="#E5E5E5"> upon because if</font>

539
00:22:33,900 --> 00:22:37,020
you have something<font color="#CCCCCC"> that adds twice as</font>

540
00:22:35,430 --> 00:22:39,030
the different semantics than something

541
00:22:37,020 --> 00:22:39,629
that has once or something to add the

542
00:22:39,030 --> 00:22:44,370
next<font color="#CCCCCC"> wors</font>

543
00:22:39,630 --> 00:22:46,230
that's more than adding right<font color="#E5E5E5"> slightly</font>

544
00:22:44,370 --> 00:22:48,600
<font color="#E5E5E5">more advanced some of them just search</font>

545
00:22:46,230 --> 00:22:50,130
for<font color="#E5E5E5"> op codes and classify that way but</font>

546
00:22:48,600 --> 00:22:52,919
<font color="#CCCCCC">again it's not</font><font color="#E5E5E5"> really understanding the</font>

547
00:22:50,130 --> 00:22:55,470
full state of what's going<font color="#E5E5E5"> on and then</font>

548
00:22:52,920 --> 00:22:57,750
we<font color="#E5E5E5"> have the most hopeful technique is</font>

549
00:22:55,470 --> 00:23:00,230
sort<font color="#E5E5E5"> of running everything in a light VM</font>

550
00:22:57,750 --> 00:23:04,740
<font color="#E5E5E5">which is what we did in our tool</font>

551
00:23:00,230 --> 00:23:06,120
basically<font color="#E5E5E5"> take something like a not like</font>

552
00:23:04,740 --> 00:23:07,980
a full virtual machine but<font color="#E5E5E5"> something</font>

553
00:23:06,120 --> 00:23:09,689
that<font color="#E5E5E5"> just virtualizes the registers and</font>

554
00:23:07,980 --> 00:23:12,480
<font color="#CCCCCC">the flag register</font>

555
00:23:09,690 --> 00:23:14,400
<font color="#E5E5E5">maybe the stack and figures out what the</font>

556
00:23:12,480 --> 00:23:19,170
<font color="#E5E5E5">side effects with the gadget are that's</font>

557
00:23:14,400 --> 00:23:20,670
a lot better<font color="#CCCCCC"> and then once we have stuff</font>

558
00:23:19,170 --> 00:23:21,810
<font color="#E5E5E5">running in</font><font color="#CCCCCC"> a VM we can start thinking</font>

559
00:23:20,670 --> 00:23:23,580
<font color="#CCCCCC">about those</font><font color="#E5E5E5"> conditional jumps and</font>

560
00:23:21,810 --> 00:23:25,290
figuring out which<font color="#E5E5E5"> of these conditional</font>

561
00:23:23,580 --> 00:23:27,179
<font color="#CCCCCC">jobs</font><font color="#E5E5E5"> can we manipulate to be</font>

562
00:23:25,290 --> 00:23:28,680
unconditional and using our exploit and

563
00:23:27,180 --> 00:23:29,910
that's<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to open</font><font color="#E5E5E5"> up the</font>

564
00:23:28,680 --> 00:23:33,540
possibilities<font color="#CCCCCC"> for doing</font><font color="#E5E5E5"> this kind of</font>

565
00:23:29,910 --> 00:23:35,940
exploit deal<font color="#CCCCCC"> but it requires</font><font color="#E5E5E5"> us to</font>

566
00:23:33,540 --> 00:23:37,590
<font color="#E5E5E5">emulate what's going on</font><font color="#CCCCCC"> to run things in</font>

567
00:23:35,940 --> 00:23:39,750
<font color="#CCCCCC">a VM in a very specific way</font><font color="#E5E5E5"> where we</font>

568
00:23:37,590 --> 00:23:41,100
<font color="#CCCCCC">learn what we won't</font><font color="#E5E5E5"> learn and prove what</font>

569
00:23:39,750 --> 00:23:46,710
<font color="#CCCCCC">we want to</font><font color="#E5E5E5"> prove about how the exploit</font>

570
00:23:41,100 --> 00:23:48,689
works so even if we can find<font color="#E5E5E5"> like a</font>

571
00:23:46,710 --> 00:23:50,160
small fraction of conditional jumps that

572
00:23:48,690 --> 00:23:52,080
<font color="#E5E5E5">we can prove are controllable in our</font>

573
00:23:50,160 --> 00:23:57,210
exploit this<font color="#E5E5E5"> is going to make this much</font>

574
00:23:52,080 --> 00:24:02,909
more<font color="#CCCCCC"> tractable so I'm going</font><font color="#E5E5E5"> to show you</font>

575
00:23:57,210 --> 00:24:05,270
part of the<font color="#E5E5E5"> unicorn VM</font><font color="#CCCCCC"> based tool I made</font>

576
00:24:02,910 --> 00:24:05,270
and

577
00:24:05,290 --> 00:24:09,460
basically what<font color="#E5E5E5"> does is it reads through</font>

578
00:24:07,270 --> 00:24:12,340
a list of gadgets<font color="#E5E5E5"> and tells us what</font><font color="#CCCCCC"> kind</font>

579
00:24:09,460 --> 00:24:13,840
of side effects<font color="#CCCCCC"> it has and</font><font color="#E5E5E5"> it also has a</font>

580
00:24:12,340 --> 00:24:19,090
classification system where it's going

581
00:24:13,840 --> 00:24:21,750
to<font color="#E5E5E5"> look through and figure</font><font color="#CCCCCC"> out whether</font>

582
00:24:19,090 --> 00:24:25,990
this is<font color="#CCCCCC"> a good good candidate for like a</font>

583
00:24:21,750 --> 00:24:26,320
dispatch gadget<font color="#E5E5E5"> or a</font><font color="#CCCCCC"> door gadget</font><font color="#E5E5E5"> all</font>

584
00:24:25,990 --> 00:24:34,300
<font color="#E5E5E5">right</font>

585
00:24:26,320 --> 00:24:36,879
and back to that<font color="#E5E5E5"> all right and then what</font>

586
00:24:34,300 --> 00:24:38,500
we're<font color="#E5E5E5"> going to do for gadget composition</font>

587
00:24:36,880 --> 00:24:41,080
putting<font color="#E5E5E5"> gadgets</font><font color="#CCCCCC"> together is to use</font>

588
00:24:38,500 --> 00:24:42,400
<font color="#E5E5E5">constraints all</font><font color="#CCCCCC"> four legs III right</font><font color="#E5E5E5"> so</font>

589
00:24:41,080 --> 00:24:44,350
we're going<font color="#E5E5E5"> to use some some</font>

590
00:24:42,400 --> 00:24:45,790
mathematical libraries to say here<font color="#E5E5E5"> are</font>

591
00:24:44,350 --> 00:24:47,439
<font color="#CCCCCC">the side effects of these gadgets let's</font>

592
00:24:45,790 --> 00:24:50,020
put them in<font color="#E5E5E5"> order to do a thing we want</font>

593
00:24:47,440 --> 00:24:52,180
and the problem you run into doing that

594
00:24:50,020 --> 00:24:54,580
<font color="#E5E5E5">and the reason we don't have working</font>

595
00:24:52,180 --> 00:24:56,820
tool right<font color="#CCCCCC"> now is that as you</font><font color="#E5E5E5"> try to</font>

596
00:24:54,580 --> 00:25:00,280
solve on constraints for these gadgets

597
00:24:56,820 --> 00:25:01,840
<font color="#CCCCCC">you get a lot of</font><font color="#E5E5E5"> state to run through a</font>

598
00:25:00,280 --> 00:25:04,810
<font color="#E5E5E5">lot of options about</font><font color="#CCCCCC"> how to put</font><font color="#E5E5E5"> them</font>

599
00:25:01,840 --> 00:25:07,120
together and some techniques will have

600
00:25:04,810 --> 00:25:08,740
to be put together<font color="#E5E5E5"> to</font><font color="#CCCCCC"> try to limit that</font>

601
00:25:07,120 --> 00:25:12,070
and try to<font color="#E5E5E5"> make the problem easier for</font>

602
00:25:08,740 --> 00:25:14,230
the solver to solve<font color="#CCCCCC"> because once you</font>

603
00:25:12,070 --> 00:25:16,450
<font color="#E5E5E5">start letting the solver think about</font>

604
00:25:14,230 --> 00:25:18,820
buffers and memory instead of a stack

605
00:25:16,450 --> 00:25:21,460
which is easier<font color="#CCCCCC"> to think about your</font>

606
00:25:18,820 --> 00:25:22,810
<font color="#E5E5E5">options</font><font color="#CCCCCC"> for the exploit</font><font color="#E5E5E5"> just explode so</font>

607
00:25:21,460 --> 00:25:26,410
<font color="#CCCCCC">really the</font><font color="#E5E5E5"> the technique here is to</font>

608
00:25:22,810 --> 00:25:31,960
start eliminating options for how this

609
00:25:26,410 --> 00:25:34,690
<font color="#E5E5E5">is</font><font color="#CCCCCC"> going to be done so one</font><font color="#E5E5E5"> of the things</font>

610
00:25:31,960 --> 00:25:37,630
we looked at<font color="#E5E5E5"> was trying to adapt</font><font color="#CCCCCC"> Korell</font>

611
00:25:34,690 --> 00:25:40,330
encoders<font color="#CCCCCC"> Rock algorithm from Mona dot PI</font>

612
00:25:37,630 --> 00:25:42,220
into this technique and<font color="#E5E5E5"> what he</font><font color="#CCCCCC"> uses is</font>

613
00:25:40,330 --> 00:25:45,340
not a<font color="#E5E5E5"> constraint solver what he uses is</font>

614
00:25:42,220 --> 00:25:48,310
<font color="#E5E5E5">back tracing so he finds a state that he</font>

615
00:25:45,340 --> 00:25:51,370
wants to<font color="#E5E5E5"> get to and works backwards from</font>

616
00:25:48,310 --> 00:25:53,260
that it ends up still being pretty

617
00:25:51,370 --> 00:25:55,540
computationally expensive and it's

618
00:25:53,260 --> 00:25:56,770
<font color="#E5E5E5">inaccurate since</font><font color="#CCCCCC"> he's not virtualizing</font>

619
00:25:55,540 --> 00:25:58,030
all the instructions he's just sort of

620
00:25:56,770 --> 00:25:59,290
<font color="#CCCCCC">guessing about</font><font color="#E5E5E5"> what</font><font color="#CCCCCC"> the side of the</font>

621
00:25:58,030 --> 00:26:03,100
defects of the instructions are going<font color="#E5E5E5"> to</font>

622
00:25:59,290 --> 00:26:06,070
be because<font color="#CCCCCC"> of</font><font color="#E5E5E5"> that you often have</font><font color="#CCCCCC"> to</font>

623
00:26:03,100 --> 00:26:09,669
alter his exploits a little bit but gets

624
00:26:06,070 --> 00:26:13,450
you close<font color="#CCCCCC"> ultimately was decided that I</font>

625
00:26:09,670 --> 00:26:14,680
<font color="#E5E5E5">wouldn't work</font><font color="#CCCCCC"> with the exploit here's a</font>

626
00:26:13,450 --> 00:26:17,340
bit<font color="#E5E5E5"> of the code</font><font color="#CCCCCC"> that actually</font><font color="#E5E5E5"> does the</font>

627
00:26:14,680 --> 00:26:17,340
back tracing

628
00:26:18,000 --> 00:26:24,210
and we talked about<font color="#E5E5E5"> the SMT solver</font>

629
00:26:20,600 --> 00:26:25,320
emulator kind of idea<font color="#CCCCCC"> people have</font>

630
00:26:24,210 --> 00:26:26,790
already figured<font color="#CCCCCC"> out how to</font><font color="#E5E5E5"> do this for</font>

631
00:26:25,320 --> 00:26:29,580
return<font color="#E5E5E5"> rate programming again the</font>

632
00:26:26,790 --> 00:26:32,670
problem is finding<font color="#E5E5E5"> ways to reduce the</font>

633
00:26:29,580 --> 00:26:34,379
state space as it is it kind<font color="#E5E5E5"> of fairly</font>

634
00:26:32,670 --> 00:26:36,120
<font color="#E5E5E5">works for an</font><font color="#CCCCCC"> orion programming you're</font>

635
00:26:34,380 --> 00:26:38,400
talking about<font color="#E5E5E5"> doing a real exploit could</font>

636
00:26:36,120 --> 00:26:41,550
take 30<font color="#E5E5E5"> minutes</font><font color="#CCCCCC"> two hours eight hours</font><font color="#E5E5E5"> to</font>

637
00:26:38,400 --> 00:26:43,650
compile and still not work adding

638
00:26:41,550 --> 00:26:47,090
thinking about buffers and memory

639
00:26:43,650 --> 00:26:48,780
outside the stack makes it a lot worse

640
00:26:47,090 --> 00:26:52,100
<font color="#E5E5E5">all right</font><font color="#CCCCCC"> now we're going to talk about</font>

641
00:26:48,780 --> 00:26:57,950
<font color="#E5E5E5">architecture</font><font color="#CCCCCC"> right now the current</font><font color="#E5E5E5"> tools</font>

642
00:26:52,100 --> 00:27:01,860
<font color="#E5E5E5">don't support architectures like arm AVR</font>

643
00:26:57,950 --> 00:27:03,600
<font color="#CCCCCC">spark super well</font><font color="#E5E5E5"> and well like most</font>

644
00:27:01,860 --> 00:27:05,580
people are<font color="#E5E5E5"> doing this</font><font color="#CCCCCC"> kind of exploit on</font>

645
00:27:03,600 --> 00:27:08,219
x86<font color="#E5E5E5"> these other architectures are</font>

646
00:27:05,580 --> 00:27:09,840
<font color="#E5E5E5">actually highly useful with</font><font color="#CCCCCC"> jean paree</font>

647
00:27:08,220 --> 00:27:11,640
programming like these are the places

648
00:27:09,840 --> 00:27:15,120
<font color="#CCCCCC">where you'd</font><font color="#E5E5E5"> want</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> start thinking</font><font color="#CCCCCC"> about</font>

649
00:27:11,640 --> 00:27:17,130
doing it actually<font color="#CCCCCC"> arm is particularly</font>

650
00:27:15,120 --> 00:27:19,620
<font color="#E5E5E5">well</font><font color="#CCCCCC"> suited</font><font color="#E5E5E5"> to it because</font><font color="#CCCCCC"> again in a lot</font>

651
00:27:17,130 --> 00:27:21,960
<font color="#E5E5E5">of arm situations</font><font color="#CCCCCC"> maybe manipulating the</font>

652
00:27:19,620 --> 00:27:24,239
stack is not<font color="#E5E5E5"> what you want to do if you</font>

653
00:27:21,960 --> 00:27:27,660
want to<font color="#E5E5E5"> keep your program alive there's</font>

654
00:27:24,240 --> 00:27:29,670
new protections being added<font color="#E5E5E5"> and actually</font>

655
00:27:27,660 --> 00:27:35,640
it<font color="#E5E5E5"> turns out spark works really well</font>

656
00:27:29,670 --> 00:27:37,400
this<font color="#E5E5E5"> kind of exploit here we go just</font>

657
00:27:35,640 --> 00:27:41,700
<font color="#E5E5E5">worried about arm supporting these tools</font>

658
00:27:37,400 --> 00:27:43,380
<font color="#CCCCCC">again</font><font color="#E5E5E5"> they're</font><font color="#CCCCCC"> very unaware of the</font>

659
00:27:41,700 --> 00:27:45,150
context<font color="#CCCCCC"> for</font><font color="#E5E5E5"> the exploit that</font><font color="#CCCCCC"> you're</font>

660
00:27:43,380 --> 00:27:48,380
doing<font color="#E5E5E5"> does understand</font><font color="#CCCCCC"> certain thumb mode</font>

661
00:27:45,150 --> 00:27:54,300
or<font color="#CCCCCC"> AVR mode for instructions</font>

662
00:27:48,380 --> 00:27:56,040
<font color="#CCCCCC">erm ugh please</font><font color="#E5E5E5"> all right nothing</font>

663
00:27:54,300 --> 00:28:00,000
supports<font color="#E5E5E5"> AVR and there isn't really a</font>

664
00:27:56,040 --> 00:28:02,820
programmatic<font color="#E5E5E5"> scriptable VM for AVR right</font>

665
00:28:00,000 --> 00:28:05,250
now a<font color="#E5E5E5"> VR disassembler frameworks kind of</font>

666
00:28:02,820 --> 00:28:07,730
<font color="#CCCCCC">suck which i think is a room</font><font color="#E5E5E5"> if anyone's</font>

667
00:28:05,250 --> 00:28:10,740
in<font color="#CCCCCC"> AVR developing these kind of</font>

668
00:28:07,730 --> 00:28:12,600
programmable simulators for<font color="#CCCCCC"> like</font>

669
00:28:10,740 --> 00:28:20,190
<font color="#E5E5E5">something like unicorn for AVR would be</font>

670
00:28:12,600 --> 00:28:22,280
a great project<font color="#E5E5E5"> right what we did add</font>

671
00:28:20,190 --> 00:28:24,660
was<font color="#E5E5E5"> spark support for all these tools</font>

672
00:28:22,280 --> 00:28:26,040
<font color="#CCCCCC">and again</font><font color="#E5E5E5"> looking into the spark</font>

673
00:28:24,660 --> 00:28:27,960
standard reading the spark encodings it

674
00:28:26,040 --> 00:28:31,290
turns out this is a very<font color="#CCCCCC"> effective</font>

675
00:28:27,960 --> 00:28:33,060
exploit on spark<font color="#E5E5E5"> so what we</font>

676
00:28:31,290 --> 00:28:35,100
of doing was just<font color="#E5E5E5"> adding to the current</font>

677
00:28:33,060 --> 00:28:38,399
support for tools like<font color="#CCCCCC"> rock gadget</font><font color="#E5E5E5"> and</font>

678
00:28:35,100 --> 00:28:42,240
<font color="#CCCCCC">robber spark support</font>

679
00:28:38,400 --> 00:28:46,500
here's a sparking coding example that we

680
00:28:42,240 --> 00:28:48,030
work with to<font color="#CCCCCC"> find unconditional jobs</font><font color="#E5E5E5"> and</font>

681
00:28:46,500 --> 00:28:52,470
we<font color="#E5E5E5"> add a bunch of variations</font><font color="#CCCCCC"> on</font><font color="#E5E5E5"> this</font>

682
00:28:48,030 --> 00:28:54,330
code<font color="#CCCCCC"> there's a lot</font><font color="#E5E5E5"> of reasons that</font>

683
00:28:52,470 --> 00:28:58,170
<font color="#E5E5E5">classic Rob attacks kind of</font><font color="#CCCCCC"> worked</font>

684
00:28:54,330 --> 00:29:01,260
<font color="#E5E5E5">poorly in spark</font><font color="#CCCCCC"> suffice it to say that</font>

685
00:28:58,170 --> 00:29:05,310
that jumping around and not messing with

686
00:29:01,260 --> 00:29:06,570
the<font color="#E5E5E5"> stack produces fewer</font><font color="#CCCCCC"> side-effects so</font>

687
00:29:05,310 --> 00:29:09,360
would<font color="#E5E5E5"> we talk</font><font color="#CCCCCC"> about we talked about</font>

688
00:29:06,570 --> 00:29:11,700
architecture support include<font color="#CCCCCC"> op</font><font color="#E5E5E5"> codes in</font>

689
00:29:09,360 --> 00:29:13,560
these tools<font color="#E5E5E5"> and some ideas</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> how</font>

690
00:29:11,700 --> 00:29:16,340
we're going to do gadget identification

691
00:29:13,560 --> 00:29:21,600
and gadget composition from<font color="#E5E5E5"> now on</font><font color="#CCCCCC"> and</font>

692
00:29:16,340 --> 00:29:23,310
we add some<font color="#CCCCCC"> support</font><font color="#E5E5E5"> and you know we've</font>

693
00:29:21,600 --> 00:29:25,469
got<font color="#CCCCCC"> some ideas for the future</font><font color="#E5E5E5"> I'm</font>

694
00:29:23,310 --> 00:29:27,840
working<font color="#CCCCCC"> on a tool</font><font color="#E5E5E5"> right now it's not</font>

695
00:29:25,470 --> 00:29:29,910
<font color="#CCCCCC">finished yet but</font><font color="#E5E5E5"> it's going to basically</font>

696
00:29:27,840 --> 00:29:33,209
adapt the current<font color="#CCCCCC"> Rock technique for</font>

697
00:29:29,910 --> 00:29:37,610
using<font color="#CCCCCC"> a solvers like z3</font><font color="#E5E5E5"> and generate</font>

698
00:29:33,210 --> 00:29:40,740
this<font color="#E5E5E5"> jump exploit automatically and</font>

699
00:29:37,610 --> 00:30:03,149
that's what we got so you guys have

700
00:29:40,740 --> 00:30:04,800
questions so some people have<font color="#E5E5E5"> applied</font>

701
00:30:03,150 --> 00:30:06,330
that<font color="#E5E5E5"> kind of technique in fact so I</font>

702
00:30:04,800 --> 00:30:08,129
talked about<font color="#E5E5E5"> a tool called dropper</font><font color="#CCCCCC"> and</font>

703
00:30:06,330 --> 00:30:09,300
<font color="#CCCCCC">there's actually another tool</font><font color="#E5E5E5"> called</font>

704
00:30:08,130 --> 00:30:10,980
where there's two tools right now<font color="#E5E5E5"> called</font>

705
00:30:09,300 --> 00:30:12,389
<font color="#E5E5E5">wrapper</font><font color="#CCCCCC"> cuz I guess someone didn't</font>

706
00:30:10,980 --> 00:30:15,600
realize that there's already<font color="#CCCCCC"> at Rock</font>

707
00:30:12,390 --> 00:30:17,070
gadget finder<font color="#E5E5E5"> called wrapper and it's an</font>

708
00:30:15,600 --> 00:30:19,620
engineer from tenable<font color="#E5E5E5"> the people who</font>

709
00:30:17,070 --> 00:30:21,060
make<font color="#CCCCCC"> necess and she put</font><font color="#E5E5E5"> together a</font>

710
00:30:19,620 --> 00:30:23,659
<font color="#CCCCCC">presentation I don't know if it's out</font>

711
00:30:21,060 --> 00:30:28,379
yet but<font color="#E5E5E5"> it's a genetic</font><font color="#CCCCCC"> algorithm based</font>

712
00:30:23,660 --> 00:30:30,300
<font color="#E5E5E5">rock gadget finder</font><font color="#CCCCCC"> it does work</font>

713
00:30:28,380 --> 00:30:32,820
it doesn't necessarily I<font color="#E5E5E5"> talk to her a</font>

714
00:30:30,300 --> 00:30:35,340
lot<font color="#E5E5E5"> before doing this kind of talk</font><font color="#CCCCCC"> about</font>

715
00:30:32,820 --> 00:30:38,189
whether it would<font color="#CCCCCC"> support job and her</font>

716
00:30:35,340 --> 00:30:39,959
response<font color="#CCCCCC"> was not</font><font color="#E5E5E5"> necessarily but not</font>

717
00:30:38,190 --> 00:30:42,120
<font color="#CCCCCC">ruling</font><font color="#E5E5E5"> it out because it's a machine</font>

718
00:30:39,960 --> 00:30:43,590
<font color="#E5E5E5">learning based algorithm it could come</font>

719
00:30:42,120 --> 00:30:46,678
up with<font color="#E5E5E5"> a drop-by</font><font color="#CCCCCC"> load right</font>

720
00:30:43,590 --> 00:30:48,418
<font color="#CCCCCC">but like my own research she's trying to</font>

721
00:30:46,679 --> 00:30:51,659
limit<font color="#E5E5E5"> state so I don't know to</font><font color="#CCCCCC"> what</font>

722
00:30:48,419 --> 00:30:53,370
degree she's modeling<font color="#E5E5E5"> memory right and</font>

723
00:30:51,659 --> 00:30:55,470
becomes a big performance concern like

724
00:30:53,370 --> 00:30:57,539
when we're virtualizing things we don't

725
00:30:55,470 --> 00:30:58,650
want to virtualize the<font color="#E5E5E5"> entire memory of</font>

726
00:30:57,539 --> 00:31:00,360
the program we don't<font color="#E5E5E5"> want load the</font>

727
00:30:58,650 --> 00:31:01,559
entire<font color="#E5E5E5"> program</font><font color="#CCCCCC"> we want to avoid</font><font color="#E5E5E5"> that as</font>

728
00:31:00,360 --> 00:31:03,870
much<font color="#E5E5E5"> as possible because that's going to</font>

729
00:31:01,559 --> 00:31:06,210
hurt performance<font color="#CCCCCC"> a</font><font color="#E5E5E5"> lot we want to just</font>

730
00:31:03,870 --> 00:31:07,500
kind of model<font color="#CCCCCC"> the chunk</font><font color="#E5E5E5"> of memory in the</font>

731
00:31:06,210 --> 00:31:10,740
chunk of<font color="#E5E5E5"> state we're worrying about</font>

732
00:31:07,500 --> 00:31:13,140
right now to<font color="#E5E5E5"> whatever degree we</font><font color="#CCCCCC"> can so</font>

733
00:31:10,740 --> 00:31:16,169
I'm still<font color="#E5E5E5"> waiting to see the final</font>

734
00:31:13,140 --> 00:31:17,580
definitely look<font color="#CCCCCC"> upper tool it's cool if</font>

735
00:31:16,169 --> 00:31:21,659
you're a functional programming<font color="#CCCCCC"> guys</font>

736
00:31:17,580 --> 00:31:23,549
written in Lisp<font color="#E5E5E5"> so definitely definitely</font>

737
00:31:21,659 --> 00:31:24,690
check<font color="#CCCCCC"> it</font><font color="#E5E5E5"> out</font><font color="#CCCCCC"> but she's one</font><font color="#E5E5E5"> of the only</font>

738
00:31:23,549 --> 00:31:28,889
people I know who<font color="#CCCCCC"> have applied the</font>

739
00:31:24,690 --> 00:31:31,200
machine<font color="#CCCCCC"> learning aspect to this there's</font>

740
00:31:28,890 --> 00:31:32,880
a lot<font color="#E5E5E5"> more like foundational work in</font>

741
00:31:31,200 --> 00:31:36,090
using constraint solvers for these big

742
00:31:32,880 --> 00:31:38,700
and the problem becomes<font color="#CCCCCC"> a</font><font color="#E5E5E5"> state in</font>

743
00:31:36,090 --> 00:31:40,590
performance<font color="#CCCCCC"> you know</font><font color="#E5E5E5"> take many hours</font><font color="#CCCCCC"> to</font>

744
00:31:38,700 --> 00:31:41,850
figure this out the other thing was

745
00:31:40,590 --> 00:31:44,220
using the machine learning approach is

746
00:31:41,850 --> 00:31:46,168
<font color="#CCCCCC">that you're not guaranteed in any</font><font color="#E5E5E5"> case</font>

747
00:31:44,220 --> 00:31:49,590
you're not<font color="#CCCCCC"> guaranteed</font><font color="#E5E5E5"> an optimal</font><font color="#CCCCCC"> result</font>

748
00:31:46,169 --> 00:31:50,940
but<font color="#E5E5E5"> that technique and from some of</font><font color="#CCCCCC"> the</font>

749
00:31:49,590 --> 00:31:53,580
provisional<font color="#CCCCCC"> results I've seen from her</font>

750
00:31:50,940 --> 00:31:55,559
tool<font color="#E5E5E5"> that technique especially does not</font>

751
00:31:53,580 --> 00:31:58,379
care about<font color="#CCCCCC"> getting things done</font><font color="#E5E5E5"> in the</font>

752
00:31:55,559 --> 00:32:00,260
minimal<font color="#CCCCCC"> number of gadgets you know</font><font color="#E5E5E5"> it</font>

753
00:31:58,380 --> 00:32:03,360
might get to the state you<font color="#E5E5E5"> want but like</font>

754
00:32:00,260 --> 00:32:05,490
much later on<font color="#E5E5E5"> in a much bigger buffer</font>

755
00:32:03,360 --> 00:32:11,490
than what you want to be dealing<font color="#CCCCCC"> with</font><font color="#E5E5E5"> so</font>

756
00:32:05,490 --> 00:32:28,440
it<font color="#E5E5E5"> is an area for</font><font color="#CCCCCC"> further research we</font>

757
00:32:11,490 --> 00:32:30,659
have other questions<font color="#CCCCCC"> oh sure I think</font>

758
00:32:28,440 --> 00:32:32,730
<font color="#CCCCCC">that</font><font color="#E5E5E5"> that's</font><font color="#CCCCCC"> very architecture dependent</font>

759
00:32:30,659 --> 00:32:37,919
<font color="#E5E5E5">but when you're talking about pipelines</font>

760
00:32:32,730 --> 00:32:40,830
<font color="#E5E5E5">both architectures like a RM</font><font color="#CCCCCC"> and MIPS</font>

761
00:32:37,919 --> 00:32:43,320
<font color="#E5E5E5">and</font><font color="#CCCCCC"> SPARC to have</font><font color="#E5E5E5"> features</font><font color="#CCCCCC"> that are very</font>

762
00:32:40,830 --> 00:32:46,590
pipeline dependent and yeah that's that

763
00:32:43,320 --> 00:32:47,610
<font color="#E5E5E5">starts to be a problem right</font><font color="#CCCCCC"> so one of</font>

764
00:32:46,590 --> 00:32:49,649
the things when you're doing<font color="#E5E5E5"> a</font><font color="#CCCCCC"> RM</font>

765
00:32:47,610 --> 00:32:52,020
exploits<font color="#E5E5E5"> you can't have self-modifying</font>

766
00:32:49,649 --> 00:32:53,789
code<font color="#CCCCCC"> right you know a common thing to do</font>

767
00:32:52,020 --> 00:32:55,559
in an exploit is to like have a value<font color="#CCCCCC"> in</font>

768
00:32:53,789 --> 00:32:56,760
a<font color="#CCCCCC"> register and</font><font color="#E5E5E5"> mutate it like for</font>

769
00:32:55,559 --> 00:32:59,399
<font color="#CCCCCC">instance if you have a value</font>

770
00:32:56,760 --> 00:33:01,770
it is forbidden<font color="#CCCCCC"> in the exploit like a</font>

771
00:32:59,400 --> 00:33:03,900
null<font color="#CCCCCC"> bite</font><font color="#E5E5E5"> right you might explore that</font>

772
00:33:01,770 --> 00:33:05,550
<font color="#E5E5E5">and then change it in memory but because</font>

773
00:33:03,900 --> 00:33:07,950
<font color="#CCCCCC">of the way the pipelining works in AR m</font>

774
00:33:05,550 --> 00:33:12,180
and it's<font color="#E5E5E5"> really the same problem</font><font color="#CCCCCC"> in MIPS</font>

775
00:33:07,950 --> 00:33:14,070
<font color="#CCCCCC">and SPARC to a lesser degree</font><font color="#E5E5E5"> you will</font>

776
00:33:12,180 --> 00:33:15,720
modify something<font color="#E5E5E5"> in memory</font><font color="#CCCCCC"> and because</font>

777
00:33:14,070 --> 00:33:17,040
it's<font color="#CCCCCC"> already</font><font color="#E5E5E5"> been pipelined</font><font color="#CCCCCC"> you're going</font>

778
00:33:15,720 --> 00:33:19,740
to get the original<font color="#E5E5E5"> value</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> says the</font>

779
00:33:17,040 --> 00:33:21,629
one you wanted<font color="#CCCCCC"> so that is the thing you</font>

780
00:33:19,740 --> 00:33:25,220
<font color="#E5E5E5">will have to</font><font color="#CCCCCC"> work as we adapt this</font>

781
00:33:21,630 --> 00:33:28,320
attack as well<font color="#E5E5E5"> you know having either</font>

782
00:33:25,220 --> 00:33:30,630
making self-modifying code forbidden or

783
00:33:28,320 --> 00:33:32,700
working around<font color="#E5E5E5"> the pipelining or you can</font>

784
00:33:30,630 --> 00:33:34,050
trick the<font color="#CCCCCC"> pipeliner right</font><font color="#E5E5E5"> you can you</font>

785
00:33:32,700 --> 00:33:39,750
can run something<font color="#E5E5E5"> in a loop and start to</font>

786
00:33:34,050 --> 00:33:40,919
fill up the cache<font color="#E5E5E5"> right exactly</font><font color="#CCCCCC"> so yeah</font>

787
00:33:39,750 --> 00:33:45,750
that is<font color="#CCCCCC"> that's something to think about</font>

788
00:33:40,920 --> 00:33:55,670
with<font color="#E5E5E5"> these exploits do we have another</font>

789
00:33:45,750 --> 00:33:55,670
question<font color="#CCCCCC"> No oh cool</font>

790
00:33:59,100 --> 00:34:02,260
[Music]

