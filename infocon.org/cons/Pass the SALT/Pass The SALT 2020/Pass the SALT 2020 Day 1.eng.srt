1
00:00:00,030 --> 00:00:01,709
since the day one of the first edition

2
00:00:01,709 --> 00:00:05,370
thank you very much for that so CT

3
00:00:05,370 --> 00:00:10,440
general IT department supporters since

4
00:00:10,440 --> 00:00:16,949
last year so we are very happy to have

5
00:00:16,949 --> 00:00:21,320
them on board and if you want to share

6
00:00:21,320 --> 00:00:25,230
cyber security with with sock and cert

7
00:00:25,230 --> 00:00:29,060
member there's a lot of good resources

8
00:00:29,060 --> 00:00:33,450
inside the this team so let's go to

9
00:00:33,450 --> 00:00:36,510
Twitter to to action room with them we

10
00:00:36,510 --> 00:00:42,719
are very proud this year to to welcome

11
00:00:42,719 --> 00:00:45,450
uncie for the first year uncie is a

12
00:00:45,450 --> 00:00:49,770
french government of defensive Security

13
00:00:49,770 --> 00:00:53,100
Agency and we are very proud to have

14
00:00:53,100 --> 00:00:56,250
them also on board and last not best but

15
00:00:56,250 --> 00:00:59,070
at the least silver spoons for sin

16
00:00:59,070 --> 00:01:02,489
active since last year this red teaming

17
00:01:02,489 --> 00:01:04,619
pen testing and auditing company

18
00:01:04,619 --> 00:01:08,810
supporters thanks for that

19
00:01:08,840 --> 00:01:11,490
we also a received support in a

20
00:01:11,490 --> 00:01:15,360
different way we have used this year and

21
00:01:15,360 --> 00:01:18,390
since last year protects protects is a

22
00:01:18,390 --> 00:01:23,400
free software and software solution to

23
00:01:23,400 --> 00:01:27,020
manage even it is a full feature

24
00:01:27,020 --> 00:01:30,180
management solution if you have if you

25
00:01:30,180 --> 00:01:34,490
run a festival if you run a conference

26
00:01:34,490 --> 00:01:39,439
let's give a look they are they have an

27
00:01:39,439 --> 00:01:44,460
implement a lot of useful feature to run

28
00:01:44,460 --> 00:01:48,149
that kind of even we have used it on a

29
00:01:48,149 --> 00:01:50,880
SAS model but you cannot run it on on

30
00:01:50,880 --> 00:01:57,020
four mice so yes we really want to

31
00:01:57,200 --> 00:02:00,479
travel you commit and last a lil

32
00:02:00,479 --> 00:02:04,560
university give a give us access to zoom

33
00:02:04,560 --> 00:02:10,949
plan so thanks for that we want to share

34
00:02:10,949 --> 00:02:14,450
so one point because

35
00:02:14,450 --> 00:02:18,210
virtual addition and physical addition

36
00:02:18,210 --> 00:02:21,890
of an event is quite different and of

37
00:02:21,890 --> 00:02:25,470
and as a lot a lot of impact on expense

38
00:02:25,470 --> 00:02:29,010
and in our case it is a big drop in our

39
00:02:29,010 --> 00:02:32,340
if you know of our expense no more

40
00:02:32,340 --> 00:02:34,260
travel reimbursement for speakers

41
00:02:34,260 --> 00:02:36,600
no more on-site communication or more

42
00:02:36,600 --> 00:02:38,370
catering no more Chamonix it is a

43
00:02:38,370 --> 00:02:41,400
private joke for last year attendees and

44
00:02:41,400 --> 00:02:46,950
so on so it is it has an impact so we

45
00:02:46,950 --> 00:02:52,170
have decided to invite our this year

46
00:02:52,170 --> 00:02:56,610
sponsor to stay sponsors for for next

47
00:02:56,610 --> 00:02:58,470
year at no cost

48
00:02:58,470 --> 00:03:04,110
it was a decision quite easy to to do in

49
00:03:04,110 --> 00:03:07,320
fact and we want to be transparent with

50
00:03:07,320 --> 00:03:10,950
our sponsor and we have to take this

51
00:03:10,950 --> 00:03:12,380
decision

52
00:03:12,380 --> 00:03:16,980
one question we have to talk about do

53
00:03:16,980 --> 00:03:19,310
you think zoom is a free software right

54
00:03:19,310 --> 00:03:22,799
not sure not short roll it is a chilly

55
00:03:22,799 --> 00:03:25,830
answer but we want to share more a

56
00:03:25,830 --> 00:03:29,459
little more and share why we have

57
00:03:29,459 --> 00:03:33,989
decided to go to zoom instead of for

58
00:03:33,989 --> 00:03:38,970
example GTE or big blue butanone it is

59
00:03:38,970 --> 00:03:43,440
our argument we you can we can have

60
00:03:43,440 --> 00:03:46,230
longer discussion on freenode if you

61
00:03:46,230 --> 00:03:50,880
want our argument is are a small team we

62
00:03:50,880 --> 00:03:53,730
are a small team for part-time people to

63
00:03:53,730 --> 00:03:58,519
run the event so we are not video expert

64
00:03:58,519 --> 00:04:05,420
and we decided to to emphasize the

65
00:04:05,420 --> 00:04:09,390
quality of rendering for our speaker

66
00:04:09,390 --> 00:04:13,140
works and we will we really want to

67
00:04:13,140 --> 00:04:17,680
expose them in the most viable

68
00:04:17,680 --> 00:04:21,789
away so we have taken least risk

69
00:04:21,789 --> 00:04:24,550
approach and I've decided to use you to

70
00:04:24,550 --> 00:04:27,729
use zoom we also received support from

71
00:04:27,729 --> 00:04:31,600
the University as previously said with

72
00:04:31,600 --> 00:04:36,789
the zoom plan so we are sure you just

73
00:04:36,789 --> 00:04:42,070
have to make your own idea about it a

74
00:04:42,070 --> 00:04:45,280
new thing we are going to have a concert

75
00:04:45,280 --> 00:04:49,300
online yes we are maybe the only guys

76
00:04:49,300 --> 00:04:52,240
that decided to set up a concert the

77
00:04:52,240 --> 00:04:55,030
first time when they switch to virtual

78
00:04:55,030 --> 00:04:58,570
quite not obvious decision but it is our

79
00:04:58,570 --> 00:05:04,570
so let's talk about the artist Clement

80
00:05:04,570 --> 00:05:07,630
Oh which is a free software developer

81
00:05:07,630 --> 00:05:09,669
and the lead developer of the web basis

82
00:05:09,669 --> 00:05:14,830
of project lemonade LDAP ng is also an

83
00:05:14,830 --> 00:05:18,699
artist is some writer and a singer he

84
00:05:18,699 --> 00:05:23,199
writes French song it is tributes them

85
00:05:23,199 --> 00:05:28,100
under Cecily C license and is going to

86
00:05:28,100 --> 00:05:29,250
[Music]

87
00:05:29,250 --> 00:05:33,490
to propose us live concert tomorrow

88
00:05:33,490 --> 00:05:42,639
evening at 5:00 5:15 and you've got zero

89
00:05:42,639 --> 00:05:46,570
of the concert there but you don't rush

90
00:05:46,570 --> 00:05:49,210
to note it it is on the schedule

91
00:05:49,210 --> 00:05:51,550
everything the bureau's or SoundCloud

92
00:05:51,550 --> 00:05:53,320
account of Clemmie

93
00:05:53,320 --> 00:05:58,020
and the URL of the live concert so it is

94
00:05:58,020 --> 00:06:05,889
it will be so tomorrow evening let's

95
00:06:05,889 --> 00:06:08,770
talk about just a moment about the

96
00:06:08,770 --> 00:06:11,909
conference you are going to be able to

97
00:06:11,909 --> 00:06:16,960
to ask questions through the chat or we

98
00:06:16,960 --> 00:06:21,220
prefer the fuser through the Q&A button

99
00:06:21,220 --> 00:06:25,060
on zoo speak speakers will answer to

100
00:06:25,060 --> 00:06:27,360
them at the end of the talk

101
00:06:27,360 --> 00:06:33,470
if it is a remains time at the end

102
00:06:33,470 --> 00:06:36,860
discussion it got an error it is pts

103
00:06:36,860 --> 00:06:41,069
2020 on freenode and not pts 20 if you

104
00:06:41,069 --> 00:06:45,419
want to have a longer discussion pts yes

105
00:06:45,419 --> 00:06:49,979
pts 2020 on freenode and on twitter you

106
00:06:49,979 --> 00:06:52,949
can follow paths Assad corn Twitter and

107
00:06:52,949 --> 00:06:57,689
oil and if you want to to use a hashtag

108
00:06:57,689 --> 00:07:04,129
it is pts friend so we are going to have

109
00:07:04,129 --> 00:07:09,360
keynote in the next four minutes so we

110
00:07:09,360 --> 00:07:12,210
are going to have a short pause between

111
00:07:12,210 --> 00:07:18,930
the stage will be taken taken by Pauline

112
00:07:18,930 --> 00:07:22,370
and and Alex

113
00:08:08,330 --> 00:08:11,890
[Music]

114
00:08:27,370 --> 00:08:30,889
[Music]

115
00:09:18,570 --> 00:09:24,090
[Music]

116
00:10:45,020 --> 00:10:51,690
so we are kicking off our event with

117
00:10:51,690 --> 00:10:55,470
Pauline and at exam four keynote on

118
00:10:55,470 --> 00:10:57,060
20-minute keynotes

119
00:10:57,060 --> 00:11:03,779
please welcome us okay good afternoon

120
00:11:03,779 --> 00:11:05,760
and good morning wholesome and good

121
00:11:05,760 --> 00:11:10,589
evening everyone can see my screen it

122
00:11:10,589 --> 00:11:13,589
okay okay great

123
00:11:13,589 --> 00:11:16,470
because I'm sure that full screen is

124
00:11:16,470 --> 00:11:25,890
working there okay okay so doing your

125
00:11:25,890 --> 00:11:28,020
keynote for securities is a bit unusual

126
00:11:28,020 --> 00:11:32,970
but in this day I think Pauline AI ni we

127
00:11:32,970 --> 00:11:34,830
decided to do it you know not really on

128
00:11:34,830 --> 00:11:37,580
about security but on all to build

129
00:11:37,580 --> 00:11:40,610
better open source project so Oh

130
00:11:40,610 --> 00:11:44,520
everything started it's basically due to

131
00:11:44,520 --> 00:11:47,490
the lockdown and the pandemic part so we

132
00:11:47,490 --> 00:11:49,890
had this discussion so we both work on

133
00:11:49,890 --> 00:11:52,910
these projects and various project and

134
00:11:52,910 --> 00:11:55,920
initially we like okay so we should do

135
00:11:55,920 --> 00:11:58,650
some work on open source project and we

136
00:11:58,650 --> 00:12:00,240
have this kind of obscure open source

137
00:12:00,240 --> 00:12:01,850
natural language processing project

138
00:12:01,850 --> 00:12:04,890
should we work on it and so but we were

139
00:12:04,890 --> 00:12:07,860
facing a kind of dilemma and because we

140
00:12:07,860 --> 00:12:10,560
were like it's a pandemic we need to do

141
00:12:10,560 --> 00:12:12,680
something about it and we need to even

142
00:12:12,680 --> 00:12:16,079
work for us and so on and we say okay

143
00:12:16,079 --> 00:12:18,690
maybe we just should do just you know

144
00:12:18,690 --> 00:12:21,510
close phase masks at busy

145
00:12:21,510 --> 00:12:24,360
he wherever things started we started to

146
00:12:24,360 --> 00:12:27,750
do face masks and there's something

147
00:12:27,750 --> 00:12:30,750
interesting too so what we have seen

148
00:12:30,750 --> 00:12:33,450
when doing that we see a lot of

149
00:12:33,450 --> 00:12:35,970
similarities with open source projects

150
00:12:35,970 --> 00:12:39,360
especially rules practices and so on and

151
00:12:39,360 --> 00:12:42,360
we did learn a lot learn a lot of things

152
00:12:42,360 --> 00:12:44,940
even if you are strongly engaged in open

153
00:12:44,940 --> 00:12:46,590
source development and so on we

154
00:12:46,590 --> 00:12:49,710
basically discover a lot of things due

155
00:12:49,710 --> 00:12:51,660
to the fact of a lot a lot of people

156
00:12:51,660 --> 00:12:53,940
doing phasma's so we started a project

157
00:12:53,940 --> 00:12:58,650
called project it's a funny name so I

158
00:12:58,650 --> 00:13:01,200
think this name came like very late in

159
00:13:01,200 --> 00:13:05,400
the evening pulling the hand all the

160
00:13:05,400 --> 00:13:11,550
times exactly but it was like yeah yeah

161
00:13:11,550 --> 00:13:15,720
and we basically had this this idea of

162
00:13:15,720 --> 00:13:17,880
contracting a Chinese word for Myung mu

163
00:13:17,880 --> 00:13:20,520
which was like a face mask and this kind

164
00:13:20,520 --> 00:13:24,900
of IKEA style things and we have this

165
00:13:24,900 --> 00:13:28,650
male movie project so you can go to the

166
00:13:28,650 --> 00:13:30,540
website you can go to the github project

167
00:13:30,540 --> 00:13:32,100
and maybe look at it so we basically

168
00:13:32,100 --> 00:13:35,160
started that project and we discover by

169
00:13:35,160 --> 00:13:37,410
doing so that a lot of of of new things

170
00:13:37,410 --> 00:13:41,070
popping up like who thinks about open

171
00:13:41,070 --> 00:13:42,930
source project that we knew about and

172
00:13:42,930 --> 00:13:44,850
and stuff that were new and so on and we

173
00:13:44,850 --> 00:13:47,400
wanted to share with you today all these

174
00:13:47,400 --> 00:13:50,220
countries maybe at the end when you

175
00:13:50,220 --> 00:13:51,630
build a new open source project in the

176
00:13:51,630 --> 00:13:54,000
security field to basically throw those

177
00:13:54,000 --> 00:13:57,260
pools and and we failed to so we won't

178
00:13:57,260 --> 00:13:59,880
keep with and we will not give you

179
00:13:59,880 --> 00:14:02,550
golden rules but we we found some

180
00:14:02,550 --> 00:14:06,360
interesting aspect there so I think one

181
00:14:06,360 --> 00:14:07,980
of the most important thing and this one

182
00:14:07,980 --> 00:14:10,410
was like I think for was a bit of a

183
00:14:10,410 --> 00:14:12,840
challenge but we discover that one so

184
00:14:12,840 --> 00:14:15,180
your project has to resonate and and and

185
00:14:15,180 --> 00:14:17,670
be human so it sounds like a bit like

186
00:14:17,670 --> 00:14:19,530
you know philosophically and so on but

187
00:14:19,530 --> 00:14:24,090
it's really simple and simple fact

188
00:14:24,090 --> 00:14:26,280
I mean Pauline has a very small nose and

189
00:14:26,280 --> 00:14:30,240
I have a big nose so it's simple fact if

190
00:14:30,240 --> 00:14:33,480
you design face mask people with big

191
00:14:33,480 --> 00:14:34,980
nose might have problem with

192
00:14:34,980 --> 00:14:36,480
must designed for people with small

193
00:14:36,480 --> 00:14:40,860
snows make sense so and that's the thing

194
00:14:40,860 --> 00:14:43,019
is and it's valid valid for open-source

195
00:14:43,019 --> 00:14:45,540
project - you need users if you don't

196
00:14:45,540 --> 00:14:47,130
have users you cannot design your

197
00:14:47,130 --> 00:14:48,660
software you cannot design your face

198
00:14:48,660 --> 00:14:51,300
mask you are under into poverty so and

199
00:14:51,300 --> 00:14:53,699
going back to the roots of open-source

200
00:14:53,699 --> 00:14:55,350
project if you remember he came on for

201
00:14:55,350 --> 00:14:57,630
maybe the old guys like his stuff and so

202
00:14:57,630 --> 00:15:02,570
on very old guys remember all those

203
00:15:02,630 --> 00:15:05,250
document and report where yes this

204
00:15:05,250 --> 00:15:06,839
famous document called the katha rine in

205
00:15:06,839 --> 00:15:09,000
the bazaar we explained that you

206
00:15:09,000 --> 00:15:10,889
basically have users we need users if

207
00:15:10,889 --> 00:15:12,990
you don't have users physically you are

208
00:15:12,990 --> 00:15:14,220
not doing something right and that's

209
00:15:14,220 --> 00:15:16,529
exactly the same with face masks and

210
00:15:16,529 --> 00:15:18,990
what we decided to do is to be our first

211
00:15:18,990 --> 00:15:22,199
users put in required some masks or

212
00:15:22,199 --> 00:15:24,480
going to the shop are required so much

213
00:15:24,480 --> 00:15:27,089
for going outside - so we design own

214
00:15:27,089 --> 00:15:30,690
masks and we have our first user so this

215
00:15:30,690 --> 00:15:33,269
man tries super important eating your

216
00:15:33,269 --> 00:15:35,550
own dog food is super important and we

217
00:15:35,550 --> 00:15:36,810
have seen that with the other project I

218
00:15:36,810 --> 00:15:38,130
mean we had some success in some open

219
00:15:38,130 --> 00:15:39,750
source project like this project and so

220
00:15:39,750 --> 00:15:42,180
on because we were using the software

221
00:15:42,180 --> 00:15:44,699
and developing software sometimes but if

222
00:15:44,699 --> 00:15:46,319
you basically design without thinking

223
00:15:46,319 --> 00:15:48,480
about the users I think you are prone to

224
00:15:48,480 --> 00:15:50,339
fail and that's really one of the thing

225
00:15:50,339 --> 00:15:53,220
and we have seen that with the the face

226
00:15:53,220 --> 00:15:56,490
mask project second thing that we have

227
00:15:56,490 --> 00:15:59,279
seen is don't be afraid to try new

228
00:15:59,279 --> 00:16:03,750
things and learn from scratch for

229
00:16:03,750 --> 00:16:06,480
example if you get open source project a

230
00:16:06,480 --> 00:16:08,220
lot of people say oh you know I don't

231
00:16:08,220 --> 00:16:09,240
want to contribute to open source

232
00:16:09,240 --> 00:16:11,720
project I don't know to code and so on

233
00:16:11,720 --> 00:16:14,910
same with face mask for us we had no

234
00:16:14,910 --> 00:16:17,699
 view about suing we had no

235
00:16:17,699 --> 00:16:20,069
 clue about filter of textile and

236
00:16:20,069 --> 00:16:23,310
fabrics if I remember I was like digging

237
00:16:23,310 --> 00:16:25,350
into documents about like what is the

238
00:16:25,350 --> 00:16:27,720
best textile I discover about Jersey

239
00:16:27,720 --> 00:16:30,720
cotton poly co2 and Sunday didn't know

240
00:16:30,720 --> 00:16:31,319
about it

241
00:16:31,319 --> 00:16:33,480
so from it was like getting into it and

242
00:16:33,480 --> 00:16:35,940
starting to reach it yes that's what it

243
00:16:35,940 --> 00:16:39,269
was quite interesting and thing that we

244
00:16:39,269 --> 00:16:40,769
did from the early beginning is like

245
00:16:40,769 --> 00:16:43,980
keeping a trace of amazingly with it you

246
00:16:43,980 --> 00:16:46,769
saw the picture there it's basically the

247
00:16:46,769 --> 00:16:48,750
folder of Pauline with all the XP

248
00:16:48,750 --> 00:16:51,210
and she did for the different face masks

249
00:16:51,210 --> 00:16:56,040
and fabrics and so on so it was like

250
00:16:56,040 --> 00:16:58,290
kind of off-key clocks of everything

251
00:16:58,290 --> 00:17:00,810
that has been done and it was like a

252
00:17:00,810 --> 00:17:02,670
very important see and and the thing

253
00:17:02,670 --> 00:17:05,160
that is interesting is all we started to

254
00:17:05,160 --> 00:17:08,040
design face mask it was like okay we go

255
00:17:08,040 --> 00:17:09,780
on the internet and we go on google

256
00:17:09,780 --> 00:17:12,390
search for face mask design and the

257
00:17:12,390 --> 00:17:13,819
first thing that you'll see it's YouTube

258
00:17:13,819 --> 00:17:17,069
YouTube you have tons of face mask

259
00:17:17,069 --> 00:17:19,410
design things it's very interesting and

260
00:17:19,410 --> 00:17:22,740
so on but which one to start with which

261
00:17:22,740 --> 00:17:25,770
one to pick it's super tough if I

262
00:17:25,770 --> 00:17:27,030
remember correctly we have seen like

263
00:17:27,030 --> 00:17:29,130
thousand and thousand of videos from

264
00:17:29,130 --> 00:17:32,400
from Asia from from Thailand from South

265
00:17:32,400 --> 00:17:35,790
Africa North America Brazil and so on

266
00:17:35,790 --> 00:17:38,490
all different videos different language

267
00:17:38,490 --> 00:17:42,390
with something funky cultural background

268
00:17:42,390 --> 00:17:43,110
and so on

269
00:17:43,110 --> 00:17:45,870
but then you have to pick a video and

270
00:17:45,870 --> 00:17:47,850
try and that's that with it will

271
00:17:47,850 --> 00:17:49,890
basically pick a video and make a test

272
00:17:49,890 --> 00:17:51,480
and you see all those experiment now

273
00:17:51,480 --> 00:17:53,720
basically all those different models and

274
00:17:53,720 --> 00:17:56,610
that's according to resting because when

275
00:17:56,610 --> 00:17:58,620
you pick a video on YouTube you don't

276
00:17:58,620 --> 00:18:00,930
pick it by basically like selecting or

277
00:18:00,930 --> 00:18:03,240
just full of photos on a 5000 videos you

278
00:18:03,240 --> 00:18:04,950
basically pick the one that Google

279
00:18:04,950 --> 00:18:06,870
choose for you so you basically have a

280
00:18:06,870 --> 00:18:08,580
bias it's coming from the YouTube will

281
00:18:08,580 --> 00:18:10,620
Commendation algorithm let you get this

282
00:18:10,620 --> 00:18:13,170
data from them and do why poopoo that

283
00:18:13,170 --> 00:18:14,790
one but that's maybe completely biased

284
00:18:14,790 --> 00:18:17,280
one but that's you know you have to deal

285
00:18:17,280 --> 00:18:19,860
with that so that's something that we

286
00:18:19,860 --> 00:18:23,400
have seen is video is nice to hit play

287
00:18:23,400 --> 00:18:25,050
and basically every basic trainings from

288
00:18:25,050 --> 00:18:27,750
makers but there is documentation

289
00:18:27,750 --> 00:18:29,790
missing and that's where we were trying

290
00:18:29,790 --> 00:18:32,070
to fill the gap is like from the video

291
00:18:32,070 --> 00:18:36,090
itself we try out document the failures

292
00:18:36,090 --> 00:18:38,760
success and publish it and that was the

293
00:18:38,760 --> 00:18:41,010
main your project is that maybe that is

294
00:18:41,010 --> 00:18:41,310
like

295
00:18:41,310 --> 00:18:44,490
publishing what we basically did when we

296
00:18:44,490 --> 00:18:46,230
failed and you see that we have a lot of

297
00:18:46,230 --> 00:18:47,850
iterations and that's the interesting

298
00:18:47,850 --> 00:18:49,620
part nothing for open source project is

299
00:18:49,620 --> 00:18:55,530
exactly the same but again if you do

300
00:18:55,530 --> 00:18:57,360
open source project don't hesitate to

301
00:18:57,360 --> 00:18:59,010
publish about your failures I know a lot

302
00:18:59,010 --> 00:19:00,330
of people want to have a clean data

303
00:19:00,330 --> 00:19:01,800
repository

304
00:19:01,800 --> 00:19:03,450
all the things that are perfect and so

305
00:19:03,450 --> 00:19:05,760
on it's like for academia it's always

306
00:19:05,760 --> 00:19:07,830
better if you are publishing your

307
00:19:07,830 --> 00:19:10,890
failures so let's try and don't be

308
00:19:10,890 --> 00:19:13,500
afraid to show off think that fate and

309
00:19:13,500 --> 00:19:18,780
so another thing is to link what you can

310
00:19:18,780 --> 00:19:21,480
see on the slide we are using a BBB for

311
00:19:21,480 --> 00:19:23,790
the chat so Pauline and I we are using

312
00:19:23,790 --> 00:19:25,890
it on on a daily basis for discussion is

313
00:19:25,890 --> 00:19:27,420
a project and so on we were sharing

314
00:19:27,420 --> 00:19:30,540
screen so we had all those issue with

315
00:19:30,540 --> 00:19:34,140
like no sound not physically synchronize

316
00:19:34,140 --> 00:19:36,660
okay we were not using zoom so I mean

317
00:19:36,660 --> 00:19:40,650
maybe why but we were sharing screen

318
00:19:40,650 --> 00:19:42,150
using for example in this case I'm

319
00:19:42,150 --> 00:19:45,180
xscape for design user logo the

320
00:19:45,180 --> 00:19:48,060
tutorials and so on it was really other

321
00:19:48,060 --> 00:19:50,160
things so the tooling aspect is super

322
00:19:50,160 --> 00:19:53,250
important it's really you basically take

323
00:19:53,250 --> 00:19:54,510
back the control of thing that you are

324
00:19:54,510 --> 00:19:57,000
producing and you become really producer

325
00:19:57,000 --> 00:19:59,250
other things just to go back to some

326
00:19:59,250 --> 00:20:01,710
theory if you have time and you want to

327
00:20:01,710 --> 00:20:03,390
dig into that this is a very interesting

328
00:20:03,390 --> 00:20:05,130
aspect which is it is a background of

329
00:20:05,130 --> 00:20:07,620
open source project and free software is

330
00:20:07,620 --> 00:20:10,170
a book from even elite tools for

331
00:20:10,170 --> 00:20:12,420
conviviality it was provision 273 so I

332
00:20:12,420 --> 00:20:14,520
was not even born at that time the big

333
00:20:14,520 --> 00:20:16,950
history was I think but that's something

334
00:20:16,950 --> 00:20:19,110
that is quite important there it's

335
00:20:19,110 --> 00:20:22,250
really the background of why people f12

336
00:20:22,250 --> 00:20:24,900
to that are accessible for them they can

337
00:20:24,900 --> 00:20:27,630
control the tools themself and they can

338
00:20:27,630 --> 00:20:29,850
basically have an equal access and just

339
00:20:29,850 --> 00:20:31,710
in for example with suing machine and so

340
00:20:31,710 --> 00:20:34,110
it's really that if you can dismantle

341
00:20:34,110 --> 00:20:37,470
them basically get one understand how it

342
00:20:37,470 --> 00:20:39,150
works and so it is really this kind of

343
00:20:39,150 --> 00:20:41,580
process and you see that you become part

344
00:20:41,580 --> 00:20:43,890
of the actions and you become part of

345
00:20:43,890 --> 00:20:45,570
the action of getting your own to not

346
00:20:45,570 --> 00:20:46,530
failure antastic

347
00:20:46,530 --> 00:20:49,710
a small pity that we have seen during

348
00:20:49,710 --> 00:20:51,420
all those discussion about phasma's

349
00:20:51,420 --> 00:20:53,730
design is a lot of thing that were

350
00:20:53,730 --> 00:20:55,530
shared where share on platform at was

351
00:20:55,530 --> 00:20:57,870
super accessible but not always open

352
00:20:57,870 --> 00:20:59,820
source for example we have seen a lot of

353
00:20:59,820 --> 00:21:01,230
people using Google Docs

354
00:21:01,230 --> 00:21:06,020
super easy hope the pictures the

355
00:21:06,020 --> 00:21:08,550
step-by-step guides of how to lose a

356
00:21:08,550 --> 00:21:11,160
mask and so on but it it is it simple

357
00:21:11,160 --> 00:21:12,720
for them so it's I think something to

358
00:21:12,720 --> 00:21:14,130
keep in mind one for the open source

359
00:21:14,130 --> 00:21:15,389
project that you are working on

360
00:21:15,389 --> 00:21:17,849
make it as easy as possible because you

361
00:21:17,849 --> 00:21:21,119
may get more users another thing that we

362
00:21:21,119 --> 00:21:24,269
have seen as quite funky too and I thing

363
00:21:24,269 --> 00:21:27,089
is easily to do different things yes and

364
00:21:27,089 --> 00:21:28,409
I think that this discussion is putting

365
00:21:28,409 --> 00:21:31,409
a lot huh guarding what is good is a

366
00:21:31,409 --> 00:21:33,899
trigger off of people basically sharing

367
00:21:33,899 --> 00:21:35,789
and so on and and what are the thing

368
00:21:35,789 --> 00:21:37,669
that are helping them for sharing

369
00:21:37,669 --> 00:21:40,559
obviously time time constrain

370
00:21:40,559 --> 00:21:42,419
so we had this discussion about what is

371
00:21:42,419 --> 00:21:44,879
time is really a average and we need to

372
00:21:44,879 --> 00:21:47,399
12 those masks so we don't really care

373
00:21:47,399 --> 00:21:48,869
about intellectual property yes and you

374
00:21:48,869 --> 00:21:50,419
see that those Heights usually add

375
00:21:50,419 --> 00:21:53,369
viscosity add complexity and so on in

376
00:21:53,369 --> 00:21:55,559
this case we had a lot of flexibility of

377
00:21:55,559 --> 00:21:57,509
creative exchange and so on just by the

378
00:21:57,509 --> 00:22:00,659
fact of of timing on sign another thing

379
00:22:00,659 --> 00:22:02,369
is was like a low social class I mean

380
00:22:02,369 --> 00:22:04,139
everyone wants to go in the same

381
00:22:04,139 --> 00:22:06,089
direction protecting people and so on a

382
00:22:06,089 --> 00:22:08,459
task alt and I think that we have seen

383
00:22:08,459 --> 00:22:11,070
is every work we did for the past 25

384
00:22:11,070 --> 00:22:12,989
years on licensing and so on and maybe

385
00:22:12,989 --> 00:22:15,599
some people in the audience know about

386
00:22:15,599 --> 00:22:18,649
that but this is a lot of existing

387
00:22:18,649 --> 00:22:21,570
framework for licensing the Free

388
00:22:21,570 --> 00:22:23,339
Software Foundation did some open source

389
00:22:23,339 --> 00:22:24,899
software initiative it sounds and the

390
00:22:24,899 --> 00:22:26,519
Creative Commons initiative there are

391
00:22:26,519 --> 00:22:28,609
some others but those one are really

392
00:22:28,609 --> 00:22:30,869
helping everyone so a lot of people were

393
00:22:30,869 --> 00:22:32,879
just like get up select new licenses

394
00:22:32,879 --> 00:22:34,919
that it didn't even care about the

395
00:22:34,919 --> 00:22:37,169
license they were shooting and so on the

396
00:22:37,169 --> 00:22:39,299
most funny part is a lot of of people at

397
00:22:39,299 --> 00:22:40,859
we're designing clothes phasmid designer

398
00:22:40,859 --> 00:22:42,690
didn't even know they were doing open

399
00:22:42,690 --> 00:22:44,279
source they were doing open source

400
00:22:44,279 --> 00:22:45,719
without knowing it and that's another

401
00:22:45,719 --> 00:22:47,539
thing that is quite interesting too is

402
00:22:47,539 --> 00:22:50,339
there's a huge amount of people that

403
00:22:50,339 --> 00:22:51,629
could collaborate to your open source

404
00:22:51,629 --> 00:22:54,419
project they just need to be informed

405
00:22:54,419 --> 00:22:55,950
about what is open source and what is a

406
00:22:55,950 --> 00:22:58,609
community behind what is a goal of it

407
00:22:58,609 --> 00:23:00,629
another thing that is really important

408
00:23:00,629 --> 00:23:03,359
is is if you build a project you need to

409
00:23:03,359 --> 00:23:05,839
reinforce and a relationship during

410
00:23:05,839 --> 00:23:08,399
obviously lobbied on it was a bit harsh

411
00:23:08,399 --> 00:23:10,169
and difficult for lot of people so I

412
00:23:10,169 --> 00:23:13,339
think fun and funny project is important

413
00:23:13,339 --> 00:23:15,690
so on the left side you can see some

414
00:23:15,690 --> 00:23:20,279
screenshots the less sensitive one

415
00:23:20,279 --> 00:23:24,389
we put in adding a huge bowl of miso

416
00:23:24,389 --> 00:23:28,950
soup she's converting sometimes close

417
00:23:28,950 --> 00:23:31,769
mass into brothers personal matter so

418
00:23:31,769 --> 00:23:33,109
everything is fine

419
00:23:33,109 --> 00:23:36,829
so it's really important it's it's

420
00:23:36,829 --> 00:23:39,869
sharing and giving back to the community

421
00:23:39,869 --> 00:23:42,149
and keeping it fun something I

422
00:23:42,149 --> 00:23:43,440
discovered personally that's core

423
00:23:43,440 --> 00:23:45,509
interesting to a lot of open source

424
00:23:45,509 --> 00:23:47,639
people were like part time open source

425
00:23:47,639 --> 00:23:49,559
contributor say working at the office

426
00:23:49,559 --> 00:23:51,419
come back at home doing some

427
00:23:51,419 --> 00:23:54,690
contributions but now we were all in the

428
00:23:54,690 --> 00:23:58,109
same boat all having to contribute 100%

429
00:23:58,109 --> 00:24:00,149
into open source projects and that was

430
00:24:00,149 --> 00:24:01,529
quite interesting because we were all

431
00:24:01,529 --> 00:24:02,819
facing the same problem that some

432
00:24:02,819 --> 00:24:04,859
contributor that I knew about we're

433
00:24:04,859 --> 00:24:06,509
right oh you know remote working is

434
00:24:06,509 --> 00:24:08,609
painful you know you know a new black

435
00:24:08,609 --> 00:24:11,609
haha yes but at the end we discovered it

436
00:24:11,609 --> 00:24:13,529
was like painful and difficult so it's

437
00:24:13,529 --> 00:24:15,629
really important that we really rely on

438
00:24:15,629 --> 00:24:18,359
on on those capabilities and people at

439
00:24:18,359 --> 00:24:19,739
our or do you know about we're not

440
00:24:19,739 --> 00:24:22,440
possibly mode to managers communities

441
00:24:22,440 --> 00:24:25,139
and I highly advise it's not because the

442
00:24:25,139 --> 00:24:27,269
gas is been shown without any advice to

443
00:24:27,269 --> 00:24:29,399
read a book from Peter in chance called

444
00:24:29,399 --> 00:24:30,749
social architecture building online

445
00:24:30,749 --> 00:24:31,559
communities

446
00:24:31,559 --> 00:24:33,869
he explained from the 0nq communities

447
00:24:33,869 --> 00:24:35,429
ought to deal with the open source

448
00:24:35,429 --> 00:24:37,950
community is super important so if you

449
00:24:37,950 --> 00:24:39,629
start an open source project insecurity

450
00:24:39,629 --> 00:24:42,539
read that books it's really cool it's

451
00:24:42,539 --> 00:24:44,190
explaining to you or to deal with

452
00:24:44,190 --> 00:24:46,529
contributors even difficult contributors

453
00:24:46,529 --> 00:24:50,009
and so not scary very interested again

454
00:24:50,009 --> 00:24:52,889
funny super important you see that you

455
00:24:52,889 --> 00:24:54,289
can jump into a box when you are

456
00:24:54,289 --> 00:24:56,669
remotely no one has been hurt

457
00:24:56,669 --> 00:24:58,950
no cuts has been involved here but you

458
00:24:58,950 --> 00:25:01,829
see can be fun another thing that you

459
00:25:01,829 --> 00:25:03,690
it's very important is to creativity of

460
00:25:03,690 --> 00:25:07,109
open source project and the only way to

461
00:25:07,109 --> 00:25:09,869
do that is some people raise as a gif

462
00:25:09,869 --> 00:25:11,609
community some people call it a posse

463
00:25:11,609 --> 00:25:14,879
city or economy but reciprocity is very

464
00:25:14,879 --> 00:25:16,709
important if you start with people

465
00:25:16,709 --> 00:25:19,589
getting issues to request and so on if

466
00:25:19,589 --> 00:25:22,559
you reply back to them it will dynamize

467
00:25:22,559 --> 00:25:24,359
and cultivate your first projects it's

468
00:25:24,359 --> 00:25:28,889
super important and at the end when you

469
00:25:28,889 --> 00:25:30,749
share some tools and you see I'll going

470
00:25:30,749 --> 00:25:32,219
back to the tools tools are super

471
00:25:32,219 --> 00:25:34,589
important you don't exactly know that

472
00:25:34,589 --> 00:25:36,989
but sometimes you are one you for

473
00:25:36,989 --> 00:25:40,049
example do gardening you do art and so

474
00:25:40,049 --> 00:25:40,890
on

475
00:25:40,890 --> 00:25:44,280
another simple free software if you

476
00:25:44,280 --> 00:25:47,040
share tooling for supporting your tools

477
00:25:47,040 --> 00:25:48,600
and so on it's it's really helping the

478
00:25:48,600 --> 00:25:50,010
community and educating me values for

479
00:25:50,010 --> 00:25:51,050
everyone

480
00:25:51,050 --> 00:25:53,190
obviously when when you start to create

481
00:25:53,190 --> 00:25:54,750
an open-source project ahead knowledge

482
00:25:54,750 --> 00:25:59,010
for example Philip that is part of the

483
00:25:59,010 --> 00:26:02,010
password sort team as a super wiki every

484
00:26:02,010 --> 00:26:03,870
time you search system for Adelphi G who

485
00:26:03,870 --> 00:26:05,880
you end up on his wiki because he is

486
00:26:05,880 --> 00:26:07,800
basically putting his knowledge into a

487
00:26:07,800 --> 00:26:10,740
wiki is documenting it and is indexed by

488
00:26:10,740 --> 00:26:13,260
Google and that's really important and

489
00:26:13,260 --> 00:26:15,270
that for example if we find a bug fixes

490
00:26:15,270 --> 00:26:17,220
on a bird so Sportacus a guy just want

491
00:26:17,220 --> 00:26:19,680
to fix it we'll add it a passionate week

492
00:26:19,680 --> 00:26:22,380
that's cool so that's every contributor

493
00:26:22,380 --> 00:26:24,330
should do a night another signature

494
00:26:24,330 --> 00:26:26,520
square important - for face mask for

495
00:26:26,520 --> 00:26:28,200
example we have seen that diverse which

496
00:26:28,200 --> 00:26:30,030
is important because people have

497
00:26:30,030 --> 00:26:32,730
different faces they have different

498
00:26:32,730 --> 00:26:34,530
requirements I mean someone working

499
00:26:34,530 --> 00:26:36,660
full-time in the shop as different

500
00:26:36,660 --> 00:26:38,370
requirement as someone just traveling by

501
00:26:38,370 --> 00:26:40,290
the subway to go somewhere and just

502
00:26:40,290 --> 00:26:42,570
having a face mask on 30 minutes so that

503
00:26:42,570 --> 00:26:44,250
come things that if you have more people

504
00:26:44,250 --> 00:26:46,170
more users and not contributors we can

505
00:26:46,170 --> 00:26:48,270
basically a cutie ledger your project

506
00:26:48,270 --> 00:26:50,000
onto mom time let's call important

507
00:26:50,000 --> 00:26:52,680
during the project we were using a lot

508
00:26:52,680 --> 00:26:54,270
of open source project but I just want

509
00:26:54,270 --> 00:26:55,800
to list some of them that we were using

510
00:26:55,800 --> 00:26:59,340
and this one is my with a frustration

511
00:26:59,340 --> 00:27:02,010
and complain about and a French agency I

512
00:27:02,010 --> 00:27:04,560
use pythons quite a lot especially for

513
00:27:04,560 --> 00:27:07,320
extracting a large table of filtering

514
00:27:07,320 --> 00:27:09,270
tests so the organization was sharing a

515
00:27:09,270 --> 00:27:11,730
PDF and this PDF was generated from

516
00:27:11,730 --> 00:27:14,190
Excel so ask them to share the excel and

517
00:27:14,190 --> 00:27:16,560
say we are not allowed to Alexa so you

518
00:27:16,560 --> 00:27:18,210
end up by using Python to extract that

519
00:27:18,210 --> 00:27:20,330
was useful but at the end you see

520
00:27:20,330 --> 00:27:23,370
sometimes we have to find a way to to

521
00:27:23,370 --> 00:27:25,320
extract that a little thing that were

522
00:27:25,320 --> 00:27:27,420
interesting to is Sam's help which is

523
00:27:27,420 --> 00:27:29,850
not personable sauce project but is

524
00:27:29,850 --> 00:27:33,090
basically a dog to pay wall and the

525
00:27:33,090 --> 00:27:36,210
city's breaking pay Wars was for us very

526
00:27:36,210 --> 00:27:37,650
important because we were able to access

527
00:27:37,650 --> 00:27:39,900
academic papers doing tests and

528
00:27:39,900 --> 00:27:41,790
filtering on textile fabrics which is a

529
00:27:41,790 --> 00:27:44,070
very important matter when you build

530
00:27:44,070 --> 00:27:46,440
mask which text you to use which one is

531
00:27:46,440 --> 00:27:48,060
basically more filtering in which one

532
00:27:48,060 --> 00:27:50,340
our filtering varices one bacteria and

533
00:27:50,340 --> 00:27:51,990
so on

534
00:27:51,990 --> 00:27:54,299
another thing that we want to thanks

535
00:27:54,299 --> 00:27:56,070
everyone to is basically the people that

536
00:27:56,070 --> 00:27:59,309
did face masks during those days because

537
00:27:59,309 --> 00:28:00,450
they were part of the community without

538
00:28:00,450 --> 00:28:01,860
even knowing it and that's quite

539
00:28:01,860 --> 00:28:03,450
important to some time when juice

540
00:28:03,450 --> 00:28:05,190
open-source software you didn't know

541
00:28:05,190 --> 00:28:07,070
that in advance

542
00:28:07,070 --> 00:28:10,889
so what we can we can say after those

543
00:28:10,889 --> 00:28:14,279
months of off of project we say that we

544
00:28:14,279 --> 00:28:16,799
succeed in some way I mean open source

545
00:28:16,799 --> 00:28:18,749
in the communities resonated much more

546
00:28:18,749 --> 00:28:21,720
than unusual during the crisis rate of

547
00:28:21,720 --> 00:28:24,539
initiative started supporting hospitals

548
00:28:24,539 --> 00:28:26,820
local communities people and so on even

549
00:28:26,820 --> 00:28:29,039
your neighborhoods and so on so it was a

550
00:28:29,039 --> 00:28:30,960
like quite successful we have seen that

551
00:28:30,960 --> 00:28:32,610
a lot of applesauce thing that has been

552
00:28:32,610 --> 00:28:34,289
done in the past was useful the

553
00:28:34,289 --> 00:28:36,480
licensing aspect and so on all those

554
00:28:36,480 --> 00:28:39,299
after licensing and so on may make a lot

555
00:28:39,299 --> 00:28:41,399
of sense all people doing 3d printing is

556
00:28:41,399 --> 00:28:43,110
licensing and so on make a lot of sense

557
00:28:43,110 --> 00:28:45,179
we have seen a lot of people using did

558
00:28:45,179 --> 00:28:47,309
folks reporting their coordination fo

559
00:28:47,309 --> 00:28:50,700
and for content publishing its you we

560
00:28:50,700 --> 00:28:52,259
see that more and more so that's where

561
00:28:52,259 --> 00:28:57,090
we succeed but we fail to still some

562
00:28:57,090 --> 00:28:58,950
open source to - super complex to use

563
00:28:58,950 --> 00:29:00,840
I mean people operating video and

564
00:29:00,840 --> 00:29:02,999
YouTube is is an example I mean for them

565
00:29:02,999 --> 00:29:04,619
it's super easy easy upload a video and

566
00:29:04,619 --> 00:29:05,100
that's it

567
00:29:05,100 --> 00:29:07,799
but we have no for example good open

568
00:29:07,799 --> 00:29:10,110
source tools for editing commenting

569
00:29:10,110 --> 00:29:12,779
videos and to mix mash those two video

570
00:29:12,779 --> 00:29:15,360
and content because sometimes when you

571
00:29:15,360 --> 00:29:18,090
you want to finally make a mask and you

572
00:29:18,090 --> 00:29:20,369
look at a video you want to toss it and

573
00:29:20,369 --> 00:29:23,220
truly understand okay what the people

574
00:29:23,220 --> 00:29:27,869
behind it is for example is this return

575
00:29:27,869 --> 00:29:30,539
part is it the mask in front

576
00:29:30,539 --> 00:29:32,519
why do you want to use it and so and

577
00:29:32,519 --> 00:29:33,840
something you have to stop and so and

578
00:29:33,840 --> 00:29:35,700
ESPO explanation and then you have to go

579
00:29:35,700 --> 00:29:37,289
back to the video to see the previous

580
00:29:37,289 --> 00:29:41,129
one did swap mask after and so on so we

581
00:29:41,129 --> 00:29:44,029
hidden in some sub stuff in that area

582
00:29:44,029 --> 00:29:46,740
another thing that we and I think our

583
00:29:46,740 --> 00:29:48,360
shell Bethany will be very happy with

584
00:29:48,360 --> 00:29:48,570
that

585
00:29:48,570 --> 00:29:51,299
did a talk from some some years ago I

586
00:29:51,299 --> 00:29:52,529
don't know if it's two years ago at

587
00:29:52,529 --> 00:29:55,529
Ithaca you about the fact of we are

588
00:29:55,529 --> 00:29:57,690
really bad at archiving what we produce

589
00:29:57,690 --> 00:29:59,639
and I think he was right and we are

590
00:29:59,639 --> 00:30:02,039
still very bad if you don't look on

591
00:30:02,039 --> 00:30:02,970
guitar right now

592
00:30:02,970 --> 00:30:05,280
or the face mask design 3d print

593
00:30:05,280 --> 00:30:06,990
in some form it's you have hundred of

594
00:30:06,990 --> 00:30:10,170
them some F no hit me no texts no

595
00:30:10,170 --> 00:30:12,900
explanations just a drop of files they

596
00:30:12,900 --> 00:30:15,210
have no labels no classification in zone

597
00:30:15,210 --> 00:30:18,350
so there's a lot of work as as a kind of

598
00:30:18,350 --> 00:30:21,030
librarians for open source where we have

599
00:30:21,030 --> 00:30:22,710
to index evaluate for example evaluate

600
00:30:22,710 --> 00:30:24,300
symbols of as much design which one is

601
00:30:24,300 --> 00:30:26,070
good which one is bad which one is more

602
00:30:26,070 --> 00:30:28,080
for our pens faces when fully assessed

603
00:30:28,080 --> 00:30:29,100
in please listen son

604
00:30:29,100 --> 00:30:33,030
so incontinent more losers and and when

605
00:30:33,030 --> 00:30:35,160
doing the project we fail literally on

606
00:30:35,160 --> 00:30:37,950
something very important I think all in

607
00:30:37,950 --> 00:30:39,150
the software community in open source

608
00:30:39,150 --> 00:30:41,130
community knew about this mantra really

609
00:30:41,130 --> 00:30:43,350
the only Airin is a fan I was like

610
00:30:43,350 --> 00:30:45,570
knowing about it and I should have felt

611
00:30:45,570 --> 00:30:48,360
about it why because the thing is masks

612
00:30:48,360 --> 00:30:51,270
we were needing them at really very fast

613
00:30:51,270 --> 00:30:53,010
way and we were like like polishing the

614
00:30:53,010 --> 00:30:54,990
website and so on and saying okay two

615
00:30:54,990 --> 00:30:57,240
weeks or three weeks is fine no we

616
00:30:57,240 --> 00:30:59,010
should have released it as first day

617
00:30:59,010 --> 00:31:02,580
even it was like draft super early we

618
00:31:02,580 --> 00:31:04,290
should've done that and I think again we

619
00:31:04,290 --> 00:31:05,850
fell on that one even if you knew it for

620
00:31:05,850 --> 00:31:06,470
years

621
00:31:06,470 --> 00:31:08,610
on my side and you know it for more than

622
00:31:08,610 --> 00:31:11,550
20 years like it so that's that's the

623
00:31:11,550 --> 00:31:15,300
thing another thing is is is there we

624
00:31:15,300 --> 00:31:18,030
have plenty of opportunity for new new

625
00:31:18,030 --> 00:31:21,750
open source project one and you have

626
00:31:21,750 --> 00:31:24,060
seen that during the presentation in the

627
00:31:24,060 --> 00:31:25,470
slide at a if here I have a little

628
00:31:25,470 --> 00:31:28,890
screenshot of BBB that's great but the

629
00:31:28,890 --> 00:31:32,280
thing is I want to to stop my mac down

630
00:31:32,280 --> 00:31:34,050
I'm at the same time and drink the

631
00:31:34,050 --> 00:31:36,480
contacts with a video and so on so there

632
00:31:36,480 --> 00:31:38,070
are plenty of opportunities for new open

633
00:31:38,070 --> 00:31:40,200
source project and I would drink we have

634
00:31:40,200 --> 00:31:42,150
an open source project where you can do

635
00:31:42,150 --> 00:31:44,520
not stick in back down stop screenshot

636
00:31:44,520 --> 00:31:46,980
what we have seen on a video chat and so

637
00:31:46,980 --> 00:31:49,950
on and you can see directly what has

638
00:31:49,950 --> 00:31:55,410
been done there so that's it for the you

639
00:31:55,410 --> 00:31:57,540
know so you see that this project which

640
00:31:57,540 --> 00:32:01,530
was like nothing to do with the Cherokee

641
00:32:01,530 --> 00:32:03,420
open source for us was like a kind of

642
00:32:03,420 --> 00:32:05,370
trigger say okay we are still badly

643
00:32:05,370 --> 00:32:07,500
documenting all we do applesauce project

644
00:32:07,500 --> 00:32:10,260
and that's where we want to go there

645
00:32:10,260 --> 00:32:12,180
Pauline is working on a document that we

646
00:32:12,180 --> 00:32:15,390
will publish after after what describing

647
00:32:15,390 --> 00:32:17,850
what we discover at least from from all

648
00:32:17,850 --> 00:32:18,850
sides

649
00:32:18,850 --> 00:32:22,150
we we have some bibliography and I think

650
00:32:22,150 --> 00:32:24,910
if you have time to read those every

651
00:32:24,910 --> 00:32:26,800
look at this one and I would really

652
00:32:26,800 --> 00:32:29,620
advise you to read the false one but

653
00:32:29,620 --> 00:32:31,780
selectively especially if you have an

654
00:32:31,780 --> 00:32:33,790
open source repository and you maintain

655
00:32:33,790 --> 00:32:36,460
and deal with contributors it's really

656
00:32:36,460 --> 00:32:39,820
insightful so know if you have any

657
00:32:39,820 --> 00:32:42,820
questions as I put it on myself can

658
00:32:42,820 --> 00:32:46,090
answer those questions thank you thank

659
00:32:46,090 --> 00:32:48,419
you I imagine

660
00:32:51,730 --> 00:32:54,990
effectively we have got some Q&A

661
00:32:54,990 --> 00:32:57,910
possible so if you have got we have got

662
00:32:57,910 --> 00:33:02,110
three minutes to to ask question more

663
00:33:02,110 --> 00:33:05,160
directly to Allison and Pauline and

664
00:33:05,160 --> 00:33:10,060
after if you remind them you can ask

665
00:33:10,060 --> 00:33:15,660
some some question on on freenode maybe

666
00:33:15,660 --> 00:33:20,040
have you got a first question Phillip

667
00:33:20,040 --> 00:33:22,810
yeah I can start there is nothing in the

668
00:33:22,810 --> 00:33:24,190
pipeline

669
00:33:24,190 --> 00:33:27,280
you mentioned quickly my wiki thank you

670
00:33:27,280 --> 00:33:30,520
but actually I was facing a more

671
00:33:30,520 --> 00:33:32,920
security issue with that some years ago

672
00:33:32,920 --> 00:33:35,850
it was very easy to make open platforms

673
00:33:35,850 --> 00:33:40,000
open for addition to everybody and get

674
00:33:40,000 --> 00:33:43,030
everyone collaborating online but today

675
00:33:43,030 --> 00:33:44,860
I take my wiki as an example

676
00:33:44,860 --> 00:33:47,260
it's just impossible to even leave

677
00:33:47,260 --> 00:33:50,530
registration on without massive capture

678
00:33:50,530 --> 00:33:53,470
so how today can you make such open

679
00:33:53,470 --> 00:33:56,170
platforms very easy open for

680
00:33:56,170 --> 00:34:01,530
contribution and about these BOTS

681
00:34:04,100 --> 00:34:08,250
putting you into snow I think so it's

682
00:34:08,250 --> 00:34:09,739
something we discussed before that

683
00:34:09,739 --> 00:34:13,859
they're huge needs four platforms I can

684
00:34:13,859 --> 00:34:16,409
manage at time that we need to be

685
00:34:16,409 --> 00:34:18,418
efficient in collaboration and also we

686
00:34:18,418 --> 00:34:21,719
need to stay good rule of privacy and to

687
00:34:21,719 --> 00:34:24,089
protect our data and it can be more

688
00:34:24,089 --> 00:34:25,830
sensitive they shall go on different

689
00:34:25,830 --> 00:34:31,530
projects I have no answer yet I don't

690
00:34:31,530 --> 00:34:34,469
know if Alex honey I didn't don't

691
00:34:34,469 --> 00:34:35,310
previously

692
00:34:35,310 --> 00:34:38,010
yeah it's kind of a pity but what I will

693
00:34:38,010 --> 00:34:40,159
say my might I think

694
00:34:40,159 --> 00:34:43,409
rise some hand there but for what I have

695
00:34:43,409 --> 00:34:45,780
seen is some that are successful like

696
00:34:45,780 --> 00:34:47,580
quickly like that have this kind of

697
00:34:47,580 --> 00:34:50,010
notification against Google so instead

698
00:34:50,010 --> 00:34:52,679
of using a CAPTCHA they use some

699
00:34:52,679 --> 00:34:55,199
highlight single sign-on again existing

700
00:34:55,199 --> 00:34:57,300
like github services and so on so the

701
00:34:57,300 --> 00:34:59,670
only one for example I'm thinking of AMD

702
00:34:59,670 --> 00:35:01,980
and some of those I got you register

703
00:35:01,980 --> 00:35:03,240
with a liter pack on and you basically

704
00:35:03,240 --> 00:35:05,550
just don't contribute and so on so

705
00:35:05,550 --> 00:35:08,430
that's one way of avoiding like spamming

706
00:35:08,430 --> 00:35:11,390
and so on because I can register unknown

707
00:35:11,390 --> 00:35:13,980
but I don't favor it fine metal of

708
00:35:13,980 --> 00:35:15,599
piracy and so on because you basically

709
00:35:15,599 --> 00:35:17,580
get the tracking services from your

710
00:35:17,580 --> 00:35:21,180
provider and so on so I think has a very

711
00:35:21,180 --> 00:35:23,970
interesting point but to be honest I

712
00:35:23,970 --> 00:35:26,750
still don't know exactly how to solve it

713
00:35:26,750 --> 00:35:29,400
but that may be an interesting project

714
00:35:29,400 --> 00:35:32,730
to the to is self focused fashions and

715
00:35:32,730 --> 00:35:35,250
contributions without having spam what

716
00:35:35,250 --> 00:35:37,500
is less panel I think Wikipedia is

717
00:35:37,500 --> 00:35:39,650
facing the same kind of problems too and

718
00:35:39,650 --> 00:35:45,270
some others but it may expand on that I

719
00:35:45,270 --> 00:35:48,960
don't see direct like functionality or

720
00:35:48,960 --> 00:35:52,550
ID that could solve this issue

721
00:35:54,410 --> 00:35:59,520
thank you no it seems no no more

722
00:35:59,520 --> 00:36:01,980
questioning you know in supply pipeline

723
00:36:01,980 --> 00:36:06,930
Q&A so thank you all very much for this

724
00:36:06,930 --> 00:36:11,099
keynote I put in an analogous on and now

725
00:36:11,099 --> 00:36:13,980
we are going yeah we are going to start

726
00:36:13,980 --> 00:36:14,860
our

727
00:36:14,860 --> 00:36:18,880
first first session dedicated to more

728
00:36:18,880 --> 00:36:21,880
security identity we are going to start

729
00:36:21,880 --> 00:36:24,670
with Nilson yet from qoodles key

730
00:36:24,670 --> 00:36:27,840
security speaking about fifty two

731
00:36:27,840 --> 00:36:31,470
welcome Nelson the stage is yours

732
00:36:31,470 --> 00:36:34,649
thank you

733
00:36:36,470 --> 00:36:38,529
you

734
00:36:39,780 --> 00:36:41,520
so I'm going to

735
00:36:41,520 --> 00:36:45,510
my screen I believe you need to stop

736
00:36:45,510 --> 00:36:50,760
sharing for me to be able to share thank

737
00:36:50,760 --> 00:36:52,970
you

738
00:36:53,500 --> 00:36:55,560
you

739
00:36:58,650 --> 00:37:00,710
you

740
00:37:08,540 --> 00:37:13,910
all right can you see my slides

741
00:37:14,979 --> 00:37:18,019
it's okay yeah that's good thank you

742
00:37:18,019 --> 00:37:24,170
okay so hi everyone today I will be

743
00:37:24,170 --> 00:37:26,479
talking about replacing passwords with

744
00:37:26,479 --> 00:37:30,349
Fido - my name is Nance and I'm on the

745
00:37:30,349 --> 00:37:33,609
research team at fidelity security I

746
00:37:33,609 --> 00:37:37,369
don't need to tell you that passwords

747
00:37:37,369 --> 00:37:41,660
are a problem many big players in the

748
00:37:41,660 --> 00:37:44,900
industry and probably anyone that's ever

749
00:37:44,900 --> 00:37:48,259
used the password knows there are many

750
00:37:48,259 --> 00:37:51,829
problems with those so is there a way we

751
00:37:51,829 --> 00:37:57,410
can actually do better enters Fido - a

752
00:37:57,410 --> 00:38:00,559
new specification that was developed by

753
00:38:00,559 --> 00:38:04,699
the Fido Alliance and it is actually the

754
00:38:04,699 --> 00:38:07,939
combination of two specifications

755
00:38:07,939 --> 00:38:10,489
the first being web authentication or

756
00:38:10,489 --> 00:38:14,390
web both N and the second is the client

757
00:38:14,390 --> 00:38:17,829
- Authenticator protocol or AC tap and

758
00:38:17,829 --> 00:38:20,299
the combination of these two

759
00:38:20,299 --> 00:38:23,929
specifications aim to address multiple

760
00:38:23,929 --> 00:38:29,420
use cases in authentication or login the

761
00:38:29,420 --> 00:38:32,029
first one is one that completely gets

762
00:38:32,029 --> 00:38:35,259
rid of passwords so it's password less

763
00:38:35,259 --> 00:38:39,619
authentication you can also do what they

764
00:38:39,619 --> 00:38:42,709
call multi-factor authentication that

765
00:38:42,709 --> 00:38:45,439
means password password less plus

766
00:38:45,439 --> 00:38:48,699
another factor such as a pin or a

767
00:38:48,699 --> 00:38:52,209
fingerprint or your face let's say

768
00:38:52,209 --> 00:38:57,439
biometric and finally the last use case

769
00:38:57,439 --> 00:39:01,759
is you can also do regular username and

770
00:39:01,759 --> 00:39:05,929
password login plus an additional second

771
00:39:05,929 --> 00:39:10,219
factor such as it's a security key that

772
00:39:10,219 --> 00:39:13,880
you possess previously that was done

773
00:39:13,880 --> 00:39:16,699
with the u2f Universal second factor

774
00:39:16,699 --> 00:39:19,939
standard and in Fido - that was renamed

775
00:39:19,939 --> 00:39:22,819
to see that one and it's completely

776
00:39:22,819 --> 00:39:26,380
backwards compatible

777
00:39:27,109 --> 00:39:32,720
with the old standard so in Fido - you

778
00:39:32,720 --> 00:39:37,369
have three main actors the first one is

779
00:39:37,369 --> 00:39:40,009
the client that's the device that you

780
00:39:40,009 --> 00:39:43,789
use it has a web browser that can be

781
00:39:43,789 --> 00:39:47,150
your laptop or your smartphone the

782
00:39:47,150 --> 00:39:49,190
second is what they call the relying

783
00:39:49,190 --> 00:39:52,700
party or the arcpy and that is the

784
00:39:52,700 --> 00:39:55,579
server that wants to authenticate you

785
00:39:55,579 --> 00:40:00,079
and finally there is a device that the

786
00:40:00,079 --> 00:40:02,420
client uses that's called the

787
00:40:02,420 --> 00:40:05,329
Authenticator and that's what the client

788
00:40:05,329 --> 00:40:11,539
uses to prove who they are so there's

789
00:40:11,539 --> 00:40:14,000
two specifications but what are their

790
00:40:14,000 --> 00:40:17,869
purpose so the first one web both n is

791
00:40:17,869 --> 00:40:21,349
actually made for web browsers so it's a

792
00:40:21,349 --> 00:40:24,980
JavaScript API but the client to

793
00:40:24,980 --> 00:40:28,309
authenticate a protocol is a way for

794
00:40:28,309 --> 00:40:31,400
clients to communicate with autant

795
00:40:31,400 --> 00:40:35,210
occator devices that's basically a way

796
00:40:35,210 --> 00:40:38,180
to have a standard for communicating

797
00:40:38,180 --> 00:40:41,210
with those devices and when the client

798
00:40:41,210 --> 00:40:43,849
communicates with an Authenticator it

799
00:40:43,849 --> 00:40:46,700
will send messages that are encoded in a

800
00:40:46,700 --> 00:40:50,089
format called C bar and one difference

801
00:40:50,089 --> 00:40:53,569
here is that the CETA protocol is

802
00:40:53,569 --> 00:40:57,529
actually not just for web browsers so it

803
00:40:57,529 --> 00:41:01,430
also works with desktop and let's say

804
00:41:01,430 --> 00:41:02,650
command line apps

805
00:41:02,650 --> 00:41:07,819
unlike web both n we mention

806
00:41:07,819 --> 00:41:11,000
authenticators there's actually two

807
00:41:11,000 --> 00:41:14,509
different types of authenticators the

808
00:41:14,509 --> 00:41:18,230
first one is platform authenticators so

809
00:41:18,230 --> 00:41:21,670
that means the Authenticator is

810
00:41:21,670 --> 00:41:24,769
permanently attached to the clients

811
00:41:24,769 --> 00:41:28,640
device so it cannot be removed for

812
00:41:28,640 --> 00:41:31,519
example your smartphone or your laptop

813
00:41:31,519 --> 00:41:36,210
is the Authenticator itself

814
00:41:36,210 --> 00:41:39,420
second type of photon Takata is roaming

815
00:41:39,420 --> 00:41:41,910
authenticator and that one is not

816
00:41:41,910 --> 00:41:44,700
permanently attached so that means you

817
00:41:44,700 --> 00:41:49,470
can plug it into multiple devices for

818
00:41:49,470 --> 00:41:53,280
example either using USB or NFC or also

819
00:41:53,280 --> 00:41:55,950
bluetooth but that's less common for

820
00:41:55,950 --> 00:42:00,240
those 20 caters there are many different

821
00:42:00,240 --> 00:42:03,630
vendors of such authenticators if you

822
00:42:03,630 --> 00:42:06,690
are into open source there is one which

823
00:42:06,690 --> 00:42:09,780
is called a Saluki and the firmware is

824
00:42:09,780 --> 00:42:12,599
open source and there is also something

825
00:42:12,599 --> 00:42:15,540
was mentioning the open SK or open

826
00:42:15,540 --> 00:42:18,619
security project that is a rust

827
00:42:18,619 --> 00:42:21,450
implementation of a file to boot on

828
00:42:21,450 --> 00:42:24,570
Decatur if you want to get one of those

829
00:42:24,570 --> 00:42:27,450
rim roaming authenticators they are

830
00:42:27,450 --> 00:42:30,540
pretty cheap and you can get one for

831
00:42:30,540 --> 00:42:34,800
roughly 20 US dollars here you have a

832
00:42:34,800 --> 00:42:38,130
few examples of those authenticators and

833
00:42:38,130 --> 00:42:39,810
you can notice that the two on the

834
00:42:39,810 --> 00:42:42,810
bottom right are actually platform with

835
00:42:42,810 --> 00:42:48,810
on Decatur's alright so how does it work

836
00:42:48,810 --> 00:42:52,740
actually well there are two flows here

837
00:42:52,740 --> 00:42:56,220
and the first one is registration the

838
00:42:56,220 --> 00:43:01,830
second one is authentication or login so

839
00:43:01,830 --> 00:43:05,580
the relying party will actually serve a

840
00:43:05,580 --> 00:43:08,400
registration page to the client and that

841
00:43:08,400 --> 00:43:13,380
page includes some JavaScript code this

842
00:43:13,380 --> 00:43:16,200
code will execute when the user clicks

843
00:43:16,200 --> 00:43:19,680
the register button and in that code

844
00:43:19,680 --> 00:43:22,800
there is a call to a function that's

845
00:43:22,800 --> 00:43:26,910
defined in the web of n JavaScript API

846
00:43:26,910 --> 00:43:30,599
and that function is implemented by the

847
00:43:30,599 --> 00:43:34,080
web browser and it will call the

848
00:43:34,080 --> 00:43:38,099
Authenticator device the Authenticator

849
00:43:38,099 --> 00:43:41,730
device will perform a few checks the

850
00:43:41,730 --> 00:43:44,550
first one is the user presence track so

851
00:43:44,550 --> 00:43:47,910
it will simply track that the user is

852
00:43:47,910 --> 00:43:49,500
physically here

853
00:43:49,500 --> 00:43:53,100
so that it cannot be faked doing like a

854
00:43:53,100 --> 00:43:57,030
remote attack and optionally it will

855
00:43:57,030 --> 00:44:01,320
also try to verify that the user is

856
00:44:01,320 --> 00:44:06,470
actually the owner of the Autons Gator

857
00:44:06,470 --> 00:44:09,780
if that works then the Authenticator

858
00:44:09,780 --> 00:44:14,040
generates a scoped pair so that means

859
00:44:14,040 --> 00:44:17,070
that key pair is generated for that

860
00:44:17,070 --> 00:44:20,970
specific website or RP and it can only

861
00:44:20,970 --> 00:44:25,350
be used with that specific RP in future

862
00:44:25,350 --> 00:44:28,640
logins and that completely eliminates

863
00:44:28,640 --> 00:44:32,880
phishing attacks the private key is

864
00:44:32,880 --> 00:44:36,900
stored on the Authenticator and the

865
00:44:36,900 --> 00:44:39,750
corresponding public key and an

866
00:44:39,750 --> 00:44:42,450
attestation signature who will see what

867
00:44:42,450 --> 00:44:47,070
that is soon is returned that goes back

868
00:44:47,070 --> 00:44:50,100
to the clients device which forwards it

869
00:44:50,100 --> 00:44:53,670
to the RP the RP can verify the

870
00:44:53,670 --> 00:44:57,360
attestation signature and stores the

871
00:44:57,360 --> 00:45:00,360
public key so that it can use it in the

872
00:45:00,360 --> 00:45:04,280
future to authenticate the user

873
00:45:04,350 --> 00:45:07,830
now in the authentication or login flow

874
00:45:07,830 --> 00:45:11,620
similarly the are a piece of sign-in

875
00:45:11,620 --> 00:45:13,960
page that also contains JavaScript code

876
00:45:13,960 --> 00:45:16,960
which executes when the user clicks the

877
00:45:16,960 --> 00:45:20,140
sign-in button and it will do a similar

878
00:45:20,140 --> 00:45:23,440
call to one of the methods in the web

879
00:45:23,440 --> 00:45:26,650
authentication API which calls the

880
00:45:26,650 --> 00:45:29,770
Authenticator does the user presence and

881
00:45:29,770 --> 00:45:33,880
user verification Jaxx if that works

882
00:45:33,880 --> 00:45:36,730
it returns not an attestation but an

883
00:45:36,730 --> 00:45:39,880
assertion signature that's produced

884
00:45:39,880 --> 00:45:42,820
using the private key that we generated

885
00:45:42,820 --> 00:45:46,600
in the registration step that is

886
00:45:46,600 --> 00:45:49,600
returned to the clients device it is

887
00:45:49,600 --> 00:45:53,100
forwarded to the RP which can verify

888
00:45:53,100 --> 00:45:56,050
that assertion signature using the

889
00:45:56,050 --> 00:45:58,300
public key that it stored during

890
00:45:58,300 --> 00:46:01,030
registration and if that works the user

891
00:46:01,030 --> 00:46:06,430
is successfully authenticated so what

892
00:46:06,430 --> 00:46:09,610
are the main responsibilities is for the

893
00:46:09,610 --> 00:46:13,660
three actors so first the Authenticator

894
00:46:13,660 --> 00:46:17,350
device it has to perform the user

895
00:46:17,350 --> 00:46:19,570
presence track to check that the user is

896
00:46:19,570 --> 00:46:22,180
physically they're usually the user does

897
00:46:22,180 --> 00:46:25,360
that by simply tapping the Authenticator

898
00:46:25,360 --> 00:46:28,890
to prove that he is physically present

899
00:46:28,890 --> 00:46:31,570
optionally if the Authenticator device

900
00:46:31,570 --> 00:46:35,110
supports it it will also perform a user

901
00:46:35,110 --> 00:46:40,480
verification track either by using a pin

902
00:46:40,480 --> 00:46:42,640
that the user must know and have set

903
00:46:42,640 --> 00:46:46,330
before or a biometric fingerprint or

904
00:46:46,330 --> 00:46:52,120
face also note that these checks are

905
00:46:52,120 --> 00:46:55,870
done client-side so on the Authenticator

906
00:46:55,870 --> 00:46:59,680
and not on the RP and we will see how

907
00:46:59,680 --> 00:47:03,610
the RP can trust those that those tracks

908
00:47:03,610 --> 00:47:06,289
were on swim

909
00:47:06,289 --> 00:47:09,349
the Authenticator generates and stores

910
00:47:09,349 --> 00:47:12,949
the credentials and it produces two

911
00:47:12,949 --> 00:47:15,650
types of signatures at the stations

912
00:47:15,650 --> 00:47:17,660
during registration and assertions

913
00:47:17,660 --> 00:47:23,839
during authentication or login now the

914
00:47:23,839 --> 00:47:28,429
client it simply acts as a proxy between

915
00:47:28,429 --> 00:47:32,150
the Authenticator and the RP but it may

916
00:47:32,150 --> 00:47:36,739
do a few other small things imagine if

917
00:47:36,739 --> 00:47:40,160
you have multiple accounts on a same

918
00:47:40,160 --> 00:47:42,919
website and your Authenticator device

919
00:47:42,919 --> 00:47:46,189
does not have a built-in screen then

920
00:47:46,189 --> 00:47:48,949
it's the responsibility of the client

921
00:47:48,949 --> 00:47:52,089
device to display an account selection

922
00:47:52,089 --> 00:47:58,459
dialog let's say and finally the RP it

923
00:47:58,459 --> 00:48:02,449
will verify both types of signatures it

924
00:48:02,449 --> 00:48:04,789
will check that the parameters passed in

925
00:48:04,789 --> 00:48:07,219
the first place match what he receives

926
00:48:07,219 --> 00:48:10,929
in the end it will store the public keys

927
00:48:10,929 --> 00:48:15,199
it generates and verifies a random

928
00:48:15,199 --> 00:48:18,349
challenge to prevent replay attacks and

929
00:48:18,349 --> 00:48:22,309
it makes a decision whether it wants to

930
00:48:22,309 --> 00:48:26,119
authenticate the user or not and we will

931
00:48:26,119 --> 00:48:30,799
see how that is made so we mentioned at

932
00:48:30,799 --> 00:48:33,469
the stations and assertions but first at

933
00:48:33,469 --> 00:48:37,909
the stations why do we need them so that

934
00:48:37,909 --> 00:48:41,869
is a way for the relying party to

935
00:48:41,869 --> 00:48:45,729
actually trust the Authenticator device

936
00:48:45,729 --> 00:48:50,900
and to be sure that the data that's

937
00:48:50,900 --> 00:48:53,239
produced or returned by the

938
00:48:53,239 --> 00:48:57,069
Authenticator really comes from that

939
00:48:57,069 --> 00:49:00,349
specific model of Autons gator and that

940
00:49:00,349 --> 00:49:04,880
it's not a fake one that is achieved

941
00:49:04,880 --> 00:49:08,390
because there is a pre-established chain

942
00:49:08,390 --> 00:49:13,459
of trust and if the RP trusts the

943
00:49:13,459 --> 00:49:17,799
Authenticator device then it can verify

944
00:49:17,799 --> 00:49:19,530
what's the set

945
00:49:19,530 --> 00:49:24,060
level of that specific device and know

946
00:49:24,060 --> 00:49:26,250
some characteristics about that device

947
00:49:26,250 --> 00:49:29,640
and actually make a decision based on

948
00:49:29,640 --> 00:49:33,330
those characteristics that also means

949
00:49:33,330 --> 00:49:35,850
that for example the user verification

950
00:49:35,850 --> 00:49:39,480
track that is done client-side if it's

951
00:49:39,480 --> 00:49:43,110
done the Authenticator will set a flag

952
00:49:43,110 --> 00:49:45,930
in the response and say that the user

953
00:49:45,930 --> 00:49:47,520
verification flag

954
00:49:47,520 --> 00:49:51,420
check was performed so if the RP trusts

955
00:49:51,420 --> 00:49:55,140
that data it means it is pretty sure

956
00:49:55,140 --> 00:49:58,710
that the check was done client side for

957
00:49:58,710 --> 00:50:04,800
real we need to know that those at the

958
00:50:04,800 --> 00:50:08,370
stations are actually optional but it is

959
00:50:08,370 --> 00:50:12,230
very recommended to implement them and

960
00:50:12,230 --> 00:50:16,290
those attestations are created as I said

961
00:50:16,290 --> 00:50:20,250
during registration and the signature is

962
00:50:20,250 --> 00:50:23,190
computed over the concatenation of two

963
00:50:23,190 --> 00:50:25,500
things the first one is the

964
00:50:25,500 --> 00:50:28,050
Authenticator data and the second is a

965
00:50:28,050 --> 00:50:30,840
hash of the client data the

966
00:50:30,840 --> 00:50:33,450
Authenticator data contains the public

967
00:50:33,450 --> 00:50:36,870
key that was generated a unique ID for

968
00:50:36,870 --> 00:50:41,940
that potentate device model and flags

969
00:50:41,940 --> 00:50:44,670
such as whether user presence tracks or

970
00:50:44,670 --> 00:50:47,550
user verification checks were performed

971
00:50:47,550 --> 00:50:50,550
and a few other things and the client

972
00:50:50,550 --> 00:50:55,140
data contains the challenge that is used

973
00:50:55,140 --> 00:50:58,740
to prevent replay attacks and the server

974
00:50:58,740 --> 00:51:02,030
origin so the domain name of the ARP

975
00:51:02,030 --> 00:51:05,730
plus a few other things these

976
00:51:05,730 --> 00:51:09,960
attestations can be of different types

977
00:51:09,960 --> 00:51:13,320
and if you choose a different

978
00:51:13,320 --> 00:51:15,810
attestation type there is a different

979
00:51:15,810 --> 00:51:20,760
trust model associated to it these types

980
00:51:20,760 --> 00:51:22,770
are the ones that are defined in the

981
00:51:22,770 --> 00:51:25,410
spec so there is basic attestation self

982
00:51:25,410 --> 00:51:29,970
attestation ATTC a ECG is elliptic curve

983
00:51:29,970 --> 00:51:32,610
based direct and animosity stations and

984
00:51:32,610 --> 00:51:33,240
you can hold

985
00:51:33,240 --> 00:51:36,630
to say none so that means you don't want

986
00:51:36,630 --> 00:51:38,970
to use at the stations at all

987
00:51:38,970 --> 00:51:41,940
we will only go through the first two

988
00:51:41,940 --> 00:51:45,290
types because the other two are actually

989
00:51:45,290 --> 00:51:48,869
more difficult to implement securely and

990
00:51:48,869 --> 00:51:55,020
less used in practice so first basic

991
00:51:55,020 --> 00:51:57,480
attestations so how does it work

992
00:51:57,480 --> 00:52:01,170
so basically an attestation privately is

993
00:52:01,170 --> 00:52:05,100
burnt in at factory and the

994
00:52:05,100 --> 00:52:07,619
corresponding public key is bundled in a

995
00:52:07,619 --> 00:52:10,350
certificate and that certificate is part

996
00:52:10,350 --> 00:52:14,660
of chain of trust of certificates and so

997
00:52:14,660 --> 00:52:18,090
that we can establish a common root of

998
00:52:18,090 --> 00:52:20,100
trust and so that the RPE

999
00:52:20,100 --> 00:52:24,119
can track those signatures that are that

1000
00:52:24,119 --> 00:52:26,310
are produced without hesitation private

1001
00:52:26,310 --> 00:52:31,110
key if we were to put the same private

1002
00:52:31,110 --> 00:52:36,690
attestation key in sorry I mean if we

1003
00:52:36,690 --> 00:52:38,640
were to put different at the private

1004
00:52:38,640 --> 00:52:41,760
attestation keys for each device that is

1005
00:52:41,760 --> 00:52:44,940
produced each Authenticator we would

1006
00:52:44,940 --> 00:52:48,450
have a privacy problem here because

1007
00:52:48,450 --> 00:52:50,670
imagine if you have multiple artists

1008
00:52:50,670 --> 00:52:54,030
that talk to each other they could

1009
00:52:54,030 --> 00:52:56,369
actually track the users because they

1010
00:52:56,369 --> 00:53:00,600
have each a different public key so to

1011
00:53:00,600 --> 00:53:04,200
avoid that it's recommended to have a

1012
00:53:04,200 --> 00:53:08,190
batch of authentic a turd devices of the

1013
00:53:08,190 --> 00:53:11,720
same model that share the same

1014
00:53:11,720 --> 00:53:14,700
attestation private key so that you have

1015
00:53:14,700 --> 00:53:19,580
a good compromise between privacy and

1016
00:53:19,580 --> 00:53:23,010
impact in case that attestation private

1017
00:53:23,010 --> 00:53:27,720
key is leaked so about that leak what

1018
00:53:27,720 --> 00:53:30,000
would happen if the the attestation

1019
00:53:30,000 --> 00:53:32,940
private key is compromised well it would

1020
00:53:32,940 --> 00:53:36,350
mean that the RP is not able anymore to

1021
00:53:36,350 --> 00:53:41,160
distinguish between a true let's say a

1022
00:53:41,160 --> 00:53:44,310
true you bg5 which is a specific model

1023
00:53:44,310 --> 00:53:46,339
of Vedanta caters

1024
00:53:46,339 --> 00:53:48,529
a fake one that I could have built

1025
00:53:48,529 --> 00:53:51,709
myself and that uses that leaked private

1026
00:53:51,709 --> 00:53:54,859
key so you cannot guarantee anymore that

1027
00:53:54,859 --> 00:53:57,739
there is no lets a backdoor that accepts

1028
00:53:57,739 --> 00:54:02,469
any pin inside of that modified device

1029
00:54:03,369 --> 00:54:06,199
the other type of attestation is self

1030
00:54:06,199 --> 00:54:10,519
attestation so that one it will produce

1031
00:54:10,519 --> 00:54:13,099
the signature using the private key

1032
00:54:13,099 --> 00:54:16,219
that's generated during registration so

1033
00:54:16,219 --> 00:54:18,349
it's a bit like self-signed certificates

1034
00:54:18,349 --> 00:54:21,049
and that means it proves nothing

1035
00:54:21,049 --> 00:54:25,039
about if the Authenticator is really the

1036
00:54:25,039 --> 00:54:30,529
model it claims to be so what's the best

1037
00:54:30,529 --> 00:54:34,609
at the station type so I know we did not

1038
00:54:34,609 --> 00:54:38,900
go through ATT CNC DAA but on paper a

1039
00:54:38,900 --> 00:54:42,920
CDA looks like the one that would

1040
00:54:42,920 --> 00:54:46,299
provide the best features and security

1041
00:54:46,299 --> 00:54:50,569
but it's really difficult I would say to

1042
00:54:50,569 --> 00:54:55,429
implement securely and in practice not

1043
00:54:55,429 --> 00:54:57,679
everyone is going to need that security

1044
00:54:57,679 --> 00:55:02,829
level so you may just see people using

1045
00:55:02,829 --> 00:55:05,929
basic attestation or not using

1046
00:55:05,929 --> 00:55:09,769
attestations at all and I think it does

1047
00:55:09,769 --> 00:55:12,859
not make sense to use the more complex

1048
00:55:12,859 --> 00:55:15,499
attestation types if your Authenticator

1049
00:55:15,499 --> 00:55:18,789
device does not have let's say basic

1050
00:55:18,789 --> 00:55:21,799
protections a guy against glitching

1051
00:55:21,799 --> 00:55:27,529
attacks so the other type of signature

1052
00:55:27,529 --> 00:55:32,539
after attestations is assertions so the

1053
00:55:32,539 --> 00:55:34,670
assertion signature is the one that's

1054
00:55:34,670 --> 00:55:37,160
produced during authentication or

1055
00:55:37,160 --> 00:55:42,319
sign-in and unlike the attestation it is

1056
00:55:42,319 --> 00:55:45,829
produced using the private key that is

1057
00:55:45,829 --> 00:55:50,809
generated during registration and the RP

1058
00:55:50,809 --> 00:55:53,289
verifies it using the corresponding

1059
00:55:53,289 --> 00:55:57,439
public key it's also computed over the

1060
00:55:57,439 --> 00:56:00,049
same data the Authenticator data and

1061
00:56:00,049 --> 00:56:02,630
- of the client data but one difference

1062
00:56:02,630 --> 00:56:05,619
here is that it is possible to use

1063
00:56:05,619 --> 00:56:10,119
different public key algorithms with

1064
00:56:10,119 --> 00:56:16,339
assertions so a quick overview of the

1065
00:56:16,339 --> 00:56:21,410
api's so first we're both n there are

1066
00:56:21,410 --> 00:56:25,489
two main methods that you should use

1067
00:56:25,489 --> 00:56:28,279
here so there is the create method and

1068
00:56:28,279 --> 00:56:31,549
the get method you can use the create

1069
00:56:31,549 --> 00:56:36,079
method in your JavaScript code if you

1070
00:56:36,079 --> 00:56:39,259
want to request the Authenticator to

1071
00:56:39,259 --> 00:56:42,400
create a new key pair for registration

1072
00:56:42,400 --> 00:56:46,029
when that method is called it will

1073
00:56:46,029 --> 00:56:49,249
behind-the-scenes make a call to the

1074
00:56:49,249 --> 00:56:52,279
Authenticator and request it to produce

1075
00:56:52,279 --> 00:56:55,579
that repair it will return the public

1076
00:56:55,579 --> 00:56:59,989
key and the attestation the other method

1077
00:56:59,989 --> 00:57:04,369
the get method is the one you use if you

1078
00:57:04,369 --> 00:57:08,660
want to get an assertion signature that

1079
00:57:08,660 --> 00:57:11,499
will be produced by the Authenticator

1080
00:57:11,499 --> 00:57:15,349
using the private key that was generated

1081
00:57:15,349 --> 00:57:20,019
before with the create method we both in

1082
00:57:20,019 --> 00:57:23,269
supports a few extensions it just

1083
00:57:23,269 --> 00:57:25,089
something that's good to know

1084
00:57:25,089 --> 00:57:28,549
one use case where you could need

1085
00:57:28,549 --> 00:57:30,469
extensions is let's say you are

1086
00:57:30,469 --> 00:57:35,809
implementing the RP and you want to make

1087
00:57:35,809 --> 00:57:39,650
your decision based on how the user was

1088
00:57:39,650 --> 00:57:42,049
verified so you want to know which

1089
00:57:42,049 --> 00:57:45,589
method the butantã cater used to verify

1090
00:57:45,589 --> 00:57:48,469
the user like what did he ask the user

1091
00:57:48,469 --> 00:57:51,739
to input a pin or did he check his

1092
00:57:51,739 --> 00:57:54,859
fingerprint did he check his face and so

1093
00:57:54,859 --> 00:58:00,019
on on the other side so you have the

1094
00:58:00,019 --> 00:58:03,140
seat up to specification and it also has

1095
00:58:03,140 --> 00:58:06,380
two two main methods that are

1096
00:58:06,380 --> 00:58:08,449
corresponding to the web host and

1097
00:58:08,449 --> 00:58:11,719
methods so when you call web othon

1098
00:58:11,719 --> 00:58:13,940
creates it will call

1099
00:58:13,940 --> 00:58:16,700
make credential on the Authenticator and

1100
00:58:16,700 --> 00:58:20,030
when you call web with an get it will

1101
00:58:20,030 --> 00:58:24,280
call get assertion on the Authenticator

1102
00:58:24,280 --> 00:58:27,049
see tap also offers a few other

1103
00:58:27,049 --> 00:58:30,410
operations you can get some info about

1104
00:58:30,410 --> 00:58:33,200
the Authenticator that's connected you

1105
00:58:33,200 --> 00:58:35,539
can manage the pin you can completely

1106
00:58:35,539 --> 00:58:38,329
reset the device removing all the keys

1107
00:58:38,329 --> 00:58:42,829
that were generated NC tap currently is

1108
00:58:42,829 --> 00:58:47,059
in seat app 2.0 that's the latest stable

1109
00:58:47,059 --> 00:58:49,539
version that there is a draft

1110
00:58:49,539 --> 00:58:53,510
certificate if ocation that is soon

1111
00:58:53,510 --> 00:58:56,240
going into stable that is going to add

1112
00:58:56,240 --> 00:58:59,960
two more commands the first is a way for

1113
00:58:59,960 --> 00:59:03,530
the user to manage the let's say the

1114
00:59:03,530 --> 00:59:05,059
fingerprints if you want to add a

1115
00:59:05,059 --> 00:59:07,789
fingerprint or remove one from the the

1116
00:59:07,789 --> 00:59:11,240
Authenticator and another command is for

1117
00:59:11,240 --> 00:59:13,400
managing the credentials so you could

1118
00:59:13,400 --> 00:59:16,730
say I want to know how many keys were

1119
00:59:16,730 --> 00:59:19,190
generated on my device or I want to

1120
00:59:19,190 --> 00:59:24,230
remove a keeper from the device there is

1121
00:59:24,230 --> 00:59:27,230
also a range of commands that are

1122
00:59:27,230 --> 00:59:29,660
reserved for vendors so that they can

1123
00:59:29,660 --> 00:59:34,160
implement custom commands and like web

1124
00:59:34,160 --> 00:59:37,069
events it app also offers extensions but

1125
00:59:37,069 --> 00:59:39,849
at the moment there is only one that is

1126
00:59:39,849 --> 00:59:42,890
defined in the spec eh Mac secret

1127
00:59:42,890 --> 00:59:46,599
extension one way you could use that is

1128
00:59:46,599 --> 00:59:49,940
you could implement a password manager

1129
00:59:49,940 --> 00:59:52,520
that's something I've done and that

1130
00:59:52,520 --> 00:59:55,640
extension allows you to derive a secret

1131
00:59:55,640 --> 00:59:59,510
from a private key that you generated on

1132
00:59:59,510 --> 01:00:01,700
your Authenticator so you could use that

1133
01:00:01,700 --> 01:00:05,750
secret to symmetrically encrypt or

1134
01:00:05,750 --> 01:00:09,309
decrypt your secrets

1135
01:00:10,920 --> 01:00:14,910
another thing that is used in Fido -

1136
01:00:14,910 --> 01:00:18,309
that's the Fido metadata service or the

1137
01:00:18,309 --> 01:00:23,940
MDS so what is it it's a public database

1138
01:00:23,940 --> 01:00:27,670
where vendors can publish information

1139
01:00:27,670 --> 01:00:31,660
about their authentic ATAR product such

1140
01:00:31,660 --> 01:00:35,680
as some characteristics about it and

1141
01:00:35,680 --> 01:00:39,099
like the layer that defines how secure

1142
01:00:39,099 --> 01:00:43,380
it is or some features that it supports

1143
01:00:43,380 --> 01:00:48,339
the RP is should regularly download all

1144
01:00:48,339 --> 01:00:51,670
of that info from the MDS so that they

1145
01:00:51,670 --> 01:00:55,000
can build a local list of

1146
01:00:55,000 --> 01:00:57,579
characteristics about those existing

1147
01:00:57,579 --> 01:01:01,089
products and so that they can take a

1148
01:01:01,089 --> 01:01:03,970
decision when someone logs in with such

1149
01:01:03,970 --> 01:01:07,059
a device otherwise then as an RP you

1150
01:01:07,059 --> 01:01:08,950
don't know anything about that device

1151
01:01:08,950 --> 01:01:13,359
you don't know its characteristics also

1152
01:01:13,359 --> 01:01:16,089
another thing that you can know from the

1153
01:01:16,089 --> 01:01:18,880
end yes is for example we talked about

1154
01:01:18,880 --> 01:01:20,890
basic at the stations and there are

1155
01:01:20,890 --> 01:01:23,980
those attestation private keys if that

1156
01:01:23,980 --> 01:01:25,510
key is compromised

1157
01:01:25,510 --> 01:01:28,750
then the vendor would publish a status

1158
01:01:28,750 --> 01:01:32,349
update to the MDS to let users know that

1159
01:01:32,349 --> 01:01:35,260
that specific model has been compromised

1160
01:01:35,260 --> 01:01:39,579
and then RPS can take a decision if such

1161
01:01:39,579 --> 01:01:43,809
a device is used all of that data in the

1162
01:01:43,809 --> 01:01:46,990
end yes cannot directly be accessed so

1163
01:01:46,990 --> 01:01:49,089
you must request an access token which

1164
01:01:49,089 --> 01:01:51,940
needs to be renewed yearly to download

1165
01:01:51,940 --> 01:01:57,490
that data what exactly can you get from

1166
01:01:57,490 --> 01:01:59,470
there so if you download that data you

1167
01:01:59,470 --> 01:02:03,130
get a list of those devices you get the

1168
01:02:03,130 --> 01:02:05,440
unique ID of the device you get the list

1169
01:02:05,440 --> 01:02:08,470
of status reports like was it is it fine

1170
01:02:08,470 --> 01:02:10,900
was the attestation private key

1171
01:02:10,900 --> 01:02:13,960
compromised and you get a link to

1172
01:02:13,960 --> 01:02:16,359
download more info about that specific

1173
01:02:16,359 --> 01:02:18,760
device when you download that you will

1174
01:02:18,760 --> 01:02:21,160
get the name of the device a short

1175
01:02:21,160 --> 01:02:22,930
description just some text

1176
01:02:22,930 --> 01:02:26,079
and you will get the attestation root

1177
01:02:26,079 --> 01:02:29,559
certificates so that's the one of the

1178
01:02:29,559 --> 01:02:31,960
important parts I would say so this is

1179
01:02:31,960 --> 01:02:36,220
how the RP can establish that route of

1180
01:02:36,220 --> 01:02:39,750
crust that we talked about before you

1181
01:02:39,750 --> 01:02:44,920
can also know like what methods does the

1182
01:02:44,920 --> 01:02:47,319
Authenticator support for verifying the

1183
01:02:47,319 --> 01:02:49,510
user like does it have a fingerprint

1184
01:02:49,510 --> 01:02:53,020
reader on it does it support pins does

1185
01:02:53,020 --> 01:02:55,210
it recognize faces I don't know does it

1186
01:02:55,210 --> 01:03:00,099
have a camera it will also tell you like

1187
01:03:00,099 --> 01:03:03,460
how the keys are stored on the

1188
01:03:03,460 --> 01:03:04,390
Authenticator

1189
01:03:04,390 --> 01:03:07,480
are they're stored on TPM for example

1190
01:03:07,480 --> 01:03:11,640
you're also gonna get some info the

1191
01:03:11,640 --> 01:03:15,040
overall cryptographic strength of the

1192
01:03:15,040 --> 01:03:18,280
device so that's just a number that kind

1193
01:03:18,280 --> 01:03:21,160
of summarizes how secure the device is

1194
01:03:21,160 --> 01:03:24,730
you should not use just that number but

1195
01:03:24,730 --> 01:03:27,430
you should definitely look at the other

1196
01:03:27,430 --> 01:03:29,920
characteristics as well and you also get

1197
01:03:29,920 --> 01:03:33,190
a list of the supported public key

1198
01:03:33,190 --> 01:03:36,280
algorithms supported by that device plus

1199
01:03:36,280 --> 01:03:39,309
a few other characteristics that you can

1200
01:03:39,309 --> 01:03:43,270
look up in this bag so what about

1201
01:03:43,270 --> 01:03:46,000
security measures that are implemented

1202
01:03:46,000 --> 01:03:52,390
in 502 there is one thing in C in the C

1203
01:03:52,390 --> 01:03:55,359
type specification actually the

1204
01:03:55,359 --> 01:03:57,730
authenticators should implement a

1205
01:03:57,730 --> 01:04:01,240
counter that increases every time the

1206
01:04:01,240 --> 01:04:04,839
user wants to get an assertion signature

1207
01:04:04,839 --> 01:04:07,089
so every time they want to log in and

1208
01:04:07,089 --> 01:04:11,740
that counter is sent to the RP the RP

1209
01:04:11,740 --> 01:04:17,109
must save that count value and if an

1210
01:04:17,109 --> 01:04:20,010
attacker let's say clones the

1211
01:04:20,010 --> 01:04:23,650
Authenticator device then those two

1212
01:04:23,650 --> 01:04:27,099
counters will start to diverge and at

1213
01:04:27,099 --> 01:04:29,380
some point if they are used for login

1214
01:04:29,380 --> 01:04:33,730
the RP will see that the counter is not

1215
01:04:33,730 --> 01:04:37,569
always increasing so if that happens the

1216
01:04:37,569 --> 01:04:39,760
RP knows that something wrong is going

1217
01:04:39,760 --> 01:04:42,970
on and it may take a decision like just

1218
01:04:42,970 --> 01:04:46,660
notifying the user or not accepting

1219
01:04:46,660 --> 01:04:51,160
login there is also a maximum number of

1220
01:04:51,160 --> 01:04:53,619
failed pin attempts that you can do if

1221
01:04:53,619 --> 01:04:57,700
you use the pin if you fail the pin too

1222
01:04:57,700 --> 01:05:00,760
many times the maximum is 8 times then

1223
01:05:00,760 --> 01:05:03,819
the Authenticator is completely locked

1224
01:05:03,819 --> 01:05:06,670
and you must reset it and that means you

1225
01:05:06,670 --> 01:05:10,270
lose all the keys that were generated on

1226
01:05:10,270 --> 01:05:14,640
the device to prevent an attacker from

1227
01:05:14,640 --> 01:05:18,660
making malicious failed pin attempts

1228
01:05:18,660 --> 01:05:23,170
there is a protection here and if the

1229
01:05:23,170 --> 01:05:26,170
pin is failed three times then you must

1230
01:05:26,170 --> 01:05:29,890
remove the device like disconnected and

1231
01:05:29,890 --> 01:05:33,130
replug it so that you prove that you are

1232
01:05:33,130 --> 01:05:36,030
physically present there

1233
01:05:36,030 --> 01:05:39,400
the keys that are generated are scoped

1234
01:05:39,400 --> 01:05:43,000
to an RP so that means if you register

1235
01:05:43,000 --> 01:05:46,930
you generate a keeper it's only valid

1236
01:05:46,930 --> 01:05:50,230
for that site it cannot be used on other

1237
01:05:50,230 --> 01:05:53,440
sites and that completely removes all

1238
01:05:53,440 --> 01:05:57,130
phishing attacks and finally you also

1239
01:05:57,130 --> 01:06:02,069
get physical theft protection if you use

1240
01:06:02,069 --> 01:06:04,630
multi-factor authentication so if you

1241
01:06:04,630 --> 01:06:08,380
also set a pin or a biometric on your

1242
01:06:08,380 --> 01:06:11,220
Authenticator

1243
01:06:12,270 --> 01:06:15,309
another thing that is possible to

1244
01:06:15,309 --> 01:06:18,250
integrate with Fido 2 is token binding

1245
01:06:18,250 --> 01:06:20,740
so if you've never heard of token

1246
01:06:20,740 --> 01:06:23,609
binding that's defined in an RFC and

1247
01:06:23,609 --> 01:06:27,010
it's a way to prevent session hijacking

1248
01:06:27,010 --> 01:06:30,099
so imagine you have a secret such as

1249
01:06:30,099 --> 01:06:35,220
your session cookie or not knowing token

1250
01:06:35,220 --> 01:06:39,609
you can bind it to a specific TLS

1251
01:06:39,609 --> 01:06:42,780
connection so that even if an attacker

1252
01:06:42,780 --> 01:06:44,710
steals your

1253
01:06:44,710 --> 01:06:47,650
- on cookie it will not be able to use

1254
01:06:47,650 --> 01:06:50,349
it because he will connect with another

1255
01:06:50,349 --> 01:06:53,050
TLS connection and the server will see

1256
01:06:53,050 --> 01:06:55,570
that something wrong is going on in

1257
01:06:55,570 --> 01:06:59,109
practice that's not used because web

1258
01:06:59,109 --> 01:07:01,510
browsers do not support it

1259
01:07:01,510 --> 01:07:04,480
edge use to support it and chrome as

1260
01:07:04,480 --> 01:07:06,730
well but in the latest version of edge

1261
01:07:06,730 --> 01:07:09,490
they moved to the chrome engine and

1262
01:07:09,490 --> 01:07:14,080
chrome also dropped support so it's very

1263
01:07:14,080 --> 01:07:16,750
limited at this point if you are going

1264
01:07:16,750 --> 01:07:19,869
to use it you just need to know that the

1265
01:07:19,869 --> 01:07:22,119
token binding ID can be specified in the

1266
01:07:22,119 --> 01:07:28,750
client data in Fido - so how is vital to

1267
01:07:28,750 --> 01:07:32,020
being adapted at the moment for the

1268
01:07:32,020 --> 01:07:34,890
password less use case there is only

1269
01:07:34,890 --> 01:07:37,240
microsoft.com accounts that I know of

1270
01:07:37,240 --> 01:07:39,460
that implement Fido - password less

1271
01:07:39,460 --> 01:07:43,480
logon and you must set your user agent

1272
01:07:43,480 --> 01:07:46,480
to ads on Windows for them to even

1273
01:07:46,480 --> 01:07:49,540
display you the option to sign in using

1274
01:07:49,540 --> 01:07:51,220
Fido to password less

1275
01:07:51,220 --> 01:07:54,490
so hopefully you implement it and your

1276
01:07:54,490 --> 01:07:58,599
site enlarges this list and if you are

1277
01:07:58,599 --> 01:08:01,240
going to implement Fido - password less

1278
01:08:01,240 --> 01:08:04,660
on your website please let your users

1279
01:08:04,660 --> 01:08:07,420
know that you support it by using one of

1280
01:08:07,420 --> 01:08:10,450
those I mark logos and putting them on

1281
01:08:10,450 --> 01:08:12,220
the login form

1282
01:08:12,220 --> 01:08:15,340
for the Twitter use case there's many

1283
01:08:15,340 --> 01:08:17,979
sites that support it and previously

1284
01:08:17,979 --> 01:08:21,488
with u2f many web sites implemented it

1285
01:08:21,488 --> 01:08:25,660
and it's pretty easy to move from u2f to

1286
01:08:25,660 --> 01:08:28,120
web both n because it's backwards

1287
01:08:28,120 --> 01:08:32,410
compatible in the second factor use case

1288
01:08:32,410 --> 01:08:37,930
for C tab only I know of OpenSSH that

1289
01:08:37,930 --> 01:08:42,069
added in version 8.2 a way for you to

1290
01:08:42,069 --> 01:08:46,689
generate an SSH that is stored on Fido

1291
01:08:46,689 --> 01:08:52,180
to compatible device webathon is

1292
01:08:52,180 --> 01:08:55,109
supported on all major web browsers on

1293
01:08:55,109 --> 01:09:00,069
desktop and mobile and c tab 2 can be

1294
01:09:00,069 --> 01:09:02,979
used using the regular transport

1295
01:09:02,979 --> 01:09:07,299
channels USB NFC lightning if you are if

1296
01:09:07,299 --> 01:09:10,210
you have an iPhone you will need an

1297
01:09:10,210 --> 01:09:12,219
iPhone 7 or later if you are going to

1298
01:09:12,219 --> 01:09:16,960
use NFC and on desktop USB is your best

1299
01:09:16,960 --> 01:09:22,210
bet a few examples of platform

1300
01:09:22,210 --> 01:09:24,460
authenticators that exist already today

1301
01:09:24,460 --> 01:09:26,680
so if you have a macbook let's say with

1302
01:09:26,680 --> 01:09:29,350
a touch bar and that has touch ID that

1303
01:09:29,350 --> 01:09:32,020
is a platform Fido to authenticate

1304
01:09:32,020 --> 01:09:34,299
that's all you need if you have an

1305
01:09:34,299 --> 01:09:37,299
Android 7 plus smartphone it is a Fido

1306
01:09:37,299 --> 01:09:39,580
to Authenticator and if you have a

1307
01:09:39,580 --> 01:09:41,620
Windows machine with Windows hello

1308
01:09:41,620 --> 01:09:44,259
configured that is a photo to platform

1309
01:09:44,259 --> 01:09:49,380
Authenticator as well soon in iOS 14 and

1310
01:09:49,380 --> 01:09:53,170
Mac OS picture that were recently

1311
01:09:53,170 --> 01:09:56,980
announced they will also add that

1312
01:09:56,980 --> 01:10:00,070
feature and those any devices running

1313
01:10:00,070 --> 01:10:03,100
those OSS will be if I do to platform

1314
01:10:03,100 --> 01:10:07,480
authenticators as well if you're going

1315
01:10:07,480 --> 01:10:09,580
to implement it there are many existing

1316
01:10:09,580 --> 01:10:12,520
libraries both for client-side so if you

1317
01:10:12,520 --> 01:10:14,140
just want to do C tap to the

1318
01:10:14,140 --> 01:10:16,540
Authenticator or server side if you want

1319
01:10:16,540 --> 01:10:19,570
to implement an RP you should definitely

1320
01:10:19,570 --> 01:10:22,989
pull entries from the NDS to build that

1321
01:10:22,989 --> 01:10:24,760
list of characteristics

1322
01:10:24,760 --> 01:10:28,270
and build your trust store and do not

1323
01:10:28,270 --> 01:10:30,850
blacklist vendors so it's not a good

1324
01:10:30,850 --> 01:10:33,610
idea to say oh you're not using a

1325
01:10:33,610 --> 01:10:36,010
Yubikey well I don't want to accept that

1326
01:10:36,010 --> 01:10:38,860
login you should really look at the

1327
01:10:38,860 --> 01:10:41,440
actual characteristics so is the

1328
01:10:41,440 --> 01:10:44,170
password problem solved well you don't

1329
01:10:44,170 --> 01:10:46,840
need to truly remand or change passwords

1330
01:10:46,840 --> 01:10:49,720
anymore the protocol

1331
01:10:49,720 --> 01:10:52,180
prevents password reuse because it

1332
01:10:52,180 --> 01:10:53,950
generates a new key pair for every

1333
01:10:53,950 --> 01:10:55,780
account and every website it's

1334
01:10:55,780 --> 01:10:58,360
completely unavailable to fishing and

1335
01:10:58,360 --> 01:11:00,670
it's a strong protection against network

1336
01:11:00,670 --> 01:11:02,950
attacks so it makes a pretty strong case

1337
01:11:02,950 --> 01:11:05,800
here I believe if you take aways so you

1338
01:11:05,800 --> 01:11:08,140
should always register a backup with on

1339
01:11:08,140 --> 01:11:11,470
Decatur so that if you lose it it gets

1340
01:11:11,470 --> 01:11:14,200
stolen it breaks you are not locked out

1341
01:11:14,200 --> 01:11:15,700
of your account you still have another

1342
01:11:15,700 --> 01:11:18,910
one to log in and you can revoke the the

1343
01:11:18,910 --> 01:11:21,190
other Authenticator you should also make

1344
01:11:21,190 --> 01:11:23,890
sure to set a pin or a biometric or

1345
01:11:23,890 --> 01:11:25,960
you're on your own together to prevent

1346
01:11:25,960 --> 01:11:30,460
theft attacks you could tell me that

1347
01:11:30,460 --> 01:11:32,260
you're just replacing the password with

1348
01:11:32,260 --> 01:11:34,480
a pin but that is not true because the

1349
01:11:34,480 --> 01:11:37,240
password is sent over the network and is

1350
01:11:37,240 --> 01:11:39,400
vulnerable to all network attacks and

1351
01:11:39,400 --> 01:11:41,470
the pin is local it doesn't need to be

1352
01:11:41,470 --> 01:11:43,870
changed as often it cannot be a brute

1353
01:11:43,870 --> 01:11:47,020
force if you still don't like pins you

1354
01:11:47,020 --> 01:11:49,990
can still use a biometric instant so if

1355
01:11:49,990 --> 01:11:52,480
I wrote who is still young set up two

1356
01:11:52,480 --> 01:11:54,940
point one is on the way there is few

1357
01:11:54,940 --> 01:11:56,830
websites that implement the password

1358
01:11:56,830 --> 01:11:58,870
last scenario at the moment so please

1359
01:11:58,870 --> 01:12:01,420
add support for it and use attestations

1360
01:12:01,420 --> 01:12:04,420
if possible if you would like to learn

1361
01:12:04,420 --> 01:12:06,670
more about this I wrote a blog post

1362
01:12:06,670 --> 01:12:09,160
series on the Patels key security

1363
01:12:09,160 --> 01:12:12,010
research blog there is a live demo on

1364
01:12:12,010 --> 01:12:14,380
web Othon dot io that you can use to

1365
01:12:14,380 --> 01:12:17,080
test let's say with your Android phone

1366
01:12:17,080 --> 01:12:20,020
that's in your pocket if you just want a

1367
01:12:20,020 --> 01:12:22,360
quick intro to Fido to you can go to

1368
01:12:22,360 --> 01:12:25,150
login with Fido to calm and it will

1369
01:12:25,150 --> 01:12:28,300
explain the basics video well for more

1370
01:12:28,300 --> 01:12:30,370
info doors to last two links and

1371
01:12:30,370 --> 01:12:32,770
otherwise you can still refer to the

1372
01:12:32,770 --> 01:12:35,670
official web of N and C tab

1373
01:12:35,670 --> 01:12:38,920
specifications thank you and

1374
01:12:38,920 --> 01:12:43,570
the floor is open for questions thank

1375
01:12:43,570 --> 01:12:48,460
you very much we have got time for one

1376
01:12:48,460 --> 01:12:51,460
or two question and effectively we have

1377
01:12:51,460 --> 01:12:55,449
two question in the queue a Q&A so just

1378
01:12:55,449 --> 01:13:08,020
read it and if you can answer yes okay

1379
01:13:08,020 --> 01:13:08,590
so the

1380
01:13:08,590 --> 01:13:11,710
question is big tech companies such as

1381
01:13:11,710 --> 01:13:15,909
Google Facebook and so on are pushing

1382
01:13:15,909 --> 01:13:18,510
this specification do you think that

1383
01:13:18,510 --> 01:13:21,760
it's going to get traction from the web

1384
01:13:21,760 --> 01:13:24,400
mainstream websites public and private

1385
01:13:24,400 --> 01:13:30,599
sector so I would say I hope so

1386
01:13:30,599 --> 01:13:33,940
Microsoft already implemented it for

1387
01:13:33,940 --> 01:13:37,150
microsoft.com accounts and it's still

1388
01:13:37,150 --> 01:13:39,730
young but I think starting from this

1389
01:13:39,730 --> 01:13:43,270
year we've seen support for more and

1390
01:13:43,270 --> 01:13:46,840
more platforms and I believe by the end

1391
01:13:46,840 --> 01:13:49,420
of the year it's just going to work out

1392
01:13:49,420 --> 01:13:52,960
of the box on kind of all mainstream

1393
01:13:52,960 --> 01:13:57,520
devices so we just need more developers

1394
01:13:57,520 --> 01:14:00,969
to implement it basically so support is

1395
01:14:00,969 --> 01:14:04,540
here so it's we just need to see whether

1396
01:14:04,540 --> 01:14:08,199
developers want to support it or not or

1397
01:14:08,199 --> 01:14:10,989
if they think the users will benefit

1398
01:14:10,989 --> 01:14:12,869
from it

1399
01:14:12,869 --> 01:14:18,790
there is another question okay so the

1400
01:14:18,790 --> 01:14:21,610
question is does OpenSSH really support

1401
01:14:21,610 --> 01:14:24,699
Fido - I thought it only supported Fido

1402
01:14:24,699 --> 01:14:30,070
you to F not Fido - so yes but it only

1403
01:14:30,070 --> 01:14:33,580
supports the seat up - part so basically

1404
01:14:33,580 --> 01:14:37,030
it will allow you to generate an SSH key

1405
01:14:37,030 --> 01:14:42,219
and that SSH key is actually implemented

1406
01:14:42,219 --> 01:14:45,940
as private that's generated on the Fido

1407
01:14:45,940 --> 01:14:48,489
- Authenticator and when you want to log

1408
01:14:48,489 --> 01:14:52,540
in you will need plug in your Fido to

1409
01:14:52,540 --> 01:14:55,330
authenticate or use platform

1410
01:14:55,330 --> 01:14:58,000
Authenticator if you have one to log in

1411
01:14:58,000 --> 01:15:01,360
using that SSH key so yes it does

1412
01:15:01,360 --> 01:15:03,130
support the sita

1413
01:15:03,130 --> 01:15:09,460
- authenticators perfect and we have got

1414
01:15:09,460 --> 01:15:14,860
a last question so just mark them answer

1415
01:15:14,860 --> 01:15:17,590
life please a hernia so they will

1416
01:15:17,590 --> 01:15:19,290
disappear

1417
01:15:19,290 --> 01:15:22,989
thank you so the last question is what

1418
01:15:22,989 --> 01:15:26,469
our main evolutions between C tap one

1419
01:15:26,469 --> 01:15:32,949
and C tap two point one so basically C

1420
01:15:32,949 --> 01:15:38,949
tap one is just you two have renamed so

1421
01:15:38,949 --> 01:15:42,400
in step two you have a new format that

1422
01:15:42,400 --> 01:15:45,340
is used so the messages are encoded in C

1423
01:15:45,340 --> 01:15:48,610
bar but previously it was another binary

1424
01:15:48,610 --> 01:15:52,420
format that was used in u2f and in C tab

1425
01:15:52,420 --> 01:15:55,770
2.0 and step 2.1 you have more

1426
01:15:55,770 --> 01:15:59,739
operations that can be performed so the

1427
01:15:59,739 --> 01:16:04,949
spec is quite different actually

1428
01:16:05,730 --> 01:16:11,170
perfect perfect on time NASA so the goal

1429
01:16:11,170 --> 01:16:13,210
is which thank you very much for this

1430
01:16:13,210 --> 01:16:17,800
talk thank you and now we are going to

1431
01:16:17,800 --> 01:16:22,420
switch to our second talk in this secure

1432
01:16:22,420 --> 01:16:27,670
identity track we are going to welcome

1433
01:16:27,670 --> 01:16:31,210
Clemmie not for the concert first we

1434
01:16:31,210 --> 01:16:33,540
have got a technical talk about

1435
01:16:33,540 --> 01:16:38,050
understanding management of password

1436
01:16:38,050 --> 01:16:43,900
policy and open LDAP so Clemence the

1437
01:16:43,900 --> 01:16:46,360
stage is yours thank you very much for

1438
01:16:46,360 --> 01:16:46,900
coming

1439
01:16:46,900 --> 01:16:51,280
yes thank you hope you her me you Amy

1440
01:16:51,280 --> 01:16:55,119
and you see the slide it's aruki yeah

1441
01:16:55,119 --> 01:16:59,730
the thing is the great so we just had a

1442
01:16:59,730 --> 01:17:03,639
very nice talk about why our passwords

1443
01:17:03,639 --> 01:17:07,090
are a mess thank you

1444
01:17:07,090 --> 01:17:11,159
and so my talk is about passwords and I

1445
01:17:11,159 --> 01:17:14,199
really totally agree with the previous

1446
01:17:14,199 --> 01:17:19,659
talk but 9 will try to give some app to

1447
01:17:19,659 --> 01:17:23,500
two people that still needs passwords

1448
01:17:23,500 --> 01:17:26,710
and still need to manage them and we

1449
01:17:26,710 --> 01:17:30,130
will focus on password policy in open

1450
01:17:30,130 --> 01:17:31,180
and EAP

1451
01:17:31,180 --> 01:17:36,210
between a banana and JP which is a

1452
01:17:36,210 --> 01:17:40,360
open-source LDAP directory you can do

1453
01:17:40,360 --> 01:17:44,740
something to have a better control on

1454
01:17:44,740 --> 01:17:50,310
user passwords and so a quick review and

1455
01:17:50,310 --> 01:17:55,990
when I I work for a French company which

1456
01:17:55,990 --> 01:18:00,700
is called vortex and when I walk I'm

1457
01:18:00,700 --> 01:18:03,040
doing free software so you will you can

1458
01:18:03,040 --> 01:18:07,120
maybe see the list here you have lemon

1459
01:18:07,120 --> 01:18:10,300
and up and up to box and the app

1460
01:18:10,300 --> 01:18:12,520
synchronization connector version I am

1461
01:18:12,520 --> 01:18:16,690
and the very sweet so mostly identity

1462
01:18:16,690 --> 01:18:20,740
management software's and when I don't

1463
01:18:20,740 --> 01:18:24,430
walk I'm doing music so thanks

1464
01:18:24,430 --> 01:18:25,270
Christopher

1465
01:18:25,270 --> 01:18:28,480
introducing the concert tomorrow hope

1466
01:18:28,480 --> 01:18:31,990
some of you will be there for this I'm

1467
01:18:31,990 --> 01:18:35,440
also playing in a new show on YouTube

1468
01:18:35,440 --> 01:18:40,480
and I'm doing theater improvisation so

1469
01:18:40,480 --> 01:18:44,440
let's be back to our subject which is

1470
01:18:44,440 --> 01:18:47,070
the password policy before talking about

1471
01:18:47,070 --> 01:18:50,140
implementation of the policy inside open

1472
01:18:50,140 --> 01:18:53,470
and app I will talk about the policy

1473
01:18:53,470 --> 01:18:57,250
inside about the standard of pass

1474
01:18:57,250 --> 01:19:01,450
operating system that so it is a in an

1475
01:19:01,450 --> 01:19:06,580
ETF draft very old because the first

1476
01:19:06,580 --> 01:19:09,430
version was reached the last millennium

1477
01:19:09,430 --> 01:19:13,660
and the last version is more than 10

1478
01:19:13,660 --> 01:19:17,380
years ago and still tagged as a draft

1479
01:19:17,380 --> 01:19:22,510
which means that it is not an official

1480
01:19:22,510 --> 01:19:28,360
standard of ETF but even if it is even

1481
01:19:28,360 --> 01:19:34,390
if it is expired this this draft is used

1482
01:19:34,390 --> 01:19:36,550
in many and app directories so we

1483
01:19:36,550 --> 01:19:40,170
consider it as a standard

1484
01:19:40,170 --> 01:19:43,080
these specifications cover many points

1485
01:19:43,080 --> 01:19:47,670
the first is how you design the control

1486
01:19:47,670 --> 01:19:50,310
with Western westerns well she's movie

1487
01:19:50,310 --> 01:19:54,810
she's just actor and for people

1488
01:19:54,810 --> 01:19:57,800
designing LDAP directory is a stone that

1489
01:19:57,800 --> 01:20:02,550
also defined the edge of Chima to use to

1490
01:20:02,550 --> 01:20:05,880
store pass for Policy configurations it

1491
01:20:05,880 --> 01:20:08,370
explains what are the operational

1492
01:20:08,370 --> 01:20:11,610
attributes that needs to be used for

1493
01:20:11,610 --> 01:20:14,790
password policy and what are the steps

1494
01:20:14,790 --> 01:20:20,240
to pass to process to password control

1495
01:20:20,240 --> 01:20:24,660
so you see there that we have two main

1496
01:20:24,660 --> 01:20:28,590
operation in which the path of procedure

1497
01:20:28,590 --> 01:20:30,570
is involved the first one is the

1498
01:20:30,570 --> 01:20:33,990
authentication so we will act on

1499
01:20:33,990 --> 01:20:36,300
password when user submitted to

1500
01:20:36,300 --> 01:20:39,870
authenticate on the second operation is

1501
01:20:39,870 --> 01:20:42,060
a platform modification so we will act

1502
01:20:42,060 --> 01:20:45,840
on the password while the user wants to

1503
01:20:45,840 --> 01:20:51,720
change it so a little schema you can see

1504
01:20:51,720 --> 01:20:54,360
there that we have a client and a server

1505
01:20:54,360 --> 01:20:58,170
so the client is not the end user itself

1506
01:20:58,170 --> 01:21:01,980
of course it is an end up client the

1507
01:21:01,980 --> 01:21:04,770
LDAP client is doing an end up operation

1508
01:21:04,770 --> 01:21:08,160
so as we just say this operation can be

1509
01:21:08,160 --> 01:21:10,650
an authentication operation so I'll that

1510
01:21:10,650 --> 01:21:15,450
bind or can be an modification and that

1511
01:21:15,450 --> 01:21:19,200
modifying and you do the operation as a

1512
01:21:19,200 --> 01:21:22,410
client and you said control an

1513
01:21:22,410 --> 01:21:25,140
additional field which is called an

1514
01:21:25,140 --> 01:21:28,680
adaptive control without any value you

1515
01:21:28,680 --> 01:21:31,530
just say ok I'm the client and I want to

1516
01:21:31,530 --> 01:21:34,230
apply the password for esa's control and

1517
01:21:34,230 --> 01:21:37,380
the server receives the operation so the

1518
01:21:37,380 --> 01:21:39,810
first time first things the server is

1519
01:21:39,810 --> 01:21:44,040
doing is to alter to the operation and

1520
01:21:44,040 --> 01:21:48,060
then the service sees that the client

1521
01:21:48,060 --> 01:21:52,530
knows how to underpass for policy so the

1522
01:21:52,530 --> 01:21:53,670
server will be a

1523
01:21:53,670 --> 01:21:57,900
to send back the control response and as

1524
01:21:57,900 --> 01:22:00,140
you can see the control response is a

1525
01:22:00,140 --> 01:22:03,480
complex to true with many flags and

1526
01:22:03,480 --> 01:22:07,500
written values that will allow the LDAP

1527
01:22:07,500 --> 01:22:10,320
client to have information about the

1528
01:22:10,320 --> 01:22:14,100
password status of the user if you don't

1529
01:22:14,100 --> 01:22:18,120
have any password policy control the

1530
01:22:18,120 --> 01:22:20,760
LDAP client will only know if the

1531
01:22:20,760 --> 01:22:23,790
password is good or bad or if the

1532
01:22:23,790 --> 01:22:25,890
password was accepted for modification

1533
01:22:25,890 --> 01:22:29,010
or refused from an education but without

1534
01:22:29,010 --> 01:22:31,290
the controller and the client will have

1535
01:22:31,290 --> 01:22:33,929
no information why the authentication

1536
01:22:33,929 --> 01:22:36,840
was of use or why the modification of a

1537
01:22:36,840 --> 01:22:38,730
subject the goal of the password policy

1538
01:22:38,730 --> 01:22:42,660
is to give some status some information

1539
01:22:42,660 --> 01:22:45,949
to the end-user to know why the

1540
01:22:45,949 --> 01:22:49,290
pathology so you can see for example you

1541
01:22:49,290 --> 01:22:50,730
can refuse the authentication because

1542
01:22:50,730 --> 01:22:53,730
your account is already locked so even

1543
01:22:53,730 --> 01:22:56,880
if you have a good password because of

1544
01:22:56,880 --> 01:22:59,760
our country is locked even using a good

1545
01:22:59,760 --> 01:23:01,710
password you you will not be able to

1546
01:23:01,710 --> 01:23:05,550
attach it so this is one of the example

1547
01:23:05,550 --> 01:23:12,420
of the password policy what it is really

1548
01:23:12,420 --> 01:23:14,850
done at potent occasion is a fairly weak

1549
01:23:14,850 --> 01:23:17,280
the first thing with a server is

1550
01:23:17,280 --> 01:23:20,670
checking is an expiration so if you have

1551
01:23:20,670 --> 01:23:23,820
a maximal age of your password on server

1552
01:23:23,820 --> 01:23:27,210
side the server will refuse to 28 if you

1553
01:23:27,210 --> 01:23:31,969
if your password is too old so it means

1554
01:23:31,969 --> 01:23:35,370
you will be not be able to identity 8

1555
01:23:35,370 --> 01:23:36,870
with your password

1556
01:23:36,870 --> 01:23:39,920
even if your password is a good password

1557
01:23:39,920 --> 01:23:43,080
your account can also be locked so it

1558
01:23:43,080 --> 01:23:45,510
means and

1559
01:23:45,510 --> 01:23:48,150
mr. Thoreau could have locked you a

1560
01:23:48,150 --> 01:23:50,369
because when mr. doe don't want that you

1561
01:23:50,369 --> 01:23:54,360
I couldn't be active anymore

1562
01:23:54,360 --> 01:23:57,300
or maybe an attacker has tried to me

1563
01:23:57,300 --> 01:23:59,969
anything too many times to use a

1564
01:23:59,969 --> 01:24:02,280
password on Martin and raccoon-face

1565
01:24:02,280 --> 01:24:04,559
locked is to prevent

1566
01:24:04,559 --> 01:24:08,429
brute-force attacks so if you are

1567
01:24:08,429 --> 01:24:10,130
currently locked you can't authenticate

1568
01:24:10,130 --> 01:24:15,780
either the third check is on you first

1569
01:24:15,780 --> 01:24:17,460
to change your password after the

1570
01:24:17,460 --> 01:24:19,739
authentication so we back on this

1571
01:24:19,739 --> 01:24:23,820
because it's a complex things but when

1572
01:24:23,820 --> 01:24:26,070
you authenticate one an observer with

1573
01:24:26,070 --> 01:24:28,769
password policy the LDAP server can say

1574
01:24:28,769 --> 01:24:30,900
ok your password is correct

1575
01:24:30,900 --> 01:24:37,309
but you are first to change it no and

1576
01:24:37,309 --> 01:24:40,440
the last thing is to send back some

1577
01:24:40,440 --> 01:24:44,550
warnings the possible ones in password

1578
01:24:44,550 --> 01:24:46,800
policy eyes are the time before

1579
01:24:46,800 --> 01:24:49,769
expiration so it means ok your password

1580
01:24:49,769 --> 01:24:52,409
is valid but it will expire in one wait

1581
01:24:52,409 --> 01:24:55,670
for example and another thing are the

1582
01:24:55,670 --> 01:24:59,159
authentication graces so it's a specific

1583
01:24:59,159 --> 01:25:01,920
feature of password policy a

1584
01:25:01,920 --> 01:25:06,210
notification grace is a a way to be able

1585
01:25:06,210 --> 01:25:09,059
to authenticate even if your password is

1586
01:25:09,059 --> 01:25:12,630
expired so as the first point I said ok

1587
01:25:12,630 --> 01:25:14,909
your password is too old it is expired

1588
01:25:14,909 --> 01:25:17,699
you can't authenticate anymore it's not

1589
01:25:17,699 --> 01:25:19,619
perfectly true because if your

1590
01:25:19,619 --> 01:25:20,570
administrator

1591
01:25:20,570 --> 01:25:24,690
allows for example to authentic during

1592
01:25:24,690 --> 01:25:27,539
races you can have an expired password

1593
01:25:27,539 --> 01:25:30,539
and be able to authenticate two more

1594
01:25:30,539 --> 01:25:34,949
time the goal is is to be able to change

1595
01:25:34,949 --> 01:25:37,170
your password after the personal

1596
01:25:37,170 --> 01:25:41,940
experience and for modifications

1597
01:25:41,940 --> 01:25:45,630
it's very classical so you can check the

1598
01:25:45,630 --> 01:25:51,170
passport size the password minimal age

1599
01:25:51,170 --> 01:25:55,350
you you can be

1600
01:25:55,350 --> 01:26:00,010
first to find you your password sorry

1601
01:26:00,010 --> 01:26:01,960
your password can be refused because you

1602
01:26:01,960 --> 01:26:05,739
change it in the last hour so maybe you

1603
01:26:05,739 --> 01:26:08,020
wanna mr. terror once not that you you

1604
01:26:08,020 --> 01:26:10,210
used to be able to change the password

1605
01:26:10,210 --> 01:26:14,950
and every hour for example and for point

1606
01:26:14,950 --> 01:26:17,230
is a password history which means we can

1607
01:26:17,230 --> 01:26:19,930
keep a list of your old password of

1608
01:26:19,930 --> 01:26:23,680
course there are arched in the history

1609
01:26:23,680 --> 01:26:26,470
so we can keep the password history so

1610
01:26:26,470 --> 01:26:29,350
you you are not able to reuse an old

1611
01:26:29,350 --> 01:26:33,430
password that you already used and the

1612
01:26:33,430 --> 01:26:35,590
last point is a password complexity but

1613
01:26:35,590 --> 01:26:39,910
for this system that does not give any

1614
01:26:39,910 --> 01:26:42,489
clue about what should be done by the

1615
01:26:42,489 --> 01:26:46,660
server it means that every end up

1616
01:26:46,660 --> 01:26:50,380
directory can implement its own

1617
01:26:50,380 --> 01:26:53,800
complexity check so most of time

1618
01:26:53,800 --> 01:26:57,010
complexity takes about lowercase

1619
01:26:57,010 --> 01:27:03,220
uppercase digits so here's the standard

1620
01:27:03,220 --> 01:27:06,239
but how it really works in open LDAP

1621
01:27:06,239 --> 01:27:10,750
open LDAP as to major version for follow

1622
01:27:10,750 --> 01:27:13,510
the current media version is two point

1623
01:27:13,510 --> 01:27:17,890
four which is the translation since ten

1624
01:27:17,890 --> 01:27:22,180
years now and it implements the version

1625
01:27:22,180 --> 01:27:26,620
9 of the draft and open a lab team is

1626
01:27:26,620 --> 01:27:28,570
currently working on the next major

1627
01:27:28,570 --> 01:27:33,640
version which is 2.5 and is including

1628
01:27:33,640 --> 01:27:37,180
the latest version of the draft inside

1629
01:27:37,180 --> 01:27:40,030
this new version so for the moment if

1630
01:27:40,030 --> 01:27:42,790
you install open an app you will only

1631
01:27:42,790 --> 01:27:45,640
have property features that are

1632
01:27:45,640 --> 01:27:48,489
described in the version 9 of the

1633
01:27:48,489 --> 01:27:52,120
password policy left what could you

1634
01:27:52,120 --> 01:27:56,449
expect by switching to the new version

1635
01:27:56,449 --> 01:28:00,690
they added the maximum password size so

1636
01:28:00,690 --> 01:28:02,909
in the version 9 you can define the

1637
01:28:02,909 --> 01:28:05,760
minimum password side in the version 10

1638
01:28:05,760 --> 01:28:07,849
you can have the maximum partial x

1639
01:28:07,849 --> 01:28:10,770
introduce the authentication delay it

1640
01:28:10,770 --> 01:28:14,310
means that you will delay certification

1641
01:28:14,310 --> 01:28:17,810
if you have some failure on the password

1642
01:28:17,810 --> 01:28:22,110
the adult hang is a way to be able to

1643
01:28:22,110 --> 01:28:25,940
compute the time before the last

1644
01:28:25,940 --> 01:28:28,679
authentication on the icons so it means

1645
01:28:28,679 --> 01:28:31,310
if your last attack but on occasion was

1646
01:28:31,310 --> 01:28:36,000
the previous year we can say that your

1647
01:28:36,000 --> 01:28:41,670
account was not used anymore and so if

1648
01:28:41,670 --> 01:28:44,400
you come back on narrator you can not

1649
01:28:44,400 --> 01:28:48,239
put a ticket with darkened and the

1650
01:28:48,239 --> 01:28:50,520
validity period is also a new feature

1651
01:28:50,520 --> 01:28:53,670
you you can give a clip put some days

1652
01:28:53,670 --> 01:28:57,270
also a start date and on date in your

1653
01:28:57,270 --> 01:29:01,079
user account to to be able to say ok my

1654
01:29:01,079 --> 01:29:04,889
account is created but it is not yet the

1655
01:29:04,889 --> 01:29:10,400
lead so the user can yet cannot use it

1656
01:29:11,869 --> 01:29:16,889
how it is configured in open and app so

1657
01:29:16,889 --> 01:29:19,679
maybe some of you know that open and

1658
01:29:19,679 --> 01:29:23,730
that can be configured as with I'll give

1659
01:29:23,730 --> 01:29:27,270
facts if you don't know it so no you

1660
01:29:27,270 --> 01:29:31,320
know and you just load the overlay the

1661
01:29:31,320 --> 01:29:34,170
overly is a simple model of open adapt

1662
01:29:34,170 --> 01:29:38,280
so you just say ok I want to enable the

1663
01:29:38,280 --> 01:29:41,579
password policy and you have free free

1664
01:29:41,579 --> 01:29:44,040
configuration options the first one is

1665
01:29:44,040 --> 01:29:48,750
very important is that you tell open lab

1666
01:29:48,750 --> 01:29:52,770
to ash the password when it is modified

1667
01:29:52,770 --> 01:29:55,980
when it is sent to your directory the

1668
01:29:55,980 --> 01:29:58,380
second one is to enable

1669
01:29:58,380 --> 01:30:02,460
looking and the last is a specific

1670
01:30:02,460 --> 01:30:06,270
options that you just need to enable if

1671
01:30:06,270 --> 01:30:08,970
you have some slave servers and

1672
01:30:08,970 --> 01:30:10,920
master servers you are doing some

1673
01:30:10,920 --> 01:30:15,780
replications and you want to provide all

1674
01:30:15,780 --> 01:30:19,700
the possible information from the

1675
01:30:19,700 --> 01:30:26,660
consumers to the providers you can have

1676
01:30:26,660 --> 01:30:30,630
main password bridge is inside an LDAP

1677
01:30:30,630 --> 01:30:33,230
directory so each facade policy is

1678
01:30:33,230 --> 01:30:36,840
represented as an elder country with a

1679
01:30:36,840 --> 01:30:41,180
specific object class you can add a

1680
01:30:41,180 --> 01:30:43,770
specific object class which is the

1681
01:30:43,770 --> 01:30:47,400
possibility checker to load a specific

1682
01:30:47,400 --> 01:30:50,370
module to check the complexity so if you

1683
01:30:50,370 --> 01:30:53,220
need one on this module so adaptable

1684
01:30:53,220 --> 01:30:56,340
project is shipping one which is called

1685
01:30:56,340 --> 01:30:59,250
ppm just for Policy module which is a

1686
01:30:59,250 --> 01:31:01,080
very good name for a password pretty

1687
01:31:01,080 --> 01:31:06,320
similar and this is an example of

1688
01:31:06,320 --> 01:31:08,580
possibility configuration so you see

1689
01:31:08,580 --> 01:31:16,230
there are a lot of parameters you do the

1690
01:31:16,230 --> 01:31:18,540
name of power of the parameters are very

1691
01:31:18,540 --> 01:31:22,260
explicit so I will not explain all but

1692
01:31:22,260 --> 01:31:25,860
you see that you can set password Max

1693
01:31:25,860 --> 01:31:31,790
age which is in seconds and you can set

1694
01:31:31,790 --> 01:31:35,430
the platform max value where you see

1695
01:31:35,430 --> 01:31:39,300
it's 10 so it means that if you fail 10

1696
01:31:39,300 --> 01:31:44,040
times your account will be locked you

1697
01:31:44,040 --> 01:31:49,290
can work on this parameter by adding the

1698
01:31:49,290 --> 01:31:51,650
password failure Khun tin Java which

1699
01:31:51,650 --> 01:31:56,340
here it is 30 seconds it means that you

1700
01:31:56,340 --> 01:31:59,940
need to fail 10 times in 30 seconds to

1701
01:31:59,940 --> 01:32:02,100
lock your code if you fail 10 times but

1702
01:32:02,100 --> 01:32:05,250
in another browser icon for not blocked

1703
01:32:05,250 --> 01:32:10,320
and the local direction to 3 seconds oh

1704
01:32:10,320 --> 01:32:14,340
it's 600 second 10 10 minutes here it

1705
01:32:14,340 --> 01:32:16,850
means that shop augment will be locked

1706
01:32:16,850 --> 01:32:20,580
for 10 minutes and after 10 minutes you

1707
01:32:20,580 --> 01:32:21,940
will be able to

1708
01:32:21,940 --> 01:32:25,780
I mean with your support during your

1709
01:32:25,780 --> 01:32:28,450
confident believe demo so you see that

1710
01:32:28,450 --> 01:32:30,730
inside the password policy configuration

1711
01:32:30,730 --> 01:32:34,120
we mixed some parameters that are used

1712
01:32:34,120 --> 01:32:37,690
to check the auto station step and some

1713
01:32:37,690 --> 01:32:42,270
parameters like the password mean size

1714
01:32:42,270 --> 01:32:45,970
or meanings for all the personal story

1715
01:32:45,970 --> 01:32:48,760
which are used when you update your

1716
01:32:48,760 --> 01:32:54,300
password in the and objective when your

1717
01:32:54,300 --> 01:32:57,100
password policies configure and your you

1718
01:32:57,100 --> 01:33:01,300
know of some operational attributes

1719
01:33:01,300 --> 01:33:05,320
inside each user on trees and this

1720
01:33:05,320 --> 01:33:08,950
attributes I will allow you to know what

1721
01:33:08,950 --> 01:33:10,870
is the status of the account of your

1722
01:33:10,870 --> 01:33:14,050
user so password participant 3 is a

1723
01:33:14,050 --> 01:33:16,900
pointer to the active policy for this

1724
01:33:16,900 --> 01:33:20,260
user password change time the date to

1725
01:33:20,260 --> 01:33:22,930
date when the past was wise change the

1726
01:33:22,930 --> 01:33:25,420
account lock time the date when the

1727
01:33:25,420 --> 01:33:27,130
password was locked the failure time

1728
01:33:27,130 --> 01:33:30,820
it's a list of failure history is the

1729
01:33:30,820 --> 01:33:34,510
requestors time is the time when you use

1730
01:33:34,510 --> 01:33:38,020
your auto chain race and password widget

1731
01:33:38,020 --> 01:33:43,090
is the flag that will tell your user to

1732
01:33:43,090 --> 01:33:50,620
update your password a small word on a

1733
01:33:50,620 --> 01:33:53,920
second overlay which is last bind which

1734
01:33:53,920 --> 01:33:56,170
you can install on open and up to point

1735
01:33:56,170 --> 01:34:02,110
for this overlay is used to remember the

1736
01:34:02,110 --> 01:34:05,200
last election date so in the next major

1737
01:34:05,200 --> 01:34:07,570
version this will be included in the

1738
01:34:07,570 --> 01:34:11,910
episode 14 over so specific things that

1739
01:34:11,910 --> 01:34:14,530
no one's thank you and you have to

1740
01:34:14,530 --> 01:34:17,320
discover yourself the first one is I

1741
01:34:17,320 --> 01:34:19,930
can't looking I just said that you have

1742
01:34:19,930 --> 01:34:22,510
an attribute in your user and 3 which is

1743
01:34:22,510 --> 01:34:25,390
password are conducting in which you

1744
01:34:25,390 --> 01:34:29,210
have the date of the password lock

1745
01:34:29,210 --> 01:34:32,890
you you you can trust release this

1746
01:34:32,890 --> 01:34:37,100
attribute on you can't say that your

1747
01:34:37,100 --> 01:34:38,750
account is locked because you have the

1748
01:34:38,750 --> 01:34:42,680
attribute because if the date is witters

1749
01:34:42,680 --> 01:34:44,960
and the rock time and the rock duration

1750
01:34:44,960 --> 01:34:47,750
you still have the attribute in your

1751
01:34:47,750 --> 01:34:50,060
user and tree but you are countries not

1752
01:34:50,060 --> 01:34:54,520
locked because the date the date is more

1753
01:34:54,520 --> 01:34:59,540
the one when your account is locked the

1754
01:34:59,540 --> 01:35:02,240
value of this attribute is only deleted

1755
01:35:02,240 --> 01:35:04,550
on the next tooth on occasion so until

1756
01:35:04,550 --> 01:35:07,880
the password until the user has no done

1757
01:35:07,880 --> 01:35:11,750
a notification on its own three as icons

1758
01:35:11,750 --> 01:35:14,420
the attribute is still in the account

1759
01:35:14,420 --> 01:35:17,030
but maybe ican't is not correct and the

1760
01:35:17,030 --> 01:35:19,850
second point is the password reset if

1761
01:35:19,850 --> 01:35:22,070
you ask you know password to change the

1762
01:35:22,070 --> 01:35:26,420
password at next connection the what

1763
01:35:26,420 --> 01:35:27,920
application is still valid because you

1764
01:35:27,920 --> 01:35:29,690
need to be able to authenticate to

1765
01:35:29,690 --> 01:35:31,340
change your password so if your

1766
01:35:31,340 --> 01:35:33,290
application is only doing an

1767
01:35:33,290 --> 01:35:36,890
authentication this flag will be totally

1768
01:35:36,890 --> 01:35:39,200
in your by the application because the

1769
01:35:39,200 --> 01:35:40,880
application is still valid

1770
01:35:40,880 --> 01:35:44,750
so to have a real you skied with this

1771
01:35:44,750 --> 01:35:47,150
you need an application that will check

1772
01:35:47,150 --> 01:35:51,500
this is flag and as a result will change

1773
01:35:51,500 --> 01:35:55,970
the password after the authentication so

1774
01:35:55,970 --> 01:36:00,950
no you know to conclude this

1775
01:36:00,950 --> 01:36:03,470
presentation I would like to introduce a

1776
01:36:03,470 --> 01:36:07,970
smaller software that award it is named

1777
01:36:07,970 --> 01:36:10,280
service desk is part of the LDAP toolbox

1778
01:36:10,280 --> 01:36:13,790
projected so the goal is to support your

1779
01:36:13,790 --> 01:36:16,880
support because a lot of support team

1780
01:36:16,880 --> 01:36:21,830
are busy with issues from users that

1781
01:36:21,830 --> 01:36:27,170
have lost the password of the user as an

1782
01:36:27,170 --> 01:36:29,660
icon locked and don't know that is I

1783
01:36:29,660 --> 01:36:31,040
can't is locked and II think the

1784
01:36:31,040 --> 01:36:34,520
password is not so good report on etc so

1785
01:36:34,520 --> 01:36:37,550
as the support team needs to know

1786
01:36:37,550 --> 01:36:40,730
quickly what is a constitutes and how to

1787
01:36:40,730 --> 01:36:42,520
solve the user issue

1788
01:36:42,520 --> 01:36:46,390
so this is a quite a single-page

1789
01:36:46,390 --> 01:36:49,870
application you search an account in the

1790
01:36:49,870 --> 01:36:52,860
directories and then you can see all the

1791
01:36:52,860 --> 01:36:55,960
information of the user and all the

1792
01:36:55,960 --> 01:37:01,660
status of the account and you can test

1793
01:37:01,660 --> 01:37:05,170
the current password so you you can take

1794
01:37:05,170 --> 01:37:07,990
the user password on and check it that's

1795
01:37:07,990 --> 01:37:10,000
what is valid you can reset the password

1796
01:37:10,000 --> 01:37:13,780
and you can lock or unlock the account

1797
01:37:13,780 --> 01:37:18,130
so it's a super team as no other rights

1798
01:37:18,130 --> 01:37:21,100
on the on the on three the only thing

1799
01:37:21,100 --> 01:37:26,560
you can do is to unlock or change the

1800
01:37:26,560 --> 01:37:32,650
user password so quick church so this

1801
01:37:32,650 --> 01:37:35,500
all this feature and in the the current

1802
01:37:35,500 --> 01:37:39,730
version so the latest version is 0.3 and

1803
01:37:39,730 --> 01:37:43,330
was released two hours ago with very

1804
01:37:43,330 --> 01:37:45,910
fresh Russians it was released this

1805
01:37:45,910 --> 01:37:49,240
morning you know so if you want more

1806
01:37:49,240 --> 01:37:55,900
some links here and I don't know I think

1807
01:37:55,900 --> 01:38:00,570
I have some minutes just to show you the

1808
01:38:00,570 --> 01:38:04,090
application here so here is the

1809
01:38:04,090 --> 01:38:08,320
application is my account so I can check

1810
01:38:08,320 --> 01:38:11,110
my my account here so my authentication

1811
01:38:11,110 --> 01:38:15,280
succeeds and you can see that my patata

1812
01:38:15,280 --> 01:38:17,530
killed my identity you shouldn't date

1813
01:38:17,530 --> 01:38:23,470
wasn't lately I can lock my password so

1814
01:38:23,470 --> 01:38:26,770
my password is not locked and we can

1815
01:38:26,770 --> 01:38:30,640
directly see that we have some failure

1816
01:38:30,640 --> 01:38:35,500
here and if I use the other browser I

1817
01:38:35,500 --> 01:38:39,790
will find the same the same values

1818
01:38:39,790 --> 01:38:44,380
inside the directory but of course it is

1819
01:38:44,380 --> 01:38:47,290
not easy to to be able to algae status

1820
01:38:47,290 --> 01:38:51,190
with an and a browser it is really easy

1821
01:38:51,190 --> 01:38:54,060
to to see it here

1822
01:38:54,060 --> 01:38:56,730
of course I can unlock the icons here if

1823
01:38:56,730 --> 01:39:00,030
I want or if I need to lock the account

1824
01:39:00,030 --> 01:39:03,720
but prominently you see it the icon is

1825
01:39:03,720 --> 01:39:10,110
locked but for further and if you look

1826
01:39:10,110 --> 01:39:13,410
at this you will see there there is the

1827
01:39:13,410 --> 01:39:14,580
path font

1828
01:39:14,580 --> 01:39:17,670
I can't look time that was set inside

1829
01:39:17,670 --> 01:39:20,510
the entry and if i unlock and refresh

1830
01:39:20,510 --> 01:39:25,980
the value was removed so this is a very

1831
01:39:25,980 --> 01:39:30,030
easy software but it implements all the

1832
01:39:30,030 --> 01:39:32,370
password policy object from open and app

1833
01:39:32,370 --> 01:39:36,210
and it is not very easy to to check this

1834
01:39:36,210 --> 01:39:38,850
policy and to check the user icon status

1835
01:39:38,850 --> 01:39:44,850
with it okay it's over thank you hope of

1836
01:39:44,850 --> 01:39:47,610
this was clear and I can know answer

1837
01:39:47,610 --> 01:39:53,150
questions thank you very much

1838
01:39:54,980 --> 01:40:00,360
maybe one question I about is just just

1839
01:40:00,360 --> 01:40:09,600
a quick question you hear me yes does

1840
01:40:09,600 --> 01:40:11,670
the drug specify all the passwords

1841
01:40:11,670 --> 01:40:14,610
should be stored by the open LDAP server

1842
01:40:14,610 --> 01:40:20,220
or the LDAP server specific I don't

1843
01:40:20,220 --> 01:40:22,020
understand the question well they should

1844
01:40:22,020 --> 01:40:26,930
bestow I mean no passwords are stored in

1845
01:40:26,930 --> 01:40:31,710
the server I mean with which which I go

1846
01:40:31,710 --> 01:40:34,770
with no protection yeah yeah no it is

1847
01:40:34,770 --> 01:40:37,470
not defined either in the draft each

1848
01:40:37,470 --> 01:40:41,450
each LDAP directory can use any

1849
01:40:41,450 --> 01:40:44,220
algorithm at once and the password

1850
01:40:44,220 --> 01:40:47,640
policy does not give any hint about

1851
01:40:47,640 --> 01:40:50,610
which algorithm and you you you should

1852
01:40:50,610 --> 01:40:53,730
you should use you can even store your

1853
01:40:53,730 --> 01:40:54,990
passwords in clear-text

1854
01:40:54,990 --> 01:40:57,990
and iPlayer that's what police unit so

1855
01:40:57,990 --> 01:41:05,820
it is not incompatible exactly etcetera

1856
01:41:05,820 --> 01:41:12,460
okay thanks okay so thank you very much

1857
01:41:12,460 --> 01:41:16,060
Clem oh I don't see any other question

1858
01:41:16,060 --> 01:41:20,200
so no the answer also so thank you very

1859
01:41:20,200 --> 01:41:23,860
much for for this talk and we remind yep

1860
01:41:23,860 --> 01:41:26,280
everybody is that you are going to

1861
01:41:26,280 --> 01:41:32,110
provide us a concert at 5:15 tomorrow

1862
01:41:32,110 --> 01:41:36,340
yes so we are going to take a ten minute

1863
01:41:36,340 --> 01:41:42,540
pause and before restarting our last

1864
01:41:42,540 --> 01:41:49,470
track with a talk about free software

1865
01:41:49,470 --> 01:41:53,350
forensic and remote for one second cloud

1866
01:41:53,350 --> 01:41:56,350
environment with a Google security team

1867
01:41:56,350 --> 01:42:00,040
and with Tom and he'll have a good pose

1868
01:42:00,040 --> 01:42:02,290
and we will be back in ten minutes

1869
01:42:02,290 --> 01:42:04,860
thank you

1870
01:42:09,750 --> 01:42:15,270
[Music]

1871
01:43:24,300 --> 01:43:26,360
you

1872
01:44:37,430 --> 01:44:50,950
[Music]

1873
01:44:54,760 --> 01:44:57,850
[Music]

1874
01:45:00,950 --> 01:45:04,029
[Music]

1875
01:46:53,360 --> 01:46:56,519
[Music]

1876
01:47:14,980 --> 01:47:18,040
[Music]

1877
01:48:49,670 --> 01:48:56,829
[Music]

1878
01:49:04,890 --> 01:49:08,390
[Music]

1879
01:49:19,710 --> 01:49:22,840
[Music]

1880
01:49:32,490 --> 01:49:35,620
[Music]

1881
01:49:45,320 --> 01:49:48,450
[Music]

1882
01:49:58,100 --> 01:50:01,239
[Music]

1883
01:50:28,480 --> 01:50:29,030
you

1884
01:50:29,030 --> 01:50:32,130
[Music]

1885
01:50:37,320 --> 01:50:44,530
well the song is over also I think it is

1886
01:50:44,530 --> 01:50:48,310
time to be back and has said previously

1887
01:50:48,310 --> 01:50:51,100
we are going to start this new session

1888
01:50:51,100 --> 01:50:58,469
with a new talk talk about forensic and

1889
01:50:58,469 --> 01:51:01,530
investigation in a cloud environment

1890
01:51:01,530 --> 01:51:03,820
with using free software

1891
01:51:03,820 --> 01:51:08,440
so please welcome Tamar until thank you

1892
01:51:08,440 --> 01:51:14,230
very much for coming thanks for having

1893
01:51:14,230 --> 01:51:14,640
us

1894
01:51:14,640 --> 01:51:20,680
yeah so stage is yours all right let me

1895
01:51:20,680 --> 01:51:30,370
try to share my screen it is done it's

1896
01:51:30,370 --> 01:51:32,080
working great because I can't see

1897
01:51:32,080 --> 01:51:36,630
anything else yeah it's great

1898
01:51:36,989 --> 01:51:39,790
excellent well thanks everyone for for

1899
01:51:39,790 --> 01:51:42,070
having us today like his stuff said

1900
01:51:42,070 --> 01:51:45,370
we're gonna talk about open source cloud

1901
01:51:45,370 --> 01:51:47,800
forensics tools in different

1902
01:51:47,800 --> 01:51:50,620
environments we hold this tool all your

1903
01:51:50,620 --> 01:51:52,420
cloud are belong the talk all your cloud

1904
01:51:52,420 --> 01:51:53,950
are belonging to us because we felt it

1905
01:51:53,950 --> 01:51:56,350
was funny so these are gonna be your

1906
01:51:56,350 --> 01:51:59,380
host today myself Tom and tio who is

1907
01:51:59,380 --> 01:52:02,170
with me we are both working in the DF IR

1908
01:52:02,170 --> 01:52:04,510
team at Google we do Incident Response

1909
01:52:04,510 --> 01:52:07,840
and a lot of forensics engineering

1910
01:52:07,840 --> 01:52:11,110
we're both based in Zurich so far I'm

1911
01:52:11,110 --> 01:52:13,810
the DF time wolf core developer you may

1912
01:52:13,810 --> 01:52:16,150
have heard of it in the past it's a

1913
01:52:16,150 --> 01:52:17,739
small tool there will be a brief mention

1914
01:52:17,739 --> 01:52:20,080
of it during this talk and tio is the

1915
01:52:20,080 --> 01:52:22,719
mastermind behind lip cloud forensics

1916
01:52:22,719 --> 01:52:25,500
and this is what this talk will be about

1917
01:52:25,500 --> 01:52:28,540
so why why do we come up with live cloud

1918
01:52:28,540 --> 01:52:30,580
forensics because we wanted to do some

1919
01:52:30,580 --> 01:52:32,290
stuff in the cloud and as we know the

1920
01:52:32,290 --> 01:52:34,030
cloud can be a very unwelcoming

1921
01:52:34,030 --> 01:52:36,940
environment so what were the motivations

1922
01:52:36,940 --> 01:52:38,469
behind it first of all we needed to

1923
01:52:38,469 --> 01:52:40,360
automate all our cloud investigations

1924
01:52:40,360 --> 01:52:42,040
because Google being Google we always

1925
01:52:42,040 --> 01:52:45,190
have to you know work at scale with a

1926
01:52:45,190 --> 01:52:46,270
lot of stuff that's going on so

1927
01:52:46,270 --> 01:52:49,180
automation is very important for us

1928
01:52:49,180 --> 01:52:51,490
in the same vein we also wanted ready to

1929
01:52:51,490 --> 01:52:53,110
use investigation environments so

1930
01:52:53,110 --> 01:52:55,000
whenever we had an incident that

1931
01:52:55,000 --> 01:52:56,620
required is to investigate the cloud we

1932
01:52:56,620 --> 01:52:58,330
really wanted to have all the tools that

1933
01:52:58,330 --> 01:53:00,660
we need it right there

1934
01:53:00,660 --> 01:53:03,700
manually installing tools takes time so

1935
01:53:03,700 --> 01:53:05,620
we really wanted to have the process as

1936
01:53:05,620 --> 01:53:07,420
streamlined as possible and also you

1937
01:53:07,420 --> 01:53:09,820
know the cloud is cool because you can

1938
01:53:09,820 --> 01:53:12,490
have big beefy VMs in the cloud that are

1939
01:53:12,490 --> 01:53:14,110
way faster than your workstation so if

1940
01:53:14,110 --> 01:53:15,400
you want to process forensics evidence

1941
01:53:15,400 --> 01:53:18,250
there then it's really good to have a

1942
01:53:18,250 --> 01:53:20,950
very big computer in the cloud some

1943
01:53:20,950 --> 01:53:22,630
caveats though we didn't want to

1944
01:53:22,630 --> 01:53:25,030
reinvent the wheel or to be the Swiss

1945
01:53:25,030 --> 01:53:27,820
Army knife of cloud we only want to do

1946
01:53:27,820 --> 01:53:29,500
one thing in cloud and do it well which

1947
01:53:29,500 --> 01:53:31,870
is doing forensics so the library that

1948
01:53:31,870 --> 01:53:33,940
we came up with us will see later has a

1949
01:53:33,940 --> 01:53:36,340
very essential functionality and very

1950
01:53:36,340 --> 01:53:38,140
few dependencies but just what we need

1951
01:53:38,140 --> 01:53:40,620
to do all the forensics in the cloud

1952
01:53:40,620 --> 01:53:42,610
this is why we came up with liquid

1953
01:53:42,610 --> 01:53:45,370
forensics so basically it's a Python

1954
01:53:45,370 --> 01:53:46,900
library that allows you to interact with

1955
01:53:46,900 --> 01:53:49,690
different cloud providers so GCP AWS

1956
01:53:49,690 --> 01:53:51,880
integer for now it's very lightweight

1957
01:53:51,880 --> 01:53:55,030
and is very focused on forensics so you

1958
01:53:55,030 --> 01:53:56,950
can use it to do stuff like copying

1959
01:53:56,950 --> 01:53:59,010
disks kind of like a DD in the cloud

1960
01:53:59,010 --> 01:54:02,020
meaning up ready to use analysis VMs and

1961
01:54:02,020 --> 01:54:03,820
also grabbing all types of logs whether

1962
01:54:03,820 --> 01:54:06,790
it's some DCP AWS or there's a few

1963
01:54:06,790 --> 01:54:08,590
similar projects that we saw when we

1964
01:54:08,590 --> 01:54:10,660
started doing this which is a Pacioli

1965
01:54:10,660 --> 01:54:13,030
cloud which doesn't have a focus on

1966
01:54:13,030 --> 01:54:14,770
forensics and supports around 30

1967
01:54:14,770 --> 01:54:16,870
different types of cloud providers which

1968
01:54:16,870 --> 01:54:19,000
is a lot and way more than what we

1969
01:54:19,000 --> 01:54:21,220
needed it also for study security which

1970
01:54:21,220 --> 01:54:24,790
is a security project also where Google

1971
01:54:24,790 --> 01:54:27,670
has its collaboration but it's focused

1972
01:54:27,670 --> 01:54:29,380
on key CP and has a few of the

1973
01:54:29,380 --> 01:54:30,970
primitives that we'll see later on but

1974
01:54:30,970 --> 01:54:32,560
does it's not really focused on

1975
01:54:32,560 --> 01:54:35,560
forensics itself the main challenge that

1976
01:54:35,560 --> 01:54:37,810
we had was to try to come up with a

1977
01:54:37,810 --> 01:54:40,900
generic enough way to name things in our

1978
01:54:40,900 --> 01:54:42,640
project so that it kind of makes sense

1979
01:54:42,640 --> 01:54:46,450
in different cloud architectures so for

1980
01:54:46,450 --> 01:54:48,610
instance what is a disk in GCP is gonna

1981
01:54:48,610 --> 01:54:51,160
be named a volume in AWS so we had the

1982
01:54:51,160 --> 01:54:53,020
choice we could either try to come up

1983
01:54:53,020 --> 01:54:55,060
with a common vocabulary or taxonomy

1984
01:54:55,060 --> 01:54:56,560
that would that made sense across all

1985
01:54:56,560 --> 01:54:59,050
clouds or we could instead come up with

1986
01:54:59,050 --> 01:55:00,910
a similar interface for different

1987
01:55:00,910 --> 01:55:02,380
clabber riders which is what we ended up

1988
01:55:02,380 --> 01:55:03,550
doing

1989
01:55:03,550 --> 01:55:06,130
we didn't want to have you know yet

1990
01:55:06,130 --> 01:55:07,659
another competing standard of how to

1991
01:55:07,659 --> 01:55:08,679
name things

1992
01:55:08,679 --> 01:55:11,610
and rather we stuck with what we knew

1993
01:55:11,610 --> 01:55:14,590
anyways this is enough about the intro

1994
01:55:14,590 --> 01:55:17,320
let's dig into the you know deep code

1995
01:55:17,320 --> 01:55:21,670
things with tio the screen is yours I

1996
01:55:21,670 --> 01:55:25,619
think yeah I can't control it for now

1997
01:55:25,619 --> 01:55:29,559
let us see again yes it seems to be

1998
01:55:29,559 --> 01:55:32,019
working great so look at forensics in a

1999
01:55:32,019 --> 01:55:34,030
nutshell as Tom said it's pison three

2000
01:55:34,030 --> 01:55:36,820
library it comes packaged with a CLI and

2001
01:55:36,820 --> 01:55:38,590
it's very easy to install so for those

2002
01:55:38,590 --> 01:55:39,969
of you that are familiar with the PIP

2003
01:55:39,969 --> 01:55:42,250
environment you can just pin stole it

2004
01:55:42,250 --> 01:55:44,650
very easily then provided that you have

2005
01:55:44,650 --> 01:55:46,269
configured authentication with the

2006
01:55:46,269 --> 01:55:47,710
different cloud providers Lea

2007
01:55:47,710 --> 01:55:49,860
preferences we just reuse that and

2008
01:55:49,860 --> 01:55:52,300
transparently authenticates and interact

2009
01:55:52,300 --> 01:55:54,429
with the different cloud providers it's

2010
01:55:54,429 --> 01:55:56,619
open source so that's pretty cool and

2011
01:55:56,619 --> 01:55:59,440
there at each license we will tell you a

2012
01:55:59,440 --> 01:56:04,210
little more on that later on now this is

2013
01:56:04,210 --> 01:56:05,920
the library architecture that account

2014
01:56:05,920 --> 01:56:08,199
that we came up with so each provider

2015
01:56:08,199 --> 01:56:12,849
has a module and then under each of this

2016
01:56:12,849 --> 01:56:14,800
module you will have a forensics that PI

2017
01:56:14,800 --> 01:56:16,989
file which exposes higher-level

2018
01:56:16,989 --> 01:56:18,969
forensics functionality such as creating

2019
01:56:18,969 --> 01:56:23,050
this copy starting now this VM and they

2020
01:56:23,050 --> 01:56:25,389
also all have an internal module which

2021
01:56:25,389 --> 01:56:28,420
is where we basically hide all of the

2022
01:56:28,420 --> 01:56:31,739
cloud provider specific functioning and

2023
01:56:31,739 --> 01:56:35,199
we also expose primitives for each of

2024
01:56:35,199 --> 01:56:37,360
these providers but a more internal such

2025
01:56:37,360 --> 01:56:40,269
as this instances list disks list logs

2026
01:56:40,269 --> 01:56:46,269
and so on and so forth now let's see how

2027
01:56:46,269 --> 01:56:49,960
it is all works in GCP so let's say we

2028
01:56:49,960 --> 01:56:51,610
have the following scenario we have a

2029
01:56:51,610 --> 01:56:53,590
Google Cloud engine instance hosting

2030
01:56:53,590 --> 01:56:55,150
content management system that gets

2031
01:56:55,150 --> 01:56:57,820
owned so we're gonna be warning a few

2032
01:56:57,820 --> 01:57:00,250
things first we want a forensic copy of

2033
01:57:00,250 --> 01:57:02,139
the compromised disks that belong to

2034
01:57:02,139 --> 01:57:04,599
this instance we also want an analysis

2035
01:57:04,599 --> 01:57:05,949
VM that is ready to use

2036
01:57:05,949 --> 01:57:07,659
so that we can forensic eight the disk

2037
01:57:07,659 --> 01:57:09,789
and ideally we want this in the separate

2038
01:57:09,789 --> 01:57:11,980
project we also probably want a coffee

2039
01:57:11,980 --> 01:57:13,269
because this is going to be a long

2040
01:57:13,269 --> 01:57:13,960
investigation

2041
01:57:13,960 --> 01:57:16,700
what who really don't want is to do this

2042
01:57:16,700 --> 01:57:18,950
any of these tasks manually because it's

2043
01:57:18,950 --> 01:57:21,260
very cumbersome so if your family

2044
01:57:21,260 --> 01:57:22,970
participe if you wanted to do a disk

2045
01:57:22,970 --> 01:57:24,920
copy in there there are a few steps

2046
01:57:24,920 --> 01:57:27,620
involved you would first you have to

2047
01:57:27,620 --> 01:57:29,660
create a snapshot of the disk in the

2048
01:57:29,660 --> 01:57:31,760
source project and then you would have

2049
01:57:31,760 --> 01:57:33,590
to create a new disk out of the snapshot

2050
01:57:33,590 --> 01:57:36,200
in the second project and then you have

2051
01:57:36,200 --> 01:57:38,600
to you know create your VM connect to it

2052
01:57:38,600 --> 01:57:41,690
and so all the tools you need attached

2053
01:57:41,690 --> 01:57:43,250
to this copy that you just created and

2054
01:57:43,250 --> 01:57:45,020
then you have to bounce back the first

2055
01:57:45,020 --> 01:57:46,850
project and do some cleaning up because

2056
01:57:46,850 --> 01:57:48,530
you don't want to have all this in terms

2057
01:57:48,530 --> 01:57:53,420
of resources just laying around so in

2058
01:57:53,420 --> 01:57:55,960
this slide you can see a snippet of code

2059
01:57:55,960 --> 01:57:59,660
that's basically doing all which is set

2060
01:57:59,660 --> 01:58:03,140
and just to function call so in the

2061
01:58:03,140 --> 01:58:04,970
first part of the code you can see how

2062
01:58:04,970 --> 01:58:08,210
you can create a disk copy in GCP it

2063
01:58:08,210 --> 01:58:09,710
should be noted that the parameters you

2064
01:58:09,710 --> 01:58:13,850
see there are GC p specific and that if

2065
01:58:13,850 --> 01:58:15,920
you virtual to the same in AWS or a sure

2066
01:58:15,920 --> 01:58:19,580
some of them might be different for GC p

2067
01:58:19,580 --> 01:58:21,770
you have to specify the source project

2068
01:58:21,770 --> 01:58:23,720
which is the project in which you have

2069
01:58:23,720 --> 01:58:25,760
your compromised instance then you will

2070
01:58:25,760 --> 01:58:27,890
specify the destination project which is

2071
01:58:27,890 --> 01:58:30,310
the one you want to carry analysis on

2072
01:58:30,310 --> 01:58:33,050
the instance name to zone in which this

2073
01:58:33,050 --> 01:58:35,030
instance is and then you have an

2074
01:58:35,030 --> 01:58:36,790
optional dist name parameter which is

2075
01:58:36,790 --> 01:58:39,800
pretty useful if you want to investigate

2076
01:58:39,800 --> 01:58:41,900
one this in particular or if you don't

2077
01:58:41,900 --> 01:58:44,450
specify it then go to scrap to put disk

2078
01:58:44,450 --> 01:58:47,240
of the instance so after this first

2079
01:58:47,240 --> 01:58:48,620
function call you already have your

2080
01:58:48,620 --> 01:58:51,140
forensic copy in your analysis project

2081
01:58:51,140 --> 01:58:53,060
and then the second part of the code

2082
01:58:53,060 --> 01:58:57,560
focuses on creating a analysis VM so

2083
01:58:57,560 --> 01:58:58,880
there again you specify a bunch of

2084
01:58:58,880 --> 01:59:01,790
parameters the cool thing is that you

2085
01:59:01,790 --> 01:59:03,320
have a lot of options to customize this

2086
01:59:03,320 --> 01:59:05,870
VM so we can choose the boot disk type

2087
01:59:05,870 --> 01:59:08,420
the size number of CPU pores as Tom said

2088
01:59:08,420 --> 01:59:10,280
if you want really beefed machine that's

2089
01:59:10,280 --> 01:59:12,800
pretty cool but more importantly you can

2090
01:59:12,800 --> 01:59:15,740
specify a source image for the VM so if

2091
01:59:15,740 --> 01:59:18,230
you want to use going to or some other

2092
01:59:18,230 --> 01:59:22,220
OS that's up to you and in particular

2093
01:59:22,220 --> 01:59:25,280
you can specify the path to a script

2094
01:59:25,280 --> 01:59:27,770
that will be executed the first time the

2095
01:59:27,770 --> 01:59:29,690
machine is put up so that's pretty

2096
01:59:29,690 --> 01:59:30,170
useful

2097
01:59:30,170 --> 01:59:32,030
if you have any pre-processing job to do

2098
01:59:32,030 --> 01:59:35,420
on your VM before you start your

2099
01:59:35,420 --> 01:59:38,420
investigation now this is what you do in

2100
01:59:38,420 --> 01:59:40,880
code but you know look at forensics also

2101
01:59:40,880 --> 01:59:45,500
comes with a CEO like tool that's the in

2102
01:59:45,500 --> 01:59:48,340
in the slide you can see all the

2103
01:59:48,340 --> 01:59:51,830
functions that we have in the CLI for

2104
01:59:51,830 --> 01:59:55,850
TCP those are meant to be easy to use

2105
01:59:55,850 --> 01:59:58,699
and ready to use so that you don't have

2106
01:59:58,699 --> 02:00:02,270
to write any code so if we wanted to do

2107
02:00:02,270 --> 02:00:04,550
exactly what we've done before but we've

2108
02:00:04,550 --> 02:00:06,260
no code this is what it would look like

2109
02:00:06,260 --> 02:00:09,800
so just to like two one-liners want to

2110
02:00:09,800 --> 02:00:12,520
do the copy of the disk and want to do

2111
02:00:12,520 --> 02:00:15,530
to start the analysis for him and get

2112
02:00:15,530 --> 02:00:21,219
started yeah so as I mentioned before

2113
02:00:21,219 --> 02:00:23,719
time wolf is a very big user of this

2114
02:00:23,719 --> 02:00:25,400
library because it interacts a lot with

2115
02:00:25,400 --> 02:00:27,520
cloud and time wolf is basically our

2116
02:00:27,520 --> 02:00:31,130
forensics pipeline where we use it to

2117
02:00:31,130 --> 02:00:32,660
make the link between all the different

2118
02:00:32,660 --> 02:00:35,120
forensics tools that we have in this

2119
02:00:35,120 --> 02:00:36,800
case this is a slide from a previous

2120
02:00:36,800 --> 02:00:39,380
talk about how Greendale this fake

2121
02:00:39,380 --> 02:00:41,060
University got compromised by attackers

2122
02:00:41,060 --> 02:00:44,390
and this is cyber forensics assurances

2123
02:00:44,390 --> 02:00:46,010
the consulting company that comes in and

2124
02:00:46,010 --> 02:00:47,420
helps them so in green you have the

2125
02:00:47,420 --> 02:00:50,090
Greendale iot-cloud project and in blue

2126
02:00:50,090 --> 02:00:51,860
you have the incident response project

2127
02:00:51,860 --> 02:00:54,920
so a full pipeline usage of this library

2128
02:00:54,920 --> 02:00:56,120
would look like something like this

2129
02:00:56,120 --> 02:00:58,820
where time wolf asks the Greendale

2130
02:00:58,820 --> 02:01:00,710
project to copy the gist the disk for

2131
02:01:00,710 --> 02:01:04,400
Jenkins the new copy is returned this

2132
02:01:04,400 --> 02:01:07,910
copy is sent to the response project and

2133
02:01:07,910 --> 02:01:09,980
an API call is made to Kirby Nia saying

2134
02:01:09,980 --> 02:01:11,570
like hey travina can you please forensic

2135
02:01:11,570 --> 02:01:13,489
ate this for me true being is gonna run

2136
02:01:13,489 --> 02:01:15,440
plazo or lots of timeline on the disk

2137
02:01:15,440 --> 02:01:17,690
image and store a plasma file in a

2138
02:01:17,690 --> 02:01:20,000
google storage and then this will be

2139
02:01:20,000 --> 02:01:21,890
sent back to time wolf and time will

2140
02:01:21,890 --> 02:01:23,660
send it to time sketch for analysis so

2141
02:01:23,660 --> 02:01:26,630
this all happens in one CLI command but

2142
02:01:26,630 --> 02:01:29,120
where liquid forensics really helps is

2143
02:01:29,120 --> 02:01:31,250
right at the beginning of the process

2144
02:01:31,250 --> 02:01:34,489
where all the steps that do detailed

2145
02:01:34,489 --> 02:01:36,620
before the snap flooding of disk then

2146
02:01:36,620 --> 02:01:38,210
the moving that's not for from one

2147
02:01:38,210 --> 02:01:39,560
project to the other the creation of a

2148
02:01:39,560 --> 02:01:41,000
disk the removal of the initial snapshot

2149
02:01:41,000 --> 02:01:42,980
everything is automated and extracted

2150
02:01:42,980 --> 02:01:43,940
away so you

2151
02:01:43,940 --> 02:01:45,890
as a library user can have all these

2152
02:01:45,890 --> 02:01:48,170
functionality and it's really embedded

2153
02:01:48,170 --> 02:01:50,630
into another and bigger forensics

2154
02:01:50,630 --> 02:01:55,370
pipeline what about Amazon let's take a

2155
02:01:55,370 --> 02:01:58,460
look at Amazon so we have a similar

2156
02:01:58,460 --> 02:02:01,160
story compromised instance we have three

2157
02:02:01,160 --> 02:02:04,219
key differences well we're in AWS that's

2158
02:02:04,219 --> 02:02:06,440
one and then the disk that we want to

2159
02:02:06,440 --> 02:02:09,770
investigate uses AWS EPS encryption so

2160
02:02:09,770 --> 02:02:11,090
for those of you that are not familiar

2161
02:02:11,090 --> 02:02:14,120
with AWS EBS encryption is the way

2162
02:02:14,120 --> 02:02:17,900
Amazon ensures security of your data at

2163
02:02:17,900 --> 02:02:19,820
rest and in transit between instances

2164
02:02:19,820 --> 02:02:22,850
and storage and the third difference is

2165
02:02:22,850 --> 02:02:25,040
that we want to analyze the disk in a

2166
02:02:25,040 --> 02:02:27,170
different a to place account since we

2167
02:02:27,170 --> 02:02:29,300
don't have the notion of projects in AWS

2168
02:02:29,300 --> 02:02:31,100
this is basically what we have to do if

2169
02:02:31,100 --> 02:02:33,110
we want any kind of separation between

2170
02:02:33,110 --> 02:02:35,030
wherever we have our compromised

2171
02:02:35,030 --> 02:02:36,739
instance and wherever we want to do the

2172
02:02:36,739 --> 02:02:39,350
analysis now can we do all of these

2173
02:02:39,350 --> 02:02:42,110
through AWS web console the short answer

2174
02:02:42,110 --> 02:02:44,090
is yes the long answer is yes but you

2175
02:02:44,090 --> 02:02:45,590
really don't want to and I'm going to

2176
02:02:45,590 --> 02:02:49,520
show you why so in the picture in the

2177
02:02:49,520 --> 02:02:51,290
slide you can see what the steps look

2178
02:02:51,290 --> 02:02:53,900
like if you were to do it manually the

2179
02:02:53,900 --> 02:02:55,489
upper part is everything that's

2180
02:02:55,489 --> 02:02:57,350
happening in the source account the

2181
02:02:57,350 --> 02:02:58,610
lower part is everything that's

2182
02:02:58,610 --> 02:03:01,699
happening in the destination account the

2183
02:03:01,699 --> 02:03:03,890
green circle that's in the slide is the

2184
02:03:03,890 --> 02:03:05,540
volume that we want to make a copy off

2185
02:03:05,540 --> 02:03:07,640
it's encrypted and it's encrypted waves

2186
02:03:07,640 --> 02:03:10,670
the default Amazon key that comes with

2187
02:03:10,670 --> 02:03:12,590
your account whenever you create an a

2188
02:03:12,590 --> 02:03:15,260
bilious account so the first step is

2189
02:03:15,260 --> 02:03:17,810
similar you create a snapshot but now

2190
02:03:17,810 --> 02:03:20,150
there is a catch because atreus does not

2191
02:03:20,150 --> 02:03:21,949
allow you to share the default

2192
02:03:21,949 --> 02:03:23,330
encryption key that comes with your

2193
02:03:23,330 --> 02:03:25,880
account so you have to navigate your way

2194
02:03:25,880 --> 02:03:28,250
through the UI and go to the key

2195
02:03:28,250 --> 02:03:29,750
management service and create a

2196
02:03:29,750 --> 02:03:33,230
temporary customer manage key which you

2197
02:03:33,230 --> 02:03:36,110
have to then use to create a copy of the

2198
02:03:36,110 --> 02:03:38,739
first snapshot which you will Rhian

2199
02:03:38,739 --> 02:03:41,660
krypton / wiki and after that you have

2200
02:03:41,660 --> 02:03:44,630
to share both that copy and that key to

2201
02:03:44,630 --> 02:03:46,489
the external account which is the last

2202
02:03:46,489 --> 02:03:49,310
grid circle then you have to log off and

2203
02:03:49,310 --> 02:03:51,640
then log in at the destination account

2204
02:03:51,640 --> 02:03:55,699
create your final volume copy which will

2205
02:03:55,699 --> 02:03:57,559
be automatically we encrypt

2206
02:03:57,559 --> 02:03:59,839
a third time with your default account

2207
02:03:59,839 --> 02:04:02,269
key but that's not it because then you

2208
02:04:02,269 --> 02:04:04,219
have to log off again lock back in the

2209
02:04:04,219 --> 02:04:05,659
source account and do some cleanup work

2210
02:04:05,659 --> 02:04:08,479
so you have to delete the first snapshot

2211
02:04:08,479 --> 02:04:11,089
then delete the key and delete the third

2212
02:04:11,089 --> 02:04:13,010
snapshot so things are really getting

2213
02:04:13,010 --> 02:04:14,869
ugly and it's a long process very

2214
02:04:14,869 --> 02:04:16,639
tedious and it's very easy to make

2215
02:04:16,639 --> 02:04:21,019
mistakes or to forget to share things so

2216
02:04:21,019 --> 02:04:22,879
instead of doing that you can do to cool

2217
02:04:22,879 --> 02:04:24,819
away and just use the cut forensics a

2218
02:04:24,819 --> 02:04:25,969
one-liner

2219
02:04:25,969 --> 02:04:28,989
again you just reference the volume ID

2220
02:04:28,989 --> 02:04:31,760
type your command launch it everything

2221
02:04:31,760 --> 02:04:33,769
will be done for you so when you launch

2222
02:04:33,769 --> 02:04:34,399
this command

2223
02:04:34,399 --> 02:04:35,959
leaplet forensics will check if you're

2224
02:04:35,959 --> 02:04:38,149
trying to make the copy in a separate

2225
02:04:38,149 --> 02:04:40,819
account if so it will also check if

2226
02:04:40,819 --> 02:04:41,959
you're trying to make a copy of an

2227
02:04:41,959 --> 02:04:44,089
encrypted volume and if so it will

2228
02:04:44,089 --> 02:04:45,649
generate everything for you so it will

2229
02:04:45,649 --> 02:04:47,719
generate a one-time key it will be

2230
02:04:47,719 --> 02:04:51,109
encrypt a second copy of snapchat share

2231
02:04:51,109 --> 02:04:53,169
your thing with the distinction account

2232
02:04:53,169 --> 02:04:57,079
connect to it create volume connect back

2233
02:04:57,079 --> 02:04:58,579
to the first account clean up everything

2234
02:04:58,579 --> 02:05:03,979
and then you're done cool yeah thanks to

2235
02:05:03,979 --> 02:05:06,769
your fur for the insight on that I'm

2236
02:05:06,769 --> 02:05:08,179
gonna anticipate one of the questions

2237
02:05:08,179 --> 02:05:09,979
that we very often get we would choose

2238
02:05:09,979 --> 02:05:12,859
why why do you people produce all these

2239
02:05:12,859 --> 02:05:15,739
code and open source well there's

2240
02:05:15,739 --> 02:05:17,300
there's a few good reasons for that

2241
02:05:17,300 --> 02:05:19,459
right the first one and the main one is

2242
02:05:19,459 --> 02:05:21,019
we really try to be flatform

2243
02:05:21,019 --> 02:05:23,359
agnostic so basically that means that we

2244
02:05:23,359 --> 02:05:25,489
never really know what we're gonna do

2245
02:05:25,489 --> 02:05:27,739
forensics on next it could be something

2246
02:05:27,739 --> 02:05:29,419
on GCP it could be something on Azure it

2247
02:05:29,419 --> 02:05:31,669
could be something that is internal from

2248
02:05:31,669 --> 02:05:33,979
the systems of Google it's really hard

2249
02:05:33,979 --> 02:05:35,719
to know but we really want to make sure

2250
02:05:35,719 --> 02:05:37,489
that we keep like this agility and that

2251
02:05:37,489 --> 02:05:39,229
we can adapt and for that we need a

2252
02:05:39,229 --> 02:05:43,189
platform agnostic software so this is

2253
02:05:43,189 --> 02:05:44,780
true for all our tools but for this one

2254
02:05:44,780 --> 02:05:46,579
in particular there's another another

2255
02:05:46,579 --> 02:05:47,989
reason that is really important is that

2256
02:05:47,989 --> 02:05:49,579
we get more we want more diverse

2257
02:05:49,579 --> 02:05:52,519
feedback on the usage of the tool so

2258
02:05:52,519 --> 02:05:54,439
that means that you know we're pretty

2259
02:05:54,439 --> 02:05:56,719
heavy users of GCP and less heavy users

2260
02:05:56,719 --> 02:05:59,359
of AWS but it could be that someone else

2261
02:05:59,359 --> 02:06:00,979
who uses this library is a very heavy

2262
02:06:00,979 --> 02:06:03,979
user of Amazon Web Services and you know

2263
02:06:03,979 --> 02:06:05,989
they will know much better than us how

2264
02:06:05,989 --> 02:06:07,789
what are the things that they want to

2265
02:06:07,789 --> 02:06:09,769
see in this library and how do how do

2266
02:06:09,769 --> 02:06:11,119
they want to use it how do you want to

2267
02:06:11,119 --> 02:06:11,360
into

2268
02:06:11,360 --> 02:06:14,060
with their own tools so we're looking

2269
02:06:14,060 --> 02:06:15,889
for different use cases we have a very

2270
02:06:15,889 --> 02:06:18,679
GCP centric bias and we're looking to UM

2271
02:06:18,679 --> 02:06:20,719
bias a little bit this this approach and

2272
02:06:20,719 --> 02:06:22,219
we're also looking for a different

2273
02:06:22,219 --> 02:06:23,960
experience with more and other different

2274
02:06:23,960 --> 02:06:26,119
cloud providers and last but not least

2275
02:06:26,119 --> 02:06:27,380
we also want to give something back to

2276
02:06:27,380 --> 02:06:29,389
the community we spent all this time

2277
02:06:29,389 --> 02:06:30,949
writing code might as well have other

2278
02:06:30,949 --> 02:06:33,170
people work on it too right or benefit

2279
02:06:33,170 --> 02:06:35,780
from it at least we've also been

2280
02:06:35,780 --> 02:06:37,190
experimenting a little bit with code

2281
02:06:37,190 --> 02:06:39,860
review experiments because this in our

2282
02:06:39,860 --> 02:06:42,500
team it's a fairly new library and the

2283
02:06:42,500 --> 02:06:45,170
coab is unfamiliar from many people so

2284
02:06:45,170 --> 02:06:46,790
for that we we've experimented with a

2285
02:06:46,790 --> 02:06:48,320
little bit a little bit with github code

2286
02:06:48,320 --> 02:06:51,380
owners which basically declares user

2287
02:06:51,380 --> 02:06:53,540
accounts and maps it to specific

2288
02:06:53,540 --> 02:06:55,340
sections of the code where they have

2289
02:06:55,340 --> 02:06:58,880
let's say review authority over well in

2290
02:06:58,880 --> 02:07:00,050
our case because this is very

2291
02:07:00,050 --> 02:07:02,330
preliminary we are all domain for

2292
02:07:02,330 --> 02:07:04,489
contributors are all coda owners of the

2293
02:07:04,489 --> 02:07:06,800
whole code base but the main change that

2294
02:07:06,800 --> 02:07:08,900
we made was to have two pairs of eyes

2295
02:07:08,900 --> 02:07:11,960
for each code review so you might think

2296
02:07:11,960 --> 02:07:14,000
this makes things way heavier when it

2297
02:07:14,000 --> 02:07:15,800
comes to code agility but it doesn't

2298
02:07:15,800 --> 02:07:18,650
because from what we've seen there's

2299
02:07:18,650 --> 02:07:20,360
much less reviewer fatigue so it's not

2300
02:07:20,360 --> 02:07:21,770
always the same person who reviews the

2301
02:07:21,770 --> 02:07:24,110
code we have this rotation going on

2302
02:07:24,110 --> 02:07:26,330
where we pick two people kind of at

2303
02:07:26,330 --> 02:07:28,159
random or that are more familiar with

2304
02:07:28,159 --> 02:07:30,230
some parts of the code base so there's

2305
02:07:30,230 --> 02:07:31,550
much less reviewer fatigue because

2306
02:07:31,550 --> 02:07:33,830
there's no one reviewer that will review

2307
02:07:33,830 --> 02:07:36,010
all the code or all the pull requests

2308
02:07:36,010 --> 02:07:38,560
there's also less pressure on reviewers

2309
02:07:38,560 --> 02:07:40,820
because if I come in as a second

2310
02:07:40,820 --> 02:07:42,199
reviewer I know that the code has been

2311
02:07:42,199 --> 02:07:45,230
through a first round of reviews and if

2312
02:07:45,230 --> 02:07:46,460
I come in first then I know that

2313
02:07:46,460 --> 02:07:48,440
probably the second person will also

2314
02:07:48,440 --> 02:07:50,090
catch some mistakes that I may have not

2315
02:07:50,090 --> 02:07:53,929
seen right and this also adds a lot of

2316
02:07:53,929 --> 02:07:55,699
different perspectives on the code and

2317
02:07:55,699 --> 02:07:58,190
the way it should be fixed when mistakes

2318
02:07:58,190 --> 02:08:00,860
are made whether it's style or you know

2319
02:08:00,860 --> 02:08:03,050
optimizations it's really good to be

2320
02:08:03,050 --> 02:08:04,790
able to learn from your team mates that

2321
02:08:04,790 --> 02:08:07,250
are also reviewing the same code and

2322
02:08:07,250 --> 02:08:08,869
yeah you learn a lot from comments that

2323
02:08:08,869 --> 02:08:12,020
other people make and last but not least

2324
02:08:12,020 --> 02:08:14,929
we also wanted to have a bigger part of

2325
02:08:14,929 --> 02:08:16,699
the team work on this codebase and this

2326
02:08:16,699 --> 02:08:18,650
was a bit tricky because we have sites

2327
02:08:18,650 --> 02:08:20,330
in many time zones we have sites in the

2328
02:08:20,330 --> 02:08:22,280
west coast and the East Coast and Zurich

2329
02:08:22,280 --> 02:08:24,650
and in Sydney and getting all these

2330
02:08:24,650 --> 02:08:25,280
people to work

2331
02:08:25,280 --> 02:08:26,630
together on the same codebase can be a

2332
02:08:26,630 --> 02:08:29,719
challenge so naturally this started off

2333
02:08:29,719 --> 02:08:32,480
in Zurich but we want to export the

2334
02:08:32,480 --> 02:08:34,719
knowledge of the codebase to other sites

2335
02:08:34,719 --> 02:08:37,550
because if you know something happens

2336
02:08:37,550 --> 02:08:39,079
and we're all sleeping in Zurich and

2337
02:08:39,079 --> 02:08:40,880
everyone is awakened and in Mountain

2338
02:08:40,880 --> 02:08:43,340
View or in Sydney then they will have to

2339
02:08:43,340 --> 02:08:44,989
wait for us to wake up to fix bugs and

2340
02:08:44,989 --> 02:08:46,730
that's really not good especially in an

2341
02:08:46,730 --> 02:08:48,050
instant response environment where you

2342
02:08:48,050 --> 02:08:50,449
need to have this agility so what we

2343
02:08:50,449 --> 02:08:52,190
want to be able to do is have people who

2344
02:08:52,190 --> 02:08:54,230
are knowledgeable enough in every side

2345
02:08:54,230 --> 02:08:56,389
or in at least one other site to be able

2346
02:08:56,389 --> 02:08:58,579
to fix bugs that come up we also want to

2347
02:08:58,579 --> 02:09:00,050
share maintenance responsibilities so

2348
02:09:00,050 --> 02:09:02,150
some people in one side they just take

2349
02:09:02,150 --> 02:09:05,119
time off well then someone else can come

2350
02:09:05,119 --> 02:09:07,190
in fix bugs write documentation and so

2351
02:09:07,190 --> 02:09:08,389
on and we also want to split code

2352
02:09:08,389 --> 02:09:09,469
reviews because it's pretty cool to be

2353
02:09:09,469 --> 02:09:12,500
able to say I wrote some code on a

2354
02:09:12,500 --> 02:09:15,380
Friday evening and then I just wanna you

2355
02:09:15,380 --> 02:09:17,329
know have it reviewed and ready to go by

2356
02:09:17,329 --> 02:09:19,010
Monday and then maybe people in

2357
02:09:19,010 --> 02:09:22,130
Sunnyvale can take over their shift and

2358
02:09:22,130 --> 02:09:23,690
review the code and then I can keep

2359
02:09:23,690 --> 02:09:25,250
working on it on Sunday morning and I

2360
02:09:25,250 --> 02:09:27,320
don't have to wait for that for the

2361
02:09:27,320 --> 02:09:29,150
whole team to review it when they're in

2362
02:09:29,150 --> 02:09:30,710
the same times on this thing so that's

2363
02:09:30,710 --> 02:09:34,550
that's also pretty good we also try to

2364
02:09:34,550 --> 02:09:37,610
make a lot of efforts in our continuous

2365
02:09:37,610 --> 02:09:38,840
integration and continuous deployment

2366
02:09:38,840 --> 02:09:42,889
pipeline so you may think CI and CD is

2367
02:09:42,889 --> 02:09:45,920
really a software engineer thing but let

2368
02:09:45,920 --> 02:09:47,239
me assure you it's not I don't consider

2369
02:09:47,239 --> 02:09:48,710
myself a software engineer more of a

2370
02:09:48,710 --> 02:09:51,079
security engineer because like to focus

2371
02:09:51,079 --> 02:09:53,389
on features that my code does and how it

2372
02:09:53,389 --> 02:09:55,610
helps me tackle the problems that I have

2373
02:09:55,610 --> 02:10:00,230
I care little about coding structure and

2374
02:10:00,230 --> 02:10:01,730
things it's important but what I want to

2375
02:10:01,730 --> 02:10:05,389
focus on is features right so by this I

2376
02:10:05,389 --> 02:10:07,250
want to automate as much of the quality

2377
02:10:07,250 --> 02:10:10,309
assurance as possible so I want to have

2378
02:10:10,309 --> 02:10:12,530
my tests run every single time that I

2379
02:10:12,530 --> 02:10:15,110
receive a pull request and this is super

2380
02:10:15,110 --> 02:10:17,389
important because you want to be able to

2381
02:10:17,389 --> 02:10:19,280
merge with confidence right you want to

2382
02:10:19,280 --> 02:10:20,869
be able to say well I'm gonna merge this

2383
02:10:20,869 --> 02:10:23,780
code into my main code base and I want

2384
02:10:23,780 --> 02:10:26,119
to have a certain amount of confidence

2385
02:10:26,119 --> 02:10:28,400
that it's not gonna break everything so

2386
02:10:28,400 --> 02:10:30,079
that's pretty good to have unit tests

2387
02:10:30,079 --> 02:10:31,610
and we use github actions for that and

2388
02:10:31,610 --> 02:10:33,800
it's been really good so far we're also

2389
02:10:33,800 --> 02:10:36,800
using end-to-end testing through Jenkins

2390
02:10:36,800 --> 02:10:38,690
and that's also pretty good because it

2391
02:10:38,690 --> 02:10:39,080
allows

2392
02:10:39,080 --> 02:10:41,060
to detect API changes early I mean

2393
02:10:41,060 --> 02:10:42,500
liftoff forensics is all about

2394
02:10:42,500 --> 02:10:44,750
interacting with api's that we have

2395
02:10:44,750 --> 02:10:48,320
little control over so you know you

2396
02:10:48,320 --> 02:10:49,670
don't want to wait until you're in the

2397
02:10:49,670 --> 02:10:51,410
middle of an incident response just to

2398
02:10:51,410 --> 02:10:53,660
find out that an API method that you

2399
02:10:53,660 --> 02:10:55,910
were relying on has been deprecated you

2400
02:10:55,910 --> 02:10:57,560
want to know this early on and it has

2401
02:10:57,560 --> 02:10:58,970
already caught a few things that were

2402
02:10:58,970 --> 02:11:01,370
really good to have and to fix early on

2403
02:11:01,370 --> 02:11:03,160
before we're using it in an incident

2404
02:11:03,160 --> 02:11:06,160
there's an awesome sticker by the way so

2405
02:11:06,160 --> 02:11:10,330
they ship everywhere about code quality

2406
02:11:10,330 --> 02:11:13,340
so we use type hinting a lot which is a

2407
02:11:13,340 --> 02:11:15,650
new feature in Python 3 it makes Python

2408
02:11:15,650 --> 02:11:18,530
a little less yellow and allows you to

2409
02:11:18,530 --> 02:11:20,300
have a little more structure when you

2410
02:11:20,300 --> 02:11:24,200
try to specify types and things it makes

2411
02:11:24,200 --> 02:11:25,610
things a little bit more consistent and

2412
02:11:25,610 --> 02:11:27,530
it will also catch a lot of errors very

2413
02:11:27,530 --> 02:11:31,010
early on we also have linter checks and

2414
02:11:31,010 --> 02:11:33,740
linter checks allow us to have a certain

2415
02:11:33,740 --> 02:11:35,540
type of consistency across the entire

2416
02:11:35,540 --> 02:11:38,030
code base because you know there's like

2417
02:11:38,030 --> 02:11:39,740
five people working on this codebase and

2418
02:11:39,740 --> 02:11:42,110
we all have different coding styles some

2419
02:11:42,110 --> 02:11:43,670
people come from Java some people come

2420
02:11:43,670 --> 02:11:46,340
from NGO and it's fine I don't judge but

2421
02:11:46,340 --> 02:11:47,750
you know I like to have my code

2422
02:11:47,750 --> 02:11:50,510
consistent and at least be it not be

2423
02:11:50,510 --> 02:11:52,460
able to obviously tell who wrote this

2424
02:11:52,460 --> 02:11:54,140
function so linters helped us a lot with

2425
02:11:54,140 --> 02:11:55,790
that and will satisfy legaia that we

2426
02:11:55,790 --> 02:11:58,160
follow we also try to work a lot on

2427
02:11:58,160 --> 02:12:00,230
documentation we have very verbose stock

2428
02:12:00,230 --> 02:12:01,940
strings and that will hopefully be very

2429
02:12:01,940 --> 02:12:05,090
helpful when we decide to generate all

2430
02:12:05,090 --> 02:12:07,730
the docs for a code we haven't done yet

2431
02:12:07,730 --> 02:12:10,010
we also started off having an examples

2432
02:12:10,010 --> 02:12:11,840
directory which turned out to be so

2433
02:12:11,840 --> 02:12:14,120
useful that we decided to turn it into a

2434
02:12:14,120 --> 02:12:16,850
CLI script directory because this was

2435
02:12:16,850 --> 02:12:19,130
exactly how you were supposed to use the

2436
02:12:19,130 --> 02:12:22,280
code we also make heavy use of github

2437
02:12:22,280 --> 02:12:24,650
issues there's a very big culture in our

2438
02:12:24,650 --> 02:12:26,690
team to please open issues every time

2439
02:12:26,690 --> 02:12:28,910
you have an idea or a bug or something

2440
02:12:28,910 --> 02:12:30,590
that you want to write down so that's

2441
02:12:30,590 --> 02:12:32,450
not to forget it just open an issue and

2442
02:12:32,450 --> 02:12:34,370
then someone will treat it and label it

2443
02:12:34,370 --> 02:12:37,670
and to triage issues we use labels as

2444
02:12:37,670 --> 02:12:39,860
you can see in the screenshot there we

2445
02:12:39,860 --> 02:12:42,500
have labels for GCP an enhancement label

2446
02:12:42,500 --> 02:12:43,790
which is basically a feature request

2447
02:12:43,790 --> 02:12:45,590
label we have a juror we also have

2448
02:12:45,590 --> 02:12:47,840
testing we have documentation we also

2449
02:12:47,840 --> 02:12:51,380
have a good first issue label and that's

2450
02:12:51,380 --> 02:12:52,900
really useful because you

2451
02:12:52,900 --> 02:12:54,659
to the codebase that want to contribute

2452
02:12:54,659 --> 02:12:56,980
they may want to have easy things to

2453
02:12:56,980 --> 02:12:58,900
tackle first so this allows us to say

2454
02:12:58,900 --> 02:13:00,940
like hey maybe take a look at this issue

2455
02:13:00,940 --> 02:13:02,440
first and you know that will give you

2456
02:13:02,440 --> 02:13:04,300
it's not really challenging but it will

2457
02:13:04,300 --> 02:13:06,040
give you a good overview of how the

2458
02:13:06,040 --> 02:13:08,949
COBIT is we also try to maintain a

2459
02:13:08,949 --> 02:13:10,780
public discussion it's not very easy

2460
02:13:10,780 --> 02:13:12,969
because we're all in on internal

2461
02:13:12,969 --> 02:13:14,409
messaging tools and you know Google

2462
02:13:14,409 --> 02:13:16,390
already has a bunch of them we don't

2463
02:13:16,390 --> 02:13:18,730
want another one but we really try to

2464
02:13:18,730 --> 02:13:20,739
keep the discussion and issues and full

2465
02:13:20,739 --> 02:13:22,929
request comments and so on we also have

2466
02:13:22,929 --> 02:13:25,060
a slack channel where you can find us if

2467
02:13:25,060 --> 02:13:28,120
you're ever using this there's a link

2468
02:13:28,120 --> 02:13:29,920
right there the link is a github link

2469
02:13:29,920 --> 02:13:32,080
but the github link has a link to the

2470
02:13:32,080 --> 02:13:34,449
app to add you to the slide channel so

2471
02:13:34,449 --> 02:13:37,420
follow that if you want will repost the

2472
02:13:37,420 --> 02:13:38,830
link player on and it will be in the

2473
02:13:38,830 --> 02:13:41,500
slides anyways what about a road map

2474
02:13:41,500 --> 02:13:43,270
what's what's the future for a lip clip

2475
02:13:43,270 --> 02:13:45,130
forensics well we have a github project

2476
02:13:45,130 --> 02:13:48,100
page which is the screenshot that is

2477
02:13:48,100 --> 02:13:50,050
here it's part of the project page where

2478
02:13:50,050 --> 02:13:52,870
we try to put what everyone is working

2479
02:13:52,870 --> 02:13:54,610
on so that people can have an idea and

2480
02:13:54,610 --> 02:13:56,230
by people I mean us for now because I

2481
02:13:56,230 --> 02:13:58,150
guess we're the the people who have the

2482
02:13:58,150 --> 02:14:00,940
most interest in knowing we have a

2483
02:14:00,940 --> 02:14:03,159
horizontal roadmap which is basically

2484
02:14:03,159 --> 02:14:05,650
support basic functionality but for more

2485
02:14:05,650 --> 02:14:07,210
cloud providers and we're currently

2486
02:14:07,210 --> 02:14:10,840
working on a juror but you know if if

2487
02:14:10,840 --> 02:14:11,980
this is something that you're interested

2488
02:14:11,980 --> 02:14:13,540
in then maybe you can contribute for

2489
02:14:13,540 --> 02:14:15,640
your own cloud provider we also have the

2490
02:14:15,640 --> 02:14:18,190
vertical real time which is support more

2491
02:14:18,190 --> 02:14:20,980
features for a single cloud provider so

2492
02:14:20,980 --> 02:14:23,469
for instance more disk operations and

2493
02:14:23,469 --> 02:14:25,900
GCB to have for example an instance disk

2494
02:14:25,900 --> 02:14:28,110
become a DD image that could be useful

2495
02:14:28,110 --> 02:14:30,820
and also more granular support for logs

2496
02:14:30,820 --> 02:14:33,400
like for example all the logs that TCP

2497
02:14:33,400 --> 02:14:36,040
supports but also cloud trail from

2498
02:14:36,040 --> 02:14:37,449
Amazon and all the other logs that they

2499
02:14:37,449 --> 02:14:40,030
support and we also want to focus

2500
02:14:40,030 --> 02:14:42,460
heavily on community so I'm trying to

2501
02:14:42,460 --> 02:14:43,960
come up with a contributors guide that I

2502
02:14:43,960 --> 02:14:46,300
hope to publish soon and we also want to

2503
02:14:46,300 --> 02:14:48,040
focus heavily on documentation so that

2504
02:14:48,040 --> 02:14:49,659
people who want to use something like

2505
02:14:49,659 --> 02:14:52,570
this can do so very easily the link

2506
02:14:52,570 --> 02:14:54,699
below is a link to our github project

2507
02:14:54,699 --> 02:14:56,140
page you can also find it through the

2508
02:14:56,140 --> 02:14:57,580
repo if you click on the project's tab

2509
02:14:57,580 --> 02:15:00,880
and that is that is about it for us

2510
02:15:00,880 --> 02:15:03,040
thanks for listening so far if you have

2511
02:15:03,040 --> 02:15:05,080
to remember one thing remember that late

2512
02:15:05,080 --> 02:15:06,670
cloud forensics is a thing that can

2513
02:15:06,670 --> 02:15:09,010
you do forensics in your cloud providers

2514
02:15:09,010 --> 02:15:12,219
and here are all the links you may want

2515
02:15:12,219 --> 02:15:14,170
and need from this presentation so we

2516
02:15:14,170 --> 02:15:15,580
talked about time wolf Derby Nia which

2517
02:15:15,580 --> 02:15:18,520
are tools that we use every day and then

2518
02:15:18,520 --> 02:15:19,870
the Select channel and the blog are

2519
02:15:19,870 --> 02:15:21,969
right there and the blog has been pretty

2520
02:15:21,969 --> 02:15:24,989
active recently and we published a few

2521
02:15:24,989 --> 02:15:27,160
articles about lip cloud forensics but

2522
02:15:27,160 --> 02:15:28,719
also our other tool so if you're curious

2523
02:15:28,719 --> 02:15:29,860
about what we're doing

2524
02:15:29,860 --> 02:15:32,500
feel free to have a look and I guess we

2525
02:15:32,500 --> 02:15:38,380
can take questions now effectively we

2526
02:15:38,380 --> 02:15:41,650
have got some time so we can applause

2527
02:15:41,650 --> 02:15:47,710
first and effectively we have got one

2528
02:15:47,710 --> 02:15:55,420
question here we can probably you can

2529
02:15:55,420 --> 02:15:59,920
take a question in the Q&A cubed query

2530
02:15:59,920 --> 02:16:08,620
button if you want yeah the interface

2531
02:16:08,620 --> 02:16:15,820
disappeared so yeah it says we will be

2532
02:16:15,820 --> 02:16:17,739
able to choose parsers while running

2533
02:16:17,739 --> 02:16:20,320
pleh so that's a question all parser

2534
02:16:20,320 --> 02:16:23,340
will be run automatically with pleasure

2535
02:16:23,340 --> 02:16:26,110
okay so that's that's a really good

2536
02:16:26,110 --> 02:16:28,030
question not about lips no forensics but

2537
02:16:28,030 --> 02:16:31,300
I can still answer it so you can select

2538
02:16:31,300 --> 02:16:34,240
what plus the versions to use class of

2539
02:16:34,240 --> 02:16:36,308
parsers to use when you run plazo but I

2540
02:16:36,308 --> 02:16:39,218
assume this question is more about how

2541
02:16:39,218 --> 02:16:41,888
tinea decides to run plazo and which

2542
02:16:41,888 --> 02:16:44,200
parses it decides to run so one of the

2543
02:16:44,200 --> 02:16:45,849
features that Aaron who's working on

2544
02:16:45,849 --> 02:16:48,459
Ruby Nia is working on right now is to

2545
02:16:48,459 --> 02:16:51,070
have some sort of recipes with which you

2546
02:16:51,070 --> 02:16:53,349
can launch trivia and in that case you

2547
02:16:53,349 --> 02:16:55,240
could say hey trivia I want you to run

2548
02:16:55,240 --> 02:16:56,620
propose oh but I only want you to run

2549
02:16:56,620 --> 02:16:59,170
very specific parsers or basically run

2550
02:16:59,170 --> 02:17:02,590
pleaseth or with these options just like

2551
02:17:02,590 --> 02:17:04,540
you could have please export it two

2552
02:17:04,540 --> 02:17:06,010
times to catch fit only run these

2553
02:17:06,010 --> 02:17:08,290
specific analyzers or maybe even you

2554
02:17:08,290 --> 02:17:10,269
know just run plazo and done and run

2555
02:17:10,269 --> 02:17:12,910
strings on the whole disk so yes this is

2556
02:17:12,910 --> 02:17:15,160
customizable in intervener and plasmids

2557
02:17:15,160 --> 02:17:16,570
are already a thing so you can just pick

2558
02:17:16,570 --> 02:17:18,790
the parses that you want and try B Nia

2559
02:17:18,790 --> 02:17:20,679
will soon be implementing this recipe

2560
02:17:20,679 --> 02:17:21,939
mechanism which is a little bit more

2561
02:17:21,939 --> 02:17:31,239
complex there's a one in question I can

2562
02:17:31,239 --> 02:17:34,330
read it I think it is a kind of troll

2563
02:17:34,330 --> 02:17:37,478
but you have to we have to deal with I

2564
02:17:37,478 --> 02:17:43,718
will tip an ting makes Piton less yellow

2565
02:17:43,718 --> 02:17:46,840
why you spied on at all if you want type

2566
02:17:46,840 --> 02:17:51,269
safety okay that's a great question I

2567
02:17:51,269 --> 02:17:54,790
don't think type safety is something

2568
02:17:54,790 --> 02:17:57,879
that we want it's always good to have it

2569
02:17:57,879 --> 02:18:00,910
I think and it's something that Python

2570
02:18:00,910 --> 02:18:03,429
really lacks but the main question is

2571
02:18:03,429 --> 02:18:05,410
why I guess where are we using Python if

2572
02:18:05,410 --> 02:18:07,449
we could be using any other thing the

2573
02:18:07,449 --> 02:18:08,920
main the main the main reason is because

2574
02:18:08,920 --> 02:18:10,929
all our other tools are already Python

2575
02:18:10,929 --> 02:18:12,580
for example DF Tom wolf is already

2576
02:18:12,580 --> 02:18:15,968
Python so importing Lib plot forensics

2577
02:18:15,968 --> 02:18:19,359
would be very easy in time wolf and all

2578
02:18:19,359 --> 02:18:21,459
the other tools that we use so let's say

2579
02:18:21,459 --> 02:18:23,349
that this is our code base that is maybe

2580
02:18:23,349 --> 02:18:25,359
the meanest in that way with type

2581
02:18:25,359 --> 02:18:33,040
hinting so yeah okay I can actually see

2582
02:18:33,040 --> 02:18:34,299
the questions now so that's much better

2583
02:18:34,299 --> 02:18:41,290
yeah perfect but there's no questions

2584
02:18:41,290 --> 02:18:48,910
anymore oh well maybe one more if you if

2585
02:18:48,910 --> 02:18:52,629
you run yourself you the the forensic

2586
02:18:52,629 --> 02:18:55,859
analysis okay can you give us an ID on

2587
02:18:55,859 --> 02:19:01,090
what scale or on any cloud instances you

2588
02:19:01,090 --> 02:19:06,160
can actually examine or analyze with

2589
02:19:06,160 --> 02:19:09,849
with these tools at once well what is

2590
02:19:09,849 --> 02:19:12,010
the scale what is the goal in terms of

2591
02:19:12,010 --> 02:19:13,620
scale

2592
02:19:13,620 --> 02:19:17,290
okay that's that's a good question so

2593
02:19:17,290 --> 02:19:19,718
the goals in terms of scale are to be

2594
02:19:19,718 --> 02:19:23,410
able to scale right for now it is true

2595
02:19:23,410 --> 02:19:25,349
that we haven't considered

2596
02:19:25,349 --> 02:19:28,660
parallelizing lib cut forensics or its

2597
02:19:28,660 --> 02:19:32,379
functionality but main time singh in

2598
02:19:32,379 --> 02:19:34,709
doing this won't be sick

2599
02:19:34,709 --> 02:19:37,888
in the in the cloud forensics library it

2600
02:19:37,888 --> 02:19:41,879
will be more waiting on the GC people on

2601
02:19:41,879 --> 02:19:45,000
the DCP platform to actually do the

2602
02:19:45,000 --> 02:19:48,090
actions right so in that way it would be

2603
02:19:48,090 --> 02:19:50,399
fairly easy for us to just you know

2604
02:19:50,399 --> 02:19:54,510
thread the the CLI invocation in a

2605
02:19:54,510 --> 02:19:55,830
basket or something so that that would

2606
02:19:55,830 --> 02:19:58,140
work on the other hand Derby Nia and

2607
02:19:58,140 --> 02:20:01,800
time sketch I really made to to be able

2608
02:20:01,800 --> 02:20:04,290
to to scale a lot and try B Nia can deal

2609
02:20:04,290 --> 02:20:06,600
with a lot of disks at the same time

2610
02:20:06,600 --> 02:20:09,090
it's like running plasma in the cloud

2611
02:20:09,090 --> 02:20:11,220
but on a very very beefy BM right and

2612
02:20:11,220 --> 02:20:13,560
time sketch can also deal with hundreds

2613
02:20:13,560 --> 02:20:16,229
of timelines at the same time so these

2614
02:20:16,229 --> 02:20:17,790
two other tools I really major scale and

2615
02:20:17,790 --> 02:20:21,180
time Wolff is made to orchestrate all

2616
02:20:21,180 --> 02:20:27,720
these tools between them so yeah ok t/o

2617
02:20:27,720 --> 02:20:29,660
did you have something to add to the

2618
02:20:29,660 --> 02:20:32,609
typing question because I saw that the

2619
02:20:32,609 --> 02:20:34,380
notification said that you would answer

2620
02:20:34,380 --> 02:20:36,300
something yeah I was just clicking

2621
02:20:36,300 --> 02:20:39,449
buttons but I guess it would be worth

2622
02:20:39,449 --> 02:20:42,330
adding it also just helps us catch

2623
02:20:42,330 --> 02:20:44,760
mistakes because back then being pythons

2624
02:20:44,760 --> 02:20:46,979
sometimes just write things and you

2625
02:20:46,979 --> 02:20:48,479
might overwrite variables or whatever

2626
02:20:48,479 --> 02:20:50,189
and then passed some functions something

2627
02:20:50,189 --> 02:20:53,120
is really not expected and so rather

2628
02:20:53,120 --> 02:20:58,050
instead of waiting that it just explodes

2629
02:20:58,050 --> 02:21:00,000
when you're actually running the tool we

2630
02:21:00,000 --> 02:21:02,399
we can just use type hinting to help us

2631
02:21:02,399 --> 02:21:04,350
catch this error here and just make sure

2632
02:21:04,350 --> 02:21:09,710
our tools are safe to use so to speak

2633
02:21:11,569 --> 02:21:18,080
okay so no more question in the audience

2634
02:21:18,080 --> 02:21:23,899
we have got around 10 minutes ahead so

2635
02:21:23,899 --> 02:21:28,290
we can stand by and take in as opposed

2636
02:21:28,290 --> 02:21:34,979
or we can also switch to IRC if you want

2637
02:21:34,979 --> 02:21:37,429
to chat

2638
02:21:37,950 --> 02:21:44,460
the question on Biden has been asked the

2639
02:21:44,460 --> 02:21:49,950
first time on freenode so I can join the

2640
02:21:49,950 --> 02:21:54,600
IRC channel and yeah it's okay it's okay

2641
02:21:54,600 --> 02:21:59,280
so we take nine minute polls before the

2642
02:21:59,280 --> 02:22:05,510
last talk wisdom about Frieda and QB da

2643
02:22:05,510 --> 02:22:11,550
so see you there thank you thank you

2644
02:22:11,550 --> 02:22:13,880
very much

2645
02:24:55,690 --> 02:24:57,750
you

2646
02:25:03,990 --> 02:25:07,090
[Music]

2647
02:25:13,680 --> 02:25:16,770
[Music]

2648
02:26:56,630 --> 02:26:59,880
[Music]

2649
02:27:02,890 --> 02:27:08,909
[Music]

2650
02:28:09,800 --> 02:28:12,869
[Music]

2651
02:29:43,300 --> 02:29:46,670
[Music]

2652
02:29:51,540 --> 02:29:54,719
[Music]

2653
02:30:30,310 --> 02:30:36,180
[Music]

2654
02:30:41,110 --> 02:30:43,170
you

2655
02:30:52,209 --> 02:30:59,050
you stuffed it it's better on mute so

2656
02:30:59,050 --> 02:31:01,029
Thank You Philip

2657
02:31:01,029 --> 02:31:05,069
well we are back for our last talk of

2658
02:31:05,069 --> 02:31:08,739
this afternoon we are going to welcome

2659
02:31:08,739 --> 02:31:13,619
Tom chica from quartz lab talking about

2660
02:31:13,619 --> 02:31:17,890
combined advantages of Frida and Cuba di

2661
02:31:17,890 --> 02:31:23,109
on Android Tom the stage is yours thank

2662
02:31:23,109 --> 02:31:27,579
you can you read me perfectly okay cool

2663
02:31:27,579 --> 02:31:35,350
okay so it's sure my screen first can

2664
02:31:35,350 --> 02:31:39,939
you see my screen I hope so yes full

2665
02:31:39,939 --> 02:31:44,140
screen for the moment with slide okay

2666
02:31:44,140 --> 02:31:51,899
that's perfect okay so um here we go

2667
02:31:51,899 --> 02:31:54,489
however one today I'm gonna talk about

2668
02:31:54,489 --> 02:31:57,069
how Friday and Cuba di can be used

2669
02:31:57,069 --> 02:31:59,380
together to make reverse engineering is

2670
02:31:59,380 --> 02:32:03,609
zero on Android so first of all quick

2671
02:32:03,609 --> 02:32:06,789
introduction Who am I I'm Tom I work as

2672
02:32:06,789 --> 02:32:09,100
a security engineer at quacks lab which

2673
02:32:09,100 --> 02:32:12,459
is a security company based in Paris I'm

2674
02:32:12,459 --> 02:32:14,979
mainly interested in stuff related to

2675
02:32:14,979 --> 02:32:18,060
Android like reverse engineering

2676
02:32:18,060 --> 02:32:22,930
instrumentation fuzzing and tooling yeah

2677
02:32:22,930 --> 02:32:26,470
so that's pretty much hold for me before

2678
02:32:26,470 --> 02:32:28,569
we get started I will give you some

2679
02:32:28,569 --> 02:32:30,999
background about Android reverse

2680
02:32:30,999 --> 02:32:33,100
engineering some of you it may be

2681
02:32:33,100 --> 02:32:36,939
something you already know but I want to

2682
02:32:36,939 --> 02:32:38,919
make sure that everyone is ok with this

2683
02:32:38,919 --> 02:32:43,479
concept before I mean digging into the

2684
02:32:43,479 --> 02:32:48,029
following parts okay so let's begin with

2685
02:32:48,029 --> 02:32:50,680
Android application ecosystem

2686
02:32:50,680 --> 02:32:53,380
so Android programmers develop their

2687
02:32:53,380 --> 02:32:55,770
application is your java or coding

2688
02:32:55,770 --> 02:32:59,260
languages then this code is compiled

2689
02:32:59,260 --> 02:33:01,930
into dalvik bytecode if you're

2690
02:33:01,930 --> 02:33:04,119
interested in knowing what this bytecode

2691
02:33:04,119 --> 02:33:06,580
is about you can have a look

2692
02:33:06,580 --> 02:33:10,641
after that the bytecode is tow-in text

2693
02:33:10,641 --> 02:33:13,851
files which stand for dalvik executable

2694
02:33:13,851 --> 02:33:17,780
and finally these files are embedded in

2695
02:33:17,780 --> 02:33:18,471
the Fanie

2696
02:33:18,471 --> 02:33:21,261
the the final apk file which basically

2697
02:33:21,261 --> 02:33:25,521
represent the the application when it

2698
02:33:25,521 --> 02:33:28,040
comes to running the application this

2699
02:33:28,040 --> 02:33:30,561
code needs to be executed so before

2700
02:33:30,561 --> 02:33:33,320
hundred five it was done thanks to a

2701
02:33:33,320 --> 02:33:36,410
virtual machine called dalvik VM

2702
02:33:36,410 --> 02:33:39,530
but since performances weren't that good

2703
02:33:39,530 --> 02:33:42,530
it was next replaced by another approach

2704
02:33:42,530 --> 02:33:45,801
called Android runtime which consists of

2705
02:33:45,801 --> 02:33:48,171
compiling ahead of time the dalvik

2706
02:33:48,171 --> 02:33:50,320
bytecode information card which can be

2707
02:33:50,320 --> 02:33:51,700
executed

2708
02:33:51,700 --> 02:33:56,931
executed natively on the CPU regarding

2709
02:33:56,931 --> 02:33:59,841
reverse engineering there was some tools

2710
02:33:59,841 --> 02:34:04,251
out there such as Jade X and apktool to

2711
02:34:04,251 --> 02:34:07,211
operate through a human readable

2712
02:34:07,211 --> 02:34:10,370
representation of the code that way you

2713
02:34:10,370 --> 02:34:12,980
can retrieve some things that really

2714
02:34:12,980 --> 02:34:18,021
looks like the the original code on top

2715
02:34:18,021 --> 02:34:21,110
of that Android I mean especially Java

2716
02:34:21,110 --> 02:34:23,931
provides an interface to allow developer

2717
02:34:23,931 --> 02:34:26,511
to write and call native code from their

2718
02:34:26,511 --> 02:34:29,511
from the Java side this mechanism is

2719
02:34:29,511 --> 02:34:32,301
called Java native interface which is

2720
02:34:32,301 --> 02:34:36,200
often just shortened gni technically

2721
02:34:36,200 --> 02:34:38,721
speaking the card is put into a show

2722
02:34:38,721 --> 02:34:41,360
library which is embedded in the apk

2723
02:34:41,360 --> 02:34:43,551
file and is loaded into memory at

2724
02:34:43,551 --> 02:34:47,150
runtime so now reverse engineering is

2725
02:34:47,150 --> 02:34:49,881
more difficult because you need you need

2726
02:34:49,881 --> 02:34:55,221
to deal with native code okay so now

2727
02:34:55,221 --> 02:34:57,891
let's pretend you're developer and you

2728
02:34:57,891 --> 02:34:59,931
want to protect your encryption function

2729
02:34:59,931 --> 02:35:03,080
which is basically a simple function

2730
02:35:03,080 --> 02:35:04,721
because you're really good at

2731
02:35:04,721 --> 02:35:08,450
cryptography you can see that when you

2732
02:35:08,450 --> 02:35:11,961
decompile the the dalvik bytecode into

2733
02:35:11,961 --> 02:35:14,351
Java representation with jeddaks

2734
02:35:14,351 --> 02:35:16,940
everything remains pretty much the same

2735
02:35:16,940 --> 02:35:20,050
except function and horrible names

2736
02:35:20,050 --> 02:35:23,300
it's mostly due to ProGuard which is a

2737
02:35:23,300 --> 02:35:26,330
an optimizer which provides minimal

2738
02:35:26,330 --> 02:35:28,780
protection against reverse engineering

2739
02:35:28,780 --> 02:35:32,690
so that's not a really great idea to

2740
02:35:32,690 --> 02:35:34,460
write sensitive function like that

2741
02:35:34,460 --> 02:35:36,891
because an attacker could understand and

2742
02:35:36,891 --> 02:35:42,980
was at a forum okay so now let's ship

2743
02:35:42,980 --> 02:35:45,860
this function to the native side so of

2744
02:35:45,860 --> 02:35:48,681
course you need to pass birth of length

2745
02:35:48,681 --> 02:35:51,530
in arguments but the logic is pretty

2746
02:35:51,530 --> 02:35:55,010
much the same we can try to compile it

2747
02:35:55,010 --> 02:35:57,561
and see what the life the graph looks

2748
02:35:57,561 --> 02:36:03,380
like in the disassemble okay so if you

2749
02:36:03,380 --> 02:36:06,530
choose not to use enough Escada we can

2750
02:36:06,530 --> 02:36:08,750
more or less easily understand what this

2751
02:36:08,750 --> 02:36:11,750
function is doing I mean at the top of

2752
02:36:11,750 --> 02:36:14,210
the function with the first basic block

2753
02:36:14,210 --> 02:36:16,431
is presumably responsible for

2754
02:36:16,431 --> 02:36:19,460
initialization then we clearly see a

2755
02:36:19,460 --> 02:36:22,460
loop with the loop condition on the left

2756
02:36:22,460 --> 02:36:24,561
the processing block which contains the

2757
02:36:24,561 --> 02:36:27,561
server instructions and on the right the

2758
02:36:27,561 --> 02:36:31,700
epilogue of the function now with

2759
02:36:31,700 --> 02:36:33,190
obfuscation

2760
02:36:33,190 --> 02:36:35,931
it's like much more complicated to

2761
02:36:35,931 --> 02:36:37,940
understand what's going on because I

2762
02:36:37,940 --> 02:36:41,000
mean at least statically because LLVM

2763
02:36:41,000 --> 02:36:43,460
used some office keishon technique like

2764
02:36:43,460 --> 02:36:45,980
flattening to scrambles the control flow

2765
02:36:45,980 --> 02:36:49,370
so it's just a pain to understand that

2766
02:36:49,370 --> 02:36:51,351
this function is actually a simpler

2767
02:36:51,351 --> 02:36:56,681
encryption so we need another approach

2768
02:36:56,681 --> 02:37:00,500
we can still try to understand what this

2769
02:37:00,500 --> 02:37:03,681
function is doing dynamically with the

2770
02:37:03,681 --> 02:37:07,311
debugger like gdb or LGB there's many

2771
02:37:07,311 --> 02:37:09,590
techniques out there to detect the

2772
02:37:09,590 --> 02:37:13,250
presence of P trace and developers often

2773
02:37:13,250 --> 02:37:14,960
rely on them to protect their

2774
02:37:14,960 --> 02:37:17,391
application from being debugged by

2775
02:37:17,391 --> 02:37:21,699
attackers so it's not really practicable

2776
02:37:22,181 --> 02:37:26,271
okay so now let's introduce Frater I

2777
02:37:26,271 --> 02:37:29,240
suppose most of you on within afraid

2778
02:37:29,240 --> 02:37:31,610
especially if you're into mobile

2779
02:37:31,610 --> 02:37:33,170
security

2780
02:37:33,170 --> 02:37:36,351
basically Friday is a GBI toolkit which

2781
02:37:36,351 --> 02:37:39,200
allows user to inject some card entry

2782
02:37:39,200 --> 02:37:42,051
process in the context of Android

2783
02:37:42,051 --> 02:37:45,080
it's rather application

2784
02:37:45,080 --> 02:37:48,080
unlike debuggers only injection relies

2785
02:37:48,080 --> 02:37:50,450
on petraeus so it's order for a process

2786
02:37:50,450 --> 02:37:53,360
to not ice it's being it's being

2787
02:37:53,360 --> 02:37:57,080
inspected but for example you can inject

2788
02:37:57,080 --> 02:37:59,091
the friday library on your own without

2789
02:37:59,091 --> 02:38:03,561
using the injector trader is widely used

2790
02:38:03,561 --> 02:38:06,380
on android because reverse engineer can

2791
02:38:06,380 --> 02:38:09,650
run the the friday server on the remote

2792
02:38:09,650 --> 02:38:13,280
devices develop and inject their script

2793
02:38:13,280 --> 02:38:16,070
directly from their AHS machine so it's

2794
02:38:16,070 --> 02:38:19,580
really convenient and they can debug at

2795
02:38:19,580 --> 02:38:22,221
both Java and native levels so it's

2796
02:38:22,221 --> 02:38:27,650
really powerful in practice how does it

2797
02:38:27,650 --> 02:38:29,960
work first we need to find the address

2798
02:38:29,960 --> 02:38:32,931
of the function we're interested in and

2799
02:38:32,931 --> 02:38:35,601
declare callbacks which will be called

2800
02:38:35,601 --> 02:38:37,700
before and after the the function is

2801
02:38:37,700 --> 02:38:41,301
called so that way you can print the

2802
02:38:41,301 --> 02:38:43,160
arguments passed to the function and the

2803
02:38:43,160 --> 02:38:47,950
region value however we still face some

2804
02:38:47,950 --> 02:38:52,030
limitation here as you can see because

2805
02:38:52,030 --> 02:38:55,641
we we can print arguments but we're not

2806
02:38:55,641 --> 02:38:59,181
able to understand how the function

2807
02:38:59,181 --> 02:39:02,690
processes them so that's where Cuba di

2808
02:39:02,690 --> 02:39:05,750
can give us a hand to better I mean

2809
02:39:05,750 --> 02:39:10,780
deeper understand this function okay so

2810
02:39:10,780 --> 02:39:15,471
first of quick introduction of Cuba di q

2811
02:39:15,471 --> 02:39:18,860
media has been initially developed by

2812
02:39:18,860 --> 02:39:22,400
Cedric this year and Charlie Bob when

2813
02:39:22,400 --> 02:39:25,431
working at quad club like Friday

2814
02:39:25,431 --> 02:39:28,790
it's GBI framework but it it has been

2815
02:39:28,790 --> 02:39:32,061
designed another way indeed it's based

2816
02:39:32,061 --> 02:39:35,210
on LLVM and it rather work at basic

2817
02:39:35,210 --> 02:39:38,660
block and instruction scale and yes

2818
02:39:38,660 --> 02:39:40,790
that's why it can help us get an

2819
02:39:40,790 --> 02:39:42,620
accurate understanding of the function

2820
02:39:42,620 --> 02:39:45,720
we're looking into

2821
02:39:45,720 --> 02:39:49,849
that's cool but how to use it

2822
02:39:50,550 --> 02:39:53,729
DBI tool doesn't instrument the old code

2823
02:39:53,729 --> 02:39:56,430
because it would be like a pain in term

2824
02:39:56,430 --> 02:39:59,819
of performances as a result we need to

2825
02:39:59,819 --> 02:40:01,859
explicitly specify some parts of the

2826
02:40:01,859 --> 02:40:04,949
memory we're interested in it can be a

2827
02:40:04,949 --> 02:40:07,619
whole module or only a specific part of

2828
02:40:07,619 --> 02:40:08,939
it

2829
02:40:08,939 --> 02:40:11,489
you can also instrument the entire outer

2830
02:40:11,489 --> 02:40:13,409
space but I highly discourage you from

2831
02:40:13,409 --> 02:40:15,810
doing so because it's super heavy and

2832
02:40:15,810 --> 02:40:18,630
there's a few use cases where you need

2833
02:40:18,630 --> 02:40:21,869
to instrument of the process so yeah

2834
02:40:21,869 --> 02:40:26,369
it's not a great idea then in order to

2835
02:40:26,369 --> 02:40:29,550
tell QB di what you want to gather you

2836
02:40:29,550 --> 02:40:32,959
need to define what we call callbacks

2837
02:40:32,959 --> 02:40:35,640
basically a callback is a function

2838
02:40:35,640 --> 02:40:38,789
called whenever encountering a specific

2839
02:40:38,789 --> 02:40:42,539
situation for example before after

2840
02:40:42,539 --> 02:40:45,390
executing an instruction when you come

2841
02:40:45,390 --> 02:40:47,520
across a new basic block you haven't

2842
02:40:47,520 --> 02:40:50,010
seen before or when the code jams to

2843
02:40:50,010 --> 02:40:53,609
arrange that isn't handled by QB di it's

2844
02:40:53,609 --> 02:40:55,970
like really useful for forgetting

2845
02:40:55,970 --> 02:41:00,380
dependency like library code for example

2846
02:41:00,920 --> 02:41:05,279
okay so that was theory but now let's

2847
02:41:05,279 --> 02:41:07,829
play around with the C++ API with a

2848
02:41:07,829 --> 02:41:10,709
quick demo so I'm gonna detail all these

2849
02:41:10,709 --> 02:41:14,880
tapes while showing you the code so I

2850
02:41:14,880 --> 02:41:23,569
hope it worked okay

2851
02:41:23,569 --> 02:41:26,959
I hope you can see my screen so the

2852
02:41:26,959 --> 02:41:29,749
scenario is we are the library called

2853
02:41:29,749 --> 02:41:32,689
strong crypto which contains an

2854
02:41:32,689 --> 02:41:35,539
interesting function called in place and

2855
02:41:35,539 --> 02:41:38,539
crypt basically we would like to

2856
02:41:38,539 --> 02:41:40,729
generate an execution trace of this

2857
02:41:40,729 --> 02:41:44,390
function so first of all we need to load

2858
02:41:44,390 --> 02:41:47,689
the library into the process the process

2859
02:41:47,689 --> 02:41:51,310
memory so it's just a call to DL open

2860
02:41:51,310 --> 02:41:53,779
then we need to find the address of the

2861
02:41:53,779 --> 02:41:58,100
function with gel sim then we need to

2862
02:41:58,100 --> 02:42:00,379
set up the arguments that needs to be

2863
02:42:00,379 --> 02:42:04,010
pasted to the function so there's only

2864
02:42:04,010 --> 02:42:07,369
four here so here is the key the length

2865
02:42:07,369 --> 02:42:10,640
of the key the message and the left the

2866
02:42:10,640 --> 02:42:13,189
length of the message and then we can

2867
02:42:13,189 --> 02:42:16,310
execute the function through QB di so

2868
02:42:16,310 --> 02:42:17,979
let's have a look at this function here

2869
02:42:17,979 --> 02:42:22,669
okay first of all we need to create the

2870
02:42:22,669 --> 02:42:26,600
the QB di VM then we need to locate a

2871
02:42:26,600 --> 02:42:30,829
virtual stack here of size 100 in exam

2872
02:42:30,829 --> 02:42:35,300
oh we can we need to define the the

2873
02:42:35,300 --> 02:42:37,939
range the instrument age range so real

2874
02:42:37,939 --> 02:42:41,659
here is like the whole module the the

2875
02:42:41,659 --> 02:42:45,919
func the the function is contained in we

2876
02:42:45,919 --> 02:42:48,800
need to define a callback so here this

2877
02:42:48,800 --> 02:42:51,310
function will be called before executing

2878
02:42:51,310 --> 02:42:54,850
instruction this function hold me just

2879
02:42:54,850 --> 02:42:58,010
is responsible for printing the the

2880
02:42:58,010 --> 02:43:00,589
current address and the disassembly of

2881
02:43:00,589 --> 02:43:04,939
the of the instruction then we need to

2882
02:43:04,939 --> 02:43:07,459
simulate the call it means to prepare

2883
02:43:07,459 --> 02:43:10,879
the registers and the virtual stack with

2884
02:43:10,879 --> 02:43:13,930
arguments and the region value that way

2885
02:43:13,930 --> 02:43:17,329
cubanía I can know when the the

2886
02:43:17,329 --> 02:43:21,379
execution is over then we would just run

2887
02:43:21,379 --> 02:43:24,439
the functions for QB do I get the region

2888
02:43:24,439 --> 02:43:27,379
value free the virtual stack and just

2889
02:43:27,379 --> 02:43:31,789
region let's run it to see okay

2890
02:43:31,789 --> 02:43:36,490
so let's compile it and just

2891
02:43:36,490 --> 02:43:43,330
ready okay so it it seems great sorry

2892
02:43:43,330 --> 02:43:45,910
we have the address and the disassembly

2893
02:43:45,910 --> 02:43:47,979
of the of the instructions so - but

2894
02:43:47,979 --> 02:43:51,750
let's get back to the slides

2895
02:43:52,350 --> 02:43:58,290
okay so now what if we could combine

2896
02:43:58,290 --> 02:44:02,500
like Friday and Cuba DIY together to do

2897
02:44:02,500 --> 02:44:06,670
so we're gonna have a look at the

2898
02:44:06,670 --> 02:44:09,250
concrete example I suppose that everyone

2899
02:44:09,250 --> 02:44:11,290
here has already heard of what's up

2900
02:44:11,290 --> 02:44:14,280
which is currently the most downloaded

2901
02:44:14,280 --> 02:44:17,500
instant messaging application so it

2902
02:44:17,500 --> 02:44:20,110
could be a great fit a great target for

2903
02:44:20,110 --> 02:44:20,290
us

2904
02:44:20,290 --> 02:44:24,160
I have we've noticed it embeds a library

2905
02:44:24,160 --> 02:44:26,320
called Lee brought up which contains a

2906
02:44:26,320 --> 02:44:29,920
large part of their code since it's a

2907
02:44:29,920 --> 02:44:32,830
genie library the first function called

2908
02:44:32,830 --> 02:44:35,200
right after the library loading is gni a

2909
02:44:35,200 --> 02:44:38,770
lot this function is worse inspecting

2910
02:44:38,770 --> 02:44:42,100
because developers sometime use it to to

2911
02:44:42,100 --> 02:44:47,500
hide some secret mechanism in it in

2912
02:44:47,500 --> 02:44:49,030
order to understand what this function

2913
02:44:49,030 --> 02:44:51,670
is doing we would like to know which

2914
02:44:51,670 --> 02:44:54,100
part of the code are actually executed

2915
02:44:54,100 --> 02:44:57,040
for example like we just did we could

2916
02:44:57,040 --> 02:44:59,860
generate an execution trace containing

2917
02:44:59,860 --> 02:45:02,340
every instruction that has been executed

2918
02:45:02,340 --> 02:45:05,620
from the beginning to the end of the

2919
02:45:05,620 --> 02:45:09,690
function I mean including sub functions

2920
02:45:09,690 --> 02:45:12,940
the idea is instead of letting the the

2921
02:45:12,940 --> 02:45:15,640
function run as usual we could execute

2922
02:45:15,640 --> 02:45:19,450
it through pre BDI interact is we can

2923
02:45:19,450 --> 02:45:22,150
take advantage of the the replays

2924
02:45:22,150 --> 02:45:24,040
feature of writer to change the real

2925
02:45:24,040 --> 02:45:27,130
implementation of the function so we're

2926
02:45:27,130 --> 02:45:29,890
going to set up qbi with the proper

2927
02:45:29,890 --> 02:45:33,610
context execute gni unload with QB di

2928
02:45:33,610 --> 02:45:37,000
and then forward the return value to

2929
02:45:37,000 --> 02:45:39,390
prevent the application from crashing

2930
02:45:39,390 --> 02:45:44,740
like resume the application normally so

2931
02:45:44,740 --> 02:45:45,850
let's have a look at the implementation

2932
02:45:45,850 --> 02:45:49,800
to better understand helps area

2933
02:45:50,060 --> 02:45:53,090
[Music]

2934
02:45:53,090 --> 02:45:59,670
okay so here is the Friday scripts first

2935
02:45:59,670 --> 02:46:03,000
things like live whatsapp will be loaded

2936
02:46:03,000 --> 02:46:05,640
dynamically we need to wait for it to be

2937
02:46:05,640 --> 02:46:09,710
loaded in memory so yeah we need to wait

2938
02:46:09,710 --> 02:46:12,330
to do so first of all we need to attach

2939
02:46:12,330 --> 02:46:15,300
the GL open implementation of Android

2940
02:46:15,300 --> 02:46:19,649
so here check the first parameter which

2941
02:46:19,649 --> 02:46:22,140
is a fine name and if it's the right

2942
02:46:22,140 --> 02:46:25,050
library we just replace called the

2943
02:46:25,050 --> 02:46:28,319
replace function here and we're gonna

2944
02:46:28,319 --> 02:46:33,060
have a see it at this function okay so

2945
02:46:33,060 --> 02:46:35,069
this function is responsible for

2946
02:46:35,069 --> 02:46:37,859
replacing the implementation of general

2947
02:46:37,859 --> 02:46:44,220
load first it needs to like reboot to

2948
02:46:44,220 --> 02:46:46,560
the initial implementation because

2949
02:46:46,560 --> 02:46:49,290
fraida as instrumented the function and

2950
02:46:49,290 --> 02:46:52,740
then we need to make sure that changes

2951
02:46:52,740 --> 02:46:54,810
have been committed properly with the

2952
02:46:54,810 --> 02:46:58,350
call to flash then we need to execute

2953
02:46:58,350 --> 02:47:01,140
the function through PDI and call this

2954
02:47:01,140 --> 02:47:08,189
same function again just to because we I

2955
02:47:08,189 --> 02:47:11,069
mean if Gina unload is called at some

2956
02:47:11,069 --> 02:47:15,029
point we just need to call this this new

2957
02:47:15,029 --> 02:47:18,479
function and not the real one in begin

2958
02:47:18,479 --> 02:47:20,670
in the case of janae on what it's

2959
02:47:20,670 --> 02:47:22,380
supposed to be called only one so

2960
02:47:22,380 --> 02:47:26,090
there's no issue is just for generousity

2961
02:47:26,090 --> 02:47:28,800
okay so let's have a look at the the

2962
02:47:28,800 --> 02:47:31,859
execution function the qbi execution

2963
02:47:31,859 --> 02:47:34,770
function it's almost the same that I

2964
02:47:34,770 --> 02:47:37,319
showed you in C++ except that now we

2965
02:47:37,319 --> 02:47:41,520
need to synchronize CPU register with

2966
02:47:41,520 --> 02:47:45,359
qbi ones to avoid some sides of side

2967
02:47:45,359 --> 02:47:50,819
effects yeah and that's pretty much the

2968
02:47:50,819 --> 02:47:55,350
same only to create the QED IVM allocate

2969
02:47:55,350 --> 02:47:57,689
the virtual stack instrument the module

2970
02:47:57,689 --> 02:48:01,979
and extract cetera Co here we call the

2971
02:48:01,979 --> 02:48:02,360
function

2972
02:48:02,360 --> 02:48:05,120
Vidia in the context of QbD i get the

2973
02:48:05,120 --> 02:48:07,880
region value and synchronize back the

2974
02:48:07,880 --> 02:48:11,660
context if needed and that's pretty much

2975
02:48:11,660 --> 02:48:22,221
all let's try to run it not truly ok so

2976
02:48:22,221 --> 02:48:24,801
first of all we need to we have to

2977
02:48:24,801 --> 02:48:26,570
compile the code to be able to access

2978
02:48:26,570 --> 02:48:34,341
the friday bindings ok

2979
02:48:34,341 --> 02:48:37,610
it was a long and now let's try to spawn

2980
02:48:37,610 --> 02:48:42,101
the whatsapp application with the screen

2981
02:48:42,490 --> 02:48:46,370
ok so it seems to work we have the

2982
02:48:46,370 --> 02:48:48,801
address and we have the disassembly of

2983
02:48:48,801 --> 02:48:51,620
the instructions oh yeah it seems to

2984
02:48:51,620 --> 02:48:56,181
work I don't know if you can see that

2985
02:48:56,181 --> 02:49:03,351
like like the emulator book ok so it

2986
02:49:03,351 --> 02:49:06,290
works I think you can get back to the

2987
02:49:06,290 --> 02:49:14,630
slide so having an execution trace like

2988
02:49:14,630 --> 02:49:16,580
that is great but not really convenient

2989
02:49:16,580 --> 02:49:20,380
to inspect to be honest I mean it's not

2990
02:49:20,380 --> 02:49:23,750
as visual as it would be in a

2991
02:49:23,750 --> 02:49:26,681
disassembler with graph view for example

2992
02:49:26,681 --> 02:49:30,170
when you can clearly see a conditional

2993
02:49:30,170 --> 02:49:34,070
branches loops and so on so a good

2994
02:49:34,070 --> 02:49:35,931
option could be to integrate this

2995
02:49:35,931 --> 02:49:38,120
information is a little similar like Ida

2996
02:49:38,120 --> 02:49:44,000
Hydra now we have to generate a code

2997
02:49:44,000 --> 02:49:46,460
coverage file that can be imported into

2998
02:49:46,460 --> 02:49:50,030
both either in gaja unfortunately this

2999
02:49:50,030 --> 02:49:52,580
can be done natively but instead we need

3000
02:49:52,580 --> 02:49:55,641
to use external plugins like lighthouse

3001
02:49:55,641 --> 02:50:00,320
and dragon dance these to work with geo

3002
02:50:00,320 --> 02:50:03,200
code files to colorize the executed

3003
02:50:03,200 --> 02:50:07,521
blocks executive basic blocks so the

3004
02:50:07,521 --> 02:50:10,070
idea is to reuse the previous script to

3005
02:50:10,070 --> 02:50:12,141
gather information we need like memory

3006
02:50:12,141 --> 02:50:14,540
layout and the basic blocks that have

3007
02:50:14,540 --> 02:50:15,859
been hit through

3008
02:50:15,859 --> 02:50:19,009
the execution and finally generate code

3009
02:50:19,009 --> 02:50:21,229
coverage file that can be loaded into

3010
02:50:21,229 --> 02:50:26,419
disassemble so let's see what it takes

3011
02:50:26,419 --> 02:50:37,939
to make it work okay here okay so as you

3012
02:50:37,939 --> 02:50:41,089
can see the strip is pretty much the

3013
02:50:41,089 --> 02:50:44,989
same that's the one I just show you

3014
02:50:44,989 --> 02:50:47,989
however now we need to run the script

3015
02:50:47,989 --> 02:50:51,289
from a Python pod we control basically

3016
02:50:51,289 --> 02:50:53,899
the the Python side will receive

3017
02:50:53,899 --> 02:50:56,060
information for the from the JavaScript

3018
02:50:56,060 --> 02:50:57,979
side and will be responsible for

3019
02:50:57,979 --> 02:51:01,489
creating the output coverage file in the

3020
02:51:01,489 --> 02:51:05,179
proper format so as it's not really

3021
02:51:05,179 --> 02:51:07,789
interesting we're only going to focus on

3022
02:51:07,789 --> 02:51:09,589
how to retrieve runtime information we

3023
02:51:09,589 --> 02:51:12,199
need like modules and a basic block with

3024
02:51:12,199 --> 02:51:16,819
QB I okay so we still need to wait for

3025
02:51:16,819 --> 02:51:19,609
the function to be loaded if it's a

3026
02:51:19,609 --> 02:51:22,609
right function which is called this part

3027
02:51:22,609 --> 02:51:24,889
of the code but before replacing the

3028
02:51:24,889 --> 02:51:28,069
implementation now we need to send the

3029
02:51:28,069 --> 02:51:30,739
memory layout and format information to

3030
02:51:30,739 --> 02:51:33,319
the Python side so it's this function

3031
02:51:33,319 --> 02:51:35,810
it's just yet the the module that has

3032
02:51:35,810 --> 02:51:40,369
been loaded into memory then we call the

3033
02:51:40,369 --> 02:51:43,429
replace function which is exactly the

3034
02:51:43,429 --> 02:51:47,089
same and we just exec execute the

3035
02:51:47,089 --> 02:51:51,739
function through PDI so yeah now we

3036
02:51:51,739 --> 02:51:54,199
don't need to generate an execution

3037
02:51:54,199 --> 02:51:57,439
trace so we need to place the call back

3038
02:51:57,439 --> 02:52:01,099
at every instruction instead we we need

3039
02:52:01,099 --> 02:52:04,419
to declare a callback that will be

3040
02:52:04,419 --> 02:52:08,829
called whenever a new basic block is

3041
02:52:08,829 --> 02:52:13,219
discovered so it's just this vm event

3042
02:52:13,219 --> 02:52:15,579
here and this function is called

3043
02:52:15,579 --> 02:52:18,169
basically this function is just

3044
02:52:18,169 --> 02:52:22,879
responsible for getting the module the

3045
02:52:22,879 --> 02:52:25,969
module yeah of the the the basic block

3046
02:52:25,969 --> 02:52:27,810
is containing

3047
02:52:27,810 --> 02:52:30,300
the offset from the base address of the

3048
02:52:30,300 --> 02:52:32,520
module and the size of the basic block I

3049
02:52:32,520 --> 02:52:36,330
just sent this information to the PI's

3050
02:52:36,330 --> 02:52:42,479
inside okay so now let's try to execute

3051
02:52:42,479 --> 02:52:48,529
it if okay so we still need to compile

3052
02:52:48,529 --> 02:52:57,510
the script okay and just try to know if

3053
02:52:57,510 --> 02:53:00,630
you can see and just run the Python

3054
02:53:00,630 --> 02:53:03,330
script to tell that we want to run

3055
02:53:03,330 --> 02:53:06,600
what's up and just generated coverage

3056
02:53:06,600 --> 02:53:16,439
file okay so okay okay so the file has

3057
02:53:16,439 --> 02:53:21,810
been written so let's check okay so now

3058
02:53:21,810 --> 02:53:25,020
we have this file here let's try to

3059
02:53:25,020 --> 02:53:33,119
import it into Hydra so here is a dragon

3060
02:53:33,119 --> 02:53:37,619
dance so we can just define Jericho fire

3061
02:53:37,619 --> 02:53:40,080
okay it has been bought it and we can

3062
02:53:40,080 --> 02:53:42,359
just try to colorize what has been

3063
02:53:42,359 --> 02:53:45,239
executed okay so that's really cool

3064
02:53:45,239 --> 02:53:48,029
because because at a glance we can

3065
02:53:48,029 --> 02:53:53,640
exactly know what has been executed so

3066
02:53:53,640 --> 02:53:58,500
for example let me search for a function

3067
02:53:58,500 --> 02:54:05,040
for example here okay yeah so for

3068
02:54:05,040 --> 02:54:07,859
example here we can see that this block

3069
02:54:07,859 --> 02:54:09,810
this block and Isis look have been

3070
02:54:09,810 --> 02:54:12,600
executed and this block this block and

3071
02:54:12,600 --> 02:54:14,989
this block have not so it's really

3072
02:54:14,989 --> 02:54:19,949
visual and things to dragon dance we can

3073
02:54:19,949 --> 02:54:25,199
also we can also know what if you have

3074
02:54:25,199 --> 02:54:28,439
multiple traces like you can see it but

3075
02:54:28,439 --> 02:54:31,590
you can know what's similar and what's

3076
02:54:31,590 --> 02:54:33,540
different between several execution

3077
02:54:33,540 --> 02:54:36,540
traces so it turns out to be really

3078
02:54:36,540 --> 02:54:38,250
convenient when it comes to comparing

3079
02:54:38,250 --> 02:54:41,029
some

3080
02:54:42,120 --> 02:54:46,891
okay so let's get back to the slides um

3081
02:54:47,280 --> 02:54:51,181
obviously this technique works with

3082
02:54:51,181 --> 02:54:53,980
every native function as long as you

3083
02:54:53,980 --> 02:54:58,570
know how many arguments it takes and you

3084
02:54:58,570 --> 02:55:01,000
can define whatever QB di callbacks you

3085
02:55:01,000 --> 02:55:03,811
want depending on your on your needs so

3086
02:55:03,811 --> 02:55:07,240
here it was about discovering a new

3087
02:55:07,240 --> 02:55:09,940
basic blocks but you may want to I don't

3088
02:55:09,940 --> 02:55:13,660
know record execution transfer or memory

3089
02:55:13,660 --> 02:55:20,200
accesses yeah so just to wrap it up

3090
02:55:20,200 --> 02:55:24,460
there will be a like a follow-up article

3091
02:55:24,460 --> 02:55:27,101
which will be probably published in the

3092
02:55:27,101 --> 02:55:31,721
next few weeks on the worktop blog so if

3093
02:55:31,721 --> 02:55:35,351
you're interested in trying this out on

3094
02:55:35,351 --> 02:55:39,101
your own just stay tuned now it will

3095
02:55:39,101 --> 02:55:41,920
like it will be like a review of what

3096
02:55:41,920 --> 02:55:46,870
we've seen today and that's pretty much

3097
02:55:46,870 --> 02:55:49,721
whole for me thanks for listening and

3098
02:55:49,721 --> 02:55:52,540
attending this webinar and if you have

3099
02:55:52,540 --> 02:55:55,750
any question like feel free to ask on

3100
02:55:55,750 --> 02:56:00,870
the chat thank you thank you very much

3101
02:56:03,780 --> 02:56:08,261
well do not be shy we have got time and

3102
02:56:08,261 --> 02:56:14,761
time for question so so Shannel is yours

3103
02:56:14,761 --> 02:56:28,120
the attendees may be a question with the

3104
02:56:28,120 --> 02:56:30,570
panelists

3105
02:56:37,979 --> 02:56:45,859
no question good question I think you

3106
02:56:45,979 --> 02:56:56,100
have been too clear so Philips nothing -

3107
02:56:56,100 --> 02:57:03,960
nothing to add on your side maybe you

3108
02:57:03,960 --> 02:57:06,410
don't hear me

3109
02:57:06,410 --> 02:57:13,680
just digging so you will be able to join

3110
02:57:13,680 --> 02:57:20,970
Tom if if you want if you had the future

3111
02:57:20,970 --> 02:57:27,810
yeah some may one question yeah so have

3112
02:57:27,810 --> 02:57:30,950
you used similar metrics DeBerg

3113
02:57:30,950 --> 02:57:34,560
embedded system other than hundred to be

3114
02:57:34,560 --> 02:57:38,490
honest no but it's possible the only

3115
02:57:38,490 --> 02:57:42,689
limit is that for now QED I only

3116
02:57:42,689 --> 02:57:51,020
supports x86 and x84 x86 and x64 sorry

3117
02:57:51,020 --> 02:57:56,460
but yeah you can use it if if you

3118
02:57:56,460 --> 02:57:59,700
running embedded system building this

3119
02:57:59,700 --> 02:58:02,820
architecture but I'm not sure you can

3120
02:58:02,820 --> 02:58:06,720
find a lot to be honest but the arm

3121
02:58:06,720 --> 02:58:10,920
support is is supposed to be released I

3122
02:58:10,920 --> 02:58:19,290
mean hopefully soon perfect

3123
02:58:19,290 --> 02:58:32,710
another one no so I think we can stop

3124
02:58:32,710 --> 02:58:35,859
there and finally thank you very much

3125
02:58:35,859 --> 02:58:43,290
for this talk Tom thank you bye right

3126
02:58:44,010 --> 02:58:49,569
and so we will hand this afternoon so we

3127
02:58:49,569 --> 02:58:51,970
will be we will be back tomorrow

3128
02:58:51,970 --> 02:58:57,390
afternoon at 2:00 p.m. with red teaming

3129
02:58:57,390 --> 02:59:01,120
in the first time then detect and defend

3130
02:59:01,120 --> 02:59:05,050
and in the second half of the afternoon

3131
02:59:05,050 --> 02:59:08,470
and we will end the afternoon with a

3132
02:59:08,470 --> 02:59:13,720
concert with clay maracas capitán so

3133
02:59:13,720 --> 02:59:17,649
have a good evening we are going to

3134
02:59:17,649 --> 02:59:21,810
release the slides in in the evening and

3135
02:59:21,810 --> 02:59:27,729
we will be back for the for the video

3136
02:59:27,729 --> 02:59:32,620
but later on in the week in the

3137
02:59:32,620 --> 02:59:35,340
following weeks we are going to release

3138
02:59:35,340 --> 02:59:40,540
also slide very very quickly and follow

3139
02:59:40,540 --> 02:59:44,770
Twitter account for the availability or

3140
02:59:44,770 --> 02:59:47,649
the of the video so thank you very much

3141
02:59:47,649 --> 02:59:51,100
for this first afternoon and see you

3142
02:59:51,100 --> 02:59:54,180
tomorrow bye

3143
03:00:02,320 --> 03:00:04,380
you

