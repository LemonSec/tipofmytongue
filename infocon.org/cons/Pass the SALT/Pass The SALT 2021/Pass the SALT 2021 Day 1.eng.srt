1
00:00:14,920 --> 00:00:17,920
oh

2
00:00:26,240 --> 00:00:29,119
okay so we can start with the

3
00:00:29,119 --> 00:00:30,480
introduction talk

4
00:00:30,480 --> 00:00:45,840
i guess

5
00:00:52,480 --> 00:00:56,079
okay so uh welcome

6
00:00:56,079 --> 00:00:59,640
welcome everybody to uh past the salt

7
00:00:59,640 --> 00:01:02,640
2021

8
00:01:02,800 --> 00:01:07,119
this will be our our fourth uh edition

9
00:01:07,119 --> 00:01:09,920
for the puzzle conference and the second

10
00:01:09,920 --> 00:01:12,080
virtual edition

11
00:01:12,080 --> 00:01:15,680
so due to the ongoing pandemic

12
00:01:15,680 --> 00:01:20,080
circumstances of course we we had to

13
00:01:20,080 --> 00:01:24,560
to switch to an online event once more

14
00:01:24,560 --> 00:01:27,759
so well the the

15
00:01:27,759 --> 00:01:30,159
the bad part is that uh we won't be able

16
00:01:30,159 --> 00:01:32,000
to meet face to face uh

17
00:01:32,000 --> 00:01:35,119
in in lille in france but uh the good

18
00:01:35,119 --> 00:01:36,320
part is that you can

19
00:01:36,320 --> 00:01:39,360
enjoy the conference or you like

20
00:01:39,360 --> 00:01:42,000
or you like it uh either from home or

21
00:01:42,000 --> 00:01:44,320
from office uh

22
00:01:44,320 --> 00:01:47,439
from your holiday from from the beach

23
00:01:47,439 --> 00:01:51,600
uh you can do what you want so uh

24
00:01:51,600 --> 00:01:55,360
without further ado um what can we

25
00:01:55,360 --> 00:01:58,719
tell about this year's conference

26
00:01:58,719 --> 00:02:02,000
so we had 27 proposals

27
00:02:02,000 --> 00:02:05,119
27 talk proposals

28
00:02:05,119 --> 00:02:08,479
which is a good number for us given the

29
00:02:08,479 --> 00:02:10,318
the circumstances

30
00:02:10,318 --> 00:02:14,560
uh we accepted the 16 talks

31
00:02:14,560 --> 00:02:17,680
uh amongst these proposals and so we

32
00:02:17,680 --> 00:02:22,239
were able to establish a schedule um

33
00:02:22,239 --> 00:02:24,879
composed of three afternoons with uh

34
00:02:24,879 --> 00:02:25,599
roughly

35
00:02:25,599 --> 00:02:29,520
five talks per afternoon so uh this will

36
00:02:29,520 --> 00:02:29,760
be

37
00:02:29,760 --> 00:02:32,319
today and tomorrow and wednesday of

38
00:02:32,319 --> 00:02:34,640
course

39
00:02:34,840 --> 00:02:37,440
then uh look at the

40
00:02:37,440 --> 00:02:40,640
the audience so uh we can uh

41
00:02:40,640 --> 00:02:43,680
compare um the

42
00:02:43,680 --> 00:02:46,640
where um people um come from where the

43
00:02:46,640 --> 00:02:47,840
audience come from

44
00:02:47,840 --> 00:02:50,959
so uh with uh

45
00:02:50,959 --> 00:02:54,480
the last event that took place in lille

46
00:02:54,480 --> 00:02:57,840
we had a significant part of the the

47
00:02:57,840 --> 00:02:58,800
audience that

48
00:02:58,800 --> 00:03:01,440
originated from france and with the

49
00:03:01,440 --> 00:03:03,920
online edition we can see that

50
00:03:03,920 --> 00:03:07,760
it's uh distributed uh more equally

51
00:03:07,760 --> 00:03:11,280
among the rest of the world

52
00:03:11,360 --> 00:03:13,519
in european union and outside of the

53
00:03:13,519 --> 00:03:14,879
european union

54
00:03:14,879 --> 00:03:19,280
so that's that's a good point

55
00:03:19,280 --> 00:03:22,480
then about sponsoring so for this

56
00:03:22,480 --> 00:03:23,440
edition

57
00:03:23,440 --> 00:03:26,959
the sponsors are so for the platinum

58
00:03:26,959 --> 00:03:28,159
sponsors

59
00:03:28,159 --> 00:03:31,360
we have vertex which is a

60
00:03:31,360 --> 00:03:34,799
provider of virtualization open source

61
00:03:34,799 --> 00:03:36,080
solutions

62
00:03:36,080 --> 00:03:40,159
and we have radar which is a

63
00:03:40,480 --> 00:03:44,720
tool to manage configurations and

64
00:03:44,720 --> 00:03:47,280
verify the conformity of configurations

65
00:03:47,280 --> 00:03:48,560
so these are our

66
00:03:48,560 --> 00:03:51,360
two uh platinum sponsors we have four

67
00:03:51,360 --> 00:03:52,400
gold sponsors

68
00:03:52,400 --> 00:03:55,599
which are google uh that i

69
00:03:55,599 --> 00:03:58,640
i won't present uh quarks lab which is a

70
00:03:58,640 --> 00:03:59,200
french

71
00:03:59,200 --> 00:04:03,040
i.t security firm we have the nc

72
00:04:03,040 --> 00:04:06,239
which is the national i.t security

73
00:04:06,239 --> 00:04:09,360
agency in france and we have the

74
00:04:09,360 --> 00:04:12,720
the french bank the

75
00:04:12,720 --> 00:04:17,040
international bank associate general

76
00:04:17,279 --> 00:04:19,358
and then we have one silver sponsor

77
00:04:19,358 --> 00:04:20,880
which is a syn active

78
00:04:20,880 --> 00:04:25,280
another french i.t security firm

79
00:04:25,759 --> 00:04:29,120
we also have partners so these

80
00:04:29,120 --> 00:04:32,639
do not provide direct funding but

81
00:04:32,639 --> 00:04:35,680
they provide useful services to us

82
00:04:35,680 --> 00:04:38,960
so we have predix which is our

83
00:04:38,960 --> 00:04:41,840
registration system for the conference

84
00:04:41,840 --> 00:04:44,960
we have the university of lille

85
00:04:44,960 --> 00:04:48,400
which has provided us with uh

86
00:04:48,400 --> 00:04:50,720
zoom access and the ability to create

87
00:04:50,720 --> 00:04:51,520
the zoom

88
00:04:51,520 --> 00:04:54,560
webinars and well usually the

89
00:04:54,560 --> 00:04:57,600
university of leeds

90
00:04:57,600 --> 00:05:00,800
is the university that hosts the

91
00:05:00,800 --> 00:05:03,919
the conference but well there is some

92
00:05:03,919 --> 00:05:06,560
kind of continuity here because the

93
00:05:06,560 --> 00:05:09,120
university has provided us with the zoom

94
00:05:09,120 --> 00:05:09,759
access

95
00:05:09,759 --> 00:05:12,960
and finally ub cast ubikas is usually

96
00:05:12,960 --> 00:05:14,560
our streaming platform for the

97
00:05:14,560 --> 00:05:16,080
conference

98
00:05:16,080 --> 00:05:19,039
so they um they filmed the conference

99
00:05:19,039 --> 00:05:19,759
and then

100
00:05:19,759 --> 00:05:23,039
they broadcast it but for this year

101
00:05:23,039 --> 00:05:26,240
as we use zoom we have zoom streaming

102
00:05:26,240 --> 00:05:26,560
and

103
00:05:26,560 --> 00:05:30,240
youtube streaming and at the end the

104
00:05:30,240 --> 00:05:32,800
the torque recordings will be hosted on

105
00:05:32,800 --> 00:05:34,400
ubcast

106
00:05:34,400 --> 00:05:37,039
and you can find also on newbiecast the

107
00:05:37,039 --> 00:05:40,719
recordings for the previous years

108
00:05:40,960 --> 00:05:45,759
uh then just a quick note about

109
00:05:45,759 --> 00:05:48,880
our expenses so of course with

110
00:05:48,880 --> 00:05:52,160
an online conference and as the the zoom

111
00:05:52,160 --> 00:05:52,720
access

112
00:05:52,720 --> 00:05:55,520
is uh provided for free we have very

113
00:05:55,520 --> 00:05:57,360
little expenses for this year

114
00:05:57,360 --> 00:06:00,319
again so no travel reimbursements we we

115
00:06:00,319 --> 00:06:01,440
didn't have to

116
00:06:01,440 --> 00:06:04,400
to pay for the reimbursement of our

117
00:06:04,400 --> 00:06:06,160
speakers

118
00:06:06,160 --> 00:06:08,479
no on-site communication no catering

119
00:06:08,479 --> 00:06:10,160
which is also

120
00:06:10,160 --> 00:06:13,360
a big expense point

121
00:06:13,360 --> 00:06:15,840
also no no goodies again for this year

122
00:06:15,840 --> 00:06:18,319
no stickers no no shirts

123
00:06:18,319 --> 00:06:23,039
so very very little expenses

124
00:06:23,039 --> 00:06:26,400
and uh with uh with this fact

125
00:06:26,400 --> 00:06:29,759
we uh our sponsors

126
00:06:29,759 --> 00:06:31,840
will stay uh sponsors for the next

127
00:06:31,840 --> 00:06:33,199
edition of the conference

128
00:06:33,199 --> 00:06:36,960
as their funding will still be available

129
00:06:36,960 --> 00:06:40,319
next year so all the sponsors

130
00:06:40,319 --> 00:06:42,720
that i presented will be sponsors for

131
00:06:42,720 --> 00:06:44,400
the next edition

132
00:06:44,400 --> 00:06:47,360
but we always welcome new sponsors as

133
00:06:47,360 --> 00:06:49,280
for for example rudder

134
00:06:49,280 --> 00:06:51,680
was not a sponsor last year but he's a

135
00:06:51,680 --> 00:06:52,319
sponsor

136
00:06:52,319 --> 00:06:55,680
this year so then they express their

137
00:06:55,680 --> 00:06:56,319
interest

138
00:06:56,319 --> 00:06:59,199
in sponsoring us during the the

139
00:06:59,199 --> 00:07:00,800
beginning of the year so we always

140
00:07:00,800 --> 00:07:02,000
welcome new sponsors

141
00:07:02,000 --> 00:07:04,960
of course in the hope that we will

142
00:07:04,960 --> 00:07:06,240
finally be able

143
00:07:06,240 --> 00:07:09,520
to have our next conference

144
00:07:09,520 --> 00:07:13,840
in a real life event in need this time

145
00:07:13,840 --> 00:07:17,280
so regarding the talks

146
00:07:17,280 --> 00:07:19,280
you will be able to interact with the

147
00:07:19,280 --> 00:07:20,800
speakers

148
00:07:20,800 --> 00:07:24,479
you can ask questions through the q a

149
00:07:24,479 --> 00:07:27,280
system on zoom if you have registered

150
00:07:27,280 --> 00:07:28,160
and if you

151
00:07:28,160 --> 00:07:31,280
have got your zoom links

152
00:07:31,280 --> 00:07:34,160
so at the end of the talks the speakers

153
00:07:34,160 --> 00:07:35,440
will

154
00:07:35,440 --> 00:07:38,639
will look at the qa box on zoom and will

155
00:07:38,639 --> 00:07:39,599
answer all the

156
00:07:39,599 --> 00:07:43,199
all the questions that you asked we also

157
00:07:43,199 --> 00:07:43,680
uh

158
00:07:43,680 --> 00:07:45,599
you will also be able to ask questions

159
00:07:45,599 --> 00:07:46,800
on the

160
00:07:46,800 --> 00:07:50,800
irc with the liberal chat platform

161
00:07:50,800 --> 00:07:56,080
on the hashtag pts21

162
00:07:56,080 --> 00:07:59,199
channel and finally you can also

163
00:07:59,199 --> 00:08:02,479
use the twitter hashtag to ask questions

164
00:08:02,479 --> 00:08:02,879
via

165
00:08:02,879 --> 00:08:05,599
via twitter

166
00:08:06,240 --> 00:08:10,240
okay so uh this will be the end of the

167
00:08:10,240 --> 00:08:13,280
the introduction talk uh if you have any

168
00:08:13,280 --> 00:08:14,800
question uh you you can

169
00:08:14,800 --> 00:08:16,879
about this introduction talk you can of

170
00:08:16,879 --> 00:08:18,160
course uh

171
00:08:18,160 --> 00:08:21,520
use the the qa box on zoom uh

172
00:08:21,520 --> 00:08:23,759
and well if there are no questions we

173
00:08:23,759 --> 00:08:26,479
will have just uh

174
00:08:26,479 --> 00:08:29,039
a quick timer before the the first

175
00:08:29,039 --> 00:08:30,080
conference

176
00:08:30,080 --> 00:08:32,159
uh on the first conference will be given

177
00:08:32,159 --> 00:08:34,399
by elua van der behken

178
00:08:34,399 --> 00:08:37,200
about a jailbreak detection mechanism on

179
00:08:37,200 --> 00:08:38,000
a

180
00:08:38,000 --> 00:08:42,958
very uh a particular

181
00:08:42,958 --> 00:08:46,640
phone system but i won't spoil

182
00:08:46,640 --> 00:08:50,320
okay so thank you for listening to the

183
00:08:50,320 --> 00:08:51,200
introduction

184
00:08:51,200 --> 00:08:54,000
talk and uh well we will wait for the

185
00:08:54,000 --> 00:09:09,839
beginning of the first talk

186
00:10:44,839 --> 00:10:47,839
so

187
00:11:40,839 --> 00:11:43,839
so

188
00:12:08,720 --> 00:12:11,040
okay

189
00:12:22,839 --> 00:12:25,839
uh

190
00:12:36,160 --> 00:12:39,519
do do you hear me yes that's a

191
00:12:39,519 --> 00:12:43,279
one should i start

192
00:12:47,279 --> 00:12:51,920
you can wait just two minutes more okay

193
00:12:51,920 --> 00:12:56,000
i've got some problems with uh

194
00:12:56,480 --> 00:13:07,839
zoom putting bars everywhere

195
00:15:11,199 --> 00:15:16,639
okay so it is time for the first talk

196
00:15:16,639 --> 00:15:19,600
so uh i'll uh i will let uh elwa van der

197
00:15:19,600 --> 00:15:20,800
behken speak about

198
00:15:20,800 --> 00:15:23,760
uh so jailbreak detection mechanism and

199
00:15:23,760 --> 00:15:26,480
other bypass sorry

200
00:15:26,480 --> 00:15:29,839
one of our sponsors thank you eloa and

201
00:15:29,839 --> 00:15:33,199
you have them goodbye okay

202
00:15:33,199 --> 00:15:36,240
thank you matthia for the introduction

203
00:15:36,240 --> 00:15:37,920
so as matthew just said i'm going to

204
00:15:37,920 --> 00:15:40,720
talk about jailbreak detection mechanism

205
00:15:40,720 --> 00:15:42,480
and how to bypass them

206
00:15:42,480 --> 00:15:44,160
but first of all let me tell you a

207
00:15:44,160 --> 00:15:46,399
little bit about myself and the

208
00:15:46,399 --> 00:15:49,240
company i work for so i'm

209
00:15:49,240 --> 00:15:50,399
eduabanovannabiken

210
00:15:50,399 --> 00:15:52,399
and as matthew said i'm working for

211
00:15:52,399 --> 00:15:54,320
synactiv an independent offensive

212
00:15:54,320 --> 00:15:56,079
security company

213
00:15:56,079 --> 00:15:58,000
we are divided in three different

214
00:15:58,000 --> 00:15:59,360
departments

215
00:15:59,360 --> 00:16:01,680
so the pen test one which focus on

216
00:16:01,680 --> 00:16:03,120
everything that can be

217
00:16:03,120 --> 00:16:06,000
intruded the development department

218
00:16:06,000 --> 00:16:08,480
focusing on the development of

219
00:16:08,480 --> 00:16:12,000
internal and offensive tools and finally

220
00:16:12,000 --> 00:16:14,079
the reverse department

221
00:16:14,079 --> 00:16:19,359
i'm working for as a tech leader

222
00:16:19,759 --> 00:16:22,720
so in the reverse department we are

223
00:16:22,720 --> 00:16:23,920
working uh

224
00:16:23,920 --> 00:16:26,720
we focus on uh well reverse engineering

225
00:16:26,720 --> 00:16:28,480
obviously but also

226
00:16:28,480 --> 00:16:31,120
low level development nervous research

227
00:16:31,120 --> 00:16:31,519
and

228
00:16:31,519 --> 00:16:34,800
exploitation so uh we work basically on

229
00:16:34,800 --> 00:16:36,320
everything that contains

230
00:16:36,320 --> 00:16:39,199
software from a bootloader to trust zone

231
00:16:39,199 --> 00:16:40,079
kernels

232
00:16:40,079 --> 00:16:43,440
routers application servers browsers

233
00:16:43,440 --> 00:16:47,040
well really everything so in the world

234
00:16:47,040 --> 00:16:48,800
company we are 90

235
00:16:48,800 --> 00:16:51,920
in the reverse poll we are 30 and

236
00:16:51,920 --> 00:16:54,160
we are hiring so do not hesitate to

237
00:16:54,160 --> 00:16:57,040
contact us if you want to work

238
00:16:57,040 --> 00:17:00,560
with us or if you want to join us

239
00:17:00,560 --> 00:17:03,279
so now that you know a little bit more

240
00:17:03,279 --> 00:17:04,400
about me

241
00:17:04,400 --> 00:17:06,400
before jumping into the technical

242
00:17:06,400 --> 00:17:08,000
details and

243
00:17:08,000 --> 00:17:12,000
the the technical case uh let me first

244
00:17:12,000 --> 00:17:14,640
introduce a subject so jailbreak

245
00:17:14,640 --> 00:17:16,160
detection

246
00:17:16,160 --> 00:17:18,559
i guess everybody here knows that ios is

247
00:17:18,559 --> 00:17:20,400
a mobile operating system

248
00:17:20,400 --> 00:17:23,679
developed by apple so for various

249
00:17:23,679 --> 00:17:24,559
reasons

250
00:17:24,559 --> 00:17:26,959
both uh security and economic ones

251
00:17:26,959 --> 00:17:29,120
because apple wants you to pay for your

252
00:17:29,120 --> 00:17:29,840
apps

253
00:17:29,840 --> 00:17:33,360
and they want their share on the on the

254
00:17:33,360 --> 00:17:37,280
on the buy the ios system is closed

255
00:17:37,280 --> 00:17:39,840
so there is no easy way or built-in way

256
00:17:39,840 --> 00:17:40,320
to get

257
00:17:40,320 --> 00:17:43,840
root on ios or to manipulate arbitrary

258
00:17:43,840 --> 00:17:45,600
applications

259
00:17:45,600 --> 00:17:49,120
fortunately for us jailbreaks exist

260
00:17:49,120 --> 00:17:51,600
so jailbreaks try to bypass all the

261
00:17:51,600 --> 00:17:52,880
security measures

262
00:17:52,880 --> 00:17:55,440
put in place by apple to give you a full

263
00:17:55,440 --> 00:17:56,080
control

264
00:17:56,080 --> 00:17:59,039
on your device the problem is that not

265
00:17:59,039 --> 00:18:00,000
everybody like

266
00:18:00,000 --> 00:18:02,080
jailbreaks for example banks might be

267
00:18:02,080 --> 00:18:03,760
afraid that the malware could take

268
00:18:03,760 --> 00:18:05,520
advantage of your jailbroken phone to

269
00:18:05,520 --> 00:18:07,760
get access to the secrets

270
00:18:07,760 --> 00:18:11,520
they store in your uh in their app

271
00:18:11,520 --> 00:18:13,520
and uh for example to sold install you

272
00:18:13,520 --> 00:18:15,120
money or

273
00:18:15,120 --> 00:18:18,400
or do nasty things but also game

274
00:18:18,400 --> 00:18:19,760
developers

275
00:18:19,760 --> 00:18:21,280
will also want to protect their

276
00:18:21,280 --> 00:18:22,799
application against uh

277
00:18:22,799 --> 00:18:26,160
cheaters or bot developers because it's

278
00:18:26,160 --> 00:18:28,480
way easier to develop

279
00:18:28,480 --> 00:18:31,840
to create and to exploit a boat

280
00:18:31,840 --> 00:18:35,200
on a jetbroken device so

281
00:18:35,200 --> 00:18:37,280
they will try to detect if your phone is

282
00:18:37,280 --> 00:18:39,440
jailbroken and will block

283
00:18:39,440 --> 00:18:41,919
their applications until they consider

284
00:18:41,919 --> 00:18:42,960
your phone to be

285
00:18:42,960 --> 00:18:46,480
clean enough the problem is that we as a

286
00:18:46,480 --> 00:18:47,600
security folks

287
00:18:47,600 --> 00:18:50,480
also need to study applications for

288
00:18:50,480 --> 00:18:52,160
example to ensure that

289
00:18:52,160 --> 00:18:55,039
data is well protected or to create an

290
00:18:55,039 --> 00:18:56,000
independent client

291
00:18:56,000 --> 00:18:59,200
for example or also to

292
00:18:59,200 --> 00:19:02,160
to find out all data is stored in

293
00:19:02,160 --> 00:19:02,960
backups for

294
00:19:02,960 --> 00:19:06,000
forensic purpose for examples

295
00:19:06,000 --> 00:19:11,840
so answer this presentation

296
00:19:11,919 --> 00:19:14,080
but before talking about anti-check by

297
00:19:14,080 --> 00:19:16,000
protections

298
00:19:16,000 --> 00:19:18,799
we need to talk about ios specificities

299
00:19:18,799 --> 00:19:19,600
that

300
00:19:19,600 --> 00:19:21,600
application developer and security

301
00:19:21,600 --> 00:19:23,039
researchers have to

302
00:19:23,039 --> 00:19:26,720
deal with first of all in ios everything

303
00:19:26,720 --> 00:19:28,960
must be signed

304
00:19:28,960 --> 00:19:30,559
the code must be signed or your

305
00:19:30,559 --> 00:19:32,799
application will be killed by the kernel

306
00:19:32,799 --> 00:19:35,520
for the data it's a little bit different

307
00:19:35,520 --> 00:19:36,720
in theory you

308
00:19:36,720 --> 00:19:38,240
might have unsigned data in your

309
00:19:38,240 --> 00:19:40,000
application the kernel doesn't bla

310
00:19:40,000 --> 00:19:42,640
doesn't block that but apple make sure

311
00:19:42,640 --> 00:19:43,200
that

312
00:19:43,200 --> 00:19:44,640
not the case when you submit your

313
00:19:44,640 --> 00:19:47,679
applications to the to the app store

314
00:19:47,679 --> 00:19:50,000
and the app store is basically the only

315
00:19:50,000 --> 00:19:51,600
store where you can get your

316
00:19:51,600 --> 00:19:55,600
app on the second specificity

317
00:19:55,600 --> 00:19:58,640
stems from the previous one

318
00:19:58,640 --> 00:20:00,320
it's impossible to create executable

319
00:20:00,320 --> 00:20:02,159
memory which is also writable

320
00:20:02,159 --> 00:20:04,400
otherwise it would be a trivial to

321
00:20:04,400 --> 00:20:05,360
execute and sign

322
00:20:05,360 --> 00:20:08,720
code the only exception are

323
00:20:08,720 --> 00:20:12,159
if your process is being debugged but

324
00:20:12,159 --> 00:20:14,960
that requires special entitlements as we

325
00:20:14,960 --> 00:20:15,520
will see

326
00:20:15,520 --> 00:20:18,559
later and if you are the

327
00:20:18,559 --> 00:20:22,799
web content the web content

328
00:20:22,799 --> 00:20:26,400
demon was in charge of executing

329
00:20:26,400 --> 00:20:27,600
javascript code

330
00:20:27,600 --> 00:20:31,679
so to compile javascript code on the fly

331
00:20:31,679 --> 00:20:34,000
they need to have a read write and

332
00:20:34,000 --> 00:20:35,280
executable

333
00:20:35,280 --> 00:20:38,640
pages but only the web content demon has

334
00:20:38,640 --> 00:20:42,000
this this power

335
00:20:43,440 --> 00:20:47,039
the other limitation is that you

336
00:20:47,039 --> 00:20:51,120
cannot have side loading that means that

337
00:20:51,120 --> 00:20:53,520
applications may not download install or

338
00:20:53,520 --> 00:20:55,280
execute code which introduce

339
00:20:55,280 --> 00:20:58,080
or change features or functionality of

340
00:20:58,080 --> 00:20:58,559
the app

341
00:20:58,559 --> 00:21:00,720
that means that you cannot for example

342
00:21:00,720 --> 00:21:02,000
try to

343
00:21:02,000 --> 00:21:04,720
detect a jailbreak and if you detect a

344
00:21:04,720 --> 00:21:05,600
jailbreak

345
00:21:05,600 --> 00:21:09,039
to close the application on otherwise uh

346
00:21:09,039 --> 00:21:10,880
download the rest of the applications

347
00:21:10,880 --> 00:21:13,440
what does that mean that means that

348
00:21:13,440 --> 00:21:16,640
an attacker always have all your code

349
00:21:16,640 --> 00:21:17,360
you cannot

350
00:21:17,360 --> 00:21:20,799
hide any portion of your code

351
00:21:20,799 --> 00:21:23,919
either by encrypting it or either by

352
00:21:23,919 --> 00:21:27,200
downloading it when you need it

353
00:21:27,200 --> 00:21:29,679
so this means no layers of encryption

354
00:21:29,679 --> 00:21:30,320
node

355
00:21:30,320 --> 00:21:33,600
auto modifying code your code must be in

356
00:21:33,600 --> 00:21:34,000
place

357
00:21:34,000 --> 00:21:37,360
in plain sight the ozone limitation

358
00:21:37,360 --> 00:21:41,919
is that you are not supposed to use

359
00:21:41,919 --> 00:21:44,799
private apis you are limited to public

360
00:21:44,799 --> 00:21:45,600
api

361
00:21:45,600 --> 00:21:47,010
only

362
00:21:47,010 --> 00:21:48,799
[Music]

363
00:21:48,799 --> 00:21:51,440
why that's because apple doesn't want to

364
00:21:51,440 --> 00:21:52,320
you to use

365
00:21:52,320 --> 00:21:55,360
apis that you will want to change later

366
00:21:55,360 --> 00:21:59,280
as i only want to support a limited uh

367
00:21:59,280 --> 00:22:02,559
limited number of api

368
00:22:02,559 --> 00:22:06,000
so this is enforced during the app store

369
00:22:06,000 --> 00:22:06,559
review

370
00:22:06,559 --> 00:22:09,679
via automated checks but

371
00:22:09,679 --> 00:22:12,960
actually just blocked is it just block

372
00:22:12,960 --> 00:22:13,360
some

373
00:22:13,360 --> 00:22:16,640
malicious tracking methods or duplicated

374
00:22:16,640 --> 00:22:19,840
apis or codes that do not want you to

375
00:22:19,840 --> 00:22:21,760
use because they are planning to change

376
00:22:21,760 --> 00:22:23,600
it it's not

377
00:22:23,600 --> 00:22:27,760
it's not that enforced

378
00:22:27,760 --> 00:22:29,679
it's just that if you are using private

379
00:22:29,679 --> 00:22:30,960
apis is

380
00:22:30,960 --> 00:22:33,679
well your code might crash in future ios

381
00:22:33,679 --> 00:22:35,919
versions

382
00:22:35,919 --> 00:22:38,400
okay so we've talked about ios

383
00:22:38,400 --> 00:22:40,720
limitations now let's see what we have

384
00:22:40,720 --> 00:22:44,240
in our tool bag so the most powerful

385
00:22:44,240 --> 00:22:47,039
tool available in ios is uh freedom that

386
00:22:47,039 --> 00:22:48,159
you probably

387
00:22:48,159 --> 00:22:51,200
probably already know friday's

388
00:22:51,200 --> 00:22:54,159
dynamic instrumentation toolkit so

389
00:22:54,159 --> 00:22:56,320
basically it allows you to inject

390
00:22:56,320 --> 00:22:59,520
arbitrary javascript into a process

391
00:22:59,520 --> 00:23:02,799
and instrument it by instrumenting it

392
00:23:02,799 --> 00:23:06,000
i mean hooking its functions dumping its

393
00:23:06,000 --> 00:23:06,960
memory

394
00:23:06,960 --> 00:23:09,360
create a new objective c objects for

395
00:23:09,360 --> 00:23:10,240
example or

396
00:23:10,240 --> 00:23:13,440
intercept method calls etc etc

397
00:23:13,440 --> 00:23:17,039
so freedom has a lot of features support

398
00:23:17,039 --> 00:23:20,240
almost all the operating systems

399
00:23:20,240 --> 00:23:23,039
being from a server content view or a

400
00:23:23,039 --> 00:23:24,960
client point of view

401
00:23:24,960 --> 00:23:28,240
uh it also have a lot uh it has also

402
00:23:28,240 --> 00:23:31,600
a lot of bindings and a low level c api

403
00:23:31,600 --> 00:23:32,640
which is a

404
00:23:32,640 --> 00:23:34,400
really handy if you need to build

405
00:23:34,400 --> 00:23:35,679
standalone

406
00:23:35,679 --> 00:23:37,520
standalone tools that need to inject

407
00:23:37,520 --> 00:23:38,880
themselves

408
00:23:38,880 --> 00:23:42,400
in applications or processes

409
00:23:42,400 --> 00:23:45,840
the good thing is it's open source

410
00:23:45,840 --> 00:23:48,960
and it's really well coded only

411
00:23:48,960 --> 00:23:51,919
i don't know if i pronounce his uh noun

412
00:23:51,919 --> 00:23:52,880
well but uh

413
00:23:52,880 --> 00:23:55,120
only i was a project benevolent dictator

414
00:23:55,120 --> 00:23:57,279
make a personally sure that every

415
00:23:57,279 --> 00:23:59,120
commits respects the project the

416
00:23:59,120 --> 00:23:59,919
guidelines

417
00:23:59,919 --> 00:24:01,679
for example i almost did the pull

418
00:24:01,679 --> 00:24:03,919
requests that had more comments from all

419
00:24:03,919 --> 00:24:04,720
the others and

420
00:24:04,720 --> 00:24:08,640
lines of code so it's really well coded

421
00:24:08,640 --> 00:24:09,760
and

422
00:24:09,760 --> 00:24:13,600
it will uh it will stay that way i think

423
00:24:13,600 --> 00:24:16,240
uh you probably also have heard of frida

424
00:24:16,240 --> 00:24:17,520
at past the start

425
00:24:17,520 --> 00:24:20,559
several past talks and you will

426
00:24:20,559 --> 00:24:24,159
heard of it in future talks if i'm right

427
00:24:24,159 --> 00:24:27,520
at this session of past results the

428
00:24:27,520 --> 00:24:30,799
only little problem with frida is

429
00:24:30,799 --> 00:24:33,120
its documentation it's not really easy

430
00:24:33,120 --> 00:24:34,799
to read it's just a big

431
00:24:34,799 --> 00:24:38,240
html file with a lot of lines and

432
00:24:38,240 --> 00:24:41,279
uh little index but

433
00:24:41,279 --> 00:24:44,480
maybe as a result of this some of its

434
00:24:44,480 --> 00:24:46,960
functionalities are not that well known

435
00:24:46,960 --> 00:24:50,080
or nor used although uh well very

436
00:24:50,080 --> 00:24:50,640
powerful

437
00:24:50,640 --> 00:24:54,720
as we will see so last but not least um

438
00:24:54,720 --> 00:24:56,640
why do we want to

439
00:24:56,640 --> 00:24:58,720
jailbreak uh our phone in the first

440
00:24:58,720 --> 00:25:00,880
place so friday does

441
00:25:00,880 --> 00:25:03,679
indeed also work on non-jailbroken

442
00:25:03,679 --> 00:25:04,159
phones

443
00:25:04,159 --> 00:25:06,720
and you can also debug your applications

444
00:25:06,720 --> 00:25:07,279
will

445
00:25:07,279 --> 00:25:10,640
with a llgb the

446
00:25:10,640 --> 00:25:14,080
ios and mac os debugger the problem is

447
00:25:14,080 --> 00:25:16,559
that to use freedom non-jailbroken

448
00:25:16,559 --> 00:25:18,559
iphones you only have two choices

449
00:25:18,559 --> 00:25:22,880
you can inject frida with ptrace

450
00:25:22,880 --> 00:25:25,120
with your application so we need to have

451
00:25:25,120 --> 00:25:28,240
a get task hello entitlement

452
00:25:28,240 --> 00:25:30,559
uh because without this entitlement you

453
00:25:30,559 --> 00:25:31,760
will not be able to

454
00:25:31,760 --> 00:25:34,640
attach to the application and this this

455
00:25:34,640 --> 00:25:36,400
entitlement is never present in the

456
00:25:36,400 --> 00:25:38,559
applications on the app store as it's

457
00:25:38,559 --> 00:25:40,799
only legitimate purposes well to debug

458
00:25:40,799 --> 00:25:42,400
your own applications

459
00:25:42,400 --> 00:25:45,120
so you can't have these entitlements in

460
00:25:45,120 --> 00:25:45,919
app store

461
00:25:45,919 --> 00:25:49,200
applications you can also inject

462
00:25:49,200 --> 00:25:52,320
friday in an application by adding a

463
00:25:52,320 --> 00:25:53,440
dependency to

464
00:25:53,440 --> 00:25:57,120
freeda gadget dynamic library

465
00:25:57,120 --> 00:25:58,720
that will call back to your frida

466
00:25:58,720 --> 00:26:01,360
servers and give you the opportunity to

467
00:26:01,360 --> 00:26:02,880
instrument the application

468
00:26:02,880 --> 00:26:05,919
but you will be without using trace you

469
00:26:05,919 --> 00:26:07,360
will be limited to that only

470
00:26:07,360 --> 00:26:09,279
modification or interception

471
00:26:09,279 --> 00:26:11,679
because remember your iphone is not

472
00:26:11,679 --> 00:26:13,679
jailbroken and no debugger is attached

473
00:26:13,679 --> 00:26:15,520
to your process so you cannot modify its

474
00:26:15,520 --> 00:26:17,760
code only its data

475
00:26:17,760 --> 00:26:20,080
in both case you will have to resign the

476
00:26:20,080 --> 00:26:22,000
application to modify

477
00:26:22,000 --> 00:26:24,640
its entitlement or to add this

478
00:26:24,640 --> 00:26:26,880
dependency

479
00:26:26,880 --> 00:26:28,799
which is a problem because it's a

480
00:26:28,799 --> 00:26:30,720
tedious process

481
00:26:30,720 --> 00:26:34,640
but it also has a lot of side effects

482
00:26:34,640 --> 00:26:37,840
um because you don't own the original

483
00:26:37,840 --> 00:26:38,960
developers

484
00:26:38,960 --> 00:26:41,919
private keys or well generally you don't

485
00:26:41,919 --> 00:26:43,279
own the

486
00:26:43,279 --> 00:26:45,840
original developer private keys you can

487
00:26:45,840 --> 00:26:47,760
you cannot sign with the exact same

488
00:26:47,760 --> 00:26:49,760
provisioning profile that was used to

489
00:26:49,760 --> 00:26:50,400
sign the

490
00:26:50,400 --> 00:26:53,600
the applications see so this means that

491
00:26:53,600 --> 00:26:54,080
your

492
00:26:54,080 --> 00:26:56,000
resigned application will not have its

493
00:26:56,000 --> 00:26:57,360
original team id

494
00:26:57,360 --> 00:26:59,279
and you won't be able to for example

495
00:26:59,279 --> 00:27:00,559
communicate with

496
00:27:00,559 --> 00:27:02,400
other applications from the same

497
00:27:02,400 --> 00:27:04,320
developer or access

498
00:27:04,320 --> 00:27:07,679
some secrets in the keychain this will

499
00:27:07,679 --> 00:27:09,679
also modify

500
00:27:09,679 --> 00:27:12,000
the files because well you resize the

501
00:27:12,000 --> 00:27:13,679
file so it motivates it

502
00:27:13,679 --> 00:27:18,480
and it opens a way to detection

503
00:27:19,200 --> 00:27:21,360
so this could be detected or even

504
00:27:21,360 --> 00:27:22,559
introduce bugs and

505
00:27:22,559 --> 00:27:24,320
crashes in your application in the

506
00:27:24,320 --> 00:27:26,240
application you are trying to study

507
00:27:26,240 --> 00:27:28,960
uh the good thing is with the jailbreak

508
00:27:28,960 --> 00:27:29,840
with the jailbreak

509
00:27:29,840 --> 00:27:32,000
all the restrictions are gone you can

510
00:27:32,000 --> 00:27:34,399
attach to any third-party application

511
00:27:34,399 --> 00:27:36,960
you do not have to resign anything you

512
00:27:36,960 --> 00:27:37,919
don't have

513
00:27:37,919 --> 00:27:39,840
the any limitations still in place is

514
00:27:39,840 --> 00:27:42,080
that you will not be able to debug

515
00:27:42,080 --> 00:27:44,480
system applications on iphones with a

516
00:27:44,480 --> 00:27:45,200
recent

517
00:27:45,200 --> 00:27:48,240
system on chip because of ppl

518
00:27:48,240 --> 00:27:52,799
but this should not be a problem for uh

519
00:27:52,799 --> 00:27:56,159
auditing other applications okay

520
00:27:56,159 --> 00:27:59,279
so now now that i've introduced

521
00:27:59,279 --> 00:28:02,080
the problem let's talk about a real

522
00:28:02,080 --> 00:28:04,640
world case

523
00:28:04,640 --> 00:28:07,360
the target i'm going to talk about is a

524
00:28:07,360 --> 00:28:08,720
banking application

525
00:28:08,720 --> 00:28:11,200
so when launched on a jailbroken device

526
00:28:11,200 --> 00:28:14,000
it immediately crashes with a bad access

527
00:28:14,000 --> 00:28:16,080
it's a great it's executable it's quite

528
00:28:16,080 --> 00:28:19,279
large uh 31 megabytes

529
00:28:19,279 --> 00:28:21,520
and it will so it will not be possible

530
00:28:21,520 --> 00:28:24,399
to review all its codes

531
00:28:24,399 --> 00:28:27,760
when we open it in ida we

532
00:28:27,760 --> 00:28:30,159
didn't detect anything special

533
00:28:30,159 --> 00:28:31,679
objective-c methods and

534
00:28:31,679 --> 00:28:34,080
classes names were not obfuscated

535
00:28:34,080 --> 00:28:34,880
strings were

536
00:28:34,880 --> 00:28:37,760
in clear text the cut didn't seem to be

537
00:28:37,760 --> 00:28:39,120
obfuscated

538
00:28:39,120 --> 00:28:41,279
but given the size of the executable

539
00:28:41,279 --> 00:28:42,480
that doesn't prove anything

540
00:28:42,480 --> 00:28:44,559
maybe some parts of it were indeed

541
00:28:44,559 --> 00:28:46,080
obfuscated

542
00:28:46,080 --> 00:28:49,039
we tried a few frida script found on in

543
00:28:49,039 --> 00:28:50,240
the internet that

544
00:28:50,240 --> 00:28:52,320
tried to bypass jet brake detection by

545
00:28:52,320 --> 00:28:54,080
hooking some functions

546
00:28:54,080 --> 00:28:56,640
so most notably one reason by space

547
00:28:56,640 --> 00:28:59,200
patrol delta and indian companies that

548
00:28:59,200 --> 00:29:01,520
wrote blog posts about jailbreak

549
00:29:01,520 --> 00:29:03,440
detection tick tock

550
00:29:03,440 --> 00:29:06,240
but even if a few file manipulation

551
00:29:06,240 --> 00:29:07,760
functions were indeed

552
00:29:07,760 --> 00:29:09,840
trying to detect jailbreaks and we are

553
00:29:09,840 --> 00:29:10,960
correctly intercepted

554
00:29:10,960 --> 00:29:14,159
by the scripture all our process always

555
00:29:14,159 --> 00:29:14,960
eventually

556
00:29:14,960 --> 00:29:18,399
crashed so we had no choice left but to

557
00:29:18,399 --> 00:29:20,000
dig into the assembly to find

558
00:29:20,000 --> 00:29:23,840
our jailbreak was detected

559
00:29:24,159 --> 00:29:27,200
so the good thing is that our crashes

560
00:29:27,200 --> 00:29:29,120
are read at an invalid address where the

561
00:29:29,120 --> 00:29:30,960
first crash was uh

562
00:29:30,960 --> 00:29:33,039
arrayed at an invalid address in our

563
00:29:33,039 --> 00:29:35,520
main executable so we can statically see

564
00:29:35,520 --> 00:29:38,960
what's the source of the crash

565
00:29:38,960 --> 00:29:41,919
so we can quickly see that this line of

566
00:29:41,919 --> 00:29:43,600
code doesn't have uh

567
00:29:43,600 --> 00:29:45,760
any sense and will always crash the

568
00:29:45,760 --> 00:29:47,679
process there is a logic end between a

569
00:29:47,679 --> 00:29:48,720
static address

570
00:29:48,720 --> 00:29:50,720
and a very low value so the result of

571
00:29:50,720 --> 00:29:52,000
this logic end will

572
00:29:52,000 --> 00:29:55,919
always be a very low value so i

573
00:29:55,919 --> 00:29:58,080
and this value will be the recurrence

574
00:29:58,080 --> 00:29:59,760
and will always be in the

575
00:29:59,760 --> 00:30:02,880
new page this cannot be a legitimate

576
00:30:02,880 --> 00:30:04,640
code and this is good for us because it

577
00:30:04,640 --> 00:30:06,240
means that the address is not a

578
00:30:06,240 --> 00:30:08,080
corrupted value that may have been

579
00:30:08,080 --> 00:30:08,880
corrupted way

580
00:30:08,880 --> 00:30:13,440
before way before being the reference

581
00:30:13,440 --> 00:30:15,919
if we look around in the same function

582
00:30:15,919 --> 00:30:18,399
we can see several suspicious decrypting

583
00:30:18,399 --> 00:30:20,240
loops

584
00:30:20,240 --> 00:30:22,559
there also seem to be some integrity

585
00:30:22,559 --> 00:30:23,600
check even if their

586
00:30:23,600 --> 00:30:27,679
status isn't uh is not always checked

587
00:30:27,679 --> 00:30:29,679
maybe it's a bug in the protection but

588
00:30:29,679 --> 00:30:31,120
well

589
00:30:31,120 --> 00:30:32,880
finally there is some synchronization

590
00:30:32,880 --> 00:30:34,720
functions to make sure that decryption

591
00:30:34,720 --> 00:30:36,000
routine now not executed

592
00:30:36,000 --> 00:30:38,000
twice per year raising threat that's uh

593
00:30:38,000 --> 00:30:39,840
that's a detail

594
00:30:39,840 --> 00:30:43,840
um but um the really interesting part of

595
00:30:43,840 --> 00:30:45,440
this code is that we can see

596
00:30:45,440 --> 00:30:48,080
a call to a maxi score that executes the

597
00:30:48,080 --> 00:30:49,360
u times c score

598
00:30:49,360 --> 00:30:51,760
so for those of you that mean we may not

599
00:30:51,760 --> 00:30:52,640
know

600
00:30:52,640 --> 00:30:55,679
this cisco it may be used to change the

601
00:30:55,679 --> 00:30:58,880
file access or modification time so here

602
00:30:58,880 --> 00:31:00,799
it's called with an invalid array

603
00:31:00,799 --> 00:31:02,960
because it takes an array in the second

604
00:31:02,960 --> 00:31:04,320
argument

605
00:31:04,320 --> 00:31:06,880
and the trick is that u times will

606
00:31:06,880 --> 00:31:08,799
return a value

607
00:31:08,799 --> 00:31:10,640
will return a different value if the

608
00:31:10,640 --> 00:31:12,559
file specified in the first argument

609
00:31:12,559 --> 00:31:13,440
exists or not

610
00:31:13,440 --> 00:31:16,240
if the file exists then it will try to

611
00:31:16,240 --> 00:31:17,200
dereference

612
00:31:17,200 --> 00:31:20,880
the array passed in the second argument

613
00:31:20,880 --> 00:31:22,960
and it will fail with an invalid access

614
00:31:22,960 --> 00:31:24,000
error

615
00:31:24,000 --> 00:31:25,760
so without touching the file access or

616
00:31:25,760 --> 00:31:27,519
modification time

617
00:31:27,519 --> 00:31:29,840
but if the file does not exist it will

618
00:31:29,840 --> 00:31:32,880
return it will directly it will directly

619
00:31:32,880 --> 00:31:36,640
return with an invalid entry

620
00:31:36,640 --> 00:31:39,200
error so this is just a convoluted way

621
00:31:39,200 --> 00:31:41,279
to check if a file exists or not but the

622
00:31:41,279 --> 00:31:42,559
really sneaky thing

623
00:31:42,559 --> 00:31:45,600
is not that it's use it uses

624
00:31:45,600 --> 00:31:47,919
you times uh the the sneaky thing is

625
00:31:47,919 --> 00:31:48,640
that it

626
00:31:48,640 --> 00:31:50,720
directly executes a cisco it doesn't

627
00:31:50,720 --> 00:31:52,000
call a function

628
00:31:52,000 --> 00:31:54,480
so if we look at the assembly code we

629
00:31:54,480 --> 00:31:55,039
see that

630
00:31:55,039 --> 00:31:57,440
our app directly executes a service call

631
00:31:57,440 --> 00:31:58,640
to the kernel

632
00:31:58,640 --> 00:32:02,080
with svc instruction it doesn't call an

633
00:32:02,080 --> 00:32:04,240
imported function that we could easily

634
00:32:04,240 --> 00:32:06,240
intercept with freedom

635
00:32:06,240 --> 00:32:09,679
so that's why the precedent script

636
00:32:09,679 --> 00:32:13,039
wasn't working it's because

637
00:32:13,039 --> 00:32:16,320
they use direct cisco

638
00:32:17,360 --> 00:32:21,120
so um there are um

639
00:32:21,120 --> 00:32:23,519
this there are cisco that aren't

640
00:32:23,519 --> 00:32:24,720
directly executed

641
00:32:24,720 --> 00:32:27,519
so this is not really compliant with the

642
00:32:27,519 --> 00:32:29,600
app may only use public api

643
00:32:29,600 --> 00:32:32,000
is a policy but so far it doesn't seem

644
00:32:32,000 --> 00:32:32,880
to bother

645
00:32:32,880 --> 00:32:35,919
apple so the problem is that we cannot

646
00:32:35,919 --> 00:32:36,480
just

647
00:32:36,480 --> 00:32:38,640
exported the apis and we cannot patch

648
00:32:38,640 --> 00:32:40,080
every check

649
00:32:40,080 --> 00:32:42,480
by end because there are more than 400

650
00:32:42,480 --> 00:32:45,039
cisco in the application so we need to

651
00:32:45,039 --> 00:32:48,960
automate this task we could eventually

652
00:32:48,960 --> 00:32:49,919
patch

653
00:32:49,919 --> 00:32:52,399
the blacklisted path used to detect

654
00:32:52,399 --> 00:32:53,120
jailbreaks

655
00:32:53,120 --> 00:32:55,279
but strings are encrypted with random

656
00:32:55,279 --> 00:32:56,880
values and there are some integrity

657
00:32:56,880 --> 00:32:58,320
checks so

658
00:32:58,320 --> 00:33:01,760
even um even if we could do that it

659
00:33:01,760 --> 00:33:02,720
would still be a

660
00:33:02,720 --> 00:33:04,399
tedious process to figure out the

661
00:33:04,399 --> 00:33:06,880
encryption patch values

662
00:33:06,880 --> 00:33:09,120
moreover as we will see there are some

663
00:33:09,120 --> 00:33:10,320
checks that are not

664
00:33:10,320 --> 00:33:13,039
based on file path so it wouldn't be

665
00:33:13,039 --> 00:33:14,720
sufficient

666
00:33:14,720 --> 00:33:18,559
what we would like to do is to intercept

667
00:33:18,559 --> 00:33:20,640
all the syscalls with freedom to

668
00:33:20,640 --> 00:33:22,399
manipulate their arguments and written

669
00:33:22,399 --> 00:33:23,200
value

670
00:33:23,200 --> 00:33:27,360
just as we do on functions

671
00:33:27,360 --> 00:33:29,919
so for those of you who are not already

672
00:33:29,919 --> 00:33:32,320
familiar with frida here

673
00:33:32,320 --> 00:33:34,000
is how you can book a function with

674
00:33:34,000 --> 00:33:35,760
freedom so those are

675
00:33:35,760 --> 00:33:38,960
examples from the documentation so you

676
00:33:38,960 --> 00:33:41,440
can define two callbacks on enter and

677
00:33:41,440 --> 00:33:44,720
only and in those callbacks you can read

678
00:33:44,720 --> 00:33:46,559
and modify the arguments the written

679
00:33:46,559 --> 00:33:47,200
value

680
00:33:47,200 --> 00:33:49,519
but also read or write the application

681
00:33:49,519 --> 00:33:51,519
memory or its registers

682
00:33:51,519 --> 00:33:54,640
well you can do whatever you want

683
00:33:54,640 --> 00:33:56,559
you can also share a state between the

684
00:33:56,559 --> 00:33:57,919
two callbacks um

685
00:33:57,919 --> 00:34:01,360
via the z subject between the on enter

686
00:34:01,360 --> 00:34:03,120
and the only callbacks

687
00:34:03,120 --> 00:34:06,720
the original function will be called and

688
00:34:06,720 --> 00:34:08,800
you will be able to intercept it back

689
00:34:08,800 --> 00:34:12,320
and only the callback

690
00:34:12,320 --> 00:34:14,719
another method to book function offered

691
00:34:14,719 --> 00:34:16,719
by freda is to completely replace the

692
00:34:16,719 --> 00:34:18,719
implementation this time

693
00:34:18,719 --> 00:34:22,159
with the replace method of the

694
00:34:22,159 --> 00:34:24,159
interceptor object

695
00:34:24,159 --> 00:34:26,879
uh for example in this uh example we

696
00:34:26,879 --> 00:34:29,119
replace the open function by our own

697
00:34:29,119 --> 00:34:29,679
version

698
00:34:29,679 --> 00:34:32,000
that prints debug information and the

699
00:34:32,000 --> 00:34:33,839
neat feature of fada is that you can

700
00:34:33,839 --> 00:34:35,760
still use your original function and

701
00:34:35,760 --> 00:34:38,320
your replacement function

702
00:34:38,320 --> 00:34:41,199
uh well the fact that you can quickly

703
00:34:41,199 --> 00:34:41,839
code

704
00:34:41,839 --> 00:34:44,639
all these books in javascript without

705
00:34:44,639 --> 00:34:46,719
having to compile anything or to deal

706
00:34:46,719 --> 00:34:47,599
with some

707
00:34:47,599 --> 00:34:50,079
dirty assembly details it's really where

708
00:34:50,079 --> 00:34:51,040
freedom or

709
00:34:51,040 --> 00:34:54,480
lies for example if your

710
00:34:54,480 --> 00:34:57,119
code is buggy you just get javascript

711
00:34:57,119 --> 00:34:58,240
stack traces

712
00:34:58,240 --> 00:35:00,720
and your injected process stays the

713
00:35:00,720 --> 00:35:01,520
lifetime

714
00:35:01,520 --> 00:35:05,599
you don't crash it's really handy

715
00:35:06,240 --> 00:35:09,440
not so well known feature of friday is

716
00:35:09,440 --> 00:35:09,920
that

717
00:35:09,920 --> 00:35:12,320
it also allows you to intercept

718
00:35:12,320 --> 00:35:14,480
arbitrary instructions

719
00:35:14,480 --> 00:35:18,320
instead of passing an object with two

720
00:35:18,320 --> 00:35:20,720
callbacks you just pass directly a

721
00:35:20,720 --> 00:35:21,520
function

722
00:35:21,520 --> 00:35:23,359
and this function will be called just

723
00:35:23,359 --> 00:35:25,119
before executing the original

724
00:35:25,119 --> 00:35:28,880
instruction so it can be uh very useful

725
00:35:28,880 --> 00:35:30,000
to dump decrypted

726
00:35:30,000 --> 00:35:32,480
values or key in memories in the middle

727
00:35:32,480 --> 00:35:34,160
of a function

728
00:35:34,160 --> 00:35:36,720
the problem is that freedom although

729
00:35:36,720 --> 00:35:40,160
being a great project is not magic

730
00:35:40,160 --> 00:35:43,200
so to redirect the execution flow

731
00:35:43,200 --> 00:35:44,880
it may need to patch several

732
00:35:44,880 --> 00:35:46,240
instructions and

733
00:35:46,240 --> 00:35:49,680
arm 64 instructions are 32 bit

734
00:35:49,680 --> 00:35:52,079
long so obviously you cannot always take

735
00:35:52,079 --> 00:35:52,880
a 64

736
00:35:52,880 --> 00:35:54,960
destination address and an instruction

737
00:35:54,960 --> 00:35:56,000
encoding

738
00:35:56,000 --> 00:35:58,720
including in just one instruction the

739
00:35:58,720 --> 00:36:00,240
problem is that

740
00:36:00,240 --> 00:36:02,640
if a branch if a branch has jumped

741
00:36:02,640 --> 00:36:05,280
precisely just after or cisco

742
00:36:05,280 --> 00:36:09,119
uh after you start intercepting the

743
00:36:09,119 --> 00:36:10,960
an instruction it would jump in the

744
00:36:10,960 --> 00:36:13,359
middle of our direction code and

745
00:36:13,359 --> 00:36:17,680
may crash or process moreover there is a

746
00:36:17,680 --> 00:36:20,160
bug in friday

747
00:36:20,160 --> 00:36:24,240
and it sometimes trash registers

748
00:36:24,240 --> 00:36:27,280
x16 for example is used to redirect the

749
00:36:27,280 --> 00:36:29,440
execution flow without being saved or

750
00:36:29,440 --> 00:36:30,640
restored

751
00:36:30,640 --> 00:36:32,880
when you hook a function this is fine

752
00:36:32,880 --> 00:36:34,480
because x16

753
00:36:34,480 --> 00:36:37,200
is color saved and is not used to pass

754
00:36:37,200 --> 00:36:39,359
arguments on common apis so

755
00:36:39,359 --> 00:36:41,119
it's okay to trash it in the beginning

756
00:36:41,119 --> 00:36:42,640
of a function but it's not okay if

757
00:36:42,640 --> 00:36:43,920
you're in the middle of a function

758
00:36:43,920 --> 00:36:45,040
because then

759
00:36:45,040 --> 00:36:47,920
x 16 might be used to carry a local

760
00:36:47,920 --> 00:36:48,800
variables

761
00:36:48,800 --> 00:36:52,839
for example or or temporary data

762
00:36:52,839 --> 00:36:56,400
so we tried to use uh

763
00:36:56,400 --> 00:36:58,320
this method to intercept all the

764
00:36:58,320 --> 00:37:00,240
syscalls but

765
00:37:00,240 --> 00:37:04,880
we didn't it didn't work

766
00:37:04,880 --> 00:37:07,839
the good thing is that frida also allows

767
00:37:07,839 --> 00:37:08,800
us to intercept

768
00:37:08,800 --> 00:37:11,359
exceptions by exceptions i mean native

769
00:37:11,359 --> 00:37:13,119
exceptions like invalid access or

770
00:37:13,119 --> 00:37:14,160
breakpoints not c

771
00:37:14,160 --> 00:37:17,040
plus plus exceptions so with friday you

772
00:37:17,040 --> 00:37:19,759
can set up

773
00:37:20,720 --> 00:37:22,800
an exception handler that is called or

774
00:37:22,800 --> 00:37:24,320
whenever there is a

775
00:37:24,320 --> 00:37:27,680
an exception throw and you can decide

776
00:37:27,680 --> 00:37:30,880
here to handle this exception yourself

777
00:37:30,880 --> 00:37:32,079
or to pass it to

778
00:37:32,079 --> 00:37:35,520
as your original handler so our solution

779
00:37:35,520 --> 00:37:37,440
is just to replace all the c scores

780
00:37:37,440 --> 00:37:40,240
with the breakpoints this ensures that

781
00:37:40,240 --> 00:37:42,800
we only patch one instruction so

782
00:37:42,800 --> 00:37:45,359
we don't have the problem of branches

783
00:37:45,359 --> 00:37:48,400
pointing just after our cisco anymore

784
00:37:48,400 --> 00:37:51,440
and uh we are sure that our breakpoints

785
00:37:51,440 --> 00:37:51,760
will

786
00:37:51,760 --> 00:37:53,599
throw exceptions that will be able to

787
00:37:53,599 --> 00:37:55,119
catch in there

788
00:37:55,119 --> 00:37:58,079
our exception on there and in our

789
00:37:58,079 --> 00:38:00,160
exceptional we will be able to modify

790
00:38:00,160 --> 00:38:02,160
the context of the application to

791
00:38:02,160 --> 00:38:03,200
emulate

792
00:38:03,200 --> 00:38:07,599
the cisco so to plan to purchase the cs

793
00:38:07,599 --> 00:38:08,160
corner

794
00:38:08,160 --> 00:38:11,280
uh here is the code we we worked

795
00:38:11,280 --> 00:38:15,359
it's a very simple and just um

796
00:38:15,359 --> 00:38:18,720
just the interesting part is that memory

797
00:38:18,720 --> 00:38:22,079
dutch patch code takes care of

798
00:38:22,079 --> 00:38:24,880
these methods take care of all the code

799
00:38:24,880 --> 00:38:25,599
signature

800
00:38:25,599 --> 00:38:28,720
cache currency etc so again frida

801
00:38:28,720 --> 00:38:31,920
do all the heavy lifting for you you

802
00:38:31,920 --> 00:38:33,359
just have to

803
00:38:33,359 --> 00:38:36,800
give the it even have

804
00:38:36,800 --> 00:38:38,960
an assembler writer help to help you

805
00:38:38,960 --> 00:38:41,119
generate simply assembly simple assembly

806
00:38:41,119 --> 00:38:42,560
payload so

807
00:38:42,560 --> 00:38:46,320
well this tool is great so after a few

808
00:38:46,320 --> 00:38:47,760
tries and crashes

809
00:38:47,760 --> 00:38:50,560
uh we implemented a lot of cisco's the

810
00:38:50,560 --> 00:38:51,599
methodology was

811
00:38:51,599 --> 00:38:53,839
quite simple we launched the application

812
00:38:53,839 --> 00:38:55,760
with our friday script and wait for a

813
00:38:55,760 --> 00:38:56,560
crash

814
00:38:56,560 --> 00:38:58,640
the crash could happen for two reasons

815
00:38:58,640 --> 00:39:00,960
because a new cisco

816
00:39:00,960 --> 00:39:03,920
was encountered and we weren't already

817
00:39:03,920 --> 00:39:06,000
emulating it

818
00:39:06,000 --> 00:39:09,200
and or we could also crash

819
00:39:09,200 --> 00:39:12,400
for uh if we encountered other anti-gel

820
00:39:12,400 --> 00:39:12,800
breaks

821
00:39:12,800 --> 00:39:16,400
methods that detected us

822
00:39:17,520 --> 00:39:21,839
so we found we found the numerous other

823
00:39:21,839 --> 00:39:24,640
anti-jailbreak methods based on normal

824
00:39:24,640 --> 00:39:25,920
functions so that

825
00:39:25,920 --> 00:39:29,280
wasn't already catched by

826
00:39:29,280 --> 00:39:32,640
our cisco looking method but uh

827
00:39:32,640 --> 00:39:35,760
for for all this detection method

828
00:39:35,760 --> 00:39:37,839
the process always crashed just after

829
00:39:37,839 --> 00:39:38,880
the check

830
00:39:38,880 --> 00:39:42,000
with uh an invite the referencement an

831
00:39:42,000 --> 00:39:42,640
exit

832
00:39:42,640 --> 00:39:45,119
or a call to a function with invite

833
00:39:45,119 --> 00:39:46,400
pointer so it was

834
00:39:46,400 --> 00:39:48,800
really easy to find the check and to add

835
00:39:48,800 --> 00:39:50,079
the contour measure

836
00:39:50,079 --> 00:39:54,480
in our code in our javascript

837
00:39:54,480 --> 00:39:57,359
now the problem is uh at one point the

838
00:39:57,359 --> 00:39:59,599
process started to crash but this time

839
00:39:59,599 --> 00:40:00,560
with trashed

840
00:40:00,560 --> 00:40:04,240
pc and lr registers so there was no easy

841
00:40:04,240 --> 00:40:04,800
way

842
00:40:04,800 --> 00:40:07,040
or direct way to find the underlying

843
00:40:07,040 --> 00:40:08,079
test because

844
00:40:08,079 --> 00:40:11,680
well we we jumped at and by the address

845
00:40:11,680 --> 00:40:15,359
this is where uh frida well

846
00:40:15,359 --> 00:40:18,160
again saved the game because frida has a

847
00:40:18,160 --> 00:40:20,640
dynamic binary instrumentation engine

848
00:40:20,640 --> 00:40:24,000
named called stalker that can be used to

849
00:40:24,000 --> 00:40:24,319
log

850
00:40:24,319 --> 00:40:28,240
all the way that can be used to um

851
00:40:28,240 --> 00:40:30,560
to instrument all the names to all the

852
00:40:30,560 --> 00:40:32,640
instructions executed by

853
00:40:32,640 --> 00:40:35,599
the process so it can be used to log all

854
00:40:35,599 --> 00:40:36,720
the basic blocks

855
00:40:36,720 --> 00:40:39,040
executed so the idea is very simple we

856
00:40:39,040 --> 00:40:41,560
just run the application until the last

857
00:40:41,560 --> 00:40:43,359
successfully bypassed

858
00:40:43,359 --> 00:40:46,000
check and we trace all the basic all the

859
00:40:46,000 --> 00:40:46,800
basic blocks

860
00:40:46,800 --> 00:40:50,640
until we we crash

861
00:40:50,880 --> 00:40:52,960
and with this method we are sure to find

862
00:40:52,960 --> 00:40:54,319
uh to find

863
00:40:54,319 --> 00:40:57,599
where the branch that

864
00:40:57,599 --> 00:41:02,319
corrupt or a pc register is

865
00:41:02,880 --> 00:41:05,680
the only thing that you have to take

866
00:41:05,680 --> 00:41:06,079
care

867
00:41:06,079 --> 00:41:08,880
is to make sure to use a synchronized

868
00:41:08,880 --> 00:41:10,160
method because

869
00:41:10,160 --> 00:41:12,640
friday lose the buffered messages when

870
00:41:12,640 --> 00:41:14,400
the application crashed

871
00:41:14,400 --> 00:41:18,240
so this quickly uh gave us the culprit

872
00:41:18,240 --> 00:41:18,960
of the crash

873
00:41:18,960 --> 00:41:21,040
it was just an api that we weren't

874
00:41:21,040 --> 00:41:22,960
looking yet

875
00:41:22,960 --> 00:41:26,079
again just a quick

876
00:41:26,079 --> 00:41:29,119
overview of the code and

877
00:41:29,119 --> 00:41:31,920
we see that uh for every basic block we

878
00:41:31,920 --> 00:41:33,040
just add

879
00:41:33,040 --> 00:41:35,119
if the basic block is in our application

880
00:41:35,119 --> 00:41:36,640
we have the callback

881
00:41:36,640 --> 00:41:39,040
that saves us if we're uh that we are

882
00:41:39,040 --> 00:41:41,520
executing this basic plot

883
00:41:41,520 --> 00:41:43,920
so again this is really simple to use

884
00:41:43,920 --> 00:41:46,000
the only thing that you have to

885
00:41:46,000 --> 00:41:48,960
to take care is to instrument the basic

886
00:41:48,960 --> 00:41:50,160
blocks directly and not

887
00:41:50,160 --> 00:41:53,920
use the high level apis

888
00:41:53,920 --> 00:41:56,560
that give you all the calls and executed

889
00:41:56,560 --> 00:41:57,760
block because it is a

890
00:41:57,760 --> 00:42:03,200
an asymptotic api

891
00:42:03,200 --> 00:42:06,560
so to resume how

892
00:42:06,560 --> 00:42:08,720
the application we're trying to uh to

893
00:42:08,720 --> 00:42:10,240
find our

894
00:42:10,240 --> 00:42:11,839
to find out that our phone was

895
00:42:11,839 --> 00:42:14,000
jailbroken he

896
00:42:14,000 --> 00:42:17,119
just used very few methods uh

897
00:42:17,119 --> 00:42:19,599
quite easy to bypass so they were trying

898
00:42:19,599 --> 00:42:20,160
to find

899
00:42:20,160 --> 00:42:22,560
jailbreak specific files with uh open

900
00:42:22,560 --> 00:42:23,680
new times

901
00:42:23,680 --> 00:42:27,280
stat path conf stats wasn't

902
00:42:27,280 --> 00:42:31,040
64 sorry and f open and we are using

903
00:42:31,040 --> 00:42:36,079
both cis codes and exported functions

904
00:42:36,079 --> 00:42:37,760
they also tried to block and detect

905
00:42:37,760 --> 00:42:39,440
debuggers with ptrace

906
00:42:39,440 --> 00:42:42,960
pt dna attach and detect if the

907
00:42:42,960 --> 00:42:45,440
parent pid was launched with get parent

908
00:42:45,440 --> 00:42:46,079
pid

909
00:42:46,079 --> 00:42:49,440
and check if it was a one and a little

910
00:42:49,440 --> 00:42:50,880
ios specific method

911
00:42:50,880 --> 00:42:53,440
is that they try to detect the root fs

912
00:42:53,440 --> 00:42:54,640
is a writeable

913
00:42:54,640 --> 00:42:57,520
because in ios the root face is always a

914
00:42:57,520 --> 00:43:00,079
read-only

915
00:43:00,800 --> 00:43:04,880
so our solution is is based on a generic

916
00:43:04,880 --> 00:43:05,520
api

917
00:43:05,520 --> 00:43:08,000
so generic interface to both functions

918
00:43:08,000 --> 00:43:09,520
and cisco so you can

919
00:43:09,520 --> 00:43:12,079
specify the function name and if it's uh

920
00:43:12,079 --> 00:43:13,760
if it has current spanning t-score you

921
00:43:13,760 --> 00:43:14,720
just have to

922
00:43:14,720 --> 00:43:18,160
give the cisco number and uh and

923
00:43:18,160 --> 00:43:20,720
the hook will be used for both as

924
00:43:20,720 --> 00:43:24,160
exporting functions at the cisco

925
00:43:24,160 --> 00:43:26,560
we can under special case for example in

926
00:43:26,560 --> 00:43:27,200
open

927
00:43:27,200 --> 00:43:30,640
we will have to close the fd that was

928
00:43:30,640 --> 00:43:31,680
open

929
00:43:31,680 --> 00:43:34,560
before returning to the function well

930
00:43:34,560 --> 00:43:36,880
this can be unloaded

931
00:43:36,880 --> 00:43:40,960
quite easily with uh the unleave method

932
00:43:40,960 --> 00:43:44,000
we will release the code

933
00:43:44,000 --> 00:43:46,160
in the past few days just as time to

934
00:43:46,160 --> 00:43:48,560
cleaning to clean it up a little bit and

935
00:43:48,560 --> 00:43:51,680
remove all the references that may

936
00:43:51,680 --> 00:43:53,920
still be in there to the original

937
00:43:53,920 --> 00:43:56,240
application

938
00:43:56,240 --> 00:44:00,160
uh future um

939
00:44:00,960 --> 00:44:04,800
i was still one minute so

940
00:44:04,800 --> 00:44:06,400
what could be used in future

941
00:44:06,400 --> 00:44:09,119
anti-jailbreaks method

942
00:44:09,119 --> 00:44:10,880
would be to try to load an invalid

943
00:44:10,880 --> 00:44:12,240
signature and see

944
00:44:12,240 --> 00:44:14,800
if it's accepted so you can use for that

945
00:44:14,800 --> 00:44:16,960
the fcntl

946
00:44:16,960 --> 00:44:20,000
function with a f add 6

947
00:44:20,000 --> 00:44:23,119
flag and it can be used to ask to the

948
00:44:23,119 --> 00:44:24,000
system to

949
00:44:24,000 --> 00:44:26,800
check the signature of a file so of

950
00:44:26,800 --> 00:44:27,200
course

951
00:44:27,200 --> 00:44:29,119
if the system accepts an invalid

952
00:44:29,119 --> 00:44:31,040
signature that means that the system is

953
00:44:31,040 --> 00:44:32,480
jailbroken

954
00:44:32,480 --> 00:44:34,560
you could also check if some jailbreak

955
00:44:34,560 --> 00:44:36,079
library are loaded

956
00:44:36,079 --> 00:44:39,280
in your process so for example the

957
00:44:39,280 --> 00:44:42,880
substitute dynamic library and to do

958
00:44:42,880 --> 00:44:43,520
that you

959
00:44:43,520 --> 00:44:47,760
could use a dl open or memory scanning

960
00:44:47,760 --> 00:44:51,359
dlg internal structure etc

961
00:44:51,359 --> 00:44:53,839
and you could also check if your process

962
00:44:53,839 --> 00:44:55,520
is instrumented just

963
00:44:55,520 --> 00:44:57,599
for example by checking code integrity

964
00:44:57,599 --> 00:44:59,200
or to

965
00:44:59,200 --> 00:45:02,720
time the code execution it's the basic

966
00:45:02,720 --> 00:45:04,480
debug check but you could also try to

967
00:45:04,480 --> 00:45:06,800
detect frida with signatures or

968
00:45:06,800 --> 00:45:10,400
something like that uh last uh

969
00:45:10,400 --> 00:45:12,319
last check that you could use is the cs

970
00:45:12,319 --> 00:45:14,319
ops to make sure that your

971
00:45:14,319 --> 00:45:16,800
program is your application is killed if

972
00:45:16,800 --> 00:45:17,760
you

973
00:45:17,760 --> 00:45:20,640
signature of your process changed

974
00:45:20,640 --> 00:45:21,440
because of

975
00:45:21,440 --> 00:45:22,800
insertion of breakpoints or

976
00:45:22,800 --> 00:45:24,640
modifications

977
00:45:24,640 --> 00:45:26,800
and uh i'm a little bit late so i'm

978
00:45:26,800 --> 00:45:28,319
gonna determine

979
00:45:28,319 --> 00:45:32,400
to finish now last um

980
00:45:32,400 --> 00:45:34,880
uh the last thing that you would want to

981
00:45:34,880 --> 00:45:35,839
do is to crash

982
00:45:35,839 --> 00:45:38,319
as far as possible of the checks to make

983
00:45:38,319 --> 00:45:39,760
sure that it's not easy

984
00:45:39,760 --> 00:45:43,440
for a reverse engineer to to find out

985
00:45:43,440 --> 00:45:46,079
what your checks are so you

986
00:45:46,079 --> 00:45:50,400
you should use a global context and put

987
00:45:50,400 --> 00:45:53,119
your crash as far as possible to your

988
00:45:53,119 --> 00:45:53,839
checks

989
00:45:53,839 --> 00:45:56,400
to complicate the back dressing so

990
00:45:56,400 --> 00:45:57,200
that's it

991
00:45:57,200 --> 00:46:00,560
uh just a little bit late sorry for that

992
00:46:00,560 --> 00:46:03,040
if you have any questions no no problem

993
00:46:03,040 --> 00:46:05,040
thank you

994
00:46:05,040 --> 00:46:08,319
thank you sorry i will be the only one

995
00:46:08,319 --> 00:46:08,960
to

996
00:46:08,960 --> 00:46:14,000
close no it's okay thank you

997
00:46:14,000 --> 00:46:17,359
i'm in the chat but

998
00:46:18,400 --> 00:46:22,000
there are two questions yeah you see the

999
00:46:22,000 --> 00:46:23,520
the qa

1000
00:46:23,520 --> 00:46:26,720
button first

1001
00:46:26,720 --> 00:46:30,319
the first allowed if you want does ppl

1002
00:46:30,319 --> 00:46:32,560
protects only kernel pages or also

1003
00:46:32,560 --> 00:46:34,800
system user processes

1004
00:46:34,800 --> 00:46:38,240
it does protect user

1005
00:46:38,240 --> 00:46:41,280
user process user processes but only

1006
00:46:41,280 --> 00:46:42,560
system ones uh

1007
00:46:42,560 --> 00:46:45,700
i do have tata i do have some bonus

1008
00:46:45,700 --> 00:46:46,800
[Music]

1009
00:46:46,800 --> 00:46:50,400
slides about that so ppl is used to

1010
00:46:50,400 --> 00:46:51,440
protect

1011
00:46:51,440 --> 00:46:54,480
system services so you

1012
00:46:54,480 --> 00:46:57,280
it for bids to inject any third party

1013
00:46:57,280 --> 00:46:59,359
executable uh

1014
00:46:59,359 --> 00:47:01,520
you cannot map any third party

1015
00:47:01,520 --> 00:47:04,800
executable in uh system processes

1016
00:47:04,800 --> 00:47:07,680
uh it could be deployed for all the

1017
00:47:07,680 --> 00:47:10,560
processes by the way but

1018
00:47:10,560 --> 00:47:14,240
so far no

1019
00:47:16,319 --> 00:47:19,680
and you have a second question uh

1020
00:47:19,680 --> 00:47:23,920
so we ask is strange that apple doesn't

1021
00:47:23,920 --> 00:47:25,920
implement a simple api call like

1022
00:47:25,920 --> 00:47:29,359
is debugger present is there something

1023
00:47:29,359 --> 00:47:29,760
like

1024
00:47:29,760 --> 00:47:33,200
they'll break detected well

1025
00:47:33,200 --> 00:47:36,480
there is a simple method oh the profits

1026
00:47:36,480 --> 00:47:38,160
just crashed

1027
00:47:38,160 --> 00:47:42,399
classically professing um

1028
00:47:42,960 --> 00:47:47,920
sorry i'm gonna stop the share

1029
00:47:50,240 --> 00:47:53,359
how do i stop sharing okay that's it

1030
00:47:53,359 --> 00:47:56,559
um there is a simple um

1031
00:47:56,559 --> 00:47:59,680
a simple method uh you can use p trace

1032
00:47:59,680 --> 00:48:00,240
with a

1033
00:48:00,240 --> 00:48:03,200
p trace deny attached to both detect and

1034
00:48:03,200 --> 00:48:07,839
block debuggers so

1035
00:48:13,520 --> 00:48:17,440
but it's hard to do um a generic

1036
00:48:17,440 --> 00:48:19,680
is jailbroken api because well

1037
00:48:19,680 --> 00:48:20,960
jailbreak's tried to

1038
00:48:20,960 --> 00:48:24,000
not be detected

1039
00:48:24,559 --> 00:48:27,440
so i saw that there is a last question

1040
00:48:27,440 --> 00:48:28,000
how does

1041
00:48:28,000 --> 00:48:31,920
jailbreaks bypass ppl

1042
00:48:33,520 --> 00:48:36,800
i don't know how to do it i don't think

1043
00:48:36,800 --> 00:48:37,200
that

1044
00:48:37,200 --> 00:48:40,880
tweaks work on post a12

1045
00:48:40,880 --> 00:48:46,079
socks but i may be wrong

1046
00:48:46,079 --> 00:48:49,680
as far as i know there are no public ppl

1047
00:48:49,680 --> 00:48:51,599
bypass whereas

1048
00:48:51,599 --> 00:48:54,640
there have been a few bypasses but more

1049
00:48:54,640 --> 00:48:58,079
theories and real life

1050
00:48:58,079 --> 00:49:01,280
bypasses but you can uh sort of

1051
00:49:01,280 --> 00:49:04,960
work with ppl for example by doing only

1052
00:49:04,960 --> 00:49:08,319
by doing data only uh manipulations

1053
00:49:08,319 --> 00:49:11,920
um and patching only uh

1054
00:49:11,920 --> 00:49:14,400
and uh by catching exceptions for

1055
00:49:14,400 --> 00:49:16,160
example to manipulate the process

1056
00:49:16,160 --> 00:49:19,839
without modifying its code

1057
00:49:19,839 --> 00:49:25,040
pages i don't know if it's clear

1058
00:49:27,680 --> 00:49:30,720
okay and uh in your in your talk do you

1059
00:49:30,720 --> 00:49:34,000
imply that uh some developers can access

1060
00:49:34,000 --> 00:49:34,800
a

1061
00:49:34,800 --> 00:49:38,240
non-public api like cisco i mean

1062
00:49:38,240 --> 00:49:42,480
do they have special uh licenses or

1063
00:49:42,480 --> 00:49:44,880
i don't think so i think it's just that

1064
00:49:44,880 --> 00:49:45,250
uh

1065
00:49:45,250 --> 00:49:47,680
[Music]

1066
00:49:47,680 --> 00:49:50,480
apple doesn't really try to block this

1067
00:49:50,480 --> 00:49:51,040
and uh

1068
00:49:51,040 --> 00:49:52,780
they don't care if

1069
00:49:52,780 --> 00:49:54,559
[Music]

1070
00:49:54,559 --> 00:49:58,079
i think that they don't care

1071
00:49:59,200 --> 00:50:02,240
this goes through the qualification

1072
00:50:02,240 --> 00:50:02,880
process

1073
00:50:02,880 --> 00:50:06,319
i guess yes

1074
00:50:08,640 --> 00:50:12,160
okay well thank you again thank you for

1075
00:50:12,160 --> 00:50:13,920
having me and thank you for

1076
00:50:13,920 --> 00:50:16,319
listening

1077
00:50:18,720 --> 00:50:23,919
okay i see our next speaker is in the

1078
00:50:24,839 --> 00:50:27,839
attendees

1079
00:50:28,160 --> 00:50:31,200
thank you very much um

1080
00:50:31,200 --> 00:50:33,359
we'll put again a countdown i hope

1081
00:50:33,359 --> 00:50:35,760
without music this time so

1082
00:50:35,760 --> 00:50:41,839
to lessen the risk of crash from my side

1083
00:51:06,839 --> 00:51:09,839
okay

1084
00:51:20,839 --> 00:51:23,839
uh

1085
00:52:03,839 --> 00:52:05,920
you

1086
00:52:44,240 --> 00:53:01,839
do you hear me yes

1087
00:54:48,400 --> 00:54:51,520
okay so maybe

1088
00:54:51,520 --> 00:54:54,960
you can start sharing your screen

1089
00:54:54,960 --> 00:54:57,760
so that we can confirm that everything

1090
00:54:57,760 --> 00:55:07,839
is okay

1091
00:55:08,640 --> 00:55:13,520
all right it's working uh

1092
00:55:13,520 --> 00:55:17,920
perfectly uh so uh our next talk

1093
00:55:17,920 --> 00:55:21,280
will be by uh uh 0 39

1094
00:55:21,280 --> 00:55:25,040
b which is if i'm not mistaken

1095
00:55:25,040 --> 00:55:28,720
the code for the lambda later

1096
00:55:28,720 --> 00:55:31,760
so this talk will be so

1097
00:55:31,760 --> 00:55:34,160
she's an independent i.t security

1098
00:55:34,160 --> 00:55:34,960
specialist

1099
00:55:34,960 --> 00:55:38,559
and we'll talk back about ptus

1100
00:55:38,559 --> 00:55:42,160
which is a tool that will let you

1101
00:55:42,160 --> 00:55:45,680
analyze android apps

1102
00:55:45,680 --> 00:55:49,839
the mic is yours

1103
00:56:04,319 --> 00:56:16,559
i guess we're not hearing you right now

1104
00:56:16,559 --> 00:56:19,760
sorry we can't hear you

1105
00:56:20,960 --> 00:56:23,599
or maybe it's uh yeah it's it's too low

1106
00:56:23,599 --> 00:56:25,920
maybe

1107
00:56:26,319 --> 00:56:30,480
and now yes it's better

1108
00:56:30,480 --> 00:56:33,760
yeah no clipping it's okay can you um

1109
00:56:33,760 --> 00:56:36,319
can you have it a little more a little

1110
00:56:36,319 --> 00:56:38,799
louder

1111
00:56:39,359 --> 00:56:42,400
very low okay i think that's that's

1112
00:56:42,400 --> 00:56:43,520
right now

1113
00:56:43,520 --> 00:56:46,640
okay i hope that zoom is not messing uh

1114
00:56:46,640 --> 00:56:48,900
things around so

1115
00:56:48,900 --> 00:56:50,400
[Music]

1116
00:56:50,400 --> 00:56:53,359
so is the level totally okay now should

1117
00:56:53,359 --> 00:56:54,480
i start or should i

1118
00:56:54,480 --> 00:56:57,520
uh well it's quite low yeah it's still

1119
00:56:57,520 --> 00:57:00,079
quite low

1120
00:57:00,559 --> 00:57:04,559
and now saturates

1121
00:57:04,559 --> 00:57:07,359
okay awesome

1122
00:57:08,799 --> 00:57:12,240
pray again

1123
00:57:12,240 --> 00:57:15,280
okay and what about now yeah

1124
00:57:15,280 --> 00:57:18,340
good enough i guess okay yeah okay

1125
00:57:18,340 --> 00:57:20,799
[Music]

1126
00:57:20,799 --> 00:57:23,520
so hello everybody thank you for having

1127
00:57:23,520 --> 00:57:23,839
me

1128
00:57:23,839 --> 00:57:27,280
over here so today i will talk about

1129
00:57:27,280 --> 00:57:30,240
a project which is named petus i

1130
00:57:30,240 --> 00:57:32,880
co-founded a few months ago

1131
00:57:32,880 --> 00:57:36,160
and peters is meant to be

1132
00:57:36,160 --> 00:57:40,000
something open to analyze

1133
00:57:40,000 --> 00:57:43,520
android apps so first of all a few words

1134
00:57:43,520 --> 00:57:44,319
about me

1135
00:57:44,319 --> 00:57:47,760
so i am mr umphra i am an expert

1136
00:57:47,760 --> 00:57:49,920
in android security and reverse

1137
00:57:49,920 --> 00:57:51,520
engineering

1138
00:57:51,520 --> 00:57:55,040
and i'm a french activist and speaker

1139
00:57:55,040 --> 00:57:58,160
i am co-founder at defensive agency

1140
00:57:58,160 --> 00:57:59,119
which is a

1141
00:57:59,119 --> 00:58:02,400
small company specialized in

1142
00:58:02,400 --> 00:58:06,160
cyber security i am also co-founder

1143
00:58:06,160 --> 00:58:10,160
at exodus privacy which is a well-known

1144
00:58:10,160 --> 00:58:13,119
french non-profit which is meant to

1145
00:58:13,119 --> 00:58:13,920
bring more

1146
00:58:13,920 --> 00:58:18,000
transparency in the tracking ecosystem

1147
00:58:18,000 --> 00:58:21,599
on android i am also co-founder

1148
00:58:21,599 --> 00:58:24,559
of eshap which is a also a french

1149
00:58:24,559 --> 00:58:26,000
non-profit

1150
00:58:26,000 --> 00:58:29,359
which fights against

1151
00:58:29,359 --> 00:58:33,119
violence against women

1152
00:58:33,119 --> 00:58:36,240
using technology i'm co-founder

1153
00:58:36,240 --> 00:58:39,920
of pettus the project i will speak about

1154
00:58:39,920 --> 00:58:42,799
today i'm also a co-founder of peer

1155
00:58:42,799 --> 00:58:44,079
analysis

1156
00:58:44,079 --> 00:58:48,079
which is the the equivalent of

1157
00:58:48,079 --> 00:58:52,480
peters but in terms of dynamic analysis

1158
00:58:52,480 --> 00:58:56,160
so what i do

1159
00:58:56,160 --> 00:58:58,160
all the days so basically i do

1160
00:58:58,160 --> 00:59:01,280
penetration testing

1161
00:59:01,280 --> 00:59:04,559
on mobile devices both on

1162
00:59:04,559 --> 00:59:07,920
android and ios i do

1163
00:59:07,920 --> 00:59:11,119
regulatory compliance audits

1164
00:59:11,119 --> 00:59:15,520
for customers so private companies

1165
00:59:15,520 --> 00:59:19,359
i also do a lot of reverse engineering

1166
00:59:19,359 --> 00:59:23,040
of both malware and sdk

1167
00:59:23,040 --> 00:59:26,400
i put them on the same line because

1168
00:59:26,400 --> 00:59:29,520
usually sdk use the same techniques

1169
00:59:29,520 --> 00:59:33,839
as malware to hide their behavior

1170
00:59:34,160 --> 00:59:38,000
i'm also expert witness in different

1171
00:59:38,000 --> 00:59:41,599
class actions at least in the u.s

1172
00:59:41,599 --> 00:59:44,880
when i have time i craft open tools and

1173
00:59:44,880 --> 00:59:47,440
free software

1174
00:59:47,440 --> 00:59:50,480
sometimes i give talks in frogglish like

1175
00:59:50,480 --> 00:59:54,240
this one today and

1176
00:59:54,240 --> 00:59:57,440
during the weekend i do trainings and

1177
00:59:57,440 --> 01:00:00,640
awareness conferences uh also

1178
01:00:00,640 --> 01:00:04,160
so basically i work for lawyers

1179
01:00:04,160 --> 01:00:08,240
dpo cso ngos academics

1180
01:00:08,240 --> 01:00:11,359
journalists etc etc so

1181
01:00:11,359 --> 01:00:14,720
maybe you have seen me on your tv or

1182
01:00:14,720 --> 01:00:19,280
on your more smaller screen

1183
01:00:19,280 --> 01:00:23,839
in a cache investigation

1184
01:00:23,839 --> 01:00:30,880
so now i will try to explain

1185
01:00:30,880 --> 01:00:34,799
why peters and what is peters

1186
01:00:34,799 --> 01:00:38,079
so first of all why

1187
01:00:38,079 --> 01:00:41,520
so the candid reason is

1188
01:00:41,520 --> 01:00:44,319
there is a lake of open source threat

1189
01:00:44,319 --> 01:00:46,079
intelligence tools

1190
01:00:46,079 --> 01:00:49,440
in the android world but the

1191
01:00:49,440 --> 01:00:52,880
political reason is that for me

1192
01:00:52,880 --> 01:00:54,960
sweat intelligence and straight analysis

1193
01:00:54,960 --> 01:00:56,559
should not be

1194
01:00:56,559 --> 01:01:01,280
the proprietary of a private company and

1195
01:01:01,280 --> 01:01:04,480
at the right side of the slide

1196
01:01:04,480 --> 01:01:07,839
the slide i just put few screenshots of

1197
01:01:07,839 --> 01:01:09,040
the pricing of

1198
01:01:09,040 --> 01:01:12,400
aristotle because of virus total is a

1199
01:01:12,400 --> 01:01:13,359
well-known

1200
01:01:13,359 --> 01:01:15,760
threat intelligence platform run by

1201
01:01:15,760 --> 01:01:17,920
google

1202
01:01:17,920 --> 01:01:21,440
so yeah it's the first part of the why

1203
01:01:21,440 --> 01:01:23,839
and the second part of the y is this one

1204
01:01:23,839 --> 01:01:24,799
and it

1205
01:01:24,799 --> 01:01:29,440
was a quite long story but uh for short

1206
01:01:29,440 --> 01:01:32,960
back into 2020 privacy activists

1207
01:01:32,960 --> 01:01:36,960
i worked with asked avas for

1208
01:01:36,960 --> 01:01:40,400
an increase increased quotas on

1209
01:01:40,400 --> 01:01:43,920
apk lab because we were conducting an

1210
01:01:43,920 --> 01:01:48,640
investigation on a mid-scale

1211
01:01:49,359 --> 01:01:52,799
scam campaign in india

1212
01:01:52,799 --> 01:01:56,400
and others said um they

1213
01:01:56,400 --> 01:01:58,640
they want more recognition in the

1214
01:01:58,640 --> 01:01:59,920
privacy community

1215
01:01:59,920 --> 01:02:03,440
after the scandal they had uh

1216
01:02:03,440 --> 01:02:06,960
last year so yeah they refuse to

1217
01:02:06,960 --> 01:02:09,240
give us access and uh

1218
01:02:09,240 --> 01:02:10,799
[Music]

1219
01:02:10,799 --> 01:02:14,240
yeah the scandal uh

1220
01:02:14,240 --> 01:02:18,160
was that league dog leaked documents

1221
01:02:18,160 --> 01:02:21,280
exposed the secretive market

1222
01:02:21,280 --> 01:02:25,119
run by avast so basically the company

1223
01:02:25,119 --> 01:02:28,799
was telling what

1224
01:02:28,799 --> 01:02:32,880
what are your searches what the

1225
01:02:32,880 --> 01:02:35,280
what is the link you click on what you

1226
01:02:35,280 --> 01:02:38,160
buy etc extra to different customers

1227
01:02:38,160 --> 01:02:39,359
like home depot

1228
01:02:39,359 --> 01:02:43,440
google microsoft pepsi bookstore etc

1229
01:02:43,440 --> 01:02:46,640
so yeah no

1230
01:02:46,640 --> 01:02:50,400
and maybe uh you know that the

1231
01:02:50,400 --> 01:02:53,200
the avast antivirus for android is

1232
01:02:53,200 --> 01:02:56,240
basically just a

1233
01:02:58,720 --> 01:03:03,200
large hover collecting a huge amount of

1234
01:03:03,200 --> 01:03:05,920
uh personal information and browsing

1235
01:03:05,920 --> 01:03:06,559
history

1236
01:03:06,559 --> 01:03:09,760
etc extra so yeah i'm so basically

1237
01:03:09,760 --> 01:03:13,599
doesn't like a privacy activist

1238
01:03:13,599 --> 01:03:16,640
so i decided with other

1239
01:03:16,640 --> 01:03:20,319
people over here to start building

1240
01:03:20,319 --> 01:03:22,960
an open source threat intelligence for

1241
01:03:22,960 --> 01:03:23,680
android

1242
01:03:23,680 --> 01:03:27,520
apps and here is

1243
01:03:27,520 --> 01:03:30,640
what is peters so petus is basically an

1244
01:03:30,640 --> 01:03:33,200
open source mobile threat intelligence

1245
01:03:33,200 --> 01:03:36,559
but moreover is a also a playground

1246
01:03:36,559 --> 01:03:39,280
a playground because since it's open

1247
01:03:39,280 --> 01:03:39,920
source

1248
01:03:39,920 --> 01:03:44,960
it's a good opportunity for for us to

1249
01:03:44,960 --> 01:03:48,480
invent new way to analyze the samples to

1250
01:03:48,480 --> 01:03:50,240
collaborate them

1251
01:03:50,240 --> 01:03:53,920
to determine if there are clusters

1252
01:03:53,920 --> 01:03:58,319
into the the database extra extra

1253
01:03:58,319 --> 01:04:01,280
so the platform is entirely driven by

1254
01:04:01,280 --> 01:04:02,720
its community

1255
01:04:02,720 --> 01:04:05,200
so it's totally free to use as you can

1256
01:04:05,200 --> 01:04:06,480
easily submit

1257
01:04:06,480 --> 01:04:10,880
a sample and you can also conduct a

1258
01:04:10,880 --> 01:04:14,240
advanced uh searches over here

1259
01:04:14,240 --> 01:04:17,359
it is only based on existing

1260
01:04:17,359 --> 01:04:20,640
uh free and open tools software tools

1261
01:04:20,640 --> 01:04:24,480
like mobsf apkid

1262
01:04:24,480 --> 01:04:28,000
extra extra and it's self-stable

1263
01:04:28,000 --> 01:04:31,119
so you can easily

1264
01:04:31,119 --> 01:04:33,920
host the entire platform on your laptop

1265
01:04:33,920 --> 01:04:34,319
or

1266
01:04:34,319 --> 01:04:38,799
in your company extra extra but uh

1267
01:04:38,799 --> 01:04:42,000
peters is not meant to to be

1268
01:04:42,000 --> 01:04:45,359
a commercial product and so

1269
01:04:45,359 --> 01:04:48,720
if you want to to check it out you you

1270
01:04:48,720 --> 01:04:51,839
you can uh just go brad the weber

1271
01:04:51,839 --> 01:04:57,599
at beta.pitties.org and just try it

1272
01:04:57,680 --> 01:05:01,280
so a few features over here

1273
01:05:01,280 --> 01:05:04,400
so with mobsf we are able to extract

1274
01:05:04,400 --> 01:05:07,520
all the domains and url defined in a

1275
01:05:07,520 --> 01:05:08,799
given apk

1276
01:05:08,799 --> 01:05:13,280
and we compute a world map

1277
01:05:13,280 --> 01:05:15,440
highlighting where are located the

1278
01:05:15,440 --> 01:05:17,440
servers corresponding to the different

1279
01:05:17,440 --> 01:05:20,000
domains

1280
01:05:20,799 --> 01:05:23,839
since we also grabbed the information

1281
01:05:23,839 --> 01:05:27,039
from virustotal we were able to uh

1282
01:05:27,039 --> 01:05:31,359
this to compute the sample timeline

1283
01:05:31,359 --> 01:05:35,599
so it's sometimes useful when you are

1284
01:05:35,599 --> 01:05:41,680
studying a mid-range or large-range

1285
01:05:41,680 --> 01:05:45,599
malware campaign there is also

1286
01:05:45,599 --> 01:05:51,839
a bunch of tools like mobisef but also

1287
01:05:52,000 --> 01:05:55,440
quara consign to

1288
01:05:55,440 --> 01:05:58,799
statically determine

1289
01:05:58,880 --> 01:06:01,200
what's the behavior of the of the

1290
01:06:01,200 --> 01:06:03,599
application

1291
01:06:03,599 --> 01:06:07,039
um you have also here is an example of

1292
01:06:07,039 --> 01:06:08,960
the different data we retrieve from the

1293
01:06:08,960 --> 01:06:11,920
apk so here is the certificate details

1294
01:06:11,920 --> 01:06:14,000
so this is a certificate that has been

1295
01:06:14,000 --> 01:06:16,640
used to sign the application

1296
01:06:16,640 --> 01:06:20,559
and you can pivot on

1297
01:06:20,559 --> 01:06:24,799
each indicators even on the

1298
01:06:24,799 --> 01:06:28,400
md5 of the certificate or on a domain

1299
01:06:28,400 --> 01:06:31,599
extractor and each time you pivot

1300
01:06:31,599 --> 01:06:34,319
you will have a list of all the

1301
01:06:34,319 --> 01:06:35,359
applications

1302
01:06:35,359 --> 01:06:38,720
having the same attribute

1303
01:06:38,720 --> 01:06:40,880
and here we have the different data

1304
01:06:40,880 --> 01:06:44,240
retrieved from malware bazaar

1305
01:06:44,240 --> 01:06:48,400
so here are the basic features

1306
01:06:48,400 --> 01:06:50,480
and moreover for the straight

1307
01:06:50,480 --> 01:06:51,920
intelligence part

1308
01:06:51,920 --> 01:06:56,559
we use dexophysie for a computing

1309
01:06:56,559 --> 01:06:59,599
fuzzy hash of each sample

1310
01:06:59,599 --> 01:07:02,160
so after that we are able to compare

1311
01:07:02,160 --> 01:07:02,880
them

1312
01:07:02,880 --> 01:07:06,559
quickly in terms of uh similarity

1313
01:07:06,559 --> 01:07:08,960
in the in their code they are sharing

1314
01:07:08,960 --> 01:07:09,839
codes

1315
01:07:09,839 --> 01:07:13,119
etc you can also run

1316
01:07:13,119 --> 01:07:18,160
a retro ant so basically you upload your

1317
01:07:18,160 --> 01:07:21,839
rule set on peter's and you

1318
01:07:21,839 --> 01:07:24,319
launch a retrend and you have the list

1319
01:07:24,319 --> 01:07:25,839
of the

1320
01:07:25,839 --> 01:07:28,559
of the samples matching your rules and

1321
01:07:28,559 --> 01:07:30,720
the files

1322
01:07:30,720 --> 01:07:33,280
containing inside the apk matching your

1323
01:07:33,280 --> 01:07:35,839
rules etc etc you can

1324
01:07:35,839 --> 01:07:37,920
upload your rules and turn them private

1325
01:07:37,920 --> 01:07:40,079
so the or you are the only one to

1326
01:07:40,079 --> 01:07:42,160
see the results or share the results

1327
01:07:42,160 --> 01:07:44,240
with the others

1328
01:07:44,240 --> 01:07:46,479
and

1329
01:07:47,920 --> 01:07:51,280
a few weeks ago we worked and we were

1330
01:07:51,280 --> 01:07:51,839
working

1331
01:07:51,839 --> 01:07:55,119
on some kind of genetic

1332
01:07:55,119 --> 01:07:58,319
analysis on the sample which is based

1333
01:07:58,319 --> 01:08:02,160
on the control flow graph analysis

1334
01:08:02,160 --> 01:08:04,480
so here is a screenshot of the the

1335
01:08:04,480 --> 01:08:05,280
result you

1336
01:08:05,280 --> 01:08:07,520
you will have so basically you do a

1337
01:08:07,520 --> 01:08:08,559
search

1338
01:08:08,559 --> 01:08:10,400
and at the top of the results you will

1339
01:08:10,400 --> 01:08:13,039
have some kind of a tree

1340
01:08:13,039 --> 01:08:16,560
representing the similarities in terms

1341
01:08:16,560 --> 01:08:18,319
of control photographs

1342
01:08:18,319 --> 01:08:22,238
of the samples and the x-axis

1343
01:08:22,238 --> 01:08:25,279
represents the percentage of difference

1344
01:08:25,279 --> 01:08:30,640
in terms of control flow graph topology

1345
01:08:30,640 --> 01:08:33,679
so now let's uh

1346
01:08:33,679 --> 01:08:37,439
talk a bit more about cfg and how we

1347
01:08:37,439 --> 01:08:38,880
dissect them

1348
01:08:38,880 --> 01:08:42,080
so quick now quick note about cfg

1349
01:08:42,080 --> 01:08:45,359
so what i call here control flow graph

1350
01:08:45,359 --> 01:08:48,799
is some a graph

1351
01:08:48,799 --> 01:08:52,000
in which each node represents

1352
01:08:52,000 --> 01:08:55,600
a method and each links

1353
01:08:55,600 --> 01:08:59,120
represent a coal

1354
01:08:59,679 --> 01:09:03,120
between two two methods

1355
01:09:03,120 --> 01:09:06,960
so oh we extract the cfg from an apk

1356
01:09:06,960 --> 01:09:10,640
so you can use undergrad for that so

1357
01:09:10,640 --> 01:09:13,839
first of all you analyze the apk so

1358
01:09:13,839 --> 01:09:17,439
you give it the path to your apk

1359
01:09:17,439 --> 01:09:20,960
and then you can retrieve the call graph

1360
01:09:20,960 --> 01:09:24,238
of your apk and you have the entire code

1361
01:09:24,238 --> 01:09:24,640
graph

1362
01:09:24,640 --> 01:09:28,000
of your uh of your sample here which is

1363
01:09:28,000 --> 01:09:29,839
some kind of a

1364
01:09:29,839 --> 01:09:34,880
bunch of pasta and another

1365
01:09:34,880 --> 01:09:38,399
interesting uh feature of undergrad

1366
01:09:38,399 --> 01:09:42,640
is the ability to locate

1367
01:09:42,640 --> 01:09:45,759
both a method and

1368
01:09:45,759 --> 01:09:49,040
a class and

1369
01:09:49,040 --> 01:09:52,319
here we are looking at the get device id

1370
01:09:52,319 --> 01:09:53,600
method which is

1371
01:09:53,600 --> 01:09:55,840
defined in the telephony manager of

1372
01:09:55,840 --> 01:09:57,120
android

1373
01:09:57,120 --> 01:09:59,440
and this method is meant to return the

1374
01:09:59,440 --> 01:10:00,480
imei

1375
01:10:00,480 --> 01:10:04,000
of the of the device and with underworld

1376
01:10:04,000 --> 01:10:04,640
with this

1377
01:10:04,640 --> 01:10:08,000
uh simple code you are able to return

1378
01:10:08,000 --> 01:10:10,640
all the methods matching the two regexes

1379
01:10:10,640 --> 01:10:11,360
here

1380
01:10:11,360 --> 01:10:14,960
but here we have a perfect match so the

1381
01:10:14,960 --> 01:10:17,440
the array here will contain uh only one

1382
01:10:17,440 --> 01:10:18,000
uh

1383
01:10:18,000 --> 01:10:20,560
only one method if the method is called

1384
01:10:20,560 --> 01:10:22,960
um in the application

1385
01:10:22,960 --> 01:10:26,080
and to to do

1386
01:10:26,080 --> 01:10:28,000
more interesting things with the with

1387
01:10:28,000 --> 01:10:31,199
the two primitives we have seen before

1388
01:10:31,199 --> 01:10:34,800
is to construct the control flow graph

1389
01:10:34,800 --> 01:10:38,000
of a given android api so

1390
01:10:38,000 --> 01:10:40,480
here i'm still focusing on the gate

1391
01:10:40,480 --> 01:10:41,360
device id

1392
01:10:41,360 --> 01:10:44,800
api exposed by the telephony manager

1393
01:10:44,800 --> 01:10:48,320
and in my sample i want to

1394
01:10:48,320 --> 01:10:52,239
retrieve all the different

1395
01:10:52,239 --> 01:10:55,520
piece of code or the different

1396
01:10:55,520 --> 01:10:58,560
methods directly

1397
01:10:58,560 --> 01:11:02,000
or indirectly calling the get device id

1398
01:11:02,000 --> 01:11:06,480
api and when i construct the

1399
01:11:06,480 --> 01:11:09,600
cfg of a given api i have

1400
01:11:09,600 --> 01:11:13,120
one leaf which is the api and

1401
01:11:13,120 --> 01:11:16,239
multiple routes at the graph

1402
01:11:16,239 --> 01:11:20,000
and the multiple routes are probably

1403
01:11:20,000 --> 01:11:23,040
entry points in the application and if

1404
01:11:23,040 --> 01:11:23,520
there are

1405
01:11:23,520 --> 01:11:26,719
entry points it indic that

1406
01:11:26,719 --> 01:11:29,440
indicates that the code is presumably

1407
01:11:29,440 --> 01:11:30,640
cold

1408
01:11:30,640 --> 01:11:34,400
so here we have two tasks defined

1409
01:11:34,400 --> 01:11:38,239
in the sample doing something

1410
01:11:38,239 --> 01:11:43,120
in background and then execute after

1411
01:11:43,120 --> 01:11:46,560
which are indirectly calling

1412
01:11:46,560 --> 01:11:49,679
the guide device id api here

1413
01:11:49,679 --> 01:11:52,640
is just a an intermediate node which is

1414
01:11:52,640 --> 01:11:53,679
the aggregation

1415
01:11:53,679 --> 01:11:56,719
of the different nodes between the entry

1416
01:11:56,719 --> 01:11:58,080
points here

1417
01:11:58,080 --> 01:12:01,600
and the api here

1418
01:12:01,600 --> 01:12:05,920
so when you look at a report

1419
01:12:05,920 --> 01:12:08,960
on peters you will see

1420
01:12:08,960 --> 01:12:13,040
two different things the cfg

1421
01:12:13,040 --> 01:12:17,120
for different android api

1422
01:12:17,120 --> 01:12:21,360
we are tracking so here is for the

1423
01:12:21,360 --> 01:12:24,640
retrieve of the imei

1424
01:12:24,640 --> 01:12:27,760
and you will also have

1425
01:12:27,760 --> 01:12:31,120
a screenshot of the code calling

1426
01:12:31,120 --> 01:12:32,239
directly

1427
01:12:32,239 --> 01:12:35,440
this api so you can

1428
01:12:35,440 --> 01:12:38,640
click on the on the piece of the code

1429
01:12:38,640 --> 01:12:39,520
and

1430
01:12:39,520 --> 01:12:42,800
you see the entire code of a method uh

1431
01:12:42,800 --> 01:12:46,080
of a method calling this api

1432
01:12:46,080 --> 01:12:49,440
and then what if we are able

1433
01:12:49,440 --> 01:12:52,719
or we try to compare

1434
01:12:52,719 --> 01:12:57,040
to cfg so what we have implemented in

1435
01:12:57,040 --> 01:12:57,760
peters

1436
01:12:57,760 --> 01:13:01,840
is really basic and it's the

1437
01:13:01,840 --> 01:13:03,840
most basic things that has been

1438
01:13:03,840 --> 01:13:05,760
described in the

1439
01:13:05,760 --> 01:13:08,880
in the academic literature so

1440
01:13:08,880 --> 01:13:12,960
for each sample we compute

1441
01:13:12,960 --> 01:13:16,000
the cfg and we count

1442
01:13:16,000 --> 01:13:19,920
the number of entry points per type

1443
01:13:19,920 --> 01:13:22,640
so basically we are an entry point could

1444
01:13:22,640 --> 01:13:23,040
be

1445
01:13:23,040 --> 01:13:26,719
an activity or a thread or a task

1446
01:13:26,719 --> 01:13:29,840
or a listener

1447
01:13:29,840 --> 01:13:34,159
for example on intent extra extra

1448
01:13:34,159 --> 01:13:37,440
and for each api

1449
01:13:37,440 --> 01:13:41,678
and in pittas we track

1450
01:13:43,360 --> 01:13:47,600
100 api and

1451
01:13:47,600 --> 01:13:50,320
13 different entry types entrepreneur

1452
01:13:50,320 --> 01:13:52,400
types

1453
01:13:52,400 --> 01:13:55,760
and then you flatten it into a vector

1454
01:13:55,760 --> 01:13:58,960
of n dimensions

1455
01:13:58,960 --> 01:14:02,400
and since you have

1456
01:14:02,400 --> 01:14:06,320
here as an example the the api one

1457
01:14:06,320 --> 01:14:09,760
has 12 entry points

1458
01:14:09,760 --> 01:14:14,159
of this type in the cfg of the sample

1459
01:14:14,159 --> 01:14:16,000
we are able to compute pairwise

1460
01:14:16,000 --> 01:14:17,600
distances

1461
01:14:17,600 --> 01:14:21,360
either euclidean or to jaccard

1462
01:14:21,360 --> 01:14:24,880
distance then we

1463
01:14:24,880 --> 01:14:28,480
normalize the the distance so we don't

1464
01:14:28,480 --> 01:14:30,640
we don't want a distance but a

1465
01:14:30,640 --> 01:14:31,760
percentage

1466
01:14:31,760 --> 01:14:35,840
of difference so with some kind

1467
01:14:35,840 --> 01:14:39,120
of magical cross multiplications

1468
01:14:39,120 --> 01:14:42,159
we achieve the normalization and then

1469
01:14:42,159 --> 01:14:45,280
we compute the hierarchical clustering

1470
01:14:45,280 --> 01:14:49,280
which is a statistical

1471
01:14:49,280 --> 01:14:52,400
method which is a really simple

1472
01:14:52,400 --> 01:14:56,480
and then we represent this clustering

1473
01:14:56,480 --> 01:14:59,520
uh on a dendrogram

1474
01:14:59,520 --> 01:15:03,920
and adrendrogram is a

1475
01:15:04,800 --> 01:15:10,560
also referred as a phylogenetic tree

1476
01:15:10,560 --> 01:15:15,040
and so here we

1477
01:15:16,159 --> 01:15:19,280
have the result that is displayed on

1478
01:15:19,280 --> 01:15:24,480
uh petus we have the daundogram for

1479
01:15:24,640 --> 01:15:27,440
a list of sample basically the results

1480
01:15:27,440 --> 01:15:28,800
of a search

1481
01:15:28,800 --> 01:15:32,480
and what you see here on the x-axis

1482
01:15:32,480 --> 01:15:35,840
is the percentage of difference so

1483
01:15:35,840 --> 01:15:39,679
here we have at least three samples

1484
01:15:39,679 --> 01:15:42,719
here which are which are really similar

1485
01:15:42,719 --> 01:15:43,440
in terms

1486
01:15:43,440 --> 01:15:47,040
of a control flow graph

1487
01:15:47,040 --> 01:15:50,000
here we have two samples which are

1488
01:15:50,000 --> 01:15:54,000
really similar but

1489
01:15:54,000 --> 01:15:57,199
nothing really similar to them

1490
01:15:57,199 --> 01:16:00,880
has been found because we see here

1491
01:16:00,880 --> 01:16:04,239
that the line here indicates the

1492
01:16:04,239 --> 01:16:05,440
difference

1493
01:16:05,440 --> 01:16:08,800
between this subgroup

1494
01:16:08,800 --> 01:16:11,920
of samples and this one

1495
01:16:11,920 --> 01:16:14,960
so here we have

1496
01:16:14,960 --> 01:16:19,520
several samples with a very low

1497
01:16:19,520 --> 01:16:20,080
percentage

1498
01:16:20,080 --> 01:16:23,440
of difference so maybe we could find a

1499
01:16:23,440 --> 01:16:25,040
cluster here

1500
01:16:25,040 --> 01:16:28,480
so maybe some kind of variant of a

1501
01:16:28,480 --> 01:16:34,560
same malware or um

1502
01:16:34,560 --> 01:16:37,920
counterfeit version of

1503
01:16:37,920 --> 01:16:41,760
an official application etc extra

1504
01:16:41,760 --> 01:16:44,719
and here we have uh some a single sample

1505
01:16:44,719 --> 01:16:46,880
that is totally different

1506
01:16:46,880 --> 01:16:50,719
from all the others and

1507
01:16:50,719 --> 01:16:53,679
what why we decided to look at the

1508
01:16:53,679 --> 01:16:55,360
control flow graphs

1509
01:16:55,360 --> 01:16:58,800
is because we wanted to have a way to

1510
01:16:58,800 --> 01:16:59,679
compare

1511
01:16:59,679 --> 01:17:02,480
to easily compare two samples in terms

1512
01:17:02,480 --> 01:17:04,000
of behavior

1513
01:17:04,000 --> 01:17:07,920
and we make the choice

1514
01:17:07,920 --> 01:17:11,040
to focus on

1515
01:17:11,040 --> 01:17:14,080
100 different android apis

1516
01:17:14,080 --> 01:17:17,760
like okay get imei but also

1517
01:17:17,760 --> 01:17:20,560
retrieve the contacts the contacts or

1518
01:17:20,560 --> 01:17:22,560
read the

1519
01:17:22,560 --> 01:17:26,360
call log read the brother history

1520
01:17:26,360 --> 01:17:27,600
[Music]

1521
01:17:27,600 --> 01:17:32,239
etc etc and so we want to

1522
01:17:32,239 --> 01:17:36,920
to to have a some kind of uh

1523
01:17:36,920 --> 01:17:40,800
dexophusey-like way to compare

1524
01:17:40,800 --> 01:17:44,400
applications but in terms of behavior

1525
01:17:44,400 --> 01:17:49,120
so what we know at least that

1526
01:17:49,120 --> 01:17:52,960
is when the exophysis find

1527
01:17:52,960 --> 01:17:55,040
[Music]

1528
01:17:55,040 --> 01:17:57,840
a large percentage of similarity between

1529
01:17:57,840 --> 01:17:58,239
two

1530
01:17:58,239 --> 01:18:01,840
samples a way to compare the samples

1531
01:18:01,840 --> 01:18:05,040
with the cfg comparison

1532
01:18:05,040 --> 01:18:07,760
achieve the same results but we also

1533
01:18:07,760 --> 01:18:09,280
were able to find

1534
01:18:09,280 --> 01:18:14,239
some kind of variance in finn spy

1535
01:18:14,480 --> 01:18:17,840
so now

1536
01:18:17,840 --> 01:18:19,130
a small conclusion

1537
01:18:19,130 --> 01:18:21,199
[Music]

1538
01:18:21,199 --> 01:18:24,960
so keep in mind that peters is still in

1539
01:18:24,960 --> 01:18:28,080
beta and we are only three

1540
01:18:28,080 --> 01:18:32,400
active contributors um the first

1541
01:18:32,400 --> 01:18:36,800
success we we had is we have detected a

1542
01:18:36,800 --> 01:18:40,239
few months ago fenced by eidon in

1543
01:18:40,239 --> 01:18:44,159
the latest version of wire

1544
01:18:44,159 --> 01:18:46,640
unfortunately even if we have contacted

1545
01:18:46,640 --> 01:18:48,719
wire to get money more information about

1546
01:18:48,719 --> 01:18:49,679
that

1547
01:18:49,679 --> 01:18:53,199
no answer were received and the

1548
01:18:53,199 --> 01:18:56,880
c2 of this sample was uh operated by

1549
01:18:56,880 --> 01:19:00,080
uh i don't remember edzner

1550
01:19:00,080 --> 01:19:04,080
located in germany and we contacted them

1551
01:19:04,080 --> 01:19:08,800
but uh no ones were for them

1552
01:19:08,800 --> 01:19:11,920
so we need

1553
01:19:11,920 --> 01:19:15,600
help we need things maybe from you

1554
01:19:15,600 --> 01:19:19,840
we need feedbacks we need contributions

1555
01:19:19,840 --> 01:19:24,080
and also some kind of liquid

1556
01:19:24,080 --> 01:19:27,600
brain juice and more tests yes

1557
01:19:27,600 --> 01:19:31,199
definitely more and

1558
01:19:31,199 --> 01:19:34,320
feel free to contribute to tests to send

1559
01:19:34,320 --> 01:19:34,880
us

1560
01:19:34,880 --> 01:19:38,000
feedbacks or if you find issues and

1561
01:19:38,000 --> 01:19:40,000
we already know that we have a large

1562
01:19:40,000 --> 01:19:42,000
bunch of issues

1563
01:19:42,000 --> 01:19:44,480
um just feel free to report them or to

1564
01:19:44,480 --> 01:19:45,920
try to fix them

1565
01:19:45,920 --> 01:19:50,000
and if you want to to play with the data

1566
01:19:50,000 --> 01:19:53,120
already computed by

1567
01:19:53,120 --> 01:19:56,560
peters feel free to experiment with the

1568
01:19:56,560 --> 01:19:57,760
with the data

1569
01:19:57,760 --> 01:20:01,840
maybe implement new way to to dissect

1570
01:20:01,840 --> 01:20:04,960
samples etc etc

1571
01:20:04,960 --> 01:20:08,000
one additional note we hear is that

1572
01:20:08,000 --> 01:20:11,679
if you connect

1573
01:20:11,679 --> 01:20:14,880
your github account to pytus

1574
01:20:14,880 --> 01:20:18,800
you will be able to retrieve the

1575
01:20:18,800 --> 01:20:22,159
the report in the json format and

1576
01:20:22,159 --> 01:20:25,199
in the json representation of the format

1577
01:20:25,199 --> 01:20:26,159
you will have access

1578
01:20:26,159 --> 01:20:29,360
to even more information that those

1579
01:20:29,360 --> 01:20:32,400
are already displayed on the report as

1580
01:20:32,400 --> 01:20:34,719
an example you will have

1581
01:20:34,719 --> 01:20:38,320
all the secrets defined in a given

1582
01:20:38,320 --> 01:20:42,159
apk and then after you will be able to

1583
01:20:42,159 --> 01:20:43,040
pivot

1584
01:20:43,040 --> 01:20:46,159
on for example firebase

1585
01:20:46,159 --> 01:20:50,239
a uh api key etc extra

1586
01:20:50,239 --> 01:20:54,159
so this talk was meant to be short

1587
01:20:54,159 --> 01:20:57,760
uh in order to have room to discuss to

1588
01:20:57,760 --> 01:20:58,800
have questions

1589
01:20:58,800 --> 01:21:02,000
extra extra so thank you very much

1590
01:21:02,000 --> 01:21:05,440
and it's up to you now

1591
01:21:05,679 --> 01:21:09,520
okay thank you thank you

1592
01:21:11,840 --> 01:21:14,719
so well sadly we don't have any

1593
01:21:14,719 --> 01:21:16,000
questions right now but

1594
01:21:16,000 --> 01:21:19,199
i will um i will try to

1595
01:21:19,199 --> 01:21:22,719
to uh to come with one so um we which uh

1596
01:21:22,719 --> 01:21:25,760
with uh before we just start the talk

1597
01:21:25,760 --> 01:21:29,840
about um the detection of

1598
01:21:29,840 --> 01:21:32,719
debugging and things like that do you

1599
01:21:32,719 --> 01:21:35,360
run into many samples that

1600
01:21:35,360 --> 01:21:37,679
block the analysis that you do with the

1601
01:21:37,679 --> 01:21:39,199
tools or

1602
01:21:39,199 --> 01:21:43,440
or is it or frequent

1603
01:21:43,440 --> 01:21:46,639
yeah so peters only does

1604
01:21:46,639 --> 01:21:51,600
static analysis but uh

1605
01:21:51,600 --> 01:21:55,760
from my own experience a lot of

1606
01:21:55,760 --> 01:21:59,040
applications and also sdk

1607
01:21:59,040 --> 01:22:02,320
detect uh the application is running

1608
01:22:02,320 --> 01:22:05,440
into a virtual machine

1609
01:22:05,440 --> 01:22:08,639
or in a an

1610
01:22:08,639 --> 01:22:12,159
android emulator or on a

1611
01:22:12,159 --> 01:22:16,239
j broken device and refuse to start

1612
01:22:16,239 --> 01:22:19,520
or just start but with a limited uh

1613
01:22:19,520 --> 01:22:24,639
with limited features um when you

1614
01:22:24,639 --> 01:22:27,679
as an example all the

1615
01:22:27,679 --> 01:22:31,760
the sdks for data monetization

1616
01:22:31,760 --> 01:22:34,960
detect that you are running on on the

1617
01:22:34,960 --> 01:22:36,239
sandbox

1618
01:22:36,239 --> 01:22:39,920
and they simply die so you cannot

1619
01:22:39,920 --> 01:22:43,120
observe their behavior using

1620
01:22:43,120 --> 01:22:46,159
virtual machines or avd so

1621
01:22:46,159 --> 01:22:49,360
you have to run them into a

1622
01:22:49,360 --> 01:22:52,880
real device and use three that who

1623
01:22:52,880 --> 01:22:56,159
to intercept different calls

1624
01:22:56,159 --> 01:22:59,280
and um use

1625
01:22:59,280 --> 01:23:02,880
as an example uh mitm proxy to determine

1626
01:23:02,880 --> 01:23:04,719
what are the the different data that are

1627
01:23:04,719 --> 01:23:06,960
collected that is connected

1628
01:23:06,960 --> 01:23:10,480
extra extra but uh in peters you

1629
01:23:10,480 --> 01:23:15,360
have in the fingerprint

1630
01:23:15,360 --> 01:23:19,280
tab you have the part generated by

1631
01:23:19,280 --> 01:23:23,040
apk id and you see if

1632
01:23:23,040 --> 01:23:26,560
anti emulation

1633
01:23:26,880 --> 01:23:30,000
means are used and or defined or not in

1634
01:23:30,000 --> 01:23:32,719
the application

1635
01:23:32,719 --> 01:23:35,920
okay and have you uh run into uh

1636
01:23:35,920 --> 01:23:37,920
well there are also protections uh

1637
01:23:37,920 --> 01:23:40,320
against the reconstruction of

1638
01:23:40,320 --> 01:23:42,639
fcfg and things like that is is it

1639
01:23:42,639 --> 01:23:44,560
frequent in uh

1640
01:23:44,560 --> 01:23:48,719
in in the samples that you have observed

1641
01:23:48,719 --> 01:23:52,080
well it depends as far as i know with

1642
01:23:52,080 --> 01:23:55,120
finspies it's with spin spy it's

1643
01:23:55,120 --> 01:23:59,040
really easy to to reconstruct the cfg

1644
01:23:59,040 --> 01:24:00,960
[Music]

1645
01:24:00,960 --> 01:24:04,320
with facebook facebook with uh its own

1646
01:24:04,320 --> 01:24:07,520
sdk use reflection

1647
01:24:07,520 --> 01:24:11,360
and basically reflection totally broke

1648
01:24:11,360 --> 01:24:14,639
the the cfg

1649
01:24:14,639 --> 01:24:19,600
and uh by using um

1650
01:24:19,600 --> 01:24:22,880
underground we can simply

1651
01:24:22,880 --> 01:24:26,719
reconstruct cfg when it was

1652
01:24:26,719 --> 01:24:30,320
uh wanted to break the cfg

1653
01:24:30,320 --> 01:24:33,280
using different threads so basically you

1654
01:24:33,280 --> 01:24:34,320
have one thread

1655
01:24:34,320 --> 01:24:37,760
creating a new one and since you have a

1656
01:24:37,760 --> 01:24:39,040
straight switch

1657
01:24:39,040 --> 01:24:42,400
you cannot easily reconstruct the entire

1658
01:24:42,400 --> 01:24:45,600
graph better if you're able to so you

1659
01:24:45,600 --> 01:24:46,719
start with the

1660
01:24:46,719 --> 01:24:49,440
with the api you take all the ancestors

1661
01:24:49,440 --> 01:24:50,800
of this api

1662
01:24:50,800 --> 01:24:54,080
you arrive at a root in your cfg

1663
01:24:54,080 --> 01:24:58,080
and if this route is of type

1664
01:24:58,080 --> 01:25:01,520
thread so now you

1665
01:25:01,520 --> 01:25:05,600
can uh start another search for

1666
01:25:05,600 --> 01:25:08,719
to constructing another cfg with

1667
01:25:08,719 --> 01:25:12,560
the leaf of the cfg is the

1668
01:25:12,560 --> 01:25:16,639
the call to the init of the thread

1669
01:25:16,639 --> 01:25:20,719
and so you can go back to

1670
01:25:20,719 --> 01:25:24,400
the node that has created the shredder

1671
01:25:24,400 --> 01:25:26,639
and then reconstruct a new control flow

1672
01:25:26,639 --> 01:25:27,760
graph

1673
01:25:27,760 --> 01:25:30,880
and identify new entry points

1674
01:25:30,880 --> 01:25:34,000
etc etc so you can easily track back

1675
01:25:34,000 --> 01:25:37,520
uh straight creations um you cannot

1676
01:25:37,520 --> 01:25:40,560
track back the

1677
01:25:40,560 --> 01:25:44,719
the call to the run method

1678
01:25:44,719 --> 01:25:48,080
defined in a thread because in java

1679
01:25:48,080 --> 01:25:53,600
run is directly called by the jvm

1680
01:25:53,600 --> 01:25:56,960
and you cannot also uh

1681
01:25:56,960 --> 01:26:00,320
efficiently uh trans ba track back

1682
01:26:00,320 --> 01:26:03,760
the the call to the start

1683
01:26:03,760 --> 01:26:07,600
method because in android

1684
01:26:07,600 --> 01:26:12,000
applications usually use a thread pull

1685
01:26:12,000 --> 01:26:15,360
and the it's the thread pool run

1686
01:26:15,360 --> 01:26:18,000
by the jvm that we call the start

1687
01:26:18,000 --> 01:26:19,199
methods

1688
01:26:19,199 --> 01:26:22,159
so the most efficient way to reconstruct

1689
01:26:22,159 --> 01:26:24,000
some kind of call graphs when

1690
01:26:24,000 --> 01:26:27,199
it has been broken using threads is to

1691
01:26:27,199 --> 01:26:31,120
track back the init methods

1692
01:26:31,360 --> 01:26:33,120
i don't know if it answer your question

1693
01:26:33,120 --> 01:26:34,719
but uh

1694
01:26:34,719 --> 01:26:38,320
okay yeah i guess there are there are

1695
01:26:38,320 --> 01:26:40,960
many different techniques to to break

1696
01:26:40,960 --> 01:26:42,239
the cfg so

1697
01:26:42,239 --> 01:26:45,360
some can be addressed and maybe uh

1698
01:26:45,360 --> 01:26:48,880
others can only be uh addressed with uh

1699
01:26:48,880 --> 01:26:53,199
some kind of execution in

1700
01:26:53,199 --> 01:26:56,239
engine and

1701
01:26:56,239 --> 01:26:58,239
right now you you only have uh so

1702
01:26:58,239 --> 01:27:00,080
symbolic or

1703
01:27:00,080 --> 01:27:03,440
uh so well

1704
01:27:03,440 --> 01:27:06,800
yeah the the binary analysis and not

1705
01:27:06,800 --> 01:27:11,199
the execution engine right now that's it

1706
01:27:11,199 --> 01:27:14,320
yeah but uh for the

1707
01:27:14,320 --> 01:27:17,199
dynamic analysis it's in another project

1708
01:27:17,199 --> 01:27:20,480
which is pure analysis

1709
01:27:20,960 --> 01:27:25,840
so quickly peer analysis is a tool suite

1710
01:27:25,840 --> 01:27:30,000
around a single device which is a

1711
01:27:30,000 --> 01:27:34,000
p rug which is based on a raspberry pi

1712
01:27:34,000 --> 01:27:39,120
and the objective is to automate

1713
01:27:39,120 --> 01:27:41,280
both the installation of the root

1714
01:27:41,280 --> 01:27:42,480
certificates for

1715
01:27:42,480 --> 01:27:46,560
a ssl interception uh

1716
01:27:46,560 --> 01:27:48,560
automate the instrumentation of the

1717
01:27:48,560 --> 01:27:50,159
application using friday

1718
01:27:50,159 --> 01:27:52,520
excalibur etc extra so

1719
01:27:52,520 --> 01:27:55,120
[Music]

1720
01:27:55,120 --> 01:27:58,159
in a an ideal world in a

1721
01:27:58,159 --> 01:28:01,840
in the future i hope i will

1722
01:28:01,840 --> 01:28:04,800
be able to cross the line between what

1723
01:28:04,800 --> 01:28:06,400
we have found

1724
01:28:06,400 --> 01:28:09,440
by static analysis what we have found

1725
01:28:09,440 --> 01:28:13,679
in dynamic analysis and correlate them

1726
01:28:13,679 --> 01:28:16,719
so but uh yeah you know

1727
01:28:16,719 --> 01:28:20,400
there is only 24 hours a day so

1728
01:28:20,400 --> 01:28:24,159
that's a problem yeah i guess uh

1729
01:28:24,159 --> 01:28:27,280
yeah cross reference referencing the

1730
01:28:27,280 --> 01:28:30,320
results from various tools can be

1731
01:28:30,320 --> 01:28:34,559
quite the task that's true

1732
01:28:39,440 --> 01:28:44,320
no questions in the q a tab

1733
01:28:45,120 --> 01:28:50,800
no no no great i was very clear

1734
01:28:51,360 --> 01:28:56,000
sorry sometimes

1735
01:28:56,000 --> 01:28:59,120
well it's um it's

1736
01:28:59,120 --> 01:29:02,800
uh always more delicate in

1737
01:29:02,800 --> 01:29:05,920
an online setting like this yeah no

1738
01:29:05,920 --> 01:29:07,360
problem no problem

1739
01:29:07,360 --> 01:29:10,239
without without the audience face to

1740
01:29:10,239 --> 01:29:12,480
face

1741
01:29:12,639 --> 01:29:15,760
so well i guess we'll thank you

1742
01:29:15,760 --> 01:29:19,920
once again thank you very much

1743
01:29:20,800 --> 01:29:25,280
and we will have the

1744
01:29:25,280 --> 01:29:30,560
five minute timer for the next next talk

1745
01:29:30,560 --> 01:29:39,840
okay bye bye thank you again bye

1746
01:29:55,760 --> 01:29:58,800
hi yes

1747
01:29:58,800 --> 01:30:01,199
hello

1748
01:30:02,800 --> 01:30:07,840
we can hear you okay cool

1749
01:30:10,560 --> 01:30:16,239
so we'll just wait uh four minutes to be

1750
01:30:16,239 --> 01:30:20,080
on the schedule and then

1751
01:30:20,080 --> 01:30:23,360
will then be able to

1752
01:30:23,360 --> 01:30:35,839
share your screen

1753
01:34:53,600 --> 01:34:56,960
okay maybe you can start the

1754
01:34:56,960 --> 01:35:01,840
screen share

1755
01:35:26,840 --> 01:35:28,159
uh

1756
01:35:28,159 --> 01:35:30,559
okay

1757
01:35:34,320 --> 01:35:38,239
well we we have a small residual

1758
01:35:38,239 --> 01:35:39,250
black bar from

1759
01:35:39,250 --> 01:35:41,840
[Music]

1760
01:35:41,840 --> 01:35:44,159
well i guess this will be okay it's

1761
01:35:44,159 --> 01:35:45,840
always

1762
01:35:45,840 --> 01:35:49,119
it's always difficult to get rid of this

1763
01:35:49,119 --> 01:35:52,239
i don't know how we can do that as long

1764
01:35:52,239 --> 01:35:53,840
as you let it

1765
01:35:53,840 --> 01:35:56,560
reduce itself it i guess would not be a

1766
01:35:56,560 --> 01:35:58,960
problem

1767
01:36:00,800 --> 01:36:04,000
no i don't know

1768
01:36:04,000 --> 01:36:08,480
okay so next talk will be by uh benoit

1769
01:36:08,480 --> 01:36:12,080
from digital security which used to be

1770
01:36:12,080 --> 01:36:12,560
uh

1771
01:36:12,560 --> 01:36:16,000
one of our sponsors and he will talk

1772
01:36:16,000 --> 01:36:19,280
about uh hooking uh several kinds of

1773
01:36:19,280 --> 01:36:21,679
devices

1774
01:36:21,679 --> 01:36:25,440
so the mic is yours okay

1775
01:36:25,440 --> 01:36:27,920
so hello everyone i'd like to present to

1776
01:36:27,920 --> 01:36:29,760
you on youtube i developed to give back

1777
01:36:29,760 --> 01:36:30,560
the power of

1778
01:36:30,560 --> 01:36:33,920
analysts doing an analyzer android

1779
01:36:33,920 --> 01:36:37,040
mobile application so

1780
01:36:37,040 --> 01:36:40,000
who i am first of all let me increase

1781
01:36:40,000 --> 01:36:41,040
myself

1782
01:36:41,040 --> 01:36:44,159
my name is i'm currently working at

1783
01:36:44,159 --> 01:36:46,719
digital security as it a security

1784
01:36:46,719 --> 01:36:48,239
engineer

1785
01:36:48,239 --> 01:36:51,760
and i work on the security of iot

1786
01:36:51,760 --> 01:36:54,880
device and iic during a project a plan

1787
01:36:54,880 --> 01:36:55,199
to

1788
01:36:55,199 --> 01:36:56,800
implement security feature on their

1789
01:36:56,800 --> 01:37:00,239
device we forgetting

1790
01:37:00,800 --> 01:37:04,840
accurate label delivered by this

1791
01:37:04,840 --> 01:37:06,639
statistics

1792
01:37:06,639 --> 01:37:08,880
so during this presentation i will

1793
01:37:08,880 --> 01:37:10,960
explain why i choose to be interesting

1794
01:37:10,960 --> 01:37:12,800
on the android system

1795
01:37:12,800 --> 01:37:16,719
then we will focus on existing tools

1796
01:37:16,719 --> 01:37:19,440
after i represent what is i took and

1797
01:37:19,440 --> 01:37:21,040
next we will continue with an

1798
01:37:21,040 --> 01:37:23,360
action routine of the tool to understand

1799
01:37:23,360 --> 01:37:25,280
the internal mechanism

1800
01:37:25,280 --> 01:37:29,280
of astox finally i will present

1801
01:37:29,280 --> 01:37:32,480
what the tools will become

1802
01:37:33,440 --> 01:37:36,560
so uh why android uh

1803
01:37:36,560 --> 01:37:38,239
if we look at this graphic we can see

1804
01:37:38,239 --> 01:37:40,159
that android becomes the most important

1805
01:37:40,159 --> 01:37:41,520
operating system

1806
01:37:41,520 --> 01:37:45,600
with 88 of the smartphone markers

1807
01:37:45,600 --> 01:37:49,520
at the end of 2018

1808
01:37:49,520 --> 01:37:51,840
moreover during my experience i made

1809
01:37:51,840 --> 01:37:52,560
more and more

1810
01:37:52,560 --> 01:37:55,840
device using andriy the

1811
01:37:55,840 --> 01:37:59,199
system as a head unit of automotive

1812
01:37:59,199 --> 01:38:03,040
or for instance i see a

1813
01:38:03,040 --> 01:38:06,159
a device using a quattel uh stock where

1814
01:38:06,159 --> 01:38:06,480
the

1815
01:38:06,480 --> 01:38:07,920
sd card provided by quickdeal is a

1816
01:38:07,920 --> 01:38:09,520
custom android system

1817
01:38:09,520 --> 01:38:12,560
and we can push it to uh to make

1818
01:38:12,560 --> 01:38:15,360
our system and interact with the

1819
01:38:15,360 --> 01:38:16,380
hardware

1820
01:38:16,380 --> 01:38:17,920
[Music]

1821
01:38:17,920 --> 01:38:20,639
of the device

1822
01:38:21,280 --> 01:38:24,880
so uh why

1823
01:38:24,880 --> 01:38:27,280
why android rules word for for me the

1824
01:38:27,280 --> 01:38:28,159
recent purpose

1825
01:38:28,159 --> 01:38:31,280
of android they come from five points i

1826
01:38:31,280 --> 01:38:31,760
think

1827
01:38:31,760 --> 01:38:34,320
a bootloader provided by the sock with

1828
01:38:34,320 --> 01:38:36,639
an sd card reaction cigarette

1829
01:38:36,639 --> 01:38:39,679
uh as i said before quicktalks

1830
01:38:39,679 --> 01:38:43,199
give an android system with

1831
01:38:43,199 --> 01:38:46,560
all configuration already done

1832
01:38:46,560 --> 01:38:51,679
so easily to to have a secure bootloader

1833
01:38:52,000 --> 01:38:54,639
an api for hardware has a radio

1834
01:38:54,639 --> 01:38:56,080
functionality

1835
01:38:56,080 --> 01:39:00,080
nfc blp etc

1836
01:39:00,080 --> 01:39:03,760
moreover the containerization is uh

1837
01:39:03,760 --> 01:39:07,440
is by design so we have a system

1838
01:39:07,440 --> 01:39:10,400
with a comparison with arm chosen but

1839
01:39:10,400 --> 01:39:11,040
not from

1840
01:39:11,040 --> 01:39:14,719
edge device but some device and

1841
01:39:14,719 --> 01:39:18,080
all the application is also

1842
01:39:18,080 --> 01:39:20,480
containerized

1843
01:39:20,480 --> 01:39:23,199
moreover we use a high level language as

1844
01:39:23,199 --> 01:39:23,920
a

1845
01:39:23,920 --> 01:39:27,280
java so it's easily to program it

1846
01:39:27,280 --> 01:39:30,639
and we can interact with another

1847
01:39:30,639 --> 01:39:33,600
application so over process with

1848
01:39:33,600 --> 01:39:34,400
services

1849
01:39:34,400 --> 01:39:41,839
activity provider broadcast

1850
01:39:47,760 --> 01:39:49,840
so to have a better understanding of the

1851
01:39:49,840 --> 01:39:51,760
mechanism of foundry we can look this

1852
01:39:51,760 --> 01:39:52,639
graphic

1853
01:39:52,639 --> 01:39:54,880
each application is some boxes inside

1854
01:39:54,880 --> 01:39:56,719
the dab

1855
01:39:56,719 --> 01:39:59,040
and all files is restricted by a unique

1856
01:39:59,040 --> 01:40:00,239
strike functionality

1857
01:40:00,239 --> 01:40:03,119
of cleaning certain android permissions

1858
01:40:03,119 --> 01:40:04,800
and originally oracle is

1859
01:40:04,800 --> 01:40:08,159
a restrict by a permission and ask

1860
01:40:08,159 --> 01:40:09,920
during the installation

1861
01:40:09,920 --> 01:40:12,080
or when it's needed so for instance you

1862
01:40:12,080 --> 01:40:13,520
have a pop-up

1863
01:40:13,520 --> 01:40:16,800
on your android who ask to added

1864
01:40:16,800 --> 01:40:20,719
a new permission so we can see here

1865
01:40:20,719 --> 01:40:23,920
on the with

1866
01:40:23,920 --> 01:40:26,480
permission an application have access to

1867
01:40:26,480 --> 01:40:27,360
gpio

1868
01:40:27,360 --> 01:40:31,360
fpi sms vls functionality like here

1869
01:40:31,360 --> 01:40:33,440
and if it's not to communicate with

1870
01:40:33,440 --> 01:40:35,119
another application

1871
01:40:35,119 --> 01:40:37,280
we use the kernel module slash dev

1872
01:40:37,280 --> 01:40:40,080
search binder to access the service

1873
01:40:40,080 --> 01:40:43,679
activity broadcast provider and all this

1874
01:40:43,679 --> 01:40:45,040
action can be protected by

1875
01:40:45,040 --> 01:40:48,239
the permission assessment

1876
01:40:48,880 --> 01:40:52,320
so uh we have a some some feature on the

1877
01:40:52,320 --> 01:40:53,360
application is

1878
01:40:53,360 --> 01:40:55,360
the activity but it is just the splash

1879
01:40:55,360 --> 01:40:56,560
screen uh

1880
01:40:56,560 --> 01:40:58,400
you have when you launch the application

1881
01:40:58,400 --> 01:40:59,679
and you can have

1882
01:40:59,679 --> 01:41:03,440
some other splash screen

1883
01:41:03,440 --> 01:41:06,800
a different menu the service is the same

1884
01:41:06,800 --> 01:41:07,119
thing

1885
01:41:07,119 --> 01:41:11,280
but it's unlike an um on a on background

1886
01:41:11,280 --> 01:41:14,560
just when uh during the application in

1887
01:41:14,560 --> 01:41:15,520
the burning

1888
01:41:15,520 --> 01:41:18,320
and just makes some things uh just in

1889
01:41:18,320 --> 01:41:19,440
background

1890
01:41:19,440 --> 01:41:22,320
we have a reservoir so it's for instance

1891
01:41:22,320 --> 01:41:23,119
when you

1892
01:41:23,119 --> 01:41:26,400
receive an sms you can register to a

1893
01:41:26,400 --> 01:41:27,119
receiver

1894
01:41:27,119 --> 01:41:30,080
of sms and receive the content of sms

1895
01:41:30,080 --> 01:41:32,880
for instance to

1896
01:41:33,040 --> 01:41:36,400
2fa authentication

1897
01:41:36,400 --> 01:41:40,320
and you have a provider it's like a

1898
01:41:40,320 --> 01:41:42,560
database

1899
01:41:42,560 --> 01:41:47,600
accessible for the

1900
01:41:47,600 --> 01:41:50,400
application to have some feature and

1901
01:41:50,400 --> 01:41:51,520
request

1902
01:41:51,520 --> 01:41:54,719
what other applications

1903
01:41:57,199 --> 01:42:00,320
so i'm interesting into the existing

1904
01:42:00,320 --> 01:42:01,440
tools

1905
01:42:01,440 --> 01:42:04,800
before i uh created youtube and

1906
01:42:04,800 --> 01:42:07,520
i didn't found a tool to do what exactly

1907
01:42:07,520 --> 01:42:07,840
i

1908
01:42:07,840 --> 01:42:11,520
exactly want i see until

1909
01:42:11,520 --> 01:42:15,199
i see an interesting feature as a ic

1910
01:42:15,199 --> 01:42:18,880
analysis or a generation

1911
01:42:18,880 --> 01:42:21,760
of apega to explore venerability based

1912
01:42:21,760 --> 01:42:23,360
on analysis

1913
01:42:23,360 --> 01:42:26,880
perform sql injection on broadcasts

1914
01:42:26,880 --> 01:42:30,639
of podcast on a provider

1915
01:42:30,639 --> 01:42:33,440
and make a dynamic analysis a dynamic

1916
01:42:33,440 --> 01:42:34,719
booking

1917
01:42:34,719 --> 01:42:39,280
with frida but it's not really i

1918
01:42:39,280 --> 01:42:42,800
i want so

1919
01:42:42,800 --> 01:42:46,320
i create i took so what is astuk

1920
01:42:46,320 --> 01:42:48,960
i will use the the modular plugin that i

1921
01:42:48,960 --> 01:42:50,800
change this the sound analysis

1922
01:42:50,800 --> 01:42:52,800
i will explain what is done is just the

1923
01:42:52,800 --> 01:42:54,080
starter

1924
01:42:54,080 --> 01:42:57,840
the port generation

1925
01:42:57,920 --> 01:43:00,960
we can use the emulator

1926
01:43:00,960 --> 01:43:03,280
on a physical device or an emulator and

1927
01:43:03,280 --> 01:43:04,639
can be used on the lawn

1928
01:43:04,639 --> 01:43:08,239
with wood or not food phone because

1929
01:43:08,239 --> 01:43:10,320
sometimes we need to use not food phone

1930
01:43:10,320 --> 01:43:13,360
and sometimes we haven't

1931
01:43:13,360 --> 01:43:16,560
a root device so we need to

1932
01:43:16,560 --> 01:43:20,000
to adapt and

1933
01:43:20,000 --> 01:43:23,199
what i want to add it with this tool

1934
01:43:23,199 --> 01:43:25,679
it's used with dynamic and a static

1935
01:43:25,679 --> 01:43:26,480
exist

1936
01:43:26,480 --> 01:43:30,239
result to have a better result so

1937
01:43:30,239 --> 01:43:33,320
when you more you you run

1938
01:43:33,320 --> 01:43:36,560
the tools more you have a result

1939
01:43:36,560 --> 01:43:38,480
and the second thing is the

1940
01:43:38,480 --> 01:43:40,880
instrumentation of the phone

1941
01:43:40,880 --> 01:43:44,000
you can you can launch the the tools and

1942
01:43:44,000 --> 01:43:47,119
use with another tool to to

1943
01:43:47,119 --> 01:43:50,239
manipulate the application and it's not

1944
01:43:50,239 --> 01:43:53,360
just a black box when you you give

1945
01:43:53,360 --> 01:43:57,280
an application to to analyze

1946
01:43:57,600 --> 01:44:00,960
so story time what is a souq

1947
01:44:00,960 --> 01:44:04,320
has to come from the ist generated from

1948
01:44:04,320 --> 01:44:08,000
java de compalcon it's a

1949
01:44:08,000 --> 01:44:11,280
tree where all ads are the operator

1950
01:44:11,280 --> 01:44:14,320
and all leaf have a viewer parent

1951
01:44:14,320 --> 01:44:18,080
so for instance you have a two multiply

1952
01:44:18,080 --> 01:44:19,760
by seven added to three

1953
01:44:19,760 --> 01:44:23,360
and you can have all the operands

1954
01:44:23,360 --> 01:44:26,719
uh on the lips on on the down and

1955
01:44:26,719 --> 01:44:29,440
you have the operator so we can read

1956
01:44:29,440 --> 01:44:31,600
just

1957
01:44:31,600 --> 01:44:33,679
here two multiplied by seven added to

1958
01:44:33,679 --> 01:44:34,880
three

1959
01:44:34,880 --> 01:44:38,159
just to understand what is ac but uh on

1960
01:44:38,159 --> 01:44:41,119
on java it's more like we have a class

1961
01:44:41,119 --> 01:44:42,159
and the field

1962
01:44:42,159 --> 01:44:46,320
etc and i will show just after

1963
01:44:46,320 --> 01:44:49,920
and look so so okay

1964
01:44:49,920 --> 01:44:52,320
it's a programming paradigm which can

1965
01:44:52,320 --> 01:44:52,960
upgrade

1966
01:44:52,960 --> 01:44:56,560
or modify a function

1967
01:44:56,639 --> 01:45:00,480
so for example all nodes of the ic have

1968
01:45:00,480 --> 01:45:01,199
a visitor

1969
01:45:01,199 --> 01:45:04,000
function but you can hook to analyze the

1970
01:45:04,000 --> 01:45:04,639
code

1971
01:45:04,639 --> 01:45:06,480
and when the application is running we

1972
01:45:06,480 --> 01:45:07,920
use freedom

1973
01:45:07,920 --> 01:45:09,600
a copyright tool to make a dynamic

1974
01:45:09,600 --> 01:45:11,199
analysis on

1975
01:45:11,199 --> 01:45:12,560
multiple platforms you can have a

1976
01:45:12,560 --> 01:45:16,159
windows module on linux from

1977
01:45:16,159 --> 01:45:18,639
all these all the devices all rtq you

1978
01:45:18,639 --> 01:45:20,400
want

1979
01:45:20,400 --> 01:45:24,000
and i took use it to book a function

1980
01:45:24,000 --> 01:45:26,320
of an application and monitor or modify

1981
01:45:26,320 --> 01:45:30,320
its behavior

1982
01:45:30,320 --> 01:45:33,360
and so uh water took us to analyze

1983
01:45:33,360 --> 01:45:35,920
uh so we can monitor the user inputs uh

1984
01:45:35,920 --> 01:45:37,600
in static analysis and uh

1985
01:45:37,600 --> 01:45:39,920
reserver and service execution program

1986
01:45:39,920 --> 01:45:41,920
we called before

1987
01:45:41,920 --> 01:45:45,440
and all permission and

1988
01:45:45,440 --> 01:45:48,080
communication between another another

1989
01:45:48,080 --> 01:45:49,199
application

1990
01:45:49,199 --> 01:45:52,639
and a government you can also

1991
01:45:52,639 --> 01:45:56,000
have the blue feature

1992
01:45:56,000 --> 01:46:00,159
and you can have an access and emulate

1993
01:46:00,159 --> 01:46:00,719
access

1994
01:46:00,719 --> 01:46:03,760
on the file system

1995
01:46:03,760 --> 01:46:06,719
used by the the application so you have

1996
01:46:06,719 --> 01:46:07,360
a same

1997
01:46:07,360 --> 01:46:11,199
id than the application app

1998
01:46:11,199 --> 01:46:14,960
so you can not access to all the

1999
01:46:14,960 --> 01:46:17,600
file system

2000
01:46:20,639 --> 01:46:27,520
so oops so

2001
01:46:27,520 --> 01:46:30,639
we will see uh at the beginning as to

2002
01:46:30,639 --> 01:46:31,760
will decompile

2003
01:46:31,760 --> 01:46:33,920
the application with one of these the

2004
01:46:33,920 --> 01:46:36,320
compiler to produce

2005
01:46:36,320 --> 01:46:39,119
from the avika java code so we have a

2006
01:46:39,119 --> 01:46:40,880
cfr popsicle

2007
01:46:40,880 --> 01:46:43,199
jellycore and sunflower you can use it

2008
01:46:43,199 --> 01:46:45,520
and compare the

2009
01:46:45,520 --> 01:46:50,320
the more performance

2010
01:46:51,040 --> 01:46:54,159
and then you the structure of

2011
01:46:54,159 --> 01:46:55,760
the project during the first step i

2012
01:46:55,760 --> 01:46:57,440
think we'll create a directory the

2013
01:46:57,440 --> 01:46:59,520
application and they compile a name

2014
01:46:59,520 --> 01:47:01,199
where we can found a file

2015
01:47:01,199 --> 01:47:03,600
uh afford.json with some information

2016
01:47:03,600 --> 01:47:05,840
about current from the compiler the data

2017
01:47:05,840 --> 01:47:07,199
unless the comprehension

2018
01:47:07,199 --> 01:47:10,080
the date of the last patch and the

2019
01:47:10,080 --> 01:47:11,760
secure

2020
01:47:11,760 --> 01:47:15,199
of the patch and so i will talk about

2021
01:47:15,199 --> 01:47:16,560
the patch after

2022
01:47:16,560 --> 01:47:19,440
and directory with previous

2023
01:47:19,440 --> 01:47:21,520
decomposition

2024
01:47:21,520 --> 01:47:24,560
with so for instance alex and sierra

2025
01:47:24,560 --> 01:47:28,639
and a directory with a poc

2026
01:47:28,639 --> 01:47:30,480
it's a functionality where we can

2027
01:47:30,480 --> 01:47:35,920
generate a rock to expose some binaries

2028
01:47:35,920 --> 01:47:36,320
so

2029
01:47:36,320 --> 01:47:38,639
when the tools is launched uh without

2030
01:47:38,639 --> 01:47:40,639
option only a quick analysis

2031
01:47:40,639 --> 01:47:42,719
of the maintenance execute whereas it's

2032
01:47:42,719 --> 01:47:43,840
a list

2033
01:47:43,840 --> 01:47:46,719
uh dangerous frequency functionality use

2034
01:47:46,719 --> 01:47:48,560
antenna permission has

2035
01:47:48,560 --> 01:47:51,199
great access to indicate to monitor use

2036
01:47:51,199 --> 01:47:52,880
and put

2037
01:47:52,880 --> 01:47:55,679
the activity service podcast and

2038
01:47:55,679 --> 01:47:58,000
provider exported

2039
01:47:58,000 --> 01:48:01,040
and exported that means

2040
01:48:01,040 --> 01:48:03,360
another application can use it because

2041
01:48:03,360 --> 01:48:04,719
if it's not exporting

2042
01:48:04,719 --> 01:48:08,239
another application cannot use it

2043
01:48:08,239 --> 01:48:11,119
it's not possible

2044
01:48:13,040 --> 01:48:16,639
so then we analyze

2045
01:48:16,639 --> 01:48:20,080
the source cup so when we had the option

2046
01:48:20,080 --> 01:48:21,520
tree the

2047
01:48:21,520 --> 01:48:24,719
ac of the decompile card is brick and

2048
01:48:24,719 --> 01:48:28,320
all hook configure is called during the

2049
01:48:28,320 --> 01:48:31,520
tree the river

2050
01:48:31,520 --> 01:48:35,199
the approaching of a tree

2051
01:48:35,199 --> 01:48:38,239
and so i i see a leg like i see before

2052
01:48:38,239 --> 01:48:40,000
uh when the class declaration login

2053
01:48:40,000 --> 01:48:41,440
activity and

2054
01:48:41,440 --> 01:48:43,520
all field declarations meta declaration

2055
01:48:43,520 --> 01:48:45,760
and in meter

2056
01:48:45,760 --> 01:48:48,080
uh all the functions of the metallic

2057
01:48:48,080 --> 01:48:48,960
lash

2058
01:48:48,960 --> 01:48:52,080
so it's it's more easy to for a program

2059
01:48:52,080 --> 01:48:53,040
to

2060
01:48:53,040 --> 01:48:56,159
to read an isd than

2061
01:48:56,159 --> 01:49:01,760
just a called a workhorse

2062
01:49:01,760 --> 01:49:05,360
and the when i say before

2063
01:49:05,360 --> 01:49:08,560
the the function is hook so

2064
01:49:08,560 --> 01:49:12,000
we can say a type of node so local

2065
01:49:12,000 --> 01:49:13,440
variable declaration

2066
01:49:13,440 --> 01:49:16,639
and in an entrance we call

2067
01:49:16,639 --> 01:49:18,960
each call of local variable extension we

2068
01:49:18,960 --> 01:49:20,159
will do

2069
01:49:20,159 --> 01:49:23,440
these things so for instance here it's

2070
01:49:23,440 --> 01:49:24,480
to monitor the

2071
01:49:24,480 --> 01:49:28,480
user input so user input is basically

2072
01:49:28,480 --> 01:49:31,360
when we have an edit text type on

2073
01:49:31,360 --> 01:49:32,560
textview type

2074
01:49:32,560 --> 01:49:35,679
so we just hook the local variable

2075
01:49:35,679 --> 01:49:36,719
declaration

2076
01:49:36,719 --> 01:49:39,840
and we check the type of the other

2077
01:49:39,840 --> 01:49:40,480
variable

2078
01:49:40,480 --> 01:49:43,119
so it detects our texture and just add

2079
01:49:43,119 --> 01:49:43,520
it

2080
01:49:43,520 --> 01:49:47,440
to the output of astox

2081
01:49:49,119 --> 01:49:54,080
so now if we look a more complex plugin

2082
01:49:54,320 --> 01:49:56,960
we have a start analysis where i say

2083
01:49:56,960 --> 01:49:57,599
before

2084
01:49:57,599 --> 01:49:59,679
to have a better analysis and i say i

2085
01:49:59,679 --> 01:50:01,840
developed plugin which spread

2086
01:50:01,840 --> 01:50:03,840
the terms of all variables defined

2087
01:50:03,840 --> 01:50:04,960
uniformly

2088
01:50:04,960 --> 01:50:09,599
and defined by the scope of analysis

2089
01:50:09,599 --> 01:50:12,639
so what is dance that is useful to

2090
01:50:12,639 --> 01:50:13,920
follow a variable or

2091
01:50:13,920 --> 01:50:18,080
issues of athletes inside the java code

2092
01:50:18,080 --> 01:50:21,119
and mark it the probability of using one

2093
01:50:21,119 --> 01:50:21,920
variable

2094
01:50:21,920 --> 01:50:26,239
at this location inside the java code

2095
01:50:26,239 --> 01:50:29,280
and this stanton is is like an object

2096
01:50:29,280 --> 01:50:31,199
level

2097
01:50:31,199 --> 01:50:35,040
so to create the term

2098
01:50:36,840 --> 01:50:41,040
we we we just

2099
01:50:41,040 --> 01:50:43,679
look the the lifeline of the variable so

2100
01:50:43,679 --> 01:50:44,880
it's defined by the

2101
01:50:44,880 --> 01:50:47,920
the scope of the variable and

2102
01:50:47,920 --> 01:50:50,480
what is the scope scope is defined at

2103
01:50:50,480 --> 01:50:52,879
the back

2104
01:50:55,920 --> 01:50:59,440
people know compiler is the

2105
01:50:59,440 --> 01:51:03,119
binding the binding moment

2106
01:51:03,119 --> 01:51:06,480
when we define a scope where each

2107
01:51:06,480 --> 01:51:07,520
variable is

2108
01:51:07,520 --> 01:51:09,440
defined inside and will be destroyed

2109
01:51:09,440 --> 01:51:11,440
when the scope ends so for instance a

2110
01:51:11,440 --> 01:51:13,040
body function when we

2111
01:51:13,040 --> 01:51:15,199
have a vibrant in the body function

2112
01:51:15,199 --> 01:51:16,320
after

2113
01:51:16,320 --> 01:51:19,040
after the end of function the variable

2114
01:51:19,040 --> 01:51:20,880
didn't exist anymore

2115
01:51:20,880 --> 01:51:22,320
so we have a body of function the

2116
01:51:22,320 --> 01:51:24,400
parameter of the follow

2117
01:51:24,400 --> 01:51:26,320
the body of class and body uh

2118
01:51:26,320 --> 01:51:28,480
maintenance etc

2119
01:51:28,480 --> 01:51:32,239
a lot of scope live apps

2120
01:51:32,239 --> 01:51:35,920
and so far for instance uh

2121
01:51:35,920 --> 01:51:41,280
we we create a scope with a class a

2122
01:51:41,840 --> 01:51:45,760
so we have a variable defined

2123
01:51:45,760 --> 01:51:48,719
here we have a class a a value here

2124
01:51:48,719 --> 01:51:49,599
which we define

2125
01:51:49,599 --> 01:51:52,480
hello so when we enter in the class we

2126
01:51:52,480 --> 01:51:53,840
we define a variable

2127
01:51:53,840 --> 01:51:57,520
with a name hello and then we create

2128
01:51:57,520 --> 01:52:00,480
a new scope because we enter in the

2129
01:52:00,480 --> 01:52:02,239
function hello and

2130
01:52:02,239 --> 01:52:05,599
we print e b and c

2131
01:52:05,599 --> 01:52:08,639
v and c is defined on the

2132
01:52:08,639 --> 01:52:10,320
on the parameter function so we create

2133
01:52:10,320 --> 01:52:12,239
scope in the hello

2134
01:52:12,239 --> 01:52:15,360
and then we call also e variable

2135
01:52:15,360 --> 01:52:17,520
is defined in class so it's in b for

2136
01:52:17,520 --> 01:52:18,800
scope so we can

2137
01:52:18,800 --> 01:52:21,199
call it and just we create the scope

2138
01:52:21,199 --> 01:52:21,920
like that

2139
01:52:21,920 --> 01:52:26,560
and destroy it and to make things

2140
01:52:27,520 --> 01:52:31,360
and a quick example of uh

2141
01:52:31,599 --> 01:52:34,880
to i mean not just before

2142
01:52:34,880 --> 01:52:36,800
so we we need also a binding of a

2143
01:52:36,800 --> 01:52:37,920
variable so

2144
01:52:37,920 --> 01:52:41,679
to bind a variable uh what this mean is

2145
01:52:41,679 --> 01:52:43,840
means when we have a function for

2146
01:52:43,840 --> 01:52:45,920
instance main

2147
01:52:45,920 --> 01:52:48,800
we have a class a with a function hello

2148
01:52:48,800 --> 01:52:49,599
and

2149
01:52:49,599 --> 01:52:52,719
we put the parameter a and a

2150
01:52:52,719 --> 01:52:56,400
is called the function

2151
01:52:56,400 --> 01:52:59,679
hello of class a and so

2152
01:52:59,679 --> 01:53:01,840
the parameter b is linked to the

2153
01:53:01,840 --> 01:53:02,800
variable a

2154
01:53:02,800 --> 01:53:07,199
and r is linked to a variable c

2155
01:53:08,560 --> 01:53:13,840
and to see a more complex plugin

2156
01:53:15,360 --> 01:53:19,040
a complex example we have

2157
01:53:19,040 --> 01:53:22,239
this code was produced and then uh can

2158
01:53:22,239 --> 01:53:23,440
produce

2159
01:53:23,440 --> 01:53:25,840
a tree with all links of available to

2160
01:53:25,840 --> 01:53:26,800
see the binding

2161
01:53:26,800 --> 01:53:30,000
of a viber to

2162
01:53:30,000 --> 01:53:33,599
to to to see a quick example of

2163
01:53:33,599 --> 01:53:38,639
using this plugin on the over plugin

2164
01:53:39,119 --> 01:53:42,320
we have a function we have a plugin to

2165
01:53:42,320 --> 01:53:42,880
list

2166
01:53:42,880 --> 01:53:46,480
a call function and uh with a pattern

2167
01:53:46,480 --> 01:53:47,199
machine so

2168
01:53:47,199 --> 01:53:50,239
we just make a regex to to

2169
01:53:50,239 --> 01:53:53,360
found the call function and we can see a

2170
01:53:53,360 --> 01:53:55,040
better

2171
01:53:55,040 --> 01:53:58,560
result when the when this um

2172
01:53:58,560 --> 01:54:02,000
this this plugin starts it's called

2173
01:54:02,000 --> 01:54:04,159
so

2174
01:54:07,440 --> 01:54:11,199
so for instance we have a here

2175
01:54:11,199 --> 01:54:13,840
all the function called uh found and

2176
01:54:13,840 --> 01:54:14,719
then we can see

2177
01:54:14,719 --> 01:54:18,800
the class where the other objects used

2178
01:54:18,800 --> 01:54:23,840
is a is easily a found

2179
01:54:25,119 --> 01:54:29,119
another plugin i think is interesting

2180
01:54:29,119 --> 01:54:31,920
it's the generation of apk

2181
01:54:31,920 --> 01:54:35,520
so i still can generate some epic

2182
01:54:35,520 --> 01:54:38,800
arpeggio with a ginger template and

2183
01:54:38,800 --> 01:54:41,760
create a folder to remake the

2184
01:54:41,760 --> 01:54:44,159
application

2185
01:54:44,159 --> 01:54:48,840
so we analyze the for instance

2186
01:54:48,840 --> 01:54:51,679
uh we found some results

2187
01:54:51,679 --> 01:54:55,119
uh when we analyzed the

2188
01:54:55,119 --> 01:54:58,080
versus car with a ast and we found some

2189
01:54:58,080 --> 01:54:58,560
things

2190
01:54:58,560 --> 01:55:00,719
uh like the applications like the

2191
01:55:00,719 --> 01:55:03,520
classic and some data

2192
01:55:03,520 --> 01:55:07,440
and we can just generate a custom

2193
01:55:07,440 --> 01:55:08,960
application to export

2194
01:55:08,960 --> 01:55:12,400
a specific application

2195
01:55:12,400 --> 01:55:15,599
so we can have

2196
01:55:15,599 --> 01:55:18,719
this instance where we

2197
01:55:18,719 --> 01:55:22,000
we can just to call on the code to make

2198
01:55:22,000 --> 01:55:22,320
a

2199
01:55:22,320 --> 01:55:25,599
network so i'll just show

2200
01:55:25,599 --> 01:55:32,239
this example oops

2201
01:55:32,239 --> 01:55:36,639
so just uh we uh

2202
01:55:36,639 --> 01:55:38,719
uh we launched the application to create

2203
01:55:38,719 --> 01:55:41,199
um and to create an expert

2204
01:55:41,199 --> 01:55:44,719
uh we have um uh

2205
01:55:44,719 --> 01:55:48,719
whether the vulnerability is formed

2206
01:55:48,719 --> 01:55:51,520
so we go to the code on line 24 and

2207
01:55:51,520 --> 01:55:54,560
column 29

2208
01:55:54,639 --> 01:55:58,320
and we can see uh

2209
01:55:58,320 --> 01:56:01,840
identify in the code

2210
01:56:02,159 --> 01:56:06,080
so we can inject the data validate

2211
01:56:06,080 --> 01:56:09,199
and when it's for the uh when

2212
01:56:09,199 --> 01:56:12,239
when it's true

2213
01:56:12,239 --> 01:56:15,760
the text show is good job and

2214
01:56:15,760 --> 01:56:19,280
if it's not nothing happens

2215
01:56:19,280 --> 01:56:23,199
so when we can learn on chat

2216
01:56:23,199 --> 01:56:26,239
to launch the application

2217
01:56:26,239 --> 01:56:30,400
so not just before

2218
01:56:30,400 --> 01:56:33,920
so we have we have um oops

2219
01:56:33,920 --> 01:56:37,199
just um a moment

2220
01:56:37,199 --> 01:56:40,639
so we have a folder i speak about

2221
01:56:40,639 --> 01:56:45,040
before we have all the files and

2222
01:56:45,119 --> 01:56:47,679
to make

2223
01:56:48,239 --> 01:56:51,360
the application and

2224
01:56:51,360 --> 01:56:54,719
we launch the application

2225
01:56:54,719 --> 01:56:57,760
so we can launch and apps

2226
01:56:57,760 --> 01:57:01,280
sorry when you enter the the

2227
01:57:01,280 --> 01:57:04,719
wrong platform so so

2228
01:57:04,719 --> 01:57:07,280
you are you see uh you are not allowed

2229
01:57:07,280 --> 01:57:08,400
to be here

2230
01:57:08,400 --> 01:57:11,599
but if you enter a password you have

2231
01:57:11,599 --> 01:57:15,760
a good job

2232
01:57:17,760 --> 01:57:21,360
so if you want to explore this you just

2233
01:57:21,360 --> 01:57:25,360
need to now hostile the

2234
01:57:25,360 --> 01:57:28,560
the arpeggio was played by assoc and we

2235
01:57:28,560 --> 01:57:29,920
saw we have an africa and

2236
01:57:29,920 --> 01:57:33,760
when we launch we have a good job

2237
01:57:33,760 --> 01:57:38,239
that's it so uh

2238
01:57:38,239 --> 01:57:41,679
our the apk is made

2239
01:57:41,679 --> 01:57:45,840
um we have a java file produced by

2240
01:57:45,840 --> 01:57:47,679
ginger and then we

2241
01:57:47,679 --> 01:57:51,599
compile it with uh in dot class file for

2242
01:57:51,599 --> 01:57:52,480
the

2243
01:57:52,480 --> 01:57:56,719
java classic java compilation

2244
01:57:56,719 --> 01:57:59,679
then we uh we produce a dalvik

2245
01:57:59,679 --> 01:58:01,440
executable for the x

2246
01:58:01,440 --> 01:58:04,639
the dex file and then we package with

2247
01:58:04,639 --> 01:58:07,679
android.jar to produce a real arpeggio

2248
01:58:07,679 --> 01:58:09,199
with android manifesto

2249
01:58:09,199 --> 01:58:12,960
to have the activity exported and

2250
01:58:12,960 --> 01:58:15,679
all like this this we talked about

2251
01:58:15,679 --> 01:58:16,560
before

2252
01:58:16,560 --> 01:58:19,119
and then we need to sign the application

2253
01:58:19,119 --> 01:58:20,639
so the application

2254
01:58:20,639 --> 01:58:25,679
was uh was signed with uh auto generator

2255
01:58:25,679 --> 01:58:28,800
um certificate it was not with uh

2256
01:58:28,800 --> 01:58:35,280
upper we where we need to have a real

2257
01:58:35,280 --> 01:58:38,320
um certificate and then uh we just

2258
01:58:38,320 --> 01:58:40,320
zip a line to to have a valid

2259
01:58:40,320 --> 01:58:42,000
application at the guy

2260
01:58:42,000 --> 01:58:45,280
and that's it to run a new effect

2261
01:58:45,280 --> 01:58:47,360
so we have a make file we produce all

2262
01:58:47,360 --> 01:58:48,400
like that and just

2263
01:58:48,400 --> 01:58:50,480
need to remake and or modify the chord

2264
01:58:50,480 --> 01:58:51,679
tool so

2265
01:58:51,679 --> 01:58:54,320
to make an overall action so it's really

2266
01:58:54,320 --> 01:58:56,639
easy

2267
01:58:57,920 --> 01:58:59,840
finally we will talk about the dynamic

2268
01:58:59,840 --> 01:59:02,000
analysis and ultraman station

2269
01:59:02,000 --> 01:59:05,440
provided by a bias took

2270
01:59:06,480 --> 01:59:08,718
so

2271
01:59:09,020 --> 01:59:11,440
[Music]

2272
01:59:11,440 --> 01:59:14,639
when we uh when we can test

2273
01:59:14,639 --> 01:59:18,000
an application we

2274
01:59:18,000 --> 01:59:20,000
we often need to uh to intercept the

2275
01:59:20,000 --> 01:59:21,199
acid-base traffic

2276
01:59:21,199 --> 01:59:23,920
and so we need a proxy and the setup for

2277
01:59:23,920 --> 01:59:25,360
fox server

2278
01:59:25,360 --> 01:59:28,000
was part investigators before but not

2279
01:59:28,000 --> 01:59:28,880
anymore

2280
01:59:28,880 --> 01:59:34,639
with ourselves we just need to download

2281
01:59:34,639 --> 01:59:37,679
and when for our intersection

2282
01:59:37,679 --> 01:59:41,199
so how it's worth

2283
01:59:41,199 --> 01:59:44,320
you need just for the cell format and

2284
01:59:44,320 --> 01:59:46,639
then transform it in same format

2285
01:59:46,639 --> 01:59:50,560
we name it with sha 2016

2286
01:59:50,560 --> 01:59:52,719
and then upload it to a slash system

2287
01:59:52,719 --> 01:59:54,400
such as the system security such

2288
01:59:54,400 --> 01:59:58,400
as but this partition was on

2289
01:59:58,400 --> 02:00:01,440
uh only on a read-only uh

2290
02:00:01,440 --> 02:00:03,760
normally so we need to remount but when

2291
02:00:03,760 --> 02:00:04,560
we uh

2292
02:00:04,560 --> 02:00:06,880
to remount the partition we need to to

2293
02:00:06,880 --> 02:00:07,920
be rude

2294
02:00:07,920 --> 02:00:12,960
so and what if the fund is not full

2295
02:00:12,960 --> 02:00:16,960
so to be just a quick

2296
02:00:16,960 --> 02:00:20,080
a quick reminder

2297
02:00:23,119 --> 02:00:26,080
we have the android manifest where

2298
02:00:26,080 --> 02:00:28,159
activity service provider permission is

2299
02:00:28,159 --> 02:00:29,760
fine

2300
02:00:29,760 --> 02:00:32,400
then we have an asset a directory for

2301
02:00:32,400 --> 02:00:33,119
raw files

2302
02:00:33,119 --> 02:00:35,280
http for web page for code of our

2303
02:00:35,280 --> 02:00:37,280
application

2304
02:00:37,280 --> 02:00:40,320
then we need we have a class dot dx so

2305
02:00:40,320 --> 02:00:42,159
it's the dalvik is example we contain

2306
02:00:42,159 --> 02:00:43,199
the main code

2307
02:00:43,199 --> 02:00:46,800
and after the leave where we have

2308
02:00:46,800 --> 02:00:48,880
a subfolder for each architecture like

2309
02:00:48,880 --> 02:00:49,840
this

2310
02:00:49,840 --> 02:00:52,639
and meta inf where we have the same

2311
02:00:52,639 --> 02:00:54,719
assignment here and finally

2312
02:00:54,719 --> 02:00:57,040
uh rest which contains the compiled by

2313
02:00:57,040 --> 02:00:58,560
the application toolchain

2314
02:00:58,560 --> 02:01:00,800
and we can retrieve the drawable for

2315
02:01:00,800 --> 02:01:02,400
description

2316
02:01:02,400 --> 02:01:05,440
of a and row folder which contains for

2317
02:01:05,440 --> 02:01:06,320
instance the

2318
02:01:06,320 --> 02:01:10,400
x 509 certificate of

2319
02:01:10,400 --> 02:01:13,920
a proxy certificate uh and an xml

2320
02:01:13,920 --> 02:01:17,520
sampler with a engineering

2321
02:01:17,520 --> 02:01:21,199
configuration file to

2322
02:01:21,199 --> 02:01:24,880
to explain our application with rocks

2323
02:01:24,880 --> 02:01:28,159
and i developed a tool that could be

2324
02:01:28,159 --> 02:01:30,800
used as standalone applicator

2325
02:01:30,800 --> 02:01:33,040
the tool can contact the library and

2326
02:01:33,040 --> 02:01:34,159
certificate directly

2327
02:01:34,159 --> 02:01:36,639
inside the application so we have uh so

2328
02:01:36,639 --> 02:01:38,560
we extract the application without

2329
02:01:38,560 --> 02:01:40,000
resource because

2330
02:01:40,000 --> 02:01:42,560
if you were exercising with resource you

2331
02:01:42,560 --> 02:01:43,440
should have uh

2332
02:01:43,440 --> 02:01:48,559
some problem because the

2333
02:01:48,800 --> 02:01:52,719
rest folder is not really uh correct

2334
02:01:52,719 --> 02:01:55,599
and extracted from smaller code so

2335
02:01:55,599 --> 02:01:56,880
smally call is

2336
02:01:56,880 --> 02:02:00,880
inside the dex extable

2337
02:02:00,880 --> 02:02:05,199
as the meaning to talk is the language

2338
02:02:05,199 --> 02:02:08,880
so we just modify the code to inject

2339
02:02:08,880 --> 02:02:12,080
a frida feta binary

2340
02:02:12,080 --> 02:02:16,719
so the code to call the library

2341
02:02:16,719 --> 02:02:19,360
and uh also we download the the library

2342
02:02:19,360 --> 02:02:19,760
to

2343
02:02:19,760 --> 02:02:23,920
inject directly inside the figure

2344
02:02:23,920 --> 02:02:27,199
on the on the

2345
02:02:27,199 --> 02:02:31,920
on the live folder

2346
02:02:31,920 --> 02:02:33,840
after that we need also to modify the

2347
02:02:33,840 --> 02:02:36,000
android manifest to inject a internet

2348
02:02:36,000 --> 02:02:37,360
permission because it's not really

2349
02:02:37,360 --> 02:02:39,760
an attendance permission it's just like

2350
02:02:39,760 --> 02:02:41,360
a

2351
02:02:41,360 --> 02:02:44,400
socket permission to to communicate

2352
02:02:44,400 --> 02:02:48,400
between the pc over a unique socket

2353
02:02:48,400 --> 02:02:50,800
and we unchecked also a network security

2354
02:02:50,800 --> 02:02:52,480
company android binary

2355
02:02:52,480 --> 02:02:55,679
and always binaries

2356
02:02:55,679 --> 02:02:58,639
and other certificate users to repay

2357
02:02:58,639 --> 02:02:59,280
cafe

2358
02:02:59,280 --> 02:03:02,239
package via pica and we receive before

2359
02:03:02,239 --> 02:03:04,480
how to package exactly an application

2360
02:03:04,480 --> 02:03:07,840
just upload the new the new epic

2361
02:03:07,840 --> 02:03:10,400
epic app

2362
02:03:13,360 --> 02:03:17,679
now we have a plugin after first

2363
02:03:17,679 --> 02:03:21,679
we we can use a ldd so we have a wrapper

2364
02:03:21,679 --> 02:03:22,960
to uh

2365
02:03:22,960 --> 02:03:27,440
to have a shell push pull and start on a

2366
02:03:27,440 --> 02:03:30,560
function and you can we we can modify

2367
02:03:30,560 --> 02:03:34,800
to uh to have um a more esoteric uh

2368
02:03:34,800 --> 02:03:37,679
uh sector so for instance in if we are

2369
02:03:37,679 --> 02:03:38,080
if

2370
02:03:38,080 --> 02:03:41,840
if you are on ed units or

2371
02:03:41,840 --> 02:03:44,880
perhaps you you don't have exactly this

2372
02:03:44,880 --> 02:03:45,520
command

2373
02:03:45,520 --> 02:03:48,960
so you can modify to to

2374
02:03:48,960 --> 02:03:52,480
to still uh till works and we have also

2375
02:03:52,480 --> 02:03:54,239
freda to load and

2376
02:03:54,239 --> 02:03:58,239
unload the script

2377
02:03:58,239 --> 02:04:02,718
and so i just show before

2378
02:04:03,840 --> 02:04:11,520
a dynamic demo

2379
02:04:11,520 --> 02:04:14,719
so uh here i just use birth for the

2380
02:04:14,719 --> 02:04:15,840
proxy

2381
02:04:15,840 --> 02:04:20,159
and we we run

2382
02:04:20,560 --> 02:04:23,520
a stock so we have a configuration file

2383
02:04:23,520 --> 02:04:24,880
where i

2384
02:04:24,880 --> 02:04:28,000
set up the proxy the certificate or

2385
02:04:28,000 --> 02:04:28,560
proxy

2386
02:04:28,560 --> 02:04:32,880
and the ssl pinning and antivirus unable

2387
02:04:32,880 --> 02:04:36,320
to have no issue on the application

2388
02:04:36,320 --> 02:04:39,599
so we just run a run keeper application

2389
02:04:39,599 --> 02:04:43,840
and emulator staff automatically

2390
02:04:43,840 --> 02:04:47,760
uh so you don't i don't show them that

2391
02:04:47,760 --> 02:04:51,760
you have also an emulator or

2392
02:04:51,760 --> 02:04:53,920
animator name to launch an emulator but

2393
02:04:53,920 --> 02:04:55,040
you can use on a

2394
02:04:55,040 --> 02:04:58,880
physical device tool so

2395
02:04:58,880 --> 02:05:02,239
it's just a server and keeper and launch

2396
02:05:02,239 --> 02:05:03,679
it

2397
02:05:03,679 --> 02:05:07,040
and automatically have a

2398
02:05:07,040 --> 02:05:10,800
bigger database i uh regularly update

2399
02:05:10,800 --> 02:05:14,880
to have a to bypass the sap

2400
02:05:14,880 --> 02:05:18,960
and we get all the requests

2401
02:05:18,960 --> 02:05:22,400
and if we log in so i'll just log in

2402
02:05:22,400 --> 02:05:25,679
here apps

2403
02:05:25,679 --> 02:05:30,079
so login and

2404
02:05:30,079 --> 02:05:33,440
we can have the

2405
02:05:33,440 --> 02:05:36,560
the request just

2406
02:05:36,560 --> 02:05:39,520
shut down and we have the username and

2407
02:05:39,520 --> 02:05:40,239
the password

2408
02:05:40,239 --> 02:05:43,840
i entered so we have intercepted the

2409
02:05:43,840 --> 02:05:46,320
https

2410
02:05:46,320 --> 02:05:50,079
then we can also uh so

2411
02:05:50,079 --> 02:05:52,400
use a shell access what i say before

2412
02:05:52,400 --> 02:05:53,119
with the

2413
02:05:53,119 --> 02:05:56,000
id of the application so we can just

2414
02:05:56,000 --> 02:05:56,560
list

2415
02:05:56,560 --> 02:06:02,000
a file but you can also

2416
02:06:02,000 --> 02:06:05,599
so put the id and you see you have an id

2417
02:06:05,599 --> 02:06:09,040
u0 underscore a 79 is the

2418
02:06:09,040 --> 02:06:12,079
id used

2419
02:06:12,079 --> 02:06:15,599
by the by the application

2420
02:06:15,599 --> 02:06:18,800
and you can uh also uh so

2421
02:06:18,800 --> 02:06:22,560
uh display a file transcend

2422
02:06:22,560 --> 02:06:25,520
uh calls and chat and the first time you

2423
02:06:25,520 --> 02:06:28,560
want to display

2424
02:06:28,840 --> 02:06:33,040
uh you can also have an article book so

2425
02:06:33,040 --> 02:06:35,599
so it's just a freelance beta that you

2426
02:06:35,599 --> 02:06:36,400
can call

2427
02:06:36,400 --> 02:06:40,239
an obviously bet and we can look

2428
02:06:40,239 --> 02:06:45,119
all um all

2429
02:06:46,800 --> 02:06:49,840
another interesting thing is if you so

2430
02:06:49,840 --> 02:06:50,400
you can

2431
02:06:50,400 --> 02:06:53,520
use um not a not food phone

2432
02:06:53,520 --> 02:06:56,400
so for instance i use a corners for the

2433
02:06:56,400 --> 02:06:57,679
thermostat play

2434
02:06:57,679 --> 02:06:59,840
have

2435
02:07:00,960 --> 02:07:05,040
and you can launch it and if we look

2436
02:07:05,040 --> 02:07:08,079
uh we patch the application so

2437
02:07:08,079 --> 02:07:10,800
i already use it so the piston was

2438
02:07:10,800 --> 02:07:12,000
already patched and just

2439
02:07:12,000 --> 02:07:15,840
reuse an fps in patch and so install it

2440
02:07:15,840 --> 02:07:21,280
and launch would be to hear

2441
02:07:22,400 --> 02:07:25,679
the application

2442
02:07:25,679 --> 02:07:27,840
application was not put but we can

2443
02:07:27,840 --> 02:07:29,360
return so

2444
02:07:29,360 --> 02:07:33,360
the the root uh root function that is

2445
02:07:33,360 --> 02:07:37,199
using by the the application

2446
02:07:37,199 --> 02:07:40,639
and what what is next

2447
02:07:40,639 --> 02:07:44,320
uh i'm now i'm only the

2448
02:07:44,320 --> 02:07:46,880
only developer on this project and i

2449
02:07:46,880 --> 02:07:48,239
think for a better progression and these

2450
02:07:48,239 --> 02:07:49,679
contributors if a product

2451
02:07:49,679 --> 02:07:52,480
seduce you uh currently i work on the

2452
02:07:52,480 --> 02:07:53,920
web version to have a server with

2453
02:07:53,920 --> 02:07:55,679
multiple emulator and use

2454
02:07:55,679 --> 02:07:58,239
and analyze applicability on the web

2455
02:07:58,239 --> 02:08:00,639
interface and our tank with

2456
02:08:00,639 --> 02:08:04,560
emulator directly via a browser with a

2457
02:08:04,560 --> 02:08:08,560
zip grpc server i can show

2458
02:08:08,560 --> 02:08:10,960
a quick quick demo but uh it's not

2459
02:08:10,960 --> 02:08:13,280
really

2460
02:08:15,520 --> 02:08:18,639
we really ready

2461
02:08:18,639 --> 02:08:22,239
to uh so you should see uh

2462
02:08:22,239 --> 02:08:25,280
you have the application so it's already

2463
02:08:25,280 --> 02:08:27,119
analyzed application and you have a

2464
02:08:27,119 --> 02:08:30,239
a quick summary of application but

2465
02:08:30,239 --> 02:08:33,040
and you can also analyze an application

2466
02:08:33,040 --> 02:08:33,679
just uh

2467
02:08:33,679 --> 02:08:35,599
one aspect on background you just need

2468
02:08:35,599 --> 02:08:38,960
to have a server

2469
02:08:40,480 --> 02:08:43,840
so thank you you can found the project

2470
02:08:43,840 --> 02:08:47,679
on gitlab on github in the two following

2471
02:08:47,679 --> 02:08:50,960
url and thank you for for

2472
02:08:50,960 --> 02:08:55,920
your attention thank you for your talk

2473
02:08:55,920 --> 02:08:58,239
thank you

2474
02:08:59,920 --> 02:09:04,079
okay so um well sadly we don't have any

2475
02:09:04,079 --> 02:09:04,560
uh

2476
02:09:04,560 --> 02:09:07,679
open question right now

2477
02:09:07,679 --> 02:09:12,480
um maybe um

2478
02:09:12,560 --> 02:09:15,760
can you can you tell us what is the

2479
02:09:15,760 --> 02:09:18,960
typical usage of of

2480
02:09:18,960 --> 02:09:24,079
us took you you use it to analyze the

2481
02:09:24,079 --> 02:09:26,239
traffic from from a particular

2482
02:09:26,239 --> 02:09:29,360
application or you use it to monitor

2483
02:09:29,360 --> 02:09:34,320
iot devices that go through an apk

2484
02:09:34,320 --> 02:09:37,520
so yes i analyze for the iot device but

2485
02:09:37,520 --> 02:09:41,119
not only the last example

2486
02:09:41,119 --> 02:09:43,920
we have so an application on quick 10

2487
02:09:43,920 --> 02:09:44,880
and

2488
02:09:44,880 --> 02:09:47,119
we extract the application and just

2489
02:09:47,119 --> 02:09:49,599
analyze it to understand

2490
02:09:49,599 --> 02:09:52,719
the ble future and see how the

2491
02:09:52,719 --> 02:09:53,360
encryption

2492
02:09:53,360 --> 02:09:56,079
is done dynamically and have a static

2493
02:09:56,079 --> 02:09:58,559
analysis

2494
02:09:58,719 --> 02:10:02,000
of the application but we

2495
02:10:02,000 --> 02:10:05,599
use also for the more classic uh

2496
02:10:05,599 --> 02:10:08,800
application because

2497
02:10:08,800 --> 02:10:12,000
when in my company

2498
02:10:12,000 --> 02:10:15,520
we receive a lot of application and

2499
02:10:15,520 --> 02:10:19,280
uh to avoid uh to um

2500
02:10:19,280 --> 02:10:21,920
to basically ssl pinning and altitude

2501
02:10:21,920 --> 02:10:23,040
and uh

2502
02:10:23,040 --> 02:10:25,119
experimentation it's better to you to

2503
02:10:25,119 --> 02:10:26,639
use a astook

2504
02:10:26,639 --> 02:10:30,639
and just run and have a result

2505
02:10:30,639 --> 02:10:34,079
to to analyze

2506
02:10:34,480 --> 02:10:37,840
okay and uh well our previous

2507
02:10:37,840 --> 02:10:40,960
previous talk was about

2508
02:10:40,960 --> 02:10:44,880
um an automated uh analysis platform

2509
02:10:44,880 --> 02:10:48,239
but it was more uh

2510
02:10:48,239 --> 02:10:51,760
static analysis but maybe uh

2511
02:10:51,760 --> 02:10:55,520
it could be interesting to to uh

2512
02:10:55,520 --> 02:10:58,320
to to connect your uh web interface

2513
02:10:58,320 --> 02:10:58,960
project

2514
02:10:58,960 --> 02:11:03,119
so it seems like there are some some uh

2515
02:11:03,119 --> 02:11:07,040
automatization functions in your exactly

2516
02:11:07,040 --> 02:11:10,079
so and uh i

2517
02:11:10,079 --> 02:11:12,400
i really would like to have an emulator

2518
02:11:12,400 --> 02:11:13,599
and just uh

2519
02:11:13,599 --> 02:11:17,440
um use the web fest to

2520
02:11:17,440 --> 02:11:20,079
interact with applications or slides and

2521
02:11:20,079 --> 02:11:21,520
enter some things and

2522
02:11:21,520 --> 02:11:24,239
like that and just have a functionality

2523
02:11:24,239 --> 02:11:25,199
to monitor and

2524
02:11:25,199 --> 02:11:26,560
found something already here

2525
02:11:26,560 --> 02:11:29,040
automatically it was really

2526
02:11:29,040 --> 02:11:32,560
awesome yeah i guess

2527
02:11:32,560 --> 02:11:35,119
yeah it can be interesting to maybe like

2528
02:11:35,119 --> 02:11:37,440
also automate some

2529
02:11:37,440 --> 02:11:41,360
input user input or user gesture or yeah

2530
02:11:41,360 --> 02:11:45,840
that can also uh be interesting to um

2531
02:11:45,840 --> 02:11:48,239
to go to some parts of the code and

2532
02:11:48,239 --> 02:11:49,360
things like that

2533
02:11:49,360 --> 02:11:53,679
yeah exactly

2534
02:11:53,679 --> 02:11:58,320
okay well thank you again

2535
02:12:01,280 --> 02:12:04,320
and we will have a longer pause

2536
02:12:04,320 --> 02:12:07,840
right now so um i

2537
02:12:07,840 --> 02:12:11,360
i guess uh philip will uh uh show the

2538
02:12:11,360 --> 02:12:12,000
timer

2539
02:12:12,000 --> 02:12:15,599
and uh we will uh we'll be back at uh

2540
02:12:15,599 --> 02:12:20,159
uh at ten past four for the the next

2541
02:12:20,159 --> 02:12:22,879
the next talk

2542
02:12:23,840 --> 02:12:27,440
thank you bye thank you again

2543
02:12:27,440 --> 02:12:35,839
thank you

2544
02:12:36,079 --> 02:12:40,159
so yeah it will be a 10 minute

2545
02:12:40,159 --> 02:12:43,280
and and some pose

2546
02:12:43,280 --> 02:12:46,840
and we will see you back right after

2547
02:12:46,840 --> 02:12:49,840
this

2548
02:13:21,070 --> 02:13:24,790
[Music]

2549
02:13:27,690 --> 02:13:31,000
[Music]

2550
02:13:42,700 --> 02:13:47,300
[Music]

2551
02:13:55,600 --> 02:14:05,589
[Music]

2552
02:14:11,920 --> 02:14:15,100
[Music]

2553
02:14:17,150 --> 02:14:20,429
[Music]

2554
02:15:06,840 --> 02:15:09,840
do

2555
02:15:20,880 --> 02:15:23,840
you

2556
02:15:33,190 --> 02:15:34,840
[Music]

2557
02:15:34,840 --> 02:15:37,840
do

2558
02:15:38,530 --> 02:15:41,790
[Music]

2559
02:16:55,270 --> 02:16:58,409
[Music]

2560
02:17:01,670 --> 02:17:04,808
[Music]

2561
02:17:33,650 --> 02:17:36,808
[Music]

2562
02:17:40,840 --> 02:17:43,840
so

2563
02:17:45,299 --> 02:17:48,679
[Music]

2564
02:17:51,910 --> 02:17:55,068
[Music]

2565
02:18:02,379 --> 02:18:05,579
[Music]

2566
02:18:15,090 --> 02:18:18,409
[Music]

2567
02:18:30,700 --> 02:18:33,929
[Music]

2568
02:18:40,770 --> 02:18:43,940
[Music]

2569
02:19:26,090 --> 02:19:29,700
[Music]

2570
02:23:58,840 --> 02:24:01,840
oh

2571
02:24:40,840 --> 02:24:43,840
uh

2572
02:24:54,840 --> 02:24:57,840
foreign

2573
02:25:09,920 --> 02:25:13,120
okay we will continue with nicola

2574
02:25:13,120 --> 02:25:14,479
mateoko

2575
02:25:14,479 --> 02:25:16,479
who will present us a new respace

2576
02:25:16,479 --> 02:25:18,399
vulnerability management tool called

2577
02:25:18,399 --> 02:25:22,399
patrol here's open code source of course

2578
02:25:22,399 --> 02:25:24,319
nicolas information security expert

2579
02:25:24,319 --> 02:25:26,720
currently working as a retainer and

2580
02:25:26,720 --> 02:25:28,640
automating secret operation at a large

2581
02:25:28,640 --> 02:25:32,640
scale with patrol solutions

2582
02:25:36,080 --> 02:25:39,280
hello everybody it's yours thank you

2583
02:25:39,280 --> 02:25:41,680
thank you thank you for the introduction

2584
02:25:41,680 --> 02:25:42,720
and for

2585
02:25:42,720 --> 02:25:45,359
inviting me at the this session thank

2586
02:25:45,359 --> 02:25:46,399
you very much

2587
02:25:46,399 --> 02:25:50,640
um i will share my my screen

2588
02:25:50,840 --> 02:25:53,840
so

2589
02:25:59,810 --> 02:26:03,859
[Music]

2590
02:26:07,840 --> 02:26:10,960
do you see something

2591
02:26:11,920 --> 02:26:14,640
yes yes

2592
02:26:17,520 --> 02:26:21,840
nice i will try to

2593
02:26:25,280 --> 02:26:28,479
take the full screen

2594
02:26:29,280 --> 02:26:32,800
and it's it's done

2595
02:26:32,800 --> 02:26:36,240
so everybody hello everybody i will

2596
02:26:36,240 --> 02:26:39,120
talk about vulnerabilities and how we

2597
02:26:39,120 --> 02:26:39,680
manage

2598
02:26:39,680 --> 02:26:43,920
them in my my current uh assessment

2599
02:26:43,920 --> 02:26:46,560
i don't have any answer to any question

2600
02:26:46,560 --> 02:26:47,120
about

2601
02:26:47,120 --> 02:26:50,240
how to manage vulnerabilities but i

2602
02:26:50,240 --> 02:26:52,399
i'm only here to share about my

2603
02:26:52,399 --> 02:26:53,680
experiences

2604
02:26:53,680 --> 02:26:57,520
and why we built a tool to

2605
02:26:57,520 --> 02:27:01,040
to help us to make a better decision and

2606
02:27:01,040 --> 02:27:02,319
quicker decision to

2607
02:27:02,319 --> 02:27:05,920
to prioritize how which regularities we

2608
02:27:05,920 --> 02:27:06,319
have

2609
02:27:06,319 --> 02:27:10,240
to to deal with first

2610
02:27:10,240 --> 02:27:13,280
so my introduction has been has been

2611
02:27:13,280 --> 02:27:14,319
done

2612
02:27:14,319 --> 02:27:17,359
just consider me as a petrochemte tester

2613
02:27:17,359 --> 02:27:20,640
which is a recycled into devops

2614
02:27:20,640 --> 02:27:24,080
and uh and manager today i'm

2615
02:27:24,080 --> 02:27:28,640
an open source computer so mostly on

2616
02:27:28,640 --> 02:27:31,920
patrol i assume i assume that a lot

2617
02:27:31,920 --> 02:27:32,960
because it takes

2618
02:27:32,960 --> 02:27:35,439
a lot of time to to contribute

2619
02:27:35,439 --> 02:27:36,399
efficiently

2620
02:27:36,399 --> 02:27:40,479
with uh with all the communities so

2621
02:27:40,479 --> 02:27:43,840
that's what is my only only

2622
02:27:43,840 --> 02:27:46,399
contribution

2623
02:27:47,600 --> 02:27:49,200
just a quick overview of platform

2624
02:27:49,200 --> 02:27:50,960
platforms is now

2625
02:27:50,960 --> 02:27:54,720
a company we are who are a smaller

2626
02:27:54,720 --> 02:27:58,000
startup which is based in france

2627
02:27:58,000 --> 02:28:02,080
and we have a soon we

2628
02:28:02,080 --> 02:28:06,000
we are accelerated by uh by exetequest

2629
02:28:06,000 --> 02:28:09,280
it's it's a it's a new for us and it's

2630
02:28:09,280 --> 02:28:09,600
very

2631
02:28:09,600 --> 02:28:12,319
very very nice and thank you for them to

2632
02:28:12,319 --> 02:28:12,800
help

2633
02:28:12,800 --> 02:28:16,720
us to to to help us to

2634
02:28:16,720 --> 02:28:21,599
manage how to to sell products

2635
02:28:22,240 --> 02:28:25,359
and we have a new logo that's that's all

2636
02:28:25,359 --> 02:28:29,040
so just we uh i propose you to go deeper

2637
02:28:29,040 --> 02:28:30,000
into

2638
02:28:30,000 --> 02:28:33,040
the the topic the main topic of today

2639
02:28:33,040 --> 02:28:36,080
is how to manage vulnerabilities

2640
02:28:36,080 --> 02:28:39,680
so first i will start with 30 words

2641
02:28:39,680 --> 02:28:42,960
for for some dating equal guys

2642
02:28:42,960 --> 02:28:46,560
uh what is reality management i just

2643
02:28:46,560 --> 02:28:49,920
my promise is to to talk about it in

2644
02:28:49,920 --> 02:28:53,200
in on one slide only

2645
02:28:53,200 --> 02:28:55,280
it's about recurring activities the

2646
02:28:55,280 --> 02:28:56,399
first one is about

2647
02:28:56,399 --> 02:29:00,000
how to uh to to know the parameter so

2648
02:29:00,000 --> 02:29:02,800
you have to to deal with uh with your

2649
02:29:02,800 --> 02:29:05,600
assets you have to know your assets

2650
02:29:05,600 --> 02:29:08,319
you have to uh to make a rich analysis

2651
02:29:08,319 --> 02:29:08,960
on this

2652
02:29:08,960 --> 02:29:11,760
just to be to identify which are the

2653
02:29:11,760 --> 02:29:13,040
critical one and

2654
02:29:13,040 --> 02:29:16,080
which are the less critical

2655
02:29:16,080 --> 02:29:19,760
order and to know about their exposure

2656
02:29:19,760 --> 02:29:23,120
and to manage or try to manage every

2657
02:29:23,120 --> 02:29:24,800
technologies you you have to deal with

2658
02:29:24,800 --> 02:29:27,680
within your information system

2659
02:29:27,680 --> 02:29:30,000
you also have another big part of the

2660
02:29:30,000 --> 02:29:30,720
the

2661
02:29:30,720 --> 02:29:32,720
management program which is the watch

2662
02:29:32,720 --> 02:29:34,560
the security monitoring

2663
02:29:34,560 --> 02:29:37,680
you have to to to

2664
02:29:37,680 --> 02:29:39,120
have information about the new

2665
02:29:39,120 --> 02:29:41,280
vulnerabilities new exploits

2666
02:29:41,280 --> 02:29:44,319
new attack attacks which

2667
02:29:44,319 --> 02:29:47,840
which are every day

2668
02:29:47,840 --> 02:29:51,439
occurring in our company or

2669
02:29:51,439 --> 02:29:54,479
in confidence in the adventure and to

2670
02:29:54,479 --> 02:29:55,520
know about

2671
02:29:55,520 --> 02:29:59,120
hataker attackers we will talk about

2672
02:29:59,120 --> 02:30:04,000
the ttp here we also

2673
02:30:04,000 --> 02:30:07,840
need to to make active control uh which

2674
02:30:07,840 --> 02:30:10,640
we perform vulnerability scan we perform

2675
02:30:10,640 --> 02:30:13,200
intrusion tests

2676
02:30:13,200 --> 02:30:15,920
many companies are introducing the

2677
02:30:15,920 --> 02:30:17,840
burgundy program

2678
02:30:17,840 --> 02:30:20,399
we also have in activities like

2679
02:30:20,399 --> 02:30:23,600
threatening configuration management

2680
02:30:23,600 --> 02:30:26,479
source code editing and so on and the

2681
02:30:26,479 --> 02:30:27,600
last one is about

2682
02:30:27,600 --> 02:30:30,160
reporting

2683
02:30:30,960 --> 02:30:32,960
just to to be sure that the process we

2684
02:30:32,960 --> 02:30:35,280
have uh

2685
02:30:35,280 --> 02:30:38,399
we have uh we have put in a real step in

2686
02:30:38,399 --> 02:30:41,920
the company is sufficient is a

2687
02:30:41,920 --> 02:30:45,359
is a relevance and is

2688
02:30:45,359 --> 02:30:48,960
and then thing year after year

2689
02:30:49,920 --> 02:30:53,120
you always perform the the same the same

2690
02:30:53,120 --> 02:30:54,160
activities which is

2691
02:30:54,160 --> 02:30:56,240
you have to identify vulnerabilities you

2692
02:30:56,240 --> 02:30:58,160
have to prioritize them because you

2693
02:30:58,160 --> 02:31:01,200
all you can't manage every vulnerability

2694
02:31:01,200 --> 02:31:01,680
you

2695
02:31:01,680 --> 02:31:04,399
you identify in your information system

2696
02:31:04,399 --> 02:31:06,720
so you have to you know

2697
02:31:06,720 --> 02:31:10,080
prioritize them the

2698
02:31:10,080 --> 02:31:13,280
the happy few which has been selected

2699
02:31:13,280 --> 02:31:15,680
you you can remediate them and you you

2700
02:31:15,680 --> 02:31:16,880
have to to check

2701
02:31:16,880 --> 02:31:20,479
the the fixes um

2702
02:31:20,560 --> 02:31:23,920
execution and this is requiring

2703
02:31:23,920 --> 02:31:24,800
activities the

2704
02:31:24,800 --> 02:31:29,040
this is a nom knowing job

2705
02:31:29,040 --> 02:31:32,160
so the first thing the the the thing we

2706
02:31:32,160 --> 02:31:34,479
do we do we do automation we have do we

2707
02:31:34,479 --> 02:31:36,720
we have to affect reality we have a lot

2708
02:31:36,720 --> 02:31:38,960
of assets we have a lot of technology to

2709
02:31:38,960 --> 02:31:40,160
manage

2710
02:31:40,160 --> 02:31:43,760
it change every day every hour

2711
02:31:43,760 --> 02:31:46,479
we we have to to deal with the critical

2712
02:31:46,479 --> 02:31:48,720
vulnerabilities the

2713
02:31:48,720 --> 02:31:51,200
the the biggest as the quickest as

2714
02:31:51,200 --> 02:31:52,080
possible

2715
02:31:52,080 --> 02:31:55,040
and to do this we we have to perform the

2716
02:31:55,040 --> 02:31:57,920
practice like the activities have

2717
02:31:57,920 --> 02:32:01,200
told the slide before so this is

2718
02:32:01,200 --> 02:32:04,000
a lot of activities a lot of

2719
02:32:04,000 --> 02:32:05,840
time-consuming activities

2720
02:32:05,840 --> 02:32:08,240
and if you want to know about the

2721
02:32:08,240 --> 02:32:09,520
gravity you have to

2722
02:32:09,520 --> 02:32:12,800
to deal with admittable fields of data

2723
02:32:12,800 --> 02:32:15,359
this data does not have the the same

2724
02:32:15,359 --> 02:32:16,399
quality

2725
02:32:16,399 --> 02:32:20,000
and you have to refresh them

2726
02:32:20,000 --> 02:32:23,520
to reverse them and every time you you

2727
02:32:23,520 --> 02:32:25,040
you need it

2728
02:32:25,040 --> 02:32:26,880
you won't have any people to to deal

2729
02:32:26,880 --> 02:32:29,280
with all the developments and you have

2730
02:32:29,280 --> 02:32:31,600
to manage with the budget so

2731
02:32:31,600 --> 02:32:34,720
automation helps a lot

2732
02:32:34,720 --> 02:32:38,319
automaton give you the opportunity to

2733
02:32:38,319 --> 02:32:39,760
perform more more checks

2734
02:32:39,760 --> 02:32:43,520
so to cover larger and diversify scope

2735
02:32:43,520 --> 02:32:46,080
to do it more often the idea is to to

2736
02:32:46,080 --> 02:32:47,359
continually

2737
02:32:47,359 --> 02:32:50,479
continuously check for the probability

2738
02:32:50,479 --> 02:32:51,439
and suspicious

2739
02:32:51,439 --> 02:32:54,479
changes the idea is to to

2740
02:32:54,479 --> 02:32:57,520
identify the different variability

2741
02:32:57,520 --> 02:33:00,800
as soon as possible in order to fix them

2742
02:33:00,800 --> 02:33:05,280
to fix it as soon as possible too

2743
02:33:05,280 --> 02:33:07,280
the the next one is to do it more

2744
02:33:07,280 --> 02:33:08,560
efficiently the

2745
02:33:08,560 --> 02:33:11,439
idea for the this part is to say okay

2746
02:33:11,439 --> 02:33:12,560
vulnerability is

2747
02:33:12,560 --> 02:33:16,080
brilliant management it's a lot of

2748
02:33:16,080 --> 02:33:18,840
low value adding tasks we have to

2749
02:33:18,840 --> 02:33:20,640
perform quick

2750
02:33:20,640 --> 02:33:23,680
quick action and we have to to deal

2751
02:33:23,680 --> 02:33:26,880
to make it every every day it's

2752
02:33:26,880 --> 02:33:30,080
uh it's not fun it's not flat at all

2753
02:33:30,080 --> 02:33:34,319
so if you want to remain the the team

2754
02:33:34,319 --> 02:33:36,800
the the expert team motivated you have

2755
02:33:36,800 --> 02:33:37,600
to to

2756
02:33:37,600 --> 02:33:40,880
automate them to uh just to focus

2757
02:33:40,880 --> 02:33:46,160
the brain on on fancy subjects

2758
02:33:46,319 --> 02:33:49,200
and the last one is to help about uh

2759
02:33:49,200 --> 02:33:50,000
compliance and

2760
02:33:50,000 --> 02:33:53,040
uh and do benchmark about uh

2761
02:33:53,040 --> 02:33:56,160
about how how good uh you are

2762
02:33:56,160 --> 02:33:59,920
and how uh how good you you could be

2763
02:33:59,920 --> 02:34:01,760
regarding other people all the

2764
02:34:01,760 --> 02:34:05,760
information of the organization

2765
02:34:07,120 --> 02:34:10,880
even though if you do more control

2766
02:34:10,880 --> 02:34:14,319
if you make make it more often so

2767
02:34:14,319 --> 02:34:16,720
mathematically you will have more

2768
02:34:16,720 --> 02:34:18,080
findings and we

2769
02:34:18,080 --> 02:34:21,840
talk more findings

2770
02:34:21,840 --> 02:34:24,080
to to to manage so you will have more

2771
02:34:24,080 --> 02:34:25,040
alerts more

2772
02:34:25,040 --> 02:34:28,640
vulnerabilities to to deal um

2773
02:34:28,640 --> 02:34:31,760
it's it's no uh like a christmas tree if

2774
02:34:31,760 --> 02:34:32,800
you want to

2775
02:34:32,800 --> 02:34:36,080
to to to manage them every day

2776
02:34:36,080 --> 02:34:40,080
you have a lot a lot of data to

2777
02:34:40,080 --> 02:34:43,200
to perform and uh depending the the

2778
02:34:43,200 --> 02:34:44,560
feeds

2779
02:34:44,560 --> 02:34:49,359
of the of where you collected the data

2780
02:34:49,359 --> 02:34:52,000
it could be considered as critical or

2781
02:34:52,000 --> 02:34:54,240
less critical or so on and you have to

2782
02:34:54,240 --> 02:34:55,600
manage

2783
02:34:55,600 --> 02:34:58,000
all these all these indicators on this

2784
02:34:58,000 --> 02:34:58,800
metric

2785
02:34:58,800 --> 02:35:02,080
in a unified way

2786
02:35:02,080 --> 02:35:06,399
so the question here is to efficiently

2787
02:35:06,399 --> 02:35:09,760
manage the vulnerabilities the first

2788
02:35:09,760 --> 02:35:10,160
thing

2789
02:35:10,160 --> 02:35:14,240
is about triage and prioritization

2790
02:35:14,240 --> 02:35:17,520
um for for this just to to illustrate

2791
02:35:17,520 --> 02:35:20,800
the uh the the idea and why we build

2792
02:35:20,800 --> 02:35:23,439
a platform i will share my morning

2793
02:35:23,439 --> 02:35:24,240
routine

2794
02:35:24,240 --> 02:35:27,520
in the in my claim

2795
02:35:27,520 --> 02:35:30,560
but every morning we we talk about new

2796
02:35:30,560 --> 02:35:31,359
gravities

2797
02:35:31,359 --> 02:35:32,880
that have been discovered the first

2798
02:35:32,880 --> 02:35:34,640
thing we do we

2799
02:35:34,640 --> 02:35:37,680
we we talk it there is a multiple

2800
02:35:37,680 --> 02:35:40,080
sources of

2801
02:35:40,080 --> 02:35:42,800
data of globality that they come from we

2802
02:35:42,800 --> 02:35:43,120
have

2803
02:35:43,120 --> 02:35:46,160
a data new gravity income from

2804
02:35:46,160 --> 02:35:48,960
the degree scan the priority watts the

2805
02:35:48,960 --> 02:35:51,120
cgi team

2806
02:35:51,120 --> 02:35:54,160
alerts coming from from iit users

2807
02:35:54,160 --> 02:35:58,240
and and so on and every morning we

2808
02:35:58,240 --> 02:36:01,760
we have we we we take the time to

2809
02:36:01,760 --> 02:36:05,040
to select the the most critical and we

2810
02:36:05,040 --> 02:36:06,000
talk about

2811
02:36:06,000 --> 02:36:08,720
metrics the first thing is we we talked

2812
02:36:08,720 --> 02:36:10,640
about the the cvs basketball

2813
02:36:10,640 --> 02:36:14,000
depending of the the score we we

2814
02:36:14,000 --> 02:36:17,040
we stop here and we consider it like a

2815
02:36:17,040 --> 02:36:17,680
critical

2816
02:36:17,680 --> 02:36:20,720
one and we we decide to

2817
02:36:20,720 --> 02:36:23,040
to make a creative crisis or not or

2818
02:36:23,040 --> 02:36:24,399
special

2819
02:36:24,399 --> 02:36:27,760
communication to the to the uh

2820
02:36:27,760 --> 02:36:31,200
to to the asset owner

2821
02:36:31,439 --> 02:36:34,560
we uh we have the the question so

2822
02:36:34,560 --> 02:36:37,280
are we nervous available to this

2823
02:36:37,280 --> 02:36:38,240
creativity

2824
02:36:38,240 --> 02:36:40,720
are we exposed from the internet because

2825
02:36:40,720 --> 02:36:42,800
if we are exposed from the internet

2826
02:36:42,800 --> 02:36:46,640
you know in this video it will be

2827
02:36:46,640 --> 02:36:50,960
it have to be ironically manage

2828
02:36:50,960 --> 02:36:53,200
is the variety has been identified on

2829
02:36:53,200 --> 02:36:55,840
critical assets and

2830
02:36:55,840 --> 02:36:58,479
the next one is very important so are we

2831
02:36:58,479 --> 02:36:59,040
aware

2832
02:36:59,040 --> 02:37:02,560
of any functional exploit

2833
02:37:02,560 --> 02:37:05,280
we we have to manage a lot of

2834
02:37:05,280 --> 02:37:06,399
vulnerabilities

2835
02:37:06,399 --> 02:37:11,439
but most of them are firstly

2836
02:37:11,439 --> 02:37:15,359
not theoretical theoretic

2837
02:37:15,920 --> 02:37:19,040
but we we don't have a way to exploit

2838
02:37:19,040 --> 02:37:21,120
them so we know we have a vulnerability

2839
02:37:21,120 --> 02:37:22,240
but

2840
02:37:22,240 --> 02:37:25,920
no one no it's no no no one but

2841
02:37:25,920 --> 02:37:29,280
the public explanation

2842
02:37:29,280 --> 02:37:34,000
is not uh it's not it's not available so

2843
02:37:34,000 --> 02:37:36,560
it's not the the first thing we have to

2844
02:37:36,560 --> 02:37:39,199
do to fix

2845
02:37:39,600 --> 02:37:43,040
is there any patch or compensation

2846
02:37:43,040 --> 02:37:46,399
measure available and either are there

2847
02:37:46,399 --> 02:37:49,760
any likelihood catalysts

2848
02:37:49,760 --> 02:37:52,960
uh we we pose the

2849
02:37:52,960 --> 02:37:56,399
the question so is it exploited in the y

2850
02:37:56,399 --> 02:37:59,439
do we have the the the answer what is

2851
02:37:59,439 --> 02:38:00,000
the media

2852
02:38:00,000 --> 02:38:02,720
hype level if we do we talk about this

2853
02:38:02,720 --> 02:38:03,040
in

2854
02:38:03,040 --> 02:38:05,680
public media and so on do we have the

2855
02:38:05,680 --> 02:38:07,439
information

2856
02:38:07,439 --> 02:38:10,560
about the the exploitation i found

2857
02:38:10,560 --> 02:38:12,880
of this vulnerability has been exploited

2858
02:38:12,880 --> 02:38:14,399
by a relevance protector

2859
02:38:14,399 --> 02:38:18,080
regarding our activity

2860
02:38:18,640 --> 02:38:21,680
and we we posed the question so are we

2861
02:38:21,680 --> 02:38:25,520
already phone it's not very easy to to

2862
02:38:25,520 --> 02:38:26,399
answer

2863
02:38:26,399 --> 02:38:29,760
quickly that this the after this uh

2864
02:38:29,760 --> 02:38:32,800
this question but we um we

2865
02:38:32,800 --> 02:38:35,920
we also try to identify if we have the

2866
02:38:35,920 --> 02:38:37,760
ability to detect

2867
02:38:37,760 --> 02:38:40,960
uh if we are already done

2868
02:38:40,960 --> 02:38:44,160
and regarding all these metrics uh we

2869
02:38:44,160 --> 02:38:47,359
uh we have to take decision so do we

2870
02:38:47,359 --> 02:38:48,640
have enough

2871
02:38:48,640 --> 02:38:51,760
data to initiate uh

2872
02:38:51,760 --> 02:38:54,800
a crisis and uh to fix it as quick as

2873
02:38:54,800 --> 02:38:55,280
possible

2874
02:38:55,280 --> 02:38:58,720
within the day or just we have to wait

2875
02:38:58,720 --> 02:38:59,359
and

2876
02:38:59,359 --> 02:39:01,680
insert it into the the branch of the

2877
02:39:01,680 --> 02:39:02,640
standard

2878
02:39:02,640 --> 02:39:07,279
the the classic vulnerability manager

2879
02:39:09,439 --> 02:39:12,240
so if you want to if we want to to

2880
02:39:12,240 --> 02:39:13,040
prioritize

2881
02:39:13,040 --> 02:39:15,040
the the findings the data three we are

2882
02:39:15,040 --> 02:39:16,080
collecting

2883
02:39:16,080 --> 02:39:19,760
the there is two main main ideas the

2884
02:39:19,760 --> 02:39:21,520
first one is uh it's a teamwork

2885
02:39:21,520 --> 02:39:24,880
because um no one but it requires

2886
02:39:24,880 --> 02:39:28,160
a lot of technical skills and

2887
02:39:28,160 --> 02:39:32,000
technical liabilities to to

2888
02:39:32,000 --> 02:39:35,120
to answer all the metrics it's very

2889
02:39:35,120 --> 02:39:37,760
very rare we have to we we can answer

2890
02:39:37,760 --> 02:39:40,479
all the the questions we repose

2891
02:39:40,479 --> 02:39:43,920
because it's it's not uh summarizing to

2892
02:39:43,920 --> 02:39:45,120
the

2893
02:39:45,120 --> 02:39:48,720
central db and just to know yes no

2894
02:39:48,720 --> 02:39:52,160
we have to go there

2895
02:39:52,160 --> 02:39:55,840
it's involved also itm business team

2896
02:39:55,840 --> 02:39:58,319
but they are there definitely the next

2897
02:39:58,319 --> 02:39:59,280
one is

2898
02:39:59,280 --> 02:40:02,399
the reality metadata are not static

2899
02:40:02,399 --> 02:40:05,439
definitely not the the answer we have to

2900
02:40:05,439 --> 02:40:08,080
at this moment it will it could be

2901
02:40:08,080 --> 02:40:08,640
change

2902
02:40:08,640 --> 02:40:11,760
updated the last the the next few

2903
02:40:11,760 --> 02:40:15,920
few minutes and it's in uh

2904
02:40:15,920 --> 02:40:20,720
just if a new export is a relay release

2905
02:40:20,720 --> 02:40:22,960
maybe it's time it's time to to consider

2906
02:40:22,960 --> 02:40:23,760
it

2907
02:40:23,760 --> 02:40:28,240
with urgency and

2908
02:40:28,240 --> 02:40:30,319
and it will change the the way we have

2909
02:40:30,319 --> 02:40:31,359
to to deal with

2910
02:40:31,359 --> 02:40:35,359
this reality

2911
02:40:35,359 --> 02:40:39,200
just a quick quick focus

2912
02:40:39,200 --> 02:40:42,800
on the the cvss

2913
02:40:43,040 --> 02:40:46,800
as i said before um the seriousness was

2914
02:40:46,800 --> 02:40:47,120
the

2915
02:40:47,120 --> 02:40:51,279
the first the deterministic item

2916
02:40:51,279 --> 02:40:55,439
the the first metric we uh we we

2917
02:40:55,439 --> 02:40:58,640
we tried to to understand and to deal

2918
02:40:58,640 --> 02:41:00,640
with

2919
02:41:00,640 --> 02:41:02,880
the question is is the the cvss best

2920
02:41:02,880 --> 02:41:04,800
score is sufficiently it looks to be the

2921
02:41:04,800 --> 02:41:08,560
primary factor of discrimination

2922
02:41:08,560 --> 02:41:11,520
a quicker quick reminder of the the cvs

2923
02:41:11,520 --> 02:41:12,399
score is a

2924
02:41:12,399 --> 02:41:16,000
score from 0 to 10 10 is the the

2925
02:41:16,000 --> 02:41:19,600
high price criticality

2926
02:41:19,600 --> 02:41:22,800
under the variability

2927
02:41:22,800 --> 02:41:25,680
we have three metrics the the the first

2928
02:41:25,680 --> 02:41:27,279
one is the the best

2929
02:41:27,279 --> 02:41:30,479
the best score which went from the the

2930
02:41:30,479 --> 02:41:32,640
the intrinsic characteristic of the

2931
02:41:32,640 --> 02:41:33,760
variability

2932
02:41:33,760 --> 02:41:36,000
the

2933
02:41:37,520 --> 02:41:39,439
and it's a very it's very basic what is

2934
02:41:39,439 --> 02:41:41,200
the impact which is the

2935
02:41:41,200 --> 02:41:44,160
the the generic likelihood of this

2936
02:41:44,160 --> 02:41:45,439
reality what are the

2937
02:41:45,439 --> 02:41:48,240
prerequisites to exploit to identify to

2938
02:41:48,240 --> 02:41:48,960
exploit

2939
02:41:48,960 --> 02:41:51,680
the vulnerability the next one is temple

2940
02:41:51,680 --> 02:41:52,479
it's required

2941
02:41:52,479 --> 02:41:54,640
the characteristics of it that change

2942
02:41:54,640 --> 02:41:56,000
all the time

2943
02:41:56,000 --> 02:42:01,040
and it's like is there any exploits

2944
02:42:01,040 --> 02:42:03,520
and is there a patch available around

2945
02:42:03,520 --> 02:42:04,240
this uh the

2946
02:42:04,240 --> 02:42:06,160
this reality and the next one is

2947
02:42:06,160 --> 02:42:07,600
environmental it depends

2948
02:42:07,600 --> 02:42:11,600
of the the clients the user environment

2949
02:42:11,600 --> 02:42:13,439
because the vulnerability which is

2950
02:42:13,439 --> 02:42:15,279
available from

2951
02:42:15,279 --> 02:42:19,600
from internet on a

2952
02:42:19,600 --> 02:42:23,600
medium medium critical

2953
02:42:23,600 --> 02:42:26,800
asset is not the same about a

2954
02:42:26,800 --> 02:42:27,840
vulnerability

2955
02:42:27,840 --> 02:42:31,120
with a high cbss score

2956
02:42:31,120 --> 02:42:33,120
but only reachable from an

2957
02:42:33,120 --> 02:42:35,359
administrative or

2958
02:42:35,359 --> 02:42:39,279
power restricted network

2959
02:42:39,279 --> 02:42:42,960
we have lots of innovation

2960
02:42:43,040 --> 02:42:45,760
globally is a is the the standard is

2961
02:42:45,760 --> 02:42:46,479
largely

2962
02:42:46,479 --> 02:42:48,960
largely adapted by the the user the

2963
02:42:48,960 --> 02:42:49,680
vendors

2964
02:42:49,680 --> 02:42:53,600
and it's as simple as the number if you

2965
02:42:53,600 --> 02:42:54,240
know if

2966
02:42:54,240 --> 02:42:57,039
it's if it's

2967
02:42:57,520 --> 02:43:00,560
if it's a hard or it's a if it's a

2968
02:43:00,560 --> 02:43:02,960
critical or not

2969
02:43:02,960 --> 02:43:07,040
so it's it's very very helpful but

2970
02:43:07,040 --> 02:43:10,080
it could be it could be better and

2971
02:43:10,080 --> 02:43:12,319
it have to be better understand

2972
02:43:12,319 --> 02:43:13,760
understood to uh

2973
02:43:13,760 --> 02:43:18,479
to make to make this peace core

2974
02:43:18,479 --> 02:43:21,200
a real asset and a real metric to

2975
02:43:21,200 --> 02:43:22,479
determine if you have to

2976
02:43:22,479 --> 02:43:25,439
to prioritize the different ability or

2977
02:43:25,439 --> 02:43:26,319
to demo

2978
02:43:26,319 --> 02:43:28,960
the priority

2979
02:43:30,479 --> 02:43:34,080
so obviously we talked about the

2980
02:43:34,080 --> 02:43:36,399
the desktop we only selected the the

2981
02:43:36,399 --> 02:43:37,359
best car to

2982
02:43:37,359 --> 02:43:40,640
to make the decision uh if we have to uh

2983
02:43:40,640 --> 02:43:43,840
to to manage this priority first or not

2984
02:43:43,840 --> 02:43:48,560
um definitely is not a good idea

2985
02:43:48,560 --> 02:43:51,600
because if we want to it's a

2986
02:43:51,600 --> 02:43:55,520
little it's quite easy to say data

2987
02:43:55,520 --> 02:43:58,800
so if you want to to make a good

2988
02:43:58,800 --> 02:44:01,359
the better decision you have to uh to

2989
02:44:01,359 --> 02:44:01,920
have

2990
02:44:01,920 --> 02:44:05,120
the better data and better data

2991
02:44:05,120 --> 02:44:08,000
it's about all these these three terms

2992
02:44:08,000 --> 02:44:08,640
it's about

2993
02:44:08,640 --> 02:44:11,040
how the the variety they are set and the

2994
02:44:11,040 --> 02:44:12,960
scripts it's basically

2995
02:44:12,960 --> 02:44:16,000
done with uh with the three vector

2996
02:44:16,000 --> 02:44:20,000
those the three matrix given by the this

2997
02:44:20,000 --> 02:44:23,279
vss and

2998
02:44:23,279 --> 02:44:26,800
we uh we we updated

2999
02:44:26,800 --> 02:44:30,000
so no notice that they did we we have

3000
02:44:30,000 --> 02:44:32,479
inspired our score ste system

3001
02:44:32,479 --> 02:44:36,479
using this uh this display partition of

3002
02:44:36,479 --> 02:44:37,439
matrix

3003
02:44:37,439 --> 02:44:39,600
the first one is about the variability

3004
02:44:39,600 --> 02:44:40,560
so we take

3005
02:44:40,560 --> 02:44:44,240
the cvss the ap2 impact and exposure

3006
02:44:44,240 --> 02:44:47,840
matrix we

3007
02:44:48,080 --> 02:44:50,319
we we try to to answer the question are

3008
02:44:50,319 --> 02:44:51,120
the

3009
02:44:51,120 --> 02:44:53,760
patch available we also deal with the

3010
02:44:53,760 --> 02:44:54,319
edge of

3011
02:44:54,319 --> 02:45:00,640
the venability because even the mold

3012
02:45:00,640 --> 02:45:04,160
if it's an old vulnerability it have

3013
02:45:04,160 --> 02:45:06,560
a higher likelihood to to be identified

3014
02:45:06,560 --> 02:45:07,840
and exploited

3015
02:45:07,840 --> 02:45:11,920
within the by the attacker

3016
02:45:11,920 --> 02:45:15,760
because they have more time to to

3017
02:45:15,760 --> 02:45:20,479
to have to have and to stabilize

3018
02:45:20,479 --> 02:45:24,160
their exploit we also try to identify

3019
02:45:24,160 --> 02:45:24,720
the

3020
02:45:24,720 --> 02:45:28,160
discovery he is and the detection is

3021
02:45:28,160 --> 02:45:31,359
basically it's uh is done by the the

3022
02:45:31,359 --> 02:45:32,800
best

3023
02:45:32,800 --> 02:45:36,000
the the best services score

3024
02:45:36,000 --> 02:45:38,160
the next one is about the threats is

3025
02:45:38,160 --> 02:45:39,439
there any

3026
02:45:39,439 --> 02:45:43,120
exports available as any known

3027
02:45:43,120 --> 02:45:45,680
which is public or private if you are to

3028
02:45:45,680 --> 02:45:46,800
to pay

3029
02:45:46,800 --> 02:45:49,760
to have this this expert as well as the

3030
02:45:49,760 --> 02:45:52,160
the exploit maturity

3031
02:45:52,160 --> 02:45:55,359
because we we can share

3032
02:45:55,359 --> 02:45:58,000
exploits but they don't have the same

3033
02:45:58,000 --> 02:45:59,600
the same level of activity

3034
02:45:59,600 --> 02:46:03,279
basically sometimes we don't

3035
02:46:03,279 --> 02:46:06,479
we just have the the line

3036
02:46:06,479 --> 02:46:08,160
that the line in the the source code

3037
02:46:08,160 --> 02:46:10,000
which is a venerable and you

3038
02:46:10,000 --> 02:46:13,439
you harm of the the diff between

3039
02:46:13,439 --> 02:46:17,920
the vinality part and the the fixed one

3040
02:46:17,920 --> 02:46:21,200
you and the other way the other time you

3041
02:46:21,200 --> 02:46:22,720
you have a script

3042
02:46:22,720 --> 02:46:24,800
which is very easy to you to use you

3043
02:46:24,800 --> 02:46:26,479
only set your uip

3044
02:46:26,479 --> 02:46:29,520
you click and uh and your phone

3045
02:46:29,520 --> 02:46:32,160
so this starts at the same level of

3046
02:46:32,160 --> 02:46:34,000
maturity and

3047
02:46:34,000 --> 02:46:37,200
we have to manage the the source of the

3048
02:46:37,200 --> 02:46:40,000
this this exploit because a lot of fake

3049
02:46:40,000 --> 02:46:41,920
exploits are

3050
02:46:41,920 --> 02:46:44,800
are circulating within the the internet

3051
02:46:44,800 --> 02:46:46,399
and we have to

3052
02:46:46,399 --> 02:46:49,600
to check about the how good or real

3053
02:46:49,600 --> 02:46:53,840
they are

3054
02:46:54,000 --> 02:46:56,800
uh we will talk about the the export is

3055
02:46:56,800 --> 02:46:58,000
the threat intercity

3056
02:46:58,000 --> 02:47:00,160
is it exploiting the while do we talk

3057
02:47:00,160 --> 02:47:01,040
about dc

3058
02:47:01,040 --> 02:47:04,640
in the news in the mainstream news

3059
02:47:04,640 --> 02:47:08,000
so but not in in

3060
02:47:08,000 --> 02:47:11,520
some private forum and uh

3061
02:47:11,520 --> 02:47:14,080
if you uh comply with the the miter

3062
02:47:14,080 --> 02:47:14,560
attack

3063
02:47:14,560 --> 02:47:17,840
framework it's it's it could be helpful

3064
02:47:17,840 --> 02:47:18,479
to uh

3065
02:47:18,479 --> 02:47:21,200
to to know if this similarity has been

3066
02:47:21,200 --> 02:47:22,800
exploited by

3067
02:47:22,800 --> 02:47:26,240
relevant protectors the next one

3068
02:47:26,240 --> 02:47:29,359
and basically is the most interesting

3069
02:47:29,359 --> 02:47:30,880
one

3070
02:47:30,880 --> 02:47:34,319
and because it's very very depending of

3071
02:47:34,319 --> 02:47:37,439
the the assets of the the

3072
02:47:37,439 --> 02:47:39,200
the information system you have to

3073
02:47:39,200 --> 02:47:41,680
manage the reality

3074
02:47:41,680 --> 02:47:43,920
and we talked about the criticality of

3075
02:47:43,920 --> 02:47:45,200
the assets the

3076
02:47:45,200 --> 02:47:47,520
exposure it was very important to know

3077
02:47:47,520 --> 02:47:50,479
if this vulnerability is only exploited

3078
02:47:50,479 --> 02:47:53,840
uh by from the internet or to the

3079
02:47:53,840 --> 02:47:56,240
restricted network and what about the

3080
02:47:56,240 --> 02:47:58,880
distribution

3081
02:47:59,200 --> 02:48:01,359
regarding all these metrics we have to

3082
02:48:01,359 --> 02:48:02,640
take decisions because

3083
02:48:02,640 --> 02:48:05,439
it's all about taking the decision we do

3084
02:48:05,439 --> 02:48:06,690
we have to

3085
02:48:06,690 --> 02:48:08,399
[Music]

3086
02:48:08,399 --> 02:48:11,600
to to manage the development today or we

3087
02:48:11,600 --> 02:48:13,920
just have to do today

3088
02:48:13,920 --> 02:48:16,800
regarding this this method we we have

3089
02:48:16,800 --> 02:48:17,760
four

3090
02:48:17,760 --> 02:48:20,240
suggested the decision the first one is

3091
02:48:20,240 --> 02:48:21,359
to to do it

3092
02:48:21,359 --> 02:48:24,640
now uh to factor to fix as quickly as

3093
02:48:24,640 --> 02:48:26,479
possible

3094
02:48:26,479 --> 02:48:29,040
and uh and we we called the right people

3095
02:48:29,040 --> 02:48:30,080
to do it

3096
02:48:30,080 --> 02:48:33,840
now the second one is to try to call it

3097
02:48:33,840 --> 02:48:34,399
uh

3098
02:48:34,399 --> 02:48:36,560
to correct the disclosity as quick as

3099
02:48:36,560 --> 02:48:37,600
possible but

3100
02:48:37,600 --> 02:48:41,760
we don't have uh we don't call people to

3101
02:48:41,760 --> 02:48:44,800
we don't want people to

3102
02:48:44,800 --> 02:48:48,560
to to do the job and the next one is to

3103
02:48:48,560 --> 02:48:50,720
apply to the peaks when the next

3104
02:48:50,720 --> 02:48:52,240
patching compact

3105
02:48:52,240 --> 02:48:54,800
if you have this this process of course

3106
02:48:54,800 --> 02:48:55,439
and then

3107
02:48:55,439 --> 02:48:59,439
the next one which is a lot of uh

3108
02:48:59,439 --> 02:49:03,439
of the the majority of vinegar vt

3109
02:49:03,439 --> 02:49:06,960
it's apply the the fix if possible

3110
02:49:06,960 --> 02:49:09,359
because we don't have to the time to uh

3111
02:49:09,359 --> 02:49:10,399
to

3112
02:49:10,399 --> 02:49:13,760
to to mail to follow um the

3113
02:49:13,760 --> 02:49:15,040
vulnerability

3114
02:49:15,040 --> 02:49:18,000
because we considered that that's not

3115
02:49:18,000 --> 02:49:20,640
prioritized

3116
02:49:20,640 --> 02:49:24,080
um i have a quick drill for you so you

3117
02:49:24,080 --> 02:49:24,640
can

3118
02:49:24,640 --> 02:49:28,800
use the the transform to transfer

3119
02:49:28,800 --> 02:49:32,080
and make the site we have

3120
02:49:32,080 --> 02:49:36,399
three vulnerabilities with this

3121
02:49:36,399 --> 02:49:39,760
this matrix and the question is well

3122
02:49:39,760 --> 02:49:43,040
if you have resources for fixing only

3123
02:49:43,040 --> 02:49:44,479
one vulnerability

3124
02:49:44,479 --> 02:49:46,960
which one do you plan to remediate so

3125
02:49:46,960 --> 02:49:49,278
please

3126
02:49:51,359 --> 02:49:53,600
please give me one two or three in the

3127
02:49:53,600 --> 02:50:09,840
the chatroom

3128
02:50:15,920 --> 02:50:21,200
maybe two three okay

3129
02:50:21,840 --> 02:50:25,040
it's very depending of uh

3130
02:50:25,040 --> 02:50:28,800
which is which are the the

3131
02:50:28,800 --> 02:50:31,600
the main the main matrix you you have to

3132
02:50:31,600 --> 02:50:32,399
to deal with

3133
02:50:32,399 --> 02:50:36,399
but i'm pretty aware with the the two

3134
02:50:36,399 --> 02:50:39,840
yes the two why because the two

3135
02:50:39,840 --> 02:50:43,600
it's not um a gravity with a

3136
02:50:43,600 --> 02:50:46,640
high score a high cvs pascal but

3137
02:50:46,640 --> 02:50:50,000
it's exposed is a

3138
02:50:50,000 --> 02:50:53,120
the the available asset is

3139
02:50:53,120 --> 02:50:55,279
export from the internet we have a

3140
02:50:55,279 --> 02:50:56,479
remote uh

3141
02:50:56,479 --> 02:50:58,399
we have an exploit which is remotely

3142
02:50:58,399 --> 02:50:59,520
available

3143
02:50:59,520 --> 02:51:03,680
and the asset is the is a

3144
02:51:03,680 --> 02:51:06,800
their sexual criticality is high so

3145
02:51:06,800 --> 02:51:08,880
definitely it will be the the first one

3146
02:51:08,880 --> 02:51:10,399
we have to

3147
02:51:10,399 --> 02:51:14,000
do to manage them but

3148
02:51:14,000 --> 02:51:16,319
the real question is where you don't

3149
02:51:16,319 --> 02:51:17,200
have

3150
02:51:17,200 --> 02:51:20,479
you you are lovely limited resources but

3151
02:51:20,479 --> 02:51:22,479
you have to deal with a lot of

3152
02:51:22,479 --> 02:51:24,080
familiarity so

3153
02:51:24,080 --> 02:51:27,359
how do you proceed that skill

3154
02:51:27,760 --> 02:51:32,000
the we also have to talk about the

3155
02:51:32,000 --> 02:51:34,640
exploit uh we have because an exploit

3156
02:51:34,640 --> 02:51:35,439
it's

3157
02:51:35,439 --> 02:51:37,760
it's not just a script it could be a

3158
02:51:37,760 --> 02:51:38,720
script a

3159
02:51:38,720 --> 02:51:43,200
message in a file a video a blog post

3160
02:51:43,200 --> 02:51:46,240
um it could be just a tweet to

3161
02:51:46,240 --> 02:51:49,279
to know how to exploit them and

3162
02:51:49,279 --> 02:51:51,920
every everyone is sharing this uh this

3163
02:51:51,920 --> 02:51:52,720
variability

3164
02:51:52,720 --> 02:51:56,160
this uh the this data is this expert so

3165
02:51:56,160 --> 02:51:58,640
you have to

3166
02:51:58,640 --> 02:52:02,240
to to collect the tile to monitor

3167
02:52:02,240 --> 02:52:05,279
a lot of feeds to to know about the new

3168
02:52:05,279 --> 02:52:06,000
vulnerability

3169
02:52:06,000 --> 02:52:10,160
and uh new trusted relativity

3170
02:52:10,160 --> 02:52:14,080
and which the forward the defeat

3171
02:52:14,080 --> 02:52:16,720
the the magnitude the edge of the result

3172
02:52:16,720 --> 02:52:18,000
to a

3173
02:52:18,000 --> 02:52:21,200
an old exploit could be

3174
02:52:21,200 --> 02:52:24,000
more exploited more used by the more

3175
02:52:24,000 --> 02:52:26,160
known and used by attacker

3176
02:52:26,160 --> 02:52:29,200
and what is the intent of the this

3177
02:52:29,200 --> 02:52:32,319
this variability about your your assets

3178
02:52:32,319 --> 02:52:34,960
so this is a lot of carriers we have to

3179
02:52:34,960 --> 02:52:37,679
to deal with them

3180
02:52:38,479 --> 02:52:41,600
to to help us to to do it to to manage

3181
02:52:41,600 --> 02:52:42,080
the

3182
02:52:42,080 --> 02:52:45,680
vulnerability and the metrics we built

3183
02:52:45,680 --> 02:52:47,680
by patron hills which is an open source

3184
02:52:47,680 --> 02:52:48,800
tool

3185
02:52:48,800 --> 02:52:51,040
to monitor vulnerabilities to speed up

3186
02:52:51,040 --> 02:52:51,840
the matrix

3187
02:52:51,840 --> 02:52:55,120
updates to and to fill up

3188
02:52:55,120 --> 02:52:57,920
the dimitri's matrix and to share

3189
02:52:57,920 --> 02:52:59,359
varieties and matrix

3190
02:52:59,359 --> 02:53:03,279
in within your our team

3191
02:53:04,880 --> 02:53:08,640
if we want to say synthetize

3192
02:53:08,640 --> 02:53:11,680
into one one slide it could be like this

3193
02:53:11,680 --> 02:53:12,000
uh

3194
02:53:12,000 --> 02:53:15,760
as a regularity manager today

3195
02:53:15,760 --> 02:53:18,640
and penetration tester you always if you

3196
02:53:18,640 --> 02:53:20,080
have a new vulnerability you

3197
02:53:20,080 --> 02:53:23,520
only check or you you check on

3198
02:53:23,520 --> 02:53:26,000
nvd exploit db to have the

3199
02:53:26,000 --> 02:53:26,960
vulnerabilities

3200
02:53:26,960 --> 02:53:30,160
metasploit your you are to search

3201
02:53:30,160 --> 02:53:33,200
in in github if they

3202
02:53:33,200 --> 02:53:35,680
this is a if they are any available

3203
02:53:35,680 --> 02:53:37,040
extract which is not

3204
02:53:37,040 --> 02:53:40,399
refunded by another website

3205
02:53:40,399 --> 02:53:42,319
you check on twitter winners spread

3206
02:53:42,319 --> 02:53:44,160
spreaders and and so on

3207
02:53:44,160 --> 02:53:47,840
the idea of petrol here is to

3208
02:53:47,840 --> 02:53:51,200
make the all this this data available

3209
02:53:51,200 --> 02:53:53,279
in the single cockpit and to manage

3210
02:53:53,279 --> 02:53:55,840
vulnerability and exploit in a single

3211
02:53:55,840 --> 02:53:59,120
platform that's the

3212
02:53:59,120 --> 02:54:00,960
idea basically is a

3213
02:54:00,960 --> 02:54:02,479
[Music]

3214
02:54:02,479 --> 02:54:06,160
vulnerability database

3215
02:54:10,160 --> 02:54:12,960
we collect vulnerabilities from from nvd

3216
02:54:12,960 --> 02:54:13,439
so the

3217
02:54:13,439 --> 02:54:15,740
the cv the cp and the

3218
02:54:15,740 --> 02:54:17,240
[Music]

3219
02:54:17,240 --> 02:54:20,560
cwe definition to

3220
02:54:20,560 --> 02:54:24,960
to to keep the the data tracking

3221
02:54:24,960 --> 02:54:28,240
we also try to to inject

3222
02:54:28,240 --> 02:54:30,080
cv less vulnerabilities because there

3223
02:54:30,080 --> 02:54:31,920
are a lot of finality which are

3224
02:54:31,920 --> 02:54:35,680
not the cece so

3225
02:54:35,680 --> 02:54:38,240
but we have to to manage them and their

3226
02:54:38,240 --> 02:54:39,680
related exploits

3227
02:54:39,680 --> 02:54:44,319
we also reference lots of exploits

3228
02:54:44,720 --> 02:54:49,520
in a different manner we don't always

3229
02:54:49,520 --> 02:54:53,200
collect the the and inject the full

3230
02:54:53,200 --> 02:54:54,640
exploit but we

3231
02:54:54,640 --> 02:54:57,760
we reference we we keep the link to the

3232
02:54:57,760 --> 02:54:58,560
available

3233
02:54:58,560 --> 02:55:01,600
reference this right here and

3234
02:55:01,600 --> 02:55:04,080
we also monitor the security advisories

3235
02:55:04,080 --> 02:55:05,120
and build them

3236
02:55:05,120 --> 02:55:08,319
it's basically a monitoring tower

3237
02:55:08,319 --> 02:55:12,000
so you have if you want to use it

3238
02:55:12,000 --> 02:55:15,200
you have to know about your your the

3239
02:55:15,200 --> 02:55:17,439
vendor the products you have within your

3240
02:55:17,439 --> 02:55:19,200
uit systems

3241
02:55:19,200 --> 02:55:22,399
and if you have if you are a developer

3242
02:55:22,399 --> 02:55:26,240
the package you use and you also

3243
02:55:26,240 --> 02:55:29,359
you can use a petrol here to track

3244
02:55:29,359 --> 02:55:33,439
some vulnerability changes so if you

3245
02:55:33,439 --> 02:55:36,800
if you want to be elected if when a

3246
02:55:36,800 --> 02:55:39,600
variety when uh when a new exploit is

3247
02:55:39,600 --> 02:55:43,439
available on a particular variety it's

3248
02:55:43,439 --> 02:55:46,319
it's possible to

3249
02:55:46,960 --> 02:55:49,439
so it's a it's a tool to share

3250
02:55:49,439 --> 02:55:50,399
monitoring list

3251
02:55:50,399 --> 02:55:53,600
within the teams within multiple teams

3252
02:55:53,600 --> 02:55:57,200
we have a scoring system but it's

3253
02:55:57,200 --> 02:56:01,680
based on the the cvss uh scores instead

3254
02:56:01,680 --> 02:56:05,359
we have a highlighting with uh with uh

3255
02:56:05,359 --> 02:56:07,600
using the the email or the dislike node

3256
02:56:07,600 --> 02:56:10,160
notification

3257
02:56:10,160 --> 02:56:13,439
at the at the beginning of the project

3258
02:56:13,439 --> 02:56:14,240
it was

3259
02:56:14,240 --> 02:56:18,560
only um an api

3260
02:56:18,560 --> 02:56:21,600
so every uh features and data

3261
02:56:21,600 --> 02:56:23,680
is available through the through the the

3262
02:56:23,680 --> 02:56:24,640
rest api

3263
02:56:24,640 --> 02:56:27,680
we just make a quick responsive

3264
02:56:27,680 --> 02:56:29,540
api to to

3265
02:56:29,540 --> 02:56:31,040
[Music]

3266
02:56:31,040 --> 02:56:34,240
to present the data

3267
02:56:34,240 --> 02:56:37,680
and so on

3268
02:56:38,880 --> 02:56:42,319
so the global architecture

3269
02:56:42,319 --> 02:56:45,760
uh i will just go

3270
02:56:46,080 --> 02:56:50,319
go go on this on this on this slide

3271
02:56:52,240 --> 02:56:55,040
well we'll talk about the the pencil

3272
02:56:55,040 --> 02:56:56,240
contribution

3273
02:56:56,240 --> 02:56:59,279
uh but well here we have

3274
02:56:59,279 --> 02:57:01,920
all the the source code is available on

3275
02:57:01,920 --> 02:57:02,479
uh

3276
02:57:02,479 --> 02:57:05,439
on twitter the first one is patrol here

3277
02:57:05,439 --> 02:57:07,120
which is the the application

3278
02:57:07,120 --> 02:57:09,840
the the back-end and the front-end

3279
02:57:09,840 --> 02:57:11,040
application

3280
02:57:11,040 --> 02:57:13,840
and the web the right front-end is uh is

3281
02:57:13,840 --> 02:57:15,200
designed in uh

3282
02:57:15,200 --> 02:57:18,640
in view view gs the back-end is in

3283
02:57:18,640 --> 02:57:21,439
jungle which is a python framework

3284
02:57:21,439 --> 02:57:22,319
database

3285
02:57:22,319 --> 02:57:25,359
for the sql

3286
02:57:25,359 --> 02:57:28,560
uh we use message queueing mq system

3287
02:57:28,560 --> 02:57:29,840
because

3288
02:57:29,840 --> 02:57:32,960
we have a lot of asynchronous tasks

3289
02:57:32,960 --> 02:57:36,000
we use celery and rabbit

3290
02:57:36,000 --> 02:57:40,160
mq to to do is and if you want to deploy

3291
02:57:40,160 --> 02:57:41,359
the application

3292
02:57:41,359 --> 02:57:45,439
you can deploy it using like a

3293
02:57:45,439 --> 02:57:48,000
command by pattern application or we

3294
02:57:48,000 --> 02:57:49,040
also provide

3295
02:57:49,040 --> 02:57:52,399
the adapter docker images and

3296
02:57:52,399 --> 02:57:55,920
ansible script to deploy it as quick as

3297
02:57:55,920 --> 02:57:56,479
possible

3298
02:57:56,479 --> 02:58:00,080
in your in your system

3299
02:58:02,560 --> 02:58:05,600
we also released the battle years data

3300
02:58:05,600 --> 02:58:08,399
which which is the repository you can

3301
02:58:08,399 --> 02:58:09,120
find

3302
02:58:09,120 --> 02:58:12,160
both the the raw data the raw

3303
02:58:12,160 --> 02:58:14,240
vulnerabilities and the script to

3304
02:58:14,240 --> 02:58:18,640
uh to update and load the the to collect

3305
02:58:18,640 --> 02:58:20,960
the variability from the npd and to

3306
02:58:20,960 --> 02:58:22,160
inject it in

3307
02:58:22,160 --> 02:58:24,479
petrol here at the moment the platform

3308
02:58:24,479 --> 02:58:25,840
here feeds which is the

3309
02:58:25,840 --> 02:58:30,399
the repository we have the

3310
02:58:30,399 --> 02:58:34,399
the script to scrap some some data on

3311
02:58:34,399 --> 02:58:37,680
on packet storm exploit db

3312
02:58:37,680 --> 02:58:41,920
uh zdi c bug and so on we also

3313
02:58:41,920 --> 02:58:45,520
we get vulnerabilities and exploit

3314
02:58:45,520 --> 02:58:48,080
using the the echo one report it's very

3315
02:58:48,080 --> 02:58:49,600
very useful and

3316
02:58:49,600 --> 02:58:52,880
well well right we have a lot of the

3317
02:58:52,880 --> 02:58:53,840
time

3318
02:58:53,840 --> 02:58:57,359
from this this fit

3319
02:58:57,600 --> 02:59:02,080
we also provide an api client

3320
02:59:02,080 --> 02:59:05,359
which is in patent in python which is a

3321
02:59:05,359 --> 02:59:09,760
platform here for pi you can use it to

3322
02:59:09,760 --> 02:59:13,120
like like a switch to quickly

3323
02:59:13,120 --> 02:59:16,880
access the the vulnerabilities and

3324
02:59:16,880 --> 02:59:20,880
the damage so if you want to

3325
02:59:20,880 --> 02:59:24,640
test it and start it please do

3326
02:59:24,640 --> 02:59:28,640
everything is available on the on the

3327
02:59:28,640 --> 02:59:30,319
the the patroller here's every

3328
02:59:30,319 --> 02:59:33,039
repository

3329
02:59:33,920 --> 02:59:37,359
the the common user are mostly the the

3330
02:59:37,359 --> 02:59:38,319
it

3331
02:59:38,319 --> 02:59:42,000
says security rit security team

3332
02:59:42,000 --> 02:59:43,760
which is the size of the stock in the

3333
02:59:43,760 --> 02:59:45,760
devops but basically

3334
02:59:45,760 --> 02:59:49,120
it's quite easy to to use it and

3335
02:59:49,120 --> 02:59:56,000
it could be used by all it teams

3336
02:59:56,000 --> 02:59:58,960
uh the some caveat of the this

3337
02:59:58,960 --> 02:59:59,680
application

3338
02:59:59,680 --> 03:00:02,800
we we are well aware of uh

3339
03:00:02,800 --> 03:00:06,080
known limitation of the the project the

3340
03:00:06,080 --> 03:00:06,720
first one

3341
03:00:06,720 --> 03:00:10,640
is our basic source of data is

3342
03:00:10,640 --> 03:00:15,279
nvd but we have a lot of the delay

3343
03:00:15,279 --> 03:00:18,960
of the delay between the the built-ins

3344
03:00:18,960 --> 03:00:22,080
issued by the the vendors and

3345
03:00:22,080 --> 03:00:25,439
the nvidia database so it could be

3346
03:00:25,439 --> 03:00:28,479
um a relevant

3347
03:00:28,479 --> 03:00:31,439
a big delay between this these two

3348
03:00:31,439 --> 03:00:32,960
fields of

3349
03:00:32,960 --> 03:00:36,399
information so we are working hard to uh

3350
03:00:36,399 --> 03:00:39,840
to make connect the integration with

3351
03:00:39,840 --> 03:00:44,720
most of them and all advisory button

3352
03:00:45,200 --> 03:00:48,479
if the the word would be

3353
03:00:48,479 --> 03:00:52,080
very very easier to to use if

3354
03:00:52,080 --> 03:00:55,439
all vendors have a single way to

3355
03:00:55,439 --> 03:00:59,760
to to share their their variability

3356
03:00:59,760 --> 03:01:02,319
it's a it could be a very very very good

3357
03:01:02,319 --> 03:01:03,040
idea

3358
03:01:03,040 --> 03:01:06,000
for us but for all the community we have

3359
03:01:06,000 --> 03:01:06,319
to

3360
03:01:06,319 --> 03:01:09,359
because basically we every

3361
03:01:09,359 --> 03:01:12,880
i.t corporation every corporation every

3362
03:01:12,880 --> 03:01:16,160
teams have to manage a lot of

3363
03:01:16,160 --> 03:01:20,399
gravity we just don't have always the

3364
03:01:20,399 --> 03:01:24,000
only the cisco product or only

3365
03:01:24,000 --> 03:01:27,200
with that of a product we always

3366
03:01:27,200 --> 03:01:29,840
have to manage with a lot of

3367
03:01:29,840 --> 03:01:33,120
technologies and vendors

3368
03:01:33,120 --> 03:01:36,640
is but this is no there is no major

3369
03:01:36,640 --> 03:01:40,319
uh major style standard to to manage

3370
03:01:40,319 --> 03:01:40,880
this

3371
03:01:40,880 --> 03:01:44,800
we have a lot of initiative but this is

3372
03:01:44,800 --> 03:01:49,120
there is no leading part

3373
03:01:49,120 --> 03:01:53,680
we don't support sso at the moment um

3374
03:01:53,680 --> 03:01:56,479
we only focus on cv and well-known

3375
03:01:56,479 --> 03:01:57,520
variabilities

3376
03:01:57,520 --> 03:02:01,760
we we know

3377
03:02:01,760 --> 03:02:05,040
because we are european we are french we

3378
03:02:05,040 --> 03:02:07,200
the the main source of information is

3379
03:02:07,200 --> 03:02:08,479
the the cve

3380
03:02:08,479 --> 03:02:11,760
from the in the nvda inviter but

3381
03:02:11,760 --> 03:02:14,640
we have a lot of reality coming from the

3382
03:02:14,640 --> 03:02:17,040
the chinese the

3383
03:02:17,040 --> 03:02:20,240
the chinese and the japanese

3384
03:02:20,240 --> 03:02:23,920
community so a good idea could be uh

3385
03:02:23,920 --> 03:02:27,439
integrated the the cnvd the tnt

3386
03:02:27,439 --> 03:02:30,000
vulnerabilities and the the

3387
03:02:30,000 --> 03:02:34,080
gp and e variabilities into a single uh

3388
03:02:34,080 --> 03:02:36,960
a single platform because the language

3389
03:02:36,960 --> 03:02:44,319
is not a problem today so

3390
03:02:44,319 --> 03:02:47,680
this is the the final part

3391
03:02:47,680 --> 03:02:49,600
just i just want to share about the how

3392
03:02:49,600 --> 03:02:50,800
to prioritize

3393
03:02:50,800 --> 03:02:53,279
the dominarity the i think the the most

3394
03:02:53,279 --> 03:02:53,920
important

3395
03:02:53,920 --> 03:02:57,880
thing is to to focus on the

3396
03:02:57,880 --> 03:03:02,880
contextualization of the the data and

3397
03:03:03,040 --> 03:03:06,160
and to support it with automated with

3398
03:03:06,160 --> 03:03:07,120
automated

3399
03:03:07,120 --> 03:03:11,040
scan i think it's it's a good idea to do

3400
03:03:11,040 --> 03:03:12,160
it efficiently

3401
03:03:12,160 --> 03:03:16,399
how to do it simply and efficiently

3402
03:03:16,399 --> 03:03:20,080
we we have we have

3403
03:03:20,080 --> 03:03:23,279
i coded and shared the

3404
03:03:23,279 --> 03:03:26,319
patrol that was here which is an gpl

3405
03:03:26,319 --> 03:03:31,120
v3 license it's basically

3406
03:03:31,120 --> 03:03:34,560
designed for for around

3407
03:03:34,560 --> 03:03:37,439
an api an okay backhand it's a there is

3408
03:03:37,439 --> 03:03:40,080
already a

3409
03:03:40,080 --> 03:03:43,200
fancy webinar but the first the

3410
03:03:43,200 --> 03:03:46,319
it's very very useful if you use the the

3411
03:03:46,319 --> 03:03:47,600
western camp

3412
03:03:47,600 --> 03:03:51,920
and for us uh it's like a lots of

3413
03:03:51,920 --> 03:03:54,319
open source we have to animate the

3414
03:03:54,319 --> 03:03:55,520
community

3415
03:03:55,520 --> 03:03:58,000
collect some feedbacks is very important

3416
03:03:58,000 --> 03:03:58,720
to to us

3417
03:03:58,720 --> 03:04:01,359
and to facilitate the integration with

3418
03:04:01,359 --> 03:04:03,760
all the tools

3419
03:04:03,760 --> 03:04:06,399
so thank you thank you very much if you

3420
03:04:06,399 --> 03:04:07,200
have

3421
03:04:07,200 --> 03:04:12,000
any questions so please should

3422
03:04:13,279 --> 03:04:16,800
thank you very much for investigation

3423
03:04:20,479 --> 03:04:23,359
we have some time for a quick question

3424
03:04:23,359 --> 03:04:26,960
in the q a if someone wants

3425
03:04:28,080 --> 03:04:32,000
maybe uh i i have one

3426
03:04:32,000 --> 03:04:36,000
no i i don't i don't think i missed it

3427
03:04:36,000 --> 03:04:36,560
but

3428
03:04:36,560 --> 03:04:39,520
um well you did not explain in this

3429
03:04:39,520 --> 03:04:40,240
presentation

3430
03:04:40,240 --> 03:04:43,359
how to uh inject

3431
03:04:43,359 --> 03:04:46,800
the data from your

3432
03:04:46,800 --> 03:04:50,560
your assets i mean uh i guess there is

3433
03:04:50,560 --> 03:04:53,600
another product that will be used to

3434
03:04:53,600 --> 03:04:55,760
scan the

3435
03:04:55,760 --> 03:04:59,279
diet systems and

3436
03:04:59,279 --> 03:05:02,960
to populate your asset

3437
03:05:02,960 --> 03:05:06,960
assets database yes

3438
03:05:06,960 --> 03:05:08,560
thank you for the participation it's

3439
03:05:08,560 --> 03:05:10,640
very very operational

3440
03:05:10,640 --> 03:05:13,920
yes of course you can the the biggest

3441
03:05:13,920 --> 03:05:16,800
part of

3442
03:05:16,800 --> 03:05:19,439
of the the user is to know about their

3443
03:05:19,439 --> 03:05:20,160
assets

3444
03:05:20,160 --> 03:05:22,560
which are the vendors and technologies

3445
03:05:22,560 --> 03:05:23,680
they have

3446
03:05:23,680 --> 03:05:27,439
into their so if you know it

3447
03:05:27,439 --> 03:05:30,880
you can just say select

3448
03:05:30,880 --> 03:05:35,200
select and justify the the technologies

3449
03:05:35,200 --> 03:05:39,200
we also provide another tool which is

3450
03:05:39,200 --> 03:05:40,160
battle manager

3451
03:05:40,160 --> 03:05:43,600
petrol manager is a another open source

3452
03:05:43,600 --> 03:05:48,240
project which is a second framework

3453
03:05:48,240 --> 03:05:52,160
with this framework you can activate

3454
03:05:52,160 --> 03:05:55,920
the inventory so

3455
03:05:56,080 --> 03:06:00,000
you can

3456
03:06:00,000 --> 03:06:03,279
you can identify the the technologies

3457
03:06:03,279 --> 03:06:03,840
you have

3458
03:06:03,840 --> 03:06:07,359
in your uit system using the the scams

3459
03:06:07,359 --> 03:06:10,800
and then inject it with uh with

3460
03:06:10,800 --> 03:06:12,479
that into the the patrol here's

3461
03:06:12,479 --> 03:06:14,720
monitoring system

3462
03:06:14,720 --> 03:06:17,200
at the moment this this integration is

3463
03:06:17,200 --> 03:06:17,920
not

3464
03:06:17,920 --> 03:06:21,359
is not done it's not a pro prediction

3465
03:06:21,359 --> 03:06:24,880
no it's just it's it is not

3466
03:06:24,880 --> 03:06:28,479
coded at the other time worked as well

3467
03:06:28,479 --> 03:06:31,760
yes work in progress

3468
03:06:32,000 --> 03:06:35,920
but yes but if you have the

3469
03:06:35,920 --> 03:06:39,840
the exhaustive list of technologies

3470
03:06:39,840 --> 03:06:44,399
you can use the api or just inject it

3471
03:06:44,399 --> 03:06:47,760
in in bulk using the cvss

3472
03:06:47,760 --> 03:06:52,560
file but at the moment we don't have the

3473
03:06:52,560 --> 03:06:55,279
the big integration between the inform

3474
03:06:55,279 --> 03:06:56,640
the inventory

3475
03:06:56,640 --> 03:07:00,560
system or the cmdb or or any

3476
03:07:00,560 --> 03:07:03,680
inventory system to

3477
03:07:03,680 --> 03:07:07,200
to to populate the the technology to

3478
03:07:07,200 --> 03:07:08,000
monitor

3479
03:07:08,000 --> 03:07:11,520
into pathogens okay

3480
03:07:11,520 --> 03:07:13,840
thanks

3481
03:07:16,160 --> 03:07:19,439
i guess thanks again um times is running

3482
03:07:19,439 --> 03:07:20,479
so we will

3483
03:07:20,479 --> 03:07:23,760
move to the next one thank you very much

3484
03:07:23,760 --> 03:07:27,200
thanks again for presentation

3485
03:07:32,640 --> 03:07:37,200
and we will welcome nickelham

3486
03:07:37,200 --> 03:07:40,960
hello can you hear me and see me

3487
03:07:41,120 --> 03:07:44,960
yes hello so mikhail will show us a few

3488
03:07:44,960 --> 03:07:46,319
forensics demos

3489
03:07:46,319 --> 03:07:49,439
where things don't always go as expected

3490
03:07:49,439 --> 03:07:51,040
again it's working on foreign six

3491
03:07:51,040 --> 03:07:52,880
incense response at circle

3492
03:07:52,880 --> 03:07:54,800
the computer it sends response center

3493
03:07:54,800 --> 03:07:57,200
and luxembourg

3494
03:07:57,200 --> 03:07:59,520
so the floor is yours you can share in

3495
03:07:59,520 --> 03:08:01,520
screen

3496
03:08:01,520 --> 03:08:05,439
you see my desktop too yeah

3497
03:08:05,439 --> 03:08:08,880
perfect uh so

3498
03:08:08,880 --> 03:08:12,000
hello i'm michael from circle circle is

3499
03:08:12,000 --> 03:08:12,640
at set

3500
03:08:12,640 --> 03:08:15,359
in luxembourg and it plays also a role

3501
03:08:15,359 --> 03:08:18,960
in the national thought of luxembourg

3502
03:08:18,960 --> 03:08:22,319
and yes today i prepare

3503
03:08:22,319 --> 03:08:25,760
some live demos in fact at the end i

3504
03:08:25,760 --> 03:08:29,840
choose two of them um

3505
03:08:29,840 --> 03:08:32,880
because this time is quite close

3506
03:08:32,880 --> 03:08:36,720
and i like to show it precisely

3507
03:08:36,720 --> 03:08:40,800
so let's start with the first demo

3508
03:08:40,800 --> 03:08:43,279
which i called modify data on a

3509
03:08:43,279 --> 03:08:44,479
read-only mounted

3510
03:08:44,479 --> 03:08:49,840
device so what's the story behind

3511
03:08:49,840 --> 03:08:53,120
once a day i read another forensic books

3512
03:08:53,120 --> 03:08:55,920
and in this book the author stated if

3513
03:08:55,920 --> 03:08:58,000
you work with evidence you need

3514
03:08:58,000 --> 03:09:01,439
a hardware write blocker don't rely on

3515
03:09:01,439 --> 03:09:02,000
software

3516
03:09:02,000 --> 03:09:05,520
write blocker nothing will prevent your

3517
03:09:05,520 --> 03:09:06,880
linux system from

3518
03:09:06,880 --> 03:09:09,760
modifying data if the device is mounted

3519
03:09:09,760 --> 03:09:12,160
read only

3520
03:09:12,160 --> 03:09:15,279
with this i feel challenged

3521
03:09:15,279 --> 03:09:18,319
so i erased the idea to develop a small

3522
03:09:18,319 --> 03:09:23,520
exercise where i simulate an attack

3523
03:09:23,520 --> 03:09:26,399
where i simulate targeted where to

3524
03:09:26,399 --> 03:09:27,040
modify

3525
03:09:27,040 --> 03:09:29,359
targeted data on the evidence which

3526
03:09:29,359 --> 03:09:32,479
amounted read only

3527
03:09:32,479 --> 03:09:35,920
so what i will use

3528
03:09:35,920 --> 03:09:39,279
is my linux linux onboard tools

3529
03:09:39,279 --> 03:09:43,520
and i will be root

3530
03:09:43,600 --> 03:09:45,840
and of course it's a little trick i'm

3531
03:09:45,840 --> 03:09:47,279
curious

3532
03:09:47,279 --> 03:09:50,560
who how how fast it take until you first

3533
03:09:50,560 --> 03:09:53,760
discover the trick but i will not cheat

3534
03:09:53,760 --> 03:09:54,239
yes

3535
03:09:54,239 --> 03:09:56,640
i'm rude i will not remount the file

3536
03:09:56,640 --> 03:09:57,520
system

3537
03:09:57,520 --> 03:09:59,760
in read write mode so this is not the

3538
03:09:59,760 --> 03:10:02,080
trick

3539
03:10:03,200 --> 03:10:07,200
um so yes i prepare a small

3540
03:10:07,200 --> 03:10:10,319
play script how it could look

3541
03:10:10,319 --> 03:10:12,560
so there will be too fast the first fast

3542
03:10:12,560 --> 03:10:14,080
will be the preparation

3543
03:10:14,080 --> 03:10:16,640
where i connect my usb stick where i

3544
03:10:16,640 --> 03:10:18,880
remount the usb stick

3545
03:10:18,880 --> 03:10:21,279
in read-only mode and where i prove that

3546
03:10:21,279 --> 03:10:23,520
i cannot modify the data anymore on the

3547
03:10:23,520 --> 03:10:24,560
literal

3548
03:10:24,560 --> 03:10:27,760
the legit way and then i will launch the

3549
03:10:27,760 --> 03:10:30,399
attack and the idea of that hug is

3550
03:10:30,399 --> 03:10:33,520
i use strings to search the data i like

3551
03:10:33,520 --> 03:10:34,399
to modify

3552
03:10:34,399 --> 03:10:37,680
on the device then i will

3553
03:10:37,680 --> 03:10:40,080
calculate based on the offset which

3554
03:10:40,080 --> 03:10:41,359
sector the data

3555
03:10:41,359 --> 03:10:44,479
are stored in then i use my favorite

3556
03:10:44,479 --> 03:10:46,960
forensic two ldd

3557
03:10:46,960 --> 03:10:49,120
to copy this sector on my local hard

3558
03:10:49,120 --> 03:10:50,239
drive

3559
03:10:50,239 --> 03:10:52,080
and there i will modify the data and

3560
03:10:52,080 --> 03:10:54,800
then i use dd to copy this data back

3561
03:10:54,800 --> 03:10:58,239
on the device so that's the idea and now

3562
03:10:58,239 --> 03:10:59,520
let's see

3563
03:10:59,520 --> 03:11:02,720
if this can work out it's a live

3564
03:11:02,720 --> 03:11:04,319
exercise what can go wrong

3565
03:11:04,319 --> 03:11:06,720
this morning one of the cheap usb sticks

3566
03:11:06,720 --> 03:11:08,479
already broke

3567
03:11:08,479 --> 03:11:11,600
so i was happy to have time to image a

3568
03:11:11,600 --> 03:11:12,720
new one

3569
03:11:12,720 --> 03:11:17,840
and now i connect it to the pc

3570
03:11:18,160 --> 03:11:21,680
okay it gets recognized it is already

3571
03:11:21,680 --> 03:11:24,560
mounted and we see there is one

3572
03:11:24,560 --> 03:11:27,439
simple text file on it now let's

3573
03:11:27,439 --> 03:11:29,680
investigate how the usb key is

3574
03:11:29,680 --> 03:11:34,239
mounted to my connected to my pc

3575
03:11:34,239 --> 03:11:38,880
so here we see obviously it's device sdc

3576
03:11:38,880 --> 03:11:43,039
with part one partition sdc1

3577
03:11:45,920 --> 03:11:49,760
and it is mounted

3578
03:11:49,840 --> 03:11:54,399
one is mounted at mediamic circle dfir

3579
03:11:54,399 --> 03:11:56,560
it's a farfetched file system and it is

3580
03:11:56,560 --> 03:11:58,080
mounted read write

3581
03:11:58,080 --> 03:12:02,640
so i have to remount it in read-only

3582
03:12:02,840 --> 03:12:05,840
mode

3583
03:12:14,560 --> 03:12:18,640
so now let's test or check if this works

3584
03:12:18,640 --> 03:12:22,560
sdc ions is mounted media michael

3585
03:12:22,560 --> 03:12:25,920
circle dfi error and it's now read only

3586
03:12:25,920 --> 03:12:28,160
so at this point i cannot modify the

3587
03:12:28,160 --> 03:12:29,680
data anymore

3588
03:12:29,680 --> 03:12:33,840
officially so let's test

3589
03:12:45,359 --> 03:12:48,479
it's on the different screen

3590
03:12:51,680 --> 03:12:54,319
so here the data i like to modify i like

3591
03:12:54,319 --> 03:12:57,040
to modify the word hello

3592
03:12:57,040 --> 03:13:00,160
and so i try here five times a but as

3593
03:13:00,160 --> 03:13:01,600
you see

3594
03:13:01,600 --> 03:13:03,520
i cannot save it anymore i can save it

3595
03:13:03,520 --> 03:13:06,319
on a different location

3596
03:13:06,319 --> 03:13:10,319
but i cannot save it anymore it's read

3597
03:13:12,840 --> 03:13:15,840
only

3598
03:13:18,160 --> 03:13:22,399
okay so now it's time to search for the

3599
03:13:24,479 --> 03:13:26,880
it's time to search for the the data on

3600
03:13:26,880 --> 03:13:29,040
the

3601
03:13:29,040 --> 03:13:32,800
on the stick so i make my strings

3602
03:13:32,800 --> 03:13:36,080
i make clear first

3603
03:13:40,840 --> 03:13:43,840
strings

3604
03:13:52,319 --> 03:13:54,800
hello

3605
03:13:55,359 --> 03:13:58,080
so basically what i now do i use the

3606
03:13:58,080 --> 03:13:59,439
tool strings

3607
03:13:59,439 --> 03:14:03,760
to search on stc1 and grab for my

3608
03:14:03,760 --> 03:14:06,800
string hello

3609
03:14:07,359 --> 03:14:10,319
so we found two times the string hello

3610
03:14:10,319 --> 03:14:11,040
world

3611
03:14:11,040 --> 03:14:13,359
at two different offset and when i

3612
03:14:13,359 --> 03:14:15,600
created the file i use the tool

3613
03:14:15,600 --> 03:14:19,120
vi and the toolbi creates a temporary

3614
03:14:19,120 --> 03:14:19,760
file

3615
03:14:19,760 --> 03:14:22,239
and then at the point when i say save it

3616
03:14:22,239 --> 03:14:24,479
creates the real file on the disk

3617
03:14:24,479 --> 03:14:28,080
so this is the offset we have to work

3618
03:14:28,080 --> 03:14:31,279
with so

3619
03:14:31,279 --> 03:14:34,960
this is the offset in bytes

3620
03:14:37,760 --> 03:14:40,800
now i divide this value by 512

3621
03:14:40,800 --> 03:14:44,880
because sectors are usually a 512

3622
03:14:44,880 --> 03:14:49,439
byte size so we have the sector 500

3623
03:14:49,439 --> 03:14:52,960
for 84. this should be the sector where

3624
03:14:52,960 --> 03:14:55,760
our data are lying on the usb stick

3625
03:14:55,760 --> 03:14:59,279
so now my favorite tool dd

3626
03:14:59,279 --> 03:15:02,319
i specified in the

3627
03:15:02,319 --> 03:15:06,960
input device

3628
03:15:06,960 --> 03:15:10,960
and block size is 512

3629
03:15:10,960 --> 03:15:15,439
by default and there is some caps lock

3630
03:15:15,439 --> 03:15:17,680
so

3631
03:15:19,680 --> 03:15:22,319
i skip

3632
03:15:23,120 --> 03:15:26,960
the first 584 sectors

3633
03:15:26,960 --> 03:15:30,000
and then i write

3634
03:15:30,000 --> 03:15:34,160
exactly one sector on the disk as

3635
03:15:34,160 --> 03:15:38,720
file let's call it 584

3636
03:15:38,720 --> 03:15:41,599
dot raw

3637
03:15:43,279 --> 03:15:45,600
so now we have a copy of the sector on

3638
03:15:45,600 --> 03:15:47,279
our local hard drive

3639
03:15:47,279 --> 03:15:49,520
and now i cannot modify this file with a

3640
03:15:49,520 --> 03:15:50,479
text editor

3641
03:15:50,479 --> 03:15:53,040
it's not a text file it's a sector so i

3642
03:15:53,040 --> 03:15:55,439
have to use a

3643
03:15:55,439 --> 03:15:59,600
hex editor for example to modify it

3644
03:16:00,840 --> 03:16:03,840
hexa

3645
03:16:04,000 --> 03:16:10,160
oop so this is our sector

3646
03:16:14,640 --> 03:16:18,640
and here are the data we like to change

3647
03:16:18,640 --> 03:16:22,640
so we change it to 30

3648
03:16:24,080 --> 03:16:28,319
31 32 33 34

3649
03:16:28,319 --> 03:16:31,840
35 and we delete

3650
03:16:33,040 --> 03:16:35,439
the other data now the file don't even

3651
03:16:35,439 --> 03:16:38,560
change in this size

3652
03:16:38,800 --> 03:16:41,759
write it to disk

3653
03:16:43,439 --> 03:16:47,200
and yes it's exactly the same

3654
03:16:49,040 --> 03:16:51,520
so now let's use td to write it back so

3655
03:16:51,520 --> 03:16:54,399
i tell you d the input file

3656
03:16:54,399 --> 03:17:00,800
is our sector the block size is 512.

3657
03:17:00,800 --> 03:17:04,239
we skip

3658
03:17:04,399 --> 03:17:07,278
584

3659
03:17:07,520 --> 03:17:12,080
sectors and write exactly one sector on

3660
03:17:12,080 --> 03:17:13,520
the disk

3661
03:17:13,520 --> 03:17:15,680
and rewrite it too and now this is a

3662
03:17:15,680 --> 03:17:17,439
little bit critical because you can

3663
03:17:17,439 --> 03:17:19,040
destroy your hard drive a little bit

3664
03:17:19,040 --> 03:17:21,439
with it

3665
03:17:24,840 --> 03:17:27,840
fsdc1

3666
03:17:30,080 --> 03:17:33,439
i hope it works let's see what change

3667
03:17:33,439 --> 03:17:36,080
on the file

3668
03:17:36,880 --> 03:17:39,279
okay what do we see we see still the

3669
03:17:39,279 --> 03:17:40,239
words hello

3670
03:17:40,239 --> 03:17:44,640
so maybe it don't work finally but wait

3671
03:17:44,640 --> 03:17:46,880
couldn't it be that this modification is

3672
03:17:46,880 --> 03:17:49,359
so hot that the file system

3673
03:17:49,359 --> 03:17:51,920
not realize it and provide us some file

3674
03:17:51,920 --> 03:17:53,760
out of the cache

3675
03:17:53,760 --> 03:17:58,880
so let's throw out the usb stick

3676
03:17:59,359 --> 03:18:02,319
i connect it back

3677
03:18:06,960 --> 03:18:10,319
we have our file we open it

3678
03:18:10,319 --> 03:18:12,399
and voila now we have one two three four

3679
03:18:12,399 --> 03:18:14,239
five world

3680
03:18:14,239 --> 03:18:16,479
so we successfully modify the data on

3681
03:18:16,479 --> 03:18:17,840
the usb stick

3682
03:18:17,840 --> 03:18:23,840
even if it was mounted read only

3683
03:18:25,120 --> 03:18:27,200
all the commands are in the slides so

3684
03:18:27,200 --> 03:18:29,520
you can reproduce this exercise on your

3685
03:18:29,520 --> 03:18:32,239
own later on

3686
03:18:34,160 --> 03:18:36,479
i try some different commands to block

3687
03:18:36,479 --> 03:18:38,880
or to stop this behavior

3688
03:18:38,880 --> 03:18:42,399
uh basically nothing else at the end

3689
03:18:42,399 --> 03:18:45,040
i try some forensic linux distributions

3690
03:18:45,040 --> 03:18:45,520
like

3691
03:18:45,520 --> 03:18:50,720
kali linux or sunsift or deft dfir

3692
03:18:50,720 --> 03:18:53,359
some of them don't automatically mount

3693
03:18:53,359 --> 03:18:55,200
the disk some of them only mounted in

3694
03:18:55,200 --> 03:18:56,560
read-only mode but

3695
03:18:56,560 --> 03:18:59,279
modifying the data was all possible on

3696
03:18:59,279 --> 03:18:59,840
all the

3697
03:18:59,840 --> 03:19:03,680
distributions so my advice

3698
03:19:03,680 --> 03:19:07,359
use hardware right blocker

3699
03:19:07,920 --> 03:19:10,399
okay

3700
03:19:12,720 --> 03:19:16,479
so the next exercise

3701
03:19:16,479 --> 03:19:19,279
i like to show is called my name is

3702
03:19:19,279 --> 03:19:20,479
legion

3703
03:19:20,479 --> 03:19:24,640
and here i prepare another usb stick

3704
03:19:24,640 --> 03:19:28,800
so click off this usb stick and take the

3705
03:19:28,800 --> 03:19:31,200
next one i connect it to my linux

3706
03:19:31,200 --> 03:19:33,840
machine

3707
03:19:37,760 --> 03:19:40,720
and we have a usb stick mounted with

3708
03:19:40,720 --> 03:19:41,040
three

3709
03:19:41,040 --> 03:19:43,600
text files on it so take a look what do

3710
03:19:43,600 --> 03:19:46,800
we have inside this text files

3711
03:19:46,800 --> 03:19:50,319
we have we have

3712
03:19:50,319 --> 03:19:53,119
hello world

3713
03:19:53,680 --> 03:19:57,600
we have another ascii art

3714
03:19:57,600 --> 03:20:01,840
and we have another ascii art

3715
03:20:02,080 --> 03:20:06,479
nice so let's close this

3716
03:20:06,479 --> 03:20:10,399
and now i do something else

3717
03:20:10,640 --> 03:20:13,040
i take my window circular machine and i

3718
03:20:13,040 --> 03:20:16,239
connect the usb stick

3719
03:20:16,239 --> 03:20:19,680
to this windows virtual machine

3720
03:20:19,680 --> 03:20:23,040
so it disappears from my linux box and

3721
03:20:23,040 --> 03:20:27,680
now is popping up on the windows machine

3722
03:20:27,680 --> 03:20:31,760
so what do we have here we have our usb

3723
03:20:31,760 --> 03:20:33,760
stick we have our three text files

3724
03:20:33,760 --> 03:20:36,319
text one two three and now i tell you

3725
03:20:36,319 --> 03:20:37,520
this happens to me

3726
03:20:37,520 --> 03:20:39,200
at one day when i was preparing a

3727
03:20:39,200 --> 03:20:41,040
training and i have exactly this

3728
03:20:41,040 --> 03:20:43,680
behavior

3729
03:20:43,680 --> 03:20:48,399
and now the content change

3730
03:20:49,840 --> 03:20:52,239
oops

3731
03:20:53,120 --> 03:20:57,359
so past the salt begin of text

3732
03:20:57,359 --> 03:21:01,840
one file past result 2021

3733
03:21:01,840 --> 03:21:06,720
begin of text two isn't this spooky

3734
03:21:08,000 --> 03:21:09,760
you can imagine how i look when i saw

3735
03:21:09,760 --> 03:21:12,479
this behavior

3736
03:21:15,840 --> 03:21:19,680
okay connect it back to the linux

3737
03:21:30,160 --> 03:21:33,760
and here is our ascii art again

3738
03:21:35,520 --> 03:21:37,760
so it's time to start analyzing what's

3739
03:21:37,760 --> 03:21:40,319
going on

3740
03:21:44,239 --> 03:21:46,080
so let's first check how the stick is

3741
03:21:46,080 --> 03:21:47,279
connected to the

3742
03:21:47,279 --> 03:21:51,200
linux machine it's again

3743
03:21:51,200 --> 03:21:55,680
device sdc1 so this looks

3744
03:21:55,680 --> 03:21:59,760
okay now let's see how it is mounted

3745
03:21:59,760 --> 03:22:02,880
okay we have device sdc1

3746
03:22:02,880 --> 03:22:08,800
mounted as media michael cyber day 2020

3747
03:22:08,800 --> 03:22:12,479
oh looks good so far clear

3748
03:22:12,479 --> 03:22:14,160
okay let's take a look maybe at the

3749
03:22:14,160 --> 03:22:21,840
partition table

3750
03:22:32,840 --> 03:22:35,840
oh

3751
03:22:36,800 --> 03:22:38,960
so the tool f disk find the partition

3752
03:22:38,960 --> 03:22:40,800
table which starts

3753
03:22:40,800 --> 03:22:44,399
at the sector which is a very slow just

3754
03:22:44,399 --> 03:22:48,000
57 megabytes or it's a slow partition

3755
03:22:48,000 --> 03:22:50,800
makes me sense to have a slow partition

3756
03:22:50,800 --> 03:22:53,120
on the usb stick

3757
03:22:53,120 --> 03:22:54,880
okay there's another tool to read the

3758
03:22:54,880 --> 03:22:56,319
partition table

3759
03:22:56,319 --> 03:23:00,640
mmls let's test what this tool says

3760
03:23:00,640 --> 03:23:04,160
oh okay i should

3761
03:23:10,800 --> 03:23:13,920
hola at this tool fail to read

3762
03:23:13,920 --> 03:23:16,239
the partition table this is interesting

3763
03:23:16,239 --> 03:23:18,000
because this is a

3764
03:23:18,000 --> 03:23:19,920
very well-known tool to be partition

3765
03:23:19,920 --> 03:23:21,279
tables

3766
03:23:21,279 --> 03:23:24,560
fmls so if this tool fail

3767
03:23:24,560 --> 03:23:28,080
um i have a problem then something is

3768
03:23:28,080 --> 03:23:28,960
definitively

3769
03:23:28,960 --> 03:23:31,839
wrong

3770
03:23:32,319 --> 03:23:35,040
and what i like to show you with this

3771
03:23:35,040 --> 03:23:37,600
small exercise is you cannot only rely

3772
03:23:37,600 --> 03:23:40,000
on your tools at one point when there is

3773
03:23:40,000 --> 03:23:41,520
something special

3774
03:23:41,520 --> 03:23:44,000
the tools will start failing and then

3775
03:23:44,000 --> 03:23:45,359
you must be able

3776
03:23:45,359 --> 03:23:48,960
to read bytes on a byte level

3777
03:23:48,960 --> 03:23:51,520
bytes and words to understand what's

3778
03:23:51,520 --> 03:23:52,720
going on

3779
03:23:52,720 --> 03:23:55,200
okay i will now explain you what's going

3780
03:23:55,200 --> 03:23:58,720
on here in this case

3781
03:23:58,720 --> 03:24:02,239
so let's check first the linux the

3782
03:24:02,239 --> 03:24:04,399
windows version

3783
03:24:04,399 --> 03:24:08,479
and our analyze steps

3784
03:24:08,479 --> 03:24:10,319
and now to understand what's going on i

3785
03:24:10,319 --> 03:24:12,160
like to go back to something which

3786
03:24:12,160 --> 03:24:14,960
maybe some of you don't see for a long

3787
03:24:14,960 --> 03:24:16,000
time

3788
03:24:16,000 --> 03:24:18,319
this is called the discard this

3789
03:24:18,319 --> 03:24:20,960
successor of the floppy disk

3790
03:24:20,960 --> 03:24:23,760
depending on the modulation you can

3791
03:24:23,760 --> 03:24:24,279
store

3792
03:24:24,279 --> 03:24:28,000
770 bytes or 147

3793
03:24:28,000 --> 03:24:31,359
40 bytes on it and then it depends how

3794
03:24:31,359 --> 03:24:32,080
you format

3795
03:24:32,080 --> 03:24:35,680
this this cat but when you format

3796
03:24:35,680 --> 03:24:38,080
this cat with a file system it was most

3797
03:24:38,080 --> 03:24:40,000
common that the first sector

3798
03:24:40,000 --> 03:24:43,279
on those discard the sector 0 is called

3799
03:24:43,279 --> 03:24:46,239
the boot sector

3800
03:24:46,239 --> 03:24:50,560
let's take a look in an easy boot sector

3801
03:24:52,080 --> 03:24:54,000
this is in boot sector which is easy

3802
03:24:54,000 --> 03:24:56,080
because it is the boot sector of a disk

3803
03:24:56,080 --> 03:24:56,800
which is not

3804
03:24:56,800 --> 03:25:00,960
bootable so this boot sector contains

3805
03:25:00,960 --> 03:25:01,520
some

3806
03:25:01,520 --> 03:25:04,640
metadata describing the disk

3807
03:25:04,640 --> 03:25:07,359
so for example the label and stuff like

3808
03:25:07,359 --> 03:25:08,239
this

3809
03:25:08,239 --> 03:25:11,760
and it have some boot code

3810
03:25:12,080 --> 03:25:14,720
and this boot code in this case because

3811
03:25:14,720 --> 03:25:17,120
those disk is not bootable

3812
03:25:17,120 --> 03:25:19,840
just have one activity to do display the

3813
03:25:19,840 --> 03:25:20,560
text

3814
03:25:20,560 --> 03:25:24,160
this is not a bootable disk that's all

3815
03:25:24,160 --> 03:25:26,080
maybe you remember on all times when you

3816
03:25:26,080 --> 03:25:27,840
start to boot pc

3817
03:25:27,840 --> 03:25:30,399
with a not bootable disk you see this

3818
03:25:30,399 --> 03:25:32,000
message this error message

3819
03:25:32,000 --> 03:25:35,279
and maybe a peep tool

3820
03:25:35,359 --> 03:25:38,640
the interesting thing at this boot

3821
03:25:38,640 --> 03:25:40,560
sector

3822
03:25:40,560 --> 03:25:43,600
is that after the hive of the value

3823
03:25:43,600 --> 03:25:46,319
after 250 byte

3824
03:25:46,319 --> 03:25:49,439
an average it starts to be empty there

3825
03:25:49,439 --> 03:25:50,000
are only

3826
03:25:50,000 --> 03:25:53,520
zeros until the end of the boot sector

3827
03:25:53,520 --> 03:25:55,359
which have a signature

3828
03:25:55,359 --> 03:25:58,319
55aa

3829
03:26:01,120 --> 03:26:04,000
so boot code at the beginning the second

3830
03:26:04,000 --> 03:26:07,600
half of the boot sector is empty

3831
03:26:08,319 --> 03:26:10,880
then at one point the disks got replaced

3832
03:26:10,880 --> 03:26:12,080
by

3833
03:26:12,080 --> 03:26:14,720
hard drives and usb sticks which became

3834
03:26:14,720 --> 03:26:17,040
more bigger

3835
03:26:17,040 --> 03:26:20,560
and what you have to know is you still

3836
03:26:20,560 --> 03:26:20,960
can

3837
03:26:20,960 --> 03:26:24,080
format drives like this

3838
03:26:24,080 --> 03:26:27,200
old style without partitions but since

3839
03:26:27,200 --> 03:26:28,880
the drives become more bigger

3840
03:26:28,880 --> 03:26:31,040
people like to have more partitions on

3841
03:26:31,040 --> 03:26:32,479
one physical disk

3842
03:26:32,479 --> 03:26:34,880
yes you like to have the separate route

3843
03:26:34,880 --> 03:26:36,800
partition as a parade uh

3844
03:26:36,800 --> 03:26:40,640
var partition and separate

3845
03:26:40,640 --> 03:26:43,920
i don't know etc partition and so on and

3846
03:26:43,920 --> 03:26:46,160
so on

3847
03:26:46,160 --> 03:26:48,640
so you need to have the concept of

3848
03:26:48,640 --> 03:26:50,239
partitions

3849
03:26:50,239 --> 03:26:51,680
and how does it looks you have the

3850
03:26:51,680 --> 03:26:54,000
partitions on your disk

3851
03:26:54,000 --> 03:26:57,120
and each partition consists of the

3852
03:26:57,120 --> 03:26:59,600
volume boot record which is basically

3853
03:26:59,600 --> 03:27:02,640
the boot sector

3854
03:27:03,680 --> 03:27:07,279
and describing the file system on the

3855
03:27:07,279 --> 03:27:08,720
partition

3856
03:27:08,720 --> 03:27:10,960
you have maybe some unused space in

3857
03:27:10,960 --> 03:27:12,880
between and at the end

3858
03:27:12,880 --> 03:27:15,279
and in between and at the first sector

3859
03:27:15,279 --> 03:27:16,960
at the disk you have something new which

3860
03:27:16,960 --> 03:27:17,520
is called

3861
03:27:17,520 --> 03:27:20,880
the master boot record

3862
03:27:21,760 --> 03:27:23,439
and the most important things of this

3863
03:27:23,439 --> 03:27:26,720
faster boot record is

3864
03:27:27,120 --> 03:27:30,080
first of all defining where do the

3865
03:27:30,080 --> 03:27:31,439
partitions start

3866
03:27:31,439 --> 03:27:34,160
and how much sector it use where do the

3867
03:27:34,160 --> 03:27:36,640
partition start how much sector i use

3868
03:27:36,640 --> 03:27:39,120
the second thing is describes is this

3869
03:27:39,120 --> 03:27:40,640
partition bootable

3870
03:27:40,640 --> 03:27:45,840
or not and

3871
03:27:46,560 --> 03:27:49,520
yes it must also in case if this disk is

3872
03:27:49,520 --> 03:27:50,000
a boot

3873
03:27:50,000 --> 03:27:53,040
disk it must execute some boot code

3874
03:27:53,040 --> 03:27:56,000
which basically read the partition table

3875
03:27:56,000 --> 03:27:56,720
and jump

3876
03:27:56,720 --> 03:27:58,560
to the first sector of the bootable

3877
03:27:58,560 --> 03:28:01,520
partition and handle over the execution

3878
03:28:01,520 --> 03:28:04,640
to this place

3879
03:28:04,640 --> 03:28:08,720
so now let's look to the next slide

3880
03:28:08,720 --> 03:28:12,479
where i have a master boot record of a

3881
03:28:12,479 --> 03:28:15,439
disk which is not bootable of a my usb

3882
03:28:15,439 --> 03:28:16,720
stick which is

3883
03:28:16,720 --> 03:28:21,200
just a data just a data

3884
03:28:21,200 --> 03:28:23,840
stick and this data stick do not need

3885
03:28:23,840 --> 03:28:25,840
any kind of boot

3886
03:28:25,840 --> 03:28:29,040
code it only needs a partition table

3887
03:28:29,040 --> 03:28:32,960
and maybe some labels so

3888
03:28:32,960 --> 03:28:36,000
the partition stable table start at the

3889
03:28:36,000 --> 03:28:36,640
end

3890
03:28:36,640 --> 03:28:39,760
of the master boot record from here

3891
03:28:39,760 --> 03:28:42,319
to here and here you have the signature

3892
03:28:42,319 --> 03:28:43,600
again it's the same

3893
03:28:43,600 --> 03:28:46,640
like for the boot sector so this

3894
03:28:46,640 --> 03:28:49,840
64 bytes are

3895
03:28:49,840 --> 03:28:53,279
the partition table and here is space

3896
03:28:53,279 --> 03:28:56,080
for exactly four entries for four

3897
03:28:56,080 --> 03:28:59,040
primary partitions

3898
03:28:59,040 --> 03:29:01,359
the first primary partition is defined

3899
03:29:01,359 --> 03:29:02,319
from here

3900
03:29:02,319 --> 03:29:07,279
to here and here you have the value

3901
03:29:07,279 --> 03:29:09,520
where the partitions start and how much

3902
03:29:09,520 --> 03:29:11,279
sectors

3903
03:29:11,279 --> 03:29:15,439
it need to use and as you see the second

3904
03:29:15,439 --> 03:29:17,760
the third and the fourth partition table

3905
03:29:17,760 --> 03:29:19,040
entry are empty

3906
03:29:19,040 --> 03:29:22,000
so we have our first partition here this

3907
03:29:22,000 --> 03:29:23,840
o7 for example

3908
03:29:23,840 --> 03:29:26,000
tells the operating system that this is

3909
03:29:26,000 --> 03:29:27,200
a

3910
03:29:27,200 --> 03:29:31,200
ntfs partition

3911
03:29:32,720 --> 03:29:35,200
and this zero zero tells that it is not

3912
03:29:35,200 --> 03:29:36,640
bootable

3913
03:29:36,640 --> 03:29:39,279
so but let's go to the next step now

3914
03:29:39,279 --> 03:29:42,160
what i now did is i take the usb stick

3915
03:29:42,160 --> 03:29:46,800
and formatted it as a unpartitioned

3916
03:29:46,800 --> 03:29:50,000
usb stick with the volume boot record at

3917
03:29:50,000 --> 03:29:51,200
the beginning

3918
03:29:51,200 --> 03:29:54,960
then i created my three files

3919
03:29:55,040 --> 03:29:58,239
and then manually with the hex editor i

3920
03:29:58,239 --> 03:29:59,920
add

3921
03:29:59,920 --> 03:30:03,359
a tissue table entry

3922
03:30:03,359 --> 03:30:07,120
i add a partition table entry

3923
03:30:07,359 --> 03:30:10,960
at the good location and this partition

3924
03:30:10,960 --> 03:30:13,680
table entry defines a partition at this

3925
03:30:13,680 --> 03:30:17,359
place on the disk

3926
03:30:17,359 --> 03:30:20,720
and now i can format this partition

3927
03:30:20,720 --> 03:30:21,279
table

3928
03:30:21,279 --> 03:30:24,000
to this partition with ntfs and i can

3929
03:30:24,000 --> 03:30:24,800
create

3930
03:30:24,800 --> 03:30:27,920
three files on it

3931
03:30:28,399 --> 03:30:31,439
and now i totally depends on the file

3932
03:30:31,439 --> 03:30:33,120
system

3933
03:30:33,120 --> 03:30:34,880
uh under on the computer on the

3934
03:30:34,880 --> 03:30:37,279
operating system on the software

3935
03:30:37,279 --> 03:30:39,600
it depends do it read the master boot

3936
03:30:39,600 --> 03:30:41,760
record value the partition table

3937
03:30:41,760 --> 03:30:45,359
and access the partition or do it use

3938
03:30:45,359 --> 03:30:46,640
the boot sector

3939
03:30:46,640 --> 03:30:50,239
and access this area of the disk

3940
03:30:50,239 --> 03:30:53,279
so that's the magic

3941
03:30:53,279 --> 03:30:57,200
so i'm quite in time so

3942
03:30:57,200 --> 03:30:59,920
there's also some space for question and

3943
03:30:59,920 --> 03:31:01,439
answers

3944
03:31:01,439 --> 03:31:05,680
if they appear

3945
03:31:08,000 --> 03:31:13,840
thank you very much oh thank you

3946
03:31:14,880 --> 03:31:17,680
there are a few questions on the q a i

3947
03:31:17,680 --> 03:31:18,640
don't know if you can

3948
03:31:18,640 --> 03:31:21,120
see it by yourself otherwise here's the

3949
03:31:21,120 --> 03:31:23,520
question

3950
03:31:24,800 --> 03:31:28,160
i okay axle is asking what happens if

3951
03:31:28,160 --> 03:31:32,000
your file is spanning on several sectors

3952
03:31:32,000 --> 03:31:35,200
uh can you repeat please

3953
03:31:35,680 --> 03:31:37,920
what happens if your file is spanning on

3954
03:31:37,920 --> 03:31:41,840
several sectors

3955
03:31:42,000 --> 03:31:45,200
maybe that was related to a

3956
03:31:45,200 --> 03:31:48,880
specific moment of the presentation

3957
03:31:50,000 --> 03:31:55,840
what is a good question is

3958
03:31:56,000 --> 03:31:58,560
how do they core exist those two file

3959
03:31:58,560 --> 03:31:59,200
systems

3960
03:31:59,200 --> 03:32:02,399
on one disk um the point is

3961
03:32:02,399 --> 03:32:06,000
this volume is not aware if you read the

3962
03:32:06,000 --> 03:32:08,080
volume bootrecord you are not aware

3963
03:32:08,080 --> 03:32:09,920
that there is another partition you

3964
03:32:09,920 --> 03:32:11,680
don't know it and if you fill up the

3965
03:32:11,680 --> 03:32:13,359
disk with data

3966
03:32:13,359 --> 03:32:17,200
at one point you override this

3967
03:32:17,200 --> 03:32:22,720
data because the volume

3968
03:32:22,720 --> 03:32:24,640
as is don't know that there is a

3969
03:32:24,640 --> 03:32:26,560
partition if you only read the volume

3970
03:32:26,560 --> 03:32:27,840
boot record

3971
03:32:27,840 --> 03:32:30,479
if you only read the master boot record

3972
03:32:30,479 --> 03:32:32,160
then you have full access to this

3973
03:32:32,160 --> 03:32:32,880
partition

3974
03:32:32,880 --> 03:32:34,800
you can fill it up from the beginning to

3975
03:32:34,800 --> 03:32:37,840
the end

3976
03:32:40,720 --> 03:32:42,880
yeah well i think the question was

3977
03:32:42,880 --> 03:32:44,239
related to the first

3978
03:32:44,239 --> 03:32:47,600
demo oh okay

3979
03:32:48,800 --> 03:32:50,800
but i don't understand the question then

3980
03:32:50,800 --> 03:32:52,960
can

3981
03:32:53,600 --> 03:32:57,200
yeah i guess even if the file is uh

3982
03:32:57,200 --> 03:33:00,399
is uh consists of several sectors the

3983
03:33:00,399 --> 03:33:01,439
strings command

3984
03:33:01,439 --> 03:33:04,800
should report the exact

3985
03:33:04,800 --> 03:33:08,399
offset so this this won't

3986
03:33:08,399 --> 03:33:11,439
make a difference i guess i'll go back

3987
03:33:11,439 --> 03:33:14,880
to the strix command

3988
03:33:16,840 --> 03:33:19,120
um

3989
03:33:19,120 --> 03:33:21,520
okay here we have the strings command ti

3990
03:33:21,520 --> 03:33:23,040
instructor strings command to give me

3991
03:33:23,040 --> 03:33:23,760
the offset

3992
03:33:23,760 --> 03:33:26,800
of the string in decimal so i know

3993
03:33:26,800 --> 03:33:30,000
exactly at what which byte position

3994
03:33:30,000 --> 03:33:35,040
the hello world stands um

3995
03:33:36,160 --> 03:33:39,120
what i'm looking for and now only i do

3996
03:33:39,120 --> 03:33:41,200
what i do is i copy this sector to my

3997
03:33:41,200 --> 03:33:43,120
local drive

3998
03:33:43,120 --> 03:33:46,720
and then i copy the sector i modify the

3999
03:33:46,720 --> 03:33:48,239
sector on the local drive and then i

4000
03:33:48,239 --> 03:33:49,439
copy it back

4001
03:33:49,439 --> 03:33:52,640
at the exactly the same partition if you

4002
03:33:52,640 --> 03:33:53,600
see here

4003
03:33:53,600 --> 03:33:56,880
i also skip again exactly the same

4004
03:33:56,880 --> 03:33:58,800
number of sectors and then i write this

4005
03:33:58,800 --> 03:34:00,080
one sector exactly

4006
03:34:00,080 --> 03:34:04,479
back on the place where it was before

4007
03:34:06,080 --> 03:34:08,720
the next question was if your string

4008
03:34:08,720 --> 03:34:10,560
happened to be

4009
03:34:10,560 --> 03:34:14,080
on half on two sectors

4010
03:34:14,080 --> 03:34:17,439
then and two non-consecutive sectors

4011
03:34:17,439 --> 03:34:18,640
then

4012
03:34:18,640 --> 03:34:22,000
you would not find your hello

4013
03:34:22,560 --> 03:34:24,239
the string will find the hello and give

4014
03:34:24,239 --> 03:34:27,040
me the offset just my calculation will

4015
03:34:27,040 --> 03:34:30,399
a little bit fail if i if i for example

4016
03:34:30,399 --> 03:34:32,880
if i take the

4017
03:34:32,880 --> 03:34:36,640
the this offset for the age

4018
03:34:36,640 --> 03:34:39,120
is the sector and then let's assume the

4019
03:34:39,120 --> 03:34:40,160
e already

4020
03:34:40,160 --> 03:34:44,319
will start in the next sector then

4021
03:34:44,319 --> 03:34:48,160
this will be the sector 585

4022
03:34:48,160 --> 03:34:50,560
where this continues so the string will

4023
03:34:50,560 --> 03:34:51,439
find this

4024
03:34:51,439 --> 03:34:54,560
just if i make the ddd of one sector i

4025
03:34:54,560 --> 03:34:56,000
only will get the age

4026
03:34:56,000 --> 03:34:59,520
at the end at the last buy buy it

4027
03:34:59,520 --> 03:35:02,239
of the sector and then i will discover

4028
03:35:02,239 --> 03:35:04,720
that something goes wrong that

4029
03:35:04,720 --> 03:35:07,840
i miss some data in this case i can cut

4030
03:35:07,840 --> 03:35:11,200
two sectors to my drive and then i can

4031
03:35:11,200 --> 03:35:13,760
again modify

4032
03:35:13,760 --> 03:35:16,800
it as it is in one

4033
03:35:16,800 --> 03:35:19,520
each together so strings do not stop

4034
03:35:19,520 --> 03:35:21,040
after the sector and then say

4035
03:35:21,040 --> 03:35:24,319
uh i start new it

4036
03:35:24,319 --> 03:35:28,000
simply reads buy it by buy it and

4037
03:35:28,000 --> 03:35:29,760
so that's not not a problem this will

4038
03:35:29,760 --> 03:35:33,439
not disrupt the attack

4039
03:35:36,960 --> 03:35:39,839
if you have more questions

4040
03:35:43,040 --> 03:35:44,960
i see yeah there are some numbers in the

4041
03:35:44,960 --> 03:35:46,720
q a and you have them

4042
03:35:46,720 --> 03:35:49,840
okay okay

4043
03:35:50,560 --> 03:35:53,760
uh a bit surprised there is no crc on

4044
03:35:53,760 --> 03:35:55,359
sectors

4045
03:35:55,359 --> 03:35:57,840
uh yes there is a crc on sectors but

4046
03:35:57,840 --> 03:36:00,080
it's more low on the

4047
03:36:00,080 --> 03:36:03,120
on the low level partition formatting

4048
03:36:03,120 --> 03:36:05,760
there you have sectors so a sector on

4049
03:36:05,760 --> 03:36:07,600
low level partitioning is more big than

4050
03:36:07,600 --> 03:36:09,200
512 bytes

4051
03:36:09,200 --> 03:36:11,760
you have a drive into the sector i think

4052
03:36:11,760 --> 03:36:13,279
a sync part

4053
03:36:13,279 --> 03:36:17,040
then you have some space in between each

4054
03:36:17,040 --> 03:36:17,760
sector

4055
03:36:17,760 --> 03:36:19,120
and at the end of the sector you have

4056
03:36:19,120 --> 03:36:21,439
the checksum

4057
03:36:21,439 --> 03:36:23,600
which calculates the checksum of the

4058
03:36:23,600 --> 03:36:24,479
sector

4059
03:36:24,479 --> 03:36:28,960
but not of the content of the sector so

4060
03:36:29,279 --> 03:36:34,239
if the coin

4061
03:36:34,239 --> 03:36:36,479
um

4062
03:36:38,160 --> 03:36:42,720
good question i have i wondering yes

4063
03:36:42,720 --> 03:36:46,080
below it's below yeah i mean the way you

4064
03:36:46,080 --> 03:36:46,640
write

4065
03:36:46,640 --> 03:36:49,279
you write the sector will modify the crc

4066
03:36:49,279 --> 03:36:51,840
at the same time

4067
03:36:51,840 --> 03:36:54,800
yeah it's it's low level it's much more

4068
03:36:54,800 --> 03:36:57,359
low level than the file system

4069
03:36:57,359 --> 03:37:00,000
it's and it is invisible to you as a

4070
03:37:00,000 --> 03:37:00,479
user

4071
03:37:00,479 --> 03:37:02,399
you cannot access these parts of the

4072
03:37:02,399 --> 03:37:04,880
sector

4073
03:37:05,040 --> 03:37:07,359
okay

4074
03:37:08,479 --> 03:37:11,760
because if you tested some usb keys used

4075
03:37:11,760 --> 03:37:13,040
to have a

4076
03:37:13,040 --> 03:37:17,680
button to block right now

4077
03:37:17,680 --> 03:37:19,920
no i don't have a busb speak where i

4078
03:37:19,920 --> 03:37:23,279
have a button to block writing i'm sorry

4079
03:37:23,279 --> 03:37:27,040
some people had some ideas maybe um

4080
03:37:27,040 --> 03:37:30,560
try it with psd how does bsd handle it

4081
03:37:30,560 --> 03:37:33,760
or is there maybe a way with

4082
03:37:33,760 --> 03:37:36,560
those kernel levels things in linux

4083
03:37:36,560 --> 03:37:37,680
those

4084
03:37:37,680 --> 03:37:40,399
se linux stuff but i'm not i don't know

4085
03:37:40,399 --> 03:37:41,040
enough

4086
03:37:41,040 --> 03:37:45,840
to test this on my

4087
03:37:49,840 --> 03:37:51,600
do you have a tool to create a pulley

4088
03:37:51,600 --> 03:37:54,080
cloth master boot record yes

4089
03:37:54,080 --> 03:37:59,040
hex edit

4090
03:37:59,040 --> 03:38:02,319
yeah the easiest is you you you

4091
03:38:02,319 --> 03:38:06,160
create uh two disc two two usb sticks

4092
03:38:06,160 --> 03:38:06,640
one

4093
03:38:06,640 --> 03:38:09,120
without master boot record with just one

4094
03:38:09,120 --> 03:38:10,960
volume

4095
03:38:10,960 --> 03:38:14,319
and then you create a second one

4096
03:38:14,319 --> 03:38:18,479
with a master boot record with a disk

4097
03:38:18,880 --> 03:38:21,200
and then you can use the hex editor to

4098
03:38:21,200 --> 03:38:23,680
copy paste the values from one to the

4099
03:38:23,680 --> 03:38:24,399
other

4100
03:38:24,399 --> 03:38:26,800
but you need to be careful a little bit

4101
03:38:26,800 --> 03:38:28,399
because you have to take care not

4102
03:38:28,399 --> 03:38:32,080
to destroy the master file table and

4103
03:38:32,080 --> 03:38:35,760
some important stuff which can then

4104
03:38:35,760 --> 03:38:39,120
have influence to the first

4105
03:38:39,120 --> 03:38:42,239
part to the to the

4106
03:38:42,239 --> 03:38:44,720
boot sector for example you should not

4107
03:38:44,720 --> 03:38:46,560
go to the end of the disk file

4108
03:38:46,560 --> 03:38:48,239
because at the end of the disk there is

4109
03:38:48,239 --> 03:38:50,640
again a mirror of the master file table

4110
03:38:50,640 --> 03:38:53,279
and stuff like this

4111
03:38:53,279 --> 03:38:57,359
so you have to take a little bit care

4112
03:38:58,960 --> 03:39:02,239
cooler great questions

4113
03:39:02,239 --> 03:39:04,720
thank you

4114
03:39:06,880 --> 03:39:09,279
if still time you said you encountered

4115
03:39:09,279 --> 03:39:10,000
it

4116
03:39:10,000 --> 03:39:13,279
on the usb stick

4117
03:39:21,760 --> 03:39:24,080
um

4118
03:39:30,640 --> 03:39:33,680
no i i said it happens to me yes i said

4119
03:39:33,680 --> 03:39:34,479
i

4120
03:39:34,479 --> 03:39:37,359
i had this case one time and i changed

4121
03:39:37,359 --> 03:39:38,080
files

4122
03:39:38,080 --> 03:39:40,640
on the uh the data on the on the linux

4123
03:39:40,640 --> 03:39:42,560
system then i connected to the virtual

4124
03:39:42,560 --> 03:39:43,359
machine

4125
03:39:43,359 --> 03:39:44,640
of windows and i don't see the

4126
03:39:44,640 --> 03:39:46,800
modification of the data and i was

4127
03:39:46,800 --> 03:39:48,399
struggling around

4128
03:39:48,399 --> 03:39:50,640
for an hour until i start investigating

4129
03:39:50,640 --> 03:39:52,000
what's going wrong

4130
03:39:52,000 --> 03:39:55,680
but it was myself because i prepare usb

4131
03:39:55,680 --> 03:39:57,760
stick for forensic training

4132
03:39:57,760 --> 03:39:59,760
and uh then at one point after this

4133
03:39:59,760 --> 03:40:01,439
crashed and i was uh

4134
03:40:01,439 --> 03:40:03,600
a little bit bored and i plug out the

4135
03:40:03,600 --> 03:40:06,399
usb stick and plug it in again

4136
03:40:06,399 --> 03:40:08,319
and create again new files with the same

4137
03:40:08,319 --> 03:40:09,840
name

4138
03:40:09,840 --> 03:40:11,920
that was when it when it happens and

4139
03:40:11,920 --> 03:40:13,920
then

4140
03:40:13,920 --> 03:40:16,160
i thought to myself yes i have to

4141
03:40:16,160 --> 03:40:18,239
analyze what's going on and if i can

4142
03:40:18,239 --> 03:40:20,160
reproduce this

4143
03:40:20,160 --> 03:40:23,840
then i have a nice presentation

4144
03:40:24,399 --> 03:40:33,840
and i could reproduce it

4145
03:40:49,120 --> 03:40:53,040
oh there's also something in the chat

4146
03:40:53,600 --> 03:40:55,600
but no question i cannot see a question

4147
03:40:55,600 --> 03:40:57,439
in the chat

4148
03:40:57,439 --> 03:40:59,840
uh there are a question where do we get

4149
03:40:59,840 --> 03:41:02,560
the slides

4150
03:41:03,359 --> 03:41:05,920
so globally we will collect the slides

4151
03:41:05,920 --> 03:41:06,880
of

4152
03:41:06,880 --> 03:41:09,520
every speaker and we will share them

4153
03:41:09,520 --> 03:41:11,199
along with the videos

4154
03:41:11,199 --> 03:41:15,439
once we edit the stream to get it into

4155
03:41:15,439 --> 03:41:18,080
several videos and we will post it as

4156
03:41:18,080 --> 03:41:22,000
usual on the unicast

4157
03:41:22,160 --> 03:41:25,840
website if you want i can also provide

4158
03:41:25,840 --> 03:41:28,880
the disk images for the usb sticks

4159
03:41:28,880 --> 03:41:34,239
so that you can play around with it

4160
03:41:35,120 --> 03:41:37,760
yeah would be nice just one advice to

4161
03:41:37,760 --> 03:41:39,840
all attendees if you work

4162
03:41:39,840 --> 03:41:43,439
with dd and you are root user

4163
03:41:43,439 --> 03:41:46,239
take care better don't do it on your

4164
03:41:46,239 --> 03:41:49,198
professional pc

4165
03:41:49,359 --> 03:41:52,720
it's very easy to destroy very important

4166
03:41:52,720 --> 03:41:54,840
parts of your data or your operating

4167
03:41:54,840 --> 03:41:57,279
system

4168
03:41:57,279 --> 03:42:01,399
just one typo making something to

4169
03:42:01,399 --> 03:42:04,640
sdc1 instead of sdb1 or something like

4170
03:42:04,640 --> 03:42:05,120
this

4171
03:42:05,120 --> 03:42:11,840
and you have a broken operating system

4172
03:42:17,680 --> 03:42:25,840
so great

4173
03:42:27,760 --> 03:42:30,479
normal question

4174
03:42:31,680 --> 03:42:34,080
and yeah a little bit over time but not

4175
03:42:34,080 --> 03:42:36,560
too much i think you know

4176
03:42:36,560 --> 03:42:39,040
still manageable five minutes two

4177
03:42:39,040 --> 03:42:39,760
minutes just

4178
03:42:39,760 --> 03:42:43,920
perfect great

4179
03:42:48,239 --> 03:42:51,600
then thank you very much again yes thank

4180
03:42:51,600 --> 03:42:52,560
you too

4181
03:42:52,560 --> 03:42:55,600
for the opportunity

4182
03:42:56,960 --> 03:43:00,239
and we will be back tomorrow

4183
03:43:00,239 --> 03:43:03,359
two o'clock bye-bye

4184
03:43:03,359 --> 03:43:07,040
bye goodbye everybody

4185
03:43:07,040 --> 03:43:20,080
thanks to everybody

4186
03:43:20,080 --> 03:43:26,880
so we'll shut down the youtube stream

