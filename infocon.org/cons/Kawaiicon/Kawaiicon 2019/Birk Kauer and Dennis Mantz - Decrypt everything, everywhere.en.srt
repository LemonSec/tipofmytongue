1
00:00:02,720 --> 00:00:05,700
okay

2
00:00:03,929 --> 00:00:09,660
so hello to our little talk we have like

3
00:00:05,700 --> 00:00:10,170
50 minutes so let's be that a bit up who

4
00:00:09,660 --> 00:00:12,090
are we

5
00:00:10,170 --> 00:00:16,079
basically I'm Bert and the sustainers

6
00:00:12,090 --> 00:00:18,150
and we got paid to look at computers so

7
00:00:16,079 --> 00:00:19,919
what is talk all about basically we have

8
00:00:18,150 --> 00:00:22,740
like a little history of appliance we

9
00:00:19,920 --> 00:00:24,779
look at every year and so on and you can

10
00:00:22,740 --> 00:00:27,448
basically see a lot of stuff we found

11
00:00:24,779 --> 00:00:30,269
and in the back and some of you maybe

12
00:00:27,449 --> 00:00:32,579
have it in your network so we figured

13
00:00:30,269 --> 00:00:33,120
out well at 2019 let's go for another

14
00:00:32,579 --> 00:00:39,660
one

15
00:00:33,120 --> 00:00:42,599
and yes we found some stuff so we're

16
00:00:39,660 --> 00:00:44,610
talking about that appliance it's called

17
00:00:42,600 --> 00:00:48,420
four metrics data security platform it's

18
00:00:44,610 --> 00:00:51,390
now from Tallis let's let's put it a

19
00:00:48,420 --> 00:00:52,920
short history there so 2014 they

20
00:00:51,390 --> 00:00:54,390
actually won an award for the best

21
00:00:52,920 --> 00:00:56,250
encryption solution I will get into

22
00:00:54,390 --> 00:00:59,250
encryption part and the crypto appliance

23
00:00:56,250 --> 00:01:01,739
in a short amount of time they get

24
00:00:59,250 --> 00:01:04,470
bought by tails for like four hundred

25
00:01:01,739 --> 00:01:06,119
million dollar so you can imagine

26
00:01:04,470 --> 00:01:08,908
there's like quite some money in that

27
00:01:06,119 --> 00:01:10,560
business and they actually want to cyber

28
00:01:08,909 --> 00:01:15,210
security award which makes them like

29
00:01:10,560 --> 00:01:17,340
perfect right and in the enterprise they

30
00:01:15,210 --> 00:01:23,130
are kind of known as the holy grail of

31
00:01:17,340 --> 00:01:26,369
cloud encryption 2019 let's see so

32
00:01:23,130 --> 00:01:28,408
there's features we kind of just we have

33
00:01:26,369 --> 00:01:30,840
not so much time so we will go mainly

34
00:01:28,409 --> 00:01:32,610
into the transparent encryption part but

35
00:01:30,840 --> 00:01:34,770
it's like an enterprise appliance can do

36
00:01:32,610 --> 00:01:37,890
basically everything for you because it

37
00:01:34,770 --> 00:01:40,619
has like an HSM key management and all

38
00:01:37,890 --> 00:01:44,280
that stuff in the appliance itself and

39
00:01:40,619 --> 00:01:46,170
it manages everything so just to get up

40
00:01:44,280 --> 00:01:48,780
into an architecture of the transparent

41
00:01:46,170 --> 00:01:50,850
encryption what the ideas you put some

42
00:01:48,780 --> 00:01:54,270
data into the cloud or on-premise on

43
00:01:50,850 --> 00:01:55,890
file systems and this machine or this

44
00:01:54,270 --> 00:01:57,780
appliance is actually in the middle and

45
00:01:55,890 --> 00:02:00,719
it holds all your keys basically all

46
00:01:57,780 --> 00:02:03,630
your value and whenever you want to

47
00:02:00,719 --> 00:02:05,339
request data you actually get it from it

48
00:02:03,630 --> 00:02:07,229
so the appliance is encrypting and

49
00:02:05,340 --> 00:02:09,300
decrypting it at the same time so

50
00:02:07,229 --> 00:02:11,350
basically for the cloud you only have

51
00:02:09,300 --> 00:02:13,690
encrypted data there

52
00:02:11,350 --> 00:02:16,720
and if you are requested you get the

53
00:02:13,690 --> 00:02:18,340
decrypted data so it's quite quite a

54
00:02:16,720 --> 00:02:20,500
thing because especially like in Germany

55
00:02:18,340 --> 00:02:23,400
people don't trust the cloud at all

56
00:02:20,500 --> 00:02:25,990
so you you can just drop encrypt data

57
00:02:23,400 --> 00:02:29,560
somewhere you want to you can see like

58
00:02:25,990 --> 00:02:32,310
it's safe there and you can you can

59
00:02:29,560 --> 00:02:35,650
basically store it whatever you want

60
00:02:32,310 --> 00:02:37,090
so yeah we got that box and this is like

61
00:02:35,650 --> 00:02:38,320
the first part where Dennis takes over

62
00:02:37,090 --> 00:02:41,530
yeah

63
00:02:38,320 --> 00:02:44,140
so our first objective basically was to

64
00:02:41,530 --> 00:02:46,300
get a shell on this thing because per

65
00:02:44,140 --> 00:02:48,250
design this does not allow to get you

66
00:02:46,300 --> 00:02:50,590
like a bash or something you only have

67
00:02:48,250 --> 00:02:52,870
this command-line interface so if you

68
00:02:50,590 --> 00:02:55,840
plug in like a serial interface or if

69
00:02:52,870 --> 00:02:58,690
you connect it by a SSH you will drop

70
00:02:55,840 --> 00:03:00,760
into this admin CLI shell and there you

71
00:02:58,690 --> 00:03:03,040
have several categories of commands you

72
00:03:00,760 --> 00:03:05,530
can run to configure this thing and also

73
00:03:03,040 --> 00:03:07,870
to maintain it and yeah basically most

74
00:03:05,530 --> 00:03:10,350
of the commands will just yeah be

75
00:03:07,870 --> 00:03:12,610
wrappers for your basic Linux tools and

76
00:03:10,350 --> 00:03:15,280
yeah it's pretty restrictive so

77
00:03:12,610 --> 00:03:17,590
basically you are not allowed to put in

78
00:03:15,280 --> 00:03:21,790
any special characters so your typical

79
00:03:17,590 --> 00:03:25,480
command escape things will not work and

80
00:03:21,790 --> 00:03:27,429
I think let's just directly go into the

81
00:03:25,480 --> 00:03:30,989
demo to see how the shell looks like and

82
00:03:27,430 --> 00:03:30,990
how we did manage to break out

83
00:03:39,909 --> 00:03:46,459
okay that's kinda how it looks like yeah

84
00:03:44,120 --> 00:03:48,500
so does the shell basically a tab

85
00:03:46,459 --> 00:03:52,010
completion there's several like

86
00:03:48,500 --> 00:03:53,750
sub-command categories and the thing we

87
00:03:52,010 --> 00:03:55,790
found was in the network category so

88
00:03:53,750 --> 00:03:57,980
let's just go in there and as you can

89
00:03:55,790 --> 00:04:00,409
see there's probably just wrappers for

90
00:03:57,980 --> 00:04:03,709
linux commands and the interesting thing

91
00:04:00,409 --> 00:04:05,989
we found was like this one this IP Dayak

92
00:04:03,709 --> 00:04:10,370
which in the usage says just give me an

93
00:04:05,989 --> 00:04:11,900
IP command so let's just do that maybe

94
00:04:10,370 --> 00:04:13,579
you know that one and this actually

95
00:04:11,900 --> 00:04:19,489
looks like it's just directly calling

96
00:04:13,579 --> 00:04:21,620
the command of the Linux IP - so what

97
00:04:19,488 --> 00:04:27,500
happens if we try to concatenate another

98
00:04:21,620 --> 00:04:29,060
command let's just do it like this okay

99
00:04:27,500 --> 00:04:30,889
so this will not work because there's a

100
00:04:29,060 --> 00:04:32,720
special character in this but maybe some

101
00:04:30,889 --> 00:04:34,099
of you know that the IP command is

102
00:04:32,720 --> 00:04:37,550
actually pretty powerful and you can do

103
00:04:34,099 --> 00:04:40,039
a lot of it there's a network namespaces

104
00:04:37,550 --> 00:04:42,830
for example so you have this network

105
00:04:40,039 --> 00:04:45,229
namespace up come out of IP you can add

106
00:04:42,830 --> 00:04:48,099
another network namespace that's too

107
00:04:45,229 --> 00:04:48,099
kawaii Kon

108
00:04:52,950 --> 00:04:56,880
okay that work we now have a kowai core

109
00:04:54,990 --> 00:04:59,430
network namespace and what we can also

110
00:04:56,880 --> 00:05:04,200
do is just execute other commands inside

111
00:04:59,430 --> 00:05:09,140
Network namespaces so let's do ID again

112
00:05:04,200 --> 00:05:09,140
and oh we have a root shell that's

113
00:05:09,290 --> 00:05:12,470
[Music]

114
00:05:14,799 --> 00:05:18,979
so basically that was the first

115
00:05:17,059 --> 00:05:20,719
vulnerability we found we have a command

116
00:05:18,979 --> 00:05:23,869
injection in the atmosphere I and this

117
00:05:20,719 --> 00:05:26,389
also got us onto the system - then do

118
00:05:23,869 --> 00:05:28,099
further research and so let's look at

119
00:05:26,389 --> 00:05:30,769
the attack surface we have on this

120
00:05:28,099 --> 00:05:33,979
device so basically there are several

121
00:05:30,769 --> 00:05:35,869
networks facing services we have two

122
00:05:33,979 --> 00:05:38,748
binary services running on this they are

123
00:05:35,869 --> 00:05:40,399
marked in red and those are pretty

124
00:05:38,749 --> 00:05:43,639
interesting because the firewall

125
00:05:40,399 --> 00:05:45,439
actually lets you access those and so I

126
00:05:43,639 --> 00:05:47,959
wanted to take a closer look at them

127
00:05:45,439 --> 00:05:49,909
also because the hardening of the system

128
00:05:47,959 --> 00:05:53,929
is pretty interesting because basically

129
00:05:49,909 --> 00:05:57,199
you don't have a SLR globally this is

130
00:05:53,929 --> 00:06:00,138
2019 by the way and so let's look at

131
00:05:57,199 --> 00:06:01,639
this first one this are a server I think

132
00:06:00,139 --> 00:06:05,869
it stands for remote administration

133
00:06:01,639 --> 00:06:08,599
server or something the binary itself is

134
00:06:05,869 --> 00:06:10,399
not compiled with PE so you actually

135
00:06:08,599 --> 00:06:12,919
don't have a star with or without a

136
00:06:10,399 --> 00:06:16,399
global setting you don't have stack

137
00:06:12,919 --> 00:06:21,289
Canaries and the funny thing is you also

138
00:06:16,399 --> 00:06:25,189
have an executable stack butt-fuck okay

139
00:06:21,289 --> 00:06:26,688
that's like how did we go on to this

140
00:06:25,189 --> 00:06:28,339
because there were actually several

141
00:06:26,689 --> 00:06:30,800
other services there and we didn't have

142
00:06:28,339 --> 00:06:32,659
much time so we decided that's for the

143
00:06:30,800 --> 00:06:34,369
binary services just write a faster let

144
00:06:32,659 --> 00:06:36,800
that run your background and then look

145
00:06:34,369 --> 00:06:39,079
at all the other stuff and the problem

146
00:06:36,800 --> 00:06:41,149
with this is we basically have like a

147
00:06:39,079 --> 00:06:42,860
black box approach here because we don't

148
00:06:41,149 --> 00:06:46,550
have source code and so your usual

149
00:06:42,860 --> 00:06:49,159
passer like AFL what network and you can

150
00:06:46,550 --> 00:06:51,110
also do like dump fussing with tools

151
00:06:49,159 --> 00:06:53,029
like ordanza you can generate different

152
00:06:51,110 --> 00:06:55,069
payloads and just throw them at the

153
00:06:53,029 --> 00:06:57,289
service and see if it crashes but

154
00:06:55,069 --> 00:06:59,749
without like a coverage feedback this is

155
00:06:57,289 --> 00:07:01,998
not very efficient and so we wanted to

156
00:06:59,749 --> 00:07:04,309
try something something else here so

157
00:07:01,999 --> 00:07:06,589
what the idea was this basically we

158
00:07:04,309 --> 00:07:08,259
wanted to use frida maybe some of you

159
00:07:06,589 --> 00:07:11,269
know Frieda it's a binary

160
00:07:08,259 --> 00:07:14,059
instrumentation tool and to just get the

161
00:07:11,269 --> 00:07:15,499
coverage out of this running binary and

162
00:07:14,059 --> 00:07:18,499
we wanted to do that directly on the

163
00:07:15,499 --> 00:07:20,509
appliance so Frieda has a module called

164
00:07:18,499 --> 00:07:22,459
stalker which does exactly what we

165
00:07:20,509 --> 00:07:24,800
wanted it to do because with this you

166
00:07:22,459 --> 00:07:27,499
can basically trace the program as it

167
00:07:24,800 --> 00:07:28,220
runs and get information which basic

168
00:07:27,499 --> 00:07:30,910
blocks where X

169
00:07:28,220 --> 00:07:34,310
Puran and so the basic architecture

170
00:07:30,910 --> 00:07:36,770
looked like this we wrote our Python

171
00:07:34,310 --> 00:07:39,380
faster we used read Anza as like the

172
00:07:36,770 --> 00:07:41,690
mutation engine to mutate our corpus and

173
00:07:39,380 --> 00:07:44,510
fro the payloads at the target process

174
00:07:41,690 --> 00:07:46,040
over the network and then we did a

175
00:07:44,510 --> 00:07:47,840
little bit of reverse engineering of the

176
00:07:46,040 --> 00:07:50,900
target process to find like the

177
00:07:47,840 --> 00:07:52,460
interesting parts of this program so for

178
00:07:50,900 --> 00:07:54,289
example the parsing function which

179
00:07:52,460 --> 00:07:56,359
parses the packets that are received

180
00:07:54,290 --> 00:07:58,040
over the network oftentimes you can do

181
00:07:56,360 --> 00:08:00,290
that pretty quick because you just throw

182
00:07:58,040 --> 00:08:01,970
it into IRA and you see where does it do

183
00:08:00,290 --> 00:08:04,010
a lot of networking stuff and then there

184
00:08:01,970 --> 00:08:06,530
are some where function that will parse

185
00:08:04,010 --> 00:08:08,360
your input and so we like combined

186
00:08:06,530 --> 00:08:10,219
combined is a priority to do a little

187
00:08:08,360 --> 00:08:12,530
bit of reverse engineering find this

188
00:08:10,220 --> 00:08:14,210
parsing function then use frida to hook

189
00:08:12,530 --> 00:08:16,489
this parser function to attach the

190
00:08:14,210 --> 00:08:18,409
stalker module so that we only get

191
00:08:16,490 --> 00:08:20,210
coverage for this function and net for

192
00:08:18,410 --> 00:08:22,550
everything else so that it's a bit

193
00:08:20,210 --> 00:08:24,260
quicker and it doesn't take that long

194
00:08:22,550 --> 00:08:26,930
and then we have this coverage

195
00:08:24,260 --> 00:08:29,000
information and we can use it to do like

196
00:08:26,930 --> 00:08:31,010
a genetic fuzzing approach and there's

197
00:08:29,000 --> 00:08:32,690
also another interesting thing we could

198
00:08:31,010 --> 00:08:35,150
do with frida we could just do in

199
00:08:32,690 --> 00:08:36,620
process fussing so sometimes if you pass

200
00:08:35,150 --> 00:08:38,449
a function that's not really handle

201
00:08:36,620 --> 00:08:40,310
global state but just takes like the

202
00:08:38,450 --> 00:08:42,500
network package is a buffer and that

203
00:08:40,309 --> 00:08:44,150
parses it then you can just directly

204
00:08:42,500 --> 00:08:46,310
invoke it from frida and you don't have

205
00:08:44,150 --> 00:08:48,620
to care anything else what the process

206
00:08:46,310 --> 00:08:50,989
does and so depending on your binary and

207
00:08:48,620 --> 00:08:54,860
both of this will work and some of it

208
00:08:50,990 --> 00:08:56,600
will be faster or yeah better so the

209
00:08:54,860 --> 00:08:59,330
faster is still working progress but

210
00:08:56,600 --> 00:09:01,370
released it just today so if you follow

211
00:08:59,330 --> 00:09:03,440
us on Twitter or we will show their

212
00:09:01,370 --> 00:09:06,200
Twitter handles later you will see the

213
00:09:03,440 --> 00:09:08,060
link to get up it's not ready yet

214
00:09:06,200 --> 00:09:10,220
but some of the features already work

215
00:09:08,060 --> 00:09:12,109
and maybe you can use it already but

216
00:09:10,220 --> 00:09:14,450
yeah we will continue to work on this

217
00:09:12,110 --> 00:09:15,680
and maybe add some new features and make

218
00:09:14,450 --> 00:09:19,730
it a bit better and also add

219
00:09:15,680 --> 00:09:22,069
documentation ok so actually we didn't

220
00:09:19,730 --> 00:09:24,770
find much with that but we found a

221
00:09:22,070 --> 00:09:26,660
denial of service so one of the first

222
00:09:24,770 --> 00:09:28,520
things the faster found was that you can

223
00:09:26,660 --> 00:09:30,110
put this RI server with a certain

224
00:09:28,520 --> 00:09:33,199
payload into an endless loop and which

225
00:09:30,110 --> 00:09:34,790
generates a lot of CPU usage and so this

226
00:09:33,200 --> 00:09:37,040
was at least one vulnerability we found

227
00:09:34,790 --> 00:09:38,900
but yeah we plan to use the faster also

228
00:09:37,040 --> 00:09:40,209
a lot of projects so it definitely

229
00:09:38,900 --> 00:09:42,850
wasn't waste of time

230
00:09:40,210 --> 00:09:45,250
okay so I'll give it back to her so

231
00:09:42,850 --> 00:09:46,839
let's go further we now have access to

232
00:09:45,250 --> 00:09:49,240
the system like we showed before like

233
00:09:46,839 --> 00:09:51,399
with the C library God let's look for

234
00:09:49,240 --> 00:09:55,300
some more interesting parts of the upper

235
00:09:51,399 --> 00:09:57,880
system so the first thing we really

236
00:09:55,300 --> 00:10:00,189
found was like basically just like a

237
00:09:57,880 --> 00:10:04,140
service running that is triggering a

238
00:10:00,190 --> 00:10:06,790
script that's called outed user login so

239
00:10:04,140 --> 00:10:08,890
don't get scared from all the code up

240
00:10:06,790 --> 00:10:11,410
there this is by DT only a spare script

241
00:10:08,890 --> 00:10:12,209
and what it does is like pausing ssh

242
00:10:11,410 --> 00:10:14,589
locks

243
00:10:12,209 --> 00:10:17,560
so what could go wrong if pausing as his

244
00:10:14,589 --> 00:10:20,770
age locks right well if there's a failed

245
00:10:17,560 --> 00:10:23,140
login they call the audit function up

246
00:10:20,770 --> 00:10:26,410
there and then they're gonna send it to

247
00:10:23,140 --> 00:10:29,500
the another AES audit whatever function

248
00:10:26,410 --> 00:10:30,760
and just to give you a little hint this

249
00:10:29,500 --> 00:10:33,550
is like the audit function that is

250
00:10:30,760 --> 00:10:35,649
called in the end you have up there like

251
00:10:33,550 --> 00:10:38,740
an example message where like the the

252
00:10:35,649 --> 00:10:40,750
user foo bar is logging in basically

253
00:10:38,740 --> 00:10:44,320
this is completely attacker controlled

254
00:10:40,750 --> 00:10:45,790
ID if it's just like ten seconds look at

255
00:10:44,320 --> 00:10:51,370
the down of the screen what's happening

256
00:10:45,790 --> 00:10:53,319
there well it's a command injection out

257
00:10:51,370 --> 00:10:57,400
there so we have like an unauthenticated

258
00:10:53,320 --> 00:11:00,180
remote code execution left at POC basic

259
00:10:57,400 --> 00:11:04,510
you login with an ssh with a user that's

260
00:11:00,180 --> 00:11:08,380
escapes the command and if you look back

261
00:11:04,510 --> 00:11:09,459
it was using for admin as as a user the

262
00:11:08,380 --> 00:11:11,589
third so we still have to do some

263
00:11:09,459 --> 00:11:13,689
privilege escalation in the end but this

264
00:11:11,589 --> 00:11:15,520
is basically our whole proof of concept

265
00:11:13,690 --> 00:11:19,890
for owning the appliance remotely

266
00:11:15,520 --> 00:11:25,420
unauthenticated so that's also like POC

267
00:11:19,890 --> 00:11:27,910
requirement right so we have here we

268
00:11:25,420 --> 00:11:38,219
have like an SSH file I have a listener

269
00:11:27,910 --> 00:11:38,219
here let's go okay and we on the system

270
00:11:43,560 --> 00:11:48,630
so let's escalate to rude right

271
00:11:49,290 --> 00:11:55,660
remember the the first part we talked

272
00:11:51,580 --> 00:11:58,450
about like an the CLI that is that we

273
00:11:55,660 --> 00:12:00,069
break out off it's also like a local

274
00:11:58,450 --> 00:12:02,830
service that is listening on a port

275
00:12:00,070 --> 00:12:04,210
bound to local host and basically if you

276
00:12:02,830 --> 00:12:06,730
do exactly the same as we showed you

277
00:12:04,210 --> 00:12:11,290
before you get the privilege escalation

278
00:12:06,730 --> 00:12:14,860
on the system which is quite neat we

279
00:12:11,290 --> 00:12:17,980
also have like a second one I will show

280
00:12:14,860 --> 00:12:18,460
you that one I just have to copy paste

281
00:12:17,980 --> 00:12:22,000
it

282
00:12:18,460 --> 00:12:25,210
I don't wanna maybe I don't have it here

283
00:12:22,000 --> 00:12:27,580
okay here we go that's basically this

284
00:12:25,210 --> 00:12:32,710
one okay

285
00:12:27,580 --> 00:12:36,790
so what's that gonna do it opens LCS

286
00:12:32,710 --> 00:12:38,800
aged like an outlet listener and if we

287
00:12:36,790 --> 00:12:42,610
connect that so we are currently still

288
00:12:38,800 --> 00:12:47,969
for admin so if I connect to it on one

289
00:12:42,610 --> 00:12:47,970
357 and I do ID we are basically rude

290
00:12:53,110 --> 00:12:59,750
so yeah just a little wrap-up there was

291
00:12:57,529 --> 00:13:01,970
quite super abilities we found and there

292
00:12:59,750 --> 00:13:04,610
was like another get remote code

293
00:13:01,970 --> 00:13:06,190
execution the command injections several

294
00:13:04,610 --> 00:13:08,569
local privilege escalations

295
00:13:06,190 --> 00:13:10,130
rootless feature bypass we couldn't talk

296
00:13:08,569 --> 00:13:11,870
about that because the the time is too

297
00:13:10,130 --> 00:13:14,029
short but there are were some more

298
00:13:11,870 --> 00:13:17,720
features that you can easily bypass that

299
00:13:14,029 --> 00:13:20,870
they sought that is relevant for for

300
00:13:17,720 --> 00:13:22,399
security we had a denial of service well

301
00:13:20,870 --> 00:13:25,430
let's talk a bit about this closure with

302
00:13:22,399 --> 00:13:28,279
such big vendors right so I've sent them

303
00:13:25,430 --> 00:13:29,810
the report and they were like you pork

304
00:13:28,279 --> 00:13:34,069
actually displayed the root shell this

305
00:13:29,810 --> 00:13:35,810
is not possible I kind of tell them yes

306
00:13:34,069 --> 00:13:37,750
because like we have a breakout and they

307
00:13:35,810 --> 00:13:40,939
were like ah okay

308
00:13:37,750 --> 00:13:46,399
so your next guess is like how many CVS

309
00:13:40,940 --> 00:13:52,790
we got for that none is there any public

310
00:13:46,399 --> 00:13:55,970
advisories nope basically none so let's

311
00:13:52,790 --> 00:13:57,920
let's say like as a conclusion I guess

312
00:13:55,970 --> 00:14:01,430
security vendor still know what they are

313
00:13:57,920 --> 00:14:05,779
doing and please next time try harder

314
00:14:01,430 --> 00:14:08,329
and this is basically it we will be at

315
00:14:05,779 --> 00:14:10,370
the venue hit us up if you have

316
00:14:08,329 --> 00:14:12,400
questions there's like also the Twitter

317
00:14:10,370 --> 00:14:16,650
handle reddit their fascist thanks

318
00:14:12,400 --> 00:14:16,650
[Applause]

