1
00:00:02,810 --> 00:00:07,140
hi everyone I'm if you raffle I'm gonna

2
00:00:05,580 --> 00:00:09,330
give my talk the story of the

3
00:00:07,140 --> 00:00:12,389
uncrackable lockbox and why hackers need

4
00:00:09,330 --> 00:00:13,920
to work alongside developers we're going

5
00:00:12,389 --> 00:00:16,259
to talk about a program called lock what

6
00:00:13,920 --> 00:00:18,990
time lock it's a homemade encryption

7
00:00:16,260 --> 00:00:22,949
program made by you crypto Comic Con of

8
00:00:18,990 --> 00:00:24,750
algo machines calm what's interesting is

9
00:00:22,949 --> 00:00:27,060
that it implements a time sensitive lock

10
00:00:24,750 --> 00:00:29,279
so basically you have a time range which

11
00:00:27,060 --> 00:00:30,720
the lock box will be available within if

12
00:00:29,279 --> 00:00:34,410
you try and access it outside that range

13
00:00:30,720 --> 00:00:36,269
you should be rejected in order to test

14
00:00:34,410 --> 00:00:37,919
its security as creative posted

15
00:00:36,270 --> 00:00:39,629
challenges to read it now these

16
00:00:37,920 --> 00:00:41,309
challenges are a form of a lock box

17
00:00:39,629 --> 00:00:44,010
which is an encrypted file and they

18
00:00:41,309 --> 00:00:46,890
contain a 0.02 Bitcoin private key is a

19
00:00:44,010 --> 00:00:48,589
reward so in this talk we're going to

20
00:00:46,890 --> 00:00:50,940
cover five simple vulnerabilities that

21
00:00:48,590 --> 00:00:53,100
relatively generic Inc we can copied

22
00:00:50,940 --> 00:00:56,039
over to other programs as well so I hope

23
00:00:53,100 --> 00:00:58,739
you enjoy it so challenge number one was

24
00:00:56,039 --> 00:01:00,750
posted to read it in January encrypted

25
00:00:58,739 --> 00:01:03,538
Comic Con claims as program has an

26
00:01:00,750 --> 00:01:04,830
unhackable time lock and the time is

27
00:01:03,539 --> 00:01:08,670
somehow synced to the Bitcoin network

28
00:01:04,830 --> 00:01:11,369
and he offers 0.02 Bitcoin for anyone

29
00:01:08,670 --> 00:01:14,460
who gets in so homemade encryption plus

30
00:01:11,369 --> 00:01:16,740
Bitcoin I'm all over this right so

31
00:01:14,460 --> 00:01:18,839
looking at the website we're given the

32
00:01:16,740 --> 00:01:21,179
password to this particular time lock

33
00:01:18,840 --> 00:01:22,710
box which is time lock these are a

34
00:01:21,180 --> 00:01:24,180
series of questions and answers which

35
00:01:22,710 --> 00:01:25,770
you get asked to ascertain that you're

36
00:01:24,180 --> 00:01:27,420
the right person for this lock box in

37
00:01:25,770 --> 00:01:30,420
this case it's how much bitcoins in this

38
00:01:27,420 --> 00:01:32,759
lock box in it 0.02 and we're given the

39
00:01:30,420 --> 00:01:35,700
time range the start and end times both

40
00:01:32,759 --> 00:01:37,020
in UTC so the point of this engagement

41
00:01:35,700 --> 00:01:39,119
is just to attack the time lock

42
00:01:37,020 --> 00:01:40,619
mechanism only not worrying about trying

43
00:01:39,119 --> 00:01:43,950
to break secrets or crypto or anything

44
00:01:40,619 --> 00:01:45,930
like that so upon running the executable

45
00:01:43,950 --> 00:01:48,750
when trying to open a lock box we're

46
00:01:45,930 --> 00:01:50,610
faced with this prompt 28 days 1 hours

47
00:01:48,750 --> 00:01:53,970
and so many seconds until the data is

48
00:01:50,610 --> 00:01:56,820
available if you dump the strings in the

49
00:01:53,970 --> 00:01:58,619
binary you see it appears in this form

50
00:01:56,820 --> 00:02:00,240
there's also another interesting string

51
00:01:58,619 --> 00:02:01,409
right next to it which is sleep the

52
00:02:00,240 --> 00:02:04,320
folder where the file name will be

53
00:02:01,409 --> 00:02:06,149
created if we can somehow figure out how

54
00:02:04,320 --> 00:02:07,740
to get from the first string until you

55
00:02:06,149 --> 00:02:09,209
select the folder with the filename will

56
00:02:07,740 --> 00:02:10,799
be created if we can figure out the

57
00:02:09,209 --> 00:02:12,930
logic path we should be able to practice

58
00:02:10,800 --> 00:02:13,890
right open if we check out the cross

59
00:02:12,930 --> 00:02:15,270
references to

60
00:02:13,890 --> 00:02:17,369
and seek until the data is available

61
00:02:15,270 --> 00:02:19,710
it's only used exactly once in the

62
00:02:17,370 --> 00:02:20,970
program we can jump to that location it

63
00:02:19,710 --> 00:02:23,130
doesn't matter what this location does

64
00:02:20,970 --> 00:02:25,109
but what matters is how we got here so

65
00:02:23,130 --> 00:02:28,710
if we follow this red arrow upwards and

66
00:02:25,110 --> 00:02:31,050
we get to this Junction now we came out

67
00:02:28,710 --> 00:02:33,900
from this left-hand side if you can see

68
00:02:31,050 --> 00:02:36,240
that call 2 times 64 at the top there's

69
00:02:33,900 --> 00:02:37,950
a junction that comes off with that just

70
00:02:36,240 --> 00:02:39,390
enough statement and it's followed by

71
00:02:37,950 --> 00:02:41,730
red line so it's obviously the false

72
00:02:39,390 --> 00:02:43,890
path there's a green line coming off of

73
00:02:41,730 --> 00:02:45,480
that which is the true path and we can

74
00:02:43,890 --> 00:02:47,489
speculate if we take the true path twice

75
00:02:45,480 --> 00:02:49,769
we're probably going to be able to you

76
00:02:47,490 --> 00:02:51,090
know write the fellow desk so if we have

77
00:02:49,770 --> 00:02:54,450
a look to the right and take that true

78
00:02:51,090 --> 00:02:56,070
path it ends up to a string you know

79
00:02:54,450 --> 00:02:58,140
sleep the folder where the file name

80
00:02:56,070 --> 00:03:00,660
will be run into followed by calls

81
00:02:58,140 --> 00:03:02,100
immediately to if open and if right so

82
00:03:00,660 --> 00:03:03,570
we can speculate or eat this is post

83
00:03:02,100 --> 00:03:06,420
decryption and there's just some final

84
00:03:03,570 --> 00:03:09,540
checks just to see if you're allowed to

85
00:03:06,420 --> 00:03:10,980
open this lock box or not so it really

86
00:03:09,540 --> 00:03:12,299
means just that I've seen like the time

87
00:03:10,980 --> 00:03:14,010
lock mechanism is really just a pair of

88
00:03:12,300 --> 00:03:16,410
of statements which isn't very good

89
00:03:14,010 --> 00:03:18,060
security wise right so we could just

90
00:03:16,410 --> 00:03:20,750
patch it out we can just change the

91
00:03:18,060 --> 00:03:23,459
conditional jumps to unconditional jumps

92
00:03:20,750 --> 00:03:26,430
right this change to the binary and run

93
00:03:23,459 --> 00:03:27,989
it or maybe everyone just because

94
00:03:26,430 --> 00:03:30,180
something's compiled it doesn't mean it

95
00:03:27,989 --> 00:03:33,660
can't be modified in this case shock

96
00:03:30,180 --> 00:03:35,330
Pikachu for cryptic Comicon so we get

97
00:03:33,660 --> 00:03:37,100
luke number one which is pretty awesome

98
00:03:35,330 --> 00:03:40,350
yeah

99
00:03:37,100 --> 00:03:41,940
magical Internet money four days I've

100
00:03:40,350 --> 00:03:44,220
been told cryptic comic-con about this

101
00:03:41,940 --> 00:03:45,930
and see why don't you use time as like a

102
00:03:44,220 --> 00:03:47,790
secret and pass them to the corruption

103
00:03:45,930 --> 00:03:50,459
function so that's exactly what he did

104
00:03:47,790 --> 00:03:51,660
any issue challenge number two so we

105
00:03:50,459 --> 00:03:53,670
need to plan of attack for this one

106
00:03:51,660 --> 00:03:55,200
basically we're gonna try and track down

107
00:03:53,670 --> 00:03:57,208
we that time has passed since the

108
00:03:55,200 --> 00:03:59,369
decription pass into trick decryption

109
00:03:57,209 --> 00:04:02,280
function set it to the future if we can

110
00:03:59,370 --> 00:04:03,930
find it see what happens we know what

111
00:04:02,280 --> 00:04:05,940
the times are we'd given them as part of

112
00:04:03,930 --> 00:04:07,590
the challenge parameters there was some

113
00:04:05,940 --> 00:04:09,720
time in February so basically we can

114
00:04:07,590 --> 00:04:11,400
translate that to a UNIX timestamp and

115
00:04:09,720 --> 00:04:13,739
it can change that to a hexadecimal

116
00:04:11,400 --> 00:04:15,360
number because we're steeping through

117
00:04:13,739 --> 00:04:17,880
the program like a debugger like

118
00:04:15,360 --> 00:04:19,620
instruction by instruction if we keep an

119
00:04:17,880 --> 00:04:21,120
eye out on the registers if we see those

120
00:04:19,620 --> 00:04:22,680
hexadecimal numbers come up we can

121
00:04:21,120 --> 00:04:25,680
probably guess that's the current time

122
00:04:22,680 --> 00:04:27,120
and we can swap it out from there so if

123
00:04:25,680 --> 00:04:27,750
we try and decrypt the challenge binary

124
00:04:27,120 --> 00:04:30,090
we

125
00:04:27,750 --> 00:04:31,380
this prompt incorrect answers or the

126
00:04:30,090 --> 00:04:33,239
current time is not within the time like

127
00:04:31,380 --> 00:04:34,740
window cool if we check for

128
00:04:33,240 --> 00:04:36,840
cross-references it's used in the

129
00:04:34,740 --> 00:04:38,790
program exactly once so we can jump to

130
00:04:36,840 --> 00:04:40,260
that location like we did before that

131
00:04:38,790 --> 00:04:42,660
course doesn't matter what's does what

132
00:04:40,260 --> 00:04:46,289
means is how we got here and we got here

133
00:04:42,660 --> 00:04:47,400
by this hunk of assembly at the top now

134
00:04:46,290 --> 00:04:50,280
these are cold to this particular

135
00:04:47,400 --> 00:04:50,789
subroutine in the middle if that returns

136
00:04:50,280 --> 00:04:52,440
true

137
00:04:50,790 --> 00:04:53,970
you may go down to a file path we'll

138
00:04:52,440 --> 00:04:56,130
rewrite everything the disk goes to

139
00:04:53,970 --> 00:04:57,600
false we get to that prompt so we'll

140
00:04:56,130 --> 00:04:59,310
figure out this function does we just

141
00:04:57,600 --> 00:05:01,620
open up a debugger put breakpoints

142
00:04:59,310 --> 00:05:03,630
either side of it and we noticed he's a

143
00:05:01,620 --> 00:05:05,130
buffer being passed unto it if we have a

144
00:05:03,630 --> 00:05:06,540
look at that buffer he's a whole bunch

145
00:05:05,130 --> 00:05:08,190
of gobbledygook inside of it which means

146
00:05:06,540 --> 00:05:09,870
it's encrypted to content therefore

147
00:05:08,190 --> 00:05:11,370
steep over at we get plain text and this

148
00:05:09,870 --> 00:05:12,990
was just a lock box that I had made

149
00:05:11,370 --> 00:05:14,490
myself of the time see it five minutes

150
00:05:12,990 --> 00:05:17,730
to the future to try understand what was

151
00:05:14,490 --> 00:05:18,930
going on so I really had a look at the

152
00:05:17,730 --> 00:05:20,580
encryption function state for

153
00:05:18,930 --> 00:05:22,110
instruction by instruction my debugger I

154
00:05:20,580 --> 00:05:23,700
found this place where a a memory

155
00:05:22,110 --> 00:05:25,650
location was getting to referenced in a

156
00:05:23,700 --> 00:05:27,990
student numbers being loaded into our ax

157
00:05:25,650 --> 00:05:29,580
and you can see it's you know 5 C 4

158
00:05:27,990 --> 00:05:32,400
which is sort of like the numbers which

159
00:05:29,580 --> 00:05:34,080
we wanted to see before right if we

160
00:05:32,400 --> 00:05:36,179
convert this to decimal it's a valid

161
00:05:34,080 --> 00:05:38,099
UNIX timestamp it was actually the

162
00:05:36,180 --> 00:05:40,350
current time which I was trying to

163
00:05:38,100 --> 00:05:41,550
correct the salaat box open so we found

164
00:05:40,350 --> 00:05:45,990
with the x being passed on to the

165
00:05:41,550 --> 00:05:47,729
corruption function at that point I open

166
00:05:45,990 --> 00:05:49,229
up the challenge lock box again I see it

167
00:05:47,729 --> 00:05:51,270
a breakpoint at the place with that

168
00:05:49,229 --> 00:05:53,370
memory address was being referenced and

169
00:05:51,270 --> 00:05:55,560
basically we can just switch out the

170
00:05:53,370 --> 00:05:57,380
number and re x2 sometime in the future

171
00:05:55,560 --> 00:05:59,550
but within that time lock window right

172
00:05:57,380 --> 00:06:02,280
we can go back to our initial receipt of

173
00:05:59,550 --> 00:06:04,080
breakpoints and we can go and try and

174
00:06:02,280 --> 00:06:05,280
step over the decryption function so

175
00:06:04,080 --> 00:06:07,229
here's the challenge lock box since

176
00:06:05,280 --> 00:06:09,179
encrypted form we step over and we get

177
00:06:07,229 --> 00:06:11,219
plain tix which brings us to like number

178
00:06:09,180 --> 00:06:14,720
two awesome

179
00:06:11,220 --> 00:06:14,720
sparkles image when it main

180
00:06:15,130 --> 00:06:21,200
so I'm gonna hook this up and tell the

181
00:06:19,430 --> 00:06:23,240
script of Comic Con and he fought really

182
00:06:21,200 --> 00:06:24,409
really really hard in he went and fixed

183
00:06:23,240 --> 00:06:27,560
it and came up with challenge number

184
00:06:24,410 --> 00:06:29,270
three so that's good this a go now with

185
00:06:27,560 --> 00:06:32,210
the plan of attack this time we want to

186
00:06:29,270 --> 00:06:33,349
have some fun and we know that Tone Loc

187
00:06:32,210 --> 00:06:35,659
has to connect to the Bitcoin network

188
00:06:33,350 --> 00:06:36,910
somehow to get the time right so how

189
00:06:35,660 --> 00:06:38,900
about we just launch a cyber attack

190
00:06:36,910 --> 00:06:40,370
basically that's we just flood the

191
00:06:38,900 --> 00:06:44,299
network with a whole bunch of malicious

192
00:06:40,370 --> 00:06:47,420
nodes they haven element nodes that

193
00:06:44,300 --> 00:06:48,830
they're happy times it's the future we

194
00:06:47,420 --> 00:06:51,470
can enter sable internet access in the

195
00:06:48,830 --> 00:06:52,880
virtual machine and the enforce tome

196
00:06:51,470 --> 00:06:54,680
optic unique to these local nodes and

197
00:06:52,880 --> 00:06:56,930
hopefully it'll buy it and open right up

198
00:06:54,680 --> 00:06:58,550
so for that we have to figure out how

199
00:06:56,930 --> 00:07:00,320
time lock can next to the Bitcoin

200
00:06:58,550 --> 00:07:02,150
network so if we try and open up the

201
00:07:00,320 --> 00:07:04,370
challenge lockbox and we get a packet

202
00:07:02,150 --> 00:07:06,140
sniffer running in Wireshark and it's

203
00:07:04,370 --> 00:07:08,120
doing a whole bunch of dnews requests

204
00:07:06,140 --> 00:07:09,560
these DNS requests are kind of special

205
00:07:08,120 --> 00:07:11,210
because normally they are in return one

206
00:07:09,560 --> 00:07:13,430
record but in this case we're getting

207
00:07:11,210 --> 00:07:15,349
twenty to thirty records in the Bitcoin

208
00:07:13,430 --> 00:07:17,660
world a sieve node is basically just a

209
00:07:15,350 --> 00:07:19,340
random list of nodes which particular

210
00:07:17,660 --> 00:07:22,240
DNS Therese has seen and that's been

211
00:07:19,340 --> 00:07:24,859
alive in the last half an hour or so and

212
00:07:22,240 --> 00:07:27,140
Tony was thinking five of these these

213
00:07:24,860 --> 00:07:28,460
are hard-coded into the binary so if

214
00:07:27,140 --> 00:07:29,930
we're going to full time lock to connect

215
00:07:28,460 --> 00:07:32,450
to our fake Bitcoin node we're going to

216
00:07:29,930 --> 00:07:34,040
have to control DNS somehow thankfully

217
00:07:32,450 --> 00:07:35,780
that's pretty easy I just jumped on

218
00:07:34,040 --> 00:07:37,460
github downloaded a Python script which

219
00:07:35,780 --> 00:07:41,270
implements DNS protocol

220
00:07:37,460 --> 00:07:43,219
I see windows to resolve DNS as a local

221
00:07:41,270 --> 00:07:45,049
server and it worked wonderfully

222
00:07:43,220 --> 00:07:47,450
the problem was I only returned one

223
00:07:45,050 --> 00:07:48,590
address since either the 30 so I needed

224
00:07:47,450 --> 00:07:52,130
to convince time-lock that we were a

225
00:07:48,590 --> 00:07:54,440
real seed to do that I picked up the RFC

226
00:07:52,130 --> 00:07:56,180
for DNS and it turns out they're adding

227
00:07:54,440 --> 00:07:57,770
more records to a response packet is

228
00:07:56,180 --> 00:07:59,390
actually fairly straightforward at a

229
00:07:57,770 --> 00:08:01,789
pseudo randomly generated a whole bunch

230
00:07:59,390 --> 00:08:03,669
of addresses that started with one to

231
00:08:01,790 --> 00:08:07,760
seven to point back to that local hosts

232
00:08:03,670 --> 00:08:10,250
and we've got a working signal working

233
00:08:07,760 --> 00:08:12,260
pretty quickly from there you can just

234
00:08:10,250 --> 00:08:14,270
change the time on the Windows machine

235
00:08:12,260 --> 00:08:16,400
you know disable time syncing see the

236
00:08:14,270 --> 00:08:18,650
time to the future I downloaded Bitcoin

237
00:08:16,400 --> 00:08:21,140
core fired it up it was listening on the

238
00:08:18,650 --> 00:08:22,909
port opened up time lock time what can

239
00:08:21,140 --> 00:08:25,940
each is a DNS server which then point to

240
00:08:22,910 --> 00:08:27,470
the internal Bitcoin node and we only

241
00:08:25,940 --> 00:08:28,280
got five or the eighty required

242
00:08:27,470 --> 00:08:29,780
connections

243
00:08:28,280 --> 00:08:31,369
I was pretty guarded but it kind of

244
00:08:29,780 --> 00:08:35,360
makes sense right it was only five

245
00:08:31,370 --> 00:08:37,159
hard-coded seed nodes that that we were

246
00:08:35,360 --> 00:08:39,680
connecting to so what do you do when you

247
00:08:37,159 --> 00:08:41,419
get stuck you switch your strings it was

248
00:08:39,679 --> 00:08:43,159
a function called EDC node which is

249
00:08:41,419 --> 00:08:45,560
pretty well-documented and I jumped to

250
00:08:43,159 --> 00:08:47,180
it and it turns out you have a five

251
00:08:45,560 --> 00:08:49,040
calls to this particular EDC node

252
00:08:47,180 --> 00:08:50,660
function in a row and so you can already

253
00:08:49,040 --> 00:08:52,939
speculate this is where the those nodes

254
00:08:50,660 --> 00:08:55,459
are being added so I thought why don't

255
00:08:52,940 --> 00:08:57,620
we just do it again if we execute right

256
00:08:55,460 --> 00:08:59,420
to the internet block to modify the

257
00:08:57,620 --> 00:09:01,460
instruction pointer from the last bit

258
00:08:59,420 --> 00:09:03,589
putting it back to the top again been

259
00:09:01,460 --> 00:09:05,300
running it for again of course changing

260
00:09:03,590 --> 00:09:08,600
that as the strings which the Dean

261
00:09:05,300 --> 00:09:11,089
hysteresis and we're going to get to we

262
00:09:08,600 --> 00:09:13,190
would have ten seed nodes instead of the

263
00:09:11,090 --> 00:09:14,480
five which were hard-coded just greater

264
00:09:13,190 --> 00:09:17,810
than the eight required try it

265
00:09:14,480 --> 00:09:19,850
so it's known I did exactly that time

266
00:09:17,810 --> 00:09:22,310
lock Brennan connected to the the fake

267
00:09:19,850 --> 00:09:24,970
DNS node went to the Bitcoin core I got

268
00:09:22,310 --> 00:09:31,489
the time and we have loop number three

269
00:09:24,970 --> 00:09:32,780
magical internet buddy whoo so are we

270
00:09:31,490 --> 00:09:35,390
interrupt this up the crypto Comic Con

271
00:09:32,780 --> 00:09:37,670
and he was very impressed he went and

272
00:09:35,390 --> 00:09:40,640
had coded IP addresses instead of having

273
00:09:37,670 --> 00:09:43,120
DNS addresses and he performed at a

274
00:09:40,640 --> 00:09:45,230
station on connected nodes by requesting

275
00:09:43,120 --> 00:09:47,360
the block headers of the blockchain

276
00:09:45,230 --> 00:09:48,890
which that no holds anything verifies

277
00:09:47,360 --> 00:09:50,660
all the hashes and that sort of stuff is

278
00:09:48,890 --> 00:09:53,360
correct and only takes a timestamp from

279
00:09:50,660 --> 00:09:56,990
the final block heater so this kind of

280
00:09:53,360 --> 00:09:58,190
made attacking the time lock

281
00:09:56,990 --> 00:09:59,260
functionality bit hard so we need to

282
00:09:58,190 --> 00:10:02,000
come up with a different plan of attack

283
00:09:59,260 --> 00:10:03,350
now we know it's a homemade encryption

284
00:10:02,000 --> 00:10:05,000
program right so we'll have a look at

285
00:10:03,350 --> 00:10:06,020
the crypto we'll just look for bad modes

286
00:10:05,000 --> 00:10:08,720
of encryption and weak encryption

287
00:10:06,020 --> 00:10:10,550
schemes and this is awesome quote by

288
00:10:08,720 --> 00:10:12,020
Bruce Joyner of anyone from the most

289
00:10:10,550 --> 00:10:13,910
clueless amateur to the best

290
00:10:12,020 --> 00:10:16,970
cryptographer can create an algorithm

291
00:10:13,910 --> 00:10:18,949
that he himself can't break on this

292
00:10:16,970 --> 00:10:20,780
slide we're war on the clueless amateur

293
00:10:18,950 --> 00:10:23,000
part but that's okay everyone has to

294
00:10:20,780 --> 00:10:24,199
start somewhere right but they just have

295
00:10:23,000 --> 00:10:26,660
a lock see if we can break the crypto

296
00:10:24,200 --> 00:10:29,120
for that we need to be able to figure

297
00:10:26,660 --> 00:10:30,770
out where the crypto actually is I just

298
00:10:29,120 --> 00:10:33,260
looked for words this is of like if open

299
00:10:30,770 --> 00:10:36,410
if right and there's normally in crypto

300
00:10:33,260 --> 00:10:37,939
functions smushed in between those once

301
00:10:36,410 --> 00:10:39,829
I tracked one down I made a lock box

302
00:10:37,940 --> 00:10:42,020
just with some dummy data set to

303
00:10:39,830 --> 00:10:43,520
overlays and if you step over it gets

304
00:10:42,020 --> 00:10:45,800
Godley go cry it's we've obviously found

305
00:10:43,520 --> 00:10:47,689
where encryption happens if we check it

306
00:10:45,800 --> 00:10:48,829
out we find this block of assembly you

307
00:10:47,690 --> 00:10:50,330
guys aren't going to be able to see that

308
00:10:48,830 --> 00:10:52,490
from here that there's only two things

309
00:10:50,330 --> 00:10:54,170
that really matter the first part is

310
00:10:52,490 --> 00:10:56,660
that the top that generates a single

311
00:10:54,170 --> 00:10:58,520
byte key stream let's feed into the

312
00:10:56,660 --> 00:11:01,149
bottom bit which it was won by the

313
00:10:58,520 --> 00:11:05,810
plaintext with one bio the key stream

314
00:11:01,149 --> 00:11:07,520
now I did this several times and if you

315
00:11:05,810 --> 00:11:09,709
use exactly the same inputs like the

316
00:11:07,520 --> 00:11:11,660
same password same question answers in

317
00:11:09,709 --> 00:11:13,550
the same time like window we got the

318
00:11:11,660 --> 00:11:16,399
same outputs so the cipher text was

319
00:11:13,550 --> 00:11:18,979
completely deterministic but encryption

320
00:11:16,399 --> 00:11:21,529
is performed by X all right so we can

321
00:11:18,980 --> 00:11:23,959
just decrypt it by ignoring again the

322
00:11:21,529 --> 00:11:25,550
key strings exactly the same so we have

323
00:11:23,959 --> 00:11:27,560
symmetric encryption which isn't all

324
00:11:25,550 --> 00:11:30,680
that flash but it's good for us so let's

325
00:11:27,560 --> 00:11:33,050
exploit this basically we can extract

326
00:11:30,680 --> 00:11:34,880
the cipher text on the lock box file go

327
00:11:33,050 --> 00:11:36,979
to create a new lock box we as full of

328
00:11:34,880 --> 00:11:38,689
dummy data just always what matters is

329
00:11:36,980 --> 00:11:40,100
that the length of the dummy data is

330
00:11:38,690 --> 00:11:42,320
exactly the same amount of bytes is what

331
00:11:40,100 --> 00:11:43,790
we extracted from the cipher text we can

332
00:11:42,320 --> 00:11:45,200
just do the old switcheroo swap the

333
00:11:43,790 --> 00:11:48,740
dummy data for the cipher text that we

334
00:11:45,200 --> 00:11:50,329
extracted and then we run the encryption

335
00:11:48,740 --> 00:11:53,240
function and we get plaintext which

336
00:11:50,329 --> 00:11:54,680
brings us to look number four and we get

337
00:11:53,240 --> 00:12:00,320
more Sparkle than me to Quentin it

338
00:11:54,680 --> 00:12:01,699
matter so I went to wrote this up and I

339
00:12:00,320 --> 00:12:03,350
mention this to crypto Comic Con and I'm

340
00:12:01,700 --> 00:12:04,880
like you can't roll with symmetric

341
00:12:03,350 --> 00:12:07,310
encryption that's a bad idea so he was

342
00:12:04,880 --> 00:12:09,140
like ok I'm gonna fix this now he went

343
00:12:07,310 --> 00:12:10,609
and did that and we're gonna check out

344
00:12:09,140 --> 00:12:14,149
his crypto again for the fifth challenge

345
00:12:10,610 --> 00:12:15,500
and the crypto looks like this there's

346
00:12:14,149 --> 00:12:16,880
no problem computer science that can't

347
00:12:15,500 --> 00:12:19,970
be fixed by adding more layers of

348
00:12:16,880 --> 00:12:22,189
abstraction right so basically he just

349
00:12:19,970 --> 00:12:23,540
put more layers of encryption on we go

350
00:12:22,190 --> 00:12:24,980
from encryption around one and two round

351
00:12:23,540 --> 00:12:26,240
toe and then to round three the

352
00:12:24,980 --> 00:12:28,880
corruption is pretty much the same but

353
00:12:26,240 --> 00:12:30,320
just in Reverse we decrypt round three

354
00:12:28,880 --> 00:12:32,589
first then into round two of them to

355
00:12:30,320 --> 00:12:35,180
round one into a verification routine

356
00:12:32,589 --> 00:12:37,130
now we're gonna have a look at each of

357
00:12:35,180 --> 00:12:39,279
these stages rounds 1 & 3 are

358
00:12:37,130 --> 00:12:41,540
instruction for instruction the same as

359
00:12:39,279 --> 00:12:43,189
the encryption function we met and

360
00:12:41,540 --> 00:12:45,469
challenge them before which is great

361
00:12:43,190 --> 00:12:47,540
right it's vulnerable to symmetric

362
00:12:45,470 --> 00:12:49,250
encryption we know how to defeat it it's

363
00:12:47,540 --> 00:12:51,650
all good what matters is the second

364
00:12:49,250 --> 00:12:52,699
round of encryption now having a look at

365
00:12:51,650 --> 00:12:54,620
it thank you know it's going to be too

366
00:12:52,699 --> 00:12:55,760
small for everyone to see it just does a

367
00:12:54,620 --> 00:12:58,550
whole bunch of chips and

368
00:12:55,760 --> 00:13:02,480
the pliers and some strange calls to ten

369
00:12:58,550 --> 00:13:03,650
and square root encrypting a buffer

370
00:13:02,480 --> 00:13:04,760
twice we get a whole bunch of

371
00:13:03,650 --> 00:13:07,189
gobbledygook which means this is

372
00:13:04,760 --> 00:13:09,230
absolutely not symmetric right but I did

373
00:13:07,190 --> 00:13:11,360
a couple more trials using like the same

374
00:13:09,230 --> 00:13:13,310
password same questions answers but

375
00:13:11,360 --> 00:13:14,960
varied the time and the output was

376
00:13:13,310 --> 00:13:17,150
exactly the same I got deterministic

377
00:13:14,960 --> 00:13:20,480
output which means it's not reliant on

378
00:13:17,150 --> 00:13:22,280
time whatsoever so I had a hunch that

379
00:13:20,480 --> 00:13:24,080
was just going to be using hard-coded

380
00:13:22,280 --> 00:13:25,910
constants so we could probably just peel

381
00:13:24,080 --> 00:13:27,200
off one layer at a time and we'll do

382
00:13:25,910 --> 00:13:28,880
exactly that

383
00:13:27,200 --> 00:13:32,300
so we can extract the ciphertext on the

384
00:13:28,880 --> 00:13:34,130
lock box data we can pass it into the

385
00:13:32,300 --> 00:13:36,109
third round of encryption through this

386
00:13:34,130 --> 00:13:38,630
symmetric encryption attack strip that

387
00:13:36,110 --> 00:13:41,330
layer off which will yield us the second

388
00:13:38,630 --> 00:13:43,700
round cipher text from via we can go

389
00:13:41,330 --> 00:13:45,170
decrypt a new lock box see at the time

390
00:13:43,700 --> 00:13:48,800
to five minutes in the future or

391
00:13:45,170 --> 00:13:49,939
something like that and from via using

392
00:13:48,800 --> 00:13:51,349
the same passwords and the same

393
00:13:49,940 --> 00:13:52,670
questions answers we're going to be able

394
00:13:51,350 --> 00:13:54,710
to strip off that second layer because

395
00:13:52,670 --> 00:13:58,459
it uses how Koda constants which gives

396
00:13:54,710 --> 00:14:00,380
us the the ciphertext of the first round

397
00:13:58,460 --> 00:14:02,810
we can perform the symmetric encryption

398
00:14:00,380 --> 00:14:04,850
attack strip off that first layer and we

399
00:14:02,810 --> 00:14:08,390
get plaintext which yields like number

400
00:14:04,850 --> 00:14:11,560
five and we're swimming in rage go

401
00:14:08,390 --> 00:14:13,670
internet money now this is this is great

402
00:14:11,560 --> 00:14:16,250
so we're gonna talk ripped a comic on

403
00:14:13,670 --> 00:14:18,620
that you really can't NIST flawed layers

404
00:14:16,250 --> 00:14:20,270
of encryption because each rounds interp

405
00:14:18,620 --> 00:14:21,260
individually flawed we could just rip

406
00:14:20,270 --> 00:14:22,850
off one layer at a time

407
00:14:21,260 --> 00:14:24,380
you really should replace it with some

408
00:14:22,850 --> 00:14:25,940
sort of you know public/private key

409
00:14:24,380 --> 00:14:28,460
scheme but yeah

410
00:14:25,940 --> 00:14:30,170
I hope you enjoyed that quick about me

411
00:14:28,460 --> 00:14:31,790
I'm sustaining engineer at canonical and

412
00:14:30,170 --> 00:14:33,439
only six Kremlin's and the banter ku and

413
00:14:31,790 --> 00:14:35,170
all that reverse engineering is just a

414
00:14:33,440 --> 00:14:37,160
fun hobby that I began not too long ago

415
00:14:35,170 --> 00:14:38,360
if you're looking for something kawaii

416
00:14:37,160 --> 00:14:39,860
you should check out a manga called

417
00:14:38,360 --> 00:14:42,410
about you it's basically a got

418
00:14:39,860 --> 00:14:44,300
introduction to Linux and it's very cute

419
00:14:42,410 --> 00:14:45,740
otherwise if you're interested in the

420
00:14:44,300 --> 00:14:48,380
vulnerabilities and there's talk all the

421
00:14:45,740 --> 00:14:51,410
executables and lock box binaries are on

422
00:14:48,380 --> 00:14:53,210
my blog you can download them you can

423
00:14:51,410 --> 00:14:55,100
try to reverse-engineer them try to

424
00:14:53,210 --> 00:14:56,900
those the text yourself if you get stuck

425
00:14:55,100 --> 00:14:58,310
have a look at the write-ups they'll get

426
00:14:56,900 --> 00:14:59,630
you to the next step but otherwise

427
00:14:58,310 --> 00:15:01,680
that's me

428
00:14:59,630 --> 00:15:03,740
thank you very much

429
00:15:01,680 --> 00:15:03,739
you

