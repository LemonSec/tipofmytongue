1
00:00:02,780 --> 00:00:06,959
my name is Matthew

2
00:00:04,830 --> 00:00:09,090
those of you who saw me last year may

3
00:00:06,960 --> 00:00:13,349
remember me from such exciting

4
00:00:09,090 --> 00:00:15,120
adventures as examining the applications

5
00:00:13,349 --> 00:00:16,920
that people used to rent East gooses

6
00:00:15,120 --> 00:00:18,900
finding out what I could about the

7
00:00:16,920 --> 00:00:21,869
frontend api's that those applications

8
00:00:18,900 --> 00:00:24,630
use and then figure out what information

9
00:00:21,869 --> 00:00:26,789
those services were willing to hand over

10
00:00:24,630 --> 00:00:28,740
to me as a result and by doing this were

11
00:00:26,789 --> 00:00:30,840
able to demonstrate that oh well you

12
00:00:28,740 --> 00:00:33,570
know we could watch people as they ride

13
00:00:30,840 --> 00:00:35,519
scooters in almost real-time we could

14
00:00:33,570 --> 00:00:37,770
figure out where they lived we could

15
00:00:35,520 --> 00:00:39,530
figure out every scooter that existed in

16
00:00:37,770 --> 00:00:41,460
the world belonging to each company and

17
00:00:39,530 --> 00:00:42,809
identifying markets that they were about

18
00:00:41,460 --> 00:00:44,940
to launch in but hadn't publicly

19
00:00:42,809 --> 00:00:47,099
announced yet to be honest you know

20
00:00:44,940 --> 00:00:49,739
massive surveillance privacy invasion

21
00:00:47,100 --> 00:00:53,100
nothing very exciting and there were no

22
00:00:49,739 --> 00:00:56,489
crimes now those of you who follow me on

23
00:00:53,100 --> 00:00:58,170
Twitter will note that I earlier said

24
00:00:56,489 --> 00:01:00,419
that this presentation would also

25
00:00:58,170 --> 00:01:03,770
involve no crimes I'm pleased to

26
00:01:00,420 --> 00:01:08,759
announce that that was a lie and

27
00:01:03,770 --> 00:01:11,290
[Applause]

28
00:01:08,759 --> 00:01:15,670
this presentation will contain

29
00:01:11,290 --> 00:01:16,540
discussion of actual crimes so just want

30
00:01:15,670 --> 00:01:18,759
to be upfront

31
00:01:16,540 --> 00:01:20,830
you probably shouldn't just do what I do

32
00:01:18,759 --> 00:01:22,600
unless you are reasonably confident

33
00:01:20,830 --> 00:01:25,750
that's the company in question that you

34
00:01:22,600 --> 00:01:30,880
do this to will not call the police on

35
00:01:25,750 --> 00:01:32,890
you so honestly I I just sort of assumed

36
00:01:30,880 --> 00:01:35,320
that it'll be fine and so far I've been

37
00:01:32,890 --> 00:01:36,850
right so if I'm not here next year

38
00:01:35,320 --> 00:01:40,750
because I've been arrested you'll know

39
00:01:36,850 --> 00:01:42,369
that I'm a terrible role model also I

40
00:01:40,750 --> 00:01:43,780
don't have much time a reason why

41
00:01:42,369 --> 00:01:45,460
massive content I'm going to be going

42
00:01:43,780 --> 00:01:46,810
through stuff very quickly so you'll

43
00:01:45,460 --> 00:01:49,479
probably end up with the impression that

44
00:01:46,810 --> 00:01:51,399
I have some idea what I'm doing I really

45
00:01:49,479 --> 00:01:53,530
want to emphasize that every point here

46
00:01:51,399 --> 00:01:55,869
where it sounds like I was clever came

47
00:01:53,530 --> 00:01:58,119
as a result of me spending an extremely

48
00:01:55,869 --> 00:02:00,310
long time doing extremely stupid things

49
00:01:58,119 --> 00:02:03,009
and getting nowhere and then finally

50
00:02:00,310 --> 00:02:06,569
getting lucky so I'm not actually good

51
00:02:03,009 --> 00:02:09,310
at this I'm just really bad at giving up

52
00:02:06,569 --> 00:02:11,950
we're going to be talking about scooters

53
00:02:09,310 --> 00:02:13,900
again these scooters don't speak to the

54
00:02:11,950 --> 00:02:16,929
same api's that the apps do the scooters

55
00:02:13,900 --> 00:02:18,640
have their own back-end API they talk to

56
00:02:16,930 --> 00:02:20,769
the internet and also access it from the

57
00:02:18,640 --> 00:02:22,690
most parts they run software they often

58
00:02:20,769 --> 00:02:25,329
have a large local attack surface

59
00:02:22,690 --> 00:02:27,670
because for some reason they often

60
00:02:25,329 --> 00:02:31,630
exposed Bluetooth which as we know is

61
00:02:27,670 --> 00:02:34,358
secure the scusa company we're going to

62
00:02:31,630 --> 00:02:36,040
be talking about today is bird bird has

63
00:02:34,359 --> 00:02:37,269
a range of scooters we're going to be

64
00:02:36,040 --> 00:02:39,100
talking about stuff that's applicable to

65
00:02:37,269 --> 00:02:41,380
all of them so these are the birds

66
00:02:39,100 --> 00:02:44,410
slender boys these are the bird disco

67
00:02:41,380 --> 00:02:47,260
boys bird thick boys sort of space boys

68
00:02:44,410 --> 00:02:48,670
these are the birds zero we're not going

69
00:02:47,260 --> 00:02:51,310
to be talking about those because those

70
00:02:48,670 --> 00:02:53,290
is a completely different platform that

71
00:02:51,310 --> 00:02:55,739
is also shared with some other scooter

72
00:02:53,290 --> 00:02:55,739
companies

73
00:03:00,329 --> 00:03:07,599
so what we talking about in the past

74
00:03:05,769 --> 00:03:09,159
feasts goes as well often just commodity

75
00:03:07,599 --> 00:03:10,899
scooters with bits of electronics

76
00:03:09,159 --> 00:03:12,219
replaced but these days most of the

77
00:03:10,900 --> 00:03:14,620
largest kusa companies are actually

78
00:03:12,219 --> 00:03:16,030
using their own customized platforms so

79
00:03:14,620 --> 00:03:17,260
that they don't for instance just fall

80
00:03:16,030 --> 00:03:19,950
apart while someone's riding them

81
00:03:17,260 --> 00:03:23,370
resulting in people being dead so

82
00:03:19,950 --> 00:03:25,629
however they have in many cases kept

83
00:03:23,370 --> 00:03:27,819
elements of the technology the same and

84
00:03:25,629 --> 00:03:30,999
so the first couple of scooters I showed

85
00:03:27,819 --> 00:03:34,450
you there were Xiaomi m3 65 s and then

86
00:03:30,999 --> 00:03:35,888
Segway es 2s but even with the modern

87
00:03:34,450 --> 00:03:38,530
custom ones they're still using this

88
00:03:35,889 --> 00:03:40,359
same box now this box is very

89
00:03:38,530 --> 00:03:42,579
straightforward it is plastic it's black

90
00:03:40,359 --> 00:03:44,620
it sits on top of the scooter and it's

91
00:03:42,579 --> 00:03:47,290
got a QR codes on this you scan the QR

92
00:03:44,620 --> 00:03:48,790
codes with the app the app reads out a

93
00:03:47,290 --> 00:03:51,879
unique identification number from you

94
00:03:48,790 --> 00:03:54,250
from the QR codes and then it goes and

95
00:03:51,879 --> 00:03:55,689
reports that to the API and then you pay

96
00:03:54,250 --> 00:03:57,849
money and then the scoops goes beep and

97
00:03:55,689 --> 00:04:00,819
then you ride the scooter everything's

98
00:03:57,849 --> 00:04:02,858
fine now I did not take this picture I

99
00:04:00,819 --> 00:04:04,899
found this picture on the FCC's website

100
00:04:02,859 --> 00:04:07,359
as discussed yesterday you can find a

101
00:04:04,900 --> 00:04:10,090
lot of things by just going to FCC IDs

102
00:04:07,359 --> 00:04:12,310
or IO typing in a company name and then

103
00:04:10,090 --> 00:04:14,919
ending up with pictures of the hardware

104
00:04:12,310 --> 00:04:18,009
they produce such as this picture that I

105
00:04:14,919 --> 00:04:19,120
cut and pasted as for PDF so this is the

106
00:04:18,009 --> 00:04:21,459
top side of the board

107
00:04:19,120 --> 00:04:22,840
it's got various little electronic key

108
00:04:21,459 --> 00:04:24,699
things that I don't really understand

109
00:04:22,840 --> 00:04:27,909
because I'm not a hardware person this

110
00:04:24,699 --> 00:04:32,620
one however is a Nordic MRF 52 Bluetooth

111
00:04:27,909 --> 00:04:33,550
controller this is an SD micro stm32

112
00:04:32,620 --> 00:04:37,840
system-on-chip

113
00:04:33,550 --> 00:04:39,550
this is a giant modem the modem weirdly

114
00:04:37,840 --> 00:04:41,830
has an application processor that's

115
00:04:39,550 --> 00:04:43,539
capable of running significantly more

116
00:04:41,830 --> 00:04:45,550
software than the rest of the chips on

117
00:04:43,539 --> 00:04:50,020
this board put together and in this case

118
00:04:45,550 --> 00:04:52,000
it's almost entirely unused so this size

119
00:04:50,020 --> 00:04:53,469
the board well okay we have some chips

120
00:04:52,000 --> 00:04:55,270
obviously we would like to do things

121
00:04:53,469 --> 00:04:56,919
with the chips but how do we do things

122
00:04:55,270 --> 00:04:58,840
with the chips I didn't really want to

123
00:04:56,919 --> 00:05:00,729
resort to having to decap chips let's

124
00:04:58,840 --> 00:05:03,940
not go there this size the board

125
00:05:00,729 --> 00:05:07,870
thankfully helps us out so over here you

126
00:05:03,940 --> 00:05:10,479
see a bunch of pads that are basically

127
00:05:07,870 --> 00:05:12,830
underneath where the Nordic MRF 52 was

128
00:05:10,479 --> 00:05:15,639
here's a very similar look

129
00:05:12,830 --> 00:05:19,340
set of pads that is underneath where the

130
00:05:15,639 --> 00:05:21,530
stm32 is so that implies well okay

131
00:05:19,340 --> 00:05:22,489
there's some sort of causal linkage here

132
00:05:21,530 --> 00:05:24,409
what could this be

133
00:05:22,490 --> 00:05:26,479
and the answer is that if you have a

134
00:05:24,409 --> 00:05:28,550
cable that looks like this you have made

135
00:05:26,479 --> 00:05:31,610
some poor life choices because this is a

136
00:05:28,550 --> 00:05:33,289
cable that is made out of some patch

137
00:05:31,610 --> 00:05:34,840
cables but the plastic filed off and

138
00:05:33,289 --> 00:05:36,889
then held together with electrical tape

139
00:05:34,840 --> 00:05:39,349
so you know if you're doing this

140
00:05:36,889 --> 00:05:42,349
professionally just do a better job than

141
00:05:39,349 --> 00:05:46,370
me I lost so much time to this just not

142
00:05:42,349 --> 00:05:48,620
making contact with things but you end

143
00:05:46,370 --> 00:05:51,289
up discovering that this if these pads

144
00:05:48,620 --> 00:05:54,319
are exposing the serial wire debug

145
00:05:51,289 --> 00:05:56,568
interface which is basically just JTAG

146
00:05:54,319 --> 00:05:58,340
but with fewer pins because JTAG has far

147
00:05:56,569 --> 00:06:01,460
too many pins there's an application

148
00:05:58,340 --> 00:06:04,460
called open OCD which speaks various

149
00:06:01,460 --> 00:06:09,739
embedded debug protocols including JTAG

150
00:06:04,460 --> 00:06:12,169
and swd and there's hardware just called

151
00:06:09,740 --> 00:06:15,139
an ST link you can buy cheap ones for

152
00:06:12,169 --> 00:06:16,280
almost no money off Amazon and you plug

153
00:06:15,139 --> 00:06:20,270
a bunch of wires into them plug them

154
00:06:16,280 --> 00:06:22,520
into USB and then you can speak OCD so

155
00:06:20,270 --> 00:06:25,370
sorry you speak swd so one of the fun

156
00:06:22,520 --> 00:06:27,349
things that swd lets you do is read out

157
00:06:25,370 --> 00:06:30,229
the firmware from the running chip

158
00:06:27,349 --> 00:06:32,779
unless various protections have been

159
00:06:30,229 --> 00:06:34,550
enabled so thankfully these protections

160
00:06:32,779 --> 00:06:36,259
were not enabled and therefore it was

161
00:06:34,550 --> 00:06:40,069
straightforward to dump the firmware for

162
00:06:36,259 --> 00:06:43,039
both the Nordic ship and the stm32 but

163
00:06:40,069 --> 00:06:46,490
as well you're also able to dump memory

164
00:06:43,039 --> 00:06:49,159
states you're able to even use a gdb

165
00:06:46,490 --> 00:06:51,259
stub connect gdb set breakpoints and

166
00:06:49,159 --> 00:06:53,240
have the actual physical Hardware stop

167
00:06:51,259 --> 00:06:55,279
execution whenever you reach a specific

168
00:06:53,240 --> 00:06:57,949
address or whenever a specific memory

169
00:06:55,279 --> 00:07:00,469
address is written to so this means that

170
00:06:57,949 --> 00:07:02,900
we're basically able to real-time debug

171
00:07:00,469 --> 00:07:04,940
and analyze the behavior of the firmware

172
00:07:02,900 --> 00:07:08,150
so later on that's going to be a lot

173
00:07:04,940 --> 00:07:10,219
more useful but we dump the firmware the

174
00:07:08,150 --> 00:07:12,198
first thing we do is run strings on its

175
00:07:10,219 --> 00:07:14,960
strings is just a small application that

176
00:07:12,199 --> 00:07:18,289
looks for strings of ASCII characters

177
00:07:14,960 --> 00:07:20,839
inside a binary and among the strings

178
00:07:18,289 --> 00:07:24,279
was set Mo's to free drive mode which

179
00:07:20,839 --> 00:07:28,870
sounded very exciting I like free things

180
00:07:24,279 --> 00:07:33,020
so through this firmware into Deidre

181
00:07:28,870 --> 00:07:35,139
Deidre is released by the NSA it's a

182
00:07:33,020 --> 00:07:37,609
reverse engineering toolkit it's a

183
00:07:35,139 --> 00:07:39,620
disassembler but also a decompiler it's

184
00:07:37,610 --> 00:07:41,870
very good at turning stuff into

185
00:07:39,620 --> 00:07:46,930
something that looks kind of like see if

186
00:07:41,870 --> 00:07:50,169
you squint arse enough and it knows arm

187
00:07:46,930 --> 00:07:53,270
because of course it does so you put the

188
00:07:50,169 --> 00:07:56,330
firmware in there you tell Deidre what

189
00:07:53,270 --> 00:07:58,430
the memory map of D CPU looks like you

190
00:07:56,330 --> 00:08:00,050
press go and then suddenly you've got

191
00:07:58,430 --> 00:08:01,460
something that approximates source codes

192
00:08:00,050 --> 00:08:03,529
which makes it very straightforward to

193
00:08:01,460 --> 00:08:05,630
figure out what's going on so you search

194
00:08:03,529 --> 00:08:07,580
for the string set mode to free drive

195
00:08:05,630 --> 00:08:09,649
mode you find that there's one code part

196
00:08:07,580 --> 00:08:11,568
that references it and you find that

197
00:08:09,649 --> 00:08:13,069
it's embedded in the middle of a large

198
00:08:11,569 --> 00:08:15,259
switch statements the switch statement

199
00:08:13,069 --> 00:08:17,149
takes various commands and does various

200
00:08:15,259 --> 00:08:19,069
things in response so that's good there

201
00:08:17,149 --> 00:08:21,709
appears to be a command we can send to

202
00:08:19,069 --> 00:08:23,000
it that enables free drive mode you go

203
00:08:21,709 --> 00:08:24,529
back up the call chain and you

204
00:08:23,000 --> 00:08:26,089
eventually realize based on some other

205
00:08:24,529 --> 00:08:29,419
debug output that's been left inside the

206
00:08:26,089 --> 00:08:31,639
binary oh these bytes these command

207
00:08:29,419 --> 00:08:35,120
bytes are coming straight over a serial

208
00:08:31,639 --> 00:08:37,339
you art from the Bluetooth controller so

209
00:08:35,120 --> 00:08:40,250
if I want to send this free drive

210
00:08:37,339 --> 00:08:41,630
command to the SCOOTER controller I send

211
00:08:40,250 --> 00:08:45,730
it via bluetooth so this is sounding

212
00:08:41,630 --> 00:08:48,439
positive because bluetooth is local but

213
00:08:45,730 --> 00:08:49,850
now we need to figure out how we reverse

214
00:08:48,440 --> 00:08:52,760
engineer the Bluetooth halsworth

215
00:08:49,850 --> 00:08:56,120
thankfully the Nordic NRO 52 is yet

216
00:08:52,760 --> 00:08:58,040
another arm so this one board contains

217
00:08:56,120 --> 00:09:01,490
an incredible number of separate ARM

218
00:08:58,040 --> 00:09:04,069
cores so it's a beep firmware for the

219
00:09:01,490 --> 00:09:07,790
MRF 52 which we can also dump over s WD

220
00:09:04,069 --> 00:09:10,399
is split into two large components the

221
00:09:07,790 --> 00:09:12,079
first one is what Nozick called the soft

222
00:09:10,399 --> 00:09:15,170
device it's the actual Bluetooth

223
00:09:12,079 --> 00:09:16,760
protocol code it's it's it's given to

224
00:09:15,170 --> 00:09:17,810
you in binary form you choose the

225
00:09:16,760 --> 00:09:19,819
appropriate soft device for your

226
00:09:17,810 --> 00:09:22,579
hardware and then you link that into

227
00:09:19,819 --> 00:09:24,649
your firmware above that there's your

228
00:09:22,579 --> 00:09:27,469
application code that runs on top of

229
00:09:24,649 --> 00:09:30,650
that that is derived from the nordic sdk

230
00:09:27,470 --> 00:09:33,470
nice thing about the sdk is that the

231
00:09:30,650 --> 00:09:37,640
source codes that is provided and if

232
00:09:33,470 --> 00:09:38,700
you've got the ability to decompile the

233
00:09:37,640 --> 00:09:40,680
firmware back into

234
00:09:38,700 --> 00:09:43,350
thing that approximates see you can very

235
00:09:40,680 --> 00:09:45,839
quickly line up the binary functions

236
00:09:43,350 --> 00:09:47,370
with the SDK functions figure out what

237
00:09:45,840 --> 00:09:49,830
this code is doing and look for the

238
00:09:47,370 --> 00:09:51,420
actual application logic so got through

239
00:09:49,830 --> 00:09:53,130
there and found okay there's only a

240
00:09:51,420 --> 00:09:55,170
small number of functions in this that

241
00:09:53,130 --> 00:09:57,080
are not from the SDK so that's great

242
00:09:55,170 --> 00:09:59,910
those are probably the interesting ones

243
00:09:57,080 --> 00:10:01,920
some Bluetooth Low Energy basically you

244
00:09:59,910 --> 00:10:03,839
expose a bunch of attributes you connect

245
00:10:01,920 --> 00:10:05,490
you send stuff to those actor you write

246
00:10:03,840 --> 00:10:07,290
to those characteristics and then

247
00:10:05,490 --> 00:10:09,030
something happens so in this case one of

248
00:10:07,290 --> 00:10:11,550
the attributes you write to it and then

249
00:10:09,030 --> 00:10:14,459
that gets put onto the serial line and

250
00:10:11,550 --> 00:10:15,660
gets passed over to the SOC so brilliant

251
00:10:14,460 --> 00:10:17,790
straightforward I just write this

252
00:10:15,660 --> 00:10:19,380
command to the correct Bluetooth

253
00:10:17,790 --> 00:10:23,459
characteristic and then the SCOOTER

254
00:10:19,380 --> 00:10:25,080
unlocks sadly no so Bluetooth itself and

255
00:10:23,460 --> 00:10:27,390
Bluetooth Low Energy be connection level

256
00:10:25,080 --> 00:10:28,890
stuff is encrypted reasonably secure or

257
00:10:27,390 --> 00:10:30,390
not very secure or fine whatever

258
00:10:28,890 --> 00:10:33,960
we're talking about stuff that's at the

259
00:10:30,390 --> 00:10:36,120
level above that so I was looking

260
00:10:33,960 --> 00:10:39,300
through this and there's a code part

261
00:10:36,120 --> 00:10:43,320
where certain commands will only be

262
00:10:39,300 --> 00:10:45,689
passed on if a global variable has been

263
00:10:43,320 --> 00:10:47,280
set to 1 and that variable is only set

264
00:10:45,690 --> 00:10:49,200
to 1 through a somewhat convoluted code

265
00:10:47,280 --> 00:10:50,819
path which had some big very complex

266
00:10:49,200 --> 00:10:54,300
functions that it's a gloss of complex

267
00:10:50,820 --> 00:10:57,330
mathematics so look through those one of

268
00:10:54,300 --> 00:11:00,959
those has a pointer to a just table of

269
00:10:57,330 --> 00:11:02,670
values took those numbers pasted those

270
00:11:00,960 --> 00:11:06,390
numbers into Google and Google said oh

271
00:11:02,670 --> 00:11:09,150
yeah that's the AES sbox values so I now

272
00:11:06,390 --> 00:11:11,610
know oh it's AES and so I've now got the

273
00:11:09,150 --> 00:11:13,050
encryption because it references one set

274
00:11:11,610 --> 00:11:14,310
of s possibilities I've got the decrypt

275
00:11:13,050 --> 00:11:17,370
function which references the other set

276
00:11:14,310 --> 00:11:19,949
so now I know where the encryption and

277
00:11:17,370 --> 00:11:22,380
decryption are now what made this even

278
00:11:19,950 --> 00:11:24,870
easier is that gnaws Excel dev boards

279
00:11:22,380 --> 00:11:27,600
with the exact same chip as the one that

280
00:11:24,870 --> 00:11:29,910
was on this scooter so I was actually

281
00:11:27,600 --> 00:11:31,680
able to flash the scooter Bluetooth

282
00:11:29,910 --> 00:11:33,630
firmware onto this dev board run it

283
00:11:31,680 --> 00:11:35,160
directly and investigate it plug into

284
00:11:33,630 --> 00:11:37,050
USB and certain line to use my shonky

285
00:11:35,160 --> 00:11:38,790
cable so I could just set a breakpoint

286
00:11:37,050 --> 00:11:41,010
for the entry to the encryption function

287
00:11:38,790 --> 00:11:42,630
and then well I've got my encryption key

288
00:11:41,010 --> 00:11:43,350
but that's not very interesting so I

289
00:11:42,630 --> 00:11:47,010
went further

290
00:11:43,350 --> 00:11:49,200
it's aes-128 we've got 16 bytes of key

291
00:11:47,010 --> 00:11:51,210
data 8 bytes of that are hard-coded

292
00:11:49,200 --> 00:11:52,130
values 4 bytes of it seems to be

293
00:11:51,210 --> 00:11:55,490
randomly generated

294
00:11:52,130 --> 00:11:57,110
and are then stored in another Bluetooth

295
00:11:55,490 --> 00:11:59,180
characteristics so you can read that

296
00:11:57,110 --> 00:12:01,250
value from the scooter and incorporate

297
00:11:59,180 --> 00:12:04,430
that into the key and the final four

298
00:12:01,250 --> 00:12:05,990
bytes are the take the serial number and

299
00:12:04,430 --> 00:12:08,089
then pass it through the a to I function

300
00:12:05,990 --> 00:12:11,509
this is an interesting choice because

301
00:12:08,089 --> 00:12:13,610
a2i stops parsing at the first non

302
00:12:11,509 --> 00:12:19,040
numeric character and serial numbers

303
00:12:13,610 --> 00:12:21,800
start with n which meant that that bit

304
00:12:19,040 --> 00:12:23,449
of the key was basically always zero now

305
00:12:21,800 --> 00:12:25,459
to be fair the first generation scooters

306
00:12:23,449 --> 00:12:27,380
actually did have some numbers not a lot

307
00:12:25,459 --> 00:12:30,109
of them so this wasn't completely

308
00:12:27,380 --> 00:12:32,810
ludicrous anyway not the best choice so

309
00:12:30,110 --> 00:12:34,670
you use that key to encrypt another key

310
00:12:32,810 --> 00:12:37,189
as you can see the other key is very

311
00:12:34,670 --> 00:12:39,160
high entropy the encrypted key is then

312
00:12:37,190 --> 00:12:43,250
your actual encryption key isin though

313
00:12:39,160 --> 00:12:45,860
use stick o XB one 3d which looks sort

314
00:12:43,250 --> 00:12:47,630
of like bird and then you encrypt this

315
00:12:45,860 --> 00:12:49,880
value with the encrypted key you pass

316
00:12:47,630 --> 00:12:51,620
that and then the scooter goes ah right

317
00:12:49,880 --> 00:12:53,660
your offense cases and now you can send

318
00:12:51,620 --> 00:12:55,459
the free DriveMode thing and you do that

319
00:12:53,660 --> 00:12:57,319
and the scooter goes beep and you get on

320
00:12:55,459 --> 00:12:58,729
the scooter and it goes and then about

321
00:12:57,319 --> 00:13:00,949
two minutes later it starts going

322
00:12:58,730 --> 00:13:02,329
because apparently it's still talking to

323
00:13:00,949 --> 00:13:03,709
the central network and it told the

324
00:13:02,329 --> 00:13:05,180
network that it was unlocked and then

325
00:13:03,709 --> 00:13:06,739
that what was well that string who

326
00:13:05,180 --> 00:13:08,029
shouldn't be and sends a lot command and

327
00:13:06,740 --> 00:13:10,130
then the scooter stops going again

328
00:13:08,029 --> 00:13:15,829
well ok fine I can steal a scooter for

329
00:13:10,130 --> 00:13:18,079
two minutes anyway so we can go past

330
00:13:15,829 --> 00:13:20,420
that we can check whether the firmware

331
00:13:18,079 --> 00:13:22,939
on the scooter is actually validated in

332
00:13:20,420 --> 00:13:25,490
any way answer no interesting design

333
00:13:22,940 --> 00:13:28,069
choice on the birds the throttle control

334
00:13:25,490 --> 00:13:30,139
and on ones which have electronic brace

335
00:13:28,069 --> 00:13:33,170
the brake control go through the control

336
00:13:30,139 --> 00:13:34,610
box and so you can if you want for

337
00:13:33,170 --> 00:13:36,139
instance just modify the firmware so

338
00:13:34,610 --> 00:13:38,449
there's after a minute the accelerator

339
00:13:36,139 --> 00:13:39,980
stops working and people are oh gosh my

340
00:13:38,449 --> 00:13:41,180
scooter has mr. Easley stopped working I

341
00:13:39,980 --> 00:13:42,410
mean the alternative would be that you

342
00:13:41,180 --> 00:13:43,880
disabled the brakes and set the throttle

343
00:13:42,410 --> 00:13:46,819
to full but I would be bad so don't do

344
00:13:43,880 --> 00:13:48,980
that and then as we mentioned before

345
00:13:46,819 --> 00:13:51,050
these scooter talks to the internet via

346
00:13:48,980 --> 00:13:54,079
modem runs Linux you can attach a serial

347
00:13:51,050 --> 00:13:56,420
port to it it speaks 1.8 volt TTL the

348
00:13:54,079 --> 00:14:00,199
root password for the modem is Oh a

349
00:13:56,420 --> 00:14:03,889
Linux one two three I didn't find that

350
00:14:00,199 --> 00:14:05,449
out I just googled for the modem name

351
00:14:03,889 --> 00:14:07,370
and found

352
00:14:05,450 --> 00:14:08,980
komm page that gave me the root password

353
00:14:07,370 --> 00:14:10,730
so that was good

354
00:14:08,980 --> 00:14:12,530
Google makes a lot of things much easier

355
00:14:10,730 --> 00:14:14,600
sorry I'm not supposed to be advertising

356
00:14:12,530 --> 00:14:16,819
anyway but the fact that the modem runs

357
00:14:14,600 --> 00:14:18,500
Linux is entirely unhelpful nothing on

358
00:14:16,820 --> 00:14:21,080
the application processor on the modem

359
00:14:18,500 --> 00:14:23,810
is used here except for parsing 80

360
00:14:21,080 --> 00:14:25,430
commands the modem speaks SSL so it can

361
00:14:23,810 --> 00:14:27,709
do an encrypted communication back to

362
00:14:25,430 --> 00:14:30,439
the server without the SCM hounds have

363
00:14:27,710 --> 00:14:31,940
an IP stack you can trace the modem

364
00:14:30,440 --> 00:14:33,560
access by just running ggb with a

365
00:14:31,940 --> 00:14:34,700
breakpoint on the application processor

366
00:14:33,560 --> 00:14:36,619
every time it sends something to the

367
00:14:34,700 --> 00:14:38,360
modem you break you dereference the

368
00:14:36,620 --> 00:14:41,090
pointer and then you just pull out the

369
00:14:38,360 --> 00:14:42,680
text so that way you get debug output

370
00:14:41,090 --> 00:14:44,750
even though they remove the debug

371
00:14:42,680 --> 00:14:47,479
function and then you figure out that

372
00:14:44,750 --> 00:14:49,820
yes you can be a scooter you can connect

373
00:14:47,480 --> 00:14:51,500
to the scooter Network you need to send

374
00:14:49,820 --> 00:14:52,880
a scooter serial number this is very

375
00:14:51,500 --> 00:14:54,530
straight forward because they all

376
00:14:52,880 --> 00:14:56,990
broadcast their serial number over

377
00:14:54,530 --> 00:14:59,180
Bluetooth and also over their API and

378
00:14:56,990 --> 00:15:00,830
you need an IMEI but the fun thing is it

379
00:14:59,180 --> 00:15:03,170
doesn't need to be the scooters IMEI it

380
00:15:00,830 --> 00:15:04,730
just needs to be a valid IMEI at which

381
00:15:03,170 --> 00:15:06,530
point you can be a scooter you can

382
00:15:04,730 --> 00:15:09,260
update the locations of scooters and but

383
00:15:06,530 --> 00:15:10,640
when you connect the scooter loses its

384
00:15:09,260 --> 00:15:12,530
connection to the Internet and you are

385
00:15:10,640 --> 00:15:15,240
now the scooter so I would like to say

386
00:15:12,530 --> 00:15:20,350
thank you to Birds for not suing me

387
00:15:15,240 --> 00:15:20,350
[Applause]

