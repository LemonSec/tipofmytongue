1
00:00:04,240 --> 00:00:05,073
- Hello, everyone.

2
00:00:05,073 --> 00:00:07,340
My hair has been causing
problems with the microphone.

3
00:00:07,340 --> 00:00:08,993
So hopefully this all works fine.

4
00:00:10,080 --> 00:00:11,240
Access control on Sesame Street.

5
00:00:11,240 --> 00:00:14,010
Yeah, so Matthew Daley, Matt Daley,

6
00:00:14,010 --> 00:00:17,860
Principal Research Consultant
at Aura Information Security,

7
00:00:17,860 --> 00:00:19,262
and general weirdo.

8
00:00:21,080 --> 00:00:22,720
Without further ado, let's begin.

9
00:00:22,720 --> 00:00:24,244
Now two things.

10
00:00:24,245 --> 00:00:25,600
We're doing this live.

11
00:00:25,600 --> 00:00:27,570
I've only seen this talk once.

12
00:00:27,570 --> 00:00:28,800
And so I've seen it one more time

13
00:00:28,800 --> 00:00:30,570
than everyone else in this room.

14
00:00:30,570 --> 00:00:32,810
You'll see why soon,

15
00:00:32,810 --> 00:00:36,580
but I lost access to my slides
rather late in the process,

16
00:00:36,580 --> 00:00:38,379
and had to redo them all last night.

17
00:00:39,335 --> 00:00:41,140
So if I seem a bit out of it,

18
00:00:41,140 --> 00:00:45,980
and I have no idea how much
my time limit is going,

19
00:00:45,980 --> 00:00:47,723
it's 44 minutes still, great,

20
00:00:48,600 --> 00:00:49,918
then that's on me.

21
00:00:49,918 --> 00:00:54,080
And this is also a information
dump on a bunch of research

22
00:00:54,080 --> 00:00:55,290
that I've done over the last few months

23
00:00:55,290 --> 00:00:57,193
on Gallagher Card Systems.

24
00:00:59,478 --> 00:01:03,600
A talk is not the best format
for here's list of op codes

25
00:01:03,600 --> 00:01:06,740
and here's a list of data
types, and stuff like that.

26
00:01:06,740 --> 00:01:07,573
So after this talk,

27
00:01:07,573 --> 00:01:10,550
I'll be releasing information
in a more usable format,

28
00:01:10,550 --> 00:01:13,463
bunch of documentation and source files.

29
00:01:14,310 --> 00:01:16,920
But for now, you get this melange

30
00:01:16,920 --> 00:01:21,920
of bad art and information.

31
00:01:22,530 --> 00:01:24,320
So let's start with what the

32
00:01:24,320 --> 00:01:26,550
average access control system looks like.

33
00:01:26,550 --> 00:01:30,500
So you start with a controller,
and you usually have,

34
00:01:30,500 --> 00:01:33,000
on each door you'll have a reader,

35
00:01:33,000 --> 00:01:34,300
and an RFID reader,

36
00:01:34,300 --> 00:01:37,399
a lock, so like one of those magnet ones,

37
00:01:37,400 --> 00:01:38,880
and an input which will tell

38
00:01:38,880 --> 00:01:41,070
whether the door is actually open or not,

39
00:01:41,070 --> 00:01:44,449
so it can beep annoyingly
when you leave it open.

40
00:01:44,450 --> 00:01:47,650
And these are all connected
to the controller, usually,

41
00:01:47,650 --> 00:01:51,070
and they can be connected
directly to the controller,

42
00:01:51,070 --> 00:01:53,160
or they can be connected
to an IO breakout.

43
00:01:53,160 --> 00:01:55,880
But either way, you'll have
lots of those three items,

44
00:01:55,880 --> 00:01:58,280
connected to the controller or a breakout,

45
00:01:58,280 --> 00:01:59,870
and they will connect to the controller.

46
00:01:59,870 --> 00:02:02,700
And you might have more
IO breakouts as well.

47
00:02:02,700 --> 00:02:05,400
And then you need some kind
of administration tool here.

48
00:02:05,400 --> 00:02:09,470
So Officer PC is a terrible name,

49
00:02:09,470 --> 00:02:12,350
It wasn't the Officer PC, but
this is meant to represent

50
00:02:12,350 --> 00:02:14,530
the P.C. that the security guard would use

51
00:02:14,530 --> 00:02:17,297
to see who's on site,
who's trying to break

52
00:02:17,297 --> 00:02:20,743
and what needs to be attended
to, that kind of thing.

53
00:02:21,730 --> 00:02:24,470
And then you'll also have
a administrative console.

54
00:02:24,470 --> 00:02:27,194
So this is where the site installer

55
00:02:27,194 --> 00:02:30,459
can install, add new hardware,

56
00:02:30,460 --> 00:02:33,733
set up new cards, fix
faults, that kind of thing.

57
00:02:34,990 --> 00:02:38,560
So it's pretty obvious, really,

58
00:02:38,560 --> 00:02:41,560
the idea is that a user
will will scan their card,

59
00:02:41,560 --> 00:02:42,890
hold up to a reader,

60
00:02:42,890 --> 00:02:44,269
reader will send that information to

61
00:02:44,270 --> 00:02:46,360
the IO breakout board,

62
00:02:46,360 --> 00:02:47,750
sends it along to the controller.

63
00:02:47,750 --> 00:02:48,760
The controller has a think.

64
00:02:48,760 --> 00:02:51,980
To see whether that
person is A-okay or not,

65
00:02:51,980 --> 00:02:53,410
says, "Yes."

66
00:02:53,410 --> 00:02:54,609
And then usually the IO,

67
00:02:54,610 --> 00:02:58,640
it's the IO break-out board,
it's that board's job to

68
00:02:58,640 --> 00:03:01,563
unlock the door and make the
reader say a happy noise.

69
00:03:03,090 --> 00:03:05,880
So how does this badly drawn diagram

70
00:03:05,880 --> 00:03:09,400
fit within the Gallagher
brand access control system?

71
00:03:09,400 --> 00:03:10,390
Their marketing material

72
00:03:10,390 --> 00:03:12,852
is a lot better than this, for starters.

73
00:03:13,810 --> 00:03:15,160
So let's look at the controller first.

74
00:03:15,160 --> 00:03:18,720
So the Gallagher state
of art controlaghar,

75
00:03:18,720 --> 00:03:19,553
controlaghar?

76
00:03:19,553 --> 00:03:21,530
Wow.
(audience laughs)

77
00:03:21,530 --> 00:03:23,603
I just gave you a new brand name.

78
00:03:24,490 --> 00:03:26,410
Controller 6000 is the current

79
00:03:26,410 --> 00:03:28,060
state of art Gallagher controller

80
00:03:29,310 --> 00:03:32,865
This chunky brick size
thing, about this big.

81
00:03:32,865 --> 00:03:36,580
And it's scalable, intelligent
control, blah, blah, blah.

82
00:03:36,580 --> 00:03:39,450
All you need to know is that
those green blocks on the side

83
00:03:39,450 --> 00:03:41,609
are where you can
connect in other devices,

84
00:03:41,610 --> 00:03:43,630
using protocols that
I'll talk about shortly.

85
00:03:43,630 --> 00:03:45,950
And the ethernet cable on
the right hand side there,

86
00:03:45,950 --> 00:03:49,123
for talking to the
administrative consoles.

87
00:03:51,220 --> 00:03:52,060
Yeah, okay.

88
00:03:52,060 --> 00:03:54,973
And then you also plug in a,

89
00:03:54,973 --> 00:03:57,350
you can also plug in
additional plug-in boards

90
00:03:57,350 --> 00:03:59,888
from the bottom, to additional,

91
00:03:59,889 --> 00:04:02,730
have more doors for
example, it's configurable.

92
00:04:02,730 --> 00:04:04,890
The idea is that this
is just the top part.

93
00:04:04,890 --> 00:04:05,722
Then you'll have to slide

94
00:04:05,723 --> 00:04:07,000
this big chunky thing in the bottom.

95
00:04:07,000 --> 00:04:10,143
And then you can have this
customizable basically.

96
00:04:11,750 --> 00:04:14,070
Before this Controller 6000,

97
00:04:14,070 --> 00:04:17,070
there was the Cardax FT controller 3000,

98
00:04:18,220 --> 00:04:22,040
which comes in green
and also a fetching red.

99
00:04:22,040 --> 00:04:26,550
Now Cardax was the previous
name of this technology.

100
00:04:26,550 --> 00:04:29,370
And, I will admit, I don't
know the business background,

101
00:04:29,370 --> 00:04:31,350
but I believe they were
bought out by Gallagher

102
00:04:31,350 --> 00:04:32,190
at some point.

103
00:04:32,190 --> 00:04:34,670
So you'll see references
to Cardax and Gallagher,

104
00:04:34,670 --> 00:04:36,143
kind of interchangeably,
especially from me,

105
00:04:36,143 --> 00:04:39,000
because I don't know which
one is considered which,

106
00:04:39,000 --> 00:04:42,240
but the idea is that
they're interchangeable.

107
00:04:42,240 --> 00:04:44,360
It's just brand name changes, basically.

108
00:04:44,360 --> 00:04:46,590
And yes, on this chip, on this board here,

109
00:04:46,590 --> 00:04:48,729
that is an Intel i386.

110
00:04:48,730 --> 00:04:50,420
So that's the era that we're talking about

111
00:04:50,420 --> 00:04:53,380
for these Cardax technologies.

112
00:04:53,380 --> 00:04:56,620
I think I'm the only
owner, and I don't know,

113
00:04:56,620 --> 00:04:58,700
but it took me so long to get this book.

114
00:04:58,700 --> 00:05:01,510
This book helped me,
helped me reverse engineer

115
00:05:01,510 --> 00:05:03,330
some of the firmware on these things,

116
00:05:03,330 --> 00:05:06,109
which uses an embedded DOS based...

117
00:05:06,110 --> 00:05:08,720
Well it's embedded kernel
that pretends to be Windows.

118
00:05:08,720 --> 00:05:12,960
And it runs on 386 CPUs,
and the book is from the era

119
00:05:12,960 --> 00:05:15,409
where ARM is a up-and-coming technology,

120
00:05:15,410 --> 00:05:17,290
and soon we'll have 32 bit and 64 bit.

121
00:05:17,290 --> 00:05:18,290
So that's very cool.

122
00:05:19,135 --> 00:05:19,968
Okay.

123
00:05:19,968 --> 00:05:22,760
So now that we've seen
you got your controller.

124
00:05:22,760 --> 00:05:23,710
Let's have a look at a reader.

125
00:05:23,710 --> 00:05:27,409
So this is the current
state-of-art in reader technology.

126
00:05:27,410 --> 00:05:30,403
T-20, it's like the
Terminator or something?

127
00:05:34,330 --> 00:05:35,469
It does all the things.

128
00:05:35,470 --> 00:05:39,320
And then you've got all the other crews.

129
00:05:39,320 --> 00:05:43,107
So we've got long boy,
bigger boy, square boy.

130
00:05:43,107 --> 00:05:44,450
(audience laughs)

131
00:05:44,450 --> 00:05:47,670
But there is reasons
to use different ones.

132
00:05:47,670 --> 00:05:50,980
T-15, for example, is
very weatherproof, yeah.

133
00:05:50,980 --> 00:05:54,000
So these are what Gallagher
wants you to be using.

134
00:05:54,000 --> 00:05:55,940
And for good reason.

135
00:05:55,940 --> 00:05:57,910
Unfortunately, what
you'll see out there still

136
00:05:57,910 --> 00:05:59,210
is from the Cardax era.

137
00:05:59,210 --> 00:06:03,760
So this teardrop reader,
it's called and by the way,

138
00:06:03,760 --> 00:06:07,240
all the readers have this
trademark green squiggle.

139
00:06:07,240 --> 00:06:09,080
Which is not an S, it's
the opposite of as S,

140
00:06:09,080 --> 00:06:12,300
as I figured out alarmingly
late during all this.

141
00:06:12,300 --> 00:06:16,100
But, yeah, Cardax reader.

142
00:06:16,100 --> 00:06:19,840
Then you got this bad
boy, it's got a keypad.

143
00:06:19,840 --> 00:06:21,780
Does the same thing, but
it also has keypad input,

144
00:06:21,780 --> 00:06:23,450
and nice LCD display.

145
00:06:23,450 --> 00:06:25,810
And then you've got
the formidable, chunky,

146
00:06:25,810 --> 00:06:29,510
good old fashioned, I don't
even know what that's called,

147
00:06:29,510 --> 00:06:33,539
Prox Plus, I believe, Prox Plus 125.

148
00:06:33,540 --> 00:06:35,010
Now I got, just as an aside,

149
00:06:35,010 --> 00:06:40,010
I got all of these pictures from fccid.io,

150
00:06:40,855 --> 00:06:42,760
basically they take the FCC,

151
00:06:42,760 --> 00:06:47,140
The Federal Communications
Commission, or whatever it is,

152
00:06:47,140 --> 00:06:48,770
takes their god-awful website,

153
00:06:48,770 --> 00:06:50,419
and turns it into a usable format.

154
00:06:50,420 --> 00:06:53,850
So you can look up companies registration.

155
00:06:53,850 --> 00:06:54,683
So, for example,

156
00:06:54,683 --> 00:06:58,243
here's all of the things
Gallagher had to register for FCC.

157
00:06:59,610 --> 00:07:00,550
And for each of these things,

158
00:07:00,550 --> 00:07:02,040
you'll see a bunch of useful information,

159
00:07:02,040 --> 00:07:05,710
including user manuals,
input, user manuals, photos.

160
00:07:05,710 --> 00:07:07,150
Most importantly, you get internal photos,

161
00:07:07,150 --> 00:07:08,549
which can be really helpful.

162
00:07:09,590 --> 00:07:11,443
Yes, I couldn't be bothered rotating it,

163
00:07:12,540 --> 00:07:16,379
and I'm very thankful to
Dave, Dave, Dave of Dave

164
00:07:16,379 --> 00:07:19,970
(audience laughs)
for doing these things.

165
00:07:19,970 --> 00:07:23,105
I don't know why I bothered
blanking out the email there.

166
00:07:23,105 --> 00:07:27,330
(audience laughs)
Okay.

167
00:07:27,330 --> 00:07:29,870
And then the Officer PC,

168
00:07:29,870 --> 00:07:31,860
for lack of a better name, monitoring PC,

169
00:07:31,860 --> 00:07:34,290
that takes the form of
Command Center with Gallagher.

170
00:07:34,290 --> 00:07:35,840
I do have an installation at home.

171
00:07:35,840 --> 00:07:37,590
As you can see the only events I ever get,

172
00:07:37,590 --> 00:07:39,179
is that I've pulled out the controller,

173
00:07:39,180 --> 00:07:40,210
and plugged it back in again,

174
00:07:40,210 --> 00:07:42,049
because I'm trying to break something.

175
00:07:42,050 --> 00:07:43,780
So there's not much
interesting to look at there.

176
00:07:43,780 --> 00:07:45,275
And Gallagher will probably
be annoyed that I don't show

177
00:07:45,275 --> 00:07:49,099
a nice, much more meaningful,
interesting display.

178
00:07:49,100 --> 00:07:51,320
But this thing can do some
pretty amazing things.

179
00:07:51,320 --> 00:07:54,480
It can, yeah, it can
turn on and off your AC.

180
00:07:54,480 --> 00:07:55,990
So when someone walks in a room,

181
00:07:55,990 --> 00:07:58,470
it does all the, turns
everything off and on.

182
00:07:58,470 --> 00:08:00,440
You can have it so that people's lockers

183
00:08:00,440 --> 00:08:02,910
are controlled by these T-20 devices.

184
00:08:02,910 --> 00:08:05,040
You can even have a breathalyzer.

185
00:08:05,040 --> 00:08:06,530
So people aren't allowed into a room,

186
00:08:06,530 --> 00:08:07,789
or they are allowed into a room,

187
00:08:07,790 --> 00:08:10,120
if they're drunk.
(audience laughs)

188
00:08:10,120 --> 00:08:13,000
So there's lots of amazing
things that this thing can do.

189
00:08:13,000 --> 00:08:15,840
But, you know, 95 percent
of the installs you'll see,

190
00:08:15,840 --> 00:08:19,820
it's just annoying people with
cards to get into the office.

191
00:08:19,820 --> 00:08:22,000
And then the administration
PC looks like this.

192
00:08:22,000 --> 00:08:23,630
Administration console looks like this.

193
00:08:23,630 --> 00:08:26,630
It's a... It's that.

194
00:08:26,630 --> 00:08:28,933
And you can configure everything here.

195
00:08:28,933 --> 00:08:30,890
There's a giant menu called configure,

196
00:08:30,890 --> 00:08:32,490
and it has literally everything.

197
00:08:33,650 --> 00:08:35,970
So, yeah, the Gallagher
system, same thing.

198
00:08:35,970 --> 00:08:38,320
Controller, then you
have breakout modules.

199
00:08:38,320 --> 00:08:40,070
And then you have all your readers.

200
00:08:40,070 --> 00:08:41,500
There's actually a lot more,

201
00:08:41,500 --> 00:08:45,200
as you can see in this
diagram, that we could go over.

202
00:08:45,200 --> 00:08:48,200
Considering it started off from
very basic things like this.

203
00:08:49,650 --> 00:08:51,199
Now, yes.

204
00:08:51,200 --> 00:08:52,830
So why Sesame Street?

205
00:08:52,830 --> 00:08:54,970
Might as well get straight to that point.

206
00:08:54,970 --> 00:08:58,560
And I only know the top eight
of this group of people.

207
00:08:58,560 --> 00:09:00,349
I don't know the last four,

208
00:09:00,350 --> 00:09:02,190
orange dude, red dude,

209
00:09:02,190 --> 00:09:04,633
freaky brown thing, and blue one.

210
00:09:06,040 --> 00:09:06,872
The reason is,

211
00:09:06,873 --> 00:09:08,640
it's because those are the
code names that they used.

212
00:09:08,640 --> 00:09:09,473
As I discovered,

213
00:09:09,473 --> 00:09:10,560
Gallagher uses these code names,

214
00:09:10,560 --> 00:09:12,849
or Cardax did, and Gallagher
still does for their products.

215
00:09:12,850 --> 00:09:15,033
So, for example, the Controller
6000 that I talked about,

216
00:09:15,033 --> 00:09:16,403
well, meet Grover.

217
00:09:17,520 --> 00:09:20,319
The Cardax FT 3000,

218
00:09:20,320 --> 00:09:21,920
meet Bert.

219
00:09:21,920 --> 00:09:24,923
And Command Center control
platform, meet Elmo.

220
00:09:26,130 --> 00:09:28,060
And for the F-, I didn't go over these,

221
00:09:28,060 --> 00:09:30,089
but the F-Series fence controllers,

222
00:09:30,090 --> 00:09:33,220
these are used for electrifying fences,

223
00:09:33,220 --> 00:09:34,560
and telling you when
someone's touching them.

224
00:09:34,560 --> 00:09:37,739
or when you're giving them a
nice free bit of electricity.

225
00:09:37,740 --> 00:09:39,993
That is code name, you know this guy?

226
00:09:41,820 --> 00:09:42,653
That one.

227
00:09:42,653 --> 00:09:43,983
It's Frazzle.

228
00:09:45,020 --> 00:09:46,930
I thought Frazzle is a
very good name for that,

229
00:09:46,930 --> 00:09:48,579
but I'd never heard of it before.

230
00:09:49,792 --> 00:09:51,620
So there's a lot of technologies in use.

231
00:09:51,620 --> 00:09:53,420
And there's just a bunch of
information, like I said,

232
00:09:53,420 --> 00:09:54,546
that I've scraped so far.

233
00:09:54,547 --> 00:09:56,590
You can see that a range
of technologies and uses.

234
00:09:56,590 --> 00:09:58,900
I now know more about ARM
Thumb than I did before.

235
00:09:58,900 --> 00:10:00,870
And I know now more about Intel 8051

236
00:10:00,870 --> 00:10:01,970
and Phar Lap embedded kernel

237
00:10:01,970 --> 00:10:03,560
than I ever wanted to know before.

238
00:10:03,560 --> 00:10:05,489
But there's a whole
range technologies there.

239
00:10:05,490 --> 00:10:06,490
It's pretty cool.

240
00:10:06,490 --> 00:10:07,750
Even the T-20s that you see,

241
00:10:07,750 --> 00:10:10,200
those are actually running QT web browser.

242
00:10:10,200 --> 00:10:11,720
And they're using WebSockets.

243
00:10:11,720 --> 00:10:13,480
So when you press this
little JavaScript interface,

244
00:10:13,480 --> 00:10:15,090
on the front screens,
so you press something,

245
00:10:15,090 --> 00:10:17,180
WebSocket goes to a
native WebSocket client,

246
00:10:17,180 --> 00:10:18,109
and then that does more stuff.

247
00:10:18,110 --> 00:10:20,700
So real range of technologies

248
00:10:20,700 --> 00:10:23,103
all the way back to DOS era stuff.

249
00:10:24,180 --> 00:10:25,530
Okay, so as you saw,

250
00:10:25,530 --> 00:10:26,740
there was a lot of technologies there,

251
00:10:26,740 --> 00:10:28,490
and in the interest of time,

252
00:10:28,490 --> 00:10:31,290
and me only having a certain amount of it,

253
00:10:31,290 --> 00:10:35,380
I've restricted myself to
basically things that are

254
00:10:35,380 --> 00:10:39,230
accessible by an unauthenticated
idiot out on the street.

255
00:10:39,230 --> 00:10:41,180
So unprotected stuff.

256
00:10:41,180 --> 00:10:43,050
So this is stuff like readers, cards,

257
00:10:43,050 --> 00:10:45,561
and the connections
coming out of the reader.

258
00:10:45,562 --> 00:10:47,570
So intercepting cards.

259
00:10:47,570 --> 00:10:48,430
That's cool.

260
00:10:48,430 --> 00:10:50,910
Playing with the readers,
you'll see that's okay.

261
00:10:50,910 --> 00:10:52,270
And pulling the readers out

262
00:10:52,270 --> 00:10:54,030
and playing with the connections directly.

263
00:10:54,030 --> 00:10:56,963
That's probably a more intense
job, but it can be done.

264
00:10:58,280 --> 00:11:01,040
So, yeah, you could go through the cloud,

265
00:11:01,040 --> 00:11:01,969
or whatever you want.

266
00:11:01,970 --> 00:11:05,100
And try and attack those
administrative console PCs.

267
00:11:05,100 --> 00:11:06,550
through their corporate network.

268
00:11:06,550 --> 00:11:09,560
Good old fashioned network level hacking.

269
00:11:09,560 --> 00:11:11,520
But that's a whole other talk.

270
00:11:11,520 --> 00:11:13,689
I didn't really look at
the consoles that much,

271
00:11:13,690 --> 00:11:15,050
but to be honest,

272
00:11:15,050 --> 00:11:16,760
a lot of sites out there just have them

273
00:11:16,760 --> 00:11:20,080
domain joined PCs, with
some crap password,

274
00:11:20,080 --> 00:11:21,870
and that's the administrative console.

275
00:11:21,870 --> 00:11:25,127
So lots of jobs I've gone
on, done a pentest and,

276
00:11:25,127 --> 00:11:27,040
"Oh there's a PC called Cardax,
I wonder what that does."

277
00:11:27,040 --> 00:11:27,872
So, Yeah.

278
00:11:29,100 --> 00:11:32,920
Okay, so now let's look at
these outlying technologies.

279
00:11:32,920 --> 00:11:34,969
The stuff that we can actually play with.

280
00:11:35,950 --> 00:11:38,720
As a person trying to
potentially get our way in.

281
00:11:38,720 --> 00:11:41,170
So let's start with the
reader, it hungers for a card,

282
00:11:41,170 --> 00:11:43,199
but which card does it want?

283
00:11:43,200 --> 00:11:46,700
So there's two main kinds of
RFID technology, low-frequency,

284
00:11:46,700 --> 00:11:48,780
which runs at 125 kilohertz,

285
00:11:48,780 --> 00:11:49,709
and high frequency,

286
00:11:49,710 --> 00:11:52,860
which runs at 13.56 megahertz.

287
00:11:52,860 --> 00:11:54,200
Let's start with low frequency.

288
00:11:54,200 --> 00:11:56,257
So the implementation
of low frequency cards,

289
00:11:56,257 --> 00:11:58,569
in the Cardax/Gallagher system.

290
00:11:58,570 --> 00:12:00,870
I guess it's going to
be Cardax these days,

291
00:12:00,870 --> 00:12:02,810
they're called Cardax Prox.

292
00:12:02,810 --> 00:12:04,689
I mean it's hard to tell
what they're actually called

293
00:12:04,690 --> 00:12:07,410
because it's not really
brand name or anything,

294
00:12:07,410 --> 00:12:09,530
but I've called them Cardax
Prox and they look like this.

295
00:12:09,530 --> 00:12:12,230
So there's no point in me
showing the cards because you

296
00:12:12,230 --> 00:12:16,140
can't reliably determine the
type of card from how it looks.

297
00:12:16,140 --> 00:12:18,010
Just to show you, here's
my collection of test cards

298
00:12:18,010 --> 00:12:19,520
and see they all look the same.

299
00:12:19,520 --> 00:12:20,720
Totally different cards,

300
00:12:21,590 --> 00:12:23,070
apart from the writing.

301
00:12:23,070 --> 00:12:24,420
Now if you excuse me for a second,

302
00:12:24,420 --> 00:12:27,240
I'm going to steal some
slides from a previous talk.

303
00:12:27,240 --> 00:12:29,070
So if you see the art style change,

304
00:12:29,070 --> 00:12:31,980
from one style of bad
hand-drawing to another,

305
00:12:31,980 --> 00:12:33,637
that's because this is the talk I gave at

306
00:12:33,637 --> 00:12:35,550
OzSecCon last year on RFID.

307
00:12:35,550 --> 00:12:37,790
Just some generic slides that I can use.

308
00:12:37,790 --> 00:12:40,040
So there's four ways that we
can look at RFID technology.

309
00:12:40,040 --> 00:12:42,170
Physical, data, protocol and system.

310
00:12:42,170 --> 00:12:44,079
So physical, all you
really need to know is

311
00:12:44,080 --> 00:12:47,020
these cards use the Wiegand
effect, which is a cool thing.

312
00:12:47,020 --> 00:12:50,079
The reader can provide energy

313
00:12:50,080 --> 00:12:53,210
through a oscillating magnetic field.

314
00:12:53,210 --> 00:12:55,380
And basically it's just like a induction.

315
00:12:55,380 --> 00:12:57,350
So one side is a magnetic loop,

316
00:12:57,350 --> 00:12:59,140
with current going through it.

317
00:12:59,140 --> 00:13:01,177
Moving current in a wire
makes a magnetic field.

318
00:13:01,177 --> 00:13:02,010
And then moving magnetic field.

319
00:13:02,887 --> 00:13:05,959
And then a coil in the card
does the opposite thing.

320
00:13:05,960 --> 00:13:06,870
Turns it back to energy,

321
00:13:06,870 --> 00:13:08,360
rectifies it, turn it to DC

322
00:13:08,360 --> 00:13:09,530
and use it to power the card.

323
00:13:09,530 --> 00:13:13,794
And then the card can also
load modulate that RF field

324
00:13:13,794 --> 00:13:15,400
which sends data back to it.

325
00:13:15,400 --> 00:13:18,709
How heavy is it drawing
power, can be a zero or a one.

326
00:13:18,710 --> 00:13:19,990
It's quite cool.

327
00:13:19,990 --> 00:13:22,260
And there's different ways
of modulating information.

328
00:13:22,260 --> 00:13:23,569
So you can take a bit stream,

329
00:13:23,570 --> 00:13:25,680
you can then modulate it different ways.

330
00:13:25,680 --> 00:13:27,750
Digital level, so Manchester, for example.

331
00:13:27,750 --> 00:13:30,150
And then you can modulate
it at a different level,

332
00:13:30,150 --> 00:13:31,610
at the analog level.

333
00:13:31,610 --> 00:13:35,130
So the Cardax Prox system
uses Manchester encoding.

334
00:13:35,130 --> 00:13:36,700
So that's the bottom one there.

335
00:13:36,700 --> 00:13:38,610
Basically all zeros turn into 0 1,

336
00:13:38,610 --> 00:13:40,433
and all ones turn into 1 0.

337
00:13:41,480 --> 00:13:43,640
And it runs at clock speed RF/32,

338
00:13:43,640 --> 00:13:44,819
which means blah blah blah.

339
00:13:44,820 --> 00:13:46,550
So it looks like this

340
00:13:46,550 --> 00:13:48,530
when you plot it using
the Proxmark software.

341
00:13:48,530 --> 00:13:52,530
If I hold up an LF RFID card to my reader,

342
00:13:52,530 --> 00:13:56,040
I can plot the wave form it
outputs, it outputs this.

343
00:13:56,040 --> 00:13:58,150
And so, yeah, let's talk
about the data layer now.

344
00:13:58,150 --> 00:14:02,410
So from looking at the
administrative console,

345
00:14:02,410 --> 00:14:04,709
when I want to, if I wanted
to encode a new card,

346
00:14:04,710 --> 00:14:09,710
I can see that there's four
elements that a Cardax card has.

347
00:14:09,910 --> 00:14:13,064
So that I know from open source research,

348
00:14:13,065 --> 00:14:14,820
by that I mean looking at manuals,

349
00:14:14,820 --> 00:14:18,230
and figuring out that if
it says there's 65536,

350
00:14:18,230 --> 00:14:20,410
or if it says there's 65
thousand of these things,

351
00:14:20,410 --> 00:14:23,100
that probably means there's
a 16 bit value, for example.

352
00:14:23,100 --> 00:14:25,483
So it has a 24 bit card number,

353
00:14:25,483 --> 00:14:27,170
a 16 bit facility code.

354
00:14:27,170 --> 00:14:30,370
So that's the idea is that card
numbers might not be unique,

355
00:14:30,370 --> 00:14:31,310
but the combination of

356
00:14:31,310 --> 00:14:33,619
facility code and card number should be.

357
00:14:33,620 --> 00:14:35,690
Actually I lied because it
should be the combination of

358
00:14:35,690 --> 00:14:38,310
region code, facility
code and card number.

359
00:14:38,310 --> 00:14:39,770
And then you have an issue
level, which is basically,

360
00:14:39,770 --> 00:14:42,120
how many times has this
idiot lost their card,

361
00:14:42,120 --> 00:14:44,310
and how many times I had to reissue it.

362
00:14:44,310 --> 00:14:46,989
You start with zero and you
move upwards from there.

363
00:14:46,990 --> 00:14:48,450
So I know that somewhere

364
00:14:48,450 --> 00:14:51,003
in this stream of zeros
and ones is this data.

365
00:14:52,100 --> 00:14:54,170
So here is that streams of zeros and ones.

366
00:14:54,170 --> 00:14:56,219
There's clearly a repeating pattern here.

367
00:14:57,930 --> 00:14:59,339
I wrote this out for some reason.

368
00:14:59,340 --> 00:15:04,340
So when we look at the best
way to do protocol analysis,

369
00:15:04,540 --> 00:15:05,579
it's like a scientist, right?

370
00:15:05,580 --> 00:15:07,090
You think of an experiment.

371
00:15:07,090 --> 00:15:08,885
So you take a sample

372
00:15:08,885 --> 00:15:11,260
and then you change one thing and redo it.

373
00:15:11,260 --> 00:15:13,150
So that was a terrible explanation.

374
00:15:13,150 --> 00:15:14,650
Basically, you take a card,

375
00:15:14,650 --> 00:15:16,949
encode a card with some known parameters,

376
00:15:16,950 --> 00:15:17,960
get the bit stream,

377
00:15:17,960 --> 00:15:20,050
and then you change just one
of the fields, for example,

378
00:15:20,050 --> 00:15:21,900
and then look at that bit string.

379
00:15:21,900 --> 00:15:24,760
The idea is you want
to see what difference,

380
00:15:24,760 --> 00:15:26,810
in what field, makes to the bit stream.

381
00:15:26,810 --> 00:15:29,750
So what we end up seeing is
that this is a common prefix.

382
00:15:29,750 --> 00:15:31,910
So this is like a training sequence.

383
00:15:31,910 --> 00:15:35,010
Just to help the reader realize
that there's a card here

384
00:15:35,010 --> 00:15:37,220
and you should pay attention
to the following data.

385
00:15:37,220 --> 00:15:40,760
So that's always 7FEA,
I think it is in hex.

386
00:15:40,760 --> 00:15:45,760
And then we have the last eight bits.

387
00:15:46,760 --> 00:15:51,270
Which turn out to be,
well I haven't said yet,

388
00:15:51,270 --> 00:15:52,420
they turned out to be something, Okay.

389
00:15:52,420 --> 00:15:53,290
So what happens is,

390
00:15:53,290 --> 00:15:54,890
Sorry, slides remember.

391
00:15:54,890 --> 00:15:58,370
So if we change one of
the fields, for example,

392
00:15:58,370 --> 00:16:00,960
this is what happens if I change
the card number up by one.

393
00:16:00,960 --> 00:16:02,800
Okay, we see eight bits change.

394
00:16:02,800 --> 00:16:04,209
That's actually incorrect.
It should be nine.

395
00:16:04,210 --> 00:16:06,360
But the idea is that we see
quite a bit of difference.

396
00:16:06,360 --> 00:16:07,663
So what's going on there?

397
00:16:08,800 --> 00:16:12,089
So after a bit of head-banging.

398
00:16:12,090 --> 00:16:15,630
And not the metal kind,
more like head-desk banging.

399
00:16:15,630 --> 00:16:19,153
You see that every ninth-ish bit

400
00:16:19,153 --> 00:16:21,120
is the opposite of its previous bit.

401
00:16:21,120 --> 00:16:23,970
So here you can see if
the previous bit was zero,

402
00:16:23,970 --> 00:16:26,220
then the next was one, and one zero.

403
00:16:26,220 --> 00:16:28,550
So there is some kind of parity padding,

404
00:16:28,550 --> 00:16:29,699
but it's not really parity,

405
00:16:29,700 --> 00:16:31,440
because it's only parity
over the last bit.

406
00:16:31,440 --> 00:16:34,900
But it's definitely doing a
good job of padding it out.

407
00:16:34,900 --> 00:16:37,340
And then we can actually
see that, eventually see,

408
00:16:37,340 --> 00:16:38,553
that this last eight,

409
00:16:40,229 --> 00:16:41,790
the last eight bits,

410
00:16:41,790 --> 00:16:45,569
is actually a CRC of all the
data, excluding that prefix.

411
00:16:45,570 --> 00:16:50,170
So it's got a slightly
unusual initialization value,

412
00:16:50,170 --> 00:16:53,569
and a slightly unusual
polynomial value, at least to me.

413
00:16:53,570 --> 00:16:57,210
So we now know that the
yellow part is some data,

414
00:16:57,210 --> 00:16:59,750
the un-highlighted part is the prefix,

415
00:16:59,750 --> 00:17:02,660
and the pink part is the CRC.

416
00:17:02,660 --> 00:17:05,560
So let's remove all these things
that we know what they are.

417
00:17:05,560 --> 00:17:07,310
And we're left with this still.

418
00:17:07,310 --> 00:17:09,399
And now let's convert this to Hex.

419
00:17:09,400 --> 00:17:12,220
Now we start to see some
kind of stuff happening here,

420
00:17:12,220 --> 00:17:14,370
There's A3s is all over
the places and A2s.

421
00:17:15,280 --> 00:17:16,700
So we do the same thing.

422
00:17:16,700 --> 00:17:17,800
We take a bunch of cards,

423
00:17:17,800 --> 00:17:20,623
we change some things and
notice the difference.

424
00:17:20,623 --> 00:17:23,650
Okay, even longer later.

425
00:17:23,650 --> 00:17:24,900
And I'm not going to explain how.

426
00:17:24,900 --> 00:17:28,030
But basically, we can figure
out what this actual data is.

427
00:17:28,030 --> 00:17:31,700
So again, there's eight
bytes, it turns out

428
00:17:31,700 --> 00:17:34,500
that the card number is
splayed across all of these.

429
00:17:34,500 --> 00:17:37,410
So for example, bits 0, 1
and 2 are in the third byte

430
00:17:38,410 --> 00:17:40,230
3-10 are in the second and so forth.

431
00:17:40,230 --> 00:17:43,960
And hopefully 0-2, 3-10,
11-15, 16-23, yes, okay.

432
00:17:43,960 --> 00:17:47,070
So all those card number byte bits,

433
00:17:47,070 --> 00:17:48,760
are spread across those eight bytes.

434
00:17:48,760 --> 00:17:50,560
Facility code is here.

435
00:17:50,560 --> 00:17:52,070
Region code is here.

436
00:17:52,070 --> 00:17:53,260
Issue level here,

437
00:17:53,260 --> 00:17:55,100
and stuff I don't know or care about

438
00:17:55,100 --> 00:17:57,760
but usually always 0 is here.

439
00:17:57,760 --> 00:17:59,270
But there's a twist.

440
00:17:59,270 --> 00:18:02,003
So what they've done is
they've done a simple.

441
00:18:03,056 --> 00:18:06,000
I'm not a cryptographer,
not the old style,

442
00:18:06,000 --> 00:18:09,790
But a substitution cipher
basically in this box.

443
00:18:09,790 --> 00:18:14,540
So basically, for example,
you can see here, just,

444
00:18:14,540 --> 00:18:18,770
that the byte 00 gets mapped to A3.

445
00:18:18,770 --> 00:18:22,040
So A3, all those A3s we were
seeing in that input data.

446
00:18:22,040 --> 00:18:24,190
The bits in that data are actually zeros

447
00:18:24,190 --> 00:18:25,370
and that's kind of a good sign,

448
00:18:25,370 --> 00:18:26,949
zero is probably most common thing

449
00:18:26,950 --> 00:18:29,110
that we're going to see
in the underlying data.

450
00:18:29,110 --> 00:18:30,923
So we can now decode this.

451
00:18:31,780 --> 00:18:35,490
From that bunch of data
into its underlying fields.

452
00:18:35,490 --> 00:18:37,210
So we have the card number.

453
00:18:37,210 --> 00:18:39,340
This is actual actual
data and I'm very sorry,

454
00:18:39,340 --> 00:18:41,429
Facility 456, region code 0,

455
00:18:41,430 --> 00:18:44,755
But user 123 now has
their card data there.

456
00:18:44,755 --> 00:18:48,390
So card number 123, facility
code 456, region code 0,

457
00:18:48,390 --> 00:18:51,770
which is usually written
as A, and issue level one.

458
00:18:51,770 --> 00:18:54,940
So this is card number 123, for site A456.

459
00:18:54,940 --> 00:18:57,140
That's how you might
see it in the consoles.

460
00:18:58,340 --> 00:19:00,129
So what do you do when
you have the ability

461
00:19:00,130 --> 00:19:03,673
to take an existing card,
decode it, modify fields,

462
00:19:03,673 --> 00:19:04,880
and then re-encode it?

463
00:19:04,880 --> 00:19:07,360
Well, you take your work card,

464
00:19:07,360 --> 00:19:10,750
and try and get onto the
roof of your office building.

465
00:19:10,750 --> 00:19:12,460
So, I miss you laptop.

466
00:19:12,460 --> 00:19:16,370
So we have this thing called a Proxmark.

467
00:19:16,370 --> 00:19:21,370
And this is the POC version, right.

468
00:19:23,210 --> 00:19:24,690
But eventually it does work.

469
00:19:24,690 --> 00:19:27,040
So what we can do is, we
can take my work card,

470
00:19:28,050 --> 00:19:30,260
our office uses a more secure system

471
00:19:30,260 --> 00:19:32,010
than the rest of the
outside of the building.

472
00:19:32,010 --> 00:19:35,440
You know, landlord versus tenants tenancy.

473
00:19:35,440 --> 00:19:37,540
But sure enough, this works eventually,

474
00:19:37,540 --> 00:19:40,763
if I increment the card
number up enough from mine.

475
00:19:43,220 --> 00:19:44,723
That works, cool, yeah.

476
00:19:46,477 --> 00:19:49,477
(audience applauds)

477
00:19:56,920 --> 00:19:57,753
Cool.

478
00:19:57,753 --> 00:20:00,508
So basically low-frequency
cards are busted.

479
00:20:00,508 --> 00:20:03,190
Have always been busted, in
that we can always clone them.

480
00:20:03,190 --> 00:20:04,560
There's always ways to
easily just clone them.

481
00:20:04,560 --> 00:20:06,200
But now we can go a little
bit above and beyond,

482
00:20:06,200 --> 00:20:08,710
and actually modify the
data that's on them.

483
00:20:08,710 --> 00:20:12,150
So you might have a boring
plebeian employee card.

484
00:20:12,150 --> 00:20:13,660
Now you can turn that
into administrative card,

485
00:20:13,660 --> 00:20:14,660
something like that.

486
00:20:14,660 --> 00:20:15,493
So, okay.

487
00:20:15,493 --> 00:20:17,210
So for high-frequency.

488
00:20:17,210 --> 00:20:19,830
High-frequency, there's
different kinds of technology.

489
00:20:19,830 --> 00:20:21,943
But they're all Mifare brand cards

490
00:20:21,943 --> 00:20:24,290
that the Gallagher system uses.

491
00:20:24,290 --> 00:20:27,157
So Mifare Classic, Mifare
Plus, Mifare DESFire.

492
00:20:27,157 --> 00:20:29,156
So let's start with Mifare Classic.

493
00:20:29,156 --> 00:20:33,540
Looks like this, which is
an ISO 14443 card, type A.

494
00:20:33,540 --> 00:20:34,710
Because there's also type B,

495
00:20:34,710 --> 00:20:37,370
because they couldn't decide
which standard they wanted.

496
00:20:37,370 --> 00:20:39,820
So they just called two
standards, one standard,

497
00:20:39,820 --> 00:20:43,189
and called them Type A and
type B, which is ridiculous.

498
00:20:43,190 --> 00:20:45,200
Physical, yeah, it does some things

499
00:20:45,200 --> 00:20:46,960
but so it's still Wiegand.

500
00:20:47,990 --> 00:20:49,740
The card gets put into the reader,

501
00:20:49,740 --> 00:20:52,170
reader gives power,
and the card can start,

502
00:20:52,170 --> 00:20:53,210
but there's a twist.

503
00:20:53,210 --> 00:20:56,400
The reader can also give
data now as well as the card.

504
00:20:56,400 --> 00:20:58,343
And so this allows for, basically,

505
00:20:58,343 --> 00:21:00,650
a more interesting form of communication.

506
00:21:00,650 --> 00:21:03,420
So Mifare cards don't just spit out

507
00:21:03,420 --> 00:21:05,910
some sequence of bytes over and over.

508
00:21:05,910 --> 00:21:07,910
They actually have blocks and sectors.

509
00:21:07,910 --> 00:21:10,347
Just like a little tiny flash memory card.

510
00:21:10,347 --> 00:21:12,280
So Mifare 1k, for example,

511
00:21:12,280 --> 00:21:14,230
holds one kilobytes of information.

512
00:21:14,230 --> 00:21:16,623
So you've got your blocks over here.

513
00:21:18,820 --> 00:21:20,493
Blocks and sectors.

514
00:21:21,860 --> 00:21:23,879
Block zero always has manufacturing data.

515
00:21:23,880 --> 00:21:26,080
And in each of the blocks, for example,

516
00:21:26,080 --> 00:21:27,937
this is sector one,

517
00:21:27,938 --> 00:21:31,760
the last block in the
sector contains two keys.

518
00:21:31,760 --> 00:21:35,230
Which keys are allowed to
actually read that sector.

519
00:21:35,230 --> 00:21:36,660
And the access bits, which is kind of like

520
00:21:36,660 --> 00:21:38,530
the read write executable

521
00:21:38,530 --> 00:21:39,730
of the Unix world for this.

522
00:21:39,730 --> 00:21:41,200
So basically what key can do what?

523
00:21:41,200 --> 00:21:43,413
Can it read this block?
Can it write this block?

524
00:21:44,510 --> 00:21:47,550
So, for example, you might
have your access control data.

525
00:21:47,550 --> 00:21:52,460
in block 0 of Sector 2 and in
the key sector of that block,

526
00:21:52,460 --> 00:21:54,900
which should actually be 3 not 2,

527
00:21:54,900 --> 00:21:55,950
you'll have the keys set,

528
00:21:55,950 --> 00:21:58,156
so that you can only read with key A

529
00:21:58,156 --> 00:22:00,710
And you might need
administrative key with key B

530
00:22:02,310 --> 00:22:04,510
So this is the first taste of
real crypto for some reason.

531
00:22:04,510 --> 00:22:06,610
For some definition of real.

532
00:22:06,610 --> 00:22:07,590
Both the card and reader

533
00:22:07,590 --> 00:22:10,860
must prove knowledge of the
shared secret, namely that key.

534
00:22:10,860 --> 00:22:13,612
And this cipher is called Crypto 1.

535
00:22:15,220 --> 00:22:17,957
Basically, the way it
works is, the reader says,

536
00:22:17,957 --> 00:22:20,090
"I would like to read block B."

537
00:22:20,090 --> 00:22:23,659
The cards gives a nonce
back, a number used once,

538
00:22:23,660 --> 00:22:28,500
n_t, and the reader in
turn decrypts that nonce

539
00:22:28,500 --> 00:22:31,360
which has been encrypted
by one of those keys,

540
00:22:31,360 --> 00:22:32,209
to prove that it has it.

541
00:22:32,210 --> 00:22:33,940
And then it does a
little modification too,

542
00:22:33,940 --> 00:22:35,170
and then re-encrypts it.

543
00:22:35,170 --> 00:22:36,230
So basically it can prove

544
00:22:36,230 --> 00:22:38,270
that it could decrypt that nonce,

545
00:22:38,270 --> 00:22:39,379
fiddle with it, and re-encrypt it.

546
00:22:39,380 --> 00:22:41,370
Which proves that it knows the key.

547
00:22:41,370 --> 00:22:44,929
And then, in turn the reader
also sends a nonce, n_r.

548
00:22:44,930 --> 00:22:46,500
And the card does the same thing.

549
00:22:46,500 --> 00:22:50,070
So it takes, decrypts that
nonce, fiddles with it.

550
00:22:50,070 --> 00:22:51,970
Just rotates one bit to
the left or something,

551
00:22:51,970 --> 00:22:53,800
and then re-encrypts it.

552
00:22:53,800 --> 00:22:57,490
So these two nonces get modified and sent.

553
00:22:57,490 --> 00:23:00,860
The idea is that this
prevents replay attacks.

554
00:23:00,860 --> 00:23:02,810
You need the card to actually be there.

555
00:23:04,833 --> 00:23:06,540
Is that correct?

556
00:23:06,540 --> 00:23:09,312
Moving on, sorry.

557
00:23:10,690 --> 00:23:12,400
So Mifare Classic, so sector zero.

558
00:23:12,400 --> 00:23:14,050
So let's look at a Gallagher card now.

559
00:23:14,050 --> 00:23:15,909
Gallagher Cardax Mifare card.

560
00:23:15,910 --> 00:23:18,630
So Mifare is like a generic technology.

561
00:23:18,630 --> 00:23:20,190
Let's see how Gallagher is using it.

562
00:23:20,190 --> 00:23:21,830
So sector 0 has manufacturing info,

563
00:23:21,830 --> 00:23:24,020
which is why you have to have that there.

564
00:23:24,020 --> 00:23:25,550
And then a Mifare access directory,

565
00:23:25,550 --> 00:23:28,080
which is just some Mifare
stuff which is there.

566
00:23:28,080 --> 00:23:30,790
Sector 14 is a thing, but
that's not of importance to us.

567
00:23:30,790 --> 00:23:32,980
Sector 15 is the one that you can't read

568
00:23:32,980 --> 00:23:35,120
with publicly known key,

569
00:23:35,120 --> 00:23:37,860
you can't read, with no keys,

570
00:23:37,860 --> 00:23:40,060
it's locked, so this
is the interesting one.

571
00:23:40,900 --> 00:23:43,100
Now, this is nothing new,
it's been known for a while,

572
00:23:43,100 --> 00:23:45,169
that Mifare classic cards are busted.

573
00:23:45,170 --> 00:23:47,050
People did some maths and figured out

574
00:23:47,050 --> 00:23:49,190
that if you know one of the keys,

575
00:23:49,190 --> 00:23:52,170
you can then using magic maths,

576
00:23:52,170 --> 00:23:54,180
brute force all the other keys out.

577
00:23:54,180 --> 00:23:55,610
And luckily for us,

578
00:23:55,610 --> 00:23:59,120
usually at least one of the
keys is a well known one.

579
00:23:59,120 --> 00:24:00,469
So, for example, the read key

580
00:24:00,470 --> 00:24:04,340
for the Mifare access directory is,

581
00:24:04,340 --> 00:24:05,520
which is highlighted in blue there,

582
00:24:05,520 --> 00:24:08,540
it's essentially A1 A2
A3, something like that.

583
00:24:08,540 --> 00:24:09,879
But basically we know that,

584
00:24:09,880 --> 00:24:13,010
And so we can easily
get the key for 6 to 15

585
00:24:13,010 --> 00:24:14,940
using this technique.

586
00:24:14,940 --> 00:24:16,090
Those are the keys there.

587
00:24:16,090 --> 00:24:18,520
Now, before everyone gets
all blah, blah, blah.

588
00:24:18,520 --> 00:24:21,330
Like I say, this isn't,
it's already in the public.

589
00:24:21,330 --> 00:24:22,810
So people already know this.

590
00:24:22,810 --> 00:24:23,990
And like I say, the technique,

591
00:24:23,990 --> 00:24:25,690
if you have a Mifare Classic
card, anyone can do that.

592
00:24:25,690 --> 00:24:29,950
So, for example, this person here has,

593
00:24:29,950 --> 00:24:32,030
we recognize that squiggle,

594
00:24:32,030 --> 00:24:34,098
he's also noticed those keys before.

595
00:24:34,098 --> 00:24:35,129
And this is the only other place

596
00:24:35,130 --> 00:24:38,193
that I've seen them printed in
a research sort of document.

597
00:24:39,470 --> 00:24:43,540
But you'll notice here that
he's got that Cardax key thing,

598
00:24:43,540 --> 00:24:46,247
And he said, "these keys while
unique to each individual

599
00:24:46,247 --> 00:24:47,357
"are generally incomprehensible

600
00:24:47,357 --> 00:24:49,747
"and a series of various ASCII characters.

601
00:24:49,747 --> 00:24:50,867
"Without access system
to the system back end

602
00:24:50,867 --> 00:24:52,213
"it can only be assumed
how these keys work

603
00:24:52,213 --> 00:24:54,163
"and what meaning the characters have."

604
00:24:55,032 --> 00:24:55,865
Okay.

605
00:24:55,865 --> 00:24:58,070
So let's look sector 15 ourselves, right?

606
00:24:58,070 --> 00:24:59,740
This is what sector 15 looks like,

607
00:24:59,740 --> 00:25:01,560
and that lock sector now
that we have the keys.

608
00:25:01,560 --> 00:25:02,393
So you can see there is what the keys

609
00:25:02,393 --> 00:25:03,840
that were in that sector

610
00:25:03,840 --> 00:25:05,250
to tell which ones were allowed to use.

611
00:25:05,250 --> 00:25:06,340
We cracked them.

612
00:25:06,340 --> 00:25:07,903
So we can read this sector now.

613
00:25:07,903 --> 00:25:10,300
Here is the access control bits.

614
00:25:10,300 --> 00:25:12,690
I'm not claiming a prize for figuring out,

615
00:25:12,690 --> 00:25:15,927
that that's ASCII, and that's
www.cardax.com space space.

616
00:25:15,927 --> 00:25:19,830
And that just redirects
to Gallagher these days.

617
00:25:19,830 --> 00:25:21,250
But what's this?

618
00:25:21,250 --> 00:25:23,650
Sector very start is, well,

619
00:25:23,650 --> 00:25:25,490
we recognize this, right?

620
00:25:25,490 --> 00:25:27,460
This is the same kind
of eight byte encoding

621
00:25:27,460 --> 00:25:30,470
that we saw for the LF cards.

622
00:25:30,470 --> 00:25:34,300
And the last eight bytes
are just the bitwise inverse

623
00:25:34,300 --> 00:25:35,850
of those previous eight bytes.

624
00:25:35,850 --> 00:25:37,250
So you've got the eight bytes

625
00:25:37,250 --> 00:25:39,600
and then you've just
got the inverse as well.

626
00:25:39,600 --> 00:25:41,330
So basically we can do
the exact same thing.

627
00:25:41,330 --> 00:25:42,990
We can take the top of that sector

628
00:25:42,990 --> 00:25:45,200
decode it into the card
number, facility number,

629
00:25:45,200 --> 00:25:46,280
blah, blah, blah, blah.

630
00:25:46,280 --> 00:25:47,113
Same thing.

631
00:25:51,590 --> 00:25:54,570
NXP, the creator of Mifare,
tried to resolve the situation

632
00:25:54,570 --> 00:25:56,280
by removing the Classic from production,

633
00:25:56,280 --> 00:25:58,290
Introducing the Classic
EV1, that got broken,

634
00:25:58,290 --> 00:25:59,649
so they introduced the Plus,

635
00:25:59,650 --> 00:26:01,440
and then they introduced the Plus EV1

636
00:26:01,440 --> 00:26:02,440
This is a giant mess.

637
00:26:02,440 --> 00:26:04,460
I'm just gonna skip all over Mifare Plus,

638
00:26:04,460 --> 00:26:07,210
mainly because not many
people, that I've seen,

639
00:26:07,210 --> 00:26:08,180
actually use them.

640
00:26:08,180 --> 00:26:10,270
And it's very similar to the next.

641
00:26:10,270 --> 00:26:12,670
And the way that it works
in a Gallagher system,

642
00:26:12,670 --> 00:26:14,810
it's very similar to the
way of the card technology,

643
00:26:14,810 --> 00:26:15,990
which I'm just about to talk about.

644
00:26:15,990 --> 00:26:17,770
So this is the Mifare DESFire.

645
00:26:17,770 --> 00:26:22,770
This is the best current
state of art of Mifare cards.

646
00:26:24,420 --> 00:26:25,990
For some degree of best.

647
00:26:25,990 --> 00:26:28,550
So DESFire, this isn't a
block based card system,

648
00:26:28,550 --> 00:26:30,419
this is file based.

649
00:26:30,420 --> 00:26:32,910
So you can have multiple applications,

650
00:26:32,910 --> 00:26:35,040
and each of those applications
can have multiple keys,

651
00:26:35,040 --> 00:26:36,322
and then each of those applications

652
00:26:36,323 --> 00:26:38,650
can also have multiple files.

653
00:26:38,650 --> 00:26:40,190
So you can use, the idea is that

654
00:26:40,190 --> 00:26:43,950
you can use one card for a
vending machine, payment, door.

655
00:26:43,950 --> 00:26:45,950
Of course, it never ends up like that.

656
00:26:45,950 --> 00:26:48,670
It just ends up being a single use card.

657
00:26:48,670 --> 00:26:50,380
But good intentions, right.

658
00:26:50,380 --> 00:26:54,173
So this is what a Gallagher
Mifare DESFire card looks like.

659
00:26:55,280 --> 00:26:59,280
So there's card application,

660
00:26:59,280 --> 00:27:00,649
which is always there, and it's boring,

661
00:27:00,650 --> 00:27:02,960
Card application directory,
which is the one on the right.

662
00:27:02,960 --> 00:27:04,498
That's boring.

663
00:27:04,498 --> 00:27:07,014
Cardax card data application,

664
00:27:07,014 --> 00:27:08,850
which you might have multiple of.

665
00:27:08,850 --> 00:27:09,683
This is interesting.

666
00:27:09,683 --> 00:27:10,560
There's three keys there

667
00:27:10,560 --> 00:27:12,350
that can be used to
access this application.

668
00:27:12,350 --> 00:27:14,770
And there's two data files there.

669
00:27:14,770 --> 00:27:16,190
These are all readable by default.

670
00:27:16,190 --> 00:27:17,023
They're not interesting.

671
00:27:17,023 --> 00:27:18,540
And you'll find out what they're about

672
00:27:18,540 --> 00:27:21,399
if you read my stuff later on.

673
00:27:21,400 --> 00:27:22,233
But these are,

674
00:27:22,233 --> 00:27:24,050
these we can't read without
using one of the keys.

675
00:27:24,050 --> 00:27:25,540
So what's in here?

676
00:27:25,540 --> 00:27:29,956
So when we look at the configuration
settings of the Cardax,

677
00:27:29,956 --> 00:27:33,639
sorry, the Gallagher
controller set up system,

678
00:27:33,640 --> 00:27:34,473
we noticed a thing,

679
00:27:34,473 --> 00:27:36,990
that it's doing a thing
called key diversification.

680
00:27:36,990 --> 00:27:39,850
So you can input a Mifare site key.

681
00:27:39,850 --> 00:27:40,879
And what it will do.

682
00:27:40,880 --> 00:27:43,320
I'll just explain key
diversification real quickly.

683
00:27:43,320 --> 00:27:45,000
It takes an existing key.

684
00:27:45,000 --> 00:27:48,703
Some other data represented
by this database icon.

685
00:27:50,500 --> 00:27:52,460
And it merges them together
to create a new key

686
00:27:52,460 --> 00:27:54,110
indicated by the different lines.

687
00:27:55,260 --> 00:27:58,860
So key diversification lets us
take a key, some other data,

688
00:27:58,860 --> 00:28:01,129
I'm just repeating myself,
and turn it into another key.

689
00:28:01,130 --> 00:28:01,963
The reason you might want-

690
00:28:01,963 --> 00:28:04,190
And the protocols that
they're using for this,

691
00:28:04,190 --> 00:28:06,890
that Gallagher's using, it's
well-known public AN10922.

692
00:28:08,910 --> 00:28:12,020
Which is recommended by
NXP Mifare themselves.

693
00:28:12,020 --> 00:28:16,163
I did notice Mr. Gallagher,
Mr. or Mrs. Gallagher,

694
00:28:16,163 --> 00:28:19,230
a developer, that I think
you broke one of the steps.

695
00:28:19,230 --> 00:28:22,270
So you've got a bonus step,
instead of using the standard.

696
00:28:22,270 --> 00:28:23,670
But that might just be me.

697
00:28:23,670 --> 00:28:25,142
I'd be interested to hear about that.

698
00:28:25,142 --> 00:28:26,880
But basically the Gallagher system

699
00:28:26,880 --> 00:28:28,613
lets you enter a Mifare site key

700
00:28:28,613 --> 00:28:32,750
that will then diversify that
site key with each card's UID,

701
00:28:32,750 --> 00:28:34,580
and those diversified keys

702
00:28:34,580 --> 00:28:36,600
are then the ones that are
used to lock the application.

703
00:28:36,600 --> 00:28:38,330
So to lock the master application,

704
00:28:38,330 --> 00:28:41,610
to lock the cad application,
the one that's not important,

705
00:28:41,610 --> 00:28:43,689
the UID discovery key
and read Cardax read key.

706
00:28:43,690 --> 00:28:45,160
So the idea is that these keys are needed

707
00:28:45,160 --> 00:28:48,130
to read blocks and files
on the application.

708
00:28:48,130 --> 00:28:49,560
These ones you use to write.

709
00:28:49,560 --> 00:28:52,470
So in theory, the reader should
only need this single key.

710
00:28:52,470 --> 00:28:53,870
Okay.

711
00:28:53,870 --> 00:28:54,929
Now, but hold on.

712
00:28:54,930 --> 00:28:57,010
Let's go back and look at
that diagram one more time,

713
00:28:57,010 --> 00:28:58,820
because you probably saw it.

714
00:28:58,820 --> 00:28:59,820
There's a big giant check box

715
00:28:59,820 --> 00:29:01,720
that says use default Mifare site key.

716
00:29:03,870 --> 00:29:05,790
Now, I know that Mifare default site key,

717
00:29:05,790 --> 00:29:08,562
basically through reverse engineering.

718
00:29:09,790 --> 00:29:12,760
So given that we know the Mifare site key,

719
00:29:12,760 --> 00:29:15,940
and given that we know
any given card's Card UID.

720
00:29:15,940 --> 00:29:17,978
A Card UID is a number
that it will spit out

721
00:29:17,978 --> 00:29:20,620
without questions asked
as a serial number.

722
00:29:20,620 --> 00:29:24,010
We can then diversify those
and grab all of the other keys.

723
00:29:24,010 --> 00:29:27,610
So if a DESFire card is
using the default key,

724
00:29:27,610 --> 00:29:31,773
it's possible to, you have
read/write full access again.

725
00:29:34,905 --> 00:29:36,956
So you might ask what is the key?

726
00:29:37,940 --> 00:29:41,020
I'm not going to tell you or show you it.

727
00:29:41,020 --> 00:29:43,733
You'll see why that would
be a bad idea later.

728
00:29:45,090 --> 00:29:47,409
If you're going to ask
me how to find the key.

729
00:29:47,410 --> 00:29:48,660
The answer is still no.

730
00:29:48,660 --> 00:29:50,100
Because I don't want Gallagher to throw me

731
00:29:50,100 --> 00:29:53,050
into a room of frazzle units
as a product tester basically.

732
00:29:54,430 --> 00:29:56,130
But we can now read what's on those files.

733
00:29:56,130 --> 00:30:00,043
So assuming that the default
Mifare site key is used,

734
00:30:00,043 --> 00:30:03,033
we can then diversify the
key and read those files.

735
00:30:04,142 --> 00:30:06,180
Turns out that Cardax standard thing

736
00:30:06,180 --> 00:30:10,090
just has the usual 8 byte
thing, and the inverse again.

737
00:30:10,090 --> 00:30:12,909
So you can see that this
8 bytes thing is used,

738
00:30:12,910 --> 00:30:15,506
is a very weak protection
on the underlying data.

739
00:30:15,506 --> 00:30:17,330
And then it's put a different container,

740
00:30:17,330 --> 00:30:18,830
depending on what type of card.

741
00:30:18,830 --> 00:30:21,520
But once you know how to decode these,

742
00:30:21,520 --> 00:30:23,010
and once you know how
to get the keys you need

743
00:30:23,010 --> 00:30:24,570
for the card that's holding it.

744
00:30:24,570 --> 00:30:25,403
It's game over.

745
00:30:27,700 --> 00:30:29,543
Am I going to have enough
time for this? No, I'm not.

746
00:30:29,543 --> 00:30:31,290
So I'm going to skip right over this.

747
00:30:34,530 --> 00:30:35,363
Okay.

748
00:30:36,372 --> 00:30:38,410
Now, what are we talking about?

749
00:30:38,410 --> 00:30:39,243
Oh, yes.

750
00:30:39,243 --> 00:30:40,280
Now, let's look at the protocol

751
00:30:40,280 --> 00:30:43,587
between the reader and the controller.

752
00:30:43,587 --> 00:30:46,662
The most there's three in use, Cardax IV,

753
00:30:46,662 --> 00:30:50,210
which is the ye olde one, GBUS and HBUS,

754
00:30:50,210 --> 00:30:55,210
GBUS is medium olde and HBUS
is best current practice.

755
00:30:55,410 --> 00:30:56,690
There's apparently one called localbus,

756
00:30:56,690 --> 00:30:59,350
but I've no idea what it is.
So HBUS is the current one.

757
00:30:59,350 --> 00:31:01,250
And these ones are the
backwards compatibility ones.

758
00:31:01,250 --> 00:31:03,110
Let's start with the Cardax IV protocol.

759
00:31:03,110 --> 00:31:06,513
So this is used for these
bad buggers, these old ones.

760
00:31:07,416 --> 00:31:09,929
It's serial pulse wave modulation.

761
00:31:09,930 --> 00:31:13,600
Sort of- very simple,
there's two card, two wires,

762
00:31:13,600 --> 00:31:15,419
one from the reader, one to the reader,

763
00:31:15,420 --> 00:31:17,170
and depending on the length of the pulse,

764
00:31:17,170 --> 00:31:18,810
it's either a zero or one,

765
00:31:18,810 --> 00:31:19,800
and it's five volts.

766
00:31:19,800 --> 00:31:21,820
Very simple, looks like that,

767
00:31:21,820 --> 00:31:25,879
except that that's got inverted
polarity, because, reasons.

768
00:31:25,880 --> 00:31:27,330
So the Cardax IV protocol

769
00:31:27,330 --> 00:31:29,010
is pretty simple once you decode it.

770
00:31:29,010 --> 00:31:31,120
There's one byte opcode
and then a bunch of data.

771
00:31:31,120 --> 00:31:34,010
So from the reader, the reader
can send a bunch of opcodes,

772
00:31:34,010 --> 00:31:36,727
indicating that it's got a card,

773
00:31:36,727 --> 00:31:39,450
it's had a keypad press,
or it's still there.

774
00:31:39,450 --> 00:31:40,410
And from the controller,

775
00:31:40,410 --> 00:31:44,770
there is a lot more opcodes
that the controller can send,

776
00:31:44,770 --> 00:31:47,280
To do the fun things that
we love these readers do,

777
00:31:47,280 --> 00:31:48,480
like play the unhappy sound,

778
00:31:48,480 --> 00:31:50,640
or play the you're allowed sound,

779
00:31:50,640 --> 00:31:53,220
or flash the light, or do whatever.

780
00:31:53,220 --> 00:31:55,220
So there's a lot more as well.

781
00:31:55,220 --> 00:31:57,280
So what we can do is,

782
00:31:57,280 --> 00:32:01,561
We can build a tool to
man-in-the-middle the protocol

783
00:32:01,561 --> 00:32:03,209
between a reader and the controller,

784
00:32:03,210 --> 00:32:06,110
just to verify, and this is
how you find this out, anyway.

785
00:32:06,110 --> 00:32:07,389
So we've got, from left to right,

786
00:32:07,390 --> 00:32:09,600
got a power supply thingamajiggy,

787
00:32:09,600 --> 00:32:12,215
a Raspberry Pi, a GBUS IO unit,

788
00:32:12,215 --> 00:32:15,497
which is basically just
there because reasons,

789
00:32:15,498 --> 00:32:17,198
and then a reader. So
basically all you need to know

790
00:32:17,198 --> 00:32:18,940
is that the Raspberry Pi
is intercepting the comms

791
00:32:18,940 --> 00:32:20,540
between the reader and the controller,

792
00:32:20,540 --> 00:32:24,350
which is one of the cables
going up, into the Controller.

793
00:32:24,350 --> 00:32:29,129
So It's just good old
fashioned Python on there

794
00:32:29,130 --> 00:32:31,300
using pigpio.

795
00:32:31,300 --> 00:32:33,110
And that's pretty simple.

796
00:32:33,110 --> 00:32:34,760
Is this video going to auto play?

797
00:32:36,210 --> 00:32:37,043
Please?

798
00:32:41,460 --> 00:32:43,950
Okay, yeah. So you can see there,

799
00:32:43,950 --> 00:32:45,460
Press button, get that thing.

800
00:32:45,460 --> 00:32:46,690
Get the card data through that.

801
00:32:46,690 --> 00:32:47,830
Right, simple protocol.

802
00:32:47,830 --> 00:32:48,663
Nothing there.

803
00:32:50,900 --> 00:32:53,310
So what would happen
if we were to replace,

804
00:32:53,310 --> 00:32:54,470
for example, the reader?

805
00:32:54,470 --> 00:32:58,750
So let's try sending
our own Cardax IV data,

806
00:32:58,750 --> 00:33:01,623
instead of letting the
reader do it for us.

807
00:33:01,623 --> 00:33:04,470
So, after all, it's the controller

808
00:33:04,470 --> 00:33:06,420
that makes the access
decision, the yes-no,

809
00:33:06,420 --> 00:33:07,253
not the reader.

810
00:33:07,253 --> 00:33:09,210
The reader is just
there to gather the data

811
00:33:09,210 --> 00:33:11,660
and to annoy you with sounds.

812
00:33:11,660 --> 00:33:14,460
It doesn't actually make
the decision itself.

813
00:33:14,460 --> 00:33:16,095
So we moved from,

814
00:33:16,095 --> 00:33:18,210
I moved from Raspberry Pi to Arduino

815
00:33:19,684 --> 00:33:21,230
That is the only picture I can find.

816
00:33:21,230 --> 00:33:23,630
That is my carpet. That is an Arduino.

817
00:33:23,630 --> 00:33:25,780
But basically, this is designed

818
00:33:25,780 --> 00:33:27,870
for a specific kind of interesting attack.

819
00:33:27,870 --> 00:33:29,429
A timing attack.

820
00:33:29,430 --> 00:33:30,500
Timing attack is basically

821
00:33:30,500 --> 00:33:32,930
where you take advantage of differences

822
00:33:32,930 --> 00:33:36,150
in the time it takes
for a device to respond

823
00:33:36,150 --> 00:33:37,450
to a certain request.

824
00:33:37,450 --> 00:33:39,660
And that's a generic technique.

825
00:33:39,660 --> 00:33:41,410
So what the Arduino does is

826
00:33:41,410 --> 00:33:43,890
it uses interrupts and ring buffers

827
00:33:43,890 --> 00:33:45,560
to make message receiving and sending

828
00:33:45,560 --> 00:33:48,659
efficient and accurately timestamped.

829
00:33:48,660 --> 00:33:51,483
So what it does is basically
it outputs a bunch of JSON.

830
00:33:52,740 --> 00:33:56,210
And what it does is it sends
a bunch of messages saying,

831
00:33:56,210 --> 00:33:57,707
pretending to be a reader, saying,

832
00:33:57,707 --> 00:33:59,900
"card number 1, facility code 1"

833
00:33:59,900 --> 00:34:02,160
And then it checks to see
when it gets a response

834
00:34:02,160 --> 00:34:04,510
saying yes or no, it checks and logs

835
00:34:04,510 --> 00:34:06,410
all of the responses it
get from the controller,

836
00:34:06,410 --> 00:34:08,380
and accurately timestamps
them to the nanosecond

837
00:34:08,380 --> 00:34:10,210
or something like that.

838
00:34:10,210 --> 00:34:12,280
So a bunch of messages being spammed out

839
00:34:12,280 --> 00:34:14,090
of different card numbers,
and facility codes,

840
00:34:14,090 --> 00:34:16,370
and different messages coming in.

841
00:34:16,370 --> 00:34:18,330
We can then take some
more wonderful Python.

842
00:34:18,330 --> 00:34:19,719
And we can create a giant mess.

843
00:34:19,719 --> 00:34:21,889
And what this giant mess
is actually showing you is,

844
00:34:21,889 --> 00:34:24,520
for example, how do I explain this?

845
00:34:24,520 --> 00:34:28,103
So at every gray line we were sending.

846
00:34:28,989 --> 00:34:32,310
Do I have this thing, no.

847
00:34:32,310 --> 00:34:33,630
Every gray vertical line,

848
00:34:33,630 --> 00:34:36,270
we were seeding a new
card information message.

849
00:34:36,270 --> 00:34:39,239
Only, and I know from the way
that I set up the controller,

850
00:34:39,239 --> 00:34:41,089
only one of the facility codes is valid,

851
00:34:41,090 --> 00:34:43,480
and we've sent that valid facility code,

852
00:34:43,480 --> 00:34:45,810
when it's the green shaded box.

853
00:34:45,810 --> 00:34:47,989
So looking left to right at the top,

854
00:34:47,989 --> 00:34:49,159
you've got one, two, three, four,

855
00:34:49,159 --> 00:34:51,750
five, six, seven, eight invalid cards.

856
00:34:51,750 --> 00:34:52,830
Then you've got a valid card.

857
00:34:52,830 --> 00:34:54,710
And then eight more invalid cards.

858
00:34:54,710 --> 00:34:56,440
And what the colored dots are,

859
00:34:56,440 --> 00:34:57,910
are the response messages,

860
00:34:57,910 --> 00:35:01,129
color coded by type of response
message from the controller.

861
00:35:01,130 --> 00:35:04,470
You can see that when we are
spamming out invalid cards,

862
00:35:04,470 --> 00:35:07,312
you clearly see that there's a pattern.

863
00:35:09,545 --> 00:35:13,120
And then when we're
outputting a valid card,

864
00:35:13,120 --> 00:35:15,230
you clearly see that there's a big gap,

865
00:35:15,230 --> 00:35:16,870
right while it's busy thinking.

866
00:35:16,870 --> 00:35:19,790
That's because the controller
is doing a two pass thing.

867
00:35:19,790 --> 00:35:22,009
It's checking, is the
facility code even valid?

868
00:35:22,010 --> 00:35:23,740
If it is, then there's more to do.

869
00:35:23,740 --> 00:35:27,529
But if there isn't, I can just
instantly say, "No, go away."

870
00:35:27,530 --> 00:35:29,910
So this is basically a
generic timing attack.

871
00:35:29,910 --> 00:35:33,270
We can send out card data,
measure how long it takes

872
00:35:33,270 --> 00:35:35,340
for the controller to say yes or no.

873
00:35:35,340 --> 00:35:38,460
And then from that, make a judgment call

874
00:35:38,460 --> 00:35:39,293
as to whether that was

875
00:35:39,293 --> 00:35:40,820
a valid facility code or card number.

876
00:35:40,820 --> 00:35:42,400
And then once we have
a valid facility code,

877
00:35:42,400 --> 00:35:44,600
we can start brute-forcing
the card numbers.

878
00:35:45,790 --> 00:35:47,639
In theory, this would work, well it does.

879
00:35:47,639 --> 00:35:51,471
It enumerates the entire
facility code card number space,

880
00:35:51,471 --> 00:35:53,300
that's 24 plus 16 bits.

881
00:35:53,300 --> 00:35:56,500
Does that in four hours,
which sounds like a while.

882
00:35:56,500 --> 00:35:58,973
I won't disagree.

883
00:36:00,060 --> 00:36:02,461
There's the list of
messages, the color codes,

884
00:36:02,461 --> 00:36:04,593
and different classifiers.

885
00:36:05,600 --> 00:36:07,880
It's hard to, basically this different,

886
00:36:07,880 --> 00:36:09,180
I didn't go full machine learning,

887
00:36:09,180 --> 00:36:11,410
but I tried different ways of detecting,

888
00:36:11,410 --> 00:36:12,440
given this bunch of messages,

889
00:36:12,440 --> 00:36:14,670
was this a valid message or not?

890
00:36:14,670 --> 00:36:16,768
And it turns out, the red
is a very simple predictor

891
00:36:16,768 --> 00:36:18,290
of whether it was or not.

892
00:36:18,290 --> 00:36:19,627
See if it sends back a message saying,

893
00:36:19,627 --> 00:36:20,880
"Turn on your red LED."

894
00:36:20,880 --> 00:36:22,440
So that's the orange one,

895
00:36:22,440 --> 00:36:25,360
that works in a 100
percent true positive rate,

896
00:36:25,360 --> 00:36:26,700
97 true negative rate.

897
00:36:26,700 --> 00:36:28,939
In a 3 percent false positive rate.

898
00:36:28,940 --> 00:36:31,290
So that was 0 percent false negative.

899
00:36:31,290 --> 00:36:35,259
So basically you can see, hopefully,

900
00:36:35,260 --> 00:36:38,416
that yeah, basically,

901
00:36:38,416 --> 00:36:41,200
every time that we've seen the bad cards,

902
00:36:41,200 --> 00:36:42,966
we always get a message saying back,

903
00:36:42,967 --> 00:36:44,790
"Turn on your red LED." in
within a certain amount of time.

904
00:36:44,790 --> 00:36:47,380
But when we send a good
card that we don't,

905
00:36:47,380 --> 00:36:50,023
we have the facility code
for, but not the card number.

906
00:36:51,110 --> 00:36:53,250
It will not send that so quickly.

907
00:36:53,250 --> 00:36:55,090
So we can use that as a predictor

908
00:36:55,090 --> 00:36:57,480
of whether that card was a
valid facility code or not.

909
00:36:57,480 --> 00:36:59,580
And then start brute-forcing card numbers.

910
00:37:00,910 --> 00:37:03,250
So the intent, well, it is how it works.

911
00:37:03,250 --> 00:37:04,083
This is a Bluno beetle,

912
00:37:04,083 --> 00:37:08,490
which is a very tiny
Bluetooth Arduino thing.

913
00:37:08,490 --> 00:37:09,910
The idea is that you connect this,

914
00:37:09,910 --> 00:37:12,509
pull out your reader, connect
the two wires you need,

915
00:37:12,510 --> 00:37:14,700
three wires you need to the pins.

916
00:37:14,700 --> 00:37:17,140
And then it will, and then
you can put the reader back.

917
00:37:17,140 --> 00:37:19,799
And this then reports
back through your phone.

918
00:37:19,800 --> 00:37:23,370
An Android phone as it
reports back progress.

919
00:37:23,370 --> 00:37:24,203
How is it doing?

920
00:37:24,203 --> 00:37:25,560
Has it found the facility code yet?

921
00:37:25,560 --> 00:37:27,680
If it has, has found a valid card number?

922
00:37:27,680 --> 00:37:28,680
And if it has, cool.

923
00:37:29,785 --> 00:37:31,082
And then you can just press a button,

924
00:37:31,082 --> 00:37:32,100
for it to replay it, and open the door.

925
00:37:32,100 --> 00:37:34,360
Unfortunately, this does work,

926
00:37:34,360 --> 00:37:36,000
but I don't have the video for it,

927
00:37:36,000 --> 00:37:39,660
because of that
aforementioned slides issue.

928
00:37:39,660 --> 00:37:40,923
But it works, trust me.

929
00:37:42,680 --> 00:37:46,812
Yeah, weak clap, okay.
(audience applauds)

930
00:37:48,820 --> 00:37:50,630
Okay.
Moving right along.

931
00:37:50,630 --> 00:37:52,350
GBUS is another protocol.

932
00:37:52,350 --> 00:37:54,350
It's protocol, I wrote a decoder for it.

933
00:37:55,810 --> 00:37:57,049
The...

934
00:38:00,300 --> 00:38:01,133
Come on.

935
00:38:04,200 --> 00:38:05,970
Moving right along.

936
00:38:05,970 --> 00:38:07,850
GBUS as another protocol which is in use.

937
00:38:07,850 --> 00:38:10,180
You can use this to control the,

938
00:38:10,180 --> 00:38:11,013
Oh, it is playing.

939
00:38:11,013 --> 00:38:12,540
Okay, right.

940
00:38:12,540 --> 00:38:15,009
You can use this to
control the IO devices.

941
00:38:15,010 --> 00:38:17,670
So, for example, you can
read and write messages

942
00:38:17,670 --> 00:38:20,300
to the devices that handle the door.

943
00:38:20,300 --> 00:38:23,430
The actual locking and
sensing of window open

944
00:38:23,430 --> 00:38:27,993
or door held open too long.

945
00:38:30,284 --> 00:38:31,663
Is this going to play?

946
00:38:34,610 --> 00:38:35,443
Yeah, okay.

947
00:38:35,443 --> 00:38:36,276
So, Python script.

948
00:38:36,276 --> 00:38:37,163
That's a bit more less
janky than the other one.

949
00:38:37,163 --> 00:38:40,700
But you can see here that it's
detected a bunch of devices.

950
00:38:40,700 --> 00:38:41,950
It's given me the input of all of

951
00:38:41,950 --> 00:38:43,689
the status of all the inputs.

952
00:38:43,690 --> 00:38:46,593
I pressed the key, I swiped
the card, that sort of thing.

953
00:38:47,590 --> 00:38:48,590
So we have that too.

954
00:38:49,970 --> 00:38:52,792
Now let's very quickly look at HBUS.

955
00:38:53,650 --> 00:38:55,560
HBUS uses RS-485.

956
00:38:55,560 --> 00:38:58,287
Which has a differential serial thing.

957
00:38:58,287 --> 00:39:00,620
The protocol runs at
1 megabits per second.

958
00:39:00,620 --> 00:39:02,339
It's pretty fast for serial.

959
00:39:02,340 --> 00:39:03,173
It's very simple.

960
00:39:03,173 --> 00:39:04,060
There's just 2 voltages.

961
00:39:04,060 --> 00:39:05,779
If one is higher than the other, it's 0,

962
00:39:05,780 --> 00:39:07,150
if that's the other way round, it's 1.

963
00:39:07,150 --> 00:39:08,670
So it's very noise tolerant.

964
00:39:08,670 --> 00:39:10,670
The other nice thing
about HBUS, like GBUS,

965
00:39:10,670 --> 00:39:13,880
is that you can have star configurations.

966
00:39:13,880 --> 00:39:16,270
Instead of having to have
each single reader connect.

967
00:39:16,270 --> 00:39:18,400
Sorry, not star configurations,
we have bus configurations.

968
00:39:18,400 --> 00:39:20,030
So instead of having every single reader

969
00:39:20,030 --> 00:39:22,750
having to connect to the
controller in directly,

970
00:39:22,750 --> 00:39:25,670
you can have them all in
a daisy chain, basically.

971
00:39:25,670 --> 00:39:27,170
And this is also good because it prevents,

972
00:39:27,170 --> 00:39:31,370
if I was to go and try and
introduce my own reader,

973
00:39:31,370 --> 00:39:33,759
it gets no attention from the controller.

974
00:39:33,760 --> 00:39:38,010
Because it has a special protocol
for assigning new devices.

975
00:39:38,010 --> 00:39:40,387
So basically any new device
that's connected will say,

976
00:39:40,387 --> 00:39:42,160
"Please give me an address."

977
00:39:42,160 --> 00:39:45,339
And that's where it stops
until a manual event occurs.

978
00:39:45,340 --> 00:39:47,810
Where administrator on
one of the admin consoles

979
00:39:47,810 --> 00:39:49,837
manually says, "Yes,
this is a device I trust,

980
00:39:49,837 --> 00:39:51,270
"and I want you to start using it."

981
00:39:51,270 --> 00:39:53,090
So you can't just go in, jack in a reader,

982
00:39:53,090 --> 00:39:56,350
jack in a dodgy looking box thing.

983
00:39:56,350 --> 00:39:58,490
And expect that you'll be able
to talk to the controller.

984
00:39:58,490 --> 00:40:00,064
You need to, there's more to it.

985
00:40:00,064 --> 00:40:02,964
It first needs to be
approved by a administrator,

986
00:40:02,964 --> 00:40:04,259
and then there's also more.

987
00:40:04,260 --> 00:40:06,100
So let's say it did get
approved by administrator.

988
00:40:06,100 --> 00:40:07,710
It gives an address.
That's cool.

989
00:40:07,710 --> 00:40:12,190
Next thing is new devices,
what protocols it supports.

990
00:40:12,190 --> 00:40:13,960
In this case, if it's new.

991
00:40:13,960 --> 00:40:15,860
The controller needs
some new pre-shared keys.

992
00:40:15,860 --> 00:40:17,450
So it asks for that protocol.

993
00:40:17,450 --> 00:40:18,950
They exchange public key certs.

994
00:40:18,950 --> 00:40:21,950
So, yes, each device basically
has a public key certificate.

995
00:40:23,180 --> 00:40:25,460
Nothing sensitive here,
it's just public keys.

996
00:40:25,460 --> 00:40:27,680
The these are all signed by Gallagher.

997
00:40:27,680 --> 00:40:29,470
So basically each device
you can see there,

998
00:40:29,470 --> 00:40:31,740
the serial number is
actually the ASCII version

999
00:40:31,740 --> 00:40:34,149
of the serial number,
actually of this reader.

1000
00:40:34,150 --> 00:40:37,360
This is a reader's device
certificate, I believe.

1001
00:40:37,360 --> 00:40:40,720
So basically there is a
authoritative train of trust

1002
00:40:40,720 --> 00:40:43,462
basically between
Gallagher and its devices.

1003
00:40:46,110 --> 00:40:50,730
More things happen and we
end up with a set of keys.

1004
00:40:50,730 --> 00:40:53,400
And then those keys, now
this device is registered,

1005
00:40:53,400 --> 00:40:56,170
we can now say that we want to start

1006
00:40:56,170 --> 00:40:59,120
an actual data transmission protocol.

1007
00:40:59,120 --> 00:41:00,440
We can then use these keys

1008
00:41:00,440 --> 00:41:03,300
to prove that we can
respond to a challenge.

1009
00:41:03,300 --> 00:41:05,690
And then we can then use all of these keys

1010
00:41:05,690 --> 00:41:07,170
to then exchange data.

1011
00:41:07,170 --> 00:41:08,003
So.

1012
00:41:11,840 --> 00:41:13,930
That was out of order, anyway.

1013
00:41:13,930 --> 00:41:16,259
So you're asking where the
fun vulnerability in HBUS?

1014
00:41:16,260 --> 00:41:18,567
Well, there isn't one, for now.

1015
00:41:18,567 --> 00:41:20,180
Why did I tell you about it then?

1016
00:41:20,180 --> 00:41:21,410
I want to prove the difference,

1017
00:41:21,410 --> 00:41:23,109
but show the difference
between the current tech

1018
00:41:23,110 --> 00:41:24,410
offered by Gallagher versus

1019
00:41:24,410 --> 00:41:27,120
the ancient Cardax IV and GBUS,

1020
00:41:27,120 --> 00:41:29,053
which are very broken basically.

1021
00:41:29,930 --> 00:41:32,620
Of course, I would like
to look at HBUS more,

1022
00:41:32,620 --> 00:41:33,453
and I will be.

1023
00:41:33,453 --> 00:41:35,600
That's all I got up to
in this current time.

1024
00:41:37,580 --> 00:41:38,670
So we've looked at the cards,

1025
00:41:38,670 --> 00:41:41,770
the readers, and I didn't
find anything in the readers.

1026
00:41:41,770 --> 00:41:43,530
Nothing that I can tell you about yet.

1027
00:41:43,530 --> 00:41:46,400
So I did look at the readers.

1028
00:41:46,400 --> 00:41:48,420
So I've looked I've talked
here about the cards

1029
00:41:48,420 --> 00:41:50,000
and the connections past the readers.

1030
00:41:50,000 --> 00:41:51,170
And I looked at the readers myself.

1031
00:41:51,170 --> 00:41:52,470
There's one missing element here.

1032
00:41:52,470 --> 00:41:55,812
That's the actual RFID data transmission.

1033
00:41:56,760 --> 00:41:59,500
So there's two forms of RF based attack.

1034
00:41:59,500 --> 00:42:00,550
There's skimming.

1035
00:42:00,550 --> 00:42:02,830
So skimming, and that is not a balloon.

1036
00:42:02,830 --> 00:42:04,523
That is a magnetic loop antenna.

1037
00:42:06,800 --> 00:42:10,300
So, like I said, magnetic
loop conduction, wonderful.

1038
00:42:10,300 --> 00:42:12,810
So the loop, if we're
doing a skimming attack,

1039
00:42:12,810 --> 00:42:14,130
that's when we walk past someone,

1040
00:42:14,130 --> 00:42:16,610
power up their card and
retrieve the data off it.

1041
00:42:16,610 --> 00:42:19,120
So our antenna powers it.

1042
00:42:19,120 --> 00:42:22,790
We exchange data and grab
the data off the card.

1043
00:42:22,790 --> 00:42:24,980
Now, this works fine
for low frequency ones.

1044
00:42:24,980 --> 00:42:26,680
Because as soon as they're powered,

1045
00:42:26,680 --> 00:42:28,710
they all start screaming
out that magic number,

1046
00:42:28,710 --> 00:42:29,543
over and over.

1047
00:42:29,543 --> 00:42:31,560
There's no access control.

1048
00:42:31,560 --> 00:42:32,680
There's no protocols.

1049
00:42:32,680 --> 00:42:35,669
It's just power and then it
starts modulating the number.

1050
00:42:35,670 --> 00:42:37,700
So we can put our antenna into that field.

1051
00:42:37,700 --> 00:42:40,649
And then spit that out to any old reader,

1052
00:42:40,650 --> 00:42:42,433
save it, or do it on the same spot.

1053
00:42:43,760 --> 00:42:44,643
That's a replay attack.

1054
00:42:44,643 --> 00:42:49,643
But this doesn't work for high
frequency, 13.56 megahertz.

1055
00:42:49,670 --> 00:42:52,330
Because of a little thing called physics.

1056
00:42:52,330 --> 00:42:57,125
Basically, the power required to,

1057
00:42:57,125 --> 00:42:59,010
the magnetic field strengths required

1058
00:42:59,010 --> 00:43:01,770
to power a high frequency
card is a magnitude.

1059
00:43:01,770 --> 00:43:03,870
Well, I'm talking stuff
I don't understand.

1060
00:43:03,870 --> 00:43:05,540
But it's a lot more power required

1061
00:43:05,540 --> 00:43:06,750
to power one of these cards,

1062
00:43:06,750 --> 00:43:09,476
from a reasonable distance,
than it is for low frequency.

1063
00:43:09,476 --> 00:43:11,380
You might have noticed that old readers,

1064
00:43:11,380 --> 00:43:12,690
low frequency ones, will accept the card

1065
00:43:12,690 --> 00:43:14,040
from quite a bit a further distance,

1066
00:43:14,040 --> 00:43:16,643
than the newer high frequency ones do.

1067
00:43:17,610 --> 00:43:18,443
How it is.

1068
00:43:19,740 --> 00:43:21,790
So instead of skimming
for high-frequency cards,

1069
00:43:21,790 --> 00:43:24,910
let's try intercepting them,
and intercepting is similar,

1070
00:43:24,910 --> 00:43:27,950
but basically we're
intercepting a transaction

1071
00:43:27,950 --> 00:43:31,560
between a real reader and a real card.

1072
00:43:31,560 --> 00:43:36,560
Kind of like how the
agency has its spy bases,

1073
00:43:37,920 --> 00:43:41,940
looking at down coming satellite
traffic, kind of thing.

1074
00:43:41,940 --> 00:43:45,550
We're just sitting alongside
an existing transaction

1075
00:43:45,550 --> 00:43:47,590
and taking advantage of
the fact that the signal

1076
00:43:47,590 --> 00:43:50,090
is actually going further
than it should be.

1077
00:43:50,090 --> 00:43:51,480
So this is a terrible picture,

1078
00:43:51,480 --> 00:43:52,360
But this is what a

1079
00:43:52,360 --> 00:43:54,280
long range reader looks
like when I'm poking it.

1080
00:43:54,280 --> 00:43:59,090
These only will read RFID 13.56
cards, about 50 centimeters.

1081
00:43:59,090 --> 00:44:02,710
So they're used for
carpark kind of situations.

1082
00:44:02,710 --> 00:44:04,060
Just to show you that these

1083
00:44:04,898 --> 00:44:08,020
do try to pump out a lot of power.

1084
00:44:08,020 --> 00:44:10,170
They try to make the
distance as long as possible.

1085
00:44:10,170 --> 00:44:11,010
There is a completely,

1086
00:44:11,010 --> 00:44:12,710
I've just put on my sofa,

1087
00:44:12,710 --> 00:44:15,630
a completely unconnected
long range reader.

1088
00:44:15,630 --> 00:44:17,610
And there's two other different
kinds of long range reader.

1089
00:44:17,610 --> 00:44:18,530
There on the right.

1090
00:44:18,530 --> 00:44:20,230
I power the two ones on the right,

1091
00:44:20,230 --> 00:44:23,060
and that's enough to
power the one on the left.

1092
00:44:23,060 --> 00:44:25,400
So they're trying, right.

1093
00:44:25,400 --> 00:44:27,200
When you open them inside,
it says high voltage.

1094
00:44:27,200 --> 00:44:28,669
And I trust in those capacitors everywhere

1095
00:44:28,670 --> 00:44:29,970
and stuff I don't understand.

1096
00:44:29,970 --> 00:44:31,970
So it's not through a lack of power

1097
00:44:31,970 --> 00:44:33,609
that these things are low.

1098
00:44:33,610 --> 00:44:35,160
It's just physical limitations.

1099
00:44:36,000 --> 00:44:37,000
So what can we do?

1100
00:44:37,000 --> 00:44:40,527
Well, normally, readers,
what they'll do, is they say,

1101
00:44:40,527 --> 00:44:41,800
"Please give me block 60."

1102
00:44:41,800 --> 00:44:43,100
The one with the magic 8 bytes in

1103
00:44:43,100 --> 00:44:45,540
And the card will give the block data.

1104
00:44:45,540 --> 00:44:47,320
The reader has to treat
all the blocks the same.

1105
00:44:47,320 --> 00:44:49,665
Because the reader
doesn't necessarily know

1106
00:44:49,665 --> 00:44:51,250
what the content of the data is.

1107
00:44:51,250 --> 00:44:53,280
It just needs to pass
it on to the back end.

1108
00:44:53,280 --> 00:44:55,290
Can't make any assumptions about the data.

1109
00:44:55,290 --> 00:44:58,670
So, for example, if one of
the bits in that response

1110
00:44:58,670 --> 00:45:01,430
gets munged because of RF noise,

1111
00:45:01,430 --> 00:45:03,460
the reader basically has to
throw away the whole message.

1112
00:45:03,460 --> 00:45:06,370
The parity gets corrupted,
checksums gets corrupted,

1113
00:45:06,370 --> 00:45:08,430
whatever, it just can't figure it out.

1114
00:45:08,430 --> 00:45:10,460
But we know the format of sector.

1115
00:45:10,460 --> 00:45:13,090
Well, we know the format
of the data, for example.

1116
00:45:13,090 --> 00:45:14,610
in a Mifare Classic.

1117
00:45:14,610 --> 00:45:16,870
So, for example, if this bit gets,

1118
00:45:16,870 --> 00:45:18,500
this byte gets trampled on

1119
00:45:18,500 --> 00:45:20,700
by my neighbors fridge, or whatever,

1120
00:45:20,700 --> 00:45:25,700
sending out RFID spam, RF
spam, hopefully not RFID spam,

1121
00:45:26,693 --> 00:45:30,560
we can correct it using
the conveniently placed,

1122
00:45:30,560 --> 00:45:31,910
and this is why it's there,

1123
00:45:33,370 --> 00:45:36,540
we correct it using the
data on the other side.

1124
00:45:36,540 --> 00:45:39,590
Just flip that bit, and
now we know what it was.

1125
00:45:39,590 --> 00:45:41,120
In addition, we can go above and beyond.

1126
00:45:41,120 --> 00:45:44,310
We know what the
underlying field should be.

1127
00:45:44,310 --> 00:45:45,640
And we know that, for example,

1128
00:45:45,640 --> 00:45:47,560
if we've lost the bits

1129
00:45:47,560 --> 00:45:49,060
that would represent the facility code,

1130
00:45:49,060 --> 00:45:50,779
the high order bits,

1131
00:45:50,780 --> 00:45:52,510
we know that those are
probably zeros anyway,

1132
00:45:52,510 --> 00:45:55,270
because there's only
so many facility codes.

1133
00:45:55,270 --> 00:45:57,553
So what we can do, is
we can just replace that

1134
00:45:57,553 --> 00:45:59,630
with data that we all ready know.

1135
00:45:59,630 --> 00:46:02,840
So using HackRF, that's
a software defined radio,

1136
00:46:02,840 --> 00:46:04,320
and GNURadio,

1137
00:46:04,320 --> 00:46:08,350
which is software defined radio framework,

1138
00:46:08,350 --> 00:46:10,660
we can make an unholy mess again.

1139
00:46:10,660 --> 00:46:13,670
But what this does is
basically read some data

1140
00:46:13,670 --> 00:46:16,570
from the software defined radio antenna.

1141
00:46:16,570 --> 00:46:18,780
And puts it into, does a
bunch of pre-processing,

1142
00:46:18,780 --> 00:46:22,160
and then puts it into a
custom written block there.

1143
00:46:22,160 --> 00:46:24,390
What this custom written block does,

1144
00:46:24,390 --> 00:46:26,633
it can look at only the bare
minimum amount of messages

1145
00:46:26,633 --> 00:46:27,669
that we care about,

1146
00:46:27,670 --> 00:46:30,860
just to get a valid
Cardax access credential.

1147
00:46:30,860 --> 00:46:32,807
You know the reader normally has to say.

1148
00:46:32,807 --> 00:46:34,236
"I want to authenticate."
"Okay"

1149
00:46:34,237 --> 00:46:36,240
"Blah blah blah blah."
"I want this block."

1150
00:46:36,240 --> 00:46:37,180
"Okay."
"What's your CSN?"

1151
00:46:37,181 --> 00:46:38,230
"Blah, blah, blah."
All these messages

1152
00:46:38,230 --> 00:46:39,063
We don't care about that.

1153
00:46:39,063 --> 00:46:40,050
All we can want to see

1154
00:46:40,050 --> 00:46:42,390
is the magic 8 bytes in a transaction.

1155
00:46:42,390 --> 00:46:43,879
So we only care about the two nonces

1156
00:46:43,880 --> 00:46:46,110
that the reader and the card give,

1157
00:46:46,110 --> 00:46:47,283
and the block request from the reader,

1158
00:46:47,283 --> 00:46:49,759
and the response from the card.

1159
00:46:49,760 --> 00:46:51,130
And we can also do things like,

1160
00:46:51,130 --> 00:46:52,880
we can take advantage
of an off-line attack.

1161
00:46:52,880 --> 00:46:54,230
Normally readers have to be quick.

1162
00:46:54,230 --> 00:46:55,700
They have to try and figure out

1163
00:46:55,700 --> 00:46:57,069
what your cards said very fast.

1164
00:46:57,070 --> 00:46:59,880
Because otherwise you're
waiting there holding your card.

1165
00:46:59,880 --> 00:47:01,020
We can do off-line attacks.

1166
00:47:01,020 --> 00:47:02,620
We can we can sniff traffic.

1167
00:47:02,620 --> 00:47:05,540
And then spend longer time
trying to resolve any errors

1168
00:47:05,540 --> 00:47:07,610
in the RFID signal, trying to flip.

1169
00:47:07,610 --> 00:47:08,443
So what this does, for example,

1170
00:47:08,443 --> 00:47:10,660
is it flips all the bits in
a bunch of various patterns.

1171
00:47:10,660 --> 00:47:12,562
Trying to fix the parity, for example.

1172
00:47:14,140 --> 00:47:15,200
And here is more code.

1173
00:47:15,200 --> 00:47:16,359
So this is what it looks like.

1174
00:47:16,360 --> 00:47:17,193
You can see there,

1175
00:47:17,193 --> 00:47:19,380
that's how strong a
reader signal looks like.

1176
00:47:19,380 --> 00:47:21,360
And that weak signal on the right there,

1177
00:47:21,360 --> 00:47:22,920
That's a response from a card.

1178
00:47:22,920 --> 00:47:27,920
Card responses, are very lot
weaker than the reader signal.

1179
00:47:28,590 --> 00:47:30,463
And so you see there the
reader said 60 00 F5 7B.

1180
00:47:32,270 --> 00:47:36,590
Which is, "I would like to do something."

1181
00:47:36,590 --> 00:47:39,350
I can't remember what 60
is, but I'm sure it's great.

1182
00:47:39,350 --> 00:47:43,089
So what we can do is we can
take the software defined radio,

1183
00:47:43,090 --> 00:47:44,040
put an antenna on it.

1184
00:47:44,040 --> 00:47:46,790
There's my magnetic loop antenna holder,

1185
00:47:46,790 --> 00:47:47,623
in front of a reader.

1186
00:47:47,623 --> 00:47:48,583
And basically we can
see how far can we read?

1187
00:47:48,583 --> 00:47:53,410
How far can we see card
reader interactions?

1188
00:47:53,410 --> 00:47:54,980
This works only about 30 centimeters.

1189
00:47:54,980 --> 00:47:56,720
So well-done Matt, you did worse.

1190
00:47:56,720 --> 00:48:00,069
But in this case, physics
actually has an answer.

1191
00:48:00,070 --> 00:48:03,350
Bigger is better for RFID antennas.

1192
00:48:03,350 --> 00:48:05,393
So with that in mind,

1193
00:48:09,230 --> 00:48:10,273
introducing,

1194
00:48:14,426 --> 00:48:17,426
(audience applause)

1195
00:48:21,360 --> 00:48:22,193
Yeah, so,

1196
00:48:23,398 --> 00:48:24,573
RFID,

1197
00:48:24,573 --> 00:48:27,600
near field RF technologies

1198
00:48:27,600 --> 00:48:28,890
are usually just brute force.

1199
00:48:28,890 --> 00:48:31,200
You don't have fancy
antenna configurations,

1200
00:48:31,200 --> 00:48:32,169
and weird patterns and grills.

1201
00:48:32,170 --> 00:48:35,030
It's just more metal
basically, and bigger.

1202
00:48:35,030 --> 00:48:36,100
So in this case,

1203
00:48:36,100 --> 00:48:38,630
one square meter of copper
tubing from Bunnings,

1204
00:48:38,630 --> 00:48:41,260
and a lot of burnt fingers later,

1205
00:48:41,260 --> 00:48:42,633
and solder mess,

1206
00:48:43,528 --> 00:48:44,712
we have this.

1207
00:48:46,190 --> 00:48:47,210
Oh, okay, you're showing that.

1208
00:48:47,210 --> 00:48:48,660
Yeah, that's just the cables.

1209
00:48:50,120 --> 00:48:52,190
This is taken out of
the HF antenna cookbook,

1210
00:48:52,190 --> 00:48:54,120
from Texas Instruments.

1211
00:48:54,120 --> 00:48:56,720
Here's me and Valentinas.

1212
00:48:56,720 --> 00:49:01,720
A friend who let me borrowe
his man cave, I guess.

1213
00:49:02,020 --> 00:49:03,120
Looks like this.

1214
00:49:03,120 --> 00:49:05,089
Yeah, multimeter for scale.

1215
00:49:05,090 --> 00:49:06,760
This gets up to three meters.

1216
00:49:06,760 --> 00:49:08,410
Now, I know what you're thinking.

1217
00:49:09,247 --> 00:49:10,203
You can't walk down the street with this,

1218
00:49:10,203 --> 00:49:11,763
and then, you know.

1219
00:49:12,720 --> 00:49:14,330
There is a happy medium.

1220
00:49:14,330 --> 00:49:15,830
And the other thing is,

1221
00:49:15,830 --> 00:49:17,110
there is the opportunity to build

1222
00:49:17,110 --> 00:49:20,340
a slightly more reasonably sized one.

1223
00:49:20,340 --> 00:49:22,100
And I'm not an RF engineer,

1224
00:49:22,100 --> 00:49:26,370
so there's a lot of shit
that I had to guess here.

1225
00:49:26,370 --> 00:49:27,353
I think I got it right.

1226
00:49:27,353 --> 00:49:29,070
But there's a lot more tuning
and stuff that could be done.

1227
00:49:29,070 --> 00:49:32,415
So if you're an old ham,
or you work in RF fields,

1228
00:49:32,415 --> 00:49:33,400
give me some help.

1229
00:49:33,400 --> 00:49:34,760
That would be awesome.

1230
00:49:34,760 --> 00:49:36,360
Okay, so we get to the very last,

1231
00:49:36,360 --> 00:49:38,230
second to last part, because
that's telling me time is up,

1232
00:49:38,230 --> 00:49:39,930
so I'm gonna go real fast.
This is a danger zone.

1233
00:49:39,930 --> 00:49:40,763
So don't do anything.

1234
00:49:40,763 --> 00:49:41,900
That's what I did.

1235
00:49:41,900 --> 00:49:42,733
Don't do any of this.

1236
00:49:42,733 --> 00:49:45,660
So I wanted to find out what
are the number of technologies

1237
00:49:45,660 --> 00:49:47,980
in use across actual readers, right.

1238
00:49:47,980 --> 00:49:48,813
Do a field survey.

1239
00:49:48,813 --> 00:49:50,480
So I wanted to find out how many 125.

1240
00:49:50,480 --> 00:49:52,540
How many readers accept 125 cards?

1241
00:49:52,540 --> 00:49:55,070
How many readers accept
Classic, Plus and DESFire?

1242
00:49:55,070 --> 00:49:56,350
Now Plus is, like I say,

1243
00:49:56,350 --> 00:49:57,950
the bastard child they don't care about,

1244
00:49:57,950 --> 00:49:59,240
it's effectively the same as DESFire.

1245
00:49:59,240 --> 00:50:02,220
So I'm just going to
pretend that doesn't exist.

1246
00:50:02,220 --> 00:50:04,040
And more importantly, I also want to know,

1247
00:50:04,040 --> 00:50:07,330
are people using default
keys, or non default keys?

1248
00:50:07,330 --> 00:50:09,170
Because as you figured,

1249
00:50:09,170 --> 00:50:12,390
the only secure configuration
is not to use low frequency,

1250
00:50:12,390 --> 00:50:13,589
not to use Mifare Classic,

1251
00:50:13,590 --> 00:50:15,190
not to use Mifare DESFire
with the default key,

1252
00:50:15,190 --> 00:50:17,560
But you have to use Mifare
DESFire with non-default key.

1253
00:50:17,560 --> 00:50:19,440
That's the only chance that you have

1254
00:50:19,440 --> 00:50:21,870
of keeping your credential secure.

1255
00:50:21,870 --> 00:50:24,220
Or Mifare Plus, with a non-default key.

1256
00:50:24,220 --> 00:50:26,230
But like I say, it doesn't exist.

1257
00:50:26,230 --> 00:50:30,160
So I wrote a, I wanted to know this.

1258
00:50:30,160 --> 00:50:32,649
So here I am debugging some code

1259
00:50:32,650 --> 00:50:34,730
out in the middle of the street.

1260
00:50:34,730 --> 00:50:38,050
I wrote a little, you
can't see it unfortunately,

1261
00:50:38,050 --> 00:50:41,950
It's just a Proxmark that
connects to my laptop

1262
00:50:41,950 --> 00:50:45,129
and tells me what card
technology is in use on a reader.

1263
00:50:45,130 --> 00:50:47,850
And are they using a
non-default key or not.

1264
00:50:47,850 --> 00:50:48,703
Important.

1265
00:50:49,750 --> 00:50:52,670
It does not tell me that
key if it's non-default.

1266
00:50:52,670 --> 00:50:55,200
Because of the way the
DESFire protocol works.

1267
00:50:55,200 --> 00:50:57,557
I can tell if it's using the default key.

1268
00:50:57,557 --> 00:50:58,390
But I can't-

1269
00:50:58,390 --> 00:51:01,299
if I can tell it's
using a non-default key,

1270
00:51:01,300 --> 00:51:02,750
I can't tell what that key is,

1271
00:51:02,750 --> 00:51:05,020
but I can tell that it's not the default.

1272
00:51:05,020 --> 00:51:08,090
So in my opinion, no damage done.

1273
00:51:08,090 --> 00:51:09,800
I just get to see what I'd be able to do

1274
00:51:09,800 --> 00:51:11,630
by holding up my cards,

1275
00:51:11,630 --> 00:51:12,980
seeing if they ding or not.

1276
00:51:14,020 --> 00:51:15,900
And the results.

1277
00:51:15,900 --> 00:51:19,270
So there's, I did a sample
of ninety five readers,

1278
00:51:19,270 --> 00:51:21,610
10 of them are the old big boys.

1279
00:51:21,610 --> 00:51:24,220
11 Prox Plus, 10 Teardrops,

1280
00:51:24,220 --> 00:51:26,000
5, 28, 9, 20 of the big ones,

1281
00:51:26,000 --> 00:51:31,000
and 2 probably where I forgot
to record that information.

1282
00:51:31,060 --> 00:51:33,450
Low-frequency is in use on 35 out of 60.

1283
00:51:33,450 --> 00:51:35,330
I really probably should have
put percentages, but whatever.

1284
00:51:35,330 --> 00:51:37,200
35 out of, not out of 60.

1285
00:51:37,200 --> 00:51:39,100
35 out of 95.

1286
00:51:39,100 --> 00:51:40,173
And that's a lot.

1287
00:51:41,300 --> 00:51:44,650
And high frequency is
accepted by 80 of them.

1288
00:51:44,650 --> 00:51:45,910
And not by 15.

1289
00:51:45,910 --> 00:51:48,940
So one of the things you can tell

1290
00:51:48,940 --> 00:51:50,520
by just having low frequency enabled

1291
00:51:50,520 --> 00:51:53,450
is that it accepts 125
kilohertz Cardax Prox.

1292
00:51:53,450 --> 00:51:54,759
That's by design.

1293
00:51:54,760 --> 00:51:57,650
The reader doesn't emit
a low frequency field

1294
00:51:57,650 --> 00:51:59,790
unless it's willing to accept those cards.

1295
00:51:59,790 --> 00:52:01,540
So just by the presence of that field,

1296
00:52:01,540 --> 00:52:03,600
you know that it's accepting those cards.

1297
00:52:03,600 --> 00:52:05,020
Whereas, for the high frequency ones,

1298
00:52:05,020 --> 00:52:07,250
you have to actually tell
what kind of card it accepts.

1299
00:52:07,250 --> 00:52:08,550
And that's harder to tell.

1300
00:52:09,930 --> 00:52:11,105
This is the thing that I skipped over,

1301
00:52:11,105 --> 00:52:12,550
so I'm not even going to show you that.

1302
00:52:12,550 --> 00:52:14,100
Okay, so now we get to the big thing.

1303
00:52:14,100 --> 00:52:17,043
How many sites are using a
non-default Mifare site key?

1304
00:52:17,043 --> 00:52:19,680
This is the key thing that is required,

1305
00:52:19,680 --> 00:52:21,591
Gallagher acknowledges it, knows it.

1306
00:52:21,591 --> 00:52:23,069
This is the thing that is required

1307
00:52:23,070 --> 00:52:26,063
to have any form of card security.

1308
00:52:27,120 --> 00:52:30,423
Put your hands up if
you think it's above 20,

1309
00:52:33,090 --> 00:52:33,923
Above 10,

1310
00:52:34,810 --> 00:52:36,770
Above five,

1311
00:52:36,770 --> 00:52:38,550
Above one,

1312
00:52:38,550 --> 00:52:39,383
Zero?

1313
00:52:40,720 --> 00:52:41,859
Oh, ye of little faith.

1314
00:52:41,860 --> 00:52:42,983
Okay, there's one.

1315
00:52:51,590 --> 00:52:55,340
And this one particular
government department

1316
00:52:55,340 --> 00:52:58,103
does not want me scanning their readers.

1317
00:53:00,570 --> 00:53:03,910
And I understand. This is
the second time I've had

1318
00:53:03,910 --> 00:53:06,975
a laptop confiscated by
the New Zealand government.

1319
00:53:06,976 --> 00:53:09,290
(audience laughs)

1320
00:53:09,290 --> 00:53:13,570
So in my not defense.

1321
00:53:13,570 --> 00:53:14,420
Yes, it was late.

1322
00:53:14,420 --> 00:53:15,650
I'm a night owl.

1323
00:53:15,650 --> 00:53:17,830
So walking around in near black,

1324
00:53:17,830 --> 00:53:19,790
at midnight, scanning readers.

1325
00:53:19,790 --> 00:53:23,233
It's not the smartest of
ideas, just one of those,

1326
00:53:24,246 --> 00:53:29,036
thinking without actually
thinking too far ahead things.

1327
00:53:29,036 --> 00:53:31,350
But, yes, I would like to
point out that, during,

1328
00:53:31,350 --> 00:53:32,730
if you did see me or,

1329
00:53:32,730 --> 00:53:34,963
and that agency that
does know who they are.

1330
00:53:36,340 --> 00:53:38,480
No card data has been taken.

1331
00:53:38,480 --> 00:53:40,173
There's no way that can be done.

1332
00:53:41,070 --> 00:53:41,960
And to be honest,

1333
00:53:41,960 --> 00:53:46,020
congratulations for the
only non-default site key

1334
00:53:46,020 --> 00:53:47,070
in all of Wellington.

1335
00:53:56,820 --> 00:53:57,920
And that's what pisses me off,

1336
00:53:57,920 --> 00:53:59,690
it's only because of
the non-default site key

1337
00:53:59,690 --> 00:54:00,670
that I stayed around.

1338
00:54:00,670 --> 00:54:03,160
I was like, wait a second,
that can't be right.

1339
00:54:03,160 --> 00:54:05,730
And that's when the security
guards show up, and the cops.

1340
00:54:05,730 --> 00:54:07,520
So, yeah, okay.

1341
00:54:07,520 --> 00:54:08,910
That was all about attack.

1342
00:54:08,910 --> 00:54:11,680
Now let's talk about defense.

1343
00:54:11,680 --> 00:54:14,060
So migrate to a secure
card technology, right.

1344
00:54:14,060 --> 00:54:16,410
That that currently is
only Mifare DESFire.

1345
00:54:16,410 --> 00:54:18,430
Gallagher does support
Bluetooth credentials

1346
00:54:18,430 --> 00:54:21,430
and PIV for you yanks,

1347
00:54:21,430 --> 00:54:24,480
and also people who do use
those kind of technologies.

1348
00:54:24,480 --> 00:54:26,930
But for most of us, it's
gonna be Mifare DESFire.

1349
00:54:28,910 --> 00:54:30,180
Disable unused card types.

1350
00:54:30,180 --> 00:54:31,013
You can do this.

1351
00:54:31,013 --> 00:54:33,636
You can go to the control
settings of each reader and say,

1352
00:54:33,637 --> 00:54:35,873
"I only want you to accept DESFire cards."

1353
00:54:35,873 --> 00:54:38,003
It's very simple. You know
how to use checkboxes.

1354
00:54:38,003 --> 00:54:41,170
Use a non-default, Mifare site key.

1355
00:54:41,170 --> 00:54:42,240
Uncheck that box.

1356
00:54:42,240 --> 00:54:44,410
Press the handy dandy, to generate things,

1357
00:54:44,410 --> 00:54:48,359
don't just type in zeros,
press to generate the keys.

1358
00:54:48,360 --> 00:54:49,313
Now this is where it gets sticky,

1359
00:54:49,313 --> 00:54:52,410
because you do have to
reissue all your cards.

1360
00:54:52,410 --> 00:54:55,180
And yes, like I was talking
to a contact at Gallagher.

1361
00:54:55,180 --> 00:54:57,279
And he said, "Yeah,
this can be a problem."

1362
00:54:57,280 --> 00:54:58,578
And I was like,

1363
00:54:58,578 --> 00:54:59,433
"Yeah, you're issuing 100
cards must be quite a bit."

1364
00:54:59,433 --> 00:55:01,207
And he was like, "Try 10000."

1365
00:55:01,207 --> 00:55:02,859
And I was like, "Yeah, okay."

1366
00:55:02,860 --> 00:55:06,000
So we're pretty small, our sites here,

1367
00:55:06,000 --> 00:55:08,000
but some the biggest
sites that Gallagher do,

1368
00:55:08,000 --> 00:55:09,350
it's that there's actually,

1369
00:55:10,970 --> 00:55:11,879
there's a bit of stuff

1370
00:55:11,880 --> 00:55:14,750
that needs to be overcome there first.

1371
00:55:14,750 --> 00:55:17,303
Use HBUS, not Cardax IV/GBUS.

1372
00:55:17,303 --> 00:55:20,240
And make use of all the
functionality in command center.

1373
00:55:20,240 --> 00:55:21,116
Now you might be asking,

1374
00:55:21,117 --> 00:55:22,650
"How do I actually audit all this?"

1375
00:55:22,650 --> 00:55:23,540
Well, lucky for you.

1376
00:55:23,540 --> 00:55:26,180
There is the Gallagher
Security Health Check.

1377
00:55:26,180 --> 00:55:29,250
This as a concerned person looking at

1378
00:55:29,250 --> 00:55:31,720
his Gallagher Security
Health Check report.

1379
00:55:31,720 --> 00:55:35,180
Basically, you run this
tool on your machine.

1380
00:55:35,180 --> 00:55:37,230
One of your admin
machines, it collects data,

1381
00:55:37,230 --> 00:55:38,400
you send that to Gallagher.

1382
00:55:38,400 --> 00:55:40,870
They run the secret sauce, and
they send you back a report

1383
00:55:40,870 --> 00:55:42,970
that tells you what your set up is.

1384
00:55:42,970 --> 00:55:45,779
So basically, this puts
me out of business, right?

1385
00:55:45,780 --> 00:55:47,620
Industry first automated method,

1386
00:55:47,620 --> 00:55:48,770
to check your security system.

1387
00:55:48,770 --> 00:55:51,720
We all know Nessus, we
all know all other boring,

1388
00:55:51,720 --> 00:55:53,529
checkbox standard things.

1389
00:55:53,530 --> 00:55:55,040
This is for first one for

1390
00:55:55,040 --> 00:55:56,800
actual physical security control systems.

1391
00:55:56,800 --> 00:55:58,860
Which is really great to see.

1392
00:55:58,860 --> 00:56:00,850
This is what one of the
reports will look like.

1393
00:56:00,850 --> 00:56:02,410
And you can see here, clearly,

1394
00:56:02,410 --> 00:56:04,069
that it's talking about the things

1395
00:56:04,070 --> 00:56:05,780
that I've already bugged everyone about.

1396
00:56:05,780 --> 00:56:07,190
So reader 125k.

1397
00:56:07,190 --> 00:56:09,330
You have low-frequency
enabled, disable it.

1398
00:56:09,330 --> 00:56:11,400
You have Mifare Classic
enable, disable it.

1399
00:56:11,400 --> 00:56:12,530
I believe there's also one's for,

1400
00:56:12,530 --> 00:56:15,040
you have a non-default
key, don't use a default.

1401
00:56:16,070 --> 00:56:18,670
There is also the Gallagher
controller 6000 Hardening Guide.

1402
00:56:18,670 --> 00:56:20,170
And the Command Center Hardening Guide.

1403
00:56:20,170 --> 00:56:21,450
You should read these documents,

1404
00:56:21,450 --> 00:56:23,850
or your installer should
have read them for you.

1405
00:56:24,980 --> 00:56:26,560
Okay, so that's it.

1406
00:56:26,560 --> 00:56:27,753
I am well over time.

1407
00:56:28,650 --> 00:56:31,700
Now, as I said, this
is just a short summary

1408
00:56:31,700 --> 00:56:33,970
of the more interesting
parts of the research.

1409
00:56:33,970 --> 00:56:35,240
There's a lot more out there

1410
00:56:35,240 --> 00:56:37,872
that I need to gather
my notes for, literally.

1411
00:56:38,711 --> 00:56:41,470
The best form to find this is,

1412
00:56:41,470 --> 00:56:43,263
I'll probably have this on
my GitHub at some point.

1413
00:56:43,263 --> 00:56:46,850
I'll just make a repo and dump
a bunch of information there.

1414
00:56:46,850 --> 00:56:50,022
Also my Web site, and
it's plain and I2P there.

1415
00:56:52,840 --> 00:56:53,673
And yeah.

1416
00:56:53,673 --> 00:56:56,750
Thank you very much to
Daniel Underhay, best friend.

1417
00:56:56,750 --> 00:56:59,990
And he's given me lots of
ideas and support through this.

1418
00:56:59,990 --> 00:57:01,573
Robert Cowsley at Gallagher.

1419
00:57:03,170 --> 00:57:05,480
I've put Gallagher through a
bit, and this is Gallagher-

1420
00:57:05,480 --> 00:57:08,340
Gallagher really wants
to be the anti-HID, okay.

1421
00:57:08,340 --> 00:57:09,980
Everyone knows AmmonRa, or whatever it is.

1422
00:57:09,980 --> 00:57:13,220
The guy, leaked the HID iClass master key,

1423
00:57:13,220 --> 00:57:14,569
moved to China, apparently.

1424
00:57:16,450 --> 00:57:17,350
They don't want to be that.

1425
00:57:17,350 --> 00:57:18,200
They want to be supportive.

1426
00:57:18,200 --> 00:57:19,359
They offer licenses.

1427
00:57:19,360 --> 00:57:20,193
They offer hardware.

1428
00:57:20,193 --> 00:57:21,026
They offer training.

1429
00:57:21,026 --> 00:57:22,640
So this is really good.

1430
00:57:22,640 --> 00:57:24,379
I'll admit that I wasn't
able to keep my bargain.

1431
00:57:24,380 --> 00:57:25,750
Good side of the deal quite so much

1432
00:57:25,750 --> 00:57:27,333
because these slides, this
will be the very first time

1433
00:57:27,333 --> 00:57:28,774
that they've seen them as well.

1434
00:57:28,774 --> 00:57:31,250
Apologies, guys, but hopefully
there's nothing in here

1435
00:57:31,250 --> 00:57:33,290
that didn't already get mentioned.

1436
00:57:33,290 --> 00:57:35,020
But yeah, Robert's been great.

1437
00:57:35,020 --> 00:57:36,766
The whole Gallagher team's been great.

1438
00:57:36,766 --> 00:57:38,220
Oh, there they are.

1439
00:57:38,220 --> 00:57:40,000
Tom Moore, Aura Infosec.

1440
00:57:40,000 --> 00:57:41,540
I've been disappearing into a black hole

1441
00:57:41,540 --> 00:57:44,550
quite a bit the last few months
instead of doing my work.

1442
00:57:44,550 --> 00:57:47,210
And it's Tom's job to
whip me back into shape.

1443
00:57:47,210 --> 00:57:48,310
So thank you very much, Tom,

1444
00:57:48,310 --> 00:57:49,549
for keeping me on track,

1445
00:57:49,550 --> 00:57:52,910
and also for reaching out to that agency

1446
00:57:52,910 --> 00:57:54,482
to see what could be done.

1447
00:57:55,550 --> 00:57:57,722
And Aura Infosec.

1448
00:57:57,722 --> 00:57:59,470
And you.

1449
00:57:59,470 --> 00:58:01,500
Also Vales for letting me
borrow your logic analyzer

1450
00:58:01,500 --> 00:58:03,830
for the last one and a half years.

1451
00:58:03,830 --> 00:58:04,980
I still need it though.

1452
00:58:06,930 --> 00:58:07,942
Thanks.

1453
00:58:07,942 --> 00:58:10,942
(audience applause)

