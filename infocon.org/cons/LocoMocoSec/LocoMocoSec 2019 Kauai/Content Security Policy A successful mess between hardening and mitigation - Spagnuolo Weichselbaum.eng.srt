1
00:00:00,469 --> 00:00:05,790
awesome hello everyone and welcome to

2
00:00:03,419 --> 00:00:07,790
content security policy a successful

3
00:00:05,790 --> 00:00:11,400
mess between hardening and mitigation

4
00:00:07,790 --> 00:00:14,759
we're super happy to be here today this

5
00:00:11,400 --> 00:00:17,699
is Mickey my name is Lucas we book from

6
00:00:14,759 --> 00:00:19,859
Google Switzerland and yeah

7
00:00:17,699 --> 00:00:21,600
Hawaii's awesome really enjoying this

8
00:00:19,859 --> 00:00:25,080
conference so it was really rough to

9
00:00:21,600 --> 00:00:28,740
travel okay we have a pretty stuffed

10
00:00:25,080 --> 00:00:30,869
again agenda today we have some general

11
00:00:28,740 --> 00:00:32,699
recommendations that should be usable

12
00:00:30,869 --> 00:00:34,980
for for developers and security experts

13
00:00:32,700 --> 00:00:37,980
but we also have some pretty advanced

14
00:00:34,980 --> 00:00:41,879
topics where we go very much into detail

15
00:00:37,980 --> 00:00:43,800
so if there's questions feel free to ask

16
00:00:41,879 --> 00:00:45,539
me at the end or be around at the

17
00:00:43,800 --> 00:00:51,239
conference so we're happy to chat about

18
00:00:45,539 --> 00:00:53,039
CSP 24/7 just to grab us yes so Mickey

19
00:00:51,239 --> 00:00:57,328
will start with vulnerability trends and

20
00:00:53,039 --> 00:01:02,520
I'll take over in a bit oh this is for

21
00:00:57,329 --> 00:01:05,610
work okay hi everyone so we'd like to

22
00:01:02,520 --> 00:01:07,530
start with real world data so we focus

23
00:01:05,610 --> 00:01:09,350
on cross-site scripting or exercise

24
00:01:07,530 --> 00:01:13,920
vulnerabilities right and this is also

25
00:01:09,350 --> 00:01:15,750
what we aim for what you mean CSP CSP is

26
00:01:13,920 --> 00:01:17,729
this like a huge umbrella security

27
00:01:15,750 --> 00:01:20,340
header which was originally thought as

28
00:01:17,729 --> 00:01:23,220
like solving many of web security issues

29
00:01:20,340 --> 00:01:25,320
but we focus on as exercise in all our

30
00:01:23,220 --> 00:01:26,670
previous talks and in this Docs too so

31
00:01:25,320 --> 00:01:29,719
we wanted to start with real world data

32
00:01:26,670 --> 00:01:31,880
and what we have is

33
00:01:29,719 --> 00:01:33,890
all the XSS vulnerability is reported to

34
00:01:31,880 --> 00:01:36,798
us to Google in the vulnerability reward

35
00:01:33,890 --> 00:01:40,250
program since 2014 and you can see that

36
00:01:36,799 --> 00:01:42,740
like around 2/3 of them are actually web

37
00:01:40,250 --> 00:01:45,020
application web platform baths and

38
00:01:42,740 --> 00:01:47,869
drilling down in this web platform baths

39
00:01:45,020 --> 00:01:50,259
we see that approximately 3/4 our

40
00:01:47,869 --> 00:01:54,380
cross-site scripting XSS vulnerability

41
00:01:50,259 --> 00:01:56,450
so XSS is a major problem and this is

42
00:01:54,380 --> 00:01:59,899
reflected also outside of Google in

43
00:01:56,450 --> 00:02:02,119
other sources of data other bug bounties

44
00:01:59,899 --> 00:02:04,369
or vulnerability reward programs so for

45
00:02:02,119 --> 00:02:07,789
example hacker one has a similar result

46
00:02:04,369 --> 00:02:09,679
and also Mozilla in Zilla box reported

47
00:02:07,789 --> 00:02:13,390
to Mozilla we see that XSS is actually

48
00:02:09,679 --> 00:02:16,220
the top vulnerability reported there so

49
00:02:13,390 --> 00:02:21,140
there is a need or defense in depth in

50
00:02:16,220 --> 00:02:23,180
this field mostly because the web mostly

51
00:02:21,140 --> 00:02:25,250
because the web platform is not secure

52
00:02:23,180 --> 00:02:27,680
by default unfortunately we are still

53
00:02:25,250 --> 00:02:31,280
not there so it is important especially

54
00:02:27,680 --> 00:02:33,500
for very sensitive web applications to

55
00:02:31,280 --> 00:02:35,329
have some kind of defense-in-depth

56
00:02:33,500 --> 00:02:37,459
mechanism in case the primary security

57
00:02:35,329 --> 00:02:38,959
security mechanism we should not be

58
00:02:37,459 --> 00:02:41,709
neglected at all and actually people

59
00:02:38,959 --> 00:02:45,380
should focus with them in case they fail

60
00:02:41,709 --> 00:02:47,209
and we'd like to spend a word on what we

61
00:02:45,380 --> 00:02:50,269
call mitigations because mitigation is a

62
00:02:47,209 --> 00:02:52,489
very complex and overloaded word it

63
00:02:50,269 --> 00:02:54,980
actually comes mostly the first

64
00:02:52,489 --> 00:02:59,000
mitigations in computer security are in

65
00:02:54,980 --> 00:03:01,130
the let's say memory safety world so

66
00:02:59,000 --> 00:03:03,139
mostly for mitigating exploitation of

67
00:03:01,130 --> 00:03:05,540
buffer overflows and so on right and

68
00:03:03,139 --> 00:03:07,099
when we talk about web mitigation

69
00:03:05,540 --> 00:03:09,349
techniques these are a little bit more

70
00:03:07,099 --> 00:03:11,720
and more recent more modern so we

71
00:03:09,349 --> 00:03:14,238
believe there are no mitigations are

72
00:03:11,720 --> 00:03:16,010
made equal and there are some good

73
00:03:14,239 --> 00:03:18,859
mitigations and some mitigations that

74
00:03:16,010 --> 00:03:21,709
are less good and I'd like to start with

75
00:03:18,859 --> 00:03:25,099
them first so some mitigation Zain to

76
00:03:21,709 --> 00:03:27,739
just raise the bar so they have an

77
00:03:25,099 --> 00:03:29,540
economy in the matter mindset is based

78
00:03:27,739 --> 00:03:32,239
on an economy of cost they want to make

79
00:03:29,540 --> 00:03:35,090
costly for an attacker to exploit a

80
00:03:32,239 --> 00:03:37,850
vulnerability they want to slow down the

81
00:03:35,090 --> 00:03:41,069
attacker so in this case in the web

82
00:03:37,850 --> 00:03:43,680
world I would say that a traditional CSP

83
00:03:41,069 --> 00:03:45,689
which you might have seen or read in our

84
00:03:43,680 --> 00:03:47,310
previous papers and talks the whitelist

85
00:03:45,689 --> 00:03:49,349
base he espies are automatically by

86
00:03:47,310 --> 00:03:51,299
possible so as Jim said earlier on more

87
00:03:49,349 --> 00:03:54,929
than 95% they're automatically by

88
00:03:51,299 --> 00:03:58,709
possible so you attacker has just to

89
00:03:54,930 --> 00:04:00,870
find bypass in the whitelist to exploit

90
00:03:58,709 --> 00:04:04,170
the same bug write a symbol that was

91
00:04:00,870 --> 00:04:05,790
there so in this way the the mitigation

92
00:04:04,170 --> 00:04:07,589
technique did not really reduce the

93
00:04:05,790 --> 00:04:09,840
attack surface but on the other hand

94
00:04:07,590 --> 00:04:11,999
good mitigation techniques are the ones

95
00:04:09,840 --> 00:04:14,939
that also reduce the attack surface by

96
00:04:11,999 --> 00:04:17,579
for example disabling and safe api's so

97
00:04:14,939 --> 00:04:19,829
for example not having unsafe Evo we see

98
00:04:17,579 --> 00:04:23,400
later the details in a CSP policy means

99
00:04:19,829 --> 00:04:25,470
that all evil based XSS cannot happen so

100
00:04:23,400 --> 00:04:27,570
this is an actual reduction of attack

101
00:04:25,470 --> 00:04:29,759
surface and this is what we call a good

102
00:04:27,570 --> 00:04:32,490
mitigation there are other examples like

103
00:04:29,759 --> 00:04:34,979
the nospace ESP but we see later in in

104
00:04:32,490 --> 00:04:37,470
great details another important thing is

105
00:04:34,979 --> 00:04:39,690
good mitigation should actually induce

106
00:04:37,470 --> 00:04:41,340
hardening what we call hardening of the

107
00:04:39,690 --> 00:04:47,330
application from a code point of view

108
00:04:41,340 --> 00:04:49,799
for example CSP a good CSP actually

109
00:04:47,330 --> 00:04:51,900
induces the developer to for example

110
00:04:49,800 --> 00:04:53,789
refactor inline event handlers which are

111
00:04:51,900 --> 00:04:55,500
bad for security or to use our

112
00:04:53,789 --> 00:04:57,780
contextual artists getting templating

113
00:04:55,500 --> 00:05:01,250
systems which greatly increases the

114
00:04:57,780 --> 00:05:06,150
security with respect to reflected XSS

115
00:05:01,250 --> 00:05:08,030
so with this I go through a little bit

116
00:05:06,150 --> 00:05:11,130
more in detail that would kind of XSS

117
00:05:08,030 --> 00:05:12,508
we're blocked at Google by CSP so this

118
00:05:11,130 --> 00:05:17,099
is real world data it's the first time

119
00:05:12,509 --> 00:05:19,909
we present with this detail so coverage

120
00:05:17,099 --> 00:05:22,590
of CSP at Google so this effort has been

121
00:05:19,909 --> 00:05:25,770
mostly three years and in three years we

122
00:05:22,590 --> 00:05:29,299
are covering 62% of all outgoing Google

123
00:05:25,770 --> 00:05:32,789
traffic with an enforcing non-space CSP

124
00:05:29,300 --> 00:05:34,949
and these are more than 80 Google

125
00:05:32,789 --> 00:05:38,190
domains so Google has a lot of domains

126
00:05:34,949 --> 00:05:39,930
subdomains as you might might guess but

127
00:05:38,190 --> 00:05:43,199
80 is still pretty significant number

128
00:05:39,930 --> 00:05:45,520
and more than 160 services and for very

129
00:05:43,199 --> 00:05:48,009
sensitive domains the traffic cover

130
00:05:45,520 --> 00:05:51,159
with what we call strict CSP is very

131
00:05:48,009 --> 00:05:55,300
close to 100% and the number of services

132
00:05:51,160 --> 00:05:58,710
that have almost total coverage of CSP

133
00:05:55,300 --> 00:06:01,599
is around 70%

134
00:05:58,710 --> 00:06:06,909
how many exercises that were reported to

135
00:06:01,599 --> 00:06:10,180
us got blocked by CSP so in 2018 more

136
00:06:06,909 --> 00:06:13,240
than 60% of exercises that got reported

137
00:06:10,180 --> 00:06:17,319
to us got mitigated successfully by our

138
00:06:13,240 --> 00:06:19,870
CSP so among 11 XSS vulnerabilities on

139
00:06:17,319 --> 00:06:23,949
very sensitive domains 7 of them which

140
00:06:19,870 --> 00:06:28,509
is around 78% got successfully prevented

141
00:06:23,949 --> 00:06:30,460
by CSP and taking into account all the

142
00:06:28,509 --> 00:06:32,919
69 access vulnerabilities on sensitive

143
00:06:30,460 --> 00:06:35,049
domains we have around 60% so here in

144
00:06:32,919 --> 00:06:37,659
numbers with pie charts on the left very

145
00:06:35,050 --> 00:06:40,240
sensitive domains on the right all the

146
00:06:37,659 --> 00:06:41,979
sensitive domains I'm going a little bit

147
00:06:40,240 --> 00:06:45,340
more in detail on the very sensitive

148
00:06:41,979 --> 00:06:48,849
domains 11 exercises got reported of

149
00:06:45,340 --> 00:06:51,549
them 9 were happening on endpoints that

150
00:06:48,849 --> 00:06:53,979
were covered by CSP and CSP coverage is

151
00:06:51,550 --> 00:06:56,199
actually a problem maybe we'll go into

152
00:06:53,979 --> 00:06:58,120
that a little bit later because it's

153
00:06:56,199 --> 00:07:01,930
important to cover all organ all of your

154
00:06:58,120 --> 00:07:04,630
endpoints will CSP and of these 9 7 were

155
00:07:01,930 --> 00:07:07,900
mitigated by CSP and the other two that

156
00:07:04,630 --> 00:07:10,150
were injection in the SSC attribute of

157
00:07:07,900 --> 00:07:12,068
script could have been mitigated by what

158
00:07:10,150 --> 00:07:13,539
we call an additional whitelist policy

159
00:07:12,069 --> 00:07:15,490
so we see later this is a pretty

160
00:07:13,539 --> 00:07:17,199
advanced thing we're not going full

161
00:07:15,490 --> 00:07:19,960
circle and advocating for whitelist

162
00:07:17,199 --> 00:07:22,060
based policies so please bear with us

163
00:07:19,960 --> 00:07:25,568
and we'll show you exactly what we mean

164
00:07:22,060 --> 00:07:27,610
and all the - that we're not covered by

165
00:07:25,569 --> 00:07:31,270
CSP they could the excesses could have

166
00:07:27,610 --> 00:07:34,930
been mitigated by by a CSP we see here a

167
00:07:31,270 --> 00:07:41,849
detail of our exercises and God's

168
00:07:34,930 --> 00:07:45,759
reporting in 2018 we see here the the

169
00:07:41,849 --> 00:07:48,400
causes the root causes what the works

170
00:07:45,759 --> 00:07:49,469
have been exploited via and there are

171
00:07:48,400 --> 00:07:54,808
many

172
00:07:49,469 --> 00:07:57,179
many sinks or injection points but what

173
00:07:54,809 --> 00:08:02,129
I'd like to highlight is that JavaScript

174
00:07:57,179 --> 00:08:05,758
URI plus inline event handlers plus data

175
00:08:02,129 --> 00:08:10,319
URI make up for approximately one third

176
00:08:05,759 --> 00:08:13,559
of the injection points and so having a

177
00:08:10,319 --> 00:08:16,139
CSP that just didn't contain the unsafe

178
00:08:13,559 --> 00:08:19,849
inline keyword that actually covers

179
00:08:16,139 --> 00:08:23,759
these things as shown in this table

180
00:08:19,849 --> 00:08:26,308
would be enough to actually mitigate

181
00:08:23,759 --> 00:08:28,739
successfully for one third of the

182
00:08:26,309 --> 00:08:30,869
vulnerabilities this was also slightly

183
00:08:28,739 --> 00:08:33,899
surprising for us it's pretty pretty

184
00:08:30,869 --> 00:08:37,620
cool conformation so in this table we

185
00:08:33,899 --> 00:08:41,969
have access sinks on the left and what

186
00:08:37,620 --> 00:08:44,370
makes us be successfully block them so

187
00:08:41,969 --> 00:08:47,579
there is not really a 1:1 mapping of

188
00:08:44,370 --> 00:08:49,709
this to be completely honest but this is

189
00:08:47,579 --> 00:08:53,609
good enough to give an idea so for

190
00:08:49,709 --> 00:08:55,500
example for JavaScript your eye it's

191
00:08:53,610 --> 00:08:57,540
just not having a safe in line it's

192
00:08:55,500 --> 00:08:59,850
enough to block them the same for data

193
00:08:57,540 --> 00:09:03,779
and the same for inline event handlers

194
00:08:59,850 --> 00:09:06,959
so then we have inner HTML context that

195
00:09:03,779 --> 00:09:10,740
can be either inner or not inner HTML

196
00:09:06,959 --> 00:09:12,839
context which means either reflected XSS

197
00:09:10,740 --> 00:09:16,100
that gets reflected by a server or a

198
00:09:12,839 --> 00:09:19,529
programmatic injection in the inner HTML

199
00:09:16,100 --> 00:09:21,750
property of a Dom element and and both

200
00:09:19,529 --> 00:09:24,360
are prevented by not having unsafe

201
00:09:21,750 --> 00:09:28,339
inline in the policy then we are evil

202
00:09:24,360 --> 00:09:32,970
which is governed by the unsafe evil

203
00:09:28,339 --> 00:09:36,420
directive sorry keyword and then we have

204
00:09:32,970 --> 00:09:38,910
injections in the text of a script tag

205
00:09:36,420 --> 00:09:42,420
which also here can be both programmatic

206
00:09:38,910 --> 00:09:45,649
and reflected CSP helps if we know that

207
00:09:42,420 --> 00:09:49,620
sorry if we hash the script or if we

208
00:09:45,649 --> 00:09:52,350
nose and manually nonce it so strict

209
00:09:49,620 --> 00:09:54,899
dynamics makes adoption easier but also

210
00:09:52,350 --> 00:09:56,699
makes trust propagation and we see later

211
00:09:54,899 --> 00:09:57,769
what it means so not having strict

212
00:09:56,699 --> 00:10:00,349
dynamic and manually

213
00:09:57,769 --> 00:10:02,839
seeing is the way to protect against

214
00:10:00,350 --> 00:10:04,759
injection text to the script and it's

215
00:10:02,839 --> 00:10:07,339
very likely the same for the SRC

216
00:10:04,759 --> 00:10:09,709
attribute of the script then we have

217
00:10:07,339 --> 00:10:13,069
some kind of complex web frameworks that

218
00:10:09,709 --> 00:10:14,809
do some symbolic execution or they try

219
00:10:13,069 --> 00:10:17,679
to parse they have their own templating

220
00:10:14,809 --> 00:10:20,509
languages but would not go into that now

221
00:10:17,679 --> 00:10:23,899
and here I pass to Lucas for some more

222
00:10:20,509 --> 00:10:25,670
detail yes thank you so much Micky in

223
00:10:23,899 --> 00:10:29,179
this section we would like to introduce

224
00:10:25,670 --> 00:10:30,949
some common CSP recipes that you as

225
00:10:29,179 --> 00:10:34,670
developers or security engineers can

226
00:10:30,949 --> 00:10:37,939
reuse they basically are ordered by the

227
00:10:34,670 --> 00:10:41,179
ease of deployment and by the amount of

228
00:10:37,939 --> 00:10:42,589
syncs they're covering everything we

229
00:10:41,179 --> 00:10:45,619
talk about in this section is about an

230
00:10:42,589 --> 00:10:49,399
on space CSP and I will give a very

231
00:10:45,619 --> 00:10:51,769
quick intro and it's a kind of a mix of

232
00:10:49,399 --> 00:10:53,769
like high level stuff like just use this

233
00:10:51,769 --> 00:10:55,429
policy and you will get these guarantees

234
00:10:53,769 --> 00:10:58,369
versus like a really detailed

235
00:10:55,429 --> 00:10:59,839
explanation of like what kind of

236
00:10:58,369 --> 00:11:01,999
guarantees you will get for that right

237
00:10:59,839 --> 00:11:04,519
so that you'd not just like blindly

238
00:11:01,999 --> 00:11:06,230
trust a CSP because people say yes they

239
00:11:04,519 --> 00:11:08,480
have a CSP but what does it mean right

240
00:11:06,230 --> 00:11:09,829
they could just allow everything or they

241
00:11:08,480 --> 00:11:11,299
can also have a default source non

242
00:11:09,829 --> 00:11:14,628
policy that blocks everything right it

243
00:11:11,299 --> 00:11:17,749
really doesn't tell you anything so are

244
00:11:14,629 --> 00:11:20,389
the obligatory slide on why not the

245
00:11:17,749 --> 00:11:23,119
white list I feel like almost like a

246
00:11:20,389 --> 00:11:26,329
broken record on Twitter telling people

247
00:11:23,119 --> 00:11:29,179
to not use by at least anymore thank you

248
00:11:26,329 --> 00:11:32,209
so the thing is usually they're

249
00:11:29,179 --> 00:11:33,529
trivially by possible because as Jim

250
00:11:32,209 --> 00:11:35,809
already mentioned we did a study a

251
00:11:33,529 --> 00:11:37,369
couple years ago based on the Google

252
00:11:35,809 --> 00:11:39,889
search index we took all the CSP

253
00:11:37,369 --> 00:11:42,110
policies we found almost all of them

254
00:11:39,889 --> 00:11:45,249
were rightly spaced and as soon as you

255
00:11:42,110 --> 00:11:47,480
know a couple of JSONP end points or

256
00:11:45,249 --> 00:11:50,629
angularjs libraries hosted on popular

257
00:11:47,480 --> 00:11:52,639
dns CD ends you basically can bypass all

258
00:11:50,629 --> 00:11:54,919
of them right and even if you host if

259
00:11:52,639 --> 00:11:58,579
you only allow self as soon as you have

260
00:11:54,919 --> 00:12:01,459
like you know JSONP endpoint or your

261
00:11:58,579 --> 00:12:03,169
host some angularjs library it's also

262
00:12:01,459 --> 00:12:04,669
makes your policy completely by possible

263
00:12:03,169 --> 00:12:07,639
so basically with a whitelist you tie

264
00:12:04,669 --> 00:12:09,529
the security to the policy not being by

265
00:12:07,639 --> 00:12:10,830
possible per se rather than actually

266
00:12:09,529 --> 00:12:14,490
closing a sync

267
00:12:10,830 --> 00:12:15,870
and just a couple of talks we had in the

268
00:12:14,490 --> 00:12:17,970
past so there's links in the bottom you

269
00:12:15,870 --> 00:12:20,550
can look them up later will not cover

270
00:12:17,970 --> 00:12:23,459
this topic any into any more detail

271
00:12:20,550 --> 00:12:26,099
today what we will cover is known space

272
00:12:23,459 --> 00:12:28,109
CSP and I just wanted to ask the

273
00:12:26,100 --> 00:12:30,170
audience have you heard about known

274
00:12:28,110 --> 00:12:34,800
space CSP before is it the first time

275
00:12:30,170 --> 00:12:39,660
awesome some hands up nice so just a

276
00:12:34,800 --> 00:12:42,240
quick recap the idea is basically only

277
00:12:39,660 --> 00:12:44,910
scripts that have a random nonce

278
00:12:42,240 --> 00:12:47,399
attribute that is random pair response

279
00:12:44,910 --> 00:12:49,800
will be allowed to execute and this

280
00:12:47,399 --> 00:12:52,709
non-spell you in the script tag has to

281
00:12:49,800 --> 00:12:54,000
match the nonce value in the response

282
00:12:52,709 --> 00:12:56,369
header the content security policy

283
00:12:54,000 --> 00:13:00,269
response header only then the browser

284
00:12:56,370 --> 00:13:02,730
will execute this script tag so in that

285
00:13:00,269 --> 00:13:04,890
case if you have a markup injection and

286
00:13:02,730 --> 00:13:07,110
the attacker injects a script with

287
00:13:04,890 --> 00:13:09,329
invalid known to revert announced the

288
00:13:07,110 --> 00:13:11,310
browser will block this script from

289
00:13:09,329 --> 00:13:14,899
executing so CSP is a client-side

290
00:13:11,310 --> 00:13:17,819
defends and type strategy right so

291
00:13:14,899 --> 00:13:19,589
non-space CSP has been around since many

292
00:13:17,820 --> 00:13:22,800
years it was actually introduced in CSP

293
00:13:19,589 --> 00:13:25,110
too but it was not really picked up by

294
00:13:22,800 --> 00:13:29,099
anyone the reason is that this is very

295
00:13:25,110 --> 00:13:32,250
hard to deploy in normal applications so

296
00:13:29,100 --> 00:13:36,200
in CSP free strict dynamic code added

297
00:13:32,250 --> 00:13:38,820
it's a small modification it basically

298
00:13:36,200 --> 00:13:40,800
instructs the browser to only allow are

299
00:13:38,820 --> 00:13:44,250
to also allow scripts to execute that

300
00:13:40,800 --> 00:13:46,859
are created dynamically within an

301
00:13:44,250 --> 00:13:49,829
already trusted script so this makes a

302
00:13:46,860 --> 00:13:51,660
huge difference because the only thing

303
00:13:49,829 --> 00:13:54,120
you have to do now is actually nonce

304
00:13:51,660 --> 00:13:55,770
scripts in the response body and you

305
00:13:54,120 --> 00:13:57,390
don't have to knowns all the scripts in

306
00:13:55,770 --> 00:13:59,490
your application and that's especially

307
00:13:57,390 --> 00:14:01,199
important if you for example load

308
00:13:59,490 --> 00:14:03,060
widgets from third-party sites where you

309
00:14:01,199 --> 00:14:05,969
don't control the JavaScript right if

310
00:14:03,060 --> 00:14:08,369
they do like dynamic script creation you

311
00:14:05,970 --> 00:14:10,230
will not be able to make them pass the

312
00:14:08,370 --> 00:14:11,880
nomes or you can file a feature request

313
00:14:10,230 --> 00:14:18,720
and hope that they do it but usually

314
00:14:11,880 --> 00:14:21,260
that's a blocker otherwise so what we'll

315
00:14:18,720 --> 00:14:23,130
focus in this part is basically

316
00:14:21,260 --> 00:14:24,420
incremental rollout of content security

317
00:14:23,130 --> 00:14:27,180
policy

318
00:14:24,420 --> 00:14:29,459
GSB is often a trade-off between the

319
00:14:27,180 --> 00:14:31,189
amount of sinks xs/s sinks you're

320
00:14:29,460 --> 00:14:33,960
actually covering with your policy and

321
00:14:31,190 --> 00:14:36,360
the effort to roll out the policy which

322
00:14:33,960 --> 00:14:39,120
is mostly the refactoring work you have

323
00:14:36,360 --> 00:14:41,820
to do if you remove a sink right like if

324
00:14:39,120 --> 00:14:43,140
you remove an answer if API like ebo you

325
00:14:41,820 --> 00:14:44,730
have to make sure that the application

326
00:14:43,140 --> 00:14:46,470
is not using this sink right otherwise

327
00:14:44,730 --> 00:14:52,800
you'll break so there is a refactoring

328
00:14:46,470 --> 00:14:55,200
effort and the the the refactoring is

329
00:14:52,800 --> 00:14:56,729
mostly based on the type of CSP like how

330
00:14:55,200 --> 00:14:58,200
many sinks are closing and your

331
00:14:56,730 --> 00:14:59,790
application of course like the size of

332
00:14:58,200 --> 00:15:04,740
application the amount of inline event

333
00:14:59,790 --> 00:15:06,380
handlers to code quality etc so we came

334
00:15:04,740 --> 00:15:09,990
up with a couple of templates that

335
00:15:06,380 --> 00:15:11,640
basically we mapped on the following

336
00:15:09,990 --> 00:15:15,660
slides to the table that Mickey

337
00:15:11,640 --> 00:15:19,110
presented you before so if you start at

338
00:15:15,660 --> 00:15:21,300
the bottom you basically have a lot of

339
00:15:19,110 --> 00:15:24,330
remaining attack surface what is very

340
00:15:21,300 --> 00:15:26,819
easy to adopt if you go further up it's

341
00:15:24,330 --> 00:15:31,140
harder to adopt but you cover more sinks

342
00:15:26,820 --> 00:15:34,470
and the the goal is eventually to get up

343
00:15:31,140 --> 00:15:36,150
to a nonce only policy I guess but not

344
00:15:34,470 --> 00:15:40,350
it is not possible in every application

345
00:15:36,150 --> 00:15:43,170
right so and since it's loco moco's sec

346
00:15:40,350 --> 00:15:44,790
we also have a level 1 CSP that uses

347
00:15:43,170 --> 00:15:46,260
like brand-new CSP free features that

348
00:15:44,790 --> 00:15:50,880
haven't been presented anywhere else yet

349
00:15:46,260 --> 00:15:53,010
I think it's very interesting for some

350
00:15:50,880 --> 00:15:55,020
use cases but usually I would recommend

351
00:15:53,010 --> 00:15:57,510
to start either before level 2 level 3

352
00:15:55,020 --> 00:16:03,960
CSP and if you can move up to a nonce on

353
00:15:57,510 --> 00:16:06,750
the CSP so level 2 CSP is like arbitrary

354
00:16:03,960 --> 00:16:10,590
definition we choose for a non spaced

355
00:16:06,750 --> 00:16:13,080
CSP that has strict dynamic and also an

356
00:16:10,590 --> 00:16:17,360
safe Evo it's kind of a sweet spot

357
00:16:13,080 --> 00:16:19,950
because it's kind of easy to roll out

358
00:16:17,360 --> 00:16:22,410
because the refactoring effort is kind

359
00:16:19,950 --> 00:16:24,750
of manageable but it covers a lot of

360
00:16:22,410 --> 00:16:27,719
very common exercise things as a matter

361
00:16:24,750 --> 00:16:31,440
of fact this type of policy is set on

362
00:16:27,720 --> 00:16:33,210
60% of all the outgoing Google traffic

363
00:16:31,440 --> 00:16:34,950
on sensitive domains and that was the

364
00:16:33,210 --> 00:16:38,400
one that Nicki meant with

365
00:16:34,950 --> 00:16:40,590
which mitigated between 60 and 80

366
00:16:38,400 --> 00:16:42,000
percent of the exercise so it's a good

367
00:16:40,590 --> 00:16:46,040
starting point but if you can usually

368
00:16:42,000 --> 00:16:48,240
you know go further the nice thing is

369
00:16:46,040 --> 00:16:50,790
because it's a non speech policy it

370
00:16:48,240 --> 00:16:52,670
mitigates all the classical reflected

371
00:16:50,790 --> 00:16:56,430
and stored XSS in your application right

372
00:16:52,670 --> 00:16:58,290
and it also works if you don't control

373
00:16:56,430 --> 00:17:00,060
all the JavaScript yourself if you have

374
00:16:58,290 --> 00:17:01,680
a widget that you load from Facebook

375
00:17:00,060 --> 00:17:03,839
Twitter Google Analytics whatever and

376
00:17:01,680 --> 00:17:05,730
these widgets are trade dynamically

377
00:17:03,840 --> 00:17:08,430
create script tags they would still work

378
00:17:05,730 --> 00:17:10,910
with this type of policy and there's

379
00:17:08,430 --> 00:17:13,440
good browsers report which is also nice

380
00:17:10,910 --> 00:17:16,160
the drawbacks of this type of policies

381
00:17:13,440 --> 00:17:19,710
you still haven't covered the Ebel sink

382
00:17:16,160 --> 00:17:23,030
and since there's strict dynamic a

383
00:17:19,710 --> 00:17:29,850
portion of the dome XSS is still

384
00:17:23,030 --> 00:17:31,710
uncovered so here's a list of the sinks

385
00:17:29,850 --> 00:17:33,659
that are covered javascript your eyes

386
00:17:31,710 --> 00:17:35,940
are covered because this policy does not

387
00:17:33,660 --> 00:17:37,590
have unsafe inline it might have some

388
00:17:35,940 --> 00:17:40,170
say finland but this is just for browser

389
00:17:37,590 --> 00:17:41,879
backward compatibility every browser

390
00:17:40,170 --> 00:17:45,300
that supports nonces will drop unsafe

391
00:17:41,880 --> 00:17:47,970
inline implicitly in the presence of

392
00:17:45,300 --> 00:17:50,190
Ananse also data your eyes are covered

393
00:17:47,970 --> 00:17:52,680
because there's neurons of inline the

394
00:17:50,190 --> 00:17:54,240
HTML injection into HTML context and

395
00:17:52,680 --> 00:17:56,610
inner HTML context is also covered

396
00:17:54,240 --> 00:18:00,240
because every script tag needs to have a

397
00:17:56,610 --> 00:18:02,010
nonce to be executed evil is not covered

398
00:18:00,240 --> 00:18:04,440
because you have unsafe people in that

399
00:18:02,010 --> 00:18:07,260
policy and then there's a very

400
00:18:04,440 --> 00:18:11,730
interesting section which is injection

401
00:18:07,260 --> 00:18:13,050
into script text and script SRC so if

402
00:18:11,730 --> 00:18:15,570
you have code that does like a create

403
00:18:13,050 --> 00:18:18,300
element script dot SOC and then assign

404
00:18:15,570 --> 00:18:20,490
some user controlled input or it's

405
00:18:18,300 --> 00:18:23,399
scripted inner text assigning to user

406
00:18:20,490 --> 00:18:25,410
controlled input that's not really

407
00:18:23,400 --> 00:18:28,520
covered because strict dynamic dynamic

408
00:18:25,410 --> 00:18:30,900
propagates trust to discharge scripts

409
00:18:28,520 --> 00:18:35,430
inline scripts would be covered if you

410
00:18:30,900 --> 00:18:37,410
replace this with the hash yes and also

411
00:18:35,430 --> 00:18:39,600
angularjs like template injections are

412
00:18:37,410 --> 00:18:43,110
not covered because these happen

413
00:18:39,600 --> 00:18:45,330
entirely in JavaScript and CSP basically

414
00:18:43,110 --> 00:18:46,620
has no access to that so in this case we

415
00:18:45,330 --> 00:18:48,639
really recommend just to move away from

416
00:18:46,620 --> 00:18:51,179
angularjs because it's kind of

417
00:18:48,640 --> 00:18:54,370
and you should use like angular 2 and up

418
00:18:51,180 --> 00:18:56,530
because they have a offline template

419
00:18:54,370 --> 00:18:59,830
compilation which doesn't have these

420
00:18:56,530 --> 00:19:01,629
kind of bugs so that's very interesting

421
00:18:59,830 --> 00:19:04,030
what kind of refactorings you have to do

422
00:19:01,630 --> 00:19:07,090
to make your application compatible to

423
00:19:04,030 --> 00:19:09,160
this type of level 2 CSP first you have

424
00:19:07,090 --> 00:19:12,399
to remove in you have to remove

425
00:19:09,160 --> 00:19:14,380
javascript your eyes second you have to

426
00:19:12,400 --> 00:19:16,600
refactor inland event handlers usually

427
00:19:14,380 --> 00:19:18,730
remove them and instead use the

428
00:19:16,600 --> 00:19:21,399
JavaScript API to register event

429
00:19:18,730 --> 00:19:23,380
handlers it's usually not a lot of work

430
00:19:21,400 --> 00:19:26,530
but if you have a lot of inline event

431
00:19:23,380 --> 00:19:28,060
handlers it can sum up right and the

432
00:19:26,530 --> 00:19:29,950
other thing you have to do is you have

433
00:19:28,060 --> 00:19:32,770
to basically knowns all the script tags

434
00:19:29,950 --> 00:19:36,010
that are in the response body not the

435
00:19:32,770 --> 00:19:37,990
dynamically created ones this just works

436
00:19:36,010 --> 00:19:41,710
because of strict dynamic and that

437
00:19:37,990 --> 00:19:46,000
basically is a huge advantage in terms

438
00:19:41,710 --> 00:19:49,510
of refactoring so our one step further

439
00:19:46,000 --> 00:19:52,660
level 3 CSP is nonce based plastic

440
00:19:49,510 --> 00:19:54,970
dynamic no answer if evil exactly the

441
00:19:52,660 --> 00:19:58,300
same properties just that you basically

442
00:19:54,970 --> 00:20:02,140
now have only the Dom XSS sinks that are

443
00:19:58,300 --> 00:20:04,570
going through the script text script

444
00:20:02,140 --> 00:20:09,220
inner text of script SOC evil is covered

445
00:20:04,570 --> 00:20:11,530
by this policy so also almost the same

446
00:20:09,220 --> 00:20:13,630
refactoring steps you just in case you

447
00:20:11,530 --> 00:20:15,070
have evil you have to refactor it to

448
00:20:13,630 --> 00:20:16,360
something else like if you do it use it

449
00:20:15,070 --> 00:20:18,159
for tracing parsing you can use the

450
00:20:16,360 --> 00:20:19,840
native browser IPS chasing that parse

451
00:20:18,160 --> 00:20:23,860
if you do module loading you can like

452
00:20:19,840 --> 00:20:25,959
create a child script and there's also a

453
00:20:23,860 --> 00:20:28,510
very interesting variant of this type of

454
00:20:25,960 --> 00:20:31,870
policy which is actually hash based and

455
00:20:28,510 --> 00:20:33,670
not nonce paste this policy is extremely

456
00:20:31,870 --> 00:20:37,330
useful for static or single page

457
00:20:33,670 --> 00:20:39,070
applications which are static and you

458
00:20:37,330 --> 00:20:41,080
don't want to have a nonce on a static

459
00:20:39,070 --> 00:20:43,270
page because nonces should not be cached

460
00:20:41,080 --> 00:20:45,310
and if you have a non-static page is no

461
00:20:43,270 --> 00:20:47,350
static anymore right so what you can do

462
00:20:45,310 --> 00:20:50,700
is you can replace the nonce with the

463
00:20:47,350 --> 00:20:53,080
hash of kind of a boot loader script and

464
00:20:50,700 --> 00:20:56,230
you do the same refactoring steps as

465
00:20:53,080 --> 00:20:58,720
before but you basically move all these

466
00:20:56,230 --> 00:21:00,790
host scripts into the bootloader script

467
00:20:58,720 --> 00:21:02,650
and just like you know dynamically load

468
00:21:00,790 --> 00:21:04,240
them by that

469
00:21:02,650 --> 00:21:07,450
dynamic we'll make sure that these kind

470
00:21:04,240 --> 00:21:09,640
of things are allowed and only screw

471
00:21:07,450 --> 00:21:12,100
only that bond script will be allowed to

472
00:21:09,640 --> 00:21:14,740
execute in the initial markup because

473
00:21:12,100 --> 00:21:16,449
that is the hashed one and if you know

474
00:21:14,740 --> 00:21:18,220
this is P evaluator it actually uses

475
00:21:16,450 --> 00:21:21,730
this kind of policy because it's also a

476
00:21:18,220 --> 00:21:26,040
static site you can check out the page

477
00:21:21,730 --> 00:21:29,320
code and look at it as an example and

478
00:21:26,040 --> 00:21:32,080
then there is kind of the holy grail for

479
00:21:29,320 --> 00:21:35,399
non spaced CSP which is a nonce only

480
00:21:32,080 --> 00:21:38,379
policy why because it actually covers

481
00:21:35,400 --> 00:21:41,770
the vast majority of XSS sinks that are

482
00:21:38,380 --> 00:21:46,510
tractable for CSP it's supported by all

483
00:21:41,770 --> 00:21:48,700
major browsers even Safari and it's very

484
00:21:46,510 --> 00:21:50,830
nice property has a very nice properties

485
00:21:48,700 --> 00:21:52,990
because it basically means every script

486
00:21:50,830 --> 00:21:55,050
is running was explicitly mark as

487
00:21:52,990 --> 00:21:59,530
trusted by a developer if announced

488
00:21:55,050 --> 00:22:00,700
value right so on the other hand the

489
00:21:59,530 --> 00:22:03,399
drawback is that you now have to

490
00:22:00,700 --> 00:22:04,990
renounce all the scripts which means you

491
00:22:03,400 --> 00:22:07,150
need to have some knowns propagation

492
00:22:04,990 --> 00:22:10,570
mechanisms to dynamically created

493
00:22:07,150 --> 00:22:14,410
scripts right so what you now have to do

494
00:22:10,570 --> 00:22:16,240
is three head one slide I'll show you

495
00:22:14,410 --> 00:22:19,150
that in a second what you now have to do

496
00:22:16,240 --> 00:22:21,340
is you also have to do like a set

497
00:22:19,150 --> 00:22:24,610
attribute notes on dynamically created

498
00:22:21,340 --> 00:22:26,530
scripts looks easy might be easy in your

499
00:22:24,610 --> 00:22:29,678
application but if you use a lot of

500
00:22:26,530 --> 00:22:31,990
external widgets or you do like very

501
00:22:29,679 --> 00:22:34,059
complex stuff this can become a lot of

502
00:22:31,990 --> 00:22:37,600
work and maybe even impossible if you

503
00:22:34,059 --> 00:22:40,210
don't control all the JavaScript code in

504
00:22:37,600 --> 00:22:44,439
terms of the covered XSS sinks this

505
00:22:40,210 --> 00:22:47,080
policy performs really well the only

506
00:22:44,440 --> 00:22:49,690
injections that are left are like you

507
00:22:47,080 --> 00:22:52,090
know if you if the developer marks

508
00:22:49,690 --> 00:22:54,400
something is trusted with the nonce and

509
00:22:52,090 --> 00:22:56,649
then they steal put like a user input

510
00:22:54,400 --> 00:22:59,470
into a script tag and the script SOC

511
00:22:56,650 --> 00:23:01,210
then that's still exploitable right but

512
00:22:59,470 --> 00:23:05,230
there's no automatic propagation of

513
00:23:01,210 --> 00:23:07,600
nonsense in this model and also very

514
00:23:05,230 --> 00:23:09,550
important to note here you must not add

515
00:23:07,600 --> 00:23:12,129
a whitelist here now right because then

516
00:23:09,550 --> 00:23:13,990
it's an orphan either announced or a

517
00:23:12,130 --> 00:23:16,470
whitelist that would make the policy by

518
00:23:13,990 --> 00:23:16,470
possible

519
00:23:16,500 --> 00:23:24,010
yes so here's the nice overview about

520
00:23:20,260 --> 00:23:26,440
all these properties and there's also a

521
00:23:24,010 --> 00:23:28,840
column for trusted types which is a talk

522
00:23:26,440 --> 00:23:30,700
held by Quattro in the afternoon

523
00:23:28,840 --> 00:23:33,850
Christopher khottabych and it's really

524
00:23:30,700 --> 00:23:37,020
awesome because it is very well

525
00:23:33,850 --> 00:23:40,199
performing on all the Dom XSS parts and

526
00:23:37,020 --> 00:23:45,430
it complements CSP perfectly right

527
00:23:40,200 --> 00:23:48,610
trusted types is a GS based hardening

528
00:23:45,430 --> 00:23:51,610
and it's doesn't apply for stored or

529
00:23:48,610 --> 00:23:53,860
reflected XSS server site for that you

530
00:23:51,610 --> 00:23:55,270
would need to have csps mitigation but

531
00:23:53,860 --> 00:23:57,189
for the client-side code it's it's

532
00:23:55,270 --> 00:24:01,690
really awesome so really recommend going

533
00:23:57,190 --> 00:24:02,980
to that talk as well yeah see you

534
00:24:01,690 --> 00:24:04,840
speaker rich at Google we already

535
00:24:02,980 --> 00:24:07,150
mentioned that to some extent the only

536
00:24:04,840 --> 00:24:10,060
thing I want to highlight here is we

537
00:24:07,150 --> 00:24:13,480
basically all our or services that are

538
00:24:10,060 --> 00:24:16,149
cava PI CSP started with a level 2 CSP

539
00:24:13,480 --> 00:24:19,270
and then last summer we started to

540
00:24:16,150 --> 00:24:22,480
slowly upgrading to level 4 CS peace

541
00:24:19,270 --> 00:24:25,600
with Evo and just this year we also

542
00:24:22,480 --> 00:24:28,930
started to upgrade the policies to

543
00:24:25,600 --> 00:24:30,610
remove evils so almost 10% of the

544
00:24:28,930 --> 00:24:33,700
outgoing traffic has a level 4 policy

545
00:24:30,610 --> 00:24:37,439
now for Google and we mostly do this for

546
00:24:33,700 --> 00:24:40,990
super sensitive services but even the

547
00:24:37,440 --> 00:24:42,760
even the just level 2 CSP was quite

548
00:24:40,990 --> 00:24:45,700
effective in mitigating quite a lot of

549
00:24:42,760 --> 00:24:46,629
power excesses externally reported XSS

550
00:24:45,700 --> 00:24:49,690
attacks for google

551
00:24:46,630 --> 00:24:51,730
or here's an example of like a very

552
00:24:49,690 --> 00:24:52,270
short example of domains that already

553
00:24:51,730 --> 00:24:55,060
have it

554
00:24:52,270 --> 00:24:56,590
for example photostat google.com has a

555
00:24:55,060 --> 00:24:58,929
level for CSP it's a very complicated

556
00:24:56,590 --> 00:25:00,429
application it's totally doable it just

557
00:24:58,930 --> 00:25:03,820
takes a bit of time and dedication and

558
00:25:00,430 --> 00:25:05,440
just be prioritized by domain tiers so

559
00:25:03,820 --> 00:25:09,220
very sensitive domains got the most

560
00:25:05,440 --> 00:25:12,550
attention and they almost are almost

561
00:25:09,220 --> 00:25:16,180
hundred percent like 96 percent covered

562
00:25:12,550 --> 00:25:20,710
by two CSP and level 4 CSP is there on

563
00:25:16,180 --> 00:25:24,850
already four percent so with that we

564
00:25:20,710 --> 00:25:27,160
move to advanced ESP techniques some of

565
00:25:24,850 --> 00:25:28,530
that is really advanced but it's also

566
00:25:27,160 --> 00:25:30,930
quite Noble and

567
00:25:28,530 --> 00:25:33,470
I before like loco moco SEC is probably

568
00:25:30,930 --> 00:25:36,900
the audience to present that right so

569
00:25:33,470 --> 00:25:39,030
new in CSP free there is two new

570
00:25:36,900 --> 00:25:42,930
directives which is stripped sauce

571
00:25:39,030 --> 00:25:44,280
element and script source attribute same

572
00:25:42,930 --> 00:25:46,890
thing for stealth but we'll talk about

573
00:25:44,280 --> 00:25:49,700
that later the difference is it's like

574
00:25:46,890 --> 00:25:52,590
script source but these two basically

575
00:25:49,700 --> 00:25:53,970
cover different parts of the water

576
00:25:52,590 --> 00:25:57,240
script source directive would cover

577
00:25:53,970 --> 00:25:59,910
script ROS element just covers script

578
00:25:57,240 --> 00:26:02,570
tags right inline scripts and source

579
00:25:59,910 --> 00:26:06,000
scripts and script source attribute

580
00:26:02,570 --> 00:26:09,960
covers all the script execution that

581
00:26:06,000 --> 00:26:11,970
happens through attributes in HTML tags

582
00:26:09,960 --> 00:26:15,890
right like inline event handlers or

583
00:26:11,970 --> 00:26:20,870
JavaScript UI so why is this useful

584
00:26:15,890 --> 00:26:25,350
because through this thing you now can

585
00:26:20,870 --> 00:26:27,419
use hashes of attributes like hashed

586
00:26:25,350 --> 00:26:30,840
inline event handlers or hash JavaScript

587
00:26:27,420 --> 00:26:32,940
your eyes and explicitly player bless a

588
00:26:30,840 --> 00:26:34,740
couple of inline event handlers so if

589
00:26:32,940 --> 00:26:36,210
you have a site very for some reason

590
00:26:34,740 --> 00:26:38,910
cannot refer to some inline event

591
00:26:36,210 --> 00:26:40,710
handlers with this type of policy would

592
00:26:38,910 --> 00:26:43,980
still be able to rule out CSP without

593
00:26:40,710 --> 00:26:47,040
breaking your site it's not a finger I

594
00:26:43,980 --> 00:26:49,380
would shoot for a first but it's

595
00:26:47,040 --> 00:26:52,200
definitely an interesting development

596
00:26:49,380 --> 00:26:54,810
it's as I said it's brand new and it's

597
00:26:52,200 --> 00:26:57,390
only supported in chrome 75 that's also

598
00:26:54,810 --> 00:26:58,860
limitation other browser browsers will

599
00:26:57,390 --> 00:27:02,040
probably follow but it will take a bit

600
00:26:58,860 --> 00:27:04,530
of time the big benefit of that policy

601
00:27:02,040 --> 00:27:07,740
is that just like almost no refactoring

602
00:27:04,530 --> 00:27:09,389
required and of course having this

603
00:27:07,740 --> 00:27:12,060
policy is strictly better than having no

604
00:27:09,390 --> 00:27:15,870
CSP right because the classical

605
00:27:12,060 --> 00:27:18,899
reflected XSS server-side XSS are still

606
00:27:15,870 --> 00:27:21,989
covered by this policy drawback is of

607
00:27:18,900 --> 00:27:24,780
course that this policy covers not all

608
00:27:21,990 --> 00:27:27,210
the things that good non-space TSP could

609
00:27:24,780 --> 00:27:28,980
cover right and in case of an HTML

610
00:27:27,210 --> 00:27:32,130
injection there's also a culprit here

611
00:27:28,980 --> 00:27:35,280
because if you hash inline event

612
00:27:32,130 --> 00:27:37,380
handlers in an injection you could read

613
00:27:35,280 --> 00:27:39,060
an attacker could reuse distant handlers

614
00:27:37,380 --> 00:27:40,260
as long as they are hashed so if you

615
00:27:39,060 --> 00:27:42,510
have an inline event handler does this

616
00:27:40,260 --> 00:27:44,340
like delete user

617
00:27:42,510 --> 00:27:48,240
and then there's a mark of injection and

618
00:27:44,340 --> 00:27:50,939
someone injects like image tag X or sex

619
00:27:48,240 --> 00:27:53,519
on air or delete user that would Erik's

620
00:27:50,940 --> 00:27:56,429
execute right if you just write list

621
00:27:53,519 --> 00:28:00,179
return Falls or JavaScript wait zero

622
00:27:56,429 --> 00:28:03,090
that is not really relevant but this is

623
00:28:00,179 --> 00:28:04,409
very important to mention here and yeah

624
00:28:03,090 --> 00:28:07,408
the attacker doesn't have full script

625
00:28:04,409 --> 00:28:09,870
execution in that case but it's still a

626
00:28:07,409 --> 00:28:12,090
thing right I can't go to detail because

627
00:28:09,870 --> 00:28:13,620
of time reasons but here's a small POC

628
00:28:12,090 --> 00:28:16,830
that you can try out yourself if you

629
00:28:13,620 --> 00:28:20,820
want to learn more about it the covered

630
00:28:16,830 --> 00:28:23,879
sinks are similar to the level 2 CSP but

631
00:28:20,820 --> 00:28:25,470
now here the inland event handlers also

632
00:28:23,880 --> 00:28:29,789
have like until they're because

633
00:28:25,470 --> 00:28:31,620
depending on what you have you have a

634
00:28:29,789 --> 00:28:33,990
different security guarantees the nice

635
00:28:31,620 --> 00:28:36,719
thing about this policy although is that

636
00:28:33,990 --> 00:28:39,330
you can actually use this for static

637
00:28:36,720 --> 00:28:40,740
content and auto generate a policy so if

638
00:28:39,330 --> 00:28:42,539
you have static content you could have a

639
00:28:40,740 --> 00:28:45,480
proxy that hashes in an event handlers

640
00:28:42,539 --> 00:28:46,860
and puts nonces and to generate the CSP

641
00:28:45,480 --> 00:28:50,460
for that on the fly that's the first

642
00:28:46,860 --> 00:28:51,840
time that this is possible but it should

643
00:28:50,460 --> 00:28:53,580
be static content right and not

644
00:28:51,840 --> 00:28:57,809
something that has templates or user

645
00:28:53,580 --> 00:29:00,658
control input or whatever refactoring is

646
00:28:57,809 --> 00:29:03,178
really easy it's just basically adding

647
00:29:00,659 --> 00:29:08,880
ancestor scripts in the response body

648
00:29:03,179 --> 00:29:12,500
and hashing these things so yes that's a

649
00:29:08,880 --> 00:29:15,600
new thing in CSP free and there is also

650
00:29:12,500 --> 00:29:19,200
something else that is pretty useful

651
00:29:15,600 --> 00:29:22,230
sometimes which is double policies or

652
00:29:19,200 --> 00:29:23,850
multiple CSP policies I don't know if

653
00:29:22,230 --> 00:29:26,039
you're aware of it but you can actually

654
00:29:23,850 --> 00:29:28,969
send more than one CSP header in a

655
00:29:26,039 --> 00:29:32,010
single response why would you do this

656
00:29:28,970 --> 00:29:34,169
because it basically allows you to

657
00:29:32,010 --> 00:29:37,110
really add even more constraints to what

658
00:29:34,169 --> 00:29:39,809
the policy allows usually if you have

659
00:29:37,110 --> 00:29:42,449
only one one script source directive and

660
00:29:39,809 --> 00:29:45,029
you put nonce random and self in the

661
00:29:42,450 --> 00:29:47,700
same directive it's an or operation

662
00:29:45,029 --> 00:29:50,789
write a script will execute if any of

663
00:29:47,700 --> 00:29:54,570
these requirements are fulfilled if you

664
00:29:50,789 --> 00:29:55,980
set these as two separate policies they

665
00:29:54,570 --> 00:29:58,260
will be enforced in depend

666
00:29:55,980 --> 00:30:02,220
by the browser and their script in order

667
00:29:58,260 --> 00:30:03,660
to execute has to pass both policies and

668
00:30:02,220 --> 00:30:06,120
you can either set double or multiple

669
00:30:03,660 --> 00:30:08,070
policies by having separate headers

670
00:30:06,120 --> 00:30:09,600
separate content security policy headers

671
00:30:08,070 --> 00:30:11,460
or you have a single content security

672
00:30:09,600 --> 00:30:13,020
policy header and separate them with a

673
00:30:11,460 --> 00:30:15,450
comma

674
00:30:13,020 --> 00:30:17,460
this looks basically like that

675
00:30:15,450 --> 00:30:19,440
if you come a separate them it's very

676
00:30:17,460 --> 00:30:24,419
important to not confuse that with the

677
00:30:19,440 --> 00:30:26,940
semicolon right but this is a HTTP HTTP

678
00:30:24,419 --> 00:30:29,730
header specification multi-value headers

679
00:30:26,940 --> 00:30:32,370
are separated by commas so what does

680
00:30:29,730 --> 00:30:34,700
this fing do is to CSP s1 is a whitelist

681
00:30:32,370 --> 00:30:38,010
and the other one is a non space CSP and

682
00:30:34,700 --> 00:30:40,620
the script will only execute if it

683
00:30:38,010 --> 00:30:42,450
fulfills both properties or if it

684
00:30:40,620 --> 00:30:44,549
fulfills the properties of both policies

685
00:30:42,450 --> 00:30:47,490
in that case this script executes

686
00:30:44,549 --> 00:30:50,040
because it has two random notes and in

687
00:30:47,490 --> 00:30:52,530
that case and it also executes because

688
00:30:50,040 --> 00:30:54,899
the script is sourced from the same

689
00:30:52,530 --> 00:30:56,610
domain in the second and the third

690
00:30:54,900 --> 00:30:58,080
example the script does not execute

691
00:30:56,610 --> 00:31:01,639
because here's me the nonce is missing

692
00:30:58,080 --> 00:31:05,189
and here it's not the same domain source

693
00:31:01,640 --> 00:31:07,620
so if he would basically merge these

694
00:31:05,190 --> 00:31:09,809
into here into single policy all of

695
00:31:07,620 --> 00:31:11,250
these would execute right so this is

696
00:31:09,809 --> 00:31:14,610
really the nice thing about this type of

697
00:31:11,250 --> 00:31:17,820
policy and we use this in a couple of

698
00:31:14,610 --> 00:31:20,729
places at Google it has the nice feature

699
00:31:17,820 --> 00:31:22,980
that actually also non scripts that get

700
00:31:20,730 --> 00:31:26,400
redirected would be covered by this

701
00:31:22,980 --> 00:31:30,240
policy and also injection into script

702
00:31:26,400 --> 00:31:32,520
SOC are much more limited to what they

703
00:31:30,240 --> 00:31:34,650
can do the drawback is of course now you

704
00:31:32,520 --> 00:31:36,030
have to have an own space policy and you

705
00:31:34,650 --> 00:31:39,000
need to maintain a whitelist right which

706
00:31:36,030 --> 00:31:40,860
is actually quite complex so not the

707
00:31:39,000 --> 00:31:42,720
first thing I would shoot for but for

708
00:31:40,860 --> 00:31:43,979
high sensitivity applications definitely

709
00:31:42,720 --> 00:31:46,260
worth looking into

710
00:31:43,980 --> 00:31:52,559
and it also reflects here right it's

711
00:31:46,260 --> 00:31:56,400
it's actually pretty strong and yes so

712
00:31:52,559 --> 00:32:00,690
almost done with guru section last bit

713
00:31:56,400 --> 00:32:01,950
is what about style injections like if

714
00:32:00,690 --> 00:32:03,450
you have a markup injection you don't

715
00:32:01,950 --> 00:32:05,330
only can inject script tags of course

716
00:32:03,450 --> 00:32:08,580
right you can also inject style tags and

717
00:32:05,330 --> 00:32:09,659
because of CSS free just some pre

718
00:32:08,580 --> 00:32:13,139
advanced attacks you

719
00:32:09,660 --> 00:32:16,290
carry out we are using a CSS selectors

720
00:32:13,140 --> 00:32:19,290
or import statements the very important

721
00:32:16,290 --> 00:32:22,110
thing to mention here is that these only

722
00:32:19,290 --> 00:32:25,290
work in style blocks or source styles

723
00:32:22,110 --> 00:32:27,959
and they don't work in inline Styles so

724
00:32:25,290 --> 00:32:31,050
what you can do is you can use style

725
00:32:27,960 --> 00:32:32,850
source nonce and the random token to

726
00:32:31,050 --> 00:32:35,820
basically enforce an ounce on all the

727
00:32:32,850 --> 00:32:38,189
style tags that is the preferred

728
00:32:35,820 --> 00:32:41,850
solution of course but since inline

729
00:32:38,190 --> 00:32:44,910
styles are so frequently used it's a

730
00:32:41,850 --> 00:32:47,909
refactoring nightmare right so you can

731
00:32:44,910 --> 00:32:50,280
use the the nooses be free directive for

732
00:32:47,910 --> 00:32:52,470
styles and basically enforce the nonce

733
00:32:50,280 --> 00:32:54,899
is just for the style blocks while

734
00:32:52,470 --> 00:32:59,850
allowing arbitrary inland inline Styles

735
00:32:54,900 --> 00:33:03,900
right this is a mitigation strategy

736
00:32:59,850 --> 00:33:06,240
right but you definitely block the more

737
00:33:03,900 --> 00:33:09,390
powerful CSS selectors and import

738
00:33:06,240 --> 00:33:11,310
statements and of course this policy can

739
00:33:09,390 --> 00:33:14,340
be or this policy can be combined with

740
00:33:11,310 --> 00:33:16,020
script source policies and with that I

741
00:33:14,340 --> 00:33:17,820
will head over and over to McKee for the

742
00:33:16,020 --> 00:33:20,120
production izing CSP part and you're

743
00:33:17,820 --> 00:33:24,270
almost done

744
00:33:20,120 --> 00:33:27,750
so now we talked about what you actually

745
00:33:24,270 --> 00:33:29,790
deploy CSP in your website you'd like to

746
00:33:27,750 --> 00:33:32,310
see what's going on so what is being

747
00:33:29,790 --> 00:33:34,620
blocked and if there are more

748
00:33:32,310 --> 00:33:36,570
refactoring steps needed or if there are

749
00:33:34,620 --> 00:33:39,989
some even some attacks and you want to

750
00:33:36,570 --> 00:33:42,330
be aware of them so normally you can put

751
00:33:39,990 --> 00:33:44,580
a report your I and a so called CSP

752
00:33:42,330 --> 00:33:47,580
violation report is sent by the browser

753
00:33:44,580 --> 00:33:49,169
every time a resource is blocked to your

754
00:33:47,580 --> 00:33:50,429
collection endpoints and then you can

755
00:33:49,170 --> 00:33:53,460
you know store them in a database and

756
00:33:50,430 --> 00:33:55,680
then look at them it is very helpful in

757
00:33:53,460 --> 00:33:58,800
this case to add the report sample

758
00:33:55,680 --> 00:34:02,010
keyword this makes instructs the browser

759
00:33:58,800 --> 00:34:04,470
to add a sample of the blocked

760
00:34:02,010 --> 00:34:07,200
JavaScript actually the first 40 bytes

761
00:34:04,470 --> 00:34:08,730
in the script sample property and this

762
00:34:07,200 --> 00:34:09,870
is really really cool because you can

763
00:34:08,730 --> 00:34:13,020
actually

764
00:34:09,870 --> 00:34:14,210
distinguish between actual things that

765
00:34:13,020 --> 00:34:17,190
need to be refactored

766
00:34:14,210 --> 00:34:20,190
from for example extension noise which

767
00:34:17,190 --> 00:34:22,380
are false positives here I want to be

768
00:34:20,190 --> 00:34:26,970
really really quick about ESP fallbacks

769
00:34:22,380 --> 00:34:29,400
so city has been designed in like across

770
00:34:26,969 --> 00:34:31,529
many years and the browser's support of

771
00:34:29,400 --> 00:34:33,870
CSP is a little fragmented so it's

772
00:34:31,530 --> 00:34:36,780
important to have backward compatible

773
00:34:33,870 --> 00:34:39,239
CSP policies it actually falls open on

774
00:34:36,780 --> 00:34:42,120
older browsers so you can take a look at

775
00:34:39,239 --> 00:34:45,330
that later but very simply I'll just say

776
00:34:42,120 --> 00:34:47,850
two rules and say if in line is ignored

777
00:34:45,330 --> 00:34:50,790
in presence of the norms or a hash and

778
00:34:47,850 --> 00:34:53,279
any Wyclef's is ignored in presence of

779
00:34:50,790 --> 00:34:56,969
string dynamic everything else is more

780
00:34:53,280 --> 00:34:59,520
advanced so for example the street

781
00:34:56,969 --> 00:35:01,830
dynamic policy that we presented earlier

782
00:34:59,520 --> 00:35:03,810
with nonsense strict dynamic which

783
00:35:01,830 --> 00:35:07,200
should be just knows and strict dynamic

784
00:35:03,810 --> 00:35:10,380
463 compatible browsers like modern

785
00:35:07,200 --> 00:35:13,169
chrome chromium firefox opera and so on

786
00:35:10,380 --> 00:35:15,630
actually sometimes is presented with

787
00:35:13,170 --> 00:35:17,910
HTTPS which is a broad whitelist

788
00:35:15,630 --> 00:35:20,280
and unsafe teen-line so why this is very

789
00:35:17,910 --> 00:35:22,230
confusing right but this makes it so

790
00:35:20,280 --> 00:35:25,260
that the same policy actually works you

791
00:35:22,230 --> 00:35:28,320
know across all browsers so browsers

792
00:35:25,260 --> 00:35:33,390
that do not understand strict dynamic

793
00:35:28,320 --> 00:35:36,030
actually see HTTPS because trick dynamic

794
00:35:33,390 --> 00:35:38,190
makes the white waste disappear and

795
00:35:36,030 --> 00:35:40,440
browsers they do not understand anything

796
00:35:38,190 --> 00:35:41,970
just have a fail open policy which is

797
00:35:40,440 --> 00:35:44,040
unsafe inline of course it doesn't

798
00:35:41,970 --> 00:35:46,759
provide any security guarantee but it

799
00:35:44,040 --> 00:35:50,970
does not break your site sorry about it

800
00:35:46,760 --> 00:35:53,490
so this is very overwhelming right so

801
00:35:50,970 --> 00:35:56,220
CSP is is a mess right it's it is it is

802
00:35:53,490 --> 00:36:01,020
a mess for us too and we worked on it

803
00:35:56,220 --> 00:36:02,490
for more than three years it it has a

804
00:36:01,020 --> 00:36:05,130
lot of complexity like so many

805
00:36:02,490 --> 00:36:07,890
directives so many cultures like there

806
00:36:05,130 --> 00:36:10,290
is this and there is that this makes

807
00:36:07,890 --> 00:36:11,220
this no longer work and I saw you

808
00:36:10,290 --> 00:36:14,940
enjoyed the comma

809
00:36:11,220 --> 00:36:17,009
a lot it's really really hard but what

810
00:36:14,940 --> 00:36:19,650
I'd like to make very clear is that you

811
00:36:17,010 --> 00:36:20,170
don't need to know all of this you don't

812
00:36:19,650 --> 00:36:22,089
need to

813
00:36:20,170 --> 00:36:24,010
through all the levels and variants of

814
00:36:22,089 --> 00:36:25,839
CSP that we presented but to have a

815
00:36:24,010 --> 00:36:29,290
reasonable amount of security for your

816
00:36:25,839 --> 00:36:31,119
web application you can actually you can

817
00:36:29,290 --> 00:36:33,400
actually get it pretty simply and what

818
00:36:31,119 --> 00:36:40,990
we suggest is to start with strict

819
00:36:33,400 --> 00:36:43,960
dynamic policy and level 2 policy is a

820
00:36:40,990 --> 00:36:47,589
good trade-off between security and ease

821
00:36:43,960 --> 00:36:50,319
of adoption if possible upgrade to

822
00:36:47,589 --> 00:36:53,200
non-zombie this makes it even better but

823
00:36:50,319 --> 00:36:55,569
actually as we said already 60 to 80

824
00:36:53,200 --> 00:36:58,689
percent of exercises at Google in 2018

825
00:36:55,569 --> 00:37:02,859
were already blocked by a strict dynamic

826
00:36:58,690 --> 00:37:05,260
based XSS and the usual reminders is P

827
00:37:02,859 --> 00:37:06,819
is a defense-in-depth mechanism so you

828
00:37:05,260 --> 00:37:10,569
should fix the box you should not just

829
00:37:06,819 --> 00:37:13,240
put as well yes we say that every time

830
00:37:10,569 --> 00:37:15,279
you did not just slap a policy on it

831
00:37:13,240 --> 00:37:18,220
right it's very important it's very

832
00:37:15,280 --> 00:37:20,770
important it's not an excuse not to fix

833
00:37:18,220 --> 00:37:22,660
the underlying box right and please take

834
00:37:20,770 --> 00:37:24,700
also verify your policy with a CSP

835
00:37:22,660 --> 00:37:28,149
evaluator - which focuses on XSS

836
00:37:24,700 --> 00:37:30,819
protection so very briefly wrapping up

837
00:37:28,150 --> 00:37:32,140
please use announced bathe CSP policies

838
00:37:30,819 --> 00:37:35,740
with strict dynamic if you care about

839
00:37:32,140 --> 00:37:39,069
excess protections sorry that was level

840
00:37:35,740 --> 00:37:43,419
3 it was not level 2 you can read out a

841
00:37:39,069 --> 00:37:45,430
C and say V both depends and possible

842
00:37:43,420 --> 00:37:47,980
upgrade to namsan resource which is our

843
00:37:45,430 --> 00:37:52,058
level 4 also maybe add the fallbacks

844
00:37:47,980 --> 00:37:53,859
which makes it harder to read and Mahalo

845
00:37:52,059 --> 00:37:55,660
thank you very much thank you so much

846
00:37:53,859 --> 00:38:02,670
everyone if you have any questions

847
00:37:55,660 --> 00:38:05,348
[Applause]

848
00:38:02,670 --> 00:38:07,390
so can you describe the amount of time

849
00:38:05,349 --> 00:38:09,249
energy and process that vent into

850
00:38:07,390 --> 00:38:11,828
refactoring the Charro's script code at

851
00:38:09,249 --> 00:38:16,089
Google in order to broadly a dog proudly

852
00:38:11,829 --> 00:38:17,229
supports ESP well yes it took a long

853
00:38:16,089 --> 00:38:19,930
time

854
00:38:17,229 --> 00:38:24,098
can we have two questions also on the

855
00:38:19,930 --> 00:38:27,999
screen maybe I'll get numbers so it

856
00:38:24,099 --> 00:38:30,819
depends so for the strict dynamic paste

857
00:38:27,999 --> 00:38:33,308
content security policy the refactoring

858
00:38:30,819 --> 00:38:36,160
was mostly focused on removing inline

859
00:38:33,309 --> 00:38:39,309
event handlers and less so on

860
00:38:36,160 --> 00:38:41,680
refactoring JavaScript for upgrading to

861
00:38:39,309 --> 00:38:44,829
announced only policy it almost took us

862
00:38:41,680 --> 00:38:47,558
like I think 12 or 18 months to

863
00:38:44,829 --> 00:38:51,880
basically refactor all the libraries at

864
00:38:47,559 --> 00:38:54,279
Google to do nonce passing and basically

865
00:38:51,880 --> 00:38:56,289
teach the frameworks to do it right now

866
00:38:54,279 --> 00:38:59,440
we were to spot where we basically just

867
00:38:56,289 --> 00:39:03,849
have a framework that has announced only

868
00:38:59,440 --> 00:39:06,339
policy and does Auto noticing on the

869
00:39:03,849 --> 00:39:08,589
context-sensitive templating system and

870
00:39:06,339 --> 00:39:11,759
the module loaders they propagate

871
00:39:08,589 --> 00:39:14,440
announces they use safe types internally

872
00:39:11,759 --> 00:39:15,969
and basically when you create a new

873
00:39:14,440 --> 00:39:17,469
application on that framework the

874
00:39:15,969 --> 00:39:20,109
developer doesn't even need to know that

875
00:39:17,469 --> 00:39:22,209
there is a CSP right it just works out

876
00:39:20,109 --> 00:39:25,089
of the box but it was quite some journey

877
00:39:22,209 --> 00:39:27,430
there but I think it was worth the

878
00:39:25,089 --> 00:39:30,690
effort and with the CSP coverage going

879
00:39:27,430 --> 00:39:33,160
up they also saw box being mitigated so

880
00:39:30,690 --> 00:39:35,859
cool so the other question is have you

881
00:39:33,160 --> 00:39:38,920
had any successful XSS attempt against

882
00:39:35,859 --> 00:39:40,449
an elf or policy so absolutely yes the

883
00:39:38,920 --> 00:39:44,259
elf for policies announced only policy

884
00:39:40,449 --> 00:39:47,619
right without anything else yes we do

885
00:39:44,259 --> 00:39:50,079
of course so I would say there are maybe

886
00:39:47,619 --> 00:39:53,769
two main kinds like one is when you have

887
00:39:50,079 --> 00:39:55,239
an injection in the script SRC so in the

888
00:39:53,769 --> 00:39:57,459
source attribute of a script that is

889
00:39:55,239 --> 00:40:01,059
actually announced our blindly announced

890
00:39:57,459 --> 00:40:04,549
and another is when actually you can

891
00:40:01,059 --> 00:40:08,290
upload user content on the same origin

892
00:40:04,550 --> 00:40:12,740
and so for example if you can upload

893
00:40:08,290 --> 00:40:16,580
like some JavaScript or SVG or some HTML

894
00:40:12,740 --> 00:40:18,979
and you can actually embed this this

895
00:40:16,580 --> 00:40:21,470
might be a problem or of course you can

896
00:40:18,980 --> 00:40:23,990
instruct the victim to go there directly

897
00:40:21,470 --> 00:40:26,450
so but this is a little bit out of scope

898
00:40:23,990 --> 00:40:28,129
because it's actually a coverage problem

899
00:40:26,450 --> 00:40:30,980
it becomes obvious coverage problems and

900
00:40:28,130 --> 00:40:32,840
the blindly sourcing is yes so their

901
00:40:30,980 --> 00:40:34,430
user upload is actually mostly a problem

902
00:40:32,840 --> 00:40:36,140
for non chrome because chrome if you

903
00:40:34,430 --> 00:40:44,029
have an ensemble policy also blocks the

904
00:40:36,140 --> 00:40:46,819
PDF since this kind of stuff but yes so

905
00:40:44,030 --> 00:40:49,820
this is really really complex right it's

906
00:40:46,820 --> 00:40:51,860
very hard to say we can cover 100% and

907
00:40:49,820 --> 00:40:53,750
it's also not the aim of a mitigation

908
00:40:51,860 --> 00:40:55,850
technique right but we can cover a lot

909
00:40:53,750 --> 00:40:57,530
and we can cover a lot in a in a pretty

910
00:40:55,850 --> 00:40:59,420
fair effective way so I think the teal

911
00:40:57,530 --> 00:41:01,430
they are for level 4 policies if the

912
00:40:59,420 --> 00:41:03,230
developer notes as a script and still

913
00:41:01,430 --> 00:41:06,109
put something untrusted user

914
00:41:03,230 --> 00:41:15,740
controllable input into SRC it's it's

915
00:41:06,110 --> 00:41:18,200
still by possible right way possible yes

916
00:41:15,740 --> 00:41:19,970
it appears that non-space policies work

917
00:41:18,200 --> 00:41:20,480
for execution of web azzam is that

918
00:41:19,970 --> 00:41:25,609
correct

919
00:41:20,480 --> 00:41:27,859
if so I am now very happy I think for

920
00:41:25,609 --> 00:41:31,369
web Azzam you have to have unsafe evil

921
00:41:27,859 --> 00:41:33,369
to allow it to execute I think they were

922
00:41:31,369 --> 00:41:37,040
discussing about an ANSI of Azzam

923
00:41:33,369 --> 00:41:39,950
directive but I think it's not part of

924
00:41:37,040 --> 00:41:43,190
the specification yet more directors so

925
00:41:39,950 --> 00:41:45,939
yes so it is possible but you have to

926
00:41:43,190 --> 00:41:45,940
put unsafe evil

927
00:41:47,800 --> 00:41:52,150
do your back counter researchers still

928
00:41:49,900 --> 00:41:54,610
report XSS parks even if they can't

929
00:41:52,150 --> 00:41:55,630
bypass you speak yes they do and yes

930
00:41:54,610 --> 00:41:57,940
they should because they're still

931
00:41:55,630 --> 00:41:59,410
getting paid and if they also bypass

932
00:41:57,940 --> 00:42:03,630
disease be I think they get paid extra

933
00:41:59,410 --> 00:42:03,629
so please don't stop reporting bugs

