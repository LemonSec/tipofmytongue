1
00:00:00,410 --> 00:00:08,610
all right I hope to you know live up to

2
00:00:03,629 --> 00:00:10,769
the promise here so I'm Chris and this

3
00:00:08,610 --> 00:00:15,870
is a talk about trusted types let's

4
00:00:10,769 --> 00:00:18,300
let's start imagine what if we could fix

5
00:00:15,870 --> 00:00:20,520
the root cause of Dom XSS like

6
00:00:18,300 --> 00:00:22,050
completely what if we could at the same

7
00:00:20,520 --> 00:00:25,220
time had the developers to write secure

8
00:00:22,050 --> 00:00:27,660
code what if we could simplify

9
00:00:25,220 --> 00:00:31,049
significantly the security reviews of

10
00:00:27,660 --> 00:00:33,180
such code and doing all of that didn't

11
00:00:31,050 --> 00:00:35,070
require breaking or rewriting your

12
00:00:33,180 --> 00:00:38,790
application from scratch that would be

13
00:00:35,070 --> 00:00:42,660
cool now and this is exactly what I will

14
00:00:38,790 --> 00:00:45,360
present so first a very short refresher

15
00:00:42,660 --> 00:00:47,038
on Dom XSS I imagine most of you are

16
00:00:45,360 --> 00:00:49,379
familiar with it so it will just keep

17
00:00:47,039 --> 00:00:52,410
skip like right through it

18
00:00:49,379 --> 00:00:54,870
Tomic success is a purely client-side

19
00:00:52,410 --> 00:00:57,390
cross side scripting variant so the

20
00:00:54,870 --> 00:00:59,339
entirety of the vulnerability lies in

21
00:00:57,390 --> 00:01:04,260
the JavaScript code running in your

22
00:00:59,340 --> 00:01:07,650
browser and it starts from a data being

23
00:01:04,260 --> 00:01:09,510
read from an attacker control source

24
00:01:07,650 --> 00:01:12,060
then being passed around throughout your

25
00:01:09,510 --> 00:01:14,159
JavaScript code down to something that

26
00:01:12,060 --> 00:01:16,740
is called the Dom XSS sink so an

27
00:01:14,159 --> 00:01:18,060
attacker control source usually like a

28
00:01:16,740 --> 00:01:19,740
classical one is the location harsh

29
00:01:18,060 --> 00:01:23,130
object in your JavaScript program and

30
00:01:19,740 --> 00:01:25,589
later on this gets outputted without

31
00:01:23,130 --> 00:01:27,298
proper standardization for example into

32
00:01:25,590 --> 00:01:30,450
the inner HTML property assignment of

33
00:01:27,299 --> 00:01:35,610
any HTML element right classic Dom XSS

34
00:01:30,450 --> 00:01:38,280
101 why do we still have it though we

35
00:01:35,610 --> 00:01:40,729
think that is because of two separate

36
00:01:38,280 --> 00:01:43,979
reasons first of all Dom XSS is

37
00:01:40,729 --> 00:01:47,908
extremely easy to introduce when writing

38
00:01:43,979 --> 00:01:50,490
web applications and second of all it's

39
00:01:47,909 --> 00:01:55,649
super hard to detect it or prevent it or

40
00:01:50,490 --> 00:01:58,770
find it or spotted why is that Dom API

41
00:01:55,649 --> 00:02:01,869
is from a security perspective a super

42
00:01:58,770 --> 00:02:06,789
terrible badly designed

43
00:02:01,869 --> 00:02:08,979
mess and you can see that very easily

44
00:02:06,789 --> 00:02:11,110
like very first JavaScript program that

45
00:02:08,979 --> 00:02:12,819
you write probably will create a dumb

46
00:02:11,110 --> 00:02:16,750
XSS vulnerability as long as you process

47
00:02:12,819 --> 00:02:18,280
any user input the thing is I've already

48
00:02:16,750 --> 00:02:20,640
mentioned inner HTML being a Dom

49
00:02:18,280 --> 00:02:23,620
accessing there's like over 60

50
00:02:20,640 --> 00:02:26,649
properties or functions in available to

51
00:02:23,620 --> 00:02:30,069
the browser that are able to do just

52
00:02:26,650 --> 00:02:32,230
that like take a string and then make it

53
00:02:30,069 --> 00:02:36,069
cause a JavaScript execution controlled

54
00:02:32,230 --> 00:02:38,290
by through that string let's say eval is

55
00:02:36,069 --> 00:02:40,268
a classical example again it takes a

56
00:02:38,290 --> 00:02:42,790
JavaScript snippet and it will just

57
00:02:40,269 --> 00:02:46,420
execute it but there's others like inner

58
00:02:42,790 --> 00:02:48,519
HTML you know source property of the

59
00:02:46,420 --> 00:02:50,828
script element either they just an HTML

60
00:02:48,519 --> 00:02:52,510
property of any element and the second

61
00:02:50,829 --> 00:02:55,090
parameter here is HTML so you know it

62
00:02:52,510 --> 00:02:57,519
gets more complex you could also pass

63
00:02:55,090 --> 00:02:59,230
from string using the Dom parser object

64
00:02:57,519 --> 00:03:01,930
there's window open and as they go over

65
00:02:59,230 --> 00:03:05,768
60 things all of them have one thing in

66
00:03:01,930 --> 00:03:07,660
common thing except either a URL an HTML

67
00:03:05,769 --> 00:03:10,480
snippet or strictly a JavaScript code as

68
00:03:07,660 --> 00:03:12,579
a string and then they just well you

69
00:03:10,480 --> 00:03:16,179
know process it in a way that will cause

70
00:03:12,579 --> 00:03:16,690
JavaScript execution on that second

71
00:03:16,180 --> 00:03:20,819
thing

72
00:03:16,690 --> 00:03:22,989
why Dominic's SS still exists it's

73
00:03:20,819 --> 00:03:26,230
extremely hard to analyze JavaScript

74
00:03:22,989 --> 00:03:29,290
code especially in terms of Dom XSS it's

75
00:03:26,230 --> 00:03:32,230
hard to spot the actual vulnerability in

76
00:03:29,290 --> 00:03:34,328
practice what happens is you do not have

77
00:03:32,230 --> 00:03:36,069
like the reading from source and

78
00:03:34,329 --> 00:03:38,169
assigning to the sink right next to each

79
00:03:36,069 --> 00:03:40,679
other there will be like a huge call

80
00:03:38,169 --> 00:03:43,989
stack of functions in between them

81
00:03:40,680 --> 00:03:45,459
therefore to find out whether you

82
00:03:43,989 --> 00:03:47,680
actually have a vulnerability you need

83
00:03:45,459 --> 00:03:49,840
to start usually from a sink and then go

84
00:03:47,680 --> 00:03:52,000
up the chain analyzing the program and

85
00:03:49,840 --> 00:03:53,349
seeing whether the sink was actually

86
00:03:52,000 --> 00:03:55,299
assigned something that was user

87
00:03:53,349 --> 00:03:58,319
controllable right whether it was a link

88
00:03:55,299 --> 00:04:00,669
between the source and the sink and that

89
00:03:58,319 --> 00:04:02,589
gets hard because javascript is a

90
00:04:00,669 --> 00:04:04,209
dynamic language it's not something that

91
00:04:02,590 --> 00:04:06,280
you can analyze statically very easily

92
00:04:04,209 --> 00:04:07,720
there are projects around it and there

93
00:04:06,280 --> 00:04:09,370
are subsets of JavaScript that you know

94
00:04:07,720 --> 00:04:13,550
allow you for that but this is not very

95
00:04:09,370 --> 00:04:15,740
practical or or adopted widely so he

96
00:04:13,550 --> 00:04:19,400
there are here there are a few examples

97
00:04:15,740 --> 00:04:21,320
of why this becomes difficult right I

98
00:04:19,399 --> 00:04:23,450
don't know if this is a dumb XSS

99
00:04:21,320 --> 00:04:25,790
vulnerability it depends where on where

100
00:04:23,450 --> 00:04:27,740
the bar comes from I didn't know whether

101
00:04:25,790 --> 00:04:29,570
this is just looking at this line of

102
00:04:27,740 --> 00:04:31,250
code I don't even know that this is a

103
00:04:29,570 --> 00:04:33,980
single segment it actually is because

104
00:04:31,250 --> 00:04:36,260
once you get into this property name

105
00:04:33,980 --> 00:04:38,720
function and some condition matches that

106
00:04:36,260 --> 00:04:40,340
actually is an assignment in HTML and so

107
00:04:38,720 --> 00:04:43,670
on and so forth there's a lot of rappers

108
00:04:40,340 --> 00:04:46,060
and Dom XSS happens because the

109
00:04:43,670 --> 00:04:49,100
developers get to work with this ugly

110
00:04:46,060 --> 00:04:51,800
messy API and inadvertently they do

111
00:04:49,100 --> 00:04:53,690
introduce Dom access over and over again

112
00:04:51,800 --> 00:04:57,740
and it's not their fault its default of

113
00:04:53,690 --> 00:04:59,990
the API and it's also a growing problem

114
00:04:57,740 --> 00:05:02,150
it's a growing problem because our

115
00:04:59,990 --> 00:05:04,310
JavaScript code says to simply draw us

116
00:05:02,150 --> 00:05:08,359
our applications tends to get bigger on

117
00:05:04,310 --> 00:05:10,730
the client and not smaller so your

118
00:05:08,360 --> 00:05:13,940
immediate code code of your actual

119
00:05:10,730 --> 00:05:17,300
application gets exposed to this messy

120
00:05:13,940 --> 00:05:19,310
API but the very same functions can be

121
00:05:17,300 --> 00:05:21,380
called by one of your dependencies the

122
00:05:19,310 --> 00:05:23,660
ones that you load as part of your build

123
00:05:21,380 --> 00:05:25,310
chain but also the scripts that are

124
00:05:23,660 --> 00:05:28,130
being loaded at runtime have access to

125
00:05:25,310 --> 00:05:32,390
the very same Dom API and also can

126
00:05:28,130 --> 00:05:34,670
trigger the vulnerability so it grows

127
00:05:32,390 --> 00:05:35,960
and grows and explodes the problem

128
00:05:34,670 --> 00:05:39,650
becomes untenable

129
00:05:35,960 --> 00:05:41,630
we think it's untenable for especially a

130
00:05:39,650 --> 00:05:43,849
beginner developer or a developer who's

131
00:05:41,630 --> 00:05:47,480
who handles a complex application to

132
00:05:43,850 --> 00:05:51,470
write a code that is Dom access free at

133
00:05:47,480 --> 00:05:54,950
Google as a consequence we already know

134
00:05:51,470 --> 00:05:56,720
that Dom XSS is by far the most popular

135
00:05:54,950 --> 00:06:00,830
variant of the exercises that we get

136
00:05:56,720 --> 00:06:03,320
reported and fixed so it is a problem it

137
00:06:00,830 --> 00:06:05,659
is a real word problem thankfully we

138
00:06:03,320 --> 00:06:07,040
also know do know how to address it in

139
00:06:05,660 --> 00:06:09,010
Google since a couple of years we use

140
00:06:07,040 --> 00:06:13,550
the approach that is called safe types

141
00:06:09,010 --> 00:06:15,020
it protects virtually all of our let's

142
00:06:13,550 --> 00:06:15,380
say core applications like so Google

143
00:06:15,020 --> 00:06:20,000
Docs

144
00:06:15,380 --> 00:06:22,610
Gmail or all of that we have an evidence

145
00:06:20,000 --> 00:06:26,870
of efficacy of this solution this

146
00:06:22,610 --> 00:06:28,910
solution focuses on being able or

147
00:06:26,870 --> 00:06:31,430
giving the developers DN API that

148
00:06:28,910 --> 00:06:34,400
enables safely producing a given values

149
00:06:31,430 --> 00:06:36,830
even from the user input and later on

150
00:06:34,400 --> 00:06:38,560
those values can safely be propagated

151
00:06:36,830 --> 00:06:42,440
throughout your code base and then

152
00:06:38,560 --> 00:06:45,199
assigned to Dom sinks it's implemented

153
00:06:42,440 --> 00:06:49,219
as a as a library in various programming

154
00:06:45,199 --> 00:06:53,180
languages but still we do suffer from

155
00:06:49,220 --> 00:06:56,229
occasionally from the Dom exercises the

156
00:06:53,180 --> 00:07:00,260
reason why this is happening is that

157
00:06:56,229 --> 00:07:02,090
when we try to evaluate the program or

158
00:07:00,260 --> 00:07:04,820
when we try to reason about its security

159
00:07:02,090 --> 00:07:06,799
where we try to protect it is when we

160
00:07:04,820 --> 00:07:10,370
compile the application we actually on

161
00:07:06,800 --> 00:07:14,600
Google we also compile JavaScript so and

162
00:07:10,370 --> 00:07:17,090
that seems fine unfortunately the very

163
00:07:14,600 --> 00:07:18,620
same program it runs at run time and

164
00:07:17,090 --> 00:07:20,359
here some of the assumptions that we

165
00:07:18,620 --> 00:07:21,979
have made when compiling actually do not

166
00:07:20,360 --> 00:07:23,450
hold true like for example there's an

167
00:07:21,979 --> 00:07:25,639
additional library that the developer

168
00:07:23,450 --> 00:07:27,490
just included without going through the

169
00:07:25,639 --> 00:07:31,610
compiler right it just happens

170
00:07:27,490 --> 00:07:35,600
especially at scale so trusted types is

171
00:07:31,610 --> 00:07:39,139
a way of moving that solution that we

172
00:07:35,600 --> 00:07:40,610
know works to the browsers such that we

173
00:07:39,139 --> 00:07:43,639
can have the very same guarantees at

174
00:07:40,610 --> 00:07:46,220
runtime and such that not only Google

175
00:07:43,639 --> 00:07:48,410
can benefit from it but the whole

176
00:07:46,220 --> 00:07:50,479
community that writes the JavaScript

177
00:07:48,410 --> 00:07:52,580
programs nowadays and with that we can I

178
00:07:50,479 --> 00:07:53,090
think practically solve the atomic CSS

179
00:07:52,580 --> 00:07:54,889
problem

180
00:07:53,090 --> 00:07:57,919
that brings us to trusted types this is

181
00:07:54,889 --> 00:08:03,050
the solution that that we will be

182
00:07:57,919 --> 00:08:06,710
describing here yes so what are trusted

183
00:08:03,050 --> 00:08:09,260
types that's not a good question why I

184
00:08:06,710 --> 00:08:10,280
trusted why are trusted types is a

185
00:08:09,260 --> 00:08:14,060
better one

186
00:08:10,280 --> 00:08:16,369
so we won't trust a type the API to

187
00:08:14,060 --> 00:08:19,099
adhere to certain design principles

188
00:08:16,370 --> 00:08:20,990
they're really important for us so first

189
00:08:19,099 --> 00:08:23,330
of all we want trusted types to empower

190
00:08:20,990 --> 00:08:25,550
the developers such that they have a

191
00:08:23,330 --> 00:08:27,710
chance of writing secure code easily

192
00:08:25,550 --> 00:08:29,840
that becomes like this natural thing

193
00:08:27,710 --> 00:08:31,099
thank you start adding code and that

194
00:08:29,840 --> 00:08:35,900
it's secure because it's the most

195
00:08:31,099 --> 00:08:39,049
natural thing for you to do we want to

196
00:08:35,900 --> 00:08:40,730
move to the secure by default api's we

197
00:08:39,049 --> 00:08:42,620
want the developers to get

198
00:08:40,730 --> 00:08:44,990
the feedback that they are doing

199
00:08:42,620 --> 00:08:49,460
something risky or wrong as early as

200
00:08:44,990 --> 00:08:51,350
possible so we're pushing left again so

201
00:08:49,460 --> 00:08:54,560
for example as you are typing the code

202
00:08:51,350 --> 00:08:56,390
we can give you suggestions saying well

203
00:08:54,560 --> 00:08:58,489
you are just introducing maybe Dom XSS

204
00:08:56,390 --> 00:09:02,030
use this other function instead for

205
00:08:58,490 --> 00:09:03,140
example right at the very same time we

206
00:09:02,030 --> 00:09:07,100
want to empower the security

207
00:09:03,140 --> 00:09:08,870
professionals such that they can control

208
00:09:07,100 --> 00:09:10,760
the security relevant code of the

209
00:09:08,870 --> 00:09:14,000
application they do not need to look at

210
00:09:10,760 --> 00:09:16,189
the entirety of the codebase they only

211
00:09:14,000 --> 00:09:20,810
need to look and review and protect

212
00:09:16,190 --> 00:09:25,640
changes to those critical small amounts

213
00:09:20,810 --> 00:09:28,130
of code that only those are security

214
00:09:25,640 --> 00:09:31,880
relevant at least in terms of dynamics

215
00:09:28,130 --> 00:09:33,850
SS exposure so with trusted types just

216
00:09:31,880 --> 00:09:36,230
the types can enable us to do that and

217
00:09:33,850 --> 00:09:38,270
at the very same time we want to

218
00:09:36,230 --> 00:09:41,060
integrate with the existing ecosystem so

219
00:09:38,270 --> 00:09:43,160
we want to leverage what's good work

220
00:09:41,060 --> 00:09:44,900
with something that already works be

221
00:09:43,160 --> 00:09:47,660
backwards compatible allow the gradual

222
00:09:44,900 --> 00:09:50,240
migration all that let's not just break

223
00:09:47,660 --> 00:09:52,010
the applications and by you know flowing

224
00:09:50,240 --> 00:09:58,310
out the Dom API and saying you need to

225
00:09:52,010 --> 00:10:02,810
use something else completely so the

226
00:09:58,310 --> 00:10:08,239
main idea of trusted types is we stopped

227
00:10:02,810 --> 00:10:09,920
using strings as the value type we no

228
00:10:08,240 --> 00:10:12,950
longer pass them to the Dom strings

229
00:10:09,920 --> 00:10:15,500
directly what we do instead is we use

230
00:10:12,950 --> 00:10:18,410
objects JavaScript objects the good

231
00:10:15,500 --> 00:10:21,100
thing is that the dome API actually

232
00:10:18,410 --> 00:10:24,140
already supports it all it always had

233
00:10:21,100 --> 00:10:26,840
here's an example if you assign to an

234
00:10:24,140 --> 00:10:28,340
inner HTML an object that has a two

235
00:10:26,840 --> 00:10:33,800
string function that you know return

236
00:10:28,340 --> 00:10:35,270
some value the Dom API will just try to

237
00:10:33,800 --> 00:10:37,099
string if I this object so call this

238
00:10:35,270 --> 00:10:39,500
function implicitly and then you know

239
00:10:37,100 --> 00:10:41,570
the result the result value will be

240
00:10:39,500 --> 00:10:43,430
actually assigned to the Dom so we can

241
00:10:41,570 --> 00:10:46,250
already start using objects in our

242
00:10:43,430 --> 00:10:47,800
JavaScript programs without breaking the

243
00:10:46,250 --> 00:10:50,420
functionality of the applications

244
00:10:47,800 --> 00:10:52,310
however there's a couple of more things

245
00:10:50,420 --> 00:10:54,170
that we need to implement

246
00:10:52,310 --> 00:10:56,810
instead of using plain JavaScript

247
00:10:54,170 --> 00:10:59,439
objects we use typed objects so we

248
00:10:56,810 --> 00:11:02,869
create a couple of classes if you will

249
00:10:59,440 --> 00:11:05,540
that represents different types of

250
00:11:02,870 --> 00:11:07,730
values that we expect to be propagated

251
00:11:05,540 --> 00:11:09,740
throughout the program flow so there's a

252
00:11:07,730 --> 00:11:12,170
trusted HTML type which represents a

253
00:11:09,740 --> 00:11:14,710
snippet of HTML that our application

254
00:11:12,170 --> 00:11:17,719
trusts to be okay to insert into the Dom

255
00:11:14,710 --> 00:11:19,580
we also have a trusted script type which

256
00:11:17,720 --> 00:11:22,970
means a snippet of JavaScript that is

257
00:11:19,580 --> 00:11:25,190
okay to execute a trusted URL which is

258
00:11:22,970 --> 00:11:28,070
something that you can safely link to

259
00:11:25,190 --> 00:11:29,900
and the trusted script URL is something

260
00:11:28,070 --> 00:11:32,060
that you can link to that will load the

261
00:11:29,900 --> 00:11:37,579
JavaScript and execute like a script

262
00:11:32,060 --> 00:11:41,770
source and with those components those

263
00:11:37,580 --> 00:11:46,280
primitives the only security critical

264
00:11:41,770 --> 00:11:49,100
part is we can make the Dom API behave

265
00:11:46,280 --> 00:11:51,530
slightly differently make it just reject

266
00:11:49,100 --> 00:11:53,240
a string variant and only accept those

267
00:11:51,530 --> 00:11:55,459
typed objects that's that's the whole

268
00:11:53,240 --> 00:11:57,970
trick of trusted types so sorry like

269
00:11:55,460 --> 00:11:57,970
we've done

270
00:12:06,220 --> 00:12:10,179
do you want to add it in a way that

271
00:12:08,769 --> 00:12:13,479
could potentially cause the JavaScript

272
00:12:10,179 --> 00:12:15,669
execution so you don't need to use the

273
00:12:13,479 --> 00:12:17,109
types in this regard at all like for

274
00:12:15,669 --> 00:12:19,569
example if you want to assign to an

275
00:12:17,109 --> 00:12:21,489
inner it in your text property you can

276
00:12:19,569 --> 00:12:25,299
use a string because that one has no Dom

277
00:12:21,489 --> 00:12:27,339
XSS risk so only if you want to like

278
00:12:25,299 --> 00:12:29,589
assign to a script source for example

279
00:12:27,339 --> 00:12:32,829
you would need to produce a value that's

280
00:12:29,589 --> 00:12:35,589
of a given type all right how does it

281
00:12:32,829 --> 00:12:38,618
look let's look at some code right how

282
00:12:35,589 --> 00:12:40,359
does it look in production so you can

283
00:12:38,619 --> 00:12:43,629
enable the enforcement of the type so we

284
00:12:40,359 --> 00:12:45,220
can make this switch of the Dom API by

285
00:12:43,629 --> 00:12:47,289
by using the content security policy

286
00:12:45,220 --> 00:12:49,959
header with the trusted types directive

287
00:12:47,289 --> 00:12:53,439
this star ignore for now we'll get to

288
00:12:49,959 --> 00:12:57,309
that and once of course in a supporting

289
00:12:53,439 --> 00:12:59,889
browser once this happens the Dom will

290
00:12:57,309 --> 00:13:03,519
stop accepting strings objects for

291
00:12:59,889 --> 00:13:05,979
forgiving forgiving sensitive functions

292
00:13:03,519 --> 00:13:07,839
and will just you know throw a type

293
00:13:05,979 --> 00:13:09,729
error like you're doing something wrong

294
00:13:07,839 --> 00:13:12,189
I don't want strings here they

295
00:13:09,729 --> 00:13:15,819
potentially are our attacker controlled

296
00:13:12,189 --> 00:13:19,238
however you can accept or the Dom will

297
00:13:15,819 --> 00:13:21,878
accept a trusted type object what this

298
00:13:19,239 --> 00:13:24,279
one allows us to do is also we can just

299
00:13:21,879 --> 00:13:27,239
trigger the report on the mode which is

300
00:13:24,279 --> 00:13:31,299
pretty good for adopting any security

301
00:13:27,239 --> 00:13:33,009
solution so I can still accept the

302
00:13:31,299 --> 00:13:34,659
string but I will report it to some to

303
00:13:33,009 --> 00:13:37,529
some endpoints right we using the

304
00:13:34,659 --> 00:13:39,639
regular CSP infrastructure will not

305
00:13:37,529 --> 00:13:42,279
rebuilding something from scratch we're

306
00:13:39,639 --> 00:13:44,069
not reinventing the wheel and the typed

307
00:13:42,279 --> 00:13:46,929
object obviously do not cause any

308
00:13:44,069 --> 00:13:49,689
violation no no reporting is being done

309
00:13:46,929 --> 00:13:51,728
for them we can also have no enforcement

310
00:13:49,689 --> 00:13:53,589
like if you have a completely invalid

311
00:13:51,729 --> 00:13:56,199
CSP header or there's no CSP header

312
00:13:53,589 --> 00:13:58,359
whatsoever your application continues to

313
00:13:56,199 --> 00:14:00,669
work that's a surprise you can use a

314
00:13:58,359 --> 00:14:02,619
string sure it accepts so it's

315
00:14:00,669 --> 00:14:04,269
potentially vulnerable but also it

316
00:14:02,619 --> 00:14:06,089
doesn't break because if you use the

317
00:14:04,269 --> 00:14:09,119
types it's just like

318
00:14:06,089 --> 00:14:11,810
backwards-compatible that's a very good

319
00:14:09,119 --> 00:14:16,249
boon for adoption let's say

320
00:14:11,810 --> 00:14:17,180
now how do we create the types now this

321
00:14:16,249 --> 00:14:19,850
is a tricky part

322
00:14:17,180 --> 00:14:21,859
you don't just create the type directly

323
00:14:19,850 --> 00:14:24,079
by just calling a constructor function

324
00:14:21,860 --> 00:14:30,499
no no no that would be pretty bad

325
00:14:24,079 --> 00:14:32,809
we need more abstraction so we allow the

326
00:14:30,499 --> 00:14:36,980
developers or we allow the JavaScript

327
00:14:32,809 --> 00:14:38,870
program to create a set of policies and

328
00:14:36,980 --> 00:14:41,779
a policy is just a JavaScript function

329
00:14:38,870 --> 00:14:43,160
in the end so you create a policy using

330
00:14:41,779 --> 00:14:46,309
this trusted types create policy

331
00:14:43,160 --> 00:14:48,499
function and what do you do first of all

332
00:14:46,309 --> 00:14:50,689
you give it a name and this policy from

333
00:14:48,499 --> 00:14:52,279
now on will be identified by a name or

334
00:14:50,689 --> 00:14:55,069
controlled by a name we'll get to that

335
00:14:52,279 --> 00:15:00,709
later and this policy defines a set of

336
00:14:55,069 --> 00:15:02,779
rules that will be run whenever someone

337
00:15:00,709 --> 00:15:04,279
is trying to using to use that policy to

338
00:15:02,779 --> 00:15:06,319
create a trusted type object in this

339
00:15:04,279 --> 00:15:09,139
particular case if you if a developer

340
00:15:06,319 --> 00:15:12,469
wants to use this sanitizing policy here

341
00:15:09,139 --> 00:15:14,689
create HTML function passing it whatever

342
00:15:12,470 --> 00:15:17,990
it can be user controlled data that user

343
00:15:14,689 --> 00:15:20,059
control data will be passed to your

344
00:15:17,990 --> 00:15:22,819
custom sanitization rules like it can be

345
00:15:20,059 --> 00:15:24,709
done purify for example and the result

346
00:15:22,819 --> 00:15:27,469
value from this one will actually be

347
00:15:24,709 --> 00:15:29,660
wrapped into this trusted HTML object

348
00:15:27,470 --> 00:15:44,149
would you then you can safely use with

349
00:15:29,660 --> 00:15:48,079
what the Dom yes sorry I didn't I didn't

350
00:15:44,149 --> 00:15:50,689
compile the Dakota example sorry so and

351
00:15:48,079 --> 00:15:52,099
there's this extra part because no not

352
00:15:50,689 --> 00:15:54,740
always you can control actually the

353
00:15:52,100 --> 00:15:55,730
entirety of your codebase so we have

354
00:15:54,740 --> 00:15:57,620
something that is called the default

355
00:15:55,730 --> 00:15:59,449
policy so we can create in your

356
00:15:57,620 --> 00:16:03,220
application a single policy called

357
00:15:59,449 --> 00:16:06,290
default and then it has its own rules

358
00:16:03,220 --> 00:16:08,209
that policy will be called as a fallback

359
00:16:06,290 --> 00:16:10,429
mechanism any time you actually have

360
00:16:08,209 --> 00:16:13,489
called the Dom sink with a string so it

361
00:16:10,429 --> 00:16:17,029
allows you to recover sanitize something

362
00:16:13,490 --> 00:16:19,610
at the very very end or optionally you

363
00:16:17,029 --> 00:16:21,559
know log something reports something you

364
00:16:19,610 --> 00:16:24,199
can implement any custom logic you want

365
00:16:21,559 --> 00:16:25,760
here such that it helps you migrate

366
00:16:24,199 --> 00:16:27,469
towards trusted types

367
00:16:25,760 --> 00:16:29,689
so first of all you can have coverage

368
00:16:27,470 --> 00:16:32,240
for separate parts of your application

369
00:16:29,690 --> 00:16:36,130
but the remaining parts will be covered

370
00:16:32,240 --> 00:16:40,550
by this this default policy yep

371
00:16:36,130 --> 00:16:44,480
demo Jim tweeted a couple of days ago

372
00:16:40,550 --> 00:16:46,760
like we know how to fix XSS let's just

373
00:16:44,480 --> 00:16:50,860
make you know innerhtml just sanitized

374
00:16:46,760 --> 00:16:53,810
you're wrong Jim this one 50 Dom XSS

375
00:16:50,860 --> 00:16:56,000
nevertheless this is a this is trivial

376
00:16:53,810 --> 00:16:58,510
to implement in trusted types so let me

377
00:16:56,000 --> 00:17:01,730
just present your help

378
00:16:58,510 --> 00:17:04,220
yep so this is an application a very

379
00:17:01,730 --> 00:17:06,230
simple toy application we have an input

380
00:17:04,220 --> 00:17:09,169
field here and we have an output field

381
00:17:06,230 --> 00:17:13,099
here and there's two buttons if I press

382
00:17:09,169 --> 00:17:14,870
this button that data will be sanitized

383
00:17:13,099 --> 00:17:17,178
we've done purify and output it here

384
00:17:14,869 --> 00:17:20,000
with this one I will just use a direct

385
00:17:17,179 --> 00:17:22,490
inner HTML assignment right so we all

386
00:17:20,000 --> 00:17:23,959
know what will happen here the inline

387
00:17:22,490 --> 00:17:24,650
event handler will be removed and it's

388
00:17:23,959 --> 00:17:28,549
all fine

389
00:17:24,650 --> 00:17:33,230
however when I press this one we have an

390
00:17:28,549 --> 00:17:35,929
XSS however let's see what happens once

391
00:17:33,230 --> 00:17:38,360
we enforce the trusted types and what we

392
00:17:35,929 --> 00:17:39,830
do right here is what happens

393
00:17:38,360 --> 00:17:42,168
we added like this content security

394
00:17:39,830 --> 00:17:44,030
policy header where of those additional

395
00:17:42,169 --> 00:17:47,360
values I will get to those values what

396
00:17:44,030 --> 00:17:49,790
those my values means in a second but if

397
00:17:47,360 --> 00:17:54,549
I sanitize the value I I will route this

398
00:17:49,790 --> 00:17:56,840
data through this don't clarify it's

399
00:17:54,549 --> 00:18:00,129
inserted into the Dom however if I try

400
00:17:56,840 --> 00:18:02,418
to insert it directly using a string

401
00:18:00,130 --> 00:18:04,429
something is wrong like I have a type

402
00:18:02,419 --> 00:18:05,809
error here something is wrong

403
00:18:04,429 --> 00:18:07,880
what does it mean like there's an inner

404
00:18:05,809 --> 00:18:10,010
HTML and then like whatever I read

405
00:18:07,880 --> 00:18:14,150
something from the DOM and that's a

406
00:18:10,010 --> 00:18:16,730
no-no so the application breaks in the

407
00:18:14,150 --> 00:18:18,650
sense that functionality breaks but we

408
00:18:16,730 --> 00:18:22,070
also do not have xs/s so that's pretty

409
00:18:18,650 --> 00:18:27,799
cool now here comes a question like wait

410
00:18:22,070 --> 00:18:29,809
wait how does this one work like how

411
00:18:27,799 --> 00:18:31,879
come the sanitization is magic here well

412
00:18:29,809 --> 00:18:33,139
the magic comes from don't verify itself

413
00:18:31,880 --> 00:18:36,020
it supports trusted types

414
00:18:33,140 --> 00:18:38,720
so don't purify creates its own policy

415
00:18:36,020 --> 00:18:39,980
and after the sanitization it will just

416
00:18:38,720 --> 00:18:41,810
wrap

417
00:18:39,980 --> 00:18:45,050
we'll give you the trusted HTML object

418
00:18:41,810 --> 00:18:47,000
back that is that contains the sanitized

419
00:18:45,050 --> 00:18:49,730
code and in the end you can just

420
00:18:47,000 --> 00:18:52,220
directly use it in your application no

421
00:18:49,730 --> 00:18:54,230
changes required from your end you just

422
00:18:52,220 --> 00:18:56,410
use the libraries that are trusted types

423
00:18:54,230 --> 00:18:59,690
compliant and you're good to go

424
00:18:56,410 --> 00:19:01,730
now let's install the default policy

425
00:18:59,690 --> 00:19:05,960
this is the the experiment that Jim

426
00:19:01,730 --> 00:19:09,110
wanted this is the web that you want the

427
00:19:05,960 --> 00:19:10,820
default policy will will just actually

428
00:19:09,110 --> 00:19:12,979
see it in action so I press the inner

429
00:19:10,820 --> 00:19:14,929
HTML button the default policy helpfully

430
00:19:12,980 --> 00:19:17,240
has this debugger called so I can show

431
00:19:14,930 --> 00:19:19,730
you what's going on here the default

432
00:19:17,240 --> 00:19:22,970
policy will just has a create HTML

433
00:19:19,730 --> 00:19:25,120
function this is the input to it and it

434
00:19:22,970 --> 00:19:28,430
just decides to sanitize anyway because

435
00:19:25,120 --> 00:19:31,030
sanitization everywhere is okay right

436
00:19:28,430 --> 00:19:33,140
so we sanitizing everywhere we're just

437
00:19:31,030 --> 00:19:35,180
going through and this is the output

438
00:19:33,140 --> 00:19:38,360
value this is the default policy in

439
00:19:35,180 --> 00:19:40,790
action now our application has this

440
00:19:38,360 --> 00:19:42,350
header here right trusted types don't

441
00:19:40,790 --> 00:19:44,600
purify default what does it mean that

442
00:19:42,350 --> 00:19:46,399
means that we enable the enforcement of

443
00:19:44,600 --> 00:19:48,709
the trusted types but I only allow those

444
00:19:46,400 --> 00:19:50,630
to Porat policies don't unify and the

445
00:19:48,710 --> 00:19:52,150
default let's see what happens if I try

446
00:19:50,630 --> 00:19:55,310
to install a custom policy

447
00:19:52,150 --> 00:19:57,800
well this policy has a name that is not

448
00:19:55,310 --> 00:19:59,360
on a whitelist and it just faced there's

449
00:19:57,800 --> 00:20:01,460
a type error you cannot create a policy

450
00:19:59,360 --> 00:20:05,060
that the application owner let's say

451
00:20:01,460 --> 00:20:08,690
didn't allow you to so that brings us

452
00:20:05,060 --> 00:20:10,970
back to the next slide what I've

453
00:20:08,690 --> 00:20:15,710
demonstrated right here is that you have

454
00:20:10,970 --> 00:20:17,090
a tight control over the policies first

455
00:20:15,710 --> 00:20:20,120
of all you can control the policy

456
00:20:17,090 --> 00:20:22,520
creation there is this white list in the

457
00:20:20,120 --> 00:20:26,810
in the CSP header in the trusted type

458
00:20:22,520 --> 00:20:29,540
directive meaning that none of your

459
00:20:26,810 --> 00:20:31,820
dependencies can create the policies

460
00:20:29,540 --> 00:20:34,280
that you didn't allow for before right

461
00:20:31,820 --> 00:20:36,679
so there's no code changing under you

462
00:20:34,280 --> 00:20:38,450
that can suddenly create trusted types

463
00:20:36,680 --> 00:20:41,630
and therefore expose your application to

464
00:20:38,450 --> 00:20:44,240
the Dom accesses risks so all the

465
00:20:41,630 --> 00:20:46,790
policies on your whitelist are somehow

466
00:20:44,240 --> 00:20:49,580
known to you you control them you have

467
00:20:46,790 --> 00:20:51,260
reviewed them you've looked at it there

468
00:20:49,580 --> 00:20:53,300
are no driver policy policies and

469
00:20:51,260 --> 00:20:56,750
obviously as a consequence

470
00:20:53,300 --> 00:20:58,430
or yeah as a consequence you cannot

471
00:20:56,750 --> 00:21:00,920
actually create the policy with the same

472
00:20:58,430 --> 00:21:03,650
name twice the second call will simply

473
00:21:00,920 --> 00:21:06,050
break so even if someone tries to be

474
00:21:03,650 --> 00:21:08,390
sneaky and tries to create a poll or

475
00:21:06,050 --> 00:21:09,940
piggyback on a policy this call will

476
00:21:08,390 --> 00:21:15,410
fail

477
00:21:09,940 --> 00:21:17,480
but the actual important additional

478
00:21:15,410 --> 00:21:20,330
control that you have is you can control

479
00:21:17,480 --> 00:21:23,060
the policy usage policy again embodies

480
00:21:20,330 --> 00:21:25,070
the rules that are being run whenever a

481
00:21:23,060 --> 00:21:27,679
string is being converted to a trusted

482
00:21:25,070 --> 00:21:30,110
type and there can be many policies some

483
00:21:27,680 --> 00:21:34,340
of them are more strict some of them

484
00:21:30,110 --> 00:21:35,929
maybe are more relaxed some of them you

485
00:21:34,340 --> 00:21:39,080
have reviewed some of them were

486
00:21:35,930 --> 00:21:40,880
introduced by by one of your

487
00:21:39,080 --> 00:21:42,790
dependencies for example right but

488
00:21:40,880 --> 00:21:45,740
policies are JavaScript objects

489
00:21:42,790 --> 00:21:48,560
therefore you can control access to them

490
00:21:45,740 --> 00:21:50,630
using the regular JavaScript programming

491
00:21:48,560 --> 00:21:52,970
language features so you can lock them

492
00:21:50,630 --> 00:21:56,000
down in a single module you can create a

493
00:21:52,970 --> 00:21:58,220
private class variable you can wrap them

494
00:21:56,000 --> 00:22:01,040
into a local function variable so you

495
00:21:58,220 --> 00:22:03,680
not only get control over which policies

496
00:22:01,040 --> 00:22:06,170
can be created but what gets exposed

497
00:22:03,680 --> 00:22:09,320
what gets access to the two separate

498
00:22:06,170 --> 00:22:12,800
policies let's see an example there is a

499
00:22:09,320 --> 00:22:14,240
policy but clearly is unsafe right it

500
00:22:12,800 --> 00:22:17,139
just takes any value with no

501
00:22:14,240 --> 00:22:21,980
sanitization and returns the same thing

502
00:22:17,140 --> 00:22:23,990
however we can argue that this code

503
00:22:21,980 --> 00:22:25,750
doesn't cause exercises easily even

504
00:22:23,990 --> 00:22:29,180
statically we can we can analyze that

505
00:22:25,750 --> 00:22:30,740
because this policy never leaks outside

506
00:22:29,180 --> 00:22:33,200
of this function body and this function

507
00:22:30,740 --> 00:22:36,110
body only is using it in this particular

508
00:22:33,200 --> 00:22:38,000
thing that doesn't contain any exercise

509
00:22:36,110 --> 00:22:39,740
whatsoever it's just some part of

510
00:22:38,000 --> 00:22:43,370
template rendering of your application

511
00:22:39,740 --> 00:22:45,830
for example or template management so

512
00:22:43,370 --> 00:22:48,260
this is an additional control that we

513
00:22:45,830 --> 00:22:52,189
can add to our JavaScript programs such

514
00:22:48,260 --> 00:22:54,370
that we can compare compartmentalize the

515
00:22:52,190 --> 00:22:56,800
modules within our applications and give

516
00:22:54,370 --> 00:22:59,750
broader access to the policies that are

517
00:22:56,800 --> 00:23:01,760
sanitizing and much stricter access or

518
00:22:59,750 --> 00:23:05,860
much locked down access to the policies

519
00:23:01,760 --> 00:23:08,620
which are you know more risky let's say

520
00:23:05,860 --> 00:23:12,939
what benefits does it doesn't bring us

521
00:23:08,620 --> 00:23:16,299
first of all we have a much much

522
00:23:12,940 --> 00:23:20,200
dramatically reduced attack surface for

523
00:23:16,299 --> 00:23:22,179
the applications what previously used to

524
00:23:20,200 --> 00:23:24,370
be those sixty functions and anytime a

525
00:23:22,179 --> 00:23:26,350
string was passed and the string was

526
00:23:24,370 --> 00:23:29,379
attacker controlled we had an exercise

527
00:23:26,350 --> 00:23:32,019
now every risky data flow has to

528
00:23:29,380 --> 00:23:34,029
necessarily go through the policy right

529
00:23:32,019 --> 00:23:35,649
first you have needs to read something

530
00:23:34,029 --> 00:23:39,940
from a source then something happens

531
00:23:35,649 --> 00:23:42,549
then a policy object gets created than

532
00:23:39,940 --> 00:23:44,470
used and the policy applies its rules

533
00:23:42,549 --> 00:23:46,450
trusts the types of degrees created and

534
00:23:44,470 --> 00:23:49,269
only that trust the type of data later

535
00:23:46,450 --> 00:23:50,950
on be passed into a sink so this is a

536
00:23:49,269 --> 00:23:52,330
critical piece in the whole chain this

537
00:23:50,950 --> 00:23:53,470
is the thing that you have to review

538
00:23:52,330 --> 00:23:56,110
this is the thing that you have to

539
00:23:53,470 --> 00:23:59,889
control and this is the thing that you

540
00:23:56,110 --> 00:24:03,070
can put controls over it does follow

541
00:23:59,889 --> 00:24:04,870
that if your policies are secure that

542
00:24:03,070 --> 00:24:10,600
your application doesn't have the Dom

543
00:24:04,870 --> 00:24:13,600
XSS and that's a very critical critical

544
00:24:10,600 --> 00:24:16,959
thing for trusted types very good big

545
00:24:13,600 --> 00:24:19,330
advantage here if you do not have access

546
00:24:16,960 --> 00:24:22,799
to the policy object you cannot

547
00:24:19,330 --> 00:24:26,470
introduce a Dom XSS so if you're using a

548
00:24:22,799 --> 00:24:28,179
library that maybe talks to the Dom

549
00:24:26,470 --> 00:24:30,159
maybe it doesn't you don't know you

550
00:24:28,179 --> 00:24:31,659
don't really even want to review it

551
00:24:30,159 --> 00:24:33,639
because it's just like a blob of

552
00:24:31,659 --> 00:24:36,250
JavaScript that does something and

553
00:24:33,639 --> 00:24:40,120
there's three hundreds of them so you

554
00:24:36,250 --> 00:24:41,500
need to cut corners somewhere just don't

555
00:24:40,120 --> 00:24:43,389
give it access to the policy object and

556
00:24:41,500 --> 00:24:45,610
see what happens does it break if it

557
00:24:43,389 --> 00:24:49,000
doesn't then it never needed to talk to

558
00:24:45,610 --> 00:24:50,889
the DOM and you're done so it

559
00:24:49,000 --> 00:24:53,409
dramatically minimizes the trusted code

560
00:24:50,889 --> 00:24:55,510
base that is security relevant for Dom

561
00:24:53,409 --> 00:24:59,919
access at least and with that simplifies

562
00:24:55,510 --> 00:25:03,360
the code reviews but there's more this

563
00:24:59,919 --> 00:25:05,919
API is strongly typed meaning that our

564
00:25:03,360 --> 00:25:09,129
JavaScript code is easier to inspect

565
00:25:05,919 --> 00:25:12,130
statically we can reason about the code

566
00:25:09,130 --> 00:25:14,260
in an automatic fashion we can enable

567
00:25:12,130 --> 00:25:16,389
the code completion the linter checks

568
00:25:14,260 --> 00:25:18,940
the documentation around its automatic

569
00:25:16,389 --> 00:25:19,750
refactoring even and the security

570
00:25:18,940 --> 00:25:22,180
validation

571
00:25:19,750 --> 00:25:24,580
of course happens at run time because

572
00:25:22,180 --> 00:25:27,430
it's a browser API but now also we can

573
00:25:24,580 --> 00:25:29,649
push this left to the compiler level we

574
00:25:27,430 --> 00:25:33,610
can assert that a certain function is

575
00:25:29,650 --> 00:25:35,410
being called with a type that's also

576
00:25:33,610 --> 00:25:36,969
backwards compatible because you know

577
00:25:35,410 --> 00:25:40,660
you can start using trusted types in the

578
00:25:36,970 --> 00:25:43,360
application without enforcing and it

579
00:25:40,660 --> 00:25:45,640
will be string if I'd by the way the Dom

580
00:25:43,360 --> 00:25:47,439
API already behaves and it does

581
00:25:45,640 --> 00:25:49,930
complement other security solutions like

582
00:25:47,440 --> 00:25:52,330
for example trusted types cannot do a

583
00:25:49,930 --> 00:25:55,200
thing for server-side exercises it's

584
00:25:52,330 --> 00:25:57,699
completely the wrong choice for that so

585
00:25:55,200 --> 00:25:59,500
if you have a trivial say PHP

586
00:25:57,700 --> 00:26:01,270
application you just output something

587
00:25:59,500 --> 00:26:03,700
without escaping from the get parameter

588
00:26:01,270 --> 00:26:04,930
like trusted types won't help you at all

589
00:26:03,700 --> 00:26:08,460
what can help you here

590
00:26:04,930 --> 00:26:11,080
is for example an on-stage CSP right so

591
00:26:08,460 --> 00:26:14,590
you can embed trusted types in your

592
00:26:11,080 --> 00:26:21,750
already in your existing solutions for

593
00:26:14,590 --> 00:26:26,080
exercises let's see some demo all right

594
00:26:21,750 --> 00:26:28,150
so this was a toy application but now

595
00:26:26,080 --> 00:26:30,399
let's look at something more serious

596
00:26:28,150 --> 00:26:31,540
let's say right so we have an

597
00:26:30,400 --> 00:26:32,980
application that is called the cloud

598
00:26:31,540 --> 00:26:34,870
player

599
00:26:32,980 --> 00:26:38,020
it's an open source application built on

600
00:26:34,870 --> 00:26:42,449
top of the angular framework and we

601
00:26:38,020 --> 00:26:44,680
decided to port it to trusted types so

602
00:26:42,450 --> 00:26:48,630
because it is based on the angular

603
00:26:44,680 --> 00:26:50,980
framework that makes that job quite easy

604
00:26:48,630 --> 00:26:53,260
the way the application dealer

605
00:26:50,980 --> 00:26:55,540
applications are written is most of the

606
00:26:53,260 --> 00:26:58,330
writing to the Dom actually happens

607
00:26:55,540 --> 00:26:59,860
through the framework by by the engine

608
00:26:58,330 --> 00:27:02,159
that does the interpolation of the

609
00:26:59,860 --> 00:27:05,110
values into the angular templates and

610
00:27:02,160 --> 00:27:07,150
angular already has a concept of of

611
00:27:05,110 --> 00:27:09,429
sanitization it does a lot of it has a

612
00:27:07,150 --> 00:27:11,860
lot of security in regards to - Dom

613
00:27:09,430 --> 00:27:14,700
accesses embedded into it and that it's

614
00:27:11,860 --> 00:27:20,800
like that makes angular a very natural

615
00:27:14,700 --> 00:27:23,200
customer or producer of types so what we

616
00:27:20,800 --> 00:27:25,659
need to do to enable our angular

617
00:27:23,200 --> 00:27:27,490
application to use the trusted types or

618
00:27:25,660 --> 00:27:30,220
at least as a first stepping-stone we

619
00:27:27,490 --> 00:27:32,260
just change the angular framework and

620
00:27:30,220 --> 00:27:33,080
the only thing that you need to do is

621
00:27:32,260 --> 00:27:35,869
lactose

622
00:27:33,080 --> 00:27:37,939
swap this dependency here right so I

623
00:27:35,869 --> 00:27:41,928
have a experimental fog of angular that

624
00:27:37,940 --> 00:27:43,639
does trusted types and that that's it I

625
00:27:41,929 --> 00:27:45,619
just pointed my application to use that

626
00:27:43,639 --> 00:27:50,059
one and let's see what happens

627
00:27:45,619 --> 00:27:53,029
spoiler alerts nothing nice so let me

628
00:27:50,059 --> 00:27:55,369
just refresh this and it's supposed to

629
00:27:53,029 --> 00:27:57,769
work but of course something is going on

630
00:27:55,369 --> 00:28:01,610
like what is this is some text area

631
00:27:57,769 --> 00:28:03,200
ex-life Oh jQuery of course like this

632
00:28:01,610 --> 00:28:08,748
application is also using jQuery like

633
00:28:03,200 --> 00:28:10,159
that why do we even write all right this

634
00:28:08,749 --> 00:28:11,989
is this is this is blocking that we

635
00:28:10,159 --> 00:28:13,609
can't do our job like jQuery does

636
00:28:11,989 --> 00:28:16,249
something to the Dom in this particular

637
00:28:13,609 --> 00:28:18,619
example just write some text area for

638
00:28:16,249 --> 00:28:22,029
whatever reason all right but we can fix

639
00:28:18,619 --> 00:28:26,480
this you know how default policy haha

640
00:28:22,029 --> 00:28:27,830
this is recon pilot and in the meantime

641
00:28:26,480 --> 00:28:30,019
I can show you what the default policy

642
00:28:27,830 --> 00:28:33,649
actually looks like so there's a default

643
00:28:30,019 --> 00:28:34,039
policy and let's go maybe from the

644
00:28:33,649 --> 00:28:35,238
bottom

645
00:28:34,039 --> 00:28:36,859
there's default policy simply says

646
00:28:35,239 --> 00:28:39,200
whenever someone wants to create a

647
00:28:36,859 --> 00:28:41,809
trusted script URL a trusted script so

648
00:28:39,200 --> 00:28:44,330
and something that matches eval and

649
00:28:41,809 --> 00:28:47,809
those kind of things just like don't

650
00:28:44,330 --> 00:28:51,609
allow it I like no I don't want Evo

651
00:28:47,809 --> 00:28:54,678
if anything wants to create a script URL

652
00:28:51,609 --> 00:28:56,090
only allow well first of all only I

653
00:28:54,679 --> 00:28:57,950
allow something from the whitelist I

654
00:28:56,090 --> 00:29:01,129
will show you the whities in a second

655
00:28:57,950 --> 00:29:03,379
but also recover try to recover like

656
00:29:01,129 --> 00:29:05,869
report something and and allow something

657
00:29:03,379 --> 00:29:07,340
anyways right so have some amount of

658
00:29:05,869 --> 00:29:10,399
control what's this allowed scripts

659
00:29:07,340 --> 00:29:11,149
records regular expression well that's

660
00:29:10,399 --> 00:29:13,070
this one right

661
00:29:11,149 --> 00:29:15,168
Oh YouTube API just something whatever

662
00:29:13,070 --> 00:29:18,309
like it just loads something using

663
00:29:15,169 --> 00:29:21,289
string whatever we can live with that

664
00:29:18,309 --> 00:29:23,658
now whenever something wants to create a

665
00:29:21,289 --> 00:29:26,059
trusted URL so a URL that is not for

666
00:29:23,659 --> 00:29:29,269
scripts we just like look at the URL

667
00:29:26,059 --> 00:29:29,928
it's okay if it's a CP or a HTTP I'm

668
00:29:29,269 --> 00:29:31,820
fine with it

669
00:29:29,929 --> 00:29:34,009
whatever like no JavaScript it's an

670
00:29:31,820 --> 00:29:37,668
equivalent of a CSP without an saving

671
00:29:34,009 --> 00:29:41,149
line kind of and for HTML well we just

672
00:29:37,669 --> 00:29:43,490
did jQuery workout it turns out that

673
00:29:41,149 --> 00:29:45,768
jQuery just does two things here first

674
00:29:43,490 --> 00:29:46,460
of all it tries to use those constant

675
00:29:45,769 --> 00:29:48,950
payloads here

676
00:29:46,460 --> 00:29:51,110
and also a pillow that is mildly dynamic

677
00:29:48,950 --> 00:29:55,790
but still doesn't cause any XSS issues

678
00:29:51,110 --> 00:29:58,850
so we just only allow jQuery to work and

679
00:29:55,790 --> 00:30:01,909
that's it now how does it look like for

680
00:29:58,850 --> 00:30:04,490
you it's quite small but it still is a

681
00:30:01,910 --> 00:30:05,960
coachman now that's a good thing that

682
00:30:04,490 --> 00:30:08,990
it's a code smell because the default

683
00:30:05,960 --> 00:30:10,820
policy is this ugly workaround that you

684
00:30:08,990 --> 00:30:14,630
need to live with what does it promote

685
00:30:10,820 --> 00:30:16,669
you changing your dependencies or either

686
00:30:14,630 --> 00:30:19,700
fixing them upstream it's easier

687
00:30:16,670 --> 00:30:24,800
actually also ported jQuery but whatever

688
00:30:19,700 --> 00:30:26,210
so you can it promotes you using the

689
00:30:24,800 --> 00:30:28,159
dependencies that are trusted ID

690
00:30:26,210 --> 00:30:30,020
compliant or written in an elegant way

691
00:30:28,160 --> 00:30:33,260
like not speaking to the Dom if they do

692
00:30:30,020 --> 00:30:34,670
not need to for example so we have this

693
00:30:33,260 --> 00:30:42,770
default policy let's see the application

694
00:30:34,670 --> 00:30:44,510
in action yay it works right and it's a

695
00:30:42,770 --> 00:30:47,180
fairly complex application like there's

696
00:30:44,510 --> 00:30:49,310
a lot of Dom interactions going on here

697
00:30:47,180 --> 00:30:52,490
like there's some search button you can

698
00:30:49,310 --> 00:30:54,860
you can play some music yeah that's

699
00:30:52,490 --> 00:30:56,990
probably won't play because the LG is

700
00:30:54,860 --> 00:30:59,600
not connected but you cut the point

701
00:30:56,990 --> 00:31:01,370
right it's all functional like that's

702
00:30:59,600 --> 00:31:04,100
all we needed to do for trusted types

703
00:31:01,370 --> 00:31:06,649
but but was it actually not really like

704
00:31:04,100 --> 00:31:08,689
there's this thing here you remember we

705
00:31:06,650 --> 00:31:10,880
allowed for some subscript URLs like

706
00:31:08,690 --> 00:31:17,000
let's let's let's try to see what's

707
00:31:10,880 --> 00:31:21,430
actually happening here yeah so at one

708
00:31:17,000 --> 00:31:21,430
point our Google Analytics

709
00:31:21,970 --> 00:31:26,690
[Music]

710
00:31:23,190 --> 00:31:29,850
right so as we can see the application

711
00:31:26,690 --> 00:31:34,200
somehow is loading the Google Google

712
00:31:29,850 --> 00:31:36,000
Analytics now thankfully this is your

713
00:31:34,200 --> 00:31:40,050
policy is part of your program so you

714
00:31:36,000 --> 00:31:41,670
can analyze it debug it like developers

715
00:31:40,050 --> 00:31:43,350
do right like just have a debugger

716
00:31:41,670 --> 00:31:45,240
interface and just like see what happens

717
00:31:43,350 --> 00:31:48,330
here in this case we can just explore

718
00:31:45,240 --> 00:31:50,640
the call stack oh yeah indeed there's

719
00:31:48,330 --> 00:31:53,070
some string assignments to dynamically

720
00:31:50,640 --> 00:31:54,540
create a script and it's in the file

721
00:31:53,070 --> 00:32:00,300
that's Google Analytics something

722
00:31:54,540 --> 00:32:03,659
something all right let's go there yeah

723
00:32:00,300 --> 00:32:05,820
that seems like a file No now what's

724
00:32:03,660 --> 00:32:09,000
that thing here like what's the squiggly

725
00:32:05,820 --> 00:32:11,360
line about that's like it looks like

726
00:32:09,000 --> 00:32:14,700
we're doing something wrong all right

727
00:32:11,360 --> 00:32:17,100
and there's this the things that

728
00:32:14,700 --> 00:32:19,500
disappeared yes this thing Oh what is

729
00:32:17,100 --> 00:32:22,379
this resource URL assignment from

730
00:32:19,500 --> 00:32:24,000
strings well actually that's here might

731
00:32:22,380 --> 00:32:25,350
result in script execution and will

732
00:32:24,000 --> 00:32:26,760
trigger trusted type of violation and

733
00:32:25,350 --> 00:32:28,830
runtime well that's exactly what

734
00:32:26,760 --> 00:32:29,220
happened now what is actually going on

735
00:32:28,830 --> 00:32:32,790
here

736
00:32:29,220 --> 00:32:35,250
so because trusted types is is a type of

737
00:32:32,790 --> 00:32:37,530
our API right we have types not just

738
00:32:35,250 --> 00:32:40,830
strings we can just write linter checks

739
00:32:37,530 --> 00:32:42,990
that are based on those types are

740
00:32:40,830 --> 00:32:46,320
looking for the are matching the things

741
00:32:42,990 --> 00:32:48,210
with a proper with the proper types and

742
00:32:46,320 --> 00:32:49,980
just expect the right types to be

743
00:32:48,210 --> 00:32:51,450
assigned to the things and warn the

744
00:32:49,980 --> 00:32:53,780
developer very early that they are doing

745
00:32:51,450 --> 00:32:57,840
something that probably is a bad idea

746
00:32:53,780 --> 00:32:59,670
but not only that we can just fix it all

747
00:32:57,840 --> 00:33:03,570
right so there's some magical function

748
00:32:59,670 --> 00:33:05,670
and let's just import this function now

749
00:33:03,570 --> 00:33:09,330
I have no problem we can save this and

750
00:33:05,670 --> 00:33:10,470
this would work but what I just I'm just

751
00:33:09,330 --> 00:33:12,899
wrapping something in a function that

752
00:33:10,470 --> 00:33:15,390
doesn't seem like it added any security

753
00:33:12,900 --> 00:33:18,810
whatsoever now did it well actually it

754
00:33:15,390 --> 00:33:23,190
kind of did if you take a look at this

755
00:33:18,810 --> 00:33:26,850
thing this particular function is just

756
00:33:23,190 --> 00:33:29,490
using some literal strip URL policy that

757
00:33:26,850 --> 00:33:30,899
seems unsecure because it also doesn't

758
00:33:29,490 --> 00:33:32,790
do any kind of validation but the

759
00:33:30,900 --> 00:33:35,430
validation actually happens from the

760
00:33:32,790 --> 00:33:36,159
from the type annotations here there's a

761
00:33:35,430 --> 00:33:39,070
bit of types

762
00:33:36,160 --> 00:33:41,920
magic thankfully typescript has a pretty

763
00:33:39,070 --> 00:33:44,500
same typing language and what this

764
00:33:41,920 --> 00:33:45,790
typing annotation says is that this

765
00:33:44,500 --> 00:33:48,670
function should only be called with

766
00:33:45,790 --> 00:33:50,260
JavaScript string literals that's it if

767
00:33:48,670 --> 00:33:52,600
those are JavaScript string literals

768
00:33:50,260 --> 00:33:54,850
they cannot possibly controlled by the

769
00:33:52,600 --> 00:33:57,250
attacker let's see what what would

770
00:33:54,850 --> 00:34:00,909
happen if I actually try to do that

771
00:33:57,250 --> 00:34:03,250
right let's try to do location.href here

772
00:34:00,910 --> 00:34:06,880
that's that's clearly a Dom XSS

773
00:34:03,250 --> 00:34:08,260
but what's argument of type string is

774
00:34:06,880 --> 00:34:10,210
not assignable to a parameter of time

775
00:34:08,260 --> 00:34:12,250
nor the string later oh you know

776
00:34:10,210 --> 00:34:16,510
what actually happens this application

777
00:34:12,250 --> 00:34:18,520
didn't compile and of course you can try

778
00:34:16,510 --> 00:34:20,080
to work around it a little bit and at

779
00:34:18,520 --> 00:34:21,429
certain point you will because I mean

780
00:34:20,080 --> 00:34:24,190
it's a linter right you can always

781
00:34:21,429 --> 00:34:26,590
confuse it but the whole point of this

782
00:34:24,190 --> 00:34:29,470
exercise is that it makes writing secure

783
00:34:26,590 --> 00:34:31,780
code easy so we can use for example this

784
00:34:29,469 --> 00:34:34,658
thing template that string is okay but

785
00:34:31,780 --> 00:34:38,409
as soon as we try to interpolate

786
00:34:34,659 --> 00:34:42,159
something it can it doesn't match the

787
00:34:38,409 --> 00:34:46,360
type hence this red squiggly line so

788
00:34:42,159 --> 00:34:50,200
this exemplifies how trusted types by

789
00:34:46,360 --> 00:34:52,330
being typed based API can enable us to

790
00:34:50,199 --> 00:34:53,500
warn the developers very early in the

791
00:34:52,330 --> 00:34:53,889
process that they are doing something

792
00:34:53,500 --> 00:34:56,230
wrong

793
00:34:53,889 --> 00:34:59,080
to embed security very early not at

794
00:34:56,230 --> 00:35:03,250
runtime but you know as you are writing

795
00:34:59,080 --> 00:35:07,890
the code before even deployment and that

796
00:35:03,250 --> 00:35:09,970
I think concludes the demo at least so

797
00:35:07,890 --> 00:35:13,049
we've been doing trusted types for a

798
00:35:09,970 --> 00:35:15,819
couple of months now very intensely

799
00:35:13,050 --> 00:35:18,370
trusted types as an idea was has like

800
00:35:15,820 --> 00:35:21,550
maybe two years but we only started

801
00:35:18,370 --> 00:35:25,390
working on it on it very recently and

802
00:35:21,550 --> 00:35:27,310
what we see in our applications is that

803
00:35:25,390 --> 00:35:31,290
the Dom accessor sinc functions are not

804
00:35:27,310 --> 00:35:35,350
called too often usually you have some

805
00:35:31,290 --> 00:35:38,050
dependencies some of them most of them

806
00:35:35,350 --> 00:35:41,049
are actually easy to migrate to trusted

807
00:35:38,050 --> 00:35:42,670
types so you end up creating policies in

808
00:35:41,050 --> 00:35:44,350
a very few trusted components like your

809
00:35:42,670 --> 00:35:47,020
templating library

810
00:35:44,350 --> 00:35:49,480
a framework like angular like I showed

811
00:35:47,020 --> 00:35:51,310
or the sanitizers these are wheels of

812
00:35:49,480 --> 00:35:53,080
code are usually something that needs a

813
00:35:51,310 --> 00:35:56,200
policy but that also means that

814
00:35:53,080 --> 00:35:57,670
everything else in your codebase doesn't

815
00:35:56,200 --> 00:35:59,710
actually expose your application for the

816
00:35:57,670 --> 00:36:02,350
Dom XSS rest you can just simply ignore

817
00:35:59,710 --> 00:36:03,730
it and pretend it doesn't exist well you

818
00:36:02,350 --> 00:36:05,380
also have other vulnerabilities so you

819
00:36:03,730 --> 00:36:07,800
should review it as well but for Dom XSS

820
00:36:05,380 --> 00:36:11,140
we kind of got it got it covered

821
00:36:07,800 --> 00:36:13,660
there of course are a few misbehaving

822
00:36:11,140 --> 00:36:16,779
dependencies as usual like jQuery in the

823
00:36:13,660 --> 00:36:18,460
example and the code size overhead of

824
00:36:16,780 --> 00:36:20,320
transitive is really negligible like

825
00:36:18,460 --> 00:36:21,970
literally we have the polyfills because

826
00:36:20,320 --> 00:36:23,410
obviously we need to work with the

827
00:36:21,970 --> 00:36:26,799
browsers that do not yet implement the

828
00:36:23,410 --> 00:36:29,470
feature so this tiniest of the polyfill

829
00:36:26,800 --> 00:36:32,050
that's a little bit you know it has some

830
00:36:29,470 --> 00:36:35,290
cave yet but it works it's sixty six

831
00:36:32,050 --> 00:36:37,510
bytes of code so thirty small and we

832
00:36:35,290 --> 00:36:39,040
have ported our core JavaScript library

833
00:36:37,510 --> 00:36:40,690
used in Google and in a lot of

834
00:36:39,040 --> 00:36:42,460
applications called Google closure and

835
00:36:40,690 --> 00:36:45,010
they're the overhead is three hundred

836
00:36:42,460 --> 00:36:49,600
bytes for jobs to binary so already

837
00:36:45,010 --> 00:36:51,400
acceptable for Dom XSS assurance we

838
00:36:49,600 --> 00:36:53,680
think that port porting especially

839
00:36:51,400 --> 00:36:55,750
modern applications is quite easy and we

840
00:36:53,680 --> 00:36:59,680
are already doing that that in Google

841
00:36:55,750 --> 00:37:01,750
applications we again port entity the

842
00:36:59,680 --> 00:37:03,910
core Java code library to trust the

843
00:37:01,750 --> 00:37:05,940
types and now we are working on enabling

844
00:37:03,910 --> 00:37:09,040
the trusted types through the header

845
00:37:05,940 --> 00:37:11,830
with some experiments on our main

846
00:37:09,040 --> 00:37:15,820
application development platform let's

847
00:37:11,830 --> 00:37:17,740
say now what's the project status this

848
00:37:15,820 --> 00:37:20,020
API is available in increment broad

849
00:37:17,740 --> 00:37:22,060
sources a couple of versions we are new

850
00:37:20,020 --> 00:37:24,700
features fixed new box with every

851
00:37:22,060 --> 00:37:26,799
iteration but it's available behind the

852
00:37:24,700 --> 00:37:28,540
behind the flag right so we need to

853
00:37:26,800 --> 00:37:31,500
start chrome of some command line flux

854
00:37:28,540 --> 00:37:34,779
unless you apply for the original token

855
00:37:31,500 --> 00:37:37,120
which enables you to test the

856
00:37:34,780 --> 00:37:40,360
application on on the subset of your

857
00:37:37,120 --> 00:37:42,279
traffic essentially such that your your

858
00:37:40,360 --> 00:37:44,590
customers your users do not have to you

859
00:37:42,280 --> 00:37:47,260
know fiddle with the chrome command line

860
00:37:44,590 --> 00:37:48,970
to to have access to the API we have a

861
00:37:47,260 --> 00:37:51,490
discussion group there's a specification

862
00:37:48,970 --> 00:37:54,129
draft there's lots of polyfills

863
00:37:51,490 --> 00:37:56,229
documentations and issues on our github

864
00:37:54,130 --> 00:37:57,360
repository this is the slide to make you

865
00:37:56,230 --> 00:38:00,360
know

866
00:37:57,360 --> 00:38:01,860
for off and we are working actively on

867
00:38:00,360 --> 00:38:03,690
other thing a trusted types in Google

868
00:38:01,860 --> 00:38:06,300
application because we really really are

869
00:38:03,690 --> 00:38:08,850
excited and see the benefits already of

870
00:38:06,300 --> 00:38:10,590
this approach of course the crucial part

871
00:38:08,850 --> 00:38:12,210
is working on the external integrations

872
00:38:10,590 --> 00:38:17,900
and this is something we are also

873
00:38:12,210 --> 00:38:20,420
pursuing but again we just end

874
00:38:17,900 --> 00:38:23,820
developers and we can't possibly fix

875
00:38:20,420 --> 00:38:26,670
every bit of the JavaScript ecosystem so

876
00:38:23,820 --> 00:38:28,650
we need some help obviously we are

877
00:38:26,670 --> 00:38:30,450
already parted don't unify we've added

878
00:38:28,650 --> 00:38:32,850
some type definitions typescript such

879
00:38:30,450 --> 00:38:33,810
that you can start coding against this

880
00:38:32,850 --> 00:38:35,850
API fairly easily

881
00:38:33,810 --> 00:38:37,470
we've made some trials with angular

882
00:38:35,850 --> 00:38:39,450
applications here's a link to a sample

883
00:38:37,470 --> 00:38:41,520
patch that obviously wouldn't work from

884
00:38:39,450 --> 00:38:44,370
a photo but the link to the slides will

885
00:38:41,520 --> 00:38:47,190
be the last one we're looking at react

886
00:38:44,370 --> 00:38:49,319
more frameworks to come we are working

887
00:38:47,190 --> 00:38:51,630
on the secure policies libraries such

888
00:38:49,320 --> 00:38:54,240
that you know you don't have to figure

889
00:38:51,630 --> 00:38:57,600
out how to sanitize HTML on your own you

890
00:38:54,240 --> 00:39:03,600
can just reuse our know-how in this area

891
00:38:57,600 --> 00:39:05,940
and I think for the first time we have

892
00:39:03,600 --> 00:39:09,210
actually a chance of addressing the Dom

893
00:39:05,940 --> 00:39:13,140
axises problem after what 18 years I

894
00:39:09,210 --> 00:39:16,140
think it's not going to be like a

895
00:39:13,140 --> 00:39:20,250
one-stop solution but I think it's a

896
00:39:16,140 --> 00:39:23,220
fairly reasonable one therefore if I

897
00:39:20,250 --> 00:39:25,590
make do some call to action try trusted

898
00:39:23,220 --> 00:39:27,259
types and let's and Dom XSS together

899
00:39:25,590 --> 00:39:36,200
thank you

900
00:39:27,260 --> 00:39:37,589
[Applause]

901
00:39:36,200 --> 00:39:40,348
all right

902
00:39:37,589 --> 00:39:43,170
the question was policies are created on

903
00:39:40,349 --> 00:39:45,030
a first-come first-served basis will we

904
00:39:43,170 --> 00:39:46,589
see race conditions between secure and

905
00:39:45,030 --> 00:39:50,579
attacker injected policies how to

906
00:39:46,589 --> 00:39:53,040
prevent it yes policies are created on

907
00:39:50,579 --> 00:39:54,180
the first like the first policy wins so

908
00:39:53,040 --> 00:39:55,770
potentially you can have three race

909
00:39:54,180 --> 00:39:57,540
conditions I don't think those would be

910
00:39:55,770 --> 00:39:59,550
race conditions what the attacker code

911
00:39:57,540 --> 00:40:03,180
actually like the malicious code because

912
00:39:59,550 --> 00:40:05,460
you don't have a foothold right if you

913
00:40:03,180 --> 00:40:08,129
are able to already execute the

914
00:40:05,460 --> 00:40:09,270
JavaScript code then we already lost and

915
00:40:08,130 --> 00:40:10,770
the Dom access is the least of your

916
00:40:09,270 --> 00:40:13,200
problems you already have the code

917
00:40:10,770 --> 00:40:17,579
you're already in right so what we might

918
00:40:13,200 --> 00:40:19,078
see is a developer creating or

919
00:40:17,579 --> 00:40:22,170
piggybacking on the policy name and

920
00:40:19,079 --> 00:40:25,410
trying to inject it earlier but that's

921
00:40:22,170 --> 00:40:27,540
something that will just break at

922
00:40:25,410 --> 00:40:29,250
runtime pretty quickly because your

923
00:40:27,540 --> 00:40:31,500
legitimate code will try to create the

924
00:40:29,250 --> 00:40:33,690
policy you know hundred milliseconds

925
00:40:31,500 --> 00:40:35,069
later and then the whole of the

926
00:40:33,690 --> 00:40:37,440
application will just break because of

927
00:40:35,069 --> 00:40:39,569
the type error so it will be pretty a

928
00:40:37,440 --> 00:40:41,640
pretty noisy error and not a good

929
00:40:39,569 --> 00:40:43,259
solution for let's say bypassing the

930
00:40:41,640 --> 00:40:48,629
security restriction your security team

931
00:40:43,260 --> 00:40:52,539
imposed on you all right thank you

932
00:40:48,630 --> 00:40:52,539
[Applause]

