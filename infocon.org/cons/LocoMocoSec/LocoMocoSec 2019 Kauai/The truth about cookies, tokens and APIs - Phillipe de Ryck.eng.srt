1
00:00:00,030 --> 00:00:05,339
let's talk about cookies tokens api's

2
00:00:02,850 --> 00:00:07,589
let's talk about what that means so

3
00:00:05,339 --> 00:00:09,389
essentially this stock is inspired by

4
00:00:07,589 --> 00:00:11,340
something that I often encounter when I

5
00:00:09,389 --> 00:00:13,530
talk to developers so many developers

6
00:00:11,340 --> 00:00:15,870
are building modern web applications and

7
00:00:13,530 --> 00:00:18,060
they should we're building react angular

8
00:00:15,870 --> 00:00:20,669
and angular stuff view or whatever

9
00:00:18,060 --> 00:00:22,380
backed by an API and it's a great way of

10
00:00:20,670 --> 00:00:24,000
doing things and it's an interesting way

11
00:00:22,380 --> 00:00:26,130
of doing things but it also changes a

12
00:00:24,000 --> 00:00:27,630
lot of things one of the things that

13
00:00:26,130 --> 00:00:30,330
people struggle with is how do i do

14
00:00:27,630 --> 00:00:32,159
session management which may even sound

15
00:00:30,330 --> 00:00:35,040
very strange in the context of an api

16
00:00:32,159 --> 00:00:37,230
like sessions that's probably not right

17
00:00:35,040 --> 00:00:38,460
but it's there's no good word for it and

18
00:00:37,230 --> 00:00:40,110
there's no good definition for it and

19
00:00:38,460 --> 00:00:41,879
this is something that I actually see

20
00:00:40,110 --> 00:00:45,090
and the talk is gonna focus on these

21
00:00:41,879 --> 00:00:46,649
struggles developers see them and I

22
00:00:45,090 --> 00:00:49,379
don't have an answer for developers I

23
00:00:46,649 --> 00:00:50,820
have a set of options and each option

24
00:00:49,379 --> 00:00:52,680
has their pros and cons and I'm gonna

25
00:00:50,820 --> 00:00:54,510
lay them out for you and there's a lot

26
00:00:52,680 --> 00:00:56,610
more that plays a role than you might

27
00:00:54,510 --> 00:00:59,250
think because the web is a very complex

28
00:00:56,610 --> 00:01:00,930
and a very place full of subtleties so

29
00:00:59,250 --> 00:01:03,359
I'm gonna talk about that for the next

30
00:01:00,930 --> 00:01:04,949
30 minutes to make sure that we're

31
00:01:03,359 --> 00:01:07,140
absolutely onboard of what we're talking

32
00:01:04,949 --> 00:01:09,360
about this is the old way of doing

33
00:01:07,140 --> 00:01:11,159
things this is what you did before when

34
00:01:09,360 --> 00:01:13,049
you had a web application a browser

35
00:01:11,159 --> 00:01:14,430
running running here

36
00:01:13,049 --> 00:01:16,290
we're cementing a browser running here

37
00:01:14,430 --> 00:01:18,420
making a request to authenticate to a

38
00:01:16,290 --> 00:01:20,820
back-end and you get a cookie in return

39
00:01:18,420 --> 00:01:22,049
very traditional the old way of doing

40
00:01:20,820 --> 00:01:23,580
things whenever you make a call the

41
00:01:22,049 --> 00:01:25,170
browser is gonna send that cookie along

42
00:01:23,580 --> 00:01:26,939
the back end makes an authorization

43
00:01:25,170 --> 00:01:29,790
decision and decides whether it's good

44
00:01:26,939 --> 00:01:31,740
to go or not the modern way of doing

45
00:01:29,790 --> 00:01:33,900
things look something like this we still

46
00:01:31,740 --> 00:01:35,789
use browsers in most cases even mobile

47
00:01:33,900 --> 00:01:38,340
applications usually have a browser

48
00:01:35,790 --> 00:01:39,900
under the hood but that aside so we

49
00:01:38,340 --> 00:01:41,729
still make the call to authenticate but

50
00:01:39,900 --> 00:01:44,579
instead of a cookie we get a token and

51
00:01:41,729 --> 00:01:46,799
that token magically appears on the

52
00:01:44,579 --> 00:01:48,419
request somehow the back end makes

53
00:01:46,799 --> 00:01:51,149
authorization decisions and off it goes

54
00:01:48,420 --> 00:01:52,590
from this picture which is totally

55
00:01:51,149 --> 00:01:54,479
marketing on PowerPoint by the way but

56
00:01:52,590 --> 00:01:56,250
nonetheless this is not a real

57
00:01:54,479 --> 00:01:59,850
architecture but the differences are not

58
00:01:56,250 --> 00:02:02,250
really there if you split out a bit you

59
00:01:59,850 --> 00:02:03,419
can you derive that in the old way of

60
00:02:02,250 --> 00:02:05,369
doing things we had a server-side

61
00:02:03,420 --> 00:02:07,290
session object so we keep something on

62
00:02:05,369 --> 00:02:09,568
the server we refer to that server-side

63
00:02:07,290 --> 00:02:11,190
session object with an ID that ID we put

64
00:02:09,568 --> 00:02:13,869
in a cookie which is stored in a cookie

65
00:02:11,190 --> 00:02:17,379
jar modern applications

66
00:02:13,870 --> 00:02:20,140
often use some client site ident a

67
00:02:17,379 --> 00:02:21,640
session object so in a typical setup as

68
00:02:20,140 --> 00:02:23,829
something you have very often encounter

69
00:02:21,640 --> 00:02:26,048
this would be a JSON web token stored in

70
00:02:23,830 --> 00:02:27,670
something like local storage and sent in

71
00:02:26,049 --> 00:02:30,400
the authorization header with the bearer

72
00:02:27,670 --> 00:02:32,798
type this is the setup the difference

73
00:02:30,400 --> 00:02:34,599
between these are subtle this is not the

74
00:02:32,799 --> 00:02:36,400
only setup this is the two most common

75
00:02:34,599 --> 00:02:38,349
things like the old ways nobody likes in

76
00:02:36,400 --> 00:02:39,790
a new day which a lot of developers like

77
00:02:38,349 --> 00:02:42,640
and I'm going to talk about what this

78
00:02:39,790 --> 00:02:43,989
means in practice in a second first a

79
00:02:42,640 --> 00:02:47,018
small word about myself Jim did a

80
00:02:43,989 --> 00:02:49,450
stellar job introducing me I'm from

81
00:02:47,019 --> 00:02:52,000
Belgium I did a PhD in web security and

82
00:02:49,450 --> 00:02:53,649
I have a I'd like to think that I have a

83
00:02:52,000 --> 00:02:55,690
very broad and very deep understanding

84
00:02:53,650 --> 00:02:57,310
of how the things hook together and what

85
00:02:55,690 --> 00:02:59,319
influences what and I can tell you

86
00:02:57,310 --> 00:03:01,090
that's a very difficult thing to achieve

87
00:02:59,319 --> 00:03:03,069
and that's what I try to explain to

88
00:03:01,090 --> 00:03:04,930
developers and the Google developer

89
00:03:03,069 --> 00:03:06,819
expert which is a recognition by Google

90
00:03:04,930 --> 00:03:08,680
and not employment by Google so I'm very

91
00:03:06,819 --> 00:03:11,768
thankful for that it's for the work I do

92
00:03:08,680 --> 00:03:13,420
for the community teaching talking stuff

93
00:03:11,769 --> 00:03:14,349
like that and of course the second of

94
00:03:13,420 --> 00:03:16,599
course in Belgium

95
00:03:14,349 --> 00:03:18,668
euros right there I highly recommend you

96
00:03:16,599 --> 00:03:20,858
to check it out we have great food at

97
00:03:18,669 --> 00:03:24,760
the course as well and the course itself

98
00:03:20,859 --> 00:03:27,220
is very interesting since about since

99
00:03:24,760 --> 00:03:28,690
about a year I left the University where

100
00:03:27,220 --> 00:03:30,910
our did work for a couple of years after

101
00:03:28,690 --> 00:03:32,950
my PhD and I started my own company

102
00:03:30,910 --> 00:03:34,810
called pragmatic web security and with

103
00:03:32,950 --> 00:03:36,458
that company the main thing I do is

104
00:03:34,810 --> 00:03:38,650
developer training so I travel the world

105
00:03:36,459 --> 00:03:40,930
I go wherever your developers are and I

106
00:03:38,650 --> 00:03:42,489
teach them about how to build secure

107
00:03:40,930 --> 00:03:43,780
software and I don't teach textbook

108
00:03:42,489 --> 00:03:45,730
examples like thesis cross-site

109
00:03:43,780 --> 00:03:47,949
scripting and that's the fix I help them

110
00:03:45,730 --> 00:03:49,358
to understand the problem because in my

111
00:03:47,949 --> 00:03:51,280
opinion the most important thing you can

112
00:03:49,359 --> 00:03:53,530
teach the developer is to recognize the

113
00:03:51,280 --> 00:03:54,489
problem even in different contexts so if

114
00:03:53,530 --> 00:03:56,019
it doesn't look like the textbook

115
00:03:54,489 --> 00:03:58,120
example if you still know like whoa this

116
00:03:56,019 --> 00:04:00,519
is a problem because it looks like that

117
00:03:58,120 --> 00:04:03,069
that is when you start achieving real

118
00:04:00,519 --> 00:04:06,819
results alright enough about me let's

119
00:04:03,069 --> 00:04:08,858
talk about api's and cookies and tokens

120
00:04:06,819 --> 00:04:12,339
and so on answer so one of the first

121
00:04:08,859 --> 00:04:14,500
things I want to point out is that your

122
00:04:12,340 --> 00:04:16,418
deployment scenario really matter so if

123
00:04:14,500 --> 00:04:17,560
you have an application you have a

124
00:04:16,418 --> 00:04:19,329
couple of clients you have a few

125
00:04:17,560 --> 00:04:20,738
back-end services honestly if you're

126
00:04:19,329 --> 00:04:22,360
building something that looks like this

127
00:04:20,738 --> 00:04:23,500
on your architecture diagram you

128
00:04:22,360 --> 00:04:25,930
probably get away with a stateful

129
00:04:23,500 --> 00:04:26,690
back-end which is maybe a very unpopular

130
00:04:25,930 --> 00:04:28,490
opinion

131
00:04:26,690 --> 00:04:30,440
but I think countered plenty of

132
00:04:28,490 --> 00:04:31,880
developers that have shifted to angular

133
00:04:30,440 --> 00:04:34,100
and started doing some stateless

134
00:04:31,880 --> 00:04:35,990
backends and afterwards after a couple

135
00:04:34,100 --> 00:04:38,540
of months a year two years they're like

136
00:04:35,990 --> 00:04:40,550
why did we do that we only have a few

137
00:04:38,540 --> 00:04:42,140
hundred users and we actually knew how

138
00:04:40,550 --> 00:04:44,900
to handle sticky sessions or session

139
00:04:42,140 --> 00:04:46,490
replication and this works quite well so

140
00:04:44,900 --> 00:04:48,200
for most of you this probably doesn't

141
00:04:46,490 --> 00:04:49,970
hold but for many people for many

142
00:04:48,200 --> 00:04:51,740
internal systems this actually does work

143
00:04:49,970 --> 00:04:53,570
so if you have a developer that has been

144
00:04:51,740 --> 00:04:56,090
doing something for 20 years and knows

145
00:04:53,570 --> 00:04:57,890
how to do it well keep doing it it

146
00:04:56,090 --> 00:04:59,960
actually works really well with other

147
00:04:57,890 --> 00:05:01,340
systems as well however if you're doing

148
00:04:59,960 --> 00:05:03,260
something like this then you probably

149
00:05:01,340 --> 00:05:04,700
might benefit from kind of a stateless

150
00:05:03,260 --> 00:05:06,800
back-end it's probably gonna be a rest

151
00:05:04,700 --> 00:05:08,450
back-end and so on so we don't need to

152
00:05:06,800 --> 00:05:10,220
debate this I just wanted to point out

153
00:05:08,450 --> 00:05:12,020
that the old way of doing things

154
00:05:10,220 --> 00:05:14,450
keeping state on the server is not

155
00:05:12,020 --> 00:05:15,590
necessarily a bad thing brings me to the

156
00:05:14,450 --> 00:05:16,909
first takeaway I have a couple of

157
00:05:15,590 --> 00:05:19,630
takeaways throughout the presentation

158
00:05:16,910 --> 00:05:22,280
don't overthink statelessness

159
00:05:19,630 --> 00:05:24,260
yes statelessness might be important and

160
00:05:22,280 --> 00:05:26,900
yes there are different degrees and I

161
00:05:24,260 --> 00:05:29,330
don't advocate to have like a request

162
00:05:26,900 --> 00:05:31,070
that changes its results arbitrarily

163
00:05:29,330 --> 00:05:33,380
based on some state on a server but

164
00:05:31,070 --> 00:05:34,969
keeping track of authorization state in

165
00:05:33,380 --> 00:05:36,830
a server side session object there's

166
00:05:34,970 --> 00:05:39,200
nothing wrong with that yes it's not a

167
00:05:36,830 --> 00:05:40,669
pure REST API but the company's called

168
00:05:39,200 --> 00:05:44,330
pragmatic web security because I don't

169
00:05:40,670 --> 00:05:46,310
talk about the purity arguments I talk

170
00:05:44,330 --> 00:05:49,789
about practical things and this actually

171
00:05:46,310 --> 00:05:52,250
does work in practice all right back to

172
00:05:49,790 --> 00:05:54,590
back to the old way and a new way so the

173
00:05:52,250 --> 00:05:56,000
old way cookie header identifiers you

174
00:05:54,590 --> 00:05:57,469
have some random session ID in there

175
00:05:56,000 --> 00:06:00,080
pointing to a server-side session object

176
00:05:57,470 --> 00:06:01,430
the new way of doing things is you have

177
00:06:00,080 --> 00:06:02,930
the authorization header and you have

178
00:06:01,430 --> 00:06:06,050
some kind of a token in there

179
00:06:02,930 --> 00:06:07,940
this is often this this slide represents

180
00:06:06,050 --> 00:06:10,250
kind of a frustration for me a pet peeve

181
00:06:07,940 --> 00:06:13,460
people often talk about cookies versus

182
00:06:10,250 --> 00:06:15,680
tokens which is they mean this versus

183
00:06:13,460 --> 00:06:17,239
this they mean keeping track of State on

184
00:06:15,680 --> 00:06:18,950
the server versus keeping track of it

185
00:06:17,240 --> 00:06:21,169
somewhat on the client and using the

186
00:06:18,950 --> 00:06:24,349
authorization header to handle that this

187
00:06:21,169 --> 00:06:25,729
comparison makes no sense and I know

188
00:06:24,350 --> 00:06:27,230
people that know that it actually

189
00:06:25,730 --> 00:06:29,120
doesn't really make sense and they keep

190
00:06:27,230 --> 00:06:31,190
calling it cookies versus tokens which

191
00:06:29,120 --> 00:06:34,280
creates more confusion than you might

192
00:06:31,190 --> 00:06:37,430
think because why not put a token in a

193
00:06:34,280 --> 00:06:39,530
cookie or put an identifier in the

194
00:06:37,430 --> 00:06:40,280
authorization header that gives us two

195
00:06:39,530 --> 00:06:43,219
more options which

196
00:06:40,280 --> 00:06:45,440
is pretty awesome and this is the the

197
00:06:43,220 --> 00:06:48,260
real problem that many people struggle

198
00:06:45,440 --> 00:06:49,790
with cookies and tokens are two

199
00:06:48,260 --> 00:06:51,469
different things cookies are a storage

200
00:06:49,790 --> 00:06:54,500
mechanism in a browser and a transport

201
00:06:51,470 --> 00:06:56,210
mechanism on HTTP and the authorization

202
00:06:54,500 --> 00:06:57,770
header is also a transport mechanism and

203
00:06:56,210 --> 00:07:00,530
what you put in there is something

204
00:06:57,770 --> 00:07:02,299
completely different whether you put an

205
00:07:00,530 --> 00:07:04,070
identifier or a token or whatever in

206
00:07:02,300 --> 00:07:05,720
there that's a different question and

207
00:07:04,070 --> 00:07:09,139
actually that's the least challenging

208
00:07:05,720 --> 00:07:11,720
part of some of these things so to make

209
00:07:09,139 --> 00:07:13,070
I saw some people laugh when I present

210
00:07:11,720 --> 00:07:14,840
at the other options because they look

211
00:07:13,070 --> 00:07:16,520
silly right if I present you like hey

212
00:07:14,840 --> 00:07:18,320
let's put a session ID in a bear it's

213
00:07:16,520 --> 00:07:21,830
like no man nobody does that

214
00:07:18,320 --> 00:07:23,930
however if you're using something like

215
00:07:21,830 --> 00:07:25,550
oh I'd you probably are doing that you

216
00:07:23,930 --> 00:07:26,870
maybe don't realize it that you're doing

217
00:07:25,550 --> 00:07:28,160
that but that's essentially what's

218
00:07:26,870 --> 00:07:31,100
happening let me give you a very quick

219
00:07:28,160 --> 00:07:33,080
overview of what this is a high I don't

220
00:07:31,100 --> 00:07:34,729
know if Daniel fat is in the room this

221
00:07:33,080 --> 00:07:36,740
is not an accurate representation of

222
00:07:34,729 --> 00:07:39,020
what he did a much better job doing that

223
00:07:36,740 --> 00:07:40,820
I just need a few architectural

224
00:07:39,020 --> 00:07:42,590
components to show you one example so

225
00:07:40,820 --> 00:07:44,990
what you want to do with a lot is the

226
00:07:42,590 --> 00:07:47,210
user wants to access a resource here - a

227
00:07:44,990 --> 00:07:48,590
client application so there's something

228
00:07:47,210 --> 00:07:50,570
going on the client is going to do some

229
00:07:48,590 --> 00:07:52,729
complicated redirect flow with the

230
00:07:50,570 --> 00:07:54,200
browser of the user and this might be an

231
00:07:52,729 --> 00:07:56,270
application in the browser this is just

232
00:07:54,200 --> 00:07:57,650
a vanilla page in the browser so there's

233
00:07:56,270 --> 00:07:59,090
gonna be some redirect flow and

234
00:07:57,650 --> 00:08:00,620
eventually the user is gonna

235
00:07:59,090 --> 00:08:02,810
authenticate to the authorization server

236
00:08:00,620 --> 00:08:05,090
one way or another and approve the

237
00:08:02,810 --> 00:08:07,210
application to access this resource on

238
00:08:05,090 --> 00:08:09,710
the behalf of the user very proud of

239
00:08:07,210 --> 00:08:11,750
when that happens you get an

240
00:08:09,710 --> 00:08:13,669
authorization code we saw that a couple

241
00:08:11,750 --> 00:08:14,960
of days ago the authorization code gets

242
00:08:13,669 --> 00:08:17,270
propagated to the client and the client

243
00:08:14,960 --> 00:08:19,190
uses that to request an access token

244
00:08:17,270 --> 00:08:21,890
from the authorization server and this

245
00:08:19,190 --> 00:08:23,600
access token the word says itself token

246
00:08:21,890 --> 00:08:26,300
this is what the client is going to use

247
00:08:23,600 --> 00:08:30,320
to access the protected resource one way

248
00:08:26,300 --> 00:08:32,299
or another this access token represents

249
00:08:30,320 --> 00:08:34,010
Authority the resource server is going

250
00:08:32,299 --> 00:08:35,900
to use that to make an authorization

251
00:08:34,010 --> 00:08:37,580
decision the resource server is going to

252
00:08:35,900 --> 00:08:39,829
look at that token like who the hell are

253
00:08:37,580 --> 00:08:40,820
you oh yeah I know who you are yeah

254
00:08:39,830 --> 00:08:43,099
you're allowed to access this resource

255
00:08:40,820 --> 00:08:45,020
go ahead and that's what's happening

256
00:08:43,099 --> 00:08:47,750
there there's two ways of doing that and

257
00:08:45,020 --> 00:08:49,370
watch this if it looks like this then

258
00:08:47,750 --> 00:08:51,920
the access token is a self-contained

259
00:08:49,370 --> 00:08:53,390
token and in all our terms today that

260
00:08:51,920 --> 00:08:55,400
means it's a job that

261
00:08:53,390 --> 00:08:57,590
some web token sign by the authorization

262
00:08:55,400 --> 00:08:59,600
server containing a set of claims about

263
00:08:57,590 --> 00:09:01,670
who's making this access this is the

264
00:08:59,600 --> 00:09:03,620
traditional or this is what what's

265
00:09:01,670 --> 00:09:06,469
common understood on under using a token

266
00:09:03,620 --> 00:09:09,050
to access a resource but all out has a

267
00:09:06,470 --> 00:09:10,610
second mechanism a lot supports

268
00:09:09,050 --> 00:09:13,930
something called reference tokens and a

269
00:09:10,610 --> 00:09:16,820
reference token this token is a random

270
00:09:13,930 --> 00:09:19,010
string it means nothing to the resource

271
00:09:16,820 --> 00:09:21,230
server the resource server instead has

272
00:09:19,010 --> 00:09:22,880
to go here with that token and ask like

273
00:09:21,230 --> 00:09:25,490
hey man I got this from the client what

274
00:09:22,880 --> 00:09:27,410
the hell is this and the authorization

275
00:09:25,490 --> 00:09:29,150
server is like oh yeah I know this

276
00:09:27,410 --> 00:09:31,850
reference token I generated that before

277
00:09:29,150 --> 00:09:34,100
it actually represents the data that we

278
00:09:31,850 --> 00:09:36,800
have here so it represents it's still

279
00:09:34,100 --> 00:09:38,300
active it represents a client and you

280
00:09:36,800 --> 00:09:39,620
can use that to make your authorization

281
00:09:38,300 --> 00:09:41,599
decision an authorization decision

282
00:09:39,620 --> 00:09:44,360
happens one step later before the

283
00:09:41,600 --> 00:09:46,220
response is returned and this is a very

284
00:09:44,360 --> 00:09:47,720
good illustration of why this whole

285
00:09:46,220 --> 00:09:49,310
discussion between cookies and tokens

286
00:09:47,720 --> 00:09:51,140
doesn't make sense you have to

287
00:09:49,310 --> 00:09:54,770
distinguish between a mechanism and the

288
00:09:51,140 --> 00:09:56,300
value that's important and the value can

289
00:09:54,770 --> 00:09:58,160
either be the value represents how

290
00:09:56,300 --> 00:10:00,920
you're handling this is it can refer to

291
00:09:58,160 --> 00:10:02,930
some server-side state regardless of

292
00:10:00,920 --> 00:10:05,240
where it's kept or it can be a

293
00:10:02,930 --> 00:10:07,339
self-contained token such as a JSON web

294
00:10:05,240 --> 00:10:08,780
token containing a set of claims but how

295
00:10:07,340 --> 00:10:10,520
you transport that and how you store

296
00:10:08,780 --> 00:10:12,949
that is completely separate from what it

297
00:10:10,520 --> 00:10:14,000
actually represents and in the rest of

298
00:10:12,950 --> 00:10:16,370
this talk I'm not going to talk about

299
00:10:14,000 --> 00:10:18,560
what it represents not about a value but

300
00:10:16,370 --> 00:10:20,480
about the mechanisms but how you store

301
00:10:18,560 --> 00:10:21,770
values in the browser the implications

302
00:10:20,480 --> 00:10:26,270
of that and how you transport them back

303
00:10:21,770 --> 00:10:29,540
to the server all right one of the first

304
00:10:26,270 --> 00:10:31,130
things we need to talk about is one of

305
00:10:29,540 --> 00:10:33,500
the major differences between cookies

306
00:10:31,130 --> 00:10:35,300
and the authorization header so this is

307
00:10:33,500 --> 00:10:37,160
how stuff gets transported back we have

308
00:10:35,300 --> 00:10:39,260
two scenarios keep in mind this is not

309
00:10:37,160 --> 00:10:42,020
the slide about statefulness and

310
00:10:39,260 --> 00:10:43,400
statelessness this is just clients

311
00:10:42,020 --> 00:10:45,740
sending something to the backend with

312
00:10:43,400 --> 00:10:47,720
cookies or with an authorization header

313
00:10:45,740 --> 00:10:50,330
cookies are handled by the browser the

314
00:10:47,720 --> 00:10:53,210
browser does that for you which is kind

315
00:10:50,330 --> 00:10:54,830
of nice in certain cases so one of the

316
00:10:53,210 --> 00:10:56,630
implications of that is because the

317
00:10:54,830 --> 00:10:58,610
browser handles them the browser decides

318
00:10:56,630 --> 00:11:00,680
when to send the cookie and cookies are

319
00:10:58,610 --> 00:11:02,240
associated with domains so if you want

320
00:11:00,680 --> 00:11:04,609
to use cookies there or if you are using

321
00:11:02,240 --> 00:11:06,670
cookies there it only works well if you

322
00:11:04,610 --> 00:11:09,130
have your API or your back-end

323
00:11:06,670 --> 00:11:10,839
since running an on one domain so domain

324
00:11:09,130 --> 00:11:12,670
white cookies are no longer recommended

325
00:11:10,840 --> 00:11:13,870
and cookies sharing cookies across

326
00:11:12,670 --> 00:11:16,000
domains is not a feature that's

327
00:11:13,870 --> 00:11:17,470
supported in browsers you can make it

328
00:11:16,000 --> 00:11:20,290
work but it's very dirty and very hacky

329
00:11:17,470 --> 00:11:21,880
so it's probably not the way to go if

330
00:11:20,290 --> 00:11:23,410
you're using the authorization header

331
00:11:21,880 --> 00:11:26,350
you have flexibility you have more

332
00:11:23,410 --> 00:11:28,870
options so the authorization header is

333
00:11:26,350 --> 00:11:30,520
added by your applications so your

334
00:11:28,870 --> 00:11:32,230
angular application will have a piece of

335
00:11:30,520 --> 00:11:33,670
code to add the authorization header to

336
00:11:32,230 --> 00:11:36,040
an outgoing request and I'll come to

337
00:11:33,670 --> 00:11:37,449
that in a second and because of that you

338
00:11:36,040 --> 00:11:39,310
are flexible you can do whatever you

339
00:11:37,450 --> 00:11:42,490
want so if you want to send it to

340
00:11:39,310 --> 00:11:45,339
different domains why not you decide

341
00:11:42,490 --> 00:11:47,440
which is pretty awesome so that's one of

342
00:11:45,340 --> 00:11:49,060
the the consequences here your

343
00:11:47,440 --> 00:11:51,070
deployment scenario of whether you're

344
00:11:49,060 --> 00:11:52,510
deploying stuff in one domain or on

345
00:11:51,070 --> 00:11:54,400
different domains is going to heavily

346
00:11:52,510 --> 00:11:55,870
influence the decision that you're gonna

347
00:11:54,400 --> 00:11:58,660
make on how to transport this

348
00:11:55,870 --> 00:12:00,430
information if you're using multiple

349
00:11:58,660 --> 00:12:02,380
domains cookies are probably not a good

350
00:12:00,430 --> 00:12:04,209
option and you'll have to deal with the

351
00:12:02,380 --> 00:12:06,490
subtleties of the authorization header

352
00:12:04,210 --> 00:12:08,290
of course if you really strongly feel

353
00:12:06,490 --> 00:12:10,210
about one way or the other that might

354
00:12:08,290 --> 00:12:13,050
again influence your deployment as well

355
00:12:10,210 --> 00:12:15,550
so these things definitely matter

356
00:12:13,050 --> 00:12:17,380
alright our transition enter let's let's

357
00:12:15,550 --> 00:12:19,540
talk about that in a bit more detail

358
00:12:17,380 --> 00:12:21,070
like I said your angular or your

359
00:12:19,540 --> 00:12:23,800
front-end application your browser-based

360
00:12:21,070 --> 00:12:26,440
application will have to handle whatever

361
00:12:23,800 --> 00:12:28,060
you're sending the ID or token reference

362
00:12:26,440 --> 00:12:29,410
token self-contained token whatever

363
00:12:28,060 --> 00:12:30,760
you're sending the browser will the

364
00:12:29,410 --> 00:12:33,250
application will have to handle that so

365
00:12:30,760 --> 00:12:35,200
you need go to do that one of the

366
00:12:33,250 --> 00:12:36,700
aspects of handling that means storing

367
00:12:35,200 --> 00:12:38,950
it somewhere so they actually have it

368
00:12:36,700 --> 00:12:42,100
when you need to send it and a common

369
00:12:38,950 --> 00:12:45,820
place to put that is local storage look

370
00:12:42,100 --> 00:12:48,010
at a hundred tutorials 99 or 100 are

371
00:12:45,820 --> 00:12:49,540
gonna say put in a local storage what

372
00:12:48,010 --> 00:12:50,350
does this mean well local storage is an

373
00:12:49,540 --> 00:12:53,410
area in the browser

374
00:12:50,350 --> 00:12:56,470
that is isolated per origin so if you

375
00:12:53,410 --> 00:12:59,020
have an Origin HTTP example.com and port

376
00:12:56,470 --> 00:13:01,150
443 that's an origin that's represented

377
00:12:59,020 --> 00:13:03,460
by the orange one here code running in

378
00:13:01,150 --> 00:13:04,959
the orange context has the or orange

379
00:13:03,460 --> 00:13:07,000
origin and will be able to access this

380
00:13:04,960 --> 00:13:09,300
local search area if you have a separate

381
00:13:07,000 --> 00:13:11,950
browser window same browser of course

382
00:13:09,300 --> 00:13:14,020
page from the same origin has access to

383
00:13:11,950 --> 00:13:15,460
the same local storage area if it's

384
00:13:14,020 --> 00:13:17,470
another origin the blue one

385
00:13:15,460 --> 00:13:19,210
it will not have access to that storage

386
00:13:17,470 --> 00:13:21,339
area it will have access to its own area

387
00:13:19,210 --> 00:13:23,710
with its own origin but not the one from

388
00:13:21,339 --> 00:13:25,660
the orange origin however if you load

389
00:13:23,710 --> 00:13:27,790
frames in here for example again this

390
00:13:25,660 --> 00:13:29,850
complex has the orange origin it will be

391
00:13:27,790 --> 00:13:32,529
able to access that local storage area

392
00:13:29,850 --> 00:13:34,660
there's a little brother to local search

393
00:13:32,529 --> 00:13:37,209
called session storage a session storage

394
00:13:34,660 --> 00:13:39,430
is a bit more restrictive so in session

395
00:13:37,209 --> 00:13:41,410
storage scenarios you still have the

396
00:13:39,430 --> 00:13:43,089
origin based separation but there's a

397
00:13:41,410 --> 00:13:45,640
second thing that matters and that's the

398
00:13:43,089 --> 00:13:47,440
window and it's children so essentially

399
00:13:45,640 --> 00:13:49,959
this one the orange one has access to

400
00:13:47,440 --> 00:13:51,910
this session storage area if it opens a

401
00:13:49,959 --> 00:13:54,010
pop-up that for example opens in a new

402
00:13:51,910 --> 00:13:56,529
tab that one will have access to the

403
00:13:54,010 --> 00:13:57,910
same session storage area however if the

404
00:13:56,529 --> 00:14:00,250
user opens a completely unrelated

405
00:13:57,910 --> 00:14:03,130
browser window navigates to the site

406
00:14:00,250 --> 00:14:04,690
again that side even though it has the

407
00:14:03,130 --> 00:14:06,760
orange origin is not related to this

408
00:14:04,690 --> 00:14:09,010
settle window so it will not have access

409
00:14:06,760 --> 00:14:10,959
to session storage there it will have

410
00:14:09,010 --> 00:14:13,360
access to its own session storage area

411
00:14:10,959 --> 00:14:16,719
associated with this window and its

412
00:14:13,360 --> 00:14:19,140
children this is one of the common ways

413
00:14:16,720 --> 00:14:21,160
of setting things up when storing values

414
00:14:19,140 --> 00:14:24,069
I'm gonna give a more detailed

415
00:14:21,160 --> 00:14:26,560
comparison in a couple of slides there's

416
00:14:24,070 --> 00:14:29,230
one problem with this image that many

417
00:14:26,560 --> 00:14:31,290
people recognize like yeah this is all

418
00:14:29,230 --> 00:14:33,190
fine and it will work but what if

419
00:14:31,290 --> 00:14:35,230
something goes wrong what if the

420
00:14:33,190 --> 00:14:35,770
attacker gets a foothold in one of these

421
00:14:35,230 --> 00:14:38,350
pages

422
00:14:35,770 --> 00:14:39,640
this is cross-site scripting if the

423
00:14:38,350 --> 00:14:41,830
attacker gets a foothold he'll be able

424
00:14:39,640 --> 00:14:43,390
to read my local storage get my whatever

425
00:14:41,830 --> 00:14:46,029
talk and ship it off somewhere else and

426
00:14:43,390 --> 00:14:48,880
abuse that for all kinds of nefarious

427
00:14:46,029 --> 00:14:52,000
purposes and that's a very true

428
00:14:48,880 --> 00:14:53,830
observation so how do you handle that

429
00:14:52,000 --> 00:14:55,480
well don't have cross-site scripting

430
00:14:53,830 --> 00:14:58,390
that's step number one

431
00:14:55,480 --> 00:15:00,400
but I think we saw yesterday I believe

432
00:14:58,390 --> 00:15:03,760
are two days ago that that's really

433
00:15:00,400 --> 00:15:05,709
really really hard so some people are

434
00:15:03,760 --> 00:15:08,709
suggesting yeah but what if we use

435
00:15:05,709 --> 00:15:11,050
cookies for that because this course our

436
00:15:08,709 --> 00:15:13,899
scripting that's a big problem so what

437
00:15:11,050 --> 00:15:16,149
if we had something that we could use to

438
00:15:13,899 --> 00:15:17,740
identify a requester without risking

439
00:15:16,149 --> 00:15:21,579
cross-site scripting and that something

440
00:15:17,740 --> 00:15:23,040
is called HTTP only cookies and they're

441
00:15:21,579 --> 00:15:26,130
not very secure

442
00:15:23,040 --> 00:15:26,130
[Applause]

443
00:15:26,570 --> 00:15:32,279
because it's the only cookies address

444
00:15:29,430 --> 00:15:34,560
one specific consequence of a cross-site

445
00:15:32,279 --> 00:15:36,270
scripting attack they hide a value in a

446
00:15:34,560 --> 00:15:37,890
cookie from JavaScript they tell the

447
00:15:36,270 --> 00:15:41,189
browser this cookie should never ever be

448
00:15:37,890 --> 00:15:42,390
seen by JavaScript wait wait a second to

449
00:15:41,190 --> 00:15:43,680
take a picture because there's gonna be

450
00:15:42,390 --> 00:15:48,240
a second line at the bottom that

451
00:15:43,680 --> 00:15:50,279
actually matters but that's HTTP only

452
00:15:48,240 --> 00:15:51,600
cookies and yes you can hide them but

453
00:15:50,279 --> 00:15:53,040
the real problem is you still have a

454
00:15:51,600 --> 00:15:54,690
cross-site scripting vulnerability and

455
00:15:53,040 --> 00:15:57,420
the attacker can inject whatever script

456
00:15:54,690 --> 00:15:58,800
you once and yes may be a very simple

457
00:15:57,420 --> 00:16:00,240
script kiddie like attacker will not be

458
00:15:58,800 --> 00:16:01,469
able to extract that value but a real

459
00:16:00,240 --> 00:16:03,510
attacker will be able to send whatever

460
00:16:01,470 --> 00:16:05,339
he wants to the back-end change the Dom

461
00:16:03,510 --> 00:16:08,670
change the behavior of the application

462
00:16:05,339 --> 00:16:12,180
trick the user whatever you want with

463
00:16:08,670 --> 00:16:15,479
that set it's P only is still useful it

464
00:16:12,180 --> 00:16:17,939
matters it has very tiny benefits yes

465
00:16:15,480 --> 00:16:19,649
Jim it does in the in the PDF of the

466
00:16:17,940 --> 00:16:22,290
slides there's by the way an extra slide

467
00:16:19,649 --> 00:16:24,720
explaining this in a bit more detail but

468
00:16:22,290 --> 00:16:27,029
it's not useful in the Nexus S context

469
00:16:24,720 --> 00:16:31,589
that's what I want to say about it

470
00:16:27,029 --> 00:16:32,790
yes it's P only works well if you want

471
00:16:31,589 --> 00:16:34,709
to details it works if you have

472
00:16:32,790 --> 00:16:36,540
domain-based cookies it works against

473
00:16:34,709 --> 00:16:38,910
certain attacks that's one thing that

474
00:16:36,540 --> 00:16:40,349
can help serve the name-based session

475
00:16:38,910 --> 00:16:41,910
hijacking for example and it helps

476
00:16:40,350 --> 00:16:43,230
against specter and meltdown attacks

477
00:16:41,910 --> 00:16:45,540
where they steal stuff from memory

478
00:16:43,230 --> 00:16:47,490
through some God knows how these things

479
00:16:45,540 --> 00:16:49,560
work with there's some complicated

480
00:16:47,490 --> 00:16:51,390
attacks and it's the only works there if

481
00:16:49,560 --> 00:16:53,250
your browser supports it so chrome for

482
00:16:51,390 --> 00:16:54,720
example and if a cookies Marcus it's

483
00:16:53,250 --> 00:16:56,520
fueled will not put it into the

484
00:16:54,720 --> 00:16:58,440
rendering process so it's not available

485
00:16:56,520 --> 00:17:00,329
in memory in the rendering process only

486
00:16:58,440 --> 00:17:02,640
in the networking process and because of

487
00:17:00,330 --> 00:17:05,520
that it's somewhat more protected so it

488
00:17:02,640 --> 00:17:06,900
helps but not in the context of

489
00:17:05,520 --> 00:17:10,230
cross-site scripting or stealing stuff

490
00:17:06,900 --> 00:17:11,579
from a browsing context again the PDF of

491
00:17:10,230 --> 00:17:13,589
the slides is on Twitter and you're

492
00:17:11,579 --> 00:17:15,448
gonna put it on scat as well and there

493
00:17:13,589 --> 00:17:18,149
is a slight detailing this in a bit more

494
00:17:15,449 --> 00:17:21,270
words so if you want to compare these

495
00:17:18,150 --> 00:17:23,970
things we have four potential storage

496
00:17:21,270 --> 00:17:25,889
areas local storage session storage you

497
00:17:23,970 --> 00:17:28,530
can keep it in memory if you want and

498
00:17:25,890 --> 00:17:30,030
you can put it in a cookie so what does

499
00:17:28,530 --> 00:17:32,820
this mean in detail well first of all

500
00:17:30,030 --> 00:17:36,090
all of them survive page reloads except

501
00:17:32,820 --> 00:17:37,720
in memory so in memory is probably I'm

502
00:17:36,090 --> 00:17:39,100
gonna come to that in a second

503
00:17:37,720 --> 00:17:40,750
in the next points but it's probably the

504
00:17:39,100 --> 00:17:43,090
most secure way of doing things because

505
00:17:40,750 --> 00:17:44,740
you can fully hide things you can

506
00:17:43,090 --> 00:17:47,350
guarantee some security properties there

507
00:17:44,740 --> 00:17:49,629
but if the user hits f5 or command R or

508
00:17:47,350 --> 00:17:53,230
whatever it's gone so it's probably not

509
00:17:49,629 --> 00:17:55,090
very usable in practice local storage is

510
00:17:53,230 --> 00:17:57,340
available to the entire origin session

511
00:17:55,090 --> 00:18:00,129
storage origin and window and its

512
00:17:57,340 --> 00:18:02,139
children in memory is wherever you want

513
00:18:00,129 --> 00:18:04,418
it you can fully you get it's only

514
00:18:02,139 --> 00:18:05,889
available to running code and cookies if

515
00:18:04,419 --> 00:18:09,850
you mark them as HP only only on

516
00:18:05,889 --> 00:18:11,199
outgoing requests this means that local

517
00:18:09,850 --> 00:18:13,090
storage can not be shielded from

518
00:18:11,200 --> 00:18:15,250
malicious code there's simply no way to

519
00:18:13,090 --> 00:18:16,720
do that if you have access to the script

520
00:18:15,250 --> 00:18:18,070
or scripting context if you can run

521
00:18:16,720 --> 00:18:20,019
script code you can read local storage

522
00:18:18,070 --> 00:18:21,789
session storage is a bit trickier

523
00:18:20,019 --> 00:18:24,039
because you need to run the code in the

524
00:18:21,789 --> 00:18:26,100
actual window and it's or one of its

525
00:18:24,039 --> 00:18:29,379
children so it's a bit more constrained

526
00:18:26,100 --> 00:18:31,449
in memory can be shielded it's very

527
00:18:29,379 --> 00:18:33,070
tricky to do that in JavaScript but if

528
00:18:31,450 --> 00:18:36,669
you really want to you could do that and

529
00:18:33,070 --> 00:18:40,149
cookies can be shielded as well but none

530
00:18:36,669 --> 00:18:41,649
of those prevent abuse in the presence

531
00:18:40,149 --> 00:18:43,629
of cross-site scripting and that's why

532
00:18:41,649 --> 00:18:45,668
none of this actually matters if you

533
00:18:43,629 --> 00:18:47,408
have cross-site scripting and the

534
00:18:45,669 --> 00:18:48,970
discussion of yeah should I put it here

535
00:18:47,409 --> 00:18:51,190
or there because if an attacker can do

536
00:18:48,970 --> 00:18:52,809
crud an XSS attack he might be able to

537
00:18:51,190 --> 00:18:54,490
read that honestly it doesn't matter

538
00:18:52,809 --> 00:18:57,070
don't underestimate cross-site scripting

539
00:18:54,490 --> 00:19:00,639
you are screwed if somebody has a

540
00:18:57,070 --> 00:19:02,080
foothold in your application this is

541
00:19:00,639 --> 00:19:03,729
important because sometimes you see

542
00:19:02,080 --> 00:19:06,039
security guidelines saying don't put

543
00:19:03,730 --> 00:19:08,139
something in local storage but if it

544
00:19:06,039 --> 00:19:09,669
works best if it saves you time on

545
00:19:08,139 --> 00:19:11,139
development and the only argument is

546
00:19:09,669 --> 00:19:13,769
yeah but cross-site scripting can read

547
00:19:11,139 --> 00:19:17,229
it I don't think it's valid arguments

548
00:19:13,769 --> 00:19:20,950
all right so we have all of these

549
00:19:17,230 --> 00:19:23,980
options for storage and it also impacts

550
00:19:20,950 --> 00:19:29,200
transport let's talk about cookies for a

551
00:19:23,980 --> 00:19:31,870
second who here likes cookies Wow three

552
00:19:29,200 --> 00:19:35,649
people I mean the HTTP version not a

553
00:19:31,870 --> 00:19:37,840
chocolate chip not too many people why

554
00:19:35,649 --> 00:19:39,639
not well I'm gonna show you why this is

555
00:19:37,840 --> 00:19:42,399
the traditional very old-school

556
00:19:39,639 --> 00:19:43,719
set-cookie header named fell you how

557
00:19:42,399 --> 00:19:45,518
hard can it be right you set it in

558
00:19:43,720 --> 00:19:48,399
browser and browser handles beautiful

559
00:19:45,519 --> 00:19:50,350
well no because you also need a secure

560
00:19:48,399 --> 00:19:51,100
flag to tell the browser by the way this

561
00:19:50,350 --> 00:19:52,750
coefficient only

562
00:19:51,100 --> 00:19:55,870
send our HTTP which I'm using of course

563
00:19:52,750 --> 00:19:57,520
so don't send it over HTTP and then you

564
00:19:55,870 --> 00:19:59,459
need a HTTP only flag like yeah I don't

565
00:19:57,520 --> 00:20:02,679
need this in JavaScript please hide it

566
00:19:59,460 --> 00:20:04,690
and then you need a prefix because hey

567
00:20:02,679 --> 00:20:06,160
turns out that this is not strict enough

568
00:20:04,690 --> 00:20:08,230
in browser handling so you need to tell

569
00:20:06,160 --> 00:20:10,390
the browser by the way when I say secure

570
00:20:08,230 --> 00:20:12,940
I actually mean secure so don't do some

571
00:20:10,390 --> 00:20:14,559
crazy browser quirks but actually handle

572
00:20:12,940 --> 00:20:17,020
this securely so you can add a prefix

573
00:20:14,559 --> 00:20:19,299
Cal underscore underscore secure dash to

574
00:20:17,020 --> 00:20:22,600
the name of the cookie and if any

575
00:20:19,299 --> 00:20:24,129
non-microsoft browser sees this they

576
00:20:22,600 --> 00:20:26,590
will handle this very strictly they will

577
00:20:24,130 --> 00:20:28,330
only accept it over HTTP and they will

578
00:20:26,590 --> 00:20:31,149
mandate that the secure flag is there

579
00:20:28,330 --> 00:20:32,740
and then you can choose like hey maybe I

580
00:20:31,150 --> 00:20:35,350
should replace this here prefix with the

581
00:20:32,740 --> 00:20:37,210
host prefix which tells the browser like

582
00:20:35,350 --> 00:20:39,520
by the way this cookie should only be

583
00:20:37,210 --> 00:20:42,789
sent back to the holster has said it so

584
00:20:39,520 --> 00:20:46,150
it eliminates domain white cookies so

585
00:20:42,789 --> 00:20:49,090
all of these are why nobody here likes

586
00:20:46,150 --> 00:20:51,760
cookies it's it's a mess let's be honest

587
00:20:49,090 --> 00:20:53,350
it's it's really messy and adding stuff

588
00:20:51,760 --> 00:20:54,820
to the name of the cookie to make it

589
00:20:53,350 --> 00:20:56,320
work it's it's not pretty

590
00:20:54,820 --> 00:20:58,240
there's there's the reason that they did

591
00:20:56,320 --> 00:21:00,549
that we can talk about that offline it's

592
00:20:58,240 --> 00:21:02,350
not pretty but I'm honestly if you

593
00:21:00,549 --> 00:21:03,820
configure a cookie like the two last

594
00:21:02,350 --> 00:21:06,549
ones depending on your needs it's

595
00:21:03,820 --> 00:21:08,770
actually not too bad but this requires

596
00:21:06,549 --> 00:21:10,539
effort to configure and if you're using

597
00:21:08,770 --> 00:21:12,039
a framework maybe they don't support

598
00:21:10,539 --> 00:21:13,629
this I don't know many frameworks that

599
00:21:12,039 --> 00:21:15,070
many firms that don't allow you to

600
00:21:13,630 --> 00:21:16,419
configure the name of their cookie that

601
00:21:15,070 --> 00:21:19,990
they're using which is potentially a

602
00:21:16,419 --> 00:21:22,330
problem so this is why everybody hates

603
00:21:19,990 --> 00:21:23,980
cookies so all hail the authorization

604
00:21:22,330 --> 00:21:25,510
header much better because you have

605
00:21:23,980 --> 00:21:27,220
control you can do whatever you want and

606
00:21:25,510 --> 00:21:29,289
let's be honest we all know better right

607
00:21:27,220 --> 00:21:31,840
as developers we know better than

608
00:21:29,289 --> 00:21:33,970
browser implementers in we can write

609
00:21:31,840 --> 00:21:35,949
better code so in angular this is how

610
00:21:33,970 --> 00:21:38,440
you do it this is angular ts1 this is

611
00:21:35,950 --> 00:21:41,559
angular 4 plus very easy very

612
00:21:38,440 --> 00:21:44,679
straightforward taken life are directly

613
00:21:41,559 --> 00:21:46,780
from tutorials on the internet like a

614
00:21:44,679 --> 00:21:50,110
few meaningful lines of code and you're

615
00:21:46,780 --> 00:21:52,240
done this code will get in this case

616
00:21:50,110 --> 00:21:53,709
your token from local storage and add

617
00:21:52,240 --> 00:21:55,600
this to an outgoing request in the

618
00:21:53,710 --> 00:21:56,919
authorization header same thing here

619
00:21:55,600 --> 00:21:59,189
it's a bit more structured and there's

620
00:21:56,919 --> 00:22:01,299
an authorization servers involved but

621
00:21:59,190 --> 00:22:03,910
essentially under the hood it does the

622
00:22:01,299 --> 00:22:06,310
same thing easy enough

623
00:22:03,910 --> 00:22:08,830
no cookies no mess no Flags no whatever

624
00:22:06,310 --> 00:22:10,810
well this is what you see in

625
00:22:08,830 --> 00:22:13,090
applications I've seen plenty of angular

626
00:22:10,810 --> 00:22:15,909
applications using code like this and

627
00:22:13,090 --> 00:22:17,590
this works if you contact your API

628
00:22:15,910 --> 00:22:19,330
because the authorization header will be

629
00:22:17,590 --> 00:22:20,949
there and the value from local storage

630
00:22:19,330 --> 00:22:24,220
will be there or session storage or

631
00:22:20,950 --> 00:22:26,530
whatever you want to keep it but it

632
00:22:24,220 --> 00:22:28,930
works too good because if you come back

633
00:22:26,530 --> 00:22:30,370
the third party API this thing doesn't

634
00:22:28,930 --> 00:22:32,260
care it's like oh I see an outdoor

635
00:22:30,370 --> 00:22:34,419
request BAM authorization header and off

636
00:22:32,260 --> 00:22:36,250
it goes so if you're fetching something

637
00:22:34,420 --> 00:22:37,990
from a third party from an untrusted

638
00:22:36,250 --> 00:22:40,000
party some static public data whatever

639
00:22:37,990 --> 00:22:41,560
this code is gonna attach an

640
00:22:40,000 --> 00:22:42,780
authorization header to every outgoing

641
00:22:41,560 --> 00:22:46,090
request

642
00:22:42,780 --> 00:22:48,730
oops that's not probably not what you

643
00:22:46,090 --> 00:22:50,230
want and this is actually quite common

644
00:22:48,730 --> 00:22:51,460
so what you need to do is if you

645
00:22:50,230 --> 00:22:53,710
implement it like this you need to have

646
00:22:51,460 --> 00:22:55,540
a list of approved origins or domains

647
00:22:53,710 --> 00:22:57,580
and you should send it only there and

648
00:22:55,540 --> 00:23:00,220
some libraries have support for that so

649
00:22:57,580 --> 00:23:02,260
this is angular that angular chat

650
00:23:00,220 --> 00:23:03,940
library from out zero they have a

651
00:23:02,260 --> 00:23:06,100
property called whitelist domains where

652
00:23:03,940 --> 00:23:08,620
they have allow you or require you to

653
00:23:06,100 --> 00:23:10,149
specify where your authorization header

654
00:23:08,620 --> 00:23:11,590
should be sent to but if you're writing

655
00:23:10,150 --> 00:23:13,450
this code yourself you'll have to

656
00:23:11,590 --> 00:23:15,429
implement that yourself and implementing

657
00:23:13,450 --> 00:23:17,560
that yourself means you are all matching

658
00:23:15,430 --> 00:23:19,120
and if you know about web development

659
00:23:17,560 --> 00:23:20,830
URL matching is one of the dirtiest

660
00:23:19,120 --> 00:23:22,929
pieces of code you can write and one of

661
00:23:20,830 --> 00:23:24,399
the trickiest ones to get right it's

662
00:23:22,930 --> 00:23:26,710
actually not that easy

663
00:23:24,400 --> 00:23:28,720
so the takeaway here is there's no free

664
00:23:26,710 --> 00:23:30,130
lunch whether you go with cookies or the

665
00:23:28,720 --> 00:23:32,380
authorization header you're gonna have

666
00:23:30,130 --> 00:23:34,120
to spend a lot of efforts on making sure

667
00:23:32,380 --> 00:23:36,400
that this is done in a secure way

668
00:23:34,120 --> 00:23:38,409
whether it's adding flags and prefixes

669
00:23:36,400 --> 00:23:40,360
or ensuring that your code has the

670
00:23:38,410 --> 00:23:44,910
necessary restrictions in place you need

671
00:23:40,360 --> 00:23:47,860
to do that and that's just the reality

672
00:23:44,910 --> 00:23:49,570
all right so so far I don't know whether

673
00:23:47,860 --> 00:23:51,939
it's a tire I didn't keep score whether

674
00:23:49,570 --> 00:23:54,850
it's tire not earn but let's talk about

675
00:23:51,940 --> 00:23:57,400
some of the subtleties of the web let's

676
00:23:54,850 --> 00:23:59,490
say you're like you know screw cookies

677
00:23:57,400 --> 00:24:01,450
I'm doing angular I'm gonna be very

678
00:23:59,490 --> 00:24:03,070
progressive and I'm gonna use the

679
00:24:01,450 --> 00:24:04,780
authorization header it makes sense in

680
00:24:03,070 --> 00:24:05,950
our scenario so you start doing that

681
00:24:04,780 --> 00:24:08,139
I've seen that with a customer they

682
00:24:05,950 --> 00:24:09,220
started doing that and then they said

683
00:24:08,140 --> 00:24:10,840
like hey we're gonna load some

684
00:24:09,220 --> 00:24:14,440
additional resources like images or

685
00:24:10,840 --> 00:24:16,389
script files and they load that very

686
00:24:14,440 --> 00:24:17,100
simply you add an image tag or a script

687
00:24:16,390 --> 00:24:18,389
to that

688
00:24:17,100 --> 00:24:20,908
to the dumb and the browser is gonna

689
00:24:18,389 --> 00:24:22,229
send out a request to load debt you know

690
00:24:20,909 --> 00:24:24,919
what's not there when the browser sins

691
00:24:22,230 --> 00:24:27,120
that request the authorization header

692
00:24:24,919 --> 00:24:28,919
they needed to do authorization checks

693
00:24:27,120 --> 00:24:30,268
on loading images and script files and

694
00:24:28,919 --> 00:24:31,950
they had no authorization information

695
00:24:30,269 --> 00:24:34,110
because the browser simply doesn't send

696
00:24:31,950 --> 00:24:37,169
it because your application handles the

697
00:24:34,110 --> 00:24:40,158
authorization header and your code

698
00:24:37,169 --> 00:24:42,570
cannot control how this request is sent

699
00:24:40,159 --> 00:24:44,340
well that's a lie but I'm gonna come to

700
00:24:42,570 --> 00:24:46,590
that in two seconds however if you're

701
00:24:44,340 --> 00:24:48,209
using cookies the browser sends them

702
00:24:46,590 --> 00:24:50,100
because cookies are controlled by the

703
00:24:48,210 --> 00:24:51,450
browser and the browser will actually

704
00:24:50,100 --> 00:24:52,799
see hey this is a request to a domain

705
00:24:51,450 --> 00:24:56,190
for which I have a cookie I'm going to

706
00:24:52,799 --> 00:24:58,830
send that cookie the reason I said this

707
00:24:56,190 --> 00:25:00,419
is a lie is because today and some

708
00:24:58,830 --> 00:25:01,889
browsers you can use a serviceworker to

709
00:25:00,419 --> 00:25:03,779
intercept these requests and add a

710
00:25:01,889 --> 00:25:06,178
header on the fly but it's dirty and I

711
00:25:03,779 --> 00:25:09,600
strongly don't recommend doing that and

712
00:25:06,179 --> 00:25:12,149
it's not only images and scripts it's

713
00:25:09,600 --> 00:25:14,039
exede chart if you make an xhr request

714
00:25:12,149 --> 00:25:18,268
across origins you can say with

715
00:25:14,039 --> 00:25:20,639
credentials true this property is about

716
00:25:18,269 --> 00:25:22,200
cookies if you set it to true the

717
00:25:20,639 --> 00:25:24,870
browser if it has a cookie will send

718
00:25:22,200 --> 00:25:26,580
that cookie on this cross-origin request

719
00:25:24,870 --> 00:25:28,639
and will ensure that the server expects

720
00:25:26,580 --> 00:25:31,259
it and so on and so on but that's course

721
00:25:28,639 --> 00:25:33,418
authorization header but there it's not

722
00:25:31,259 --> 00:25:35,490
there so if your application across

723
00:25:33,419 --> 00:25:37,350
origins would have to add that it would

724
00:25:35,490 --> 00:25:39,419
have needed well would need to get that

725
00:25:37,350 --> 00:25:42,740
from the application somehow making it a

726
00:25:39,419 --> 00:25:45,059
lot more complicated there's a third one

727
00:25:42,740 --> 00:25:47,429
if you open a WebSocket connection you

728
00:25:45,059 --> 00:25:49,168
do WebSocket new WebSocket boom off you

729
00:25:47,429 --> 00:25:51,259
go you know what's not there the

730
00:25:49,169 --> 00:25:53,879
authorization header but cookies our

731
00:25:51,259 --> 00:25:56,129
browser knows it I have a cookie for

732
00:25:53,879 --> 00:25:58,350
this domain I'm gonna send that cookie

733
00:25:56,129 --> 00:25:59,610
along with this request and believe me

734
00:25:58,350 --> 00:26:00,719
if you're opening WebSocket connections

735
00:25:59,610 --> 00:26:03,539
you probably want to do some

736
00:26:00,720 --> 00:26:04,950
authorization there some people have

737
00:26:03,539 --> 00:26:07,860
tried to do karate authorization it

738
00:26:04,950 --> 00:26:09,740
didn't end well so these are some

739
00:26:07,860 --> 00:26:13,500
examples of why cookies are actually

740
00:26:09,740 --> 00:26:15,149
always there cookies are handled by the

741
00:26:13,500 --> 00:26:16,789
browser and because of that they are

742
00:26:15,149 --> 00:26:19,049
sent on every request to that domain

743
00:26:16,789 --> 00:26:20,490
originating from the browser unless you

744
00:26:19,049 --> 00:26:22,710
configure the browser not to do that or

745
00:26:20,490 --> 00:26:24,029
something this is something to realize

746
00:26:22,710 --> 00:26:26,580
that the authorization header is not

747
00:26:24,029 --> 00:26:28,289
always there so if you're depending on

748
00:26:26,580 --> 00:26:30,149
these use cases if you're depending on

749
00:26:28,289 --> 00:26:30,809
the authorization there instead of

750
00:26:30,149 --> 00:26:33,779
building a

751
00:26:30,809 --> 00:26:36,120
complementary authorization mechanism

752
00:26:33,779 --> 00:26:41,059
next to the authorization header may be

753
00:26:36,120 --> 00:26:45,120
cookies are a better choice seriously

754
00:26:41,059 --> 00:26:48,629
thank you I think you're a bit too soon

755
00:26:45,120 --> 00:26:51,570
though because if cookies are always

756
00:26:48,629 --> 00:26:55,219
there we have to deal with Caesar that's

757
00:26:51,570 --> 00:26:58,408
again the downside it's easy to fix well

758
00:26:55,220 --> 00:27:00,090
reality with disagree I think but sequel

759
00:26:58,409 --> 00:27:03,210
injection is also easy to fix and look

760
00:27:00,090 --> 00:27:07,649
where we are today but yeah see search

761
00:27:03,210 --> 00:27:11,639
makes most people sad but maybe in an

762
00:27:07,649 --> 00:27:14,489
API world it's not so bad but it depends

763
00:27:11,639 --> 00:27:15,748
so I learned over the past few days as

764
00:27:14,490 --> 00:27:17,129
you guys all know what see service I'm

765
00:27:15,749 --> 00:27:20,249
not gonna explain see serve I'm going to

766
00:27:17,129 --> 00:27:21,059
talk about some solutions maybe the

767
00:27:20,249 --> 00:27:24,570
first text slide

768
00:27:21,059 --> 00:27:27,928
who knows if you have an API that's only

769
00:27:24,570 --> 00:27:29,700
accessible with xhr see server is not

770
00:27:27,929 --> 00:27:31,289
that bad of a problem but you need to

771
00:27:29,700 --> 00:27:33,029
Mitch make sure that it falls under the

772
00:27:31,289 --> 00:27:34,860
restrictions of course and course

773
00:27:33,029 --> 00:27:37,230
essentially governs how cross-origin

774
00:27:34,860 --> 00:27:39,269
requests can be sent from the browser so

775
00:27:37,230 --> 00:27:40,889
if you have an xhr request that uses

776
00:27:39,269 --> 00:27:43,889
something that can never originate from

777
00:27:40,889 --> 00:27:46,080
HTML HTML element such as a content type

778
00:27:43,889 --> 00:27:48,748
for application slash Jason nothing can

779
00:27:46,080 --> 00:27:51,119
send that except JavaScript and we sent

780
00:27:48,749 --> 00:27:53,129
JavaScript across origins from the

781
00:27:51,119 --> 00:27:55,590
attackers origin to the back end that

782
00:27:53,129 --> 00:27:56,969
you're trying to attack the origin

783
00:27:55,590 --> 00:27:58,439
header will be there and your course

784
00:27:56,970 --> 00:28:00,480
policy will decide whether this is

785
00:27:58,440 --> 00:28:03,210
allowed or not so if you have such an

786
00:28:00,480 --> 00:28:05,639
API you essentially only need to make

787
00:28:03,210 --> 00:28:06,779
sure well only is easy to say you need

788
00:28:05,639 --> 00:28:08,008
to make sure you have a strict course

789
00:28:06,779 --> 00:28:08,429
policy in place and then you're good to

790
00:28:08,009 --> 00:28:10,169
go

791
00:28:08,429 --> 00:28:13,649
see surf will be handled by that course

792
00:28:10,169 --> 00:28:15,570
policy however if for some reason you

793
00:28:13,649 --> 00:28:18,809
have a strange API which do exist that

794
00:28:15,570 --> 00:28:20,668
accepts HTML generated content types

795
00:28:18,809 --> 00:28:23,549
form encoded data or something like that

796
00:28:20,669 --> 00:28:25,590
you're in trouble because you will need

797
00:28:23,549 --> 00:28:27,418
to handle C surf if you're using cookies

798
00:28:25,590 --> 00:28:29,899
if you're not using cookies the whole

799
00:28:27,419 --> 00:28:29,899
problem goes away

800
00:28:31,580 --> 00:28:34,699
[Music]

801
00:28:35,860 --> 00:28:39,320
double cookie submit should be enough I

802
00:28:37,970 --> 00:28:44,750
have no idea what tripple cookie submit

803
00:28:39,320 --> 00:28:47,510
is well we can talk about that later so

804
00:28:44,750 --> 00:28:52,040
double double submit cookies are kind of

805
00:28:47,510 --> 00:28:53,390
a pattern to eliminate sea surf in in a

806
00:28:52,040 --> 00:28:55,010
transparent way in a sense that the

807
00:28:53,390 --> 00:28:57,020
server doesn't have to keep track of sea

808
00:28:55,010 --> 00:28:58,640
surf talk ins you push it to the client

809
00:28:57,020 --> 00:28:59,690
in a cookie so what really happens is

810
00:28:58,640 --> 00:29:01,250
the client application

811
00:28:59,690 --> 00:29:02,840
let's let's call it an angular app will

812
00:29:01,250 --> 00:29:04,760
read that cookie and copy the secret

813
00:29:02,840 --> 00:29:06,379
value into a header and only your

814
00:29:04,760 --> 00:29:07,790
application can do it because only your

815
00:29:06,380 --> 00:29:09,590
application runs in your domain

816
00:29:07,790 --> 00:29:11,210
otherwise again you're screwed and

817
00:29:09,590 --> 00:29:12,860
Caesar doesn't matter but only your

818
00:29:11,210 --> 00:29:14,540
application runs there can read that

819
00:29:12,860 --> 00:29:16,750
cookie can attach it there so if it's

820
00:29:14,540 --> 00:29:18,500
present it's legit if it's not present

821
00:29:16,750 --> 00:29:20,450
probably comes from somewhere else and

822
00:29:18,500 --> 00:29:22,100
you don't want to accept that can

823
00:29:20,450 --> 00:29:23,780
implies that this only works within your

824
00:29:22,100 --> 00:29:25,699
own domain that angular actually

825
00:29:23,780 --> 00:29:28,040
supports this pattern out of the box if

826
00:29:25,700 --> 00:29:30,020
you send it a cookie called xsrf token

827
00:29:28,040 --> 00:29:31,879
with the dash in between angular will

828
00:29:30,020 --> 00:29:33,830
automatically copy that into a header on

829
00:29:31,880 --> 00:29:39,320
every requested sense which is pretty

830
00:29:33,830 --> 00:29:40,850
cool however if you have such an API you

831
00:29:39,320 --> 00:29:42,590
should be aware that it's very hard to

832
00:29:40,850 --> 00:29:45,260
secure these things it's very tricky to

833
00:29:42,590 --> 00:29:48,620
get this right because there's ways that

834
00:29:45,260 --> 00:29:51,500
cross-origin requests can be forged so

835
00:29:48,620 --> 00:29:53,780
in a cross-origin setting this is never

836
00:29:51,500 --> 00:29:55,340
gonna work in a secure way the only

837
00:29:53,780 --> 00:29:57,590
thing you can do there is to have a

838
00:29:55,340 --> 00:29:58,459
strict course based API and force

839
00:29:57,590 --> 00:30:00,470
content types

840
00:29:58,460 --> 00:30:01,940
check have a strict course policy area

841
00:30:00,470 --> 00:30:03,500
good to go here's one example of how you

842
00:30:01,940 --> 00:30:04,310
can forge cross-origin requests with

843
00:30:03,500 --> 00:30:07,490
custom headers

844
00:30:04,310 --> 00:30:09,590
it's Adobe PDF of course I have to thank

845
00:30:07,490 --> 00:30:11,900
God of its for pointing me to this

846
00:30:09,590 --> 00:30:13,040
specific attack factor so essentially

847
00:30:11,900 --> 00:30:14,990
what you have here is you have a PDF

848
00:30:13,040 --> 00:30:17,450
document and then the PDF document you

849
00:30:14,990 --> 00:30:18,890
can specify some values and it's a text

850
00:30:17,450 --> 00:30:21,650
encoding with some strange characters

851
00:30:18,890 --> 00:30:25,970
and then test tests and this will

852
00:30:21,650 --> 00:30:27,770
trigger an HTTP request to the backend

853
00:30:25,970 --> 00:30:30,740
and that HP request looks like this

854
00:30:27,770 --> 00:30:33,320
opposed to an test endpoint that's the

855
00:30:30,740 --> 00:30:37,220
one here I don't know where the test is

856
00:30:33,320 --> 00:30:39,500
but supposed with the content type the

857
00:30:37,220 --> 00:30:41,510
car set is the one from here and then

858
00:30:39,500 --> 00:30:42,950
the test header ends up here so with

859
00:30:41,510 --> 00:30:44,150
this technique you could inject any

860
00:30:42,950 --> 00:30:46,640
arbitrary origin

861
00:30:44,150 --> 00:30:48,080
you want that's why API need to enforce

862
00:30:46,640 --> 00:30:49,790
content types because the content type

863
00:30:48,080 --> 00:30:52,550
will say it's coming from an Adobe or

864
00:30:49,790 --> 00:30:54,680
it's expecting some Adobe crap I don't

865
00:30:52,550 --> 00:30:56,690
know anything about that with PDF so no

866
00:30:54,680 --> 00:30:57,950
idea there but it actually tells what's

867
00:30:56,690 --> 00:30:59,390
happening but if your API doesn't

868
00:30:57,950 --> 00:31:02,090
enforce this you might be vulnerable

869
00:30:59,390 --> 00:31:04,010
here again so see serve is kind of

870
00:31:02,090 --> 00:31:06,020
tricky so cookies are always there which

871
00:31:04,010 --> 00:31:07,790
is in this case a downside because it

872
00:31:06,020 --> 00:31:09,830
enables C service it requires us to

873
00:31:07,790 --> 00:31:11,780
think about C surf and to configure a

874
00:31:09,830 --> 00:31:14,090
strict course policy and test that

875
00:31:11,780 --> 00:31:15,680
strictness test that your API doesn't

876
00:31:14,090 --> 00:31:17,030
accept arbitrary content types

877
00:31:15,680 --> 00:31:19,250
test that it sends the proper course

878
00:31:17,030 --> 00:31:19,990
headers on the response and so on and so

879
00:31:19,250 --> 00:31:23,660
on

880
00:31:19,990 --> 00:31:24,380
all right like I said it's it's not a

881
00:31:23,660 --> 00:31:26,270
simple problem

882
00:31:24,380 --> 00:31:29,690
cookies versus authorization header or

883
00:31:26,270 --> 00:31:31,970
whatever so you might want to get rid of

884
00:31:29,690 --> 00:31:34,910
cookies altogether so let's go back to

885
00:31:31,970 --> 00:31:37,130
our authorization header this actually

886
00:31:34,910 --> 00:31:39,680
looks really nice no cookies no flags

887
00:31:37,130 --> 00:31:41,270
attribute C sir whatever man we just

888
00:31:39,680 --> 00:31:43,340
we're gonna fit this piece of angular

889
00:31:41,270 --> 00:31:44,629
code and record so we have our access

890
00:31:43,340 --> 00:31:46,330
token here but where does it come from

891
00:31:44,630 --> 00:31:48,770
it comes from the authorization server

892
00:31:46,330 --> 00:31:50,090
we have this authenticate step here so

893
00:31:48,770 --> 00:31:53,030
the authorization server knows who the

894
00:31:50,090 --> 00:31:55,189
user is but if you have an enterprise

895
00:31:53,030 --> 00:31:58,160
setup of what you have as as oh you have

896
00:31:55,190 --> 00:31:59,630
single sign-on so the the authorization

897
00:31:58,160 --> 00:32:01,430
server when you go there again and again

898
00:31:59,630 --> 00:32:03,290
and again it knows like yeah I know who

899
00:32:01,430 --> 00:32:04,760
you are it's good you can access your

900
00:32:03,290 --> 00:32:06,110
application and how does it know that

901
00:32:04,760 --> 00:32:09,920
well it knows that because it uses

902
00:32:06,110 --> 00:32:11,540
cookies here this is a redirect request

903
00:32:09,920 --> 00:32:13,310
from the browser to the authorization

904
00:32:11,540 --> 00:32:15,800
server redirects you have no control

905
00:32:13,310 --> 00:32:17,120
over that you cannot add additional

906
00:32:15,800 --> 00:32:19,430
headers there's no authorization header

907
00:32:17,120 --> 00:32:21,820
there an authorization server usually

908
00:32:19,430 --> 00:32:24,170
uses a cookie to keep track of a session

909
00:32:21,820 --> 00:32:25,639
so even though you don't have cookies in

910
00:32:24,170 --> 00:32:27,860
your application you're still depending

911
00:32:25,640 --> 00:32:30,050
on cookies and even in a setup where you

912
00:32:27,860 --> 00:32:31,729
have a mobile application if your client

913
00:32:30,050 --> 00:32:33,649
is a mobile application using all arts

914
00:32:31,730 --> 00:32:36,410
it uses the browser on a mobile device

915
00:32:33,650 --> 00:32:38,300
to de run the OAuth flow and a browser

916
00:32:36,410 --> 00:32:41,120
on a mobile device uses cookies to keep

917
00:32:38,300 --> 00:32:45,110
track of authorization state with the

918
00:32:41,120 --> 00:32:47,899
authorization server so this is kind of

919
00:32:45,110 --> 00:32:51,080
the last take away cookies are inherent

920
00:32:47,900 --> 00:32:53,690
to the web there's honestly no way

921
00:32:51,080 --> 00:32:56,120
around them well there is but it's gonna

922
00:32:53,690 --> 00:32:58,520
take you a massive amount of effort to

923
00:32:56,120 --> 00:33:00,169
and honestly it's not necessary to do

924
00:32:58,520 --> 00:33:01,639
that just be aware that they're there

925
00:33:00,170 --> 00:33:03,800
and they're the only thing that's

926
00:33:01,640 --> 00:33:06,440
supported by all web technologies course

927
00:33:03,800 --> 00:33:09,260
is not an old thing from fifty years ago

928
00:33:06,440 --> 00:33:11,390
it's a fairly recent API and it supports

929
00:33:09,260 --> 00:33:13,610
cookies because that's the way these

930
00:33:11,390 --> 00:33:15,950
things actually do work all the new

931
00:33:13,610 --> 00:33:18,560
directives for for doing cross-origin

932
00:33:15,950 --> 00:33:20,710
requests and loading all depend on using

933
00:33:18,560 --> 00:33:24,710
cookies so be aware of that

934
00:33:20,710 --> 00:33:26,780
the downside is we need to secure our

935
00:33:24,710 --> 00:33:31,820
cookies here's some data from Google

936
00:33:26,780 --> 00:33:34,340
telemetry this is I'm gonna say what it

937
00:33:31,820 --> 00:33:36,950
is it's depressing this is not

938
00:33:34,340 --> 00:33:39,379
good so today if you look at HTTP data

939
00:33:36,950 --> 00:33:42,410
we have 70% of page loads happening over

940
00:33:39,380 --> 00:33:44,570
HTTPS meaning that all of the cookies on

941
00:33:42,410 --> 00:33:50,360
those requests should be marked as

942
00:33:44,570 --> 00:33:53,990
secure and we're barely at 10% that is

943
00:33:50,360 --> 00:33:56,500
depressing this is not good prefixes

944
00:33:53,990 --> 00:33:59,630
have been available for about two years

945
00:33:56,500 --> 00:34:04,130
we're in the triple digits here behind

946
00:33:59,630 --> 00:34:05,930
the comma this is this is we're gonna

947
00:34:04,130 --> 00:34:08,020
come to this is actually not a very good

948
00:34:05,930 --> 00:34:10,580
place to be in and because of that

949
00:34:08,020 --> 00:34:13,040
there's a proposal from my quest from

950
00:34:10,580 --> 00:34:16,279
Google working on Chrome to get rid of

951
00:34:13,040 --> 00:34:18,949
cookies like hey maybe it's time we've

952
00:34:16,280 --> 00:34:20,960
tried to make it work and honestly we

953
00:34:18,949 --> 00:34:23,750
can put out whatever we want nobody is

954
00:34:20,960 --> 00:34:26,330
using that and it's really hard to

955
00:34:23,750 --> 00:34:28,880
convince people to use that so what if

956
00:34:26,330 --> 00:34:31,250
we could have a mechanism that we don't

957
00:34:28,880 --> 00:34:32,810
need to patch over and over and over

958
00:34:31,250 --> 00:34:34,760
again what if we can make something that

959
00:34:32,810 --> 00:34:36,860
has decent properties by default that

960
00:34:34,760 --> 00:34:38,420
people can actually use without having

961
00:34:36,860 --> 00:34:40,490
to worry about something that breaks

962
00:34:38,420 --> 00:34:43,130
that we can offer new applications a way

963
00:34:40,489 --> 00:34:45,379
to get things done in a better way and

964
00:34:43,130 --> 00:34:46,760
that's what the HTTP state tokens draft

965
00:34:45,380 --> 00:34:48,410
spec is about I'm not gonna go into

966
00:34:46,760 --> 00:34:50,720
detail here if you're interested to read

967
00:34:48,409 --> 00:34:52,460
it it's a draft it's just released like

968
00:34:50,719 --> 00:34:54,439
at the beginning of the month and

969
00:34:52,460 --> 00:34:56,449
they're actively looking for feedback

970
00:34:54,440 --> 00:34:58,670
they're actively looking for will this

971
00:34:56,449 --> 00:35:00,080
work for you how can we improve this so

972
00:34:58,670 --> 00:35:02,090
I highly recommend you take a look and

973
00:35:00,080 --> 00:35:05,360
chime in if you have something useful to

974
00:35:02,090 --> 00:35:08,720
say so let me wrap this up in three

975
00:35:05,360 --> 00:35:10,099
points first cookies are part of the

976
00:35:08,720 --> 00:35:11,660
wrapper do you like it or not they

977
00:35:10,099 --> 00:35:14,180
are there and whether your application

978
00:35:11,660 --> 00:35:15,109
uses them or not other applications will

979
00:35:14,180 --> 00:35:16,819
so if you're running your own

980
00:35:15,109 --> 00:35:19,999
authorization server log down your

981
00:35:16,819 --> 00:35:21,499
cookies I don't know about all

982
00:35:19,999 --> 00:35:23,390
commercial products but I hope they have

983
00:35:21,499 --> 00:35:26,299
controls that allow you to do that and

984
00:35:23,390 --> 00:35:27,828
if they don't harass your vendor until

985
00:35:26,299 --> 00:35:31,099
they actually add support for these

986
00:35:27,829 --> 00:35:34,460
features the keep in mind cookies are

987
00:35:31,099 --> 00:35:36,499
not mutually exclusive with eight api's

988
00:35:34,460 --> 00:35:38,720
which I have heard some people proclaim

989
00:35:36,499 --> 00:35:40,669
like API should can never use cookies

990
00:35:38,720 --> 00:35:43,009
well honestly if it's a web-based API

991
00:35:40,670 --> 00:35:45,229
they can alternative is the

992
00:35:43,009 --> 00:35:46,579
authorization header keep in mind that

993
00:35:45,229 --> 00:35:47,930
you can put whatever you want in that

994
00:35:46,579 --> 00:35:49,579
authorization header there's no

995
00:35:47,930 --> 00:35:51,739
restrictions they give you more

996
00:35:49,579 --> 00:35:52,999
flexibility it's easy for you to do

997
00:35:51,739 --> 00:35:54,650
whatever you want with the authorization

998
00:35:52,999 --> 00:35:56,209
header but you have to write a code and

999
00:35:54,650 --> 00:35:58,729
you have to secure the code which is

1000
00:35:56,210 --> 00:36:00,650
again potentially a downside and I

1001
00:35:58,729 --> 00:36:02,629
finally look at that proposal for HTTP

1002
00:36:00,650 --> 00:36:04,819
state tokens that might make your life

1003
00:36:02,630 --> 00:36:06,589
easier in the future might it actually

1004
00:36:04,819 --> 00:36:08,930
has some very interesting controls and

1005
00:36:06,589 --> 00:36:11,599
has some mechanisms where you can allow

1006
00:36:08,930 --> 00:36:14,359
or require the browser to sign requests

1007
00:36:11,599 --> 00:36:17,210
and prevent theft of that token

1008
00:36:14,359 --> 00:36:19,190
altogether on the client which is pretty

1009
00:36:17,210 --> 00:36:22,130
cool all right

1010
00:36:19,190 --> 00:36:23,989
final slide I've made some security

1011
00:36:22,130 --> 00:36:26,119
cheat sheets on angular security and job

1012
00:36:23,989 --> 00:36:28,279
security so this might be very relevant

1013
00:36:26,119 --> 00:36:30,349
for you and for the developers in your

1014
00:36:28,279 --> 00:36:32,269
teams so you can grab them from the

1015
00:36:30,349 --> 00:36:34,009
websites the slides are on Twitter so

1016
00:36:32,269 --> 00:36:35,328
you can grab them there as well there's

1017
00:36:34,009 --> 00:36:37,729
a clickable link so you don't have to

1018
00:36:35,329 --> 00:36:38,960
type the whole URL but these might be

1019
00:36:37,729 --> 00:36:41,479
interesting if you have feedback on that

1020
00:36:38,960 --> 00:36:44,479
reach out I'm very easy to reach here

1021
00:36:41,479 --> 00:36:45,919
are my contact details so follow me on

1022
00:36:44,479 --> 00:36:48,529
Twitter I have some interesting security

1023
00:36:45,920 --> 00:36:51,890
things to say there if you have feedback

1024
00:36:48,529 --> 00:36:54,710
comments questions send me an email and

1025
00:36:51,890 --> 00:37:01,799
that's it thank you

1026
00:36:54,710 --> 00:37:04,810
[Applause]

1027
00:37:01,800 --> 00:37:06,760
all right so relying on course 4c surf

1028
00:37:04,810 --> 00:37:09,580
protection seems dangerous

1029
00:37:06,760 --> 00:37:12,310
is it acceptable to use WP plus course

1030
00:37:09,580 --> 00:37:13,600
first of all it the question is more

1031
00:37:12,310 --> 00:37:16,420
elaborate it says it's dangerous because

1032
00:37:13,600 --> 00:37:17,730
not all browsers support course what

1033
00:37:16,420 --> 00:37:21,610
time are you living in

1034
00:37:17,730 --> 00:37:23,620
well yes ok not all browsers Mesa mode

1035
00:37:21,610 --> 00:37:25,410
process may not support course but if a

1036
00:37:23,620 --> 00:37:27,880
browser doesn't support course it

1037
00:37:25,410 --> 00:37:31,060
refuses to send an xhr request across

1038
00:37:27,880 --> 00:37:33,340
origins because pre course if you send

1039
00:37:31,060 --> 00:37:35,230
an xhr you can only send it to your own

1040
00:37:33,340 --> 00:37:37,240
origin and never to a cross origin the

1041
00:37:35,230 --> 00:37:38,890
browser would simply refuse to send that

1042
00:37:37,240 --> 00:37:40,419
you can test if you have a Mac you can

1043
00:37:38,890 --> 00:37:42,520
easily test it you can download Firefox

1044
00:37:40,420 --> 00:37:44,440
3 it still runs on your Mac OS which is

1045
00:37:42,520 --> 00:37:47,230
pretty cool you can send a cross order

1046
00:37:44,440 --> 00:37:48,420
request and Firefox is like no way no

1047
00:37:47,230 --> 00:37:51,060
I'm not doing that

1048
00:37:48,420 --> 00:37:53,140
so if you can send cross-origin xhr

1049
00:37:51,060 --> 00:37:54,580
course is implemented and of course

1050
00:37:53,140 --> 00:37:56,319
implement at the origin header is there

1051
00:37:54,580 --> 00:37:59,140
and then you can rely on that but only

1052
00:37:56,320 --> 00:38:01,870
if you are sure that a request is coming

1053
00:37:59,140 --> 00:38:03,609
from course from xhr meaning that it has

1054
00:38:01,870 --> 00:38:06,040
to be one of the content types that

1055
00:38:03,610 --> 00:38:08,020
forms cannot support the question is is

1056
00:38:06,040 --> 00:38:12,370
it acceptable to use double cookie plus

1057
00:38:08,020 --> 00:38:14,680
course it's kind of a fallacy in a sense

1058
00:38:12,370 --> 00:38:16,690
that if you are sending course you're

1059
00:38:14,680 --> 00:38:18,370
sending cross-origin requests and then

1060
00:38:16,690 --> 00:38:19,810
the origin sending the request will not

1061
00:38:18,370 --> 00:38:21,160
be able to read the cookie associated

1062
00:38:19,810 --> 00:38:21,670
with the backend so it's probably not

1063
00:38:21,160 --> 00:38:23,379
gonna work

1064
00:38:21,670 --> 00:38:25,570
because there's no access to the cookie

1065
00:38:23,380 --> 00:38:28,750
but whoever asked that the anonymous guy

1066
00:38:25,570 --> 00:38:30,400
here or girl you can talk to me

1067
00:38:28,750 --> 00:38:33,070
afterwards and I can draw it out and we

1068
00:38:30,400 --> 00:38:35,440
can discuss that in more detail all

1069
00:38:33,070 --> 00:38:37,060
right thank you and I'm still here for

1070
00:38:35,440 --> 00:38:39,590
the rest of the day so talk to me if you

1071
00:38:37,060 --> 00:38:42,779
have any questions

1072
00:38:39,590 --> 00:38:42,780
[Applause]

