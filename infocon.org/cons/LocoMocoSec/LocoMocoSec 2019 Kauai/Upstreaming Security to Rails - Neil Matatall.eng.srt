1
00:00:00,290 --> 00:00:05,339
thanks Jim you're uh you're quite the

2
00:00:02,850 --> 00:00:06,869
character and absolutely if it wasn't

3
00:00:05,339 --> 00:00:07,470
for Jim I probably would not be living

4
00:00:06,870 --> 00:00:10,379
in white

5
00:00:07,470 --> 00:00:12,030
that's the straight-up truth so I'm here

6
00:00:10,380 --> 00:00:14,940
to tell you a story about git hubs

7
00:00:12,030 --> 00:00:17,580
journey falling behind in dependencies

8
00:00:14,940 --> 00:00:20,580
and then catching back up that in itself

9
00:00:17,580 --> 00:00:22,139
is pretty remarkable in my opinion but

10
00:00:20,580 --> 00:00:24,419
the other things we learned along the

11
00:00:22,140 --> 00:00:25,769
way will hopefully encourage you even

12
00:00:24,420 --> 00:00:28,380
more to stay up-to-date on your

13
00:00:25,769 --> 00:00:31,140
dependencies but I just want to start

14
00:00:28,380 --> 00:00:33,300
out by showing a fictitious study from a

15
00:00:31,140 --> 00:00:34,829
university that does not exist where we

16
00:00:33,300 --> 00:00:37,319
asked a thousand people who do not

17
00:00:34,829 --> 00:00:39,360
exists where the source of their code

18
00:00:37,320 --> 00:00:41,370
comes from when they get stuck

19
00:00:39,360 --> 00:00:45,030
obviously copy and paste from Stack

20
00:00:41,370 --> 00:00:46,230
Overflow very popular cargo colton more

21
00:00:45,030 --> 00:00:48,239
or less copying code from your

22
00:00:46,230 --> 00:00:50,519
colleagues because it worked for them

23
00:00:48,239 --> 00:00:52,649
and maybe it'll work for you

24
00:00:50,520 --> 00:00:54,690
same thing first result on Google very

25
00:00:52,649 --> 00:00:57,000
popular and down at the bottom we have

26
00:00:54,690 --> 00:01:00,320
experience and then practically nobody

27
00:00:57,000 --> 00:01:02,940
writes novel code for the most part so

28
00:01:00,320 --> 00:01:05,610
for anyone who has written a non-trivial

29
00:01:02,940 --> 00:01:09,470
amount of software have you never copied

30
00:01:05,610 --> 00:01:09,470
and pasted code raise your hand

31
00:01:11,630 --> 00:01:20,250
breaking news vulnerable dependencies

32
00:01:15,150 --> 00:01:22,650
are bad but it's even worse if you are

33
00:01:20,250 --> 00:01:25,350
an outdated version of a library try

34
00:01:22,650 --> 00:01:27,299
getting help for that you can't you if

35
00:01:25,350 --> 00:01:29,970
you're on unsupported software try

36
00:01:27,299 --> 00:01:31,680
getting support you can't if you're

37
00:01:29,970 --> 00:01:33,840
trying to hire the best and brightest

38
00:01:31,680 --> 00:01:37,189
and you're on an antiquated stack

39
00:01:33,840 --> 00:01:39,210
you can't another thing that comes up is

40
00:01:37,189 --> 00:01:41,250
for people who are on the most

41
00:01:39,210 --> 00:01:43,048
up-to-date versions they come in with

42
00:01:41,250 --> 00:01:45,180
false assumptions about the safety of

43
00:01:43,049 --> 00:01:46,530
the code that they're using and then if

44
00:01:45,180 --> 00:01:47,610
they have false assumptions about the

45
00:01:46,530 --> 00:01:49,470
code that they're using and they're on

46
00:01:47,610 --> 00:01:51,479
an old version of code they're writing

47
00:01:49,470 --> 00:01:56,548
insecure code that for all they know is

48
00:01:51,479 --> 00:01:58,720
perfectly secure rails is a good

49
00:01:56,549 --> 00:02:00,770
framework

50
00:01:58,720 --> 00:02:08,970
[Laughter]

51
00:02:00,770 --> 00:02:11,310
or copy and pasting code copy and

52
00:02:08,970 --> 00:02:12,540
pasting of code is seen as bad it's it's

53
00:02:11,310 --> 00:02:14,190
kind of indicates that you don't really

54
00:02:12,540 --> 00:02:18,030
know what you're doing all the time it

55
00:02:14,190 --> 00:02:20,040
works and you know oftentimes that leads

56
00:02:18,030 --> 00:02:21,630
to like oh like people who copy and

57
00:02:20,040 --> 00:02:23,820
paste code don't work they're doing

58
00:02:21,630 --> 00:02:25,829
they're bad developers or not as good as

59
00:02:23,820 --> 00:02:28,799
us they don't understand security bla

60
00:02:25,830 --> 00:02:32,040
bla bla but what if hear me out

61
00:02:28,800 --> 00:02:33,840
the api's were designed in a way such

62
00:02:32,040 --> 00:02:36,780
that it was hard to do the wrong thing

63
00:02:33,840 --> 00:02:40,080
such that copy and pasting became easier

64
00:02:36,780 --> 00:02:41,730
to do the right thing now I will get

65
00:02:40,080 --> 00:02:43,050
into an example of where rails is not

66
00:02:41,730 --> 00:02:45,600
good at copying and pasting in this

67
00:02:43,050 --> 00:02:49,470
regard but the idea of a secure by

68
00:02:45,600 --> 00:02:52,290
default strategy such that you opt out

69
00:02:49,470 --> 00:02:54,000
of security means that you don't really

70
00:02:52,290 --> 00:02:56,220
need static analysis if you have a

71
00:02:54,000 --> 00:02:58,020
complex API with this crazy control flow

72
00:02:56,220 --> 00:03:00,120
yes you need to know where all the

73
00:02:58,020 --> 00:03:02,100
stinks and sources are but if you have

74
00:03:00,120 --> 00:03:04,170
an API that just says like opt out of

75
00:03:02,100 --> 00:03:05,820
security that's a regular expression

76
00:03:04,170 --> 00:03:09,679
that pretty much anyone can write and

77
00:03:05,820 --> 00:03:14,690
automatically detect in their workflows

78
00:03:09,680 --> 00:03:19,200
rails isn't perfect rails is dying

79
00:03:14,690 --> 00:03:23,250
apparently it started in 2017 same thing

80
00:03:19,200 --> 00:03:25,079
Ruby is dying does Rails scale this was

81
00:03:23,250 --> 00:03:27,420
the question and apparently the answer

82
00:03:25,080 --> 00:03:30,930
is no it doesn't rails is garbage get

83
00:03:27,420 --> 00:03:34,768
rid of it and of course every year is

84
00:03:30,930 --> 00:03:37,680
the year of hating on Rails but back to

85
00:03:34,769 --> 00:03:40,590
the good parts about rails I first saw

86
00:03:37,680 --> 00:03:42,690
rails in 2006 and I didn't know anything

87
00:03:40,590 --> 00:03:46,320
about programming really I mean I copied

88
00:03:42,690 --> 00:03:47,970
my pace my way through college but I

89
00:03:46,320 --> 00:03:49,799
finally started understanding these

90
00:03:47,970 --> 00:03:51,299
attack that there's this Olas top ten

91
00:03:49,799 --> 00:03:56,430
thing that came out you know I was like

92
00:03:51,299 --> 00:03:58,560
oh that's great see Cerf that's bad like

93
00:03:56,430 --> 00:04:00,329
every single web application in the

94
00:03:58,560 --> 00:04:02,940
world is vulnerable to this thing by

95
00:04:00,329 --> 00:04:05,519
default you know the sleeping giant I

96
00:04:02,940 --> 00:04:06,959
think was one name they gave it turns

97
00:04:05,519 --> 00:04:11,000
out it might not have been as disastrous

98
00:04:06,959 --> 00:04:14,100
as we thought but in 2006 I was scared

99
00:04:11,000 --> 00:04:15,420
so rails I'm showing Ruby code I'm very

100
00:04:14,100 --> 00:04:17,790
sorry this might hurt somebody's eyes

101
00:04:15,420 --> 00:04:19,500
but this is your your base controller

102
00:04:17,790 --> 00:04:22,800
from which all your web controllers

103
00:04:19,500 --> 00:04:24,840
descend from so how hard was it in 2006

104
00:04:22,800 --> 00:04:30,090
to protect all of your rails

105
00:04:24,840 --> 00:04:31,799
applications from Caesar done rails

106
00:04:30,090 --> 00:04:33,539
relies a lot on convention over

107
00:04:31,800 --> 00:04:35,850
configuration and if you follow the

108
00:04:33,540 --> 00:04:37,410
conventions one line of code would have

109
00:04:35,850 --> 00:04:40,560
protected you with state of the art C

110
00:04:37,410 --> 00:04:43,710
surf protection at the time I think oo

111
00:04:40,560 --> 00:04:45,570
CSRF guard was available but I tried to

112
00:04:43,710 --> 00:04:46,979
use it and we were on some weird funky

113
00:04:45,570 --> 00:04:48,900
framework and it didn't really work out

114
00:04:46,980 --> 00:04:51,780
and the other advice would have about

115
00:04:48,900 --> 00:04:54,239
seven pages of dotnet or Java code with

116
00:04:51,780 --> 00:04:57,090
about eighty-five instructions on how

117
00:04:54,240 --> 00:04:59,240
and when to use it I thought one line of

118
00:04:57,090 --> 00:05:02,609
code was way better

119
00:04:59,240 --> 00:05:03,900
another study SR I sub resource

120
00:05:02,610 --> 00:05:05,640
integrity for anyone who's not familiar

121
00:05:03,900 --> 00:05:08,789
with it it's a technology that allows

122
00:05:05,640 --> 00:05:11,130
you to specify the hashed value of the

123
00:05:08,790 --> 00:05:12,960
resources you're loading externally so

124
00:05:11,130 --> 00:05:15,960
if your code is stored on a CDN for

125
00:05:12,960 --> 00:05:17,310
example especially a shared one you kind

126
00:05:15,960 --> 00:05:19,500
of would want to know if that code got

127
00:05:17,310 --> 00:05:21,060
swapped out from underneath you right so

128
00:05:19,500 --> 00:05:23,040
if you're expecting to load jQuery and

129
00:05:21,060 --> 00:05:26,250
now you're loading you know malicious

130
00:05:23,040 --> 00:05:28,590
Bitcoin mining whatever you kind of want

131
00:05:26,250 --> 00:05:30,600
to know about that but literature on the

132
00:05:28,590 --> 00:05:34,289
topic is is still kind of lacking in my

133
00:05:30,600 --> 00:05:38,640
opinion but in 2005 rails kind of solved

134
00:05:34,290 --> 00:05:40,500
it that Josh who is the the author of

135
00:05:38,640 --> 00:05:42,570
this change was also the person who

136
00:05:40,500 --> 00:05:45,240
implemented CSP he is not a security

137
00:05:42,570 --> 00:05:47,430
engineer he is one of my favorite people

138
00:05:45,240 --> 00:05:49,800
at github but he basically said wait

139
00:05:47,430 --> 00:05:51,330
we're using this asset packaging tool

140
00:05:49,800 --> 00:05:53,070
where it takes a whole bunch of

141
00:05:51,330 --> 00:05:55,050
disparate JavaScript files and compiles

142
00:05:53,070 --> 00:05:56,880
them down to like two or three min

143
00:05:55,050 --> 00:05:58,650
AFER's them just some fancy like tree

144
00:05:56,880 --> 00:06:01,530
shaking to get rid of like unused code

145
00:05:58,650 --> 00:06:04,109
it's really fancy but the best part is

146
00:06:01,530 --> 00:06:08,130
is it generates a series of sort of file

147
00:06:04,110 --> 00:06:10,590
name - integrity value mappings so you

148
00:06:08,130 --> 00:06:12,510
add these four lines of code into your

149
00:06:10,590 --> 00:06:14,700
your function that will generate a

150
00:06:12,510 --> 00:06:17,159
script tag for you and you have

151
00:06:14,700 --> 00:06:19,680
site-wide s RI coverage out of the box

152
00:06:17,160 --> 00:06:21,920
and nobody has to ever think about it

153
00:06:19,680 --> 00:06:21,920
ever again

154
00:06:22,940 --> 00:06:27,540
so going a little bit back I did not

155
00:06:25,919 --> 00:06:28,020
start with my history Jim gave a little

156
00:06:27,540 --> 00:06:29,880
bit of inch

157
00:06:28,020 --> 00:06:31,580
but I think my history actually directly

158
00:06:29,880 --> 00:06:34,440
plays into some of this and how I think

159
00:06:31,580 --> 00:06:37,820
when I was working at UC Irvine which is

160
00:06:34,440 --> 00:06:40,740
where I met my wife we were using this

161
00:06:37,820 --> 00:06:43,469
unsupported custom framework built on

162
00:06:40,740 --> 00:06:46,500
top of struts that you could not Google

163
00:06:43,470 --> 00:06:48,420
the answer for I tell you that we became

164
00:06:46,500 --> 00:06:50,430
to maintain as de facto because we were

165
00:06:48,420 --> 00:06:52,530
the only people using that framework in

166
00:06:50,430 --> 00:06:55,470
the world that we knew of it was around

167
00:06:52,530 --> 00:06:57,960
the same time that I saw rails rails had

168
00:06:55,470 --> 00:07:00,750
this wonderful video by the creator of

169
00:06:57,960 --> 00:07:02,789
said like we'll create a blog live in

170
00:07:00,750 --> 00:07:04,890
under ten minutes and the way at which

171
00:07:02,790 --> 00:07:06,750
they the agility where they could just

172
00:07:04,890 --> 00:07:08,789
modify the database make changes this

173
00:07:06,750 --> 00:07:11,040
this and this was great because the

174
00:07:08,790 --> 00:07:12,900
other experience I had was well you

175
00:07:11,040 --> 00:07:14,490
compile these Java files locally on your

176
00:07:12,900 --> 00:07:16,770
machine and then you copy them over

177
00:07:14,490 --> 00:07:19,440
through a Windows network share and you

178
00:07:16,770 --> 00:07:20,580
hope that the libraries are there but I

179
00:07:19,440 --> 00:07:23,940
don't really know what versions those

180
00:07:20,580 --> 00:07:25,710
libraries are it's just a jar file kind

181
00:07:23,940 --> 00:07:28,830
of a different experience between the

182
00:07:25,710 --> 00:07:31,080
rails experience then I worked for a

183
00:07:28,830 --> 00:07:34,050
company that is named effort that works

184
00:07:31,080 --> 00:07:36,479
with birds this company also was

185
00:07:34,050 --> 00:07:39,960
famously on Rails when I joined there on

186
00:07:36,480 --> 00:07:44,910
rails 2.0 - the reason I mention that is

187
00:07:39,960 --> 00:07:47,130
because 2.0 - is very old I joined in

188
00:07:44,910 --> 00:07:50,760
2011 I believe - points who came out in

189
00:07:47,130 --> 00:07:52,140
like 2008 but even worse not only were

190
00:07:50,760 --> 00:07:54,420
they an old version of rails but they

191
00:07:52,140 --> 00:07:57,360
had monkey patched it which is the the

192
00:07:54,420 --> 00:07:59,970
process of sort of at runtime changing

193
00:07:57,360 --> 00:08:01,560
the behavior of methods and functions so

194
00:07:59,970 --> 00:08:03,450
if you really wanted to you could make

195
00:08:01,560 --> 00:08:05,670
the string dot reverse function just

196
00:08:03,450 --> 00:08:07,349
return a bunch of random garbage but you

197
00:08:05,670 --> 00:08:09,870
had the ability to modify anything at

198
00:08:07,350 --> 00:08:11,400
runtime and they did and everyone did

199
00:08:09,870 --> 00:08:13,260
this was like a rails thing this was

200
00:08:11,400 --> 00:08:15,690
really common it was it was absolutely

201
00:08:13,260 --> 00:08:17,340
awful another thing they did as they've

202
00:08:15,690 --> 00:08:19,710
entered their dependencies so that the

203
00:08:17,340 --> 00:08:22,169
source of their dependencies were in the

204
00:08:19,710 --> 00:08:24,330
repo that controlled twitter.com and

205
00:08:22,170 --> 00:08:27,030
then I think the most egregious thing

206
00:08:24,330 --> 00:08:29,580
that we ever did including myself was

207
00:08:27,030 --> 00:08:32,610
modify the source in those vendored

208
00:08:29,580 --> 00:08:35,130
library code not exactly your best

209
00:08:32,610 --> 00:08:36,720
software development practices but it

210
00:08:35,130 --> 00:08:38,340
also made me realize that there was no

211
00:08:36,720 --> 00:08:40,920
way in heck we were ever going to catch

212
00:08:38,340 --> 00:08:41,729
up to modern rails and I think Twitter

213
00:08:40,919 --> 00:08:43,110
obviously real

214
00:08:41,729 --> 00:08:45,329
that too and they started to decompose

215
00:08:43,110 --> 00:08:48,449
things and write their own framework and

216
00:08:45,329 --> 00:08:50,638
scholar famously so the idea of making a

217
00:08:48,449 --> 00:08:52,800
contribution to Rails and having Twitter

218
00:08:50,639 --> 00:08:56,940
benefit from it was just like out of the

219
00:08:52,800 --> 00:08:58,889
question entirely not possible and so in

220
00:08:56,940 --> 00:09:01,500
some cases we ended up writing libraries

221
00:08:58,889 --> 00:09:03,300
and that was great because it solved the

222
00:09:01,500 --> 00:09:05,160
problem but still we weren't able to

223
00:09:03,300 --> 00:09:09,990
actually benefit from the ecosystem as

224
00:09:05,160 --> 00:09:11,279
much as we could have so libraries can

225
00:09:09,990 --> 00:09:13,050
sometimes be like shortcuts they're

226
00:09:11,279 --> 00:09:14,579
great they get the job done and then

227
00:09:13,050 --> 00:09:16,500
sometimes shortcuts don't work out so

228
00:09:14,579 --> 00:09:18,029
bad and you might have actually like

229
00:09:16,500 --> 00:09:20,790
hurts yourself more than you helped

230
00:09:18,029 --> 00:09:22,290
yourself obviously I can pick and choose

231
00:09:20,790 --> 00:09:27,180
when these situations apply because I'm

232
00:09:22,290 --> 00:09:29,519
up here then I worked for in octocat I

233
00:09:27,180 --> 00:09:31,439
came in and github was behind on the

234
00:09:29,519 --> 00:09:33,480
rails and I thought oh my goodness I've

235
00:09:31,440 --> 00:09:36,810
seen this before when are we moving to

236
00:09:33,480 --> 00:09:38,880
Scala and they just sort of like looked

237
00:09:36,810 --> 00:09:40,439
at me funny and I was just like no

238
00:09:38,880 --> 00:09:42,389
really when are we moving to something

239
00:09:40,440 --> 00:09:44,490
else and they said no we're rails were

240
00:09:42,389 --> 00:09:50,910
Ruby forever I said all right good luck

241
00:09:44,490 --> 00:09:52,680
and I was wrong I want to shout out to

242
00:09:50,910 --> 00:09:54,089
Eileen's presentation this is a

243
00:09:52,680 --> 00:09:56,040
presentation a trivia and I so I'm gonna

244
00:09:54,089 --> 00:09:57,750
use a little bit of her content i really

245
00:09:56,040 --> 00:10:00,389
suggest you watch this video she's a

246
00:09:57,750 --> 00:10:02,069
great speaker and she is my hero she is

247
00:10:00,389 --> 00:10:03,449
a rails core contributor she started

248
00:10:02,069 --> 00:10:06,389
working for github and if it were not

249
00:10:03,449 --> 00:10:09,839
for her I might have been right but you

250
00:10:06,389 --> 00:10:10,740
know what I said before so this is just

251
00:10:09,839 --> 00:10:14,040
a little bit of the history this is

252
00:10:10,740 --> 00:10:16,980
Eileen's content again in 2008 github

253
00:10:14,040 --> 00:10:19,349
launches in 2009 rails 2 3 comes out I

254
00:10:16,980 --> 00:10:22,079
guess I can point but then what happens

255
00:10:19,350 --> 00:10:24,389
github for trails so now we're on a

256
00:10:22,079 --> 00:10:26,370
custom version of rails and look what

257
00:10:24,389 --> 00:10:28,440
happened right after we forked it rails

258
00:10:26,370 --> 00:10:30,389
3 came out I'll get into why rails 3 is

259
00:10:28,440 --> 00:10:32,130
important but as you look at this

260
00:10:30,389 --> 00:10:34,529
timeline we're starting the rails 3

261
00:10:32,130 --> 00:10:36,449
upgrade loop right starting the rails 3

262
00:10:34,529 --> 00:10:39,810
upgrade here in rails 3 2 is coming out

263
00:10:36,449 --> 00:10:43,529
and oh so that's when I joined Twitter

264
00:10:39,810 --> 00:10:48,420
was in 2011 where is rails 2.0 2 on this

265
00:10:43,529 --> 00:10:49,560
timeline nowhere another thing that came

266
00:10:48,420 --> 00:10:51,410
out during this time line was our

267
00:10:49,560 --> 00:10:54,029
project called sad B this is the sort of

268
00:10:51,410 --> 00:10:55,480
static analysis attic analysis

269
00:10:54,029 --> 00:10:57,820
automation framework that was

270
00:10:55,480 --> 00:10:59,620
popular this is its own talk in itself

271
00:10:57,820 --> 00:11:01,930
and I'm glad to talk offline about that

272
00:10:59,620 --> 00:11:04,269
but traveling through time and talking

273
00:11:01,930 --> 00:11:06,130
about why rails 3 was important rails 3

274
00:11:04,269 --> 00:11:08,380
was important because by default in

275
00:11:06,130 --> 00:11:09,880
rails 2 you had to manually escape every

276
00:11:08,380 --> 00:11:12,519
single piece of data on the page and

277
00:11:09,880 --> 00:11:14,740
that's really really annoying also it's

278
00:11:12,519 --> 00:11:16,120
really really hard to not forget to do

279
00:11:14,740 --> 00:11:18,940
that every single time

280
00:11:16,120 --> 00:11:20,440
luckily rails had a very good static

281
00:11:18,940 --> 00:11:22,990
analysis tool that would often catch

282
00:11:20,440 --> 00:11:24,070
these things but it's not perfect and

283
00:11:22,990 --> 00:11:25,899
nothing ever can be

284
00:11:24,070 --> 00:11:27,610
so rails 3 moved to this sort of

285
00:11:25,899 --> 00:11:29,829
automatic escaping mode where you see

286
00:11:27,610 --> 00:11:32,680
before we had this called H and now it's

287
00:11:29,829 --> 00:11:35,380
gone I put this in as a little a little

288
00:11:32,680 --> 00:11:36,849
jab because if anyone this is the value

289
00:11:35,380 --> 00:11:40,060
for the href and of course if you have a

290
00:11:36,850 --> 00:11:41,829
JavaScript colon href that is XSS so we

291
00:11:40,060 --> 00:11:43,569
have this poorly named function called

292
00:11:41,829 --> 00:11:45,489
safe URL for that will essentially

293
00:11:43,570 --> 00:11:47,170
filter out these things I think the

294
00:11:45,490 --> 00:11:51,579
framework should be doing this maybe one

295
00:11:47,170 --> 00:11:54,099
day it will but not for now so I want to

296
00:11:51,579 --> 00:11:56,050
focus on this part specifically upgrade

297
00:11:54,100 --> 00:11:57,339
stalled are probably the two scariest

298
00:11:56,050 --> 00:12:00,279
words in the context of this

299
00:11:57,339 --> 00:12:02,290
presentation if you you your whole

300
00:12:00,279 --> 00:12:03,819
posture is dependent on staying

301
00:12:02,290 --> 00:12:05,829
up-to-date and your upgrade gets stalled

302
00:12:03,819 --> 00:12:08,469
and new versions are coming out you're

303
00:12:05,829 --> 00:12:12,279
quickly becoming antiquated and again

304
00:12:08,470 --> 00:12:16,389
we're still on the custom fork and then

305
00:12:12,279 --> 00:12:18,040
January 2013 happened this was a huge

306
00:12:16,389 --> 00:12:19,750
event for anyone that managed rails

307
00:12:18,040 --> 00:12:21,699
applications where it was basically like

308
00:12:19,750 --> 00:12:24,550
every week there was a new remote code

309
00:12:21,699 --> 00:12:28,180
execution or sequel injection or denial

310
00:12:24,550 --> 00:12:29,800
of service vole 'nor ability and I don't

311
00:12:28,180 --> 00:12:32,170
know if you've read it all but that's

312
00:12:29,800 --> 00:12:36,430
the scary thing versions affected all

313
00:12:32,170 --> 00:12:38,199
not affected none I don't think that is

314
00:12:36,430 --> 00:12:39,849
actually as bad as it sounds I

315
00:12:38,199 --> 00:12:42,250
appreciate a exclude unsupported

316
00:12:39,850 --> 00:12:43,870
versions but this one was bad enough

317
00:12:42,250 --> 00:12:45,310
they actually back ported some patches

318
00:12:43,870 --> 00:12:51,040
to unsupportive versions if I recall

319
00:12:45,310 --> 00:12:52,810
correctly and even though like Twitter

320
00:12:51,040 --> 00:12:55,089
was a monolithic rails app and github

321
00:12:52,810 --> 00:12:56,649
was a monolithic ailes rails app that

322
00:12:55,089 --> 00:12:58,480
doesn't mean we have one app in one

323
00:12:56,649 --> 00:12:59,740
repository in one rails app there's a

324
00:12:58,480 --> 00:13:01,779
bunch of little small little ones

325
00:12:59,740 --> 00:13:04,269
running in our data center may or may

326
00:13:01,779 --> 00:13:06,430
not be correctly segmented off but it's

327
00:13:04,269 --> 00:13:09,279
you know we had a big a lot of upgrades

328
00:13:06,430 --> 00:13:10,689
to do but the best part was since rails

329
00:13:09,279 --> 00:13:13,480
since Twitter was on an antiquated

330
00:13:10,689 --> 00:13:17,430
custom monkey patched vendored modified

331
00:13:13,480 --> 00:13:17,430
version Twitter was not vulnerable

332
00:13:18,120 --> 00:13:24,879
but unfortunately github was and they

333
00:13:21,220 --> 00:13:27,069
had to do a lot of work to you know get

334
00:13:24,879 --> 00:13:28,660
these patches in immediately again old

335
00:13:27,069 --> 00:13:30,959
custom fork of rails meant that they

336
00:13:28,660 --> 00:13:33,850
were back porting patches themselves and

337
00:13:30,959 --> 00:13:39,339
does anybody enjoy back porting patches

338
00:13:33,850 --> 00:13:40,329
to custom unsupported versions no so

339
00:13:39,339 --> 00:13:44,709
we'll travel a little more in the future

340
00:13:40,329 --> 00:13:48,609
rails 4.0 comes out in 2013 2014 that

341
00:13:44,709 --> 00:13:50,649
little x-men character here is Sentinel

342
00:13:48,610 --> 00:13:52,050
that's github version of the static

343
00:13:50,649 --> 00:13:54,069
analysis pipe warm that I'd mentioned

344
00:13:52,050 --> 00:13:56,729
but the most important thing on this

345
00:13:54,069 --> 00:14:00,370
slide is that Eilen joins right up here

346
00:13:56,730 --> 00:14:03,790
the 3.0 being complete happened this is

347
00:14:00,370 --> 00:14:05,589
me on the Oreo shake right here 3.0

348
00:14:03,790 --> 00:14:06,670
being complete was huge you know like I

349
00:14:05,589 --> 00:14:08,980
walked in there like although we just

350
00:14:06,670 --> 00:14:10,540
upgraded 3.0 and that's great how about

351
00:14:08,980 --> 00:14:13,209
three points to yeah we're working on it

352
00:14:10,540 --> 00:14:16,079
but it actually went faster than I

353
00:14:13,209 --> 00:14:18,910
thought it only took about two years

354
00:14:16,079 --> 00:14:21,699
then we started the rails 4.0 upgrade

355
00:14:18,910 --> 00:14:23,589
when rails 5.0 came out so we're

356
00:14:21,699 --> 00:14:25,269
technically on a supported version but

357
00:14:23,589 --> 00:14:27,670
it's well as part of version number

358
00:14:25,269 --> 00:14:33,160
we're still on our custom fork so it's

359
00:14:27,670 --> 00:14:35,050
not so great but how did we do this

360
00:14:33,160 --> 00:14:37,360
upgrade the most important thing we had

361
00:14:35,050 --> 00:14:38,949
was parallel CI builds so we have a very

362
00:14:37,360 --> 00:14:40,689
comprehensive test suite it is not

363
00:14:38,949 --> 00:14:43,209
perfect no test suite ever is but we

364
00:14:40,689 --> 00:14:44,680
have a lot of tests I cannot run our

365
00:14:43,209 --> 00:14:47,768
entire test suite on my laptop it would

366
00:14:44,680 --> 00:14:49,779
probably take 8 hours typically it's

367
00:14:47,769 --> 00:14:52,029
just push and let's see I deal with

368
00:14:49,779 --> 00:14:53,980
everything and so we started doing is

369
00:14:52,029 --> 00:14:56,019
we'd have these parallel builds so while

370
00:14:53,980 --> 00:14:58,480
they're trying to p8 to github to Rails

371
00:14:56,019 --> 00:15:00,100
4 we would run this optional test suite

372
00:14:58,480 --> 00:15:02,500
and anyone who's familiar with github

373
00:15:00,100 --> 00:15:03,759
means is familiar with the various

374
00:15:02,500 --> 00:15:05,079
different test suites you can have on a

375
00:15:03,759 --> 00:15:07,240
pull request that you can have a green

376
00:15:05,079 --> 00:15:11,378
status we made this an optional build

377
00:15:07,240 --> 00:15:12,670
because the first time we ran it 4650 7

378
00:15:11,379 --> 00:15:15,160
errors

379
00:15:12,670 --> 00:15:16,839
quite a lot and by error that means like

380
00:15:15,160 --> 00:15:20,649
the code does not run not the test

381
00:15:16,839 --> 00:15:22,120
failed the code does not run that is

382
00:15:20,649 --> 00:15:22,550
that means we had a lot of work cut out

383
00:15:22,120 --> 00:15:27,560
for

384
00:15:22,550 --> 00:15:30,010
selves as we as the sea-ice so as we

385
00:15:27,560 --> 00:15:32,239
were making that test that sweet green

386
00:15:30,010 --> 00:15:33,589
we also realized that a lot of the big

387
00:15:32,240 --> 00:15:35,510
problems that we had was the

388
00:15:33,589 --> 00:15:37,820
customizations that we had were really

389
00:15:35,510 --> 00:15:39,740
blocking everything we did so we had

390
00:15:37,820 --> 00:15:41,329
like a custom test framework we had like

391
00:15:39,740 --> 00:15:43,730
a custom way that the databases were

392
00:15:41,329 --> 00:15:46,069
managed and eileen comes in and she's

393
00:15:43,730 --> 00:15:48,589
like why is this so custom like the

394
00:15:46,070 --> 00:15:49,940
default stuff works just as well so

395
00:15:48,589 --> 00:15:52,910
she's sitting there ripping out all this

396
00:15:49,940 --> 00:15:54,500
janky code and sooner enough you know

397
00:15:52,910 --> 00:15:57,110
that suite became green and then we went

398
00:15:54,500 --> 00:16:01,510
2 for 1 and then we went 2 for 2 because

399
00:15:57,110 --> 00:16:01,510
4 and 401 had some serious problems

400
00:16:02,740 --> 00:16:06,950
another important tool for this method

401
00:16:05,000 --> 00:16:08,480
was canary deploy so a canary deploy the

402
00:16:06,950 --> 00:16:11,060
idea is that you deploy to a small

403
00:16:08,480 --> 00:16:12,500
subset of servers hopefully enough that

404
00:16:11,060 --> 00:16:14,599
if there were an egregious problem they

405
00:16:12,500 --> 00:16:15,800
were to present itself right away before

406
00:16:14,600 --> 00:16:18,230
you would go out to the rest of

407
00:16:15,800 --> 00:16:19,849
production that's fine in theory

408
00:16:18,230 --> 00:16:21,019
sometimes it works out great but you're

409
00:16:19,850 --> 00:16:23,240
really not going to know until you've

410
00:16:21,019 --> 00:16:25,339
deployed it to the entire world

411
00:16:23,240 --> 00:16:27,079
so they would do sort of like off-hours

412
00:16:25,339 --> 00:16:30,020
will deploy it to production for like 5

413
00:16:27,079 --> 00:16:31,430
10 15 30 minutes and just sort of gain

414
00:16:30,020 --> 00:16:31,699
more and more information as we went

415
00:16:31,430 --> 00:16:33,709
along

416
00:16:31,700 --> 00:16:35,680
you can't just upgrade and then expect

417
00:16:33,709 --> 00:16:38,890
everything to work when you have

418
00:16:35,680 --> 00:16:40,729
millions of users

419
00:16:38,890 --> 00:16:42,800
the other interesting thing that came

420
00:16:40,730 --> 00:16:43,910
out during this time is that Wow the

421
00:16:42,800 --> 00:16:46,040
security team was trying to make

422
00:16:43,910 --> 00:16:49,130
enhancements to the framework we just

423
00:16:46,040 --> 00:16:52,520
couldn't you know like I got this change

424
00:16:49,130 --> 00:16:54,020
in to upstream but we can't use it so it

425
00:16:52,520 --> 00:16:55,490
kind of felt like in a sense we were

426
00:16:54,020 --> 00:16:57,500
wasting our time because we want to

427
00:16:55,490 --> 00:16:58,670
build these things but if we can't use

428
00:16:57,500 --> 00:17:00,260
them then what's the point and our

429
00:16:58,670 --> 00:17:03,740
upgrade was still you know kind of in it

430
00:17:00,260 --> 00:17:05,540
if he stayed and rails 4.2 this is

431
00:17:03,740 --> 00:17:08,240
exactly what I'm talking about

432
00:17:05,540 --> 00:17:13,159
band-aids back ports forward ports

433
00:17:08,240 --> 00:17:15,199
deprecations it was a nightmare and this

434
00:17:13,160 --> 00:17:16,910
is where I think Eileen drew the line in

435
00:17:15,199 --> 00:17:18,410
the sand and she said if we keep back

436
00:17:16,910 --> 00:17:20,870
porting we keep doing all these things

437
00:17:18,410 --> 00:17:23,030
we'll never get off a fork this was a

438
00:17:20,869 --> 00:17:24,948
pivotal moment in our history because at

439
00:17:23,030 --> 00:17:27,619
that point as a security team you said

440
00:17:24,949 --> 00:17:31,820
ok we just got to stop for a little bit

441
00:17:27,619 --> 00:17:34,639
and then hope everything gets better so

442
00:17:31,820 --> 00:17:36,450
back back to the past again

443
00:17:34,640 --> 00:17:39,570
Eileen joins

444
00:17:36,450 --> 00:17:41,460
rales 4.2 is in prod shortly after more

445
00:17:39,570 --> 00:17:44,279
importantly rails 5.2 is in Prague

446
00:17:41,460 --> 00:17:47,220
shortly after and more most importantly

447
00:17:44,279 --> 00:17:50,730
we are no longer on a fork we are on

448
00:17:47,220 --> 00:17:52,409
standard vanilla rails we have actually

449
00:17:50,730 --> 00:17:53,639
what's the best parts of this and

450
00:17:52,409 --> 00:17:55,710
actually I don't know why I didn't see

451
00:17:53,639 --> 00:17:57,359
this coming is now that we can benefit

452
00:17:55,710 --> 00:17:59,639
from making all of our changes to rails

453
00:17:57,359 --> 00:18:01,499
directly rails can actually benefit from

454
00:17:59,639 --> 00:18:03,600
all the changes that we made so all the

455
00:18:01,499 --> 00:18:06,269
things that Eileen didn't rip out are

456
00:18:03,600 --> 00:18:07,738
now making themselves into rails core so

457
00:18:06,269 --> 00:18:11,730
it's a really good benefit and a really

458
00:18:07,739 --> 00:18:13,379
good symbiotic relationship there so a

459
00:18:11,730 --> 00:18:15,629
mission accomplished right like we're on

460
00:18:13,379 --> 00:18:17,850
Rails master like we're now no longer

461
00:18:15,629 --> 00:18:19,949
custom code we're vanilla we're we're

462
00:18:17,850 --> 00:18:24,330
doing the right thing like Security's

463
00:18:19,950 --> 00:18:28,379
done see it wrong dependency management

464
00:18:24,330 --> 00:18:30,720
is very hard this is a screenshot of our

465
00:18:28,379 --> 00:18:32,759
our automated static analysis tool and

466
00:18:30,720 --> 00:18:34,379
as you can see it also runs regular

467
00:18:32,759 --> 00:18:36,119
expressions which are incredibly

468
00:18:34,379 --> 00:18:38,699
effective and for anyone not familiar

469
00:18:36,119 --> 00:18:40,379
with rails or Ruby the gem file is sort

470
00:18:38,700 --> 00:18:42,899
of your package manager file the gem

471
00:18:40,379 --> 00:18:45,899
file lock is your lock file so we

472
00:18:42,899 --> 00:18:48,059
monitor all changes to those files now I

473
00:18:45,899 --> 00:18:49,649
will not say that we do a diff between

474
00:18:48,059 --> 00:18:51,928
each version and we review every single

475
00:18:49,649 --> 00:18:53,789
line individually but if someone for

476
00:18:51,929 --> 00:18:56,039
example either adds or upgrades a very

477
00:18:53,789 --> 00:19:00,210
sketchy library you best believe it's

478
00:18:56,039 --> 00:19:03,809
going to get some better eyes and then

479
00:19:00,210 --> 00:19:06,239
this happened I'm sorry for people who

480
00:19:03,809 --> 00:19:08,928
maintain rails this was this was 2013

481
00:19:06,239 --> 00:19:11,989
all over again because what happened

482
00:19:08,929 --> 00:19:14,730
versions affected all not affected none

483
00:19:11,989 --> 00:19:17,159
this was really bad arbitrary file read

484
00:19:14,730 --> 00:19:20,429
read your Etsy password file no problem

485
00:19:17,159 --> 00:19:22,049
any file in the computer no problem when

486
00:19:20,429 --> 00:19:23,159
people say bad things about rails and

487
00:19:22,049 --> 00:19:26,059
these things come out and kind of have

488
00:19:23,159 --> 00:19:26,059
to say okay

489
00:19:26,909 --> 00:19:30,029
the interesting thing here's this

490
00:19:28,409 --> 00:19:32,580
vulnerability was discovered by a github

491
00:19:30,029 --> 00:19:34,470
employee and the email that was

492
00:19:32,580 --> 00:19:36,840
announcing it also came from a github

493
00:19:34,470 --> 00:19:38,220
employee so you would think that I had

494
00:19:36,840 --> 00:19:39,720
some sort of inside knowledge on this

495
00:19:38,220 --> 00:19:42,090
vulnerability since being github

496
00:19:39,720 --> 00:19:44,399
employee I I'm also part of the rails

497
00:19:42,090 --> 00:19:45,959
bug bounty team this did not come in

498
00:19:44,399 --> 00:19:47,908
through the bug bounty team but we had

499
00:19:45,960 --> 00:19:49,049
to be very careful you know we didn't I

500
00:19:47,909 --> 00:19:50,200
didn't even know what the patch was

501
00:19:49,049 --> 00:19:51,970
until it came out

502
00:19:50,200 --> 00:19:53,680
and I certainly did not know how to

503
00:19:51,970 --> 00:19:56,320
exploit it until somebody else figured

504
00:19:53,680 --> 00:19:59,560
it out this was a little bit different

505
00:19:56,320 --> 00:20:01,540
from the 2013 edition where people were

506
00:19:59,560 --> 00:20:02,980
kind of sharing potential exploits and

507
00:20:01,540 --> 00:20:04,480
potential fixes so we could guarantee

508
00:20:02,980 --> 00:20:05,860
that the fixes worked and that

509
00:20:04,480 --> 00:20:11,650
production wouldn't come crashing down

510
00:20:05,860 --> 00:20:13,060
with all this extra code and because

511
00:20:11,650 --> 00:20:14,830
this is also true if you have a

512
00:20:13,060 --> 00:20:16,690
misconfigured rails application you can

513
00:20:14,830 --> 00:20:18,850
read sort of the v signing the

514
00:20:16,690 --> 00:20:21,280
encryption secret from a specific file

515
00:20:18,850 --> 00:20:23,379
and if you're using if you're not using

516
00:20:21,280 --> 00:20:25,420
JSON to serialize your sessions and

517
00:20:23,380 --> 00:20:27,370
rails which is common now and instead

518
00:20:25,420 --> 00:20:29,350
you're using like marshaling which was

519
00:20:27,370 --> 00:20:35,139
the old way of doing things this file

520
00:20:29,350 --> 00:20:36,310
read turns into RCE trivially so what do

521
00:20:35,140 --> 00:20:39,490
we do

522
00:20:36,310 --> 00:20:41,500
github released a dependency management

523
00:20:39,490 --> 00:20:43,480
API such that you can see all the things

524
00:20:41,500 --> 00:20:45,610
your project depends on and you will get

525
00:20:43,480 --> 00:20:49,440
notified if we know of a CV for any of

526
00:20:45,610 --> 00:20:51,820
those projects so we built to chat ops

527
00:20:49,440 --> 00:20:53,500
github very much runs on chat ops

528
00:20:51,820 --> 00:20:55,780
everything we do happens in a chatroom

529
00:20:53,500 --> 00:20:56,200
we do not use a third party UI if we can

530
00:20:55,780 --> 00:20:58,780
avoid it

531
00:20:56,200 --> 00:21:00,460
all the conversation all the action we

532
00:20:58,780 --> 00:21:01,840
deploy from a chatroom we run a test

533
00:21:00,460 --> 00:21:04,030
from a chat when we say hi from a

534
00:21:01,840 --> 00:21:05,580
chatroom and we also look for vulnerable

535
00:21:04,030 --> 00:21:08,410
rails packages in the chatroom

536
00:21:05,580 --> 00:21:10,720
this is a public API this is not some

537
00:21:08,410 --> 00:21:13,900
rails some github inside secret sauce

538
00:21:10,720 --> 00:21:15,100
you this was built with me public API so

539
00:21:13,900 --> 00:21:20,200
if you want to build something like this

540
00:21:15,100 --> 00:21:22,480
it is very much possible so after the

541
00:21:20,200 --> 00:21:24,340
rails pocalypse 2019 edition we

542
00:21:22,480 --> 00:21:26,050
obviously had some work to do you know

543
00:21:24,340 --> 00:21:28,570
like I said we don't have one repo we

544
00:21:26,050 --> 00:21:32,590
had lots of them

545
00:21:28,570 --> 00:21:34,540
so in from blue repos to Buddha and

546
00:21:32,590 --> 00:21:37,480
Britta is really impressive I don't want

547
00:21:34,540 --> 00:21:39,100
to give the numbers because obviously it

548
00:21:37,480 --> 00:21:40,990
may look good to some it may look bad

549
00:21:39,100 --> 00:21:42,610
but doesn't really add value here the

550
00:21:40,990 --> 00:21:44,350
thing is we built a system sort of

551
00:21:42,610 --> 00:21:46,750
automatically detect and then manage

552
00:21:44,350 --> 00:21:48,669
everything it would open issue for every

553
00:21:46,750 --> 00:21:50,290
repository that was affected it

554
00:21:48,670 --> 00:21:52,060
automatically add this to this github

555
00:21:50,290 --> 00:21:54,490
project abort again no there's a secret

556
00:21:52,060 --> 00:21:56,470
sauce anybody can do this and we could

557
00:21:54,490 --> 00:22:00,880
actually watch the issues get you know

558
00:21:56,470 --> 00:22:02,470
triage or or marked as invalid and while

559
00:22:00,880 --> 00:22:03,879
it's not fun to have to go through a

560
00:22:02,470 --> 00:22:06,069
fire drill it was definitely a

561
00:22:03,879 --> 00:22:08,079
to watch that thing in real-time update

562
00:22:06,069 --> 00:22:09,668
and watch everything move over to the

563
00:22:08,079 --> 00:22:11,139
right indicating that they had upgraded

564
00:22:09,669 --> 00:22:15,309
and that we were in a much better

565
00:22:11,139 --> 00:22:17,248
position so now that we're on the

566
00:22:15,309 --> 00:22:19,779
current version of rails and we have a

567
00:22:17,249 --> 00:22:22,089
strategy for managing our dependencies

568
00:22:19,779 --> 00:22:23,409
and making sure we stay up-to-date we

569
00:22:22,089 --> 00:22:26,589
can start making enhancements to the

570
00:22:23,409 --> 00:22:28,479
framework itself now this in itself is

571
00:22:26,589 --> 00:22:29,829
not enhancement to the framework but

572
00:22:28,479 --> 00:22:32,979
it's something I encourage everyone to

573
00:22:29,829 --> 00:22:34,690
do banning unsafe api's has been very

574
00:22:32,979 --> 00:22:37,149
popular for a very long time I don't

575
00:22:34,690 --> 00:22:39,129
know why it's not more popular the raw

576
00:22:37,149 --> 00:22:40,809
function in rails basically says I don't

577
00:22:39,129 --> 00:22:42,998
care what this data is give me the

578
00:22:40,809 --> 00:22:45,009
unescape version and the number of times

579
00:22:42,999 --> 00:22:48,399
you actually want to do that is exactly

580
00:22:45,009 --> 00:22:51,549
zero so we banned this API in favor of

581
00:22:48,399 --> 00:22:54,008
the more complex API is for building you

582
00:22:51,549 --> 00:22:57,908
know complex HTML outside of a template

583
00:22:54,009 --> 00:22:59,709
for example so what we did was we first

584
00:22:57,909 --> 00:23:01,749
disabled it in tests so if you call this

585
00:22:59,709 --> 00:23:03,519
message during our test suite or your

586
00:23:01,749 --> 00:23:05,829
development suite or Drazen error

587
00:23:03,519 --> 00:23:08,109
we can't do this in production because

588
00:23:05,829 --> 00:23:10,448
obviously we don't have 100% test

589
00:23:08,109 --> 00:23:11,799
coverage but once we had removed it from

590
00:23:10,449 --> 00:23:13,359
dev and tests we had a really good

591
00:23:11,799 --> 00:23:15,789
confidence that nobody was introducing

592
00:23:13,359 --> 00:23:21,369
new ones also our static analysis tool

593
00:23:15,789 --> 00:23:23,408
would have also caught this CSP anyone

594
00:23:21,369 --> 00:23:24,879
knows me knows I don't shut up about CSP

595
00:23:23,409 --> 00:23:27,389
and I believe leaf has to take a drink

596
00:23:24,879 --> 00:23:29,948
because I said it once

597
00:23:27,389 --> 00:23:32,349
not very many frameworks have built in

598
00:23:29,949 --> 00:23:34,899
CSP support but rails has a DSL for

599
00:23:32,349 --> 00:23:37,629
managing your policy it has you know

600
00:23:34,899 --> 00:23:39,668
nonce capabilities it has you know

601
00:23:37,629 --> 00:23:42,129
dynamic overrides so you don't want to

602
00:23:39,669 --> 00:23:43,539
open up you know a specific source to

603
00:23:42,129 --> 00:23:45,609
all of your pages but like a very

604
00:23:43,539 --> 00:23:49,299
specific part of your app it's really

605
00:23:45,609 --> 00:23:54,039
easy to have a very tightly defined CSP

606
00:23:49,299 --> 00:23:55,779
using this API this one is a bit

607
00:23:54,039 --> 00:23:57,158
controversial because this actually

608
00:23:55,779 --> 00:23:59,889
isn't a solution this is only a partial

609
00:23:57,159 --> 00:24:01,749
solution but dangling markup is a bit of

610
00:23:59,889 --> 00:24:03,428
a problem if anyone is familiar with I

611
00:24:01,749 --> 00:24:06,059
can't I have no idea how to pronounce

612
00:24:03,429 --> 00:24:09,159
this l can't if I believe is his name

613
00:24:06,059 --> 00:24:11,619
okay so he wrote a blog post a long time

614
00:24:09,159 --> 00:24:14,440
ago called postcards from the post XSS

615
00:24:11,619 --> 00:24:15,519
world like once we fixed XSS would we

616
00:24:14,440 --> 00:24:18,360
focus on next

617
00:24:15,519 --> 00:24:20,559
well dangling markup was one of

618
00:24:18,360 --> 00:24:22,750
now what am I talking about dangling

619
00:24:20,559 --> 00:24:24,399
markup well here I'm sorry I'll start

620
00:24:22,750 --> 00:24:27,070
with the fix before I get into the

621
00:24:24,399 --> 00:24:29,049
problem we add this now before every

622
00:24:27,070 --> 00:24:31,389
forum tag in our application and I'll

623
00:24:29,049 --> 00:24:34,389
explain each one of those and why they

624
00:24:31,390 --> 00:24:36,070
work for now but the important thing is

625
00:24:34,390 --> 00:24:40,120
it's automatically done by the framework

626
00:24:36,070 --> 00:24:42,490
not the developers so if an attacker is

627
00:24:40,120 --> 00:24:43,989
able to so again we're post XSS we know

628
00:24:42,490 --> 00:24:46,419
you can inject a script tag and do stuff

629
00:24:43,990 --> 00:24:48,789
but we're past that so what does an

630
00:24:46,419 --> 00:24:50,770
attacker do they inject a form the form

631
00:24:48,789 --> 00:24:53,260
that doesn't have the closing tag the

632
00:24:50,770 --> 00:24:55,270
form that opens a select option the form

633
00:24:53,260 --> 00:24:58,750
that creates an option and then throws a

634
00:24:55,270 --> 00:25:01,210
plain text tag in there I'll show you

635
00:24:58,750 --> 00:25:02,679
why this is bad but if you look at our

636
00:25:01,210 --> 00:25:04,330
protection here we actually close off

637
00:25:02,679 --> 00:25:06,130
the option we close off the form and

638
00:25:04,330 --> 00:25:08,320
then our form down there is still in

639
00:25:06,130 --> 00:25:10,539
good shape but because of that plain

640
00:25:08,320 --> 00:25:13,240
text tag the attacker actually gets

641
00:25:10,539 --> 00:25:15,520
everything after the body the plain text

642
00:25:13,240 --> 00:25:17,649
tag unfortunately does not have a

643
00:25:15,520 --> 00:25:19,120
closing tag it will keep eating

644
00:25:17,649 --> 00:25:23,320
everything until you get to the end of

645
00:25:19,120 --> 00:25:25,418
the page my quest please help us going

646
00:25:23,320 --> 00:25:27,760
back to the rest the rails convention

647
00:25:25,419 --> 00:25:29,399
over configuration I talked about how C

648
00:25:27,760 --> 00:25:31,750
surf protection was a one-line change

649
00:25:29,399 --> 00:25:34,239
but how can see surf protection get

650
00:25:31,750 --> 00:25:36,340
better so we know that we have to

651
00:25:34,240 --> 00:25:38,740
protect these verbs now we know browsers

652
00:25:36,340 --> 00:25:40,389
asked we don't issue deletes or patches

653
00:25:38,740 --> 00:25:42,399
or puts but rails does treat them

654
00:25:40,390 --> 00:25:44,110
separately this is essentially gets

655
00:25:42,399 --> 00:25:47,439
verse posts here the posts are

656
00:25:44,110 --> 00:25:49,209
highlighted now going back to our

657
00:25:47,440 --> 00:25:52,480
dangling markup form injection type

658
00:25:49,210 --> 00:25:55,360
stuff what if I was just to insert a

659
00:25:52,480 --> 00:25:57,159
form tag in that top example the browser

660
00:25:55,360 --> 00:25:59,559
will ignore the nested form tag because

661
00:25:57,159 --> 00:26:02,380
nested forms are kind of I don't I think

662
00:25:59,559 --> 00:26:03,879
they're sort of undefined so now the

663
00:26:02,380 --> 00:26:05,950
attacker has changed and they're gonna

664
00:26:03,880 --> 00:26:09,429
send their authenticity token to

665
00:26:05,950 --> 00:26:11,559
attacker same thing down here you know

666
00:26:09,429 --> 00:26:12,760
the user just meant I don't know logout

667
00:26:11,559 --> 00:26:14,740
but instead they're gonna change their

668
00:26:12,760 --> 00:26:16,390
password probably not what they wanted

669
00:26:14,740 --> 00:26:19,120
to do and when you have a static C surf

670
00:26:16,390 --> 00:26:22,990
token at least per page one token rules

671
00:26:19,120 --> 00:26:27,820
them all so instead we have perform C

672
00:26:22,990 --> 00:26:29,590
surf tokens you'll just hope you'll just

673
00:26:27,820 --> 00:26:31,179
have to trust me that when I say value

674
00:26:29,590 --> 00:26:32,770
equals a and value equals B

675
00:26:31,180 --> 00:26:34,870
that these serfs see search tokens are

676
00:26:32,770 --> 00:26:37,559
indeed different the see serf token is

677
00:26:34,870 --> 00:26:41,320
based off of the action and the verb and

678
00:26:37,559 --> 00:26:44,200
because we include the the idea of the

679
00:26:41,320 --> 00:26:46,389
thing in the action itself every single

680
00:26:44,200 --> 00:26:48,430
action has a custom see serf token so if

681
00:26:46,390 --> 00:26:53,440
you were to exfiltrate one it would have

682
00:26:48,430 --> 00:26:56,559
limited use perfect so to prove to you

683
00:26:53,440 --> 00:26:58,720
that this is useful Facebook had a bug

684
00:26:56,559 --> 00:26:59,950
and it would have saved them 7.5

685
00:26:58,720 --> 00:27:02,740
thousand dollars if they would have

686
00:26:59,950 --> 00:27:03,940
implemented perform see serf tokens this

687
00:27:02,740 --> 00:27:06,550
is this was a fun one it's called

688
00:27:03,940 --> 00:27:07,960
client-side see serf basically what

689
00:27:06,550 --> 00:27:09,730
happened was there was some front-end

690
00:27:07,960 --> 00:27:11,770
code that was supposed to post to some

691
00:27:09,730 --> 00:27:13,270
other forum but through some fancy

692
00:27:11,770 --> 00:27:15,040
JavaScript they actually changed the

693
00:27:13,270 --> 00:27:17,050
action so now the forum was going to be

694
00:27:15,040 --> 00:27:19,000
posting this somewhere else the former's

695
00:27:17,050 --> 00:27:21,490
can be posting to the graph QL interface

696
00:27:19,000 --> 00:27:23,260
instead of like their analytics endpoint

697
00:27:21,490 --> 00:27:26,230
or something and if you have an

698
00:27:23,260 --> 00:27:27,940
authenticated request to graph QL I mean

699
00:27:26,230 --> 00:27:30,280
you've got full access to the graph that

700
00:27:27,940 --> 00:27:32,890
that user has and that's very bad

701
00:27:30,280 --> 00:27:37,360
perform C surf tokens ports this kind of

702
00:27:32,890 --> 00:27:39,640
attack now I said rails is not perfect

703
00:27:37,360 --> 00:27:41,409
for copying and pasting this is one of

704
00:27:39,640 --> 00:27:44,530
my favorite websites in the world rails

705
00:27:41,410 --> 00:27:46,030
sequel I org everything good I've said

706
00:27:44,530 --> 00:27:48,639
about rails can probably be taken down

707
00:27:46,030 --> 00:27:53,230
by just one look at this website the ORM

708
00:27:48,640 --> 00:27:55,150
in rails has issues the RM and rails has

709
00:27:53,230 --> 00:27:57,910
issues if you use it incorrectly to sum

710
00:27:55,150 --> 00:28:01,420
or it just has issues to some I think it

711
00:27:57,910 --> 00:28:03,160
just has issues and I want to give an

712
00:28:01,420 --> 00:28:05,800
example of a rail sequel injection that

713
00:28:03,160 --> 00:28:07,690
happened to github it was very fun it

714
00:28:05,800 --> 00:28:10,899
was it was Christmas Day where I was and

715
00:28:07,690 --> 00:28:12,660
I received this report and it was pretty

716
00:28:10,900 --> 00:28:15,280
much legitimate and it came down to

717
00:28:12,660 --> 00:28:17,920
someone was calling the order function

718
00:28:15,280 --> 00:28:19,809
on the ORM so order by ID descending

719
00:28:17,920 --> 00:28:21,309
whatever and they just sort of put in

720
00:28:19,809 --> 00:28:22,540
the user parameter right there with no

721
00:28:21,309 --> 00:28:25,059
sanitization whatever

722
00:28:22,540 --> 00:28:27,040
now rails should know that if you don't

723
00:28:25,059 --> 00:28:28,510
say like I call a name in a direction it

724
00:28:27,040 --> 00:28:31,090
should be like no thank you but it just

725
00:28:28,510 --> 00:28:32,440
accepted the raw string and there is

726
00:28:31,090 --> 00:28:36,250
actually a valid use case for why this

727
00:28:32,440 --> 00:28:38,170
happens so we thought about making more

728
00:28:36,250 --> 00:28:40,360
robust sequel injection protection and

729
00:28:38,170 --> 00:28:42,340
this is more or less the exact bug that

730
00:28:40,360 --> 00:28:44,060
I was talking about to the order

731
00:28:42,340 --> 00:28:48,260
function you plop in a user control

732
00:28:44,060 --> 00:28:49,760
program and it's bad so instead what

733
00:28:48,260 --> 00:28:52,610
we're doing is we're now forcing people

734
00:28:49,760 --> 00:28:54,830
to use like either the other method that

735
00:28:52,610 --> 00:28:57,080
accepts like the call name and the

736
00:28:54,830 --> 00:28:59,600
direction or you have to explicitly say

737
00:28:57,080 --> 00:29:02,149
like I am using some Ross equal right

738
00:28:59,600 --> 00:29:04,969
here I know exactly what I'm doing

739
00:29:02,150 --> 00:29:11,510
and linters can catch that pretty easily

740
00:29:04,970 --> 00:29:12,740
oh this was really popular except one

741
00:29:11,510 --> 00:29:17,150
person thumbs down did I didn't

742
00:29:12,740 --> 00:29:19,040
understand that all right so here I'm

743
00:29:17,150 --> 00:29:21,830
just going to say things and you can boo

744
00:29:19,040 --> 00:29:23,720
at me if you'd like people will copy and

745
00:29:21,830 --> 00:29:25,669
paste code let's try to make it safer to

746
00:29:23,720 --> 00:29:29,300
do so we cannot make it completely safe

747
00:29:25,670 --> 00:29:31,490
but we can actually try we add a real

748
00:29:29,300 --> 00:29:34,430
protection for all rails application

749
00:29:31,490 --> 00:29:35,900
users with one to three lines of code we

750
00:29:34,430 --> 00:29:37,400
should stop shaming people for what they

751
00:29:35,900 --> 00:29:39,950
don't know and stop showing me people

752
00:29:37,400 --> 00:29:41,630
who promote us in them and we should

753
00:29:39,950 --> 00:29:44,540
stop supporting unsupported code

754
00:29:41,630 --> 00:29:45,890
lastly design security trade-offs as an

755
00:29:44,540 --> 00:29:47,990
opt-out decisions and monitor the

756
00:29:45,890 --> 00:29:52,420
exceptions and start contributing to

757
00:29:47,990 --> 00:29:52,420
open source copy and paste away

758
00:29:59,940 --> 00:30:04,119
so one of the thing one of the things

759
00:30:02,350 --> 00:30:06,428
you said is we don't want us in them a

760
00:30:04,119 --> 00:30:08,350
big debate that triggered from the

761
00:30:06,429 --> 00:30:09,789
conference's do you think security

762
00:30:08,350 --> 00:30:11,529
engineers should know how to code

763
00:30:09,789 --> 00:30:13,239
because whenever we say stuff that hey

764
00:30:11,529 --> 00:30:15,039
security engineers you really should

765
00:30:13,239 --> 00:30:16,989
remember the code a lot of security

766
00:30:15,039 --> 00:30:19,299
engineers who don't code get really

767
00:30:16,989 --> 00:30:21,879
offended it turns into a lot of us in

768
00:30:19,299 --> 00:30:24,039
them so what do you think what do you

769
00:30:21,879 --> 00:30:25,719
think on this topic I think we all have

770
00:30:24,039 --> 00:30:27,759
various experience I think we all bring

771
00:30:25,720 --> 00:30:29,200
something to the table there's gonna be

772
00:30:27,759 --> 00:30:31,720
an imbalance from here and there but

773
00:30:29,200 --> 00:30:33,489
like I don't necessarily I like to code

774
00:30:31,720 --> 00:30:34,720
it makes my job a lot easier but I know

775
00:30:33,489 --> 00:30:37,389
plenty of people who need to do their

776
00:30:34,720 --> 00:30:38,830
job without coding I would encourage

777
00:30:37,389 --> 00:30:40,299
people to learn how to code but I

778
00:30:38,830 --> 00:30:43,239
wouldn't say if you can't code you're

779
00:30:40,299 --> 00:30:44,619
not security engineer I also don't think

780
00:30:43,239 --> 00:30:46,419
that we should have like titles of

781
00:30:44,619 --> 00:30:50,168
security engineer versus engineer I

782
00:30:46,419 --> 00:30:52,379
think we're all just engineers that's my

783
00:30:50,169 --> 00:30:52,379
take

784
00:30:53,180 --> 00:30:57,099
[Applause]

