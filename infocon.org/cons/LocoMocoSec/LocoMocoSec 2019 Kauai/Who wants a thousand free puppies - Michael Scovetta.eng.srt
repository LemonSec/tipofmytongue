1
00:00:00,060 --> 00:00:05,909
there's a huge an increasing number of

2
00:00:03,000 --> 00:00:09,870
open-source components available this is

3
00:00:05,910 --> 00:00:13,009
the aggregate number of components

4
00:00:09,870 --> 00:00:16,038
available in nougat and PM rubygems and

5
00:00:13,009 --> 00:00:18,539
15 or so other lesser package managers

6
00:00:16,039 --> 00:00:20,609
this comes from a website called module

7
00:00:18,539 --> 00:00:23,130
accounts so there is some duplicate here

8
00:00:20,609 --> 00:00:26,609
but you can see the numbers close to two

9
00:00:23,130 --> 00:00:30,419
million and it's increasing pretty

10
00:00:26,609 --> 00:00:34,380
linearly there's an increasing number of

11
00:00:30,420 --> 00:00:37,110
vulnerabilities out there so in 2018

12
00:00:34,380 --> 00:00:41,489
there were 16 16 thousand and change

13
00:00:37,110 --> 00:00:43,430
those are just the ones with CVEs most

14
00:00:41,489 --> 00:00:47,280
vulnerabilities don't get CVEs

15
00:00:43,430 --> 00:00:48,809
so if you have a github repository and

16
00:00:47,280 --> 00:00:50,489
someone just says oh I found a

17
00:00:48,809 --> 00:00:54,059
cross-site scripting thing in your thing

18
00:00:50,489 --> 00:00:59,459
I say got it fixed PR done merged new

19
00:00:54,059 --> 00:01:01,500
version there's no CV for that there's

20
00:00:59,460 --> 00:01:04,830
also an increase in complexity so when

21
00:01:01,500 --> 00:01:06,030
an engineer pulls in a component they're

22
00:01:04,830 --> 00:01:07,229
not just pulling in that one component

23
00:01:06,030 --> 00:01:09,540
they're pulling in everything that

24
00:01:07,229 --> 00:01:20,610
component depends on and so on down the

25
00:01:09,540 --> 00:01:23,630
line I love this graph I did I kill it

26
00:01:20,610 --> 00:01:23,630
did I break it

27
00:01:26,299 --> 00:01:32,509
I guarantee this was an amazing graph

28
00:01:29,560 --> 00:01:35,210
I'll describe it to you it's this it's

29
00:01:32,509 --> 00:01:37,820
this wonderful universe cloud thing that

30
00:01:35,210 --> 00:01:39,649
shows the dependencies between NPM

31
00:01:37,820 --> 00:01:44,029
modules and it's the it's the the entire

32
00:01:39,649 --> 00:01:45,950
NPM universe and all you can see is it's

33
00:01:44,030 --> 00:01:49,880
just an amazing thing so I'm sorry I

34
00:01:45,950 --> 00:01:54,140
can't show it I can't show the next one

35
00:01:49,880 --> 00:01:54,679
either okay how are we doing there okay

36
00:01:54,140 --> 00:01:59,090
cool

37
00:01:54,679 --> 00:02:02,420
so the next slide that I can't show was

38
00:01:59,090 --> 00:02:04,909
showing mocha the NPM component mocha

39
00:02:02,420 --> 00:02:08,840
when you bring in mocha you bring in 175

40
00:02:04,909 --> 00:02:10,670
in its full dependency graph those are

41
00:02:08,840 --> 00:02:13,549
authored by over a hundred different

42
00:02:10,669 --> 00:02:14,119
contributors the developer just sees

43
00:02:13,549 --> 00:02:15,980
mocha

44
00:02:14,120 --> 00:02:17,330
they just think mocha when you're saying

45
00:02:15,980 --> 00:02:20,390
how many components are usually they're

46
00:02:17,330 --> 00:02:22,760
gonna say one just mocha and it's not

47
00:02:20,390 --> 00:02:25,149
their fault because package matters make

48
00:02:22,760 --> 00:02:27,920
it really easy to just add a component

49
00:02:25,150 --> 00:02:30,080
at the end of the day your company your

50
00:02:27,920 --> 00:02:32,679
or your team you responsible for

51
00:02:30,080 --> 00:02:34,820
everything that you ship everything

52
00:02:32,680 --> 00:02:37,100
because an attacker really doesn't care

53
00:02:34,820 --> 00:02:40,730
who wrote the vulnerability and neither

54
00:02:37,100 --> 00:02:43,280
will your customers so I'm here to talk

55
00:02:40,730 --> 00:02:44,480
about how Microsoft is built and opens

56
00:02:43,280 --> 00:02:47,720
our security program some of the things

57
00:02:44,480 --> 00:02:50,328
that we've learned in particular it's

58
00:02:47,720 --> 00:02:52,340
about our use of open source we also our

59
00:02:50,329 --> 00:02:54,769
publisher of open source not really to

60
00:02:52,340 --> 00:02:56,390
talk about that too much so we made it

61
00:02:54,769 --> 00:02:58,430
really simple we have four steps four

62
00:02:56,390 --> 00:03:00,828
things that we need to do to effectively

63
00:02:58,430 --> 00:03:03,410
manage this first we need to know what

64
00:03:00,829 --> 00:03:06,640
open source we're using this is a

65
00:03:03,410 --> 00:03:09,049
surprisingly difficult thing to achieve

66
00:03:06,640 --> 00:03:10,700
we need a centrally catalog it because

67
00:03:09,049 --> 00:03:12,049
once you have all this information why

68
00:03:10,700 --> 00:03:14,450
not throw it in a database that you can

69
00:03:12,049 --> 00:03:17,959
query we need to make sure that it's

70
00:03:14,450 --> 00:03:20,000
secure actually secure not pretend

71
00:03:17,959 --> 00:03:21,829
secure and when it's not we need to

72
00:03:20,000 --> 00:03:23,269
respond to security vulnerabilities in a

73
00:03:21,829 --> 00:03:28,100
way that that makes sense for the org

74
00:03:23,269 --> 00:03:31,040
and everything so first one identifying

75
00:03:28,100 --> 00:03:32,989
open source this is the creation of a

76
00:03:31,040 --> 00:03:34,250
bill of materials through the commercial

77
00:03:32,989 --> 00:03:36,130
tools to do this there are open source

78
00:03:34,250 --> 00:03:38,170
ones

79
00:03:36,130 --> 00:03:41,019
a lot of organizations have built their

80
00:03:38,170 --> 00:03:43,839
own when you use package managers it

81
00:03:41,020 --> 00:03:47,800
makes this job pretty easily but pretty

82
00:03:43,840 --> 00:03:49,840
easy but not every component comes from

83
00:03:47,800 --> 00:03:52,120
a package matter who knows developers

84
00:03:49,840 --> 00:03:55,080
that just like copy a thing into like a

85
00:03:52,120 --> 00:03:59,500
slash sore slash external directory

86
00:03:55,080 --> 00:04:01,150
those are very often it's more difficult

87
00:03:59,500 --> 00:04:05,020
to pick those things up or if you just

88
00:04:01,150 --> 00:04:07,390
take a snippet from a gist or a stack

89
00:04:05,020 --> 00:04:11,650
overflow comment and just copy it in at

90
00:04:07,390 --> 00:04:13,929
some point it becomes your code but the

91
00:04:11,650 --> 00:04:16,600
larger that the the larger the code that

92
00:04:13,930 --> 00:04:18,070
comes in the more you may want to be

93
00:04:16,600 --> 00:04:19,660
able to identify that as open source so

94
00:04:18,070 --> 00:04:23,140
when a vulnerability affects the larger

95
00:04:19,660 --> 00:04:25,060
thing you can see if you're affected so

96
00:04:23,140 --> 00:04:27,450
the takeaway that we've learned here but

97
00:04:25,060 --> 00:04:29,140
that we've learned from this is

98
00:04:27,450 --> 00:04:29,770
organizations usually fall into one or

99
00:04:29,140 --> 00:04:32,440
two camps

100
00:04:29,770 --> 00:04:34,000
it's the manually attest have every

101
00:04:32,440 --> 00:04:36,490
development team fill out a form that

102
00:04:34,000 --> 00:04:38,980
says what am I you know am I using

103
00:04:36,490 --> 00:04:42,400
jQuery what version and submit it off

104
00:04:38,980 --> 00:04:44,560
that will pick up mocha sometimes if

105
00:04:42,400 --> 00:04:45,729
they remember and it's not too hard and

106
00:04:44,560 --> 00:04:47,710
they don't have a deadline and things

107
00:04:45,730 --> 00:04:50,460
like that you happen this has to be

108
00:04:47,710 --> 00:04:53,469
automated it has to it has to be

109
00:04:50,460 --> 00:04:54,969
automatic it has to come from the fabric

110
00:04:53,470 --> 00:04:57,280
of the engineering system whatever

111
00:04:54,970 --> 00:04:58,590
engineering system you use it has to

112
00:04:57,280 --> 00:05:00,760
just come for free

113
00:04:58,590 --> 00:05:05,289
developers shouldn't shouldn't have to

114
00:05:00,760 --> 00:05:09,640
do anything special for this when when

115
00:05:05,290 --> 00:05:13,020
Microsoft switched from a from annually

116
00:05:09,640 --> 00:05:17,590
at a tested thing to an automated thing

117
00:05:13,020 --> 00:05:21,490
it's no joke like 10,000 times more open

118
00:05:17,590 --> 00:05:24,130
source was found when we did this so

119
00:05:21,490 --> 00:05:24,520
discovery itself is is actually pretty

120
00:05:24,130 --> 00:05:26,590
simple

121
00:05:24,520 --> 00:05:28,090
you have your program source code you've

122
00:05:26,590 --> 00:05:30,969
got artifacts you've got binaries

123
00:05:28,090 --> 00:05:32,169
whatever it is it goes into a bucket the

124
00:05:30,970 --> 00:05:33,940
discovery tool looks at the bucket and

125
00:05:32,170 --> 00:05:36,130
says oh I see using jQuery this version

126
00:05:33,940 --> 00:05:38,260
and via Lib this version and and pulls

127
00:05:36,130 --> 00:05:39,530
that stuff out creates a bill of

128
00:05:38,260 --> 00:05:41,320
materials

129
00:05:39,530 --> 00:05:44,419
great let me throw it in a database

130
00:05:41,320 --> 00:05:44,780
database has to include where you found

131
00:05:44,420 --> 00:05:47,330
it

132
00:05:44,780 --> 00:05:50,239
what this really gets you the best thing

133
00:05:47,330 --> 00:05:53,270
here is how long were revolvers able to

134
00:05:50,240 --> 00:05:54,500
this thing which components who do we

135
00:05:53,270 --> 00:05:56,960
have to go after if you can if you can

136
00:05:54,500 --> 00:06:00,080
turn the picking up the phone and

137
00:05:56,960 --> 00:06:03,590
calling your dev managers exercise into

138
00:06:00,080 --> 00:06:05,419
a query or even better throw that

139
00:06:03,590 --> 00:06:13,909
automatically out to the to the dev

140
00:06:05,420 --> 00:06:15,320
managers you win okay so now we know

141
00:06:13,910 --> 00:06:17,900
what open source we're using but we

142
00:06:15,320 --> 00:06:19,880
don't know if it's secure or not so

143
00:06:17,900 --> 00:06:21,560
every organization can learn about

144
00:06:19,880 --> 00:06:23,060
security vulnerabilities in multiple

145
00:06:21,560 --> 00:06:25,370
ways you can just look at the news and

146
00:06:23,060 --> 00:06:27,950
wait for a website with a logo to come

147
00:06:25,370 --> 00:06:31,070
up you could check for public CVS and

148
00:06:27,950 --> 00:06:33,560
that's that's good and necessary frankly

149
00:06:31,070 --> 00:06:35,719
you could even include some commercial

150
00:06:33,560 --> 00:06:37,940
databases and vendors that go out and

151
00:06:35,720 --> 00:06:40,700
specialize in this whether it's curating

152
00:06:37,940 --> 00:06:44,990
the CVE database or adding their own on

153
00:06:40,700 --> 00:06:46,729
top of that but then you kind of go up

154
00:06:44,990 --> 00:06:50,540
into the higher cost but higher return

155
00:06:46,729 --> 00:06:53,479
category who thinks that you know all

156
00:06:50,540 --> 00:06:55,580
open so I said they're about two million

157
00:06:53,479 --> 00:06:58,099
open source projects out there how many

158
00:06:55,580 --> 00:06:59,349
of them have had someone actually look

159
00:06:58,100 --> 00:07:05,210
at it from a security perspective

160
00:06:59,350 --> 00:07:06,590
probably just the very very tip so if

161
00:07:05,210 --> 00:07:08,659
you're using something especially

162
00:07:06,590 --> 00:07:11,330
something that depends on something way

163
00:07:08,660 --> 00:07:13,360
down the the graph

164
00:07:11,330 --> 00:07:15,890
chances are no one's ever looked at that

165
00:07:13,360 --> 00:07:17,150
and a vulnerability in that thing all

166
00:07:15,890 --> 00:07:22,190
the way down there could affect your

167
00:07:17,150 --> 00:07:25,130
final widget just the same so the way

168
00:07:22,190 --> 00:07:27,770
that we look at it is every open source

169
00:07:25,130 --> 00:07:31,250
component that we use we need to be able

170
00:07:27,770 --> 00:07:33,080
to gather the first four there's a

171
00:07:31,250 --> 00:07:36,710
special category of high risk components

172
00:07:33,080 --> 00:07:39,020
open SSL things that that make

173
00:07:36,710 --> 00:07:41,239
authorization decisions crypto libraries

174
00:07:39,020 --> 00:07:44,330
in general these are things that a

175
00:07:41,240 --> 00:07:46,909
vulnerability there could have a much

176
00:07:44,330 --> 00:07:49,369
deeper impact on your on your thing then

177
00:07:46,909 --> 00:07:51,619
than others so if we're gettin if we

178
00:07:49,369 --> 00:07:55,729
have everyone has limited security

179
00:07:51,619 --> 00:07:58,279
dollars we prioritize those so what this

180
00:07:55,729 --> 00:08:00,169
really means is doing in-depth security

181
00:07:58,279 --> 00:08:03,199
reviews so part of what my team does is

182
00:08:00,169 --> 00:08:06,020
go off and proactively assess open

183
00:08:03,199 --> 00:08:07,399
source components not within the context

184
00:08:06,020 --> 00:08:09,740
of how is it being used because we're

185
00:08:07,399 --> 00:08:12,199
expecting there to be a thousand uses of

186
00:08:09,740 --> 00:08:15,409
open SSL or z Lib or things like that

187
00:08:12,199 --> 00:08:20,929
but instead can this be safely used in

188
00:08:15,409 --> 00:08:22,159
any reasonable context so what does this

189
00:08:20,929 --> 00:08:25,839
really mean we look at things like

190
00:08:22,159 --> 00:08:27,919
project health we will do a code review

191
00:08:25,839 --> 00:08:29,809
depending on the size of the component

192
00:08:27,919 --> 00:08:32,718
we're not going to do a full code review

193
00:08:29,809 --> 00:08:34,130
of OpenSSL is just not not feasible we

194
00:08:32,719 --> 00:08:36,199
look at things like secure configuration

195
00:08:34,130 --> 00:08:37,490
like when you deploy elasticsearch

196
00:08:36,198 --> 00:08:39,859
should you have that exposed to the

197
00:08:37,490 --> 00:08:43,180
internet when we come up with it with

198
00:08:39,860 --> 00:08:47,290
advice there we throw this all into a

199
00:08:43,179 --> 00:08:49,219
into effectively a report will include

200
00:08:47,290 --> 00:08:50,959
obviously public vulnerabilities make

201
00:08:49,220 --> 00:08:52,730
their way into this but then we do

202
00:08:50,959 --> 00:08:54,589
static analysis on everything and it's a

203
00:08:52,730 --> 00:08:57,529
high quality static analysis so we're

204
00:08:54,589 --> 00:08:59,300
not waiting through you know 50,000

205
00:08:57,529 --> 00:09:01,550
false positives to find the one gem

206
00:08:59,300 --> 00:09:04,189
we've kind of tuned it to just find the

207
00:09:01,550 --> 00:09:06,380
things we're really looking for so we

208
00:09:04,189 --> 00:09:10,040
have a dedicated team doing this for for

209
00:09:06,380 --> 00:09:14,480
Microsoft we have a system that we kind

210
00:09:10,040 --> 00:09:16,250
of throw this stuff into and so

211
00:09:14,480 --> 00:09:22,189
component health we score it on a bunch

212
00:09:16,250 --> 00:09:24,649
of different areas we look for things

213
00:09:22,189 --> 00:09:27,469
like typos squatted packages so this is

214
00:09:24,649 --> 00:09:31,639
this is the NPM left pad there's also a

215
00:09:27,470 --> 00:09:34,189
left sad a left pad without the - a left

216
00:09:31,639 --> 00:09:36,470
underscore pad because we needed that -

217
00:09:34,189 --> 00:09:39,079
and a reffed pad some of these were

218
00:09:36,470 --> 00:09:41,380
accidentally you know oh I just created

219
00:09:39,079 --> 00:09:45,310
the package too fast and I made a typo

220
00:09:41,380 --> 00:09:47,990
some of the other ones I'm not so sure

221
00:09:45,310 --> 00:09:49,459
you look at things like maintain errs so

222
00:09:47,990 --> 00:09:51,769
although you can't see the lines on that

223
00:09:49,459 --> 00:09:54,109
the red dot in the middle is left pad

224
00:09:51,769 --> 00:09:55,550
itself the blue ones are connected to

225
00:09:54,110 --> 00:09:57,290
the to the red and those are the

226
00:09:55,550 --> 00:09:58,760
maintainer 's and the yellow ones are

227
00:09:57,290 --> 00:10:00,180
other packages that those maintainer

228
00:09:58,760 --> 00:10:02,760
have contributed to

229
00:10:00,180 --> 00:10:05,939
so this is an emerging idea that that

230
00:10:02,760 --> 00:10:10,980
burr that we're looking at to see can we

231
00:10:05,940 --> 00:10:12,360
infer software quality through what a

232
00:10:10,980 --> 00:10:13,740
maintainer graph looks like is there a

233
00:10:12,360 --> 00:10:18,570
healthy maintainer graph is there an

234
00:10:13,740 --> 00:10:21,930
unhealthy maintainer graph so once we

235
00:10:18,570 --> 00:10:24,600
flag it us as a flag a component as as

236
00:10:21,930 --> 00:10:26,880
vulnerable or dangerous or we use the

237
00:10:24,600 --> 00:10:27,990
phrase use discouraged because we don't

238
00:10:26,880 --> 00:10:30,330
have the context if you're not

239
00:10:27,990 --> 00:10:32,700
exploitable you have to make the

240
00:10:30,330 --> 00:10:33,810
decision yourself but we can we can give

241
00:10:32,700 --> 00:10:36,390
you the bit the best advice we can

242
00:10:33,810 --> 00:10:41,689
without that context so we have we

243
00:10:36,390 --> 00:10:43,949
include once we flag a component as bad

244
00:10:41,690 --> 00:10:46,560
that goes into a stream and the stream

245
00:10:43,950 --> 00:10:49,490
is combined with up-to-date public

246
00:10:46,560 --> 00:10:52,560
vulnerability data cv ease curated stuff

247
00:10:49,490 --> 00:10:54,180
static analysis results and engineers

248
00:10:52,560 --> 00:10:56,699
are automatically notified this is the

249
00:10:54,180 --> 00:10:59,089
key piece that makes this all work so

250
00:10:56,700 --> 00:11:03,270
when engineer comes in on Monday morning

251
00:10:59,090 --> 00:11:05,190
includes a component Tuesday we get

252
00:11:03,270 --> 00:11:05,670
around to reviewing that component take

253
00:11:05,190 --> 00:11:08,430
a look

254
00:11:05,670 --> 00:11:10,020
you say no good probably Wednesday

255
00:11:08,430 --> 00:11:13,949
morning they'll get a work item that

256
00:11:10,020 --> 00:11:16,620
says you effectively don't use this

257
00:11:13,950 --> 00:11:18,780
component and what we usually say is

258
00:11:16,620 --> 00:11:24,750
upgrade to the latest stable that but by

259
00:11:18,780 --> 00:11:27,089
far that's the most common scenario but

260
00:11:24,750 --> 00:11:30,390
we do find new vulnerabilities to and

261
00:11:27,090 --> 00:11:33,420
when we do we work with nsrc with our

262
00:11:30,390 --> 00:11:35,490
response center to to get those out back

263
00:11:33,420 --> 00:11:38,449
to the authors to get them fixed we

264
00:11:35,490 --> 00:11:42,770
strongly discourage internal forking

265
00:11:38,450 --> 00:11:42,770
because those Forks tend to live forever

266
00:11:42,980 --> 00:11:46,920
but there's a key difference in managing

267
00:11:45,240 --> 00:11:48,780
response process around open source and

268
00:11:46,920 --> 00:11:50,000
that's because we don't really have you

269
00:11:48,780 --> 00:11:52,740
know it's different than managing

270
00:11:50,000 --> 00:11:54,210
response on an internal team you don't

271
00:11:52,740 --> 00:11:56,460
know who the authors are you don't know

272
00:11:54,210 --> 00:11:57,900
if if you're actually talking to the

273
00:11:56,460 --> 00:11:59,130
author or if the author has his

274
00:11:57,900 --> 00:12:03,660
credentials compromised and you're

275
00:11:59,130 --> 00:12:05,880
talking to quote the bad guy so it's

276
00:12:03,660 --> 00:12:09,569
it's it's nuanced and it's it's a bit

277
00:12:05,880 --> 00:12:11,010
harder and different so we've talked

278
00:12:09,570 --> 00:12:11,940
about these four

279
00:12:11,010 --> 00:12:14,450
there's a couple of things that you

280
00:12:11,940 --> 00:12:17,940
should be thinking thinking about them

281
00:12:14,450 --> 00:12:22,290
first building from source so when you

282
00:12:17,940 --> 00:12:23,790
include open source you can include it

283
00:12:22,290 --> 00:12:24,930
as source there were also lots of

284
00:12:23,790 --> 00:12:28,889
package manage that will just give you a

285
00:12:24,930 --> 00:12:30,449
binary like nougat do you have it you

286
00:12:28,889 --> 00:12:34,260
have no assurance that the binary

287
00:12:30,449 --> 00:12:36,540
matches the source for that for that

288
00:12:34,260 --> 00:12:37,589
matter a lot of package managers aren't

289
00:12:36,540 --> 00:12:39,389
really reflecting the source either

290
00:12:37,589 --> 00:12:42,720
they're reflecting at our file that

291
00:12:39,389 --> 00:12:44,670
someone uploaded but the binary it's

292
00:12:42,720 --> 00:12:49,380
very difficult to analyze a binary to

293
00:12:44,670 --> 00:12:52,889
say what is this thing really doing when

294
00:12:49,380 --> 00:12:54,510
you include open source are you pulling

295
00:12:52,889 --> 00:12:58,050
it from the Internet is your CI system

296
00:12:54,510 --> 00:13:02,370
just wired up to nougat org or NPM or

297
00:12:58,050 --> 00:13:04,290
rubygems if so like how quickly you

298
00:13:02,370 --> 00:13:06,540
could kind of turn this model on its

299
00:13:04,290 --> 00:13:07,829
head and say how quickly could have

300
00:13:06,540 --> 00:13:09,990
vulnerability to be introduced in a

301
00:13:07,829 --> 00:13:12,029
thing in an open source component and

302
00:13:09,990 --> 00:13:15,390
have CI systems pick it up and deploy it

303
00:13:12,029 --> 00:13:16,620
out to customers because the rest of the

304
00:13:15,390 --> 00:13:19,800
development world wants to minimize that

305
00:13:16,620 --> 00:13:22,050
time and if you're pulling from you know

306
00:13:19,800 --> 00:13:25,469
if you're if you're configured to you

307
00:13:22,050 --> 00:13:29,099
know use latest that could be that could

308
00:13:25,470 --> 00:13:33,079
be very dangerous we talked about

309
00:13:29,100 --> 00:13:35,279
typosquatting a little bit freshness so

310
00:13:33,079 --> 00:13:36,390
as I said you know usually we tell

311
00:13:35,279 --> 00:13:39,120
people to just upgrade to the latest

312
00:13:36,390 --> 00:13:40,800
stable and we've got we got to thinking

313
00:13:39,120 --> 00:13:42,180
what if we just didn't have to do the

314
00:13:40,800 --> 00:13:43,529
whole vulnerability thing and just tell

315
00:13:42,180 --> 00:13:45,810
people to upgrade to the latest stable

316
00:13:43,529 --> 00:13:47,189
since that's the usual advice we're not

317
00:13:45,810 --> 00:13:52,099
really going to go that far but we are

318
00:13:47,190 --> 00:13:54,600
pushing a we're an engineering hygiene

319
00:13:52,100 --> 00:13:56,279
position of keep your open-source

320
00:13:54,600 --> 00:13:58,980
components up-to-date they don't need to

321
00:13:56,279 --> 00:14:02,130
be immediately up-to-date but they

322
00:13:58,980 --> 00:14:04,290
should be they shouldn't be taken and

323
00:14:02,130 --> 00:14:06,300
then used forever until someone comes

324
00:14:04,290 --> 00:14:08,459
and tells them not to the important

325
00:14:06,300 --> 00:14:09,569
thing here is this is when there were no

326
00:14:08,459 --> 00:14:11,040
vulnerabilities obviously if there's a

327
00:14:09,569 --> 00:14:12,870
vulnerability you have to do something

328
00:14:11,040 --> 00:14:15,360
about it but you have you ever component

329
00:14:12,870 --> 00:14:18,240
out there that is just it's abandoned

330
00:14:15,360 --> 00:14:19,920
it's not maintained it's it you know

331
00:14:18,240 --> 00:14:21,510
sometimes it's because the component is

332
00:14:19,920 --> 00:14:23,290
complete and there's nothing left to add

333
00:14:21,510 --> 00:14:26,869
to left pad

334
00:14:23,290 --> 00:14:29,179
but often you you want to be getting a

335
00:14:26,869 --> 00:14:33,259
lot of security value from just

336
00:14:29,179 --> 00:14:35,449
upgrading analyzing high-risk components

337
00:14:33,259 --> 00:14:37,040
is easy to say oh this is a high risk

338
00:14:35,449 --> 00:14:38,540
component and and usually when you look

339
00:14:37,040 --> 00:14:41,779
at it you can do it how do you do that

340
00:14:38,540 --> 00:14:45,199
at scale so looking for looking for ways

341
00:14:41,779 --> 00:14:47,089
to identify from it from a very large

342
00:14:45,199 --> 00:14:50,809
set of open source components which ones

343
00:14:47,089 --> 00:14:52,369
should you be looking at yourself and

344
00:14:50,809 --> 00:14:56,089
then tying this all together into a kind

345
00:14:52,369 --> 00:14:58,279
of a coherent program management around

346
00:14:56,089 --> 00:15:01,579
open source how you know are you

347
00:14:58,279 --> 00:15:03,139
managing this out of a compliance group

348
00:15:01,579 --> 00:15:06,008
is this managed out of an engineering

349
00:15:03,139 --> 00:15:08,299
team is this the seaso office you know

350
00:15:06,009 --> 00:15:10,189
are they looking at open source as a

351
00:15:08,299 --> 00:15:12,829
thing in and of itself or is it

352
00:15:10,189 --> 00:15:15,949
considered a third party supplier kind

353
00:15:12,829 --> 00:15:18,859
of domain there are lots of ways to get

354
00:15:15,949 --> 00:15:21,849
to goodness here but being deliberate

355
00:15:18,860 --> 00:15:21,850
about it I think has a lot of advantages

356
00:15:21,910 --> 00:15:33,829
so last summer there was a backdoor

357
00:15:29,259 --> 00:15:36,799
thrown into a eslint scope I think

358
00:15:33,829 --> 00:15:39,679
probably who here is familiar with the

359
00:15:36,799 --> 00:15:42,259
es Lynch Scopus story okay so the author

360
00:15:39,679 --> 00:15:45,139
had doesn't his credentials popped bad

361
00:15:42,259 --> 00:15:47,899
guys went in through a different version

362
00:15:45,139 --> 00:15:50,749
of it out there and that was really bad

363
00:15:47,899 --> 00:15:53,119
so we got ourselves we got to thinking

364
00:15:50,749 --> 00:15:55,249
like are there any more out there maybe

365
00:15:53,119 --> 00:15:57,769
this wasn't the only thing that did get

366
00:15:55,249 --> 00:16:00,529
that they that was pumped

367
00:15:57,769 --> 00:16:02,029
we we're a little bit more real and we

368
00:16:00,529 --> 00:16:03,709
said how many more are there are they're

369
00:16:02,029 --> 00:16:08,209
out there with you know so many packages

370
00:16:03,709 --> 00:16:12,138
out there they can't all be clean so we

371
00:16:08,209 --> 00:16:14,868
did an experiment we looked for you know

372
00:16:12,139 --> 00:16:17,059
we we built a static analysis rule that

373
00:16:14,869 --> 00:16:19,910
could detect es lint or parts of the the

374
00:16:17,059 --> 00:16:22,519
es link scope backdoor and we ran it

375
00:16:19,910 --> 00:16:25,969
across a sample of NPM projects just to

376
00:16:22,519 --> 00:16:27,949
see what we would see basically what

377
00:16:25,970 --> 00:16:32,240
this did was it looked for data coming

378
00:16:27,949 --> 00:16:33,589
from and an untrusted user flowing into

379
00:16:32,240 --> 00:16:36,500
the app and then

380
00:16:33,590 --> 00:16:41,900
be concatenated and then piping to you

381
00:16:36,500 --> 00:16:44,750
know command exactly so ramus against

382
00:16:41,900 --> 00:16:50,680
50,000 completely randomly sampled

383
00:16:44,750 --> 00:16:50,680
components found 14 vulnerabilities

384
00:16:51,370 --> 00:16:58,940
triage them all they were all real

385
00:16:56,110 --> 00:17:00,680
working with nsrc getting the authors

386
00:16:58,940 --> 00:17:02,210
notified and fixed in all of that

387
00:17:00,680 --> 00:17:03,829
there's a good there's a really good

388
00:17:02,210 --> 00:17:06,230
takeaway here though and that is that

389
00:17:03,830 --> 00:17:08,540
none of these appeared to be malicious

390
00:17:06,230 --> 00:17:12,349
the difference between a backdoor and a

391
00:17:08,540 --> 00:17:15,200
vulnerability its kind of intent I can't

392
00:17:12,349 --> 00:17:18,290
really infer intent from static analysis

393
00:17:15,200 --> 00:17:20,360
to well so these look like just sloppy

394
00:17:18,290 --> 00:17:21,740
accidental normal run of the no

395
00:17:20,359 --> 00:17:25,879
vulnerability but there were absolutely

396
00:17:21,740 --> 00:17:30,020
remote code execution from from a yet or

397
00:17:25,880 --> 00:17:35,510
a post request so we think that this

398
00:17:30,020 --> 00:17:38,860
approach has legs that looking for being

399
00:17:35,510 --> 00:17:42,230
able to scan an entire ecosystem for a

400
00:17:38,860 --> 00:17:45,709
case a very tightly defined class of

401
00:17:42,230 --> 00:17:53,030
vulnerability it has a lot of well it

402
00:17:45,710 --> 00:17:54,350
has legs so some key takeaways first you

403
00:17:53,030 --> 00:17:56,320
have to have an inaccurate inventory of

404
00:17:54,350 --> 00:17:59,919
the open source that you use if you're

405
00:17:56,320 --> 00:18:03,580
looking for developers to manually

406
00:17:59,920 --> 00:18:05,480
attest you're getting a very very low

407
00:18:03,580 --> 00:18:09,590
response there you have to automate this

408
00:18:05,480 --> 00:18:15,310
stuff use high quality data sources CVS

409
00:18:09,590 --> 00:18:17,090
are good but not don't stop at CVS

410
00:18:15,310 --> 00:18:19,010
leverage your existing incident

411
00:18:17,090 --> 00:18:21,350
management processes to do this stuff

412
00:18:19,010 --> 00:18:23,570
don't try to invent your own you know

413
00:18:21,350 --> 00:18:25,219
custom open-source response thing

414
00:18:23,570 --> 00:18:31,520
leverage the larger system if you have

415
00:18:25,220 --> 00:18:33,980
one when talking to developers a

416
00:18:31,520 --> 00:18:35,570
question that I get pretty often is how

417
00:18:33,980 --> 00:18:39,740
do I know if I'm vulnerable to this and

418
00:18:35,570 --> 00:18:41,960
the answer is usually just upgrade the

419
00:18:39,740 --> 00:18:44,240
time that you spend determining if you

420
00:18:41,960 --> 00:18:45,190
are vulnerable to this for this

421
00:18:44,240 --> 00:18:46,720
vulnerability

422
00:18:45,190 --> 00:18:48,749
may have to be repeated for the next

423
00:18:46,720 --> 00:18:50,710
vulnerability and the next one and

424
00:18:48,749 --> 00:18:53,229
eventually you can upgrade anyway so

425
00:18:50,710 --> 00:18:55,330
just just upgrade sometimes that's just

426
00:18:53,229 --> 00:18:57,519
not feasible and usually that's because

427
00:18:55,330 --> 00:19:02,428
I'm using this version from nine years

428
00:18:57,519 --> 00:19:06,729
ago and everything has changed and so

429
00:19:02,429 --> 00:19:08,080
life can be difficult keep a closer eye

430
00:19:06,729 --> 00:19:13,090
on the on the high-risk open source that

431
00:19:08,080 --> 00:19:17,320
you're using the way that we recreated a

432
00:19:13,090 --> 00:19:19,658
graph of the relative risk of of

433
00:19:17,320 --> 00:19:21,070
different open source components and it

434
00:19:19,659 --> 00:19:23,649
always looks the same we tried different

435
00:19:21,070 --> 00:19:25,418
algorithms and it's always this like you

436
00:19:23,649 --> 00:19:27,099
know super high risk stuff all the way

437
00:19:25,419 --> 00:19:29,679
up here and then a really really long

438
00:19:27,099 --> 00:19:33,700
tail of lower stuff that doesn't matter

439
00:19:29,679 --> 00:19:37,539
very much have a way of doing that

440
00:19:33,700 --> 00:19:40,210
within your organization certainly keep

441
00:19:37,539 --> 00:19:41,979
up to date if there is one thing that I

442
00:19:40,210 --> 00:19:44,769
could have had a magic wand and I could

443
00:19:41,979 --> 00:19:46,239
have developers just do one thing would

444
00:19:44,769 --> 00:19:49,720
be to have us have a process of keeping

445
00:19:46,239 --> 00:19:50,919
yourself up to date and then just just

446
00:19:49,720 --> 00:19:54,009
try to stay on top of this there's

447
00:19:50,919 --> 00:19:56,200
always new package managers coming out

448
00:19:54,009 --> 00:19:58,559
and ways to include things and just the

449
00:19:56,200 --> 00:20:02,049
industry itself is moving so quickly

450
00:19:58,559 --> 00:20:04,210
have-have you know to have a you know

451
00:20:02,049 --> 00:20:07,389
even a small team thinking about what's

452
00:20:04,210 --> 00:20:11,259
coming next let's you let you get there

453
00:20:07,389 --> 00:20:13,029
before you're in you're in hot water so

454
00:20:11,259 --> 00:20:14,889
a lot of people think about open sources

455
00:20:13,029 --> 00:20:17,019
it's free it's free like in beer - free

456
00:20:14,889 --> 00:20:21,459
liken and whatever it's not it's free

457
00:20:17,019 --> 00:20:28,240
like a free puppy that's my clothes

458
00:20:21,460 --> 00:20:30,800
[Applause]

459
00:20:28,240 --> 00:20:34,220
so do you plan on open sourcing your

460
00:20:30,800 --> 00:20:36,740
open-source package evaluation tool I

461
00:20:34,220 --> 00:20:38,240
would so I'm a big proponent of open

462
00:20:36,740 --> 00:20:40,210
sourcing the stuff a lot of a lot of

463
00:20:38,240 --> 00:20:43,010
things are not like there's very little

464
00:20:40,210 --> 00:20:44,600
Microsoft specific stuff in there I

465
00:20:43,010 --> 00:20:48,410
would love to

466
00:20:44,600 --> 00:20:50,929
it's that tool actually was just we just

467
00:20:48,410 --> 00:20:53,390
released it well we just made it

468
00:20:50,930 --> 00:20:54,440
available internally a few weeks ago so

469
00:20:53,390 --> 00:20:58,670
we're gonna give a little bit of time to

470
00:20:54,440 --> 00:21:02,630
mature but I would love to not have all

471
00:20:58,670 --> 00:21:05,900
of us be reinventing the same tooling

472
00:21:02,630 --> 00:21:08,030
that's kind of commodity and the

473
00:21:05,900 --> 00:21:09,200
scariness of open source is the

474
00:21:08,030 --> 00:21:11,120
scariness of open source really about

475
00:21:09,200 --> 00:21:13,730
open source or just about dependencies

476
00:21:11,120 --> 00:21:15,080
whether open source or not I think open

477
00:21:13,730 --> 00:21:18,200
source is a little bit different in that

478
00:21:15,080 --> 00:21:20,060
regard than traditional dependencies a

479
00:21:18,200 --> 00:21:22,310
third-party dependency like a commercial

480
00:21:20,060 --> 00:21:25,669
vendor you have kind of a neck to choke

481
00:21:22,310 --> 00:21:27,530
that has an incentive to kind of keep

482
00:21:25,670 --> 00:21:29,240
you happy in some way where's the open

483
00:21:27,530 --> 00:21:32,480
source community you're relying on

484
00:21:29,240 --> 00:21:36,010
goodwill you're relying on people who by

485
00:21:32,480 --> 00:21:38,300
and large you've never met and who's

486
00:21:36,010 --> 00:21:41,360
there their commitment to the project

487
00:21:38,300 --> 00:21:43,399
kind of depends greatly on what type of

488
00:21:41,360 --> 00:21:44,629
project it is so there are certainly

489
00:21:43,400 --> 00:21:48,550
some open source projects that are

490
00:21:44,630 --> 00:21:51,080
stellar and amazing in how they kind of

491
00:21:48,550 --> 00:21:52,520
treat their customers and kind of adapt

492
00:21:51,080 --> 00:21:55,129
and and and all that and then there were

493
00:21:52,520 --> 00:21:57,800
a lot of single-person this was a hobby

494
00:21:55,130 --> 00:22:02,120
project a thing that I published a year

495
00:21:57,800 --> 00:22:07,600
ago and I have no desire to to kind of

496
00:22:02,120 --> 00:22:07,600
maintain this absolutely

497
00:22:12,510 --> 00:22:20,010
what's your criteria to identify

498
00:22:14,400 --> 00:22:21,780
high-risk OSS so I could sprinkle some

499
00:22:20,010 --> 00:22:24,020
machine learning magic on things but

500
00:22:21,780 --> 00:22:26,520
effectively what we did was we took

501
00:22:24,020 --> 00:22:28,260
certain things that we just felt made it

502
00:22:26,520 --> 00:22:31,910
high risk like that has the word crypto

503
00:22:28,260 --> 00:22:34,170
in the name or things like that those

504
00:22:31,910 --> 00:22:36,510
it's effectively a weighted average of a

505
00:22:34,170 --> 00:22:40,530
bunch of different things and then when

506
00:22:36,510 --> 00:22:42,180
we when we ran it we kind of tuned it

507
00:22:40,530 --> 00:22:45,060
until the things that we knew were high

508
00:22:42,180 --> 00:22:50,340
risk were kind of at the top anyway it's

509
00:22:45,060 --> 00:22:55,139
not super academic but it was good

510
00:22:50,340 --> 00:23:00,649
enough for for uh for what we needed it

511
00:22:55,140 --> 00:23:02,880
for when using third party commercial

512
00:23:00,650 --> 00:23:08,070
components do you apply the same

513
00:23:02,880 --> 00:23:10,680
processes to those as OSS no so third

514
00:23:08,070 --> 00:23:12,389
party commercial components because we

515
00:23:10,680 --> 00:23:14,370
don't usually have a source code we can

516
00:23:12,390 --> 00:23:16,680
tell the vendor attest to us that you

517
00:23:14,370 --> 00:23:18,870
have followed the SDL or yet you know

518
00:23:16,680 --> 00:23:19,980
you have a coherent security management

519
00:23:18,870 --> 00:23:22,500
program and you're following it and

520
00:23:19,980 --> 00:23:25,260
things like that we do usually have get

521
00:23:22,500 --> 00:23:28,170
the right to audit source code and pen

522
00:23:25,260 --> 00:23:31,260
tests and things like that but it is run

523
00:23:28,170 --> 00:23:34,080
more out of a procurement area and the

524
00:23:31,260 --> 00:23:37,080
tracking system that we use so you saw

525
00:23:34,080 --> 00:23:40,439
the the tracking system that that we're

526
00:23:37,080 --> 00:23:42,419
using we have a back-end as your dev ops

527
00:23:40,440 --> 00:23:44,670
just work item tracking thing for our

528
00:23:42,420 --> 00:23:46,410
own internal work but that's not very

529
00:23:44,670 --> 00:23:50,460
interesting we have a separate system

530
00:23:46,410 --> 00:23:53,790
for tracking open source usage so so

531
00:23:50,460 --> 00:23:54,990
what the the the developers see is you

532
00:23:53,790 --> 00:23:56,250
know they get a list of here's old Lee

533
00:23:54,990 --> 00:23:59,490
open source that you're using and this

534
00:23:56,250 --> 00:24:01,950
is good good good bad bad bad that's an

535
00:23:59,490 --> 00:24:03,870
internal system that we have that we've

536
00:24:01,950 --> 00:24:06,080
a different team at Microsoft is built

537
00:24:03,870 --> 00:24:06,080
for us

538
00:24:07,080 --> 00:24:14,099
I think that's it thank you very much

539
00:24:10,410 --> 00:24:14,099
[Applause]

