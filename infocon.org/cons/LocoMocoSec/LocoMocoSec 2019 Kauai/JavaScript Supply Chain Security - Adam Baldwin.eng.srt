1
00:00:00,060 --> 00:00:06,540
all right cool hey all right so yeah I'm

2
00:00:03,410 --> 00:00:10,099
I'm Adam Baldwin I'm a security wombat

3
00:00:06,540 --> 00:00:12,690
at NPM the VP of security and I get the

4
00:00:10,099 --> 00:00:17,009
pleasure of trying to secure the world's

5
00:00:12,690 --> 00:00:19,859
largest package ecosystem my first

6
00:00:17,010 --> 00:00:22,109
contribution to open source was seven

7
00:00:19,859 --> 00:00:23,880
years ago and it was actually to the NPM

8
00:00:22,109 --> 00:00:25,560
registry this was this is kind of

9
00:00:23,880 --> 00:00:27,119
happenstance my first pull request was

10
00:00:25,560 --> 00:00:28,320
to fix a cross-site scripting

11
00:00:27,119 --> 00:00:30,840
vulnerability in the registry and that

12
00:00:28,320 --> 00:00:34,320
was before before it was a company

13
00:00:30,840 --> 00:00:35,850
before it was vc-backed and shortly

14
00:00:34,320 --> 00:00:38,430
after that I started the node security

15
00:00:35,850 --> 00:00:41,850
project and this was to bring security

16
00:00:38,430 --> 00:00:43,890
to security as a core value to the node

17
00:00:41,850 --> 00:00:46,890
ecosystem right it was very early on

18
00:00:43,890 --> 00:00:49,739
it's like node zero point two days and

19
00:00:46,890 --> 00:00:51,840
no one was doing anything with security

20
00:00:49,739 --> 00:00:55,379
and node I'd show up at developer events

21
00:00:51,840 --> 00:00:57,510
and talk and meet people and no one knew

22
00:00:55,379 --> 00:00:59,550
what pen testing was clicking pens like

23
00:00:57,510 --> 00:01:00,839
they didn't know what what application

24
00:00:59,550 --> 00:01:02,608
security wasn't a thing and so we were

25
00:01:00,840 --> 00:01:05,040
we were just trying to promote the OS

26
00:01:02,609 --> 00:01:07,080
top ten and and talk about security to

27
00:01:05,040 --> 00:01:11,130
make it to make it make it better and

28
00:01:07,080 --> 00:01:12,900
along that journey we started we made a

29
00:01:11,130 --> 00:01:15,210
database of vulnerabilities and we built

30
00:01:12,900 --> 00:01:16,470
some tooling to look through packages

31
00:01:15,210 --> 00:01:19,530
and that's kind of where we sat this was

32
00:01:16,470 --> 00:01:24,390
six years ago and it hasn't changed much

33
00:01:19,530 --> 00:01:26,250
since about a year ago my company had

34
00:01:24,390 --> 00:01:28,770
lift secured it got acquired by NPM this

35
00:01:26,250 --> 00:01:32,130
was an PM's strategy to move beyond

36
00:01:28,770 --> 00:01:35,850
being a bit store write an archive store

37
00:01:32,130 --> 00:01:38,009
and to become the tooling that the

38
00:01:35,850 --> 00:01:41,939
ecosystem needs right the compliance

39
00:01:38,009 --> 00:01:43,470
doing the security tooling and yeah I

40
00:01:41,939 --> 00:01:44,758
often said when I first started the node

41
00:01:43,470 --> 00:01:46,920
security project the best way to own the

42
00:01:44,759 --> 00:01:48,360
registry was good to get a job at NPM

43
00:01:46,920 --> 00:01:49,860
after the company was established and

44
00:01:48,360 --> 00:01:52,740
this happened eventually

45
00:01:49,860 --> 00:01:56,340
so that was kind of fun so my agenda

46
00:01:52,740 --> 00:01:58,140
today is to really help everyone here

47
00:01:56,340 --> 00:02:00,450
understand what NPM and what that that

48
00:01:58,140 --> 00:02:02,759
sort of dependency that supply chain

49
00:02:00,450 --> 00:02:04,680
risk is to understand what our security

50
00:02:02,759 --> 00:02:07,170
challenges are and understand what we're

51
00:02:04,680 --> 00:02:09,239
doing to help build confidence in the

52
00:02:07,170 --> 00:02:11,370
registry and in that ecosystem even

53
00:02:09,239 --> 00:02:12,599
though it's not perfect and then kind of

54
00:02:11,370 --> 00:02:13,200
talk about what the future looks like

55
00:02:12,599 --> 00:02:15,599
there and what

56
00:02:13,200 --> 00:02:21,359
we're doing so what the hell is this NPM

57
00:02:15,599 --> 00:02:24,060
thing anyway it it is the node it is

58
00:02:21,360 --> 00:02:27,180
bundled with node originally to bring in

59
00:02:24,060 --> 00:02:29,459
JavaScript packages right people think

60
00:02:27,180 --> 00:02:31,650
it stands for node package manager it

61
00:02:29,459 --> 00:02:33,860
just has no particular meaning it is

62
00:02:31,650 --> 00:02:37,769
actually not know the factory manager

63
00:02:33,860 --> 00:02:39,599
but for most developers it's a CLI they

64
00:02:37,769 --> 00:02:41,700
run this command and they bring in a

65
00:02:39,599 --> 00:02:43,230
dependency right they bring in some

66
00:02:41,700 --> 00:02:44,760
piece of code so they can stitch it

67
00:02:43,230 --> 00:02:49,130
together so they can dick endeavor

68
00:02:44,760 --> 00:02:49,130
really really fast they can be efficient

69
00:02:49,970 --> 00:02:55,650
this is what a typical application looks

70
00:02:52,799 --> 00:02:57,269
like we have are sort of like this is

71
00:02:55,650 --> 00:02:58,709
what a typical node package looks like

72
00:02:57,269 --> 00:03:01,290
as well as an application you have your

73
00:02:58,709 --> 00:03:03,390
code at the top right you have

74
00:03:01,290 --> 00:03:05,370
dependencies and this is kind of in

75
00:03:03,390 --> 00:03:07,679
levels deep and you think about it like

76
00:03:05,370 --> 00:03:10,290
an iceberg the developer knows again as

77
00:03:07,680 --> 00:03:12,299
was said earlier I think Michael the

78
00:03:10,290 --> 00:03:14,069
developer knows about say mocha or you

79
00:03:12,299 --> 00:03:15,120
know helmet or Express or whatever they

80
00:03:14,069 --> 00:03:16,589
don't know about the rest of this

81
00:03:15,120 --> 00:03:19,590
iceberg underneath they don't really

82
00:03:16,590 --> 00:03:21,660
care about that and you have you know

83
00:03:19,590 --> 00:03:23,190
again another layer that doesn't gets

84
00:03:21,660 --> 00:03:25,139
really talked about much and that's the

85
00:03:23,190 --> 00:03:28,650
the maintainer is underneath this is all

86
00:03:25,139 --> 00:03:35,579
foundational foundation on humans right

87
00:03:28,650 --> 00:03:39,380
maintainer z' 97% of modern web

88
00:03:35,579 --> 00:03:43,230
applications and this is being generous

89
00:03:39,380 --> 00:03:45,920
our third-party code you're bringing in

90
00:03:43,230 --> 00:03:48,238
code so your shipping code to production

91
00:03:45,920 --> 00:03:49,290
the majority of the people writing code

92
00:03:48,239 --> 00:03:50,609
that you're shipping to production are

93
00:03:49,290 --> 00:03:53,209
not employees there aren't people you

94
00:03:50,609 --> 00:03:55,889
control you have no control over it

95
00:03:53,209 --> 00:03:58,620
what's interesting about this this fact

96
00:03:55,889 --> 00:04:02,040
97% of this code is that we did a survey

97
00:03:58,620 --> 00:04:06,090
in 2017 2018 2018 and 33 thousand

98
00:04:02,040 --> 00:04:08,429
respondents 83% of those people were

99
00:04:06,090 --> 00:04:10,430
concerned about the security of the open

100
00:04:08,430 --> 00:04:14,700
source code that they were bringing in

101
00:04:10,430 --> 00:04:16,620
and 86% we're concerned about the code

102
00:04:14,700 --> 00:04:17,639
that they write themselves they were

103
00:04:16,620 --> 00:04:18,780
more concerned about the code that

104
00:04:17,639 --> 00:04:20,519
they're writing versus the code that

105
00:04:18,779 --> 00:04:23,219
they're bringing in despite it being a

106
00:04:20,519 --> 00:04:26,630
very very small percentage of the code

107
00:04:23,220 --> 00:04:29,090
that they're they're using

108
00:04:26,630 --> 00:04:31,969
APM is also a registry of packages in

109
00:04:29,090 --> 00:04:34,190
fact this slide is out of date I updated

110
00:04:31,970 --> 00:04:36,680
it yesterday there's now nine hundred

111
00:04:34,190 --> 00:04:40,460
and sixty-three thousand packages in the

112
00:04:36,680 --> 00:04:42,440
registry that is over that number at the

113
00:04:40,460 --> 00:04:45,140
bottom is also wrong it's right around

114
00:04:42,440 --> 00:04:46,640
eight million individual package version

115
00:04:45,140 --> 00:04:48,860
combinations when you think about the

116
00:04:46,640 --> 00:04:51,770
scale individual combinations of things

117
00:04:48,860 --> 00:04:54,970
that you can have out there we get

118
00:04:51,770 --> 00:04:59,450
seventy seven hundred publishes a day

119
00:04:54,970 --> 00:05:05,000
publishes new stuff in the registry 2.1

120
00:04:59,450 --> 00:05:08,240
billion downloads per day eleven million

121
00:05:05,000 --> 00:05:12,560
developers consuming from the registry

122
00:05:08,240 --> 00:05:14,570
and over 1 million of those are package

123
00:05:12,560 --> 00:05:16,430
maintainers they're publishing code to

124
00:05:14,570 --> 00:05:19,099
the registry that's the scale we're

125
00:05:16,430 --> 00:05:21,320
talking everyone is using javascript and

126
00:05:19,100 --> 00:05:23,390
i don't care if you read the mata Sano

127
00:05:21,320 --> 00:05:25,490
article from 2011 that says Java Script

128
00:05:23,390 --> 00:05:28,460
crypto is bad and want to yell at me

129
00:05:25,490 --> 00:05:30,410
about how Java Script is bad your

130
00:05:28,460 --> 00:05:32,270
developers are using Java Script it

131
00:05:30,410 --> 00:05:34,370
exists in your environment it is running

132
00:05:32,270 --> 00:05:38,150
it is something that you have to deal

133
00:05:34,370 --> 00:05:41,560
with and help enable happen governments

134
00:05:38,150 --> 00:05:43,520
finance you know FinTech and like in

135
00:05:41,560 --> 00:05:45,050
entertainment political parties foreign

136
00:05:43,520 --> 00:05:47,630
and domestic governments they're using

137
00:05:45,050 --> 00:05:50,810
javascript and npm is the supplier of

138
00:05:47,630 --> 00:05:55,040
that that javascript and a hint it's not

139
00:05:50,810 --> 00:05:58,520
just JavaScript there's native code that

140
00:05:55,040 --> 00:06:00,080
is that is distributed c c++ that gets

141
00:05:58,520 --> 00:06:02,150
built when you download it may have pre

142
00:06:00,080 --> 00:06:03,440
bit blind ears or may build right so you

143
00:06:02,150 --> 00:06:05,000
not only have to worry about the sort of

144
00:06:03,440 --> 00:06:06,320
the JavaScript flaws be used to also

145
00:06:05,000 --> 00:06:08,540
have to worry about sort of the native

146
00:06:06,320 --> 00:06:10,130
code flaws classic buffer overflows

147
00:06:08,540 --> 00:06:13,010
those kind of things

148
00:06:10,130 --> 00:06:14,810
there's thousands of native modules that

149
00:06:13,010 --> 00:06:16,340
are in the registry bcrypt

150
00:06:14,810 --> 00:06:18,080
one of the most popular libraries is a

151
00:06:16,340 --> 00:06:21,859
native module depending on how it gets

152
00:06:18,080 --> 00:06:23,510
brought in your project this is kind of

153
00:06:21,860 --> 00:06:25,970
what that flow of information looks like

154
00:06:23,510 --> 00:06:27,830
it's it's I made it kind of asymmetric

155
00:06:25,970 --> 00:06:29,990
because it's kind of a wonky wonky deal

156
00:06:27,830 --> 00:06:31,490
you have a developer that's shipping

157
00:06:29,990 --> 00:06:33,110
code this is this is kind of where you

158
00:06:31,490 --> 00:06:37,080
can see that get the feel for how you're

159
00:06:33,110 --> 00:06:39,420
gonna take over the world by owning an

160
00:06:37,080 --> 00:06:42,300
to have a developer that shipping code

161
00:06:39,420 --> 00:06:45,840
to github right it goes to CI it may may

162
00:06:42,300 --> 00:06:47,670
see I published to get up or to NPM the

163
00:06:45,840 --> 00:06:49,349
developers also pulling down packages

164
00:06:47,670 --> 00:06:51,090
from NPM to do their development and

165
00:06:49,350 --> 00:06:53,040
then there may be shipping these things

166
00:06:51,090 --> 00:06:55,950
out to production and it may go out of

167
00:06:53,040 --> 00:07:03,600
production so you kind of see NPM is at

168
00:06:55,950 --> 00:07:05,130
the center of that that circle so all

169
00:07:03,600 --> 00:07:07,110
right we've got this is this is what

170
00:07:05,130 --> 00:07:09,000
kind of PMA is who's responsible for

171
00:07:07,110 --> 00:07:10,560
this who's responsible for securing the

172
00:07:09,000 --> 00:07:12,390
Commons right it used to not be a

173
00:07:10,560 --> 00:07:13,800
vc-backed company it used to be not a

174
00:07:12,390 --> 00:07:17,400
company could buy goods and services

175
00:07:13,800 --> 00:07:23,160
from so who's responsible for securing

176
00:07:17,400 --> 00:07:24,770
this many people stable NPM but you are

177
00:07:23,160 --> 00:07:28,260
responsible for what you require

178
00:07:24,770 --> 00:07:30,690
developers enterprises Michael said it

179
00:07:28,260 --> 00:07:33,120
this morning right like you are

180
00:07:30,690 --> 00:07:34,410
responsible there is dis licenses say it

181
00:07:33,120 --> 00:07:39,960
there's no warning or there's no

182
00:07:34,410 --> 00:07:41,880
warranty this it's on you 100% the code

183
00:07:39,960 --> 00:07:44,640
that you put in your production is on

184
00:07:41,880 --> 00:07:47,070
you you also have the responsibility of

185
00:07:44,640 --> 00:07:50,640
using tools correctly correctly updating

186
00:07:47,070 --> 00:07:53,480
your dependencies knowing what you're

187
00:07:50,640 --> 00:07:55,849
downloading what you're installing

188
00:07:53,480 --> 00:07:58,590
what's interesting about this is that

189
00:07:55,850 --> 00:07:59,640
you know part of our survey here you

190
00:07:58,590 --> 00:08:00,659
know what methods you ensure the

191
00:07:59,640 --> 00:08:01,860
security of your code if you're

192
00:08:00,660 --> 00:08:05,160
responsible for it what are you doing

193
00:08:01,860 --> 00:08:06,590
code review is the biggest you know the

194
00:08:05,160 --> 00:08:10,290
most sort of like you used control

195
00:08:06,590 --> 00:08:14,969
scanning who knows what audits and then

196
00:08:10,290 --> 00:08:22,350
none 23% of those 33 respondents are

197
00:08:14,970 --> 00:08:25,710
just doing nothing okay as a package

198
00:08:22,350 --> 00:08:26,910
maintainer they have the biggest burden

199
00:08:25,710 --> 00:08:29,219
when I'm sort of looking at the list

200
00:08:26,910 --> 00:08:30,090
right providing code that promises to do

201
00:08:29,220 --> 00:08:32,130
what it does

202
00:08:30,090 --> 00:08:35,039
providing secure code that unless it's

203
00:08:32,130 --> 00:08:37,380
clearly stated this is malware keeping

204
00:08:35,039 --> 00:08:38,848
explicit or implicit security promises

205
00:08:37,380 --> 00:08:40,799
maintaining updated dependencies and

206
00:08:38,849 --> 00:08:43,080
monitoring for malicious contributions

207
00:08:40,799 --> 00:08:44,250
it may be just contributions to github

208
00:08:43,080 --> 00:08:46,110
that eventually get published as a

209
00:08:44,250 --> 00:08:48,030
package right there's a lot of

210
00:08:46,110 --> 00:08:49,500
responsibility for a maintainer guess

211
00:08:48,030 --> 00:08:53,319
what they're volunteer

212
00:08:49,500 --> 00:08:54,750
they're not paid they burn out just like

213
00:08:53,320 --> 00:08:57,100
the rest of us

214
00:08:54,750 --> 00:08:59,020
you've got NPM what are we responsible

215
00:08:57,100 --> 00:09:00,130
for right we're a company right so you

216
00:08:59,020 --> 00:09:01,600
there's somebody you can call and you

217
00:09:00,130 --> 00:09:03,939
can yell at you can email support

218
00:09:01,600 --> 00:09:07,090
you can email security at NPM j/s calm

219
00:09:03,940 --> 00:09:09,370
we're responsible for delivering the

220
00:09:07,090 --> 00:09:11,350
packages as expected just like a regular

221
00:09:09,370 --> 00:09:14,380
supply chain with a config container

222
00:09:11,350 --> 00:09:16,540
ship they have a manifest what if you

223
00:09:14,380 --> 00:09:18,820
request bits we should give you those

224
00:09:16,540 --> 00:09:20,349
bits we're responsible for maintaining

225
00:09:18,820 --> 00:09:21,520
you know removing malware you tell us

226
00:09:20,350 --> 00:09:23,230
about some piece of malware we're gonna

227
00:09:21,520 --> 00:09:25,300
get rid of it and you know alerting

228
00:09:23,230 --> 00:09:27,760
users of known vulnerabilities we have

229
00:09:25,300 --> 00:09:30,459
taken that node security data and we've

230
00:09:27,760 --> 00:09:34,810
given it to all of the users as part of

231
00:09:30,460 --> 00:09:36,550
our service so let's talk about now some

232
00:09:34,810 --> 00:09:38,650
recent challenges of tell a story and

233
00:09:36,550 --> 00:09:41,109
you've heard some of these I'm sure no

234
00:09:38,650 --> 00:09:44,920
of them event stream was a very recent

235
00:09:41,110 --> 00:09:48,310
and very high profile incident for us

236
00:09:44,920 --> 00:09:50,949
now it didn't target NPM in fact it

237
00:09:48,310 --> 00:09:55,030
targeted one organization that module

238
00:09:50,950 --> 00:09:59,080
has like millions of downloads a day it

239
00:09:55,030 --> 00:10:01,510
targeted one company co-pay and involves

240
00:09:59,080 --> 00:10:06,280
social engineering in fact developer

241
00:10:01,510 --> 00:10:08,470
burnout is now attack surface this this

242
00:10:06,280 --> 00:10:10,750
particular developer Dominic Tarr had a

243
00:10:08,470 --> 00:10:13,090
vent stream and and after five years was

244
00:10:10,750 --> 00:10:14,950
was done maintaining it was tired so if

245
00:10:13,090 --> 00:10:17,770
somebody came along and said I'd love to

246
00:10:14,950 --> 00:10:19,810
maintain this I use it and so Dominic

247
00:10:17,770 --> 00:10:21,430
said sure come on in and of course they

248
00:10:19,810 --> 00:10:24,030
acted like a good actor they updated

249
00:10:21,430 --> 00:10:26,079
some dependencies that came in and then

250
00:10:24,030 --> 00:10:27,699
also and they kind of dropped this

251
00:10:26,080 --> 00:10:31,390
dependency I had a nice you know

252
00:10:27,700 --> 00:10:34,480
encrypted payload in it and that's

253
00:10:31,390 --> 00:10:35,560
that's how we ended up so we got lucky

254
00:10:34,480 --> 00:10:37,750
with this one he used an encrypted

255
00:10:35,560 --> 00:10:40,209
payload that decrypted based on the

256
00:10:37,750 --> 00:10:42,670
description of a of a project that you

257
00:10:40,210 --> 00:10:45,040
brought it into somebody happened to

258
00:10:42,670 --> 00:10:46,270
have cloned the co-pay app and published

259
00:10:45,040 --> 00:10:48,640
it to the registry so when we did a

260
00:10:46,270 --> 00:10:51,040
brute force we got lucky because the

261
00:10:48,640 --> 00:10:52,830
decryption key was in the registry or we

262
00:10:51,040 --> 00:10:55,060
would have probably never been able to

263
00:10:52,830 --> 00:10:58,480
triage that as fast as we had we had it

264
00:10:55,060 --> 00:10:59,709
decrypted in about a half an hour was a

265
00:10:58,480 --> 00:11:02,360
team of four people and that was pretty

266
00:10:59,710 --> 00:11:03,649
fast so that was a fun one that was

267
00:11:02,360 --> 00:11:05,569
a case of social engineering here's

268
00:11:03,649 --> 00:11:08,389
another recent one which the es went

269
00:11:05,569 --> 00:11:10,248
scope an attacker you use credential

270
00:11:08,389 --> 00:11:12,290
stuffing took over an account of a

271
00:11:10,249 --> 00:11:13,790
dependency so yes when scope was a

272
00:11:12,290 --> 00:11:17,748
module was taken over but it's part of a

273
00:11:13,790 --> 00:11:20,149
very popular linting framework and again

274
00:11:17,749 --> 00:11:25,100
millions of downloads they took over an

275
00:11:20,149 --> 00:11:29,299
account and they published a new version

276
00:11:25,100 --> 00:11:30,920
that stole NPM credentials and it was it

277
00:11:29,299 --> 00:11:32,959
seemed like a sophisticated attacker but

278
00:11:30,920 --> 00:11:34,729
their payload was was garbage it's like

279
00:11:32,959 --> 00:11:37,459
they didn't know JavaScript it was it

280
00:11:34,730 --> 00:11:38,929
was very buggy or very untested and so

281
00:11:37,459 --> 00:11:42,290
it didn't have the traction then it

282
00:11:38,929 --> 00:11:43,519
could have and we burned down about all

283
00:11:42,290 --> 00:11:46,519
of the authentication tokens in the

284
00:11:43,519 --> 00:11:49,939
registry very very quickly we made that

285
00:11:46,519 --> 00:11:52,549
call just so it didn't have any way to

286
00:11:49,939 --> 00:11:53,748
propagate so this is kind of the you're

287
00:11:52,549 --> 00:11:56,600
thinking again about the sort of the

288
00:11:53,749 --> 00:11:58,759
attack attack tree that we have going on

289
00:11:56,600 --> 00:12:00,139
here it's all it's all about getting a

290
00:11:58,759 --> 00:12:02,389
package into the registry it's all but

291
00:12:00,139 --> 00:12:04,220
like those packages or other key because

292
00:12:02,389 --> 00:12:06,519
anybody can just publish a package right

293
00:12:04,220 --> 00:12:08,629
you can just go publish foo bar whatever

294
00:12:06,519 --> 00:12:10,249
but you have to get somebody who install

295
00:12:08,629 --> 00:12:12,199
it that's where type of squating came in

296
00:12:10,249 --> 00:12:14,419
Michael did a great job of discussing

297
00:12:12,199 --> 00:12:16,729
that earlier and we do have some trivial

298
00:12:14,419 --> 00:12:18,919
protections in place to do distance

299
00:12:16,730 --> 00:12:20,779
checking is it you know did you add dot

300
00:12:18,919 --> 00:12:22,220
J s to the end of it and it's related to

301
00:12:20,779 --> 00:12:25,429
a popular package yeah we're not gonna

302
00:12:22,220 --> 00:12:27,169
let you publish it but the most

303
00:12:25,429 --> 00:12:29,329
impactful one is taking over to account

304
00:12:27,169 --> 00:12:31,999
or getting added as a maintainer to an

305
00:12:29,329 --> 00:12:33,979
account leads you to really impacting

306
00:12:31,999 --> 00:12:35,389
results of course there is insider

307
00:12:33,980 --> 00:12:38,029
threat and if you do happen to use

308
00:12:35,389 --> 00:12:41,529
something like yarn which proxies both

309
00:12:38,029 --> 00:12:43,939
the metadata as well as the tarballs

310
00:12:41,529 --> 00:12:47,389
the organization that maintains the

311
00:12:43,939 --> 00:12:48,889
domain for that tool can modify either

312
00:12:47,389 --> 00:12:50,299
of those if they wanted to so now you

313
00:12:48,889 --> 00:12:53,389
get to worry about insider threat at two

314
00:12:50,299 --> 00:12:57,829
organizations Facebook and NPM not just

315
00:12:53,389 --> 00:13:00,139
one so that's that so what are we doing

316
00:12:57,829 --> 00:13:02,329
to kind of okay that's kind of doom and

317
00:13:00,139 --> 00:13:05,809
gloom what are we doing to to give you

318
00:13:02,329 --> 00:13:07,878
some sort of integrity give you some

319
00:13:05,809 --> 00:13:09,379
sort of confidence in the registry what

320
00:13:07,879 --> 00:13:10,789
are some of the things we've done so we

321
00:13:09,379 --> 00:13:12,740
have version pinning there's a package

322
00:13:10,789 --> 00:13:14,839
lock Jason you could pin your versions

323
00:13:12,740 --> 00:13:15,950
many people choose to not use this

324
00:13:14,839 --> 00:13:17,390
feature to not

325
00:13:15,950 --> 00:13:19,580
commit that file but it gives you a lot

326
00:13:17,390 --> 00:13:21,410
of control because you're gonna bring in

327
00:13:19,580 --> 00:13:23,180
those exact versions that you want if

328
00:13:21,410 --> 00:13:25,610
you vetted something this gives you that

329
00:13:23,180 --> 00:13:28,069
control we also use some resource

330
00:13:25,610 --> 00:13:29,240
integrity within the registry here it's

331
00:13:28,070 --> 00:13:30,800
not just something for client-side

332
00:13:29,240 --> 00:13:33,170
JavaScript that gives us a future-proof

333
00:13:30,800 --> 00:13:36,260
way of updating hashes as say you know

334
00:13:33,170 --> 00:13:39,860
sha-1 or this becomes weak over time we

335
00:13:36,260 --> 00:13:41,390
can upgrade those hashes of course we

336
00:13:39,860 --> 00:13:44,330
added two-factor authentication it seems

337
00:13:41,390 --> 00:13:46,040
like table stakes but we have it 50% of

338
00:13:44,330 --> 00:13:48,050
the downloads are protected by 2fa

339
00:13:46,040 --> 00:13:50,780
account really really high profile

340
00:13:48,050 --> 00:13:52,849
accounts have to a fabled which is great

341
00:13:50,780 --> 00:13:56,360
six point 98% of our maintained errs

342
00:13:52,850 --> 00:13:59,930
have to FA enabled which is a low number

343
00:13:56,360 --> 00:14:02,150
I would like to see that higher but that

344
00:13:59,930 --> 00:14:06,109
we measure it we monitor it we're trying

345
00:14:02,150 --> 00:14:07,790
to get people to improve it and we also

346
00:14:06,110 --> 00:14:10,220
have a feature called - FA enforcement

347
00:14:07,790 --> 00:14:11,780
if you're a maintainer of a package you

348
00:14:10,220 --> 00:14:13,880
can require that all the people

349
00:14:11,780 --> 00:14:16,100
contributing to it or publishing have to

350
00:14:13,880 --> 00:14:18,470
FA enabled of course I'd like to see

351
00:14:16,100 --> 00:14:20,480
this become better it's not that great

352
00:14:18,470 --> 00:14:24,040
with using CI systems because it's a

353
00:14:20,480 --> 00:14:26,450
it's an OTP solution but we do have it

354
00:14:24,040 --> 00:14:28,099
of course credential stuffing protection

355
00:14:26,450 --> 00:14:30,530
is that have I been poned projects it's

356
00:14:28,100 --> 00:14:33,020
amazing we've added that to you know

357
00:14:30,530 --> 00:14:34,130
sign up flow to password change flow to

358
00:14:33,020 --> 00:14:35,930
make sure you're not using just some

359
00:14:34,130 --> 00:14:37,850
garbage password

360
00:14:35,930 --> 00:14:40,250
pretty simple protection but it

361
00:14:37,850 --> 00:14:41,630
constantly bats down passwords and

362
00:14:40,250 --> 00:14:45,260
people have to pick better surrounder

363
00:14:41,630 --> 00:14:47,270
passwords protecting those accounts this

364
00:14:45,260 --> 00:14:50,450
is this is one of my favorite NPM audit

365
00:14:47,270 --> 00:14:54,350
when we got acquired at lyft and we took

366
00:14:50,450 --> 00:14:56,300
NSP and we brought it into NPM we made

367
00:14:54,350 --> 00:14:58,760
security top-of-mind for 11 million

368
00:14:56,300 --> 00:15:02,900
users all of a sudden when you ran NPM

369
00:14:58,760 --> 00:15:04,310
install you got this message found three

370
00:15:02,900 --> 00:15:05,959
so you know high severity or low

371
00:15:04,310 --> 00:15:08,060
severity or whatever all of a sudden

372
00:15:05,960 --> 00:15:09,770
they were hit with what is this and

373
00:15:08,060 --> 00:15:11,270
maybe they didn't know what to do but

374
00:15:09,770 --> 00:15:13,010
they could run NPM audit and find out

375
00:15:11,270 --> 00:15:15,319
more or they could run NPM audit fixing

376
00:15:13,010 --> 00:15:17,240
which is Auto bump versions anywhere

377
00:15:15,320 --> 00:15:19,760
down in the dependency tree if it could

378
00:15:17,240 --> 00:15:23,330
figure out how to resolve that meeting

379
00:15:19,760 --> 00:15:25,160
those semver constraints so all of a

380
00:15:23,330 --> 00:15:27,350
sudden we have this is attention of

381
00:15:25,160 --> 00:15:29,490
these developers and we're giving them

382
00:15:27,350 --> 00:15:31,529
these sort of like security words

383
00:15:29,490 --> 00:15:33,240
and reports and they're starting to ask

384
00:15:31,529 --> 00:15:35,429
questions which is good because now

385
00:15:33,240 --> 00:15:37,110
they're engaged they want what does this

386
00:15:35,429 --> 00:15:39,449
regular expression denial service thing

387
00:15:37,110 --> 00:15:40,980
they go read they get curious and all of

388
00:15:39,449 --> 00:15:44,969
a sudden they're they're leveling

389
00:15:40,980 --> 00:15:46,800
themselves up we're also bringing

390
00:15:44,970 --> 00:15:49,050
communities together we added a rapport

391
00:15:46,800 --> 00:15:51,809
of vulnerability button on all of the

392
00:15:49,050 --> 00:15:53,128
package pages trying to engage with our

393
00:15:51,809 --> 00:15:56,550
community and the research community

394
00:15:53,129 --> 00:15:58,679
giving them a place to send

395
00:15:56,550 --> 00:15:59,998
vulnerabilities we triage every single

396
00:15:58,679 --> 00:16:01,199
one of them we don't just pass it on to

397
00:15:59,999 --> 00:16:03,809
the maintainer and say here's some

398
00:16:01,199 --> 00:16:06,569
garbage we vet them we look at the POC

399
00:16:03,809 --> 00:16:08,309
if there's no POC we write one we make

400
00:16:06,569 --> 00:16:09,660
sure that we understand if it's a flaw

401
00:16:08,309 --> 00:16:11,990
or not and then we talked to the

402
00:16:09,660 --> 00:16:15,389
maintainer and we talk to the the

403
00:16:11,990 --> 00:16:18,480
reporter and of course sometimes try to

404
00:16:15,389 --> 00:16:19,889
just go dead and they don't respond or

405
00:16:18,480 --> 00:16:21,209
they don't want to fix it they don't

406
00:16:19,889 --> 00:16:23,579
understand they don't want except a pull

407
00:16:21,209 --> 00:16:25,018
request so the pull request you know and

408
00:16:23,579 --> 00:16:27,029
we'll publish an advisory after 45 days

409
00:16:25,019 --> 00:16:30,119
and what we see is once we publish those

410
00:16:27,029 --> 00:16:31,679
we get community engagement hey here's a

411
00:16:30,119 --> 00:16:37,920
pull request for this bug here's you

412
00:16:31,679 --> 00:16:39,869
know how can we help we also talk to do

413
00:16:37,920 --> 00:16:42,679
token revocation so if you publish

414
00:16:39,869 --> 00:16:46,410
accidentally publish your token to NPM

415
00:16:42,679 --> 00:16:48,809
we we revoke them this is since what

416
00:16:46,410 --> 00:16:51,149
January we revoked 92 tokens it's not

417
00:16:48,809 --> 00:16:53,459
significant but maybe those were really

418
00:16:51,149 --> 00:16:55,350
high-profile tokens for accounts I don't

419
00:16:53,459 --> 00:16:57,569
know we just we just bat them down an

420
00:16:55,350 --> 00:17:01,679
email and say hey we watched somebody

421
00:16:57,569 --> 00:17:04,168
fight this bot six times it published a

422
00:17:01,679 --> 00:17:06,329
token it would swat it down publish a

423
00:17:04,169 --> 00:17:10,039
token swatter down it was it was amusing

424
00:17:06,329 --> 00:17:13,049
but their account was being protected

425
00:17:10,039 --> 00:17:15,500
and also we're kicking off things with

426
00:17:13,049 --> 00:17:17,609
the get up security team to start

427
00:17:15,500 --> 00:17:20,789
trolling through get up just like slack

428
00:17:17,609 --> 00:17:22,319
is doing for NPM tokens to revoke them

429
00:17:20,789 --> 00:17:25,079
as they get published because that's a

430
00:17:22,319 --> 00:17:31,350
it's also common source of sort of

431
00:17:25,079 --> 00:17:34,740
account takeover package signing is one

432
00:17:31,350 --> 00:17:37,949
that I'm sure has shown up like Jim has

433
00:17:34,740 --> 00:17:39,389
shown up in the questions already if it

434
00:17:37,950 --> 00:17:42,640
hasn't because that's something that

435
00:17:39,389 --> 00:17:45,159
gets yelled at me all the time because

436
00:17:42,640 --> 00:17:46,960
we'll fix everything right it fixes well

437
00:17:45,160 --> 00:17:48,940
NPM can't tamper with it so it fixes

438
00:17:46,960 --> 00:17:51,490
entire insider threat and all this stuff

439
00:17:48,940 --> 00:17:54,100
and we're doing some signing at this

440
00:17:51,490 --> 00:17:55,360
point only internally so we sign the

441
00:17:54,100 --> 00:17:58,600
integrity hashes and some of the

442
00:17:55,360 --> 00:18:00,610
metadata in the in the package with our

443
00:17:58,600 --> 00:18:03,669
key base key we don't have the

444
00:18:00,610 --> 00:18:05,290
verification tooling yet but we do have

445
00:18:03,670 --> 00:18:06,760
a manual way that you can do that so

446
00:18:05,290 --> 00:18:09,310
it's not there yet

447
00:18:06,760 --> 00:18:11,170
and there's some very sort of sticky

448
00:18:09,310 --> 00:18:13,659
things when it comes to package signing

449
00:18:11,170 --> 00:18:16,660
however my approach to it is going to be

450
00:18:13,660 --> 00:18:18,580
to get to put out sort of a call for

451
00:18:16,660 --> 00:18:20,440
here's the design and get people engaged

452
00:18:18,580 --> 00:18:22,810
from the community that are much smarter

453
00:18:20,440 --> 00:18:24,400
than myself and my team to try to figure

454
00:18:22,810 --> 00:18:26,830
out how we can do this and provide the

455
00:18:24,400 --> 00:18:29,980
guarantees that you as a community sort

456
00:18:26,830 --> 00:18:31,240
of want and see if we can do it right

457
00:18:29,980 --> 00:18:32,650
and we might not be able to get all

458
00:18:31,240 --> 00:18:36,070
those guarantees but we're gonna we're

459
00:18:32,650 --> 00:18:37,450
gonna do better in this area and then it

460
00:18:36,070 --> 00:18:39,399
comes down to something that I think is

461
00:18:37,450 --> 00:18:41,050
extremely fun and I've made this slide

462
00:18:39,400 --> 00:18:42,400
intentionally vague because we don't

463
00:18:41,050 --> 00:18:45,730
want to give up all the secrets quite

464
00:18:42,400 --> 00:18:47,440
yet I did an experiment a few years back

465
00:18:45,730 --> 00:18:49,330
where I took all the packages in the

466
00:18:47,440 --> 00:18:51,120
registry that had install scripts and I

467
00:18:49,330 --> 00:18:53,470
dumped them into an instrumented

468
00:18:51,120 --> 00:18:55,090
instrumented container and I can't log

469
00:18:53,470 --> 00:18:56,980
all the system calls that were going on

470
00:18:55,090 --> 00:18:59,260
for those do it a runtime analysis on

471
00:18:56,980 --> 00:19:03,430
install it turned out 144

472
00:18:59,260 --> 00:19:05,440
vulnerabilities for me mostly modules

473
00:19:03,430 --> 00:19:07,630
that were downloading binary components

474
00:19:05,440 --> 00:19:09,370
or source code and using them as part of

475
00:19:07,630 --> 00:19:12,700
their build process but weren't

476
00:19:09,370 --> 00:19:14,350
verifying their integrity so if you and

477
00:19:12,700 --> 00:19:17,340
it found one really interesting bug in

478
00:19:14,350 --> 00:19:21,550
in Adam which was just a HTTP to HTTPS

479
00:19:17,340 --> 00:19:22,929
and you if you looked at it ocular grep

480
00:19:21,550 --> 00:19:25,180
you reviewed the code yeah they're using

481
00:19:22,930 --> 00:19:27,100
HTTPS but it happened to just be that

482
00:19:25,180 --> 00:19:28,990
one network halt it just wouldn't got

483
00:19:27,100 --> 00:19:30,540
caught so we're doing some really

484
00:19:28,990 --> 00:19:32,770
interesting things with runtime analysis

485
00:19:30,540 --> 00:19:37,270
and we're trying to figure out how to

486
00:19:32,770 --> 00:19:38,920
get that data to users things like does

487
00:19:37,270 --> 00:19:40,840
this module talk to paceman when you

488
00:19:38,920 --> 00:19:44,620
install it or run it or require it

489
00:19:40,840 --> 00:19:45,730
that's a that's a flag right so if

490
00:19:44,620 --> 00:19:47,500
you're interested in this stuff and you

491
00:19:45,730 --> 00:19:49,210
have some thoughts around it or you want

492
00:19:47,500 --> 00:19:50,470
to just you know find out what we're

493
00:19:49,210 --> 00:19:53,620
doing talk to me after and I'll go in a

494
00:19:50,470 --> 00:19:55,220
little bit more detail or you know pick

495
00:19:53,620 --> 00:19:57,110
your brain as to

496
00:19:55,220 --> 00:20:01,730
what you might like and how this tooling

497
00:19:57,110 --> 00:20:05,139
could help you so all right we talked

498
00:20:01,730 --> 00:20:07,340
about everything up to the future and

499
00:20:05,140 --> 00:20:08,750
now we get into the future and things

500
00:20:07,340 --> 00:20:10,639
that I like to do and I really think it

501
00:20:08,750 --> 00:20:12,950
comes down to better tooling when I hear

502
00:20:10,640 --> 00:20:14,720
about all of all of the sort of

503
00:20:12,950 --> 00:20:16,880
complaints around ecosystem it's all

504
00:20:14,720 --> 00:20:18,410
about if you move too slow

505
00:20:16,880 --> 00:20:20,150
you have the risk of known

506
00:20:18,410 --> 00:20:21,650
vulnerabilities in your stack right if

507
00:20:20,150 --> 00:20:23,630
you move too fast you have the risk of

508
00:20:21,650 --> 00:20:25,250
malware it's still probably a good idea

509
00:20:23,630 --> 00:20:27,620
to keep up to date but like if you move

510
00:20:25,250 --> 00:20:28,880
too fast if you kind of just you have

511
00:20:27,620 --> 00:20:30,860
the risk of malware so it's moving at

512
00:20:28,880 --> 00:20:32,210
the right speed with the right data they

513
00:20:30,860 --> 00:20:35,030
might make the right decisions

514
00:20:32,210 --> 00:20:36,679
this was our survey and users are

515
00:20:35,030 --> 00:20:38,440
telling us that our tooling sucks that

516
00:20:36,679 --> 00:20:42,650
we need better tooling in this space

517
00:20:38,440 --> 00:20:43,909
they're not satisfied this is I'll

518
00:20:42,650 --> 00:20:45,710
remember what the question was but

519
00:20:43,909 --> 00:20:49,460
basically are you satisfied with your

520
00:20:45,710 --> 00:20:50,570
tools yes or no they're not so I think

521
00:20:49,460 --> 00:20:52,820
that we need to make things in the

522
00:20:50,570 --> 00:20:54,860
ecosystem more transparent between

523
00:20:52,820 --> 00:20:57,010
version X and why did maintainer x'

524
00:20:54,860 --> 00:20:58,939
change was there an anomalous publish

525
00:20:57,010 --> 00:21:00,408
you started publishing from a different

526
00:20:58,940 --> 00:21:02,570
country like what are some of those

527
00:21:00,409 --> 00:21:04,880
things without giving up privacy can we

528
00:21:02,570 --> 00:21:07,789
give you in tooling to make better

529
00:21:04,880 --> 00:21:09,530
decisions or reporting us to just get

530
00:21:07,789 --> 00:21:11,390
automatically give you that Bill of

531
00:21:09,530 --> 00:21:13,658
Materials so you know what things got

532
00:21:11,390 --> 00:21:16,429
installed where it's your enterprise

533
00:21:13,659 --> 00:21:19,130
this point is a big one you know that

534
00:21:16,429 --> 00:21:22,760
whole thing about open-source maintainer

535
00:21:19,130 --> 00:21:24,559
is being volunteers we need to better

536
00:21:22,760 --> 00:21:26,770
capture the community enterprise effort

537
00:21:24,559 --> 00:21:30,110
so you've got Microsoft doing these

538
00:21:26,770 --> 00:21:33,379
massive efforts to audit things and we

539
00:21:30,110 --> 00:21:35,990
hear about you know 14 16 bugs we don't

540
00:21:33,380 --> 00:21:38,419
get the attestation of all of the things

541
00:21:35,990 --> 00:21:40,400
that they they said was good right we

542
00:21:38,419 --> 00:21:42,470
looked at these things and we lose that

543
00:21:40,400 --> 00:21:44,000
effort nobody hears about that the uber

544
00:21:42,470 --> 00:21:46,190
team's doing great things Dropbox

545
00:21:44,000 --> 00:21:48,679
Netflix PayPal all these companies are

546
00:21:46,190 --> 00:21:50,270
they're using javascript they're

547
00:21:48,679 --> 00:21:51,650
auditing they says you know they're

548
00:21:50,270 --> 00:21:52,760
auditing things internally but we're not

549
00:21:51,650 --> 00:21:55,070
hearing about it the community is not

550
00:21:52,760 --> 00:21:57,679
benefitting from it and so just like you

551
00:21:55,070 --> 00:22:00,530
know sending a pull request forward we

552
00:21:57,679 --> 00:22:02,450
need to figure out a way and I'm sure

553
00:22:00,530 --> 00:22:04,129
you know we're gonna have legal

554
00:22:02,450 --> 00:22:05,299
challenges and paperwork and all kinds

555
00:22:04,130 --> 00:22:06,020
of stuff we need to figure out a way to

556
00:22:05,299 --> 00:22:07,639
capture

557
00:22:06,020 --> 00:22:09,950
effort and I don't know how to do that

558
00:22:07,640 --> 00:22:11,540
yet but I'm really interested in this

559
00:22:09,950 --> 00:22:13,580
topic and I really like if you're

560
00:22:11,540 --> 00:22:14,659
interested in it find me at lunch find

561
00:22:13,580 --> 00:22:17,240
me afterwards let's have a conversation

562
00:22:14,660 --> 00:22:19,400
and figure out how we can capture the

563
00:22:17,240 --> 00:22:21,830
efforts that you're doing so that it can

564
00:22:19,400 --> 00:22:23,420
raise the confidence in the in the

565
00:22:21,830 --> 00:22:27,409
community instead of just open-source

566
00:22:23,420 --> 00:22:29,000
being this big scary thing and that's

567
00:22:27,410 --> 00:22:30,560
all I have I've got stick security

568
00:22:29,000 --> 00:22:34,420
wombat stickers if you want after and

569
00:22:30,560 --> 00:22:34,419
that's that's me thank you

570
00:22:40,030 --> 00:22:46,250
let's see what role does NPM as a

571
00:22:42,860 --> 00:22:50,209
company take in assuring security in the

572
00:22:46,250 --> 00:22:52,090
many libraries that it manages well just

573
00:22:50,210 --> 00:22:54,620
like that one slide lots of code review

574
00:22:52,090 --> 00:22:56,570
that's that's what we do we do static

575
00:22:54,620 --> 00:22:58,760
analysis we've got a project called es

576
00:22:56,570 --> 00:23:00,830
lint plug-in security it's does AST

577
00:22:58,760 --> 00:23:02,270
analysis just a handful of rules that we

578
00:23:00,830 --> 00:23:04,820
use that we developed it lifts for pen

579
00:23:02,270 --> 00:23:07,910
testing and then the security team which

580
00:23:04,820 --> 00:23:10,280
is for people we do a lot of that

581
00:23:07,910 --> 00:23:13,580
security review and then we also pin

582
00:23:10,280 --> 00:23:15,440
versions so we move fairly slow right we

583
00:23:13,580 --> 00:23:19,929
we upgrade intensely

584
00:23:15,440 --> 00:23:24,530
I don't know how to use this thing OOP

585
00:23:19,930 --> 00:23:26,930
okay if NPM no knows a Lib has a massive

586
00:23:24,530 --> 00:23:34,460
vulnerability then why do they keep

587
00:23:26,930 --> 00:23:36,170
delivering it to developers hmm just

588
00:23:34,460 --> 00:23:37,310
because it has a massive vulnerability

589
00:23:36,170 --> 00:23:40,490
doesn't mean that you're it's

590
00:23:37,310 --> 00:23:43,429
exploitable right just doesn't mean that

591
00:23:40,490 --> 00:23:46,220
function call is being called doesn't

592
00:23:43,430 --> 00:23:47,960
mean you're using it in the way that is

593
00:23:46,220 --> 00:23:50,150
exploitable and so that's why we do it

594
00:23:47,960 --> 00:23:51,470
but we do we do give you that report so

595
00:23:50,150 --> 00:23:55,120
that you know about it hey you're using

596
00:23:51,470 --> 00:23:57,950
this particular version so that's that

597
00:23:55,120 --> 00:23:58,459
Cotto says how are you scanning for

598
00:23:57,950 --> 00:24:00,860
malware

599
00:23:58,460 --> 00:24:02,900
how can signatures look for dynamic

600
00:24:00,860 --> 00:24:07,010
nature of j/s static analysis in j/s I

601
00:24:02,900 --> 00:24:08,990
think is absolutely impossible but you

602
00:24:07,010 --> 00:24:11,000
got to try so we are doing runtime

603
00:24:08,990 --> 00:24:13,490
hybrid analysis so we're trying to get

604
00:24:11,000 --> 00:24:15,590
better static analysis going and we're

605
00:24:13,490 --> 00:24:19,410
doing instrumentation

606
00:24:15,590 --> 00:24:26,070
sandboxes and combined with static

607
00:24:19,410 --> 00:24:29,330
analysis to get more coverage are you

608
00:24:26,070 --> 00:24:32,429
familiar with node security roadmap FYI

609
00:24:29,330 --> 00:24:34,590
yes I actually reviewed a an early

610
00:24:32,430 --> 00:24:36,780
version of that and I think that it's a

611
00:24:34,590 --> 00:24:39,540
great effort it's something that anybody

612
00:24:36,780 --> 00:24:41,040
doing security and nodes and JavaScript

613
00:24:39,540 --> 00:24:42,629
should read because it calls out a lot

614
00:24:41,040 --> 00:24:44,730
of the threats a lot of things that you

615
00:24:42,630 --> 00:24:47,160
need to worry about

616
00:24:44,730 --> 00:24:49,710
so yeah that's node security our node

617
00:24:47,160 --> 00:24:53,460
SEC roadmap fYI in case anybody else is

618
00:24:49,710 --> 00:24:55,350
interested doesn't the registry maintain

619
00:24:53,460 --> 00:24:58,260
only one package with a particular hash

620
00:24:55,350 --> 00:24:59,730
can be published for a version and any

621
00:24:58,260 --> 00:25:01,410
changes require a new version yes you

622
00:24:59,730 --> 00:25:03,930
cannot delete so the registry is

623
00:25:01,410 --> 00:25:05,670
immutable except for our security team

624
00:25:03,930 --> 00:25:08,700
and our support team we have the power

625
00:25:05,670 --> 00:25:10,530
to remove packages from the registry so

626
00:25:08,700 --> 00:25:12,690
you can't well there's a there's a

627
00:25:10,530 --> 00:25:15,149
three-day window that you can unpublish

628
00:25:12,690 --> 00:25:16,170
something if you publish some source

629
00:25:15,150 --> 00:25:19,170
code that you didn't want to you can

630
00:25:16,170 --> 00:25:20,580
pull it down so yeah you it's immutable

631
00:25:19,170 --> 00:25:21,840
you can't delete a package once you

632
00:25:20,580 --> 00:25:23,100
published it because especially if

633
00:25:21,840 --> 00:25:25,520
somebody depends on it that's the whole

634
00:25:23,100 --> 00:25:27,659
left pad incident where somebody ganks

635
00:25:25,520 --> 00:25:29,370
you know a package over the registry and

636
00:25:27,660 --> 00:25:31,410
breaks everyone's builds just because

637
00:25:29,370 --> 00:25:34,770
they got you know just because they're

638
00:25:31,410 --> 00:25:36,480
upset for whatever reason and you can't

639
00:25:34,770 --> 00:25:39,870
publish overtop so you can't you can't

640
00:25:36,480 --> 00:25:40,890
change that so you do have to publish a

641
00:25:39,870 --> 00:25:43,550
new version if you come on as a

642
00:25:40,890 --> 00:25:45,990
maintainer we've been considering making

643
00:25:43,550 --> 00:25:49,350
maintainer ship a breaking change so if

644
00:25:45,990 --> 00:25:50,790
you if you transfer a package if I give

645
00:25:49,350 --> 00:25:53,129
you one of my package you can only

646
00:25:50,790 --> 00:25:54,930
publish on a new major version there's a

647
00:25:53,130 --> 00:25:58,410
lot of pushback from developers on that

648
00:25:54,930 --> 00:26:00,300
though because of how I don't know if

649
00:25:58,410 --> 00:26:01,860
it's chris friction we're all about

650
00:26:00,300 --> 00:26:05,220
trying to get reap the friction down

651
00:26:01,860 --> 00:26:08,370
with our tooling but you know make

652
00:26:05,220 --> 00:26:10,770
things safe so it's a balance that's it

653
00:26:08,370 --> 00:26:12,830
thank you

654
00:26:10,770 --> 00:26:12,830
you

