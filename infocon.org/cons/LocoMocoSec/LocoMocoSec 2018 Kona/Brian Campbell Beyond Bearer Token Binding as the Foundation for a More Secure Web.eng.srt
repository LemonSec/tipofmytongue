1
00:00:03,980 --> 00:00:09,179
thank you sir good morning everyone

2
00:00:06,480 --> 00:00:10,620
thank you for being here as Jim

3
00:00:09,179 --> 00:00:13,379
mentioned I'm going to talk about token

4
00:00:10,620 --> 00:00:15,059
binding here which is a emerging new set

5
00:00:13,380 --> 00:00:17,970
of specifications that I think has a lot

6
00:00:15,059 --> 00:00:19,590
of promise and going a little bit to the

7
00:00:17,970 --> 00:00:21,509
details of how it works and hopefully

8
00:00:19,590 --> 00:00:23,490
some of some of the value that I think

9
00:00:21,510 --> 00:00:25,800
it maybe provides over time I do want to

10
00:00:23,490 --> 00:00:28,019
first say Thank You Troy for starting

11
00:00:25,800 --> 00:00:31,050
things off yesterday with the keynote by

12
00:00:28,019 --> 00:00:32,699
wearing shorts and thongs and also

13
00:00:31,050 --> 00:00:33,870
dropping some profanity early on it

14
00:00:32,700 --> 00:00:35,280
really helped me sort of feel

15
00:00:33,870 --> 00:00:36,750
comfortable coming up to the stage today

16
00:00:35,280 --> 00:00:40,890
because that's really kind of my sweet

17
00:00:36,750 --> 00:00:44,989
spot so little photo actually from the

18
00:00:40,890 --> 00:00:47,219
the pool the other night try to make it

19
00:00:44,989 --> 00:00:49,379
relevant for everyone here so anyway

20
00:00:47,219 --> 00:00:51,870
with that let's get started talking

21
00:00:49,379 --> 00:00:54,360
about token mining some formalities and

22
00:00:51,870 --> 00:00:55,800
introductions first first of all Jim

23
00:00:54,360 --> 00:00:58,079
said I work for ping identity I've been

24
00:00:55,800 --> 00:01:01,739
there basically all of my career ping

25
00:00:58,079 --> 00:01:03,629
does single sign-on access control MFA

26
00:01:01,739 --> 00:01:04,860
and things like that which is sort of

27
00:01:03,629 --> 00:01:06,899
how I ended up in this space I'm not

28
00:01:04,860 --> 00:01:08,729
strictly in security but do a lot of

29
00:01:06,900 --> 00:01:10,470
stuff in identity which is which is very

30
00:01:08,729 --> 00:01:13,080
much integral and related to security so

31
00:01:10,470 --> 00:01:15,539
that's how I ended up in front of all do

32
00:01:13,080 --> 00:01:17,400
you find people I do product development

33
00:01:15,540 --> 00:01:19,170
work and I also do standards work so I

34
00:01:17,400 --> 00:01:21,180
work on new and emerging standards and

35
00:01:19,170 --> 00:01:22,979
that latter piece is is what gives me

36
00:01:21,180 --> 00:01:25,110
the opportunity to talk to people like

37
00:01:22,979 --> 00:01:26,820
you about new things like tow combining

38
00:01:25,110 --> 00:01:28,229
it's not really anything particularly

39
00:01:26,820 --> 00:01:30,210
special but the opportunity to be

40
00:01:28,229 --> 00:01:32,310
engaged with new and emerging standards

41
00:01:30,210 --> 00:01:33,658
lets me learn about things that are new

42
00:01:32,310 --> 00:01:35,250
that haven't quite at the market yet and

43
00:01:33,659 --> 00:01:37,079
it gives me something that's hopefully

44
00:01:35,250 --> 00:01:39,900
interesting to talk about it also gives

45
00:01:37,079 --> 00:01:41,939
me the chance to wear this ridiculous

46
00:01:39,900 --> 00:01:43,500
shirt which was from an internet

47
00:01:41,939 --> 00:01:45,720
Engineering Task Force meeting and they

48
00:01:43,500 --> 00:01:47,790
make some of the worst shirts possible

49
00:01:45,720 --> 00:01:50,610
but it is Hawaiian so I thought I'd

50
00:01:47,790 --> 00:01:52,290
bring it out today I also pretend to

51
00:01:50,610 --> 00:01:54,659
have a different career sometimes I

52
00:01:52,290 --> 00:01:56,850
enjoy photography I shoot at events and

53
00:01:54,659 --> 00:02:01,280
a lot of times when I travel for work so

54
00:01:56,850 --> 00:02:03,869
it's it's as Cynthia said about her

55
00:02:01,280 --> 00:02:05,790
ballroom dancing it doesn't pay as well

56
00:02:03,869 --> 00:02:06,930
as development or security work so I

57
00:02:05,790 --> 00:02:09,479
can't make it a real career but I like

58
00:02:06,930 --> 00:02:10,679
to pretend and so as a result of that my

59
00:02:09,479 --> 00:02:12,120
presentation contains a lot of

60
00:02:10,679 --> 00:02:13,530
gratuitous photographs now there's a

61
00:02:12,120 --> 00:02:15,420
couple reasons for this one is a

62
00:02:13,530 --> 00:02:17,040
sort of like the old family slideshow

63
00:02:15,420 --> 00:02:18,958
vacation stuff where I have a captive

64
00:02:17,040 --> 00:02:20,160
audience here and I can force you to

65
00:02:18,959 --> 00:02:23,790
look at my work which is very gratifying

66
00:02:20,160 --> 00:02:25,440
for me and the other thing is I once saw

67
00:02:23,790 --> 00:02:26,970
someone from a big cup company talk

68
00:02:25,440 --> 00:02:29,190
about how you know gave their legal

69
00:02:26,970 --> 00:02:30,569
stuff and about how they were avoiding

70
00:02:29,190 --> 00:02:31,650
copyright infringement everything on

71
00:02:30,569 --> 00:02:33,390
their work and at the time I've been

72
00:02:31,650 --> 00:02:35,100
stealing content from other people and

73
00:02:33,390 --> 00:02:37,440
putting on presentations realized that's

74
00:02:35,100 --> 00:02:39,569
not such a good idea so by using my own

75
00:02:37,440 --> 00:02:41,850
content and pictures I avoid any

76
00:02:39,569 --> 00:02:43,829
potential copyright infringement stuff

77
00:02:41,850 --> 00:02:46,440
now I'm not saying that other people

78
00:02:43,830 --> 00:02:49,080
here this week have infringed on

79
00:02:46,440 --> 00:02:50,820
copyrights necessarily but I'm just

80
00:02:49,080 --> 00:02:53,390
saying that my work doesn't because it's

81
00:02:50,820 --> 00:02:53,390
all my own work

82
00:02:53,430 --> 00:02:57,360
and the the usual sort of safe harbor

83
00:02:55,920 --> 00:02:59,250
here is that this presentation may

84
00:02:57,360 --> 00:03:01,470
contain forward-looking statements and

85
00:02:59,250 --> 00:03:03,510
no investment of person's purchasing

86
00:03:01,470 --> 00:03:05,790
decisions should be made based solely on

87
00:03:03,510 --> 00:03:07,200
the content of herein that is of course

88
00:03:05,790 --> 00:03:09,420
in unless you want to hire a

89
00:03:07,200 --> 00:03:10,799
photographer for an obscene amount of

90
00:03:09,420 --> 00:03:14,399
money in which case you'd go ahead and

91
00:03:10,800 --> 00:03:16,319
do that thank you by the way it's really

92
00:03:14,400 --> 00:03:18,959
helpful when people are actually engaged

93
00:03:16,319 --> 00:03:20,609
it loosens up the mood a little bit so

94
00:03:18,959 --> 00:03:22,890
with that let's get started a bear token

95
00:03:20,610 --> 00:03:25,079
is a security token that has the

96
00:03:22,890 --> 00:03:28,078
property that any party in possession of

97
00:03:25,079 --> 00:03:30,209
that token the bearer of it can use the

98
00:03:28,079 --> 00:03:32,640
token to access the associated resource

99
00:03:30,209 --> 00:03:34,440
or whatever the associated value of that

100
00:03:32,640 --> 00:03:37,890
token or access control that token is

101
00:03:34,440 --> 00:03:40,190
and no proof other than just having that

102
00:03:37,890 --> 00:03:42,750
token is needed in order to wield it

103
00:03:40,190 --> 00:03:44,579
this is where I east watch movies as a

104
00:03:42,750 --> 00:03:46,709
kid and they always would pay you know

105
00:03:44,579 --> 00:03:47,700
the villains would take bearer bonds I

106
00:03:46,709 --> 00:03:49,290
never understood what the hell that was

107
00:03:47,700 --> 00:03:50,488
until much later in my life at bearer

108
00:03:49,290 --> 00:03:52,260
bonds you just have the bond you have

109
00:03:50,489 --> 00:03:54,600
the money you have it's good or or cash

110
00:03:52,260 --> 00:03:58,078
is another kind of bear token that just

111
00:03:54,600 --> 00:04:01,470
having it is fully sufficient to wield

112
00:03:58,079 --> 00:04:04,500
it for all its value they are what they

113
00:04:01,470 --> 00:04:06,090
are maybe here's a real-world example of

114
00:04:04,500 --> 00:04:08,579
the problem with bear tokens there's one

115
00:04:06,090 --> 00:04:11,940
truth and a lie here these are two Rs a

116
00:04:08,579 --> 00:04:14,700
speaker passes I'm sorry RSA passes one

117
00:04:11,940 --> 00:04:16,649
of them is is real and based on my real

118
00:04:14,700 --> 00:04:18,358
actual job the other one is a little bit

119
00:04:16,649 --> 00:04:21,238
more based on my aspirational pretend

120
00:04:18,358 --> 00:04:22,320
career and if I hadn't told you about it

121
00:04:21,238 --> 00:04:24,469
you can probably guess which is which

122
00:04:22,320 --> 00:04:28,440
but in the absence of that knowledge

123
00:04:24,470 --> 00:04:30,570
there's no way to tell which of these is

124
00:04:28,440 --> 00:04:34,250
I legitimately have the rights to wield

125
00:04:30,570 --> 00:04:37,080
or to wear so this is sort of a simple

126
00:04:34,250 --> 00:04:40,980
real world example of bear tokens and

127
00:04:37,080 --> 00:04:43,710
how they can be problematic bearer

128
00:04:40,980 --> 00:04:45,630
tokens in our own lives that we probably

129
00:04:43,710 --> 00:04:48,120
use every day on the web and likely use

130
00:04:45,630 --> 00:04:50,880
you know in our jobs our development all

131
00:04:48,120 --> 00:04:53,430
over the place are cookies and there's

132
00:04:50,880 --> 00:04:56,550
been a lot of things done to protect

133
00:04:53,430 --> 00:04:58,380
cookies from theft but they remain

134
00:04:56,550 --> 00:04:59,970
bearer tokens so there's the secured

135
00:04:58,380 --> 00:05:01,500
flag as you've said on a cookie which

136
00:04:59,970 --> 00:05:03,240
prevents it from being sent over non

137
00:05:01,500 --> 00:05:05,250
secure connections so it can't be sent

138
00:05:03,240 --> 00:05:07,740
to an authenticated site percent and the

139
00:05:05,250 --> 00:05:10,680
clear there's the HTTP only flag which

140
00:05:07,740 --> 00:05:12,900
is there to help prevent exfiltration

141
00:05:10,680 --> 00:05:14,510
via cross-site scripting attacks actual

142
00:05:12,900 --> 00:05:16,979
trading the cookie to another site now

143
00:05:14,510 --> 00:05:22,530
Mario yesterday was a little bit

144
00:05:16,980 --> 00:05:24,330
critical of this noting that it there's

145
00:05:22,530 --> 00:05:25,919
a lot of other attack vectors you can

146
00:05:24,330 --> 00:05:27,450
you can apply if you have full cross

147
00:05:25,919 --> 00:05:29,310
site scripting available in there and so

148
00:05:27,450 --> 00:05:31,710
just preventing the exfiltration

149
00:05:29,310 --> 00:05:32,880
of a session cookie doesn't necessarily

150
00:05:31,710 --> 00:05:33,810
protect everything against the other

151
00:05:32,880 --> 00:05:35,400
sorts of things you can do with

152
00:05:33,810 --> 00:05:37,350
cross-site scripting but at the same

153
00:05:35,400 --> 00:05:40,020
time it should be only does prevent that

154
00:05:37,350 --> 00:05:42,150
one specific case of cross-site

155
00:05:40,020 --> 00:05:44,010
scripting being able to steal session

156
00:05:42,150 --> 00:05:46,109
tokens or session cookies and actual

157
00:05:44,010 --> 00:05:48,570
trade them to other sites and these

158
00:05:46,110 --> 00:05:50,130
things are you know they're they're

159
00:05:48,570 --> 00:05:53,159
somewhat effective it's not like cookies

160
00:05:50,130 --> 00:05:55,080
are are the end of the world we we use

161
00:05:53,160 --> 00:05:56,550
them every day for the most part things

162
00:05:55,080 --> 00:05:57,810
work okay and they're you know

163
00:05:56,550 --> 00:05:59,400
relatively secure but they are

164
00:05:57,810 --> 00:06:02,010
inherently flawed and if they're stolen

165
00:05:59,400 --> 00:06:04,260
they can be reused and despite some of

166
00:06:02,010 --> 00:06:05,669
these you know protections it's been

167
00:06:04,260 --> 00:06:07,560
sort of an arms race going on there are

168
00:06:05,669 --> 00:06:09,840
still times where cookies are stolen

169
00:06:07,560 --> 00:06:12,300
either on a small or large scale the

170
00:06:09,840 --> 00:06:13,469
most recent example I'm aware of there's

171
00:06:12,300 --> 00:06:16,050
probably others but you know there was a

172
00:06:13,470 --> 00:06:18,419
subdomain takeover on uber towards the

173
00:06:16,050 --> 00:06:20,130
end of last year where it was

174
00:06:18,419 --> 00:06:22,950
researchers but they they were able to

175
00:06:20,130 --> 00:06:26,310
overtake a subdomain in the uber system

176
00:06:22,950 --> 00:06:29,760
and harvest cookies that were site-wide

177
00:06:26,310 --> 00:06:31,530
and replay them so just despite the

178
00:06:29,760 --> 00:06:33,419
various protections around cookies

179
00:06:31,530 --> 00:06:36,359
they're still ways to steal them and

180
00:06:33,419 --> 00:06:37,680
replay them on top of that a lot of

181
00:06:36,360 --> 00:06:39,390
people are you know kind of the

182
00:06:37,680 --> 00:06:41,100
new-school world of single page

183
00:06:39,390 --> 00:06:47,590
applications or spa

184
00:06:41,100 --> 00:06:49,060
that is me it's okay you know a lot of

185
00:06:47,590 --> 00:06:50,619
lot of new development is taking this

186
00:06:49,060 --> 00:06:52,690
course and while a lot of these

187
00:06:50,620 --> 00:06:55,170
applications could actually be protected

188
00:06:52,690 --> 00:06:57,640
with cookies sort of you know the

189
00:06:55,170 --> 00:06:59,470
authorization and session controls could

190
00:06:57,640 --> 00:07:00,729
be done with cookies a lot of app

191
00:06:59,470 --> 00:07:03,100
developers are doing different things

192
00:07:00,730 --> 00:07:04,540
around o auth to maintain sessions

193
00:07:03,100 --> 00:07:06,730
sometimes they need to for cross-site

194
00:07:04,540 --> 00:07:08,530
ability sometimes they don't but

195
00:07:06,730 --> 00:07:11,970
regardless there's there's some of a

196
00:07:08,530 --> 00:07:14,950
trend towards holding session tokens in

197
00:07:11,970 --> 00:07:16,630
local storage and that puts us right

198
00:07:14,950 --> 00:07:18,370
back into the world of being able to

199
00:07:16,630 --> 00:07:21,520
exit rate those sorts of tokens via

200
00:07:18,370 --> 00:07:22,600
cross-site scripting attacks again with

201
00:07:21,520 --> 00:07:24,700
cross-site scripting there's a lot of

202
00:07:22,600 --> 00:07:25,960
other things that can happen so just

203
00:07:24,700 --> 00:07:27,789
protecting against that doesn't

204
00:07:25,960 --> 00:07:29,620
necessarily protect against everything

205
00:07:27,790 --> 00:07:31,840
but it's still a problem that we're sort

206
00:07:29,620 --> 00:07:34,780
of reverting back to by storing these

207
00:07:31,840 --> 00:07:36,460
session tokens in in local storage as

208
00:07:34,780 --> 00:07:38,760
opposed to a cookie where there's other

209
00:07:36,460 --> 00:07:42,489
mitigation mechanisms in place and

210
00:07:38,760 --> 00:07:44,260
Ksenia I hope I'm saying that right even

211
00:07:42,490 --> 00:07:47,310
mentioned yesterday an X field an XSS

212
00:07:44,260 --> 00:07:49,810
exfiltration attack against a jot token

213
00:07:47,310 --> 00:07:53,230
so this is this is a potentially real

214
00:07:49,810 --> 00:07:55,240
problem and what what we've done

215
00:07:53,230 --> 00:07:57,550
historically there's been things to try

216
00:07:55,240 --> 00:07:59,650
to prevent against the exfiltration of

217
00:07:57,550 --> 00:08:02,350
these tokens like it should be only like

218
00:07:59,650 --> 00:08:03,669
secure but token by name which I'm going

219
00:08:02,350 --> 00:08:04,720
to get into here in a minute is it's

220
00:08:03,670 --> 00:08:06,550
sort of looking at it from the other

221
00:08:04,720 --> 00:08:09,610
side and sort of inoculating the tokens

222
00:08:06,550 --> 00:08:10,930
against misuse or reuse once they are

223
00:08:09,610 --> 00:08:12,880
stolen so it doesn't help protect

224
00:08:10,930 --> 00:08:14,080
against the actual stealing of it we

225
00:08:12,880 --> 00:08:16,930
have the other things in place for that

226
00:08:14,080 --> 00:08:20,080
but it makes them more difficult or even

227
00:08:16,930 --> 00:08:22,210
impossible to use if they are stolen and

228
00:08:20,080 --> 00:08:25,030
so that brings me to tow combining which

229
00:08:22,210 --> 00:08:26,710
was originally proposed the work got

230
00:08:25,030 --> 00:08:29,200
started in the IETF the internet

231
00:08:26,710 --> 00:08:30,489
Engineering Task Force in the token

232
00:08:29,200 --> 00:08:32,919
binding working group and it started

233
00:08:30,490 --> 00:08:35,169
about three years ago in Dallas was a

234
00:08:32,919 --> 00:08:37,059
picture I took in Dallas there in the

235
00:08:35,169 --> 00:08:38,500
main photo up in the right is a little

236
00:08:37,059 --> 00:08:39,939
bit more what it really looks like

237
00:08:38,500 --> 00:08:42,820
kicking off a working group meeting

238
00:08:39,940 --> 00:08:44,890
which is a bunch of nerds in a room not

239
00:08:42,820 --> 00:08:46,900
dissimilar to this although this rooms

240
00:08:44,890 --> 00:08:50,110
actually a little bit nicer and you all

241
00:08:46,900 --> 00:08:52,780
of course aren't nerds but what token

242
00:08:50,110 --> 00:08:53,960
binding does is it enables a long live

243
00:08:52,780 --> 00:08:56,839
binding

244
00:08:53,960 --> 00:08:59,170
of cookies or other security tokens Oh

245
00:08:56,840 --> 00:09:02,210
auth tokens and so forth to a

246
00:08:59,170 --> 00:09:05,390
public/private key pair generated on the

247
00:09:02,210 --> 00:09:09,080
client talk a little bit more about how

248
00:09:05,390 --> 00:09:10,580
that actually works so because engineers

249
00:09:09,080 --> 00:09:13,250
like to break things up and layer them

250
00:09:10,580 --> 00:09:14,690
the the core sort of core base token

251
00:09:13,250 --> 00:09:16,970
binding functionality is broken up into

252
00:09:14,690 --> 00:09:18,500
three specifications these are all in

253
00:09:16,970 --> 00:09:20,930
draft right now but they're very very

254
00:09:18,500 --> 00:09:24,440
near this final stages of becoming RFC's

255
00:09:20,930 --> 00:09:26,719
the first one is a TLS extension for

256
00:09:24,440 --> 00:09:29,000
negotiating the use of token binding the

257
00:09:26,720 --> 00:09:30,890
next one is the actual they call it the

258
00:09:29,000 --> 00:09:32,690
token binding protocol but it really is

259
00:09:30,890 --> 00:09:34,480
the definition of what these token

260
00:09:32,690 --> 00:09:36,830
binding messages look like so there's a

261
00:09:34,480 --> 00:09:38,690
message format that's defined how they

262
00:09:36,830 --> 00:09:40,580
how they work and then there's an

263
00:09:38,690 --> 00:09:42,080
application of this stuff to http which

264
00:09:40,580 --> 00:09:47,690
is really two HTTP because all the

265
00:09:42,080 --> 00:09:49,220
underlying layers are our TLS talked a

266
00:09:47,690 --> 00:09:54,680
little bit about how that works so in

267
00:09:49,220 --> 00:10:00,590
TLS this is TLS 1.2 I know 1 3 is coming

268
00:09:54,680 --> 00:10:02,540
out but looking at 1 2 here there is the

269
00:10:00,590 --> 00:10:04,490
client hello and the server hello and

270
00:10:02,540 --> 00:10:05,900
this is how the the handshake begins the

271
00:10:04,490 --> 00:10:07,310
client sends the client hello the server

272
00:10:05,900 --> 00:10:08,870
responds with a server hold a lot of

273
00:10:07,310 --> 00:10:11,150
parameterization negotiation that goes

274
00:10:08,870 --> 00:10:13,760
along in that but in addition to or

275
00:10:11,150 --> 00:10:15,650
within each of those messages there's an

276
00:10:13,760 --> 00:10:18,290
extension mechanism where that you can

277
00:10:15,650 --> 00:10:20,209
include extensions in the hello and the

278
00:10:18,290 --> 00:10:21,439
server can respond within with the same

279
00:10:20,210 --> 00:10:22,820
extension or a variation on the

280
00:10:21,440 --> 00:10:26,090
extension basically acknowledging that

281
00:10:22,820 --> 00:10:28,100
and and agreeing together that they'll

282
00:10:26,090 --> 00:10:30,920
support whatever that extension is in

283
00:10:28,100 --> 00:10:33,440
the course of this connection and token

284
00:10:30,920 --> 00:10:35,180
binding TLS negotiation takes advantage

285
00:10:33,440 --> 00:10:37,610
of this and it looks like this so when

286
00:10:35,180 --> 00:10:39,109
the client sends its client hello along

287
00:10:37,610 --> 00:10:40,700
with whatever our other extensions is

288
00:10:39,110 --> 00:10:41,090
including and it's cipher suites and so

289
00:10:40,700 --> 00:10:43,100
forth

290
00:10:41,090 --> 00:10:44,840
it includes the token binding extension

291
00:10:43,100 --> 00:10:47,120
which happens to be the number 24 and

292
00:10:44,840 --> 00:10:49,160
within that extension that also includes

293
00:10:47,120 --> 00:10:50,780
a version as well as what's called a key

294
00:10:49,160 --> 00:10:52,219
parameters list which is a very

295
00:10:50,780 --> 00:10:54,290
confusing name but it was what's they

296
00:10:52,220 --> 00:10:58,340
called it and the key parameters

297
00:10:54,290 --> 00:11:00,120
basically is a set of it defines a key

298
00:10:58,340 --> 00:11:02,430
type and a signing algorithm that'll be

299
00:11:00,120 --> 00:11:04,440
later and so it gives some algorithm

300
00:11:02,430 --> 00:11:06,420
agility and negotiation ability here and

301
00:11:04,440 --> 00:11:10,260
there's three to find right now one is

302
00:11:06,420 --> 00:11:13,020
to our RSA algorithms with a key size of

303
00:11:10,260 --> 00:11:15,180
2048 and one's the old pkcs1 five

304
00:11:13,020 --> 00:11:18,420
signature the other is PSS there's also

305
00:11:15,180 --> 00:11:20,729
an elliptic curve on the Ness P 256

306
00:11:18,420 --> 00:11:23,099
curve and those are the three that are

307
00:11:20,730 --> 00:11:24,660
defined so the client sends the

308
00:11:23,100 --> 00:11:27,779
algorithms that it supports in the

309
00:11:24,660 --> 00:11:29,730
extension the server sees those checks a

310
00:11:27,779 --> 00:11:31,680
few other things including that extended

311
00:11:29,730 --> 00:11:33,810
master secret has been negotiated and

312
00:11:31,680 --> 00:11:36,329
there's a secure renegotiation extension

313
00:11:33,810 --> 00:11:38,400
if those things aren't available that

314
00:11:36,330 --> 00:11:41,670
can't successfully negotiate to combine

315
00:11:38,400 --> 00:11:43,380
and if they are it responds and it

316
00:11:41,670 --> 00:11:45,180
supports so combining it responds with

317
00:11:43,380 --> 00:11:47,010
the server hello whatever other

318
00:11:45,180 --> 00:11:48,989
extensions is that it has and a token

319
00:11:47,010 --> 00:11:51,180
binding extension message in this case

320
00:11:48,990 --> 00:11:52,920
it also indicates the version there's

321
00:11:51,180 --> 00:11:54,630
some version negotiation stuff there

322
00:11:52,920 --> 00:11:57,209
that will probably not be used and

323
00:11:54,630 --> 00:11:59,760
ossify over time but that's life and it

324
00:11:57,210 --> 00:12:02,010
returns also the key parameters list but

325
00:11:59,760 --> 00:12:04,050
in the response the list is restricted

326
00:12:02,010 --> 00:12:06,000
to only a single value and this is

327
00:12:04,050 --> 00:12:08,310
effectively the server saying okay this

328
00:12:06,000 --> 00:12:09,570
is of the of the signature types and

329
00:12:08,310 --> 00:12:11,579
keys that you said you could support

330
00:12:09,570 --> 00:12:13,230
this is the one that I want you to use

331
00:12:11,580 --> 00:12:14,970
so in this particular example it's

332
00:12:13,230 --> 00:12:19,470
saying great let's do this and let's use

333
00:12:14,970 --> 00:12:21,920
elliptic curve P 256 assuming that piece

334
00:12:19,470 --> 00:12:26,400
of negotiation was successful all

335
00:12:21,920 --> 00:12:30,510
subsequent HTTP requests over that TLS

336
00:12:26,400 --> 00:12:34,350
connection send a header this sec -

337
00:12:30,510 --> 00:12:36,990
token - binding header with an encoded

338
00:12:34,350 --> 00:12:40,529
token binding message on every single

339
00:12:36,990 --> 00:12:42,360
HTTP request over that that connection

340
00:12:40,529 --> 00:12:44,339
where token binding was negotiated and

341
00:12:42,360 --> 00:12:46,770
that is an inchoate encoded token

342
00:12:44,339 --> 00:12:48,420
binding message and it within it it's

343
00:12:46,770 --> 00:12:50,760
basically for your own code it wants to

344
00:12:48,420 --> 00:12:53,430
code it's a binary message that has one

345
00:12:50,760 --> 00:12:54,870
or more token bindings typically just

346
00:12:53,430 --> 00:12:56,599
one but there can be more we'll talk

347
00:12:54,870 --> 00:12:59,640
about the reasons for that a bit later

348
00:12:56,600 --> 00:13:01,260
in each of those token bindings there's

349
00:12:59,640 --> 00:13:03,510
a Type Indicator which is just a single

350
00:13:01,260 --> 00:13:05,790
byte that says whether it's the provided

351
00:13:03,510 --> 00:13:07,470
or referred that's some some jargon and

352
00:13:05,790 --> 00:13:09,870
nomenclature that says whether basically

353
00:13:07,470 --> 00:13:11,640
it's the the key I use directly with the

354
00:13:09,870 --> 00:13:13,500
entity that I'm talking to that's

355
00:13:11,640 --> 00:13:14,010
provided or if it's the key that I use

356
00:13:13,500 --> 00:13:16,019
with

357
00:13:14,010 --> 00:13:17,790
another server that's there to

358
00:13:16,019 --> 00:13:20,180
facilitate cross-domain use cases which

359
00:13:17,790 --> 00:13:22,920
we'll talk about more later but

360
00:13:20,180 --> 00:13:24,689
typically it's just the provided there's

361
00:13:22,920 --> 00:13:26,399
a token binding ID which is another

362
00:13:24,690 --> 00:13:30,540
weird name but basically this is the

363
00:13:26,399 --> 00:13:32,399
public key and the type put together and

364
00:13:30,540 --> 00:13:34,170
and really is just the public key of the

365
00:13:32,399 --> 00:13:35,940
of the key pair that the client

366
00:13:34,170 --> 00:13:38,279
generated so it's the full public key

367
00:13:35,940 --> 00:13:40,740
available encoded and then there's a

368
00:13:38,279 --> 00:13:42,630
signature over the type the key type and

369
00:13:40,740 --> 00:13:45,149
a few other things and most importantly

370
00:13:42,630 --> 00:13:48,060
over the ekm which is the TLS exported

371
00:13:45,149 --> 00:13:50,389
key material which is a basically a

372
00:13:48,060 --> 00:13:53,699
unique cryptographically secure

373
00:13:50,389 --> 00:13:57,889
identifier that's contextualized for a

374
00:13:53,699 --> 00:14:00,209
specific use from the TLS connection and

375
00:13:57,889 --> 00:14:03,089
then there's some room for extensions

376
00:14:00,209 --> 00:14:05,638
but basically what this does by signing

377
00:14:03,089 --> 00:14:08,940
over that ekm is it proves that the

378
00:14:05,639 --> 00:14:10,649
client possesses the private key and it

379
00:14:08,940 --> 00:14:16,380
does so with respect to this specific

380
00:14:10,649 --> 00:14:19,890
TLS connection so the same token binding

381
00:14:16,380 --> 00:14:22,560
message wouldn't be valid over another

382
00:14:19,890 --> 00:14:26,160
TLS connection and couldn't be recreated

383
00:14:22,560 --> 00:14:28,319
by another entity without the private

384
00:14:26,160 --> 00:14:30,029
key over that connection so it binds it

385
00:14:28,320 --> 00:14:32,370
to the specific TLS connection and

386
00:14:30,029 --> 00:14:33,660
associates it with that key and one

387
00:14:32,370 --> 00:14:35,790
important thing here is that these keys

388
00:14:33,660 --> 00:14:39,630
are long-lived in span TLS connections

389
00:14:35,790 --> 00:14:42,120
so even though this might happen and

390
00:14:39,630 --> 00:14:44,430
then the connection is torn down or you

391
00:14:42,120 --> 00:14:45,990
close your laptop and you know go from

392
00:14:44,430 --> 00:14:47,849
work to home and restart the session

393
00:14:45,990 --> 00:14:50,010
you'll get a different token binding

394
00:14:47,850 --> 00:14:52,589
message because the signature is over a

395
00:14:50,010 --> 00:14:54,209
different ekm but the actual key that

396
00:14:52,589 --> 00:14:55,949
you're proving possession of is is

397
00:14:54,209 --> 00:14:58,069
longer term so you can bind things to

398
00:14:55,949 --> 00:15:01,439
that key and they live a long time and

399
00:14:58,069 --> 00:15:05,430
and and so the security mechanisms of it

400
00:15:01,440 --> 00:15:07,170
are also long term probably the most

401
00:15:05,430 --> 00:15:08,880
straightforward application of token

402
00:15:07,170 --> 00:15:11,639
binding would be to bind a cookie to

403
00:15:08,880 --> 00:15:13,500
that token binding key and this is done

404
00:15:11,639 --> 00:15:16,860
by having this server when it issues the

405
00:15:13,500 --> 00:15:18,720
the cookie associated token binding ID

406
00:15:16,860 --> 00:15:20,490
with that cookie and then check it on

407
00:15:18,720 --> 00:15:23,370
subsequent use basically just saying

408
00:15:20,490 --> 00:15:26,670
this cookie usually a session cookie is

409
00:15:23,370 --> 00:15:28,050
only valid when presented by a client

410
00:15:26,670 --> 00:15:30,660
that can also prove possess

411
00:15:28,050 --> 00:15:42,779
this particular public key and then yes

412
00:15:30,660 --> 00:15:48,630
sir yeah yeah that's a fair question

413
00:15:42,779 --> 00:15:51,990
so one so sessions typically are

414
00:15:48,630 --> 00:15:53,880
maintained with a cookie and there's

415
00:15:51,990 --> 00:15:55,620
sort of two main ways to do it one would

416
00:15:53,880 --> 00:15:57,329
be to sign content and the information

417
00:15:55,620 --> 00:16:00,750
the server issues that the other would

418
00:15:57,329 --> 00:16:05,399
be to save it server-side and associate

419
00:16:00,750 --> 00:16:09,000
it this is different in that it's the

420
00:16:05,399 --> 00:16:11,579
either one of those will work here but

421
00:16:09,000 --> 00:16:14,640
it's not the server signing it it's the

422
00:16:11,579 --> 00:16:18,170
server associating that session with a

423
00:16:14,640 --> 00:16:22,589
key that the client proves possession of

424
00:16:18,170 --> 00:16:26,099
so that if this cookie is somehow stolen

425
00:16:22,589 --> 00:16:28,470
and somebody else tries to use it they

426
00:16:26,100 --> 00:16:30,810
also have to prove possession of the

427
00:16:28,470 --> 00:16:33,390
private key of the original client which

428
00:16:30,810 --> 00:16:35,969
is much much more difficult to do it's

429
00:16:33,390 --> 00:16:37,740
much harder to steal you know a private

430
00:16:35,970 --> 00:16:39,320
key for whatever reason than it would be

431
00:16:37,740 --> 00:16:53,310
to steal a cookie

432
00:16:39,320 --> 00:16:55,920
sure in in the sense that it'll prevent

433
00:16:53,310 --> 00:16:59,279
being played by any other party without

434
00:16:55,920 --> 00:17:01,349
the key yes so the same the same client

435
00:16:59,279 --> 00:17:03,899
can replay the cookie because it's it's

436
00:17:01,350 --> 00:17:05,819
proving possession of the Associated key

437
00:17:03,899 --> 00:17:08,459
but if the cookies ever stolen it can't

438
00:17:05,819 --> 00:17:11,428
be replayed because it's it's it's bound

439
00:17:08,459 --> 00:17:13,939
to this this key pair that that only the

440
00:17:11,429 --> 00:17:13,939
client knows

441
00:17:19,309 --> 00:17:27,178
it's it's a it's a new concept I'm sorry

442
00:17:25,740 --> 00:17:28,770
I forgot everyone here he was he was

443
00:17:27,179 --> 00:17:30,960
asking am i talking about the

444
00:17:28,770 --> 00:17:34,020
client-side TLS key or is it a different

445
00:17:30,960 --> 00:17:36,830
key and it is in fact a different key

446
00:17:34,020 --> 00:17:39,629
but it's client-side so it's it's not a

447
00:17:36,830 --> 00:17:43,199
client certificate like you'd see in in

448
00:17:39,630 --> 00:17:45,510
sort of traditional mutual TLS but it is

449
00:17:43,200 --> 00:17:48,350
a a key that's controlled by the client

450
00:17:45,510 --> 00:17:50,549
it's a bear key there's no there's no um

451
00:17:48,350 --> 00:17:52,350
no certificate around it it's just a

452
00:17:50,549 --> 00:17:54,210
bear key that the client generates on

453
00:17:52,350 --> 00:17:55,469
demand or has previously but basically

454
00:17:54,210 --> 00:17:58,020
it's not distributed or anything the

455
00:17:55,470 --> 00:18:01,500
client creates it as needed and then

456
00:17:58,020 --> 00:18:03,510
just proves possession of it over at the

457
00:18:01,500 --> 00:18:06,390
HTTP layer relative to the TLS

458
00:18:03,510 --> 00:18:07,799
connection on every request so it's it's

459
00:18:06,390 --> 00:18:10,230
not um it's not an authentication

460
00:18:07,799 --> 00:18:11,970
mechanism but it's sort of a trust on

461
00:18:10,230 --> 00:18:13,860
first use kind of thing where the client

462
00:18:11,970 --> 00:18:16,679
when it starts communicating says hey

463
00:18:13,860 --> 00:18:18,330
here's a key that I I control the

464
00:18:16,679 --> 00:18:20,070
private portion of and I can prove that

465
00:18:18,330 --> 00:18:21,570
I have over time so that the server can

466
00:18:20,070 --> 00:18:24,000
take things and bind it to that

467
00:18:21,570 --> 00:18:25,320
particular key such that those things

468
00:18:24,000 --> 00:18:26,580
can can't be used by someone that

469
00:18:25,320 --> 00:18:33,990
doesn't possess the private key

470
00:18:26,580 --> 00:18:40,649
associated with it I'm sorry can you

471
00:18:33,990 --> 00:18:42,179
repeat oh okay yeah the question was

472
00:18:40,649 --> 00:18:44,879
what is the what is the persistence

473
00:18:42,179 --> 00:18:47,840
method on the client and that is an

474
00:18:44,880 --> 00:18:50,460
implementation detail of the client but

475
00:18:47,840 --> 00:18:53,279
what we're seeing in the early browser

476
00:18:50,460 --> 00:18:55,140
implementations is they basically treat

477
00:18:53,279 --> 00:18:57,600
them the same way that they do with

478
00:18:55,140 --> 00:18:59,279
cookies so they don't actually even they

479
00:18:57,600 --> 00:19:02,010
don't even surface it to the user but if

480
00:18:59,279 --> 00:19:04,049
you were to clear your cookies through

481
00:19:02,010 --> 00:19:06,419
whatever mechanism it would be you would

482
00:19:04,049 --> 00:19:08,789
also clear the associated token binding

483
00:19:06,419 --> 00:19:11,429
keys and we'll get to it a little bit

484
00:19:08,789 --> 00:19:14,399
later but these keys are also more or

485
00:19:11,429 --> 00:19:16,559
less domain bound so if you orb domain

486
00:19:14,399 --> 00:19:19,639
scoped so if you clear cookies for a

487
00:19:16,559 --> 00:19:21,658
specific site only those associated

488
00:19:19,640 --> 00:19:24,350
token binding keys would be cleared from

489
00:19:21,659 --> 00:19:24,350
your client as well

490
00:19:27,730 --> 00:19:31,660
and that's the browser to use case so

491
00:19:29,670 --> 00:19:33,100
one thing that I think is interesting

492
00:19:31,660 --> 00:19:35,200
and promising about this is this

493
00:19:33,100 --> 00:19:36,879
augments existing authentication and

494
00:19:35,200 --> 00:19:39,430
session management mechanisms

495
00:19:36,880 --> 00:19:42,280
unlike client certificates where

496
00:19:39,430 --> 00:19:44,800
basically you get a a proof of

497
00:19:42,280 --> 00:19:47,100
possession mechanism a strong PKI based

498
00:19:44,800 --> 00:19:50,320
public private key based authentication

499
00:19:47,100 --> 00:19:52,000
that also comes with identity and trust

500
00:19:50,320 --> 00:19:54,129
issues and a bunch of other baggage that

501
00:19:52,000 --> 00:19:56,110
makes it hard to deploy what this does

502
00:19:54,130 --> 00:19:58,240
is that they're just bare keys it's

503
00:19:56,110 --> 00:20:01,179
negotiated and the client starts doing

504
00:19:58,240 --> 00:20:03,430
it and it can all happen transparently

505
00:20:01,180 --> 00:20:05,350
to the users and begin to add security

506
00:20:03,430 --> 00:20:08,590
on top of existing mechanisms so you can

507
00:20:05,350 --> 00:20:11,290
keep your username login username

508
00:20:08,590 --> 00:20:13,270
password login and begin to augment it

509
00:20:11,290 --> 00:20:15,159
with stronger session mechanisms start

510
00:20:13,270 --> 00:20:17,080
to combine in your cookies when

511
00:20:15,160 --> 00:20:18,490
available but only opportunistically it

512
00:20:17,080 --> 00:20:20,139
doesn't have to all be rolled out at

513
00:20:18,490 --> 00:20:23,050
once because of the negotiation and the

514
00:20:20,140 --> 00:20:24,640
way that there's no sort of it doesn't

515
00:20:23,050 --> 00:20:29,020
have to be a big bane deployment it can

516
00:20:24,640 --> 00:20:31,750
be sort of a slow phased deployment

517
00:20:29,020 --> 00:20:33,460
where those participants that support it

518
00:20:31,750 --> 00:20:35,140
can take advantage of it and those that

519
00:20:33,460 --> 00:20:37,690
don't can continue to use the existing

520
00:20:35,140 --> 00:20:42,460
model today which I think will help with

521
00:20:37,690 --> 00:20:43,960
adoption over time so another picture

522
00:20:42,460 --> 00:20:45,760
just being gratuitous this was another

523
00:20:43,960 --> 00:20:47,170
IETF meeting in Chicago but I thought

524
00:20:45,760 --> 00:20:48,730
this tweet was kind of funny that

525
00:20:47,170 --> 00:20:50,110
someone said I don't even know who this

526
00:20:48,730 --> 00:20:51,820
was that they said there's always a new

527
00:20:50,110 --> 00:20:55,449
layering violation to implement here at

528
00:20:51,820 --> 00:20:57,070
IETF which I don't know if they were

529
00:20:55,450 --> 00:20:58,270
talking about token binding or not but

530
00:20:57,070 --> 00:21:00,580
they very well could have been because

531
00:20:58,270 --> 00:21:03,340
token binds a horrible violation of

532
00:21:00,580 --> 00:21:05,409
layering and I say that sort of

533
00:21:03,340 --> 00:21:08,020
tongue-in-cheek I know that but I also

534
00:21:05,410 --> 00:21:10,860
think that oftentimes security problems

535
00:21:08,020 --> 00:21:15,430
arise at the boundary between layers and

536
00:21:10,860 --> 00:21:17,709
so while this is a violation that very

537
00:21:15,430 --> 00:21:19,870
violation is what makes it so useful it

538
00:21:17,710 --> 00:21:22,120
binds things together across those

539
00:21:19,870 --> 00:21:23,739
layers so that they so that the tricky

540
00:21:22,120 --> 00:21:26,229
little space between those layers can't

541
00:21:23,740 --> 00:21:28,900
be used to to you know to carry out

542
00:21:26,230 --> 00:21:31,350
attacks it also makes it hard to

543
00:21:28,900 --> 00:21:33,580
implement which I think will be a

544
00:21:31,350 --> 00:21:35,740
potential blocker for some of this over

545
00:21:33,580 --> 00:21:37,449
time and in deployment because you have

546
00:21:35,740 --> 00:21:39,160
to be able to work at and get access to

547
00:21:37,450 --> 00:21:40,450
different parts of the layering so it's

548
00:21:39,160 --> 00:21:40,940
it's sort of a double-edged sword I

549
00:21:40,450 --> 00:21:43,220
think it

550
00:21:40,940 --> 00:21:45,800
it it is sort of ugly in its solution

551
00:21:43,220 --> 00:21:47,450
space it does provide value but that

552
00:21:45,800 --> 00:21:50,930
ugliness also makes it a little bit more

553
00:21:47,450 --> 00:21:51,980
difficult to implement so I don't know

554
00:21:50,930 --> 00:21:53,210
if y'all think in this but a lot of

555
00:21:51,980 --> 00:21:55,400
times at least early on when I would

556
00:21:53,210 --> 00:21:57,380
begin to talk about this this technology

557
00:21:55,400 --> 00:21:58,970
people and sort of try to evangelize it

558
00:21:57,380 --> 00:22:01,340
people would sort of freak out about the

559
00:21:58,970 --> 00:22:02,840
privacy implications and so I do want to

560
00:22:01,340 --> 00:22:04,850
say that this is not some big super

561
00:22:02,840 --> 00:22:07,879
cookie or some new Big Brother tracking

562
00:22:04,850 --> 00:22:10,580
mechanism and that's because this keys

563
00:22:07,880 --> 00:22:13,760
are scoped so the client generates in a

564
00:22:10,580 --> 00:22:15,020
unique new key or reuses one for it but

565
00:22:13,760 --> 00:22:17,090
they scoped them to the effective

566
00:22:15,020 --> 00:22:18,680
top-level domain plus one I'm glad that

567
00:22:17,090 --> 00:22:21,010
concept was already introduced earlier

568
00:22:18,680 --> 00:22:24,170
today so for example you know

569
00:22:21,010 --> 00:22:27,410
example.com dub dub dub example.com and

570
00:22:24,170 --> 00:22:29,650
et C dot example.com from the browser's

571
00:22:27,410 --> 00:22:32,180
perspective it would all use the same

572
00:22:29,650 --> 00:22:34,100
client-side generated token binding key

573
00:22:32,180 --> 00:22:37,100
but a different key would be used for

574
00:22:34,100 --> 00:22:38,540
example org and also another different

575
00:22:37,100 --> 00:22:39,550
one would be used for example does Co

576
00:22:38,540 --> 00:22:42,980
dot uk'

577
00:22:39,550 --> 00:22:44,629
so it basically has the same scoping and

578
00:22:42,980 --> 00:22:47,210
privacy implications as cookies

579
00:22:44,630 --> 00:22:49,430
themselves it's not which arguably have

580
00:22:47,210 --> 00:22:50,780
their problems but this has the same

581
00:22:49,430 --> 00:22:52,850
problem and it's not making anything

582
00:22:50,780 --> 00:22:54,620
worse in terms of track privacy and

583
00:22:52,850 --> 00:22:56,840
tracking but it is allowing for improved

584
00:22:54,620 --> 00:22:59,649
security around around the use of

585
00:22:56,840 --> 00:23:02,750
cookies and particularly session cookies

586
00:22:59,650 --> 00:23:04,730
so one of the things that my company

587
00:23:02,750 --> 00:23:07,670
does a lot of a lot of is cross domain

588
00:23:04,730 --> 00:23:10,850
single sign-on via sam'l or Open ID

589
00:23:07,670 --> 00:23:12,530
Connect maybe WS Federation and so the

590
00:23:10,850 --> 00:23:14,240
people working on token binding were

591
00:23:12,530 --> 00:23:16,250
aware of these scenarios and built-in

592
00:23:14,240 --> 00:23:18,200
support or some support for cross domain

593
00:23:16,250 --> 00:23:20,480
single sign-on and there's an HTTP

594
00:23:18,200 --> 00:23:23,360
response header that will tell the

595
00:23:20,480 --> 00:23:25,160
browser that it should reveal the token

596
00:23:23,360 --> 00:23:28,429
binding ID that's effectively again the

597
00:23:25,160 --> 00:23:30,110
public key used between itself and the

598
00:23:28,430 --> 00:23:34,280
relying party the site that we're trying

599
00:23:30,110 --> 00:23:38,149
to go to to sign in to in addition to

600
00:23:34,280 --> 00:23:40,700
the one that is being used between

601
00:23:38,150 --> 00:23:42,020
itself and the identity provider so

602
00:23:40,700 --> 00:23:45,620
that's basically saying you start at the

603
00:23:42,020 --> 00:23:49,460
rely on party you realize you need I'm

604
00:23:45,620 --> 00:23:50,959
sorry building slides sometimes get me

605
00:23:49,460 --> 00:23:53,300
and there's also needs to be generic

606
00:23:50,960 --> 00:23:54,470
token binding implementations are

607
00:23:53,300 --> 00:23:56,178
suggested that they have

608
00:23:54,470 --> 00:23:58,220
some ability to send this referred by

609
00:23:56,179 --> 00:24:00,049
name based on other signals or perhaps

610
00:23:58,220 --> 00:24:01,549
something in the API the idea is

611
00:24:00,049 --> 00:24:03,379
basically that sometimes when you

612
00:24:01,549 --> 00:24:04,610
contact a site you need to prove

613
00:24:03,380 --> 00:24:06,830
possession of this key that you're

614
00:24:04,610 --> 00:24:08,120
normally using with that site but there

615
00:24:06,830 --> 00:24:10,639
are other times where that particular

616
00:24:08,120 --> 00:24:12,830
site might might be an identity provider

617
00:24:10,640 --> 00:24:14,870
or an OAuth authorization server that's

618
00:24:12,830 --> 00:24:17,418
gonna be issuing tokens that you will

619
00:24:14,870 --> 00:24:20,330
use somewhere else and this referred

620
00:24:17,419 --> 00:24:21,919
this header and referred to combining

621
00:24:20,330 --> 00:24:24,049
basically allows you to send to tow

622
00:24:21,919 --> 00:24:26,120
combining IDs in that initial request

623
00:24:24,049 --> 00:24:28,668
and allows that server to bind to the

624
00:24:26,120 --> 00:24:31,158
other key so that when you use whatever

625
00:24:28,669 --> 00:24:35,090
that token is at the other party it'll

626
00:24:31,159 --> 00:24:36,620
also be bound and that works like this

627
00:24:35,090 --> 00:24:38,959
basically when you when you start at the

628
00:24:36,620 --> 00:24:40,370
relying party and it needs to send you

629
00:24:38,960 --> 00:24:42,169
over to an identity provider to

630
00:24:40,370 --> 00:24:44,689
authenticate you you include this

631
00:24:42,169 --> 00:24:47,299
include include include referred to

632
00:24:44,690 --> 00:24:49,520
combining ID header set it to true and

633
00:24:47,299 --> 00:24:51,250
that signals to the browser that when it

634
00:24:49,520 --> 00:24:54,889
makes this request the identity provider

635
00:24:51,250 --> 00:24:56,990
to include this the token binding header

636
00:24:54,890 --> 00:24:58,309
in there but this time it has has two

637
00:24:56,990 --> 00:24:59,809
bindings both are provided and the

638
00:24:58,309 --> 00:25:02,690
referred and this allows the identity

639
00:24:59,809 --> 00:25:04,190
provider to do it's a hone binding of

640
00:25:02,690 --> 00:25:06,020
its own session cookies or whatever to

641
00:25:04,190 --> 00:25:09,559
the provided ID but also use the

642
00:25:06,020 --> 00:25:11,090
referred ID to bind something that token

643
00:25:09,559 --> 00:25:13,280
that'll be consumable by the relying

644
00:25:11,090 --> 00:25:15,918
party it's the key that'll be used when

645
00:25:13,280 --> 00:25:18,950
you come back over to the relying party

646
00:25:15,919 --> 00:25:20,690
and it can be and so it allows the sorry

647
00:25:18,950 --> 00:25:22,190
I'm talking all over myself allows the

648
00:25:20,690 --> 00:25:23,419
identity provider to bind to the key

649
00:25:22,190 --> 00:25:24,620
that will be used over here which gives

650
00:25:23,419 --> 00:25:29,590
you the same kind of protection

651
00:25:24,620 --> 00:25:29,590
mechanisms but across domains yes Jim

652
00:25:34,940 --> 00:25:39,210
absolutely yeah we'll look a little bit

653
00:25:37,649 --> 00:25:40,619
actually the details of this this is

654
00:25:39,210 --> 00:25:44,340
just showing the mechanism for sharing

655
00:25:40,619 --> 00:25:46,830
the token binding key it doesn't replace

656
00:25:44,340 --> 00:25:48,749
any of the existing sort of single

657
00:25:46,830 --> 00:25:50,580
sign-on mechanisms it meant SIDS so

658
00:25:48,749 --> 00:25:52,559
there still has to be a relationship the

659
00:25:50,580 --> 00:25:54,059
token that's actually sent back from the

660
00:25:52,559 --> 00:25:55,590
IDP to the reliant party needs to be

661
00:25:54,059 --> 00:25:57,418
signed or otherwise protected or

662
00:25:55,590 --> 00:26:00,570
whatever this is just an additional

663
00:25:57,419 --> 00:26:02,940
mechanism that binds that allows the

664
00:26:00,570 --> 00:26:05,879
identity provider to bind that token to

665
00:26:02,940 --> 00:26:07,769
a key held by the browser which is on

666
00:26:05,879 --> 00:26:09,570
top of the normal functionality where

667
00:26:07,769 --> 00:26:11,669
the identity provider signs the token

668
00:26:09,570 --> 00:26:13,678
and the relying party verifies that it

669
00:26:11,669 --> 00:26:15,330
came from the identity provider this

670
00:26:13,679 --> 00:26:17,039
binds it also to the browser so if

671
00:26:15,330 --> 00:26:18,779
somehow during the course of transit or

672
00:26:17,039 --> 00:26:24,029
whatever it's stolen it can't be played

673
00:26:18,779 --> 00:26:27,600
by another browser I want to do a quick

674
00:26:24,029 --> 00:26:29,309
interlude on jot JWT or jot you're

675
00:26:27,600 --> 00:26:31,289
supposed to pronounce a jot a lot of

676
00:26:29,309 --> 00:26:34,200
people say JWT it's confusing as hell

677
00:26:31,289 --> 00:26:36,090
really but it lets a joke like jot or

678
00:26:34,200 --> 00:26:38,340
not be thrown in there

679
00:26:36,090 --> 00:26:43,230
talk about it real quick this is a jot

680
00:26:38,340 --> 00:26:45,720
it's a three-part base64 URL encoded bit

681
00:26:43,230 --> 00:26:47,639
of JSON and binary and basically this is

682
00:26:45,720 --> 00:26:49,230
jws this is only a sign token they're

683
00:26:47,639 --> 00:26:51,359
also encrypted tokens but I'm gonna just

684
00:26:49,230 --> 00:26:52,950
talk about sign for simplicity here this

685
00:26:51,359 --> 00:26:54,600
has a header which has a few things it

686
00:26:52,950 --> 00:26:56,789
basically says the algorithm that was

687
00:26:54,600 --> 00:26:58,738
used to sign this and a little hint

688
00:26:56,789 --> 00:27:00,600
about what key was used to do it there's

689
00:26:58,739 --> 00:27:02,159
the actual signature which is just the

690
00:27:00,600 --> 00:27:04,498
the application of the algorithm over

691
00:27:02,159 --> 00:27:06,899
the whole whole rest of it and then

692
00:27:04,499 --> 00:27:08,519
inside of that the actual sign protected

693
00:27:06,899 --> 00:27:10,199
material is a bunch of claims which is

694
00:27:08,519 --> 00:27:12,809
really just JSON name value pairs

695
00:27:10,200 --> 00:27:15,149
sometimes more structured than that but

696
00:27:12,809 --> 00:27:17,580
typically just names and values that say

697
00:27:15,149 --> 00:27:20,820
things like who issued it who's it

698
00:27:17,580 --> 00:27:22,320
intended for when it expires and who the

699
00:27:20,820 --> 00:27:24,090
subject of the token is who is this

700
00:27:22,320 --> 00:27:26,070
about so in the single sign-on scenario

701
00:27:24,090 --> 00:27:28,859
before this would be issued by the

702
00:27:26,070 --> 00:27:31,439
identity provider it'd be audience to go

703
00:27:28,859 --> 00:27:33,480
to the relying party and would it be

704
00:27:31,440 --> 00:27:36,559
about me on the subject of the

705
00:27:33,480 --> 00:27:38,700
transaction I don't know what people

706
00:27:36,559 --> 00:27:41,009
have read or know I know there's been

707
00:27:38,700 --> 00:27:44,009
some hot takes on JWT and the underlying

708
00:27:41,009 --> 00:27:45,049
Jenny of us specification so forth some

709
00:27:44,009 --> 00:27:46,730
of them are

710
00:27:45,049 --> 00:27:49,009
I think a lot of them are overblown I

711
00:27:46,730 --> 00:27:50,720
think when used properly this technology

712
00:27:49,009 --> 00:27:52,730
is really valuable and can be used

713
00:27:50,720 --> 00:27:55,879
securely and and provide a lot of value

714
00:27:52,730 --> 00:27:57,230
so it's it's my little take although it

715
00:27:55,879 --> 00:27:58,428
does get misused like many other

716
00:27:57,230 --> 00:28:00,230
technologies I don't think it's

717
00:27:58,429 --> 00:28:02,659
inherently flawed to the extent that

718
00:28:00,230 --> 00:28:06,369
some have said anyway I'm gonna use jots

719
00:28:02,659 --> 00:28:08,149
in some of the subsequent demos or

720
00:28:06,369 --> 00:28:09,439
things that I'm gonna show so I wanted

721
00:28:08,149 --> 00:28:10,850
to just kind of lay out lay that out

722
00:28:09,440 --> 00:28:12,049
they're kind of the basics how they work

723
00:28:10,850 --> 00:28:16,759
in case some people weren't familiar

724
00:28:12,049 --> 00:28:18,369
with it so then there's we talked about

725
00:28:16,759 --> 00:28:21,109
binding the cookies there's also a

726
00:28:18,369 --> 00:28:23,269
formal specification that talks about

727
00:28:21,109 --> 00:28:25,428
how to do costume and single sign-on for

728
00:28:23,269 --> 00:28:26,629
open ID connect with token binding so

729
00:28:25,429 --> 00:28:28,340
this is a sort of an extension

730
00:28:26,629 --> 00:28:30,859
specification open ID Connect and it

731
00:28:28,340 --> 00:28:33,559
describes basically how to use the the

732
00:28:30,859 --> 00:28:35,509
refer token binding and the signaling

733
00:28:33,559 --> 00:28:38,330
header to do exactly that it utilizes

734
00:28:35,509 --> 00:28:40,639
the include token include referred token

735
00:28:38,330 --> 00:28:42,499
binding ID header and the referred token

736
00:28:40,639 --> 00:28:45,320
binding so basically the relying party

737
00:28:42,499 --> 00:28:47,989
or the client in Connect parlance sends

738
00:28:45,320 --> 00:28:49,549
that header to the browser so that the

739
00:28:47,989 --> 00:28:52,309
browser will send the refer token

740
00:28:49,549 --> 00:28:55,100
binding to the IDP or the or they call

741
00:28:52,309 --> 00:28:57,918
it and connect the the provider the open

742
00:28:55,100 --> 00:29:00,049
ID provider that provider takes that

743
00:28:57,919 --> 00:29:02,720
referred binding and binds the ID token

744
00:29:00,049 --> 00:29:06,009
that's the jot that is used since sent

745
00:29:02,720 --> 00:29:09,379
back for single sign-on binds it to the

746
00:29:06,009 --> 00:29:10,970
the referred token binding ID and then

747
00:29:09,379 --> 00:29:13,340
so that binds it again to the browser

748
00:29:10,970 --> 00:29:15,289
that holds the key and what it does is

749
00:29:13,340 --> 00:29:17,570
it uses a new claim another little bit

750
00:29:15,289 --> 00:29:20,749
of JSON that is basically the CNF claim

751
00:29:17,570 --> 00:29:22,639
that means confirmation and another cute

752
00:29:20,749 --> 00:29:24,470
short name of tbh to say this is the

753
00:29:22,639 --> 00:29:26,719
hash of the token binding key token

754
00:29:24,470 --> 00:29:28,999
binding ID key that's that I need the

755
00:29:26,720 --> 00:29:32,239
client when presenting this job to prove

756
00:29:28,999 --> 00:29:33,830
possession of that associated key and so

757
00:29:32,239 --> 00:29:35,749
I'm gonna show a demo here it's in

758
00:29:33,830 --> 00:29:37,369
quotes because I'm not either brave or

759
00:29:35,749 --> 00:29:40,100
stupid enough to actually do a live demo

760
00:29:37,369 --> 00:29:42,049
so I do a lot of screenshots here it's

761
00:29:40,100 --> 00:29:44,988
gonna show basically two things it's

762
00:29:42,049 --> 00:29:46,249
going to show a bound ID token SSO doing

763
00:29:44,989 --> 00:29:48,769
the open ID Connect flow I showed before

764
00:29:46,249 --> 00:29:50,840
and then the relying party is going to

765
00:29:48,769 --> 00:29:53,889
establish its own session based on that

766
00:29:50,840 --> 00:29:57,019
SSO and in turn bind that cookie and

767
00:29:53,889 --> 00:29:58,520
sort of the pieces here are we have an

768
00:29:57,019 --> 00:30:00,860
identity provider that's at

769
00:29:58,520 --> 00:30:03,230
i DP'd example.com and a rely on party

770
00:30:00,860 --> 00:30:05,270
at our P dot example dot IO and this we

771
00:30:03,230 --> 00:30:06,800
blind party is actually just like it's a

772
00:30:05,270 --> 00:30:08,840
reverse proxy that's doing access

773
00:30:06,800 --> 00:30:10,970
control and just for the sake of like

774
00:30:08,840 --> 00:30:13,370
showing what it's doing its proxy into

775
00:30:10,970 --> 00:30:14,990
this HTTP been org so it just basically

776
00:30:13,370 --> 00:30:16,760
takes whatever request comes in and

777
00:30:14,990 --> 00:30:20,510
echoes it back out as JSON so you can

778
00:30:16,760 --> 00:30:22,550
see what's going on so we get started

779
00:30:20,510 --> 00:30:24,590
the first thing that happens is there's

780
00:30:22,550 --> 00:30:28,430
an unauthenticated access request to the

781
00:30:24,590 --> 00:30:30,949
RP that comes in it's a get to you know

782
00:30:28,430 --> 00:30:32,510
RP example dot io headers and you can

783
00:30:30,950 --> 00:30:34,820
see that we didn't see the TLS

784
00:30:32,510 --> 00:30:37,129
negotiation but the sec token binding i

785
00:30:34,820 --> 00:30:39,290
apologize is a small the token binding

786
00:30:37,130 --> 00:30:41,150
not header is here so we've negotiated

787
00:30:39,290 --> 00:30:44,149
tow combining with this relying party

788
00:30:41,150 --> 00:30:48,620
and the browser client is then sending

789
00:30:44,150 --> 00:30:50,090
the the token binding header here but

790
00:30:48,620 --> 00:30:51,739
that's not authentication itself it's

791
00:30:50,090 --> 00:30:53,330
just proving possession of that key so

792
00:30:51,740 --> 00:30:54,590
this is unauthenticated there's no

793
00:30:53,330 --> 00:30:55,879
session cookie or anything like that's

794
00:30:54,590 --> 00:30:58,459
the relying party is going to redirect

795
00:30:55,880 --> 00:31:02,060
off to the IDP for authentication so we

796
00:30:58,460 --> 00:31:05,150
get a 302 authenticating and sends it

797
00:31:02,060 --> 00:31:06,980
off to redirects to the IDP right there

798
00:31:05,150 --> 00:31:09,050
and then maybe most importantly here

799
00:31:06,980 --> 00:31:10,880
right above that inning it includes that

800
00:31:09,050 --> 00:31:13,460
include refer token binding ID header

801
00:31:10,880 --> 00:31:15,980
which again will signal to the browser

802
00:31:13,460 --> 00:31:19,600
client to send both token ID binding ids

803
00:31:15,980 --> 00:31:23,120
to the IDP and we said here here's the

804
00:31:19,600 --> 00:31:24,770
request to get request the IDP and it

805
00:31:23,120 --> 00:31:26,840
sends the sec took and binding header

806
00:31:24,770 --> 00:31:28,129
here and you can see just by I mean it's

807
00:31:26,840 --> 00:31:29,870
a bunch of basic seafloor encoded

808
00:31:28,130 --> 00:31:31,310
garbage basically at this point but it's

809
00:31:29,870 --> 00:31:32,510
significantly larger than the last one

810
00:31:31,310 --> 00:31:34,730
we saw and that's because it contains

811
00:31:32,510 --> 00:31:37,820
two keys and proof of two of those keys

812
00:31:34,730 --> 00:31:39,320
one is the the key that's used here with

813
00:31:37,820 --> 00:31:41,270
the IDP and one is the key that's going

814
00:31:39,320 --> 00:31:45,230
to be used with the relying party and by

815
00:31:41,270 --> 00:31:46,910
providing that one it allows the dot IDP

816
00:31:45,230 --> 00:31:49,100
to bind it to that key when it issues

817
00:31:46,910 --> 00:31:52,280
the token so once we authenticate we

818
00:31:49,100 --> 00:31:53,840
redirect back over to the to the relying

819
00:31:52,280 --> 00:31:55,190
party in this case it's through a form

820
00:31:53,840 --> 00:31:57,199
auto post so there's a lot of different

821
00:31:55,190 --> 00:32:00,920
ways to do that and connect so we get a

822
00:31:57,200 --> 00:32:03,290
host to the callback URL or the redirect

823
00:32:00,920 --> 00:32:05,300
URI of that particular client and again

824
00:32:03,290 --> 00:32:06,770
we see the the tow combining header here

825
00:32:05,300 --> 00:32:08,270
this time it's only the single binding

826
00:32:06,770 --> 00:32:09,900
that's used between the client and this

827
00:32:08,270 --> 00:32:11,820
reliant party

828
00:32:09,900 --> 00:32:13,890
and then we get the post data contains

829
00:32:11,820 --> 00:32:16,530
an ID token which in turn is just a jot

830
00:32:13,890 --> 00:32:18,660
and I'll show the decoded jot content

831
00:32:16,530 --> 00:32:20,610
here you got the header you got all your

832
00:32:18,660 --> 00:32:22,200
claims information and perhaps most

833
00:32:20,610 --> 00:32:24,479
importantly for this example we have the

834
00:32:22,200 --> 00:32:25,860
confirmation claim and the token binding

835
00:32:24,480 --> 00:32:27,660
hash confirmation in there which is

836
00:32:25,860 --> 00:32:30,090
which is a hash just of the key within

837
00:32:27,660 --> 00:32:32,370
that message so in delivering this token

838
00:32:30,090 --> 00:32:34,590
the client has shown up proved

839
00:32:32,370 --> 00:32:36,600
possession of the Associated key by

840
00:32:34,590 --> 00:32:38,550
sending the header and then delivered

841
00:32:36,600 --> 00:32:40,290
this token that's meant to represent the

842
00:32:38,550 --> 00:32:42,270
authentication of the user that is in

843
00:32:40,290 --> 00:32:44,010
turn bound to that key so we have really

844
00:32:42,270 --> 00:32:46,020
really high confidence that the

845
00:32:44,010 --> 00:32:47,730
presenter of this token is the one that

846
00:32:46,020 --> 00:32:49,470
that that is allowed to do it that's

847
00:32:47,730 --> 00:32:51,030
expected to do as a proof possession of

848
00:32:49,470 --> 00:32:57,090
associated key in order to do the

849
00:32:51,030 --> 00:32:58,950
sign-on oh and then as a result we

850
00:32:57,090 --> 00:33:00,899
successfully validate that and the

851
00:32:58,950 --> 00:33:02,280
relying party then sets its own session

852
00:33:00,900 --> 00:33:05,580
cookie which you can see here in a sec

853
00:33:02,280 --> 00:33:07,170
cookie and redirects back to the

854
00:33:05,580 --> 00:33:09,689
originally requested resource which is

855
00:33:07,170 --> 00:33:12,530
to see this headers page and another

856
00:33:09,690 --> 00:33:14,880
request comes in it is a get to that

857
00:33:12,530 --> 00:33:17,639
particular resource again sending this

858
00:33:14,880 --> 00:33:19,800
the token binding ID in this case we're

859
00:33:17,640 --> 00:33:21,300
replaying not replaying the the browser

860
00:33:19,800 --> 00:33:23,280
is playing the cookie as a session

861
00:33:21,300 --> 00:33:25,409
mechanism and this and this too is being

862
00:33:23,280 --> 00:33:26,550
represented as a jot in this case it's a

863
00:33:25,410 --> 00:33:29,580
sign job because it's a little bit

864
00:33:26,550 --> 00:33:33,450
easier to see a symmetrically encrypted

865
00:33:29,580 --> 00:33:35,429
job is probably a better better token to

866
00:33:33,450 --> 00:33:38,900
use for this this case but I did this

867
00:33:35,430 --> 00:33:41,940
just for example and that particular

868
00:33:38,900 --> 00:33:45,680
cookie then is bound to the same key so

869
00:33:41,940 --> 00:33:47,910
we have a token bound session here that

870
00:33:45,680 --> 00:33:52,100
couldn't be used by any other browser

871
00:33:47,910 --> 00:33:52,100
even if the session cookie is stolen oh

872
00:33:52,250 --> 00:33:57,210
and then just showing a little bit of

873
00:33:54,690 --> 00:33:58,800
what the what the reverse proxy the

874
00:33:57,210 --> 00:34:00,840
student access control is doing here not

875
00:33:58,800 --> 00:34:02,790
only does it check the token binding key

876
00:34:00,840 --> 00:34:04,800
it pulls some some user information out

877
00:34:02,790 --> 00:34:06,180
of their job and indexes in the headers

878
00:34:04,800 --> 00:34:07,500
and sends it to the backend which in

879
00:34:06,180 --> 00:34:11,120
this case it's just echoing it back to

880
00:34:07,500 --> 00:34:11,120
us as Jason yes

881
00:34:15,090 --> 00:34:41,260
yeah so yeah so that's a really good

882
00:34:40,630 --> 00:34:43,930
question

883
00:34:41,260 --> 00:34:45,910
and let me try to repeat it one is

884
00:34:43,929 --> 00:34:47,739
basically he said you're doing a lot of

885
00:34:45,909 --> 00:34:49,509
protocol details here and that's great

886
00:34:47,739 --> 00:34:50,919
but that's that's sort of stupid because

887
00:34:49,510 --> 00:34:52,930
the real problem is going to be key

888
00:34:50,920 --> 00:34:57,490
distribution how do the clients get all

889
00:34:52,929 --> 00:35:01,810
these keys is that a fair I interpreted

890
00:34:57,490 --> 00:35:04,419
it though I was trying to make it funny

891
00:35:01,810 --> 00:35:06,120
you called me stupid no um no it's a

892
00:35:04,420 --> 00:35:08,890
really good question because one of the

893
00:35:06,120 --> 00:35:10,600
one of the difficulties and you could

894
00:35:08,890 --> 00:35:11,620
argue we already have technology very

895
00:35:10,600 --> 00:35:14,110
very similar to this and that's

896
00:35:11,620 --> 00:35:15,700
client-side TLS and browsers can do that

897
00:35:14,110 --> 00:35:18,430
today but the user experience is

898
00:35:15,700 --> 00:35:20,200
horrible and the operational experience

899
00:35:18,430 --> 00:35:22,270
is maybe even worse in terms of

900
00:35:20,200 --> 00:35:25,270
distributing and managing and renewing

901
00:35:22,270 --> 00:35:27,190
those certificates the not the key one

902
00:35:25,270 --> 00:35:28,780
of the main key differences about token

903
00:35:27,190 --> 00:35:31,960
binding as opposed to that is these are

904
00:35:28,780 --> 00:35:34,510
not certificates they're raw keys and

905
00:35:31,960 --> 00:35:36,850
they're not distributed they're

906
00:35:34,510 --> 00:35:39,490
generated on demand by the client so

907
00:35:36,850 --> 00:35:41,950
there's no need for distribution it's

908
00:35:39,490 --> 00:35:43,390
basically the client creates a key when

909
00:35:41,950 --> 00:35:45,419
it's new what it needs it and starts

910
00:35:43,390 --> 00:35:47,890
using it and the server doesn't

911
00:35:45,420 --> 00:35:50,410
authenticate authenticate against that

912
00:35:47,890 --> 00:35:52,839
key it just uses the fact that the

913
00:35:50,410 --> 00:35:55,859
client proves possession of that key so

914
00:35:52,840 --> 00:35:58,090
it can bind tokens to that specific

915
00:35:55,860 --> 00:36:00,040
client so they can't be used from

916
00:35:58,090 --> 00:36:03,450
anywhere else in a way you can think of

917
00:36:00,040 --> 00:36:06,880
it as like you know maybe maybe really

918
00:36:03,450 --> 00:36:08,560
cryptographically strong and less

919
00:36:06,880 --> 00:36:10,750
error-prone method of browser

920
00:36:08,560 --> 00:36:13,330
fingerprinting so a lot of times a

921
00:36:10,750 --> 00:36:15,460
session cookie will try to be browser

922
00:36:13,330 --> 00:36:17,080
fingerprinted a little bit or associated

923
00:36:15,460 --> 00:36:18,580
with an IP address so I think it's used

924
00:36:17,080 --> 00:36:20,290
from somewhere else they can reject it

925
00:36:18,580 --> 00:36:22,880
or do something but those those

926
00:36:20,290 --> 00:36:25,190
techniques are terribly hard to do and

927
00:36:22,880 --> 00:36:26,720
prone but in both directions this is

928
00:36:25,190 --> 00:36:28,700
doing the same kind of thing allowing

929
00:36:26,720 --> 00:36:31,308
you to associate a session cookie with a

930
00:36:28,700 --> 00:36:33,799
specific browser but doing it using

931
00:36:31,309 --> 00:36:35,990
public private key cryptography so it's

932
00:36:33,799 --> 00:36:38,599
very strong and it's not prone to either

933
00:36:35,990 --> 00:36:40,008
false negatives or false positives but

934
00:36:38,599 --> 00:36:41,329
but there is does a long way around

935
00:36:40,009 --> 00:36:43,099
saying there's no key distribution

936
00:36:41,329 --> 00:36:48,789
problem because it's it's client-side

937
00:36:43,099 --> 00:36:48,789
generated keys whoa lots of hands yeah

938
00:36:49,630 --> 00:36:54,039
wherever the client wants to store it

939
00:36:56,619 --> 00:37:02,900
it's a good question so as far as I know

940
00:37:01,099 --> 00:37:04,279
there's some early implementations of

941
00:37:02,900 --> 00:37:06,740
this in browsers and there

942
00:37:04,279 --> 00:37:09,349
software-based keys and there's they're

943
00:37:06,740 --> 00:37:11,930
protected as well as other assets on the

944
00:37:09,349 --> 00:37:15,529
machine and software there are also I

945
00:37:11,930 --> 00:37:18,529
think plans or at least the idea that

946
00:37:15,529 --> 00:37:21,200
these keys could be stored you know in a

947
00:37:18,529 --> 00:37:23,029
TPM type device whatever the trusted

948
00:37:21,200 --> 00:37:24,500
computing module or the I don't know all

949
00:37:23,029 --> 00:37:26,420
the right terminology but like the local

950
00:37:24,500 --> 00:37:28,099
hardware security module on a phone or

951
00:37:26,420 --> 00:37:33,349
something like that and that's actually

952
00:37:28,099 --> 00:37:34,640
one of the reasons why pkcs1 1.5 RSA

953
00:37:33,349 --> 00:37:36,109
signatures are supported is the

954
00:37:34,640 --> 00:37:39,078
expectation that some of those hardware

955
00:37:36,109 --> 00:37:41,150
key modules need that in order to be

956
00:37:39,079 --> 00:37:45,859
able to function they can't do PSS or

957
00:37:41,150 --> 00:37:47,930
elliptic curves so it the specification

958
00:37:45,859 --> 00:37:49,788
doesn't demand one or the other there's

959
00:37:47,930 --> 00:37:51,529
certainly the potential for higher value

960
00:37:49,789 --> 00:37:53,269
systems to store those keys and you know

961
00:37:51,529 --> 00:37:56,059
in hardware such that they can't be

962
00:37:53,269 --> 00:37:57,379
protected a Mike my feeling though too

963
00:37:56,059 --> 00:37:59,420
is that even if they're in software

964
00:37:57,380 --> 00:38:02,089
they're going to be significantly better

965
00:37:59,420 --> 00:38:03,619
protected than the tokens that they're

966
00:38:02,089 --> 00:38:04,819
meant to protect so a lot of the things

967
00:38:03,619 --> 00:38:06,349
that we're seeing now as bearer tokens

968
00:38:04,819 --> 00:38:08,058
being stolen because they they're easily

969
00:38:06,349 --> 00:38:09,710
exfiltrated because they're supposed to

970
00:38:08,059 --> 00:38:11,210
be some other places so they're not

971
00:38:09,710 --> 00:38:13,490
tightly protected and so it's not

972
00:38:11,210 --> 00:38:15,019
perfect but but protecting the keys and

973
00:38:13,490 --> 00:38:19,269
softwares think is still a significantly

974
00:38:15,019 --> 00:38:19,269
better stuff yes sir

975
00:38:25,170 --> 00:38:34,359
yeah yeah the biggest one is the

976
00:38:33,339 --> 00:38:37,480
longevity of it

977
00:38:34,359 --> 00:38:39,910
so that lasts as long as the TLS session

978
00:38:37,480 --> 00:38:41,680
which many times are very short like in

979
00:38:39,910 --> 00:38:43,509
in the course of browsing and are

980
00:38:41,680 --> 00:38:45,339
messing around like you know if you take

981
00:38:43,510 --> 00:38:46,930
a break it depends on the timeouts and

982
00:38:45,339 --> 00:38:48,910
things but the TLS sessions often torn

983
00:38:46,930 --> 00:38:51,700
down in a matter of minutes and and

984
00:38:48,910 --> 00:38:54,520
re-established whereas these because it

985
00:38:51,700 --> 00:38:56,230
the ekm can be thought of sort of like a

986
00:38:54,520 --> 00:38:58,540
unique identifier for the for the

987
00:38:56,230 --> 00:39:00,190
session but what's it's being used as

988
00:38:58,540 --> 00:39:01,569
sort of a transitory bit of proof

989
00:39:00,190 --> 00:39:04,059
relative to that connection

990
00:39:01,569 --> 00:39:07,029
of possession of this public-private key

991
00:39:04,059 --> 00:39:08,619
pair so if you buy and sorry I'm having

992
00:39:07,030 --> 00:39:11,079
trouble explaining it binding of the

993
00:39:08,619 --> 00:39:12,730
session is relatively short-lived token

994
00:39:11,079 --> 00:39:15,190
binding binds to a key on the client

995
00:39:12,730 --> 00:39:19,599
which can be very long-lived so you can

996
00:39:15,190 --> 00:39:22,210
issue you know cookie that a session

997
00:39:19,599 --> 00:39:24,010
that's longer lived and continue to use

998
00:39:22,210 --> 00:39:26,170
the same keys so that if you establish a

999
00:39:24,010 --> 00:39:27,430
new TLS connection you'll get the same

1000
00:39:26,170 --> 00:39:30,069
binding the same benefits you won't have

1001
00:39:27,430 --> 00:39:32,259
to log in again if you log in and you

1002
00:39:30,069 --> 00:39:35,109
know at work do some of your work close

1003
00:39:32,260 --> 00:39:36,880
down your laptop go home and then try to

1004
00:39:35,109 --> 00:39:38,529
pick up the work there again if you're

1005
00:39:36,880 --> 00:39:39,849
buying into this TLS connection itself

1006
00:39:38,530 --> 00:39:41,829
you'd have a new one you'd have to log

1007
00:39:39,849 --> 00:39:43,329
in again if you're using token binding

1008
00:39:41,829 --> 00:39:45,160
it's bounded the other actually to the

1009
00:39:43,329 --> 00:39:46,990
key so you can get the same protections

1010
00:39:45,160 --> 00:39:49,980
but resume your work and not not have to

1011
00:39:46,990 --> 00:39:49,979
log in again at that point

1012
00:40:25,180 --> 00:40:32,690
so the question was I again I think

1013
00:40:29,000 --> 00:40:34,540
there was a wire you stupid in there I'm

1014
00:40:32,690 --> 00:40:38,300
not kidding

1015
00:40:34,540 --> 00:40:41,240
what was that oh f1 had had signatures

1016
00:40:38,300 --> 00:40:43,730
it had a proof of possession type of

1017
00:40:41,240 --> 00:40:45,020
mechanism that that came with a lot of

1018
00:40:43,730 --> 00:40:46,790
problems and they weren't actually in

1019
00:40:45,020 --> 00:40:48,200
the signatures themselves so much as in

1020
00:40:46,790 --> 00:40:50,000
the the canonicalization and

1021
00:40:48,200 --> 00:40:53,299
normalization of the requests in the URL

1022
00:40:50,000 --> 00:40:54,770
to be signed and getting away from that

1023
00:40:53,300 --> 00:40:57,500
and pushing the security of the TLS

1024
00:40:54,770 --> 00:41:00,470
layer was a big motivation behind what

1025
00:40:57,500 --> 00:41:02,839
was done in - authe - as well as the

1026
00:41:00,470 --> 00:41:04,368
ability to support different types of

1027
00:41:02,839 --> 00:41:06,740
clients another thing that happened in

1028
00:41:04,369 --> 00:41:08,630
auth one is that that signature was not

1029
00:41:06,740 --> 00:41:10,459
just part of the token but it sort of

1030
00:41:08,630 --> 00:41:12,319
combined the token and the client

1031
00:41:10,460 --> 00:41:14,420
identifier into the key material that

1032
00:41:12,319 --> 00:41:16,069
signed it and it had a ton of

1033
00:41:14,420 --> 00:41:19,250
operational and deployment problems that

1034
00:41:16,069 --> 00:41:21,730
people had I will talk about this a

1035
00:41:19,250 --> 00:41:25,940
little bit more later it's sort of I

1036
00:41:21,730 --> 00:41:28,339
guess it's sort of philosophical that if

1037
00:41:25,940 --> 00:41:31,790
and when the underlying infrastructure

1038
00:41:28,339 --> 00:41:33,470
and api's are available to to do tow

1039
00:41:31,790 --> 00:41:35,270
combining getting the proof in

1040
00:41:33,470 --> 00:41:37,459
possession mechanism then into the

1041
00:41:35,270 --> 00:41:39,500
tokens and dealing with it at that layer

1042
00:41:37,460 --> 00:41:42,470
once the underlying api is in TLS

1043
00:41:39,500 --> 00:41:43,970
nothing is in place makes it super super

1044
00:41:42,470 --> 00:41:46,399
simple to do and that's kind of

1045
00:41:43,970 --> 00:41:48,169
consistent with the philosophy of OAuth

1046
00:41:46,400 --> 00:41:49,849
in the first place o auth - in the first

1047
00:41:48,170 --> 00:41:52,130
place which was to defer as much as

1048
00:41:49,849 --> 00:41:53,900
possible with the security onto the TLS

1049
00:41:52,130 --> 00:41:55,910
layer because there exist a lot of

1050
00:41:53,900 --> 00:41:57,589
robust libraries and functionality for

1051
00:41:55,910 --> 00:42:00,078
that rather than trying to build it into

1052
00:41:57,589 --> 00:42:02,359
the application layer and that I think

1053
00:42:00,079 --> 00:42:07,520
will continue to be true here to the

1054
00:42:02,359 --> 00:42:09,200
extent that TLS stacks and api's allow

1055
00:42:07,520 --> 00:42:10,090
for this kind of functionality to exist

1056
00:42:09,200 --> 00:42:11,649
and now

1057
00:42:10,090 --> 00:42:24,160
quite frankly as a question whether that

1058
00:42:11,650 --> 00:42:24,580
will happen and on what timeframe I hope

1059
00:42:24,160 --> 00:42:28,899
so

1060
00:42:24,580 --> 00:42:30,460
so that it it's a fair question I'll

1061
00:42:28,900 --> 00:42:33,640
talk a little bit about the landscape of

1062
00:42:30,460 --> 00:42:35,230
support a little bit later but there are

1063
00:42:33,640 --> 00:42:36,879
some some pretty significant players

1064
00:42:35,230 --> 00:42:41,020
involved Google being one of them

1065
00:42:36,880 --> 00:42:44,680
and and Microsoft there's it's not in

1066
00:42:41,020 --> 00:42:46,870
open SSL yet but there's some sorry it

1067
00:42:44,680 --> 00:42:48,160
there's some extensions open stem cell

1068
00:42:46,870 --> 00:42:50,500
that make this possible that are

1069
00:42:48,160 --> 00:42:52,299
currently available the specification

1070
00:42:50,500 --> 00:42:54,910
itself is going to register this

1071
00:42:52,300 --> 00:42:58,030
extension with the IETF TLS extension

1072
00:42:54,910 --> 00:43:00,270
registry there are people working on TLS

1073
00:42:58,030 --> 00:43:03,250
that are also working on this so it's

1074
00:43:00,270 --> 00:43:04,660
it's not a sure thing by any means but

1075
00:43:03,250 --> 00:43:05,740
the the right kind of people are

1076
00:43:04,660 --> 00:43:07,149
involved and the right kind of

1077
00:43:05,740 --> 00:43:08,169
organizations are involved that they

1078
00:43:07,150 --> 00:43:17,650
give me some hope that it will be

1079
00:43:08,170 --> 00:43:21,400
adopted all right oh I thought this was

1080
00:43:17,650 --> 00:43:23,200
funny when echoing back a bunch of base

1081
00:43:21,400 --> 00:43:24,580
64 year old encoded information chrome

1082
00:43:23,200 --> 00:43:27,160
would occasionally asked me if I wanted

1083
00:43:24,580 --> 00:43:28,900
to translate the page from Polish I

1084
00:43:27,160 --> 00:43:30,490
don't really know what that means but

1085
00:43:28,900 --> 00:43:32,050
there's a lot of talk about AI and how

1086
00:43:30,490 --> 00:43:33,310
powerful it is but you know as long as

1087
00:43:32,050 --> 00:43:34,630
these things are happening I don't think

1088
00:43:33,310 --> 00:43:38,080
the bots are taking over the world just

1089
00:43:34,630 --> 00:43:40,000
yet that's the end of my demo I didn't

1090
00:43:38,080 --> 00:43:42,700
have my own photograph of a dog and a

1091
00:43:40,000 --> 00:43:47,020
pony but I thought a unicorn playing a

1092
00:43:42,700 --> 00:43:50,500
guitar would kind of sub in for that so

1093
00:43:47,020 --> 00:43:51,070
that was open ID Connect cookies being

1094
00:43:50,500 --> 00:43:53,440
bound

1095
00:43:51,070 --> 00:43:56,410
there's also token binding for oauth2

1096
00:43:53,440 --> 00:43:58,210
and that's itself its own specification

1097
00:43:56,410 --> 00:44:00,129
being developed in the IETF inside of

1098
00:43:58,210 --> 00:44:03,160
the token by our excuse me inside of the

1099
00:44:00,130 --> 00:44:04,780
OAuth working group real quickly go over

1100
00:44:03,160 --> 00:44:06,430
how this works basically it binds access

1101
00:44:04,780 --> 00:44:08,650
tokens with that referred to combining

1102
00:44:06,430 --> 00:44:10,330
ideas maybe you could guess it's binding

1103
00:44:08,650 --> 00:44:12,040
to something that some other site will

1104
00:44:10,330 --> 00:44:13,390
be using or the or the connection

1105
00:44:12,040 --> 00:44:15,460
between the client and that other site

1106
00:44:13,390 --> 00:44:17,020
it talks about how to bind refresh

1107
00:44:15,460 --> 00:44:18,670
tokens with the provided ID which is

1108
00:44:17,020 --> 00:44:21,100
actually really similar to the the

1109
00:44:18,670 --> 00:44:23,240
cookie binding case the the Refresh

1110
00:44:21,100 --> 00:44:24,860
token only ever goes between the client

1111
00:44:23,240 --> 00:44:28,189
and the authorization server that issued

1112
00:44:24,860 --> 00:44:29,450
it so binding to the the key that's used

1113
00:44:28,190 --> 00:44:32,000
on the connection between those two

1114
00:44:29,450 --> 00:44:33,529
entities makes sense there's some stuff

1115
00:44:32,000 --> 00:44:35,930
to buy an authorization codes using

1116
00:44:33,530 --> 00:44:38,300
extensions of pixie which is it's

1117
00:44:35,930 --> 00:44:41,690
interesting I can say that because I

1118
00:44:38,300 --> 00:44:43,910
wrote some of it we'll see and then

1119
00:44:41,690 --> 00:44:45,410
there's also token binding for job based

1120
00:44:43,910 --> 00:44:48,080
authorization grants and client

1121
00:44:45,410 --> 00:44:49,819
authentication I just want to talk a

1122
00:44:48,080 --> 00:44:51,740
little bit about token binding for

1123
00:44:49,820 --> 00:44:53,780
access tokens this is arguably one of

1124
00:44:51,740 --> 00:44:55,310
the most useful applications and it

1125
00:44:53,780 --> 00:44:57,590
prevents the use of lost or stolen

1126
00:44:55,310 --> 00:44:59,630
access tokens again it it inoculates

1127
00:44:57,590 --> 00:45:01,310
inoculates these tokens from being used

1128
00:44:59,630 --> 00:45:04,100
by a party that doesn't possess the

1129
00:45:01,310 --> 00:45:05,540
Associated private key access tokens are

1130
00:45:04,100 --> 00:45:07,759
a lot like cookies except for all the

1131
00:45:05,540 --> 00:45:09,650
ways that they are in the in the early

1132
00:45:07,760 --> 00:45:11,960
days of OAuth there a lot of comparisons

1133
00:45:09,650 --> 00:45:16,400
drawn between cookies and access tokens

1134
00:45:11,960 --> 00:45:18,530
and and as a result sort of justifying

1135
00:45:16,400 --> 00:45:19,970
the fact that that they were bear tokens

1136
00:45:18,530 --> 00:45:21,560
that I was okay because cookies are a

1137
00:45:19,970 --> 00:45:22,939
bear tokens and that's been mostly okay

1138
00:45:21,560 --> 00:45:24,410
and these are access tokens their

1139
00:45:22,940 --> 00:45:26,450
burgers are a lot like cookies so that's

1140
00:45:24,410 --> 00:45:28,220
probably gonna be okay as well

1141
00:45:26,450 --> 00:45:30,589
more and more though we're seeing that

1142
00:45:28,220 --> 00:45:32,118
that access tokens are aren't exactly

1143
00:45:30,590 --> 00:45:35,080
like cookies they don't have the same

1144
00:45:32,119 --> 00:45:37,369
you know single origin protections and

1145
00:45:35,080 --> 00:45:38,600
depending on the the use case and the

1146
00:45:37,369 --> 00:45:39,530
client involved you know the client

1147
00:45:38,600 --> 00:45:41,509
might be sending them to different

1148
00:45:39,530 --> 00:45:42,890
places if the clients dynamically

1149
00:45:41,510 --> 00:45:44,210
discovering those resources there's

1150
00:45:42,890 --> 00:45:47,690
various attacks that can be leveled

1151
00:45:44,210 --> 00:45:48,890
levied against it so there's there's I

1152
00:45:47,690 --> 00:45:51,290
think growing need for stronger

1153
00:45:48,890 --> 00:45:52,400
protections on access tokens another

1154
00:45:51,290 --> 00:45:53,779
thing that prevents which I think is

1155
00:45:52,400 --> 00:45:56,270
pretty interesting as a production so

1156
00:45:53,780 --> 00:45:57,740
protected resource the the API or

1157
00:45:56,270 --> 00:46:00,109
whatever that's actually accepting the

1158
00:45:57,740 --> 00:46:01,669
access tokens from using the token at

1159
00:46:00,109 --> 00:46:03,560
another protected resource because it's

1160
00:46:01,670 --> 00:46:05,750
bound to that client you can't suddenly

1161
00:46:03,560 --> 00:46:07,430
have a malicious API or protected

1162
00:46:05,750 --> 00:46:11,090
resource that starts reusing tokens

1163
00:46:07,430 --> 00:46:12,950
against another protected resource this

1164
00:46:11,090 --> 00:46:14,660
was a little bit to your point is this

1165
00:46:12,950 --> 00:46:16,580
isn't the first time we've tried to do

1166
00:46:14,660 --> 00:46:19,160
proof of possession for access tokens we

1167
00:46:16,580 --> 00:46:20,619
had it an OAuth one sort of I mean we

1168
00:46:19,160 --> 00:46:23,839
did it was different but it was there

1169
00:46:20,619 --> 00:46:26,270
there was a big kerfuffle right before

1170
00:46:23,840 --> 00:46:27,690
the publishing of OAuth 2 itself where

1171
00:46:26,270 --> 00:46:30,329
the editor

1172
00:46:27,690 --> 00:46:35,010
wrote a really compassionate blog post

1173
00:46:30,329 --> 00:46:36,900
and quit I can see both sides of that

1174
00:46:35,010 --> 00:46:38,849
but it was it was because basically

1175
00:46:36,900 --> 00:46:40,200
largely because there wasn't native

1176
00:46:38,849 --> 00:46:41,460
support for some kind of proof of

1177
00:46:40,200 --> 00:46:44,788
possession mechanism in the core

1178
00:46:41,460 --> 00:46:47,069
specification itself a while ago there

1179
00:46:44,789 --> 00:46:49,680
was an attempt to to redefine sort of

1180
00:46:47,069 --> 00:46:51,509
the oauth1 style model a little bit by

1181
00:46:49,680 --> 00:46:54,240
doing HTTP request level signing and

1182
00:46:51,510 --> 00:46:56,520
OAuth which just it's still out there

1183
00:46:54,240 --> 00:46:58,589
but it's sort of petered out there's

1184
00:46:56,520 --> 00:47:01,259
another standard that uses client-side

1185
00:46:58,589 --> 00:47:03,990
TLS to do much of the same same kind of

1186
00:47:01,260 --> 00:47:05,339
binding here which is it's interesting

1187
00:47:03,990 --> 00:47:08,009
it's actually something I'm working on

1188
00:47:05,339 --> 00:47:12,390
it's it's out there largely to support

1189
00:47:08,010 --> 00:47:15,030
new open banking API initiatives largely

1190
00:47:12,390 --> 00:47:17,038
in Europe that need some kind of proof

1191
00:47:15,030 --> 00:47:18,869
of possession mechanism like now and

1192
00:47:17,039 --> 00:47:21,869
while I think tow combining is really

1193
00:47:18,869 --> 00:47:23,220
promising it's not ready for primetime

1194
00:47:21,869 --> 00:47:26,339
it's not ready to be deployed where

1195
00:47:23,220 --> 00:47:29,730
mutual TLS is so it's not a new thing

1196
00:47:26,339 --> 00:47:31,558
but this maybe offers um this is what I

1197
00:47:29,730 --> 00:47:33,270
said before token binding of access

1198
00:47:31,559 --> 00:47:37,470
tokens is really easy except for all the

1199
00:47:33,270 --> 00:47:40,529
hard parts yeah what the was the

1200
00:47:37,470 --> 00:47:43,348
question I'm supposed to repeat and that

1201
00:47:40,529 --> 00:47:45,720
is to say that once the api's are in

1202
00:47:43,349 --> 00:47:48,329
place at the underlying layer once your

1203
00:47:45,720 --> 00:47:50,910
TLS stack and maybe your HTTP stack

1204
00:47:48,329 --> 00:47:52,349
support this stuff doing this from the

1205
00:47:50,910 --> 00:47:54,779
client side or even the server side is

1206
00:47:52,349 --> 00:47:57,150
like it's crazy easy it's like a super

1207
00:47:54,779 --> 00:48:00,059
simple way to do bound tokens but until

1208
00:47:57,150 --> 00:48:01,529
that stuff is in place it's it's really

1209
00:48:00,059 --> 00:48:03,119
hard or almost impossible it's not

1210
00:48:01,529 --> 00:48:04,200
something that the average developer can

1211
00:48:03,119 --> 00:48:05,819
just go start building themselves

1212
00:48:04,200 --> 00:48:07,589
because you need access to all these

1213
00:48:05,819 --> 00:48:10,049
different layers and oftentimes layers

1214
00:48:07,589 --> 00:48:11,730
that either aren't accessible or not

1215
00:48:10,049 --> 00:48:15,170
easily accessible for your average

1216
00:48:11,730 --> 00:48:17,220
developer or really many most developers

1217
00:48:15,170 --> 00:48:19,559
just a quick look at what that would

1218
00:48:17,220 --> 00:48:22,109
look like because I like writing that's

1219
00:48:19,559 --> 00:48:23,880
too hard to read and pictures token

1220
00:48:22,109 --> 00:48:25,470
bound access token there's not much to

1221
00:48:23,880 --> 00:48:27,839
it when you look at it in this case the

1222
00:48:25,470 --> 00:48:29,609
OAuth client makes a request for a new

1223
00:48:27,839 --> 00:48:31,140
access token the authorization server in

1224
00:48:29,609 --> 00:48:34,440
this case it's prevented presenting its

1225
00:48:31,140 --> 00:48:36,420
refresh token and it sends the sec token

1226
00:48:34,440 --> 00:48:38,700
binding ID our sec token binding header

1227
00:48:36,420 --> 00:48:40,319
here that has to tow combining IDs the

1228
00:48:38,700 --> 00:48:41,129
authorization server takes the refered

1229
00:48:40,319 --> 00:48:43,200
to combine

1230
00:48:41,130 --> 00:48:44,700
that binds the access to it using this

1231
00:48:43,200 --> 00:48:47,220
if it's a jot it would look like this

1232
00:48:44,700 --> 00:48:49,379
the CNF claimed carrying the token

1233
00:48:47,220 --> 00:48:51,269
binding ID hash and then the OAuth

1234
00:48:49,380 --> 00:48:52,829
client turns around and uses that and

1235
00:48:51,269 --> 00:48:54,629
all it needs to do is send that token as

1236
00:48:52,829 --> 00:48:57,180
it normally would as an authorization

1237
00:48:54,630 --> 00:48:58,769
header and then that token is in turn

1238
00:48:57,180 --> 00:49:00,799
bound to its toe combined and key which

1239
00:48:58,769 --> 00:49:03,240
is proof possession over by the by the

1240
00:49:00,799 --> 00:49:05,519
over the TLS connection by sending this

1241
00:49:03,240 --> 00:49:07,078
header and so the authorization server

1242
00:49:05,519 --> 00:49:09,149
binds the access token to the referred

1243
00:49:07,079 --> 00:49:10,859
talker binding and then the protected

1244
00:49:09,150 --> 00:49:12,809
resource of the API validates that

1245
00:49:10,859 --> 00:49:14,190
access to ogen as it normally would but

1246
00:49:12,809 --> 00:49:15,839
then adds the additional check of

1247
00:49:14,190 --> 00:49:17,430
comparing the hash of the token binding

1248
00:49:15,839 --> 00:49:19,710
ID to the one that was proven possession

1249
00:49:17,430 --> 00:49:23,098
of over that the special sector

1250
00:49:19,710 --> 00:49:26,400
combining header I just sort of thought

1251
00:49:23,099 --> 00:49:28,230
this picture was funny um the the threat

1252
00:49:26,400 --> 00:49:29,670
landscape here is vast and complex and

1253
00:49:28,230 --> 00:49:31,740
token mining I think has a potential to

1254
00:49:29,670 --> 00:49:33,000
solve a lot of problems but I think sort

1255
00:49:31,740 --> 00:49:34,410
of carrying back to your question about

1256
00:49:33,000 --> 00:49:35,609
where the keys stored it can't solve

1257
00:49:34,410 --> 00:49:39,359
everything

1258
00:49:35,609 --> 00:49:41,220
you know if if a client is now are

1259
00:49:39,359 --> 00:49:42,299
infected depending on how the keys are

1260
00:49:41,220 --> 00:49:44,160
are store

1261
00:49:42,299 --> 00:49:46,049
maybe those keys could be actual traded

1262
00:49:44,160 --> 00:49:47,819
maybe if they even if they can't be

1263
00:49:46,049 --> 00:49:49,170
exfiltrated potentially there's access

1264
00:49:47,819 --> 00:49:51,569
to use those keys to sign while the

1265
00:49:49,170 --> 00:49:53,700
things on there so it a lot of the

1266
00:49:51,569 --> 00:49:56,190
protections come down to how well the

1267
00:49:53,700 --> 00:49:57,868
keys are protected which is which is a

1268
00:49:56,190 --> 00:50:01,049
whole nother realm and problem space of

1269
00:49:57,869 --> 00:50:03,180
its own but in terms of just the the

1270
00:50:01,049 --> 00:50:05,369
HTTP level interactions this offers a

1271
00:50:03,180 --> 00:50:08,940
huge potential to upgrade security for

1272
00:50:05,369 --> 00:50:10,829
the use of tokens a question I started

1273
00:50:08,940 --> 00:50:13,230
getting a lot is that's great this

1274
00:50:10,829 --> 00:50:16,349
happens between the client and whatever

1275
00:50:13,230 --> 00:50:18,299
terminates TLS but but applications and

1276
00:50:16,349 --> 00:50:21,630
never or rarely are the ones that

1277
00:50:18,299 --> 00:50:23,009
actually terminate TLS themselves so I'm

1278
00:50:21,630 --> 00:50:25,009
working on and pushing for a

1279
00:50:23,009 --> 00:50:27,450
specification that will describe how

1280
00:50:25,009 --> 00:50:29,880
token binding can be deployed in reverse

1281
00:50:27,450 --> 00:50:30,808
proxy type deployments or load balancer

1282
00:50:29,880 --> 00:50:33,119
type deployments that are doing

1283
00:50:30,809 --> 00:50:35,130
application layer load balancing such

1284
00:50:33,119 --> 00:50:36,809
that whatever that front-end component

1285
00:50:35,130 --> 00:50:38,250
that's terminating TLS can share

1286
00:50:36,809 --> 00:50:40,500
information with the backend application

1287
00:50:38,250 --> 00:50:42,180
about the token binding that was done it

1288
00:50:40,500 --> 00:50:44,430
allows that application itself to bind

1289
00:50:42,180 --> 00:50:46,109
the token so this looks like the client

1290
00:50:44,430 --> 00:50:48,960
doing normal token binding between

1291
00:50:46,109 --> 00:50:50,578
itself and what it perceives as the host

1292
00:50:48,960 --> 00:50:52,319
it has no idea what the deployment

1293
00:50:50,579 --> 00:50:54,000
architecture is it just sees the host

1294
00:50:52,319 --> 00:50:54,400
there negotiates to combine in the sends

1295
00:50:54,000 --> 00:50:57,100
the header

1296
00:50:54,400 --> 00:50:59,620
the reverse proxy or TLS Terminator

1297
00:50:57,100 --> 00:51:01,480
whatever is doing that validates the tow

1298
00:50:59,620 --> 00:51:02,980
combining message itself sanitizes

1299
00:51:01,480 --> 00:51:05,560
headers is need because it's a reverse

1300
00:51:02,980 --> 00:51:07,450
proxy and then passes the actual just

1301
00:51:05,560 --> 00:51:09,040
the encoded token binding idea takes the

1302
00:51:07,450 --> 00:51:10,629
signature and all the superfluous stuff

1303
00:51:09,040 --> 00:51:12,910
now that the validation has been done

1304
00:51:10,630 --> 00:51:15,130
and just takes the ID it passes it in a

1305
00:51:12,910 --> 00:51:17,049
new header back to the origin server the

1306
00:51:15,130 --> 00:51:19,240
application server and that back-end

1307
00:51:17,050 --> 00:51:21,190
server then can validate or issue

1308
00:51:19,240 --> 00:51:23,890
cookies or tokens based on that ideas

1309
00:51:21,190 --> 00:51:27,850
needed and the hope here is that unlike

1310
00:51:23,890 --> 00:51:29,529
client-side client TLS mutual TLS where

1311
00:51:27,850 --> 00:51:31,810
there's no standardized defined way to

1312
00:51:29,530 --> 00:51:33,430
do this and all the app server or all

1313
00:51:31,810 --> 00:51:35,590
the you know application servers like

1314
00:51:33,430 --> 00:51:36,819
Apache and nginx do it a little bit

1315
00:51:35,590 --> 00:51:38,620
differently to share the client

1316
00:51:36,820 --> 00:51:40,000
certificate with the backend the goal

1317
00:51:38,620 --> 00:51:42,100
here is to standardize the way of doing

1318
00:51:40,000 --> 00:51:43,890
it so that that everybody does it the

1319
00:51:42,100 --> 00:51:51,310
same and hopefully supports it as well

1320
00:51:43,890 --> 00:51:53,379
yeah the question was do any

1321
00:51:51,310 --> 00:51:55,600
off-the-shelf reverse proxy support this

1322
00:51:53,380 --> 00:51:58,030
yet and it's let me start by saying it's

1323
00:51:55,600 --> 00:52:01,630
still really early the standards aren't

1324
00:51:58,030 --> 00:52:04,750
even ratified RFC's yet there are I know

1325
00:52:01,630 --> 00:52:07,150
there's a there's a module for Apache

1326
00:52:04,750 --> 00:52:08,890
that does this and some extensions of

1327
00:52:07,150 --> 00:52:12,850
Apache that does it there's some work in

1328
00:52:08,890 --> 00:52:14,350
engine X that does something like this I

1329
00:52:12,850 --> 00:52:16,240
don't think it conforms to the standard

1330
00:52:14,350 --> 00:52:18,009
yet so there's there's a little bit

1331
00:52:16,240 --> 00:52:19,959
there somebody when I presented this

1332
00:52:18,010 --> 00:52:21,640
work at the most recent IETF mean and

1333
00:52:19,960 --> 00:52:23,260
somebody said that Facebook was was

1334
00:52:21,640 --> 00:52:24,250
doing some of this internally although

1335
00:52:23,260 --> 00:52:28,150
that's not really help for

1336
00:52:24,250 --> 00:52:30,460
interoperability but not out of the box

1337
00:52:28,150 --> 00:52:33,760
there's some extensions it's looking

1338
00:52:30,460 --> 00:52:35,260
promising but it's it's still early five

1339
00:52:33,760 --> 00:52:36,790
minutes that's good because I'm almost

1340
00:52:35,260 --> 00:52:38,320
done I just want to talk a little bit

1341
00:52:36,790 --> 00:52:41,770
about sort of the landscape of the whole

1342
00:52:38,320 --> 00:52:45,220
technology those three sort of core IETF

1343
00:52:41,770 --> 00:52:48,970
token binding specs are soon to be RFC's

1344
00:52:45,220 --> 00:52:50,859
I will say that IETF time is not

1345
00:52:48,970 --> 00:52:53,649
dissimilar to Island time in that it's a

1346
00:52:50,860 --> 00:52:55,030
little slow but they're they're getting

1347
00:52:53,650 --> 00:52:57,010
there and they should be published RFC

1348
00:52:55,030 --> 00:53:00,760
soon and hopefully this will be sort of

1349
00:52:57,010 --> 00:53:02,350
the impetus to to help adoption and and

1350
00:53:00,760 --> 00:53:04,930
support an API so they know a lot of

1351
00:53:02,350 --> 00:53:06,250
products and and api's and stacks or

1352
00:53:04,930 --> 00:53:06,710
whatever are hesitant to support things

1353
00:53:06,250 --> 00:53:09,109
before

1354
00:53:06,710 --> 00:53:11,510
they're fully fully standard but there

1355
00:53:09,109 --> 00:53:13,190
is support for some drafts Google Chrome

1356
00:53:11,510 --> 00:53:15,859
and Microsoft edge and ie

1357
00:53:13,190 --> 00:53:17,780
support various draft versions of this I

1358
00:53:15,859 --> 00:53:19,509
haven't played with with edge but you

1359
00:53:17,780 --> 00:53:21,589
know chrome has it behind a feature flag

1360
00:53:19,510 --> 00:53:22,820
you can turn it on and see it working

1361
00:53:21,589 --> 00:53:24,950
now

1362
00:53:22,820 --> 00:53:28,609
Chrome I'm sorry Google itself turned it

1363
00:53:24,950 --> 00:53:29,930
up on their servers in January actually

1364
00:53:28,609 --> 00:53:32,569
and this is an old site it was January

1365
00:53:29,930 --> 00:53:35,000
of last year and they have it live on

1366
00:53:32,570 --> 00:53:36,619
all their server infrastructure the dot

1367
00:53:35,000 --> 00:53:38,300
name nut framework introduced some

1368
00:53:36,619 --> 00:53:41,150
support for on the server side and in

1369
00:53:38,300 --> 00:53:44,270
4.6 and there's some open source stuff

1370
00:53:41,150 --> 00:53:45,680
available already one is there's a name

1371
00:53:44,270 --> 00:53:47,509
in sure what it is with openness is like

1372
00:53:45,680 --> 00:53:49,700
I guess it's an extension open SSL that

1373
00:53:47,510 --> 00:53:51,980
allows you to do this there's an Apache

1374
00:53:49,700 --> 00:53:55,009
module there's an engine X module and

1375
00:53:51,980 --> 00:53:57,200
just recently I published because I work

1376
00:53:55,010 --> 00:53:59,240
in Java for better or worse some Java

1377
00:53:57,200 --> 00:54:06,830
extensions that allow the negotiation

1378
00:53:59,240 --> 00:54:16,250
piece to happen yeah I'm sorry say again

1379
00:54:06,830 --> 00:54:19,279
I don't actually know I think they bind

1380
00:54:16,250 --> 00:54:21,470
some of the cookies if if they can I'm

1381
00:54:19,280 --> 00:54:23,720
presuming they do it opportunistically

1382
00:54:21,470 --> 00:54:26,959
so if if the client negotiates they will

1383
00:54:23,720 --> 00:54:28,669
bind it and I know they had some

1384
00:54:26,960 --> 00:54:31,430
interoperability problems with with

1385
00:54:28,670 --> 00:54:32,660
Microsoft as various versions roll out

1386
00:54:31,430 --> 00:54:33,919
which makes me think they're doing more

1387
00:54:32,660 --> 00:54:35,450
than just checking it that there's some

1388
00:54:33,920 --> 00:54:39,680
live functionality here but I don't I

1389
00:54:35,450 --> 00:54:41,569
don't know the specific details of it so

1390
00:54:39,680 --> 00:54:43,040
like I said there's there's some new ish

1391
00:54:41,570 --> 00:54:44,300
Java support there which has been

1392
00:54:43,040 --> 00:54:46,369
interesting I've worked a lot on that

1393
00:54:44,300 --> 00:54:47,810
but making it available for the

1394
00:54:46,369 --> 00:54:52,040
community hopefully and also because

1395
00:54:47,810 --> 00:54:53,450
it's required by their license the Open

1396
00:54:52,040 --> 00:54:55,460
ID Connect tow combining authentication

1397
00:54:53,450 --> 00:54:57,319
spec is coming along I think it's it's

1398
00:54:55,460 --> 00:54:59,420
you know dependent on some of the

1399
00:54:57,320 --> 00:55:01,790
underlying ones but is is looking good

1400
00:54:59,420 --> 00:55:04,490
once those things sort of fall out the

1401
00:55:01,790 --> 00:55:06,859
open I'm sorry the OAuth stuff is also

1402
00:55:04,490 --> 00:55:08,689
coming along although it's a little bit

1403
00:55:06,859 --> 00:55:10,339
more problematic in terms of it I think

1404
00:55:08,690 --> 00:55:12,170
it needs the the implementation

1405
00:55:10,339 --> 00:55:13,520
experience and feedback that is going to

1406
00:55:12,170 --> 00:55:14,810
be hard to get a bit of a chicken and

1407
00:55:13,520 --> 00:55:19,810
egg until some of the api's are

1408
00:55:14,810 --> 00:55:22,130
available and the reverse proxy

1409
00:55:19,810 --> 00:55:23,570
expect that I'm working on was was

1410
00:55:22,130 --> 00:55:25,310
recently adopted by the working group

1411
00:55:23,570 --> 00:55:27,770
which doesn't guarantee anything but it

1412
00:55:25,310 --> 00:55:32,500
is an important step in the process of

1413
00:55:27,770 --> 00:55:32,500
becoming an official standard yes sir

1414
00:55:42,580 --> 00:55:49,310
hopefully not very much at all the so I

1415
00:55:47,900 --> 00:55:50,690
don't I don't know a whole lot about the

1416
00:55:49,310 --> 00:55:53,750
long live session and session resumption

1417
00:55:50,690 --> 00:55:55,400
mechanism but it's really decoupled from

1418
00:55:53,750 --> 00:55:58,280
that whatever there's a there's a

1419
00:55:55,400 --> 00:55:59,690
different name for the exported key

1420
00:55:58,280 --> 00:56:02,330
material stuff but it's the same

1421
00:55:59,690 --> 00:56:03,800
functionality and the same exact it's a

1422
00:56:02,330 --> 00:56:05,540
it's a different name same stuff under

1423
00:56:03,800 --> 00:56:06,980
the different names so you still get

1424
00:56:05,540 --> 00:56:10,490
that key material from the underlying

1425
00:56:06,980 --> 00:56:12,320
connection and sign it and so it's it's

1426
00:56:10,490 --> 00:56:15,229
really the same model the negotiation

1427
00:56:12,320 --> 00:56:17,960
happens a little bit differently in that

1428
00:56:15,230 --> 00:56:19,280
you know the the client hello is still

1429
00:56:17,960 --> 00:56:22,610
in the clear but there's an encrypted

1430
00:56:19,280 --> 00:56:24,350
server hello extension so it'll be in

1431
00:56:22,610 --> 00:56:25,700
there there's actually another spec

1432
00:56:24,350 --> 00:56:28,819
coming along behind all this that

1433
00:56:25,700 --> 00:56:31,700
defines how to do negotiation and in in

1434
00:56:28,820 --> 00:56:33,200
TLS one three that's it's practically

1435
00:56:31,700 --> 00:56:35,419
the same thing it's just sort of mapping

1436
00:56:33,200 --> 00:56:37,970
it to the new places in the protocol but

1437
00:56:35,420 --> 00:56:40,100
in terms of sort of the overall flow and

1438
00:56:37,970 --> 00:56:43,730
functionality it should be exactly the

1439
00:56:40,100 --> 00:56:44,240
same or close close enough to exactly

1440
00:56:43,730 --> 00:56:48,800
the same

1441
00:56:44,240 --> 00:56:51,020
the main exception of that is how and if

1442
00:56:48,800 --> 00:56:55,130
it will work in conjunction with the

1443
00:56:51,020 --> 00:56:58,040
zero round-trip stuff of negotiating a

1444
00:56:55,130 --> 00:56:59,600
new session and that frankly it's beyond

1445
00:56:58,040 --> 00:57:00,620
me what what the right answer is there

1446
00:56:59,600 --> 00:57:01,520
and where things will end up there's

1447
00:57:00,620 --> 00:57:02,690
people that say it shouldn't be

1448
00:57:01,520 --> 00:57:05,300
supported at all there's people that say

1449
00:57:02,690 --> 00:57:07,280
we need to allow for it and that's sort

1450
00:57:05,300 --> 00:57:08,960
of an open area there but as long as

1451
00:57:07,280 --> 00:57:11,030
you're doing at least a back-and-forth

1452
00:57:08,960 --> 00:57:13,390
handshake it's basically the same with

1453
00:57:11,030 --> 00:57:13,390
one three

