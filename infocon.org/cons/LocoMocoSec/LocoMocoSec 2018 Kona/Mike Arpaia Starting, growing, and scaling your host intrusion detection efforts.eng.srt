1
00:00:00,260 --> 00:00:05,279
[Applause]

2
00:00:04,069 --> 00:00:07,259
Thanks

3
00:00:05,279 --> 00:00:10,469
cool you guys can you guys can all hear

4
00:00:07,259 --> 00:00:12,300
me so you know my name is Mike and

5
00:00:10,469 --> 00:00:13,799
there's gonna be a lot of content on

6
00:00:12,300 --> 00:00:16,320
these slides so just quick disclaimer

7
00:00:13,799 --> 00:00:18,270
I've tweeted them out my Twitter account

8
00:00:16,320 --> 00:00:20,250
is Mike Arpaio just my first name my

9
00:00:18,270 --> 00:00:21,600
last name so if you want to take notes

10
00:00:20,250 --> 00:00:24,689
you don't have to take notes on anything

11
00:00:21,600 --> 00:00:25,680
that's on the slides so quick overview

12
00:00:24,689 --> 00:00:27,240
of what I'm gonna talk to you guys about

13
00:00:25,680 --> 00:00:28,410
today what I want to talk to you about

14
00:00:27,240 --> 00:00:29,820
too so there have been a lot of talks

15
00:00:28,410 --> 00:00:33,450
about ooh ask weary with the features of

16
00:00:29,820 --> 00:00:35,130
Oscar ER and how it works and all that

17
00:00:33,450 --> 00:00:37,260
good stuff and I don't want to kind of

18
00:00:35,130 --> 00:00:40,079
enumerate the features of OS query today

19
00:00:37,260 --> 00:00:41,940
I want to take a different perspective

20
00:00:40,079 --> 00:00:43,950
on reasoning about hos intrusion

21
00:00:41,940 --> 00:00:46,260
detection and kind of talk about like

22
00:00:43,950 --> 00:00:48,390
let's say you are on the infrastructure

23
00:00:46,260 --> 00:00:49,980
security team at an organization you

24
00:00:48,390 --> 00:00:51,449
don't have post intrusion detection at

25
00:00:49,980 --> 00:00:54,360
your company but you'd like to roll it

26
00:00:51,449 --> 00:00:56,910
out what are the kind of steps along

27
00:00:54,360 --> 00:00:58,559
that process what features of us query

28
00:00:56,910 --> 00:01:01,140
would you take advantage of at those

29
00:00:58,559 --> 00:01:02,760
different steps and what is what are the

30
00:01:01,140 --> 00:01:05,189
steps like what is a good place to get

31
00:01:02,760 --> 00:01:07,408
started how should you progress where

32
00:01:05,188 --> 00:01:08,939
should you kind of pause for a bit and

33
00:01:07,409 --> 00:01:10,710
focus on getting a lot of value out of

34
00:01:08,939 --> 00:01:13,110
the intelligence that you can provide

35
00:01:10,710 --> 00:01:15,689
and what have you so that's the kind of

36
00:01:13,110 --> 00:01:17,310
objective of the talk here is to walk

37
00:01:15,689 --> 00:01:19,710
you through this path of what it's like

38
00:01:17,310 --> 00:01:21,570
to deploy host intrusion detection at an

39
00:01:19,710 --> 00:01:25,259
organization we're gonna use OS query as

40
00:01:21,570 --> 00:01:27,298
the example so I'll explain a little bit

41
00:01:25,259 --> 00:01:29,610
more about it we in the future but or in

42
00:01:27,299 --> 00:01:31,740
a few slides but first my host intrusion

43
00:01:29,610 --> 00:01:34,229
detection background I used to work at a

44
00:01:31,740 --> 00:01:35,939
company called Etsy in New York and when

45
00:01:34,229 --> 00:01:37,740
I was there I built and deployed and

46
00:01:35,939 --> 00:01:41,399
open sourced a host intrusion detection

47
00:01:37,740 --> 00:01:43,740
system and then I went to Facebook and I

48
00:01:41,400 --> 00:01:44,939
started the OS query project and you

49
00:01:43,740 --> 00:01:47,399
know built up a really awesome team

50
00:01:44,939 --> 00:01:49,829
around it that still continues to you

51
00:01:47,399 --> 00:01:51,270
know live on really awesomely and then I

52
00:01:49,829 --> 00:01:52,679
was an engineering manager at Facebook

53
00:01:51,270 --> 00:01:54,899
responsible for all intrusion detection

54
00:01:52,680 --> 00:01:57,180
structures so in addition to host it was

55
00:01:54,899 --> 00:01:59,189
you know network application email

56
00:01:57,180 --> 00:02:01,500
instrumentation stuff like that and now

57
00:01:59,189 --> 00:02:04,320
I am the co-founder and CTO of a

58
00:02:01,500 --> 00:02:08,459
endpoint company called collide that

59
00:02:04,320 --> 00:02:10,859
uses a squirt unsurprisingly so little

60
00:02:08,459 --> 00:02:12,629
open-source disclaimer at collide we

61
00:02:10,860 --> 00:02:13,440
open source a lot of tools that we use

62
00:02:12,629 --> 00:02:16,380
to manager

63
00:02:13,440 --> 00:02:18,810
query and I have nothing to sell you

64
00:02:16,380 --> 00:02:20,910
today I'm trying to sell you on using us

65
00:02:18,810 --> 00:02:23,070
query not be like products that collide

66
00:02:20,910 --> 00:02:25,260
creates collide does create a number of

67
00:02:23,070 --> 00:02:27,299
open-source tools that we use internally

68
00:02:25,260 --> 00:02:29,970
to manage os query but you know we're

69
00:02:27,300 --> 00:02:32,280
not trying to sell managing OS query so

70
00:02:29,970 --> 00:02:33,390
we don't think that those tools can beat

71
00:02:32,280 --> 00:02:34,680
so I'm going to talk to you about them

72
00:02:33,390 --> 00:02:36,149
but there are alternatives we're not the

73
00:02:34,680 --> 00:02:37,680
only game in town with open source so

74
00:02:36,150 --> 00:02:40,320
it's great management tools there's a

75
00:02:37,680 --> 00:02:43,320
number of really cool alternatives

76
00:02:40,320 --> 00:02:46,290
including sergeant from octa which Matt

77
00:02:43,320 --> 00:02:47,940
Jane over there wrote and you know a

78
00:02:46,290 --> 00:02:49,590
number of really cool alternatives that

79
00:02:47,940 --> 00:02:52,500
I know some people in this room also use

80
00:02:49,590 --> 00:02:53,520
at their organization so you know just

81
00:02:52,500 --> 00:02:56,280
quick disclaimer

82
00:02:53,520 --> 00:02:57,900
so some initial assumptions that I'm so

83
00:02:56,280 --> 00:03:01,110
like throughout this talk I'm going to

84
00:02:57,900 --> 00:03:03,930
explain the like thought process of you

85
00:03:01,110 --> 00:03:05,640
know starting at and rolling out hose

86
00:03:03,930 --> 00:03:07,860
intrusion protection at an organization

87
00:03:05,640 --> 00:03:10,290
and some like quick assumptions of like

88
00:03:07,860 --> 00:03:12,870
this fake organization is that I'm

89
00:03:10,290 --> 00:03:15,510
assuming that you know this organization

90
00:03:12,870 --> 00:03:17,420
is mostly Mak work stations mostly Mac

91
00:03:15,510 --> 00:03:19,649
desktops with a bit of Windows and Linux

92
00:03:17,420 --> 00:03:21,510
spattered I'm assuming that this

93
00:03:19,650 --> 00:03:23,250
organization uses all Linux in

94
00:03:21,510 --> 00:03:25,230
production maybe a little bit of bare

95
00:03:23,250 --> 00:03:28,020
metal but mostly in the cloud say it

96
00:03:25,230 --> 00:03:31,410
doesn't really matter and also for the

97
00:03:28,020 --> 00:03:33,450
sake of this talk I'm assuming that you

98
00:03:31,410 --> 00:03:35,970
have a strong desire to host your own

99
00:03:33,450 --> 00:03:37,709
software you have no budget no vendors

100
00:03:35,970 --> 00:03:39,270
you don't you don't want close source

101
00:03:37,709 --> 00:03:40,590
tools you want to do it yourself you're

102
00:03:39,270 --> 00:03:41,730
like interested in running your own

103
00:03:40,590 --> 00:03:45,000
infrastructure and you don't want to pay

104
00:03:41,730 --> 00:03:46,950
for anything and I'm also assuming that

105
00:03:45,000 --> 00:03:48,630
you have some existing ability to deploy

106
00:03:46,950 --> 00:03:49,859
software and update it in your

107
00:03:48,630 --> 00:03:51,180
organization I think that's a more

108
00:03:49,860 --> 00:03:52,709
important problem than host intrusion

109
00:03:51,180 --> 00:03:54,900
detection so I'm assuming you've already

110
00:03:52,709 --> 00:03:56,610
solved that if this is the problem that

111
00:03:54,900 --> 00:03:58,860
you're focusing on now and I'm assuming

112
00:03:56,610 --> 00:04:00,840
that you have some existing logging and

113
00:03:58,860 --> 00:04:02,489
alerting infrastructure at your

114
00:04:00,840 --> 00:04:04,769
organization that you like you know you

115
00:04:02,489 --> 00:04:07,290
have sock you have some sort of ability

116
00:04:04,769 --> 00:04:10,680
to collect logs and alert on those logs

117
00:04:07,290 --> 00:04:15,410
so those are the assumptions I hope

118
00:04:10,680 --> 00:04:18,660
they're fair the other two kind of like

119
00:04:15,410 --> 00:04:20,459
I'm gonna like recommend rollout

120
00:04:18,660 --> 00:04:22,380
strategy for host intrusion detection in

121
00:04:20,459 --> 00:04:24,479
this talk and my recommendation is to

122
00:04:22,380 --> 00:04:25,500
start with your desktop environment when

123
00:04:24,479 --> 00:04:26,520
it comes to host intrusion detection

124
00:04:25,500 --> 00:04:30,509
because

125
00:04:26,520 --> 00:04:32,280
um there is a much higher in my opinion

126
00:04:30,509 --> 00:04:33,509
there's like higher risk in the desktop

127
00:04:32,280 --> 00:04:35,250
environment that's like where the

128
00:04:33,509 --> 00:04:37,379
majority of modern attacks start and

129
00:04:35,250 --> 00:04:39,030
it's also lower risk to deploy

130
00:04:37,379 --> 00:04:41,970
instrumentation software to that

131
00:04:39,030 --> 00:04:44,280
environment so you know it's a good

132
00:04:41,970 --> 00:04:45,690
place to start because you're decreasing

133
00:04:44,280 --> 00:04:47,280
your organizational risk while

134
00:04:45,690 --> 00:04:50,099
increasing the likelihood that you're

135
00:04:47,280 --> 00:04:52,979
actually gonna find compromise so start

136
00:04:50,099 --> 00:04:55,740
with your team first start with teams

137
00:04:52,979 --> 00:04:57,060
that you work with and then expand

138
00:04:55,740 --> 00:04:58,860
throughout the desktop environment and

139
00:04:57,060 --> 00:05:00,150
then extend onto the production

140
00:04:58,860 --> 00:05:01,740
environment so the specific step-by-step

141
00:05:00,150 --> 00:05:03,989
that we're gonna go through there are

142
00:05:01,740 --> 00:05:05,940
six steps first I want to talk about

143
00:05:03,990 --> 00:05:07,979
like the initial research and

144
00:05:05,940 --> 00:05:10,409
development of like okay like you need

145
00:05:07,979 --> 00:05:12,960
to do this you need to roll out some

146
00:05:10,409 --> 00:05:14,159
post intrusion detection you you have

147
00:05:12,960 --> 00:05:15,630
what you want to play with the tool you

148
00:05:14,159 --> 00:05:17,069
want to like see that the logs will be

149
00:05:15,630 --> 00:05:19,560
something that you can take into your

150
00:05:17,069 --> 00:05:20,969
log aggregation mechanism and you know

151
00:05:19,560 --> 00:05:22,770
they look good the insights that you can

152
00:05:20,969 --> 00:05:25,889
get out of this tool seem valuable like

153
00:05:22,770 --> 00:05:27,568
on to the next step the next step being

154
00:05:25,889 --> 00:05:29,580
remote configuration you know you need

155
00:05:27,569 --> 00:05:31,199
to deploy this tool out to a lot of

156
00:05:29,580 --> 00:05:32,400
people you need to be able to configure

157
00:05:31,199 --> 00:05:33,900
it remotely you need to be able to get

158
00:05:32,400 --> 00:05:35,549
logs back remotely you need to be able

159
00:05:33,900 --> 00:05:37,859
to interact with it from some central

160
00:05:35,550 --> 00:05:40,110
management point so we'll discuss kind

161
00:05:37,860 --> 00:05:42,150
of some of the options there and then

162
00:05:40,110 --> 00:05:43,740
step three is all right you've got it to

163
00:05:42,150 --> 00:05:45,388
a few teams you've got like your proof

164
00:05:43,740 --> 00:05:47,219
of concept going you need to reliably

165
00:05:45,389 --> 00:05:50,190
and sustainably deploy it to the entire

166
00:05:47,219 --> 00:05:51,569
desktop environment step four is you

167
00:05:50,190 --> 00:05:53,639
know you've been using it in the desktop

168
00:05:51,569 --> 00:05:57,300
environment for a while now you want to

169
00:05:53,639 --> 00:05:58,500
start instrumenting production what are

170
00:05:57,300 --> 00:06:00,930
some things you should be concerned

171
00:05:58,500 --> 00:06:02,460
about when you like start moving to

172
00:06:00,930 --> 00:06:04,409
production Linux instrumentation and

173
00:06:02,460 --> 00:06:07,229
it's a five being complete production

174
00:06:04,409 --> 00:06:08,580
deployment like 100% of every you know

175
00:06:07,229 --> 00:06:10,440
workstation and server at your

176
00:06:08,580 --> 00:06:11,849
organization is instrumented and you're

177
00:06:10,440 --> 00:06:13,770
actively like performing intrusion

178
00:06:11,849 --> 00:06:15,870
detection zhan those endpoints and then

179
00:06:13,770 --> 00:06:17,340
step six is if you work at a really big

180
00:06:15,870 --> 00:06:21,000
company like when I used to work at

181
00:06:17,340 --> 00:06:22,948
Facebook there are you like like we

182
00:06:21,000 --> 00:06:24,810
should have some sort of mergers and

183
00:06:22,949 --> 00:06:26,490
acquisitions instrumentation strategy

184
00:06:24,810 --> 00:06:28,380
like your company might yeah you might

185
00:06:26,490 --> 00:06:30,810
find out that like the next week you're

186
00:06:28,380 --> 00:06:33,659
closing a deal with this new company and

187
00:06:30,810 --> 00:06:34,740
they are all FreeBSD hosts or something

188
00:06:33,659 --> 00:06:36,120
like and you need to be able to

189
00:06:34,740 --> 00:06:37,649
instrument those operating systems so

190
00:06:36,120 --> 00:06:38,730
like what you should reason about to

191
00:06:37,649 --> 00:06:41,160
just like be prepared

192
00:06:38,730 --> 00:06:42,780
for the fact that you know your

193
00:06:41,160 --> 00:06:46,680
production environment might not always

194
00:06:42,780 --> 00:06:49,229
be as static as it is today so there's

195
00:06:46,680 --> 00:06:51,570
kind of the steps and that's that so

196
00:06:49,230 --> 00:06:54,810
first step is the initial research and

197
00:06:51,570 --> 00:06:56,400
development of you know you have this so

198
00:06:54,810 --> 00:06:59,880
you have this endpoint instrumentation

199
00:06:56,400 --> 00:07:01,620
problem like you want to you've heard OS

200
00:06:59,880 --> 00:07:04,380
queries cool it has a really awesome

201
00:07:01,620 --> 00:07:08,220
website and you want to explore using it

202
00:07:04,380 --> 00:07:09,750
more so is our folks here familiar with

203
00:07:08,220 --> 00:07:12,450
us great has anyone ever heard of those

204
00:07:09,750 --> 00:07:14,610
three cool so I'm looking about half

205
00:07:12,450 --> 00:07:15,900
that's cool so OS query the whole idea

206
00:07:14,610 --> 00:07:18,540
of those queries basically you write

207
00:07:15,900 --> 00:07:19,830
sequel to articulate a fact about an

208
00:07:18,540 --> 00:07:21,690
operating system so it might be like

209
00:07:19,830 --> 00:07:23,760
select star from apps would enumerate

210
00:07:21,690 --> 00:07:25,410
all the apps or select star from kernel

211
00:07:23,760 --> 00:07:27,539
extensions would enumerate like a

212
00:07:25,410 --> 00:07:29,190
variety of information about kernel

213
00:07:27,540 --> 00:07:31,470
extension and the whole idea is like all

214
00:07:29,190 --> 00:07:34,620
of these tables there's like like 130

215
00:07:31,470 --> 00:07:36,090
tables in core at this point and the

216
00:07:34,620 --> 00:07:38,130
whole idea is like you can join them

217
00:07:36,090 --> 00:07:41,190
together you can write interesting

218
00:07:38,130 --> 00:07:43,110
sequel queries that like X part expose a

219
00:07:41,190 --> 00:07:45,090
fact about an operating system and then

220
00:07:43,110 --> 00:07:48,600
all of the OS query tools kind of allow

221
00:07:45,090 --> 00:07:49,710
you to take that idea and apply it to

222
00:07:48,600 --> 00:07:51,630
different operating system

223
00:07:49,710 --> 00:07:53,039
instrumentation objectives for example

224
00:07:51,630 --> 00:07:54,870
you might have a query that's like

225
00:07:53,040 --> 00:07:56,430
select star from kernel extensions for

226
00:07:54,870 --> 00:07:58,740
example and you might want to know like

227
00:07:56,430 --> 00:07:59,850
when that data is how that data changes

228
00:07:58,740 --> 00:08:01,350
over time like how the results of that

229
00:07:59,850 --> 00:08:03,840
query change over time maybe you just

230
00:08:01,350 --> 00:08:07,470
want to get the results every day maybe

231
00:08:03,840 --> 00:08:09,719
you like are you know maybe you're

232
00:08:07,470 --> 00:08:11,220
trying to instrument USB devices that

233
00:08:09,720 --> 00:08:13,950
are getting plugged into workstations

234
00:08:11,220 --> 00:08:15,900
and you like only care about when USB

235
00:08:13,950 --> 00:08:17,130
devices get plugged in but not unplugged

236
00:08:15,900 --> 00:08:19,070
you know like there are a variety of

237
00:08:17,130 --> 00:08:21,480
different ways that you can take the

238
00:08:19,070 --> 00:08:24,000
sequel query to an operating system

239
00:08:21,480 --> 00:08:25,950
apply it to your organizational

240
00:08:24,000 --> 00:08:28,200
objectives and get what and get

241
00:08:25,950 --> 00:08:30,180
interesting logs that match what you're

242
00:08:28,200 --> 00:08:32,630
interested in so the whole idea is like

243
00:08:30,180 --> 00:08:34,860
you write these queries and there is a

244
00:08:32,630 --> 00:08:36,150
starett of configuration that you can

245
00:08:34,860 --> 00:08:37,349
give oh a screw so you kind of

246
00:08:36,150 --> 00:08:40,579
articulate here in the queries that I

247
00:08:37,349 --> 00:08:43,169
want to run here are the you know

248
00:08:40,580 --> 00:08:45,450
parameters of like how I want the logs

249
00:08:43,169 --> 00:08:47,520
of the results of these queries and you

250
00:08:45,450 --> 00:08:49,380
give that to us query you get logs out

251
00:08:47,520 --> 00:08:50,189
config in logs out pretty

252
00:08:49,380 --> 00:08:52,020
straightforward right

253
00:08:50,190 --> 00:08:54,570
so oh it's crazy declared

254
00:08:52,020 --> 00:08:56,520
JSON configuration as I said and both

255
00:08:54,570 --> 00:08:59,130
like how you distribute configuration

256
00:08:56,520 --> 00:09:03,240
and how you get the logs are very

257
00:08:59,130 --> 00:09:04,650
customizable so for your initial proof

258
00:09:03,240 --> 00:09:06,210
of concept it can be kind of

259
00:09:04,650 --> 00:09:08,069
overwhelming because you're like yeah

260
00:09:06,210 --> 00:09:09,600
I'm like I really like want to see if

261
00:09:08,070 --> 00:09:10,920
the logs that I can get out of this two

262
00:09:09,600 --> 00:09:12,450
are gonna be useful but I don't want to

263
00:09:10,920 --> 00:09:15,120
have to set up all these servers I don't

264
00:09:12,450 --> 00:09:16,950
want to have to go like provision you

265
00:09:15,120 --> 00:09:19,380
know cloud workloads in order to just

266
00:09:16,950 --> 00:09:21,450
see if I like these logs so my

267
00:09:19,380 --> 00:09:23,310
recommendation here is to use the

268
00:09:21,450 --> 00:09:26,340
default plugin so like I said all of

269
00:09:23,310 --> 00:09:28,079
config and logging and like remote

270
00:09:26,340 --> 00:09:30,300
interaction like all of these things

271
00:09:28,080 --> 00:09:32,340
that you can do with those query are all

272
00:09:30,300 --> 00:09:34,469
pluggable so that you can say all right

273
00:09:32,340 --> 00:09:36,210
I want to read configs from the file

274
00:09:34,470 --> 00:09:38,100
system or I want to read configs from a

275
00:09:36,210 --> 00:09:39,480
TLS endpoint or I want to read configs

276
00:09:38,100 --> 00:09:43,230
from you know somewhere else

277
00:09:39,480 --> 00:09:45,060
zookeeper the default plugins are file

278
00:09:43,230 --> 00:09:46,650
system so like read the config from the

279
00:09:45,060 --> 00:09:48,449
file system write the logs to the file

280
00:09:46,650 --> 00:09:49,829
system and my recommendation is as

281
00:09:48,450 --> 00:09:51,930
you're getting started just use the file

282
00:09:49,830 --> 00:09:53,580
system and just like verify like write

283
00:09:51,930 --> 00:09:55,890
some queries use the file system and see

284
00:09:53,580 --> 00:09:57,750
if the results that OS query can log for

285
00:09:55,890 --> 00:10:00,510
you are useful and if they'll work in

286
00:09:57,750 --> 00:10:02,300
your environment and focus on you know

287
00:10:00,510 --> 00:10:06,120
finding data that's going to be useful

288
00:10:02,300 --> 00:10:08,189
this is a really naive configuration and

289
00:10:06,120 --> 00:10:11,820
it's basically just so OS query allows

290
00:10:08,190 --> 00:10:13,920
you to group queries into what we call

291
00:10:11,820 --> 00:10:19,350
query packs and a query pack might be

292
00:10:13,920 --> 00:10:21,000
like you know IT instrumentation maybe

293
00:10:19,350 --> 00:10:23,970
you know I team wants to know all of the

294
00:10:21,000 --> 00:10:26,460
apps that are installed it might be you

295
00:10:23,970 --> 00:10:27,630
know deeper operating system security

296
00:10:26,460 --> 00:10:29,700
instrumentation that you're performing

297
00:10:27,630 --> 00:10:31,080
like if it's in production you might

298
00:10:29,700 --> 00:10:33,120
group together all of the queries that

299
00:10:31,080 --> 00:10:34,110
do my sequel intrusion detection or

300
00:10:33,120 --> 00:10:36,380
something it's just like an

301
00:10:34,110 --> 00:10:39,000
organizational way of grouping together

302
00:10:36,380 --> 00:10:41,220
Aquarius so in this example a pack

303
00:10:39,000 --> 00:10:42,900
called desktop monitoring and I have

304
00:10:41,220 --> 00:10:44,310
query called users that's just select

305
00:10:42,900 --> 00:10:45,689
star from users and I'm running at every

306
00:10:44,310 --> 00:10:47,760
60 seconds so this is a minimal

307
00:10:45,690 --> 00:10:50,250
configuration that will just enumerate a

308
00:10:47,760 --> 00:10:52,860
results set of how the users change over

309
00:10:50,250 --> 00:10:55,650
time and the interval 60g SOI is like

310
00:10:52,860 --> 00:10:57,390
the resolution of the query that you'll

311
00:10:55,650 --> 00:10:59,189
get so if know if your users don't

312
00:10:57,390 --> 00:11:00,780
change on a desktop you won't get logs

313
00:10:59,190 --> 00:11:02,430
but if they do

314
00:11:00,780 --> 00:11:06,060
you'll probably find out within about 60

315
00:11:02,430 --> 00:11:09,209
seconds and here's an example log so as

316
00:11:06,060 --> 00:11:12,479
you it's kind of small but you know I

317
00:11:09,210 --> 00:11:14,190
think it should be pretty easy to kind

318
00:11:12,480 --> 00:11:16,620
of see what you're getting out here the

319
00:11:14,190 --> 00:11:18,560
top section is like metadata about the

320
00:11:16,620 --> 00:11:20,760
host about the time of the event any

321
00:11:18,560 --> 00:11:23,280
decorations that you've configured so I

322
00:11:20,760 --> 00:11:24,780
can here in this example we've

323
00:11:23,280 --> 00:11:26,880
configured OS query to like

324
00:11:24,780 --> 00:11:28,800
additionally log the version of OS query

325
00:11:26,880 --> 00:11:30,689
that's emitting these results so those

326
00:11:28,800 --> 00:11:32,699
will all be in the declaration stanza

327
00:11:30,690 --> 00:11:36,720
and then you have the columns that were

328
00:11:32,700 --> 00:11:40,770
changed and what action happens so in

329
00:11:36,720 --> 00:11:42,360
this specific example a user Victor was

330
00:11:40,770 --> 00:11:44,430
added and this is basically saying like

331
00:11:42,360 --> 00:11:46,950
you have the results set and a row was

332
00:11:44,430 --> 00:11:48,810
added to the result set and in this case

333
00:11:46,950 --> 00:11:51,050
that is indicative of a user being

334
00:11:48,810 --> 00:11:53,609
created but you know that could be any

335
00:11:51,050 --> 00:11:58,859
you know anything based on your specific

336
00:11:53,610 --> 00:12:00,420
query so ideally you've messed around

337
00:11:58,860 --> 00:12:02,190
with OS query a little bit you've

338
00:12:00,420 --> 00:12:04,410
written some sequel queries that you

339
00:12:02,190 --> 00:12:05,970
think expose cool aspects of your

340
00:12:04,410 --> 00:12:08,969
operating system that you're using

341
00:12:05,970 --> 00:12:11,120
locally and you know you think this is

342
00:12:08,970 --> 00:12:13,860
cool you've gotten value out of the logs

343
00:12:11,120 --> 00:12:16,080
but you know using the file system in

344
00:12:13,860 --> 00:12:17,700
this way is not very useful for if you

345
00:12:16,080 --> 00:12:20,790
want to monitor like the person who sits

346
00:12:17,700 --> 00:12:24,300
next to you so the next step that we

347
00:12:20,790 --> 00:12:27,000
have to reason about is remote

348
00:12:24,300 --> 00:12:28,439
configuration so all right you've got

349
00:12:27,000 --> 00:12:30,060
your one endpoint configured and

350
00:12:28,440 --> 00:12:32,310
instrumented now you want to start

351
00:12:30,060 --> 00:12:35,579
configuring and instrumenting warring

352
00:12:32,310 --> 00:12:39,109
points so like I said with regards to

353
00:12:35,580 --> 00:12:41,190
config distribution log acquisition and

354
00:12:39,110 --> 00:12:43,170
remote interaction I'm going to call

355
00:12:41,190 --> 00:12:46,350
that live querying like just executing

356
00:12:43,170 --> 00:12:47,640
queries on arbitrary machines those are

357
00:12:46,350 --> 00:12:49,590
kind of the three ways that you have to

358
00:12:47,640 --> 00:12:51,569
interact with I worry so the first one

359
00:12:49,590 --> 00:12:52,770
configuration distribution you generally

360
00:12:51,570 --> 00:12:54,480
have two options you can either

361
00:12:52,770 --> 00:12:57,630
distribute configurations to the

362
00:12:54,480 --> 00:12:59,760
filesystem or you can run a TLS server

363
00:12:57,630 --> 00:13:02,370
that serves the configurations now if

364
00:12:59,760 --> 00:13:06,360
you're configuring via the filesystem it

365
00:13:02,370 --> 00:13:08,910
is you know it's easy and it's simple

366
00:13:06,360 --> 00:13:10,650
and reliable to just you know read files

367
00:13:08,910 --> 00:13:12,980
from disk but it requires that you have

368
00:13:10,650 --> 00:13:15,590
some sort of organizational maturity

369
00:13:12,980 --> 00:13:17,390
the ability to distribute configuration

370
00:13:15,590 --> 00:13:19,760
which you know may or may not be that

371
00:13:17,390 --> 00:13:22,460
realistic in your environment

372
00:13:19,760 --> 00:13:24,140
the other option TLS or gr PC you know

373
00:13:22,460 --> 00:13:25,550
like there's being some remote end point

374
00:13:24,140 --> 00:13:27,050
that you're pulling configuration from

375
00:13:25,550 --> 00:13:28,219
this is great there's a lot of open

376
00:13:27,050 --> 00:13:30,469
source options

377
00:13:28,220 --> 00:13:32,300
you usually get live query and like

378
00:13:30,470 --> 00:13:35,000
remote interaction with notes for free

379
00:13:32,300 --> 00:13:36,770
and that's really cool but con you know

380
00:13:35,000 --> 00:13:38,420
now you're an ops person and you like

381
00:13:36,770 --> 00:13:39,949
need to run a server which you know

382
00:13:38,420 --> 00:13:41,089
based on your organization may or may

383
00:13:39,950 --> 00:13:43,250
not be something that you're super

384
00:13:41,090 --> 00:13:44,420
interested in doing so you know keep

385
00:13:43,250 --> 00:13:46,370
that in mind

386
00:13:44,420 --> 00:13:48,199
log acquisition options so let's say all

387
00:13:46,370 --> 00:13:49,910
right you figured out how you want to

388
00:13:48,200 --> 00:13:51,260
get your own screen configuration out

389
00:13:49,910 --> 00:13:52,699
all your endpoints but now you need to

390
00:13:51,260 --> 00:13:55,010
get logs back how are you going to do

391
00:13:52,700 --> 00:13:57,200
that there are generally like three

392
00:13:55,010 --> 00:13:59,480
classes of options you can either use

393
00:13:57,200 --> 00:14:00,890
the file system so you can write the the

394
00:13:59,480 --> 00:14:03,290
locks of the file system and then like

395
00:14:00,890 --> 00:14:05,060
deploy some additional forwarder to get

396
00:14:03,290 --> 00:14:09,189
those logs back to some remote like log

397
00:14:05,060 --> 00:14:12,650
aggregation infrastructure or you can

398
00:14:09,190 --> 00:14:15,140
use the TLS or gr PC plugins and I were

399
00:14:12,650 --> 00:14:17,150
to send those logs to a remote server

400
00:14:15,140 --> 00:14:18,439
and then like process them all on the

401
00:14:17,150 --> 00:14:20,420
server and that's all like you know

402
00:14:18,440 --> 00:14:22,490
buffered locally and reliable so that

403
00:14:20,420 --> 00:14:24,319
you don't miss any logs or there's also

404
00:14:22,490 --> 00:14:27,710
a set of plugins that are very tightly

405
00:14:24,320 --> 00:14:30,410
integrated into the AWS ecosystem pros

406
00:14:27,710 --> 00:14:35,110
and cons of all of those AWS is cool

407
00:14:30,410 --> 00:14:38,300
Khan requires AWS tos and G RPC are cool

408
00:14:35,110 --> 00:14:42,110
you know if you are likely getting this

409
00:14:38,300 --> 00:14:43,969
for free if you're already using a TLS

410
00:14:42,110 --> 00:14:45,950
server to manageress Cori and with the

411
00:14:43,970 --> 00:14:48,440
file system it's simple and reliable but

412
00:14:45,950 --> 00:14:51,110
sometimes you know it's annoying to have

413
00:14:48,440 --> 00:14:52,550
to configure a additional log forward if

414
00:14:51,110 --> 00:14:55,610
you're not if you don't already have one

415
00:14:52,550 --> 00:14:56,780
of those so keep that in mind when it

416
00:14:55,610 --> 00:14:59,510
comes to live query when it comes like

417
00:14:56,780 --> 00:15:02,180
interacting with hosts in a live

418
00:14:59,510 --> 00:15:03,740
automated way tos and G RPC are pretty

419
00:15:02,180 --> 00:15:04,910
much the only game in town so if that's

420
00:15:03,740 --> 00:15:08,120
important to you then that's kind of

421
00:15:04,910 --> 00:15:12,140
limiting your choices so my advice for

422
00:15:08,120 --> 00:15:14,300
you would be to consider using TLS and G

423
00:15:12,140 --> 00:15:15,470
RPC so that's like from from here on in

424
00:15:14,300 --> 00:15:17,089
I'm going to assume like you went

425
00:15:15,470 --> 00:15:18,620
through these options and you came to

426
00:15:17,090 --> 00:15:19,100
this conclusion and your conclusion is

427
00:15:18,620 --> 00:15:21,680
are

428
00:15:19,100 --> 00:15:22,640
we're gonna run a server and that's you

429
00:15:21,680 --> 00:15:32,989
know this query is going to interact

430
00:15:22,640 --> 00:15:33,949
with this server and that's great okay

431
00:15:32,990 --> 00:15:35,840
so the question is what kind of

432
00:15:33,950 --> 00:15:38,600
information about TLS can you get from

433
00:15:35,840 --> 00:15:40,580
this approach so the when I talk about

434
00:15:38,600 --> 00:15:41,630
TLS and G RPC in this context I'm not

435
00:15:40,580 --> 00:15:44,000
necessarily talking about like

436
00:15:41,630 --> 00:15:45,980
instrumenting the transport I'm more

437
00:15:44,000 --> 00:15:49,310
talking about like you or you have asked

438
00:15:45,980 --> 00:15:51,500
were running on a bunch of nodes and you

439
00:15:49,310 --> 00:15:53,209
can use a square to perform like various

440
00:15:51,500 --> 00:15:56,330
operating system analytics objectives

441
00:15:53,210 --> 00:15:59,030
and you're using a server that is like

442
00:15:56,330 --> 00:16:00,830
exposing an either TLS and or G RPC

443
00:15:59,030 --> 00:16:02,750
transport so that the OS query nodes can

444
00:16:00,830 --> 00:16:06,610
all kind of like connect back to a you

445
00:16:02,750 --> 00:16:06,610
know your your C to basically

446
00:16:11,890 --> 00:16:17,240
can I worry again there if you go to a

447
00:16:14,990 --> 00:16:19,010
square dot io / docks there's like a

448
00:16:17,240 --> 00:16:20,330
whole enumeration of all of the aspects

449
00:16:19,010 --> 00:16:21,590
of an operating system that you can

450
00:16:20,330 --> 00:16:23,840
instrument that there's like over a

451
00:16:21,590 --> 00:16:27,050
hundred tables on each platform so

452
00:16:23,840 --> 00:16:28,670
whether you want to know more about you

453
00:16:27,050 --> 00:16:31,219
know the software that's installed on

454
00:16:28,670 --> 00:16:33,199
the laptop or on the device or whether

455
00:16:31,220 --> 00:16:35,210
you want to know more about certain

456
00:16:33,200 --> 00:16:38,000
operating system configurations or

457
00:16:35,210 --> 00:16:40,340
whether you want to know more about you

458
00:16:38,000 --> 00:16:42,980
know what kind of records are in various

459
00:16:40,340 --> 00:16:45,110
persistence mechanisms like on Mac OS

460
00:16:42,980 --> 00:16:46,970
for example like most Mac OS there's not

461
00:16:45,110 --> 00:16:49,340
that many ways to persist on Mac OS most

462
00:16:46,970 --> 00:16:51,710
Mac OS malware persist via launch D

463
00:16:49,340 --> 00:16:54,320
which is you know basically max it's

464
00:16:51,710 --> 00:16:55,880
like pydd pydd one on Mac OS that

465
00:16:54,320 --> 00:16:57,560
launches everything else you interactive

466
00:16:55,880 --> 00:16:59,420
launch D you schedule some malware on a

467
00:16:57,560 --> 00:17:02,630
Mac so like you know if you want to

468
00:16:59,420 --> 00:17:04,579
observe malware that's persisting on Mac

469
00:17:02,630 --> 00:17:06,199
OS perhaps you instrument launch D and

470
00:17:04,579 --> 00:17:08,240
then do some analytics on that data set

471
00:17:06,199 --> 00:17:11,420
so there's a variety of data you can you

472
00:17:08,240 --> 00:17:13,250
can get with those query so yeah so the

473
00:17:11,420 --> 00:17:15,770
other thing that you get out of TLS and

474
00:17:13,250 --> 00:17:18,859
G RPC is a fancy live query you I say

475
00:17:15,770 --> 00:17:21,560
what so we have an open source tool

476
00:17:18,859 --> 00:17:24,020
collide that we use for doing this kind

477
00:17:21,560 --> 00:17:26,149
of thing sometimes and it's pretty easy

478
00:17:24,020 --> 00:17:28,879
to set up I just have a you know

479
00:17:26,150 --> 00:17:30,830
screenshot here of the admin settings

480
00:17:28,880 --> 00:17:32,810
where you can configure you know where

481
00:17:30,830 --> 00:17:34,879
emails should go with the domain name of

482
00:17:32,810 --> 00:17:36,620
your server is pretty straightforward UI

483
00:17:34,880 --> 00:17:38,960
there's like a little setup wizard as

484
00:17:36,620 --> 00:17:40,399
you deploy it and then that'll like

485
00:17:38,960 --> 00:17:42,290
gives you this interface for reasoning

486
00:17:40,400 --> 00:17:44,750
about your OS query configuration so on

487
00:17:42,290 --> 00:17:46,070
the left you have OS query options so

488
00:17:44,750 --> 00:17:47,720
each of these items is kind of a

489
00:17:46,070 --> 00:17:49,760
different option you can configure like

490
00:17:47,720 --> 00:17:53,930
how often each node should check into

491
00:17:49,760 --> 00:17:55,280
the server you can configure you know a

492
00:17:53,930 --> 00:17:56,660
whole mess of stuff we'll talk more

493
00:17:55,280 --> 00:17:58,100
about OS career options when we talk

494
00:17:56,660 --> 00:18:00,290
about production because it becomes more

495
00:17:58,100 --> 00:18:01,550
important to like tune os query when

496
00:18:00,290 --> 00:18:02,960
you're deploying it to production but

497
00:18:01,550 --> 00:18:04,399
it's not really super important in this

498
00:18:02,960 --> 00:18:07,850
context and then the other thing that

499
00:18:04,400 --> 00:18:09,170
you can do via UI is you know configure

500
00:18:07,850 --> 00:18:10,879
the schedule you can kind of like

501
00:18:09,170 --> 00:18:12,820
compose and our ticket and like

502
00:18:10,880 --> 00:18:16,370
articulate queries group them into packs

503
00:18:12,820 --> 00:18:18,110
mess with the you know configuration

504
00:18:16,370 --> 00:18:19,159
options and the parameters of each query

505
00:18:18,110 --> 00:18:21,830
and what-have-you

506
00:18:19,160 --> 00:18:23,570
there's also a CLI that we're working on

507
00:18:21,830 --> 00:18:24,580
so if you prefer to use like source

508
00:18:23,570 --> 00:18:27,820
controlled file

509
00:18:24,580 --> 00:18:30,370
and a CLI like similar to like you know

510
00:18:27,820 --> 00:18:32,408
kubernetes manifest in coop control and

511
00:18:30,370 --> 00:18:34,239
you like per to have this workflow for

512
00:18:32,409 --> 00:18:38,080
managing source control files that's

513
00:18:34,240 --> 00:18:39,880
also coming in collide fleet as well so

514
00:18:38,080 --> 00:18:42,939
this is cool you're like alright great I

515
00:18:39,880 --> 00:18:45,340
am on my way to like being able to

516
00:18:42,940 --> 00:18:49,000
remotely control a set of modes query

517
00:18:45,340 --> 00:18:51,639
nodes and now I'm interested in desktop

518
00:18:49,000 --> 00:18:53,200
deployment so I want to proliferate OS

519
00:18:51,640 --> 00:18:56,710
query and these packages that I've

520
00:18:53,200 --> 00:18:58,570
created out to all of my hosts you know

521
00:18:56,710 --> 00:19:01,620
whether it's my team additional teams

522
00:18:58,570 --> 00:19:03,939
all the desktops that's the objective so

523
00:19:01,620 --> 00:19:06,489
when it comes to enrolling hosts you

524
00:19:03,940 --> 00:19:08,200
have two options generally for

525
00:19:06,490 --> 00:19:11,320
distributing OS query across your

526
00:19:08,200 --> 00:19:14,380
infrastructure and you can so so

527
00:19:11,320 --> 00:19:16,360
Facebook publishes packages they

528
00:19:14,380 --> 00:19:17,799
publicly like sign the binary is

529
00:19:16,360 --> 00:19:19,990
packaged them signed the packages

530
00:19:17,799 --> 00:19:21,730
distribute the packages and you can

531
00:19:19,990 --> 00:19:24,460
download them from most credo slash

532
00:19:21,730 --> 00:19:26,880
downloads or from s3 which is where a

533
00:19:24,460 --> 00:19:29,409
squared is /downloads gets them from and

534
00:19:26,880 --> 00:19:31,240
you can distribute out all the binaries

535
00:19:29,409 --> 00:19:33,039
but that's just the binaries now it's a

536
00:19:31,240 --> 00:19:35,590
daemon like Oh s query like an order to

537
00:19:33,039 --> 00:19:37,720
run this query process it's like a

538
00:19:35,590 --> 00:19:40,418
long-running demonised process you need

539
00:19:37,720 --> 00:19:41,649
some way to like you know on Mac OS you

540
00:19:40,419 --> 00:19:43,539
know we just talked about launch D you

541
00:19:41,649 --> 00:19:46,418
need to be able to distribute a launch

542
00:19:43,539 --> 00:19:48,279
daemon as well as the configuration that

543
00:19:46,419 --> 00:19:50,440
articulates startup options that allows

544
00:19:48,279 --> 00:19:51,010
I was creative connect fleet so two

545
00:19:50,440 --> 00:19:52,809
options

546
00:19:51,010 --> 00:19:54,610
some people distribute the binaries via

547
00:19:52,809 --> 00:19:56,590
like the Facebook distributed packages

548
00:19:54,610 --> 00:19:59,500
and then distribute their configuration

549
00:19:56,590 --> 00:20:02,769
and the either like system to unify land

550
00:19:59,500 --> 00:20:04,539
or the the launch daemon to startup both

551
00:20:02,769 --> 00:20:06,250
great they'll can still like distribute

552
00:20:04,539 --> 00:20:08,139
those two packages separately some

553
00:20:06,250 --> 00:20:11,260
people this is what I personally

554
00:20:08,139 --> 00:20:14,019
recommend will distribute the binaries

555
00:20:11,260 --> 00:20:16,059
and kind of you know the launch Damon's

556
00:20:14,019 --> 00:20:18,760
or the Cindy you know files to start up

557
00:20:16,059 --> 00:20:21,668
both query together in one kind of

558
00:20:18,760 --> 00:20:24,158
atomic package so if that's what you're

559
00:20:21,669 --> 00:20:25,990
interested in we have an open source

560
00:20:24,159 --> 00:20:27,700
tool called package builder which allows

561
00:20:25,990 --> 00:20:29,559
you to just kind of articulate some of

562
00:20:27,700 --> 00:20:31,510
the different options that you have with

563
00:20:29,559 --> 00:20:33,639
packaging and distributing OS queries so

564
00:20:31,510 --> 00:20:35,440
you might like we host an auto update

565
00:20:33,639 --> 00:20:36,790
service for OS query that uses the

566
00:20:35,440 --> 00:20:38,980
update framework

567
00:20:36,790 --> 00:20:40,540
for content trusts you may or may not

568
00:20:38,980 --> 00:20:44,919
want to use that it's not enabled by

569
00:20:40,540 --> 00:20:47,020
default you might want to pin get pin to

570
00:20:44,919 --> 00:20:50,500
like your OS query server so that no one

571
00:20:47,020 --> 00:20:52,660
can you know stand up a different OS

572
00:20:50,500 --> 00:20:55,030
query TLS server on a captive network or

573
00:20:52,660 --> 00:20:56,230
something you know a variety of options

574
00:20:55,030 --> 00:20:58,210
for how you want to create packages

575
00:20:56,230 --> 00:20:59,830
pretty cool pretty fun hopefully find it

576
00:20:58,210 --> 00:21:05,020
useful if you don't like building

577
00:20:59,830 --> 00:21:06,428
packages yourself which nobody so when

578
00:21:05,020 --> 00:21:07,690
it comes sorry so let's assume you have

579
00:21:06,429 --> 00:21:09,160
these packages now you need to

580
00:21:07,690 --> 00:21:10,840
distribute them there's like a variety

581
00:21:09,160 --> 00:21:13,030
of open source options for doing this

582
00:21:10,840 --> 00:21:16,418
for various operating systems some of

583
00:21:13,030 --> 00:21:18,190
them are enumerated here I hope that

584
00:21:16,419 --> 00:21:19,360
your organization has this capability if

585
00:21:18,190 --> 00:21:20,799
your organization doesn't have this

586
00:21:19,360 --> 00:21:23,830
capability I think it's more important

587
00:21:20,799 --> 00:21:26,710
than host intrusion detection that's all

588
00:21:23,830 --> 00:21:28,090
saying that okay so now like assuming

589
00:21:26,710 --> 00:21:30,790
that you've created you setup collide

590
00:21:28,090 --> 00:21:33,610
fleet somewhere in the cloud you have

591
00:21:30,790 --> 00:21:37,690
created these packages that will connect

592
00:21:33,610 --> 00:21:39,520
OS query to your OS great TLS server and

593
00:21:37,690 --> 00:21:41,440
you've distributed them and you have all

594
00:21:39,520 --> 00:21:43,600
of your desktop hosts connecting into

595
00:21:41,440 --> 00:21:46,360
this server you should like this is

596
00:21:43,600 --> 00:21:48,040
where like you should pause and go write

597
00:21:46,360 --> 00:21:50,820
a ton of queries go write a ton of

598
00:21:48,040 --> 00:21:54,940
alerts and start like getting good at

599
00:21:50,820 --> 00:21:56,678
finding bad with OS query and before you

600
00:21:54,940 --> 00:21:58,419
move on to any other environments like

601
00:21:56,679 --> 00:22:00,580
you have OS career deploy to a hundred

602
00:21:58,419 --> 00:22:01,120
percent of one environment so you should

603
00:22:00,580 --> 00:22:02,580
start

604
00:22:01,120 --> 00:22:04,449
Xzibit like start writing queries

605
00:22:02,580 --> 00:22:05,470
interacting with the community to find

606
00:22:04,450 --> 00:22:08,710
queries that other people have written

607
00:22:05,470 --> 00:22:11,770
deploy the built-in query packs that

608
00:22:08,710 --> 00:22:14,950
come with OS query and try to get good

609
00:22:11,770 --> 00:22:16,270
at finding bad with OS query and this is

610
00:22:14,950 --> 00:22:19,240
great because the more you learn about

611
00:22:16,270 --> 00:22:22,330
os query in this like low organizational

612
00:22:19,240 --> 00:22:24,790
risk context the you know more you will

613
00:22:22,330 --> 00:22:26,199
be able to kind of add value to the

614
00:22:24,790 --> 00:22:29,620
additional environments that you deploy

615
00:22:26,200 --> 00:22:32,260
a squeegee so that's great you're like

616
00:22:29,620 --> 00:22:34,570
okay awesome this is really fun I have

617
00:22:32,260 --> 00:22:36,940
now deployed I'm like trying paper notes

618
00:22:34,570 --> 00:22:39,790
for the first time so no don't don't

619
00:22:36,940 --> 00:22:41,710
mind me but okay so let's assume you've

620
00:22:39,790 --> 00:22:44,590
got it out to all you've got to ask were

621
00:22:41,710 --> 00:22:46,270
deployed to all of your desktops and

622
00:22:44,590 --> 00:22:47,678
it's going really great you've written a

623
00:22:46,270 --> 00:22:49,960
bunch of queries you've got the logs

624
00:22:47,679 --> 00:22:50,560
into your sim you've written alerts on

625
00:22:49,960 --> 00:22:52,150
those long

626
00:22:50,560 --> 00:22:54,370
you're like this is great I have ton of

627
00:22:52,150 --> 00:22:56,440
insight I'm able to write alerts you

628
00:22:54,370 --> 00:22:59,560
know keeping the teams active finding

629
00:22:56,440 --> 00:23:01,720
bad having a good time now you want to

630
00:22:59,560 --> 00:23:02,169
start reasoning about deploying where to

631
00:23:01,720 --> 00:23:03,940
production

632
00:23:02,170 --> 00:23:05,530
you've only been deploying it to humans

633
00:23:03,940 --> 00:23:07,420
desktops now you wanted to play to

634
00:23:05,530 --> 00:23:10,300
servers there's some things you have to

635
00:23:07,420 --> 00:23:11,880
reason about and oh so this screenshot

636
00:23:10,300 --> 00:23:14,470
here you're not supposed to be able to

637
00:23:11,880 --> 00:23:17,290
to see what's on the screen here but

638
00:23:14,470 --> 00:23:19,330
basically like launcher is this tool

639
00:23:17,290 --> 00:23:21,460
that we were to collide that is like a

640
00:23:19,330 --> 00:23:23,530
wrapper around executing a query and

641
00:23:21,460 --> 00:23:25,870
connecting it to a TLS server which is

642
00:23:23,530 --> 00:23:27,700
this like very consistent way of

643
00:23:25,870 --> 00:23:29,649
deploying like a lot of people I'd say

644
00:23:27,700 --> 00:23:31,780
like 80% of people that deploy this

645
00:23:29,650 --> 00:23:35,260
query deploy this query in this way and

646
00:23:31,780 --> 00:23:36,879
in order to do this with raw OS query it

647
00:23:35,260 --> 00:23:39,730
requires something like 22

648
00:23:36,880 --> 00:23:41,380
CLI options it's ridiculous there's just

649
00:23:39,730 --> 00:23:44,500
like it's a very configurable process

650
00:23:41,380 --> 00:23:47,770
and there's a ton of options so like on

651
00:23:44,500 --> 00:23:49,600
the right is Creedy - - help and those

652
00:23:47,770 --> 00:23:51,760
are all the options and on the left is

653
00:23:49,600 --> 00:23:53,649
launcher - - shell so you know you

654
00:23:51,760 --> 00:23:55,450
probably or using launcher at this point

655
00:23:53,650 --> 00:23:57,190
and there's like a lot less to reason

656
00:23:55,450 --> 00:23:59,230
about but when you start to plunk to

657
00:23:57,190 --> 00:24:01,210
production like it's kind of worth like

658
00:23:59,230 --> 00:24:02,800
running those Creedy - - help and just

659
00:24:01,210 --> 00:24:04,270
getting an understanding of like what

660
00:24:02,800 --> 00:24:06,310
the options are that are available to

661
00:24:04,270 --> 00:24:07,960
you to tune this production deployment

662
00:24:06,310 --> 00:24:10,149
so some of the important options that

663
00:24:07,960 --> 00:24:14,440
you should probably you know keep in

664
00:24:10,150 --> 00:24:16,650
mind are you know you can optimize the

665
00:24:14,440 --> 00:24:19,930
way that is pretty schedules queries and

666
00:24:16,650 --> 00:24:21,670
that is if you do a grep schedule you'll

667
00:24:19,930 --> 00:24:23,500
see some of those options you can also

668
00:24:21,670 --> 00:24:24,850
configure event based monitoring so I

669
00:24:23,500 --> 00:24:26,200
haven't really talked about event based

670
00:24:24,850 --> 00:24:28,060
monitoring you know this query I have

671
00:24:26,200 --> 00:24:29,380
talked about it in other talks if that's

672
00:24:28,060 --> 00:24:31,899
interesting to you I can like send you

673
00:24:29,380 --> 00:24:33,220
some links but basically you might think

674
00:24:31,900 --> 00:24:35,140
like okay like let's say you're running

675
00:24:33,220 --> 00:24:37,120
this query select star from USB devices

676
00:24:35,140 --> 00:24:39,640
you run it every 60 seconds and that'll

677
00:24:37,120 --> 00:24:41,649
tell you how like the results set of the

678
00:24:39,640 --> 00:24:43,450
USB devices that are plugged into a host

679
00:24:41,650 --> 00:24:45,430
change but what if you're running that

680
00:24:43,450 --> 00:24:48,160
every 60 seconds and someone plugs in a

681
00:24:45,430 --> 00:24:49,780
USB device double clicks it runs some

682
00:24:48,160 --> 00:24:52,870
malware and then takes it out and that

683
00:24:49,780 --> 00:24:55,720
happens like in between two executions

684
00:24:52,870 --> 00:24:57,189
of the query you'll miss it but that's

685
00:24:55,720 --> 00:24:59,620
you know not necessarily the case

686
00:24:57,190 --> 00:25:02,050
because there is a

687
00:24:59,620 --> 00:25:04,270
an event-based subsystem of a square

688
00:25:02,050 --> 00:25:05,980
that allows that will you know in the

689
00:25:04,270 --> 00:25:08,710
case of USB devices it will subscribe to

690
00:25:05,980 --> 00:25:10,450
lib you dev which is you know the

691
00:25:08,710 --> 00:25:12,100
operating system exposes a variety of

692
00:25:10,450 --> 00:25:15,190
event based API is whether it's for the

693
00:25:12,100 --> 00:25:17,379
file system devices processes that are

694
00:25:15,190 --> 00:25:19,150
executed Inoue Square has a subsystem

695
00:25:17,380 --> 00:25:21,790
that ties into that that gives you the

696
00:25:19,150 --> 00:25:24,040
kind of like polling user experience

697
00:25:21,790 --> 00:25:25,840
that is like easier to cognitively

698
00:25:24,040 --> 00:25:28,540
reason about while still kind of like

699
00:25:25,840 --> 00:25:31,649
buffering events for you to not be lossy

700
00:25:28,540 --> 00:25:34,330
so if you want to enable and configure

701
00:25:31,650 --> 00:25:36,030
various aspects of that subsystem you

702
00:25:34,330 --> 00:25:38,679
know the options are there there's also

703
00:25:36,030 --> 00:25:40,420
the watchdog which I'll talk about more

704
00:25:38,680 --> 00:25:42,430
in a few minutes when I talk about

705
00:25:40,420 --> 00:25:43,990
safety features an OS query which

706
00:25:42,430 --> 00:25:46,030
becomes pretty important in production

707
00:25:43,990 --> 00:25:48,970
but you know there are a lot of options

708
00:25:46,030 --> 00:25:51,460
there and os query also has a really

709
00:25:48,970 --> 00:25:52,810
nice extension ecosystem so if you want

710
00:25:51,460 --> 00:25:54,580
to like write your own capabilities

711
00:25:52,810 --> 00:25:55,990
write your own internal tables that

712
00:25:54,580 --> 00:25:58,090
instrument perhaps like an internal

713
00:25:55,990 --> 00:26:00,880
service maybe you want to bundle that up

714
00:25:58,090 --> 00:26:02,679
is your own private extension and you

715
00:26:00,880 --> 00:26:04,660
know you can configure how you load and

716
00:26:02,680 --> 00:26:06,820
run extensions there so just things like

717
00:26:04,660 --> 00:26:08,640
those are there are a lot of options in

718
00:26:06,820 --> 00:26:13,149
it we read those are some important ones

719
00:26:08,640 --> 00:26:17,490
when you like come to this Junction so

720
00:26:13,150 --> 00:26:20,530
packaging software and production is

721
00:26:17,490 --> 00:26:23,200
sometimes unfortunate depending on where

722
00:26:20,530 --> 00:26:26,110
you work so I swear case book packaging

723
00:26:23,200 --> 00:26:28,090
you know Facebook runs sent OS on all of

724
00:26:26,110 --> 00:26:29,830
production Linux hosts and there is an

725
00:26:28,090 --> 00:26:32,290
internal package pehle compacting

726
00:26:29,830 --> 00:26:34,720
infrastructure you had to like buy into

727
00:26:32,290 --> 00:26:36,610
to deploy software to production so you

728
00:26:34,720 --> 00:26:39,670
know take the time get familiar with how

729
00:26:36,610 --> 00:26:42,120
your organization packages OS core

730
00:26:39,670 --> 00:26:44,260
packages things and distributes them and

731
00:26:42,120 --> 00:26:45,750
you know you're gonna have to become

732
00:26:44,260 --> 00:26:47,680
like pretty good friends with your

733
00:26:45,750 --> 00:26:49,360
organization's production ops people

734
00:26:47,680 --> 00:26:50,980
throughout this process so make sure

735
00:26:49,360 --> 00:26:52,510
that you're packaging things how they

736
00:26:50,980 --> 00:26:53,560
would like you to be packaging things or

737
00:26:52,510 --> 00:26:56,110
else you're gonna have a hard time

738
00:26:53,560 --> 00:26:57,730
distributing things to all of your

739
00:26:56,110 --> 00:27:00,250
infrastructure and the other

740
00:26:57,730 --> 00:27:02,940
recommendation that I will give you with

741
00:27:00,250 --> 00:27:05,760
regards to instrumenting production

742
00:27:02,940 --> 00:27:09,930
house is start reasoning about

743
00:27:05,760 --> 00:27:13,030
behavioral analytics so monitor so

744
00:27:09,930 --> 00:27:15,370
monitor so OS Korea allows you to kind

745
00:27:13,030 --> 00:27:17,860
like use this concept of labels to say

746
00:27:15,370 --> 00:27:20,739
like if a host is returning results to

747
00:27:17,860 --> 00:27:22,600
this query then group it as one of these

748
00:27:20,740 --> 00:27:25,450
shows so you might say like select star

749
00:27:22,600 --> 00:27:27,820
from prophecies where a name equals my

750
00:27:25,450 --> 00:27:29,860
sequel D like this is the my sequel

751
00:27:27,820 --> 00:27:32,290
label all hosts that are running my

752
00:27:29,860 --> 00:27:34,540
sequel are part of my sequel this my

753
00:27:32,290 --> 00:27:36,430
sequel label so you'd no longer have to

754
00:27:34,540 --> 00:27:37,690
reason about well I know that all of

755
00:27:36,430 --> 00:27:39,910
them like hosts that are running my

756
00:27:37,690 --> 00:27:42,190
sequel like are in that subnet or are

757
00:27:39,910 --> 00:27:44,110
managed by this chef's recipe or

758
00:27:42,190 --> 00:27:46,150
whatever you can just say like if a host

759
00:27:44,110 --> 00:27:47,949
is running my sequel then I want to run

760
00:27:46,150 --> 00:27:49,960
the my sequel instrument intrusion

761
00:27:47,950 --> 00:27:51,610
detection that I have and that will work

762
00:27:49,960 --> 00:27:53,740
for both your production my sequel

763
00:27:51,610 --> 00:27:56,080
servers as well as that random developer

764
00:27:53,740 --> 00:27:57,910
who has a developer server and you're

765
00:27:56,080 --> 00:27:59,560
like a production environment that like

766
00:27:57,910 --> 00:28:01,810
just happen to run like a poorly

767
00:27:59,560 --> 00:28:03,280
configured my sequel so you start

768
00:28:01,810 --> 00:28:05,649
reasoning about the things you want to

769
00:28:03,280 --> 00:28:07,750
monitor more dynamically and that works

770
00:28:05,650 --> 00:28:09,760
really well in production because it's

771
00:28:07,750 --> 00:28:11,710
off with significantly large production

772
00:28:09,760 --> 00:28:13,540
environments they're often you know not

773
00:28:11,710 --> 00:28:16,360
very modulus you don't have like the

774
00:28:13,540 --> 00:28:20,290
ability to understand exactly what's

775
00:28:16,360 --> 00:28:21,639
running everywhere unfortunately the

776
00:28:20,290 --> 00:28:23,050
other thing that I'll implore you to

777
00:28:21,640 --> 00:28:24,850
reason about as you start to think about

778
00:28:23,050 --> 00:28:27,580
host attrition detection and production

779
00:28:24,850 --> 00:28:30,850
is you likely have a production logging

780
00:28:27,580 --> 00:28:33,909
pipeline at where you work and collide

781
00:28:30,850 --> 00:28:36,209
uses GCP we have GCP pub/sub that we use

782
00:28:33,910 --> 00:28:38,710
for a lot of logging you might use Kafka

783
00:28:36,210 --> 00:28:41,860
Facebook had scribe which was an

784
00:28:38,710 --> 00:28:45,580
internal tool which was awesome you may

785
00:28:41,860 --> 00:28:47,709
you know you may have something but the

786
00:28:45,580 --> 00:28:50,460
key is that like you should you should

787
00:28:47,710 --> 00:28:54,340
endeavor to use it in my opinion

788
00:28:50,460 --> 00:28:56,230
so yeah the TLS plugin can still be used

789
00:28:54,340 --> 00:28:57,909
pretty effectively in this case if you

790
00:28:56,230 --> 00:28:59,950
wanted to like send logs to a central

791
00:28:57,910 --> 00:29:02,500
aggregated TLS server and then have the

792
00:28:59,950 --> 00:29:04,990
like a log third or what-have-you like

793
00:29:02,500 --> 00:29:06,610
aggregating logs on the TLS server and

794
00:29:04,990 --> 00:29:08,290
then putting them into your production

795
00:29:06,610 --> 00:29:09,310
logging pipeline that like that might be

796
00:29:08,290 --> 00:29:11,800
an effective way to solve this problem

797
00:29:09,310 --> 00:29:13,450
but you should endeavor to use the

798
00:29:11,800 --> 00:29:15,129
production tools that you have this is

799
00:29:13,450 --> 00:29:18,040
actually one of the original motivations

800
00:29:15,130 --> 00:29:19,900
for the like extensibility and the

801
00:29:18,040 --> 00:29:22,210
plug-in architecture of OS query because

802
00:29:19,900 --> 00:29:24,010
at Facebook we had you know really

803
00:29:22,210 --> 00:29:26,110
strong ability to deploy software and

804
00:29:24,010 --> 00:29:26,500
configure the file system and we already

805
00:29:26,110 --> 00:29:29,020
had

806
00:29:26,500 --> 00:29:32,110
log forwarders and Corp on desktops but

807
00:29:29,020 --> 00:29:34,180
in production we had scribe and like if

808
00:29:32,110 --> 00:29:36,699
we like who there was no way that we

809
00:29:34,180 --> 00:29:39,580
were going to be able to handle all of

810
00:29:36,700 --> 00:29:41,380
the load using anything other than

811
00:29:39,580 --> 00:29:43,510
scribe so it was really important to us

812
00:29:41,380 --> 00:29:45,970
to be both like obviously Corp doesn't

813
00:29:43,510 --> 00:29:47,100
have scribe because that would be

814
00:29:45,970 --> 00:29:49,030
terrible

815
00:29:47,100 --> 00:29:50,139
so it's really important to us to be

816
00:29:49,030 --> 00:29:51,820
able to like take advantage of

817
00:29:50,140 --> 00:29:53,350
production tools when we had to because

818
00:29:51,820 --> 00:29:54,939
like at some point this turns into a

819
00:29:53,350 --> 00:29:56,020
data problem so you should be able to

820
00:29:54,940 --> 00:29:59,320
like to take advantage of your

821
00:29:56,020 --> 00:30:00,610
production data infrastructure okay so

822
00:29:59,320 --> 00:30:03,250
those are some important things to keep

823
00:30:00,610 --> 00:30:05,080
in mind now you're like okay you've got

824
00:30:03,250 --> 00:30:07,000
it - a few dev servers you've got it -

825
00:30:05,080 --> 00:30:09,100
like one various like the payments

826
00:30:07,000 --> 00:30:10,780
cluster or what have you and now you're

827
00:30:09,100 --> 00:30:12,669
like this is great I mean I'm like also

828
00:30:10,780 --> 00:30:14,500
getting some useful Linux data out of

829
00:30:12,670 --> 00:30:16,330
this I want to complete my production

830
00:30:14,500 --> 00:30:18,850
deployment and I'll say that this is

831
00:30:16,330 --> 00:30:20,860
largely a configuration management

832
00:30:18,850 --> 00:30:22,389
problem unfortunately so I have some

833
00:30:20,860 --> 00:30:24,159
screenshots here of puppet chef and

834
00:30:22,390 --> 00:30:26,800
ansible and I also have a screenshot of

835
00:30:24,160 --> 00:30:29,490
gke which is GC peas kubernetes engine

836
00:30:26,800 --> 00:30:31,480
and that's just kind of say like

837
00:30:29,490 --> 00:30:35,920
production environments aren't

838
00:30:31,480 --> 00:30:38,050
necessarily mmm servers anymore like in

839
00:30:35,920 --> 00:30:39,160
kubernetes you have this cluster that's

840
00:30:38,050 --> 00:30:41,409
running a workload and like you have

841
00:30:39,160 --> 00:30:43,510
kubernetes primitives now for deploying

842
00:30:41,410 --> 00:30:46,180
like a single workload to every node and

843
00:30:43,510 --> 00:30:48,250
you know collide we don't like we run

844
00:30:46,180 --> 00:30:51,010
absolutely everything in kubernetes so

845
00:30:48,250 --> 00:30:53,290
like these mechanisms that kubernetes

846
00:30:51,010 --> 00:30:56,260
has for distributing workloads

847
00:30:53,290 --> 00:30:58,210
that's how we do config management at

848
00:30:56,260 --> 00:30:58,710
collide we don't really use up at or

849
00:30:58,210 --> 00:31:00,940
ansible

850
00:30:58,710 --> 00:31:04,060
so that's great really fun we have these

851
00:31:00,940 --> 00:31:06,040
like very lockdown production and nodes

852
00:31:04,060 --> 00:31:09,330
and we use the kubernetes primitives to

853
00:31:06,040 --> 00:31:11,920
distribute software so it's really fun

854
00:31:09,330 --> 00:31:13,780
config management like obviously when

855
00:31:11,920 --> 00:31:16,090
you reason about like what is a hundred

856
00:31:13,780 --> 00:31:18,220
percent of production mean in your

857
00:31:16,090 --> 00:31:21,760
environment it might not be it might not

858
00:31:18,220 --> 00:31:24,160
be clear and it usually means like it's

859
00:31:21,760 --> 00:31:27,180
in the base image it's in like the base

860
00:31:24,160 --> 00:31:30,070
run list if you use chef or it's like

861
00:31:27,180 --> 00:31:32,020
you know it just really depends on your

862
00:31:30,070 --> 00:31:34,720
organization what a hundred percent

863
00:31:32,020 --> 00:31:37,389
means but it's not clear and it's

864
00:31:34,720 --> 00:31:38,050
largely a asset management and

865
00:31:37,390 --> 00:31:40,240
configuring

866
00:31:38,050 --> 00:31:41,740
management problem so ideally you like

867
00:31:40,240 --> 00:31:44,020
you can't reason about a hundred percent

868
00:31:41,740 --> 00:31:45,730
of production until you like have solved

869
00:31:44,020 --> 00:31:47,260
asset management configuration

870
00:31:45,730 --> 00:31:49,150
management your organization so like

871
00:31:47,260 --> 00:31:51,340
perhaps this is another time you should

872
00:31:49,150 --> 00:31:54,070
like segue and reason about asset

873
00:31:51,340 --> 00:31:57,699
management in production and the other

874
00:31:54,070 --> 00:31:59,830
thing to be really mindful of with

875
00:31:57,700 --> 00:32:02,890
regrets to oscar ii in production are

876
00:31:59,830 --> 00:32:04,840
safety features so for example at face

877
00:32:02,890 --> 00:32:07,330
book we wanted to instrument 100 percent

878
00:32:04,840 --> 00:32:10,330
of production and face book run some

879
00:32:07,330 --> 00:32:13,360
important web services including like

880
00:32:10,330 --> 00:32:15,159
things like newsfeed ad servers stuff

881
00:32:13,360 --> 00:32:17,979
like that and like newsfeed can't go

882
00:32:15,160 --> 00:32:19,420
down because we wanted to monitor the

883
00:32:17,980 --> 00:32:20,830
kernel modules that were loaded on

884
00:32:19,420 --> 00:32:23,500
production linux like it's just

885
00:32:20,830 --> 00:32:25,480
unacceptable right so we added a lot of

886
00:32:23,500 --> 00:32:28,630
safety features to OS query that are

887
00:32:25,480 --> 00:32:30,760
kind of similar to how we deploy a new

888
00:32:28,630 --> 00:32:33,640
software into production and some of

889
00:32:30,760 --> 00:32:35,560
those for example are there's OS query

890
00:32:33,640 --> 00:32:37,270
has this multi-process model that's like

891
00:32:35,560 --> 00:32:39,850
somewhat opaque to the user but

892
00:32:37,270 --> 00:32:42,790
basically you can set configurable

893
00:32:39,850 --> 00:32:45,040
limits so you can say I want to make

894
00:32:42,790 --> 00:32:48,040
like low medium or high like how

895
00:32:45,040 --> 00:32:50,290
stringent the requirements are and if OS

896
00:32:48,040 --> 00:32:52,659
query starts using a lot of CPU or a lot

897
00:32:50,290 --> 00:32:54,370
of memory the supervisor process will

898
00:32:52,660 --> 00:32:56,170
just kill the worker and then it will

899
00:32:54,370 --> 00:32:57,909
start up again and the work of processes

900
00:32:56,170 --> 00:32:59,710
are very stateless so this often doesn't

901
00:32:57,910 --> 00:33:01,690
really like make it impactful difference

902
00:32:59,710 --> 00:33:03,280
in your instrumentation but it's just

903
00:33:01,690 --> 00:33:04,720
kind of a nice feature to make sure that

904
00:33:03,280 --> 00:33:07,120
OS query can't run away with your

905
00:33:04,720 --> 00:33:08,920
production servers performance and also

906
00:33:07,120 --> 00:33:12,010
like something even on the desktop this

907
00:33:08,920 --> 00:33:14,290
is useful because like people get really

908
00:33:12,010 --> 00:33:16,230
upset when their fans turn on and it's

909
00:33:14,290 --> 00:33:18,879
your fault

910
00:33:16,230 --> 00:33:20,500
and in addition one thing that we kind

911
00:33:18,880 --> 00:33:24,940
of stole from Facebook production and

912
00:33:20,500 --> 00:33:27,490
attitudes idea of shards so we saw at

913
00:33:24,940 --> 00:33:28,630
Facebook we would deploy software let's

914
00:33:27,490 --> 00:33:30,400
say we had something we wanted to

915
00:33:28,630 --> 00:33:32,290
package and distribute to production and

916
00:33:30,400 --> 00:33:35,350
we would say ok like first we deploy it

917
00:33:32,290 --> 00:33:37,240
to shard 1 and this means that's 1% of

918
00:33:35,350 --> 00:33:39,340
all production hosts that's going well

919
00:33:37,240 --> 00:33:41,230
you like slow roll your roll out now you

920
00:33:39,340 --> 00:33:43,120
deploy to shard five that's five percent

921
00:33:41,230 --> 00:33:45,640
of all hosts then you do 10 and you do

922
00:33:43,120 --> 00:33:48,340
20 then you do 50 then you do 75 and

923
00:33:45,640 --> 00:33:50,080
then you do 100 and similarly when you

924
00:33:48,340 --> 00:33:51,360
add a new query to your OS query

925
00:33:50,080 --> 00:33:53,428
configuration you're now

926
00:33:51,360 --> 00:33:56,549
executing code that has previously not

927
00:33:53,429 --> 00:33:58,770
been executing on that server there is

928
00:33:56,549 --> 00:34:02,910
like when you run a query select star

929
00:33:58,770 --> 00:34:05,309
from processes on nos query you know the

930
00:34:02,910 --> 00:34:08,639
query gets parsed planned and executed

931
00:34:05,309 --> 00:34:10,320
and instead of like querying a static

932
00:34:08,639 --> 00:34:12,240
set of data that already exists it will

933
00:34:10,320 --> 00:34:13,740
execute some C++ code that like

934
00:34:12,239 --> 00:34:15,959
interacts with the operating system API

935
00:34:13,739 --> 00:34:17,489
is to enumerate the processes and this

936
00:34:15,960 --> 00:34:19,320
is important this is an important

937
00:34:17,489 --> 00:34:21,178
distinction because if you were not

938
00:34:19,320 --> 00:34:23,369
previously running select star from cost

939
00:34:21,179 --> 00:34:25,350
C's and then you started now you're

940
00:34:23,369 --> 00:34:28,290
running new code that you have never

941
00:34:25,350 --> 00:34:31,020
written Ryan on any host before and it's

942
00:34:28,290 --> 00:34:33,270
probably a bad idea to go and just

943
00:34:31,020 --> 00:34:35,040
distribute that query to 100% of

944
00:34:33,270 --> 00:34:38,070
production especially when you reason

945
00:34:35,040 --> 00:34:40,980
about things like you know the way that

946
00:34:38,070 --> 00:34:45,090
the processes table works in Linux is it

947
00:34:40,980 --> 00:34:48,119
enumerates /proc and sometimes /proc is

948
00:34:45,090 --> 00:34:49,950
mounted via NFS or something and you

949
00:34:48,119 --> 00:34:51,929
know that could cause some interesting

950
00:34:49,949 --> 00:34:53,850
issues so we had the you know /proc

951
00:34:51,929 --> 00:34:55,050
iteration code audited by the kernel

952
00:34:53,850 --> 00:34:56,549
team in Facebook and they seem to be

953
00:34:55,050 --> 00:34:58,619
pretty happy with it but they were also

954
00:34:56,550 --> 00:35:00,359
pretty worried about interacting with

955
00:34:58,619 --> 00:35:03,420
/proc in general so you know hopefully

956
00:35:00,359 --> 00:35:06,569
that works out and there's also a lot of

957
00:35:03,420 --> 00:35:08,250
kind of internal table so the yosakoi

958
00:35:06,570 --> 00:35:11,790
team at Facebook we would often use I

959
00:35:08,250 --> 00:35:14,160
worry to monitor OS query so we had this

960
00:35:11,790 --> 00:35:16,440
great login pipeline and we would have

961
00:35:14,160 --> 00:35:19,470
like say okay like of all the queries

962
00:35:16,440 --> 00:35:21,840
that queries executing like how many CPU

963
00:35:19,470 --> 00:35:23,759
cycles did each one take how often

964
00:35:21,840 --> 00:35:24,900
what's the memory profile of each query

965
00:35:23,760 --> 00:35:27,600
that were running and we'd create

966
00:35:24,900 --> 00:35:29,250
dashboards to observe how you know all

967
00:35:27,600 --> 00:35:31,230
right we've pushed this query out to

968
00:35:29,250 --> 00:35:33,750
shard five what's the memory profile of

969
00:35:31,230 --> 00:35:35,280
it before we go to shard 15 stuff like

970
00:35:33,750 --> 00:35:36,720
that so you oh square has a lot of

971
00:35:35,280 --> 00:35:39,170
features for you to kind of like get

972
00:35:36,720 --> 00:35:42,450
those resource utilization things and

973
00:35:39,170 --> 00:35:44,130
and that's cool so next step final step

974
00:35:42,450 --> 00:35:45,660
mergers and acquisitions so like you

975
00:35:44,130 --> 00:35:46,980
have instrumented a hundred percent of

976
00:35:45,660 --> 00:35:48,569
your production Linux environment

977
00:35:46,980 --> 00:35:50,340
integrated into your logging pipeline

978
00:35:48,570 --> 00:35:52,619
you're writing alerts it's all good

979
00:35:50,340 --> 00:35:55,020
every computer that your company owns

980
00:35:52,619 --> 00:35:56,880
has query on it and it's like connecting

981
00:35:55,020 --> 00:35:59,520
to your central management server like

982
00:35:56,880 --> 00:36:01,270
you're you're feeling awesome and but

983
00:35:59,520 --> 00:36:02,470
you like need to be prepared

984
00:36:01,270 --> 00:36:05,710
because your company could buy another

985
00:36:02,470 --> 00:36:08,620
company if you know your company some

986
00:36:05,710 --> 00:36:11,050
make a Google right and you might have

987
00:36:08,620 --> 00:36:13,029
to instrument that environment so I

988
00:36:11,050 --> 00:36:15,640
would largely say this comes down to

989
00:36:13,030 --> 00:36:19,900
like three points the first point is

990
00:36:15,640 --> 00:36:24,089
half packages ready so like when when my

991
00:36:19,900 --> 00:36:27,070
last employer made an acquisition that

992
00:36:24,090 --> 00:36:29,080
environment was all FreeBSD we had no

993
00:36:27,070 --> 00:36:31,210
FreeBSD in production like we like we

994
00:36:29,080 --> 00:36:32,650
MOS we didn't even run on FreeBSD at the

995
00:36:31,210 --> 00:36:35,920
time but we had to make it run on

996
00:36:32,650 --> 00:36:37,450
FreeBSD and package it and in a way that

997
00:36:35,920 --> 00:36:39,190
those hosts would expect so that we

998
00:36:37,450 --> 00:36:40,750
could instrument that new production

999
00:36:39,190 --> 00:36:43,330
environment that just became our

1000
00:36:40,750 --> 00:36:45,340
production environment so have these

1001
00:36:43,330 --> 00:36:47,529
packages available like you know how to

1002
00:36:45,340 --> 00:36:50,800
package our different distributions of

1003
00:36:47,530 --> 00:36:52,480
Linux other than your own and understand

1004
00:36:50,800 --> 00:36:54,700
the kind of like limitations of how and

1005
00:36:52,480 --> 00:36:55,990
where you can run I was great the other

1006
00:36:54,700 --> 00:36:57,399
recommendation I'll give for you is like

1007
00:36:55,990 --> 00:36:59,529
get comfortable with running your OS

1008
00:36:57,400 --> 00:37:01,450
query TLS server on the edge you may

1009
00:36:59,530 --> 00:37:03,280
want to like put it in your internal VPN

1010
00:37:01,450 --> 00:37:07,120
if VPNs are like still a thing that

1011
00:37:03,280 --> 00:37:09,820
you're doing you know all the cool kids

1012
00:37:07,120 --> 00:37:11,080
are beyond corporate now but yeah get

1013
00:37:09,820 --> 00:37:14,170
comfortable with don't be afraid to put

1014
00:37:11,080 --> 00:37:16,029
your server on the edge you know other

1015
00:37:14,170 --> 00:37:18,790
production environments when you do M&A

1016
00:37:16,030 --> 00:37:21,640
is like might not be in your VPN or in

1017
00:37:18,790 --> 00:37:23,590
your intranet so in order to effectively

1018
00:37:21,640 --> 00:37:26,259
instrument them you'll have to put it on

1019
00:37:23,590 --> 00:37:27,790
the edge anyway and this is also useful

1020
00:37:26,260 --> 00:37:29,440
for instrumenting the desktop

1021
00:37:27,790 --> 00:37:31,930
environment because like people go home

1022
00:37:29,440 --> 00:37:33,130
and they get compromised more often than

1023
00:37:31,930 --> 00:37:37,569
they get compromised when they're in the

1024
00:37:33,130 --> 00:37:40,360
office so that's important and then the

1025
00:37:37,570 --> 00:37:42,700
final aspect of M&A is is categorizable

1026
00:37:40,360 --> 00:37:45,490
environments so like I said labels allow

1027
00:37:42,700 --> 00:37:47,740
you to group kind of my sequel hosts or

1028
00:37:45,490 --> 00:37:50,319
hosts that are running Apache or hosts

1029
00:37:47,740 --> 00:37:52,180
that are like bound to a TCP port or

1030
00:37:50,320 --> 00:37:54,250
something like you can categorize all of

1031
00:37:52,180 --> 00:37:56,740
these things and if you want to start

1032
00:37:54,250 --> 00:37:58,660
instrumenting like not only a desktop

1033
00:37:56,740 --> 00:38:01,450
environment or a production environment

1034
00:37:58,660 --> 00:38:03,129
but many different environments like get

1035
00:38:01,450 --> 00:38:06,669
comfortable with using these primitives

1036
00:38:03,130 --> 00:38:07,290
to articulate groups of hosts that you

1037
00:38:06,670 --> 00:38:08,940
want to apply

1038
00:38:07,290 --> 00:38:12,560
various instrumentation too because

1039
00:38:08,940 --> 00:38:16,020
based on internal data privacy laws or

1040
00:38:12,560 --> 00:38:17,970
you know the ops team's ability to

1041
00:38:16,020 --> 00:38:19,410
accept risk on those hosts you may want

1042
00:38:17,970 --> 00:38:22,859
to like cordon off different

1043
00:38:19,410 --> 00:38:26,279
instrumentation that you perform so some

1044
00:38:22,860 --> 00:38:29,370
like really quick takeaways from this I

1045
00:38:26,280 --> 00:38:30,600
would say like do you like scalable

1046
00:38:29,370 --> 00:38:33,210
intrusion detection is a commodity

1047
00:38:30,600 --> 00:38:35,250
capability and stay away from vendors

1048
00:38:33,210 --> 00:38:38,790
that are trying to sell you special

1049
00:38:35,250 --> 00:38:39,720
sauce so in my opinion like the all the

1050
00:38:38,790 --> 00:38:42,120
tools that I've talked to you about

1051
00:38:39,720 --> 00:38:43,980
today are open-source and you can pick

1052
00:38:42,120 --> 00:38:45,810
them up off the shelf and use them to do

1053
00:38:43,980 --> 00:38:47,670
like incredibly scalable incredibly

1054
00:38:45,810 --> 00:38:49,860
advanced operating system analytics and

1055
00:38:47,670 --> 00:38:51,540
especially in the endpoint industry

1056
00:38:49,860 --> 00:38:54,000
there's been a lot of vendors who are

1057
00:38:51,540 --> 00:38:56,130
like we have this capability to do

1058
00:38:54,000 --> 00:38:58,260
something and nobody else has it like

1059
00:38:56,130 --> 00:39:00,420
thus you need to pay us for our product

1060
00:38:58,260 --> 00:39:04,110
and I just like fundamentally disagree

1061
00:39:00,420 --> 00:39:06,000
that security features should be

1062
00:39:04,110 --> 00:39:08,250
something that you have to pay for it

1063
00:39:06,000 --> 00:39:12,240
like anyone regardless of how much they

1064
00:39:08,250 --> 00:39:14,940
can pay or you know what their budget is

1065
00:39:12,240 --> 00:39:16,319
should be able to do this kind of

1066
00:39:14,940 --> 00:39:18,540
instrumentation they should be able to

1067
00:39:16,320 --> 00:39:20,910
like gain access to this data and if you

1068
00:39:18,540 --> 00:39:22,950
like have the tolerance to deploy your

1069
00:39:20,910 --> 00:39:25,259
own server and like do a little ops work

1070
00:39:22,950 --> 00:39:27,569
you should be able to get at all the raw

1071
00:39:25,260 --> 00:39:30,570
data and maybe the user experience if

1072
00:39:27,570 --> 00:39:31,590
the application isn't as great but you

1073
00:39:30,570 --> 00:39:33,260
know you should the fundamental

1074
00:39:31,590 --> 00:39:36,810
capabilities should be commodity

1075
00:39:33,260 --> 00:39:38,070
democratized capabilities which they are

1076
00:39:36,810 --> 00:39:40,470
of those queries so like keep that in

1077
00:39:38,070 --> 00:39:41,670
mind and I hope you value that too and I

1078
00:39:40,470 --> 00:39:43,379
would also say don't use the features

1079
00:39:41,670 --> 00:39:45,050
you don't need when you don't need them

1080
00:39:43,380 --> 00:39:47,400
it's really easy with those query to

1081
00:39:45,050 --> 00:39:49,650
kind of like tack on a lot of extra

1082
00:39:47,400 --> 00:39:51,150
features and keep it simple you know

1083
00:39:49,650 --> 00:39:51,810
you've heard the acronym kiss keep it

1084
00:39:51,150 --> 00:39:54,480
simple stupid

1085
00:39:51,810 --> 00:39:56,509
so you know try to do that and start in

1086
00:39:54,480 --> 00:39:59,880
the desktop bounce risk in reward and

1087
00:39:56,510 --> 00:40:01,740
you know a lot of people don't do that

1088
00:39:59,880 --> 00:40:04,200
and may disagree with that but that is

1089
00:40:01,740 --> 00:40:06,180
like you know my hot take on like where

1090
00:40:04,200 --> 00:40:11,549
you should start intriguing detection so

1091
00:40:06,180 --> 00:40:13,500
with that I have 27 seconds and so if

1092
00:40:11,550 --> 00:40:15,810
there are like one or two questions I'll

1093
00:40:13,500 --> 00:40:18,060
take them otherwise I'll be around yes

1094
00:40:15,810 --> 00:40:20,130
yeah great question so the question is

1095
00:40:18,060 --> 00:40:20,700
where seems to enable you to find bad

1096
00:40:20,130 --> 00:40:22,560
but what

1097
00:40:20,700 --> 00:40:25,410
mediation like how do you take action

1098
00:40:22,560 --> 00:40:27,630
based on the bad that you found and OS

1099
00:40:25,410 --> 00:40:30,390
queries perspective on this is that's

1100
00:40:27,630 --> 00:40:32,940
like a exercise for the reader like oh

1101
00:40:30,390 --> 00:40:35,520
this query prides itself on being read

1102
00:40:32,940 --> 00:40:39,150
only and that is like a safety feature

1103
00:40:35,520 --> 00:40:41,609
of OS query so one of the things that is

1104
00:40:39,150 --> 00:40:44,130
like unacceptable and a lot of

1105
00:40:41,609 --> 00:40:45,930
production environments is like you want

1106
00:40:44,130 --> 00:40:47,490
it like you want to deploy an agent and

1107
00:40:45,930 --> 00:40:48,779
your ops team is like you want to play

1108
00:40:47,490 --> 00:40:51,689
an agent that's just gonna kill

1109
00:40:48,780 --> 00:40:53,099
processes like what if your logic is

1110
00:40:51,690 --> 00:40:55,470
wrong like it's just gonna start killing

1111
00:40:53,099 --> 00:40:57,839
everything so is always a design goal of

1112
00:40:55,470 --> 00:41:00,118
those query to not you know you can't

1113
00:40:57,839 --> 00:41:01,770
insert you can only select but in the

1114
00:41:00,119 --> 00:41:03,660
extension you go system analyst query

1115
00:41:01,770 --> 00:41:06,300
you can write an OS query extension that

1116
00:41:03,660 --> 00:41:07,950
can you take system C and you can do

1117
00:41:06,300 --> 00:41:09,450
inserts and stuff I know it's query

1118
00:41:07,950 --> 00:41:10,529
extensions so if that is something that

1119
00:41:09,450 --> 00:41:12,660
you'd like to use that was great

1120
00:41:10,530 --> 00:41:14,760
platform to distribute you can but by

1121
00:41:12,660 --> 00:41:17,399
default OS queries read only by design

1122
00:41:14,760 --> 00:41:20,130
so the question is like in the cloud you

1123
00:41:17,400 --> 00:41:22,589
can just kind of like you know blow a

1124
00:41:20,130 --> 00:41:24,200
host that are exhibiting anomalous

1125
00:41:22,589 --> 00:41:26,310
activity like how does that change

1126
00:41:24,200 --> 00:41:28,200
intrusion detection and like this

1127
00:41:26,310 --> 00:41:30,150
landscape and I would say that like so

1128
00:41:28,200 --> 00:41:32,098
we've kubernetes a lot for example it

1129
00:41:30,150 --> 00:41:33,480
collide and one thing that kubernetes is

1130
00:41:32,099 --> 00:41:35,490
really good at is allowing you to

1131
00:41:33,480 --> 00:41:37,589
articulate what should be there but it's

1132
00:41:35,490 --> 00:41:39,799
not very good at articulating allowing

1133
00:41:37,589 --> 00:41:42,869
you to determine what is there that

1134
00:41:39,800 --> 00:41:45,030
shouldn't be there so stuff like that

1135
00:41:42,869 --> 00:41:47,490
I think is really it's so really useful

1136
00:41:45,030 --> 00:41:50,730
to be able to understand like hey I have

1137
00:41:47,490 --> 00:41:52,379
I wanted to like bind to TCP ports on

1138
00:41:50,730 --> 00:41:54,300
these workloads but like why are these

1139
00:41:52,380 --> 00:41:55,770
work was also finding to TCP boards

1140
00:41:54,300 --> 00:41:58,849
that's weird it's like being able to

1141
00:41:55,770 --> 00:42:01,440
understand the environments kind of

1142
00:41:58,849 --> 00:42:05,130
separately I think is useful and then

1143
00:42:01,440 --> 00:42:07,290
additionally like if you are in the

1144
00:42:05,130 --> 00:42:09,510
business of kind of like alright I've

1145
00:42:07,290 --> 00:42:11,759
identified compromise in my solution my

1146
00:42:09,510 --> 00:42:13,470
like incident response action is to just

1147
00:42:11,760 --> 00:42:16,230
like kill that workload and start a new

1148
00:42:13,470 --> 00:42:18,270
one or take that note out of production

1149
00:42:16,230 --> 00:42:20,069
and put a new one in and its place or

1150
00:42:18,270 --> 00:42:22,440
something then you need to be able to

1151
00:42:20,069 --> 00:42:24,869
detect some anomaly in order to make

1152
00:42:22,440 --> 00:42:27,869
that decision and I think that is where

1153
00:42:24,869 --> 00:42:28,140
intrusion detection kind of fits in and

1154
00:42:27,869 --> 00:42:31,220
these

1155
00:42:28,140 --> 00:42:34,670
like a morph its production environments

1156
00:42:31,220 --> 00:42:34,669
I'll take one more

1157
00:42:43,920 --> 00:42:48,670
yeah so the question is do you deploy Oh

1158
00:42:46,240 --> 00:42:50,879
screw on networking hardware anything

1159
00:42:48,670 --> 00:42:53,590
other than production servers and

1160
00:42:50,880 --> 00:42:57,370
desktops and I guess the answer to that

1161
00:42:53,590 --> 00:43:00,190
is so screwed runs on 64-bit

1162
00:42:57,370 --> 00:43:04,180
architectures right now Linux Mac OS and

1163
00:43:00,190 --> 00:43:05,830
FreeBSD and if so for example at

1164
00:43:04,180 --> 00:43:07,810
Facebook be like networking equipment

1165
00:43:05,830 --> 00:43:09,640
that we had was Lennox it was like

1166
00:43:07,810 --> 00:43:12,070
Facebook open source switching but they

1167
00:43:09,640 --> 00:43:13,810
were like Linux boxes that we did Sdn on

1168
00:43:12,070 --> 00:43:14,980
and if that's the case then you could

1169
00:43:13,810 --> 00:43:16,270
perhaps for another square to do

1170
00:43:14,980 --> 00:43:18,250
intrusion detection on it but if you

1171
00:43:16,270 --> 00:43:20,259
have like juniper or Cisco routers and

1172
00:43:18,250 --> 00:43:21,370
no you're no like you're not going to be

1173
00:43:20,260 --> 00:43:23,410
able to run out of query on it but

1174
00:43:21,370 --> 00:43:27,029
you're hopefully your attack surface is

1175
00:43:23,410 --> 00:43:27,029
also somewhat limited because like it's

1176
00:43:28,230 --> 00:43:34,810
you know that that wasn't supposed to be

1177
00:43:31,750 --> 00:43:35,830
a snide remark but look cool thank you

1178
00:43:34,810 --> 00:43:37,110
and if you have any more questions about

1179
00:43:35,830 --> 00:43:40,110
it was query or host intrusion detection

1180
00:43:37,110 --> 00:43:40,110
happening

