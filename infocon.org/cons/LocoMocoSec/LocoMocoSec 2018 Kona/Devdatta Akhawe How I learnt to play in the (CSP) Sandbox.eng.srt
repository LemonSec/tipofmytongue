1
00:00:01,520 --> 00:00:04,980
[Applause]

2
00:00:07,580 --> 00:00:14,309
working all right cool

3
00:00:10,440 --> 00:00:15,989
Thanks welcome everyone

4
00:00:14,309 --> 00:00:17,669
second talk of the day I didn't know I

5
00:00:15,990 --> 00:00:19,500
was gonna be after try so now I'm more

6
00:00:17,670 --> 00:00:21,390
freaked out because I'm not as good a

7
00:00:19,500 --> 00:00:24,090
speaker as try so just heads up on that

8
00:00:21,390 --> 00:00:26,099
one quick intro well people are still

9
00:00:24,090 --> 00:00:27,720
getting some food I'm dev I was at

10
00:00:26,099 --> 00:00:29,730
Berkeley getting a PhD in application

11
00:00:27,720 --> 00:00:31,410
security and browser security then I

12
00:00:29,730 --> 00:00:32,910
moved to Dropbox where I now lead

13
00:00:31,410 --> 00:00:36,180
product security and abuse prevention

14
00:00:32,910 --> 00:00:39,209
and and this is my website and that's my

15
00:00:36,180 --> 00:00:41,579
twitter handle so so you know say hi on

16
00:00:39,210 --> 00:00:43,379
Twitter if you the other thing is

17
00:00:41,579 --> 00:00:46,129
Dropbox paid for my flight so I do have

18
00:00:43,379 --> 00:00:49,170
to do the obligatory we are hiring and

19
00:00:46,129 --> 00:00:50,879
and it's a great place to work I can

20
00:00:49,170 --> 00:00:52,469
talk more but we're definitely hiring

21
00:00:50,879 --> 00:00:55,190
and that's all we will talk about

22
00:00:52,469 --> 00:00:57,360
because that's enough for the flights

23
00:00:55,190 --> 00:01:00,120
quick disclaimer on the talk everything

24
00:00:57,360 --> 00:01:02,879
I say is my own muse not representing my

25
00:01:00,120 --> 00:01:05,009
employer I also didn't do much of the

26
00:01:02,879 --> 00:01:06,090
work other people did all the work but

27
00:01:05,010 --> 00:01:09,750
if there are any mistakes in the

28
00:01:06,090 --> 00:01:13,770
presentation this is all my these are

29
00:01:09,750 --> 00:01:15,479
all my mistakes I'm more like this this

30
00:01:13,770 --> 00:01:17,460
dog at the end who's just watching

31
00:01:15,479 --> 00:01:20,610
everyone else do the work and the

32
00:01:17,460 --> 00:01:22,289
manager in in security engineering at

33
00:01:20,610 --> 00:01:23,549
Dropbox so everyone else did the work

34
00:01:22,290 --> 00:01:26,659
just a heads up I'm just talking about

35
00:01:23,549 --> 00:01:30,450
it which is which is nice job to have

36
00:01:26,659 --> 00:01:33,360
another warning so I'm I'm recovering

37
00:01:30,450 --> 00:01:35,880
academic I as Jay mentioned I got a PhD

38
00:01:33,360 --> 00:01:38,430
and you know I went from academia to the

39
00:01:35,880 --> 00:01:42,329
industry and this pretty much sums up

40
00:01:38,430 --> 00:01:45,329
like the the transition right like this

41
00:01:42,329 --> 00:01:48,809
is academia was the top and now this is

42
00:01:45,329 --> 00:01:50,729
the real word duct tape pretty important

43
00:01:48,810 --> 00:01:51,360
and and so this talk is about

44
00:01:50,729 --> 00:01:53,280
engineering

45
00:01:51,360 --> 00:01:56,219
it's not about science gonna be a bunch

46
00:01:53,280 --> 00:01:57,479
of hacks please don't I mean you're all

47
00:01:56,219 --> 00:01:58,890
work in the industry so you're not going

48
00:01:57,479 --> 00:02:00,240
to be surprised that hacks but just

49
00:01:58,890 --> 00:02:02,100
heads up it's not going to be a

50
00:02:00,240 --> 00:02:05,339
beautiful crypto theorem being proved

51
00:02:02,100 --> 00:02:06,809
here so it's heads up on that all right

52
00:02:05,340 --> 00:02:08,220
pretty little but what's the sort of

53
00:02:06,810 --> 00:02:10,229
problem I'm trying to solve right so

54
00:02:08,220 --> 00:02:12,810
this is my friend GC he works at Dropbox

55
00:02:10,229 --> 00:02:13,210
in the marketing team GC is awesome I

56
00:02:12,810 --> 00:02:16,240
love

57
00:02:13,210 --> 00:02:17,920
you know I'd do anything for him and and

58
00:02:16,240 --> 00:02:20,560
one day he came to me and said can we

59
00:02:17,920 --> 00:02:22,480
run a CMS content management system on

60
00:02:20,560 --> 00:02:24,370
slash Enterprise now how many of you

61
00:02:22,480 --> 00:02:26,950
know what a CMS is or what content

62
00:02:24,370 --> 00:02:29,590
management systems are yeah so how many

63
00:02:26,950 --> 00:02:33,310
of you smile and are charmed at the

64
00:02:29,590 --> 00:02:36,550
thought of CMS's and so you know my

65
00:02:33,310 --> 00:02:39,250
reaction was like that and and GC had to

66
00:02:36,550 --> 00:02:41,770
his credit a simple idea he was saying

67
00:02:39,250 --> 00:02:44,380
like look nginx the slash we're out

68
00:02:41,770 --> 00:02:46,330
upstream to a rap server and let's just

69
00:02:44,380 --> 00:02:48,579
tell nginx if it's slash Enterprise go

70
00:02:46,330 --> 00:02:51,580
to the CMS it sounds easy like right

71
00:02:48,580 --> 00:02:53,470
like that's not very hard I'm in

72
00:02:51,580 --> 00:02:57,250
security my reaction was more like

73
00:02:53,470 --> 00:02:59,620
that's you do not simply do that and I

74
00:02:57,250 --> 00:03:02,860
started off with this the Dropbox

75
00:02:59,620 --> 00:03:04,540
rewards program you know so Dropbox is

76
00:03:02,860 --> 00:03:05,920
one of the best I think best bug

77
00:03:04,540 --> 00:03:08,049
bounties but also one of the highest bug

78
00:03:05,920 --> 00:03:09,280
bounties in on the internet so our bug

79
00:03:08,050 --> 00:03:11,260
bounties are higher than most of our

80
00:03:09,280 --> 00:03:12,490
competitors and so we pay out like

81
00:03:11,260 --> 00:03:14,140
thirty three thousand dollars roughly

82
00:03:12,490 --> 00:03:16,870
the numbers are weird because we only

83
00:03:14,140 --> 00:03:19,269
pay out in cubes because box you know

84
00:03:16,870 --> 00:03:20,590
but but but roughly thirty three

85
00:03:19,270 --> 00:03:23,500
thousand when it comes to bounties for

86
00:03:20,590 --> 00:03:25,450
RCE for example or cross-site scripting

87
00:03:23,500 --> 00:03:27,430
is roughly twelve thousand and so that's

88
00:03:25,450 --> 00:03:29,410
significant chunk of money right and and

89
00:03:27,430 --> 00:03:31,810
when he when I look at this

90
00:03:29,410 --> 00:03:33,340
architectural diagram the main app

91
00:03:31,810 --> 00:03:34,840
server the Dropbox app server that

92
00:03:33,340 --> 00:03:36,880
security engineering has worked on has

93
00:03:34,840 --> 00:03:39,070
all these features you know we have CSP

94
00:03:36,880 --> 00:03:40,690
ORM same side like pretty much every

95
00:03:39,070 --> 00:03:42,459
modern apps like feature you can think

96
00:03:40,690 --> 00:03:43,630
of we probably have adopted right

97
00:03:42,460 --> 00:03:46,270
because we take security pretty

98
00:03:43,630 --> 00:03:48,010
seriously at Dropbox and we believe in

99
00:03:46,270 --> 00:03:50,260
Defense's in depth and so we have a lot

100
00:03:48,010 --> 00:03:52,989
of this stuff stuff locked down and I

101
00:03:50,260 --> 00:03:54,850
think about the CF CMS I don't know

102
00:03:52,990 --> 00:03:57,130
what's the state so then let's do a

103
00:03:54,850 --> 00:03:59,140
quick google right like go to google and

104
00:03:57,130 --> 00:04:02,140
ask hey on the OSS security mailing list

105
00:03:59,140 --> 00:04:04,510
how has how has CMS fared and there's a

106
00:04:02,140 --> 00:04:07,119
long list of issues many of them are

107
00:04:04,510 --> 00:04:09,540
sees an XSS if I look at Drupal which is

108
00:04:07,120 --> 00:04:12,760
one of the most popular CMS is out there

109
00:04:09,540 --> 00:04:14,109
lot of issues most of them XSS but

110
00:04:12,760 --> 00:04:16,089
definitely a bunch of remote code

111
00:04:14,110 --> 00:04:17,890
execution vulnerabilities and that would

112
00:04:16,089 --> 00:04:19,750
be a tremendous risk for Dropbox to

113
00:04:17,890 --> 00:04:24,310
adopt right it's really unacceptable

114
00:04:19,750 --> 00:04:26,060
right like so so I was I like to think

115
00:04:24,310 --> 00:04:28,430
of myself as

116
00:04:26,060 --> 00:04:30,590
like look this is not okay this is

117
00:04:28,430 --> 00:04:32,870
pretty dangerous I really cannot be

118
00:04:30,590 --> 00:04:34,190
comfortable with this but but the thing

119
00:04:32,870 --> 00:04:36,230
about Dropbox security is we pride

120
00:04:34,190 --> 00:04:38,660
ourselves culturally on what we call

121
00:04:36,230 --> 00:04:40,669
solving for yes right like we don't like

122
00:04:38,660 --> 00:04:42,050
to say no we like to say yes let's do it

123
00:04:40,669 --> 00:04:43,909
this way let's figure out a way to do it

124
00:04:42,050 --> 00:04:45,680
right and so we started thinking and we

125
00:04:43,910 --> 00:04:47,360
said like maybe we can do something here

126
00:04:45,680 --> 00:04:49,639
right like maybe there is some nugget of

127
00:04:47,360 --> 00:04:51,260
an idea that we can adopt here and the

128
00:04:49,639 --> 00:04:53,510
the nugget of an idea comes from this

129
00:04:51,260 --> 00:04:56,240
classic idea of compartmentalization or

130
00:04:53,510 --> 00:04:58,400
isolation this is a slide I found on

131
00:04:56,240 --> 00:04:59,540
Google on like fire compartments so so

132
00:04:58,400 --> 00:05:01,609
you know you have compartments and

133
00:04:59,540 --> 00:05:03,860
buildings to limit the damage of fire

134
00:05:01,610 --> 00:05:08,060
and so similarly we can do something

135
00:05:03,860 --> 00:05:10,640
similar on on this CMS right and so so

136
00:05:08,060 --> 00:05:12,470
you take this architecture and you strip

137
00:05:10,640 --> 00:05:14,780
all sensitive cookies before making the

138
00:05:12,470 --> 00:05:17,450
request to the to the app server and

139
00:05:14,780 --> 00:05:20,270
then you put to the CMS you put the CMS

140
00:05:17,450 --> 00:05:23,060
in a completely isolated AWS VPC fully

141
00:05:20,270 --> 00:05:24,590
different from our main main app server

142
00:05:23,060 --> 00:05:26,630
and everything and you put very heavy

143
00:05:24,590 --> 00:05:28,820
firewall sandbox saying monitoring

144
00:05:26,630 --> 00:05:31,010
everything all the security things you

145
00:05:28,820 --> 00:05:32,990
can throw on top of it you lock it down

146
00:05:31,010 --> 00:05:36,140
right and so in terms of fire

147
00:05:32,990 --> 00:05:38,570
compartments if that burns nothing bad

148
00:05:36,140 --> 00:05:40,070
can happen right like it can't really

149
00:05:38,570 --> 00:05:41,840
hit our main app servers it can't hit

150
00:05:40,070 --> 00:05:44,210
our databases it can't hit like it can't

151
00:05:41,840 --> 00:05:46,789
really do anything the vbc the VPC the

152
00:05:44,210 --> 00:05:48,890
AWS VPC has nothing in it and so it's

153
00:05:46,789 --> 00:05:50,300
pretty locked down does this make sense

154
00:05:48,890 --> 00:05:52,400
I've been moving very quickly but this

155
00:05:50,300 --> 00:05:53,900
is all preload so you know you put the

156
00:05:52,400 --> 00:05:54,830
CMS in someplace far away and you close

157
00:05:53,900 --> 00:05:58,250
your eyes and hope that it doesn't

158
00:05:54,830 --> 00:06:00,890
nothing happens right and and so then is

159
00:05:58,250 --> 00:06:03,110
like are we done and as you can see from

160
00:06:00,890 --> 00:06:07,370
the image at the end we're definitely

161
00:06:03,110 --> 00:06:10,280
not done the reason we're not done is if

162
00:06:07,370 --> 00:06:13,310
if I think about how the browser sees

163
00:06:10,280 --> 00:06:16,549
sees the this architecture the browser

164
00:06:13,310 --> 00:06:18,590
does not know about AWS VP sees what all

165
00:06:16,550 --> 00:06:21,110
is happening in behind the scenes for

166
00:06:18,590 --> 00:06:23,390
the browser the CMS the app server

167
00:06:21,110 --> 00:06:28,220
everything is on dub-dub-dub dropbox.com

168
00:06:23,390 --> 00:06:30,260
it's all the single origin and so for

169
00:06:28,220 --> 00:06:33,200
the browser if there's an XSS in the CMS

170
00:06:30,260 --> 00:06:35,630
and it's as good as an XSS in the main

171
00:06:33,200 --> 00:06:37,280
dropbox.com application browser does not

172
00:06:35,630 --> 00:06:39,320
compartmentalize the browser does not

173
00:06:37,280 --> 00:06:39,859
isolate the browser everything is the

174
00:06:39,320 --> 00:06:41,840
same

175
00:06:39,860 --> 00:06:44,870
browser does not care it's a separate

176
00:06:41,840 --> 00:06:47,179
AWS VPC or anything like that and so

177
00:06:44,870 --> 00:06:49,490
this is where like you know thanks same

178
00:06:47,180 --> 00:06:52,849
origin policy right like you screw us

179
00:06:49,490 --> 00:06:56,030
over there this is horrible right so so

180
00:06:52,849 --> 00:06:59,960
even if we lock down the the CMS if the

181
00:06:56,030 --> 00:07:01,818
CMS has an XSS we are host and so okay

182
00:06:59,960 --> 00:07:04,878
how bad is the exercise right like so

183
00:07:01,819 --> 00:07:06,349
again OSS security CMS XSS lots and lots

184
00:07:04,879 --> 00:07:08,780
of issues that Drupal image I showed

185
00:07:06,349 --> 00:07:10,370
earlier half of all CV is reported in

186
00:07:08,780 --> 00:07:14,030
roughly half of all CVS reported on

187
00:07:10,370 --> 00:07:17,000
Drupal XSS so exercises in CMS is very

188
00:07:14,030 --> 00:07:19,280
very common right and it's easy to say

189
00:07:17,000 --> 00:07:20,750
what's the big deal who cares about

190
00:07:19,280 --> 00:07:22,099
cross-site scripting it's not like

191
00:07:20,750 --> 00:07:23,389
remote code execution it's not like

192
00:07:22,099 --> 00:07:25,909
sequel injection it's a client-side

193
00:07:23,389 --> 00:07:29,000
vulnerability and so what can XSS on

194
00:07:25,909 --> 00:07:31,520
Dropbox - for example and so the thing

195
00:07:29,000 --> 00:07:34,069
about XSS because most examples online

196
00:07:31,520 --> 00:07:35,539
are about alert people don't realize

197
00:07:34,069 --> 00:07:38,449
exercise is actually a really powerful

198
00:07:35,539 --> 00:07:39,590
one and vulnerability it can a cross

199
00:07:38,449 --> 00:07:41,449
site scripting one can allow the

200
00:07:39,590 --> 00:07:43,758
attacker to do everything a user can do

201
00:07:41,449 --> 00:07:45,319
and in the case of Dropbox you know read

202
00:07:43,759 --> 00:07:47,300
the password as you type it authorized

203
00:07:45,319 --> 00:07:48,979
API apps that steal your data share all

204
00:07:47,300 --> 00:07:51,080
your data publicly delete all your files

205
00:07:48,979 --> 00:07:53,300
permanently delete all your files all

206
00:07:51,080 --> 00:07:55,099
these things can be done completely with

207
00:07:53,300 --> 00:07:58,580
a cross-site scripting attack so you

208
00:07:55,099 --> 00:08:00,319
know that's really not okay we're really

209
00:07:58,580 --> 00:08:02,630
not happy with this sort of risk that's

210
00:08:00,319 --> 00:08:05,389
why on the main Dropbox website you know

211
00:08:02,630 --> 00:08:07,159
our bounty for an XSS is roughly $12,000

212
00:08:05,389 --> 00:08:09,289
we have CSP we have react we have

213
00:08:07,159 --> 00:08:13,310
multiple layers of Defense's because XSS

214
00:08:09,289 --> 00:08:14,810
is really bad on Dropbox so that's

215
00:08:13,310 --> 00:08:19,550
terrifying we don't want to end up with

216
00:08:14,810 --> 00:08:21,169
this so what do we do now people

217
00:08:19,550 --> 00:08:24,770
following tainha before we jump into the

218
00:08:21,169 --> 00:08:26,060
solution all right again we started

219
00:08:24,770 --> 00:08:27,940
thinking okay is there something we can

220
00:08:26,060 --> 00:08:32,089
do in terms of compartmentalization

221
00:08:27,940 --> 00:08:34,578
isolation and again the fire compartment

222
00:08:32,089 --> 00:08:39,589
idea came in mind so the easiest way to

223
00:08:34,578 --> 00:08:41,000
isolate to compartmentalize is to to do

224
00:08:39,589 --> 00:08:42,260
something like a separate domain right

225
00:08:41,000 --> 00:08:43,789
like you must have seen this right that

226
00:08:42,260 --> 00:08:45,949
you create a new website right instead

227
00:08:43,789 --> 00:08:48,470
of using Dropbox com run the CMS on dbx

228
00:08:45,949 --> 00:08:50,149
marketing.com completely separately I

229
00:08:48,470 --> 00:08:52,160
mean completely isolated domains so the

230
00:08:50,149 --> 00:08:53,960
browser treats it as a seperate origin

231
00:08:52,160 --> 00:08:57,110
any exercise on DBA

232
00:08:53,960 --> 00:08:58,550
marketing.com cannot hit dropbox.com is

233
00:08:57,110 --> 00:09:06,050
a classic technique used in many many

234
00:08:58,550 --> 00:09:08,990
places this is not great for SEO or

235
00:09:06,050 --> 00:09:11,689
branding right like it you're you're

236
00:09:08,990 --> 00:09:13,730
spreading your SEO positivity on

237
00:09:11,690 --> 00:09:15,140
multiple domains right so it doesn't

238
00:09:13,730 --> 00:09:18,650
work well for search ranking and stuff

239
00:09:15,140 --> 00:09:20,300
and subdomains feel slightly better so

240
00:09:18,650 --> 00:09:22,610
maybe we could do marketing dropbox.com

241
00:09:20,300 --> 00:09:25,640
but then you're not actually getting

242
00:09:22,610 --> 00:09:27,260
full isolation and and GC my friend GC

243
00:09:25,640 --> 00:09:29,090
initially wanted to run it on slash

244
00:09:27,260 --> 00:09:30,800
enterprise he wanted it to be

245
00:09:29,090 --> 00:09:34,010
dropbox.com slash enterprises that's

246
00:09:30,800 --> 00:09:35,359
pretty that's a good SEO and to move it

247
00:09:34,010 --> 00:09:37,460
to a completely separate site or a

248
00:09:35,360 --> 00:09:39,380
completely separate sub domain kinda is

249
00:09:37,460 --> 00:09:43,040
saying no to him which is not a great

250
00:09:39,380 --> 00:09:45,890
feeling on a side note I also point out

251
00:09:43,040 --> 00:09:48,079
that you know a security I do feel like

252
00:09:45,890 --> 00:09:49,310
we all like a lot of the communities as

253
00:09:48,080 --> 00:09:51,230
like a separate domains are great you

254
00:09:49,310 --> 00:09:54,020
should put in a separate domain I do

255
00:09:51,230 --> 00:09:55,700
wonder whether that's actually true do

256
00:09:54,020 --> 00:09:56,689
we really want to train our users that

257
00:09:55,700 --> 00:09:58,340
there are all these different websites

258
00:09:56,690 --> 00:10:02,030
with different weird names that are

259
00:09:58,340 --> 00:10:03,530
actually actually trusted those are

260
00:10:02,030 --> 00:10:04,790
actually valid right it makes us feel

261
00:10:03,530 --> 00:10:06,980
better in terms of cross-site scripting

262
00:10:04,790 --> 00:10:09,560
but it I'm not really sure it helps our

263
00:10:06,980 --> 00:10:11,450
users right as an example you know if

264
00:10:09,560 --> 00:10:12,560
these are the site list of sites and

265
00:10:11,450 --> 00:10:14,410
there are companies I'm not going to

266
00:10:12,560 --> 00:10:17,479
name them who have something similar

267
00:10:14,410 --> 00:10:18,800
because they isolate every domain which

268
00:10:17,480 --> 00:10:21,760
one of these is the phishing site

269
00:10:18,800 --> 00:10:21,760
anyone have a guess

270
00:10:26,589 --> 00:10:30,700
it's actually company blogs calm and

271
00:10:28,660 --> 00:10:36,939
it's a simple fishing because the L is

272
00:10:30,700 --> 00:10:38,680
actually a capital I and like yeah why

273
00:10:36,940 --> 00:10:40,540
would he use it notice right like in

274
00:10:38,680 --> 00:10:42,250
your training users that like Oh company

275
00:10:40,540 --> 00:10:45,069
comm company marketing calm company

276
00:10:42,250 --> 00:10:47,260
customer care calm is legit but company

277
00:10:45,070 --> 00:10:47,740
blogger.com when the L is I is not like

278
00:10:47,260 --> 00:10:50,980
that's insane

279
00:10:47,740 --> 00:10:52,779
right and and I just don't I'm not

280
00:10:50,980 --> 00:10:54,339
personally a fan of like us this this

281
00:10:52,779 --> 00:10:56,260
massive increase in the list of domains

282
00:10:54,339 --> 00:11:00,250
I I do wonder about the security rest

283
00:10:56,260 --> 00:11:03,040
there so we go down to our core problem

284
00:11:00,250 --> 00:11:05,800
again can we serve the CMS page that

285
00:11:03,040 --> 00:11:06,819
could have an exercise from dub-dub-dub

286
00:11:05,800 --> 00:11:09,219
dropbox.com

287
00:11:06,820 --> 00:11:11,470
Without Really destroying our security

288
00:11:09,220 --> 00:11:12,730
guarantees right that's the question

289
00:11:11,470 --> 00:11:16,420
that I'm really trying to answer what

290
00:11:12,730 --> 00:11:18,370
can we do here so 2018 you're a web

291
00:11:16,420 --> 00:11:19,930
application person and you need to solve

292
00:11:18,370 --> 00:11:22,720
some security problem in web app sec

293
00:11:19,930 --> 00:11:26,439
what spec is the answer to anything

294
00:11:22,720 --> 00:11:29,470
security in Web Apps X in 2018 well it's

295
00:11:26,440 --> 00:11:31,839
it's CSP everything you want to do is in

296
00:11:29,470 --> 00:11:34,270
content security policy and so so

297
00:11:31,839 --> 00:11:35,890
thankfully there is a thing in CSP for

298
00:11:34,270 --> 00:11:42,400
this that I want you to talk about great

299
00:11:35,890 --> 00:11:44,500
and this is called the CSP sandbox how

300
00:11:42,400 --> 00:11:49,329
many people have seen or used the iframe

301
00:11:44,500 --> 00:11:51,430
sandbox awesome so the CSP sandbox is an

302
00:11:49,330 --> 00:11:54,880
extension of the iframe sandbox and I'll

303
00:11:51,430 --> 00:11:57,430
explain both in in a minute but but the

304
00:11:54,880 --> 00:11:58,990
basic idea of CSP sandbox is to set the

305
00:11:57,430 --> 00:12:01,989
iframe sandbox with a header so you can

306
00:11:58,990 --> 00:12:04,060
send it as part of the page and all that

307
00:12:01,990 --> 00:12:06,520
the sandbox tells the browser is that

308
00:12:04,060 --> 00:12:08,500
read this page as if it's a random null

309
00:12:06,520 --> 00:12:10,240
origin right treat this page as it's an

310
00:12:08,500 --> 00:12:12,450
unknown randomized origin I like to

311
00:12:10,240 --> 00:12:14,410
think of it as a 128-bit random origin

312
00:12:12,450 --> 00:12:15,970
inside if you dig into Chrome and

313
00:12:14,410 --> 00:12:18,910
Firefox code it's actually treated as

314
00:12:15,970 --> 00:12:21,610
the null origin but but think of it like

315
00:12:18,910 --> 00:12:23,199
a random 128-bit origin and a random

316
00:12:21,610 --> 00:12:24,339
128-bit origin is never equal to any

317
00:12:23,200 --> 00:12:26,020
other origin right like it's a

318
00:12:24,339 --> 00:12:27,520
completely random number and so that's

319
00:12:26,020 --> 00:12:29,199
how the null origin or the sandboxed

320
00:12:27,520 --> 00:12:30,880
origin is implemented in browsers it is

321
00:12:29,200 --> 00:12:33,400
never equal to any other origin it's

322
00:12:30,880 --> 00:12:34,600
always cross origin to everything and so

323
00:12:33,400 --> 00:12:37,390
if you think in terms of same origin

324
00:12:34,600 --> 00:12:37,990
policy and XSS unlike a null origin

325
00:12:37,390 --> 00:12:39,580
cannot really

326
00:12:37,990 --> 00:12:41,170
anything bad because it's completely

327
00:12:39,580 --> 00:12:48,730
different from every origin it can it's

328
00:12:41,170 --> 00:12:50,949
not equal to W dropbox.com no I mean

329
00:12:48,730 --> 00:12:54,640
there's a nuance there but yeah I will

330
00:12:50,950 --> 00:12:56,230
get to that say oh yeah so the question

331
00:12:54,640 --> 00:12:59,800
was can it be equal to another null

332
00:12:56,230 --> 00:13:01,420
origin and if you look I'll get to it I

333
00:12:59,800 --> 00:13:03,069
mean just the T layer is like except for

334
00:13:01,420 --> 00:13:04,930
course everywhere else it's not equal to

335
00:13:03,070 --> 00:13:07,270
another nel origin so if you have two

336
00:13:04,930 --> 00:13:09,060
iframes let's say that our null origins

337
00:13:07,270 --> 00:13:11,260
they can't actually script each other

338
00:13:09,060 --> 00:13:12,520
they can't like reach into each other

339
00:13:11,260 --> 00:13:15,040
for example if you have two iframes that

340
00:13:12,520 --> 00:13:16,480
are both dropbox.com they can go in and

341
00:13:15,040 --> 00:13:17,649
touch either each other's javascript and

342
00:13:16,480 --> 00:13:20,020
variables and everything but if you have

343
00:13:17,649 --> 00:13:21,160
two iframes that are none they can't

344
00:13:20,020 --> 00:13:23,350
actually go into each other and touch

345
00:13:21,160 --> 00:13:25,449
each other but but there is an exception

346
00:13:23,350 --> 00:13:26,830
in course but other than that it's

347
00:13:25,450 --> 00:13:29,790
mostly every neural origin is also

348
00:13:26,830 --> 00:13:31,720
separate from every other nail origin

349
00:13:29,790 --> 00:13:33,010
does that make sense this is a really

350
00:13:31,720 --> 00:13:35,260
important like part of the presentation

351
00:13:33,010 --> 00:13:38,020
that the there is this concept of the

352
00:13:35,260 --> 00:13:40,180
null origin that you can use and by

353
00:13:38,020 --> 00:13:42,279
setting a CSP sandbox header you can

354
00:13:40,180 --> 00:13:43,870
tell the browser hey treat this as the

355
00:13:42,279 --> 00:13:44,500
Nullah region which is cross-origin from

356
00:13:43,870 --> 00:13:47,800
everything

357
00:13:44,500 --> 00:13:51,820
sorry question yeah so that's the next

358
00:13:47,800 --> 00:13:53,140
night great so this is this is one of

359
00:13:51,820 --> 00:13:55,570
the best parts about this header is

360
00:13:53,140 --> 00:13:59,649
actually it's widely supported as early

361
00:13:55,570 --> 00:14:01,089
as IE 10 supports CSP sandbox and i-10

362
00:13:59,649 --> 00:14:03,730
you have to do X - content security

363
00:14:01,089 --> 00:14:05,440
policy to get it to work but but if you

364
00:14:03,730 --> 00:14:07,690
dig around you can get the like right

365
00:14:05,440 --> 00:14:11,500
set of headers so that you get sandbox

366
00:14:07,690 --> 00:14:12,880
origins on all browsers which is kind of

367
00:14:11,500 --> 00:14:15,070
cool right like as security

368
00:14:12,880 --> 00:14:18,760
professionals there aren't that many

369
00:14:15,070 --> 00:14:20,560
specs that you can rely on that work XSS

370
00:14:18,760 --> 00:14:23,890
works on all browsers pretty reliably

371
00:14:20,560 --> 00:14:32,079
but but security specs it's rare to find

372
00:14:23,890 --> 00:14:33,670
one so it's pretty great right everyone

373
00:14:32,079 --> 00:14:36,279
with me I'm moving fast because I know

374
00:14:33,670 --> 00:14:39,279
I'm holding back from the snack so so I

375
00:14:36,279 --> 00:14:44,829
don't wanna I'm balancing understanding

376
00:14:39,279 --> 00:14:46,420
and and you will hit me if I CSV sandbox

377
00:14:44,829 --> 00:14:48,579
not CSP support yeah

378
00:14:46,420 --> 00:14:50,709
ie 10 does not support CSP for example

379
00:14:48,579 --> 00:14:51,410
it only supports sandbox we a CSP header

380
00:14:50,709 --> 00:14:56,899
but none of the other

381
00:14:51,410 --> 00:15:02,750
CSP primitives instead of yeah that was

382
00:14:56,899 --> 00:15:04,399
i9 I take it I think but yeah sorry so

383
00:15:02,750 --> 00:15:06,589
the question was is this just CSP

384
00:15:04,399 --> 00:15:09,620
sandbox support or is this CSP support

385
00:15:06,589 --> 00:15:11,209
and ie10 does not support remaining

386
00:15:09,620 --> 00:15:17,050
parts of CSP it only supports CSP

387
00:15:11,209 --> 00:15:17,050
sandbox do you have a questioner

388
00:15:22,340 --> 00:15:26,280
so so the question was did I consider

389
00:15:24,870 --> 00:15:27,420
using extreme options it's trying to

390
00:15:26,280 --> 00:15:29,400
solve a different problem if that's

391
00:15:27,420 --> 00:15:31,770
about allowing framing whereas this is

392
00:15:29,400 --> 00:15:34,560
about saying which origin to run this

393
00:15:31,770 --> 00:15:36,689
page in so like different problem yeah

394
00:15:34,560 --> 00:15:38,189
so we do use X frame options everywhere

395
00:15:36,690 --> 00:15:39,900
right we use frame ancestor CSP

396
00:15:38,190 --> 00:15:42,780
everywhere that's for like clickjacking

397
00:15:39,900 --> 00:15:45,240
and who's allowed to frame this is about

398
00:15:42,780 --> 00:15:46,949
this null originals about what principle

399
00:15:45,240 --> 00:15:49,710
to like in terms of operating systems

400
00:15:46,950 --> 00:15:52,350
which user ID to run this app in that's

401
00:15:49,710 --> 00:15:59,670
kind of closer to what this is trying to

402
00:15:52,350 --> 00:16:01,290
achieve all right so what is this

403
00:15:59,670 --> 00:16:02,640
magical header that you can set all

404
00:16:01,290 --> 00:16:04,469
right so you start with content security

405
00:16:02,640 --> 00:16:07,110
policy of course and then you say

406
00:16:04,470 --> 00:16:10,710
sandbox this does the browser run this

407
00:16:07,110 --> 00:16:13,350
page in a sandbox in the null origin you

408
00:16:10,710 --> 00:16:15,030
also want to say allow forms because by

409
00:16:13,350 --> 00:16:16,410
default the sandbox is super secure so

410
00:16:15,030 --> 00:16:18,569
it does not allow you in forms to work

411
00:16:16,410 --> 00:16:20,160
and because any reasonable page would

412
00:16:18,570 --> 00:16:23,790
usually have some form in our case the

413
00:16:20,160 --> 00:16:25,250
marketing page has a contact form you

414
00:16:23,790 --> 00:16:28,020
want that to work so you say allow forms

415
00:16:25,250 --> 00:16:29,880
then you also say allow scripts by

416
00:16:28,020 --> 00:16:31,860
default sandboxes cannot run any script

417
00:16:29,880 --> 00:16:33,360
so you say allow script to say it run it

418
00:16:31,860 --> 00:16:35,370
in the null origin but allow it to run

419
00:16:33,360 --> 00:16:36,900
some script in the null origin otherwise

420
00:16:35,370 --> 00:16:39,960
it's not a very interesting page it's a

421
00:16:36,900 --> 00:16:42,180
static page and then you also say allow

422
00:16:39,960 --> 00:16:43,680
tab top navigation sometimes when you

423
00:16:42,180 --> 00:16:45,359
are sandboxing an iframe you don't want

424
00:16:43,680 --> 00:16:47,790
to allow top navigation but in our page

425
00:16:45,360 --> 00:16:50,490
in our case we are unboxing the whole

426
00:16:47,790 --> 00:16:51,750
slash enterprise CMS so we do allow we

427
00:16:50,490 --> 00:16:53,940
do want it to navigate when a user

428
00:16:51,750 --> 00:16:56,790
clicks a link so you also say allow top

429
00:16:53,940 --> 00:16:59,130
navigation and and we also say allow

430
00:16:56,790 --> 00:17:00,780
pop-ups because if there's a contact us

431
00:16:59,130 --> 00:17:04,940
form there's often a pop-up that says go

432
00:17:00,780 --> 00:17:04,940
here to contact us yeah

433
00:17:07,190 --> 00:17:12,890
so there is no new domain right now so

434
00:17:09,230 --> 00:17:14,810
dropbox.com slash Enterprise is slash

435
00:17:12,890 --> 00:17:17,360
Enterprise but it's set as a header in

436
00:17:14,810 --> 00:17:19,069
this policy so concretely his what

437
00:17:17,359 --> 00:17:21,649
happens right so you make a request to

438
00:17:19,069 --> 00:17:24,109
dropbox.com if it's a request to like

439
00:17:21,650 --> 00:17:25,520
/foo it will go to the app server if

440
00:17:24,109 --> 00:17:27,770
it's a request to slash enterprise it

441
00:17:25,520 --> 00:17:30,110
will actually go to the CMS server in an

442
00:17:27,770 --> 00:17:31,490
isolated VPC firewalled off isolated

443
00:17:30,110 --> 00:17:34,370
like you know bad things could happen

444
00:17:31,490 --> 00:17:35,960
there and the server responds back with

445
00:17:34,370 --> 00:17:38,060
the HTML and we have a shim in the

446
00:17:35,960 --> 00:17:40,100
middle that adds a CSP header the

447
00:17:38,060 --> 00:17:42,129
previous CSP header i said content

448
00:17:40,100 --> 00:17:44,449
security policy sandbox blah blah blah

449
00:17:42,130 --> 00:17:46,700
so but this is slash and dub-dub-dub

450
00:17:44,450 --> 00:17:49,660
dropbox.com slash enterprise this is in

451
00:17:46,700 --> 00:17:53,540
another domain this is dropbox.com

452
00:17:49,660 --> 00:17:55,190
and when that request response goes all

453
00:17:53,540 --> 00:17:56,960
the way back to the browser a browser

454
00:17:55,190 --> 00:17:58,670
knows that treat because it came with

455
00:17:56,960 --> 00:18:00,230
the CSP sandbox header treat this as the

456
00:17:58,670 --> 00:18:03,980
null origin isolated from everything

457
00:18:00,230 --> 00:18:05,660
else and so even though it came from

458
00:18:03,980 --> 00:18:08,060
dropbox.com the browser is going to

459
00:18:05,660 --> 00:18:12,140
treat it as a random isolated null

460
00:18:08,060 --> 00:18:14,480
origin does that make sense all right so

461
00:18:12,140 --> 00:18:16,790
you do this and it works you go to

462
00:18:14,480 --> 00:18:18,530
dropbox.com slash enterprise and you can

463
00:18:16,790 --> 00:18:24,350
go right now if you want but actually

464
00:18:18,530 --> 00:18:26,060
don't my talk is great listen to me you

465
00:18:24,350 --> 00:18:27,409
go to dropbox.com slash enterprise and

466
00:18:26,060 --> 00:18:29,450
and this works right like this is a

467
00:18:27,410 --> 00:18:30,680
classic marketing page our marketing

468
00:18:29,450 --> 00:18:32,840
team has built it it has all sorts of

469
00:18:30,680 --> 00:18:34,880
widgets but it's on slash enterprise it

470
00:18:32,840 --> 00:18:37,580
does not have any of the privileges of

471
00:18:34,880 --> 00:18:39,410
code running on Dropbox com it cannot

472
00:18:37,580 --> 00:18:40,970
like you know change the user settings

473
00:18:39,410 --> 00:18:43,040
or anything like that it's completely

474
00:18:40,970 --> 00:18:44,570
isolated it is running script it is

475
00:18:43,040 --> 00:18:48,230
interactive but it does not have any

476
00:18:44,570 --> 00:18:49,550
privileges this is awesome like it's

477
00:18:48,230 --> 00:18:52,430
great I was feeling awesome

478
00:18:49,550 --> 00:18:55,669
but you know no no fairy tale ends that

479
00:18:52,430 --> 00:18:58,460
quickly so as soon as returned this on

480
00:18:55,670 --> 00:19:00,920
bugs everywhere like lots and lots of

481
00:18:58,460 --> 00:19:03,670
bugs why is that so you open up your

482
00:19:00,920 --> 00:19:06,740
chrome console and see what's happening

483
00:19:03,670 --> 00:19:09,260
and you get a bunch of these exceptions

484
00:19:06,740 --> 00:19:12,440
failed to read session storage failed to

485
00:19:09,260 --> 00:19:14,870
read the cookie property and and that

486
00:19:12,440 --> 00:19:16,880
makes sense the way a sandbox is

487
00:19:14,870 --> 00:19:18,320
designed is that it is a null origin it

488
00:19:16,880 --> 00:19:20,240
does not have access to cookies of

489
00:19:18,320 --> 00:19:20,658
dropbox.com it does not have access to

490
00:19:20,240 --> 00:19:23,080
locals

491
00:19:20,659 --> 00:19:25,009
does not have access to session storage

492
00:19:23,080 --> 00:19:26,960
another thing that's not in this list

493
00:19:25,009 --> 00:19:29,029
that break is xmlhttprequest because

494
00:19:26,960 --> 00:19:33,729
every XML HTTP request you make is

495
00:19:29,029 --> 00:19:33,729
cross-origin all the xhr stopped working

496
00:19:33,789 --> 00:19:38,359
so every xhr is a cause request it

497
00:19:36,470 --> 00:19:39,769
breaks all storage primitives breaks so

498
00:19:38,359 --> 00:19:41,090
the page kind of works but you want to

499
00:19:39,769 --> 00:19:43,279
do something interesting beyond just

500
00:19:41,090 --> 00:19:44,418
like fancy animations inside the page

501
00:19:43,279 --> 00:19:46,220
you want to make a request you want to

502
00:19:44,419 --> 00:19:49,009
log something you want to store some

503
00:19:46,220 --> 00:19:50,659
state that stops working so it's not

504
00:19:49,009 --> 00:19:52,909
great right like a proper CMS will

505
00:19:50,659 --> 00:19:54,409
probably wanna use some state storage a

506
00:19:52,909 --> 00:20:04,759
proper CMS will probably want to make an

507
00:19:54,409 --> 00:20:06,799
xhr and this sucks and so we needed to

508
00:20:04,759 --> 00:20:10,399
do something here and it was time to you

509
00:20:06,799 --> 00:20:11,840
know start hacking and so so these are

510
00:20:10,399 --> 00:20:13,369
our two problems right like getting XML

511
00:20:11,840 --> 00:20:15,080
HTTP request to work and getting state

512
00:20:13,369 --> 00:20:19,158
storage to work and let's tackle them

513
00:20:15,080 --> 00:20:21,408
one by one so XML HTTP request what we

514
00:20:19,159 --> 00:20:23,419
did for fixing the XML HTTP request is

515
00:20:21,409 --> 00:20:26,299
you just redefine the XML HTTP request

516
00:20:23,419 --> 00:20:28,700
constructor to implicitly add with

517
00:20:26,299 --> 00:20:30,519
credentials equal to two if you're

518
00:20:28,700 --> 00:20:32,960
hitting dub-dub-dub contre box.com

519
00:20:30,519 --> 00:20:35,389
because it was a cause request it wasn't

520
00:20:32,960 --> 00:20:36,889
adding the cookies by default when

521
00:20:35,389 --> 00:20:39,139
running from the null origin so you tell

522
00:20:36,889 --> 00:20:40,340
you redefine XML HTTP request descrip is

523
00:20:39,139 --> 00:20:42,289
a great language you can redefine all

524
00:20:40,340 --> 00:20:46,639
the constructors you want and like shim

525
00:20:42,289 --> 00:20:48,470
them so I and so you redefine it to say

526
00:20:46,639 --> 00:20:50,570
like hey implicitly add with credentials

527
00:20:48,470 --> 00:20:52,909
equal to true if it's making a request

528
00:20:50,570 --> 00:20:54,499
to dropbox.com so this kind of starts

529
00:20:52,909 --> 00:20:57,340
matching the same origin X HR behavior

530
00:20:54,499 --> 00:21:00,889
and so now you make a course request to

531
00:20:57,340 --> 00:21:02,899
dropbox.com with the origin null because

532
00:21:00,889 --> 00:21:04,549
again this is running in the original so

533
00:21:02,899 --> 00:21:06,320
the course request won't go up with

534
00:21:04,549 --> 00:21:09,799
origin dropbox.com it will go in with

535
00:21:06,320 --> 00:21:12,049
excuse me origin null and the server can

536
00:21:09,799 --> 00:21:14,450
then respond with access control allow

537
00:21:12,049 --> 00:21:17,359
origin null for the client to read the

538
00:21:14,450 --> 00:21:18,590
response how many people have played

539
00:21:17,359 --> 00:21:22,309
with course and know why this is a

540
00:21:18,590 --> 00:21:24,459
terrible idea okay so yeah this is a

541
00:21:22,309 --> 00:21:26,720
very very bad idea do not do this

542
00:21:24,460 --> 00:21:29,359
because when you say access control

543
00:21:26,720 --> 00:21:31,039
allow original you are saying any null

544
00:21:29,359 --> 00:21:34,009
origin on the Internet can read this

545
00:21:31,039 --> 00:21:34,580
response and so any website on the

546
00:21:34,009 --> 00:21:36,679
Internet can

547
00:21:34,580 --> 00:21:38,510
hanboks a page and hit this end point

548
00:21:36,679 --> 00:21:40,130
and read the response this basically

549
00:21:38,510 --> 00:21:41,750
destroys the web security model

550
00:21:40,130 --> 00:21:43,610
completely

551
00:21:41,750 --> 00:21:48,529
I mean model it's some whatever web

552
00:21:43,610 --> 00:21:50,389
security model we have so and so what we

553
00:21:48,529 --> 00:21:52,429
did was okay in addition to implicitly

554
00:21:50,390 --> 00:21:55,640
redefining with with credentials to true

555
00:21:52,429 --> 00:21:59,120
we can also implicitly add to the xhr as

556
00:21:55,640 --> 00:22:01,970
CSRF token this CSRF token only allows

557
00:21:59,120 --> 00:22:03,559
you to make the request and so we

558
00:22:01,970 --> 00:22:05,240
actually use a derived CSRF token we

559
00:22:03,559 --> 00:22:07,428
derive an etch mat from the actual CSRF

560
00:22:05,240 --> 00:22:09,409
token and add it to our request even get

561
00:22:07,429 --> 00:22:11,090
requests even ahead requests even like

562
00:22:09,409 --> 00:22:14,480
anything and everything every uri has to

563
00:22:11,090 --> 00:22:16,789
have this and the server even before it

564
00:22:14,480 --> 00:22:18,620
forwards the request to the CMS or the

565
00:22:16,789 --> 00:22:20,090
app server it will just say do you have

566
00:22:18,620 --> 00:22:22,699
the right CSRF token if not I'm just

567
00:22:20,090 --> 00:22:24,830
gonna fail the request what this

568
00:22:22,700 --> 00:22:26,809
guarantees is only our pages know this a

569
00:22:24,830 --> 00:22:28,399
set of token so no other website on the

570
00:22:26,809 --> 00:22:30,470
Internet can actually make the request

571
00:22:28,399 --> 00:22:33,949
and so the access controller Laur is a

572
00:22:30,470 --> 00:22:35,360
null isn't any more a problem but it is

573
00:22:33,950 --> 00:22:38,149
important that you have to protect all

574
00:22:35,360 --> 00:22:45,439
requests which is different from the

575
00:22:38,149 --> 00:22:47,870
classic web security model so it's kind

576
00:22:45,440 --> 00:22:49,490
of works now you can say you have to do

577
00:22:47,870 --> 00:22:51,830
this additional thing so we were our

578
00:22:49,490 --> 00:22:53,720
earlier only adding the CSP headers but

579
00:22:51,830 --> 00:22:56,600
we'll also add the JavaScript shims to

580
00:22:53,720 --> 00:22:58,250
the HTML after the enterprise EMS

581
00:22:56,600 --> 00:23:00,980
response comes in and redefine in XML

582
00:22:58,250 --> 00:23:03,710
HTTP requests have all those things and

583
00:23:00,980 --> 00:23:06,350
then modify the forwarder to say if the

584
00:23:03,710 --> 00:23:11,179
CSR if it's an XML HTTP request the CSRF

585
00:23:06,350 --> 00:23:13,010
token does not match just fail so now

586
00:23:11,179 --> 00:23:18,620
you have kind of made XML HTTP request

587
00:23:13,010 --> 00:23:19,970
kind of start working fine you can also

588
00:23:18,620 --> 00:23:21,379
use this to talk directly to the app

589
00:23:19,970 --> 00:23:22,700
server because often if you are building

590
00:23:21,380 --> 00:23:23,929
something like slash enterprise some

591
00:23:22,700 --> 00:23:25,669
marketing website you actually want to

592
00:23:23,929 --> 00:23:28,639
ask the App server some questions right

593
00:23:25,669 --> 00:23:30,679
is this user in our case is this user a

594
00:23:28,639 --> 00:23:32,029
registered user even that like the CMS

595
00:23:30,679 --> 00:23:35,090
does not know because we're stripping

596
00:23:32,029 --> 00:23:36,409
all sensitive data but it's like we you

597
00:23:35,090 --> 00:23:38,658
know security can evaluate and say like

598
00:23:36,409 --> 00:23:39,919
it's a fine risk to accept that the CMS

599
00:23:38,659 --> 00:23:41,809
can learn whether the user is a

600
00:23:39,919 --> 00:23:43,159
registered user so you can use this

601
00:23:41,809 --> 00:23:45,520
trick to allow the CMS to learn that

602
00:23:43,159 --> 00:23:45,520
also

603
00:23:48,820 --> 00:23:53,960
alright so the other problem we had was

604
00:23:52,310 --> 00:23:56,210
state storage another region has no

605
00:23:53,960 --> 00:23:57,670
place to store any state no cookies no

606
00:23:56,210 --> 00:24:00,080
local storage enough session storage

607
00:23:57,670 --> 00:24:01,730
let's focus morally mainly on cookies

608
00:24:00,080 --> 00:24:02,270
the way we fix cookies we'll fix

609
00:24:01,730 --> 00:24:05,600
everything

610
00:24:02,270 --> 00:24:09,590
local storage session storage also also

611
00:24:05,600 --> 00:24:12,020
relaxing cookies so we already have a

612
00:24:09,590 --> 00:24:14,419
place to store state right the network

613
00:24:12,020 --> 00:24:16,160
stack the cookie stack has the ability

614
00:24:14,420 --> 00:24:19,730
to store state the actual cookies on

615
00:24:16,160 --> 00:24:21,350
dropbox.com so now at the proxy merely

616
00:24:19,730 --> 00:24:23,450
define document dot cookie as a

617
00:24:21,350 --> 00:24:26,560
dictionary literally say document dot

618
00:24:23,450 --> 00:24:28,880
cookie equal to json dictionary with

619
00:24:26,560 --> 00:24:31,960
defined property get as defined property

620
00:24:28,880 --> 00:24:34,880
setters that match the cookie behavior

621
00:24:31,960 --> 00:24:36,470
if the document if the page the CMS page

622
00:24:34,880 --> 00:24:39,590
running in null origin tries to update

623
00:24:36,470 --> 00:24:41,450
the cookie you update the dictionary you

624
00:24:39,590 --> 00:24:43,550
don't actually update the actual cookie

625
00:24:41,450 --> 00:24:45,560
state you just update the dictionary but

626
00:24:43,550 --> 00:24:47,510
to persist the state you make an XML

627
00:24:45,560 --> 00:24:48,860
HTTP request to the server and tell the

628
00:24:47,510 --> 00:24:50,930
server hey can you set this cookie and

629
00:24:48,860 --> 00:24:54,379
the server sets the cookie in process

630
00:24:50,930 --> 00:24:56,360
that state so concretely imagine I did

631
00:24:54,380 --> 00:25:00,200
document dot cookie a equal to be inside

632
00:24:56,360 --> 00:25:01,639
the CMS so first you know you redefine

633
00:25:00,200 --> 00:25:05,360
document dot cookie as a JavaScript

634
00:25:01,640 --> 00:25:07,220
dictionary or whatever and when I do

635
00:25:05,360 --> 00:25:09,139
document dot cookie a equal to B the

636
00:25:07,220 --> 00:25:10,880
browser the JavaScript in our client

637
00:25:09,140 --> 00:25:12,620
side will make an XML HTTP request to

638
00:25:10,880 --> 00:25:14,570
slash set cookie I mean that's actually

639
00:25:12,620 --> 00:25:16,760
a much more complicated endpoint with

640
00:25:14,570 --> 00:25:20,060
name equal to a value equal to B and the

641
00:25:16,760 --> 00:25:23,090
CSRF token and the server will respond

642
00:25:20,060 --> 00:25:24,379
with set cookie equal to B so very

643
00:25:23,090 --> 00:25:25,639
simple abstraction of course this is not

644
00:25:24,380 --> 00:25:27,950
how it's actually done because we like

645
00:25:25,640 --> 00:25:32,690
make sure to prefix every a with like

646
00:25:27,950 --> 00:25:33,830
untrusted enterprise cookie a but but

647
00:25:32,690 --> 00:25:40,600
like at a high level this is kind of how

648
00:25:33,830 --> 00:25:40,600
it works yeah

649
00:25:42,970 --> 00:25:47,660
yes these are the enterprise cookies

650
00:25:45,050 --> 00:25:49,250
though you can make a post request

651
00:25:47,660 --> 00:25:51,560
that's fine as this makes it easier to

652
00:25:49,250 --> 00:25:53,210
talk about if I say URL but in either

653
00:25:51,560 --> 00:25:54,740
case it is the enterprise cookies these

654
00:25:53,210 --> 00:25:56,360
are not our actual or cookies or such

655
00:25:54,740 --> 00:25:59,960
like those are not even accessible to

656
00:25:56,360 --> 00:26:02,679
JavaScript so yeah

657
00:25:59,960 --> 00:26:05,950
post is fine post is easier yeah

658
00:26:02,680 --> 00:26:05,950
everyone with me

659
00:26:08,570 --> 00:26:14,090
you do like yeah JavaScript you can

660
00:26:11,389 --> 00:26:15,559
redefine any like variable right so you

661
00:26:14,090 --> 00:26:18,080
redefine the document or cookie variable

662
00:26:15,559 --> 00:26:19,899
to be this new object that actually maps

663
00:26:18,080 --> 00:26:21,799
to a javascript dictionary and you

664
00:26:19,899 --> 00:26:23,268
javascript has the concept of setters

665
00:26:21,799 --> 00:26:25,158
and getters so for the setter you say

666
00:26:23,269 --> 00:26:26,509
alright update the dictionary but also

667
00:26:25,159 --> 00:26:35,450
queue up a task to make this xml

668
00:26:26,509 --> 00:26:37,370
httprequest so if the enterprise is

669
00:26:35,450 --> 00:26:39,320
setting sensitive and information enter

670
00:26:37,370 --> 00:26:41,479
by CMS slash enterprise the CMS is

671
00:26:39,320 --> 00:26:44,120
setting sensitive information in the

672
00:26:41,480 --> 00:26:46,750
cookie this doesn't change that risk

673
00:26:44,120 --> 00:26:50,258
right like that's just CMS has a bug I

674
00:26:46,750 --> 00:26:50,259
guess I'm not yeah

675
00:26:57,150 --> 00:27:00,870
if you yeah yeah if it was so if it was

676
00:26:59,550 --> 00:27:10,559
actually be only this wouldn't happen

677
00:27:00,870 --> 00:27:12,780
anyhow so yeah okay all right so I think

678
00:27:10,559 --> 00:27:17,700
we have time for a quick demo let's try

679
00:27:12,780 --> 00:27:23,970
this as usual

680
00:27:17,700 --> 00:27:27,390
best practices - all right let me know

681
00:27:23,970 --> 00:27:29,580
if I should increase the font but right

682
00:27:27,390 --> 00:27:38,130
so this is right like it seems to work

683
00:27:29,580 --> 00:27:40,610
fine oh that's right it should be this

684
00:27:38,130 --> 00:27:40,610
is going to be awkward

685
00:27:43,250 --> 00:27:53,210
all right so this is the CMS right and

686
00:27:46,940 --> 00:27:53,210
if I do say if I do

687
00:27:57,400 --> 00:28:03,930
it has all these cookies just to quickly

688
00:28:00,400 --> 00:28:03,930
show what's actually happening let's do

689
00:28:06,240 --> 00:28:21,340
you might see a sales message sorry

690
00:28:09,550 --> 00:28:22,659
about that so I'm doing document dot

691
00:28:21,340 --> 00:28:24,280
cookie equal to B this is how in

692
00:28:22,660 --> 00:28:27,910
JavaScript you set the cookie A to B

693
00:28:24,280 --> 00:28:32,470
right and if I do that it will work fine

694
00:28:27,910 --> 00:28:34,860
if I do there's a new cookie at the

695
00:28:32,470 --> 00:28:39,820
bottom that's document dot cookie right

696
00:28:34,860 --> 00:28:42,840
but if I go here this is bad idea let's

697
00:28:39,820 --> 00:28:42,840
see maybe this will be fine

698
00:28:53,960 --> 00:28:56,899
so there's actually a cookie called

699
00:28:55,490 --> 00:28:58,789
sandbox and just go see on the screen

700
00:28:56,899 --> 00:29:00,049
that's set to the value B this is

701
00:28:58,789 --> 00:29:01,369
actually not being able to set its

702
00:29:00,049 --> 00:29:03,369
prefixing everything so that there's no

703
00:29:01,369 --> 00:29:06,860
way of colliding with our actual cookies

704
00:29:03,369 --> 00:29:12,999
and so it's limits all possible damage

705
00:29:06,860 --> 00:29:12,998
tree it's a simple trick 3 alright so

706
00:29:13,960 --> 00:29:24,830
terrifying I did not want to open my

707
00:29:16,190 --> 00:29:26,749
cookie jar alright so summarize you can

708
00:29:24,830 --> 00:29:28,490
use normal operating system standard V

709
00:29:26,749 --> 00:29:30,169
PC network isolation to isolate the

710
00:29:28,490 --> 00:29:32,629
server side and you can use this

711
00:29:30,169 --> 00:29:34,369
technique of CSP sandboxing to isolate

712
00:29:32,629 --> 00:29:36,529
at the client side tell the browser hey

713
00:29:34,369 --> 00:29:41,168
this is a completely different origin

714
00:29:36,529 --> 00:29:41,169
I stopped showing on my same

715
00:29:45,420 --> 00:29:49,980
these bunch of hacks around

716
00:29:47,700 --> 00:29:51,660
xmlhttprequest and state kind of get the

717
00:29:49,980 --> 00:29:55,050
whole page to work fine limits all

718
00:29:51,660 --> 00:29:55,770
damage and you're okay some stuff still

719
00:29:55,050 --> 00:29:58,139
doesn't work

720
00:29:55,770 --> 00:30:00,510
embeds like YouTube because the way

721
00:29:58,140 --> 00:30:02,340
sandbox works is that all frames inherit

722
00:30:00,510 --> 00:30:05,580
the sandbox YouTube does not like

723
00:30:02,340 --> 00:30:07,139
running in a sandbox and so it fails but

724
00:30:05,580 --> 00:30:09,419
if you just use a video tag with the

725
00:30:07,140 --> 00:30:11,660
video you have it works fine it's just

726
00:30:09,420 --> 00:30:14,510
you can't directly embed a youtube video

727
00:30:11,660 --> 00:30:16,710
it seems to be okay with us right now

728
00:30:14,510 --> 00:30:18,810
some other stuff Mbits like that that

729
00:30:16,710 --> 00:30:20,010
want to run privileged won't work but

730
00:30:18,810 --> 00:30:22,560
that's that's kind of the point we are

731
00:30:20,010 --> 00:30:24,030
isolating we are limiting so yeah you

732
00:30:22,560 --> 00:30:28,020
wanna run privilege you can't do that in

733
00:30:24,030 --> 00:30:29,550
this alright so if you're sitting here

734
00:30:28,020 --> 00:30:31,290
being like this is crazy and this is

735
00:30:29,550 --> 00:30:38,760
insanely complicated for something as

736
00:30:31,290 --> 00:30:42,290
simple as doing this you're right as

737
00:30:38,760 --> 00:30:45,290
they say I'm an engineer I were engineer

738
00:30:42,290 --> 00:30:47,340
and so yeah and like I agree with you

739
00:30:45,290 --> 00:30:48,960
and so one of the things I've been

740
00:30:47,340 --> 00:30:51,030
working on on the side is this concept

741
00:30:48,960 --> 00:30:54,660
of sub origins which is a specification

742
00:30:51,030 --> 00:30:56,010
at the w3c and and the essential idea of

743
00:30:54,660 --> 00:30:57,630
sub origins is that it should be really

744
00:30:56,010 --> 00:30:59,460
trivial for anyone to be able to isolate

745
00:30:57,630 --> 00:31:00,900
content at the client side you should be

746
00:30:59,460 --> 00:31:03,360
very easily able to tell the browser

747
00:31:00,900 --> 00:31:05,520
treat this as a separate sub origin

748
00:31:03,360 --> 00:31:09,240
called CMS or separate sub origin called

749
00:31:05,520 --> 00:31:10,560
Enterprise pretty much everyone has this

750
00:31:09,240 --> 00:31:11,760
sort of context right like maybe is the

751
00:31:10,560 --> 00:31:13,980
separate sub region called phpMyAdmin

752
00:31:11,760 --> 00:31:15,720
separate sub origin called admin there's

753
00:31:13,980 --> 00:31:16,920
always some different aspects of the

754
00:31:15,720 --> 00:31:19,770
application you wanna break up into

755
00:31:16,920 --> 00:31:23,310
isolated containers and sub regions will

756
00:31:19,770 --> 00:31:25,110
let you do that with the separation

757
00:31:23,310 --> 00:31:27,450
proposal post message except our local

758
00:31:25,110 --> 00:31:29,550
storage cookies will just work the

759
00:31:27,450 --> 00:31:31,320
browser will store cookies as the sub

760
00:31:29,550 --> 00:31:33,540
origin whatever you call it not with the

761
00:31:31,320 --> 00:31:35,820
main origin local storage it work

762
00:31:33,540 --> 00:31:38,720
everything will just work and you won't

763
00:31:35,820 --> 00:31:41,760
need any JavaScript tags there's a

764
00:31:38,720 --> 00:31:43,380
there's a demo behind flags in chrome

765
00:31:41,760 --> 00:31:46,440
right now that already you can play with

766
00:31:43,380 --> 00:31:47,880
if you want and you can also go to these

767
00:31:46,440 --> 00:31:49,620
you arise to learn more about what's

768
00:31:47,880 --> 00:31:52,170
what's the sub origin I especially

769
00:31:49,620 --> 00:31:53,399
recommend why sub origins to understand

770
00:31:52,170 --> 00:31:55,410
the context beyond why we are trying to

771
00:31:53,400 --> 00:31:56,910
push for this and you can talk to me I'm

772
00:31:55,410 --> 00:31:58,440
here for two days I'm happy to talk more

773
00:31:56,910 --> 00:31:58,860
I love sub origins as a spec I think

774
00:31:58,440 --> 00:32:01,440
it's late

775
00:31:58,860 --> 00:32:02,939
important and and just as an example

776
00:32:01,440 --> 00:32:05,520
right like so instead of saying access

777
00:32:02,940 --> 00:32:07,260
control allowed null you can say in the

778
00:32:05,520 --> 00:32:09,210
sub-region world access control allow

779
00:32:07,260 --> 00:32:11,370
sub Origin CMS and an access control our

780
00:32:09,210 --> 00:32:14,280
original box our comm that's a much

781
00:32:11,370 --> 00:32:16,739
stronger guarantee than allowed null you

782
00:32:14,280 --> 00:32:19,080
can post message so in this case I'm

783
00:32:16,740 --> 00:32:21,270
post messaging foo to the origin rubbish

784
00:32:19,080 --> 00:32:22,710
or comp and sub origin CMS and the

785
00:32:21,270 --> 00:32:24,299
browser will only deliver the message of

786
00:32:22,710 --> 00:32:26,190
the sub origins match it's pretty close

787
00:32:24,299 --> 00:32:29,400
to how post message works right now but

788
00:32:26,190 --> 00:32:31,740
you can also specify the sub origin so

789
00:32:29,400 --> 00:32:33,179
talk to me if you are interested you

790
00:32:31,740 --> 00:32:36,450
find this interesting new email public

791
00:32:33,179 --> 00:32:38,130
web app sec w3.org because it's

792
00:32:36,450 --> 00:32:39,690
currently the big debate right now but

793
00:32:38,130 --> 00:32:42,390
the spec is that is will this be useful

794
00:32:39,690 --> 00:32:44,010
to people beyond like the couple of

795
00:32:42,390 --> 00:32:45,150
people have shown so Google and Dropbox

796
00:32:44,010 --> 00:32:47,669
are pretty interested in it right now

797
00:32:45,150 --> 00:32:50,490
but if others are interested that would

798
00:32:47,669 --> 00:32:52,500
be pretty valuable to hear finally

799
00:32:50,490 --> 00:32:55,080
before I mean the reality is the same as

800
00:32:52,500 --> 00:32:57,450
we run a super rock-solid actually maybe

801
00:32:55,080 --> 00:32:59,129
I didn't need to do this because because

802
00:32:57,450 --> 00:33:01,140
we use Adobe a.m. it's super rock-solid

803
00:32:59,130 --> 00:33:03,690
we haven't found any exercise I actually

804
00:33:01,140 --> 00:33:05,220
love Drupal I think like I could only

805
00:33:03,690 --> 00:33:07,260
wish to have the sort of impact Drupal

806
00:33:05,220 --> 00:33:09,179
has had on the world it's it's great

807
00:33:07,260 --> 00:33:10,500
work and I just like to think in

808
00:33:09,179 --> 00:33:12,630
difference in depth and multiple layers

809
00:33:10,500 --> 00:33:13,710
of defense I didn't want to and I know

810
00:33:12,630 --> 00:33:15,510
it can sound like I was making fun of

811
00:33:13,710 --> 00:33:17,940
the rupal and stuff it's not like Drupal

812
00:33:15,510 --> 00:33:19,169
CMS's are doing amazing stuff I see how

813
00:33:17,940 --> 00:33:22,070
people are able to use something like a

814
00:33:19,169 --> 00:33:26,120
CMS and it's really cool and with that

815
00:33:22,070 --> 00:33:26,120
thanks a lot for listening thank you

816
00:33:30,250 --> 00:33:37,160
happy to take questions I don't know how

817
00:33:32,180 --> 00:33:39,920
much time I have Jim the sub origin spec

818
00:33:37,160 --> 00:33:40,670
is published here it's in draft mode

819
00:33:39,920 --> 00:33:48,800
right now

820
00:33:40,670 --> 00:33:50,210
yeah it's life yeah sorry Alex no

821
00:33:48,800 --> 00:33:52,990
because exercise can't do anything I

822
00:33:50,210 --> 00:33:54,980
mean we limit too much fear like yeah

823
00:33:52,990 --> 00:33:56,540
similar to like the server-side right

824
00:33:54,980 --> 00:33:59,030
like we have a bunch of processing that

825
00:33:56,540 --> 00:34:00,740
we do that is sandbox so if you find a

826
00:33:59,030 --> 00:34:02,870
bug in something that super heavily

827
00:34:00,740 --> 00:34:05,410
sandbox we won't pay out so there is

828
00:34:02,870 --> 00:34:11,839
some nuance there yeah

829
00:34:05,410 --> 00:34:13,400
anyone else our question sorry so right

830
00:34:11,840 --> 00:34:15,560
now it's a draft spec only chrome has an

831
00:34:13,400 --> 00:34:17,330
implementation behind a flag so yeah CSP

832
00:34:15,560 --> 00:34:28,820
sandbox is supported everywhere but sub

833
00:34:17,330 --> 00:34:31,370
origins isn't yeah yes you're right

834
00:34:28,820 --> 00:34:33,290
that's a difference yeah in terms of

835
00:34:31,370 --> 00:34:34,699
threat model though like server sends

836
00:34:33,290 --> 00:34:38,029
the JavaScript that can read all the

837
00:34:34,699 --> 00:34:39,739
local storage so it's yeah but yeah yeah

838
00:34:38,030 --> 00:34:41,450
yeah I know you're from 1password right

839
00:34:39,739 --> 00:34:41,928
so I can totally see why that would be a

840
00:34:41,449 --> 00:34:48,469
big deal

841
00:34:41,929 --> 00:34:48,470
[Laughter]

842
00:34:54,580 --> 00:35:00,160
we we have a separate derived Caesar for

843
00:34:57,040 --> 00:35:02,020
for the example CSRF token for xhr think

844
00:35:00,160 --> 00:35:08,980
of it like hashing the actual CSRF token

845
00:35:02,020 --> 00:35:10,870
with another secret and no no the

846
00:35:08,980 --> 00:35:12,730
cookies also go so that's the CSRF check

847
00:35:10,870 --> 00:35:14,920
right the cookie has the CSRF token the

848
00:35:12,730 --> 00:35:16,420
actual CSRF token we hashed that and

849
00:35:14,920 --> 00:35:20,530
check the hash matches what was in the

850
00:35:16,420 --> 00:35:26,010
uri and that's the CSS object yeah no

851
00:35:20,530 --> 00:35:26,010
otherwise yeah yeah Justin

852
00:35:38,340 --> 00:35:42,480
so because it was we already had to shim

853
00:35:40,590 --> 00:35:44,250
xhr rate to add implicitly with

854
00:35:42,480 --> 00:35:46,410
credentials in that same code we added

855
00:35:44,250 --> 00:35:50,310
the adding of CSRF token it's in the

856
00:35:46,410 --> 00:35:51,839
client site rate adding the token that's

857
00:35:50,310 --> 00:35:54,090
in the proxy that forwards to this here

858
00:35:51,840 --> 00:36:02,190
CMS and the few controllers that are in

859
00:35:54,090 --> 00:36:03,810
the app server that's a yeah so if you

860
00:36:02,190 --> 00:36:05,520
are navigating for example like the

861
00:36:03,810 --> 00:36:06,960
entry points you don't require CSRF

862
00:36:05,520 --> 00:36:10,800
token that's but you're returning HTML

863
00:36:06,960 --> 00:36:12,270
you are not returning xhrs right so and

864
00:36:10,800 --> 00:36:14,280
it won't come like you don't send access

865
00:36:12,270 --> 00:36:15,570
control allow origin null for navigation

866
00:36:14,280 --> 00:36:17,730
request it's only when you're sending

867
00:36:15,570 --> 00:36:23,270
access control original that these

868
00:36:17,730 --> 00:36:23,270
checks are needed right so yeah

869
00:36:42,290 --> 00:36:45,800
so it's a completely different CSRF

870
00:36:44,180 --> 00:36:52,580
token that's only for making those exit

871
00:36:45,800 --> 00:36:53,630
charts and nothing else yeah they could

872
00:36:52,580 --> 00:36:55,880
do anything they want inside the

873
00:36:53,630 --> 00:36:57,590
enterprise like that inside the CMS yes

874
00:36:55,880 --> 00:36:59,750
my worry wasn't the fact that they can

875
00:36:57,590 --> 00:37:02,720
do some if you have an excesses in Opera

876
00:36:59,750 --> 00:37:09,500
in the CMS you can do bad things inside

877
00:37:02,720 --> 00:37:11,899
the CMS yeah kind of think of it like

878
00:37:09,500 --> 00:37:13,460
that yeah but yeah I know that's that's

879
00:37:11,900 --> 00:37:15,320
why it's isolation it's not like fixing

880
00:37:13,460 --> 00:37:17,540
bugs it's like if bad things happen it

881
00:37:15,320 --> 00:37:18,460
will remain isolated inside similar to

882
00:37:17,540 --> 00:37:21,200
like if it does a remote code execution

883
00:37:18,460 --> 00:37:22,490
in the CMS like yeah it can take down

884
00:37:21,200 --> 00:37:25,939
that will then do very bad things and

885
00:37:22,490 --> 00:37:31,759
deface the site but yeah now yeah it's

886
00:37:25,940 --> 00:37:34,700
just isolating yeah I think any other

887
00:37:31,760 --> 00:37:36,140
questions as I'm around for two days

888
00:37:34,700 --> 00:37:39,129
happy to chat thanks for your time you

889
00:37:36,140 --> 00:37:39,129
have been a great audience thank you

