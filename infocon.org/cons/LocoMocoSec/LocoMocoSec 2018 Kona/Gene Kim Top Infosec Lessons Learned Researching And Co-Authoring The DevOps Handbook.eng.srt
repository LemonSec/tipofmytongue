1
00:00:00,630 --> 00:00:06,060
yeah as Jim mentioned I've had the

2
00:00:04,170 --> 00:00:07,680
privilege of studying high performing

3
00:00:06,060 --> 00:00:09,840
technology organizations this is a

4
00:00:07,680 --> 00:00:13,049
journey that's been I've been on for 19

5
00:00:09,840 --> 00:00:14,340
years and so back in 1999 and I was the

6
00:00:13,049 --> 00:00:16,800
CTO and founder a company called

7
00:00:14,340 --> 00:00:18,630
tripwire in the info second compliance

8
00:00:16,800 --> 00:00:20,550
space and our goal was always study

9
00:00:18,630 --> 00:00:21,869
these amazing organizations we call them

10
00:00:20,550 --> 00:00:23,010
high performers that had the best

11
00:00:21,869 --> 00:00:24,330
project due date performance and

12
00:00:23,010 --> 00:00:26,310
development they had the best

13
00:00:24,330 --> 00:00:27,869
operational stability and they had the

14
00:00:26,310 --> 00:00:29,849
best posture security and compliance and

15
00:00:27,869 --> 00:00:31,529
so the goal was how did these amazing

16
00:00:29,849 --> 00:00:32,910
organizations make their goods a great

17
00:00:31,529 --> 00:00:34,320
transformation and the reason why we

18
00:00:32,910 --> 00:00:35,910
want to wanted to understand that was

19
00:00:34,320 --> 00:00:37,230
that we want to understand how other

20
00:00:35,910 --> 00:00:38,669
organizations could replicate those

21
00:00:37,230 --> 00:00:41,190
amazing outcomes and by the way that's

22
00:00:38,670 --> 00:00:43,200
when I met Allison Miller back in 2001

23
00:00:41,190 --> 00:00:46,519
that's where I met so many people here

24
00:00:43,200 --> 00:00:49,050
I'm just so delighted to be here today

25
00:00:46,520 --> 00:00:50,309
but in that night senior journey there

26
00:00:49,050 --> 00:00:51,809
were many surprises but the biggest

27
00:00:50,309 --> 00:00:53,309
surprise was how it took me into the

28
00:00:51,809 --> 00:00:55,910
middle of the DevOps movement which I

29
00:00:53,309 --> 00:00:59,339
consider myself the maybe one of the

30
00:00:55,910 --> 00:01:02,760
primary cheerleaders for but I think

31
00:00:59,340 --> 00:01:04,290
it's a genuinely important solution to

32
00:01:02,760 --> 00:01:07,229
an even more significant business

33
00:01:04,290 --> 00:01:09,150
problem and you know I think it touches

34
00:01:07,229 --> 00:01:11,970
everything about how we work with

35
00:01:09,150 --> 00:01:12,960
software so in the next 40 minutes I

36
00:01:11,970 --> 00:01:15,420
want to share with you is what I've

37
00:01:12,960 --> 00:01:17,158
learned since 2013 so 2013 is when a

38
00:01:15,420 --> 00:01:19,590
book called the Phoenix project came out

39
00:01:17,159 --> 00:01:20,759
which is a novel about you know an

40
00:01:19,590 --> 00:01:22,080
organization that goes through all these

41
00:01:20,759 --> 00:01:23,909
problems and really it's kind of

42
00:01:22,080 --> 00:01:25,408
positioned as a way to help describe the

43
00:01:23,909 --> 00:01:27,150
problems that DevOps is designed to

44
00:01:25,409 --> 00:01:29,009
solve and so what I want to share with

45
00:01:27,150 --> 00:01:30,720
you are those that's top 5 learning so

46
00:01:29,009 --> 00:01:32,579
what things I wish I had learned before

47
00:01:30,720 --> 00:01:35,100
the Phoenix project came out and when I

48
00:01:32,579 --> 00:01:36,298
say that DevOps is transformative it

49
00:01:35,100 --> 00:01:38,158
just puts into perspective I think that

50
00:01:36,299 --> 00:01:41,130
any the last time that any industry has

51
00:01:38,159 --> 00:01:42,960
been disrupted to the extent that DevOps

52
00:01:41,130 --> 00:01:45,030
is disrupting our work today was

53
00:01:42,960 --> 00:01:46,110
probably manufacturing the 1980s when it

54
00:01:45,030 --> 00:01:47,970
was revolutionized through the

55
00:01:46,110 --> 00:01:49,409
application of lean principles so you

56
00:01:47,970 --> 00:01:50,880
think those same lean principles apply

57
00:01:49,409 --> 00:01:52,649
to the technology value stream you end

58
00:01:50,880 --> 00:01:54,689
up with the same patterns and practices

59
00:01:52,649 --> 00:01:55,979
that allow organizations do ten hundreds

60
00:01:54,689 --> 00:01:58,559
or even thousands of points per day

61
00:01:55,979 --> 00:01:59,789
while preserving world-class reliability

62
00:01:58,560 --> 00:02:02,130
security and stability at something that

63
00:01:59,790 --> 00:02:04,619
we didn't even think possible ten years

64
00:02:02,130 --> 00:02:07,020
ago so and I said transformative it is

65
00:02:04,619 --> 00:02:09,508
transformed operations as it is to

66
00:02:07,020 --> 00:02:11,700
developers as it is to our business

67
00:02:09,508 --> 00:02:13,739
partners but especially for information

68
00:02:11,700 --> 00:02:16,410
security right I think more than

69
00:02:13,740 --> 00:02:18,120
almost any functional role you know

70
00:02:16,410 --> 00:02:20,130
information security it changes how we

71
00:02:18,120 --> 00:02:22,530
do work and I'm so when I say that I'm

72
00:02:20,130 --> 00:02:25,140
so glad to be here is because that I had

73
00:02:22,530 --> 00:02:27,840
the privilege in 2012 of being in Austin

74
00:02:25,140 --> 00:02:29,910
Texas at the OWASP USAA conference where

75
00:02:27,840 --> 00:02:31,770
I got to watch Neil matado Justin

76
00:02:29,910 --> 00:02:33,299
Collins now small and present one most

77
00:02:31,770 --> 00:02:35,040
astonishing presentation I've seen in my

78
00:02:33,300 --> 00:02:36,630
entire career where they were talking

79
00:02:35,040 --> 00:02:38,820
about the things they were doing at

80
00:02:36,630 --> 00:02:41,090
Twitter to genuinely integrate

81
00:02:38,820 --> 00:02:44,070
information security into the entire

82
00:02:41,090 --> 00:02:47,330
Devon opps processes right in many ways

83
00:02:44,070 --> 00:02:51,030
as a part of a consequence of the 2009

84
00:02:47,330 --> 00:02:53,280
Federal Trade Commission consent decrees

85
00:02:51,030 --> 00:02:54,180
so so I'm so pleased that all three are

86
00:02:53,280 --> 00:02:57,060
in the room

87
00:02:54,180 --> 00:02:58,500
so here's number one surprise that I

88
00:02:57,060 --> 00:02:59,760
wish certainly wish I had learned before

89
00:02:58,500 --> 00:03:02,010
the streams project came out was that

90
00:02:59,760 --> 00:03:05,579
the business failure that DevOps creates

91
00:03:02,010 --> 00:03:07,140
is even higher than we thought so this

92
00:03:05,580 --> 00:03:09,120
is based on work that I've been doing

93
00:03:07,140 --> 00:03:10,260
with a gentleman in jazz humble so he

94
00:03:09,120 --> 00:03:13,170
wrote the continuous delivery book we

95
00:03:10,260 --> 00:03:15,060
wrote the devil's handbook together dr.

96
00:03:13,170 --> 00:03:17,609
Niccole fors grin and for many years

97
00:03:15,060 --> 00:03:19,590
with puppet we benchmarked over 26,000

98
00:03:17,610 --> 00:03:21,060
organizations and over the past four

99
00:03:19,590 --> 00:03:22,260
years we've been able to identify what

100
00:03:21,060 --> 00:03:23,610
does high performance looked like and

101
00:03:22,260 --> 00:03:25,859
what are the behaviors that cause high

102
00:03:23,610 --> 00:03:28,020
performance so one dimension of

103
00:03:25,860 --> 00:03:30,090
performance is throughput in agility at

104
00:03:28,020 --> 00:03:32,130
the 2017 report so we've done this over

105
00:03:30,090 --> 00:03:33,900
four years in a row we found that high

106
00:03:32,130 --> 00:03:35,490
performance are doing 46 times more

107
00:03:33,900 --> 00:03:37,470
frequent deployments so they think of

108
00:03:35,490 --> 00:03:40,080
deployments not only is just code but -

109
00:03:37,470 --> 00:03:41,220
any changes in the environment and more

110
00:03:40,080 --> 00:03:44,790
importantly they can complete those

111
00:03:41,220 --> 00:03:47,730
changes 440 times more quickly in other

112
00:03:44,790 --> 00:03:50,040
words what is the cycle time as we go

113
00:03:47,730 --> 00:03:52,230
from code or changes put into version

114
00:03:50,040 --> 00:03:53,970
control and version control is not just

115
00:03:52,230 --> 00:03:55,410
for developers is for operations and

116
00:03:53,970 --> 00:03:56,850
information security anyone who gets

117
00:03:55,410 --> 00:03:58,440
into production needs to go through and

118
00:03:56,850 --> 00:04:00,299
control through testing through

119
00:03:58,440 --> 00:04:02,130
deployment so that customers are

120
00:04:00,300 --> 00:04:04,170
actually getting value high performers

121
00:04:02,130 --> 00:04:06,450
can execute the cycle in one hour or

122
00:04:04,170 --> 00:04:09,600
less whereas lower performers you know

123
00:04:06,450 --> 00:04:13,589
take orders of magnitude longer right I

124
00:04:09,600 --> 00:04:15,540
think weeks months or quarters it's not

125
00:04:13,590 --> 00:04:17,100
just about doing more work we know that

126
00:04:15,540 --> 00:04:19,349
high performers get dramatically better

127
00:04:17,100 --> 00:04:20,970
outcomes when they deploy we know that

128
00:04:19,350 --> 00:04:22,440
high performers when they deploy there

129
00:04:20,970 --> 00:04:23,760
one fifth is likely to have something

130
00:04:22,440 --> 00:04:26,040
bad happen whether it's a service

131
00:04:23,760 --> 00:04:27,000
impairment a seven outage a security

132
00:04:26,040 --> 00:04:28,920
breach or compliance

133
00:04:27,000 --> 00:04:31,050
failure and bad things happen because

134
00:04:28,920 --> 00:04:32,760
Murphy's Law does exist when bad things

135
00:04:31,050 --> 00:04:34,620
happen high performers can repair those

136
00:04:32,760 --> 00:04:36,080
issues a hundred times faster in other

137
00:04:34,620 --> 00:04:39,660
words the mean time to restore service

138
00:04:36,080 --> 00:04:42,510
is no a hundred times faster so you know

139
00:04:39,660 --> 00:04:44,160
in the early days of the research one

140
00:04:42,510 --> 00:04:45,960
this is what's shocking right because it

141
00:04:44,160 --> 00:04:48,120
gave us decisive evidence that you can

142
00:04:45,960 --> 00:04:50,219
be faster and B were more reliable at

143
00:04:48,120 --> 00:04:51,690
the same time and in the early years

144
00:04:50,220 --> 00:04:53,970
there was a lot of anxiety when we did

145
00:04:51,690 --> 00:04:57,000
the research because we were nervous

146
00:04:53,970 --> 00:04:59,340
that we wouldn't see it you know in that

147
00:04:57,000 --> 00:05:01,770
year's study but now it's so routine we

148
00:04:59,340 --> 00:05:02,669
know with moral certainty that the only

149
00:05:01,770 --> 00:05:04,560
way to get these kind of great

150
00:05:02,669 --> 00:05:07,710
reliability profiles is to do smaller

151
00:05:04,560 --> 00:05:08,790
deployments more frequently and so over

152
00:05:07,710 --> 00:05:10,500
the last two years we looked at other

153
00:05:08,790 --> 00:05:11,970
dimensions of quality we know that high

154
00:05:10,500 --> 00:05:13,410
performance because they're integrating

155
00:05:11,970 --> 00:05:15,270
information security objective into

156
00:05:13,410 --> 00:05:17,280
everybody's daily work they're spending

157
00:05:15,270 --> 00:05:19,830
one half the amount of time remediating

158
00:05:17,280 --> 00:05:22,020
security issues right so it's that you

159
00:05:19,830 --> 00:05:24,270
know twice so we can see the

160
00:05:22,020 --> 00:05:26,099
effectiveness there and because they're

161
00:05:24,270 --> 00:05:28,740
doing a better job controlling unplanned

162
00:05:26,100 --> 00:05:31,080
work they're able to spend nearly a

163
00:05:28,740 --> 00:05:33,360
third more time on planned work all

164
00:05:31,080 --> 00:05:35,190
right so these are planned yeah did this

165
00:05:33,360 --> 00:05:37,200
work tends to be more strategic you know

166
00:05:35,190 --> 00:05:40,680
as opposed to the tactical maybe even

167
00:05:37,200 --> 00:05:42,360
value destroying work of firefighting so

168
00:05:40,680 --> 00:05:44,970
as a population we call that IT

169
00:05:42,360 --> 00:05:47,460
performance three years ago we looked at

170
00:05:44,970 --> 00:05:49,260
another area which was organizational

171
00:05:47,460 --> 00:05:51,840
performance and we've found is that high

172
00:05:49,260 --> 00:05:53,640
performers we're also twice as likely to

173
00:05:51,840 --> 00:05:56,820
exceed profitability market share and

174
00:05:53,640 --> 00:05:57,780
productivity goals and for years people

175
00:05:56,820 --> 00:05:59,810
have been asking what if we were

176
00:05:57,780 --> 00:06:02,940
government agency what if we are

177
00:05:59,810 --> 00:06:05,340
military service or not-for-profit and

178
00:06:02,940 --> 00:06:07,200
so in 2017 for the first time we had a

179
00:06:05,340 --> 00:06:09,030
separate branch and the survey said if

180
00:06:07,200 --> 00:06:10,770
you're enough a profit you know we took

181
00:06:09,030 --> 00:06:12,500
you down a different path and we found

182
00:06:10,770 --> 00:06:14,400
was the same multiple of performance

183
00:06:12,500 --> 00:06:16,740
not-for-profits are twice as likely to

184
00:06:14,400 --> 00:06:18,929
achieve organizational and mission goals

185
00:06:16,740 --> 00:06:21,570
regardless of whether was measured by

186
00:06:18,930 --> 00:06:23,250
quality quantity customer satisfaction

187
00:06:21,570 --> 00:06:25,469
and so forth right so you know I think

188
00:06:23,250 --> 00:06:27,030
the conclusion is pretty obvious right

189
00:06:25,470 --> 00:06:28,650
is that if mission achievement requires

190
00:06:27,030 --> 00:06:30,109
work from the technology value stream

191
00:06:28,650 --> 00:06:33,390
the work that we do every day

192
00:06:30,110 --> 00:06:35,970
you know DevOps helps with enable and of

193
00:06:33,390 --> 00:06:37,680
those things other markers of

194
00:06:35,970 --> 00:06:39,930
organizational performance include the

195
00:06:37,680 --> 00:06:40,710
fact that high performers employees are

196
00:06:39,930 --> 00:06:43,860
twice as liked

197
00:06:40,710 --> 00:06:45,210
to recommend their organisations to

198
00:06:43,860 --> 00:06:46,560
their friends and colleagues that's a

199
00:06:45,210 --> 00:06:48,510
great place to work that's called the

200
00:06:46,560 --> 00:06:49,650
employee Net Promoter Score and there's

201
00:06:48,510 --> 00:06:51,030
a whole body of literature that out

202
00:06:49,650 --> 00:06:52,169
there that says that that is highly

203
00:06:51,030 --> 00:06:56,609
correlated with revenue gross

204
00:06:52,170 --> 00:06:58,770
profitability and so forth and there's

205
00:06:56,610 --> 00:07:00,870
other thing that we found which was that

206
00:06:58,770 --> 00:07:03,570
found that high performers for those

207
00:07:00,870 --> 00:07:05,880
publicly traded they had 50% higher

208
00:07:03,570 --> 00:07:07,260
market cap growth over three years and I

209
00:07:05,880 --> 00:07:08,909
just want to pause for a moment there to

210
00:07:07,260 --> 00:07:11,070
say this is in some ways an absurd

211
00:07:08,910 --> 00:07:12,900
finding right because essentially what

212
00:07:11,070 --> 00:07:15,960
this is suggesting is that how a server

213
00:07:12,900 --> 00:07:17,400
admin how a DBA a developer how they do

214
00:07:15,960 --> 00:07:19,739
the daily work could impact

215
00:07:17,400 --> 00:07:21,929
profitability and maybe even be visible

216
00:07:19,740 --> 00:07:25,410
in share price which i think is kind of

217
00:07:21,930 --> 00:07:26,970
stretching believability but I I will be

218
00:07:25,410 --> 00:07:30,570
the first to admit that but if we

219
00:07:26,970 --> 00:07:32,370
believe that you know we're strategic

220
00:07:30,570 --> 00:07:34,890
work is reliant upon the technology

221
00:07:32,370 --> 00:07:37,590
value stream perhaps if those

222
00:07:34,890 --> 00:07:39,270
organizations can be three orders of

223
00:07:37,590 --> 00:07:41,219
magnitude faster than the competition

224
00:07:39,270 --> 00:07:42,810
maybe that will create decisive winners

225
00:07:41,220 --> 00:07:45,810
and losers in the marketplace and that I

226
00:07:42,810 --> 00:07:47,220
find to be incredibly believable so is I

227
00:07:45,810 --> 00:07:50,490
think it's just a really wonderful

228
00:07:47,220 --> 00:07:52,560
finding there's another metric I wanna

229
00:07:50,490 --> 00:07:53,790
share with you and in the DevOps

230
00:07:52,560 --> 00:07:55,650
community this is probably one of our

231
00:07:53,790 --> 00:07:58,290
favorite metrics deploys per day right

232
00:07:55,650 --> 00:08:01,650
in fact the seminal presentation about

233
00:07:58,290 --> 00:08:03,510
DevOps in 2009 by John Hall Spa at

234
00:08:01,650 --> 00:08:06,900
Flickr who went onto Etsy and his dev

235
00:08:03,510 --> 00:08:08,039
patriot Paul Hammond at Yahoo you know

236
00:08:06,900 --> 00:08:09,630
they were shocked the world by saying

237
00:08:08,040 --> 00:08:13,560
they were doing ten deploys a day every

238
00:08:09,630 --> 00:08:15,210
day but what is interesting is even more

239
00:08:13,560 --> 00:08:17,370
interesting is this relentless increase

240
00:08:15,210 --> 00:08:22,380
in number one is per day right these

241
00:08:17,370 --> 00:08:24,570
days Amazon does in 2015 can't Exner

242
00:08:22,380 --> 00:08:26,040
said at Amazon they're doing 130,000

243
00:08:24,570 --> 00:08:28,200
production deployments a day right so

244
00:08:26,040 --> 00:08:29,520
the question is what causes is this

245
00:08:28,200 --> 00:08:31,770
relentless increase in number of

246
00:08:29,520 --> 00:08:33,659
deployments per day and we started to

247
00:08:31,770 --> 00:08:35,490
hypothesize that deployments per day

248
00:08:33,659 --> 00:08:37,620
maybe is hiding an even more important

249
00:08:35,490 --> 00:08:40,200
metric which is deploys per day per

250
00:08:37,620 --> 00:08:42,659
developer and so we tested this on the y

251
00:08:40,200 --> 00:08:44,790
axis you see deploys per day and on the

252
00:08:42,659 --> 00:08:46,709
x axis is the number of developers and

253
00:08:44,790 --> 00:08:47,849
what we found was that as you increase

254
00:08:46,710 --> 00:08:50,100
the number of developers and low

255
00:08:47,850 --> 00:08:52,500
performers deployments per day goes down

256
00:08:50,100 --> 00:08:53,730
in medium performers as you increase the

257
00:08:52,500 --> 00:08:54,270
number of developers deploys per day

258
00:08:53,730 --> 00:08:56,190
remains

259
00:08:54,270 --> 00:08:57,530
constant whereas in the high performers

260
00:08:56,190 --> 00:09:00,810
as you increase the number of developers

261
00:08:57,530 --> 00:09:02,699
deployment per day goes up linearly so

262
00:09:00,810 --> 00:09:05,400
this is a logarithmic scale right that

263
00:09:02,700 --> 00:09:07,800
is actually linear growth and so what

264
00:09:05,400 --> 00:09:10,170
makes this so interesting is that so

265
00:09:07,800 --> 00:09:11,490
many of us were trained by Frederick

266
00:09:10,170 --> 00:09:13,920
Brooks in his book the mythical

267
00:09:11,490 --> 00:09:15,330
man-month but he actually did explain so

268
00:09:13,920 --> 00:09:17,280
much of our common experience that in

269
00:09:15,330 --> 00:09:19,080
general when you double the number of

270
00:09:17,280 --> 00:09:20,610
developers or might be more specific the

271
00:09:19,080 --> 00:09:23,010
numbers double the number of gentleman

272
00:09:20,610 --> 00:09:24,300
teams in general you double the code

273
00:09:23,010 --> 00:09:26,580
integration effort you double the

274
00:09:24,300 --> 00:09:28,170
testing effort I think the securing

275
00:09:26,580 --> 00:09:29,610
effort and you more than double the

276
00:09:28,170 --> 00:09:31,439
effort to get value to the customer

277
00:09:29,610 --> 00:09:33,030
right and I think we've all lived

278
00:09:31,440 --> 00:09:34,410
through that at one point in our career

279
00:09:33,030 --> 00:09:36,390
but what this graph shows us is that

280
00:09:34,410 --> 00:09:38,280
under certain conditions with the right

281
00:09:36,390 --> 00:09:40,050
architecture or the right technical

282
00:09:38,280 --> 00:09:41,790
practices and the right cultural norms

283
00:09:40,050 --> 00:09:43,530
we can actually scale developer

284
00:09:41,790 --> 00:09:45,209
productivity linearly and that's

285
00:09:43,530 --> 00:09:46,410
something you see here the high

286
00:09:45,210 --> 00:09:48,540
performance talk about regards are

287
00:09:46,410 --> 00:09:51,930
whether they are a developer in QA

288
00:09:48,540 --> 00:09:53,490
ops or information security and I think

289
00:09:51,930 --> 00:09:55,530
districts to suggest what the opposite

290
00:09:53,490 --> 00:09:57,000
of technical debt is the opposite of

291
00:09:55,530 --> 00:09:59,100
technical debt is to what extent can we

292
00:09:57,000 --> 00:10:00,630
safely quickly reliably achieve all the

293
00:09:59,100 --> 00:10:02,760
goals dreams and aspirations of the

294
00:10:00,630 --> 00:10:05,160
organization that we serve and maybe

295
00:10:02,760 --> 00:10:07,050
just to put this into perspective one of

296
00:10:05,160 --> 00:10:08,490
my favorite statistics was Instagram

297
00:10:07,050 --> 00:10:10,430
when they were acquired by Facebook for

298
00:10:08,490 --> 00:10:13,080
a billion dollars that was 10 engineers

299
00:10:10,430 --> 00:10:15,930
Pokemon go the fastest property to a

300
00:10:13,080 --> 00:10:17,850
billion users was 25 engineers so I

301
00:10:15,930 --> 00:10:20,280
think kind of the goal of DevOps is like

302
00:10:17,850 --> 00:10:22,200
how do you taking 25 engineers put them

303
00:10:20,280 --> 00:10:24,120
into any modern business context and

304
00:10:22,200 --> 00:10:28,470
have them do those kind of miraculous

305
00:10:24,120 --> 00:10:30,480
things so so surprise number one was

306
00:10:28,470 --> 00:10:32,700
definitely you know how good DevOps is

307
00:10:30,480 --> 00:10:35,190
for the achievement of business outcomes

308
00:10:32,700 --> 00:10:37,440
surprise number two is DevOps is as good

309
00:10:35,190 --> 00:10:40,440
for operations and security as it is for

310
00:10:37,440 --> 00:10:42,960
developers in fact I love the fact that

311
00:10:40,440 --> 00:10:46,110
so many Facebook people here so it's

312
00:10:42,960 --> 00:10:48,780
2018 and still my favorite case study of

313
00:10:46,110 --> 00:10:51,180
how good good is was the facebook chat

314
00:10:48,780 --> 00:10:52,980
launch story that happened in 20 2008

315
00:10:51,180 --> 00:10:54,540
all right so some of you may roll your

316
00:10:52,980 --> 00:10:56,460
eyes because you're saying you know it's

317
00:10:54,540 --> 00:10:57,060
ten years old right how relevant can be

318
00:10:56,460 --> 00:10:59,070
today

319
00:10:57,060 --> 00:11:00,839
some of you might be saying it's a chat

320
00:10:59,070 --> 00:11:02,130
server right that undergraduates right

321
00:11:00,840 --> 00:11:03,900
you know as part of their you know

322
00:11:02,130 --> 00:11:05,730
computer science curriculums you know

323
00:11:03,900 --> 00:11:07,949
that's true too but what you might not

324
00:11:05,730 --> 00:11:09,540
know is that you know chat

325
00:11:07,950 --> 00:11:11,910
actually an inherently an order and

326
00:11:09,540 --> 00:11:14,310
cubed algorithm I think even to this day

327
00:11:11,910 --> 00:11:16,020
they would consider chat to be the most

328
00:11:14,310 --> 00:11:18,660
ambitious technical undertaking ever

329
00:11:16,020 --> 00:11:20,069
done to Facebook still to this day it

330
00:11:18,660 --> 00:11:22,650
took one year for them to do with the

331
00:11:20,070 --> 00:11:23,910
largest project team and so what's

332
00:11:22,650 --> 00:11:27,240
interesting is like how they use that

333
00:11:23,910 --> 00:11:30,150
year so imagine the chat team being

334
00:11:27,240 --> 00:11:31,620
constituted sometime in 2007 and very

335
00:11:30,150 --> 00:11:33,540
quickly this team is starting to create

336
00:11:31,620 --> 00:11:35,640
code and they're checking that code to

337
00:11:33,540 --> 00:11:37,380
shared source code repo whatever was in

338
00:11:35,640 --> 00:11:39,480
the source code repo at 2:00 p.m.

339
00:11:37,380 --> 00:11:41,070
Pacific time would be silently migrated

340
00:11:39,480 --> 00:11:42,210
into the production environments you

341
00:11:41,070 --> 00:11:45,000
know without causing chaos and

342
00:11:42,210 --> 00:11:45,990
disruption and what's interesting is

343
00:11:45,000 --> 00:11:48,870
they do it in the middle of the day

344
00:11:45,990 --> 00:11:50,130
right not at 4:59 p.m. not at midnight

345
00:11:48,870 --> 00:11:51,750
right they're doing in the middle of day

346
00:11:50,130 --> 00:11:53,820
so if something goes wrong they can roll

347
00:11:51,750 --> 00:11:56,430
back or worst case you know everyone's

348
00:11:53,820 --> 00:11:57,750
in the office to help if needed so you

349
00:11:56,430 --> 00:11:59,130
know that's certainly interesting right

350
00:11:57,750 --> 00:12:01,620
as opposed to so many organizations

351
00:11:59,130 --> 00:12:03,540
today they do deployments at midnight on

352
00:12:01,620 --> 00:12:05,100
Friday and they have to work all weekend

353
00:12:03,540 --> 00:12:06,719
to get things running right so that

354
00:12:05,100 --> 00:12:09,990
customers don't notice if something goes

355
00:12:06,720 --> 00:12:12,690
wrong on 9:00 p.m. on Monday morning so

356
00:12:09,990 --> 00:12:14,340
that's one technical practice a second

357
00:12:12,690 --> 00:12:15,990
technical practice is the fact that they

358
00:12:14,340 --> 00:12:19,410
were testing in production for nearly a

359
00:12:15,990 --> 00:12:21,480
year I you know so for the vast majority

360
00:12:19,410 --> 00:12:23,100
R whenever if someone's logging into a

361
00:12:21,480 --> 00:12:24,660
Facebook property you know there would

362
00:12:23,100 --> 00:12:26,010
be some JavaScript code that right would

363
00:12:24,660 --> 00:12:28,140
run in the client and would send

364
00:12:26,010 --> 00:12:29,700
invisible tests chat messages you know

365
00:12:28,140 --> 00:12:31,770
to the servers you know in the data

366
00:12:29,700 --> 00:12:33,930
center right invisible to customers so

367
00:12:31,770 --> 00:12:35,460
why would they do that it was so they

368
00:12:33,930 --> 00:12:39,510
could simulate production like loads

369
00:12:35,460 --> 00:12:40,830
right well before the release and so

370
00:12:39,510 --> 00:12:43,080
this is when they have the most amount

371
00:12:40,830 --> 00:12:45,210
of freedom to change things right if you

372
00:12:43,080 --> 00:12:47,370
find performance issues 11 months before

373
00:12:45,210 --> 00:12:48,840
the release of the product right you

374
00:12:47,370 --> 00:12:50,970
have 11 months to change in you can even

375
00:12:48,840 --> 00:12:52,440
change architecture whereas if you find

376
00:12:50,970 --> 00:12:53,550
performance issues during the middle of

377
00:12:52,440 --> 00:12:56,670
the deployment you have almost no

378
00:12:53,550 --> 00:12:58,439
degrees of freedom so just to share with

379
00:12:56,670 --> 00:13:00,900
you I think that's all interesting to me

380
00:12:58,440 --> 00:13:03,330
is that if you had told me five years

381
00:13:00,900 --> 00:13:05,010
ago that it would be okay for developers

382
00:13:03,330 --> 00:13:07,890
to test in production I would have said

383
00:13:05,010 --> 00:13:10,110
are you insane it's like you know I

384
00:13:07,890 --> 00:13:11,550
don't know what developers you know but

385
00:13:10,110 --> 00:13:13,230
you know I can promise you developers

386
00:13:11,550 --> 00:13:14,609
don't care about quality right if you've

387
00:13:13,230 --> 00:13:16,620
seen the things I've seen deploy in a

388
00:13:14,610 --> 00:13:18,990
production you would also conclude these

389
00:13:16,620 --> 00:13:20,550
things and yet I've changed my mind is

390
00:13:18,990 --> 00:13:21,580
that I think to give developers the

391
00:13:20,550 --> 00:13:23,410
ability to test production

392
00:13:21,580 --> 00:13:26,230
is an absolute game changer because it

393
00:13:23,410 --> 00:13:28,360
gives the fastest feedback of everything

394
00:13:26,230 --> 00:13:30,130
right whether it's user visible user

395
00:13:28,360 --> 00:13:33,010
invisible non-functional quirements of

396
00:13:30,130 --> 00:13:35,200
security but let's go back to the notion

397
00:13:33,010 --> 00:13:37,300
of that daily deployment

398
00:13:35,200 --> 00:13:39,280
here's how important I think that is I

399
00:13:37,300 --> 00:13:41,109
think the best person is his verbalizes

400
00:13:39,280 --> 00:13:44,350
is nathan Simic

401
00:13:41,110 --> 00:13:45,850
he said as a lifelong ops practitioner I

402
00:13:44,350 --> 00:13:48,280
know that we need these type of DevOps

403
00:13:45,850 --> 00:13:49,780
practices to make our work humane in the

404
00:13:48,280 --> 00:13:53,170
course of my career I've worked on every

405
00:13:49,780 --> 00:13:55,420
holiday on my birthday on my spouses

406
00:13:53,170 --> 00:13:57,729
birthday and even on the day my son was

407
00:13:55,420 --> 00:14:00,790
born and so I think many of you might be

408
00:13:57,730 --> 00:14:02,740
like me where you've had friends who

409
00:14:00,790 --> 00:14:03,969
have had to do this or maybe even like

410
00:14:02,740 --> 00:14:05,590
me where you've actually helped create

411
00:14:03,970 --> 00:14:07,900
these inhumane work systems that have

412
00:14:05,590 --> 00:14:10,540
forced people to live with this for

413
00:14:07,900 --> 00:14:12,810
maybe years and I think we now know that

414
00:14:10,540 --> 00:14:15,280
there's a better way so I think the

415
00:14:12,810 --> 00:14:17,109
common objection is that you can only do

416
00:14:15,280 --> 00:14:20,260
this for open-source hippie companies

417
00:14:17,110 --> 00:14:21,760
like Facebook and I think if that is a

418
00:14:20,260 --> 00:14:24,010
valid objection but you should also know

419
00:14:21,760 --> 00:14:25,150
about this case study from CSG so

420
00:14:24,010 --> 00:14:27,850
they're the largest bill printing

421
00:14:25,150 --> 00:14:29,319
company in the u.s. so I think even here

422
00:14:27,850 --> 00:14:31,660
in Hawaii right if you get a paper bill

423
00:14:29,320 --> 00:14:33,430
from Comcast at Time Warner Cable at

424
00:14:31,660 --> 00:14:34,959
charter communications it comes from one

425
00:14:33,430 --> 00:14:38,920
of two bill printing plants in the u.s.

426
00:14:34,960 --> 00:14:41,440
they're publicly traded and their focus

427
00:14:38,920 --> 00:14:42,849
of transformation was that bill printing

428
00:14:41,440 --> 00:14:45,730
application in my mind this is a

429
00:14:42,850 --> 00:14:48,100
pathological worst case of what anybody

430
00:14:45,730 --> 00:14:50,250
should be doing DevOps on it runs on

431
00:14:48,100 --> 00:14:53,410
over 20 different technology stacks

432
00:14:50,250 --> 00:14:55,390
including on the mainframe the good

433
00:14:53,410 --> 00:14:57,339
parts are written in COBOL the bad parts

434
00:14:55,390 --> 00:14:59,890
are written in assembler with V Sam

435
00:14:57,340 --> 00:15:01,360
databases so V Sam databases are not

436
00:14:59,890 --> 00:15:03,160
even relational right they're

437
00:15:01,360 --> 00:15:05,290
column-oriented databases that you have

438
00:15:03,160 --> 00:15:09,640
to index into manually it runs on over

439
00:15:05,290 --> 00:15:13,660
136 6000 Windows clients that run inside

440
00:15:09,640 --> 00:15:16,000
of their customers so they doubled the

441
00:15:13,660 --> 00:15:18,310
release frequency from two times a year

442
00:15:16,000 --> 00:15:19,870
to four times a year but that was

443
00:15:18,310 --> 00:15:22,239
predicated on the notion of doing a

444
00:15:19,870 --> 00:15:24,730
daily deployment so that means every day

445
00:15:22,240 --> 00:15:26,500
they had a team that spanned dev QA

446
00:15:24,730 --> 00:15:31,030
operations they would deploy into a you

447
00:15:26,500 --> 00:15:32,410
a key environment every day in an u18

448
00:15:31,030 --> 00:15:33,939
environment that was almost architecture

449
00:15:32,410 --> 00:15:35,010
identical to the production environments

450
00:15:33,940 --> 00:15:38,130
so what happened one year

451
00:15:35,010 --> 00:15:40,770
later the incident count when they did a

452
00:15:38,130 --> 00:15:42,270
production release went down 90% the

453
00:15:40,770 --> 00:15:45,150
mean time to repair when things went

454
00:15:42,270 --> 00:15:47,010
wrong went down by 98 percent for me the

455
00:15:45,150 --> 00:15:48,689
most interesting telling an indicator is

456
00:15:47,010 --> 00:15:52,800
what happened to code deployment lead

457
00:15:48,690 --> 00:15:55,170
time the one year prior whenever they

458
00:15:52,800 --> 00:15:57,900
did a release imagine I went from 14

459
00:15:55,170 --> 00:16:00,360
days so 14 days of what I met a release

460
00:15:57,900 --> 00:16:01,740
team trapped in a war room panicking

461
00:16:00,360 --> 00:16:03,360
because things are going wrong customers

462
00:16:01,740 --> 00:16:05,010
complaining Zetas coming in saying are

463
00:16:03,360 --> 00:16:06,960
we done yet to which they would have to

464
00:16:05,010 --> 00:16:10,590
respond no we're not done yet we have 14

465
00:16:06,960 --> 00:16:12,540
days more to go right one year later the

466
00:16:10,590 --> 00:16:15,180
release was technically complete at 1:00

467
00:16:12,540 --> 00:16:16,709
p.m. right the Xbox has come out because

468
00:16:15,180 --> 00:16:20,010
they're just waiting for formal customer

469
00:16:16,710 --> 00:16:21,990
acceptance so it's great for dev ops

470
00:16:20,010 --> 00:16:25,680
great for the customers because it can

471
00:16:21,990 --> 00:16:27,300
get value in half the time and my claim

472
00:16:25,680 --> 00:16:29,130
is if you can do it for something that

473
00:16:27,300 --> 00:16:30,569
looks like this my claims that you can

474
00:16:29,130 --> 00:16:32,730
do this for anything that these

475
00:16:30,570 --> 00:16:36,690
principles transcend the technology

476
00:16:32,730 --> 00:16:38,550
stack that it runs on so obviously great

477
00:16:36,690 --> 00:16:40,260
for operations so let's go to the

478
00:16:38,550 --> 00:16:42,540
reciprocal some technical practices that

479
00:16:40,260 --> 00:16:43,860
affect developers this is still one of

480
00:16:42,540 --> 00:16:46,290
my favorite quotes from Patrick

481
00:16:43,860 --> 00:16:47,850
Lightbody in 2011 he said we found that

482
00:16:46,290 --> 00:16:48,360
when we woke up our developers at 2:00

483
00:16:47,850 --> 00:16:51,870
a.m.

484
00:16:48,360 --> 00:16:53,610
defects got fixed faster than ever

485
00:16:51,870 --> 00:16:56,190
Vernor Vogel said even more succinctly

486
00:16:53,610 --> 00:17:00,210
if you helped build it you must help run

487
00:16:56,190 --> 00:17:01,620
it and so I am aware that jackasses like

488
00:17:00,210 --> 00:17:03,930
me showing off jackass slides like this

489
00:17:01,620 --> 00:17:05,760
is probably mobilizing an entire

490
00:17:03,930 --> 00:17:08,339
generation of developers to hate DevOps

491
00:17:05,760 --> 00:17:10,230
right they will now sabotage any hint of

492
00:17:08,339 --> 00:17:12,119
a DevOps initiative because I think what

493
00:17:10,230 --> 00:17:15,360
they will say is we did not become

494
00:17:12,119 --> 00:17:17,909
developers to wear a pager right pagers

495
00:17:15,359 --> 00:17:19,260
are for ops people right the reason the

496
00:17:17,910 --> 00:17:20,970
whole reason why people became ops

497
00:17:19,260 --> 00:17:23,490
people was because you know they liked

498
00:17:20,970 --> 00:17:25,110
pagers right and so there's an internal

499
00:17:23,490 --> 00:17:27,630
consistency to that logic but I think

500
00:17:25,109 --> 00:17:30,199
the more telling narrative comes from

501
00:17:27,630 --> 00:17:33,240
Tim Tischler for many years he ran the

502
00:17:30,200 --> 00:17:35,610
DevOps initiative at Nike and he said as

503
00:17:33,240 --> 00:17:37,590
a career-long developer myself the most

504
00:17:35,610 --> 00:17:39,870
satisfying point of my career was when I

505
00:17:37,590 --> 00:17:42,030
got to write the code when I got to test

506
00:17:39,870 --> 00:17:44,580
it myself when you got when I got to

507
00:17:42,030 --> 00:17:46,230
push it into production myself when I

508
00:17:44,580 --> 00:17:47,370
could see the happy faces of my

509
00:17:46,230 --> 00:17:48,419
customers when it worked and when they

510
00:17:47,370 --> 00:17:49,590
could see their angry shaking

511
00:17:48,419 --> 00:17:53,789
fist when it didn't work and when I

512
00:17:49,590 --> 00:17:56,668
could fix it myself and which I thought

513
00:17:53,789 --> 00:17:58,830
was astonishing and just in and of self

514
00:17:56,669 --> 00:18:01,230
and he would then went on to relate to

515
00:17:58,830 --> 00:18:05,100
me that he said over the past ten years

516
00:18:01,230 --> 00:18:07,769
our ability to self-test self-deploying

517
00:18:05,100 --> 00:18:09,918
god forbid self fix has been diminished

518
00:18:07,769 --> 00:18:12,179
over time thanks to things like ITIL

519
00:18:09,919 --> 00:18:14,129
security and compliance right and by the

520
00:18:12,179 --> 00:18:17,159
way I came from those communities right

521
00:18:14,129 --> 00:18:18,869
thanks to jackasses like me he said it's

522
00:18:17,159 --> 00:18:21,600
taken almost all the joy out of

523
00:18:18,869 --> 00:18:23,158
development work and what is so

524
00:18:21,600 --> 00:18:25,230
interesting and paradoxical to me is

525
00:18:23,159 --> 00:18:26,970
that these type of practice of putting

526
00:18:25,230 --> 00:18:29,730
developers on page rotation actually

527
00:18:26,970 --> 00:18:31,559
allow us to bring joy back to developers

528
00:18:29,730 --> 00:18:33,509
increase their productivity and get far

529
00:18:31,559 --> 00:18:35,668
better reliability outcomes and security

530
00:18:33,509 --> 00:18:36,749
outcomes for them by the way how am i

531
00:18:35,669 --> 00:18:39,600
doing here so far am I being too

532
00:18:36,749 --> 00:18:42,239
cavalier about this claim thumbs up is

533
00:18:39,600 --> 00:18:44,580
this interesting and by the way just to

534
00:18:42,239 --> 00:18:46,980
show you that I'm not that gullible at

535
00:18:44,580 --> 00:18:49,080
least initially in the first year the

536
00:18:46,980 --> 00:18:50,909
state of DevOps report says humble and I

537
00:18:49,080 --> 00:18:52,649
we had a bet we asked who would have

538
00:18:50,909 --> 00:18:55,169
better deployment outcomes developers or

539
00:18:52,649 --> 00:18:57,359
ops people right and dev you know just

540
00:18:55,169 --> 00:18:58,889
being a dev lover right he said it would

541
00:18:57,359 --> 00:19:00,449
be developers right because they are

542
00:18:58,889 --> 00:19:02,609
closest to the work they understand how

543
00:19:00,450 --> 00:19:04,409
the pieces fit together right they would

544
00:19:02,609 --> 00:19:07,139
have better deployment outcomes and I

545
00:19:04,409 --> 00:19:09,779
argued that ops would for exactly the

546
00:19:07,139 --> 00:19:11,309
same reasons so we split the population

547
00:19:09,779 --> 00:19:12,869
into those where devs deployed versus

548
00:19:11,309 --> 00:19:14,879
those were ops deployed compared to

549
00:19:12,869 --> 00:19:17,970
change success rates and the surprising

550
00:19:14,879 --> 00:19:19,379
answer was that they were the same but

551
00:19:17,970 --> 00:19:21,960
there's statistically identical actually

552
00:19:19,379 --> 00:19:23,939
didn't matter who deployed who pushed

553
00:19:21,960 --> 00:19:25,619
the button what mattered was was the

554
00:19:23,940 --> 00:19:29,009
presence of version control automated

555
00:19:25,619 --> 00:19:30,629
testing telemetry the sense of a win-win

556
00:19:29,009 --> 00:19:32,580
relationship between dev and ops right

557
00:19:30,629 --> 00:19:34,379
those are what matters and if those are

558
00:19:32,580 --> 00:19:35,668
present they had better outcomes it

559
00:19:34,379 --> 00:19:38,340
actually didn't matter who pushed the

560
00:19:35,669 --> 00:19:41,489
button right so and thus I was convinced

561
00:19:38,340 --> 00:19:43,408
and it's not just me there's a growing

562
00:19:41,489 --> 00:19:45,029
body of people in the DevOps community

563
00:19:43,409 --> 00:19:47,429
not DevOps and the security they're

564
00:19:45,029 --> 00:19:49,649
saying that security is just as

565
00:19:47,429 --> 00:19:52,950
important talk about a pal he's the

566
00:19:49,649 --> 00:19:53,939
first technical fellow of Capital One he

567
00:19:52,950 --> 00:19:56,190
they call it

568
00:19:53,940 --> 00:19:58,049
DevOps sec they're right and what I love

569
00:19:56,190 --> 00:20:01,230
about this is that this is my mind is

570
00:19:58,049 --> 00:20:02,210
the I'm not an ideal embodiment of how

571
00:20:01,230 --> 00:20:04,700
he integrates true

572
00:20:02,210 --> 00:20:05,990
objectives into everyone's daily work so

573
00:20:04,700 --> 00:20:07,730
we have all the preventive controls

574
00:20:05,990 --> 00:20:09,590
living in a shared source store

575
00:20:07,730 --> 00:20:11,270
depository so anyone can pull from those

576
00:20:09,590 --> 00:20:12,830
and inherit the best-known understanding

577
00:20:11,270 --> 00:20:15,590
of the how to solve a problem whether

578
00:20:12,830 --> 00:20:17,210
it's how to do dedications you know

579
00:20:15,590 --> 00:20:19,699
password policies or configuration

580
00:20:17,210 --> 00:20:21,320
settings alongside automated testing

581
00:20:19,700 --> 00:20:23,480
they're doing things like systemic code

582
00:20:21,320 --> 00:20:25,550
analysis so we can find Balmer abilities

583
00:20:23,480 --> 00:20:27,470
before it gets into production alongside

584
00:20:25,550 --> 00:20:29,330
production monitoring ruining dynamic

585
00:20:27,470 --> 00:20:31,220
testing so we can find out about vanilla

586
00:20:29,330 --> 00:20:33,679
vulnerabilities before attackers do and

587
00:20:31,220 --> 00:20:37,060
you know the that responsibility is held

588
00:20:33,680 --> 00:20:39,530
in by developers it's not security

589
00:20:37,060 --> 00:20:41,330
solely responsible for it's everybody's

590
00:20:39,530 --> 00:20:43,550
job and I think this was so exciting to

591
00:20:41,330 --> 00:20:44,840
me about DevOps it's not just Deb versus

592
00:20:43,550 --> 00:20:46,730
ops versus security you know

593
00:20:44,840 --> 00:20:48,919
increasingly as dev and ops and security

594
00:20:46,730 --> 00:20:51,590
all working together as fellow engineers

595
00:20:48,920 --> 00:20:53,870
trying to achieve a common objective so

596
00:20:51,590 --> 00:20:54,980
surprise number one was the business

597
00:20:53,870 --> 00:20:56,750
value that DevOps creates surprise

598
00:20:54,980 --> 00:20:59,630
number two was just how good it is for

599
00:20:56,750 --> 00:21:02,150
dev and ops and security surprise number

600
00:20:59,630 --> 00:21:04,370
three is this there's a metric that

601
00:21:02,150 --> 00:21:07,400
looks very tactical it's like it looks

602
00:21:04,370 --> 00:21:09,080
laughably Teknik tactical and yet I now

603
00:21:07,400 --> 00:21:11,300
believe it is the most strategic measure

604
00:21:09,080 --> 00:21:13,520
of any technology organization and its

605
00:21:11,300 --> 00:21:15,919
code deployment lead time so I mentioned

606
00:21:13,520 --> 00:21:19,400
in the DevOps community we love this

607
00:21:15,920 --> 00:21:21,860
metric deploys per day but in the lean

608
00:21:19,400 --> 00:21:23,510
community that is obviously not their

609
00:21:21,860 --> 00:21:26,659
favorite metric their favorite metric is

610
00:21:23,510 --> 00:21:28,400
lead time so they would in fact there is

611
00:21:26,660 --> 00:21:30,020
this deeply held belief in the

612
00:21:28,400 --> 00:21:32,420
manufacturing community in lean that

613
00:21:30,020 --> 00:21:34,879
goes back almost sixty years that says

614
00:21:32,420 --> 00:21:37,580
lead time is the most accurate predictor

615
00:21:34,880 --> 00:21:39,760
of internal quality external customer

616
00:21:37,580 --> 00:21:42,620
satisfaction and even employee happiness

617
00:21:39,760 --> 00:21:45,440
and we found an hour of work spanning

618
00:21:42,620 --> 00:21:46,939
26,000 respondents that lead time has

619
00:21:45,440 --> 00:21:50,060
this sort of magical predictive

620
00:21:46,940 --> 00:21:51,260
capabilities in our work as well and so

621
00:21:50,060 --> 00:21:53,629
in manufacturing they would probably

622
00:21:51,260 --> 00:21:56,120
measure lead time as we start the clock

623
00:21:53,630 --> 00:21:58,400
when the customer orders and we stop the

624
00:21:56,120 --> 00:21:59,870
clock when the customer receives what

625
00:21:58,400 --> 00:22:01,460
they ordered or maybe a plant manager

626
00:21:59,870 --> 00:22:03,500
would zoom in a little bit and say we

627
00:22:01,460 --> 00:22:05,360
start the clock when we have raw

628
00:22:03,500 --> 00:22:07,190
materials that one in the plants and we

629
00:22:05,360 --> 00:22:09,919
stop the clock when those finished goods

630
00:22:07,190 --> 00:22:13,310
on the way to the customer so in our

631
00:22:09,920 --> 00:22:15,290
research we chose some defined lead time

632
00:22:13,310 --> 00:22:16,070
as it starts when a change is put into

633
00:22:15,290 --> 00:22:18,379
version control

634
00:22:16,070 --> 00:22:20,480
as it goes through testing as it goes

635
00:22:18,380 --> 00:22:22,760
through deployment and so that customers

636
00:22:20,480 --> 00:22:24,530
are actually getting value and I think

637
00:22:22,760 --> 00:22:26,360
that might beg the question why do we

638
00:22:24,530 --> 00:22:28,100
start the lead time clock at version

639
00:22:26,360 --> 00:22:30,709
control right why don't we start it

640
00:22:28,100 --> 00:22:32,419
earlier when a dev accepts work to go

641
00:22:30,710 --> 00:22:34,250
into implementation or maybe when an

642
00:22:32,420 --> 00:22:37,070
idea is first conceived right and those

643
00:22:34,250 --> 00:22:39,770
are both valid places start any sort of

644
00:22:37,070 --> 00:22:41,810
lead time measurement but the point of

645
00:22:39,770 --> 00:22:44,600
which changes up into version control in

646
00:22:41,810 --> 00:22:46,639
our mind represents a very special place

647
00:22:44,600 --> 00:22:49,159
because they divide the technology value

648
00:22:46,640 --> 00:22:51,740
stream into two qualitatively different

649
00:22:49,160 --> 00:22:54,620
parts of work so everything to the left

650
00:22:51,740 --> 00:22:56,660
of code commit is design and development

651
00:22:54,620 --> 00:22:58,429
so the nature of design development work

652
00:22:56,660 --> 00:23:00,230
is that often we're doing work for the

653
00:22:58,430 --> 00:23:01,970
first time maybe never again to be

654
00:23:00,230 --> 00:23:04,280
repeated right so think about Facebook

655
00:23:01,970 --> 00:23:06,980
chat right it took one year to do right

656
00:23:04,280 --> 00:23:08,360
and so the lead times are very variable

657
00:23:06,980 --> 00:23:09,590
right because we never get a chance to

658
00:23:08,360 --> 00:23:11,110
practice and I think that's just the

659
00:23:09,590 --> 00:23:13,510
nature of design and development work

660
00:23:11,110 --> 00:23:15,260
however everything to the right of

661
00:23:13,510 --> 00:23:17,150
changes being put into version control

662
00:23:15,260 --> 00:23:18,950
is testing and operations output

663
00:23:17,150 --> 00:23:21,650
security in there as well or a good

664
00:23:18,950 --> 00:23:24,350
chunk of security as well because we

665
00:23:21,650 --> 00:23:26,030
want testing and deployment and a lot of

666
00:23:24,350 --> 00:23:27,620
information security to have the exact

667
00:23:26,030 --> 00:23:29,660
opposite characteristics we want them to

668
00:23:27,620 --> 00:23:31,340
happen not once a year we want them to

669
00:23:29,660 --> 00:23:33,710
happen all the time we want to happen

670
00:23:31,340 --> 00:23:36,110
quickly repeatedly ideally completely

671
00:23:33,710 --> 00:23:40,070
mechanistically right the same time

672
00:23:36,110 --> 00:23:41,659
every time and so code deployment need

673
00:23:40,070 --> 00:23:43,159
time simultaneously predicts the

674
00:23:41,660 --> 00:23:46,070
effectiveness of testing and operations

675
00:23:43,160 --> 00:23:48,370
but also predicts how quickly can we

676
00:23:46,070 --> 00:23:51,350
give developers feedback on their work

677
00:23:48,370 --> 00:23:53,419
so if I'm a developer and I make a

678
00:23:51,350 --> 00:23:56,000
mistake or I introduce a vulnerability

679
00:23:53,420 --> 00:23:57,800
and I check it into version control if

680
00:23:56,000 --> 00:23:59,750
the first time when I could detect that

681
00:23:57,800 --> 00:24:01,669
error is nine months later during

682
00:23:59,750 --> 00:24:04,280
integration testing or when the security

683
00:24:01,670 --> 00:24:06,230
team sends me a PDF file all right the

684
00:24:04,280 --> 00:24:09,560
the link between cause and effect has

685
00:24:06,230 --> 00:24:11,570
almost vanished right in fact arguably

686
00:24:09,560 --> 00:24:13,550
if someone broke the code right it's not

687
00:24:11,570 --> 00:24:15,230
me right it's probably the 99 other

688
00:24:13,550 --> 00:24:16,820
developers who are working on that piece

689
00:24:15,230 --> 00:24:19,690
of functionality right and so this is

690
00:24:16,820 --> 00:24:22,790
the time to detect time to fix are

691
00:24:19,690 --> 00:24:25,880
exponentially harder what we want is in

692
00:24:22,790 --> 00:24:27,770
the ideal is that the the instant I

693
00:24:25,880 --> 00:24:29,510
introduce that change into version

694
00:24:27,770 --> 00:24:29,760
control that should kick off automated

695
00:24:29,510 --> 00:24:31,560
tests

696
00:24:29,760 --> 00:24:32,850
thing and so I should detect that error

697
00:24:31,560 --> 00:24:35,159
within minutes

698
00:24:32,850 --> 00:24:38,100
worst case hours right and so that

699
00:24:35,160 --> 00:24:39,570
allows me to not only find my error but

700
00:24:38,100 --> 00:24:42,149
it has also prevents me from making that

701
00:24:39,570 --> 00:24:44,520
same mistake you know every day for the

702
00:24:42,150 --> 00:24:46,590
next year and the same thing I think

703
00:24:44,520 --> 00:24:49,080
holds absolutely for security as well so

704
00:24:46,590 --> 00:24:51,480
code deployment lead time Simon stands

705
00:24:49,080 --> 00:24:53,370
the affects predicts effectiveness of

706
00:24:51,480 --> 00:24:54,960
testing operations and it predicts how

707
00:24:53,370 --> 00:24:56,909
quickly can we give feedback to

708
00:24:54,960 --> 00:24:58,710
developers on their work so not only can

709
00:24:56,910 --> 00:24:59,970
they learn right from mistakes but also

710
00:24:58,710 --> 00:25:04,320
how quickly can they learn from

711
00:24:59,970 --> 00:25:06,360
customers so how am i doing here so far

712
00:25:04,320 --> 00:25:10,980
is this interesting yeah

713
00:25:06,360 --> 00:25:13,169
so looks tactical and yet I believe it

714
00:25:10,980 --> 00:25:15,390
is the most important measure of any

715
00:25:13,170 --> 00:25:17,220
technology organization and it turns out

716
00:25:15,390 --> 00:25:19,740
there's actually one question you can

717
00:25:17,220 --> 00:25:21,930
ask that predicts all the metrics I've

718
00:25:19,740 --> 00:25:23,550
shared with startling accuracy it

719
00:25:21,930 --> 00:25:26,480
predicts the presence of all the

720
00:25:23,550 --> 00:25:29,100
technical practices cultural norms and

721
00:25:26,480 --> 00:25:31,410
architecture and you can predict all

722
00:25:29,100 --> 00:25:32,040
that with one question on a scale of one

723
00:25:31,410 --> 00:25:34,050
to seven

724
00:25:32,040 --> 00:25:38,010
to what degree do I fear doing

725
00:25:34,050 --> 00:25:40,830
deployments right and it's like a line

726
00:25:38,010 --> 00:25:43,230
you plot that on the XS that you put any

727
00:25:40,830 --> 00:25:45,510
other measurement on the y-axis and if

728
00:25:43,230 --> 00:25:47,310
it's one one is you know we have no fear

729
00:25:45,510 --> 00:25:49,260
at all we do them all the time seven is

730
00:25:47,310 --> 00:25:50,970
we have existential fear of doing

731
00:25:49,260 --> 00:25:56,070
deployments and that's why we do them in

732
00:25:50,970 --> 00:25:58,560
our ideal never right and so there's a

733
00:25:56,070 --> 00:26:01,350
surprising amount of power just a NASA

734
00:25:58,560 --> 00:26:04,800
net one question that spans dev QA

735
00:26:01,350 --> 00:26:06,179
operations and InfoSec so surprise

736
00:26:04,800 --> 00:26:07,620
number one was a business value that

737
00:26:06,180 --> 00:26:09,330
DevOps creates surprise number two how

738
00:26:07,620 --> 00:26:11,939
good is for DevOps and security surprise

739
00:26:09,330 --> 00:26:14,370
number three is this importance of code

740
00:26:11,940 --> 00:26:17,310
deployment lead time how surprise number

741
00:26:14,370 --> 00:26:18,810
four is the surprising implication of

742
00:26:17,310 --> 00:26:20,760
Conway's law on everything that we

743
00:26:18,810 --> 00:26:25,889
talked about and so it's my observation

744
00:26:20,760 --> 00:26:27,870
that around 2012 any DevOps meetup

745
00:26:25,890 --> 00:26:30,510
conference someone would be talking

746
00:26:27,870 --> 00:26:33,600
about Conway's law and I quickly learned

747
00:26:30,510 --> 00:26:36,240
that you know what Collins law is the

748
00:26:33,600 --> 00:26:37,740
most popular paraphrase of it that came

749
00:26:36,240 --> 00:26:39,840
from Eric s Raymond who wrote the book

750
00:26:37,740 --> 00:26:42,119
the Kathina on the bazaar about the open

751
00:26:39,840 --> 00:26:44,999
source movement he

752
00:26:42,119 --> 00:26:47,039
I said if you get a four pass if you get

753
00:26:44,999 --> 00:26:49,679
four groups working on a compiler you

754
00:26:47,039 --> 00:26:51,569
will get a four pass compiler this is a

755
00:26:49,679 --> 00:26:55,619
summarize as a word that dr. Melvin

756
00:26:51,569 --> 00:26:59,249
Conway did in 1968 where he showed that

757
00:26:55,619 --> 00:27:01,799
there is a stunning link between how

758
00:26:59,249 --> 00:27:04,529
teams are divided and the outputs they

759
00:27:01,799 --> 00:27:06,239
create so I could certainly by the

760
00:27:04,529 --> 00:27:07,889
fourth time I had heard this I could

761
00:27:06,239 --> 00:27:09,659
repeat that back to you but what I could

762
00:27:07,889 --> 00:27:11,639
not do is actually tell you how should

763
00:27:09,659 --> 00:27:14,369
that inform how we should design or

764
00:27:11,639 --> 00:27:17,279
execute our daily work until I read the

765
00:27:14,369 --> 00:27:18,749
story about the birth and death of exes

766
00:27:17,279 --> 00:27:21,419
proudly I would love to see if this

767
00:27:18,749 --> 00:27:23,729
resonates with you Mike from your Etsy

768
00:27:21,419 --> 00:27:26,399
experience but essentially this is a

769
00:27:23,729 --> 00:27:29,159
story about how teams work together to

770
00:27:26,399 --> 00:27:33,089
create value so back in the bad old days

771
00:27:29,159 --> 00:27:34,559
of Etsy in 2008 one of the big problems

772
00:27:33,089 --> 00:27:36,269
they looked at and barely in 2008 this

773
00:27:34,559 --> 00:27:38,158
was like the bad old days of Etsy right

774
00:27:36,269 --> 00:27:40,499
they these are this is day when like

775
00:27:38,159 --> 00:27:43,109
know what most people said if we have to

776
00:27:40,499 --> 00:27:45,089
go through another Christmas holiday

777
00:27:43,109 --> 00:27:48,119
season like this we're out of here right

778
00:27:45,089 --> 00:27:50,158
but even in 2008 they saw this big

779
00:27:48,119 --> 00:27:52,139
problem where that in order to ship any

780
00:27:50,159 --> 00:27:53,369
sort of functionality to the user two

781
00:27:52,139 --> 00:27:55,498
teams had to work together

782
00:27:53,369 --> 00:27:57,839
the devs would work in the front end and

783
00:27:55,499 --> 00:27:59,759
that would be in PHP where the DBAs

784
00:27:57,839 --> 00:28:01,769
would have to work on the backend and

785
00:27:59,759 --> 00:28:04,139
then that was inside of the store

786
00:28:01,769 --> 00:28:05,999
procedures inside of Postgres and so

787
00:28:04,139 --> 00:28:07,109
what they observed was that when you

788
00:28:05,999 --> 00:28:09,539
have two teams to have to work together

789
00:28:07,109 --> 00:28:12,089
they have to communicate coordinate

790
00:28:09,539 --> 00:28:15,019
prioritize sometimes conflict deconflict

791
00:28:12,089 --> 00:28:17,309
and Marshall and so their goal was to

792
00:28:15,019 --> 00:28:19,259
see if they could make these teams to be

793
00:28:17,309 --> 00:28:20,399
able to work more independently right

794
00:28:19,259 --> 00:28:22,379
and so that's why they created something

795
00:28:20,399 --> 00:28:24,658
called sprouter it's short for stored

796
00:28:22,379 --> 00:28:26,369
procedure router the idea was that the

797
00:28:24,659 --> 00:28:28,409
devs Denis bas could work independently

798
00:28:26,369 --> 00:28:32,458
and they would meet in the middle inside

799
00:28:28,409 --> 00:28:34,739
of sprouter and as they was ian Malpass

800
00:28:32,459 --> 00:28:36,869
said he said this required a degree of

801
00:28:34,739 --> 00:28:39,119
synchronization and coordination that

802
00:28:36,869 --> 00:28:41,129
was rarely achieved to the degree that

803
00:28:39,119 --> 00:28:43,438
almost every deployment became a mini

804
00:28:41,129 --> 00:28:44,488
outage right and so what's so

805
00:28:43,439 --> 00:28:46,589
interesting to me about this is that

806
00:28:44,489 --> 00:28:48,089
Conway's law would predict this right

807
00:28:46,589 --> 00:28:51,149
does their we want from two teams having

808
00:28:48,089 --> 00:28:52,918
to work together to three teams right

809
00:28:51,149 --> 00:28:54,928
the amount of communication coordination

810
00:28:52,919 --> 00:28:55,650
goes up deployment lead times go up

811
00:28:54,929 --> 00:28:57,630
right

812
00:28:55,650 --> 00:29:00,270
and deployment outcome success outcomes

813
00:28:57,630 --> 00:29:04,380
go down so as part of the great rebirth

814
00:29:00,270 --> 00:29:05,790
of engineering greatness at Etsy one of

815
00:29:04,380 --> 00:29:07,770
their goals was to kill sprouter

816
00:29:05,790 --> 00:29:09,570
what they want to do was to enable

817
00:29:07,770 --> 00:29:11,100
development teams to fully and

818
00:29:09,570 --> 00:29:13,110
independently be able to do everything

819
00:29:11,100 --> 00:29:16,139
they need to do in the front end so they

820
00:29:13,110 --> 00:29:18,149
used an object relational model so that

821
00:29:16,140 --> 00:29:20,460
they could make all the changes inside a

822
00:29:18,150 --> 00:29:22,470
PHP right and what they found was that

823
00:29:20,460 --> 00:29:24,000
in any every place of the property and

824
00:29:22,470 --> 00:29:26,970
the Etsy property way they killed

825
00:29:24,000 --> 00:29:28,650
sprouter suddenly code deployment lead

826
00:29:26,970 --> 00:29:30,570
times went way down and deployment

827
00:29:28,650 --> 00:29:32,070
success went way up right and again

828
00:29:30,570 --> 00:29:33,720
Conway's law would suggest this right

829
00:29:32,070 --> 00:29:35,550
because as we went from three teams down

830
00:29:33,720 --> 00:29:36,720
to one team right with one team you

831
00:29:35,550 --> 00:29:38,460
don't have to communicate and coordinate

832
00:29:36,720 --> 00:29:40,020
with anybody that team is totally

833
00:29:38,460 --> 00:29:43,140
self-sufficient and able again to

834
00:29:40,020 --> 00:29:46,170
production right and so the lesson to me

835
00:29:43,140 --> 00:29:48,870
here is there's not enough to move boxes

836
00:29:46,170 --> 00:29:50,670
around on an org chart we must also have

837
00:29:48,870 --> 00:29:52,739
we must also have an architecture that

838
00:29:50,670 --> 00:29:55,350
is congruent to that that enables these

839
00:29:52,740 --> 00:29:59,700
teams to work independently and so

840
00:29:55,350 --> 00:30:01,530
what's Nets example that's the numbers

841
00:29:59,700 --> 00:30:03,750
are very small right the worst case is

842
00:30:01,530 --> 00:30:05,580
three teams right in most modern

843
00:30:03,750 --> 00:30:06,750
organizations it's not three teams that

844
00:30:05,580 --> 00:30:08,939
have to work together it's probably like

845
00:30:06,750 --> 00:30:10,380
50 teams so it's the DBA is it's a

846
00:30:08,940 --> 00:30:12,990
network engineers it's a firewall

847
00:30:10,380 --> 00:30:15,360
engineers it's the middleware people and

848
00:30:12,990 --> 00:30:16,800
God forbid security change approval and

849
00:30:15,360 --> 00:30:19,800
all these people right so it doesn't

850
00:30:16,800 --> 00:30:22,530
take much to go wrong right you know for

851
00:30:19,800 --> 00:30:26,399
us to have lead times measured in weeks

852
00:30:22,530 --> 00:30:28,980
months or quarters and this represents

853
00:30:26,400 --> 00:30:30,690
an architectural problem so one of the

854
00:30:28,980 --> 00:30:33,090
big learnings for us in the state of

855
00:30:30,690 --> 00:30:35,070
Davos report 2017 was the significance

856
00:30:33,090 --> 00:30:37,080
of architecture we found that these

857
00:30:35,070 --> 00:30:39,270
things were actually the top predictors

858
00:30:37,080 --> 00:30:41,159
of performance to what degree can teams

859
00:30:39,270 --> 00:30:42,540
make large-scale changes to their parts

860
00:30:41,160 --> 00:30:44,550
the system without requiring permission

861
00:30:42,540 --> 00:30:46,020
from anybody else to what degree can

862
00:30:44,550 --> 00:30:47,580
they complete their work without a lot

863
00:30:46,020 --> 00:30:49,139
of fine grained communication and

864
00:30:47,580 --> 00:30:51,240
coordination with other people outside

865
00:30:49,140 --> 00:30:53,310
their team can they deploy release on

866
00:30:51,240 --> 00:30:55,290
demand can they do their testing on

867
00:30:53,310 --> 00:30:56,730
demand without use of scarce integration

868
00:30:55,290 --> 00:31:00,720
test environments of which there are

869
00:30:56,730 --> 00:31:02,010
never enough right and you know if all

870
00:31:00,720 --> 00:31:03,360
those things are true then of course

871
00:31:02,010 --> 00:31:05,100
they'll be able to do deployments during

872
00:31:03,360 --> 00:31:08,100
normal business hours with negligible

873
00:31:05,100 --> 00:31:10,020
downtime so the reason why I think this

874
00:31:08,100 --> 00:31:12,959
is so surprising to me right is that in

875
00:31:10,020 --> 00:31:15,120
my day at tripwire for 13 years right

876
00:31:12,960 --> 00:31:17,130
we were always trained that it was safe

877
00:31:15,120 --> 00:31:20,159
to ignore architects especially chief

878
00:31:17,130 --> 00:31:22,020
architects because yeah they would live

879
00:31:20,160 --> 00:31:23,580
in their ivory tower right they would

880
00:31:22,020 --> 00:31:24,990
come out only once a year publish one

881
00:31:23,580 --> 00:31:26,850
PowerPoint slide send it to everybody

882
00:31:24,990 --> 00:31:29,430
and they would go back into the aviary

883
00:31:26,850 --> 00:31:30,540
Tower right never to be seen again right

884
00:31:29,430 --> 00:31:32,580
and I think that's just another way of

885
00:31:30,540 --> 00:31:34,320
saying they didn't impact how people do

886
00:31:32,580 --> 00:31:35,760
their daily work right and I think a lot

887
00:31:34,320 --> 00:31:38,040
of security people could fit into this

888
00:31:35,760 --> 00:31:40,440
category and yet we now know that

889
00:31:38,040 --> 00:31:42,330
actually architecture is Damone the most

890
00:31:40,440 --> 00:31:43,680
dominant ways that predicts IT

891
00:31:42,330 --> 00:31:45,600
performance and organizational

892
00:31:43,680 --> 00:31:48,840
performance and so I think this is why

893
00:31:45,600 --> 00:31:51,000
it's this shows why we love platform so

894
00:31:48,840 --> 00:31:52,320
much in the ideal these development

895
00:31:51,000 --> 00:31:54,030
teams should be able to do almost

896
00:31:52,320 --> 00:31:55,889
everything self-service and on-demand

897
00:31:54,030 --> 00:31:57,780
they don't need a ticket they don't need

898
00:31:55,890 --> 00:32:00,090
a wait and that actually creates

899
00:31:57,780 --> 00:32:02,399
conditions where they get immediacy and

900
00:32:00,090 --> 00:32:04,980
fast feedback they get focus and flow

901
00:32:02,400 --> 00:32:08,030
and even joy right just as like I was

902
00:32:04,980 --> 00:32:10,320
mentioned by the gentleman from Nike so

903
00:32:08,030 --> 00:32:11,730
everything from monitoring deployment

904
00:32:10,320 --> 00:32:13,560
environment creation security scans

905
00:32:11,730 --> 00:32:17,880
deployment all the things we can do

906
00:32:13,560 --> 00:32:19,500
those things safely now so there's all

907
00:32:17,880 --> 00:32:22,610
one other story I want to share with you

908
00:32:19,500 --> 00:32:25,530
and the fact this was one of the most

909
00:32:22,610 --> 00:32:28,139
startling and the words existential

910
00:32:25,530 --> 00:32:30,480
despair comes to mind one of my mentors

911
00:32:28,140 --> 00:32:32,160
her name is Elizabeth Hendrickson she's

912
00:32:30,480 --> 00:32:34,430
pioneered so much of the automated

913
00:32:32,160 --> 00:32:36,960
testing practices over the last 15 years

914
00:32:34,430 --> 00:32:39,270
she told me about how she was a part of

915
00:32:36,960 --> 00:32:41,550
something called the Los Altos workshop

916
00:32:39,270 --> 00:32:43,800
for software testing and so this was an

917
00:32:41,550 --> 00:32:46,110
amazing group that met for over a decade

918
00:32:43,800 --> 00:32:48,899
they had 60 workshops this was the best

919
00:32:46,110 --> 00:32:50,280
software QA people in the game know

920
00:32:48,900 --> 00:32:52,260
consultants allowed these are people who

921
00:32:50,280 --> 00:32:54,030
actually owned line responsibility for

922
00:32:52,260 --> 00:32:56,910
QA for some most important properties in

923
00:32:54,030 --> 00:32:58,649
the planet and she said we did many

924
00:32:56,910 --> 00:33:01,350
exercises but there was one she members

925
00:32:58,650 --> 00:33:03,810
very very well which was they asked what

926
00:33:01,350 --> 00:33:07,679
was the dev to QA ratio for your best

927
00:33:03,810 --> 00:33:10,200
project and your worst project and there

928
00:33:07,680 --> 00:33:14,700
was a surprising amount of unanimity in

929
00:33:10,200 --> 00:33:17,160
the answers for people's best for the

930
00:33:14,700 --> 00:33:19,170
people's worst projects had often the

931
00:33:17,160 --> 00:33:19,660
highest dev QA ratios right sometimes

932
00:33:19,170 --> 00:33:22,150
approaching

933
00:33:19,660 --> 00:33:24,850
to one but was even more stunning was

934
00:33:22,150 --> 00:33:26,290
people said for my best project the

935
00:33:24,850 --> 00:33:29,830
answer that kept on coming up over and

936
00:33:26,290 --> 00:33:31,570
over again was we had no testers okay so

937
00:33:29,830 --> 00:33:34,300
this is prone to misinterpretation

938
00:33:31,570 --> 00:33:36,490
but in my mind this is so profound

939
00:33:34,300 --> 00:33:39,310
because essentially what she said was it

940
00:33:36,490 --> 00:33:42,480
should she said is big learning was we

941
00:33:39,310 --> 00:33:44,590
found that when we had no testers

942
00:33:42,480 --> 00:33:46,780
everybody knew that there was no one

943
00:33:44,590 --> 00:33:49,419
else who's gonna find their problems for

944
00:33:46,780 --> 00:33:51,520
them right it was our job and I think

945
00:33:49,420 --> 00:33:54,430
this could extrapolate from this is that

946
00:33:51,520 --> 00:33:56,200
we have the best security when there is

947
00:33:54,430 --> 00:33:58,510
no external security group who's gonna

948
00:33:56,200 --> 00:33:59,890
find our security problems for us and I

949
00:33:58,510 --> 00:34:01,510
think it means that our expertise as

950
00:33:59,890 --> 00:34:03,850
security professionals is going to be

951
00:34:01,510 --> 00:34:05,950
putting that in two platforms right or

952
00:34:03,850 --> 00:34:08,230
embedding our expertise into teams right

953
00:34:05,950 --> 00:34:10,000
and by doing that we help developers

954
00:34:08,230 --> 00:34:11,260
fully own both operational

955
00:34:10,000 --> 00:34:14,590
responsibilities and security

956
00:34:11,260 --> 00:34:16,030
responsibilities so surprise number one

957
00:34:14,590 --> 00:34:17,560
the business value that these patterns

958
00:34:16,030 --> 00:34:19,840
create surprise number two is great for

959
00:34:17,560 --> 00:34:21,850
DevOps and security and by the way I

960
00:34:19,840 --> 00:34:24,310
think this actually lends to more

961
00:34:21,850 --> 00:34:25,690
satisfaction for security professionals

962
00:34:24,310 --> 00:34:27,909
right we get to be coaches and

963
00:34:25,690 --> 00:34:29,230
consultants not the people with the you

964
00:34:27,909 --> 00:34:30,520
know badges flashing them at people

965
00:34:29,230 --> 00:34:33,190
trying to get them to do something that

966
00:34:30,520 --> 00:34:34,870
they don't want to do surprise number

967
00:34:33,190 --> 00:34:36,100
three was Conway's law so as I'm through

968
00:34:34,870 --> 00:34:37,418
this could lead times surprise number

969
00:34:36,100 --> 00:34:43,569
four is Conway's law surprise number

970
00:34:37,418 --> 00:34:45,609
five is this is that I think academics

971
00:34:43,570 --> 00:34:47,110
ten years from now when they look back

972
00:34:45,610 --> 00:34:48,880
they will say there's something

973
00:34:47,110 --> 00:34:50,679
genuinely transformative that happened

974
00:34:48,880 --> 00:34:52,510
around this time clouds gonna be a part

975
00:34:50,679 --> 00:34:53,470
of it but I think you know agile is

976
00:34:52,510 --> 00:34:54,810
certainly gonna be a part of it but I

977
00:34:53,469 --> 00:34:58,000
think the dominant narrative will be

978
00:34:54,810 --> 00:34:59,980
DevOps and but I think they'll also say

979
00:34:58,000 --> 00:35:01,960
that DevOps was something part of

980
00:34:59,980 --> 00:35:03,400
something much much larger and I think

981
00:35:01,960 --> 00:35:05,710
they're gonna say it was a part of a

982
00:35:03,400 --> 00:35:07,930
larger category they'll probably call it

983
00:35:05,710 --> 00:35:09,220
dynamic learning organizations and the

984
00:35:07,930 --> 00:35:12,040
most famous example of a dynamic

985
00:35:09,220 --> 00:35:14,080
learning organization is Toyota and it's

986
00:35:12,040 --> 00:35:18,580
family of suppliers my favorite

987
00:35:14,080 --> 00:35:20,529
authority on this is dr. Steven Speer he

988
00:35:18,580 --> 00:35:23,049
wrote probably the most famous Harvard

989
00:35:20,530 --> 00:35:25,720
Business Review report of all time I

990
00:35:23,050 --> 00:35:28,030
called decoding the DNA of the Toyota

991
00:35:25,720 --> 00:35:29,200
Production system in 1999 this was

992
00:35:28,030 --> 00:35:30,610
actually based on his PhD dissertation

993
00:35:29,200 --> 00:35:32,439
that he did at the Harvard Business

994
00:35:30,610 --> 00:35:33,340
School where as part of that he actually

995
00:35:32,440 --> 00:35:35,200
worked

996
00:35:33,340 --> 00:35:38,710
the assembly line of a tier 1 Toyota

997
00:35:35,200 --> 00:35:40,330
supplier for six months in fact what was

998
00:35:38,710 --> 00:35:42,250
interesting is that the Toyo executives

999
00:35:40,330 --> 00:35:44,200
let him do this but he said they was

1000
00:35:42,250 --> 00:35:46,450
only under one condition he must first

1001
00:35:44,200 --> 00:35:49,960
work at an American big three auto plant

1002
00:35:46,450 --> 00:35:51,279
for 30 days essentially saying you know

1003
00:35:49,960 --> 00:35:52,960
you're gonna see many interesting things

1004
00:35:51,280 --> 00:35:55,180
here but you won't appreciate them until

1005
00:35:52,960 --> 00:35:57,490
you live in a more traditional work

1006
00:35:55,180 --> 00:35:58,839
system so over the years he's extended

1007
00:35:57,490 --> 00:36:00,129
his work beyond just manufacturing

1008
00:35:58,840 --> 00:36:02,470
that's highly repetitive highly

1009
00:36:00,130 --> 00:36:03,940
mechanistic two things that are wildly

1010
00:36:02,470 --> 00:36:06,040
different things like engine design a

1011
00:36:03,940 --> 00:36:09,400
Pratt and Whitney to the safety culture

1012
00:36:06,040 --> 00:36:11,170
at Alcoa to the design and operations of

1013
00:36:09,400 --> 00:36:14,080
all nuclear reactors in the US and ABC

1014
00:36:11,170 --> 00:36:16,900
going fleets and he said that designing

1015
00:36:14,080 --> 00:36:18,490
perfectly safe systems is likely beyond

1016
00:36:16,900 --> 00:36:20,110
our abilities and I'll just pause for a

1017
00:36:18,490 --> 00:36:21,700
moment say I don't think there's any

1018
00:36:20,110 --> 00:36:24,220
work more dangerous in the work that we

1019
00:36:21,700 --> 00:36:26,439
do you know because one of the marks of

1020
00:36:24,220 --> 00:36:28,839
dangerous unsafe systems is that small

1021
00:36:26,440 --> 00:36:30,520
changes can have global catastrophic

1022
00:36:28,840 --> 00:36:31,990
impact alright so the thing about the

1023
00:36:30,520 --> 00:36:34,270
Hawaii civil defense emergencies think

1024
00:36:31,990 --> 00:36:35,890
about the eff Equifax breach think about

1025
00:36:34,270 --> 00:36:37,450
the shutdown of British Airways for

1026
00:36:35,890 --> 00:36:40,540
three days that stranded 70,000

1027
00:36:37,450 --> 00:36:41,980
passengers in the UK for three days you

1028
00:36:40,540 --> 00:36:44,290
know those are all March they were very

1029
00:36:41,980 --> 00:36:46,180
unsafe systems but even in our work safe

1030
00:36:44,290 --> 00:36:50,050
systems are close to achievable when

1031
00:36:46,180 --> 00:36:52,629
four conditions are met you have to see

1032
00:36:50,050 --> 00:36:54,640
problems as they occur right so you know

1033
00:36:52,630 --> 00:36:56,170
the idea is that we want to see as

1034
00:36:54,640 --> 00:36:58,270
quickly as possible where work as

1035
00:36:56,170 --> 00:37:00,040
designed does not actually work in real

1036
00:36:58,270 --> 00:37:01,750
life right so that's like assertion

1037
00:37:00,040 --> 00:37:03,610
statements in code which is actually

1038
00:37:01,750 --> 00:37:04,570
kind of an interesting thing there's and

1039
00:37:03,610 --> 00:37:06,520
we're actually saying it's actually

1040
00:37:04,570 --> 00:37:08,380
better to kill the program than to let

1041
00:37:06,520 --> 00:37:11,200
it operate when we're starting to drift

1042
00:37:08,380 --> 00:37:14,050
from you know known assertions that's

1043
00:37:11,200 --> 00:37:16,870
where we have telemetry for everything

1044
00:37:14,050 --> 00:37:18,850
in production and Etsy is probably one

1045
00:37:16,870 --> 00:37:20,440
of those famous examples of this it's

1046
00:37:18,850 --> 00:37:22,240
not enough to see problems as they occur

1047
00:37:20,440 --> 00:37:24,630
we also have to swarm them meaning that

1048
00:37:22,240 --> 00:37:26,680
we have to solve problems and

1049
00:37:24,630 --> 00:37:29,980
potentially even escalate to everybody

1050
00:37:26,680 --> 00:37:32,680
in the organization so that we can fit

1051
00:37:29,980 --> 00:37:34,090
finding fix problems quickly we have to

1052
00:37:32,680 --> 00:37:37,450
spread new knowledge throughout the

1053
00:37:34,090 --> 00:37:40,060
organization and we have to think about

1054
00:37:37,450 --> 00:37:42,069
leadership in a wholly different way so

1055
00:37:40,060 --> 00:37:43,600
actually gonna go straight to number

1056
00:37:42,070 --> 00:37:44,190
three because in my mind this is

1057
00:37:43,600 --> 00:37:47,339
actually

1058
00:37:44,190 --> 00:37:48,690
probably the biggest auto moment in the

1059
00:37:47,339 --> 00:37:50,270
development of that DevOps handbook

1060
00:37:48,690 --> 00:37:52,619
because when I took his workshop at MIT

1061
00:37:50,270 --> 00:37:55,050
when he talked about capability 3 it

1062
00:37:52,619 --> 00:37:58,740
revealed that we had missed a bunch of

1063
00:37:55,050 --> 00:38:01,140
stuff so capability number 3 says there

1064
00:37:58,740 --> 00:38:03,078
must be some mechanism that allows for

1065
00:38:01,140 --> 00:38:07,078
local discoveries to be elevated and

1066
00:38:03,079 --> 00:38:12,000
translate into global greatness and I

1067
00:38:07,079 --> 00:38:15,359
think we see this a lot in our work and

1068
00:38:12,000 --> 00:38:17,310
for me is very startling and I think one

1069
00:38:15,359 --> 00:38:19,348
of the best examples is a single shared

1070
00:38:17,310 --> 00:38:21,420
source code repository right the most

1071
00:38:19,349 --> 00:38:23,940
famous example this is Google almost

1072
00:38:21,420 --> 00:38:25,890
every of the 45,000 engineers at Google

1073
00:38:23,940 --> 00:38:27,540
with the exception of Android and a

1074
00:38:25,890 --> 00:38:29,549
couple other teams they work out of one

1075
00:38:27,540 --> 00:38:31,770
source code repo one giant continuous

1076
00:38:29,550 --> 00:38:33,720
integration system only one version of

1077
00:38:31,770 --> 00:38:36,660
each library allowed right every library

1078
00:38:33,720 --> 00:38:38,399
has an owner and they are responsible

1079
00:38:36,660 --> 00:38:40,200
for working on you know version 10 and

1080
00:38:38,400 --> 00:38:42,420
migrating on everybody to version 10

1081
00:38:40,200 --> 00:38:45,540
plus one contrast that to a friend of

1082
00:38:42,420 --> 00:38:48,180
mine he said at a large bank we have 93

1083
00:38:45,540 --> 00:38:49,770
versions of the Java struts their struts

1084
00:38:48,180 --> 00:38:51,598
library right arguably we are running

1085
00:38:49,770 --> 00:38:53,759
every version except for the one version

1086
00:38:51,599 --> 00:38:55,920
which should be running right verses at

1087
00:38:53,760 --> 00:38:58,230
Google they're running one and it means

1088
00:38:55,920 --> 00:39:00,569
that we can put all our expertise into

1089
00:38:58,230 --> 00:39:02,369
code anyone that pulls from that repo is

1090
00:39:00,569 --> 00:39:04,910
automatically inheriting the best known

1091
00:39:02,369 --> 00:39:06,990
understanding of how we solve problems

1092
00:39:04,910 --> 00:39:08,339
blameless post mortem is another one of

1093
00:39:06,990 --> 00:39:09,779
these that we must make it safe for

1094
00:39:08,339 --> 00:39:12,390
people to talk about problems as

1095
00:39:09,780 --> 00:39:15,270
Bethenny Macri yet she said prevention

1096
00:39:12,390 --> 00:39:19,109
requires honesty and honesty requires

1097
00:39:15,270 --> 00:39:22,170
the absence of fear and what it does is

1098
00:39:19,109 --> 00:39:24,779
that enables engineering competitiveness

1099
00:39:22,170 --> 00:39:26,849
and engineering competitiveness so that

1100
00:39:24,780 --> 00:39:29,010
we can actually brag about who has the

1101
00:39:26,849 --> 00:39:31,890
better war stories to tell and all these

1102
00:39:29,010 --> 00:39:34,560
things ultimately create safer systems

1103
00:39:31,890 --> 00:39:37,200
if we don't have enough outages we stop

1104
00:39:34,560 --> 00:39:38,730
having them just on outages customer

1105
00:39:37,200 --> 00:39:40,410
impacting outages we have them on team

1106
00:39:38,730 --> 00:39:42,210
impacting outages of the seven

1107
00:39:40,410 --> 00:39:44,368
safeguards we put into place to prevent

1108
00:39:42,210 --> 00:39:45,960
an outage six of them fail let's do a

1109
00:39:44,369 --> 00:39:48,270
post-mortem on that Etsy was famous for

1110
00:39:45,960 --> 00:39:50,970
doing post mortem even after a flawless

1111
00:39:48,270 --> 00:39:52,980
retail season holiday season just so

1112
00:39:50,970 --> 00:39:55,560
they can learn from it right and that

1113
00:39:52,980 --> 00:39:56,790
represents ever-increasing tightening

1114
00:39:55,560 --> 00:39:59,790
tolerance

1115
00:39:56,790 --> 00:40:01,200
and that creates greatness sometimes

1116
00:39:59,790 --> 00:40:02,640
there aren't enough outages we create

1117
00:40:01,200 --> 00:40:05,939
outages like the famous chaos monkey

1118
00:40:02,640 --> 00:40:07,920
stories so all learning days technology

1119
00:40:05,940 --> 00:40:09,420
conference like this open source open

1120
00:40:07,920 --> 00:40:11,460
source is interesting because now we're

1121
00:40:09,420 --> 00:40:12,570
not leveraging the best minds within the

1122
00:40:11,460 --> 00:40:13,800
walls of the organization

1123
00:40:12,570 --> 00:40:15,420
now we're leveraging the best minds of

1124
00:40:13,800 --> 00:40:17,880
everybody in the entire technology

1125
00:40:15,420 --> 00:40:20,160
community so all of these I think are

1126
00:40:17,880 --> 00:40:23,010
great and it says that our goal is

1127
00:40:20,160 --> 00:40:24,690
security leaders is not to create buoys

1128
00:40:23,010 --> 00:40:26,490
and we trap everyone inside the buoys

1129
00:40:24,690 --> 00:40:27,690
it's really two great boundaries that

1130
00:40:26,490 --> 00:40:29,669
says hey you are closest to your

1131
00:40:27,690 --> 00:40:30,930
customer and the business objectives if

1132
00:40:29,670 --> 00:40:32,640
you need to stray outside the buoys

1133
00:40:30,930 --> 00:40:34,950
right you can right but here are the

1134
00:40:32,640 --> 00:40:36,029
principles that you must adhere to and

1135
00:40:34,950 --> 00:40:38,069
maybe that's gonna be the next

1136
00:40:36,030 --> 00:40:40,680
breakthrough that we will then empower

1137
00:40:38,070 --> 00:40:44,190
the rest of the organization's to use so

1138
00:40:40,680 --> 00:40:45,660
the last thing I want to share with you

1139
00:40:44,190 --> 00:40:47,850
it's been my area of research for last

1140
00:40:45,660 --> 00:40:50,100
four years which is studying not DevOps

1141
00:40:47,850 --> 00:40:51,839
in the unicorn's and I invite unicorns I

1142
00:40:50,100 --> 00:40:54,560
mean the Google to fang's the Facebook

1143
00:40:51,840 --> 00:40:56,550
Amazon's Netflix googles and so forth

1144
00:40:54,560 --> 00:40:58,830
that's interesting but not as

1145
00:40:56,550 --> 00:41:01,530
interesting as DevOps in large complex

1146
00:40:58,830 --> 00:41:03,630
organizations now say the horses and so

1147
00:41:01,530 --> 00:41:04,770
my primary mechanism for learning about

1148
00:41:03,630 --> 00:41:06,390
this has been running a conference

1149
00:41:04,770 --> 00:41:09,030
called the DevOps Enterprise Summit and

1150
00:41:06,390 --> 00:41:10,710
our goal is to understand how is Devas

1151
00:41:09,030 --> 00:41:13,050
being used in large complex

1152
00:41:10,710 --> 00:41:15,230
organizations and without a doubt you

1153
00:41:13,050 --> 00:41:17,790
know you should be confident seeing that

1154
00:41:15,230 --> 00:41:19,920
almost every large brand and every

1155
00:41:17,790 --> 00:41:21,779
industry vertical is using the same

1156
00:41:19,920 --> 00:41:23,940
practices that the unicorns and fangs

1157
00:41:21,780 --> 00:41:26,520
are and using it to drive incredible

1158
00:41:23,940 --> 00:41:28,100
innovation in their organizations as

1159
00:41:26,520 --> 00:41:30,090
well

1160
00:41:28,100 --> 00:41:31,560
I'll give you instruction on how to get

1161
00:41:30,090 --> 00:41:32,790
my slides but there's one thing I want

1162
00:41:31,560 --> 00:41:35,460
to share with you that has been very

1163
00:41:32,790 --> 00:41:38,880
meaningful to me which is the notion of

1164
00:41:35,460 --> 00:41:42,000
the role of the leader one of the things

1165
00:41:38,880 --> 00:41:43,860
that we tested in the 2017 study was the

1166
00:41:42,000 --> 00:41:44,730
role of leadership and we specifically

1167
00:41:43,860 --> 00:41:46,320
used something called the

1168
00:41:44,730 --> 00:41:47,610
transformational leadership model and

1169
00:41:46,320 --> 00:41:51,720
what we found was that leadership

1170
00:41:47,610 --> 00:41:53,430
matters we had tested the presence of 15

1171
00:41:51,720 --> 00:41:55,740
things in five categories to what degree

1172
00:41:53,430 --> 00:41:57,660
does a leader understand the vision of

1173
00:41:55,740 --> 00:41:59,939
the organization to what extent can they

1174
00:41:57,660 --> 00:42:02,009
get ahead of that to not only contribute

1175
00:41:59,940 --> 00:42:03,450
and be relevant but to help with

1176
00:42:02,010 --> 00:42:05,520
achievement of some of those important

1177
00:42:03,450 --> 00:42:06,689
things for the organization intellectual

1178
00:42:05,520 --> 00:42:08,670
stimulation to what extent does

1179
00:42:06,690 --> 00:42:10,289
leadership challenge status quo

1180
00:42:08,670 --> 00:42:11,999
challenge basic assumptions how

1181
00:42:10,289 --> 00:42:14,579
do work just because we did it the same

1182
00:42:11,999 --> 00:42:15,988
way for the last 20 years doesn't mean

1183
00:42:14,579 --> 00:42:17,069
that it's the way we should be doing

1184
00:42:15,989 --> 00:42:18,989
things today

1185
00:42:17,069 --> 00:42:21,808
inspirational communication to what

1186
00:42:18,989 --> 00:42:24,209
degree can the leader generate a sense

1187
00:42:21,809 --> 00:42:26,039
of a sense of excitement about the work

1188
00:42:24,209 --> 00:42:28,288
that they're doing maybe having to

1189
00:42:26,039 --> 00:42:29,999
overcome deep profound fears of what

1190
00:42:28,289 --> 00:42:31,739
this does to our career to our

1191
00:42:29,999 --> 00:42:34,288
professions to our functional silo and

1192
00:42:31,739 --> 00:42:37,039
create coalition's to help overpower

1193
00:42:34,289 --> 00:42:38,819
very powerful and common systems

1194
00:42:37,039 --> 00:42:40,799
supportive leadership and personal

1195
00:42:38,819 --> 00:42:42,749
recognition those are called often

1196
00:42:40,799 --> 00:42:46,910
associated with servant leadership that

1197
00:42:42,749 --> 00:42:49,499
agile popularized and we found was that

1198
00:42:46,910 --> 00:42:52,049
leadership doesn't matter the punch line

1199
00:42:49,499 --> 00:42:53,848
is that team with the least amount of

1200
00:42:52,049 --> 00:42:56,279
reported transformational leadership

1201
00:42:53,849 --> 00:42:57,689
behaviors we're only 1/3 as likely I'm

1202
00:42:56,279 --> 00:43:00,059
sorry one half is likely to be high

1203
00:42:57,689 --> 00:43:03,629
performers so it's possible but a lot

1204
00:43:00,059 --> 00:43:05,699
less likely to succeed and it takes more

1205
00:43:03,630 --> 00:43:07,199
than just leaders right it takes great

1206
00:43:05,699 --> 00:43:09,509
teams those great technical practices

1207
00:43:07,199 --> 00:43:12,539
with great architecture and cultural

1208
00:43:09,509 --> 00:43:14,369
norms in other words leaders just hang

1209
00:43:12,539 --> 00:43:16,169
out with leaders without teams is just

1210
00:43:14,369 --> 00:43:18,449
people giving PowerPoint slides to each

1211
00:43:16,169 --> 00:43:20,339
other right here's that here's the

1212
00:43:18,449 --> 00:43:21,599
evidence teens we took the teams with

1213
00:43:20,339 --> 00:43:22,979
the top 10 percent of reported

1214
00:43:21,599 --> 00:43:24,959
transformational leadership behaviors

1215
00:43:22,979 --> 00:43:26,158
took their performance compared to

1216
00:43:24,959 --> 00:43:28,828
against the median and they were

1217
00:43:26,159 --> 00:43:30,209
actually worse right so it takes more

1218
00:43:28,829 --> 00:43:31,859
than just transformational leaders it

1219
00:43:30,209 --> 00:43:34,618
takes everything that we've discussed in

1220
00:43:31,859 --> 00:43:37,439
this presentation so why do I think this

1221
00:43:34,619 --> 00:43:40,109
is important is because DevOps is now I

1222
00:43:37,439 --> 00:43:41,749
think relevant to every organization it

1223
00:43:40,109 --> 00:43:45,029
doesn't matter what industry were in

1224
00:43:41,749 --> 00:43:46,109
whether the size of the organization

1225
00:43:45,029 --> 00:43:48,659
whether they were profit or

1226
00:43:46,109 --> 00:43:50,819
not-for-profit you know the presence of

1227
00:43:48,659 --> 00:43:54,239
these practices helps us achieve goals

1228
00:43:50,819 --> 00:43:56,729
it leads to more satisfied teammates and

1229
00:43:54,239 --> 00:43:57,779
I think it leads to where all the

1230
00:43:56,729 --> 00:44:00,448
exciting work will be happening in

1231
00:43:57,779 --> 00:44:02,429
information security so I'm so delighted

1232
00:44:00,449 --> 00:44:04,199
to be here I'll be here for the entirety

1233
00:44:02,429 --> 00:44:06,089
of these two days and if you want to

1234
00:44:04,199 --> 00:44:07,979
copy these slides if you want a whole

1235
00:44:06,089 --> 00:44:10,919
bunch of stuff including some work that

1236
00:44:07,979 --> 00:44:14,249
we've done showing how we can prove to

1237
00:44:10,919 --> 00:44:15,868
compliance and regulators how DevOps can

1238
00:44:14,249 --> 00:44:17,549
help achieve security and compliance

1239
00:44:15,869 --> 00:44:19,229
objectives all I have to do is send an

1240
00:44:17,549 --> 00:44:21,119
email to real Jean Kim ascend your size

1241
00:44:19,229 --> 00:44:23,038
a calm subject line DevOps and you'll

1242
00:44:21,119 --> 00:44:24,270
get an automated response with all the

1243
00:44:23,039 --> 00:44:26,250
stuff so with that

1244
00:44:24,270 --> 00:44:28,009
thank you so much and I'll catch you

1245
00:44:26,250 --> 00:44:32,159
later today thank you

1246
00:44:28,010 --> 00:44:32,159
[Applause]

