1
00:00:00,060 --> 00:00:06,869
all right thank you guys for being here

2
00:00:02,970 --> 00:00:09,179
I'm glad I'm not the talk of the day all

3
00:00:06,870 --> 00:00:09,870
right so thank you Jim for the great

4
00:00:09,179 --> 00:00:11,460
introduction

5
00:00:09,870 --> 00:00:14,239
thank you sponsors for making this

6
00:00:11,460 --> 00:00:21,000
happen and for the day care especially

7
00:00:14,240 --> 00:00:23,240
so alright so thank you for the

8
00:00:21,000 --> 00:00:27,448
introduction kind of couple more words

9
00:00:23,240 --> 00:00:30,750
so I'm originally from Siberia and now

10
00:00:27,449 --> 00:00:34,290
live in Washington DC but Siberian in my

11
00:00:30,750 --> 00:00:36,930
heart I've been doing application

12
00:00:34,290 --> 00:00:39,390
security for eight years now and before

13
00:00:36,930 --> 00:00:41,610
I was a developer writing code in an

14
00:00:39,390 --> 00:00:44,129
ActionScript if anybody remembers what

15
00:00:41,610 --> 00:00:46,620
that was the war in the world of flash

16
00:00:44,129 --> 00:00:50,789
so I guess I keep up with the script

17
00:00:46,620 --> 00:00:52,890
type languages there and now I'm also

18
00:00:50,789 --> 00:00:54,899
working on my PhD of course about

19
00:00:52,890 --> 00:00:57,300
security and JavaScript and frameworks

20
00:00:54,899 --> 00:01:00,989
and I do have a professional Twitter

21
00:00:57,300 --> 00:01:04,610
account don't confuse my last names big

22
00:01:00,989 --> 00:01:08,189
arrow dmitrieva originally and I also

23
00:01:04,610 --> 00:01:12,810
now became a mother over nine months old

24
00:01:08,189 --> 00:01:16,939
girl who is here so that's awesome that

25
00:01:12,810 --> 00:01:19,950
I'm still able to work and travel so

26
00:01:16,939 --> 00:01:23,250
security is important and yes in my kind

27
00:01:19,950 --> 00:01:25,320
of wishful world I'm alarmed answer that

28
00:01:23,250 --> 00:01:30,420
what I would do if that made as much

29
00:01:25,320 --> 00:01:32,189
money as security but you know so today

30
00:01:30,420 --> 00:01:33,060
we're going to talk about JavaScript one

31
00:01:32,189 --> 00:01:40,978
more time

32
00:01:33,060 --> 00:01:45,689
who here has freedom JavaScript and then

33
00:01:40,979 --> 00:01:45,869
who has written in react oh wow thank

34
00:01:45,689 --> 00:01:48,329
you

35
00:01:45,869 --> 00:01:49,649
that's pretty awesome so we're gonna

36
00:01:48,329 --> 00:01:52,520
talk a little bit about the state of

37
00:01:49,649 --> 00:01:55,619
JavaScript security and specifically

38
00:01:52,520 --> 00:01:56,969
common vulnerabilities and the

39
00:01:55,619 --> 00:01:58,979
vulnerabilities in the frameworks or

40
00:01:56,969 --> 00:02:01,919
kind of how the use of the frameworks

41
00:01:58,979 --> 00:02:03,450
change what we do in JavaScript and then

42
00:02:01,920 --> 00:02:05,909
we'll switch to react and look at a

43
00:02:03,450 --> 00:02:08,039
couple problems with the framework

44
00:02:05,909 --> 00:02:09,810
couple of ulnar abilities things the

45
00:02:08,038 --> 00:02:12,089
mistakes that developers make with it

46
00:02:09,810 --> 00:02:14,370
and I have some demos that will

47
00:02:12,090 --> 00:02:17,209
hopefully work so

48
00:02:14,370 --> 00:02:19,319
javascript you know to kind of recall

49
00:02:17,209 --> 00:02:21,360
one of the things I saw on Twitter is

50
00:02:19,319 --> 00:02:25,079
that javascript is a great language but

51
00:02:21,360 --> 00:02:27,540
sometimes it makes me say screw the ship

52
00:02:25,080 --> 00:02:39,840
except I don't know what this means in

53
00:02:27,540 --> 00:02:42,780
this context so what is the state of

54
00:02:39,840 --> 00:02:48,450
JavaScript security today our JavaScript

55
00:02:42,780 --> 00:02:49,590
field today and yeah they're like there

56
00:02:48,450 --> 00:02:51,030
are more frameworks there are their

57
00:02:49,590 --> 00:02:56,640
applications and note that this quote

58
00:02:51,030 --> 00:02:59,130
was in 2012 and we're in 2018 and

59
00:02:56,640 --> 00:03:02,099
they're even more frameworks and what do

60
00:02:59,130 --> 00:03:04,829
we do with that well yeah I don't know

61
00:03:02,099 --> 00:03:09,328
because in 2004 this is how we wrote

62
00:03:04,829 --> 00:03:14,280
code right and today well this is 2014

63
00:03:09,329 --> 00:03:15,870
right what happened so while I'm

64
00:03:14,280 --> 00:03:17,489
enjoying here in Hawaii you know a

65
00:03:15,870 --> 00:03:18,959
couple weeks I come back and I don't

66
00:03:17,489 --> 00:03:20,130
know what's gonna be the next gen script

67
00:03:18,959 --> 00:03:25,049
framework probably everything is gonna

68
00:03:20,130 --> 00:03:28,858
be outdated by that so so what about the

69
00:03:25,049 --> 00:03:31,980
frameworks the good yes they allow us to

70
00:03:28,859 --> 00:03:34,620
develop everything about faster because

71
00:03:31,980 --> 00:03:36,420
you just run you have your boilerplate

72
00:03:34,620 --> 00:03:39,060
and you're on two lines of code and you

73
00:03:36,420 --> 00:03:40,888
run your react script start and

74
00:03:39,060 --> 00:03:42,720
everything magically works and you don't

75
00:03:40,889 --> 00:03:46,530
know where it's deployed and how but it

76
00:03:42,720 --> 00:03:49,260
it works right from the security

77
00:03:46,530 --> 00:03:52,980
reviewer perspective it's much easier to

78
00:03:49,260 --> 00:03:54,480
review the code if you know the if

79
00:03:52,980 --> 00:03:56,700
you're familiar with the idioms right if

80
00:03:54,480 --> 00:03:59,988
you know what you're reviewing which has

81
00:03:56,700 --> 00:03:59,988
a pretty high learning curve

82
00:04:00,620 --> 00:04:06,870
the applications are safer if their

83
00:04:04,859 --> 00:04:09,959
framework is safer right so kind of you

84
00:04:06,870 --> 00:04:12,660
blue base will float this responsibility

85
00:04:09,959 --> 00:04:15,840
to the framework someone the bad

86
00:04:12,660 --> 00:04:18,810
well yes I said steep learning curve the

87
00:04:15,840 --> 00:04:20,340
bugs are sometimes harder to find if you

88
00:04:18,810 --> 00:04:22,070
don't know what you're looking for or

89
00:04:20,339 --> 00:04:25,159
they're hidden in the

90
00:04:22,070 --> 00:04:28,010
hundreds of dependencies that your load

91
00:04:25,160 --> 00:04:32,420
from NPM and then you have all the bugs

92
00:04:28,010 --> 00:04:34,250
in your applications the frameworks are

93
00:04:32,420 --> 00:04:35,990
open sourcing a highly extendable and

94
00:04:34,250 --> 00:04:37,670
there are tons of plugins and tons of

95
00:04:35,990 --> 00:04:39,290
third-party libraries so when you're

96
00:04:37,670 --> 00:04:42,440
getting when you pull all of that in

97
00:04:39,290 --> 00:04:45,650
what's the quality of the third-party

98
00:04:42,440 --> 00:04:47,330
code not always as good as the quality

99
00:04:45,650 --> 00:04:50,390
of the framework itself right so those

100
00:04:47,330 --> 00:04:52,400
are the risks that you're facing and

101
00:04:50,390 --> 00:04:54,710
then sometimes you don't get good

102
00:04:52,400 --> 00:04:56,239
documentation you have to get into the

103
00:04:54,710 --> 00:04:59,780
source code and find how things are

104
00:04:56,240 --> 00:05:01,970
actually working etc etc but the reality

105
00:04:59,780 --> 00:05:04,159
kind of what can we do we cannot stop

106
00:05:01,970 --> 00:05:05,860
using the frameworks come on right

107
00:05:04,160 --> 00:05:07,520
they're there they're there to stay

108
00:05:05,860 --> 00:05:10,340
nobody's gonna write a vanilla

109
00:05:07,520 --> 00:05:11,409
JavaScript code or typescript code right

110
00:05:10,340 --> 00:05:14,450
not anymore

111
00:05:11,410 --> 00:05:15,950
so of course we have the client-side

112
00:05:14,450 --> 00:05:18,500
JavaScript on the server side JavaScript

113
00:05:15,950 --> 00:05:21,680
gonna quick overview here if we're

114
00:05:18,500 --> 00:05:23,930
looking at the security issues for the

115
00:05:21,680 --> 00:05:26,090
client side of course your scripting

116
00:05:23,930 --> 00:05:28,790
number one still there the Dom kind

117
00:05:26,090 --> 00:05:31,159
especially if the framework has

118
00:05:28,790 --> 00:05:32,600
expression language and like angular in

119
00:05:31,160 --> 00:05:34,640
view do you have expression languages

120
00:05:32,600 --> 00:05:36,590
you have the new expression language

121
00:05:34,640 --> 00:05:38,120
expression language injections right

122
00:05:36,590 --> 00:05:41,150
which usually end up in a cross-site

123
00:05:38,120 --> 00:05:43,700
scripting as well we have a four split

124
00:05:41,150 --> 00:05:45,500
jacking and now we can do it CS we quit

125
00:05:43,700 --> 00:05:47,930
jackin where you don't even need to use

126
00:05:45,500 --> 00:05:50,480
a new JavaScript right you just add an

127
00:05:47,930 --> 00:05:52,310
element with your C's like a CSV button

128
00:05:50,480 --> 00:05:54,650
on top of some element and you collect

129
00:05:52,310 --> 00:05:57,560
the clicks and do whatever you want can

130
00:05:54,650 --> 00:05:59,900
change the UI there is Dom clobbering

131
00:05:57,560 --> 00:06:03,170
that not something new that's been

132
00:05:59,900 --> 00:06:06,830
around for more than ten years or eight

133
00:06:03,170 --> 00:06:09,170
years where so the DOM is super super

134
00:06:06,830 --> 00:06:11,539
messy and if you have one element with

135
00:06:09,170 --> 00:06:14,540
an ID and then you add an inject another

136
00:06:11,540 --> 00:06:16,490
element with the same ID now you get a

137
00:06:14,540 --> 00:06:18,050
collection of IDs that's how browser

138
00:06:16,490 --> 00:06:19,970
interprets them and of course the

139
00:06:18,050 --> 00:06:23,570
property is now change you cannot access

140
00:06:19,970 --> 00:06:26,920
the methods of the original item and you

141
00:06:23,570 --> 00:06:30,280
can do pretty bad stuff with that

142
00:06:26,920 --> 00:06:33,169
client-side trust issues so with the

143
00:06:30,280 --> 00:06:35,210
JavaScript frameworks being so heavy on

144
00:06:33,169 --> 00:06:35,930
the client-side you move so much logic

145
00:06:35,210 --> 00:06:38,150
because

146
00:06:35,930 --> 00:06:39,889
logic onto the client-side and sometimes

147
00:06:38,150 --> 00:06:42,109
you may be trusting the client too much

148
00:06:39,889 --> 00:06:44,030
having too much data or having your

149
00:06:42,110 --> 00:06:45,320
authentication authorization for some

150
00:06:44,030 --> 00:06:49,369
reason on the client I mean that that's

151
00:06:45,320 --> 00:06:51,500
so widespread CSRF of course that's the

152
00:06:49,370 --> 00:06:53,090
server side vulnerability but we have

153
00:06:51,500 --> 00:06:55,370
the features and some frameworks that

154
00:06:53,090 --> 00:06:57,138
sometimes help you protect from it so

155
00:06:55,370 --> 00:06:58,910
there is like that client element where

156
00:06:57,139 --> 00:07:01,660
you have to take the token and plug it

157
00:06:58,910 --> 00:07:04,550
put it either in the you know post

158
00:07:01,660 --> 00:07:06,139
parameter or the HTTP header and some

159
00:07:04,550 --> 00:07:08,030
some frameworks do it automatically for

160
00:07:06,139 --> 00:07:09,110
you like angular does some don't and

161
00:07:08,030 --> 00:07:12,198
then you have to use some third-party

162
00:07:09,110 --> 00:07:14,349
library or implement it yourself or use

163
00:07:12,199 --> 00:07:16,610
GWT and we'll talk about that later

164
00:07:14,349 --> 00:07:19,520
and then of course there's information

165
00:07:16,610 --> 00:07:21,710
leakage again trust of the client you're

166
00:07:19,520 --> 00:07:24,440
loading too much data you're putting it

167
00:07:21,710 --> 00:07:28,190
on you know local storage or something

168
00:07:24,440 --> 00:07:30,020
like that so server-side vulnerabilities

169
00:07:28,190 --> 00:07:32,090
I'm not as exciting because pretty much

170
00:07:30,020 --> 00:07:33,948
you know server-side JavaScript node and

171
00:07:32,090 --> 00:07:36,859
all the frameworks that come with it are

172
00:07:33,949 --> 00:07:38,660
the vulnerabilities are the same as any

173
00:07:36,860 --> 00:07:41,930
other server-side language you have your

174
00:07:38,660 --> 00:07:43,280
injections a ton of them you have of

175
00:07:41,930 --> 00:07:44,539
course if you're using no sequel

176
00:07:43,280 --> 00:07:45,859
database you have the no sequel

177
00:07:44,539 --> 00:07:48,560
injections that are different from the

178
00:07:45,860 --> 00:07:51,130
sequel injections C surf the server-side

179
00:07:48,560 --> 00:07:53,750
part of it the validation of the token

180
00:07:51,130 --> 00:07:56,330
remote code execution with JavaScript

181
00:07:53,750 --> 00:08:00,650
are fun because we have the eval right

182
00:07:56,330 --> 00:08:03,800
and then also LZ the DISA realization

183
00:08:00,650 --> 00:08:06,888
the new thing in the OS top-10 which is

184
00:08:03,800 --> 00:08:09,650
quite common in jeffersonville and again

185
00:08:06,889 --> 00:08:11,539
we'll see some examples of that and all

186
00:08:09,650 --> 00:08:14,080
this stuff so this is not the focus of

187
00:08:11,539 --> 00:08:16,820
today's talk right so we're gonna

188
00:08:14,080 --> 00:08:18,979
concentrate on the client side and if we

189
00:08:16,820 --> 00:08:21,530
look at the newest to last up 10 which

190
00:08:18,979 --> 00:08:23,690
of the things apply to JavaScript to the

191
00:08:21,530 --> 00:08:26,239
client-side JavaScript let's see

192
00:08:23,690 --> 00:08:28,430
injections of course we have expression

193
00:08:26,240 --> 00:08:30,080
injection you know not sick will not

194
00:08:28,430 --> 00:08:32,839
LDAP will command but we have expression

195
00:08:30,080 --> 00:08:36,348
injection broken authentication yes if

196
00:08:32,839 --> 00:08:38,870
you do it on the client side sensitive

197
00:08:36,349 --> 00:08:41,719
data exposure yes if you're trusting the

198
00:08:38,870 --> 00:08:44,390
client XML and to use exact injection

199
00:08:41,719 --> 00:08:46,370
probably not I mean most of the

200
00:08:44,390 --> 00:08:47,150
JavaScript frameworks you are using JSON

201
00:08:46,370 --> 00:08:49,040
and then

202
00:08:47,150 --> 00:08:51,260
even if you are using XML you're not

203
00:08:49,040 --> 00:08:53,750
using the same parsers on the

204
00:08:51,260 --> 00:08:54,740
client-side so at least here we can have

205
00:08:53,750 --> 00:08:57,589
a break

206
00:08:54,740 --> 00:08:59,779
access control yes if you implement it

207
00:08:57,589 --> 00:09:03,200
on the client-side wrong you will have

208
00:08:59,779 --> 00:09:04,870
problems with that miss configuration if

209
00:09:03,200 --> 00:09:07,070
you're using a framework that has

210
00:09:04,870 --> 00:09:10,910
settings security features and you miss

211
00:09:07,070 --> 00:09:14,089
configure it that's problem exercise of

212
00:09:10,910 --> 00:09:16,790
course insecure deserialization yes so

213
00:09:14,089 --> 00:09:19,730
again it happens more often on the

214
00:09:16,790 --> 00:09:21,620
server side but you may have it on in

215
00:09:19,730 --> 00:09:24,740
your client-side code as well and we'll

216
00:09:21,620 --> 00:09:26,930
see some examples components with known

217
00:09:24,740 --> 00:09:29,450
vulnerabilities of course if we're

218
00:09:26,930 --> 00:09:31,279
pulling everything from the NPM and all

219
00:09:29,450 --> 00:09:33,740
the you know tons of vulnerabilities

220
00:09:31,279 --> 00:09:35,960
tons of open source projects I should

221
00:09:33,740 --> 00:09:38,380
say of course you're pulling that into

222
00:09:35,960 --> 00:09:42,160
your environment as well and

223
00:09:38,380 --> 00:09:44,990
insufficient logging or monitoring and I

224
00:09:42,160 --> 00:09:46,819
mean client-side not so much but you

225
00:09:44,990 --> 00:09:49,130
have if you use like an analytics

226
00:09:46,820 --> 00:09:51,050
website right you're sending your stats

227
00:09:49,130 --> 00:09:53,930
somewhere that's where you're logging in

228
00:09:51,050 --> 00:10:00,979
monitoring may come into play or CSP and

229
00:09:53,930 --> 00:10:03,109
you're like report the bypasses so what

230
00:10:00,980 --> 00:10:06,020
do frameworks give us in terms of

231
00:10:03,110 --> 00:10:08,180
security so we they have pros and cons

232
00:10:06,020 --> 00:10:11,480
they have you know the good things they

233
00:10:08,180 --> 00:10:14,930
may have security controls built in for

234
00:10:11,480 --> 00:10:17,120
example a lot of them Java Script will

235
00:10:14,930 --> 00:10:18,859
have contextual s code and coding

236
00:10:17,120 --> 00:10:20,510
escaping whatever you call it right like

237
00:10:18,860 --> 00:10:22,880
angular like for you like all the

238
00:10:20,510 --> 00:10:25,040
templating engines will do contextual

239
00:10:22,880 --> 00:10:27,770
aware encoding knowing where you're

240
00:10:25,040 --> 00:10:30,349
outputting your user data use the URL

241
00:10:27,770 --> 00:10:33,319
parameter is a HTML entity an HTML

242
00:10:30,350 --> 00:10:34,640
attribute kind of we're good here see

243
00:10:33,320 --> 00:10:37,700
it's a ref protection as I said for

244
00:10:34,640 --> 00:10:42,170
example angular if you have if you set

245
00:10:37,700 --> 00:10:45,740
your HD cookie XSS cookie I'm sorry sis

246
00:10:42,170 --> 00:10:48,020
RF cookie name in a way that angular is

247
00:10:45,740 --> 00:10:51,620
expecting it will take that cookie and

248
00:10:48,020 --> 00:10:52,939
add an HTTP header and then you again

249
00:10:51,620 --> 00:10:54,950
read that it should be header from the

250
00:10:52,940 --> 00:10:56,480
server side as long as the names match

251
00:10:54,950 --> 00:10:58,670
and you can configure it either on your

252
00:10:56,480 --> 00:11:02,480
server side or on the client side

253
00:10:58,670 --> 00:11:05,689
so that's taken care of for you type

254
00:11:02,480 --> 00:11:08,060
checking some frameworks add a feature

255
00:11:05,690 --> 00:11:10,160
that you would actually use types in

256
00:11:08,060 --> 00:11:13,880
JavaScript the wonderfully loosely type

257
00:11:10,160 --> 00:11:16,130
type language like react has the type

258
00:11:13,880 --> 00:11:18,140
props library that will allow you to

259
00:11:16,130 --> 00:11:19,850
actually set the types or if you're

260
00:11:18,140 --> 00:11:24,199
using angular chew and up you're using

261
00:11:19,850 --> 00:11:26,810
typescript and even better sandbox which

262
00:11:24,200 --> 00:11:28,370
is not a security here I'm referring to

263
00:11:26,810 --> 00:11:30,410
the angular sandbox which is not a

264
00:11:28,370 --> 00:11:32,290
security feature that was you know there

265
00:11:30,410 --> 00:11:34,760
are tons of some sandbox bypasses

266
00:11:32,290 --> 00:11:41,329
etcetera etcetera but some frameworks

267
00:11:34,760 --> 00:11:44,660
kind of try to protect you from the bad

268
00:11:41,330 --> 00:11:48,260
stuff that exercise can do successfully

269
00:11:44,660 --> 00:11:49,760
or not not sure and then whitelist some

270
00:11:48,260 --> 00:11:52,340
again some frameworks will have features

271
00:11:49,760 --> 00:11:54,410
or exam for example angular will have a

272
00:11:52,340 --> 00:11:56,750
feature where you can configure where

273
00:11:54,410 --> 00:11:59,900
you can load your resources from you can

274
00:11:56,750 --> 00:12:02,090
whitelist a list of domains and so these

275
00:11:59,900 --> 00:12:03,949
are just some examples of the security

276
00:12:02,090 --> 00:12:06,230
controls that are built into the

277
00:12:03,950 --> 00:12:08,840
framework helping you us to write better

278
00:12:06,230 --> 00:12:10,910
code but there are also some

279
00:12:08,840 --> 00:12:13,610
insecurities that come with the use of

280
00:12:10,910 --> 00:12:15,620
frameworks expression injection if you

281
00:12:13,610 --> 00:12:18,320
have an expression language in the

282
00:12:15,620 --> 00:12:22,000
framework right you can have new type of

283
00:12:18,320 --> 00:12:23,780
injection there sandbox can be bypassed

284
00:12:22,000 --> 00:12:25,730
insecure api's

285
00:12:23,780 --> 00:12:27,920
so sometimes the framework will have a

286
00:12:25,730 --> 00:12:31,100
dangerous API that shouldn't be used

287
00:12:27,920 --> 00:12:33,740
like trust as or dangerously set in our

288
00:12:31,100 --> 00:12:37,250
HTML in react but you know they're there

289
00:12:33,740 --> 00:12:39,590
or well eval is not a framework API but

290
00:12:37,250 --> 00:12:41,000
things like that right so they exist and

291
00:12:39,590 --> 00:12:43,520
those would be the things that we look

292
00:12:41,000 --> 00:12:49,790
for as security you know code reviewers

293
00:12:43,520 --> 00:12:51,890
and CSP bypasses again you may use the

294
00:12:49,790 --> 00:12:54,860
framework that compliant with the CSP

295
00:12:51,890 --> 00:12:58,040
and you may have strong CSP policy and

296
00:12:54,860 --> 00:13:00,170
not have any inline scripts etc but some

297
00:12:58,040 --> 00:13:02,660
of the frameworks actually you can

298
00:13:00,170 --> 00:13:04,640
bypass CSP and inject the script well

299
00:13:02,660 --> 00:13:06,920
not as Tribune Jacana and framework

300
00:13:04,640 --> 00:13:09,470
element that's then interpreted by the

301
00:13:06,920 --> 00:13:12,170
framework code and then results in a

302
00:13:09,470 --> 00:13:15,830
script injection like jQuery has that

303
00:13:12,170 --> 00:13:18,680
amber had some angular obviously had CSP

304
00:13:15,830 --> 00:13:22,040
bypasses so you're bringing that into

305
00:13:18,680 --> 00:13:24,260
your application as well so that's kind

306
00:13:22,040 --> 00:13:26,630
of the overview and let's talk about

307
00:13:24,260 --> 00:13:28,460
react as Jim said you know why we're

308
00:13:26,630 --> 00:13:31,520
talking about react well that's kind of

309
00:13:28,460 --> 00:13:35,090
the hot framework today if we look at

310
00:13:31,520 --> 00:13:38,449
the NPM stats for downloads

311
00:13:35,090 --> 00:13:40,640
reiax is like way out there of course

312
00:13:38,450 --> 00:13:43,550
angular was pretty popular view is

313
00:13:40,640 --> 00:13:49,189
catching up it's still pretty low there

314
00:13:43,550 --> 00:13:52,010
but the it's actually it's actually

315
00:13:49,190 --> 00:13:54,590
growing pretty pretty fast so for a year

316
00:13:52,010 --> 00:13:56,270
from now it may be you know maybe bypass

317
00:13:54,590 --> 00:13:59,480
react would be somewhere kinda in the

318
00:13:56,270 --> 00:14:03,230
middle so that's the other new stuff

319
00:13:59,480 --> 00:14:07,310
that's coming up so react was introduced

320
00:14:03,230 --> 00:14:08,900
in 2013 flow graph history here what

321
00:14:07,310 --> 00:14:11,689
wasn't sure that what Pam was the world

322
00:14:08,900 --> 00:14:13,880
the view of JavaScript in 2013 well

323
00:14:11,690 --> 00:14:17,510
angularjs was super popular everybody

324
00:14:13,880 --> 00:14:20,210
was writing angular and react came out

325
00:14:17,510 --> 00:14:22,370
with a few features that anger didn't

326
00:14:20,210 --> 00:14:23,540
have or actually react said well the way

327
00:14:22,370 --> 00:14:25,610
you're doing this is wrong we're gonna

328
00:14:23,540 --> 00:14:28,040
do a different way so one of them the

329
00:14:25,610 --> 00:14:30,140
one big one was one way binding versus

330
00:14:28,040 --> 00:14:32,360
two way binding write angular said had

331
00:14:30,140 --> 00:14:34,520
chewy binding where you update the model

332
00:14:32,360 --> 00:14:37,790
the UI updates you update the UI the

333
00:14:34,520 --> 00:14:40,550
model updates great but it was very hard

334
00:14:37,790 --> 00:14:42,680
to maintain and very hard to scale big

335
00:14:40,550 --> 00:14:43,160
applications it became just created a

336
00:14:42,680 --> 00:14:45,949
mess

337
00:14:43,160 --> 00:14:47,719
so the react developers said we're not

338
00:14:45,950 --> 00:14:52,010
gonna do that it's just gonna be one way

339
00:14:47,720 --> 00:14:53,990
the model updates the UI that's it they

340
00:14:52,010 --> 00:14:57,470
also introduced their own templating

341
00:14:53,990 --> 00:14:59,830
language JSX and decided not to have an

342
00:14:57,470 --> 00:15:02,600
expression language but instead have a

343
00:14:59,830 --> 00:15:05,090
we'll look at that and they also

344
00:15:02,600 --> 00:15:09,020
introduced a virtual Dom which allows

345
00:15:05,090 --> 00:15:11,660
you to render react on the server side

346
00:15:09,020 --> 00:15:13,430
and then just you know send the plain

347
00:15:11,660 --> 00:15:17,689
HTML that's gonna be displayed in the

348
00:15:13,430 --> 00:15:22,250
page right away the other thing that

349
00:15:17,690 --> 00:15:24,720
made react so popular was that in 2014

350
00:15:22,250 --> 00:15:26,970
the angular team said we are going to

351
00:15:24,720 --> 00:15:28,950
and you're too and that's gonna be a

352
00:15:26,970 --> 00:15:30,780
totally breaking change and basically a

353
00:15:28,950 --> 00:15:32,550
new framework and everything you're

354
00:15:30,780 --> 00:15:34,260
writing right now in angular 1 is not

355
00:15:32,550 --> 00:15:37,079
gonna be compatible and you have will

356
00:15:34,260 --> 00:15:38,550
have to rewrite it again all right I

357
00:15:37,080 --> 00:15:40,920
mean that's not like the first time we

358
00:15:38,550 --> 00:15:45,060
saw something like that in the field but

359
00:15:40,920 --> 00:15:48,180
the angular 2 took two more years before

360
00:15:45,060 --> 00:15:49,920
it was released or a year before it was

361
00:15:48,180 --> 00:15:53,099
released but a year in JavaScript world

362
00:15:49,920 --> 00:15:59,790
is a long time and because there was

363
00:15:53,100 --> 00:16:01,110
that insecurity I want to use the word

364
00:15:59,790 --> 00:16:03,060
insecurity but like kind of unknown

365
00:16:01,110 --> 00:16:05,490
situation of what's gonna come out of

366
00:16:03,060 --> 00:16:08,250
angular 2 a lot of developers actually

367
00:16:05,490 --> 00:16:10,650
switch to react because it was out we

368
00:16:08,250 --> 00:16:12,390
knew what was going on there what are

369
00:16:10,650 --> 00:16:14,939
the features with developers didn't want

370
00:16:12,390 --> 00:16:16,920
to continue developing the applications

371
00:16:14,940 --> 00:16:18,960
in angular 1 or starting developing in

372
00:16:16,920 --> 00:16:22,500
angular 1 because angular 2 is coming

373
00:16:18,960 --> 00:16:26,490
out and that time frame actually allowed

374
00:16:22,500 --> 00:16:29,730
react to become super super popular and

375
00:16:26,490 --> 00:16:31,410
of course it's backed by Facebook so has

376
00:16:29,730 --> 00:16:37,130
good support and good documentation

377
00:16:31,410 --> 00:16:39,480
surprisingly so the talk is fine about

378
00:16:37,130 --> 00:16:41,580
JavaScript frameworks but react is

379
00:16:39,480 --> 00:16:43,230
actually not a framework you know if we

380
00:16:41,580 --> 00:16:47,300
look at the documentation it is a

381
00:16:43,230 --> 00:16:51,120
library it is a user interfaces library

382
00:16:47,300 --> 00:16:53,219
and I think that's just terminology

383
00:16:51,120 --> 00:16:55,200
because realistically if you ask okay

384
00:16:53,220 --> 00:16:56,610
what is your application written in it's

385
00:16:55,200 --> 00:16:58,860
written in your act it's written in game

386
00:16:56,610 --> 00:17:01,710
it's written in view you can kind of use

387
00:16:58,860 --> 00:17:03,630
them interchangeably so kind of as a

388
00:17:01,710 --> 00:17:05,339
framework but the reason and one of the

389
00:17:03,630 --> 00:17:07,589
reasons why it's not a framework it

390
00:17:05,339 --> 00:17:11,389
doesn't have the full functionality that

391
00:17:07,589 --> 00:17:15,599
would allow us to call it a framework so

392
00:17:11,390 --> 00:17:19,020
it's not opinionated in many things for

393
00:17:15,599 --> 00:17:20,669
example it doesn't have the routing

394
00:17:19,020 --> 00:17:23,689
built in right it doesn't have access

395
00:17:20,670 --> 00:17:25,410
ref protection it doesn't have

396
00:17:23,689 --> 00:17:27,510
originally kind of like the state

397
00:17:25,410 --> 00:17:29,040
management although everybody is using

398
00:17:27,510 --> 00:17:31,050
well not everybody a lot of people are

399
00:17:29,040 --> 00:17:34,200
using redux with react although you

400
00:17:31,050 --> 00:17:37,110
could use something else as well

401
00:17:34,200 --> 00:17:38,190
and because it doesn't have a lot of

402
00:17:37,110 --> 00:17:39,719
these

403
00:17:38,190 --> 00:17:44,850
four components built into the framework

404
00:17:39,720 --> 00:17:48,960
it actually allowed to create well it

405
00:17:44,850 --> 00:17:50,850
kind of created a surface for a lot of

406
00:17:48,960 --> 00:17:54,030
plugins and libraries and have this

407
00:17:50,850 --> 00:17:56,610
vibrant community of third-party

408
00:17:54,030 --> 00:18:00,240
developers building plugins and features

409
00:17:56,610 --> 00:18:02,790
for react one thing that it is very

410
00:18:00,240 --> 00:18:05,730
opinionated in is the functional

411
00:18:02,790 --> 00:18:07,710
programming it's not a fully functioning

412
00:18:05,730 --> 00:18:10,500
functional programming it's not a

413
00:18:07,710 --> 00:18:12,780
language right but it has these concepts

414
00:18:10,500 --> 00:18:17,970
where everything is a function so if we

415
00:18:12,780 --> 00:18:20,070
look at the component component is

416
00:18:17,970 --> 00:18:22,350
actually function so we pass some

417
00:18:20,070 --> 00:18:24,540
properties which then become you know

418
00:18:22,350 --> 00:18:28,439
the values of the attributes that we set

419
00:18:24,540 --> 00:18:31,290
on the HTML element and here is our GSX

420
00:18:28,440 --> 00:18:33,360
that looks you know kind of like HTML

421
00:18:31,290 --> 00:18:38,340
but not really that is later rendered

422
00:18:33,360 --> 00:18:40,169
into the actual HTML so let's start with

423
00:18:38,340 --> 00:18:42,120
cross-site scripting you know we're

424
00:18:40,170 --> 00:18:43,860
talking about client-side framework of

425
00:18:42,120 --> 00:18:47,149
course number one vulnerability will be

426
00:18:43,860 --> 00:18:50,280
cross the scripting so react has the

427
00:18:47,150 --> 00:18:53,130
contextual aware is caping so if you're

428
00:18:50,280 --> 00:18:57,480
trying to inject something that contains

429
00:18:53,130 --> 00:19:02,250
the script birdie it's excited by my

430
00:18:57,480 --> 00:19:04,440
talk thank you you know this is like you

431
00:19:02,250 --> 00:19:07,080
know like third grade

432
00:19:04,440 --> 00:19:14,370
you have a bird flying to the classroom

433
00:19:07,080 --> 00:19:16,879
and completely distracts the lesson so

434
00:19:14,370 --> 00:19:19,110
you know we're trying to inject some

435
00:19:16,880 --> 00:19:22,290
malicious input and we put it into our

436
00:19:19,110 --> 00:19:25,260
curly braces it gets escaped all good

437
00:19:22,290 --> 00:19:27,810
because react actually does not use the

438
00:19:25,260 --> 00:19:30,210
inner HTML doesn't change directly the

439
00:19:27,810 --> 00:19:32,250
inner HTML property but what if we would

440
00:19:30,210 --> 00:19:34,890
do need to change that of course there

441
00:19:32,250 --> 00:19:37,890
is a way and we do that by using the

442
00:19:34,890 --> 00:19:39,900
ginger dangerously set inner HTML and

443
00:19:37,890 --> 00:19:41,670
that's kind of another interesting thing

444
00:19:39,900 --> 00:19:43,710
that you know when when angular one is

445
00:19:41,670 --> 00:19:44,910
out and the cold that same we've had the

446
00:19:43,710 --> 00:19:48,660
same functionality and they called it

447
00:19:44,910 --> 00:19:50,460
trust as HTML your

448
00:19:48,660 --> 00:19:54,450
so I trust this code but we're react

449
00:19:50,460 --> 00:19:56,070
said and now this is to to not scary

450
00:19:54,450 --> 00:19:57,810
because you're actually doing something

451
00:19:56,070 --> 00:20:00,929
super super scary so we're gonna call it

452
00:19:57,810 --> 00:20:03,179
dangerously inner HTML and then angular

453
00:20:00,930 --> 00:20:04,440
2 came out and said okay okay we're

454
00:20:03,180 --> 00:20:08,460
gonna do that same thing so we're gonna

455
00:20:04,440 --> 00:20:10,800
say bypass security trust HTML it kind

456
00:20:08,460 --> 00:20:12,390
of makes me think about that first slide

457
00:20:10,800 --> 00:20:14,220
where you know how do we write

458
00:20:12,390 --> 00:20:17,490
JavaScript where are you your function

459
00:20:14,220 --> 00:20:23,190
names are like German words like four

460
00:20:17,490 --> 00:20:24,480
different things together so react

461
00:20:23,190 --> 00:20:26,280
doesn't have expression injection

462
00:20:24,480 --> 00:20:29,280
expression language so it doesn't have

463
00:20:26,280 --> 00:20:32,520
expression injection yeh but it creates

464
00:20:29,280 --> 00:20:35,310
components and if we are creating

465
00:20:32,520 --> 00:20:39,030
components on the fly dynamically we may

466
00:20:35,310 --> 00:20:42,360
have component injection so let's look

467
00:20:39,030 --> 00:20:44,910
at how the components are created so we

468
00:20:42,360 --> 00:20:48,000
can write them in the JSX where we

469
00:20:44,910 --> 00:20:50,160
create have the tag we have the

470
00:20:48,000 --> 00:20:52,650
attributes the values of the attributes

471
00:20:50,160 --> 00:20:55,170
our properties or props in react

472
00:20:52,650 --> 00:20:57,360
language and then we have the content of

473
00:20:55,170 --> 00:20:59,310
you know what's inside the tag and that

474
00:20:57,360 --> 00:21:03,120
would be the children the child child

475
00:20:59,310 --> 00:21:05,340
property here so that the GSX code gets

476
00:21:03,120 --> 00:21:07,110
transferred into javascript and when it

477
00:21:05,340 --> 00:21:08,850
gets transpiled this is what we get or

478
00:21:07,110 --> 00:21:10,110
we can actually write it like this but

479
00:21:08,850 --> 00:21:13,260
now but it does it because this is ugly

480
00:21:10,110 --> 00:21:16,320
so we have the first parameter which is

481
00:21:13,260 --> 00:21:18,150
a type h1 we have the second parameter

482
00:21:16,320 --> 00:21:20,730
the properties that we're passing for

483
00:21:18,150 --> 00:21:23,040
example the class name here and then we

484
00:21:20,730 --> 00:21:25,400
have the array of children so in this

485
00:21:23,040 --> 00:21:28,340
case we're passing just one text node

486
00:21:25,400 --> 00:21:31,170
hello world so these are the three

487
00:21:28,340 --> 00:21:32,850
points where we may be able to inject

488
00:21:31,170 --> 00:21:37,320
something if we're creating a component

489
00:21:32,850 --> 00:21:42,149
dynamically so one the first exercise

490
00:21:37,320 --> 00:21:44,610
that became known in react was actually

491
00:21:42,150 --> 00:21:47,610
found on the hacker one website itself I

492
00:21:44,610 --> 00:21:49,169
think this is super cool and there was a

493
00:21:47,610 --> 00:21:51,419
problem not in the hacker one website

494
00:21:49,170 --> 00:21:54,720
but in the react framework so there it

495
00:21:51,420 --> 00:21:59,310
was possible to have an injection in the

496
00:21:54,720 --> 00:22:01,890
children property right so if we are

497
00:21:59,310 --> 00:22:05,700
sending some malicious JavaScript

498
00:22:01,890 --> 00:22:07,890
malicious input into the children like

499
00:22:05,700 --> 00:22:09,230
their attacker pretty loaded you know we

500
00:22:07,890 --> 00:22:21,000
just said this is gonna be escape

501
00:22:09,230 --> 00:22:22,350
rightful if we go back we said right so

502
00:22:21,000 --> 00:22:25,940
we just said if we're trying to send

503
00:22:22,350 --> 00:22:28,409
some script it's gonna be escape so hmm

504
00:22:25,940 --> 00:22:31,260
what do we do here well we're not

505
00:22:28,410 --> 00:22:36,380
sending JavaScript in there what we're

506
00:22:31,260 --> 00:22:39,900
doing we can send a JSON object and

507
00:22:36,380 --> 00:22:42,000
apparently react now it's fixed right

508
00:22:39,900 --> 00:22:44,340
but before it would not only accept a

509
00:22:42,000 --> 00:22:47,580
string that would be normal but it would

510
00:22:44,340 --> 00:22:50,340
actually accept a JSON object and you

511
00:22:47,580 --> 00:22:51,960
could have a JSON object that to me to

512
00:22:50,340 --> 00:22:55,379
make something a JSON object you would

513
00:22:51,960 --> 00:22:57,420
just have and you know Jason well a

514
00:22:55,380 --> 00:23:00,360
react object you just have a JSON object

515
00:22:57,420 --> 00:23:01,770
with the is react element property that

516
00:23:00,360 --> 00:23:03,600
set to true and then a couple other

517
00:23:01,770 --> 00:23:05,879
properties that you have to have like

518
00:23:03,600 --> 00:23:08,370
you know state and the type and then

519
00:23:05,880 --> 00:23:10,470
you're sending your props and here is

520
00:23:08,370 --> 00:23:13,889
your prop with the set dangerously HTML

521
00:23:10,470 --> 00:23:16,500
which is actually accept accepting an

522
00:23:13,890 --> 00:23:18,360
object with the property underscore

523
00:23:16,500 --> 00:23:21,780
underscore HTML and there is your

524
00:23:18,360 --> 00:23:24,659
payload right so that worked and then

525
00:23:21,780 --> 00:23:27,389
was fixed in react 14 so after that you

526
00:23:24,660 --> 00:23:30,060
cannot inject an object into the

527
00:23:27,390 --> 00:23:32,730
children it has to be a string so that's

528
00:23:30,060 --> 00:23:35,490
good so to the children injection is

529
00:23:32,730 --> 00:23:39,540
fixed now we have two more properties

530
00:23:35,490 --> 00:23:40,380
here we have the type and this field is

531
00:23:39,540 --> 00:23:44,070
still injectable

532
00:23:40,380 --> 00:23:45,810
but this is just the HTML type of the

533
00:23:44,070 --> 00:23:48,480
element so what can we do you know we

534
00:23:45,810 --> 00:23:50,340
cannot inject any attributes here okay

535
00:23:48,480 --> 00:23:51,660
so you may inject another header you may

536
00:23:50,340 --> 00:23:54,149
inject another div you may inject you

537
00:23:51,660 --> 00:23:56,040
know kind of break or image but you

538
00:23:54,150 --> 00:24:02,370
cannot inject any properties so it's

539
00:23:56,040 --> 00:24:05,760
pretty useless the good stuff is the

540
00:24:02,370 --> 00:24:09,060
props which is still injectable so if

541
00:24:05,760 --> 00:24:12,269
you are passing untrusted input into the

542
00:24:09,060 --> 00:24:14,099
props element

543
00:24:12,269 --> 00:24:15,509
you just set your property to

544
00:24:14,099 --> 00:24:18,330
dangerousness at innerhtml

545
00:24:15,509 --> 00:24:20,789
and pass your input and your input

546
00:24:18,330 --> 00:24:23,879
should be an object with the underscore

547
00:24:20,789 --> 00:24:27,269
underscore HTML attribute name and then

548
00:24:23,879 --> 00:24:29,668
kind of your payload so this is one sync

549
00:24:27,269 --> 00:24:31,469
as you know in our like the code review

550
00:24:29,669 --> 00:24:33,719
terminology we say that we're looking

551
00:24:31,469 --> 00:24:35,580
for we are creating the elements

552
00:24:33,719 --> 00:24:37,379
dynamically this is one place where you

553
00:24:35,580 --> 00:24:40,739
definitely have to look for untrusted

554
00:24:37,379 --> 00:24:44,309
input the other problem the other

555
00:24:40,739 --> 00:24:46,349
exercise vector are the injections into

556
00:24:44,309 --> 00:24:50,070
the attributes that allow JavaScript

557
00:24:46,349 --> 00:24:53,039
execution already and most common of

558
00:24:50,070 --> 00:24:56,339
them are the element the attributes that

559
00:24:53,039 --> 00:24:58,829
accept URL so your eyes because you can

560
00:24:56,339 --> 00:25:01,918
of course inject the JavaScript schema

561
00:24:58,829 --> 00:25:04,859
your eye and inject your payload here so

562
00:25:01,919 --> 00:25:07,649
it's not only the href tag that kind of

563
00:25:04,859 --> 00:25:10,559
weight well known but html5 also

564
00:25:07,649 --> 00:25:13,498
introduced a couple things like the form

565
00:25:10,559 --> 00:25:17,999
action for the button or the poster

566
00:25:13,499 --> 00:25:19,829
attribute for the the video and now it's

567
00:25:17,999 --> 00:25:22,109
fixed but used to be a problem as well

568
00:25:19,829 --> 00:25:23,908
so instead of let the post are the URL

569
00:25:22,109 --> 00:25:29,309
to an image you could also inject the

570
00:25:23,909 --> 00:25:32,969
JavaScript URL and Oh Elsa another html5

571
00:25:29,309 --> 00:25:35,239
new newschannel5 feature are the imports

572
00:25:32,969 --> 00:25:38,999
the JavaScript imports because in your

573
00:25:35,239 --> 00:25:41,039
head header you could inject the imports

574
00:25:38,999 --> 00:25:43,200
links to the other JavaScript files that

575
00:25:41,039 --> 00:25:45,839
would be load it into your page and so

576
00:25:43,200 --> 00:25:47,609
if you create those dynamically then you

577
00:25:45,839 --> 00:25:50,639
know if your user input goes into this

578
00:25:47,609 --> 00:25:53,968
href for the link element then you can

579
00:25:50,639 --> 00:25:56,269
also cue JavaScript how do we fix that

580
00:25:53,969 --> 00:25:58,499
well you have to strip out the

581
00:25:56,269 --> 00:26:00,629
JavaScript schema right you can have

582
00:25:58,499 --> 00:26:03,749
right as simple break X for that or a

583
00:26:00,629 --> 00:26:06,119
better way to do just use a library that

584
00:26:03,749 --> 00:26:08,759
will you know parse the URL and actually

585
00:26:06,119 --> 00:26:13,579
you can then verify what is the protocol

586
00:26:08,759 --> 00:26:16,200
of the URL that you are injecting and

587
00:26:13,579 --> 00:26:19,789
yes I know these things make gym very

588
00:26:16,200 --> 00:26:19,789
very very angry right gym

589
00:26:21,820 --> 00:26:27,279
all right so let's look at some examples

590
00:26:44,940 --> 00:26:48,570
the moment of glory

591
00:27:07,460 --> 00:27:12,740
all right so here's a sample JavaScript

592
00:27:10,970 --> 00:27:16,250
of legaia react application that we use

593
00:27:12,740 --> 00:27:23,240
in our IOT training and if we create a

594
00:27:16,250 --> 00:27:32,630
new post with the name and we specify

595
00:27:23,240 --> 00:27:36,530
the URL looks good and then when we try

596
00:27:32,630 --> 00:27:38,690
to visit the link now we have the pop-up

597
00:27:36,530 --> 00:27:41,960
injection of course so if we look at the

598
00:27:38,690 --> 00:27:45,230
source code what's going on here is that

599
00:27:41,960 --> 00:27:48,020
we are creating you know a new post and

600
00:27:45,230 --> 00:27:48,710
then we are sending that URL from the

601
00:27:48,020 --> 00:27:50,570
server-side

602
00:27:48,710 --> 00:27:52,960
Batman we didn't validate on the

603
00:27:50,570 --> 00:27:55,639
client-side and we're creating a new

604
00:27:52,960 --> 00:27:58,820
component here with react and sending

605
00:27:55,640 --> 00:28:01,400
that URL property and then if we look at

606
00:27:58,820 --> 00:28:07,700
the component itself then we're creating

607
00:28:01,400 --> 00:28:09,710
and a tag with an href that takes our

608
00:28:07,700 --> 00:28:11,450
URL right that's where injection happens

609
00:28:09,710 --> 00:28:13,640
so you were setting the href to

610
00:28:11,450 --> 00:28:16,250
something that is not trusted we don't

611
00:28:13,640 --> 00:28:18,620
have any validation and that becomes a

612
00:28:16,250 --> 00:28:21,350
problem actually this code has another

613
00:28:18,620 --> 00:28:27,800
vulnerability so if we look at this a

614
00:28:21,350 --> 00:28:31,330
tag here then so we said the target was

615
00:28:27,800 --> 00:28:36,530
at the href we said the class name and

616
00:28:31,330 --> 00:28:38,929
that's pretty much it right so what what

617
00:28:36,530 --> 00:28:43,990
else is wrong with this with setting an

618
00:28:38,930 --> 00:28:43,990
a tag to an unknown URL

619
00:28:51,140 --> 00:28:57,740
Yeah right so I talked about that like

620
00:28:54,720 --> 00:29:00,900
that that's number one what else

621
00:28:57,740 --> 00:29:03,990
so that untrusted URL when a user clicks

622
00:29:00,900 --> 00:29:07,200
on it the browser will set a referer

623
00:29:03,990 --> 00:29:08,850
header from your site that is gonna go

624
00:29:07,200 --> 00:29:10,590
to the third party side right and

625
00:29:08,850 --> 00:29:12,060
depending on what information you have

626
00:29:10,590 --> 00:29:14,610
in the referer header you may be leaking

627
00:29:12,060 --> 00:29:17,850
some you know pretty interesting stuff

628
00:29:14,610 --> 00:29:22,110
so it's not kind of as bad but yes

629
00:29:17,850 --> 00:29:24,469
there's that as well so let's go back to

630
00:29:22,110 --> 00:29:24,469
the slides

631
00:29:39,830 --> 00:29:45,409
so the next type of XSS against steal an

632
00:29:42,380 --> 00:29:47,450
exercise subject is the exercise with

633
00:29:45,410 --> 00:29:50,510
mag down well you know if we need to

634
00:29:47,450 --> 00:29:52,280
display some rich text with you know

635
00:29:50,510 --> 00:29:55,250
bold to tell etcetera we're writing a

636
00:29:52,280 --> 00:29:56,810
CMS going back to the example from the

637
00:29:55,250 --> 00:29:59,540
Oh this morning right and we need to

638
00:29:56,810 --> 00:30:02,179
have this rich content one way to

639
00:29:59,540 --> 00:30:03,920
display this to use markdown awesome

640
00:30:02,180 --> 00:30:06,590
because it doesn't have any scripts you

641
00:30:03,920 --> 00:30:09,230
know all good well how do we display a

642
00:30:06,590 --> 00:30:10,040
markdown in an application like this

643
00:30:09,230 --> 00:30:12,200
react

644
00:30:10,040 --> 00:30:13,909
out-of-the-box doesn't have a feature to

645
00:30:12,200 --> 00:30:17,000
display markdown so you will use a

646
00:30:13,910 --> 00:30:19,190
library that will convert your markdown

647
00:30:17,000 --> 00:30:21,560
into HTML and then you need to display

648
00:30:19,190 --> 00:30:23,600
it on the page one example is the

649
00:30:21,560 --> 00:30:26,110
showdown library and what it does you

650
00:30:23,600 --> 00:30:29,240
know converts HTML and then to display

651
00:30:26,110 --> 00:30:31,669
how we just play HTML you have to use

652
00:30:29,240 --> 00:30:33,290
the dangerous to set in HTML but we're

653
00:30:31,670 --> 00:30:37,760
good right because we're using markdown

654
00:30:33,290 --> 00:30:42,290
so we should be safe except what if your

655
00:30:37,760 --> 00:30:44,690
markdown contains a script tag the

656
00:30:42,290 --> 00:30:47,300
problem here is that the showdown

657
00:30:44,690 --> 00:30:50,930
library or whatever else you're using is

658
00:30:47,300 --> 00:30:53,530
not gonna strip out exercise under that

659
00:30:50,930 --> 00:30:57,260
stripped out HTML scripts or HTML tags

660
00:30:53,530 --> 00:30:59,090
before it converts it into HTML it's

661
00:30:57,260 --> 00:31:01,640
just gonna take it as they wore in the

662
00:30:59,090 --> 00:31:04,040
source and put it you know into into the

663
00:31:01,640 --> 00:31:06,590
output so that is even more dangerous

664
00:31:04,040 --> 00:31:09,050
because you look at the code and you

665
00:31:06,590 --> 00:31:10,490
think wow they're using markdown good

666
00:31:09,050 --> 00:31:13,159
right it gives you that sense of

667
00:31:10,490 --> 00:31:15,530
security but actually if you don't

668
00:31:13,160 --> 00:31:17,480
validate your markdown coming in and it

669
00:31:15,530 --> 00:31:20,090
contains a script tag an image tag or

670
00:31:17,480 --> 00:31:23,390
whatever it's gonna end up in the output

671
00:31:20,090 --> 00:31:31,419
as well so again let's look and the

672
00:31:23,390 --> 00:31:31,420
solution it's not clicking back

673
00:31:33,009 --> 00:31:40,490
right solution used homage to male

674
00:31:37,070 --> 00:31:43,220
purified thanks Mario because again

675
00:31:40,490 --> 00:31:47,019
markdown by itself will not do that for

676
00:31:43,220 --> 00:31:47,019
you so let's look at the demo

677
00:31:56,920 --> 00:32:05,140
so here I have my little application

678
00:32:00,010 --> 00:32:08,890
where I'm typing some markdown all good

679
00:32:05,140 --> 00:32:11,070
but if I'm trying to embed in an HTML

680
00:32:08,890 --> 00:32:11,070
tag

681
00:32:18,100 --> 00:32:21,879
don't write so let's look at the source

682
00:32:20,620 --> 00:32:31,178
code because that's more interesting

683
00:32:21,880 --> 00:32:33,520
than just saying a pop up so here's

684
00:32:31,179 --> 00:32:35,080
what's going on on the client side right

685
00:32:33,520 --> 00:32:36,940
so we're getting this markdown from the

686
00:32:35,080 --> 00:32:38,379
server save it on the server didn't do

687
00:32:36,940 --> 00:32:42,160
any validation because we know it's

688
00:32:38,380 --> 00:32:45,250
marked down kinda we converted into HTML

689
00:32:42,160 --> 00:32:48,250
and then we returned it as an object

690
00:32:45,250 --> 00:32:50,280
with the HTML attribute and then later

691
00:32:48,250 --> 00:32:53,620
in the code we set it into the

692
00:32:50,280 --> 00:32:57,879
dangerously set in our HTML and so if

693
00:32:53,620 --> 00:33:00,629
our markdown contains some exercise it's

694
00:32:57,880 --> 00:33:03,610
gonna be right out there so to fix that

695
00:33:00,630 --> 00:33:09,640
we just use a sanitizer

696
00:33:03,610 --> 00:33:14,530
for example the Dom purify and I can

697
00:33:09,640 --> 00:33:18,730
find the right built here but basically

698
00:33:14,530 --> 00:33:21,280
you know it it fixes the issue so don't

699
00:33:18,730 --> 00:33:24,600
think that if you're using markdown it's

700
00:33:21,280 --> 00:33:24,600
gonna save your world

701
00:33:45,280 --> 00:33:52,460
right so if you're using pure markdown

702
00:33:49,039 --> 00:33:54,980
right it doesn't have a way that they do

703
00:33:52,460 --> 00:33:58,070
the language itself right it doesn't

704
00:33:54,980 --> 00:33:59,539
have a way to input a script but the

705
00:33:58,070 --> 00:34:00,918
problem it's not gonna the problem with

706
00:33:59,539 --> 00:34:03,559
the markdown standard the markdown

707
00:34:00,919 --> 00:34:06,110
itself but with the showdown library or

708
00:34:03,559 --> 00:34:09,800
like some other libraries as well that

709
00:34:06,110 --> 00:34:12,799
when it converts markdown into HTML if

710
00:34:09,800 --> 00:34:14,419
you have script tags or you know image

711
00:34:12,800 --> 00:34:16,550
tags or any HTML tags

712
00:34:14,418 --> 00:34:20,629
it doesn't say oh this doesn't look like

713
00:34:16,550 --> 00:34:22,879
markdown just remove it or show an error

714
00:34:20,629 --> 00:34:24,379
or something you know it already it

715
00:34:22,879 --> 00:34:26,750
already has the tag so I'm just gonna

716
00:34:24,379 --> 00:34:29,118
take it and put it into the output

717
00:34:26,750 --> 00:34:32,899
because the markdown that is converted

718
00:34:29,119 --> 00:34:38,050
from markdown to HTML is not the HTML

719
00:34:32,899 --> 00:34:38,049
purifier which is Dom I think

720
00:34:44,219 --> 00:34:50,040
yes well but I really I mean I would say

721
00:34:47,699 --> 00:34:52,379
why would you have an untrusted markdown

722
00:34:50,040 --> 00:34:54,329
if you're saying your user can write

723
00:34:52,379 --> 00:34:56,759
markdown and you're storing markdown

724
00:34:54,329 --> 00:34:58,650
into the database why don't you do the

725
00:34:56,760 --> 00:35:00,569
little check right there is it actually

726
00:34:58,650 --> 00:35:03,030
markdown or does it have your angle

727
00:35:00,569 --> 00:35:07,710
brackets etc but for that you basically

728
00:35:03,030 --> 00:35:17,760
need like a markdown purifier I don't

729
00:35:07,710 --> 00:35:20,329
think so I mean I yes and go okay and

730
00:35:17,760 --> 00:35:20,329
Mario

731
00:35:38,440 --> 00:35:41,440
yeah

732
00:35:59,210 --> 00:36:04,359
yep thank you thank you further edition

733
00:36:01,250 --> 00:36:07,550
so basically markdown is not a security

734
00:36:04,359 --> 00:36:09,890
secur subset of HTML right markdown is

735
00:36:07,550 --> 00:36:12,050
just a subset of certain certain

736
00:36:09,890 --> 00:36:15,140
features of HTML and we shouldn't trust

737
00:36:12,050 --> 00:36:17,660
it we shouldn't use it as a security

738
00:36:15,140 --> 00:36:20,690
feature it's just a subset of vegetable

739
00:36:17,660 --> 00:36:22,220
and if you inject into it you're gonna

740
00:36:20,690 --> 00:36:25,569
have the injection because it doesn't do

741
00:36:22,220 --> 00:36:25,569
anything to prevent you from that

742
00:36:49,470 --> 00:37:14,299
and this ends that and go you're saying

743
00:36:53,540 --> 00:37:14,300
common mark is I mean so so you

744
00:37:16,369 --> 00:37:20,580
wellwe've unless yours your service ID

745
00:37:18,869 --> 00:37:21,869
is written in JavaScript then you can

746
00:37:20,580 --> 00:37:22,259
use a Java source library on the server

747
00:37:21,869 --> 00:37:25,170
side

748
00:37:22,260 --> 00:37:26,700
but yes yes you can validate it on the

749
00:37:25,170 --> 00:37:28,500
server side when your before you store

750
00:37:26,700 --> 00:37:31,290
it in the database right or I mean you

751
00:37:28,500 --> 00:37:33,270
can use the Dom purifier on the client

752
00:37:31,290 --> 00:37:36,119
side before you output it to the page

753
00:37:33,270 --> 00:37:38,790
after you got the data from the server

754
00:37:36,119 --> 00:37:52,410
and then you clean it and then you put

755
00:37:38,790 --> 00:37:53,940
it out and that's fine if if your client

756
00:37:52,410 --> 00:38:01,560
is not a browser then I mean that's

757
00:37:53,940 --> 00:38:07,470
different story yes it's a longer

758
00:38:01,560 --> 00:38:09,680
conversation so server-side rendering so

759
00:38:07,470 --> 00:38:12,029
that's another feature that react

760
00:38:09,680 --> 00:38:14,310
implemented and that kind of made this

761
00:38:12,030 --> 00:38:18,500
framework different from others so

762
00:38:14,310 --> 00:38:21,500
what's going on here well because our

763
00:38:18,500 --> 00:38:25,050
client is becoming heavier and heavier

764
00:38:21,500 --> 00:38:27,089
the initial load of the page was taking

765
00:38:25,050 --> 00:38:29,250
longer and longer that's one thing so

766
00:38:27,089 --> 00:38:31,830
performance was an issue so then react

767
00:38:29,250 --> 00:38:34,830
developer says away the initial page

768
00:38:31,830 --> 00:38:37,589
that we show to the users doesn't

769
00:38:34,830 --> 00:38:39,630
doesn't have to have any events attached

770
00:38:37,589 --> 00:38:41,369
to it or any interactivity first when

771
00:38:39,630 --> 00:38:43,290
the user just starts looking at it right

772
00:38:41,369 --> 00:38:45,780
we can add the events and interactivity

773
00:38:43,290 --> 00:38:49,170
in the next few seconds but that will

774
00:38:45,780 --> 00:38:52,320
have the perception of the page loading

775
00:38:49,170 --> 00:38:54,540
very very fast so performance is was one

776
00:38:52,320 --> 00:38:56,820
concern and then the other problem with

777
00:38:54,540 --> 00:38:59,130
react and other jobs with frameworks is

778
00:38:56,820 --> 00:39:00,810
the search engine optimizations becomes

779
00:38:59,130 --> 00:39:03,180
more complex and then there are ways

780
00:39:00,810 --> 00:39:08,099
around it but out of the box the CEO

781
00:39:03,180 --> 00:39:10,169
is not as great so we decided to switch

782
00:39:08,099 --> 00:39:14,819
the architecture right so in this case

783
00:39:10,170 --> 00:39:17,309
we are rendering the HTML the code on

784
00:39:14,819 --> 00:39:19,920
the server side and then or HTML and

785
00:39:17,309 --> 00:39:21,780
JavaScript and then sending the HTML

786
00:39:19,920 --> 00:39:24,480
that needs to be just displayed in the

787
00:39:21,780 --> 00:39:29,430
browser right away and then we attach

788
00:39:24,480 --> 00:39:32,490
the event later so that actually becomes

789
00:39:29,430 --> 00:39:35,578
very similar to the old server-side

790
00:39:32,490 --> 00:39:37,770
templates to your GSP is smarty whatever

791
00:39:35,579 --> 00:39:39,540
it we render that on the server side and

792
00:39:37,770 --> 00:39:41,819
then sends HTML to the to the browser so

793
00:39:39,540 --> 00:39:44,550
kind of the idea is not new it's new for

794
00:39:41,819 --> 00:39:48,599
the JavaScript client-side but it's not

795
00:39:44,550 --> 00:39:51,720
new in programming in general and what

796
00:39:48,599 --> 00:39:53,460
does it change in terms of security well

797
00:39:51,720 --> 00:39:55,439
in terms of security I'll actually

798
00:39:53,460 --> 00:39:58,200
before we get to security so server side

799
00:39:55,440 --> 00:40:01,890
right so what what happens is that we

800
00:39:58,200 --> 00:40:05,189
are rendering the HTML on the server and

801
00:40:01,890 --> 00:40:08,819
then we're sending it to the client side

802
00:40:05,190 --> 00:40:11,160
and we start displaying it right away

803
00:40:08,819 --> 00:40:13,349
and as we're displaying the page we're

804
00:40:11,160 --> 00:40:15,480
loading the JavaScript and then we're

805
00:40:13,349 --> 00:40:17,430
executing react having all the linkages

806
00:40:15,480 --> 00:40:19,710
all the bindings all the events and then

807
00:40:17,430 --> 00:40:21,808
the page becomes interactive at the end

808
00:40:19,710 --> 00:40:24,270
with the client-side rendering the

809
00:40:21,809 --> 00:40:27,630
difference is that you know we create

810
00:40:24,270 --> 00:40:29,220
HTML then we send it HTML with all the

811
00:40:27,630 --> 00:40:31,470
JavaScript dependencies to the browser

812
00:40:29,220 --> 00:40:33,299
so then the browser takes time to load

813
00:40:31,470 --> 00:40:35,368
HTML then to load all the JavaScript

814
00:40:33,299 --> 00:40:38,099
libraries then to render everything with

815
00:40:35,369 --> 00:40:39,990
react and only then we displayed so that

816
00:40:38,099 --> 00:40:43,049
kind of adds a second

817
00:40:39,990 --> 00:40:46,279
two seconds and that's a lot of time in

818
00:40:43,049 --> 00:40:48,299
in our world for Jellicle applications

819
00:40:46,280 --> 00:40:52,680
so what does it change in terms of

820
00:40:48,299 --> 00:40:56,309
security well one is now if you have

821
00:40:52,680 --> 00:40:58,589
untrusted data in your HTML template

822
00:40:56,309 --> 00:41:00,270
when you're rendering it on the server

823
00:40:58,589 --> 00:41:02,970
side if you're injecting something into

824
00:41:00,270 --> 00:41:05,540
it you're injecting that on the server

825
00:41:02,970 --> 00:41:08,910
side before all your react protections

826
00:41:05,540 --> 00:41:10,810
before they are enabled so you may still

827
00:41:08,910 --> 00:41:13,690
be able to have an

828
00:41:10,810 --> 00:41:16,660
kind of plain server-side injection as

829
00:41:13,690 --> 00:41:20,410
you had before in any other server-side

830
00:41:16,660 --> 00:41:24,069
template and then the other thing is

831
00:41:20,410 --> 00:41:28,240
that the data is added directly to the

832
00:41:24,070 --> 00:41:30,340
Dom you know without the the react bells

833
00:41:28,240 --> 00:41:32,680
and whistles so let's look at an example

834
00:41:30,340 --> 00:41:33,210
it will make kind of more more sense

835
00:41:32,680 --> 00:41:36,609
here

836
00:41:33,210 --> 00:41:39,670
so server-side rendering so create the

837
00:41:36,610 --> 00:41:41,590
react elements create the reacts

838
00:41:39,670 --> 00:41:44,350
application we render it on the

839
00:41:41,590 --> 00:41:46,000
server-side send the HTML but to make

840
00:41:44,350 --> 00:41:48,190
the HTML alive we need to send the state

841
00:41:46,000 --> 00:41:50,320
and to send the state the way we do it

842
00:41:48,190 --> 00:41:52,900
in state will be just your JSON object

843
00:41:50,320 --> 00:41:55,360
with all the props or whatever data you

844
00:41:52,900 --> 00:41:59,980
need to send and to send it the way we

845
00:41:55,360 --> 00:42:02,080
do it is we set a global variable to the

846
00:41:59,980 --> 00:42:04,480
window it's usually called the preloaded

847
00:42:02,080 --> 00:42:06,069
States or app initial state or stage

848
00:42:04,480 --> 00:42:09,130
just kind of all the different names

849
00:42:06,070 --> 00:42:10,180
whatever and we just set it to that JSON

850
00:42:09,130 --> 00:42:13,620
object right there

851
00:42:10,180 --> 00:42:18,490
so that happens before react is loaded

852
00:42:13,620 --> 00:42:23,620
so all right what if I have user input

853
00:42:18,490 --> 00:42:30,879
into that JSON object well if I'm trying

854
00:42:23,620 --> 00:42:32,410
to inject something into JSON like I

855
00:42:30,880 --> 00:42:36,370
would say I would like to inject

856
00:42:32,410 --> 00:42:38,649
JavaScript so I need to break out of the

857
00:42:36,370 --> 00:42:41,410
JSON context so I try to inject double

858
00:42:38,650 --> 00:42:44,050
quote gets escaped yeah it doesn't work

859
00:42:41,410 --> 00:42:47,980
but if I inject something like that I

860
00:42:44,050 --> 00:42:49,900
mean from the JavaScript perspective I'm

861
00:42:47,980 --> 00:42:53,200
still good I'm still in double quotes I

862
00:42:49,900 --> 00:42:55,270
didn't break out of my JSON object but

863
00:42:53,200 --> 00:42:57,100
the way the server the browser is gonna

864
00:42:55,270 --> 00:42:59,320
render it it's gonna pick up the first

865
00:42:57,100 --> 00:43:01,509
script tag and then it's gonna pick up

866
00:42:59,320 --> 00:43:04,540
the second the closing script tag and

867
00:43:01,510 --> 00:43:07,750
say that's it the script is done and

868
00:43:04,540 --> 00:43:09,970
then it's gonna render my alert as the

869
00:43:07,750 --> 00:43:11,920
next script this is just the quirkiness

870
00:43:09,970 --> 00:43:15,580
of browsers kind of this is how it works

871
00:43:11,920 --> 00:43:18,010
and there you have your injection which

872
00:43:15,580 --> 00:43:22,960
is funny because you are injecting into

873
00:43:18,010 --> 00:43:24,010
JavaScript content context so you

874
00:43:22,960 --> 00:43:25,840
shouldn't need a script

875
00:43:24,010 --> 00:43:27,790
Tagg right we always say like oh the

876
00:43:25,840 --> 00:43:30,040
injection is according to the context we

877
00:43:27,790 --> 00:43:31,300
should just inject the JavaScript but

878
00:43:30,040 --> 00:43:34,240
that's actually how it works with a

879
00:43:31,300 --> 00:43:36,630
browser so and the problem the biggest

880
00:43:34,240 --> 00:43:40,029
problem with that is this code example

881
00:43:36,630 --> 00:43:49,270
on top here without any protection isn't

882
00:43:40,030 --> 00:43:52,960
any tutorial on react yep yeah yeah

883
00:43:49,270 --> 00:43:54,220
that's a well but the but but that's the

884
00:43:52,960 --> 00:43:55,750
browser so that I mean that's how it

885
00:43:54,220 --> 00:44:00,899
interprets the JavaScript right it's

886
00:43:55,750 --> 00:44:00,900
another JavaScript so the HTML

887
00:44:15,070 --> 00:44:23,840
yeah yeah yeah right so yeah thank you

888
00:44:19,610 --> 00:44:25,880
them so the bar browser parses the HTML

889
00:44:23,840 --> 00:44:28,010
first and says okay opening script

890
00:44:25,880 --> 00:44:30,560
closing script opening strip close it

891
00:44:28,010 --> 00:44:32,840
doesn't know that the double quotes like

892
00:44:30,560 --> 00:44:34,670
this is still the JSON object that I'm

893
00:44:32,840 --> 00:44:38,750
trying to create inside the JavaScript

894
00:44:34,670 --> 00:44:41,420
so yep the embedded context get very

895
00:44:38,750 --> 00:44:43,780
very messy so let's look at an example

896
00:44:41,420 --> 00:44:43,780
here

897
00:45:03,470 --> 00:45:15,200
demo gods I have a complex password it's

898
00:45:08,839 --> 00:45:16,910
not one two three so so here is my

899
00:45:15,200 --> 00:45:19,669
application that renders on the server

900
00:45:16,910 --> 00:45:22,490
side and if I'm sending a you know just

901
00:45:19,670 --> 00:45:25,609
a URL parameter it renders on the page

902
00:45:22,490 --> 00:45:30,109
all good but if I'm sending a script as

903
00:45:25,609 --> 00:45:31,640
I showed you right I get an XSS nothing

904
00:45:30,109 --> 00:45:35,240
interesting so let's look at the source

905
00:45:31,640 --> 00:45:37,009
code here first of the page source so

906
00:45:35,240 --> 00:45:40,790
the interesting thing is that the

907
00:45:37,010 --> 00:45:43,849
injection happens not in the react code

908
00:45:40,790 --> 00:45:46,819
right that injection of the state where

909
00:45:43,849 --> 00:45:50,180
we say window app initial State this is

910
00:45:46,819 --> 00:45:54,079
before the react app the so this is just

911
00:45:50,180 --> 00:45:56,589
kind of pure old HTML with some

912
00:45:54,079 --> 00:45:56,589
JavaScript

913
00:46:02,210 --> 00:46:14,160
there's no templating language so oh um

914
00:46:10,769 --> 00:46:16,859
the I mean you may be using a templating

915
00:46:14,160 --> 00:46:18,239
language like EGS I mean depending on

916
00:46:16,859 --> 00:46:20,700
what's your server side is written in

917
00:46:18,239 --> 00:46:24,029
right if it's node code you will use the

918
00:46:20,700 --> 00:46:25,410
GS Jade whatever nothing standard I mean

919
00:46:24,029 --> 00:46:27,960
if you're using writing this in Java

920
00:46:25,410 --> 00:46:30,960
you'll just do jus spin on whatever it

921
00:46:27,960 --> 00:46:35,099
doesn't matter right so if we look at

922
00:46:30,960 --> 00:46:42,749
the location where this information so

923
00:46:35,099 --> 00:46:45,450
the injection is so the the injection is

924
00:46:42,749 --> 00:46:48,899
right here right if we're looking how

925
00:46:45,450 --> 00:46:52,348
the react interprets that payload I mean

926
00:46:48,900 --> 00:46:54,029
it actually does old encoding so it's

927
00:46:52,349 --> 00:46:56,789
not it's kind of like it's not the

928
00:46:54,029 --> 00:46:59,130
reacts problem really right

929
00:46:56,789 --> 00:47:00,869
so reacted like well I did my encoding I

930
00:46:59,130 --> 00:47:02,700
didn't do anything so once that is

931
00:47:00,869 --> 00:47:04,440
inside the react M plight it's all

932
00:47:02,700 --> 00:47:07,468
encoded but the problem is that we

933
00:47:04,440 --> 00:47:10,019
inject the state before the react app

934
00:47:07,469 --> 00:47:12,329
the state is you know when the react app

935
00:47:10,019 --> 00:47:16,200
needs the state when it loads so it

936
00:47:12,329 --> 00:47:25,619
should already be in the HTML page so if

937
00:47:16,200 --> 00:47:28,950
we look at the code here so we're

938
00:47:25,619 --> 00:47:32,759
creating our state here and I'm taking

939
00:47:28,950 --> 00:47:34,919
my know so that I have the JavaScript

940
00:47:32,759 --> 00:47:38,039
server-side code expressed and nothing

941
00:47:34,920 --> 00:47:40,019
fancy so I get my name from the query

942
00:47:38,039 --> 00:47:42,539
parameter don't do any sanitization

943
00:47:40,019 --> 00:47:45,618
create my state send the couple

944
00:47:42,539 --> 00:47:48,769
parameters into it and then I call this

945
00:47:45,619 --> 00:47:51,900
render to string so this is the react

946
00:47:48,769 --> 00:47:52,968
function that renders the react Dom on

947
00:47:51,900 --> 00:47:55,979
the server side

948
00:47:52,969 --> 00:47:59,039
when is the distraint to a string and

949
00:47:55,979 --> 00:48:02,968
then I'm using a template and passing

950
00:47:59,039 --> 00:48:06,960
that into the initial state parameter

951
00:48:02,969 --> 00:48:12,200
that is then injected into the index

952
00:48:06,960 --> 00:48:12,200
page client side I'm sorry

953
00:48:13,049 --> 00:48:20,200
template here right so then I take that

954
00:48:16,619 --> 00:48:24,609
initial state and set it to a global app

955
00:48:20,200 --> 00:48:30,640
initial state variable so how do we fix

956
00:48:24,609 --> 00:48:35,440
it well oh before before we get to the

957
00:48:30,640 --> 00:48:37,089
fixing question the other thing is so

958
00:48:35,440 --> 00:48:41,109
that was the server-side rendering

959
00:48:37,089 --> 00:48:42,940
without any state management on react

960
00:48:41,109 --> 00:48:44,440
right we just have our state in the

961
00:48:42,940 --> 00:48:48,009
JavaScript well what if you're using

962
00:48:44,440 --> 00:48:50,230
Redux same problem right same thing if

963
00:48:48,009 --> 00:48:53,079
you're using Redux you still have to set

964
00:48:50,230 --> 00:48:55,990
the state initially and like all you do

965
00:48:53,079 --> 00:48:57,519
is you do the json stringify and you do

966
00:48:55,990 --> 00:49:01,029
it in the previous example as well just

967
00:48:57,519 --> 00:49:04,839
gonna earlier in the code and again the

968
00:49:01,029 --> 00:49:07,930
problem with the with the react with the

969
00:49:04,839 --> 00:49:10,779
Redux was that this code this vulnerable

970
00:49:07,930 --> 00:49:14,038
code was in their documentation like

971
00:49:10,779 --> 00:49:17,410
that's like if you look for how to

972
00:49:14,039 --> 00:49:18,839
create you know do SSR with the Redux

973
00:49:17,410 --> 00:49:25,328
like that's the code you're gonna get

974
00:49:18,839 --> 00:49:28,210
until it's like with 2015 I think Emily

975
00:49:25,329 --> 00:49:31,749
Smith found this vulnerability reported

976
00:49:28,210 --> 00:49:33,519
it to Redux and because it's not a issue

977
00:49:31,749 --> 00:49:35,618
in the redux it's just kind of the issue

978
00:49:33,519 --> 00:49:37,359
in their documentation now they have on

979
00:49:35,619 --> 00:49:38,950
this page they have on the bottom a

980
00:49:37,359 --> 00:49:41,619
little section that says security

981
00:49:38,950 --> 00:49:43,419
concerns and says by the way if you're

982
00:49:41,619 --> 00:49:45,989
doing it right away you're gonna have a

983
00:49:43,420 --> 00:49:49,150
problem and this is how you fix it so

984
00:49:45,989 --> 00:49:54,099
instead just use you know dot replace

985
00:49:49,150 --> 00:49:56,950
and you you know escape any less than

986
00:49:54,099 --> 00:49:58,749
character or R so that kind of that

987
00:49:56,950 --> 00:50:00,879
that's the fix that they are proposing

988
00:49:58,749 --> 00:50:03,009
of course I would say better fix would

989
00:50:00,880 --> 00:50:05,950
be to use a library that will just

990
00:50:03,009 --> 00:50:07,779
serialize JavaScript so for example the

991
00:50:05,950 --> 00:50:10,499
serialize JavaScript library will

992
00:50:07,779 --> 00:50:15,130
basically encode your scripts into

993
00:50:10,499 --> 00:50:18,819
JavaScript context and that will fix the

994
00:50:15,130 --> 00:50:23,619
issue so

995
00:50:18,820 --> 00:50:27,369
the next time oh sorry I'm gonna I'm

996
00:50:23,619 --> 00:50:31,240
gonna speed up so the next vulnerability

997
00:50:27,369 --> 00:50:33,280
is again evil like how many evil

998
00:50:31,240 --> 00:50:34,930
problems can we have well as long as we

999
00:50:33,280 --> 00:50:37,810
have evil and JavaScript there gonna be

1000
00:50:34,930 --> 00:50:40,450
issues with that again this is not react

1001
00:50:37,810 --> 00:50:42,940
specific actually but like which we see

1002
00:50:40,450 --> 00:50:45,460
that so going back to the serialized

1003
00:50:42,940 --> 00:50:47,950
javascript library that I just said use

1004
00:50:45,460 --> 00:50:49,510
it it's awesome well what it does it

1005
00:50:47,950 --> 00:50:51,640
serializes JavaScript and if you

1006
00:50:49,510 --> 00:50:53,369
sterilize something you might want to

1007
00:50:51,640 --> 00:50:56,170
dis you realize something

1008
00:50:53,369 --> 00:50:57,730
well the serialize javascript library

1009
00:50:56,170 --> 00:51:00,970
doesn't have the deserialized

1010
00:50:57,730 --> 00:51:03,190
function in it and instead what they

1011
00:51:00,970 --> 00:51:04,930
have is they have this wonderful piece

1012
00:51:03,190 --> 00:51:07,210
of code in their documentation on their

1013
00:51:04,930 --> 00:51:08,470
read me page and github saying that hey

1014
00:51:07,210 --> 00:51:10,900
if you want to deserialize

1015
00:51:08,470 --> 00:51:13,540
something that you see realized do it

1016
00:51:10,900 --> 00:51:16,599
like this just put it in the parenthesis

1017
00:51:13,540 --> 00:51:19,359
and call eval on that what can go wrong

1018
00:51:16,599 --> 00:51:21,369
and i think they didn't include this

1019
00:51:19,359 --> 00:51:24,598
function into the library just so that

1020
00:51:21,369 --> 00:51:26,890
they didn't have to fix it nobody could

1021
00:51:24,599 --> 00:51:28,450
could say hey you guys have an issue and

1022
00:51:26,890 --> 00:51:30,848
and the problem is I mean there is no

1023
00:51:28,450 --> 00:51:32,230
way to fix it that's the issue it's not

1024
00:51:30,849 --> 00:51:35,109
like we have a function that's called

1025
00:51:32,230 --> 00:51:37,750
safe eval that's not gonna evaluate your

1026
00:51:35,109 --> 00:51:39,880
javascript in there right I mean if you

1027
00:51:37,750 --> 00:51:41,710
are using something that is it's

1028
00:51:39,880 --> 00:51:43,240
probably a design issue and you have to

1029
00:51:41,710 --> 00:51:44,710
like redesign your application the way

1030
00:51:43,240 --> 00:51:47,020
you're using it or again you're

1031
00:51:44,710 --> 00:51:48,970
validating your input first and you know

1032
00:51:47,020 --> 00:51:52,300
that whatever I'm sending to the eval is

1033
00:51:48,970 --> 00:51:54,939
super super safe but you know who's

1034
00:51:52,300 --> 00:51:56,650
gonna say that who wants to lose their

1035
00:51:54,940 --> 00:51:59,140
job

1036
00:51:56,650 --> 00:52:02,020
another new location for using eval that

1037
00:51:59,140 --> 00:52:04,390
I saw so this was on Stack Overflow so

1038
00:52:02,020 --> 00:52:08,050
the question was a second flow well I

1039
00:52:04,390 --> 00:52:09,848
want to send some JSX to my application

1040
00:52:08,050 --> 00:52:11,950
from the server side to the client side

1041
00:52:09,849 --> 00:52:14,380
and then the render the JSX in like

1042
00:52:11,950 --> 00:52:15,430
update my react app on the fly on the

1043
00:52:14,380 --> 00:52:17,260
client side how do I do that

1044
00:52:15,430 --> 00:52:20,649
and that was the recommendation you know

1045
00:52:17,260 --> 00:52:22,839
use Babel convert it and then do the

1046
00:52:20,650 --> 00:52:26,260
transformation and then just eval the

1047
00:52:22,839 --> 00:52:28,779
code that beta converted well right but

1048
00:52:26,260 --> 00:52:30,190
what does this code do well first of all

1049
00:52:28,780 --> 00:52:31,160
if you're using babel on the client side

1050
00:52:30,190 --> 00:52:33,770
that's already

1051
00:52:31,160 --> 00:52:35,690
probably because they super heavy it's

1052
00:52:33,770 --> 00:52:38,930
not helping your performance and second

1053
00:52:35,690 --> 00:52:40,460
now you're evaluated code that I don't

1054
00:52:38,930 --> 00:52:43,399
know where it's coming from and what

1055
00:52:40,460 --> 00:52:46,280
your JSX may contain and then of course

1056
00:52:43,400 --> 00:52:51,080
we still have the parsing of JSON with

1057
00:52:46,280 --> 00:52:52,880
eval less much much much less so because

1058
00:52:51,080 --> 00:52:55,069
of Court finally developers starting to

1059
00:52:52,880 --> 00:52:57,170
use in JSON that parts and not do just

1060
00:52:55,070 --> 00:53:00,230
evil but that sometimes hable happens in

1061
00:52:57,170 --> 00:53:02,180
the legacy applications and another

1062
00:53:00,230 --> 00:53:04,880
problem with eval is that it will not

1063
00:53:02,180 --> 00:53:06,290
let you create a strong CSP because if

1064
00:53:04,880 --> 00:53:07,970
you're using eval or your library is

1065
00:53:06,290 --> 00:53:11,870
using it well you have to say unsafe

1066
00:53:07,970 --> 00:53:14,089
eval and you're breaking all the

1067
00:53:11,870 --> 00:53:16,970
protection again that you just implement

1068
00:53:14,090 --> 00:53:19,130
it with CSP so react can communicate

1069
00:53:16,970 --> 00:53:21,230
communicates with the server the

1070
00:53:19,130 --> 00:53:24,050
functions are slightly different you

1071
00:53:21,230 --> 00:53:26,030
know it's using the new fetch not not

1072
00:53:24,050 --> 00:53:28,010
react but developers right usually use

1073
00:53:26,030 --> 00:53:31,940
the new fetch function that by default

1074
00:53:28,010 --> 00:53:34,250
makes a get request and funny enough the

1075
00:53:31,940 --> 00:53:37,940
code that we have seen sometimes

1076
00:53:34,250 --> 00:53:39,980
developers use the fetch function the

1077
00:53:37,940 --> 00:53:42,500
get request to change state on the

1078
00:53:39,980 --> 00:53:45,320
server because it's simple right

1079
00:53:42,500 --> 00:53:47,240
unfortunately that happens and this is

1080
00:53:45,320 --> 00:53:48,920
kind of the API and the goal it's just

1081
00:53:47,240 --> 00:53:50,750
gonna be a get and then the API is

1082
00:53:48,920 --> 00:53:53,630
actually you know change user profile

1083
00:53:50,750 --> 00:53:55,280
with the get request problems come out

1084
00:53:53,630 --> 00:53:56,900
of here so you should do this a post

1085
00:53:55,280 --> 00:53:59,240
request you should have the request

1086
00:53:56,900 --> 00:54:01,700
authenticated by default the fetch if

1087
00:53:59,240 --> 00:54:03,740
you set it to a post request will not

1088
00:54:01,700 --> 00:54:07,009
include the cookies so you have to set

1089
00:54:03,740 --> 00:54:12,470
the credentials parameter and you either

1090
00:54:07,010 --> 00:54:15,050
set it to same origin or include if you

1091
00:54:12,470 --> 00:54:17,359
wanna if you are using this course

1092
00:54:15,050 --> 00:54:18,710
that's when you're gonna use the include

1093
00:54:17,360 --> 00:54:21,380
right then you're gonna send your

1094
00:54:18,710 --> 00:54:22,910
cookies to across the origins but by

1095
00:54:21,380 --> 00:54:26,420
default if you're not using course you

1096
00:54:22,910 --> 00:54:28,190
would set a to same origin or if you're

1097
00:54:26,420 --> 00:54:31,610
using don't use tokens you're using

1098
00:54:28,190 --> 00:54:33,530
gwt's or whatever other tokens in the

1099
00:54:31,610 --> 00:54:35,860
headers you would set a set an

1100
00:54:33,530 --> 00:54:39,970
authentication authorization header in

1101
00:54:35,860 --> 00:54:42,770
the headers with the fetch function and

1102
00:54:39,970 --> 00:54:44,368
then the next problem is leaking

1103
00:54:42,770 --> 00:54:47,339
sensitive data in

1104
00:54:44,369 --> 00:54:49,349
the client side talked about that a lot

1105
00:54:47,339 --> 00:54:51,808
of times the reason why this comes up

1106
00:54:49,349 --> 00:54:54,650
and react so this is again a bigger

1107
00:54:51,809 --> 00:54:58,049
topic I'm just gonna mention it but

1108
00:54:54,650 --> 00:55:00,450
because react doesn't implement CSRF

1109
00:54:58,049 --> 00:55:02,999
protection that kinda client side part

1110
00:55:00,450 --> 00:55:06,529
of getting the CSRF token and then

1111
00:55:02,999 --> 00:55:08,279
adding a CSRF header or something

1112
00:55:06,529 --> 00:55:10,680
developers still need to solve this

1113
00:55:08,279 --> 00:55:12,660
problem and one of the solutions that

1114
00:55:10,680 --> 00:55:15,210
everybody says like well just use gwt's

1115
00:55:12,660 --> 00:55:19,788
JSON web tokens then you're not using

1116
00:55:15,210 --> 00:55:23,190
cookies then you don't have CSRF wrong

1117
00:55:19,789 --> 00:55:25,700
JW G's are not meant to maintain

1118
00:55:23,190 --> 00:55:27,420
sessions they have a bunch of other

1119
00:55:25,700 --> 00:55:29,399
problem I mean I'm not saying they're

1120
00:55:27,420 --> 00:55:31,200
they're bad they just have a different

1121
00:55:29,400 --> 00:55:33,569
use case and then also you should

1122
00:55:31,200 --> 00:55:36,890
implement them correctly sign them have

1123
00:55:33,569 --> 00:55:39,420
the right expiration times etc etc so

1124
00:55:36,890 --> 00:55:41,129
but often times the react applications

1125
00:55:39,420 --> 00:55:42,569
are using them and where do they store

1126
00:55:41,130 --> 00:55:44,700
them they will sort them in local

1127
00:55:42,569 --> 00:55:46,499
storage you cannot tell them to store it

1128
00:55:44,700 --> 00:55:49,200
in certain storage because okay there's

1129
00:55:46,499 --> 00:55:52,019
a single-page app it shouldn't have a

1130
00:55:49,200 --> 00:55:53,788
page refresh or another tab but nobody's

1131
00:55:52,019 --> 00:55:55,828
code is perfect and page you know

1132
00:55:53,789 --> 00:55:58,289
application will still use a refresh and

1133
00:55:55,829 --> 00:56:00,690
then your session storage is gone I mean

1134
00:55:58,289 --> 00:56:02,279
you cannot make your user log in every

1135
00:56:00,690 --> 00:56:04,529
time they open the app in the new tab

1136
00:56:02,279 --> 00:56:08,039
right so you're gonna end up using local

1137
00:56:04,529 --> 00:56:10,829
storage so from the pentesters

1138
00:56:08,039 --> 00:56:13,890
perspective your payload now it's not

1139
00:56:10,829 --> 00:56:15,660
gonna be you know script alert but it's

1140
00:56:13,890 --> 00:56:17,279
gonna be something like that right

1141
00:56:15,660 --> 00:56:19,979
you're gonna say hey local storage

1142
00:56:17,279 --> 00:56:22,650
getitem you know jadibooti token or I

1143
00:56:19,979 --> 00:56:24,450
was token so we're now looking not at

1144
00:56:22,650 --> 00:56:26,249
the cookies not document that cookie but

1145
00:56:24,450 --> 00:56:30,180
at whatever is stored in the local

1146
00:56:26,249 --> 00:56:32,848
storage solution don't store anything

1147
00:56:30,180 --> 00:56:35,999
sensitive in a local storage but if you

1148
00:56:32,849 --> 00:56:39,719
are using gwt's make sure the duration

1149
00:56:35,999 --> 00:56:43,499
is not long you're refreshing them again

1150
00:56:39,719 --> 00:56:45,150
that's a separate topic it's its design

1151
00:56:43,499 --> 00:56:47,759
issue right it's not something we can

1152
00:56:45,150 --> 00:56:49,859
fix with just line of code so do's and

1153
00:56:47,759 --> 00:56:52,739
don'ts if you're using react

1154
00:56:49,859 --> 00:56:54,450
can I just sum it up don't use it all

1155
00:56:52,739 --> 00:56:57,839
don't use dangerous to set in your HTML

1156
00:56:54,450 --> 00:57:00,660
if you are using it used on purify

1157
00:56:57,839 --> 00:57:03,499
very validate your HTML before you're

1158
00:57:00,660 --> 00:57:03,499
setting it to the page

1159
00:57:03,589 --> 00:57:09,359
don't use valid don't use untrusted

1160
00:57:07,559 --> 00:57:11,309
input when you're creating the URLs when

1161
00:57:09,359 --> 00:57:12,979
you're searching the href or form action

1162
00:57:11,309 --> 00:57:15,630
or something like that

1163
00:57:12,979 --> 00:57:17,968
don't create components dynamically if

1164
00:57:15,630 --> 00:57:20,009
you do validate whatever you're putting

1165
00:57:17,969 --> 00:57:21,660
into the props now make sure you cannot

1166
00:57:20,009 --> 00:57:25,529
user account inject the dangerous to set

1167
00:57:21,660 --> 00:57:26,819
in HTML into the props and don't store

1168
00:57:25,529 --> 00:57:30,449
sensitive information in the local

1169
00:57:26,819 --> 00:57:33,329
storage do's perform javascript encoding

1170
00:57:30,449 --> 00:57:36,569
if you're using SSR right so that that

1171
00:57:33,329 --> 00:57:39,239
state should be serialized first before

1172
00:57:36,569 --> 00:57:42,119
you set it to the global variable in the

1173
00:57:39,239 --> 00:57:46,890
in JavaScript use the sent ocation on

1174
00:57:42,119 --> 00:57:49,259
your post requests with fetch and do use

1175
00:57:46,890 --> 00:57:50,969
types I mean in react you can use the

1176
00:57:49,259 --> 00:57:52,799
prop types that will make your code

1177
00:57:50,969 --> 00:57:55,349
cleaner a little bit more secure for the

1178
00:57:52,799 --> 00:57:58,680
properties at least and you can also use

1179
00:57:55,349 --> 00:58:00,449
the es lint plugin for react that has a

1180
00:57:58,680 --> 00:58:03,808
bunch of rules mostly quality rules

1181
00:58:00,449 --> 00:58:05,849
because seriously until not a security

1182
00:58:03,809 --> 00:58:08,579
tool but there are a couple rules that

1183
00:58:05,849 --> 00:58:12,329
actually will identify low hanging fruit

1184
00:58:08,579 --> 00:58:13,890
or at least show you points of interest

1185
00:58:12,329 --> 00:58:15,869
where you can kind of look into the code

1186
00:58:13,890 --> 00:58:19,049
investigate is everything right so

1187
00:58:15,869 --> 00:58:21,420
here's a subset of the es lint

1188
00:58:19,049 --> 00:58:23,219
properties it allows you to find

1189
00:58:21,420 --> 00:58:26,369
everywhere where you said like the

1190
00:58:23,219 --> 00:58:29,910
dangerousness at HTML it's the no danger

1191
00:58:26,369 --> 00:58:34,709
rule or Dom elements with no children so

1192
00:58:29,910 --> 00:58:37,229
if you have a Dom element like a image

1193
00:58:34,709 --> 00:58:39,419
that shouldn't have a child right and

1194
00:58:37,229 --> 00:58:41,129
you are setting children to it probably

1195
00:58:39,420 --> 00:58:42,959
something is wrong with the code we

1196
00:58:41,130 --> 00:58:46,199
should investigate that that's again on

1197
00:58:42,959 --> 00:58:47,788
the security review standpoint like what

1198
00:58:46,199 --> 00:58:51,569
we will be looking at in the react

1199
00:58:47,789 --> 00:58:53,249
applications and a set of rules so the

1200
00:58:51,569 --> 00:58:55,799
forbid Dom props allows you to configure

1201
00:58:53,249 --> 00:58:58,549
any Dom property if you're setting it in

1202
00:58:55,799 --> 00:59:00,599
reacted will flag it so I would always

1203
00:58:58,549 --> 00:59:02,249
configure something like that a trap

1204
00:59:00,599 --> 00:59:04,559
form action you know if we're setting

1205
00:59:02,249 --> 00:59:06,649
something with that with href it's

1206
00:59:04,559 --> 00:59:10,440
probably an interesting place to look at

1207
00:59:06,650 --> 00:59:12,480
and that's it so any questions

1208
00:59:10,440 --> 00:59:14,420
oh why we don't resource instigate a

1209
00:59:12,480 --> 00:59:17,490
local source because if you have xs/s

1210
00:59:14,420 --> 00:59:19,560
done well but well look actually that's

1211
00:59:17,490 --> 00:59:21,419
one thing but another thing is that it

1212
00:59:19,560 --> 00:59:23,009
is there I guess it didn't mention that

1213
00:59:21,420 --> 00:59:25,260
if you are stirring something a local

1214
00:59:23,010 --> 00:59:27,570
storage you should clear it out when you

1215
00:59:25,260 --> 00:59:30,300
log out of the application right so that

1216
00:59:27,570 --> 00:59:38,100
when you close the application it's not

1217
00:59:30,300 --> 00:59:45,270
there anymore the time that you should

1218
00:59:38,100 --> 00:59:46,529
expire them yes right so so there are

1219
00:59:45,270 --> 00:59:47,880
there multiple things right you would

1220
00:59:46,530 --> 00:59:50,420
set the the duration of the session

1221
00:59:47,880 --> 00:59:52,290
shorter or you would clear it on logout

1222
00:59:50,420 --> 00:59:56,130
but there are other things that you may

1223
00:59:52,290 --> 00:59:58,140
store in local storage like a referral

1224
00:59:56,130 --> 01:00:00,480
you can have a refresher token that has

1225
00:59:58,140 --> 01:00:05,580
a much longer life right so for things

1226
01:00:00,480 --> 01:00:07,440
like that but yeah but but in exercise

1227
01:00:05,580 --> 01:00:09,360
it's still another issue like if you

1228
01:00:07,440 --> 01:00:16,800
were still on the page you can read it

1229
01:00:09,360 --> 01:00:18,450
right yes yes the question was why while

1230
01:00:16,800 --> 01:00:19,800
storing something in the local search

1231
01:00:18,450 --> 01:00:21,629
well not not something but specifically

1232
01:00:19,800 --> 01:00:24,090
a session identifier is low in the local

1233
01:00:21,630 --> 01:00:26,580
storage is a problem right so one is

1234
01:00:24,090 --> 01:00:28,710
that you know if when you close the

1235
01:00:26,580 --> 01:00:30,900
application it is still there and then

1236
01:00:28,710 --> 01:00:33,450
the question is how long is your session

1237
01:00:30,900 --> 01:00:35,610
duration right how long this idea will

1238
01:00:33,450 --> 01:00:37,740
be good still good for it for how if

1239
01:00:35,610 --> 01:00:39,600
it's no stolen later so you can mitigate

1240
01:00:37,740 --> 01:00:41,129
it both ways right you can you can just

1241
01:00:39,600 --> 01:00:43,020
set the duration of the session much

1242
01:00:41,130 --> 01:00:45,000
shorter but then if you are having like

1243
01:00:43,020 --> 01:00:49,560
a refresh token that will have a longer

1244
01:00:45,000 --> 01:00:51,600
life and you store that there so from

1245
01:00:49,560 --> 01:00:52,830
kind of the way with what we recommend

1246
01:00:51,600 --> 01:00:56,940
it is we still recommend using cookies

1247
01:00:52,830 --> 01:00:58,920
on HTTP only for for to prevent that but

1248
01:00:56,940 --> 01:01:01,070
yes then you will have to use this

1249
01:00:58,920 --> 01:01:03,600
history of tokens to prevent Cicero so

1250
01:01:01,070 --> 01:01:09,260
it's not a you know one-size-fits-all

1251
01:01:03,600 --> 01:01:09,259
solution obviously any other questions

1252
01:01:10,780 --> 01:01:19,249
[Applause]

