1
00:00:00,599 --> 00:00:04,200
so I'm here to talk to you about the

2
00:00:01,680 --> 00:00:06,420
application patching manifesto kind of a

3
00:00:04,200 --> 00:00:09,300
call to arms around dependency

4
00:00:06,420 --> 00:00:11,219
management because I think we're doing

5
00:00:09,300 --> 00:00:13,170
it wrong a little bit a little bit about

6
00:00:11,219 --> 00:00:15,329
me it's a picture of me over at the

7
00:00:13,170 --> 00:00:19,800
green sand beach here on the island

8
00:00:15,330 --> 00:00:21,930
awesome place to visit I am a static

9
00:00:19,800 --> 00:00:24,230
analysis enthusiast

10
00:00:21,930 --> 00:00:27,539
I love SAS tools I love building things

11
00:00:24,230 --> 00:00:30,720
as Jim mentioned I am the founder of the

12
00:00:27,539 --> 00:00:33,239
OWASP dependency check project in a lot

13
00:00:30,720 --> 00:00:34,890
of ways that project predated a lot of

14
00:00:33,239 --> 00:00:36,209
the commercial tools that are on the

15
00:00:34,890 --> 00:00:38,700
market today

16
00:00:36,210 --> 00:00:40,200
it was kind of when I was showing it to

17
00:00:38,700 --> 00:00:43,320
people they were always like what what

18
00:00:40,200 --> 00:00:45,450
the heck is this thing and it's become

19
00:00:43,320 --> 00:00:48,600
very very very popular and I'm kind of

20
00:00:45,450 --> 00:00:50,879
excited about that so what are we gonna

21
00:00:48,600 --> 00:00:52,829
talk about today I actually have to fire

22
00:00:50,879 --> 00:00:55,559
talks for you guys the first is the

23
00:00:52,829 --> 00:00:57,390
application dependency patching piece

24
00:00:55,559 --> 00:01:01,260
and then the other half is about

25
00:00:57,390 --> 00:01:05,489
limiting the exposure to both new and

26
00:01:01,260 --> 00:01:07,590
unknown vulnerabilities unfortunately

27
00:01:05,489 --> 00:01:09,720
the second half of the talk is very Java

28
00:01:07,590 --> 00:01:13,560
centric because that's where I spend a

29
00:01:09,720 --> 00:01:16,740
lot of my time so most organizations

30
00:01:13,560 --> 00:01:20,159
have patching programs they focus very

31
00:01:16,740 --> 00:01:24,658
heavily on infrastructure os middleware

32
00:01:20,159 --> 00:01:26,369
networking firewalls etc their success

33
00:01:24,659 --> 00:01:28,020
rate varies from organization to

34
00:01:26,369 --> 00:01:30,090
organization some do very well at

35
00:01:28,020 --> 00:01:33,329
getting patches deployed ubiquitously

36
00:01:30,090 --> 00:01:37,170
crossed everything very fast others lag

37
00:01:33,329 --> 00:01:40,350
behind but what about application

38
00:01:37,170 --> 00:01:44,159
dependencies you know if you know spring

39
00:01:40,350 --> 00:01:45,329
WebSockets thank you Alvaro for those

40
00:01:44,159 --> 00:01:48,720
that don't know there's a new remote

41
00:01:45,329 --> 00:01:51,449
code execution that is been released for

42
00:01:48,720 --> 00:01:54,000
that the POC or the exploit code has not

43
00:01:51,450 --> 00:01:55,140
been released yet though but it's still

44
00:01:54,000 --> 00:01:58,229
something you guys need to patch if

45
00:01:55,140 --> 00:01:59,570
you're using spring WebSockets but what

46
00:01:58,229 --> 00:02:01,890
about those application dependencies

47
00:01:59,570 --> 00:02:04,020
generally they're not included in any

48
00:02:01,890 --> 00:02:07,259
kind of patching program if they are

49
00:02:04,020 --> 00:02:11,579
they're just focusing on truly high-risk

50
00:02:07,259 --> 00:02:13,260
known security vulnerabilities and you

51
00:02:11,580 --> 00:02:13,860
know that's all going to show you why

52
00:02:13,260 --> 00:02:17,160
that's a

53
00:02:13,860 --> 00:02:19,800
huge fallacy and a problem for keeping

54
00:02:17,160 --> 00:02:23,970
things secure it's a the idea of

55
00:02:19,800 --> 00:02:25,440
compliance versus security so to talk

56
00:02:23,970 --> 00:02:27,510
about application dependencies let's

57
00:02:25,440 --> 00:02:30,600
look at what applications are actually

58
00:02:27,510 --> 00:02:33,390
made up of this is a slide from contrast

59
00:02:30,600 --> 00:02:36,900
security they do runtime application

60
00:02:33,390 --> 00:02:40,290
self-protection but I really like the

61
00:02:36,900 --> 00:02:42,570
iceberg here because it shows that

62
00:02:40,290 --> 00:02:44,160
you've got 21 percent of your code at

63
00:02:42,570 --> 00:02:49,049
least in the applications they analyzed

64
00:02:44,160 --> 00:02:52,230
21 percent of your code is resting on 79

65
00:02:49,050 --> 00:02:54,600
percent of third-party and commercial

66
00:02:52,230 --> 00:02:59,010
libraries so that's the majority of the

67
00:02:54,600 --> 00:03:01,260
code that's being deployed and their

68
00:02:59,010 --> 00:03:02,959
study also shows that in that 21 percent

69
00:03:01,260 --> 00:03:05,100
of the custom code they find on average

70
00:03:02,959 --> 00:03:06,540
26.7 serious vulnerabilities

71
00:03:05,100 --> 00:03:09,180
unfortunately that shows that we have a

72
00:03:06,540 --> 00:03:12,269
long way to go with as a security

73
00:03:09,180 --> 00:03:15,600
industry at with educating and providing

74
00:03:12,270 --> 00:03:19,049
better tools and you know architectures

75
00:03:15,600 --> 00:03:21,780
secure by default frameworks etc so that

76
00:03:19,049 --> 00:03:24,000
those 26.7 don't show up but you know

77
00:03:21,780 --> 00:03:25,950
that's that's where we are today coder

78
00:03:24,000 --> 00:03:30,060
people who code are still introducing

79
00:03:25,950 --> 00:03:31,859
vulnerabilities but what about those two

80
00:03:30,060 --> 00:03:33,810
vulnerabilities down here I do like the

81
00:03:31,860 --> 00:03:35,760
fact that those two vulnerabilities are

82
00:03:33,810 --> 00:03:41,580
down in this section right here that is

83
00:03:35,760 --> 00:03:45,769
in the UH NEX acute Ocoee 5% of these

84
00:03:41,580 --> 00:03:48,150
libraries are actually executed and you

85
00:03:45,769 --> 00:03:50,959
know they put those two vulnerabilities

86
00:03:48,150 --> 00:03:54,799
down in the unexcused Parshin that's a

87
00:03:50,959 --> 00:03:58,100
little bit of a fallacy or

88
00:03:54,799 --> 00:04:02,519
misrepresentation on the diagram

89
00:03:58,100 --> 00:04:04,859
partly because these graphs or this

90
00:04:02,519 --> 00:04:06,930
graph is a picture of what is actually

91
00:04:04,860 --> 00:04:09,420
deployed not what is actually reachable

92
00:04:06,930 --> 00:04:10,620
and when we talk about some of the

93
00:04:09,420 --> 00:04:13,160
exploits that are going on with some of

94
00:04:10,620 --> 00:04:17,489
the D serialization and things like that

95
00:04:13,160 --> 00:04:20,190
all of this code is reachable and in a

96
00:04:17,488 --> 00:04:25,039
lot of cases those really critical CVEs

97
00:04:20,190 --> 00:04:27,450
are actually in the executed code so to

98
00:04:25,039 --> 00:04:29,070
continue on why

99
00:04:27,450 --> 00:04:30,630
I think some of these these two

100
00:04:29,070 --> 00:04:34,469
vulnerabilities are so important and

101
00:04:30,630 --> 00:04:37,950
this third-party the 79% of code is so

102
00:04:34,470 --> 00:04:39,150
important that we pay attention to let's

103
00:04:37,950 --> 00:04:41,340
take a look at the national

104
00:04:39,150 --> 00:04:42,840
vulnerability database hopefully

105
00:04:41,340 --> 00:04:44,340
everybody knows what this is the list of

106
00:04:42,840 --> 00:04:47,159
known security vulnerabilities and

107
00:04:44,340 --> 00:04:49,169
exposures you know we got things like

108
00:04:47,160 --> 00:04:51,510
the spring date arrest vulnerability

109
00:04:49,170 --> 00:04:53,220
you've had a remote code execution web

110
00:04:51,510 --> 00:04:56,520
spring WebSockets had a remote code

111
00:04:53,220 --> 00:04:58,860
execution recently these are some of the

112
00:04:56,520 --> 00:05:01,560
types of attacks that you know are most

113
00:04:58,860 --> 00:05:03,420
that I care about most they're the most

114
00:05:01,560 --> 00:05:06,110
devastating because when somebody can

115
00:05:03,420 --> 00:05:09,990
just run arbitrary code on your server

116
00:05:06,110 --> 00:05:11,520
it's pretty much game over so I mean

117
00:05:09,990 --> 00:05:14,850
yeah there's there's other attacks and

118
00:05:11,520 --> 00:05:18,299
things but remote code execution is in

119
00:05:14,850 --> 00:05:20,580
my opinion one of the absolute worst and

120
00:05:18,300 --> 00:05:23,880
you know not all CDs are created equal

121
00:05:20,580 --> 00:05:26,070
some are you know it varies on your

122
00:05:23,880 --> 00:05:29,060
organization information leakage weak

123
00:05:26,070 --> 00:05:31,849
encryption things like that it varies

124
00:05:29,060 --> 00:05:34,140
people debate about the scores and

125
00:05:31,850 --> 00:05:36,030
sometimes you can have three or more

126
00:05:34,140 --> 00:05:38,460
low-risk CVEs things that look

127
00:05:36,030 --> 00:05:41,429
completely innocuous chain them together

128
00:05:38,460 --> 00:05:42,690
and you've got remote code execution or

129
00:05:41,430 --> 00:05:47,180
some other critical vulnerability

130
00:05:42,690 --> 00:05:49,950
happening so just because it's known

131
00:05:47,180 --> 00:05:51,450
even if it's a low risk you may won't

132
00:05:49,950 --> 00:05:53,430
need to be looking about looking at it

133
00:05:51,450 --> 00:05:55,430
and thinking about do we need to patch

134
00:05:53,430 --> 00:05:59,580
is this really going to affect us

135
00:05:55,430 --> 00:06:03,270
chances are yes but the biggest thing

136
00:05:59,580 --> 00:06:05,400
about this is CVEs are public both the

137
00:06:03,270 --> 00:06:08,520
good side and the bad side have access

138
00:06:05,400 --> 00:06:10,919
to them commercial vulnerabilities like

139
00:06:08,520 --> 00:06:11,849
risk-based Security's valen DB it used

140
00:06:10,920 --> 00:06:15,180
to be known as the open source

141
00:06:11,850 --> 00:06:17,220
vulnerability database or OS v DB great

142
00:06:15,180 --> 00:06:19,160
sources of vulnerability information

143
00:06:17,220 --> 00:06:21,510
they do a ton of research on this

144
00:06:19,160 --> 00:06:22,920
they've got something like 40,000 more

145
00:06:21,510 --> 00:06:26,909
vulnerabilities that are in the nvd

146
00:06:22,920 --> 00:06:33,570
maybe more by now but you know bad guys

147
00:06:26,910 --> 00:06:35,490
can buy subscriptions to so you know my

148
00:06:33,570 --> 00:06:38,159
point is if you're solely relying on the

149
00:06:35,490 --> 00:06:40,780
nvd you're probably missing things

150
00:06:38,160 --> 00:06:42,870
there's other vulnerability database

151
00:06:40,780 --> 00:06:46,330
to like the node security project

152
00:06:42,870 --> 00:06:48,160
there's a bundle audit that has you know

153
00:06:46,330 --> 00:06:50,380
things for Ruby that are not in the NV D

154
00:06:48,160 --> 00:06:54,150
etc there's a lot of vulnerabilities

155
00:06:50,380 --> 00:06:56,919
that are known that are not in the NV D

156
00:06:54,150 --> 00:07:00,219
so let's talk a little bit about this

157
00:06:56,919 --> 00:07:01,810
known CVE versus unknown or unreported

158
00:07:00,220 --> 00:07:03,550
risks

159
00:07:01,810 --> 00:07:06,450
snick has a report that I'll talk a

160
00:07:03,550 --> 00:07:09,340
little bit more about in a slide or two

161
00:07:06,450 --> 00:07:11,950
states that of their respondents to

162
00:07:09,340 --> 00:07:15,190
their survey twenty five percent of the

163
00:07:11,950 --> 00:07:19,320
respondents say that they do not report

164
00:07:15,190 --> 00:07:19,320
security vulnerabilities to their users

165
00:07:19,919 --> 00:07:27,280
twenty five percent just don't the

166
00:07:22,450 --> 00:07:29,620
majority of them report that they'll put

167
00:07:27,280 --> 00:07:30,700
a note in the release notes about the

168
00:07:29,620 --> 00:07:33,820
security vulnerability in that you have

169
00:07:30,700 --> 00:07:36,580
to upgrade only ten percent say that

170
00:07:33,820 --> 00:07:39,250
they open up a CDE I mean that's a very

171
00:07:36,580 --> 00:07:42,250
very small number of vulnerabilities

172
00:07:39,250 --> 00:07:45,340
being patched that are actually reported

173
00:07:42,250 --> 00:07:48,580
as TVs so why is that such a huge

174
00:07:45,340 --> 00:07:50,590
problem well this is one of my favorite

175
00:07:48,580 --> 00:07:51,849
TVs to demonstrate this problem

176
00:07:50,590 --> 00:07:55,210
primefaces

177
00:07:51,850 --> 00:07:58,510
it's a JSF implementation they have a

178
00:07:55,210 --> 00:07:59,890
weak cryptographic strength CVE that's

179
00:07:58,510 --> 00:08:01,180
what they called it under the CW e

180
00:07:59,890 --> 00:08:04,120
because it's actually a padding Oracle

181
00:08:01,180 --> 00:08:07,479
attack that when exploited actually

182
00:08:04,120 --> 00:08:15,640
results in a remote code execution this

183
00:08:07,479 --> 00:08:17,650
CVE was published January 3rd 2018 they

184
00:08:15,640 --> 00:08:21,360
knew about this fixed it released the

185
00:08:17,650 --> 00:08:23,770
patch February 2016 almost two years ago

186
00:08:21,360 --> 00:08:26,650
it's been out there and this is not

187
00:08:23,770 --> 00:08:29,680
uncommon vulnerabilities are known for a

188
00:08:26,650 --> 00:08:31,030
long time and they're it's either

189
00:08:29,680 --> 00:08:33,549
they're known for a long time and the

190
00:08:31,030 --> 00:08:37,030
fix takes a while or the fix is there

191
00:08:33,549 --> 00:08:39,609
and nobody pays attention to it and this

192
00:08:37,030 --> 00:08:42,640
happens over and over and over again and

193
00:08:39,610 --> 00:08:45,700
so if we're solely focusing on these

194
00:08:42,640 --> 00:08:50,890
known risks we're missing a ton of

195
00:08:45,700 --> 00:08:52,649
security and what really makes this

196
00:08:50,890 --> 00:08:56,550
specific one great

197
00:08:52,649 --> 00:08:59,249
as an example is shortly after the CVE

198
00:08:56,550 --> 00:09:01,800
was published crypto minor started

199
00:08:59,249 --> 00:09:04,860
exploiting this on sites and mining

200
00:09:01,800 --> 00:09:08,008
coins and you can read about it the blog

201
00:09:04,860 --> 00:09:09,749
post on the primefaces site you know

202
00:09:08,009 --> 00:09:11,429
it's just one of those where nobody knew

203
00:09:09,749 --> 00:09:13,949
that nobody really knew that this

204
00:09:11,429 --> 00:09:19,199
existed the second was published the bad

205
00:09:13,949 --> 00:09:20,910
guys started attacking so when we come

206
00:09:19,199 --> 00:09:22,559
in to talk about application patching

207
00:09:20,910 --> 00:09:23,790
some of the current state some of the

208
00:09:22,559 --> 00:09:26,639
some of the people that are doing the

209
00:09:23,790 --> 00:09:28,618
best they're treating out-of-date

210
00:09:26,639 --> 00:09:31,860
libraries as part of their code hygiene

211
00:09:28,619 --> 00:09:34,170
code quality they're building time into

212
00:09:31,860 --> 00:09:36,899
their schedules to actually deal with

213
00:09:34,170 --> 00:09:39,540
this and upgrade things they're using

214
00:09:36,899 --> 00:09:41,819
tools in some cases not only to notify

215
00:09:39,540 --> 00:09:43,290
them of upgrades but to actually just

216
00:09:41,819 --> 00:09:44,929
perform the upgrades and I'll talk more

217
00:09:43,290 --> 00:09:47,639
about that in a second

218
00:09:44,929 --> 00:09:51,029
some of them everyone else on this

219
00:09:47,639 --> 00:09:52,769
spectrum you know and this is some of

220
00:09:51,029 --> 00:09:53,759
this comes from the snick report they

221
00:09:52,769 --> 00:09:57,029
occasionally sweep through their

222
00:09:53,759 --> 00:09:58,769
dependencies and do the upgrades if they

223
00:09:57,029 --> 00:10:01,370
hear about it they'll about a

224
00:09:58,769 --> 00:10:03,959
vulnerability they might do an upgrade

225
00:10:01,370 --> 00:10:05,100
but in general you know some of the

226
00:10:03,959 --> 00:10:06,359
things i've heard from developers they

227
00:10:05,100 --> 00:10:09,829
don't want to be the one to break the

228
00:10:06,360 --> 00:10:12,149
build so it works I'm not touching it

229
00:10:09,829 --> 00:10:14,339
you know and and from upper management

230
00:10:12,149 --> 00:10:19,740
features are more important I've got a

231
00:10:14,339 --> 00:10:22,139
ship code so to continue on the current

232
00:10:19,740 --> 00:10:25,589
state from the snick report the state of

233
00:10:22,139 --> 00:10:27,860
open source security 42 percent of

234
00:10:25,589 --> 00:10:29,699
people use tools to notify them of

235
00:10:27,860 --> 00:10:33,870
vulnerable libraries I think that's

236
00:10:29,699 --> 00:10:36,179
awesome that they're doing what to date

237
00:10:33,870 --> 00:10:38,699
has been kind of we've been pushing as

238
00:10:36,179 --> 00:10:40,649
the state of the art you are using

239
00:10:38,699 --> 00:10:42,209
software composition now as tools like

240
00:10:40,649 --> 00:10:44,939
dependency check or one of the

241
00:10:42,209 --> 00:10:49,469
commercial competitors but again that

242
00:10:44,939 --> 00:10:52,290
only covers known vulnerabilities so 37

243
00:10:49,470 --> 00:10:54,629
percent of the respondents used tools to

244
00:10:52,290 --> 00:10:56,730
notify them of new versions I think

245
00:10:54,629 --> 00:10:58,740
that's a travesty because every build

246
00:10:56,730 --> 00:11:00,059
system I know about there or anything

247
00:10:58,740 --> 00:11:02,730
that had a build system that has a

248
00:11:00,059 --> 00:11:04,750
dependency management framework has

249
00:11:02,730 --> 00:11:08,769
tools to at least notify you

250
00:11:04,750 --> 00:11:11,100
of updates and yet only 37 people are 37

251
00:11:08,769 --> 00:11:13,660
percent of people are using them and

252
00:11:11,100 --> 00:11:16,089
then of course you have the 16% where

253
00:11:13,660 --> 00:11:21,610
they just don't bother upgrading avoid

254
00:11:16,089 --> 00:11:23,079
those projects so this brings us to a

255
00:11:21,610 --> 00:11:24,459
discussion about technical debt versus

256
00:11:23,079 --> 00:11:27,399
security debt because if people aren't

257
00:11:24,459 --> 00:11:28,779
upgrading their building some of their

258
00:11:27,399 --> 00:11:30,579
technical debt hopefully though

259
00:11:28,779 --> 00:11:32,920
everybody knows what the term technical

260
00:11:30,579 --> 00:11:35,979
debt you know they're they're doing the

261
00:11:32,920 --> 00:11:37,810
easy thing now versus doing the right

262
00:11:35,980 --> 00:11:40,449
thing because the easy thing is quick

263
00:11:37,810 --> 00:11:41,709
and easy the right thing takes time in

264
00:11:40,449 --> 00:11:43,990
this case the right thing would be

265
00:11:41,709 --> 00:11:45,910
upgrading whereas they're just staying

266
00:11:43,990 --> 00:11:48,430
status quo with their libraries it's not

267
00:11:45,910 --> 00:11:50,649
broke don't fix it and so then we get

268
00:11:48,430 --> 00:11:52,839
into security debt it's just a portion

269
00:11:50,649 --> 00:11:54,850
of your technical debt but it has about

270
00:11:52,839 --> 00:11:56,920
has a lot to do with about security

271
00:11:54,850 --> 00:11:58,990
preparedness are you doing proper

272
00:11:56,920 --> 00:12:03,628
testing or are you doing software

273
00:11:58,990 --> 00:12:06,209
composition analysis things like that

274
00:12:03,629 --> 00:12:07,810
the difference is with security debt

275
00:12:06,209 --> 00:12:11,349
specifically with these known

276
00:12:07,810 --> 00:12:12,849
vulnerabilities if you don't pay your

277
00:12:11,350 --> 00:12:14,439
security debt eventually the debt

278
00:12:12,850 --> 00:12:15,550
collectors will come by steal your

279
00:12:14,439 --> 00:12:19,389
information and sell it to the highest

280
00:12:15,550 --> 00:12:20,769
bidder it's just kind of a we've seen

281
00:12:19,389 --> 00:12:22,540
this happen over and over again with the

282
00:12:20,769 --> 00:12:27,610
breaches people getting popped with

283
00:12:22,540 --> 00:12:29,769
known CVEs that brings us to emergency

284
00:12:27,610 --> 00:12:31,269
patching yet a remote code execution

285
00:12:29,769 --> 00:12:33,670
spring data rest

286
00:12:31,269 --> 00:12:34,959
struts they've had three C V's remote

287
00:12:33,670 --> 00:12:39,759
code execution in the last year

288
00:12:34,959 --> 00:12:43,029
primefaces spring WebSockets have all

289
00:12:39,759 --> 00:12:44,110
have remote code execution vulnerability

290
00:12:43,029 --> 00:12:47,170
you have these applications on the

291
00:12:44,110 --> 00:12:50,069
internet and anybody who can get access

292
00:12:47,170 --> 00:12:53,910
or anybody who can ping them can

293
00:12:50,069 --> 00:12:56,740
basically execute code on your servers

294
00:12:53,910 --> 00:12:59,050
now why this is why patching is

295
00:12:56,740 --> 00:13:01,629
difficult in most cases when we get into

296
00:12:59,050 --> 00:13:03,990
the application space is that a patch

297
00:13:01,629 --> 00:13:06,370
equals upgrade there are a few teams

298
00:13:03,990 --> 00:13:07,720
spring being one of them and spring the

299
00:13:06,370 --> 00:13:10,300
spring group is doing an awesome job

300
00:13:07,720 --> 00:13:12,389
with this where they actually back port

301
00:13:10,300 --> 00:13:14,920
the security patches to the earlier

302
00:13:12,389 --> 00:13:17,139
releases and have minor point releases

303
00:13:14,920 --> 00:13:17,949
but there are so many libraries out

304
00:13:17,139 --> 00:13:20,350
there

305
00:13:17,950 --> 00:13:25,630
that do not back port the security

306
00:13:20,350 --> 00:13:27,820
patches and so your only Avenue is you

307
00:13:25,630 --> 00:13:32,170
know to upgrade and you may have to

308
00:13:27,820 --> 00:13:35,560
cross minor or major point or version

309
00:13:32,170 --> 00:13:37,839
upgrades which could have significant

310
00:13:35,560 --> 00:13:41,530
braking API changes and could take a lot

311
00:13:37,840 --> 00:13:42,670
of work to do this upgrade and so when

312
00:13:41,530 --> 00:13:45,160
you have these emergency patching

313
00:13:42,670 --> 00:13:46,780
situations again your your technical

314
00:13:45,160 --> 00:13:49,480
debt becomes security debt that has to

315
00:13:46,780 --> 00:13:54,310
be repaid immediately otherwise you're

316
00:13:49,480 --> 00:13:56,410
good you could end up like Equifax and I

317
00:13:54,310 --> 00:14:00,969
talked a lot about you know software

318
00:13:56,410 --> 00:14:02,709
composition analysis and how I've talked

319
00:14:00,970 --> 00:14:03,730
to several people today about our over

320
00:14:02,710 --> 00:14:06,880
the last couple days about software

321
00:14:03,730 --> 00:14:10,120
composition analysis it's a great tool

322
00:14:06,880 --> 00:14:12,880
we need to be doing it and its really

323
00:14:10,120 --> 00:14:14,290
great for that compliance checkbox and

324
00:14:12,880 --> 00:14:18,100
it really helps the security teams

325
00:14:14,290 --> 00:14:19,810
because in a lot of ways software

326
00:14:18,100 --> 00:14:22,120
composition analysis is the mechanism

327
00:14:19,810 --> 00:14:24,189
that security teams are getting a bill

328
00:14:22,120 --> 00:14:25,750
of materials for the applications that

329
00:14:24,190 --> 00:14:27,790
we are that are deployed within our

330
00:14:25,750 --> 00:14:31,200
organizations and if you don't have that

331
00:14:27,790 --> 00:14:33,760
Bill of Materials if an emergency

332
00:14:31,200 --> 00:14:35,260
vulnerability comes out do you know

333
00:14:33,760 --> 00:14:38,069
where it's deployed do you know what

334
00:14:35,260 --> 00:14:40,990
applications are using that yes I'm

335
00:14:38,070 --> 00:14:43,000
hoping teams are just upgrading anyway

336
00:14:40,990 --> 00:14:45,070
but you still have to ensure from a

337
00:14:43,000 --> 00:14:48,990
security team standpoint that these

338
00:14:45,070 --> 00:14:51,730
upgrades are happening and sometimes

339
00:14:48,990 --> 00:14:53,170
these inventories are very difficult to

340
00:14:51,730 --> 00:14:57,640
know I mean what is exposed to the

341
00:14:53,170 --> 00:14:59,650
internet I've seen companies talking to

342
00:14:57,640 --> 00:15:01,720
me about this problem and they've got

343
00:14:59,650 --> 00:15:03,490
UAT systems deployed to the internet

344
00:15:01,720 --> 00:15:06,520
that were completely missed in the

345
00:15:03,490 --> 00:15:11,430
patching frenzy because it was UAT and

346
00:15:06,520 --> 00:15:15,250
yet that is a exact entry point into the

347
00:15:11,430 --> 00:15:16,870
end of the organization so where are we

348
00:15:15,250 --> 00:15:18,610
going with with what I'm hoping to be

349
00:15:16,870 --> 00:15:21,640
some of the future state in application

350
00:15:18,610 --> 00:15:25,300
patching or application dependency

351
00:15:21,640 --> 00:15:26,980
management we convince teams that

352
00:15:25,300 --> 00:15:29,920
upgrades just have to be part of the

353
00:15:26,980 --> 00:15:31,180
SDLC and I'm gonna talk about some

354
00:15:29,920 --> 00:15:33,390
techniques on this one

355
00:15:31,180 --> 00:15:37,630
it has to be planned as part of yes DLC

356
00:15:33,390 --> 00:15:39,730
and considered all old libraries or dead

357
00:15:37,630 --> 00:15:42,790
libraries need to be considered a code

358
00:15:39,730 --> 00:15:44,650
quality a code hygiene issue and treated

359
00:15:42,790 --> 00:15:49,480
with equal respect as all your other

360
00:15:44,650 --> 00:15:50,920
bugs because if because by maintaining

361
00:15:49,480 --> 00:15:55,780
these things in keeping them up to date

362
00:15:50,920 --> 00:15:59,229
your fixing your unknown unreported

363
00:15:55,780 --> 00:16:01,180
vulnerabilities that in a lot of the

364
00:15:59,230 --> 00:16:03,220
Foss if the bad guys wanted to go audit

365
00:16:01,180 --> 00:16:06,969
that code they may know about them they

366
00:16:03,220 --> 00:16:10,990
may be exploiting them and nobody knows

367
00:16:06,970 --> 00:16:15,460
that they're there because many eyes has

368
00:16:10,990 --> 00:16:21,010
not been the security Panthea of open

369
00:16:15,460 --> 00:16:22,450
source that people were hope so one of

370
00:16:21,010 --> 00:16:24,689
the big things is teams have to start

371
00:16:22,450 --> 00:16:27,040
using tools to notify them of upgrades

372
00:16:24,690 --> 00:16:30,190
like I said a little bit ago

373
00:16:27,040 --> 00:16:32,110
every dependency management tool most of

374
00:16:30,190 --> 00:16:39,040
the build frameworks have these tools to

375
00:16:32,110 --> 00:16:40,510
notify you of new versions but we have

376
00:16:39,040 --> 00:16:43,689
to get people to be upgrading not just

377
00:16:40,510 --> 00:16:45,790
for known security issues but for just

378
00:16:43,690 --> 00:16:49,000
you know point releases minor releases

379
00:16:45,790 --> 00:16:52,480
functional additions to the application

380
00:16:49,000 --> 00:16:55,180
and yes that sounds difficult it sounds

381
00:16:52,480 --> 00:16:57,370
daunting but the technology is coming to

382
00:16:55,180 --> 00:17:01,719
make this a lot easier and we have some

383
00:16:57,370 --> 00:17:05,230
of it today what doing this by by just

384
00:17:01,720 --> 00:17:08,290
making the upgrades as part of your SDLC

385
00:17:05,230 --> 00:17:10,540
what this does is it just becomes

386
00:17:08,290 --> 00:17:12,010
natural habit for the development teams

387
00:17:10,540 --> 00:17:13,389
and I've seen this from some development

388
00:17:12,010 --> 00:17:17,050
teams they keep things up to date all

389
00:17:13,390 --> 00:17:18,550
the time and new new emergency

390
00:17:17,050 --> 00:17:21,730
vulnerability comes out or new problem

391
00:17:18,550 --> 00:17:23,589
comes out you know they just roll in the

392
00:17:21,730 --> 00:17:25,360
next versions out there no big deal to

393
00:17:23,589 --> 00:17:27,699
them whereas other teams that have been

394
00:17:25,359 --> 00:17:29,530
building up their technical debt they

395
00:17:27,700 --> 00:17:31,420
have a lot of problems they have you

396
00:17:29,530 --> 00:17:32,920
know regression testing integration test

397
00:17:31,420 --> 00:17:33,610
and you know all their test Suites have

398
00:17:32,920 --> 00:17:36,060
to run

399
00:17:33,610 --> 00:17:39,580
and they're not used to doing this in in

400
00:17:36,060 --> 00:17:43,690
just for upgrading their libraries so

401
00:17:39,580 --> 00:17:47,740
get it engrained into the SDLC to do

402
00:17:43,690 --> 00:17:49,330
that there are some fantastic tools some

403
00:17:47,740 --> 00:17:52,540
of these things are you know relatively

404
00:17:49,330 --> 00:17:55,149
new the over the last couple years

405
00:17:52,540 --> 00:17:57,460
they've been coming out the top ones

406
00:17:55,150 --> 00:18:02,050
before here are actually github

407
00:17:57,460 --> 00:18:04,780
applications depend a bot well all four

408
00:18:02,050 --> 00:18:06,370
of the top ones here pie up green keeper

409
00:18:04,780 --> 00:18:09,639
renovate depend about depending on your

410
00:18:06,370 --> 00:18:11,020
technology stack all of these things new

411
00:18:09,640 --> 00:18:14,380
library comes out you're gonna get a

412
00:18:11,020 --> 00:18:16,320
pull request that pull request if you've

413
00:18:14,380 --> 00:18:19,030
got your github repo set up correctly

414
00:18:16,320 --> 00:18:21,040
will then kick off your continuous

415
00:18:19,030 --> 00:18:23,320
integration in Travis or whatever CI

416
00:18:21,040 --> 00:18:26,710
you're using run your integration tech

417
00:18:23,320 --> 00:18:29,950
and your integration tests and if it

418
00:18:26,710 --> 00:18:31,390
passes merge it it's it becomes a

419
00:18:29,950 --> 00:18:33,390
no-brainer because your development

420
00:18:31,390 --> 00:18:37,270
isn't having to do anything you're just

421
00:18:33,390 --> 00:18:39,430
you know oh the bot submitted a pull

422
00:18:37,270 --> 00:18:42,760
request to fix bugs great

423
00:18:39,430 --> 00:18:46,090
I love seeing things like this the

424
00:18:42,760 --> 00:18:47,610
bottom two you know specifically Glide

425
00:18:46,090 --> 00:18:50,590
bot is something I just found out about

426
00:18:47,610 --> 00:18:53,500
this week it's a tool that you can run

427
00:18:50,590 --> 00:18:55,659
locally or your go applications the

428
00:18:53,500 --> 00:18:59,860
maven versions plug-in I love this one

429
00:18:55,660 --> 00:19:01,450
most versions plugins like the Gradle

430
00:18:59,860 --> 00:19:03,219
version to plug in they'll just give you

431
00:19:01,450 --> 00:19:05,080
a report and that's what most people use

432
00:19:03,220 --> 00:19:07,390
them for they just give you a report of

433
00:19:05,080 --> 00:19:11,260
the libraries that need to be upgraded

434
00:19:07,390 --> 00:19:13,060
however this plug-in will actually

435
00:19:11,260 --> 00:19:14,710
upgrade your libraries for you you can

436
00:19:13,060 --> 00:19:16,389
configure it just to update your palm

437
00:19:14,710 --> 00:19:16,990
and update the libraries it's really

438
00:19:16,390 --> 00:19:19,570
awesome

439
00:19:16,990 --> 00:19:22,480
I've been using in dependency check for

440
00:19:19,570 --> 00:19:24,159
a while so let's get into pendent into

441
00:19:22,480 --> 00:19:26,770
transitive dependencies this is why

442
00:19:24,160 --> 00:19:28,300
patching is hard because you've got

443
00:19:26,770 --> 00:19:31,120
things like Apache struts that uses

444
00:19:28,300 --> 00:19:34,149
Jackson data bind Jackson data bind has

445
00:19:31,120 --> 00:19:38,310
a deserialization bug well what if

446
00:19:34,150 --> 00:19:41,380
struts didn't upgrade very quickly well

447
00:19:38,310 --> 00:19:45,100
then you can rewrite your application or

448
00:19:41,380 --> 00:19:47,320
you could you know submit a pull request

449
00:19:45,100 --> 00:19:50,469
to struts to upgrade

450
00:19:47,320 --> 00:19:55,859
the librarian you know own some of this

451
00:19:50,470 --> 00:19:59,559
responsibility yourself but you know

452
00:19:55,859 --> 00:20:01,269
this is why you know Foss is not it's

453
00:19:59,559 --> 00:20:03,428
not nothing's ever really free when it's

454
00:20:01,269 --> 00:20:05,200
when it comes to Foss I want to point

455
00:20:03,429 --> 00:20:06,580
out a couple of things here github with

456
00:20:05,200 --> 00:20:09,909
their security alerts has been doing a

457
00:20:06,580 --> 00:20:11,408
fantastic job I love this feature that

458
00:20:09,909 --> 00:20:12,429
they've that they've implemented where

459
00:20:11,409 --> 00:20:14,409
they're alerting people when they're

460
00:20:12,429 --> 00:20:15,820
using known vulnerable libraries again

461
00:20:14,409 --> 00:20:17,499
I'd like to see them alerting people

462
00:20:15,820 --> 00:20:21,668
when they're using out-of-date libraries

463
00:20:17,499 --> 00:20:23,739
because those out-of-date libraries may

464
00:20:21,669 --> 00:20:25,720
become a contain unknown vulnerabilities

465
00:20:23,739 --> 00:20:27,789
that have been patched but still it's

466
00:20:25,720 --> 00:20:29,769
it's a light years ahead of where we are

467
00:20:27,789 --> 00:20:32,499
it's fantastic that those guys are out

468
00:20:29,769 --> 00:20:33,759
there doing that one thing that a lot of

469
00:20:32,499 --> 00:20:37,570
people may not know about is actually

470
00:20:33,759 --> 00:20:40,499
operation Rose hub this is this is back

471
00:20:37,570 --> 00:20:43,450
in 2017 when the Apache Commons

472
00:20:40,499 --> 00:20:45,309
vulnerability mout the mad gadget was

473
00:20:43,450 --> 00:20:49,210
one of the original you know devastating

474
00:20:45,309 --> 00:20:51,279
deserialization attacks 50 Google

475
00:20:49,210 --> 00:20:54,450
employees grassroots effort went out and

476
00:20:51,279 --> 00:20:58,149
patched 20 Hertz submitted PRS to 2600

477
00:20:54,450 --> 00:21:01,989
projects out on github completely

478
00:20:58,149 --> 00:21:04,330
grassroots Googlers who were involved in

479
00:21:01,989 --> 00:21:08,019
this I can't thank you enough I mean

480
00:21:04,330 --> 00:21:09,340
this type of work is awesome but again

481
00:21:08,019 --> 00:21:13,470
this is all reactionary to known

482
00:21:09,340 --> 00:21:16,029
vulnerabilities so we can do better

483
00:21:13,470 --> 00:21:18,669
so if Foss is critical to your

484
00:21:16,029 --> 00:21:22,509
organization this is some of the call to

485
00:21:18,669 --> 00:21:24,279
arms be proactive contribute back even

486
00:21:22,509 --> 00:21:27,489
if it is just helping them keep their

487
00:21:24,279 --> 00:21:29,499
dependencies up-to-date when you do this

488
00:21:27,489 --> 00:21:31,720
though you have to go all the way down

489
00:21:29,499 --> 00:21:34,389
in the dependency tree to everything

490
00:21:31,720 --> 00:21:35,379
that that you know if you use struts you

491
00:21:34,389 --> 00:21:38,349
have to go all the way down in the

492
00:21:35,379 --> 00:21:40,748
struts dependency tree and and help

493
00:21:38,349 --> 00:21:42,369
every layer of that keep up-to-date so

494
00:21:40,749 --> 00:21:46,869
that we can be using everything up to

495
00:21:42,369 --> 00:21:48,428
date in struts or sprint and spring does

496
00:21:46,869 --> 00:21:51,129
a good job drop wizard does a good job

497
00:21:48,429 --> 00:21:52,599
of this there's several that do a good

498
00:21:51,129 --> 00:21:55,498
job of this but there's a lot of

499
00:21:52,599 --> 00:21:58,899
libraries out there that don't and

500
00:21:55,499 --> 00:22:00,550
that's some of where we get into some of

501
00:21:58,899 --> 00:22:04,659
those trains of dependence

502
00:22:00,550 --> 00:22:06,629
and this is where patching wait did I go

503
00:22:04,660 --> 00:22:11,950
backwards I hit the wrong button huh

504
00:22:06,630 --> 00:22:14,559
sorry and so that brings us to the next

505
00:22:11,950 --> 00:22:20,260
side of the talk when patching isn't

506
00:22:14,559 --> 00:22:22,059
fast enough when Alvaro's struts

507
00:22:20,260 --> 00:22:24,780
vulnerability was published and the p

508
00:22:22,059 --> 00:22:27,580
and somebody published a POC against it

509
00:22:24,780 --> 00:22:32,710
the POC was published within what hours

510
00:22:27,580 --> 00:22:34,990
if not less right so teams would have to

511
00:22:32,710 --> 00:22:38,620
have get go through their entire

512
00:22:34,990 --> 00:22:41,559
patching and release cycle in hours or

513
00:22:38,620 --> 00:22:45,669
less otherwise their struts applications

514
00:22:41,559 --> 00:22:47,639
on the net could be popped and remote

515
00:22:45,670 --> 00:22:50,950
code execution

516
00:22:47,640 --> 00:22:54,460
so what contains to do Wow virtual

517
00:22:50,950 --> 00:22:58,300
patching might work might not it'll

518
00:22:54,460 --> 00:23:03,240
probably work against the published POCs

519
00:22:58,300 --> 00:23:05,110
but you know they might be by passable

520
00:23:03,240 --> 00:23:08,290
I've seen a lot of work done on

521
00:23:05,110 --> 00:23:11,620
bypassing laughs even you know it's it's

522
00:23:08,290 --> 00:23:14,800
the cat and mouse game what about this

523
00:23:11,620 --> 00:23:16,570
new bolt on panacea of runtime

524
00:23:14,800 --> 00:23:24,760
application self protection we can all

525
00:23:16,570 --> 00:23:26,860
go home right oh ok

526
00:23:24,760 --> 00:23:28,900
well it may they actually some of these

527
00:23:26,860 --> 00:23:30,550
may provide some fantastic protection

528
00:23:28,900 --> 00:23:32,290
against these vulnerabilities you know

529
00:23:30,550 --> 00:23:34,629
the room remote code execution type

530
00:23:32,290 --> 00:23:36,100
things but it all depends on what

531
00:23:34,630 --> 00:23:40,090
libraries you're using what frameworks

532
00:23:36,100 --> 00:23:41,980
you're using etc may work may not again

533
00:23:40,090 --> 00:23:43,419
depends on the vulnerability depend

534
00:23:41,980 --> 00:23:46,690
depends on what code you're actually

535
00:23:43,420 --> 00:23:48,370
using you may have to win on the on on

536
00:23:46,690 --> 00:23:49,630
the vendor just like with the laughs and

537
00:23:48,370 --> 00:23:52,270
the virtual patch is depending on your

538
00:23:49,630 --> 00:23:54,160
expertise you may have to wait on the

539
00:23:52,270 --> 00:23:55,870
vendor to productor provide a patch or

540
00:23:54,160 --> 00:23:59,470
not you might be able to do it right at

541
00:23:55,870 --> 00:24:00,760
yourself so but you know some of the

542
00:23:59,470 --> 00:24:02,650
advantages they can block some of that

543
00:24:00,760 --> 00:24:04,980
low-level OS command injection just out

544
00:24:02,650 --> 00:24:04,980
of a box

545
00:24:05,010 --> 00:24:10,660
some do a better job than others so

546
00:24:08,710 --> 00:24:13,159
other alternatives one of them one of my

547
00:24:10,660 --> 00:24:15,679
favorite things that I've seen

548
00:24:13,159 --> 00:24:19,279
as I actually saw a group unfortunately

549
00:24:15,679 --> 00:24:21,649
they didn't open-source this but well

550
00:24:19,279 --> 00:24:26,119
one there is the not so serial which is

551
00:24:21,649 --> 00:24:28,039
the original Java agent against our that

552
00:24:26,119 --> 00:24:30,949
protected was used to protect against

553
00:24:28,039 --> 00:24:33,710
deserialization attacks of core Java D

554
00:24:30,950 --> 00:24:36,169
serialization it's no longer maintained

555
00:24:33,710 --> 00:24:41,840
it's Java only and it you know like I

556
00:24:36,169 --> 00:24:44,149
said it's only the read object in core

557
00:24:41,840 --> 00:24:46,309
Java D serialization it doesn't cover

558
00:24:44,149 --> 00:24:50,330
any of the other frameworks I've seen a

559
00:24:46,309 --> 00:24:52,070
team you know external to my day job but

560
00:24:50,330 --> 00:24:54,678
what I was talking to they actually

561
00:24:52,070 --> 00:24:59,149
showed me that they had a single purpose

562
00:24:54,679 --> 00:25:02,529
rasp it was they basically extended some

563
00:24:59,149 --> 00:25:05,959
of the concept of not so serial to cover

564
00:25:02,529 --> 00:25:07,909
Jackson you know extreme cry oh there's

565
00:25:05,960 --> 00:25:09,860
like 15 D serialization libraries that

566
00:25:07,909 --> 00:25:12,980
they had extended or they had rewritten

567
00:25:09,860 --> 00:25:14,299
a tool to block it so that they could do

568
00:25:12,980 --> 00:25:17,059
blacklist and whitelist

569
00:25:14,299 --> 00:25:19,610
for these different frameworks they also

570
00:25:17,059 --> 00:25:22,700
just flat-out blocked process builder

571
00:25:19,610 --> 00:25:27,439
and said you know if we have an

572
00:25:22,700 --> 00:25:30,169
application where the developer needs to

573
00:25:27,440 --> 00:25:32,240
run process builder on our web

574
00:25:30,169 --> 00:25:34,869
application well we need to fire an

575
00:25:32,240 --> 00:25:39,559
architect or at least do some training

576
00:25:34,869 --> 00:25:43,999
so that was a really great idea that

577
00:25:39,559 --> 00:25:46,220
they had because 90% plus of the remote

578
00:25:43,999 --> 00:25:49,159
code execution you know even though you

579
00:25:46,220 --> 00:25:51,259
might be able to be injecting Java 90%

580
00:25:49,159 --> 00:25:53,240
of the POCs still dropped down into an

581
00:25:51,259 --> 00:25:55,159
OS command injection hitting like the

582
00:25:53,240 --> 00:25:59,629
process builder and so they blocked the

583
00:25:55,159 --> 00:26:02,119
process builder and 90 even if they were

584
00:25:59,629 --> 00:26:04,100
still vulnerable to whatever the OG and

585
00:26:02,119 --> 00:26:06,199
LD serialization remote code execution

586
00:26:04,100 --> 00:26:09,289
attack because they were also blocking

587
00:26:06,200 --> 00:26:11,570
the process builder 90% of the POC

588
00:26:09,289 --> 00:26:13,309
failed and even though the they could

589
00:26:11,570 --> 00:26:17,600
have an attacker could have tweaked the

590
00:26:13,309 --> 00:26:18,740
code to do something else malicious it

591
00:26:17,600 --> 00:26:20,299
looked like it failed because they

592
00:26:18,740 --> 00:26:24,080
blocked the process builder and it's

593
00:26:20,299 --> 00:26:29,840
kind of an unneeded call in 99.9

594
00:26:24,080 --> 00:26:31,760
9% of web applications so that's an

595
00:26:29,840 --> 00:26:34,158
alternative that you could do you could

596
00:26:31,760 --> 00:26:37,090
take a similar approach and create your

597
00:26:34,159 --> 00:26:37,090
own single purpose rasp

598
00:26:40,720 --> 00:26:44,480
okay the question was how are they

599
00:26:42,679 --> 00:26:45,799
blocking or how are they doing some of

600
00:26:44,480 --> 00:26:46,909
this work how are they blocking the D

601
00:26:45,799 --> 00:26:49,760
serialization how are they blocking

602
00:26:46,909 --> 00:26:53,419
process builder they're using a Java

603
00:26:49,760 --> 00:26:56,929
agent that you know rewrites the

604
00:26:53,419 --> 00:26:58,190
bytecode and anytime that you see a call

605
00:26:56,929 --> 00:27:04,010
the process builder it just threw an

606
00:26:58,190 --> 00:27:04,909
exception so so other alternatives of

607
00:27:04,010 --> 00:27:06,590
course everybody should be doing

608
00:27:04,909 --> 00:27:08,720
defense-in-depth but here's one of the

609
00:27:06,590 --> 00:27:09,949
big things that you know again talking

610
00:27:08,720 --> 00:27:12,350
with my work with dependency check

611
00:27:09,950 --> 00:27:14,600
talking to people one thing that I see

612
00:27:12,350 --> 00:27:18,500
people miss a lot is that the web route

613
00:27:14,600 --> 00:27:21,320
is still writable why this is one of

614
00:27:18,500 --> 00:27:22,519
those things that a defense in depth you

615
00:27:21,320 --> 00:27:24,379
know you should be doing proper server

616
00:27:22,519 --> 00:27:26,149
hardening but this is one of those where

617
00:27:24,380 --> 00:27:28,789
because the web root was writable they

618
00:27:26,149 --> 00:27:30,879
were able to chain three CVS together to

619
00:27:28,789 --> 00:27:34,669
get a remote code execution in access

620
00:27:30,880 --> 00:27:35,750
and so it's just really go through and

621
00:27:34,669 --> 00:27:38,570
really hard in your environment

622
00:27:35,750 --> 00:27:42,049
especially your docker containers you

623
00:27:38,570 --> 00:27:44,029
know it's docker yeah you could wipe the

624
00:27:42,049 --> 00:27:45,408
machine and just spin it back up or

625
00:27:44,029 --> 00:27:47,899
whatever you know containers you're

626
00:27:45,409 --> 00:27:49,970
using but harden it from the beginning

627
00:27:47,899 --> 00:27:50,719
because if you didn't harder harden it

628
00:27:49,970 --> 00:27:52,580
from the beginning

629
00:27:50,720 --> 00:27:53,960
however they popped it the first time

630
00:27:52,580 --> 00:27:58,580
they can just come back and pop it again

631
00:27:53,960 --> 00:28:03,590
so really concentrate on

632
00:27:58,580 --> 00:28:05,570
defense-in-depth other ideas and these

633
00:28:03,590 --> 00:28:08,928
gets into some of the more novel ideas

634
00:28:05,570 --> 00:28:10,549
or in Java the maven shade plugin

635
00:28:08,929 --> 00:28:13,340
there's a there's other shade plugins in

636
00:28:10,549 --> 00:28:17,679
the Java world for Gradle basically this

637
00:28:13,340 --> 00:28:20,269
is used by Java developers to deal with

638
00:28:17,679 --> 00:28:22,190
jar version conflicts it's a way to make

639
00:28:20,269 --> 00:28:27,429
your deployment easier because you can

640
00:28:22,190 --> 00:28:30,080
take Apache Commons and at compile time

641
00:28:27,429 --> 00:28:33,080
take all of the classes from a pet from

642
00:28:30,080 --> 00:28:35,539
org dot Apache Commons rename them my

643
00:28:33,080 --> 00:28:36,620
dot project Commons and bundle them into

644
00:28:35,539 --> 00:28:38,480
your jar

645
00:28:36,620 --> 00:28:40,189
just run time this is a very common

646
00:28:38,480 --> 00:28:43,010
developer tool a lot of people actually

647
00:28:40,190 --> 00:28:44,780
do use this even though there are

648
00:28:43,010 --> 00:28:47,600
debates whether or not you should not

649
00:28:44,780 --> 00:28:49,160
everybody likes it some people do but

650
00:28:47,600 --> 00:28:52,760
it's an interesting idea from a security

651
00:28:49,160 --> 00:28:55,070
standpoint because if you did have a

652
00:28:52,760 --> 00:28:58,280
code injection vulnerability attackers

653
00:28:55,070 --> 00:29:01,220
are expecting the gadgets to be in the

654
00:28:58,280 --> 00:29:02,660
known package space and if you just

655
00:29:01,220 --> 00:29:05,390
moved them to a different package space

656
00:29:02,660 --> 00:29:07,190
an attacker can't execute them because

657
00:29:05,390 --> 00:29:08,679
they can't inject and call something

658
00:29:07,190 --> 00:29:11,420
that they don't know what it's called

659
00:29:08,679 --> 00:29:14,480
now this is just doing a static

660
00:29:11,420 --> 00:29:15,679
replacement it's entirely possible in

661
00:29:14,480 --> 00:29:17,570
your build system that you could

662
00:29:15,679 --> 00:29:20,120
dynamically generate that name every

663
00:29:17,570 --> 00:29:22,250
time you build it and so even your

664
00:29:20,120 --> 00:29:26,059
developers deploying the code wouldn't

665
00:29:22,250 --> 00:29:28,580
even know what the runtime name is so

666
00:29:26,059 --> 00:29:33,710
it's a another interesting idea on ways

667
00:29:28,580 --> 00:29:38,178
to change your attack surface so back to

668
00:29:33,710 --> 00:29:40,220
the iceberg forgot something you're not

669
00:29:38,179 --> 00:29:45,860
70 percent of the code that's never

670
00:29:40,220 --> 00:29:48,710
executed why are we deploying it I mean

671
00:29:45,860 --> 00:29:50,389
really we've got the maven shade plugin

672
00:29:48,710 --> 00:29:51,770
it actually this is the only one of the

673
00:29:50,390 --> 00:29:53,920
shade plugins that I know that has this

674
00:29:51,770 --> 00:29:57,200
feature it actually will analyze your

675
00:29:53,920 --> 00:29:59,780
application and say that class is not

676
00:29:57,200 --> 00:30:00,980
being used I'm gonna throw it away and

677
00:29:59,780 --> 00:30:04,190
it's not gonna be part of the deployed

678
00:30:00,980 --> 00:30:06,650
jar so you can just remove all of that

679
00:30:04,190 --> 00:30:08,870
70% of the code you may remove the

680
00:30:06,650 --> 00:30:11,770
vulnerabilities you may not that's why

681
00:30:08,870 --> 00:30:14,600
it's all defense-in-depth

682
00:30:11,770 --> 00:30:15,830
so I did that I actually took those last

683
00:30:14,600 --> 00:30:19,360
two techniques with the maven shade

684
00:30:15,830 --> 00:30:21,710
plug-in I took an old version of Jenkins

685
00:30:19,360 --> 00:30:23,750
that's vulnerable to aid one of the

686
00:30:21,710 --> 00:30:26,000
original well actually it's a it's a

687
00:30:23,750 --> 00:30:31,330
vulnerable to the mad gadget Apache

688
00:30:26,000 --> 00:30:33,830
Commons vulnerability so really quick

689
00:30:31,330 --> 00:30:38,540
you know I just have a Jenkins instance

690
00:30:33,830 --> 00:30:40,990
here it's up and running and oh can we

691
00:30:38,540 --> 00:30:40,990
not see that

692
00:30:43,050 --> 00:31:00,659
oh did I know what's going on sorry

693
00:30:48,390 --> 00:31:02,280
go yeah I know it's a Mac thanks Jim

694
00:31:00,660 --> 00:31:08,040
the this really the rest of this talk

695
00:31:02,280 --> 00:31:14,910
won't take very long sorry I'm sorry

696
00:31:08,040 --> 00:31:16,889
just do it quick no you're good I'm I

697
00:31:14,910 --> 00:31:24,440
just recently switched to a Mac I

698
00:31:16,890 --> 00:31:33,540
apologize got it cool sorry about that

699
00:31:24,440 --> 00:31:33,930
okay so anyway and I'm still not sure I

700
00:31:33,540 --> 00:31:38,129
like it

701
00:31:33,930 --> 00:31:43,320
that whole enter renaming things it's

702
00:31:38,130 --> 00:31:45,780
confusing anyway so this is just a

703
00:31:43,320 --> 00:31:48,419
Jenkins instance up and running you know

704
00:31:45,780 --> 00:31:50,670
it's actually usable I've done some

705
00:31:48,420 --> 00:31:54,690
testing with this but if we jump over

706
00:31:50,670 --> 00:31:57,000
here this actually execute the

707
00:31:54,690 --> 00:31:59,280
deserialization attack against this and

708
00:31:57,000 --> 00:32:04,860
if this is just your standard you know

709
00:31:59,280 --> 00:32:05,879
attack Who am route you know LS you know

710
00:32:04,860 --> 00:32:11,909
I mean you get the idea

711
00:32:05,880 --> 00:32:18,660
I've got a show so what if kill this one

712
00:32:11,910 --> 00:32:20,730
and I spin up the shaded version the the

713
00:32:18,660 --> 00:32:22,740
version of Jenkins that I that I all I

714
00:32:20,730 --> 00:32:24,090
did I has all the same vulnerable

715
00:32:22,740 --> 00:32:26,850
components the only thing I did is I

716
00:32:24,090 --> 00:32:28,590
ended the shade plug-in my first time

717
00:32:26,850 --> 00:32:30,120
doing this it was a little you know took

718
00:32:28,590 --> 00:32:31,850
me about two hours to get Jenkins to

719
00:32:30,120 --> 00:32:36,270
work like this because there was a few

720
00:32:31,850 --> 00:32:39,330
intricacies I had to work through and

721
00:32:36,270 --> 00:32:41,760
some of the code that the shade plug-in

722
00:32:39,330 --> 00:32:48,330
thought wasn't actually used it actually

723
00:32:41,760 --> 00:32:50,670
is because of you know various dynamic

724
00:32:48,330 --> 00:32:53,580
features of Jenkins so we have the new

725
00:32:50,670 --> 00:32:55,380
version of Jenkins up and running and if

726
00:32:53,580 --> 00:32:56,189
I try and run that same exploit against

727
00:32:55,380 --> 00:33:01,620
this

728
00:32:56,190 --> 00:33:06,040
you know I get the finish to success but

729
00:33:01,620 --> 00:33:08,469
there's no shell it it still got the 500

730
00:33:06,040 --> 00:33:11,710
error that it expected back because it

731
00:33:08,470 --> 00:33:14,530
was a bad request but the exploit didn't

732
00:33:11,710 --> 00:33:23,650
didn't go because the gadget wasn't

733
00:33:14,530 --> 00:33:33,280
actually there so is that gonna work or

734
00:33:23,650 --> 00:33:37,419
is that gonna fail okay good so dad's

735
00:33:33,280 --> 00:33:43,960
gonna fail because we've got said and he

736
00:33:37,419 --> 00:33:47,049
still up here yeah okay so in summary

737
00:33:43,960 --> 00:33:49,540
you know patching is hard but if we make

738
00:33:47,049 --> 00:33:53,020
it part of the ORS DLC we can really

739
00:33:49,540 --> 00:33:55,360
solve a lot of problems by patching not

740
00:33:53,020 --> 00:33:58,450
only the known risks but we can also

741
00:33:55,360 --> 00:34:01,059
patch the unknown risks we have to be

742
00:33:58,450 --> 00:34:04,390
using tools we have to ideally we'd be

743
00:34:01,059 --> 00:34:06,428
using continuous automated patching via

744
00:34:04,390 --> 00:34:07,960
github applications if you're fortunate

745
00:34:06,429 --> 00:34:10,210
enough to be able to use those depending

746
00:34:07,960 --> 00:34:13,690
on your technology stack and I want to

747
00:34:10,210 --> 00:34:15,149
see more of these come out of course

748
00:34:13,690 --> 00:34:18,520
there's standard defense-in-depth

749
00:34:15,149 --> 00:34:20,500
consider using wrasse even if it's just

750
00:34:18,520 --> 00:34:22,540
a single purpose some of these

751
00:34:20,500 --> 00:34:25,929
technologies are very interesting and

752
00:34:22,540 --> 00:34:28,600
and helpful but they're still very early

753
00:34:25,929 --> 00:34:31,270
days and that's why I like the single

754
00:34:28,600 --> 00:34:32,799
purpose rasp as well as opposed to the

755
00:34:31,270 --> 00:34:34,480
full fledge we're gonna protect against

756
00:34:32,800 --> 00:34:37,990
everything let's just focus on something

757
00:34:34,480 --> 00:34:39,580
that is truly critical you know we're

758
00:34:37,989 --> 00:34:41,859
gonna pop our servers if these remote

759
00:34:39,580 --> 00:34:46,259
code execution occur so a single purpose

760
00:34:41,859 --> 00:34:48,730
rasp is actually a not a bad idea and

761
00:34:46,260 --> 00:34:50,260
lastly if possible depending on your

762
00:34:48,730 --> 00:34:52,449
technology stack consider what's being

763
00:34:50,260 --> 00:34:54,790
deployed and does it really need to be

764
00:34:52,449 --> 00:34:57,939
there the Maven shade plugin as you saw

765
00:34:54,790 --> 00:35:02,220
tend to use to change or remove some of

766
00:34:57,940 --> 00:35:08,910
your attack surface so with that I think

767
00:35:02,220 --> 00:35:08,910
my on time good deal so questions

768
00:35:10,249 --> 00:35:16,410
pretty much that is pretty much what I'm

769
00:35:12,569 --> 00:35:18,319
saying Jim just said summing up the talk

770
00:35:16,410 --> 00:35:20,879
instead of just looking for known

771
00:35:18,319 --> 00:35:22,680
insecure libraries just keep the entire

772
00:35:20,880 --> 00:35:25,400
stack up to date all the time the

773
00:35:22,680 --> 00:35:28,279
critical piece to this though is

774
00:35:25,400 --> 00:35:31,019
contributing back to the Foss community

775
00:35:28,279 --> 00:35:32,999
this is really where we have to engage

776
00:35:31,019 --> 00:35:36,058
on this topic because if we're not

777
00:35:32,999 --> 00:35:39,029
keeping the dependencies of our

778
00:35:36,059 --> 00:35:40,319
applications up to date you know if we

779
00:35:39,029 --> 00:35:42,450
can't keep the dependencies of our

780
00:35:40,319 --> 00:35:43,740
dependencies up to date the transitive

781
00:35:42,450 --> 00:35:47,149
dependencies there's no way that we can

782
00:35:43,740 --> 00:35:47,149
keep our applications up to date

783
00:35:58,230 --> 00:36:01,230
correct

784
00:36:11,400 --> 00:36:20,710
while while porting the back porting the

785
00:36:17,950 --> 00:36:24,939
security fixes would be fantastic

786
00:36:20,710 --> 00:36:28,030
I'm saying I don't really care about

787
00:36:24,940 --> 00:36:29,260
your security fixes I'm saying well I

788
00:36:28,030 --> 00:36:31,869
mean I care about them that's why I'm

789
00:36:29,260 --> 00:36:33,880
talking about this I'm saying that

790
00:36:31,869 --> 00:36:36,339
instead of having to worry about back

791
00:36:33,880 --> 00:36:38,619
porting the security fixes I'm saying

792
00:36:36,339 --> 00:36:40,450
there's a huge population of Foss

793
00:36:38,619 --> 00:36:42,400
community out there that doesn't even

794
00:36:40,450 --> 00:36:43,629
report when they fix a vulnerability how

795
00:36:42,400 --> 00:36:45,940
do you know that they fix the

796
00:36:43,630 --> 00:36:49,180
vulnerability so I'm saying keep

797
00:36:45,940 --> 00:36:51,790
everything up to date and wear as much

798
00:36:49,180 --> 00:36:53,169
up-to-date as possible actually with the

799
00:36:51,790 --> 00:36:55,210
pendency check that's one of my problems

800
00:36:53,170 --> 00:36:56,530
as somebody did comment on this in

801
00:36:55,210 --> 00:37:00,180
dependency check that I have some very

802
00:36:56,530 --> 00:37:04,450
old libraries and that's because I have

803
00:37:00,180 --> 00:37:06,759
Java 7 users and I have to maintain Java

804
00:37:04,450 --> 00:37:08,529
7 compliance and so there are a set of

805
00:37:06,760 --> 00:37:10,770
libraries that I can't upgrade because

806
00:37:08,530 --> 00:37:13,780
they were compiled with Java 8 or higher

807
00:37:10,770 --> 00:37:15,670
this summer when Jenkins

808
00:37:13,780 --> 00:37:17,530
I believe Jenkins will be dropping

809
00:37:15,670 --> 00:37:19,349
support for Java 7

810
00:37:17,530 --> 00:37:21,970
I believe that's gonna be happening

811
00:37:19,349 --> 00:37:24,430
you'd have to go read their website to

812
00:37:21,970 --> 00:37:25,689
be honored percent sure on that one but

813
00:37:24,430 --> 00:37:27,520
at the same time that they do that I'll

814
00:37:25,690 --> 00:37:29,290
be dropping support for Java 7 within

815
00:37:27,520 --> 00:37:31,500
dependency check and so then I'll be

816
00:37:29,290 --> 00:37:34,540
able to upgrade a lot more libraries so

817
00:37:31,500 --> 00:37:37,900
there are issues with doing this but

818
00:37:34,540 --> 00:37:42,119
keep as up-to-date as possible is is

819
00:37:37,900 --> 00:37:42,119
really the the call to arms around this

820
00:38:03,300 --> 00:38:36,400
so we aren't and that is okay so the

821
00:38:32,950 --> 00:38:41,140
question is a concern about just fully

822
00:38:36,400 --> 00:38:42,820
automated updates and you know I'd be

823
00:38:41,140 --> 00:38:44,740
concerned too if I was allowing the

824
00:38:42,820 --> 00:38:47,980
fully automated updates just to merge

825
00:38:44,740 --> 00:38:50,589
directly into in the master that's not

826
00:38:47,980 --> 00:38:53,350
what these tools do well like the Maven

827
00:38:50,590 --> 00:38:54,760
versions plug-in could do that but you'd

828
00:38:53,350 --> 00:38:57,430
have to physically check that in the

829
00:38:54,760 --> 00:38:59,230
master after it did the upgrade with the

830
00:38:57,430 --> 00:39:02,980
github applications that are doing this

831
00:38:59,230 --> 00:39:04,900
continuous updating for you it's a pull

832
00:39:02,980 --> 00:39:07,000
request it's not merging into master

833
00:39:04,900 --> 00:39:10,840
your your development team still has to

834
00:39:07,000 --> 00:39:12,580
review it they can look at it and see

835
00:39:10,840 --> 00:39:14,230
did the license change that's the one

836
00:39:12,580 --> 00:39:16,090
other issue with just keeping everything

837
00:39:14,230 --> 00:39:17,860
up to date all the time and where the

838
00:39:16,090 --> 00:39:20,140
commercial software composition analysis

839
00:39:17,860 --> 00:39:23,170
tools come into play is somebody may

840
00:39:20,140 --> 00:39:25,569
change a license on you it's happened

841
00:39:23,170 --> 00:39:27,670
and if you then went to production

842
00:39:25,570 --> 00:39:30,040
without having monitoring on this you

843
00:39:27,670 --> 00:39:32,850
could run into an issue last question I

844
00:39:30,040 --> 00:39:32,850
think because of time

845
00:39:42,400 --> 00:39:48,470
absolutely the concern with doing any of

846
00:39:46,280 --> 00:39:52,370
these automated updates and whatnot

847
00:39:48,470 --> 00:39:56,000
really rely on having a really good

848
00:39:52,370 --> 00:39:59,270
testbed of you unit integration testing

849
00:39:56,000 --> 00:40:00,770
all built into your CI but in a lot of

850
00:39:59,270 --> 00:40:02,810
ways that's just what you need to be a

851
00:40:00,770 --> 00:40:06,860
good development shop period if you're

852
00:40:02,810 --> 00:40:11,480
not doing good testing in your CI you're

853
00:40:06,860 --> 00:40:20,019
you're bound to fail well thank you

854
00:40:11,480 --> 00:40:20,019
[Applause]

855
00:40:22,520 --> 00:40:26,930
a quick ethical note about conferences

856
00:40:24,500 --> 00:40:29,210
right when you're a master of ceremonies

857
00:40:26,930 --> 00:40:31,669
introducing good friend of yours to

858
00:40:29,210 --> 00:40:35,150
speak and call him an sob that makes you

859
00:40:31,670 --> 00:40:36,500
the sob sorry you are one but I

860
00:40:35,150 --> 00:40:37,580
shouldn't have said all right so by the

861
00:40:36,500 --> 00:40:39,500
way we're gonna have to we're having

862
00:40:37,580 --> 00:40:41,660
lunch today in just a moment the lunch

863
00:40:39,500 --> 00:40:43,520
that we're serving today is the actual

864
00:40:41,660 --> 00:40:45,890
local moco is that it's the meal the

865
00:40:43,520 --> 00:40:49,480
local moco meal this is first of all

866
00:40:45,890 --> 00:40:52,640
what does the word loco mean in Spanish

867
00:40:49,480 --> 00:40:55,550
crazy it's Portuguese Spanish and

868
00:40:52,640 --> 00:40:58,220
Hawaiian pidgin local means crazy you're

869
00:40:55,550 --> 00:41:00,260
all AB sect people trying to manage your

870
00:40:58,220 --> 00:41:02,450
build to secure software and makes you

871
00:41:00,260 --> 00:41:04,520
all crazy but we're gonna but but to

872
00:41:02,450 --> 00:41:07,069
counter that we're at least serving you

873
00:41:04,520 --> 00:41:07,610
comfort food to bring some comfort to

874
00:41:07,070 --> 00:41:10,010
your lunch

875
00:41:07,610 --> 00:41:12,860
so please enjoy traditional Hawaiian

876
00:41:10,010 --> 00:41:14,540
loco moco and we'll be back in about an

877
00:41:12,860 --> 00:41:17,650
hour and 20 minutes for our next talk

878
00:41:14,540 --> 00:41:17,650
thank you very much everyone

