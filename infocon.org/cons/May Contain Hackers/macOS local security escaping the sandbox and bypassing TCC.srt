1
00:00:01,280 --> 00:00:16,160
[Music]

2
00:00:16,160 --> 00:00:19,520
we have one stage from uh compytest uh

3
00:00:19,520 --> 00:00:22,160
ty's all command and dan kuiper

4
00:00:22,160 --> 00:00:24,000
they're going to explain the one and

5
00:00:24,000 --> 00:00:25,840
only non-hackable machine people are

6
00:00:25,840 --> 00:00:29,199
using in daily basis mac os that it's

7
00:00:29,199 --> 00:00:31,840
actually not non-hackable um they're

8
00:00:31,840 --> 00:00:33,600
going to explain how to escape the

9
00:00:33,600 --> 00:00:36,320
sandboxes and how to pass your

10
00:00:36,320 --> 00:00:38,000
transparency consent and control

11
00:00:38,000 --> 00:00:40,559
mechanisms i would say

12
00:00:40,559 --> 00:00:44,800
i don't know who starts done or time

13
00:00:44,800 --> 00:00:45,790
right

14
00:00:45,790 --> 00:00:49,490
[Applause]

15
00:00:49,840 --> 00:00:51,360
thank you

16
00:00:51,360 --> 00:00:53,280
all right so my name is don cooper i'm

17
00:00:53,280 --> 00:00:55,840
here with my colleague thais alcamade

18
00:00:55,840 --> 00:00:58,239
we work for compytest which is a dutch

19
00:00:58,239 --> 00:01:00,800
cyber security full service company we

20
00:01:00,800 --> 00:01:02,480
do everything from pen testing to

21
00:01:02,480 --> 00:01:04,159
intimate response

22
00:01:04,159 --> 00:01:06,159
if you have any further questions after

23
00:01:06,159 --> 00:01:08,240
this talk we have a big tent on the

24
00:01:08,240 --> 00:01:11,439
retro square full of arcade games so

25
00:01:11,439 --> 00:01:13,200
if you have any questions just drop by

26
00:01:13,200 --> 00:01:14,880
we'll give you a beer and i can answer

27
00:01:14,880 --> 00:01:17,280
all your questions

28
00:01:17,280 --> 00:01:18,240
so

29
00:01:18,240 --> 00:01:19,920
today we

30
00:01:19,920 --> 00:01:21,439
would like to talk to you about the

31
00:01:21,439 --> 00:01:23,759
local security measures that are in mac

32
00:01:23,759 --> 00:01:25,119
os

33
00:01:25,119 --> 00:01:28,080
so suppose you have code execution as an

34
00:01:28,080 --> 00:01:30,640
unprofessional user in the mac os

35
00:01:30,640 --> 00:01:33,280
how can you abuse that

36
00:01:33,280 --> 00:01:35,680
privilege to escalate privileges to

37
00:01:35,680 --> 00:01:37,680
either hire a user or to bypass a

38
00:01:37,680 --> 00:01:41,200
sandbox or to bypass the new tcc

39
00:01:41,200 --> 00:01:44,079
mechanism in macos

40
00:01:44,079 --> 00:01:46,240
so the presentation is divided in two

41
00:01:46,240 --> 00:01:49,119
parts first i will explain all the local

42
00:01:49,119 --> 00:01:50,240
security

43
00:01:50,240 --> 00:01:52,799
mechanisms that are implemented in mac

44
00:01:52,799 --> 00:01:56,479
os currently and then types will jump

45
00:01:56,479 --> 00:01:58,799
into the cool stuff by actually showing

46
00:01:58,799 --> 00:02:01,840
how you can bypass it

47
00:02:02,159 --> 00:02:03,600
so there are a couple of security

48
00:02:03,600 --> 00:02:06,320
mechanisms in mac os

49
00:02:06,320 --> 00:02:08,160
and i'm going to cover them one by one

50
00:02:08,160 --> 00:02:11,120
and the first one is code signing

51
00:02:11,120 --> 00:02:13,440
so code signing was introduced in mac os

52
00:02:13,440 --> 00:02:14,480
lion

53
00:02:14,480 --> 00:02:17,040
and it means that every binary now has a

54
00:02:17,040 --> 00:02:19,120
cryptographic signature

55
00:02:19,120 --> 00:02:21,280
so

56
00:02:21,599 --> 00:02:25,440
if you want to run a unsigned binary the

57
00:02:25,440 --> 00:02:27,840
user first have to accept that by going

58
00:02:27,840 --> 00:02:29,920
to the system privileges and saying that

59
00:02:29,920 --> 00:02:33,440
it wants to run the binary

60
00:02:33,440 --> 00:02:35,599
so it's not actually mandatory for

61
00:02:35,599 --> 00:02:37,840
everything but most applications will

62
00:02:37,840 --> 00:02:40,640
have a a valid signature

63
00:02:40,640 --> 00:02:42,640
so the verification for this is handled

64
00:02:42,640 --> 00:02:46,959
by a kernel extension and the mv daemon

65
00:02:46,959 --> 00:02:51,680
which which is a user space daemon

66
00:02:51,680 --> 00:02:55,599
so apart from code signing they

67
00:02:55,599 --> 00:02:59,200
some apps also have entitlements and

68
00:02:59,200 --> 00:03:02,319
entitlements are some very fine-grained

69
00:03:02,319 --> 00:03:05,280
security rights that an application can

70
00:03:05,280 --> 00:03:06,480
have

71
00:03:06,480 --> 00:03:09,040
it's a key value dictionary and included

72
00:03:09,040 --> 00:03:11,280
into the code signing step

73
00:03:11,280 --> 00:03:14,000
and many of the entitlements are

74
00:03:14,000 --> 00:03:16,239
only allowed on binaries that are signed

75
00:03:16,239 --> 00:03:18,239
by apple

76
00:03:18,239 --> 00:03:20,800
so typically what will happen if you

77
00:03:20,800 --> 00:03:23,360
need special permission for

78
00:03:23,360 --> 00:03:26,080
a part of the operating system then they

79
00:03:26,080 --> 00:03:28,239
give that permission to a very small

80
00:03:28,239 --> 00:03:31,519
service and that communicates over xpc

81
00:03:31,519 --> 00:03:34,159
so the larger binary don't

82
00:03:34,159 --> 00:03:36,319
doesn't actually have the entitlements

83
00:03:36,319 --> 00:03:39,120
to do well the the important stuff in

84
00:03:39,120 --> 00:03:40,080
the

85
00:03:40,080 --> 00:03:42,000
in the operating system it's just

86
00:03:42,000 --> 00:03:44,080
handled by a very small daemon to make

87
00:03:44,080 --> 00:03:47,040
the attack server smaller

88
00:03:47,040 --> 00:03:48,000
so

89
00:03:48,000 --> 00:03:50,000
if an application has a specific

90
00:03:50,000 --> 00:03:52,959
entitlement and it is vulnerable

91
00:03:52,959 --> 00:03:56,000
then you can just copy that binary to a

92
00:03:56,000 --> 00:03:57,840
machine you have access to and then

93
00:03:57,840 --> 00:03:59,519
exploit that vulnerability and you will

94
00:03:59,519 --> 00:04:03,040
have the entitlement as well

95
00:04:03,280 --> 00:04:05,680
so this is how you can see what code

96
00:04:05,680 --> 00:04:07,920
signature a binary has

97
00:04:07,920 --> 00:04:10,200
is it readable actually on the screen

98
00:04:10,200 --> 00:04:12,959
[Music]

99
00:04:12,959 --> 00:04:16,079
so it's just a cryptographic signature

100
00:04:16,079 --> 00:04:17,918
you can also see the entitlements a

101
00:04:17,918 --> 00:04:20,798
binary has this is the ps binary and it

102
00:04:20,798 --> 00:04:25,199
has a specific entitlements to reprocess

103
00:04:25,199 --> 00:04:28,160
information of other processes it's the

104
00:04:28,160 --> 00:04:29,840
task force read

105
00:04:29,840 --> 00:04:32,320
entitlement and that is only given to a

106
00:04:32,320 --> 00:04:34,880
few binaries on the on your mac os

107
00:04:34,880 --> 00:04:37,360
installation

108
00:04:37,600 --> 00:04:39,680
so the signature itself is included in

109
00:04:39,680 --> 00:04:42,720
the macho binary inspects in a special

110
00:04:42,720 --> 00:04:45,040
section called the code signature you

111
00:04:45,040 --> 00:04:47,280
can extract it and see the certificate

112
00:04:47,280 --> 00:04:50,239
yourself if you want to

113
00:04:51,360 --> 00:04:52,160
so

114
00:04:52,160 --> 00:04:54,960
the executable self is signed

115
00:04:54,960 --> 00:04:58,080
but in an app bundle all the resources

116
00:04:58,080 --> 00:05:00,400
are also signed

117
00:05:00,400 --> 00:05:02,960
then the the resource signing is

118
00:05:02,960 --> 00:05:04,960
stored in a separate file within the app

119
00:05:04,960 --> 00:05:06,880
bundle

120
00:05:06,880 --> 00:05:08,560
and

121
00:05:08,560 --> 00:05:09,600
on

122
00:05:09,600 --> 00:05:11,919
if you launch an application

123
00:05:11,919 --> 00:05:13,360
the

124
00:05:13,360 --> 00:05:15,759
interesting part is that only the

125
00:05:15,759 --> 00:05:17,520
initial the app

126
00:05:17,520 --> 00:05:20,960
the actual binary is checked for valid

127
00:05:20,960 --> 00:05:25,039
signature so resources are only checked

128
00:05:25,039 --> 00:05:29,199
when the app is first downloaded

129
00:05:29,280 --> 00:05:32,639
or first run but after that only the

130
00:05:32,639 --> 00:05:38,039
binary itself the signature is validated

131
00:05:39,520 --> 00:05:41,039
so

132
00:05:41,039 --> 00:05:42,960
apart from that you have something which

133
00:05:42,960 --> 00:05:46,240
is called the hardened runtime which is

134
00:05:46,240 --> 00:05:48,720
now mandatory for applications in for

135
00:05:48,720 --> 00:05:50,560
example the mac app store

136
00:05:50,560 --> 00:05:51,440
and

137
00:05:51,440 --> 00:05:52,960
its

138
00:05:52,960 --> 00:05:54,880
purpose is to protect against all

139
00:05:54,880 --> 00:05:58,080
variants of process injection so if you

140
00:05:58,080 --> 00:06:00,479
have enabled hardened runtime for your

141
00:06:00,479 --> 00:06:03,840
app it prohibits the use of certain

142
00:06:03,840 --> 00:06:05,600
environment variables to override

143
00:06:05,600 --> 00:06:08,479
library loading but it will also disable

144
00:06:08,479 --> 00:06:10,880
just in time compilation it will

145
00:06:10,880 --> 00:06:12,960
check code signatures of libraries as

146
00:06:12,960 --> 00:06:18,159
well rather than only the binary etc etc

147
00:06:19,520 --> 00:06:20,639
then you have the sandboxing

148
00:06:20,639 --> 00:06:22,000
implementation

149
00:06:22,000 --> 00:06:24,479
which was introduced in leopards

150
00:06:24,479 --> 00:06:27,039
and it uses an allow list for syscalls

151
00:06:27,039 --> 00:06:30,160
that process can use

152
00:06:30,160 --> 00:06:33,120
it's handled by a kernel extension but

153
00:06:33,120 --> 00:06:35,440
most of the parsing is done by user

154
00:06:35,440 --> 00:06:38,160
space daemon

155
00:06:38,639 --> 00:06:40,720
the sandbox is configured using a

156
00:06:40,720 --> 00:06:42,560
profile which is written in the scheme

157
00:06:42,560 --> 00:06:45,039
language and most profiles can be found

158
00:06:45,039 --> 00:06:47,520
on the system library sandbox profiles

159
00:06:47,520 --> 00:06:49,199
directory

160
00:06:49,199 --> 00:06:51,440
and the sandbox has hooks all across the

161
00:06:51,440 --> 00:06:54,400
kernel source tree so it can be very

162
00:06:54,400 --> 00:06:57,039
fine-grained in what the sandbox will

163
00:06:57,039 --> 00:07:00,080
actually allow or block

164
00:07:00,160 --> 00:07:01,039
so

165
00:07:01,039 --> 00:07:03,680
a profile can depend on the entitlement

166
00:07:03,680 --> 00:07:05,599
of the application so if you have a

167
00:07:05,599 --> 00:07:08,080
certain entitlements in your application

168
00:07:08,080 --> 00:07:09,360
it can

169
00:07:09,360 --> 00:07:11,759
use a different sandbox profile to allow

170
00:07:11,759 --> 00:07:14,400
you to read or use certain syscalls for

171
00:07:14,400 --> 00:07:16,080
example

172
00:07:16,080 --> 00:07:17,599
now this is the

173
00:07:17,599 --> 00:07:18,800
an example

174
00:07:18,800 --> 00:07:21,039
sandbox profile for imessage in this

175
00:07:21,039 --> 00:07:23,599
case so it has some read and write

176
00:07:23,599 --> 00:07:25,599
permissions and it has some permissions

177
00:07:25,599 --> 00:07:26,720
to

178
00:07:26,720 --> 00:07:30,720
to communicate with other services

179
00:07:30,720 --> 00:07:33,919
so system services from mac os often

180
00:07:33,919 --> 00:07:37,360
have a custom sandbox profile

181
00:07:37,360 --> 00:07:39,440
all apps that are installed from the app

182
00:07:39,440 --> 00:07:42,960
store have a fixed mac app store sandbox

183
00:07:42,960 --> 00:07:45,599
profile was just a generic general

184
00:07:45,599 --> 00:07:46,960
profile

185
00:07:46,960 --> 00:07:49,919
but apart from that rarely any app uses

186
00:07:49,919 --> 00:07:53,520
a sandbox that is not installed via the

187
00:07:53,520 --> 00:07:55,919
video app store

188
00:07:55,919 --> 00:07:57,599
exceptions are things like chrome or

189
00:07:57,599 --> 00:08:00,639
firefox etc

190
00:08:01,199 --> 00:08:02,560
so you also have

191
00:08:02,560 --> 00:08:05,039
some containers which

192
00:08:05,039 --> 00:08:07,759
re-routes your home directory to a

193
00:08:07,759 --> 00:08:11,440
container within your library folder

194
00:08:11,440 --> 00:08:13,120
but this is actually not a security

195
00:08:13,120 --> 00:08:15,039
mechanism this is just to make the

196
00:08:15,039 --> 00:08:17,680
sandbox implementation easier for

197
00:08:17,680 --> 00:08:20,800
already existing apps

198
00:08:21,280 --> 00:08:23,919
so another important security measure is

199
00:08:23,919 --> 00:08:27,360
system integrity protection or sip

200
00:08:27,360 --> 00:08:29,680
it was released in

201
00:08:29,680 --> 00:08:31,039
el capitan

202
00:08:31,039 --> 00:08:33,919
and it was originally to create a trust

203
00:08:33,919 --> 00:08:37,200
boundary between root and kernel level

204
00:08:37,200 --> 00:08:40,000
so it is often referred to as rootless

205
00:08:40,000 --> 00:08:43,200
or internally it's referred to as csr

206
00:08:43,200 --> 00:08:46,640
and it restricts modifications or kernel

207
00:08:46,640 --> 00:08:48,880
and system extension loading and process

208
00:08:48,880 --> 00:08:50,880
debugging etc

209
00:08:50,880 --> 00:08:53,519
so the idea here is that even if you

210
00:08:53,519 --> 00:08:56,240
have root privileges on your account

211
00:08:56,240 --> 00:08:59,279
that you're still not able to alter the

212
00:08:59,279 --> 00:09:02,880
most important parts of your system

213
00:09:02,880 --> 00:09:03,839
the

214
00:09:03,839 --> 00:09:05,920
reason for this is that on most applica

215
00:09:05,920 --> 00:09:07,839
mac os installations there's only one

216
00:09:07,839 --> 00:09:09,920
user which is also the administrator

217
00:09:09,920 --> 00:09:12,160
user so typically you would

218
00:09:12,160 --> 00:09:15,279
be only one exploit away from getting

219
00:09:15,279 --> 00:09:17,360
full system access

220
00:09:17,360 --> 00:09:19,440
but zip prevents you from modifying

221
00:09:19,440 --> 00:09:20,560
important

222
00:09:20,560 --> 00:09:22,959
system files

223
00:09:22,959 --> 00:09:25,279
um for example if you want to remove

224
00:09:25,279 --> 00:09:27,920
your shell it will say it cannot do that

225
00:09:27,920 --> 00:09:31,120
and that's because um the bin directory

226
00:09:31,120 --> 00:09:32,720
or all application in there are

227
00:09:32,720 --> 00:09:35,680
protected by system integrity protection

228
00:09:35,680 --> 00:09:37,839
you can also not

229
00:09:37,839 --> 00:09:40,560
debug attach a debugger to system

230
00:09:40,560 --> 00:09:42,000
processes

231
00:09:42,000 --> 00:09:44,000
which is also prevented by

232
00:09:44,000 --> 00:09:46,320
zip

233
00:09:47,120 --> 00:09:51,120
actually zip is just a sandbox profile

234
00:09:51,120 --> 00:09:53,279
which is called platform profile the

235
00:09:53,279 --> 00:09:56,560
configuration it can be

236
00:09:56,560 --> 00:09:58,480
can be found in your system

237
00:09:58,480 --> 00:10:00,080
and it's enabled

238
00:10:00,080 --> 00:10:01,680
on boots

239
00:10:01,680 --> 00:10:04,560
using a nvram variable

240
00:10:04,560 --> 00:10:05,600
so

241
00:10:05,600 --> 00:10:09,600
you can disable root of a zip by just

242
00:10:09,600 --> 00:10:11,920
changing that variable

243
00:10:11,920 --> 00:10:13,760
however changing that variable is

244
00:10:13,760 --> 00:10:16,240
protected by ship as well so you will

245
00:10:16,240 --> 00:10:18,640
need to boot into another operating

246
00:10:18,640 --> 00:10:20,720
system or an operating system that will

247
00:10:20,720 --> 00:10:21,920
allow you to

248
00:10:21,920 --> 00:10:24,160
disable this for example the macros

249
00:10:24,160 --> 00:10:25,600
recovery

250
00:10:25,600 --> 00:10:28,160
installation

251
00:10:29,120 --> 00:10:30,480
so

252
00:10:30,480 --> 00:10:32,800
in order to allow

253
00:10:32,800 --> 00:10:34,720
sip to work

254
00:10:34,720 --> 00:10:37,519
the entitlement system is used as well

255
00:10:37,519 --> 00:10:39,440
because for example the ps binary needs

256
00:10:39,440 --> 00:10:41,200
some very specific

257
00:10:41,200 --> 00:10:42,399
permissions

258
00:10:42,399 --> 00:10:43,600
for which

259
00:10:43,600 --> 00:10:46,720
entitlements are used

260
00:10:46,720 --> 00:10:49,360
so zip also prevents app reading from

261
00:10:49,360 --> 00:10:51,600
certain sensitive locations like your

262
00:10:51,600 --> 00:10:53,600
mail database etc

263
00:10:53,600 --> 00:10:55,600
and these are called data vaults and

264
00:10:55,600 --> 00:10:57,200
only apps with very specific

265
00:10:57,200 --> 00:10:59,120
entitlements can read and write into

266
00:10:59,120 --> 00:11:00,880
that location

267
00:11:00,880 --> 00:11:03,680
so even if you have full system access

268
00:11:03,680 --> 00:11:05,360
that still doesn't mean that you can

269
00:11:05,360 --> 00:11:07,600
read the user's local email database for

270
00:11:07,600 --> 00:11:10,000
example

271
00:11:10,000 --> 00:11:11,200
so you can

272
00:11:11,200 --> 00:11:13,440
think of zip like something like a

273
00:11:13,440 --> 00:11:16,160
reverse sandbox sandbox limits what

274
00:11:16,160 --> 00:11:19,040
functionality a process can use

275
00:11:19,040 --> 00:11:19,920
and

276
00:11:19,920 --> 00:11:21,519
but zip

277
00:11:21,519 --> 00:11:23,760
tries to protect functionalities by

278
00:11:23,760 --> 00:11:25,680
limiting which processes can use that

279
00:11:25,680 --> 00:11:28,680
functionality

280
00:11:29,920 --> 00:11:30,720
so

281
00:11:30,720 --> 00:11:32,480
relatively new

282
00:11:32,480 --> 00:11:35,760
or unknown is tcc transparency consent

283
00:11:35,760 --> 00:11:37,680
and control

284
00:11:37,680 --> 00:11:39,839
and those are these pop-ups you might

285
00:11:39,839 --> 00:11:40,720
have seen

286
00:11:40,720 --> 00:11:43,200
like this application requires once

287
00:11:43,200 --> 00:11:45,279
access to your

288
00:11:45,279 --> 00:11:49,600
downloads folder or to your camera etc

289
00:11:49,600 --> 00:11:51,360
it was introduced in

290
00:11:51,360 --> 00:11:52,959
mojave

291
00:11:52,959 --> 00:11:55,440
and like a dynamic sandbox for private

292
00:11:55,440 --> 00:11:57,440
sensitive subsystems

293
00:11:57,440 --> 00:11:59,600
so

294
00:12:02,079 --> 00:12:02,880
the

295
00:12:02,880 --> 00:12:05,360
implementation looks at your bundle id

296
00:12:05,360 --> 00:12:07,279
and your developer id and if that

297
00:12:07,279 --> 00:12:10,000
matches with the internal tcc database

298
00:12:10,000 --> 00:12:11,120
the

299
00:12:11,120 --> 00:12:13,279
permission is grounded and otherwise the

300
00:12:13,279 --> 00:12:15,680
user will get a popup to confirm if the

301
00:12:15,680 --> 00:12:17,680
user wants to allow certain action or

302
00:12:17,680 --> 00:12:19,839
not

303
00:12:19,920 --> 00:12:21,440
for this

304
00:12:21,440 --> 00:12:24,720
your system will run a tcc daemon

305
00:12:24,720 --> 00:12:26,720
typically will have multiple demons

306
00:12:26,720 --> 00:12:28,800
running one for each user and one for

307
00:12:28,800 --> 00:12:32,639
the system user or for the entire system

308
00:12:32,639 --> 00:12:34,880
and they use an internal sqlite database

309
00:12:34,880 --> 00:12:38,639
to actually manage those permission

310
00:12:38,639 --> 00:12:41,120
it's however not able to just change

311
00:12:41,120 --> 00:12:43,760
that database yourself because the

312
00:12:43,760 --> 00:12:46,079
database itself is protected by system

313
00:12:46,079 --> 00:12:49,120
integrity protection

314
00:12:50,839 --> 00:12:54,399
so what happens if

315
00:12:54,399 --> 00:12:57,279
some system actually requests access to

316
00:12:57,279 --> 00:12:59,519
your microphone or your camera

317
00:12:59,519 --> 00:13:02,399
well the way it's implemented is

318
00:13:02,399 --> 00:13:04,800
if you want to access the microphone you

319
00:13:04,800 --> 00:13:08,000
have to ask core audio to get

320
00:13:08,000 --> 00:13:11,519
access to that to the microphone

321
00:13:11,519 --> 00:13:14,399
audio will forward that request to the

322
00:13:14,399 --> 00:13:16,000
tcc daemon

323
00:13:16,000 --> 00:13:19,040
which will look up if the u if this app

324
00:13:19,040 --> 00:13:21,519
has that permission or not

325
00:13:21,519 --> 00:13:22,800
and if

326
00:13:22,800 --> 00:13:24,800
the app doesn't have the permission yet

327
00:13:24,800 --> 00:13:27,440
it will forward that request to the ui

328
00:13:27,440 --> 00:13:29,200
notification service

329
00:13:29,200 --> 00:13:30,480
and that's the only service that's

330
00:13:30,480 --> 00:13:32,639
allowed to show the pop-up and to make

331
00:13:32,639 --> 00:13:36,240
changes to the tcc database

332
00:13:36,240 --> 00:13:38,399
so you can see that in the

333
00:13:38,399 --> 00:13:42,399
entitlements of tcc the tcc daemon

334
00:13:42,399 --> 00:13:45,040
only the notification center ui is

335
00:13:45,040 --> 00:13:46,800
allowed to

336
00:13:46,800 --> 00:13:48,480
make decisions about

337
00:13:48,480 --> 00:13:51,199
well what gets in the database and what

338
00:13:51,199 --> 00:13:54,480
didn't get made in the database

339
00:13:54,480 --> 00:13:56,800
after which the tcc daemon will actually

340
00:13:56,800 --> 00:14:00,399
make the changes in the database itself

341
00:14:00,399 --> 00:14:02,320
but the decision is handled by the

342
00:14:02,320 --> 00:14:05,279
notification center

343
00:14:08,079 --> 00:14:10,639
so another security feature is signed

344
00:14:10,639 --> 00:14:12,639
system volume

345
00:14:12,639 --> 00:14:13,920
so

346
00:14:13,920 --> 00:14:17,040
your system folder is volume is

347
00:14:17,040 --> 00:14:19,519
the volume where all the applications or

348
00:14:19,519 --> 00:14:22,959
the mac os installation is stored

349
00:14:22,959 --> 00:14:25,199
so this is different than what used to

350
00:14:25,199 --> 00:14:26,880
be typically you would have one

351
00:14:26,880 --> 00:14:28,959
partition which would contain both the

352
00:14:28,959 --> 00:14:31,920
operating system and all user files well

353
00:14:31,920 --> 00:14:34,160
now that's a difference those have been

354
00:14:34,160 --> 00:14:36,720
split you now have a system volume which

355
00:14:36,720 --> 00:14:38,959
will contain all the macos installation

356
00:14:38,959 --> 00:14:41,680
files and you have your data container

357
00:14:41,680 --> 00:14:45,519
which will contain all user files

358
00:14:45,519 --> 00:14:48,800
those are overlaid and it can

359
00:14:48,800 --> 00:14:51,120
most commonly described as a

360
00:14:51,120 --> 00:14:53,680
bi-directional wormhole in both reversal

361
00:14:53,680 --> 00:14:54,800
etc

362
00:14:54,800 --> 00:14:57,279
because everything had points to well

363
00:14:57,279 --> 00:14:59,040
either the system volume or the data

364
00:14:59,040 --> 00:15:01,440
volume

365
00:15:01,440 --> 00:15:02,720
and

366
00:15:02,720 --> 00:15:05,279
how it's implemented is

367
00:15:05,279 --> 00:15:07,279
that

368
00:15:07,279 --> 00:15:09,920
the system folder is

369
00:15:09,920 --> 00:15:12,399
mounted read only so you're not allowed

370
00:15:12,399 --> 00:15:15,680
to make changes to the

371
00:15:15,680 --> 00:15:17,120
system partition

372
00:15:17,120 --> 00:15:19,120
however that also means that well if you

373
00:15:19,120 --> 00:15:20,720
have a kernel vulnerability for example

374
00:15:20,720 --> 00:15:22,800
you could just remount the system

375
00:15:22,800 --> 00:15:25,440
partition and then make changes

376
00:15:25,440 --> 00:15:26,639
so now they

377
00:15:26,639 --> 00:15:28,720
upgrade the depth by also adding a

378
00:15:28,720 --> 00:15:30,959
cryptographic signature all over all

379
00:15:30,959 --> 00:15:33,600
data on the system volume

380
00:15:33,600 --> 00:15:35,759
this is implemented by using a merkle

381
00:15:35,759 --> 00:15:38,959
tree which validates the is validated

382
00:15:38,959 --> 00:15:40,720
during boots

383
00:15:40,720 --> 00:15:43,120
the hashes of every file are stored in

384
00:15:43,120 --> 00:15:46,160
the metadata data of apfs

385
00:15:46,160 --> 00:15:48,000
and on the root node this is called the

386
00:15:48,000 --> 00:15:49,279
seal

387
00:15:49,279 --> 00:15:51,759
and the seal is signed by apple and if

388
00:15:51,759 --> 00:15:55,759
the seal is broken so if you do

389
00:15:55,759 --> 00:15:58,000
make changes to the system partition for

390
00:15:58,000 --> 00:15:59,519
example because you have kernel

391
00:15:59,519 --> 00:16:00,720
privileges

392
00:16:00,720 --> 00:16:03,279
then the seal would be broken and the

393
00:16:03,279 --> 00:16:05,279
system would restore from a previous

394
00:16:05,279 --> 00:16:09,360
snapshot the next time you will reboot

395
00:16:09,360 --> 00:16:10,240
so

396
00:16:10,240 --> 00:16:12,880
how are updates implemented then well

397
00:16:12,880 --> 00:16:14,800
your system has a permanently hidden

398
00:16:14,800 --> 00:16:17,519
update volume which is a snapshot of

399
00:16:17,519 --> 00:16:20,000
your current macos installation

400
00:16:20,000 --> 00:16:22,720
so patches are applied to the snapshot

401
00:16:22,720 --> 00:16:25,440
and if if everything succeeds the

402
00:16:25,440 --> 00:16:29,120
snapshot is sealed and it will be booted

403
00:16:29,120 --> 00:16:31,519
but however if the update fails the

404
00:16:31,519 --> 00:16:34,160
system can use it previously

405
00:16:34,160 --> 00:16:36,480
stored snapshot which will have a valid

406
00:16:36,480 --> 00:16:40,880
seal and boot using that snapshot

407
00:16:40,880 --> 00:16:42,560
well you can see if your

408
00:16:42,560 --> 00:16:46,399
current snapshot disk has a valid

409
00:16:46,399 --> 00:16:50,079
a valid seal using disk util

410
00:16:50,079 --> 00:16:51,680
so these are the most common mac os

411
00:16:51,680 --> 00:16:54,880
local security systems that are trying

412
00:16:54,880 --> 00:16:56,959
to prevent attackers from getting full

413
00:16:56,959 --> 00:16:59,199
access to your system

414
00:16:59,199 --> 00:17:00,560
the new

415
00:17:00,560 --> 00:17:02,639
upcoming version of mac os will have

416
00:17:02,639 --> 00:17:05,839
some extra features

417
00:17:05,919 --> 00:17:07,760
i think these are the

418
00:17:07,760 --> 00:17:09,280
main ones

419
00:17:09,280 --> 00:17:11,839
the first one is that system apps will

420
00:17:11,839 --> 00:17:14,559
no longer run from non-default locations

421
00:17:14,559 --> 00:17:16,319
so if you have a system app and you move

422
00:17:16,319 --> 00:17:17,919
it to your home directory copy it to

423
00:17:17,919 --> 00:17:20,319
your home directory it will no longer

424
00:17:20,319 --> 00:17:22,400
launch

425
00:17:22,400 --> 00:17:25,599
secondly macos will now notify you when

426
00:17:25,599 --> 00:17:28,000
i'll land when launched demons are being

427
00:17:28,000 --> 00:17:30,480
added to your system so

428
00:17:30,480 --> 00:17:31,360
and

429
00:17:31,360 --> 00:17:33,360
they will be easier to manage within

430
00:17:33,360 --> 00:17:35,120
your system preferences so you know

431
00:17:35,120 --> 00:17:38,799
which applications will start at boot

432
00:17:38,799 --> 00:17:41,120
and most importantly is that gatekeeper

433
00:17:41,120 --> 00:17:44,559
will now prevent modifications to apps

434
00:17:44,559 --> 00:17:46,400
after the first launch

435
00:17:46,400 --> 00:17:48,559
typically gatekeeper will only you be

436
00:17:48,559 --> 00:17:50,799
used at the initial launch so the first

437
00:17:50,799 --> 00:17:52,480
time the application is launched but now

438
00:17:52,480 --> 00:17:55,280
gatekeeper will prevent modifications

439
00:17:55,280 --> 00:17:57,679
even after the applications has already

440
00:17:57,679 --> 00:17:59,440
been started once

441
00:17:59,440 --> 00:18:02,240
this is implemented using sip

442
00:18:02,240 --> 00:18:05,200
and modifications to apps

443
00:18:05,200 --> 00:18:09,120
are only allowed if the app that is

444
00:18:09,120 --> 00:18:11,520
making the modification is signed with

445
00:18:11,520 --> 00:18:14,000
the same certificates as the app your

446
00:18:14,000 --> 00:18:17,600
one or you want to change

447
00:18:17,600 --> 00:18:19,919
so this means that apps can update

448
00:18:19,919 --> 00:18:22,720
themselves but no other apps can make

449
00:18:22,720 --> 00:18:26,160
changes to to other apps

450
00:18:26,160 --> 00:18:27,679
there is a whitelist for this for

451
00:18:27,679 --> 00:18:29,760
example if you have an update surface

452
00:18:29,760 --> 00:18:32,000
like spark or something you can say okay

453
00:18:32,000 --> 00:18:33,280
sparkle

454
00:18:33,280 --> 00:18:34,240
the

455
00:18:34,240 --> 00:18:36,640
i also accept that certificate to make

456
00:18:36,640 --> 00:18:39,600
changes to my app

457
00:18:40,240 --> 00:18:42,320
so to give you an overview these are the

458
00:18:42,320 --> 00:18:44,640
most important security mechanisms so if

459
00:18:44,640 --> 00:18:46,320
you have code signing

460
00:18:46,320 --> 00:18:48,880
to make sure that the application was

461
00:18:48,880 --> 00:18:51,039
published by specific organizations you

462
00:18:51,039 --> 00:18:54,240
have to send box which handles static

463
00:18:54,240 --> 00:18:55,440
permissions

464
00:18:55,440 --> 00:18:57,679
you have zip to

465
00:18:57,679 --> 00:19:00,240
guarantee the integrity of the system as

466
00:19:00,240 --> 00:19:01,760
a whole

467
00:19:01,760 --> 00:19:03,280
tcc to

468
00:19:03,280 --> 00:19:05,120
have user control permissions like

469
00:19:05,120 --> 00:19:06,960
camera access etc

470
00:19:06,960 --> 00:19:09,520
and the signed system volume to prevent

471
00:19:09,520 --> 00:19:13,360
modifications of system files

472
00:19:14,480 --> 00:19:15,280
so

473
00:19:15,280 --> 00:19:17,360
this is the bug bounty description from

474
00:19:17,360 --> 00:19:18,320
apple

475
00:19:18,320 --> 00:19:19,760
as you can see

476
00:19:19,760 --> 00:19:23,520
they really believe in tcc because well

477
00:19:23,520 --> 00:19:26,480
a bounty for tcc can go up to a hundred

478
00:19:26,480 --> 00:19:29,039
thousand dollars if you know how to find

479
00:19:29,039 --> 00:19:32,080
a way to access the camera even though

480
00:19:32,080 --> 00:19:33,360
your application doesn't have the

481
00:19:33,360 --> 00:19:35,520
permission for this

482
00:19:35,520 --> 00:19:37,760
so ty's will now show you how you can do

483
00:19:37,760 --> 00:19:39,360
that actually

484
00:19:39,360 --> 00:19:40,240
thanks

485
00:19:40,240 --> 00:19:42,240
yes thank you

486
00:19:42,240 --> 00:19:44,559
so this was all theory and it's of

487
00:19:44,559 --> 00:19:46,080
course much more interesting to have

488
00:19:46,080 --> 00:19:46,960
some

489
00:19:46,960 --> 00:19:48,960
practical examples to really understand

490
00:19:48,960 --> 00:19:51,200
how these security measures work

491
00:19:51,200 --> 00:19:52,880
so we're going to look over a couple of

492
00:19:52,880 --> 00:19:55,360
different vulnerabilities to

493
00:19:55,360 --> 00:19:57,760
illustrate whether the security measures

494
00:19:57,760 --> 00:20:00,400
work or not and if they were bypassed or

495
00:20:00,400 --> 00:20:02,559
if they prevented something

496
00:20:02,559 --> 00:20:05,200
and most of these were found by us but

497
00:20:05,200 --> 00:20:06,480
occasionally we mentioned some

498
00:20:06,480 --> 00:20:08,159
vulnerabilities found by other people as

499
00:20:08,159 --> 00:20:10,880
well in those cases we hope to make that

500
00:20:10,880 --> 00:20:13,039
clear

501
00:20:13,039 --> 00:20:15,840
so first of all

502
00:20:16,400 --> 00:20:17,840
electron

503
00:20:17,840 --> 00:20:20,000
electron is a framework you can use to

504
00:20:20,000 --> 00:20:23,360
develop applications and it's basically

505
00:20:23,360 --> 00:20:25,679
a chrome runtime combined with the

506
00:20:25,679 --> 00:20:27,600
javascript web application fused

507
00:20:27,600 --> 00:20:29,280
together to

508
00:20:29,280 --> 00:20:32,080
create an application

509
00:20:32,080 --> 00:20:34,159
and as dan just mentioned the

510
00:20:34,159 --> 00:20:36,880
permissions for tcc are stored in a

511
00:20:36,880 --> 00:20:39,679
database based on the bundle

512
00:20:39,679 --> 00:20:41,919
identifier so something that specifies

513
00:20:41,919 --> 00:20:43,440
an application and the developer

514
00:20:43,440 --> 00:20:44,880
identifier

515
00:20:44,880 --> 00:20:46,000
like

516
00:20:46,000 --> 00:20:48,480
a team or an organization

517
00:20:48,480 --> 00:20:50,240
but the version of the application or

518
00:20:50,240 --> 00:20:51,760
the location where the application is

519
00:20:51,760 --> 00:20:55,679
stored are irrelevant here

520
00:20:55,760 --> 00:20:57,919
and also the code signing check after

521
00:20:57,919 --> 00:20:59,280
the first launch

522
00:20:59,280 --> 00:21:01,679
only checks the executable itself not

523
00:21:01,679 --> 00:21:04,240
all of the embedded resources

524
00:21:04,240 --> 00:21:05,120
the

525
00:21:05,120 --> 00:21:07,600
librarian frameworks are checked if the

526
00:21:07,600 --> 00:21:10,480
hardened runtime is used

527
00:21:10,480 --> 00:21:12,960
but this does mean that if you have some

528
00:21:12,960 --> 00:21:16,000
interpreted code like javascript or you

529
00:21:16,000 --> 00:21:17,520
embed some python scripts in your

530
00:21:17,520 --> 00:21:18,640
application

531
00:21:18,640 --> 00:21:20,880
then that code is not validated by the

532
00:21:20,880 --> 00:21:22,640
code signing check that is performed

533
00:21:22,640 --> 00:21:24,880
when you launch an application

534
00:21:24,880 --> 00:21:27,280
and as i just said electron applications

535
00:21:27,280 --> 00:21:29,280
contain a lot of javascript for their

536
00:21:29,280 --> 00:21:30,960
code which also means that those

537
00:21:30,960 --> 00:21:32,960
resources are not checked when you

538
00:21:32,960 --> 00:21:34,960
launch the application

539
00:21:34,960 --> 00:21:37,520
so in basically every electron app you

540
00:21:37,520 --> 00:21:40,000
can do the following attack

541
00:21:40,000 --> 00:21:42,840
you copy the application to a writable

542
00:21:42,840 --> 00:21:45,280
location you can do this if you have

543
00:21:45,280 --> 00:21:46,880
some

544
00:21:46,880 --> 00:21:48,559
access to the machine already so you

545
00:21:48,559 --> 00:21:50,799
cannot do do this remotely

546
00:21:50,799 --> 00:21:52,720
and you take out the javascript you

547
00:21:52,720 --> 00:21:55,280
place it with some malicious javascript

548
00:21:55,280 --> 00:21:57,600
you launch the modified application

549
00:21:57,600 --> 00:21:59,919
and now you have the tcc permissions

550
00:21:59,919 --> 00:22:02,240
that your original application had

551
00:22:02,240 --> 00:22:04,799
so even if your application doesn't have

552
00:22:04,799 --> 00:22:08,159
access to the webcam but you copied a

553
00:22:08,159 --> 00:22:09,840
application that did have access to the

554
00:22:09,840 --> 00:22:12,240
webcam then you can also access the

555
00:22:12,240 --> 00:22:14,080
webcam without having to ask the user

556
00:22:14,080 --> 00:22:16,640
for permission

557
00:22:16,640 --> 00:22:18,480
and for some reason

558
00:22:18,480 --> 00:22:20,080
people really love to write electron

559
00:22:20,080 --> 00:22:21,760
applications that have access to your

560
00:22:21,760 --> 00:22:24,080
webcam and your microphone all of these

561
00:22:24,080 --> 00:22:27,360
are developed using electron

562
00:22:27,360 --> 00:22:29,200
and as a user there's really not a good

563
00:22:29,200 --> 00:22:31,360
way to protect yourself from this but

564
00:22:31,360 --> 00:22:32,640
luckily there have been some

565
00:22:32,640 --> 00:22:36,000
developments on fixing this

566
00:22:36,000 --> 00:22:37,840
so electrons working on something called

567
00:22:37,840 --> 00:22:40,400
electron acer integrity which is

568
00:22:40,400 --> 00:22:43,039
basically they do some code signing step

569
00:22:43,039 --> 00:22:45,440
of their own resources that can be

570
00:22:45,440 --> 00:22:47,520
checked when the application is launched

571
00:22:47,520 --> 00:22:49,600
but it's not yet officially supported as

572
00:22:49,600 --> 00:22:51,520
far as i know so

573
00:22:51,520 --> 00:22:55,520
it also doesn't work very well

574
00:22:55,520 --> 00:22:57,679
but this is a technique you can apply

575
00:22:57,679 --> 00:22:59,600
more generally as well so we're just

576
00:22:59,600 --> 00:23:01,520
bashing electron here but it

577
00:23:01,520 --> 00:23:04,559
can be used on many application

578
00:23:04,559 --> 00:23:06,320
because you can often find an older

579
00:23:06,320 --> 00:23:08,480
version of an application that was not

580
00:23:08,480 --> 00:23:10,880
protected as well so for example an

581
00:23:10,880 --> 00:23:12,400
older version that didn't use the

582
00:23:12,400 --> 00:23:14,240
hardened runtime

583
00:23:14,240 --> 00:23:17,200
so then you can swap out a library with

584
00:23:17,200 --> 00:23:19,440
a different malicious library launch the

585
00:23:19,440 --> 00:23:21,600
application and

586
00:23:21,600 --> 00:23:23,760
the permissions

587
00:23:23,760 --> 00:23:25,600
hopefully the

588
00:23:25,600 --> 00:23:27,919
changes in ventura that's down mentioned

589
00:23:27,919 --> 00:23:30,000
that should prevent modification of

590
00:23:30,000 --> 00:23:31,200
those files

591
00:23:31,200 --> 00:23:32,640
in an application

592
00:23:32,640 --> 00:23:34,480
should prevent this attack

593
00:23:34,480 --> 00:23:36,400
of course it's still in beta so we don't

594
00:23:36,400 --> 00:23:39,200
really know it yet if it's going to work

595
00:23:39,200 --> 00:23:40,799
but it looks like apple is making some

596
00:23:40,799 --> 00:23:45,120
steps to make an attack like this harder

597
00:23:46,480 --> 00:23:48,559
the next one

598
00:23:48,559 --> 00:23:50,559
this is about adobe acrobat

599
00:23:50,559 --> 00:23:53,840
and privileged updaters

600
00:23:54,880 --> 00:23:57,679
there are some instances where macs are

601
00:23:57,679 --> 00:24:00,400
being used by people with a normal user

602
00:24:00,400 --> 00:24:02,880
account instead of an admin user account

603
00:24:02,880 --> 00:24:04,640
for example maybe a kid who has a

604
00:24:04,640 --> 00:24:07,600
computer but their parents have a admin

605
00:24:07,600 --> 00:24:09,520
account or maybe a computer in school or

606
00:24:09,520 --> 00:24:11,039
something like that

607
00:24:11,039 --> 00:24:13,279
but another admin user is not allowed to

608
00:24:13,279 --> 00:24:16,159
change the application folder

609
00:24:16,159 --> 00:24:18,960
and this can be a problem if you have a

610
00:24:18,960 --> 00:24:20,960
application that wants to also update

611
00:24:20,960 --> 00:24:22,880
itself

612
00:24:22,880 --> 00:24:24,559
and there are many applications that

613
00:24:24,559 --> 00:24:26,799
really you want to update as quickly as

614
00:24:26,799 --> 00:24:29,200
possible if you have chrome or something

615
00:24:29,200 --> 00:24:31,600
like adobe acrobat then there can be

616
00:24:31,600 --> 00:24:33,600
nasty exploits that can be

617
00:24:33,600 --> 00:24:34,880
dangerous and you want to protect

618
00:24:34,880 --> 00:24:37,279
against it by updating quickly

619
00:24:37,279 --> 00:24:39,360
but if the admin never logs into the

620
00:24:39,360 --> 00:24:41,760
machine how can you update those

621
00:24:41,760 --> 00:24:44,000
applications because they can't write to

622
00:24:44,000 --> 00:24:46,880
the applications folder so how can you

623
00:24:46,880 --> 00:24:49,039
install updates in this case

624
00:24:49,039 --> 00:24:49,919
well

625
00:24:49,919 --> 00:24:52,400
many people found the solution

626
00:24:52,400 --> 00:24:54,720
so you install a very small service a

627
00:24:54,720 --> 00:24:57,039
separate service and you run that

628
00:24:57,039 --> 00:24:59,520
service with root privileges

629
00:24:59,520 --> 00:25:01,679
and you'd use that only to do the

630
00:25:01,679 --> 00:25:03,440
installation step

631
00:25:03,440 --> 00:25:05,200
so you have this one service that can

632
00:25:05,200 --> 00:25:07,600
update the application but then the rest

633
00:25:07,600 --> 00:25:09,600
of the application runs as a normal user

634
00:25:09,600 --> 00:25:11,520
but you can have a separate service with

635
00:25:11,520 --> 00:25:15,840
a permission to update it

636
00:25:16,240 --> 00:25:17,840
now it's important that you do this

637
00:25:17,840 --> 00:25:19,760
securely of course so not every

638
00:25:19,760 --> 00:25:24,000
application can elevate its privileges

639
00:25:24,000 --> 00:25:25,600
so there's basically

640
00:25:25,600 --> 00:25:28,000
two things that you need to check here

641
00:25:28,000 --> 00:25:30,400
so the application has an update and

642
00:25:30,400 --> 00:25:33,520
then it hands it over to that service

643
00:25:33,520 --> 00:25:35,200
and there's two things that it needs to

644
00:25:35,200 --> 00:25:36,720
check first of all

645
00:25:36,720 --> 00:25:38,480
it should check if the request really

646
00:25:38,480 --> 00:25:41,360
comes from the original application if

647
00:25:41,360 --> 00:25:42,799
something else if some malware is

648
00:25:42,799 --> 00:25:45,279
requesting an update then it's probably

649
00:25:45,279 --> 00:25:47,279
it should be ignored

650
00:25:47,279 --> 00:25:49,039
and it should also make sure that the

651
00:25:49,039 --> 00:25:50,320
package is

652
00:25:50,320 --> 00:25:51,120
not

653
00:25:51,120 --> 00:25:53,200
manipulated in some way for example by

654
00:25:53,200 --> 00:25:54,880
checking a cryptographic signature or

655
00:25:54,880 --> 00:25:57,279
something like that

656
00:25:57,279 --> 00:25:58,960
and even though there are

657
00:25:58,960 --> 00:26:01,520
two things that can go wrong here it is

658
00:26:01,520 --> 00:26:03,440
quite common that both of them are

659
00:26:03,440 --> 00:26:05,919
implemented incorrectly

660
00:26:05,919 --> 00:26:08,400
so what you can see is

661
00:26:08,400 --> 00:26:09,600
often a

662
00:26:09,600 --> 00:26:11,760
incorrect code signing check or some

663
00:26:11,760 --> 00:26:14,000
form of process injection

664
00:26:14,000 --> 00:26:16,159
and combined with a this is a time of

665
00:26:16,159 --> 00:26:18,000
check time of use vulnerability this

666
00:26:18,000 --> 00:26:20,159
base so basically it means that

667
00:26:20,159 --> 00:26:22,240
it checks the signature

668
00:26:22,240 --> 00:26:24,480
but then before it actually uses the

669
00:26:24,480 --> 00:26:27,039
applicat the installation

670
00:26:27,039 --> 00:26:28,000
package

671
00:26:28,000 --> 00:26:30,000
it is changed so it checks something

672
00:26:30,000 --> 00:26:31,919
first it's correct and then before it

673
00:26:31,919 --> 00:26:34,720
installs it it was modified

674
00:26:34,720 --> 00:26:36,400
and if both of those things go wrong

675
00:26:36,400 --> 00:26:38,159
then you often have a way to gain

676
00:26:38,159 --> 00:26:40,480
privilege escalation because you can

677
00:26:40,480 --> 00:26:43,120
install a package which

678
00:26:43,120 --> 00:26:45,120
usually means that you can also elevate

679
00:26:45,120 --> 00:26:48,239
privileges to root

680
00:26:49,279 --> 00:26:50,080
so

681
00:26:50,080 --> 00:26:52,080
it turned out that adobe acrobat was

682
00:26:52,080 --> 00:26:56,080
vulnerable this was found by joe binson

683
00:26:56,080 --> 00:26:57,679
there was no code signing check at all

684
00:26:57,679 --> 00:27:00,000
that check was completely missing

685
00:27:00,000 --> 00:27:01,840
and it was possible to use a sim link

686
00:27:01,840 --> 00:27:03,600
for the update package

687
00:27:03,600 --> 00:27:04,559
so

688
00:27:04,559 --> 00:27:06,400
it would check the signature on the

689
00:27:06,400 --> 00:27:09,120
package and then the they would quickly

690
00:27:09,120 --> 00:27:11,360
change the sim link and then it would

691
00:27:11,360 --> 00:27:12,880
install something different than what it

692
00:27:12,880 --> 00:27:14,320
had checked

693
00:27:14,320 --> 00:27:15,919
there's also a nice wide about this

694
00:27:15,919 --> 00:27:18,720
vulnerability um that you have been pro

695
00:27:18,720 --> 00:27:21,120
published

696
00:27:21,120 --> 00:27:22,080
but then

697
00:27:22,080 --> 00:27:23,760
they made some changes and they didn't

698
00:27:23,760 --> 00:27:26,399
really do everything correctly so at

699
00:27:26,399 --> 00:27:28,720
around the same time um

700
00:27:28,720 --> 00:27:30,880
sazaba fitzsal and i looked at it but he

701
00:27:30,880 --> 00:27:32,320
was just a little bit faster with

702
00:27:32,320 --> 00:27:35,039
reporting it to adobe

703
00:27:35,039 --> 00:27:36,480
so the code signing check that they

704
00:27:36,480 --> 00:27:39,120
implemented was wrong they used the code

705
00:27:39,120 --> 00:27:41,039
signing binary in a way that was easy to

706
00:27:41,039 --> 00:27:42,320
manipulate

707
00:27:42,320 --> 00:27:44,720
it was also possible to create a hard

708
00:27:44,720 --> 00:27:46,720
link to the update package

709
00:27:46,720 --> 00:27:48,320
because they moved it to a different

710
00:27:48,320 --> 00:27:50,799
location instead of copying it the hard

711
00:27:50,799 --> 00:27:52,880
links were maintained so you could keep

712
00:27:52,880 --> 00:27:56,559
modifying the update package

713
00:27:56,559 --> 00:27:59,440
after they had checked it

714
00:27:59,440 --> 00:28:00,399
so

715
00:28:00,399 --> 00:28:03,200
a little bit later i also looked at it

716
00:28:03,200 --> 00:28:05,600
and then what i noticed there is that

717
00:28:05,600 --> 00:28:07,840
they started on writing the correct code

718
00:28:07,840 --> 00:28:10,559
signing check but they just left it

719
00:28:10,559 --> 00:28:12,640
unfinished for some reason it would

720
00:28:12,640 --> 00:28:15,120
always return true they yeah

721
00:28:15,120 --> 00:28:16,799
apparently they were still working on it

722
00:28:16,799 --> 00:28:18,960
but that released it anyway

723
00:28:18,960 --> 00:28:21,200
and i find also a very neat trick to

724
00:28:21,200 --> 00:28:24,000
still modify the package in a time of

725
00:28:24,000 --> 00:28:25,679
check time of use way

726
00:28:25,679 --> 00:28:26,960
so

727
00:28:26,960 --> 00:28:31,360
if you have a file descriptor to a file

728
00:28:31,360 --> 00:28:33,600
so if you open a file then it will check

729
00:28:33,600 --> 00:28:35,200
if you have permission to read or write

730
00:28:35,200 --> 00:28:36,960
that file and then you get the open file

731
00:28:36,960 --> 00:28:38,159
descriptor

732
00:28:38,159 --> 00:28:40,000
but if the files then moved and the

733
00:28:40,000 --> 00:28:42,240
permissions are changed as long as you

734
00:28:42,240 --> 00:28:43,760
have that file descriptor you can keep

735
00:28:43,760 --> 00:28:46,720
modifying that file so until you close

736
00:28:46,720 --> 00:28:49,039
it you still have access

737
00:28:49,039 --> 00:28:50,880
and because they moved the file you

738
00:28:50,880 --> 00:28:53,440
could keep this file descriptor open and

739
00:28:53,440 --> 00:28:55,520
then still rewrite the contents of that

740
00:28:55,520 --> 00:28:56,480
file

741
00:28:56,480 --> 00:29:00,080
in between the check and the use

742
00:29:00,080 --> 00:29:03,039
so what this really illustrates is that

743
00:29:03,039 --> 00:29:05,600
this private this

744
00:29:05,600 --> 00:29:07,840
idea that you can separate out

745
00:29:07,840 --> 00:29:10,240
dangerous operations into a separate

746
00:29:10,240 --> 00:29:13,679
small privilege process and then use xpc

747
00:29:13,679 --> 00:29:16,399
as a way to communicate with that

748
00:29:16,399 --> 00:29:18,000
but also that code signing is a very

749
00:29:18,000 --> 00:29:19,679
important part to make this work

750
00:29:19,679 --> 00:29:21,279
correctly

751
00:29:21,279 --> 00:29:22,720
now there have been many applications

752
00:29:22,720 --> 00:29:24,640
that have similar have had similar

753
00:29:24,640 --> 00:29:26,399
vulnerabilities in the past

754
00:29:26,399 --> 00:29:28,399
so google chrome at some point had

755
00:29:28,399 --> 00:29:30,159
vulnerabilities like this

756
00:29:30,159 --> 00:29:32,480
the microsoft auto update tool and

757
00:29:32,480 --> 00:29:35,279
microsoft teams has its own updater that

758
00:29:35,279 --> 00:29:38,840
had similar vulnerabilities

759
00:29:40,640 --> 00:29:42,480
and another thing to mention about this

760
00:29:42,480 --> 00:29:44,399
is that there's nothing that will

761
00:29:44,399 --> 00:29:46,880
install that updater if you delete the

762
00:29:46,880 --> 00:29:49,840
application from the applications folder

763
00:29:49,840 --> 00:29:52,080
so if you have ever used adobe acrobat

764
00:29:52,080 --> 00:29:54,240
and then deleted it again then you may

765
00:29:54,240 --> 00:29:56,080
still have a very old outdated

766
00:29:56,080 --> 00:29:57,840
vulnerable version of that updater

767
00:29:57,840 --> 00:29:58,880
installed

768
00:29:58,880 --> 00:30:00,320
and then any application can still

769
00:30:00,320 --> 00:30:01,919
communicate with it because it still

770
00:30:01,919 --> 00:30:03,760
exists

771
00:30:03,760 --> 00:30:05,919
so

772
00:30:06,159 --> 00:30:08,240
maybe the changes in ventura to launch

773
00:30:08,240 --> 00:30:10,480
daemons might make it easier to manage

774
00:30:10,480 --> 00:30:12,720
this i haven't checked that but it would

775
00:30:12,720 --> 00:30:15,440
be very welcome to make sure that

776
00:30:15,440 --> 00:30:17,600
you can easily remove stuff like this

777
00:30:17,600 --> 00:30:19,600
because checking those folders normal

778
00:30:19,600 --> 00:30:23,719
users are not going to do that

779
00:30:24,880 --> 00:30:26,320
the next one

780
00:30:26,320 --> 00:30:28,320
this is in the store privilege task

781
00:30:28,320 --> 00:30:31,279
service so this was a service

782
00:30:31,279 --> 00:30:33,360
installed within mac os so not the third

783
00:30:33,360 --> 00:30:36,640
party application

784
00:30:36,640 --> 00:30:38,799
and this is a service similar to the

785
00:30:38,799 --> 00:30:41,200
privileged updaters from the previous

786
00:30:41,200 --> 00:30:43,279
step

787
00:30:43,279 --> 00:30:45,120
but this one is used for installing

788
00:30:45,120 --> 00:30:47,279
updates from the mac app store

789
00:30:47,279 --> 00:30:49,520
so this service is running as roots and

790
00:30:49,520 --> 00:30:51,600
it can do a couple of things

791
00:30:51,600 --> 00:30:53,279
similar as before they needed root

792
00:30:53,279 --> 00:30:55,440
privileges for certain steps so they

793
00:30:55,440 --> 00:30:58,080
created a separate privilege tool

794
00:30:58,080 --> 00:31:00,000
to do just those steps and then other

795
00:31:00,000 --> 00:31:03,840
things can request it to do that

796
00:31:03,840 --> 00:31:05,760
for example it can move the application

797
00:31:05,760 --> 00:31:07,919
to a different location it can remove

798
00:31:07,919 --> 00:31:10,320
the quarantine flag which is applied to

799
00:31:10,320 --> 00:31:11,679
files you have downloaded from the

800
00:31:11,679 --> 00:31:13,120
internet

801
00:31:13,120 --> 00:31:16,799
and something about managing receipts

802
00:31:17,120 --> 00:31:19,360
and this service was also missing any

803
00:31:19,360 --> 00:31:22,320
check on what application was requesting

804
00:31:22,320 --> 00:31:25,200
it to do something

805
00:31:25,200 --> 00:31:26,640
which made it very easy to write a

806
00:31:26,640 --> 00:31:28,399
sandbox escape

807
00:31:28,399 --> 00:31:31,519
because you can write a new application

808
00:31:31,519 --> 00:31:32,640
you can

809
00:31:32,640 --> 00:31:34,320
ask this service to remove the

810
00:31:34,320 --> 00:31:36,320
quarantine flag because if you

811
00:31:36,320 --> 00:31:38,240
if a sandbox application creates a new

812
00:31:38,240 --> 00:31:40,480
file it's always quarantined just like

813
00:31:40,480 --> 00:31:42,720
if you downloaded it

814
00:31:42,720 --> 00:31:44,399
but you could remove it and then launch

815
00:31:44,399 --> 00:31:49,120
the application to escape the sandbox

816
00:31:49,919 --> 00:31:51,360
but

817
00:31:51,360 --> 00:31:53,760
we found this and we thought well we can

818
00:31:53,760 --> 00:31:55,919
probably do more than this because we

819
00:31:55,919 --> 00:31:58,960
can also move things around

820
00:31:58,960 --> 00:32:01,039
as the root user

821
00:32:01,039 --> 00:32:02,960
and it's generally something you can use

822
00:32:02,960 --> 00:32:04,320
for privilege escalation

823
00:32:04,320 --> 00:32:06,159
[Music]

824
00:32:06,159 --> 00:32:07,760
but this turned out to be quite a

825
00:32:07,760 --> 00:32:09,279
challenge to do correctly because this

826
00:32:09,279 --> 00:32:12,640
process was sandboxed

827
00:32:12,960 --> 00:32:15,120
so what this basically meant is that we

828
00:32:15,120 --> 00:32:17,519
could only move directories and not

829
00:32:17,519 --> 00:32:19,200
separate files which made it quite

830
00:32:19,200 --> 00:32:21,600
tricky

831
00:32:23,120 --> 00:32:26,000
this is one part of the sandbox profile

832
00:32:26,000 --> 00:32:29,600
of this service

833
00:32:29,600 --> 00:32:32,240
the most useful part here is the second

834
00:32:32,240 --> 00:32:34,080
regex which basically means that we can

835
00:32:34,080 --> 00:32:35,919
move any directory as long as it

836
00:32:35,919 --> 00:32:39,440
contains dot app somewhere

837
00:32:39,440 --> 00:32:40,960
spent quite a lot of time on getting

838
00:32:40,960 --> 00:32:42,880
this to work we tried a couple of

839
00:32:42,880 --> 00:32:45,360
different things but

840
00:32:45,360 --> 00:32:47,039
you have to we had to deal with the

841
00:32:47,039 --> 00:32:48,640
science system volume which means that

842
00:32:48,640 --> 00:32:50,559
we cannot overwrite any existing

843
00:32:50,559 --> 00:32:52,000
applications

844
00:32:52,000 --> 00:32:53,919
we also want something advances root and

845
00:32:53,919 --> 00:32:55,600
applications generally don't run as

846
00:32:55,600 --> 00:32:57,519
roots so

847
00:32:57,519 --> 00:32:58,480
yeah

848
00:32:58,480 --> 00:33:00,480
it was sort of conflicting requirements

849
00:33:00,480 --> 00:33:02,159
that made it hard to find what we could

850
00:33:02,159 --> 00:33:04,320
do

851
00:33:04,559 --> 00:33:06,240
and then at some point i found something

852
00:33:06,240 --> 00:33:08,240
that i thought could work

853
00:33:08,240 --> 00:33:11,600
i could override mrt.app this is the

854
00:33:11,600 --> 00:33:14,799
malware removal tool which can be

855
00:33:14,799 --> 00:33:16,320
it's a it's an application running on

856
00:33:16,320 --> 00:33:19,039
mac os that can be used to

857
00:33:19,039 --> 00:33:21,840
delete malware from your computer

858
00:33:21,840 --> 00:33:24,480
and it can be updated independently of

859
00:33:24,480 --> 00:33:26,080
the rest of the system which means it's

860
00:33:26,080 --> 00:33:28,799
not on the system volume

861
00:33:28,799 --> 00:33:30,640
but i developed this exploit i sent it

862
00:33:30,640 --> 00:33:33,760
to apple and then they asked me well

863
00:33:33,760 --> 00:33:36,799
does it also work if you have sip on and

864
00:33:36,799 --> 00:33:38,559
then it turned out that in the virtual

865
00:33:38,559 --> 00:33:42,480
machine i was using i had turned off zip

866
00:33:42,480 --> 00:33:44,240
to debug something

867
00:33:44,240 --> 00:33:46,240
and uh

868
00:33:46,240 --> 00:33:47,039
yeah

869
00:33:47,039 --> 00:33:49,120
it wouldn't work on the system with zip

870
00:33:49,120 --> 00:33:52,320
on so i had to yeah start looking again

871
00:33:52,320 --> 00:33:54,640
but then finally after a while i found

872
00:33:54,640 --> 00:33:56,480
that i could create a new authorization

873
00:33:56,480 --> 00:33:59,440
plugin and then auto activate that

874
00:33:59,440 --> 00:34:03,440
and that would give me root privileges

875
00:34:05,039 --> 00:34:06,880
so what is really interesting is that

876
00:34:06,880 --> 00:34:08,719
the signed system volume and sip made

877
00:34:08,719 --> 00:34:11,599
this really hard to develop this

878
00:34:11,599 --> 00:34:12,879
attack

879
00:34:12,879 --> 00:34:14,960
also the sandboxing of course made it

880
00:34:14,960 --> 00:34:17,280
quite difficult but in this case the

881
00:34:17,280 --> 00:34:19,199
sandboxing profile was really way too

882
00:34:19,199 --> 00:34:20,800
broad there were a lot of things that

883
00:34:20,800 --> 00:34:22,560
were allowed that weren't intended to be

884
00:34:22,560 --> 00:34:24,399
allowed they could have made that a

885
00:34:24,399 --> 00:34:26,000
little bit stricter which is also what

886
00:34:26,000 --> 00:34:30,000
they did when they finally patched this

887
00:34:30,960 --> 00:34:33,040
next one this is a

888
00:34:33,040 --> 00:34:34,879
bit of a weird one

889
00:34:34,879 --> 00:34:38,560
so this is about open and safe panels

890
00:34:38,560 --> 00:34:41,440
so this is an open panel it looks really

891
00:34:41,440 --> 00:34:43,599
boring like you see a hundred times

892
00:34:43,599 --> 00:34:44,639
every day

893
00:34:44,639 --> 00:34:46,800
but this is actually quite technically

894
00:34:46,800 --> 00:34:49,119
quite interesting

895
00:34:49,119 --> 00:34:51,679
because in the sandbox application the

896
00:34:51,679 --> 00:34:53,199
application cannot see all your

897
00:34:53,199 --> 00:34:54,320
documents

898
00:34:54,320 --> 00:34:56,399
but you want to open a document in that

899
00:34:56,399 --> 00:34:58,800
application but the application cannot

900
00:34:58,800 --> 00:35:00,720
know what documents you have because

901
00:35:00,720 --> 00:35:03,040
it's sandboxed

902
00:35:03,040 --> 00:35:05,280
so the way apple solved this

903
00:35:05,280 --> 00:35:07,839
is by making this window this window is

904
00:35:07,839 --> 00:35:09,440
part of the application

905
00:35:09,440 --> 00:35:10,880
but the contents of the window are

906
00:35:10,880 --> 00:35:12,640
actually being drawn by a different

907
00:35:12,640 --> 00:35:14,240
process

908
00:35:14,240 --> 00:35:15,599
there's a

909
00:35:15,599 --> 00:35:16,400
open

910
00:35:16,400 --> 00:35:18,560
open safe panel service

911
00:35:18,560 --> 00:35:20,720
which does have access to all files it's

912
00:35:20,720 --> 00:35:22,720
not sandboxed

913
00:35:22,720 --> 00:35:24,400
and it's drawing this

914
00:35:24,400 --> 00:35:26,480
into a different process to show you all

915
00:35:26,480 --> 00:35:28,320
of the files that you have

916
00:35:28,320 --> 00:35:29,680
and when you select the file and then

917
00:35:29,680 --> 00:35:30,960
click open

918
00:35:30,960 --> 00:35:32,800
then the application gets temporary

919
00:35:32,800 --> 00:35:36,000
access to that file so it can open it

920
00:35:36,000 --> 00:35:38,560
and this kind of technology is used

921
00:35:38,560 --> 00:35:40,640
throughout the system to

922
00:35:40,640 --> 00:35:42,480
separate out different parts into

923
00:35:42,480 --> 00:35:44,000
different components with different

924
00:35:44,000 --> 00:35:47,119
privileges but making it one look look

925
00:35:47,119 --> 00:35:50,560
like it's one thing in the ui

926
00:35:50,720 --> 00:35:52,079
but

927
00:35:52,079 --> 00:35:54,079
apparently they didn't really think

928
00:35:54,079 --> 00:35:55,920
about the security of this very much

929
00:35:55,920 --> 00:35:58,160
because they there was a method that you

930
00:35:58,160 --> 00:35:59,760
could call

931
00:35:59,760 --> 00:36:00,640
um

932
00:36:00,640 --> 00:36:05,118
it's a the class is a remote view so

933
00:36:05,359 --> 00:36:07,280
you could from from the point of view of

934
00:36:07,280 --> 00:36:09,359
the application

935
00:36:09,359 --> 00:36:11,359
and one thing you could call a snapshot

936
00:36:11,359 --> 00:36:12,880
and if you do that it would take a

937
00:36:12,880 --> 00:36:15,359
picture of the contents of the view and

938
00:36:15,359 --> 00:36:17,839
return that to the application

939
00:36:17,839 --> 00:36:18,800
so

940
00:36:18,800 --> 00:36:21,040
yeah in this case when you open the open

941
00:36:21,040 --> 00:36:23,280
panel you can get a list of all of the

942
00:36:23,280 --> 00:36:25,119
files the user has get previews of

943
00:36:25,119 --> 00:36:26,480
certain files

944
00:36:26,480 --> 00:36:28,960
yeah this was not intended for sandbox

945
00:36:28,960 --> 00:36:30,880
applications because yeah the entire

946
00:36:30,880 --> 00:36:32,320
reason why this is here is that the

947
00:36:32,320 --> 00:36:34,240
application can't know what documents

948
00:36:34,240 --> 00:36:35,520
you have

949
00:36:35,520 --> 00:36:38,560
but apparently they added this method um

950
00:36:38,560 --> 00:36:40,400
to take a snapshot

951
00:36:40,400 --> 00:36:44,240
we created a demonstration of this here

952
00:36:44,880 --> 00:36:48,000
i'm going to open a panel

953
00:36:48,240 --> 00:36:50,799
and then we

954
00:36:51,040 --> 00:36:53,359
copy the view into here and this this

955
00:36:53,359 --> 00:36:55,119
now is part of the application and that

956
00:36:55,119 --> 00:36:58,640
one is a remote view as uh i described

957
00:36:58,640 --> 00:37:01,040
earlier

958
00:37:01,040 --> 00:37:03,440
so what what the open panels really

959
00:37:03,440 --> 00:37:04,960
illustrate and what i think is

960
00:37:04,960 --> 00:37:08,160
interesting about it is that

961
00:37:08,160 --> 00:37:10,000
the sandboxing creates all sorts of

962
00:37:10,000 --> 00:37:12,240
weird attack servers that

963
00:37:12,240 --> 00:37:13,119
yeah

964
00:37:13,119 --> 00:37:14,960
not many people will look at

965
00:37:14,960 --> 00:37:16,720
there's also these weird edge cases

966
00:37:16,720 --> 00:37:19,920
where things that are sandboxed yeah

967
00:37:19,920 --> 00:37:22,480
within the ui need to do certain things

968
00:37:22,480 --> 00:37:25,440
so there's a lot of parts that

969
00:37:25,440 --> 00:37:27,680
haven't really got much attention either

970
00:37:27,680 --> 00:37:31,440
from apple or security researchers

971
00:37:32,640 --> 00:37:35,040
now the next one is the sandbox escape

972
00:37:35,040 --> 00:37:38,640
that we found and reported to apple

973
00:37:39,119 --> 00:37:40,880
which is interesting because it actually

974
00:37:40,880 --> 00:37:43,520
abuses the sandboxing container

975
00:37:43,520 --> 00:37:46,520
functionality

976
00:37:52,079 --> 00:37:54,640
in a sandbox application on mac os

977
00:37:54,640 --> 00:37:57,359
you are allowed to launch a new process

978
00:37:57,359 --> 00:37:59,359
on ios you cannot do this

979
00:37:59,359 --> 00:38:02,240
but on macro as you can

980
00:38:02,240 --> 00:38:04,240
but that process inherits the same

981
00:38:04,240 --> 00:38:06,880
sandbox as your your application so if

982
00:38:06,880 --> 00:38:08,720
you cannot access a file you can use

983
00:38:08,720 --> 00:38:13,040
just use got to read this file

984
00:38:15,440 --> 00:38:17,359
one thing that's interesting about that

985
00:38:17,359 --> 00:38:19,520
is that you can just also launch another

986
00:38:19,520 --> 00:38:24,000
application from within your own sandbox

987
00:38:24,240 --> 00:38:26,880
and this generally works

988
00:38:26,880 --> 00:38:29,599
except for one thing you cannot initiate

989
00:38:29,599 --> 00:38:32,240
a sandbox if you are already sandboxed

990
00:38:32,240 --> 00:38:34,480
then the system will terminate that

991
00:38:34,480 --> 00:38:36,880
process

992
00:38:37,440 --> 00:38:39,359
so if you try to launch safari from

993
00:38:39,359 --> 00:38:41,440
within a sandbox application

994
00:38:41,440 --> 00:38:42,880
then it will

995
00:38:42,880 --> 00:38:44,480
the kernel will terminate it because

996
00:38:44,480 --> 00:38:47,359
safari should sandbox itself but it

997
00:38:47,359 --> 00:38:49,599
tries to do that while already sandboxed

998
00:38:49,599 --> 00:38:52,640
so it cannot do that

999
00:38:52,720 --> 00:38:53,760
so

1000
00:38:53,760 --> 00:38:56,160
just as an experiment i

1001
00:38:56,160 --> 00:38:58,160
tried to launch all of the applications

1002
00:38:58,160 --> 00:39:00,720
from within a sandbox application

1003
00:39:00,720 --> 00:39:02,000
and i noticed something quite

1004
00:39:02,000 --> 00:39:03,119
interesting

1005
00:39:03,119 --> 00:39:05,760
which was that system preferences

1006
00:39:05,760 --> 00:39:07,040
was working

1007
00:39:07,040 --> 00:39:09,920
just like normal

1008
00:39:11,680 --> 00:39:13,760
many other applications they

1009
00:39:13,760 --> 00:39:16,160
they fail to run or they they hang or

1010
00:39:16,160 --> 00:39:18,960
something something some error popped up

1011
00:39:18,960 --> 00:39:22,160
but since some preferences was working

1012
00:39:22,160 --> 00:39:24,079
and system preferences is a very

1013
00:39:24,079 --> 00:39:25,920
sensitive application because you can

1014
00:39:25,920 --> 00:39:27,280
manage many

1015
00:39:27,280 --> 00:39:29,520
security and trust settings and they all

1016
00:39:29,520 --> 00:39:33,520
worked even within my sandbox

1017
00:39:33,760 --> 00:39:34,880
so

1018
00:39:34,880 --> 00:39:37,599
i tried to figure out why

1019
00:39:37,599 --> 00:39:38,560
and

1020
00:39:38,560 --> 00:39:40,320
it turned out that

1021
00:39:40,320 --> 00:39:43,119
similar to the remote view that we saw

1022
00:39:43,119 --> 00:39:45,119
before

1023
00:39:45,119 --> 00:39:46,960
system preferences is also separated

1024
00:39:46,960 --> 00:39:49,440
into many different processes

1025
00:39:49,440 --> 00:39:51,839
so their system preferences itself

1026
00:39:51,839 --> 00:39:54,079
within every

1027
00:39:54,079 --> 00:39:56,480
panel system preferences is another

1028
00:39:56,480 --> 00:39:57,680
process

1029
00:39:57,680 --> 00:39:59,599
and there can be even another level of

1030
00:39:59,599 --> 00:40:02,320
indirection the the advertising is yet

1031
00:40:02,320 --> 00:40:03,280
another

1032
00:40:03,280 --> 00:40:05,680
level of interaction

1033
00:40:05,680 --> 00:40:07,280
and even though system preferences was

1034
00:40:07,280 --> 00:40:10,640
now suddenly sandboxed

1035
00:40:10,640 --> 00:40:11,920
the other

1036
00:40:11,920 --> 00:40:14,160
services were not and could just work

1037
00:40:14,160 --> 00:40:16,640
normally

1038
00:40:17,680 --> 00:40:18,960
so

1039
00:40:18,960 --> 00:40:20,560
the way this works is that

1040
00:40:20,560 --> 00:40:21,680
those

1041
00:40:21,680 --> 00:40:23,599
apple installed system

1042
00:40:23,599 --> 00:40:26,720
preferences panels are those services

1043
00:40:26,720 --> 00:40:29,200
the separation of services

1044
00:40:29,200 --> 00:40:29,920
but

1045
00:40:29,920 --> 00:40:32,160
third parties can also install new

1046
00:40:32,160 --> 00:40:35,760
plugins for system preferences

1047
00:40:35,760 --> 00:40:37,920
and those are bundles which is quite

1048
00:40:37,920 --> 00:40:39,200
different from the

1049
00:40:39,200 --> 00:40:40,880
xbc services

1050
00:40:40,880 --> 00:40:42,400
because it's basically just a plug-in

1051
00:40:42,400 --> 00:40:44,560
that can be loaded

1052
00:40:44,560 --> 00:40:46,720
now this was a fun trick but it's no

1053
00:40:46,720 --> 00:40:48,880
sandbox escape yet

1054
00:40:48,880 --> 00:40:50,880
but

1055
00:40:50,880 --> 00:40:52,640
i noticed something

1056
00:40:52,640 --> 00:40:54,640
that was being created into the

1057
00:40:54,640 --> 00:40:58,079
container folder of the application

1058
00:40:58,079 --> 00:41:00,079
there are some cache files left over by

1059
00:41:00,079 --> 00:41:01,920
system preferences

1060
00:41:01,920 --> 00:41:04,400
including one that's so called the

1061
00:41:04,400 --> 00:41:06,319
user cache

1062
00:41:06,319 --> 00:41:07,920
and this is a list of all of the

1063
00:41:07,920 --> 00:41:10,319
third-party system preferences plugins

1064
00:41:10,319 --> 00:41:12,720
that were installed

1065
00:41:12,720 --> 00:41:14,640
and it was created within the container

1066
00:41:14,640 --> 00:41:16,319
of my application

1067
00:41:16,319 --> 00:41:18,240
which meant that i could also manipulate

1068
00:41:18,240 --> 00:41:19,280
it

1069
00:41:19,280 --> 00:41:21,280
modify it or create some new content and

1070
00:41:21,280 --> 00:41:23,920
then launch system preferences

1071
00:41:23,920 --> 00:41:26,240
so the reason this file exists is to

1072
00:41:26,240 --> 00:41:27,280
make

1073
00:41:27,280 --> 00:41:29,440
so it doesn't need to index all of your

1074
00:41:29,440 --> 00:41:32,640
plugins every time you launch it

1075
00:41:32,640 --> 00:41:34,560
but if i create this file

1076
00:41:34,560 --> 00:41:36,960
then i can inject my own new

1077
00:41:36,960 --> 00:41:39,200
system preferences plugin and then when

1078
00:41:39,200 --> 00:41:41,119
it launches it will think there's a new

1079
00:41:41,119 --> 00:41:44,319
plugin namely my application

1080
00:41:44,319 --> 00:41:45,760
or my

1081
00:41:45,760 --> 00:41:47,680
bundle

1082
00:41:47,680 --> 00:41:51,200
but then i still needed to activate it i

1083
00:41:51,200 --> 00:41:52,720
didn't want to wait for the user to

1084
00:41:52,720 --> 00:41:54,640
click on it

1085
00:41:54,640 --> 00:41:57,440
so i needed one more step

1086
00:41:57,440 --> 00:41:59,520
so there's a url handler you can use to

1087
00:41:59,520 --> 00:42:02,000
open certain system preferences panes

1088
00:42:02,000 --> 00:42:04,319
but it didn't work for those third-party

1089
00:42:04,319 --> 00:42:06,960
preference panes

1090
00:42:06,960 --> 00:42:09,200
but there was something else i could use

1091
00:42:09,200 --> 00:42:10,800
you can add an alert to system

1092
00:42:10,800 --> 00:42:13,359
preferences

1093
00:42:13,359 --> 00:42:15,680
and whenever a new alert is added then

1094
00:42:15,680 --> 00:42:18,000
the next time you open the application

1095
00:42:18,000 --> 00:42:20,240
it will automatically open the

1096
00:42:20,240 --> 00:42:24,079
preference pane that added that alert

1097
00:42:24,079 --> 00:42:25,119
so

1098
00:42:25,119 --> 00:42:26,960
i could do that from a third party

1099
00:42:26,960 --> 00:42:28,880
preference pane

1100
00:42:28,880 --> 00:42:31,760
so basically the attack is as follows

1101
00:42:31,760 --> 00:42:34,319
i create a new cache file that says that

1102
00:42:34,319 --> 00:42:37,440
there's a new bundle as a new plugin

1103
00:42:37,440 --> 00:42:39,599
i add an alert for it

1104
00:42:39,599 --> 00:42:41,359
and then i start system preferences

1105
00:42:41,359 --> 00:42:43,680
within the same sandbox which means that

1106
00:42:43,680 --> 00:42:46,400
it loads that plugin into something else

1107
00:42:46,400 --> 00:42:49,040
into an instant boxed application

1108
00:42:49,040 --> 00:42:50,640
and then therefore my code is really

1109
00:42:50,640 --> 00:42:52,640
insane boxed

1110
00:42:52,640 --> 00:42:55,680
we also have a video of

1111
00:42:56,839 --> 00:42:59,920
that first it demonstrates that the

1112
00:42:59,920 --> 00:43:03,440
process really is sandboxed

1113
00:43:07,200 --> 00:43:09,280
now open system preferences but it was

1114
00:43:09,280 --> 00:43:10,480
really quick

1115
00:43:10,480 --> 00:43:12,319
it immediately exited and opened the

1116
00:43:12,319 --> 00:43:14,160
calculator to demonstrate that we can

1117
00:43:14,160 --> 00:43:16,840
execute arbitrary code

1118
00:43:16,840 --> 00:43:21,680
[Applause]

1119
00:43:21,680 --> 00:43:23,760
and the pixel's really simple

1120
00:43:23,760 --> 00:43:25,920
they just check if it's sandbox and if

1121
00:43:25,920 --> 00:43:27,920
it is then it quits immediately it's

1122
00:43:27,920 --> 00:43:30,400
just probably just three lines of code

1123
00:43:30,400 --> 00:43:33,200
or something like that

1124
00:43:34,160 --> 00:43:36,560
now the next part is a bit

1125
00:43:36,560 --> 00:43:38,160
[Music]

1126
00:43:38,160 --> 00:43:39,520
i have to keep it vague because the

1127
00:43:39,520 --> 00:43:41,440
vulnerabilities are not all

1128
00:43:41,440 --> 00:43:44,000
fixed by apple and they're still working

1129
00:43:44,000 --> 00:43:45,359
on the fixes

1130
00:43:45,359 --> 00:43:47,920
it should get fixed with fentura but i'm

1131
00:43:47,920 --> 00:43:51,359
not completely sure of that yet

1132
00:43:52,240 --> 00:43:53,920
but what i want to talk about is some

1133
00:43:53,920 --> 00:43:56,240
generic process injection technique that

1134
00:43:56,240 --> 00:43:58,000
suppose you have vulnerabilities like

1135
00:43:58,000 --> 00:44:00,240
that

1136
00:44:00,319 --> 00:44:04,160
so process injection is basically

1137
00:44:04,160 --> 00:44:06,800
the way that one application can execute

1138
00:44:06,800 --> 00:44:09,760
its code as if it is another application

1139
00:44:09,760 --> 00:44:11,760
so it can be shown that you can use that

1140
00:44:11,760 --> 00:44:13,359
to communicate with the privileged

1141
00:44:13,359 --> 00:44:15,599
helper tool if you can inject into that

1142
00:44:15,599 --> 00:44:16,960
application

1143
00:44:16,960 --> 00:44:19,280
you can abuse the tcc permission like an

1144
00:44:19,280 --> 00:44:22,160
electron application

1145
00:44:22,160 --> 00:44:24,000
but we wanted to investigate what can

1146
00:44:24,000 --> 00:44:25,920
you do if you have a generic technique

1147
00:44:25,920 --> 00:44:28,160
and you can inject it to any application

1148
00:44:28,160 --> 00:44:30,879
even apples

1149
00:44:31,599 --> 00:44:33,119
and we found some

1150
00:44:33,119 --> 00:44:34,960
neat tricks to use that to escape the

1151
00:44:34,960 --> 00:44:38,160
sandbox elevate privileges to roots and

1152
00:44:38,160 --> 00:44:42,560
bypass the zip file system restrictions

1153
00:44:42,960 --> 00:44:45,520
sandbox escape is a bit boring because

1154
00:44:45,520 --> 00:44:47,520
if you're sandboxed and you can inject

1155
00:44:47,520 --> 00:44:49,839
into a non-sandbox application yeah then

1156
00:44:49,839 --> 00:44:53,760
you have escaped the sandbox already

1157
00:44:53,760 --> 00:44:56,079
so i can't really disclose much more

1158
00:44:56,079 --> 00:44:58,000
about those details but hopefully we can

1159
00:44:58,000 --> 00:45:01,520
publish more about this soon

1160
00:45:01,520 --> 00:45:03,280
but privileged escalation we can talk a

1161
00:45:03,280 --> 00:45:05,280
bit more about that

1162
00:45:05,280 --> 00:45:07,440
there are certain applications that have

1163
00:45:07,440 --> 00:45:09,839
entitlements

1164
00:45:09,839 --> 00:45:13,280
for the authorization services

1165
00:45:13,280 --> 00:45:14,880
which can include

1166
00:45:14,880 --> 00:45:17,040
the permission to install apple's

1167
00:45:17,040 --> 00:45:19,200
software which basically means that they

1168
00:45:19,200 --> 00:45:22,640
can store epi packages signed by apple

1169
00:45:22,640 --> 00:45:24,720
without the user effort having to enter

1170
00:45:24,720 --> 00:45:26,480
their password so as long as it's signed

1171
00:45:26,480 --> 00:45:28,480
by apple they can silently install a new

1172
00:45:28,480 --> 00:45:29,839
package

1173
00:45:29,839 --> 00:45:31,839
this is used for example by boot camp

1174
00:45:31,839 --> 00:45:33,680
assistant or install command line

1175
00:45:33,680 --> 00:45:36,480
developer tools

1176
00:45:36,560 --> 00:45:38,640
and there's also a nice nice package we

1177
00:45:38,640 --> 00:45:42,799
can use that was found by elias morat

1178
00:45:43,119 --> 00:45:47,440
this package if you install it

1179
00:45:47,440 --> 00:45:48,880
to a disk

1180
00:45:48,880 --> 00:45:51,680
then in its post install script so after

1181
00:45:51,680 --> 00:45:54,560
it has performed the installation

1182
00:45:54,560 --> 00:45:57,040
it will run a script from the disk you

1183
00:45:57,040 --> 00:45:59,440
installed it to

1184
00:45:59,440 --> 00:46:01,440
so it checks if a certain file exists

1185
00:46:01,440 --> 00:46:03,359
and then it runs it

1186
00:46:03,359 --> 00:46:05,440
but it doesn't actually check that the

1187
00:46:05,440 --> 00:46:08,319
disk you install it on is a mac os

1188
00:46:08,319 --> 00:46:09,280
disk

1189
00:46:09,280 --> 00:46:10,880
so you can just install it to a disk

1190
00:46:10,880 --> 00:46:13,200
image or a rom disk and then create a

1191
00:46:13,200 --> 00:46:14,720
shell script there and then it will

1192
00:46:14,720 --> 00:46:18,000
execute that as root

1193
00:46:18,319 --> 00:46:20,880
so this is a way you can use this to

1194
00:46:20,880 --> 00:46:22,880
take one entitlement and then use that

1195
00:46:22,880 --> 00:46:26,160
for privilege escalation

1196
00:46:26,880 --> 00:46:30,800
and finally we found a application

1197
00:46:30,800 --> 00:46:33,200
macros update assistant

1198
00:46:33,200 --> 00:46:35,200
we found this in the beta installation

1199
00:46:35,200 --> 00:46:36,880
disk image

1200
00:46:36,880 --> 00:46:40,319
and this has a very powerful entitlement

1201
00:46:40,319 --> 00:46:42,319
this basically means it can access every

1202
00:46:42,319 --> 00:46:44,400
zip protected file

1203
00:46:44,400 --> 00:46:46,720
and it's also heritable so any process

1204
00:46:46,720 --> 00:46:49,200
it spawns can also do that which is easy

1205
00:46:49,200 --> 00:46:51,119
for us because we can just spawn the

1206
00:46:51,119 --> 00:46:53,280
shell

1207
00:46:53,280 --> 00:46:55,839
and this application can then be used to

1208
00:46:55,839 --> 00:46:57,040
uh

1209
00:46:57,040 --> 00:47:00,160
yeah right to any sip protected location

1210
00:47:00,160 --> 00:47:01,520
and hopefully the

1211
00:47:01,520 --> 00:47:02,960
restrictions that dan mentioned for

1212
00:47:02,960 --> 00:47:05,119
ventura about

1213
00:47:05,119 --> 00:47:06,640
processes being run in a different

1214
00:47:06,640 --> 00:47:10,079
environment should prevent this as well

1215
00:47:10,079 --> 00:47:13,520
we have a quick video of that

1216
00:47:14,160 --> 00:47:16,800
i hope this is readable

1217
00:47:16,800 --> 00:47:18,640
so it first demonstrates that it's

1218
00:47:18,640 --> 00:47:21,280
sandbox's application

1219
00:47:21,280 --> 00:47:23,760
and then the first step will escape its

1220
00:47:23,760 --> 00:47:24,880
sandbox

1221
00:47:24,880 --> 00:47:27,200
elevates privileges which is a bit

1222
00:47:27,200 --> 00:47:29,280
slower because of all of the disk image

1223
00:47:29,280 --> 00:47:31,599
stuff

1224
00:47:33,200 --> 00:47:35,520
and then the next step is the zip bypass

1225
00:47:35,520 --> 00:47:37,040
as you can see it has spawned the root

1226
00:47:37,040 --> 00:47:40,240
shell not just a root shell but we also

1227
00:47:40,240 --> 00:47:41,760
demonstrate that we can write to the

1228
00:47:41,760 --> 00:47:45,040
system policy configuration directory

1229
00:47:45,040 --> 00:47:46,559
and this directory is

1230
00:47:46,559 --> 00:47:48,400
a

1231
00:47:48,400 --> 00:47:50,480
directory protected by sip

1232
00:47:50,480 --> 00:47:52,319
and this directory is used to keep track

1233
00:47:52,319 --> 00:47:54,160
of the kernel extensions that you have

1234
00:47:54,160 --> 00:47:55,359
approved

1235
00:47:55,359 --> 00:47:58,000
so if you modify that

1236
00:47:58,000 --> 00:48:00,079
one of these files then we can load a

1237
00:48:00,079 --> 00:48:02,720
kernel extension without user approval

1238
00:48:02,720 --> 00:48:04,480
so combine this with a vulnerable color

1239
00:48:04,480 --> 00:48:06,000
extension and you have color code

1240
00:48:06,000 --> 00:48:08,640
execution and it's all of this

1241
00:48:08,640 --> 00:48:10,079
with basically just one type of

1242
00:48:10,079 --> 00:48:12,559
vulnerability

1243
00:48:12,559 --> 00:48:15,119
now very quickly because i'm a bit low

1244
00:48:15,119 --> 00:48:17,359
on time

1245
00:48:17,359 --> 00:48:18,839
our thoughts on this

1246
00:48:18,839 --> 00:48:23,119
so tcc is an interesting idea but

1247
00:48:23,119 --> 00:48:24,559
it's still pretty new and many

1248
00:48:24,559 --> 00:48:26,480
third-party developers are not aware of

1249
00:48:26,480 --> 00:48:28,079
it

1250
00:48:28,079 --> 00:48:30,000
so many applications are vulnerable

1251
00:48:30,000 --> 00:48:32,000
which makes it easy to boost abuses

1252
00:48:32,000 --> 00:48:35,000
permissions

1253
00:48:35,040 --> 00:48:37,920
sandboxing is very powerful

1254
00:48:37,920 --> 00:48:40,240
but there are also very weird xk edge

1255
00:48:40,240 --> 00:48:42,079
cases that are not being looked at

1256
00:48:42,079 --> 00:48:43,520
because many people look at ios

1257
00:48:43,520 --> 00:48:45,839
sandboxing so the lower kernel level

1258
00:48:45,839 --> 00:48:49,119
stuff is being looked at often

1259
00:48:49,119 --> 00:48:50,480
the higher level stuff like taking

1260
00:48:50,480 --> 00:48:52,000
screenshots of

1261
00:48:52,000 --> 00:48:53,520
open open

1262
00:48:53,520 --> 00:48:57,520
panels is not being looked at as much

1263
00:48:58,800 --> 00:49:00,480
finally

1264
00:49:00,480 --> 00:49:03,119
process injection is a

1265
00:49:03,119 --> 00:49:05,520
interesting technique and as far as i

1266
00:49:05,520 --> 00:49:06,800
know

1267
00:49:06,800 --> 00:49:08,079
um

1268
00:49:08,079 --> 00:49:09,920
a similar security boundary between

1269
00:49:09,920 --> 00:49:11,920
processes doesn't exist on winix or

1270
00:49:11,920 --> 00:49:13,280
linux

1271
00:49:13,280 --> 00:49:14,880
as far as i know we're not very

1272
00:49:14,880 --> 00:49:17,839
specialized in that

1273
00:49:17,920 --> 00:49:19,200
so

1274
00:49:19,200 --> 00:49:20,720
these types of vulnerabilities don't

1275
00:49:20,720 --> 00:49:22,720
really apply there which basically means

1276
00:49:22,720 --> 00:49:25,040
that the fact that they don't work well

1277
00:49:25,040 --> 00:49:27,119
doesn't make it less secure

1278
00:49:27,119 --> 00:49:28,800
yet on the other hand

1279
00:49:28,800 --> 00:49:30,640
what we also showed at the end is that

1280
00:49:30,640 --> 00:49:32,400
those process injection vulnerabilities

1281
00:49:32,400 --> 00:49:34,960
can now have a very large impact

1282
00:49:34,960 --> 00:49:36,640
because you can use the same technique

1283
00:49:36,640 --> 00:49:37,520
for

1284
00:49:37,520 --> 00:49:39,280
escaping the sandbox privilege

1285
00:49:39,280 --> 00:49:42,400
escalation and bypassing sip

1286
00:49:42,400 --> 00:49:43,200
so

1287
00:49:43,200 --> 00:49:45,839
thank you i think we are out of time but

1288
00:49:45,839 --> 00:49:48,160
if you have any questions then yeah feel

1289
00:49:48,160 --> 00:49:50,480
free to visit us at our tent

1290
00:49:50,480 --> 00:49:51,440
and

1291
00:49:51,440 --> 00:49:54,020
yeah thank you guys

1292
00:49:54,020 --> 00:49:57,400
[Applause]

1293
00:50:04,480 --> 00:50:05,920
just just one thing we have some

1294
00:50:05,920 --> 00:50:07,280
write-ups about a couple of these

1295
00:50:07,280 --> 00:50:09,359
vulnerabilities on our blog and some

1296
00:50:09,359 --> 00:50:11,119
other cool stuff like

1297
00:50:11,119 --> 00:50:12,800
the things we talked about yesterday and

1298
00:50:12,800 --> 00:50:14,640
the day before so check it out if you

1299
00:50:14,640 --> 00:50:16,720
want to read more and this is the link

1300
00:50:16,720 --> 00:50:19,760
to rick right definitely definitely

1301
00:50:19,760 --> 00:50:21,680
i'm gonna switch back to windows

1302
00:50:21,680 --> 00:50:23,920
we can take one or two questions if

1303
00:50:23,920 --> 00:50:25,440
people are interested in asking a

1304
00:50:25,440 --> 00:50:27,839
question

1305
00:50:29,280 --> 00:50:30,960
i have so many questions but i will be

1306
00:50:30,960 --> 00:50:33,119
in your tent tonight

1307
00:50:33,119 --> 00:50:36,160
let's give a final applause for dan and

1308
00:50:36,160 --> 00:50:38,240
thank you

1309
00:50:38,240 --> 00:50:40,079
guys

1310
00:50:40,079 --> 00:50:43,559
thank you very much

