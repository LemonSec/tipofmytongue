1
00:00:01,280 --> 00:00:12,559
[Music]

2
00:00:15,519 --> 00:00:17,680
so the next talk is called reproducible

3
00:00:17,680 --> 00:00:20,080
builds for trustworthy binaries helping

4
00:00:20,080 --> 00:00:22,080
detect vulnerabilities being injected in

5
00:00:22,080 --> 00:00:24,000
the build process rebuff will tell you

6
00:00:24,000 --> 00:00:25,680
about it please give him a round of

7
00:00:25,680 --> 00:00:28,680
applause

8
00:00:30,210 --> 00:00:32,000
[Applause]

9
00:00:32,000 --> 00:00:33,360
thanks very much

10
00:00:33,360 --> 00:00:34,480
yeah i would like to take the

11
00:00:34,480 --> 00:00:35,920
opportunity to tell you a little bit

12
00:00:35,920 --> 00:00:37,920
about reproducible builds which i am a

13
00:00:37,920 --> 00:00:39,840
huge fan of

14
00:00:39,840 --> 00:00:42,399
but before we get into what reproducible

15
00:00:42,399 --> 00:00:43,680
builds are

16
00:00:43,680 --> 00:00:45,360
maybe let's first talk about who they

17
00:00:45,360 --> 00:00:47,120
are for

18
00:00:47,120 --> 00:00:49,600
and and i would say reproducible builds

19
00:00:49,600 --> 00:00:52,079
are both for developers and for users

20
00:00:52,079 --> 00:00:54,079
and i'm using these terms like in the

21
00:00:54,079 --> 00:00:56,960
loosest way possible so a developer is

22
00:00:56,960 --> 00:00:59,039
any person or group who

23
00:00:59,039 --> 00:01:01,520
builds something and then distributes

24
00:01:01,520 --> 00:01:03,359
binary somewhere

25
00:01:03,359 --> 00:01:05,600
and the user is anybody who gets a

26
00:01:05,600 --> 00:01:07,760
binary from somewhere and wants to run

27
00:01:07,760 --> 00:01:09,920
it

28
00:01:10,640 --> 00:01:12,720
so i will talk take the developer

29
00:01:12,720 --> 00:01:14,560
perspective first and i will return to

30
00:01:14,560 --> 00:01:16,960
the user perspective later

31
00:01:16,960 --> 00:01:18,640
and the goal from the developer

32
00:01:18,640 --> 00:01:20,240
perspective is

33
00:01:20,240 --> 00:01:22,240
that you want your users to

34
00:01:22,240 --> 00:01:24,240
use the binary and you want the binary

35
00:01:24,240 --> 00:01:25,280
to

36
00:01:25,280 --> 00:01:27,600
do what you intended it to do

37
00:01:27,600 --> 00:01:30,400
and so you wrote some code

38
00:01:30,400 --> 00:01:31,920
and then

39
00:01:31,920 --> 00:01:33,920
you hope that the binary that the user

40
00:01:33,920 --> 00:01:35,840
runs corresponds that to the code that

41
00:01:35,840 --> 00:01:38,000
you wrote

42
00:01:38,000 --> 00:01:40,479
and so reproducible builds isn't a

43
00:01:40,479 --> 00:01:43,200
specific technology or tool it's more

44
00:01:43,200 --> 00:01:45,439
like a technique so something that you

45
00:01:45,439 --> 00:01:47,759
can apply to all kinds of different

46
00:01:47,759 --> 00:01:49,280
ecosystems

47
00:01:49,280 --> 00:01:52,159
and we will look at a couple

48
00:01:52,159 --> 00:01:54,880
so you might say why is this not obvious

49
00:01:54,880 --> 00:01:57,360
like i'm a developer i built the thing i

50
00:01:57,360 --> 00:01:59,680
package it up we know how to sign things

51
00:01:59,680 --> 00:02:01,439
and ship things to the internet and

52
00:02:01,439 --> 00:02:04,880
users know how to eject signatures

53
00:02:04,880 --> 00:02:06,880
so what's the problem

54
00:02:06,880 --> 00:02:09,199
so the problem is the build step so so

55
00:02:09,199 --> 00:02:11,440
this is the super simplified version of

56
00:02:11,440 --> 00:02:14,239
this software supply chain right

57
00:02:14,239 --> 00:02:15,440
and

58
00:02:15,440 --> 00:02:17,599
and what reproducible help builds helps

59
00:02:17,599 --> 00:02:19,360
you with is

60
00:02:19,360 --> 00:02:21,280
checking that no foul play happened in

61
00:02:21,280 --> 00:02:22,720
the build step

62
00:02:22,720 --> 00:02:24,480
so the build steps

63
00:02:24,480 --> 00:02:26,160
could be happening on the developers

64
00:02:26,160 --> 00:02:28,080
machine or it could be held

65
00:02:28,080 --> 00:02:30,560
happening on some ci system

66
00:02:30,560 --> 00:02:32,720
and as we all know because we are at the

67
00:02:32,720 --> 00:02:33,840
hacker camp

68
00:02:33,840 --> 00:02:35,840
machines can get hacked

69
00:02:35,840 --> 00:02:37,840
so if that machine is hacked

70
00:02:37,840 --> 00:02:40,080
whoever has control over the machine

71
00:02:40,080 --> 00:02:42,160
could inject some malware into the

72
00:02:42,160 --> 00:02:45,040
binary at that point

73
00:02:45,040 --> 00:02:46,800
and because at the build step is where

74
00:02:46,800 --> 00:02:48,879
you sign the binary you will sign it

75
00:02:48,879 --> 00:02:51,599
with malware included so signatures

76
00:02:51,599 --> 00:02:55,440
don't help for for that purpose

77
00:02:56,080 --> 00:02:58,319
um

78
00:02:58,800 --> 00:03:01,599
so okay it of course the

79
00:03:01,599 --> 00:03:04,400
pipeline in reality is not so simple

80
00:03:04,400 --> 00:03:05,519
we

81
00:03:05,519 --> 00:03:07,120
as an input to the build there's not

82
00:03:07,120 --> 00:03:09,680
only the code itself but it's also the

83
00:03:09,680 --> 00:03:11,519
libraries that the code depend on and

84
00:03:11,519 --> 00:03:13,440
also the plugins you have for your build

85
00:03:13,440 --> 00:03:16,000
system for example so in reproducible

86
00:03:16,000 --> 00:03:18,319
builds we all assume that that is all

87
00:03:18,319 --> 00:03:20,319
right so we assume the goat has no

88
00:03:20,319 --> 00:03:22,560
malicious stuff in it and we assume we

89
00:03:22,560 --> 00:03:24,560
assume all the uh the

90
00:03:24,560 --> 00:03:26,480
dependencies of the build

91
00:03:26,480 --> 00:03:28,720
are also okay

92
00:03:28,720 --> 00:03:30,560
so here's there's a bit of a chicken and

93
00:03:30,560 --> 00:03:33,200
egg thing or turtles all the way down

94
00:03:33,200 --> 00:03:35,599
and at some point you want to check that

95
00:03:35,599 --> 00:03:36,400
those

96
00:03:36,400 --> 00:03:38,400
libraries and build those you're using

97
00:03:38,400 --> 00:03:40,879
are also malware free and that's outside

98
00:03:40,879 --> 00:03:42,400
of the scope of reproducible builds

99
00:03:42,400 --> 00:03:44,400
itself but it's also something you want

100
00:03:44,400 --> 00:03:46,879
to do

101
00:03:46,879 --> 00:03:49,519
so the core idea of reproducible builds

102
00:03:49,519 --> 00:03:51,519
ah so does this actually happen you

103
00:03:51,519 --> 00:03:54,000
might ask like this sounds like a really

104
00:03:54,000 --> 00:03:56,720
niche things hackers putting things into

105
00:03:56,720 --> 00:03:58,879
your build process

106
00:03:58,879 --> 00:04:01,280
but actually i think this this is a an

107
00:04:01,280 --> 00:04:03,599
increasingly um

108
00:04:03,599 --> 00:04:05,120
um

109
00:04:05,120 --> 00:04:07,680
sensitive part of the uh

110
00:04:07,680 --> 00:04:09,680
supply chain supply chain software

111
00:04:09,680 --> 00:04:13,280
supply chain so in this example uh

112
00:04:13,280 --> 00:04:16,079
from a while ago at the 2018

113
00:04:16,079 --> 00:04:18,399
someone hacked the jenkins machines from

114
00:04:18,399 --> 00:04:21,680
which uh homebrew was being built

115
00:04:21,680 --> 00:04:23,840
and in this case they then

116
00:04:23,840 --> 00:04:25,360
when they were on the machine they stole

117
00:04:25,360 --> 00:04:27,680
the credentials but you could very well

118
00:04:27,680 --> 00:04:29,040
imagine that

119
00:04:29,040 --> 00:04:30,320
once you have

120
00:04:30,320 --> 00:04:32,800
access to the jenkins machine yeah it's

121
00:04:32,800 --> 00:04:34,960
relatively easy to

122
00:04:34,960 --> 00:04:36,560
make changes to the build process and

123
00:04:36,560 --> 00:04:38,880
inject now you're there

124
00:04:38,880 --> 00:04:40,800
and it's easy to imagine that those

125
00:04:40,800 --> 00:04:43,120
kinds of machines get hacked because

126
00:04:43,120 --> 00:04:46,160
nobody really likes ci right

127
00:04:46,160 --> 00:04:48,479
or actually i really love ci i love that

128
00:04:48,479 --> 00:04:51,040
it's there but nobody likes

129
00:04:51,040 --> 00:04:53,919
managing and updating those systems and

130
00:04:53,919 --> 00:04:55,440
keeping them

131
00:04:55,440 --> 00:04:58,000
safe it's not a fun part of the

132
00:04:58,000 --> 00:04:59,919
development process and especially if

133
00:04:59,919 --> 00:05:02,000
you're in a team

134
00:05:02,000 --> 00:05:04,880
you can definitely imagine a horse

135
00:05:04,880 --> 00:05:06,639
falling through there

136
00:05:06,639 --> 00:05:07,919
and

137
00:05:07,919 --> 00:05:09,919
so because we cannot be perfect what do

138
00:05:09,919 --> 00:05:12,080
we do to mitigate the problem and that

139
00:05:12,080 --> 00:05:15,199
that's where reproducible builds come in

140
00:05:15,199 --> 00:05:17,520
and so the core ideas for reproducible

141
00:05:17,520 --> 00:05:19,440
builds is that instead of building it

142
00:05:19,440 --> 00:05:21,280
once and shipping it

143
00:05:21,280 --> 00:05:24,000
you build the same code twice

144
00:05:24,000 --> 00:05:26,479
and and the idea is that those two

145
00:05:26,479 --> 00:05:28,479
builds are as independent of each other

146
00:05:28,479 --> 00:05:29,759
as possible

147
00:05:29,759 --> 00:05:32,479
and so ideally they are all machines who

148
00:05:32,479 --> 00:05:34,639
are managed by different people or at

149
00:05:34,639 --> 00:05:36,800
least different credentials and maybe

150
00:05:36,800 --> 00:05:38,560
they can

151
00:05:38,560 --> 00:05:40,639
have a different operating system even

152
00:05:40,639 --> 00:05:42,080
depending on

153
00:05:42,080 --> 00:05:44,320
what kind of thing you're building

154
00:05:44,320 --> 00:05:46,479
and and then the second build

155
00:05:46,479 --> 00:05:48,000
it doesn't need to ship the entire

156
00:05:48,000 --> 00:05:50,800
binary but it could also ship an at the

157
00:05:50,800 --> 00:05:53,039
station that says okay i built this and

158
00:05:53,039 --> 00:05:54,800
the hash of the resulting binary is

159
00:05:54,800 --> 00:05:57,039
something like this

160
00:05:57,039 --> 00:05:58,720
now why would you do this

161
00:05:58,720 --> 00:06:01,120
if you have done this and at the end of

162
00:06:01,120 --> 00:06:03,440
the story as a user you check that what

163
00:06:03,440 --> 00:06:04,720
was shipped

164
00:06:04,720 --> 00:06:06,400
is exactly the same

165
00:06:06,400 --> 00:06:08,400
as the thing that came out of the other

166
00:06:08,400 --> 00:06:10,800
build process then you can be a lot more

167
00:06:10,800 --> 00:06:12,960
confident that no malware was

168
00:06:12,960 --> 00:06:14,560
injected

169
00:06:14,560 --> 00:06:16,880
because if they're exactly the same

170
00:06:16,880 --> 00:06:18,639
if any malware was

171
00:06:18,639 --> 00:06:20,800
injected then it would must have been

172
00:06:20,800 --> 00:06:23,840
injected in both the build processes

173
00:06:23,840 --> 00:06:25,600
and because those build processes are

174
00:06:25,600 --> 00:06:27,680
completely independent the chance of

175
00:06:27,680 --> 00:06:30,319
those two build processes being

176
00:06:30,319 --> 00:06:33,280
both being hacked is a lot smaller

177
00:06:33,280 --> 00:06:36,080
makes sense so far

178
00:06:38,080 --> 00:06:40,479
so and that's actually also where the

179
00:06:40,479 --> 00:06:43,199
logo uh comes from so basically the top

180
00:06:43,199 --> 00:06:45,360
dot represents the codes

181
00:06:45,360 --> 00:06:47,120
which is a

182
00:06:47,120 --> 00:06:48,560
single unit

183
00:06:48,560 --> 00:06:51,120
then the two bil dots at the middle are

184
00:06:51,120 --> 00:06:53,039
the build steps are the two independent

185
00:06:53,039 --> 00:06:55,120
machines who built the code

186
00:06:55,120 --> 00:06:57,120
and then hopefully they arrive at

187
00:06:57,120 --> 00:06:59,680
exactly the same dot at the bottom

188
00:06:59,680 --> 00:07:01,520
so that's pretty good

189
00:07:01,520 --> 00:07:03,759
and this is a little bit different from

190
00:07:03,759 --> 00:07:04,800
other

191
00:07:04,800 --> 00:07:06,720
other uses of the words reproducible

192
00:07:06,720 --> 00:07:07,759
builds

193
00:07:07,759 --> 00:07:09,520
and so in in the case of the

194
00:07:09,520 --> 00:07:11,120
reproducible builds projects we're

195
00:07:11,120 --> 00:07:13,440
really talking about the end result is

196
00:07:13,440 --> 00:07:16,160
bit by bit the same

197
00:07:16,160 --> 00:07:17,599
in some other context you might see

198
00:07:17,599 --> 00:07:19,440
reproducible builds in just it was

199
00:07:19,440 --> 00:07:21,440
possible for me to build this code again

200
00:07:21,440 --> 00:07:24,479
which is also very useful uh useful

201
00:07:24,479 --> 00:07:27,199
but in in reproducible builds

202
00:07:27,199 --> 00:07:29,039
uh the reproducible builds project we

203
00:07:29,039 --> 00:07:32,160
mean we and end up with exactly the same

204
00:07:32,160 --> 00:07:33,120
thing

205
00:07:33,120 --> 00:07:35,199
and that means

206
00:07:35,199 --> 00:07:36,960
it is easy to check that it's likely

207
00:07:36,960 --> 00:07:39,240
that there's no malware introduced

208
00:07:39,240 --> 00:07:43,520
[Music]

209
00:07:43,520 --> 00:07:45,680
um so one example is a project that i've

210
00:07:45,680 --> 00:07:47,919
been working full-time on for a while

211
00:07:47,919 --> 00:07:49,520
is the aka project

212
00:07:49,520 --> 00:07:51,840
and this is a java project so in the

213
00:07:51,840 --> 00:07:53,840
java ecosystem what you do is you upload

214
00:07:53,840 --> 00:07:55,919
your jars to maven central

215
00:07:55,919 --> 00:07:57,599
so there they are but how do we know

216
00:07:57,599 --> 00:07:59,520
that we haven't shipped any malware in

217
00:07:59,520 --> 00:08:01,599
these jars

218
00:08:01,599 --> 00:08:03,840
well because we did the work to make

219
00:08:03,840 --> 00:08:07,120
sure our belts are reproducible

220
00:08:07,120 --> 00:08:09,599
after a release usually on my laptop i

221
00:08:09,599 --> 00:08:12,000
do the build again and i see if i get

222
00:08:12,000 --> 00:08:14,400
exactly the same hash

223
00:08:14,400 --> 00:08:16,400
and

224
00:08:16,400 --> 00:08:19,759
this turns out in practice this is

225
00:08:19,759 --> 00:08:21,840
definitely possible

226
00:08:21,840 --> 00:08:23,919
and it's really possible to also do it

227
00:08:23,919 --> 00:08:25,759
on pretty diverse machines so we've had

228
00:08:25,759 --> 00:08:27,599
releases where

229
00:08:27,599 --> 00:08:30,960
the locally built one was made on linux

230
00:08:30,960 --> 00:08:32,880
and someone else reproduced exactly the

231
00:08:32,880 --> 00:08:35,679
same binary on a mac os machine

232
00:08:35,679 --> 00:08:37,599
started

233
00:08:37,599 --> 00:08:38,559
and

234
00:08:38,559 --> 00:08:40,799
yeah that makes uh gives us a high

235
00:08:40,799 --> 00:08:42,719
confidence that nothing was injected in

236
00:08:42,719 --> 00:08:45,440
the build process

237
00:08:45,600 --> 00:08:48,080
so then you might may ask yourself okay

238
00:08:48,080 --> 00:08:50,000
but why wouldn't some software be

239
00:08:50,000 --> 00:08:51,600
reproducible

240
00:08:51,600 --> 00:08:55,279
and so so compromised build

241
00:08:55,279 --> 00:08:56,880
build infrastructure is of course one

242
00:08:56,880 --> 00:08:58,959
thing we protected against

243
00:08:58,959 --> 00:09:01,600
but why is this not a trivial problem

244
00:09:01,600 --> 00:09:04,000
well it's not a terrific problem because

245
00:09:04,000 --> 00:09:07,360
um in practice we don't have a habit of

246
00:09:07,360 --> 00:09:08,800
really thinking about all the things

247
00:09:08,800 --> 00:09:11,440
that can be non-deterministic in a build

248
00:09:11,440 --> 00:09:13,120
process

249
00:09:13,120 --> 00:09:15,760
and so i'll give some examples of it

250
00:09:15,760 --> 00:09:18,399
and sometimes it's actually it actually

251
00:09:18,399 --> 00:09:20,320
reveals

252
00:09:20,320 --> 00:09:22,800
some pretty subtle bugs

253
00:09:22,800 --> 00:09:25,200
uh in other cases it's just

254
00:09:25,200 --> 00:09:26,640
random

255
00:09:26,640 --> 00:09:28,959
um things that are non-deterministic

256
00:09:28,959 --> 00:09:32,399
that's just nice to iron out

257
00:09:32,399 --> 00:09:36,080
um so an example of a bug like that is

258
00:09:36,080 --> 00:09:39,440
um there was a project which created a

259
00:09:39,440 --> 00:09:41,519
random seat for every build because it

260
00:09:41,519 --> 00:09:43,839
wanted every uh

261
00:09:43,839 --> 00:09:45,680
every user to have a

262
00:09:45,680 --> 00:09:48,399
different random number

263
00:09:48,399 --> 00:09:50,000
progression

264
00:09:50,000 --> 00:09:52,399
and it accidentally did that in the

265
00:09:52,399 --> 00:09:54,160
while building instead of while

266
00:09:54,160 --> 00:09:56,000
installing

267
00:09:56,000 --> 00:09:58,320
so that was a

268
00:09:58,320 --> 00:10:00,160
kind of significant security problem

269
00:10:00,160 --> 00:10:01,920
because that meant that everyone who

270
00:10:01,920 --> 00:10:04,800
took the same binary would get the same

271
00:10:04,800 --> 00:10:06,480
random numbers

272
00:10:06,480 --> 00:10:08,160
well what you would want is everyone to

273
00:10:08,160 --> 00:10:10,160
get different random numbers because you

274
00:10:10,160 --> 00:10:13,199
want random numbers

275
00:10:16,000 --> 00:10:17,920
so that's an example of a book that you

276
00:10:17,920 --> 00:10:20,399
could find by uh applying reproducible

277
00:10:20,399 --> 00:10:22,640
wheels to your build

278
00:10:22,640 --> 00:10:24,640
other common things you see would be

279
00:10:24,640 --> 00:10:26,800
different build timestamps so if you

280
00:10:26,800 --> 00:10:29,920
have a timestamp in your build that says

281
00:10:29,920 --> 00:10:32,480
okay i built this at this and this time

282
00:10:32,480 --> 00:10:34,160
of course if you build it

283
00:10:34,160 --> 00:10:36,079
at another place again then you get a

284
00:10:36,079 --> 00:10:38,000
different timestamp

285
00:10:38,000 --> 00:10:41,120
a common way to solve this is to use the

286
00:10:41,120 --> 00:10:43,279
instead of using the build time

287
00:10:43,279 --> 00:10:45,760
use the time of the latest commit that

288
00:10:45,760 --> 00:10:48,079
you're building because that's actually

289
00:10:48,079 --> 00:10:49,440
what you want to know you want to know

290
00:10:49,440 --> 00:10:51,519
where this code came from and not at

291
00:10:51,519 --> 00:10:55,040
that mo at what moment that you build it

292
00:10:55,040 --> 00:10:57,360
and a convention on how to do that is to

293
00:10:57,360 --> 00:10:59,440
look at the source date apache

294
00:10:59,440 --> 00:11:01,200
environment variable

295
00:11:01,200 --> 00:11:03,360
so the conventions would be that you put

296
00:11:03,360 --> 00:11:05,120
a reasonable but

297
00:11:05,120 --> 00:11:06,160
static

298
00:11:06,160 --> 00:11:06,880
or

299
00:11:06,880 --> 00:11:08,800
predictable date in there

300
00:11:08,800 --> 00:11:10,959
and that ru tooling would pick that up

301
00:11:10,959 --> 00:11:13,120
and use that date instead of the current

302
00:11:13,120 --> 00:11:15,839
time on the clock

303
00:11:16,000 --> 00:11:18,399
another common thing we see is that file

304
00:11:18,399 --> 00:11:21,839
ordering is different is not consistent

305
00:11:21,839 --> 00:11:24,399
so that's usually easy to solve by just

306
00:11:24,399 --> 00:11:26,399
sorting the list

307
00:11:26,399 --> 00:11:28,160
and there's all kinds of other things

308
00:11:28,160 --> 00:11:30,079
there's like uh

309
00:11:30,079 --> 00:11:32,160
hash implementations that are different

310
00:11:32,160 --> 00:11:33,360
based on

311
00:11:33,360 --> 00:11:35,519
the um

312
00:11:35,519 --> 00:11:37,680
machine you're on the

313
00:11:37,680 --> 00:11:39,120
binaries could be different because

314
00:11:39,120 --> 00:11:41,120
you're on a different locale

315
00:11:41,120 --> 00:11:43,040
in a different time zone

316
00:11:43,040 --> 00:11:45,760
etc etc

317
00:11:45,760 --> 00:11:47,440
and now there's also additional

318
00:11:47,440 --> 00:11:49,200
advantages to having your builds

319
00:11:49,200 --> 00:11:52,079
reducible and so if you have the nice

320
00:11:52,079 --> 00:11:54,079
property that

321
00:11:54,079 --> 00:11:56,079
the same code always results in the same

322
00:11:56,079 --> 00:11:57,600
binary

323
00:11:57,600 --> 00:11:59,200
in some cases

324
00:11:59,200 --> 00:12:02,000
this also makes uh caching much more

325
00:12:02,000 --> 00:12:03,279
efficient

326
00:12:03,279 --> 00:12:05,440
so there are build system uh build

327
00:12:05,440 --> 00:12:07,760
systems such as i think bazel

328
00:12:07,760 --> 00:12:10,399
and which that will see if some code

329
00:12:10,399 --> 00:12:11,920
changed

330
00:12:11,920 --> 00:12:14,639
but leads to the same binary

331
00:12:14,639 --> 00:12:15,920
that will then

332
00:12:15,920 --> 00:12:16,720
not

333
00:12:16,720 --> 00:12:19,360
rebuild any dependencies on that thing

334
00:12:19,360 --> 00:12:21,440
that it could see was the same

335
00:12:21,440 --> 00:12:23,440
and so if you build was not reproducible

336
00:12:23,440 --> 00:12:25,680
it would have a cascade of actually

337
00:12:25,680 --> 00:12:28,000
unnecessary builds

338
00:12:28,000 --> 00:12:29,600
but if your code

339
00:12:29,600 --> 00:12:32,000
builds reproducibly that that whole

340
00:12:32,000 --> 00:12:34,000
subtree does not need to rebuild every

341
00:12:34,000 --> 00:12:38,120
time which is very nice

342
00:12:38,480 --> 00:12:40,639
um okay so

343
00:12:40,639 --> 00:12:43,839
say uh you set yourself the goal okay i

344
00:12:43,839 --> 00:12:46,480
want my bill to be reproducible you

345
00:12:46,480 --> 00:12:48,240
build the same code twice you get a

346
00:12:48,240 --> 00:12:51,440
different binary what do you do

347
00:12:51,440 --> 00:12:54,160
a very useful tool in this case is

348
00:12:54,160 --> 00:12:55,760
default scope

349
00:12:55,760 --> 00:12:57,680
and that's actually a project that came

350
00:12:57,680 --> 00:13:01,600
out of the reproducible builds project

351
00:13:01,600 --> 00:13:03,680
and that's the tool that will show you

352
00:13:03,680 --> 00:13:05,600
give it to two binaries and they'll show

353
00:13:05,600 --> 00:13:07,519
you the differences in those two

354
00:13:07,519 --> 00:13:09,760
binaries like diff

355
00:13:09,760 --> 00:13:12,959
um but it actually knows about a on

356
00:13:12,959 --> 00:13:15,600
of formats so if you're comparing two

357
00:13:15,600 --> 00:13:18,240
zips then it will not say like these

358
00:13:18,240 --> 00:13:20,000
bytes are different than these bytes but

359
00:13:20,000 --> 00:13:22,160
it will actually give you a useful

360
00:13:22,160 --> 00:13:23,440
difference like

361
00:13:23,440 --> 00:13:26,079
okay these timestamps or these orderings

362
00:13:26,079 --> 00:13:28,720
or these files inside the zip have these

363
00:13:28,720 --> 00:13:30,079
differences

364
00:13:30,079 --> 00:13:32,000
which is very helpful in quickly

365
00:13:32,000 --> 00:13:33,200
determining

366
00:13:33,200 --> 00:13:35,120
what is different

367
00:13:35,120 --> 00:13:38,560
between the two binaries

368
00:13:40,079 --> 00:13:42,160
another thing you can use is a build

369
00:13:42,160 --> 00:13:44,880
info file and so that's sort of a

370
00:13:44,880 --> 00:13:46,560
convention in the reproducible builds

371
00:13:46,560 --> 00:13:49,279
world is to not only produce the thing

372
00:13:49,279 --> 00:13:50,560
you're building

373
00:13:50,560 --> 00:13:53,680
but also produce like a separate file in

374
00:13:53,680 --> 00:13:55,760
which you record a lot of information

375
00:13:55,760 --> 00:13:58,800
about the system on which you build

376
00:13:58,800 --> 00:14:01,120
um and there you would typically also

377
00:14:01,120 --> 00:14:03,680
include information that shouldn't

378
00:14:03,680 --> 00:14:04,959
impact the

379
00:14:04,959 --> 00:14:06,560
binary

380
00:14:06,560 --> 00:14:09,680
but might in pathological casual cases

381
00:14:09,680 --> 00:14:11,360
so then if you see in the wild two

382
00:14:11,360 --> 00:14:12,880
binaries that are different that you

383
00:14:12,880 --> 00:14:14,959
didn't expect to be different you could

384
00:14:14,959 --> 00:14:17,600
look at the build info metadata to see

385
00:14:17,600 --> 00:14:18,560
okay

386
00:14:18,560 --> 00:14:20,000
um

387
00:14:20,000 --> 00:14:22,000
this difference is

388
00:14:22,000 --> 00:14:24,160
i see the pattern that

389
00:14:24,160 --> 00:14:26,000
this

390
00:14:26,000 --> 00:14:27,920
it always looks like this on mac os and

391
00:14:27,920 --> 00:14:29,600
looks like this if it's built on linux

392
00:14:29,600 --> 00:14:32,079
for example and then you have

393
00:14:32,079 --> 00:14:34,240
easier

394
00:14:34,240 --> 00:14:37,600
it's easier to know where to look

395
00:14:38,320 --> 00:14:40,079
um

396
00:14:40,079 --> 00:14:43,120
so so i think this these are the main

397
00:14:43,120 --> 00:14:44,240
reasons you would care about

398
00:14:44,240 --> 00:14:46,880
reproducible builds as a developer so

399
00:14:46,880 --> 00:14:49,360
you get more confidence that what you're

400
00:14:49,360 --> 00:14:51,279
sending to your user is actually what

401
00:14:51,279 --> 00:14:53,360
you intended to send to your user which

402
00:14:53,360 --> 00:14:55,120
is nice

403
00:14:55,120 --> 00:14:56,639
and

404
00:14:56,639 --> 00:14:58,720
but it's also of course useful to the

405
00:14:58,720 --> 00:15:01,600
users because they want binaries

406
00:15:01,600 --> 00:15:03,360
without malware

407
00:15:03,360 --> 00:15:04,240
um

408
00:15:04,240 --> 00:15:06,000
but we can go a little bit further than

409
00:15:06,000 --> 00:15:08,480
that actually so we can identify two

410
00:15:08,480 --> 00:15:10,240
types of users

411
00:15:10,240 --> 00:15:12,480
there's users of closed software and

412
00:15:12,480 --> 00:15:14,399
there's users are free and open source

413
00:15:14,399 --> 00:15:15,760
software

414
00:15:15,760 --> 00:15:18,480
so for users of closed software there's

415
00:15:18,480 --> 00:15:20,959
really no way to verify for yourself

416
00:15:20,959 --> 00:15:23,360
that your vendor has used reproducible

417
00:15:23,360 --> 00:15:24,639
builds

418
00:15:24,639 --> 00:15:26,800
best you could do is ask them if they do

419
00:15:26,800 --> 00:15:29,920
it and i i think this is going to get

420
00:15:29,920 --> 00:15:32,320
much more popular in the in the future

421
00:15:32,320 --> 00:15:34,959
so if you look at for example the

422
00:15:34,959 --> 00:15:36,720
uh the salsa

423
00:15:36,720 --> 00:15:38,839
guidelines that

424
00:15:38,839 --> 00:15:41,199
um a group of companies i think

425
00:15:41,199 --> 00:15:43,920
including google are setting up

426
00:15:43,920 --> 00:15:45,839
and they're making reproduce

427
00:15:45,839 --> 00:15:47,920
making recommendations on how to set up

428
00:15:47,920 --> 00:15:49,600
your pipeline

429
00:15:49,600 --> 00:15:51,920
and they have four levels of how mature

430
00:15:51,920 --> 00:15:53,279
you are in that

431
00:15:53,279 --> 00:15:56,000
and if you want to be salsa level four

432
00:15:56,000 --> 00:15:58,560
then you need to do reproducible builds

433
00:15:58,560 --> 00:16:00,800
or just or you have to have a really

434
00:16:00,800 --> 00:16:02,800
good reason not to

435
00:16:02,800 --> 00:16:04,800
and so at some point you might ask your

436
00:16:04,800 --> 00:16:07,279
vendor okay can you promise me that you

437
00:16:07,279 --> 00:16:10,000
are that your maturity in your software

438
00:16:10,000 --> 00:16:12,800
uh supply chain is at least salsa level

439
00:16:12,800 --> 00:16:14,160
four

440
00:16:14,160 --> 00:16:16,320
and to to be able to say yes they would

441
00:16:16,320 --> 00:16:18,240
have to at least look into reproducible

442
00:16:18,240 --> 00:16:21,759
builds with us which is nice like do it

443
00:16:21,759 --> 00:16:22,560
um

444
00:16:22,560 --> 00:16:24,160
but i think where reproducible builds

445
00:16:24,160 --> 00:16:26,399
really shines is on the free and open

446
00:16:26,399 --> 00:16:28,240
source software sides

447
00:16:28,240 --> 00:16:30,639
and because there it's really sort of

448
00:16:30,639 --> 00:16:32,480
super power

449
00:16:32,480 --> 00:16:35,120
and because for the developer okay it's

450
00:16:35,120 --> 00:16:37,839
just a developer who builds the same

451
00:16:37,839 --> 00:16:39,680
thing twice and looks if it's the same

452
00:16:39,680 --> 00:16:40,639
thing

453
00:16:40,639 --> 00:16:43,680
but in the case of open source software

454
00:16:43,680 --> 00:16:45,199
you can also

455
00:16:45,199 --> 00:16:47,600
build the same thing as a user or as a

456
00:16:47,600 --> 00:16:49,360
user community

457
00:16:49,360 --> 00:16:51,199
and

458
00:16:51,199 --> 00:16:53,040
that means if you have audited the

459
00:16:53,040 --> 00:16:54,720
source code you can now also

460
00:16:54,720 --> 00:16:58,880
independently verify that the developer

461
00:16:58,880 --> 00:17:00,800
that no one that

462
00:17:00,800 --> 00:17:02,720
the binary actually corresponds to that

463
00:17:02,720 --> 00:17:04,799
source code

464
00:17:04,799 --> 00:17:06,720
and i think that is that is a huge deal

465
00:17:06,720 --> 00:17:07,839
because that

466
00:17:07,839 --> 00:17:09,599
reduces the attack surface by an

467
00:17:09,599 --> 00:17:12,640
enormous amount

468
00:17:12,640 --> 00:17:15,119
because you can independently verify

469
00:17:15,119 --> 00:17:17,039
that the binaries are okay

470
00:17:17,039 --> 00:17:20,079
and this uh rules out for example

471
00:17:20,079 --> 00:17:21,760
blackmailing

472
00:17:21,760 --> 00:17:24,160
contributors or contributors who have

473
00:17:24,160 --> 00:17:26,000
been away for the project a long time

474
00:17:26,000 --> 00:17:29,120
and their credentials got stolen

475
00:17:29,120 --> 00:17:32,640
or coercion or all these kinds of

476
00:17:32,640 --> 00:17:34,000
attacks

477
00:17:34,000 --> 00:17:35,440
suddenly you don't need to worry about

478
00:17:35,440 --> 00:17:37,280
them at all anymore because you can

479
00:17:37,280 --> 00:17:40,480
independently verify that

480
00:17:40,480 --> 00:17:41,679
the

481
00:17:41,679 --> 00:17:44,880
binary actually corresponds to the codes

482
00:17:44,880 --> 00:17:47,840
so so i i think that is

483
00:17:47,840 --> 00:17:50,480
a huge deal

484
00:17:50,720 --> 00:17:51,520
so

485
00:17:51,520 --> 00:17:52,559
now we come to the point in the

486
00:17:52,559 --> 00:17:54,480
presentation where i have to tell you i

487
00:17:54,480 --> 00:17:55,919
lied a bit

488
00:17:55,919 --> 00:17:58,240
um it's not not just developers and

489
00:17:58,240 --> 00:18:00,480
users who care there's actually another

490
00:18:00,480 --> 00:18:02,240
big group who cares a lot about

491
00:18:02,240 --> 00:18:03,760
reproducible builds and that's

492
00:18:03,760 --> 00:18:06,720
distributions and so linux dispersions

493
00:18:06,720 --> 00:18:08,559
and and other ones

494
00:18:08,559 --> 00:18:10,000
and

495
00:18:10,000 --> 00:18:12,000
these typically sit kind of between

496
00:18:12,000 --> 00:18:14,720
developers and users they often build

497
00:18:14,720 --> 00:18:17,600
the software on behalf of the

498
00:18:17,600 --> 00:18:20,080
developers for the users

499
00:18:20,080 --> 00:18:22,799
and that makes the the distributions

500
00:18:22,799 --> 00:18:25,520
like in the ideal spot to leverage

501
00:18:25,520 --> 00:18:28,480
reproducible builds to verify that the

502
00:18:28,480 --> 00:18:31,039
end result is actually correct

503
00:18:31,039 --> 00:18:33,039
also distributions typically have a lot

504
00:18:33,039 --> 00:18:34,799
of infrastructure and a lot of

505
00:18:34,799 --> 00:18:36,160
contributors

506
00:18:36,160 --> 00:18:38,240
and so it's kind of the perfect use case

507
00:18:38,240 --> 00:18:40,640
where you

508
00:18:41,679 --> 00:18:43,679
properly securing all the infrastructure

509
00:18:43,679 --> 00:18:45,679
is super hard so having the extra

510
00:18:45,679 --> 00:18:47,600
insurance that reproducible bills gives

511
00:18:47,600 --> 00:18:49,120
you is

512
00:18:49,120 --> 00:18:50,640
extremely interesting for uh

513
00:18:50,640 --> 00:18:53,200
distributions

514
00:18:53,200 --> 00:18:54,320
um

515
00:18:54,320 --> 00:18:55,919
so a lot of distributions are really

516
00:18:55,919 --> 00:18:58,640
active indeed in this uh debian has

517
00:18:58,640 --> 00:19:00,480
traditionally been a huge driving factor

518
00:19:00,480 --> 00:19:02,400
of the reproducible builds project in

519
00:19:02,400 --> 00:19:03,520
general

520
00:19:03,520 --> 00:19:05,760
uh they have a bunch of packages that

521
00:19:05,760 --> 00:19:10,000
are already this uh this um

522
00:19:10,000 --> 00:19:11,600
reproducible

523
00:19:11,600 --> 00:19:14,559
uh there's good work going on uh also

524
00:19:14,559 --> 00:19:17,440
making the live images the the isos

525
00:19:17,440 --> 00:19:19,200
reproducible

526
00:19:19,200 --> 00:19:20,480
and

527
00:19:20,480 --> 00:19:22,559
one thing that is that is kind of a

528
00:19:22,559 --> 00:19:25,120
theme is what's missing in the

529
00:19:25,120 --> 00:19:26,720
what's often

530
00:19:26,720 --> 00:19:28,799
missing in the reproducible builds um

531
00:19:28,799 --> 00:19:30,480
ecosystems

532
00:19:30,480 --> 00:19:31,200
is

533
00:19:31,200 --> 00:19:33,440
an easy way for users to do that

534
00:19:33,440 --> 00:19:35,120
verification

535
00:19:35,120 --> 00:19:38,559
um so an easy way for users to

536
00:19:38,559 --> 00:19:40,960
consume at the stations by other users

537
00:19:40,960 --> 00:19:42,160
that they have

538
00:19:42,160 --> 00:19:45,039
successfully reproduced the project

539
00:19:45,039 --> 00:19:46,320
and

540
00:19:46,320 --> 00:19:48,720
that that is definitely

541
00:19:48,720 --> 00:19:51,440
in many cases open research so that

542
00:19:51,440 --> 00:19:53,200
being has a sort of

543
00:19:53,200 --> 00:19:55,039
um

544
00:19:55,039 --> 00:19:58,400
experimental plugin for apt that can

545
00:19:58,400 --> 00:19:59,919
check for produce ability at the

546
00:19:59,919 --> 00:20:03,679
stations but this is definitely not

547
00:20:04,720 --> 00:20:06,320
definitely not something that is in

548
00:20:06,320 --> 00:20:08,880
common use or actually

549
00:20:08,880 --> 00:20:12,000
practically use blue right now

550
00:20:12,000 --> 00:20:14,080
um arch uh

551
00:20:14,080 --> 00:20:16,000
has a bunch more tooling in this

552
00:20:16,000 --> 00:20:18,400
disrespect i think uh but like debian

553
00:20:18,400 --> 00:20:19,760
they're not really there yet there are

554
00:20:19,760 --> 00:20:22,480
some core packages that are still

555
00:20:22,480 --> 00:20:25,200
needs some work

556
00:20:25,360 --> 00:20:27,600
open susie is uh

557
00:20:27,600 --> 00:20:29,360
great at upstreaming work so they're

558
00:20:29,360 --> 00:20:31,679
also very active

559
00:20:31,679 --> 00:20:32,559
uh

560
00:20:32,559 --> 00:20:35,039
nixos is a

561
00:20:35,039 --> 00:20:36,720
linux distribution that i'm personally a

562
00:20:36,720 --> 00:20:38,559
huge fan of

563
00:20:38,559 --> 00:20:40,480
what i like about it especially is that

564
00:20:40,480 --> 00:20:43,120
you get very stable dependency trees

565
00:20:43,120 --> 00:20:45,360
which makes it really reliable to

566
00:20:45,360 --> 00:20:46,720
achieve

567
00:20:46,720 --> 00:20:49,120
relatively easy to achieve reproducible

568
00:20:49,120 --> 00:20:51,440
builds and because you know exactly

569
00:20:51,440 --> 00:20:53,520
which versions of your dependencies you

570
00:20:53,520 --> 00:20:54,640
will get

571
00:20:54,640 --> 00:20:58,159
and it's much uh

572
00:20:58,159 --> 00:21:00,320
it's much less likely that you will get

573
00:21:00,320 --> 00:21:02,720
differences in your build because you

574
00:21:02,720 --> 00:21:04,240
happen to build it with a different

575
00:21:04,240 --> 00:21:06,720
version of a dependency that's just

576
00:21:06,720 --> 00:21:08,960
because of the way next is set up

577
00:21:08,960 --> 00:21:10,080
that is all

578
00:21:10,080 --> 00:21:12,320
the inputs are always very consistent

579
00:21:12,320 --> 00:21:14,080
and that makes it a lot easier to make

580
00:21:14,080 --> 00:21:16,720
sure the outputs are consistent

581
00:21:16,720 --> 00:21:18,960
and so nyx has some tooling built in to

582
00:21:18,960 --> 00:21:21,200
check reproducibility so with just this

583
00:21:21,200 --> 00:21:23,039
one common mix build

584
00:21:23,039 --> 00:21:25,120
check command you can check

585
00:21:25,120 --> 00:21:27,600
that the binary that is in the binary

586
00:21:27,600 --> 00:21:28,720
store

587
00:21:28,720 --> 00:21:30,240
actually corresponds to something you

588
00:21:30,240 --> 00:21:32,000
build locally

589
00:21:32,000 --> 00:21:33,679
almost all of the installer is

590
00:21:33,679 --> 00:21:35,120
reproducible

591
00:21:35,120 --> 00:21:37,520
but also in xos

592
00:21:37,520 --> 00:21:39,600
actually consuming at the stations by

593
00:21:39,600 --> 00:21:41,360
other users is something that's

594
00:21:41,360 --> 00:21:44,080
definitely a research project

595
00:21:44,080 --> 00:21:46,720
so one very interesting

596
00:21:46,720 --> 00:21:49,039
development here is trustics so they try

597
00:21:49,039 --> 00:21:51,760
to be a sort of a proxy which can

598
00:21:51,760 --> 00:21:54,559
you can inject rules into which can

599
00:21:54,559 --> 00:21:58,240
verify the existence of at the stations

600
00:21:58,240 --> 00:22:00,320
but it's not in a

601
00:22:00,320 --> 00:22:01,919
it's it's not something you can use

602
00:22:01,919 --> 00:22:04,240
right now but it's it's super promising

603
00:22:04,240 --> 00:22:06,240
i think

604
00:22:06,240 --> 00:22:09,520
geeks is also a very active uh similar

605
00:22:09,520 --> 00:22:10,320
in

606
00:22:10,320 --> 00:22:13,679
to nix in the sense that you can uh

607
00:22:13,679 --> 00:22:16,480
be certain that your dependencies are uh

608
00:22:16,480 --> 00:22:17,919
consistent

609
00:22:17,919 --> 00:22:20,000
um also has

610
00:22:20,000 --> 00:22:22,400
pretty interesting tooling so

611
00:22:22,400 --> 00:22:24,799
geeks challenge can is a command with

612
00:22:24,799 --> 00:22:27,520
which you can in one go check the

613
00:22:27,520 --> 00:22:30,000
reproducibility of a whole basically a

614
00:22:30,000 --> 00:22:33,840
subtree of a package which is uh cool

615
00:22:33,840 --> 00:22:36,159
um and they are also a foreigner in

616
00:22:36,159 --> 00:22:39,200
bootstrappable builds um

617
00:22:39,200 --> 00:22:42,000
which um

618
00:22:42,000 --> 00:22:42,880
um

619
00:22:42,880 --> 00:22:45,280
bootstrapable builds is a sort of a

620
00:22:45,280 --> 00:22:46,960
sister project to the reproducible

621
00:22:46,960 --> 00:22:47,919
builds

622
00:22:47,919 --> 00:22:49,840
and deals with the

623
00:22:49,840 --> 00:22:52,240
fact that aside from the code we also

624
00:22:52,240 --> 00:22:55,360
need to trust the compiler and the

625
00:22:55,360 --> 00:22:57,440
dependencies and stuff like that but

626
00:22:57,440 --> 00:23:01,280
scrappable builds tries to make that

627
00:23:01,280 --> 00:23:03,600
to make sure that it's not too much

628
00:23:03,600 --> 00:23:06,440
dependent on binary blobs

629
00:23:06,440 --> 00:23:07,600
[Music]

630
00:23:07,600 --> 00:23:10,400
so but bootstrappable builds tries to

631
00:23:10,400 --> 00:23:12,480
bootstrap your environment as much from

632
00:23:12,480 --> 00:23:15,120
source as possible so without relying on

633
00:23:15,120 --> 00:23:16,400
binaries

634
00:23:16,400 --> 00:23:17,440
um

635
00:23:17,440 --> 00:23:20,559
which is very interesting to look at

636
00:23:20,559 --> 00:23:23,919
uh afterwards the popular android

637
00:23:23,919 --> 00:23:25,120
package store

638
00:23:25,120 --> 00:23:28,158
is also uh

639
00:23:29,039 --> 00:23:30,880
also does a lot of reproducible builds

640
00:23:30,880 --> 00:23:34,240
work but it's currently not really

641
00:23:34,240 --> 00:23:35,679
uh

642
00:23:35,679 --> 00:23:37,840
servicing that in the api

643
00:23:37,840 --> 00:23:40,720
uh sorry in the in the ui uh i think

644
00:23:40,720 --> 00:23:42,559
they're definitely interested in doing

645
00:23:42,559 --> 00:23:46,480
that but yeah there's only so many days

646
00:23:46,480 --> 00:23:49,120
hours in the day of course

647
00:23:49,120 --> 00:23:52,640
uh tales is the iso is reproducible uh

648
00:23:52,640 --> 00:23:56,640
but it has to be manually checked

649
00:23:56,640 --> 00:23:58,400
um

650
00:23:58,400 --> 00:24:00,880
yeah so that's a bit of a whirlwind tour

651
00:24:00,880 --> 00:24:02,880
at where different projects are with

652
00:24:02,880 --> 00:24:04,720
reproducibility

653
00:24:04,720 --> 00:24:05,919
um

654
00:24:05,919 --> 00:24:08,559
so if you ask from like

655
00:24:08,559 --> 00:24:10,320
okay what's next what's what are the

656
00:24:10,320 --> 00:24:12,240
next steps what are the most important

657
00:24:12,240 --> 00:24:13,840
things to work on for reproducible

658
00:24:13,840 --> 00:24:15,200
builds right now

659
00:24:15,200 --> 00:24:17,600
um for users definitely

660
00:24:17,600 --> 00:24:20,799
for closer things ask your vendors and

661
00:24:20,799 --> 00:24:22,320
ask them if they're

662
00:24:22,320 --> 00:24:24,240
using techniques like this

663
00:24:24,240 --> 00:24:27,039
like this in their supply chain

664
00:24:27,039 --> 00:24:29,200
for open source stuff see if your

665
00:24:29,200 --> 00:24:31,440
favorite packages reproduce will try to

666
00:24:31,440 --> 00:24:34,159
reproduce it if there's any instructions

667
00:24:34,159 --> 00:24:35,279
and

668
00:24:35,279 --> 00:24:37,679
if there's nothing there maybe just try

669
00:24:37,679 --> 00:24:40,480
it run diffoscope on it it's um

670
00:24:40,480 --> 00:24:42,480
there's a lot of toughness to crack but

671
00:24:42,480 --> 00:24:44,320
there's also a lot of like low hanging

672
00:24:44,320 --> 00:24:47,120
fruit so if you find something easy

673
00:24:47,120 --> 00:24:48,480
um

674
00:24:48,480 --> 00:24:50,000
starting with reproducible builds could

675
00:24:50,000 --> 00:24:51,360
be a really nice way to start

676
00:24:51,360 --> 00:24:53,440
contributing to a package that you're uh

677
00:24:53,440 --> 00:24:55,760
that you're using a lot

678
00:24:55,760 --> 00:24:58,159
uh just so just build it twice run

679
00:24:58,159 --> 00:25:00,320
difficult and see if there's uh yeah you

680
00:25:00,320 --> 00:25:01,919
can make sense of what the where the

681
00:25:01,919 --> 00:25:04,640
differences come from

682
00:25:04,640 --> 00:25:06,799
as developers of course try to reproduce

683
00:25:06,799 --> 00:25:09,039
your own projects

684
00:25:09,039 --> 00:25:12,159
i want to shout out to this

685
00:25:12,159 --> 00:25:13,360
get the

686
00:25:13,360 --> 00:25:15,919
uh i probably didn't backdoor this

687
00:25:15,919 --> 00:25:18,720
this gives you a sort of um

688
00:25:18,720 --> 00:25:20,720
takes you through a rust project and

689
00:25:20,720 --> 00:25:22,440
shows you how you would make

690
00:25:22,440 --> 00:25:25,600
reproducible leak create an alpha binary

691
00:25:25,600 --> 00:25:28,720
a docker image an arch package

692
00:25:28,720 --> 00:25:30,880
and sort of shows you in practice what

693
00:25:30,880 --> 00:25:33,279
it looks like so you get a more solid id

694
00:25:33,279 --> 00:25:35,600
of it

695
00:25:35,840 --> 00:25:38,640
aside from reproducing your own builds

696
00:25:38,640 --> 00:25:40,480
checking your upstreams is i think an

697
00:25:40,480 --> 00:25:42,880
area which where a lot of like

698
00:25:42,880 --> 00:25:44,559
interesting problems are still to be

699
00:25:44,559 --> 00:25:45,679
solved

700
00:25:45,679 --> 00:25:47,039
this is very

701
00:25:47,039 --> 00:25:48,720
very much depends on what kind of

702
00:25:48,720 --> 00:25:50,159
project you have what kind of build

703
00:25:50,159 --> 00:25:51,120
tools you

704
00:25:51,120 --> 00:25:52,400
you use

705
00:25:52,400 --> 00:25:53,600
and

706
00:25:53,600 --> 00:25:55,440
so all the libraries you depend on

707
00:25:55,440 --> 00:25:57,760
ideally you would check that they can be

708
00:25:57,760 --> 00:26:00,720
reproduced but how would you do that

709
00:26:00,720 --> 00:26:03,279
um on the other side of this coin

710
00:26:03,279 --> 00:26:04,159
um

711
00:26:04,159 --> 00:26:06,880
empower your downstream so make it easy

712
00:26:06,880 --> 00:26:09,520
for your the users of your project to

713
00:26:09,520 --> 00:26:11,600
test for themselves that they come to

714
00:26:11,600 --> 00:26:13,120
the same binary

715
00:26:13,120 --> 00:26:15,760
and and if you're using a distribution

716
00:26:15,760 --> 00:26:18,320
then definitely see if you can help your

717
00:26:18,320 --> 00:26:22,159
distribution become more reproducible

718
00:26:22,159 --> 00:26:24,480
so a ton of super interesting work to do

719
00:26:24,480 --> 00:26:26,279
i think um

720
00:26:26,279 --> 00:26:28,080
reproduciblebuilds.org is sort of a

721
00:26:28,080 --> 00:26:30,159
central hub where a lot of this works

722
00:26:30,159 --> 00:26:31,840
comes together

723
00:26:31,840 --> 00:26:33,600
but because of

724
00:26:33,600 --> 00:26:35,520
because it's just a technique another

725
00:26:35,520 --> 00:26:36,799
technology

726
00:26:36,799 --> 00:26:39,279
um a lot of the work actually happens in

727
00:26:39,279 --> 00:26:41,120
the different ecosystems or in different

728
00:26:41,120 --> 00:26:43,679
linux distros in different build tool

729
00:26:43,679 --> 00:26:45,120
ecosystems

730
00:26:45,120 --> 00:26:48,320
so definitely have a look there

731
00:26:48,320 --> 00:26:50,000
i will also make sure that the slides in

732
00:26:50,000 --> 00:26:51,760
the video are

733
00:26:51,760 --> 00:26:54,000
uploaded there and with that i would

734
00:26:54,000 --> 00:26:57,679
like to open up for questions

735
00:27:00,480 --> 00:27:02,080
oh yeah

736
00:27:02,080 --> 00:27:04,159
thank you very much and if any questions

737
00:27:04,159 --> 00:27:05,919
please line up and for the microphones

738
00:27:05,919 --> 00:27:08,640
in the middle and

739
00:27:08,640 --> 00:27:10,400
please go close to the microphone that

740
00:27:10,400 --> 00:27:12,240
we can hear you properly front micro

741
00:27:12,240 --> 00:27:14,480
please

742
00:27:15,120 --> 00:27:16,640
just

743
00:27:16,640 --> 00:27:17,600
it's

744
00:27:17,600 --> 00:27:20,840
try again

745
00:27:25,279 --> 00:27:28,320
okay yeah uh thanks for that talk

746
00:27:28,320 --> 00:27:30,399
you mentioned that the attack surface

747
00:27:30,399 --> 00:27:32,559
has been reduced significantly because

748
00:27:32,559 --> 00:27:35,520
now we cannot pressure github

749
00:27:35,520 --> 00:27:36,880
developers

750
00:27:36,880 --> 00:27:39,120
to check in malicious builds

751
00:27:39,120 --> 00:27:41,840
however they can still be forced to

752
00:27:41,840 --> 00:27:44,320
check in let's say a second line of go

753
00:27:44,320 --> 00:27:47,200
to fail right so yeah okay

754
00:27:47,200 --> 00:27:50,240
right so um you still have to audit the

755
00:27:50,240 --> 00:27:52,960
source code you still because like in

756
00:27:52,960 --> 00:27:54,640
the pipeline we're trusting the source

757
00:27:54,640 --> 00:27:56,480
code yeah and so to be able to address

758
00:27:56,480 --> 00:27:57,760
it you will have to audit it that

759
00:27:57,760 --> 00:27:59,440
there's no malware there

760
00:27:59,440 --> 00:28:02,240
and assuming that you have done that

761
00:28:02,240 --> 00:28:04,080
then the attack surface is reduced in

762
00:28:04,080 --> 00:28:06,399
the sense that the developer cannot have

763
00:28:06,399 --> 00:28:08,799
injected it later in the pipeline

764
00:28:08,799 --> 00:28:11,840
all right yes

765
00:28:12,320 --> 00:28:15,360
i have a second question

766
00:28:15,360 --> 00:28:18,159
someone else yeah go on um

767
00:28:18,159 --> 00:28:20,159
yeah sorry i don't want to be too

768
00:28:20,159 --> 00:28:22,399
pedantic there but

769
00:28:22,399 --> 00:28:24,960
i i saw at some point that you

770
00:28:24,960 --> 00:28:27,919
provided checksums as well

771
00:28:27,919 --> 00:28:29,440
or that you computer checksums of the

772
00:28:29,440 --> 00:28:31,520
binaries yeah

773
00:28:31,520 --> 00:28:35,120
what would be the reason to use md5 or

774
00:28:35,120 --> 00:28:36,720
sha-1

775
00:28:36,720 --> 00:28:39,120
ah in the akka example

776
00:28:39,120 --> 00:28:41,360
right um

777
00:28:41,360 --> 00:28:43,440
because that's what people do

778
00:28:43,440 --> 00:28:47,279
in the mafian ecosystem um

779
00:28:47,279 --> 00:28:48,799
they're not so

780
00:28:48,799 --> 00:28:50,159
um

781
00:28:50,159 --> 00:28:53,120
let me go back to that slide again

782
00:28:53,120 --> 00:28:56,000
yeah there it was i think yeah exactly

783
00:28:56,000 --> 00:28:56,960
um

784
00:28:56,960 --> 00:29:00,640
so so basically um

785
00:29:03,360 --> 00:29:05,360
basically that that's not really part of

786
00:29:05,360 --> 00:29:08,320
the reproducible build story and yeah i

787
00:29:08,320 --> 00:29:09,760
think this is

788
00:29:09,760 --> 00:29:11,840
these are mainly there for legacy

789
00:29:11,840 --> 00:29:13,679
reasons

790
00:29:13,679 --> 00:29:15,600
and because

791
00:29:15,600 --> 00:29:17,279
just to check that the download didn't

792
00:29:17,279 --> 00:29:18,880
fill and stuff like that and not for

793
00:29:18,880 --> 00:29:22,080
security reasons okay um if you would

794
00:29:22,080 --> 00:29:25,199
create another station

795
00:29:25,279 --> 00:29:27,840
uh

796
00:29:29,120 --> 00:29:31,840
and so you ship some ghost and also you

797
00:29:31,840 --> 00:29:33,840
create another station that say okay i

798
00:29:33,840 --> 00:29:36,399
built this and the hash of the binary is

799
00:29:36,399 --> 00:29:38,080
this and this then you would use a

800
00:29:38,080 --> 00:29:39,679
stronger hash like

801
00:29:39,679 --> 00:29:42,080
512 or stuff like that definitely agree

802
00:29:42,080 --> 00:29:43,200
yeah okay

803
00:29:43,200 --> 00:29:45,440
thanks cool

804
00:29:45,440 --> 00:29:48,480
and one last question yes please

805
00:29:48,480 --> 00:29:50,559
so there are techniques to content

806
00:29:50,559 --> 00:29:52,159
address

807
00:29:52,159 --> 00:29:55,520
and it does reproduciblebuilds.org

808
00:29:55,520 --> 00:29:56,880
are they interested in using that

809
00:29:56,880 --> 00:29:58,960
technology like i know nix has the

810
00:29:58,960 --> 00:30:01,360
knicks archive and nick wants to become

811
00:30:01,360 --> 00:30:02,799
content addressed

812
00:30:02,799 --> 00:30:05,760
and uh you know ipfs exists and ipfs has

813
00:30:05,760 --> 00:30:09,360
a format cir content addressed archive

814
00:30:09,360 --> 00:30:11,440
does reproduciblebuilds.org

815
00:30:11,440 --> 00:30:13,200
find interest in this and how is it

816
00:30:13,200 --> 00:30:15,919
going to use it in the future

817
00:30:15,919 --> 00:30:17,600
so i think those two

818
00:30:17,600 --> 00:30:19,600
fit really well together

819
00:30:19,600 --> 00:30:21,919
but because the more reproducible built

820
00:30:21,919 --> 00:30:24,320
your project is the more likely it is

821
00:30:24,320 --> 00:30:26,559
the next build will have the same hash

822
00:30:26,559 --> 00:30:28,799
and so the more likely it will be

823
00:30:28,799 --> 00:30:30,080
you can

824
00:30:30,080 --> 00:30:31,679
you already have it and you don't have

825
00:30:31,679 --> 00:30:33,440
to look for it again

826
00:30:33,440 --> 00:30:34,480
um

827
00:30:34,480 --> 00:30:37,600
i don't think reproduciblebills.org

828
00:30:37,600 --> 00:30:39,760
specifically wants to do something about

829
00:30:39,760 --> 00:30:41,440
uh with it

830
00:30:41,440 --> 00:30:42,559
um

831
00:30:42,559 --> 00:30:44,720
but i think definitely think they play

832
00:30:44,720 --> 00:30:46,480
in each other's strengths

833
00:30:46,480 --> 00:30:48,080
yeah

834
00:30:48,080 --> 00:30:49,039
okay

835
00:30:49,039 --> 00:30:50,559
then thank you very much for the

836
00:30:50,559 --> 00:30:52,559
interesting talk and please give a round

837
00:30:52,559 --> 00:30:55,120
of applause

838
00:30:55,600 --> 00:30:58,840
thank you

839
00:31:04,480 --> 00:31:06,559
you

