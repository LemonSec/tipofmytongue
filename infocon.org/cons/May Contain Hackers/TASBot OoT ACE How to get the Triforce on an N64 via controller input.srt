1
00:00:01,280 --> 00:00:12,559
[Music]

2
00:00:15,599 --> 00:00:17,680
if you have lost yourself down the speed

3
00:00:17,680 --> 00:00:19,520
running rabbit hole on youtube i know i

4
00:00:19,520 --> 00:00:21,359
certainly have you have probably heard

5
00:00:21,359 --> 00:00:23,039
of tazbot

6
00:00:23,039 --> 00:00:26,400
tazbot is a tool assisted speedrun robot

7
00:00:26,400 --> 00:00:28,400
and if you don't know speedrunning is an

8
00:00:28,400 --> 00:00:30,880
awesome community of hackers and gamers

9
00:00:30,880 --> 00:00:33,360
who come together to break and play

10
00:00:33,360 --> 00:00:35,520
games as fast as they possibly can

11
00:00:35,520 --> 00:00:37,680
tazbot can pretends to be a controller

12
00:00:37,680 --> 00:00:39,760
and sends button presses to the console

13
00:00:39,760 --> 00:00:42,079
with inhuman precision and this means

14
00:00:42,079 --> 00:00:43,840
that he can do some very interesting

15
00:00:43,840 --> 00:00:44,879
things

16
00:00:44,879 --> 00:00:46,399
taskbot has been alive for about 10

17
00:00:46,399 --> 00:00:50,320
years and in that time he has raised 1.3

18
00:00:50,320 --> 00:00:54,000
million dollars for charity

19
00:00:55,520 --> 00:00:58,079
duango ac who is the keeper of tasbot

20
00:00:58,079 --> 00:00:59,920
and blaster mac who is the guy who plays

21
00:00:59,920 --> 00:01:01,680
the games are here to tell us about his

22
00:01:01,680 --> 00:01:03,680
latest exploits folks this is going to

23
00:01:03,680 --> 00:01:07,960
be awesome let's give it up

24
00:01:12,799 --> 00:01:14,560
so glad to have such a wonderful cloud

25
00:01:14,560 --> 00:01:17,040
crowd i am dwango ac welcome to the

26
00:01:17,040 --> 00:01:20,000
taskbot ocarina of time ace talk i am a

27
00:01:20,000 --> 00:01:21,840
security consultant with bishop fox by

28
00:01:21,840 --> 00:01:23,920
day but keeper by taskbot by night and

29
00:01:23,920 --> 00:01:25,280
this talk is an opportunity for me to

30
00:01:25,280 --> 00:01:27,680
combine both of my passions and one talk

31
00:01:27,680 --> 00:01:29,759
which is awesome i'm thankful to bishop

32
00:01:29,759 --> 00:01:31,280
fox for making it possible for me to

33
00:01:31,280 --> 00:01:33,600
travel here and be here i also want to

34
00:01:33,600 --> 00:01:35,920
specifically thank stitch who i hope is

35
00:01:35,920 --> 00:01:38,479
somewhere oh right there who personally

36
00:01:38,479 --> 00:01:40,159
invited me over three years ago to

37
00:01:40,159 --> 00:01:42,479
participate in this so so excited to be

38
00:01:42,479 --> 00:01:43,200
here

39
00:01:43,200 --> 00:01:45,680
i really want to show you how we can

40
00:01:45,680 --> 00:01:47,759
take glitches and exploit them to create

41
00:01:47,759 --> 00:01:50,079
a work of transformative art

42
00:01:50,079 --> 00:01:51,840
from one of the most popular games of

43
00:01:51,840 --> 00:01:53,439
all time there are a couple of things i

44
00:01:53,439 --> 00:01:55,680
want to chat about before we go on

45
00:01:55,680 --> 00:01:58,240
uh there is just a massive number of

46
00:01:58,240 --> 00:01:59,600
people who contributed to what you're

47
00:01:59,600 --> 00:02:01,920
about to see from inside and outside of

48
00:02:01,920 --> 00:02:04,159
the top spot community over 25 people

49
00:02:04,159 --> 00:02:05,840
contributed to this over the course of

50
00:02:05,840 --> 00:02:08,239
about two and a half years uh with even

51
00:02:08,239 --> 00:02:10,080
more and people involved in prior

52
00:02:10,080 --> 00:02:11,520
research

53
00:02:11,520 --> 00:02:13,120
especially like to thank soren who was

54
00:02:13,120 --> 00:02:15,280
the director and the main pillar of what

55
00:02:15,280 --> 00:02:18,160
we did for what we call triforce percent

56
00:02:18,160 --> 00:02:19,200
you'll understand a little more about

57
00:02:19,200 --> 00:02:20,400
that in a bit

58
00:02:20,400 --> 00:02:22,319
also iso isofreeze of retro game

59
00:02:22,319 --> 00:02:24,080
mechanics explained if you have seen the

60
00:02:24,080 --> 00:02:26,080
video on this you'll note that the

61
00:02:26,080 --> 00:02:28,640
slides are very similar uh he directly

62
00:02:28,640 --> 00:02:30,480
helped me create this and worked with me

63
00:02:30,480 --> 00:02:32,319
to produce this uh

64
00:02:32,319 --> 00:02:34,160
slideware you'll see what i mean when we

65
00:02:34,160 --> 00:02:35,360
get into it

66
00:02:35,360 --> 00:02:37,519
uh there's also blaster mac here who

67
00:02:37,519 --> 00:02:40,560
will be helping by playing the game now

68
00:02:40,560 --> 00:02:41,840
i have to say

69
00:02:41,840 --> 00:02:44,400
the one person in this planet on this

70
00:02:44,400 --> 00:02:47,040
planet who has managed to pull off

71
00:02:47,040 --> 00:02:50,160
running the original cartridge was safe

72
00:02:50,160 --> 00:02:52,160
state they did it at summer games done

73
00:02:52,160 --> 00:02:55,200
quick 2022 a couple of weeks ago

74
00:02:55,200 --> 00:02:57,760
we spent several weeks trying to

75
00:02:57,760 --> 00:02:59,680
replicate what they did

76
00:02:59,680 --> 00:03:02,159
without success we have been unable to

77
00:03:02,159 --> 00:03:03,599
make it to assisted speedrun of this

78
00:03:03,599 --> 00:03:05,920
because of various different issues so

79
00:03:05,920 --> 00:03:08,159
uh we are trying to recreate what they

80
00:03:08,159 --> 00:03:10,720
did without their skill level uh instead

81
00:03:10,720 --> 00:03:12,400
of trying to do it on an original cart

82
00:03:12,400 --> 00:03:14,480
we are going to be using a

83
00:03:14,480 --> 00:03:16,400
flashcart i'll show you what that looks

84
00:03:16,400 --> 00:03:19,519
like here

85
00:03:19,519 --> 00:03:21,040
you'll see there are some addresses here

86
00:03:21,040 --> 00:03:23,120
on this screen we are cheating a little

87
00:03:23,120 --> 00:03:25,920
bit we are using a practice rom that

88
00:03:25,920 --> 00:03:29,040
shows the angle of what link is facing

89
00:03:29,040 --> 00:03:30,239
and a few other things as well as the

90
00:03:30,239 --> 00:03:31,519
buttons that are being pressed so this

91
00:03:31,519 --> 00:03:33,519
allows us to also do tool assisted speed

92
00:03:33,519 --> 00:03:36,799
run like things like save states and

93
00:03:36,799 --> 00:03:38,080
being able to frame advance which are

94
00:03:38,080 --> 00:03:39,920
going to come in really handy so what

95
00:03:39,920 --> 00:03:41,440
we're going to do right now is go

96
00:03:41,440 --> 00:03:43,680
through the intro and play through the

97
00:03:43,680 --> 00:03:45,680
game this intro scene is a little long

98
00:03:45,680 --> 00:03:47,680
we'll leave that in the corner here as

99
00:03:47,680 --> 00:03:49,599
we get started so you'll see that in

100
00:03:49,599 --> 00:03:51,120
that corner down there while we're just

101
00:03:51,120 --> 00:03:52,720
going through this rather repetitive

102
00:03:52,720 --> 00:03:54,640
intro section

103
00:03:54,640 --> 00:03:56,798
so

104
00:03:56,879 --> 00:03:59,120
i'm going to break this talk in to about

105
00:03:59,120 --> 00:04:01,120
three wow that wind came through

106
00:04:01,120 --> 00:04:03,599
sorry about the mic uh we're going to

107
00:04:03,599 --> 00:04:06,879
talk about three main parts in this talk

108
00:04:06,879 --> 00:04:09,599
the first one is going to be

109
00:04:09,599 --> 00:04:13,040
how we're preparing to execute a glitch

110
00:04:13,040 --> 00:04:15,040
called a stale reference manipulation

111
00:04:15,040 --> 00:04:18,000
it's basically a use after free exploit

112
00:04:18,000 --> 00:04:19,600
that's the more common name for it we're

113
00:04:19,600 --> 00:04:21,600
also going to do a dive into how we're

114
00:04:21,600 --> 00:04:23,759
doing the initial arbitrary code of

115
00:04:23,759 --> 00:04:26,479
payload execution i think would take ace

116
00:04:26,479 --> 00:04:27,680
and then do something interesting with

117
00:04:27,680 --> 00:04:30,080
it and then part three is where we get

118
00:04:30,080 --> 00:04:31,040
to see

119
00:04:31,040 --> 00:04:32,479
all of the amazing things you can do

120
00:04:32,479 --> 00:04:34,400
once you have arbitrary control over a

121
00:04:34,400 --> 00:04:35,520
console

122
00:04:35,520 --> 00:04:36,240
so

123
00:04:36,240 --> 00:04:38,160
i should note that the majority of part

124
00:04:38,160 --> 00:04:39,199
one

125
00:04:39,199 --> 00:04:41,520
also applies to

126
00:04:41,520 --> 00:04:43,280
the

127
00:04:43,280 --> 00:04:46,479
ace any percent run of of if you wanted

128
00:04:46,479 --> 00:04:48,240
to beat the game quickly it also applies

129
00:04:48,240 --> 00:04:50,880
to what you would get on the original

130
00:04:50,880 --> 00:04:53,199
uh console in the original nintendo 64

131
00:04:53,199 --> 00:04:55,199
it uses the same sequence so let's talk

132
00:04:55,199 --> 00:04:56,720
about what it takes to land and exploit

133
00:04:56,720 --> 00:04:57,840
on one of these

134
00:04:57,840 --> 00:04:59,280
so the state of the buttons and analog

135
00:04:59,280 --> 00:05:00,720
control stick for each of the four

136
00:05:00,720 --> 00:05:02,560
controllers is stored at memory address

137
00:05:02,560 --> 00:05:04,280
8011

138
00:05:04,280 --> 00:05:07,520
d790 each controller port takes up six

139
00:05:07,520 --> 00:05:09,440
bytes there are two bytes for all of the

140
00:05:09,440 --> 00:05:12,320
buttons a b z start the d-pad l r

141
00:05:12,320 --> 00:05:14,320
shoulder buttons and the c buttons

142
00:05:14,320 --> 00:05:17,919
there's one byte for the analog sticks x

143
00:05:17,919 --> 00:05:18,960
offset

144
00:05:18,960 --> 00:05:21,520
one byte for its y offset one byte for

145
00:05:21,520 --> 00:05:23,280
an error code in case the controller is

146
00:05:23,280 --> 00:05:25,600
unplugged or other errors and then one

147
00:05:25,600 --> 00:05:27,600
padding byte that's always zero

148
00:05:27,600 --> 00:05:29,919
altogether we have a total of 24 bytes

149
00:05:29,919 --> 00:05:33,440
so by pressing buttons and moving around

150
00:05:33,440 --> 00:05:35,759
by moving the control stick around we

151
00:05:35,759 --> 00:05:36,800
can

152
00:05:36,800 --> 00:05:38,400
change the values

153
00:05:38,400 --> 00:05:39,199
in

154
00:05:39,199 --> 00:05:41,199
to whatever we like if you're superhuman

155
00:05:41,199 --> 00:05:42,479
now under normal circumstances the

156
00:05:42,479 --> 00:05:44,639
game's code reads these values to know

157
00:05:44,639 --> 00:05:46,560
where the player is currently

158
00:05:46,560 --> 00:05:48,240
but what the player is pressing and

159
00:05:48,240 --> 00:05:50,160
updates the game accordingly but the

160
00:05:50,160 --> 00:05:51,759
memory here is just like any other

161
00:05:51,759 --> 00:05:53,280
memory in the system

162
00:05:53,280 --> 00:05:55,840
and game code is found in memory and is

163
00:05:55,840 --> 00:05:57,440
executed here all the time so what if we

164
00:05:57,440 --> 00:06:00,319
were able to jump execution or call a

165
00:06:00,319 --> 00:06:02,560
function that is defined to be at the

166
00:06:02,560 --> 00:06:05,280
same location as the controller data so

167
00:06:05,280 --> 00:06:06,479
this is where things get really

168
00:06:06,479 --> 00:06:07,919
interesting

169
00:06:07,919 --> 00:06:09,520
so the data representing the state of

170
00:06:09,520 --> 00:06:11,520
the controllers can be treated as mips

171
00:06:11,520 --> 00:06:12,960
assembly instructions and they can be

172
00:06:12,960 --> 00:06:15,440
executed just like any other code

173
00:06:15,440 --> 00:06:16,960
by the way blaster mac is currently

174
00:06:16,960 --> 00:06:19,120
going through and setting up the rupee

175
00:06:19,120 --> 00:06:20,240
route we're going through and getting

176
00:06:20,240 --> 00:06:22,960
certain things in a particular area

177
00:06:22,960 --> 00:06:24,800
going in through the main beginning area

178
00:06:24,800 --> 00:06:26,400
and getting certain rupees that we need

179
00:06:26,400 --> 00:06:27,840
for this exploit

180
00:06:27,840 --> 00:06:29,759
so

181
00:06:29,759 --> 00:06:32,479
right now

182
00:06:33,759 --> 00:06:36,720
the specific code that gets executed uh

183
00:06:36,720 --> 00:06:37,520
when

184
00:06:37,520 --> 00:06:39,199
uh i say this

185
00:06:39,199 --> 00:06:40,160
uh

186
00:06:40,160 --> 00:06:42,880
if you if you were to execute these

187
00:06:42,880 --> 00:06:45,199
controller inputs as code what gets

188
00:06:45,199 --> 00:06:47,039
executed would depend on what angle of

189
00:06:47,039 --> 00:06:48,400
the control sticks your button but the

190
00:06:48,400 --> 00:06:50,080
control structs you're pressing and what

191
00:06:50,080 --> 00:06:51,680
buttons you're pressing

192
00:06:51,680 --> 00:06:53,680
now it might be really difficult for a

193
00:06:53,680 --> 00:06:56,000
real controller or a real player to hold

194
00:06:56,000 --> 00:06:58,720
56 buttons and four analog sticks to

195
00:06:58,720 --> 00:07:01,440
precise x and y coordinates but my buddy

196
00:07:01,440 --> 00:07:04,720
tassbot here has no problem with that

197
00:07:04,720 --> 00:07:06,960
so we're going to get him

198
00:07:06,960 --> 00:07:08,720
attached later you'll see what kind of

199
00:07:08,720 --> 00:07:12,000
shenanigans he can be up to

200
00:07:12,800 --> 00:07:14,639
now the original game developers never

201
00:07:14,639 --> 00:07:16,240
intended for players to execute the

202
00:07:16,240 --> 00:07:18,639
controller data as code so we'll need to

203
00:07:18,639 --> 00:07:20,880
use some glitches to accomplish that

204
00:07:20,880 --> 00:07:22,160
luckily within the starting area of the

205
00:07:22,160 --> 00:07:23,919
game you can see a video on the screen

206
00:07:23,919 --> 00:07:25,599
here of kind of what we're going to be

207
00:07:25,599 --> 00:07:26,960
doing here

208
00:07:26,960 --> 00:07:28,319
there are

209
00:07:28,319 --> 00:07:30,880
some places where we can achieve

210
00:07:30,880 --> 00:07:33,039
arbitrary code execution which as it

211
00:07:33,039 --> 00:07:35,199
suggests gives us the ability to execute

212
00:07:35,199 --> 00:07:36,880
any code that we want

213
00:07:36,880 --> 00:07:39,520
on the console so the key glitch that

214
00:07:39,520 --> 00:07:41,199
enables us is known as stale reference

215
00:07:41,199 --> 00:07:43,120
manipulation it's more commonly known as

216
00:07:43,120 --> 00:07:45,199
known as a use after free exploit so

217
00:07:45,199 --> 00:07:47,759
before i go on i want to look at how the

218
00:07:47,759 --> 00:07:50,080
heap works in the inoculation of time if

219
00:07:50,080 --> 00:07:51,919
you're unfamiliar a heap is an area of

220
00:07:51,919 --> 00:07:53,840
dynamically allocated memory where data

221
00:07:53,840 --> 00:07:55,680
blocks of different sizes are reserved

222
00:07:55,680 --> 00:07:58,160
for use by various objects and functions

223
00:07:58,160 --> 00:08:00,479
in ocarina of time there's a specific

224
00:08:00,479 --> 00:08:03,039
heap that's called the actor heap

225
00:08:03,039 --> 00:08:05,280
it contains code and data for all of the

226
00:08:05,280 --> 00:08:07,120
actors currently loaded in the game an

227
00:08:07,120 --> 00:08:09,520
actor in this context is any sort of

228
00:08:09,520 --> 00:08:10,720
entity it doesn't matter whether it's

229
00:08:10,720 --> 00:08:11,680
link

230
00:08:11,680 --> 00:08:14,080
npcs rupees even some hidden objects and

231
00:08:14,080 --> 00:08:17,199
triggers now there are two main kinds of

232
00:08:17,199 --> 00:08:19,120
things held in the actor heap there are

233
00:08:19,120 --> 00:08:21,680
actor overlays that

234
00:08:21,680 --> 00:08:23,599
basically contain

235
00:08:23,599 --> 00:08:25,280
code that runs for each type of actor

236
00:08:25,280 --> 00:08:27,280
how they behave and how they react and

237
00:08:27,280 --> 00:08:29,199
then the actors themselves

238
00:08:29,199 --> 00:08:31,120
if there are multiple instances of a

239
00:08:31,120 --> 00:08:34,320
single actor say a rupee only one actor

240
00:08:34,320 --> 00:08:36,240
overlay needs to be loaded into the heap

241
00:08:36,240 --> 00:08:39,039
since they all share the same code so

242
00:08:39,039 --> 00:08:40,958
you'll have several actors they'll all

243
00:08:40,958 --> 00:08:42,240
point to the same overlay you'll have

244
00:08:42,240 --> 00:08:43,760
several rupees they'll only point to one

245
00:08:43,760 --> 00:08:46,480
rupee overlay

246
00:08:46,959 --> 00:08:48,880
so the actors themselves hold the data

247
00:08:48,880 --> 00:08:50,320
for each individual instance of that

248
00:08:50,320 --> 00:08:51,519
actor stuff like the position the

249
00:08:51,519 --> 00:08:54,640
rotation and that actor's state

250
00:08:54,640 --> 00:08:56,480
actors are loaded into and out of the

251
00:08:56,480 --> 00:08:58,000
game all the time and their allocated

252
00:08:58,000 --> 00:08:59,680
memory on the heap dynamically while

253
00:08:59,680 --> 00:09:00,880
that happens

254
00:09:00,880 --> 00:09:03,120
so the game will search the heap

255
00:09:03,120 --> 00:09:04,880
for a free chunk of memory basically

256
00:09:04,880 --> 00:09:07,040
it's going to start at the top all the

257
00:09:07,040 --> 00:09:11,680
way at eight zero one d a a zero zero

258
00:09:11,680 --> 00:09:13,680
and search for space all the way down

259
00:09:13,680 --> 00:09:15,120
working its way down to this corner at

260
00:09:15,120 --> 00:09:17,839
eight zero two three a b nine zero uh

261
00:09:17,839 --> 00:09:19,920
yes we're using this particular

262
00:09:19,920 --> 00:09:22,000
donation with a notation with a dollar

263
00:09:22,000 --> 00:09:22,880
sign

264
00:09:22,880 --> 00:09:25,839
it's a stylistic choice of the animator

265
00:09:25,839 --> 00:09:27,519
if a new type of actor is loaded the

266
00:09:27,519 --> 00:09:30,000
corresponding actor overlay is loaded as

267
00:09:30,000 --> 00:09:30,800
well

268
00:09:30,800 --> 00:09:33,360
so when transitioning to a new area all

269
00:09:33,360 --> 00:09:34,720
of the actors in the new area are

270
00:09:34,720 --> 00:09:36,560
allocated to the heap

271
00:09:36,560 --> 00:09:38,880
before all of the old actors are freed

272
00:09:38,880 --> 00:09:40,959
this results in actors and overlays

273
00:09:40,959 --> 00:09:42,640
being assigned memory locations that

274
00:09:42,640 --> 00:09:44,480
aren't consistent their location and

275
00:09:44,480 --> 00:09:46,880
memory will depend on exactly how many

276
00:09:46,880 --> 00:09:48,959
actors were already loaded and how they

277
00:09:48,959 --> 00:09:51,360
were organized within the heap structure

278
00:09:51,360 --> 00:09:53,760
the signpost actor for instance that

279
00:09:53,760 --> 00:09:56,640
we're looking at here

280
00:09:56,959 --> 00:09:58,880
back up just a bit

281
00:09:58,880 --> 00:10:01,680
okay that sign post actor

282
00:10:01,680 --> 00:10:02,839
oh come

283
00:10:02,839 --> 00:10:06,320
on okay it's going too fast very well

284
00:10:06,320 --> 00:10:07,920
it might be

285
00:10:07,920 --> 00:10:09,839
loaded in one place in the heap but if

286
00:10:09,839 --> 00:10:11,519
we leave the area and come back it might

287
00:10:11,519 --> 00:10:12,959
be somewhere else

288
00:10:12,959 --> 00:10:15,360
like adjusted over there

289
00:10:15,360 --> 00:10:16,320
and

290
00:10:16,320 --> 00:10:17,920
some actors might need to keep a pointer

291
00:10:17,920 --> 00:10:19,519
or a reference to

292
00:10:19,519 --> 00:10:21,519
another actor in their data so this fact

293
00:10:21,519 --> 00:10:22,959
that they can move around is actually

294
00:10:22,959 --> 00:10:24,800
very important so for example the

295
00:10:24,800 --> 00:10:26,640
boomerang here under normal

296
00:10:26,640 --> 00:10:29,120
circumstances keeps a reference to the

297
00:10:29,120 --> 00:10:30,720
actor that it's grabbed such as ruby

298
00:10:30,720 --> 00:10:32,800
which you can see you would want to be

299
00:10:32,800 --> 00:10:34,640
able to carry that rupee back to link

300
00:10:34,640 --> 00:10:36,720
under normal circumstances if an actor

301
00:10:36,720 --> 00:10:38,560
references a second actor the second

302
00:10:38,560 --> 00:10:40,480
actor should not unload or be freed from

303
00:10:40,480 --> 00:10:43,120
the heap before the first actor either

304
00:10:43,120 --> 00:10:45,600
unreferences it or unloads itself if it

305
00:10:45,600 --> 00:10:47,839
happens we would call this a stale

306
00:10:47,839 --> 00:10:49,040
reference it's pointing at something

307
00:10:49,040 --> 00:10:51,040
that's no longer there the pointer this

308
00:10:51,040 --> 00:10:53,360
actor has has is now pointing to a

309
00:10:53,360 --> 00:10:54,959
memory location that's not being used

310
00:10:54,959 --> 00:10:56,880
anymore and it means that if another

311
00:10:56,880 --> 00:11:00,000
actor were to be allocated into the heap

312
00:11:00,000 --> 00:11:01,600
at that location where the old actor

313
00:11:01,600 --> 00:11:03,120
used to be the first actor would be

314
00:11:03,120 --> 00:11:04,399
pointing to an actor that it probably

315
00:11:04,399 --> 00:11:06,079
shouldn't have access to like this this

316
00:11:06,079 --> 00:11:08,079
item here

317
00:11:08,079 --> 00:11:09,839
so using the boomerang example by

318
00:11:09,839 --> 00:11:11,200
unloading the actor it's grabbed by

319
00:11:11,200 --> 00:11:12,800
going through a room transition while

320
00:11:12,800 --> 00:11:14,480
it's off screen a different actor will

321
00:11:14,480 --> 00:11:16,399
take its pl spot this is this can cause

322
00:11:16,399 --> 00:11:18,480
the boomerang to modify that new actor's

323
00:11:18,480 --> 00:11:20,560
position instead which can cause unusual

324
00:11:20,560 --> 00:11:23,440
behavior like objects teleporting around

325
00:11:23,440 --> 00:11:25,600
and this is an example of an actor being

326
00:11:25,600 --> 00:11:28,240
allocated in the same memory allocation

327
00:11:28,240 --> 00:11:30,640
location is an older actor so

328
00:11:30,640 --> 00:11:32,160
the question then becomes what would

329
00:11:32,160 --> 00:11:34,399
happen if an actor overlay loaded into

330
00:11:34,399 --> 00:11:36,720
this memory location

331
00:11:36,720 --> 00:11:38,800
uh was maybe we've got something

332
00:11:38,800 --> 00:11:40,160
different like maybe in other words what

333
00:11:40,160 --> 00:11:41,920
if the boomerang modifies an actor's

334
00:11:41,920 --> 00:11:42,880
position

335
00:11:42,880 --> 00:11:44,640
well when him when it modifies it what's

336
00:11:44,640 --> 00:11:46,880
it actually doing let me just jump ahead

337
00:11:46,880 --> 00:11:48,000
a bit

338
00:11:48,000 --> 00:11:49,279
okay

339
00:11:49,279 --> 00:11:52,160
so for all actors their x and y and z

340
00:11:52,160 --> 00:11:53,680
coordinates in the world space are held

341
00:11:53,680 --> 00:11:56,720
at offsets 24 28 and 2c within their

342
00:11:56,720 --> 00:11:58,720
allocated memory block in the heap the

343
00:11:58,720 --> 00:12:00,160
boomerang will take the address to the

344
00:12:00,160 --> 00:12:02,560
pointer the actor is holding and these

345
00:12:02,560 --> 00:12:03,920
values

346
00:12:03,920 --> 00:12:05,519
add these values to it and then write

347
00:12:05,519 --> 00:12:07,920
that data at those memory locations so

348
00:12:07,920 --> 00:12:10,079
this would effectively modify the x y

349
00:12:10,079 --> 00:12:11,519
and z coordinates of the actor it's

350
00:12:11,519 --> 00:12:12,399
holding

351
00:12:12,399 --> 00:12:14,720
however if a stale reference

352
00:12:14,720 --> 00:12:16,560
that is now pointing to an actor overlay

353
00:12:16,560 --> 00:12:19,519
uh instead if if it's a stab reference

354
00:12:19,519 --> 00:12:21,200
some unintended side effects can occur

355
00:12:21,200 --> 00:12:24,399
because each actor overlay is different

356
00:12:24,399 --> 00:12:25,839
but they're just blocks of data so the

357
00:12:25,839 --> 00:12:27,440
boomerang is still going to obliviously

358
00:12:27,440 --> 00:12:30,399
write data to offsets 2 4 2 8 and 2c

359
00:12:30,399 --> 00:12:32,240
into that memory block but it'll be

360
00:12:32,240 --> 00:12:35,040
writing 32-bit float data into places

361
00:12:35,040 --> 00:12:37,279
where 32-bit mips assembly instructions

362
00:12:37,279 --> 00:12:38,800
are supposed to be held

363
00:12:38,800 --> 00:12:40,320
if the code for this overlay gets

364
00:12:40,320 --> 00:12:42,079
executed

365
00:12:42,079 --> 00:12:43,760
after the boomerang modifies it it will

366
00:12:43,760 --> 00:12:45,760
likely crash because it's probably not

367
00:12:45,760 --> 00:12:47,600
going to be sensible data it might be

368
00:12:47,600 --> 00:12:50,079
completely invalid assembly instructions

369
00:12:50,079 --> 00:12:51,920
but what if we could control exactly

370
00:12:51,920 --> 00:12:55,040
what values were being written

371
00:12:55,040 --> 00:12:57,680
by the actor and what instructions from

372
00:12:57,680 --> 00:12:59,519
the overlay are being overwritten so we

373
00:12:59,519 --> 00:13:01,680
could effectively modify the code that

374
00:13:01,680 --> 00:13:03,600
the game executes we could maybe make it

375
00:13:03,600 --> 00:13:05,279
do different things basically whatever

376
00:13:05,279 --> 00:13:07,519
we like and this is the essence of a

377
00:13:07,519 --> 00:13:09,279
stale reference manipulation or a use

378
00:13:09,279 --> 00:13:10,880
after free exploit

379
00:13:10,880 --> 00:13:11,920
okay

380
00:13:11,920 --> 00:13:13,920
so in the triforce percent run what

381
00:13:13,920 --> 00:13:15,920
we're referring to this this run we

382
00:13:15,920 --> 00:13:18,800
achieve srm by getting link to pick up

383
00:13:18,800 --> 00:13:21,120
an item while it's cold in other words

384
00:13:21,120 --> 00:13:22,800
it's not being drawn because it's either

385
00:13:22,800 --> 00:13:24,720
off screen or too far away from the

386
00:13:24,720 --> 00:13:25,839
camera

387
00:13:25,839 --> 00:13:27,920
without allowing the item to be uncalled

388
00:13:27,920 --> 00:13:30,720
in other words put back in view we pass

389
00:13:30,720 --> 00:13:32,480
through a loading zone so that the item

390
00:13:32,480 --> 00:13:34,720
unloads and link has a stale reference

391
00:13:34,720 --> 00:13:35,760
to it

392
00:13:35,760 --> 00:13:37,440
we then come back through the loading

393
00:13:37,440 --> 00:13:39,519
zone to get a particular actor overlay

394
00:13:39,519 --> 00:13:41,279
to occupy the memory that was originally

395
00:13:41,279 --> 00:13:43,279
taken up by the item that link was wink

396
00:13:43,279 --> 00:13:44,320
is holding

397
00:13:44,320 --> 00:13:45,839
but

398
00:13:45,839 --> 00:13:47,440
before doing all of that we have to get

399
00:13:47,440 --> 00:13:50,399
the heap in a very specific

400
00:13:50,399 --> 00:13:51,279
state

401
00:13:51,279 --> 00:13:52,480
so

402
00:13:52,480 --> 00:13:54,240
it may seem that actors being loaded and

403
00:13:54,240 --> 00:13:55,839
unloaded and freed from the heap is

404
00:13:55,839 --> 00:13:57,920
random it's actually very deterministic

405
00:13:57,920 --> 00:13:59,760
by collecting items such as rupees we

406
00:13:59,760 --> 00:14:02,480
can prevent them from loading in

407
00:14:02,480 --> 00:14:04,240
each time the loading zone is triggered

408
00:14:04,240 --> 00:14:06,399
also since mito is nearby he's a

409
00:14:06,399 --> 00:14:07,279
character you're going to see in a

410
00:14:07,279 --> 00:14:09,120
second the direction the camera that's

411
00:14:09,120 --> 00:14:11,360
facing is important as well because he's

412
00:14:11,360 --> 00:14:12,959
also on screen so if the camera is

413
00:14:12,959 --> 00:14:15,040
facing toward the main room mida won't

414
00:14:15,040 --> 00:14:16,959
unload causing his overlay to stay put

415
00:14:16,959 --> 00:14:19,040
while his actor instance moves around in

416
00:14:19,040 --> 00:14:21,120
memory by switching the direction of the

417
00:14:21,120 --> 00:14:23,120
camera while walking back and forth over

418
00:14:23,120 --> 00:14:25,440
this loading zone all of the actors and

419
00:14:25,440 --> 00:14:27,120
the actor overlays in the heat get

420
00:14:27,120 --> 00:14:29,680
shifted around in a very precise way so

421
00:14:29,680 --> 00:14:30,959
the data you're seeing at the top of the

422
00:14:30,959 --> 00:14:33,279
screen is the actual data in memory it's

423
00:14:33,279 --> 00:14:34,720
just animated here with different

424
00:14:34,720 --> 00:14:36,480
symbols so you can see what that might

425
00:14:36,480 --> 00:14:39,839
look like as a representation

426
00:14:40,480 --> 00:14:42,800
so after the seemingly arbitrary walking

427
00:14:42,800 --> 00:14:46,160
back and forth in this hallway

428
00:14:47,279 --> 00:14:49,199
the heap will be laid out in such a way

429
00:14:49,199 --> 00:14:51,600
that it'll allow a very specific actor

430
00:14:51,600 --> 00:14:53,920
overlay to load in the in that location

431
00:14:53,920 --> 00:14:56,079
and we want that to happen for later i'm

432
00:14:56,079 --> 00:14:58,500
gonna jump ahead a little bit here

433
00:14:58,500 --> 00:14:59,920
[Music]

434
00:14:59,920 --> 00:15:02,480
that was too far

435
00:15:02,480 --> 00:15:04,480
okay so normally the camera sticks

436
00:15:04,480 --> 00:15:05,680
around link as you're playing the game

437
00:15:05,680 --> 00:15:07,519
making it impossible to pick up an item

438
00:15:07,519 --> 00:15:09,279
and walk around with it while it's cold

439
00:15:09,279 --> 00:15:11,199
but we can use a glitch to force the

440
00:15:11,199 --> 00:15:13,760
camera to always stay behind link and

441
00:15:13,760 --> 00:15:16,399
then use another glitch

442
00:15:16,399 --> 00:15:19,120
that was a glitch

443
00:15:19,440 --> 00:15:21,519
i lost my notes uh we can use another

444
00:15:21,519 --> 00:15:24,240
glitch to

445
00:15:24,240 --> 00:15:25,760
okay yeah there's this rock that we're

446
00:15:25,760 --> 00:15:27,279
going to talk about here in just a

447
00:15:27,279 --> 00:15:28,480
second

448
00:15:28,480 --> 00:15:30,800
let me get back

449
00:15:30,800 --> 00:15:34,000
into my notes here

450
00:15:37,600 --> 00:15:38,959
okay so

451
00:15:38,959 --> 00:15:40,240
we've got this rock that we're going to

452
00:15:40,240 --> 00:15:41,680
mess with a lot we're going to mess with

453
00:15:41,680 --> 00:15:42,720
this rock quite a bit and it's going to

454
00:15:42,720 --> 00:15:44,399
cause him a lot of trouble by the way

455
00:15:44,399 --> 00:15:46,240
this rock is kind of a pain in the butt

456
00:15:46,240 --> 00:15:47,600
but

457
00:15:47,600 --> 00:15:50,480
uh okay

458
00:15:50,959 --> 00:15:52,320
so we're going to get this

459
00:15:52,320 --> 00:15:54,560
come on let's play again for me there we

460
00:15:54,560 --> 00:15:55,519
go

461
00:15:55,519 --> 00:15:59,199
good animation okay

462
00:15:59,440 --> 00:16:01,440
okay so this rock here

463
00:16:01,440 --> 00:16:03,600
is actually pretty interesting

464
00:16:03,600 --> 00:16:05,600
we're going to use this glitch to force

465
00:16:05,600 --> 00:16:07,199
the camera to always stay behind link

466
00:16:07,199 --> 00:16:08,639
we're going to use another glitch to

467
00:16:08,639 --> 00:16:11,199
move around while attacks text boxes

468
00:16:11,199 --> 00:16:12,720
open so that we get the camera to move

469
00:16:12,720 --> 00:16:14,639
very far away from link which will call

470
00:16:14,639 --> 00:16:16,560
any actors that are near them

471
00:16:16,560 --> 00:16:18,160
so because of the heat manipulation we

472
00:16:18,160 --> 00:16:20,560
did earlier we know exactly where in the

473
00:16:20,560 --> 00:16:23,600
heap data that this rock is it's at 801

474
00:16:23,600 --> 00:16:26,000
f 7310 you can see that on the screen on

475
00:16:26,000 --> 00:16:27,680
the right there

476
00:16:27,680 --> 00:16:29,440
when link is carrying an actor he

477
00:16:29,440 --> 00:16:31,120
updates the position and rotation of

478
00:16:31,120 --> 00:16:32,560
that actor so that it appears in his

479
00:16:32,560 --> 00:16:34,959
hands over overhead you can see us

480
00:16:34,959 --> 00:16:36,639
walking

481
00:16:36,639 --> 00:16:38,560
in an area that is kind of hard to see

482
00:16:38,560 --> 00:16:42,079
so we put an overhead camera in here

483
00:16:42,240 --> 00:16:44,240
the rotation of an actor is a 16 bit

484
00:16:44,240 --> 00:16:46,399
value and it's started off set b4 from

485
00:16:46,399 --> 00:16:48,079
the start of the actors data so if the

486
00:16:48,079 --> 00:16:49,600
rock is stored at this address we know

487
00:16:49,600 --> 00:16:50,800
that the address will be the one that's

488
00:16:50,800 --> 00:16:52,959
modified in this case the rotation value

489
00:16:52,959 --> 00:16:55,040
is just link's rotations value since

490
00:16:55,040 --> 00:16:56,560
it's very easy to control what angle

491
00:16:56,560 --> 00:16:58,639
link is facing by walking around this is

492
00:16:58,639 --> 00:17:00,160
the value we can use to write arbitrary

493
00:17:00,160 --> 00:17:02,320
data which gets interpreted as arbitrary

494
00:17:02,320 --> 00:17:04,880
code when executed as part of the actor

495
00:17:04,880 --> 00:17:07,199
overlay as you'll see in just a second

496
00:17:07,199 --> 00:17:08,880
so the camera is still stuck in a

497
00:17:08,880 --> 00:17:11,359
position very far away we carry it

498
00:17:11,359 --> 00:17:12,959
through this invisible rock all the way

499
00:17:12,959 --> 00:17:14,480
to this loading zone and then walking

500
00:17:14,480 --> 00:17:16,240
back and forth through it uh one last

501
00:17:16,240 --> 00:17:17,039
time

502
00:17:17,039 --> 00:17:19,679
so the rock that link is holding gets

503
00:17:19,679 --> 00:17:21,839
unloaded because it's cold away and

504
00:17:21,839 --> 00:17:23,520
because of the heat manipulation we did

505
00:17:23,520 --> 00:17:26,640
earlier an actor overlay gets allocated

506
00:17:26,640 --> 00:17:28,319
in the same memory region that the rock

507
00:17:28,319 --> 00:17:29,840
took up earlier

508
00:17:29,840 --> 00:17:32,480
so you see link is walking we have an

509
00:17:32,480 --> 00:17:34,640
overhead camera view that uh allows us

510
00:17:34,640 --> 00:17:36,400
to kind of see where link is going and

511
00:17:36,400 --> 00:17:37,840
see he's wandering into this other

512
00:17:37,840 --> 00:17:40,240
loading zone area and that causes all of

513
00:17:40,240 --> 00:17:42,640
that memory change to happen

514
00:17:42,640 --> 00:17:44,799
so

515
00:17:44,799 --> 00:17:46,640
there's a function

516
00:17:46,640 --> 00:17:48,000
that is going to be really important

517
00:17:48,000 --> 00:17:50,400
that belongs to an item an actor known

518
00:17:50,400 --> 00:17:52,000
as the wonder item

519
00:17:52,000 --> 00:17:53,760
so this wonder item is is kind of

520
00:17:53,760 --> 00:17:55,679
interesting

521
00:17:55,679 --> 00:17:57,919
so it's an

522
00:17:57,919 --> 00:17:59,760
invisible actor that triggers the

523
00:17:59,760 --> 00:18:01,360
collection of invisible items such as

524
00:18:01,360 --> 00:18:02,880
rupees and there's a function within the

525
00:18:02,880 --> 00:18:05,120
actor overlay that gets run whenever the

526
00:18:05,120 --> 00:18:07,200
wonder item is uncalled which is

527
00:18:07,200 --> 00:18:09,039
whenever it's in view of the camera so

528
00:18:09,039 --> 00:18:10,240
it lines up with the address we have

529
00:18:10,240 --> 00:18:12,960
control over thanks to srm

530
00:18:12,960 --> 00:18:14,640
the exact instruction we end up

531
00:18:14,640 --> 00:18:16,960
overwriting is a branch instruction now

532
00:18:16,960 --> 00:18:19,360
we have

533
00:18:19,520 --> 00:18:21,679
uh did you have each instruction is

534
00:18:21,679 --> 00:18:24,080
about 30 is a yeah it's 32 bits wide but

535
00:18:24,080 --> 00:18:26,720
the rotation value is just 16 bits

536
00:18:26,720 --> 00:18:28,799
so we can only manipulate half of the

537
00:18:28,799 --> 00:18:30,400
instruction which is the branch offset

538
00:18:30,400 --> 00:18:32,880
this is zero zero zero two portion

539
00:18:32,880 --> 00:18:35,200
we can replace the branch offset with

540
00:18:35,200 --> 00:18:36,400
any value from

541
00:18:36,400 --> 00:18:38,640
eight thousand to seven fff which is

542
00:18:38,640 --> 00:18:40,400
negative thirty two thousand seven sixty

543
00:18:40,400 --> 00:18:44,000
eight to positive 32 768 in decimal it

544
00:18:44,000 --> 00:18:45,440
means that when the game executes this

545
00:18:45,440 --> 00:18:47,039
instruction and branches we can get the

546
00:18:47,039 --> 00:18:48,799
program counter to jump over 32 000

547
00:18:48,799 --> 00:18:51,440
instructions forward or backward

548
00:18:51,440 --> 00:18:53,039
the instruction that we're working with

549
00:18:53,039 --> 00:18:56,400
is located in address 801 seven three c

550
00:18:56,400 --> 00:19:00,400
four so we can jump as far forward

551
00:19:00,400 --> 00:19:02,720
as

552
00:19:04,640 --> 00:19:06,559
eight zero two one

553
00:19:06,559 --> 00:19:08,880
seven three c four

554
00:19:08,880 --> 00:19:12,320
and as far back as address eight zero

555
00:19:12,320 --> 00:19:15,120
one d seven three c eight

556
00:19:15,120 --> 00:19:16,960
the only problem is the controller data

557
00:19:16,960 --> 00:19:19,360
is stored at eight zero one one d seven

558
00:19:19,360 --> 00:19:21,600
nine zero which is outside of that range

559
00:19:21,600 --> 00:19:23,200
what it means is that we have to daisy

560
00:19:23,200 --> 00:19:25,120
chain our drum jump instructions because

561
00:19:25,120 --> 00:19:26,799
we can't we can't jump all the way to

562
00:19:26,799 --> 00:19:30,639
where we need to be in just one hop

563
00:19:30,720 --> 00:19:33,919
with this modified branch we can jump to

564
00:19:33,919 --> 00:19:35,919
somewhere else in heap and because of

565
00:19:35,919 --> 00:19:37,520
our precise heat manipulation we know

566
00:19:37,520 --> 00:19:39,280
exactly where everything is loaded this

567
00:19:39,280 --> 00:19:40,640
means we can encode a longer jump

568
00:19:40,640 --> 00:19:42,240
instruction somewhere within the memory

569
00:19:42,240 --> 00:19:43,760
of the heap that jumps directly to the

570
00:19:43,760 --> 00:19:45,600
controller data then have our modified

571
00:19:45,600 --> 00:19:47,679
branch instruction branch to this new

572
00:19:47,679 --> 00:19:49,200
jump instruction

573
00:19:49,200 --> 00:19:53,840
so the main disadvantage of this is

574
00:19:55,440 --> 00:19:56,880
we

575
00:19:56,880 --> 00:19:58,720
we have some limitations

576
00:19:58,720 --> 00:20:01,919
it's kind of frustrating

577
00:20:03,200 --> 00:20:04,960
it only has 16 bits that we can work

578
00:20:04,960 --> 00:20:07,600
with we need more than that so a jump

579
00:20:07,600 --> 00:20:10,320
instruction allocates a full 26 bits to

580
00:20:10,320 --> 00:20:11,679
the jump address which is enough to get

581
00:20:11,679 --> 00:20:13,440
us to the controller data

582
00:20:13,440 --> 00:20:14,480
so

583
00:20:14,480 --> 00:20:16,960
if we had to locate

584
00:20:16,960 --> 00:20:19,200
uh we need to find 32-bit somewhere in

585
00:20:19,200 --> 00:20:21,440
memory to locate and it turns out that

586
00:20:21,440 --> 00:20:24,559
uh the data in the heap for uh there's a

587
00:20:24,559 --> 00:20:25,919
portion of the data in the heap it's uh

588
00:20:25,919 --> 00:20:28,400
that has data for link himself like his

589
00:20:28,400 --> 00:20:30,559
angle his movement angle which direction

590
00:20:30,559 --> 00:20:31,679
he's moving

591
00:20:31,679 --> 00:20:35,600
which thing he's targeting and so on so

592
00:20:35,600 --> 00:20:37,440
what we need to do is orient link at a

593
00:20:37,440 --> 00:20:39,360
very precise angle so that those two

594
00:20:39,360 --> 00:20:41,360
angles when interpreted as a single mips

595
00:20:41,360 --> 00:20:43,600
instruction encode a jump instruction

596
00:20:43,600 --> 00:20:45,280
that jumps to the controller data so our

597
00:20:45,280 --> 00:20:47,039
whole point here is trying to get code

598
00:20:47,039 --> 00:20:49,200
to jump to the controller data right

599
00:20:49,200 --> 00:20:50,799
so it's not easy to do but we can align

600
00:20:50,799 --> 00:20:52,480
the camera with exact cardinal

601
00:20:52,480 --> 00:20:54,400
directions then perform actions that are

602
00:20:54,400 --> 00:20:57,200
known to rotate link by an exact amount

603
00:20:57,200 --> 00:20:58,720
and that will allow us to get the angles

604
00:20:58,720 --> 00:21:00,159
that we need

605
00:21:00,159 --> 00:21:01,360
so here are the values that we're going

606
00:21:01,360 --> 00:21:03,440
to get written in preparation for that

607
00:21:03,440 --> 00:21:06,960
at eight zero one uh f seven three c

608
00:21:06,960 --> 00:21:08,720
four the rotation value

609
00:21:08,720 --> 00:21:11,280
of eight f eight zero is written in

610
00:21:11,280 --> 00:21:13,200
order to make the branch construction

611
00:21:13,200 --> 00:21:17,440
jump to eight zero one db

612
00:21:17,440 --> 00:21:19,520
now this isn't the exact address that we

613
00:21:19,520 --> 00:21:22,320
need to jump to but it's close enough

614
00:21:22,320 --> 00:21:23,919
and the game eventually makes it down to

615
00:21:23,919 --> 00:21:24,880
there

616
00:21:24,880 --> 00:21:27,120
so that's located at 801

617
00:21:27,120 --> 00:21:29,600
db25c and encodes a jump address to

618
00:21:29,600 --> 00:21:32,159
eight zero one one d seven seven c this

619
00:21:32,159 --> 00:21:32,960
isn't

620
00:21:32,960 --> 00:21:34,640
exactly

621
00:21:34,640 --> 00:21:37,679
oh i pardoned by that that was uh

622
00:21:37,679 --> 00:21:41,200
just catching up here a little bit um

623
00:21:41,200 --> 00:21:43,120
we're basically getting everything set

624
00:21:43,120 --> 00:21:45,520
up so that we can

625
00:21:45,520 --> 00:21:48,640
take link's movement and his angles and

626
00:21:48,640 --> 00:21:51,200
make them into actual jump instruction

627
00:21:51,200 --> 00:21:52,799
that's valid

628
00:21:52,799 --> 00:21:53,520
so

629
00:21:53,520 --> 00:21:55,360
we've shown you a video of kind of what

630
00:21:55,360 --> 00:21:56,880
it takes to get set up we're going to

631
00:21:56,880 --> 00:21:58,480
try to do it live

632
00:21:58,480 --> 00:22:00,400
it might work it might not work we're

633
00:22:00,400 --> 00:22:01,679
going to find out

634
00:22:01,679 --> 00:22:03,120
this is a very tricky glitch and you're

635
00:22:03,120 --> 00:22:04,480
going to see why in a second so i'm

636
00:22:04,480 --> 00:22:07,039
going to switch away from my

637
00:22:07,039 --> 00:22:08,480
prepared slides and we're going to pull

638
00:22:08,480 --> 00:22:10,159
this up here

639
00:22:10,159 --> 00:22:12,480
all right so blaster mac is going to

640
00:22:12,480 --> 00:22:13,919
attempt to

641
00:22:13,919 --> 00:22:15,440
get

642
00:22:15,440 --> 00:22:18,799
this rock in particular working so

643
00:22:18,799 --> 00:22:21,280
uh this is the fun part

644
00:22:21,280 --> 00:22:22,480
trying to get

645
00:22:22,480 --> 00:22:24,960
the camera locked correctly and get this

646
00:22:24,960 --> 00:22:26,559
what we call a

647
00:22:26,559 --> 00:22:28,799
uh return

648
00:22:28,799 --> 00:22:30,320
uh state

649
00:22:30,320 --> 00:22:32,000
is very tricky

650
00:22:32,000 --> 00:22:33,679
takes a couple of attempts

651
00:22:33,679 --> 00:22:34,480
do you want to talk about what you're

652
00:22:34,480 --> 00:22:35,919
doing here

653
00:22:35,919 --> 00:22:38,240
um well right now i'm

654
00:22:38,240 --> 00:22:40,240
setting the heap up in such a way that

655
00:22:40,240 --> 00:22:41,120
we

656
00:22:41,120 --> 00:22:43,120
know um

657
00:22:43,120 --> 00:22:44,480
what it's going to be when we pick up

658
00:22:44,480 --> 00:22:46,559
the rock so i'm walking back and forth

659
00:22:46,559 --> 00:22:48,000
between loading zones

660
00:22:48,000 --> 00:22:50,559
and unloading and loading stuff in a

661
00:22:50,559 --> 00:22:51,760
certain way

662
00:22:51,760 --> 00:22:53,360
so that we

663
00:22:53,360 --> 00:22:55,039
can kind of get a better idea of what

664
00:22:55,039 --> 00:22:56,950
we're doing

665
00:22:56,950 --> 00:22:58,240
[Music]

666
00:22:58,240 --> 00:22:59,600
and then

667
00:22:59,600 --> 00:23:01,600
after i'm done i will perform a glitch

668
00:23:01,600 --> 00:23:04,240
called return a

669
00:23:04,240 --> 00:23:05,760
that locks the camera in place and i

670
00:23:05,760 --> 00:23:07,600
will try to do some light movement but

671
00:23:07,600 --> 00:23:09,360
we'll get that

672
00:23:09,360 --> 00:23:12,000
in just a second so if everything is

673
00:23:12,000 --> 00:23:14,640
correct so this is a glitch that locks

674
00:23:14,640 --> 00:23:16,559
the camera in a funny way and it makes

675
00:23:16,559 --> 00:23:18,960
your see where it says put away if this

676
00:23:18,960 --> 00:23:20,799
is done correctly what ends up happening

677
00:23:20,799 --> 00:23:23,120
is it changes to return

678
00:23:23,120 --> 00:23:25,360
so now you've got this return state

679
00:23:25,360 --> 00:23:27,360
stuck and it means that the camera is

680
00:23:27,360 --> 00:23:28,400
going to

681
00:23:28,400 --> 00:23:30,799
stay there

682
00:23:30,799 --> 00:23:32,240
looks like we lost our game audio but

683
00:23:32,240 --> 00:23:35,400
that's okay

684
00:23:37,679 --> 00:23:38,960
i'm actually unsure why we lost our game

685
00:23:38,960 --> 00:23:40,799
audio it's okay i think we lost the

686
00:23:40,799 --> 00:23:43,120
audio from game oh there we go there we

687
00:23:43,120 --> 00:23:44,080
go

688
00:23:44,080 --> 00:23:45,440
yeah we actually need those audio cues

689
00:23:45,440 --> 00:23:46,720
we're going to need serious time here in

690
00:23:46,720 --> 00:23:48,799
a second because he'll need to listen to

691
00:23:48,799 --> 00:23:51,440
audio cues okay so right now he's

692
00:23:51,440 --> 00:23:55,520
walking back over to a this this

693
00:23:55,520 --> 00:23:57,679
crawl area and this will lock link's

694
00:23:57,679 --> 00:24:01,039
camera in a different direction

695
00:24:02,559 --> 00:24:05,520
there you go

696
00:24:05,520 --> 00:24:06,480
and now i think you're going to get

697
00:24:06,480 --> 00:24:08,640
medieval on a sign

698
00:24:08,640 --> 00:24:10,559
what did that sign do to you

699
00:24:10,559 --> 00:24:12,880
it was just in the way it was in the way

700
00:24:12,880 --> 00:24:16,070
throwing nuts at just to make a break

701
00:24:16,070 --> 00:24:17,360
[Music]

702
00:24:17,360 --> 00:24:18,960
all right now this is going to require

703
00:24:18,960 --> 00:24:20,559
some interesting

704
00:24:20,559 --> 00:24:22,320
work here it needs to lock the camera

705
00:24:22,320 --> 00:24:24,559
behind link and there's this rock we

706
00:24:24,559 --> 00:24:26,000
talked about earlier this rock is kind

707
00:24:26,000 --> 00:24:28,400
of a pain so we've got to get this angle

708
00:24:28,400 --> 00:24:30,880
just right

709
00:24:30,880 --> 00:24:32,320
and if it works it'll say grab at the

710
00:24:32,320 --> 00:24:33,600
top

711
00:24:33,600 --> 00:24:35,600
you got it there we go okay

712
00:24:35,600 --> 00:24:37,760
now

713
00:24:40,880 --> 00:24:42,799
okay this is serious time so he has to

714
00:24:42,799 --> 00:24:44,080
listen to some audio cues and here

715
00:24:44,080 --> 00:24:45,520
listen to some media

716
00:24:45,520 --> 00:24:48,480
some audio music beats so here take it

717
00:24:48,480 --> 00:24:51,480
away

718
00:24:54,190 --> 00:25:07,460
[Music]

719
00:25:07,679 --> 00:25:09,440
luckily thanks to the magic of save

720
00:25:09,440 --> 00:25:11,600
states i can easily get back to my

721
00:25:11,600 --> 00:25:13,679
starting point right that is one thing

722
00:25:13,679 --> 00:25:15,200
that is advantageous with this practice

723
00:25:15,200 --> 00:25:17,120
rom is it also shows you the rotation at

724
00:25:17,120 --> 00:25:18,480
the bottom like what buttons are being

725
00:25:18,480 --> 00:25:19,360
held

726
00:25:19,360 --> 00:25:23,559
sorry i'm talking over his audio cue

727
00:25:26,860 --> 00:25:30,189
[Music]

728
00:25:30,240 --> 00:25:31,279
so the problem is you got to do this

729
00:25:31,279 --> 00:25:33,279
entirely blind you can see link kind of

730
00:25:33,279 --> 00:25:34,559
wandering around down there but he's

731
00:25:34,559 --> 00:25:37,550
very tiny

732
00:25:37,550 --> 00:25:56,569
[Music]

733
00:26:00,480 --> 00:26:03,480
so

734
00:26:10,490 --> 00:26:33,770
[Music]

735
00:26:36,400 --> 00:26:38,559
look at this a couple more attempts

736
00:26:38,559 --> 00:26:41,440
it's not easy to do

737
00:26:47,200 --> 00:26:48,480
so you can see each attempt through

738
00:26:48,480 --> 00:26:50,400
blaster mac's moving link can see tiny

739
00:26:50,400 --> 00:26:52,159
link in the background and it's just a

740
00:26:52,159 --> 00:26:53,360
matter of getting the angles just right

741
00:26:53,360 --> 00:26:54,799
to get them through the doorway it's not

742
00:26:54,799 --> 00:26:57,799
easy

743
00:27:03,240 --> 00:27:26,539
[Music]

744
00:27:30,240 --> 00:27:33,880
at least it's good music

745
00:27:35,990 --> 00:27:51,589
[Music]

746
00:27:53,120 --> 00:27:54,159
let me know when you get to the audio

747
00:27:54,159 --> 00:27:55,360
cue part i'm going to quickly go back

748
00:27:55,360 --> 00:27:59,039
and show you why this is so difficult so

749
00:27:59,039 --> 00:28:00,559
from here

750
00:28:00,559 --> 00:28:02,880
you can uh you can see

751
00:28:02,880 --> 00:28:05,440
link is has to wander oh we got too far

752
00:28:05,440 --> 00:28:06,880
here

753
00:28:06,880 --> 00:28:09,279
right here right up there okay

754
00:28:09,279 --> 00:28:11,120
so this is what's basically happening

755
00:28:11,120 --> 00:28:13,200
we've got this rock here

756
00:28:13,200 --> 00:28:15,200
now this section here you can see

757
00:28:15,200 --> 00:28:16,720
overhead there's a little bit of a jump

758
00:28:16,720 --> 00:28:18,080
cut in this video but

759
00:28:18,080 --> 00:28:19,919
link is wandering around through this

760
00:28:19,919 --> 00:28:21,600
hallway it's very difficult to get it

761
00:28:21,600 --> 00:28:24,000
lined up right

762
00:28:24,000 --> 00:28:25,679
so what blastermax trying to do right

763
00:28:25,679 --> 00:28:28,159
now is hit that tiny window of uh of

764
00:28:28,159 --> 00:28:30,600
where that hallway is

765
00:28:30,600 --> 00:28:48,589
[Music]

766
00:28:50,000 --> 00:28:51,919
so stop me if you need to stop talking

767
00:28:51,919 --> 00:28:53,600
but one of the reasons that we've had

768
00:28:53,600 --> 00:28:55,440
difficulty over the past two weeks to

769
00:28:55,440 --> 00:28:58,399
reproduce what safe state did is

770
00:28:58,399 --> 00:29:00,159
safe state's just amazing at this game

771
00:29:00,159 --> 00:29:02,399
they've spent a lot of time

772
00:29:02,399 --> 00:29:05,120
practicing doing rather

773
00:29:05,120 --> 00:29:07,760
intense glitches like this all the time

774
00:29:07,760 --> 00:29:11,559
well that was a different one

775
00:29:12,159 --> 00:29:13,760
so yeah we're uh we're probably going to

776
00:29:13,760 --> 00:29:15,120
have to call it in a bit you want to try

777
00:29:15,120 --> 00:29:16,880
one more time i will try one more time

778
00:29:16,880 --> 00:29:18,320
yeah

779
00:29:18,320 --> 00:29:32,200
[Music]

780
00:29:32,320 --> 00:29:34,240
oh bummer

781
00:29:34,240 --> 00:29:36,559
looks like you're too far south maybe

782
00:29:36,559 --> 00:29:38,799
i think so let me try one more time then

783
00:29:38,799 --> 00:29:40,640
then we can continue i don't want to

784
00:29:40,640 --> 00:29:42,399
hold up the presentation too much that's

785
00:29:42,399 --> 00:29:44,240
okay okay that's

786
00:29:44,240 --> 00:29:45,600
that was my attempt that was your

787
00:29:45,600 --> 00:29:47,440
attempt okay all right

788
00:29:47,440 --> 00:29:49,840
it's okay

789
00:29:52,559 --> 00:29:54,640
so here's what we're gonna do uh because

790
00:29:54,640 --> 00:29:57,440
this is so dang tricky what we're gonna

791
00:29:57,440 --> 00:29:58,720
do is

792
00:29:58,720 --> 00:30:00,960
switch to a shortcut rom and this is not

793
00:30:00,960 --> 00:30:03,679
giving up by any stretch um so basically

794
00:30:03,679 --> 00:30:05,120
the shortcut rom

795
00:30:05,120 --> 00:30:08,320
is going to allow us to

796
00:30:08,320 --> 00:30:10,640
go ahead and switch off yeah you're good

797
00:30:10,640 --> 00:30:14,799
the shortcut rom is going to allow us to

798
00:30:14,960 --> 00:30:17,840
basically put the game in the state of

799
00:30:17,840 --> 00:30:19,360
getting the wonder item without having

800
00:30:19,360 --> 00:30:21,440
to do all of the complicated human setup

801
00:30:21,440 --> 00:30:22,720
it's fascinating that this particular

802
00:30:22,720 --> 00:30:24,640
run requires both a human runner and

803
00:30:24,640 --> 00:30:26,559
taskbot so taskbar is currently

804
00:30:26,559 --> 00:30:28,480
connected to the controller ports uh two

805
00:30:28,480 --> 00:30:29,840
three and four right now we're going to

806
00:30:29,840 --> 00:30:31,840
connect them to controller port one as

807
00:30:31,840 --> 00:30:33,760
well here in a little bit

808
00:30:33,760 --> 00:30:35,840
normally if you were to do this on stage

809
00:30:35,840 --> 00:30:37,200
the way save state did it a couple of

810
00:30:37,200 --> 00:30:38,960
weeks ago you would have all of link's

811
00:30:38,960 --> 00:30:41,600
positions right and everything would be

812
00:30:41,600 --> 00:30:43,679
perfectly in order

813
00:30:43,679 --> 00:30:45,600
but it's really hard to reproduce so the

814
00:30:45,600 --> 00:30:48,960
shortcut rom replaces only 271 bytes all

815
00:30:48,960 --> 00:30:51,120
it does is takes the original 1.0

816
00:30:51,120 --> 00:30:52,880
release of the legend zelda ocarina of

817
00:30:52,880 --> 00:30:56,640
time patches 271 bytes and makes it so

818
00:30:56,640 --> 00:30:58,320
that the wonder item appears immediately

819
00:30:58,320 --> 00:30:59,919
when you walk forward from the starting

820
00:30:59,919 --> 00:31:01,120
location

821
00:31:01,120 --> 00:31:02,480
so

822
00:31:02,480 --> 00:31:05,440
you ready yeah

823
00:31:05,440 --> 00:31:08,159
all right so what you're seeing here is

824
00:31:08,159 --> 00:31:09,919
uh we've got a different game a

825
00:31:09,919 --> 00:31:11,120
different difference around this is a

826
00:31:11,120 --> 00:31:14,240
shortcut rom and i am going to pull up a

827
00:31:14,240 --> 00:31:17,640
terminal here

828
00:31:17,830 --> 00:31:20,720
[Music]

829
00:31:20,720 --> 00:31:23,440
okay all right we are gonna do

830
00:31:23,440 --> 00:31:25,440
all right you ready

831
00:31:25,440 --> 00:31:27,360
he's all hooked up okay oh actually you

832
00:31:27,360 --> 00:31:29,279
need to reconnect and really uh tell

833
00:31:29,279 --> 00:31:32,080
navi to go away navi gets gets very

834
00:31:32,080 --> 00:31:33,600
happy she really wants to tell you

835
00:31:33,600 --> 00:31:34,480
something

836
00:31:34,480 --> 00:31:36,320
and if you don't talk to her

837
00:31:36,320 --> 00:31:37,760
uh you also have to change your camera

838
00:31:37,760 --> 00:31:39,360
angle back because you're currently oh

839
00:31:39,360 --> 00:31:40,880
no we did it okay you're good all right

840
00:31:40,880 --> 00:31:42,720
we're good all right here it goes

841
00:31:42,720 --> 00:31:45,039
so we have this terminal here i'm to

842
00:31:45,039 --> 00:31:46,399
move it up so you can see what's going

843
00:31:46,399 --> 00:31:47,360
on here

844
00:31:47,360 --> 00:31:49,600
uh

845
00:31:50,320 --> 00:31:53,279
here we go so this is going to be using

846
00:31:53,279 --> 00:31:55,440
a tas tm-32 replay device made by

847
00:31:55,440 --> 00:31:57,279
onosaurus it's this little red box that

848
00:31:57,279 --> 00:31:58,880
taskbot's holding in his hands we're

849
00:31:58,880 --> 00:32:00,320
going gonna be using player ports one

850
00:32:00,320 --> 00:32:01,519
two three and four we're gonna be

851
00:32:01,519 --> 00:32:03,679
sending a shortcut rom and i'm gonna hit

852
00:32:03,679 --> 00:32:05,440
enter now and then funny things are

853
00:32:05,440 --> 00:32:07,840
gonna happen

854
00:32:09,200 --> 00:32:11,360
so this is pressing buttons on the

855
00:32:11,360 --> 00:32:14,159
controller and it's making link do a lot

856
00:32:14,159 --> 00:32:15,760
of crazy things because

857
00:32:15,760 --> 00:32:17,440
as the moment we crossed that threshold

858
00:32:17,440 --> 00:32:20,399
it started loading these instructions as

859
00:32:20,399 --> 00:32:22,480
as data and they're actually being

860
00:32:22,480 --> 00:32:25,120
uh being stored right now so we'll see

861
00:32:25,120 --> 00:32:26,799
what happens here in a second

862
00:32:26,799 --> 00:32:28,720
okay that green line in the upper left

863
00:32:28,720 --> 00:32:29,600
corner

864
00:32:29,600 --> 00:32:31,519
means that this was successful

865
00:32:31,519 --> 00:32:33,679
now a whole lot of things just happened

866
00:32:33,679 --> 00:32:36,080
i'm going to do one other quick uh

867
00:32:36,080 --> 00:32:38,240
script here which is

868
00:32:38,240 --> 00:32:39,760
we're going to do fixed

869
00:32:39,760 --> 00:32:41,440
this is sending data over controller

870
00:32:41,440 --> 00:32:43,200
ports one two three and four and i'm

871
00:32:43,200 --> 00:32:44,320
going to tell you a little bit about

872
00:32:44,320 --> 00:32:46,720
what's happening there in just a second

873
00:32:46,720 --> 00:32:48,559
but we are actually transmitting data

874
00:32:48,559 --> 00:32:50,559
first very slowly and increasingly

875
00:32:50,559 --> 00:32:53,279
quickly to the console now there's one

876
00:32:53,279 --> 00:32:56,760
more we're gonna do

877
00:32:56,880 --> 00:32:58,159
okay

878
00:32:58,159 --> 00:33:00,000
and at this point it's now no longer

879
00:33:00,000 --> 00:33:02,240
using controller port one so blaster mac

880
00:33:02,240 --> 00:33:04,960
can unplug controller port one plug back

881
00:33:04,960 --> 00:33:07,919
in to controller port

882
00:33:07,919 --> 00:33:10,240
to his controller and now all he has to

883
00:33:10,240 --> 00:33:13,279
do is fix up some memory by entering uh

884
00:33:13,279 --> 00:33:15,919
this house over here and uh yeah yes to

885
00:33:15,919 --> 00:33:16,799
start

886
00:33:16,799 --> 00:33:18,640
uh you enter the pause menu and exit and

887
00:33:18,640 --> 00:33:20,880
enter and exit a house

888
00:33:20,880 --> 00:33:25,039
so that will allow us to

889
00:33:25,039 --> 00:33:26,559
that'll allow us to get everything to

890
00:33:26,559 --> 00:33:28,080
the point where we can now do anything

891
00:33:28,080 --> 00:33:29,840
we wanted to with this game i'm going to

892
00:33:29,840 --> 00:33:32,080
give you a sneak preview of what that

893
00:33:32,080 --> 00:33:33,440
looks like

894
00:33:33,440 --> 00:33:35,440
but it ends badly for link if you're not

895
00:33:35,440 --> 00:33:37,279
careful okay

896
00:33:37,279 --> 00:33:39,840
what we now have is arbitrary code that

897
00:33:39,840 --> 00:33:41,200
allows us to take over the game and do

898
00:33:41,200 --> 00:33:43,039
whatever we like and there's a ton of

899
00:33:43,039 --> 00:33:44,640
beta content that was included in

900
00:33:44,640 --> 00:33:45,919
ocarina of time that most people have

901
00:33:45,919 --> 00:33:48,000
never seen before and one of them is

902
00:33:48,000 --> 00:33:49,919
this crazy thing they imported from star

903
00:33:49,919 --> 00:33:53,279
fox it's an r wing this is

904
00:33:53,279 --> 00:33:55,360
in the cartridge we didn't put this

905
00:33:55,360 --> 00:33:56,880
there this is actually in the cartridge

906
00:33:56,880 --> 00:33:58,559
and if you stand around

907
00:33:58,559 --> 00:34:00,799
um you can target it we assume they use

908
00:34:00,799 --> 00:34:02,960
this to test the boss but if you stand

909
00:34:02,960 --> 00:34:04,159
around long enough it will start

910
00:34:04,159 --> 00:34:07,519
shooting at you which is very friendly

911
00:34:07,519 --> 00:34:09,359
right now we are weaponless so we're

912
00:34:09,359 --> 00:34:10,639
just going to run back into a house and

913
00:34:10,639 --> 00:34:12,800
make it go away i think that works i

914
00:34:12,800 --> 00:34:14,800
don't know if it does bad things i think

915
00:34:14,800 --> 00:34:16,879
the intended choice is to kill it but i

916
00:34:16,879 --> 00:34:19,040
think this works too

917
00:34:19,040 --> 00:34:21,280
so we're going to pause here

918
00:34:21,280 --> 00:34:23,199
now keep in mind in the background

919
00:34:23,199 --> 00:34:25,199
taskbot is still connected and is still

920
00:34:25,199 --> 00:34:26,879
sending a whole lot of data and we're

921
00:34:26,879 --> 00:34:28,000
going to talk about what's going on

922
00:34:28,000 --> 00:34:29,918
there in just a second but

923
00:34:29,918 --> 00:34:31,679
for now we're going to leave that game

924
00:34:31,679 --> 00:34:34,320
behind and get back to what's actually

925
00:34:34,320 --> 00:34:36,159
happening here and this is really really

926
00:34:36,159 --> 00:34:40,480
nutty like really really nutty

927
00:34:42,480 --> 00:34:44,719
okay

928
00:34:45,679 --> 00:34:46,800
so

929
00:34:46,800 --> 00:34:48,960
we had a lot that just happened

930
00:34:48,960 --> 00:34:51,280
now bootstrapper one

931
00:34:51,280 --> 00:34:52,800
there's multiple layers of bootstrapping

932
00:34:52,800 --> 00:34:54,719
here so there's bootstrapper one which

933
00:34:54,719 --> 00:34:56,159
is running control data is assembly

934
00:34:56,159 --> 00:34:58,320
instructions which is very very slow so

935
00:34:58,320 --> 00:35:00,480
we want to write a smaller program that

936
00:35:00,480 --> 00:35:01,839
gets us a little faster so we make

937
00:35:01,839 --> 00:35:03,680
bootstrapper two and then bootstrapper

938
00:35:03,680 --> 00:35:05,839
three and then bootstrapper4 and then we

939
00:35:05,839 --> 00:35:08,480
make a hyperspeed loader so each one of

940
00:35:08,480 --> 00:35:10,960
these is is basically building up our uh

941
00:35:10,960 --> 00:35:12,880
control over the system and how fast we

942
00:35:12,880 --> 00:35:15,280
can send data so we basically write a

943
00:35:15,280 --> 00:35:16,320
program to write a program to write a

944
00:35:16,320 --> 00:35:17,839
program to write a hyperspeed loader to

945
00:35:17,839 --> 00:35:19,200
write even more data that becomes a

946
00:35:19,200 --> 00:35:21,760
program it gets interesting

947
00:35:21,760 --> 00:35:22,880
once you get

948
00:35:22,880 --> 00:35:25,040
total control you can do some fun things

949
00:35:25,040 --> 00:35:26,720
so let's talk about how it's treating

950
00:35:26,720 --> 00:35:28,560
that controller data as assembly code so

951
00:35:28,560 --> 00:35:30,400
there's just 24 bytes of memory

952
00:35:30,400 --> 00:35:32,560
dedicated to the controllers there are

953
00:35:32,560 --> 00:35:35,440
two bytes for the buttons

954
00:35:35,440 --> 00:35:38,320
two bytes for the analog stick

955
00:35:38,320 --> 00:35:39,839
and i'm just going to jump ahead a

956
00:35:39,839 --> 00:35:43,160
little bit here

957
00:35:44,800 --> 00:35:46,960
okay so there's the there's two bytes

958
00:35:46,960 --> 00:35:49,839
for the analytics x24

959
00:35:49,839 --> 00:35:51,200
let's see there's the error code byte

960
00:35:51,200 --> 00:35:53,440
and one zero byte there's four sets of

961
00:35:53,440 --> 00:35:55,839
those and each of them

962
00:35:55,839 --> 00:35:58,880
uh one for each of the controllers now a

963
00:35:58,880 --> 00:36:00,880
mips assembly instruction is always 32

964
00:36:00,880 --> 00:36:02,720
bits long or four bytes and a line to a

965
00:36:02,720 --> 00:36:04,400
four byte boundary so the controllers

966
00:36:04,400 --> 00:36:05,920
are created uh treated as assembly

967
00:36:05,920 --> 00:36:07,119
instructions here's how they'll be

968
00:36:07,119 --> 00:36:09,200
organized the first instruction consists

969
00:36:09,200 --> 00:36:10,640
of the first controller's buttons and i

970
00:36:10,640 --> 00:36:12,000
need to go back up here a little bit

971
00:36:12,000 --> 00:36:12,800
here

972
00:36:12,800 --> 00:36:13,520
so

973
00:36:13,520 --> 00:36:15,119
the first instruction consists of this

974
00:36:15,119 --> 00:36:16,720
first controller's buttons and analog

975
00:36:16,720 --> 00:36:18,800
stick bytes the second instruction is

976
00:36:18,800 --> 00:36:20,640
the first controller's error code a zero

977
00:36:20,640 --> 00:36:22,720
byte and the second controller buttons

978
00:36:22,720 --> 00:36:24,320
the third instruction is the second

979
00:36:24,320 --> 00:36:26,400
controller analog bytes its error code

980
00:36:26,400 --> 00:36:28,320
and then a zero byte and then the next

981
00:36:28,320 --> 00:36:29,839
three instructions are the same just for

982
00:36:29,839 --> 00:36:31,839
controllers three and four so if the

983
00:36:31,839 --> 00:36:34,000
control if a controller is connected uh

984
00:36:34,000 --> 00:36:35,359
which all four of them are in this case

985
00:36:35,359 --> 00:36:37,200
the error code is just zero denoting no

986
00:36:37,200 --> 00:36:39,920
error this means these four instructions

987
00:36:39,920 --> 00:36:42,800
will always be half zero which is not

988
00:36:42,800 --> 00:36:43,839
very helpful

989
00:36:43,839 --> 00:36:45,680
additionally other code in the game

990
00:36:45,680 --> 00:36:47,119
zeroes out all input from from

991
00:36:47,119 --> 00:36:48,720
controllers two and four completely

992
00:36:48,720 --> 00:36:50,000
since they were used for some debugging

993
00:36:50,000 --> 00:36:51,839
features and we don't have the ability

994
00:36:51,839 --> 00:36:53,760
to read them at all before

995
00:36:53,760 --> 00:36:55,200
they get wiped out so this leaves us

996
00:36:55,200 --> 00:36:56,800
with only two instructions we fully

997
00:36:56,800 --> 00:36:59,680
control or rather almost fully control

998
00:36:59,680 --> 00:37:02,160
there are only 14 buttons on a nintendo

999
00:37:02,160 --> 00:37:04,000
64 controller which means there are two

1000
00:37:04,000 --> 00:37:05,760
bits in this

1001
00:37:05,760 --> 00:37:07,359
that

1002
00:37:07,359 --> 00:37:09,200
in this data that will uh be mapped

1003
00:37:09,200 --> 00:37:11,680
they'll always be zero basically so we

1004
00:37:11,680 --> 00:37:13,680
have to limit ourselves to instructions

1005
00:37:13,680 --> 00:37:15,680
that already have those as zero

1006
00:37:15,680 --> 00:37:17,520
basically it's kind of annoying but it

1007
00:37:17,520 --> 00:37:19,200
gets the job done

1008
00:37:19,200 --> 00:37:20,960
so after executing the controller data

1009
00:37:20,960 --> 00:37:22,800
as code we still need to return back to

1010
00:37:22,800 --> 00:37:24,160
the normal game function and we can't

1011
00:37:24,160 --> 00:37:25,839
just let the program counter keep

1012
00:37:25,839 --> 00:37:28,560
running or it'll just crash so we have

1013
00:37:28,560 --> 00:37:29,280
to

1014
00:37:29,280 --> 00:37:31,440
reserve our last instruction as a jump

1015
00:37:31,440 --> 00:37:34,240
back to safety but we have to get

1016
00:37:34,240 --> 00:37:35,599
we're currently running in this wonder

1017
00:37:35,599 --> 00:37:37,280
item code so we have to return from that

1018
00:37:37,280 --> 00:37:38,320
function

1019
00:37:38,320 --> 00:37:39,680
there are two bits that are always

1020
00:37:39,680 --> 00:37:42,079
forced to zero so we can't use encoded

1021
00:37:42,079 --> 00:37:44,560
return instruction and we need to

1022
00:37:44,560 --> 00:37:46,560
restore the stack but we can't do this

1023
00:37:46,560 --> 00:37:48,640
in only one instruction so we have to

1024
00:37:48,640 --> 00:37:50,240
encode a jump instruction to some code

1025
00:37:50,240 --> 00:37:52,160
which restores the stack for us

1026
00:37:52,160 --> 00:37:52,880
so

1027
00:37:52,880 --> 00:37:54,000
unfortunately this means we are limited

1028
00:37:54,000 --> 00:37:55,760
to a single instruction

1029
00:37:55,760 --> 00:37:57,599
as long as that wonder item is on screen

1030
00:37:57,599 --> 00:37:59,359
this code will be run every single frame

1031
00:37:59,359 --> 00:38:01,119
and we can change which buttons are

1032
00:38:01,119 --> 00:38:02,839
being pressed on each

1033
00:38:02,839 --> 00:38:06,720
frame so we can execute whatever we like

1034
00:38:06,720 --> 00:38:08,480
uh

1035
00:38:08,480 --> 00:38:09,280
but

1036
00:38:09,280 --> 00:38:11,440
it's kind of slow it basically this game

1037
00:38:11,440 --> 00:38:13,200
runs at 20 frames a second

1038
00:38:13,200 --> 00:38:14,800
and in order to account for lag frames

1039
00:38:14,800 --> 00:38:17,040
we have to send each one twice that

1040
00:38:17,040 --> 00:38:19,200
gives us a final speed of one

1041
00:38:19,200 --> 00:38:21,200
instruction for two frames at 20 frames

1042
00:38:21,200 --> 00:38:23,119
per second or about 10 instructions per

1043
00:38:23,119 --> 00:38:25,040
second that's not very much

1044
00:38:25,040 --> 00:38:27,839
so with only one instruction

1045
00:38:27,839 --> 00:38:30,000
we really can't do a whole lot

1046
00:38:30,000 --> 00:38:32,400
there's just not not much so we have to

1047
00:38:32,400 --> 00:38:34,000
use a global

1048
00:38:34,000 --> 00:38:35,520
pointer

1049
00:38:35,520 --> 00:38:36,560
to

1050
00:38:36,560 --> 00:38:38,160
basically bounce data into and this

1051
00:38:38,160 --> 00:38:39,920
global pointer register

1052
00:38:39,920 --> 00:38:42,480
allows us to

1053
00:38:42,480 --> 00:38:43,680
uh

1054
00:38:43,680 --> 00:38:46,160
store one on one instruction and then

1055
00:38:46,160 --> 00:38:48,560
load it into other areas of memory later

1056
00:38:48,560 --> 00:38:50,160
so our first bootstrapper alternates

1057
00:38:50,160 --> 00:38:53,040
between loads and stores back and forth

1058
00:38:53,040 --> 00:38:54,480
so it writes a program we call

1059
00:38:54,480 --> 00:38:56,480
bootstrapper2

1060
00:38:56,480 --> 00:38:58,720
so now we're doing uh 10 bytes every

1061
00:38:58,720 --> 00:39:00,560
second okay so bootstrapper2 it

1062
00:39:00,560 --> 00:39:02,079
re-enables the controller ports two and

1063
00:39:02,079 --> 00:39:03,920
four it jumps to controller data right

1064
00:39:03,920 --> 00:39:06,480
away it restores the wonder item overlay

1065
00:39:06,480 --> 00:39:08,640
uh so that allows us to

1066
00:39:08,640 --> 00:39:10,880
patch some code and now we're getting

1067
00:39:10,880 --> 00:39:12,800
one instruction per frame 60 frames a

1068
00:39:12,800 --> 00:39:15,680
second that gives us two bytes

1069
00:39:15,680 --> 00:39:18,000
per two instructions so now we're at 60

1070
00:39:18,000 --> 00:39:19,680
bytes a second we're getting there but

1071
00:39:19,680 --> 00:39:21,119
it's still pretty slow we can do we can

1072
00:39:21,119 --> 00:39:22,320
do better

1073
00:39:22,320 --> 00:39:24,960
so bootstrapper three and i'm sorry i

1074
00:39:24,960 --> 00:39:27,280
went right past it so bootstrapper4 i'm

1075
00:39:27,280 --> 00:39:29,280
going to just jump ahead a little bit

1076
00:39:29,280 --> 00:39:30,320
um

1077
00:39:30,320 --> 00:39:31,599
because i am running out of time and i

1078
00:39:31,599 --> 00:39:32,880
really want you guys to see the payload

1079
00:39:32,880 --> 00:39:35,119
here

1080
00:39:35,200 --> 00:39:37,520
bootstrapper4 restores a few things that

1081
00:39:37,520 --> 00:39:39,760
were kind of mangled

1082
00:39:39,760 --> 00:39:41,680
it gets done injecting its code and it

1083
00:39:41,680 --> 00:39:43,280
does a jump instruction directly

1084
00:39:43,280 --> 00:39:45,280
directly to the controller ports

1085
00:39:45,280 --> 00:39:46,400
uh

1086
00:39:46,400 --> 00:39:47,760
there's some other annoying things about

1087
00:39:47,760 --> 00:39:50,000
these bits always having to be

1088
00:39:50,000 --> 00:39:53,440
zero but that gets us 480 bytes a second

1089
00:39:53,440 --> 00:39:55,359
but now we we use that to load the

1090
00:39:55,359 --> 00:39:56,800
hyperspeed loader now the hyperspeed

1091
00:39:56,800 --> 00:39:58,400
loading loader no longer jumps to

1092
00:39:58,400 --> 00:40:00,960
controller data uh it reads all 98 bits

1093
00:40:00,960 --> 00:40:02,800
available from controllers two through

1094
00:40:02,800 --> 00:40:04,400
four it pulls the controllers eight

1095
00:40:04,400 --> 00:40:06,400
times for every frame and that gives us

1096
00:40:06,400 --> 00:40:09,520
a final rate of 5400 bytes per second

1097
00:40:09,520 --> 00:40:11,200
which is pretty good

1098
00:40:11,200 --> 00:40:13,280
okay now we're going to pause here

1099
00:40:13,280 --> 00:40:14,560
and

1100
00:40:14,560 --> 00:40:17,040
go back to the game because there's some

1101
00:40:17,040 --> 00:40:18,560
more stuff to show you

1102
00:40:18,560 --> 00:40:20,000
um

1103
00:40:20,000 --> 00:40:21,440
i want to talk to you a little bit about

1104
00:40:21,440 --> 00:40:24,640
what you can do here um i would love to

1105
00:40:24,640 --> 00:40:25,920
be able to show you everything but with

1106
00:40:25,920 --> 00:40:27,280
only a few minutes left we're going to

1107
00:40:27,280 --> 00:40:29,440
have to jump straight to the

1108
00:40:29,440 --> 00:40:31,839
finale which is we have now finished

1109
00:40:31,839 --> 00:40:34,319
loading all of the data

1110
00:40:34,319 --> 00:40:35,680
that we needed to send over controller

1111
00:40:35,680 --> 00:40:37,280
ports two three and four

1112
00:40:37,280 --> 00:40:39,359
and what we're going to show you at this

1113
00:40:39,359 --> 00:40:40,480
point

1114
00:40:40,480 --> 00:40:42,720
is

1115
00:40:43,359 --> 00:40:45,520
we built not just

1116
00:40:45,520 --> 00:40:47,520
the ability to pull out the r wing but

1117
00:40:47,520 --> 00:40:50,079
we built out the ability to do anything

1118
00:40:50,079 --> 00:40:52,079
anything we wanted to and there is so

1119
00:40:52,079 --> 00:40:54,319
much lore in this game that we would

1120
00:40:54,319 --> 00:40:55,359
love to show you but we don't have the

1121
00:40:55,359 --> 00:40:57,760
whole two hours to do it so

1122
00:40:57,760 --> 00:40:58,880
we

1123
00:40:58,880 --> 00:41:00,800
built up several different stages of

1124
00:41:00,800 --> 00:41:02,240
getting links

1125
00:41:02,240 --> 00:41:05,040
heart imbalance doing and doing a quest

1126
00:41:05,040 --> 00:41:07,040
that involves courage and another one

1127
00:41:07,040 --> 00:41:08,319
that involves wisdom and another that

1128
00:41:08,319 --> 00:41:09,839
involves power

1129
00:41:09,839 --> 00:41:11,920
and going to sages and talking to them

1130
00:41:11,920 --> 00:41:14,480
this whole additional quest of all this

1131
00:41:14,480 --> 00:41:15,760
awesome stuff

1132
00:41:15,760 --> 00:41:17,200
and at the end

1133
00:41:17,200 --> 00:41:19,760
link is granted access to a particular

1134
00:41:19,760 --> 00:41:21,440
room that we want to show you

1135
00:41:21,440 --> 00:41:22,720
you're going to want some extra game

1136
00:41:22,720 --> 00:41:25,759
audio out of this now

1137
00:41:27,070 --> 00:41:28,319
[Music]

1138
00:41:28,319 --> 00:41:30,180
here we go

1139
00:41:30,180 --> 00:41:55,200
[Music]

1140
00:41:55,200 --> 00:41:57,680
after 23 years the dreams of millions of

1141
00:41:57,680 --> 00:41:58,880
players around the world have finally

1142
00:41:58,880 --> 00:42:01,359
come true the triforce was

1143
00:42:01,359 --> 00:42:04,720
rumored to exist in early beta videos

1144
00:42:04,720 --> 00:42:06,400
all kinds of other references to it but

1145
00:42:06,400 --> 00:42:07,920
it never made it in the final game you

1146
00:42:07,920 --> 00:42:10,640
couldn't obtain the triforce

1147
00:42:10,640 --> 00:42:12,319
but we were able to put it into the game

1148
00:42:12,319 --> 00:42:14,160
ourselves along with so many other

1149
00:42:14,160 --> 00:42:15,280
things

1150
00:42:15,280 --> 00:42:17,839
now link has obtained the triforce

1151
00:42:17,839 --> 00:42:19,040
and

1152
00:42:19,040 --> 00:42:22,240
the goddesses have a question for him

1153
00:42:22,240 --> 00:42:24,560
and i like this question a lot

1154
00:42:24,560 --> 00:42:26,000
you can see it in just a second i can't

1155
00:42:26,000 --> 00:42:28,730
make this part go faster

1156
00:42:28,730 --> 00:42:33,200
[Music]

1157
00:42:33,200 --> 00:42:34,800
if you go watch the summer games done

1158
00:42:34,800 --> 00:42:37,359
quick 2020 run you will see the entirety

1159
00:42:37,359 --> 00:42:39,200
of the quest that leads up to this it's

1160
00:42:39,200 --> 00:42:41,280
an incredibly moving story with all

1161
00:42:41,280 --> 00:42:43,119
kinds of absurd things like beating the

1162
00:42:43,119 --> 00:42:44,400
running man and

1163
00:42:44,400 --> 00:42:45,599
using

1164
00:42:45,599 --> 00:42:48,079
all kinds of glitches and

1165
00:42:48,079 --> 00:42:50,720
beta content and interesting ways

1166
00:42:50,720 --> 00:42:52,560
but i really want you to see this next

1167
00:42:52,560 --> 00:42:55,119
scene i want you to remember that

1168
00:42:55,119 --> 00:42:57,920
this console is other than an rgb mod

1169
00:42:57,920 --> 00:42:59,680
that passively taps the red green and

1170
00:42:59,680 --> 00:43:02,960
blue button of blue lines it does not

1171
00:43:02,960 --> 00:43:05,680
modify the console in any way and this

1172
00:43:05,680 --> 00:43:08,400
is other than that small bit to jump to

1173
00:43:08,400 --> 00:43:10,240
the wonder item this is the original us

1174
00:43:10,240 --> 00:43:11,680
1.0 release

1175
00:43:11,680 --> 00:43:14,240
now we could be king of hyrule or ask

1176
00:43:14,240 --> 00:43:16,880
for rupees but i think everyone wants to

1177
00:43:16,880 --> 00:43:18,319
see the future

1178
00:43:18,319 --> 00:43:21,880
so let's do it

1179
00:43:29,200 --> 00:43:31,280
as link makes this journey i just want

1180
00:43:31,280 --> 00:43:34,640
to pause for a moment and talk about how

1181
00:43:34,640 --> 00:43:37,040
what we're doing here is transformative

1182
00:43:37,040 --> 00:43:38,800
art we're taking a game that's beloved

1183
00:43:38,800 --> 00:43:40,640
by so many people and we're transforming

1184
00:43:40,640 --> 00:43:42,720
it into something new

1185
00:43:42,720 --> 00:43:44,160
everything you're seeing here is being

1186
00:43:44,160 --> 00:43:49,640
done directly on this n64 enjoy

1187
00:44:00,550 --> 00:44:03,609
[Music]

1188
00:44:11,760 --> 00:44:13,290
oh

1189
00:44:13,290 --> 00:44:23,040
[Applause]

1190
00:44:23,040 --> 00:44:24,640
if we can get some additional game audio

1191
00:44:24,640 --> 00:44:28,200
you're going to want it here

1192
00:44:45,800 --> 00:44:50,389
[Music]

1193
00:44:52,810 --> 00:45:02,779
[Music]

1194
00:45:03,040 --> 00:45:05,200
it would be nice if we could see them

1195
00:45:05,200 --> 00:45:07,759
don't you think

1196
00:45:08,230 --> 00:45:11,409
[Music]

1197
00:45:14,480 --> 00:45:16,319
all right so

1198
00:45:16,319 --> 00:45:18,400
uh i don't know exactly if this is gonna

1199
00:45:18,400 --> 00:45:20,240
work we're gonna try

1200
00:45:20,240 --> 00:45:22,640
i've gotta find the right uh the right

1201
00:45:22,640 --> 00:45:24,319
command

1202
00:45:24,319 --> 00:45:27,119
oh gosh i didn't actually see what uh

1203
00:45:27,119 --> 00:45:29,680
we had a power outage right before this

1204
00:45:29,680 --> 00:45:32,960
uh we were editing some scripts and uh

1205
00:45:32,960 --> 00:45:35,119
have no idea

1206
00:45:35,119 --> 00:45:36,480
whether or not this will work i

1207
00:45:36,480 --> 00:45:38,319
currently actually can't even find the

1208
00:45:38,319 --> 00:45:40,319
script for it

1209
00:45:40,319 --> 00:45:42,800
let's see

1210
00:45:43,200 --> 00:45:44,800
i don't think this is going to work so

1211
00:45:44,800 --> 00:45:46,560
go ahead and advance forward in the

1212
00:45:46,560 --> 00:45:47,680
original

1213
00:45:47,680 --> 00:45:50,480
version we had twitch messages appearing

1214
00:45:50,480 --> 00:45:53,359
one after the other

1215
00:45:53,359 --> 00:45:54,160
this

1216
00:45:54,160 --> 00:45:56,720
entire sky was filled with people who

1217
00:45:56,720 --> 00:45:58,319
had typed here together

1218
00:45:58,319 --> 00:46:01,680
people remote people in the audience at

1219
00:46:01,680 --> 00:46:03,680
at uh games done quick

1220
00:46:03,680 --> 00:46:06,160
this whole movement of people coming

1221
00:46:06,160 --> 00:46:07,680
together after two and a half years of a

1222
00:46:07,680 --> 00:46:09,760
pandemic that kept us apart

1223
00:46:09,760 --> 00:46:11,680
was just such a moving moment for

1224
00:46:11,680 --> 00:46:12,839
everyone

1225
00:46:12,839 --> 00:46:15,200
and uh i wish we could reproduce it here

1226
00:46:15,200 --> 00:46:17,280
but uh there's not nearly enough people

1227
00:46:17,280 --> 00:46:19,920
and there was something like a 100 150

1228
00:46:19,920 --> 00:46:22,490
000 people watching at the time

1229
00:46:22,490 --> 00:46:24,180
[Music]

1230
00:46:24,180 --> 00:46:33,489
[Applause]

1231
00:46:34,160 --> 00:46:35,520
this run

1232
00:46:35,520 --> 00:46:38,560
at gameston quick raised 227

1233
00:46:38,560 --> 00:46:41,359
000 dollars for doctors without borders

1234
00:46:41,359 --> 00:46:42,640
it was

1235
00:46:42,640 --> 00:46:45,200
the incredible cap of

1236
00:46:45,200 --> 00:46:47,040
two and a half years of effort 25 people

1237
00:46:47,040 --> 00:46:48,480
working on it for a very long time

1238
00:46:48,480 --> 00:46:49,920
putting their heart and soul into it i

1239
00:46:49,920 --> 00:46:51,680
don't know if we can ever transform a

1240
00:46:51,680 --> 00:46:55,118
game quite like this ever again

1241
00:46:55,440 --> 00:46:57,359
thank you link

1242
00:46:57,359 --> 00:47:01,720
for all you have done for us

1243
00:47:09,070 --> 00:47:12,060
[Music]

1244
00:47:12,060 --> 00:47:13,690
[Applause]

1245
00:47:13,690 --> 00:47:26,650
[Music]

1246
00:47:31,680 --> 00:47:33,200
as we close out you can watch the

1247
00:47:33,200 --> 00:47:35,040
credits on the screen here

1248
00:47:35,040 --> 00:47:36,240
these credits will be playing in the

1249
00:47:36,240 --> 00:47:38,319
background where i'll herald heralds us

1250
00:47:38,319 --> 00:47:40,480
out

1251
00:47:44,400 --> 00:47:46,720
thank you so much uh for showing us out

1252
00:47:46,720 --> 00:47:48,640
that was awesome technical issues aside

1253
00:47:48,640 --> 00:47:50,079
that was the coolest thing i've ever

1254
00:47:50,079 --> 00:47:51,119
seen

1255
00:47:51,119 --> 00:47:53,359
an unmodified or almost unmodified game

1256
00:47:53,359 --> 00:47:54,800
cartridge you

1257
00:47:54,800 --> 00:47:56,480
come on give it up for these two that

1258
00:47:56,480 --> 00:47:59,119
was incredible

1259
00:48:02,720 --> 00:48:04,720
unfortunately we have no time for

1260
00:48:04,720 --> 00:48:05,920
questions we're running a little bit

1261
00:48:05,920 --> 00:48:08,000
tight here um but um maybe these two

1262
00:48:08,000 --> 00:48:09,760
will hang around afterwards if anyone

1263
00:48:09,760 --> 00:48:11,040
wants to come up and ask any questions

1264
00:48:11,040 --> 00:48:13,599
of them that would be awesome um

1265
00:48:13,599 --> 00:48:15,119
yeah

1266
00:48:15,119 --> 00:48:16,640
there we go that's it

1267
00:48:16,640 --> 00:48:17,680
thank you

1268
00:48:17,680 --> 00:48:21,160
thank you so much

