1
00:00:01,280 --> 00:00:12,559
[Music]

2
00:00:15,040 --> 00:00:17,279
good evening everyone thanks for coming

3
00:00:17,279 --> 00:00:19,039
um before we get started i have a

4
00:00:19,039 --> 00:00:21,439
special request if you're on camp and in

5
00:00:21,439 --> 00:00:23,039
the possession of a steel brush for

6
00:00:23,039 --> 00:00:24,560
cleaning grills please join us at the

7
00:00:24,560 --> 00:00:27,920
2342 village next to the hacc center at

8
00:00:27,920 --> 00:00:29,920
8 p.m and you'll be eligible for some

9
00:00:29,920 --> 00:00:32,238
delicious steak first one to show up

10
00:00:32,238 --> 00:00:33,680
wins

11
00:00:33,680 --> 00:00:35,280
now a quick learning opportunity before

12
00:00:35,280 --> 00:00:37,280
we get started

13
00:00:37,280 --> 00:00:38,160
so

14
00:00:38,160 --> 00:00:39,760
don't put dates in the titles of your

15
00:00:39,760 --> 00:00:41,920
talk proposals during a pandemic because

16
00:00:41,920 --> 00:00:43,920
you know the events might not happen so

17
00:00:43,920 --> 00:00:45,360
um

18
00:00:45,360 --> 00:00:46,640
yeah

19
00:00:46,640 --> 00:00:48,480
let's get started

20
00:00:48,480 --> 00:00:50,480
i think the title gives it away pretty

21
00:00:50,480 --> 00:00:52,399
well i'm up here tonight to show you how

22
00:00:52,399 --> 00:00:54,160
to build modern and robust web

23
00:00:54,160 --> 00:00:55,840
applications without writing any

24
00:00:55,840 --> 00:00:57,680
javascript

25
00:00:57,680 --> 00:00:59,680
apparently that's a topic of interest

26
00:00:59,680 --> 00:01:00,879
here

27
00:01:00,879 --> 00:01:03,120
so

28
00:01:03,120 --> 00:01:04,959
first things first

29
00:01:04,959 --> 00:01:07,360
javascript has merit it's not like i'm

30
00:01:07,360 --> 00:01:09,760
bashing on javascript or anything

31
00:01:09,760 --> 00:01:11,680
i'm also not saying javascript is

32
00:01:11,680 --> 00:01:14,240
terrible i'm also not saying javascript

33
00:01:14,240 --> 00:01:16,960
code is inherently bad but i'm saying i

34
00:01:16,960 --> 00:01:18,799
don't like to use a second or a third

35
00:01:18,799 --> 00:01:20,799
language when i'm programming or solving

36
00:01:20,799 --> 00:01:23,280
business problems

37
00:01:23,280 --> 00:01:24,080
so

38
00:01:24,080 --> 00:01:26,799
yeah the thing is it uses javascript but

39
00:01:26,799 --> 00:01:28,960
we're not gonna write any of it so

40
00:01:28,960 --> 00:01:30,320
everything is already done we don't have

41
00:01:30,320 --> 00:01:32,240
to take care of it and we won't notice

42
00:01:32,240 --> 00:01:34,720
it's there

43
00:01:34,880 --> 00:01:37,439
um the talk structure um really quick

44
00:01:37,439 --> 00:01:39,280
i'm gonna start with three questions for

45
00:01:39,280 --> 00:01:41,920
the audience introduce myself and tell

46
00:01:41,920 --> 00:01:43,520
you why i'm here

47
00:01:43,520 --> 00:01:46,079
or at least what qualifies me and how

48
00:01:46,079 --> 00:01:48,320
you can avoid huge pain then we'll

49
00:01:48,320 --> 00:01:51,119
continue with a practical example

50
00:01:51,119 --> 00:01:54,240
and some similar coding and well the

51
00:01:54,240 --> 00:01:55,439
last part is going to be a risk

52
00:01:55,439 --> 00:01:57,360
controller for

53
00:01:57,360 --> 00:01:58,479
the set

54
00:01:58,479 --> 00:02:01,280
project we're about to do

55
00:02:01,280 --> 00:02:02,320
and

56
00:02:02,320 --> 00:02:04,799
i'm gonna have an off stage q a

57
00:02:04,799 --> 00:02:06,960
afterwards because probably i'm gonna

58
00:02:06,960 --> 00:02:08,720
run out of time so

59
00:02:08,720 --> 00:02:10,080
yeah i'm going to do it outside

60
00:02:10,080 --> 00:02:12,399
somewhere

61
00:02:12,400 --> 00:02:14,160
some more things up front

62
00:02:14,160 --> 00:02:15,840
you won't learn a new programming

63
00:02:15,840 --> 00:02:18,480
language today

64
00:02:18,480 --> 00:02:21,120
the syntax is pretty easy to understand

65
00:02:21,120 --> 00:02:22,959
if you're if you know proficient in

66
00:02:22,959 --> 00:02:24,400
english then you probably understand

67
00:02:24,400 --> 00:02:26,480
everything we're about to do

68
00:02:26,480 --> 00:02:28,480
um but you will get the interest in

69
00:02:28,480 --> 00:02:30,400
learning a new language that much i can

70
00:02:30,400 --> 00:02:32,720
promise you or at least i hope

71
00:02:32,720 --> 00:02:33,760
um

72
00:02:33,760 --> 00:02:35,599
because you can achieve so much with

73
00:02:35,599 --> 00:02:37,519
just so little as you will just witness

74
00:02:37,519 --> 00:02:38,560
and

75
00:02:38,560 --> 00:02:40,400
the syntax

76
00:02:40,400 --> 00:02:42,720
really if you're proficient with ruby

77
00:02:42,720 --> 00:02:44,480
then you'll just probably understand

78
00:02:44,480 --> 00:02:47,120
most of it right away

79
00:02:47,120 --> 00:02:48,800
if you have questions

80
00:02:48,800 --> 00:02:50,480
please write them down or remember them

81
00:02:50,480 --> 00:02:52,480
until the end of the talk i said there

82
00:02:52,480 --> 00:02:53,599
might be

83
00:02:53,599 --> 00:02:55,360
uh well there will be the q a outside

84
00:02:55,360 --> 00:02:58,159
the tent um but yeah just keep it until

85
00:02:58,159 --> 00:03:00,879
the end please thank you

86
00:03:00,879 --> 00:03:03,599
um so a little audience participation

87
00:03:03,599 --> 00:03:05,280
who here has

88
00:03:05,280 --> 00:03:06,800
written a web application just by a show

89
00:03:06,800 --> 00:03:08,640
of hands

90
00:03:08,640 --> 00:03:11,680
all right that's about everyone

91
00:03:11,680 --> 00:03:14,080
who opted for a refresh rather than

92
00:03:14,080 --> 00:03:18,239
updating the dom or writing javascript

93
00:03:18,239 --> 00:03:20,239
i'd say well all right

94
00:03:20,239 --> 00:03:21,120
good

95
00:03:21,120 --> 00:03:21,920
um

96
00:03:21,920 --> 00:03:23,599
how many of you wished have not having

97
00:03:23,599 --> 00:03:27,120
written javascript or having to debug it

98
00:03:27,120 --> 00:03:28,480
all right

99
00:03:28,480 --> 00:03:30,799
three quarters i guess

100
00:03:30,799 --> 00:03:34,400
um all right so why am i here and who am

101
00:03:34,400 --> 00:03:35,680
i

102
00:03:35,680 --> 00:03:39,040
i'm franz i'm 37 i work as a freelance

103
00:03:39,040 --> 00:03:42,799
i.t consultant for almost 20 years now

104
00:03:42,799 --> 00:03:45,840
i'm located in nuremberg

105
00:03:45,840 --> 00:03:47,599
i'm a certified

106
00:03:47,599 --> 00:03:49,920
something and it doesn't really matter i

107
00:03:49,920 --> 00:03:53,040
got my swinging badge too

108
00:03:53,200 --> 00:03:55,280
i've consulted for multiple fortune 500s

109
00:03:55,280 --> 00:03:57,280
and u.s doc listed companies and done

110
00:03:57,280 --> 00:04:00,000
paid projects in over 25 languages which

111
00:04:00,000 --> 00:04:01,439
usually means more than the typical

112
00:04:01,439 --> 00:04:04,159
hello world people don't pay for that

113
00:04:04,159 --> 00:04:05,680
it's more about 30 now i stopped

114
00:04:05,680 --> 00:04:07,280
counting at the last talk i gave like

115
00:04:07,280 --> 00:04:09,840
seven years ago so who knows

116
00:04:09,840 --> 00:04:10,720
um

117
00:04:10,720 --> 00:04:12,480
i've been building distributed backends

118
00:04:12,480 --> 00:04:14,560
for quite a while now i started out with

119
00:04:14,560 --> 00:04:17,040
scala

120
00:04:17,680 --> 00:04:19,440
i'm a lift web committer still to this

121
00:04:19,440 --> 00:04:20,639
day even though i don't do anything

122
00:04:20,639 --> 00:04:22,479
anymore but you know

123
00:04:22,479 --> 00:04:24,400
anyone remembers foursquare

124
00:04:24,400 --> 00:04:27,199
the checking app yeah that's built with

125
00:04:27,199 --> 00:04:29,280
lift web so you've used my code thank

126
00:04:29,280 --> 00:04:30,240
you

127
00:04:30,240 --> 00:04:32,479
um

128
00:04:32,720 --> 00:04:34,960
then i got heavily into golang when i

129
00:04:34,960 --> 00:04:36,880
got sick of the jvm and learning its

130
00:04:36,880 --> 00:04:39,360
special intricacies over the years

131
00:04:39,360 --> 00:04:43,360
um yeah and then i moved on to elixir

132
00:04:43,360 --> 00:04:46,880
erlang in 2019

133
00:04:47,919 --> 00:04:50,000
meet the phoenix elixir framework that's

134
00:04:50,000 --> 00:04:51,440
at least how you avoid the huge pain

135
00:04:51,440 --> 00:04:53,840
part it's written in elixir how many of

136
00:04:53,840 --> 00:04:57,719
you know the language elixir

137
00:04:58,560 --> 00:05:00,800
alright so for people that's fair all

138
00:05:00,800 --> 00:05:01,680
right

139
00:05:01,680 --> 00:05:04,639
um it uses jarland vm at least so

140
00:05:04,639 --> 00:05:07,440
it feels like ruby to a degree so if

141
00:05:07,440 --> 00:05:09,520
anyone has tried erlang and not gotten

142
00:05:09,520 --> 00:05:12,240
along with the syntax i urge you to try

143
00:05:12,240 --> 00:05:14,720
elixir

144
00:05:14,960 --> 00:05:17,520
erlang is really really good at message

145
00:05:17,520 --> 00:05:20,880
passing not parsing but passing and

146
00:05:20,880 --> 00:05:23,199
pattern matching so

147
00:05:23,199 --> 00:05:25,600
elixir is too

148
00:05:25,600 --> 00:05:27,919
and it's really good at handling huge

149
00:05:27,919 --> 00:05:29,520
numbers of connections so if you're

150
00:05:29,520 --> 00:05:31,840
doing web projects and you need to scale

151
00:05:31,840 --> 00:05:34,400
out later then it's a lot easier doing

152
00:05:34,400 --> 00:05:36,479
it this way

153
00:05:36,479 --> 00:05:38,160
it comes with a built-in distributed

154
00:05:38,160 --> 00:05:40,080
pops up so

155
00:05:40,080 --> 00:05:42,800
you can do fancy stuff um if you have an

156
00:05:42,800 --> 00:05:45,280
airline cluster or you decide to scale

157
00:05:45,280 --> 00:05:46,880
it up into a cluster then you

158
00:05:46,880 --> 00:05:48,880
automatically get a distributed fault

159
00:05:48,880 --> 00:05:50,400
tolerant pops up

160
00:05:50,400 --> 00:05:52,880
i mean that's great and it's a

161
00:05:52,880 --> 00:05:55,360
functional language the well elixir

162
00:05:55,360 --> 00:05:56,960
itself and the whole thing is even

163
00:05:56,960 --> 00:05:59,840
driven so yeah it's it's pretty awesome

164
00:05:59,840 --> 00:06:02,960
and any any regards because

165
00:06:02,960 --> 00:06:04,880
it abstracts away anything you do with

166
00:06:04,880 --> 00:06:07,440
javascript really i've haven't written a

167
00:06:07,440 --> 00:06:08,880
line of javascript in almost two and a

168
00:06:08,880 --> 00:06:10,000
half years

169
00:06:10,000 --> 00:06:10,800
so

170
00:06:10,800 --> 00:06:12,800
i'm happy about that

171
00:06:12,800 --> 00:06:14,160
and it comes with out of the box

172
00:06:14,160 --> 00:06:16,560
websocket transport and ajax fallback so

173
00:06:16,560 --> 00:06:19,280
you don't really take care of any of the

174
00:06:19,280 --> 00:06:21,199
fallback measurements or implement

175
00:06:21,199 --> 00:06:26,080
yourself anything it just goes itself

176
00:06:26,080 --> 00:06:27,120
and

177
00:06:27,120 --> 00:06:29,039
yeah it falls back to get post request

178
00:06:29,039 --> 00:06:31,039
if javascript is disabled so if you you

179
00:06:31,039 --> 00:06:32,800
know one of those guys that wants to

180
00:06:32,800 --> 00:06:34,800
disable javascript most of the stuff is

181
00:06:34,800 --> 00:06:36,080
still going to work

182
00:06:36,080 --> 00:06:37,919
except for some minor things that will

183
00:06:37,919 --> 00:06:40,639
go about later

184
00:06:40,639 --> 00:06:42,880
and we are going to talk specifically

185
00:06:42,880 --> 00:06:45,360
about the feature called live view

186
00:06:45,360 --> 00:06:48,319
and it's server side rendered html well

187
00:06:48,319 --> 00:06:50,400
most of the html is

188
00:06:50,400 --> 00:06:51,440
and

189
00:06:51,440 --> 00:06:53,120
but the difference is

190
00:06:53,120 --> 00:06:55,599
through this the server always knows

191
00:06:55,599 --> 00:06:58,080
which variable is bound where in the dom

192
00:06:58,080 --> 00:06:59,919
so you know you can easily update it

193
00:06:59,919 --> 00:07:02,560
without you actually having to know it

194
00:07:02,560 --> 00:07:05,039
and then it sends diffs to the browser

195
00:07:05,039 --> 00:07:06,960
over web sockets or ajax so your web

196
00:07:06,960 --> 00:07:08,639
page gets updated but not you know the

197
00:07:08,639 --> 00:07:10,080
entire page or anything just the

198
00:07:10,080 --> 00:07:11,840
snippets that change

199
00:07:11,840 --> 00:07:13,599
that's pretty efficient and people

200
00:07:13,599 --> 00:07:15,759
already wrote browser games with it like

201
00:07:15,759 --> 00:07:18,639
60 plus fps i mean impressive for

202
00:07:18,639 --> 00:07:21,360
something like that

203
00:07:21,840 --> 00:07:23,199
so

204
00:07:23,199 --> 00:07:24,960
the thing i like about it is i can't

205
00:07:24,960 --> 00:07:26,960
really just write business logic and not

206
00:07:26,960 --> 00:07:29,039
solve all the other problems that have

207
00:07:29,039 --> 00:07:31,199
to do with whatever happens between the

208
00:07:31,199 --> 00:07:33,440
browser and my server that all of that

209
00:07:33,440 --> 00:07:35,199
is taken care of so you can really just

210
00:07:35,199 --> 00:07:37,759
focus on whatever you want to build and

211
00:07:37,759 --> 00:07:40,000
i think that you know makes for a lot of

212
00:07:40,000 --> 00:07:41,280
fun and

213
00:07:41,280 --> 00:07:43,199
gets back to actually solving problems

214
00:07:43,199 --> 00:07:44,879
and not you know

215
00:07:44,879 --> 00:07:46,240
solving problems to solve another

216
00:07:46,240 --> 00:07:47,599
problem and then solve another problem

217
00:07:47,599 --> 00:07:50,080
so you're actually working at the things

218
00:07:50,080 --> 00:07:51,360
you want to solve

219
00:07:51,360 --> 00:07:53,520
and you don't have to care think about

220
00:07:53,520 --> 00:07:56,319
when event x happens i have to update

221
00:07:56,319 --> 00:07:57,360
element

222
00:07:57,360 --> 00:08:00,080
xyz and the dom so

223
00:08:00,080 --> 00:08:03,120
and when it's disabled well i don't have

224
00:08:03,120 --> 00:08:04,479
you know

225
00:08:04,479 --> 00:08:05,919
we don't have to write the fallback

226
00:08:05,919 --> 00:08:08,080
ourselves i mean by now i mean how many

227
00:08:08,080 --> 00:08:10,000
implementations are there out there so

228
00:08:10,000 --> 00:08:11,599
we shouldn't have to write this on every

229
00:08:11,599 --> 00:08:15,039
other web page ourselves

230
00:08:15,039 --> 00:08:17,360
how does the whole thing work so i said

231
00:08:17,360 --> 00:08:20,160
first it delivers a render html as every

232
00:08:20,160 --> 00:08:21,840
web server usually does

233
00:08:21,840 --> 00:08:24,160
um guarantees that most stuff works even

234
00:08:24,160 --> 00:08:26,479
when javascript is turned off but if

235
00:08:26,479 --> 00:08:28,479
javascript is enabled then the websocket

236
00:08:28,479 --> 00:08:30,240
connection takes over

237
00:08:30,240 --> 00:08:32,640
and it ensures that it automatically

238
00:08:32,640 --> 00:08:34,479
re-renders and updates all the right

239
00:08:34,479 --> 00:08:36,240
parts of the web page which is nice

240
00:08:36,240 --> 00:08:38,080
because we don't have to do it

241
00:08:38,080 --> 00:08:40,399
and if javascript is disabled well and

242
00:08:40,399 --> 00:08:41,919
everything except the real-time

243
00:08:41,919 --> 00:08:43,440
streaming updates and stuff like that is

244
00:08:43,440 --> 00:08:44,720
gonna

245
00:08:44,720 --> 00:08:48,000
not work i mean you know

246
00:08:48,720 --> 00:08:50,720
so the server knows all the places it

247
00:08:50,720 --> 00:08:53,040
renders variables so it knows which

248
00:08:53,040 --> 00:08:54,480
parts to update

249
00:08:54,480 --> 00:08:56,160
this is a pretty easy example i don't

250
00:08:56,160 --> 00:08:57,760
know if you can see it from back there

251
00:08:57,760 --> 00:08:59,120
or but

252
00:08:59,120 --> 00:09:00,880
generally speaking you have you know a

253
00:09:00,880 --> 00:09:03,760
snippet and it replaces a variable so

254
00:09:03,760 --> 00:09:05,600
your server side should know that there

255
00:09:05,600 --> 00:09:07,360
is something that could be updated

256
00:09:07,360 --> 00:09:09,120
that's the easy code part but we're

257
00:09:09,120 --> 00:09:10,640
going to explore it

258
00:09:10,640 --> 00:09:14,480
in the live coding in a second

259
00:09:16,160 --> 00:09:20,080
so the simple demo project i prepared is

260
00:09:20,080 --> 00:09:22,720
a web-based thermostat that is going to

261
00:09:22,720 --> 00:09:24,560
like be life updating

262
00:09:24,560 --> 00:09:26,800
um why because it's in the web

263
00:09:26,800 --> 00:09:29,519
frameworks um documentation so

264
00:09:29,519 --> 00:09:31,040
should you decide to

265
00:09:31,040 --> 00:09:33,200
learn more about it you'll know at least

266
00:09:33,200 --> 00:09:34,640
some of the bits that you read about in

267
00:09:34,640 --> 00:09:36,399
the documentation and can relate to it

268
00:09:36,399 --> 00:09:38,959
and it will it won't be super foreign to

269
00:09:38,959 --> 00:09:40,560
you so at least you've

270
00:09:40,560 --> 00:09:42,320
heard that

271
00:09:42,320 --> 00:09:43,279
and

272
00:09:43,279 --> 00:09:45,760
i decided to add pops up to it so

273
00:09:45,760 --> 00:09:47,440
i can show off the liveliness and how

274
00:09:47,440 --> 00:09:50,480
easy it is to implement

275
00:09:50,480 --> 00:09:51,839
so we're going to create a new project

276
00:09:51,839 --> 00:09:53,120
in a second

277
00:09:53,120 --> 00:09:54,640
we're going to add a database model and

278
00:09:54,640 --> 00:09:57,440
a migration for persistence

279
00:09:57,440 --> 00:09:58,560
we're going to add two buttons to

280
00:09:58,560 --> 00:10:00,480
increase and decrease temper decrease

281
00:10:00,480 --> 00:10:01,760
temperature

282
00:10:01,760 --> 00:10:03,760
and write 40 lines

283
00:10:03,760 --> 00:10:06,079
of code in total

284
00:10:06,079 --> 00:10:08,240
and add a couple of tests for the new

285
00:10:08,240 --> 00:10:10,640
buttons

286
00:10:13,360 --> 00:10:15,680
yeah that's terrible that's super

287
00:10:15,680 --> 00:10:17,279
terrible

288
00:10:17,279 --> 00:10:18,800
so we're basically now creating a new

289
00:10:18,800 --> 00:10:20,480
project

290
00:10:20,480 --> 00:10:22,800
and

291
00:10:25,839 --> 00:10:26,959
pardon me

292
00:10:26,959 --> 00:10:29,680
ah their screens awesome all right so

293
00:10:29,680 --> 00:10:30,880
what it's doing now we're basically

294
00:10:30,880 --> 00:10:32,160
creating a new project and it's

295
00:10:32,160 --> 00:10:33,839
downloading all the dependencies and

296
00:10:33,839 --> 00:10:37,120
compiling all those um mix is basically

297
00:10:37,120 --> 00:10:40,240
elixirs you know gem or make or

298
00:10:40,240 --> 00:10:43,279
combination of both and so yeah it does

299
00:10:43,279 --> 00:10:46,240
a lot of things in the elixir world so

300
00:10:46,240 --> 00:10:47,760
now it's compiling this is actually the

301
00:10:47,760 --> 00:10:50,480
longest step in the whole well where i

302
00:10:50,480 --> 00:10:53,279
have to wait for it

303
00:10:53,760 --> 00:10:56,640
the font size

304
00:10:57,360 --> 00:11:01,839
that is really bad right now

305
00:11:03,120 --> 00:11:05,519
army

306
00:11:08,640 --> 00:11:10,160
is all right yeah

307
00:11:10,160 --> 00:11:12,560
all right so it done you know creating

308
00:11:12,560 --> 00:11:14,000
the project i mean the half of it is

309
00:11:14,000 --> 00:11:15,760
going to be on the browser side

310
00:11:15,760 --> 00:11:17,120
um so on the right side so we're going

311
00:11:17,120 --> 00:11:19,680
to see it um

312
00:11:19,680 --> 00:11:21,680
we're creating the database right now

313
00:11:21,680 --> 00:11:22,800
and

314
00:11:22,800 --> 00:11:25,040
all it we're basically doing is i'm just

315
00:11:25,040 --> 00:11:27,440
removing a warning that's coming from

316
00:11:27,440 --> 00:11:30,079
the new compiler version that i'm using

317
00:11:30,079 --> 00:11:32,240
and what we're going to do is basically

318
00:11:32,240 --> 00:11:34,240
create the database start a new server

319
00:11:34,240 --> 00:11:35,600
and look how the

320
00:11:35,600 --> 00:11:38,399
how a basic elixir phoenix project looks

321
00:11:38,399 --> 00:11:39,519
like

322
00:11:39,519 --> 00:11:42,480
that's happening right now

323
00:11:42,480 --> 00:11:45,360
i hope the browser yeah that's good

324
00:11:45,360 --> 00:11:47,440
all right i hope that's clearly visible

325
00:11:47,440 --> 00:11:48,959
for everyone that's basically how a

326
00:11:48,959 --> 00:11:51,760
standard elixir project looks like

327
00:11:51,760 --> 00:11:53,680
so what we're going to do now is use a

328
00:11:53,680 --> 00:11:56,560
generator um to a crowd generator to

329
00:11:56,560 --> 00:11:58,880
generate a context called measurements

330
00:11:58,880 --> 00:12:00,079
and a

331
00:12:00,079 --> 00:12:02,399
database model called thermostat

332
00:12:02,399 --> 00:12:05,839
it has a name and a temperature and yeah

333
00:12:05,839 --> 00:12:08,480
so we're going to inspect the model

334
00:12:08,480 --> 00:12:11,720
in a second

335
00:12:12,959 --> 00:12:14,880
yeah

336
00:12:14,880 --> 00:12:17,839
so up there um yeah we have our table

337
00:12:17,839 --> 00:12:19,519
our fields and we're gonna set the

338
00:12:19,519 --> 00:12:22,079
temperature to default zero and we're

339
00:12:22,079 --> 00:12:24,399
gonna remove the validation uh the

340
00:12:24,399 --> 00:12:26,880
requirement for the temperature

341
00:12:26,880 --> 00:12:28,240
just so

342
00:12:28,240 --> 00:12:30,399
we have a nice project to work with next

343
00:12:30,399 --> 00:12:32,000
we're going to look at the database

344
00:12:32,000 --> 00:12:33,200
abstraction

345
00:12:33,200 --> 00:12:34,800
this is basically holding all your

346
00:12:34,800 --> 00:12:37,360
database functions your listers getter

347
00:12:37,360 --> 00:12:39,519
create update functions everything that

348
00:12:39,519 --> 00:12:42,959
you need to interact with the database

349
00:12:43,920 --> 00:12:47,040
and now we're basically adding the

350
00:12:47,040 --> 00:12:48,959
crud generated

351
00:12:48,959 --> 00:12:52,480
ui for the thermostats to our router and

352
00:12:52,480 --> 00:12:53,519
this is a

353
00:12:53,519 --> 00:12:55,839
basic router that comes with with the

354
00:12:55,839 --> 00:12:58,320
project um pipelines are basically what

355
00:12:58,320 --> 00:13:00,399
what you want to do on you know

356
00:13:00,399 --> 00:13:02,000
set accepting coding headers and stuff

357
00:13:02,000 --> 00:13:04,560
like that and fetch sessions stuff like

358
00:13:04,560 --> 00:13:05,279
that

359
00:13:05,279 --> 00:13:06,880
now we're adding the routes for the

360
00:13:06,880 --> 00:13:09,839
index page and the show page

361
00:13:09,839 --> 00:13:12,160
and starting up the

362
00:13:12,160 --> 00:13:14,639
web server i think no well we're

363
00:13:14,639 --> 00:13:16,320
migrating the database first of course

364
00:13:16,320 --> 00:13:17,760
because otherwise there's nothing to

365
00:13:17,760 --> 00:13:20,760
show

366
00:13:22,880 --> 00:13:23,920
all right

367
00:13:23,920 --> 00:13:26,399
um also we have tests for everything

368
00:13:26,399 --> 00:13:28,000
that we generate so all the getters

369
00:13:28,000 --> 00:13:29,680
setters everything that you just saw in

370
00:13:29,680 --> 00:13:32,399
the database abstraction gets generated

371
00:13:32,399 --> 00:13:35,120
tests by default so you have something

372
00:13:35,120 --> 00:13:37,279
to go off and yeah you don't have to

373
00:13:37,279 --> 00:13:39,839
write everything ourselves

374
00:13:39,839 --> 00:13:42,079
yeah

375
00:13:42,320 --> 00:13:44,800
running the test suite extra comes with

376
00:13:44,800 --> 00:13:47,040
different url phoenix comes with

377
00:13:47,040 --> 00:13:48,399
different environments so we have the

378
00:13:48,399 --> 00:13:49,760
development environment the test

379
00:13:49,760 --> 00:13:50,800
environment and the production

380
00:13:50,800 --> 00:13:51,920
environment

381
00:13:51,920 --> 00:13:53,680
each of these could or can have

382
00:13:53,680 --> 00:13:56,000
different dependencies so it has

383
00:13:56,000 --> 00:13:57,680
different builds for all these

384
00:13:57,680 --> 00:13:59,279
environments that's why it's recompiling

385
00:13:59,279 --> 00:14:03,160
again for the test environment

386
00:14:04,240 --> 00:14:07,959
should be done in a second

387
00:14:18,079 --> 00:14:20,480
all right so all of our tests have

388
00:14:20,480 --> 00:14:22,880
passed it already has 17 tests that we

389
00:14:22,880 --> 00:14:25,120
have automatically generated so now

390
00:14:25,120 --> 00:14:27,440
we're going to start the server and look

391
00:14:27,440 --> 00:14:30,000
at the thermostat crude that

392
00:14:30,000 --> 00:14:31,920
the stuff that we just generated

393
00:14:31,920 --> 00:14:34,240
i'm gonna create a new thermostat named

394
00:14:34,240 --> 00:14:36,880
mch2022

395
00:14:36,880 --> 00:14:38,800
and it has a standard you know edit

396
00:14:38,800 --> 00:14:40,880
forms

397
00:14:40,880 --> 00:14:42,800
delete and

398
00:14:42,800 --> 00:14:45,440
also show stuff that you know comes with

399
00:14:45,440 --> 00:14:47,279
normal crud operations

400
00:14:47,279 --> 00:14:49,199
and what we're going to do now is

401
00:14:49,199 --> 00:14:51,199
basically just tweak the template that

402
00:14:51,199 --> 00:14:52,720
we're seeing on the right

403
00:14:52,720 --> 00:14:54,320
and we're going to add

404
00:14:54,320 --> 00:14:57,760
a couple of things to it to yeah

405
00:14:57,760 --> 00:14:59,360
make you see why we're here um first

406
00:14:59,360 --> 00:15:00,880
we're committing the project because at

407
00:15:00,880 --> 00:15:01,920
the end i'm going to show you a little

408
00:15:01,920 --> 00:15:05,199
nice gimmick about testing

409
00:15:06,000 --> 00:15:09,720
and yeah

410
00:15:12,240 --> 00:15:13,600
all right we're now editing basically

411
00:15:13,600 --> 00:15:14,959
the template that we're seeing on the

412
00:15:14,959 --> 00:15:16,560
right and what we're about to do is

413
00:15:16,560 --> 00:15:18,560
basically just add a little element

414
00:15:18,560 --> 00:15:20,560
around the temperature so we can later

415
00:15:20,560 --> 00:15:24,319
test on it a little bit easier

416
00:15:25,120 --> 00:15:27,600
so basically i'm just adding a span with

417
00:15:27,600 --> 00:15:29,440
an id temperature around it so i can

418
00:15:29,440 --> 00:15:32,800
reference it later directly

419
00:15:32,800 --> 00:15:35,440
now i'm just adding two buttons that we

420
00:15:35,440 --> 00:15:36,880
need to increase and decrease the

421
00:15:36,880 --> 00:15:39,880
temperature

422
00:15:40,000 --> 00:15:41,839
the good thing about it is the id

423
00:15:41,839 --> 00:15:43,920
attribute is not really needed for the

424
00:15:43,920 --> 00:15:46,000
function of it it's just needed so later

425
00:15:46,000 --> 00:15:47,839
when we're writing a test for it that we

426
00:15:47,839 --> 00:15:51,279
can reference that button more easily

427
00:15:51,279 --> 00:15:54,560
so we just copy the button to just make

428
00:15:54,560 --> 00:15:58,599
the decrease function as well

429
00:16:08,800 --> 00:16:12,719
all right our buttons are showing great

430
00:16:15,040 --> 00:16:16,800
and now we're just you know adding the

431
00:16:16,800 --> 00:16:21,160
business logic behind those buttons

432
00:16:22,639 --> 00:16:24,959
this is a fairly standard elixir

433
00:16:24,959 --> 00:16:26,480
controller

434
00:16:26,480 --> 00:16:27,519
and

435
00:16:27,519 --> 00:16:28,959
basically at the top

436
00:16:28,959 --> 00:16:31,040
you have the alias for our context for

437
00:16:31,040 --> 00:16:33,519
our database context and

438
00:16:33,519 --> 00:16:35,279
now we're adding

439
00:16:35,279 --> 00:16:36,720
that we're on

440
00:16:36,720 --> 00:16:38,079
well basically we're getting the

441
00:16:38,079 --> 00:16:40,880
thermostat that has been passed as an id

442
00:16:40,880 --> 00:16:44,079
and then we're checking if the socket or

443
00:16:44,079 --> 00:16:45,440
the web browser that's connected is

444
00:16:45,440 --> 00:16:48,079
connected through a live socket or at

445
00:16:48,079 --> 00:16:49,199
least you know

446
00:16:49,199 --> 00:16:50,560
websocket or

447
00:16:50,560 --> 00:16:52,639
ajax fallback and then we're doing a

448
00:16:52,639 --> 00:16:54,480
popsub subscribe

449
00:16:54,480 --> 00:16:58,560
to a topic which is a thermostat

450
00:16:58,560 --> 00:17:00,560
and the id

451
00:17:00,560 --> 00:17:04,959
that's about it for for that part

452
00:17:04,959 --> 00:17:06,079
next week

453
00:17:06,079 --> 00:17:07,520
next we're going to implement the the

454
00:17:07,520 --> 00:17:09,599
actual handling of the button so a

455
00:17:09,599 --> 00:17:12,640
function called handle event and the

456
00:17:12,640 --> 00:17:13,839
decrement

457
00:17:13,839 --> 00:17:16,240
that we have specified on the phx click

458
00:17:16,240 --> 00:17:19,280
attribute of the button we added before

459
00:17:19,280 --> 00:17:22,799
next altering the temperature

460
00:17:22,799 --> 00:17:24,720
and then calling the update function

461
00:17:24,720 --> 00:17:26,160
that we're about to implement in a

462
00:17:26,160 --> 00:17:28,480
second

463
00:17:29,120 --> 00:17:32,918
copy that part over

464
00:17:42,480 --> 00:17:43,679
all right

465
00:17:43,679 --> 00:17:44,880
so now we have a function for

466
00:17:44,880 --> 00:17:47,440
incrementing decrementing and now we

467
00:17:47,440 --> 00:17:49,200
just need our update function that

468
00:17:49,200 --> 00:17:51,840
doesn't come out of nowhere so

469
00:17:51,840 --> 00:17:53,200
you could technically in case you're

470
00:17:53,200 --> 00:17:55,440
wondering do pattern matching on

471
00:17:55,440 --> 00:17:57,360
function arguments

472
00:17:57,360 --> 00:17:59,760
would look look something like you know

473
00:17:59,760 --> 00:18:01,600
you're specified with a

474
00:18:01,600 --> 00:18:04,160
percent sign and then your your class or

475
00:18:04,160 --> 00:18:06,160
the object you're trying to

476
00:18:06,160 --> 00:18:07,120
to use

477
00:18:07,120 --> 00:18:10,918
would look something like that

478
00:18:16,640 --> 00:18:18,080
in case you're wondering i did a coding

479
00:18:18,080 --> 00:18:19,760
error there during the recording of the

480
00:18:19,760 --> 00:18:22,080
screencast so um yeah i had to use that

481
00:18:22,080 --> 00:18:23,440
creatively

482
00:18:23,440 --> 00:18:25,360
um yeah so basically we're now having

483
00:18:25,360 --> 00:18:27,520
our right function with first argument

484
00:18:27,520 --> 00:18:28,960
being the socket the second one being

485
00:18:28,960 --> 00:18:34,400
the temperature and thermostat now

486
00:18:34,400 --> 00:18:36,880
getting updated in the database with the

487
00:18:36,880 --> 00:18:41,320
temperature that we are passing in

488
00:18:48,080 --> 00:18:50,160
and last but not least um we're gonna

489
00:18:50,160 --> 00:18:52,559
send it through pubsub because you know

490
00:18:52,559 --> 00:18:54,720
when we're updating we actually want the

491
00:18:54,720 --> 00:18:56,160
other clients that are watching that

492
00:18:56,160 --> 00:18:58,080
page to get

493
00:18:58,080 --> 00:18:59,919
the updated version

494
00:18:59,919 --> 00:19:02,799
and so we are broadcasting to our pub

495
00:19:02,799 --> 00:19:05,679
sub and the topic for thermostat with

496
00:19:05,679 --> 00:19:06,799
the id

497
00:19:06,799 --> 00:19:08,799
and then we send a custom payload which

498
00:19:08,799 --> 00:19:12,400
is a tuple of updated which is an atom

499
00:19:12,400 --> 00:19:16,559
and our updated thermostat

500
00:19:20,000 --> 00:19:22,400
and i think uh yeah now we're basically

501
00:19:22,400 --> 00:19:25,280
just assigning the updated

502
00:19:25,280 --> 00:19:28,480
thermostat to our web page and that's

503
00:19:28,480 --> 00:19:30,320
actually all the magic that's required

504
00:19:30,320 --> 00:19:31,840
to update

505
00:19:31,840 --> 00:19:34,640
anything in phoenix live view so you

506
00:19:34,640 --> 00:19:36,320
update just the variables that you want

507
00:19:36,320 --> 00:19:40,320
to update and phoenix takes care of this

508
00:19:40,320 --> 00:19:42,320
so last but not least we need a function

509
00:19:42,320 --> 00:19:44,799
that actually handles the pub sub

510
00:19:44,799 --> 00:19:47,679
broadcast or receives it so we're going

511
00:19:47,679 --> 00:19:50,320
to pattern match here on our tuple which

512
00:19:50,320 --> 00:19:51,600
is

513
00:19:51,600 --> 00:19:55,120
updated and the thermostat

514
00:19:55,120 --> 00:19:58,719
last argument is the socket

515
00:20:01,440 --> 00:20:03,520
and we're basically just doing the same

516
00:20:03,520 --> 00:20:05,919
as we did in the function before and

517
00:20:05,919 --> 00:20:06,720
just

518
00:20:06,720 --> 00:20:09,520
when that event happened update variable

519
00:20:09,520 --> 00:20:12,000
thermostat in our webpage

520
00:20:12,000 --> 00:20:14,400
that's all it takes and now we're gonna

521
00:20:14,400 --> 00:20:16,960
try it out

522
00:20:17,440 --> 00:20:21,520
oops there's a warning so it elixir in

523
00:20:21,520 --> 00:20:23,440
the current versions tells you that you

524
00:20:23,440 --> 00:20:25,919
have unused variables and in this case i

525
00:20:25,919 --> 00:20:28,559
left it in by you know to show off that

526
00:20:28,559 --> 00:20:31,120
you already learned stuff or find out

527
00:20:31,120 --> 00:20:33,760
stuff by just compiling your code within

528
00:20:33,760 --> 00:20:35,200
your compilers

529
00:20:35,200 --> 00:20:37,600
and

530
00:20:39,120 --> 00:20:42,239
now we start the server

531
00:20:45,520 --> 00:20:47,120
and we click plus

532
00:20:47,120 --> 00:20:49,120
and you know updates the database to the

533
00:20:49,120 --> 00:20:50,880
left you see the orange lines that do

534
00:20:50,880 --> 00:20:53,360
the actual changes in the database or

535
00:20:53,360 --> 00:20:54,480
debug them

536
00:20:54,480 --> 00:20:56,640
now we are just opening a second browser

537
00:20:56,640 --> 00:20:59,679
and see that this is not just you know

538
00:20:59,679 --> 00:21:01,440
some goofy so you see on the left on the

539
00:21:01,440 --> 00:21:03,280
right the the temperature goes up and

540
00:21:03,280 --> 00:21:05,520
down

541
00:21:06,240 --> 00:21:07,919
that's pretty much

542
00:21:07,919 --> 00:21:10,880
as live as it gets

543
00:21:14,080 --> 00:21:15,520
anyone noticed we haven't written any

544
00:21:15,520 --> 00:21:18,240
javascript yet

545
00:21:19,120 --> 00:21:21,679
so um this is not all so for the last

546
00:21:21,679 --> 00:21:24,559
part of this um i'm gonna write a test

547
00:21:24,559 --> 00:21:26,320
to actually test the functionality we

548
00:21:26,320 --> 00:21:28,000
just implemented so we can make sure

549
00:21:28,000 --> 00:21:30,240
that this always works which is actually

550
00:21:30,240 --> 00:21:32,720
pretty nice in terms of

551
00:21:32,720 --> 00:21:34,880
you can deliver source code that is

552
00:21:34,880 --> 00:21:36,799
thoroughly tested

553
00:21:36,799 --> 00:21:38,720
so these are all the functions or the

554
00:21:38,720 --> 00:21:40,159
tests for the functions that we just

555
00:21:40,159 --> 00:21:42,799
previously witnessed in the crud ui all

556
00:21:42,799 --> 00:21:46,080
the in listing indexes editing all that

557
00:21:46,080 --> 00:21:46,960
stuff

558
00:21:46,960 --> 00:21:49,039
and now we're adding a test

559
00:21:49,039 --> 00:21:51,200
basically just for

560
00:21:51,200 --> 00:21:53,280
incrementing or increasing decreasing

561
00:21:53,280 --> 00:21:57,080
the thermostat temperature

562
00:22:01,039 --> 00:22:03,520
just stealing a couple of lines there

563
00:22:03,520 --> 00:22:05,760
so

564
00:22:06,400 --> 00:22:08,000
basically what we're doing is now we're

565
00:22:08,000 --> 00:22:10,240
asserting that the standard temperature

566
00:22:10,240 --> 00:22:12,880
that is shown on that webpage is

567
00:22:12,880 --> 00:22:15,600
42 degrees which is the default value

568
00:22:15,600 --> 00:22:18,639
from our fixture

569
00:22:22,640 --> 00:22:25,840
next we are actually triggering or

570
00:22:25,840 --> 00:22:29,520
clicking the increase button

571
00:22:29,520 --> 00:22:31,520
and that's why i did the id so i can

572
00:22:31,520 --> 00:22:35,039
just easily reference that button here

573
00:22:35,039 --> 00:22:38,000
use the render click function and yeah

574
00:22:38,000 --> 00:22:41,600
test at the end if it's 43 now copy that

575
00:22:41,600 --> 00:22:43,919
test over and

576
00:22:43,919 --> 00:22:45,039
basically write the test for the

577
00:22:45,039 --> 00:22:47,760
decrease function

578
00:22:47,760 --> 00:22:50,720
should be 42 then and

579
00:22:50,720 --> 00:22:54,919
i think we're done with the test suite

580
00:22:58,720 --> 00:23:01,280
well all our tests are passing so we

581
00:23:01,280 --> 00:23:03,200
wrote something that works and that's

582
00:23:03,200 --> 00:23:04,799
manageable

583
00:23:04,799 --> 00:23:07,440
testable and reproducible last but not

584
00:23:07,440 --> 00:23:09,120
least i want to share a little

585
00:23:09,120 --> 00:23:11,840
well not secret but some fun

586
00:23:11,840 --> 00:23:13,600
interesting in that regard we're now

587
00:23:13,600 --> 00:23:16,240
going to add git hooks into our

588
00:23:16,240 --> 00:23:18,640
mix configuration and which is basically

589
00:23:18,640 --> 00:23:20,720
going to ensure that

590
00:23:20,720 --> 00:23:23,039
on every commit it's going to run series

591
00:23:23,039 --> 00:23:25,600
of commands and if any of those commands

592
00:23:25,600 --> 00:23:28,320
are failing then the commit won't happen

593
00:23:28,320 --> 00:23:31,039
so you're going to have to debug or

594
00:23:31,039 --> 00:23:32,720
you know do some stuff in order to get

595
00:23:32,720 --> 00:23:34,400
the commit through

596
00:23:34,400 --> 00:23:36,880
we are actually doing here is setting a

597
00:23:36,880 --> 00:23:39,120
pre-commit hook um

598
00:23:39,120 --> 00:23:40,080
to do

599
00:23:40,080 --> 00:23:41,919
two things

600
00:23:41,919 --> 00:23:44,400
uh one of the things is we're checking

601
00:23:44,400 --> 00:23:46,480
if all the code is formatted so mix

602
00:23:46,480 --> 00:23:48,159
comes with a format checker there's a

603
00:23:48,159 --> 00:23:50,960
configuration file you can change all

604
00:23:50,960 --> 00:23:52,880
the code styling things you want to

605
00:23:52,880 --> 00:23:53,919
change

606
00:23:53,919 --> 00:23:56,799
and ensure code quality so and at the

607
00:23:56,799 --> 00:23:58,320
end it's basically taking care of that

608
00:23:58,320 --> 00:24:00,000
so the first command is

609
00:24:00,000 --> 00:24:01,760
that in the tasks that we're running is

610
00:24:01,760 --> 00:24:03,039
mixed test

611
00:24:03,039 --> 00:24:04,720
minus minus check

612
00:24:04,720 --> 00:24:06,960
minus formatted and the second one is

613
00:24:06,960 --> 00:24:09,039
just going to be a mixed test command to

614
00:24:09,039 --> 00:24:11,200
run our test suite before of course

615
00:24:11,200 --> 00:24:13,840
every comment

616
00:24:14,480 --> 00:24:16,320
you can set whatever cometoc if you want

617
00:24:16,320 --> 00:24:19,039
you know pre-push or whatever there is

618
00:24:19,039 --> 00:24:21,039
you can just do that there

619
00:24:21,039 --> 00:24:23,600
now we are

620
00:24:23,600 --> 00:24:25,279
getting the dependency that we just

621
00:24:25,279 --> 00:24:26,480
added

622
00:24:26,480 --> 00:24:27,679
added

623
00:24:27,679 --> 00:24:30,080
jesus

624
00:24:31,279 --> 00:24:32,880
install the hook

625
00:24:32,880 --> 00:24:35,919
and we're off to commit

626
00:24:35,919 --> 00:24:37,679
our changes

627
00:24:37,679 --> 00:24:40,480
which will fail

628
00:24:41,760 --> 00:24:44,799
because we didn't format our code so now

629
00:24:44,799 --> 00:24:47,039
let's format it rerun that command again

630
00:24:47,039 --> 00:24:48,880
and suddenly everything will be

631
00:24:48,880 --> 00:24:51,679
committing to get

632
00:24:58,400 --> 00:24:59,440
all right

633
00:24:59,440 --> 00:25:01,440
um but it's not all unicorns and

634
00:25:01,440 --> 00:25:04,960
rainbows um so there are some drawdowns

635
00:25:04,960 --> 00:25:05,919
with

636
00:25:05,919 --> 00:25:08,559
elixir and erlang so

637
00:25:08,559 --> 00:25:10,880
the garbage collection isn't as

638
00:25:10,880 --> 00:25:12,320
how do you say it

639
00:25:12,320 --> 00:25:14,400
efficient as other languages

640
00:25:14,400 --> 00:25:15,600
so

641
00:25:15,600 --> 00:25:17,360
be careful what you put into the garbage

642
00:25:17,360 --> 00:25:19,360
bin that's all i'm gonna say

643
00:25:19,360 --> 00:25:21,919
um well actually

644
00:25:21,919 --> 00:25:24,080
the best example is if you're updating

645
00:25:24,080 --> 00:25:26,559
something a counter on a web page and

646
00:25:26,559 --> 00:25:28,799
you're hammering at higher rates a

647
00:25:28,799 --> 00:25:31,520
structure with 30 fields through the

648
00:25:31,520 --> 00:25:32,799
pops up

649
00:25:32,799 --> 00:25:34,640
and while you're just interested in one

650
00:25:34,640 --> 00:25:36,960
integer then you know

651
00:25:36,960 --> 00:25:39,039
use a tuple or something that will be

652
00:25:39,039 --> 00:25:40,880
more efficient than you know

653
00:25:40,880 --> 00:25:43,279
hitting on the garbage collector

654
00:25:43,279 --> 00:25:44,159
um

655
00:25:44,159 --> 00:25:45,760
another thing is erlang variables are

656
00:25:45,760 --> 00:25:47,440
immutable i mean

657
00:25:47,440 --> 00:25:49,039
given in

658
00:25:49,039 --> 00:25:51,520
in other languages um i i've known the

659
00:25:51,520 --> 00:25:53,679
concept but it can be really hard to to

660
00:25:53,679 --> 00:25:56,000
get back to that

661
00:25:56,000 --> 00:25:58,320
index or happily you can reassign

662
00:25:58,320 --> 00:26:00,559
variables so your structures are all

663
00:26:00,559 --> 00:26:04,960
immutable but you can reassign variables

664
00:26:05,039 --> 00:26:06,880
the whole thing has

665
00:26:06,880 --> 00:26:09,440
well this is not actually a bad thing

666
00:26:09,440 --> 00:26:11,440
but it's a learning curve and you have

667
00:26:11,440 --> 00:26:14,720
to learn to enum reduce or even map

668
00:26:14,720 --> 00:26:17,760
efficiently if you're using it but

669
00:26:17,760 --> 00:26:20,640
it's not that bad

670
00:26:20,880 --> 00:26:22,960
so the last example is going to be or

671
00:26:22,960 --> 00:26:24,559
for the live coding part

672
00:26:24,559 --> 00:26:27,440
adding a risk controller

673
00:26:27,440 --> 00:26:30,159
um in under 30 lines of code live

674
00:26:30,159 --> 00:26:32,240
updating the template that we just saw

675
00:26:32,240 --> 00:26:34,080
in the browser and we're doing it with

676
00:26:34,080 --> 00:26:36,320
curl so you could do it from an arduino

677
00:26:36,320 --> 00:26:38,080
or you know whatever you want to have

678
00:26:38,080 --> 00:26:40,240
there just a simple http client is

679
00:26:40,240 --> 00:26:41,520
enough

680
00:26:41,520 --> 00:26:43,760
and the thing will show off pattern

681
00:26:43,760 --> 00:26:48,120
matching with http requests

682
00:26:52,080 --> 00:26:54,559
all right now we're going back into our

683
00:26:54,559 --> 00:26:57,520
router adding or uncommenting the api

684
00:26:57,520 --> 00:26:58,480
endpoint

685
00:26:58,480 --> 00:27:00,799
and we're going to add

686
00:27:00,799 --> 00:27:03,039
a route for

687
00:27:03,039 --> 00:27:07,200
get request on slash api's left slash

688
00:27:07,200 --> 00:27:09,120
thermostat

689
00:27:09,120 --> 00:27:11,440
id and then the call either increase or

690
00:27:11,440 --> 00:27:14,440
decrease

691
00:27:22,320 --> 00:27:24,080
now we're writing a new

692
00:27:24,080 --> 00:27:25,919
controller for for elixir this is

693
00:27:25,919 --> 00:27:27,840
basically the other half to live view

694
00:27:27,840 --> 00:27:30,240
this is basically a standard controller

695
00:27:30,240 --> 00:27:33,279
which phoenix supports without problems

696
00:27:33,279 --> 00:27:35,440
so you can if you're used to mvc or

697
00:27:35,440 --> 00:27:36,880
anything like that and you can just use

698
00:27:36,880 --> 00:27:38,880
that model um but it won't have all the

699
00:27:38,880 --> 00:27:41,039
goodies that live view does so now we're

700
00:27:41,039 --> 00:27:42,559
basically just writing the basic um

701
00:27:42,559 --> 00:27:44,640
controller and the function thermostat

702
00:27:44,640 --> 00:27:46,799
that we specified in our router

703
00:27:46,799 --> 00:27:48,559
the first parameter

704
00:27:48,559 --> 00:27:52,480
is the id address at the id sorry

705
00:27:52,480 --> 00:27:55,520
and the second one is going to be a call

706
00:27:55,520 --> 00:27:57,679
if you look closely you can see the

707
00:27:57,679 --> 00:27:59,600
second parameter of the call parameter

708
00:27:59,600 --> 00:28:01,279
is actually not

709
00:28:01,279 --> 00:28:03,520
matching to a variable but to a specific

710
00:28:03,520 --> 00:28:05,120
string so you can mix and match

711
00:28:05,120 --> 00:28:07,440
basically so if you want one parameter

712
00:28:07,440 --> 00:28:09,039
but the other one has to be something

713
00:28:09,039 --> 00:28:11,279
specific you can actually pattern match

714
00:28:11,279 --> 00:28:12,559
on that

715
00:28:12,559 --> 00:28:14,960
so what we're doing now is basically

716
00:28:14,960 --> 00:28:17,919
it's the same thing we did before on the

717
00:28:17,919 --> 00:28:19,520
live view side it's basically getting

718
00:28:19,520 --> 00:28:22,320
the thermostat out of the database

719
00:28:22,320 --> 00:28:24,640
increasing the temperature and calling

720
00:28:24,640 --> 00:28:26,720
an update function onto

721
00:28:26,720 --> 00:28:29,120
that thermostat

722
00:28:29,120 --> 00:28:31,279
copy that over make it you know the

723
00:28:31,279 --> 00:28:33,200
opposite function of it

724
00:28:33,200 --> 00:28:37,120
and now we have the decrement function

725
00:28:38,720 --> 00:28:41,679
last but not least the update thermostat

726
00:28:41,679 --> 00:28:42,799
function which

727
00:28:42,799 --> 00:28:47,679
is also almost the same as before um

728
00:28:48,880 --> 00:28:51,520
updating the database um so we call

729
00:28:51,520 --> 00:28:53,840
measurements.update thermostat first

730
00:28:53,840 --> 00:28:56,480
parameter thermostat second the

731
00:28:56,480 --> 00:28:59,279
the fields you want to change

732
00:28:59,279 --> 00:29:02,240
and once that comes back you just you

733
00:29:02,240 --> 00:29:05,520
know broadcast it on the pops up

734
00:29:05,520 --> 00:29:08,799
as we did before on our thermostat id

735
00:29:08,799 --> 00:29:11,799
topic

736
00:29:15,279 --> 00:29:17,600
payload is the same as before

737
00:29:17,600 --> 00:29:20,000
atom of updated and the thermostat we

738
00:29:20,000 --> 00:29:22,159
got back from the database

739
00:29:22,159 --> 00:29:24,840
and that's about

740
00:29:24,840 --> 00:29:29,678
it so let's try that out

741
00:29:35,200 --> 00:29:37,440
so we're curling the

742
00:29:37,440 --> 00:29:38,880
endpoint for

743
00:29:38,880 --> 00:29:40,640
you know decrement the current increment

744
00:29:40,640 --> 00:29:41,919
increment and it's you know live

745
00:29:41,919 --> 00:29:44,480
updating the the website and we're doing

746
00:29:44,480 --> 00:29:47,679
that with curl and no dodgy refresh or

747
00:29:47,679 --> 00:29:50,080
anything

748
00:29:50,799 --> 00:29:52,799
so the last thing is we're also going to

749
00:29:52,799 --> 00:29:55,039
write a test for this functionality just

750
00:29:55,039 --> 00:29:57,520
to show off that it's also not much more

751
00:29:57,520 --> 00:29:59,679
complicated than it was with the live

752
00:29:59,679 --> 00:30:02,679
view

753
00:30:11,760 --> 00:30:12,480
so

754
00:30:12,480 --> 00:30:14,960
basically defining our rest controller

755
00:30:14,960 --> 00:30:16,080
module

756
00:30:16,080 --> 00:30:18,159
aliasing our database

757
00:30:18,159 --> 00:30:20,559
context called measurements and

758
00:30:20,559 --> 00:30:23,120
importing the fixture functions that we

759
00:30:23,120 --> 00:30:25,440
generated automatically while the just

760
00:30:25,440 --> 00:30:28,880
uh the tests were generated

761
00:30:30,880 --> 00:30:33,520
now we write the test for slash get

762
00:30:33,520 --> 00:30:34,320
the

763
00:30:34,320 --> 00:30:36,799
test for get slash api

764
00:30:36,799 --> 00:30:39,760
thermostat id and either increment and

765
00:30:39,760 --> 00:30:41,200
decrement

766
00:30:41,200 --> 00:30:43,520
we get passed into our tests connection

767
00:30:43,520 --> 00:30:46,240
which you can then you know if you work

768
00:30:46,240 --> 00:30:48,240
with the test suite a bit more you can

769
00:30:48,240 --> 00:30:50,720
do a lot of things there so the first

770
00:30:50,720 --> 00:30:52,880
assertion in terms of testing is going

771
00:30:52,880 --> 00:30:55,919
to be if the temperature is again 42

772
00:30:55,919 --> 00:30:58,240
which is default temperature

773
00:30:58,240 --> 00:31:00,080
now we're going to test the

774
00:31:00,080 --> 00:31:01,279
increment

775
00:31:01,279 --> 00:31:02,840
of the temperature

776
00:31:02,840 --> 00:31:05,120
so get

777
00:31:05,120 --> 00:31:07,600
for slash api thermostat

778
00:31:07,600 --> 00:31:10,640
the variable for the thermostat id and

779
00:31:10,640 --> 00:31:13,120
increment

780
00:31:13,200 --> 00:31:15,440
we assert that we got a

781
00:31:15,440 --> 00:31:19,519
200 http response and

782
00:31:19,519 --> 00:31:21,679
then we are getting that thermostat from

783
00:31:21,679 --> 00:31:24,960
the database freshly so we can test if

784
00:31:24,960 --> 00:31:29,640
the temperature went up

785
00:31:34,480 --> 00:31:36,159
copy that over for the decrement

786
00:31:36,159 --> 00:31:39,120
function and just you know swap the

787
00:31:39,120 --> 00:31:41,120
corresponding values

788
00:31:41,120 --> 00:31:42,640
so the url for decrementing is the

789
00:31:42,640 --> 00:31:45,120
correct one and testing for the 42

790
00:31:45,120 --> 00:31:47,519
temperature

791
00:31:47,519 --> 00:31:50,320
that's about it

792
00:31:52,880 --> 00:31:54,480
so

793
00:31:54,480 --> 00:31:55,840
now we run our

794
00:31:55,840 --> 00:31:59,158
test suite

795
00:32:00,240 --> 00:32:02,000
actually we're committing so

796
00:32:02,000 --> 00:32:03,519
that's the same thing

797
00:32:03,519 --> 00:32:06,240
now it's the same same thing

798
00:32:06,240 --> 00:32:08,240
so our formatting test went through

799
00:32:08,240 --> 00:32:10,000
testing the code went through everything

800
00:32:10,000 --> 00:32:12,799
is fine so we've implemented all of the

801
00:32:12,799 --> 00:32:14,720
things we want to implement in really a

802
00:32:14,720 --> 00:32:16,640
short amount of time

803
00:32:16,640 --> 00:32:19,120
and we tested all of them so you know

804
00:32:19,120 --> 00:32:21,039
you can deliver products or at least you

805
00:32:21,039 --> 00:32:22,880
know you have code that works and not

806
00:32:22,880 --> 00:32:25,039
just you know you tested it once after

807
00:32:25,039 --> 00:32:28,720
you coded it and stuff like that if you

808
00:32:28,720 --> 00:32:30,720
want to learn more about phoenix or the

809
00:32:30,720 --> 00:32:32,799
framework or elixir lang

810
00:32:32,799 --> 00:32:36,320
the urls are pretty easy elixir-lang.org

811
00:32:36,320 --> 00:32:38,159
is for the language itself

812
00:32:38,159 --> 00:32:41,360
phoenixframework.org is the url for the

813
00:32:41,360 --> 00:32:43,120
web framework itself

814
00:32:43,120 --> 00:32:46,480
um hex pm is like you know elixirs

815
00:32:46,480 --> 00:32:49,760
package manager so like gem for ruby so

816
00:32:49,760 --> 00:32:51,679
you can look go there and look for you

817
00:32:51,679 --> 00:32:53,840
know libraries that you want to use in

818
00:32:53,840 --> 00:32:56,080
your software

819
00:32:56,080 --> 00:32:58,880
and there's also hexdocs.pm

820
00:32:58,880 --> 00:33:01,840
which is basically for every package

821
00:33:01,840 --> 00:33:04,080
that gets published on hexpm

822
00:33:04,080 --> 00:33:06,000
there is documentation automatically

823
00:33:06,000 --> 00:33:08,159
generated published everything there

824
00:33:08,159 --> 00:33:11,679
right for you to consume

825
00:33:11,679 --> 00:33:12,799
so

826
00:33:12,799 --> 00:33:14,240
thanks for listening

827
00:33:14,240 --> 00:33:16,480
i hope something stuck find me on

828
00:33:16,480 --> 00:33:17,760
twitter

829
00:33:17,760 --> 00:33:19,440
if you want to look at the code again

830
00:33:19,440 --> 00:33:20,960
because you couldn't read it on screen

831
00:33:20,960 --> 00:33:21,919
then

832
00:33:21,919 --> 00:33:25,120
check out my github and

833
00:33:25,120 --> 00:33:27,679
visit us at the 22 20

834
00:33:27,679 --> 00:33:30,240
23 42 village right next to the hack

835
00:33:30,240 --> 00:33:32,399
center we have franconian beer

836
00:33:32,399 --> 00:33:34,720
if anyone is interested and we're not

837
00:33:34,720 --> 00:33:36,480
trying to take anything of it home with

838
00:33:36,480 --> 00:33:37,440
us so

839
00:33:37,440 --> 00:33:39,760
if we could get some support in clearing

840
00:33:39,760 --> 00:33:41,840
that out that would be great

841
00:33:41,840 --> 00:33:45,360
all right um the q a will be on that

842
00:33:45,360 --> 00:33:48,159
exit outside of that wait we have plenty

843
00:33:48,159 --> 00:33:50,880
of time you have that

844
00:33:50,880 --> 00:33:52,320
presentation so much that we can

845
00:33:52,320 --> 00:33:54,640
actually do a q a right now and right

846
00:33:54,640 --> 00:33:56,320
here awesome then let's do it here which

847
00:33:56,320 --> 00:33:57,600
is great because this will result that

848
00:33:57,600 --> 00:33:59,679
the q a is also on the stream and that's

849
00:33:59,679 --> 00:34:01,519
great which is great so if you have any

850
00:34:01,519 --> 00:34:03,039
questions please come to these

851
00:34:03,039 --> 00:34:06,240
microphones in here and please uh ask

852
00:34:06,240 --> 00:34:07,679
away

853
00:34:07,679 --> 00:34:09,119
signal angel do we have something from

854
00:34:09,119 --> 00:34:10,239
the internet

855
00:34:10,239 --> 00:34:12,638
thank you

856
00:34:17,199 --> 00:34:19,440
seems like

857
00:34:19,440 --> 00:34:19,839
yeah me

858
00:34:19,839 --> 00:34:21,040
learned something

859
00:34:21,040 --> 00:34:25,520
closer yes learn something new

860
00:34:26,480 --> 00:34:29,359
my constructive critic is the rushing

861
00:34:29,359 --> 00:34:30,879
through the code was a little bit too

862
00:34:30,879 --> 00:34:32,320
fast to

863
00:34:32,320 --> 00:34:35,199
see the details and i would have needed

864
00:34:35,199 --> 00:34:36,000
some

865
00:34:36,000 --> 00:34:38,320
yes syntax

866
00:34:38,320 --> 00:34:40,560
ideas what

867
00:34:40,560 --> 00:34:42,399
interfunctions mean

868
00:34:42,399 --> 00:34:45,199
so i can follow a little bit more

869
00:34:45,199 --> 00:34:50,158
but definitely worth to look into it

870
00:34:50,239 --> 00:34:51,918
well the idea wasn't to actually teach

871
00:34:51,918 --> 00:34:53,520
your language it was to show you how

872
00:34:53,520 --> 00:34:55,679
efficient that framework is so

873
00:34:55,679 --> 00:34:56,719
you

874
00:34:56,719 --> 00:34:58,560
actually just wanted to tease you to

875
00:34:58,560 --> 00:34:59,839
either you're interested in the

876
00:34:59,839 --> 00:35:01,760
efficiency then learn the language and

877
00:35:01,760 --> 00:35:04,240
the concepts or you know if if that's

878
00:35:04,240 --> 00:35:05,920
nothing for you then don't look further

879
00:35:05,920 --> 00:35:07,920
but it's also hard to stuff so many

880
00:35:07,920 --> 00:35:09,920
information you know if i would have

881
00:35:09,920 --> 00:35:12,400
just added one more module or

882
00:35:12,400 --> 00:35:13,599
show off then

883
00:35:13,599 --> 00:35:15,040
you know

884
00:35:15,040 --> 00:35:17,839
it's hard to time then

885
00:35:17,839 --> 00:35:18,800
see

886
00:35:18,800 --> 00:35:19,920
thank you

887
00:35:19,920 --> 00:35:22,720
we do have two microphones you may line

888
00:35:22,720 --> 00:35:25,359
up behind them and i would then

889
00:35:25,359 --> 00:35:27,359
call you out one after the other please

890
00:35:27,359 --> 00:35:28,880
go ahead

891
00:35:28,880 --> 00:35:31,440
yeah question um how hard would it be to

892
00:35:31,440 --> 00:35:33,760
integrate user management and probably

893
00:35:33,760 --> 00:35:37,440
even single sign-on with a microsoft ide

894
00:35:37,440 --> 00:35:39,280
thank you for this great question um

895
00:35:39,280 --> 00:35:41,280
that's absolutely not not an issue there

896
00:35:41,280 --> 00:35:43,440
are a couple of open id connect

897
00:35:43,440 --> 00:35:45,119
connectors or

898
00:35:45,119 --> 00:35:47,280
packages that you can use um they're

899
00:35:47,280 --> 00:35:49,200
pretty easy to implement and basically

900
00:35:49,200 --> 00:35:50,640
you're just implementing about like

901
00:35:50,640 --> 00:35:53,200
let's say 30 lines of actual code for

902
00:35:53,200 --> 00:35:55,920
the redirect once you know you come back

903
00:35:55,920 --> 00:35:58,320
from the single sign on so actually just

904
00:35:58,320 --> 00:36:00,000
implementing the parts that matter in

905
00:36:00,000 --> 00:36:01,599
those regards and not reinventing the

906
00:36:01,599 --> 00:36:04,079
wheel of how single sign-on works so

907
00:36:04,079 --> 00:36:05,839
you're probably done in about one or two

908
00:36:05,839 --> 00:36:08,720
hours if you're a first-time user if

909
00:36:08,720 --> 00:36:10,480
you're season one then let's say 15

910
00:36:10,480 --> 00:36:11,680
minutes

911
00:36:11,680 --> 00:36:13,359
then you have single sign-on user

912
00:36:13,359 --> 00:36:14,800
management

913
00:36:14,800 --> 00:36:16,720
depends if you want single sign-on then

914
00:36:16,720 --> 00:36:17,839
you don't need

915
00:36:17,839 --> 00:36:20,240
technical big user management in there

916
00:36:20,240 --> 00:36:22,400
if you want to implement it yourself

917
00:36:22,400 --> 00:36:24,320
use a crutch generator and add the

918
00:36:24,320 --> 00:36:25,920
functionality around it let's say an

919
00:36:25,920 --> 00:36:27,760
hour or two

920
00:36:27,760 --> 00:36:29,119
yeah

921
00:36:29,119 --> 00:36:31,119
so not very hard to summarize not very

922
00:36:31,119 --> 00:36:32,720
hard no very good thank you for the

923
00:36:32,720 --> 00:36:34,960
question please continue thank you for

924
00:36:34,960 --> 00:36:36,400
your presentation

925
00:36:36,400 --> 00:36:38,839
um very

926
00:36:38,839 --> 00:36:41,359
inspiring but i was wondering can i also

927
00:36:41,359 --> 00:36:43,760
write my business logic in heirloom

928
00:36:43,760 --> 00:36:45,920
you probably can

929
00:36:45,920 --> 00:36:48,480
i did it i mean

930
00:36:48,480 --> 00:36:50,400
okay thank you

931
00:36:50,400 --> 00:36:52,720
thank you

932
00:36:52,800 --> 00:36:56,079
um i was wondering what the update cycle

933
00:36:56,079 --> 00:36:59,280
is looking for the um

934
00:36:59,280 --> 00:37:00,560
can you please get closer to the

935
00:37:00,560 --> 00:37:02,640
microphone sorry yeah the update cycle

936
00:37:02,640 --> 00:37:04,240
for live view and the phoenix framework

937
00:37:04,240 --> 00:37:06,320
like if there's a new version how much

938
00:37:06,320 --> 00:37:08,880
pain would it be to implement that um i

939
00:37:08,880 --> 00:37:11,280
haven't had much pain in so they're

940
00:37:11,280 --> 00:37:13,520
pretty good with backwards compatibility

941
00:37:13,520 --> 00:37:15,839
so but if you're using something of the

942
00:37:15,839 --> 00:37:17,520
new features then of course you will

943
00:37:17,520 --> 00:37:20,000
have to adapt code but i haven't come

944
00:37:20,000 --> 00:37:22,079
across that much that changed in terms

945
00:37:22,079 --> 00:37:23,839
of if you're using the nbc part

946
00:37:23,839 --> 00:37:25,200
everything stayed the same for you know

947
00:37:25,200 --> 00:37:28,000
the couple past couple of years so

948
00:37:28,000 --> 00:37:30,720
that didn't change much um live view is

949
00:37:30,720 --> 00:37:32,800
the concept i just talked about is like

950
00:37:32,800 --> 00:37:35,680
two years old now um i got started when

951
00:37:35,680 --> 00:37:38,079
you know version 0.2.1

952
00:37:38,079 --> 00:37:39,680
was out so pretty early or something

953
00:37:39,680 --> 00:37:41,520
like that really really early and i

954
00:37:41,520 --> 00:37:43,359
liked it that much but

955
00:37:43,359 --> 00:37:45,200
you know if you want to port over code

956
00:37:45,200 --> 00:37:46,800
then you know you're going to have to

957
00:37:46,800 --> 00:37:49,440
port over some code to match the new

958
00:37:49,440 --> 00:37:51,680
requirements but in terms of backwards

959
00:37:51,680 --> 00:37:53,359
compatibility i don't think you have to

960
00:37:53,359 --> 00:37:55,760
worry about that your code won't run in

961
00:37:55,760 --> 00:37:57,599
a year or two in terms of just because

962
00:37:57,599 --> 00:38:00,079
you're updating

963
00:38:00,079 --> 00:38:02,160
thank you awesome just to let you know

964
00:38:02,160 --> 00:38:04,800
we have still about 15 minutes left in

965
00:38:04,800 --> 00:38:06,960
the irregular slot so

966
00:38:06,960 --> 00:38:08,960
i would think as opposed to the way we

967
00:38:08,960 --> 00:38:11,760
usually do it we can allow extended

968
00:38:11,760 --> 00:38:14,880
questions awesome

969
00:38:14,960 --> 00:38:17,280
hey thanks for the presentation

970
00:38:17,280 --> 00:38:19,440
i was just wondering is there any cool

971
00:38:19,440 --> 00:38:21,280
tools that you would advise for in your

972
00:38:21,280 --> 00:38:24,880
editor i see use vim for both elixir and

973
00:38:24,880 --> 00:38:26,880
phoenix framework i mean i've been a

974
00:38:26,880 --> 00:38:29,680
vimb user for you know since i'm 12

975
00:38:29,680 --> 00:38:31,760
years old so i'm

976
00:38:31,760 --> 00:38:32,880
sometimes

977
00:38:32,880 --> 00:38:34,560
if

978
00:38:34,560 --> 00:38:36,400
i've heard people have good experiences

979
00:38:36,400 --> 00:38:37,920
with vs code

980
00:38:37,920 --> 00:38:40,079
no but i mean any tooling that you use

981
00:38:40,079 --> 00:38:42,320
in vim like any plugins that you would

982
00:38:42,320 --> 00:38:46,320
advise for phoenix framework or elixir

983
00:38:46,320 --> 00:38:49,040
there's just a plug-in i think of i'm

984
00:38:49,040 --> 00:38:50,960
using it with i don't know i configured

985
00:38:50,960 --> 00:38:52,800
it two years ago it just works

986
00:38:52,800 --> 00:38:55,520
it wasn't much magic to it um so there's

987
00:38:55,520 --> 00:38:58,160
just like a vim plug-in and use that

988
00:38:58,160 --> 00:38:59,839
has everything you need yeah it's also

989
00:38:59,839 --> 00:39:02,560
specific for phoenix yeah okay

990
00:39:02,560 --> 00:39:04,800
no it's it's elixir okay

991
00:39:04,800 --> 00:39:07,359
all right thanks

992
00:39:07,359 --> 00:39:09,680
thanks awesome next one please go ahead

993
00:39:09,680 --> 00:39:11,200
yeah i thought i could ask only one

994
00:39:11,200 --> 00:39:13,119
question

995
00:39:13,119 --> 00:39:14,320
if you like to keep more distance

996
00:39:14,320 --> 00:39:16,079
between you you may also use the other

997
00:39:16,079 --> 00:39:17,760
microphone in the back i will equally

998
00:39:17,760 --> 00:39:20,079
switch between them

999
00:39:20,079 --> 00:39:21,839
i was wondering what is the underlying

1000
00:39:21,839 --> 00:39:24,240
database uh that was poscarious girl

1001
00:39:24,240 --> 00:39:26,240
which is the default for all phoenix

1002
00:39:26,240 --> 00:39:27,359
projects

1003
00:39:27,359 --> 00:39:29,760
so but when you're generating the new

1004
00:39:29,760 --> 00:39:31,920
project i think you can just specify

1005
00:39:31,920 --> 00:39:33,839
which database driver you want to use

1006
00:39:33,839 --> 00:39:35,599
and then everything gets generated for

1007
00:39:35,599 --> 00:39:37,839
most of the common databases

1008
00:39:37,839 --> 00:39:41,680
cqlite mysql whatever you have there

1009
00:39:41,680 --> 00:39:43,680
not amnesia

1010
00:39:43,680 --> 00:39:47,599
um i haven't specifically looked

1011
00:39:47,599 --> 00:39:48,960
because that's not okay

1012
00:39:48,960 --> 00:39:50,560
because that's not the secret that's the

1013
00:39:50,560 --> 00:39:52,560
the the airlong built in kind of

1014
00:39:52,560 --> 00:39:55,040
database yeah but we're basically using

1015
00:39:55,040 --> 00:39:58,720
ecto phoenix is actually using the acto

1016
00:39:58,720 --> 00:40:00,079
sql

1017
00:40:00,079 --> 00:40:03,200
object relational management system so

1018
00:40:03,200 --> 00:40:05,599
i don't think it comes with amnesia

1019
00:40:05,599 --> 00:40:06,880
support

1020
00:40:06,880 --> 00:40:09,760
i could be wrong i haven't checked

1021
00:40:09,760 --> 00:40:12,079
i mean people have implemented other key

1022
00:40:12,079 --> 00:40:14,960
value stores and stuff like that uh as

1023
00:40:14,960 --> 00:40:17,119
you know an adapter for for ecto so i

1024
00:40:17,119 --> 00:40:18,319
wouldn't be surprised if there's really

1025
00:40:18,319 --> 00:40:19,920
an adapter for it

1026
00:40:19,920 --> 00:40:21,280
so

1027
00:40:21,280 --> 00:40:23,359
okay

1028
00:40:23,359 --> 00:40:25,839
thank you

1029
00:40:26,319 --> 00:40:27,920
right um

1030
00:40:27,920 --> 00:40:30,560
hello again hello again uh how big is

1031
00:40:30,560 --> 00:40:33,680
the code that gets sent to the client

1032
00:40:33,680 --> 00:40:35,040
the initial

1033
00:40:35,040 --> 00:40:37,200
libraries that gets loaded um they're

1034
00:40:37,200 --> 00:40:38,960
actually pretty small if you're not you

1035
00:40:38,960 --> 00:40:40,240
know

1036
00:40:40,240 --> 00:40:42,160
you can work with the javascript part of

1037
00:40:42,160 --> 00:40:44,480
it you can inject your own stuff no

1038
00:40:44,480 --> 00:40:46,560
problem at all um so it gets bigger of

1039
00:40:46,560 --> 00:40:48,400
course but the standard stuff is rather

1040
00:40:48,400 --> 00:40:50,800
small i haven't i couldn't tell you off

1041
00:40:50,800 --> 00:40:53,359
the top of my head um but it's it loads

1042
00:40:53,359 --> 00:40:55,440
in seconds and there's no bloat in it so

1043
00:40:55,440 --> 00:40:57,760
it's really just the underlying um live

1044
00:40:57,760 --> 00:41:00,480
view javascript and a couple of other um

1045
00:41:00,480 --> 00:41:02,480
i think the top bar thing so you see

1046
00:41:02,480 --> 00:41:04,400
when the web page is actually reloading

1047
00:41:04,400 --> 00:41:06,640
and stuff like that but um

1048
00:41:06,640 --> 00:41:08,000
to my knowledge that's pretty

1049
00:41:08,000 --> 00:41:10,560
insignificant in terms of loading size

1050
00:41:10,560 --> 00:41:13,599
like like 200 kilobytes maybe or

1051
00:41:13,599 --> 00:41:15,599
probably less even yeah i wouldn't be

1052
00:41:15,599 --> 00:41:18,160
surprised good i think

1053
00:41:18,160 --> 00:41:19,599
less than 30.

1054
00:41:19,599 --> 00:41:20,720
okay

1055
00:41:20,720 --> 00:41:22,800
thanks

1056
00:41:22,800 --> 00:41:24,000
thank you

1057
00:41:24,000 --> 00:41:27,440
all right please the back microphone now

1058
00:41:27,440 --> 00:41:29,680
yes oh it sounds about small

1059
00:41:29,680 --> 00:41:31,760
um hello

1060
00:41:31,760 --> 00:41:32,800
hello

1061
00:41:32,800 --> 00:41:34,560
are there any other

1062
00:41:34,560 --> 00:41:37,200
web controls or bootstraps you can

1063
00:41:37,200 --> 00:41:38,160
include

1064
00:41:38,160 --> 00:41:40,319
and how do you work on the javascript

1065
00:41:40,319 --> 00:41:41,599
part

1066
00:41:41,599 --> 00:41:43,920
there's an app.js file in the project

1067
00:41:43,920 --> 00:41:45,680
you can just you know go ahead and work

1068
00:41:45,680 --> 00:41:48,160
with that but you don't need to that's

1069
00:41:48,160 --> 00:41:50,400
the whole thing of the talk um doesn't

1070
00:41:50,400 --> 00:41:52,400
mean you can't or you shouldn't but you

1071
00:41:52,400 --> 00:41:55,680
don't have to if you don't want to so

1072
00:41:55,680 --> 00:41:59,839
um yeah and using any other web controls

1073
00:41:59,839 --> 00:42:02,319
i mean like telerik

1074
00:42:02,319 --> 00:42:03,520
tailwind is

1075
00:42:03,520 --> 00:42:06,079
easily available as a gem as a hex

1076
00:42:06,079 --> 00:42:07,599
package so you can just you know

1077
00:42:07,599 --> 00:42:09,920
reference it there's a pretty awesome

1078
00:42:09,920 --> 00:42:11,839
tutorial on it um

1079
00:42:11,839 --> 00:42:13,200
you have to just google for it for

1080
00:42:13,200 --> 00:42:15,520
phoenix framework tailwind

1081
00:42:15,520 --> 00:42:17,599
and you will step on it that's probably

1082
00:42:17,599 --> 00:42:19,920
the first hit on google

1083
00:42:19,920 --> 00:42:22,079
okay that's very good so the front

1084
00:42:22,079 --> 00:42:24,880
microphone please

1085
00:42:24,880 --> 00:42:26,960
you used pubshop

1086
00:42:26,960 --> 00:42:29,680
do you recommend it for large projects i

1087
00:42:29,680 --> 00:42:32,560
heard that that can be too limiting are

1088
00:42:32,560 --> 00:42:34,800
there other messaging

1089
00:42:34,800 --> 00:42:36,319
ways

1090
00:42:36,319 --> 00:42:39,119
to is it included yeah it's basic it

1091
00:42:39,119 --> 00:42:41,119
comes with a distributed pops up the

1092
00:42:41,119 --> 00:42:42,640
thing i like about it if you're using

1093
00:42:42,640 --> 00:42:44,400
the pub sub stuff you can just cluster

1094
00:42:44,400 --> 00:42:46,800
or scale up your installation so

1095
00:42:46,800 --> 00:42:48,400
whatever your project may be and you

1096
00:42:48,400 --> 00:42:50,400
need more instances or whatever you can

1097
00:42:50,400 --> 00:42:52,960
just cluster and that pops up stuff

1098
00:42:52,960 --> 00:42:54,960
basically you know takes care of

1099
00:42:54,960 --> 00:42:56,640
you know i need to reach all of the

1100
00:42:56,640 --> 00:42:58,240
nodes because you're basically having

1101
00:42:58,240 --> 00:43:00,720
just a big pub sub cluster so i mean if

1102
00:43:00,720 --> 00:43:01,920
you if there are really a lot of

1103
00:43:01,920 --> 00:43:03,680
messages going on

1104
00:43:03,680 --> 00:43:05,920
are there alternatives to popshop or do

1105
00:43:05,920 --> 00:43:07,920
you not recommend that

1106
00:43:07,920 --> 00:43:10,560
i haven't seen a single person actually

1107
00:43:10,560 --> 00:43:13,040
doing any alternatives to it

1108
00:43:13,040 --> 00:43:13,920
um

1109
00:43:13,920 --> 00:43:16,560
i wouldn't advise using an alternative

1110
00:43:16,560 --> 00:43:19,200
but you you're free to try

1111
00:43:19,200 --> 00:43:21,040
okay thanks

1112
00:43:21,040 --> 00:43:22,319
thank you

1113
00:43:22,319 --> 00:43:24,079
do we have a question from the internet

1114
00:43:24,079 --> 00:43:26,400
in the meantime signal angel that is not

1115
00:43:26,400 --> 00:43:28,480
the case in this case i would like you

1116
00:43:28,480 --> 00:43:29,599
to give a

1117
00:43:29,599 --> 00:43:33,920
round of loud plows for france

1118
00:43:34,380 --> 00:43:35,760
[Music]

1119
00:43:35,760 --> 00:43:38,760
thanks

1120
00:43:42,560 --> 00:43:44,640
you

