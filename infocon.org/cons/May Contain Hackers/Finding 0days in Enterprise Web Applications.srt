1
00:00:01,280 --> 00:00:12,559
[Music]

2
00:00:15,280 --> 00:00:17,359
i i know i've just been introduced but

3
00:00:17,359 --> 00:00:19,520
you know i'm i'm infosec au on twitter

4
00:00:19,520 --> 00:00:21,119
so feel free to reach out to me after

5
00:00:21,119 --> 00:00:23,920
you've watched this presentation and you

6
00:00:23,920 --> 00:00:25,359
have anything you want to talk about

7
00:00:25,359 --> 00:00:27,439
regarding enterprise application

8
00:00:27,439 --> 00:00:30,960
software security um so i'll just move

9
00:00:30,960 --> 00:00:33,360
on with the talk and uh the first thing

10
00:00:33,360 --> 00:00:35,360
i want to go through today is how we

11
00:00:35,360 --> 00:00:37,600
actually obtain the source code when you

12
00:00:37,600 --> 00:00:39,360
look at enterprise web applications one

13
00:00:39,360 --> 00:00:41,120
of the biggest things about them is

14
00:00:41,120 --> 00:00:42,399
there's a lot of security through

15
00:00:42,399 --> 00:00:44,399
obscurity the fact that you simply

16
00:00:44,399 --> 00:00:46,559
cannot obtain the source code is often a

17
00:00:46,559 --> 00:00:48,399
really good defense mechanism for not

18
00:00:48,399 --> 00:00:50,719
finding vulnerabilities within it so one

19
00:00:50,719 --> 00:00:53,039
of the things that is something that you

20
00:00:53,039 --> 00:00:54,879
have to be really good at is being able

21
00:00:54,879 --> 00:00:56,800
to get your hands on the software and

22
00:00:56,800 --> 00:00:58,160
analyzing the source code from that

23
00:00:58,160 --> 00:01:00,160
point onwards i'm going to be going

24
00:01:00,160 --> 00:01:01,760
through some of the common techniques

25
00:01:01,760 --> 00:01:03,280
that i've used over the last couple of

26
00:01:03,280 --> 00:01:06,000
years to be able to discover source to

27
00:01:06,000 --> 00:01:07,760
it to be able to obtain the source code

28
00:01:07,760 --> 00:01:10,000
for these enterprise applications

29
00:01:10,000 --> 00:01:11,280
the first technique i'm going to be

30
00:01:11,280 --> 00:01:13,200
going through today is obtaining the

31
00:01:13,200 --> 00:01:15,920
source code through cloud marketplaces

32
00:01:15,920 --> 00:01:17,280
so if you're not familiar with cloud

33
00:01:17,280 --> 00:01:20,240
marketplaces um we have many vendors

34
00:01:20,240 --> 00:01:21,920
list their software on these cloud

35
00:01:21,920 --> 00:01:25,520
marketplaces on aws azure and gcp in

36
00:01:25,520 --> 00:01:27,840
many cases you're able to obtain a trial

37
00:01:27,840 --> 00:01:29,439
license that lets you access the

38
00:01:29,439 --> 00:01:31,520
software that's most likely typical

39
00:01:31,520 --> 00:01:33,439
typically gated through an enterprise

40
00:01:33,439 --> 00:01:34,880
sales process

41
00:01:34,880 --> 00:01:36,799
i think not many people enjoy talking to

42
00:01:36,799 --> 00:01:38,640
salespeople so this is a great way to

43
00:01:38,640 --> 00:01:41,040
get access to the software

44
00:01:41,040 --> 00:01:42,640
this is really valuable because we can

45
00:01:42,640 --> 00:01:44,560
pretty much spin up enterprise software

46
00:01:44,560 --> 00:01:46,880
from these marketplaces and you are able

47
00:01:46,880 --> 00:01:48,720
to get access to source code in many

48
00:01:48,720 --> 00:01:50,399
different ways by either dumping the

49
00:01:50,399 --> 00:01:51,600
disk or

50
00:01:51,600 --> 00:01:53,600
getting a shell access once you spun it

51
00:01:53,600 --> 00:01:54,479
up

52
00:01:54,479 --> 00:01:55,600
i've used this

53
00:01:55,600 --> 00:01:57,680
technique multiple times in order to

54
00:01:57,680 --> 00:01:59,280
gain access to source code i typically

55
00:01:59,280 --> 00:02:01,119
wouldn't be able to get

56
00:02:01,119 --> 00:02:03,439
so here's an example this is on aws

57
00:02:03,439 --> 00:02:06,079
marketplace one day i came across this

58
00:02:06,079 --> 00:02:08,639
asset running on fb.com which is

59
00:02:08,639 --> 00:02:10,800
facebook and it was running something

60
00:02:10,800 --> 00:02:14,000
called pcrip connection manager looking

61
00:02:14,000 --> 00:02:15,520
on google and doing a little bit of

62
00:02:15,520 --> 00:02:17,520
sleuthing i found that it was actually

63
00:02:17,520 --> 00:02:20,239
the software called teradici pcoip

64
00:02:20,239 --> 00:02:22,879
connection manager and thankfully it was

65
00:02:22,879 --> 00:02:24,959
available on a cloud marketplace i was

66
00:02:24,959 --> 00:02:26,640
able to spin up this software from the

67
00:02:26,640 --> 00:02:28,959
cloud marketplace obtain the source code

68
00:02:28,959 --> 00:02:30,959
and then find vulnerabilities within it

69
00:02:30,959 --> 00:02:32,720
so this is just an example but there's

70
00:02:32,720 --> 00:02:34,400
many enterprise software on these cloud

71
00:02:34,400 --> 00:02:36,400
marketplaces and it's something that you

72
00:02:36,400 --> 00:02:39,120
should check first off before you give

73
00:02:39,120 --> 00:02:43,120
up on auditing enterprise software

74
00:02:43,120 --> 00:02:44,800
the second technique that i want to go

75
00:02:44,800 --> 00:02:46,800
through today is container image

76
00:02:46,800 --> 00:02:48,319
registries

77
00:02:48,319 --> 00:02:51,440
so this uh really includes docker hub

78
00:02:51,440 --> 00:02:53,480
for the most part so if you just go to

79
00:02:53,480 --> 00:02:56,000
hub.docker.com you can search for any of

80
00:02:56,000 --> 00:02:57,440
the images that have been put up on

81
00:02:57,440 --> 00:02:58,959
docker hub

82
00:02:58,959 --> 00:03:00,879
if an image is available you can simply

83
00:03:00,879 --> 00:03:02,879
spin up that docker container and then

84
00:03:02,879 --> 00:03:04,239
you can gain shell access to the

85
00:03:04,239 --> 00:03:06,000
container and then obtain all the source

86
00:03:06,000 --> 00:03:08,159
code whether that's war files jar files

87
00:03:08,159 --> 00:03:11,760
php files whatever for further analysis

88
00:03:11,760 --> 00:03:13,680
this is similar to cloud marketplaces

89
00:03:13,680 --> 00:03:15,920
but you're most likely running random

90
00:03:15,920 --> 00:03:18,000
images that people have built on the

91
00:03:18,000 --> 00:03:19,920
internet but this is also a very

92
00:03:19,920 --> 00:03:22,000
successful methodology when it comes to

93
00:03:22,000 --> 00:03:24,159
obtaining software

94
00:03:24,159 --> 00:03:25,840
so you can see here

95
00:03:25,840 --> 00:03:28,159
you can obtain adobe experience cloud

96
00:03:28,159 --> 00:03:30,879
either by contacting sales or relying on

97
00:03:30,879 --> 00:03:32,879
a docker image that's already been built

98
00:03:32,879 --> 00:03:34,879
and pushed to docker hub so you're

99
00:03:34,879 --> 00:03:36,799
you're it's much easier to find this

100
00:03:36,799 --> 00:03:39,120
software pre-built and you can even see

101
00:03:39,120 --> 00:03:40,959
here that it was updated two months ago

102
00:03:40,959 --> 00:03:43,280
so it's not as if it's outdated and it's

103
00:03:43,280 --> 00:03:44,879
most likely still

104
00:03:44,879 --> 00:03:46,640
current enough for you to perform your

105
00:03:46,640 --> 00:03:48,720
security analysis

106
00:03:48,720 --> 00:03:50,480
but yeah there's a lot of enterprise

107
00:03:50,480 --> 00:03:53,280
software on docker hub sometimes posted

108
00:03:53,280 --> 00:03:55,840
inadvertently and sometimes

109
00:03:55,840 --> 00:03:58,000
it's not intentional but it's great for

110
00:03:58,000 --> 00:04:00,159
us security researchers so we can get

111
00:04:00,159 --> 00:04:03,280
access to the source code

112
00:04:03,680 --> 00:04:05,680
the third technique is obviously

113
00:04:05,680 --> 00:04:07,439
contacting sales

114
00:04:07,439 --> 00:04:09,680
i mean these enterprise software

115
00:04:09,680 --> 00:04:12,959
companies have big sales teams and

116
00:04:12,959 --> 00:04:15,280
this is a high friction high reward

117
00:04:15,280 --> 00:04:18,560
technique um if the only possible way uh

118
00:04:18,560 --> 00:04:20,320
is to contact sales to get a copy of the

119
00:04:20,320 --> 00:04:22,320
software you better believe that that

120
00:04:22,320 --> 00:04:24,240
software hasn't had many eyes looking at

121
00:04:24,240 --> 00:04:26,720
it from a security perspective

122
00:04:26,720 --> 00:04:28,800
while this is often the highest friction

123
00:04:28,800 --> 00:04:30,479
if you can convince sales to give you a

124
00:04:30,479 --> 00:04:32,400
trial copy it's quite likely you're

125
00:04:32,400 --> 00:04:35,040
gonna own the crap out of it and this is

126
00:04:35,040 --> 00:04:37,199
my least favorite route because boo who

127
00:04:37,199 --> 00:04:39,520
wants to talk to sales but historically

128
00:04:39,520 --> 00:04:42,080
speaking it's had the highest rewards

129
00:04:42,080 --> 00:04:43,680
for me personally when it comes to

130
00:04:43,680 --> 00:04:47,120
finding critical vulnerabilities

131
00:04:47,600 --> 00:04:50,160
another technique is uh freelancing

132
00:04:50,160 --> 00:04:51,840
websites so this is a little bit more

133
00:04:51,840 --> 00:04:53,360
creative

134
00:04:53,360 --> 00:04:54,960
i'm sure a lot of you would have heard

135
00:04:54,960 --> 00:04:57,120
of sites like fiverr

136
00:04:57,120 --> 00:04:59,759
so if you find experts in the certain

137
00:04:59,759 --> 00:05:01,280
software you're auditing on these

138
00:05:01,280 --> 00:05:03,919
freelancing websites you can convince

139
00:05:03,919 --> 00:05:05,919
them to give you a copy of the source

140
00:05:05,919 --> 00:05:07,039
code

141
00:05:07,039 --> 00:05:09,360
so this is an example of me trying to

142
00:05:09,360 --> 00:05:12,240
get a copy of websphere commerce which

143
00:05:12,240 --> 00:05:15,280
is a very obscure but still quite

144
00:05:15,280 --> 00:05:17,919
popular software deployed

145
00:05:17,919 --> 00:05:20,080
and i just asked someone on fiverr who

146
00:05:20,080 --> 00:05:23,600
specializes in deployments of websphere

147
00:05:23,600 --> 00:05:25,039
so this is another technique that you

148
00:05:25,039 --> 00:05:27,039
can use to gain access to source code

149
00:05:27,039 --> 00:05:28,639
this has been successful for me in the

150
00:05:28,639 --> 00:05:30,880
past especially when there's really no

151
00:05:30,880 --> 00:05:33,680
other way to get it

152
00:05:34,160 --> 00:05:37,600
obviously another technique is github

153
00:05:37,600 --> 00:05:39,759
so you can just use github docs to try

154
00:05:39,759 --> 00:05:41,759
and identify whether or not someone has

155
00:05:41,759 --> 00:05:44,479
put up this software on github and then

156
00:05:44,479 --> 00:05:47,520
obtain the copy of all that software

157
00:05:47,520 --> 00:05:49,520
so for example if you're using the

158
00:05:49,520 --> 00:05:51,759
enterprise web application and you see

159
00:05:51,759 --> 00:05:54,639
install cms step 1 you could chuck that

160
00:05:54,639 --> 00:05:56,319
in as a file name and see if that's

161
00:05:56,319 --> 00:05:58,400
available somewhere on github this can

162
00:05:58,400 --> 00:06:01,199
be really effective for net or java code

163
00:06:01,199 --> 00:06:03,039
bases by searching the correct strings

164
00:06:03,039 --> 00:06:05,599
on github

165
00:06:05,840 --> 00:06:07,440
and lastly the technique i want to go

166
00:06:07,440 --> 00:06:08,400
through

167
00:06:08,400 --> 00:06:09,520
which

168
00:06:09,520 --> 00:06:11,440
you know depending on the situation can

169
00:06:11,440 --> 00:06:13,199
be very valuable is chaining

170
00:06:13,199 --> 00:06:14,639
vulnerabilities

171
00:06:14,639 --> 00:06:17,360
um so you can you can often leverage

172
00:06:17,360 --> 00:06:19,039
other vulnerabilities to obtain source

173
00:06:19,039 --> 00:06:21,280
code for applications challenges often

174
00:06:21,280 --> 00:06:23,039
include not knowing all the file

175
00:06:23,039 --> 00:06:25,759
locations and potentially not allowed

176
00:06:25,759 --> 00:06:27,680
depending if it's a bug bounty program

177
00:06:27,680 --> 00:06:30,000
or a specific vendor you're targeting

178
00:06:30,000 --> 00:06:32,080
but one of the more common techniques

179
00:06:32,080 --> 00:06:33,520
with vulnerabilities is if you have

180
00:06:33,520 --> 00:06:35,680
local file disclosure you can leverage

181
00:06:35,680 --> 00:06:37,600
that local file disclosure to disclose

182
00:06:37,600 --> 00:06:38,960
the source code

183
00:06:38,960 --> 00:06:40,400
as long as you know the location of the

184
00:06:40,400 --> 00:06:42,240
source code

185
00:06:42,240 --> 00:06:44,560
another one is xxe which is external

186
00:06:44,560 --> 00:06:46,639
entity injection that can also lead to

187
00:06:46,639 --> 00:06:48,400
local file disclosure and also can lead

188
00:06:48,400 --> 00:06:50,479
to source code disclosure

189
00:06:50,479 --> 00:06:52,639
obviously command execution will let you

190
00:06:52,639 --> 00:06:55,360
read the source code um but yeah

191
00:06:55,360 --> 00:06:57,440
on.net systems you can often download

192
00:06:57,440 --> 00:06:59,680
the dll files from the bin folder and

193
00:06:59,680 --> 00:07:01,520
decompile them back to c-sharp source

194
00:07:01,520 --> 00:07:02,400
code

195
00:07:02,400 --> 00:07:04,080
so this is something that

196
00:07:04,080 --> 00:07:05,599
i've also historically used when it

197
00:07:05,599 --> 00:07:07,520
comes to obtaining access to enterprise

198
00:07:07,520 --> 00:07:09,360
application source code

199
00:07:09,360 --> 00:07:11,360
often on.net environments using some

200
00:07:11,360 --> 00:07:12,639
sort of local file disclosure

201
00:07:12,639 --> 00:07:14,639
vulnerability to download all the dll

202
00:07:14,639 --> 00:07:17,840
files in the bin folder

203
00:07:18,240 --> 00:07:20,400
so one of the things that

204
00:07:20,400 --> 00:07:22,639
i just want to preface this the rest of

205
00:07:22,639 --> 00:07:25,120
the presentation with is i just want to

206
00:07:25,120 --> 00:07:27,440
have a little bit of a reality check for

207
00:07:27,440 --> 00:07:29,599
what people think security research is

208
00:07:29,599 --> 00:07:31,919
like and what it actually is like so

209
00:07:31,919 --> 00:07:33,440
what people think security research is

210
00:07:33,440 --> 00:07:35,120
like is something like this

211
00:07:35,120 --> 00:07:36,560
they think it's magical you're gonna

212
00:07:36,560 --> 00:07:38,000
find amazing vulnerabilities all the

213
00:07:38,000 --> 00:07:40,319
time you're gonna be the zero day master

214
00:07:40,319 --> 00:07:42,080
it's gonna be a lot of fun there's no

215
00:07:42,080 --> 00:07:43,440
hard moments

216
00:07:43,440 --> 00:07:46,080
but in reality what security research is

217
00:07:46,080 --> 00:07:47,280
actually like

218
00:07:47,280 --> 00:07:50,319
is you first have hope you find no bugs

219
00:07:50,319 --> 00:07:52,800
you maybe find a bug the bug was a fake

220
00:07:52,800 --> 00:07:54,800
the understanding leads to a real bug

221
00:07:54,800 --> 00:07:56,479
and the bug isn't reachable on default

222
00:07:56,479 --> 00:07:59,840
config so in many scenarios this whole

223
00:07:59,840 --> 00:08:01,759
journey and adventure of finding zero

224
00:08:01,759 --> 00:08:04,080
days in enterprise applications

225
00:08:04,080 --> 00:08:06,080
you often only see the end result which

226
00:08:06,080 --> 00:08:07,759
is you know a command execution

227
00:08:07,759 --> 00:08:09,360
vulnerability or a local file disclosure

228
00:08:09,360 --> 00:08:11,360
or whatever but you don't see the

229
00:08:11,360 --> 00:08:13,759
process and the process is painful it's

230
00:08:13,759 --> 00:08:14,879
something that you need to have a lot of

231
00:08:14,879 --> 00:08:16,720
endurance for and you need to be

232
00:08:16,720 --> 00:08:17,840
committed to finding these

233
00:08:17,840 --> 00:08:19,840
vulnerabilities you cannot give up

234
00:08:19,840 --> 00:08:21,680
easily otherwise you will not find them

235
00:08:21,680 --> 00:08:24,720
in many scenarios

236
00:08:25,280 --> 00:08:27,840
so now i'm going to go through a bunch

237
00:08:27,840 --> 00:08:30,400
of enterprise products which uh

238
00:08:30,400 --> 00:08:32,159
i've found vulnerabilities in over the

239
00:08:32,159 --> 00:08:33,360
last year

240
00:08:33,360 --> 00:08:35,200
and this is going to go through some of

241
00:08:35,200 --> 00:08:37,599
the successes some of the failures what

242
00:08:37,599 --> 00:08:39,039
i learned along the way some of the

243
00:08:39,039 --> 00:08:41,760
lessons but essentially we're starting

244
00:08:41,760 --> 00:08:44,159
off with a product called ibm websphere

245
00:08:44,159 --> 00:08:46,399
portal it's now rebranded to something

246
00:08:46,399 --> 00:08:48,560
called hcl digital experience

247
00:08:48,560 --> 00:08:50,160
but you know you might be wondering what

248
00:08:50,160 --> 00:08:52,000
this software actually is

249
00:08:52,000 --> 00:08:54,080
so it's an enterprise content management

250
00:08:54,080 --> 00:08:56,160
system it's used by medium to large

251
00:08:56,160 --> 00:08:57,600
enterprises there's around four and a

252
00:08:57,600 --> 00:08:59,680
half thousand instances on the internet

253
00:08:59,680 --> 00:09:02,240
and it's often self-hosted uh which is

254
00:09:02,240 --> 00:09:03,839
great because we get to target

255
00:09:03,839 --> 00:09:05,279
infrastructure belonging to

256
00:09:05,279 --> 00:09:07,680
organizations around the world it has

257
00:09:07,680 --> 00:09:10,000
widespread use amongst the fortune 500

258
00:09:10,000 --> 00:09:12,160
and companies that run bug bounties so

259
00:09:12,160 --> 00:09:15,360
it was a great target for us

260
00:09:15,600 --> 00:09:16,399
so

261
00:09:16,399 --> 00:09:18,320
the way we got started is we just pulled

262
00:09:18,320 --> 00:09:20,000
down a docker image

263
00:09:20,000 --> 00:09:21,440
you know earlier in this presentation i

264
00:09:21,440 --> 00:09:22,480
was talking about all the different

265
00:09:22,480 --> 00:09:24,160
techniques to get access to the source

266
00:09:24,160 --> 00:09:26,480
code fortunately for websphere portal

267
00:09:26,480 --> 00:09:28,720
there was the ability to just pull the

268
00:09:28,720 --> 00:09:30,720
software from docker hub and we were

269
00:09:30,720 --> 00:09:32,320
able to start up a websphere portal

270
00:09:32,320 --> 00:09:35,600
server so quite simple

271
00:09:35,600 --> 00:09:37,519
once we started the docker server by the

272
00:09:37,519 --> 00:09:40,000
docket container we found all the jar

273
00:09:40,000 --> 00:09:42,800
files put them in a tar file and then

274
00:09:42,800 --> 00:09:44,880
extracted it and then decompiled all of

275
00:09:44,880 --> 00:09:46,320
it so these were the commands that i

276
00:09:46,320 --> 00:09:48,959
used i used the pros ion decompiler to

277
00:09:48,959 --> 00:09:52,479
get all of the java source code

278
00:09:53,040 --> 00:09:55,360
the next step uh usually that i take

279
00:09:55,360 --> 00:09:56,959
when i look at any enterprise web

280
00:09:56,959 --> 00:09:58,959
application is understanding the attack

281
00:09:58,959 --> 00:10:00,160
surface

282
00:10:00,160 --> 00:10:02,320
this is one of the most important steps

283
00:10:02,320 --> 00:10:04,240
because this will then lead to the rest

284
00:10:04,240 --> 00:10:06,399
of your discoveries and if you do a poor

285
00:10:06,399 --> 00:10:08,720
job at this step then you might miss a

286
00:10:08,720 --> 00:10:10,800
lot of really important vulnerabilities

287
00:10:10,800 --> 00:10:13,120
so in this scenario it was quite simple

288
00:10:13,120 --> 00:10:15,200
we just used a grep command to look for

289
00:10:15,200 --> 00:10:17,040
anything that had servlet mapping or

290
00:10:17,040 --> 00:10:19,519
mapping now again like this does require

291
00:10:19,519 --> 00:10:21,600
some in intimate knowledge about how

292
00:10:21,600 --> 00:10:24,160
this application works but over time you

293
00:10:24,160 --> 00:10:26,000
do become familiar with how different

294
00:10:26,000 --> 00:10:27,519
applications are deployed whether it's

295
00:10:27,519 --> 00:10:30,000
on tomcat whether it's on some php web

296
00:10:30,000 --> 00:10:32,079
server or some python application they

297
00:10:32,079 --> 00:10:33,360
all have different patterns for

298
00:10:33,360 --> 00:10:35,760
deployment in this scenario this was on

299
00:10:35,760 --> 00:10:37,200
a websphere server but it was very

300
00:10:37,200 --> 00:10:39,040
similar to tomcat where you could look

301
00:10:39,040 --> 00:10:40,640
at all the server mappings and mappings

302
00:10:40,640 --> 00:10:43,200
which are typically inside xml files and

303
00:10:43,200 --> 00:10:45,519
then understand the attack surface

304
00:10:45,519 --> 00:10:47,519
so we see here there's a lot of matches

305
00:10:47,519 --> 00:10:49,360
and there's a lot of attack surface to

306
00:10:49,360 --> 00:10:51,279
go through

307
00:10:51,279 --> 00:10:53,360
but in our process of doing this we

308
00:10:53,360 --> 00:10:55,680
ended up finding this file called

309
00:10:55,680 --> 00:10:58,320
proxy-config.xml

310
00:10:58,320 --> 00:11:00,720
and you can see here that it actually

311
00:11:00,720 --> 00:11:03,839
has multiple paths that let you proxy to

312
00:11:03,839 --> 00:11:06,640
these three urls you can either proxy to

313
00:11:06,640 --> 00:11:09,480
www.ibm.com

314
00:11:09,480 --> 00:11:12,959
www.03 or redbooks.ibm.com

315
00:11:12,959 --> 00:11:16,160
now this was quite surprising because uh

316
00:11:16,160 --> 00:11:17,680
if you're not familiar with uh the

317
00:11:17,680 --> 00:11:19,200
vulnerability class of server side

318
00:11:19,200 --> 00:11:21,680
request forgery um that's something that

319
00:11:21,680 --> 00:11:24,079
can be quite critical uh on on these on

320
00:11:24,079 --> 00:11:26,560
these networks and this vulnerability

321
00:11:26,560 --> 00:11:28,880
this potential vulnerability leads to

322
00:11:28,880 --> 00:11:30,880
this potential code leads to server-side

323
00:11:30,880 --> 00:11:32,800
request forgery

324
00:11:32,800 --> 00:11:35,040
it's interesting that they've allowed

325
00:11:35,040 --> 00:11:38,880
you to access these three websites and

326
00:11:38,880 --> 00:11:40,800
it's something that really caught our

327
00:11:40,800 --> 00:11:42,240
attention and we wanted to see whether

328
00:11:42,240 --> 00:11:44,240
or not we could leverage these three

329
00:11:44,240 --> 00:11:47,040
white listed websites to actually access

330
00:11:47,040 --> 00:11:48,880
any website we wanted through this

331
00:11:48,880 --> 00:11:50,959
server-side request forgery

332
00:11:50,959 --> 00:11:52,720
for those that don't know what server

333
00:11:52,720 --> 00:11:54,720
side request forgery is it is

334
00:11:54,720 --> 00:11:56,639
essentially when you can coerce a web

335
00:11:56,639 --> 00:11:59,200
server to make a request on its behalf

336
00:11:59,200 --> 00:12:01,839
and then you can read the contents of

337
00:12:01,839 --> 00:12:03,839
any web request that you make on behalf

338
00:12:03,839 --> 00:12:05,040
of the server

339
00:12:05,040 --> 00:12:07,120
so if this server is on a sensitive

340
00:12:07,120 --> 00:12:09,040
internal network through server side

341
00:12:09,040 --> 00:12:11,200
request forgery you can actually access

342
00:12:11,200 --> 00:12:13,200
all the internal ips and hosts and

343
00:12:13,200 --> 00:12:14,639
different things on that sensitive

344
00:12:14,639 --> 00:12:16,000
internal network

345
00:12:16,000 --> 00:12:17,360
that's why something like this is

346
00:12:17,360 --> 00:12:19,040
potentially

347
00:12:19,040 --> 00:12:21,279
critical

348
00:12:21,279 --> 00:12:22,240
so

349
00:12:22,240 --> 00:12:24,160
one of the things with enterprise web

350
00:12:24,160 --> 00:12:26,720
applications and and auditing them is

351
00:12:26,720 --> 00:12:28,880
yes we can see the mappings and the code

352
00:12:28,880 --> 00:12:31,120
but sometimes it's quite tricky to

353
00:12:31,120 --> 00:12:33,839
understand where the end points are on

354
00:12:33,839 --> 00:12:35,120
the application

355
00:12:35,120 --> 00:12:37,200
in this scenario it wasn't too bad

356
00:12:37,200 --> 00:12:39,120
everything was under the path of slash

357
00:12:39,120 --> 00:12:41,839
wps so we can see in the previous slide

358
00:12:41,839 --> 00:12:44,160
we had proxy my proxy common proxy but

359
00:12:44,160 --> 00:12:48,720
that's all now just mapped at slash wps

360
00:12:48,720 --> 00:12:50,560
but you know the config file just said

361
00:12:50,560 --> 00:12:52,720
that we could access ibm.com and

362
00:12:52,720 --> 00:12:54,320
redbooks.ibm.com

363
00:12:54,320 --> 00:12:55,920
how are we going to turn this into a

364
00:12:55,920 --> 00:12:57,760
full read ssrf how are we going to be

365
00:12:57,760 --> 00:13:01,920
able to access any host that we want to

366
00:13:02,160 --> 00:13:05,519
well what we did was we chained a lotus

367
00:13:05,519 --> 00:13:09,160
domino open redirect this website

368
00:13:09,160 --> 00:13:11,600
redbooks.ibm.com runs lotus domino to

369
00:13:11,600 --> 00:13:13,440
deliver content to users

370
00:13:13,440 --> 00:13:15,279
so if we were able to achieve a url

371
00:13:15,279 --> 00:13:16,880
redirect on this website then we would

372
00:13:16,880 --> 00:13:19,600
be able to achieve ssrf on any arbitrary

373
00:13:19,600 --> 00:13:20,480
host

374
00:13:20,480 --> 00:13:23,120
and after researching lotus domino i

375
00:13:23,120 --> 00:13:25,440
noticed some really old documentation

376
00:13:25,440 --> 00:13:27,680
around the sign out process

377
00:13:27,680 --> 00:13:29,440
basically it let you be redirected

378
00:13:29,440 --> 00:13:31,279
anywhere you wanted to

379
00:13:31,279 --> 00:13:33,600
so this was the documentation and in the

380
00:13:33,600 --> 00:13:36,639
documentation it said if you append

381
00:13:36,639 --> 00:13:39,279
and redirect to you can redirect to any

382
00:13:39,279 --> 00:13:40,800
location

383
00:13:40,800 --> 00:13:42,639
so this was exactly what we were looking

384
00:13:42,639 --> 00:13:43,600
for

385
00:13:43,600 --> 00:13:47,120
and what we were able to do is uh if you

386
00:13:47,120 --> 00:13:48,959
went to this url

387
00:13:48,959 --> 00:13:52,079
and you slapped on the end question mark

388
00:13:52,079 --> 00:13:54,079
log out and redirect to

389
00:13:54,079 --> 00:13:56,079
the server would respond with a 302

390
00:13:56,079 --> 00:13:57,839
found with a location header of

391
00:13:57,839 --> 00:14:00,240
example.com which we want to redirect to

392
00:14:00,240 --> 00:14:02,480
this is perfect for our use case

393
00:14:02,480 --> 00:14:04,240
because what we can do is we can combine

394
00:14:04,240 --> 00:14:06,000
all these elements together and achieve

395
00:14:06,000 --> 00:14:08,639
a full read ssrf

396
00:14:08,639 --> 00:14:10,399
so this is what the final payload looked

397
00:14:10,399 --> 00:14:11,680
like

398
00:14:11,680 --> 00:14:14,800
wps proxy and then redbooks.ibm.com and

399
00:14:14,800 --> 00:14:16,639
then you've got the redirect and you can

400
00:14:16,639 --> 00:14:19,040
see that the web server is rendering

401
00:14:19,040 --> 00:14:20,639
example.com

402
00:14:20,639 --> 00:14:22,720
uh and that request is happening on the

403
00:14:22,720 --> 00:14:24,959
on behalf of the web server

404
00:14:24,959 --> 00:14:27,839
so this is you know a full read ssrf in

405
00:14:27,839 --> 00:14:30,000
ibm websphere and this is

406
00:14:30,000 --> 00:14:32,959
pre-authentication

407
00:14:33,519 --> 00:14:35,199
one of the things that you often do when

408
00:14:35,199 --> 00:14:37,680
auditing enterprise software is you go

409
00:14:37,680 --> 00:14:40,000
variant hunting and what i mean by that

410
00:14:40,000 --> 00:14:41,279
is once you've discovered one

411
00:14:41,279 --> 00:14:43,440
vulnerability and one pattern you try

412
00:14:43,440 --> 00:14:45,199
and find that vulnerability and pattern

413
00:14:45,199 --> 00:14:47,120
across the entire code base and see

414
00:14:47,120 --> 00:14:49,199
where else it's occurring because likely

415
00:14:49,199 --> 00:14:50,720
if the developers have made a mistake in

416
00:14:50,720 --> 00:14:52,959
one location it might be repeated in

417
00:14:52,959 --> 00:14:55,120
multiple other locations so when it

418
00:14:55,120 --> 00:14:56,480
comes to variant hunting for this

419
00:14:56,480 --> 00:14:58,160
vulnerability we looked for all the

420
00:14:58,160 --> 00:14:59,839
files that were called proxy dash

421
00:14:59,839 --> 00:15:01,360
config.xml

422
00:15:01,360 --> 00:15:03,920
we found a number of them and actually

423
00:15:03,920 --> 00:15:05,519
these two in particular that are

424
00:15:05,519 --> 00:15:07,680
highlighted in yellow were extremely

425
00:15:07,680 --> 00:15:10,320
problematic

426
00:15:10,320 --> 00:15:13,199
so the first one was essentially a proxy

427
00:15:13,199 --> 00:15:15,760
to any url with the ability to use any

428
00:15:15,760 --> 00:15:18,000
of these methods so get head post put

429
00:15:18,000 --> 00:15:19,839
delete which is kind of like a super

430
00:15:19,839 --> 00:15:21,199
proxy

431
00:15:21,199 --> 00:15:23,360
and quite dangerous

432
00:15:23,360 --> 00:15:25,920
and it also let you use all of these

433
00:15:25,920 --> 00:15:27,600
headers as well so it would proxy all

434
00:15:27,600 --> 00:15:29,199
these headers as well with the full

435
00:15:29,199 --> 00:15:31,759
response returned so just by doing this

436
00:15:31,759 --> 00:15:34,480
exercise of variant hunting we're able

437
00:15:34,480 --> 00:15:36,639
to discover an even more critical

438
00:15:36,639 --> 00:15:38,720
vulnerability that had the same pattern

439
00:15:38,720 --> 00:15:40,639
as the first vulnerability we discovered

440
00:15:40,639 --> 00:15:43,440
in this code base

441
00:15:43,440 --> 00:15:45,360
so this is what it looked like basically

442
00:15:45,360 --> 00:15:47,600
full read ssrf as well

443
00:15:47,600 --> 00:15:49,360
i know that it it doesn't look that

444
00:15:49,360 --> 00:15:51,839
exciting with example.com being loaded

445
00:15:51,839 --> 00:15:54,160
here but just imagine if it was your

446
00:15:54,160 --> 00:15:56,079
internal confluence wiki or something

447
00:15:56,079 --> 00:15:58,479
like that

448
00:15:59,440 --> 00:16:01,839
so with variant hunting there was a lot

449
00:16:01,839 --> 00:16:03,920
there was actually a lot more variants

450
00:16:03,920 --> 00:16:05,680
some that were quite complicated that

451
00:16:05,680 --> 00:16:07,279
you wouldn't be able to protect by just

452
00:16:07,279 --> 00:16:09,440
putting a waff in place

453
00:16:09,440 --> 00:16:10,880
so you can see the one with content

454
00:16:10,880 --> 00:16:12,959
handler with the digest

455
00:16:12,959 --> 00:16:15,199
it was quite complicated to protect

456
00:16:15,199 --> 00:16:16,880
against this vulnerability by just using

457
00:16:16,880 --> 00:16:18,880
some sort of waff rule

458
00:16:18,880 --> 00:16:20,160
in this one you had to use the open

459
00:16:20,160 --> 00:16:23,040
redirect as well and this is what it

460
00:16:23,040 --> 00:16:24,240
looked like

461
00:16:24,240 --> 00:16:26,480
and we also had more variants in the

462
00:16:26,480 --> 00:16:29,839
ajax proxy and the proxy servlet

463
00:16:29,839 --> 00:16:31,519
just quickly running through these it's

464
00:16:31,519 --> 00:16:33,440
the same sort of impact

465
00:16:33,440 --> 00:16:35,279
and you're able to achieve server-side

466
00:16:35,279 --> 00:16:37,279
request forgery pre-authentication

467
00:16:37,279 --> 00:16:40,639
through these endpoints as well

468
00:16:43,440 --> 00:16:45,920
um now we've found server-side request

469
00:16:45,920 --> 00:16:47,440
forgery but

470
00:16:47,440 --> 00:16:49,199
you know we as good hackers we don't

471
00:16:49,199 --> 00:16:51,600
want to stop there we we we think to

472
00:16:51,600 --> 00:16:53,360
ourselves how can we escalate this how

473
00:16:53,360 --> 00:16:55,839
can we make this more critical it's

474
00:16:55,839 --> 00:16:57,199
great to have server-side requests

475
00:16:57,199 --> 00:16:59,600
forgery but remote command execution is

476
00:16:59,600 --> 00:17:02,720
even better and uh initially we thought

477
00:17:02,720 --> 00:17:04,400
with this server-side request forgery we

478
00:17:04,400 --> 00:17:05,520
could

479
00:17:05,520 --> 00:17:08,400
somehow access an internal port and

480
00:17:08,400 --> 00:17:10,720
exploit other functionality inside these

481
00:17:10,720 --> 00:17:11,760
internal

482
00:17:11,760 --> 00:17:14,240
services running on this web server

483
00:17:14,240 --> 00:17:17,439
so we found something called ibm kc

484
00:17:17,439 --> 00:17:19,919
which is ibm knowledge center and that

485
00:17:19,919 --> 00:17:22,720
was accessible on port 9043 and the

486
00:17:22,720 --> 00:17:25,679
web.xml file had this little snippet

487
00:17:25,679 --> 00:17:29,120
which uh basically was slash api web

488
00:17:29,120 --> 00:17:30,799
feed

489
00:17:30,799 --> 00:17:33,200
now just to be frank this is a

490
00:17:33,200 --> 00:17:35,200
vulnerability uh that i'm going through

491
00:17:35,200 --> 00:17:36,799
the one that i'm going through now

492
00:17:36,799 --> 00:17:38,960
we were ultimately not successful with

493
00:17:38,960 --> 00:17:40,880
it but i'm sharing this information just

494
00:17:40,880 --> 00:17:41,760
because

495
00:17:41,760 --> 00:17:43,440
to walk you through the process that we

496
00:17:43,440 --> 00:17:45,280
went through and the effort we had to go

497
00:17:45,280 --> 00:17:46,799
through before realizing it wasn't

498
00:17:46,799 --> 00:17:48,640
possible and i think that's a valuable

499
00:17:48,640 --> 00:17:51,760
part of the learning process

500
00:17:51,760 --> 00:17:54,480
so we download the kc.war file

501
00:17:54,480 --> 00:17:57,120
from our docker image and we find that

502
00:17:57,120 --> 00:17:59,520
it's got this path which is slash web

503
00:17:59,520 --> 00:18:02,880
feed and it seems to take in a url and

504
00:18:02,880 --> 00:18:05,760
do something with it it seems to pass it

505
00:18:05,760 --> 00:18:08,480
in some way or form as it's an rss web

506
00:18:08,480 --> 00:18:10,640
feed url

507
00:18:10,640 --> 00:18:12,400
if we take a look at the passing logic

508
00:18:12,400 --> 00:18:14,000
we can see in the passing logic it's got

509
00:18:14,000 --> 00:18:16,400
the xml stream reader with create reader

510
00:18:16,400 --> 00:18:18,880
in and it seemed like this xml stream

511
00:18:18,880 --> 00:18:20,880
reader had no protections against

512
00:18:20,880 --> 00:18:23,600
external entity injection so this was a

513
00:18:23,600 --> 00:18:25,840
very viable technique for us if we were

514
00:18:25,840 --> 00:18:27,840
able to leverage our ssrf into something

515
00:18:27,840 --> 00:18:29,760
more serious

516
00:18:29,760 --> 00:18:32,559
and unfortunately we try it on a bug

517
00:18:32,559 --> 00:18:35,440
bounty target and it fails it returns

518
00:18:35,440 --> 00:18:36,559
forbidden

519
00:18:36,559 --> 00:18:38,320
and at this point we're not sure what

520
00:18:38,320 --> 00:18:40,320
we've done wrong we think that we've got

521
00:18:40,320 --> 00:18:42,480
the correct endpoint we're proxying to

522
00:18:42,480 --> 00:18:44,480
the correct port and we are trying to

523
00:18:44,480 --> 00:18:47,600
provide it a url but it's not working

524
00:18:47,600 --> 00:18:49,919
so we start digging a little bit further

525
00:18:49,919 --> 00:18:52,320
and we realize that we had an older

526
00:18:52,320 --> 00:18:54,320
version of websphere portal

527
00:18:54,320 --> 00:18:55,679
because that's all we could get at the

528
00:18:55,679 --> 00:18:56,640
time

529
00:18:56,640 --> 00:18:58,720
and uh we realized that with a newer

530
00:18:58,720 --> 00:19:00,960
version of websphere portal uh that

531
00:19:00,960 --> 00:19:03,280
request was forbidden

532
00:19:03,280 --> 00:19:05,840
so obviously we we grab the the war file

533
00:19:05,840 --> 00:19:08,720
we take a look at the source code and

534
00:19:08,720 --> 00:19:10,559
it's been deprecated

535
00:19:10,559 --> 00:19:13,280
which really sucked because uh we spent

536
00:19:13,280 --> 00:19:15,600
a lot of time going through websphere

537
00:19:15,600 --> 00:19:17,360
source code before we found that this

538
00:19:17,360 --> 00:19:19,039
was deprecated and not working on the

539
00:19:19,039 --> 00:19:21,600
latest versions

540
00:19:21,600 --> 00:19:24,960
we also had some more attempts at xxe

541
00:19:24,960 --> 00:19:26,720
and unfortunately we weren't successful

542
00:19:26,720 --> 00:19:28,160
with these either

543
00:19:28,160 --> 00:19:31,440
we tried uh encoding some xml entity

544
00:19:31,440 --> 00:19:33,440
injection payloads and

545
00:19:33,440 --> 00:19:35,360
chucking them into the resource proxy

546
00:19:35,360 --> 00:19:38,640
which took base64 xml

547
00:19:38,640 --> 00:19:40,720
and unfortunately it responded with

548
00:19:40,720 --> 00:19:42,799
something along the lines of

549
00:19:42,799 --> 00:19:44,160
you know the entity could not be

550
00:19:44,160 --> 00:19:45,440
resolved

551
00:19:45,440 --> 00:19:47,520
we dig further into the code and we

552
00:19:47,520 --> 00:19:49,360
realized that the

553
00:19:49,360 --> 00:19:52,480
entity handlers have been nulled out so

554
00:19:52,480 --> 00:19:54,799
it's not possible to actually resolve

555
00:19:54,799 --> 00:19:57,520
any entities as a part of this endpoint

556
00:19:57,520 --> 00:19:59,280
but again this is another failure in the

557
00:19:59,280 --> 00:20:00,880
process of finding vulnerabilities in

558
00:20:00,880 --> 00:20:02,880
websphere i think it's quite valuable to

559
00:20:02,880 --> 00:20:05,360
talk about

560
00:20:05,360 --> 00:20:06,880
there was another vulnerability in

561
00:20:06,880 --> 00:20:08,880
websphere portal which

562
00:20:08,880 --> 00:20:10,240
allowed you to

563
00:20:10,240 --> 00:20:12,320
get post auth command execution via

564
00:20:12,320 --> 00:20:13,840
directory traversal

565
00:20:13,840 --> 00:20:15,600
so once you were authenticated you were

566
00:20:15,600 --> 00:20:17,280
able to upload a zip file that contained

567
00:20:17,280 --> 00:20:20,320
html css or javascript the extraction of

568
00:20:20,320 --> 00:20:22,480
the zip file was vulnerable to directory

569
00:20:22,480 --> 00:20:24,960
traversal so once you went to a specific

570
00:20:24,960 --> 00:20:27,520
location inside websphere portal you had

571
00:20:27,520 --> 00:20:30,400
the option to import a zip file that was

572
00:20:30,400 --> 00:20:32,799
vulnerable to directory traversal but

573
00:20:32,799 --> 00:20:35,600
you could only upload html files or js

574
00:20:35,600 --> 00:20:37,760
or css files and you might be thinking

575
00:20:37,760 --> 00:20:39,120
to yourself how can i make that

576
00:20:39,120 --> 00:20:40,720
impactful that doesn't sound that

577
00:20:40,720 --> 00:20:43,120
important well actually

578
00:20:43,120 --> 00:20:45,600
if you're able to upload

579
00:20:45,600 --> 00:20:47,280
files to the local system at any

580
00:20:47,280 --> 00:20:48,400
location

581
00:20:48,400 --> 00:20:50,640
if you upload a file to the etc

582
00:20:50,640 --> 00:20:53,280
sysconfig network scripts location

583
00:20:53,280 --> 00:20:55,280
regardless of the extension that that

584
00:20:55,280 --> 00:20:58,400
file has on reboot it will execute the

585
00:20:58,400 --> 00:21:00,480
command that you have in the file

586
00:21:00,480 --> 00:21:03,039
this is a quite an interesting technique

587
00:21:03,039 --> 00:21:05,280
it only works on some distributions

588
00:21:05,280 --> 00:21:07,120
however this is something that you could

589
00:21:07,120 --> 00:21:10,880
use to get post post or rce on websphere

590
00:21:10,880 --> 00:21:13,120
there's a tool called evil arc which

591
00:21:13,120 --> 00:21:15,760
lets you craft zip files which have

592
00:21:15,760 --> 00:21:18,080
directory traversal and you could very

593
00:21:18,080 --> 00:21:20,480
easily use this tool to craft the the

594
00:21:20,480 --> 00:21:22,480
the malicious file you can see the

595
00:21:22,480 --> 00:21:24,480
command in this slide here of how i did

596
00:21:24,480 --> 00:21:26,640
that

597
00:21:26,960 --> 00:21:28,400
you might be wondering why does this

598
00:21:28,400 --> 00:21:30,880
work well there is this amazing full

599
00:21:30,880 --> 00:21:33,520
disclosure

600
00:21:33,679 --> 00:21:35,440
mailing list which has this message

601
00:21:35,440 --> 00:21:37,600
about this guy who came across this for

602
00:21:37,600 --> 00:21:39,600
whatever reason if you're able to write

603
00:21:39,600 --> 00:21:42,960
a file which starts with ifcf into that

604
00:21:42,960 --> 00:21:44,480
specific folder

605
00:21:44,480 --> 00:21:46,960
then you can execute whatever command is

606
00:21:46,960 --> 00:21:51,200
inside the name attribute on restart

607
00:21:52,400 --> 00:21:54,080
there's some references here but i'll be

608
00:21:54,080 --> 00:21:55,679
sharing my slides after this talk so

609
00:21:55,679 --> 00:21:57,039
don't worry about getting any of these

610
00:21:57,039 --> 00:21:59,200
down

611
00:21:59,200 --> 00:22:01,600
there is an exploit write-up as well

612
00:22:01,600 --> 00:22:02,559
for this

613
00:22:02,559 --> 00:22:04,480
that goes into a lot more detail about

614
00:22:04,480 --> 00:22:06,000
how we found these vulnerabilities what

615
00:22:06,000 --> 00:22:07,919
they are and if you're interested in

616
00:22:07,919 --> 00:22:12,039
understanding them a bit deeper

617
00:22:12,960 --> 00:22:14,720
the next enterprise technology that i

618
00:22:14,720 --> 00:22:16,559
want to go through is solarwinds web

619
00:22:16,559 --> 00:22:19,440
help desk uh solarwinds web help desk is

620
00:22:19,440 --> 00:22:20,480
a

621
00:22:20,480 --> 00:22:22,559
central ticket magic management system

622
00:22:22,559 --> 00:22:24,159
for your enterprise it connects with

623
00:22:24,159 --> 00:22:26,400
solarwinds oreon it's used by medium to

624
00:22:26,400 --> 00:22:28,480
large enterprises schools and government

625
00:22:28,480 --> 00:22:31,120
there's around 2000 instances exposed to

626
00:22:31,120 --> 00:22:34,080
the external internet

627
00:22:34,400 --> 00:22:35,919
one of the lessons that i learned along

628
00:22:35,919 --> 00:22:38,240
the way was you know removing the stigma

629
00:22:38,240 --> 00:22:40,480
from huge code bases

630
00:22:40,480 --> 00:22:42,400
it's used by large enterprises but their

631
00:22:42,400 --> 00:22:45,200
code base is just huge there's spring

632
00:22:45,200 --> 00:22:47,520
web objects traditional servlets it's

633
00:22:47,520 --> 00:22:50,559
extremely complex and it can be really

634
00:22:50,559 --> 00:22:53,280
daunting looking at this software

635
00:22:53,280 --> 00:22:54,480
just as someone who's never had

636
00:22:54,480 --> 00:22:56,480
experience with these technologies or

637
00:22:56,480 --> 00:22:58,320
someone that you know may not understand

638
00:22:58,320 --> 00:23:00,000
how everything works

639
00:23:00,000 --> 00:23:02,159
but with some intelligent analysis of

640
00:23:02,159 --> 00:23:04,240
the sources and syncs it starts to get

641
00:23:04,240 --> 00:23:05,600
easier

642
00:23:05,600 --> 00:23:07,360
my number one advice when it comes to

643
00:23:07,360 --> 00:23:09,360
auditing complex software is try and map

644
00:23:09,360 --> 00:23:11,039
out as much of the attack surface as

645
00:23:11,039 --> 00:23:13,120
possible in the form of sources and

646
00:23:13,120 --> 00:23:15,120
sinks and then do your auditing after

647
00:23:15,120 --> 00:23:18,000
you understand this

648
00:23:19,039 --> 00:23:20,960
the first thing we came across in

649
00:23:20,960 --> 00:23:22,799
sullivan's web help desk was this

650
00:23:22,799 --> 00:23:24,960
hard-coded credential for something

651
00:23:24,960 --> 00:23:27,919
called the help desk integration user

652
00:23:27,919 --> 00:23:29,679
this was interesting so we searched this

653
00:23:29,679 --> 00:23:31,919
credential in the code base in order to

654
00:23:31,919 --> 00:23:33,760
find the production hard-coded

655
00:23:33,760 --> 00:23:35,120
credentials

656
00:23:35,120 --> 00:23:37,039
which was even more interesting

657
00:23:37,039 --> 00:23:39,120
initially our questions were what do

658
00:23:39,120 --> 00:23:41,279
these credentials let us do why are

659
00:23:41,279 --> 00:23:43,919
these credentials hard coded that does

660
00:23:43,919 --> 00:23:46,640
not look good

661
00:23:47,120 --> 00:23:49,200
so these credentials let us access a big

662
00:23:49,200 --> 00:23:51,039
part of the spring web app embedded in

663
00:23:51,039 --> 00:23:53,120
this software the most interesting

664
00:23:53,120 --> 00:23:55,279
controller was found in the asset report

665
00:23:55,279 --> 00:23:58,400
controller and surprisingly solarwinds

666
00:23:58,400 --> 00:24:00,880
were exposing endpoints that let you run

667
00:24:00,880 --> 00:24:03,120
arbitrary hibernate queries

668
00:24:03,120 --> 00:24:06,000
and view any of the sql output that came

669
00:24:06,000 --> 00:24:07,840
back from the database

670
00:24:07,840 --> 00:24:09,760
hibernate talks directly to the database

671
00:24:09,760 --> 00:24:11,520
based off the models explicitly defined

672
00:24:11,520 --> 00:24:13,279
in java

673
00:24:13,279 --> 00:24:15,200
so this was the code the code was

674
00:24:15,200 --> 00:24:17,840
essentially an endpoint called slash raw

675
00:24:17,840 --> 00:24:19,360
hql

676
00:24:19,360 --> 00:24:21,679
and this let you provide a hibernate

677
00:24:21,679 --> 00:24:23,200
query and

678
00:24:23,200 --> 00:24:24,880
give you the result of the hibernate

679
00:24:24,880 --> 00:24:26,960
query we needed those hard-coded

680
00:24:26,960 --> 00:24:29,120
credentials to reach this endpoint so

681
00:24:29,120 --> 00:24:32,159
that was an important discovery

682
00:24:32,159 --> 00:24:34,159
if we take a look at the get string hqr

683
00:24:34,159 --> 00:24:35,760
result you can see that it's literally

684
00:24:35,760 --> 00:24:38,880
just taking the hql query and creating a

685
00:24:38,880 --> 00:24:40,960
query and returning the result so very

686
00:24:40,960 --> 00:24:42,640
simple

687
00:24:42,640 --> 00:24:44,480
so you needed a few things in order to

688
00:24:44,480 --> 00:24:47,200
exploit this you needed a csrf token you

689
00:24:47,200 --> 00:24:48,720
needed the hard-coded credentials in

690
00:24:48,720 --> 00:24:50,480
basic auth format

691
00:24:50,480 --> 00:24:53,039
and again the csrf token in the cookie

692
00:24:53,039 --> 00:24:55,360
the content type must be text plain and

693
00:24:55,360 --> 00:24:56,960
then your hibernate query inside the

694
00:24:56,960 --> 00:24:58,960
post request so if you had all of these

695
00:24:58,960 --> 00:25:00,400
elements which you can obtain

696
00:25:00,400 --> 00:25:02,559
pre-authentication you were able to run

697
00:25:02,559 --> 00:25:04,960
basically any sql query on solarwinds

698
00:25:04,960 --> 00:25:06,880
web help desk and receive the full

699
00:25:06,880 --> 00:25:08,400
response

700
00:25:08,400 --> 00:25:10,960
so that that returned the the email and

701
00:25:10,960 --> 00:25:14,480
the password in a hashed format which is

702
00:25:14,480 --> 00:25:16,080
pretty crazy that you can do this

703
00:25:16,080 --> 00:25:19,360
without any authentication

704
00:25:20,640 --> 00:25:22,320
what's not shown in this presentation is

705
00:25:22,320 --> 00:25:24,000
the hours that were spent mapping the

706
00:25:24,000 --> 00:25:26,240
sources and sinks and understanding the

707
00:25:26,240 --> 00:25:27,679
authentication flow in some of these

708
00:25:27,679 --> 00:25:30,159
spring routes numerous failed attempts

709
00:25:30,159 --> 00:25:31,600
at exploiting certain vulnerability

710
00:25:31,600 --> 00:25:34,480
classes the vast amount of code in this

711
00:25:34,480 --> 00:25:36,559
code base causing auditing fatigue and

712
00:25:36,559 --> 00:25:38,240
obviously shouting f yeah once you've

713
00:25:38,240 --> 00:25:39,919
discovered a pretty auth critical bug

714
00:25:39,919 --> 00:25:43,679
which is the best part of the journey

715
00:25:43,679 --> 00:25:45,600
the impact is you can run arbitrary sql

716
00:25:45,600 --> 00:25:47,279
queries uh

717
00:25:47,279 --> 00:25:49,200
against solarwinds web help help desk's

718
00:25:49,200 --> 00:25:51,520
internal database this allows attackers

719
00:25:51,520 --> 00:25:53,200
to obtain the username and password hash

720
00:25:53,200 --> 00:25:55,200
from the database

721
00:25:55,200 --> 00:25:57,039
it's limited to hibernate queries but

722
00:25:57,039 --> 00:25:58,400
still quite critical because you could

723
00:25:58,400 --> 00:26:01,440
still like insert users or modify data

724
00:26:01,440 --> 00:26:05,200
within solarwinds web help desk

725
00:26:05,440 --> 00:26:07,840
you can find the exploit right up here

726
00:26:07,840 --> 00:26:09,840
again i will be sharing slides so you'll

727
00:26:09,840 --> 00:26:11,039
be able to click through this in the

728
00:26:11,039 --> 00:26:13,440
future

729
00:26:14,559 --> 00:26:16,960
the next product i want to go through is

730
00:26:16,960 --> 00:26:21,200
hacking sitecore's experience platform

731
00:26:21,200 --> 00:26:24,080
so sitecore is a very comprehensive cms

732
00:26:24,080 --> 00:26:25,919
that's used by large enterprises

733
00:26:25,919 --> 00:26:28,720
governments banks fortune 500 companies

734
00:26:28,720 --> 00:26:29,840
you can build a lot of digital

735
00:26:29,840 --> 00:26:31,279
experiences through this there's around

736
00:26:31,279 --> 00:26:33,120
10 000 instances of this software

737
00:26:33,120 --> 00:26:34,960
running on the internet and a handful of

738
00:26:34,960 --> 00:26:36,880
bug monthly programs were discovered

739
00:26:36,880 --> 00:26:38,400
were vulnerable when

740
00:26:38,400 --> 00:26:41,360
using this software

741
00:26:41,360 --> 00:26:43,360
one of the notes as well with source

742
00:26:43,360 --> 00:26:45,039
code auditing is

743
00:26:45,039 --> 00:26:46,640
many times when you're doing source code

744
00:26:46,640 --> 00:26:48,960
auditing you want to give up because of

745
00:26:48,960 --> 00:26:51,120
how daunting it is or because you know

746
00:26:51,120 --> 00:26:53,039
how hard it can seem when you're going

747
00:26:53,039 --> 00:26:54,880
through it and throughout my journey of

748
00:26:54,880 --> 00:26:56,880
auditing sitecore i wanted to give up

749
00:26:56,880 --> 00:26:58,960
like five times it was so tempting to

750
00:26:58,960 --> 00:27:00,960
like just walk away and not spend any

751
00:27:00,960 --> 00:27:02,960
more time auditing this software you've

752
00:27:02,960 --> 00:27:04,960
got to be really motivated but there's

753
00:27:04,960 --> 00:27:06,559
also some really good advice here of

754
00:27:06,559 --> 00:27:08,960
just taking a lot of breaks if you get

755
00:27:08,960 --> 00:27:11,279
fatigue while looking at source code my

756
00:27:11,279 --> 00:27:12,799
advice is just step away from the

757
00:27:12,799 --> 00:27:14,240
computer and come back when you feel

758
00:27:14,240 --> 00:27:16,240
better and if you do this consistently

759
00:27:16,240 --> 00:27:17,760
and you're persistent you will be able

760
00:27:17,760 --> 00:27:19,360
to find zero days

761
00:27:19,360 --> 00:27:23,439
in a reliable consistent manner as well

762
00:27:24,000 --> 00:27:25,760
so i obtained the source code of

763
00:27:25,760 --> 00:27:28,240
sitecore from a github repository

764
00:27:28,240 --> 00:27:30,000
and i obtained

765
00:27:30,000 --> 00:27:32,320
two important elements the web root of

766
00:27:32,320 --> 00:27:34,480
sitecore and also the source code after

767
00:27:34,480 --> 00:27:36,960
decompiling all the dll files this was

768
00:27:36,960 --> 00:27:38,320
really important because there was a

769
00:27:38,320 --> 00:27:40,240
tack surface in both areas that you

770
00:27:40,240 --> 00:27:41,919
needed to map together

771
00:27:41,919 --> 00:27:44,399
this is something that's specific in

772
00:27:44,399 --> 00:27:46,880
many cases to net applications where

773
00:27:46,880 --> 00:27:48,799
you've got all the c-sharp source code

774
00:27:48,799 --> 00:27:50,399
but you've also got files in the web

775
00:27:50,399 --> 00:27:54,240
root that map to the c-sharp source code

776
00:27:54,240 --> 00:27:55,600
so when we're mapping out the attack

777
00:27:55,600 --> 00:27:57,200
surface we were able to look at the dot

778
00:27:57,200 --> 00:27:59,200
config files located in one of the

779
00:27:59,200 --> 00:28:01,520
folders and understand what the mapping

780
00:28:01,520 --> 00:28:02,399
looked like

781
00:28:02,399 --> 00:28:05,279
uh there's a bunch of aspx and ashx

782
00:28:05,279 --> 00:28:06,960
files but you can see that inside the

783
00:28:06,960 --> 00:28:09,760
web.config file there's this line which

784
00:28:09,760 --> 00:28:12,880
is saying slash sitecore shell maps to

785
00:28:12,880 --> 00:28:15,600
the physical folder sitecore shell so

786
00:28:15,600 --> 00:28:17,919
this was an important thing to notice

787
00:28:17,919 --> 00:28:20,080
because this led to our discoveries

788
00:28:20,080 --> 00:28:22,559
later on

789
00:28:22,559 --> 00:28:24,799
so since we have the sitecore shell

790
00:28:24,799 --> 00:28:26,399
directory we can see that there's all

791
00:28:26,399 --> 00:28:27,840
these different files in there there's

792
00:28:27,840 --> 00:28:31,520
like these ashx files aspx files but the

793
00:28:31,520 --> 00:28:33,440
journey in mapping the attack surface is

794
00:28:33,440 --> 00:28:35,600
not over yet we're still not sure what's

795
00:28:35,600 --> 00:28:37,200
pre-authentication or post

796
00:28:37,200 --> 00:28:39,200
authentication so we need to go through

797
00:28:39,200 --> 00:28:40,799
each one of these files and read the

798
00:28:40,799 --> 00:28:42,480
source code in order to understand what

799
00:28:42,480 --> 00:28:44,399
are the authentication requirements

800
00:28:44,399 --> 00:28:45,760
if there are any authentication

801
00:28:45,760 --> 00:28:48,000
requirements

802
00:28:48,000 --> 00:28:49,679
when we investigated some of the files

803
00:28:49,679 --> 00:28:52,120
we found this one particular file called

804
00:28:52,120 --> 00:28:55,200
report.ashx which had this code here

805
00:28:55,200 --> 00:28:56,880
which essentially said this is where the

806
00:28:56,880 --> 00:28:58,399
c sharp code is

807
00:28:58,399 --> 00:29:00,320
and we loaded this source code in our id

808
00:29:00,320 --> 00:29:02,159
to try and understand what this file let

809
00:29:02,159 --> 00:29:06,159
us do and if it required authentication

810
00:29:06,320 --> 00:29:08,000
this might be a little bit hard to read

811
00:29:08,000 --> 00:29:10,559
but in this file you can see that there

812
00:29:10,559 --> 00:29:15,200
is a it is taking in a http request

813
00:29:15,200 --> 00:29:19,039
it is taking in the post body and it is

814
00:29:19,039 --> 00:29:21,840
uh going to the sync report data

815
00:29:21,840 --> 00:29:24,399
serializer dot the serialized query

816
00:29:24,399 --> 00:29:26,640
you will also notice in this file that

817
00:29:26,640 --> 00:29:28,480
there is no authentication required

818
00:29:28,480 --> 00:29:30,080
before it goes to the sync of the

819
00:29:30,080 --> 00:29:32,399
serialized query so this is very

820
00:29:32,399 --> 00:29:34,799
interesting and anytime you see any

821
00:29:34,799 --> 00:29:36,799
software mentioning

822
00:29:36,799 --> 00:29:39,039
anything about deserialization that

823
00:29:39,039 --> 00:29:41,679
should definitely get you very curious

824
00:29:41,679 --> 00:29:43,919
about how that deserialization works

825
00:29:43,919 --> 00:29:45,279
because in most languages the

826
00:29:45,279 --> 00:29:47,360
serialization can be quite dangerous it

827
00:29:47,360 --> 00:29:48,799
can most likely lead to something like

828
00:29:48,799 --> 00:29:51,760
command execution

829
00:29:51,760 --> 00:29:53,600
once we look at report data serializer

830
00:29:53,600 --> 00:29:56,559
dot cs we can see that there is the sync

831
00:29:56,559 --> 00:29:59,600
digitalized parameters where the post

832
00:29:59,600 --> 00:30:01,919
input ends up at net data contract

833
00:30:01,919 --> 00:30:04,320
serializer dot read object

834
00:30:04,320 --> 00:30:06,480
now for those that aren't aware about

835
00:30:06,480 --> 00:30:09,039
net security in.net there are a number

836
00:30:09,039 --> 00:30:11,840
of ways of deserializing data and many

837
00:30:11,840 --> 00:30:14,080
of those ways are quite dangerous

838
00:30:14,080 --> 00:30:16,240
net data contract serializer is actually

839
00:30:16,240 --> 00:30:18,480
a very dangerous way of deserializing

840
00:30:18,480 --> 00:30:19,520
data

841
00:30:19,520 --> 00:30:22,080
because it can lead to command execution

842
00:30:22,080 --> 00:30:26,159
so what we found is from source to sync

843
00:30:26,159 --> 00:30:28,000
the ability to potentially get command

844
00:30:28,000 --> 00:30:30,000
execution

845
00:30:30,000 --> 00:30:32,880
so to craft the payload here we use some

846
00:30:32,880 --> 00:30:35,679
software called yso serial.net

847
00:30:35,679 --> 00:30:37,520
you can basically generate

848
00:30:37,520 --> 00:30:39,760
a gadget which will

849
00:30:39,760 --> 00:30:42,559
execute an arbitrary command and we slot

850
00:30:42,559 --> 00:30:44,799
it into this xml that we've crafted to

851
00:30:44,799 --> 00:30:46,720
end up at that sync

852
00:30:46,720 --> 00:30:48,799
once we've done that we can literally

853
00:30:48,799 --> 00:30:50,399
just send the post request

854
00:30:50,399 --> 00:30:53,760
to report.ashx with our xml payload and

855
00:30:53,760 --> 00:30:56,320
we have command execution which is very

856
00:30:56,320 --> 00:30:58,320
critical this is pre-authentication and

857
00:30:58,320 --> 00:31:00,399
it affects a large number of sitecore

858
00:31:00,399 --> 00:31:02,559
versions there are a lot of governments

859
00:31:02,559 --> 00:31:04,480
that use sitecore a lot of enterprises a

860
00:31:04,480 --> 00:31:07,600
lot of fortune 500. so this bug was very

861
00:31:07,600 --> 00:31:09,200
critical and affected a lot of

862
00:31:09,200 --> 00:31:11,919
organizations it's something that um i

863
00:31:11,919 --> 00:31:14,080
think was probably in the code base for

864
00:31:14,080 --> 00:31:15,679
three or four years before it was

865
00:31:15,679 --> 00:31:17,840
discovered so this is something where

866
00:31:17,840 --> 00:31:20,480
you know just the idea of enterprise web

867
00:31:20,480 --> 00:31:22,640
applications um uh having

868
00:31:22,640 --> 00:31:24,720
vulnerabilities you know but not being

869
00:31:24,720 --> 00:31:27,200
found through obscurity is very much so

870
00:31:27,200 --> 00:31:29,120
the cases here just because no one had

871
00:31:29,120 --> 00:31:32,640
had looked through this before

872
00:31:32,640 --> 00:31:34,080
the exploit write out for this can be

873
00:31:34,080 --> 00:31:35,279
found here

874
00:31:35,279 --> 00:31:37,519
and yeah there's a bunch of information

875
00:31:37,519 --> 00:31:39,440
about how we did uh the whole thought

876
00:31:39,440 --> 00:31:42,480
process behind this one

877
00:31:43,360 --> 00:31:44,880
the last product that i want to go

878
00:31:44,880 --> 00:31:48,240
through today is vmware workspace 1 uem

879
00:31:48,240 --> 00:31:50,640
which is airwatch

880
00:31:50,640 --> 00:31:52,880
this this product is

881
00:31:52,880 --> 00:31:54,399
used for mobile

882
00:31:54,399 --> 00:31:56,320
mobile device management it's actually

883
00:31:56,320 --> 00:31:58,799
extremely popular it used to be called

884
00:31:58,799 --> 00:32:00,480
airwatch now it's called workspace one

885
00:32:00,480 --> 00:32:03,200
uem as it's owned by vmware but one of

886
00:32:03,200 --> 00:32:05,279
the interesting things about mdm

887
00:32:05,279 --> 00:32:07,360
solutions is they need to be exposed to

888
00:32:07,360 --> 00:32:09,519
the external internet for many reasons

889
00:32:09,519 --> 00:32:11,279
mobiles need to be able to contact these

890
00:32:11,279 --> 00:32:13,519
mdm solutions in order to be able to

891
00:32:13,519 --> 00:32:16,480
operate in general so almost every large

892
00:32:16,480 --> 00:32:18,000
enterprise has some sort of mobile

893
00:32:18,000 --> 00:32:20,000
device management solution

894
00:32:20,000 --> 00:32:22,640
and this was one that we targeted at

895
00:32:22,640 --> 00:32:25,279
asset note

896
00:32:25,519 --> 00:32:26,799
installing

897
00:32:26,799 --> 00:32:28,799
this software was actually harder than

898
00:32:28,799 --> 00:32:30,640
discovering the vulnerability which is

899
00:32:30,640 --> 00:32:33,120
in many cases what happens with complex

900
00:32:33,120 --> 00:32:35,440
enterprise software i think we spent

901
00:32:35,440 --> 00:32:37,760
around a week just trying to install the

902
00:32:37,760 --> 00:32:39,440
software that was before we even looked

903
00:32:39,440 --> 00:32:42,080
at any of the source code

904
00:32:42,080 --> 00:32:44,320
on the right i've got a structure of

905
00:32:44,320 --> 00:32:46,000
directories that were

906
00:32:46,000 --> 00:32:48,880
obtained from the airwatch installation

907
00:32:48,880 --> 00:32:51,279
and you can see that these directories

908
00:32:51,279 --> 00:32:52,799
are just all deployed under different

909
00:32:52,799 --> 00:32:54,799
paths like slash catalog or slash

910
00:32:54,799 --> 00:32:57,360
airwatch there was a presence there was

911
00:32:57,360 --> 00:32:59,840
the presence of some ashx files which we

912
00:32:59,840 --> 00:33:01,360
focused on when initially looking at the

913
00:33:01,360 --> 00:33:02,640
attack surface

914
00:33:02,640 --> 00:33:04,399
some of these ashx files were not

915
00:33:04,399 --> 00:33:07,679
protected by authentication

916
00:33:07,679 --> 00:33:09,279
we found this one file called

917
00:33:09,279 --> 00:33:11,279
blobhandler.ashx

918
00:33:11,279 --> 00:33:13,519
and this file existed under multiple

919
00:33:13,519 --> 00:33:15,840
virtual paths but this endpoint was

920
00:33:15,840 --> 00:33:17,600
accessible pre-authentication and there

921
00:33:17,600 --> 00:33:19,440
was no authentication logic without

922
00:33:19,440 --> 00:33:21,760
within the code but you can see here in

923
00:33:21,760 --> 00:33:23,440
this piece of code

924
00:33:23,440 --> 00:33:25,679
it's a function called render proxy

925
00:33:25,679 --> 00:33:27,840
response and i know earlier in this

926
00:33:27,840 --> 00:33:29,760
presentation we talked about ssrf and

927
00:33:29,760 --> 00:33:32,559
the dangers of ssrf but this is another

928
00:33:32,559 --> 00:33:35,360
scenario where we we may have ssrf

929
00:33:35,360 --> 00:33:36,720
because what's happening in this

930
00:33:36,720 --> 00:33:38,880
function is it's taking in an encrypted

931
00:33:38,880 --> 00:33:42,080
url decrypting that url and then

932
00:33:42,080 --> 00:33:44,640
basically proxying that request through

933
00:33:44,640 --> 00:33:47,200
the server

934
00:33:47,840 --> 00:33:49,840
so if we were able to provide some sort

935
00:33:49,840 --> 00:33:51,679
of encrypted url we could potentially

936
00:33:51,679 --> 00:33:54,799
proxy to any url we wanted but the big

937
00:33:54,799 --> 00:33:56,240
question was how are we going to

938
00:33:56,240 --> 00:33:58,240
generate an encrypted url how does the

939
00:33:58,240 --> 00:34:00,799
encryption algorithm even work

940
00:34:00,799 --> 00:34:02,320
so that's when we started digging

941
00:34:02,320 --> 00:34:03,679
further and started reading into the

942
00:34:03,679 --> 00:34:05,120
source code and understanding how it

943
00:34:05,120 --> 00:34:06,960
worked

944
00:34:06,960 --> 00:34:08,639
we found that this was the encryption

945
00:34:08,639 --> 00:34:11,599
function it got the master key and once

946
00:34:11,599 --> 00:34:12,960
it got the master key it was able to

947
00:34:12,960 --> 00:34:15,280
encrypt a string

948
00:34:15,280 --> 00:34:17,679
and you can see this logic of get master

949
00:34:17,679 --> 00:34:19,440
key but essentially

950
00:34:19,440 --> 00:34:22,320
if the key version equals kv 0 then it

951
00:34:22,320 --> 00:34:25,040
would return the default master key

952
00:34:25,040 --> 00:34:27,918
and in our scenario the key version was

953
00:34:27,918 --> 00:34:31,040
kb 0 so it pretty much always returned

954
00:34:31,040 --> 00:34:34,159
the default master key

955
00:34:34,159 --> 00:34:36,399
and the default master key was neatly

956
00:34:36,399 --> 00:34:39,040
just hard coded in the source code so

957
00:34:39,040 --> 00:34:40,800
that was phenomenal we were able to use

958
00:34:40,800 --> 00:34:43,440
this passphrase and salt data in order

959
00:34:43,440 --> 00:34:44,239
to

960
00:34:44,239 --> 00:34:46,839
generate an encrypted

961
00:34:46,839 --> 00:34:50,239
url but you know sometimes i well we

962
00:34:50,239 --> 00:34:52,079
didn't really want to recreate all of

963
00:34:52,079 --> 00:34:53,839
the encryption algorithms that they had

964
00:34:53,839 --> 00:34:56,399
written in c-sharp so what we decided to

965
00:34:56,399 --> 00:34:58,960
do was to just hook in and rely on their

966
00:34:58,960 --> 00:35:02,320
own dll files to encrypt our own strings

967
00:35:02,320 --> 00:35:03,920
so we could leverage the functions they

968
00:35:03,920 --> 00:35:06,160
had already created in order to

969
00:35:06,160 --> 00:35:08,560
encrypt our own strings

970
00:35:08,560 --> 00:35:10,560
this allowed us to specify arbitrary

971
00:35:10,560 --> 00:35:13,359
urls to be encrypted which then let us

972
00:35:13,359 --> 00:35:17,440
proxy to any url through blobhandler.ash

973
00:35:17,440 --> 00:35:19,040
so we had this

974
00:35:19,040 --> 00:35:21,040
final exploit which was just a python

975
00:35:21,040 --> 00:35:23,200
script that you could run and you could

976
00:35:23,200 --> 00:35:24,800
specify any host that you wanted to

977
00:35:24,800 --> 00:35:26,800
request and it would generate this

978
00:35:26,800 --> 00:35:28,800
encrypted url that you could use on

979
00:35:28,800 --> 00:35:32,640
airwatch instances to access anything

980
00:35:32,640 --> 00:35:34,880
the exploit write up for this is

981
00:35:34,880 --> 00:35:36,000
this link but don't worry the

982
00:35:36,000 --> 00:35:39,359
presentation will be available later

983
00:35:39,359 --> 00:35:41,599
i do have some final tips for source

984
00:35:41,599 --> 00:35:43,359
code review that i want to go through

985
00:35:43,359 --> 00:35:46,400
before i close off this presentation

986
00:35:46,400 --> 00:35:48,960
for the novice code reviewers out there

987
00:35:48,960 --> 00:35:49,839
my

988
00:35:49,839 --> 00:35:51,920
the the biggest takeaway you can have

989
00:35:51,920 --> 00:35:53,839
from this is identify your sources in

990
00:35:53,839 --> 00:35:55,920
syncs the sources are where data is

991
00:35:55,920 --> 00:35:57,760
being input and the syncs is where data

992
00:35:57,760 --> 00:35:59,920
is being processed ultimately

993
00:35:59,920 --> 00:36:01,440
spend time doing reconnaissance on the

994
00:36:01,440 --> 00:36:03,280
code base for example identifying all

995
00:36:03,280 --> 00:36:05,040
the routes through whatever mechanism

996
00:36:05,040 --> 00:36:07,359
that application framework has

997
00:36:07,359 --> 00:36:08,720
map these routes to server-side

998
00:36:08,720 --> 00:36:10,480
functionality and make a note of all the

999
00:36:10,480 --> 00:36:12,640
inputs for all these routes be thorough

1000
00:36:12,640 --> 00:36:14,800
it's worth it and go through the

1001
00:36:14,800 --> 00:36:17,119
server-side flow from http request the

1002
00:36:17,119 --> 00:36:19,599
source uh all the way down to the sync

1003
00:36:19,599 --> 00:36:21,280
and repeat this process for the rest of

1004
00:36:21,280 --> 00:36:23,520
the attack surface if you follow this

1005
00:36:23,520 --> 00:36:25,040
you will be successful with source code

1006
00:36:25,040 --> 00:36:26,880
analysis

1007
00:36:26,880 --> 00:36:29,839
for the more experienced code reviewers

1008
00:36:29,839 --> 00:36:31,680
understand how things interoperate

1009
00:36:31,680 --> 00:36:33,839
within the software and

1010
00:36:33,839 --> 00:36:35,520
really review the dependencies that are

1011
00:36:35,520 --> 00:36:37,520
used within a project because sometimes

1012
00:36:37,520 --> 00:36:38,800
you will find vulnerabilities within the

1013
00:36:38,800 --> 00:36:40,480
dependency of a dependency and it could

1014
00:36:40,480 --> 00:36:42,880
still affect the actual application

1015
00:36:42,880 --> 00:36:44,640
don't make any assumptions even for

1016
00:36:44,640 --> 00:36:46,240
standard libraries read through the

1017
00:36:46,240 --> 00:36:48,000
documentation thoroughly and understand

1018
00:36:48,000 --> 00:36:50,000
how these standard functions work to

1019
00:36:50,000 --> 00:36:51,359
make sure that they don't have flaws in

1020
00:36:51,359 --> 00:36:53,440
them themselves and ensure that you're

1021
00:36:53,440 --> 00:36:55,520
covering all the attack surface often

1022
00:36:55,520 --> 00:36:57,280
there's going to be other internal ports

1023
00:36:57,280 --> 00:36:59,680
exposed other internal services that you

1024
00:36:59,680 --> 00:37:01,599
may be able to access in some creative

1025
00:37:01,599 --> 00:37:04,160
way so try and cover more attack surface

1026
00:37:04,160 --> 00:37:06,240
as much as possible

1027
00:37:06,240 --> 00:37:07,920
also you can start chaining

1028
00:37:07,920 --> 00:37:09,760
vulnerabilities for impact so if there's

1029
00:37:09,760 --> 00:37:12,640
an ssrf do not stop there try and find

1030
00:37:12,640 --> 00:37:14,079
something more critical through that

1031
00:37:14,079 --> 00:37:16,640
ssrf and if you gain a deep

1032
00:37:16,640 --> 00:37:18,000
understanding about this application

1033
00:37:18,000 --> 00:37:19,440
about an application on the stack by

1034
00:37:19,440 --> 00:37:21,359
reading documentation thoroughly i

1035
00:37:21,359 --> 00:37:23,119
cannot yeah i recommend you do that

1036
00:37:23,119 --> 00:37:24,560
because i cannot stress how important

1037
00:37:24,560 --> 00:37:26,480
this is each application and framework

1038
00:37:26,480 --> 00:37:30,000
is different and i can have its quirks

1039
00:37:30,000 --> 00:37:31,599
that's all thanks very much for coming

1040
00:37:31,599 --> 00:37:34,839
to my talk

1041
00:37:40,640 --> 00:37:42,400
excellent and we have some time for

1042
00:37:42,400 --> 00:37:43,920
questions are there any questions from

1043
00:37:43,920 --> 00:37:47,520
the room or from the signal angel

1044
00:37:48,839 --> 00:37:50,480
no

1045
00:37:50,480 --> 00:37:52,720
or are you moving that slowly it could

1046
00:37:52,720 --> 00:37:55,040
happen as well

1047
00:37:55,040 --> 00:37:55,920
no

1048
00:37:55,920 --> 00:37:58,400
if there are no questions you will

1049
00:37:58,400 --> 00:38:00,240
oh please move to the mic the

1050
00:38:00,240 --> 00:38:01,760
microphones are here because otherwise

1051
00:38:01,760 --> 00:38:03,280
the people on the stream will not be

1052
00:38:03,280 --> 00:38:06,640
able to hear the question

1053
00:38:11,520 --> 00:38:14,320
so first of all thank you for the talk

1054
00:38:14,320 --> 00:38:17,119
my question is why you do the

1055
00:38:17,119 --> 00:38:19,599
code auditing how do you keep an

1056
00:38:19,599 --> 00:38:21,440
overview i mean what kind of tools do

1057
00:38:21,440 --> 00:38:22,960
you use

1058
00:38:22,960 --> 00:38:25,760
um so i take a lot of notes

1059
00:38:25,760 --> 00:38:27,760
in sublime text basically while i'm

1060
00:38:27,760 --> 00:38:29,760
doing the source code auditing however i

1061
00:38:29,760 --> 00:38:32,480
also rely on a few other tools beyond

1062
00:38:32,480 --> 00:38:35,040
just you know manually auditing stuff so

1063
00:38:35,040 --> 00:38:36,720
there's a tool that i use quite a lot

1064
00:38:36,720 --> 00:38:38,640
now called samgram

1065
00:38:38,640 --> 00:38:40,720
if you've heard of that before but you

1066
00:38:40,720 --> 00:38:42,480
can essentially run your own rule sets

1067
00:38:42,480 --> 00:38:44,400
and write your own rule sets as well so

1068
00:38:44,400 --> 00:38:46,000
it's quite useful

1069
00:38:46,000 --> 00:38:48,800
as i have been doing a lot more software

1070
00:38:48,800 --> 00:38:50,800
code audits over time i've been writing

1071
00:38:50,800 --> 00:38:53,280
a lot of samgrep rules that i can now

1072
00:38:53,280 --> 00:38:55,760
run on any enterprise web application

1073
00:38:55,760 --> 00:38:56,960
source code

1074
00:38:56,960 --> 00:38:58,960
that i have but i usually take notes and

1075
00:38:58,960 --> 00:39:01,599
sublime text or something like that okay

1076
00:39:01,599 --> 00:39:04,480
thanks no worries

1077
00:39:04,480 --> 00:39:06,800
yeah other questions

1078
00:39:06,800 --> 00:39:09,920
yeah also thank you for me um

1079
00:39:09,920 --> 00:39:12,480
how have your experience has been with

1080
00:39:12,480 --> 00:39:14,880
reporting these vulnerabilities to the

1081
00:39:14,880 --> 00:39:16,880
parties involved

1082
00:39:16,880 --> 00:39:19,839
it's been a mixed experience so for us

1083
00:39:19,839 --> 00:39:22,480
we have our own disclosure policy which

1084
00:39:22,480 --> 00:39:23,839
is essentially

1085
00:39:23,839 --> 00:39:25,520
we will disclose the vulnerabilities

1086
00:39:25,520 --> 00:39:28,560
after 90 days or 30 days after patch

1087
00:39:28,560 --> 00:39:30,640
however we've had some vendors that are

1088
00:39:30,640 --> 00:39:32,720
extremely responsive and fix it within a

1089
00:39:32,720 --> 00:39:34,640
very short period of time but other

1090
00:39:34,640 --> 00:39:36,640
vendors that uh get to the point where

1091
00:39:36,640 --> 00:39:38,960
they threaten us and things like that

1092
00:39:38,960 --> 00:39:40,720
for finding the vulnerabilities so it's

1093
00:39:40,720 --> 00:39:42,480
been a mixed bag

1094
00:39:42,480 --> 00:39:43,440
however

1095
00:39:43,440 --> 00:39:44,880
most of the time it's not a bad

1096
00:39:44,880 --> 00:39:46,880
experience it's been pretty good

1097
00:39:46,880 --> 00:39:47,580
thank you

1098
00:39:47,580 --> 00:39:49,359
[Music]

1099
00:39:49,359 --> 00:39:53,880
are there any other questions yes

1100
00:39:56,320 --> 00:39:59,760
um just following up on her question

1101
00:39:59,760 --> 00:40:01,359
um you had us

1102
00:40:01,359 --> 00:40:02,800
move closer to the moment yeah you have

1103
00:40:02,800 --> 00:40:05,359
a sub domain from facebook yes you

1104
00:40:05,359 --> 00:40:07,440
hacked the enterprise software for

1105
00:40:07,440 --> 00:40:08,880
do you then first disclose to the

1106
00:40:08,880 --> 00:40:10,880
defender and hope they don't patch it to

1107
00:40:10,880 --> 00:40:13,599
report to facebook or do you uh report

1108
00:40:13,599 --> 00:40:16,079
to facebook as well uh so it depends i

1109
00:40:16,079 --> 00:40:18,400
mean back then uh that was maybe like

1110
00:40:18,400 --> 00:40:20,400
five six years ago i reported that one

1111
00:40:20,400 --> 00:40:22,000
directly to facebook and they worked

1112
00:40:22,000 --> 00:40:23,520
with the vendor

1113
00:40:23,520 --> 00:40:24,400
but

1114
00:40:24,400 --> 00:40:26,560
typically nowadays what i do is i report

1115
00:40:26,560 --> 00:40:29,440
to the vendor first i wait until a patch

1116
00:40:29,440 --> 00:40:31,359
is available and then i report to bug

1117
00:40:31,359 --> 00:40:33,839
bounty programs the reason i do this is

1118
00:40:33,839 --> 00:40:35,680
because many programs have a zero-day

1119
00:40:35,680 --> 00:40:38,319
policy and they will refuse to pay you

1120
00:40:38,319 --> 00:40:41,119
money if it is a zero day it does depend

1121
00:40:41,119 --> 00:40:42,880
on the program though some programs are

1122
00:40:42,880 --> 00:40:44,880
much more willing to take zero day

1123
00:40:44,880 --> 00:40:46,720
reports but there are other programs

1124
00:40:46,720 --> 00:40:48,480
that aren't so keen

1125
00:40:48,480 --> 00:40:51,440
okay clear thanks

1126
00:40:51,440 --> 00:40:53,839
any other

1127
00:40:54,240 --> 00:40:55,040
no

1128
00:40:55,040 --> 00:40:57,119
let's thank the speaker for for this

1129
00:40:57,119 --> 00:41:00,359
great talk

1130
00:41:09,359 --> 00:41:11,440
you

