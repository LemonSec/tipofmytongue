1
00:00:01,280 --> 00:00:12,559
[Music]

2
00:00:15,120 --> 00:00:17,920
this is the last talk on day four

3
00:00:17,920 --> 00:00:20,400
and let me pose another question to the

4
00:00:20,400 --> 00:00:21,680
audience

5
00:00:21,680 --> 00:00:24,080
if you hand a hacker a device that has a

6
00:00:24,080 --> 00:00:25,359
screen

7
00:00:25,359 --> 00:00:27,920
and two to four buttons

8
00:00:27,920 --> 00:00:30,080
what is the first question that every

9
00:00:30,080 --> 00:00:33,199
hacker will ask

10
00:00:33,920 --> 00:00:36,160
does it run doom exactly that's the

11
00:00:36,160 --> 00:00:38,960
question everyone asks if if some such a

12
00:00:38,960 --> 00:00:42,559
thing such a thing appears somewhere so

13
00:00:42,559 --> 00:00:44,960
please welcome on stage for the talk

14
00:00:44,960 --> 00:00:47,120
payment terminals as a general purpose

15
00:00:47,120 --> 00:00:51,559
game computer thomas linsmart

16
00:00:58,160 --> 00:01:00,160
check check yes cool

17
00:01:00,160 --> 00:01:02,480
yeah so thanks everybody for coming in

18
00:01:02,480 --> 00:01:05,519
here uh quite late uh this late also in

19
00:01:05,519 --> 00:01:08,000
the event um but i hope you enjoy you

20
00:01:08,000 --> 00:01:10,240
will enjoy this um there will be

21
00:01:10,240 --> 00:01:11,920
hopefully if i'll go as well a demo in

22
00:01:11,920 --> 00:01:14,479
the end so

23
00:01:16,720 --> 00:01:19,840
so a quick table of contents

24
00:01:19,840 --> 00:01:21,439
i will first start with a couple of

25
00:01:21,439 --> 00:01:22,880
small disclaimers and give an

26
00:01:22,880 --> 00:01:24,640
introduction of myself

27
00:01:24,640 --> 00:01:27,680
then i will uh give kind of a short

28
00:01:27,680 --> 00:01:29,520
overview of the device itself that we'll

29
00:01:29,520 --> 00:01:30,880
be talking about

30
00:01:30,880 --> 00:01:33,040
from a hardware perspective and then

31
00:01:33,040 --> 00:01:35,520
also from a software perspective

32
00:01:35,520 --> 00:01:37,119
then i will

33
00:01:37,119 --> 00:01:39,119
mostly kind of chronologically go

34
00:01:39,119 --> 00:01:41,759
through the process that i went through

35
00:01:41,759 --> 00:01:43,520
when i got this device

36
00:01:43,520 --> 00:01:46,000
uh from the the moment i got it up to

37
00:01:46,000 --> 00:01:47,439
yeah basically the process i followed to

38
00:01:47,439 --> 00:01:49,439
getting code execution

39
00:01:49,439 --> 00:01:50,960
uh and

40
00:01:50,960 --> 00:01:52,399
in order to explain that we will have to

41
00:01:52,399 --> 00:01:54,320
go a little bit into the how the

42
00:01:54,320 --> 00:01:56,240
bootloader works and the main operating

43
00:01:56,240 --> 00:01:57,840
system

44
00:01:57,840 --> 00:01:59,680
and

45
00:01:59,680 --> 00:02:01,600
once we get to the point of having code

46
00:02:01,600 --> 00:02:03,680
execution on the device there's the

47
00:02:03,680 --> 00:02:04,880
problem of

48
00:02:04,880 --> 00:02:06,640
turning that into something practical

49
00:02:06,640 --> 00:02:09,119
practical so we need to build sort of a

50
00:02:09,119 --> 00:02:10,959
tool chain

51
00:02:10,959 --> 00:02:13,520
in quotes as you'll see

52
00:02:13,520 --> 00:02:15,040
and then once we have a tool change so

53
00:02:15,040 --> 00:02:18,000
we are able to build c or c plus plus

54
00:02:18,000 --> 00:02:20,000
to run on this device we can of course

55
00:02:20,000 --> 00:02:22,879
board doom

56
00:02:22,879 --> 00:02:25,280
so quick disclaimers there will be no

57
00:02:25,280 --> 00:02:27,200
new vulnerabilities in these slides in

58
00:02:27,200 --> 00:02:28,480
this presentation

59
00:02:28,480 --> 00:02:30,480
this is purely using

60
00:02:30,480 --> 00:02:32,560
an already patched vulnerability

61
00:02:32,560 --> 00:02:33,599
actually

62
00:02:33,599 --> 00:02:34,480
so

63
00:02:34,480 --> 00:02:36,080
it's also good news for anyone who owns

64
00:02:36,080 --> 00:02:38,319
a shop who has one of these things

65
00:02:38,319 --> 00:02:40,640
if you connect to the internet

66
00:02:40,640 --> 00:02:42,400
hopefully it should be updated and

67
00:02:42,400 --> 00:02:44,400
patched

68
00:02:44,400 --> 00:02:45,599
and the other thing is that i will

69
00:02:45,599 --> 00:02:48,560
mostly be ignoring all the

70
00:02:48,560 --> 00:02:50,959
kind of sketchy payment related stuff so

71
00:02:50,959 --> 00:02:52,800
of course this thing is

72
00:02:52,800 --> 00:02:54,400
secure because it needs to protect

73
00:02:54,400 --> 00:02:57,280
payment assets uh payment keys

74
00:02:57,280 --> 00:02:59,680
whatever is going on in there

75
00:02:59,680 --> 00:03:01,280
this is kind of a whole kind of worms i

76
00:03:01,280 --> 00:03:02,480
don't want to open so i'm just

77
00:03:02,480 --> 00:03:05,040
interested in as the title said using

78
00:03:05,040 --> 00:03:07,200
this as a general purpose computer

79
00:03:07,200 --> 00:03:09,280
seeing what it takes to run my own code

80
00:03:09,280 --> 00:03:11,519
on there or well someone else's code

81
00:03:11,519 --> 00:03:13,519
john carmix code

82
00:03:13,519 --> 00:03:14,560
um

83
00:03:14,560 --> 00:03:16,800
so a little bit about me

84
00:03:16,800 --> 00:03:19,519
i am i work as a security analyst at a

85
00:03:19,519 --> 00:03:21,120
company called kodian

86
00:03:21,120 --> 00:03:21,840
we

87
00:03:21,840 --> 00:03:24,000
uh yeah we build tooling for security

88
00:03:24,000 --> 00:03:25,840
analysts basically try to make security

89
00:03:25,840 --> 00:03:29,280
analysts life as good as possible

90
00:03:29,280 --> 00:03:30,840
and there i mostly focus

91
00:03:30,840 --> 00:03:33,599
on software security analysis or code

92
00:03:33,599 --> 00:03:35,840
review pen testing and this is also my

93
00:03:35,840 --> 00:03:37,360
main background

94
00:03:37,360 --> 00:03:38,879
so i'm really a software guy not really

95
00:03:38,879 --> 00:03:40,799
a hardware guy

96
00:03:40,799 --> 00:03:42,319
and i do have in my previous job a

97
00:03:42,319 --> 00:03:44,560
little bit of experience with the

98
00:03:44,560 --> 00:03:46,959
payment world but this was mostly soft

99
00:03:46,959 --> 00:03:48,480
pause so

100
00:03:48,480 --> 00:03:50,239
basically a terminal like this but

101
00:03:50,239 --> 00:03:52,560
implemented in an android application so

102
00:03:52,560 --> 00:03:55,920
i know a little bit i have some context

103
00:03:55,920 --> 00:03:58,640
of the payment world but not that much

104
00:03:58,640 --> 00:03:59,920
and definitely not from a hardware

105
00:03:59,920 --> 00:04:01,519
perspective

106
00:04:01,519 --> 00:04:02,879
uh however

107
00:04:02,879 --> 00:04:04,400
kind of as a hobby i've been getting

108
00:04:04,400 --> 00:04:06,799
more into embedded security and i guess

109
00:04:06,799 --> 00:04:08,720
this is a form of embedded security and

110
00:04:08,720 --> 00:04:10,319
really

111
00:04:10,319 --> 00:04:11,840
i like tackling these things from a

112
00:04:11,840 --> 00:04:13,840
logical perspective so from a software

113
00:04:13,840 --> 00:04:16,560
angle so we will be looking at the pcb

114
00:04:16,560 --> 00:04:18,000
and stuff but

115
00:04:18,000 --> 00:04:19,199
yeah i'm not really using that for

116
00:04:19,199 --> 00:04:21,519
anything

117
00:04:21,759 --> 00:04:24,000
so a bit of context i guess for most of

118
00:04:24,000 --> 00:04:26,240
you the reason is clear just you just

119
00:04:26,240 --> 00:04:27,919
want to run doom why would you do this

120
00:04:27,919 --> 00:04:29,919
well because you can

121
00:04:29,919 --> 00:04:32,479
i just was bored and i was looking for

122
00:04:32,479 --> 00:04:35,680
a new target basically

123
00:04:36,080 --> 00:04:38,240
and i wanted something that was kind of

124
00:04:38,240 --> 00:04:40,479
cool so yeah you may actually have seen

125
00:04:40,479 --> 00:04:42,000
this at the bar for example here so

126
00:04:42,000 --> 00:04:45,440
these are quite column commonly used in

127
00:04:45,440 --> 00:04:48,400
the netherlands and worldwide i think

128
00:04:48,400 --> 00:04:51,280
so i was looking for a device like this

129
00:04:51,280 --> 00:04:52,880
that also nobody had ported doom 2

130
00:04:52,880 --> 00:04:54,400
before

131
00:04:54,400 --> 00:04:56,240
and it seemed to be from some googling

132
00:04:56,240 --> 00:04:59,440
nobody had done uh this one

133
00:04:59,440 --> 00:05:00,960
and also this is a bit of an older

134
00:05:00,960 --> 00:05:03,520
device so i figured if there are any

135
00:05:03,520 --> 00:05:06,080
exploitation mitigations uh

136
00:05:06,080 --> 00:05:08,320
they are probably not that strong so i

137
00:05:08,320 --> 00:05:10,479
should be able to build an exploit if

138
00:05:10,479 --> 00:05:12,479
needed

139
00:05:12,479 --> 00:05:14,800
yeah so i ended up with this device

140
00:05:14,800 --> 00:05:16,400
there's also a bunch here that you can

141
00:05:16,400 --> 00:05:18,240
maybe see afterwards

142
00:05:18,240 --> 00:05:21,360
this is the vx820 payment terminal as i

143
00:05:21,360 --> 00:05:23,440
said it's also here at the bar

144
00:05:23,440 --> 00:05:26,639
it is yeah it's made by veraphone very

145
00:05:26,639 --> 00:05:27,759
popular

146
00:05:27,759 --> 00:05:31,039
boss or payment terminal manufacturer

147
00:05:31,039 --> 00:05:32,720
yeah most of you will probably recognize

148
00:05:32,720 --> 00:05:33,360
it

149
00:05:33,360 --> 00:05:37,120
so i got my second hand of mark platz

150
00:05:37,120 --> 00:05:38,880
uh yeah so here's a picture i took

151
00:05:38,880 --> 00:05:40,639
yesterday at the bar

152
00:05:40,639 --> 00:05:42,000
um

153
00:05:42,000 --> 00:05:45,600
yeah so why a payment terminal so

154
00:05:45,600 --> 00:05:47,680
i thought it would be interesting to

155
00:05:47,680 --> 00:05:48,800
run

156
00:05:48,800 --> 00:05:51,039
doom or anything similar specifically on

157
00:05:51,039 --> 00:05:53,440
this device as it seems so overpowered

158
00:05:53,440 --> 00:05:55,680
right why does this device have so much

159
00:05:55,680 --> 00:05:57,440
power it only needs to display

160
00:05:57,440 --> 00:05:59,600
a couple numbers read a card

161
00:05:59,600 --> 00:06:01,280
maybe do some crypto

162
00:06:01,280 --> 00:06:03,759
um so yeah i thought it would be

163
00:06:03,759 --> 00:06:04,960
interesting to use it to its full

164
00:06:04,960 --> 00:06:07,840
potential and it has all the needed

165
00:06:07,840 --> 00:06:09,520
peripherals right it has a screen at

166
00:06:09,520 --> 00:06:11,600
least four or five keys

167
00:06:11,600 --> 00:06:12,960
um

168
00:06:12,960 --> 00:06:14,479
yeah and as i said it ticked all the

169
00:06:14,479 --> 00:06:16,880
boxes basically

170
00:06:16,880 --> 00:06:19,440
so a little bit about this device it is

171
00:06:19,440 --> 00:06:22,319
yeah it has a pretty strong or powerful

172
00:06:22,319 --> 00:06:24,479
at least for its time 400 megahertz arm

173
00:06:24,479 --> 00:06:26,880
processor it has quite some flash which

174
00:06:26,880 --> 00:06:29,039
is useful to store doom levels

175
00:06:29,039 --> 00:06:31,759
um it has enough ram for us

176
00:06:31,759 --> 00:06:33,840
it has a color lcd which is also a touch

177
00:06:33,840 --> 00:06:35,120
screen

178
00:06:35,120 --> 00:06:36,880
not so useful for doom maybe for other

179
00:06:36,880 --> 00:06:39,360
games as we'll see

180
00:06:39,360 --> 00:06:40,720
and it has actually quite some

181
00:06:40,720 --> 00:06:42,080
peripherals so

182
00:06:42,080 --> 00:06:43,680
there's not a lot of ports on there but

183
00:06:43,680 --> 00:06:45,600
you can connect a

184
00:06:45,600 --> 00:06:48,720
dongle hopefully show this in the demo

185
00:06:48,720 --> 00:06:50,000
that then

186
00:06:50,000 --> 00:06:53,120
exposes an ethernet port usb host usb

187
00:06:53,120 --> 00:06:55,840
client actually also

188
00:06:55,840 --> 00:06:59,679
and just plain old rs232

189
00:06:59,840 --> 00:07:01,199
and then of course it's a payment

190
00:07:01,199 --> 00:07:02,800
terminal it has a smart card reader it

191
00:07:02,800 --> 00:07:07,039
has nfc it has a maxtribe still

192
00:07:07,039 --> 00:07:08,240
and actually it has a couple more

193
00:07:08,240 --> 00:07:09,919
internal smart card readers if you're

194
00:07:09,919 --> 00:07:10,720
into

195
00:07:10,720 --> 00:07:13,680
having access to many smart card readers

196
00:07:13,680 --> 00:07:14,800
it has

197
00:07:14,800 --> 00:07:16,560
from a software perspective it's running

198
00:07:16,560 --> 00:07:19,360
an operating system called varix

199
00:07:19,360 --> 00:07:20,639
from what i can tell this is a

200
00:07:20,639 --> 00:07:22,880
proprietary operating system

201
00:07:22,880 --> 00:07:25,520
only used on this generation

202
00:07:25,520 --> 00:07:28,400
of verifone payment terminals

203
00:07:28,400 --> 00:07:30,639
and it's actually quite cool

204
00:07:30,639 --> 00:07:31,840
uh from

205
00:07:31,840 --> 00:07:33,840
the what i've seen of it so it's

206
00:07:33,840 --> 00:07:35,360
very unix-like

207
00:07:35,360 --> 00:07:37,360
it has support for multi-applications

208
00:07:37,360 --> 00:07:39,440
multi-threading

209
00:07:39,440 --> 00:07:40,720
it has

210
00:07:40,720 --> 00:07:42,160
sort of the concept of environment

211
00:07:42,160 --> 00:07:45,120
variables so you can set key value pairs

212
00:07:45,120 --> 00:07:46,400
which are then used by the operating

213
00:07:46,400 --> 00:07:48,240
system and also by

214
00:07:48,240 --> 00:07:51,199
applications for various configurations

215
00:07:51,199 --> 00:07:53,759
it has a regular file system

216
00:07:53,759 --> 00:07:57,199
with some level of access control it has

217
00:07:57,199 --> 00:07:58,720
also separation of permissions between

218
00:07:58,720 --> 00:08:00,560
multiple applications

219
00:08:00,560 --> 00:08:03,280
and and then it has also it exposes all

220
00:08:03,280 --> 00:08:04,800
kinds of peripherals as devices under

221
00:08:04,800 --> 00:08:05,919
slash dev

222
00:08:05,919 --> 00:08:06,960
so

223
00:08:06,960 --> 00:08:08,479
and it has all the normal syscalls to

224
00:08:08,479 --> 00:08:10,080
access those it's like linux basically

225
00:08:10,080 --> 00:08:13,199
but a bit with some weird dos names

226
00:08:13,199 --> 00:08:16,879
um so it's like slash dev con one

227
00:08:16,879 --> 00:08:18,160
um

228
00:08:18,160 --> 00:08:20,160
yeah so i wanted to

229
00:08:20,160 --> 00:08:21,680
very quickly show the hardware a bit

230
00:08:21,680 --> 00:08:23,039
more for people who are maybe more

231
00:08:23,039 --> 00:08:25,039
interested in this

232
00:08:25,039 --> 00:08:26,479
and it's just fun to look at even if you

233
00:08:26,479 --> 00:08:28,400
don't really know what you're looking at

234
00:08:28,400 --> 00:08:30,960
so this is the under the bottom side and

235
00:08:30,960 --> 00:08:32,559
there's this little flap that you can

236
00:08:32,559 --> 00:08:34,000
take a screw out you can take it off and

237
00:08:34,000 --> 00:08:35,360
you'll see that

238
00:08:35,360 --> 00:08:36,880
this actually does not trigger the

239
00:08:36,880 --> 00:08:39,519
tamper detection system so this if

240
00:08:39,519 --> 00:08:40,799
you're not familiar with these devices

241
00:08:40,799 --> 00:08:42,080
they

242
00:08:42,080 --> 00:08:44,080
are supposed to be temper evident temper

243
00:08:44,080 --> 00:08:46,080
proof i don't know to what degrees

244
00:08:46,080 --> 00:08:48,399
exactly but they should detect uh the

245
00:08:48,399 --> 00:08:50,320
fact that you're opening it up but this

246
00:08:50,320 --> 00:08:51,839
flap actually you're supposed to open

247
00:08:51,839 --> 00:08:53,040
this up too

248
00:08:53,040 --> 00:08:55,200
as i said these are the smart card

249
00:08:55,200 --> 00:08:57,040
readers so you might want to change

250
00:08:57,040 --> 00:08:58,480
those uh

251
00:08:58,480 --> 00:09:00,880
secure modules i think these are

252
00:09:00,880 --> 00:09:03,200
maybe four cards with private keys from

253
00:09:03,200 --> 00:09:05,920
acquirers but i'm not sure

254
00:09:05,920 --> 00:09:07,839
and then there's also this this

255
00:09:07,839 --> 00:09:09,519
proprietary connector at the top where

256
00:09:09,519 --> 00:09:11,760
you can connect this uh

257
00:09:11,760 --> 00:09:14,160
dongle basically that exposes all of the

258
00:09:14,160 --> 00:09:16,640
the rest of the peripherals

259
00:09:16,640 --> 00:09:17,839
but then when you actually take the back

260
00:09:17,839 --> 00:09:19,920
cover off you will see this

261
00:09:19,920 --> 00:09:22,080
and now i did trigger the tamper warning

262
00:09:22,080 --> 00:09:24,160
you can see here

263
00:09:24,160 --> 00:09:25,839
this is the first damper detection

264
00:09:25,839 --> 00:09:27,920
system that is triggered this is just

265
00:09:27,920 --> 00:09:29,440
some contacts on the pcb that are

266
00:09:29,440 --> 00:09:31,519
normally touched by a little conductive

267
00:09:31,519 --> 00:09:32,720
pin on the

268
00:09:32,720 --> 00:09:34,959
back cover and actually i think this is

269
00:09:34,959 --> 00:09:37,360
also

270
00:09:37,360 --> 00:09:39,120
the thing that sometimes accidentally

271
00:09:39,120 --> 00:09:40,959
triggers the tempo warning so if you

272
00:09:40,959 --> 00:09:42,959
google the name of this device

273
00:09:42,959 --> 00:09:45,040
space damper warning

274
00:09:45,040 --> 00:09:46,800
or temper detection you will see many

275
00:09:46,800 --> 00:09:48,800
people who just drop the device or i

276
00:09:48,800 --> 00:09:50,000
don't know maybe it's an earthquake or

277
00:09:50,000 --> 00:09:52,399
something and it triggers this because

278
00:09:52,399 --> 00:09:54,480
it disconnects quickly

279
00:09:54,480 --> 00:09:55,519
um

280
00:09:55,519 --> 00:09:58,800
we'll get into that more later

281
00:09:58,959 --> 00:10:00,399
so there's this yeah you can see there's

282
00:10:00,399 --> 00:10:03,120
this this funny green pcb here

283
00:10:03,120 --> 00:10:04,399
as i said i'm not a hardware guy but

284
00:10:04,399 --> 00:10:06,800
this seems to be doing some fancy temper

285
00:10:06,800 --> 00:10:09,120
detection prevention stuff

286
00:10:09,120 --> 00:10:10,480
i think it has a bunch of internal

287
00:10:10,480 --> 00:10:12,399
layers and

288
00:10:12,399 --> 00:10:13,839
you can you can't really see it here but

289
00:10:13,839 --> 00:10:14,959
there's a big

290
00:10:14,959 --> 00:10:16,640
male socket here i don't know a whole

291
00:10:16,640 --> 00:10:18,320
bunch of pins that plugs into a female

292
00:10:18,320 --> 00:10:20,240
socket and it's connected to this whole

293
00:10:20,240 --> 00:10:22,959
battery thing

294
00:10:22,959 --> 00:10:24,480
actually to take to switch out the

295
00:10:24,480 --> 00:10:25,760
battery you need to take this whole

296
00:10:25,760 --> 00:10:28,240
thing off as well

297
00:10:28,240 --> 00:10:30,399
and this is basically i think protecting

298
00:10:30,399 --> 00:10:31,920
all of the sensitive parts that you

299
00:10:31,920 --> 00:10:33,839
might want to tamper with so the main

300
00:10:33,839 --> 00:10:35,200
system on the chip

301
00:10:35,200 --> 00:10:38,000
the external memories i suppose

302
00:10:38,000 --> 00:10:40,560
and this is the smart card reader so i

303
00:10:40,560 --> 00:10:42,959
guess this is also quite sensitive there

304
00:10:42,959 --> 00:10:44,160
you can see the

305
00:10:44,160 --> 00:10:47,160
header

306
00:10:47,279 --> 00:10:48,880
yeah and some other funny stuff that i

307
00:10:48,880 --> 00:10:51,440
think is not common in normal embedded

308
00:10:51,440 --> 00:10:53,360
devices like very squiggly lines

309
00:10:53,360 --> 00:10:54,480
everywhere

310
00:10:54,480 --> 00:10:57,200
either to prevent rf emanations maybe

311
00:10:57,200 --> 00:10:58,640
maybe someone knows about this you can

312
00:10:58,640 --> 00:11:00,720
tell me afterwards but i thought it

313
00:11:00,720 --> 00:11:03,200
looked interesting

314
00:11:03,200 --> 00:11:04,560
yeah and you can take it apart further

315
00:11:04,560 --> 00:11:06,880
and you can see here the nfc coil around

316
00:11:06,880 --> 00:11:07,920
the screen

317
00:11:07,920 --> 00:11:09,680
and then if you lift that

318
00:11:09,680 --> 00:11:12,000
there on the kind of top middle or top

319
00:11:12,000 --> 00:11:13,839
left area there's another tamper

320
00:11:13,839 --> 00:11:16,240
detection thingy

321
00:11:16,240 --> 00:11:18,000
so it's kind of detecting all the steps

322
00:11:18,000 --> 00:11:20,480
you're taking to take it fully apart

323
00:11:20,480 --> 00:11:22,480
and i'm not sure actually

324
00:11:22,480 --> 00:11:24,000
what implications that has from a

325
00:11:24,000 --> 00:11:25,839
software side i only found a zero one

326
00:11:25,839 --> 00:11:28,720
boolean basically

327
00:11:28,720 --> 00:11:29,920
so

328
00:11:29,920 --> 00:11:31,519
going a little bit back in time i want

329
00:11:31,519 --> 00:11:34,079
to kind of as i said tell the story of

330
00:11:34,079 --> 00:11:35,920
what i did with this device so when i

331
00:11:35,920 --> 00:11:38,640
bought this thing second hand

332
00:11:38,640 --> 00:11:40,560
i actually got it in a pair like this so

333
00:11:40,560 --> 00:11:42,320
this is how you will often see it here

334
00:11:42,320 --> 00:11:44,480
in lots of small shops where

335
00:11:44,480 --> 00:11:46,720
the device on the right is the device on

336
00:11:46,720 --> 00:11:49,360
the merchant side so it also has the the

337
00:11:49,360 --> 00:11:51,120
receipt printer this way you actually

338
00:11:51,120 --> 00:11:52,959
start the payment uh

339
00:11:52,959 --> 00:11:54,560
and that's basically

340
00:11:54,560 --> 00:11:57,839
the host for uh this device so our

341
00:11:57,839 --> 00:11:59,440
target device is really acting like a

342
00:11:59,440 --> 00:12:01,600
slave where it just receives commands

343
00:12:01,600 --> 00:12:02,880
from the main

344
00:12:02,880 --> 00:12:03,839
merchant

345
00:12:03,839 --> 00:12:05,440
device

346
00:12:05,440 --> 00:12:07,440
so this is how it was configured in in

347
00:12:07,440 --> 00:12:09,360
in this case

348
00:12:09,360 --> 00:12:11,519
uh this was a bit annoying for me so it

349
00:12:11,519 --> 00:12:13,760
was running actually software from ccv

350
00:12:13,760 --> 00:12:15,040
which i think is quite common it's a

351
00:12:15,040 --> 00:12:17,680
little bit with the blue background

352
00:12:17,680 --> 00:12:19,040
you see often

353
00:12:19,040 --> 00:12:20,720
so both devices were running ccp

354
00:12:20,720 --> 00:12:22,399
software

355
00:12:22,399 --> 00:12:25,519
and it was our target device was running

356
00:12:25,519 --> 00:12:26,399
um

357
00:12:26,399 --> 00:12:27,839
in the slave mode where you really

358
00:12:27,839 --> 00:12:30,000
couldn't interact with it so i couldn't

359
00:12:30,000 --> 00:12:32,240
find any key combination for example to

360
00:12:32,240 --> 00:12:34,800
do something with it so normally there's

361
00:12:34,800 --> 00:12:37,120
a way to jump back to the kind of a

362
00:12:37,120 --> 00:12:38,800
management menu but it was also locked

363
00:12:38,800 --> 00:12:39,680
down

364
00:12:39,680 --> 00:12:42,079
so i couldn't do anything with it

365
00:12:42,079 --> 00:12:43,680
except really start payments with it

366
00:12:43,680 --> 00:12:45,920
through this merchant side device

367
00:12:45,920 --> 00:12:48,079
uh so i figured it's really the merchant

368
00:12:48,079 --> 00:12:50,399
device that sends commands that do

369
00:12:50,399 --> 00:12:53,040
interesting stuff

370
00:12:53,040 --> 00:12:55,040
so yeah this is really this picture

371
00:12:55,040 --> 00:12:56,240
really doesn't make anything clear but

372
00:12:56,240 --> 00:12:58,160
this was my janky setup of basically men

373
00:12:58,160 --> 00:13:00,399
in the middling this or capturing the

374
00:13:00,399 --> 00:13:01,920
data that was being

375
00:13:01,920 --> 00:13:03,839
sent from the merchant side device to

376
00:13:03,839 --> 00:13:05,200
the

377
00:13:05,200 --> 00:13:06,800
this target device and then the

378
00:13:06,800 --> 00:13:08,480
responses being sent back

379
00:13:08,480 --> 00:13:11,279
and you can see an rj45 but that's just

380
00:13:11,279 --> 00:13:13,120
the cable they use for for serial for

381
00:13:13,120 --> 00:13:15,760
rs232

382
00:13:15,760 --> 00:13:18,000
so based on all of the communication i

383
00:13:18,000 --> 00:13:18,880
actually

384
00:13:18,880 --> 00:13:20,720
quite well not that quickly a couple of

385
00:13:20,720 --> 00:13:23,760
evenings i figured out the this protocol

386
00:13:23,760 --> 00:13:26,000
and remember this is a ccp specific

387
00:13:26,000 --> 00:13:27,839
protocol this is not related to this

388
00:13:27,839 --> 00:13:29,360
device it's related to the software

389
00:13:29,360 --> 00:13:31,519
running on these devices but i was able

390
00:13:31,519 --> 00:13:32,800
to figure it out

391
00:13:32,800 --> 00:13:34,399
or at least some basic commands in the

392
00:13:34,399 --> 00:13:35,680
checksums

393
00:13:35,680 --> 00:13:38,079
to be able to send my own commands

394
00:13:38,079 --> 00:13:39,360
and then you can do some fun stuff like

395
00:13:39,360 --> 00:13:41,440
this

396
00:13:41,440 --> 00:13:43,360
very funny but

397
00:13:43,360 --> 00:13:45,279
it doesn't get us any closer to doom

398
00:13:45,279 --> 00:13:46,959
right

399
00:13:46,959 --> 00:13:49,440
so i thought okay so now i can kind of

400
00:13:49,440 --> 00:13:52,399
control this uh this this userland

401
00:13:52,399 --> 00:13:53,760
application but what if i want to have

402
00:13:53,760 --> 00:13:55,120
control over the

403
00:13:55,120 --> 00:13:57,360
device itself get my own application on

404
00:13:57,360 --> 00:13:58,639
there

405
00:13:58,639 --> 00:14:00,240
how do we kind of escape this

406
00:14:00,240 --> 00:14:02,079
application

407
00:14:02,079 --> 00:14:03,839
so i realized well

408
00:14:03,839 --> 00:14:05,920
if you open them up and i didn't really

409
00:14:05,920 --> 00:14:07,839
explain this yet but when they

410
00:14:07,839 --> 00:14:09,920
detect one of these tamper attempts they

411
00:14:09,920 --> 00:14:11,519
will wipe all sensitive data so that's

412
00:14:11,519 --> 00:14:13,440
the point you're really not supposed to

413
00:14:13,440 --> 00:14:14,800
access

414
00:14:14,800 --> 00:14:16,480
i don't know transaction logs payment

415
00:14:16,480 --> 00:14:19,360
keys whatever is sensitive

416
00:14:19,360 --> 00:14:20,800
and they've also wiped everything

417
00:14:20,800 --> 00:14:22,720
including applications

418
00:14:22,720 --> 00:14:23,519
so

419
00:14:23,519 --> 00:14:25,600
is this just an easy way to kind of

420
00:14:25,600 --> 00:14:27,360
clean the device

421
00:14:27,360 --> 00:14:28,880
what if we just open it up a little bit

422
00:14:28,880 --> 00:14:30,720
screw it back together

423
00:14:30,720 --> 00:14:33,279
well then you get this actually

424
00:14:33,279 --> 00:14:34,959
so this is

425
00:14:34,959 --> 00:14:37,680
the login prompt for the system

426
00:14:37,680 --> 00:14:40,000
management menu

427
00:14:40,000 --> 00:14:42,800
which you need a password for

428
00:14:42,800 --> 00:14:45,120
and now it's specifically the tempered

429
00:14:45,120 --> 00:14:46,560
version of that so this tamper message

430
00:14:46,560 --> 00:14:48,560
will be flashing

431
00:14:48,560 --> 00:14:50,480
luckily this password is publicly known

432
00:14:50,480 --> 00:14:52,399
you can just google verifone

433
00:14:52,399 --> 00:14:54,160
system and your password

434
00:14:54,160 --> 00:14:55,839
this is the password

435
00:14:55,839 --> 00:14:56,959
if you can see

436
00:14:56,959 --> 00:14:58,639
eight three 16631

437
00:14:58,639 --> 00:15:00,320
so if you ever have one of these press

438
00:15:00,320 --> 00:15:02,320
seven and enter at the same time you

439
00:15:02,320 --> 00:15:03,760
should go into this screen then enter

440
00:15:03,760 --> 00:15:06,959
this password you're in management mode

441
00:15:06,959 --> 00:15:08,079
however

442
00:15:08,079 --> 00:15:10,320
application vendors can actually

443
00:15:10,320 --> 00:15:11,839
tell the system to use a different

444
00:15:11,839 --> 00:15:14,000
password but in most of the devices i

445
00:15:14,000 --> 00:15:17,279
got they kept the default password

446
00:15:17,279 --> 00:15:19,120
so then okay cool we can enter the

447
00:15:19,120 --> 00:15:20,320
system menu but it's still in this

448
00:15:20,320 --> 00:15:22,000
tempered state

449
00:15:22,000 --> 00:15:23,600
luckily just google or actually on

450
00:15:23,600 --> 00:15:25,040
youtube there are tutorials how to clear

451
00:15:25,040 --> 00:15:27,279
the tamper flag as i said people just

452
00:15:27,279 --> 00:15:28,720
drop these things they want to keep

453
00:15:28,720 --> 00:15:30,160
using it

454
00:15:30,160 --> 00:15:31,759
turns out it's just kind of a cheat code

455
00:15:31,759 --> 00:15:33,040
you

456
00:15:33,040 --> 00:15:35,600
this is the main menu

457
00:15:35,600 --> 00:15:37,040
you kind of have to navigate to the next

458
00:15:37,040 --> 00:15:38,000
screen

459
00:15:38,000 --> 00:15:39,680
and there's this option five key

460
00:15:39,680 --> 00:15:41,360
management

461
00:15:41,360 --> 00:15:44,079
and there's an option called ipp keyload

462
00:15:44,079 --> 00:15:46,160
uh okay cool

463
00:15:46,160 --> 00:15:47,839
then you get to this screen

464
00:15:47,839 --> 00:15:49,759
which apparently is doing something over

465
00:15:49,759 --> 00:15:52,079
serial receiving keys and it tells you

466
00:15:52,079 --> 00:15:54,399
press one to end but what it doesn't say

467
00:15:54,399 --> 00:15:56,000
is that you can press two to clear the

468
00:15:56,000 --> 00:15:57,759
temper flag

469
00:15:57,759 --> 00:15:59,759
so press two

470
00:15:59,759 --> 00:16:01,360
device reboots

471
00:16:01,360 --> 00:16:03,759
tamper message clear

472
00:16:03,759 --> 00:16:06,000
this feels a bit sketchy to me i guess

473
00:16:06,000 --> 00:16:07,360
it's fine because all of the sensitive

474
00:16:07,360 --> 00:16:09,120
data is cleared but what's the point of

475
00:16:09,120 --> 00:16:10,720
the temper flag

476
00:16:10,720 --> 00:16:12,959
i don't know but for me this was perfect

477
00:16:12,959 --> 00:16:14,240
because now we have kind of a clean

478
00:16:14,240 --> 00:16:15,839
device

479
00:16:15,839 --> 00:16:17,279
no more applications that we don't

480
00:16:17,279 --> 00:16:18,399
really care about it's no longer

481
00:16:18,399 --> 00:16:21,680
tampered okay what to do now

482
00:16:21,680 --> 00:16:24,079
so it gives kind of two important hints

483
00:16:24,079 --> 00:16:27,199
download needed and no go variable or

484
00:16:27,199 --> 00:16:28,959
star go

485
00:16:28,959 --> 00:16:30,639
so this go variable is one of these

486
00:16:30,639 --> 00:16:32,480
environment variables i talked about and

487
00:16:32,480 --> 00:16:33,440
this is

488
00:16:33,440 --> 00:16:35,759
basically the one that defines you you

489
00:16:35,759 --> 00:16:37,519
set it to an application name and that

490
00:16:37,519 --> 00:16:39,519
is the application that will start

491
00:16:39,519 --> 00:16:41,279
when the device boots

492
00:16:41,279 --> 00:16:43,199
so if it's not set it doesn't know what

493
00:16:43,199 --> 00:16:45,199
application to run but this is easy we

494
00:16:45,199 --> 00:16:46,800
can set that using one of the options in

495
00:16:46,800 --> 00:16:48,880
the system

496
00:16:48,880 --> 00:16:51,600
menu and download needed okay so we need

497
00:16:51,600 --> 00:16:54,720
to download something to it

498
00:16:55,120 --> 00:16:56,959
uh so it turns out there's it uses this

499
00:16:56,959 --> 00:16:58,800
protocol called xdl

500
00:16:58,800 --> 00:16:59,839
uh

501
00:16:59,839 --> 00:17:01,680
i i'm thinking this is also proprietary

502
00:17:01,680 --> 00:17:03,759
to verify

503
00:17:03,759 --> 00:17:04,559
and

504
00:17:04,559 --> 00:17:07,520
this is a protocol where uh if you

505
00:17:07,520 --> 00:17:09,280
connect the device over serial to some

506
00:17:09,280 --> 00:17:11,199
kind of host machine you can

507
00:17:11,199 --> 00:17:13,199
download files from one direction from

508
00:17:13,199 --> 00:17:15,599
so to the terminal device from your

509
00:17:15,599 --> 00:17:18,880
computer there's no way to extract files

510
00:17:18,880 --> 00:17:20,160
so you can download files you can set

511
00:17:20,160 --> 00:17:21,839
config variables like this go for

512
00:17:21,839 --> 00:17:23,599
example and there are some other

513
00:17:23,599 --> 00:17:26,319
commands to wipe flash or

514
00:17:26,319 --> 00:17:28,559
clear sram and a couple of photos i

515
00:17:28,559 --> 00:17:30,039
haven't really reversed

516
00:17:30,039 --> 00:17:33,440
yet um so yeah i basically made a python

517
00:17:33,440 --> 00:17:36,400
wrapper or library for this to easily do

518
00:17:36,400 --> 00:17:37,840
this as i

519
00:17:37,840 --> 00:17:40,000
kind of needed this for the main attack

520
00:17:40,000 --> 00:17:42,000
we'll see later but this is just some

521
00:17:42,000 --> 00:17:44,240
code that sets this go variable and then

522
00:17:44,240 --> 00:17:46,559
also uploads the the file and this on

523
00:17:46,559 --> 00:17:48,320
github i will also link it

524
00:17:48,320 --> 00:17:51,039
later in the end

525
00:17:51,039 --> 00:17:55,280
so okay we can just upload doom right

526
00:17:55,280 --> 00:17:57,679
sure yes we can but we will get a

527
00:17:57,679 --> 00:17:59,760
different screen so

528
00:17:59,760 --> 00:18:02,320
go not authenticate it so now i properly

529
00:18:02,320 --> 00:18:04,160
set go to the file name that i actually

530
00:18:04,160 --> 00:18:06,880
uploaded and of course i guess it makes

531
00:18:06,880 --> 00:18:08,080
sense

532
00:18:08,080 --> 00:18:10,559
applications need to be signed

533
00:18:10,559 --> 00:18:13,760
so normally you're supposed to upload a

534
00:18:13,760 --> 00:18:16,720
p7s file together with your dot out

535
00:18:16,720 --> 00:18:18,320
executable file

536
00:18:18,320 --> 00:18:21,120
and this p7s file is kind of like uh

537
00:18:21,120 --> 00:18:22,799
yeah it's an asymmetric signature so

538
00:18:22,799 --> 00:18:24,080
there's a whole

539
00:18:24,080 --> 00:18:25,600
i don't know the details but there's a

540
00:18:25,600 --> 00:18:27,760
pki system some certificate chains in

541
00:18:27,760 --> 00:18:28,400
there

542
00:18:28,400 --> 00:18:29,760
i think the idea is that you're supposed

543
00:18:29,760 --> 00:18:32,000
to get a some sort of developer

544
00:18:32,000 --> 00:18:32,720
uh

545
00:18:32,720 --> 00:18:34,480
contract with verifone such that you're

546
00:18:34,480 --> 00:18:36,559
able to you know sign applications you

547
00:18:36,559 --> 00:18:38,559
get the right keys from them

548
00:18:38,559 --> 00:18:40,799
then this device will

549
00:18:40,799 --> 00:18:43,200
allow you to run those applications

550
00:18:43,200 --> 00:18:45,039
uh however there's some funny logic

551
00:18:45,039 --> 00:18:46,799
happening so

552
00:18:46,799 --> 00:18:49,200
once you do this upload

553
00:18:49,200 --> 00:18:51,200
of a file immediately after you upload a

554
00:18:51,200 --> 00:18:53,039
file it'll reboot or if you're done

555
00:18:53,039 --> 00:18:54,880
uploading multiple files

556
00:18:54,880 --> 00:18:57,760
and if it sees one of these p7s files so

557
00:18:57,760 --> 00:18:59,600
these signature files

558
00:18:59,600 --> 00:19:01,039
the kernel will

559
00:19:01,039 --> 00:19:03,039
start verifying the signature

560
00:19:03,039 --> 00:19:04,080
see if it

561
00:19:04,080 --> 00:19:05,360
is a valid signature over that

562
00:19:05,360 --> 00:19:08,000
executable and if it is it will actually

563
00:19:08,000 --> 00:19:10,799
remove the p7s file and generate a dot

564
00:19:10,799 --> 00:19:12,799
sig file

565
00:19:12,799 --> 00:19:15,039
and this dot zig file it turns out is

566
00:19:15,039 --> 00:19:18,000
just it's completely unrelated to any

567
00:19:18,000 --> 00:19:20,080
private keys or pki system anything like

568
00:19:20,080 --> 00:19:22,160
that this is just an hmac

569
00:19:22,160 --> 00:19:25,760
using a key that's on the device itself

570
00:19:25,760 --> 00:19:27,760
and then later every time you actually

571
00:19:27,760 --> 00:19:30,000
want to run the application it'll just

572
00:19:30,000 --> 00:19:32,559
gen or verify the sick file

573
00:19:32,559 --> 00:19:34,880
so i'm thinking that this is done for

574
00:19:34,880 --> 00:19:36,400
efficiency reasons i guess it's quicker

575
00:19:36,400 --> 00:19:39,520
to verify a symmetric hmac than

576
00:19:39,520 --> 00:19:42,240
an asymmetric signature file

577
00:19:42,240 --> 00:19:43,039
but

578
00:19:43,039 --> 00:19:44,480
this is pseudocode but this is kind of

579
00:19:44,480 --> 00:19:46,320
the logic in the kernel that these are

580
00:19:46,320 --> 00:19:48,000
really separate functions

581
00:19:48,000 --> 00:19:50,880
so the verify p7s generates sig

582
00:19:50,880 --> 00:19:51,760
so

583
00:19:51,760 --> 00:19:53,600
these smart guys i'm not sure if you can

584
00:19:53,600 --> 00:19:55,200
read it i will link it in the end as

585
00:19:55,200 --> 00:19:57,120
well from the payment village devcon

586
00:19:57,120 --> 00:19:58,480
payment village

587
00:19:58,480 --> 00:19:59,919
they figured

588
00:19:59,919 --> 00:20:01,919
out that this is how it works and of

589
00:20:01,919 --> 00:20:03,120
course

590
00:20:03,120 --> 00:20:05,760
if you already can think of this but if

591
00:20:05,760 --> 00:20:07,520
we can somehow call this generate sig

592
00:20:07,520 --> 00:20:10,159
function on our binary without ever

593
00:20:10,159 --> 00:20:11,200
supplying

594
00:20:11,200 --> 00:20:13,440
a p7s file there will be a valid

595
00:20:13,440 --> 00:20:16,159
signature file so there's code on the

596
00:20:16,159 --> 00:20:18,240
device itself that can generate

597
00:20:18,240 --> 00:20:19,360
valid

598
00:20:19,360 --> 00:20:21,679
sick signature

599
00:20:21,679 --> 00:20:23,440
so this will be kind of the goal

600
00:20:23,440 --> 00:20:26,240
from here on out

601
00:20:26,240 --> 00:20:28,000
so what these guys also found with a

602
00:20:28,000 --> 00:20:30,240
couple of other interesting features

603
00:20:30,240 --> 00:20:32,080
or bugs

604
00:20:32,080 --> 00:20:34,799
not in this device but in a similar

605
00:20:34,799 --> 00:20:36,240
device from the same family a little bit

606
00:20:36,240 --> 00:20:38,159
older i think

607
00:20:38,159 --> 00:20:39,919
so first thing they found which was also

608
00:20:39,919 --> 00:20:41,039
my device

609
00:20:41,039 --> 00:20:44,000
is kind of a hidden shell so there's

610
00:20:44,000 --> 00:20:45,840
no need to upload a program if there's

611
00:20:45,840 --> 00:20:48,000
already a hidden program on the device

612
00:20:48,000 --> 00:20:49,760
that's already that has a valid

613
00:20:49,760 --> 00:20:52,000
signature and which basically sponsors

614
00:20:52,000 --> 00:20:54,720
shell on serial port

615
00:20:54,720 --> 00:20:56,480
this is pretty fun you can you can

616
00:20:56,480 --> 00:20:58,320
traverse the file system you can even

617
00:20:58,320 --> 00:21:00,159
dump files which was very useful for me

618
00:21:00,159 --> 00:21:02,480
this was a way to get files out but

619
00:21:02,480 --> 00:21:03,919
apart from that

620
00:21:03,919 --> 00:21:05,679
it's still some application running in

621
00:21:05,679 --> 00:21:07,360
user land it doesn't give us any extra

622
00:21:07,360 --> 00:21:09,200
privileges it doesn't allow us to

623
00:21:09,200 --> 00:21:10,799
execute new code

624
00:21:10,799 --> 00:21:12,559
so this was fun and apparently this is

625
00:21:12,559 --> 00:21:15,600
also patched already

626
00:21:15,600 --> 00:21:18,400
but yeah not really useful for me

627
00:21:18,400 --> 00:21:20,960
another thing they found was a buffer

628
00:21:20,960 --> 00:21:22,240
overflow and they might have found a

629
00:21:22,240 --> 00:21:23,679
couple more but

630
00:21:23,679 --> 00:21:25,840
at least one in the

631
00:21:25,840 --> 00:21:27,280
in one of the syscalls i think it was

632
00:21:27,280 --> 00:21:28,960
the open handler

633
00:21:28,960 --> 00:21:30,480
actually in the kernel so that's much

634
00:21:30,480 --> 00:21:32,400
more interesting

635
00:21:32,400 --> 00:21:34,240
but they actually tested a slightly

636
00:21:34,240 --> 00:21:36,159
different os version

637
00:21:36,159 --> 00:21:37,520
and i couldn't quickly get this to work

638
00:21:37,520 --> 00:21:39,200
with something

639
00:21:39,200 --> 00:21:40,799
yeah easy

640
00:21:40,799 --> 00:21:42,480
for this as you have to actually exploit

641
00:21:42,480 --> 00:21:44,640
this it's a lot of work

642
00:21:44,640 --> 00:21:46,400
so i kind of went for the third thing

643
00:21:46,400 --> 00:21:47,520
they found

644
00:21:47,520 --> 00:21:50,000
which was also present on this device

645
00:21:50,000 --> 00:21:53,440
a hidden mode in the bootloader

646
00:21:53,440 --> 00:21:55,360
and this is quite a sketchy thing so

647
00:21:55,360 --> 00:21:57,840
this device has a bootloader

648
00:21:57,840 --> 00:21:59,360
that apparently has a hidden mode if you

649
00:21:59,360 --> 00:22:01,440
press three keys at the same time while

650
00:22:01,440 --> 00:22:02,799
powering it on

651
00:22:02,799 --> 00:22:04,480
it'll go into a mode where it basically

652
00:22:04,480 --> 00:22:05,679
accepts

653
00:22:05,679 --> 00:22:09,039
data over serial

654
00:22:09,520 --> 00:22:11,520
and if you set the right things it'll

655
00:22:11,520 --> 00:22:13,600
load this data at an arbitrary

656
00:22:13,600 --> 00:22:17,200
user-specified location in memory

657
00:22:17,200 --> 00:22:19,600
before doing anything else well we'll

658
00:22:19,600 --> 00:22:23,440
get into this a bit more later

659
00:22:23,440 --> 00:22:26,400
so well actually here okay so this

660
00:22:26,400 --> 00:22:28,159
device has secure boot i think this is

661
00:22:28,159 --> 00:22:30,240
also claimed by a manufacturer so

662
00:22:30,240 --> 00:22:31,679
there's a couple of boot stages each one

663
00:22:31,679 --> 00:22:33,039
verifies

664
00:22:33,039 --> 00:22:35,039
or loads the next one verifies it if

665
00:22:35,039 --> 00:22:37,039
it's properly authenticated it jumps to

666
00:22:37,039 --> 00:22:37,679
it

667
00:22:37,679 --> 00:22:40,000
and this uh bootloader that i'm talking

668
00:22:40,000 --> 00:22:42,320
about here is called sbi

669
00:22:42,320 --> 00:22:43,840
and this is the bootloader that

670
00:22:43,840 --> 00:22:45,440
basically the final bootloader it loads

671
00:22:45,440 --> 00:22:46,240
the

672
00:22:46,240 --> 00:22:48,320
actual operating system

673
00:22:48,320 --> 00:22:49,840
and verifies it

674
00:22:49,840 --> 00:22:51,280
and this is the bootloader that has this

675
00:22:51,280 --> 00:22:53,440
secret mode if you press the one five

676
00:22:53,440 --> 00:22:55,760
and nine keys

677
00:22:55,760 --> 00:22:57,919
and so in the secret mode it also uses

678
00:22:57,919 --> 00:23:00,080
this xdl protocol

679
00:23:00,080 --> 00:23:02,000
as i showed earlier to kind of load

680
00:23:02,000 --> 00:23:03,440
scripts and i think this is supposed to

681
00:23:03,440 --> 00:23:06,159
be like a proper secure implementation

682
00:23:06,159 --> 00:23:07,120
where

683
00:23:07,120 --> 00:23:09,120
you send it a script and these are

684
00:23:09,120 --> 00:23:10,799
scripts with very low level commands

685
00:23:10,799 --> 00:23:14,480
like uh write some bytes to nand flash

686
00:23:14,480 --> 00:23:16,080
or this very like low level bootloader

687
00:23:16,080 --> 00:23:17,760
stuff but these scripts are

688
00:23:17,760 --> 00:23:19,039
authenticated

689
00:23:19,039 --> 00:23:20,640
and it's also using again some kind of

690
00:23:20,640 --> 00:23:22,799
pki system

691
00:23:22,799 --> 00:23:24,880
but if you don't specify your script if

692
00:23:24,880 --> 00:23:26,080
you don't give it like it's an actual

693
00:23:26,080 --> 00:23:27,520
ascii script if you don't give it a

694
00:23:27,520 --> 00:23:29,120
script but

695
00:23:29,120 --> 00:23:31,280
some magic value in the beginning

696
00:23:31,280 --> 00:23:33,600
uh and then just an arbitrary long file

697
00:23:33,600 --> 00:23:36,640
with at this offset and address

698
00:23:36,640 --> 00:23:39,280
then it'll load your file uh

699
00:23:39,280 --> 00:23:41,520
at this address

700
00:23:41,520 --> 00:23:43,039
okay cool

701
00:23:43,039 --> 00:23:45,279
so yeah obviously this breaks secure

702
00:23:45,279 --> 00:23:47,600
boots

703
00:23:48,080 --> 00:23:50,720
yeah so to summarize we kind of have an

704
00:23:50,720 --> 00:23:54,000
arbitrary write or a right what where

705
00:23:54,000 --> 00:23:56,880
primitive that allows for code execution

706
00:23:56,880 --> 00:23:58,400
so this is kind of the implication we

707
00:23:58,400 --> 00:24:00,720
can write to some place that

708
00:24:00,720 --> 00:24:03,360
execution will happen anyway and then

709
00:24:03,360 --> 00:24:05,360
it's executing our code

710
00:24:05,360 --> 00:24:06,960
so in my case i'm just overriding the

711
00:24:06,960 --> 00:24:09,279
bootloader code while it is running

712
00:24:09,279 --> 00:24:12,080
then we have arbitrary code execution

713
00:24:12,080 --> 00:24:15,360
and it breaks secure boot

714
00:24:15,360 --> 00:24:17,039
and it's still present on many devices

715
00:24:17,039 --> 00:24:18,640
so i got a couple from mark platz

716
00:24:18,640 --> 00:24:20,480
different sellers

717
00:24:20,480 --> 00:24:22,080
yeah if you not don't know what you're

718
00:24:22,080 --> 00:24:24,159
looking at it's this sbi version which

719
00:24:24,159 --> 00:24:27,520
is all the vulnerable version

720
00:24:27,919 --> 00:24:32,400
so that was very useful for me

721
00:24:32,400 --> 00:24:34,480
yeah and this is a way in for us towards

722
00:24:34,480 --> 00:24:36,799
doom

723
00:24:37,039 --> 00:24:38,799
because i had a plan so

724
00:24:38,799 --> 00:24:40,400
remember this generate signature

725
00:24:40,400 --> 00:24:42,000
function in the kernel so this is all

726
00:24:42,000 --> 00:24:43,440
the way when the device fully booted in

727
00:24:43,440 --> 00:24:45,120
the kernel there's somewhere there's a

728
00:24:45,120 --> 00:24:46,640
function that if you call it it'll

729
00:24:46,640 --> 00:24:48,720
generate and make a valid signature file

730
00:24:48,720 --> 00:24:51,679
for our for any binary you want we want

731
00:24:51,679 --> 00:24:52,880
to call that

732
00:24:52,880 --> 00:24:55,279
but we have control over the bootloader

733
00:24:55,279 --> 00:24:58,159
so my goal was kind of to follow

734
00:24:58,159 --> 00:25:00,480
the normal boot process while kind of

735
00:25:00,480 --> 00:25:03,919
keeping control such that i was able to

736
00:25:03,919 --> 00:25:05,679
call this function once the the normal

737
00:25:05,679 --> 00:25:08,400
operating system was fully loaded

738
00:25:08,400 --> 00:25:11,520
and this was a bit convoluted

739
00:25:11,520 --> 00:25:13,760
so i hope this is all readable but

740
00:25:13,760 --> 00:25:15,360
if you don't follow all the details it's

741
00:25:15,360 --> 00:25:17,039
fine

742
00:25:17,039 --> 00:25:18,960
so i kind of have a schematic here of

743
00:25:18,960 --> 00:25:21,120
the memory the alt of the yellow is the

744
00:25:21,120 --> 00:25:23,200
the bootloader you can see a little red

745
00:25:23,200 --> 00:25:24,400
arrow that's our current place where

746
00:25:24,400 --> 00:25:26,320
we're executing code

747
00:25:26,320 --> 00:25:28,000
and so this at this point we're right

748
00:25:28,000 --> 00:25:31,200
inside this magic download mode

749
00:25:31,200 --> 00:25:33,600
and what i do here i just basically send

750
00:25:33,600 --> 00:25:36,559
it a copy of this sbi file with a couple

751
00:25:36,559 --> 00:25:38,000
of patches

752
00:25:38,000 --> 00:25:40,400
one of these patches is right after

753
00:25:40,400 --> 00:25:43,360
so that's stage zero it's right after uh

754
00:25:43,360 --> 00:25:44,080
the

755
00:25:44,080 --> 00:25:45,679
varix operating system is loaded and

756
00:25:45,679 --> 00:25:47,039
authenticated but just before the

757
00:25:47,039 --> 00:25:50,000
bootloader jumps to it

758
00:25:50,000 --> 00:25:51,440
and that's actually when we call stage

759
00:25:51,440 --> 00:25:53,279
one which

760
00:25:53,279 --> 00:25:56,720
uh in a bit we'll see what it does so

761
00:25:56,720 --> 00:25:59,520
uh loading and authenticating varix uh

762
00:25:59,520 --> 00:26:01,919
os kind of looks like this so it at this

763
00:26:01,919 --> 00:26:03,520
address uh

764
00:26:03,520 --> 00:26:05,200
40 million or something

765
00:26:05,200 --> 00:26:06,960
it'll uh put

766
00:26:06,960 --> 00:26:09,440
varix and this is actually not

767
00:26:09,440 --> 00:26:11,200
proper

768
00:26:11,200 --> 00:26:13,279
varics it is a compressed version with a

769
00:26:13,279 --> 00:26:14,799
little decompression routine in the

770
00:26:14,799 --> 00:26:16,799
beginning

771
00:26:16,799 --> 00:26:19,200
but that's fine so as you can see here

772
00:26:19,200 --> 00:26:21,760
we're just before stage zero so

773
00:26:21,760 --> 00:26:24,080
what happens when we execute stage 0

774
00:26:24,080 --> 00:26:25,279
well

775
00:26:25,279 --> 00:26:27,679
it jumps to h1 so we execute stage 1

776
00:26:27,679 --> 00:26:29,360
which then

777
00:26:29,360 --> 00:26:31,039
actually makes another patch so it

778
00:26:31,039 --> 00:26:32,640
patches

779
00:26:32,640 --> 00:26:34,159
something inside this code that was just

780
00:26:34,159 --> 00:26:36,080
loaded so it inserts a small patch

781
00:26:36,080 --> 00:26:38,720
called stage 2 inside

782
00:26:38,720 --> 00:26:40,400
the compressed version of ferrix os so

783
00:26:40,400 --> 00:26:42,400
just before the compressed

784
00:26:42,400 --> 00:26:44,240
lcma blob

785
00:26:44,240 --> 00:26:47,840
just after the decompression routine

786
00:26:47,840 --> 00:26:49,039
okay so

787
00:26:49,039 --> 00:26:50,240
at some point

788
00:26:50,240 --> 00:26:52,080
our modified version of sbi actually

789
00:26:52,080 --> 00:26:56,000
jumps into this uh hex uh 40 million or

790
00:26:56,000 --> 00:26:57,919
something address

791
00:26:57,919 --> 00:27:00,240
and

792
00:27:00,480 --> 00:27:02,320
as you can see we actually execute this

793
00:27:02,320 --> 00:27:04,080
clone functionality so what it does it

794
00:27:04,080 --> 00:27:07,039
is it clones itself basically to a much

795
00:27:07,039 --> 00:27:08,640
higher address and actually also

796
00:27:08,640 --> 00:27:10,720
transfers control flow there and it does

797
00:27:10,720 --> 00:27:12,559
this such that it can then

798
00:27:12,559 --> 00:27:14,559
actually decompress back to this

799
00:27:14,559 --> 00:27:16,559
original address

800
00:27:16,559 --> 00:27:18,880
which we see here

801
00:27:18,880 --> 00:27:20,960
stage two actually

802
00:27:20,960 --> 00:27:22,159
um

803
00:27:22,159 --> 00:27:23,760
well this is just before stage two is

804
00:27:23,760 --> 00:27:25,120
executed this is when decompress is

805
00:27:25,120 --> 00:27:27,120
executed we can see that the normal

806
00:27:27,120 --> 00:27:28,880
decompressed version of eric's is on the

807
00:27:28,880 --> 00:27:31,200
right there

808
00:27:31,200 --> 00:27:32,880
and then so here we're just before stage

809
00:27:32,880 --> 00:27:35,360
two we execute stage two

810
00:27:35,360 --> 00:27:37,600
and this is what inserts the final

811
00:27:37,600 --> 00:27:39,360
actual thing we want to do which is a

812
00:27:39,360 --> 00:27:41,600
patch inside the normal

813
00:27:41,600 --> 00:27:43,039
kernel image the fully decompressed

814
00:27:43,039 --> 00:27:45,039
kernel image that calls that

815
00:27:45,039 --> 00:27:46,640
kernel function that

816
00:27:46,640 --> 00:27:50,320
generates the signature file for us

817
00:27:50,480 --> 00:27:54,640
okay cool so now we can run our own code

818
00:27:55,679 --> 00:27:57,840
but let's take a little step back so

819
00:27:57,840 --> 00:28:00,399
how did i do this hello world

820
00:28:00,399 --> 00:28:02,159
we need to actually supply an executable

821
00:28:02,159 --> 00:28:03,200
file

822
00:28:03,200 --> 00:28:05,039
uh but how do we make one of these well

823
00:28:05,039 --> 00:28:07,360
it has a specific format

824
00:28:07,360 --> 00:28:08,399
so

825
00:28:08,399 --> 00:28:10,480
you might be familiar with elf

826
00:28:10,480 --> 00:28:13,760
this is much much simpler luckily and i

827
00:28:13,760 --> 00:28:15,919
didn't reverse engineer the full thing

828
00:28:15,919 --> 00:28:18,240
but it's uh yeah we don't need to

829
00:28:18,240 --> 00:28:20,240
understand the full thing there are some

830
00:28:20,240 --> 00:28:23,360
magic flags so i took this shell.out

831
00:28:23,360 --> 00:28:25,039
that was already on the device as a nice

832
00:28:25,039 --> 00:28:27,360
example for my

833
00:28:27,360 --> 00:28:28,799
program

834
00:28:28,799 --> 00:28:30,240
and it has all the things you might

835
00:28:30,240 --> 00:28:32,320
expect in a an executable file header

836
00:28:32,320 --> 00:28:33,279
like uh

837
00:28:33,279 --> 00:28:36,720
address of your main function

838
00:28:36,720 --> 00:28:38,799
the start of the text segment or the

839
00:28:38,799 --> 00:28:39,919
equivalent

840
00:28:39,919 --> 00:28:41,600
side of the data segment and the stack

841
00:28:41,600 --> 00:28:42,559
size

842
00:28:42,559 --> 00:28:44,159
and there's also a way to specify which

843
00:28:44,159 --> 00:28:47,039
system libraries should be loaded

844
00:28:47,039 --> 00:28:49,440
uh when it loads this application and

845
00:28:49,440 --> 00:28:51,679
there's a system library called sys.lib

846
00:28:51,679 --> 00:28:54,159
which is kind of the lip c equivalent in

847
00:28:54,159 --> 00:28:56,240
varix i'm actually not using that but

848
00:28:56,240 --> 00:28:58,240
we'll see later

849
00:28:58,240 --> 00:28:59,760
so yeah this format seems pretty simple

850
00:28:59,760 --> 00:29:02,080
we can we can deal with this

851
00:29:02,080 --> 00:29:02,799
so

852
00:29:02,799 --> 00:29:03,919
to to

853
00:29:03,919 --> 00:29:05,360
kind of build a quote-unquote tool chain

854
00:29:05,360 --> 00:29:07,440
this is why i put it in quotes before

855
00:29:07,440 --> 00:29:09,520
uh it's just a hacky make file

856
00:29:09,520 --> 00:29:12,559
i used a linker script which was new

857
00:29:12,559 --> 00:29:14,000
technology for me but it's pretty cool

858
00:29:14,000 --> 00:29:15,760
you can kind of give the link of the

859
00:29:15,760 --> 00:29:17,440
script and it'll

860
00:29:17,440 --> 00:29:19,840
uh i'll tell it some how to arrange some

861
00:29:19,840 --> 00:29:21,360
stuff in in the actual file and in

862
00:29:21,360 --> 00:29:24,240
memory at runtime so it you can give the

863
00:29:24,240 --> 00:29:25,760
starting address and kind of the order

864
00:29:25,760 --> 00:29:27,760
of the sections and this is this order

865
00:29:27,760 --> 00:29:29,919
then will also be followed in the elf

866
00:29:29,919 --> 00:29:32,000
file so when you then turn the l file

867
00:29:32,000 --> 00:29:33,679
into a raw binary

868
00:29:33,679 --> 00:29:35,440
with object copy

869
00:29:35,440 --> 00:29:36,480
you kind of

870
00:29:36,480 --> 00:29:38,640
get what you actually are saying in this

871
00:29:38,640 --> 00:29:40,640
link script so this is how i was able to

872
00:29:40,640 --> 00:29:42,000
get things in the right order that

873
00:29:42,000 --> 00:29:43,760
ferrix expects

874
00:29:43,760 --> 00:29:44,960
and then

875
00:29:44,960 --> 00:29:46,480
after making this this

876
00:29:46,480 --> 00:29:49,200
just raw binary i just concat this

877
00:29:49,200 --> 00:29:50,399
header file i took from this other

878
00:29:50,399 --> 00:29:53,840
binary and patch in the right sizes

879
00:29:53,840 --> 00:29:56,159
okay cool so we can now generate

880
00:29:56,159 --> 00:29:58,159
uh we can take c code and make proper

881
00:29:58,159 --> 00:30:00,399
executables for this device but what do

882
00:30:00,399 --> 00:30:02,880
we what do we call well

883
00:30:02,880 --> 00:30:03,760
uh

884
00:30:03,760 --> 00:30:05,039
we need to call some functionality

885
00:30:05,039 --> 00:30:06,480
that's in the kernel or we can call

886
00:30:06,480 --> 00:30:08,720
functionality that's in maybe the slip c

887
00:30:08,720 --> 00:30:10,399
equivalent but for some reason i

888
00:30:10,399 --> 00:30:11,919
couldn't get that to work

889
00:30:11,919 --> 00:30:13,360
maybe there's some initialization

890
00:30:13,360 --> 00:30:16,080
functionality i don't know but to me i

891
00:30:16,080 --> 00:30:17,840
was reversing the kernel code anyway so

892
00:30:17,840 --> 00:30:19,120
it was easier to

893
00:30:19,120 --> 00:30:20,640
just call syscalls right away and

894
00:30:20,640 --> 00:30:22,640
they're quite familiar so you have as i

895
00:30:22,640 --> 00:30:25,440
said open i think the cisco one

896
00:30:25,440 --> 00:30:27,120
read the cisco 2.

897
00:30:27,120 --> 00:30:29,120
yeah and it's just kind of what you

898
00:30:29,120 --> 00:30:30,559
would expect literally reading from the

899
00:30:30,559 --> 00:30:34,960
keypad is reading from slash dev console

900
00:30:34,960 --> 00:30:36,559
um yeah and there's also some public

901
00:30:36,559 --> 00:30:38,720
documentation of uh the functions in

902
00:30:38,720 --> 00:30:40,720
this cis.lib but this gives a really

903
00:30:40,720 --> 00:30:43,039
good hint about the underlying syscalls

904
00:30:43,039 --> 00:30:44,000
so

905
00:30:44,000 --> 00:30:47,200
that was quite useful as well

906
00:30:47,760 --> 00:30:49,360
so now it was really a matter of

907
00:30:49,360 --> 00:30:51,200
engineering so as you can see here this

908
00:30:51,200 --> 00:30:53,120
is some hacky c code well i guess it's

909
00:30:53,120 --> 00:30:55,360
the proper the only way to do it but

910
00:30:55,360 --> 00:30:56,960
to actually do this syscall here you can

911
00:30:56,960 --> 00:30:58,399
see the syscall

912
00:30:58,399 --> 00:31:00,880
instruction but i wrote these wrapper

913
00:31:00,880 --> 00:31:02,559
functions for all of the syscalls i

914
00:31:02,559 --> 00:31:03,919
might need such that i could just call

915
00:31:03,919 --> 00:31:04,799
it from

916
00:31:04,799 --> 00:31:08,000
c or c plus plus code

917
00:31:08,880 --> 00:31:10,320
so now we can actually start porting

918
00:31:10,320 --> 00:31:11,679
doom

919
00:31:11,679 --> 00:31:13,279
and this is where i want to give a demo

920
00:31:13,279 --> 00:31:17,279
so let's see if everything works well

921
00:31:17,279 --> 00:31:19,440
let me quickly show my terminal and then

922
00:31:19,440 --> 00:31:22,080
afterwards we can switch to the video

923
00:31:22,080 --> 00:31:24,880
so the first thing i will do

924
00:31:24,880 --> 00:31:27,360
is uh start my script which uses this

925
00:31:27,360 --> 00:31:29,600
python xdl implementation i talked about

926
00:31:29,600 --> 00:31:31,360
earlier

927
00:31:31,360 --> 00:31:33,039
and this script

928
00:31:33,039 --> 00:31:35,760
i can zoom in more

929
00:31:35,760 --> 00:31:38,000
this script will

930
00:31:38,000 --> 00:31:40,240
do two things so it'll send over the

931
00:31:40,240 --> 00:31:41,279
actual

932
00:31:41,279 --> 00:31:43,120
application so this this executable with

933
00:31:43,120 --> 00:31:45,279
the doom code inside

934
00:31:45,279 --> 00:31:47,279
and just just normal there's there's

935
00:31:47,279 --> 00:31:48,880
nothing uh there's no exploit there

936
00:31:48,880 --> 00:31:49,919
we're just using the download

937
00:31:49,919 --> 00:31:51,440
functionality

938
00:31:51,440 --> 00:31:53,919
and then after that's done it'll kind of

939
00:31:53,919 --> 00:31:56,640
uh pauses and when i

940
00:31:56,640 --> 00:31:58,880
tell it to basically it'll

941
00:31:58,880 --> 00:32:00,720
assume that we're in this secret

942
00:32:00,720 --> 00:32:02,320
bootloader mode and it'll send this

943
00:32:02,320 --> 00:32:03,519
payload

944
00:32:03,519 --> 00:32:04,720
and in the meantime we will have to

945
00:32:04,720 --> 00:32:06,640
enter this bootloader mode so i will

946
00:32:06,640 --> 00:32:08,399
trigger it

947
00:32:08,399 --> 00:32:10,799
now it's just waiting for

948
00:32:10,799 --> 00:32:12,399
the download mode to start so if we can

949
00:32:12,399 --> 00:32:16,000
switch to this camera ah perfect so i

950
00:32:16,000 --> 00:32:18,159
kind of have a setup here to

951
00:32:18,159 --> 00:32:20,159
explain the situation so

952
00:32:20,159 --> 00:32:23,120
uh this is the dongle that exposes like

953
00:32:23,120 --> 00:32:25,360
uh much next actual ethernet port that

954
00:32:25,360 --> 00:32:27,519
you can't see this is just a serial port

955
00:32:27,519 --> 00:32:31,279
so it's rj45 but it's just uh serial

956
00:32:31,279 --> 00:32:34,320
and then fs02 usb adapter here and a

957
00:32:34,320 --> 00:32:35,840
button here that's the main reason why

958
00:32:35,840 --> 00:32:37,679
this is all set up because i need to cut

959
00:32:37,679 --> 00:32:39,120
the power because this thing doesn't

960
00:32:39,120 --> 00:32:40,480
have an off button

961
00:32:40,480 --> 00:32:42,720
so i will turn it on now see my script

962
00:32:42,720 --> 00:32:45,440
is still running yeah

963
00:32:45,440 --> 00:32:46,960
uh you should probably be able to see

964
00:32:46,960 --> 00:32:49,120
the screen in a bit

965
00:32:49,120 --> 00:32:51,039
yeah so this is it just normally turning

966
00:32:51,039 --> 00:32:53,039
on and my script triggered so you can

967
00:32:53,039 --> 00:32:54,080
see here

968
00:32:54,080 --> 00:32:55,760
uh the cool thing is about this xdl

969
00:32:55,760 --> 00:32:57,120
protocol there's also a command for

970
00:32:57,120 --> 00:32:58,640
sending a setting a message on the

971
00:32:58,640 --> 00:33:00,880
screen and with some form feeds and

972
00:33:00,880 --> 00:33:02,480
backslash r and stuff you can actually

973
00:33:02,480 --> 00:33:03,919
delete all of the normal text that's on

974
00:33:03,919 --> 00:33:05,600
the screen and do some nice ascii

975
00:33:05,600 --> 00:33:10,000
animation so i made a progress bar

976
00:33:10,000 --> 00:33:11,440
so this is just after every little chunk

977
00:33:11,440 --> 00:33:12,720
of the program it sends it sets a new

978
00:33:12,720 --> 00:33:15,600
message on the screen

979
00:33:22,640 --> 00:33:25,840
okay now we're just restarting

980
00:33:31,840 --> 00:33:33,679
and then once it's restarted we should

981
00:33:33,679 --> 00:33:34,000
see

982
00:33:34,000 --> 00:33:36,240
[Music]

983
00:33:36,240 --> 00:33:38,960
not doom yet but

984
00:33:38,960 --> 00:33:40,880
this message that i had in the slice

985
00:33:40,880 --> 00:33:43,039
before so now we have i actually

986
00:33:43,039 --> 00:33:46,480
uploaded the binary and uh

987
00:33:46,480 --> 00:33:48,320
send over uh

988
00:33:48,320 --> 00:33:50,320
the or set this environment variable

989
00:33:50,320 --> 00:33:52,480
this go variable so it'll it actually

990
00:33:52,480 --> 00:33:54,720
found this go variable and tried to load

991
00:33:54,720 --> 00:33:56,000
the program but it figured out that it

992
00:33:56,000 --> 00:33:57,919
was not authenticated

993
00:33:57,919 --> 00:33:59,519
okay but this is what we have the

994
00:33:59,519 --> 00:34:02,720
exploit for so i will cut the power

995
00:34:02,720 --> 00:34:05,360
i will trigger the second stage or this

996
00:34:05,360 --> 00:34:07,519
the actual payload now this is a bit

997
00:34:07,519 --> 00:34:08,800
tricky as i have to hold the right

998
00:34:08,800 --> 00:34:10,480
buttons

999
00:34:10,480 --> 00:34:12,639
so it's uh one

1000
00:34:12,639 --> 00:34:16,800
two and or one five and nine sorry

1001
00:34:16,800 --> 00:34:18,879
never done this upside down yet

1002
00:34:18,879 --> 00:34:21,040
so turning it on now

1003
00:34:21,040 --> 00:34:23,839
and actually looking at my own screen

1004
00:34:23,839 --> 00:34:25,760
okay you can't see anything here because

1005
00:34:25,760 --> 00:34:28,000
the bootloader doesn't do any io

1006
00:34:28,000 --> 00:34:29,280
but now we're actually uploading the

1007
00:34:29,280 --> 00:34:31,119
payload

1008
00:34:31,119 --> 00:34:32,800
and now it's done so now we're running

1009
00:34:32,800 --> 00:34:34,719
the payload so this is now going through

1010
00:34:34,719 --> 00:34:37,199
all the stages i mentioned before

1011
00:34:37,199 --> 00:34:40,320
and uh the indicator that it's done is

1012
00:34:40,320 --> 00:34:43,040
when the the lcd turns on so this is

1013
00:34:43,040 --> 00:34:45,918
when uh yeah here we go so now we know

1014
00:34:45,918 --> 00:34:48,399
that it's done and actually my code

1015
00:34:48,399 --> 00:34:50,560
kind of freezes the operating system

1016
00:34:50,560 --> 00:34:52,239
because i didn't properly

1017
00:34:52,239 --> 00:34:53,040
uh

1018
00:34:53,040 --> 00:34:55,760
yeah my patch is a bit

1019
00:34:55,760 --> 00:34:57,920
messy but it doesn't really matter as

1020
00:34:57,920 --> 00:34:59,599
this signature file is now just stored

1021
00:34:59,599 --> 00:35:01,599
on the file system so we only need to do

1022
00:35:01,599 --> 00:35:03,359
this once

1023
00:35:03,359 --> 00:35:05,760
so now i'm just cutting the power again

1024
00:35:05,760 --> 00:35:07,200
and now if we turn it back on we just

1025
00:35:07,200 --> 00:35:08,880
boot it normally no weird key

1026
00:35:08,880 --> 00:35:11,520
combination

1027
00:35:14,880 --> 00:35:17,839
and it's a bit slow to boot

1028
00:35:25,280 --> 00:35:28,320
and here we go

1029
00:35:28,320 --> 00:35:29,980
doom so

1030
00:35:29,980 --> 00:35:38,079
[Applause]

1031
00:35:38,079 --> 00:35:41,440
let me get it the right orientation

1032
00:35:41,440 --> 00:35:42,880
okay so it's actually already going to

1033
00:35:42,880 --> 00:35:44,720
the demo

1034
00:35:44,720 --> 00:35:46,800
but we can actually

1035
00:35:46,800 --> 00:35:48,079
start it

1036
00:35:48,079 --> 00:35:50,240
so yeah the screen orientation is a bit

1037
00:35:50,240 --> 00:35:51,440
annoying so i actually mapped the

1038
00:35:51,440 --> 00:35:53,599
buttons that way so it makes sense but

1039
00:35:53,599 --> 00:35:54,800
not really if you're on the other side

1040
00:35:54,800 --> 00:35:57,599
of the screen but i will try my best

1041
00:35:57,599 --> 00:35:59,359
so

1042
00:35:59,359 --> 00:36:02,000
we can start a new game let's do

1043
00:36:02,000 --> 00:36:03,200
easy

1044
00:36:03,200 --> 00:36:04,560
or medium

1045
00:36:04,560 --> 00:36:06,640
and then

1046
00:36:06,640 --> 00:36:08,879
wait

1047
00:36:09,680 --> 00:36:11,520
okay so we can turn left we can turn

1048
00:36:11,520 --> 00:36:12,640
right

1049
00:36:12,640 --> 00:36:14,560
we can

1050
00:36:14,560 --> 00:36:16,079
wait what is shooting

1051
00:36:16,079 --> 00:36:17,520
we can shoot

1052
00:36:17,520 --> 00:36:19,760
you get the idea

1053
00:36:19,760 --> 00:36:21,040
okay

1054
00:36:21,040 --> 00:36:22,480
that's doom

1055
00:36:22,480 --> 00:36:24,960
and then there's another

1056
00:36:24,960 --> 00:36:26,240
demo i wanted to give and i think we

1057
00:36:26,240 --> 00:36:29,839
have some time left so let's do that

1058
00:36:29,839 --> 00:36:30,880
and this

1059
00:36:30,880 --> 00:36:33,200
let me put this aside

1060
00:36:33,200 --> 00:36:35,680
so as i said we can also

1061
00:36:35,680 --> 00:36:37,119
do whatever we

1062
00:36:37,119 --> 00:36:38,640
want right while doing why not just some

1063
00:36:38,640 --> 00:36:40,160
other games so i actually ported some

1064
00:36:40,160 --> 00:36:41,599
other stuff

1065
00:36:41,599 --> 00:36:44,720
there's a couple more of these

1066
00:36:47,760 --> 00:36:51,280
all goes well they should have power

1067
00:36:52,560 --> 00:36:55,839
yeah let's kind of

1068
00:36:56,880 --> 00:36:58,240
so

1069
00:36:58,240 --> 00:37:00,240
one of these is running a game boy

1070
00:37:00,240 --> 00:37:02,320
emulator one of these is running a game

1071
00:37:02,320 --> 00:37:05,440
of live implementation

1072
00:37:06,240 --> 00:37:09,520
let's wait for them both to boot

1073
00:37:09,520 --> 00:37:11,680
here you can see the game boy emulator i

1074
00:37:11,680 --> 00:37:13,760
didn't really do proper display scaling

1075
00:37:13,760 --> 00:37:15,680
yet as the uh

1076
00:37:15,680 --> 00:37:17,520
resolution is not a proper multiple of

1077
00:37:17,520 --> 00:37:20,160
the i think 144 pixel width of a game

1078
00:37:20,160 --> 00:37:23,839
boy emulator but

1079
00:37:24,480 --> 00:37:26,560
yeah so there's no sound sadly it does

1080
00:37:26,560 --> 00:37:29,839
have a beeper it's kind of a pc speaker

1081
00:37:29,839 --> 00:37:31,359
i guess you could map some of the game

1082
00:37:31,359 --> 00:37:34,560
boy sounds to that but yeah

1083
00:37:34,560 --> 00:37:37,920
exercise for the watcher

1084
00:37:37,920 --> 00:37:38,800
uh

1085
00:37:38,800 --> 00:37:41,040
what is my key mapping

1086
00:37:41,040 --> 00:37:42,720
well i guess you can believe that it

1087
00:37:42,720 --> 00:37:43,760
works

1088
00:37:43,760 --> 00:37:45,680
and then here i this is actually my own

1089
00:37:45,680 --> 00:37:47,520
code i kind of promised running your own

1090
00:37:47,520 --> 00:37:49,680
code so i wrote some of my own code this

1091
00:37:49,680 --> 00:37:51,520
is using the touchscreen

1092
00:37:51,520 --> 00:37:52,640
to

1093
00:37:52,640 --> 00:37:55,520
play quote unquote game of life

1094
00:37:55,520 --> 00:37:58,320
so i can run it

1095
00:37:59,040 --> 00:38:00,640
it's just game of life

1096
00:38:00,640 --> 00:38:02,400
you can pause it again

1097
00:38:02,400 --> 00:38:05,839
do some more stuff here

1098
00:38:08,079 --> 00:38:09,920
and well the rest is just up to your

1099
00:38:09,920 --> 00:38:11,520
imagination

1100
00:38:11,520 --> 00:38:15,960
yeah this is where i was out of time

1101
00:38:24,960 --> 00:38:27,280
thank you

1102
00:38:30,400 --> 00:38:31,839
are there any questions from the

1103
00:38:31,839 --> 00:38:33,839
audience if there are please line up at

1104
00:38:33,839 --> 00:38:36,000
the microphones in the middle and we'll

1105
00:38:36,000 --> 00:38:37,839
take your questions

1106
00:38:37,839 --> 00:38:39,680
unfortunately we do not have any

1107
00:38:39,680 --> 00:38:41,920
questions from the interwebs

1108
00:38:41,920 --> 00:38:45,280
so anyone in the room interested in any

1109
00:38:45,280 --> 00:38:47,920
details of these wonderful hacks i have

1110
00:38:47,920 --> 00:38:49,760
a bonus if there are no questions

1111
00:38:49,760 --> 00:38:53,119
we can switch back to the camera

1112
00:38:56,880 --> 00:38:58,960
could we get the camera back please

1113
00:38:58,960 --> 00:39:01,839
the suspense

1114
00:39:03,040 --> 00:39:06,160
give the calling a second

1115
00:39:06,240 --> 00:39:07,440
ah cool

1116
00:39:07,440 --> 00:39:08,560
okay so

1117
00:39:08,560 --> 00:39:10,720
i said it's a whole family of fairphone

1118
00:39:10,720 --> 00:39:12,720
devices well this family is actually

1119
00:39:12,720 --> 00:39:14,240
quite oh wow there's a lot of

1120
00:39:14,240 --> 00:39:16,160
fingerprints sorry about that

1121
00:39:16,160 --> 00:39:17,920
this family

1122
00:39:17,920 --> 00:39:19,920
kind of reaches to quite modern devices

1123
00:39:19,920 --> 00:39:22,320
so i have this device as well it's a

1124
00:39:22,320 --> 00:39:24,160
mobile one so this has a battery pack

1125
00:39:24,160 --> 00:39:26,400
inside turns out i will actually boot it

1126
00:39:26,400 --> 00:39:27,440
now

1127
00:39:27,440 --> 00:39:31,119
it's running the same bootloader

1128
00:39:38,640 --> 00:39:40,560
it's just as slow

1129
00:39:40,560 --> 00:39:41,599
and

1130
00:39:41,599 --> 00:39:43,119
the good thing is they fixed the screen

1131
00:39:43,119 --> 00:39:45,839
orientation

1132
00:39:46,360 --> 00:39:49,479
[Applause]

1133
00:39:49,680 --> 00:39:52,079
yeah they didn't they made the the

1134
00:39:52,079 --> 00:39:54,480
viewing angle worse though

1135
00:39:54,480 --> 00:39:57,839
but you get the idea

1136
00:40:02,640 --> 00:40:03,680
yeah so

1137
00:40:03,680 --> 00:40:05,359
i would say for sure if you're

1138
00:40:05,359 --> 00:40:07,119
interested actually playing with this i

1139
00:40:07,119 --> 00:40:08,400
will leave some of this stuff here and

1140
00:40:08,400 --> 00:40:09,839
we can see afterwards i also have one

1141
00:40:09,839 --> 00:40:12,000
device

1142
00:40:12,000 --> 00:40:13,280
here that is

1143
00:40:13,280 --> 00:40:14,720
kind of taken apart if you want to see

1144
00:40:14,720 --> 00:40:17,359
the insights

1145
00:40:19,920 --> 00:40:23,599
right any more questions any questions

1146
00:40:23,599 --> 00:40:25,920
while you think about those uh please do

1147
00:40:25,920 --> 00:40:28,319
not go down to the bar and hack the

1148
00:40:28,319 --> 00:40:30,480
payment this place there to play

1149
00:40:30,480 --> 00:40:33,040
so i checked with the the agent people

1150
00:40:33,040 --> 00:40:35,040
uh even though i think it's not actually

1151
00:40:35,040 --> 00:40:37,520
them uh responsible for this part but

1152
00:40:37,520 --> 00:40:39,440
the bootloader should be up to date so

1153
00:40:39,440 --> 00:40:42,560
right we have a question please

1154
00:40:42,560 --> 00:40:45,839
have you looked at the nfc interface

1155
00:40:45,839 --> 00:40:46,720
um

1156
00:40:46,720 --> 00:40:48,640
well not really but this is for sure if

1157
00:40:48,640 --> 00:40:49,920
you're interested in messing with smart

1158
00:40:49,920 --> 00:40:51,680
cards this is the perfect device for it

1159
00:40:51,680 --> 00:40:52,560
i'm not sure if there's anything

1160
00:40:52,560 --> 00:40:53,920
specific

1161
00:40:53,920 --> 00:40:56,079
uh about it but

1162
00:40:56,079 --> 00:40:57,920
yeah so there's some functionality in

1163
00:40:57,920 --> 00:41:00,640
the kernel i guess what you're you're

1164
00:41:00,640 --> 00:41:03,119
getting at uh that does some of the the

1165
00:41:03,119 --> 00:41:04,560
low level logic in the smart card

1166
00:41:04,560 --> 00:41:06,240
interface that the contact and the nfc

1167
00:41:06,240 --> 00:41:07,040
one

1168
00:41:07,040 --> 00:41:08,720
i guess this will also be interested

1169
00:41:08,720 --> 00:41:10,800
interesting to audit uh

1170
00:41:10,800 --> 00:41:12,400
for sure yeah but no i haven't looked

1171
00:41:12,400 --> 00:41:14,720
into it

1172
00:41:15,440 --> 00:41:18,480
another question thank you very much

1173
00:41:18,480 --> 00:41:20,720
yes have you taken a look at the wrong

1174
00:41:20,720 --> 00:41:22,880
bootloader so many devices have several

1175
00:41:22,880 --> 00:41:24,960
stages of bootloader the first

1176
00:41:24,960 --> 00:41:27,359
bootloader being in rom and b and

1177
00:41:27,359 --> 00:41:30,000
unpatchable and some later layers are

1178
00:41:30,000 --> 00:41:31,680
can be patched with an update but the

1179
00:41:31,680 --> 00:41:33,520
first layer can't be patched because it

1180
00:41:33,520 --> 00:41:36,000
is physically calm and you can't change

1181
00:41:36,000 --> 00:41:38,480
it without replacing the device

1182
00:41:38,480 --> 00:41:39,760
yeah so i

1183
00:41:39,760 --> 00:41:41,760
only looked at this bootloader and only

1184
00:41:41,760 --> 00:41:43,119
because these guys from the devcon

1185
00:41:43,119 --> 00:41:44,960
payment village found this vulnerability

1186
00:41:44,960 --> 00:41:48,960
in this second stage bootloader

1187
00:41:48,960 --> 00:41:50,800
actually i think this is the third stage

1188
00:41:50,800 --> 00:41:52,720
but i'm assuming the asian spi stands

1189
00:41:52,720 --> 00:41:55,040
for second stage um

1190
00:41:55,040 --> 00:41:56,880
no so i did not audit anything besides

1191
00:41:56,880 --> 00:41:58,560
that so for sure if you find a

1192
00:41:58,560 --> 00:42:00,640
vulnerability in the actual rom code

1193
00:42:00,640 --> 00:42:03,680
yeah that's a much bigger issue

1194
00:42:03,680 --> 00:42:05,760
with these devices

1195
00:42:05,760 --> 00:42:07,520
do we have any questions from the

1196
00:42:07,520 --> 00:42:09,599
interwebs

1197
00:42:09,599 --> 00:42:12,400
no okay any further questions from the

1198
00:42:12,400 --> 00:42:13,599
audience

1199
00:42:13,599 --> 00:42:14,839
last

1200
00:42:14,839 --> 00:42:17,200
chance anybody

1201
00:42:17,200 --> 00:42:20,480
no well if not please enjoy the evening

1202
00:42:20,480 --> 00:42:22,640
and before you go give a very warm

1203
00:42:22,640 --> 00:42:25,200
applause to thomas rinsmar and payment

1204
00:42:25,200 --> 00:42:29,960
terminals as general puzzle gaming

1205
00:42:30,790 --> 00:42:37,590
[Applause]

1206
00:42:41,119 --> 00:42:43,200
you

