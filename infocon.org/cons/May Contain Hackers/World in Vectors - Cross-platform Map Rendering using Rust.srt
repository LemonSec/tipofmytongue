1
00:00:01,280 --> 00:00:12,559
[Music]

2
00:00:15,120 --> 00:00:19,119
i'm happy to talk about maps today

3
00:00:19,119 --> 00:00:20,480
so

4
00:00:20,480 --> 00:00:22,960
imagine being able to fly from outer

5
00:00:22,960 --> 00:00:24,240
space

6
00:00:24,240 --> 00:00:26,160
to any place

7
00:00:26,160 --> 00:00:27,199
on earth

8
00:00:27,199 --> 00:00:29,119
this idea was kind of groundbreaking in

9
00:00:29,119 --> 00:00:31,679
the 90s there was no google maps there

10
00:00:31,679 --> 00:00:34,160
was no google earth but there was terror

11
00:00:34,160 --> 00:00:36,079
vision

12
00:00:36,079 --> 00:00:38,000
so terra vision was basically

13
00:00:38,000 --> 00:00:39,760
the first

14
00:00:39,760 --> 00:00:42,640
kind of maps navigation system which was

15
00:00:42,640 --> 00:00:45,120
fully digital

16
00:00:45,120 --> 00:00:46,320
and

17
00:00:46,320 --> 00:00:49,280
so at least for myself when i first used

18
00:00:49,280 --> 00:00:52,640
google earth when i was a child

19
00:00:52,640 --> 00:00:54,879
it was quite cool i think they even had

20
00:00:54,879 --> 00:00:56,160
some flight

21
00:00:56,160 --> 00:00:58,559
simulation in it

22
00:00:58,559 --> 00:01:01,600
and yeah it's pretty normal today

23
00:01:01,600 --> 00:01:04,879
but it all started with a terravision

24
00:01:04,879 --> 00:01:07,920
which actually was developed in germany

25
00:01:07,920 --> 00:01:11,360
in the start of the 90s

26
00:01:11,360 --> 00:01:13,920
and it was the first

27
00:01:13,920 --> 00:01:16,159
yeah virtual representation of the world

28
00:01:16,159 --> 00:01:18,720
it was already networked um it allowed

29
00:01:18,720 --> 00:01:20,880
to you that allowed you to browse the

30
00:01:20,880 --> 00:01:22,640
world um

31
00:01:22,640 --> 00:01:23,680
yeah

32
00:01:23,680 --> 00:01:27,680
all the satellite images of the world um

33
00:01:27,680 --> 00:01:30,799
and here on the right you can see um

34
00:01:30,799 --> 00:01:33,360
one so you maybe know this person he's

35
00:01:33,360 --> 00:01:35,439
also related to the ccc

36
00:01:35,439 --> 00:01:37,759
um and yes

37
00:01:37,759 --> 00:01:40,720
all started in germany sadly

38
00:01:40,720 --> 00:01:42,799
the actual source code is not really

39
00:01:42,799 --> 00:01:44,799
available anymore or i'm actually not

40
00:01:44,799 --> 00:01:47,360
sure i wasn't able to find it so if you

41
00:01:47,360 --> 00:01:49,680
know television and you know how to run

42
00:01:49,680 --> 00:01:51,280
this i would be

43
00:01:51,280 --> 00:01:54,840
happy to know about

44
00:01:55,600 --> 00:01:56,479
so

45
00:01:56,479 --> 00:01:58,240
short disclaimer about myself i'm not

46
00:01:58,240 --> 00:02:01,040
really an expert in all of this i just

47
00:02:01,040 --> 00:02:03,439
had a lot of free time

48
00:02:03,439 --> 00:02:06,320
so i'm basically a software engineer but

49
00:02:06,320 --> 00:02:10,080
i'm not really geo-informatics guy or

50
00:02:10,080 --> 00:02:12,000
graphic programming or even a rust guy i

51
00:02:12,000 --> 00:02:14,720
had kind of just started

52
00:02:14,720 --> 00:02:16,800
um to learn all of this with this

53
00:02:16,800 --> 00:02:17,840
project

54
00:02:17,840 --> 00:02:19,680
um so in the beginning i want to talk

55
00:02:19,680 --> 00:02:22,000
about what actually a vector map is and

56
00:02:22,000 --> 00:02:25,040
later i want to present map libre rs

57
00:02:25,040 --> 00:02:27,200
which is this renderer i've been working

58
00:02:27,200 --> 00:02:29,359
on

59
00:02:29,599 --> 00:02:31,920
so this is a vector map

60
00:02:31,920 --> 00:02:34,319
of paris and the cool thing about vector

61
00:02:34,319 --> 00:02:38,080
maps is that you have like a very um

62
00:02:38,080 --> 00:02:40,720
smooth zooming experience you notice

63
00:02:40,720 --> 00:02:43,200
from google maps and it's very normal to

64
00:02:43,200 --> 00:02:45,519
have these maps today

65
00:02:45,519 --> 00:02:47,120
and the thing about them is it's all

66
00:02:47,120 --> 00:02:48,879
rendered on a client

67
00:02:48,879 --> 00:02:51,200
um so

68
00:02:51,200 --> 00:02:54,319
you can actually style it on the client

69
00:02:54,319 --> 00:02:56,239
so this is kind of it's the same data

70
00:02:56,239 --> 00:02:58,400
but just style differently on the client

71
00:02:58,400 --> 00:02:59,440
so

72
00:02:59,440 --> 00:03:02,319
you don't have to prepare different data

73
00:03:02,319 --> 00:03:04,400
you just style it differently and you

74
00:03:04,400 --> 00:03:07,200
maybe also notice from car navigation

75
00:03:07,200 --> 00:03:09,360
where you dynamically switch from light

76
00:03:09,360 --> 00:03:11,920
mode to dark mode

77
00:03:11,920 --> 00:03:13,599
on the other side there's the raster

78
00:03:13,599 --> 00:03:15,840
tiles

79
00:03:15,840 --> 00:03:18,400
and they have different benefits

80
00:03:18,400 --> 00:03:20,800
um but they feel sometimes a little bit

81
00:03:20,800 --> 00:03:23,680
clunky so you don't have like a smooth

82
00:03:23,680 --> 00:03:26,879
zooming experience you have very harsh

83
00:03:26,879 --> 00:03:28,159
levels

84
00:03:28,159 --> 00:03:32,720
um but you also have advantages so

85
00:03:32,720 --> 00:03:34,480
on the one hand vector ties are very

86
00:03:34,480 --> 00:03:36,799
small they're very space efficient they

87
00:03:36,799 --> 00:03:40,239
allow this powerful customization

88
00:03:40,239 --> 00:03:41,920
they offer this

89
00:03:41,920 --> 00:03:44,239
smooth zooming experience

90
00:03:44,239 --> 00:03:46,480
but they require some hardware on the

91
00:03:46,480 --> 00:03:48,400
client end

92
00:03:48,400 --> 00:03:50,159
which is kind of not a problem anymore

93
00:03:50,159 --> 00:03:51,360
today

94
00:03:51,360 --> 00:03:53,439
because we all have pretty powerful

95
00:03:53,439 --> 00:03:55,680
smartphones um

96
00:03:55,680 --> 00:03:57,760
ruster ties yeah you need them for

97
00:03:57,760 --> 00:04:00,480
satellite imagery you cannot have like a

98
00:04:00,480 --> 00:04:02,959
very smooth experience with satellite

99
00:04:02,959 --> 00:04:05,360
images as you would need infinitely man

100
00:04:05,360 --> 00:04:07,040
infinitely many

101
00:04:07,040 --> 00:04:09,280
um they're very cheap on the client side

102
00:04:09,280 --> 00:04:11,439
it's just images

103
00:04:11,439 --> 00:04:13,200
but each tile is a little bit diff a

104
00:04:13,200 --> 00:04:15,839
little bit bigger

105
00:04:16,160 --> 00:04:18,959
so still there's a lot of data and we

106
00:04:18,959 --> 00:04:21,839
somehow need to manage this data so the

107
00:04:21,839 --> 00:04:23,680
idea is that we break the world down

108
00:04:23,680 --> 00:04:25,840
into tiles

109
00:04:25,840 --> 00:04:29,840
each child has a coordinate

110
00:04:29,919 --> 00:04:31,280
and

111
00:04:31,280 --> 00:04:32,960
here i want to quickly explain how this

112
00:04:32,960 --> 00:04:34,479
is working

113
00:04:34,479 --> 00:04:36,560
so basically we have on the left side a

114
00:04:36,560 --> 00:04:38,960
world so this is just a data set with

115
00:04:38,960 --> 00:04:41,520
longitude latitude

116
00:04:41,520 --> 00:04:43,759
and we are projecting this onto some 2d

117
00:04:43,759 --> 00:04:45,440
surface

118
00:04:45,440 --> 00:04:48,080
so right here you can see

119
00:04:48,080 --> 00:04:49,759
the world on

120
00:04:49,759 --> 00:04:51,280
zoom level was

121
00:04:51,280 --> 00:04:53,360
four i think

122
00:04:53,360 --> 00:04:55,280
or two

123
00:04:55,280 --> 00:04:57,199
so the idea is that we are protecting it

124
00:04:57,199 --> 00:04:59,759
onto a 2d surface

125
00:04:59,759 --> 00:05:02,000
and

126
00:05:02,639 --> 00:05:04,639
then we have different zoom levels so on

127
00:05:04,639 --> 00:05:08,000
zoom level 0 we just have a single tile

128
00:05:08,000 --> 00:05:09,840
which contains the world in a very

129
00:05:09,840 --> 00:05:11,840
reduced

130
00:05:11,840 --> 00:05:14,720
way so we just have

131
00:05:14,720 --> 00:05:17,199
the reduced world and if we zoom now

132
00:05:17,199 --> 00:05:18,320
once

133
00:05:18,320 --> 00:05:20,080
into the world we are reaching zoom

134
00:05:20,080 --> 00:05:22,400
layer one where we have two to the power

135
00:05:22,400 --> 00:05:24,560
of one tiles

136
00:05:24,560 --> 00:05:27,280
in each x and y direction

137
00:05:27,280 --> 00:05:29,360
and as you zoom in you get more and more

138
00:05:29,360 --> 00:05:31,120
detail

139
00:05:31,120 --> 00:05:32,720
and basically

140
00:05:32,720 --> 00:05:35,120
yeah it's it's getting a lot of ties if

141
00:05:35,120 --> 00:05:36,800
you zoom in

142
00:05:36,800 --> 00:05:37,680
but

143
00:05:37,680 --> 00:05:40,320
this is the way how we manage this uh

144
00:05:40,320 --> 00:05:42,160
amount of data

145
00:05:42,160 --> 00:05:44,400
um each vector tile is basically just an

146
00:05:44,400 --> 00:05:47,680
svg so um there are polygons there are

147
00:05:47,680 --> 00:05:50,800
lines polygons with holes

148
00:05:50,800 --> 00:05:52,639
and

149
00:05:52,639 --> 00:05:54,240
that's basically what a vector title is

150
00:05:54,240 --> 00:05:56,240
um and

151
00:05:56,240 --> 00:05:58,639
so i just said that it's basically an

152
00:05:58,639 --> 00:06:01,280
svg and how we can think about this is

153
00:06:01,280 --> 00:06:03,440
that we are having a pen

154
00:06:03,440 --> 00:06:06,400
and we are drawing each tile by moving

155
00:06:06,400 --> 00:06:08,800
our pen so for example initially we move

156
00:06:08,800 --> 00:06:12,240
our pen to content one and two

157
00:06:12,240 --> 00:06:13,759
and then we're starting to draw

158
00:06:13,759 --> 00:06:16,319
relatively to the previous location so

159
00:06:16,319 --> 00:06:18,880
that way we kind of can just draw a

160
00:06:18,880 --> 00:06:20,800
polygon

161
00:06:20,800 --> 00:06:23,520
and by doing the same in the opposite

162
00:06:23,520 --> 00:06:25,759
direction we can cut a hole into

163
00:06:25,759 --> 00:06:27,520
polygons

164
00:06:27,520 --> 00:06:29,360
so that's basically what a vector tile

165
00:06:29,360 --> 00:06:30,080
is

166
00:06:30,080 --> 00:06:31,360
it's just

167
00:06:31,360 --> 00:06:33,360
a whole bunch of svgs

168
00:06:33,360 --> 00:06:35,759
with layout on top of each other with

169
00:06:35,759 --> 00:06:37,840
some text and some further information

170
00:06:37,840 --> 00:06:40,400
for each feature

171
00:06:40,400 --> 00:06:43,919
so that way we just have a single

172
00:06:43,919 --> 00:06:46,080
tile

173
00:06:46,080 --> 00:06:48,880
so now to work on this data we somehow

174
00:06:48,880 --> 00:06:50,800
have to send it to the gpu

175
00:06:50,800 --> 00:06:54,479
um and gpus only work with triangles so

176
00:06:54,479 --> 00:06:56,639
we somehow have to create a mesh out of

177
00:06:56,639 --> 00:06:57,759
this

178
00:06:57,759 --> 00:06:58,960
um

179
00:06:58,960 --> 00:07:00,400
out of this tile

180
00:07:00,400 --> 00:07:02,479
and they're fancy algorithms for for

181
00:07:02,479 --> 00:07:04,960
this in this example i just drew it by

182
00:07:04,960 --> 00:07:05,919
hand

183
00:07:05,919 --> 00:07:07,120
um

184
00:07:07,120 --> 00:07:10,080
and yes this term originally the term

185
00:07:10,080 --> 00:07:12,560
tessellation comes from mosaics

186
00:07:12,560 --> 00:07:15,680
so it's just a way to make triangles out

187
00:07:15,680 --> 00:07:16,880
of any

188
00:07:16,880 --> 00:07:19,199
geometric shapes

189
00:07:19,199 --> 00:07:21,450
except circles

190
00:07:21,450 --> 00:07:22,960
[Music]

191
00:07:22,960 --> 00:07:25,039
so

192
00:07:25,039 --> 00:07:28,319
we have a visualization pipeline in the

193
00:07:28,319 --> 00:07:29,599
renderer

194
00:07:29,599 --> 00:07:32,800
we usually start off with some big data

195
00:07:32,800 --> 00:07:34,400
sets for example the openstreetmap

196
00:07:34,400 --> 00:07:37,680
dataset which is basically one file and

197
00:07:37,680 --> 00:07:39,919
it's about 60 gigabytes if it's

198
00:07:39,919 --> 00:07:41,599
compressed

199
00:07:41,599 --> 00:07:44,560
and in this preparation pipeline which

200
00:07:44,560 --> 00:07:46,160
is not happening on a client but on the

201
00:07:46,160 --> 00:07:49,280
on the server is we're producing very

202
00:07:49,280 --> 00:07:52,960
small tiles from this big data set so

203
00:07:52,960 --> 00:07:55,599
that way we are creating a lot of files

204
00:07:55,599 --> 00:07:57,360
so many files that they're actually no

205
00:07:57,360 --> 00:07:59,120
longer fitting on an ordinary file

206
00:07:59,120 --> 00:08:00,080
system

207
00:08:00,080 --> 00:08:02,479
so suddenly you're reaching billions of

208
00:08:02,479 --> 00:08:05,280
files which are all very small

209
00:08:05,280 --> 00:08:08,080
such that it's easier to navigate them

210
00:08:08,080 --> 00:08:10,719
on a client

211
00:08:11,440 --> 00:08:13,520
so what we are doing is we are creating

212
00:08:13,520 --> 00:08:16,720
then these meshes out of the tiles um we

213
00:08:16,720 --> 00:08:19,680
are maybe extracting some geodet

214
00:08:19,680 --> 00:08:22,560
information and we are building index

215
00:08:22,560 --> 00:08:24,160
indices um

216
00:08:24,160 --> 00:08:26,240
where something is on the

217
00:08:26,240 --> 00:08:27,520
on the map

218
00:08:27,520 --> 00:08:29,840
um and we also extract for example text

219
00:08:29,840 --> 00:08:31,440
and metadata

220
00:08:31,440 --> 00:08:32,880
and all of this data can then be

221
00:08:32,880 --> 00:08:34,799
uploaded to the gpu

222
00:08:34,799 --> 00:08:35,760
um

223
00:08:35,760 --> 00:08:38,320
and the thing now with this

224
00:08:38,320 --> 00:08:40,799
vector tile rendering rendering is we

225
00:08:40,799 --> 00:08:42,559
have a map style and this basically

226
00:08:42,559 --> 00:08:46,000
defines how we want to present this data

227
00:08:46,000 --> 00:08:49,200
and so we basically have two inputs for

228
00:08:49,200 --> 00:08:51,760
for a map no on a high level

229
00:08:51,760 --> 00:08:53,360
the cool thing about this concept is

230
00:08:53,360 --> 00:08:55,760
that we can combine multiple data sets

231
00:08:55,760 --> 00:08:57,839
so for example if we have a data set

232
00:08:57,839 --> 00:09:00,240
about taxi stations and open street map

233
00:09:00,240 --> 00:09:03,360
data set we can just just layer them on

234
00:09:03,360 --> 00:09:05,760
top of each other

235
00:09:05,760 --> 00:09:07,760
defined by some style

236
00:09:07,760 --> 00:09:09,519
so that's just a rough idea how

237
00:09:09,519 --> 00:09:11,440
rendering works it's more or less the

238
00:09:11,440 --> 00:09:13,519
same probably on google maps

239
00:09:13,519 --> 00:09:15,600
it's how all of the vector tile

240
00:09:15,600 --> 00:09:19,440
rendering libraries work nowadays

241
00:09:19,519 --> 00:09:21,200
i want to present this project i've been

242
00:09:21,200 --> 00:09:24,560
working on it's called map library rs

243
00:09:24,560 --> 00:09:28,000
and it's a portable map renderer

244
00:09:28,000 --> 00:09:30,080
which tries to be performant

245
00:09:30,080 --> 00:09:30,959
um

246
00:09:30,959 --> 00:09:32,080
so

247
00:09:32,080 --> 00:09:34,320
there are a few problems right now

248
00:09:34,320 --> 00:09:37,120
and with map rendering one of them is

249
00:09:37,120 --> 00:09:39,519
most map rendering libraries require

250
00:09:39,519 --> 00:09:41,360
multiple code bases

251
00:09:41,360 --> 00:09:43,120
um in order to reach all the platforms

252
00:09:43,120 --> 00:09:44,800
so usually there's one in typescript or

253
00:09:44,800 --> 00:09:47,600
javascript and then there's one in c c

254
00:09:47,600 --> 00:09:48,480
plus

255
00:09:48,480 --> 00:09:51,200
um and this might be not a problem for a

256
00:09:51,200 --> 00:09:53,760
huge corporation but it's difficult to

257
00:09:53,760 --> 00:09:55,920
scale this an open source project and

258
00:09:55,920 --> 00:09:58,160
this is also one problem with which the

259
00:09:58,160 --> 00:10:02,560
map libra organization and currently is

260
00:10:02,560 --> 00:10:05,680
fighting with um also licensing is

261
00:10:05,680 --> 00:10:09,839
sometimes quite quite a problem in

262
00:10:09,839 --> 00:10:11,440
with map renderers

263
00:10:11,440 --> 00:10:14,399
some of them have been made proprietary

264
00:10:14,399 --> 00:10:16,560
previously they were open source

265
00:10:16,560 --> 00:10:18,800
um

266
00:10:18,880 --> 00:10:20,480
rs is just

267
00:10:20,480 --> 00:10:22,480
licensed under mit

268
00:10:22,480 --> 00:10:25,600
um and that's maybe my opinion in my

269
00:10:25,600 --> 00:10:28,000
opinion the map rendering state of the

270
00:10:28,000 --> 00:10:30,000
art has not changed a lot in the recent

271
00:10:30,000 --> 00:10:31,200
years

272
00:10:31,200 --> 00:10:34,000
there has been a lot of changes in

273
00:10:34,000 --> 00:10:35,839
around 2013

274
00:10:35,839 --> 00:10:37,680
but in the previous years there hasn't

275
00:10:37,680 --> 00:10:41,279
been a lot of changes

276
00:10:41,279 --> 00:10:43,120
all of this was made possible by a new

277
00:10:43,120 --> 00:10:44,480
web standard

278
00:10:44,480 --> 00:10:46,880
which is called web gpu you maybe know

279
00:10:46,880 --> 00:10:48,079
webgl

280
00:10:48,079 --> 00:10:50,720
and this will be the successor which

281
00:10:50,720 --> 00:10:54,160
will hopefully be stabilized or released

282
00:10:54,160 --> 00:10:56,399
in the next five years

283
00:10:56,399 --> 00:10:59,200
and web gpu is a cross-platform 3d

284
00:10:59,200 --> 00:11:00,959
graphics api

285
00:11:00,959 --> 00:11:03,839
it's quite modern compared to webgl

286
00:11:03,839 --> 00:11:06,480
and it targets browsers but it also

287
00:11:06,480 --> 00:11:08,320
works quite nicely on for example

288
00:11:08,320 --> 00:11:11,360
android or ios

289
00:11:13,120 --> 00:11:16,640
so this web gpu specification needs to

290
00:11:16,640 --> 00:11:18,480
be implemented somewhere and one

291
00:11:18,480 --> 00:11:21,279
implementation of it is called wgpu

292
00:11:21,279 --> 00:11:23,360
which you can see at the center which is

293
00:11:23,360 --> 00:11:26,079
a rust library and it's possible to

294
00:11:26,079 --> 00:11:28,079
compile

295
00:11:28,079 --> 00:11:31,200
libraries which uses wgpu or projects

296
00:11:31,200 --> 00:11:35,440
which use wgpu to web assembly

297
00:11:36,000 --> 00:11:38,240
that way we actually can reach quite a

298
00:11:38,240 --> 00:11:40,480
lot of different graphics apis for

299
00:11:40,480 --> 00:11:43,519
example there is opengl which is

300
00:11:43,519 --> 00:11:45,839
essential for linux

301
00:11:45,839 --> 00:11:48,079
and android for example it also runs on

302
00:11:48,079 --> 00:11:49,040
ios

303
00:11:49,040 --> 00:11:51,760
and there's vulcan which is especially

304
00:11:51,760 --> 00:11:54,720
known in linux as well there's webgl

305
00:11:54,720 --> 00:11:57,040
which is required in order to run in

306
00:11:57,040 --> 00:11:58,079
browsers

307
00:11:58,079 --> 00:12:01,200
there's directx which is

308
00:12:01,200 --> 00:12:03,519
very important for windows support

309
00:12:03,519 --> 00:12:05,120
and there's also metal which is

310
00:12:05,120 --> 00:12:08,720
essential to run on ios and mac os

311
00:12:08,720 --> 00:12:13,279
and there's a newcomer which is web gpu

312
00:12:13,680 --> 00:12:14,560
so

313
00:12:14,560 --> 00:12:16,240
the architecture of the renderer is

314
00:12:16,240 --> 00:12:17,760
basically that we have the application

315
00:12:17,760 --> 00:12:18,880
at the top

316
00:12:18,880 --> 00:12:20,800
which uses wgpu

317
00:12:20,800 --> 00:12:22,800
and depending on the target we're trying

318
00:12:22,800 --> 00:12:24,480
to reach so whether we want to reach a

319
00:12:24,480 --> 00:12:25,440
native

320
00:12:25,440 --> 00:12:28,240
application which runs on your desktop

321
00:12:28,240 --> 00:12:31,120
or we want to reach a web app or a

322
00:12:31,120 --> 00:12:34,880
non-web application which is for example

323
00:12:34,880 --> 00:12:37,120
dino it's a runtime for javascript

324
00:12:37,120 --> 00:12:39,680
comparable to node.js

325
00:12:39,680 --> 00:12:40,720
and

326
00:12:40,720 --> 00:12:42,480
we first select target which we want to

327
00:12:42,480 --> 00:12:44,320
reach and by doing that we are

328
00:12:44,320 --> 00:12:46,800
determining the way

329
00:12:46,800 --> 00:12:49,200
how we reach the low level graphics apis

330
00:12:49,200 --> 00:12:51,360
for each operating system sometimes

331
00:12:51,360 --> 00:12:52,399
we're going through a hardware

332
00:12:52,399 --> 00:12:54,560
abstraction layer which which is a

333
00:12:54,560 --> 00:12:56,560
little bit performance costly

334
00:12:56,560 --> 00:12:58,560
um but for example if you're running in

335
00:12:58,560 --> 00:13:00,959
a modern browser or browser in three

336
00:13:00,959 --> 00:13:02,160
years

337
00:13:02,160 --> 00:13:03,600
we can skip this hardware abstraction

338
00:13:03,600 --> 00:13:07,580
layer and directly go to web gpu

339
00:13:07,580 --> 00:13:08,880
[Music]

340
00:13:08,880 --> 00:13:11,200
so why rust

341
00:13:11,200 --> 00:13:12,880
it's not only because it's a great

342
00:13:12,880 --> 00:13:14,079
language

343
00:13:14,079 --> 00:13:15,839
it's also because it's a systems

344
00:13:15,839 --> 00:13:18,720
programming language and

345
00:13:18,720 --> 00:13:21,519
programming graphics

346
00:13:21,519 --> 00:13:23,440
basically requires a systems programming

347
00:13:23,440 --> 00:13:25,760
language it's just much more convenient

348
00:13:25,760 --> 00:13:27,600
to program in a systems programming

349
00:13:27,600 --> 00:13:28,639
language

350
00:13:28,639 --> 00:13:30,959
it also has outstanding support for web

351
00:13:30,959 --> 00:13:33,360
assembly so it's works quite nicely out

352
00:13:33,360 --> 00:13:34,880
of the box

353
00:13:34,880 --> 00:13:37,279
and it already has support for atomic

354
00:13:37,279 --> 00:13:39,839
shared memory and multi-threading on the

355
00:13:39,839 --> 00:13:42,480
desktop but also in the browser so this

356
00:13:42,480 --> 00:13:44,480
is maybe something which would be quite

357
00:13:44,480 --> 00:13:47,360
difficult to achieve with c plus with

358
00:13:47,360 --> 00:13:50,240
rust it's just very easy

359
00:13:50,240 --> 00:13:52,480
also this major webcpu implementation

360
00:13:52,480 --> 00:13:55,920
wgpu is written in rust

361
00:13:55,920 --> 00:13:58,240
which brings us to our next next

362
00:13:58,240 --> 00:14:00,639
question why web gpu

363
00:14:00,639 --> 00:14:04,240
so as already said it's quite modern

364
00:14:04,240 --> 00:14:06,480
it also allows to easily target the

365
00:14:06,480 --> 00:14:08,639
metal api which is something which is

366
00:14:08,639 --> 00:14:09,839
special

367
00:14:09,839 --> 00:14:11,920
and with web gpu we

368
00:14:11,920 --> 00:14:14,560
easily reach android linux

369
00:14:14,560 --> 00:14:19,439
ios mac os windows and the browser

370
00:14:21,199 --> 00:14:23,040
why is this a game changer

371
00:14:23,040 --> 00:14:25,360
um so this is

372
00:14:25,360 --> 00:14:28,000
my try to explain this

373
00:14:28,000 --> 00:14:29,120
so they're

374
00:14:29,120 --> 00:14:30,880
kind of two

375
00:14:30,880 --> 00:14:33,920
different kinds of graphics apis

376
00:14:33,920 --> 00:14:34,720
um

377
00:14:34,720 --> 00:14:36,720
one one without which i would call

378
00:14:36,720 --> 00:14:40,079
classical graphics apis and low overhead

379
00:14:40,079 --> 00:14:41,760
ones

380
00:14:41,760 --> 00:14:45,120
um so in at the beginning of 2000

381
00:14:45,120 --> 00:14:47,600
um there was opengl 2 already

382
00:14:47,600 --> 00:14:50,800
which led to opengl es

383
00:14:50,800 --> 00:14:52,720
which eventually led to

384
00:14:52,720 --> 00:14:55,839
webgl so all of these share

385
00:14:55,839 --> 00:14:58,399
very similar concepts

386
00:14:58,399 --> 00:15:00,560
if you're programming an app for opengl

387
00:15:00,560 --> 00:15:02,720
it's quite easy to port it to webgl or

388
00:15:02,720 --> 00:15:04,959
the other way around

389
00:15:04,959 --> 00:15:06,880
in 2014

390
00:15:06,880 --> 00:15:08,720
metal was launched

391
00:15:08,720 --> 00:15:12,000
which kind of introduced a new way to

392
00:15:12,000 --> 00:15:13,279
program

393
00:15:13,279 --> 00:15:15,360
graphics

394
00:15:15,360 --> 00:15:18,800
directx 12 has a similar api vulcan has

395
00:15:18,800 --> 00:15:22,320
also very similar api and web gpu kind

396
00:15:22,320 --> 00:15:24,160
of tries to unify these low overhead

397
00:15:24,160 --> 00:15:27,519
graphics apis webgl2 which is not that

398
00:15:27,519 --> 00:15:31,360
old still follows this old way of

399
00:15:31,360 --> 00:15:34,639
programming graphics

400
00:15:35,839 --> 00:15:37,519
so

401
00:15:37,519 --> 00:15:39,759
now if we are developing some new

402
00:15:39,759 --> 00:15:42,639
renderer we want to be like yeah modern

403
00:15:42,639 --> 00:15:44,320
we don't want to introduce

404
00:15:44,320 --> 00:15:46,959
technical depth in the beginning already

405
00:15:46,959 --> 00:15:50,720
um so i've drawn here three scenarios

406
00:15:50,720 --> 00:15:53,759
um so we are running mablibre rs

407
00:15:53,759 --> 00:15:56,480
against the low overhead graphics api

408
00:15:56,480 --> 00:15:58,959
and below that there's vulcan that's

409
00:15:58,959 --> 00:16:00,720
basically the perfect way then we're

410
00:16:00,720 --> 00:16:03,759
like have a total modern stack

411
00:16:03,759 --> 00:16:05,040
um

412
00:16:05,040 --> 00:16:07,920
if we target as map librer rs the slow

413
00:16:07,920 --> 00:16:10,639
overhead graphics api but we're running

414
00:16:10,639 --> 00:16:13,040
on an old android phone there's only

415
00:16:13,040 --> 00:16:17,120
opengl then it's still okay

416
00:16:17,120 --> 00:16:20,560
apple will deprecate this way and so

417
00:16:20,560 --> 00:16:22,880
we'll be gone maybe in five years

418
00:16:22,880 --> 00:16:23,920
um to

419
00:16:23,920 --> 00:16:25,680
reach opengl

420
00:16:25,680 --> 00:16:27,680
um but it's still okay

421
00:16:27,680 --> 00:16:30,480
um so the approach which is not that

422
00:16:30,480 --> 00:16:33,279
nice in my opinion at least is to say

423
00:16:33,279 --> 00:16:35,360
okay we're targeting targeting this

424
00:16:35,360 --> 00:16:37,440
classical api this classical way of

425
00:16:37,440 --> 00:16:39,040
programming graphics

426
00:16:39,040 --> 00:16:40,880
um and then

427
00:16:40,880 --> 00:16:42,560
we're running on a modern device which

428
00:16:42,560 --> 00:16:44,560
already supports wolken

429
00:16:44,560 --> 00:16:46,720
then we're losing a lot of performance

430
00:16:46,720 --> 00:16:48,720
so

431
00:16:48,720 --> 00:16:50,399
if we want to have a modern modern

432
00:16:50,399 --> 00:16:52,320
rendering stack a future proof rendering

433
00:16:52,320 --> 00:16:53,839
stack then it's

434
00:16:53,839 --> 00:16:57,360
in my opinion essential to target these

435
00:16:57,360 --> 00:17:00,000
low overhead graphics apis

436
00:17:00,000 --> 00:17:03,199
um i want to give a quick demonstration

437
00:17:03,199 --> 00:17:05,050
if everything works

438
00:17:05,050 --> 00:17:08,190
[Music]

439
00:17:15,760 --> 00:17:16,559
so

440
00:17:16,559 --> 00:17:20,160
this is running on mac os

441
00:17:20,720 --> 00:17:23,280
this is the camp you can you're seeing

442
00:17:23,280 --> 00:17:24,319
and

443
00:17:24,319 --> 00:17:26,240
it's still bare bones so a lot of

444
00:17:26,240 --> 00:17:27,919
features are still missing

445
00:17:27,919 --> 00:17:30,400
for example text is missing and

446
00:17:30,400 --> 00:17:32,720
basically a map without text is not

447
00:17:32,720 --> 00:17:34,080
worth much

448
00:17:34,080 --> 00:17:36,480
um but for example you can already tilt

449
00:17:36,480 --> 00:17:39,360
so it's kind of it's 3d already without

450
00:17:39,360 --> 00:17:41,679
3d buildings or mountains

451
00:17:41,679 --> 00:17:43,280
um

452
00:17:43,280 --> 00:17:46,400
yes but it works quite nicely and it

453
00:17:46,400 --> 00:17:48,240
runs on all platforms

454
00:17:48,240 --> 00:17:50,480
it runs smoothly at 60fps also in the

455
00:17:50,480 --> 00:17:54,160
browser with a single code base

456
00:17:55,679 --> 00:17:59,400
let's jump back

457
00:18:01,120 --> 00:18:02,160
so

458
00:18:02,160 --> 00:18:05,120
while developing this um

459
00:18:05,120 --> 00:18:07,520
i also made a lot of mistakes

460
00:18:07,520 --> 00:18:10,160
um for example usually britain

461
00:18:10,160 --> 00:18:12,240
or ireland is not in the middle of the

462
00:18:12,240 --> 00:18:14,000
atlantic

463
00:18:14,000 --> 00:18:16,160
but yeah it's kind of funny to fix all

464
00:18:16,160 --> 00:18:18,720
of these problems and it's very

465
00:18:18,720 --> 00:18:21,280
rewarding

466
00:18:21,280 --> 00:18:23,760
so you might ask why not just use google

467
00:18:23,760 --> 00:18:27,520
maps or azure maps or mapbox

468
00:18:27,520 --> 00:18:29,280
you can use this but

469
00:18:29,280 --> 00:18:30,960
you're getting

470
00:18:30,960 --> 00:18:33,520
quite locked in into a vendor

471
00:18:33,520 --> 00:18:35,360
these libraries are yeah they're

472
00:18:35,360 --> 00:18:38,080
proprietary the licensing is sometimes

473
00:18:38,080 --> 00:18:39,440
quite difficult

474
00:18:39,440 --> 00:18:41,200
it's usually provided as software as a

475
00:18:41,200 --> 00:18:42,640
service so you

476
00:18:42,640 --> 00:18:44,559
it's quite kind of difficult to use your

477
00:18:44,559 --> 00:18:45,919
own data

478
00:18:45,919 --> 00:18:47,440
and of course there are also privacy

479
00:18:47,440 --> 00:18:50,000
risks associated with it so if you're

480
00:18:50,000 --> 00:18:52,720
using some american service

481
00:18:52,720 --> 00:18:54,640
or us service

482
00:18:54,640 --> 00:18:56,720
then you also have to look into privacy

483
00:18:56,720 --> 00:18:57,760
laws

484
00:18:57,760 --> 00:18:58,559
um

485
00:18:58,559 --> 00:19:01,360
and so in my opinion it's essential to

486
00:19:01,360 --> 00:19:02,960
invest in these

487
00:19:02,960 --> 00:19:05,280
free and open source rendering

488
00:19:05,280 --> 00:19:07,600
stacks

489
00:19:07,600 --> 00:19:10,799
so a quick recommendation for a series

490
00:19:10,799 --> 00:19:12,480
i already talked about teravision in the

491
00:19:12,480 --> 00:19:13,600
beginning

492
00:19:13,600 --> 00:19:16,080
the billion dollar code is a series on

493
00:19:16,080 --> 00:19:18,080
netflix which

494
00:19:18,080 --> 00:19:20,000
so there was a patent

495
00:19:20,000 --> 00:19:23,520
dispute between google and teravision

496
00:19:23,520 --> 00:19:25,679
and this series just

497
00:19:25,679 --> 00:19:27,200
explains what happens in a very

498
00:19:27,200 --> 00:19:29,600
emotional way and but it's definitely

499
00:19:29,600 --> 00:19:31,500
worth watching

500
00:19:31,500 --> 00:19:33,120
[Music]

501
00:19:33,120 --> 00:19:35,679
so if you also love maps feel free to

502
00:19:35,679 --> 00:19:37,440
check out the project there's a lot to

503
00:19:37,440 --> 00:19:38,559
do

504
00:19:38,559 --> 00:19:40,720
it's a project without and we have a

505
00:19:40,720 --> 00:19:41,760
matrix

506
00:19:41,760 --> 00:19:44,000
channel there's also slack

507
00:19:44,000 --> 00:19:46,080
where the library community hangs out

508
00:19:46,080 --> 00:19:47,440
more

509
00:19:47,440 --> 00:19:49,520
and also feel free to just try out a web

510
00:19:49,520 --> 00:19:51,280
demonstration

511
00:19:51,280 --> 00:19:53,039
if you're feeling adventurous you can

512
00:19:53,039 --> 00:19:56,480
also try out a web gpu implementation

513
00:19:56,480 --> 00:19:58,480
but that of course requires firefox

514
00:19:58,480 --> 00:20:00,960
nightly and you have to set some special

515
00:20:00,960 --> 00:20:02,400
feature flags

516
00:20:02,400 --> 00:20:04,730
so thank you

517
00:20:04,730 --> 00:20:06,140
[Applause]

518
00:20:06,140 --> 00:20:08,070
[Music]

519
00:20:08,070 --> 00:20:11,120
[Applause]

520
00:20:11,120 --> 00:20:13,520
yeah thank you so much for your talk

521
00:20:13,520 --> 00:20:15,760
um now if we have any questions uh

522
00:20:15,760 --> 00:20:17,840
please line up but with these

523
00:20:17,840 --> 00:20:19,520
microphones in the middle um i don't

524
00:20:19,520 --> 00:20:20,559
know if there are

525
00:20:20,559 --> 00:20:23,520
any uh signal messages for us to start

526
00:20:23,520 --> 00:20:24,400
with

527
00:20:24,400 --> 00:20:26,320
if not no okay

528
00:20:26,320 --> 00:20:29,280
do you have you have a question

529
00:20:29,280 --> 00:20:31,919
thank you um well first of all thanks

530
00:20:31,919 --> 00:20:34,320
for your talk very insightful

531
00:20:34,320 --> 00:20:36,799
more of a suggestion you showed the map

532
00:20:36,799 --> 00:20:38,799
of the camp area do you did you know

533
00:20:38,799 --> 00:20:40,400
that there is a

534
00:20:40,400 --> 00:20:42,640
completely free

535
00:20:42,640 --> 00:20:44,640
vector tiles map at the dutch canister

536
00:20:44,640 --> 00:20:47,360
so pdok.now has vector tiles with great

537
00:20:47,360 --> 00:20:49,360
details street names etc all in vector

538
00:20:49,360 --> 00:20:51,520
tiles so you can download the whole data

539
00:20:51,520 --> 00:20:53,760
set or you can use their server to

540
00:20:53,760 --> 00:20:56,240
access it that's good just from the camp

541
00:20:56,240 --> 00:20:57,919
area you mean no the whole of the

542
00:20:57,919 --> 00:21:00,960
netherlands ah okay yeah

543
00:21:00,960 --> 00:21:02,480
yeah it's it's maybe also not that

544
00:21:02,480 --> 00:21:03,919
detailed because a lot of features are

545
00:21:03,919 --> 00:21:06,480
still missing so

546
00:21:06,480 --> 00:21:07,200
yeah

547
00:21:07,200 --> 00:21:09,360
you're using openstreetmap uh yeah

548
00:21:09,360 --> 00:21:11,600
that's openstreetmap datasource but they

549
00:21:11,600 --> 00:21:12,640
have something

550
00:21:12,640 --> 00:21:15,120
more detailed more details yeah cool

551
00:21:15,120 --> 00:21:18,719
completely open very cool

552
00:21:20,000 --> 00:21:21,600
thank you very much for for sharing the

553
00:21:21,600 --> 00:21:24,000
detail um any other questions from the

554
00:21:24,000 --> 00:21:26,480
group here

555
00:21:27,760 --> 00:21:29,919
well if not

556
00:21:29,919 --> 00:21:31,280
max will be here

557
00:21:31,280 --> 00:21:34,080
after we we wrap this talk feel free to

558
00:21:34,080 --> 00:21:34,799
to

559
00:21:34,799 --> 00:21:37,280
talk further and get more details

560
00:21:37,280 --> 00:21:41,000
so thank you very much

