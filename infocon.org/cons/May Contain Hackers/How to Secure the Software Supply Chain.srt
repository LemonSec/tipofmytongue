1
00:00:01,280 --> 00:00:12,559
[Music]

2
00:00:15,360 --> 00:00:18,800
uh the intro is uh absolutely correct uh

3
00:00:18,800 --> 00:00:20,480
in that you know we're all using open

4
00:00:20,480 --> 00:00:23,680
source software to build our projects uh

5
00:00:23,680 --> 00:00:25,760
and get things out the door quickly and

6
00:00:25,760 --> 00:00:28,480
so uh you know it's pretty hard to avoid

7
00:00:28,480 --> 00:00:30,320
using open source software in some way

8
00:00:30,320 --> 00:00:33,360
and so this topic about how to secure

9
00:00:33,360 --> 00:00:35,040
your software when you're using open

10
00:00:35,040 --> 00:00:37,440
source code is super important so thanks

11
00:00:37,440 --> 00:00:39,360
for coming to my talk and hopefully

12
00:00:39,360 --> 00:00:41,280
we'll have some good stuff to talk about

13
00:00:41,280 --> 00:00:43,120
today

14
00:00:43,120 --> 00:00:45,280
so just a little bit about me uh so i'm

15
00:00:45,280 --> 00:00:46,320
for us

16
00:00:46,320 --> 00:00:49,039
i started this company called socket

17
00:00:49,039 --> 00:00:50,000
which you can learn more about

18
00:00:50,000 --> 00:00:52,800
socket.dev um and that's

19
00:00:52,800 --> 00:00:54,559
mostly where um

20
00:00:54,559 --> 00:00:56,079
you know most of the things that i'm

21
00:00:56,079 --> 00:00:58,160
gonna share today or putting them into

22
00:00:58,160 --> 00:01:00,079
this website this tool for it's free for

23
00:01:00,079 --> 00:01:01,199
people to use

24
00:01:01,199 --> 00:01:04,000
but i also teach web security at

25
00:01:04,000 --> 00:01:06,799
stanford and i work on a lot of node

26
00:01:06,799 --> 00:01:09,280
packages a bunch of different npm

27
00:01:09,280 --> 00:01:11,360
packages over the years maybe two you

28
00:01:11,360 --> 00:01:13,520
might have heard of are standard js

29
00:01:13,520 --> 00:01:15,759
which is a style guide and a code

30
00:01:15,759 --> 00:01:19,040
linting tool and webtorrent which is a

31
00:01:19,040 --> 00:01:22,560
project that i started back in 2013 2014

32
00:01:22,560 --> 00:01:24,400
which was trying to make the bittorrent

33
00:01:24,400 --> 00:01:27,680
protocol work on the web using a

34
00:01:27,680 --> 00:01:30,320
javascript library and webrtc

35
00:01:30,320 --> 00:01:31,360
and

36
00:01:31,360 --> 00:01:32,799
it's been a really fun project to work

37
00:01:32,799 --> 00:01:34,000
on over the years and i learned a lot

38
00:01:34,000 --> 00:01:36,240
about open source and a lot of things

39
00:01:36,240 --> 00:01:38,159
about the supply chain so that's

40
00:01:38,159 --> 00:01:39,360
all that stuff is going to go into this

41
00:01:39,360 --> 00:01:40,400
talk hopefully

42
00:01:40,400 --> 00:01:43,200
uh now uh and then also um two other

43
00:01:43,200 --> 00:01:45,360
just random facts i was part of the new

44
00:01:45,360 --> 00:01:47,119
foundation for a while and then also i

45
00:01:47,119 --> 00:01:49,360
helped uh with an episode of the silicon

46
00:01:49,360 --> 00:01:50,799
valley tv show which is a pretty funny

47
00:01:50,799 --> 00:01:52,240
it was a pretty funny experience they

48
00:01:52,240 --> 00:01:54,640
like flew me to la and i got to help

49
00:01:54,640 --> 00:01:57,439
give advice for that show

50
00:01:57,439 --> 00:01:58,719
which is hilarious by the way if you

51
00:01:58,719 --> 00:01:59,840
haven't seen it

52
00:01:59,840 --> 00:02:02,000
um cool so what are we going to talk

53
00:02:02,000 --> 00:02:04,159
about today so uh four things the first

54
00:02:04,159 --> 00:02:05,200
is i'm going to tell you a story of a

55
00:02:05,200 --> 00:02:06,799
real world supply chain attack with some

56
00:02:06,799 --> 00:02:08,000
attack code and we're going to go into

57
00:02:08,000 --> 00:02:10,080
the attack code and look at how it works

58
00:02:10,080 --> 00:02:11,280
then we're going to talk about why is

59
00:02:11,280 --> 00:02:12,080
this

60
00:02:12,080 --> 00:02:14,800
issue happening now more than ever

61
00:02:14,800 --> 00:02:15,599
and

62
00:02:15,599 --> 00:02:16,720
you know kind of what has changed to

63
00:02:16,720 --> 00:02:18,640
make it happen now

64
00:02:18,640 --> 00:02:20,239
how does the supply chain sack actually

65
00:02:20,239 --> 00:02:22,319
work in detail and then finally some

66
00:02:22,319 --> 00:02:24,000
tips and thoughts on how to protect your

67
00:02:24,000 --> 00:02:25,920
app but i don't have like a full

68
00:02:25,920 --> 00:02:27,920
solution to this just some ideas and

69
00:02:27,920 --> 00:02:30,000
some some recommendations but it's still

70
00:02:30,000 --> 00:02:33,200
kind of an open problem i would say

71
00:02:33,760 --> 00:02:34,879
cool so let's start let me tell you a

72
00:02:34,879 --> 00:02:38,879
story on january 13th 2012

73
00:02:38,879 --> 00:02:41,120
over 10 years ago a developer named

74
00:02:41,120 --> 00:02:43,519
faisal salman published a project called

75
00:02:43,519 --> 00:02:46,000
ua parser.js this is actually the first

76
00:02:46,000 --> 00:02:48,959
commit message from that project and the

77
00:02:48,959 --> 00:02:50,480
goal of the project was to parse user

78
00:02:50,480 --> 00:02:53,120
agent strings so kind of a very simple

79
00:02:53,120 --> 00:02:55,040
javascript library lots of people found

80
00:02:55,040 --> 00:02:56,239
it useful

81
00:02:56,239 --> 00:02:58,159
and so over 10 years of steady work he

82
00:02:58,159 --> 00:03:00,000
was continuing to develop a package with

83
00:03:00,000 --> 00:03:02,239
help from many open source contributors

84
00:03:02,239 --> 00:03:04,879
publishing ultimately 54 versions over

85
00:03:04,879 --> 00:03:06,000
all those years

86
00:03:06,000 --> 00:03:07,760
and the package continued to grow to the

87
00:03:07,760 --> 00:03:10,480
point where now it has around 7 million

88
00:03:10,480 --> 00:03:13,040
downloads per week and it's used by 3

89
00:03:13,040 --> 00:03:15,840
million github repositories so very huge

90
00:03:15,840 --> 00:03:17,760
project

91
00:03:17,760 --> 00:03:20,480
now let me tell you a different story

92
00:03:20,480 --> 00:03:23,599
on october 5th 2021 on a notorious

93
00:03:23,599 --> 00:03:27,200
russian hacking forum this post appeared

94
00:03:27,200 --> 00:03:29,360
this is a hacker selling the password to

95
00:03:29,360 --> 00:03:32,000
an npm account that controls a package

96
00:03:32,000 --> 00:03:32,799
with

97
00:03:32,799 --> 00:03:35,680
what does it say over 7 million weekly

98
00:03:35,680 --> 00:03:36,879
downloads

99
00:03:36,879 --> 00:03:39,840
if that number sounds familiar it's

100
00:03:39,840 --> 00:03:42,799
referring to the ua parser.js package

101
00:03:42,799 --> 00:03:44,480
so two weeks later after that post

102
00:03:44,480 --> 00:03:45,599
appeared

103
00:03:45,599 --> 00:03:47,920
the ua parser.js library was compromised

104
00:03:47,920 --> 00:03:49,440
and three malicious versions were

105
00:03:49,440 --> 00:03:51,040
published

106
00:03:51,040 --> 00:03:52,959
and malware was added into each of these

107
00:03:52,959 --> 00:03:53,920
versions

108
00:03:53,920 --> 00:03:55,760
so that whenever a user would install

109
00:03:55,760 --> 00:03:58,840
them the attack code would execute

110
00:03:58,840 --> 00:04:01,519
immediately so

111
00:04:01,519 --> 00:04:02,720
if we actually open up one of these

112
00:04:02,720 --> 00:04:04,439
compromised versions this is the

113
00:04:04,439 --> 00:04:06,480
package.json file which is the sort of

114
00:04:06,480 --> 00:04:08,959
metadata manifest file for javascript

115
00:04:08,959 --> 00:04:10,400
projects

116
00:04:10,400 --> 00:04:12,640
and you'll notice this line here

117
00:04:12,640 --> 00:04:15,120
the pre-install script is uh basically a

118
00:04:15,120 --> 00:04:17,279
shell script that npm will automatically

119
00:04:17,279 --> 00:04:19,358
execute anytime this package is

120
00:04:19,358 --> 00:04:21,680
installed and this is a feature of the

121
00:04:21,680 --> 00:04:24,320
you know i guess a feature of the npm

122
00:04:24,320 --> 00:04:26,160
package manager

123
00:04:26,160 --> 00:04:27,040
that

124
00:04:27,040 --> 00:04:29,600
allows the author to specify code to run

125
00:04:29,600 --> 00:04:32,000
automatically on installation and as you

126
00:04:32,000 --> 00:04:34,639
can see here it's running um two files

127
00:04:34,639 --> 00:04:37,360
uh the first one the slash b flag here

128
00:04:37,360 --> 00:04:39,040
is actually telling windows to start

129
00:04:39,040 --> 00:04:41,040
this script in a hidden terminal window

130
00:04:41,040 --> 00:04:42,560
to make it a little bit more sneaky and

131
00:04:42,560 --> 00:04:44,880
not show the output to the user

132
00:04:44,880 --> 00:04:46,960
but um in any case it's running this

133
00:04:46,960 --> 00:04:48,160
file so let's open up the file

134
00:04:48,160 --> 00:04:50,880
preinstall.js to see what it's doing

135
00:04:50,880 --> 00:04:52,960
can everybody see this hopefully it's

136
00:04:52,960 --> 00:04:54,080
okay

137
00:04:54,080 --> 00:04:54,840
cool

138
00:04:54,840 --> 00:04:57,120
so what we have here is the file that

139
00:04:57,120 --> 00:04:59,280
runs and the kind of most important uh

140
00:04:59,280 --> 00:05:01,039
piece of it is it does different things

141
00:05:01,039 --> 00:05:03,680
on each platform so the first uh kind of

142
00:05:03,680 --> 00:05:06,000
if statement is for the mac and really

143
00:05:06,000 --> 00:05:07,280
it does nothing other than set this

144
00:05:07,280 --> 00:05:09,520
variable here so mac users are fortunate

145
00:05:09,520 --> 00:05:11,600
they didn't bother making an attack for

146
00:05:11,600 --> 00:05:12,639
them

147
00:05:12,639 --> 00:05:15,600
now on windows it spawns

148
00:05:15,600 --> 00:05:17,280
the command prompt and runs this bat

149
00:05:17,280 --> 00:05:18,400
file

150
00:05:18,400 --> 00:05:20,960
and on linux it calls this function here

151
00:05:20,960 --> 00:05:22,800
which ends up

152
00:05:22,800 --> 00:05:25,600
spawning bash to run uh preinstall.sh so

153
00:05:25,600 --> 00:05:26,960
let's open up pre-install that ssh and

154
00:05:26,960 --> 00:05:29,759
see what's in there

155
00:05:29,759 --> 00:05:31,759
uh okay so here's the script

156
00:05:31,759 --> 00:05:34,000
uh the first line you'll see it's

157
00:05:34,000 --> 00:05:36,320
curling this url

158
00:05:36,320 --> 00:05:38,400
here to go and get the user's country

159
00:05:38,400 --> 00:05:40,080
and if the user happens to be coming

160
00:05:40,080 --> 00:05:41,520
from any of the countries that they're

161
00:05:41,520 --> 00:05:44,160
grepping for so russia ukraine belarus

162
00:05:44,160 --> 00:05:46,479
or kazakhstan then it

163
00:05:46,479 --> 00:05:48,240
will you know set this variable and then

164
00:05:48,240 --> 00:05:50,479
if it's set then it will terminate the

165
00:05:50,479 --> 00:05:51,680
script so basically if the user is

166
00:05:51,680 --> 00:05:53,280
coming from one of these four countries

167
00:05:53,280 --> 00:05:55,280
the malware does nothing

168
00:05:55,280 --> 00:05:57,680
this is pretty common in

169
00:05:57,680 --> 00:05:58,560
in

170
00:05:58,560 --> 00:06:00,000
attack code where

171
00:06:00,000 --> 00:06:01,440
usually

172
00:06:01,440 --> 00:06:02,400
the

173
00:06:02,400 --> 00:06:04,319
bad guys don't want to antagonize their

174
00:06:04,319 --> 00:06:06,240
local law enforcement so they usually

175
00:06:06,240 --> 00:06:08,319
will not attack people from those

176
00:06:08,319 --> 00:06:09,759
countries the countries where they live

177
00:06:09,759 --> 00:06:11,280
or where they operate so this is

178
00:06:11,280 --> 00:06:12,639
probably what's happening here but who

179
00:06:12,639 --> 00:06:14,639
knows

180
00:06:14,639 --> 00:06:15,680
and then

181
00:06:15,680 --> 00:06:16,880
so assuming you're not in one of those

182
00:06:16,880 --> 00:06:18,560
countries then

183
00:06:18,560 --> 00:06:20,319
it looks for whether the malware is

184
00:06:20,319 --> 00:06:21,840
already running on the machine using the

185
00:06:21,840 --> 00:06:24,720
pcrep program uh so it's prepping for

186
00:06:24,720 --> 00:06:27,360
this process if the process exists it

187
00:06:27,360 --> 00:06:30,960
execute exits the script

188
00:06:30,960 --> 00:06:33,600
so otherwise it will download the the

189
00:06:33,600 --> 00:06:36,400
file from this ip address and then it

190
00:06:36,400 --> 00:06:38,400
will make it executable and run it so

191
00:06:38,400 --> 00:06:39,600
this is the this is the actual malware

192
00:06:39,600 --> 00:06:41,600
payload it's running this file now and

193
00:06:41,600 --> 00:06:42,960
if you can see the arguments here you

194
00:06:42,960 --> 00:06:44,319
can maybe guess what this program is

195
00:06:44,319 --> 00:06:46,560
doing

196
00:06:46,840 --> 00:06:48,400
minexmr.com

197
00:06:48,400 --> 00:06:50,080
should give you a hint it's mining

198
00:06:50,080 --> 00:06:51,919
monero cryptocurrency so it's basically

199
00:06:51,919 --> 00:06:54,160
a cryptocurrency miner so to steal your

200
00:06:54,160 --> 00:06:56,000
you know system resources and

201
00:06:56,000 --> 00:06:59,039
uh mining this for the attacker

202
00:06:59,039 --> 00:07:00,639
so so that's basically what the payload

203
00:07:00,639 --> 00:07:02,800
did now let's look at the windows

204
00:07:02,800 --> 00:07:04,000
version

205
00:07:04,000 --> 00:07:05,840
the windows version is very similar but

206
00:07:05,840 --> 00:07:08,720
it does one extra thing which we'll see

207
00:07:08,720 --> 00:07:10,400
so it starts off you know very similar

208
00:07:10,400 --> 00:07:11,599
but then if we go down here you'll see

209
00:07:11,599 --> 00:07:13,080
it's actually downloading an

210
00:07:13,080 --> 00:07:14,840
extra.dll

211
00:07:14,840 --> 00:07:17,280
file and um

212
00:07:17,280 --> 00:07:18,639
it's also by the way it's this kind of

213
00:07:18,639 --> 00:07:20,240
funny it tries to download it three

214
00:07:20,240 --> 00:07:21,599
different ways it tries curl which is

215
00:07:21,599 --> 00:07:23,759
not usually installed

216
00:07:23,759 --> 00:07:25,120
on windows machines then it falls back

217
00:07:25,120 --> 00:07:26,400
to wget

218
00:07:26,400 --> 00:07:27,680
and then if that's not available then it

219
00:07:27,680 --> 00:07:30,560
tries this thing called certutil.exe

220
00:07:30,560 --> 00:07:33,360
which is a tool for signing certificates

221
00:07:33,360 --> 00:07:35,120
but apparently also allows you to just

222
00:07:35,120 --> 00:07:37,599
download files from the internet as well

223
00:07:37,599 --> 00:07:38,880
so that's

224
00:07:38,880 --> 00:07:41,520
that's handy

225
00:07:41,680 --> 00:07:44,000
so we'll download the dll file and um

226
00:07:44,000 --> 00:07:46,240
and again it runs the malware payload

227
00:07:46,240 --> 00:07:48,560
and then also it at the very end it

228
00:07:48,560 --> 00:07:50,720
registers the dll and that piece there

229
00:07:50,720 --> 00:07:53,039
is the really scary part because that

230
00:07:53,039 --> 00:07:55,199
dll file actually scans the whole

231
00:07:55,199 --> 00:07:57,360
machine and steals passwords from over

232
00:07:57,360 --> 00:07:59,360
100 different programs on the machine as

233
00:07:59,360 --> 00:08:00,720
well as the windows credential manager

234
00:08:00,720 --> 00:08:03,199
where your passwords are stored

235
00:08:03,199 --> 00:08:04,160
so

236
00:08:04,160 --> 00:08:05,759
yeah pretty bad

237
00:08:05,759 --> 00:08:08,000
piece of code

238
00:08:08,000 --> 00:08:09,599
and remember this was added to a project

239
00:08:09,599 --> 00:08:11,360
with many many downloads like 30 million

240
00:08:11,360 --> 00:08:13,440
downloads a month so it was affecting a

241
00:08:13,440 --> 00:08:14,960
lot of people very quickly when it was

242
00:08:14,960 --> 00:08:17,919
uh when it was added

243
00:08:18,400 --> 00:08:20,400
so this was the aftermath uh the package

244
00:08:20,400 --> 00:08:21,840
was basically published for about four

245
00:08:21,840 --> 00:08:24,720
hours before it was discovered and

246
00:08:24,720 --> 00:08:26,319
you know this is actually pretty fast

247
00:08:26,319 --> 00:08:27,840
for a piece of malware to be discovered

248
00:08:27,840 --> 00:08:30,160
on npm mainly because it was this was a

249
00:08:30,160 --> 00:08:32,159
very noisy attack right it was mining

250
00:08:32,159 --> 00:08:33,519
cryptocurrency so you would notice your

251
00:08:33,519 --> 00:08:36,000
computer was getting hot basically uh so

252
00:08:36,000 --> 00:08:38,159
it was not very sneaky

253
00:08:38,159 --> 00:08:39,679
uh so it was discovered in four hours

254
00:08:39,679 --> 00:08:41,279
and uh this is the post from kind of the

255
00:08:41,279 --> 00:08:44,159
maintainer um apologizing for um you

256
00:08:44,159 --> 00:08:46,080
know basically getting his account

257
00:08:46,080 --> 00:08:48,160
compromised but anyone who installed

258
00:08:48,160 --> 00:08:49,760
this package during this time period

259
00:08:49,760 --> 00:08:53,040
would have have been compromised

260
00:08:53,040 --> 00:08:54,959
and any software builds

261
00:08:54,959 --> 00:08:56,880
done in projects without a lock file

262
00:08:56,880 --> 00:08:59,200
would have been compromised uh or uh

263
00:08:59,200 --> 00:09:01,040
affected by this and finally anyone who

264
00:09:01,040 --> 00:09:03,279
merged a pr um you know to update the

265
00:09:03,279 --> 00:09:04,800
dependency

266
00:09:04,800 --> 00:09:06,320
would have been affected by this so

267
00:09:06,320 --> 00:09:07,839
anyone who's basically unlucky enough to

268
00:09:07,839 --> 00:09:09,040
use a new version one of these new

269
00:09:09,040 --> 00:09:12,079
versions would have been affected

270
00:09:13,120 --> 00:09:14,720
and this is just the tip of the iceberg

271
00:09:14,720 --> 00:09:17,120
so this was just one story but there's

272
00:09:17,120 --> 00:09:19,440
been over 180 packages removed from npm

273
00:09:19,440 --> 00:09:21,120
for security reasons in just the last 30

274
00:09:21,120 --> 00:09:23,760
days and this trend is accelerating

275
00:09:23,760 --> 00:09:25,440
because attackers are basically like

276
00:09:25,440 --> 00:09:27,279
taking advantage of the open ecosystem

277
00:09:27,279 --> 00:09:29,040
and our trusting natures in the open

278
00:09:29,040 --> 00:09:30,800
source world

279
00:09:30,800 --> 00:09:33,360
i'll just mention a few other examples

280
00:09:33,360 --> 00:09:35,200
that maybe you've heard about

281
00:09:35,200 --> 00:09:36,959
so

282
00:09:36,959 --> 00:09:39,120
there's been

283
00:09:39,120 --> 00:09:41,760
you know in january of this year a

284
00:09:41,760 --> 00:09:44,800
maintainer of two packages colors and

285
00:09:44,800 --> 00:09:45,760
faker

286
00:09:45,760 --> 00:09:48,560
added code to those packages to denial

287
00:09:48,560 --> 00:09:49,680
of service

288
00:09:49,680 --> 00:09:52,000
the users of them and it was a protest

289
00:09:52,000 --> 00:09:54,080
of big corporations using open source

290
00:09:54,080 --> 00:09:55,360
and not contributing anything back to

291
00:09:55,360 --> 00:09:57,279
the community but you know this affected

292
00:09:57,279 --> 00:09:58,240
a lot of

293
00:09:58,240 --> 00:09:59,839
people's projects who were you know

294
00:09:59,839 --> 00:10:01,279
using this and this is an interesting

295
00:10:01,279 --> 00:10:02,959
attack because it was the maintainer

296
00:10:02,959 --> 00:10:04,560
himself who

297
00:10:04,560 --> 00:10:07,519
basically became the the attacker

298
00:10:07,519 --> 00:10:08,560
so it's

299
00:10:08,560 --> 00:10:10,800
very hard to stop that um you know a lot

300
00:10:10,800 --> 00:10:12,320
of people like to talk about let's use

301
00:10:12,320 --> 00:10:13,920
code signing to solve this problem you

302
00:10:13,920 --> 00:10:15,360
know why does and it's true it's a valid

303
00:10:15,360 --> 00:10:17,200
criticism npm should probably have code

304
00:10:17,200 --> 00:10:18,959
signing like apps and other package

305
00:10:18,959 --> 00:10:20,720
managers do but that wouldn't help here

306
00:10:20,720 --> 00:10:23,920
right this would not solve this problem

307
00:10:23,920 --> 00:10:24,800
and then

308
00:10:24,800 --> 00:10:28,399
in march 2022 there was a package that

309
00:10:28,399 --> 00:10:29,440
added

310
00:10:29,440 --> 00:10:32,480
code to delete data if it suspected you

311
00:10:32,480 --> 00:10:35,519
were coming from russia or belarus

312
00:10:35,519 --> 00:10:39,200
it would basically look at the

313
00:10:39,200 --> 00:10:41,279
ip address again and if you appear to be

314
00:10:41,279 --> 00:10:42,800
coming from one of those two countries

315
00:10:42,800 --> 00:10:44,959
it would run some code which would

316
00:10:44,959 --> 00:10:46,560
loop over every file on your hard drive

317
00:10:46,560 --> 00:10:48,320
and replace the contents with a heart

318
00:10:48,320 --> 00:10:49,519
emoji

319
00:10:49,519 --> 00:10:51,200
and it would do this automatically when

320
00:10:51,200 --> 00:10:53,120
you installed the package

321
00:10:53,120 --> 00:10:56,880
so it was like a protest for the war

322
00:10:56,880 --> 00:10:58,640
obviously people use vpns there's all

323
00:10:58,640 --> 00:11:00,079
kinds of ways the ip address could be

324
00:11:00,079 --> 00:11:02,240
misdetected and and you know innocent

325
00:11:02,240 --> 00:11:03,600
people could be affected so this was a

326
00:11:03,600 --> 00:11:06,320
very you know clear you know crossed the

327
00:11:06,320 --> 00:11:08,880
line of this map this is clearly malware

328
00:11:08,880 --> 00:11:09,839
um

329
00:11:09,839 --> 00:11:11,440
and then a few months after that there

330
00:11:11,440 --> 00:11:13,440
were sort of multiple other people who

331
00:11:13,440 --> 00:11:14,560
who

332
00:11:14,560 --> 00:11:17,279
who um maintainers who actually joined

333
00:11:17,279 --> 00:11:19,279
in this protest but did it in a kind of

334
00:11:19,279 --> 00:11:21,200
a more mild way

335
00:11:21,200 --> 00:11:23,519
so maintainers of these packages here

336
00:11:23,519 --> 00:11:26,399
event source polyfill es5x and styled

337
00:11:26,399 --> 00:11:28,079
components they added messages to their

338
00:11:28,079 --> 00:11:29,200
project to

339
00:11:29,200 --> 00:11:30,000
kind of

340
00:11:30,000 --> 00:11:31,760
print out messages during the install

341
00:11:31,760 --> 00:11:33,760
process to tell people

342
00:11:33,760 --> 00:11:36,000
you know whatever their

343
00:11:36,000 --> 00:11:39,680
opinion was on on on various issues

344
00:11:39,680 --> 00:11:41,680
very very much less destructive but

345
00:11:41,680 --> 00:11:43,200
still probably it's unwanted by most

346
00:11:43,200 --> 00:11:44,880
users of the software

347
00:11:44,880 --> 00:11:46,959
and in particular one of them actually

348
00:11:46,959 --> 00:11:49,120
would redirect you so if you

349
00:11:49,120 --> 00:11:50,959
included this code in your website and

350
00:11:50,959 --> 00:11:52,880
built it into the final product then

351
00:11:52,880 --> 00:11:55,440
users would be redirected after like 15

352
00:11:55,440 --> 00:11:57,760
seconds so it was sort of like a sneaky

353
00:11:57,760 --> 00:11:59,519
unwanted behavior added into into the

354
00:11:59,519 --> 00:12:01,440
web code that would execute in certain

355
00:12:01,440 --> 00:12:03,839
circumstances

356
00:12:03,839 --> 00:12:04,959
so there's all these are just a few

357
00:12:04,959 --> 00:12:06,480
examples but there's been many more as

358
00:12:06,480 --> 00:12:08,839
well in the

359
00:12:08,839 --> 00:12:11,200
news so

360
00:12:11,200 --> 00:12:14,720
so why is this all happening now

361
00:12:14,800 --> 00:12:17,839
i think there's four main reasons

362
00:12:17,839 --> 00:12:19,519
so the first one

363
00:12:19,519 --> 00:12:21,920
is that you know open source has clearly

364
00:12:21,920 --> 00:12:25,279
won you know we're not we're no longer

365
00:12:25,279 --> 00:12:27,360
uh in the days of reinventing the wheel

366
00:12:27,360 --> 00:12:28,639
every time by writing everything

367
00:12:28,639 --> 00:12:30,720
in-house so we're relying on a lot of

368
00:12:30,720 --> 00:12:33,360
code from from third parties and we're

369
00:12:33,360 --> 00:12:35,040
we're not you know copying code from

370
00:12:35,040 --> 00:12:37,040
stack overflow anymore so most of the

371
00:12:37,040 --> 00:12:38,880
lines of code in our apps actually comes

372
00:12:38,880 --> 00:12:40,320
from open source

373
00:12:40,320 --> 00:12:42,079
and you know i think everyone already

374
00:12:42,079 --> 00:12:44,399
knows this but you know it's it's

375
00:12:44,399 --> 00:12:45,600
obviously it's a better way to write

376
00:12:45,600 --> 00:12:46,959
software there's we're not going back to

377
00:12:46,959 --> 00:12:48,079
the world where we don't do things this

378
00:12:48,079 --> 00:12:49,440
way so this is like one big kind of

379
00:12:49,440 --> 00:12:52,000
shift that's happened um that's causing

380
00:12:52,000 --> 00:12:54,560
um you know this dependence on on third

381
00:12:54,560 --> 00:12:56,639
parties

382
00:12:56,639 --> 00:12:57,839
but also

383
00:12:57,839 --> 00:12:59,120
the way we write software has really

384
00:12:59,120 --> 00:13:01,440
changed so we use dependencies a lot

385
00:13:01,440 --> 00:13:03,120
more than we used to in the past we have

386
00:13:03,120 --> 00:13:05,600
a lot more transitive dependencies

387
00:13:05,600 --> 00:13:06,959
and

388
00:13:06,959 --> 00:13:09,920
you know this this uh

389
00:13:09,920 --> 00:13:12,240
is no more evident than in this example

390
00:13:12,240 --> 00:13:14,720
of if you go to install a react

391
00:13:14,720 --> 00:13:17,040
application today the hello world that

392
00:13:17,040 --> 00:13:19,120
they recommend that you follow is to use

393
00:13:19,120 --> 00:13:21,600
this package called create react app and

394
00:13:21,600 --> 00:13:24,320
if you use that you will get nearly 1400

395
00:13:24,320 --> 00:13:25,519
packages

396
00:13:25,519 --> 00:13:27,279
just to get the hello world going for

397
00:13:27,279 --> 00:13:29,440
react so like this demonstrates kind of

398
00:13:29,440 --> 00:13:30,480
the just

399
00:13:30,480 --> 00:13:32,160
massive number of packages that are

400
00:13:32,160 --> 00:13:34,480
coming in in this in this new way of

401
00:13:34,480 --> 00:13:36,560
writing software

402
00:13:36,560 --> 00:13:38,880
and if you look at one example here

403
00:13:38,880 --> 00:13:40,240
um just taking one example out of the

404
00:13:40,240 --> 00:13:41,760
blue discord is a popular chat

405
00:13:41,760 --> 00:13:43,839
application it's a you know proprietary

406
00:13:43,839 --> 00:13:44,560
chat

407
00:13:44,560 --> 00:13:46,399
app that a lot of

408
00:13:46,399 --> 00:13:48,959
young people use um and it's an electron

409
00:13:48,959 --> 00:13:50,639
application if you open it up and you

410
00:13:50,639 --> 00:13:52,160
look at the javascript packages inside

411
00:13:52,160 --> 00:13:54,800
there's almost 20 000 packages

412
00:13:54,800 --> 00:13:57,199
and coming from almost 400 000

413
00:13:57,199 --> 00:13:58,880
contributors if you look at every commit

414
00:13:58,880 --> 00:14:01,440
that's contributed to this so um

415
00:14:01,440 --> 00:14:03,360
you know this is

416
00:14:03,360 --> 00:14:04,880
you know in a way it's amazing i mean

417
00:14:04,880 --> 00:14:06,399
this is like proof that open source

418
00:14:06,399 --> 00:14:08,320
works in you know in discord is

419
00:14:08,320 --> 00:14:09,839
basically built on this mountain of open

420
00:14:09,839 --> 00:14:11,199
source work but it's also obviously a

421
00:14:11,199 --> 00:14:12,959
huge amount of risk for any any app

422
00:14:12,959 --> 00:14:16,399
that's built in this way

423
00:14:16,399 --> 00:14:18,560
in 2019 there was a paper that came out

424
00:14:18,560 --> 00:14:20,560
and the usenix security conference that

425
00:14:20,560 --> 00:14:22,160
found that installing an average npm

426
00:14:22,160 --> 00:14:24,880
package would introduce trust on 79

427
00:14:24,880 --> 00:14:27,360
third-party packages and 39 maintainers

428
00:14:27,360 --> 00:14:29,279
because of the transitive uh you know

429
00:14:29,279 --> 00:14:31,120
dependencies

430
00:14:31,120 --> 00:14:33,120
so you know it's just this is how you

431
00:14:33,120 --> 00:14:34,560
quickly get to the the number of

432
00:14:34,560 --> 00:14:36,160
dependencies is you install one you get

433
00:14:36,160 --> 00:14:38,160
79 and so it's not a surprise that you

434
00:14:38,160 --> 00:14:39,839
end up with a lot of dependencies over

435
00:14:39,839 --> 00:14:41,680
time

436
00:14:41,680 --> 00:14:44,240
so so this is a visualization that um we

437
00:14:44,240 --> 00:14:46,720
made at uh socket that demonstrates just

438
00:14:46,720 --> 00:14:48,720
one dependency so this is webpack the

439
00:14:48,720 --> 00:14:50,720
webpack uh popular package that

440
00:14:50,720 --> 00:14:52,959
everybody uses and what's going on here

441
00:14:52,959 --> 00:14:55,600
is each gray box is a package and every

442
00:14:55,600 --> 00:14:58,160
purple box is a file and we're peeling

443
00:14:58,160 --> 00:15:01,120
back each level of the dependency tree

444
00:15:01,120 --> 00:15:03,839
one level at a time and so you can see

445
00:15:03,839 --> 00:15:06,480
within each package you have multiple

446
00:15:06,480 --> 00:15:08,880
other packages and multiple files

447
00:15:08,880 --> 00:15:10,560
and the size corresponds to the amount

448
00:15:10,560 --> 00:15:13,920
of code in each of those files

449
00:15:13,920 --> 00:15:17,120
and this is just one dependency

450
00:15:17,120 --> 00:15:18,880
i can restart it just to

451
00:15:18,880 --> 00:15:20,720
you can see

452
00:15:20,720 --> 00:15:22,480
so this is webpack you peel back webpack

453
00:15:22,480 --> 00:15:24,000
these are all the gray boxes are all the

454
00:15:24,000 --> 00:15:25,360
dependencies inside webpack and the

455
00:15:25,360 --> 00:15:27,199
purple ones are the files and then if

456
00:15:27,199 --> 00:15:29,519
you peel back another layer you can see

457
00:15:29,519 --> 00:15:32,240
more packages underneath more files

458
00:15:32,240 --> 00:15:33,199
and we were just trying to come up with

459
00:15:33,199 --> 00:15:34,880
a way of visualizing like what is going

460
00:15:34,880 --> 00:15:36,480
on inside of a package that makes it

461
00:15:36,480 --> 00:15:37,839
kind of clear

462
00:15:37,839 --> 00:15:40,880
the complexity and i is what we came up

463
00:15:40,880 --> 00:15:43,040
with

464
00:15:43,340 --> 00:15:45,120
[Music]

465
00:15:45,120 --> 00:15:47,440
so the the third reason is that no one

466
00:15:47,440 --> 00:15:49,839
really reads the code anymore uh of the

467
00:15:49,839 --> 00:15:51,360
dependencies that they use i don't know

468
00:15:51,360 --> 00:15:53,279
if they ever did but

469
00:15:53,279 --> 00:15:54,720
what we're doing now when we when we use

470
00:15:54,720 --> 00:15:56,560
open source is we're downloading code

471
00:15:56,560 --> 00:15:58,320
from the internet written by unknown

472
00:15:58,320 --> 00:16:01,040
individuals that we haven't read that we

473
00:16:01,040 --> 00:16:03,519
execute with full permissions on our

474
00:16:03,519 --> 00:16:05,199
laptops and our servers where we keep

475
00:16:05,199 --> 00:16:06,959
our most important data

476
00:16:06,959 --> 00:16:08,560
so it's like

477
00:16:08,560 --> 00:16:11,600
a miracle that this actually works like

478
00:16:11,600 --> 00:16:14,880
uh how why are we doing this

479
00:16:14,880 --> 00:16:16,480
why does my computer not blow up every

480
00:16:16,480 --> 00:16:18,890
time i run npm install i don't know

481
00:16:18,890 --> 00:16:20,240
[Music]

482
00:16:20,240 --> 00:16:22,160
but most of the time people are good and

483
00:16:22,160 --> 00:16:24,079
so this isn't the problem but if you

484
00:16:24,079 --> 00:16:25,199
know even

485
00:16:25,199 --> 00:16:26,639
0.1 percent of the time you have a bad

486
00:16:26,639 --> 00:16:27,839
maintainer or someone getting

487
00:16:27,839 --> 00:16:31,440
compromised then this can be a big issue

488
00:16:31,440 --> 00:16:32,880
so it's i think it's a miracle that this

489
00:16:32,880 --> 00:16:34,399
this even works

490
00:16:34,399 --> 00:16:36,560
today

491
00:16:36,560 --> 00:16:38,399
uh and you know especially with like the

492
00:16:38,399 --> 00:16:40,240
way that um

493
00:16:40,240 --> 00:16:41,440
i don't know how many people here use

494
00:16:41,440 --> 00:16:43,759
dependabot um if you use github and work

495
00:16:43,759 --> 00:16:45,040
on open source projects but this is a

496
00:16:45,040 --> 00:16:46,560
very common bot that will help you

497
00:16:46,560 --> 00:16:48,800
update your dependencies uh and usually

498
00:16:48,800 --> 00:16:51,040
people when they see this they just say

499
00:16:51,040 --> 00:16:52,560
okay cool new version came out looks

500
00:16:52,560 --> 00:16:54,000
good merge

501
00:16:54,000 --> 00:16:55,519
and every time you do that you're

502
00:16:55,519 --> 00:16:56,959
bringing in code from somebody that you

503
00:16:56,959 --> 00:16:59,360
haven't read and so it's you know it's

504
00:16:59,360 --> 00:17:01,440
it's mind-blowing uh to me that this

505
00:17:01,440 --> 00:17:04,079
this works

506
00:17:04,079 --> 00:17:05,439
the other thing is attackers often

507
00:17:05,439 --> 00:17:08,079
publish different code to the package

508
00:17:08,079 --> 00:17:10,559
registry that they do on github

509
00:17:10,559 --> 00:17:12,640
because if you expect your users to

510
00:17:12,640 --> 00:17:14,079
actually maybe read the code then

511
00:17:14,079 --> 00:17:15,760
they're going to go to github to read it

512
00:17:15,760 --> 00:17:16,799
and they're going to say oh it looks

513
00:17:16,799 --> 00:17:18,799
fine and they'll go install it and the

514
00:17:18,799 --> 00:17:21,359
code they get from the registry from npm

515
00:17:21,359 --> 00:17:22,480
is actually different than what's on

516
00:17:22,480 --> 00:17:23,919
github so this is actually a very common

517
00:17:23,919 --> 00:17:26,319
technique and and the package manager

518
00:17:26,319 --> 00:17:28,319
doesn't do anything to confirm that the

519
00:17:28,319 --> 00:17:31,520
code is the same unfortunately

520
00:17:31,520 --> 00:17:32,559
so

521
00:17:32,559 --> 00:17:34,640
uh so you know and then you know

522
00:17:34,640 --> 00:17:35,840
you might think okay i don't have to

523
00:17:35,840 --> 00:17:37,039
read the code like someone else will

524
00:17:37,039 --> 00:17:39,919
read the code um we can rely on linus's

525
00:17:39,919 --> 00:17:42,080
law um where you know given enough

526
00:17:42,080 --> 00:17:43,679
eyeballs all bugs are shallow you've

527
00:17:43,679 --> 00:17:46,559
probably heard this quote before

528
00:17:46,559 --> 00:17:49,039
but the thing is if uh

529
00:17:49,039 --> 00:17:51,440
you know if everybody thinks like this

530
00:17:51,440 --> 00:17:52,799
then nobody is actually going to read

531
00:17:52,799 --> 00:17:54,400
the code and

532
00:17:54,400 --> 00:17:56,000
you end up with

533
00:17:56,000 --> 00:17:58,880
in many instances malware remains

534
00:17:58,880 --> 00:18:01,280
undiscovered for hundreds of days

535
00:18:01,280 --> 00:18:02,720
and that's actually what was found in

536
00:18:02,720 --> 00:18:05,039
this 2020 paper that did an analysis of

537
00:18:05,039 --> 00:18:07,039
this they found on average a malicious

538
00:18:07,039 --> 00:18:09,840
package is on uh is available for 209

539
00:18:09,840 --> 00:18:12,000
days before it's been discovered and

540
00:18:12,000 --> 00:18:14,960
reported so that's a long time

541
00:18:14,960 --> 00:18:17,039
before people are finding this stuff in

542
00:18:17,039 --> 00:18:21,360
the um in the in the in the common case

543
00:18:21,360 --> 00:18:24,400
and then another paper in 2021 at ndss

544
00:18:24,400 --> 00:18:25,679
which is another prestigious security

545
00:18:25,679 --> 00:18:27,280
conference found similar results

546
00:18:27,280 --> 00:18:29,840
including that 20 of malware it persists

547
00:18:29,840 --> 00:18:32,480
in package managers for over 400 days

548
00:18:32,480 --> 00:18:33,760
and has more than a thousand downloads

549
00:18:33,760 --> 00:18:35,840
before it's discovered

550
00:18:35,840 --> 00:18:37,760
so it's a huge problem um

551
00:18:37,760 --> 00:18:39,600
and not all of the malware is being

552
00:18:39,600 --> 00:18:40,880
removed in just four hours like that

553
00:18:40,880 --> 00:18:42,640
other like the first example i told you

554
00:18:42,640 --> 00:18:45,360
guys about

555
00:18:46,640 --> 00:18:48,240
so these are my my reasons why this is

556
00:18:48,240 --> 00:18:50,240
happening more and more um now let's

557
00:18:50,240 --> 00:18:51,840
actually talk about kind of how does a

558
00:18:51,840 --> 00:18:53,440
supply chain attack actually work and

559
00:18:53,440 --> 00:18:55,039
the mechanical level

560
00:18:55,039 --> 00:18:56,880
so i'm going to focus on

561
00:18:56,880 --> 00:19:00,000
six specific um ttps

562
00:19:00,000 --> 00:19:01,200
so if you're familiar if you're not

563
00:19:01,200 --> 00:19:02,559
familiar with the term ttps it just

564
00:19:02,559 --> 00:19:04,080
means tactics techniques and procedures

565
00:19:04,080 --> 00:19:06,400
it's a common term used in the security

566
00:19:06,400 --> 00:19:08,640
community and uh referring to just sort

567
00:19:08,640 --> 00:19:10,960
of like how do attackers um you know do

568
00:19:10,960 --> 00:19:12,320
what they do so we're going to talk

569
00:19:12,320 --> 00:19:14,160
about these six

570
00:19:14,160 --> 00:19:16,400
let's start with hijacked packages so

571
00:19:16,400 --> 00:19:18,240
this is the most common one that you see

572
00:19:18,240 --> 00:19:19,840
news stories about

573
00:19:19,840 --> 00:19:21,280
this is whenever you see you know a

574
00:19:21,280 --> 00:19:23,039
story about some npm library being

575
00:19:23,039 --> 00:19:25,360
compromised it's usually because of a

576
00:19:25,360 --> 00:19:27,760
package getting hijacked

577
00:19:27,760 --> 00:19:30,000
and there's many ways you can um

578
00:19:30,000 --> 00:19:32,080
you can have a package get hijacked

579
00:19:32,080 --> 00:19:33,200
obviously the maintainer could choose a

580
00:19:33,200 --> 00:19:34,640
weak password

581
00:19:34,640 --> 00:19:37,120
that's what happened with ua parser.js

582
00:19:37,120 --> 00:19:38,720
the maintainer could give access to a

583
00:19:38,720 --> 00:19:40,799
malicious actor

584
00:19:40,799 --> 00:19:42,960
this happened with event stream

585
00:19:42,960 --> 00:19:44,320
maintainers could become malicious

586
00:19:44,320 --> 00:19:45,760
themselves

587
00:19:45,760 --> 00:19:47,840
which is hard to stop

588
00:19:47,840 --> 00:19:49,360
that happened in those those two

589
00:19:49,360 --> 00:19:51,679
examples there maintainers could uh

590
00:19:51,679 --> 00:19:53,600
protest they could use their package to

591
00:19:53,600 --> 00:19:55,919
make a point um maintainers could have

592
00:19:55,919 --> 00:19:57,760
malware on their laptops that steals

593
00:19:57,760 --> 00:19:58,480
their

594
00:19:58,480 --> 00:20:01,280
um their credentials and finally npm

595
00:20:01,280 --> 00:20:03,520
itself doesn't really enforce 2fa so you

596
00:20:03,520 --> 00:20:05,760
know if you reuse your password uh on

597
00:20:05,760 --> 00:20:08,159
another site then um you know then then

598
00:20:08,159 --> 00:20:11,760
you can lose your package that way

599
00:20:13,200 --> 00:20:14,480
uh so then

600
00:20:14,480 --> 00:20:15,760
let's talk about the next one which is

601
00:20:15,760 --> 00:20:17,520
typo squatting

602
00:20:17,520 --> 00:20:20,559
so i'm gonna show you two package names

603
00:20:20,559 --> 00:20:21,919
one of these is

604
00:20:21,919 --> 00:20:23,679
is malware and one of them is the

605
00:20:23,679 --> 00:20:25,360
correct package

606
00:20:25,360 --> 00:20:27,039
raise your hand if you think the first

607
00:20:27,039 --> 00:20:31,280
one is the real package

608
00:20:31,440 --> 00:20:32,559
okay raise your hand if you think the

609
00:20:32,559 --> 00:20:34,960
second one is the real package

610
00:20:34,960 --> 00:20:36,320
okay everyone who raised your hand

611
00:20:36,320 --> 00:20:38,400
you're wrong

612
00:20:38,400 --> 00:20:40,480
yeah the correct package has the worst

613
00:20:40,480 --> 00:20:42,960
name uh the confusing name and this is

614
00:20:42,960 --> 00:20:45,440
the malware and uh and so yeah it's it's

615
00:20:45,440 --> 00:20:47,200
basically you know people need to think

616
00:20:47,200 --> 00:20:49,520
of these package registries that like as

617
00:20:49,520 --> 00:20:51,919
basically a wiki and anyone can take a

618
00:20:51,919 --> 00:20:53,280
you know register a page that hasn't

619
00:20:53,280 --> 00:20:54,480
been registered before and so that's

620
00:20:54,480 --> 00:20:55,919
what happens a lot of the time in these

621
00:20:55,919 --> 00:20:57,919
types of attacks is you just register a

622
00:20:57,919 --> 00:20:59,520
package and you hope that people will

623
00:20:59,520 --> 00:21:00,799
accidentally type it in and you'll get

624
00:21:00,799 --> 00:21:03,840
some installs that way

625
00:21:04,159 --> 00:21:05,520
so that's what happened here and so if

626
00:21:05,520 --> 00:21:07,919
we open up the uh malware again we'll

627
00:21:07,919 --> 00:21:09,600
see it uses an install script because

628
00:21:09,600 --> 00:21:10,400
that's

629
00:21:10,400 --> 00:21:11,520
the most

630
00:21:11,520 --> 00:21:12,960
obvious thing to do why not just run

631
00:21:12,960 --> 00:21:14,480
your code immediately when the user

632
00:21:14,480 --> 00:21:16,640
makes the typo so this is the file that

633
00:21:16,640 --> 00:21:18,159
it's going to run and if you open up the

634
00:21:18,159 --> 00:21:20,240
file what do we find inside

635
00:21:20,240 --> 00:21:22,880
we find this

636
00:21:23,600 --> 00:21:24,720
so

637
00:21:24,720 --> 00:21:26,400
i didn't bother to try to de-obfuscate

638
00:21:26,400 --> 00:21:27,840
this but all i can tell you is i

639
00:21:27,840 --> 00:21:29,120
guarantee you you don't want to run this

640
00:21:29,120 --> 00:21:31,840
on your computer

641
00:21:33,840 --> 00:21:36,159
exactly

642
00:21:36,159 --> 00:21:37,440
so

643
00:21:37,440 --> 00:21:38,799
let's talk next about dependency

644
00:21:38,799 --> 00:21:41,280
confusion so this is similar to typo

645
00:21:41,280 --> 00:21:43,600
squatting this is another technique

646
00:21:43,600 --> 00:21:44,640
that

647
00:21:44,640 --> 00:21:46,480
is closely related but the way this one

648
00:21:46,480 --> 00:21:49,760
works is when a company publishes

649
00:21:49,760 --> 00:21:51,520
packages sometimes they do it to an

650
00:21:51,520 --> 00:21:52,720
internal

651
00:21:52,720 --> 00:21:54,960
npm registry so it's private to their

652
00:21:54,960 --> 00:21:56,000
company

653
00:21:56,000 --> 00:21:58,480
and they may use a name

654
00:21:58,480 --> 00:22:00,559
for those packages um they may use a

655
00:22:00,559 --> 00:22:02,320
name that has not been registered on the

656
00:22:02,320 --> 00:22:03,600
public

657
00:22:03,600 --> 00:22:04,960
registry

658
00:22:04,960 --> 00:22:07,280
and so if an attacker later comes along

659
00:22:07,280 --> 00:22:10,159
and registers the public name

660
00:22:10,159 --> 00:22:12,559
then the internal tools need to be very

661
00:22:12,559 --> 00:22:15,360
careful to always use the internal

662
00:22:15,360 --> 00:22:17,039
version of the package and not the

663
00:22:17,039 --> 00:22:18,720
public version

664
00:22:18,720 --> 00:22:20,480
but some tools make a mistake and they

665
00:22:20,480 --> 00:22:22,240
will say oh if the public version exists

666
00:22:22,240 --> 00:22:24,080
use that one instead of the internal

667
00:22:24,080 --> 00:22:26,159
version and so very simply the attacker

668
00:22:26,159 --> 00:22:27,520
can register the public version and now

669
00:22:27,520 --> 00:22:28,559
they have code running inside the

670
00:22:28,559 --> 00:22:31,200
company like like that right

671
00:22:31,200 --> 00:22:32,720
so this is called a dependency confusion

672
00:22:32,720 --> 00:22:35,440
attack and um you know it's hard to know

673
00:22:35,440 --> 00:22:37,280
for sure like how often this happens but

674
00:22:37,280 --> 00:22:40,000
if you look through the list of packages

675
00:22:40,000 --> 00:22:41,600
that are being published

676
00:22:41,600 --> 00:22:44,080
publicly you can find like very many

677
00:22:44,080 --> 00:22:45,919
examples of probably dependency

678
00:22:45,919 --> 00:22:47,840
confusion attacks happening so this is

679
00:22:47,840 --> 00:22:49,280
just a list of we were looking through

680
00:22:49,280 --> 00:22:51,760
which packages have been deleted from

681
00:22:51,760 --> 00:22:54,000
npm recently due to being due to them

682
00:22:54,000 --> 00:22:56,080
being malware and we found all these

683
00:22:56,080 --> 00:22:58,080
packages here which have names that

684
00:22:58,080 --> 00:23:00,880
appear to be the names of uh you know

685
00:23:00,880 --> 00:23:03,440
internal company packages so like stuff

686
00:23:03,440 --> 00:23:06,960
from yahoo your id 18f palantir

687
00:23:06,960 --> 00:23:09,200
duckduckgo shippo

688
00:23:09,200 --> 00:23:10,799
just you know and then even more like

689
00:23:10,799 --> 00:23:11,679
wix

690
00:23:11,679 --> 00:23:14,159
unity game engine grubhub like people

691
00:23:14,159 --> 00:23:15,840
just publish these and then

692
00:23:15,840 --> 00:23:16,799
they

693
00:23:16,799 --> 00:23:18,400
end up getting installed by internal

694
00:23:18,400 --> 00:23:22,240
tools and run within the company

695
00:23:22,240 --> 00:23:25,360
um this is a very bad one

696
00:23:27,520 --> 00:23:28,960
okay then uh the next one is install

697
00:23:28,960 --> 00:23:30,080
scripts we've already been talking about

698
00:23:30,080 --> 00:23:31,760
install scripts a lot but i'm just gonna

699
00:23:31,760 --> 00:23:33,760
mention again because most malware is

700
00:23:33,760 --> 00:23:36,640
actually inside install scripts and

701
00:23:36,640 --> 00:23:38,960
there's a paper uh published this year

702
00:23:38,960 --> 00:23:41,279
that found almost 94 of malicious

703
00:23:41,279 --> 00:23:43,039
packages used at least one install

704
00:23:43,039 --> 00:23:44,080
script

705
00:23:44,080 --> 00:23:45,679
and unfortunately

706
00:23:45,679 --> 00:23:46,880
this feature

707
00:23:46,880 --> 00:23:48,880
has some legitimate uses and so it's

708
00:23:48,880 --> 00:23:51,120
actually pretty hard to

709
00:23:51,120 --> 00:23:53,279
um just disable this feature and have

710
00:23:53,279 --> 00:23:55,200
your project keep working

711
00:23:55,200 --> 00:23:56,799
um so

712
00:23:56,799 --> 00:23:59,200
this is this is a huge attack vector

713
00:23:59,200 --> 00:24:00,559
and again like we said this is kind of

714
00:24:00,559 --> 00:24:01,600
how you do it

715
00:24:01,600 --> 00:24:02,880
in this example here they're actually

716
00:24:02,880 --> 00:24:04,080
using

717
00:24:04,080 --> 00:24:05,919
three different

718
00:24:05,919 --> 00:24:07,039
attack

719
00:24:07,039 --> 00:24:08,080
payloads

720
00:24:08,080 --> 00:24:09,760
running them in parallel

721
00:24:09,760 --> 00:24:11,279
and we'll we'll dig into those in a

722
00:24:11,279 --> 00:24:12,480
second to see

723
00:24:12,480 --> 00:24:14,320
what they do but

724
00:24:14,320 --> 00:24:16,480
let's talk about data exfiltration

725
00:24:16,480 --> 00:24:18,640
so this is very common uh thing that

726
00:24:18,640 --> 00:24:21,360
attacker attackers want to do

727
00:24:21,360 --> 00:24:23,120
and if we actually now i'll show you

728
00:24:23,120 --> 00:24:24,480
these three scripts here you can see

729
00:24:24,480 --> 00:24:25,600
kind of what they do this is data

730
00:24:25,600 --> 00:24:27,279
exfiltration so this is a very very

731
00:24:27,279 --> 00:24:29,919
common um uh thing that you'll see when

732
00:24:29,919 --> 00:24:31,760
you look at the stuff that's malware on

733
00:24:31,760 --> 00:24:34,080
npm and it's not even tricky like you

734
00:24:34,080 --> 00:24:35,520
can just read it it's very clear what

735
00:24:35,520 --> 00:24:37,520
it's doing here it's making an http

736
00:24:37,520 --> 00:24:40,640
request to this ip address and

737
00:24:40,640 --> 00:24:42,360
the host is you know some

738
00:24:42,360 --> 00:24:45,520
pipedream.net url which is their their

739
00:24:45,520 --> 00:24:47,279
site they're using to collect

740
00:24:47,279 --> 00:24:48,640
the um

741
00:24:48,640 --> 00:24:51,039
you know the messages from their

742
00:24:51,039 --> 00:24:52,880
victims and then the data that it's

743
00:24:52,880 --> 00:24:56,640
sending is uh process.n which is the

744
00:24:56,640 --> 00:24:58,320
object that represents you know all the

745
00:24:58,320 --> 00:24:59,840
environment variables in the environment

746
00:24:59,840 --> 00:25:01,279
so it's going to steal all the tokens

747
00:25:01,279 --> 00:25:04,159
and api keys and whatever other stuff is

748
00:25:04,159 --> 00:25:05,760
is set

749
00:25:05,760 --> 00:25:08,320
as an environment variable

750
00:25:08,320 --> 00:25:09,279
and then you know they don't want to

751
00:25:09,279 --> 00:25:11,120
rely just on http because maybe you have

752
00:25:11,120 --> 00:25:12,400
a firewall or something that would catch

753
00:25:12,400 --> 00:25:14,000
this or maybe this you know there's some

754
00:25:14,000 --> 00:25:15,200
way this would be logged and so they

755
00:25:15,200 --> 00:25:18,640
also often um use uh multiple methods so

756
00:25:18,640 --> 00:25:21,039
this piece of malware also uses dns as

757
00:25:21,039 --> 00:25:22,480
an exfiltration

758
00:25:22,480 --> 00:25:24,320
mechanism so they do it in a clever way

759
00:25:24,320 --> 00:25:28,480
they make a dns a custom dns resolver

760
00:25:28,480 --> 00:25:29,919
so they're basically saying use this ip

761
00:25:29,919 --> 00:25:32,000
address as the dns server

762
00:25:32,000 --> 00:25:34,240
and then they do a lookup for

763
00:25:34,240 --> 00:25:35,760
a domain

764
00:25:35,760 --> 00:25:38,000
that will go to that server and then the

765
00:25:38,000 --> 00:25:39,760
domain they look up is

766
00:25:39,760 --> 00:25:40,880
they loop through every environment

767
00:25:40,880 --> 00:25:41,760
variable

768
00:25:41,760 --> 00:25:44,640
and they make the subdomain uh be

769
00:25:44,640 --> 00:25:45,919
the you know

770
00:25:45,919 --> 00:25:48,320
the contents of the of the key so

771
00:25:48,320 --> 00:25:49,679
basically they're doing a dns lookup and

772
00:25:49,679 --> 00:25:50,960
then the data is going out through that

773
00:25:50,960 --> 00:25:54,520
dns lookup

774
00:25:57,120 --> 00:25:59,120
uh and then finally uh data destruction

775
00:25:59,120 --> 00:26:01,360
or ransom is very um another kind of

776
00:26:01,360 --> 00:26:03,039
thing that you'll see a lot of attackers

777
00:26:03,039 --> 00:26:05,200
doing and i won't go too much into this

778
00:26:05,200 --> 00:26:06,320
example because i already mentioned it

779
00:26:06,320 --> 00:26:09,120
but this is the code from that um that

780
00:26:09,120 --> 00:26:11,360
piece of malware that would uh replace

781
00:26:11,360 --> 00:26:13,279
all your files with the heart emoji so

782
00:26:13,279 --> 00:26:15,279
this one is sort of obfuscated but the

783
00:26:15,279 --> 00:26:17,679
most important line is if you go to

784
00:26:17,679 --> 00:26:19,200
later in the file you go to this line

785
00:26:19,200 --> 00:26:20,880
here you'll see that it's basically

786
00:26:20,880 --> 00:26:22,960
writing

787
00:26:22,960 --> 00:26:26,000
over your files with the single heart

788
00:26:26,000 --> 00:26:27,120
character

789
00:26:27,120 --> 00:26:30,158
to destroy all your data

790
00:26:32,320 --> 00:26:33,520
so anyway those are kind of some of the

791
00:26:33,520 --> 00:26:34,480
techniques i think are the most

792
00:26:34,480 --> 00:26:36,640
interesting ones um now let's talk a

793
00:26:36,640 --> 00:26:38,000
little bit about how you can protect

794
00:26:38,000 --> 00:26:39,760
your application

795
00:26:39,760 --> 00:26:41,520
so first let's talk about what won't

796
00:26:41,520 --> 00:26:42,960
work

797
00:26:42,960 --> 00:26:45,200
i think vulnerability scanning is a big

798
00:26:45,200 --> 00:26:47,760
red herring um it's it's really not

799
00:26:47,760 --> 00:26:49,760
enough to solve the problem and the

800
00:26:49,760 --> 00:26:51,279
entire security industry is really

801
00:26:51,279 --> 00:26:52,400
obsessed with scanning for known

802
00:26:52,400 --> 00:26:53,760
vulnerabilities

803
00:26:53,760 --> 00:26:54,640
and

804
00:26:54,640 --> 00:26:56,960
you know it's fine it's it's good to do

805
00:26:56,960 --> 00:26:58,960
that i guess but it's an approach which

806
00:26:58,960 --> 00:27:00,640
is too reactive to actually stop a

807
00:27:00,640 --> 00:27:02,159
supply chain attack

808
00:27:02,159 --> 00:27:03,760
because vulnerabilities can take weeks

809
00:27:03,760 --> 00:27:06,559
or months to be discovered and uh you

810
00:27:06,559 --> 00:27:07,919
know we're merging dependencies a lot

811
00:27:07,919 --> 00:27:10,480
faster than that uh oftentimes and so

812
00:27:10,480 --> 00:27:12,880
there's not enough time for a cve which

813
00:27:12,880 --> 00:27:14,480
is the you know officially kind of

814
00:27:14,480 --> 00:27:16,720
reported vulnerability to be created and

815
00:27:16,720 --> 00:27:18,000
make its way into the tools that

816
00:27:18,000 --> 00:27:19,279
everyone is using

817
00:27:19,279 --> 00:27:20,399
so

818
00:27:20,399 --> 00:27:22,000
long story short is a vulnerability

819
00:27:22,000 --> 00:27:24,399
scanner is not going to stop a active

820
00:27:24,399 --> 00:27:27,279
supply chain attack

821
00:27:28,640 --> 00:27:30,080
so vulnerabilities are very different

822
00:27:30,080 --> 00:27:32,399
than supply chain attacks

823
00:27:32,399 --> 00:27:34,399
vulnerabilities are accidentally

824
00:27:34,399 --> 00:27:36,399
introduced by maintainers by the good

825
00:27:36,399 --> 00:27:38,480
guys and they have varying levels of

826
00:27:38,480 --> 00:27:40,480
risk so sometimes you have a

827
00:27:40,480 --> 00:27:42,880
vulnerability that's very low or medium

828
00:27:42,880 --> 00:27:45,120
severity and it's actually okay to just

829
00:27:45,120 --> 00:27:47,840
ship those to production and

830
00:27:47,840 --> 00:27:50,320
not worry about solving them immediately

831
00:27:50,320 --> 00:27:52,159
um because maybe an attacker won't find

832
00:27:52,159 --> 00:27:54,159
it won't exploit it or maybe it's just

833
00:27:54,159 --> 00:27:55,520
you know a minor risk maybe it's a

834
00:27:55,520 --> 00:27:57,039
denial of service or something like that

835
00:27:57,039 --> 00:27:57,919
it's not

836
00:27:57,919 --> 00:28:00,240
you know uh uh

837
00:28:00,240 --> 00:28:01,919
you know it's not good but it's not

838
00:28:01,919 --> 00:28:04,240
gonna be the end of the world if if you

839
00:28:04,240 --> 00:28:05,760
um if you if you ship it because it may

840
00:28:05,760 --> 00:28:07,039
not be discovered

841
00:28:07,039 --> 00:28:08,720
and you know a lot of times we have so

842
00:28:08,720 --> 00:28:10,240
many vulnerabilities being reported by

843
00:28:10,240 --> 00:28:12,880
this tooling that we ship like i mean a

844
00:28:12,880 --> 00:28:15,039
lot of the companies i've talked to

845
00:28:15,039 --> 00:28:16,320
know that they have like 1 000

846
00:28:16,320 --> 00:28:17,679
vulnerabilities in production right and

847
00:28:17,679 --> 00:28:18,880
they're working to get the number down

848
00:28:18,880 --> 00:28:20,720
but like it's you know it's a project

849
00:28:20,720 --> 00:28:22,320
that's going to take many months to do

850
00:28:22,320 --> 00:28:25,360
and so you can have vulnerabilities um

851
00:28:25,360 --> 00:28:27,120
in your software and they may not may

852
00:28:27,120 --> 00:28:29,200
not be exploited or even exploitable or

853
00:28:29,200 --> 00:28:31,520
even reachable through public api

854
00:28:31,520 --> 00:28:33,200
endpoints so maybe that you know they're

855
00:28:33,200 --> 00:28:34,960
not even really going to be

856
00:28:34,960 --> 00:28:37,919
affecting you in any way

857
00:28:37,919 --> 00:28:39,440
on the other hand a supply chain attack

858
00:28:39,440 --> 00:28:41,279
is very different so

859
00:28:41,279 --> 00:28:43,039
a supply chain attack is malware and

860
00:28:43,039 --> 00:28:44,720
it's intentionally introduced into the

861
00:28:44,720 --> 00:28:46,799
package it's usually not introduced by

862
00:28:46,799 --> 00:28:48,080
the maintainer it's usually somebody

863
00:28:48,080 --> 00:28:50,159
else although it can be the maintainer

864
00:28:50,159 --> 00:28:51,600
and it will always end badly if you ship

865
00:28:51,600 --> 00:28:53,200
malware to production

866
00:28:53,200 --> 00:28:54,960
you don't have a few days or weeks to

867
00:28:54,960 --> 00:28:57,440
solve the issue you will be owned the

868
00:28:57,440 --> 00:28:59,440
moment that it runs so you need to catch

869
00:28:59,440 --> 00:29:01,919
it before you install it

870
00:29:01,919 --> 00:29:03,120
so this is the key difference so

871
00:29:03,120 --> 00:29:04,720
basically to summarize a vulnerability

872
00:29:04,720 --> 00:29:06,080
scanner will not catch the next supply

873
00:29:06,080 --> 00:29:08,720
chain attack so you know by all means

874
00:29:08,720 --> 00:29:10,399
keep using vulnerability scanners keep

875
00:29:10,399 --> 00:29:12,159
using you know dependabot or whatever

876
00:29:12,159 --> 00:29:14,559
tool you're using it's fine but know

877
00:29:14,559 --> 00:29:16,480
that that's not protecting you from the

878
00:29:16,480 --> 00:29:18,240
supply chain attacks so what can you

879
00:29:18,240 --> 00:29:20,559
actually do to protect yourself from

880
00:29:20,559 --> 00:29:22,960
supply chain attacks

881
00:29:22,960 --> 00:29:23,760
so

882
00:29:23,760 --> 00:29:25,600
this is the part where i just have ideas

883
00:29:25,600 --> 00:29:28,159
no no perfect solutions

884
00:29:28,159 --> 00:29:29,679
but the first one is i think we should

885
00:29:29,679 --> 00:29:33,039
support open source maintainers better

886
00:29:33,039 --> 00:29:35,279
uh 23 of open source projects have only

887
00:29:35,279 --> 00:29:37,440
one developer contributing the bulk of

888
00:29:37,440 --> 00:29:38,720
the code

889
00:29:38,720 --> 00:29:40,799
so 94 of projects have fewer than 10

890
00:29:40,799 --> 00:29:42,640
developers accounting for more than 90

891
00:29:42,640 --> 00:29:44,640
of the lines of code

892
00:29:44,640 --> 00:29:45,919
so you know you can see these projects

893
00:29:45,919 --> 00:29:47,200
are basically supported by a handful of

894
00:29:47,200 --> 00:29:49,360
people

895
00:29:49,360 --> 00:29:50,960
um

896
00:29:50,960 --> 00:29:52,720
yeah and you know there's actually a lot

897
00:29:52,720 --> 00:29:54,720
of parallels here to um another place

898
00:29:54,720 --> 00:29:55,840
where you'll see a lot of these types of

899
00:29:55,840 --> 00:29:58,080
attacks happening which is the browser

900
00:29:58,080 --> 00:30:00,080
extension ecosystem so if you look at

901
00:30:00,080 --> 00:30:02,399
like the chrome

902
00:30:02,399 --> 00:30:04,240
extension web you know web store or

903
00:30:04,240 --> 00:30:05,679
whatever they call it

904
00:30:05,679 --> 00:30:07,039
you'll see a lot of people have created

905
00:30:07,039 --> 00:30:09,039
extensions which have millions of users

906
00:30:09,039 --> 00:30:10,960
but they have no

907
00:30:10,960 --> 00:30:13,600
no way to make money from it and

908
00:30:13,600 --> 00:30:15,120
maybe after a few years they get tired

909
00:30:15,120 --> 00:30:16,960
of working on it and so some company

910
00:30:16,960 --> 00:30:18,480
will come along and say

911
00:30:18,480 --> 00:30:20,720
i'd like to buy this extension from you

912
00:30:20,720 --> 00:30:21,600
for

913
00:30:21,600 --> 00:30:23,440
you know 10 20

914
00:30:23,440 --> 00:30:26,960
000 uh you know dollars and uh the

915
00:30:26,960 --> 00:30:28,559
developer says okay yeah i'm tired of

916
00:30:28,559 --> 00:30:30,000
working on this thing anyway i never

917
00:30:30,000 --> 00:30:32,080
made a cent from it and uh i don't care

918
00:30:32,080 --> 00:30:34,640
anymore so he sure give me the money and

919
00:30:34,640 --> 00:30:36,320
when somebody buys it they they actually

920
00:30:36,320 --> 00:30:38,399
uh you know can add a tracking code or

921
00:30:38,399 --> 00:30:40,240
or or change the behavior of the the

922
00:30:40,240 --> 00:30:42,880
extension in some way so

923
00:30:42,880 --> 00:30:46,080
um so it's a very similar um situation

924
00:30:46,080 --> 00:30:49,879
here with open source dependencies

925
00:30:51,440 --> 00:30:53,919
yeah finally uh or or next uh i think we

926
00:30:53,919 --> 00:30:55,760
should really change how we think about

927
00:30:55,760 --> 00:30:56,960
dependencies we need to shift our

928
00:30:56,960 --> 00:30:58,880
mindset around it i think a lot of

929
00:30:58,880 --> 00:31:00,399
people think if the code is inside of a

930
00:31:00,399 --> 00:31:02,480
dependency then it's not my problem you

931
00:31:02,480 --> 00:31:04,559
know if it if i

932
00:31:04,559 --> 00:31:05,919
if there's a bug or something in a

933
00:31:05,919 --> 00:31:07,360
dependency it's not my fault you know

934
00:31:07,360 --> 00:31:09,519
it's my dependencies prop fault right

935
00:31:09,519 --> 00:31:11,519
but the thing is you're shipping this

936
00:31:11,519 --> 00:31:12,720
code into production right you're

937
00:31:12,720 --> 00:31:14,080
shipping it in an app that your users

938
00:31:14,080 --> 00:31:16,080
are going to use um so you're really

939
00:31:16,080 --> 00:31:18,799
responsible for it doesn't matter

940
00:31:18,799 --> 00:31:20,960
whether you typed in the code on your

941
00:31:20,960 --> 00:31:23,440
own keyboard uh you know yourself or

942
00:31:23,440 --> 00:31:24,720
whether the code came in through a

943
00:31:24,720 --> 00:31:26,880
dependency at the end of the day all

944
00:31:26,880 --> 00:31:28,559
that code gets bundled up into a single

945
00:31:28,559 --> 00:31:31,120
process and it runs as one process so

946
00:31:31,120 --> 00:31:32,399
effectively you know that third party

947
00:31:32,399 --> 00:31:33,840
code is your app

948
00:31:33,840 --> 00:31:36,799
so you're responsible for it

949
00:31:36,799 --> 00:31:39,039
so if we think about it that way then we

950
00:31:39,039 --> 00:31:42,080
we sort of shift shifts how we approach

951
00:31:42,080 --> 00:31:43,840
the problem

952
00:31:43,840 --> 00:31:45,760
and if you open up the most popular open

953
00:31:45,760 --> 00:31:47,919
source license the mit license you'll

954
00:31:47,919 --> 00:31:49,679
actually see it literally says this in

955
00:31:49,679 --> 00:31:51,840
here it says the software is provided as

956
00:31:51,840 --> 00:31:54,000
is without warranty of any kind

957
00:31:54,000 --> 00:31:56,159
expressed or implied so even the mit

958
00:31:56,159 --> 00:31:58,559
license is saying it is not our problem

959
00:31:58,559 --> 00:32:00,399
if this code has problems it's your

960
00:32:00,399 --> 00:32:02,719
problem

961
00:32:03,840 --> 00:32:05,919
uh okay the next idea is to sort of okay

962
00:32:05,919 --> 00:32:08,559
so so okay say we say we now uh you know

963
00:32:08,559 --> 00:32:09,919
accept this and we're trying to okay we

964
00:32:09,919 --> 00:32:11,039
want to do something about it so what do

965
00:32:11,039 --> 00:32:12,559
we do here

966
00:32:12,559 --> 00:32:14,159
we need to update our dependencies at

967
00:32:14,159 --> 00:32:15,919
the right cadence

968
00:32:15,919 --> 00:32:17,600
so

969
00:32:17,600 --> 00:32:19,760
a lot of people these days are using

970
00:32:19,760 --> 00:32:21,840
tools like dependabot to keep their

971
00:32:21,840 --> 00:32:24,080
dependencies at the latest version

972
00:32:24,080 --> 00:32:26,960
and this is usually a good idea uh you

973
00:32:26,960 --> 00:32:29,360
know the the thinking goes the quicker

974
00:32:29,360 --> 00:32:30,640
you update your dependencies you know

975
00:32:30,640 --> 00:32:33,840
the more likely you will be um

976
00:32:33,840 --> 00:32:36,480
taking in the security fixes and the

977
00:32:36,480 --> 00:32:39,519
improvements and um if a new security uh

978
00:32:39,519 --> 00:32:41,279
fix comes out if you're on a newer

979
00:32:41,279 --> 00:32:43,200
version it should be easier to update to

980
00:32:43,200 --> 00:32:45,360
the to the fixed version

981
00:32:45,360 --> 00:32:47,760
you know ins instead of being like years

982
00:32:47,760 --> 00:32:48,960
behind on an old version it's going to

983
00:32:48,960 --> 00:32:50,399
be a lot harder to update when you need

984
00:32:50,399 --> 00:32:52,880
to to fix a critical issue

985
00:32:52,880 --> 00:32:54,559
so this is good

986
00:32:54,559 --> 00:32:56,559
however the quicker that you update your

987
00:32:56,559 --> 00:32:59,519
dependencies the fewer eyeballs that

988
00:32:59,519 --> 00:33:02,159
have had a chance to look at that code

989
00:33:02,159 --> 00:33:04,080
so you know in this example here you

990
00:33:04,080 --> 00:33:05,120
know um

991
00:33:05,120 --> 00:33:07,600
this this you know this dependable is

992
00:33:07,600 --> 00:33:10,399
configured to to to send a a pull

993
00:33:10,399 --> 00:33:11,440
request

994
00:33:11,440 --> 00:33:13,919
anytime um you know a new dependency

995
00:33:13,919 --> 00:33:15,679
comes out and so you get these within 24

996
00:33:15,679 --> 00:33:17,840
hours of a new version coming out and so

997
00:33:17,840 --> 00:33:19,519
if you click merge

998
00:33:19,519 --> 00:33:21,679
you're basically running code that has

999
00:33:21,679 --> 00:33:23,919
only been live for you know less than a

1000
00:33:23,919 --> 00:33:25,760
day and so very few people have had a

1001
00:33:25,760 --> 00:33:27,440
chance to look at it and

1002
00:33:27,440 --> 00:33:29,120
check for problems and check for for

1003
00:33:29,120 --> 00:33:32,799
malware or other types of attacks

1004
00:33:32,880 --> 00:33:34,559
so the question is then okay how quickly

1005
00:33:34,559 --> 00:33:36,080
should you update

1006
00:33:36,080 --> 00:33:36,880
and

1007
00:33:36,880 --> 00:33:38,240
this is a very hard question this is

1008
00:33:38,240 --> 00:33:39,360
something that we struggled with a lot

1009
00:33:39,360 --> 00:33:41,679
when we were building uh

1010
00:33:41,679 --> 00:33:42,880
um

1011
00:33:42,880 --> 00:33:45,600
when we were building various uh tools

1012
00:33:45,600 --> 00:33:47,840
and websites um so i think you can think

1013
00:33:47,840 --> 00:33:49,360
of it as a continuum

1014
00:33:49,360 --> 00:33:52,559
uh from slow to fast

1015
00:33:52,559 --> 00:33:54,480
if you update too slow then you really

1016
00:33:54,480 --> 00:33:56,720
expose yourself to known vulnerabilities

1017
00:33:56,720 --> 00:33:57,760
because you're running code that

1018
00:33:57,760 --> 00:33:59,679
everyone knows has vulnerabilities so

1019
00:33:59,679 --> 00:34:01,360
you don't want to be too slow

1020
00:34:01,360 --> 00:34:02,559
but on the other hand you don't be too

1021
00:34:02,559 --> 00:34:04,000
fast if you update too fast then you're

1022
00:34:04,000 --> 00:34:05,679
now exposing yourself to supply chain

1023
00:34:05,679 --> 00:34:07,760
attacks because you're running code that

1024
00:34:07,760 --> 00:34:09,599
very few people have even read right it

1025
00:34:09,599 --> 00:34:10,639
could have been published you know a few

1026
00:34:10,639 --> 00:34:12,480
hours ago and so you're installing that

1027
00:34:12,480 --> 00:34:14,000
version you're running it and you

1028
00:34:14,000 --> 00:34:15,199
haven't read it you haven't looked at

1029
00:34:15,199 --> 00:34:16,560
the code no one else has looked at the

1030
00:34:16,560 --> 00:34:18,079
code so you're just hoping for the best

1031
00:34:18,079 --> 00:34:21,520
it doesn't seem like a good idea right

1032
00:34:21,520 --> 00:34:23,520
so so we're you know i don't have an

1033
00:34:23,520 --> 00:34:25,599
answer here this trade-offs no perfect

1034
00:34:25,599 --> 00:34:28,480
solution um one thing i've seen um

1035
00:34:28,480 --> 00:34:30,399
various so there's a

1036
00:34:30,399 --> 00:34:31,679
product you guys probably all know about

1037
00:34:31,679 --> 00:34:34,239
called signal the signal messaging app

1038
00:34:34,239 --> 00:34:36,639
their desktop app is actually written in

1039
00:34:36,639 --> 00:34:39,760
electron it uses javascript dependencies

1040
00:34:39,760 --> 00:34:40,719
and

1041
00:34:40,719 --> 00:34:42,079
their policy is actually quite

1042
00:34:42,079 --> 00:34:43,280
interesting

1043
00:34:43,280 --> 00:34:45,359
in terms of this balance so what they do

1044
00:34:45,359 --> 00:34:46,879
is they keep all their dependencies six

1045
00:34:46,879 --> 00:34:50,000
months out of date except for critical

1046
00:34:50,000 --> 00:34:51,679
security updates

1047
00:34:51,679 --> 00:34:53,918
so they're always six months behind

1048
00:34:53,918 --> 00:34:55,760
and they assume that any supply chain

1049
00:34:55,760 --> 00:34:57,359
attacks will be discovered in that six

1050
00:34:57,359 --> 00:34:59,280
month period hopefully

1051
00:34:59,280 --> 00:35:00,640
and then

1052
00:35:00,640 --> 00:35:02,480
and then if there's a critical you know

1053
00:35:02,480 --> 00:35:03,920
known vulnerability that comes out they

1054
00:35:03,920 --> 00:35:05,760
will they will specifically update that

1055
00:35:05,760 --> 00:35:07,280
one dependency to fix the critical

1056
00:35:07,280 --> 00:35:08,560
vulnerability

1057
00:35:08,560 --> 00:35:10,480
and that's their policy so that's that's

1058
00:35:10,480 --> 00:35:12,640
one idea of something you could do

1059
00:35:12,640 --> 00:35:14,320
but again trade-offs there's no perfect

1060
00:35:14,320 --> 00:35:17,280
solution here

1061
00:35:17,440 --> 00:35:19,680
yeah

1062
00:35:19,760 --> 00:35:21,680
here's one that you can do

1063
00:35:21,680 --> 00:35:23,920
so you can dig deeper before choosing a

1064
00:35:23,920 --> 00:35:25,280
dependency

1065
00:35:25,280 --> 00:35:27,599
and i really like this idea because

1066
00:35:27,599 --> 00:35:31,280
really if you read the code um you

1067
00:35:31,280 --> 00:35:34,320
you know you'll um be 100 sure what it's

1068
00:35:34,320 --> 00:35:36,880
doing uh before you run it and so uh

1069
00:35:36,880 --> 00:35:39,119
ideally you audit all your dependencies

1070
00:35:39,119 --> 00:35:41,359
right

1071
00:35:42,079 --> 00:35:43,280
yeah so

1072
00:35:43,280 --> 00:35:44,720
how closely should you audit your

1073
00:35:44,720 --> 00:35:46,160
dependencies is the question right you

1074
00:35:46,160 --> 00:35:48,240
could do a full audit right and uh

1075
00:35:48,240 --> 00:35:50,079
obviously you know you're not gonna do

1076
00:35:50,079 --> 00:35:52,480
that that's why you were laughing um

1077
00:35:52,480 --> 00:35:54,079
there actually are a few companies that

1078
00:35:54,079 --> 00:35:56,240
do do full audits um so i've been

1079
00:35:56,240 --> 00:35:57,839
talking to a lot of companies about this

1080
00:35:57,839 --> 00:36:00,240
and um you know for example google

1081
00:36:00,240 --> 00:36:02,480
actually has a team of people that uh

1082
00:36:02,480 --> 00:36:04,560
the security team that

1083
00:36:04,560 --> 00:36:06,800
has to effectively audit any open source

1084
00:36:06,800 --> 00:36:09,440
that google uses they bring it in to

1085
00:36:09,440 --> 00:36:11,359
they check it in to their own repo and

1086
00:36:11,359 --> 00:36:13,359
treat it as like their own code so they

1087
00:36:13,359 --> 00:36:15,119
just they vendor it in it's their code

1088
00:36:15,119 --> 00:36:17,359
now they're responsible for it um after

1089
00:36:17,359 --> 00:36:19,280
they do a full audit

1090
00:36:19,280 --> 00:36:20,800
the problem is this is kind of it's a

1091
00:36:20,800 --> 00:36:24,160
lot of work uh it's it's a slow process

1092
00:36:24,160 --> 00:36:26,160
right it's expensive in terms of time

1093
00:36:26,160 --> 00:36:28,480
and number of people needed to do this

1094
00:36:28,480 --> 00:36:30,400
um and the other thing too is um you

1095
00:36:30,400 --> 00:36:31,680
know the whole reason why you're using

1096
00:36:31,680 --> 00:36:32,960
open source a lot of the time is you

1097
00:36:32,960 --> 00:36:34,400
don't want to understand this problem

1098
00:36:34,400 --> 00:36:35,680
like you're trying to

1099
00:36:35,680 --> 00:36:38,000
um you don't care like you i don't want

1100
00:36:38,000 --> 00:36:39,280
to read the code i just want my problem

1101
00:36:39,280 --> 00:36:41,359
solved i'm not an expert in this topic

1102
00:36:41,359 --> 00:36:42,400
if i was an expert i would have just

1103
00:36:42,400 --> 00:36:44,160
written it myself i just want the

1104
00:36:44,160 --> 00:36:45,680
problem solved so you don't want to read

1105
00:36:45,680 --> 00:36:47,040
the code right that's kind of defeating

1106
00:36:47,040 --> 00:36:49,359
the point of of open source for for a

1107
00:36:49,359 --> 00:36:51,839
lot of people okay so

1108
00:36:51,839 --> 00:36:55,359
or at least defeating the point of of um

1109
00:36:55,359 --> 00:36:56,880
of yeah of using these dependencies to

1110
00:36:56,880 --> 00:36:58,800
make your your your project go faster

1111
00:36:58,800 --> 00:37:01,040
right um so this is not the best

1112
00:37:01,040 --> 00:37:02,720
solution um and then finally obviously

1113
00:37:02,720 --> 00:37:04,079
doing nothing is what most of us are

1114
00:37:04,079 --> 00:37:05,760
doing today and and that has its own

1115
00:37:05,760 --> 00:37:07,520
problems uh it means you're completely

1116
00:37:07,520 --> 00:37:09,440
vulnerable to supply chain attacks it's

1117
00:37:09,440 --> 00:37:10,480
risky

1118
00:37:10,480 --> 00:37:12,000
and it's expensive in a different way

1119
00:37:12,000 --> 00:37:13,440
it's expensive in terms of you know

1120
00:37:13,440 --> 00:37:15,760
losing your users trust or losing your

1121
00:37:15,760 --> 00:37:17,760
users data or getting your own computer

1122
00:37:17,760 --> 00:37:20,560
compromised and uh losing all of your

1123
00:37:20,560 --> 00:37:22,880
important files and and your your data

1124
00:37:22,880 --> 00:37:25,119
that you that is very personal to you

1125
00:37:25,119 --> 00:37:27,520
and so it's expensive in a different way

1126
00:37:27,520 --> 00:37:28,960
so um

1127
00:37:28,960 --> 00:37:30,720
you know again there's like a trade-off

1128
00:37:30,720 --> 00:37:33,040
here um i think we can actually do

1129
00:37:33,040 --> 00:37:34,560
something in the middle though

1130
00:37:34,560 --> 00:37:36,880
here and we can do kind of a semi-audit

1131
00:37:36,880 --> 00:37:39,520
using automation and actually catch the

1132
00:37:39,520 --> 00:37:41,760
most risky and highest highest risk

1133
00:37:41,760 --> 00:37:43,440
dependencies and so that's actually what

1134
00:37:43,440 --> 00:37:44,400
i'm going to

1135
00:37:44,400 --> 00:37:46,240
explain here

1136
00:37:46,240 --> 00:37:47,040
so

1137
00:37:47,040 --> 00:37:48,720
you know most of us we have some process

1138
00:37:48,720 --> 00:37:50,560
for choosing a dependency we don't just

1139
00:37:50,560 --> 00:37:52,560
you know use the first one that we find

1140
00:37:52,560 --> 00:37:54,400
usually we do a little bit of

1141
00:37:54,400 --> 00:37:56,320
research we say okay does this

1142
00:37:56,320 --> 00:37:59,200
dependency get the job done for me

1143
00:37:59,200 --> 00:38:02,000
does it uh have an open source license

1144
00:38:02,000 --> 00:38:04,480
uh does it have good documentation

1145
00:38:04,480 --> 00:38:06,160
uh does it have a lot of downloads and a

1146
00:38:06,160 --> 00:38:08,560
lot of stars or whatever um does it have

1147
00:38:08,560 --> 00:38:11,280
recent commits so it's maintained does

1148
00:38:11,280 --> 00:38:13,200
it have maybe types if i use typescript

1149
00:38:13,200 --> 00:38:15,760
or whatever um does it have tests so you

1150
00:38:15,760 --> 00:38:17,119
do a little bit of poking around maybe

1151
00:38:17,119 --> 00:38:18,560
you spend five minutes you investigate

1152
00:38:18,560 --> 00:38:19,920
it and then you say okay i'm going to

1153
00:38:19,920 --> 00:38:21,599
use this dependency it's the one for me

1154
00:38:21,599 --> 00:38:23,359
right

1155
00:38:23,359 --> 00:38:25,680
but i think in 2022 with the rise of

1156
00:38:25,680 --> 00:38:26,880
supply chain attacks we need to go

1157
00:38:26,880 --> 00:38:30,240
beyond this basic set of of checks we

1158
00:38:30,240 --> 00:38:32,800
really should be should be asking um

1159
00:38:32,800 --> 00:38:34,000
much more

1160
00:38:34,000 --> 00:38:37,280
uh pertinent questions so we should ask

1161
00:38:37,280 --> 00:38:38,720
if i install this package is it gonna

1162
00:38:38,720 --> 00:38:40,000
run a shell script on my computer

1163
00:38:40,000 --> 00:38:41,040
immediately

1164
00:38:41,040 --> 00:38:42,079
right

1165
00:38:42,079 --> 00:38:43,599
it doesn't have native code does it have

1166
00:38:43,599 --> 00:38:45,280
an executable inside where i can't even

1167
00:38:45,280 --> 00:38:46,560
audit the file if i wanted to it's a

1168
00:38:46,560 --> 00:38:47,920
binary right

1169
00:38:47,920 --> 00:38:49,599
does it talk to the network when i run

1170
00:38:49,599 --> 00:38:50,560
it right

1171
00:38:50,560 --> 00:38:52,240
because if you're installing a uh you

1172
00:38:52,240 --> 00:38:53,359
know

1173
00:38:53,359 --> 00:38:55,839
a date picker web component right that

1174
00:38:55,839 --> 00:38:58,000
should not be making http requests right

1175
00:38:58,000 --> 00:38:59,920
that's a ui component right if you're

1176
00:38:59,920 --> 00:39:01,200
installing something that should not be

1177
00:39:01,200 --> 00:39:02,400
talking to the network you should know

1178
00:39:02,400 --> 00:39:04,800
if it is talking to the network

1179
00:39:04,800 --> 00:39:07,599
does the package run shell commands

1180
00:39:07,599 --> 00:39:10,000
does it read your environment variables

1181
00:39:10,000 --> 00:39:11,839
does it gather telemetry does it phone

1182
00:39:11,839 --> 00:39:14,480
home data to the maintainer does it

1183
00:39:14,480 --> 00:39:16,640
contain giant blobs of obfuscated code

1184
00:39:16,640 --> 00:39:17,920
which you don't even know what they do

1185
00:39:17,920 --> 00:39:19,599
right so these are things that you could

1186
00:39:19,599 --> 00:39:20,960
you could find these things if you

1187
00:39:20,960 --> 00:39:22,480
really wanted to spend the time to dig

1188
00:39:22,480 --> 00:39:24,160
into the to the package and look for

1189
00:39:24,160 --> 00:39:25,680
each of these items and i recommend you

1190
00:39:25,680 --> 00:39:28,079
do this certainly but i think this a lot

1191
00:39:28,079 --> 00:39:29,520
of this can be automated because we can

1192
00:39:29,520 --> 00:39:31,200
detect some of these things with static

1193
00:39:31,200 --> 00:39:33,280
analysis tools and so that's basically

1194
00:39:33,280 --> 00:39:35,440
what um what we we built and i'm going

1195
00:39:35,440 --> 00:39:37,280
to share a little bit about it now so

1196
00:39:37,280 --> 00:39:39,280
this is uh socket which is the the tool

1197
00:39:39,280 --> 00:39:40,000
that

1198
00:39:40,000 --> 00:39:42,480
i've been working on with a team of

1199
00:39:42,480 --> 00:39:43,760
friends

1200
00:39:43,760 --> 00:39:45,359
and basically it's a tool that can

1201
00:39:45,359 --> 00:39:47,520
protect you from certain types of supply

1202
00:39:47,520 --> 00:39:49,680
chain attacks because what we do is

1203
00:39:49,680 --> 00:39:52,880
we're auditing um every npm package

1204
00:39:52,880 --> 00:39:54,880
we're downloading every npm package and

1205
00:39:54,880 --> 00:39:58,320
looking for malware typo squats hidden

1206
00:39:58,320 --> 00:40:00,320
code

1207
00:40:00,320 --> 00:40:01,839
permissions that are being used like

1208
00:40:01,839 --> 00:40:03,839
network file system environment

1209
00:40:03,839 --> 00:40:07,280
variables etc and we're basically um

1210
00:40:07,280 --> 00:40:08,079
you know

1211
00:40:08,079 --> 00:40:10,640
tagging that package and saying it has

1212
00:40:10,640 --> 00:40:13,440
all these attributes right

1213
00:40:13,440 --> 00:40:15,040
so this is like an example of what it

1214
00:40:15,040 --> 00:40:16,960
looks like if you if you search for a

1215
00:40:16,960 --> 00:40:19,359
package on socket

1216
00:40:19,359 --> 00:40:22,560
you'll get um you know a list of of of

1217
00:40:22,560 --> 00:40:24,960
scores at the top which tells you uh

1218
00:40:24,960 --> 00:40:26,720
kind of the security rating the quality

1219
00:40:26,720 --> 00:40:29,839
rating um the maintenance status uh

1220
00:40:29,839 --> 00:40:31,920
number of vulnerabilities and license

1221
00:40:31,920 --> 00:40:33,839
and then um and then we call out the

1222
00:40:33,839 --> 00:40:36,160
most important security issues at the

1223
00:40:36,160 --> 00:40:38,640
top of the page so this package will run

1224
00:40:38,640 --> 00:40:40,240
a shell script immediately when you

1225
00:40:40,240 --> 00:40:42,079
install it and it contains the native

1226
00:40:42,079 --> 00:40:43,599
code so this is like the two things we

1227
00:40:43,599 --> 00:40:45,599
want you to know about this package

1228
00:40:45,599 --> 00:40:47,280
before you install it

1229
00:40:47,280 --> 00:40:49,440
now this package is actually good it's

1230
00:40:49,440 --> 00:40:51,440
you can click you can click this button

1231
00:40:51,440 --> 00:40:53,119
here and you can see what the install

1232
00:40:53,119 --> 00:40:55,440
script does and it's it's actually

1233
00:40:55,440 --> 00:40:57,359
innocent it's not doing anything wrong

1234
00:40:57,359 --> 00:40:59,119
um so you could feel comfortable

1235
00:40:59,119 --> 00:41:02,160
installing this without any issues

1236
00:41:02,160 --> 00:41:03,839
but what about a package that is doing

1237
00:41:03,839 --> 00:41:06,240
something a little bit more

1238
00:41:06,240 --> 00:41:08,960
sketchy or nefarious

1239
00:41:08,960 --> 00:41:12,000
so this is another example of a package

1240
00:41:12,000 --> 00:41:13,040
that you can look up here and you can

1241
00:41:13,040 --> 00:41:15,440
see the score is lower on security and

1242
00:41:15,440 --> 00:41:17,680
we found some issues in the dependencies

1243
00:41:17,680 --> 00:41:20,720
so say you click that and you go look at

1244
00:41:20,720 --> 00:41:22,480
like what are the issues in this

1245
00:41:22,480 --> 00:41:24,400
package's dependencies

1246
00:41:24,400 --> 00:41:25,599
because remember that's the thing too is

1247
00:41:25,599 --> 00:41:27,200
like the issues might be not in the

1248
00:41:27,200 --> 00:41:28,480
package itself but they could be in the

1249
00:41:28,480 --> 00:41:29,760
dependencies of the package right so

1250
00:41:29,760 --> 00:41:31,599
that's important so what we found in the

1251
00:41:31,599 --> 00:41:33,359
dependencies are

1252
00:41:33,359 --> 00:41:35,200
it's going to run code upon installation

1253
00:41:35,200 --> 00:41:37,280
and it has telemetry these are the two

1254
00:41:37,280 --> 00:41:38,960
that are the most uh

1255
00:41:38,960 --> 00:41:40,319
important here

1256
00:41:40,319 --> 00:41:41,839
and so what the telemetry is doing here

1257
00:41:41,839 --> 00:41:43,440
is actually if you install this react

1258
00:41:43,440 --> 00:41:44,480
component

1259
00:41:44,480 --> 00:41:45,680
to build you know a feature on your

1260
00:41:45,680 --> 00:41:47,440
website or whatever it's actually

1261
00:41:47,440 --> 00:41:49,440
collecting information about your system

1262
00:41:49,440 --> 00:41:54,000
including your get remote url your um

1263
00:41:54,000 --> 00:41:55,920
i think it collects

1264
00:41:55,920 --> 00:41:57,839
uh your ip address a few other pieces of

1265
00:41:57,839 --> 00:41:59,359
data about your machine and sends it to

1266
00:41:59,359 --> 00:42:00,560
the maintainer

1267
00:42:00,560 --> 00:42:02,000
and one of the things that collects is

1268
00:42:02,000 --> 00:42:03,520
actually the name of your project as

1269
00:42:03,520 --> 00:42:05,280
well so the get remote url might contain

1270
00:42:05,280 --> 00:42:07,040
you know the url to your git server

1271
00:42:07,040 --> 00:42:08,319
right so it's collecting a bit of

1272
00:42:08,319 --> 00:42:10,480
personal information

1273
00:42:10,480 --> 00:42:12,720
um so that's good to know um but this is

1274
00:42:12,720 --> 00:42:13,920
you know you could say maybe maybe you

1275
00:42:13,920 --> 00:42:15,119
don't care maybe it's fine you still

1276
00:42:15,119 --> 00:42:18,400
want to use this package okay

1277
00:42:18,480 --> 00:42:20,480
finally there's like a third category so

1278
00:42:20,480 --> 00:42:21,839
we looked at a good package we looked at

1279
00:42:21,839 --> 00:42:23,119
kind of a

1280
00:42:23,119 --> 00:42:24,160
sketchy package and now we're going to

1281
00:42:24,160 --> 00:42:25,839
look at like a malware package so this

1282
00:42:25,839 --> 00:42:27,920
is actually a piece of malware

1283
00:42:27,920 --> 00:42:30,160
this package was ultimately removed from

1284
00:42:30,160 --> 00:42:32,480
the registry you can see the security

1285
00:42:32,480 --> 00:42:33,760
score is zero

1286
00:42:33,760 --> 00:42:35,920
um and you can see um all the things

1287
00:42:35,920 --> 00:42:37,920
that it's doing so

1288
00:42:37,920 --> 00:42:39,760
it's you know install scripts network

1289
00:42:39,760 --> 00:42:42,160
access uh and it it scrolls off the page

1290
00:42:42,160 --> 00:42:42,880
it

1291
00:42:42,880 --> 00:42:45,680
does a lot of things um and if you click

1292
00:42:45,680 --> 00:42:46,640
into

1293
00:42:46,640 --> 00:42:48,720
one of these alerts you can actually see

1294
00:42:48,720 --> 00:42:50,720
uh directly it links you directly to the

1295
00:42:50,720 --> 00:42:52,079
line of code where it's doing that

1296
00:42:52,079 --> 00:42:55,440
behavior so we're able to tell you okay

1297
00:42:55,440 --> 00:42:57,119
it's accessing the environment variables

1298
00:42:57,119 --> 00:42:58,640
on that line

1299
00:42:58,640 --> 00:42:59,920
and

1300
00:42:59,920 --> 00:43:02,079
on this line it should should be saying

1301
00:43:02,079 --> 00:43:04,079
it's it's uh going to send data to the

1302
00:43:04,079 --> 00:43:06,480
network this is actually was a bug here

1303
00:43:06,480 --> 00:43:08,240
we fixed it but this should also be

1304
00:43:08,240 --> 00:43:09,520
telling you this is a network request

1305
00:43:09,520 --> 00:43:10,400
here

1306
00:43:10,400 --> 00:43:12,319
um but you can see we basically tell you

1307
00:43:12,319 --> 00:43:14,880
exactly which line the um the behavior

1308
00:43:14,880 --> 00:43:17,119
is happening on uh

1309
00:43:17,119 --> 00:43:19,839
so very helpful

1310
00:43:20,160 --> 00:43:21,599
and then finally i think it's important

1311
00:43:21,599 --> 00:43:23,520
to monitor for changes so if you use

1312
00:43:23,520 --> 00:43:24,640
automation then you don't need to

1313
00:43:24,640 --> 00:43:26,319
remember to use this tool every time

1314
00:43:26,319 --> 00:43:28,400
you're picking a new dependency so the

1315
00:43:28,400 --> 00:43:30,400
way to do this is you basically use some

1316
00:43:30,400 --> 00:43:31,680
type of static analysis on your

1317
00:43:31,680 --> 00:43:33,839
dependencies and detect whenever they're

1318
00:43:33,839 --> 00:43:36,000
doing something uh privileged using

1319
00:43:36,000 --> 00:43:38,400
privileged apis or contain obfuscated

1320
00:43:38,400 --> 00:43:40,240
code and then if if something is

1321
00:43:40,240 --> 00:43:42,880
detected you do need to have a human

1322
00:43:42,880 --> 00:43:44,560
that

1323
00:43:44,560 --> 00:43:46,560
does a manual audit so the human needs

1324
00:43:46,560 --> 00:43:48,319
to be in the loop there

1325
00:43:48,319 --> 00:43:49,520
the tool can basically warn you

1326
00:43:49,520 --> 00:43:51,200
something suspicious is happening and

1327
00:43:51,200 --> 00:43:52,640
then the human has to go and look and

1328
00:43:52,640 --> 00:43:54,800
say okay what is the shell command doing

1329
00:43:54,800 --> 00:43:57,440
is this good or bad right um

1330
00:43:57,440 --> 00:43:59,040
and then um we believe you should

1331
00:43:59,040 --> 00:44:00,560
basically put this information into the

1332
00:44:00,560 --> 00:44:02,319
prs the developers can actually get that

1333
00:44:02,319 --> 00:44:03,760
information directly where they're where

1334
00:44:03,760 --> 00:44:05,680
they're working and act on it so that

1335
00:44:05,680 --> 00:44:06,960
the developer is empowered to solve

1336
00:44:06,960 --> 00:44:09,200
their own security issue before it

1337
00:44:09,200 --> 00:44:11,200
becomes a problem

1338
00:44:11,200 --> 00:44:12,720
and again like i'll just mention the

1339
00:44:12,720 --> 00:44:14,400
kind of the tool you can use socket you

1340
00:44:14,400 --> 00:44:16,160
can you can install right now we have a

1341
00:44:16,160 --> 00:44:17,760
github app but we're also working on git

1342
00:44:17,760 --> 00:44:20,160
lab and other and cli and stuff like

1343
00:44:20,160 --> 00:44:21,760
that so you can use it in other systems

1344
00:44:21,760 --> 00:44:23,440
but this is what it looks like on github

1345
00:44:23,440 --> 00:44:25,280
so

1346
00:44:25,280 --> 00:44:27,440
when the developer makes a mistake we

1347
00:44:27,440 --> 00:44:29,520
will leave a comment and say hey you

1348
00:44:29,520 --> 00:44:31,359
installed bowserify

1349
00:44:31,359 --> 00:44:33,599
instead of browserify maybe you meant

1350
00:44:33,599 --> 00:44:36,560
browserify because it has 170 000 times

1351
00:44:36,560 --> 00:44:38,640
more downloads and it's one letter off

1352
00:44:38,640 --> 00:44:41,040
so it's probably a typo right

1353
00:44:41,040 --> 00:44:42,720
so we catch that

1354
00:44:42,720 --> 00:44:44,400
this is another example where the

1355
00:44:44,400 --> 00:44:46,400
developer installed a package which was

1356
00:44:46,400 --> 00:44:48,240
gathering telemetry and running code

1357
00:44:48,240 --> 00:44:49,599
upon installation so we warned them

1358
00:44:49,599 --> 00:44:51,359
about that and for the telemetry we even

1359
00:44:51,359 --> 00:44:53,040
tell you how to disable the telemetry by

1360
00:44:53,040 --> 00:44:54,319
saying instead if you set this

1361
00:44:54,319 --> 00:44:56,240
environment variable that will tell the

1362
00:44:56,240 --> 00:44:58,160
the package to stop sending telemetry so

1363
00:44:58,160 --> 00:45:00,800
we can tell you how to opt out

1364
00:45:00,800 --> 00:45:02,240
um yeah so these are you know just just

1365
00:45:02,240 --> 00:45:03,520
a few things you can do with the with

1366
00:45:03,520 --> 00:45:04,800
the with the uh

1367
00:45:04,800 --> 00:45:06,720
the github app that we have

1368
00:45:06,720 --> 00:45:08,240
um and

1369
00:45:08,240 --> 00:45:09,599
finally i think there's just a few

1370
00:45:09,599 --> 00:45:10,800
things we could do in the language

1371
00:45:10,800 --> 00:45:12,720
itself and i'm very javascript focused i

1372
00:45:12,720 --> 00:45:14,000
know a lot of people here probably use

1373
00:45:14,000 --> 00:45:16,160
other stuff as well but um just within

1374
00:45:16,160 --> 00:45:17,440
the javascript language i think there's

1375
00:45:17,440 --> 00:45:18,720
a few things that if we could just fix

1376
00:45:18,720 --> 00:45:20,160
these problems then we would have a lot

1377
00:45:20,160 --> 00:45:22,560
better security situation so the first

1378
00:45:22,560 --> 00:45:24,160
one is

1379
00:45:24,160 --> 00:45:25,760
right now everyone is drowning in

1380
00:45:25,760 --> 00:45:28,079
vulnerability alerts there's just so

1381
00:45:28,079 --> 00:45:29,280
many if you install something you

1382
00:45:29,280 --> 00:45:30,560
usually get a message that says you have

1383
00:45:30,560 --> 00:45:32,000
500 vulnerabilities right and you're

1384
00:45:32,000 --> 00:45:33,359
just like okay

1385
00:45:33,359 --> 00:45:35,680
i can't i can't do anything about this

1386
00:45:35,680 --> 00:45:37,280
i accept it you know i'll just take my

1387
00:45:37,280 --> 00:45:39,280
chances so if we if we need we need some

1388
00:45:39,280 --> 00:45:41,520
way to sort of lower the volume on these

1389
00:45:41,520 --> 00:45:43,440
alerts and make

1390
00:45:43,440 --> 00:45:47,440
only the important ones rise to the top

1391
00:45:47,440 --> 00:45:48,640
second

1392
00:45:48,640 --> 00:45:49,440
there's been some interesting

1393
00:45:49,440 --> 00:45:52,000
experimentation with the dino project

1394
00:45:52,000 --> 00:45:54,079
which allows you to actually sandbox the

1395
00:45:54,079 --> 00:45:56,240
process and give it certain permissions

1396
00:45:56,240 --> 00:45:58,480
using flags like allow net

1397
00:45:58,480 --> 00:45:59,599
and i think we should try to bring that

1398
00:45:59,599 --> 00:46:01,200
into the node.js

1399
00:46:01,200 --> 00:46:02,800
and finally there's been some language

1400
00:46:02,800 --> 00:46:05,520
uh proposals such as secure ecmascript

1401
00:46:05,520 --> 00:46:06,480
um

1402
00:46:06,480 --> 00:46:09,119
script realms uh compartments and um and

1403
00:46:09,119 --> 00:46:10,640
then this flag in node so a lot of

1404
00:46:10,640 --> 00:46:12,720
interesting experiments and proposals

1405
00:46:12,720 --> 00:46:14,480
that will allow us to build a system

1406
00:46:14,480 --> 00:46:16,240
where we could actually

1407
00:46:16,240 --> 00:46:18,400
create per package permissions

1408
00:46:18,400 --> 00:46:20,560
so similar to a smartphone app a package

1409
00:46:20,560 --> 00:46:22,160
could declare which permissions it needs

1410
00:46:22,160 --> 00:46:23,440
and only have access to those

1411
00:46:23,440 --> 00:46:24,880
permissions so if you had something like

1412
00:46:24,880 --> 00:46:26,079
that i think that would go a long way to

1413
00:46:26,079 --> 00:46:28,800
making sure that a rogue update or a

1414
00:46:28,800 --> 00:46:30,480
hijacked package could not suddenly

1415
00:46:30,480 --> 00:46:32,640
start you know sending all of your files

1416
00:46:32,640 --> 00:46:33,920
off to some

1417
00:46:33,920 --> 00:46:37,680
ip address in faraway land

1418
00:46:37,680 --> 00:46:38,720
so

1419
00:46:38,720 --> 00:46:41,280
those are my ideas um and

1420
00:46:41,280 --> 00:46:42,880
yeah i mean hopefully this overview is

1421
00:46:42,880 --> 00:46:44,160
helpful you know we covered a lot of

1422
00:46:44,160 --> 00:46:46,079
ground we talked about kind of um what

1423
00:46:46,079 --> 00:46:49,119
the problem is uh some examples uh of of

1424
00:46:49,119 --> 00:46:51,520
attack code and finally some ideas for

1425
00:46:51,520 --> 00:46:53,839
solutions um but um you like i said this

1426
00:46:53,839 --> 00:46:54,880
is a

1427
00:46:54,880 --> 00:46:56,800
unsolved problem we're trying to solve

1428
00:46:56,800 --> 00:46:58,079
it at socket

1429
00:46:58,079 --> 00:46:59,599
and

1430
00:46:59,599 --> 00:47:00,960
yeah thanks for the time and i

1431
00:47:00,960 --> 00:47:05,400
appreciate you having me here thank you

1432
00:47:16,079 --> 00:47:18,160
you

