1
00:00:01,280 --> 00:00:15,839
[Music]

2
00:00:15,839 --> 00:00:17,920
the next uh talk is going to be fault

3
00:00:17,920 --> 00:00:20,000
injection on a modern multi-core system

4
00:00:20,000 --> 00:00:21,039
it's going to be awesome by the way

5
00:00:21,039 --> 00:00:22,880
we've got some hardware here uh so take

6
00:00:22,880 --> 00:00:28,359
it away sergey and ronan oh cool

7
00:00:32,159 --> 00:00:35,120
great um does my mic work can you hear

8
00:00:35,120 --> 00:00:36,079
me

9
00:00:36,079 --> 00:00:39,200
no great uh thank you very much uh it is

10
00:00:39,200 --> 00:00:42,559
very nice to be here first times at mch

11
00:00:42,559 --> 00:00:44,160
it was a lot of fun thank you for coming

12
00:00:44,160 --> 00:00:46,320
on sunday hot night

13
00:00:46,320 --> 00:00:47,520
uh we're going to talk about fault

14
00:00:47,520 --> 00:00:49,120
injection and we're going to talk about

15
00:00:49,120 --> 00:00:51,039
modern hardware how fault injection

16
00:00:51,039 --> 00:00:53,520
works and what is fault injection so all

17
00:00:53,520 --> 00:00:55,520
that we're going to talk in a minute

18
00:00:55,520 --> 00:00:56,640
who we are

19
00:00:56,640 --> 00:01:00,000
we work at risker my name is uh sergey i

20
00:01:00,000 --> 00:01:02,160
like software hardware playing with

21
00:01:02,160 --> 00:01:03,680
things um

22
00:01:03,680 --> 00:01:04,799
and yeah

23
00:01:04,799 --> 00:01:07,439
and with me ronan today

24
00:01:07,439 --> 00:01:10,960
yeah hi i'm ronin i also work

25
00:01:10,960 --> 00:01:12,400
work a risk here for

26
00:01:12,400 --> 00:01:14,640
a number of years now i like

27
00:01:14,640 --> 00:01:16,720
software stuff hardware stuff where they

28
00:01:16,720 --> 00:01:17,600
meet

29
00:01:17,600 --> 00:01:20,159
low level fault injection

30
00:01:20,159 --> 00:01:21,010
everything

31
00:01:21,010 --> 00:01:23,840
[Music]

32
00:01:23,840 --> 00:01:26,799
okay so before we go into what is fault

33
00:01:26,799 --> 00:01:29,520
injection or what is modern stock or

34
00:01:29,520 --> 00:01:31,840
does it work we first talk about

35
00:01:31,840 --> 00:01:35,119
physical attacks um a tiny bit

36
00:01:35,119 --> 00:01:37,600
so what are physical attacks imagine you

37
00:01:37,600 --> 00:01:39,920
have a device you have it in your hands

38
00:01:39,920 --> 00:01:42,399
you can do whatever with it

39
00:01:42,399 --> 00:01:44,399
you can take it to the lab you can hook

40
00:01:44,399 --> 00:01:47,439
in any hardware you can put a scope to

41
00:01:47,439 --> 00:01:49,200
it you could

42
00:01:49,200 --> 00:01:51,119
do anything with it and you want

43
00:01:51,119 --> 00:01:52,720
something from this device so for

44
00:01:52,720 --> 00:01:56,000
example there are some secret vendor

45
00:01:56,000 --> 00:01:58,079
keys and you want to get them maybe it's

46
00:01:58,079 --> 00:02:00,479
illegal uh not talking about legality of

47
00:02:00,479 --> 00:02:01,520
things

48
00:02:01,520 --> 00:02:04,079
let's say you really have to get them

49
00:02:04,079 --> 00:02:06,159
or there are user keys maybe you are an

50
00:02:06,159 --> 00:02:08,318
attacker you are somebody evil you stole

51
00:02:08,318 --> 00:02:10,560
the device you want to get the keys out

52
00:02:10,560 --> 00:02:12,800
you want to attack this user

53
00:02:12,800 --> 00:02:15,680
and for these things

54
00:02:16,080 --> 00:02:17,520
fault injection or physical attacks in

55
00:02:17,520 --> 00:02:19,680
general are quite useful another use

56
00:02:19,680 --> 00:02:22,400
case is getting firmware these days uh

57
00:02:22,400 --> 00:02:24,319
often maybe if you do

58
00:02:24,319 --> 00:02:26,879
networking you can see that a lot of ota

59
00:02:26,879 --> 00:02:28,319
updates they are encrypted you cannot

60
00:02:28,319 --> 00:02:30,400
easily just see what the update is or

61
00:02:30,400 --> 00:02:31,920
what kind of code is running on the

62
00:02:31,920 --> 00:02:34,959
device so um having the device in your

63
00:02:34,959 --> 00:02:37,040
hands and doing physical attacks can

64
00:02:37,040 --> 00:02:39,120
give you these secrets or giving you the

65
00:02:39,120 --> 00:02:41,280
firmware with transferring the device to

66
00:02:41,280 --> 00:02:42,720
do other attacks you want to do in the

67
00:02:42,720 --> 00:02:43,920
future

68
00:02:43,920 --> 00:02:46,000
so that's why physical attacks are quite

69
00:02:46,000 --> 00:02:47,360
relevant to a number of different

70
00:02:47,360 --> 00:02:48,800
devices

71
00:02:48,800 --> 00:02:50,959
um there are two main types of physical

72
00:02:50,959 --> 00:02:53,440
attacks when we talk about it um

73
00:02:53,440 --> 00:02:55,280
there is on the left side channel

74
00:02:55,280 --> 00:02:58,080
analysis this is passive attack so we

75
00:02:58,080 --> 00:02:59,360
don't really

76
00:02:59,360 --> 00:03:01,280
affect the target that much we try to

77
00:03:01,280 --> 00:03:03,519
avoid that we want to make sure that the

78
00:03:03,519 --> 00:03:06,080
target operates normally and we observe

79
00:03:06,080 --> 00:03:08,400
all kind of side channels so not the

80
00:03:08,400 --> 00:03:10,560
output the target produces

81
00:03:10,560 --> 00:03:12,959
but uh the

82
00:03:12,959 --> 00:03:15,040
data you can get like maybe you can see

83
00:03:15,040 --> 00:03:17,360
the power trace or you can see the scope

84
00:03:17,360 --> 00:03:20,480
data you can see em uh produced by the

85
00:03:20,480 --> 00:03:22,159
target and so on

86
00:03:22,159 --> 00:03:25,040
um so this is one type we're not gonna

87
00:03:25,040 --> 00:03:26,400
talk about it we're gonna talk about

88
00:03:26,400 --> 00:03:27,680
fault injection

89
00:03:27,680 --> 00:03:30,080
or also known as glitching so that's the

90
00:03:30,080 --> 00:03:32,159
moment when you wanna make sure that the

91
00:03:32,159 --> 00:03:34,560
target you have does not behave as it

92
00:03:34,560 --> 00:03:37,440
should so you try to introduce a fault

93
00:03:37,440 --> 00:03:40,080
and hopefully bypass some security

94
00:03:40,080 --> 00:03:43,040
features of the device

95
00:03:43,200 --> 00:03:44,959
so yeah what are the types of fault

96
00:03:44,959 --> 00:03:46,879
injection when we talk about it there

97
00:03:46,879 --> 00:03:48,560
are different types uh there is quite a

98
00:03:48,560 --> 00:03:50,319
bit of literature on this

99
00:03:50,319 --> 00:03:52,480
a number of presentations talking about

100
00:03:52,480 --> 00:03:55,519
of different uh possible fault injection

101
00:03:55,519 --> 00:03:56,720
methods

102
00:03:56,720 --> 00:03:59,680
uh for example clogged glitching so you

103
00:03:59,680 --> 00:04:01,360
have if you have external clock of your

104
00:04:01,360 --> 00:04:04,400
target you can affect it in a way you

105
00:04:04,400 --> 00:04:06,080
can affect the

106
00:04:06,080 --> 00:04:08,159
outputs of the target or voltage

107
00:04:08,159 --> 00:04:10,959
glitching so you can disturb the voltage

108
00:04:10,959 --> 00:04:11,760
and

109
00:04:11,760 --> 00:04:13,439
observe the effects

110
00:04:13,439 --> 00:04:15,040
also

111
00:04:15,040 --> 00:04:17,600
another type is electromagnetic fault

112
00:04:17,600 --> 00:04:20,320
injection so you introduce a pulse into

113
00:04:20,320 --> 00:04:22,880
the target and you try to affect it that

114
00:04:22,880 --> 00:04:24,240
way

115
00:04:24,240 --> 00:04:26,880
other types could be laser or even

116
00:04:26,880 --> 00:04:29,440
temperature in some cases

117
00:04:29,440 --> 00:04:32,560
and what do we achieve by introducing

118
00:04:32,560 --> 00:04:33,759
glitches

119
00:04:33,759 --> 00:04:34,479
so

120
00:04:34,479 --> 00:04:36,479
quite often what we see is that we can

121
00:04:36,479 --> 00:04:37,919
corrupt data

122
00:04:37,919 --> 00:04:39,919
so instead of

123
00:04:39,919 --> 00:04:41,919
having you can think of like you have

124
00:04:41,919 --> 00:04:43,360
some code running on the target and

125
00:04:43,360 --> 00:04:45,520
there's a variable and it has some value

126
00:04:45,520 --> 00:04:47,440
and instead of having that value if we

127
00:04:47,440 --> 00:04:48,960
introduce the glitch in the very right

128
00:04:48,960 --> 00:04:50,800
moment we can corrupt it to another

129
00:04:50,800 --> 00:04:53,919
value for example 2 0 or to ff

130
00:04:53,919 --> 00:04:55,199
or to

131
00:04:55,199 --> 00:04:58,240
that beef which would be quite rare but

132
00:04:58,240 --> 00:05:01,360
nonetheless possible

133
00:05:01,440 --> 00:05:04,000
so glitches are normally not fully

134
00:05:04,000 --> 00:05:06,000
random we cannot just get any value when

135
00:05:06,000 --> 00:05:08,880
we glitch it's often something

136
00:05:08,880 --> 00:05:11,039
quite specific so for example zeros are

137
00:05:11,039 --> 00:05:12,560
quite often

138
00:05:12,560 --> 00:05:15,440
uh another option we could um corrupt an

139
00:05:15,440 --> 00:05:17,360
instruction so instead of executing one

140
00:05:17,360 --> 00:05:18,720
instruction

141
00:05:18,720 --> 00:05:21,280
we execute another one

142
00:05:21,280 --> 00:05:23,199
or as a subset we can skip an

143
00:05:23,199 --> 00:05:24,639
instruction so you have some code

144
00:05:24,639 --> 00:05:26,800
running at some moment maybe you have an

145
00:05:26,800 --> 00:05:29,120
if statement and if you skip this

146
00:05:29,120 --> 00:05:31,600
instruction this check was not executed

147
00:05:31,600 --> 00:05:33,680
and if it was security check

148
00:05:33,680 --> 00:05:36,560
it might have very big effect on the

149
00:05:36,560 --> 00:05:39,680
security of the whole device

150
00:05:39,680 --> 00:05:40,800
um

151
00:05:40,800 --> 00:05:43,680
just to give a bit of more intuition of

152
00:05:43,680 --> 00:05:45,520
why this is happening

153
00:05:45,520 --> 00:05:47,759
for example you have your device and you

154
00:05:47,759 --> 00:05:49,919
introduce voltage glitching if you have

155
00:05:49,919 --> 00:05:51,199
your

156
00:05:51,199 --> 00:05:52,960
chip and you know that it's supposed to

157
00:05:52,960 --> 00:05:54,960
run at one point at eight volts that's

158
00:05:54,960 --> 00:05:57,759
what your vendor tells you the in the

159
00:05:57,759 --> 00:06:00,160
data sheet it will say it should be 1.8

160
00:06:00,160 --> 00:06:02,319
volt maybe 10 percent tolerance but

161
00:06:02,319 --> 00:06:04,400
after that device not supposed to

162
00:06:04,400 --> 00:06:06,720
operate in this range so what happens if

163
00:06:06,720 --> 00:06:08,400
the attacker is

164
00:06:08,400 --> 00:06:11,440
changing the voltage of the provided to

165
00:06:11,440 --> 00:06:14,400
this chip for a split second

166
00:06:14,400 --> 00:06:16,400
so if it happens for too long the device

167
00:06:16,400 --> 00:06:18,960
likely resets so you just disconnect and

168
00:06:18,960 --> 00:06:21,120
power cycle the device

169
00:06:21,120 --> 00:06:23,600
but if you do it for very short moment

170
00:06:23,600 --> 00:06:26,639
you might affect the behavior of the

171
00:06:26,639 --> 00:06:27,440
chip

172
00:06:27,440 --> 00:06:29,600
and the reason behind that is of course

173
00:06:29,600 --> 00:06:32,160
because in software we think about uh

174
00:06:32,160 --> 00:06:34,400
binary things we think about zero and

175
00:06:34,400 --> 00:06:35,280
one

176
00:06:35,280 --> 00:06:37,520
and uh nothing in between in real life

177
00:06:37,520 --> 00:06:38,800
there's a lot of different physics

178
00:06:38,800 --> 00:06:41,919
happening and we might um

179
00:06:41,919 --> 00:06:43,759
misread a value a signal which is

180
00:06:43,759 --> 00:06:46,080
supposed to be as one as zero when we

181
00:06:46,080 --> 00:06:48,240
introduce a glitch or other way around

182
00:06:48,240 --> 00:06:49,919
so these kind of effects

183
00:06:49,919 --> 00:06:50,920
are quite possible

184
00:06:50,920 --> 00:06:53,360
[Music]

185
00:06:53,360 --> 00:06:55,360
so yeah that kind of makes sense and

186
00:06:55,360 --> 00:06:56,960
it's easy to understand that yeah we can

187
00:06:56,960 --> 00:06:59,199
affect the way the chip behaves but of

188
00:06:59,199 --> 00:07:02,080
course we cannot just know what kind of

189
00:07:02,080 --> 00:07:02,800
uh

190
00:07:02,800 --> 00:07:04,960
code executes where so for example we're

191
00:07:04,960 --> 00:07:07,120
on our chip this is power trace we just

192
00:07:07,120 --> 00:07:09,280
measure with the scope

193
00:07:09,280 --> 00:07:11,599
the power consumed by the device and we

194
00:07:11,599 --> 00:07:13,759
see something like that but it's very

195
00:07:13,759 --> 00:07:16,080
difficult from that map it back even if

196
00:07:16,080 --> 00:07:17,840
you know the code say

197
00:07:17,840 --> 00:07:19,919
exactly there we have the if statement

198
00:07:19,919 --> 00:07:21,680
which i want to skip

199
00:07:21,680 --> 00:07:23,840
and this is the first problem and the

200
00:07:23,840 --> 00:07:25,440
second problem there is also quite a bit

201
00:07:25,440 --> 00:07:28,400
of jitter quite often on targets so your

202
00:07:28,400 --> 00:07:30,560
clocks are not perfect when it's eight

203
00:07:30,560 --> 00:07:32,240
megahertz it's never exactly eight

204
00:07:32,240 --> 00:07:34,479
megahertz it floats temperature changes

205
00:07:34,479 --> 00:07:38,240
so you will always fluctuate around

206
00:07:38,240 --> 00:07:40,400
and for that reason uh fault injection

207
00:07:40,400 --> 00:07:41,840
is never

208
00:07:41,840 --> 00:07:44,319
very rarely 100 successful so sometimes

209
00:07:44,319 --> 00:07:45,360
you will be

210
00:07:45,360 --> 00:07:46,800
more successful sometimes less and

211
00:07:46,800 --> 00:07:48,639
sometimes you need to search quite a bit

212
00:07:48,639 --> 00:07:49,759
of a

213
00:07:49,759 --> 00:07:52,240
parameter space to find this exact spot

214
00:07:52,240 --> 00:07:54,080
when you want to introduce the glitch

215
00:07:54,080 --> 00:07:55,919
and you will have some probability

216
00:07:55,919 --> 00:07:58,160
sometimes it's very high sometimes it's

217
00:07:58,160 --> 00:08:00,879
another high to be successful

218
00:08:00,879 --> 00:08:02,560
introducing the glitch in this exact

219
00:08:02,560 --> 00:08:04,720
moment so that's one of the problems you

220
00:08:04,720 --> 00:08:06,160
have always when you do a fault

221
00:08:06,160 --> 00:08:08,639
injection that's something you have to

222
00:08:08,639 --> 00:08:10,160
figure out

223
00:08:10,160 --> 00:08:12,720
and yeah we're not always fully blind

224
00:08:12,720 --> 00:08:14,879
when we do this so for example this is

225
00:08:14,879 --> 00:08:17,199
another example uh we have a power trace

226
00:08:17,199 --> 00:08:18,720
we send the command and then we

227
00:08:18,720 --> 00:08:20,639
introduce the glitch in the red

228
00:08:20,639 --> 00:08:23,360
and then we see the power cycle so

229
00:08:23,360 --> 00:08:25,440
likely what happened the glitch was too

230
00:08:25,440 --> 00:08:28,400
hard and we caused the chip to reset

231
00:08:28,400 --> 00:08:31,039
so and we can often see it on the scope

232
00:08:31,039 --> 00:08:33,120
and we know that maybe this is too much

233
00:08:33,120 --> 00:08:35,120
we need to try to be more careful to

234
00:08:35,120 --> 00:08:37,039
affect the chip but not to reset the

235
00:08:37,039 --> 00:08:37,760
chip

236
00:08:37,760 --> 00:08:40,479
and this kind of information is always

237
00:08:40,479 --> 00:08:43,120
useful for us

238
00:08:43,360 --> 00:08:45,440
so hopefully all this makes sense and

239
00:08:45,440 --> 00:08:46,959
you think yeah you can definitely do

240
00:08:46,959 --> 00:08:48,160
this in the lab when you control

241
00:08:48,160 --> 00:08:49,600
everything when you know the code when

242
00:08:49,600 --> 00:08:51,360
they have data sheets when you have

243
00:08:51,360 --> 00:08:53,360
everything you want but does it actually

244
00:08:53,360 --> 00:08:55,040
work in real life

245
00:08:55,040 --> 00:08:56,720
and yeah it definitely does there are

246
00:08:56,720 --> 00:08:59,120
quite a few examples when it was used uh

247
00:08:59,120 --> 00:09:00,959
so maybe one example what we've done in

248
00:09:00,959 --> 00:09:03,040
the past is uh glitching bitcoin

249
00:09:03,040 --> 00:09:04,480
hardware wallet

250
00:09:04,480 --> 00:09:07,440
um so it runs a simple microcontroller

251
00:09:07,440 --> 00:09:09,920
it has a stm32 chip

252
00:09:09,920 --> 00:09:12,320
and we used em fault injection so for

253
00:09:12,320 --> 00:09:13,920
this device

254
00:09:13,920 --> 00:09:16,000
it was open source code so we could look

255
00:09:16,000 --> 00:09:17,760
at the firmware which is always very

256
00:09:17,760 --> 00:09:19,839
nice even when you do physical attacks

257
00:09:19,839 --> 00:09:21,839
with hardware it's nice to know what

258
00:09:21,839 --> 00:09:24,480
software does and

259
00:09:24,480 --> 00:09:26,720
the weakness was is that they have a

260
00:09:26,720 --> 00:09:28,720
single if statement checking is being

261
00:09:28,720 --> 00:09:30,800
correct and if it's correct

262
00:09:30,800 --> 00:09:32,720
allow access to the user

263
00:09:32,720 --> 00:09:35,600
and for us when we see it we know if it

264
00:09:35,600 --> 00:09:37,519
can affect this if statement

265
00:09:37,519 --> 00:09:38,800
we can

266
00:09:38,800 --> 00:09:39,839
bypass

267
00:09:39,839 --> 00:09:42,000
the main security feature of the device

268
00:09:42,000 --> 00:09:44,800
and yeah that was a successful attempt

269
00:09:44,800 --> 00:09:45,760
you can

270
00:09:45,760 --> 00:09:47,279
look it up online if you're interested

271
00:09:47,279 --> 00:09:49,680
more in this research

272
00:09:49,680 --> 00:09:51,519
so that's nice but indeed if you look

273
00:09:51,519 --> 00:09:53,120
into research which is published like

274
00:09:53,120 --> 00:09:55,920
the one before this is a stm32 simple

275
00:09:55,920 --> 00:09:58,080
microcontroller which runs at 200

276
00:09:58,080 --> 00:09:59,279
megahertz

277
00:09:59,279 --> 00:10:00,800
uh there is more other research for

278
00:10:00,800 --> 00:10:02,880
example this is published at cardis a

279
00:10:02,880 --> 00:10:04,640
few years ago

280
00:10:04,640 --> 00:10:06,640
which started in-depth a lot of

281
00:10:06,640 --> 00:10:08,560
different possible effects of laser

282
00:10:08,560 --> 00:10:11,839
fault injection on

283
00:10:12,000 --> 00:10:14,079
atmega328p

284
00:10:14,079 --> 00:10:16,079
chip which is 8-bit microcontroller from

285
00:10:16,079 --> 00:10:17,200
avr

286
00:10:17,200 --> 00:10:19,279
which is very simple and this is a

287
00:10:19,279 --> 00:10:21,360
common uh situation because a lot of

288
00:10:21,360 --> 00:10:23,519
research focuses on simple chips which

289
00:10:23,519 --> 00:10:25,200
are easy to get so you don't want to

290
00:10:25,200 --> 00:10:26,880
focus on something you cannot put your

291
00:10:26,880 --> 00:10:29,839
hands on you have to have it in your lab

292
00:10:29,839 --> 00:10:32,000
and yeah you rather have something

293
00:10:32,000 --> 00:10:34,160
simple to be able to understand what's

294
00:10:34,160 --> 00:10:35,920
happening

295
00:10:35,920 --> 00:10:38,640
but that's why quite often

296
00:10:38,640 --> 00:10:40,000
it happens that

297
00:10:40,000 --> 00:10:41,519
a lot of people raise the question will

298
00:10:41,519 --> 00:10:43,200
it actually work on modern devices if

299
00:10:43,200 --> 00:10:44,720
you have a smartphone can you glitch

300
00:10:44,720 --> 00:10:47,040
that because it runs quite quickly has

301
00:10:47,040 --> 00:10:49,519
lots of cores uh it is quite different

302
00:10:49,519 --> 00:10:51,760
from a microcontroller

303
00:10:51,760 --> 00:10:53,200
and yeah can we glitch when it's faster

304
00:10:53,200 --> 00:10:55,040
than one gigahertz uh is it even

305
00:10:55,040 --> 00:10:56,959
possible or is it too fast for us to

306
00:10:56,959 --> 00:10:59,600
have meaningful effects on the device

307
00:10:59,600 --> 00:11:01,839
and that's something we wanted to uh

308
00:11:01,839 --> 00:11:04,240
discuss in this presentation

309
00:11:04,240 --> 00:11:06,160
so first of all what's the difference

310
00:11:06,160 --> 00:11:08,320
between a simple microcontroller and a

311
00:11:08,320 --> 00:11:10,560
system on a chip like something a main

312
00:11:10,560 --> 00:11:12,880
computing unit in your

313
00:11:12,880 --> 00:11:16,160
smartphone well the difference is one of

314
00:11:16,160 --> 00:11:19,120
them is very simple another one is not

315
00:11:19,120 --> 00:11:20,560
so much

316
00:11:20,560 --> 00:11:22,399
uh so there are a bunch of different

317
00:11:22,399 --> 00:11:23,680
features you could look at and pretty

318
00:11:23,680 --> 00:11:25,040
much everywhere you can say

319
00:11:25,040 --> 00:11:27,360
microcontroller is just way too simple

320
00:11:27,360 --> 00:11:29,920
so you have single core quite often

321
00:11:29,920 --> 00:11:31,440
it is not rare to see 8-bit

322
00:11:31,440 --> 00:11:32,800
microcontroller

323
00:11:32,800 --> 00:11:34,720
these days you can see 32-bit and more

324
00:11:34,720 --> 00:11:37,839
um feature size for the on the silicon

325
00:11:37,839 --> 00:11:40,320
is also often quite much bigger than you

326
00:11:40,320 --> 00:11:44,240
would have on your latest smartphones

327
00:11:44,240 --> 00:11:46,160
um microcontroller is often quite

328
00:11:46,160 --> 00:11:47,920
generic so you don't have a lot of

329
00:11:47,920 --> 00:11:49,600
specific acceleration sometimes you

330
00:11:49,600 --> 00:11:52,000
would have crypto operations implemented

331
00:11:52,000 --> 00:11:53,680
but not always

332
00:11:53,680 --> 00:11:55,440
and it has very simple packaging so it's

333
00:11:55,440 --> 00:11:57,360
a small chip

334
00:11:57,360 --> 00:12:00,000
and everything is easy with a system on

335
00:12:00,000 --> 00:12:00,880
chip

336
00:12:00,880 --> 00:12:02,800
you often have a lot of course so it can

337
00:12:02,800 --> 00:12:04,560
be four or eight cores sometimes you

338
00:12:04,560 --> 00:12:06,079
have clusters you have big and little

339
00:12:06,079 --> 00:12:10,320
cores if you talk about smartphone socks

340
00:12:10,320 --> 00:12:11,600
and

341
00:12:11,600 --> 00:12:14,480
it's 64 bit uh most of the time feature

342
00:12:14,480 --> 00:12:16,880
size is very small so the chips are huge

343
00:12:16,880 --> 00:12:19,040
manufacturers go a long way to make the

344
00:12:19,040 --> 00:12:21,120
silicon as small as possible so it's

345
00:12:21,120 --> 00:12:22,560
quite different

346
00:12:22,560 --> 00:12:24,720
technology behind it as well

347
00:12:24,720 --> 00:12:27,839
it has a lot of dedicated uh engines so

348
00:12:27,839 --> 00:12:29,760
you have your crypto engine which does a

349
00:12:29,760 --> 00:12:31,760
lot of different crypto you maybe have

350
00:12:31,760 --> 00:12:33,760
ai module which does a lot of ai

351
00:12:33,760 --> 00:12:35,279
acceleration and so on so there's a lot

352
00:12:35,279 --> 00:12:36,240
of

353
00:12:36,240 --> 00:12:37,440
specialized

354
00:12:37,440 --> 00:12:38,720
hardware

355
00:12:38,720 --> 00:12:40,880
and to make it even worse

356
00:12:40,880 --> 00:12:42,800
often you have package and package so

357
00:12:42,800 --> 00:12:44,800
you would have your

358
00:12:44,800 --> 00:12:47,279
chip your cpu and there is on top you

359
00:12:47,279 --> 00:12:48,000
have

360
00:12:48,000 --> 00:12:49,120
ddr

361
00:12:49,120 --> 00:12:51,519
so you cannot easily access the chip

362
00:12:51,519 --> 00:12:54,000
this is not the case in our example but

363
00:12:54,000 --> 00:12:56,880
ronan will talk in a minute what exactly

364
00:12:56,880 --> 00:12:58,360
we've done our research on

365
00:12:58,360 --> 00:13:01,920
[Music]

366
00:13:01,920 --> 00:13:04,800
uh yeah so sergey has now introduced all

367
00:13:04,800 --> 00:13:07,839
the parts that we're interested in

368
00:13:07,839 --> 00:13:10,240
water socks what system on ships why are

369
00:13:10,240 --> 00:13:12,320
they interesting what is fault injection

370
00:13:12,320 --> 00:13:14,959
all of this sort of stuff

371
00:13:14,959 --> 00:13:17,920
and can it be used in modern fast

372
00:13:17,920 --> 00:13:20,560
processors and stuff so that's what we

373
00:13:20,560 --> 00:13:23,360
decided to look at and

374
00:13:23,360 --> 00:13:26,560
for this uh work we decided to use this

375
00:13:26,560 --> 00:13:28,399
board that you see on the right which is

376
00:13:28,399 --> 00:13:32,240
a pine 64. it's a relatively modern

377
00:13:32,240 --> 00:13:34,190
system on ship it's um

378
00:13:34,190 --> 00:13:35,360
[Music]

379
00:13:35,360 --> 00:13:36,399
by a

380
00:13:36,399 --> 00:13:38,560
manufacturer called all winner uh it's

381
00:13:38,560 --> 00:13:42,560
their a64 sock um it runs

382
00:13:42,560 --> 00:13:45,120
above one gigahertz it's multi-core it's

383
00:13:45,120 --> 00:13:46,720
relatively recent

384
00:13:46,720 --> 00:13:49,600
um and this is basically just a single

385
00:13:49,600 --> 00:13:52,079
board computer so based as a raspberry

386
00:13:52,079 --> 00:13:54,880
pi just a development board quite cheap

387
00:13:54,880 --> 00:13:57,040
quite easy to um

388
00:13:57,040 --> 00:13:59,920
obtain and we were able to talk publicly

389
00:13:59,920 --> 00:14:03,040
about this so this fitted all the boxes

390
00:14:03,040 --> 00:14:04,720
for being a nice uh target to have a

391
00:14:04,720 --> 00:14:05,920
look at

392
00:14:05,920 --> 00:14:07,199
um

393
00:14:07,199 --> 00:14:08,959
so yeah now we know what we want to

394
00:14:08,959 --> 00:14:11,600
glitch uh how do we actually go about

395
00:14:11,600 --> 00:14:12,800
doing this

396
00:14:12,800 --> 00:14:16,240
so this uh that you can see here is

397
00:14:16,240 --> 00:14:19,519
quite a generic um em fault engine so

398
00:14:19,519 --> 00:14:22,000
electromagnetic fault injection setup

399
00:14:22,000 --> 00:14:23,279
um

400
00:14:23,279 --> 00:14:25,920
you can see the various parts here in

401
00:14:25,920 --> 00:14:28,959
the bottom left this pcb with the wires

402
00:14:28,959 --> 00:14:31,680
coming and going is the target itself

403
00:14:31,680 --> 00:14:33,199
um

404
00:14:33,199 --> 00:14:35,440
the big yellow box that you can see

405
00:14:35,440 --> 00:14:38,160
above it is the uh

406
00:14:38,160 --> 00:14:41,040
em probe which is the thing that

407
00:14:41,040 --> 00:14:43,199
actually delivers the glitch so it's

408
00:14:43,199 --> 00:14:45,440
just got a lot of capacitors and stuff

409
00:14:45,440 --> 00:14:47,600
inside it it builds up the charge and

410
00:14:47,600 --> 00:14:51,199
then discharges it very quickly through

411
00:14:51,199 --> 00:14:54,000
a metal coil which is situated right on

412
00:14:54,000 --> 00:14:56,639
top of the chip

413
00:14:56,800 --> 00:15:00,000
you have uh this big table that it's all

414
00:15:00,000 --> 00:15:03,120
mounted on is basically just for moving

415
00:15:03,120 --> 00:15:06,800
the probe uh physically in space uh over

416
00:15:06,800 --> 00:15:09,120
the body of the

417
00:15:09,120 --> 00:15:10,000
chip

418
00:15:10,000 --> 00:15:12,240
and that's just very simple it's just

419
00:15:12,240 --> 00:15:14,720
three motors uh in each of the three

420
00:15:14,720 --> 00:15:17,040
axes just so you can control where in

421
00:15:17,040 --> 00:15:18,800
space you are

422
00:15:18,800 --> 00:15:19,920
um

423
00:15:19,920 --> 00:15:21,600
on the right hand side you can see at

424
00:15:21,600 --> 00:15:24,399
the bottom is an oscilloscope which we

425
00:15:24,399 --> 00:15:26,880
use for debugging the setup verifying

426
00:15:26,880 --> 00:15:28,079
that um

427
00:15:28,079 --> 00:15:30,959
everything's working as expected and the

428
00:15:30,959 --> 00:15:34,240
yellow thing on top of it is a spider is

429
00:15:34,240 --> 00:15:37,040
basically just for controlling the

430
00:15:37,040 --> 00:15:38,639
emfi probe

431
00:15:38,639 --> 00:15:42,000
and reading data from the target itself

432
00:15:42,000 --> 00:15:44,720
underneath so that basically just says

433
00:15:44,720 --> 00:15:47,920
when do you want to glitch and uh it

434
00:15:47,920 --> 00:15:50,000
controls the rest of the hardware which

435
00:15:50,000 --> 00:15:50,720
is

436
00:15:50,720 --> 00:15:53,040
quite dumb

437
00:15:53,040 --> 00:15:54,399
um

438
00:15:54,399 --> 00:15:56,240
but yeah so that's one of the major

439
00:15:56,240 --> 00:15:59,120
things with uh em fault injection it's

440
00:15:59,120 --> 00:16:02,240
about wear specifically so you have the

441
00:16:02,240 --> 00:16:04,800
chip underneath the probe and of course

442
00:16:04,800 --> 00:16:08,160
with a modern uh sock with any sock uh

443
00:16:08,160 --> 00:16:10,480
different parts of it will be located uh

444
00:16:10,480 --> 00:16:13,279
in different areas on the silicon so you

445
00:16:13,279 --> 00:16:14,480
might have different effects whether

446
00:16:14,480 --> 00:16:17,199
you're above the cpu above the memory

447
00:16:17,199 --> 00:16:20,480
above what other other components

448
00:16:20,480 --> 00:16:24,480
so this allows us to um

449
00:16:24,480 --> 00:16:26,399
yeah control all those parameters search

450
00:16:26,399 --> 00:16:28,079
through them see where we're

451
00:16:28,079 --> 00:16:30,399
seeing interesting stuff

452
00:16:30,399 --> 00:16:32,639
so okay we have a target that we can

453
00:16:32,639 --> 00:16:34,560
control we can run code on it we have

454
00:16:34,560 --> 00:16:37,279
our setup everything's good the first

455
00:16:37,279 --> 00:16:40,079
thing we then will do is just implement

456
00:16:40,079 --> 00:16:42,480
a very simple piece of code this is just

457
00:16:42,480 --> 00:16:46,399
something that's running on the device

458
00:16:46,639 --> 00:16:48,880
which will just

459
00:16:48,880 --> 00:16:51,040
have two variables uh reading and

460
00:16:51,040 --> 00:16:53,040
writing from memory one counting up one

461
00:16:53,040 --> 00:16:54,880
counting down to

462
00:16:54,880 --> 00:16:57,920
some uh number that we decide

463
00:16:57,920 --> 00:16:59,600
um

464
00:16:59,600 --> 00:17:01,600
and so we use very simple things like

465
00:17:01,600 --> 00:17:04,240
this as a very first step often to just

466
00:17:04,240 --> 00:17:06,079
get an idea for

467
00:17:06,079 --> 00:17:08,720
how powerful you need your glitch to be

468
00:17:08,720 --> 00:17:11,359
uh where in space so where above the

469
00:17:11,359 --> 00:17:13,119
chip needs to be just a very

470
00:17:13,119 --> 00:17:15,359
coarse-grained scan to

471
00:17:15,359 --> 00:17:17,199
reduce some of these parameter ranges

472
00:17:17,199 --> 00:17:20,160
that we're interested in

473
00:17:20,559 --> 00:17:22,720
and so we run this initially for a while

474
00:17:22,720 --> 00:17:25,599
you can see on the left hand side

475
00:17:25,599 --> 00:17:26,559
the

476
00:17:26,559 --> 00:17:28,880
ones highlighted in green this just as

477
00:17:28,880 --> 00:17:31,200
you can see returns the up count and

478
00:17:31,200 --> 00:17:32,400
down count

479
00:17:32,400 --> 00:17:35,440
the green ones are expected responses

480
00:17:35,440 --> 00:17:38,000
meaning the glitch did not affect the

481
00:17:38,000 --> 00:17:39,360
device at all

482
00:17:39,360 --> 00:17:42,799
so you see the 50 and the zero the

483
00:17:42,799 --> 00:17:44,960
results you can see on the left

484
00:17:44,960 --> 00:17:46,480
highlighted in red

485
00:17:46,480 --> 00:17:48,559
are ones where we have

486
00:17:48,559 --> 00:17:51,840
successfully modified the code executing

487
00:17:51,840 --> 00:17:54,480
on the device without crashing it

488
00:17:54,480 --> 00:17:57,360
so we've done a transient

489
00:17:57,360 --> 00:17:59,120
glitch on it

490
00:17:59,120 --> 00:18:01,039
and so you can see for example the first

491
00:18:01,039 --> 00:18:04,799
one the 51 is the up and the down this

492
00:18:04,799 --> 00:18:08,080
is very likely caused by us skipping

493
00:18:08,080 --> 00:18:10,160
as sergey was talking about skipping

494
00:18:10,160 --> 00:18:13,200
this uh decrement the decrement of the

495
00:18:13,200 --> 00:18:14,720
down counter

496
00:18:14,720 --> 00:18:16,000
um

497
00:18:16,000 --> 00:18:18,400
similarly with the forty nine zero it's

498
00:18:18,400 --> 00:18:21,280
skipping uh or one of the increments of

499
00:18:21,280 --> 00:18:22,720
the up counter

500
00:18:22,720 --> 00:18:24,320
um

501
00:18:24,320 --> 00:18:26,840
and then you have other ones like

502
00:18:26,840 --> 00:18:29,760
uh if you know um

503
00:18:29,760 --> 00:18:32,320
a bit of c programming this big four

504
00:18:32,320 --> 00:18:34,799
billion number might uh seem familiar to

505
00:18:34,799 --> 00:18:36,960
you it's uh

506
00:18:36,960 --> 00:18:39,679
the maximum value you can store in a

507
00:18:39,679 --> 00:18:41,360
32-bit thing

508
00:18:41,360 --> 00:18:44,160
uh variable so basically this is saying

509
00:18:44,160 --> 00:18:46,320
that we've modified one of the

510
00:18:46,320 --> 00:18:49,360
decrements to not decrement by one but

511
00:18:49,360 --> 00:18:51,679
instead to decrement by

512
00:18:51,679 --> 00:18:54,559
three i think it is in this case

513
00:18:54,559 --> 00:18:56,240
so it just shows we can have all sorts

514
00:18:56,240 --> 00:18:59,200
of uh varied results um

515
00:18:59,200 --> 00:19:00,640
for what we're doing and this sort of

516
00:19:00,640 --> 00:19:03,120
very simple test is a nice easy way to

517
00:19:03,120 --> 00:19:05,360
just um

518
00:19:05,360 --> 00:19:07,760
see where is good to glitch how powerful

519
00:19:07,760 --> 00:19:10,720
just to get a initial idea of the

520
00:19:10,720 --> 00:19:12,240
parameters that you want to use for your

521
00:19:12,240 --> 00:19:14,640
testing

522
00:19:15,360 --> 00:19:17,280
so it might not be so easy to see here

523
00:19:17,280 --> 00:19:19,039
but this is basically just a

524
00:19:19,039 --> 00:19:22,559
representation of the

525
00:19:22,720 --> 00:19:25,600
many glitching attempts we have done the

526
00:19:25,600 --> 00:19:28,720
uh back the darker part is just an image

527
00:19:28,720 --> 00:19:31,600
of the packaging of the dye itself and

528
00:19:31,600 --> 00:19:34,000
we've basically just uh

529
00:19:34,000 --> 00:19:36,080
divided that whole

530
00:19:36,080 --> 00:19:37,919
space into

531
00:19:37,919 --> 00:19:40,720
whatever grid size this is um

532
00:19:40,720 --> 00:19:42,799
and we can see all of the green spots

533
00:19:42,799 --> 00:19:44,720
are where we have had no effect on the

534
00:19:44,720 --> 00:19:47,200
device at all so it's just returned

535
00:19:47,200 --> 00:19:48,960
exactly what it should return we didn't

536
00:19:48,960 --> 00:19:50,559
modify anything

537
00:19:50,559 --> 00:19:51,760
um

538
00:19:51,760 --> 00:19:52,720
the

539
00:19:52,720 --> 00:19:55,039
pink spots if you can see are not so

540
00:19:55,039 --> 00:19:56,799
interesting they're a

541
00:19:56,799 --> 00:19:58,640
different error with the setup itself

542
00:19:58,640 --> 00:20:00,000
rather than the

543
00:20:00,000 --> 00:20:02,480
device being modified but what we are

544
00:20:02,480 --> 00:20:04,880
most interested in uh is the ones that

545
00:20:04,880 --> 00:20:06,400
we color red here

546
00:20:06,400 --> 00:20:09,280
so all of the ones that are red are

547
00:20:09,280 --> 00:20:10,799
we have

548
00:20:10,799 --> 00:20:12,880
changed the way the device is operating

549
00:20:12,880 --> 00:20:15,600
but it is still operating in a normal

550
00:20:15,600 --> 00:20:18,000
way otherwise so we've had a useful

551
00:20:18,000 --> 00:20:21,840
glitch without crashing the device

552
00:20:22,240 --> 00:20:23,919
and yeah generally what we're trying to

553
00:20:23,919 --> 00:20:25,280
do is

554
00:20:25,280 --> 00:20:28,159
change all of our parameters be it where

555
00:20:28,159 --> 00:20:30,480
on the chip we are how powerful we are

556
00:20:30,480 --> 00:20:31,679
all the various things we want to

557
00:20:31,679 --> 00:20:35,440
control to get the most reds because we

558
00:20:35,440 --> 00:20:36,880
generally think they're the most useful

559
00:20:36,880 --> 00:20:39,039
ones the device still works but it's

560
00:20:39,039 --> 00:20:41,919
done something it shouldn't have done

561
00:20:41,919 --> 00:20:43,360
um

562
00:20:43,360 --> 00:20:46,559
oh yeah and all of this

563
00:20:46,559 --> 00:20:48,960
is just running at the default clock

564
00:20:48,960 --> 00:20:50,400
speed of the

565
00:20:50,400 --> 00:20:51,360
um

566
00:20:51,360 --> 00:20:54,799
the sys the a64 sock we mentioned which

567
00:20:54,799 --> 00:20:56,960
is 400 megahertz

568
00:20:56,960 --> 00:20:58,159
um

569
00:20:58,159 --> 00:20:59,919
yeah just to get an initial feeling for

570
00:20:59,919 --> 00:21:02,320
how the chip reacts

571
00:21:02,320 --> 00:21:04,080
so then if we wanted to go into a bit

572
00:21:04,080 --> 00:21:06,240
more detail which we did

573
00:21:06,240 --> 00:21:09,280
to be able to see a bit more

574
00:21:09,280 --> 00:21:10,880
fine-grained effects and just to

575
00:21:10,880 --> 00:21:12,480
understand things better

576
00:21:12,480 --> 00:21:14,240
one of the things we did is implement

577
00:21:14,240 --> 00:21:15,840
what you can see on the left here is

578
00:21:15,840 --> 00:21:16,960
just a

579
00:21:16,960 --> 00:21:18,880
simple function

580
00:21:18,880 --> 00:21:20,960
in assembly which

581
00:21:20,960 --> 00:21:21,919
will

582
00:21:21,919 --> 00:21:24,720
take a fixed known value that we can see

583
00:21:24,720 --> 00:21:27,760
up here the a5 a5 a5

584
00:21:27,760 --> 00:21:30,159
and just read it and write it to and

585
00:21:30,159 --> 00:21:31,919
from memory

586
00:21:31,919 --> 00:21:34,799
and do nothing else so in the

587
00:21:34,799 --> 00:21:36,480
case where the device is operating

588
00:21:36,480 --> 00:21:38,320
normally you have not done

589
00:21:38,320 --> 00:21:40,640
any fault injection it will just give

590
00:21:40,640 --> 00:21:43,600
you back at the end that exact same a5

591
00:21:43,600 --> 00:21:44,799
a5

592
00:21:44,799 --> 00:21:47,360
um which is an arbitrary choice of

593
00:21:47,360 --> 00:21:48,799
constant

594
00:21:48,799 --> 00:21:51,280
um and then using the

595
00:21:51,280 --> 00:21:54,240
hardware setup we showed earlier we will

596
00:21:54,240 --> 00:21:56,480
basically deliver our glitch at some

597
00:21:56,480 --> 00:21:59,200
point during this loop which is just

598
00:21:59,200 --> 00:22:01,280
reading and writing that variable

599
00:22:01,280 --> 00:22:03,600
um so then what we want to see is can we

600
00:22:03,600 --> 00:22:06,480
affect and well how can we affect the

601
00:22:06,480 --> 00:22:08,640
operation of the device in a way that's

602
00:22:08,640 --> 00:22:11,039
useful to us

603
00:22:11,039 --> 00:22:13,440
um

604
00:22:13,440 --> 00:22:15,039
yes so

605
00:22:15,039 --> 00:22:16,640
similarly to before we can see on the

606
00:22:16,640 --> 00:22:19,600
left uh the results that we

607
00:22:19,600 --> 00:22:22,400
some of the results that we obtained um

608
00:22:22,400 --> 00:22:24,240
the normal response as i mentioned the

609
00:22:24,240 --> 00:22:26,799
green stuff on the top is just that a5

610
00:22:26,799 --> 00:22:29,760
a5 a5 constant

611
00:22:29,760 --> 00:22:31,360
and then in the red

612
00:22:31,360 --> 00:22:33,600
part below we see some of the more

613
00:22:33,600 --> 00:22:35,840
interesting ones that we saw so we said

614
00:22:35,840 --> 00:22:38,400
we were interested in seeing can we have

615
00:22:38,400 --> 00:22:41,840
precise uh single bit flips on be it the

616
00:22:41,840 --> 00:22:43,600
data that's being used or the

617
00:22:43,600 --> 00:22:46,000
instruction stream itself

618
00:22:46,000 --> 00:22:48,640
these are sorted this is a selection

619
00:22:48,640 --> 00:22:50,559
which is sorted on how often we saw the

620
00:22:50,559 --> 00:22:52,159
results um

621
00:22:52,159 --> 00:22:55,120
all of these top five ones are single

622
00:22:55,120 --> 00:22:59,919
bit flips away from this a5 a5 constant

623
00:22:59,919 --> 00:23:01,600
so you see they're all very similar but

624
00:23:01,600 --> 00:23:03,919
they differ by one bit in the binary so

625
00:23:03,919 --> 00:23:05,679
that is saying

626
00:23:05,679 --> 00:23:09,440
the data that was being read read or

627
00:23:09,440 --> 00:23:12,000
written to memory we have been able to

628
00:23:12,000 --> 00:23:13,679
modify it in

629
00:23:13,679 --> 00:23:17,440
only one bit so one bit precision um

630
00:23:17,440 --> 00:23:20,559
but the device has not seen it so

631
00:23:20,559 --> 00:23:22,480
it's still useful for us

632
00:23:22,480 --> 00:23:23,520
um

633
00:23:23,520 --> 00:23:25,360
another result that we saw quite a bit

634
00:23:25,360 --> 00:23:28,080
was um

635
00:23:28,080 --> 00:23:30,799
instead of this full a5 repeated four

636
00:23:30,799 --> 00:23:33,440
times being returned we would get just a

637
00:23:33,440 --> 00:23:36,960
single a5 and that is basically the way

638
00:23:36,960 --> 00:23:38,320
the

639
00:23:38,320 --> 00:23:41,760
arm 64 assembly is encoded

640
00:23:41,760 --> 00:23:44,000
the instruction that loads

641
00:23:44,000 --> 00:23:45,120
the full

642
00:23:45,120 --> 00:23:47,520
32-bit value versus the one that returns

643
00:23:47,520 --> 00:23:50,400
just a byte they are also one single bit

644
00:23:50,400 --> 00:23:52,559
flip different from each other so what

645
00:23:52,559 --> 00:23:55,520
we've seen there is that we can affect

646
00:23:55,520 --> 00:23:57,520
both the data

647
00:23:57,520 --> 00:23:59,600
and the instruction itself which loads

648
00:23:59,600 --> 00:24:00,640
the data

649
00:24:00,640 --> 00:24:01,760
um

650
00:24:01,760 --> 00:24:04,320
and then we see also uh on the bottom

651
00:24:04,320 --> 00:24:06,480
some other

652
00:24:06,480 --> 00:24:08,320
different results which are

653
00:24:08,320 --> 00:24:09,679
very hard to reason about because

654
00:24:09,679 --> 00:24:11,520
there's a lot of stuff going on on the

655
00:24:11,520 --> 00:24:14,000
chip it could be that it's corrupted one

656
00:24:14,000 --> 00:24:16,320
of the addresses to somewhere random it

657
00:24:16,320 --> 00:24:18,480
could be a data corruption there's many

658
00:24:18,480 --> 00:24:20,159
possible explanations

659
00:24:20,159 --> 00:24:22,320
and it's uh hard to

660
00:24:22,320 --> 00:24:26,240
say given the control that we have

661
00:24:26,799 --> 00:24:29,200
so yeah that shows uh

662
00:24:29,200 --> 00:24:30,799
some of the point the single bit flip

663
00:24:30,799 --> 00:24:32,740
stuff that we wanted to look at

664
00:24:32,740 --> 00:24:34,720
[Music]

665
00:24:34,720 --> 00:24:36,480
and here what we're looking at is

666
00:24:36,480 --> 00:24:38,480
similar to the previous picture it's

667
00:24:38,480 --> 00:24:40,320
just um

668
00:24:40,320 --> 00:24:42,880
the results of each attempt overlaid on

669
00:24:42,880 --> 00:24:45,039
the chip body itself

670
00:24:45,039 --> 00:24:46,559
i mentioned there's a number of

671
00:24:46,559 --> 00:24:47,520
different

672
00:24:47,520 --> 00:24:49,919
uh parameters we want to control time

673
00:24:49,919 --> 00:24:52,159
space power etc

674
00:24:52,159 --> 00:24:53,840
one of the things we are interested to

675
00:24:53,840 --> 00:24:56,000
look at is how

676
00:24:56,000 --> 00:24:58,320
the operating frequency of the

677
00:24:58,320 --> 00:25:01,039
underlying chip affects the ability to

678
00:25:01,039 --> 00:25:02,880
be able to have successful glitches on

679
00:25:02,880 --> 00:25:03,760
it

680
00:25:03,760 --> 00:25:06,400
so what we're looking at is on the

681
00:25:06,400 --> 00:25:08,000
top left

682
00:25:08,000 --> 00:25:10,559
the current multiplier there's

683
00:25:10,559 --> 00:25:13,279
is basically just

684
00:25:13,279 --> 00:25:15,279
there's an extra step in telling the

685
00:25:15,279 --> 00:25:18,159
chip how fast to run so the top left is

686
00:25:18,159 --> 00:25:21,200
the slowest speed which is i think 140

687
00:25:21,200 --> 00:25:24,240
megahertz roughly and the bottom right

688
00:25:24,240 --> 00:25:26,159
is the fastest speed that we were

689
00:25:26,159 --> 00:25:30,240
looking at which was 1.2 gigahertz

690
00:25:30,400 --> 00:25:32,880
and so we can see by the number of

691
00:25:32,880 --> 00:25:35,279
greens the number of reds and

692
00:25:35,279 --> 00:25:38,159
yellow which is not relevant for us

693
00:25:38,159 --> 00:25:39,919
there is a very clear correlation

694
00:25:39,919 --> 00:25:41,200
between

695
00:25:41,200 --> 00:25:43,200
how fast the chip is running and how

696
00:25:43,200 --> 00:25:44,799
easy it is to

697
00:25:44,799 --> 00:25:45,840
have a

698
00:25:45,840 --> 00:25:48,000
noticeable effect on the chip without

699
00:25:48,000 --> 00:25:50,400
crashing it so something that could be

700
00:25:50,400 --> 00:25:53,360
useful from a security point of view

701
00:25:53,360 --> 00:25:55,840
um

702
00:25:55,840 --> 00:25:57,760
[Music]

703
00:25:57,760 --> 00:26:00,559
yeah so that already shows two things we

704
00:26:00,559 --> 00:26:01,520
can

705
00:26:01,520 --> 00:26:03,279
have these nice single bit flips that

706
00:26:03,279 --> 00:26:05,120
we're interested in and

707
00:26:05,120 --> 00:26:06,080
actually

708
00:26:06,080 --> 00:26:08,320
possibly counter intuitively the faster

709
00:26:08,320 --> 00:26:11,039
it is the easier to glitch it is

710
00:26:11,039 --> 00:26:15,440
for some and then this uh just basically

711
00:26:15,440 --> 00:26:17,840
uh shows on a graph simply what we've

712
00:26:17,840 --> 00:26:19,760
just seen before

713
00:26:19,760 --> 00:26:21,440
for each of the frequencies we were

714
00:26:21,440 --> 00:26:24,559
interested in

715
00:26:24,559 --> 00:26:27,120
there was roughly 90 000 attempts at

716
00:26:27,120 --> 00:26:29,520
each frequency here and you can see

717
00:26:29,520 --> 00:26:32,400
there's a clear correlation between

718
00:26:32,400 --> 00:26:34,159
the chip running faster and the chip

719
00:26:34,159 --> 00:26:37,840
being more susceptible to fault

720
00:26:37,840 --> 00:26:40,320
um so this just shows the same thing so

721
00:26:40,320 --> 00:26:41,039
then

722
00:26:41,039 --> 00:26:42,720
one thing that you might think about is

723
00:26:42,720 --> 00:26:44,320
why

724
00:26:44,320 --> 00:26:46,320
why would it be that the faster you run

725
00:26:46,320 --> 00:26:48,480
the more

726
00:26:48,480 --> 00:26:50,000
easily glitched you are the more

727
00:26:50,000 --> 00:26:52,559
susceptible you are to fault injection

728
00:26:52,559 --> 00:26:55,760
so this is uh one possible explanation

729
00:26:55,760 --> 00:26:58,080
if you see at the top is a

730
00:26:58,080 --> 00:27:02,000
representation of a power trace or

731
00:27:02,000 --> 00:27:03,919
a trace of the device when it's running

732
00:27:03,919 --> 00:27:06,960
at a slow speed 600 megahertz and the

733
00:27:06,960 --> 00:27:08,799
same operation when it's running at a

734
00:27:08,799 --> 00:27:11,919
faster speed 1.2 gigahertz obviously you

735
00:27:11,919 --> 00:27:15,520
can see in time and the x-axis is time

736
00:27:15,520 --> 00:27:18,559
in time the same operations are clearly

737
00:27:18,559 --> 00:27:21,840
much more compressed

738
00:27:21,840 --> 00:27:24,159
so the way the hardware that we're using

739
00:27:24,159 --> 00:27:25,840
works

740
00:27:25,840 --> 00:27:27,520
is the

741
00:27:27,520 --> 00:27:29,919
amount of time it takes for the coil to

742
00:27:29,919 --> 00:27:31,679
just charge fully so to deliver the

743
00:27:31,679 --> 00:27:34,480
glitch that is fixed that's a constant

744
00:27:34,480 --> 00:27:35,919
so

745
00:27:35,919 --> 00:27:38,080
and that's this 52 nanoseconds you see

746
00:27:38,080 --> 00:27:39,679
at the bottom

747
00:27:39,679 --> 00:27:41,270
so you can see that um

748
00:27:41,270 --> 00:27:43,360
[Music]

749
00:27:43,360 --> 00:27:44,480
as the

750
00:27:44,480 --> 00:27:47,520
amount of operations uh in that time is

751
00:27:47,520 --> 00:27:49,919
way higher there's way more potential

752
00:27:49,919 --> 00:27:52,159
chance to affect one of them because

753
00:27:52,159 --> 00:27:53,200
you're

754
00:27:53,200 --> 00:27:55,039
inducing the current while all this is

755
00:27:55,039 --> 00:27:57,120
uh happening the more things that are

756
00:27:57,120 --> 00:27:58,640
happening the more chance there is

757
00:27:58,640 --> 00:28:01,039
something can go wrong this is a very

758
00:28:01,039 --> 00:28:04,559
hand-wavy explanation but it's um

759
00:28:04,559 --> 00:28:07,200
yeah one that's quite easy to understand

760
00:28:07,200 --> 00:28:08,080
um

761
00:28:08,080 --> 00:28:12,159
so that's one of the explanations um

762
00:28:12,159 --> 00:28:14,080
and yeah so we've seen for fault

763
00:28:14,080 --> 00:28:18,159
injection we can do it we can affect

764
00:28:18,159 --> 00:28:20,000
all sorts of codes sometimes security

765
00:28:20,000 --> 00:28:22,799
sensitive code so naturally you might

766
00:28:22,799 --> 00:28:25,120
ask how can you defend against this

767
00:28:25,120 --> 00:28:27,760
because even with a perfectly programmed

768
00:28:27,760 --> 00:28:30,399
software you can still introduce faults

769
00:28:30,399 --> 00:28:31,200
which

770
00:28:31,200 --> 00:28:33,840
uh can introduce bugs

771
00:28:33,840 --> 00:28:34,640
um

772
00:28:34,640 --> 00:28:36,799
so yeah there's some stuff that you can

773
00:28:36,799 --> 00:28:39,600
do in the hardware itself so bake into

774
00:28:39,600 --> 00:28:42,000
the silicon of the sock

775
00:28:42,000 --> 00:28:43,679
so these hardware sensors you can do

776
00:28:43,679 --> 00:28:44,799
things like

777
00:28:44,799 --> 00:28:46,720
detect when you're operating outside of

778
00:28:46,720 --> 00:28:49,039
your normal voltage range uh that you

779
00:28:49,039 --> 00:28:51,600
expect and if you see that you're

780
00:28:51,600 --> 00:28:53,279
outside of that

781
00:28:53,279 --> 00:28:56,000
uh reset the chip or stop executing so

782
00:28:56,000 --> 00:28:57,919
stuff like brown out detection as well

783
00:28:57,919 --> 00:28:59,360
um

784
00:28:59,360 --> 00:29:01,600
for laser fault injection sergey

785
00:29:01,600 --> 00:29:03,600
mentioned earlier you're shining a laser

786
00:29:03,600 --> 00:29:06,240
onto the chip you can also have

787
00:29:06,240 --> 00:29:07,600
light sensors

788
00:29:07,600 --> 00:29:10,960
in the silicon itself which detect if

789
00:29:10,960 --> 00:29:13,039
i'm seeing too much too many photons

790
00:29:13,039 --> 00:29:14,559
like too much light at this point in

791
00:29:14,559 --> 00:29:16,960
time at that point in space

792
00:29:16,960 --> 00:29:19,600
then yeah reset do something like that

793
00:29:19,600 --> 00:29:22,320
um so this that's at a hardware level at

794
00:29:22,320 --> 00:29:24,799
a software level you can also

795
00:29:24,799 --> 00:29:27,279
follow various uh like programming

796
00:29:27,279 --> 00:29:31,679
practices patterns to defeat uh

797
00:29:31,679 --> 00:29:34,080
to make these sorts of attacks harder

798
00:29:34,080 --> 00:29:36,640
um some of them for example this random

799
00:29:36,640 --> 00:29:40,159
delays as sergey mentioned there's

800
00:29:40,159 --> 00:29:42,320
there can be jitter there can be all

801
00:29:42,320 --> 00:29:45,039
sorts of uh changes in the timing of the

802
00:29:45,039 --> 00:29:46,559
program which

803
00:29:46,559 --> 00:29:49,360
you as an attacker need to be able to

804
00:29:49,360 --> 00:29:51,679
precisely say i want to go here if you

805
00:29:51,679 --> 00:29:54,000
start introducing just random delay

806
00:29:54,000 --> 00:29:57,039
loops that changes where in time the

807
00:29:57,039 --> 00:30:00,480
interesting operations are

808
00:30:01,200 --> 00:30:03,440
so that's one you can do redundant

809
00:30:03,440 --> 00:30:05,520
computations

810
00:30:05,520 --> 00:30:07,600
so do the same computation twice if you

811
00:30:07,600 --> 00:30:09,440
see a differing result then that means

812
00:30:09,440 --> 00:30:10,720
likely there's

813
00:30:10,720 --> 00:30:12,559
something has gone wrong via f fault

814
00:30:12,559 --> 00:30:14,799
injection be it uh whatever and then

815
00:30:14,799 --> 00:30:16,880
again early out

816
00:30:16,880 --> 00:30:19,039
you can do stuff like control flow

817
00:30:19,039 --> 00:30:20,320
integrity

818
00:30:20,320 --> 00:30:23,360
checking so just making sure

819
00:30:23,360 --> 00:30:25,760
you are executing in the order you

820
00:30:25,760 --> 00:30:27,520
believe you should be executing in and

821
00:30:27,520 --> 00:30:29,600
you're getting functions called for

822
00:30:29,600 --> 00:30:31,200
example from the place that you think

823
00:30:31,200 --> 00:30:32,799
they should be called

824
00:30:32,799 --> 00:30:34,399
um

825
00:30:34,399 --> 00:30:36,240
and then there's also some other stuff

826
00:30:36,240 --> 00:30:38,880
about using certain whenever you need uh

827
00:30:38,880 --> 00:30:41,360
magic values true false using ones that

828
00:30:41,360 --> 00:30:42,000
are

829
00:30:42,000 --> 00:30:43,440
hard to

830
00:30:43,440 --> 00:30:45,520
flip using fault injections so hard to

831
00:30:45,520 --> 00:30:48,080
turn from one to the other

832
00:30:48,080 --> 00:30:50,080
uh and yeah so everything we've shown so

833
00:30:50,080 --> 00:30:52,399
far is very um

834
00:30:52,399 --> 00:30:54,480
in a controlled environment we have full

835
00:30:54,480 --> 00:30:56,960
code execution on the development board

836
00:30:56,960 --> 00:30:59,440
we have all this nice fancy equipment

837
00:30:59,440 --> 00:31:01,440
that's precise and

838
00:31:01,440 --> 00:31:03,440
expensive and everything

839
00:31:03,440 --> 00:31:06,320
but then it comes to the question so

840
00:31:06,320 --> 00:31:07,679
how about when you want to do that on

841
00:31:07,679 --> 00:31:09,120
the cheap how about you want to have

842
00:31:09,120 --> 00:31:11,200
some uh fun and

843
00:31:11,200 --> 00:31:12,960
not need expensive equipment can we

844
00:31:12,960 --> 00:31:14,640
still do this sort of stuff

845
00:31:14,640 --> 00:31:16,320
and that's what uh sergey is going to

846
00:31:16,320 --> 00:31:19,559
tell you about

847
00:31:19,600 --> 00:31:22,559
um yeah so for the demo we thought about

848
00:31:22,559 --> 00:31:24,799
bringing our setup from the lab show you

849
00:31:24,799 --> 00:31:26,960
how it's done

850
00:31:26,960 --> 00:31:29,519
tiny problem with going to mch with the

851
00:31:29,519 --> 00:31:32,000
equipment from the lab there was 100

852
00:31:32,000 --> 00:31:33,519
chance we're gonna spill beer on it

853
00:31:33,519 --> 00:31:35,120
somewhere in our tent

854
00:31:35,120 --> 00:31:36,960
so we didn't do that

855
00:31:36,960 --> 00:31:38,880
uh but we still wanted to show how

856
00:31:38,880 --> 00:31:40,720
glitching could be done so

857
00:31:40,720 --> 00:31:42,480
um here's nils

858
00:31:42,480 --> 00:31:44,880
uh our colleague he

859
00:31:44,880 --> 00:31:47,360
brought his equipment this is a hobbyist

860
00:31:47,360 --> 00:31:50,000
tool picker mp a similar idea so you

861
00:31:50,000 --> 00:31:52,080
also have a coil you can see the bottom

862
00:31:52,080 --> 00:31:54,480
and you can introduce a glitch also yum

863
00:31:54,480 --> 00:31:56,960
glitch and we got this nice page from

864
00:31:56,960 --> 00:31:59,519
the organizers which can run a lot of

865
00:31:59,519 --> 00:32:01,600
different software and we thought and it

866
00:32:01,600 --> 00:32:03,039
has a lot of different chips if you

867
00:32:03,039 --> 00:32:04,640
looked at the schematics or at least at

868
00:32:04,640 --> 00:32:06,320
the back of the chip there's a lot of

869
00:32:06,320 --> 00:32:08,080
different stuff so we thought it might

870
00:32:08,080 --> 00:32:09,120
be fun

871
00:32:09,120 --> 00:32:11,200
to try it and

872
00:32:11,200 --> 00:32:14,080
so what niels did the first day he got

873
00:32:14,080 --> 00:32:16,159
it he wanted to try he looked at this

874
00:32:16,159 --> 00:32:18,559
speaker chip and it controls a few

875
00:32:18,559 --> 00:32:21,200
things for example the backlight of the

876
00:32:21,200 --> 00:32:22,559
screen

877
00:32:22,559 --> 00:32:23,679
and

878
00:32:23,679 --> 00:32:25,919
that's a bit of a video if it works we

879
00:32:25,919 --> 00:32:28,559
can show you

880
00:32:28,559 --> 00:32:29,840
yeah it works

881
00:32:29,840 --> 00:32:31,840
so yeah you can see the coil

882
00:32:31,840 --> 00:32:34,960
in the lab we use a nice xyz station

883
00:32:34,960 --> 00:32:37,679
with a micrometer precision

884
00:32:37,679 --> 00:32:40,480
here niels has a nanometer precision

885
00:32:40,480 --> 00:32:42,559
and he can put the coil exactly in the

886
00:32:42,559 --> 00:32:43,919
spot to

887
00:32:43,919 --> 00:32:45,840
be close enough to the pikachu and you

888
00:32:45,840 --> 00:32:47,440
can see the screen here

889
00:32:47,440 --> 00:32:49,679
he presses the button he introduces the

890
00:32:49,679 --> 00:32:52,240
glitch and the backlight so the chip

891
00:32:52,240 --> 00:32:53,679
lightly resets

892
00:32:53,679 --> 00:32:56,320
and uh yeah it just uh the light is goes

893
00:32:56,320 --> 00:32:57,679
off and on

894
00:32:57,679 --> 00:32:59,039
there are also some other effect you can

895
00:32:59,039 --> 00:33:02,159
see it shows restarting or some

896
00:33:02,159 --> 00:33:03,519
other things

897
00:33:03,519 --> 00:33:05,760
uh so yeah we can affect the chip it's

898
00:33:05,760 --> 00:33:07,840
not very nice glitch unlikely as an

899
00:33:07,840 --> 00:33:09,840
attacker you really wanted to come close

900
00:33:09,840 --> 00:33:11,679
to the user press the button and make

901
00:33:11,679 --> 00:33:14,080
sure his backlight doesn't work

902
00:33:14,080 --> 00:33:16,240
but yeah it's it's something we can do

903
00:33:16,240 --> 00:33:17,200
here

904
00:33:17,200 --> 00:33:19,519
uh we thought maybe there is something

905
00:33:19,519 --> 00:33:20,320
else

906
00:33:20,320 --> 00:33:21,679
and uh

907
00:33:21,679 --> 00:33:23,200
graphic uh

908
00:33:23,200 --> 00:33:26,240
we could show on the uh badge is nice

909
00:33:26,240 --> 00:33:29,200
target for us so we found this nice app

910
00:33:29,200 --> 00:33:31,039
uh great to have a lot of different ones

911
00:33:31,039 --> 00:33:33,279
it says it runs on fpga so there's also

912
00:33:33,279 --> 00:33:35,600
fpga chip on the target

913
00:33:35,600 --> 00:33:37,760
uh it's mandelbrot it shows you these

914
00:33:37,760 --> 00:33:40,320
two nice sets you can with a button

915
00:33:40,320 --> 00:33:42,159
switch between those two so you click

916
00:33:42,159 --> 00:33:44,240
the button you have that one you click

917
00:33:44,240 --> 00:33:46,240
the button again you go back to the

918
00:33:46,240 --> 00:33:48,559
original screen so these two screens

919
00:33:48,559 --> 00:33:50,559
you're supposed to have and nothing else

920
00:33:50,559 --> 00:33:52,159
should happen

921
00:33:52,159 --> 00:33:53,760
well you can zoom in and out but that's

922
00:33:53,760 --> 00:33:55,919
it

923
00:33:56,399 --> 00:33:59,039
so we started to glitch first of course

924
00:33:59,039 --> 00:34:01,120
fpga chip is on top

925
00:34:01,120 --> 00:34:04,320
a nice target when we get close to it

926
00:34:04,320 --> 00:34:06,399
it resets we can see that the screen is

927
00:34:06,399 --> 00:34:09,199
just um the graphics goes back to the

928
00:34:09,199 --> 00:34:11,839
original position so to this screen

929
00:34:11,839 --> 00:34:14,560
so if you zoom in and out or move around

930
00:34:14,560 --> 00:34:16,800
and glitch the chip it will just reset

931
00:34:16,800 --> 00:34:18,560
back to this

932
00:34:18,560 --> 00:34:21,119
so we glitched around what often also

933
00:34:21,119 --> 00:34:23,199
happens with fault injection instead of

934
00:34:23,199 --> 00:34:26,079
targeting the chip itself you often

935
00:34:26,079 --> 00:34:27,760
can for example introduce a glitch in a

936
00:34:27,760 --> 00:34:29,520
capacitor next to it

937
00:34:29,520 --> 00:34:32,800
and affect it through the voltage uh

938
00:34:32,800 --> 00:34:34,639
introducing first em and then causing

939
00:34:34,639 --> 00:34:37,119
voltage change in the capacitor so we

940
00:34:37,119 --> 00:34:39,839
found that if we target this area uh

941
00:34:39,839 --> 00:34:42,639
marked in red we can really affect the

942
00:34:42,639 --> 00:34:44,639
chip and get different outputs

943
00:34:44,639 --> 00:34:45,440
uh

944
00:34:45,440 --> 00:34:46,879
then niels looked it up in the

945
00:34:46,879 --> 00:34:48,639
schematics it was very nice from

946
00:34:48,639 --> 00:34:51,119
organizers also to our open source

947
00:34:51,119 --> 00:34:53,040
everything on github so we could see

948
00:34:53,040 --> 00:34:54,560
that this is voltage regulator which

949
00:34:54,560 --> 00:34:57,599
produces 1.2 volts which eventually

950
00:34:57,599 --> 00:35:00,240
goes into the

951
00:35:00,240 --> 00:35:03,200
fpga board so that's plausible we hit

952
00:35:03,200 --> 00:35:06,560
the voltage regulator and

953
00:35:06,560 --> 00:35:08,560
something happens with the fpga with the

954
00:35:08,560 --> 00:35:11,599
graphics so what did we get

955
00:35:11,599 --> 00:35:13,680
this one was one of the first glitches

956
00:35:13,680 --> 00:35:15,680
this is totally not what you're supposed

957
00:35:15,680 --> 00:35:17,040
to see so what you're supposed to see

958
00:35:17,040 --> 00:35:18,960
you remember those two

959
00:35:18,960 --> 00:35:20,000
and

960
00:35:20,000 --> 00:35:21,680
that's the output and the interesting

961
00:35:21,680 --> 00:35:23,760
thing is we could affect the chip we get

962
00:35:23,760 --> 00:35:25,839
totally different graphics on the output

963
00:35:25,839 --> 00:35:28,400
the chip still runs perfectly

964
00:35:28,400 --> 00:35:31,599
and these features of uh

965
00:35:31,599 --> 00:35:34,079
switching the graphics the mandelbrot

966
00:35:34,079 --> 00:35:35,040
set

967
00:35:35,040 --> 00:35:37,520
and zooming in and out still works so

968
00:35:37,520 --> 00:35:39,520
the chip operates perfectly we can do

969
00:35:39,520 --> 00:35:41,040
operations on this and get different

970
00:35:41,040 --> 00:35:43,119
graphics and there are a few others

971
00:35:43,119 --> 00:35:46,000
which are totally different but also

972
00:35:46,000 --> 00:35:48,000
very different from what you expected to

973
00:35:48,000 --> 00:35:50,079
see on the screen so you see this is

974
00:35:50,079 --> 00:35:51,920
zoomed in zoomed out and this is zooming

975
00:35:51,920 --> 00:35:53,119
in big

976
00:35:53,119 --> 00:35:55,119
back and it works

977
00:35:55,119 --> 00:35:56,640
we could also

978
00:35:56,640 --> 00:35:58,800
once get this glitch which is totally

979
00:35:58,800 --> 00:36:00,800
what you not expect from a recursive

980
00:36:00,800 --> 00:36:03,359
mental bra set uh just cover the whole

981
00:36:03,359 --> 00:36:04,800
screen with some

982
00:36:04,800 --> 00:36:06,880
ascii graphics

983
00:36:06,880 --> 00:36:09,040
and finally an interesting glitch we got

984
00:36:09,040 --> 00:36:10,880
this morning is

985
00:36:10,880 --> 00:36:13,280
this this is totally not what you expect

986
00:36:13,280 --> 00:36:14,960
we don't press any buttons with listed

987
00:36:14,960 --> 00:36:17,200
ones and it just started to alternate

988
00:36:17,200 --> 00:36:19,200
between these two pictures uh back and

989
00:36:19,200 --> 00:36:22,160
forth again and again

990
00:36:22,160 --> 00:36:23,200
um

991
00:36:23,200 --> 00:36:26,320
so that's uh more or less what we've

992
00:36:26,320 --> 00:36:27,440
done

993
00:36:27,440 --> 00:36:29,440
being here

994
00:36:29,440 --> 00:36:30,880
some takeaways

995
00:36:30,880 --> 00:36:33,680
so first of all physical attacks uh if

996
00:36:33,680 --> 00:36:36,160
you ride software it is quite often

997
00:36:36,160 --> 00:36:37,200
overpowered

998
00:36:37,200 --> 00:36:39,520
you can do so many things it's so

999
00:36:39,520 --> 00:36:41,040
difficult to protect

1000
00:36:41,040 --> 00:36:45,040
attacker can often put much more um

1001
00:36:45,040 --> 00:36:48,960
effort into trying to break your device

1002
00:36:49,440 --> 00:36:50,880
another thing which you've learned

1003
00:36:50,880 --> 00:36:54,320
modern socks they are not much less

1004
00:36:54,320 --> 00:36:56,240
vulnerable the hardware itself there is

1005
00:36:56,240 --> 00:36:57,520
still

1006
00:36:57,520 --> 00:36:59,040
hardware attacks which apply to it and

1007
00:36:59,040 --> 00:37:00,880
even if you run very fast and as we

1008
00:37:00,880 --> 00:37:03,680
showed sometimes it can be even easier

1009
00:37:03,680 --> 00:37:05,200
affected so you have smaller feature

1010
00:37:05,200 --> 00:37:08,240
size you have tiny transistors you have

1011
00:37:08,240 --> 00:37:11,280
huge frequencies which are crazy and

1012
00:37:11,280 --> 00:37:13,520
yeah we can corrupt a lot of things

1013
00:37:13,520 --> 00:37:15,520
running the device and very important

1014
00:37:15,520 --> 00:37:17,440
the last uh point

1015
00:37:17,440 --> 00:37:20,880
uh official mch page is susceptible to

1016
00:37:20,880 --> 00:37:22,800
fault injection so maybe something for

1017
00:37:22,800 --> 00:37:24,960
the next time to improve

1018
00:37:24,960 --> 00:37:28,160
if that's the attacker model

1019
00:37:28,960 --> 00:37:30,630
thank you very much

1020
00:37:30,630 --> 00:37:37,090
[Applause]

1021
00:37:37,920 --> 00:37:38,880
uh

1022
00:37:38,880 --> 00:37:43,119
we still have some time so we can try to

1023
00:37:43,119 --> 00:37:45,440
fail miserably and trying to show one of

1024
00:37:45,440 --> 00:37:46,880
those glitches you can see we have it

1025
00:37:46,880 --> 00:37:49,280
here on stage

1026
00:37:49,280 --> 00:37:51,599
thank you thank you very much

1027
00:37:51,599 --> 00:37:54,400
if it actually works though

1028
00:37:54,400 --> 00:37:56,320
um

1029
00:37:56,320 --> 00:37:58,720
okay

1030
00:37:58,800 --> 00:37:59,839
yeah

1031
00:37:59,839 --> 00:38:01,760
it still runs i can maybe show you how

1032
00:38:01,760 --> 00:38:03,839
it's supposed to work if i'm careful

1033
00:38:03,839 --> 00:38:06,160
enough so you have these

1034
00:38:06,160 --> 00:38:08,079
buttons you can zoom in zoom out if you

1035
00:38:08,079 --> 00:38:09,680
can try this app

1036
00:38:09,680 --> 00:38:10,880
so you can see something like this on

1037
00:38:10,880 --> 00:38:13,920
the device so if we try to glitch it

1038
00:38:13,920 --> 00:38:16,720
first i will target it's on the back

1039
00:38:16,720 --> 00:38:19,119
then

1040
00:38:19,119 --> 00:38:20,960
yeah so i can show you for example the

1041
00:38:20,960 --> 00:38:24,160
backlight if i'm successful yeah

1042
00:38:24,160 --> 00:38:25,920
oh no

1043
00:38:25,920 --> 00:38:26,800
um

1044
00:38:26,800 --> 00:38:29,520
so normally it doesn't happen

1045
00:38:29,520 --> 00:38:31,520
this time we

1046
00:38:31,520 --> 00:38:34,800
turned off the so i glitched the pikachu

1047
00:38:34,800 --> 00:38:37,280
and it's supposed to reset and we lose

1048
00:38:37,280 --> 00:38:40,160
the backlight and go back on now it's

1049
00:38:40,160 --> 00:38:43,040
persistent so if we're lucky yes so i

1050
00:38:43,040 --> 00:38:45,599
reset now by disconnecting the wire

1051
00:38:45,599 --> 00:38:48,320
and it goes back in and everything works

1052
00:38:48,320 --> 00:38:50,240
and just to maybe quickly say something

1053
00:38:50,240 --> 00:38:52,160
about the hardware this is very similar

1054
00:38:52,160 --> 00:38:54,560
to what we described this is just a

1055
00:38:54,560 --> 00:38:57,200
battery pack

1056
00:38:57,359 --> 00:38:59,119
this raspberry pi

1057
00:38:59,119 --> 00:39:01,200
is for controlling the logic

1058
00:39:01,200 --> 00:39:03,359
this is the coil it just builds up the

1059
00:39:03,359 --> 00:39:06,160
charge in here and just discharges it

1060
00:39:06,160 --> 00:39:08,240
very quickly through that coil right

1061
00:39:08,240 --> 00:39:09,440
beside the

1062
00:39:09,440 --> 00:39:11,359
chip itself and that's how you're

1063
00:39:11,359 --> 00:39:14,320
introducing the fault

1064
00:39:14,320 --> 00:39:16,640
um okay and

1065
00:39:16,640 --> 00:39:19,040
so the first attempt was not an awesome

1066
00:39:19,040 --> 00:39:21,119
demo we got the persistent glitch now

1067
00:39:21,119 --> 00:39:22,480
we'll try

1068
00:39:22,480 --> 00:39:25,680
maybe for lucky and find the spot

1069
00:39:25,680 --> 00:39:26,960
i'm now

1070
00:39:26,960 --> 00:39:28,880
focusing on the

1071
00:39:28,880 --> 00:39:31,520
regulator

1072
00:39:31,920 --> 00:39:34,880
trying to be very careful moving a tiny

1073
00:39:34,880 --> 00:39:36,960
bit at a time

1074
00:39:36,960 --> 00:39:39,599
ideally it would be a few micrometers

1075
00:39:39,599 --> 00:39:41,839
and it's worth mentioning that in

1076
00:39:41,839 --> 00:39:43,920
practice when we're doing projects and

1077
00:39:43,920 --> 00:39:46,880
stuff we have all of this automated so

1078
00:39:46,880 --> 00:39:49,280
that's why we have all this fancy xy

1079
00:39:49,280 --> 00:39:51,520
stage and all these sorts of things

1080
00:39:51,520 --> 00:39:53,440
if you maybe saw the glitch there is so

1081
00:39:53,440 --> 00:39:55,520
that we can set it once and just forget

1082
00:39:55,520 --> 00:39:57,440
it let it run collect hundreds of

1083
00:39:57,440 --> 00:39:59,119
thousands of attempts

1084
00:39:59,119 --> 00:40:01,680
where here we're clicking manually each

1085
00:40:01,680 --> 00:40:04,319
time to do a glitch so

1086
00:40:04,319 --> 00:40:07,359
slightly less optimized

1087
00:40:07,359 --> 00:40:09,280
you could see tiny effects on the screen

1088
00:40:09,280 --> 00:40:11,200
and this area is actually very sensitive

1089
00:40:11,200 --> 00:40:12,720
so we can

1090
00:40:12,720 --> 00:40:14,560
luckily if we're

1091
00:40:14,560 --> 00:40:16,400
successful enough to get actually good

1092
00:40:16,400 --> 00:40:18,960
glitch here

1093
00:40:18,960 --> 00:40:20,800
but if it doesn't work in a second

1094
00:40:20,800 --> 00:40:24,760
that's gonna be it

1095
00:40:28,880 --> 00:40:32,680
is it actually still operating

1096
00:40:39,040 --> 00:40:40,800
yeah this area when it shows on the half

1097
00:40:40,800 --> 00:40:43,520
of the screen that it uh blinks it's

1098
00:40:43,520 --> 00:40:46,000
normally successful unfortunately this

1099
00:40:46,000 --> 00:40:48,160
time we didn't get it if you want to try

1100
00:40:48,160 --> 00:40:50,480
it out yourself when you come to us uh

1101
00:40:50,480 --> 00:40:53,680
after the presentation you can see it

1102
00:40:53,680 --> 00:40:55,040
that's why you should never do a demo it

1103
00:40:55,040 --> 00:40:57,280
never works thank you very much and if

1104
00:40:57,280 --> 00:40:58,950
you have any

1105
00:40:58,950 --> 00:41:02,340
[Applause]

1106
00:41:02,340 --> 00:41:03,230
[Music]

1107
00:41:03,230 --> 00:41:04,839
[Applause]

1108
00:41:04,839 --> 00:41:07,839
questions uh thank you so much

1109
00:41:07,839 --> 00:41:10,160
uh we have a little bit of time for uh

1110
00:41:10,160 --> 00:41:13,280
questions q a so uh so if you wanna ask

1111
00:41:13,280 --> 00:41:15,119
a question uh there's uh i think there's

1112
00:41:15,119 --> 00:41:17,680
two microphones so uh line it behind the

1113
00:41:17,680 --> 00:41:20,400
microphones there uh so signal angels do

1114
00:41:20,400 --> 00:41:22,480
we have any questions from the internet

1115
00:41:22,480 --> 00:41:24,240
at all

1116
00:41:24,240 --> 00:41:27,440
uh not seeing any uh so uh

1117
00:41:27,440 --> 00:41:30,880
so are there any kind of um uh you know

1118
00:41:30,880 --> 00:41:33,280
how these attacks can be used in the in

1119
00:41:33,280 --> 00:41:34,880
the real world you know

1120
00:41:34,880 --> 00:41:37,040
um are there any uh i mean you mentioned

1121
00:41:37,040 --> 00:41:39,200
about the the uh bitcoin wallet right is

1122
00:41:39,200 --> 00:41:41,520
that uh uh you know are there other

1123
00:41:41,520 --> 00:41:42,960
examples of that that you can kind of

1124
00:41:42,960 --> 00:41:45,119
see

1125
00:41:45,440 --> 00:41:48,160
um yes it depends on the field that

1126
00:41:48,160 --> 00:41:50,000
you're operating in but there's many

1127
00:41:50,000 --> 00:41:52,480
examples so

1128
00:41:52,480 --> 00:41:55,440
in the early 2000s for example when we

1129
00:41:55,440 --> 00:41:56,880
used to have

1130
00:41:56,880 --> 00:41:59,520
set-top boxes for getting our

1131
00:41:59,520 --> 00:42:02,000
tv channels you would have a smart card

1132
00:42:02,000 --> 00:42:03,839
that you'd put in and out one of the

1133
00:42:03,839 --> 00:42:05,280
ways that uh

1134
00:42:05,280 --> 00:42:07,440
if they detected a problem so if you

1135
00:42:07,440 --> 00:42:09,040
were trying to do something malicious

1136
00:42:09,040 --> 00:42:11,760
they would put it in a state that just

1137
00:42:11,760 --> 00:42:14,079
sits in an infinite loop there was

1138
00:42:14,079 --> 00:42:16,800
devices which were publicly available

1139
00:42:16,800 --> 00:42:18,319
which you could basically just plug the

1140
00:42:18,319 --> 00:42:20,480
smart card into it would do this sort of

1141
00:42:20,480 --> 00:42:22,400
fault injection and it would recover the

1142
00:42:22,400 --> 00:42:23,839
card so

1143
00:42:23,839 --> 00:42:26,560
it would break it out of that loop so

1144
00:42:26,560 --> 00:42:29,760
yeah you can recover a dead smart card

1145
00:42:29,760 --> 00:42:31,839
which then you can use for piracy and

1146
00:42:31,839 --> 00:42:34,000
other stuff there's um

1147
00:42:34,000 --> 00:42:35,920
other examples a lot of the attacks on

1148
00:42:35,920 --> 00:42:38,079
more recent game consoles and stuff like

1149
00:42:38,079 --> 00:42:41,119
for example xbox 360 and

1150
00:42:41,119 --> 00:42:42,000
i think there's something with

1151
00:42:42,000 --> 00:42:44,160
playstation utilize a lot of this uh

1152
00:42:44,160 --> 00:42:46,240
fault injection stuff through various

1153
00:42:46,240 --> 00:42:48,319
means yeah awesome thanks so we have a

1154
00:42:48,319 --> 00:42:51,599
question uh yeah go ahead

1155
00:42:51,680 --> 00:42:52,640
okay

1156
00:42:52,640 --> 00:42:55,119
close to the mic um i was wondering how

1157
00:42:55,119 --> 00:42:58,400
much something like ecc ram could help

1158
00:42:58,400 --> 00:43:01,040
prevent fault injection

1159
00:43:01,040 --> 00:43:04,079
[Music]

1160
00:43:04,079 --> 00:43:08,720
ecc um yeah i mean it can be helpful it

1161
00:43:08,720 --> 00:43:11,200
depends on the ecc algorithm and stuff

1162
00:43:11,200 --> 00:43:13,280
you're using but yes if it's

1163
00:43:13,280 --> 00:43:15,680
correcting single bit flips in ram

1164
00:43:15,680 --> 00:43:18,319
itself then yes it can be helpful but

1165
00:43:18,319 --> 00:43:21,280
also some of the stuff we're uh talking

1166
00:43:21,280 --> 00:43:22,720
about is

1167
00:43:22,720 --> 00:43:25,839
in the cpu itself so in the like

1168
00:43:25,839 --> 00:43:28,000
instruction decoding instruction

1169
00:43:28,000 --> 00:43:30,160
fetching logic all of that so that might

1170
00:43:30,160 --> 00:43:33,520
not be operating from dram itself so it

1171
00:43:33,520 --> 00:43:35,359
wouldn't help against that but if you're

1172
00:43:35,359 --> 00:43:37,440
trying to affect something in ram then

1173
00:43:37,440 --> 00:43:40,560
yes it could be helpful

1174
00:43:40,560 --> 00:43:42,240
thank you very much uh is there another

1175
00:43:42,240 --> 00:43:43,599
question at the back there yeah go ahead

1176
00:43:43,599 --> 00:43:46,640
yeah so um as we saw during the demo

1177
00:43:46,640 --> 00:43:49,040
there is sometimes a persistent glitch

1178
00:43:49,040 --> 00:43:51,359
is there anything you can tell about

1179
00:43:51,359 --> 00:43:54,000
what the risk is of permanently damaging

1180
00:43:54,000 --> 00:43:56,240
the device or

1181
00:43:56,240 --> 00:43:59,359
corrupting data for example

1182
00:43:59,359 --> 00:44:01,200
it is not that often if you know what

1183
00:44:01,200 --> 00:44:02,960
you're doing and you don't short all the

1184
00:44:02,960 --> 00:44:05,520
pins which is mostly the reason why it

1185
00:44:05,520 --> 00:44:07,599
gets permanent damage

1186
00:44:07,599 --> 00:44:08,880
just with a fault injection when you

1187
00:44:08,880 --> 00:44:10,960
introduce uh for example in this case

1188
00:44:10,960 --> 00:44:12,160
emfi

1189
00:44:12,160 --> 00:44:14,079
uh we've run the

1190
00:44:14,079 --> 00:44:16,000
setup in the lab for

1191
00:44:16,000 --> 00:44:18,079
millions of attempts and there was no

1192
00:44:18,079 --> 00:44:19,520
permanent damage and that's quite often

1193
00:44:19,520 --> 00:44:20,480
so you can

1194
00:44:20,480 --> 00:44:22,240
repeat it again and again again and

1195
00:44:22,240 --> 00:44:24,880
everything works even here you see

1196
00:44:24,880 --> 00:44:27,119
uh it's not really permanent just until

1197
00:44:27,119 --> 00:44:29,119
the next reset it just ended up in a

1198
00:44:29,119 --> 00:44:30,800
weird state

1199
00:44:30,800 --> 00:44:33,680
so yeah it's quite rare to

1200
00:44:33,680 --> 00:44:37,040
damage it with the em if you do voltage

1201
00:44:37,040 --> 00:44:39,040
small and when you prepare the sample

1202
00:44:39,040 --> 00:44:41,920
you're gonna damage it or if you do

1203
00:44:41,920 --> 00:44:44,560
laser you're more likely to cause the

1204
00:44:44,560 --> 00:44:47,119
damage by the laser

1205
00:44:47,119 --> 00:44:48,560
all right thanks

1206
00:44:48,560 --> 00:44:49,760
thank you much

1207
00:44:49,760 --> 00:44:50,720
uh

1208
00:44:50,720 --> 00:44:53,359
so no more in there anymore from the oh

1209
00:44:53,359 --> 00:44:54,160
yeah

1210
00:44:54,160 --> 00:44:55,760
is that a question no he's just talking

1211
00:44:55,760 --> 00:44:57,359
away

1212
00:44:57,359 --> 00:45:00,720
uh okay any more from the internet

1213
00:45:00,720 --> 00:45:02,640
i can't really see i i think i'll tell

1214
00:45:02,640 --> 00:45:05,280
there's a no okay um

1215
00:45:05,280 --> 00:45:06,800
so i think you know

1216
00:45:06,800 --> 00:45:08,000
this this hardware's going to be here

1217
00:45:08,000 --> 00:45:09,680
for a little while yeah this is the last

1218
00:45:09,680 --> 00:45:11,280
talk this evening so if you want to come

1219
00:45:11,280 --> 00:45:12,800
up and have a look at this after the

1220
00:45:12,800 --> 00:45:14,400
talk i'm sure you'll be more than

1221
00:45:14,400 --> 00:45:16,240
welcome to do oh we have a question

1222
00:45:16,240 --> 00:45:18,479
great

1223
00:45:23,359 --> 00:45:25,760
do you have a favorite fault injection

1224
00:45:25,760 --> 00:45:27,599
method

1225
00:45:27,599 --> 00:45:29,599
like personal favorite

1226
00:45:29,599 --> 00:45:31,119
yeah uh

1227
00:45:31,119 --> 00:45:33,440
they're one of the reasons why i used uh

1228
00:45:33,440 --> 00:45:36,000
am is because it is quite easy so we

1229
00:45:36,000 --> 00:45:37,520
don't really need to do anything with

1230
00:45:37,520 --> 00:45:39,760
the target we just have it as it is we

1231
00:45:39,760 --> 00:45:42,160
don't need to decap it so there is no uh

1232
00:45:42,160 --> 00:45:45,280
chemicals involved no uh polishing uh we

1233
00:45:45,280 --> 00:45:47,680
just get it as it is and we can start

1234
00:45:47,680 --> 00:45:49,040
glitching so we don't need to modify

1235
00:45:49,040 --> 00:45:51,760
power and so on and that's what we often

1236
00:45:51,760 --> 00:45:54,480
use because it's the simplicity

1237
00:45:54,480 --> 00:45:56,640
okay but it also depends a little bit on

1238
00:45:56,640 --> 00:45:58,720
your use case what you're trying to do

1239
00:45:58,720 --> 00:45:59,520
so

1240
00:45:59,520 --> 00:46:02,720
for example if you're doing laser um

1241
00:46:02,720 --> 00:46:04,800
you can affect

1242
00:46:04,800 --> 00:46:07,520
very specific things more easily like in

1243
00:46:07,520 --> 00:46:09,839
space with voltage for example it's

1244
00:46:09,839 --> 00:46:12,880
generally more an all or nothing

1245
00:46:12,880 --> 00:46:15,040
but yeah as sergey mentioned em is often

1246
00:46:15,040 --> 00:46:16,880
a good one because it requires no

1247
00:46:16,880 --> 00:46:20,079
modification where the others both do

1248
00:46:20,079 --> 00:46:21,040
but yeah

1249
00:46:21,040 --> 00:46:23,280
different types for different

1250
00:46:23,280 --> 00:46:25,440
desired effects

1251
00:46:25,440 --> 00:46:28,480
okay and have you ever tried um laser

1252
00:46:28,480 --> 00:46:30,319
clutching from the back side like with

1253
00:46:30,319 --> 00:46:33,280
uh infrared lasers

1254
00:46:33,280 --> 00:46:35,520
yeah so that's mostly what we do with

1255
00:46:35,520 --> 00:46:36,960
lasers so

1256
00:46:36,960 --> 00:46:38,560
as i guess you know you have your

1257
00:46:38,560 --> 00:46:40,000
polysilicon layer you have your metal

1258
00:46:40,000 --> 00:46:42,319
layers above we will usually always go

1259
00:46:42,319 --> 00:46:45,200
through the silicon because uh to that

1260
00:46:45,200 --> 00:46:47,280
wavelength of light it's essentially

1261
00:46:47,280 --> 00:46:50,319
invisible whereas uh if you were to try

1262
00:46:50,319 --> 00:46:52,000
and come through the metal layers the

1263
00:46:52,000 --> 00:46:53,920
laser can easily penetrate them there's

1264
00:46:53,920 --> 00:46:56,240
a lot of scattering so it's much harder

1265
00:46:56,240 --> 00:46:58,000
to do it's possible in some

1266
00:46:58,000 --> 00:47:01,119
circumstances but usually it's backside

1267
00:47:01,119 --> 00:47:03,440
okay thank you thank you

1268
00:47:03,440 --> 00:47:05,280
another question hello i have a

1269
00:47:05,280 --> 00:47:07,440
practical question while you still have

1270
00:47:07,440 --> 00:47:10,000
the badge on the screen what happens if

1271
00:47:10,000 --> 00:47:15,359
you glitch the die on the lcd controller

1272
00:47:16,560 --> 00:47:18,720
that's the raspberry pi right no no no

1273
00:47:18,720 --> 00:47:21,200
the lcd controller glass

1274
00:47:21,200 --> 00:47:22,880
die in the front

1275
00:47:22,880 --> 00:47:25,040
on the lcd itself if we just try to

1276
00:47:25,040 --> 00:47:27,119
bleach the screen itself yes

1277
00:47:27,119 --> 00:47:29,040
i'm pretty sure nothing will happen we

1278
00:47:29,040 --> 00:47:31,200
can easily do it

1279
00:47:31,200 --> 00:47:32,720
yeah this screen

1280
00:47:32,720 --> 00:47:33,599
uh

1281
00:47:33,599 --> 00:47:36,640
not that easily affected but

1282
00:47:36,640 --> 00:47:39,200
i might have some effect if you're on

1283
00:47:39,200 --> 00:47:41,040
the ribbon cable though because then

1284
00:47:41,040 --> 00:47:42,720
you're inducing yeah looks there's

1285
00:47:42,720 --> 00:47:44,800
something

1286
00:47:44,800 --> 00:47:46,280
so

1287
00:47:46,280 --> 00:47:47,520
[Music]

1288
00:47:47,520 --> 00:47:49,280
on this part yeah

1289
00:47:49,280 --> 00:47:50,640
okay

1290
00:47:50,640 --> 00:47:54,319
let's see if we get a success here

1291
00:47:54,319 --> 00:47:58,000
okay there are some things here indeed

1292
00:47:58,079 --> 00:48:00,480
okay thank you that's what i wanted

1293
00:48:00,480 --> 00:48:03,040
that's great

1294
00:48:03,760 --> 00:48:05,520
yeah another question yeah

1295
00:48:05,520 --> 00:48:06,720
yeah

1296
00:48:06,720 --> 00:48:09,520
um so i understand that you

1297
00:48:09,520 --> 00:48:12,640
uh by mapping with this xy gantry you

1298
00:48:12,640 --> 00:48:13,599
can map

1299
00:48:13,599 --> 00:48:16,880
uh map out spatially where you can

1300
00:48:16,880 --> 00:48:18,000
position the

1301
00:48:18,000 --> 00:48:20,400
emf pulse to effect instructions or data

1302
00:48:20,400 --> 00:48:22,559
but how do you synchronize

1303
00:48:22,559 --> 00:48:23,820
thank you oh nice

1304
00:48:23,820 --> 00:48:24,220
[Applause]

1305
00:48:24,220 --> 00:48:28,060
[Music]

1306
00:48:28,800 --> 00:48:30,640
sorry to interrupt you that's fine to

1307
00:48:30,640 --> 00:48:32,720
show for a second you see it still works

1308
00:48:32,720 --> 00:48:35,119
it shows totally what you not expect to

1309
00:48:35,119 --> 00:48:36,079
see here

1310
00:48:36,079 --> 00:48:39,040
um for the rest it's yeah maybe even the

1311
00:48:39,040 --> 00:48:41,680
switching button works if i can yeah

1312
00:48:41,680 --> 00:48:45,720
you can see this weirdness here

1313
00:48:45,820 --> 00:48:48,559
[Music]

1314
00:48:48,559 --> 00:48:51,359
uh just a practical question um how do

1315
00:48:51,359 --> 00:48:54,079
you because the pulse itself is like 52

1316
00:48:54,079 --> 00:48:56,079
nanoseconds or something how do you

1317
00:48:56,079 --> 00:48:58,480
synchronize that temporally with uh

1318
00:48:58,480 --> 00:48:59,839
because i assume you want to affect a

1319
00:48:59,839 --> 00:49:01,920
specific like if there's an if sentence

1320
00:49:01,920 --> 00:49:03,200
you want to affect that one and not the

1321
00:49:03,200 --> 00:49:04,559
preceding

1322
00:49:04,559 --> 00:49:06,079
uh

1323
00:49:06,079 --> 00:49:06,800
and

1324
00:49:06,800 --> 00:49:08,720
subsequent instructions

1325
00:49:08,720 --> 00:49:10,480
how do you synchronize yeah so that's a

1326
00:49:10,480 --> 00:49:12,880
good question so ah i thought the slides

1327
00:49:12,880 --> 00:49:15,839
were up there so what we will usually do

1328
00:49:15,839 --> 00:49:18,240
in this case where we had a complete

1329
00:49:18,240 --> 00:49:20,480
control over the target the code running

1330
00:49:20,480 --> 00:49:21,359
on it

1331
00:49:21,359 --> 00:49:23,119
yes this

1332
00:49:23,119 --> 00:49:25,040
this here the line that says trigger

1333
00:49:25,040 --> 00:49:27,599
high that basically just sets one of the

1334
00:49:27,599 --> 00:49:30,400
many gpio pins it just drives it high so

1335
00:49:30,400 --> 00:49:31,359
from

1336
00:49:31,359 --> 00:49:33,040
when we saw the setup earlier there was

1337
00:49:33,040 --> 00:49:34,240
a

1338
00:49:34,240 --> 00:49:36,000
box on the right that was controlling

1339
00:49:36,000 --> 00:49:38,640
all the rest of the hardware that will

1340
00:49:38,640 --> 00:49:39,520
wait

1341
00:49:39,520 --> 00:49:41,599
until it sees that trigger and then it

1342
00:49:41,599 --> 00:49:44,319
knows to after a fixed amount of time

1343
00:49:44,319 --> 00:49:46,480
then you deliver the glitch yeah so in

1344
00:49:46,480 --> 00:49:48,640
this case we can just set a gpio so

1345
00:49:48,640 --> 00:49:52,160
that's easy and that's fine um in more

1346
00:49:52,160 --> 00:49:53,680
complex targets and targets where we

1347
00:49:53,680 --> 00:49:55,920
don't have control we can use other

1348
00:49:55,920 --> 00:49:58,800
signals to trigger on so to say from

1349
00:49:58,800 --> 00:50:01,839
this point in time weight that can be

1350
00:50:01,839 --> 00:50:05,200
uh reading from an emmc it can be

1351
00:50:05,200 --> 00:50:07,920
some em emanation from another component

1352
00:50:07,920 --> 00:50:10,160
it can be many different things but yeah

1353
00:50:10,160 --> 00:50:12,559
that's the basic we

1354
00:50:12,559 --> 00:50:14,640
find some

1355
00:50:14,640 --> 00:50:17,040
operation something that's

1356
00:50:17,040 --> 00:50:19,119
uh fixed in relation to what we want to

1357
00:50:19,119 --> 00:50:21,280
glitch and then we just wait a certain

1358
00:50:21,280 --> 00:50:23,440
amount of time after that and would you

1359
00:50:23,440 --> 00:50:25,680
also use a trial and error method just

1360
00:50:25,680 --> 00:50:26,480
like

1361
00:50:26,480 --> 00:50:28,559
gather lots of data like wait

1362
00:50:28,559 --> 00:50:31,119
yeah so exactly yeah that's one of the

1363
00:50:31,119 --> 00:50:32,960
many parameters we need to optimize so

1364
00:50:32,960 --> 00:50:34,720
we have our trigger we know when to

1365
00:50:34,720 --> 00:50:37,520
start and then we will start randomizing

1366
00:50:37,520 --> 00:50:39,520
how long in time we wait before we

1367
00:50:39,520 --> 00:50:42,160
glitch and then from there we'll see oh

1368
00:50:42,160 --> 00:50:44,319
if we wait a long time we have the

1369
00:50:44,319 --> 00:50:46,160
desired effect if we wait a short time

1370
00:50:46,160 --> 00:50:48,079
we don't so we know that we want to

1371
00:50:48,079 --> 00:50:51,119
optimize towards the longer times like

1372
00:50:51,119 --> 00:50:53,200
the longer wait times all right yep

1373
00:50:53,200 --> 00:50:55,200
thanks thanks for the question i think

1374
00:50:55,200 --> 00:50:57,760
so we're we're at uh time in terms of

1375
00:50:57,760 --> 00:50:59,839
the the uh official uh kind of end of

1376
00:50:59,839 --> 00:51:02,960
the of the uh uh presentation so uh if

1377
00:51:02,960 --> 00:51:04,240
there's additional questions i think

1378
00:51:04,240 --> 00:51:06,880
maybe we can um uh we can do that kind

1379
00:51:06,880 --> 00:51:08,800
of after the uh the talk but i think for

1380
00:51:08,800 --> 00:51:10,880
now we'll we'll uh give another round of

1381
00:51:10,880 --> 00:51:12,160
reports because this is

1382
00:51:12,160 --> 00:51:16,440
amazing and thank you

1383
00:51:18,740 --> 00:51:21,890
[Applause]

1384
00:51:24,880 --> 00:51:26,960
you

