1
00:00:01,280 --> 00:00:12,559
[Music]

2
00:00:15,080 --> 00:00:17,820
welcome this afternoon

3
00:00:17,820 --> 00:00:19,800
um this adventure of afternoon is that I

4
00:00:19,800 --> 00:00:21,720
can see the audience which is way more

5
00:00:21,720 --> 00:00:24,060
intimidating than in the dark

6
00:00:24,060 --> 00:00:25,859
um I get a 10 out of 10 from the

7
00:00:25,859 --> 00:00:28,380
speakers cards that's what it's fine

8
00:00:28,380 --> 00:00:30,660
um but let's go serious this was very

9
00:00:30,660 --> 00:00:32,340
serious this was military-grade

10
00:00:32,340 --> 00:00:35,460
encryption about 2000 years ago

11
00:00:35,460 --> 00:00:36,239
um

12
00:00:36,239 --> 00:00:38,340
first introduce myself I'm Lord Burke

13
00:00:38,340 --> 00:00:40,559
blue I'm also known as Mandel malwa

14
00:00:40,559 --> 00:00:42,540
which is also not my real name I do

15
00:00:42,540 --> 00:00:45,000
weird things with computers I work as a

16
00:00:45,000 --> 00:00:46,680
crypto and security architect at the

17
00:00:46,680 --> 00:00:51,680
moment and not much Queen is failing me

18
00:00:51,840 --> 00:00:54,660
I'm not kidding

19
00:00:54,660 --> 00:00:56,699
yes

20
00:00:56,699 --> 00:01:00,660
it's almost almost good

21
00:01:00,719 --> 00:01:01,379
um

22
00:01:01,379 --> 00:01:03,899
I'm a hack 42 board member it's the best

23
00:01:03,899 --> 00:01:05,700
hacker space where also a lot of devices

24
00:01:05,700 --> 00:01:09,060
fill so that's totally fine I'm a

25
00:01:09,060 --> 00:01:11,420
Fourier Freedom of Information

26
00:01:11,420 --> 00:01:13,380
fanatic and I like to troll the

27
00:01:13,380 --> 00:01:15,960
government as hard as I can

28
00:01:15,960 --> 00:01:17,220
um and I like to talk about weird

29
00:01:17,220 --> 00:01:19,560
interface and connections all that is

30
00:01:19,560 --> 00:01:21,060
irrelevant because today I'm talking

31
00:01:21,060 --> 00:01:23,820
about cryptography

32
00:01:23,820 --> 00:01:26,040
um cryptography is uh the secure

33
00:01:26,040 --> 00:01:28,680
communication in the presence of uh

34
00:01:28,680 --> 00:01:31,320
enemies that wants to know your

35
00:01:31,320 --> 00:01:33,479
information it can be your friends it

36
00:01:33,479 --> 00:01:34,799
can be the government it can be your

37
00:01:34,799 --> 00:01:37,320
provider it can be an ad company it can

38
00:01:37,320 --> 00:01:38,939
be anything

39
00:01:38,939 --> 00:01:41,400
um so you make your data unreadable for

40
00:01:41,400 --> 00:01:43,320
interceptors and you can also make

41
00:01:43,320 --> 00:01:45,060
verifiable documents so that nobody

42
00:01:45,060 --> 00:01:47,880
tampered with them or to vote at the

43
00:01:47,880 --> 00:01:49,020
same time

44
00:01:49,020 --> 00:01:51,420
why do you want great photography um

45
00:01:51,420 --> 00:01:53,939
it's very important we all use it these

46
00:01:53,939 --> 00:01:56,159
days in your web browser you only can

47
00:01:56,159 --> 00:01:57,899
see nowadays sites with a small lock

48
00:01:57,899 --> 00:02:00,979
icon so you can see less of your L Bar

49
00:02:00,979 --> 00:02:04,020
it's for privacy nobody has any advisor

50
00:02:04,020 --> 00:02:05,880
and for security so that nobody else can

51
00:02:05,880 --> 00:02:08,280
impersonate you both are also false

52
00:02:08,280 --> 00:02:11,099
before because revoking a signature for

53
00:02:11,099 --> 00:02:13,500
example is impossible

54
00:02:13,500 --> 00:02:16,080
um so it gives you less privacy and

55
00:02:16,080 --> 00:02:18,480
trusting only on cryptography to have a

56
00:02:18,480 --> 00:02:20,520
secure thing it's very stupid don't do

57
00:02:20,520 --> 00:02:21,980
that

58
00:02:21,980 --> 00:02:24,180
the basics

59
00:02:24,180 --> 00:02:24,780
um

60
00:02:24,780 --> 00:02:26,700
there's symmetrical encryption you will

61
00:02:26,700 --> 00:02:28,200
know that if you encrypt the zip file

62
00:02:28,200 --> 00:02:30,060
you have to also send a password to the

63
00:02:30,060 --> 00:02:31,560
other party that needs to decrypt and

64
00:02:31,560 --> 00:02:34,560
unzip the file so both parties need to

65
00:02:34,560 --> 00:02:37,260
know the secret you need to exchange it

66
00:02:37,260 --> 00:02:39,540
um it's a very fast way

67
00:02:39,540 --> 00:02:42,000
um because it's easy optimizable

68
00:02:42,000 --> 00:02:43,980
but it's hard to keep the secret to

69
00:02:43,980 --> 00:02:45,239
Secret

70
00:02:45,239 --> 00:02:47,819
how do you send a secret for a zip file

71
00:02:47,819 --> 00:02:50,519
with the same email as some standards in

72
00:02:50,519 --> 00:02:52,560
some organizations do or do you send it

73
00:02:52,560 --> 00:02:55,739
via SMS or all those things

74
00:02:55,739 --> 00:02:57,300
um you have asymmetrical it's public

75
00:02:57,300 --> 00:03:00,000
private Keys your web server use it for

76
00:03:00,000 --> 00:03:03,000
certificates for example TLS uses it

77
00:03:03,000 --> 00:03:06,780
every point in time and it's an easy way

78
00:03:06,780 --> 00:03:08,400
to um

79
00:03:08,400 --> 00:03:10,680
not share secrets

80
00:03:10,680 --> 00:03:12,840
um then there's the hashing hashing is a

81
00:03:12,840 --> 00:03:16,080
way to make a checksum from data so you

82
00:03:16,080 --> 00:03:19,260
get a number that represents a checksum

83
00:03:19,260 --> 00:03:21,780
of the data but if you have that number

84
00:03:21,780 --> 00:03:23,940
you cannot reconstruct the data it would

85
00:03:23,940 --> 00:03:25,560
be awesome if that would be possible in

86
00:03:25,560 --> 00:03:27,480
the world because then we had very small

87
00:03:27,480 --> 00:03:29,760
files but it's not how it works so if

88
00:03:29,760 --> 00:03:32,519
you have a large file you'll get end up

89
00:03:32,519 --> 00:03:35,340
with a small checksum and that's

90
00:03:35,340 --> 00:03:35,940
um

91
00:03:35,940 --> 00:03:38,519
that's why you can identify the document

92
00:03:38,519 --> 00:03:41,580
which was not reconstructed

93
00:03:41,580 --> 00:03:42,980
um

94
00:03:42,980 --> 00:03:45,120
tryptography there are some Basics do

95
00:03:45,120 --> 00:03:47,099
not invent your crypto yourself

96
00:03:47,099 --> 00:03:49,319
except for some people on this Camp do

97
00:03:49,319 --> 00:03:51,540
not write your on crypto except for some

98
00:03:51,540 --> 00:03:53,400
people on this Camp

99
00:03:53,400 --> 00:03:55,379
um but use libraries and well use

100
00:03:55,379 --> 00:03:57,000
software

101
00:03:57,000 --> 00:03:59,040
um and if you don't know what a well-use

102
00:03:59,040 --> 00:04:01,319
library is and what the good software is

103
00:04:01,319 --> 00:04:04,080
use lipsodium I'll explain that later in

104
00:04:04,080 --> 00:04:05,700
this talk

105
00:04:05,700 --> 00:04:08,879
about the hashing it works one way from

106
00:04:08,879 --> 00:04:11,040
data you get a hash if you change one

107
00:04:11,040 --> 00:04:13,080
bit the output is different in this

108
00:04:13,080 --> 00:04:15,299
example there are three bit changed the

109
00:04:15,299 --> 00:04:17,339
output is the difference

110
00:04:17,339 --> 00:04:19,339
um

111
00:04:19,820 --> 00:04:23,340
with symmetrical encryption you can do a

112
00:04:23,340 --> 00:04:25,020
lot of things good it can be very fast

113
00:04:25,020 --> 00:04:27,060
but you need to use the right options

114
00:04:27,060 --> 00:04:29,040
because the right the left and the right

115
00:04:29,040 --> 00:04:32,100
image are the same image encrypted with

116
00:04:32,100 --> 00:04:35,340
AES only a slightly other option

117
00:04:35,340 --> 00:04:37,080
and in the right image you can clearly

118
00:04:37,080 --> 00:04:39,240
see the ECB penguin

119
00:04:39,240 --> 00:04:42,180
so the basic is don't use ECB

120
00:04:42,180 --> 00:04:46,199
it uh it's dangerous and keeping the

121
00:04:46,199 --> 00:04:48,000
secret to Secrets is very hard because

122
00:04:48,000 --> 00:04:49,740
you have to share it you have to maybe

123
00:04:49,740 --> 00:04:52,560
write it down send it in SMS or text or

124
00:04:52,560 --> 00:04:55,800
a signal message or it's in your memory

125
00:04:55,800 --> 00:04:59,100
it's in your CPU you have to type it in

126
00:04:59,100 --> 00:05:01,680
your keyboard or in program input in a

127
00:05:01,680 --> 00:05:04,080
configuration file it's very hard to

128
00:05:04,080 --> 00:05:05,660
keep a secret to secret

129
00:05:05,660 --> 00:05:07,800
it's one of the harder things in

130
00:05:07,800 --> 00:05:10,280
Computing

131
00:05:10,500 --> 00:05:13,080
um asymmetrical IM prescription is

132
00:05:13,080 --> 00:05:14,520
efficient

133
00:05:14,520 --> 00:05:15,900
um it's the best thing since sliced

134
00:05:15,900 --> 00:05:18,060
bread it's about as slow as slicing

135
00:05:18,060 --> 00:05:21,300
bread so breaking bread is way faster

136
00:05:21,300 --> 00:05:24,360
but slicing bread is nicer

137
00:05:24,360 --> 00:05:25,020
um

138
00:05:25,020 --> 00:05:27,479
also here it counts at keeping the key a

139
00:05:27,479 --> 00:05:29,340
secret is work but it's way less work

140
00:05:29,340 --> 00:05:30,660
because you don't have to share it with

141
00:05:30,660 --> 00:05:33,600
the party the other side in this example

142
00:05:33,600 --> 00:05:35,940
that's Alice

143
00:05:35,940 --> 00:05:39,240
um but how do you know who the other

144
00:05:39,240 --> 00:05:41,940
side is if LS sends the public key to

145
00:05:41,940 --> 00:05:44,720
Bob how do you know it's a public key

146
00:05:44,720 --> 00:05:47,160
you need to know that there's no men in

147
00:05:47,160 --> 00:05:49,199
the middle so generally you use

148
00:05:49,199 --> 00:05:51,180
signatures for that so you have a graph

149
00:05:51,180 --> 00:05:53,880
a cryptographic signature

150
00:05:53,880 --> 00:05:54,539
um

151
00:05:54,539 --> 00:05:58,620
but also still this is slow so normally

152
00:05:58,620 --> 00:06:00,240
you want to agree on the shared secret

153
00:06:00,240 --> 00:06:04,039
for between Alice and Bob

154
00:06:04,620 --> 00:06:06,300
they invented something very very

155
00:06:06,300 --> 00:06:08,039
efficient for this it's called

156
00:06:08,039 --> 00:06:09,720
diffie-hellman

157
00:06:09,720 --> 00:06:11,580
um and it can be Illustrated with just

158
00:06:11,580 --> 00:06:12,900
paint

159
00:06:12,900 --> 00:06:14,520
um this looks nice on the white

160
00:06:14,520 --> 00:06:16,740
background so go to Wikipedia and look

161
00:06:16,740 --> 00:06:18,780
it up yourself

162
00:06:18,780 --> 00:06:19,680
um

163
00:06:19,680 --> 00:06:21,720
it's easy to do on software there are

164
00:06:21,720 --> 00:06:23,160
some standard functions for it so don't

165
00:06:23,160 --> 00:06:25,800
write it yourself and if you're at

166
00:06:25,800 --> 00:06:27,240
higher levels you don't even have to

167
00:06:27,240 --> 00:06:28,800
think about it you only need the right

168
00:06:28,800 --> 00:06:31,319
options and I'll explain some of them

169
00:06:31,319 --> 00:06:33,060
later

170
00:06:33,060 --> 00:06:35,220
um for public private Keys you have

171
00:06:35,220 --> 00:06:38,460
errors a and elliptic curve everything

172
00:06:38,460 --> 00:06:43,199
numbers look great large great so 2048

173
00:06:43,199 --> 00:06:46,740
bits errors a looks very large instead

174
00:06:46,740 --> 00:06:51,120
of 128 bit EC key however as you can see

175
00:06:51,120 --> 00:06:54,479
here an RSA key doesn't contain so many

176
00:06:54,479 --> 00:06:56,639
uh different options because it only

177
00:06:56,639 --> 00:06:58,919
uses prime numbers and there are not so

178
00:06:58,919 --> 00:07:00,060
many prime numbers in the first

179
00:07:00,060 --> 00:07:03,840
thousands and 24 bits or 2048 bits so

180
00:07:03,840 --> 00:07:07,698
there's a table to compare both

181
00:07:07,979 --> 00:07:10,620
also finding primes is hard

182
00:07:10,620 --> 00:07:12,960
um yes there's a list of primes but you

183
00:07:12,960 --> 00:07:15,000
need to calculate primes every time or

184
00:07:15,000 --> 00:07:17,539
you need to go to three computated lists

185
00:07:17,539 --> 00:07:20,220
and the electric curve works with just

186
00:07:20,220 --> 00:07:22,139
getting some random data not checking if

187
00:07:22,139 --> 00:07:24,060
it's Prime but only if it matches some

188
00:07:24,060 --> 00:07:26,520
easy mathematical function and if that's

189
00:07:26,520 --> 00:07:29,280
okay it's a good number so the chances

190
00:07:29,280 --> 00:07:32,099
of getting the right number instantly is

191
00:07:32,099 --> 00:07:34,560
easier if you do this yourself you

192
00:07:34,560 --> 00:07:37,979
generate once an RSA key in 4096 bits

193
00:07:37,979 --> 00:07:40,220
it's off again

194
00:07:40,220 --> 00:07:42,599
or if you

195
00:07:42,599 --> 00:07:43,259
um

196
00:07:43,259 --> 00:07:45,660
generates an EC key on your computer you

197
00:07:45,660 --> 00:07:47,280
can see the time difference it's a night

198
00:07:47,280 --> 00:07:48,960
and day

199
00:07:48,960 --> 00:07:51,180
what is the elliptic curve it's it's new

200
00:07:51,180 --> 00:07:52,620
there

201
00:07:52,620 --> 00:07:54,300
um it's a nice mathematical thing I'm

202
00:07:54,300 --> 00:07:55,560
not going to explain it here because

203
00:07:55,560 --> 00:07:57,720
it's a Basics talk

204
00:07:57,720 --> 00:07:59,039
um it's used everywhere on the internet

205
00:07:59,039 --> 00:08:01,259
your phones use it your browsers use it

206
00:08:01,259 --> 00:08:03,419
your email client uses everything uses

207
00:08:03,419 --> 00:08:04,800
it now

208
00:08:04,800 --> 00:08:05,759
um

209
00:08:05,759 --> 00:08:08,280
I wonder why the ip6 doesn't do this

210
00:08:08,280 --> 00:08:12,479
it's smaller it's faster than RSA and

211
00:08:12,479 --> 00:08:15,419
there are some different curves

212
00:08:15,419 --> 00:08:17,639
um most are from nist let's say American

213
00:08:17,639 --> 00:08:20,340
Institution for standard

214
00:08:20,340 --> 00:08:23,280
um they have so had some famous help

215
00:08:23,280 --> 00:08:25,560
from the NSA in the past

216
00:08:25,560 --> 00:08:28,699
um there are some others like 25519

217
00:08:28,699 --> 00:08:32,159
basically it's the best these days

218
00:08:32,159 --> 00:08:34,260
um Dan Bernstein has a nice safe cryptos

219
00:08:34,260 --> 00:08:36,360
where you can check which properties of

220
00:08:36,360 --> 00:08:38,458
elliptic curves are good and what's not

221
00:08:38,458 --> 00:08:39,419
bad

222
00:08:39,419 --> 00:08:42,000
and yeah of course his own is the best

223
00:08:42,000 --> 00:08:44,970
and I think he's right on that

224
00:08:44,970 --> 00:08:47,760
[Applause]

225
00:08:47,760 --> 00:08:50,180
sorry

226
00:08:51,260 --> 00:08:54,000
last time I had more pauses between all

227
00:08:54,000 --> 00:08:56,480
the slides

228
00:08:57,120 --> 00:09:00,180
um so what what you can do with uh

229
00:09:00,180 --> 00:09:02,940
crypto there are there four basic things

230
00:09:02,940 --> 00:09:05,339
encryption decryptions so it's

231
00:09:05,339 --> 00:09:07,740
encrypting uh to send something to

232
00:09:07,740 --> 00:09:10,320
another party decrypting to a decrypt

233
00:09:10,320 --> 00:09:12,540
what you receive from the other party

234
00:09:12,540 --> 00:09:15,060
you can sign and you can verify the

235
00:09:15,060 --> 00:09:16,500
signature

236
00:09:16,500 --> 00:09:18,420
um

237
00:09:18,420 --> 00:09:21,600
a public key is always calculated from a

238
00:09:21,600 --> 00:09:23,399
private key this is not true in some

239
00:09:23,399 --> 00:09:26,580
medical weird things but normally if you

240
00:09:26,580 --> 00:09:28,200
have a private key you can calculate

241
00:09:28,200 --> 00:09:30,720
public key and if you cannot somebody

242
00:09:30,720 --> 00:09:33,180
use the wrong settings

243
00:09:33,180 --> 00:09:36,000
um they're always pair since it's a

244
00:09:36,000 --> 00:09:38,880
mathematical derivative from the private

245
00:09:38,880 --> 00:09:41,040
key there are pair and the other way

246
00:09:41,040 --> 00:09:44,220
around doesn't work that's why it's a

247
00:09:44,220 --> 00:09:45,899
public if you have a public key you

248
00:09:45,899 --> 00:09:48,300
cannot reconstruct a private key that's

249
00:09:48,300 --> 00:09:51,420
a good thing and it's generally safe to

250
00:09:51,420 --> 00:09:53,220
publish the public key it's also what

251
00:09:53,220 --> 00:09:54,660
happens on your web server it publish

252
00:09:54,660 --> 00:09:56,700
the public key from the web server and

253
00:09:56,700 --> 00:10:00,560
it uses the private key to talk to you

254
00:10:00,600 --> 00:10:02,100
um with symmetrical encryption and

255
00:10:02,100 --> 00:10:04,260
decryption it's uh calculating with

256
00:10:04,260 --> 00:10:05,459
large numbers

257
00:10:05,459 --> 00:10:08,579
so a number that consists of 128 bits or

258
00:10:08,579 --> 00:10:11,640
256 bits is a large number

259
00:10:11,640 --> 00:10:14,160
um the only thing it can do is do

260
00:10:14,160 --> 00:10:16,019
calculations with this number to another

261
00:10:16,019 --> 00:10:19,620
number the message and it's repeated for

262
00:10:19,620 --> 00:10:22,579
every part of the message so if you use

263
00:10:22,579 --> 00:10:26,220
as128 it does 128 bits then another

264
00:10:26,220 --> 00:10:28,680
normal part of the message the same bit

265
00:10:28,680 --> 00:10:31,140
and again and again and again

266
00:10:31,140 --> 00:10:32,040
um

267
00:10:32,040 --> 00:10:34,920
with asymmetrical it's a

268
00:10:34,920 --> 00:10:36,660
starting to be boring but it's

269
00:10:36,660 --> 00:10:39,000
calculating with large numbers and also

270
00:10:39,000 --> 00:10:40,800
it's limited to the size of the number

271
00:10:40,800 --> 00:10:43,079
and it's repeated as necessary for the

272
00:10:43,079 --> 00:10:44,040
rest

273
00:10:44,040 --> 00:10:47,700
decryption asymmetrical it's uh you

274
00:10:47,700 --> 00:10:49,760
calculate with the public key

275
00:10:49,760 --> 00:10:52,380
the message is limited to the size of

276
00:10:52,380 --> 00:10:54,899
the number and repeat

277
00:10:54,899 --> 00:10:57,200
signing that's different

278
00:10:57,200 --> 00:10:59,519
signing is also calculating with large

279
00:10:59,519 --> 00:11:01,500
numbers you need private key to make

280
00:11:01,500 --> 00:11:04,260
signature what normally happens with

281
00:11:04,260 --> 00:11:06,000
signing is you calculate a hash from the

282
00:11:06,000 --> 00:11:08,160
document you want to sign it can be a

283
00:11:08,160 --> 00:11:10,140
message it can be a page it can be

284
00:11:10,140 --> 00:11:12,839
anything and you encrypt the hash for

285
00:11:12,839 --> 00:11:14,760
the public key so if you have the public

286
00:11:14,760 --> 00:11:17,279
key you can decrypt the message and

287
00:11:17,279 --> 00:11:19,260
verify it

288
00:11:19,260 --> 00:11:20,760
um so with verifying you take the public

289
00:11:20,760 --> 00:11:21,680
key

290
00:11:21,680 --> 00:11:23,880
you calculate the hash from the document

291
00:11:23,880 --> 00:11:26,940
you decrypt the hash you could send

292
00:11:26,940 --> 00:11:29,820
um as the signature

293
00:11:29,820 --> 00:11:33,180
and um once once you do that you compare

294
00:11:33,180 --> 00:11:34,800
the two hashes

295
00:11:34,800 --> 00:11:36,720
there's a small thing this is only valid

296
00:11:36,720 --> 00:11:38,640
for RSA with EC it works a little bit

297
00:11:38,640 --> 00:11:40,320
different but you will get the message

298
00:11:40,320 --> 00:11:43,320
how signing of verifying Works

299
00:11:43,320 --> 00:11:46,800
um to show some proof I generated an RSI

300
00:11:46,800 --> 00:11:49,140
key 5 from 12 bits long so that's

301
00:11:49,140 --> 00:11:50,760
insecure by default so I can show it

302
00:11:50,760 --> 00:11:53,120
here anyway

303
00:11:53,760 --> 00:11:56,279
um this is a private key it's written

304
00:11:56,279 --> 00:11:58,320
out on the right what's in there you see

305
00:11:58,320 --> 00:12:00,480
a modulus you see the private exponent a

306
00:12:00,480 --> 00:12:03,660
public exponent a prime another Prime

307
00:12:03,660 --> 00:12:08,220
and then some of our calculated numbers

308
00:12:08,220 --> 00:12:10,560
uh a public key ah yeah that's what a

309
00:12:10,560 --> 00:12:12,660
public key looks like you once might

310
00:12:12,660 --> 00:12:14,339
have seen it

311
00:12:14,339 --> 00:12:18,060
um it's all asm1 encoded and if you go

312
00:12:18,060 --> 00:12:21,420
to this website you can just paste the

313
00:12:21,420 --> 00:12:23,639
the stuff that's in there and it shows

314
00:12:23,639 --> 00:12:26,459
you hey hey something in there it's 512

315
00:12:26,459 --> 00:12:30,560
bits and that's the actual public key

316
00:12:30,560 --> 00:12:32,279
sweet

317
00:12:32,279 --> 00:12:34,620
after five days of camping I got a

318
00:12:34,620 --> 00:12:36,060
little cough

319
00:12:36,060 --> 00:12:36,959
um

320
00:12:36,959 --> 00:12:39,500
but yeah

321
00:12:39,540 --> 00:12:41,880
um if you sign some data so here I'm

322
00:12:41,880 --> 00:12:43,620
signing some data with that private key

323
00:12:43,620 --> 00:12:46,380
you can check it because it gives out

324
00:12:46,380 --> 00:12:48,380
always the same output in this case

325
00:12:48,380 --> 00:12:51,899
which is an unsafe default so if you

326
00:12:51,899 --> 00:12:53,940
don't know what you're doing then use

327
00:12:53,940 --> 00:12:55,620
lip sodium

328
00:12:55,620 --> 00:12:56,700
um

329
00:12:56,700 --> 00:12:59,220
so you get the signature and for

330
00:12:59,220 --> 00:13:01,380
reference purposes I also calculated

331
00:13:01,380 --> 00:13:04,579
let's check some here again

332
00:13:04,800 --> 00:13:07,019
um decrypting is uh as I said it's

333
00:13:07,019 --> 00:13:09,899
calculating with large numbers so I

334
00:13:09,899 --> 00:13:13,019
loads a public key once it's loaded it

335
00:13:13,019 --> 00:13:16,500
has a number which is the public key it

336
00:13:16,500 --> 00:13:19,320
has an exponent we saw before then

337
00:13:19,320 --> 00:13:21,000
there's the signature

338
00:13:21,000 --> 00:13:23,220
um it's just copy pasted and then you do

339
00:13:23,220 --> 00:13:26,880
a power function and hi it has a large

340
00:13:26,880 --> 00:13:29,519
number now if you convert that large

341
00:13:29,519 --> 00:13:30,920
number to hex

342
00:13:30,920 --> 00:13:34,200
you see zero one a lot of F's and then

343
00:13:34,200 --> 00:13:37,860
something zero zero three zero

344
00:13:37,860 --> 00:13:40,440
hey you look better the hash is in there

345
00:13:40,440 --> 00:13:43,740
so we decrypted designed hash and it's

346
00:13:43,740 --> 00:13:46,560
uh now we can compare it

347
00:13:46,560 --> 00:13:47,399
um

348
00:13:47,399 --> 00:13:49,680
for some reasons

349
00:13:49,680 --> 00:13:50,699
um

350
00:13:50,699 --> 00:13:53,760
you want to Pat your string always to

351
00:13:53,760 --> 00:13:55,680
fill up as much of the message as

352
00:13:55,680 --> 00:13:59,459
possible and you try to avoid zero so FS

353
00:13:59,459 --> 00:14:02,339
is avoiding all the zeros

354
00:14:02,339 --> 00:14:03,839
um

355
00:14:03,839 --> 00:14:06,380
you can use

356
00:14:06,380 --> 00:14:09,360
everything episodes one bytes or a bits

357
00:14:09,360 --> 00:14:11,540
for this function with r z

358
00:14:11,540 --> 00:14:15,300
and then again it's asm1 encoder so if

359
00:14:15,300 --> 00:14:18,180
you just copy paste the previous string

360
00:14:18,180 --> 00:14:20,459
that came out of the decryption and cut

361
00:14:20,459 --> 00:14:22,740
off all the F's let's fill it up then

362
00:14:22,740 --> 00:14:24,899
you get hey there's an octet string

363
00:14:24,899 --> 00:14:27,000
that's the one I highlighted before and

364
00:14:27,000 --> 00:14:30,019
it's the same as the hash

365
00:14:30,300 --> 00:14:30,959
um

366
00:14:30,959 --> 00:14:33,420
but that's the power function and yes

367
00:14:33,420 --> 00:14:34,980
large calculating with large numbers

368
00:14:34,980 --> 00:14:37,199
powered it's it's slow computers are

369
00:14:37,199 --> 00:14:39,180
efficient these days but if you have a

370
00:14:39,180 --> 00:14:41,699
fast computer uh running very fast

371
00:14:41,699 --> 00:14:43,920
calculations it's way faster than the

372
00:14:43,920 --> 00:14:45,560
fast computers running slow calculations

373
00:14:45,560 --> 00:14:48,360
for verifying only one hash and one

374
00:14:48,360 --> 00:14:50,760
decryption is needed so this is what uh

375
00:14:50,760 --> 00:14:54,360
for for signing and verifying is okay

376
00:14:54,360 --> 00:14:57,360
um if you need to encrypt large data

377
00:14:57,360 --> 00:14:59,699
asymmetrical so like you're downloading

378
00:14:59,699 --> 00:15:02,639
a few gigabytes movie or something like

379
00:15:02,639 --> 00:15:06,420
that of https what happens is

380
00:15:06,420 --> 00:15:08,279
um you encrypt the document with a

381
00:15:08,279 --> 00:15:12,060
symmetrical encryption like AES or it's

382
00:15:12,060 --> 00:15:15,720
a well-known one or some others

383
00:15:15,720 --> 00:15:17,880
what happens is you generate a random

384
00:15:17,880 --> 00:15:20,579
password to encrypt the document

385
00:15:20,579 --> 00:15:23,699
um that that happens uh it's just a

386
00:15:23,699 --> 00:15:26,339
random function so it's a long

387
00:15:26,339 --> 00:15:28,560
random piece of it

388
00:15:28,560 --> 00:15:30,720
um you encrypt the document with it and

389
00:15:30,720 --> 00:15:33,120
then and that's fast function CPUs have

390
00:15:33,120 --> 00:15:35,300
extensions to speed it up

391
00:15:35,300 --> 00:15:37,800
once you have encrypted the document you

392
00:15:37,800 --> 00:15:39,720
encrypt the random password for the

393
00:15:39,720 --> 00:15:42,180
older ones public key and you include

394
00:15:42,180 --> 00:15:44,880
the encrypted password into the document

395
00:15:44,880 --> 00:15:46,920
so on the other side when somebody

396
00:15:46,920 --> 00:15:48,600
receives this document they get a

397
00:15:48,600 --> 00:15:50,759
private key decrypt password and then

398
00:15:50,759 --> 00:15:52,380
decrypt the whole document with this

399
00:15:52,380 --> 00:15:54,920
password

400
00:15:55,019 --> 00:15:55,620
um

401
00:15:55,620 --> 00:15:57,959
how do you do this now use libraries

402
00:15:57,959 --> 00:16:00,300
don't do it yourself like I did you see

403
00:16:00,300 --> 00:16:02,880
everything goes wrong it uses repeatable

404
00:16:02,880 --> 00:16:06,720
functions it uses uh 512 bits of keys I

405
00:16:06,720 --> 00:16:08,759
got no warning that's showing you all

406
00:16:08,759 --> 00:16:10,519
the warnings on the screen what's wrong

407
00:16:10,519 --> 00:16:13,860
nah I believe SSL doesn't care use the

408
00:16:13,860 --> 00:16:16,740
good libraries use the same default with

409
00:16:16,740 --> 00:16:19,459
lip sodium you can use no wrong defaults

410
00:16:19,459 --> 00:16:23,040
with openssl you can use some functions

411
00:16:23,040 --> 00:16:25,980
and if you use the right options it's

412
00:16:25,980 --> 00:16:29,459
not using md5 anymore but Shot 2 or

413
00:16:29,459 --> 00:16:32,000
something like that

414
00:16:32,279 --> 00:16:35,579
um what is lip sodium I copy paste it a

415
00:16:35,579 --> 00:16:37,199
wool

416
00:16:37,199 --> 00:16:40,680
correct marketing from them and also

417
00:16:40,680 --> 00:16:42,600
they have support for a lot of

418
00:16:42,600 --> 00:16:44,820
programming languages

419
00:16:44,820 --> 00:16:47,339
um so you can communicate with other

420
00:16:47,339 --> 00:16:49,800
programming languages

421
00:16:49,800 --> 00:16:53,060
I said to keep your private key private

422
00:16:53,060 --> 00:16:54,899
is hard

423
00:16:54,899 --> 00:16:58,259
work can help you you can use TPM which

424
00:16:58,259 --> 00:17:00,060
is included in a lot of computers these

425
00:17:00,060 --> 00:17:01,380
days

426
00:17:01,380 --> 00:17:03,300
um you can use Smart cards you can use a

427
00:17:03,300 --> 00:17:07,619
ubiki ASCII Nitro key or you can use the

428
00:17:07,619 --> 00:17:11,339
real Hardware security modules from big

429
00:17:11,339 --> 00:17:14,699
companies like sales and SCI for UT

430
00:17:14,699 --> 00:17:16,619
Macau

431
00:17:16,619 --> 00:17:18,959
the best practice to when you're using

432
00:17:18,959 --> 00:17:22,919
Hardware even a smart card or some

433
00:17:22,919 --> 00:17:26,099
module in your phone or anything let the

434
00:17:26,099 --> 00:17:28,380
hardware calculate keys so they generate

435
00:17:28,380 --> 00:17:32,100
a private key and that private key is

436
00:17:32,100 --> 00:17:34,620
never leaving the hardware it forever

437
00:17:34,620 --> 00:17:36,419
stays in this working prison for secret

438
00:17:36,419 --> 00:17:39,960
Keys now

439
00:17:40,140 --> 00:17:40,799
um

440
00:17:40,799 --> 00:17:43,559
you do the decryption with the shared

441
00:17:43,559 --> 00:17:45,360
key on the CPU so if you have a large

442
00:17:45,360 --> 00:17:46,679
document you're not sending the whole

443
00:17:46,679 --> 00:17:48,000
large document through this special

444
00:17:48,000 --> 00:17:49,919
piece of Hardware which is not as fast

445
00:17:49,919 --> 00:17:52,679
as your normal computer and

446
00:17:52,679 --> 00:17:55,140
for very good standards use elliptic

447
00:17:55,140 --> 00:17:56,100
curve

448
00:17:56,100 --> 00:17:58,559
um RZA is slow screen is dying again I'm

449
00:17:58,559 --> 00:18:01,100
now on three

450
00:18:01,740 --> 00:18:03,980
second

451
00:18:04,160 --> 00:18:07,020
yeah I cannot stand here today so no

452
00:18:07,020 --> 00:18:09,360
problem leave it leave it

453
00:18:09,360 --> 00:18:10,140
um

454
00:18:10,140 --> 00:18:12,539
so the best practice is

455
00:18:12,539 --> 00:18:14,460
um use elliptic curve because RZA is

456
00:18:14,460 --> 00:18:16,500
really really slow

457
00:18:16,500 --> 00:18:18,660
um if you have

458
00:18:18,660 --> 00:18:20,760
to need some some support for the

459
00:18:20,760 --> 00:18:24,299
Hardware open SSL has support uh for Via

460
00:18:24,299 --> 00:18:27,480
Peg cs11 some lot of other software have

461
00:18:27,480 --> 00:18:29,940
that same thing is

462
00:18:29,940 --> 00:18:33,720
um 25519 the elliptic curve cyber curve

463
00:18:33,720 --> 00:18:36,179
is not supported on most of the hardware

464
00:18:36,179 --> 00:18:38,280
but it's coming I see it's coming and

465
00:18:38,280 --> 00:18:41,039
it's slowly supported somewhere

466
00:18:41,039 --> 00:18:41,820
um

467
00:18:41,820 --> 00:18:45,480
inside this working prison for private

468
00:18:45,480 --> 00:18:48,120
keys they can never Escape

469
00:18:48,120 --> 00:18:50,580
so that's a good thing so it can never

470
00:18:50,580 --> 00:18:52,500
be stolen it can never Escape it can

471
00:18:52,500 --> 00:18:55,080
never be leaked you always need the

472
00:18:55,080 --> 00:18:56,760
hardware to decrypt it which is a bad

473
00:18:56,760 --> 00:18:58,559
thing if your Hardware module breaks you

474
00:18:58,559 --> 00:19:00,900
cannot decrypt it anymore so if you do

475
00:19:00,900 --> 00:19:03,660
this for your backups and yeah this

476
00:19:03,660 --> 00:19:05,340
piece of Hardware breaks your backups

477
00:19:05,340 --> 00:19:08,160
are gone forever

478
00:19:08,160 --> 00:19:08,940
um

479
00:19:08,940 --> 00:19:11,340
so you mostly you cannot backup keys

480
00:19:11,340 --> 00:19:12,960
from these Hardware devices because yeah

481
00:19:12,960 --> 00:19:15,780
they have to stay in there if you want

482
00:19:15,780 --> 00:19:18,900
to do this consult some expert for real

483
00:19:18,900 --> 00:19:21,480
world applications

484
00:19:21,480 --> 00:19:23,700
or just ask them all right internet

485
00:19:23,700 --> 00:19:24,590
forums

486
00:19:24,590 --> 00:19:26,100
[Music]

487
00:19:26,100 --> 00:19:28,559
about always consult some people to help

488
00:19:28,559 --> 00:19:30,840
you out with this

489
00:19:30,840 --> 00:19:32,899
um

490
00:19:32,940 --> 00:19:36,240
yes crypto secure but never rely only on

491
00:19:36,240 --> 00:19:37,740
cryptography

492
00:19:37,740 --> 00:19:40,140
um as this hack with TPM shows it there

493
00:19:40,140 --> 00:19:43,320
are sealed Keys used with BitLocker this

494
00:19:43,320 --> 00:19:45,000
is a hard drive encryption so what

495
00:19:45,000 --> 00:19:47,640
happens is The Shield key is yeah just

496
00:19:47,640 --> 00:19:51,179
some key that's encrypted with the TPM

497
00:19:51,179 --> 00:19:53,160
but once you put it in CPM and you say

498
00:19:53,160 --> 00:19:55,620
hey decrypt is for me and TPM says okay

499
00:19:55,620 --> 00:19:57,960
here it goes you get the decrypted

500
00:19:57,960 --> 00:19:59,820
privacyback

501
00:19:59,820 --> 00:20:01,440
thank you

502
00:20:01,440 --> 00:20:05,280
with the decrypted price key if you can

503
00:20:05,280 --> 00:20:07,559
snoop that off take it out of memory you

504
00:20:07,559 --> 00:20:09,059
have access to the encrypted hard drive

505
00:20:09,059 --> 00:20:10,500
so

506
00:20:10,500 --> 00:20:13,320
this has shelter with TPM they could

507
00:20:13,320 --> 00:20:15,419
read it out from the messages where the

508
00:20:15,419 --> 00:20:17,400
logic analyzer or something like that

509
00:20:17,400 --> 00:20:20,539
this was a very clever egg

510
00:20:20,700 --> 00:20:21,659
um

511
00:20:21,659 --> 00:20:24,900
as I said with TLS uh

512
00:20:24,900 --> 00:20:27,179
it's also you have a lot of options and

513
00:20:27,179 --> 00:20:29,580
I wanted to explain how to research The

514
00:20:29,580 --> 00:20:32,340
Cypher string this was I believe from

515
00:20:32,340 --> 00:20:36,059
internet.nl the first one for TLS 102

516
00:20:36,059 --> 00:20:42,360
um is ECG each a e each a our R is a AES

517
00:20:42,360 --> 00:20:46,200
and GCM and sha three eight four let me

518
00:20:46,200 --> 00:20:47,760
explain them

519
00:20:47,760 --> 00:20:49,860
this one is elliptic curve

520
00:20:49,860 --> 00:20:51,900
diffie-hellman so it's a diffie-hellman

521
00:20:51,900 --> 00:20:55,640
but for elliptic curves and the extra e

522
00:20:55,640 --> 00:20:58,020
implements and feral which means that

523
00:20:58,020 --> 00:21:00,840
for every session it generates a new

524
00:21:00,840 --> 00:21:03,179
throwaway private key and a public key

525
00:21:03,179 --> 00:21:06,360
and then agree on the shared secret and

526
00:21:06,360 --> 00:21:08,520
they throw deprived key away immediately

527
00:21:08,520 --> 00:21:09,900
after that because they have to share

528
00:21:09,900 --> 00:21:12,720
secret and it's never recoverable

529
00:21:12,720 --> 00:21:14,760
anymore so even if you sniff the data

530
00:21:14,760 --> 00:21:18,480
and you get the computer years later and

531
00:21:18,480 --> 00:21:20,460
you get price key it doesn't give you

532
00:21:20,460 --> 00:21:22,080
anything because there was a new private

533
00:21:22,080 --> 00:21:23,880
key used for this

534
00:21:23,880 --> 00:21:24,419
um

535
00:21:24,419 --> 00:21:26,340
in the end you have a shared secret so

536
00:21:26,340 --> 00:21:30,840
you stand can use that for the

537
00:21:30,840 --> 00:21:33,960
symmetrical encryption

538
00:21:33,960 --> 00:21:37,400
um RSA RSA is used for authentication

539
00:21:37,400 --> 00:21:40,740
certificates for example normally not so

540
00:21:40,740 --> 00:21:44,480
much used in TLS this one is much used

541
00:21:44,480 --> 00:21:48,440
it's using as256 in

542
00:21:48,440 --> 00:21:52,020
galawa's counter mode GCM it's a good

543
00:21:52,020 --> 00:21:55,320
mount it works and every data that's

544
00:21:55,320 --> 00:21:59,100
encrypted is encrypted with aes256 and

545
00:21:59,100 --> 00:22:01,260
it's encrypted with the shared secret so

546
00:22:01,260 --> 00:22:02,940
both parties now the shared secret from

547
00:22:02,940 --> 00:22:05,059
the previous step with the

548
00:22:05,059 --> 00:22:08,419
diffie-hellman and it's being decrypted

549
00:22:08,419 --> 00:22:11,460
with the same shared Secret

550
00:22:11,460 --> 00:22:12,840
and

551
00:22:12,840 --> 00:22:14,880
to know that nobody's tempered with your

552
00:22:14,880 --> 00:22:16,280
data

553
00:22:16,280 --> 00:22:19,740
you use Shard 384 is one of the chart

554
00:22:19,740 --> 00:22:23,280
tools you have different sizes for

555
00:22:23,280 --> 00:22:25,860
hashing so you know the data has not

556
00:22:25,860 --> 00:22:28,980
changed by adversaries or by errors or

557
00:22:28,980 --> 00:22:31,200
you can verify that you decrypted it

558
00:22:31,200 --> 00:22:33,620
correctly

559
00:22:34,140 --> 00:22:34,919
um

560
00:22:34,919 --> 00:22:36,960
if you want to use it

561
00:22:36,960 --> 00:22:37,919
um

562
00:22:37,919 --> 00:22:40,500
yeah use elliptic curve get away from

563
00:22:40,500 --> 00:22:41,900
errors a

564
00:22:41,900 --> 00:22:45,780
use x25519 if it's possible supported by

565
00:22:45,780 --> 00:22:50,340
your software and else use the nest p256

566
00:22:50,340 --> 00:22:51,240
um

567
00:22:51,240 --> 00:22:53,059
if you use

568
00:22:53,059 --> 00:22:57,120
TLS just use poly 1305 and Cha-Cha 20

569
00:22:57,120 --> 00:23:00,240
together they're perfect in a lot of

570
00:23:00,240 --> 00:23:02,100
other situations if you need hashing you

571
00:23:02,100 --> 00:23:05,520
just use chart to two 512 yes it's a

572
00:23:05,520 --> 00:23:07,980
large number but computers they're not

573
00:23:07,980 --> 00:23:10,380
so difficult and

574
00:23:10,380 --> 00:23:14,100
um yeah use AES or charger 20

575
00:23:14,100 --> 00:23:16,140
um and if you use AES use it in the

576
00:23:16,140 --> 00:23:17,159
right mode

577
00:23:17,159 --> 00:23:21,360
not in ECB because then you get ping mix

578
00:23:21,360 --> 00:23:24,360
if you ever see one of these things are

579
00:23:24,360 --> 00:23:27,059
they smaller than 2048 to run away or

580
00:23:27,059 --> 00:23:28,919
have somebody really explain why this is

581
00:23:28,919 --> 00:23:32,039
if you you see sha-1 md5 or something

582
00:23:32,039 --> 00:23:33,360
else

583
00:23:33,360 --> 00:23:35,280
um don't accept it that's triple that's

584
00:23:35,280 --> 00:23:38,940
all those things no encryption is for

585
00:23:38,940 --> 00:23:41,640
most things not an option anymore

586
00:23:41,640 --> 00:23:43,260
um even for a local database connection

587
00:23:43,260 --> 00:23:46,100
use encryption uh always

588
00:23:46,100 --> 00:23:48,779
if you think see things like military

589
00:23:48,779 --> 00:23:51,539
grade encryption then

590
00:23:51,539 --> 00:23:54,480
uh if they don't specify a year run away

591
00:23:54,480 --> 00:23:58,320
it might be just a Caesar Cipher

592
00:23:58,320 --> 00:24:00,900
um and it's also that if they specify

593
00:24:00,900 --> 00:24:02,820
military-grade encryption they normally

594
00:24:02,820 --> 00:24:05,100
don't explain what they're using so you

595
00:24:05,100 --> 00:24:07,799
cannot verify it you don't know it

596
00:24:07,799 --> 00:24:09,240
um

597
00:24:09,240 --> 00:24:14,279
assets it's uh cryptography is not the

598
00:24:14,279 --> 00:24:16,679
ultimate solution for everything

599
00:24:16,679 --> 00:24:19,919
um XKCD has a nice uh if I have a five

600
00:24:19,919 --> 00:24:22,140
dollar wrench I can hit him in the head

601
00:24:22,140 --> 00:24:24,720
and he will give the password so the

602
00:24:24,720 --> 00:24:26,580
goodness of the encryption doesn't

603
00:24:26,580 --> 00:24:29,120
matter anymore

604
00:24:29,340 --> 00:24:30,179
um

605
00:24:30,179 --> 00:24:32,940
sadly XKCD is not finished yet or good

606
00:24:32,940 --> 00:24:35,220
and they have good new ones

607
00:24:35,220 --> 00:24:38,460
it's impossible to revoke signatures so

608
00:24:38,460 --> 00:24:40,500
once you sign the document you cannot

609
00:24:40,500 --> 00:24:42,260
unsign it anymore

610
00:24:42,260 --> 00:24:45,779
revocation of documents and saying hey

611
00:24:45,779 --> 00:24:48,179
this was not my signature anymore it's

612
00:24:48,179 --> 00:24:50,520
just a social construct do you believe

613
00:24:50,520 --> 00:24:52,400
the revocation or not

614
00:24:52,400 --> 00:24:55,140
because the public key is widely known

615
00:24:55,140 --> 00:24:57,179
because I said you can publish it the

616
00:24:57,179 --> 00:24:59,460
signature is public because you send it

617
00:24:59,460 --> 00:25:01,520
with a document to prove that it's you

618
00:25:01,520 --> 00:25:04,919
so there's some unintended consequences

619
00:25:04,919 --> 00:25:09,179
with this Google uses dkim to fight spam

620
00:25:09,179 --> 00:25:11,460
and you can verify it was really sent by

621
00:25:11,460 --> 00:25:15,179
Google and it the right Google user and

622
00:25:15,179 --> 00:25:16,880
you can check a lot of things with that

623
00:25:16,880 --> 00:25:20,640
but you can keep on checking this there

624
00:25:20,640 --> 00:25:23,240
are some journalists that

625
00:25:23,240 --> 00:25:25,919
request Google to publish their private

626
00:25:25,919 --> 00:25:29,940
dkm keys I really support this ID so

627
00:25:29,940 --> 00:25:32,940
please Google support your DCM keys I

628
00:25:32,940 --> 00:25:34,980
think it's only very hard for Google to

629
00:25:34,980 --> 00:25:38,700
do is in this Society I think we need to

630
00:25:38,700 --> 00:25:41,419
find a solution for this because these

631
00:25:41,419 --> 00:25:43,919
consequences can have grave consequences

632
00:25:43,919 --> 00:25:46,799
in the near or far future if we don't

633
00:25:46,799 --> 00:25:49,279
watch out

634
00:25:49,400 --> 00:25:52,740
sorry um

635
00:25:52,740 --> 00:25:54,900
are there any questions and if there are

636
00:25:54,900 --> 00:25:57,299
no questions I provided you with an

637
00:25:57,299 --> 00:25:59,960
example question

638
00:26:00,120 --> 00:26:02,640
yeah just one very important example

639
00:26:02,640 --> 00:26:04,880
question

640
00:26:09,120 --> 00:26:11,659
you can run slowly if you have time good

641
00:26:11,659 --> 00:26:16,279
so it's base64 encryption

642
00:26:16,380 --> 00:26:18,659
yeah depends on what document you read

643
00:26:18,659 --> 00:26:20,400
no it's not

644
00:26:20,400 --> 00:26:22,559
um if something is in base64 it's just

645
00:26:22,559 --> 00:26:24,900
an encoding you can just get it out as

646
00:26:24,900 --> 00:26:27,059
soon as you look at it so if you write

647
00:26:27,059 --> 00:26:30,480
down base 64 a hacker can never get any

648
00:26:30,480 --> 00:26:32,640
data out of this then you're lying so

649
00:26:32,640 --> 00:26:34,860
please government learn very fast and

650
00:26:34,860 --> 00:26:37,879
don't do this ever again

651
00:26:39,360 --> 00:26:43,399
who authorized this talk

652
00:26:44,580 --> 00:26:47,700
um I think it was uh the chairman of the

653
00:26:47,700 --> 00:26:50,720
faced Teddy

654
00:26:54,840 --> 00:26:57,900
so cool are there any more questions yes

655
00:26:57,900 --> 00:26:59,279
there is

656
00:26:59,279 --> 00:27:02,120
a question

657
00:27:02,340 --> 00:27:04,679
so imagine

658
00:27:04,679 --> 00:27:07,740
you're a Windows user who is following

659
00:27:07,740 --> 00:27:10,140
this talk and you want to go do this and

660
00:27:10,140 --> 00:27:12,779
send messages is there a good interface

661
00:27:12,779 --> 00:27:15,120
you can use uh yeah you can use all

662
00:27:15,120 --> 00:27:17,100
those programming languages like dotnet

663
00:27:17,100 --> 00:27:20,220
Visual Basic lip sodium as a libraries

664
00:27:20,220 --> 00:27:21,740
for that

665
00:27:21,740 --> 00:27:24,659
no I mean a Clickety click interface

666
00:27:24,659 --> 00:27:28,760
it's called it's called a web browser

667
00:27:28,830 --> 00:27:31,899
[Applause]

668
00:27:36,419 --> 00:27:39,659
you broke my Herald I keep breaking

669
00:27:39,659 --> 00:27:44,899
everything with the talk it's uh so yeah

670
00:27:45,299 --> 00:27:47,159
audio broke now the screen broke now the

671
00:27:47,159 --> 00:27:49,820
herald is broken

672
00:27:51,120 --> 00:27:54,199
no questions anymore

673
00:27:55,760 --> 00:27:58,559
shall I close this yes yes

674
00:27:58,559 --> 00:28:00,840
hello I'm Neil Herald I'd like to thank

675
00:28:00,840 --> 00:28:02,399
you all for this wonderful talk from

676
00:28:02,399 --> 00:28:04,939
Manuel mobile

677
00:28:08,880 --> 00:28:11,700
and I hope to see you again at uh the

678
00:28:11,700 --> 00:28:14,340
next talk whenever you're fit again to

679
00:28:14,340 --> 00:28:17,060
Harold thank you Nancy

680
00:28:17,060 --> 00:28:22,720
[Applause]

