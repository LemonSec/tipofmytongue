1
00:00:01,280 --> 00:00:17,820
[Music]

2
00:00:19,199 --> 00:00:20,670
thank you thank you

3
00:00:20,670 --> 00:00:25,680
[Applause]

4
00:00:25,680 --> 00:00:28,320
my wife asked me do you feel

5
00:00:28,320 --> 00:00:30,080
like it's your birthday when you have to

6
00:00:30,080 --> 00:00:32,079
work um

7
00:00:32,079 --> 00:00:34,160
no this is uh but this is a great

8
00:00:34,160 --> 00:00:37,120
evening hey then oh hi

9
00:00:37,120 --> 00:00:39,200
post office as well and we have prince

10
00:00:39,200 --> 00:00:41,520
instructed to deliver you this postcard

11
00:00:41,520 --> 00:00:44,970
and wish you a happy birthday

12
00:00:44,970 --> 00:00:53,560
[Applause]

13
00:00:53,560 --> 00:00:56,340
[Music]

14
00:00:56,340 --> 00:00:57,120
[Applause]

15
00:00:57,120 --> 00:00:59,280
[Music]

16
00:00:59,280 --> 00:01:01,440
i guess they hacked my phone now i told

17
00:01:01,440 --> 00:01:02,960
them because i brought some cake to my

18
00:01:02,960 --> 00:01:04,720
fellow heralds because it's my birthday

19
00:01:04,720 --> 00:01:06,799
so uh thank you harold thank you post

20
00:01:06,799 --> 00:01:08,799
office wow it's so wonderful that these

21
00:01:08,799 --> 00:01:10,479
services are around they're big applause

22
00:01:10,479 --> 00:01:13,840
for the post office

23
00:01:14,350 --> 00:01:17,119
[Applause]

24
00:01:17,119 --> 00:01:18,799
and then for the thing you're really

25
00:01:18,799 --> 00:01:20,560
here for of course which is the great

26
00:01:20,560 --> 00:01:21,840
talk

27
00:01:21,840 --> 00:01:23,680
so we've i've warmed up the audience

28
00:01:23,680 --> 00:01:25,759
together with the main the post

29
00:01:25,759 --> 00:01:27,119
warmed up the audience for you a bit

30
00:01:27,119 --> 00:01:29,600
already um ladies and gentlemen uh we're

31
00:01:29,600 --> 00:01:31,920
gonna start with uh our next speaker i

32
00:01:31,920 --> 00:01:33,600
won't tell him about him that much

33
00:01:33,600 --> 00:01:34,799
because he will do introducing

34
00:01:34,799 --> 00:01:37,360
themselves but that's giving at least

35
00:01:37,360 --> 00:01:39,439
as warm a welcome as you gave me so

36
00:01:39,439 --> 00:01:41,430
ladies and gentlemen martijs may listen

37
00:01:41,430 --> 00:01:45,879
[Applause]

38
00:01:46,720 --> 00:01:49,759
hi good evening good evening all i'm

39
00:01:49,759 --> 00:01:51,280
going to talk tonight about single

40
00:01:51,280 --> 00:01:52,880
sign-on protocols

41
00:01:52,880 --> 00:01:56,079
as seen from the perspective of a hacker

42
00:01:56,079 --> 00:01:58,320
first a little bit about myself i'm

43
00:01:58,320 --> 00:02:00,960
madish maylisson and i started my career

44
00:02:00,960 --> 00:02:03,680
long long time ago as a developer phd

45
00:02:03,680 --> 00:02:06,320
developer in a small software company

46
00:02:06,320 --> 00:02:08,800
after that i moved into academia i

47
00:02:08,800 --> 00:02:10,318
started working as a researcher at the

48
00:02:10,318 --> 00:02:11,840
university of birmingham at the

49
00:02:11,840 --> 00:02:14,239
university of luxembourg i did research

50
00:02:14,239 --> 00:02:16,720
on single sign-on protocols there and

51
00:02:16,720 --> 00:02:18,959
currently i'm working as a hacker i've

52
00:02:18,959 --> 00:02:20,640
been working for

53
00:02:20,640 --> 00:02:22,879
more than seven years at computers now a

54
00:02:22,879 --> 00:02:24,080
security testing company in the

55
00:02:24,080 --> 00:02:25,040
netherlands

56
00:02:25,040 --> 00:02:26,959
you might have seen our tents already

57
00:02:26,959 --> 00:02:28,640
it's the tent at the very end of the

58
00:02:28,640 --> 00:02:30,879
fields with all the arcade games inside

59
00:02:30,879 --> 00:02:32,800
there if you haven't feel free to drop

60
00:02:32,800 --> 00:02:33,920
by

61
00:02:33,920 --> 00:02:36,640
so computers is a full server security

62
00:02:36,640 --> 00:02:38,959
company i myself work as a security

63
00:02:38,959 --> 00:02:40,720
tester but we also do incident response

64
00:02:40,720 --> 00:02:43,040
we do monitoring and we do governance

65
00:02:43,040 --> 00:02:45,280
services

66
00:02:45,280 --> 00:02:46,879
and that's briefly about me

67
00:02:46,879 --> 00:02:49,120
so single sign on that's what i'm going

68
00:02:49,120 --> 00:02:50,560
to talk about tonight

69
00:02:50,560 --> 00:02:53,200
what is actually single sign on

70
00:02:53,200 --> 00:02:55,360
i guess many of you have logged into the

71
00:02:55,360 --> 00:02:57,519
stack exchange website sometime and i'm

72
00:02:57,519 --> 00:02:59,680
going to demonstrate how single sign-on

73
00:02:59,680 --> 00:03:02,800
looks like from an end user perspective

74
00:03:02,800 --> 00:03:04,319
on the stack exchange sites so if you

75
00:03:04,319 --> 00:03:06,239
want to look log into stack exchange

76
00:03:06,239 --> 00:03:08,159
you're clicking at this beautiful login

77
00:03:08,159 --> 00:03:10,400
button there

78
00:03:10,400 --> 00:03:12,400
you're presented with a next screen in

79
00:03:12,400 --> 00:03:14,319
which you can choose between a couple of

80
00:03:14,319 --> 00:03:16,000
single sign-on providers you can choose

81
00:03:16,000 --> 00:03:18,640
in this case google facebook or yahoo

82
00:03:18,640 --> 00:03:20,319
you can also choose

83
00:03:20,319 --> 00:03:23,280
the own stack exchange single sign-on

84
00:03:23,280 --> 00:03:24,959
provider

85
00:03:24,959 --> 00:03:26,799
for example when you click on google

86
00:03:26,799 --> 00:03:28,480
you're forwarded to google you can also

87
00:03:28,480 --> 00:03:29,920
see in the url bar that we are at the

88
00:03:29,920 --> 00:03:32,480
google.com domain now you enter your

89
00:03:32,480 --> 00:03:34,159
google credentials

90
00:03:34,159 --> 00:03:36,080
and google provides back the user's

91
00:03:36,080 --> 00:03:38,400
identity to stack exchange

92
00:03:38,400 --> 00:03:40,319
and we are logged in at second exchange

93
00:03:40,319 --> 00:03:42,560
now

94
00:03:42,959 --> 00:03:44,720
so that's briefly what single sign-on

95
00:03:44,720 --> 00:03:46,400
looks like

96
00:03:46,400 --> 00:03:48,480
i already mentioned a single sign-on

97
00:03:48,480 --> 00:03:49,519
provider

98
00:03:49,519 --> 00:03:51,519
can also be a

99
00:03:51,519 --> 00:03:53,360
website that's run by the application

100
00:03:53,360 --> 00:03:55,519
itself by the company itself and that's

101
00:03:55,519 --> 00:03:57,120
the trend that we really have seen a lot

102
00:03:57,120 --> 00:03:59,040
in the last couple of years

103
00:03:59,040 --> 00:04:01,200
that instead of building one gigantic

104
00:04:01,200 --> 00:04:03,360
application containing an authentication

105
00:04:03,360 --> 00:04:05,360
module what companies are doing is they

106
00:04:05,360 --> 00:04:07,280
are moving authentication out of their

107
00:04:07,280 --> 00:04:08,799
application

108
00:04:08,799 --> 00:04:11,280
to our signal to a single identity

109
00:04:11,280 --> 00:04:14,319
provider or a single sign-on provider

110
00:04:14,319 --> 00:04:16,399
and

111
00:04:16,399 --> 00:04:17,839
which is good because it means that you

112
00:04:17,839 --> 00:04:19,358
don't need to worry about

113
00:04:19,358 --> 00:04:21,279
authentication within your application

114
00:04:21,279 --> 00:04:22,880
anymore

115
00:04:22,880 --> 00:04:24,960
so why would people move towards single

116
00:04:24,960 --> 00:04:27,120
sign-on there's a couple of advantages

117
00:04:27,120 --> 00:04:28,160
and of course also a couple of

118
00:04:28,160 --> 00:04:30,960
disadvantages

119
00:04:31,040 --> 00:04:32,880
first of all

120
00:04:32,880 --> 00:04:35,280
single sign-on makes it quite easy to

121
00:04:35,280 --> 00:04:36,880
use for the user

122
00:04:36,880 --> 00:04:38,639
you can log into a lot of different

123
00:04:38,639 --> 00:04:41,280
applications using the same credentials

124
00:04:41,280 --> 00:04:43,280
so you don't need to create different

125
00:04:43,280 --> 00:04:44,720
credentials for each application or

126
00:04:44,720 --> 00:04:46,320
store different credentials for each

127
00:04:46,320 --> 00:04:49,840
application in your password manager

128
00:04:50,639 --> 00:04:52,000
it is also quite easy from the

129
00:04:52,000 --> 00:04:54,080
perspective of the person managing the

130
00:04:54,080 --> 00:04:56,000
web application

131
00:04:56,000 --> 00:04:57,759
because what you can do is

132
00:04:57,759 --> 00:04:59,520
there's only one single place only in

133
00:04:59,520 --> 00:05:00,960
the identity provider where you're

134
00:05:00,960 --> 00:05:02,880
storing users identities so if you're

135
00:05:02,880 --> 00:05:04,880
running multiple websites there's a

136
00:05:04,880 --> 00:05:06,560
single place where you can manage them

137
00:05:06,560 --> 00:05:08,000
all

138
00:05:08,000 --> 00:05:09,360
and a final

139
00:05:09,360 --> 00:05:10,720
advantage

140
00:05:10,720 --> 00:05:11,440
is

141
00:05:11,440 --> 00:05:12,720
security

142
00:05:12,720 --> 00:05:14,320
with a big question mark behind it of

143
00:05:14,320 --> 00:05:16,000
course

144
00:05:16,000 --> 00:05:18,400
it's somehow nice from a security point

145
00:05:18,400 --> 00:05:22,000
of view to have an identity provider

146
00:05:22,000 --> 00:05:24,560
handling all your authentication

147
00:05:24,560 --> 00:05:26,000
but

148
00:05:26,000 --> 00:05:26,960
um

149
00:05:26,960 --> 00:05:28,400
and the reason that is nice is that that

150
00:05:28,400 --> 00:05:29,440
means that

151
00:05:29,440 --> 00:05:31,039
all the difficulties of authentication

152
00:05:31,039 --> 00:05:32,720
and logging in you only need to handle

153
00:05:32,720 --> 00:05:34,000
at one place

154
00:05:34,000 --> 00:05:35,600
but of course

155
00:05:35,600 --> 00:05:37,360
every advantage comes also with its own

156
00:05:37,360 --> 00:05:39,199
downside and that means

157
00:05:39,199 --> 00:05:40,479
that you need to build some kind of

158
00:05:40,479 --> 00:05:42,639
protocol that connects the application

159
00:05:42,639 --> 00:05:44,800
to the identity provider

160
00:05:44,800 --> 00:05:46,560
and in particular you need to have

161
00:05:46,560 --> 00:05:47,759
something

162
00:05:47,759 --> 00:05:49,360
on the side of the application that

163
00:05:49,360 --> 00:05:51,199
handles the response of the identity

164
00:05:51,199 --> 00:05:52,479
provider

165
00:05:52,479 --> 00:05:54,720
and what we are seeing as a security

166
00:05:54,720 --> 00:05:56,960
tester in my daily life i see this going

167
00:05:56,960 --> 00:05:59,199
wrong a lot of times and the problem is

168
00:05:59,199 --> 00:06:00,800
if it goes wrong you have immediately

169
00:06:00,800 --> 00:06:02,800
serious consequences because it

170
00:06:02,800 --> 00:06:04,880
immediately means that you can log in to

171
00:06:04,880 --> 00:06:07,120
the application

172
00:06:07,120 --> 00:06:08,720
so an attacker can immediately log in to

173
00:06:08,720 --> 00:06:10,080
the application if there's a mistake

174
00:06:10,080 --> 00:06:11,600
there without having the right

175
00:06:11,600 --> 00:06:14,160
credentials

176
00:06:15,120 --> 00:06:15,919
so

177
00:06:15,919 --> 00:06:17,280
what would be

178
00:06:17,280 --> 00:06:19,600
the simplest possible solution

179
00:06:19,600 --> 00:06:20,960
to solve this problem and i think that's

180
00:06:20,960 --> 00:06:23,360
this very simple protocol

181
00:06:23,360 --> 00:06:26,160
what we're doing is we're entering as a

182
00:06:26,160 --> 00:06:28,319
user a username and password to watch

183
00:06:28,319 --> 00:06:29,360
the service provider that's the

184
00:06:29,360 --> 00:06:32,080
application we would like to look into

185
00:06:32,080 --> 00:06:34,319
we have username and password

186
00:06:34,319 --> 00:06:35,680
that's

187
00:06:35,680 --> 00:06:37,360
is forwarded by the service provider to

188
00:06:37,360 --> 00:06:39,360
the identity provider the identity

189
00:06:39,360 --> 00:06:40,880
provider checks if these credentials are

190
00:06:40,880 --> 00:06:42,240
right

191
00:06:42,240 --> 00:06:44,800
and if so tells the service provider

192
00:06:44,800 --> 00:06:47,039
very simple vertical also a perfectly

193
00:06:47,039 --> 00:06:48,720
good protocol

194
00:06:48,720 --> 00:06:52,639
as long as you are okay with the fact

195
00:06:52,639 --> 00:06:54,720
that

196
00:06:54,720 --> 00:06:57,120
it's a perfectly perfectly fine protocol

197
00:06:57,120 --> 00:06:59,120
as long as you assume that service

198
00:06:59,120 --> 00:07:02,400
providers are trustworthy

199
00:07:02,400 --> 00:07:04,319
if you build a setup like this

200
00:07:04,319 --> 00:07:06,160
if one of the service providers get

201
00:07:06,160 --> 00:07:08,639
compromised or gets malicious they own

202
00:07:08,639 --> 00:07:10,800
the credentials of the user so they can

203
00:07:10,800 --> 00:07:14,240
also log in to all the applications that

204
00:07:14,240 --> 00:07:15,840
are connected to the same identity

205
00:07:15,840 --> 00:07:18,318
provider

206
00:07:19,599 --> 00:07:22,720
in reality often in security would like

207
00:07:22,720 --> 00:07:24,639
to have segregation so you would like to

208
00:07:24,639 --> 00:07:27,199
have to guarantee that even if your

209
00:07:27,199 --> 00:07:29,360
service provider gets compromised

210
00:07:29,360 --> 00:07:31,120
all other service providers remain

211
00:07:31,120 --> 00:07:32,400
secure

212
00:07:32,400 --> 00:07:33,759
and this is the

213
00:07:33,759 --> 00:07:34,720
reason

214
00:07:34,720 --> 00:07:36,479
that you would like to have single

215
00:07:36,479 --> 00:07:38,000
sign-on and that you would like to have

216
00:07:38,000 --> 00:07:39,759
a purpose singles unknown protocol

217
00:07:39,759 --> 00:07:41,280
rather than the simple narrative

218
00:07:41,280 --> 00:07:45,159
solution that i gave here

219
00:07:45,280 --> 00:07:47,360
so what are we going to talk about talk

220
00:07:47,360 --> 00:07:48,800
about tonight i'm going to talk about

221
00:07:48,800 --> 00:07:50,639
two protocols the

222
00:07:50,639 --> 00:07:52,160
two protocols that we see the most in

223
00:07:52,160 --> 00:07:55,199
the vials saml which is an xml based

224
00:07:55,199 --> 00:07:57,199
protocol and

225
00:07:57,199 --> 00:07:59,680
and open id connects i'll tell about a

226
00:07:59,680 --> 00:08:02,000
relation between these two later

227
00:08:02,000 --> 00:08:03,680
and for each of those protocols first

228
00:08:03,680 --> 00:08:05,680
i'm going to show how it works and then

229
00:08:05,680 --> 00:08:06,960
i'm going to show

230
00:08:06,960 --> 00:08:09,520
what are the most common attacks i'm not

231
00:08:09,520 --> 00:08:11,039
going to demonstrate any new attacks

232
00:08:11,039 --> 00:08:12,479
today

233
00:08:12,479 --> 00:08:13,919
today's attacks that i'm going to

234
00:08:13,919 --> 00:08:16,800
present are all attacks that

235
00:08:16,800 --> 00:08:17,840
are

236
00:08:17,840 --> 00:08:19,360
very well known by the people that look

237
00:08:19,360 --> 00:08:21,280
into these protocols every day but

238
00:08:21,280 --> 00:08:23,759
apparently not so well known by

239
00:08:23,759 --> 00:08:25,759
developers so we can find these attacks

240
00:08:25,759 --> 00:08:28,879
quite commonly in the wild

241
00:08:34,880 --> 00:08:38,000
like i said i would start with saml

242
00:08:38,000 --> 00:08:40,000
and in saml we have three different

243
00:08:40,000 --> 00:08:41,919
roles we have a service provider that's

244
00:08:41,919 --> 00:08:43,200
the application that the user would like

245
00:08:43,200 --> 00:08:45,680
to log into and we have an identity

246
00:08:45,680 --> 00:08:48,560
identity provider that's the

247
00:08:48,560 --> 00:08:50,480
server or the service that checks the

248
00:08:50,480 --> 00:08:52,720
user's identity and of course we have a

249
00:08:52,720 --> 00:08:54,720
user that tries to log in through his

250
00:08:54,720 --> 00:08:56,720
browser

251
00:08:56,720 --> 00:08:58,000
and the steps of the protocol are

252
00:08:58,000 --> 00:08:59,360
actually quite simple

253
00:08:59,360 --> 00:09:01,519
the service provider if the user wants

254
00:09:01,519 --> 00:09:03,519
to login then the service provider sends

255
00:09:03,519 --> 00:09:05,360
an authentication request

256
00:09:05,360 --> 00:09:06,959
through the user's browser to the

257
00:09:06,959 --> 00:09:09,279
identity provider note that all messages

258
00:09:09,279 --> 00:09:12,080
are passed through the user's browser

259
00:09:12,080 --> 00:09:13,680
the identity provider then checks the

260
00:09:13,680 --> 00:09:15,440
user's identity

261
00:09:15,440 --> 00:09:17,760
and sends an authentication response

262
00:09:17,760 --> 00:09:18,640
back

263
00:09:18,640 --> 00:09:20,240
to the service provider and if the

264
00:09:20,240 --> 00:09:22,800
service provider if that receives that

265
00:09:22,800 --> 00:09:25,120
authentication response then the service

266
00:09:25,120 --> 00:09:26,959
provider can check that it indeed is the

267
00:09:26,959 --> 00:09:27,839
right

268
00:09:27,839 --> 00:09:30,640
user that's logged in

269
00:09:30,640 --> 00:09:32,000
so i'm going to show now how these

270
00:09:32,000 --> 00:09:33,920
messages look like

271
00:09:33,920 --> 00:09:35,920
an authentication request like i said

272
00:09:35,920 --> 00:09:38,560
it's xml based so an xmas an

273
00:09:38,560 --> 00:09:42,160
authentication request looks like this

274
00:09:42,160 --> 00:09:43,839
we have in there an id

275
00:09:43,839 --> 00:09:45,519
we have the name of the provider the

276
00:09:45,519 --> 00:09:48,800
destination and we have also

277
00:09:48,800 --> 00:09:50,959
here we have the issuer which is the

278
00:09:50,959 --> 00:09:52,560
service provider that generates the

279
00:09:52,560 --> 00:09:54,560
request

280
00:09:54,560 --> 00:09:56,240
if the identity provider receives this

281
00:09:56,240 --> 00:09:58,320
message then it responds with a saml

282
00:09:58,320 --> 00:09:59,839
response

283
00:09:59,839 --> 00:10:01,839
in the sample response

284
00:10:01,839 --> 00:10:03,680
is an id

285
00:10:03,680 --> 00:10:04,480
again

286
00:10:04,480 --> 00:10:06,640
there is a destination and there is an

287
00:10:06,640 --> 00:10:08,560
in response to value here

288
00:10:08,560 --> 00:10:11,200
that should be equal to the id of the

289
00:10:11,200 --> 00:10:13,440
request that we just told

290
00:10:13,440 --> 00:10:15,200
also there's the name of the issuer the

291
00:10:15,200 --> 00:10:17,279
name of the identity provider

292
00:10:17,279 --> 00:10:19,200
there's a status code success in this

293
00:10:19,200 --> 00:10:20,880
case it means that

294
00:10:20,880 --> 00:10:23,040
logging in succeeded and there is an

295
00:10:23,040 --> 00:10:24,399
assertion

296
00:10:24,399 --> 00:10:26,320
and the assertion looks like this and

297
00:10:26,320 --> 00:10:28,079
again has an id test the name of the

298
00:10:28,079 --> 00:10:29,360
issuer

299
00:10:29,360 --> 00:10:32,160
it does have a digital signature this is

300
00:10:32,160 --> 00:10:34,000
quite very funny because

301
00:10:34,000 --> 00:10:37,040
digital signatures contain a uri that

302
00:10:37,040 --> 00:10:38,399
refers to

303
00:10:38,399 --> 00:10:39,839
the parts that's actually being signed

304
00:10:39,839 --> 00:10:41,920
so in this case it says this uri is

305
00:10:41,920 --> 00:10:44,720
being signed so the entire thing

306
00:10:44,720 --> 00:10:47,920
that science contains its own signature

307
00:10:47,920 --> 00:10:49,680
which when i first thought this is funny

308
00:10:49,680 --> 00:10:51,360
you cannot put a signature over

309
00:10:51,360 --> 00:10:52,480
something that contains that same

310
00:10:52,480 --> 00:10:54,320
signature but actually the protocol

311
00:10:54,320 --> 00:10:55,760
takes this into account so it first

312
00:10:55,760 --> 00:10:57,120
drops the signature before actually

313
00:10:57,120 --> 00:11:00,680
verifying the signature

314
00:11:01,279 --> 00:11:03,279
moreover what we have is a subject

315
00:11:03,279 --> 00:11:04,880
that's the name of the or the id of the

316
00:11:04,880 --> 00:11:06,720
user that's trying to log in

317
00:11:06,720 --> 00:11:07,839
we have

318
00:11:07,839 --> 00:11:09,920
conditions for example for each audience

319
00:11:09,920 --> 00:11:12,959
is it meant and when is it valid

320
00:11:12,959 --> 00:11:14,959
we have an authentication statement when

321
00:11:14,959 --> 00:11:17,279
was authentication happening

322
00:11:17,279 --> 00:11:18,880
and this is important we have the

323
00:11:18,880 --> 00:11:20,640
attribute value which contains in this

324
00:11:20,640 --> 00:11:21,440
case

325
00:11:21,440 --> 00:11:23,040
the email address of the user that's

326
00:11:23,040 --> 00:11:24,640
trying to log in can also be other that

327
00:11:24,640 --> 00:11:28,519
can also be other attributes

328
00:11:28,720 --> 00:11:31,760
these messages of course need to be

329
00:11:31,760 --> 00:11:33,279
sent to the other side somehow and

330
00:11:33,279 --> 00:11:35,279
there's two different ways to do that

331
00:11:35,279 --> 00:11:37,040
there are url bindings and there are

332
00:11:37,040 --> 00:11:38,399
post bindings

333
00:11:38,399 --> 00:11:40,079
what we do we take the message we take

334
00:11:40,079 --> 00:11:42,160
the xml we deflate it that's a

335
00:11:42,160 --> 00:11:44,800
compression algorithm we base 64. it's

336
00:11:44,800 --> 00:11:47,600
url encoded and pass it in the url

337
00:11:47,600 --> 00:11:49,360
or we can do exactly the same thing but

338
00:11:49,360 --> 00:11:52,560
in the hidden form fields

339
00:11:54,320 --> 00:11:56,560
so what can what kind of things can

340
00:11:56,560 --> 00:11:59,040
possibly go wrong here

341
00:11:59,040 --> 00:12:01,040
first of all

342
00:12:01,040 --> 00:12:03,279
what we can try to do as hackers

343
00:12:03,279 --> 00:12:05,040
execute the man in the middle attack try

344
00:12:05,040 --> 00:12:06,560
to get in between the service provider

345
00:12:06,560 --> 00:12:08,720
and identity provider intercept the

346
00:12:08,720 --> 00:12:10,639
messages and see if you can do something

347
00:12:10,639 --> 00:12:13,120
like that and actually

348
00:12:13,120 --> 00:12:15,760
in this case where we use http

349
00:12:15,760 --> 00:12:17,200
there's nothing that prevents us from

350
00:12:17,200 --> 00:12:18,240
doing that

351
00:12:18,240 --> 00:12:20,560
saml doesn't care about transport level

352
00:12:20,560 --> 00:12:22,639
security samuel doesn't encrypt any

353
00:12:22,639 --> 00:12:24,160
messages that are sent from one side the

354
00:12:24,160 --> 00:12:26,399
other it does have signatures where the

355
00:12:26,399 --> 00:12:27,920
signatures

356
00:12:27,920 --> 00:12:29,040
don't

357
00:12:29,040 --> 00:12:31,920
guarantee confidentiality only integrity

358
00:12:31,920 --> 00:12:32,639
so

359
00:12:32,639 --> 00:12:34,480
if there is no tls we can intercept all

360
00:12:34,480 --> 00:12:36,880
messages including the sample response

361
00:12:36,880 --> 00:12:39,360
and use that symbol response to login to

362
00:12:39,360 --> 00:12:41,839
the user that's trying to login

363
00:12:41,839 --> 00:12:44,000
so always always always

364
00:12:44,000 --> 00:12:46,720
run some old protocols over tls

365
00:12:46,720 --> 00:12:47,839
fortunately

366
00:12:47,839 --> 00:12:49,360
most of the implementations that we see

367
00:12:49,360 --> 00:12:52,920
actually do this nowadays

368
00:12:53,760 --> 00:12:55,279
what else can we do

369
00:12:55,279 --> 00:12:56,800
i already showed you before that there

370
00:12:56,800 --> 00:13:00,720
is a signature in these xml messages

371
00:13:00,720 --> 00:13:02,320
of course if there is a signature we

372
00:13:02,320 --> 00:13:04,320
want to break that

373
00:13:04,320 --> 00:13:05,839
and this is something that actually

374
00:13:05,839 --> 00:13:07,680
works surprisingly often we see at our

375
00:13:07,680 --> 00:13:08,880
customers

376
00:13:08,880 --> 00:13:10,880
we surprisingly often see that there is

377
00:13:10,880 --> 00:13:12,480
a nice signature in the message but

378
00:13:12,480 --> 00:13:14,079
there is no process on the other side

379
00:13:14,079 --> 00:13:17,200
that actually verifies this signature

380
00:13:17,200 --> 00:13:19,519
and my theory why this happens so often

381
00:13:19,519 --> 00:13:21,440
is the developers mainly care about

382
00:13:21,440 --> 00:13:23,680
making things work and there is nothing

383
00:13:23,680 --> 00:13:24,880
that doesn't work if they write an

384
00:13:24,880 --> 00:13:26,480
implementation that doesn't detect the

385
00:13:26,480 --> 00:13:27,760
signature

386
00:13:27,760 --> 00:13:30,000
other theory i have is that perhaps they

387
00:13:30,000 --> 00:13:32,480
might comment out the line that checks

388
00:13:32,480 --> 00:13:34,399
the signature at some point

389
00:13:34,399 --> 00:13:36,800
then don't notice that

390
00:13:36,800 --> 00:13:38,720
they or then they forget that they ever

391
00:13:38,720 --> 00:13:40,800
commented this out and then forgets to

392
00:13:40,800 --> 00:13:42,800
uncomment this anyway i don't these are

393
00:13:42,800 --> 00:13:44,480
the two hypotheses about what are the

394
00:13:44,480 --> 00:13:47,440
reasons but we do see that signature

395
00:13:47,440 --> 00:13:51,440
checks are very often just ignored

396
00:13:51,440 --> 00:13:53,040
in addition to checking signatures what

397
00:13:53,040 --> 00:13:55,600
you can also do is check if unsigned

398
00:13:55,600 --> 00:13:57,519
messages are accepted and that's not

399
00:13:57,519 --> 00:14:00,079
exactly the same right so in if you

400
00:14:00,079 --> 00:14:02,000
check if the signature is verified we

401
00:14:02,000 --> 00:14:03,279
just change the message see if it's

402
00:14:03,279 --> 00:14:05,760
still accepted what we can also do is

403
00:14:05,760 --> 00:14:07,920
just drop the entire signature drop the

404
00:14:07,920 --> 00:14:10,480
entire thing from the xml and see if the

405
00:14:10,480 --> 00:14:13,360
application likes it

406
00:14:13,440 --> 00:14:15,680
what we also can do is self-signed

407
00:14:15,680 --> 00:14:17,519
certificates these signatures are

408
00:14:17,519 --> 00:14:19,040
actually signed by a certificate we can

409
00:14:19,040 --> 00:14:22,079
check and we can check if the message is

410
00:14:22,079 --> 00:14:23,920
encrypted rather than signed because for

411
00:14:23,920 --> 00:14:25,440
some reason

412
00:14:25,440 --> 00:14:27,440
developers also confuse these two quite

413
00:14:27,440 --> 00:14:30,440
often

414
00:14:31,920 --> 00:14:33,199
my third attack that i'm going to

415
00:14:33,199 --> 00:14:36,720
discuss is also a quite fun one it's xml

416
00:14:36,720 --> 00:14:39,519
signature wrapping and it's based on the

417
00:14:39,519 --> 00:14:41,040
way

418
00:14:41,040 --> 00:14:43,360
based on a parser differential between

419
00:14:43,360 --> 00:14:45,120
getting the id that's trying to login

420
00:14:45,120 --> 00:14:47,519
and verifying the signature

421
00:14:47,519 --> 00:14:49,680
and what i mean with that is i'm going

422
00:14:49,680 --> 00:14:51,600
to show this in this quite complicated

423
00:14:51,600 --> 00:14:53,680
xml overview so in the left is the

424
00:14:53,680 --> 00:14:55,680
regular message on the right is the

425
00:14:55,680 --> 00:14:57,120
message that we are using if we are

426
00:14:57,120 --> 00:14:58,880
going to attack this

427
00:14:58,880 --> 00:15:00,880
what we are doing is we are wrapping the

428
00:15:00,880 --> 00:15:03,360
entire thing into our own samoa response

429
00:15:03,360 --> 00:15:04,880
with an evil response id doesn't really

430
00:15:04,880 --> 00:15:06,639
matter what it is

431
00:15:06,639 --> 00:15:08,399
we are changing that so we are

432
00:15:08,399 --> 00:15:10,399
entering here the

433
00:15:10,399 --> 00:15:12,399
id of the user that we would like to log

434
00:15:12,399 --> 00:15:14,399
into

435
00:15:14,399 --> 00:15:16,320
and

436
00:15:16,320 --> 00:15:18,720
we are

437
00:15:18,720 --> 00:15:20,880
changing the signature so what we are

438
00:15:20,880 --> 00:15:23,519
doing is this or actually not changing

439
00:15:23,519 --> 00:15:24,720
the signature so what we are doing is

440
00:15:24,720 --> 00:15:28,000
this signature refers to the green blob

441
00:15:28,000 --> 00:15:29,839
the signature is still valid

442
00:15:29,839 --> 00:15:31,680
and what we see in some implementations

443
00:15:31,680 --> 00:15:33,040
and this is also something we actually

444
00:15:33,040 --> 00:15:35,040
do see in practice what we see in some

445
00:15:35,040 --> 00:15:38,240
implementations is that

446
00:15:38,639 --> 00:15:39,440
the

447
00:15:39,440 --> 00:15:40,880
if you send a message like this that the

448
00:15:40,880 --> 00:15:42,639
part that is verified that's a green

449
00:15:42,639 --> 00:15:44,959
part and the green part has a perfectly

450
00:15:44,959 --> 00:15:46,320
fine signature

451
00:15:46,320 --> 00:15:48,079
and then there is a next step in which

452
00:15:48,079 --> 00:15:49,600
we are going to check which

453
00:15:49,600 --> 00:15:52,079
user is actually trying to log in

454
00:15:52,079 --> 00:15:55,120
to do that we still take the outermost

455
00:15:55,120 --> 00:15:56,959
similar assertion we check which id that

456
00:15:56,959 --> 00:15:58,959
is but that is not the idea of it to

457
00:15:58,959 --> 00:16:01,839
just check the signature

458
00:16:03,279 --> 00:16:07,399
so this is xml signature wrapping

459
00:16:10,240 --> 00:16:11,759
attack number four

460
00:16:11,759 --> 00:16:14,639
attacking tx well parser and many

461
00:16:14,639 --> 00:16:17,120
hackers that have ever worked with xml

462
00:16:17,120 --> 00:16:17,920
will

463
00:16:17,920 --> 00:16:19,759
find this familiar there's a lot of

464
00:16:19,759 --> 00:16:21,759
nasty things you can do in xml for

465
00:16:21,759 --> 00:16:24,160
example you can define your own external

466
00:16:24,160 --> 00:16:26,480
xml entities that might refer to

467
00:16:26,480 --> 00:16:28,720
internal files that might refer to

468
00:16:28,720 --> 00:16:30,800
internal network locations and you can

469
00:16:30,800 --> 00:16:33,839
use this to

470
00:16:34,240 --> 00:16:36,560
to read the contents of the network

471
00:16:36,560 --> 00:16:38,800
location or read the content of the

472
00:16:38,800 --> 00:16:41,120
local file nothing special about that

473
00:16:41,120 --> 00:16:42,399
just the

474
00:16:42,399 --> 00:16:43,519
normal

475
00:16:43,519 --> 00:16:45,120
xml

476
00:16:45,120 --> 00:16:47,120
vulnerabilities that always work also

477
00:16:47,120 --> 00:16:50,759
sometimes work here

478
00:16:51,680 --> 00:16:53,600
then we have login cross-site

479
00:16:53,600 --> 00:16:55,680
recastratory

480
00:16:55,680 --> 00:16:57,360
and i hear many of you thinking okay

481
00:16:57,360 --> 00:16:58,959
login cause that request for you is not

482
00:16:58,959 --> 00:17:00,720
actually so serious but i'll show you

483
00:17:00,720 --> 00:17:02,880
that in the case of saml

484
00:17:02,880 --> 00:17:05,280
this can be really nasty

485
00:17:05,280 --> 00:17:08,799
because we have um let me first quickly

486
00:17:08,799 --> 00:17:11,439
repeat what login crosshat request right

487
00:17:11,439 --> 00:17:13,919
here means normally is you can do

488
00:17:13,919 --> 00:17:16,160
crossfire request forgery against login

489
00:17:16,160 --> 00:17:18,319
functionality which means that as an

490
00:17:18,319 --> 00:17:21,119
attacker you can log in ourselves on the

491
00:17:21,119 --> 00:17:23,199
device of a user so that means that the

492
00:17:23,199 --> 00:17:25,199
user opens his laptop

493
00:17:25,199 --> 00:17:26,400
because that's a request for jury

494
00:17:26,400 --> 00:17:28,960
happens and the user

495
00:17:28,960 --> 00:17:30,960
finds that the attacker is logged in on

496
00:17:30,960 --> 00:17:33,200
the application on his device or perhaps

497
00:17:33,200 --> 00:17:34,960
he might not find it

498
00:17:34,960 --> 00:17:36,400
he might not spot it

499
00:17:36,400 --> 00:17:38,240
and he might

500
00:17:38,240 --> 00:17:39,440
accidentally enter data in the

501
00:17:39,440 --> 00:17:41,440
application not knowing that he is

502
00:17:41,440 --> 00:17:42,799
entering the data to the attacker

503
00:17:42,799 --> 00:17:43,760
accounts

504
00:17:43,760 --> 00:17:45,760
so again what we can do we can log in

505
00:17:45,760 --> 00:17:47,280
ourselves as the attacker on the user's

506
00:17:47,280 --> 00:17:48,720
device not the other way around that

507
00:17:48,720 --> 00:17:51,919
would be much more serious of course

508
00:17:51,919 --> 00:17:53,840
but the nice thing and i mean from a

509
00:17:53,840 --> 00:17:56,400
hacker perspective what we can do is we

510
00:17:56,400 --> 00:18:00,320
can also connect our facebook accounts

511
00:18:00,320 --> 00:18:02,640
many applications have functionality

512
00:18:02,640 --> 00:18:05,200
that let you add an existing

513
00:18:05,200 --> 00:18:06,240
account

514
00:18:06,240 --> 00:18:08,080
an existing single sign on account like

515
00:18:08,080 --> 00:18:10,720
facebook to your accounts

516
00:18:10,720 --> 00:18:12,480
and by

517
00:18:12,480 --> 00:18:14,080
pressing add facebook account it's

518
00:18:14,080 --> 00:18:15,520
running through the normal login flow

519
00:18:15,520 --> 00:18:17,440
the normal summerflow but instead of

520
00:18:17,440 --> 00:18:19,280
logging in it connects

521
00:18:19,280 --> 00:18:22,080
your facebook account

522
00:18:22,080 --> 00:18:24,799
to your existing accounts

523
00:18:24,799 --> 00:18:26,960
and if you can csrf this

524
00:18:26,960 --> 00:18:28,480
what that means is

525
00:18:28,480 --> 00:18:30,400
we can connect the attackers facebook

526
00:18:30,400 --> 00:18:32,480
accounts to a user's accounts which

527
00:18:32,480 --> 00:18:33,919
means that in the future we can always

528
00:18:33,919 --> 00:18:36,640
use our attacker's facebook to log in to

529
00:18:36,640 --> 00:18:38,160
the account of the user

530
00:18:38,160 --> 00:18:38,880
so

531
00:18:38,880 --> 00:18:40,799
login csrf can be very serious and it's

532
00:18:40,799 --> 00:18:41,919
something especially if you have

533
00:18:41,919 --> 00:18:43,360
connecting functionality that needs to

534
00:18:43,360 --> 00:18:45,600
be taken very seriously

535
00:18:45,600 --> 00:18:47,440
how does it actually work

536
00:18:47,440 --> 00:18:49,840
basically the same as um

537
00:18:49,840 --> 00:18:52,240
log in csrf always works so what do we

538
00:18:52,240 --> 00:18:54,160
do as an attacker we connect to the

539
00:18:54,160 --> 00:18:56,080
service provider we say we want to log

540
00:18:56,080 --> 00:18:58,799
in onto our own accounts

541
00:18:58,799 --> 00:19:00,320
the authentication request gets

542
00:19:00,320 --> 00:19:03,440
forwarded to the identity provider

543
00:19:03,440 --> 00:19:06,000
we log in with our own account with our

544
00:19:06,000 --> 00:19:08,480
own attacker credentials and now we have

545
00:19:08,480 --> 00:19:10,640
an authentication response that belongs

546
00:19:10,640 --> 00:19:12,880
to our accounts

547
00:19:12,880 --> 00:19:14,960
and then we forward this authentication

548
00:19:14,960 --> 00:19:17,120
response to the user agent it might be

549
00:19:17,120 --> 00:19:18,960
for example the user it might be for

550
00:19:18,960 --> 00:19:20,960
example a link in which the user agent

551
00:19:20,960 --> 00:19:22,960
or the user can click

552
00:19:22,960 --> 00:19:24,880
if the user agent

553
00:19:24,880 --> 00:19:27,600
is tricked into clicking on that link

554
00:19:27,600 --> 00:19:28,799
then this

555
00:19:28,799 --> 00:19:30,240
link will be followed in the user's

556
00:19:30,240 --> 00:19:31,440
browser

557
00:19:31,440 --> 00:19:33,600
it's going to go to the service provider

558
00:19:33,600 --> 00:19:35,919
where the user is going to receive a

559
00:19:35,919 --> 00:19:39,840
valid session for the attacker

560
00:19:41,120 --> 00:19:42,960
how do you actually fix this it's very

561
00:19:42,960 --> 00:19:45,200
simple because there is a default way of

562
00:19:45,200 --> 00:19:47,360
fixing this into

563
00:19:47,360 --> 00:19:49,200
xaml and this is something i just

564
00:19:49,200 --> 00:19:51,440
explained i quickly mentioned it because

565
00:19:51,440 --> 00:19:53,280
we have this we have this in response to

566
00:19:53,280 --> 00:19:55,679
value here

567
00:19:55,679 --> 00:19:57,679
and the in response to value i already

568
00:19:57,679 --> 00:19:59,919
mentioned needs to match the id and this

569
00:19:59,919 --> 00:20:01,760
is might be something that looks a bit

570
00:20:01,760 --> 00:20:03,919
as a familiar pattern maybe some of you

571
00:20:03,919 --> 00:20:05,600
guesses already but yes this in response

572
00:20:05,600 --> 00:20:08,000
to pattern is actually just a simple

573
00:20:08,000 --> 00:20:10,080
normal csrf token

574
00:20:10,080 --> 00:20:12,240
that functions exactly the same so the

575
00:20:12,240 --> 00:20:15,600
trick is on the site yeah the trick is

576
00:20:15,600 --> 00:20:17,200
on the side of the service provider we

577
00:20:17,200 --> 00:20:18,880
need to save this id

578
00:20:18,880 --> 00:20:20,400
in the user session

579
00:20:20,400 --> 00:20:22,559
and we need to check if the in response

580
00:20:22,559 --> 00:20:24,880
to value comes back that is indeed

581
00:20:24,880 --> 00:20:28,720
matches the id that we sent out earlier

582
00:20:30,480 --> 00:20:32,400
then the last attack for example that i

583
00:20:32,400 --> 00:20:34,880
would like to discuss is

584
00:20:34,880 --> 00:20:37,440
being a malicious service provider and

585
00:20:37,440 --> 00:20:38,960
this is something that i started this

586
00:20:38,960 --> 00:20:41,200
talk from the reason we use such

587
00:20:41,200 --> 00:20:43,600
complicated protocols is because we want

588
00:20:43,600 --> 00:20:45,919
to get we want to protect ourselves

589
00:20:45,919 --> 00:20:47,760
against service providers that get

590
00:20:47,760 --> 00:20:49,600
compromised

591
00:20:49,600 --> 00:20:51,520
so then of course the question is does

592
00:20:51,520 --> 00:20:54,080
someone actually protect against this

593
00:20:54,080 --> 00:20:55,600
do we have to guarantee that if one

594
00:20:55,600 --> 00:20:57,679
service provider gets compromised that

595
00:20:57,679 --> 00:21:00,400
all the other ones are still secure

596
00:21:00,400 --> 00:21:01,600
fortunately

597
00:21:01,600 --> 00:21:02,880
we should have this guarantee if the

598
00:21:02,880 --> 00:21:04,480
implementation is correct

599
00:21:04,480 --> 00:21:06,720
so what is going on we can try to attack

600
00:21:06,720 --> 00:21:08,080
this

601
00:21:08,080 --> 00:21:10,400
we can start a session as a malicious

602
00:21:10,400 --> 00:21:12,720
service provider as the service provider

603
00:21:12,720 --> 00:21:13,520
so

604
00:21:13,520 --> 00:21:16,320
we just let ourselves logged in we get a

605
00:21:16,320 --> 00:21:18,640
authentication request

606
00:21:18,640 --> 00:21:20,480
as a malicious service provider then

607
00:21:20,480 --> 00:21:22,880
you're going to start a session with the

608
00:21:22,880 --> 00:21:25,679
user so we have just a normal flow

609
00:21:25,679 --> 00:21:27,440
authentication request to the identity

610
00:21:27,440 --> 00:21:28,480
provider

611
00:21:28,480 --> 00:21:30,559
and authentication responds back to the

612
00:21:30,559 --> 00:21:33,600
malicious service provider

613
00:21:33,600 --> 00:21:34,480
and

614
00:21:34,480 --> 00:21:36,720
now we have an authentication response

615
00:21:36,720 --> 00:21:38,400
that's meant

616
00:21:38,400 --> 00:21:39,679
for

617
00:21:39,679 --> 00:21:41,840
us for our service provider

618
00:21:41,840 --> 00:21:43,919
what we can do is try to forward that

619
00:21:43,919 --> 00:21:46,159
authentication response meant for us to

620
00:21:46,159 --> 00:21:47,760
another service provider

621
00:21:47,760 --> 00:21:49,760
and see what happens

622
00:21:49,760 --> 00:21:51,760
and i can tell you

623
00:21:51,760 --> 00:21:53,120
most of the time this is not going to

624
00:21:53,120 --> 00:21:54,880
work because remember this

625
00:21:54,880 --> 00:21:56,640
authentication response contains the

626
00:21:56,640 --> 00:21:59,039
name of the service provider

627
00:21:59,039 --> 00:22:00,559
the service provider is probably going

628
00:22:00,559 --> 00:22:01,440
to check

629
00:22:01,440 --> 00:22:03,360
what name is in there

630
00:22:03,360 --> 00:22:05,280
this check might be forgotten i think

631
00:22:05,280 --> 00:22:07,120
google did this forget this forgot this

632
00:22:07,120 --> 00:22:09,360
check some time in the very early days

633
00:22:09,360 --> 00:22:11,120
of summer

634
00:22:11,120 --> 00:22:13,200
so that way there was a serious

635
00:22:13,200 --> 00:22:15,280
vulnerability at google

636
00:22:15,280 --> 00:22:16,240
anyway

637
00:22:16,240 --> 00:22:18,240
um probably the service provider is

638
00:22:18,240 --> 00:22:19,840
going to check

639
00:22:19,840 --> 00:22:22,559
the um authentication response and the

640
00:22:22,559 --> 00:22:24,240
name of the service provider in there

641
00:22:24,240 --> 00:22:25,760
and we'll see that this message is not

642
00:22:25,760 --> 00:22:28,240
intended for him

643
00:22:28,240 --> 00:22:30,159
we can always try if it works because

644
00:22:30,159 --> 00:22:33,919
who knows maybe forgot about this check

645
00:22:34,320 --> 00:22:36,400
so that's the summary of the first half

646
00:22:36,400 --> 00:22:37,679
of this part

647
00:22:37,679 --> 00:22:39,919
first half of this talk

648
00:22:39,919 --> 00:22:42,240
some vulnerabilities what we saw is you

649
00:22:42,240 --> 00:22:43,679
can try executing men in the middle

650
00:22:43,679 --> 00:22:45,679
attacks you can try to bypass the

651
00:22:45,679 --> 00:22:47,039
signature check

652
00:22:47,039 --> 00:22:50,480
you can try to do xml signature wrapping

653
00:22:50,480 --> 00:22:52,640
attack the xml parser

654
00:22:52,640 --> 00:22:55,679
log in csrf and you can try to be a

655
00:22:55,679 --> 00:22:57,679
malicious service provider

656
00:22:57,679 --> 00:22:58,720
these are

657
00:22:58,720 --> 00:23:00,000
six of the most common or most

658
00:23:00,000 --> 00:23:01,840
interesting attacks of course there are

659
00:23:01,840 --> 00:23:03,360
a few others but these are the most

660
00:23:03,360 --> 00:23:07,559
interesting to present i think

661
00:23:11,360 --> 00:23:13,039
let's continue with

662
00:23:13,039 --> 00:23:15,600
oauth

663
00:23:15,679 --> 00:23:17,919
if i'm in a smaller group i always ask

664
00:23:17,919 --> 00:23:20,320
people do you guys know what oaf stand

665
00:23:20,320 --> 00:23:22,799
for and people always respond yes of

666
00:23:22,799 --> 00:23:24,080
course i know this

667
00:23:24,080 --> 00:23:26,000
it stands for open authentication

668
00:23:26,000 --> 00:23:28,080
everyone says it wrong it stands for

669
00:23:28,080 --> 00:23:30,320
often authorization

670
00:23:30,320 --> 00:23:31,919
and why i mention this is this is

671
00:23:31,919 --> 00:23:34,159
actually important

672
00:23:34,159 --> 00:23:38,080
because um the purpose of or off is not

673
00:23:38,080 --> 00:23:40,320
to be an authentication algorithm or an

674
00:23:40,320 --> 00:23:42,400
authentication protocol the purpose of

675
00:23:42,400 --> 00:23:45,440
oauth is to allow an application to

676
00:23:45,440 --> 00:23:47,679
access research resources of another

677
00:23:47,679 --> 00:23:50,720
user on behalf of a user so for example

678
00:23:50,720 --> 00:23:53,279
we can o off we can use oauth

679
00:23:53,279 --> 00:23:54,400
to

680
00:23:54,400 --> 00:23:56,880
allow another application to access our

681
00:23:56,880 --> 00:23:59,760
profile page

682
00:23:59,760 --> 00:24:02,799
let's have a look how it looks

683
00:24:02,840 --> 00:24:06,000
like it's not xml based this time so all

684
00:24:06,000 --> 00:24:08,320
messages are a lot shorter they even fit

685
00:24:08,320 --> 00:24:09,679
all on one side instead of the five

686
00:24:09,679 --> 00:24:11,919
sides i used i didn't need it for saml

687
00:24:11,919 --> 00:24:14,240
so what's going on

688
00:24:14,240 --> 00:24:17,360
we start we have four calls in total a

689
00:24:17,360 --> 00:24:20,159
user authorization request and an

690
00:24:20,159 --> 00:24:22,320
authorization code grants

691
00:24:22,320 --> 00:24:24,799
these are passed through the user agents

692
00:24:24,799 --> 00:24:26,799
and we have then a backend call that's

693
00:24:26,799 --> 00:24:28,799
not passed for the user agent but

694
00:24:28,799 --> 00:24:30,640
straight server to server

695
00:24:30,640 --> 00:24:32,480
an access token request and an excellent

696
00:24:32,480 --> 00:24:34,960
token grant so these are other backend

697
00:24:34,960 --> 00:24:38,000
server to server calls

698
00:24:38,000 --> 00:24:39,760
first probably i should mention what

699
00:24:39,760 --> 00:24:42,080
roles we have in oauth because they

700
00:24:42,080 --> 00:24:44,080
basically roughly function the same as

701
00:24:44,080 --> 00:24:45,840
saml roles but of course they use

702
00:24:45,840 --> 00:24:48,480
different vocabulary so what we have in

703
00:24:48,480 --> 00:24:50,799
off is we have a client that's the

704
00:24:50,799 --> 00:24:52,640
application that would like to get

705
00:24:52,640 --> 00:24:54,960
access to a research to a resource like

706
00:24:54,960 --> 00:24:56,720
the user's profile

707
00:24:56,720 --> 00:24:59,360
and we have an authorization server

708
00:24:59,360 --> 00:25:01,279
that's the server that checks the user's

709
00:25:01,279 --> 00:25:03,760
identity

710
00:25:04,559 --> 00:25:06,400
we start with a user authorization

711
00:25:06,400 --> 00:25:08,320
request

712
00:25:08,320 --> 00:25:11,039
and in the user authorization request we

713
00:25:11,039 --> 00:25:12,840
send a message straight away to the

714
00:25:12,840 --> 00:25:14,559
observer

715
00:25:14,559 --> 00:25:16,960
with the request for a code an

716
00:25:16,960 --> 00:25:20,159
authorization codes

717
00:25:20,240 --> 00:25:21,760
and in that request we also include a

718
00:25:21,760 --> 00:25:23,760
redirect uri that's written here

719
00:25:23,760 --> 00:25:26,480
client.com callback which is the uri

720
00:25:26,480 --> 00:25:30,240
that the message is being sent back to

721
00:25:30,240 --> 00:25:32,000
so what the authorization server is

722
00:25:32,000 --> 00:25:33,840
going to do now like it should it's

723
00:25:33,840 --> 00:25:35,840
going to check the user's identity and

724
00:25:35,840 --> 00:25:37,679
it's going to check if the user actually

725
00:25:37,679 --> 00:25:39,200
authorizes

726
00:25:39,200 --> 00:25:41,520
the client to get access to the for

727
00:25:41,520 --> 00:25:44,960
example the profile data so in a

728
00:25:44,960 --> 00:25:47,600
most of flows you always see such a

729
00:25:47,600 --> 00:25:49,840
check

730
00:25:50,559 --> 00:25:53,360
then if that check is passed

731
00:25:53,360 --> 00:25:55,279
then it's going to send indeed a message

732
00:25:55,279 --> 00:25:57,679
back to the redirect uri that we passed

733
00:25:57,679 --> 00:26:00,799
including discounts and this code is an

734
00:26:00,799 --> 00:26:02,640
authorization code

735
00:26:02,640 --> 00:26:03,679
which

736
00:26:03,679 --> 00:26:05,600
gives the client permission to continue

737
00:26:05,600 --> 00:26:07,039
the rest of the flow

738
00:26:07,039 --> 00:26:08,960
which is which is the service to server

739
00:26:08,960 --> 00:26:11,440
to server call client to authorization

740
00:26:11,440 --> 00:26:13,279
server containing the access token

741
00:26:13,279 --> 00:26:14,640
request

742
00:26:14,640 --> 00:26:16,640
and how that looks like is

743
00:26:16,640 --> 00:26:17,840
we are passing

744
00:26:17,840 --> 00:26:19,600
the name of the client id the name of

745
00:26:19,600 --> 00:26:22,000
the client secrets

746
00:26:22,000 --> 00:26:23,360
and we are passing the codes that we

747
00:26:23,360 --> 00:26:25,120
just received

748
00:26:25,120 --> 00:26:27,200
and the service the server is going to

749
00:26:27,200 --> 00:26:29,520
respond to that with a piece of json

750
00:26:29,520 --> 00:26:31,919
that contains an access token and the

751
00:26:31,919 --> 00:26:33,440
access token is something that can be

752
00:26:33,440 --> 00:26:35,760
used for example to call an api that

753
00:26:35,760 --> 00:26:38,159
contains the profile information

754
00:26:38,159 --> 00:26:39,840
so as you see here we have a two-step

755
00:26:39,840 --> 00:26:41,760
process here first we are passing an

756
00:26:41,760 --> 00:26:42,960
authorization

757
00:26:42,960 --> 00:26:43,760
first

758
00:26:43,760 --> 00:26:45,440
first we are passing an authorization

759
00:26:45,440 --> 00:26:47,760
codes and this authorization codes can

760
00:26:47,760 --> 00:26:52,760
be exchanged for and for an access token

761
00:26:57,520 --> 00:27:00,799
let's continue to the attacks

762
00:27:00,799 --> 00:27:03,840
first attack be a malicious client

763
00:27:03,840 --> 00:27:05,600
and i already mentioned earlier in the

764
00:27:05,600 --> 00:27:06,880
sample case

765
00:27:06,880 --> 00:27:10,159
summal protects against this by defaults

766
00:27:10,159 --> 00:27:12,799
so of course oauth is going to protect

767
00:27:12,799 --> 00:27:14,559
against this as well right

768
00:27:14,559 --> 00:27:15,840
no wrong

769
00:27:15,840 --> 00:27:17,919
there is no protection whatsoever

770
00:27:17,919 --> 00:27:19,600
presence in of

771
00:27:19,600 --> 00:27:22,880
against malicious clients oauth doesn't

772
00:27:22,880 --> 00:27:24,960
offer any protection against clients

773
00:27:24,960 --> 00:27:29,360
that forward the token to other clients

774
00:27:29,360 --> 00:27:31,120
and that's actually by design

775
00:27:31,120 --> 00:27:33,279
because like i started off is not an

776
00:27:33,279 --> 00:27:35,039
authentication protocol or as an

777
00:27:35,039 --> 00:27:36,880
authorization protocol you can for

778
00:27:36,880 --> 00:27:39,039
example authorize a user to share his

779
00:27:39,039 --> 00:27:41,919
profile and if you authorize to that to

780
00:27:41,919 --> 00:27:43,520
one client

781
00:27:43,520 --> 00:27:45,360
it wouldn't be weird for that client to

782
00:27:45,360 --> 00:27:47,600
also pass that authorization on to other

783
00:27:47,600 --> 00:27:49,679
applications after all they could also

784
00:27:49,679 --> 00:27:51,919
directly share the content of the

785
00:27:51,919 --> 00:27:53,360
um

786
00:27:53,360 --> 00:27:56,080
the content of the profile

787
00:27:56,080 --> 00:27:59,679
so important to remember in oauth

788
00:27:59,679 --> 00:28:02,640
no no protection whatsoever against

789
00:28:02,640 --> 00:28:06,840
clients that forward tokens

790
00:28:16,640 --> 00:28:17,600
so

791
00:28:17,600 --> 00:28:19,600
there is a solution for that fortunately

792
00:28:19,600 --> 00:28:22,159
and that solution is open id connect so

793
00:28:22,159 --> 00:28:24,240
open id connect is a small extension

794
00:28:24,240 --> 00:28:28,880
built on top of oauth and jwt

795
00:28:28,880 --> 00:28:31,840
json web tokens

796
00:28:32,559 --> 00:28:34,159
and it looks like this and it's actually

797
00:28:34,159 --> 00:28:36,799
very simple extension to or off

798
00:28:36,799 --> 00:28:38,320
because what we have here is we have

799
00:28:38,320 --> 00:28:40,000
here an id token

800
00:28:40,000 --> 00:28:42,159
this one is added to the access token

801
00:28:42,159 --> 00:28:44,720
grant and this is actually jwt so this

802
00:28:44,720 --> 00:28:46,480
is a science

803
00:28:46,480 --> 00:28:48,480
message generated by the authorization

804
00:28:48,480 --> 00:28:49,520
server

805
00:28:49,520 --> 00:28:52,720
that contains importantly the audience

806
00:28:52,720 --> 00:28:54,240
and what i mean with the audience is the

807
00:28:54,240 --> 00:28:55,840
client that the message is being used

808
00:28:55,840 --> 00:28:57,440
for it also contains some other

809
00:28:57,440 --> 00:28:59,039
information including the user's

810
00:28:59,039 --> 00:29:00,480
identity

811
00:29:00,480 --> 00:29:02,799
and because we're adding the audience

812
00:29:02,799 --> 00:29:04,559
now

813
00:29:04,559 --> 00:29:06,320
the audience is sent to the or the

814
00:29:06,320 --> 00:29:08,159
message is sent to the clients

815
00:29:08,159 --> 00:29:10,640
and the client can not long go forward

816
00:29:10,640 --> 00:29:13,600
or of course he can try to forward it

817
00:29:13,600 --> 00:29:16,159
but a good client would check that he's

818
00:29:16,159 --> 00:29:18,559
not the audience and reject the message

819
00:29:18,559 --> 00:29:20,080
of course as a security specialist

820
00:29:20,080 --> 00:29:21,200
something we should always still check

821
00:29:21,200 --> 00:29:23,279
for if this check actually happens

822
00:29:23,279 --> 00:29:24,640
but

823
00:29:24,640 --> 00:29:27,279
open id connect is intended to be used

824
00:29:27,279 --> 00:29:31,760
for authorizing for authentication

825
00:29:32,480 --> 00:29:34,480
so

826
00:29:34,480 --> 00:29:35,760
um

827
00:29:35,760 --> 00:29:37,200
something i already briefly showed you

828
00:29:37,200 --> 00:29:39,039
is that if you have an offload or should

829
00:29:39,039 --> 00:29:40,880
normally be a screen image actually

830
00:29:40,880 --> 00:29:42,720
authorize the application

831
00:29:42,720 --> 00:29:44,000
to get

832
00:29:44,000 --> 00:29:47,360
access to certain data or to log in

833
00:29:47,360 --> 00:29:49,440
some applications or some flow skip that

834
00:29:49,440 --> 00:29:50,399
step

835
00:29:50,399 --> 00:29:52,159
which is nice for us as security testers

836
00:29:52,159 --> 00:29:54,159
or as hackers because it means that we

837
00:29:54,159 --> 00:29:56,399
can make any clients

838
00:29:56,399 --> 00:29:58,720
have the user login to us and obtain the

839
00:29:58,720 --> 00:30:01,919
identity of any clients

840
00:30:02,399 --> 00:30:04,159
sorry as a client we can as a client we

841
00:30:04,159 --> 00:30:08,720
can make any user login to us

842
00:30:08,720 --> 00:30:10,490
under some conditions of course

843
00:30:10,490 --> 00:30:11,919
[Music]

844
00:30:11,919 --> 00:30:13,760
so therefore we have this permission

845
00:30:13,760 --> 00:30:15,440
view

846
00:30:15,440 --> 00:30:16,960
something else if they are so smart

847
00:30:16,960 --> 00:30:17,840
enough

848
00:30:17,840 --> 00:30:19,760
to actually have this check don't give

849
00:30:19,760 --> 00:30:22,159
up yet there's something we can do we

850
00:30:22,159 --> 00:30:24,640
can try to do csrf on this button and

851
00:30:24,640 --> 00:30:26,559
see if that works because that's also

852
00:30:26,559 --> 00:30:30,000
fun and it accomplishes the same

853
00:30:33,039 --> 00:30:34,080
then

854
00:30:34,080 --> 00:30:36,640
login consent request rotary

855
00:30:36,640 --> 00:30:38,320
this is something that we saw in summal

856
00:30:38,320 --> 00:30:40,240
as well

857
00:30:40,240 --> 00:30:41,760
and we saw that saml has protection

858
00:30:41,760 --> 00:30:42,880
against this

859
00:30:42,880 --> 00:30:46,000
and open id connect off it's the same in

860
00:30:46,000 --> 00:30:48,840
this case also offers protection against

861
00:30:48,840 --> 00:30:52,000
this it's also something that's

862
00:30:52,000 --> 00:30:54,960
implemented wrong incredibly often

863
00:30:54,960 --> 00:30:56,880
we very often see that people just do

864
00:30:56,880 --> 00:30:58,399
not bother to actually implement this

865
00:30:58,399 --> 00:31:00,320
check which is very nice especially

866
00:31:00,320 --> 00:31:02,080
again if you have the functionality to

867
00:31:02,080 --> 00:31:04,880
connect new accounts to our accounts

868
00:31:04,880 --> 00:31:06,480
so how does it work

869
00:31:06,480 --> 00:31:09,120
the attacker

870
00:31:09,519 --> 00:31:11,919
goes to the authorization server

871
00:31:11,919 --> 00:31:14,960
logs in with his own credentials

872
00:31:14,960 --> 00:31:16,640
the authorization server responds with

873
00:31:16,640 --> 00:31:18,720
the code authorization code grants now

874
00:31:18,720 --> 00:31:20,960
we have a code grant for our accounts

875
00:31:20,960 --> 00:31:23,919
and we pass that as a csrf attack we

876
00:31:23,919 --> 00:31:26,399
pass that authorization code grant link

877
00:31:26,399 --> 00:31:28,399
to the clients so we send the link to

878
00:31:28,399 --> 00:31:30,159
the client and hope that the client will

879
00:31:30,159 --> 00:31:32,960
click on that link

880
00:31:32,960 --> 00:31:35,919
and then we are being used we are logged

881
00:31:35,919 --> 00:31:38,080
in into the client or yeah we are logged

882
00:31:38,080 --> 00:31:40,799
in into the client so the attacker

883
00:31:40,799 --> 00:31:42,720
is up at that point

884
00:31:42,720 --> 00:31:45,200
sorry at that point do you

885
00:31:45,200 --> 00:31:46,559
the user

886
00:31:46,559 --> 00:31:49,279
is logged in

887
00:31:50,159 --> 00:31:51,600
because it's just going to continue the

888
00:31:51,600 --> 00:31:53,600
same flow access token request

889
00:31:53,600 --> 00:31:56,159
followed by an access token grants

890
00:31:56,159 --> 00:31:57,840
like i said someone has protection

891
00:31:57,840 --> 00:31:59,840
mechanisms against that that's in

892
00:31:59,840 --> 00:32:02,640
response to value

893
00:32:02,640 --> 00:32:05,200
of also has protection against that and

894
00:32:05,200 --> 00:32:07,919
that's done by means of a random state

895
00:32:07,919 --> 00:32:10,080
that's added to the user authorization

896
00:32:10,080 --> 00:32:12,559
request

897
00:32:12,799 --> 00:32:14,880
so what's important is that the client

898
00:32:14,880 --> 00:32:17,279
when it receives an authorization code

899
00:32:17,279 --> 00:32:18,240
grants

900
00:32:18,240 --> 00:32:21,120
that it always verifies the state

901
00:32:21,120 --> 00:32:24,080
variable in that request with the

902
00:32:24,080 --> 00:32:26,080
with the state that is stored in the

903
00:32:26,080 --> 00:32:29,080
session

904
00:32:30,399 --> 00:32:31,519
then

905
00:32:31,519 --> 00:32:34,240
next attack

906
00:32:34,240 --> 00:32:35,679
redirect

907
00:32:35,679 --> 00:32:38,480
tokens back to us

908
00:32:38,480 --> 00:32:42,640
in this case we have a link we have an

909
00:32:42,640 --> 00:32:44,320
author we have an authorization server

910
00:32:44,320 --> 00:32:46,159
where we can log into

911
00:32:46,159 --> 00:32:47,760
and remember this one contains a

912
00:32:47,760 --> 00:32:49,679
redirect uri

913
00:32:49,679 --> 00:32:52,159
normally this points back to the

914
00:32:52,159 --> 00:32:54,960
normal this points back to the clients

915
00:32:54,960 --> 00:32:58,640
but we can also try to change this link

916
00:32:58,640 --> 00:32:59,600
and

917
00:32:59,600 --> 00:33:01,360
try to change this link so that it

918
00:33:01,360 --> 00:33:03,919
redirects to the attacker so we can pass

919
00:33:03,919 --> 00:33:05,360
this to an

920
00:33:05,360 --> 00:33:08,000
um we can pass this to the authorization

921
00:33:08,000 --> 00:33:10,480
server

922
00:33:10,480 --> 00:33:13,039
hope that we actually receive

923
00:33:13,039 --> 00:33:15,679
a redirect that redirects the code that

924
00:33:15,679 --> 00:33:17,679
we need to log in back to us as an

925
00:33:17,679 --> 00:33:20,159
attacker

926
00:33:20,320 --> 00:33:21,600
you can even make it a bit more

927
00:33:21,600 --> 00:33:23,279
complicated

928
00:33:23,279 --> 00:33:25,519
and that's what this guy actually did

929
00:33:25,519 --> 00:33:28,159
this guy succeeded in um

930
00:33:28,159 --> 00:33:29,919
attacking github

931
00:33:29,919 --> 00:33:31,679
a couple of years back and the way he

932
00:33:31,679 --> 00:33:33,200
did it was by

933
00:33:33,200 --> 00:33:35,760
past reversal so he tried first to enter

934
00:33:35,760 --> 00:33:37,360
his own

935
00:33:37,360 --> 00:33:39,600
attacker domain into redirect uri that

936
00:33:39,600 --> 00:33:41,039
didn't work because there was a

937
00:33:41,039 --> 00:33:43,519
requirement that the redirect uri

938
00:33:43,519 --> 00:33:46,320
started with gist.github.com

939
00:33:46,320 --> 00:33:48,240
github callback

940
00:33:48,240 --> 00:33:50,640
what he did was he did past reversal he

941
00:33:50,640 --> 00:33:52,720
went up a couple of directives

942
00:33:52,720 --> 00:33:54,159
and then moved to his own our home

943
00:33:54,159 --> 00:33:55,679
directory because we remember we at

944
00:33:55,679 --> 00:33:57,200
giz.github.com

945
00:33:57,200 --> 00:33:58,200
and

946
00:33:58,200 --> 00:34:00,000
guest.github.com you can place your own

947
00:34:00,000 --> 00:34:01,600
content

948
00:34:01,600 --> 00:34:03,279
what happened was that the tokens were

949
00:34:03,279 --> 00:34:05,200
indeed redirected to his own home

950
00:34:05,200 --> 00:34:08,320
directory at github

951
00:34:08,399 --> 00:34:11,839
so redirect uri is very tricky

952
00:34:11,839 --> 00:34:13,679
best way to implement that is probably

953
00:34:13,679 --> 00:34:15,359
make sure that you have

954
00:34:15,359 --> 00:34:17,440
the exact

955
00:34:17,440 --> 00:34:19,520
that you have the exact

956
00:34:19,520 --> 00:34:21,440
same string

957
00:34:21,440 --> 00:34:23,119
like you should probably define your own

958
00:34:23,119 --> 00:34:25,199
string define one particular string

959
00:34:25,199 --> 00:34:26,480
that's the only string that's being

960
00:34:26,480 --> 00:34:27,440
accepted

961
00:34:27,440 --> 00:34:29,359
that would probably the most secure way

962
00:34:29,359 --> 00:34:32,319
to accomplish this

963
00:34:33,839 --> 00:34:35,679
then an extension

964
00:34:35,679 --> 00:34:38,960
quite late a relatively new extension to

965
00:34:38,960 --> 00:34:42,320
open id connect and oauth is called pixy

966
00:34:42,320 --> 00:34:44,000
and what pixi does is this is an

967
00:34:44,000 --> 00:34:45,679
extension that prevents

968
00:34:45,679 --> 00:34:47,760
leaked authorization codes from being

969
00:34:47,760 --> 00:34:48,960
useful

970
00:34:48,960 --> 00:34:51,599
why do we need that especially on mobile

971
00:34:51,599 --> 00:34:53,760
applications we often see some problems

972
00:34:53,760 --> 00:34:54,960
there's basically two problems with

973
00:34:54,960 --> 00:34:56,960
mobile applications first of all they

974
00:34:56,960 --> 00:34:58,720
don't have a backend so they don't have

975
00:34:58,720 --> 00:35:01,520
a secure place to store

976
00:35:01,520 --> 00:35:03,520
their own client secrets

977
00:35:03,520 --> 00:35:05,839
and second of all redirecting back to a

978
00:35:05,839 --> 00:35:08,320
mobile application is very tricky

979
00:35:08,320 --> 00:35:11,119
in many instances it's possible to

980
00:35:11,119 --> 00:35:13,520
install your own mobile application as

981
00:35:13,520 --> 00:35:14,960
an attacker so there's a malicious

982
00:35:14,960 --> 00:35:17,280
application that

983
00:35:17,280 --> 00:35:19,839
registers the url through which the user

984
00:35:19,839 --> 00:35:22,400
is being redirected and then at that

985
00:35:22,400 --> 00:35:24,880
that way the attacker can intercept

986
00:35:24,880 --> 00:35:27,040
malicious codes

987
00:35:27,040 --> 00:35:28,839
so that's the reason for

988
00:35:28,839 --> 00:35:32,560
pixie make a way or design a way that

989
00:35:32,560 --> 00:35:34,480
prevents authorization cards from being

990
00:35:34,480 --> 00:35:36,880
useful

991
00:35:36,880 --> 00:35:38,480
and what does it actually offer more

992
00:35:38,480 --> 00:35:41,040
precisely

993
00:35:42,000 --> 00:35:44,400
if there is a man in the middle attack

994
00:35:44,400 --> 00:35:47,119
on the authorization request

995
00:35:47,119 --> 00:35:48,640
then we are still secure you can prove

996
00:35:48,640 --> 00:35:51,440
that even if an attacker is able to read

997
00:35:51,440 --> 00:35:52,400
the

998
00:35:52,400 --> 00:35:55,599
authorization request

999
00:35:55,760 --> 00:35:58,960
then there's still no attack possible

1000
00:35:58,960 --> 00:36:01,839
and the clay or the guarantee for the

1001
00:36:01,839 --> 00:36:03,440
authorization code grants so the

1002
00:36:03,440 --> 00:36:06,320
response to that is even stronger

1003
00:36:06,320 --> 00:36:07,520
an

1004
00:36:07,520 --> 00:36:09,440
attacker that intercepts the code or

1005
00:36:09,440 --> 00:36:11,200
even an application attacker that can

1006
00:36:11,200 --> 00:36:13,280
modify the codes

1007
00:36:13,280 --> 00:36:15,200
will still not be able to look into the

1008
00:36:15,200 --> 00:36:17,200
user's accounts

1009
00:36:17,200 --> 00:36:19,760
so what does pixi look like

1010
00:36:19,760 --> 00:36:22,800
we start with generating a code verifier

1011
00:36:22,800 --> 00:36:24,720
that's just a random string and we

1012
00:36:24,720 --> 00:36:28,000
calculate the 256

1013
00:36:28,000 --> 00:36:29,440
hash of that

1014
00:36:29,440 --> 00:36:31,119
and that will be the code challenge and

1015
00:36:31,119 --> 00:36:32,640
this code challenge we pass along with

1016
00:36:32,640 --> 00:36:35,920
the user authorization request

1017
00:36:35,920 --> 00:36:38,160
and

1018
00:36:39,599 --> 00:36:41,520
at the moment that that actually submits

1019
00:36:41,520 --> 00:36:44,480
the access token request

1020
00:36:44,480 --> 00:36:47,280
we include the code verifier

1021
00:36:47,280 --> 00:36:49,119
and this code verifier that's the

1022
00:36:49,119 --> 00:36:51,359
original string

1023
00:36:51,359 --> 00:36:53,599
is also sent to the authorization server

1024
00:36:53,599 --> 00:36:55,280
the authorization server can now compare

1025
00:36:55,280 --> 00:36:56,240
the two

1026
00:36:56,240 --> 00:36:57,839
and can compare

1027
00:36:57,839 --> 00:37:00,078
that

1028
00:37:01,200 --> 00:37:02,960
basically you can check that this indeed

1029
00:37:02,960 --> 00:37:03,760
the

1030
00:37:03,760 --> 00:37:05,680
chat 2.56

1031
00:37:05,680 --> 00:37:07,839
hash

1032
00:37:07,839 --> 00:37:10,240
once again the reason this is often done

1033
00:37:10,240 --> 00:37:13,040
or sometimes done is this offers extra

1034
00:37:13,040 --> 00:37:15,520
guarantee against

1035
00:37:15,520 --> 00:37:18,000
authorization codes that get leaked

1036
00:37:18,000 --> 00:37:20,079
what can we do as a pen tester

1037
00:37:20,079 --> 00:37:21,599
if you see this definitely check that

1038
00:37:21,599 --> 00:37:23,920
this code verifier actually is checked

1039
00:37:23,920 --> 00:37:25,280
because of course

1040
00:37:25,280 --> 00:37:26,560
i'm quite sure there will be many

1041
00:37:26,560 --> 00:37:27,680
instances i don't think i've ever

1042
00:37:27,680 --> 00:37:29,680
spotted any practice but i'm quite sure

1043
00:37:29,680 --> 00:37:31,920
there's many instances where people have

1044
00:37:31,920 --> 00:37:34,960
forgotten about this check

1045
00:37:35,280 --> 00:37:37,839
so to summarize

1046
00:37:37,839 --> 00:37:40,000
again a lot of different vulnerabilities

1047
00:37:40,000 --> 00:37:41,839
in openid connect

1048
00:37:41,839 --> 00:37:43,520
what can you do as an attacker you can

1049
00:37:43,520 --> 00:37:46,079
try to be a malicious client

1050
00:37:46,079 --> 00:37:47,920
you can try to bypass the permission of

1051
00:37:47,920 --> 00:37:49,680
the user

1052
00:37:49,680 --> 00:37:53,200
you can try to execute log in csrf

1053
00:37:53,200 --> 00:37:55,440
you can try to redirect tokens back to

1054
00:37:55,440 --> 00:37:59,040
ssd attacker using the redirect uri

1055
00:37:59,040 --> 00:38:02,720
you can check pixie verification

1056
00:38:03,280 --> 00:38:06,400
so basically the conclusion is

1057
00:38:06,400 --> 00:38:08,400
single sign-on is very nice because it

1058
00:38:08,400 --> 00:38:11,280
really does provide a lot of advantages

1059
00:38:11,280 --> 00:38:14,960
but it is also very tricky to get right

1060
00:38:14,960 --> 00:38:16,880
it doesn't really matter if you use saml

1061
00:38:16,880 --> 00:38:19,599
or open idconnect there's many small

1062
00:38:19,599 --> 00:38:21,280
tricky things that if you forget to

1063
00:38:21,280 --> 00:38:23,280
implement it correctly

1064
00:38:23,280 --> 00:38:25,599
you have big problems such as the

1065
00:38:25,599 --> 00:38:27,440
attacker being able to login on the

1066
00:38:27,440 --> 00:38:29,680
account of arbitrary users

1067
00:38:29,680 --> 00:38:30,480
so

1068
00:38:30,480 --> 00:38:32,480
i think a general recommendation this

1069
00:38:32,480 --> 00:38:34,480
applies to a lot of security stuff in

1070
00:38:34,480 --> 00:38:36,480
general but i think to single cent on

1071
00:38:36,480 --> 00:38:38,720
protocols in particular please do not

1072
00:38:38,720 --> 00:38:40,640
build your own implementation

1073
00:38:40,640 --> 00:38:42,880
what we see at our customers

1074
00:38:42,880 --> 00:38:44,400
if we see your vulnerability we often

1075
00:38:44,400 --> 00:38:45,599
have a little chat with the developer

1076
00:38:45,599 --> 00:38:47,040
hey what guy have you guys done how come

1077
00:38:47,040 --> 00:38:48,640
you actually implemented implemented

1078
00:38:48,640 --> 00:38:49,920
this like this

1079
00:38:49,920 --> 00:38:51,920
and very often in that case we see that

1080
00:38:51,920 --> 00:38:53,920
they just built their own implementation

1081
00:38:53,920 --> 00:38:55,680
with two or three lines that just check

1082
00:38:55,680 --> 00:38:58,320
the necessary stuff but don't actually

1083
00:38:58,320 --> 00:39:00,480
check any security

1084
00:39:00,480 --> 00:39:02,000
and don't actually implement any of the

1085
00:39:02,000 --> 00:39:05,119
security requirements so

1086
00:39:05,119 --> 00:39:07,520
please do not build this yourself if

1087
00:39:07,520 --> 00:39:09,520
you're going to use single cell

1088
00:39:09,520 --> 00:39:11,680
use an x use an

1089
00:39:11,680 --> 00:39:13,760
existing implementation and both on the

1090
00:39:13,760 --> 00:39:15,839
side of the identity provider there's

1091
00:39:15,839 --> 00:39:16,800
many good

1092
00:39:16,800 --> 00:39:18,480
open source products out of there i

1093
00:39:18,480 --> 00:39:20,880
believe key cloak is quite good

1094
00:39:20,880 --> 00:39:23,680
and also on the side of the application

1095
00:39:23,680 --> 00:39:24,880
that's actually

1096
00:39:24,880 --> 00:39:27,760
receiving the message that's

1097
00:39:27,760 --> 00:39:30,880
coming from the single sample provider

1098
00:39:30,880 --> 00:39:32,960
also on that side don't think it's just

1099
00:39:32,960 --> 00:39:35,200
two lines of codes i can do this myself

1100
00:39:35,200 --> 00:39:36,640
please use something that your library

1101
00:39:36,640 --> 00:39:38,640
provides or uses some existing

1102
00:39:38,640 --> 00:39:40,640
well-known framework

1103
00:39:40,640 --> 00:39:42,800
and finally i think this is the most

1104
00:39:42,800 --> 00:39:44,240
important or this is one of the

1105
00:39:44,240 --> 00:39:45,520
important things

1106
00:39:45,520 --> 00:39:48,240
many many developers don't know that the

1107
00:39:48,240 --> 00:39:50,000
reason that you have single sign-on is

1108
00:39:50,000 --> 00:39:51,520
that you want to protect against

1109
00:39:51,520 --> 00:39:53,359
malicious clients

1110
00:39:53,359 --> 00:39:56,000
so in the entire process keep in mind

1111
00:39:56,000 --> 00:39:58,160
that the entire goal the entire reason

1112
00:39:58,160 --> 00:40:00,240
you're using protocols like that is that

1113
00:40:00,240 --> 00:40:02,720
you want to stay secure even if one of

1114
00:40:02,720 --> 00:40:05,760
the clients gets compromised

1115
00:40:05,760 --> 00:40:07,359
all right that's what i wanted to tell

1116
00:40:07,359 --> 00:40:09,200
about singles and on

1117
00:40:09,200 --> 00:40:10,920
i'm curious if there's any questions

1118
00:40:10,920 --> 00:40:16,340
[Applause]

1119
00:40:20,480 --> 00:40:21,520
thank you

1120
00:40:21,520 --> 00:40:22,960
any questions please walk to the front

1121
00:40:22,960 --> 00:40:24,880
and need people know already how it goes

1122
00:40:24,880 --> 00:40:27,200
so the first question go ahead

1123
00:40:27,200 --> 00:40:28,000
hey

1124
00:40:28,000 --> 00:40:30,400
a question about pixie and why it's

1125
00:40:30,400 --> 00:40:31,920
actually helpful

1126
00:40:31,920 --> 00:40:33,280
if a client can't assure the

1127
00:40:33,280 --> 00:40:34,319
confidentiality it's a little bit

1128
00:40:34,319 --> 00:40:35,599
difficult to understand also because of

1129
00:40:35,599 --> 00:40:38,800
the music from the outside

1130
00:40:38,800 --> 00:40:40,079
i can i'll

1131
00:40:40,079 --> 00:40:42,000
do my best

1132
00:40:42,000 --> 00:40:43,119
if a client can't assure the

1133
00:40:43,119 --> 00:40:45,280
confidentiality of an authorization code

1134
00:40:45,280 --> 00:40:47,200
grant what makes it able to assure the

1135
00:40:47,200 --> 00:40:49,040
confidentiality of a code verifier

1136
00:40:49,040 --> 00:40:50,560
secret from your description it sounds

1137
00:40:50,560 --> 00:40:52,560
like these are both just static secrets

1138
00:40:52,560 --> 00:40:54,800
right so you're talking about pixee

1139
00:40:54,800 --> 00:40:57,200
rides

1140
00:40:57,599 --> 00:40:59,680
can you repeat the question once more

1141
00:40:59,680 --> 00:41:00,880
yeah so

1142
00:41:00,880 --> 00:41:02,240
in the

1143
00:41:02,240 --> 00:41:03,920
before pixie

1144
00:41:03,920 --> 00:41:05,839
we have a

1145
00:41:05,839 --> 00:41:07,920
authorization code grant that we receive

1146
00:41:07,920 --> 00:41:09,680
back and need to protect the

1147
00:41:09,680 --> 00:41:11,839
confidentiality of that grant for the

1148
00:41:11,839 --> 00:41:13,119
duration of the lifetime of your

1149
00:41:13,119 --> 00:41:14,960
application

1150
00:41:14,960 --> 00:41:17,359
and that's just some static secret that

1151
00:41:17,359 --> 00:41:18,400
we store

1152
00:41:18,400 --> 00:41:20,800
and here we're adding another static

1153
00:41:20,800 --> 00:41:23,760
secret that we store

1154
00:41:24,079 --> 00:41:25,200
and it seems like we would need to

1155
00:41:25,200 --> 00:41:26,880
protect that in the same way so how does

1156
00:41:26,880 --> 00:41:28,319
this actually help

1157
00:41:28,319 --> 00:41:30,880
and okay can you repeat what the tech

1158
00:41:30,880 --> 00:41:32,160
scenario is you're trying to protect

1159
00:41:32,160 --> 00:41:33,280
against

1160
00:41:33,280 --> 00:41:35,599
well i guess i'm i guess i don't see

1161
00:41:35,599 --> 00:41:37,440
what attack scenario pixie is trying to

1162
00:41:37,440 --> 00:41:38,400
protect yeah

1163
00:41:38,400 --> 00:41:39,760
all right so i understand your question

1164
00:41:39,760 --> 00:41:42,160
so the attack scenario is the case in

1165
00:41:42,160 --> 00:41:43,920
which so basically at this point in the

1166
00:41:43,920 --> 00:41:45,920
protocol

1167
00:41:45,920 --> 00:41:48,560
we have an authorization code and we

1168
00:41:48,560 --> 00:41:50,560
need to get this back to the user agents

1169
00:41:50,560 --> 00:41:53,200
somehow and in mobile applications

1170
00:41:53,200 --> 00:41:56,240
we have um

1171
00:41:56,480 --> 00:41:58,720
mobile applications we have

1172
00:41:58,720 --> 00:42:00,319
difficulties getting this back to the

1173
00:42:00,319 --> 00:42:02,240
correct user agents so there is quite a

1174
00:42:02,240 --> 00:42:04,560
risk if you send this code back that

1175
00:42:04,560 --> 00:42:06,560
this lands up at the ends up at a

1176
00:42:06,560 --> 00:42:08,160
malicious you at the malicious user

1177
00:42:08,160 --> 00:42:10,720
agent for example a wrong

1178
00:42:10,720 --> 00:42:12,959
wrong

1179
00:42:13,440 --> 00:42:14,880
for example an

1180
00:42:14,880 --> 00:42:17,359
application installed by the attacker

1181
00:42:17,359 --> 00:42:20,480
and what pixie protects against now is

1182
00:42:20,480 --> 00:42:22,720
even if the attacker

1183
00:42:22,720 --> 00:42:24,960
intercepts this code at this point it

1184
00:42:24,960 --> 00:42:27,599
still will not be able to

1185
00:42:27,599 --> 00:42:29,280
continue with the flow because it does

1186
00:42:29,280 --> 00:42:31,280
not know the code verifier

1187
00:42:31,280 --> 00:42:33,839
because the code verifier is a shah hash

1188
00:42:33,839 --> 00:42:35,599
of the code challenge so the attacker

1189
00:42:35,599 --> 00:42:37,040
will

1190
00:42:37,040 --> 00:42:38,720
will know the code challenge but it will

1191
00:42:38,720 --> 00:42:40,240
not know the code verifier so it will

1192
00:42:40,240 --> 00:42:42,319
not be able to go on with the protocol

1193
00:42:42,319 --> 00:42:45,200
after the third step i see so it's more

1194
00:42:45,200 --> 00:42:46,000
about

1195
00:42:46,000 --> 00:42:47,280
uh

1196
00:42:47,280 --> 00:42:48,960
concerns about confidentiality of the

1197
00:42:48,960 --> 00:42:50,480
link between the user agent and the auth

1198
00:42:50,480 --> 00:42:52,160
server and in both cases we're assuming

1199
00:42:52,160 --> 00:42:53,839
the client to be fully trusted

1200
00:42:53,839 --> 00:42:57,359
that's correct yes okay thank you

1201
00:42:57,680 --> 00:42:59,920
thank you thank you for the question any

1202
00:42:59,920 --> 00:43:01,680
more questions yeah i see one coming up

1203
00:43:01,680 --> 00:43:03,280
from the back from the signal i think

1204
00:43:03,280 --> 00:43:06,240
yeah yeah thank you for watching online

1205
00:43:06,240 --> 00:43:08,160
yeah so there was action written

1206
00:43:08,160 --> 00:43:10,240
matching decline id or client secret

1207
00:43:10,240 --> 00:43:12,079
against the id for which the token was

1208
00:43:12,079 --> 00:43:14,240
issued prevent both the relay and the

1209
00:43:14,240 --> 00:43:16,960
lock-in csrf attack which is something

1210
00:43:16,960 --> 00:43:19,200
only the off server

1211
00:43:19,200 --> 00:43:20,880
that means identity provider would have

1212
00:43:20,880 --> 00:43:23,119
to do

1213
00:43:23,119 --> 00:43:24,400
i'm afraid i'm going to have to ask you

1214
00:43:24,400 --> 00:43:25,599
again to repeat the question because

1215
00:43:25,599 --> 00:43:26,720
these are quite technical questions

1216
00:43:26,720 --> 00:43:30,480
which i need to hear twice okay

1217
00:43:30,480 --> 00:43:32,480
wouldn't matching the client id or

1218
00:43:32,480 --> 00:43:34,800
client secret against the id for which

1219
00:43:34,800 --> 00:43:37,119
the token was issued prevent both the

1220
00:43:37,119 --> 00:43:40,480
relay and the login csrf attack which is

1221
00:43:40,480 --> 00:43:42,800
something only the oauth server identity

1222
00:43:42,800 --> 00:43:45,839
provider would have to do

1223
00:43:47,119 --> 00:43:50,079
i don't think so this kind of things are

1224
00:43:50,079 --> 00:43:51,680
always really tricky so if i say yes you

1225
00:43:51,680 --> 00:43:53,359
can do this for sure i'm sure someone's

1226
00:43:53,359 --> 00:43:54,800
going to implement this and end up

1227
00:43:54,800 --> 00:43:56,720
quickly i don't think it's

1228
00:43:56,720 --> 00:43:58,000
going to work

1229
00:43:58,000 --> 00:43:59,599
because probably there's still a message

1230
00:43:59,599 --> 00:44:01,280
that you're going to be able to send to

1231
00:44:01,280 --> 00:44:03,839
the clients i think

1232
00:44:03,839 --> 00:44:05,280
off the top of my head that you still

1233
00:44:05,280 --> 00:44:06,640
will be able to

1234
00:44:06,640 --> 00:44:10,560
send the same message back to the client

1235
00:44:11,839 --> 00:44:13,359
because the attacker is still going to

1236
00:44:13,359 --> 00:44:16,640
know these um

1237
00:44:16,720 --> 00:44:18,400
tokens i think but this is probably

1238
00:44:18,400 --> 00:44:20,240
something i would need to write out

1239
00:44:20,240 --> 00:44:21,839
right feel free to if you're really

1240
00:44:21,839 --> 00:44:23,440
interested feel free to

1241
00:44:23,440 --> 00:44:24,960
drop me and drop me an email and then i

1242
00:44:24,960 --> 00:44:26,240
can think a little bit longer about it

1243
00:44:26,240 --> 00:44:27,520
but probably it's probably it's not

1244
00:44:27,520 --> 00:44:29,760
going to work the way you're described

1245
00:44:29,760 --> 00:44:31,119
yeah great because for the people here

1246
00:44:31,119 --> 00:44:33,040
around me they can visit you afterwards

1247
00:44:33,040 --> 00:44:36,480
but uh your email address would then

1248
00:44:36,480 --> 00:44:39,440
bits on the first flights oh wow hello

1249
00:44:39,440 --> 00:44:41,440
thank you nice rotation yeah well thank

1250
00:44:41,440 --> 00:44:42,400
you

1251
00:44:42,400 --> 00:44:45,440
any final question

1252
00:44:47,200 --> 00:44:48,800
no

1253
00:44:48,800 --> 00:44:49,920
yeah there were quite some tough

1254
00:44:49,920 --> 00:44:52,079
questions i i agree that it's difficult

1255
00:44:52,079 --> 00:44:54,319
to top those as really in general for

1256
00:44:54,319 --> 00:44:55,680
security protocols it's always really

1257
00:44:55,680 --> 00:44:57,520
too difficult really difficult to say i

1258
00:44:57,520 --> 00:44:59,359
changed a tiny thing is it still secure

1259
00:44:59,359 --> 00:45:01,280
or not this is really the question you

1260
00:45:01,280 --> 00:45:03,599
really cannot give an answer to strange

1261
00:45:03,599 --> 00:45:05,119
well if you have more questions feel

1262
00:45:05,119 --> 00:45:07,440
free to ask matais but first let me give

1263
00:45:07,440 --> 00:45:09,839
him a very big hand thank you very much

1264
00:45:09,839 --> 00:45:13,319
all right thanks

1265
00:45:24,160 --> 00:45:26,240
you

