1
00:00:06,160 --> 00:00:07,880
my name is you can pop

2
00:00:07,880 --> 00:00:11,130
on during

3
00:00:11,130 --> 00:00:13,540
earlier talk there was mention about

4
00:00:13,540 --> 00:00:17,680
um that there aren't really that many

5
00:00:17,680 --> 00:00:21,150
solutions for like you know actually

6
00:00:21,150 --> 00:00:25,110
protecting data or that %uh month on
that doesn't it true

7
00:00:25,110 --> 00:00:28,310
um that protecting data stuff is in the
you know

8
00:00:28,310 --> 00:00:32,099
doesn't receive that much attention now
would like to get your attention on

9
00:00:32,099 --> 00:00:33,290
something that mean

10
00:00:33,290 --> 00:00:36,880
help protect data for now um it's about
protecting

11
00:00:36,880 --> 00:00:40,770
HTTP session data so you have

12
00:00:40,770 --> 00:00:44,020
sums web server some application
internet UFE

13
00:00:44,020 --> 00:00:48,200
hardened the system it said roe um
ordered the application

14
00:00:48,200 --> 00:00:52,180
um users connect to the web server um

15
00:00:52,180 --> 00:00:56,240
the application logic takes here
whatever your data is purses that goes

16
00:00:56,240 --> 00:00:56,820
in here

17
00:00:56,820 --> 00:01:00,440
and session date is usually stored in
another database

18
00:01:00,440 --> 00:01:04,129
like men cash you know whatever
technology you choose to employ

19
00:01:04,129 --> 00:01:07,409
and this talk is about protecting to
stay down here

20
00:01:07,409 --> 00:01:10,689
not the persistent data in the database
but the session data

21
00:01:10,689 --> 00:01:17,689
so um what you have is on web
application use cookies to maintain

22
00:01:18,450 --> 00:01:18,920
state

23
00:01:18,920 --> 00:01:24,240
so you have maybe like a um for PHP like
a p2p session ID

24
00:01:24,240 --> 00:01:27,450
and is the ideas and with every request

25
00:01:27,450 --> 00:01:30,659
so when the users logged in based on
this session

26
00:01:30,659 --> 00:01:34,200
ID the server knows which users so

27
00:01:34,200 --> 00:01:38,920
um okay so this picture supposed to show
on the

28
00:01:38,920 --> 00:01:42,440
left inside the GF I'll several web
clients brothers

29
00:01:42,440 --> 00:01:47,380
each has their own session um the
session ID gets transported to the web

30
00:01:47,380 --> 00:01:47,950
server

31
00:01:47,950 --> 00:01:51,330
web server gives it to the applications
over the application server

32
00:01:51,330 --> 00:01:55,470
looks in that session database looks ups
by some cave

33
00:01:55,470 --> 00:02:00,380
value so session ID a looks up in the
key column fine straight session ID in

34
00:02:00,380 --> 00:02:00,909
fines

35
00:02:00,909 --> 00:02:04,330
the session data so here for session a

36
00:02:04,330 --> 00:02:09,519
user the problem with this is that
someone with access to this

37
00:02:09,519 --> 00:02:14,040
session database they can just a take
the session ID is here

38
00:02:14,040 --> 00:02:18,360
copy them into their own brother and
there are logged in as that user

39
00:02:18,360 --> 00:02:21,740
on be they can extract the state a

40
00:02:21,740 --> 00:02:24,890
which might be stuff that you would want
love

41
00:02:24,890 --> 00:02:28,849
want to be protected from whoever has
access to the system

42
00:02:28,849 --> 00:02:31,940
so assuming for this scenario you have

43
00:02:31,940 --> 00:02:37,060
maybe like a database Ackman hookah
administers the database but has no

44
00:02:37,060 --> 00:02:38,000
access to the

45
00:02:38,000 --> 00:02:42,660
web server that the application server
itself so

46
00:02:42,660 --> 00:02:46,290
what's SSDs secure session data storage
is 41

47
00:02:46,290 --> 00:02:49,770
it um provides for mechanism to secure
the

48
00:02:49,770 --> 00:02:53,209
the session ID so whenever the

49
00:02:53,209 --> 00:02:56,690
clients since the session ID the module

50
00:02:56,690 --> 00:03:00,470
hashes that a storage ideas drive

51
00:03:00,470 --> 00:03:03,480
in the storage ideas then used as the
Kiva

52
00:03:03,480 --> 00:03:06,580
like the key in the database so so on

53
00:03:06,580 --> 00:03:10,480
X is this database all they see is the
hash of the session ID they can no

54
00:03:10,480 --> 00:03:11,459
longer take

55
00:03:11,459 --> 00:03:14,480
decision idea to the database copied in
our browser

56
00:03:14,480 --> 00:03:18,440
so essentially they cannot impersonate
user they can still

57
00:03:18,440 --> 00:03:23,410
X is this data in this conflagration so
there's another option

58
00:03:23,410 --> 00:03:27,830
implemented or perceived which is
encryption of this data

59
00:03:27,830 --> 00:03:30,940
so essentially the session ID is

60
00:03:30,940 --> 00:03:34,190
the hashed that is then the encryption
key

61
00:03:34,190 --> 00:03:38,510
the date of stored in the storage
database thing encrypt using this key

62
00:03:38,510 --> 00:03:41,610
the encryption key itself is has to get
in

63
00:03:41,610 --> 00:03:45,550
and that is the a.m. hash that's used
for looking up the

64
00:03:45,550 --> 00:03:49,060
then the store cheopas so

65
00:03:49,060 --> 00:03:52,379
um their couple issues

66
00:03:52,379 --> 00:03:56,010
like one is encryption arm you have

67
00:03:56,010 --> 00:03:59,290
one key thats

68
00:03:59,290 --> 00:04:03,200
constant for the session but you have
multiple data States

69
00:04:03,200 --> 00:04:07,209
you might have a date a state user not
lobbying I'll user logged in

70
00:04:07,209 --> 00:04:11,000
a user submitted a credit card
information so all this

71
00:04:11,000 --> 00:04:15,680
um is them different data that needs to
be encrypt it using

72
00:04:15,680 --> 00:04:19,720
the same key and cryptographically you
need to um

73
00:04:19,720 --> 00:04:23,849
for you encryption things like this you
need to provide an initialization vector

74
00:04:23,849 --> 00:04:27,199
that makes each encryption run for each
state

75
00:04:27,199 --> 00:04:30,370
change a unique um so

76
00:04:30,370 --> 00:04:34,500
what you can do is you can just generate
this initialization vector

77
00:04:34,500 --> 00:04:37,919
a randomly of course then

78
00:04:37,919 --> 00:04:41,410
the server at some point will have
problems with the generating

79
00:04:41,410 --> 00:04:44,449
the random numbers the entropy pool

80
00:04:44,449 --> 00:04:48,510
girls probably going to be MT real quick
so what this

81
00:04:48,510 --> 00:04:51,540
concept those is it takes the arm

82
00:04:51,540 --> 00:04:55,889
session ID con cayton it's the current
timestamp and then has that

83
00:04:55,889 --> 00:04:59,120
and thats in unpredictable and unique um

84
00:04:59,120 --> 00:05:03,750
initialization vector thats then used
for encryption

85
00:05:03,750 --> 00:05:07,960
so what I implemented so so far as a PHP
extension

86
00:05:07,960 --> 00:05:11,300
on PHP for saving all this cookie data

87
00:05:11,300 --> 00:05:15,590
or the session data you have what's
called say fender

88
00:05:15,590 --> 00:05:19,150
and them so what you do to activate is
in PHP

89
00:05:19,150 --> 00:05:22,440
if you have the model is um say as is
the SSD

90
00:05:22,440 --> 00:05:26,020
say fender implemented in this model

91
00:05:26,020 --> 00:05:29,840
and then you need to tell as as the
years where to save the data to

92
00:05:29,840 --> 00:05:32,949
so like maybe a min cash maybe file
system whatever

93
00:05:32,949 --> 00:05:36,770
and then you have to configure options
don't you that actually controlled the

94
00:05:36,770 --> 00:05:40,699
mode and the algorithms that are used by
the model so

95
00:05:40,699 --> 00:05:44,020
um the hashing over them that

96
00:05:44,020 --> 00:05:47,590
makes it from a session ID to a storage
I D

97
00:05:47,590 --> 00:05:51,660
um is this morning this is the
encryption algorithm

98
00:05:51,660 --> 00:05:56,380
this is the hash that from derives from
the session ID encryption key if you use

99
00:05:56,380 --> 00:05:56,970
it

100
00:05:56,970 --> 00:06:01,530
and then you have another in are written
down here for you good

101
00:06:01,530 --> 00:06:05,460
the riveting Diyala the initialization
vector

102
00:06:05,460 --> 00:06:08,880
so I don't think there's a time for demo

103
00:06:08,880 --> 00:06:12,130
but what it does is essentially if you
look at it um

104
00:06:12,130 --> 00:06:15,360
and simple application PHP application

105
00:06:15,360 --> 00:06:19,199
with the session ID and the store's back
and being

106
00:06:19,199 --> 00:06:22,979
the filesystem then you have for example
file

107
00:06:22,979 --> 00:06:27,500
Varla PHP and then search underscoring
the exec session ID

108
00:06:27,500 --> 00:06:30,610
so this could be taking and them used to
be

109
00:06:30,610 --> 00:06:35,169
impersonate user and this is actually
the content of the session so we have

110
00:06:35,169 --> 00:06:36,759
available time which is top

111
00:06:36,759 --> 00:06:40,120
a type Integer at this value you have a
second value

112
00:06:40,120 --> 00:06:44,000
data type string length one value X

113
00:06:44,000 --> 00:06:49,070
so you see the study of decision and you
see the session itself that in itself

114
00:06:49,070 --> 00:06:52,100
then after activating the model

115
00:06:52,100 --> 00:06:55,690
this is the hash session ID no longer
have used for anyone

116
00:06:55,690 --> 00:06:59,169
except for the browser itself the user
of the application

117
00:06:59,169 --> 00:07:02,320
and is right here is the encrypted
session data

118
00:07:02,320 --> 00:07:05,470
so encrypt decision that I goes down to

119
00:07:05,470 --> 00:07:08,560
a.m. this equation sign

120
00:07:08,560 --> 00:07:13,100
so its base 64 encoded the hash mark

121
00:07:13,100 --> 00:07:17,419
um separates the encrypt the data from
the initialization vector

122
00:07:17,419 --> 00:07:21,509
that needs to be um employ twenty
crippling the data

123
00:07:21,509 --> 00:07:24,930
and every time the data changes um

124
00:07:24,930 --> 00:07:28,270
you know this file gets rewritten so
every time

125
00:07:28,270 --> 00:07:32,580
this value changes and this value the
initialization vector changes

126
00:07:32,580 --> 00:07:36,180
um PHP as is the essence

127
00:07:36,180 --> 00:07:40,330
stable audits nope security flaw also
found

128
00:07:40,330 --> 00:07:44,000
um Java SSDs for tom cat is work in
progress

129
00:07:44,000 --> 00:07:48,180
early work in progress and if anyone
wants to implement it for any other

130
00:07:48,180 --> 00:07:49,660
technology

131
00:07:49,660 --> 00:07:52,669
just look come talk to me

132
00:07:52,669 --> 00:07:53,000
on them

