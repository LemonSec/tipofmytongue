1
00:00:05,920 --> 00:00:06,920
so

2
00:00:06,920 --> 00:00:08,900
us talk before we go for another coffee

3
00:00:08,900 --> 00:00:10,850
break

4
00:00:10,850 --> 00:00:13,180
or not talk around the bush on

5
00:00:13,180 --> 00:00:16,290
horror flick thank you well

6
00:00:16,290 --> 00:00:21,400
good afternoon um

7
00:00:21,400 --> 00:00:24,439
well amor happy so many of you came here
um

8
00:00:24,439 --> 00:00:27,930
a merger talk abouts rather obscure
topic and

9
00:00:27,930 --> 00:00:31,689
unfortunately I'm not going to show
anything you on mostly going to talk

10
00:00:31,689 --> 00:00:32,200
about

11
00:00:32,200 --> 00:00:35,360
thinks that I have found useful but that

12
00:00:35,360 --> 00:00:39,040
whenever available in quite the former
need them um

13
00:00:39,040 --> 00:00:42,470
specifically all talk about Hebrew
translation tools under

14
00:00:42,470 --> 00:00:47,150
things that I would want to have that
nobody is both yet so

15
00:00:47,150 --> 00:00:51,130
um it is 2012 and looking back at the
last ten years or so

16
00:00:51,130 --> 00:00:54,320
we have made a lot of progress and
security um

17
00:00:54,320 --> 00:00:57,920
realistically meta-data attacks are
essentially did

18
00:00:57,920 --> 00:01:01,050
except in very rare circumstances um

19
00:01:01,050 --> 00:01:04,689
Sr ASLR and DEP on no longer than you
know

20
00:01:04,689 --> 00:01:08,390
they are normal meaning every modern
operating system has them

21
00:01:08,390 --> 00:01:12,869
unless the application vendor screws up
badly whatever application on talking

22
00:01:12,869 --> 00:01:16,270
can more or less be relied upon to have
a fully run myself a space

23
00:01:16,270 --> 00:01:19,549
um which means that if you want to

24
00:01:19,549 --> 00:01:23,929
to compromise a machine you are relying
on having information week to break is a

25
00:01:23,929 --> 00:01:26,350
bar or you're relying on something else

26
00:01:26,350 --> 00:01:30,090
and your arm oftentimes going to be
relying on

27
00:01:30,090 --> 00:01:33,350
fairly complicated application-specific
conditions

28
00:01:33,350 --> 00:01:37,659
which you'll have to manipulate a
complicated way which means you will be

29
00:01:37,659 --> 00:01:38,950
programming what I call

30
00:01:38,950 --> 00:01:43,590
we had machine so what is a weird
machine

31
00:01:43,590 --> 00:01:47,409
if you think about it an application in
the way that it runs

32
00:01:47,409 --> 00:01:51,280
defines a machine a state machine a
normal interaction with the application

33
00:01:51,280 --> 00:01:55,029
means to transition the secretary from
one for the transition to the next door

34
00:01:55,029 --> 00:01:56,319
from one state to the next

35
00:01:56,319 --> 00:02:01,079
say you sure he will come on soon SMTP
server while the transitions and state

36
00:02:01,079 --> 00:02:05,399
so the interesting thing is that once
the attack a corrupt memory

37
00:02:05,399 --> 00:02:09,450
this machine and his the weird States
state that should have never been there

38
00:02:09,450 --> 00:02:13,319
all the transitions are still intact so
the next time the attack is in Stata

39
00:02:13,319 --> 00:02:16,410
the transition will operate on corrupted

40
00:02:16,410 --> 00:02:19,490
date on which states and transform this
with machine

41
00:02:19,490 --> 00:02:23,120
into an even weirder machine um so

42
00:02:23,120 --> 00:02:26,570
what happens then is the first space of
possible states explodes

43
00:02:26,570 --> 00:02:30,310
and the attacker can essentially drive
the smith machine

44
00:02:30,310 --> 00:02:34,290
to the most absurd state possible which
normally for the attack remains

45
00:02:34,290 --> 00:02:38,500
executing coach chosen by the attacker
so

46
00:02:38,500 --> 00:02:41,590
exporting stuff the setting up
initializing

47
00:02:41,590 --> 00:02:45,690
and programming the weight machines that
arise from Emory CropScience

48
00:02:45,690 --> 00:02:51,350
so the witness or the difficulty about
programming with machines is that they

49
00:02:51,350 --> 00:02:51,740
are

50
00:02:51,740 --> 00:02:54,930
first of all application dependence
meaning well

51
00:02:54,930 --> 00:02:57,550
because the transitions are defined by
the application logic and the

52
00:02:57,550 --> 00:02:59,310
implementation of that application logic

53
00:02:59,310 --> 00:03:02,950
of course everything that I can do every
instruction is dependent on that

54
00:03:02,950 --> 00:03:03,610
application

55
00:03:03,610 --> 00:03:07,810
secondly the dependence on initial
states bankrupting the heap

56
00:03:07,810 --> 00:03:11,690
for example some what happens to my
problems after a very much depends on

57
00:03:11,690 --> 00:03:12,780
the initial he play out

58
00:03:12,780 --> 00:03:15,850
um this leads to the next problem

59
00:03:15,850 --> 00:03:19,280
these things are super difficult to
control arm

60
00:03:19,280 --> 00:03:22,970
well that I can it's a span of time
setting up unknown initial state or

61
00:03:22,970 --> 00:03:26,670
vaguely known initial states so that the
publication doesn't crush next time you

62
00:03:26,670 --> 00:03:27,370
tax with it

63
00:03:27,370 --> 00:03:32,250
I mean once I a nice example of for this
is any modern Windows operating system

64
00:03:32,250 --> 00:03:36,240
if a crop tee meta-data and then perform
a bad hip operation

65
00:03:36,240 --> 00:03:39,950
on that matter data because we're exit
because the Picatinny takes the heat has

66
00:03:39,950 --> 00:03:40,630
been cropped

67
00:03:40,630 --> 00:03:44,550
so need to make sure that such things
don't have and even

68
00:03:44,550 --> 00:03:48,070
if I try to do everything right as an
attack a normally this probabilistic

69
00:03:48,070 --> 00:03:48,760
risk

70
00:03:48,760 --> 00:03:52,510
of the machine just blowing up on my
feet and this is a

71
00:03:52,510 --> 00:03:55,990
re well thus arises from the fact that
you have

72
00:03:55,990 --> 00:03:59,910
unknown initial heap states because this
he has memory for heap

73
00:03:59,910 --> 00:04:03,940
is history depend if you want you never
know what state he was in when you

74
00:04:03,940 --> 00:04:05,100
started attacking the machine

75
00:04:05,100 --> 00:04:08,150
or usually you don't know secondly

76
00:04:08,150 --> 00:04:11,960
if you have a multi-threaded environment
and to a multi-core system

77
00:04:11,960 --> 00:04:15,810
you have built in non-deterministic key
patents on

78
00:04:15,810 --> 00:04:19,799
meaning one forgets preempted go through
for it starts operating on the heap

79
00:04:19,799 --> 00:04:24,229
I just gets all really messy so in order
to make

80
00:04:24,229 --> 00:04:28,920
the attack manageable for the attacker
the attack in it soon have very very

81
00:04:28,920 --> 00:04:30,330
fine-grained control

82
00:04:30,330 --> 00:04:33,560
over the heap arm

83
00:04:33,560 --> 00:04:37,710
and then once he achieves this you can
start building information leaks

84
00:04:37,710 --> 00:04:41,220
and a few nice examples of this I'm
there's

85
00:04:41,220 --> 00:04:44,830
way to build information leak once again
overflowed with ASCII string

86
00:04:44,830 --> 00:04:48,350
out of an existing buffer and you have a
Unicode string that you can read out to

87
00:04:48,350 --> 00:04:48,770
this

88
00:04:48,770 --> 00:04:52,340
the case in most most balls when because
your

89
00:04:52,340 --> 00:04:55,410
arm JavaScript things are going to be
unique code

90
00:04:55,410 --> 00:04:58,740
and if you have any ASCII string the
trick to leaking memory

91
00:04:58,740 --> 00:05:01,940
into your javascript into pure leaking
information from memory back into jobs

92
00:05:01,940 --> 00:05:03,090
good interpreter

93
00:05:03,090 --> 00:05:06,950
is that you make sure that you overflow
with your regular ASCII string

94
00:05:06,950 --> 00:05:10,400
which is time it's been ok signal bites
into

95
00:05:10,400 --> 00:05:13,889
existing Unicode string we just a minute
but to no buts

96
00:05:13,889 --> 00:05:17,200
so if you do then is you overwrite the
tuna bites with the last character if

97
00:05:17,200 --> 00:05:18,880
you ask ASCII string

98
00:05:18,880 --> 00:05:22,100
and the mall by the tone its mascot
character vs district

99
00:05:22,100 --> 00:05:25,180
so now you have unterminated the Unicode
string

100
00:05:25,180 --> 00:05:28,530
somebody tries to read the unico sorry
no to get a whole bunch of random data

101
00:05:28,530 --> 00:05:29,250
from behind it

102
00:05:29,250 --> 00:05:32,590
and discos points is and so forth and so
forth

103
00:05:32,590 --> 00:05:37,050
arm so this is a nice example how you
can take a regular overflow

104
00:05:37,050 --> 00:05:40,180
and building information leak out of it

105
00:05:40,180 --> 00:05:44,550
another popular trick Witcher happens to
be folklore which means you'll see it's

106
00:05:44,550 --> 00:05:48,040
in and run them exposed but nobody seems
to talk about it

107
00:05:48,040 --> 00:05:51,810
is summoning over the table points into
a free block

108
00:05:51,810 --> 00:05:55,940
what this means is Ivan a look at Brock
not get a free block

109
00:05:55,940 --> 00:06:00,460
and by overflow into the freaky block
and then asked location

110
00:06:00,460 --> 00:06:03,490
please generate a new object into the
free ebook

111
00:06:03,490 --> 00:06:07,880
a publication called operate on you on
an object and was a veto a pointer

112
00:06:07,880 --> 00:06:12,020
into the middle of the string that I've
useful overflowing

113
00:06:12,020 --> 00:06:15,620
so hurry that string of again I'm not
gonna be table point of an object called

114
00:06:15,620 --> 00:06:16,330
back

115
00:06:16,330 --> 00:06:20,110
and the beautiful point2 tells me where
the bay sundress of the module is with

116
00:06:20,110 --> 00:06:20,510
us or

117
00:06:20,510 --> 00:06:23,870
object originated from I'm

118
00:06:23,870 --> 00:06:26,740
now these are just two examples there's
literally millions of them because we're

119
00:06:26,740 --> 00:06:28,449
speaking about somebody

120
00:06:28,449 --> 00:06:32,550
programming the script with machine in a
way that it gives you back

121
00:06:32,550 --> 00:06:36,810
information that you want

122
00:06:36,810 --> 00:06:41,020
okay so controlling and programming the
play out

123
00:06:41,020 --> 00:06:44,790
is absolutely central for building new
sports these days

124
00:06:44,790 --> 00:06:50,260
its the central problem really that's
what gets on slide

125
00:06:50,260 --> 00:06:54,120
okay now the thing starts um

126
00:06:54,120 --> 00:06:57,540
well we need development tools for
programming with machine

127
00:06:57,540 --> 00:07:01,240
cause expectations with machine
programming witnessing programming is

128
00:07:01,240 --> 00:07:02,710
really hard

129
00:07:02,710 --> 00:07:07,690
arm I mean programming is hard already
we see that every day when things crush

130
00:07:07,690 --> 00:07:13,229
um programming a probabilistic
undocumented CPU with with instructions

131
00:07:13,229 --> 00:07:18,440
is that much harder um and we really
don't have decent development was at all

132
00:07:18,440 --> 00:07:21,690
weir's seriously under Tools every time
I mean

133
00:07:21,690 --> 00:07:25,590
realistically at the moment attack as a
solving this by burning themselves also

134
00:07:25,590 --> 00:07:27,030
burning themselves through the

135
00:07:27,030 --> 00:07:30,750
and for the awesome enthusiasm of film
youth so you'd spend six months on

136
00:07:30,750 --> 00:07:32,389
getting something to run

137
00:07:32,389 --> 00:07:35,280
a nude instead of trying to make them
smarter you just bashing your head

138
00:07:35,280 --> 00:07:37,479
against the problem until it eventually
works

139
00:07:37,479 --> 00:07:41,979
it's a I like to compare this to digging
trenches with chopsticks

140
00:07:41,979 --> 00:07:45,320
arm so this many

141
00:07:45,320 --> 00:07:48,699
many ideas on how you can build
development environments for 4 with

142
00:07:48,699 --> 00:07:49,780
machine programming

143
00:07:49,780 --> 00:07:52,760
the trouble is that most of them are you
the infeasible or at the border of

144
00:07:52,760 --> 00:07:53,400
what's a

145
00:07:53,400 --> 00:07:57,070
as possible in computer science so what
all restrict myself to you

146
00:07:57,070 --> 00:08:00,490
is let's just focus on something phat

147
00:08:00,490 --> 00:08:04,470
we know how to build and the just
requires engineering nothing

148
00:08:04,470 --> 00:08:07,720
no Fort if you want so

149
00:08:07,720 --> 00:08:11,520
I'll talk about what I want from a good
he personalization to

150
00:08:11,520 --> 00:08:14,910
and the only thing that would be
required for building such a thing

151
00:08:14,910 --> 00:08:19,419
will be engineering there would be very
little research required

152
00:08:19,419 --> 00:08:23,290
so the thing I'm coming back to is a
trickle he draws

153
00:08:23,290 --> 00:08:27,389
arm got a charter from course the I
built the first the

154
00:08:27,389 --> 00:08:31,110
visualize that I know of and I if

155
00:08:31,110 --> 00:08:34,990
vaguely remember having seen a prototype
as early as 2004

156
00:08:34,990 --> 00:08:39,479
and then publicly demonstrated at some
South American Conference and Mexico I

157
00:08:39,479 --> 00:08:41,310
think in 2006

158
00:08:41,310 --> 00:08:45,070
and than in 2007 that a stick in in
France

159
00:08:45,070 --> 00:08:48,839
and up to the states till the a
fantastic idea I don't think could have

160
00:08:48,839 --> 00:08:52,460
possibly finished and you decency to
expose in recent years without having

161
00:08:52,460 --> 00:08:54,120
had something like this

162
00:08:54,120 --> 00:08:57,270
on the idea behind this is is this by
the way

163
00:08:57,270 --> 00:09:01,020
aside directly stolen from his 2006
presentation

164
00:09:01,020 --> 00:09:04,480
you start drawing for the the heap as a
bunch of rectangles

165
00:09:04,480 --> 00:09:08,270
and on the y-axis you've got your outer
space

166
00:09:08,270 --> 00:09:12,040
and on the the x-axis you have time

167
00:09:12,040 --> 00:09:15,550
and when a book is okay so it's well

168
00:09:15,550 --> 00:09:18,570
Detroit when its fried

169
00:09:18,570 --> 00:09:22,339
ends and the

170
00:09:22,339 --> 00:09:26,550
it's really as a simple as this: on what
you get from such a tool to get a very

171
00:09:26,550 --> 00:09:28,770
very direct interest from the stunning

172
00:09:28,770 --> 00:09:33,880
of what is happening on my hip right now
so

173
00:09:33,880 --> 00:09:37,000
um Gus tool bag then consists of two
components:

174
00:09:37,000 --> 00:09:40,670
%uh there was some data collection by
setting debug break points on RT locate

175
00:09:40,670 --> 00:09:41,920
he put on Fri

176
00:09:41,920 --> 00:09:45,070
there are some 03 similarly preload
stuff on the rocks

177
00:09:45,070 --> 00:09:49,420
and there was no i'd a plugin that
service was the results with OpenGL

178
00:09:49,420 --> 00:09:53,360
and some a an attempt at rewriting and
piping which in scale

179
00:09:53,360 --> 00:09:56,490
will get through the the scaling office
late on

180
00:09:56,490 --> 00:09:59,860
arm I wasn't awesome tool sketch in the
sense that

181
00:09:59,860 --> 00:10:03,570
was good enough to be used in 102
situations

182
00:10:03,570 --> 00:10:07,399
I was good enough to get the idea home
but wasn't a tool in the sun spots

183
00:10:07,399 --> 00:10:10,520
you can just give it to somebody in a
work my

184
00:10:10,520 --> 00:10:13,800
I'm and the music thing about him draw
is that

185
00:10:13,800 --> 00:10:17,430
almost everybody that I know the price
seems Xbox points has built

186
00:10:17,430 --> 00:10:21,050
himself a ghetto version of the same to
again

187
00:10:21,050 --> 00:10:24,820
so by now I feel see nothing for five
different dream fermentation of the same

188
00:10:24,820 --> 00:10:25,660
to

189
00:10:25,660 --> 00:10:29,100
all of them are crap and all of them are
have just been billed to get the job

190
00:10:29,100 --> 00:10:30,080
done

191
00:10:30,080 --> 00:10:33,570
and nobody has a set down to reengineer
this into a proper

192
00:10:33,570 --> 00:10:37,529
proper thing so we did the same for
training starts for teaching he

193
00:10:37,529 --> 00:10:38,490
exportation

194
00:10:38,490 --> 00:10:41,910
we built crap remake of The

195
00:10:41,910 --> 00:10:44,930
from of to rush through arm

196
00:10:44,930 --> 00:10:48,459
its super messy I was just there to get
the job done

197
00:10:48,459 --> 00:10:52,270
and its is also very someone's
architecture it's a deal injection based

198
00:10:52,270 --> 00:10:56,520
a data collection and then job on open
journal visualization

199
00:10:56,520 --> 00:10:59,580
and some rights so

200
00:10:59,580 --> 00:11:03,050
but I'll briefly show its

201
00:11:03,050 --> 00:11:06,959
there's what looks like them arm we'll
play wrong and that with us a little bit

202
00:11:06,959 --> 00:11:07,430
more

203
00:11:07,430 --> 00:11:12,029
late on we see all these green blocks or
bring things here

204
00:11:12,029 --> 00:11:15,700
we can already see the performance
problems especially on a laptop with

205
00:11:15,700 --> 00:11:17,850
also fast graphics card

206
00:11:17,850 --> 00:11:23,899
and then we can see when we zoom in well
with this quite a few activity here

207
00:11:23,899 --> 00:11:27,370
a black box here mean are blocks that
have been

208
00:11:27,370 --> 00:11:30,670
allocate its and have been freed again
wears green blocks

209
00:11:30,670 --> 00:11:36,149
are still alive at the time of the STU
loading for the dump

210
00:11:36,149 --> 00:11:40,120
and Yahoo this allows me to

211
00:11:40,120 --> 00:11:43,790
skipper on for heap and he was big

212
00:11:43,790 --> 00:11:47,580
we'll talk about the actual scale of the
plate on

213
00:11:47,580 --> 00:11:52,100
and it's really slow his personal data
it's not this bad on workstation

214
00:11:52,100 --> 00:11:55,880
but it's still pretty bad okay

215
00:11:55,880 --> 00:11:59,320
so what I'll talk about now is

216
00:11:59,320 --> 00:12:03,589
if I was to get somebody to re implement
this what would need to be done

217
00:12:03,589 --> 00:12:07,290
or what what things would need to be
kept in mind when you re implement this

218
00:12:07,290 --> 00:12:10,779
and I there's a whole bunch of things to
keep in mind first of all

219
00:12:10,779 --> 00:12:14,010
you've got pretty ridiculous assuming
requirements

220
00:12:14,010 --> 00:12:18,230
um a large block of memory can easily
360 400 megabytes big

221
00:12:18,230 --> 00:12:22,839
or even more a and you will need to be
able to zoom between very large box in

222
00:12:22,839 --> 00:12:24,200
very small box because something

223
00:12:24,200 --> 00:12:28,000
as small as fault for bites will become
important to you

224
00:12:28,000 --> 00:12:31,820
so you need to have a zoo in between
$500 million and $4

225
00:12:31,820 --> 00:12:35,870
arm as a comparison earth is about 12
million meters in

226
00:12:35,870 --> 00:12:39,670
diameter I'm so the zoom level

227
00:12:39,670 --> 00:12:43,500
is the equivalent of going from thirty
times the size of burst onto for me to

228
00:12:43,500 --> 00:12:44,510
its

229
00:12:44,510 --> 00:12:47,940
um so a you have well

230
00:12:47,940 --> 00:12:51,250
Google Earth anybody I I don't know it's
a

231
00:12:51,250 --> 00:12:55,320
unit isn't a lot and a Press performance
issues

232
00:12:55,320 --> 00:12:58,940
the other thing that you need to be
aware of is gap skipping I'm this means

233
00:12:58,940 --> 00:12:59,320
that your

234
00:12:59,320 --> 00:13:03,140
outer space is really quite sparse
you've got a bunch of megabytes ok up on

235
00:13:03,140 --> 00:13:05,490
a Megabus will the effectivity is and
then you've got

236
00:13:05,490 --> 00:13:09,779
I mean we see this here we've got
activity here and we've got a huge gap

237
00:13:09,779 --> 00:13:11,350
in the middle

238
00:13:11,350 --> 00:13:15,200
and then we've got more to ethiopia and
this gets worse on 64 bits and

239
00:13:15,200 --> 00:13:18,990
a in in a situation where you've got
more he activity where you'll have

240
00:13:18,990 --> 00:13:22,529
hoffa gigabytes of nothing and then
stuff again and he needs

241
00:13:22,529 --> 00:13:25,970
to somehow have you you I display okayed
copper pots

242
00:13:25,970 --> 00:13:29,589
hears nothing and then it starts again
somewhere else

243
00:13:29,589 --> 00:13:33,529
arm the next thing that's surprisingly
important as arbitrary and independence

244
00:13:33,529 --> 00:13:36,040
scaling of you X&Y axis

245
00:13:36,040 --> 00:13:40,690
um organization is millions of bytes hi

246
00:13:40,690 --> 00:13:43,769
and in any EU decent on a decent and

247
00:13:43,769 --> 00:13:47,490
any realistic program is going to be
millions of cubans wide

248
00:13:47,490 --> 00:13:51,110
and oftentimes well we saw this he
writes I'm

249
00:13:51,110 --> 00:13:56,579
I consume into stuff again

250
00:13:56,579 --> 00:13:59,680
and by

251
00:13:59,680 --> 00:14:04,370
is all too can we and this these very
very brief blocks

252
00:14:04,370 --> 00:14:09,190
well located somewhere

253
00:14:09,190 --> 00:14:12,300
right so you see

254
00:14:12,300 --> 00:14:15,920
thats I've got very narrow block
sometimes

255
00:14:15,920 --> 00:14:19,390
and I need to be able to well understand
what's going on in the 0 blocks and be

256
00:14:19,390 --> 00:14:22,260
able to put a sequence officially on
what happens where

257
00:14:22,260 --> 00:14:25,980
even when they've only been allocated
for a very brief period as of time

258
00:14:25,980 --> 00:14:30,450
at the same time a box that's have been
around

259
00:14:30,450 --> 00:14:33,750
for a long while and you can see how I'm
squashing and stretching v

260
00:14:33,750 --> 00:14:36,899
are the visualization all the time so

261
00:14:36,899 --> 00:14:40,750
independence killing X&Y axis I'm other
things that you really really want

262
00:14:40,750 --> 00:14:43,550
meta information on click you want to be
able to click on a block and the 20

263
00:14:43,550 --> 00:14:44,800
should be able to tell you

264
00:14:44,800 --> 00:14:48,360
hey this book is size block was
allocated

265
00:14:48,360 --> 00:14:51,649
here and these are the other things I
know now

266
00:14:51,649 --> 00:14:55,500
in an ideal world what you can get a
stack trace for its allocation

267
00:14:55,500 --> 00:14:59,730
will get soon the the reason why we
conduct we do this later on because

268
00:14:59,730 --> 00:15:02,829
this performance issues that we really
need to be careful with

269
00:15:02,829 --> 00:15:06,279
and we want to have you on my a give us
the capability to search a highlight

270
00:15:06,279 --> 00:15:07,760
based on criteria

271
00:15:07,760 --> 00:15:11,269
I want to be able to say I hate can you
give me everything that was located and

272
00:15:11,269 --> 00:15:12,399
the Sadrists

273
00:15:12,399 --> 00:15:17,110
please find me these books can you give
me everything that has a particular size

274
00:15:17,110 --> 00:15:21,540
police fine with us um can you give me
anything that was allocated

275
00:15:21,540 --> 00:15:26,000
after this up what was allocated and is
of particular size and so forth

276
00:15:26,000 --> 00:15:29,290
I'm not something I would also be
awesome is

277
00:15:29,290 --> 00:15:33,399
am coloring by type let's assume for
second that if you collect a block

278
00:15:33,399 --> 00:15:38,079
are you free a block you writes the
first double word of the block

279
00:15:38,079 --> 00:15:41,660
along with all the other data to to the
phone

280
00:15:41,660 --> 00:15:45,600
which gives you the v2.2 of what was
just freed

281
00:15:45,600 --> 00:15:50,250
which retroactively gives you
essentially the type of individual box

282
00:15:50,250 --> 00:15:53,480
so I'm if you have Microsoft debugging
symbols you

283
00:15:53,480 --> 00:15:56,820
essentially have the ability to say not
give me everything

284
00:15:56,820 --> 00:15:59,850
in this people highlight me everything
in this eap that happens to be a DOM

285
00:15:59,850 --> 00:16:01,100
element

286
00:16:01,100 --> 00:16:05,720
very nice I'm Ivan we want horizontal
and vertical help online to see these

287
00:16:05,720 --> 00:16:07,850
red lines here everywhere

288
00:16:07,850 --> 00:16:11,470
I'm therefore events so you interact
with application

289
00:16:11,470 --> 00:16:14,700
going to be able to say okay if I load
CNN dot comment

290
00:16:14,700 --> 00:16:18,790
my brother not bother now this is the
red line when I click

291
00:16:18,790 --> 00:16:22,019
the load button and this is the red line
when the pages

292
00:16:22,019 --> 00:16:24,730
loaded so you can see through
interaction what happens on the heat

293
00:16:24,730 --> 00:16:25,790
when you do something

294
00:16:25,790 --> 00:16:29,370
the same thing you but will he want the
same thing horizontally as well because

295
00:16:29,370 --> 00:16:32,440
but so you find a crush because it was
off to for export isn't working properly

296
00:16:32,440 --> 00:16:35,639
Underwood referencing memory that isn't
there you want to be able to

297
00:16:35,639 --> 00:16:39,209
put a horizontal line in it and then
traceback to see what blocks were

298
00:16:39,209 --> 00:16:42,079
allocated previously at this address

299
00:16:42,079 --> 00:16:45,459
and all speed a speed is really an issue

300
00:16:45,459 --> 00:16:48,790
and I've got no no good solution for
this yet

301
00:16:48,790 --> 00:16:52,149
um you've seen all slowed is on this
laptop it gets marginally better with

302
00:16:52,149 --> 00:16:53,350
fast graphics card

303
00:16:53,350 --> 00:16:58,220
but it's not perfect and I recently had
the displeasure of working with the

304
00:16:58,220 --> 00:17:01,980
a popular anti-virus product for couple
days and trying to

305
00:17:01,980 --> 00:17:06,139
make sense of what it was doing on the
heap and other thing was doing

306
00:17:06,139 --> 00:17:11,569
about arm 30,000 people operations a
second in the background

307
00:17:11,569 --> 00:17:15,299
so like a within a couple seconds of
running the machine

308
00:17:15,299 --> 00:17:18,600
with the baby in the background I had a
gigabyte

309
00:17:18,600 --> 00:17:23,530
big heap loading file and millions and
millions of people vans

310
00:17:23,530 --> 00:17:28,299
and at that point the this solution of
drawing opened your rectangles

311
00:17:28,299 --> 00:17:31,500
a and just leaving to the graphics card
to scale its

312
00:17:31,500 --> 00:17:35,030
or two so much doesn't really work that
well another problem

313
00:17:35,030 --> 00:17:38,440
on running into a lot is in this
prototype I'm using

314
00:17:38,440 --> 00:17:42,600
a well OpenGL doubles as coordinates for
the rectangles directly

315
00:17:42,600 --> 00:17:46,650
and the address space is bigger than the
position of the doubles

316
00:17:46,650 --> 00:17:50,320
so sometimes you get Brooks jumper on
because offer floating-point

317
00:17:50,320 --> 00:17:53,809
sponding problems so bad idea arm

318
00:17:53,809 --> 00:17:56,720
this actually if somebody knows again
program on the spot be a problem to

319
00:17:56,720 --> 00:17:59,620
discuss with them it's possible that
some form of ray casting will you

320
00:17:59,620 --> 00:18:03,299
so she said the raid into your absorb
more of the heap and see whether it's a

321
00:18:03,299 --> 00:18:04,440
block

322
00:18:04,440 --> 00:18:07,690
might work pretty well rights

323
00:18:07,690 --> 00:18:11,750
now I've talked about what about spot
for problems in the IR

324
00:18:11,750 --> 00:18:15,230
and this what's up more from some data
collection

325
00:18:15,230 --> 00:18:18,960
and one of the biggest problem so if
there's a collection on heap is

326
00:18:18,960 --> 00:18:22,549
have to minimize threats cue um

327
00:18:22,549 --> 00:18:25,929
now what do I mean with minimizing
Stanford School

328
00:18:25,929 --> 00:18:30,049
um we want to debug expose that we want
to be able to use outside of a

329
00:18:30,049 --> 00:18:30,919
laboratory

330
00:18:30,919 --> 00:18:35,549
right we want to build something that is
actually capable of compromising machine

331
00:18:35,549 --> 00:18:39,480
now the trouble with this is plants
motif it he play out

332
00:18:39,480 --> 00:18:42,640
is extremely time-independent meaning
fight

333
00:18:42,640 --> 00:18:46,590
change the timing of the threads
drastically

334
00:18:46,590 --> 00:18:51,250
I gets very different he bailed which
might mean well use actually run into a

335
00:18:51,250 --> 00:18:54,390
Heisenberg problem I do you want to
measure something but you are not a lot

336
00:18:54,390 --> 00:18:55,780
actually influence at

337
00:18:55,780 --> 00:18:59,210
so um you you run into the problem but

338
00:18:59,210 --> 00:19:02,429
in an ideal world we would hope want to
have zero impact

339
00:19:02,429 --> 00:19:06,160
of the presence of your tool on the
plane out and practice that is not

340
00:19:06,160 --> 00:19:06,850
achievable

341
00:19:06,850 --> 00:19:10,370
just plain and simple it's not a
possible um

342
00:19:10,370 --> 00:19:14,620
was because it was bound to eat up some
cycles moving data from A to B

343
00:19:14,620 --> 00:19:18,160
I'm but we absolutely need to do is we
need to minimize

344
00:19:18,160 --> 00:19:22,520
um timing skew when we're dealing with
modified applications which means if we

345
00:19:22,520 --> 00:19:24,530
want to make this useful for brotha

346
00:19:24,530 --> 00:19:28,280
we need to have a minimum timing school
possible

347
00:19:28,280 --> 00:19:32,640
and the this does need for speed dictate
some of the other design decisions

348
00:19:32,640 --> 00:19:33,470
because

349
00:19:33,470 --> 00:19:36,780
also tells us that we can't do a lot of
things that's like

350
00:19:36,780 --> 00:19:39,940
tells us you can't have these nice
things because if you have these nice

351
00:19:39,940 --> 00:19:40,530
things

352
00:19:40,530 --> 00:19:45,120
you'll get a nice things for heap that
will never occur in practice

353
00:19:45,120 --> 00:19:48,919
so arm things that we can to we can use
debugging

354
00:19:48,919 --> 00:19:52,320
this was the main reason why the initial
like there was initial prototype

355
00:19:52,320 --> 00:19:55,790
you to be rewritten false was are

356
00:19:55,790 --> 00:19:58,880
they collect data using debug break
point something

357
00:19:58,880 --> 00:20:02,059
and so for them it's super heavy that's
a context which publication

358
00:20:02,059 --> 00:20:05,559
first of all your application is no
longer usable but secondly the layout of

359
00:20:05,559 --> 00:20:08,080
the heap has very little resemblance to
the layout of the heap

360
00:20:08,080 --> 00:20:11,510
in in reality um so

361
00:20:11,510 --> 00:20:14,700
you need to stay in the same outer space
to minimize context switches

362
00:20:14,700 --> 00:20:19,169
and you need to buffer data in memory as
much as possible arm

363
00:20:19,169 --> 00:20:23,000
yeah while you collecting it we run it
interesting conflicts with this

364
00:20:23,000 --> 00:20:26,110
arm with the other design goals by the
way

365
00:20:26,110 --> 00:20:29,770
arm cause we also want is no heap
interaction

366
00:20:29,770 --> 00:20:33,750
meaning you need to inject it's one to
the other as address space or into the

367
00:20:33,750 --> 00:20:34,710
other process

368
00:20:34,710 --> 00:20:38,419
but ideally it shouldn't take up any
other space in that process

369
00:20:38,419 --> 00:20:41,850
rights cozaar if your arm

370
00:20:41,850 --> 00:20:44,960
doing any form of keeping traction
yourself from your tool

371
00:20:44,960 --> 00:20:48,630
like allocating memory you are now
influencing people out

372
00:20:48,630 --> 00:20:52,169
bad idea conjures STL without radio
network hate us

373
00:20:52,169 --> 00:20:56,840
um you cannot call any operating system
API is that okay memory

374
00:20:56,840 --> 00:21:00,010
on which means you can use win32 pipes
and so forth

375
00:21:00,010 --> 00:21:05,480
so you need to be super minimal just put
stuff into memory buffer somewhere

376
00:21:05,480 --> 00:21:08,500
some we are quicker to this problem in a
bit

377
00:21:08,500 --> 00:21:11,580
and then dump a two-disc eventually now

378
00:21:11,580 --> 00:21:14,980
the next problem you're running into is
minimal after a space interaction

379
00:21:14,980 --> 00:21:17,980
you 20 should ideally not take up
address space

380
00:21:17,980 --> 00:21:21,890
in the process that you're in now this
is I don't know how to do this

381
00:21:21,890 --> 00:21:26,980
really perhaps you can map it into
conagra space modifier edges like a

382
00:21:26,980 --> 00:21:30,130
paging descriptors to make sure that you
can right then execute their

383
00:21:30,130 --> 00:21:35,190
I don't know arm in my my situation all
it took for dirty hack

384
00:21:35,190 --> 00:21:39,640
of just making sure that much was mapped
at a place is very unlikely to be mapped

385
00:21:39,640 --> 00:21:42,220
for regular human factors which is
usually right

386
00:21:42,220 --> 00:21:45,789
below the main execute a book I'm the
reason why the operating system is very

387
00:21:45,789 --> 00:21:47,440
hesitant to give out the memory

388
00:21:47,440 --> 00:21:52,299
or to use the memory right below the
main executed before he publications is

389
00:21:52,299 --> 00:21:55,690
but can't grow that section I could
control the memory area

390
00:21:55,690 --> 00:21:58,820
anywhere meaningful so um

391
00:21:58,820 --> 00:22:02,520
but ideally he wants to have as the
address space

392
00:22:02,520 --> 00:22:05,679
arm for to take up as possible

393
00:22:05,679 --> 00:22:09,049
I'm the next thing you need to do is
exporting date on request

394
00:22:09,049 --> 00:22:12,500
which means well I said that we have to
buffer memory but what good is buffing a

395
00:22:12,500 --> 00:22:15,010
memory fiber for the last million he'd
even some memory

396
00:22:15,010 --> 00:22:18,520
and then my you user interface I can see
what happens

397
00:22:18,520 --> 00:22:21,730
for the last nine hundred thousand
applications so

398
00:22:21,730 --> 00:22:25,390
on each other way to send a signal to
that to the process

399
00:22:25,390 --> 00:22:28,390
to give me that data or perhaps I need
to buffer the data in

400
00:22:28,390 --> 00:22:32,600
shared memory section con letra space I
don't know

401
00:22:32,600 --> 00:22:37,380
something like this um next question is
what data do I need to export

402
00:22:37,380 --> 00:22:40,580
of course I need to export allocations
and freeze

403
00:22:40,580 --> 00:22:44,910
arm the size of the allocation the
address of the allocated block

404
00:22:44,910 --> 00:22:49,110
ideally the address of the caller arm
perhaps if you're

405
00:22:49,110 --> 00:22:52,250
doing free the first double word of the
free block

406
00:22:52,250 --> 00:22:56,640
I'm but then if you start exporting much
more you run into hard disk split

407
00:22:56,640 --> 00:23:00,280
space problems because well
thirty-seconds running a big AV gives

408
00:23:00,280 --> 00:23:02,130
you talk about a blog

409
00:23:02,130 --> 00:23:06,260
from or you run into timing school
issues so you have to be really careful

410
00:23:06,260 --> 00:23:10,419
about how much data you take and how
much you export

411
00:23:10,419 --> 00:23:13,690
I the next thing um heaps in heaps

412
00:23:13,690 --> 00:23:17,340
a now in reality very few applications
use the

413
00:23:17,340 --> 00:23:20,910
operating system keep straight away
application-specific heaps of occasion

414
00:23:20,910 --> 00:23:22,100
specific keep cashing

415
00:23:22,100 --> 00:23:25,150
and so forth is really common so

416
00:23:25,150 --> 00:23:28,929
we oftentimes see is using up vacation
allocates large approx

417
00:23:28,929 --> 00:23:32,770
using operating system okay to that have
application-specific keep implementation

418
00:23:32,770 --> 00:23:36,400
ok it's smaller blocks within these
larger box

419
00:23:36,400 --> 00:23:39,830
um and in essence wants to have a data
collector

420
00:23:39,830 --> 00:23:44,150
we can tell okay a at this and this
module at this address

421
00:23:44,150 --> 00:23:48,160
vas application internal mock in this
morning at this address the issue

422
00:23:48,160 --> 00:23:50,020
application internal free

423
00:23:50,020 --> 00:23:54,429
and register will yea X here youporn and
feature a lock

424
00:23:54,429 --> 00:23:57,590
contains the size of your location and
so forth

425
00:23:57,590 --> 00:24:01,240
and this gets a lil bit messy because he
simply need to spur have some sort of

426
00:24:01,240 --> 00:24:04,330
description language where you can tell
the data collector

427
00:24:04,330 --> 00:24:08,120
viz how it works arm I haven't really

428
00:24:08,120 --> 00:24:11,409
founder a nice and pretty solution to
those either

429
00:24:11,409 --> 00:24:15,450
but the that stuff would be really
useful or important right cause

430
00:24:15,450 --> 00:24:19,010
but saying I want to use the keep
looking for example on

431
00:24:19,010 --> 00:24:23,559
but say Internet Explorer Internet
Explorer view some weird caching scheme

432
00:24:23,559 --> 00:24:27,590
where are they what apparently allocate
memory

433
00:24:27,590 --> 00:24:30,360
from the operating system in march on
something to show dollars in cash and

434
00:24:30,360 --> 00:24:31,460
garbage collected and

435
00:24:31,460 --> 00:24:34,940
to something weird I'm if i cant easily
adapt my

436
00:24:34,940 --> 00:24:40,460
my data collector to collect data in in
to explore its not that useful

437
00:24:40,460 --> 00:24:44,570
this a an example of it heap in a heap
now this is a memorandum from

438
00:24:44,570 --> 00:24:48,309
or a memory trace from Adobe Reader and
where you can see or hear

439
00:24:48,309 --> 00:24:51,750
like the Big Green Book is an allocation
with Adobe Reader

440
00:24:51,750 --> 00:24:55,890
did from the operating system so it
called not like Visual Studio malloc

441
00:24:55,890 --> 00:24:59,280
or whatever to look at a large block and
then

442
00:24:59,280 --> 00:25:03,669
arm adobe has internal heap call for
beep beep

443
00:25:03,669 --> 00:25:06,809
and the small box that you see here

444
00:25:06,809 --> 00:25:10,059
are allocations but have been done by
the PPP

445
00:25:10,059 --> 00:25:13,590
in sight of the bigger block allocated
by the operating system

446
00:25:13,590 --> 00:25:16,610
so

447
00:25:16,610 --> 00:25:22,630
right um Gautama one would want us the
ability to get call backs on certain

448
00:25:22,630 --> 00:25:23,289
events

449
00:25:23,289 --> 00:25:27,650
so the 20th time that you hit a
particular point in the program

450
00:25:27,650 --> 00:25:32,590
please issue an extra event like putting
extra he be vented to you looking

451
00:25:32,590 --> 00:25:36,840
the reason for this again is to be able
to see in the UI date on

452
00:25:36,840 --> 00:25:40,760
okay this is when I started downloading
the file when I started passing the

453
00:25:40,760 --> 00:25:41,559
final

454
00:25:41,559 --> 00:25:47,549
and this when I am departing the file on
this is what happens in between

455
00:25:47,549 --> 00:25:50,700
following trial process there's a spot
to Cali annoying or days

456
00:25:50,700 --> 00:25:54,799
in Adobe and chrome and process
generally cause this pawn shop was all

457
00:25:54,799 --> 00:25:56,539
the time for a new tops

458
00:25:56,539 --> 00:26:00,030
or for some boxing and so forth and

459
00:26:00,030 --> 00:26:03,390
there's no elegant solution ready to
make sure that if you have

460
00:26:03,390 --> 00:26:08,080
una a data collection 2011 process and
significant response another process

461
00:26:08,080 --> 00:26:09,530
that you follow this

462
00:26:09,530 --> 00:26:12,760
this thing around. so from same thing

463
00:26:12,760 --> 00:26:16,080
well on you on Linux or Unix is much
nicer

464
00:26:16,080 --> 00:26:21,020
cause early preload can be done globally
so you preload a so for every process

465
00:26:21,020 --> 00:26:24,730
so if a fork your usual migrate along
with it

466
00:26:24,730 --> 00:26:27,860
well are yet

467
00:26:27,860 --> 00:26:32,110
cross-platform cross operating system
are you need data collector for Windows

468
00:26:32,110 --> 00:26:33,140
Linux

469
00:26:33,140 --> 00:26:36,409
OS X 32 and 64 bits

470
00:26:36,409 --> 00:26:39,820
right arm yeah this

471
00:26:39,820 --> 00:26:43,030
the last thing that would be useful but
I don't think anybody's ever going to

472
00:26:43,030 --> 00:26:43,500
build this

473
00:26:43,500 --> 00:26:47,490
is I'm extra code that gives you much
information about his

474
00:26:47,490 --> 00:26:51,260
the operating system beep so for example

475
00:26:51,260 --> 00:26:54,419
on the windows if you for you block most
of the time

476
00:26:54,419 --> 00:26:57,570
load like be put into some sort of
realist

477
00:26:57,570 --> 00:27:01,020
which means I mean heaps almost all
heaps operating

478
00:27:01,020 --> 00:27:04,280
on a first out um well

479
00:27:04,280 --> 00:27:08,870
last out first in low fee paradigm right
the last book that you free

480
00:27:08,870 --> 00:27:11,990
is the first before you're going to get
back so arm

481
00:27:11,990 --> 00:27:16,169
would be nice to be able to see the box
that would be put into freely saw

482
00:27:16,169 --> 00:27:19,080
are put in for this and have them
highlighted but don't think anybody will

483
00:27:19,080 --> 00:27:22,250
ever do this because it requires taking
apart the pigmentation

484
00:27:22,250 --> 00:27:26,100
and then writing a lot of operating
system specific guy he called fort

485
00:27:26,100 --> 00:27:29,730
I'm not even sure why the effort for
doing this would be justified

486
00:27:29,730 --> 00:27:32,909
um so after all this talk what

487
00:27:32,909 --> 00:27:36,820
a I'm going to do is ongoing to show
little bits what's our

488
00:27:36,820 --> 00:27:40,270
my call this will be used in practice
we're going to do and how

489
00:27:40,270 --> 00:27:43,690
one would get insights about what
happens on the heat through this

490
00:27:43,690 --> 00:27:47,159
so we're going to do is we're going to
look at um and

491
00:27:47,159 --> 00:27:52,200
a simple PDF file that's urges
JavaScript to spam stuff on the heap

492
00:27:52,200 --> 00:27:55,470
and that the and free stuff on the began

493
00:27:55,470 --> 00:27:58,120
and then we're going to look at what
happens then we're going to compare what

494
00:27:58,120 --> 00:27:59,600
happens on Windows XP

495
00:27:59,600 --> 00:28:02,940
which does not use the low fragmentation
he under what comes under

496
00:28:02,940 --> 00:28:09,940
under Windows seven so

497
00:28:10,270 --> 00:28:17,270
I'll launch Adobe

498
00:28:17,549 --> 00:28:21,559
okay adobe has been launched now

499
00:28:21,559 --> 00:28:26,450
wheat over keep you on your

500
00:28:26,450 --> 00:28:29,590
this is my heat no after adobe has been
launched and

501
00:28:29,590 --> 00:28:33,100
nothing has been loaded yet okay

502
00:28:33,100 --> 00:28:40,100
now i load a file

503
00:28:41,500 --> 00:28:46,789
if I got slowed its

504
00:28:46,789 --> 00:28:50,370
and JavaScript starts executing and
gives me an alert box

505
00:28:50,370 --> 00:28:54,140
I'm about to do something so

506
00:28:54,140 --> 00:28:58,620
I look at my he began I read all the
input file

507
00:28:58,620 --> 00:29:02,330
you can all this dialogue

508
00:29:02,330 --> 00:29:06,230
and ignore the focus issues okay

509
00:29:06,230 --> 00:29:10,960
so the red line here was the point where
we reloaded the old file

510
00:29:10,960 --> 00:29:16,029
so everything that happened before was
before we started loading the file

511
00:29:16,029 --> 00:29:18,960
everything that happened after is stuff
that happened after we started loading

512
00:29:18,960 --> 00:29:19,950
file

513
00:29:19,950 --> 00:29:23,169
right now the file is hanging on the
message box

514
00:29:23,169 --> 00:29:27,220
so I'll

515
00:29:27,220 --> 00:29:30,799
well it tells me it's about to start
spamming 2000 block so for

516
00:29:30,799 --> 00:29:33,799
size too fond of my heap I tell it

517
00:29:33,799 --> 00:29:39,100
go ahead tells me it's done putting date
on my hip

518
00:29:39,100 --> 00:29:46,100
so I have a look

519
00:29:46,529 --> 00:29:51,070
focus issues

520
00:29:51,070 --> 00:29:55,220
okay

521
00:29:55,220 --> 00:29:56,650
VMware

522
00:29:56,650 --> 00:29:57,480
okay

523
00:29:57,480 --> 00:30:00,620
so no final notes

524
00:30:00,620 --> 00:30:05,529
filo tits we click OK then we see here

525
00:30:05,529 --> 00:30:09,759
memory being allocated

526
00:30:09,759 --> 00:30:12,909
and up on the top right we also see
memory being allocated

527
00:30:12,909 --> 00:30:16,309
and this is the stuff that we just spend
on sleep

528
00:30:16,309 --> 00:30:20,440
and the resume in much further

529
00:30:20,440 --> 00:30:25,620
right so he's on the books that we've
just created and they are sizes

530
00:30:25,620 --> 00:30:28,830
176 E which is a little bit more than

531
00:30:28,830 --> 00:30:32,740
a well which is essential to get if you
spam a 2002

532
00:30:32,740 --> 00:30:36,169
a character JavaScript string on offs

533
00:30:36,169 --> 00:30:40,259
2000 by car to string to reap and we've
got many of these

534
00:30:40,259 --> 00:30:44,120
right okay

535
00:30:44,120 --> 00:30:48,269
now

536
00:30:48,269 --> 00:30:51,279
traits a few more books on the heap

537
00:30:51,279 --> 00:30:55,350
on but see what happens from

538
00:30:55,350 --> 00:31:02,350
sorry for the confusion

539
00:31:02,559 --> 00:31:05,700
I'm song should

540
00:31:05,700 --> 00:31:11,559
just months this for a sec okay

541
00:31:11,559 --> 00:31:15,679
so file open

542
00:31:15,679 --> 00:31:19,299
first time we click the button first two
thousand blocks

543
00:31:19,299 --> 00:31:23,120
put on the heap 2000 more books put on
the heap with different size

544
00:31:23,120 --> 00:31:26,429
so we see how

545
00:31:26,429 --> 00:31:31,649
spraying stuff onto the bus is growing
stuff and

546
00:31:31,649 --> 00:31:34,830
known its try to see whether can
selectively free some of it

547
00:31:34,830 --> 00:31:38,519
so we're going to do now is in the
JavaScript code we're going

548
00:31:38,519 --> 00:31:41,960
a what we've done so far as we've
created the strings and kept a reference

549
00:31:41,960 --> 00:31:43,039
to eat while the strings

550
00:31:43,039 --> 00:31:47,409
and we've kept them in a javascript rate
so what all do know is all go through

551
00:31:47,409 --> 00:31:48,340
the javascript array

552
00:31:48,340 --> 00:31:52,809
and every second element of the array
are delete my car just erase the

553
00:31:52,809 --> 00:31:55,200
reference and then with the garbage
collector kid kicks in

554
00:31:55,200 --> 00:31:58,350
it should let go of every second block
and they should be freed again

555
00:31:58,350 --> 00:32:01,429
so I've done this

556
00:32:01,429 --> 00:32:08,429
on a reload and fight with the focus
issues

557
00:32:10,220 --> 00:32:14,889
okay alright

558
00:32:14,889 --> 00:32:19,159
now we see here that a bunch of blocks
that used to be green half-ton black

559
00:32:19,159 --> 00:32:23,240
like these books here that without
located on the first round offs

560
00:32:23,240 --> 00:32:26,539
offspring have turned black

561
00:32:26,539 --> 00:32:30,860
and if we see more we can very very
clearly see

562
00:32:30,860 --> 00:32:37,110
that

563
00:32:37,110 --> 00:32:41,380
can block you was released and fried so

564
00:32:41,380 --> 00:32:44,530
Jr we now have every second book free

565
00:32:44,530 --> 00:32:49,830
and we've crated gaps on the heap of a
particular size

566
00:32:49,830 --> 00:32:54,170
and this of course than useful for arm
arranging for he play out in the way

567
00:32:54,170 --> 00:32:55,120
that we need to

568
00:32:55,120 --> 00:32:58,850
to arrange it okay um me

569
00:32:58,850 --> 00:33:04,900
see for seconds all zoom in a little bit
more something that is interesting here

570
00:33:04,900 --> 00:33:09,520
by the way is and thus this is a a nice
example of why he exportation can be

571
00:33:09,520 --> 00:33:12,570
annoying um

572
00:33:12,570 --> 00:33:15,710
we see here that every couple offer

573
00:33:15,710 --> 00:33:19,110
allegations that we perform somebody not
us

574
00:33:19,110 --> 00:33:24,020
performs an individual location but a
slightly larger than we are located

575
00:33:24,020 --> 00:33:29,330
and then when the book its fried it gets
put into a free list somewhere

576
00:33:29,330 --> 00:33:33,290
and then we I look at the next block
that we allocate

577
00:33:33,290 --> 00:33:36,590
from the free list and the block

578
00:33:36,590 --> 00:33:40,260
is cut off my cut cut in the Middle East
actually and the small what goes into

579
00:33:40,260 --> 00:33:41,070
another free list

580
00:33:41,070 --> 00:33:45,429
but what this means is that the next
allocation after is in sequential

581
00:33:45,429 --> 00:33:50,190
right so what we see your is that's okay
sequential occasion sequential occasion

582
00:33:50,190 --> 00:33:51,240
sequential location

583
00:33:51,240 --> 00:33:55,049
and then sequential or sequential
location

584
00:33:55,049 --> 00:33:58,280
we had a location that we don't know
where it's coming from

585
00:33:58,280 --> 00:34:01,309
freeing of the allocation cutting off
the block

586
00:34:01,309 --> 00:34:04,470
our allocation now

587
00:34:04,470 --> 00:34:07,350
this is really annoying if you as an
attacker rely on exact placement of

588
00:34:07,350 --> 00:34:08,770
objects late on for overflow

589
00:34:08,770 --> 00:34:13,000
and this also explains why so many
exploits in the wild

590
00:34:13,000 --> 00:34:16,030
have a probabilistic failure rate of a
couple percent

591
00:34:16,030 --> 00:34:20,800
right because stuff like this can happen
but he plowed can be shifted

592
00:34:20,800 --> 00:34:23,800
a little bit and then you confuse and
you don't quite know why

593
00:34:23,800 --> 00:34:27,320
and having to like this is really
helpful forward

594
00:34:27,320 --> 00:34:31,550
debugging on reliability and such
exports I'm just seeing what's going on

595
00:34:31,550 --> 00:34:35,260
so perhaps we should do now is let's
have a look

596
00:34:35,260 --> 00:34:39,149
at the same thing in Windows 7 well
actually all have

597
00:34:39,149 --> 00:34:42,290
the garbage collection go through and
release all strings and then we'll

598
00:34:42,290 --> 00:34:45,960
have a look at what he looks like once
we're done

599
00:34:45,960 --> 00:34:52,960
and then we'll look at 107

600
00:34:56,960 --> 00:34:58,210
come on

601
00:34:58,210 --> 00:35:02,040
piece of crap ago

602
00:35:02,040 --> 00:35:07,690
all rights now we see all these

603
00:35:07,690 --> 00:35:11,150
black box up here the garbage collector
has

604
00:35:11,150 --> 00:35:14,510
start offering everything after Weaver

605
00:35:14,510 --> 00:35:18,240
go of it and the script was done running
aren't

606
00:35:18,240 --> 00:35:25,240
it's a very brief look at windows 7 and
how it deals with these things

607
00:35:39,440 --> 00:35:43,210
can

608
00:35:43,210 --> 00:35:44,180
well while it's booting

609
00:35:44,180 --> 00:35:49,200
are

610
00:35:49,200 --> 00:35:56,200
should be the No

611
00:36:04,400 --> 00:36:11,320
on K

612
00:36:11,320 --> 00:36:14,740
your laptop red thing sorry my boss is a

613
00:36:14,740 --> 00:36:21,740
acting up okay

614
00:36:22,980 --> 00:36:24,839
so

615
00:36:24,839 --> 00:36:31,839
let's do this again

616
00:36:55,400 --> 00:36:58,570
all rights we're now in Acrobat Reader
on 107

617
00:36:58,570 --> 00:37:05,570
arm its we start the same game we open
the heap dump again

618
00:37:07,240 --> 00:37:14,240
something is not quite right

619
00:37:21,850 --> 00:37:28,850
joy of demos

620
00:37:41,670 --> 00:37:43,640
mmm

621
00:37:43,640 --> 00:37:50,640
1 seconds

622
00:38:01,900 --> 00:38:08,900
okay let's try this again

623
00:38:18,210 --> 00:38:21,559
okay for some bizarre reason the
blogging

624
00:38:21,559 --> 00:38:24,930
is no failing on the 107 builds

625
00:38:24,930 --> 00:38:29,119
I told you that fur coats crop

626
00:38:29,119 --> 00:38:32,670
okay so

627
00:38:32,670 --> 00:38:37,109
I a contrary to much at this moment
except

628
00:38:37,109 --> 00:38:40,380
a arguing that normally it's a it works
quite well

629
00:38:40,380 --> 00:38:45,039
I'm but it is it is crappy code and
there's no no question about it

630
00:38:45,039 --> 00:38:49,200
arm the big difference really is on but
I can show you know is

631
00:38:49,200 --> 00:38:53,069
arm that on Windows seven the heap
behave somewhat differently in the sense

632
00:38:53,069 --> 00:38:53,559
that's

633
00:38:53,559 --> 00:38:57,769
arm you have a low fragmentation heap
which means instead of seeing all the

634
00:38:57,769 --> 00:38:58,990
smaller locations

635
00:38:58,990 --> 00:39:02,069
Micah ones we saw here or

636
00:39:02,069 --> 00:39:07,150
the allocations interspersed of
different sizes I mean

637
00:39:07,150 --> 00:39:11,150
the stuff you where we have same size
same size same size

638
00:39:11,150 --> 00:39:14,950
different size same size and saw some
signs from

639
00:39:14,950 --> 00:39:19,010
107 switches into law fragmentation mod
file cases of a certain size

640
00:39:19,010 --> 00:39:22,690
after they've been allocated of enough
so few I look at the same size 16 times

641
00:39:22,690 --> 00:39:23,160
also

642
00:39:23,160 --> 00:39:27,220
when though some work rate in Reno just
for the size so

643
00:39:27,220 --> 00:39:30,670
no matter what you do then stuff we
always come from these results

644
00:39:30,670 --> 00:39:33,700
and that's actually quite quite nice arm
because

645
00:39:33,700 --> 00:39:37,769
it actually means that the window 7 heap
is easier to regularize

646
00:39:37,769 --> 00:39:41,509
than Windows XP keep because in from
Windows XP you've got some food in the

647
00:39:41,509 --> 00:39:42,329
back on doing

648
00:39:42,329 --> 00:39:45,490
messy stuff like allocating smaller
locations all the time

649
00:39:45,490 --> 00:39:49,130
arm that will very easily interfere with
you

650
00:39:49,130 --> 00:39:53,029
putting stuff on the heap so you put
stuff on the heap small front

651
00:39:53,029 --> 00:39:57,490
elsewhere puts like makes a few small
applications or something appeared just

652
00:39:57,490 --> 00:39:58,799
like on top of your blocks

653
00:39:58,799 --> 00:40:02,470
and they screw up the layout you have to
make make sure that the stuff doesn't

654
00:40:02,470 --> 00:40:03,279
have money XP

655
00:40:03,279 --> 00:40:06,910
on a Windows seven because same box come
from marino's

656
00:40:06,910 --> 00:40:10,069
same size you don't have to deal with
these things

657
00:40:10,069 --> 00:40:13,900
on the the downside of course is on the
window some it's much harder to get two

658
00:40:13,900 --> 00:40:14,569
blocks

659
00:40:14,569 --> 00:40:18,680
of different sizes next to each other
arm

660
00:40:18,680 --> 00:40:24,420
so that's a ship's well us a one or two
more things about Windows 8

661
00:40:24,420 --> 00:40:28,079
arm and Windows eight steps started
randomizing the

662
00:40:28,079 --> 00:40:31,660
the layout of the blocks within the
arena's so on the 107

663
00:40:31,660 --> 00:40:35,769
you get a big blob of our offer

664
00:40:35,769 --> 00:40:39,009
all blocks of size fifty for example and
then

665
00:40:39,009 --> 00:40:42,279
all of them are in this arena and within
the serene other

666
00:40:42,279 --> 00:40:46,240
allocated sequentially except if they're
in a in a free list

667
00:40:46,240 --> 00:40:49,950
so if you have an an empty arena just
not advocating from its

668
00:40:49,950 --> 00:40:52,970
to fill up linearly 1,2,3,4,5

669
00:40:52,970 --> 00:40:56,809
and then when you let go of stuff again
well buckets freedom that all is well

670
00:40:56,809 --> 00:41:00,119
arm on a Windows 8 they do

671
00:41:00,119 --> 00:41:03,920
fairly cute low-level trick to randomize
the nixon into this

672
00:41:03,920 --> 00:41:08,140
this a arena which means they take a
random index into it

673
00:41:08,140 --> 00:41:12,130
and oh then when they have the random
index and its already occupied

674
00:41:12,130 --> 00:41:16,329
they're just scan for the next free slot
and I look at their which means that

675
00:41:16,329 --> 00:41:19,849
um getting such a nice allocated
Delocated

676
00:41:19,849 --> 00:41:23,640
are located Delocated pattern but we had
earlier in in for

677
00:41:23,640 --> 00:41:26,670
diagram of Adobe will no longer be
possible

678
00:41:26,670 --> 00:41:30,640
arm anything that you going to do on the
Windows 8 he was going to be randomized

679
00:41:30,640 --> 00:41:31,700
to a certain extent

680
00:41:31,700 --> 00:41:34,970
which need not be deadly um

681
00:41:34,970 --> 00:41:38,829
it's just that little bit of a different
game at a point right cause you can't

682
00:41:38,829 --> 00:41:39,529
rely

683
00:41:39,529 --> 00:41:43,769
on well you can rely even less on the
determinism offer

684
00:41:43,769 --> 00:41:46,960
you play out anyhow to summarize

685
00:41:46,960 --> 00:41:50,650
a good he pointed to it would be awesome
I'd love to have one

686
00:41:50,650 --> 00:41:54,410
arm 5 resource to build 1i would arm

687
00:41:54,410 --> 00:41:59,849
Vera are further small devil's in the
details when you build its but

688
00:41:59,849 --> 00:42:03,400
in general it's quite feasible would be
a a

689
00:42:03,400 --> 00:42:07,779
a cool thing to have amusingly one of my
coworkers is a C-plus boss developer

690
00:42:07,779 --> 00:42:08,970
that has no

691
00:42:08,970 --> 00:42:12,539
interest whatsoever in vulnerable to
development and he still finds that

692
00:42:12,539 --> 00:42:14,190
thing to be absolutely fascinating

693
00:42:14,190 --> 00:42:18,069
because a it's essentially a great he
profile as well tells you how

694
00:42:18,069 --> 00:42:21,750
in the background your super spa
snobbery starts doubling sizes for

695
00:42:21,750 --> 00:42:22,819
vectors when you

696
00:42:22,819 --> 00:42:26,599
push items into them in there are no
space and so forth so

697
00:42:26,599 --> 00:42:31,150
might actually be a good development
tool I'm I'm a crime clans try to the

698
00:42:31,150 --> 00:42:34,150
motivate people to go through spent the
20 percent I'm on this

699
00:42:34,150 --> 00:42:38,029
are I'm a knots terribly successful yet

700
00:42:38,029 --> 00:42:41,609
but a we shall see any questions

701
00:42:41,609 --> 00:42:47,190
this

702
00:42:47,190 --> 00:42:50,630
runtime: environment do you foresee for
this um

703
00:42:50,630 --> 00:42:54,029
you talk about like colonel models
earlier

704
00:42:54,029 --> 00:42:58,390
would visualization be something um to
make use of or

705
00:42:58,390 --> 00:43:01,849
like Harper specific issues um so

706
00:43:01,849 --> 00:43:05,930
II thing for the prop architecture is
the data collector

707
00:43:05,930 --> 00:43:09,700
and you can I think in an ideal world

708
00:43:09,700 --> 00:43:12,910
you would put the data collector into
colonels

709
00:43:12,910 --> 00:43:16,549
space not doesn't necessarily need to
have colonel

710
00:43:16,549 --> 00:43:20,220
privileges such as it needs to be in the
address range so it doesn't interfere

711
00:43:20,220 --> 00:43:22,369
with existing address range

712
00:43:22,369 --> 00:43:25,770
um but thats a lot of hard work so

713
00:43:25,770 --> 00:43:29,109
I'm I'm quite happy with people just
taking a deal

714
00:43:29,109 --> 00:43:33,329
injection approach and just being really
careful about a the size of a deal lol

715
00:43:33,329 --> 00:43:36,829
and be the placement of a deal to
minimize interaction so

716
00:43:36,829 --> 00:43:40,020
ideal scenario somebody wants a condom
on your brights

717
00:43:40,020 --> 00:43:43,640
something but stays out of the use a
space address

718
00:43:43,640 --> 00:43:47,579
at all realistically I'll be happy with

719
00:43:47,579 --> 00:43:51,299
Justin some form of injection into the
process as long it takes care to not

720
00:43:51,299 --> 00:43:53,160
allocate anything

721
00:43:53,160 --> 00:43:57,240
and to place it's often a in region
which is unlikely to interfere with the

722
00:43:57,240 --> 00:43:58,230
heap

723
00:43:58,230 --> 00:44:01,359
and then separate from the data
collection component

724
00:44:01,359 --> 00:44:04,569
a you have the visualization components
which um

725
00:44:04,569 --> 00:44:08,599
would-be whatever just be really where
every time

726
00:44:08,599 --> 00:44:12,539
like you always be people that want to
build likely they flirt pie from the

727
00:44:12,539 --> 00:44:15,109
bottom year ago or two and then they're
enthusiastic upon they want to put

728
00:44:15,109 --> 00:44:16,779
everything in Python

729
00:44:16,779 --> 00:44:20,230
you're running to ram issues really
quickly even

730
00:44:20,230 --> 00:44:23,880
like we've literally speaking tens of
millions of events

731
00:44:23,880 --> 00:44:27,240
on large applications so your UI

732
00:44:27,240 --> 00:44:31,450
needs to be able to reads decent data
quantities

733
00:44:31,450 --> 00:44:34,839
keep them in memory and manipulate them
on

734
00:44:34,839 --> 00:44:39,029
I think the biggest stupid design
decision but all we've done with this of

735
00:44:39,029 --> 00:44:40,009
done with this is

736
00:44:40,009 --> 00:44:43,099
or we've done um is using

737
00:44:43,099 --> 00:44:46,329
a like actually putting all these
rectangles

738
00:44:46,329 --> 00:44:50,369
even though they might they might be 250
rectangles to one part pixel

739
00:44:50,369 --> 00:44:55,480
so something that's takes a pixel and
then calculates

740
00:44:55,480 --> 00:44:59,400
are we hitting a rectangle you or not
would be so much Foshan so much

741
00:44:59,400 --> 00:45:04,650
Smith and I expect you to be able to
smooth zooming on this is world so

742
00:45:04,650 --> 00:45:08,160
I was more thinking of the data
collector right um

743
00:45:08,160 --> 00:45:11,920
and not interfering with the environment
is controlling it from the outside from

744
00:45:11,920 --> 00:45:12,279
the

745
00:45:12,279 --> 00:45:15,770
virtualization host 0 you mean I

746
00:45:15,770 --> 00:45:20,630
having essentially a virtual machine and
then

747
00:45:20,630 --> 00:45:24,529
vet should work the question is

748
00:45:24,529 --> 00:45:28,049
from

749
00:45:28,049 --> 00:45:32,250
a so so my the mmm

750
00:45:32,250 --> 00:45:35,460
so in essence what you're saying is you
just put the data somewhere then read on

751
00:45:35,460 --> 00:45:36,369
from the

752
00:45:36,369 --> 00:45:39,489
the whole well I guess my my worry is
that

753
00:45:39,489 --> 00:45:42,819
even if your virtual machine that
doesn't mean you're not interfering

754
00:45:42,819 --> 00:45:46,160
from I mean as soon as you have to
communicate with the outside interfering

755
00:45:46,160 --> 00:45:46,910
with the timing

756
00:45:46,910 --> 00:45:50,680
but running the application in a virtual
machine already does that

757
00:45:50,680 --> 00:45:54,920
yet through all what I'm saying though
is not you're right in the sense that it

758
00:45:54,920 --> 00:45:57,190
would be a good idea to

759
00:45:57,190 --> 00:46:00,200
have a the opposition a virtual machine
or

760
00:46:00,200 --> 00:46:03,430
somewhere where you don't school with
the time too much

761
00:46:03,430 --> 00:46:07,269
have a member here me area where you
just dump the the data

762
00:46:07,269 --> 00:46:11,160
and then the hypervisor resolve the Tate
Owens to realize it

763
00:46:11,160 --> 00:46:14,170
arm that were probably

764
00:46:14,170 --> 00:46:17,730
probably work fine butts have to admit
that I know

765
00:46:17,730 --> 00:46:21,410
really very little about how to
implement a high for wasn't all that

766
00:46:21,410 --> 00:46:25,859
stuff works on

767
00:46:25,859 --> 00:46:32,859
all the questions

768
00:46:37,349 --> 00:46:40,970
you you try to demo the differences
between a

769
00:46:40,970 --> 00:46:44,069
xpos and 2007 your

770
00:46:44,069 --> 00:46:47,819
what what expected differences be
between adobe nine

771
00:46:47,819 --> 00:46:50,880
and the Toby 10 with a sandboxing

772
00:46:50,880 --> 00:46:54,589
from actually I think that the
differences and he plowed

773
00:46:54,589 --> 00:46:58,400
wouldn't be very visible due to the some
boxing

774
00:46:58,400 --> 00:47:01,640
for main problem is that because the

775
00:47:01,640 --> 00:47:05,979
bad code that we have here is incapable
of following into a subprocess

776
00:47:05,979 --> 00:47:09,410
I can actually get a decent
specialization for

777
00:47:09,410 --> 00:47:13,289
for the adobe sandbox process i'm for he
play out

778
00:47:13,289 --> 00:47:16,670
itself should not change by much um

779
00:47:16,670 --> 00:47:20,589
of course it'll change in the sense that
allocations that belong to the UI

780
00:47:20,589 --> 00:47:23,789
outside of the some books will be
outside of some books

781
00:47:23,789 --> 00:47:27,569
but a to be honest I actually

782
00:47:27,569 --> 00:47:31,700
thing for within the Sun books or it is
quite possible that within the Sun books

783
00:47:31,700 --> 00:47:35,539
the the heap gets to be cleaner because
there's less you are you

784
00:47:35,539 --> 00:47:38,880
events interacting with by action

785
00:47:38,880 --> 00:47:42,719
also don't know on IR don't understand
for the architecture of the

786
00:47:42,719 --> 00:47:46,989
that'll be some books very well yet in
general the play out

787
00:47:46,989 --> 00:47:51,029
is not influenced much Bonnie just
putting something in some box

788
00:47:51,029 --> 00:47:54,859
I miss the change the allocator on this
the operating system are going to change

789
00:47:54,859 --> 00:47:55,549
the

790
00:47:55,549 --> 00:47:59,839
the buyout is relatively not completely
stable of course

791
00:47:59,839 --> 00:48:06,579
butts some what's stable and other
questions

792
00:48:06,579 --> 00:48:13,579
thank you for your time

