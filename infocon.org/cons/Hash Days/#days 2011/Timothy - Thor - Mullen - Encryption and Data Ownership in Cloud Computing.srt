1
00:00:11,780 --> 00:00:13,850
hello and welcome this is Timothy

2
00:00:13,850 --> 00:00:17,490
dormilon and this is the recording above

3
00:00:17,490 --> 00:00:22,750
my hash days session hash days was held
in Lucerne Switzerland

4
00:00:22,750 --> 00:00:26,450
knocked over a 2011 to stir few

5
00:00:26,450 --> 00:00:29,919
few days back and during the session

6
00:00:29,919 --> 00:00:33,670
and missed a couple of points that I
wanted to make and a

7
00:00:33,670 --> 00:00:36,770
are also like my own environment here
where I can

8
00:00:36,770 --> 00:00:41,320
is more conducive to to the demos that I
wanna run and that's kinda the important

9
00:00:41,320 --> 00:00:41,700
part

10
00:00:41,700 --> 00:00:46,810
up their presentation here for large
into it I would like to say thank you to

11
00:00:46,810 --> 00:00:49,080
the hash days guys did a great job

12
00:00:49,080 --> 00:00:52,590
if you are anyone watching this hasn't
been the hash days you should really

13
00:00:52,590 --> 00:00:56,550
plan on going next year the guys to a
great great job setting everything up

14
00:00:56,550 --> 00:01:01,560
and it's a it's a valuable conference
a.m. the theme last year

15
00:01:01,560 --> 00:01:05,600
where this year is it was actually risk
management

16
00:01:05,600 --> 00:01:08,740
and the the purpose was to give

17
00:01:08,740 --> 00:01:12,930
attendees the tools and knowledge that
they need to actually address security

18
00:01:12,930 --> 00:01:14,830
concerns to actually act

19
00:01:14,830 --> 00:01:18,430
on some other issues that that we face
today

20
00:01:18,430 --> 00:01:22,820
in the security industry and that she
relatively

21
00:01:22,820 --> 00:01:26,400
unique and the reason I say that is
because many these big

22
00:01:26,400 --> 00:01:29,520
bigger security conferences

23
00:01:29,520 --> 00:01:33,330
kinda focused on the attack side affects

24
00:01:33,330 --> 00:01:36,600
and everything is all about you know
razzle dazzle and

25
00:01:36,600 --> 00:01:41,110
showing how to opa boxes and how they do
things but it doesn't

26
00:01:41,110 --> 00:01:45,840
it doesn't provide any one with any
information on how to prevent these

27
00:01:45,840 --> 00:01:46,510
attacks

28
00:01:46,510 --> 00:01:49,460
and that's really what what I'm all
about and I think that's what the

29
00:01:49,460 --> 00:01:51,450
industry should be about I think it's a
failure

30
00:01:51,450 --> 00:01:55,990
the industries are really glad to see
I'm to see the hash days guys

31
00:01:55,990 --> 00:02:00,830
doing what you're doing so so anyway
let's kinda but launch into this

32
00:02:00,830 --> 00:02:04,010
I as I said this is going to be a
session

33
00:02:04,010 --> 00:02:08,729
arm kinda revolving around tgp towards
godly privacy

34
00:02:08,729 --> 00:02:12,099
course tongue in cheek acronym for

35
00:02:12,099 --> 00:02:15,689
my encryption utility which is

36
00:02:15,689 --> 00:02:19,319
you designed for use in the clout

37
00:02:19,319 --> 00:02:22,920
course everyone's all and on the cloud
everything's moving that way

38
00:02:22,920 --> 00:02:27,250
um you know cloud is a ubiquitous term

39
00:02:27,250 --> 00:02:31,230
but for the most part it basically means
somebody else's servers at your store

40
00:02:31,230 --> 00:02:32,190
your data on

41
00:02:32,190 --> 00:02:35,500
and I know that's an oversimplification
but as far as we're concerned we're

42
00:02:35,500 --> 00:02:36,630
gonna stick to that

43
00:02:36,630 --> 00:02:40,360
so what tgp is

44
00:02:40,360 --> 00:02:45,510
is a as the name kinda been first it is

45
00:02:45,510 --> 00:02:48,610
kinda derived from the pgp

46
00:02:48,610 --> 00:02:51,780
from the PGP program

47
00:02:51,780 --> 00:02:56,020
except there's a a couple things that
make tgp different

48
00:02:56,020 --> 00:02:59,060
I am first of I don't think it sucks

49
00:02:59,060 --> 00:03:03,640
I pgp is I don't I don't know how it
happened but

50
00:03:03,640 --> 00:03:06,739
I'm looks like it was written by a
12-year-old

51
00:03:06,739 --> 00:03:11,190
I am if any have the viewers are
programmers for a

52
00:03:11,190 --> 00:03:16,300
for PGP I you know I guess you couldn't
not take that in a bad way but it's not

53
00:03:16,300 --> 00:03:17,940
my fault that you don't know what you're
doing

54
00:03:17,940 --> 00:03:23,200
um anyway a let me let me kinda boring
show the

55
00:03:23,200 --> 00:03:26,209
the interface year this is going to be a
little different then

56
00:03:26,209 --> 00:03:30,310
in the presentation I because I am I am
here and I kinda wanted to be able to

57
00:03:30,310 --> 00:03:31,370
show you things

58
00:03:31,370 --> 00:03:35,400
a live and the

59
00:03:35,400 --> 00:03:38,569
let let's let in fact was just launch
pgp

60
00:03:38,569 --> 00:03:42,980
I'm gonna continue with and if I mess up
ur sound like an idiot during this

61
00:03:42,980 --> 00:03:44,780
presentation I'm not gonna stop

62
00:03:44,780 --> 00:03:48,060
I am I like to look like an idiot life

63
00:03:48,060 --> 00:03:51,500
so would just bring up the interface
year

64
00:03:51,500 --> 00:03:55,080
basically tgp

65
00:03:55,080 --> 00:03:58,349
in its simplest form is a PK I

66
00:03:58,349 --> 00:04:01,599
encryption solution meaning a public key

67
00:04:01,599 --> 00:04:05,209
a.m. infrastructure in that

68
00:04:05,209 --> 00:04:10,170
I will create a key set which will
consist of my public key

69
00:04:10,170 --> 00:04:14,610
and my private key in all cases public
keys are used to encrypt data

70
00:04:14,610 --> 00:04:18,440
and private keys are used to decrease
data so

71
00:04:18,440 --> 00:04:22,990
I as in a standard PK I paradigm I can
share my public key

72
00:04:22,990 --> 00:04:26,850
with anyone I want and I'm the only one
who keeps the private key

73
00:04:26,850 --> 00:04:30,180
and then that way people can encrypt
data for me and I'm the only one who can

74
00:04:30,180 --> 00:04:33,389
d cryptid so kind of what makes

75
00:04:33,389 --> 00:04:37,790
I am what makes tgp a little bit
different is the format that this data

76
00:04:37,790 --> 00:04:38,650
exists

77
00:04:38,650 --> 00:04:43,280
and so I can show you are

78
00:04:43,280 --> 00:04:46,970
the an example here they're basically
two types of data

79
00:04:46,970 --> 00:04:51,150
we have a key fob which contains the key
material

80
00:04:51,150 --> 00:04:54,250
and then we have the encrypt the data
Blops I'm gonna show you those in a

81
00:04:54,250 --> 00:04:55,300
second

82
00:04:55,300 --> 00:04:58,919
so the key fob as you'll see is

83
00:04:58,919 --> 00:05:03,940
tagged an XML so this one %uh them the
main differences is that all the data

84
00:05:03,940 --> 00:05:04,590
elements

85
00:05:04,590 --> 00:05:09,150
or encoded with an XML and that allows
you for

86
00:05:09,150 --> 00:05:12,710
to to be able to automate consumption up
this data which

87
00:05:12,710 --> 00:05:16,229
I haven't seen any any applications that
allow you to do that

88
00:05:16,229 --> 00:05:20,410
I'm at a particular use case Adobe
explaining later on in the session

89
00:05:20,410 --> 00:05:25,750
for for this I am and so you'll see I
have basic information some key fob

90
00:05:25,750 --> 00:05:26,590
names

91
00:05:26,590 --> 00:05:30,660
um in this pops into is a private key

92
00:05:30,660 --> 00:05:34,560
bob Bennett cordis fob contains the
property owners that there is no public

93
00:05:34,560 --> 00:05:35,650
key data

94
00:05:35,650 --> 00:05:38,960
I the public use actually derived from

95
00:05:38,960 --> 00:05:44,449
the private key data in so far as the
dotnet implementation of the RS a

96
00:05:44,449 --> 00:05:48,139
a encryption objects are concerned I
have a key hash:

97
00:05:48,139 --> 00:05:53,710
and a key salt I'm best practices have
been crypts in would dictate that any

98
00:05:53,710 --> 00:05:55,120
time you create

99
00:05:55,120 --> 00:05:58,930
a in cryptid set of data that you out
assault

100
00:05:58,930 --> 00:06:03,250
and that's all should change every time
on the salt is considered public

101
00:06:03,250 --> 00:06:06,870
information I guess some people consider
this all private but that's not

102
00:06:06,870 --> 00:06:10,550
I'm that's not the standard use case

103
00:06:10,550 --> 00:06:13,639
I'm so I include I include the salt here

104
00:06:13,639 --> 00:06:17,699
which of course is necessary to combine
whenever you derive bites

105
00:06:17,699 --> 00:06:21,970
from a a password in order to D crib the
data so what you'll see

106
00:06:21,970 --> 00:06:25,449
is this is actually and in cryptid
private key

107
00:06:25,449 --> 00:06:28,600
this might seem a little
counterintuitive I but

108
00:06:28,600 --> 00:06:31,750
but basically this is all the data that

109
00:06:31,750 --> 00:06:35,860
I need in order to D crib data
specifically

110
00:06:35,860 --> 00:06:39,100
for me where my public key was used to
encrypt it

111
00:06:39,100 --> 00:06:43,810
so this is actually an in cryptid
private key and it is protected

112
00:06:43,810 --> 00:06:48,039
with a passphrase so it's kind of a
multi-step process

113
00:06:48,039 --> 00:06:52,380
I will retrieve my key fob I whatever in
my past race 2

114
00:06:52,380 --> 00:06:57,449
D crib the in cryptid private key then
the private key is assessable for me to

115
00:06:57,449 --> 00:06:58,710
be able to then

116
00:06:58,710 --> 00:07:02,460
decreased my data and tgp so

117
00:07:02,460 --> 00:07:05,770
a let's just take a look at the actual a

118
00:07:05,770 --> 00:07:09,690
tgp data itself and I'll come up here

119
00:07:09,690 --> 00:07:13,020
I'm here just pull up the my my text
file

120
00:07:13,020 --> 00:07:16,449
so here's your standard a Latin

121
00:07:16,449 --> 00:07:20,080
test text a you'll see

122
00:07:20,080 --> 00:07:23,440
the whatever that means I'm actually no
idea what I mean to could be something

123
00:07:23,440 --> 00:07:25,919
very holder in here and displaying it on
the screen

124
00:07:25,919 --> 00:07:29,289
I am and what what I'll do

125
00:07:29,289 --> 00:07:33,139
is just the kinda show you this on

126
00:07:33,139 --> 00:07:38,360
I'm gonna load a key pair and in this
case I'm gonna load my

127
00:07:38,360 --> 00:07:41,720
I am private

128
00:07:41,720 --> 00:07:45,460
fob Ono I don't wanna do that see
already messing up

129
00:07:45,460 --> 00:07:49,830
I want to load and

130
00:07:49,830 --> 00:07:53,830
order slowed this one who

131
00:07:53,830 --> 00:08:00,509
and that is the wrong password

132
00:08:00,509 --> 00:08:05,580
okay so I've loaded this key fob and
we'll see here the load was successful

133
00:08:05,580 --> 00:08:09,160
on the key status is that I have the
four key pair which means I can encrypt

134
00:08:09,160 --> 00:08:10,330
and decrypt

135
00:08:10,330 --> 00:08:14,330
if I loaded a public key all I would be
able to do was incorrect

136
00:08:14,330 --> 00:08:17,610
um and so the private key allows me to
do both

137
00:08:17,610 --> 00:08:22,210
so what we'll do here's our come down
here and I'll selected that text file

138
00:08:22,210 --> 00:08:26,830
tgp text and it automatically fills in
all the data that I made his gonna

139
00:08:26,830 --> 00:08:28,400
create a tgp extension

140
00:08:28,400 --> 00:08:32,690
and I'm gonna say okay so that's that so
I've I having cryptid that file

141
00:08:32,690 --> 00:08:37,750
so let's just take a look at that a from
there it is

142
00:08:37,750 --> 00:08:41,769
so in the same way that our public that
are that are key fob data

143
00:08:41,769 --> 00:08:46,920
is encapsulated in XML the encrypt the
data is also encapsulated

144
00:08:46,920 --> 00:08:50,410
within XML and so we see the key name
here shite

145
00:08:50,410 --> 00:08:53,639
which Tom I guess might be construed as
vulgar

146
00:08:53,639 --> 00:08:57,679
I the Pasha this key in order to
determine

147
00:08:57,679 --> 00:09:00,759
validity the key to make sure nothing
was tampered with

148
00:09:00,759 --> 00:09:04,420
I a public cash which is a hasher the
public key

149
00:09:04,420 --> 00:09:09,110
data I'm in the reason that I do this is
that I want to ensure

150
00:09:09,110 --> 00:09:12,809
that I have a hash I love the public

151
00:09:12,809 --> 00:09:16,499
key that was used as well as the overall

152
00:09:16,499 --> 00:09:19,769
entire key on my side I'm the

153
00:09:19,769 --> 00:09:25,100
II in order to validate again that the
state has not been tampered

154
00:09:25,100 --> 00:09:29,730
with here we have the in cryptid a DES
key

155
00:09:29,730 --> 00:09:32,809
and you'll see that this is a relatively
substantial

156
00:09:32,809 --> 00:09:37,069
amount of data along with the as:
initialization vector

157
00:09:37,069 --> 00:09:42,050
and this is the crypto blob the crypto
blog actually contains a base64

158
00:09:42,050 --> 00:09:46,239
a encoded representation up being
cryptid binary data

159
00:09:46,239 --> 00:09:49,480
a resultant in cryptid us i per text

160
00:09:49,480 --> 00:09:53,540
over the about what we saw here

161
00:09:53,540 --> 00:09:57,029
an this guy hurry

162
00:09:57,029 --> 00:10:00,790
so let me explain this for a minute you
might be wondering

163
00:10:00,790 --> 00:10:05,129
a yes I thought this was PK I though if
you're not familiar

164
00:10:05,129 --> 00:10:10,059
I am all PK I encryption paradigm so

165
00:10:10,059 --> 00:10:13,220
will use a combination OVR essay

166
00:10:13,220 --> 00:10:17,579
asymmetric encryption combined with ates
or whatever

167
00:10:17,579 --> 00:10:21,679
whatever the actual para could be I'm
elliptic curve

168
00:10:21,679 --> 00:10:26,589
it could be a number of different things
however from 8 prepared I'm standpoint

169
00:10:26,589 --> 00:10:29,809
what is done is a

170
00:10:29,809 --> 00:10:32,999
our essay encryption

171
00:10:32,999 --> 00:10:37,290
object depending on the key size is
limited in the amount of data

172
00:10:37,290 --> 00:10:41,119
that it can encrypt because it is a
asymmetric encryption algorithm

173
00:10:41,119 --> 00:10:45,970
so with a 1024 bit Rs a key you're
limited to about a hundred and seventeen

174
00:10:45,970 --> 00:10:47,239
bits of data

175
00:10:47,239 --> 00:10:50,290
I almost twice that for a 2048

176
00:10:50,290 --> 00:10:54,679
key Lincoln or say so given the
restriction of the amount of data that

177
00:10:54,679 --> 00:10:57,199
can be encrypted with that particular
site for

178
00:10:57,199 --> 00:11:00,480
while what is done is that a random

179
00:11:00,480 --> 00:11:05,259
cryptographically strong AES key is
generated

180
00:11:05,259 --> 00:11:11,439
the or essay a encryption object is used
to encrypt the AES key

181
00:11:11,439 --> 00:11:15,149
and there's the AES key that is used to
actually encrypt all the data

182
00:11:15,149 --> 00:11:18,160
so there's no limit with since it's a
block cipher

183
00:11:18,160 --> 00:11:21,629
and its symmetric meaning that the same
password a key

184
00:11:21,629 --> 00:11:26,170
will encrypt Andy crypt I

185
00:11:26,170 --> 00:11:29,360
the end and it asymmetric is that

186
00:11:29,360 --> 00:11:33,610
you will encrypt with one key Andy
crippled another

187
00:11:33,610 --> 00:11:39,290
so what happens here is my public key is
used to encrypt the AES key

188
00:11:39,290 --> 00:11:42,860
the AES key is static and that will be
used to not summing

189
00:11:42,860 --> 00:11:46,790
its different each time a course but the
AES key is then used to encrypt the data

190
00:11:46,790 --> 00:11:47,910
that's the

191
00:11:47,910 --> 00:11:52,319
reflected here in the script a blob and
then whenever I D crib to stay there I

192
00:11:52,319 --> 00:11:54,299
will use my private key

193
00:11:54,299 --> 00:11:59,209
2d crib TAS key and then went to
retrieve the 80 S key I use that 2d crib

194
00:11:59,209 --> 00:12:00,949
the actual crypto blob

195
00:12:00,949 --> 00:12:04,519
data and so again we seeing that a

196
00:12:04,519 --> 00:12:08,100
that this is all this is all base 64
encoding

197
00:12:08,100 --> 00:12:11,489
and that gives me the opportunity to

198
00:12:11,489 --> 00:12:16,319
post this data anywhere that I want and
no we we have a quite quite got into

199
00:12:16,319 --> 00:12:20,299
the I am to the cloud paradigm yet

200
00:12:20,299 --> 00:12:23,819
but I'm just kinda preparing you for
this byway above

201
00:12:23,819 --> 00:12:27,339
'em a explaining what the

202
00:12:27,339 --> 00:12:31,179
the basics are here so now we have our
crib today to

203
00:12:31,179 --> 00:12:35,589
antique ripping it is the a factor doing
the same thing

204
00:12:35,589 --> 00:12:39,489
I'll come up here I want to D crypt I
will select

205
00:12:39,489 --> 00:12:42,749
the tgp texte GP file

206
00:12:42,749 --> 00:12:46,279
and you'll notice that it automatically
goes back to the tgp text

207
00:12:46,279 --> 00:12:50,239
I'll say okay in this case BAM so that
pose that guy up

208
00:12:50,239 --> 00:12:53,589
and shows me the crib today damn pretty
cool

209
00:12:53,589 --> 00:12:58,290
so let's get back to the presentation
here to see for missing anything

210
00:12:58,290 --> 00:13:02,170
I am so with their hands on overview

211
00:13:02,170 --> 00:13:07,309
so we've showed the a structure will
review the FOB in the tgp

212
00:13:07,309 --> 00:13:11,699
somewhat the logic flow is again we
basically willow turkey

213
00:13:11,699 --> 00:13:15,470
encryptor d crypt and in it and then
we're good

214
00:13:15,470 --> 00:13:18,939
I am again

215
00:13:18,939 --> 00:13:23,019
what makes tgp a little bit different
have talked about the XML structure

216
00:13:23,019 --> 00:13:26,470
it's always in a fully postal ASCII
format arm

217
00:13:26,470 --> 00:13:29,639
that means that this data can be sent in
an email

218
00:13:29,639 --> 00:13:33,410
more importantly the state can be posted
to a

219
00:13:33,410 --> 00:13:36,459
a social site this data can be

220
00:13:36,459 --> 00:13:40,160
included and any sort a list serve

221
00:13:40,160 --> 00:13:43,389
a forum anything like that the

222
00:13:43,389 --> 00:13:46,489
you don't need to be an administrator
execute this these other

223
00:13:46,489 --> 00:13:50,749
installation programs require you to be
a administrator which I personally don't

224
00:13:50,749 --> 00:13:52,540
like they also require

225
00:13:52,540 --> 00:13:56,079
installation you don't have to install

226
00:13:56,079 --> 00:13:59,569
tgp tgp uses the

227
00:13:59,569 --> 00:14:03,669
dotnet client profile libraries that are
included as part of Windows

228
00:14:03,669 --> 00:14:07,709
so you can actually directly a execute

229
00:14:07,709 --> 00:14:11,139
from a thumb drive you can text launcher
from the internets you don't even have

230
00:14:11,139 --> 00:14:14,809
to have the program resident on a system
that you're running it from

231
00:14:14,809 --> 00:14:18,269
the key files are stored individually
rather than a

232
00:14:18,269 --> 00:14:22,049
database love I you know a very low disk
I

233
00:14:22,049 --> 00:14:26,009
what they did was told me that DT GB
text file was altered

234
00:14:26,009 --> 00:14:29,269
while it was up in the forward to reload
it I said yes the course is the same

235
00:14:29,269 --> 00:14:31,769
thing because it's the same decrypted
data

236
00:14:31,769 --> 00:14:34,799
up so we'll see that the fobs here

237
00:14:34,799 --> 00:14:38,600
all individual a files

238
00:14:38,600 --> 00:14:41,899
I'm pgp and I believe tgp

239
00:14:41,899 --> 00:14:45,439
GPG as well the open-source will

240
00:14:45,439 --> 00:14:48,939
load all the keys into a single file

241
00:14:48,939 --> 00:14:52,850
or it like kinda in a database format
mean you have to retrieve them

242
00:14:52,850 --> 00:14:56,269
out of that but that there's no
portability for those files are also in

243
00:14:56,269 --> 00:14:58,589
binary form so you can transport them

244
00:14:58,589 --> 00:15:02,129
where you can post them very well and
and other places

245
00:15:02,129 --> 00:15:05,899
on the on the web on

246
00:15:05,899 --> 00:15:12,220
hopefully this will become more evident
and I in a moment

247
00:15:12,220 --> 00:15:15,389
the other difference is that tgp

248
00:15:15,389 --> 00:15:19,839
is fully integrated with the windows
certificate store

249
00:15:19,839 --> 00:15:23,369
so in a PGP GPG

250
00:15:23,369 --> 00:15:28,739
paradigm the PK I infrastructures all
based on peer to peer trust you don't

251
00:15:28,739 --> 00:15:29,939
really know

252
00:15:29,939 --> 00:15:33,609
that I'm the one who created the key I
can give you a thumbprint

253
00:15:33,609 --> 00:15:39,160
or a I hasher Becky but you don't know
that I'm actually the one who created it

254
00:15:39,160 --> 00:15:40,749
you have to trust that

255
00:15:40,749 --> 00:15:43,949
the key came from from me which

256
00:15:43,949 --> 00:15:47,259
kinda goes against the whole purpose for
PK I here

257
00:15:47,259 --> 00:15:50,399
if I don't want to load up key pair that
I've created myself

258
00:15:50,399 --> 00:15:53,970
but I want to load an X 509 certificate
those created by some certificate

259
00:15:53,970 --> 00:15:56,449
authority that I trust and there's a
whole chain

260
00:15:56,449 --> 00:16:00,989
I can load these guys and you'll see all
of my keys pop right up

261
00:16:00,989 --> 00:16:05,669
zoom door what have you I am

262
00:16:05,669 --> 00:16:10,799
and so I can use those keys to encrypt
and decrypt self I have public easily

263
00:16:10,799 --> 00:16:11,660
created from

264
00:16:11,660 --> 00:16:14,739
AP ki I infrastructure based on
certificate authorities

265
00:16:14,739 --> 00:16:17,769
then I can take full advantage that here
and I think that that's actually quite

266
00:16:17,769 --> 00:16:18,309
cool

267
00:16:18,309 --> 00:16:21,790
I don't know I any other utility that
does that

268
00:16:21,790 --> 00:16:25,350
Microsoft actually doesn't have a peer
to peer encryption

269
00:16:25,350 --> 00:16:29,749
utility here they have different ways of
moving files about via email and your

270
00:16:29,749 --> 00:16:32,679
past and things of that nature but they
don't have a stand-alone

271
00:16:32,679 --> 00:16:36,589
PK I based system um

272
00:16:36,589 --> 00:16:40,910
so we 00 also I am

273
00:16:40,910 --> 00:16:44,429
I've had a number a number of requests
for the source code

274
00:16:44,429 --> 00:16:47,819
it's kind of interesting people the took
the expectation some folks out there

275
00:16:47,819 --> 00:16:48,499
like wall

276
00:16:48,499 --> 00:16:51,819
howdy i do you actually expect me to
install this without being able to look

277
00:16:51,819 --> 00:16:53,019
at the code

278
00:16:53,019 --> 00:16:56,199
and not to sound flippant but I don't
expect people to do anything they want

279
00:16:56,199 --> 00:16:57,669
install it they can

280
00:16:57,669 --> 00:17:01,819
and if they don't then dando if you
don't trust my code by all means don't

281
00:17:01,819 --> 00:17:05,980
don't start I however what I think is
funny as the

282
00:17:05,980 --> 00:17:11,600
anyone who would have the capability of
analyzing the source code to determine

283
00:17:11,600 --> 00:17:15,289
if there was any nefarious activities or
just to ensure that I

284
00:17:15,289 --> 00:17:19,360
was following proper procedures and the
encryption process

285
00:17:19,360 --> 00:17:23,149
would know that in dotnet code all you
have to do is use reflector

286
00:17:23,149 --> 00:17:26,529
and you can take a direct look at what
the what that what the code is so I

287
00:17:26,529 --> 00:17:29,909
always find it funny that there
somebody's open source crybabies

288
00:17:29,909 --> 00:17:32,990
um are asking for something

289
00:17:32,990 --> 00:17:36,630
that it's clear that they don't know
what to do with once they got it so

290
00:17:36,630 --> 00:17:39,850
I i find that kinda funny I'm so thats

291
00:17:39,850 --> 00:17:44,710
a that's kinda the brief explanation of
what tgp years you'll see some more

292
00:17:44,710 --> 00:17:48,320
you'll see some more on it this is isn't
supposed to be a session

293
00:17:48,320 --> 00:17:51,840
about pgp tgp specifically but it's a

294
00:17:51,840 --> 00:17:54,909
its application to the the the

295
00:17:54,909 --> 00:17:57,990
a.m. to the to the cloud here

296
00:17:57,990 --> 00:18:01,259
so what we have is the

297
00:18:01,259 --> 00:18:04,350
a.m. today's paradigm

298
00:18:04,350 --> 00:18:09,210
is primarily we'd

299
00:18:09,210 --> 00:18:13,460
we take measures to control access to
the data

300
00:18:13,460 --> 00:18:17,179
the value lies in the owning up the data

301
00:18:17,179 --> 00:18:22,139
whoever owns the data owns the value
whoever controls the Data Controls

302
00:18:22,139 --> 00:18:25,820
the value I and

303
00:18:25,820 --> 00:18:31,139
I the firewalls we set up the ACO say we
have in place the authentication

304
00:18:31,139 --> 00:18:34,340
infrastructures that we have in the
distribution of the data

305
00:18:34,340 --> 00:18:37,779
separation a network assets

306
00:18:37,779 --> 00:18:41,649
all that is done to control access to
the data

307
00:18:41,649 --> 00:18:46,190
I the data owner is responsible for all
maintenance and costs

308
00:18:46,190 --> 00:18:49,860
and typically isn't in so far as
encryption if the state is concerned

309
00:18:49,860 --> 00:18:51,440
there's no functional separation

310
00:18:51,440 --> 00:18:55,159
the key material and the encrypt the
data I

311
00:18:55,159 --> 00:18:58,649
meaning that you'll see you'll see in
this summer and a small illustration

312
00:18:58,649 --> 00:19:00,500
here we have the user in the server

313
00:19:00,500 --> 00:19:04,539
the server will retrieve a key which is
typically stored

314
00:19:04,539 --> 00:19:08,370
on the server itself and then encrypt
the data that stored in the database in

315
00:19:08,370 --> 00:19:08,940
the world

316
00:19:08,940 --> 00:19:12,240
D crib that data and present it back
with the user

317
00:19:12,240 --> 00:19:15,330
I am this is extremely common

318
00:19:15,330 --> 00:19:19,100
and in fact a by necessity in some cases

319
00:19:19,100 --> 00:19:22,370
I because people don't have an effective
key

320
00:19:22,370 --> 00:19:27,080
management infrastructure a course the
the obvious issue here

321
00:19:27,080 --> 00:19:30,490
is that a compromise have the server

322
00:19:30,490 --> 00:19:33,600
will yield Durkee data so

323
00:19:33,600 --> 00:19:39,320
almost all instances in the it's typical
during penetration testing whenever we

324
00:19:39,320 --> 00:19:42,090
have people following PK I requirements

325
00:19:42,090 --> 00:19:45,980
they will encrypt credit card data and
what have you but of course the server

326
00:19:45,980 --> 00:19:48,799
encrypting the data has to have access
to the key in the key is typically

327
00:19:48,799 --> 00:19:51,769
stored right there on the server in some
cases people shorten the

328
00:19:51,769 --> 00:19:56,360
and the either a text file or in the
source code itself which is ridiculous

329
00:19:56,360 --> 00:20:00,389
I and so that that key date is
immediately available but Papa server

330
00:20:00,389 --> 00:20:03,409
the encrypt the data really doesn't
doesn't help much

331
00:20:03,409 --> 00:20:06,919
um remove this guy here

332
00:20:06,919 --> 00:20:10,100
now in the in the cloud paradigm

333
00:20:10,100 --> 00:20:15,120
alternately you cannot control who has
access to the data outside of whatever

334
00:20:15,120 --> 00:20:16,289
design controls

335
00:20:16,289 --> 00:20:19,700
are made available to you by the
provider

336
00:20:19,700 --> 00:20:25,200
so in a any public cloud infrastructure

337
00:20:25,200 --> 00:20:28,309
very much like in a shared like a yr

338
00:20:28,309 --> 00:20:31,769
your ISP or an application service
provider

339
00:20:31,769 --> 00:20:35,590
you have multiple customer sharing data
here

340
00:20:35,590 --> 00:20:39,330
in the cloud sharing resources server
resources

341
00:20:39,330 --> 00:20:43,379
that the provider has and you don't know

342
00:20:43,379 --> 00:20:46,870
what separation update occurs what
network segregation

343
00:20:46,870 --> 00:20:51,029
exists whether or not your data is
stored in a different database

344
00:20:51,029 --> 00:20:54,500
whether or not it's on a different
server you don't know

345
00:20:54,500 --> 00:20:58,559
you can trust that they have particular
controls

346
00:20:58,559 --> 00:21:02,149
and access controls in place but you
don't know

347
00:21:02,149 --> 00:21:06,179
to protect the value of the data what we
have to do now is to ensure that

348
00:21:06,179 --> 00:21:09,590
access to the data does not grant

349
00:21:09,590 --> 00:21:13,580
the control over the data the value up
the data

350
00:21:13,580 --> 00:21:17,830
which is different then are current
paradigm right because the data

351
00:21:17,830 --> 00:21:21,590
once it exists as we see here even in
cases where it's an cryptid

352
00:21:21,590 --> 00:21:24,950
many times or whenever a compromise a

353
00:21:24,950 --> 00:21:30,009
a data center van I control the data and
I have the value in the cloud paradigm

354
00:21:30,009 --> 00:21:31,620
we have to ensure

355
00:21:31,620 --> 00:21:35,870
that the data access to the date it is
not to give

356
00:21:35,870 --> 00:21:39,620
a access to the value of the day that's
going to require

357
00:21:39,620 --> 00:21:44,169
I am encryption in his corner require
intelligent decryption in this is kinda

358
00:21:44,169 --> 00:21:46,490
now we're starting to get into were tgp

359
00:21:46,490 --> 00:21:50,750
try and a a accompanying product and API
have that

360
00:21:50,750 --> 00:21:55,389
a you'll see shortly kinda comes into
play to consume true cloud solutions you

361
00:21:55,389 --> 00:21:56,580
have to pay to play

362
00:21:56,580 --> 00:22:01,039
I'm meaning that I in the same way that
a purchase

363
00:22:01,039 --> 00:22:04,139
server resources and what have you I am

364
00:22:04,139 --> 00:22:09,950
for my infrastructure I have to pay for
my cloud services as well

365
00:22:09,950 --> 00:22:13,159
however if you're sneaky about it

366
00:22:13,159 --> 00:22:16,769
in this is not from corporate standpoint
but for individuals

367
00:22:16,769 --> 00:22:20,500
your sneaky about you can actually
offload costs and accountability

368
00:22:20,500 --> 00:22:24,500
the day the third parties while you're
maintaining security

369
00:22:24,500 --> 00:22:29,809
I am show that the sect the and it's
typically the same encryption model

370
00:22:29,809 --> 00:22:32,909
I am where since

371
00:22:32,909 --> 00:22:36,230
since you have a client in some cases
it's even more

372
00:22:36,230 --> 00:22:39,899
I am more pronounced in a cloud paradigm

373
00:22:39,899 --> 00:22:42,899
the encryption key data

374
00:22:42,899 --> 00:22:47,100
is stored somewhere within the
application that's encrypting the data

375
00:22:47,100 --> 00:22:51,980
and it in groups and Andy crypts in the
same sort of model holds true compromise

376
00:22:51,980 --> 00:22:54,509
for the server yields compromiser the
key

377
00:22:54,509 --> 00:22:58,269
so let some let's let's take a

378
00:22:58,269 --> 00:23:02,389
a quick a moment here to kinda demo what
I mean by

379
00:23:02,389 --> 00:23:05,429
being sneaky about moving your data
around

380
00:23:05,429 --> 00:23:08,769
I am we're going to

381
00:23:08,769 --> 00:23:14,129
me just to a standard standard file

382
00:23:14,129 --> 00:23:17,350
how much showed you I showed you the
encryption um

383
00:23:17,350 --> 00:23:20,379
I do wanna show you kinda quickly

384
00:23:20,379 --> 00:23:23,750
we create a new key pair

385
00:23:23,750 --> 00:23:26,950
and so you'll see only with the name
pair test

386
00:23:26,950 --> 00:23:31,139
this is important key size 2048 I'm tgp
actually

387
00:23:31,139 --> 00:23:34,379
insurers that you are aware

388
00:23:34,379 --> 00:23:38,629
have the strength to your password
password strength and complexity rim big

389
00:23:38,629 --> 00:23:41,649
US metrics they don't mean anything is
your password strong

390
00:23:41,649 --> 00:23:45,679
movie yeah what is complex what does it
mean and more importantly does

391
00:23:45,679 --> 00:23:47,470
complexity in for

392
00:23:47,470 --> 00:23:50,570
a particular level of security in in it

393
00:23:50,570 --> 00:23:56,169
as it turns out it actually doesn't so I
can have a a passphrase your capital I

394
00:23:56,169 --> 00:24:00,190
a.m. splat little

395
00:24:00,190 --> 00:24:05,789
one 3 5 so here we have a six character
password

396
00:24:05,789 --> 00:24:11,009
what what I do here is based on a class
F cracking the $1 billion per second

397
00:24:11,009 --> 00:24:14,009
design in the an algorithm earwood area

398
00:24:14,009 --> 00:24:17,649
with the help of my friend will a to
determine

399
00:24:17,649 --> 00:24:21,639
the total number of iterations possible
for the password in this case

400
00:24:21,639 --> 00:24:24,740
it is ninety one trillion and it

401
00:24:24,740 --> 00:24:28,620
will take 91 seconds at a class tough to

402
00:24:28,620 --> 00:24:32,029
cracked the I am this particular

403
00:24:32,029 --> 00:24:36,179
password so this is not the total key
space still ski space will see is a

404
00:24:36,179 --> 00:24:37,570
hundred ninety five trillion

405
00:24:37,570 --> 00:24:41,559
and the seconds to crack the Enter key
space is a 195 billion per second a

406
00:24:41,559 --> 00:24:41,980
course

407
00:24:41,980 --> 00:24:46,730
I am so what would the algorithm does
hears it

408
00:24:46,730 --> 00:24:50,149
actually will determine how many
iterations for

409
00:24:50,149 --> 00:24:53,669
this particular password and how long
that's going to take to crack

410
00:24:53,669 --> 00:24:58,320
so you'll see I don't even remember what
I typed n rate because it's complex

411
00:24:58,320 --> 00:25:02,950
so but if I put my name is stem which is
extremely easy

412
00:25:02,950 --> 00:25:06,659
now we go from 91 seconds to five
hundred and forty-eight hours

413
00:25:06,659 --> 00:25:11,240
alright so it's all in the length and
the I i do some tricks on how I derive

414
00:25:11,240 --> 00:25:11,679
that

415
00:25:11,679 --> 00:25:16,240
I am which you can look at online at
Hamburg God

416
00:25:16,240 --> 00:25:20,200
a on the tgp site if you want some more
information on how this is

417
00:25:20,200 --> 00:25:24,639
how this is happening but so what I you
what I basically wanted to show

418
00:25:24,639 --> 00:25:28,129
is I'm going to

419
00:25:28,129 --> 00:25:32,870
retrieve a key so but a year ago we're
having this discussion I posted my key

420
00:25:32,870 --> 00:25:36,149
a key on full disclosure I am

421
00:25:36,149 --> 00:25:39,169
and there were some people who were
saying they'd be able to take ripped in

422
00:25:39,169 --> 00:25:44,409
a day and of course it hasn't happened
cuz the cat

423
00:25:44,409 --> 00:25:48,590
so no matter where I am I am

424
00:25:48,590 --> 00:25:52,220
let me

425
00:25:52,220 --> 00:25:55,320
so I'm going to

426
00:25:55,320 --> 00:25:58,429
find my key on a safe store

427
00:25:58,429 --> 00:26:02,249
private key for disclosure my private
key

428
00:26:02,249 --> 00:26:06,029
how here it is right here so it's the
first

429
00:26:06,029 --> 00:26:09,230
I am it is the first

430
00:26:09,230 --> 00:26:13,870
search result listed national income
then here see I've gone to this 104

431
00:26:13,870 --> 00:26:18,499
and so here's my private key you'll see
that I posted this June 11th 2010

432
00:26:18,499 --> 00:26:21,590
so this is my private key L explain
later

433
00:26:21,590 --> 00:26:24,899
I can take this key data

434
00:26:24,899 --> 00:26:30,330
I am and you'll notice this is on
gossamer threads whatever that is

435
00:26:30,330 --> 00:26:33,830
the interesting thing here is that Mikey

436
00:26:33,830 --> 00:26:37,700
in this protected bypass race that only
I know

437
00:26:37,700 --> 00:26:40,700
you're gonna know in the second cuz I
wanna tell you so you can test this

438
00:26:40,700 --> 00:26:41,590
yourself

439
00:26:41,590 --> 00:26:45,259
up the a

440
00:26:45,259 --> 00:26:49,909
this storage up Mikey is not up to me
anymore

441
00:26:49,909 --> 00:26:52,909
I don't I don't have to worry about
storing this key

442
00:26:52,909 --> 00:26:56,200
I don't have to worry about access to
the key once I post on poor disclosure

443
00:26:56,200 --> 00:26:57,850
it is replicated

444
00:26:57,850 --> 00:27:01,330
to many many many different lists backed
up

445
00:27:01,330 --> 00:27:05,749
a propagated throughout the Internet I
never have to worry about paying for the

446
00:27:05,749 --> 00:27:06,440
data

447
00:27:06,440 --> 00:27:10,769
I never have to worry about being
responsible for the day to existing

448
00:27:10,769 --> 00:27:14,480
if I A had something questionable which
course I never do you

449
00:27:14,480 --> 00:27:19,529
that I wanted to encrypt but have access
to I could very easily post that data

450
00:27:19,529 --> 00:27:23,850
and in Kelowna other people to store it
for me and to back it up for me

451
00:27:23,850 --> 00:27:27,850
anti-war a habit I available anytime I
want

452
00:27:27,850 --> 00:27:32,129
and I think this is an a a very good
example that because it's been over a

453
00:27:32,129 --> 00:27:33,009
year

454
00:27:33,009 --> 00:27:36,759
year-and-a-half maybe and here's my date
and I have

455
00:27:36,759 --> 00:27:40,080
for ready access to it I am

456
00:27:40,080 --> 00:27:43,149
so if I come up here

457
00:27:43,149 --> 00:27:46,480
what I've done as I posted it here the
KU NV

458
00:27:46,480 --> 00:27:49,710
kaun be I you'll see here

459
00:27:49,710 --> 00:27:53,450
um I posted this data here arm and I

460
00:27:53,450 --> 00:27:57,129
broke it up nicely you'll see a fight is
pasted

461
00:27:57,129 --> 00:28:01,759
its kinda little little messy and for
whatever reason the backspace

462
00:28:01,759 --> 00:28:04,769
sludge didn't come in there I'm not
going to undo those changes but you'll

463
00:28:04,769 --> 00:28:05,830
see that's the same

464
00:28:05,830 --> 00:28:09,460
that's the 0 I'm not gonna %um I am

465
00:28:09,460 --> 00:28:13,659
so we have that we have that key data
now

466
00:28:13,659 --> 00:28:18,200
what I want to do is I am

467
00:28:18,200 --> 00:28:21,299
go to Facebook

468
00:28:21,299 --> 00:28:25,039
you probably shouldn't show you this and
I'm going to look for from the mine

469
00:28:25,039 --> 00:28:30,629
whose name is proven Tang interesting
name

470
00:28:30,629 --> 00:28:34,419
and so

471
00:28:34,419 --> 00:28:37,490
let's see

472
00:28:37,490 --> 00:28:41,499
I some I'm going to

473
00:28:41,499 --> 00:28:45,470
actually I believe I sent him a message
the

474
00:28:45,470 --> 00:28:52,470
and there it is group that's from Steve
sorry I don't you see all this so

475
00:28:53,039 --> 00:28:56,820
right so here we have

476
00:28:56,820 --> 00:29:00,850
I am a message that I set

477
00:29:00,850 --> 00:29:05,490
to whom

478
00:29:05,490 --> 00:29:09,279
when I'm gonna do select all over which
that's not gonna work

479
00:29:09,279 --> 00:29:14,720
we come up here Larma

480
00:29:14,720 --> 00:29:21,720
Facebook sucks

481
00:29:23,690 --> 00:29:26,700
could make it easy but they don't

482
00:29:26,700 --> 00:29:33,700
why don't you make it easy Facebook

483
00:29:37,470 --> 00:29:40,600
this is actually pretty cool copy

484
00:29:40,600 --> 00:29:43,910
some disco copy this data it's all and I
mean you'll see

485
00:29:43,910 --> 00:29:47,640
still has the the tags I

486
00:29:47,640 --> 00:29:51,270
and create a new file here I'm just
gonna pace that data into it

487
00:29:51,270 --> 00:29:55,630
paste so here is the data that I had
posted on Facebook

488
00:29:55,630 --> 00:29:59,440
um and I'm gonna save it and

489
00:29:59,440 --> 00:30:03,790
and I'm just gonna call is it church
hash days

490
00:30:03,790 --> 00:30:07,940
demo dot GGP

491
00:30:07,940 --> 00:30:13,300
be and so now

492
00:30:13,300 --> 00:30:17,820
and want to load the key fob

493
00:30:17,820 --> 00:30:21,320
before disclosure for

494
00:30:21,320 --> 00:30:25,280
and password is I pound your mom

495
00:30:25,280 --> 00:30:28,730
who that sounds dirty than I am

496
00:30:28,730 --> 00:30:32,100
yep loaded ekie farm

497
00:30:32,100 --> 00:30:35,860
and so now I'm going to D crypt the file
that we just created

498
00:30:35,860 --> 00:30:39,660
which it is not

499
00:30:39,660 --> 00:30:44,380
the here hash days damone

500
00:30:44,380 --> 00:30:47,980
own yet PPG

501
00:30:47,980 --> 00:30:52,850
sorry I'm stupid and I'm going to you I
know it's a spreadsheet

502
00:30:52,850 --> 00:30:56,660
and I'm just gonna call an XML us and
Linda D cryptid

503
00:30:56,660 --> 00:31:02,130
and then actually let me do that again

504
00:31:02,130 --> 00:31:07,210
a.m. d crypt

505
00:31:07,210 --> 00:31:11,880
as I want to you you notice that the
actual file

506
00:31:11,880 --> 00:31:18,880
extensions don't matter a.m.

507
00:31:27,169 --> 00:31:30,039
and what you're not seeing over here

508
00:31:30,039 --> 00:31:37,039
is and I'm

509
00:31:39,389 --> 00:31:42,559
I lied a deposit and that's because

510
00:31:42,559 --> 00:31:45,779
I for got the extension up an Excel
spreadsheet

511
00:31:45,779 --> 00:31:49,889
sorry char world only human so let's
just do this again

512
00:31:49,889 --> 00:31:55,109
I'm going to d cryptic the hash days
demo

513
00:31:55,109 --> 00:32:00,059
file and I'm going to select the hash
days

514
00:32:00,059 --> 00:32:04,429
XLS spreadsheet I replace it and say
okay

515
00:32:04,429 --> 00:32:08,419
and then BAM what we do is we load my
secret data and what have you

516
00:32:08,419 --> 00:32:12,169
so this is the file that I posted on
Facebook and

517
00:32:12,169 --> 00:32:15,849
the key was retrieved from full
disclosure so

518
00:32:15,849 --> 00:32:19,679
what I find very interesting this is and
this is an allergist to

519
00:32:19,679 --> 00:32:22,940
cloud encryption is that I can store

520
00:32:22,940 --> 00:32:26,279
both mine cryptid Keydata and lying
cryptid

521
00:32:26,279 --> 00:32:29,839
file data elsewhere and

522
00:32:29,839 --> 00:32:33,349
and forums where I don't have to pay for
it

523
00:32:33,349 --> 00:32:36,859
I don't have to be responsible for the
content of the data

524
00:32:36,859 --> 00:32:41,149
which is very interesting concept and I
i don't have to maintain the David

525
00:32:41,149 --> 00:32:45,349
and it's going to be here forever I very
well could have just posted that

526
00:32:45,349 --> 00:32:49,969
spreadsheet to full disclosure or DSL
reports or somewhere else and it would

527
00:32:49,969 --> 00:32:50,609
be there

528
00:32:50,609 --> 00:32:54,769
for ever and ever and anytime any to
that data I could be in Bangkok

529
00:32:54,769 --> 00:32:59,309
and go to a way I web cafe to pull up
the

530
00:32:59,309 --> 00:33:03,119
key file data and then dump it directly
into tgp

531
00:33:03,119 --> 00:33:08,440
I'm you'll see actually to a show you
that a.m.

532
00:33:08,440 --> 00:33:14,409
iraqi Dropbox working as a drop the key

533
00:33:14,409 --> 00:33:18,269
directly into the excusable but I can
launch from the internet I'm so there's

534
00:33:18,269 --> 00:33:19,739
there's some very interesting

535
00:33:19,739 --> 00:33:24,489
aspects this um and I think it's one
were it's worth your consideration

536
00:33:24,489 --> 00:33:27,839
to how you can leverage different

537
00:33:27,839 --> 00:33:31,259
different paradise to

538
00:33:31,259 --> 00:33:35,789
distribute and store your data so let's
get

539
00:33:35,789 --> 00:33:39,099
into a a little bit more

540
00:33:39,099 --> 00:33:43,919
detail where specific cloud solutions

541
00:33:43,919 --> 00:33:48,129
are effective cloud solutions are going
to

542
00:33:48,129 --> 00:33:51,919
require really requires I say depend
upon

543
00:33:51,919 --> 00:33:55,119
a robust key management and encryption
models

544
00:33:55,119 --> 00:33:59,759
I we need logical and physical
separation a key material from the

545
00:33:59,759 --> 00:34:00,659
encrypt the data

546
00:34:00,659 --> 00:34:04,210
so that instances like this cannot occur

547
00:34:04,210 --> 00:34:08,129
because we don't want a compromise for
the server to yield the key

548
00:34:08,129 --> 00:34:12,960
that then yields the data what we want
is to physically separate the key data

549
00:34:12,960 --> 00:34:18,879
from the encrypt the data we need a it
as such we will need a flexible

550
00:34:18,879 --> 00:34:20,500
authentication infrastructure

551
00:34:20,500 --> 00:34:23,629
we will need to be able to to

552
00:34:23,629 --> 00:34:26,950
create an access environment

553
00:34:26,950 --> 00:34:30,319
to wear different users will have access
to different keys

554
00:34:30,319 --> 00:34:33,440
in order to D crypt different said today
to um

555
00:34:33,440 --> 00:34:36,789
let me jump forward here to acquit model
so

556
00:34:36,789 --> 00:34:40,619
what I've done is written AAPI called
rainmaker I'm

557
00:34:40,619 --> 00:34:43,649
a you know camera gotten Thunder

558
00:34:43,649 --> 00:34:48,520
clout rainmaker it it it worked in my
head sorry

559
00:34:48,520 --> 00:34:53,109
I where what we'll do is worried look
kinda define what we're looking at here

560
00:34:53,109 --> 00:34:57,099
we have our cloud services which could
be anywhere we have the rainmaker APIs

561
00:34:57,099 --> 00:34:58,470
which is what I'm providing

562
00:34:58,470 --> 00:35:02,309
or what you could run on your servers or
in fact a different cloud provider

563
00:35:02,309 --> 00:35:06,430
so the usual request data from our cloud
services

564
00:35:06,430 --> 00:35:11,770
in this case we see that the encrypt a
date is tagged with an XML very similar

565
00:35:11,770 --> 00:35:14,210
to the two GP files other church earlier

566
00:35:14,210 --> 00:35:17,990
we have a crypto blog here but we also a
plain-text dated

567
00:35:17,990 --> 00:35:21,299
doesn't need to be in cryptid that we
don't care if people see

568
00:35:21,299 --> 00:35:26,200
abut embedded in here's a crypto Bob and
a corset is all the next email

569
00:35:26,200 --> 00:35:31,279
it is very easily parsed out
programmatically this crypto blob data

570
00:35:31,279 --> 00:35:34,849
will identify particular key material

571
00:35:34,849 --> 00:35:38,720
that's required to D cryptic this key
material

572
00:35:38,720 --> 00:35:42,119
will be retrieved from the rainmaker API

573
00:35:42,119 --> 00:35:45,859
the key will then be used to decrease
the data and hear what we see is this an

574
00:35:45,859 --> 00:35:47,089
IP address for some

575
00:35:47,089 --> 00:35:50,480
you know very common a thing to store

576
00:35:50,480 --> 00:35:53,650
I am the the options

577
00:35:53,650 --> 00:35:58,150
2d crypt or to secure the keys that we
have here

578
00:35:58,150 --> 00:36:01,210
are very I I

579
00:36:01,210 --> 00:36:04,500
very well could this would be all in a
cryptid call

580
00:36:04,500 --> 00:36:08,329
over SSL I could base my delivery of the
key

581
00:36:08,329 --> 00:36:11,579
on the authentication request the source
%uh

582
00:36:11,579 --> 00:36:15,630
the call a number of different things I
could have a

583
00:36:15,630 --> 00:36:19,779
certificate from the cloud services we
could have any number abide in a fine

584
00:36:19,779 --> 00:36:22,220
criteria that validate the call

585
00:36:22,220 --> 00:36:26,829
and I could either deliver the key
itself or as you saw with tgp I could

586
00:36:26,829 --> 00:36:30,309
require some sort of secondary
encryption mechanism or D Christian

587
00:36:30,309 --> 00:36:31,329
mechanism

588
00:36:31,329 --> 00:36:35,539
the the problem that we get into I with
protecting keys

589
00:36:35,539 --> 00:36:38,789
as you've seen that I have a

590
00:36:38,789 --> 00:36:43,109
I've actually encrypt it my private key
and so I D crypt the encrypt it private

591
00:36:43,109 --> 00:36:43,839
key

592
00:36:43,839 --> 00:36:47,869
with a passphrase and that name the
cryptid private key is then used to

593
00:36:47,869 --> 00:36:48,670
decrease

594
00:36:48,670 --> 00:36:54,259
the AES key that's in cryptid within the
crypto blob and then D crypt the data so

595
00:36:54,259 --> 00:36:57,710
we find urself tumbling down this road
this rabbit hole

596
00:36:57,710 --> 00:37:02,289
I at some point you have to stop
protecting whatever it is that you're

597
00:37:02,289 --> 00:37:04,630
using to protect whatever else was
school

598
00:37:04,630 --> 00:37:07,690
came before the model and I

599
00:37:07,690 --> 00:37:11,500
that's where we have authentication
infrastructures that will validate the

600
00:37:11,500 --> 00:37:13,119
access to the key

601
00:37:13,119 --> 00:37:17,220
I so I very well could protect the key
that are used to protect the key and

602
00:37:17,220 --> 00:37:19,339
blah blah blah but you find yourself

603
00:37:19,339 --> 00:37:23,029
kind of concatenated logic together and
become some workable

604
00:37:23,029 --> 00:37:27,150
so in this case I am I

605
00:37:27,150 --> 00:37:32,549
in this example rather we are using
authenticated calls to deliver the key

606
00:37:32,549 --> 00:37:35,549
I am which is better still

607
00:37:35,549 --> 00:37:39,329
then this environment I am

608
00:37:39,329 --> 00:37:44,730
the I A the the key itself is not
readily available

609
00:37:44,730 --> 00:37:49,359
I am they would have to break down to
the code they would have to do a number

610
00:37:49,359 --> 00:37:53,210
I love I mean you might say well if I on
that server and that servers the one

611
00:37:53,210 --> 00:37:54,670
making the call to the key

612
00:37:54,670 --> 00:37:58,029
with the user's actually the one making
the call to the key in this case

613
00:37:58,029 --> 00:38:01,319
so you still separated logically and
physically so that have to own the

614
00:38:01,319 --> 00:38:01,910
server

615
00:38:01,910 --> 00:38:05,059
and that have to own the user you've
made it very very difficult for an

616
00:38:05,059 --> 00:38:05,720
attack

617
00:38:05,720 --> 00:38:09,160
to be successful here so we

618
00:38:09,160 --> 00:38:13,140
retrieve the data from the cloud
services we retrieve the key data from

619
00:38:13,140 --> 00:38:16,520
the rainmaker API then we decry the data
which is consumed

620
00:38:16,520 --> 00:38:22,140
by the user so the other interesting
thing years for the data access can be

621
00:38:22,140 --> 00:38:23,950
granted on a mini 21 basis

622
00:38:23,950 --> 00:38:27,240
rather than a one to many basis that the
peer to peer PK

623
00:38:27,240 --> 00:38:30,299
KP I PK I rather um

624
00:38:30,299 --> 00:38:34,750
normally requires are I'm the only one
who can decrease my data

625
00:38:34,750 --> 00:38:38,529
so I can distribute my public key to
everyone in the world

626
00:38:38,529 --> 00:38:41,809
they will encrypt data for me

627
00:38:41,809 --> 00:38:45,579
send it to me or I consume it from so
resource

628
00:38:45,579 --> 00:38:49,549
and then I'm the only one who can be
cryptid well with a

629
00:38:49,549 --> 00:38:54,039
with a API and a key management system
such as this

630
00:38:54,039 --> 00:39:00,240
as I can determine who has access to
this key in order to the crib today to

631
00:39:00,240 --> 00:39:03,400
so in the Facebook paradigm I could

632
00:39:03,400 --> 00:39:07,849
have all of my friends and in fact I can
use Facebook's authentication

633
00:39:07,849 --> 00:39:08,980
infrastructure

634
00:39:08,980 --> 00:39:13,809
a friend's programmatically to give my
friends access to the key so I could

635
00:39:13,809 --> 00:39:16,210
plug I could write a plugin for Facebook

636
00:39:16,210 --> 00:39:19,549
and which I am and

637
00:39:19,549 --> 00:39:23,509
I am use the Facebook authentication
infrastructure

638
00:39:23,509 --> 00:39:27,599
to gain access to key materials to all
my friends

639
00:39:27,599 --> 00:39:31,250
can get the key 2d crypt whatever it is
that I post on Facebook and they're the

640
00:39:31,250 --> 00:39:33,020
only ones who have access to it

641
00:39:33,020 --> 00:39:35,599
now a study group today they can do
whatever they want with it but that's

642
00:39:35,599 --> 00:39:38,049
consistent for any encryption pair

643
00:39:38,049 --> 00:39:43,079
so I that's the interesting thing we
know many people accessing the same key

644
00:39:43,079 --> 00:39:47,180
to decrypt the data in fact we can have
that key encrypt it multiple times were

645
00:39:47,180 --> 00:39:49,170
only they can decry the record

646
00:39:49,170 --> 00:39:53,200
that's associated with that key just for
them and then that way if they a

647
00:39:53,200 --> 00:39:54,980
compromise that key

648
00:39:54,980 --> 00:39:58,890
they won't be able to use it continually
which is also very interesting so I can

649
00:39:58,890 --> 00:40:00,609
control access on a user

650
00:40:00,609 --> 00:40:05,279
by User basis and have multiple records
within my key API

651
00:40:05,279 --> 00:40:09,079
that I can control who has access to the
key to where they can be crib that data

652
00:40:09,079 --> 00:40:11,329
but if that users compromise I can

653
00:40:11,329 --> 00:40:15,200
I can delete their record I can do
whatever I want

654
00:40:15,200 --> 00:40:18,319
so that it's really very flexible and I
think that's cool

655
00:40:18,319 --> 00:40:22,790
um so imagine so based based on that

656
00:40:22,790 --> 00:40:26,819
right a a match in the system where

657
00:40:26,819 --> 00:40:29,930
we have access to key data rather than
Ackles

658
00:40:29,930 --> 00:40:33,059
that are associated with the file
structure the other way Ackles workers

659
00:40:33,059 --> 00:40:37,329
just the operating system will look at
this meta data associated with the file

660
00:40:37,329 --> 00:40:42,410
and say does this guy have access to it
yes or no if you dive into the st. DL

661
00:40:42,410 --> 00:40:45,690
a and and Windows you'll see that it's

662
00:40:45,690 --> 00:40:48,739
a very simple to text based

663
00:40:48,739 --> 00:40:52,359
a from nomenclature where it says what's
said

664
00:40:52,359 --> 00:40:57,290
has access to what data that's it and so
it's obviously a collection

665
00:40:57,290 --> 00:41:01,009
have said for um files that have

666
00:41:01,009 --> 00:41:04,549
a to access many users have access to
those files

667
00:41:04,549 --> 00:41:07,859
but imagine if what we did is rather
than distribute Ackles

668
00:41:07,859 --> 00:41:11,790
we distributed keys i think is very
interesting particularly from a database

669
00:41:11,790 --> 00:41:12,819
standpoint

670
00:41:12,819 --> 00:41:16,180
some you might be thinking yeah this is
great for file by file but what about a

671
00:41:16,180 --> 00:41:18,270
database where we have a single record

672
00:41:18,270 --> 00:41:22,420
and that's where it gets tricky and that
the solution could very well be

673
00:41:22,420 --> 00:41:25,750
I don't know this I was just an idea
that I have any to to look at a little

674
00:41:25,750 --> 00:41:26,420
bit more

675
00:41:26,420 --> 00:41:30,779
but it beat it kind of change the ako
paradigm to

676
00:41:30,779 --> 00:41:34,279
extend to Keydata rather than a.m.

677
00:41:34,279 --> 00:41:38,069
rather than strict tackles and I think
that's a

678
00:41:38,069 --> 00:41:42,040
was pretty interesting so let some let's
do a demo b.s

679
00:41:42,040 --> 00:41:46,750
I am I'm going to kinda branch out a
little bit here

680
00:41:46,750 --> 00:41:50,670
because in order for this to be
effective

681
00:41:50,670 --> 00:41:54,099
what we really want what we need to do
is illustrate the capability

682
00:41:54,099 --> 00:41:58,079
above consumption over encrypt the data
across different platforms

683
00:41:58,079 --> 00:42:01,290
so I am this is a

684
00:42:01,290 --> 00:42:04,950
this is actually quite cool I've written
a

685
00:42:04,950 --> 00:42:08,549
tgp mobile let me get rid of this

686
00:42:08,549 --> 00:42:13,339
which I am your you'll see I have a
break point here

687
00:42:13,339 --> 00:42:17,290
so I am I'll show you that in a sec

688
00:42:17,290 --> 00:42:20,750
what tgp mobile is

689
00:42:20,750 --> 00:42:25,079
is an actual Windows Phone

690
00:42:25,079 --> 00:42:28,309
conversion ok tgp

691
00:42:28,309 --> 00:42:34,250
that if it will overload I you will see

692
00:42:34,250 --> 00:42:37,770
here we go I'm what what we have

693
00:42:37,770 --> 00:42:42,430
I'll what happen

694
00:42:42,430 --> 00:42:46,549
what we have is a Windows Phone

695
00:42:46,549 --> 00:42:49,670
version above

696
00:42:49,670 --> 00:42:54,290
tgp that will allow us to decode data

697
00:42:54,290 --> 00:42:58,529
that was encoded on the PC and as far as
I know sicily

698
00:42:58,529 --> 00:43:02,160
a the only application that does this so

699
00:43:02,160 --> 00:43:07,839
let me I am let me run tgp when here
real quick

700
00:43:07,839 --> 00:43:11,849
I think this is pretty cool and so and
this example under sweeney use ates

701
00:43:11,849 --> 00:43:14,900
and the reason not to have a break point
is because I want to convert it to

702
00:43:14,900 --> 00:43:16,230
base64

703
00:43:16,230 --> 00:43:21,309
current version A tgp actually stores
ATS encrypt the data in binary form

704
00:43:21,309 --> 00:43:25,259
I am because I wanted the to save disk
space

705
00:43:25,259 --> 00:43:28,650
it I'm not gonna I'm gonna I'm gonna
change that a.m.

706
00:43:28,650 --> 00:43:32,410
its actual changes in this version so
I'm gonna AES encryption

707
00:43:32,410 --> 00:43:37,250
and so let's do a I am

708
00:43:37,250 --> 00:43:40,460
you know one might just change the the
data

709
00:43:40,460 --> 00:43:44,130
I'm going to have a tgp text

710
00:43:44,130 --> 00:43:48,470
to basket rather that this boulder

711
00:43:48,470 --> 00:43:51,920
I am so we would just

712
00:43:51,920 --> 00:43:55,020
I am called this

713
00:43:55,020 --> 00:43:59,329
america's just to make it simple

714
00:43:59,329 --> 00:44:03,690
are I'll save that bottoming

715
00:44:03,690 --> 00:44:09,069
and let's just make sure bus reload it
says Merry Christmas an ass

716
00:44:09,069 --> 00:44:12,599
2gb 2x merrychristmas s what we have

717
00:44:12,599 --> 00:44:16,290
and I'm gonna get ready this issue
people don't see my ike's

718
00:44:16,290 --> 00:44:21,380
you don't see any in my post because
that's personal style

719
00:44:21,380 --> 00:44:24,690
like I care okay so I'm going to

720
00:44:24,690 --> 00:44:28,589
choose that file tgp text to

721
00:44:28,589 --> 00:44:32,710
and their numbers going to create the
AES file over got this breakpoint

722
00:44:32,710 --> 00:44:37,690
here's my the passphrase only choose a
crappy pass rate

723
00:44:37,690 --> 00:44:41,660
I you'll see that it takes point users
are eight seconds to crack

724
00:44:41,660 --> 00:44:45,160
with the five character pass rates I am

725
00:44:45,160 --> 00:44:48,670
and I'm doing that for a reason you're
seeing so I say okay so what I wanna do

726
00:44:48,670 --> 00:44:49,779
now

727
00:44:49,779 --> 00:44:54,220
is I'm gonna take that MemoryStream

728
00:44:54,220 --> 00:44:57,819
saw bankrupted the state at using a
crypto stream

729
00:44:57,819 --> 00:45:01,529
to a MemoryStream based on an AS a

730
00:45:01,529 --> 00:45:07,099
the object and now I'm just going to
convert that to a base64

731
00:45:07,099 --> 00:45:14,099
and let's see what that guy is so here
we have this here's at base64

732
00:45:14,759 --> 00:45:17,960
string now the windows

733
00:45:17,960 --> 00:45:21,009
on to Windows Phone

734
00:45:21,009 --> 00:45:26,210
implementation is a little tricky
because we don't have a file we have a

735
00:45:26,210 --> 00:45:31,259
isolated storage that we can use project
to get the David there somehow

736
00:45:31,259 --> 00:45:35,609
so typically the model is going to be
that you reach out and grab that data

737
00:45:35,609 --> 00:45:39,559
either via a web service or what have
you sung by synthesize that

738
00:45:39,559 --> 00:45:43,880
here by going in to

739
00:45:43,880 --> 00:45:49,489
a file that our store on the web and
gonna save this guy

740
00:45:49,489 --> 00:45:52,630
and I hope that that refreshes

741
00:45:52,630 --> 00:45:55,980
I am and

742
00:45:55,980 --> 00:46:00,119
let's go back to RT GP mobile so
basically what I did

743
00:46:00,119 --> 00:46:03,739
was I went to my Web server and stored
that file okay that might seem like it's

744
00:46:03,739 --> 00:46:05,119
cheating a little bit

745
00:46:05,119 --> 00:46:08,640
um mmm but out what I want to do is

746
00:46:08,640 --> 00:46:14,640
do the make it to make this
demonstration kinda simple

747
00:46:14,640 --> 00:46:20,839
so home I will go to my rainmaker API

748
00:46:20,839 --> 00:46:25,470
I'm gonna change this season as you see

749
00:46:25,470 --> 00:46:28,900
everything i cant even I can even use my
keyboard right so

750
00:46:28,900 --> 00:46:32,380
your maybe this makes a little bit more
sense of why did it like that

751
00:46:32,380 --> 00:46:35,750
txt because this kind of a pain

752
00:46:35,750 --> 00:46:38,920
Lala mango

753
00:46:38,920 --> 00:46:43,190
and is super tiny sorry that's just the
way that that is but I'm gonna take this

754
00:46:43,190 --> 00:46:44,180
data

755
00:46:44,180 --> 00:46:51,180
una copia and let's go back here

756
00:46:52,460 --> 00:46:54,140
group

757
00:46:54,140 --> 00:47:01,140
and run that guy again know it's going
to be gone isn't

758
00:47:02,940 --> 00:47:06,850
not text earlier

759
00:47:06,850 --> 00:47:10,230
paster so

760
00:47:10,230 --> 00:47:14,630
there is that data I think I grabbed it

761
00:47:14,630 --> 00:47:21,630
from

762
00:47:21,980 --> 00:47:26,400
something happened didn't give me all
over

763
00:47:26,400 --> 00:47:30,450
6 you to return Ashton ash

764
00:47:30,450 --> 00:47:35,410
so the

765
00:47:35,410 --> 00:47:40,280
equal equal did not show up for this in
a very great to

766
00:47:40,280 --> 00:47:47,280
demo Andy crypt

767
00:47:47,590 --> 00:47:50,750
and there's Merry Christmas so I

768
00:47:50,750 --> 00:47:54,220
the router the reason that we had a
little hiccup ears because whenever I

769
00:47:54,220 --> 00:47:55,470
downloaded this data

770
00:47:55,470 --> 00:47:58,610
I couldn't copy all a bit the interface
is really

771
00:47:58,610 --> 00:48:02,270
is not designed for this I would have a
web service that consumes that data

772
00:48:02,270 --> 00:48:03,010
however

773
00:48:03,010 --> 00:48:06,760
a the point i think is made I am

774
00:48:06,760 --> 00:48:10,600
that we can encrypt

775
00:48:10,600 --> 00:48:14,220
data on the PC and then D cryptid on the
phone and i was just a very simple there

776
00:48:14,220 --> 00:48:16,590
was just to show you the cross-platform
here's

777
00:48:16,590 --> 00:48:20,930
here's where it gets interesting I the
rainmaker API

778
00:48:20,930 --> 00:48:25,280
is basically a a

779
00:48:25,280 --> 00:48:28,700
webservice that

780
00:48:28,700 --> 00:48:32,560
a exposes a couple different methods
getting private key

781
00:48:32,560 --> 00:48:35,720
get key fob I have is alive and I have
post keys

782
00:48:35,720 --> 00:48:38,760
what this allows me to do was create
cues from

783
00:48:38,760 --> 00:48:43,060
either the phone or the PC post those
keys to the

784
00:48:43,060 --> 00:48:46,060
rainmaker API interface for later
retrieval

785
00:48:46,060 --> 00:48:50,190
and permissions on that are based on
Windows authentication in Crum

786
00:48:50,190 --> 00:48:51,140
credentials

787
00:48:51,140 --> 00:48:54,330
and the key is tagged to

788
00:48:54,330 --> 00:48:58,850
the individual keys are tagged that will
allow me access to those based on an

789
00:48:58,850 --> 00:49:02,290
authenticated call so to check this out

790
00:49:02,290 --> 00:49:05,750
I'm gonna do the only do the the same
thing here

791
00:49:05,750 --> 00:49:10,300
I'm let me poll

792
00:49:10,300 --> 00:49:14,570
up the tgp text

793
00:49:14,570 --> 00:49:19,290
you'll see it here so this is the text
that

794
00:49:19,290 --> 00:49:24,090
I'm going to transfer from my webservice

795
00:49:24,090 --> 00:49:28,300
right so a match in that this is the
same file that I did for Facebook

796
00:49:28,300 --> 00:49:32,030
right so I've I've help posted my a
cryptid data

797
00:49:32,030 --> 00:49:35,280
to Facebook and what I want to do

798
00:49:35,280 --> 00:49:38,400
this from my phone i'd

799
00:49:38,400 --> 00:49:43,710
I will consume the encrypt the data but
I don't want to store the key data

800
00:49:43,710 --> 00:49:49,260
I want to ensure that the key data
stored separately so if I lose my phone

801
00:49:49,260 --> 00:49:52,490
people won't be able to immediately D
crib that data

802
00:49:52,490 --> 00:49:55,930
and as you saw all whenever I loaded my
key fob

803
00:49:55,930 --> 00:49:59,330
I from so again

804
00:49:59,330 --> 00:50:04,650
when I wanted to load that the key
problem for disclosure

805
00:50:04,650 --> 00:50:07,710
that I posted let's just say load key
fob

806
00:50:07,710 --> 00:50:10,890
here I

807
00:50:10,890 --> 00:50:15,810
held your mom that was nice

808
00:50:15,810 --> 00:50:19,530
so I need to the passphrase to

809
00:50:19,530 --> 00:50:24,330
derived the bites necessary to generate
the AES key 2d crib that

810
00:50:24,330 --> 00:50:30,650
Rs a private key and a that passphrase
is still going to be required on the

811
00:50:30,650 --> 00:50:31,790
phone so

812
00:50:31,790 --> 00:50:36,470
its kinda but a in order to decrypt the
data could put on my pass race what is

813
00:50:36,470 --> 00:50:38,820
based on a cue that doesn't exist on the
phone itself

814
00:50:38,820 --> 00:50:42,940
so back to that I am

815
00:50:42,940 --> 00:50:46,350
start the sky over

816
00:50:46,350 --> 00:50:50,990
I love the stuff and I'm

817
00:50:50,990 --> 00:50:57,990
so these are just typical crypto I'm
gonna go to my

818
00:50:58,290 --> 00:51:01,830
by Rainmaker API again

819
00:51:01,830 --> 00:51:08,830
why are you doing this to me marna

820
00:51:09,600 --> 00:51:14,450
and

821
00:51:14,450 --> 00:51:17,830
to my rainmaker API in this time I'm
going to

822
00:51:17,830 --> 00:51:21,120
my web source I'm gonna pull that text
file

823
00:51:21,120 --> 00:51:24,740
and you'll see of course is super super
tiny and I'm sorry

824
00:51:24,740 --> 00:51:28,190
you my glasses on I can't read this but
one minute do

825
00:51:28,190 --> 00:51:33,840
is copy this data

826
00:51:33,840 --> 00:51:36,950
this is just a factor up to have the

827
00:51:36,950 --> 00:51:40,800
emulator interface right I'm going to

828
00:51:40,800 --> 00:51:43,970
go down here to

829
00:51:43,970 --> 00:51:48,910
my crypto blob

830
00:51:48,910 --> 00:51:51,810
in place that day two years and now
you'll see now you can see a little bit

831
00:51:51,810 --> 00:51:52,340
better

832
00:51:52,340 --> 00:51:56,500
so here's a crypto blob data again this
is the data that was transferred to the

833
00:51:56,500 --> 00:51:57,480
phone

834
00:51:57,480 --> 00:52:00,650
via my webservice here

835
00:52:00,650 --> 00:52:07,220
um and so now what I'm going to do

836
00:52:07,220 --> 00:52:12,440
is come up here to retrieve my key fob

837
00:52:12,440 --> 00:52:15,820
BAM so what's happened here

838
00:52:15,820 --> 00:52:21,140
is that I've analyze the data within the
crypto blob that was retrieved from a

839
00:52:21,140 --> 00:52:22,590
web service or whatever

840
00:52:22,590 --> 00:52:25,680
whatever source I want again it could be
Facebook could be any

841
00:52:25,680 --> 00:52:30,960
anything an IOP analyze that key that
crypto blog data to determine

842
00:52:30,960 --> 00:52:34,970
which key is necessary to the cryptid I
retrieve the key here

843
00:52:34,970 --> 00:52:38,280
on my mobile device which was generated
on the PC

844
00:52:38,280 --> 00:52:42,250
from an API and now if I wanted the

845
00:52:42,250 --> 00:52:46,960
D crib that data I would I have to put
in my past brace and then

846
00:52:46,960 --> 00:52:50,680
and NT crib that data um

847
00:52:50,680 --> 00:52:55,860
I think this is really really super cool
um

848
00:52:55,860 --> 00:53:00,150
the the capability something like this

849
00:53:00,150 --> 00:53:04,060
offers us is

850
00:53:04,060 --> 00:53:07,870
is required for true security in a cloud
environment

851
00:53:07,870 --> 00:53:11,080
as far as I'm concerned and that's to be
able to

852
00:53:11,080 --> 00:53:14,370
control have robust control

853
00:53:14,370 --> 00:53:18,850
love key access material cue material
access

854
00:53:18,850 --> 00:53:22,590
from multiple sources all multiple
platforms

855
00:53:22,590 --> 00:53:28,180
um Jack I i think i think that that's
very very interesting and I'm actually

856
00:53:28,180 --> 00:53:29,810
using this in production

857
00:53:29,810 --> 00:53:32,940
I'm at work and a couple a different
environments

858
00:53:32,940 --> 00:53:36,410
a so so we see here at that we've ever
discussed that

859
00:53:36,410 --> 00:53:40,970
model showed you the interface and
remotely accessing crib today to

860
00:53:40,970 --> 00:53:44,430
on the PC I am so

861
00:53:44,430 --> 00:53:47,440
that is the apt

862
00:53:47,440 --> 00:53:50,930
I'm some the resources they all have for

863
00:53:50,930 --> 00:53:54,660
a.m. the tgp product itself

864
00:53:54,660 --> 00:53:59,020
has hammered got tgp I my facebook page

865
00:53:59,020 --> 00:54:02,680
which I don't know why I just can't put
hammer God you have to put whatever this

866
00:54:02,680 --> 00:54:07,730
stupid you're all tag is here and of
course my direct email for it hammer

867
00:54:07,730 --> 00:54:10,950
God if you have any questions this
rainmaker API's going to be made

868
00:54:10,950 --> 00:54:11,610
available

869
00:54:11,610 --> 00:54:14,770
I've got some mom got some work to do on
that

870
00:54:14,770 --> 00:54:18,240
I but but in general

871
00:54:18,240 --> 00:54:22,350
what I hope that you've seen here is a
that I've given you

872
00:54:22,350 --> 00:54:25,510
I'm some food for thought on how

873
00:54:25,510 --> 00:54:29,370
you might go about securing your

874
00:54:29,370 --> 00:54:33,280
encrypt the data in a cloud environment
in a way

875
00:54:33,280 --> 00:54:36,650
that offers robust authentication
infrastructure stack says the key data

876
00:54:36,650 --> 00:54:39,700
gives you separation of the key data
from the encrypt the data

877
00:54:39,700 --> 00:54:42,950
and allows you one too many I am

878
00:54:42,950 --> 00:54:48,040
the know a one to many relationship to
wear multiple people can access the same

879
00:54:48,040 --> 00:54:51,280
encrypt the data without sharing the
same product key

880
00:54:51,280 --> 00:54:55,550
which is very cool cell thank you very
much for your time

881
00:54:55,550 --> 00:54:58,890
and again I'd like to thank the the hash
days guys for giving me the opportunity

882
00:54:58,890 --> 00:55:00,860
to share this data

883
00:55:00,860 --> 00:55:04,020
and I hope that you found it useful
thanks

