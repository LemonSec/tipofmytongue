1
00:00:00,299 --> 00:00:04,340
sauce going to show you guys I'm several
security attacks some of which I talked

2
00:00:04,340 --> 00:00:06,190
about it can sec West couple weeks ago

3
00:00:06,190 --> 00:00:10,589
and because I have less time than I had
anticipated I'm only going to

4
00:00:10,589 --> 00:00:14,200
I'm going to skip the can sequester tax
again secure boot and only talk about

5
00:00:14,200 --> 00:00:15,369
some new attacks at

6
00:00:15,369 --> 00:00:19,370
previously we have not discussed so if
you're interested in the other attacks

7
00:00:19,370 --> 00:00:22,210
and I'm you haven't seen the cancer
quest presentation

8
00:00:22,210 --> 00:00:26,230
I'll be happy to make myself available
after the presentation outside somewhere

9
00:00:26,230 --> 00:00:29,890
and I can show you those attacks as well
I'm not sure if the I can set my sights

10
00:00:29,890 --> 00:00:31,210
are available yet cell

11
00:00:31,210 --> 00:00:35,820
I can show them to you outside so anyway
like I said we'll be talking about some

12
00:00:35,820 --> 00:00:37,870
attacks against you if I secure be today

13
00:00:37,870 --> 00:00:40,899
and I developed this work along with
some my

14
00:00:40,899 --> 00:00:44,629
colleagues like Jon butterworth who is
here today as well some other people who

15
00:00:44,629 --> 00:00:45,510
are are not

16
00:00:45,510 --> 00:00:50,079
present today so to purposes so
conversation is why introduce the idea

17
00:00:50,079 --> 00:00:50,679
of the

18
00:00:50,679 --> 00:00:54,559
in our food chain where we have the now
where that's higher up

19
00:00:54,559 --> 00:00:58,359
at his fundamentally more powerful than
ours that's lower down

20
00:00:58,359 --> 00:01:02,069
so for instance your operating system
level rootkits are now wear whatever

21
00:01:02,069 --> 00:01:07,149
are fundamentally less privileged there
and the code that is higher up in this

22
00:01:07,149 --> 00:01:09,890
is because code it's higher up on this
particular diagram

23
00:01:09,890 --> 00:01:13,110
executes earlier during your system be a
process

24
00:01:13,110 --> 00:01:17,340
and code that executes earlier is just
fundamentally able to

25
00:01:17,340 --> 00:01:20,439
I server code that executes later I T
Ken

26
00:01:20,439 --> 00:01:23,990
patch the code is being later or
whatever so

27
00:01:23,990 --> 00:01:28,560
it's always beneficial for code from our
to execute earlier during the BIA

28
00:01:28,560 --> 00:01:29,340
process

29
00:01:29,340 --> 00:01:32,560
in the BIOS is the first code to XQ when
it though

30
00:01:32,560 --> 00:01:35,880
reset button so it's the most powerful
now are that we can have

31
00:01:35,880 --> 00:01:38,759
in this particular diagram we're not
talking about the management engine and

32
00:01:38,759 --> 00:01:39,930
things of that nature

33
00:01:39,930 --> 00:01:44,429
so as I said it's always advantageous
for

34
00:01:44,429 --> 00:01:49,079
on rootkits to try to claw their way up
this food chain and not too long ago it

35
00:01:49,079 --> 00:01:49,429
was

36
00:01:49,429 --> 00:01:52,439
perfectly permissible for

37
00:01:52,439 --> 00:01:56,020
a compromise operating system to go all
the way up the food chain

38
00:01:56,020 --> 00:02:00,109
to make rights to the SPI flash chip
containing the BIOS and saw a bias

39
00:02:00,109 --> 00:02:00,649
rootkit

40
00:02:00,649 --> 00:02:04,700
as well as replace the the master boot
record with the boot kit or something

41
00:02:04,700 --> 00:02:05,299
like that

42
00:02:05,299 --> 00:02:08,909
this is all Costa Rica do that they were
there is nothing stopping you from doing

43
00:02:08,909 --> 00:02:09,509
this

44
00:02:09,509 --> 00:02:14,610
and so within the past two years signed
by its requirement has come into vogue

45
00:02:14,610 --> 00:02:19,099
and this will prevent even compromise
rings Eurocode from writing

46
00:02:19,099 --> 00:02:23,330
directly to the flash chip that contains
the buyers so it shouldn't be

47
00:02:23,330 --> 00:02:26,940
possible for a compromise kernel driver
to just

48
00:02:26,940 --> 00:02:32,349
make arbitrary rights to the bias Cohen
and

49
00:02:32,349 --> 00:02:37,170
signed by its requirement unfortunately
doesn't do anything to address the other

50
00:02:37,170 --> 00:02:38,170
booted concern

51
00:02:38,170 --> 00:02:43,290
and actually boo kits are more popular
these days because

52
00:02:43,290 --> 00:02:46,760
with later versions of Windows it's a
case that you can just inject

53
00:02:46,760 --> 00:02:50,099
arbitrate going to the kernel because at
the sign driver requirement

54
00:02:50,099 --> 00:02:53,560
and so boot kits became a pretty popular
way to try to you

55
00:02:53,560 --> 00:02:57,140
bypasses requirement you would replace
the bootloader this would allow you to

56
00:02:57,140 --> 00:02:59,620
get code execution before into US
colonel was looted

57
00:02:59,620 --> 00:03:02,870
and then you could just installed looks
and in the US analyze it was leading

58
00:03:02,870 --> 00:03:08,959
before it ever had a chance to establish
the at the sign driver requirement so

59
00:03:08,959 --> 00:03:13,349
you if I is now on most your new systems
and a new system that will go out and

60
00:03:13,349 --> 00:03:16,700
buy today will probably have you if I as
opposed to conventional bias

61
00:03:16,700 --> 00:03:20,400
it is part of the UEFI specification
they introduces secure

62
00:03:20,400 --> 00:03:24,180
would feature which was just designed to
fill in that

63
00:03:24,180 --> 00:03:31,180
bootloader gap so the way this works is
unlike the signed by us requirement a

64
00:03:31,909 --> 00:03:36,030
a compromise offering system can replace
a bit later the master boot record

65
00:03:36,030 --> 00:03:39,720
and the the right will stick but I am

66
00:03:39,720 --> 00:03:43,250
during the cleanup process secure boot
here's going to discover that the at the

67
00:03:43,250 --> 00:03:43,620
river

68
00:03:43,620 --> 00:03:48,540
the replaced malicious bootloader is not
a Kb cryptographically verified

69
00:03:48,540 --> 00:03:53,290
so it's just going to say you know no
good I'm not going to arm

70
00:03:53,290 --> 00:03:56,290
actually excuse you so this is
essentially just

71
00:03:56,290 --> 00:04:03,290
relegated to a denial of service attack
so the way old this works

72
00:04:03,360 --> 00:04:06,659
is from UEFI

73
00:04:06,659 --> 00:04:09,790
has these if I variables which are also
on the

74
00:04:09,790 --> 00:04:14,360
SPI flash chip some of them are not
authenticated which means see an

75
00:04:14,360 --> 00:04:17,690
the operating system can change is not
authenticated variables at will

76
00:04:17,690 --> 00:04:21,229
they can contain things like the boot
order for the system in the language and

77
00:04:21,229 --> 00:04:22,460
so forth and so on

78
00:04:22,460 --> 00:04:24,830
but then you also have the is
authenticated variables which are

79
00:04:24,830 --> 00:04:26,250
security critical

80
00:04:26,250 --> 00:04:29,780
they contain things like the N the allow
list

81
00:04:29,780 --> 00:04:33,000
applications to run during the process
is both

82
00:04:33,000 --> 00:04:37,250
as well as the key is used to sign the
the allow the executors balls

83
00:04:37,250 --> 00:04:41,310
and so on

84
00:04:41,310 --> 00:04:44,520
so what's pretty interesting about this
setup is

85
00:04:44,520 --> 00:04:48,699
on the same medium the SPI flash chip
that contains your BIOS your platform

86
00:04:48,699 --> 00:04:49,430
firmware

87
00:04:49,430 --> 00:04:54,360
you also had these on non-volatile
variable some of which are authenticated

88
00:04:54,360 --> 00:04:55,660
some of which are not

89
00:04:55,660 --> 00:04:58,610
authenticate it's a summer which should
be changed or other one should not be

90
00:04:58,610 --> 00:05:03,389
arbitrarily modifiable

91
00:05:03,389 --> 00:05:06,490
so we have to think about how can we
have some

92
00:05:06,490 --> 00:05:10,470
hasn't typeof granular security policy
that makes it so that

93
00:05:10,470 --> 00:05:14,350
the UEFI code is never right appalled by
the operating system because like I said

94
00:05:14,350 --> 00:05:17,560
you should be able to arbitrarily modify
the platform firmware

95
00:05:17,560 --> 00:05:24,100
but he is non-volatile variables can be
updated by the operating system

96
00:05:24,100 --> 00:05:27,569
so to do this we really have to look at
the Intel

97
00:05:27,569 --> 00:05:30,710
SPI flash protection mechanisms so on
your

98
00:05:30,710 --> 00:05:35,270
Intel chipset will provide a number of
ways for the buyers and the operating

99
00:05:35,270 --> 00:05:37,370
system to work together to

100
00:05:37,370 --> 00:05:42,190
protect these differing regions at the
SPI flash chip

101
00:05:42,190 --> 00:05:45,199
and yet it's really up to the audience
to use these things in

102
00:05:45,199 --> 00:05:49,330
in an intelligent way which they often
don't

103
00:05:49,330 --> 00:05:55,250
so chief among these protection
mechanisms as the bias control register

104
00:05:55,250 --> 00:05:59,139
and if you look at it it's really quite
an interesting protection mechanism

105
00:05:59,139 --> 00:06:00,009
usually

106
00:06:00,009 --> 00:06:04,199
these the is bias registers are quite
simple

107
00:06:04,199 --> 00:06:08,479
an by Scott Roeder Shirley an exception
now you can see that there's a bias

108
00:06:08,479 --> 00:06:09,660
right enable

109
00:06:09,660 --> 00:06:13,639
date which does pretty much like what it
sounds if it's all one you should be

110
00:06:13,639 --> 00:06:14,759
able to write to you

111
00:06:14,759 --> 00:06:19,000
really certain regions at the bias and
then down

112
00:06:19,000 --> 00:06:22,270
there's aspires lock enabled it to the
way this normally look

113
00:06:22,270 --> 00:06:26,190
works when you have a la king bed is
that I you know

114
00:06:26,190 --> 00:06:29,949
the bias what set their bio psych enable
bit and that just means that you can

115
00:06:29,949 --> 00:06:31,800
change the bias reid enable that anymore

116
00:06:31,800 --> 00:06:36,550
that's not how this works on if you read
the text not sure if you can on

117
00:06:36,550 --> 00:06:40,060
on this is just from the the Intel
chipset documentation

118
00:06:40,060 --> 00:06:43,639
you can see that it's very complicated
it says that

119
00:06:43,639 --> 00:06:46,840
if the bias lock enable bit is set if
the

120
00:06:46,840 --> 00:06:50,009
I operating system earnings your code
attempts to

121
00:06:50,009 --> 00:06:53,889
set the bias write enable bit then an
SMI will be generated so it's

122
00:06:53,889 --> 00:06:57,430
permissible for rings Yoko to set the
bias running a little bit

123
00:06:57,430 --> 00:07:00,669
but if it's locked you'll have this
weird ass am i going on

124
00:07:00,669 --> 00:07:03,479
so it's whatever illustrate what's
actually happening here we have some

125
00:07:03,479 --> 00:07:04,379
diagrams

126
00:07:04,379 --> 00:07:08,259
just to make it more clear so this is
the way it's supposed to work

127
00:07:08,259 --> 00:07:12,810
we had some malicious ring 0 kernel
driver trying to make malicious rights

128
00:07:12,810 --> 00:07:13,550
to the biased

129
00:07:13,550 --> 00:07:17,419
the flash chip it sets bias write enable
21

130
00:07:17,419 --> 00:07:22,449
I and no tissue that bias lock enable is
also said

131
00:07:22,449 --> 00:07:26,759
so because it said is Sooners the
operating system sets by Astrid annual

132
00:07:26,759 --> 00:07:27,970
21

133
00:07:27,970 --> 00:07:31,430
an SMI is generated

134
00:07:31,430 --> 00:07:36,650
and this SMI is in theory supposed to
come in and set by Astrid enable

135
00:07:36,650 --> 00:07:41,259
back t0 so what's pretty interesting
here is that

136
00:07:41,259 --> 00:07:44,509
by a friend enable bit was set the one

137
00:07:44,509 --> 00:07:49,330
so by Astrid enable did occur but then
instantaneously system management which

138
00:07:49,330 --> 00:07:50,300
is of course this

139
00:07:50,300 --> 00:07:54,330
super privileged x86 mode even more
privilege in the hypervisor came in and

140
00:07:54,330 --> 00:07:54,900
said

141
00:07:54,900 --> 00:07:58,810
no no no you can actually do that not
pass go do not collect $200 dollars

142
00:07:58,810 --> 00:08:02,449
by Sharon able is zero

143
00:08:02,449 --> 00:08:06,050
and yeah I the end result is that in the
context the threat that attitude is said

144
00:08:06,050 --> 00:08:07,039
by Astrid enable

145
00:08:07,039 --> 00:08:10,590
it it never it was actually able to
exceed any cycles with the ad

146
00:08:10,590 --> 00:08:14,750
the bias unlocked or or write enable the
should say

147
00:08:14,750 --> 00:08:17,879
so that was the first mechanism it's
obviously quite complicated that sort of

148
00:08:17,879 --> 00:08:18,819
a really

149
00:08:18,819 --> 00:08:22,020
roundabout crazy way to protect spy
flash

150
00:08:22,020 --> 00:08:25,940
but there's other protection mechanisms
as well there these protected range

151
00:08:25,940 --> 00:08:26,610
registers

152
00:08:26,610 --> 00:08:30,449
and there much simpler they disallowed
to mascot certain regions are the spy

153
00:08:30,449 --> 00:08:31,379
flash

154
00:08:31,379 --> 00:08:36,450
as not readable or not writeable so the
bias during every startup will say

155
00:08:36,450 --> 00:08:41,120
this portion of the by at the at the spy
flash which corresponds to

156
00:08:41,120 --> 00:08:44,520
the UEFI coat or something else really
important like that is just

157
00:08:44,520 --> 00:08:48,370
not writeable period bike no crazy
protection mechanism is just not

158
00:08:48,370 --> 00:08:49,620
writeable period

159
00:08:49,620 --> 00:08:53,410
and nothing can touch this

160
00:08:53,410 --> 00:08:57,810
so those are the arm the main protection
mechanisms we have

161
00:08:57,810 --> 00:09:01,320
on the iris and x86 architecture but
they

162
00:09:01,320 --> 00:09:06,910
can basically both do the same thing you
can use either one to lock down the spy

163
00:09:06,910 --> 00:09:07,750
flash

164
00:09:07,750 --> 00:09:14,300
but arm there's sort have differing
levels of strength

165
00:09:14,300 --> 00:09:17,900
and that's because with protected rain
treasures even system management node

166
00:09:17,900 --> 00:09:18,990
can right to

167
00:09:18,990 --> 00:09:22,190
regions are this buy flash protected by
these protective and ranchers

168
00:09:22,190 --> 00:09:26,430
but system management node is
responsible for the security of bias

169
00:09:26,430 --> 00:09:28,760
control so system management can

170
00:09:28,760 --> 00:09:33,020
right to read is that the spy flash at
only associated with this bias control

171
00:09:33,020 --> 00:09:33,780
protection

172
00:09:33,780 --> 00:09:39,350
are protected with protected range
registers

173
00:09:39,350 --> 00:09:43,360
so just to further illustrate this in

174
00:09:43,360 --> 00:09:48,370
II actually I should say the a this
particular

175
00:09:48,370 --> 00:09:51,600
despite less protection mechanisms that
Intel provides us

176
00:09:51,600 --> 00:09:57,620
forced the UEFI architecture into the
following scenario

177
00:09:57,620 --> 00:10:02,070
S&M has to be responsible for doing the
rights

178
00:10:02,070 --> 00:10:05,270
at the EF I variables on

179
00:10:05,270 --> 00:10:09,700
if this isn't the case dan it wouldn't
necessarily be the case it just rings

180
00:10:09,700 --> 00:10:10,900
you're a good kid

181
00:10:10,900 --> 00:10:13,920
right to the if I variables and that
would be a

182
00:10:13,920 --> 00:10:16,490
an instant security vulnerability
because an operating system to change

183
00:10:16,490 --> 00:10:17,520
security critical

184
00:10:17,520 --> 00:10:22,460
if I variables do turn off secure a bit
or something like that

185
00:10:22,460 --> 00:10:26,970
so at the nature of these chipset
protection mechanisms forces us into

186
00:10:26,970 --> 00:10:29,880
this case were S&M is now the broker

187
00:10:29,880 --> 00:10:33,400
that does the rights to the if I
variables on our behalf

188
00:10:33,400 --> 00:10:37,520
and also decides whether or not to
change if I variable is legitimate or

189
00:10:37,520 --> 00:10:38,250
not

190
00:10:38,250 --> 00:10:41,880
so if we have windows 8 coming along and
saying all right I want to create a new

191
00:10:41,880 --> 00:10:43,180
if I variable

192
00:10:43,180 --> 00:10:47,650
and system management gonna say okay
I'll do this right on your behalf

193
00:10:47,650 --> 00:10:48,550
because

194
00:10:48,550 --> 00:10:52,430
my var is not on authenticated security
critical variable

195
00:10:52,430 --> 00:10:55,900
so that's fine go ahead and create this
new variable

196
00:10:55,900 --> 00:11:00,600
that doesn't do anything in this case
but lets a Windows 8 came along and uses

197
00:11:00,600 --> 00:11:04,460
when is the API that they provide and
tried to deal

198
00:11:04,460 --> 00:11:07,880
on what changes authenticated variable
to something system in its rebuttal

199
00:11:07,880 --> 00:11:11,390
would go I don't think so buddy I am

200
00:11:11,390 --> 00:11:15,010
you have to have knowledge for special
private key in order to do that and it

201
00:11:15,010 --> 00:11:20,660
was just a block this whole operation

202
00:11:20,660 --> 00:11:24,090
so like I said that the critical up the
cradle

203
00:11:24,090 --> 00:11:27,500
critical observation really this whole
talk is that

204
00:11:27,500 --> 00:11:31,450
these non-volatile variables which our
security critical

205
00:11:31,450 --> 00:11:35,470
in a bid up the system are fundamentally
less secure

206
00:11:35,470 --> 00:11:39,540
the other regions at the spy flash the
reason is

207
00:11:39,540 --> 00:11:42,620
the UEFI code can be made not writeable

208
00:11:42,620 --> 00:11:46,160
after the during the early stages the
beat the system

209
00:11:46,160 --> 00:11:50,440
but variable region the flash has to
remain writeable

210
00:11:50,440 --> 00:11:53,450
while the operating system is going

211
00:11:53,450 --> 00:11:57,050
that's because that's the easy if I
variables have to be able to be updated

212
00:11:57,050 --> 00:11:57,430
by

213
00:11:57,430 --> 00:12:03,360
by someone so the UEFI Co is pretty
locked down I can use is protected range

214
00:12:03,360 --> 00:12:06,680
registers which are pretty solid and
pretty simple security mechanism

215
00:12:06,680 --> 00:12:13,680
but the ear five variables are forced to
rely on the bias control protection

216
00:12:17,100 --> 00:12:21,170
what this essentially means is that the
attack surface

217
00:12:21,170 --> 00:12:24,570
against secure boot is this is a
superset

218
00:12:24,570 --> 00:12:28,610
at the attacks in system management
Miley any vulnerability that would allow

219
00:12:28,610 --> 00:12:30,410
you to get in a system manager mode

220
00:12:30,410 --> 00:12:34,040
with instantly allow you to bypass
secure boot because then you would have

221
00:12:34,040 --> 00:12:35,480
context

222
00:12:35,480 --> 00:12:39,500
inside the app broker agent responsible
for deciding if

223
00:12:39,500 --> 00:12:43,860
if I variable updates are legitimate or
not so in the S&M attack its instantly a

224
00:12:43,860 --> 00:12:47,660
secure the break

225
00:12:47,660 --> 00:12:51,680
so the question really is is it actually
feasible to get a system and shimon

226
00:12:51,680 --> 00:12:55,720
its super privilege might have execution
dates security critical in tolls aware

227
00:12:55,720 --> 00:12:56,600
this

228
00:12:56,600 --> 00:13:00,830
so it should not be easy for even a ring
0 attacker to get the system it is

229
00:13:00,830 --> 00:13:01,640
rumored

230
00:13:01,640 --> 00:13:05,750
and it's not easy but it certainly is
possible there have been some attacks by

231
00:13:05,750 --> 00:13:07,540
outlook to flow

232
00:13:07,540 --> 00:13:12,190
and I am a fall from invisible things
labs and so forth

233
00:13:12,190 --> 00:13:15,560
and we have actually found someone who
believes as well that will be presenting

234
00:13:15,560 --> 00:13:20,330
later on this year so the point is that
system manager mode

235
00:13:20,330 --> 00:13:23,810
is supposed to be bulletproof it's not
reveal to get in but

236
00:13:23,810 --> 00:13:28,150
there definitely are S&M on her
abilities

237
00:13:28,150 --> 00:13:31,970
part of the reason why that is the case
is

238
00:13:31,970 --> 00:13:35,410
because its security critical nature
system mention know it should be treated

239
00:13:35,410 --> 00:13:37,340
as a trusted code base

240
00:13:37,340 --> 00:13:40,580
it is a absolutely vital to the security
the platform

241
00:13:40,580 --> 00:13:44,440
attacker present system initial node
cancer burgundy hypervisor

242
00:13:44,440 --> 00:13:48,190
can even defeat txt late lunch stuff
because of the absence as a as men

243
00:13:48,190 --> 00:13:49,380
transfer monitor

244
00:13:49,380 --> 00:13:54,760
so very important on so what with
something as security critical system

245
00:13:54,760 --> 00:13:55,470
manager mode

246
00:13:55,470 --> 00:13:59,420
what we would want to see is the amount
of code in SMM going down

247
00:13:59,420 --> 00:14:04,320
or at least flatlining and because less
code West burbs right

248
00:14:04,320 --> 00:14:08,410
but I we actually see the opposite with
UEFI vendors are dumping just more and

249
00:14:08,410 --> 00:14:10,360
more code in a system management node

250
00:14:10,360 --> 00:14:14,210
all kinds have crazy proprietary stuff
is ending up in System Manager

251
00:14:14,210 --> 00:14:19,460
good like an its you guys public and
read this texas is justified known out

252
00:14:19,460 --> 00:14:20,130
but

253
00:14:20,130 --> 00:14:23,240
you can see like Dell USB emulation S&M

254
00:14:23,240 --> 00:14:26,580
okay SMM dispatch SMM thunk

255
00:14:26,580 --> 00:14:30,930
digital thermal sensor SMM which is what
you'd expect two seasons as a man is

256
00:14:30,930 --> 00:14:34,820
responsible for handling thermal events
but yet near the point is there's all

257
00:14:34,820 --> 00:14:35,420
kinds have

258
00:14:35,420 --> 00:14:38,910
really crazy code going into system
measurement right now and

259
00:14:38,910 --> 00:14:42,900
in my particular case I had 495

260
00:14:42,900 --> 00:14:46,050
individual if I modules on my spy flash

261
00:14:46,050 --> 00:14:49,820
and 144 them contributed code SMM so

262
00:14:49,820 --> 00:14:54,420
there's two ton of code going SMM and a
goner build the end any of them

263
00:14:54,420 --> 00:15:00,190
would be an instant secure boot bypass

264
00:15:00,190 --> 00:15:04,910
so I expect because at this trend of
market going into S&M you'll probably

265
00:15:04,910 --> 00:15:05,940
see

266
00:15:05,940 --> 00:15:09,520
even more vulnerabilities in SMM in the
near future even despite the fact that

267
00:15:09,520 --> 00:15:14,700
you if I suppose to be quote unquote
more secure

268
00:15:14,700 --> 00:15:17,920
today's result is actually

269
00:15:17,920 --> 00:15:21,600
that and a lot of cases we don't even
need to get into System Manager Mode to

270
00:15:21,600 --> 00:15:23,160
defeat secure boot

271
00:15:23,160 --> 00:15:28,320
we can actually defeat secure boot by
temporarily suppressing the execution

272
00:15:28,320 --> 00:15:30,290
system management

273
00:15:30,290 --> 00:15:35,620
so SMM is a very privileged important
part of the CPU is responsible for

274
00:15:35,620 --> 00:15:36,610
thermal events

275
00:15:36,610 --> 00:15:41,840
how can we like at temporarily disable
S&M

276
00:15:41,840 --> 00:15:45,280
wealthy look at the Intel chipset
documentation there's actually a lot of

277
00:15:45,280 --> 00:15:48,090
things a jump out the the most obvious
is one that just says

278
00:15:48,090 --> 00:15:52,270
SMI enable and and at does what you
think it would do

279
00:15:52,270 --> 00:15:55,420
with when it set to 0 SM eyes will not
fire

280
00:15:55,420 --> 00:16:00,580
period I this bit can be locked so that
it should not be updatable by the

281
00:16:00,580 --> 00:16:01,730
operating system

282
00:16:01,730 --> 00:16:05,900
but we did a survey of 8,000 systems and
we found that on forty percent at them

283
00:16:05,900 --> 00:16:09,670
they weren't bothering to our to lock
this bad news we're pretty recent

284
00:16:09,670 --> 00:16:14,350
at the reason systems and this numbers
actually artificially low it could be

285
00:16:14,350 --> 00:16:16,790
made much higher by downgrading

286
00:16:16,790 --> 00:16:20,590
the the BIOS a major problem in by a
security is

287
00:16:20,590 --> 00:16:25,130
the rollback problem only M's are
generally unwilling to

288
00:16:25,130 --> 00:16:29,460
prevents an operating system from
rolling back the BIOS version so let's

289
00:16:29,460 --> 00:16:30,540
say you have

290
00:16:30,540 --> 00:16:33,770
bias revision a3 is not vulnerable to
some

291
00:16:33,770 --> 00:16:38,130
vulnerability but a2 is usually it's a
case that you can just downgrade the

292
00:16:38,130 --> 00:16:40,700
BIOS from the operating system to a
three day to you

293
00:16:40,700 --> 00:16:45,140
and then exploit the vulnerability I am
we've pointed this out an

294
00:16:45,140 --> 00:16:49,670
oh %um is our has a tent to stop this
kind a roll-back

295
00:16:49,670 --> 00:16:53,900
even do even with the security
implications involved because

296
00:16:53,900 --> 00:16:58,490
customers would get mad that I despise
her vision broke something and I wanted

297
00:16:58,490 --> 00:17:01,000
on a roll it back so that their son want
to do that

298
00:17:01,000 --> 00:17:05,209
so this number could be made much higher
by rolling back to bias revision which

299
00:17:05,209 --> 00:17:09,390
we did mother doing this quick survey

300
00:17:09,390 --> 00:17:12,440
so what this means is that on the sporty
person in the system is weak a temporary

301
00:17:12,440 --> 00:17:12,870
leaders

302
00:17:12,870 --> 00:17:16,550
disable System Manager murdered by
setting this to this bid

303
00:17:16,550 --> 00:17:19,980
p.m. you

304
00:17:19,980 --> 00:17:24,120
yes my neighbor 20 and what happens and
is that

305
00:17:24,120 --> 00:17:28,140
the SMI routine that's responsible for
setting bias write enable

306
00:17:28,140 --> 00:17:31,610
back 20 simply won't run so a
compromised

307
00:17:31,610 --> 00:17:35,840
Irene 0 driver or root in Lex it has
come along and say by Astrid enable

308
00:17:35,840 --> 00:17:37,620
Eagles won

309
00:17:37,620 --> 00:17:41,200
debate will stick and system management
analyst canton is sit there silently

310
00:17:41,200 --> 00:17:44,650
because it has been disabled

311
00:17:44,650 --> 00:17:49,160
and what this allows us to do is because
those non-volatile variable regions was

312
00:17:49,160 --> 00:17:51,220
dependent on it as my routine

313
00:17:51,220 --> 00:17:55,900
for security I'll a compromise opening
system a ring 0 Curtis

314
00:17:55,900 --> 00:17:59,580
now written make direct SPI write cycles
to this variable region

315
00:17:59,580 --> 00:18:03,800
in change all the authenticated
variables and as I previously stated

316
00:18:03,800 --> 00:18:07,350
is authenticated variables are critical
to the security the system because they

317
00:18:07,350 --> 00:18:09,430
have like the at the white list have
allowed

318
00:18:09,430 --> 00:18:13,350
secure boot application so an attacker
condition this come in

319
00:18:13,350 --> 00:18:17,420
an answer a new malicious bootloader
into the application whitelisting

320
00:18:17,420 --> 00:18:24,390
then it will execute despite the
presence of a secure fit

321
00:18:24,390 --> 00:18:28,530
so we have a little video this attack
actually it's going to be a little bit

322
00:18:28,530 --> 00:18:31,690
hard for you guys in the back to read
the text I apologize for that

323
00:18:31,690 --> 00:18:38,230
I'm sure I'll be making this video
public in the near future

324
00:18:38,230 --> 00:18:42,280
so this tack attack were actually doing
from Lenox just to illustrate that and

325
00:18:42,280 --> 00:18:44,560
this isn't a

326
00:18:44,560 --> 00:18:48,210
a Len X I went to a specific problem
even though

327
00:18:48,210 --> 00:18:51,410
secure boot is often associated Windows
8 it's actually part of the UEFI

328
00:18:51,410 --> 00:18:52,320
specification

329
00:18:52,320 --> 00:18:56,160
and exploitable from Linux or Windows
and in fact this particular

330
00:18:56,160 --> 00:18:59,070
vulnerability is actually easier to
exploit from 1x because

331
00:18:59,070 --> 00:19:02,150
and Len XE have I O privileges from the
root account

332
00:19:02,150 --> 00:19:05,360
wears an recent words a Windows yet have
a kernel driver

333
00:19:05,360 --> 00:19:12,000
to be able to meet manipulate these
chipset registers

334
00:19:12,000 --> 00:19:16,270
so this is a at an Intel based
motherboard we have secured with enabled

335
00:19:16,270 --> 00:19:19,640
and we've installed this some just fake
boot kit

336
00:19:19,640 --> 00:19:23,130
onto the if I partition Shin x64 DFI

337
00:19:23,130 --> 00:19:27,600
and this case it is print some sweet
ASCII art and then lets the original

338
00:19:27,600 --> 00:19:28,070
annex

339
00:19:28,070 --> 00:19:32,900
later

340
00:19:32,900 --> 00:19:36,260
so in this case a cure but soon able we
haven't done any attacks so

341
00:19:36,260 --> 00:19:39,830
attempting to run any non-authorized

342
00:19:39,830 --> 00:19:46,830
if I execute Wilson just gonna fail puke
it would not work at this point

343
00:19:52,300 --> 00:19:55,180
and I'm just going into the BIOS
configuration settings now I'm showing

344
00:19:55,180 --> 00:19:56,220
you that

345
00:19:56,220 --> 00:20:00,020
I the way it's all it's not biased so
yes secure because enabled

346
00:20:00,020 --> 00:20:04,450
then the DB is actually what we're going
to attack here in a second

347
00:20:04,450 --> 00:20:07,460
and this is just I'll a whitelist

348
00:20:07,460 --> 00:20:11,110
the hashes it if I execute a course
where he find one of the is just

349
00:20:11,110 --> 00:20:12,720
automatically allow it to run

350
00:20:12,720 --> 00:20:17,860
I don't even bother with some signature
verification process

351
00:20:17,860 --> 00:20:21,650
and so we're going to use this as my
special attack to insert

352
00:20:21,650 --> 00:20:28,650
the boot kit into the the authenticated
TV variable

353
00:20:30,580 --> 00:20:33,730
so we have to go back into our next
actually launched attack from the root

354
00:20:33,730 --> 00:20:35,280
account so this run the

355
00:20:35,280 --> 00:20:39,460
original 1x pullover be later

356
00:20:39,460 --> 00:20:43,040
yes I the tax is pretty small I didn't
anticipate that

357
00:20:43,040 --> 00:20:47,040
so the way this attack works is reusing
flash ROM to first

358
00:20:47,040 --> 00:20:52,750
I read a dump the bias

359
00:20:52,750 --> 00:20:56,650
and we created this little application
that the NDP that will take the BIOS

360
00:20:56,650 --> 00:20:58,820
image that was just dumped with flash
ROM

361
00:20:58,820 --> 00:21:01,960
and Danny locate where the DB

362
00:21:01,960 --> 00:21:05,620
is stored in the buyer's stamp and then
insert the air

363
00:21:05,620 --> 00:21:10,050
at arbitrary entry into the DB

364
00:21:10,050 --> 00:21:13,840
that the white list i should say

365
00:21:13,840 --> 00:21:17,230
this is just chaining changing the other
by Esteban yes we haven't

366
00:21:17,230 --> 00:21:20,480
actually attempted to write back to this
by slashing at

367
00:21:20,480 --> 00:21:24,540
so we just add manually patch did so
that the bias image the variable region

368
00:21:24,540 --> 00:21:25,340
at the bias

369
00:21:25,340 --> 00:21:29,530
contains data hacked and white list for
our boot kit

370
00:21:29,530 --> 00:21:33,730
and now we're going to try to you right
back

371
00:21:33,730 --> 00:21:37,060
and its may be a little hard to get
sorry but you can see the flash ROM is

372
00:21:37,060 --> 00:21:38,240
actually failing

373
00:21:38,240 --> 00:21:42,670
and in one of these lines you see on

374
00:21:42,670 --> 00:21:44,960
setting

375
00:21:44,960 --> 00:21:47,530
a XTC which the bias control register

376
00:21:47,530 --> 00:21:51,250
from Alexei to let's be so this is
trying to say I'm trying to set the bias

377
00:21:51,250 --> 00:21:52,240
write enable bit

378
00:21:52,240 --> 00:21:56,550
but when I read it back it still it's
not set the values to Alexei said at

379
00:21:56,550 --> 00:21:58,520
least significant bit is not sticking

380
00:21:58,520 --> 00:22:02,980
and that's because currently that SMI
routine that responsible for protecting

381
00:22:02,980 --> 00:22:06,630
at that particular regions the flash
misfiring and it's saying

382
00:22:06,630 --> 00:22:10,450
no you can't write enable the bias on I
don't approve this

383
00:22:10,450 --> 00:22:17,450
too bad

384
00:22:19,660 --> 00:22:23,790
so what we'll do now is warden
temporarily suppressed

385
00:22:23,790 --> 00:22:26,970
SMM using that the method I just talked
about and try again

386
00:22:26,970 --> 00:22:33,970
we call it

387
00:22:36,560 --> 00:22:40,250
char is art for some juvenile reasons
that are worth going into and so that's

388
00:22:40,250 --> 00:22:41,300
why you're seeing their name

389
00:22:41,300 --> 00:22:45,150
okay

390
00:22:45,150 --> 00:22:48,950
so right now we've used the attack

391
00:22:48,950 --> 00:22:52,600
to set SMI naval 20 said no esta memes
are firing

392
00:22:52,600 --> 00:22:56,550
and we want to do this pretty quickly
because SMM is actually really important

393
00:22:56,550 --> 00:22:58,550
as I said it responsible for thermal
events

394
00:22:58,550 --> 00:23:01,720
see you definitely don't want to just
turn of S&M and then go to town some

395
00:23:01,720 --> 00:23:03,360
really bad things might happen to your
system

396
00:23:03,360 --> 00:23:06,830
but OK with temporarily disabled S&M

397
00:23:06,830 --> 00:23:11,640
let's try to our right back to patch
Tobias image with flash ROM

398
00:23:11,640 --> 00:23:16,790
and at this time you can see no errors

399
00:23:16,790 --> 00:23:19,810
it's an its succeeded

400
00:23:19,810 --> 00:23:24,960
as the right enables duck and everything
so we're able to attend

401
00:23:24,960 --> 00:23:29,850
add at hacked entry into the white list
to secure boot

402
00:23:29,850 --> 00:23:36,850
list and then I will this reboot the
system and

403
00:23:40,060 --> 00:23:47,060
verify that the book it actually works
now

404
00:23:52,370 --> 00:23:56,860
I in this demo were like mainly watching
the bucket by like going into

405
00:23:56,860 --> 00:23:59,880
on DFI shell and typing anymore be later

406
00:23:59,880 --> 00:24:03,030
obviously if you're really exploiting
the issue it like replace

407
00:24:03,030 --> 00:24:06,630
original legitimate when exploiters all
that would happen seamlessly upon

408
00:24:06,630 --> 00:24:07,580
rebooting the system

409
00:24:07,580 --> 00:24:11,750
what is being proposed for clarity and
as for extra comps

410
00:24:11,750 --> 00:24:15,920
verbosity we're going right now to the
BIOS settings and you can and sorta see

411
00:24:15,920 --> 00:24:16,560
that with

412
00:24:16,560 --> 00:24:19,940
modified some of these at DB entries
arbitrarily

413
00:24:19,940 --> 00:24:23,900
which you should definitely not be able
to do since these are like I said

414
00:24:23,900 --> 00:24:30,900
critical to the security at the break up
the system

415
00:24:35,860 --> 00:24:42,860
okay so now let's go back into the if I
shelling tryer bleak it again

416
00:24:45,820 --> 00:24:49,020
okay and then we get this we ask the
artist I'm any guesses about what that

417
00:24:49,020 --> 00:24:49,450
is

418
00:24:49,450 --> 00:24:56,420
there's

419
00:24:56,420 --> 00:24:59,670
Anna probably take us longer to get the
ASCII art Benedetta

420
00:24:59,670 --> 00:25:03,640
actual attack we had at our junior
guided ads might it is doing that

421
00:25:03,640 --> 00:25:07,690
so you're SMI suppression

422
00:25:07,690 --> 00:25:11,360
can be used to feed as secure began a
lot %uh systems arbitrarily modified is

423
00:25:11,360 --> 00:25:12,680
important if I variables

424
00:25:12,680 --> 00:25:15,720
I I was just one way to temporarily
suppressed

425
00:25:15,720 --> 00:25:19,740
SMM this is very chipset depended
there's all

426
00:25:19,740 --> 00:25:23,020
other ways definitely to temporarily
suppress as a man

427
00:25:23,020 --> 00:25:28,130
so I encourage you to disco look at your
specific chipset documentation like Rep

428
00:25:28,130 --> 00:25:29,630
around for as a member SMI

429
00:25:29,630 --> 00:25:33,410
and I can pretty much guarantee or find
other ways to suppress SMM

430
00:25:33,410 --> 00:25:39,070
there is a relatively new

431
00:25:39,070 --> 00:25:42,780
spy flash protection mechanism that
should to say it that should defeat this

432
00:25:42,780 --> 00:25:44,510
type assessment suppression attack

433
00:25:44,510 --> 00:25:48,130
it's called the pious right protected
and this

434
00:25:48,130 --> 00:25:52,220
effective leader says that only SMM

435
00:25:52,220 --> 00:25:55,340
can write to this by flash so it's if

436
00:25:55,340 --> 00:25:58,680
if this is set even if you can suppress
SMN you'll be able to write to the flash

437
00:25:58,680 --> 00:25:59,340
chip because

438
00:25:59,340 --> 00:26:04,520
only SMM can try to win this is set
lucky for us

439
00:26:04,520 --> 00:26:09,660
we serve eighty thousand systems in only
six were actually sending this so this

440
00:26:09,660 --> 00:26:13,030
is relatively new bit and no one is
using it for the most part

441
00:26:13,030 --> 00:26:17,640
I am in general there's a pretty long
tail he's OEM's for how long it takes

442
00:26:17,640 --> 00:26:19,520
and actually start using new Intel

443
00:26:19,520 --> 00:26:23,780
chipset protection mechanisms and yet no
one's jumped on board the bias right

444
00:26:23,780 --> 00:26:25,020
protected train yet

445
00:26:25,020 --> 00:26:28,800
so the

446
00:26:28,800 --> 00:26:33,260
the the main point here is that all
these

447
00:26:33,260 --> 00:26:36,820
security protocol parts have your
system's beat-up exist on the same

448
00:26:36,820 --> 00:26:38,050
medium the spy flash

449
00:26:38,050 --> 00:26:42,790
the different right ability properties
that

450
00:26:42,790 --> 00:26:47,960
the different regions needs necessitates
that the if I variables that control the

451
00:26:47,960 --> 00:26:49,520
configuration at secure boot

452
00:26:49,520 --> 00:26:53,820
are less protected I other reasons that
the spy flashlight where the you if I

453
00:26:53,820 --> 00:26:54,660
could exist

454
00:26:54,660 --> 00:26:58,550
so it's pretty weak and there's a a very
large attack surface

455
00:26:58,550 --> 00:27:01,710
against at the code that protects these
Esme

456
00:27:01,710 --> 00:27:05,590
easy if I variables in any wanna any
sort of water billing system manager

457
00:27:05,590 --> 00:27:06,050
mode

458
00:27:06,050 --> 00:27:10,280
I can instantly just turn into a secure
be by SL even the Securities

459
00:27:10,280 --> 00:27:14,680
in my opinion a good security feature
and something that is definitely needed

460
00:27:14,680 --> 00:27:16,210
to plug this but get all

461
00:27:16,210 --> 00:27:20,150
I it is certainly not bulletproof and
there's a huge attack service air and I

462
00:27:20,150 --> 00:27:21,570
think you'll be seeing a lot of them

463
00:27:21,570 --> 00:27:24,750
other attacks against in and obviously

464
00:27:24,750 --> 00:27:29,050
Williams could really do themselves a
favor by going in and actually using

465
00:27:29,050 --> 00:27:29,720
these latest

466
00:27:29,720 --> 00:27:33,520
a.m. chipset protection mechanisms like
SMM bias write protect

467
00:27:33,520 --> 00:27:38,190
so just as some related work that's
worth pointing out

468
00:27:38,190 --> 00:27:41,670
and the for secure been attacked that
I'm aware was an

469
00:27:41,670 --> 00:27:44,930
a tailor one software by passive when is
it secure boot

470
00:27:44,930 --> 00:27:48,400
this is done by the the Intel P sir team

471
00:27:48,400 --> 00:27:53,350
an their point was that basically if
this by flashes completely unprotected

472
00:27:53,350 --> 00:27:55,270
sufferings your cur can go on

473
00:27:55,270 --> 00:27:59,570
arbitrarily modify any reason service by
slash which is actually true even on

474
00:27:59,570 --> 00:28:01,370
some of the latest greatest systems

475
00:28:01,370 --> 00:28:05,990
from certain vendors I then obviously
can defeat secure because you can just

476
00:28:05,990 --> 00:28:07,570
overwrite the bias code in

477
00:28:07,570 --> 00:28:12,510
you know make secure pretty crazy things
and like I said I recently gave a

478
00:28:12,510 --> 00:28:13,450
presentation

479
00:28:13,450 --> 00:28:17,670
at ACK & sec West about another security
tak and that was

480
00:28:17,670 --> 00:28:20,870
essentially pointing out that a lot of
Koreans re:

481
00:28:20,870 --> 00:28:25,260
implementing security critical if I
variables as not authenticated

482
00:28:25,260 --> 00:28:28,500
so that ring 0 operates a stinker can
come in

483
00:28:28,500 --> 00:28:31,920
and you change if I variables at will

484
00:28:31,920 --> 00:28:35,030
without any sort of attack in a lot of
these are security critical that can now

485
00:28:35,030 --> 00:28:36,650
effectively disable security

486
00:28:36,650 --> 00:28:39,960
and also we've come up with some attacks
again sad

487
00:28:39,960 --> 00:28:43,080
signed buyers enforcement and if you can
reflash the biasing

488
00:28:43,080 --> 00:28:49,560
yes obviously you can defeat secure be
and other sort of funny thing worth

489
00:28:49,560 --> 00:28:50,630
pointing out is that

490
00:28:50,630 --> 00:28:54,690
in our survey we look at some other data
points so as I always

491
00:28:54,690 --> 00:28:58,240
already previously said most people are
using AZT nem bias write protect

492
00:28:58,240 --> 00:29:01,570
and we also found that many OEMs are
even bothering to set these protected

493
00:29:01,570 --> 00:29:02,890
range registers

494
00:29:02,890 --> 00:29:07,440
at the simple not do not write this
region to the spy flash

495
00:29:07,440 --> 00:29:12,430
I am so on these 7300 systems

496
00:29:12,430 --> 00:29:17,770
and you know fifty percent of those that
were vulnerable to SMI suppression

497
00:29:17,770 --> 00:29:23,050
SMI suppression immediately turns into a
arbitrary flash the bios my systems

498
00:29:23,050 --> 00:29:26,690
so on yeah Williams could be doing a lot
better with using these

499
00:29:26,690 --> 00:29:30,460
security protection mechanism so in
compliance is definitely

500
00:29:30,460 --> 00:29:33,960
a huge issue as I artie said a lot of

501
00:29:33,960 --> 00:29:38,180
Williams out there like Jesus I believe
are not even walking down

502
00:29:38,180 --> 00:29:42,530
their flashy but all you can dislike
totally destroyed by Iris from the

503
00:29:42,530 --> 00:29:46,400
router like totally picked the system

504
00:29:46,400 --> 00:29:50,420
and yeah just a couple people to help us
this research the Intel P sir team they

505
00:29:50,420 --> 00:29:51,590
actually

506
00:29:51,590 --> 00:29:55,180
sounds we found some the same wonderful
isn't secure boot that's why we work a

507
00:29:55,180 --> 00:29:57,050
presenting a cancer quest

508
00:29:57,050 --> 00:30:02,050
an for a fall from Bro me a min of red
ortega help that's perfect our paper

509
00:30:02,050 --> 00:30:05,110
and Rick Martinez is our security
contacted at Dell

510
00:30:05,110 --> 00:30:08,910
is like the chief bias engineer so if
you have any security problems he can go

511
00:30:08,910 --> 00:30:09,630
to him

512
00:30:09,630 --> 00:30:13,160
and then at the year 59 developers will
not refer to them are here but

513
00:30:13,160 --> 00:30:16,240
we use their kinda like to upload party
am

514
00:30:16,240 --> 00:30:19,620
UEFI BIOS so

515
00:30:19,620 --> 00:30:22,940
how much time do have left and curious

516
00:30:22,940 --> 00:30:26,280
I get a number on the back three minutes

517
00:30:26,280 --> 00:30:29,590
30 minutes okay on the time basically
than

518
00:30:29,590 --> 00:30:34,750
so um any questions I made missus but
I'm how did you perform

519
00:30:34,750 --> 00:30:38,680
system survey okay so we have a an

520
00:30:38,680 --> 00:30:42,900
and agent called copernicus that's
really available from the mitre website

521
00:30:42,900 --> 00:30:47,340
and what it does is it goes in Reitz
some a bunch of years

522
00:30:47,340 --> 00:30:51,390
spy flash protection mechanisms as well
as is your dump your BIOS

523
00:30:51,390 --> 00:30:54,750
kiss your interest in the security of
your your bias and also if you just want

524
00:30:54,750 --> 00:30:57,160
to read an image that the bias this runs
on Windows

525
00:30:57,160 --> 00:31:00,430
reason we created this was their slash
unfurl an expert there was really no

526
00:31:00,430 --> 00:31:04,510
no good and a lot for Windows it's too
simple Windows kernel driver that goes

527
00:31:04,510 --> 00:31:05,700
in reeds obvious

528
00:31:05,700 --> 00:31:09,420
chipset registers and also president
your bias and

529
00:31:09,420 --> 00:31:12,990
that's freely available with you on just
google Pernik as

530
00:31:12,990 --> 00:31:18,370
mitre to burn is like the dude an or go
to the website and you can I am

531
00:31:18,370 --> 00:31:18,800
check it out

