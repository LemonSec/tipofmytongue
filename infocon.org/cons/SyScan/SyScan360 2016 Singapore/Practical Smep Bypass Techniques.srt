1
00:00:00,120 --> 00:00:05,140
hello my name is that all this talk is
on practical supervisor mode execution

2
00:00:05,140 --> 00:00:10,259
and access prediction bypasses on Linux
it's not specific to Linux so you can

3
00:00:10,259 --> 00:00:14,820
take the same January concepts and apply
them told I should using kernel space

4
00:00:14,820 --> 00:00:19,150
operating systems but all the examples
in this talk are specific to the Linux

5
00:00:19,150 --> 00:00:25,360
kernel and the general idea is to show
that boy itself snap as a colonel

6
00:00:25,360 --> 00:00:29,869
protection mechanism can be easily
bypassed so the original talk that I was

7
00:00:29,870 --> 00:00:34,850
playing to give was on Smith's execution
protection only but I'll be extended the

8
00:00:34,850 --> 00:00:37,230
material to color Smith as well

9
00:00:37,230 --> 00:00:43,129
Access Protection it's getting more
common with Broadwell and skylight

10
00:00:43,129 --> 00:00:45,839
process is so snap snap

11
00:00:45,839 --> 00:00:49,780
relevant at the moment because so Am I

12
00:00:49,780 --> 00:00:56,949
security researcher from the start I
work force pilots and I primarily

13
00:00:56,949 --> 00:01:02,870
specialize in exploit development on
POSIX systems and at the moment on doing

14
00:01:02,870 --> 00:01:11,280
research in kernel exploitation and
various hiding mechanism ok so what are

15
00:01:11,280 --> 00:01:17,690
we talking about it Smith pins map so
first of all his stand for supervisor

16
00:01:17,690 --> 00:01:23,420
mode execution in Texas protection they
64 bit CPU features only so there is no

17
00:01:23,420 --> 00:01:32,210
32 bit support supported from kernel 2.6
had so we've had supports back in 2011

18
00:01:32,210 --> 00:01:39,429
even before we had to write even before
we have CPU chips with snap support if

19
00:01:39,430 --> 00:01:44,150
you bought a laptop or desktop now days
you'll get at least Smith

20
00:01:45,040 --> 00:01:50,190
CPUs are probably at least Ivy Bridge
right so no one is using senior bridge

21
00:01:50,190 --> 00:01:54,990
anymore so if you go to Ivy Bridge on
later they need cold snap if you go

22
00:01:54,990 --> 00:01:59,470
abroad well or sky like then you've got
this map access protection as well I'll

23
00:01:59,470 --> 00:02:02,250
talk about the differences

24
00:02:02,250 --> 00:02:07,680
and yes in terms of consumer desktops
and laptops but also a GPS hosting

25
00:02:07,680 --> 00:02:12,650
providers and cloud service providers
are switching upgrading the architecture

26
00:02:12,650 --> 00:02:19,450
in switch into small been able to see
billions ok so I'd like to start my talk

27
00:02:19,450 --> 00:02:22,089
with them I actually

28
00:02:22,090 --> 00:02:25,730
usual but to show you what really is

29
00:02:25,730 --> 00:02:33,380
let me just duplicate my screen make it
easier

30
00:02:52,870 --> 00:03:07,890
but first I'm going to put this virtual
machine without Smith so I've got to

31
00:03:07,890 --> 00:03:13,679
make book which is i think its 2014
model it's got an Ivy Bridge I think

32
00:03:13,680 --> 00:03:17,970
it's got has allegedly so I've got some
support in Ableton hardware and I'm

33
00:03:17,970 --> 00:03:22,819
using virtual machine VMware so if your
host CPU supports me in your virtual

34
00:03:22,819 --> 00:03:29,619
machine will use as well but at the
moment I'll just put my journal Sleep

35
00:03:29,620 --> 00:03:37,959
support so you can provide this notice
map for this enabled right but I will

36
00:03:37,959 --> 00:03:40,959
just disable it

37
00:03:50,640 --> 00:04:01,369
ok so I've written this exploit probably
a couple of years ago it's actually the

38
00:04:01,370 --> 00:04:08,709
issues with Perth counters in the kernel
so it's just a typical I'm sorry access

39
00:04:08,709 --> 00:04:12,840
or something like that right and I still
keep getting emails from people saying

40
00:04:12,840 --> 00:04:18,850
you exploit sucks it doesn't work so
he's the reason why you got Smith

41
00:04:18,850 --> 00:04:24,060
enables so let me show you that this
actually works so this is colonel 3.5

42
00:04:24,060 --> 00:04:27,060
just to make sure

43
00:04:34,100 --> 00:04:43,690
so now I'm gonna put this kind of
normally with Smith support someone

44
00:04:43,690 --> 00:04:46,690
gonna change any parameters

45
00:04:53,560 --> 00:05:10,280
goes to show you actually enable all use
the same exploits let me just make sure

46
00:05:10,280 --> 00:05:16,388
that my parents always attached to what
I'm doing is basically rejecting all the

47
00:05:16,389 --> 00:05:19,800
terminal console messages to you

48
00:05:19,800 --> 00:05:26,080
pipe from IBM tomorrow so you can see
the message was just scrolls and you

49
00:05:26,080 --> 00:05:29,080
don't get the full message

50
00:05:34,480 --> 00:05:44,890
and you can see that the kernel crashed
so this instruction point that some

51
00:05:44,890 --> 00:05:52,099
kernel memory address the but for the
actual error message what you get is

52
00:05:52,100 --> 00:05:58,940
just double for ok that's all you get it
doesn't tell you that there was some

53
00:05:58,940 --> 00:06:03,980
exploitation attempt to anything like
that you basically get a double faults

54
00:06:03,980 --> 00:06:09,350
single-page hold on second place for and
that's what's made us basically right

55
00:06:09,350 --> 00:06:15,500
out of the box it prevents all your
exploits from working so that's what

56
00:06:15,500 --> 00:06:19,420
we're talking about today just switch
back to my

57
00:06:37,780 --> 00:06:50,900
June July 2014 to Amazon instance and if
you list the CPU flexo presses

58
00:06:50,900 --> 00:06:56,870
information you'll see that this CPUs
you fought to 650 and the reason I Smith

59
00:06:56,870 --> 00:07:02,480
supports banking 2014 but since then
they started upgrading the architecture

60
00:07:02,480 --> 00:07:07,820
using new processes in this instance was
created in January 2015 right it's a

61
00:07:07,820 --> 00:07:17,290
slot in your CPU model 65 to 67 0 and
there is support so at the moment at

62
00:07:17,290 --> 00:07:24,330
least your jets and most architectures
right x axis protection is still in the

63
00:07:24,330 --> 00:07:33,599
sort of development face but you'll get
so the agenda for this talk is talk

64
00:07:33,600 --> 00:07:39,210
about previous work briefly research in
this area then we'll start with the

65
00:07:39,210 --> 00:07:43,390
introduction in typical return to use it
acts how they work how can I exploits

66
00:07:43,390 --> 00:07:47,690
work links connects points and then
we'll talk about Smith and Smith

67
00:07:47,690 --> 00:07:53,160
bypasses in particular will consider the
two cases so the first case is when you

68
00:07:53,160 --> 00:07:58,380
have enabled CPU 2005 you breach whole
lifetime and you've got a stoat colonel

69
00:07:58,380 --> 00:08:02,130
so what I mean by stock kernel is
something that comes with your

70
00:08:02,130 --> 00:08:06,770
distribution so if you installed Ubuntu
the food or whatever you like it comes

71
00:08:06,770 --> 00:08:15,340
with a candle in the second case is
smitten Smith auditory memory rights so

72
00:08:15,340 --> 00:08:21,440
it's a stronger sumption you go right
but you don't need a stock kernel in

73
00:08:21,440 --> 00:08:26,719
that case and the second part is more
sort of practical where we take the

74
00:08:26,720 --> 00:08:29,470
existing stevie is an existing exploit

75
00:08:29,470 --> 00:08:34,330
just convert that existing exploit to
the one that bypasses Smith right and

76
00:08:34,330 --> 00:08:39,510
you'll see that the modifications that
you need to introduce a minimal right

77
00:08:40,570 --> 00:08:47,290
ok so in terms of previous work there
was some research done by Dan Rosenberg

78
00:08:47,290 --> 00:08:55,030
back in 2011 even before we had Smith so
he provided just some general ideas how

79
00:08:55,030 --> 00:08:58,620
to bypass Smith so using kernel rolled
things like that brought him into the

80
00:08:58,620 --> 00:09:07,810
Boise area and did this talk with your
behind on stage acting right those big

81
00:09:07,810 --> 00:09:14,589
in 2012 in the idea was is if you've got
the journalist actually you know the

82
00:09:14,590 --> 00:09:19,270
address of the kernel stack so you can
find the address of the threading done a

83
00:09:19,270 --> 00:09:24,060
structure that contains all the
parameters for the for the current

84
00:09:24,060 --> 00:09:30,250
process rights UID and GID things like
that so if you know the address of the

85
00:09:30,250 --> 00:09:34,950
data structure you can write in to
address limit variable if you set it to

86
00:09:34,950 --> 00:09:35,600
0

87
00:09:35,600 --> 00:09:40,240
variable than you can from userspace
right to any memory addressing the

88
00:09:40,240 --> 00:09:44,490
Colonels place right so you removing
this barrier between curls place in

89
00:09:44,490 --> 00:09:49,470
userspace pretty cool but again it
requires arbitrary rides and

90
00:09:49,470 --> 00:09:57,500
candlesticks lakes so you need two
things there was another log posted in

91
00:09:57,500 --> 00:10:04,750
2012 November 2 2012 on jet sprang
just-in-time Kampala again very cool

92
00:10:04,750 --> 00:10:09,630
that there are some limitations
obviously first BPF stands for Berkeley

93
00:10:09,630 --> 00:10:15,610
packet filter just-in-time kampala is
not enabled by default but if you

94
00:10:15,610 --> 00:10:19,320
control the input to that can power if
you enable it then you can sort of

95
00:10:19,320 --> 00:10:24,880
produced your privilege escalation by
Lloyd on the fly during just-in-time

96
00:10:24,880 --> 00:10:31,410
compilation and recently there was a
very good research on these meds

97
00:10:31,410 --> 00:10:36,420
exploitation techniques this was an
actual academic paper I think it was

98
00:10:36,420 --> 00:10:45,199
first published in 2000 December 2012
and then presented in 2015 so this is

99
00:10:45,200 --> 00:10:52,120
basically using the shared his metro
area which is basically maps your entire

100
00:10:52,120 --> 00:10:52,470
on

101
00:10:52,470 --> 00:11:00,210
64 bit processors or possibly mess
around 12 to be prices and then you've

102
00:11:00,210 --> 00:11:06,060
got Elias is to memory addresses so for
example you can have a virtual memory

103
00:11:06,060 --> 00:11:11,310
address in kernel space and a virtual
memory address from userspace mapping to

104
00:11:11,310 --> 00:11:16,880
the same physical page but if you write
your payload and use a spice it will

105
00:11:16,880 --> 00:11:21,700
emerge in kernel space and if you find
that address in kernel space then you

106
00:11:21,700 --> 00:11:25,950
need to access your spice and you can
just execute your payload entirely in

107
00:11:25,950 --> 00:11:31,630
the kernel space pretty cool but again
there was some medications introduced so

108
00:11:31,630 --> 00:11:37,770
first of all page map so if you go to
prom / process I D PAGE map it's not

109
00:11:37,770 --> 00:11:39,840
readable by any use anymore

110
00:11:39,840 --> 00:11:47,660
religious and that's how they used to
find page frame numbers to find this

111
00:11:47,660 --> 00:11:52,630
address in a physical address but page
so it's not readable anymore

112
00:11:53,320 --> 00:11:58,150
us some spring techniques that they
provided but they know as reliable ok so

113
00:11:58,150 --> 00:12:03,800
there's a chance that you chose gonna
crash and yes people disgusted they they

114
00:12:03,800 --> 00:12:08,349
said yes this is a security issue and we
should make those pages not executable

115
00:12:08,350 --> 00:12:13,040
somet the entire fees methanol
inexcusable and they've done it and I've

116
00:12:13,040 --> 00:12:15,010
been busy for example

117
00:12:15,010 --> 00:12:22,860
northern Linux kernel yet let's start
with the typical return to use it act

118
00:12:22,860 --> 00:12:28,920
attacks this is here every single
exploit the other day works so you

119
00:12:28,920 --> 00:12:34,530
probably know that Linux kernel kernel
space on behalf of users spice and what

120
00:12:34,530 --> 00:12:40,520
that means is the kernel space is mapped
into every process into virtual space of

121
00:12:40,520 --> 00:12:45,260
every process right at some high memory
addresses and user space processes

122
00:12:45,260 --> 00:12:50,620
obviously cannot access kernel space
right if I tried to write to some high

123
00:12:50,620 --> 00:12:56,440
memory addresses or get a six-fold but
kernel space can access use of space and

124
00:12:56,440 --> 00:13:02,150
see if I'm running with elevated
privileges in the kernel then I can

125
00:13:02,150 --> 00:13:04,920
acess uses place right

126
00:13:04,920 --> 00:13:10,300
and return to use it a tax take
advantage of this I'm like basically

127
00:13:10,300 --> 00:13:15,990
resurrect the control-flow the kennel
control-flow kernel space to use a space

128
00:13:15,990 --> 00:13:21,829
right so you host your payload in user
space and you jump from kill space to

129
00:13:21,829 --> 00:13:30,349
display / write so pretty simple just
had works visually these memories place

130
00:13:30,350 --> 00:13:33,500
in the kernel right so these users place
in kernel space

131
00:13:34,170 --> 00:13:38,740
bases loaded at high memory addresses so
let's just consider 64 bit architecture

132
00:13:38,740 --> 00:13:49,730
from your journal space is this talk
size variable which is 47-1 Valley

133
00:13:49,730 --> 00:13:54,120
Heights right say anything about that is
Google anything below that is used the

134
00:13:54,120 --> 00:13:59,959
spice ok and the idea is that if you've
got some memory corruption issue in the

135
00:13:59,959 --> 00:14:03,989
kernel you can for example of function
point and you can corrupt a function

136
00:14:03,990 --> 00:14:09,410
pointer somehow you can just redirect
the control flow to use the spice to

137
00:14:09,410 --> 00:14:16,410
your privilege escalation posted in user
space so pretty simple if you've got

138
00:14:16,410 --> 00:14:20,319
some kind of data structure point and
not a function pointer you can just

139
00:14:20,320 --> 00:14:26,170
build a flight data structure in
userspace that contains point us richer

140
00:14:26,170 --> 00:14:30,660
control flow to the Dallas charger and
then reject control flow to your

141
00:14:30,660 --> 00:14:35,880
privilege escalation powered just chill

142
00:14:36,620 --> 00:14:42,949
option 1 corrupted function point I'm so
find a function pointed to overwrite and

143
00:14:42,949 --> 00:14:49,729
then your previous escalation payload
and use a spice right so the typical

144
00:14:49,730 --> 00:14:52,760
privilege escalation while those looks
like this

145
00:14:52,760 --> 00:14:58,490
using two functions can be friends and
provisional credits functions throughout

146
00:14:58,490 --> 00:15:04,170
so commit creds creates a new credential
structure and commit credit applies to

147
00:15:04,170 --> 00:15:09,540
the current process right so if you
create a new credential structure with

148
00:15:09,540 --> 00:15:13,170
UID 0 then you just a ploy to process
and you become ruse

149
00:15:15,130 --> 00:15:22,870
and so is just using those two functions
prepare Colonel grade 0 creates an all

150
00:15:22,870 --> 00:15:30,060
potential structure with your idea 09
employees it and then you just recall

151
00:15:30,060 --> 00:15:34,569
that the Honorable function to execute
your pitches question posed by like this

152
00:15:34,570 --> 00:15:37,939
is the simplest case

153
00:15:37,939 --> 00:15:40,939
so basic use of credentials

154
00:15:41,919 --> 00:15:46,769
allocates and returns a new structure
and commit creates a plus when you

155
00:15:46,769 --> 00:15:51,699
create chills right so what if you've
got this is just a visual representation

156
00:15:51,699 --> 00:15:53,409
of how it works

157
00:15:53,409 --> 00:16:00,889
what function pointers do normally over
right there are many function pointers

158
00:16:00,889 --> 00:16:07,339
in the kernel these are just some
examples so the TMX Phillips performs so

159
00:16:07,339 --> 00:16:14,419
if you just grab something to eat a
pussy to mouth and grip 404 alt

160
00:16:14,419 --> 00:16:18,970
envelopes you'll find a few data
structures that contain pointers so you

161
00:16:18,970 --> 00:16:24,689
take any of those dollars structures any
of those functions in the those data

162
00:16:24,689 --> 00:16:29,219
structures and just override them right
and you've got your

163
00:16:30,759 --> 00:16:36,829
executed option number two ok so instead
of having this function pointing the

164
00:16:36,829 --> 00:16:41,978
kernel you've got a data structure
pointer pointer that points to a data

165
00:16:41,979 --> 00:16:46,999
structure in that case pretty much the
same idea but what you do is you take

166
00:16:46,999 --> 00:16:52,899
issue create this bike data structure in
user space and then you do you reject

167
00:16:52,899 --> 00:16:57,369
the control flow from your kernel space
data structure to use a spice data

168
00:16:57,369 --> 00:16:59,910
structure that contains points

169
00:16:59,910 --> 00:17:02,980
and the rest is exactly the same

170
00:17:02,980 --> 00:17:05,980
this what it looks like so this is my

171
00:17:30,110 --> 00:17:36,169
ok so when previous escalation payload
completes you just do a simple return so

172
00:17:36,170 --> 00:17:39,180
we're not notifying STEC STEC

173
00:17:39,180 --> 00:17:43,380
what it should be and then he just
execute system being a sage at that

174
00:17:43,380 --> 00:17:48,300
point and you get root privileges have
been escalated and you can just run

175
00:17:48,300 --> 00:17:50,480
system

176
00:17:50,480 --> 00:17:53,100
and you get a Kleenex it's obviously

177
00:17:53,100 --> 00:17:56,409
ok so what does

178
00:17:56,410 --> 00:18:02,670
this is taking from the until the shit
vol 10 the process introduces a new

179
00:18:02,670 --> 00:18:06,950
mechanism that provides next level of
system protection by blocking malicious

180
00:18:06,950 --> 00:18:10,700
software attacks from using my code when
the system is running in the highest

181
00:18:10,700 --> 00:18:12,060
production level

182
00:18:12,060 --> 00:18:13,850
ok

183
00:18:13,850 --> 00:18:19,230
so that's what this message looks like I
should you previously so you basically

184
00:18:19,230 --> 00:18:25,669
get a double old as the message as the
reason and if you look at the caf or

185
00:18:25,669 --> 00:18:30,429
register you'll see this value 1407 if
Syria index

186
00:18:31,320 --> 00:18:35,200
right so I just tried to remember that
value this value static

187
00:18:40,559 --> 00:18:43,639
this what this or register looks like

188
00:18:43,640 --> 00:18:46,640
so have a look at the

189
00:18:52,690 --> 00:18:59,190
is one is enabled if this bit is 0 then
Smith is disabled

190
00:19:01,770 --> 00:19:06,500
this is not the only one 4070

191
00:19:07,830 --> 00:19:12,928
and that highlighted in red is that it's
so you flip it 20

192
00:19:13,990 --> 00:19:16,990
then you'd be disabling

193
00:19:18,870 --> 00:19:23,879
ok so as one instructions may not be
fetched from any user mode address

194
00:19:24,980 --> 00:19:27,980
makes sense and that's why we're getting
that message

195
00:19:28,770 --> 00:19:33,530
to go from kernel space to use a spice
and get this

196
00:19:34,610 --> 00:19:37,120
bought a double fault

197
00:19:37,120 --> 00:19:40,989
but the good news is that CFO register
can be modified using standard

198
00:19:40,990 --> 00:19:51,470
instructions so if I do something like
this move this 1407 E 04 Ridge Estates

199
00:19:51,470 --> 00:19:56,190
$1 instruction the process of all
executed going to override the Delhi NCR

200
00:19:56,190 --> 00:20:05,740
for a just and actually disables slip
right so it's easier oh not FCO

201
00:20:07,650 --> 00:20:16,120
flipped a single bit alright so I just
checked that is unable to adjust to

202
00:20:16,120 --> 00:20:24,320
catch proxy peeling grapes map if it's
there that enabled to disable its you do

203
00:20:24,320 --> 00:20:31,250
notice me up to the kernel provided to
the colonel and costly in terms of hype

204
00:20:31,250 --> 00:20:37,360
advises its just based on my own testing
then nvm way they provide some support

205
00:20:37,360 --> 00:20:43,169
right so if you see the years have been
able then the hype advisable users

206
00:20:43,170 --> 00:20:49,530
VirtualBox hyper-v currently these know
Smith support this is as of December

207
00:20:49,530 --> 00:20:56,950
last year and this is not documented but
if you set your virtual hardware version

208
00:20:56,950 --> 00:21:03,080
2 number I don't belong in VMware if you
just take that BMX four in edited by

209
00:21:03,080 --> 00:21:08,840
hand and said it too light or less than
Smith isn't his disciple right even

210
00:21:08,840 --> 00:21:13,580
though you CPUs altered it will be
decidable but still is considered the

211
00:21:13,580 --> 00:21:20,260
first case in terms of bypasses when you
slip and a stock this is the most common

212
00:21:20,260 --> 00:21:27,350
case right for any consumer system or
even allowed provide us service

213
00:21:27,350 --> 00:21:30,790
providers alright so let's introduce

214
00:21:30,790 --> 00:21:38,450
so you probably are into programming you
can do return oriented programming it's

215
00:21:38,450 --> 00:21:45,750
the same thing but you operate on the
colonel and so the differences between

216
00:21:45,750 --> 00:21:50,070
them Linux and Linux cleanness right so
what is the

217
00:21:50,070 --> 00:21:55,139
blurry fall in the the other one is
compressed image so you have to make

218
00:21:55,140 --> 00:22:01,250
sure that you using the uncompressed
image the actual allow us to get that

219
00:22:01,250 --> 00:22:05,530
fall some distributions provide I p.m.
from Tuesday problems depending on the

220
00:22:05,530 --> 00:22:12,120
distributions or you can just extract
the the compressed fall if you want to

221
00:22:12,120 --> 00:22:18,010
extract the compressive all this talk is
provided in the repository Linux kernel

222
00:22:18,010 --> 00:22:22,500
repository is checked in Linux and you
provide the compressed image and you get

223
00:22:22,500 --> 00:22:23,260
the actual

224
00:22:23,260 --> 00:22:31,190
LFO out of it right so that's what you
should see in terms of differences in

225
00:22:31,190 --> 00:22:37,450
Linux 64 bit and if you take the actual
criminal the compressed colonel will be

226
00:22:37,450 --> 00:22:40,810
something like Linux kernel boot
executable PC image

227
00:22:41,810 --> 00:22:49,120
ok so head you flying gadgets in the
Linux kernel will after people say well

228
00:22:49,120 --> 00:22:53,120
you used to write the most common
technique that uses for you this place

229
00:22:53,120 --> 00:22:59,320
there are some problems with that and
I'll cover them in the second so obvious

230
00:22:59,320 --> 00:23:04,379
time works with online memory addresses
only right so these the entry point it

231
00:23:04,380 --> 00:23:08,180
takes her address and then dumps all the
assembly instructions from the entry

232
00:23:08,180 --> 00:23:14,360
point and you limiting your spice like
road gadgets place certainly a long

233
00:23:14,360 --> 00:23:18,620
memory addresses but if you use
different offsets then you'll get much

234
00:23:18,620 --> 00:23:25,280
more instructions like many other
possibilities for judges so it's better

235
00:23:25,280 --> 00:23:29,889
to use a tool that's designed
specifically to work with ALS falsifying

236
00:23:29,890 --> 00:23:35,780
rope gadgets one of those tools is Rob
gadget right there are many all this but

237
00:23:35,780 --> 00:23:41,379
that's what I normally use the command
line would be something like Rod gadget

238
00:23:41,380 --> 00:23:48,970
winery and this is your uncompressed he
left he just gives you all the gadgets

239
00:23:48,970 --> 00:23:53,670
in the kernel and just mind you it uses
endorsing takes like the first time I

240
00:23:53,670 --> 00:23:59,830
used it I plugged it in my car crashed
what's happening so I was thinking it's

241
00:23:59,830 --> 00:24:00,770
using the

242
00:24:00,770 --> 00:24:08,620
the gas index so this is the reason why
you should be using rub gadgets you

243
00:24:08,620 --> 00:24:12,790
probably know that the authority
language density so it is this concept

244
00:24:12,790 --> 00:24:18,500
of language density meaning that the
instruction set for Int'l is so big that

245
00:24:18,500 --> 00:24:23,310
if you take in sequence of boys he can
be interpreted as a valid instruction

246
00:24:23,310 --> 00:24:26,310
right so if I take this instruction here

247
00:24:26,840 --> 00:24:32,750
943 this is this instruction not very
useful very useful gadget but if I do

248
00:24:32,750 --> 00:24:39,450
have one then this becomes my force III
and this is a diva construction right

249
00:24:39,450 --> 00:24:45,550
typically used in rock so that that's
why you have to use a proper tool some

250
00:24:45,550 --> 00:24:52,060
steak David's useful tech peoples and
you probably my most of them so first

251
00:24:52,060 --> 00:24:57,429
replace the value of our speakers stick
point with some register our XIX ideas

252
00:24:57,430 --> 00:25:02,300
depending on what you can control right
you can add something to the sticker is

253
00:25:02,300 --> 00:25:09,470
just so to to you know a positive or
negative all set to go in space or you

254
00:25:09,470 --> 00:25:14,130
can use the exchange instruction sort of
swaps the values of the two registers

255
00:25:14,130 --> 00:25:15,120
again

256
00:25:15,120 --> 00:25:24,129
subjects IDX with high speed and the one
that we actually interested in is this

257
00:25:24,130 --> 00:25:31,450
exchange instruction or 32 bit registers
are you running on a 64 bit kernel but

258
00:25:31,450 --> 00:25:35,520
using a thirty two-bit exchange
instruction and the reason for that is

259
00:25:35,520 --> 00:25:45,790
if you take our x-ray just right for
example re exceed seven dead and you

260
00:25:45,790 --> 00:25:51,100
swap it with some other register like I
speak a few study instruction here

261
00:25:51,700 --> 00:25:54,190
exchange

262
00:25:54,190 --> 00:26:05,330
to make sense yes it's a 32 bit
instructions as chops off the the first

263
00:26:05,330 --> 00:26:11,720
part 06 if it had and uses deadbeat so
this value is loaded into the stick

264
00:26:11,720 --> 00:26:17,620
register and then that point your stick
points to use a space instead be

265
00:26:17,620 --> 00:26:25,100
resource in userspace alright so what
happens when you take your private

266
00:26:25,100 --> 00:26:31,789
instruction that that's not an
executable page right so some pages in

267
00:26:31,789 --> 00:26:36,799
the kernel I read only for example right
only or read-write so depending on the

268
00:26:36,799 --> 00:26:41,750
permissions if the executable flag said
you'll get this error message saying

269
00:26:41,750 --> 00:26:52,389
colonel tried to execute an ex minuscule
protected place exploit attempt so I can

270
00:26:52,389 --> 00:26:58,199
crash if that happens so what you have
to do is find another one another

271
00:26:58,200 --> 00:27:03,399
instruction in the executable I believe
me there are many possibilities

272
00:27:03,399 --> 00:27:13,649
journalists huge all rights this is how
it works so you start with your

273
00:27:13,649 --> 00:27:20,809
vulnerable data pointer right so it's
got some dollar structure in the kernel

274
00:27:20,809 --> 00:27:26,509
and you can control the pointer to the
data structure you can corrupted so what

275
00:27:26,509 --> 00:27:33,320
you do is you basically redirect to
control a single in two cases in the

276
00:27:33,320 --> 00:27:33,830
show

277
00:27:33,830 --> 00:27:47,590
a function pointer and use the space so
that pointer point back to colonel spice

278
00:27:47,590 --> 00:27:52,990
to your private instruction to that
exchange instruction so it goes back to

279
00:27:52,990 --> 00:28:00,010
cure and allspice and once you execute
the stick people instruction you stack

280
00:28:00,010 --> 00:28:03,370
is in userspace this is this

281
00:28:03,370 --> 00:28:07,870
faced a crop amyloid that's what we call
and that's where we put our Robert

282
00:28:07,870 --> 00:28:13,949
change so it still in use this place but
now it's on the stack bicycle and then

283
00:28:13,950 --> 00:28:19,110
we just execute that standard privilege
escalation payload as a rope chain so

284
00:28:19,110 --> 00:28:25,129
commit prepare creates commit creds as a
rope chain and you've got your word

285
00:28:25,130 --> 00:28:31,840
access and so you never going you never
executing any instructions in userspace

286
00:28:31,840 --> 00:28:38,199
so you always in the count on every time
you try to execute an instruction it

287
00:28:38,200 --> 00:28:43,870
always results in the kernel stick can
be news's place this is a stack so you

288
00:28:43,870 --> 00:28:50,729
know actually executing instructions you
fitting instructions from the stack ok

289
00:28:50,730 --> 00:28:58,010
for the steak flank steak payload you've
got two options you can disable Smith as

290
00:28:58,010 --> 00:29:02,570
a rope chain and then call your
privilege escalation standard privilege

291
00:29:02,570 --> 00:29:08,189
escalation piloting uses place or you
can do the entire Smet and privilege

292
00:29:08,190 --> 00:29:12,779
escalation payload as a rule change I
typically do the first option just my

293
00:29:12,779 --> 00:29:18,519
cities have the rope chain is smaller so
basically you move that value of self or

294
00:29:18,519 --> 00:29:22,940
register so you flip the bit override
the value and then you can do whatever

295
00:29:22,940 --> 00:29:24,029
you like

296
00:29:24,029 --> 00:29:26,890
so you can go back to

297
00:29:26,890 --> 00:29:29,890
use a spice and execute your

298
00:29:31,800 --> 00:29:34,800
alright so

299
00:29:36,020 --> 00:29:41,840
this is what change would look like just
a high level you've got your

300
00:29:43,750 --> 00:29:51,000
the value for the register value so you
put that into our ex or some other

301
00:29:51,000 --> 00:29:57,590
register they need value with FFF and
disables this me bit and then you move

302
00:29:57,590 --> 00:30:01,959
that value into the caf or register and
then you call your jump to approve

303
00:30:01,960 --> 00:30:04,960
legislation power this is at a high
level

304
00:30:06,440 --> 00:30:12,419
had you get this failure this year for
register while there's no support for

305
00:30:12,419 --> 00:30:16,659
the Indy D-day so you cannot just do you
know printable yes or register

306
00:30:17,170 --> 00:30:21,330
but why should you previously can just
crash the colonel and look at the CAF

307
00:30:21,330 --> 00:30:25,050
for dolly and you'll see it doesn't
change so just take that tell you

308
00:30:27,920 --> 00:30:33,380
alright so in terms of fights Dec when
you execute that stick given instruction

309
00:30:33,380 --> 00:30:36,380
when you change the stick register

310
00:30:37,240 --> 00:30:40,240
with some other register so you said you
are speed today

311
00:30:42,790 --> 00:30:49,659
and you jump to that memory addressing
users place so great right if you can

312
00:30:49,660 --> 00:30:52,660
control this sorry exchanges

313
00:30:57,440 --> 00:30:59,630
guilty

314
00:30:59,630 --> 00:31:02,630
under the

315
00:31:03,789 --> 00:31:06,908
control her ex or any other register

316
00:31:07,690 --> 00:31:13,320
rights to the deli could be random and
that register well in that case what you

317
00:31:13,320 --> 00:31:18,580
do is you just lyk approximately four
gigs of memory use this place so you met

318
00:31:18,580 --> 00:31:23,960
think I use a spice and then you spread
with your mail id

319
00:31:25,480 --> 00:31:28,480
that makes sense

320
00:31:29,120 --> 00:31:33,860
four gigs and then anyway you jumping
users place right even if you don't

321
00:31:33,860 --> 00:31:38,280
control that are extra just let's say
just random value you still gonna get to

322
00:31:38,280 --> 00:31:41,280
use a spice to europe chain

323
00:31:42,210 --> 00:31:47,560
and again we've got a few options here
if we do something like this

324
00:31:47,560 --> 00:31:51,560
the spring so first road construction
second road construction construction

325
00:31:51,560 --> 00:31:57,379
zone and just keep repeating it it's not
really gonna work it may work but it

326
00:31:57,380 --> 00:32:04,660
might work if you say when you do stick
to the first destruction then you could

327
00:32:04,660 --> 00:32:09,360
write when you secured the first second
third and yeah but what if you landing

328
00:32:09,360 --> 00:32:15,040
to like the middle of your old wood so
it was the second or third instruction

329
00:32:15,040 --> 00:32:23,570
well in that case I just gonna crash and
the alternative is to spray the steak

330
00:32:23,570 --> 00:32:29,639
with RISP advancing gadget that's what I
thought so what I mean by our speed

331
00:32:29,640 --> 00:32:34,550
advancing gadget is something that
advances the stack right so take any

332
00:32:34,550 --> 00:32:40,840
instruction like hope something in
return right or maybe not return so you

333
00:32:40,840 --> 00:32:44,459
doing nothing return remove something
from the stag do nothing return remove

334
00:32:44,460 --> 00:32:48,860
something from the stack so you spray
the four gigs of let's say four gigs

335
00:32:48,860 --> 00:32:54,610
minus one page with that gadget and then
you put your priorities into lost by age

336
00:32:54,610 --> 00:33:01,979
so it's similar concept to the mob sled
but it's it's sort of advancing the

337
00:33:01,980 --> 00:33:04,980
stack

338
00:33:12,029 --> 00:33:19,419
yes that's what I mean by this advancing
gadgets so you spread with and then you

339
00:33:19,419 --> 00:33:23,649
can view a short time changed religious
question will change how you can execute

340
00:33:23,649 --> 00:33:31,008
all the gadgets on the stack and then
get to Europe change eventually alright

341
00:33:31,009 --> 00:33:37,070
so this was case number one when you've
got Smith and you've got a stalker not

342
00:33:37,070 --> 00:33:41,070
so let's can see the sky like CPU

343
00:33:41,700 --> 00:33:47,799
broad low CPU and you've got by Smith
and snap enabled but you have arbitrary

344
00:33:47,799 --> 00:33:51,700
rights and this is pretty common in
kernel exploitation you quite often have

345
00:33:51,700 --> 00:33:57,239
arbitrary rights or you can turn some
vulnerabilities into orbit rewrites so

346
00:33:57,239 --> 00:34:01,989
Smith and Smith meaning that I cannot go
to use the space I cannot fit

347
00:34:01,989 --> 00:34:05,690
instructions from users place I cannot
execute instructions from userspace

348
00:34:05,690 --> 00:34:14,339
right just like Congo to use a spice
alright so what we doing that case we

349
00:34:14,339 --> 00:34:21,569
have used media sorry you've probably
heard about virtual six calls if there

350
00:34:21,569 --> 00:34:27,009
are any Linux people in this room this
is basically a mechanism to speed up

351
00:34:27,010 --> 00:34:30,329
certain system calls in the kernel

352
00:34:30,329 --> 00:34:35,450
standard system calls and their virtual
system courts standard system call is

353
00:34:35,449 --> 00:34:39,199
you've got this context switch right
when you go from userspace to kernel

354
00:34:39,199 --> 00:34:44,649
space back from space to use of space
and this introduces some overhead and if

355
00:34:44,649 --> 00:34:47,940
you take a system called that's
frequently executed something like get

356
00:34:47,940 --> 00:34:53,569
time of day right this is not very
efficient so instead they introduced

357
00:34:53,569 --> 00:34:58,230
virtual sees course forces calls that
are safe they don't mind if I any memory

358
00:34:58,230 --> 00:35:06,390
page mapping user spice it's a colonel
page let me show it to you

359
00:35:08,270 --> 00:35:15,870
lost 12 days you'll see this is a memory
treats his study doesn't change even if

360
00:35:15,870 --> 00:35:24,230
you've got a salon at its fixed right
this page is accessible from userspace I

361
00:35:24,230 --> 00:35:29,990
can execute instructions residing in in
the place i am looking at getting me you

362
00:35:29,990 --> 00:35:35,160
know it's anything like that that was
the idea so you limited to eliminate

363
00:35:35,160 --> 00:35:40,970
this context switch and you go from any
just execute its calls internal space

364
00:35:40,970 --> 00:35:48,730
but then realized this was a security
issue obviously has it right this

365
00:35:48,730 --> 00:35:55,440
address doesn't change I can just write
my instructions to to this page and then

366
00:35:55,440 --> 00:36:01,380
in kernel space hiking then execute
those instructions so instead they

367
00:36:01,380 --> 00:36:06,390
introduced this video sorry and it
stands for virtual dynamic shared object

368
00:36:06,390 --> 00:36:12,000
so basically it's a shared object that's
loaded into every process the virtual

369
00:36:12,000 --> 00:36:17,890
space if every crisis same idea does
exactly the same thing it execute those

370
00:36:17,890 --> 00:36:24,140
get time of day special system calls but
this time it's it's actually implemented

371
00:36:24,140 --> 00:36:27,890
users face right so this is the uterus

372
00:36:29,100 --> 00:36:34,049
and its abuses place to run multiple
times you'll see that's when the most

373
00:36:34,050 --> 00:36:38,980
right so every time he faced lies
enabled different addresses every time

374
00:36:38,980 --> 00:36:44,090
so potentially you can't use it from you
this place right even if you know the

375
00:36:44,090 --> 00:36:46,340
address

376
00:36:46,340 --> 00:36:53,890
cool but it speaks in kills face the
userspace addresses randomized but the

377
00:36:53,890 --> 00:37:01,560
current address place is the same so the
base address for Vidya so he starts off

378
00:37:01,560 --> 00:37:06,930
tested the three point 13 three-point by
Jane can also have the same fixed

379
00:37:06,930 --> 00:37:15,730
address 4.2 was slightly different but
again he be the same for a certain range

380
00:37:15,730 --> 00:37:18,960
of currents

381
00:37:18,960 --> 00:37:20,890
so

382
00:37:20,890 --> 00:37:27,330
begins so as I said we do so it's just a
standard shared object so this is quite

383
00:37:27,330 --> 00:37:32,660
a bit to just reach virtual memory of
the process and extracts that has so far

384
00:37:32,660 --> 00:37:35,750
all I've extracted it and then

385
00:37:36,310 --> 00:37:40,460
runs a farm it will see its extended
1164 get home

386
00:37:43,750 --> 00:37:52,440
yet so you can call you can just 23 DLF
and dumped all the symbols only

387
00:37:52,440 --> 00:37:55,540
interested in the construction of you
while I just didn't move date

388
00:37:56,380 --> 00:38:04,579
you can see the instructions such as 233
place in size that's pretty big for my

389
00:38:04,579 --> 00:38:10,940
previous collection plate right place so
what I can do it is basically take the

390
00:38:10,940 --> 00:38:17,180
offset of the instruction D thirty plus
the Bison address and then I get the

391
00:38:17,180 --> 00:38:24,339
address in kernel where this function is
right and I can just override function

392
00:38:24,339 --> 00:38:30,819
the pages mapped as Read Write video so
page so from kernel space I can just

393
00:38:30,819 --> 00:38:36,460
write my privilege escalation oil into
that hideous object and its gonna be

394
00:38:36,460 --> 00:38:44,210
lauded by a verbose it right so what
this privilege escalation payload looks

395
00:38:44,210 --> 00:38:49,390
like it's just a standard procedures
collection payload on Linux kernel

396
00:38:49,390 --> 00:38:54,868
escalation pilots like prepare creates
commit creds but the the userspace one

397
00:38:54,869 --> 00:39:01,109
so for example take the reverse shell
provincial back to localhost right so

398
00:39:01,109 --> 00:39:06,848
what you have to do is show county's
first check if the UID 0 of the process

399
00:39:06,849 --> 00:39:13,339
is there are many processes on your
Linux system using get time of day they

400
00:39:13,339 --> 00:39:15,328
all gonna call get time of day

401
00:39:15,329 --> 00:39:20,490
some of them have your ideas irri others
are not only interested in your G 02

402
00:39:20,490 --> 00:39:24,129
what you do is you check it for your
ideas era and then you execute a

403
00:39:24,130 --> 00:39:28,069
reversal and then you just listen with
netcat Samuel Michael Hiestand you get a

404
00:39:28,069 --> 00:39:34,460
Shellback a simple as that so you never
go to journalist place from kernel space

405
00:39:34,460 --> 00:39:38,720
to use a spice the entire British
escalation payload is executed in music

406
00:39:38,720 --> 00:39:41,720
space and that bypasses Smith and snap

407
00:39:42,690 --> 00:39:53,079
pretty cool idea finally got time for
this five minutes right look to do a

408
00:39:53,079 --> 00:39:59,420
quick one so just to show you how this
rope chain works and it's pretty easy to

409
00:39:59,420 --> 00:40:06,420
implement this rock chain of taking this
CD and the reason so this is my target

410
00:40:06,420 --> 00:40:09,230
system is just you want to 1204

411
00:40:09,230 --> 00:40:25,380
3.5 colonel and use reach the target
system the reason I've decided to use

412
00:40:25,380 --> 00:40:31,410
the serious effects a small range of
kernels rights or 3.32 3.8 and it's

413
00:40:31,410 --> 00:40:34,560
quite easy to understand so if you've
never done any kind of exploitation

414
00:40:34,560 --> 00:40:36,630
before it's a simple

415
00:40:36,630 --> 00:40:42,920
downs access right so no previous
knowledge required and I believe these

416
00:40:42,920 --> 00:40:49,980
are public exploit for this as well but
it's only for 32 bit systems so right so

417
00:40:49,980 --> 00:40:53,119
this is the vulnerable function its

418
00:40:54,180 --> 00:40:59,830
diag function so there are some special
sockets in the Linux kernel that you can

419
00:40:59,830 --> 00:41:03,799
create and the the vulnerable code is
here

420
00:41:04,619 --> 00:41:09,600
alright so you've got this sold-out
headless array and there's this family

421
00:41:09,600 --> 00:41:16,680
arabian Dicks and you can control this
family arabian Dicks case you can

422
00:41:16,680 --> 00:41:22,520
provide any value so you can go to us
any memory address online its memory

423
00:41:22,520 --> 00:41:29,030
memory address in kernel space for users
place right so the idea is that you

424
00:41:29,030 --> 00:41:36,700
prepare this endless array with the
index right so 45 is out of balance if

425
00:41:36,700 --> 00:41:42,299
you use the index of 45 for example
you'll go to use this place and then you

426
00:41:42,300 --> 00:41:47,630
prepare your data structure you're sort
of flight data structure in userspace so

427
00:41:47,630 --> 00:41:51,990
I can lie and that data structure
contains a function pointer called done

428
00:41:51,990 --> 00:41:55,009
right

429
00:41:55,010 --> 00:41:58,010
so what you do

430
00:41:59,330 --> 00:42:06,290
function pointed back to colonel spice
to your people instruction and once

431
00:42:06,290 --> 00:42:14,480
you've swapped the the stack the deck
with some are extra objects value you

432
00:42:14,480 --> 00:42:22,880
pointed to your fake Strike Fighters Dec
then that's where you put your privilege

433
00:42:22,880 --> 00:42:24,280
escalation payload

434
00:42:24,280 --> 00:42:31,560
change these are just some details how
you do it just map this area with your

435
00:42:31,560 --> 00:42:37,730
privilege escalation your options spray
the stack with this warp advancing

436
00:42:37,730 --> 00:42:40,630
gadget

437
00:42:40,630 --> 00:42:45,030
this is the actual rope chain implement
so if you take the same kernel version

438
00:42:45,030 --> 00:42:48,820
as I did and by the way the exporters
public its own get help if you wanna

439
00:42:48,820 --> 00:42:52,780
take a look at that so you can you can
do rock

440
00:42:53,280 --> 00:42:56,400
gadget on it and you'll get the same
memory dresses as I did

441
00:42:57,130 --> 00:42:58,920
doesn't change

442
00:42:58,920 --> 00:43:04,549
and then when you execute your old
change you can do the IREX IREX is

443
00:43:04,549 --> 00:43:08,819
basically returning from an interrupt a
standard instruction it restores all the

444
00:43:08,819 --> 00:43:13,920
values the user code segment the use a
stick sigmund and so on and then you

445
00:43:13,920 --> 00:43:16,920
return to use a space with elevated
privileges

446
00:43:17,470 --> 00:43:23,049
so it's just some details for you don't
wanna know if I've got time for the demo

447
00:43:23,050 --> 00:43:26,050
but let's do a quick one

448
00:43:41,250 --> 00:43:44,250
virtual machine

449
00:43:48,960 --> 00:43:51,960
gonna boot with map

450
00:44:03,470 --> 00:44:06,470
you can see is enabled

451
00:44:07,330 --> 00:44:14,920
so this is that diag export again it's
probably and this is Rob changed I was

452
00:44:14,920 --> 00:44:17,920
talking about

453
00:44:21,700 --> 00:44:25,710
was so let's hope it doesn't crash

454
00:44:35,859 --> 00:44:43,390
so you can see that is still there right
even though I disabled it in the

455
00:44:43,390 --> 00:44:48,160
register it's actually zero at the
moment but it still listed as enabled

456
00:44:48,160 --> 00:44:55,410
and I can do a clean exit right doesn't
crash i restore the state point and it's

457
00:44:55,410 --> 00:44:58,410
all good and there is no hoops messages
in the log

458
00:45:00,450 --> 00:45:10,169
thank you thank you

459
00:45:15,619 --> 00:45:19,430
you actually is right

460
00:45:20,530 --> 00:45:27,670
but it indeed is based virtually all the
all the user space processes can see the

461
00:45:27,670 --> 00:45:33,890
colonel in the same address but how does
the kernel knows what is the ritual

462
00:45:33,890 --> 00:45:39,779
addresses of the current user space
process by the this thread

463
00:45:39,780 --> 00:45:44,310
infrastructure so when you secure prices
actually knows that this is the current

464
00:45:44,310 --> 00:45:54,029
process running the executing right so
let's say you've map page A Thousand in

465
00:45:54,030 --> 00:46:00,100
hex to 2002 internal reference that's
place for that particular process that

466
00:46:00,100 --> 00:46:08,259
called that and you get it happens
without you knowing me knowing yes ok

467
00:46:08,260 --> 00:46:17,000
about the media still exploitation so to
do that you already need to have good

468
00:46:17,000 --> 00:46:24,780
education in the kernel write some kind
of memory corruption vulnerability ok so

469
00:46:24,780 --> 00:46:29,970
just makes it easier to explain what
once you use it right it's basically you

470
00:46:29,970 --> 00:46:34,549
bypass and smear pence map right so
you've got Houston in the current all

471
00:46:34,550 --> 00:46:39,110
right but let's say you CPUs good boy
seen able to if you do with standard

472
00:46:39,110 --> 00:46:43,550
provision escalation payload you girls
gonna crash right but if you right into

473
00:46:43,550 --> 00:46:48,830
video so many do it that way then you
get root ok thanks

474
00:46:48,830 --> 00:46:51,490
anyone else

475
00:46:51,490 --> 00:46:56,490
questions are literally thank you very
much good

