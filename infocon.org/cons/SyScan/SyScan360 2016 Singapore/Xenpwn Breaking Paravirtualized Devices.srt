1
00:00:00,060 --> 00:00:06,459
welcome to my talk about comments on
breaking powerless devices and before I

2
00:00:06,459 --> 00:00:11,450
start with textual content and why loud
people are searching for seeds of star

3
00:00:11,450 --> 00:00:16,810
which was shot at reduction about myself
so my name is Felix Miller mime security

4
00:00:16,810 --> 00:00:21,679
researcher at year W research and I'm
mainly interested in application and

5
00:00:21,679 --> 00:00:27,619
virtualization security so no recent
years mostly concentrated on security

6
00:00:27,619 --> 00:00:32,070
appliances on the one hand side so we
did some research on fire protection

7
00:00:32,070 --> 00:00:37,220
system as well as just last week a
trooper's I did publish some research

8
00:00:37,220 --> 00:00:42,100
about the Palo Alto next-generation
firewall and besides that mostly working

9
00:00:42,100 --> 00:00:46,280
on high-profile switch will read the
content of to stalk you can also find me

10
00:00:46,280 --> 00:00:54,100
on Twitter Follow Me ok so to start with
two actually general topic of today's

11
00:00:54,100 --> 00:00:59,940
tog I will mainly talked about power
devices for the security of powerless

12
00:00:59,940 --> 00:01:03,780
devices and so the first part of the
talk will be shot introduction was

13
00:01:03,780 --> 00:01:09,840
devised virtualization and what our
politics power devices in contrast to

14
00:01:09,840 --> 00:01:14,840
normal device emulation know we talked
about above sudden inability to type the

15
00:01:14,840 --> 00:01:19,450
dollar fetched vulnerabilities and I
present my true extent on which is

16
00:01:19,450 --> 00:01:24,520
designed to 24 automatically identified
establish vegetable abilities in power

17
00:01:24,520 --> 00:01:29,530
tool s device communication after that I
shortly go through the interesting

18
00:01:29,530 --> 00:01:33,530
results I i discovered using this tool
and and elastin the main part of the

19
00:01:33,530 --> 00:01:39,520
talk will be a case study a walk-through
full hypervisor breakout explored using

20
00:01:39,520 --> 00:01:46,709
one of the box I discovered using so
let's start with device virtualization

21
00:01:47,299 --> 00:01:52,229
basically if you have a virtual system
you need access to a voucher to virtual

22
00:01:52,229 --> 00:01:57,850
devices and these devices can be like
disco a network of serial devices and

23
00:01:57,850 --> 00:02:01,809
everything you can imagine and
traditionally everyone use device

24
00:02:01,810 --> 00:02:06,810
simulation for that so the court your
device emulation is simply emulate old

25
00:02:06,810 --> 00:02:11,060
and well supported hardware devices so
your guest operating system probably

26
00:02:11,060 --> 00:02:13,140
already has a driver built in

27
00:02:13,140 --> 00:02:17,519
you don't need any special drivers and
you can just install the operating

28
00:02:17,520 --> 00:02:21,310
system using the standard ways in your
virtual machine and it will probably

29
00:02:21,310 --> 00:02:28,569
just work so just like to security risks
of device simulation are quite well

30
00:02:28,569 --> 00:02:33,399
understood even had like to talk
yesterday about pausing to QMI device

31
00:02:33,400 --> 00:02:37,790
simulation and a lot of research
Aldawsari's like just like a couple of

32
00:02:37,790 --> 00:02:42,660
examples for example to others on Monday
released I O farce which basically did

33
00:02:42,660 --> 00:02:48,220
funding of pot and memory mapped i/o and
at that time when he released a tool you

34
00:02:48,220 --> 00:02:52,140
could crash like every regulation
software in existence just bow bruting

35
00:02:52,140 --> 00:02:58,179
that live CD letting it run for like
half an hour something and last year we

36
00:02:58,180 --> 00:03:03,570
had like two been embarked which was a
disk floppy disk controller back so it

37
00:03:03,570 --> 00:03:08,590
was part of the qAME code and could use
that to break out so in summary like

38
00:03:08,590 --> 00:03:13,060
device emulation is hard to implement
security and correctly and you will find

39
00:03:13,060 --> 00:03:20,720
a lot of proximate so why I'm talking
about powered devices emulated devices

40
00:03:20,720 --> 00:03:23,390
are kind of slow extremely slow

41
00:03:23,390 --> 00:03:27,920
emulate like devices from the nineties
most of the time so they have no

42
00:03:27,920 --> 00:03:33,220
advanced features and like emulating a
memory mapped i/o port i/o in a

43
00:03:33,220 --> 00:03:37,519
virtualized environment triggers a lot
of YM exit you don't have a lot of

44
00:03:37,519 --> 00:03:43,040
bandwidth so overall it's really slow
for like the whole performance of the

45
00:03:43,040 --> 00:03:48,810
system so every major hypervisors
decided yet we do don't want to rely on

46
00:03:48,810 --> 00:03:53,780
emulated devices completely we also want
to have like special kind of device

47
00:03:53,780 --> 00:03:59,700
drivers that are optimized to be used in
July system and solution is like power

48
00:03:59,700 --> 00:04:05,820
devices so these are like devices but no
don't talk to to choose to extra

49
00:04:05,820 --> 00:04:09,489
hardware but instead are optimized for
use in virtualization

50
00:04:09,490 --> 00:04:16,410
and it's basically a specialized device
Toyota that you can use if the driver

51
00:04:16,410 --> 00:04:19,870
isn't available to virtual system
because it's not installed or something

52
00:04:19,870 --> 00:04:24,570
you can still fall back to emulate
devices so that's why you always have

53
00:04:24,570 --> 00:04:30,700
liked you a move running on under KVM
extender something but it should only be

54
00:04:30,700 --> 00:04:34,280
used as a fallback mechanism and if you
actually look at like a running system

55
00:04:34,280 --> 00:04:38,640
running on like send you something you
would see they actually lying on these

56
00:04:38,640 --> 00:04:45,140
povich less devices so how's the stuff
actually implemented its hours or at

57
00:04:45,140 --> 00:04:45,520
least

58
00:04:45,520 --> 00:04:49,539
architectures I looked at as always
implemented as a split driver model and

59
00:04:49,540 --> 00:04:54,230
it starts weds or that's where it starts
to be interesting so I front-end

60
00:04:54,230 --> 00:04:58,920
deadlines and a guest to the front and
basically just looks like a normal

61
00:04:58,920 --> 00:05:05,060
device drivers on Linux it's just like a
normal economy are you that looks to the

62
00:05:05,060 --> 00:05:09,270
rest of the operating systems are just
like a normal be wise to avoid talking

63
00:05:09,270 --> 00:05:11,190
to some kind of I don't know

64
00:05:11,190 --> 00:05:16,960
device PCI device and then you have a
backhand and the back and once in the

65
00:05:16,960 --> 00:05:20,960
management of rain or shine on the host
system so send its management domain on

66
00:05:20,960 --> 00:05:27,909
KVM it would be the host system and
determine what's the difference between

67
00:05:27,910 --> 00:05:32,670
the hypervisor soon hyper you discard
like virtualization servers cloud and

68
00:05:32,670 --> 00:05:37,630
virtualization service provider it's
more or less the same implementation for

69
00:05:37,630 --> 00:05:40,240
all of them on KVM I O

70
00:05:40,240 --> 00:05:48,090
when you look at it actually implemented
and some something that's interesting if

71
00:05:48,090 --> 00:05:51,630
you want to target them they're all
implemented on top of shared memory

72
00:05:52,770 --> 00:05:57,490
shared memory because it's really create
for performance so you just like

73
00:05:57,490 --> 00:06:02,930
exchanged messages over your your main
memory so it's really fast network steak

74
00:06:02,930 --> 00:06:07,060
or something it's really easy to
implement especially if you already have

75
00:06:07,060 --> 00:06:11,650
a login hypervisor one in sharing your
physical memory page between different

76
00:06:11,650 --> 00:06:16,500
execution contexts like it's one of the
main purposes you probably use a

77
00:06:16,500 --> 00:06:22,180
hypervisor fraud and you can't do like
advanced stuff like 0 copy idealism so

78
00:06:22,180 --> 00:06:27,099
like the network traffic generated in
your in your guest virtual machine can

79
00:06:27,099 --> 00:06:32,919
be directly passed into like to GMA me
which of your network card for example

80
00:06:32,919 --> 00:06:38,340
so this all makes it like the most
performing way to do this powerless

81
00:06:38,340 --> 00:06:42,739
devices and of course if you just have
like a shared memory page mapped into

82
00:06:42,740 --> 00:06:49,210
UVM NGO management domain you can't
directly like to use this for for a

83
00:06:49,210 --> 00:06:54,330
message exchanging so everyone
implements basically rebuttal shared

84
00:06:54,330 --> 00:07:01,300
memory regions so you have just let the
classical ring buffer to exchange or two

85
00:07:01,300 --> 00:07:07,969
to emulate some kind of message passing
and of course on top of dead you have a

86
00:07:07,969 --> 00:07:13,029
more complex protocols so it's basically
like a network protocol stack so you

87
00:07:13,029 --> 00:07:16,310
have like shared memory at the bottom
then you have to win both halves on top

88
00:07:16,310 --> 00:07:21,889
of that and the messages exchanged using
the authors are likely device specific

89
00:07:21,889 --> 00:07:26,699
messages so every front-end and back-end
driver has potential leader completely

90
00:07:26,699 --> 00:07:31,529
different kind of protocol these
particles called kind of complex most of

91
00:07:31,529 --> 00:07:38,169
the time which of course this is dead so
if we want to look at you can like

92
00:07:38,169 --> 00:07:41,719
Target these protocols like you would do
target on the network protocols and

93
00:07:43,360 --> 00:07:48,419
implementation due to a list at this
shadow mapping still can be created on

94
00:07:48,419 --> 00:07:53,590
dumont if you want to like exchange a
lot of Pedro was like a single package

95
00:07:53,590 --> 00:07:59,229
on it just created content danjus
constant so there will be traded up and

96
00:07:59,229 --> 00:08:03,599
I'm do devices communicate with each
other over these constant shared-memory

97
00:08:03,599 --> 00:08:09,280
mappings so why you should really look
at these power tillers devices so why

98
00:08:09,280 --> 00:08:13,969
should we be interested in them the idea
is that you have a backhand and add runs

99
00:08:13,969 --> 00:08:19,449
and approval of context so on the host
system on the management to me so all

100
00:08:19,449 --> 00:08:23,169
the communication going on between the
front and back Anderson trust boundary

101
00:08:23,169 --> 00:08:29,090
only she can exploit into by a backhand
you can view virtual environment its

102
00:08:29,090 --> 00:08:34,240
low-level code it's pausing so its
political power so they are all box

103
00:08:34,240 --> 00:08:37,750
there are also some publicly report

104
00:08:37,750 --> 00:08:44,930
bilities but interestingly not very much
as he paced buffer overflow in the KVM

105
00:08:44,930 --> 00:08:50,959
this back and it was reported in 2011
and last year someone from Microsoft

106
00:08:50,959 --> 00:08:56,029
actually reported a buffer overflow in
the hyper-v storage bag and and i think

107
00:08:56,029 --> 00:08:59,899
is actually the first example of a
vulnerability that was internally

108
00:08:59,899 --> 00:09:05,000
discovered by Microsoft but still got
credits on on Patch Tuesday so this was

109
00:09:05,000 --> 00:09:10,550
one of the first examples for Microsoft
actually credited in internal researcher

110
00:09:10,550 --> 00:09:17,319
for his work and it seems to be that
kind of devices are not a scrutinized so

111
00:09:17,320 --> 00:09:21,680
not as many people are looking into them
as it is the case for four emulated

112
00:09:21,680 --> 00:09:26,310
devices and I think the reason for that
is mainly that you have like device and

113
00:09:26,310 --> 00:09:29,689
hypervisor specific but of course we
have to do some kind of source code

114
00:09:29,690 --> 00:09:32,610
reading or reverse engineering until you

115
00:09:32,610 --> 00:09:37,940
understand what these devices are doing
and I'm sure files because it's not like

116
00:09:37,940 --> 00:09:42,980
simply put I O memory map instead you
have to create these shared memory

117
00:09:42,980 --> 00:09:48,750
mapping and put her in death and so for
example folks and her friend and

118
00:09:48,750 --> 00:09:53,079
misbehave so it sounds like messages
that don't make any sense like to

119
00:09:53,079 --> 00:09:57,519
complete device boot just cute so you
have to completely reset up and stuff

120
00:09:57,519 --> 00:10:04,550
like that so it's not like it's not easy
to pasta stuff very efficiently as

121
00:10:04,550 --> 00:10:08,649
something very interesting target
because nowadays if you look at the

122
00:10:08,649 --> 00:10:14,279
device emulation most of them is done in
user space for KVM and and send you have

123
00:10:14,279 --> 00:10:19,930
to queue a movie if you look at Hyper V
you have 2 p.m. worker process and there

124
00:10:19,930 --> 00:10:27,859
are all in a days too heavily sand box
container p.m. worker processes have the

125
00:10:27,860 --> 00:10:30,860
same box using home windows

126
00:10:31,600 --> 00:10:37,269
on the other hand device beckons at
least ones that are required for high

127
00:10:37,269 --> 00:10:44,899
performance network and disc and they're
often simply implemented in space so the

128
00:10:44,899 --> 00:10:49,130
kind of the back and moderates economy
model does that's the case for hyper-v

129
00:10:49,130 --> 00:10:53,850
for KVM and trucks and service means if
you find a bug in one of these beckons

130
00:10:53,850 --> 00:10:58,550
you haven't I work on a compromise you
don't have to be done to address second

131
00:10:58,550 --> 00:11:02,490
leg sandbox escape or something like
that you're directly in color contacts

132
00:11:02,490 --> 00:11:08,509
often management domain which is instant
win for all for use cases so Dixon

133
00:11:08,509 --> 00:11:12,899
developers often argued yeah you don't
compromise the hypervisor so it's not

134
00:11:12,899 --> 00:11:16,790
like a hypervisor compromise but you
compromise diminishment domain which in

135
00:11:16,790 --> 00:11:23,050
turn like many other for like practical
purposes this is like a complete

136
00:11:23,050 --> 00:11:29,229
compromised system and device has also
become more and more important because

137
00:11:29,230 --> 00:11:34,319
but some machines need to access to more
and faster and different devices so

138
00:11:34,319 --> 00:11:40,240
every device types of PCI passthrough
you want to spot touchscreens machine

139
00:11:40,240 --> 00:11:45,199
yes we do acceleration and stuff like
this and all of this implemented on top

140
00:11:45,199 --> 00:11:50,579
of these perverts less devise mechanisms
of course this stuff doesn't get easier

141
00:11:50,579 --> 00:11:55,979
because if you can tell the performance
of KVM and sandwiches are the main

142
00:11:55,980 --> 00:12:00,089
differences you will see is the
performance of despair much less devices

143
00:12:00,089 --> 00:12:05,329
so that's like an area where do we want
to optimize because that's how we can

144
00:12:05,329 --> 00:12:09,008
like performance advantages in
comparison to the to the other

145
00:12:09,009 --> 00:12:16,740
implementations and and software windows
especially Microsoft they decided to

146
00:12:16,740 --> 00:12:21,250
completely remove and related devices
because they are such a popular text her

147
00:12:21,250 --> 00:12:25,630
face so if you have a high power
generation 2 p.m. which as of now can

148
00:12:25,630 --> 00:12:33,410
just then that doesn't exist they don't
exist any any emulator devices anymore

149
00:12:33,410 --> 00:12:37,120
so instead you only have power tillers
devices so this means if you want to

150
00:12:37,120 --> 00:12:40,889
take devices you have to take two
powerful tools

151
00:12:40,889 --> 00:12:46,519
so the goal of the whole research are
presented it was Paisley highly

152
00:12:46,519 --> 00:12:51,629
inefficient way or find a way to
efficient will ability discovered we

153
00:12:51,629 --> 00:12:57,029
encourage less devices so I don't want
to like ducreux menu a source code

154
00:12:57,029 --> 00:13:00,819
analysis I especially don't want to do
like manuel we were some Junoon of

155
00:13:00,819 --> 00:13:06,368
proprietary hypervisors so I wanted to
have some kind of weight its automated

156
00:13:06,369 --> 00:13:10,600
energy would work against open source
software as well as against proprietary

157
00:13:10,600 --> 00:13:17,899
software and to call ID yes there was no
research published that talks about the

158
00:13:17,899 --> 00:13:21,939
use of shared memory and perverted nice
devices which is interesting because

159
00:13:21,939 --> 00:13:26,569
there's a certain bunglers that only
affects shared memory interfaces and

160
00:13:26,569 --> 00:13:36,108
classes go to double check availability
so what type of time of check to time

161
00:13:36,109 --> 00:13:41,379
refused bug that effects shared memory
and 222 a definable assembly is

162
00:13:41,379 --> 00:13:47,509
basically you have a privilege process
and that privilege process catches two

163
00:13:47,509 --> 00:13:52,649
times on multiple times from the same
memory to us and it perform some kind of

164
00:13:52,649 --> 00:14:01,040
validation but that validation mike
wants and this is a general generic our

165
00:14:01,040 --> 00:14:04,779
class and it can introduce a lot of
different kind of win abilities so you

166
00:14:04,779 --> 00:14:13,999
can after that you can check so you can
have a thorough of lawyers you can get

167
00:14:13,999 --> 00:14:17,059
direct instruction pointer controllers
will see later on

168
00:14:17,710 --> 00:14:22,450
and so it's a really interesting impact
of course I'm not the first person

169
00:14:22,450 --> 00:14:26,650
talking about double shots will
abilities so when OSHA published a shot

170
00:14:26,650 --> 00:14:30,390
to your blog post I had like a short
history section but I directly good

171
00:14:30,390 --> 00:14:36,960
feedback from spin off from job security
data mister couple of guys so hopefully

172
00:14:36,960 --> 00:14:41,710
like told us one ordered the first ones
I discovered but if I might still

173
00:14:41,710 --> 00:14:47,290
missing some guys please don't be angry
with me so I think the town was first

174
00:14:47,290 --> 00:14:54,089
coined by film unit 70 in 2008 in a blog
post to the Microsoft Research block but

175
00:14:54,090 --> 00:15:00,320
it was just like the terminology class
was well known before so most of the

176
00:15:00,320 --> 00:15:03,710
research was published around 2007 2008

177
00:15:03,710 --> 00:15:08,230
also used paper exploiting conquers to
you want abilities and system called

178
00:15:08,230 --> 00:15:12,920
weapons from a guy called global hilton
where he basically use double fudge to

179
00:15:12,920 --> 00:15:18,949
bypass system for sheltering and I was
the CCC presentation and Frank articles

180
00:15:18,950 --> 00:15:24,070
this classical attacking the coffee
article actually also talks about this

181
00:15:24,070 --> 00:15:29,230
race conditions and rules within budget
and as fuck you I hope I pronounced it

182
00:15:29,230 --> 00:15:35,860
correctly and tech talk about one limits
which is the first public example of

183
00:15:35,860 --> 00:15:44,530
these Telus Mobility to send message of
260 co-directors back and basically what

184
00:15:44,530 --> 00:15:49,569
you can see you have in line 5 you have
called to discard user function which

185
00:15:49,570 --> 00:15:56,190
copy something out of the use of space
and it puts the value in to do you see

186
00:15:56,190 --> 00:15:57,950
em length integer

187
00:15:57,950 --> 00:16:03,050
and that variable list and used to to
perform a memory location on the heap so

188
00:16:03,050 --> 00:16:04,640
it's like a lengthy feud

189
00:16:04,640 --> 00:16:10,660
and later on to have a second quarter to
schedule a function which again copies

190
00:16:10,660 --> 00:16:16,180
to value from userspace introduced you
see em Len viable and I'm using the

191
00:16:16,180 --> 00:16:21,930
length of argument for a copy operation
so of course of an attacker's a move to

192
00:16:21,930 --> 00:16:28,079
switch the value that has started an
interest between line 5 and line 18 then

193
00:16:28,080 --> 00:16:32,650
you have a trivial like overflow
vulnerability and this was extremely

194
00:16:32,650 --> 00:16:39,540
exploitable for like a local route local
installation and so this is a simple

195
00:16:39,540 --> 00:16:43,870
example for the ability because you can
actually see you dance salsa code and

196
00:16:43,870 --> 00:16:48,220
slick true invocation to this copy from
user function but as we will see later

197
00:16:48,220 --> 00:16:53,560
on that's not what happens in most of
these cases so after this research in

198
00:16:53,560 --> 00:16:59,099
2007 2008 there wasn't that much
published about double fetches under

199
00:16:59,100 --> 00:17:03,410
2000 searching when I was to paper
identifying and exploiting Windows

200
00:17:03,410 --> 00:17:10,020
colorways conditions by a memory access
patterns by your own and it's also known

201
00:17:10,020 --> 00:17:17,750
as box power and you have an extended
version of box after box CPU emulator

202
00:17:17,750 --> 00:17:23,140
and a trace our memory accesses from
Connor to use a space to look if

203
00:17:23,140 --> 00:17:28,820
buchanan's excesses like single-member
multiple times in a row in the short

204
00:17:28,820 --> 00:17:32,770
time frame and this indication of a
doubleheader availability so if there's

205
00:17:32,770 --> 00:17:38,360
time to us they do manual analysis and
start looking at that code policy in

206
00:17:38,360 --> 00:17:44,219
more details they used successfully to
like find a significant number of

207
00:17:44,220 --> 00:17:48,450
Windows box like a lot of local
privilege escalation box discovered in

208
00:17:48,450 --> 00:17:55,580
Windows they also want a pony for did
which was well deserved but nobody will

209
00:17:55,580 --> 00:18:00,100
continued working on the topic so that
even released letterbox pounds Hoskote

210
00:18:00,100 --> 00:18:04,389
you can use a toy on research but I
wasn't much published any more about

211
00:18:04,390 --> 00:18:07,790
that type in general or how you could
use it for different targets

212
00:18:08,340 --> 00:18:13,789
in addition to let Dad releasing the
truth and finding these Boxtel to have

213
00:18:13,789 --> 00:18:20,440
really did detailed analysis how exploit
Moody's box actually are and to to

214
00:18:20,440 --> 00:18:25,390
summarize it in one sentence if you have
a mood system so your virtual machine oh

215
00:18:25,390 --> 00:18:29,460
and in case your whole system has
multiple cars available then he's double

216
00:18:29,460 --> 00:18:33,669
fudge and abilities are trivially
exploitable even if the races will you

217
00:18:33,669 --> 00:18:39,370
shot so if you don't have a not very
much time to to switch to value because

218
00:18:39,370 --> 00:18:44,629
just because you will always win if you
can try often enough and as the name

219
00:18:44,630 --> 00:18:49,700
suggests like my talks named sent home
box bonus basically the main inspiration

220
00:18:49,700 --> 00:18:57,039
of this research and I think possibly
create work so early example of the type

221
00:18:57,039 --> 00:19:00,220
of wound ability discovered with box
balance of this is codes from the

222
00:19:00,220 --> 00:19:05,440
winners from the Windows Connor it's the
end she helped cache lookup Andrew

223
00:19:05,440 --> 00:19:11,220
function and you can see the video I
register points to shared memory

224
00:19:11,220 --> 00:19:15,720
allocation points to userspace which as
fun our discussion the smallest shared

225
00:19:15,720 --> 00:19:22,659
memory location and at offset secs hmm
there we'd like a value out of it and

226
00:19:22,659 --> 00:19:27,549
put it into the register and then they
used that as an argument for real

227
00:19:27,549 --> 00:19:32,899
provide and bro provide basically checks
that contains like of eligible space

228
00:19:32,899 --> 00:19:37,439
point so and white apple userspace point
so otherwise you could just over i'd

229
00:19:37,440 --> 00:19:42,440
like a comment to us but to provide
Carberry fries disappointing to writable

230
00:19:42,440 --> 00:19:47,590
userspace to both numbers than they used
this address as a destination for mem

231
00:19:47,590 --> 00:19:53,418
copies of us an argument to mem copy on
line 9 but they don't use like already

232
00:19:53,419 --> 00:19:59,549
stored well unisex and static featured a
second time for me it's a member so does

233
00:19:59,549 --> 00:20:04,340
again to double shots problem you have
like to see addressed pointing to use

234
00:20:04,340 --> 00:20:10,620
the space and to fetch two times once
before and once after joke just switched

235
00:20:10,620 --> 00:20:11,389
value

236
00:20:11,389 --> 00:20:15,458
than you can bypass the check and have
Tribune memory corruption vulnerability

237
00:20:15,459 --> 00:20:20,839
and it's interesting about this code so
we don't have to source code for this

238
00:20:20,839 --> 00:20:25,019
because it's the coat but you can't be
really sure how this looks like in

239
00:20:25,019 --> 00:20:29,200
Saltcoats who is this like a point
hundreds dealer friends twice by the

240
00:20:29,200 --> 00:20:33,899
user or is this like a function as a
compiler optimization that makes this

241
00:20:33,899 --> 00:20:37,458
doubleheader happens so this is an
interesting properties of these kind of

242
00:20:37,459 --> 00:20:45,190
box so not this was so what's the idea
of cent owned and basically the idea is

243
00:20:45,190 --> 00:20:49,829
we used to say memory access tracing a
boat docks phone users but we want to

244
00:20:49,829 --> 00:20:53,119
look at power july's device
communication so we are not interested

245
00:20:53,119 --> 00:20:57,668
in space kind of communication instead
we want to break out of a virtual

246
00:20:57,669 --> 00:21:02,299
machine now the first Western everyone
asked this yet weighed you don't seem to

247
00:21:02,299 --> 00:21:07,950
do spokesman for dead and a broken Wii
Folkestone is extremely slow so the box

248
00:21:07,950 --> 00:21:14,299
CPU emulator by itself is very slow and
then if you use like if you used the

249
00:21:14,299 --> 00:21:19,179
instrumentation to a Dropbox pound it's
even more slowed by a fact of life or

250
00:21:19,179 --> 00:21:25,639
something and you can't like it's a
passive overhead so this will affect the

251
00:21:25,639 --> 00:21:29,968
whole system you can't simply like to
targeted tracing to only look at certain

252
00:21:29,969 --> 00:21:35,109
memory accesses box bone will likely
look at on memory access and introduces

253
00:21:35,109 --> 00:21:37,090
overhead to the whole system

254
00:21:37,090 --> 00:21:42,820
you also don't have like two
possibilities so if you're in 2016

255
00:21:42,820 --> 00:21:49,669
Summer 2012 inbox it simply want so of
course not a problem of postponements

256
00:21:49,670 --> 00:21:56,090
blah blah stocks but not usable for
further research idea I had in mind and

257
00:21:56,090 --> 00:21:57,129
then you have

258
00:21:57,130 --> 00:22:03,200
the problem dead simply done like these
traces into a text file on disk and died

259
00:22:03,200 --> 00:22:07,300
just days even documented and indepen-
doesn't approached it doesn't really

260
00:22:07,300 --> 00:22:12,560
scared because he had really long traces
its tax trial will grow guide gigantic

261
00:22:12,560 --> 00:22:20,010
will usable anymore so I my idea was
don't use the box as the CPU emulator

262
00:22:20,010 --> 00:22:24,390
but instead implement distressing abroad
on top of heartburn assisted

263
00:22:24,390 --> 00:22:32,550
virtualization and as the architecture
of Temple so you have level hypervisor

264
00:22:32,550 --> 00:22:37,110
in my case this is crap that's why it's
called send power of nested

265
00:22:37,110 --> 00:22:41,870
virtualization so that means you have
your targets hypervisor and to target

266
00:22:41,870 --> 00:22:46,060
virtual machines a day and Dale
undisturbed so that in itself

267
00:22:46,680 --> 00:22:49,840
virtual machine running under sense we
have like this

268
00:22:49,840 --> 00:22:57,639
washing machine and so does the boxes
are basically the communications stuff

269
00:22:57,640 --> 00:23:01,700
we want to look at certain selectively
shared memory areas we want to intercept

270
00:23:01,700 --> 00:23:06,920
and we have in the in the level one
might management domain we have all our

271
00:23:06,920 --> 00:23:13,620
troops money this architecture has two
important benefit that you don't have to

272
00:23:13,620 --> 00:23:18,050
introduce any modifications to the
hypervisor so I don't know I'd code for

273
00:23:18,050 --> 00:23:24,190
11 hypervisor instead all my coat saudis
electric rate boxes I at least somehow a

274
00:23:24,190 --> 00:23:28,080
modified are used they're all us-based
continents

275
00:23:28,080 --> 00:23:33,360
simply run into management domain from
my main hypervisor and disastrous system

276
00:23:33,360 --> 00:23:37,530
so all the code I friedman is basically
a Linux user space utilities

277
00:23:38,050 --> 00:23:45,460
this also means if you if you watch what
happens is the space component crash but

278
00:23:45,460 --> 00:23:50,370
you don't like crash all the hula the
whole architecture as a separate form

279
00:23:50,370 --> 00:23:58,350
delivered 0 hypervisors sent in time
communicating with using a vmi framework

280
00:23:58,350 --> 00:24:04,330
so yeah my stands for introspection and
for that I use Libya my which is

281
00:24:04,330 --> 00:24:09,100
basically a high plug wires agnostic lie
buried so you can use it to talk to send

282
00:24:09,100 --> 00:24:17,639
or KVM and gives you a real nice capi
around all these hypervisor API's and it

283
00:24:17,640 --> 00:24:24,350
allows you to access and manipulate the
state of all the guests money under the

284
00:24:24,350 --> 00:24:28,980
hypervisor so you can look at memory
memory stayed you can look at the

285
00:24:28,980 --> 00:24:33,840
mistakes you register us you can even
modify them if you want to and if you

286
00:24:33,840 --> 00:24:38,840
use a trend you have access to an even
more powerful future and it's called

287
00:24:38,840 --> 00:24:46,740
memory events and memory when are
basically way to trap on excesses to a

288
00:24:46,740 --> 00:24:50,820
guest physical address so they're
implemented on top of extended page

289
00:24:50,820 --> 00:24:55,500
tables so extended page tables are like
the second layer of address translation

290
00:24:55,500 --> 00:25:03,680
you can use for 400 system utilization
and it works like that so it's just like

291
00:25:03,680 --> 00:25:08,420
I would just an event for certain memory
to us and we just elected callback

292
00:25:08,420 --> 00:25:14,410
function so this is just like point A to
C function and it gets called every time

293
00:25:14,410 --> 00:25:20,640
over to phoenix Hester's this memory to
us and it's implemented by like flipping

294
00:25:20,640 --> 00:25:25,870
the permissions officers apt table
entries so DVM isn't allowed to access

295
00:25:25,870 --> 00:25:31,870
to certain physical address anymore if
it does so it raises violation which is

296
00:25:31,870 --> 00:25:38,149
then handled by lithium I would cause my
comment handler and using his future

297
00:25:38,150 --> 00:25:44,610
access to do or die due to memory access
tracey is quite simple so we just have

298
00:25:44,610 --> 00:25:51,240
to find all shared memory pagers then we
would just remember you went hitless we

299
00:25:51,240 --> 00:25:56,230
analyzed so even memory event is
triggered a callback function will be

300
00:25:56,230 --> 00:26:01,950
called which analyzes dismembered and
extracts automated information we need

301
00:26:01,950 --> 00:26:07,710
for later analysis and stores it in a
tray storage and then in the last hour

302
00:26:07,710 --> 00:26:15,600
analysis client can like us to do like
to analysis algorithm and that can

303
00:26:15,600 --> 00:26:19,250
happen at any later point in time so
it's like an off-line analysis we can

304
00:26:19,250 --> 00:26:22,990
just trace for like a month and then do
live in Allison's when we have time to

305
00:26:22,990 --> 00:26:28,880
look at the results so the trace
collectors like to call component it

306
00:26:28,880 --> 00:26:30,960
does basically all of these steps

307
00:26:30,960 --> 00:26:38,100
besides the analysis and it's actually
the only called I would have told you I

308
00:26:38,100 --> 00:26:42,550
to inspect memory and to find you shared
memory pages so you have to identify

309
00:26:42,550 --> 00:26:48,790
like which many pages are used by the
front and in back and components to talk

310
00:26:48,790 --> 00:26:53,980
to each other and that's what this is
part of the code its target specific so

311
00:26:53,980 --> 00:26:59,480
you have two lighted Twilight hyper-v
and trucks and KVM because of course

312
00:26:59,480 --> 00:27:03,430
they use different data structures and
you have to pass time they would just do

313
00:27:03,430 --> 00:27:08,090
it just a memory event handlers and
every member gets legacy will call back

314
00:27:08,700 --> 00:27:12,780
and the car backhanded as most of the
stuff it

315
00:27:13,930 --> 00:27:22,560
disassembly instructions and looks
details we want to do I can see only

316
00:27:22,560 --> 00:27:28,770
have 15 minutes left to speed up a bit
so that extract like to do main idea and

317
00:27:28,770 --> 00:27:32,820
look so does the callback handlers card
every time we have like a memory access

318
00:27:32,820 --> 00:27:37,889
and we are only interested in privileged
men excessive so we are not interested

319
00:27:37,890 --> 00:27:43,350
in box in the front and we only want to
look at and so we need to to check all

320
00:27:43,350 --> 00:27:49,459
have a have a check if this is actually
the privilege to mean that if that's the

321
00:27:49,460 --> 00:27:55,400
case we extract instruction pointer page
table values disassembled instruction if

322
00:27:55,400 --> 00:28:00,910
we have never seen it before we used
capstone for disassembling but we only

323
00:28:00,910 --> 00:28:04,590
want to disassemble lucky unit
instructions that I'm so you will see

324
00:28:04,590 --> 00:28:09,980
one instructions that's responsible for
like 10 million memory accesses you

325
00:28:09,980 --> 00:28:13,880
don't want to disassemble it every time
so we have like this instruction cache

326
00:28:13,880 --> 00:28:21,740
and we traded trays Andrea and started
in our tray storage so just to a store

327
00:28:21,740 --> 00:28:28,210
it as a sad box users like fled text 52
dumpy strains and trees we have some cut

328
00:28:28,210 --> 00:28:32,640
more requirements for that so we want to
have legs apart and persistent storage

329
00:28:32,640 --> 00:28:35,850
it would be cool if it has like a fish
efficient compression

330
00:28:37,220 --> 00:28:42,630
so we don't have like gigabytes of data
to analyze and interest to that kind of

331
00:28:42,630 --> 00:28:47,730
foods audience requirement and scored
steamboat race and it's not quite well

332
00:28:47,730 --> 00:28:51,250
known in like two SKU tea industry but
the singer's really cool tool you can

333
00:28:51,250 --> 00:28:56,330
use for a lot of different stuff since
limit raises an open source project by

334
00:28:56,330 --> 00:29:00,240
the operating system Krupa takasu
Institute of Technology which is a

335
00:29:00,240 --> 00:29:04,780
German university and ideas it's
designed for food system and we're

336
00:29:04,780 --> 00:29:10,030
tracing so it's designed to trace like
our memory accesses performed by system

337
00:29:10,030 --> 00:29:15,710
including the memory contents and
because it wants to support dad has like

338
00:29:15,710 --> 00:29:20,240
a really efficient implementation of all
of the stuff that's a C++ Diamond Plus

339
00:29:20,240 --> 00:29:21,799
Cline library so I

340
00:29:21,799 --> 00:29:26,340
decline library to interact with Stephen
they communicate over shared memory

341
00:29:26,340 --> 00:29:31,428
funnily enough but this is like a really
efficient way to to stop these trace

342
00:29:31,429 --> 00:29:34,610
entries and have a chance

343
00:29:34,610 --> 00:29:40,238
specialized compassion that specifically
optimized for memory traces so this

344
00:29:40,239 --> 00:29:44,679
means I have like a conversion rate of I
dunno 99% or something from my traces

345
00:29:44,679 --> 00:29:48,559
because most of the time information
doesn't change that much for like two

346
00:29:48,559 --> 00:29:52,850
single trace entries and it's like
heavily optimized for this use case I

347
00:29:52,850 --> 00:29:54,119
highly recommended

348
00:29:54,119 --> 00:30:01,320
so what do you still stressed over and
basically I have a trace and we would

349
00:30:01,320 --> 00:30:06,369
just stop for every member it's like
instruction pointer which means the

350
00:30:06,369 --> 00:30:11,109
instruction that triggered the memory
access we have to memory to a switch was

351
00:30:11,109 --> 00:30:17,539
obsessed I can optionally store what
kind of detail was was transferred I

352
00:30:17,539 --> 00:30:21,480
don't do this because I don't I don't
require it for my double such analysis

353
00:30:21,480 --> 00:30:26,700
but this is something you can use for a
different purpose and you can store it

354
00:30:26,700 --> 00:30:32,100
was like a man were you I'd read and
edition for every unit construction I

355
00:30:32,100 --> 00:30:38,689
see I basically just instruction bites
and a module it comes from a human

356
00:30:38,690 --> 00:30:42,419
readable way to later look at
instructions and see what action needed

357
00:30:42,419 --> 00:30:50,509
and under last just like to double fetch
a gruesome so I just analyze to find our

358
00:30:50,509 --> 00:30:52,119
churches and other such

359
00:30:52,119 --> 00:30:56,320
so this is like a simplified version it
ignores some kind of problems

360
00:30:56,320 --> 00:31:01,509
documenting my pay by more detail but
basically just walk over to trace your

361
00:31:01,509 --> 00:31:07,789
lips with tres and look forward excesses
to a specific to us and if you see in a

362
00:31:07,789 --> 00:31:12,609
single context so in a single location
of the back and if you see the mood Alex

363
00:31:12,609 --> 00:31:17,678
ESAs to the same memory to us than we
have a potential double edged and then

364
00:31:17,679 --> 00:31:23,639
we need to look at that manually and
turns out to simply I don't know 50

365
00:31:23,639 --> 00:31:27,580
lines of C code or something is actually
enough to find a lot of interest in box

366
00:31:28,250 --> 00:31:33,420
so advantage of this implementation
barely have a Wii Lopez of overhead

367
00:31:33,420 --> 00:31:36,710
because it's just hard to assisted
virtualization so it's not like two

368
00:31:36,710 --> 00:31:42,220
bucks CPU software emulation something
it's not hard independents are you can

369
00:31:42,220 --> 00:31:46,890
use this to analyze every hypervisor you
want to you can even use it to analyze

370
00:31:46,890 --> 00:31:51,480
like a sandbox or something you just
have to to adapt discipline code areas

371
00:31:51,480 --> 00:31:55,990
in the trace collector and it's really
easy to write and extend because it's

372
00:31:55,990 --> 00:32:02,180
just use the space problem you have
really high active overhead so every

373
00:32:02,180 --> 00:32:09,660
times such an apt violation is traced to
regenerate and p.m. exit and BMX it's

374
00:32:09,660 --> 00:32:13,410
expensive so this is kind of expensive
and you shouldn't do this if you want to

375
00:32:13,410 --> 00:32:18,100
like food system tracing but it's ok if
you are only interested in memory

376
00:32:18,100 --> 00:32:20,020
accesses to like certain areas

377
00:32:20,020 --> 00:32:25,139
the biggest problem I had in back to us
what does this relies on the support for

378
00:32:25,140 --> 00:32:29,840
nested virtualization because nested
virtualization on consent so if you look

379
00:32:29,840 --> 00:32:34,340
at the documentation they basically say
yeah as a central point for Disease

380
00:32:34,340 --> 00:32:38,689
consider tech preview so it should work
in most cases but it might be a bit

381
00:32:38,690 --> 00:32:43,840
unstable or something as it turns out
not really true so it works if you

382
00:32:43,840 --> 00:32:50,770
visualize it sometimes works virtualized
KVM and Excel but one of my main targets

383
00:32:50,770 --> 00:32:54,520
I actually wanted to look as hype of
young sounded simply doesn't work it

384
00:32:54,520 --> 00:33:00,200
doesn't get even like to boot screen for
this reason all of the results I

385
00:33:00,200 --> 00:33:04,220
actually discovered is reflective
current invocation of folks sent you

386
00:33:04,220 --> 00:33:07,720
costs and on December works quite well
hopefully

387
00:33:08,350 --> 00:33:15,699
luckily 2016 so the next invocation of
Minnesota actually has support for his

388
00:33:15,700 --> 00:33:19,930
Asian so then it should be able to
analyze hyper-v using to use industry

389
00:33:19,930 --> 00:33:21,650
could too

390
00:33:21,650 --> 00:33:28,240
so let's start with the results what did
I actually find I did tracing run on two

391
00:33:28,240 --> 00:33:35,120
different accent targets wanna send 4.5%
four-point fall and the difference is

392
00:33:35,120 --> 00:33:39,939
basically because they support different
kind of power tools devices so some more

393
00:33:39,940 --> 00:33:45,290
exotic ones like the SCSI powered by
supporters only included in central

394
00:33:45,290 --> 00:33:50,950
point for so I just have like these two
targeted 22 analyzed all the different

395
00:33:50,950 --> 00:33:56,530
devices it turns out the main problem of
doing all this stuff is basically I

396
00:33:56,530 --> 00:34:01,300
don't have a way to to automatically get
good code coverage it's like its dynamic

397
00:34:01,300 --> 00:34:07,169
analysis only 51 abilities to code
executes currently I exercise like all

398
00:34:07,170 --> 00:34:12,070
this device functionality manually which
is enough to find box but it's probably

399
00:34:12,070 --> 00:34:17,990
a good idea to to sing about how to use
to automatically like exercise all the

400
00:34:17,989 --> 00:34:23,290
different functionalities off your
powerless devices and the following a

401
00:34:23,290 --> 00:34:27,540
just talked about interest in Buxton
work with default compiler settings so

402
00:34:27,540 --> 00:34:32,179
generally Sligo really really impressive
patch for other stuff I reported and

403
00:34:32,179 --> 00:34:37,159
they patched like a lot of lot of areas
in the code that could be doable if

404
00:34:37,159 --> 00:34:43,320
comply with certain compiler settings or
optimization levels I'm just talking

405
00:34:43,320 --> 00:34:47,040
about the ones that you actually trigger
if you have to fight compilat settings

406
00:34:47,040 --> 00:34:52,590
because these are the ones that are
useful in India into your vote and you

407
00:34:52,590 --> 00:34:57,380
can read my foot is also have linked on
that that contains a lot of money to

408
00:34:57,380 --> 00:35:00,380
districts and stuff about a different
results

409
00:35:00,930 --> 00:35:06,190
the first one and is actually one that's
not actually exploit on normal compiler

410
00:35:06,190 --> 00:35:09,240
optimizations but it's quite interesting
because it's like

411
00:35:09,240 --> 00:35:15,379
coat so it's the disc Beck and Sean Qaim
and you can see soda sauce point up

412
00:35:15,380 --> 00:35:19,590
points into shared memory region so this
is Chad member you between user between

413
00:35:19,590 --> 00:35:25,630
the virtual machine ended and you have
two numbers and it's actually fed

414
00:35:25,630 --> 00:35:29,030
effects like sweet I'm so you can see
it's like here

415
00:35:29,030 --> 00:35:34,110
and then you have liked to see if check
and after the if condition to use it and

416
00:35:34,110 --> 00:35:40,280
it's a very memorable and you can see if
you just look at the stuff in the bottom

417
00:35:40,280 --> 00:35:45,120
you can see any should be large number
segment so it's a maximum check I guess

418
00:35:45,120 --> 00:35:46,890
if that's true

419
00:35:46,890 --> 00:35:52,660
Zhu Zhu efforts to point again and said
intruded value and then you use it as

420
00:35:52,660 --> 00:35:57,540
lube condo for basically member you are
so if this would actually translated

421
00:35:57,540 --> 00:36:02,670
into three different men were you then
you have like a trivial ship overflow

422
00:36:02,670 --> 00:36:08,100
and the fun part about this is so this
is like if you have doubled between

423
00:36:08,100 --> 00:36:12,770
abilities in mind or if you noticed by
class this would be directly looking

424
00:36:12,770 --> 00:36:18,050
vulnerable but nobody has ever liked
discovered that talked about it seems to

425
00:36:18,050 --> 00:36:21,820
be that develop our students we have
like the spa class in mind while

426
00:36:21,820 --> 00:36:27,080
watching the coat no interest in its not
lebudde because as it turns out the

427
00:36:27,080 --> 00:36:32,440
compiler actually optimized to memory
accesses in a single memory access so

428
00:36:32,440 --> 00:36:37,250
you can't exporters which because
between these two successes there is no

429
00:36:37,250 --> 00:36:42,150
ways might choose to discover this
because their society access to dispel

430
00:36:42,150 --> 00:36:50,740
up there and implications are like to
memory accesses but this doesn't have

431
00:36:50,740 --> 00:36:54,729
any security implications so it's not
nothing exploitable but it's still quite

432
00:36:54,730 --> 00:37:01,710
interesting so exploit about stuff first
of all days to block Beck coat and

433
00:37:01,710 --> 00:37:07,520
actually sodas for device for power
tools devices that have liked if you use

434
00:37:07,520 --> 00:37:13,060
a block device for normal use case and
enterprise contacts so this is

435
00:37:13,060 --> 00:37:18,110
irrelevant full ability and basically
you have like the soldiers segments our

436
00:37:18,110 --> 00:37:23,000
again points into shared memory and you
have to calculation invoking the last

437
00:37:23,000 --> 00:37:27,280
sector and first sector so this is the
number of sectors you want to read or

438
00:37:27,280 --> 00:37:28,810
write to disk

439
00:37:28,810 --> 00:37:34,230
and a calculated and put it like this
variable and after they calculated

440
00:37:34,230 --> 00:37:38,950
access to memory locations a second time
and do like a sanity check so the idea

441
00:37:38,950 --> 00:37:45,049
behind this you should never read more
sectors 10:15 a single memory page so in

442
00:37:45,050 --> 00:37:51,440
the page size and if you can bypass this
and you can buy pastors by flipping like

443
00:37:51,440 --> 00:37:52,160
these values

444
00:37:52,160 --> 00:37:58,879
last thing you have more less an old of
boundary it when you are when you are

445
00:37:58,880 --> 00:38:03,170
writing to do and you out of town to
light when you're reading from this this

446
00:38:03,170 --> 00:38:09,130
is highly suspicious to be exploitable
and I think it's a nice buck but it's

447
00:38:09,130 --> 00:38:13,750
not back I want to talk in detail about
I want to go into detail about to send

448
00:38:13,750 --> 00:38:18,810
PCI backplane ability and this is my
favored by God to solar research because

449
00:38:18,810 --> 00:38:22,680
it has the interest in property did this
completely hidden from source code so

450
00:38:22,680 --> 00:38:26,839
I'm betting that nobody would discover
despite just by looking at the source

451
00:38:26,840 --> 00:38:31,870
code so basically you have this big
switch statement to the PCI back and

452
00:38:31,870 --> 00:38:38,970
which is a switch statement on the
opposite end up again disappointed into

453
00:38:38,970 --> 00:38:45,000
the shared memory area and what happens
so this just doesn't look any kind of

454
00:38:45,000 --> 00:38:49,370
marketing doesn't do much stuff it's
just a switch but if you look at how

455
00:38:49,370 --> 00:38:54,109
does is implemented you can see the comp
I'll optimized into a jump tables so

456
00:38:54,110 --> 00:39:01,570
this is a classic compiler optimization
to implement a switch statements and so

457
00:39:01,570 --> 00:39:06,820
in this case in the assembly code we
have to ask her to register us said next

458
00:39:06,820 --> 00:39:13,550
few weeks for dats pointing to this
variable and you can see they compared

459
00:39:13,550 --> 00:39:18,250
to an upper limit of life which which
corresponds to the number of such cases

460
00:39:18,250 --> 00:39:24,500
to health benefits larger don't just
jump into different case but it is

461
00:39:24,500 --> 00:39:30,170
smaller than the value influences to
jump and interesting thing about this is

462
00:39:30,170 --> 00:39:35,270
if you look at you like line for they
fetch this value out of memory a second

463
00:39:35,270 --> 00:39:36,080
time

464
00:39:36,080 --> 00:39:41,630
Misrata directly put it into a jump and
now if you know WHC considerable ability

465
00:39:41,630 --> 00:39:49,170
if we are able to exchange the value
between line 194 we have almost direct

466
00:39:49,170 --> 00:39:54,519
instruction pointer control because we
can influence like this just going

467
00:39:54,519 --> 00:40:04,910
orders target of indirect jump so just
SAT so we have a way but to instead uses

468
00:40:04,910 --> 00:40:09,629
two different memory accesses so we can
bypass deranged and jump to more or less

469
00:40:09,630 --> 00:40:15,349
arbitrary location and it's important is
like an invalid compiler optimization so

470
00:40:15,349 --> 00:40:19,259
that's not compile up back to back and
the source code is that the variable is

471
00:40:19,259 --> 00:40:21,980
marked as volatile so

472
00:40:21,980 --> 00:40:29,950
expected to change just without him
accessing it ok so actually exploiting

473
00:40:29,950 --> 00:40:34,140
this book the ways you have available is
very small it's just like destroy

474
00:40:34,140 --> 00:40:38,839
instructions as it turns out if you have
multiple p.m. course it's really tribute

475
00:40:38,839 --> 00:40:45,960
to exploit that especially because you
can like we tried every time you lose so

476
00:40:45,960 --> 00:40:50,750
if you lose two is this operation will
jump into default case and nothing

477
00:40:50,750 --> 00:40:53,049
interesting will happen but if you win
it

478
00:40:53,049 --> 00:41:01,450
do directly get quote oil like at least
trusted execution you can simply do so

479
00:41:01,450 --> 00:41:05,470
basically like the car part of my proof
of concept is like disassembler loop

480
00:41:05,470 --> 00:41:11,450
which just loops around and it's
exhausting value of cops do with the

481
00:41:11,450 --> 00:41:16,169
value of my choice so I can flip in
between a good value and bad well you

482
00:41:16,170 --> 00:41:24,920
will fast so we have to indirect job
that doesn't give us direct quote or rip

483
00:41:24,920 --> 00:41:30,180
control and so we need to find a
reliable offset that we can use to to

484
00:41:30,180 --> 00:41:36,069
like have a function the problem is that
same PCI bags normally compiled as a

485
00:41:36,069 --> 00:41:40,140
module so the Lord loadable kernel
module so you can't be really sure where

486
00:41:40,140 --> 00:41:45,940
it's located in memory we also don't
know what the budget rest of the shared

487
00:41:45,940 --> 00:41:49,130
memory back and mapping is well that's
like

488
00:41:50,640 --> 00:41:55,970
so in that case it's it's quite similar
to remote conflicts but basically and

489
00:41:55,970 --> 00:42:00,669
abroad I used to get code execution out
of this is just to trigger type infusion

490
00:42:00,670 --> 00:42:05,790
and reused as type confusion to get a
wide perimeter and from now on we can go

491
00:42:05,790 --> 00:42:14,009
to to food products so talking about the
type confusion in a separate second jump

492
00:42:14,010 --> 00:42:19,290
table then does jump table is almost
directly behind our john told we

493
00:42:19,290 --> 00:42:25,420
explored the junta shown to the left and
the interesting thing is you have liked

494
00:42:25,420 --> 00:42:31,080
to spawn state by state initialized that
has the following assembly code so you

495
00:42:31,080 --> 00:42:35,860
have to ask her to register it is
written into our de and then used as the

496
00:42:35,860 --> 00:42:42,710
first argument 2 discs and PCI bag
attached function and this normally

497
00:42:42,710 --> 00:42:46,900
should be appointed to extend PCI back
device structure but in our case it's

498
00:42:46,900 --> 00:42:52,100
pointing into a shared memory location
so we can like corks and PCI back

499
00:42:52,100 --> 00:42:59,110
attached with an opportunity you have a
choice as an argument when you look at

500
00:42:59,110 --> 00:43:03,680
how you exploiters you can see the first
thing the MPC I beg attached function

501
00:43:03,680 --> 00:43:09,220
does is busy trying to log you take so
there's a definite lock new text defined

502
00:43:09,220 --> 00:43:15,589
in this structure and a choice just
called mutex lock on that so this gives

503
00:43:15,590 --> 00:43:21,920
a possibility to do takes lock on a
completely new tax structure when I

504
00:43:21,920 --> 00:43:26,980
first saw it as a mutex its building
just like an integer gets flipped us

505
00:43:26,980 --> 00:43:31,580
something as it turns out new taxes
under Linux are quite complex and you

506
00:43:31,580 --> 00:43:35,460
have like a fast policy that switch
slugged a lock on from one to see you

507
00:43:35,460 --> 00:43:45,240
but if that fails because of slow path
we got and a slow path does a lot of

508
00:43:45,240 --> 00:43:51,169
more stuff and if you look at the code
for mutex lock slow path you have a

509
00:43:51,170 --> 00:43:54,299
several requirements you have to fulfil
you so

510
00:43:54,299 --> 00:43:59,229
the mutex optimistic spin function needs
to fail that can be used by just letting

511
00:43:59,229 --> 00:44:06,319
setting like a pointer 2008 page and if
you don't have a regular account it's

512
00:44:06,319 --> 00:44:11,769
not equal to bone you have to do takes a
beta structure and commuting slater

513
00:44:11,769 --> 00:44:18,848
structure is added to a linked list
that's pointed to by Locke wait list and

514
00:44:18,849 --> 00:44:24,369
after that happens to the concert just
goes to sleep and wait until its wake up

515
00:44:24,369 --> 00:44:29,219
again so does make us talked to has like
a hawk structure embattled if you text

516
00:44:29,219 --> 00:44:33,789
looks fails to process will go to sleep
and just wait for it to to be worked up

517
00:44:33,789 --> 00:44:42,880
but this addition to the waiting list
locked list allows us to to perform like

518
00:44:42,880 --> 00:44:49,630
somehow arbitrary right because we
control of this point at ritas waiter

519
00:44:49,630 --> 00:44:57,059
structured true location of trucks so
this is a wide we are so we can only

520
00:44:57,059 --> 00:45:01,959
choose where to ride but it's not a wide
water so we can directly control lol you

521
00:45:01,959 --> 00:45:07,569
dance with mother Westwood between easy
instead what we need is appointed who

522
00:45:07,569 --> 00:45:12,029
pointed to an attacker controlled
function so we can't simply override

523
00:45:12,029 --> 00:45:18,979
function point us making it harder and
the biggest problem in the exploits its

524
00:45:18,979 --> 00:45:23,379
one-shot exploit so you can only treat
those white ones because then does this

525
00:45:23,380 --> 00:45:29,809
hold PCI back function is basically
locked up because this witness function

526
00:45:29,809 --> 00:45:35,109
we abuses never returning and then you
have like a state lock and can't trigger

527
00:45:35,109 --> 00:45:41,538
points so the card is just want to add
faith and reason to the global linked

528
00:45:41,539 --> 00:45:49,939
list so we we have like if you look at
like how linked list is defined and we

529
00:45:49,939 --> 00:45:55,420
have 2.0 2.0 to attack a controlled data
it basically allows us to end of fake

530
00:45:55,420 --> 00:45:59,539
entry to ascertain linked list and
that's why would you want used to

531
00:45:59,539 --> 00:46:01,380
exploit it

532
00:46:01,380 --> 00:46:06,780
so this is how I lost some up to a
linked list does looks like before so we

533
00:46:06,780 --> 00:46:10,860
have like this list does linked list and
is like the way it's implemented a new

534
00:46:10,860 --> 00:46:14,450
notes you have like a double linked list
with next point as in previous point us

535
00:46:14,450 --> 00:46:20,419
and we have like they do take stuff and
this one has like previous value

536
00:46:20,420 --> 00:46:26,140
pointing to this list head and after we
treat our white we have two following

537
00:46:26,140 --> 00:46:31,100
like a memory let's lay out we have
still have like this list had and it

538
00:46:31,100 --> 00:46:35,299
points to dissuade her structure which
will start on steak and we don't control

539
00:46:35,300 --> 00:46:40,540
that we don't really control but the
next point of this way to structure

540
00:46:40,540 --> 00:46:47,690
points into control data from us so we
have a couple of requirements for those

541
00:46:47,690 --> 00:46:51,760
linked list its globe it has to be a
global data structure because then we

542
00:46:51,760 --> 00:46:55,550
can be sure so for certain convos and it
will always be at the same address

543
00:46:55,550 --> 00:47:01,700
because we need to know that list head
to the Greek lament for his exploits

544
00:47:01,700 --> 00:47:06,470
busy norinco new version of the host
system management to make which might be

545
00:47:06,470 --> 00:47:12,980
a problem or might not be able to
depending on the exact moment elements

546
00:47:12,980 --> 00:47:16,610
attached to reducing lunchtime because
that were like used to previous point

547
00:47:16,610 --> 00:47:24,180
and stuff like that and will will will
lead our entries basically and the

548
00:47:24,180 --> 00:47:28,339
function and that's the most important
part of function abuses linked list

549
00:47:28,340 --> 00:47:32,740
needs to survive one junk entries so
basically we can't control the stuff

550
00:47:32,740 --> 00:47:39,810
shown here in rat so if it's over this
global loose just crashed when it ceased

551
00:47:39,810 --> 00:47:43,820
to function on display today to
structured and we don't get anything

552
00:47:43,820 --> 00:47:48,930
interesting because it will never use
our control data so I started looking

553
00:47:48,930 --> 00:47:53,799
into into look closely linked list and
what stuff that might be an interesting

554
00:47:53,800 --> 00:47:58,020
so that's actually culture in the
nineties its indirect second

555
00:47:58,020 --> 00:48:04,020
implementation from the copyright of
news stories from 1992 and I don't seem

556
00:48:04,020 --> 00:48:07,259
to be a lot of changes in the scouts
instead

557
00:48:07,260 --> 00:48:15,370
and basically does this fire defines a
standard list of global data structure

558
00:48:15,370 --> 00:48:21,100
called formats and formats control
Olympus to all the different file

559
00:48:21,100 --> 00:48:27,290
formats are supported by xoxo issued
except those linked list is booked to

560
00:48:27,290 --> 00:48:36,560
check if a file or even like to see a
dog out rhamat nobody use anymore and if

561
00:48:36,560 --> 00:48:42,049
you look at the code it cost to drive
module get function if that if that

562
00:48:42,050 --> 00:48:47,560
succeeds after that it will code code to
load function and as a function pointer

563
00:48:47,560 --> 00:48:54,250
debts under our control we are like in
our entry luckily distance pay to entry

564
00:48:54,250 --> 00:48:58,000
that's not in our control will be
skipped because the traffic model get

565
00:48:58,000 --> 00:49:02,980
function favorites for this entry so
it's not a valid module here so this one

566
00:49:02,980 --> 00:49:06,330
fails we go to continue country to entry
we control

567
00:49:07,000 --> 00:49:15,030
and we can like having auditory function
and from baton it's quite easy to

568
00:49:15,030 --> 00:49:21,540
exploiters so we we set to slow down or
appoint a two-step private so we do

569
00:49:21,540 --> 00:49:27,440
cantaloop we don't have an option that
allocate executable memory and copies to

570
00:49:27,440 --> 00:49:34,610
show code into an executable memories
VML oaks and quite complex but because

571
00:49:34,610 --> 00:49:42,950
you have like a drop gadgets it's kind
of nice exercise to do which new format

572
00:49:42,950 --> 00:49:47,230
list otherwise everything would be
questioned because no one nobody would

573
00:49:47,230 --> 00:49:53,650
be able to execute new programs we had
like our code below those whatever kind

574
00:49:53,650 --> 00:49:58,370
of advanced of you want to do now is
quickly returned to lose the space of

575
00:49:58,370 --> 00:50:06,690
just led to process it would I hope so
we just like but instead of that our

576
00:50:06,690 --> 00:50:14,520
shared code will have hopefully done
something and I hope we work and i think

577
00:50:14,520 --> 00:50:17,520
im heavily over time so I have to hurry
up

578
00:50:18,140 --> 00:50:26,920
consider have liked to show windows both
also works both on the guest system and

579
00:50:26,920 --> 00:50:31,640
ideas I want to get like hell on the
host system so what I'm doing right now

580
00:50:31,640 --> 00:50:38,870
is split into two parts of this is
actually do is conditioned part so I

581
00:50:38,870 --> 00:50:46,799
have to over white function by Noah
which tries to to to override Ops II and

582
00:50:46,800 --> 00:50:53,130
devalue and it will only work if I
actually trigger some kind of activity

583
00:50:53,130 --> 00:50:57,270
on the PCI device and you can do that
manually if I used to help you see I

584
00:50:57,270 --> 00:51:01,720
command you consider have to swamp our
virtualized idealize and AK wonders

585
00:51:01,720 --> 00:51:06,899
couple of times and you see I get the
same output but what happens if I do

586
00:51:06,900 --> 00:51:09,900
this in power

587
00:51:11,460 --> 00:51:16,550
so I have like on the left hand side I
have to override point of function and

588
00:51:16,550 --> 00:51:21,630
you can see that as PCI function Hanks
and it basically shows I have won the

589
00:51:21,630 --> 00:51:26,140
race in the past drive right now and
have written to start over with us from

590
00:51:26,140 --> 00:51:32,490
its point so I just wait until the lspci
program finally times out because it

591
00:51:32,490 --> 00:51:36,990
done it will not mess anymore with my
shared memory pages and then I can start

592
00:51:36,990 --> 00:51:42,810
the second part of the explode so the
timing out takes yeah I noticed I'm told

593
00:51:42,810 --> 00:51:50,410
so I know I'm just like opening up shelf
so my payload is just simply was

594
00:51:50,410 --> 00:51:59,109
collection payload you can probably do
something more advanced and do to

595
00:51:59,110 --> 00:52:04,040
prepare shellcode code which actually
treat us like this puts like to add

596
00:52:04,040 --> 00:52:09,400
values into every locations whole
exploded just described will work and if

597
00:52:09,400 --> 00:52:13,120
I know that's great

598
00:52:13,120 --> 00:52:18,529
it didn't work so if I now just like
execute to comment on the show but you

599
00:52:18,530 --> 00:52:26,350
could see it rebooted have to restore
from the snapshot and tried again that's

600
00:52:26,350 --> 00:52:31,589
demagogues if it doesn't work mind
doesn't work of course but it's actually

601
00:52:31,590 --> 00:52:38,250
in serious quite stable so it should
work most of the time so I just started

602
00:52:38,250 --> 00:52:41,250
up again

603
00:53:28,480 --> 00:53:41,410
so we have to wait but now it worked and
you just do it again we have to say not

604
00:53:41,410 --> 00:53:50,210
cared and we do to share coat

605
00:53:56,650 --> 00:54:05,859
crashed again I do them away with I'm
already over time sorry for that I was

606
00:54:05,859 --> 00:54:16,058
reassured should work ok yeah sorry bout
that you can find much describing

607
00:54:16,059 --> 00:54:19,829
something incredibly tired to tell you
can find online service has like

608
00:54:19,829 --> 00:54:24,270
everything besides explored and explored
in the white paper will be released

609
00:54:24,270 --> 00:54:28,538
after interest rate I also plan to risks
and Poland as an open source to

610
00:54:28,539 --> 00:54:35,240
landlines 2016 I just have to like fix
it up so it works on other systems

611
00:54:35,240 --> 00:54:42,839
tomorrow and next dose of a sample
against hyper-v and VMware which

612
00:54:42,839 --> 00:54:47,670
requires like improved support for nasa
virtualization I want to identify and

613
00:54:47,670 --> 00:54:52,400
analyze also shared memory trust
ponderous Emeli Sande boxes and an open

614
00:54:52,400 --> 00:54:58,539
question what types of box can we find
we flew memory traces so we currently we

615
00:54:58,539 --> 00:55:03,099
trace without memory content so it would
be quite interesting content can be

616
00:55:03,099 --> 00:55:07,710
trying different type of box beside
stomach so thanks for your tensions

617
00:55:07,710 --> 00:55:11,950
sorry I fucked up the devil and if you
have any questions feel free to ask

618
00:55:11,950 --> 00:55:17,990
question they kill anyone

619
00:55:19,190 --> 00:55:25,910
anyone know right Phoenix thank you very
much to fix

