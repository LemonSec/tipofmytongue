1
00:00:00,000 --> 00:00:03,129
so thank you very much

2
00:00:03,629 --> 00:00:07,029
unfortunately by the way was not
affected by the end of you purchase

3
00:00:07,029 --> 00:00:11,820
because Adobe Reader was not part of
town the symbolic unto them in second so

4
00:00:11,820 --> 00:00:17,130
I come to my talk this one is going to
be about owning Adobe Reader by using

5
00:00:17,130 --> 00:00:23,150
the embedded XFA engine soon and see
what's on the menu for today I'll start

6
00:00:23,150 --> 00:00:28,848
off with my and explained afterwards a
little bit well what my motivation

7
00:00:28,849 --> 00:00:34,210
behind this talk was then I'll do short
introduction to xfer really will keep

8
00:00:34,210 --> 00:00:40,050
the show because we've got some quite
some content to cover then afterwards

9
00:00:40,050 --> 00:00:44,550
we'll dive into XFA internal stuff like
having a view on the objects and the

10
00:00:44,550 --> 00:00:50,788
EXIF a engine and most importantly the
Jeff coach manager and then we have a

11
00:00:50,789 --> 00:00:57,340
look at how we can use the knowledge of
the objects and the cash manager to

12
00:00:57,340 --> 00:01:01,359
finally explained to reel in a very
reliable way and afterwards of course

13
00:01:01,359 --> 00:01:09,290
will have a conclusion Q&A so sure about
me and Sebastian I co-founded small I T

14
00:01:09,290 --> 00:01:15,119
security consultancy in Germany in 2009
we mainly focusing on Penn tests and

15
00:01:15,119 --> 00:01:20,360
coded stuff like that but we're trying
to do as much research as somehow

16
00:01:20,360 --> 00:01:25,750
possible because that's the fun part I
mean auditing PHP web applications and

17
00:01:25,750 --> 00:01:30,150
salsa knows but digging deep into
Windows kerner or Adobe Reader or

18
00:01:30,150 --> 00:01:35,400
whatever that is much more fun and
that's what we love to do so I would

19
00:01:35,400 --> 00:01:40,420
describe myself as a low-level edict I
just love those engineering hunting

20
00:01:40,420 --> 00:01:45,030
exploitation of the kind of stuff so in
the past I found quite someone who

21
00:01:45,030 --> 00:01:55,250
bilities took pride in 2014 and yeah
that's me the motivation behind the

22
00:01:55,250 --> 00:01:56,630
stock

23
00:01:56,630 --> 00:02:07,590
we don't bother on CBS in 2015 with the
gun take part and Punto and 2016 again

24
00:02:07,590 --> 00:02:14,480
unfortunately as you might have noticed
it was not part of the targets this year

25
00:02:14,480 --> 00:02:25,510
so there was a bummer for us we don't
exercise phasing not like hopeless 128

26
00:02:25,510 --> 00:02:31,929
cores available but instead you yielded
thousands of crashes so we really had a

27
00:02:31,930 --> 00:02:39,209
lot to analyze around 20 bucks are right
now identified as unique and the problem

28
00:02:39,209 --> 00:02:44,670
with all those crashes was that the
analysis of the Crushers was quite a

29
00:02:44,670 --> 00:02:51,179
pain and I will show you with a bigger
reader crash why this is so difficult to

30
00:02:51,180 --> 00:02:57,540
analyze so awesome we get across an
access violation

31
00:02:58,670 --> 00:03:06,630
X points to summer but not to memory but
if we have a look at the function where

32
00:03:06,630 --> 00:03:12,120
we crash and register server with some
shoot offset that doesn't look too

33
00:03:12,120 --> 00:03:16,620
promising and if we have a look
backwards a little bit and see where the

34
00:03:16,620 --> 00:03:22,139
bed reference comes from NBC arcade
comes from ECX and usually what you do

35
00:03:22,139 --> 00:03:27,350
is back under you do have been keepin it
to see where the application comes from

36
00:03:27,350 --> 00:03:33,420
and what size the object and if you do
that we see alright the user sizes CCDA

37
00:03:33,420 --> 00:03:38,839
there must be some kind of very shoot
object of course it's not it's a huge

38
00:03:38,840 --> 00:03:44,480
chunk in which we land if you just
subtract the value ECX from the base

39
00:03:44,480 --> 00:03:48,970
address of this huge tank we see that
we're land somewhere in the middle of it

40
00:03:48,970 --> 00:03:56,329
so cheap for that is rather useless
obviously and if you also do a stack

41
00:03:56,329 --> 00:04:00,549
trace we see basically nothing Bureau is
get those dealers unregister so

42
00:04:00,549 --> 00:04:07,340
functions not too helpful either so yeah
obviously has no symbols

43
00:04:07,340 --> 00:04:13,819
and they don't even idti influence so
you kind of left with no function names

44
00:04:13,819 --> 00:04:19,048
not object names retailer information is
not there you can forget about the stack

45
00:04:19,048 --> 00:04:26,669
traces pages users not good for us so
none of this makes root cause analysis

46
00:04:26,669 --> 00:04:33,380
of vulnerabilities very hard and if you
do a large housing run then it is also

47
00:04:33,380 --> 00:04:39,520
very difficult to to crashed trying to
like finding out whether vulnerabilities

48
00:04:39,520 --> 00:04:44,599
you need or whether it's exploitable or
find out influence about the objects

49
00:04:44,600 --> 00:04:50,729
which are involved in the crash that is
very hard to do so the question how do

50
00:04:50,729 --> 00:04:55,950
we actually analyze those crashes and
finally how do we exploit those crashes

51
00:04:55,950 --> 00:05:03,990
was pretty obvious that we need context
in some way and we need to recover

52
00:05:03,990 --> 00:05:13,460
symbols of that as possible so whatever
should look in the past there was a

53
00:05:13,460 --> 00:05:21,280
little bit of exit a research when in
2013 this XFA exploit the store first

54
00:05:21,280 --> 00:05:31,330
some reach the researchers analyzed the
ability behind it but it was mostly

55
00:05:31,330 --> 00:05:36,150
focus just on the vulnerability and
exploded self but they did not use a

56
00:05:36,150 --> 00:05:42,159
generic approach to dig deeper into it
so really in-depth research is to kind

57
00:05:42,160 --> 00:05:48,910
of missing so what I wanted to do was
right tools to recover some of the

58
00:05:48,910 --> 00:05:54,020
contextual information and of course no
above other researchers guys like you if

59
00:05:54,020 --> 00:05:57,590
you want to do Adobe Reader research the
tours that we're gonna publish an hour

60
00:05:57,590 --> 00:06:02,400
get up in the next days they might be
pretty useful for you of course with

61
00:06:02,400 --> 00:06:07,340
these tools to facilitate one or ability
discovery the root cause analysis

62
00:06:07,340 --> 00:06:12,770
process and answer questions during five
runs if you wanna do that

63
00:06:14,060 --> 00:06:19,410
and also closed one important point my
target is giving some background on a

64
00:06:19,410 --> 00:06:27,970
specific exploitation alright a brief
introduction to XFA exit face the XML

65
00:06:27,970 --> 00:06:33,250
forums architecture so whenever you open
a forum that you have to fill out a PDF

66
00:06:33,250 --> 00:06:40,500
and probably has something to do with
that the technology behind it has been

67
00:06:40,500 --> 00:06:48,110
invented and implemented by Jet forum
which was later and acquired by a dog in

68
00:06:48,110 --> 00:06:55,180
2002 the standard specification which
has long it's nearly 1,600 pages long

69
00:06:55,180 --> 00:07:03,360
that already tells you there's quite
some attack surface behind that and what

70
00:07:03,360 --> 00:07:08,440
exactly does it brings to dynamic
behavior to the otherwise rather study

71
00:07:08,440 --> 00:07:14,190
PDF world so you get forms that can
dynamically change to delay old and the

72
00:07:14,190 --> 00:07:19,919
dynamic proud of the extra face tough
this is driven by a spider monkey and

73
00:07:19,919 --> 00:07:22,919
the latest version of Adobe Acrobat
Reader Dec

74
00:07:23,440 --> 00:07:33,000
not anymore it's driven by a spider
monkey 24 X FA itself is not supported

75
00:07:33,000 --> 00:07:38,090
by many PDF Rios yet most notably of
course Adobe Reader or Acrobat Reader

76
00:07:38,090 --> 00:07:46,119
acrobats and Adreno supports it but many
other popular readers do not supported

77
00:07:46,120 --> 00:07:51,389
like chrome chrome firefox does not
supported or the Windows Windows pdf

78
00:07:51,389 --> 00:08:00,139
free as well so that's why I also think
that doesn't change a dog breeders here

79
00:08:00,139 --> 00:08:08,370
to stay for quite some time probably so
the exact a form data itself is XML

80
00:08:08,370 --> 00:08:15,120
structure with jizz embedded in the PDF
in a so-called XTP packet and within

81
00:08:15,120 --> 00:08:18,690
this sixty people could you find
JavaScript and the Strauss group as

82
00:08:18,690 --> 00:08:24,300
always executed upon certain events like
the document is fully loaded with a user

83
00:08:24,300 --> 00:08:26,270
clicks a button or something like that

84
00:08:26,270 --> 00:08:34,789
let's have a look at a practical example
no hope this is kind of freedom so the

85
00:08:34,789 --> 00:08:41,189
XML blog that you see here and always
starts off with the XDP root tag and

86
00:08:41,190 --> 00:08:48,050
below that you find always find the
contract on the conflict on contains

87
00:08:48,050 --> 00:08:55,209
elements which are important for example
a processing and you have another

88
00:08:55,210 --> 00:08:59,800
damages actually the most important one
is called the template on the template

89
00:08:59,800 --> 00:09:06,609
on contains all the important objects
that you as a user will later see in the

90
00:09:06,610 --> 00:09:09,680
PDF like buttons text views

91
00:09:09,680 --> 00:09:13,739
stuff like that and looking a bit
further down your society the event

92
00:09:13,740 --> 00:09:19,140
object and those event object those
which contain the actual JavaScript code

93
00:09:19,140 --> 00:09:25,790
like in this case you seward's just
alert 1337 but that's gonna give you a

94
00:09:25,790 --> 00:09:35,160
basic idea how this XTP packard embedded
into PDF looks like I could spend hours

95
00:09:35,160 --> 00:09:41,430
now to explain all the different dorms
with which exists in the EXIF a engine

96
00:09:41,430 --> 00:09:47,699
but I would just say there are many
different ones there are many many

97
00:09:47,700 --> 00:09:54,060
objects in total over 200 of them and
the odd can be exist over JavaScript and

98
00:09:54,060 --> 00:09:59,010
used in the funding process so as you
might be able to imagine this is a

99
00:09:59,010 --> 00:10:04,620
really really shoot attack surface and
probably will see many more

100
00:10:04,620 --> 00:10:10,490
vulnerabilities in the future and
they're so let's switch onto the X FA

101
00:10:10,490 --> 00:10:18,250
and channels next we all started off
with a treat by news over Twitter lol

102
00:10:18,250 --> 00:10:25,810
sound as a reader which seems to contain
symbols and those are located in that

103
00:10:25,810 --> 00:10:32,319
which is called the Jeff cash manager
went as hard I was like ok so maybe

104
00:10:32,320 --> 00:10:36,350
there's a way to recover the symbolic
information and use it to new versions

105
00:10:37,100 --> 00:10:42,110
so the first step but I was doing was of
course to search for the newest version

106
00:10:42,110 --> 00:10:49,700
to get the most recent symbols are a lot
of founders at 941

107
00:10:51,050 --> 00:10:59,199
the newest one that I could spot so what
we need now when we have the symbols for

108
00:10:59,200 --> 00:11:05,570
an old or rather or Solaris version we
need a kind of reliable she Ristic to

109
00:11:05,570 --> 00:11:11,040
put the symbols from the aquifer under
API which model which implements the

110
00:11:11,040 --> 00:11:17,400
EXIF a functionality to put these
symbols to the echo from that API deal

111
00:11:17,400 --> 00:11:25,280
of new Adobe Reader or Acrobat Reader
versions but I stumbled over quite some

112
00:11:25,280 --> 00:11:32,569
problems one was that the code for the
nine point X versions is rather old 2012

113
00:11:32,570 --> 00:11:37,450
and i have been quite some code changes
and it's so if you have a look at this

114
00:11:37,450 --> 00:11:43,770
allows you see it has 48,000 functions
which is still a lot but if you have a

115
00:11:43,770 --> 00:11:49,250
look at Acrobat Reader Dec it has 95000
function so the function car nearly

116
00:11:49,250 --> 00:11:59,340
doubled and the problem with differing
third two models the old and new

117
00:11:59,340 --> 00:12:05,490
microphone dpi from a recent Windows
version was the compiler for those

118
00:12:05,490 --> 00:12:12,980
allows plenary really did some heavy in
line with functions and matching up

119
00:12:12,980 --> 00:12:18,690
mixing it up with a forum for example
was a total failure didn't really work

120
00:12:18,690 --> 00:12:23,000
mainly because it turned up too many
false positives and that is something

121
00:12:23,000 --> 00:12:27,880
that you do not want to have it all
because it will only confuse you if you

122
00:12:27,880 --> 00:12:32,810
try to reverse the binary find out some
basic functionality in it and if you're

123
00:12:32,810 --> 00:12:38,829
faced with the wrong function names that
is definitely problematic by the way

124
00:12:38,830 --> 00:12:43,800
nothing against I offer this is a really
really it was just in this case not

125
00:12:43,800 --> 00:12:46,160
really usable

126
00:12:46,160 --> 00:12:51,180
another problem was that structured
objects and the veto over sizes differ

127
00:12:51,180 --> 00:12:57,250
slightly as well they don't differ much
but it's enough to totally screw up your

128
00:12:57,250 --> 00:13:03,810
mistakes so you can't really use that so
I had to try a different approach my

129
00:13:03,810 --> 00:13:10,388
approach to trying to understand reader
in a certain way which would help me to

130
00:13:10,389 --> 00:13:16,449
find a very bulletproof way on how to
recover symbols and I focused not on

131
00:13:16,449 --> 00:13:23,680
quanta to trying to match like 20,000
functions but I wanted to focus on the

132
00:13:23,680 --> 00:13:29,579
really important ones so I wanted to
have the symbols ready for every word

133
00:13:29,579 --> 00:13:34,489
for the heat management and i wanted to
have the most important symbols

134
00:13:35,540 --> 00:13:43,529
concerning the objects so let's talk
about objects what is useful to know

135
00:13:43,529 --> 00:13:48,209
about those objects first of all if you
have a crash you want to identify it and

136
00:13:48,209 --> 00:13:49,649
memory you want to know

137
00:13:49,649 --> 00:13:54,149
ok we have a crush these objects are
involved were kind of objects are these

138
00:13:54,149 --> 00:13:59,600
so you need to identify and identify
them somehow in memory but it would also

139
00:13:59,600 --> 00:14:06,290
be nice to have a debate over offsets in
the binary for the different objects are

140
00:14:06,290 --> 00:14:09,920
some nice will be to have all the
methods and properties which are exposed

141
00:14:09,920 --> 00:14:15,310
to JavaScript because then you wouldn't
have to read the 1,600 pages and

142
00:14:15,310 --> 00:14:20,388
something that would also be very
interesting to her entry points in the

143
00:14:20,389 --> 00:14:26,240
binary for all the methods and property
get us and said US which are exposed to

144
00:14:26,240 --> 00:14:31,990
the JavaScript engine and as a bonus
nice to have all the function names of

145
00:14:31,990 --> 00:14:36,740
the V table entries so if you have for
example foreign object call

146
00:14:37,500 --> 00:14:43,810
the table officer takes a deep they do
know exactly get screen offset or

147
00:14:43,810 --> 00:14:50,369
something like that so let's see what we
can recover from that my first attempt

148
00:14:50,370 --> 00:14:55,670
when I was reversing the old version was
a function which is called getclass take

149
00:14:55,670 --> 00:15:04,020
and what it does returns last idea which
is stored at offset 10 in the survey

150
00:15:04,020 --> 00:15:10,630
object and I thought this is pleading
eyes because that might match up with

151
00:15:10,630 --> 00:15:19,570
the new versions so if you have a look
at the at the constructor method of the

152
00:15:19,570 --> 00:15:27,050
feud object we see that had rights the
aesthetic value X 86 @ off certain

153
00:15:27,750 --> 00:15:35,600
plastic and now if we have a look at the
feud object and memory under Acrobat

154
00:15:35,600 --> 00:15:42,300
Reader Dec you see that the idea aid so
that doesn't match up and I also tried

155
00:15:42,300 --> 00:15:50,800
for other objects it is not the case it
is only shifted by eight but it just

156
00:15:50,800 --> 00:15:54,760
doesn't match up those constants are
obviously not constant so there was a

157
00:15:54,760 --> 00:16:02,330
fail I couldn't use this class but I had
a second try and I found this type

158
00:16:02,330 --> 00:16:11,240
method and the type method is located
always be total of 84 every XFA object

159
00:16:11,240 --> 00:16:16,360
that you have been reader and it just
returns aesthetic value for the feud

160
00:16:16,360 --> 00:16:21,780
objects just returns to study various
seventy four six and if you have a look

161
00:16:21,780 --> 00:16:28,680
at this function for the feud object in
Acrobat Reader Dec you see ok this idea

162
00:16:28,680 --> 00:16:34,180
looks much better seems to be static and
really is static so there can be used to

163
00:16:34,180 --> 00:16:42,849
identify the objects memory so how do we
go about that we have the old Solaris

164
00:16:42,850 --> 00:16:44,110
version

165
00:16:44,110 --> 00:16:53,470
you get a match between object name and
the corresponding I D and the idea you

166
00:16:53,470 --> 00:17:01,899
can just search for the newer versions
of Acrobat across from dpi and search

167
00:17:01,899 --> 00:17:08,880
for binary patterns because the
instructions in the type methods are

168
00:17:08,880 --> 00:17:14,199
always the same as always moved steady
value to you X return so you can

169
00:17:14,199 --> 00:17:18,939
identify all the top methods for all the
objects just by searching for a simple

170
00:17:18,939 --> 00:17:26,809
binary pattern be a disaster movie X
then you have the aesthetic value as an

171
00:17:26,809 --> 00:17:32,230
integer value and seized three for the
return instruction so searching through

172
00:17:32,230 --> 00:17:37,679
that gives you are the type methods and
having other type methods to all the

173
00:17:37,679 --> 00:17:42,140
objects you can just go into the
beginning of the method search for the

174
00:17:42,140 --> 00:17:46,820
extra you only have one extra effort to
all these type methods and you find

175
00:17:46,820 --> 00:17:53,750
immediately the meetings so that is
pretty nice we can safely really 100%

176
00:17:53,750 --> 00:18:00,970
safe before other versions identify all
the EXIF objects which are part of the

177
00:18:00,970 --> 00:18:09,010
engine so we can have a check on the
first item on our list we can identify

178
00:18:09,010 --> 00:18:13,669
the objects in memory and we got the
retailer offset so that's already pretty

179
00:18:13,669 --> 00:18:19,140
nice so let's have a look at methods and
properties and what we can find out

180
00:18:19,140 --> 00:18:22,140
about them

181
00:18:22,900 --> 00:18:32,000
offset X 34 into the details of each XFA
object we have dysfunction get script

182
00:18:32,000 --> 00:18:38,950
and dysfunction is also pretty sure it
and it contains 21 reference into the

183
00:18:38,950 --> 00:18:45,130
data section of a correspondingly PRI
and it contains the so-called most crypt

184
00:18:45,130 --> 00:18:50,570
table structure and the structure
contains all the relevant information

185
00:18:50,570 --> 00:18:55,450
that you wanna have about objects about
the methods and properties so let's have

186
00:18:55,450 --> 00:19:01,830
a look at how that looks like so it
starts off with the example again with

187
00:19:01,830 --> 00:19:07,510
the feud object with the most group
table structure and as most group table

188
00:19:07,510 --> 00:19:12,660
structure starts off the deal alert
which is again appointed to another most

189
00:19:12,660 --> 00:19:22,230
grip tape one level above us in the
object Hiroaki so the first entry is

190
00:19:22,230 --> 00:19:27,460
itself a container implementation was
gripped him pointing to a node

191
00:19:27,460 --> 00:19:32,670
implementation script and you get the
tree and you get the object and always

192
00:19:32,670 --> 00:19:39,250
ends with the zero so from opposing just
the first you've heard in line you

193
00:19:39,250 --> 00:19:45,630
already get the object heroic you just
put in as the second feud contain Steve

194
00:19:45,630 --> 00:19:53,860
object name so you have the feud and yes
the parent class which is container

195
00:19:53,860 --> 00:20:00,310
won't let us note tree and finally of
object the third and fourth entry into

196
00:20:00,310 --> 00:20:07,720
those most group tables are point two
tables and those tables and 10 and just

197
00:20:07,720 --> 00:20:14,610
contain pointers again to properties
trucks in this example and the

198
00:20:14,610 --> 00:20:19,370
properties struct is also very simple
and the first few too contains a pointer

199
00:20:19,370 --> 00:20:24,489
to pointer to the string of the property
in this case rather you and just below

200
00:20:24,490 --> 00:20:29,940
you find the settlement together
function which is nice because now you

201
00:20:29,940 --> 00:20:34,429
have the property to a certain object
and you know exactly where the set and

202
00:20:34,429 --> 00:20:40,070
the ghetto method can be found in the
banner of the setup method can of course

203
00:20:40,070 --> 00:20:47,600
be zero in this case it has a readonly
property and method table so this method

204
00:20:47,600 --> 00:20:54,959
tables just like the property table
table pointers which ends 10 again and

205
00:20:54,960 --> 00:21:00,990
the method structures even more simple
concept contains a pointer to a pointer

206
00:21:00,990 --> 00:21:06,740
to the method named the function pointer
to the actual function in the binary

207
00:21:06,740 --> 00:21:13,730
just below so that simple structures
very easy to powers you get all the

208
00:21:13,730 --> 00:21:18,879
methods and properties in Quetta and
said I entry points in the binary

209
00:21:18,879 --> 00:21:21,379
richness

210
00:21:21,380 --> 00:21:26,790
really nice if you want to have some
orientation when you get a crash where's

211
00:21:26,790 --> 00:21:32,570
my function call and which parameter
parameters passed to the function stuff

212
00:21:32,570 --> 00:21:39,340
like that so we can also check the third
and the fourth item on our list so what

213
00:21:39,340 --> 00:21:44,220
is remaining is actually only getting
the function names of the veto entries

214
00:21:44,220 --> 00:21:49,970
that have to say is still to do because
it is far from trivial you have the

215
00:21:49,970 --> 00:21:57,370
problem that four different objects
certain methods are virtual methods are

216
00:21:57,370 --> 00:22:04,030
edit or replaced and there is no generic
approach some hard to find that out but

217
00:22:04,030 --> 00:22:12,560
maybe I will find out in a nice method
but still to do all right let's switch

218
00:22:12,560 --> 00:22:18,230
over from the objects to the cash
manager which is the custom allocator

219
00:22:18,230 --> 00:22:25,700
which you can find the extra engine it's
a very simple he managed only four style

220
00:22:25,700 --> 00:22:34,020
which stores as we saw in the first
screenshot its data in rather large

221
00:22:34,020 --> 00:22:42,060
chunks and in those trunks you find this
the smaller data blocks to my daughter

222
00:22:42,060 --> 00:22:48,360
know this from Gmail or other
specialized locate us and like the

223
00:22:48,360 --> 00:22:48,860
others

224
00:22:48,860 --> 00:22:55,580
allocate us this is mostly introduced
you to performance reasons and a fun

225
00:22:55,580 --> 00:23:00,230
thing about it is it doesn't really have
any security futures so things like keep

226
00:23:00,230 --> 00:23:03,470
isolation that you find in the New York
/ roseanne's or in

227
00:23:03,470 --> 00:23:11,400
Internet Explorer does not present or
enter UIF mechanisms and protect the

228
00:23:11,400 --> 00:23:17,679
older one with new members see you don't
find anything of that so you're in a

229
00:23:17,679 --> 00:23:20,909
sense of this has not been designed with
security in mind

230
00:23:23,590 --> 00:23:30,379
disclaimer for the next slides I can't
dive too deeply into the locator because

231
00:23:30,380 --> 00:23:35,890
this is not really possible in 45
minutes but I will only show you the

232
00:23:35,890 --> 00:23:41,480
relevant project we need to later for
the exploitation pod so I'll try to

233
00:23:41,480 --> 00:23:47,280
explain only the relevant stuff I will
release next few days

234
00:23:47,280 --> 00:23:51,690
a paper as well which will cover a
little bit more in-depth if you're

235
00:23:51,690 --> 00:23:58,390
interested so let's have a very
simplified version of the Jeff cash

236
00:23:58,390 --> 00:24:06,669
manager structures the main are the
basic structures Jeff cash manager of

237
00:24:06,669 --> 00:24:11,580
memory cache lists and you have the J of
memory cache and explain it in a second

238
00:24:11,580 --> 00:24:19,539
but those structures they manage those
big chunks that actually store data and

239
00:24:19,539 --> 00:24:28,490
they always have a certain size and
interest rank you have afterwards or the

240
00:24:28,490 --> 00:24:35,960
smaller blocks your actual data before
us and Jeff cash manager for a different

241
00:24:35,960 --> 00:24:43,460
size why managers another chunk of
another size with again those small

242
00:24:43,460 --> 00:24:51,549
blocks stored inside the big chunk so
let's have a look a little bit more in

243
00:24:51,549 --> 00:24:58,850
detail to aid recovery now the locations
of size smaller than 100 the allocated

244
00:24:58,850 --> 00:25:05,240
handles allocations of size greater than
100 X 100 a little bit differently but

245
00:25:05,240 --> 00:25:10,169
having a look at the Assizes under 100
is really enough to understand

246
00:25:11,140 --> 00:25:12,900
how the whole thing works

247
00:25:12,900 --> 00:25:20,070
so at the root of this Jeff cash manager
structure it has size four hundred and

248
00:25:20,070 --> 00:25:25,919
thirty-four hex starts off with a
retailer and at offset aid it has the

249
00:25:25,920 --> 00:25:32,720
Sprinter two structures for the sizes
larger than 100 but it often takes 18

250
00:25:32,720 --> 00:25:42,290
starts off with an array of size hex 100
X 400 sorry to store pointers for each

251
00:25:42,290 --> 00:25:52,690
size from 1 to hex FFS which are
required to manage the trunks so each

252
00:25:52,690 --> 00:25:58,350
other in their points to OJ of memory
cache list and the name list already

253
00:25:58,350 --> 00:26:06,909
implies that our brains to some kind of
error and these areas contain again

254
00:26:06,910 --> 00:26:12,360
pointers to Jeff memory cache structures
and that's actually the point road gets

255
00:26:12,360 --> 00:26:18,959
more important that's why I called them
and read the J of memory commercials are

256
00:26:18,960 --> 00:26:21,580
structures which each of them

257
00:26:21,580 --> 00:26:28,960
managers run shank and they are actually
those structures which decisive for the

258
00:26:28,960 --> 00:26:34,440
location and and free handling and
everything like that so those Jeff

259
00:26:34,440 --> 00:26:41,240
memory cache structures they point to
the blocks of the different sizes so

260
00:26:41,240 --> 00:26:47,580
that's the whole structure of the Lokpal
structures which are involved

261
00:26:51,309 --> 00:27:03,490
so talk so talking about the size of the
trunks they have the size of the China

262
00:27:03,490 --> 00:27:08,340
is derived from a certain form you know
you see here so for example if you have

263
00:27:08,340 --> 00:27:12,899
an allocation size of Hicks 64 just put
it into this formula and you will see

264
00:27:12,899 --> 00:27:24,668
for example for size x64 you will find
the chunks of SEBI 20 so kind of logical

265
00:27:24,669 --> 00:27:31,330
to say okay I have a question of object
lying around in this huge chunk of CIC

266
00:27:31,330 --> 00:27:42,249
28 must be of size x64 right wrong
unfortunately not the case because Jeff

267
00:27:42,249 --> 00:27:46,710
memory care specialists they can manage
blocks of multiple sizes so what that

268
00:27:46,710 --> 00:27:52,759
means is that blocks of size X and of a
difference is why they can both end up

269
00:27:52,759 --> 00:28:00,749
in trying Sept so an allocation of
science Expo be placed in the same trunk

270
00:28:00,749 --> 00:28:07,559
as the location of the sales why if the
allocation of size why larger than X has

271
00:28:07,559 --> 00:28:14,668
occurred before end of the size of Texas
and the same range as size why and those

272
00:28:14,669 --> 00:28:19,610
Rangers always defined by powers of two
so you have arranging for example from X

273
00:28:19,610 --> 00:28:28,469
22 X 30 X 42 X 768 Detroit hex FFS and
so on and so on so enjoyed what the

274
00:28:28,470 --> 00:28:36,639
overridden basically does checks if the
block which is about located does it fit

275
00:28:36,639 --> 00:28:38,840
in a trunk that we already have

276
00:28:38,840 --> 00:28:46,360
and if there was a drunk already
available just take step 14 the block

277
00:28:46,360 --> 00:28:54,219
into this trial which is already present
so it's always hard let's have a look at

278
00:28:54,220 --> 00:28:54,980
it

279
00:28:54,980 --> 00:29:03,380
graphics so you don't hear the sighs x64
we already allocated an object X and a

280
00:29:03,380 --> 00:29:11,450
string of slayings linked Sept so we
have two batters of size x64 a place in

281
00:29:11,450 --> 00:29:17,970
one chunk of course and now we have an
allocation of size 640 aid and since

282
00:29:17,970 --> 00:29:25,950
this isn't the same range as science x64
the Lokpal will decide to just plays the

283
00:29:25,950 --> 00:29:28,950
object into the stunk

284
00:29:31,490 --> 00:29:39,200
so let's take a look at the structures
within the chunks and left you can see

285
00:29:39,200 --> 00:29:45,700
the J of memory cache so the main
structure for the allocations and it

286
00:29:45,700 --> 00:29:49,830
always starts off with the block size
and in the example over here you see

287
00:29:49,830 --> 00:29:57,790
that the block size as always extend you
have a max entry entry in your structure

288
00:29:57,790 --> 00:30:03,110
which kind of gives you the maximum
amount of locations where one of the

289
00:30:03,110 --> 00:30:08,240
chance can hold and of course the trunk
pointer pointer to pointer to the

290
00:30:08,240 --> 00:30:15,280
strength here and in a location count
and we have the initial stage here so no

291
00:30:15,280 --> 00:30:21,620
blocking here has been allocated yet so
the allocated counters of course 0 and

292
00:30:21,620 --> 00:30:26,520
very important as the next Alok point O
woods are stored at 6:20 into the

293
00:30:26,520 --> 00:30:35,580
structure and this one points to list
heard this is the beginning of linked

294
00:30:35,580 --> 00:30:41,580
lists you always have those feelings to
forward links linking together a single

295
00:30:41,580 --> 00:30:47,629
link list of the free blocks which are
available in the trunk so let's have a

296
00:30:47,630 --> 00:30:54,320
look at when we allocate our first block
in the trunk how it looks afterwards

297
00:31:00,400 --> 00:31:05,510
so after the first location the next
Alec point is overwritten with the flank

298
00:31:05,510 --> 00:31:14,190
so it's basically just moves one
position further down the flank is

299
00:31:14,190 --> 00:31:19,920
overwritten with the pointer back to the
J of memory kiss you see it up here and

300
00:31:19,920 --> 00:31:28,310
of course the expenditures increased 16
education does the exact same moves the

301
00:31:28,310 --> 00:31:34,250
next to the next flink yeah we override
the link again with a pointed to the

302
00:31:34,250 --> 00:31:39,790
Jeff memory cache structure and yellow
count has increased 22 same with the

303
00:31:39,790 --> 00:31:44,050
third allocation so this is just to give
you an idea how it works

304
00:31:44,050 --> 00:31:50,680
has actually a pretty simple algorithm
so if we free now the second block in

305
00:31:50,680 --> 00:31:58,630
here as you can imagine the next prime
is going to jump up here because this

306
00:31:58,630 --> 00:32:04,280
block is being freed on the Nextel
appointed just becomes the pointer to be

307
00:32:04,280 --> 00:32:10,620
freed miners forest so that we have a
new list heading here and the tray of

308
00:32:10,620 --> 00:32:16,040
memory cash prize is overwritten with
the flick again to complete the same

309
00:32:16,040 --> 00:32:24,120
linked list so this is actually a very
simple and also very fast algorithm to

310
00:32:24,120 --> 00:32:31,399
allocate and free the blocks within
those chunks so if you still don't like

311
00:32:31,400 --> 00:32:36,940
the Jets coach manager which I kind of
understand maybe you still missing page

312
00:32:36,940 --> 00:32:41,890
sheep you can just use one of the
scripts that I'm going to put up on the

313
00:32:41,890 --> 00:32:47,960
hour get up and get an offset from it
which is called Jeff Cashman objective

314
00:32:47,960 --> 00:32:56,390
and this is actually just a boolean
value which is set to one and it

315
00:32:56,390 --> 00:33:00,730
indicates that jeff kirsch managers
active for the exit fee engine

316
00:33:00,730 --> 00:33:05,470
basic you only have to switch from 120
and then you have switched off the Jeff

317
00:33:05,470 --> 00:33:10,710
Cushman and of course you have to save
the battery and replaced by Andrey and

318
00:33:10,710 --> 00:33:15,910
if you start a code reader afterwards
again you've basically switched off the

319
00:33:15,910 --> 00:33:21,500
Jeff coach manager and you can use page
he began this is very nice and also very

320
00:33:21,500 --> 00:33:26,710
nice thing if you do something kind of
makes sense to switch it off it also

321
00:33:26,710 --> 00:33:33,559
facilitates cross street charging so
let's have a look at how we can exploit

322
00:33:33,559 --> 00:33:38,428
that thing my opinion of his three
factors are important transportation

323
00:33:38,429 --> 00:33:45,190
first we need to understand what kind of
vulnerability you have to understand the

324
00:33:45,190 --> 00:33:50,440
box need quite some background
information and the information that I

325
00:33:50,440 --> 00:33:55,169
gave you understand and which will be
available through my tour so i'm gona

326
00:33:55,169 --> 00:33:59,540
published this is going to make it
easier so we kind of have a check there

327
00:33:59,540 --> 00:34:05,649
a second part of it is always handle the
heat and understand the heap and

328
00:34:05,650 --> 00:34:12,710
leverage in a way that you needed to so
we've handled quite some parts of the

329
00:34:12,710 --> 00:34:18,730
Jeff cash manager guess we can make a
check there as well but there's a third

330
00:34:18,730 --> 00:34:22,530
very important part of his when it comes
to memory corruption and that's what I'm

331
00:34:22,530 --> 00:34:29,230
talking about here you need to know your
corruption targets and so we have some

332
00:34:29,230 --> 00:34:36,440
goes well we want to do exploitation
here first of all you want to bypass and

333
00:34:36,440 --> 00:34:40,389
I of course I could readers of four
layers of our target so we have to get

334
00:34:40,389 --> 00:34:46,790
around that we need to corrupt certain
bites to cause a memory leak as soon as

335
00:34:46,790 --> 00:34:51,560
you know one of the module base
addresses then you can craft Europe and

336
00:34:51,560 --> 00:34:55,239
go on with your exploitation process but
first of all you need to liek

337
00:34:57,100 --> 00:35:01,680
but we know what we would like to have
as a flexible over eight targets are not

338
00:35:01,680 --> 00:35:05,180
something that he can only explode if
you have the kind of perfect

339
00:35:05,180 --> 00:35:10,720
vulnerability we have arrived what we
are one our ability of course very easy

340
00:35:10,720 --> 00:35:18,129
but I wanted to have a really flexible
over a target like if you think a zero

341
00:35:18,130 --> 00:35:20,290
by Jordi road right

342
00:35:20,290 --> 00:35:26,620
Steady Go variety of some address that
we could use for that as well and I

343
00:35:26,620 --> 00:35:30,910
wanted to find a technique which is fast
reliable and most importantly

344
00:35:30,910 --> 00:35:37,480
independent from the readers and that we
have because something that you do not

345
00:35:37,480 --> 00:35:42,670
want to have in your exploiters like if
version is Adobe Reader 10 then do this

346
00:35:42,670 --> 00:35:48,420
else to something else because just
explode just get blood gets bloated and

347
00:35:48,420 --> 00:35:55,230
its most of the time record for its
reliability so the idea that I came up

348
00:35:55,230 --> 00:35:59,340
with was to attack the metadata
contained within the chunks so we have

349
00:35:59,340 --> 00:36:06,600
two possibilities this is the example
again with the block size of 10 you can

350
00:36:06,600 --> 00:36:11,860
attack the flank this is the case that
the block is still free and the

351
00:36:11,860 --> 00:36:19,070
exploitation mechanism is triggered when
the blog is being allocated you can hit

352
00:36:19,070 --> 00:36:22,970
the judge of memory cache planned this
is the case when the bloggers obviously

353
00:36:22,970 --> 00:36:30,009
allocated and the expectation mechanism
triggers when the block has freed so I

354
00:36:30,010 --> 00:36:34,780
can tell you that both methods can be
abused to create a very reliable memory

355
00:36:34,780 --> 00:36:36,140
leak

356
00:36:36,140 --> 00:36:39,779
explained today the technique with the
flank because it's just

357
00:36:40,470 --> 00:36:48,509
super easy he was either so back to the
initial situation we just hypothetical

358
00:36:48,510 --> 00:36:54,550
approach first and then we were two more
practical approach afterwards we're

359
00:36:54,550 --> 00:36:59,090
really stepped through the various steps
that you have to go through she want to

360
00:36:59,090 --> 00:37:07,099
exploit that so yeah the initial
situation as a said as again no blood is

361
00:37:07,099 --> 00:37:13,900
allocated and yes the singly linked list
of links and let's take the first link

362
00:37:13,900 --> 00:37:20,480
as our override target so what you need
to be able to do you need to overwrite

363
00:37:20,480 --> 00:37:25,460
the flank so that it points afterwards
to attack a controlled data breaches not

364
00:37:25,460 --> 00:37:30,240
how to do and just corrupt the pointer
in some way so that it afterwards points

365
00:37:30,240 --> 00:37:38,060
to your data that is easily do readers
to learn X 86 target so with a little

366
00:37:38,060 --> 00:37:41,060
bit of you spray that is easy to do

367
00:37:41,910 --> 00:37:47,118
disaster very flexible as I said so you
can do this was with kind of any kind of

368
00:37:47,119 --> 00:37:52,560
memory corruption so let's see what
happens now that we have overwritten the

369
00:37:52,560 --> 00:38:01,400
bed fling and redirected to our control
data if we allocate the bed block to the

370
00:38:01,400 --> 00:38:08,930
next point zero overwritten with the bed
flink you see the province now down to

371
00:38:08,930 --> 00:38:12,690
attack a controlled data the flying
again

372
00:38:12,690 --> 00:38:15,740
overwritten with the putter back to Jeff
memory cache

373
00:38:15,740 --> 00:38:23,470
know what happens when we allocate an
object of size extend the next location

374
00:38:23,470 --> 00:38:29,580
will return the data bus after the flank
and now we are in control data areas

375
00:38:29,580 --> 00:38:37,860
where r object will end up is in the
middle of control data flow what you

376
00:38:37,860 --> 00:38:45,100
basically get is detailed in the middle
of Europe controlled data region which

377
00:38:45,100 --> 00:38:51,140
is of course nice to have as soon as the
retailers and controlled area maybe you

378
00:38:51,140 --> 00:38:58,940
sprayed it with strings maybe you
sprayed with float Aires just as you

379
00:38:58,940 --> 00:39:05,590
want to do it then you can just simply
read out the the retail and of course

380
00:39:05,590 --> 00:39:11,070
trivial afterwards also to control this
because either you just three the string

381
00:39:11,070 --> 00:39:16,160
and override the office said where you
retailers with daily you control are you

382
00:39:16,160 --> 00:39:22,600
directly override with the float value
after the specification here I trouble

383
00:39:22,600 --> 00:39:30,299
you 754 you can directly control it and
as soon as you do something that the

384
00:39:30,300 --> 00:39:35,300
object some retailer method is going to
be called and that was basically came

385
00:39:35,300 --> 00:39:42,440
over so let's have a look at a practical
exploitation example and get some kind

386
00:39:42,440 --> 00:39:48,230
of setting so what I will describe the
setting over 0 do road right primitive

387
00:39:48,230 --> 00:39:56,250
to an arbitrary address so the plan is
to have taken off link in a chunk of

388
00:39:56,250 --> 00:40:02,490
block size hex one hundred and eighty so
the corresponding target science will be

389
00:40:02,490 --> 00:40:11,069
hex seats 68 C so some of you might
wonder why does he choose the size X 118

390
00:40:11,070 --> 00:40:16,100
that has a special reason X 180 is two
sides of the Jeff document

391
00:40:16,100 --> 00:40:20,670
implementation object and that is the
first object that has been created on

392
00:40:20,670 --> 00:40:25,050
the day of cash within this range size
range

393
00:40:25,680 --> 00:40:32,180
so as you remember this the range
mechanism implies

394
00:40:32,180 --> 00:40:36,919
every object or every string afterwards
which is located in the range between

395
00:40:36,920 --> 00:40:43,319
600 and takes one hundred and eighty
will be placed in the same trunk the

396
00:40:43,319 --> 00:40:47,790
biggest object that we can create
dynamically from Excel face the template

397
00:40:47,790 --> 00:40:53,000
object which has to size hex one hundred
and forty years and yet due to the range

398
00:40:53,000 --> 00:40:58,140
mechanism this is gonna end up in the
same trunk and this is something good to

399
00:40:58,140 --> 00:41:04,470
use because it's by far the largest
object that you can create dynamically

400
00:41:04,470 --> 00:41:11,990
from new JavaScript and big advantages
that within this trunk it's rather quiet

401
00:41:11,990 --> 00:41:16,348
because not many locations happened
there and that's basically is something

402
00:41:16,349 --> 00:41:20,819
that you want to her during your
expectation process some thing has some

403
00:41:20,819 --> 00:41:30,009
area of memory where it's rather quiet
so first thing that we do is just spray

404
00:41:30,010 --> 00:41:32,770
strings or areas just as you want to do
it

405
00:41:32,770 --> 00:41:39,049
of the size C 68 C and it's enough to
spread around spread around five

406
00:41:39,049 --> 00:41:44,299
thousand of them so you get a spray of
around 250 megabytes what you want to

407
00:41:44,299 --> 00:41:49,940
have this that the address this is a
great religions and but stable the

408
00:41:49,940 --> 00:41:50,549
address

409
00:41:50,549 --> 00:41:57,240
X 1010 1020 this one will be mapped and
this will be our target address for the

410
00:41:57,240 --> 00:42:02,509
first shot so we're doing ours erode
erode overrides to this address and we

411
00:42:02,510 --> 00:42:06,630
will hits and because this buffer X

412
00:42:08,390 --> 00:42:15,230
so after we did the overwrite just
search for our areas of strength and we

413
00:42:15,230 --> 00:42:24,130
find that have said so and so we have
corrupted data and what you can

414
00:42:24,130 --> 00:42:28,460
immediately computer from that is the
starting address

415
00:42:31,620 --> 00:42:47,450
directly compute the starting address so
you get a kind of orientation where you

416
00:42:47,450 --> 00:42:55,710
are in your virtual memory so the next
step is we want to free our bus wrecks

417
00:42:55,710 --> 00:43:03,540
roadway and replace it with the trunk
for that to happen we need to allocate a

418
00:43:03,540 --> 00:43:12,860
certain amount of objects or strings
which will be placed in our target chunk

419
00:43:12,860 --> 00:43:20,190
so it has to be of size between X 100 X
180 as I already said we can for example

420
00:43:20,190 --> 00:43:26,960
use the template objects for that and
something which is also required we need

421
00:43:26,960 --> 00:43:30,280
to have the flick here at the end

422
00:43:30,280 --> 00:43:37,890
still so this blog here at the end has
to be free because if we just allocated

423
00:43:37,890 --> 00:43:43,440
arbitrary amount of objects
templateobjects for example this one

424
00:43:43,440 --> 00:43:47,380
here will not be free and we will not be
able to leverage the flying over a

425
00:43:47,380 --> 00:43:54,550
technique so how many of them do we have
to allocate actually first of all before

426
00:43:54,550 --> 00:44:03,010
freeing the butter or C 68 size C 68 C
size we should do fragment of course the

427
00:44:03,010 --> 00:44:08,420
chief cache of the size even though not
many locations happen there we should do

428
00:44:08,420 --> 00:44:13,670
this to enjoy that no more holes left in
the JFK sheep

429
00:44:15,510 --> 00:44:22,890
and after freeing the C 68 C size paper
we have to allocate exactly one hundred

430
00:44:22,890 --> 00:44:27,640
and thirty-two templateobjects the
reason behind it is actually pretty

431
00:44:27,640 --> 00:44:37,819
simple because I X 184 which is our
trunk block size plus four because you

432
00:44:37,820 --> 00:44:44,610
to the flank times one hundred and
thirty-two is the size C 81 and this is

433
00:44:44,610 --> 00:44:51,950
just a bus or block size so one has to
be allocated and we can be actually a

434
00:44:51,950 --> 00:44:57,620
hundred percent sure that the last fling
Canara buster is free and that gives us

435
00:44:57,620 --> 00:45:03,240
exactly the situation that we want to
have that this link here is available

436
00:45:03,240 --> 00:45:05,060
and

437
00:45:05,060 --> 00:45:12,250
to compute the address of that because
you know the address of the block and

438
00:45:12,250 --> 00:45:20,190
130 times the block size plus for just
gives you the address of the flying over

439
00:45:20,190 --> 00:45:28,550
here so now we can do a partial over
right so that the flank points to 10000

440
00:45:28,550 --> 00:45:34,610
and this is again and controlled area so
now we can allocate re templateobjects

441
00:45:34,610 --> 00:45:41,000
of size 10 40 and we get the template
object would exactly be placed into our

442
00:45:41,000 --> 00:45:46,510
data and we hope the situation today
explained before you can just surged

443
00:45:46,510 --> 00:45:51,250
through your strings arrays or whatever
you have and friendly table and that's

444
00:45:51,250 --> 00:45:58,090
all about it is allows bypassed accrued
readers Poland and as I said European

445
00:45:58,090 --> 00:46:01,970
drop is not something I would dive
deeply into it because it's obvious that

446
00:46:01,970 --> 00:46:10,000
it's very very simple to do so we have a
conclusion this is a very easy and

447
00:46:10,000 --> 00:46:16,130
highly effective techniques to leaked
data it's very simple to do when you

448
00:46:16,130 --> 00:46:22,630
don't even need a global retry primitive
as you head for example a few months or

449
00:46:22,630 --> 00:46:27,020
years ago in flesh when you override the
length field of a victory or something

450
00:46:27,020 --> 00:46:30,700
like that which gives you basically
access to the whole otra memory is of

451
00:46:30,700 --> 00:46:35,350
course a nice to her I didn't find that
in reader but obviously we don't need

452
00:46:35,350 --> 00:46:40,380
that this technique works pretty well
this completely version independent

453
00:46:40,380 --> 00:46:48,460
tested for version 9 10 11 and Dec and
it writes for all of them as completely

454
00:46:48,460 --> 00:46:56,960
independent if you do it on XP Windows
10 it was just the same way as very fast

455
00:46:56,960 --> 00:47:02,800
if you do the string technique from your
initial over if you have the situation

456
00:47:02,800 --> 00:47:09,460
with 2008 override which triggers very
fast then you have basically from start

457
00:47:09,460 --> 00:47:14,900
of your ex played until you get code
control in under a second it happens

458
00:47:14,900 --> 00:47:21,430
very very fast and as I said it's a very
flexible techniques that you can use

459
00:47:21,430 --> 00:47:28,080
with almost every kind of over right so
what we have viewers customer locator

460
00:47:28,080 --> 00:47:34,299
which is perfect for us if we want to
play around with the reader because it's

461
00:47:34,300 --> 00:47:41,910
a perfect target for memory corruption
scenarios thank you for your attention

462
00:47:42,660 --> 00:47:59,470
thank you so very good questions ok we
can do we can do to questions are indeed

463
00:47:59,470 --> 00:48:07,759
JavaScript inside of the XML element
like how do you like lake all of these

464
00:48:07,760 --> 00:48:12,730
allegations are somehow created by input
PDF file how does this happen

465
00:48:14,860 --> 00:48:20,650
greater subpoena for like how do you
like to see all of these things like

466
00:48:20,650 --> 00:48:25,840
what did they in particular that you
give the day well as just one Javascript

467
00:48:25,840 --> 00:48:31,800
method which is quote exercise aid
template dodge create node and

468
00:48:31,800 --> 00:48:37,280
afterwards you give them the strength of
the object in this case template object

469
00:48:37,280 --> 00:48:41,380
so if you do create note template then
ull okayed

470
00:48:42,090 --> 00:48:47,760
one of those objects and if you had the
strength that i've been talking about

471
00:48:47,760 --> 00:48:55,080
you just have to allocate 132 of them
and you do like when they get their

472
00:48:55,080 --> 00:49:03,299
delegated where they are located if you
create note for you to do know I will

473
00:49:03,300 --> 00:49:11,210
also publish on our good have become a
sample exploit that works together with

474
00:49:11,210 --> 00:49:16,080
the pkg plugin which emulates as you
would you ever tried so you can have a

475
00:49:16,080 --> 00:49:21,279
look at it how it works in detail I
couldn't go into detail how the

476
00:49:21,280 --> 00:49:26,250
JavaScript and the location routines and
everything works but if you have a look

477
00:49:26,250 --> 00:49:31,870
at the exploit that I would publish
their newest ok that's weird works of

478
00:49:31,870 --> 00:49:37,850
course I left out some details because
45 minutes as very short to cover a real

479
00:49:37,850 --> 00:49:43,040
deep technical content but if you have a
look at the expired and also the paper

480
00:49:43,040 --> 00:49:47,380
that I'm going to release its going to
be explained in more detail

481
00:49:47,380 --> 00:49:51,900
thinking last question

482
00:49:53,860 --> 00:49:56,000
all right thank you so much

