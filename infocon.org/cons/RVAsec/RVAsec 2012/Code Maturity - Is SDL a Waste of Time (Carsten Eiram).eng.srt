1
00:00:12,320 --> 00:00:17,609
yeah so thanks for having me take

2
00:00:15,990 --> 00:00:19,710
already did an excellent introduction<font color="#E5E5E5"> so</font>

3
00:00:17,609 --> 00:00:21,330
I'm not going<font color="#E5E5E5"> to add to that that's why</font>

4
00:00:19,710 --> 00:00:23,730
I'm<font color="#E5E5E5"> not why you're here to hear me talk</font>

5
00:00:21,330 --> 00:00:27,479
<font color="#CCCCCC">about that anyway so</font><font color="#E5E5E5"> let's jump straight</font>

6
00:00:23,730 --> 00:00:31,140
in so this presentation gotta talk a bit

7
00:00:27,480 --> 00:00:33,899
about stl going to talk about code

8
00:00:31,140 --> 00:00:35,610
maturity so why do vulnerabilities

9
00:00:33,899 --> 00:00:37,469
actually occur what are the core

10
00:00:35,610 --> 00:00:39,690
problems of the different

11
00:00:37,469 --> 00:00:41,460
vulnerabilities we hear about so going

12
00:00:39,690 --> 00:00:43,860
today<font color="#E5E5E5"> dig much deeper than just say</font>

13
00:00:41,460 --> 00:00:45,660
Buffalo fill memory corruption like by

14
00:00:43,860 --> 00:00:47,219
do they actually occur and that's what

15
00:00:45,660 --> 00:00:50,179
<font color="#CCCCCC">code mature is about going to discuss</font>

16
00:00:47,219 --> 00:00:53,640
that<font color="#E5E5E5"> and then we're going to see if</font>

17
00:00:50,180 --> 00:00:55,320
<font color="#E5E5E5">Microsoft actually managed</font><font color="#CCCCCC"> to develop</font>

18
00:00:53,640 --> 00:00:56,969
difference would be more secure code as

19
00:00:55,320 --> 00:00:58,530
they claim they did and we specifically

20
00:00:56,969 --> 00:01:04,320
<font color="#E5E5E5">going to look at office for this part of</font>

21
00:00:58,530 --> 00:01:05,939
the presentation this yeah so quickly

22
00:01:04,319 --> 00:01:08,189
just about stl it was<font color="#CCCCCC"> create by</font>

23
00:01:05,939 --> 00:01:12,119
<font color="#CCCCCC">Microsoft and it's now a company wide</font>

24
00:01:08,189 --> 00:01:13,860
initiative the whole idea of stl was to

25
00:01:12,119 --> 00:01:15,780
implement security through the whole

26
00:01:13,860 --> 00:01:18,720
software development process so instead

27
00:01:15,780 --> 00:01:20,340
<font color="#E5E5E5">of just doing it eventually usually</font>

28
00:01:18,720 --> 00:01:22,110
after we created the product and people

29
00:01:20,340 --> 00:01:23,220
start recording vulnerabilities then we

30
00:01:22,110 --> 00:01:26,820
<font color="#CCCCCC">actually want</font><font color="#E5E5E5"> to get it in through the</font>

31
00:01:23,220 --> 00:01:28,710
whole process and to quote my

32
00:01:26,820 --> 00:01:31,139
accountants developed<font color="#CCCCCC"> up from</font><font color="#E5E5E5"> the book</font>

33
00:01:28,710 --> 00:01:32,908
this<font color="#CCCCCC"> q development</font><font color="#E5E5E5"> lifecycle then there</font>

34
00:01:31,140 --> 00:01:34,500
are two goals one is to reduce the

35
00:01:32,909 --> 00:01:36,240
number of vulnerabilities and privacy

36
00:01:34,500 --> 00:01:37,710
problems and the second is to ensure

37
00:01:36,240 --> 00:01:41,329
that<font color="#CCCCCC"> the vulnerabilities that are there</font>

38
00:01:37,710 --> 00:01:43,860
that<font color="#CCCCCC"> we reduce the</font><font color="#E5E5E5"> severity of those</font>

39
00:01:41,329 --> 00:01:47,039
microsoft not the only ones with the stl

40
00:01:43,860 --> 00:01:48,810
adobe<font color="#E5E5E5"> has something similar now it's</font>

41
00:01:47,040 --> 00:01:52,200
outside<font color="#CCCCCC"> the scope of today talking about</font>

42
00:01:48,810 --> 00:01:54,750
how well that works for them but the

43
00:01:52,200 --> 00:01:57,270
<font color="#CCCCCC">microsoft HDL quick history lesson up</font>

44
00:01:54,750 --> 00:01:58,560
<font color="#E5E5E5">until about the middle of 1998 microsoft</font>

45
00:01:57,270 --> 00:02:01,860
was just kind of handing vulnerability

46
00:01:58,560 --> 00:02:03,149
reports at hug and then they found<font color="#E5E5E5"> out</font>

47
00:02:01,860 --> 00:02:05,399
that<font color="#E5E5E5"> that wasn't really an effective way</font>

48
00:02:03,149 --> 00:02:06,899
of doing things so they founded the

49
00:02:05,399 --> 00:02:10,169
security response team to end this

50
00:02:06,899 --> 00:02:12,270
report and<font color="#CCCCCC"> also interestingly they found</font>

51
00:02:10,169 --> 00:02:14,470
<font color="#CCCCCC">it the security task force</font>

52
00:02:12,270 --> 00:02:15,760
<font color="#CCCCCC">gralik seven different vulnerability</font>

53
00:02:14,470 --> 00:02:18,310
courses to figure out<font color="#CCCCCC"> well what are we</font>

54
00:02:15,760 --> 00:02:20,560
doing<font color="#CCCCCC"> wrong so we can</font><font color="#E5E5E5"> reduce the number</font>

55
00:02:18,310 --> 00:02:21,910
of vulnerabilities in the future so on

56
00:02:20,560 --> 00:02:23,530
these guys didn't worked on the report

57
00:02:21,910 --> 00:02:27,579
for a long time they finished<font color="#E5E5E5"> around the</font>

58
00:02:23,530 --> 00:02:33,520
same time<font color="#E5E5E5"> but at the end of the bug</font>

59
00:02:27,580 --> 00:02:36,280
<font color="#CCCCCC">fixed release of windows 2000 based on</font>

60
00:02:33,520 --> 00:02:38,709
that they really some tools they started

61
00:02:36,280 --> 00:02:41,230
focusing on securing windows 2000 also

62
00:02:38,709 --> 00:02:42,550
created the sy team which then focused

63
00:02:41,230 --> 00:02:47,500
and starting to<font color="#E5E5E5"> teach 19 years for the</font>

64
00:02:42,550 --> 00:02:49,750
next<font color="#E5E5E5"> couple of years in 2001 Microsoft's</font>

65
00:02:47,500 --> 00:02:50,980
reputation to get hit that's when

66
00:02:49,750 --> 00:02:52,810
everyone started saying the Microsoft

67
00:02:50,980 --> 00:02:54,760
don't care about security the products

68
00:02:52,810 --> 00:02:58,060
<font color="#E5E5E5">are crap they're flawed the riddle</font>

69
00:02:54,760 --> 00:02:59,739
vulnerabilities especially<font color="#CCCCCC"> named and</font>

70
00:02:58,060 --> 00:03:01,570
Code Red started that Microsoft decided

71
00:02:59,739 --> 00:03:04,090
that<font color="#E5E5E5"> okay we need to launch our</font>

72
00:03:01,570 --> 00:03:05,500
trustworthy computing initiative people

73
00:03:04,090 --> 00:03:07,690
should trust us<font color="#CCCCCC"> and people</font><font color="#E5E5E5"> should feel</font>

74
00:03:05,500 --> 00:03:09,250
more confident in that we do care<font color="#CCCCCC"> about</font>

75
00:03:07,690 --> 00:03:10,870
security we are doing good job we need

76
00:03:09,250 --> 00:03:14,200
to fundamentally change how we address

77
00:03:10,870 --> 00:03:17,830
security issues in our products around

78
00:03:14,200 --> 00:03:19,238
the<font color="#E5E5E5"> same time Mike Howard and David</font>

79
00:03:17,830 --> 00:03:21,190
LeBlanc also finished writing the book

80
00:03:19,239 --> 00:03:22,810
writing secure code and actually use

81
00:03:21,190 --> 00:03:27,250
that<font color="#CCCCCC"> as</font><font color="#E5E5E5"> training material to train more</font>

82
00:03:22,810 --> 00:03:35,320
than 8,000 of the windows engineers use

83
00:03:27,250 --> 00:03:38,470
this there we go so in 2003 they then

84
00:03:35,320 --> 00:03:39,910
launched windows<font color="#E5E5E5"> server 2003</font><font color="#CCCCCC"> I once at</font>

85
00:03:38,470 --> 00:03:41,560
that point they have primarily been

86
00:03:39,910 --> 00:03:43,030
focusing<font color="#E5E5E5"> on the OS and some core</font>

87
00:03:41,560 --> 00:03:45,880
components they really looked at<font color="#E5E5E5"> any of</font>

88
00:03:43,030 --> 00:03:47,200
the other<font color="#CCCCCC"> applications but then at that</font>

89
00:03:45,880 --> 00:03:49,900
point they decided we also want to<font color="#E5E5E5"> look</font>

90
00:03:47,200 --> 00:03:51,250
at at some some more stuff and they

91
00:03:49,900 --> 00:03:53,890
started for instance also looking at

92
00:03:51,250 --> 00:03:55,540
office 2003 so this<font color="#CCCCCC"> is interesting</font><font color="#E5E5E5"> to us</font>

93
00:03:53,890 --> 00:03:57,609
<font color="#E5E5E5">later on because this is one</font><font color="#CCCCCC"> of the</font>

94
00:03:55,540 --> 00:03:58,959
first office versions that Microsoft

95
00:03:57,610 --> 00:04:02,950
started focusing at least a little bit

96
00:03:58,959 --> 00:04:04,510
on security during<font color="#E5E5E5"> the next couple of</font>

97
00:04:02,950 --> 00:04:06,238
years they were reflecting on the

98
00:04:04,510 --> 00:04:09,790
security push that they'd had and

99
00:04:06,239 --> 00:04:11,590
decided that stl should actually be

100
00:04:09,790 --> 00:04:13,630
<font color="#E5E5E5">formalized it should be a company-wide</font>

101
00:04:11,590 --> 00:04:16,329
policy like we want pretty<font color="#CCCCCC"> much all our</font>

102
00:04:13,630 --> 00:04:18,969
<font color="#E5E5E5">products to</font><font color="#CCCCCC"> be covered by stl and in</font>

103
00:04:16,329 --> 00:04:20,950
2007 this stand office 2007 were

104
00:04:18,970 --> 00:04:22,730
released and those were two products

105
00:04:20,950 --> 00:04:24,200
<font color="#CCCCCC">there now fully integrated SD</font>

106
00:04:22,730 --> 00:04:26,030
so we also want to keep that<font color="#CCCCCC"> in mind</font>

107
00:04:24,200 --> 00:04:27,229
because that's kind<font color="#E5E5E5"> of a bar then later</font>

108
00:04:26,030 --> 00:04:31,450
on when<font color="#CCCCCC"> we look at different office</font>

109
00:04:27,230 --> 00:04:36,400
versions 2007-2010 fully implement HDL

110
00:04:31,450 --> 00:04:39,020
2003 a bit windows 2000 XP none really

111
00:04:36,400 --> 00:04:40,969
so we want to<font color="#E5E5E5"> see later on did the</font>

112
00:04:39,020 --> 00:04:43,849
vulnerabilities change did they actually

113
00:04:40,970 --> 00:04:46,010
<font color="#E5E5E5">make a difference if we look at stl</font>

114
00:04:43,850 --> 00:04:48,650
<font color="#E5E5E5">there are seven phases the first phase</font>

115
00:04:46,010 --> 00:04:51,219
is the<font color="#E5E5E5"> training phase where we want to</font>

116
00:04:48,650 --> 00:04:53,510
<font color="#E5E5E5">teach our developers to do secure coding</font>

117
00:04:51,220 --> 00:04:55,250
we also want to like get an

118
00:04:53,510 --> 00:04:58,190
understanding secure design<font color="#E5E5E5"> security</font>

119
00:04:55,250 --> 00:05:00,530
testing threat modeling this<font color="#E5E5E5"> is</font>

120
00:04:58,190 --> 00:05:02,810
<font color="#E5E5E5">something</font><font color="#CCCCCC"> that will have some impact on</font>

121
00:05:00,530 --> 00:05:06,109
actually obviously the the quality of

122
00:05:02,810 --> 00:05:08,630
the code the next two phases are the

123
00:05:06,110 --> 00:05:10,760
requirement to sign faces those<font color="#CCCCCC"> ones are</font>

124
00:05:08,630 --> 00:05:12,560
more<font color="#CCCCCC"> focused</font><font color="#E5E5E5"> on which minimum security</font>

125
00:05:10,760 --> 00:05:14,270
do we want in our application so these

126
00:05:12,560 --> 00:05:18,800
are more focus on on<font color="#E5E5E5"> the design quality</font>

127
00:05:14,270 --> 00:05:20,539
case park pass risk<font color="#E5E5E5"> assessment so we</font>

128
00:05:18,800 --> 00:05:22,880
won't really cover these two that<font color="#CCCCCC"> March</font>

129
00:05:20,540 --> 00:05:24,140
here today the following is the

130
00:05:22,880 --> 00:05:25,730
<font color="#CCCCCC">implementation phase</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> that one is</font>

131
00:05:24,140 --> 00:05:27,409
interesting because this is why we go in

132
00:05:25,730 --> 00:05:29,120
<font color="#E5E5E5">and say okay which kind of tools do we</font>

133
00:05:27,410 --> 00:05:30,440
need which configuration settings that

134
00:05:29,120 --> 00:05:32,300
were<font color="#E5E5E5"> using when we're</font><font color="#CCCCCC"> making our code</font>

135
00:05:30,440 --> 00:05:33,710
and also are there<font color="#E5E5E5"> any functions that we</font>

136
00:05:32,300 --> 00:05:35,150
want<font color="#CCCCCC"> to deprecate are they any functions</font>

137
00:05:33,710 --> 00:05:37,219
that we shouldn't really use can we use

138
00:05:35,150 --> 00:05:40,099
<font color="#E5E5E5">something better this is also why we do</font>

139
00:05:37,220 --> 00:05:41,270
like static<font color="#E5E5E5"> analysis of our code so this</font>

140
00:05:40,100 --> 00:05:44,330
is<font color="#CCCCCC"> again a face that</font><font color="#E5E5E5"> will have an impact</font>

141
00:05:41,270 --> 00:05:47,330
on the code quality the verification

142
00:05:44,330 --> 00:05:49,310
phase there we do our dynamic testing we

143
00:05:47,330 --> 00:05:50,719
do<font color="#E5E5E5"> fast testing and review</font><font color="#CCCCCC"> our text</font>

144
00:05:49,310 --> 00:05:53,030
surface again this is<font color="#E5E5E5"> something we'll</font>

145
00:05:50,720 --> 00:05:54,860
have<font color="#E5E5E5"> some impact on under code also the</font>

146
00:05:53,030 --> 00:05:56,840
last<font color="#E5E5E5"> two phases are the release and</font>

147
00:05:54,860 --> 00:05:58,490
response faces and this is<font color="#E5E5E5"> where we</font>

148
00:05:56,840 --> 00:06:01,310
create<font color="#E5E5E5"> our incident response plan and</font>

149
00:05:58,490 --> 00:06:02,990
execute it again that does not really

150
00:06:01,310 --> 00:06:04,730
have any effect as such on the code

151
00:06:02,990 --> 00:06:09,950
quality so we won't really cover those

152
00:06:04,730 --> 00:06:12,010
<font color="#E5E5E5">today so the implementation phase so</font>

153
00:06:09,950 --> 00:06:14,330
we're covering a couple of the faces now

154
00:06:12,010 --> 00:06:17,030
<font color="#E5E5E5">the</font><font color="#CCCCCC"> OL idea of</font><font color="#E5E5E5"> that one is</font><font color="#CCCCCC"> to implement</font>

155
00:06:14,330 --> 00:06:20,030
safer programming practices what

156
00:06:17,030 --> 00:06:21,979
<font color="#CCCCCC">microsoft specifically done is they</font>

157
00:06:20,030 --> 00:06:24,530
<font color="#CCCCCC">actually went</font><font color="#E5E5E5"> through and made a whole</font>

158
00:06:21,980 --> 00:06:27,020
list of AP is that they deem for

159
00:06:24,530 --> 00:06:29,330
historically unsafe at least they were

160
00:06:27,020 --> 00:06:32,930
used in an unsafe manner so they said

161
00:06:29,330 --> 00:06:35,419
we're not<font color="#CCCCCC"> allowed to use them and those</font>

162
00:06:32,930 --> 00:06:39,020
ones are classic api's extreme car

163
00:06:35,420 --> 00:06:41,990
string cat s printf these types of AP is

164
00:06:39,020 --> 00:06:44,690
that typically be used badly and then

165
00:06:41,990 --> 00:06:48,260
introduced like classic buffer overflow

166
00:06:44,690 --> 00:06:49,700
vulnerabilities so the<font color="#CCCCCC"> two-goal decent</font>

167
00:06:48,260 --> 00:06:51,650
<font color="#E5E5E5">set when allowed to use them we're going</font>

168
00:06:49,700 --> 00:06:53,870
<font color="#E5E5E5">to make some safer versions that take</font>

169
00:06:51,650 --> 00:06:56,900
some size documents or more size

170
00:06:53,870 --> 00:06:59,720
documents and we also going to<font color="#E5E5E5"> do some</font>

171
00:06:56,900 --> 00:07:02,750
calculations to actually validate<font color="#E5E5E5"> to a</font>

172
00:06:59,720 --> 00:07:06,290
certain extent should we do<font color="#E5E5E5"> this copier</font>

173
00:07:02,750 --> 00:07:08,300
a shin or not what they also did was

174
00:07:06,290 --> 00:07:10,100
they actually said instead<font color="#E5E5E5"> of doing all</font>

175
00:07:08,300 --> 00:07:12,020
the arithmetic directly in the quarter

176
00:07:10,100 --> 00:07:14,120
doing our multiplication our addition

177
00:07:12,020 --> 00:07:17,030
our subtraction we want to<font color="#E5E5E5"> make some API</font>

178
00:07:14,120 --> 00:07:19,370
so actually handling that and they did

179
00:07:17,030 --> 00:07:21,380
that by in safe to protect against

180
00:07:19,370 --> 00:07:23,900
integer overflows in jalandhar flows

181
00:07:21,380 --> 00:07:27,590
type conversion vulnerabilities so for

182
00:07:23,900 --> 00:07:29,630
<font color="#E5E5E5">instance instead of just converting one</font>

183
00:07:27,590 --> 00:07:31,940
type to another type they<font color="#E5E5E5"> were</font><font color="#CCCCCC"> exes for</font>

184
00:07:29,630 --> 00:07:34,310
<font color="#CCCCCC">instance make an API like into short</font>

185
00:07:31,940 --> 00:07:36,710
which takes an integer and then we

186
00:07:34,310 --> 00:07:39,200
<font color="#E5E5E5">convert it to a short if we do that just</font>

187
00:07:36,710 --> 00:07:41,359
outside an API then that typically could

188
00:07:39,200 --> 00:07:43,159
lead to a type conversion vulnerability

189
00:07:41,360 --> 00:07:44,960
because our integer may hold a larger

190
00:07:43,160 --> 00:07:47,180
value than our short and if<font color="#E5E5E5"> we just</font>

191
00:07:44,960 --> 00:07:50,030
blindly could not convert it we may

192
00:07:47,180 --> 00:07:52,040
truncate that size late on that might

193
00:07:50,030 --> 00:07:54,530
lead to problems in<font color="#E5E5E5"> our code so by using</font>

194
00:07:52,040 --> 00:07:57,230
API instead like this they would

195
00:07:54,530 --> 00:07:58,760
actually<font color="#E5E5E5"> go in and check</font><font color="#CCCCCC"> okay while we</font>

196
00:07:57,230 --> 00:08:00,590
are<font color="#E5E5E5"> converting this value are we</font>

197
00:07:58,760 --> 00:08:02,090
truncating it if we're truncating it

198
00:08:00,590 --> 00:08:04,159
we're going<font color="#E5E5E5"> to return an error instead</font>

199
00:08:02,090 --> 00:08:08,419
the application can handle<font color="#E5E5E5"> it and won't</font>

200
00:08:04,160 --> 00:08:09,920
use this invalid result they've done the

201
00:08:08,420 --> 00:08:11,810
same<font color="#CCCCCC"> to protect against</font><font color="#E5E5E5"> the overflows</font>

202
00:08:09,920 --> 00:08:13,670
and under flows by adding api's like

203
00:08:11,810 --> 00:08:15,290
keyword<font color="#E5E5E5"> that you would stop so when</font>

204
00:08:13,670 --> 00:08:17,480
we're doing addition subtraction again

205
00:08:15,290 --> 00:08:19,160
we're gonna check the values and see do

206
00:08:17,480 --> 00:08:21,110
we<font color="#E5E5E5"> end up with the result that we</font>

207
00:08:19,160 --> 00:08:22,610
expected so if we're doing a subtraction

208
00:08:21,110 --> 00:08:23,750
of two values and we end up<font color="#CCCCCC"> with a</font>

209
00:08:22,610 --> 00:08:29,060
result<font color="#E5E5E5"> higher than both of them</font>

210
00:08:23,750 --> 00:08:32,030
something obviously<font color="#E5E5E5"> went wrong for the</font>

211
00:08:29,060 --> 00:08:35,780
verification phase they create a couple

212
00:08:32,030 --> 00:08:37,610
of tools also like application verifier

213
00:08:35,780 --> 00:08:39,169
to make sure that they could also catch

214
00:08:37,610 --> 00:08:41,120
these sort of all abilities that might

215
00:08:39,169 --> 00:08:43,939
not find during<font color="#CCCCCC"> the static code reviews</font>

216
00:08:41,120 --> 00:08:45,500
they also create a bin scope to ensure

217
00:08:43,940 --> 00:08:47,870
that<font color="#E5E5E5"> the bynars they were creating</font>

218
00:08:45,500 --> 00:08:48,590
actually when compliance with the<font color="#E5E5E5"> HDL</font>

219
00:08:47,870 --> 00:08:50,420
requirement

220
00:08:48,590 --> 00:08:53,420
and also interestingly they started

221
00:08:50,420 --> 00:08:55,370
focusing on a lot<font color="#E5E5E5"> of them fussing making</font>

222
00:08:53,420 --> 00:08:56,810
sure like stress testing the application

223
00:08:55,370 --> 00:08:59,990
making sure that they actually<font color="#E5E5E5"> wouldn't</font>

224
00:08:56,810 --> 00:09:02,150
just fail by being fast in simple

225
00:08:59,990 --> 00:09:03,620
manners and it's basically office 2010

226
00:09:02,150 --> 00:09:06,920
was subjected to like some<font color="#E5E5E5"> pretty</font>

227
00:09:03,620 --> 00:09:09,080
heavy-duty<font color="#E5E5E5"> fasting tests and reportedly</font>

228
00:09:06,920 --> 00:09:10,490
they weeded out 1,800 bucks<font color="#E5E5E5"> they were</font>

229
00:09:09,080 --> 00:09:16,130
<font color="#E5E5E5">not all vulnerabilities but they weeded</font>

230
00:09:10,490 --> 00:09:18,470
out 1,800 bucks in their code so this

231
00:09:16,130 --> 00:09:21,080
all sounds very<font color="#E5E5E5"> impressive and there's</font>

232
00:09:18,470 --> 00:09:22,550
been a<font color="#E5E5E5"> lot of different</font><font color="#CCCCCC"> ways</font><font color="#E5E5E5"> of talking</font>

233
00:09:21,080 --> 00:09:24,200
about<font color="#E5E5E5"> whether</font><font color="#CCCCCC"> another still has been</font>

234
00:09:22,550 --> 00:09:25,729
effective and like three<font color="#CCCCCC"> of the ways</font>

235
00:09:24,200 --> 00:09:27,770
that people discussed it in the<font color="#E5E5E5"> past is</font>

236
00:09:25,730 --> 00:09:31,240
just discussing the security mechanisms

237
00:09:27,770 --> 00:09:33,949
that stl has added to<font color="#E5E5E5"> different products</font>

238
00:09:31,240 --> 00:09:36,170
doing testing like fasting run testings

239
00:09:33,950 --> 00:09:38,450
comparing old versions to new versions

240
00:09:36,170 --> 00:09:39,949
or simply just counting vulnerability so

241
00:09:38,450 --> 00:09:43,100
if you<font color="#E5E5E5"> just quickly cover some of these</font>

242
00:09:39,950 --> 00:09:45,560
three ways of looking at<font color="#E5E5E5"> it so for</font>

243
00:09:43,100 --> 00:09:48,350
<font color="#CCCCCC">instance if we look at security</font>

244
00:09:45,560 --> 00:09:50,000
enhancements then in the later office

245
00:09:48,350 --> 00:09:53,510
versions we do see that they've added

246
00:09:50,000 --> 00:09:54,890
support for<font color="#CCCCCC"> Deb SLR so that means they</font>

247
00:09:53,510 --> 00:09:56,420
are trying<font color="#E5E5E5"> to protect against</font>

248
00:09:54,890 --> 00:09:58,220
exploitation at least make<font color="#CCCCCC"> it harder to</font>

249
00:09:56,420 --> 00:10:00,589
expert certain memory corruption type

250
00:09:58,220 --> 00:10:02,990
vulnerabilities they also added features

251
00:10:00,590 --> 00:10:05,720
like protected view so it's a read-only

252
00:10:02,990 --> 00:10:07,490
mode so if we<font color="#E5E5E5"> are opening file from</font>

253
00:10:05,720 --> 00:10:08,990
unsafe locations then we're reducing our

254
00:10:07,490 --> 00:10:12,380
<font color="#E5E5E5">text surface but doing it in read-only</font>

255
00:10:08,990 --> 00:10:14,390
mode not allowing editing they add a

256
00:10:12,380 --> 00:10:16,160
file<font color="#E5E5E5"> block settings because</font><font color="#CCCCCC"> they found</font>

257
00:10:14,390 --> 00:10:18,860
<font color="#E5E5E5">out that many of the vulnerabilities are</font>

258
00:10:16,160 --> 00:10:20,870
being<font color="#E5E5E5"> reported at a certain</font><font color="#CCCCCC"> point in</font>

259
00:10:18,860 --> 00:10:23,840
time we're actually related to all the

260
00:10:20,870 --> 00:10:25,100
five versions so by adding Firebug

261
00:10:23,840 --> 00:10:27,110
settings they could kind of it can

262
00:10:25,100 --> 00:10:29,570
eliminate at least reduce the attack

263
00:10:27,110 --> 00:10:32,420
surface here for these outdated file

264
00:10:29,570 --> 00:10:34,130
types they also added office file

265
00:10:32,420 --> 00:10:36,020
validation which actually validates the

266
00:10:34,130 --> 00:10:38,120
structure of certain binary files to see

267
00:10:36,020 --> 00:10:40,370
if it complies with certain expectations

268
00:10:38,120 --> 00:10:42,740
so again all find the<font color="#E5E5E5"> problem is just</font>

269
00:10:40,370 --> 00:10:44,180
this doesn't tell us anything about<font color="#E5E5E5"> the</font>

270
00:10:42,740 --> 00:10:46,220
quality of the code these are

271
00:10:44,180 --> 00:10:47,719
defense-in-depth mechanisms when

272
00:10:46,220 --> 00:10:49,070
something<font color="#CCCCCC"> is going wrong or just</font><font color="#E5E5E5"> to</font>

273
00:10:47,720 --> 00:10:50,480
reduce the risk of something going wrong

274
00:10:49,070 --> 00:10:53,150
it<font color="#E5E5E5"> doesn't tell</font><font color="#CCCCCC"> us anything about</font><font color="#E5E5E5"> the</font>

275
00:10:50,480 --> 00:10:55,930
<font color="#E5E5E5">code quality so from our code maturity</font>

276
00:10:53,150 --> 00:10:58,220
standpoint it's not really interesting

277
00:10:55,930 --> 00:10:59,959
there's also been some fussing test

278
00:10:58,220 --> 00:11:00,690
comparisons<font color="#CCCCCC"> they were true published in</font>

279
00:10:59,960 --> 00:11:03,810
in

280
00:11:00,690 --> 00:11:06,330
2011 dan kaminsky<font color="#CCCCCC"> atlantic 18 Mike</font>

281
00:11:03,810 --> 00:11:08,670
editon<font color="#CCCCCC"> Eddington did one and</font><font color="#E5E5E5"> shortly</font>

282
00:11:06,330 --> 00:11:11,640
after World dorman also did one<font color="#E5E5E5"> and if</font>

283
00:11:08,670 --> 00:11:13,349
you just<font color="#E5E5E5"> look at those these are the</font>

284
00:11:11,640 --> 00:11:14,910
number of crashes<font color="#E5E5E5"> well darlin was able</font>

285
00:11:13,350 --> 00:11:16,440
to trigger in the<font color="#E5E5E5"> different office</font>

286
00:11:14,910 --> 00:11:19,050
versions even compare it against<font color="#CCCCCC"> the</font>

287
00:11:16,440 --> 00:11:20,340
<font color="#CCCCCC">Open Office also here's</font><font color="#E5E5E5"> another one</font>

288
00:11:19,050 --> 00:11:21,870
where he's weeded out the potential

289
00:11:20,340 --> 00:11:24,750
duplicates and we can see here that

290
00:11:21,870 --> 00:11:26,670
<font color="#CCCCCC">there is a decline in the number of</font>

291
00:11:24,750 --> 00:11:29,010
crisis that he can actually<font color="#E5E5E5"> trigger in</font>

292
00:11:26,670 --> 00:11:30,240
<font color="#CCCCCC">the different office versions if you</font>

293
00:11:29,010 --> 00:11:32,069
look<font color="#E5E5E5"> at</font><font color="#CCCCCC"> the ones that were listed as</font>

294
00:11:30,240 --> 00:11:34,530
exploitable potentially exploitable we

295
00:11:32,070 --> 00:11:36,600
can see there's also a fair drop from XP

296
00:11:34,530 --> 00:11:38,490
through 2010 where he didn't actually

297
00:11:36,600 --> 00:11:40,770
find any again if you look at some black

298
00:11:38,490 --> 00:11:45,210
of my office they were significantly

299
00:11:40,770 --> 00:11:48,060
more being found the<font color="#CCCCCC"> ala Nelson started</font>

300
00:11:45,210 --> 00:11:50,520
by<font color="#CCCCCC"> kaminski and the RS yielded the same</font>

301
00:11:48,060 --> 00:11:53,130
results we can see in 2003 we had a lot

302
00:11:50,520 --> 00:11:55,790
of crashes but in the old later<font color="#E5E5E5"> versions</font>

303
00:11:53,130 --> 00:11:57,870
newer versions there were fewer crashes

304
00:11:55,790 --> 00:11:59,939
so this<font color="#E5E5E5"> is very</font><font color="#CCCCCC"> good and it was actually</font>

305
00:11:57,870 --> 00:12:02,520
<font color="#E5E5E5">interesting analyses both of them the</font>

306
00:11:59,940 --> 00:12:03,810
only problem is this does<font color="#E5E5E5"> Nick can not</font>

307
00:12:02,520 --> 00:12:04,920
give us any insight into the code

308
00:12:03,810 --> 00:12:07,050
quality it doesn't tell us anything

309
00:12:04,920 --> 00:12:08,729
<font color="#E5E5E5">about the type of the complexities of</font>

310
00:12:07,050 --> 00:12:10,680
the vulnerabilities of being<font color="#CCCCCC"> discovered</font>

311
00:12:08,730 --> 00:12:13,350
instead<font color="#CCCCCC"> of just tells</font><font color="#E5E5E5"> us about the</font>

312
00:12:10,680 --> 00:12:16,050
verification process that the part of

313
00:12:13,350 --> 00:12:17,940
the<font color="#E5E5E5"> sdl so how well did Microsoft</font>

314
00:12:16,050 --> 00:12:22,109
implement their first testing so how

315
00:12:17,940 --> 00:12:25,280
many did they weed out this is my

316
00:12:22,110 --> 00:12:29,250
favorite<font color="#CCCCCC"> one this this</font><font color="#E5E5E5"> was how Microsoft</font>

317
00:12:25,280 --> 00:12:30,689
argue for the effectiveness of<font color="#CCCCCC"> stl they</font>

318
00:12:29,250 --> 00:12:32,430
counted the number of ulnar ability so

319
00:12:30,690 --> 00:12:34,680
they said<font color="#E5E5E5"> oh I one year period after the</font>

320
00:12:32,430 --> 00:12:36,900
release of Windows version how many

321
00:12:34,680 --> 00:12:39,510
vulnerabilities were being reported they

322
00:12:36,900 --> 00:12:42,319
did one for XP which is pre stl that it

323
00:12:39,510 --> 00:12:44,640
one for vista which is<font color="#E5E5E5"> post stl and</font>

324
00:12:42,320 --> 00:12:45,839
based on these results we could see<font color="#CCCCCC"> that</font>

325
00:12:44,640 --> 00:12:47,850
there was a decline in forty-five

326
00:12:45,839 --> 00:12:49,800
percent<font color="#E5E5E5"> forty five percent reduction in</font>

327
00:12:47,850 --> 00:12:52,160
the number of vulnerabilities and they

328
00:12:49,800 --> 00:12:54,900
<font color="#E5E5E5">argue that that's because the stl works</font>

329
00:12:52,160 --> 00:12:56,430
they did a similar one for sequel server

330
00:12:54,900 --> 00:12:59,819
by the reduction was<font color="#CCCCCC"> ninety one-percent</font>

331
00:12:56,430 --> 00:13:01,020
<font color="#E5E5E5">this is so a three-year period so like I</font>

332
00:12:59,820 --> 00:13:03,180
wanted<font color="#E5E5E5"> to help them out because like</font>

333
00:13:01,020 --> 00:13:05,180
they didn't do one for office so<font color="#E5E5E5"> I</font>

334
00:13:03,180 --> 00:13:10,760
decided let's do one for office also

335
00:13:05,180 --> 00:13:10,760
because the<font color="#E5E5E5"> problem is oh right skip</font>

336
00:13:11,360 --> 00:13:17,800
oh I lost the slide hang on

337
00:13:19,790 --> 00:13:23,870
oh there we go just<font color="#CCCCCC"> ahead of myself</font>

338
00:13:21,620 --> 00:13:26,660
we'll come back to that so one of the

339
00:13:23,870 --> 00:13:28,070
problems is<font color="#CCCCCC"> that when we count</font>

340
00:13:26,660 --> 00:13:29,449
vulnerabilities as I said before it

341
00:13:28,070 --> 00:13:30,470
doesn't document the security state<font color="#CCCCCC"> of</font>

342
00:13:29,450 --> 00:13:32,480
<font color="#CCCCCC">our product just to summon</font>

343
00:13:30,470 --> 00:13:35,390
vulnerabilities that are so it's

344
00:13:32,480 --> 00:13:36,620
<font color="#CCCCCC">actually pretty uninteresting because</font>

345
00:13:35,390 --> 00:13:38,569
their various number of factors that

346
00:13:36,620 --> 00:13:39,890
<font color="#E5E5E5">actually affect the number of all</font>

347
00:13:38,570 --> 00:13:42,230
abilities being reported in a product

348
00:13:39,890 --> 00:13:46,189
<font color="#CCCCCC">the</font><font color="#E5E5E5"> most important</font><font color="#CCCCCC"> one is researcher</font>

349
00:13:42,230 --> 00:13:48,200
focus this is an example<font color="#CCCCCC"> of adobe</font>

350
00:13:46,190 --> 00:13:49,460
shockwave player because i'm not talking

351
00:13:48,200 --> 00:13:54,650
about<font color="#E5E5E5"> adobe today by have to say a quick</font>

352
00:13:49,460 --> 00:13:56,270
step from 2003 to 2009 we see here that

353
00:13:54,650 --> 00:13:58,280
no vulnerabilities are being<font color="#E5E5E5"> really</font>

354
00:13:56,270 --> 00:14:00,710
found in adobe shockwave player co

355
00:13:58,280 --> 00:14:03,439
efficient but then<font color="#E5E5E5"> suddenly 2010 and 11</font>

356
00:14:00,710 --> 00:14:05,030
it's only Rises dramatically so with if

357
00:14:03,440 --> 00:14:06,860
we should use the logic<font color="#CCCCCC"> that the number</font>

358
00:14:05,030 --> 00:14:08,569
of vulnerabilities telops about this

359
00:14:06,860 --> 00:14:10,250
state and security state of a product

360
00:14:08,570 --> 00:14:13,340
then obviously that we was doing an

361
00:14:10,250 --> 00:14:17,000
excellent job till around 2009 and then

362
00:14:13,340 --> 00:14:18,620
this certainly mr. pratically what

363
00:14:17,000 --> 00:14:20,060
actually happened he was defected no one

364
00:14:18,620 --> 00:14:24,800
cared about shockwave player opens

365
00:14:20,060 --> 00:14:27,079
around 2009 then<font color="#E5E5E5"> suddenly late 2009 the</font>

366
00:14:24,800 --> 00:14:29,870
guys<font color="#E5E5E5"> from zdi a zero point initiative</font>

367
00:14:27,080 --> 00:14:32,420
the zero day initiative and the DV lab

368
00:14:29,870 --> 00:14:34,400
started focusing on shockwave player and

369
00:14:32,420 --> 00:14:35,689
so did<font color="#CCCCCC"> we're Sakuni research and we</font>

370
00:14:34,400 --> 00:14:37,790
started cranking out quite a few

371
00:14:35,690 --> 00:14:38,870
vulnerability reports over<font color="#CCCCCC"> the next</font>

372
00:14:37,790 --> 00:14:41,079
couple of years and that's why you

373
00:14:38,870 --> 00:14:44,360
suddenly see the big surge in numbers

374
00:14:41,080 --> 00:14:46,880
what also happened in around middle 2011

375
00:14:44,360 --> 00:14:48,260
we moved on like we stopped caring that

376
00:14:46,880 --> 00:14:49,910
<font color="#E5E5E5">we kind of proved the point and we moved</font>

377
00:14:48,260 --> 00:14:51,170
on<font color="#CCCCCC"> to other targets</font><font color="#E5E5E5"> and zdi actually</font>

378
00:14:49,910 --> 00:14:52,610
went<font color="#CCCCCC"> up</font><font color="#E5E5E5"> and said we're not</font><font color="#CCCCCC"> going to buy</font>

379
00:14:51,170 --> 00:14:57,040
vulnerabilities in shockwave player

380
00:14:52,610 --> 00:14:59,270
anymore so it's reset your focus dropped

381
00:14:57,040 --> 00:15:00,709
researchers moved on to other targets

382
00:14:59,270 --> 00:15:02,180
and<font color="#CCCCCC"> then we had a drop in the number</font>

383
00:15:00,710 --> 00:15:05,330
vulnerabilities in the second half<font color="#E5E5E5"> of</font>

384
00:15:02,180 --> 00:15:08,180
2011<font color="#CCCCCC"> date</font><font color="#E5E5E5"> Cobra unquote only reported 18</font>

385
00:15:05,330 --> 00:15:13,300
vulnerabilities now first half 2012 it's

386
00:15:08,180 --> 00:15:13,300
14 vulnerabilities so attention shifted

387
00:15:14,760 --> 00:15:19,029
so that's one thing<font color="#CCCCCC"> that I've fixed the</font>

388
00:15:17,230 --> 00:15:20,920
number if we<font color="#CCCCCC"> look at Microsoft numbers</font>

389
00:15:19,029 --> 00:15:22,720
also another<font color="#CCCCCC"> thing is as they</font>

390
00:15:20,920 --> 00:15:24,130
implemented stl lines absolves becoming

391
00:15:22,720 --> 00:15:26,470
more and more way of actually fixing

392
00:15:24,130 --> 00:15:28,540
vulnerabilities let's say ahead<font color="#E5E5E5"> of time</font>

393
00:15:26,470 --> 00:15:31,330
so when they're releasing a new product

394
00:15:28,540 --> 00:15:33,939
version then they of course and<font color="#CCCCCC"> it makes</font>

395
00:15:31,330 --> 00:15:35,080
sense look at how like which

396
00:15:33,940 --> 00:15:37,060
vulnerabilities that we currently

397
00:15:35,080 --> 00:15:38,470
<font color="#E5E5E5">working on for older versions of our</font>

398
00:15:37,060 --> 00:15:40,899
products when they are releasing<font color="#E5E5E5"> office</font>

399
00:15:38,470 --> 00:15:43,570
2010 are we coordinating any

400
00:15:40,899 --> 00:15:46,360
vulnerabilities<font color="#E5E5E5"> reporting 2007 and older</font>

401
00:15:43,570 --> 00:15:48,730
do they affect 2010 if they affect at

402
00:15:46,360 --> 00:15:50,560
the code that<font color="#E5E5E5"> we have a 2010 let's make</font>

403
00:15:48,730 --> 00:15:53,230
sure to fix it before the first stable

404
00:15:50,560 --> 00:15:54,760
release so since we're fixing

405
00:15:53,230 --> 00:15:57,700
vulnerabilities ahead of time suddenly

406
00:15:54,760 --> 00:15:59,140
<font color="#E5E5E5">we will see and a decrease in number</font>

407
00:15:57,700 --> 00:16:02,980
vulnerabilities<font color="#E5E5E5"> report in that version</font>

408
00:15:59,140 --> 00:16:04,839
because we already fixed them another

409
00:16:02,980 --> 00:16:06,190
thing that can have some impact is also

410
00:16:04,839 --> 00:16:08,440
the fact that Microsoft being more

411
00:16:06,190 --> 00:16:10,540
proactive checking their code more to

412
00:16:08,440 --> 00:16:13,360
see can we find similar vulnerabilities

413
00:16:10,540 --> 00:16:16,360
so out in<font color="#E5E5E5"> the industry we call it silent</font>

414
00:16:13,360 --> 00:16:18,279
fixes Microsoft choose the word variety

415
00:16:16,360 --> 00:16:19,839
instead so they fix them they do not

416
00:16:18,279 --> 00:16:22,930
necessary threw them in the bulletins

417
00:16:19,839 --> 00:16:26,020
because they're<font color="#E5E5E5"> just by ryans so you</font>

418
00:16:22,930 --> 00:16:27,370
won't<font color="#CCCCCC"> see</font><font color="#E5E5E5"> those either but then what I</font>

419
00:16:26,020 --> 00:16:29,199
like<font color="#CCCCCC"> the most associate when I jumped</font>

420
00:16:27,370 --> 00:16:30,640
ahead of<font color="#E5E5E5"> myself I did one for office</font>

421
00:16:29,200 --> 00:16:32,440
also because we can also use this to

422
00:16:30,640 --> 00:16:34,870
<font color="#E5E5E5">prove the opposite claim this is for</font>

423
00:16:32,440 --> 00:16:36,700
office this is the same comparisons they

424
00:16:34,870 --> 00:16:38,529
did for windows this is a<font color="#CCCCCC"> one year</font>

425
00:16:36,700 --> 00:16:41,050
comparison after the release we can see

426
00:16:38,529 --> 00:16:43,150
office 2000 following abilities<font color="#CCCCCC"> we pull</font>

427
00:16:41,050 --> 00:16:47,219
<font color="#CCCCCC">it within one year of its after it was</font>

428
00:16:43,150 --> 00:16:49,810
published of his 2010 13 vulnerabilities

429
00:16:47,220 --> 00:16:52,150
so we can<font color="#E5E5E5"> reduce the logic then</font>

430
00:16:49,810 --> 00:16:53,260
obviously stl has a huge problem because

431
00:16:52,150 --> 00:16:55,029
they just<font color="#CCCCCC"> introduced more</font>

432
00:16:53,260 --> 00:16:56,589
vulnerabilities they made office 2010

433
00:16:55,029 --> 00:17:00,029
<font color="#E5E5E5">done safer we should go back to what we</font>

434
00:16:56,589 --> 00:17:02,290
didn't office 2000 cuz apparently worked

435
00:17:00,029 --> 00:17:03,670
even<font color="#E5E5E5"> if we look at the total number of</font>

436
00:17:02,290 --> 00:17:05,230
ulnar abilities we can see<font color="#E5E5E5"> Microsoft</font>

437
00:17:03,670 --> 00:17:07,059
actually came full circle from two

438
00:17:05,230 --> 00:17:09,370
thousand to two thousand eleven hundred

439
00:17:07,059 --> 00:17:10,990
bulletins each year but if you<font color="#E5E5E5"> look at</font>

440
00:17:09,369 --> 00:17:12,428
the number<font color="#E5E5E5"> of CVS actually covered by</font>

441
00:17:10,990 --> 00:17:14,770
those bullets since they dramatically

442
00:17:12,429 --> 00:17:16,209
increase so again if<font color="#CCCCCC"> we should use the</font>

443
00:17:14,770 --> 00:17:17,770
logic that<font color="#E5E5E5"> we can look at just the</font>

444
00:17:16,209 --> 00:17:19,089
number of vulnerabilities against

445
00:17:17,770 --> 00:17:21,579
something went horribly wrong and

446
00:17:19,089 --> 00:17:24,970
considering as far as said Earl in 2004

447
00:17:21,579 --> 00:17:26,839
<font color="#E5E5E5">Microsoft Access decided that our stl</font>

448
00:17:24,970 --> 00:17:28,610
now covers most of our products

449
00:17:26,839 --> 00:17:32,928
well more vulnerabilities of being

450
00:17:28,610 --> 00:17:34,699
reported in most of your products now so

451
00:17:32,929 --> 00:17:37,130
as<font color="#E5E5E5"> I said looking at vulnerability</font>

452
00:17:34,700 --> 00:17:38,659
numbers is flawed so what I just did

453
00:17:37,130 --> 00:17:40,279
<font color="#CCCCCC">that it's not</font><font color="#E5E5E5"> a fair comparison it's not</font>

454
00:17:38,659 --> 00:17:41,539
fair<font color="#E5E5E5"> for me to say the security state of</font>

455
00:17:40,279 --> 00:17:44,289
Microsoft products have gone down

456
00:17:41,539 --> 00:17:46,700
<font color="#E5E5E5">because they're more vulnerabilities</font>

457
00:17:44,289 --> 00:17:48,470
some people use<font color="#E5E5E5"> look at it in a bit</font>

458
00:17:46,700 --> 00:17:50,600
<font color="#E5E5E5">largest group they look at severity</font>

459
00:17:48,470 --> 00:17:53,029
vulnerability severity also they say oh

460
00:17:50,600 --> 00:17:55,610
how many 10 days have been reported how

461
00:17:53,029 --> 00:17:57,440
what is<font color="#CCCCCC"> the time to patch how many</font>

462
00:17:55,610 --> 00:17:59,899
unpatched vulnerabilities exist in this

463
00:17:57,440 --> 00:18:01,100
<font color="#E5E5E5">product the thing is just many of these</font>

464
00:17:59,899 --> 00:18:04,459
metrics say more about the

465
00:18:01,100 --> 00:18:06,020
responsiveness of the vendor then the

466
00:18:04,460 --> 00:18:08,510
security state of the products are we

467
00:18:06,020 --> 00:18:11,600
really focusing on the two last parts of

468
00:18:08,510 --> 00:18:14,510
the stl and and not really<font color="#CCCCCC"> salute how</font>

469
00:18:11,600 --> 00:18:15,918
solid the code is what is interesting

470
00:18:14,510 --> 00:18:18,080
that's what we're going to talk about

471
00:18:15,919 --> 00:18:20,960
now is looking at the number<font color="#E5E5E5"> of own</font>

472
00:18:18,080 --> 00:18:22,879
abilities but combining it with what are

473
00:18:20,960 --> 00:18:24,260
the vulnerability courses because that

474
00:18:22,880 --> 00:18:26,630
sells of something about the security

475
00:18:24,260 --> 00:18:28,129
state of the product so that's what we

476
00:18:26,630 --> 00:18:30,200
<font color="#E5E5E5">got to talk a bit about now first coat</font>

477
00:18:28,130 --> 00:18:35,059
maturity and then we're going<font color="#E5E5E5"> to look at</font>

478
00:18:30,200 --> 00:18:37,250
Microsoft Office the ATF code maturity

479
00:18:35,059 --> 00:18:38,299
is that we simply<font color="#E5E5E5"> go in evaluate the</font>

480
00:18:37,250 --> 00:18:39,770
prevalence of<font color="#E5E5E5"> the different</font>

481
00:18:38,299 --> 00:18:43,789
vulnerability<font color="#E5E5E5"> classes being discovered</font>

482
00:18:39,770 --> 00:18:45,500
each vulnerability class fits into

483
00:18:43,789 --> 00:18:47,690
<font color="#E5E5E5">certain simplicity some vulnerabilities</font>

484
00:18:45,500 --> 00:18:50,029
<font color="#E5E5E5">are simpler than all the vulnerabilities</font>

485
00:18:47,690 --> 00:18:52,159
some are more complex so by look and

486
00:18:50,029 --> 00:18:54,409
<font color="#CCCCCC">also we go from the idea that we find</font>

487
00:18:52,159 --> 00:18:55,909
<font color="#CCCCCC">the simple vulnerabilities generally</font>

488
00:18:54,409 --> 00:18:57,620
before we find the very complex

489
00:18:55,909 --> 00:18:59,510
vulnerabilities so by looking at that we

490
00:18:57,620 --> 00:19:02,739
<font color="#CCCCCC">can</font><font color="#E5E5E5"> kind of get</font><font color="#CCCCCC"> an idea of how mature is</font>

491
00:18:59,510 --> 00:19:10,220
our code some code may be very infantile

492
00:19:02,740 --> 00:19:11,750
some code may be very very mature what

493
00:19:10,220 --> 00:19:13,220
this<font color="#E5E5E5"> allows</font><font color="#CCCCCC"> us to do is this</font><font color="#E5E5E5"> is actually</font>

494
00:19:11,750 --> 00:19:14,809
<font color="#CCCCCC">something we can use to</font><font color="#E5E5E5"> look at</font>

495
00:19:13,220 --> 00:19:16,429
historically again as<font color="#E5E5E5"> I said looking at</font>

496
00:19:14,809 --> 00:19:18,710
vulnerability<font color="#CCCCCC"> counsel storica</font><font color="#E5E5E5"> Lee tells</font>

497
00:19:16,429 --> 00:19:20,840
us nothing if anything<font color="#E5E5E5"> just</font><font color="#CCCCCC"> tells</font><font color="#E5E5E5"> us</font>

498
00:19:18,710 --> 00:19:22,880
maybe how much focus the application cut

499
00:19:20,840 --> 00:19:24,470
but if we look<font color="#CCCCCC"> at the types of</font>

500
00:19:22,880 --> 00:19:26,600
vulnerabilities being discovered and how

501
00:19:24,470 --> 00:19:28,580
simple they are how complex they are we

502
00:19:26,600 --> 00:19:30,590
can actually<font color="#E5E5E5"> go in and see a trend for a</font>

503
00:19:28,580 --> 00:19:32,330
specific product we can<font color="#E5E5E5"> even go in and</font>

504
00:19:30,590 --> 00:19:34,070
pay<font color="#CCCCCC"> to evaluate two different products</font>

505
00:19:32,330 --> 00:19:35,870
that even receive different research of

506
00:19:34,070 --> 00:19:39,309
focus and we can<font color="#E5E5E5"> even look at different</font>

507
00:19:35,870 --> 00:19:39,309
components for the same product

508
00:19:40,330 --> 00:19:44,780
so for this presentation<font color="#E5E5E5"> obviously we do</font>

509
00:19:42,860 --> 00:19:46,189
have to have some type<font color="#CCCCCC"> of scoring so</font>

510
00:19:44,780 --> 00:19:48,290
what we do here is simply<font color="#E5E5E5"> scroll the</font>

511
00:19:46,190 --> 00:19:50,090
vulnerabilities based on how simple do

512
00:19:48,290 --> 00:19:51,980
we consider<font color="#E5E5E5"> vulnerabilities to be as i</font>

513
00:19:50,090 --> 00:19:55,220
said we find the simple ones first the

514
00:19:51,980 --> 00:19:58,040
complex<font color="#E5E5E5"> later from a vendor standpoint</font>

515
00:19:55,220 --> 00:19:59,780
it's also easier to prevent introducing

516
00:19:58,040 --> 00:20:01,550
simple vulnerabilities or find them

517
00:19:59,780 --> 00:20:03,950
during our development process then

518
00:20:01,550 --> 00:20:06,440
<font color="#E5E5E5">later on if you're using automatic</font>

519
00:20:03,950 --> 00:20:08,750
source code editing tools they will<font color="#CCCCCC"> also</font>

520
00:20:06,440 --> 00:20:10,340
<font color="#E5E5E5">have a higher success rate for weeding</font>

521
00:20:08,750 --> 00:20:14,480
out the simple vulnerabilities<font color="#CCCCCC"> then the</font>

522
00:20:10,340 --> 00:20:16,790
more complex vulnerabilities so that all

523
00:20:14,480 --> 00:20:18,140
make sense so when I say<font color="#E5E5E5"> that we find</font>

524
00:20:16,790 --> 00:20:20,149
the simple on abilities before the

525
00:20:18,140 --> 00:20:21,800
complex one<font color="#CCCCCC"> makes sense from a source</font>

526
00:20:20,150 --> 00:20:23,150
<font color="#CCCCCC">coding perspective makes sense from</font><font color="#E5E5E5"> a</font>

527
00:20:21,800 --> 00:20:24,919
reversing perspective but doesn't make

528
00:20:23,150 --> 00:20:26,480
sense from a passing perspective because

529
00:20:24,920 --> 00:20:28,730
you might say well<font color="#E5E5E5"> if I'm fussing just</font>

530
00:20:26,480 --> 00:20:30,380
throwing random input at my application

531
00:20:28,730 --> 00:20:32,900
so should we<font color="#CCCCCC"> just get Brandon</font>

532
00:20:30,380 --> 00:20:35,420
vulnerability classes returned but what

533
00:20:32,900 --> 00:20:37,040
we also see here is that<font color="#E5E5E5"> we are actually</font>

534
00:20:35,420 --> 00:20:38,780
getting the simple vulnerabilities first

535
00:20:37,040 --> 00:20:41,659
we<font color="#CCCCCC"> are also seeing that the fosters are</font>

536
00:20:38,780 --> 00:20:44,300
ramped up in complexity as they need to

537
00:20:41,660 --> 00:20:45,890
<font color="#CCCCCC">be so many years</font><font color="#E5E5E5"> ago when people already</font>

538
00:20:44,300 --> 00:20:49,129
<font color="#E5E5E5">Internet Explorer we were</font><font color="#CCCCCC"> just passing</font>

539
00:20:45,890 --> 00:20:52,220
long input see what happens<font color="#CCCCCC"> okay then we</font>

540
00:20:49,130 --> 00:20:54,100
started passing different values instead

541
00:20:52,220 --> 00:20:57,290
to see if you can three integer overflow

542
00:20:54,100 --> 00:20:58,820
vulnerabilities now IE fascist actually

543
00:20:57,290 --> 00:21:00,678
very<font color="#CCCCCC"> very complex</font><font color="#E5E5E5"> and start actually</font>

544
00:20:58,820 --> 00:21:02,629
manipulating the whole markup to see if

545
00:21:00,679 --> 00:21:04,550
we can get it into some state we're

546
00:21:02,630 --> 00:21:06,080
removing something from the<font color="#CCCCCC"> markup but</font>

547
00:21:04,550 --> 00:21:08,059
we actually still referencing it and

548
00:21:06,080 --> 00:21:10,330
that way we can trigger more complex use

549
00:21:08,059 --> 00:21:13,370
of the free vulnerabilities for instance

550
00:21:10,330 --> 00:21:14,809
so far as are coming a long way and it's

551
00:21:13,370 --> 00:21:16,669
because they have to come a long way

552
00:21:14,809 --> 00:21:19,760
<font color="#E5E5E5">because we are weeding out the simple</font>

553
00:21:16,670 --> 00:21:21,320
vulnerability so we need to ramp up so

554
00:21:19,760 --> 00:21:24,440
if you should do some scoring then we

555
00:21:21,320 --> 00:21:26,870
have different levels level<font color="#CCCCCC"> 0 that's</font>

556
00:21:24,440 --> 00:21:28,160
like that's then we're talking 1990s

557
00:21:26,870 --> 00:21:29,928
those are the simple ones that's the

558
00:21:28,160 --> 00:21:31,610
classic buffer overflows caused by

559
00:21:29,929 --> 00:21:33,950
<font color="#E5E5E5">stream car be a sprinter if these types</font>

560
00:21:31,610 --> 00:21:35,750
of AP<font color="#E5E5E5"> is for mastering vulnerabilities</font>

561
00:21:33,950 --> 00:21:37,340
where we just passed a<font color="#CCCCCC"> former specifying</font>

562
00:21:35,750 --> 00:21:40,360
us input we just passed a long string in

563
00:21:37,340 --> 00:21:43,760
ass input and then the application buffs

564
00:21:40,360 --> 00:21:45,199
at level<font color="#E5E5E5"> 1 we try to make just</font><font color="#CCCCCC"> a bit of</font>

565
00:21:43,760 --> 00:21:47,300
<font color="#CCCCCC">an</font><font color="#E5E5E5"> effort and we actually start using</font>

566
00:21:45,200 --> 00:21:49,970
the excise arguments to somehow leave it

567
00:21:47,300 --> 00:21:50,629
out limit our input but we<font color="#CCCCCC"> still get it</font>

568
00:21:49,970 --> 00:21:52,520
wrong

569
00:21:50,630 --> 00:21:54,440
it's<font color="#CCCCCC"> also where we have array indexing</font>

570
00:21:52,520 --> 00:21:57,139
errors at level<font color="#CCCCCC"> two we start getting</font>

571
00:21:54,440 --> 00:21:58,910
integer or flows under flows type

572
00:21:57,140 --> 00:22:01,130
conversion<font color="#CCCCCC"> vulnerabilities so where we</font>

573
00:21:58,910 --> 00:22:03,230
need to pass specific values within a

574
00:22:01,130 --> 00:22:06,350
certain range to trigger these

575
00:22:03,230 --> 00:22:07,940
arithmetic<font color="#CCCCCC"> errors level three we're now</font>

576
00:22:06,350 --> 00:22:09,830
looking at more complex types we have

577
00:22:07,940 --> 00:22:12,290
initialized variables use after three

578
00:22:09,830 --> 00:22:14,899
double V object I confusion different

579
00:22:12,290 --> 00:22:17,030
types of vulnerabilities that I'm<font color="#E5E5E5"> not</font>

580
00:22:14,900 --> 00:22:18,500
necessarily<font color="#E5E5E5"> that easy to trigger we need</font>

581
00:22:17,030 --> 00:22:20,810
to get the application in a certain

582
00:22:18,500 --> 00:22:23,060
state we<font color="#E5E5E5"> usually cannot just pass a long</font>

583
00:22:20,810 --> 00:22:24,919
string and get it into this state label

584
00:22:23,060 --> 00:22:26,570
for currently<font color="#CCCCCC"> it's just reserved for</font>

585
00:22:24,920 --> 00:22:30,500
like extra complex vulnerabilities that

586
00:22:26,570 --> 00:22:32,060
didn't fit into the level<font color="#CCCCCC"> three so this</font>

587
00:22:30,500 --> 00:22:34,550
<font color="#E5E5E5">is pretty basic so if we have a level</font>

588
00:22:32,060 --> 00:22:36,020
one type<font color="#E5E5E5"> on ability it gets uh scoffs it</font>

589
00:22:34,550 --> 00:22:37,639
gets us co-op one if it's a<font color="#E5E5E5"> little</font>

590
00:22:36,020 --> 00:22:39,050
circuit to score zero it's very very

591
00:22:37,640 --> 00:22:40,940
basic but<font color="#E5E5E5"> it actually gets the job done</font>

592
00:22:39,050 --> 00:22:43,700
I'm sure someone could come up<font color="#E5E5E5"> with</font>

593
00:22:40,940 --> 00:22:46,520
something terribly academic but we don't

594
00:22:43,700 --> 00:22:48,980
need it but i also like about this is

595
00:22:46,520 --> 00:22:51,290
the fact that we can<font color="#E5E5E5"> actually tie to cwe</font>

596
00:22:48,980 --> 00:22:54,110
so we have if we have the vulnerability

597
00:22:51,290 --> 00:22:55,940
type we can directly type attach<font color="#CCCCCC"> the</font>

598
00:22:54,110 --> 00:22:58,580
skull to<font color="#CCCCCC"> it so we will not have to sit</font>

599
00:22:55,940 --> 00:23:00,080
in calculate it ourselves ourselves so

600
00:22:58,580 --> 00:23:01,970
if a vendor was telling us<font color="#E5E5E5"> this is a use</font>

601
00:23:00,080 --> 00:23:06,590
of the free vulnerability okay<font color="#E5E5E5"> great</font>

602
00:23:01,970 --> 00:23:10,040
<font color="#CCCCCC">tenzie level 3 vulnerability if we want</font>

603
00:23:06,590 --> 00:23:12,409
to then evaluate a product or so I have

604
00:23:10,040 --> 00:23:13,970
another additional skull that I'm using

605
00:23:12,410 --> 00:23:15,470
because again this is not<font color="#E5E5E5"> how it always</font>

606
00:23:13,970 --> 00:23:17,120
work generally use after free

607
00:23:15,470 --> 00:23:20,450
vulnerability would be more complex

608
00:23:17,120 --> 00:23:22,129
require like more complex ways of

609
00:23:20,450 --> 00:23:23,780
triggering it but sometimes passing an

610
00:23:22,130 --> 00:23:26,030
<font color="#CCCCCC">overly</font><font color="#E5E5E5"> long string may actually be</font>

611
00:23:23,780 --> 00:23:28,550
enough to trigger this vulnerability so

612
00:23:26,030 --> 00:23:30,290
since it's so easy to trigger then<font color="#E5E5E5"> okay</font>

613
00:23:28,550 --> 00:23:32,090
it might be difficult to spot it in

614
00:23:30,290 --> 00:23:34,550
vanilla looking statically at the code

615
00:23:32,090 --> 00:23:35,720
but when<font color="#E5E5E5"> you were doing dynamic testing</font>

616
00:23:34,550 --> 00:23:37,460
of<font color="#CCCCCC"> your application you should have</font>

617
00:23:35,720 --> 00:23:39,440
spotted this because it's a pretty

618
00:23:37,460 --> 00:23:42,950
simple issue so then we<font color="#CCCCCC"> may go in and</font>

619
00:23:39,440 --> 00:23:45,620
actually decrease like decrement the

620
00:23:42,950 --> 00:23:49,010
skull if it's more complex we couldn't

621
00:23:45,620 --> 00:23:51,260
comment it when we evaluate a whole

622
00:23:49,010 --> 00:23:53,420
product we just count this course number

623
00:23:51,260 --> 00:23:56,440
vulnerabilities we covered calculate the

624
00:23:53,420 --> 00:23:59,060
average so let's look<font color="#CCCCCC"> at some examples</font>

625
00:23:56,440 --> 00:24:01,610
this is our office<font color="#E5E5E5"> 2000 specific</font>

626
00:23:59,060 --> 00:24:02,918
vulnerability so it doesn't affect later

627
00:24:01,610 --> 00:24:05,590
versions of office

628
00:24:02,919 --> 00:24:09,460
it was one actually discovered by me it

629
00:24:05,590 --> 00:24:11,470
was fixed in in may 2009<font color="#E5E5E5"> it's a buffer</font>

630
00:24:09,460 --> 00:24:13,450
overflow in<font color="#E5E5E5"> PowerPoint when passing</font>

631
00:24:11,470 --> 00:24:18,609
<font color="#CCCCCC">usernames in specific record called the</font>

632
00:24:13,450 --> 00:24:20,619
current user Adam this<font color="#CCCCCC"> is how the record</font>

633
00:24:18,609 --> 00:24:22,090
is defined the one we really care<font color="#E5E5E5"> about</font>

634
00:24:20,619 --> 00:24:24,009
of all these values is the one<font color="#E5E5E5"> called</font>

635
00:24:22,090 --> 00:24:26,168
then<font color="#E5E5E5"> username that's actually a size</font>

636
00:24:24,009 --> 00:24:29,799
<font color="#CCCCCC">ferry that</font><font color="#E5E5E5"> tells us how long is the</font>

637
00:24:26,169 --> 00:24:32,710
username in this record so what<font color="#CCCCCC"> happened</font>

638
00:24:29,799 --> 00:24:35,590
when we opened a document in in power

639
00:24:32,710 --> 00:24:37,929
point was that we would eventually use

640
00:24:35,590 --> 00:24:40,090
an open<font color="#E5E5E5"> specific stream in our file</font>

641
00:24:37,929 --> 00:24:43,359
called the current user stream and then

642
00:24:40,090 --> 00:24:46,029
we would check is does it contain your

643
00:24:43,359 --> 00:24:48,489
current user Adam if it did we would get

644
00:24:46,029 --> 00:24:50,739
the size of<font color="#CCCCCC"> that</font><font color="#E5E5E5"> Adam check it and we</font>

645
00:24:48,489 --> 00:24:55,090
will also take a specific magic value to

646
00:24:50,739 --> 00:24:56,559
see if it was<font color="#CCCCCC"> a normal ppt file if all</font>

647
00:24:55,090 --> 00:24:59,499
that made sense then we would<font color="#CCCCCC"> actually</font>

648
00:24:56,559 --> 00:25:01,869
get the<font color="#CCCCCC"> Len username value from our file</font>

649
00:24:59,499 --> 00:25:03,730
and we would call a function called see

650
00:25:01,869 --> 00:25:06,039
<font color="#E5E5E5">expose dream read which basically just</font>

651
00:25:03,730 --> 00:25:08,409
reads data in from our file into a

652
00:25:06,039 --> 00:25:10,840
buffer that supplied the problem here

653
00:25:08,409 --> 00:25:12,970
was that that buffer<font color="#E5E5E5"> was a 256 byte</font>

654
00:25:10,840 --> 00:25:15,158
stack buffer but<font color="#E5E5E5"> this size we were</font>

655
00:25:12,970 --> 00:25:17,590
passing to this function was taken from

656
00:25:15,159 --> 00:25:19,359
our file since we didn't<font color="#E5E5E5"> valuate that</font>

657
00:25:17,590 --> 00:25:20,859
size it could be overly large and we

658
00:25:19,359 --> 00:25:24,249
would<font color="#E5E5E5"> be trading a basic stack-based</font>

659
00:25:20,859 --> 00:25:25,899
buffer<font color="#E5E5E5"> or flow so in this case it's a</font>

660
00:25:24,249 --> 00:25:28,840
copy function just<font color="#E5E5E5"> using incorrect size</font>

661
00:25:25,899 --> 00:25:36,418
so<font color="#CCCCCC"> we would assign a code maturity score</font>

662
00:25:28,840 --> 00:25:42,399
of<font color="#CCCCCC"> 1 anyone used</font><font color="#E5E5E5"> novel I pin client no</font>

663
00:25:36,419 --> 00:25:44,379
good choice you'll see why so just to

664
00:25:42,399 --> 00:25:45,908
see how we can look<font color="#E5E5E5"> at it so we looked</font>

665
00:25:44,379 --> 00:25:47,709
at a lot of on ability<font color="#E5E5E5"> to novel I pin</font>

666
00:25:45,909 --> 00:25:49,720
client from two thousand eight and<font color="#CCCCCC"> up to</font>

667
00:25:47,710 --> 00:25:51,100
now this<font color="#CCCCCC"> is just to show you how</font><font color="#E5E5E5"> like</font>

668
00:25:49,720 --> 00:25:52,749
the types of vulnerabilities you'll see

669
00:25:51,100 --> 00:25:54,730
in a<font color="#E5E5E5"> product and our way to do it like</font>

670
00:25:52,749 --> 00:25:58,210
spoil an hour and<font color="#E5E5E5"> say this is a product</font>

671
00:25:54,730 --> 00:25:59,559
that doesn't implement sdl so basically

672
00:25:58,210 --> 00:26:00,879
<font color="#E5E5E5">we just go</font><font color="#CCCCCC"> through all the different</font>

673
00:25:59,559 --> 00:26:03,489
<font color="#E5E5E5">types of vulnerabilities being</font>

674
00:26:00,879 --> 00:26:06,100
discovered in this<font color="#E5E5E5"> product and then we</font>

675
00:26:03,489 --> 00:26:07,779
assign scores to each vulnerability like

676
00:26:06,100 --> 00:26:10,119
we have some mem copy functions that are

677
00:26:07,779 --> 00:26:12,249
using incorrect size in this case but we

678
00:26:10,119 --> 00:26:13,869
actually assigned a score 4-0 normally

679
00:26:12,249 --> 00:26:15,490
would get them a<font color="#CCCCCC"> 1 but since they just</font>

680
00:26:13,869 --> 00:26:18,309
use the length of the sauce

681
00:26:15,490 --> 00:26:19,540
<font color="#CCCCCC">patha and just blankly trust that well</font>

682
00:26:18,309 --> 00:26:21,280
then it's really just like a normal

683
00:26:19,540 --> 00:26:22,720
classic buffer overflow vulnerability so

684
00:26:21,280 --> 00:26:25,090
this is a case<font color="#CCCCCC"> of us actually pulling</font>

685
00:26:22,720 --> 00:26:27,790
down the<font color="#CCCCCC"> skull one because yeah they</font>

686
00:26:25,090 --> 00:26:29,139
didn't<font color="#E5E5E5"> really make an effort so the</font><font color="#CCCCCC"> only</font>

687
00:26:27,790 --> 00:26:31,389
one of all these vulnerabilities here

688
00:26:29,140 --> 00:26:34,150
that gets one<font color="#E5E5E5"> point</font><font color="#CCCCCC"> is an unsafe method</font>

689
00:26:31,390 --> 00:26:37,030
because it wasn't data obvious all the

690
00:26:34,150 --> 00:26:41,860
others<font color="#E5E5E5"> I get a score of zero look at</font>

691
00:26:37,030 --> 00:26:43,210
2009 we again score zero 2010<font color="#E5E5E5"> the only</font>

692
00:26:41,860 --> 00:26:47,050
one that gets three points in the

693
00:26:43,210 --> 00:26:49,990
uninitialized pointer 2011 more<font color="#CCCCCC"> strain</font>

694
00:26:47,050 --> 00:26:51,879
copies again 2011 we are looking at very

695
00:26:49,990 --> 00:26:56,500
very basic vulnerabilities now here in

696
00:26:51,880 --> 00:26:58,840
even 2011 this product 2012 we have<font color="#E5E5E5"> two</font>

697
00:26:56,500 --> 00:27:00,450
uninitialized stack variables normally

698
00:26:58,840 --> 00:27:02,409
we would give<font color="#E5E5E5"> them three ask all three</font>

699
00:27:00,450 --> 00:27:03,940
unfortunately these can actually be

700
00:27:02,410 --> 00:27:05,980
triggered by just an overly long string

701
00:27:03,940 --> 00:27:08,160
so we would recommend a disco and ended

702
00:27:05,980 --> 00:27:10,630
up with four points two for each of them

703
00:27:08,160 --> 00:27:13,240
so if you<font color="#CCCCCC"> look</font><font color="#E5E5E5"> at this all together then</font>

704
00:27:10,630 --> 00:27:16,780
I print client version<font color="#CCCCCC"> 4 had a code</font>

705
00:27:13,240 --> 00:27:18,640
immaturity score of 0 point 0 5 version

706
00:27:16,780 --> 00:27:21,520
5 have<font color="#CCCCCC"> won this</font><font color="#E5E5E5"> a bit but at this point</font>

707
00:27:18,640 --> 00:27:23,740
22 so what does basically tells us is

708
00:27:21,520 --> 00:27:26,740
<font color="#E5E5E5">it's riddled with very very basic</font>

709
00:27:23,740 --> 00:27:29,590
vulnerabilities even today so clearly

710
00:27:26,740 --> 00:27:31,390
for novel I print that's no real<font color="#CCCCCC"> stl in</font>

711
00:27:29,590 --> 00:27:32,500
place and that way of dealing with

712
00:27:31,390 --> 00:27:35,110
vulnerabilities in this part is

713
00:27:32,500 --> 00:27:36,730
completely reactionary it's just when

714
00:27:35,110 --> 00:27:38,199
vulnerabilities are reported we fix it

715
00:27:36,730 --> 00:27:40,690
that's been absolutely no attempts of

716
00:27:38,200 --> 00:27:43,510
actually securing this code even<font color="#CCCCCC"> a very</font>

717
00:27:40,690 --> 00:27:44,800
very basic sdl would have prevented many

718
00:27:43,510 --> 00:27:48,910
of the vulnerabilities that we just

719
00:27:44,800 --> 00:27:51,970
looked at<font color="#CCCCCC"> their there so when we look at</font>

720
00:27:48,910 --> 00:27:53,980
<font color="#E5E5E5">office</font><font color="#CCCCCC"> have they made a difference</font>

721
00:27:51,970 --> 00:27:55,690
because<font color="#E5E5E5"> the example of the office 2000</font>

722
00:27:53,980 --> 00:27:57,250
availability<font color="#E5E5E5"> I just showed you that's a</font>

723
00:27:55,690 --> 00:27:58,630
pretty<font color="#E5E5E5"> good example active the types of</font>

724
00:27:57,250 --> 00:28:02,559
vulnerabilities we were seeing in office

725
00:27:58,630 --> 00:28:03,940
2000 XP back in the day usually<font color="#CCCCCC"> a size</font>

726
00:28:02,559 --> 00:28:06,280
where we would<font color="#E5E5E5"> just be very straight in</font>

727
00:28:03,940 --> 00:28:10,660
from file and be used for to do some

728
00:28:06,280 --> 00:28:12,370
copy operation so what we did it<font color="#E5E5E5"> was a</font>

729
00:28:10,660 --> 00:28:14,980
big task is that we<font color="#CCCCCC"> actually gone</font>

730
00:28:12,370 --> 00:28:15,909
through from around 2007 up to today

731
00:28:14,980 --> 00:28:18,010
<font color="#CCCCCC">we've gone through a lot of</font>

732
00:28:15,910 --> 00:28:20,800
<font color="#E5E5E5">vulnerabilities being reported in office</font>

733
00:28:18,010 --> 00:28:22,720
and then we sold it out what was the

734
00:28:20,800 --> 00:28:24,070
core problem<font color="#E5E5E5"> like that's why</font><font color="#CCCCCC"> I like</font><font color="#E5E5E5"> to</font>

735
00:28:22,720 --> 00:28:26,440
call myself a vulnerability connoisseur

736
00:28:24,070 --> 00:28:28,159
because I find it terribly interesting

737
00:28:26,440 --> 00:28:29,720
to find out why to vulnerability

738
00:28:28,160 --> 00:28:31,160
<font color="#CCCCCC">happened what are the core problems like</font>

739
00:28:29,720 --> 00:28:32,780
I can't use the term<font color="#E5E5E5"> memory corruption</font>

740
00:28:31,160 --> 00:28:34,640
for anything because that's too general

741
00:28:32,780 --> 00:28:37,070
offshore flow to jail I won't know

742
00:28:34,640 --> 00:28:38,450
exactly what went wrong because then we

743
00:28:37,070 --> 00:28:40,970
can also<font color="#E5E5E5"> look at how can we make things</font>

744
00:28:38,450 --> 00:28:42,560
better so<font color="#CCCCCC"> we went through a very very</font>

745
00:28:40,970 --> 00:28:44,120
long list<font color="#E5E5E5"> of products the only one that</font>

746
00:28:42,560 --> 00:28:49,520
has a slightly<font color="#E5E5E5"> low</font><font color="#CCCCCC"> dataset is office</font>

747
00:28:44,120 --> 00:28:52,070
2010 and our results<font color="#E5E5E5"> was this the office</font>

748
00:28:49,520 --> 00:28:54,400
2000 and XP we can see that<font color="#E5E5E5"> the vast</font>

749
00:28:52,070 --> 00:28:56,899
majority vulnerabilities being reported

750
00:28:54,400 --> 00:28:58,580
were incorrect size copy so why we were

751
00:28:56,900 --> 00:29:01,760
<font color="#E5E5E5">doing some copy operation using the</font>

752
00:28:58,580 --> 00:29:03,199
incorrect size we<font color="#E5E5E5"> can see that for this</font>

753
00:29:01,760 --> 00:29:05,150
2000 the second most prevalent

754
00:29:03,200 --> 00:29:07,310
vulnerability type almost<font color="#E5E5E5"> twenty percent</font>

755
00:29:05,150 --> 00:29:08,990
array indexing<font color="#CCCCCC"> ours again a pretty basic</font>

756
00:29:07,310 --> 00:29:11,030
type of vulnerability that we will also

757
00:29:08,990 --> 00:29:14,090
classify in this case he has<font color="#CCCCCC"> a level</font><font color="#E5E5E5"> one</font>

758
00:29:11,030 --> 00:29:15,920
vulnerability we can see<font color="#E5E5E5"> that more than</font>

759
00:29:14,090 --> 00:29:18,379
<font color="#E5E5E5">ten percent of the vulnerabilities whack</font>

760
00:29:15,920 --> 00:29:23,120
<font color="#CCCCCC">city classic buffer overflows seducers</font>

761
00:29:18,380 --> 00:29:26,000
drink<font color="#E5E5E5"> RBS printf these types of AP is in</font>

762
00:29:23,120 --> 00:29:28,129
office XP no real significant difference

763
00:29:26,000 --> 00:29:29,570
except that now array indexing errors

764
00:29:28,130 --> 00:29:31,700
are no longer the second most prevalent

765
00:29:29,570 --> 00:29:33,590
vulnerability type it's instead of

766
00:29:31,700 --> 00:29:35,840
various arithmetic type vulnerabilities

767
00:29:33,590 --> 00:29:38,510
but again<font color="#E5E5E5"> almost ten percent of the</font>

768
00:29:35,840 --> 00:29:42,320
vulnerabilities classic buffer overflow

769
00:29:38,510 --> 00:29:44,330
vulnerabilities so in office 2003 as<font color="#E5E5E5"> I</font>

770
00:29:42,320 --> 00:29:46,280
said earlier<font color="#E5E5E5"> this is one of the versions</font>

771
00:29:44,330 --> 00:29:49,370
where<font color="#E5E5E5"> Microsoft then started focusing is</font>

772
00:29:46,280 --> 00:29:51,740
the bit on on the security state of the

773
00:29:49,370 --> 00:29:53,239
product we can see again we still have

774
00:29:51,740 --> 00:29:54,890
classic buffer overflow vulnerabilities

775
00:29:53,240 --> 00:29:58,280
in the application who reduced the

776
00:29:54,890 --> 00:30:00,230
number of copy operations using an

777
00:29:58,280 --> 00:30:02,540
incorrect size so now the most<font color="#E5E5E5"> prevalent</font>

778
00:30:00,230 --> 00:30:04,460
vulnerability types are rithmetic errors

779
00:30:02,540 --> 00:30:06,139
array indexing arrows but<font color="#CCCCCC"> immediately</font>

780
00:30:04,460 --> 00:30:09,410
<font color="#CCCCCC">looking at this no significant</font>

781
00:30:06,140 --> 00:30:11,930
difference so then of course comes the

782
00:30:09,410 --> 00:30:15,080
interesting part did<font color="#E5E5E5"> something change in</font>

783
00:30:11,930 --> 00:30:17,510
office 2007 2010 and we can see it

784
00:30:15,080 --> 00:30:19,220
actually<font color="#E5E5E5"> did</font><font color="#CCCCCC"> Microsoft or actually</font>

785
00:30:17,510 --> 00:30:24,410
successful reading out the classic

786
00:30:19,220 --> 00:30:26,420
buffer overflows incorrect copied our

787
00:30:24,410 --> 00:30:28,970
copies using an incorrect size will also

788
00:30:26,420 --> 00:30:31,010
reduce quite a bit but we see that

789
00:30:28,970 --> 00:30:34,850
arithmetic errors<font color="#CCCCCC"> were still a big</font>

790
00:30:31,010 --> 00:30:36,620
<font color="#CCCCCC">problem so even though</font><font color="#E5E5E5"> we were talking</font>

791
00:30:34,850 --> 00:30:38,449
about<font color="#E5E5E5"> AP</font><font color="#CCCCCC"> is that you protect against</font>

792
00:30:36,620 --> 00:30:39,639
<font color="#E5E5E5">these we can see they were</font><font color="#CCCCCC"> not really</font>

793
00:30:38,450 --> 00:30:40,960
implemented at

794
00:30:39,640 --> 00:30:44,080
point at<font color="#CCCCCC"> least they weren't using them</font>

795
00:30:40,960 --> 00:30:46,150
very well so the most<font color="#E5E5E5"> prevalent</font>

796
00:30:44,080 --> 00:30:49,000
vulnerability type in 2007 were

797
00:30:46,150 --> 00:30:52,300
arithmetic type vulnerabilities however

798
00:30:49,000 --> 00:30:56,080
in office 2010 that<font color="#CCCCCC"> certainly</font><font color="#E5E5E5"> decreased</font>

799
00:30:52,300 --> 00:30:58,990
so now<font color="#CCCCCC"> the</font><font color="#E5E5E5"> both copies using incorrect</font>

800
00:30:56,080 --> 00:31:01,570
sizes array indexing errors arithmetic

801
00:30:58,990 --> 00:31:05,230
error so our level<font color="#CCCCCC"> Cyril vulnerabilities</font>

802
00:31:01,570 --> 00:31:06,790
are completely out our level one

803
00:31:05,230 --> 00:31:10,300
vulnerability have been reduced around

804
00:31:06,790 --> 00:31:12,070
eight percent arithmetic type

805
00:31:10,300 --> 00:31:13,810
vulnerabilities label too vulnerable

806
00:31:12,070 --> 00:31:15,070
have been reduced<font color="#E5E5E5"> down to also around</font>

807
00:31:13,810 --> 00:31:16,720
eight percent and we can see now the

808
00:31:15,070 --> 00:31:18,220
most<font color="#E5E5E5"> prevalent vulnerability types i</font>

809
00:31:16,720 --> 00:31:19,560
actually like object type confusion

810
00:31:18,220 --> 00:31:21,880
vulnerabilities use-after-free

811
00:31:19,560 --> 00:31:24,550
<font color="#CCCCCC">vulnerabilities so more complex</font>

812
00:31:21,880 --> 00:31:27,880
vulnerabilities so that's<font color="#CCCCCC"> really</font>

813
00:31:24,550 --> 00:31:29,800
interesting<font color="#E5E5E5"> because we can</font><font color="#CCCCCC"> see few of</font>

814
00:31:27,880 --> 00:31:31,330
these vulnerabilities were found back<font color="#E5E5E5"> in</font>

815
00:31:29,800 --> 00:31:32,710
the day now a lot of<font color="#E5E5E5"> them</font><font color="#CCCCCC"> are being</font>

816
00:31:31,330 --> 00:31:34,629
found but that's also to a certain

817
00:31:32,710 --> 00:31:36,190
extent some carryover some of the

818
00:31:34,630 --> 00:31:40,870
integer workflows being found in office

819
00:31:36,190 --> 00:31:44,140
2010 maybe vulnerabilities that was

820
00:31:40,870 --> 00:31:47,679
inherited from some code from 2007 2003

821
00:31:44,140 --> 00:31:50,290
XP and so on so<font color="#CCCCCC"> what</font><font color="#E5E5E5"> is also a bit</font>

822
00:31:47,680 --> 00:31:51,850
interesting is to see so if you look<font color="#E5E5E5"> at</font>

823
00:31:50,290 --> 00:31:53,800
<font color="#CCCCCC">the code maturity here first we can see</font>

824
00:31:51,850 --> 00:31:55,419
that was<font color="#E5E5E5"> actually an increase it might</font>

825
00:31:53,800 --> 00:31:56,950
<font color="#E5E5E5">not look terribly significant but</font>

826
00:31:55,420 --> 00:31:59,200
considering<font color="#CCCCCC"> that we are</font><font color="#E5E5E5"> going from 0 to</font>

827
00:31:56,950 --> 00:32:01,480
<font color="#E5E5E5">3 they were</font><font color="#CCCCCC"> actually making some changes</font>

828
00:31:59,200 --> 00:32:03,520
if we're looking<font color="#CCCCCC"> at office XP in 2000 we</font>

829
00:32:01,480 --> 00:32:05,170
can see<font color="#E5E5E5"> were bounded 1.5 mark which</font>

830
00:32:03,520 --> 00:32:08,200
means that yeah we were looking<font color="#E5E5E5"> at some</font>

831
00:32:05,170 --> 00:32:12,160
<font color="#E5E5E5">fairly basic vulnerabilities 2003 not a</font>

832
00:32:08,200 --> 00:32:14,700
big difference but office 2007 2010

833
00:32:12,160 --> 00:32:17,200
they've actually been able to like

834
00:32:14,700 --> 00:32:19,030
heightened the the quality of their code

835
00:32:17,200 --> 00:32:21,070
basically if<font color="#E5E5E5"> they hadn't</font><font color="#CCCCCC"> made stop</font>

836
00:32:19,030 --> 00:32:22,750
terribly in office 2010<font color="#E5E5E5"> by introducing</font>

837
00:32:21,070 --> 00:32:26,830
two simple vulnerabilities the<font color="#CCCCCC"> score</font>

838
00:32:22,750 --> 00:32:29,890
here<font color="#E5E5E5"> would actually</font><font color="#CCCCCC"> been 2.5 so again</font>

839
00:32:26,830 --> 00:32:31,240
<font color="#E5E5E5">but as I was saying earlier that's</font>

840
00:32:29,890 --> 00:32:33,640
interesting to see these are the types

841
00:32:31,240 --> 00:32:35,080
of vulnerabilities being found but which

842
00:32:33,640 --> 00:32:39,220
types of vulnerabilities that we also

843
00:32:35,080 --> 00:32:41,080
see being introduced in<font color="#CCCCCC"> the new code so</font>

844
00:32:39,220 --> 00:32:42,670
how which vulnerability types are carry

845
00:32:41,080 --> 00:32:45,040
our vulnerabilities which ones are being

846
00:32:42,670 --> 00:32:48,010
implied introduced in<font color="#CCCCCC"> the new code and</font>

847
00:32:45,040 --> 00:32:50,139
if<font color="#E5E5E5"> we look at office 2010 then that's</font>

848
00:32:48,010 --> 00:32:53,080
actually only caused by one or

849
00:32:50,140 --> 00:32:55,030
office 2010 only vulnerability so far so

850
00:32:53,080 --> 00:32:56,919
try a disappointing to see that it's a

851
00:32:55,030 --> 00:33:00,520
very<font color="#CCCCCC"> very classic pretty escalation</font>

852
00:32:56,920 --> 00:33:01,900
vulnerability seems like it was someone

853
00:33:00,520 --> 00:33:03,250
on the<font color="#CCCCCC"> Chinese</font><font color="#E5E5E5"> part of the team that</font>

854
00:33:01,900 --> 00:33:05,380
dropped the<font color="#E5E5E5"> ball though because it only</font>

855
00:33:03,250 --> 00:33:06,940
affects the Chinese versions but

856
00:33:05,380 --> 00:33:08,470
basically there's one of those classic

857
00:33:06,940 --> 00:33:11,290
vulnerabilities where you have some

858
00:33:08,470 --> 00:33:12,880
window and local user on the system

859
00:33:11,290 --> 00:33:15,100
could just start<font color="#E5E5E5"> burning various</font>

860
00:33:12,880 --> 00:33:17,140
commands with system privileges so basic

861
00:33:15,100 --> 00:33:19,060
very<font color="#CCCCCC"> basic vulnerability that you don't</font>

862
00:33:17,140 --> 00:33:24,160
<font color="#CCCCCC">really want to see in a</font><font color="#E5E5E5"> product this</font>

863
00:33:19,060 --> 00:33:26,470
like this time and age for office 2007

864
00:33:24,160 --> 00:33:29,740
we were seeing there to do<font color="#CCCCCC"> some logic</font>

865
00:33:26,470 --> 00:33:31,630
errors and one of them was the fact that

866
00:33:29,740 --> 00:33:34,360
they did I accept some sanitization code

867
00:33:31,630 --> 00:33:36,610
in place but if they encounter<font color="#CCCCCC"> certain</font>

868
00:33:34,360 --> 00:33:39,070
negative<font color="#CCCCCC"> values they just didn't use it</font>

869
00:33:36,610 --> 00:33:40,570
it was<font color="#E5E5E5"> possible to completely bypass it</font>

870
00:33:39,070 --> 00:33:42,220
and then<font color="#E5E5E5"> suddenly you were taking values</font>

871
00:33:40,570 --> 00:33:44,620
from file actually<font color="#E5E5E5"> using it as object</font>

872
00:33:42,220 --> 00:33:46,330
pointers they've introduced an array

873
00:33:44,620 --> 00:33:49,149
indexing<font color="#CCCCCC"> error which is actually a</font>

874
00:33:46,330 --> 00:33:50,679
fairly simple vulnerability the last one

875
00:33:49,150 --> 00:33:52,120
we unfortunately didn't have time to

876
00:33:50,680 --> 00:33:54,310
completely go through and<font color="#CCCCCC"> find the core</font>

877
00:33:52,120 --> 00:33:56,439
problem<font color="#CCCCCC"> but due to CDI who coordinated</font>

878
00:33:54,310 --> 00:33:57,970
it it's not at<font color="#CCCCCC"> least a basic buffer</font>

879
00:33:56,440 --> 00:34:01,950
overflow vulnerability so it's some

880
00:33:57,970 --> 00:34:04,270
logic error if you look<font color="#E5E5E5"> at office 2007</font>

881
00:34:01,950 --> 00:34:05,800
2010 the<font color="#E5E5E5"> types of all abilities being</font>

882
00:34:04,270 --> 00:34:07,540
introduced like use after<font color="#E5E5E5"> three</font>

883
00:34:05,800 --> 00:34:09,610
vulnerabilities more complex types of

884
00:34:07,540 --> 00:34:11,440
vulnerabilities<font color="#E5E5E5"> uninitialized values</font>

885
00:34:09,610 --> 00:34:13,780
being used as on<font color="#CCCCCC"> arctic pointer so again</font>

886
00:34:11,440 --> 00:34:15,190
more complex where you're not just

887
00:34:13,780 --> 00:34:17,020
passing an all day long string you're

888
00:34:15,190 --> 00:34:19,270
not just<font color="#CCCCCC"> changing a specific size where</font>

889
00:34:17,020 --> 00:34:21,580
you XD gating office you're getting the

890
00:34:19,270 --> 00:34:23,620
application into a certain<font color="#E5E5E5"> state where</font>

891
00:34:21,580 --> 00:34:26,350
it's then triggering some error handling

892
00:34:23,620 --> 00:34:27,969
that just gets it wrong one of the last

893
00:34:26,350 --> 00:34:29,500
one abilities they introduced also was

894
00:34:27,969 --> 00:34:30,969
an insecure library loading

895
00:34:29,500 --> 00:34:34,600
vulnerability so that's a bit

896
00:34:30,969 --> 00:34:36,569
disappointing pretty basic one and

897
00:34:34,600 --> 00:34:38,860
actually if we<font color="#E5E5E5"> just look at another one</font>

898
00:34:36,570 --> 00:34:40,120
that's not the only insecure library

899
00:34:38,860 --> 00:34:44,649
learning vulnerability<font color="#CCCCCC"> mike's of things</font>

900
00:34:40,120 --> 00:34:46,899
which introduced because<font color="#E5E5E5"> icbms 1123 also</font>

901
00:34:44,649 --> 00:34:50,739
introduced an insecure library loading

902
00:34:46,899 --> 00:34:52,239
vulnerability in office 2003 2007 when

903
00:34:50,739 --> 00:34:55,928
the air support for the office file

904
00:34:52,239 --> 00:34:57,390
validation add-in quickly just so to go

905
00:34:55,929 --> 00:35:00,100
through what happens here in<font color="#E5E5E5"> this one</font>

906
00:34:57,390 --> 00:35:00,640
<font color="#E5E5E5">MSO de tiro is one of the core libraries</font>

907
00:35:00,100 --> 00:35:03,578
in

908
00:35:00,640 --> 00:35:06,279
this has some functionality to validate

909
00:35:03,579 --> 00:35:08,349
the storage of a file<font color="#E5E5E5"> being opened this</font>

910
00:35:06,279 --> 00:35:11,380
can occur via some included

911
00:35:08,349 --> 00:35:13,029
functionality or by loading an external

912
00:35:11,380 --> 00:35:15,970
library like the office five validation

913
00:35:13,029 --> 00:35:17,769
adding in this specific case if the<font color="#E5E5E5"> ad</font>

914
00:35:15,970 --> 00:35:20,379
and it was installed<font color="#E5E5E5"> on the system a</font>

915
00:35:17,769 --> 00:35:22,509
certain<font color="#CCCCCC"> check would be</font><font color="#E5E5E5"> to turn a path to</font>

916
00:35:20,380 --> 00:35:24,339
where the island<font color="#E5E5E5"> was located and it</font>

917
00:35:22,510 --> 00:35:27,130
would load that adding everything was

918
00:35:24,339 --> 00:35:28,779
good problem was if you<font color="#CCCCCC"> did not have</font>

919
00:35:27,130 --> 00:35:31,000
office five validation had installed on

920
00:35:28,779 --> 00:35:33,099
your system that<font color="#CCCCCC"> shake would return a</font>

921
00:35:31,000 --> 00:35:37,240
null string and it would<font color="#CCCCCC"> just be passed</font>

922
00:35:33,099 --> 00:35:38,859
to load library it seems like whoever

923
00:35:37,240 --> 00:35:40,180
made this code expected that if I'm

924
00:35:38,859 --> 00:35:41,769
passing a null string to load library

925
00:35:40,180 --> 00:35:44,558
nothing will have my gist<font color="#E5E5E5"> I won't load</font>

926
00:35:41,769 --> 00:35:46,750
anything problem is that's not how load

927
00:35:44,559 --> 00:35:49,000
library works what it actually does it

928
00:35:46,750 --> 00:35:51,039
it will look<font color="#CCCCCC"> for specific file extension</font>

929
00:35:49,000 --> 00:35:53,829
and if there's no file extension being

930
00:35:51,039 --> 00:35:55,900
passed it will append one so in this

931
00:35:53,829 --> 00:35:57,849
case it would have an<font color="#E5E5E5"> empty string so</font>

932
00:35:55,900 --> 00:36:00,910
it's like okay I'm gonna<font color="#E5E5E5"> paint dll and</font>

933
00:35:57,849 --> 00:36:02,799
<font color="#CCCCCC">I'm going to</font><font color="#E5E5E5"> search for that and since</font>

934
00:36:00,910 --> 00:36:04,509
that's a relative path will go through

935
00:36:02,799 --> 00:36:05,920
the<font color="#CCCCCC"> window</font><font color="#E5E5E5"> search order and eventually</font>

936
00:36:04,510 --> 00:36:07,450
<font color="#CCCCCC">will</font><font color="#E5E5E5"> also look in the directory where</font>

937
00:36:05,920 --> 00:36:09,759
you printed<font color="#CCCCCC"> open your powerpoint</font>

938
00:36:07,450 --> 00:36:11,470
document so in this case if someone

939
00:36:09,759 --> 00:36:13,750
opened the<font color="#CCCCCC"> PowerPoint document office</font>

940
00:36:11,470 --> 00:36:15,519
yeah but double-clicking it we would be

941
00:36:13,750 --> 00:36:18,970
checking if that same directory was

942
00:36:15,519 --> 00:36:20,950
including a file called dll if it did we

943
00:36:18,970 --> 00:36:23,049
would load that code into our process so

944
00:36:20,950 --> 00:36:24,578
allowing us to execute arbitrary code we

945
00:36:23,049 --> 00:36:26,859
didn't need fancy bar for flows we

946
00:36:24,579 --> 00:36:33,160
didn't need to bypass step or SLR we

947
00:36:26,859 --> 00:36:36,460
were just executing code directly if we

948
00:36:33,160 --> 00:36:37,509
look<font color="#E5E5E5"> at the stl conclusion we can see</font>

949
00:36:36,460 --> 00:36:38,440
that vulnerability are still present

950
00:36:37,509 --> 00:36:40,329
this is not groundbreaking

951
00:36:38,440 --> 00:36:42,400
vulnerabilities are still present they

952
00:36:40,329 --> 00:36:44,859
will continue to<font color="#E5E5E5"> be so even if you</font>

953
00:36:42,400 --> 00:36:47,470
implement a solid stl if we specifically

954
00:36:44,859 --> 00:36:49,119
look at<font color="#E5E5E5"> Microsoft we can see they have</font>

955
00:36:47,470 --> 00:36:51,189
<font color="#CCCCCC">actually been quite successful at</font>

956
00:36:49,119 --> 00:36:52,630
weeding out and preventing to

957
00:36:51,190 --> 00:36:53,980
introducing like the simple

958
00:36:52,630 --> 00:36:55,990
vulnerabilities we're not seeing classic

959
00:36:53,980 --> 00:36:59,619
<font color="#CCCCCC">buffalo's anymore in the applications</font>

960
00:36:55,990 --> 00:37:01,508
they are not introducing them they've

961
00:36:59,619 --> 00:37:03,279
also significantly reduced at least in

962
00:37:01,509 --> 00:37:05,289
the latest<font color="#E5E5E5"> office version the number of</font>

963
00:37:03,279 --> 00:37:07,930
arithmetic error so it seems like they

964
00:37:05,289 --> 00:37:09,670
these efforts are working what we can

965
00:37:07,930 --> 00:37:11,500
also see though is that they are<font color="#E5E5E5"> still</font>

966
00:37:09,670 --> 00:37:11,880
struggling with insecure library loading

967
00:37:11,500 --> 00:37:14,130
<font color="#E5E5E5">volland</font>

968
00:37:11,880 --> 00:37:16,259
these now these are very<font color="#E5E5E5"> very basic</font>

969
00:37:14,130 --> 00:37:18,119
vulnerabilities and ironically they were

970
00:37:16,259 --> 00:37:21,269
actually introduced in Microsoft's own

971
00:37:18,119 --> 00:37:23,789
book that they were using<font color="#E5E5E5"> to teach the</font>

972
00:37:21,269 --> 00:37:25,319
eight thousand plus engineers the

973
00:37:23,789 --> 00:37:29,130
problem was it's always been seen as a

974
00:37:25,319 --> 00:37:31,470
defense in depth<font color="#E5E5E5"> fix so it's not even in</font>

975
00:37:29,130 --> 00:37:33,630
the book it's not something they have<font color="#CCCCCC"> to</font>

976
00:37:31,470 --> 00:37:36,240
do but they encourage the developers to

977
00:37:33,630 --> 00:37:38,099
do it the reason was<font color="#E5E5E5"> that back in the</font>

978
00:37:36,240 --> 00:37:40,200
day<font color="#E5E5E5"> when they were writing this we</font>

979
00:37:38,099 --> 00:37:42,240
weren't aware that there<font color="#CCCCCC"> was this</font>

980
00:37:40,200 --> 00:37:43,828
specific attack vector for instance if<font color="#E5E5E5"> I</font>

981
00:37:42,240 --> 00:37:45,868
open<font color="#E5E5E5"> something of office year it was</font>

982
00:37:43,829 --> 00:37:47,369
<font color="#CCCCCC">actually pretty logical when HD Moore</font>

983
00:37:45,869 --> 00:37:48,990
started discussing this everyone really

984
00:37:47,369 --> 00:37:54,150
don't like huh why didn't we ever think

985
00:37:48,990 --> 00:37:56,399
about it so it's<font color="#CCCCCC"> very clear that</font>

986
00:37:54,150 --> 00:37:57,599
Microsoft are not<font color="#E5E5E5"> only still affected by</font>

987
00:37:56,400 --> 00:37:58,799
a lot of<font color="#CCCCCC"> these vulnerabilities the</font>

988
00:37:57,599 --> 00:38:00,269
products are<font color="#CCCCCC"> not only affected by these</font>

989
00:37:58,799 --> 00:38:02,369
vulnerabilities they are<font color="#E5E5E5"> actually still</font>

990
00:38:00,269 --> 00:38:04,348
introducing these vulnerabilities even

991
00:38:02,369 --> 00:38:06,329
now when<font color="#E5E5E5"> we now know this is a big</font>

992
00:38:04,349 --> 00:38:08,369
problem<font color="#E5E5E5"> and the irony is these</font>

993
00:38:06,329 --> 00:38:11,009
vulnerabilities are first of all fairly

994
00:38:08,369 --> 00:38:14,579
easy<font color="#E5E5E5"> to spot in the code and they are</font>

995
00:38:11,009 --> 00:38:16,769
terribly easy<font color="#E5E5E5"> to spot via dynamic</font>

996
00:38:14,579 --> 00:38:18,599
testing it's<font color="#E5E5E5"> very easy to see because</font>

997
00:38:16,769 --> 00:38:20,578
especially just open your application

998
00:38:18,599 --> 00:38:22,589
<font color="#CCCCCC">check which files are searching for if</font>

999
00:38:20,579 --> 00:38:24,269
it's searching for libraries with using

1000
00:38:22,589 --> 00:38:26,519
relative paths in your current working

1001
00:38:24,269 --> 00:38:28,439
directory you have a problem<font color="#E5E5E5"> this</font>

1002
00:38:26,519 --> 00:38:29,910
<font color="#CCCCCC">powerpoint case I showed you they would</font>

1003
00:38:28,440 --> 00:38:30,960
just<font color="#E5E5E5"> have</font><font color="#CCCCCC"> to open PowerPoint document</font>

1004
00:38:29,910 --> 00:38:32,519
without having the office five

1005
00:38:30,960 --> 00:38:34,920
validation installed they would have

1006
00:38:32,519 --> 00:38:36,359
spotted it so it's clear that that's one

1007
00:38:34,920 --> 00:38:38,700
of the places they will<font color="#CCCCCC"> definitely have</font>

1008
00:38:36,359 --> 00:38:40,259
to work on the<font color="#CCCCCC"> sdl so they can catch</font>

1009
00:38:38,700 --> 00:38:44,098
them<font color="#E5E5E5"> and would make sense to do it in</font>

1010
00:38:40,259 --> 00:38:45,599
that verification<font color="#E5E5E5"> process however all</font>

1011
00:38:44,099 --> 00:38:47,250
when<font color="#CCCCCC"> we look at the code mature disco</font>

1012
00:38:45,599 --> 00:38:48,569
and also the prevalence<font color="#CCCCCC"> of the different</font>

1013
00:38:47,250 --> 00:38:49,859
types of vulnerabilities and this is

1014
00:38:48,569 --> 00:38:51,720
pretty groundbreaking because usually I

1015
00:38:49,859 --> 00:38:56,400
end up actually flogging vendors but

1016
00:38:51,720 --> 00:38:59,069
<font color="#E5E5E5">they have</font><font color="#CCCCCC"> actually done a good job</font><font color="#E5E5E5"> so</font>

1017
00:38:56,400 --> 00:39:01,529
clearly implementing stl is not an utter

1018
00:38:59,069 --> 00:39:03,210
waste of time but it's also important<font color="#E5E5E5"> to</font>

1019
00:39:01,529 --> 00:39:05,849
note you have to tell you lie to your

1020
00:39:03,210 --> 00:39:08,730
needs like we don't all<font color="#CCCCCC"> have a Microsoft</font>

1021
00:39:05,849 --> 00:39:13,019
budget and we don't<font color="#E5E5E5"> all have Microsoft</font>

1022
00:39:08,730 --> 00:39:15,960
requirements so how can we from a code

1023
00:39:13,019 --> 00:39:18,180
which you<font color="#E5E5E5"> ready standpoint maybe fix as</font>

1024
00:39:15,960 --> 00:39:21,150
much of this as possible without the

1025
00:39:18,180 --> 00:39:23,069
Microsoft budget so a couple of pointers

1026
00:39:21,150 --> 00:39:23,440
here if you want to<font color="#E5E5E5"> get started with</font>

1027
00:39:23,069 --> 00:39:25,630
this

1028
00:39:23,440 --> 00:39:27,760
like focus on training<font color="#E5E5E5"> from a code</font>

1029
00:39:25,630 --> 00:39:29,950
maturity<font color="#E5E5E5"> standpoint because obviously if</font>

1030
00:39:27,760 --> 00:39:31,360
you<font color="#CCCCCC"> want to make more secure code your</font>

1031
00:39:29,950 --> 00:39:35,470
developers need to understand how to

1032
00:39:31,360 --> 00:39:37,000
write more secure code managers and team

1033
00:39:35,470 --> 00:39:38,709
leadership of course also understand the

1034
00:39:37,000 --> 00:39:40,150
importance of writing security code if

1035
00:39:38,710 --> 00:39:43,810
you<font color="#E5E5E5"> don't have them on board you're</font>

1036
00:39:40,150 --> 00:39:45,520
doomed to fail from<font color="#E5E5E5"> the beginning with</font>

1037
00:39:43,810 --> 00:39:48,549
regards to training developers and

1038
00:39:45,520 --> 00:39:50,650
programmers teach them first of<font color="#E5E5E5"> all how</font>

1039
00:39:48,550 --> 00:39:52,390
to a cause right secure code but also

1040
00:39:50,650 --> 00:39:55,630
teach them how to identify which

1041
00:39:52,390 --> 00:39:57,520
interfaces are most important if you

1042
00:39:55,630 --> 00:39:59,380
can't focus on everything<font color="#E5E5E5"> there's no</font>

1043
00:39:57,520 --> 00:40:01,420
point in focusing on the interfaces that

1044
00:39:59,380 --> 00:40:03,490
do not really<font color="#E5E5E5"> aren't exposed to you to</font>

1045
00:40:01,420 --> 00:40:06,130
supply<font color="#CCCCCC"> the input figure out which of our</font>

1046
00:40:03,490 --> 00:40:08,589
d interfaces in our application actually

1047
00:40:06,130 --> 00:40:11,410
exposed to users right input and then

1048
00:40:08,590 --> 00:40:14,710
focus<font color="#CCCCCC"> on these interfaces and make sure</font>

1049
00:40:11,410 --> 00:40:16,600
<font color="#E5E5E5">you secure these first from an</font>

1050
00:40:14,710 --> 00:40:18,310
implementation standpoint what seems to

1051
00:40:16,600 --> 00:40:19,450
read a void for Microsoft is the fact

1052
00:40:18,310 --> 00:40:21,490
that they actually<font color="#E5E5E5"> went through and</font>

1053
00:40:19,450 --> 00:40:23,109
deprecated a lot of functions<font color="#E5E5E5"> even</font>

1054
00:40:21,490 --> 00:40:27,100
though you teach the developers how to

1055
00:40:23,110 --> 00:40:30,550
write secure code we see and this is not

1056
00:40:27,100 --> 00:40:33,130
only<font color="#E5E5E5"> like Microsoft is not only novel no</font>

1057
00:40:30,550 --> 00:40:36,490
not only<font color="#CCCCCC"> Adobe they will mess up</font>

1058
00:40:33,130 --> 00:40:40,210
sometimes so get these historically

1059
00:40:36,490 --> 00:40:42,609
unsafe api's kill them and then use some

1060
00:40:40,210 --> 00:40:44,440
some better once instead and for

1061
00:40:42,610 --> 00:40:49,240
<font color="#E5E5E5">instance use the Microsoft API once use</font>

1062
00:40:44,440 --> 00:40:50,890
<font color="#E5E5E5">your own ones this will really make make</font>

1063
00:40:49,240 --> 00:40:53,680
make a difference to to the quality of

1064
00:40:50,890 --> 00:40:56,020
the code but by using these these beta

1065
00:40:53,680 --> 00:40:59,500
api's because then you then you know no

1066
00:40:56,020 --> 00:41:01,330
one will<font color="#E5E5E5"> suddenly mess up one thing I</font>

1067
00:40:59,500 --> 00:41:03,520
<font color="#CCCCCC">really like that some companies do to</font>

1068
00:41:01,330 --> 00:41:05,230
<font color="#CCCCCC">engage the developers is not only folks</font>

1069
00:41:03,520 --> 00:41:06,850
inviting new code back to say okay you

1070
00:41:05,230 --> 00:41:08,770
<font color="#E5E5E5">know what today</font><font color="#CCCCCC"> over the next couple of</font>

1071
00:41:06,850 --> 00:41:11,860
days we're not<font color="#CCCCCC"> going to write any new</font>

1072
00:41:08,770 --> 00:41:13,180
code instead we're going<font color="#E5E5E5"> to sit down and</font>

1073
00:41:11,860 --> 00:41:15,010
we're going to audit<font color="#E5E5E5"> our existing code</font>

1074
00:41:13,180 --> 00:41:17,319
and instead of<font color="#E5E5E5"> doing it in a negative</font>

1075
00:41:15,010 --> 00:41:18,850
way doing do<font color="#E5E5E5"> it in a positive way like</font>

1076
00:41:17,320 --> 00:41:20,230
make a competition out of it so now

1077
00:41:18,850 --> 00:41:22,210
we're<font color="#E5E5E5"> going to look at the code who</font>

1078
00:41:20,230 --> 00:41:24,160
finds the most vulnerabilities who finds

1079
00:41:22,210 --> 00:41:25,840
the<font color="#E5E5E5"> most critical vulnerability make it</font>

1080
00:41:24,160 --> 00:41:27,430
an event out of it<font color="#E5E5E5"> because it's also</font>

1081
00:41:25,840 --> 00:41:29,320
really really good exercise for

1082
00:41:27,430 --> 00:41:31,299
developers to look at their own code but

1083
00:41:29,320 --> 00:41:34,010
also look at their colleagues codes

1084
00:41:31,300 --> 00:41:35,270
because that will<font color="#E5E5E5"> also enhance their</font>

1085
00:41:34,010 --> 00:41:38,930
ending off secure code and actually

1086
00:41:35,270 --> 00:41:40,759
<font color="#E5E5E5">being able to spot them themselves yeah</font>

1087
00:41:38,930 --> 00:41:43,040
we've got to training I'll just quick

1088
00:41:40,760 --> 00:41:44,840
park there are<font color="#CCCCCC"> many great resources</font>

1089
00:41:43,040 --> 00:41:48,759
available some of them are even free

1090
00:41:44,840 --> 00:41:51,980
like I really like the sense cwe top 25

1091
00:41:48,760 --> 00:41:53,630
most dangerous software us list it's a

1092
00:41:51,980 --> 00:41:55,010
list<font color="#E5E5E5"> that's updated easier so if you</font>

1093
00:41:53,630 --> 00:41:57,230
don't<font color="#CCCCCC"> know about it I</font><font color="#E5E5E5"> definitely suggest</font>

1094
00:41:55,010 --> 00:42:00,230
you check it out it's updated each year

1095
00:41:57,230 --> 00:42:02,090
and it's<font color="#CCCCCC"> actually done in cooperation</font>

1096
00:42:00,230 --> 00:42:04,370
with a lot of industry experts are

1097
00:42:02,090 --> 00:42:06,260
providing input on it it's a really

1098
00:42:04,370 --> 00:42:10,670
awesome list and that<font color="#E5E5E5"> will cover most of</font>

1099
00:42:06,260 --> 00:42:13,820
the basic issues when you look at the

1100
00:42:10,670 --> 00:42:16,310
your code as I said<font color="#E5E5E5"> also make sure you</font>

1101
00:42:13,820 --> 00:42:19,580
at<font color="#CCCCCC"> least also subjected to testing using</font>

1102
00:42:16,310 --> 00:42:22,130
all the free available<font color="#E5E5E5"> fusses out there</font>

1103
00:42:19,580 --> 00:42:24,560
because it's a bit embarrassing also

1104
00:42:22,130 --> 00:42:26,210
that you might is because you might have

1105
00:42:24,560 --> 00:42:28,490
tested yourself with one of those

1106
00:42:26,210 --> 00:42:30,530
fossils out there before someone<font color="#E5E5E5"> else</font>

1107
00:42:28,490 --> 00:42:32,120
does it because trust me someone will

1108
00:42:30,530 --> 00:42:33,560
eventually just one of these simple

1109
00:42:32,120 --> 00:42:35,029
<font color="#CCCCCC">facets against your application you</font>

1110
00:42:33,560 --> 00:42:37,910
rather<font color="#E5E5E5"> want to deal</font><font color="#CCCCCC"> with it during the</font>

1111
00:42:35,030 --> 00:42:40,130
development process then afterwards so

1112
00:42:37,910 --> 00:42:42,080
use these<font color="#CCCCCC"> dowels or commercial solutions</font>

1113
00:42:40,130 --> 00:42:45,740
available so up to you if you want to

1114
00:42:42,080 --> 00:42:47,060
use them but at least use these publicly

1115
00:42:45,740 --> 00:42:49,009
available faucets because they'll get

1116
00:42:47,060 --> 00:42:51,110
the job done and they'll<font color="#CCCCCC"> make sure that</font>

1117
00:42:49,010 --> 00:42:53,350
at least basic fast testing that your

1118
00:42:51,110 --> 00:42:55,280
application<font color="#CCCCCC"> will stand up</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> it I</font>

1119
00:42:53,350 --> 00:42:57,259
personally<font color="#CCCCCC"> very much like the</font>

1120
00:42:55,280 --> 00:42:58,850
application<font color="#CCCCCC"> verifier tool also because</font>

1121
00:42:57,260 --> 00:43:00,920
you can't expect to spot everything

1122
00:42:58,850 --> 00:43:02,839
statically and that one will actually<font color="#E5E5E5"> go</font>

1123
00:43:00,920 --> 00:43:04,280
in and inform you about the soda memory

1124
00:43:02,840 --> 00:43:06,860
corruption type errors that that may be

1125
00:43:04,280 --> 00:43:10,550
in your application when you run it so

1126
00:43:06,860 --> 00:43:13,640
that's also<font color="#E5E5E5"> pretty good resource by just</font>

1127
00:43:10,550 --> 00:43:18,920
looking at this training and even using

1128
00:43:13,640 --> 00:43:21,560
free resources killing the api's that we

1129
00:43:18,920 --> 00:43:24,770
see are the biggest causes for

1130
00:43:21,560 --> 00:43:28,549
vulnerabilities and also using these<font color="#E5E5E5"> AP</font>

1131
00:43:24,770 --> 00:43:32,930
is to an arithmetic calculations you

1132
00:43:28,550 --> 00:43:34,640
will<font color="#CCCCCC"> actually be able to weed out level</font>

1133
00:43:32,930 --> 00:43:37,190
zero vulnerabilities and you'll be able

1134
00:43:34,640 --> 00:43:38,330
to seriously reduce the number of level

1135
00:43:37,190 --> 00:43:42,350
one and<font color="#CCCCCC"> even level two vulnerabilities</font>

1136
00:43:38,330 --> 00:43:44,990
in your code so this<font color="#E5E5E5"> is a pretty small</font>

1137
00:43:42,350 --> 00:43:46,400
<font color="#E5E5E5">effort actually and you'll get a very</font>

1138
00:43:44,990 --> 00:43:46,939
very big step at least<font color="#E5E5E5"> from a code</font>

1139
00:43:46,400 --> 00:43:48,710
maturities

1140
00:43:46,940 --> 00:43:50,540
but you can<font color="#E5E5E5"> really heighten the quality</font>

1141
00:43:48,710 --> 00:43:55,280
of your code by simply just doing this

1142
00:43:50,540 --> 00:43:56,990
so that pretty much wraps it up I have

1143
00:43:55,280 --> 00:43:58,310
five minutes<font color="#E5E5E5"> for questions that's pretty</font>

1144
00:43:56,990 --> 00:43:59,479
well done<font color="#E5E5E5"> I thought of icicle five</font>

1145
00:43:58,310 --> 00:44:06,950
minutes or when steal some of your lunch

1146
00:43:59,480 --> 00:44:09,680
break<font color="#E5E5E5"> so any</font><font color="#CCCCCC"> questions yes how do you</font>

1147
00:44:06,950 --> 00:44:14,569
<font color="#E5E5E5">integrate yes we have into agile</font>

1148
00:44:09,680 --> 00:44:16,940
development cycles so the<font color="#E5E5E5"> question is</font>

1149
00:44:14,569 --> 00:44:23,630
how do you integrate a still in salt

1150
00:44:16,940 --> 00:44:26,810
available<font color="#CCCCCC"> life-size the thing is stl is</font>

1151
00:44:23,630 --> 00:44:29,450
it's like consider work in progress you

1152
00:44:26,810 --> 00:44:32,060
don't<font color="#E5E5E5"> just us just switch to stl one day</font>

1153
00:44:29,450 --> 00:44:36,348
<font color="#CCCCCC">after</font><font color="#E5E5E5"> the other so you wanna put it in</font>

1154
00:44:32,060 --> 00:44:39,230
slowly as you need it focus as it on

1155
00:44:36,349 --> 00:44:40,339
like some of the specific faces you but

1156
00:44:39,230 --> 00:44:41,569
you want to<font color="#E5E5E5"> get it in through the whole</font>

1157
00:44:40,339 --> 00:44:43,040
face like this there's a lot of

1158
00:44:41,569 --> 00:44:45,410
resources available<font color="#E5E5E5"> to know how to do a</font>

1159
00:44:43,040 --> 00:44:46,819
steal on how to do it properly available

1160
00:44:45,410 --> 00:44:48,230
<font color="#CCCCCC">Microsoft has made a</font><font color="#E5E5E5"> lot of it available</font>

1161
00:44:46,819 --> 00:44:50,599
they even have a lot of tools they have

1162
00:44:48,230 --> 00:44:53,150
a lot of stl templates that will allow

1163
00:44:50,599 --> 00:44:57,740
you<font color="#E5E5E5"> to implement it and implement the</font>

1164
00:44:53,150 --> 00:45:04,670
different phases properly but it's a big

1165
00:44:57,740 --> 00:45:06,919
job any other questions I know some<font color="#CCCCCC"> of</font>

1166
00:45:04,670 --> 00:45:10,069
the I'll just yeah I know some of these

1167
00:45:06,920 --> 00:45:11,420
concepts may also be a bit technical so

1168
00:45:10,069 --> 00:45:13,940
again if some of this just<font color="#E5E5E5"> went</font>

1169
00:45:11,420 --> 00:45:15,650
completely over your head a<font color="#CCCCCC"> few features</font>

1170
00:45:13,940 --> 00:45:18,760
also look me up in the lunch break but

1171
00:45:15,650 --> 00:45:18,760
there was one person there also

1172
00:45:19,830 --> 00:45:22,549
frameworks<font color="#E5E5E5"> like</font>

1173
00:45:27,830 --> 00:45:37,680
I've specifically look mostly at stl so

1174
00:45:32,100 --> 00:45:40,110
make make that clear the reason<font color="#CCCCCC"> i really</font>

1175
00:45:37,680 --> 00:45:42,330
<font color="#CCCCCC">like st really like sto as well</font>

1176
00:45:40,110 --> 00:45:44,250
obviously<font color="#CCCCCC"> because I ended up confirm</font>

1177
00:45:42,330 --> 00:45:48,090
that it actually works I haven't<font color="#CCCCCC"> looked</font>

1178
00:45:44,250 --> 00:45:50,100
at<font color="#E5E5E5"> ebay at the others but</font><font color="#CCCCCC"> also it really</font>

1179
00:45:48,090 --> 00:45:52,250
makes sense to integrate security

1180
00:45:50,100 --> 00:45:56,009
through that whole development process

1181
00:45:52,250 --> 00:45:58,680
it makes<font color="#E5E5E5"> sense from the beginning the</font>

1182
00:45:56,010 --> 00:46:00,600
whole training process so<font color="#CCCCCC"> the</font><font color="#E5E5E5"> whole way</font>

1183
00:45:58,680 --> 00:46:03,629
it's been structured face that in the

1184
00:46:00,600 --> 00:46:06,180
different phases<font color="#CCCCCC"> make</font><font color="#E5E5E5"> sense and what I</font>

1185
00:46:03,630 --> 00:46:07,710
also like is as I said<font color="#E5E5E5"> he is you can</font>

1186
00:46:06,180 --> 00:46:10,350
implement them like<font color="#E5E5E5"> Microsoft didn't</font>

1187
00:46:07,710 --> 00:46:11,790
just say we need<font color="#CCCCCC"> stl spoon now we have</font>

1188
00:46:10,350 --> 00:46:14,279
something fall in place they can

1189
00:46:11,790 --> 00:46:16,470
<font color="#CCCCCC">actually implement it slowly as i said</font>

1190
00:46:14,280 --> 00:46:18,150
you can even<font color="#CCCCCC"> cherry pick certain</font><font color="#E5E5E5"> phase</font>

1191
00:46:16,470 --> 00:46:19,439
the spacer i'm gonna use this from this

1192
00:46:18,150 --> 00:46:22,530
phase we've got to use this<font color="#E5E5E5"> from this</font>

1193
00:46:19,440 --> 00:46:24,270
face<font color="#E5E5E5"> and then you can ramp it up as you</font>

1194
00:46:22,530 --> 00:46:25,620
<font color="#E5E5E5">please because as I say from code</font>

1195
00:46:24,270 --> 00:46:29,610
maturity standpoint we only care about

1196
00:46:25,620 --> 00:46:31,620
certain of the<font color="#CCCCCC"> phases but</font><font color="#E5E5E5"> I'm not saying</font>

1197
00:46:29,610 --> 00:46:33,510
don't worry about all<font color="#CCCCCC"> the other phases</font>

1198
00:46:31,620 --> 00:46:34,980
but if you want to<font color="#E5E5E5"> increase</font><font color="#CCCCCC"> the quality</font>

1199
00:46:33,510 --> 00:46:36,780
of your code and<font color="#E5E5E5"> you want to do it as</font>

1200
00:46:34,980 --> 00:46:38,400
fast and as cheap as possible these are

1201
00:46:36,780 --> 00:46:40,740
the faces you want to<font color="#E5E5E5"> look at but of</font>

1202
00:46:38,400 --> 00:46:48,410
course the other faces faces also have

1203
00:46:40,740 --> 00:46:48,410
an impact yes please with my bizarre

1204
00:46:48,769 --> 00:46:56,939
no they don't know yet when they put it

1205
00:46:53,759 --> 00:47:00,059
on youtube later they probably want to

1206
00:46:56,940 --> 00:47:02,549
discuss it so add<font color="#CCCCCC"> sakuni we actually do</font>

1207
00:47:00,059 --> 00:47:03,809
talk<font color="#CCCCCC"> to Microsoft part of it we do I</font>

1208
00:47:02,549 --> 00:47:06,269
continue<font color="#E5E5E5"> to provide them with our</font>

1209
00:47:03,809 --> 00:47:09,599
findings usually when we discovered they

1210
00:47:06,269 --> 00:47:11,519
don't fix something probably but what we

1211
00:47:09,599 --> 00:47:13,200
do actually collect them without finding

1212
00:47:11,519 --> 00:47:15,180
so<font color="#E5E5E5"> I'm sure I will be discussing this</font>

1213
00:47:13,200 --> 00:47:18,089
with with some of the people<font color="#E5E5E5"> Microsoft</font>

1214
00:47:15,180 --> 00:47:21,180
then yeah a lot of dad to to give them

1215
00:47:18,089 --> 00:47:24,750
some pointers any pattern in<font color="#E5E5E5"> the</font>

1216
00:47:21,180 --> 00:47:28,589
regression fixes<font color="#CCCCCC"> or lessee of</font><font color="#E5E5E5"> AT&T fixes</font>

1217
00:47:24,750 --> 00:47:31,460
so Microsoft is about mobility they fix

1218
00:47:28,589 --> 00:47:31,460
<font color="#E5E5E5">it really</font>

1219
00:47:33,599 --> 00:47:40,119
<font color="#CCCCCC">you know yeah so specifically for this</font>

1220
00:47:37,809 --> 00:47:44,290
all this we<font color="#E5E5E5"> analyzed here we didn't</font>

1221
00:47:40,119 --> 00:47:47,260
actually cover any questions the way<font color="#E5E5E5"> cv</font>

1222
00:47:44,290 --> 00:47:49,180
explains as i said the way Microsoft for

1223
00:47:47,260 --> 00:47:50,770
instance lists these vulnerabilities are

1224
00:47:49,180 --> 00:47:52,240
using terms like memory corruption it's

1225
00:47:50,770 --> 00:47:53,740
a very fancy word it covers everything

1226
00:47:52,240 --> 00:47:56,950
even vulnerabilities that actually do

1227
00:47:53,740 --> 00:47:58,839
<font color="#E5E5E5">not lead to memory corruption we go in</font>

1228
00:47:56,950 --> 00:47:59,859
and look<font color="#E5E5E5"> at it very very deep to</font><font color="#CCCCCC"> find</font>

1229
00:47:58,839 --> 00:48:02,890
<font color="#E5E5E5">out what is the deep vulnerability</font>

1230
00:47:59,859 --> 00:48:06,940
course so the<font color="#E5E5E5"> CV descriptions are still</font>

1231
00:48:02,890 --> 00:48:09,098
too general that is one of the<font color="#E5E5E5"> problems</font>

1232
00:48:06,940 --> 00:48:12,040
I have to say about using this is it

1233
00:48:09,099 --> 00:48:14,440
will be fairly until the vendors with

1234
00:48:12,040 --> 00:48:16,480
<font color="#CCCCCC">fines this would provide CW ease and and</font>

1235
00:48:14,440 --> 00:48:18,000
<font color="#CCCCCC">corrects ewwies because we also see them</font>

1236
00:48:16,480 --> 00:48:21,130
coming<font color="#E5E5E5"> to wrong conclusions sometimes</font>

1237
00:48:18,000 --> 00:48:24,880
it's pretty tricky because yeah this<font color="#E5E5E5"> is</font>

1238
00:48:21,130 --> 00:48:29,559
the con about this so<font color="#CCCCCC"> yeah pro con con</font>

1239
00:48:24,880 --> 00:48:31,630
con una scam you<font color="#E5E5E5"> will have to actually</font>

1240
00:48:29,559 --> 00:48:34,660
<font color="#E5E5E5">go in and find out the vulnerability</font>

1241
00:48:31,630 --> 00:48:36,250
course itself sometimes it's easy to

1242
00:48:34,660 --> 00:48:37,750
determine that's above overflow there's

1243
00:48:36,250 --> 00:48:38,980
some memory corruption and then you

1244
00:48:37,750 --> 00:48:41,980
might actually spend a full day just

1245
00:48:38,980 --> 00:48:44,200
figure<font color="#CCCCCC"> out what actually went wrong so</font>

1246
00:48:41,980 --> 00:48:45,819
the best way to get this this ball

1247
00:48:44,200 --> 00:48:49,930
rolling pharmacy<font color="#CCCCCC"> kounia stand by grey</font>

1248
00:48:45,819 --> 00:48:53,319
sleeker looking at how<font color="#CCCCCC"> can we like put</font>

1249
00:48:49,930 --> 00:48:55,299
these scores into our advisories<font color="#CCCCCC"> I get</font>

1250
00:48:53,319 --> 00:48:58,680
the<font color="#CCCCCC"> STFU no I'm ignoring it I</font><font color="#E5E5E5"> feel all</font>

1251
00:48:55,299 --> 00:48:58,680
the way<font color="#CCCCCC"> from Denmark I get my time</font>

1252
00:48:59,930 --> 00:49:03,990
so we are<font color="#E5E5E5"> actually focusing on how we</font>

1253
00:49:02,310 --> 00:49:05,730
<font color="#E5E5E5">can implement some scoring so we can</font>

1254
00:49:03,990 --> 00:49:08,310
make<font color="#E5E5E5"> it more evident of the securities</font>

1255
00:49:05,730 --> 00:49:10,680
data of the<font color="#E5E5E5"> different products but yeah</font>

1256
00:49:08,310 --> 00:49:12,750
if there was a regression we would I

1257
00:49:10,680 --> 00:49:14,580
would factor in in as the first

1258
00:49:12,750 --> 00:49:17,130
vulnerability that's just incorrectly

1259
00:49:14,580 --> 00:49:19,319
face like this one just<font color="#E5E5E5"> went wrong so we</font>

1260
00:49:17,130 --> 00:49:21,660
usually<font color="#E5E5E5"> consider regression fixes as</font>

1261
00:49:19,320 --> 00:49:23,490
you're just fixing the vulnerability you

1262
00:49:21,660 --> 00:49:28,109
intended<font color="#CCCCCC"> to fix but now you actually</font><font color="#E5E5E5"> did</font>

1263
00:49:23,490 --> 00:49:34,669
it<font color="#E5E5E5"> correctly any other questions or</font>

1264
00:49:28,110 --> 00:49:34,670
should we STFU will STFU thank you

