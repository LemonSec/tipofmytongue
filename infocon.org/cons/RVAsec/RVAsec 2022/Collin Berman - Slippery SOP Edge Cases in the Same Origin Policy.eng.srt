1
00:00:15,200 --> 00:00:17,119
all right i know there's some more folks

2
00:00:17,119 --> 00:00:18,880
trickling in but let's go ahead and get

3
00:00:18,880 --> 00:00:20,080
started

4
00:00:20,080 --> 00:00:23,680
thanks everyone for coming to my talk

5
00:00:24,080 --> 00:00:25,760
i'm colin

6
00:00:25,760 --> 00:00:28,640
this is slippery soap or

7
00:00:28,640 --> 00:00:32,560
edge cases in the same origin policy

8
00:00:32,640 --> 00:00:34,800
so we'll start with who am i

9
00:00:34,800 --> 00:00:36,960
i'm colin berman i'm a pen tester on

10
00:00:36,960 --> 00:00:39,440
capital one's offensive security team

11
00:00:39,440 --> 00:00:41,280
mostly specializing in web cloud and

12
00:00:41,280 --> 00:00:42,399
crypto

13
00:00:42,399 --> 00:00:44,399
i am a virginia native born and raised

14
00:00:44,399 --> 00:00:47,039
but just moved out to seattle washington

15
00:00:47,039 --> 00:00:48,879
not too long ago

16
00:00:48,879 --> 00:00:51,199
but enough of that that's me now why are

17
00:00:51,199 --> 00:00:52,559
you here

18
00:00:52,559 --> 00:00:54,399
yes i know we have one track this year

19
00:00:54,399 --> 00:00:55,120
but

20
00:00:55,120 --> 00:00:58,480
just so you know what we're getting into

21
00:00:58,480 --> 00:01:00,000
essentially we're going to start by

22
00:01:00,000 --> 00:01:01,760
looking at this question

23
00:01:01,760 --> 00:01:04,159
why doesn't the same origin policy

24
00:01:04,159 --> 00:01:06,159
protect us against cross-site request

25
00:01:06,159 --> 00:01:08,080
forgery

26
00:01:08,080 --> 00:01:10,000
so we'll start with that and i just want

27
00:01:10,000 --> 00:01:11,360
to highlight we're not talking about

28
00:01:11,360 --> 00:01:13,119
cores here going to be talking about the

29
00:01:13,119 --> 00:01:16,080
vanilla same origin policy

30
00:01:16,080 --> 00:01:16,880
but

31
00:01:16,880 --> 00:01:18,720
we're going to be deep diving into the

32
00:01:18,720 --> 00:01:20,720
boundaries of the same origin policy

33
00:01:20,720 --> 00:01:22,479
trying to understand the edge cases of

34
00:01:22,479 --> 00:01:23,520
this

35
00:01:23,520 --> 00:01:25,600
so if you're a pin tester like me

36
00:01:25,600 --> 00:01:27,280
hopefully you can walk away with a more

37
00:01:27,280 --> 00:01:29,600
complete understanding of where the same

38
00:01:29,600 --> 00:01:31,680
origin policy steps in and blocks your

39
00:01:31,680 --> 00:01:32,720
attack

40
00:01:32,720 --> 00:01:34,400
maybe you can find just one more link

41
00:01:34,400 --> 00:01:36,479
you can put into your attack chain to

42
00:01:36,479 --> 00:01:38,799
get that cross side attack working

43
00:01:38,799 --> 00:01:40,000
and on the other hand if you're a

44
00:01:40,000 --> 00:01:41,439
defender

45
00:01:41,439 --> 00:01:44,000
no judgment but maybe you can walk away

46
00:01:44,000 --> 00:01:46,079
with some additional mitigations to add

47
00:01:46,079 --> 00:01:48,320
some more layers of defense and depth

48
00:01:48,320 --> 00:01:50,240
help protect more against cross side

49
00:01:50,240 --> 00:01:51,759
attacks

50
00:01:51,759 --> 00:01:54,079
most of this work is not mine i've

51
00:01:54,079 --> 00:01:55,680
collected other people's amazing

52
00:01:55,680 --> 00:01:56,640
research

53
00:01:56,640 --> 00:01:59,439
collated it into a reference so each of

54
00:01:59,439 --> 00:02:00,719
these topics we're going to be talking

55
00:02:00,719 --> 00:02:02,799
about today could probably be its own

56
00:02:02,799 --> 00:02:03,759
talk

57
00:02:03,759 --> 00:02:05,840
we're going to go wide and shallow but

58
00:02:05,840 --> 00:02:08,000
at the end we'll be walking away with a

59
00:02:08,000 --> 00:02:10,160
bonus vulnerability that i get to

60
00:02:10,160 --> 00:02:12,720
disclose so i'm super excited

61
00:02:12,720 --> 00:02:14,080
let's get into it

62
00:02:14,080 --> 00:02:15,520
and we're going to start off with the

63
00:02:15,520 --> 00:02:18,080
same origin policy

64
00:02:18,080 --> 00:02:19,920
now the fine folks at mozilla define

65
00:02:19,920 --> 00:02:22,400
this as the same origin policy controls

66
00:02:22,400 --> 00:02:24,720
interactions between two different

67
00:02:24,720 --> 00:02:26,080
origins

68
00:02:26,080 --> 00:02:27,680
and this definition now gives us two

69
00:02:27,680 --> 00:02:28,720
more things we're going to have to

70
00:02:28,720 --> 00:02:29,920
define

71
00:02:29,920 --> 00:02:32,400
so it's a cross-site interaction this

72
00:02:32,400 --> 00:02:34,319
could be one of three things we're going

73
00:02:34,319 --> 00:02:36,560
to be looking at cross-site reads

74
00:02:36,560 --> 00:02:39,840
rights and resource embeddings

75
00:02:39,840 --> 00:02:41,920
and when we say origin

76
00:02:41,920 --> 00:02:44,000
specifically this means it's going to be

77
00:02:44,000 --> 00:02:46,000
comprised of three components

78
00:02:46,000 --> 00:02:48,720
we've got the protocol probably http or

79
00:02:48,720 --> 00:02:50,319
https

80
00:02:50,319 --> 00:02:52,319
the host name and the port

81
00:02:52,319 --> 00:02:53,760
usually no one sees the port if it's

82
00:02:53,760 --> 00:02:55,120
just a default

83
00:02:55,120 --> 00:02:57,440
but if any one of these three things

84
00:02:57,440 --> 00:02:59,440
change that's going to give us a

85
00:02:59,440 --> 00:03:01,040
different origin

86
00:03:01,040 --> 00:03:02,800
for example if we're making a request

87
00:03:02,800 --> 00:03:06,560
from http example.com to https

88
00:03:06,560 --> 00:03:08,560
example.com even though they have the

89
00:03:08,560 --> 00:03:10,400
same host name that's treated as a

90
00:03:10,400 --> 00:03:12,400
cross-site request

91
00:03:12,400 --> 00:03:14,159
so let's get into it we'll start off

92
00:03:14,159 --> 00:03:16,080
with cross-site reads but

93
00:03:16,080 --> 00:03:17,920
before we look at cross-site reads let's

94
00:03:17,920 --> 00:03:20,159
look at same site reads

95
00:03:20,159 --> 00:03:21,920
for my example here i'm looking at

96
00:03:21,920 --> 00:03:24,080
example.com since i'm allowed to pull

97
00:03:24,080 --> 00:03:26,080
this up as an example

98
00:03:26,080 --> 00:03:27,599
and in my browser i've opened up the

99
00:03:27,599 --> 00:03:29,519
developer console at the bottom this

100
00:03:29,519 --> 00:03:31,200
allows us to run javascript in the

101
00:03:31,200 --> 00:03:33,840
context of example.com here

102
00:03:33,840 --> 00:03:34,879
we're going to be seeing a lot of

103
00:03:34,879 --> 00:03:36,239
pictures like this in the next few

104
00:03:36,239 --> 00:03:37,680
slides but what's happening in this

105
00:03:37,680 --> 00:03:39,120
first one here

106
00:03:39,120 --> 00:03:41,519
is my javascript is attempting to read

107
00:03:41,519 --> 00:03:43,840
content from the same domain

108
00:03:43,840 --> 00:03:46,400
so i'm on example.com i'm reading from

109
00:03:46,400 --> 00:03:49,120
example.com and that goes through fine

110
00:03:49,120 --> 00:03:50,640
makes a lot of sense

111
00:03:50,640 --> 00:03:52,640
one site should probably be allowed to

112
00:03:52,640 --> 00:03:55,280
read content from itself

113
00:03:55,280 --> 00:03:57,200
but now we can contrast this with a

114
00:03:57,200 --> 00:03:58,879
cross-site read

115
00:03:58,879 --> 00:04:00,640
which we look at the bottom we don't

116
00:04:00,640 --> 00:04:02,799
have to read the code but we get these

117
00:04:02,799 --> 00:04:04,560
three big red error messages at the

118
00:04:04,560 --> 00:04:05,599
bottom

119
00:04:05,599 --> 00:04:08,319
that attempt to read cross sites so i'm

120
00:04:08,319 --> 00:04:10,080
on example.com but it's trying to read

121
00:04:10,080 --> 00:04:14,239
content on gmail.com that gets blocked i

122
00:04:14,239 --> 00:04:15,680
mean can you imagine if that were

123
00:04:15,680 --> 00:04:18,000
allowed this would be a whole new owasp

124
00:04:18,000 --> 00:04:20,160
top 10 vulnerability where if you

125
00:04:20,160 --> 00:04:21,680
accidentally browse to a malicious

126
00:04:21,680 --> 00:04:22,720
website

127
00:04:22,720 --> 00:04:25,040
it can now read your data on any other

128
00:04:25,040 --> 00:04:26,720
website so

129
00:04:26,720 --> 00:04:28,800
maybe as a pen tester i should be sad

130
00:04:28,800 --> 00:04:30,240
but i'm kind of happy that this gets

131
00:04:30,240 --> 00:04:31,840
blocked

132
00:04:31,840 --> 00:04:33,520
so that's cross-site reads blocked by

133
00:04:33,520 --> 00:04:35,759
the same origin policy let's look at

134
00:04:35,759 --> 00:04:37,360
something that's now allowed so

135
00:04:37,360 --> 00:04:38,960
cross-site embeds

136
00:04:38,960 --> 00:04:40,800
still on example.com

137
00:04:40,800 --> 00:04:42,560
but i've embedded some content from

138
00:04:42,560 --> 00:04:44,080
gmail.com

139
00:04:44,080 --> 00:04:46,160
and this goes through fine

140
00:04:46,160 --> 00:04:47,759
this is also kind of how the internet

141
00:04:47,759 --> 00:04:49,520
works we need to be able to embed

142
00:04:49,520 --> 00:04:51,600
content across domains

143
00:04:51,600 --> 00:04:54,000
but again this is not a cross-site read

144
00:04:54,000 --> 00:04:55,919
so the javascript or the web server

145
00:04:55,919 --> 00:04:58,320
itself does not have access to view the

146
00:04:58,320 --> 00:05:00,400
contents of this image

147
00:05:00,400 --> 00:05:02,400
it can get some metadata like the

148
00:05:02,400 --> 00:05:04,479
dimensions of the image if we were

149
00:05:04,479 --> 00:05:06,240
embedding a video

150
00:05:06,240 --> 00:05:07,759
javascript would be able to see the

151
00:05:07,759 --> 00:05:09,039
duration

152
00:05:09,039 --> 00:05:10,639
and it's not just media we could also

153
00:05:10,639 --> 00:05:12,720
look at embedding style sheets or even a

154
00:05:12,720 --> 00:05:14,960
script from another domain and that's

155
00:05:14,960 --> 00:05:18,639
all allowed by the same origin policy

156
00:05:18,639 --> 00:05:20,479
so we had cross-site embeds which are

157
00:05:20,479 --> 00:05:22,479
allowed we had cross-site reads which

158
00:05:22,479 --> 00:05:23,680
are blocked

159
00:05:23,680 --> 00:05:25,919
something in between now cross site

160
00:05:25,919 --> 00:05:28,639
writes what does this even mean well the

161
00:05:28,639 --> 00:05:30,960
simplest example is just clicking on a

162
00:05:30,960 --> 00:05:32,880
link to take you from one site to

163
00:05:32,880 --> 00:05:34,240
another

164
00:05:34,240 --> 00:05:35,840
it's how the internet works right

165
00:05:35,840 --> 00:05:37,759
internet needs to be open

166
00:05:37,759 --> 00:05:39,360
we need to be able to link between

167
00:05:39,360 --> 00:05:41,680
different websites so this kind of cross

168
00:05:41,680 --> 00:05:43,600
site right has to be allowed

169
00:05:43,600 --> 00:05:45,280
but it's not just when the user clicks

170
00:05:45,280 --> 00:05:46,800
on a link themselves

171
00:05:46,800 --> 00:05:48,320
we can also think about when the web

172
00:05:48,320 --> 00:05:50,240
server sends someone to another website

173
00:05:50,240 --> 00:05:52,400
automatically with a redirect

174
00:05:52,400 --> 00:05:54,240
we can also send some data along with

175
00:05:54,240 --> 00:05:56,639
that request with a forum submission

176
00:05:56,639 --> 00:05:58,880
and it's not just html forms but also

177
00:05:58,880 --> 00:06:00,639
javascript apis

178
00:06:00,639 --> 00:06:02,400
there's a variety of these

179
00:06:02,400 --> 00:06:05,759
most common used to be xml http request

180
00:06:05,759 --> 00:06:07,840
now we have the more modern fetch but

181
00:06:07,840 --> 00:06:09,919
essentially there's a bunch of ways to

182
00:06:09,919 --> 00:06:12,400
send information from one website to

183
00:06:12,400 --> 00:06:15,199
another in javascript

184
00:06:15,199 --> 00:06:16,720
this might seem like it's nice to be

185
00:06:16,720 --> 00:06:18,720
able to send that information but this

186
00:06:18,720 --> 00:06:20,400
is also known as cross-site request

187
00:06:20,400 --> 00:06:21,680
forgery

188
00:06:21,680 --> 00:06:23,840
when we're sending a payload from one

189
00:06:23,840 --> 00:06:26,800
domain to another

190
00:06:26,800 --> 00:06:28,240
what might that look like how do we

191
00:06:28,240 --> 00:06:30,240
exploit this

192
00:06:30,240 --> 00:06:31,600
so now i've switched to a different kind

193
00:06:31,600 --> 00:06:32,960
of example but again we're going to be

194
00:06:32,960 --> 00:06:34,560
seeing a lot of pictures that look just

195
00:06:34,560 --> 00:06:35,680
like this

196
00:06:35,680 --> 00:06:37,840
in the coming few slides

197
00:06:37,840 --> 00:06:40,000
cross-site request forgery is an attack

198
00:06:40,000 --> 00:06:41,919
targeting a victim user and their web

199
00:06:41,919 --> 00:06:43,199
browser

200
00:06:43,199 --> 00:06:45,039
and it starts off when the victim user

201
00:06:45,039 --> 00:06:47,600
browses to our malicious website

202
00:06:47,600 --> 00:06:48,800
so in this slide we're going to be the

203
00:06:48,800 --> 00:06:51,919
hacker i hope that's okay with everyone

204
00:06:51,919 --> 00:06:53,919
but when the militia sorry when the user

205
00:06:53,919 --> 00:06:56,240
browses to our malicious website we can

206
00:06:56,240 --> 00:06:58,240
use javascript to tell the victim's

207
00:06:58,240 --> 00:07:01,280
browser to make a post request over

208
00:07:01,280 --> 00:07:05,120
to let's say example.com change email

209
00:07:05,120 --> 00:07:07,039
and now this cross site request forward

210
00:07:07,039 --> 00:07:09,919
review attack will successfully change

211
00:07:09,919 --> 00:07:11,520
the victim's email address on

212
00:07:11,520 --> 00:07:12,960
example.com

213
00:07:12,960 --> 00:07:14,080
to

214
00:07:14,080 --> 00:07:17,280
our malicious email attacker at evil.com

215
00:07:17,280 --> 00:07:18,960
let's say and this is allowed by the

216
00:07:18,960 --> 00:07:21,280
same origin policy for the exact same

217
00:07:21,280 --> 00:07:23,039
reason we need to be able to click a

218
00:07:23,039 --> 00:07:25,599
link from one website to another

219
00:07:25,599 --> 00:07:27,120
apparently we need to be able to send

220
00:07:27,120 --> 00:07:29,280
post requests initiated by a malicious

221
00:07:29,280 --> 00:07:32,400
domain over to a legitimate site

222
00:07:32,400 --> 00:07:33,759
and of course there's great ways to

223
00:07:33,759 --> 00:07:35,440
protect this i think the most common and

224
00:07:35,440 --> 00:07:37,599
the most robust is called cross-site

225
00:07:37,599 --> 00:07:39,840
request forgery tokens

226
00:07:39,840 --> 00:07:42,479
but we're not talking about that

227
00:07:42,479 --> 00:07:44,800
let's instead look at what kind of

228
00:07:44,800 --> 00:07:46,479
cross-site request forgery attacks are

229
00:07:46,479 --> 00:07:47,919
even possible

230
00:07:47,919 --> 00:07:50,800
so we'll go find the oh also

231
00:07:50,800 --> 00:07:53,199
forgot to call out but when the victim's

232
00:07:53,199 --> 00:07:55,199
web browser makes that cross-site post

233
00:07:55,199 --> 00:07:57,599
request the web browser automatically

234
00:07:57,599 --> 00:07:59,199
attaches the cookie

235
00:07:59,199 --> 00:08:00,800
that the user has so if they're logged

236
00:08:00,800 --> 00:08:03,360
into this example.com

237
00:08:03,360 --> 00:08:05,440
when evil.com tells the web browser to

238
00:08:05,440 --> 00:08:07,120
make that post request over it

239
00:08:07,120 --> 00:08:08,560
automatically attaches the cookie as

240
00:08:08,560 --> 00:08:10,800
well

241
00:08:10,960 --> 00:08:12,800
that's the internet for you

242
00:08:12,800 --> 00:08:15,120
so what's possible here let's deep dive

243
00:08:15,120 --> 00:08:18,240
into the same origin policy here

244
00:08:18,240 --> 00:08:20,720
so when we're using the fetch api

245
00:08:20,720 --> 00:08:23,120
to make cross site requests this is

246
00:08:23,120 --> 00:08:25,440
approximately going to be limited to

247
00:08:25,440 --> 00:08:27,360
what we can do with

248
00:08:27,360 --> 00:08:29,680
an html form we're going to see the same

249
00:08:29,680 --> 00:08:32,399
types of things where we can only make a

250
00:08:32,399 --> 00:08:34,640
git post or head request meaning no

251
00:08:34,640 --> 00:08:38,240
cross site deletes or patches or puts

252
00:08:38,240 --> 00:08:39,760
again we're not talking about cores

253
00:08:39,760 --> 00:08:42,240
course changes everything but by default

254
00:08:42,240 --> 00:08:44,320
we can only send these three requests

255
00:08:44,320 --> 00:08:46,080
and we can only modify a few different

256
00:08:46,080 --> 00:08:47,040
headers

257
00:08:47,040 --> 00:08:49,040
the most important one being content

258
00:08:49,040 --> 00:08:50,080
type

259
00:08:50,080 --> 00:08:52,480
can only be either form data

260
00:08:52,480 --> 00:08:55,200
or just plain data

261
00:08:55,200 --> 00:08:56,959
so importantly

262
00:08:56,959 --> 00:08:59,440
defenders take note

263
00:08:59,440 --> 00:09:02,240
json is not a valid content type for

264
00:09:02,240 --> 00:09:04,560
cross site requests

265
00:09:04,560 --> 00:09:06,880
how can we use this to our advantage

266
00:09:06,880 --> 00:09:09,519
well as we're designing our apis

267
00:09:09,519 --> 00:09:11,760
if we make sure all of our apis are only

268
00:09:11,760 --> 00:09:14,000
accepting json content

269
00:09:14,000 --> 00:09:16,080
and if we are strictly validating the

270
00:09:16,080 --> 00:09:19,120
content type header on these requests

271
00:09:19,120 --> 00:09:20,959
then we know cross site requests coming

272
00:09:20,959 --> 00:09:23,040
from evil.com can only have one of these

273
00:09:23,040 --> 00:09:25,279
three different content types

274
00:09:25,279 --> 00:09:27,040
and unless we implement cores those

275
00:09:27,040 --> 00:09:28,880
cross site requests will never be able

276
00:09:28,880 --> 00:09:31,600
to add that json content type

277
00:09:31,600 --> 00:09:33,600
similarly since these are the only safe

278
00:09:33,600 --> 00:09:35,120
request headers allowed on these cross

279
00:09:35,120 --> 00:09:36,480
site requests

280
00:09:36,480 --> 00:09:38,480
if all of our apis expect to see

281
00:09:38,480 --> 00:09:39,480
something like

282
00:09:39,480 --> 00:09:41,680
x-example header

283
00:09:41,680 --> 00:09:44,399
cross-site requests cannot include that

284
00:09:44,399 --> 00:09:45,839
and i'm not saying this should be your

285
00:09:45,839 --> 00:09:47,279
only protection against cross-site

286
00:09:47,279 --> 00:09:48,640
request forgery

287
00:09:48,640 --> 00:09:50,160
a lot could go wrong you might not be

288
00:09:50,160 --> 00:09:51,920
validating the content type exactly

289
00:09:51,920 --> 00:09:54,720
correctly like what if i say text plain

290
00:09:54,720 --> 00:09:56,080
semicolon

291
00:09:56,080 --> 00:09:58,880
json but it can be an effective

292
00:09:58,880 --> 00:10:00,959
mitigation to add an additional layer of

293
00:10:00,959 --> 00:10:02,640
defense in depth

294
00:10:02,640 --> 00:10:04,320
help protect against cross-site request

295
00:10:04,320 --> 00:10:06,320
forgery if your more robust c-surf

296
00:10:06,320 --> 00:10:09,760
tokens do fail for some reason

297
00:10:11,120 --> 00:10:13,200
so that is the same origin policy by

298
00:10:13,200 --> 00:10:14,560
default

299
00:10:14,560 --> 00:10:16,240
i've said it a few times but there are

300
00:10:16,240 --> 00:10:17,920
ways the same origin policy can be

301
00:10:17,920 --> 00:10:20,000
weakened for example if you see a site

302
00:10:20,000 --> 00:10:22,480
implementing cores sending coors headers

303
00:10:22,480 --> 00:10:23,920
all bets are off and that first

304
00:10:23,920 --> 00:10:25,440
vulnerability the hypothetical

305
00:10:25,440 --> 00:10:26,959
vulnerability we talked about at the

306
00:10:26,959 --> 00:10:29,600
beginning cross site reads now becomes

307
00:10:29,600 --> 00:10:31,760
possible so if your website implements

308
00:10:31,760 --> 00:10:32,800
cores

309
00:10:32,800 --> 00:10:35,120
you might be opening yourself up to

310
00:10:35,120 --> 00:10:37,120
users browsing to evil.com and losing

311
00:10:37,120 --> 00:10:39,440
their data

312
00:10:39,440 --> 00:10:41,120
similarly we can do something in

313
00:10:41,120 --> 00:10:42,839
javascript by setting the

314
00:10:42,839 --> 00:10:45,440
document.domain variable to a super

315
00:10:45,440 --> 00:10:47,600
domain and this opens up the same origin

316
00:10:47,600 --> 00:10:49,920
policy to allow additional cross-site

317
00:10:49,920 --> 00:10:52,560
requests from other sub-domains of that

318
00:10:52,560 --> 00:10:54,880
super domain so this can be especially

319
00:10:54,880 --> 00:10:56,000
dangerous

320
00:10:56,000 --> 00:10:57,200
if you have a ton of different

321
00:10:57,200 --> 00:10:59,440
sub-domains some of them you treat as

322
00:10:59,440 --> 00:11:01,839
business critical extra secure some of

323
00:11:01,839 --> 00:11:03,920
them maybe you don't worry about but if

324
00:11:03,920 --> 00:11:05,440
you get cross-site scripting on one of

325
00:11:05,440 --> 00:11:07,440
those other subdomains

326
00:11:07,440 --> 00:11:09,360
then your more critical applications can

327
00:11:09,360 --> 00:11:11,120
open themselves up to these risks by

328
00:11:11,120 --> 00:11:14,440
setting document.domain

329
00:11:15,360 --> 00:11:16,720
okay

330
00:11:16,720 --> 00:11:19,200
that's the same origin policy

331
00:11:19,200 --> 00:11:21,360
let's now go look at how this differs

332
00:11:21,360 --> 00:11:24,160
for the same origin policy for cookies

333
00:11:24,160 --> 00:11:26,480
just to recap on cookies what's a cookie

334
00:11:26,480 --> 00:11:28,880
when a user logs into our website we can

335
00:11:28,880 --> 00:11:31,120
tell the browser to save this cookie

336
00:11:31,120 --> 00:11:32,880
that cookie will then be sent along with

337
00:11:32,880 --> 00:11:36,480
every subsequent request to our website

338
00:11:36,480 --> 00:11:38,880
but which websites will that be sent to

339
00:11:38,880 --> 00:11:40,640
so let's look at the same origin policy

340
00:11:40,640 --> 00:11:42,880
for cookies and i've done my best here

341
00:11:42,880 --> 00:11:44,160
to come up with a one-to-one

342
00:11:44,160 --> 00:11:45,839
correspondence between the cookies and

343
00:11:45,839 --> 00:11:48,320
the fetch same origin policy

344
00:11:48,320 --> 00:11:49,920
it's not quite exact but let's see what

345
00:11:49,920 --> 00:11:51,839
we can pull out of here

346
00:11:51,839 --> 00:11:53,920
so we said with the same origin policy

347
00:11:53,920 --> 00:11:55,920
that origin is defined in terms of the

348
00:11:55,920 --> 00:11:57,040
protocol

349
00:11:57,040 --> 00:11:59,279
the host name and the port

350
00:11:59,279 --> 00:12:01,519
here instead of scheme cookies allow us

351
00:12:01,519 --> 00:12:04,560
to set a boolean true false flag

352
00:12:04,560 --> 00:12:06,720
it's called secure it basically says

353
00:12:06,720 --> 00:12:08,399
should this cookie be allowed to be sent

354
00:12:08,399 --> 00:12:11,120
to non-https websites

355
00:12:11,120 --> 00:12:12,720
just http

356
00:12:12,720 --> 00:12:14,320
not too much configuration room there

357
00:12:14,320 --> 00:12:16,160
just a boolean flag

358
00:12:16,160 --> 00:12:18,560
on the other hand the domain attribute

359
00:12:18,560 --> 00:12:20,480
on cookies gives us a lot more

360
00:12:20,480 --> 00:12:22,600
flexibility it's a lot like that

361
00:12:22,600 --> 00:12:25,680
document.domain variable we just saw

362
00:12:25,680 --> 00:12:27,440
but because there's so much flexibility

363
00:12:27,440 --> 00:12:28,720
we're going to need some more slides to

364
00:12:28,720 --> 00:12:30,320
look at that

365
00:12:30,320 --> 00:12:32,480
finally instead of port

366
00:12:32,480 --> 00:12:33,920
we have nothing

367
00:12:33,920 --> 00:12:36,079
cookies provide no way to enforce

368
00:12:36,079 --> 00:12:38,480
isolation based on different ports and

369
00:12:38,480 --> 00:12:40,000
we'll take a look at an example of what

370
00:12:40,000 --> 00:12:43,120
that might mean in a security context

371
00:12:43,120 --> 00:12:45,040
but that's not where cookies stop we

372
00:12:45,040 --> 00:12:47,120
also have this attribute called http

373
00:12:47,120 --> 00:12:49,440
only which might be a mitigation against

374
00:12:49,440 --> 00:12:51,120
cross-site scripting attacks basically

375
00:12:51,120 --> 00:12:52,800
it says javascript is not allowed to

376
00:12:52,800 --> 00:12:54,959
access this cookie

377
00:12:54,959 --> 00:12:57,680
we also have the path variable which has

378
00:12:57,680 --> 00:12:59,440
no analog in the normal same origin

379
00:12:59,440 --> 00:13:00,560
policy

380
00:13:00,560 --> 00:13:02,079
kind of like domain

381
00:13:02,079 --> 00:13:04,320
it's going to say only send this cookie

382
00:13:04,320 --> 00:13:06,240
if we're accessing a url that starts

383
00:13:06,240 --> 00:13:08,160
with that path

384
00:13:08,160 --> 00:13:10,240
and finally we have this somewhat newer

385
00:13:10,240 --> 00:13:12,399
attribute called same site

386
00:13:12,399 --> 00:13:14,560
just from a few years ago

387
00:13:14,560 --> 00:13:16,480
this one's really powerful especially

388
00:13:16,480 --> 00:13:18,320
when it comes to blocking cross-site

389
00:13:18,320 --> 00:13:20,560
request forgery attacks

390
00:13:20,560 --> 00:13:22,480
so we'll definitely deep dive into that

391
00:13:22,480 --> 00:13:24,480
we'll start with domain look briefly at

392
00:13:24,480 --> 00:13:25,360
port

393
00:13:25,360 --> 00:13:28,320
and then go look at same site

394
00:13:28,320 --> 00:13:30,240
so starting with domain i've made up

395
00:13:30,240 --> 00:13:32,160
this example subdomain tree for

396
00:13:32,160 --> 00:13:34,480
example.com

397
00:13:34,480 --> 00:13:36,519
in reality we only see

398
00:13:36,519 --> 00:13:38,399
www.example.com but let's pretend we

399
00:13:38,399 --> 00:13:40,480
also have a blog blog

400
00:13:40,480 --> 00:13:43,040
with public and private components

401
00:13:43,040 --> 00:13:45,199
maybe there's also a separate dev

402
00:13:45,199 --> 00:13:47,120
development subdomain

403
00:13:47,120 --> 00:13:49,040
and as a first example

404
00:13:49,040 --> 00:13:50,959
let's say we have a cookie that gets set

405
00:13:50,959 --> 00:13:53,440
when the user visits pub visits

406
00:13:53,440 --> 00:13:55,519
public.blog.example.com

407
00:13:55,519 --> 00:13:57,440
and now we want to share this as well

408
00:13:57,440 --> 00:13:59,120
when the user visits privateblog

409
00:13:59,120 --> 00:14:00,639
example.com

410
00:14:00,639 --> 00:14:02,240
so how can we implement this using

411
00:14:02,240 --> 00:14:04,320
cookie attributes

412
00:14:04,320 --> 00:14:06,399
we can do this by setting at the top

413
00:14:06,399 --> 00:14:09,360
domain equals blog.example.com

414
00:14:09,360 --> 00:14:11,120
and this ensures that the web browser is

415
00:14:11,120 --> 00:14:13,199
going to send that cookie with every

416
00:14:13,199 --> 00:14:15,600
subsequent request not just to the

417
00:14:15,600 --> 00:14:18,399
domain that said it public blog but also

418
00:14:18,399 --> 00:14:21,279
to any subdomain of blog.example.com

419
00:14:21,279 --> 00:14:24,160
including blog itself

420
00:14:24,160 --> 00:14:25,680
so even though we were just trying to

421
00:14:25,680 --> 00:14:27,120
share the cookie between these two

422
00:14:27,120 --> 00:14:29,120
different blog subdomains

423
00:14:29,120 --> 00:14:31,519
we're also

424
00:14:31,519 --> 00:14:33,240
intentionally sharing it with

425
00:14:33,240 --> 00:14:36,000
blog.example.com now second example

426
00:14:36,000 --> 00:14:38,560
let's say blog sets the cookie

427
00:14:38,560 --> 00:14:40,639
but we want to share it let's say with

428
00:14:40,639 --> 00:14:42,079
example.com

429
00:14:42,079 --> 00:14:44,399
the only way to implement this

430
00:14:44,399 --> 00:14:46,959
if we set domain equals example.com this

431
00:14:46,959 --> 00:14:48,560
blows the whole thing up now every

432
00:14:48,560 --> 00:14:50,639
single subdomain of example.com gets

433
00:14:50,639 --> 00:14:52,639
that cookie

434
00:14:52,639 --> 00:14:54,399
we'll take a look at how this matters in

435
00:14:54,399 --> 00:14:56,639
a security perspective but first just

436
00:14:56,639 --> 00:14:58,720
does a more complete picture

437
00:14:58,720 --> 00:15:00,160
here are the different types of

438
00:15:00,160 --> 00:15:02,320
isolation that we can actually enforce

439
00:15:02,320 --> 00:15:04,079
using that domain property

440
00:15:04,079 --> 00:15:06,480
this is all we get anything else is not

441
00:15:06,480 --> 00:15:08,639
going to be possible

442
00:15:08,639 --> 00:15:10,959
but why does this matter for us hackers

443
00:15:10,959 --> 00:15:13,040
on this slide let's be the hacker

444
00:15:13,040 --> 00:15:14,639
let's say we've somehow achieved

445
00:15:14,639 --> 00:15:16,680
subdomain takeover on

446
00:15:16,680 --> 00:15:18,560
subdomain.example.com

447
00:15:18,560 --> 00:15:21,120
maybe maybe there is a dangling dns

448
00:15:21,120 --> 00:15:23,440
record we were able to claim it

449
00:15:23,440 --> 00:15:25,120
maybe we just have cross-site scripting

450
00:15:25,120 --> 00:15:27,040
on that subdomain what can we do with

451
00:15:27,040 --> 00:15:28,480
that

452
00:15:28,480 --> 00:15:31,680
after the victim user browses to the

453
00:15:31,680 --> 00:15:33,839
legitimate app.example.com

454
00:15:33,839 --> 00:15:36,560
logs in gets that cookie

455
00:15:36,560 --> 00:15:38,639
what happens if that user then browses

456
00:15:38,639 --> 00:15:40,880
to our subdomain

457
00:15:40,880 --> 00:15:41,839
nothing

458
00:15:41,839 --> 00:15:44,160
that cookie will not be sent that's

459
00:15:44,160 --> 00:15:47,040
because by default the cookie is set

460
00:15:47,040 --> 00:15:49,199
only on the site that said it so

461
00:15:49,199 --> 00:15:50,880
navigating to other subdomains doesn't

462
00:15:50,880 --> 00:15:53,680
cause that cookie to be sent

463
00:15:53,680 --> 00:15:55,040
maybe we could do something else with

464
00:15:55,040 --> 00:15:56,480
the subdomain maybe we could do some

465
00:15:56,480 --> 00:15:58,399
phishing since a user trusts the super

466
00:15:58,399 --> 00:16:00,320
domain but in this case we can't steal

467
00:16:00,320 --> 00:16:02,399
the cookie

468
00:16:02,399 --> 00:16:04,800
on the other hand like we just saw if

469
00:16:04,800 --> 00:16:06,880
that cookie is instead set with the

470
00:16:06,880 --> 00:16:10,160
domain equals example.com attribute

471
00:16:10,160 --> 00:16:12,160
now this attack can go through

472
00:16:12,160 --> 00:16:14,399
because we have subdomain takeover

473
00:16:14,399 --> 00:16:16,320
we can steal that cookie

474
00:16:16,320 --> 00:16:17,920
and if we manage to steal a session

475
00:16:17,920 --> 00:16:19,040
cookie

476
00:16:19,040 --> 00:16:21,199
this effectively gives us full account

477
00:16:21,199 --> 00:16:22,639
takeover

478
00:16:22,639 --> 00:16:24,399
on the victim user

479
00:16:24,399 --> 00:16:26,240
we can steal that cookie send it back to

480
00:16:26,240 --> 00:16:28,160
the website ourselves that website

481
00:16:28,160 --> 00:16:30,720
thinks we're that user

482
00:16:30,720 --> 00:16:32,079
how did we achieve this we did it

483
00:16:32,079 --> 00:16:33,600
because the domain was scoped to the

484
00:16:33,600 --> 00:16:35,920
parent domain and because we had some

485
00:16:35,920 --> 00:16:39,279
form of subdomain takeover

486
00:16:39,519 --> 00:16:41,279
that's probably a win for the attackers

487
00:16:41,279 --> 00:16:42,800
in here don't worry i got a win for the

488
00:16:42,800 --> 00:16:44,800
defenders on the next slide but first

489
00:16:44,800 --> 00:16:46,480
let's switch things up

490
00:16:46,480 --> 00:16:48,800
let's say first the user browses to our

491
00:16:48,800 --> 00:16:50,399
malicious subdomain

492
00:16:50,399 --> 00:16:52,240
what we can do now is in the response we

493
00:16:52,240 --> 00:16:55,120
can set a cookie in the user's browser

494
00:16:55,120 --> 00:16:56,800
and if we set it with the domain then

495
00:16:56,800 --> 00:16:58,560
that cookie will be sent along with

496
00:16:58,560 --> 00:17:00,240
every subsequent request to other

497
00:17:00,240 --> 00:17:01,680
subdomains

498
00:17:01,680 --> 00:17:03,199
we can achieve something here called

499
00:17:03,199 --> 00:17:06,000
login cross site request forgery

500
00:17:06,000 --> 00:17:07,839
basically we're logging the victim into

501
00:17:07,839 --> 00:17:09,599
our account

502
00:17:09,599 --> 00:17:11,599
definitely not as severe as account

503
00:17:11,599 --> 00:17:12,880
takeover

504
00:17:12,880 --> 00:17:14,079
but we could still do something

505
00:17:14,079 --> 00:17:16,000
interesting with this we might think

506
00:17:16,000 --> 00:17:17,599
what if we log the victim into our

507
00:17:17,599 --> 00:17:19,039
billing account

508
00:17:19,039 --> 00:17:20,559
if they're thinking that they're in

509
00:17:20,559 --> 00:17:22,640
their billing account they see the bill

510
00:17:22,640 --> 00:17:24,079
pop up maybe they'll add their credit

511
00:17:24,079 --> 00:17:26,160
card details to the website maybe

512
00:17:26,160 --> 00:17:28,480
they'll pay off their bill

513
00:17:28,480 --> 00:17:30,400
again not as severe as account takeover

514
00:17:30,400 --> 00:17:31,360
but

515
00:17:31,360 --> 00:17:32,880
there's an interesting way to prevent

516
00:17:32,880 --> 00:17:35,120
this attack using something called this

517
00:17:35,120 --> 00:17:38,080
prefix so if our session cookie has a

518
00:17:38,080 --> 00:17:40,320
name starting with underscore underscore

519
00:17:40,320 --> 00:17:41,919
host dash

520
00:17:41,919 --> 00:17:43,919
then the web browser will not allow that

521
00:17:43,919 --> 00:17:45,520
cookie to be set with the domain

522
00:17:45,520 --> 00:17:47,039
attribute

523
00:17:47,039 --> 00:17:48,720
so the sub domain can't scope it to the

524
00:17:48,720 --> 00:17:50,880
parent domain it'll just be denied by

525
00:17:50,880 --> 00:17:52,320
the browser

526
00:17:52,320 --> 00:17:53,760
and this works as long as our

527
00:17:53,760 --> 00:17:56,160
application was only on this one other

528
00:17:56,160 --> 00:17:57,919
billing example dot com

529
00:17:57,919 --> 00:17:59,679
if billing sets the cookie and billing

530
00:17:59,679 --> 00:18:01,919
reads the cookie

531
00:18:01,919 --> 00:18:03,120
i don't know about you i've never

532
00:18:03,120 --> 00:18:04,799
actually seen someone implement this in

533
00:18:04,799 --> 00:18:06,799
practice but could be a good way to get

534
00:18:06,799 --> 00:18:10,320
some additional defense in depth

535
00:18:11,520 --> 00:18:12,840
so that's the domain

536
00:18:12,840 --> 00:18:15,039
attribute next up quick slide on the

537
00:18:15,039 --> 00:18:17,200
port we just talked about sub domain

538
00:18:17,200 --> 00:18:19,440
takeover what if there was such a thing

539
00:18:19,440 --> 00:18:21,840
as subport takeover

540
00:18:21,840 --> 00:18:23,520
let's say now as an attacker we're able

541
00:18:23,520 --> 00:18:25,600
to run a server on some other port on

542
00:18:25,600 --> 00:18:27,039
the same hostname

543
00:18:27,039 --> 00:18:29,919
well there's no way to prevent this but

544
00:18:29,919 --> 00:18:33,280
if the attacker visits our subport

545
00:18:33,280 --> 00:18:35,120
we're going to get that cookie there's

546
00:18:35,120 --> 00:18:36,640
nothing that can be set in terms of

547
00:18:36,640 --> 00:18:39,280
cookie attributes to provide isolation

548
00:18:39,280 --> 00:18:40,799
between different ports

549
00:18:40,799 --> 00:18:43,039
i guess as the defender just

550
00:18:43,039 --> 00:18:44,880
don't let hackers run web servers on

551
00:18:44,880 --> 00:18:46,720
different ports

552
00:18:46,720 --> 00:18:48,080
i guess also don't design your

553
00:18:48,080 --> 00:18:49,679
application for this to be a part of its

554
00:18:49,679 --> 00:18:51,919
functionality

555
00:18:51,919 --> 00:18:53,679
but something interesting and we'll come

556
00:18:53,679 --> 00:18:56,559
back to this in a little bit

557
00:18:56,559 --> 00:18:58,000
finally we're going to look at the same

558
00:18:58,000 --> 00:18:59,440
site attribute

559
00:18:59,440 --> 00:19:01,120
and before we talk about same site from

560
00:19:01,120 --> 00:19:02,720
a security perspective

561
00:19:02,720 --> 00:19:04,320
let's just explain why this isn't the

562
00:19:04,320 --> 00:19:06,240
default behavior or the only option for

563
00:19:06,240 --> 00:19:08,240
cookies

564
00:19:08,240 --> 00:19:09,520
i'm going to start with an example

565
00:19:09,520 --> 00:19:11,200
that's not about security

566
00:19:11,200 --> 00:19:13,200
so when i say facebook.com don't worry

567
00:19:13,200 --> 00:19:14,720
i'm not dropping a vulnerability in

568
00:19:14,720 --> 00:19:16,080
facebook

569
00:19:16,080 --> 00:19:18,400
but facebook has that pervasive like

570
00:19:18,400 --> 00:19:19,440
button

571
00:19:19,440 --> 00:19:21,760
sites across the internet can embed that

572
00:19:21,760 --> 00:19:23,440
like button

573
00:19:23,440 --> 00:19:25,679
and so as an example here facebook's the

574
00:19:25,679 --> 00:19:27,360
green website

575
00:19:27,360 --> 00:19:29,280
and we've got these yellow purple and

576
00:19:29,280 --> 00:19:30,960
blue websites all embedding that like

577
00:19:30,960 --> 00:19:31,919
button

578
00:19:31,919 --> 00:19:33,840
when the user visits let's say the

579
00:19:33,840 --> 00:19:36,480
yellow website their browser also has to

580
00:19:36,480 --> 00:19:38,880
fetch that like button and that request

581
00:19:38,880 --> 00:19:41,360
ends up sending this third-party cookie

582
00:19:41,360 --> 00:19:43,360
associated with facebook

583
00:19:43,360 --> 00:19:44,640
so the yellow site doesn't get the

584
00:19:44,640 --> 00:19:46,000
facebook cookie

585
00:19:46,000 --> 00:19:48,240
but facebook gets the facebook cookie

586
00:19:48,240 --> 00:19:50,240
even though that request initially came

587
00:19:50,240 --> 00:19:52,640
from the yellow site it's called a third

588
00:19:52,640 --> 00:19:54,480
party cookie and we have a way to

589
00:19:54,480 --> 00:19:56,400
disable this functionality

590
00:19:56,400 --> 00:19:59,440
using the same site attribute

591
00:19:59,440 --> 00:20:01,760
that behavior we just saw is called none

592
00:20:01,760 --> 00:20:04,240
same site equals none it means send that

593
00:20:04,240 --> 00:20:06,240
cookie along with cross site requests

594
00:20:06,240 --> 00:20:08,559
don't worry about it maybe only set that

595
00:20:08,559 --> 00:20:11,039
if you're doing tracking or analytics

596
00:20:11,039 --> 00:20:12,799
on the other hand we've got this

597
00:20:12,799 --> 00:20:15,120
property called same site equals lacks

598
00:20:15,120 --> 00:20:16,960
which will ensure that the cookie is

599
00:20:16,960 --> 00:20:18,080
only sent

600
00:20:18,080 --> 00:20:19,600
when we navigate directly to that

601
00:20:19,600 --> 00:20:21,039
website

602
00:20:21,039 --> 00:20:22,640
so if we're just fetching content

603
00:20:22,640 --> 00:20:24,720
embedded in the yellow site

604
00:20:24,720 --> 00:20:26,480
then we don't send the green cookie only

605
00:20:26,480 --> 00:20:28,240
send the green cookie when we browse to

606
00:20:28,240 --> 00:20:29,679
the green website

607
00:20:29,679 --> 00:20:31,760
finally same site equals lack says only

608
00:20:31,760 --> 00:20:34,000
send that cookie when we follow a link

609
00:20:34,000 --> 00:20:36,480
from the green website to itself

610
00:20:36,480 --> 00:20:37,440
but

611
00:20:37,440 --> 00:20:38,720
lacks and strict we're not going to get

612
00:20:38,720 --> 00:20:40,960
so much into let's talk just about none

613
00:20:40,960 --> 00:20:43,840
versus yes

614
00:20:44,240 --> 00:20:45,840
so we'll start with none and this is

615
00:20:45,840 --> 00:20:47,840
what we saw before where

616
00:20:47,840 --> 00:20:49,919
if we are conducting a cross-site

617
00:20:49,919 --> 00:20:52,320
request forgery attack

618
00:20:52,320 --> 00:20:54,720
even though the request is initiated

619
00:20:54,720 --> 00:20:56,880
from our malicious website

620
00:20:56,880 --> 00:20:59,600
going to this other example.com the web

621
00:20:59,600 --> 00:21:01,120
browser will happily include that

622
00:21:01,120 --> 00:21:03,200
authentication material in the session

623
00:21:03,200 --> 00:21:06,240
cookie send it over this request to

624
00:21:06,240 --> 00:21:07,600
change the user's email to the

625
00:21:07,600 --> 00:21:09,120
attacker's email address gets

626
00:21:09,120 --> 00:21:10,960
implemented

627
00:21:10,960 --> 00:21:13,039
on the other hand if this session cookie

628
00:21:13,039 --> 00:21:15,200
is set with same site equals lacks or

629
00:21:15,200 --> 00:21:18,080
strict that cookie no longer gets sent

630
00:21:18,080 --> 00:21:20,400
this is treated as a cross site request

631
00:21:20,400 --> 00:21:22,000
since it originated from a different

632
00:21:22,000 --> 00:21:23,200
domain

633
00:21:23,200 --> 00:21:26,000
meaning same site attribute can be an

634
00:21:26,000 --> 00:21:27,760
effective additional mitigation to

635
00:21:27,760 --> 00:21:29,200
protect against cross-site request

636
00:21:29,200 --> 00:21:30,480
forgery

637
00:21:30,480 --> 00:21:32,400
it's not a silver bullet

638
00:21:32,400 --> 00:21:34,320
like i said same site's only a few years

639
00:21:34,320 --> 00:21:36,640
old so if you still have legacy users on

640
00:21:36,640 --> 00:21:38,400
a legacy browser

641
00:21:38,400 --> 00:21:40,080
then their browsers may not implement

642
00:21:40,080 --> 00:21:41,840
this attribute

643
00:21:41,840 --> 00:21:43,120
something to add in addition to

644
00:21:43,120 --> 00:21:44,960
cross-site request forgery tokens but it

645
00:21:44,960 --> 00:21:46,559
can be an effective layer of defense and

646
00:21:46,559 --> 00:21:48,879
depth

647
00:21:50,559 --> 00:21:52,159
that being said

648
00:21:52,159 --> 00:21:54,960
if we go back to subdomain takeover

649
00:21:54,960 --> 00:21:56,880
so on the previous slide this was the

650
00:21:56,880 --> 00:21:58,720
user browsing to our malicious website

651
00:21:58,720 --> 00:22:01,280
evil.com same site blocked the sea surf

652
00:22:01,280 --> 00:22:02,240
attack

653
00:22:02,240 --> 00:22:04,000
on the other hand if we have subdomain

654
00:22:04,000 --> 00:22:05,120
takeover

655
00:22:05,120 --> 00:22:07,280
the same site specification treats the

656
00:22:07,280 --> 00:22:10,080
subdomain as the same origin

657
00:22:10,080 --> 00:22:13,039
so this will be a same site request even

658
00:22:13,039 --> 00:22:14,880
though it's a different host name

659
00:22:14,880 --> 00:22:16,720
that same site cookie is going to be

660
00:22:16,720 --> 00:22:18,320
sent along with that cross-site request

661
00:22:18,320 --> 00:22:21,200
forgery request

662
00:22:21,440 --> 00:22:23,520
so if we've got even just cross-site

663
00:22:23,520 --> 00:22:25,360
scripting on a sub-domain

664
00:22:25,360 --> 00:22:26,799
we can now achieve

665
00:22:26,799 --> 00:22:29,760
cross-site request forgery so again

666
00:22:29,760 --> 00:22:32,080
same site is not a sole provider of

667
00:22:32,080 --> 00:22:33,760
protection against cross-site request

668
00:22:33,760 --> 00:22:34,799
forgery

669
00:22:34,799 --> 00:22:36,400
still an effective layer of defense and

670
00:22:36,400 --> 00:22:38,720
depth

671
00:22:39,440 --> 00:22:41,919
now because same site's so new

672
00:22:41,919 --> 00:22:43,760
with any new implementation we're going

673
00:22:43,760 --> 00:22:46,000
to see some security bugs

674
00:22:46,000 --> 00:22:48,559
fortunately these have all been fixed

675
00:22:48,559 --> 00:22:50,159
maybe if you're a pen tester you're sad

676
00:22:50,159 --> 00:22:51,760
about that but i kind of like to see

677
00:22:51,760 --> 00:22:54,559
bugs get fixed every now and then

678
00:22:54,559 --> 00:22:56,400
but when it was first being developed

679
00:22:56,400 --> 00:22:57,840
same site had a few ways you could

680
00:22:57,840 --> 00:22:59,760
bypass this property

681
00:22:59,760 --> 00:23:01,120
and again these are all fixed i'm just

682
00:23:01,120 --> 00:23:02,320
trying to show that whenever we

683
00:23:02,320 --> 00:23:04,559
introduce a new browser technology there

684
00:23:04,559 --> 00:23:06,720
might be good ways we can exploit that

685
00:23:06,720 --> 00:23:08,960
so when same site first came out

686
00:23:08,960 --> 00:23:10,720
still in the alpha stages you could send

687
00:23:10,720 --> 00:23:12,320
that same site cookie on cross site

688
00:23:12,320 --> 00:23:15,360
requests for example by clicking a link

689
00:23:15,360 --> 00:23:17,200
within an iframe

690
00:23:17,200 --> 00:23:19,520
or turning a page into reader mode and

691
00:23:19,520 --> 00:23:21,520
then making that request

692
00:23:21,520 --> 00:23:23,520
but again these are all fixed now

693
00:23:23,520 --> 00:23:25,520
some things that haven't been fixed some

694
00:23:25,520 --> 00:23:27,039
weird browser quirks

695
00:23:27,039 --> 00:23:30,000
in firefox if you drag a url from one

696
00:23:30,000 --> 00:23:32,480
website into your address bar and it

697
00:23:32,480 --> 00:23:35,280
sends you over to another website

698
00:23:35,280 --> 00:23:36,880
that's the same site request even though

699
00:23:36,880 --> 00:23:38,720
it's from two different websites that

700
00:23:38,720 --> 00:23:41,440
same site cookie will still be sent

701
00:23:41,440 --> 00:23:42,799
and it seems like they don't really have

702
00:23:42,799 --> 00:23:44,480
plans to address that

703
00:23:44,480 --> 00:23:46,159
not really treating it as a security

704
00:23:46,159 --> 00:23:48,960
issue if you can exploit it though

705
00:23:48,960 --> 00:23:52,320
maybe go buy that researcher a coffee

706
00:23:52,320 --> 00:23:54,480
um and i know internet explorer was just

707
00:23:54,480 --> 00:23:56,880
sunsetted yesterday pour one out

708
00:23:56,880 --> 00:23:59,440
but we can still make fun of it right

709
00:23:59,440 --> 00:24:00,240
so

710
00:24:00,240 --> 00:24:03,039
internet explorer in classic microsoft

711
00:24:03,039 --> 00:24:05,520
fashion has redefined the standard

712
00:24:05,520 --> 00:24:07,919
and said ports don't have any place in

713
00:24:07,919 --> 00:24:09,760
the origin

714
00:24:09,760 --> 00:24:11,279
so that example we saw before with

715
00:24:11,279 --> 00:24:13,039
cookies not respecting port-based

716
00:24:13,039 --> 00:24:14,880
isolation can happen with the same

717
00:24:14,880 --> 00:24:17,200
origin policy in general

718
00:24:17,200 --> 00:24:19,360
if your users use ie that can open you

719
00:24:19,360 --> 00:24:21,360
up to these cross-origin reads and maybe

720
00:24:21,360 --> 00:24:22,960
even more nuanced cross-site request

721
00:24:22,960 --> 00:24:24,400
forgery attacks

722
00:24:24,400 --> 00:24:26,320
but it's not just ie

723
00:24:26,320 --> 00:24:28,720
we also have chromium-based edge which

724
00:24:28,720 --> 00:24:31,760
allows cross-domain reading of applied

725
00:24:31,760 --> 00:24:34,000
css stylesheet rules

726
00:24:34,000 --> 00:24:36,080
it's a mouthful what does that mean

727
00:24:36,080 --> 00:24:38,240
well maybe if we're a hacker

728
00:24:38,240 --> 00:24:40,240
and a user on edge browses to our

729
00:24:40,240 --> 00:24:41,360
website

730
00:24:41,360 --> 00:24:43,919
we can read the css rules that are

731
00:24:43,919 --> 00:24:45,360
applied to that other website which

732
00:24:45,360 --> 00:24:47,840
might change for example depending on

733
00:24:47,840 --> 00:24:50,799
whether or not the user is logged in

734
00:24:50,799 --> 00:24:52,799
so against edge users this can provide a

735
00:24:52,799 --> 00:24:54,240
way to detect

736
00:24:54,240 --> 00:24:55,760
whether or not a user is logged in on

737
00:24:55,760 --> 00:24:57,440
another website maybe for further

738
00:24:57,440 --> 00:24:59,120
targeting i just think it's kind of

739
00:24:59,120 --> 00:25:02,719
funny that edge has to change everything

740
00:25:03,679 --> 00:25:05,919
anyway that's cookies

741
00:25:05,919 --> 00:25:07,520
gonna move on to our third and final

742
00:25:07,520 --> 00:25:08,880
topic

743
00:25:08,880 --> 00:25:11,120
so we're looking at dns rebinding which

744
00:25:11,120 --> 00:25:13,279
i want in this presentation to view as a

745
00:25:13,279 --> 00:25:16,159
gap in the same origin policy

746
00:25:16,159 --> 00:25:18,000
we said the origin is defined in terms

747
00:25:18,000 --> 00:25:19,840
of three components

748
00:25:19,840 --> 00:25:21,840
protocol horst pot

749
00:25:21,840 --> 00:25:23,279
sorry port

750
00:25:23,279 --> 00:25:25,200
importantly what is not included in that

751
00:25:25,200 --> 00:25:27,600
definition is what the hostname resolves

752
00:25:27,600 --> 00:25:28,720
to

753
00:25:28,720 --> 00:25:30,880
the hostname is a part of the origin but

754
00:25:30,880 --> 00:25:32,400
if we switch that to resolve to

755
00:25:32,400 --> 00:25:33,600
something else

756
00:25:33,600 --> 00:25:35,760
that's fine different website same

757
00:25:35,760 --> 00:25:36,880
origin

758
00:25:36,880 --> 00:25:38,799
what does this look like i've got two

759
00:25:38,799 --> 00:25:40,799
browsers here

760
00:25:40,799 --> 00:25:42,720
on the left browser

761
00:25:42,720 --> 00:25:45,200
i've navigated to this website what's

762
00:25:45,200 --> 00:25:48,000
called rebinder.nofetch

763
00:25:48,000 --> 00:25:50,000
and at the time of browsing

764
00:25:50,000 --> 00:25:52,320
this record pointed to my

765
00:25:52,320 --> 00:25:53,840
infrastructure it's pointing to my

766
00:25:53,840 --> 00:25:56,000
public server out there and we get the

767
00:25:56,000 --> 00:25:58,320
attacker website

768
00:25:58,320 --> 00:26:00,400
now on the right side

769
00:26:00,400 --> 00:26:02,880
same exact url

770
00:26:02,880 --> 00:26:04,080
but

771
00:26:04,080 --> 00:26:06,880
after navigating to the page

772
00:26:06,880 --> 00:26:10,880
the hostname was rebound to localhost

773
00:26:10,880 --> 00:26:12,480
so on one side we have this public

774
00:26:12,480 --> 00:26:15,200
server on the other side we have a local

775
00:26:15,200 --> 00:26:16,480
file server

776
00:26:16,480 --> 00:26:18,640
that's only bound to localhost

777
00:26:18,640 --> 00:26:20,640
obviously two different websites but

778
00:26:20,640 --> 00:26:22,400
under the same origin policy these are

779
00:26:22,400 --> 00:26:24,960
the exact same origin so we can achieve

780
00:26:24,960 --> 00:26:27,520
cross site reads from sorry same site

781
00:26:27,520 --> 00:26:30,400
reads from one to the other

782
00:26:30,400 --> 00:26:31,760
let's take a look at how we might

783
00:26:31,760 --> 00:26:33,279
exploit this

784
00:26:33,279 --> 00:26:35,600
in this example the victim user has

785
00:26:35,600 --> 00:26:38,480
browsed to my malicious web server after

786
00:26:38,480 --> 00:26:40,320
they landed on that page i'm running

787
00:26:40,320 --> 00:26:41,600
javascript

788
00:26:41,600 --> 00:26:44,159
i've then rebound that hostname to point

789
00:26:44,159 --> 00:26:45,600
to localhost

790
00:26:45,600 --> 00:26:47,679
and after that propagates through

791
00:26:47,679 --> 00:26:50,640
the internet series of tubes

792
00:26:50,640 --> 00:26:53,360
if i let that settle i can now make

793
00:26:53,360 --> 00:26:56,960
same site requests to the exact same url

794
00:26:56,960 --> 00:26:58,400
but now all of a sudden my attacker

795
00:26:58,400 --> 00:27:00,240
infrastructure javascript running on my

796
00:27:00,240 --> 00:27:01,200
page

797
00:27:01,200 --> 00:27:03,520
can read the contents of the local file

798
00:27:03,520 --> 00:27:06,400
server

799
00:27:06,400 --> 00:27:07,840
in this case it's only possible in

800
00:27:07,840 --> 00:27:09,440
firefox

801
00:27:09,440 --> 00:27:10,960
while i was making these slides i

802
00:27:10,960 --> 00:27:13,039
noticed chrome had recently introduced a

803
00:27:13,039 --> 00:27:15,360
new specification called private network

804
00:27:15,360 --> 00:27:16,720
access

805
00:27:16,720 --> 00:27:18,880
which effectively adds the ip address

806
00:27:18,880 --> 00:27:20,720
we're resolving to to the definition of

807
00:27:20,720 --> 00:27:23,279
the origin so same exact attack i'm

808
00:27:23,279 --> 00:27:25,360
trying here but we get again these three

809
00:27:25,360 --> 00:27:27,520
big red javascript errors at the bottom

810
00:27:27,520 --> 00:27:29,520
so let's blow those up chrome says

811
00:27:29,520 --> 00:27:31,039
there's two reasons we're not going to

812
00:27:31,039 --> 00:27:33,360
allow this request through

813
00:27:33,360 --> 00:27:36,720
one it was not in a secure context

814
00:27:36,720 --> 00:27:40,240
meaning the sites were on our http

815
00:27:40,240 --> 00:27:41,279
two

816
00:27:41,279 --> 00:27:42,960
and this is the rub

817
00:27:42,960 --> 00:27:44,720
the resource is in a more private

818
00:27:44,720 --> 00:27:46,960
address space local

819
00:27:46,960 --> 00:27:49,360
excuse me meaning when we first browsed

820
00:27:49,360 --> 00:27:50,880
to the website that was a public ip

821
00:27:50,880 --> 00:27:52,000
address

822
00:27:52,000 --> 00:27:53,360
now we're trying to retrieve this

823
00:27:53,360 --> 00:27:55,919
localhost 127001.

824
00:27:55,919 --> 00:27:57,600
chrome can block that it detected the

825
00:27:57,600 --> 00:27:59,520
dns rebinding attack and put a stop to

826
00:27:59,520 --> 00:28:01,200
it

827
00:28:01,200 --> 00:28:02,720
but let's talk about that first bullet

828
00:28:02,720 --> 00:28:04,240
point a little bit more

829
00:28:04,240 --> 00:28:07,200
the request was not in a secure context

830
00:28:07,200 --> 00:28:09,279
why does that matter what happens if we

831
00:28:09,279 --> 00:28:12,080
try the same thing from a secure context

832
00:28:12,080 --> 00:28:13,919
well we're going to get this big error

833
00:28:13,919 --> 00:28:15,039
popping up

834
00:28:15,039 --> 00:28:16,640
to demonstrate this i've pointed my

835
00:28:16,640 --> 00:28:19,279
subdomain example.nofetch

836
00:28:19,279 --> 00:28:21,520
to example.com

837
00:28:21,520 --> 00:28:23,120
and when i try and access that over

838
00:28:23,120 --> 00:28:25,279
https

839
00:28:25,279 --> 00:28:28,000
we get a cert mismatch

840
00:28:28,000 --> 00:28:29,760
so the certificate presented by

841
00:28:29,760 --> 00:28:31,360
example.com

842
00:28:31,360 --> 00:28:33,039
is signed by a trusted certificate

843
00:28:33,039 --> 00:28:35,440
authority it's installed on my system

844
00:28:35,440 --> 00:28:37,520
everything looks good but the host name

845
00:28:37,520 --> 00:28:40,240
on it example.com doesn't match the site

846
00:28:40,240 --> 00:28:42,840
that the user was navigating to

847
00:28:42,840 --> 00:28:44,640
example.nofetch

848
00:28:44,640 --> 00:28:46,399
and yes we know that users will often

849
00:28:46,399 --> 00:28:48,399
click through these warnings but this

850
00:28:48,399 --> 00:28:50,159
warning and the option to click through

851
00:28:50,159 --> 00:28:52,399
it only shows up when we're navigating

852
00:28:52,399 --> 00:28:54,720
to that page if we try the same thing

853
00:28:54,720 --> 00:28:57,279
with javascript the request is outright

854
00:28:57,279 --> 00:28:58,399
blocked

855
00:28:58,399 --> 00:29:00,080
there's no way to click through this and

856
00:29:00,080 --> 00:29:03,279
say yes i am sure i wanted to do a same

857
00:29:03,279 --> 00:29:05,279
site read over to this

858
00:29:05,279 --> 00:29:08,559
secure website with a ssl error

859
00:29:08,559 --> 00:29:10,159
so that's why chrome and their private

860
00:29:10,159 --> 00:29:12,320
network access implementation doesn't

861
00:29:12,320 --> 00:29:13,600
care if you do this from a secure

862
00:29:13,600 --> 00:29:14,799
context

863
00:29:14,799 --> 00:29:16,880
dns rebinding just shouldn't be possible

864
00:29:16,880 --> 00:29:19,200
in a secure context because of the cert

865
00:29:19,200 --> 00:29:20,799
mismatch

866
00:29:20,799 --> 00:29:22,320
so why am i still talking about this

867
00:29:22,320 --> 00:29:25,200
surely all web browsers fully validate

868
00:29:25,200 --> 00:29:27,360
ssl

869
00:29:27,360 --> 00:29:29,679
well there's one web browser

870
00:29:29,679 --> 00:29:32,080
known to you pin testers out there

871
00:29:32,080 --> 00:29:34,000
called burp suite

872
00:29:34,000 --> 00:29:36,320
which until recently did not validate

873
00:29:36,320 --> 00:29:37,840
ssl at all

874
00:29:37,840 --> 00:29:39,279
and yes this could open you up to

875
00:29:39,279 --> 00:29:41,200
man-in-the-middle attacks but

876
00:29:41,200 --> 00:29:42,799
if you're an internal pin tester at a

877
00:29:42,799 --> 00:29:44,640
company maybe you're on a vpn and that

878
00:29:44,640 --> 00:29:47,279
makes man-in-the-middle attacks harder

879
00:29:47,279 --> 00:29:49,039
nonetheless

880
00:29:49,039 --> 00:29:51,200
internal pin testers using burp suite

881
00:29:51,200 --> 00:29:52,960
were still opening their companies up to

882
00:29:52,960 --> 00:29:55,600
the risk of dns rebinding scraping

883
00:29:55,600 --> 00:29:57,120
internal websites

884
00:29:57,120 --> 00:30:00,000
that implemented https

885
00:30:00,000 --> 00:30:02,000
fortunately i returned i reported this

886
00:30:02,000 --> 00:30:04,559
over to the great guys at portswigger

887
00:30:04,559 --> 00:30:06,240
they said thanks for sending this over

888
00:30:06,240 --> 00:30:08,320
and now we have an option in the latest

889
00:30:08,320 --> 00:30:11,039
early adopter version of burp suite to

890
00:30:11,039 --> 00:30:13,600
enable tls validation

891
00:30:13,600 --> 00:30:15,279
now if we try the same thing we get this

892
00:30:15,279 --> 00:30:17,520
big error cert mismatch

893
00:30:17,520 --> 00:30:19,279
and this is in early adopter for now but

894
00:30:19,279 --> 00:30:20,720
i'm hoping once it undergoes a little

895
00:30:20,720 --> 00:30:22,480
bit more testing and we're sure it's not

896
00:30:22,480 --> 00:30:24,799
breaking too many pintester's workflows

897
00:30:24,799 --> 00:30:28,080
this will just be on by default

898
00:30:28,080 --> 00:30:30,000
so there we go

899
00:30:30,000 --> 00:30:31,919
i wanted to include a few further topics

900
00:30:31,919 --> 00:30:33,919
in case you want to read more at home

901
00:30:33,919 --> 00:30:38,080
but that's that let's open it up for q a

902
00:30:41,760 --> 00:30:44,000
yes

903
00:30:47,760 --> 00:30:49,600
so there's a really good article out of

904
00:30:49,600 --> 00:30:51,360
wired a few years ago

905
00:30:51,360 --> 00:30:53,679
that demonstrated how often these

906
00:30:53,679 --> 00:30:56,080
attacks happen against home devices

907
00:30:56,080 --> 00:30:57,840
internet of things think

908
00:30:57,840 --> 00:31:00,880
maybe even against someone's router

909
00:31:00,880 --> 00:31:02,640
i'm not sure how often they actually get

910
00:31:02,640 --> 00:31:04,240
exploited but a lot of products out

911
00:31:04,240 --> 00:31:06,399
there are actually vulnerable to this

912
00:31:06,399 --> 00:31:08,320
probably because a lot of these home

913
00:31:08,320 --> 00:31:09,760
internet of things devices don't

914
00:31:09,760 --> 00:31:13,158
implement ssl

915
00:31:18,320 --> 00:31:20,080
thank you forget everyone's so much

916
00:31:20,080 --> 00:31:22,480
louder up here but chris was asking how

917
00:31:22,480 --> 00:31:24,880
often do these dns rebinding attacks

918
00:31:24,880 --> 00:31:27,840
happen in practice

919
00:31:28,880 --> 00:31:30,840
thanks

920
00:31:30,840 --> 00:31:32,880
yes other browsers did you test just

921
00:31:32,880 --> 00:31:35,120
curiosity sure so the question was what

922
00:31:35,120 --> 00:31:37,200
other browsers did i test for this

923
00:31:37,200 --> 00:31:39,039
i was initially looking into this when i

924
00:31:39,039 --> 00:31:41,679
saw a recent cve for zap

925
00:31:41,679 --> 00:31:44,159
zap had a cve filed for they didn't

926
00:31:44,159 --> 00:31:47,279
validate ssl and they fixed that so i

927
00:31:47,279 --> 00:31:50,000
figured why not look at burp

928
00:31:50,000 --> 00:31:52,240
burps bug bounty program specifically

929
00:31:52,240 --> 00:31:54,080
called out in their policy

930
00:31:54,080 --> 00:31:56,480
we don't validate ssl and if you tell us

931
00:31:56,480 --> 00:31:58,000
about it we know that that's a design

932
00:31:58,000 --> 00:31:59,120
decision we want to make it

933
00:31:59,120 --> 00:32:00,480
interoperable

934
00:32:00,480 --> 00:32:01,919
but still they hadn't thought about this

935
00:32:01,919 --> 00:32:04,720
edge case so they were able to fix that

936
00:32:04,720 --> 00:32:06,399
besides that all of the major web

937
00:32:06,399 --> 00:32:08,880
browsers are going to fully validate ssl

938
00:32:08,880 --> 00:32:10,480
thank you

939
00:32:10,480 --> 00:32:12,320
anyone else

940
00:32:12,320 --> 00:32:15,320
yes

941
00:32:26,640 --> 00:32:28,399
great question we could have another

942
00:32:28,399 --> 00:32:30,559
talk just on this so the question was

943
00:32:30,559 --> 00:32:33,120
how did the dns rebinding work

944
00:32:33,120 --> 00:32:35,679
how did that dns record change over

945
00:32:35,679 --> 00:32:37,360
between when the victim first visited

946
00:32:37,360 --> 00:32:38,960
the website and by the time my

947
00:32:38,960 --> 00:32:41,519
javascript made that same site request

948
00:32:41,519 --> 00:32:44,080
so in this case just for testing

949
00:32:44,080 --> 00:32:46,000
i was just flipping over the domain name

950
00:32:46,000 --> 00:32:48,399
in my route 53 records doing it manually

951
00:32:48,399 --> 00:32:49,679
by myself

952
00:32:49,679 --> 00:32:52,080
when i've exploited this in the past

953
00:32:52,080 --> 00:32:53,360
i have a hook

954
00:32:53,360 --> 00:32:55,360
on the website so as soon as the browser

955
00:32:55,360 --> 00:32:57,600
lands on there i've got api calls set up

956
00:32:57,600 --> 00:32:59,440
to automatically switch over the domain

957
00:32:59,440 --> 00:33:00,320
name

958
00:33:00,320 --> 00:33:02,000
there's a lot of great tooling out there

959
00:33:02,000 --> 00:33:03,440
if you want to conduct your own dns

960
00:33:03,440 --> 00:33:05,440
rebindings attacks

961
00:33:05,440 --> 00:33:07,519
where you can have it for example

962
00:33:07,519 --> 00:33:09,039
alternate between the two different

963
00:33:09,039 --> 00:33:10,880
sites that you're trying to hit

964
00:33:10,880 --> 00:33:12,559
so that when the user first browses to

965
00:33:12,559 --> 00:33:13,919
the website they get your attacker

966
00:33:13,919 --> 00:33:15,120
infrastructure

967
00:33:15,120 --> 00:33:16,720
second time they resolve that it

968
00:33:16,720 --> 00:33:19,519
resolves to the local host for example

969
00:33:19,519 --> 00:33:22,559
but great question thank you

970
00:33:22,559 --> 00:33:25,840
yeah please

971
00:33:48,880 --> 00:33:50,080
thank you for the question i'm

972
00:33:50,080 --> 00:33:51,760
definitely not here to talk about

973
00:33:51,760 --> 00:33:54,480
capital one so they're not affiliated

974
00:33:54,480 --> 00:33:56,640
with the talk but yeah suppose

975
00:33:56,640 --> 00:33:58,480
the question was suppose we've got a

976
00:33:58,480 --> 00:34:00,000
company out there

977
00:34:00,000 --> 00:34:02,000
and we're giving developers access to do

978
00:34:02,000 --> 00:34:04,000
things with subdomains

979
00:34:04,000 --> 00:34:06,080
i would say that definitely introduces a

980
00:34:06,080 --> 00:34:09,280
possibility for insider threat

981
00:34:09,280 --> 00:34:12,879
either intentional or maybe accidental

982
00:34:12,879 --> 00:34:14,800
but like i said earlier if we've got

983
00:34:14,800 --> 00:34:16,560
cross-site scripting on some sub-domain

984
00:34:16,560 --> 00:34:18,079
we don't care about

985
00:34:18,079 --> 00:34:19,839
that opens up all of these different

986
00:34:19,839 --> 00:34:22,079
attacks that we don't normally see

987
00:34:22,079 --> 00:34:22,800
so

988
00:34:22,800 --> 00:34:24,879
if that's accidentally misconfigured

989
00:34:24,879 --> 00:34:27,199
maybe someone finds it exploits it

990
00:34:27,199 --> 00:34:29,119
if it's intentionally misconfigured

991
00:34:29,119 --> 00:34:31,040
giving developers access to create their

992
00:34:31,040 --> 00:34:33,119
own subdomains can definitely lead to

993
00:34:33,119 --> 00:34:35,839
security issues

994
00:34:36,399 --> 00:34:37,839
thanks

995
00:34:37,839 --> 00:34:40,719
any other questions

996
00:34:42,159 --> 00:34:45,159
yes

997
00:34:51,119 --> 00:34:52,879
so the question was did i try this out

998
00:34:52,879 --> 00:34:54,800
with a wildcard cert

999
00:34:54,800 --> 00:34:56,719
right on this previous site we saw i'm

1000
00:34:56,719 --> 00:34:58,640
getting the error because

1001
00:34:58,640 --> 00:35:00,800
the web server example.com is offering

1002
00:35:00,800 --> 00:35:02,800
up a certificate that doesn't match my

1003
00:35:02,800 --> 00:35:04,240
host name

1004
00:35:04,240 --> 00:35:06,400
and that's what would be blocking it so

1005
00:35:06,400 --> 00:35:07,920
we have to think about the certificate

1006
00:35:07,920 --> 00:35:09,920
on the target site

1007
00:35:09,920 --> 00:35:11,599
if the target site has a wildcard

1008
00:35:11,599 --> 00:35:13,200
certificate

1009
00:35:13,200 --> 00:35:15,520
then we could get this attack to work if

1010
00:35:15,520 --> 00:35:17,680
we have a subdomain of that wild card

1011
00:35:17,680 --> 00:35:20,240
insert again you can't have a

1012
00:35:20,240 --> 00:35:22,960
certificate for asterisk.com

1013
00:35:22,960 --> 00:35:24,480
but if we've got a wildcard let's say

1014
00:35:24,480 --> 00:35:26,720
star.example.com

1015
00:35:26,720 --> 00:35:28,240
and if we get

1016
00:35:28,240 --> 00:35:30,320
subdomain takeover then yes we could

1017
00:35:30,320 --> 00:35:32,240
perform dns rebinding attacks on other

1018
00:35:32,240 --> 00:35:33,520
subdomains

1019
00:35:33,520 --> 00:35:35,520
even if they implement ssl

1020
00:35:35,520 --> 00:35:37,440
thank you

1021
00:35:37,440 --> 00:35:40,160
other questions

1022
00:35:43,040 --> 00:35:46,720
all right well with oh one more

1023
00:35:49,599 --> 00:35:52,640
sorry can you say that again

1024
00:35:53,359 --> 00:35:55,680
how does this apply to iframes great

1025
00:35:55,680 --> 00:35:57,200
question let's look at a few different

1026
00:35:57,200 --> 00:35:59,280
slides

1027
00:35:59,280 --> 00:36:01,599
one we saw that because iframes

1028
00:36:01,599 --> 00:36:02,880
implement things a little bit

1029
00:36:02,880 --> 00:36:04,079
differently

1030
00:36:04,079 --> 00:36:06,320
we can see bugs show up in iframes when

1031
00:36:06,320 --> 00:36:08,800
they don't show up in other contexts

1032
00:36:08,800 --> 00:36:12,079
so it's one more edge case to look at

1033
00:36:12,079 --> 00:36:14,320
but i would say the most common way

1034
00:36:14,320 --> 00:36:16,720
iframes are going to show up here

1035
00:36:16,720 --> 00:36:20,560
is when we go back all the way to

1036
00:36:20,560 --> 00:36:23,040
resource embedding

1037
00:36:23,040 --> 00:36:24,640
which we said was allowed by the same

1038
00:36:24,640 --> 00:36:27,520
origin policy wow we're really going

1039
00:36:27,520 --> 00:36:30,000
back sorry

1040
00:36:30,720 --> 00:36:32,880
so same origin embeds are allowed by the

1041
00:36:32,880 --> 00:36:35,200
same origin policy that's specifically

1042
00:36:35,200 --> 00:36:37,839
what allows us to frame another website

1043
00:36:37,839 --> 00:36:40,480
on our website and from there we can try

1044
00:36:40,480 --> 00:36:41,839
all different kinds of attacks but

1045
00:36:41,839 --> 00:36:44,640
iframing itself is allowed

1046
00:36:44,640 --> 00:36:46,560
does that answer your question

1047
00:36:46,560 --> 00:36:48,240
thanks

1048
00:36:48,240 --> 00:36:52,598
last call any other questions

1049
00:36:56,000 --> 00:36:57,359
i would say period of months i would

1050
00:36:57,359 --> 00:36:59,119
also just call out that in developing

1051
00:36:59,119 --> 00:37:01,280
these slides every new slide i add i

1052
00:37:01,280 --> 00:37:03,200
have to go do more research

1053
00:37:03,200 --> 00:37:05,359
so that's how we got to here today but

1054
00:37:05,359 --> 00:37:07,280
happy to field any other questions after

1055
00:37:07,280 --> 00:37:09,920
this talk i'll just step down

1056
00:37:09,920 --> 00:37:12,880
but any other questions

1057
00:37:12,880 --> 00:37:14,860
great thanks again

1058
00:37:14,860 --> 00:37:19,110
[Applause]

