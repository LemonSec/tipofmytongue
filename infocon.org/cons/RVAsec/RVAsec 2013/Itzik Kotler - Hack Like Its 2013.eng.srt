1
00:00:20,170 --> 00:00:27,140
hi everybody thank you for coming to my

2
00:00:25,100 --> 00:00:30,230
talk to date to bit early so I

3
00:00:27,140 --> 00:00:34,130
<font color="#E5E5E5">appreciate your attendance my name is</font><font color="#CCCCCC"> ET</font>

4
00:00:30,230 --> 00:00:35,870
<font color="#E5E5E5">Cutler um Isaac for the most part and I</font>

5
00:00:34,130 --> 00:00:38,930
<font color="#CCCCCC">will be speaking to you today about what</font>

6
00:00:35,870 --> 00:00:42,140
it's<font color="#CCCCCC"> like to hike in 2013 especially</font>

7
00:00:38,930 --> 00:00:44,690
using pi connect and hacker<font color="#CCCCCC"> shell about</font>

8
00:00:42,140 --> 00:00:46,670
two and a half years ago<font color="#E5E5E5"> I've developed</font>

9
00:00:44,690 --> 00:00:49,339
and released a programming language

10
00:00:46,670 --> 00:00:51,850
called Python<font color="#E5E5E5"> act which is essentially</font>

11
00:00:49,340 --> 00:00:56,270
allowing you to do dataflow<font color="#CCCCCC"> programming</font>

12
00:00:51,850 --> 00:00:58,310
on Python itself and about a month<font color="#E5E5E5"> ago</font>

13
00:00:56,270 --> 00:01:00,950
I've released<font color="#E5E5E5"> a tool called hacker shell</font>

14
00:00:58,310 --> 00:01:03,580
which is essentially a unix-like shell

15
00:01:00,950 --> 00:01:06,619
but the cliffs that lets you instrument

16
00:01:03,580 --> 00:01:08,450
all sort of attacking tools together as

17
00:01:06,619 --> 00:01:10,729
if they were<font color="#E5E5E5"> connected to each other</font>

18
00:01:08,450 --> 00:01:13,670
hacker shells using<font color="#E5E5E5"> Python act as a</font>

19
00:01:10,729 --> 00:01:15,350
scripting engine in this truck today<font color="#E5E5E5"> I</font>

20
00:01:13,670 --> 00:01:17,000
will try to<font color="#E5E5E5"> explain</font><font color="#CCCCCC"> the motivation</font>

21
00:01:15,350 --> 00:01:21,110
behind the development of these two

22
00:01:17,000 --> 00:01:24,650
projects and obviously the benefits for

23
00:01:21,110 --> 00:01:26,510
you guys to using<font color="#E5E5E5"> it so before we can</font>

24
00:01:24,650 --> 00:01:29,360
dig in into what exactly it means to

25
00:01:26,510 --> 00:01:31,700
hack like 2013 let's do a quick<font color="#CCCCCC"> review</font>

26
00:01:29,360 --> 00:01:34,970
about what's actually is hacking back in

27
00:01:31,700 --> 00:01:36,740
the days or what is hacking today so

28
00:01:34,970 --> 00:01:38,990
essentially we have people writing

29
00:01:36,740 --> 00:01:41,720
scripts pentacene<font color="#E5E5E5"> scribner analysis</font>

30
00:01:38,990 --> 00:01:43,759
script forensic scripts in all these

31
00:01:41,720 --> 00:01:46,640
different<font color="#E5E5E5"> languages it could be a ruby</font>

32
00:01:43,760 --> 00:01:49,040
<font color="#CCCCCC">Perl Python and then when people try to</font>

33
00:01:46,640 --> 00:01:50,930
mingle these codes together they have<font color="#E5E5E5"> a</font>

34
00:01:49,040 --> 00:01:53,360
difficulty they either have to<font color="#CCCCCC"> port it</font>

35
00:01:50,930 --> 00:01:56,680
or rewrite it so<font color="#CCCCCC"> essentially we have a</font>

36
00:01:53,360 --> 00:01:58,880
low code we use because of that

37
00:01:56,680 --> 00:02:01,549
sometimes<font color="#CCCCCC"> people</font><font color="#E5E5E5"> would like to</font><font color="#CCCCCC"> do a</font>

38
00:01:58,880 --> 00:02:03,890
little<font color="#E5E5E5"> bit of modification to preps</font>

39
00:02:01,549 --> 00:02:06,650
address a specific protocol feature or a

40
00:02:03,890 --> 00:02:08,389
specific<font color="#E5E5E5"> alberto commodification and</font>

41
00:02:06,650 --> 00:02:10,729
many of these<font color="#E5E5E5"> tools are written in a</font>

42
00:02:08,389 --> 00:02:12,859
very straightforward pesci way which

43
00:02:10,729 --> 00:02:15,350
means that even the slightest change

44
00:02:12,860 --> 00:02:18,230
could cause a complete rewrite of the

45
00:02:15,350 --> 00:02:22,130
<font color="#CCCCCC">tool itself so again we're running</font><font color="#E5E5E5"> into</font>

46
00:02:18,230 --> 00:02:23,450
a low code reuse problem one of the

47
00:02:22,130 --> 00:02:25,280
biggest problems and the one<font color="#CCCCCC"> of the</font>

48
00:02:23,450 --> 00:02:28,310
problems that<font color="#CCCCCC"> I'm trying</font><font color="#E5E5E5"> to tackle with</font>

49
00:02:25,280 --> 00:02:30,140
hacker shell is that nowadays most of

50
00:02:28,310 --> 00:02:32,760
the security tools are agnostic<font color="#E5E5E5"> to each</font>

51
00:02:30,140 --> 00:02:34,768
other<font color="#E5E5E5"> anything from Nick</font>

52
00:02:32,760 --> 00:02:37,140
metasploit and<font color="#E5E5E5"> map these tools can</font>

53
00:02:34,769 --> 00:02:40,019
produce smart outputs they can produce

54
00:02:37,140 --> 00:02:42,720
<font color="#E5E5E5">XML files but almost none of</font><font color="#CCCCCC"> them can</font>

55
00:02:40,019 --> 00:02:44,489
import other files into them essentially

56
00:02:42,720 --> 00:02:46,680
if you'd like<font color="#CCCCCC"> to do a chain of between</font>

57
00:02:44,489 --> 00:02:48,930
of these different tools together you'll

58
00:02:46,680 --> 00:02:50,940
have to convert the information from

59
00:02:48,930 --> 00:02:53,040
each tool so the other tool can accept

60
00:02:50,940 --> 00:02:56,549
it so that's the<font color="#E5E5E5"> problem the agnostic</font>

61
00:02:53,040 --> 00:02:58,260
tools again it also shows up with

62
00:02:56,549 --> 00:03:00,060
parameters most of these tools are

63
00:02:58,260 --> 00:03:01,950
command line parameters and they use

64
00:03:00,060 --> 00:03:03,930
these different commands there's

65
00:03:01,950 --> 00:03:05,819
distance different flags<font color="#E5E5E5"> so again you</font>

66
00:03:03,930 --> 00:03:08,190
have<font color="#CCCCCC"> to tailor made the scripts to call</font>

67
00:03:05,819 --> 00:03:11,970
the tools using these very specific

68
00:03:08,190 --> 00:03:14,489
<font color="#E5E5E5">parameters and write the letter problem</font>

69
00:03:11,970 --> 00:03:16,319
sorry the latest<font color="#E5E5E5"> problem that I'll be</font>

70
00:03:14,489 --> 00:03:18,900
tackling in this hacking like to that

71
00:03:16,319 --> 00:03:21,720
like<font color="#CCCCCC"> 2000 so</font><font color="#E5E5E5"> I connected to the start</font>

72
00:03:18,900 --> 00:03:23,879
line is the scalability issues so

73
00:03:21,720 --> 00:03:26,340
nowadays<font color="#CCCCCC"> when we're going</font><font color="#E5E5E5"> big with the</font>

74
00:03:23,879 --> 00:03:27,870
cloud<font color="#E5E5E5"> and the</font><font color="#CCCCCC"> multiprocessing people</font>

75
00:03:26,340 --> 00:03:30,750
would like to<font color="#CCCCCC"> use this computing power</font>

76
00:03:27,870 --> 00:03:33,209
to do more to<font color="#CCCCCC"> take a problem and then</font>

77
00:03:30,750 --> 00:03:35,459
apply<font color="#E5E5E5"> to as many computers possible to</font>

78
00:03:33,209 --> 00:03:37,190
solve it as quick as possible<font color="#E5E5E5"> many of</font>

79
00:03:35,459 --> 00:03:40,980
these tools<font color="#CCCCCC"> are written in a very</font>

80
00:03:37,190 --> 00:03:42,389
<font color="#CCCCCC">low-level languages such as C C++ so</font>

81
00:03:40,980 --> 00:03:44,190
essentially<font color="#E5E5E5"> for them to be</font>

82
00:03:42,389 --> 00:03:47,129
multi-threaded it has to be a feature

83
00:03:44,190 --> 00:03:49,290
you have to code it in these tools so

84
00:03:47,129 --> 00:03:51,209
some of these tools does offer arm a

85
00:03:49,290 --> 00:03:53,819
multi trading or multi processing

86
00:03:51,209 --> 00:03:55,590
capability but on a high level it's

87
00:03:53,819 --> 00:03:58,260
still something that's not been done<font color="#E5E5E5"> and</font>

88
00:03:55,590 --> 00:04:01,590
you cannot instrument tools to run over

89
00:03:58,260 --> 00:04:04,739
<font color="#CCCCCC">a cloud just like that so this is a very</font>

90
00:04:01,590 --> 00:04:07,379
quick summary<font color="#E5E5E5"> of the problems that I've</font>

91
00:04:04,739 --> 00:04:09,840
<font color="#CCCCCC">encountered while trying</font><font color="#E5E5E5"> to do pen</font>

92
00:04:07,379 --> 00:04:12,810
testing and all these interesting<font color="#E5E5E5"> stuff</font>

93
00:04:09,840 --> 00:04:14,849
over the past<font color="#E5E5E5"> 10 years now if we are</font>

94
00:04:12,810 --> 00:04:17,639
walking or trying to walk through the

95
00:04:14,849 --> 00:04:20,608
red teaming or a bigger and much smarter

96
00:04:17,639 --> 00:04:22,139
pen test or<font color="#CCCCCC"> engagement then this problem</font>

97
00:04:20,608 --> 00:04:25,198
should<font color="#CCCCCC"> be solved as quick as possible</font>

98
00:04:22,139 --> 00:04:27,990
because while having these problems it's

99
00:04:25,199 --> 00:04:29,849
very<font color="#E5E5E5"> difficult to</font><font color="#CCCCCC"> create a scenario or</font>

100
00:04:27,990 --> 00:04:32,400
to reproduce a scenario which involves

101
00:04:29,849 --> 00:04:35,070
all these very different vectors so

102
00:04:32,400 --> 00:04:37,198
agnostic tools<font color="#E5E5E5"> scalability and code</font>

103
00:04:35,070 --> 00:04:39,419
reuse is something that we should solve

104
00:04:37,199 --> 00:04:41,610
and I'm trying I'm trying to solve it in

105
00:04:39,419 --> 00:04:46,169
<font color="#E5E5E5">order to</font><font color="#CCCCCC"> do hacking in a much simpler</font>

106
00:04:41,610 --> 00:04:46,470
faster and efficient way so taking all

107
00:04:46,169 --> 00:04:48,359
these

108
00:04:46,470 --> 00:04:51,060
<font color="#E5E5E5">bad issues or pain points and</font>

109
00:04:48,360 --> 00:04:52,770
transforming them into<font color="#E5E5E5"> features but we</font>

110
00:04:51,060 --> 00:04:55,410
actually<font color="#CCCCCC"> would like</font><font color="#E5E5E5"> to see its first</font>

111
00:04:52,770 --> 00:04:57,210
synergy between different tools so we

112
00:04:55,410 --> 00:04:59,970
actually we would like<font color="#CCCCCC"> to be able to</font>

113
00:04:57,210 --> 00:05:02,640
take well almost<font color="#CCCCCC"> any tool to run it and</font>

114
00:04:59,970 --> 00:05:04,560
take the output and then plug it in into

115
00:05:02,640 --> 00:05:06,180
the next tool and have the next<font color="#E5E5E5"> will</font>

116
00:05:04,560 --> 00:05:08,250
extract this information and<font color="#CCCCCC"> will know</font>

117
00:05:06,180 --> 00:05:10,230
exactly about target the holes and

118
00:05:08,250 --> 00:05:13,500
whichever parameters it will get<font color="#E5E5E5"> to</font>

119
00:05:10,230 --> 00:05:15,930
consume it will find it in the the

120
00:05:13,500 --> 00:05:18,240
previous<font color="#E5E5E5"> output same thing goes</font><font color="#CCCCCC"> for</font>

121
00:05:15,930 --> 00:05:20,430
parameters and parameters we will<font color="#E5E5E5"> not</font>

122
00:05:18,240 --> 00:05:22,440
want don't want<font color="#CCCCCC"> to spend</font><font color="#E5E5E5"> time trying to</font>

123
00:05:20,430 --> 00:05:24,810
<font color="#E5E5E5">figure out how to troubleshoot these</font>

124
00:05:22,440 --> 00:05:27,270
tools<font color="#E5E5E5"> to work we will just have them</font>

125
00:05:24,810 --> 00:05:29,880
taking this information and process it

126
00:05:27,270 --> 00:05:33,810
correctly so it will just<font color="#E5E5E5"> run as we</font>

127
00:05:29,880 --> 00:05:35,969
expected we<font color="#CCCCCC"> also like to maximize the</font>

128
00:05:33,810 --> 00:05:38,640
code reuse so if we're spending time

129
00:05:35,970 --> 00:05:40,680
writing a script or<font color="#E5E5E5"> program that does</font>

130
00:05:38,640 --> 00:05:42,930
something<font color="#E5E5E5"> that this knowledge would like</font>

131
00:05:40,680 --> 00:05:44,850
to encapsulate it and use it as often as

132
00:05:42,930 --> 00:05:47,880
<font color="#CCCCCC">possible so we have if we have a</font>

133
00:05:44,850 --> 00:05:49,950
<font color="#CCCCCC">function or a class or component does</font>

134
00:05:47,880 --> 00:05:53,400
anything from a particular<font color="#E5E5E5"> type of</font>

135
00:05:49,950 --> 00:05:56,039
<font color="#CCCCCC">scamming to a particular Miller analysis</font>

136
00:05:53,400 --> 00:05:58,380
to anything any process any any

137
00:05:56,040 --> 00:06:01,110
procedure that you guys are doing then

138
00:05:58,380 --> 00:06:03,390
we would like<font color="#CCCCCC"> to change it or to modify</font>

139
00:06:01,110 --> 00:06:05,340
<font color="#E5E5E5">it every time but</font><font color="#CCCCCC"> just like these tools</font>

140
00:06:03,390 --> 00:06:08,039
to<font color="#E5E5E5"> be able to plug into this knowledge</font>

141
00:06:05,340 --> 00:06:09,659
of course if it makes sense and sip

142
00:06:08,040 --> 00:06:11,790
lickable but we would like<font color="#E5E5E5"> it to</font><font color="#CCCCCC"> be able</font>

143
00:06:09,660 --> 00:06:14,940
<font color="#E5E5E5">to plug into the snow Lodge and use it</font>

144
00:06:11,790 --> 00:06:17,910
to either filter the output or generate

145
00:06:14,940 --> 00:06:19,560
input from it and the less that the

146
00:06:17,910 --> 00:06:22,020
letters issue as<font color="#CCCCCC"> I described is the</font>

147
00:06:19,560 --> 00:06:24,680
scalability nowadays that we have a

148
00:06:22,020 --> 00:06:26,609
maybe a cluster a few computers

149
00:06:24,680 --> 00:06:28,800
something something running in the

150
00:06:26,610 --> 00:06:30,900
clouds we would like to<font color="#E5E5E5"> be able to take</font>

151
00:06:28,800 --> 00:06:33,060
all these tools all this scenario and

152
00:06:30,900 --> 00:06:35,460
just say well rabbit run over this

153
00:06:33,060 --> 00:06:38,130
network use all<font color="#E5E5E5"> this resource to do all</font>

154
00:06:35,460 --> 00:06:40,859
these things and<font color="#E5E5E5"> of course when it makes</font>

155
00:06:38,130 --> 00:06:43,560
sense do it in parallel run these things

156
00:06:40,860 --> 00:06:46,590
<font color="#E5E5E5">in parallel different machines and get</font>

157
00:06:43,560 --> 00:06:51,270
the get the procedure to be done as

158
00:06:46,590 --> 00:06:54,090
quickly as<font color="#CCCCCC"> possible so um it's in my</font>

159
00:06:51,270 --> 00:06:56,219
<font color="#E5E5E5">vision is to hiking like 2013 is</font>

160
00:06:54,090 --> 00:06:58,500
basically the combination of the follow

161
00:06:56,220 --> 00:07:00,270
so our pythonic as<font color="#CCCCCC"> I said it's a</font>

162
00:06:58,500 --> 00:07:02,670
programming<font color="#E5E5E5"> language which are</font>

163
00:07:00,270 --> 00:07:04,890
playing in a<font color="#E5E5E5"> few minutes basically gets</font>

164
00:07:02,670 --> 00:07:07,560
the power of Python and the<font color="#E5E5E5"> dataflow</font>

165
00:07:04,890 --> 00:07:09,390
programming in it and I'm using it as a

166
00:07:07,560 --> 00:07:12,030
scripting engine and hacker shells

167
00:07:09,390 --> 00:07:14,550
basically<font color="#E5E5E5"> half a platform that lets you</font>

168
00:07:12,030 --> 00:07:16,739
take a plug-in<font color="#CCCCCC"> third-party security</font>

169
00:07:14,550 --> 00:07:19,440
tools and<font color="#E5E5E5"> metadata and combine them</font>

170
00:07:16,740 --> 00:07:21,330
together<font color="#CCCCCC"> essentially you having you have</font>

171
00:07:19,440 --> 00:07:23,520
a language of a framework<font color="#E5E5E5"> that you can</font>

172
00:07:21,330 --> 00:07:26,460
program you can script that can take

173
00:07:23,520 --> 00:07:28,979
these third-party tools create a meta

174
00:07:26,460 --> 00:07:31,770
data of them and then instrumented the

175
00:07:28,980 --> 00:07:35,280
way you want to<font color="#CCCCCC"> get into certain results</font>

176
00:07:31,770 --> 00:07:38,400
or to verify certain assumptions so

177
00:07:35,280 --> 00:07:40,020
let's get<font color="#CCCCCC"> into the details the first</font>

178
00:07:38,400 --> 00:07:42,479
thing the key ingredient<font color="#CCCCCC"> for all this</font>

179
00:07:40,020 --> 00:07:45,030
infrastructure to work was<font color="#E5E5E5"> pie tonight</font>

180
00:07:42,480 --> 00:07:47,670
so as I said before Michael neck is a

181
00:07:45,030 --> 00:07:51,359
dataflow programming based on Python

182
00:07:47,670 --> 00:07:54,180
breathing in<font color="#E5E5E5"> Python its influence mostly</font>

183
00:07:51,360 --> 00:07:56,460
by the<font color="#E5E5E5"> UNIX shell scripting bitin itself</font>

184
00:07:54,180 --> 00:07:57,750
a little<font color="#CCCCCC"> bit of pearl it's completely</font>

185
00:07:56,460 --> 00:07:59,430
written in Python so it should be

186
00:07:57,750 --> 00:08:01,740
running<font color="#E5E5E5"> on any Python super-clean</font>

187
00:07:59,430 --> 00:08:04,470
platform anything from a mobile to a

188
00:08:01,740 --> 00:08:07,560
<font color="#E5E5E5">supercomputer it should run without much</font>

189
00:08:04,470 --> 00:08:09,240
of a trouble<font color="#CCCCCC"> iconic has a website you</font>

190
00:08:07,560 --> 00:08:11,490
can feel free to browse into it or some

191
00:08:09,240 --> 00:08:15,750
documentation and of course instruction

192
00:08:11,490 --> 00:08:17,490
on how to download it installing packs

193
00:08:15,750 --> 00:08:20,400
in spite<font color="#CCCCCC"> and act is completely written</font>

194
00:08:17,490 --> 00:08:22,080
in<font color="#CCCCCC"> Python there is no actual external</font>

195
00:08:20,400 --> 00:08:25,799
dependencies that you<font color="#E5E5E5"> required to</font>

196
00:08:22,080 --> 00:08:27,690
compile or to use so as any other piping

197
00:08:25,800 --> 00:08:29,790
package you can you can just as easy to

198
00:08:27,690 --> 00:08:32,130
you can still just as easy<font color="#E5E5E5"> as using the</font>

199
00:08:29,790 --> 00:08:34,560
easy install or the five<font color="#CCCCCC"> Python</font>

200
00:08:32,130 --> 00:08:37,500
installer and it will simply get on your

201
00:08:34,559 --> 00:08:39,150
computer as fast as<font color="#CCCCCC"> possible the</font>

202
00:08:37,500 --> 00:08:41,370
development<font color="#CCCCCC"> of phytanic taking place</font>

203
00:08:39,150 --> 00:08:44,220
over get so you can<font color="#E5E5E5"> also clone the git</font>

204
00:08:41,370 --> 00:08:45,900
repository that's probably<font color="#E5E5E5"> get</font>

205
00:08:44,220 --> 00:08:48,390
repository contains the latest version

206
00:08:45,900 --> 00:08:50,939
the unstable version so<font color="#E5E5E5"> you can you can</font>

207
00:08:48,390 --> 00:08:55,530
gain the newest features as well as the

208
00:08:50,940 --> 00:08:57,510
newest box so what<font color="#CCCCCC"> is that a flow</font>

209
00:08:55,530 --> 00:09:00,180
programming and why is<font color="#E5E5E5"> it so essential</font>

210
00:08:57,510 --> 00:09:02,610
into trying<font color="#CCCCCC"> to do hacking or taking</font>

211
00:09:00,180 --> 00:09:04,229
hacking into<font color="#E5E5E5"> the next level well there</font>

212
00:09:02,610 --> 00:09:05,460
is many different types of programming

213
00:09:04,230 --> 00:09:08,310
and there's many different types of

214
00:09:05,460 --> 00:09:10,530
tasks but if you look into how we are

215
00:09:08,310 --> 00:09:12,540
performing our penetration testing

216
00:09:10,530 --> 00:09:14,760
<font color="#CCCCCC">mellor analyses forensic</font>

217
00:09:12,540 --> 00:09:16,949
it's so easy to take a<font color="#CCCCCC"> wide burden just</font>

218
00:09:14,760 --> 00:09:19,770
describe the different steps described

219
00:09:16,950 --> 00:09:21,480
the flow of what<font color="#E5E5E5"> needs to be done so how</font>

220
00:09:19,770 --> 00:09:24,090
come when we go to work and try<font color="#E5E5E5"> to</font>

221
00:09:21,480 --> 00:09:26,550
implement this flow and we have to

222
00:09:24,090 --> 00:09:28,560
constantly trouble or trying to make the

223
00:09:26,550 --> 00:09:30,990
languages and during which understand

224
00:09:28,560 --> 00:09:32,699
the flow that we want well this is<font color="#CCCCCC"> very</font>

225
00:09:30,990 --> 00:09:36,840
simple most of the languages out there

226
00:09:32,700 --> 00:09:38,730
may be C C++ assembly Python<font color="#E5E5E5"> Perl are</font>

227
00:09:36,840 --> 00:09:41,280
not data flow oriented there are

228
00:09:38,730 --> 00:09:43,170
imperative programming and therefore we

229
00:09:41,280 --> 00:09:45,120
have to<font color="#E5E5E5"> program in them completely</font>

230
00:09:43,170 --> 00:09:47,280
different from the way that we can

231
00:09:45,120 --> 00:09:49,590
describe<font color="#E5E5E5"> a flow now that the flow</font>

232
00:09:47,280 --> 00:09:52,560
programming is more similar to the way

233
00:09:49,590 --> 00:09:55,350
that we can map ideas in our head so

234
00:09:52,560 --> 00:09:57,869
essentially<font color="#E5E5E5"> a dataflow programming is</font>

235
00:09:55,350 --> 00:10:00,690
very free to describe a penetration

236
00:09:57,870 --> 00:10:04,110
testing a neural analysis procedure or

237
00:10:00,690 --> 00:10:05,850
even forensics let's let's see on a<font color="#E5E5E5"> real</font>

238
00:10:04,110 --> 00:10:07,890
<font color="#E5E5E5">life example let's say that we're a</font>

239
00:10:05,850 --> 00:10:10,470
<font color="#CCCCCC">tasked with writing this small program</font>

240
00:10:07,890 --> 00:10:13,260
that will take that<font color="#E5E5E5"> will read a file</font>

241
00:10:10,470 --> 00:10:15,660
actually<font color="#E5E5E5"> take a video from</font><font color="#CCCCCC"> the file will</font>

242
00:10:13,260 --> 00:10:18,540
pass it to a video black and white frame

243
00:10:15,660 --> 00:10:20,819
processor and output to the screen so we

244
00:10:18,540 --> 00:10:23,760
can describe<font color="#CCCCCC"> this</font><font color="#E5E5E5"> programming to three</font>

245
00:10:20,820 --> 00:10:25,950
major steps we<font color="#E5E5E5"> have the</font><font color="#CCCCCC"> i/o the reading</font>

246
00:10:23,760 --> 00:10:28,890
the file from this system<font color="#E5E5E5"> we have the</font>

247
00:10:25,950 --> 00:10:30,480
processing we're<font color="#E5E5E5"> actually information is</font>

248
00:10:28,890 --> 00:10:32,370
being processed the input is the

249
00:10:30,480 --> 00:10:34,500
<font color="#CCCCCC">information and the output is a</font>

250
00:10:32,370 --> 00:10:36,960
different information and then we have

251
00:10:34,500 --> 00:10:39,270
the output of<font color="#CCCCCC"> the system which is the</font>

252
00:10:36,960 --> 00:10:44,330
the screen so it's very easily to

253
00:10:39,270 --> 00:10:46,800
describe such process in that flow way

254
00:10:44,330 --> 00:10:48,870
assuming that<font color="#CCCCCC"> now we've been</font><font color="#E5E5E5"> tasked with</font>

255
00:10:46,800 --> 00:10:51,510
<font color="#E5E5E5">a different item we've been asked to</font>

256
00:10:48,870 --> 00:10:53,850
change the program from reading local

257
00:10:51,510 --> 00:10:56,370
file to download the file from<font color="#E5E5E5"> the web</font>

258
00:10:53,850 --> 00:10:58,380
so essentially the two-letter are

259
00:10:56,370 --> 00:11:00,720
components the loop to later steps

260
00:10:58,380 --> 00:11:02,490
remain the same we're still doing the

261
00:11:00,720 --> 00:11:04,950
video<font color="#E5E5E5"> black and white processing and</font>

262
00:11:02,490 --> 00:11:07,050
we're still doing the screen output the

263
00:11:04,950 --> 00:11:10,110
own step actually has been<font color="#CCCCCC"> changed is</font>

264
00:11:07,050 --> 00:11:13,260
the first step from the local file

265
00:11:10,110 --> 00:11:14,610
reader into the URL downloader so

266
00:11:13,260 --> 00:11:16,950
assuming the<font color="#E5E5E5"> ural download you will</font>

267
00:11:14,610 --> 00:11:20,160
download the<font color="#E5E5E5"> file from the web open it</font>

268
00:11:16,950 --> 00:11:23,070
on the file system and output let's say

269
00:11:20,160 --> 00:11:25,319
<font color="#CCCCCC">a bike stream the program will remain</font>

270
00:11:23,070 --> 00:11:26,460
working so the<font color="#CCCCCC"> information the time that</font>

271
00:11:25,320 --> 00:11:28,920
<font color="#E5E5E5">you expect encapsulate</font>

272
00:11:26,460 --> 00:11:30,750
the<font color="#E5E5E5"> knowledge or the screen output and</font>

273
00:11:28,920 --> 00:11:33,719
the video<font color="#E5E5E5"> black and white processing</font>

274
00:11:30,750 --> 00:11:36,180
remains intact this is a<font color="#CCCCCC"> very good</font>

275
00:11:33,720 --> 00:11:38,400
<font color="#CCCCCC">example of</font><font color="#E5E5E5"> how code reuse works better</font>

276
00:11:36,180 --> 00:11:40,469
and lot of flow programming we simply

277
00:11:38,400 --> 00:11:42,300
break the process into components and

278
00:11:40,470 --> 00:11:44,490
the only<font color="#E5E5E5"> change the components that</font>

279
00:11:42,300 --> 00:11:48,180
needs to be<font color="#CCCCCC"> changed the most of the code</font>

280
00:11:44,490 --> 00:11:50,220
<font color="#E5E5E5">will remain the same another another</font>

281
00:11:48,180 --> 00:11:52,410
very interesting feature which goes

282
00:11:50,220 --> 00:11:55,140
through scalability is the way that data

283
00:11:52,410 --> 00:11:57,719
flow actually is being working on the

284
00:11:55,140 --> 00:12:00,420
interpreter level so the challenge in

285
00:11:57,720 --> 00:12:03,090
most low-level languages such as C C++

286
00:12:00,420 --> 00:12:04,500
Python and Perl is that you have all

287
00:12:03,090 --> 00:12:06,900
these<font color="#CCCCCC"> different functions all these</font>

288
00:12:04,500 --> 00:12:09,000
different tasks but the interpreter the

289
00:12:06,900 --> 00:12:10,980
compiler does not actually know which

290
00:12:09,000 --> 00:12:12,930
<font color="#CCCCCC">tests can be</font><font color="#E5E5E5"> done in parallel in which</font>

291
00:12:10,980 --> 00:12:14,340
cannot so you actually use the

292
00:12:12,930 --> 00:12:15,930
<font color="#E5E5E5">programmer</font><font color="#CCCCCC"> you have to notify the</font>

293
00:12:14,340 --> 00:12:17,880
compiler you have to create this

294
00:12:15,930 --> 00:12:20,400
critical section when you're lacking

295
00:12:17,880 --> 00:12:22,590
things are unlocking them in order for

296
00:12:20,400 --> 00:12:25,199
things to work in parallel in the best

297
00:12:22,590 --> 00:12:26,850
way in<font color="#CCCCCC"> lot of</font><font color="#E5E5E5"> flow programming every</font>

298
00:12:25,200 --> 00:12:29,220
time that the flow is actually being

299
00:12:26,850 --> 00:12:31,230
worked or branched out into a couple<font color="#CCCCCC"> of</font>

300
00:12:29,220 --> 00:12:34,050
different<font color="#CCCCCC"> components we essentially</font>

301
00:12:31,230 --> 00:12:36,120
telling the interpreter listen this this

302
00:12:34,050 --> 00:12:38,069
<font color="#CCCCCC">information is not blocking you can you</font>

303
00:12:36,120 --> 00:12:40,470
can use<font color="#CCCCCC"> it for here you can use it</font><font color="#E5E5E5"> for</font>

304
00:12:38,070 --> 00:12:42,840
there at the same time so<font color="#E5E5E5"> actually every</font>

305
00:12:40,470 --> 00:12:44,730
time that we will<font color="#CCCCCC"> have a branch or we</font>

306
00:12:42,840 --> 00:12:46,710
will have<font color="#CCCCCC"> a multiple choice for</font>

307
00:12:44,730 --> 00:12:49,950
information to flow within<font color="#E5E5E5"> data flow</font>

308
00:12:46,710 --> 00:12:51,750
program will gain a multi processing or

309
00:12:49,950 --> 00:12:54,240
<font color="#E5E5E5">voltage reading we'll see examples for</font>

310
00:12:51,750 --> 00:12:56,130
it later on<font color="#E5E5E5"> for free without doing</font>

311
00:12:54,240 --> 00:12:58,320
anything without describing anything

312
00:12:56,130 --> 00:13:01,050
simply because<font color="#E5E5E5"> we're able to tell the</font>

313
00:12:58,320 --> 00:13:03,390
interpreter that this information is not

314
00:13:01,050 --> 00:13:06,750
<font color="#E5E5E5">locking each other it's not it's not</font>

315
00:13:03,390 --> 00:13:09,420
waiting it can be spread in parallel<font color="#CCCCCC"> so</font>

316
00:13:06,750 --> 00:13:12,240
just a quick rundown on the example so

317
00:13:09,420 --> 00:13:14,490
here we have been test another test on

318
00:13:12,240 --> 00:13:16,980
the original program now they also<font color="#CCCCCC"> ask</font>

319
00:13:14,490 --> 00:13:19,920
us to write<font color="#E5E5E5"> the file locally not only</font>

320
00:13:16,980 --> 00:13:21,630
out put it<font color="#E5E5E5"> into the video so so the</font>

321
00:13:19,920 --> 00:13:23,819
program is essentially downloading the

322
00:13:21,630 --> 00:13:26,310
URL the same component if we<font color="#CCCCCC"> already</font>

323
00:13:23,820 --> 00:13:27,960
<font color="#CCCCCC">brought</font><font color="#E5E5E5"> in the previous example again</font>

324
00:13:26,310 --> 00:13:29,849
<font color="#E5E5E5">using the video black and white frame</font>

325
00:13:27,960 --> 00:13:32,370
processor which is the component it

326
00:13:29,850 --> 00:13:34,200
exists from the first example the screen

327
00:13:32,370 --> 00:13:36,510
output this way another component

328
00:13:34,200 --> 00:13:38,730
existing from the first example and a

329
00:13:36,510 --> 00:13:39,840
new component<font color="#E5E5E5"> co local file writer that</font>

330
00:13:38,730 --> 00:13:42,060
you've essentially will take

331
00:13:39,840 --> 00:13:44,220
stream the<font color="#E5E5E5"> DVD black and white print</font>

332
00:13:42,060 --> 00:13:49,380
process<font color="#E5E5E5"> are generated and</font><font color="#CCCCCC"> we'll write it</font>

333
00:13:44,220 --> 00:13:51,330
to the file system so the advantages of

334
00:13:49,380 --> 00:13:54,570
dataflow programming are the following

335
00:13:51,330 --> 00:13:56,460
we gain concurrency and parallelism just

336
00:13:54,570 --> 00:13:59,550
because the way we describe our programs

337
00:13:56,460 --> 00:14:02,970
which apparently gives us the ability to

338
00:13:59,550 --> 00:14:04,949
scale when needed a lot<font color="#CCCCCC"> of flow problems</font>

339
00:14:02,970 --> 00:14:07,230
and networks are very natural way<font color="#E5E5E5"> to</font>

340
00:14:04,950 --> 00:14:09,120
represent<font color="#CCCCCC"> the process so if you can go</font>

341
00:14:07,230 --> 00:14:10,980
down<font color="#CCCCCC"> to a white bird and describe what</font>

342
00:14:09,120 --> 00:14:12,870
you're doing in<font color="#CCCCCC"> your everyday job or</font>

343
00:14:10,980 --> 00:14:14,970
describe some tests that you've been

344
00:14:12,870 --> 00:14:17,640
<font color="#E5E5E5">given</font><font color="#CCCCCC"> then most like you can then</font>

345
00:14:14,970 --> 00:14:19,650
transcribe it from the white bird<font color="#E5E5E5"> into</font>

346
00:14:17,640 --> 00:14:22,830
data flow programming as easy as that

347
00:14:19,650 --> 00:14:25,140
<font color="#E5E5E5">and of course as we sending the examples</font>

348
00:14:22,830 --> 00:14:27,480
taking components replacing them and

349
00:14:25,140 --> 00:14:30,270
integrating emerging<font color="#CCCCCC"> story</font><font color="#E5E5E5"> and other</font>

350
00:14:27,480 --> 00:14:32,430
components<font color="#CCCCCC"> into them is very simply much</font>

351
00:14:30,270 --> 00:14:35,220
more simpler than hard coding functions

352
00:14:32,430 --> 00:14:38,640
and replacing functions within other

353
00:14:35,220 --> 00:14:41,190
functions of course it's not<font color="#E5E5E5"> always</font>

354
00:14:38,640 --> 00:14:42,990
perfect and there are some obstacles but

355
00:14:41,190 --> 00:14:45,110
<font color="#CCCCCC">the most of the obstacles or perps the</font>

356
00:14:42,990 --> 00:14:47,190
primary<font color="#CCCCCC"> one is actually the mindset</font>

357
00:14:45,110 --> 00:14:49,050
programming and most of the programming

358
00:14:47,190 --> 00:14:51,480
people the DA software development are

359
00:14:49,050 --> 00:14:53,670
trained and<font color="#E5E5E5"> touched to use imperative</font>

360
00:14:51,480 --> 00:14:56,610
programming they're trained far to use

361
00:14:53,670 --> 00:14:58,829
loops and ifs and all these different

362
00:14:56,610 --> 00:15:00,990
statements that may not have to exist

363
00:14:58,830 --> 00:15:04,230
not the full programming and we'll see

364
00:15:00,990 --> 00:15:05,970
examples for it right up but the mindset

365
00:15:04,230 --> 00:15:07,440
is the most biggest obstacle for white

366
00:15:05,970 --> 00:15:09,960
people are not adopting data flow

367
00:15:07,440 --> 00:15:13,230
programming and also<font color="#E5E5E5"> there's the issue</font>

368
00:15:09,960 --> 00:15:16,050
of<font color="#E5E5E5"> the performance it's not north while</font>

369
00:15:13,230 --> 00:15:18,990
saying<font color="#CCCCCC"> that dataflow programming is not</font>

370
00:15:16,050 --> 00:15:21,630
the language<font color="#CCCCCC"> to write how things work</font><font color="#E5E5E5"> C</font>

371
00:15:18,990 --> 00:15:24,120
<font color="#E5E5E5">C++ Perl Python these are the languages</font>

372
00:15:21,630 --> 00:15:26,340
it's best suited to<font color="#CCCCCC"> write how things</font>

373
00:15:24,120 --> 00:15:27,900
work that's a floating which is<font color="#E5E5E5"> it's</font>

374
00:15:26,340 --> 00:15:29,880
best to describe how things are

375
00:15:27,900 --> 00:15:31,380
connected to each other so if you have

376
00:15:29,880 --> 00:15:33,270
these different components<font color="#CCCCCC"> and you have</font>

377
00:15:31,380 --> 00:15:35,160
<font color="#E5E5E5">this different software a dataflow</font>

378
00:15:33,270 --> 00:15:37,770
programming language will best way to

379
00:15:35,160 --> 00:15:40,319
help them all talk together and create a

380
00:15:37,770 --> 00:15:42,540
bigger<font color="#E5E5E5"> picture but not will be the</font>

381
00:15:40,320 --> 00:15:45,000
probably not be the best<font color="#CCCCCC"> way to write</font>

382
00:15:42,540 --> 00:15:49,589
the actual software or the actual how to

383
00:15:45,000 --> 00:15:52,760
in it<font color="#CCCCCC"> lot of a programming has been</font>

384
00:15:49,590 --> 00:15:54,560
existed some say that's even from the

385
00:15:52,760 --> 00:15:56,330
cpu that<font color="#E5E5E5"> ever existed that the full</font>

386
00:15:54,560 --> 00:15:59,540
programming was one of the languages

387
00:15:56,330 --> 00:16:01,700
that has proposed at that time if you

388
00:15:59,540 --> 00:16:03,920
guys are doing or have did any<font color="#CCCCCC"> excel</font>

389
00:16:01,700 --> 00:16:06,230
smart<font color="#CCCCCC"> Excel formulas then you</font>

390
00:16:03,920 --> 00:16:08,599
essentially the dataflow programming so

391
00:16:06,230 --> 00:16:09,980
every spreadsheet is capable of doing

392
00:16:08,600 --> 00:16:11,510
that the flow programming taking

393
00:16:09,980 --> 00:16:13,610
different values from different cells

394
00:16:11,510 --> 00:16:15,950
and add them or divide them would do

395
00:16:13,610 --> 00:16:19,070
what not is essentially<font color="#CCCCCC"> a lot of flow</font>

396
00:16:15,950 --> 00:16:21,530
that<font color="#E5E5E5"> describing the information how to</font>

397
00:16:19,070 --> 00:16:23,480
design languages such as vhd and very

398
00:16:21,530 --> 00:16:25,370
low<font color="#E5E5E5"> or essentially our data for</font>

399
00:16:23,480 --> 00:16:27,710
languages because that's how hard were

400
00:16:25,370 --> 00:16:30,770
actually works it works<font color="#E5E5E5"> on data flow</font>

401
00:16:27,710 --> 00:16:33,590
manner X Brook an open source language

402
00:16:30,770 --> 00:16:36,290
to transform xmls one to another is also

403
00:16:33,590 --> 00:16:39,440
that the flow language multimedia

404
00:16:36,290 --> 00:16:43,069
programs such as max/msp composing

405
00:16:39,440 --> 00:16:44,900
videos music and other multimedia are

406
00:16:43,070 --> 00:16:48,500
actually using data forming which is to

407
00:16:44,900 --> 00:16:50,930
describe the video or the<font color="#CCCCCC"> the output and</font>

408
00:16:48,500 --> 00:16:55,640
there's a few<font color="#CCCCCC"> other examples but less</font>

409
00:16:50,930 --> 00:16:57,199
materials so up until now we<font color="#E5E5E5"> kind of</font>

410
00:16:55,640 --> 00:16:59,000
like talked<font color="#E5E5E5"> about the</font><font color="#CCCCCC"> theory and the</font>

411
00:16:57,200 --> 00:17:01,370
different things that can or cannot be

412
00:16:59,000 --> 00:17:03,530
done<font color="#E5E5E5"> data flow and we've seen these</font>

413
00:17:01,370 --> 00:17:06,500
theoretical examples it's time<font color="#CCCCCC"> to sell</font>

414
00:17:03,530 --> 00:17:08,690
it a bit<font color="#CCCCCC"> more hands-on code so this is</font>

415
00:17:06,500 --> 00:17:10,490
<font color="#CCCCCC">the</font><font color="#E5E5E5"> essentially the very simple program</font>

416
00:17:08,690 --> 00:17:13,280
that you can write in<font color="#CCCCCC"> python egg this is</font>

417
00:17:10,490 --> 00:17:15,530
the hello world program so what we<font color="#E5E5E5"> can</font>

418
00:17:13,280 --> 00:17:17,599
see over here is that we have a literal

419
00:17:15,530 --> 00:17:19,490
we have a string the hello world and

420
00:17:17,599 --> 00:17:21,859
then we have an operator which<font color="#E5E5E5"> I'll</font>

421
00:17:19,490 --> 00:17:24,020
describe in<font color="#E5E5E5"> the next slides and then we</font>

422
00:17:21,859 --> 00:17:27,020
have a function so essentially the

423
00:17:24,020 --> 00:17:31,060
string goes into the function and the

424
00:17:27,020 --> 00:17:31,060
result is the string has been printed

425
00:17:42,040 --> 00:17:48,190
I've sort of customized the print

426
00:17:45,460 --> 00:17:50,920
function to also output an extra

427
00:17:48,190 --> 00:17:53,650
metadata which is which process in<font color="#CCCCCC"> the</font>

428
00:17:50,920 --> 00:17:56,290
computer actually output the information

429
00:17:53,650 --> 00:17:59,020
in which trend<font color="#E5E5E5"> thread sorry in the</font>

430
00:17:56,290 --> 00:18:00,790
<font color="#E5E5E5">process are done that we'll see later on</font>

431
00:17:59,020 --> 00:18:03,340
the disinformation makes sense because

432
00:18:00,790 --> 00:18:04,930
as we will try<font color="#E5E5E5"> to do and</font><font color="#CCCCCC"> we'll</font><font color="#E5E5E5"> the probe</font>

433
00:18:03,340 --> 00:18:06,820
<font color="#CCCCCC">out programs will become more</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> more</font>

434
00:18:04,930 --> 00:18:09,190
complicated or more and more scalable

435
00:18:06,820 --> 00:18:11,740
then it<font color="#CCCCCC"> will</font><font color="#E5E5E5"> be important to keep track</font>

436
00:18:09,190 --> 00:18:13,750
of which thread does which job in this

437
00:18:11,740 --> 00:18:16,510
example it's pretty much a<font color="#E5E5E5"> single thread</font>

438
00:18:13,750 --> 00:18:18,910
application there is only one flo that

439
00:18:16,510 --> 00:18:29,560
existing so there<font color="#E5E5E5"> is only one thread</font>

440
00:18:18,910 --> 00:18:31,720
participating in it okay so while most

441
00:18:29,560 --> 00:18:34,020
languages are using operators to

442
00:18:31,720 --> 00:18:36,970
describe anything from mathematical

443
00:18:34,020 --> 00:18:39,370
actions into customized operators

444
00:18:36,970 --> 00:18:41,230
overloading pythonic is actually<font color="#E5E5E5"> using</font>

445
00:18:39,370 --> 00:18:43,510
the<font color="#CCCCCC"> operators to describe how</font>

446
00:18:41,230 --> 00:18:46,060
<font color="#E5E5E5">information will travel within the flow</font>

447
00:18:43,510 --> 00:18:47,710
so it's important<font color="#CCCCCC"> to understand that</font>

448
00:18:46,060 --> 00:18:49,899
while single thread programs the

449
00:18:47,710 --> 00:18:51,700
information can only flow in one<font color="#E5E5E5"> way or</font>

450
00:18:49,900 --> 00:18:53,890
the order of information does not

451
00:18:51,700 --> 00:18:55,450
actually change anything while going

452
00:18:53,890 --> 00:18:57,850
<font color="#E5E5E5">into</font><font color="#CCCCCC"> multi threading and</font><font color="#E5E5E5"> multi</font>

453
00:18:55,450 --> 00:19:01,360
processing the order of the information

454
00:18:57,850 --> 00:19:03,580
can change so for instance if you have a

455
00:19:01,360 --> 00:19:06,100
<font color="#CCCCCC">favor program that takes three different</font>

456
00:19:03,580 --> 00:19:08,919
data sets and perform some function of

457
00:19:06,100 --> 00:19:11,139
them<font color="#E5E5E5"> and a cumulative function thats</font>

458
00:19:08,920 --> 00:19:14,170
preps storing the previous result and

459
00:19:11,140 --> 00:19:16,360
does something before<font color="#CCCCCC"> that then we would</font>

460
00:19:14,170 --> 00:19:19,180
like the data<font color="#E5E5E5"> sets processing to happen</font>

461
00:19:16,360 --> 00:19:21,729
in a certain order so then we have to

462
00:19:19,180 --> 00:19:24,490
<font color="#E5E5E5">introduce an operator that actually says</font>

463
00:19:21,730 --> 00:19:26,350
<font color="#CCCCCC">okay</font><font color="#E5E5E5"> this function have three different</font>

464
00:19:24,490 --> 00:19:28,720
other sets and you would like that

465
00:19:26,350 --> 00:19:31,449
assets to travel in the network within a

466
00:19:28,720 --> 00:19:34,330
certain order for<font color="#E5E5E5"> this we have the pipe</font>

467
00:19:31,450 --> 00:19:36,910
the pipe is actually a blocking operator

468
00:19:34,330 --> 00:19:39,610
which only allows one single data in the

469
00:19:36,910 --> 00:19:42,850
order of the first come first<font color="#CCCCCC"> our first</font>

470
00:19:39,610 --> 00:19:44,740
output first come first out<font color="#E5E5E5"> to travel</font>

471
00:19:42,850 --> 00:19:47,320
within the flow and we'll see an example

472
00:19:44,740 --> 00:19:49,720
for it later<font color="#E5E5E5"> on but right now is a very</font>

473
00:19:47,320 --> 00:19:52,300
simple<font color="#E5E5E5"> idea if we want to have a program</font>

474
00:19:49,720 --> 00:19:53,410
<font color="#E5E5E5">that counts from one to nine and</font><font color="#CCCCCC"> we</font>

475
00:19:52,300 --> 00:19:55,600
would like it to<font color="#E5E5E5"> count in</font>

476
00:19:53,410 --> 00:19:58,120
<font color="#E5E5E5">disorder then the pipe operator should</font>

477
00:19:55,600 --> 00:20:00,219
<font color="#CCCCCC">be introduced before the print so the</font>

478
00:19:58,120 --> 00:20:03,459
numbers will arrive and print it in the

479
00:20:00,220 --> 00:20:04,840
same order they went<font color="#E5E5E5"> out the default</font>

480
00:20:03,460 --> 00:20:07,120
operator and<font color="#CCCCCC"> the one that</font><font color="#E5E5E5"> you'll</font>

481
00:20:04,840 --> 00:20:09,459
probably end up using the most is the

482
00:20:07,120 --> 00:20:11,110
non-blocking for the operator which

483
00:20:09,460 --> 00:20:13,060
basically means any available

484
00:20:11,110 --> 00:20:15,189
information once it's arrived to the

485
00:20:13,060 --> 00:20:17,770
<font color="#E5E5E5">system will be output to the next</font>

486
00:20:15,190 --> 00:20:20,110
component this is practically very

487
00:20:17,770 --> 00:20:22,270
useful<font color="#CCCCCC"> because if in the end component</font>

488
00:20:20,110 --> 00:20:25,479
it will essentially right into a

489
00:20:22,270 --> 00:20:27,400
database or do any other action to third

490
00:20:25,480 --> 00:20:30,490
information for you and the whole

491
00:20:27,400 --> 00:20:33,070
program can be<font color="#CCCCCC"> non-blocking only the</font>

492
00:20:30,490 --> 00:20:35,770
last part the last mile should be the

493
00:20:33,070 --> 00:20:37,780
one that to do the waiting so as

494
00:20:35,770 --> 00:20:40,450
described before the low word is

495
00:20:37,780 --> 00:20:42,639
justified from literal as most languages

496
00:20:40,450 --> 00:20:45,100
offer and print is just a function

497
00:20:42,640 --> 00:20:47,140
normal Python functions there's<font color="#E5E5E5"> nothing</font>

498
00:20:45,100 --> 00:20:49,870
particularly special about<font color="#CCCCCC"> it and that's</font>

499
00:20:47,140 --> 00:20:52,030
<font color="#E5E5E5">also part of the Potomac advantage it</font>

500
00:20:49,870 --> 00:20:54,939
can instrument any<font color="#E5E5E5"> Python code it does</font>

501
00:20:52,030 --> 00:20:56,620
<font color="#E5E5E5">not require any 14 in the rewriting any</font>

502
00:20:54,940 --> 00:20:59,230
Python framework out there can be

503
00:20:56,620 --> 00:21:03,219
instrumented in Titanic in that the flow

504
00:20:59,230 --> 00:21:05,470
manner so I've discussed a lot about<font color="#E5E5E5"> the</font>

505
00:21:03,220 --> 00:21:07,540
scalability and how important is so

506
00:21:05,470 --> 00:21:08,530
here's an example<font color="#CCCCCC"> a very quick example</font>

507
00:21:07,540 --> 00:21:11,170
of how you<font color="#E5E5E5"> can do actually a</font>

508
00:21:08,530 --> 00:21:12,760
<font color="#CCCCCC">multithreading in</font><font color="#E5E5E5"> Python it so as a</font>

509
00:21:11,170 --> 00:21:15,460
previous the post of the previous

510
00:21:12,760 --> 00:21:18,010
example when<font color="#CCCCCC"> we had the low words ring</font>

511
00:21:15,460 --> 00:21:20,050
<font color="#E5E5E5">going into a single function in this</font>

512
00:21:18,010 --> 00:21:23,410
example we actually have the<font color="#E5E5E5"> hello world</font>

513
00:21:20,050 --> 00:21:25,840
string going into<font color="#CCCCCC"> a list of multiple</font>

514
00:21:23,410 --> 00:21:27,880
items to print<font color="#E5E5E5"> functions it's</font>

515
00:21:25,840 --> 00:21:30,429
essentially in<font color="#E5E5E5"> Python it whenever the</font>

516
00:21:27,880 --> 00:21:33,130
destination component is not a<font color="#E5E5E5"> discreet</font>

517
00:21:30,430 --> 00:21:35,650
it at<font color="#CCCCCC"> least at</font><font color="#E5E5E5"> a pole or anything that</font>

518
00:21:33,130 --> 00:21:37,600
<font color="#E5E5E5">has more than one then</font><font color="#CCCCCC"> pythonic take</font>

519
00:21:35,650 --> 00:21:42,750
<font color="#CCCCCC">this advantage and then create a</font>

520
00:21:37,600 --> 00:21:42,750
multithreading application by<font color="#E5E5E5"> default so</font>

521
00:21:48,480 --> 00:21:53,100
as you can see the<font color="#CCCCCC"> output of this</font>

522
00:21:51,090 --> 00:21:55,049
program<font color="#CCCCCC"> was actually printed a long word</font>

523
00:21:53,100 --> 00:21:57,149
twice as I said it's a multi-threaded

524
00:21:55,049 --> 00:21:58,860
program and on the bottom<font color="#CCCCCC"> that</font><font color="#E5E5E5"> you can</font>

525
00:21:57,150 --> 00:22:01,290
see that<font color="#E5E5E5"> there is two different threads</font>

526
00:21:58,860 --> 00:22:04,590
that has been participated thread number

527
00:22:01,290 --> 00:22:07,799
<font color="#E5E5E5">four and trend number six so this is how</font>

528
00:22:04,590 --> 00:22:09,750
easy<font color="#E5E5E5"> it is to actually scale a program</font>

529
00:22:07,799 --> 00:22:11,850
in<font color="#E5E5E5"> Python neck all you have to do is</font>

530
00:22:09,750 --> 00:22:14,130
take the functions take the steps that

531
00:22:11,850 --> 00:22:16,409
you require and put them within a list

532
00:22:14,130 --> 00:22:18,419
or at<font color="#CCCCCC"> Apple and there you go you have a</font>

533
00:22:16,410 --> 00:22:21,900
multi-threaded applications right there

534
00:22:18,419 --> 00:22:24,690
just to emphasis the point of dataflow

535
00:22:21,900 --> 00:22:27,210
programming in most languages in order

536
00:22:24,690 --> 00:22:30,150
to print a<font color="#CCCCCC"> lover twice it will be two</font>

537
00:22:27,210 --> 00:22:32,520
separate<font color="#E5E5E5"> lines of printer lower than</font>

538
00:22:30,150 --> 00:22:34,500
print<font color="#E5E5E5"> a lowered but</font><font color="#CCCCCC"> in a lot of dataflow</font>

539
00:22:32,520 --> 00:22:36,540
programming this is actually useless

540
00:22:34,500 --> 00:22:39,030
because we already have the string is

541
00:22:36,540 --> 00:22:40,860
information on the flow so if you would

542
00:22:39,030 --> 00:22:42,809
like<font color="#CCCCCC"> to have a single thread programming</font>

543
00:22:40,860 --> 00:22:46,049
that it's displaying a<font color="#E5E5E5"> little word twice</font>

544
00:22:42,809 --> 00:22:50,549
all you really have to do is just<font color="#E5E5E5"> pipe</font>

545
00:22:46,049 --> 00:22:52,950
print again and you will<font color="#E5E5E5"> have it to</font>

546
00:22:50,549 --> 00:22:55,260
print<font color="#E5E5E5"> it twice so this is</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> kind of</font>

547
00:22:52,950 --> 00:22:57,480
thinking that is separated for

548
00:22:55,260 --> 00:22:59,610
interactive programming you always have

549
00:22:57,480 --> 00:23:01,770
information on the<font color="#E5E5E5"> floor</font><font color="#CCCCCC"> you always have</font>

550
00:22:59,610 --> 00:23:05,100
something waiting and you can pass it<font color="#CCCCCC"> to</font>

551
00:23:01,770 --> 00:23:07,650
another function or another step and<font color="#E5E5E5"> if</font>

552
00:23:05,100 --> 00:23:10,139
<font color="#E5E5E5">you reuse the information and do more</font>

553
00:23:07,650 --> 00:23:12,480
actions on it in this case spring simply

554
00:23:10,140 --> 00:23:14,610
takes information printed and pass it as

555
00:23:12,480 --> 00:23:17,190
it is to the next component but of

556
00:23:14,610 --> 00:23:24,209
<font color="#CCCCCC">course it can do anything from changing</font>

557
00:23:17,190 --> 00:23:26,270
it appending eat whatever it's a not

558
00:23:24,210 --> 00:23:28,500
only<font color="#E5E5E5"> the second step in the flow is</font>

559
00:23:26,270 --> 00:23:31,168
capable of doing a multithreading

560
00:23:28,500 --> 00:23:34,950
sometimes it makes sense to start the

561
00:23:31,169 --> 00:23:37,280
actual program or script from a separate

562
00:23:34,950 --> 00:23:41,010
or a<font color="#E5E5E5"> number of data sets so for instance</font>

563
00:23:37,280 --> 00:23:44,309
anything from multiple IPS into multiple

564
00:23:41,010 --> 00:23:46,549
our mail or binaries all these can be

565
00:23:44,309 --> 00:23:49,860
used as a starting point for a specific

566
00:23:46,549 --> 00:23:51,720
script so in the previous example I've

567
00:23:49,860 --> 00:23:53,879
showed you how we take<font color="#E5E5E5"> a literal and</font>

568
00:23:51,720 --> 00:23:56,100
expanded into a multi-threaded program

569
00:23:53,880 --> 00:23:58,500
in this slide you<font color="#CCCCCC"> can see</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> I'm doing</font>

570
00:23:56,100 --> 00:23:58,949
the reverse way I'm having at the

571
00:23:58,500 --> 00:24:01,380
beginning

572
00:23:58,950 --> 00:24:03,600
of the application is actually a list

573
00:24:01,380 --> 00:24:05,940
with two different outlet<font color="#CCCCCC"> roles in it</font>

574
00:24:03,600 --> 00:24:08,639
they're low word and print is actually

575
00:24:05,940 --> 00:24:12,300
are the the single component the result

576
00:24:08,640 --> 00:24:14,250
of this are of this script is much like

577
00:24:12,300 --> 00:24:17,940
the others it will print a low word

578
00:24:14,250 --> 00:24:23,460
wives forum<font color="#CCCCCC"> two different threads in</font>

579
00:24:17,940 --> 00:24:25,200
this example 9 and 10 so there's<font color="#E5E5E5"> a</font><font color="#CCCCCC"> lot</font>

580
00:24:23,460 --> 00:24:28,350
<font color="#E5E5E5">of flexibility in the way that you can</font>

581
00:24:25,200 --> 00:24:31,350
manipulate the flows and scale them it's

582
00:24:28,350 --> 00:24:33,540
also<font color="#E5E5E5"> worth telling that even it doesn't</font>

583
00:24:31,350 --> 00:24:35,850
<font color="#E5E5E5">have to be a compile-time feature so you</font>

584
00:24:33,540 --> 00:24:37,560
<font color="#E5E5E5">don't have to specify a list every time</font>

585
00:24:35,850 --> 00:24:40,620
<font color="#CCCCCC">that you actually want</font><font color="#E5E5E5"> to expand the</font>

586
00:24:37,560 --> 00:24:43,440
flow if a function returns a list in

587
00:24:40,620 --> 00:24:45,959
runtime then the Python interpreter will

588
00:24:43,440 --> 00:24:48,090
<font color="#E5E5E5">interpret</font><font color="#CCCCCC"> 8 the return value as this</font>

589
00:24:45,960 --> 00:24:50,340
function is created the<font color="#E5E5E5"> mini flow with</font>

590
00:24:48,090 --> 00:24:52,230
all these possible options let's take

591
00:24:50,340 --> 00:24:54,899
<font color="#E5E5E5">the</font><font color="#CCCCCC"> information pass it to them and</font>

592
00:24:52,230 --> 00:24:57,750
create a multitude application at the

593
00:24:54,900 --> 00:24:59,190
spot<font color="#CCCCCC"> essentially you can also depending</font>

594
00:24:57,750 --> 00:25:01,470
on the function depending on the way

595
00:24:59,190 --> 00:25:04,590
that<font color="#E5E5E5"> you using them you can create and</font>

596
00:25:01,470 --> 00:25:07,530
scale in in runtime so a quick overview

597
00:25:04,590 --> 00:25:09,320
of the syntax as<font color="#E5E5E5"> I said currently</font>

598
00:25:07,530 --> 00:25:11,639
<font color="#CCCCCC">pythonic is a very minimalistic</font>

599
00:25:09,320 --> 00:25:14,370
designing a programming language is more

600
00:25:11,640 --> 00:25:17,070
than an art and a science my personal

601
00:25:14,370 --> 00:25:18,870
take on these are<font color="#E5E5E5"> this philosophy is</font>

602
00:25:17,070 --> 00:25:21,149
that I'm<font color="#E5E5E5"> trying to keep the language as</font>

603
00:25:18,870 --> 00:25:23,639
abstract as minimalist as possible

604
00:25:21,150 --> 00:25:26,040
giving the programmer in the<font color="#CCCCCC"> runtime as</font>

605
00:25:23,640 --> 00:25:28,560
much power as possible so currently

606
00:25:26,040 --> 00:25:31,560
<font color="#E5E5E5">pythonic has only three are three</font>

607
00:25:28,560 --> 00:25:34,020
symbols<font color="#CCCCCC"> two operators</font><font color="#E5E5E5"> the error and the</font>

608
00:25:31,560 --> 00:25:35,520
pipe one is the non-blocking forward and

609
00:25:34,020 --> 00:25:37,950
the other is the blocking<font color="#E5E5E5"> forth and</font>

610
00:25:35,520 --> 00:25:40,379
underscore is basically using as a way

611
00:25:37,950 --> 00:25:42,390
to reference the information on the flow

612
00:25:40,380 --> 00:25:44,730
so if we're taking the previous example

613
00:25:42,390 --> 00:25:48,210
<font color="#E5E5E5">and let's say</font><font color="#CCCCCC"> that I I'd like in the</font>

614
00:25:44,730 --> 00:25:51,000
<font color="#E5E5E5">next step to add an RV a sec into it so</font>

615
00:25:48,210 --> 00:25:54,450
all I have essentially<font color="#E5E5E5"> to do is just</font>

616
00:25:51,000 --> 00:25:58,050
reference the flow using the underscore

617
00:25:54,450 --> 00:26:00,750
and then I will create an expression

618
00:25:58,050 --> 00:26:03,690
which<font color="#CCCCCC"> was evaluated into two strings</font>

619
00:26:00,750 --> 00:26:05,570
connected together and we have it it's

620
00:26:03,690 --> 00:26:10,110
not only limited<font color="#CCCCCC"> in two strings</font>

621
00:26:05,570 --> 00:26:11,990
obviously it can be done<font color="#E5E5E5"> using any any</font>

622
00:26:10,110 --> 00:26:14,389
type of objects that<font color="#E5E5E5"> is make</font>

623
00:26:11,990 --> 00:26:16,550
chance to<font color="#E5E5E5"> do actions on them and of</font>

624
00:26:14,390 --> 00:26:19,010
course<font color="#CCCCCC"> in a much complex systems it can</font>

625
00:26:16,550 --> 00:26:22,340
<font color="#CCCCCC">also represent a class and instance a</font>

626
00:26:19,010 --> 00:26:26,290
method so there is no actual limitation

627
00:26:22,340 --> 00:26:30,530
to what can be<font color="#E5E5E5"> done using the underscore</font>

628
00:26:26,290 --> 00:26:33,020
<font color="#CCCCCC">okay so I'm moving</font><font color="#E5E5E5"> on with with</font><font color="#CCCCCC"> the talk</font>

629
00:26:30,530 --> 00:26:37,040
now we will try<font color="#E5E5E5"> to address some simple</font>

630
00:26:33,020 --> 00:26:40,280
very simple security<font color="#CCCCCC"> test and see how it</font>

631
00:26:37,040 --> 00:26:43,730
<font color="#E5E5E5">can be automated using using Python act</font>

632
00:26:40,280 --> 00:26:46,700
only pythonic so this<font color="#E5E5E5"> is a very simple</font>

633
00:26:43,730 --> 00:26:48,800
<font color="#CCCCCC">broad 13 creeping decrypt program again</font>

634
00:26:46,700 --> 00:26:51,200
it's nothing<font color="#CCCCCC"> really famous Python does</font>

635
00:26:48,800 --> 00:26:53,149
allow<font color="#CCCCCC"> it out of the box this program</font>

636
00:26:51,200 --> 00:26:57,710
essentially taken input from the user

637
00:26:53,150 --> 00:26:59,809
and pass it to a rat 13 function and the

638
00:26:57,710 --> 00:27:01,610
first time<font color="#CCCCCC"> it will encrypt it and result</font>

639
00:26:59,809 --> 00:27:03,860
in the encryption<font color="#CCCCCC"> i encrypted text</font>

640
00:27:01,610 --> 00:27:05,719
output and the second time entering

641
00:27:03,860 --> 00:27:08,809
descriptive text will result in

642
00:27:05,720 --> 00:27:11,780
decrypting it so just<font color="#CCCCCC"> a quick example of</font>

643
00:27:08,809 --> 00:27:15,730
how it's actually<font color="#E5E5E5"> working if taking the</font>

644
00:27:11,780 --> 00:27:18,770
program so the text will<font color="#CCCCCC"> be other word</font>

645
00:27:15,730 --> 00:27:23,300
this will<font color="#E5E5E5"> be the encrypted example of it</font>

646
00:27:18,770 --> 00:27:27,980
and running the program again<font color="#E5E5E5"> with these</font>

647
00:27:23,300 --> 00:27:30,320
texts sorry these<font color="#E5E5E5"> texts as an input will</font>

648
00:27:27,980 --> 00:27:33,500
decrypt it back so it's not much of a

649
00:27:30,320 --> 00:27:35,659
useful<font color="#E5E5E5"> program but then again it goes to</font>

650
00:27:33,500 --> 00:27:37,610
<font color="#CCCCCC">show that encrypting and decrypting</font>

651
00:27:35,660 --> 00:27:39,740
testing strings and different

652
00:27:37,610 --> 00:27:43,879
permutation is something that is very

653
00:27:39,740 --> 00:27:46,520
fitting<font color="#CCCCCC"> it or data</font><font color="#E5E5E5"> flow programming a</font>

654
00:27:43,880 --> 00:27:48,200
network example is actually are the

655
00:27:46,520 --> 00:27:51,200
following again<font color="#CCCCCC"> a very simple example</font>

656
00:27:48,200 --> 00:27:55,130
<font color="#E5E5E5">just to show that also doing networking</font>

657
00:27:51,200 --> 00:27:56,960
test is essentially a flow of<font color="#E5E5E5"> actions so</font>

658
00:27:55,130 --> 00:27:59,150
in this example you can see that<font color="#E5E5E5"> I'm</font>

659
00:27:56,960 --> 00:28:01,100
<font color="#CCCCCC">utilizing the ftp lead package which</font>

660
00:27:59,150 --> 00:28:03,380
which is<font color="#CCCCCC"> a part of the Python standard</font>

661
00:28:01,100 --> 00:28:07,639
library and what I'm doing<font color="#CCCCCC"> is</font><font color="#E5E5E5"> I'm</font>

662
00:28:03,380 --> 00:28:10,490
passing this string ftpd new org into

663
00:28:07,640 --> 00:28:12,770
the ftp we package and what happens is

664
00:28:10,490 --> 00:28:16,850
that<font color="#CCCCCC"> i'm invoking Gilligan function the</font>

665
00:28:12,770 --> 00:28:19,610
<font color="#E5E5E5">login method and if the get method it's</font>

666
00:28:16,850 --> 00:28:22,428
a true or false function if it's passing

667
00:28:19,610 --> 00:28:24,530
if it returns the true it will<font color="#E5E5E5"> go</font><font color="#CCCCCC"> up in</font>

668
00:28:22,429 --> 00:28:26,870
printing there's this ftp is essential

669
00:28:24,530 --> 00:28:30,020
allowing an animal's looking into it and

670
00:28:26,870 --> 00:28:32,120
if not these texts won't be printed but

671
00:28:30,020 --> 00:28:33,620
the reason I'm giving up this example is

672
00:28:32,120 --> 00:28:35,389
because it shows another excellent

673
00:28:33,620 --> 00:28:37,790
interesting aspects in dataflow

674
00:28:35,390 --> 00:28:39,560
programming so essentially<font color="#CCCCCC"> the flow</font>

675
00:28:37,790 --> 00:28:41,290
should contain meaningful program

676
00:28:39,560 --> 00:28:43,639
meaningful information to process

677
00:28:41,290 --> 00:28:45,379
passing true of false values are

678
00:28:43,640 --> 00:28:48,500
essentially meaningless because it's

679
00:28:45,380 --> 00:28:50,570
just<font color="#E5E5E5"> saying 1 or 0 so I've taken the</font>

680
00:28:48,500 --> 00:28:52,430
liberty and I've<font color="#E5E5E5"> taken these all the</font>

681
00:28:50,570 --> 00:28:55,100
functions or all the expressions that

682
00:28:52,430 --> 00:28:56,660
are evaluated<font color="#E5E5E5"> into true or false and I'm</font>

683
00:28:55,100 --> 00:28:58,520
kind<font color="#E5E5E5"> of using them</font><font color="#CCCCCC"> in there to indicate</font>

684
00:28:56,660 --> 00:29:01,670
<font color="#E5E5E5">whether that there is a meaning to</font>

685
00:28:58,520 --> 00:29:04,100
continue with<font color="#E5E5E5"> the flow or not so in this</font>

686
00:29:01,670 --> 00:29:07,490
particular example as i said i'm using

687
00:29:04,100 --> 00:29:10,129
the ftp<font color="#E5E5E5"> lib our class to initiate an ftp</font>

688
00:29:07,490 --> 00:29:13,010
class and then i'm invoking d login

689
00:29:10,130 --> 00:29:14,900
method on this particular class now as I

690
00:29:13,010 --> 00:29:17,030
said the login method can only return

691
00:29:14,900 --> 00:29:19,010
true or false depending if whether it's

692
00:29:17,030 --> 00:29:21,350
successfully connected to the ftp<font color="#E5E5E5"> site</font>

693
00:29:19,010 --> 00:29:23,840
or not if it's excessively connected to

694
00:29:21,350 --> 00:29:25,550
the ftp<font color="#CCCCCC"> site then it will return true</font>

695
00:29:23,840 --> 00:29:27,949
and then the Python net program will

696
00:29:25,550 --> 00:29:30,290
essentially continue with the flow using

697
00:29:27,950 --> 00:29:32,570
the previous<font color="#E5E5E5"> value that has been entered</font>

698
00:29:30,290 --> 00:29:35,149
so in that case it will<font color="#CCCCCC"> be the ftp that</font>

699
00:29:32,570 --> 00:29:37,159
you that<font color="#CCCCCC"> org swing now if you'll give me</font>

700
00:29:35,150 --> 00:29:39,020
<font color="#CCCCCC">that does return false which means it's</font>

701
00:29:37,160 --> 00:29:41,570
not<font color="#E5E5E5"> it was not able to connect to the</font>

702
00:29:39,020 --> 00:29:44,180
ftp site then pythonic will terminate

703
00:29:41,570 --> 00:29:45,830
the flow at that point<font color="#CCCCCC"> so the print</font>

704
00:29:44,180 --> 00:29:49,430
allowing animals will actually never

705
00:29:45,830 --> 00:29:52,220
never be executed so it's again it's not

706
00:29:49,430 --> 00:29:54,920
limited<font color="#E5E5E5"> to specific functions it's not</font>

707
00:29:52,220 --> 00:29:56,890
limited<font color="#E5E5E5"> into anything it's just a way</font>

708
00:29:54,920 --> 00:30:02,150
that I'm treating a true or false

709
00:29:56,890 --> 00:30:04,670
examples values in Python<font color="#CCCCCC"> it going</font><font color="#E5E5E5"> into</font>

710
00:30:02,150 --> 00:30:06,350
<font color="#E5E5E5">a little bit more elaborate example this</font>

711
00:30:04,670 --> 00:30:08,750
<font color="#CCCCCC">is an</font><font color="#E5E5E5"> example for a very simple</font>

712
00:30:06,350 --> 00:30:11,209
command-line father so what essentially

713
00:30:08,750 --> 00:30:13,220
what we're looking over here is that the

714
00:30:11,210 --> 00:30:14,750
<font color="#E5E5E5">following first we define all</font><font color="#CCCCCC"> the</font>

715
00:30:13,220 --> 00:30:17,000
possible we're in this case of rare

716
00:30:14,750 --> 00:30:18,890
limited<font color="#E5E5E5"> Cara said but we define a number</font>

717
00:30:17,000 --> 00:30:22,880
of characters that<font color="#E5E5E5"> we would like to</font><font color="#CCCCCC"> use</font>

718
00:30:18,890 --> 00:30:25,730
as an input buffers into into the<font color="#E5E5E5"> father</font>

719
00:30:22,880 --> 00:30:27,860
the second line describes<font color="#CCCCCC"> are</font><font color="#E5E5E5"> a nested</font>

720
00:30:25,730 --> 00:30:30,440
loop will take each character and

721
00:30:27,860 --> 00:30:32,990
multiply it by these different sizes so

722
00:30:30,440 --> 00:30:35,360
<font color="#CCCCCC">essentially if you look</font><font color="#E5E5E5"> in the program</font>

723
00:30:32,990 --> 00:30:36,920
will have the percentage<font color="#CCCCCC"> ass as a</font>

724
00:30:35,360 --> 00:30:38,870
character and then

725
00:30:36,920 --> 00:30:41,150
will be multiplied by these values

726
00:30:38,870 --> 00:30:42,830
creating a big buffer and this big

727
00:30:41,150 --> 00:30:45,740
buffer will essentially will be passed

728
00:30:42,830 --> 00:30:48,800
in this example into dash being the dash

729
00:30:45,740 --> 00:30:51,860
B dash ping as a<font color="#E5E5E5"> comment a</font><font color="#CCCCCC"> command</font>

730
00:30:48,800 --> 00:30:53,990
argument so if there is a in<font color="#E5E5E5"> this</font>

731
00:30:51,860 --> 00:30:57,229
essential testing if there is a format

732
00:30:53,990 --> 00:31:00,970
string or end or a buffer overflow then

733
00:30:57,230 --> 00:31:04,610
this very true three lines sample will

734
00:31:00,970 --> 00:31:07,850
find them running it as again as I said

735
00:31:04,610 --> 00:31:09,379
it's as simple as that we have the<font color="#E5E5E5"> first</font>

736
00:31:07,850 --> 00:31:11,060
line<font color="#E5E5E5"> describing all the possible</font>

737
00:31:09,380 --> 00:31:13,370
characters of course it can be more

738
00:31:11,060 --> 00:31:16,669
elaborated and more characters can be

739
00:31:13,370 --> 00:31:18,919
inserted the second line creating the

740
00:31:16,670 --> 00:31:20,810
buffer on the<font color="#E5E5E5"> fly using</font><font color="#CCCCCC"> these sizes of</font>

741
00:31:18,920 --> 00:31:22,760
course more sizes can be entered and

742
00:31:20,810 --> 00:31:25,760
elaborated functions can be used to

743
00:31:22,760 --> 00:31:30,890
calculated and less lines just trying to

744
00:31:25,760 --> 00:31:32,480
execute being with this output so it's

745
00:31:30,890 --> 00:31:34,610
very much going<font color="#E5E5E5"> to float my screen right</font>

746
00:31:32,480 --> 00:31:37,430
now but just just to give the idea this

747
00:31:34,610 --> 00:31:39,439
is<font color="#E5E5E5"> what is going to do it will try all</font>

748
00:31:37,430 --> 00:31:43,010
these different<font color="#CCCCCC"> characters all these</font>

749
00:31:39,440 --> 00:31:45,830
different variations depending on the

750
00:31:43,010 --> 00:31:48,440
characters and<font color="#E5E5E5"> on the other</font><font color="#CCCCCC"> side of</font>

751
00:31:45,830 --> 00:31:50,480
<font color="#E5E5E5">course it's a very simple father and</font>

752
00:31:48,440 --> 00:31:53,000
much more can be built<font color="#E5E5E5"> on top of it and</font>

753
00:31:50,480 --> 00:31:56,030
much more can do bit<font color="#E5E5E5"> using this way just</font>

754
00:31:53,000 --> 00:31:58,220
<font color="#E5E5E5">to show you an example there</font><font color="#CCCCCC"> is there's</font>

755
00:31:56,030 --> 00:32:00,290
more examples and I have been as I said

756
00:31:58,220 --> 00:32:02,240
I've been<font color="#E5E5E5"> trying to</font><font color="#CCCCCC"> take PI connect and</font>

757
00:32:00,290 --> 00:32:04,790
Triton different domain problems and

758
00:32:02,240 --> 00:32:06,770
different realms so I've actually have

759
00:32:04,790 --> 00:32:09,470
did anything from scraping linkedin

760
00:32:06,770 --> 00:32:11,960
profiles into the building all these

761
00:32:09,470 --> 00:32:14,420
different fathers and trying to do a

762
00:32:11,960 --> 00:32:16,700
static<font color="#E5E5E5"> mother analysis using pi connect</font>

763
00:32:14,420 --> 00:32:19,760
so you can visit<font color="#E5E5E5"> my blog and check these</font>

764
00:32:16,700 --> 00:32:23,060
<font color="#E5E5E5">posts for more examples</font><font color="#CCCCCC"> or more advanced</font>

765
00:32:19,760 --> 00:32:25,040
examples and this is<font color="#E5E5E5"> this cool guy</font>

766
00:32:23,060 --> 00:32:27,980
called light bulb one actually he picked

767
00:32:25,040 --> 00:32:30,260
up on one of<font color="#E5E5E5"> my blogs and he actually</font>

768
00:32:27,980 --> 00:32:34,010
implemented some of the fasting puzzles

769
00:32:30,260 --> 00:32:36,530
of actually wrote on his is on his

770
00:32:34,010 --> 00:32:38,600
<font color="#CCCCCC">iPhone in actually found a buffer</font>

771
00:32:36,530 --> 00:32:41,149
overflow some some sort<font color="#E5E5E5"> of an ability in</font>

772
00:32:38,600 --> 00:32:43,370
his iphone and he describes how<font color="#CCCCCC"> he did</font>

773
00:32:41,150 --> 00:32:44,810
it in in his blog so if you<font color="#E5E5E5"> guys want to</font>

774
00:32:43,370 --> 00:32:46,639
check<font color="#CCCCCC"> it out again it's in</font><font color="#E5E5E5"> the</font>

775
00:32:44,810 --> 00:32:48,519
presentation feel free to browse and

776
00:32:46,640 --> 00:32:51,580
look on<font color="#E5E5E5"> the examples</font>

777
00:32:48,519 --> 00:32:53,169
so this was<font color="#CCCCCC"> the first part</font><font color="#E5E5E5"> of the talk</font>

778
00:32:51,580 --> 00:32:55,149
and<font color="#E5E5E5"> it's mainly just to introduce you</font>

779
00:32:53,169 --> 00:32:57,249
the Python<font color="#CCCCCC"> link and its capabilities and</font>

780
00:32:55,149 --> 00:32:59,228
what you can do with it<font color="#E5E5E5"> now in the</font>

781
00:32:57,249 --> 00:33:01,239
second part this<font color="#CCCCCC"> is actually my my end</font>

782
00:32:59,229 --> 00:33:04,029
game and<font color="#CCCCCC"> it's was</font><font color="#E5E5E5"> exactly what</font><font color="#CCCCCC"> I want to</font>

783
00:33:01,239 --> 00:33:06,039
show you guys so as I said before one of

784
00:33:04,029 --> 00:33:09,249
<font color="#E5E5E5">the problems that we described in what</font>

785
00:33:06,039 --> 00:33:11,320
is hacking doing hacking nowadays is all

786
00:33:09,249 --> 00:33:14,229
the agnostics tools the low code reuse

787
00:33:11,320 --> 00:33:17,950
and scalability issues I try<font color="#E5E5E5"> to solve</font>

788
00:33:14,229 --> 00:33:20,139
them using basically going as upper in

789
00:33:17,950 --> 00:33:21,969
the trees they can into creating a shell

790
00:33:20,139 --> 00:33:24,369
a shell which is resembling the

791
00:33:21,969 --> 00:33:26,349
unix-like shell but also gives<font color="#E5E5E5"> you some</font>

792
00:33:24,369 --> 00:33:29,458
built-in features and built-in commands

793
00:33:26,349 --> 00:33:32,739
so you can actually<font color="#E5E5E5"> instrument init</font>

794
00:33:29,459 --> 00:33:34,779
scripts a one-liner scripts or more that

795
00:33:32,739 --> 00:33:37,450
you're taking you much more work using

796
00:33:34,779 --> 00:33:39,549
just a simple unix shell or whichever

797
00:33:37,450 --> 00:33:41,109
variation of it if you like so the<font color="#E5E5E5"> idea</font>

798
00:33:39,549 --> 00:33:43,239
here is the shell it's a common

799
00:33:41,109 --> 00:33:45,458
interpreter with the<font color="#CCCCCC"> Python X a Python</font>

800
00:33:43,239 --> 00:33:47,200
neck<font color="#CCCCCC"> is a scripting engine so basically</font>

801
00:33:45,459 --> 00:33:50,079
you can<font color="#CCCCCC"> spray</font><font color="#E5E5E5"> Python act within the</font>

802
00:33:47,200 --> 00:33:52,690
shell and you have already a company

803
00:33:50,079 --> 00:33:54,219
made component library using displaying

804
00:33:52,690 --> 00:33:56,379
different tools i'll describe them in a

805
00:33:54,219 --> 00:33:58,329
bit i'm constantly working and adding

806
00:33:56,379 --> 00:34:00,519
more support for more tools currently

807
00:33:58,329 --> 00:34:03,219
<font color="#CCCCCC">it's a bit limited but the idea is very</font>

808
00:34:00,519 --> 00:34:04,959
shown so you can see what<font color="#CCCCCC"> is</font><font color="#E5E5E5"> today and</font>

809
00:34:03,219 --> 00:34:07,389
in the future it would be more much more

810
00:34:04,959 --> 00:34:09,069
elaborated again it's an open source

811
00:34:07,389 --> 00:34:11,558
project influenced by the unix shell

812
00:34:09,069 --> 00:34:13,210
scripting and<font color="#CCCCCC"> pi connect again</font><font color="#E5E5E5"> it's</font>

813
00:34:11,559 --> 00:34:14,950
completely waiting in pythons so it

814
00:34:13,210 --> 00:34:17,349
should work from<font color="#CCCCCC"> anything from a mobile</font>

815
00:34:14,949 --> 00:34:19,210
into a supercomputer you can visit the

816
00:34:17,349 --> 00:34:20,889
website there is not much of

817
00:34:19,210 --> 00:34:22,480
documentation right now on it<font color="#CCCCCC"> I'm</font>

818
00:34:20,889 --> 00:34:24,520
constantly<font color="#E5E5E5"> working on adding more</font>

819
00:34:22,480 --> 00:34:26,770
documentation more examples but there's

820
00:34:24,520 --> 00:34:28,839
a few nice examples there and in<font color="#CCCCCC"> the</font>

821
00:34:26,770 --> 00:34:33,609
first all<font color="#E5E5E5"> the ways that you can install</font>

822
00:34:28,839 --> 00:34:35,379
<font color="#CCCCCC">it so as I said fewer words are working</font>

823
00:34:33,609 --> 00:34:37,719
completely in Python host<font color="#E5E5E5"> I didn't get</font>

824
00:34:35,379 --> 00:34:41,949
that much like pie connect our feel free

825
00:34:37,719 --> 00:34:43,989
to clone the repository or using the

826
00:34:41,949 --> 00:34:45,730
installer so the motivation for

827
00:34:43,989 --> 00:34:47,439
<font color="#E5E5E5">everything as for everything in the</font>

828
00:34:45,730 --> 00:34:49,899
motivation<font color="#E5E5E5"> is to take over the</font><font color="#CCCCCC"> word</font><font color="#E5E5E5"> I</font>

829
00:34:47,440 --> 00:34:51,490
failed bummer and then I moved on into

830
00:34:49,899 --> 00:34:53,589
trying to do<font color="#E5E5E5"> something more useful out</font>

831
00:34:51,489 --> 00:34:55,658
of it which is as I said<font color="#CCCCCC"> before trying</font>

832
00:34:53,589 --> 00:34:57,490
to<font color="#E5E5E5"> automate security test and reusing</font>

833
00:34:55,659 --> 00:34:59,380
code as much as possible basically

834
00:34:57,490 --> 00:35:01,500
creating a framework where then it can

835
00:34:59,380 --> 00:35:03,390
go<font color="#CCCCCC"> on and try</font><font color="#E5E5E5"> to do ready</font>

836
00:35:01,500 --> 00:35:05,340
mean or more advanced examples while I

837
00:35:03,390 --> 00:35:08,250
have the<font color="#E5E5E5"> basics already locked in and</font>

838
00:35:05,340 --> 00:35:10,020
working for me out of the box so

839
00:35:08,250 --> 00:35:11,850
installing hacker<font color="#E5E5E5"> shell much like</font>

840
00:35:10,020 --> 00:35:14,009
installing<font color="#E5E5E5"> Python</font><font color="#CCCCCC"> if is a very simple</font>

841
00:35:11,850 --> 00:35:17,339
process just<font color="#CCCCCC"> die please install or pipe</font>

842
00:35:14,010 --> 00:35:19,470
on your linux windows or mac and you

843
00:35:17,340 --> 00:35:21,360
should probably pretty much to be set by

844
00:35:19,470 --> 00:35:23,399
now it's important<font color="#E5E5E5"> to emphasize that</font>

845
00:35:21,360 --> 00:35:26,010
<font color="#CCCCCC">this is only installing the hacker shell</font>

846
00:35:23,400 --> 00:35:27,960
the outer shell is also dependent on

847
00:35:26,010 --> 00:35:30,510
third parties which is basically the

848
00:35:27,960 --> 00:35:34,290
tools of trying to instrument may it be

849
00:35:30,510 --> 00:35:36,060
nmap or<font color="#CCCCCC"> w/e AF so this will</font><font color="#E5E5E5"> not install</font>

850
00:35:34,290 --> 00:35:37,770
all these tools<font color="#E5E5E5"> and your computer</font><font color="#CCCCCC"> it</font>

851
00:35:36,060 --> 00:35:40,140
will just get the shell into it<font color="#CCCCCC"> I</font>

852
00:35:37,770 --> 00:35:43,020
strongly recommend using anything from

853
00:35:40,140 --> 00:35:45,120
<font color="#CCCCCC">10-2 to backtrack and stole hacker shell</font>

854
00:35:43,020 --> 00:35:47,250
and these these rules then you have all

855
00:35:45,120 --> 00:35:49,290
<font color="#CCCCCC">the utilities already installed and</font>

856
00:35:47,250 --> 00:35:50,850
hacker shell will be<font color="#CCCCCC"> able to instrument</font>

857
00:35:49,290 --> 00:35:52,620
them so you won't<font color="#E5E5E5"> have</font><font color="#CCCCCC"> to go through the</font>

858
00:35:50,850 --> 00:35:54,630
pain of installing everything on your

859
00:35:52,620 --> 00:35:56,460
laptop but then<font color="#E5E5E5"> again if you</font><font color="#CCCCCC"> want to do</font>

860
00:35:54,630 --> 00:36:00,900
it it's possible<font color="#E5E5E5"> there is no actual</font>

861
00:35:56,460 --> 00:36:02,490
limitation here<font color="#CCCCCC"> okay so as I said a</font>

862
00:36:00,900 --> 00:36:04,710
<font color="#E5E5E5">little bit in the contrast what I</font>

863
00:36:02,490 --> 00:36:06,569
described before this is the<font color="#E5E5E5"> component</font>

864
00:36:04,710 --> 00:36:08,790
based software engineering so it's also

865
00:36:06,570 --> 00:36:10,740
data<font color="#E5E5E5"> flow but the idea here that we have</font>

866
00:36:08,790 --> 00:36:13,020
components and all these<font color="#CCCCCC"> components</font>

867
00:36:10,740 --> 00:36:15,029
share<font color="#CCCCCC"> a similar</font><font color="#E5E5E5"> context I'll go into</font>

868
00:36:13,020 --> 00:36:18,509
details much further we have external

869
00:36:15,030 --> 00:36:20,850
components anything from nmap<font color="#CCCCCC"> WTF DNS</font>

870
00:36:18,510 --> 00:36:23,220
dich nicht oh they're all<font color="#CCCCCC"> been</font><font color="#E5E5E5"> currently</font>

871
00:36:20,850 --> 00:36:25,259
supported and if you have them installed

872
00:36:23,220 --> 00:36:27,600
hacker shell will be able<font color="#CCCCCC"> to</font><font color="#E5E5E5"> instrument</font>

873
00:36:25,260 --> 00:36:29,250
them out of<font color="#E5E5E5"> the box as opposed to it</font>

874
00:36:27,600 --> 00:36:31,500
there's also internal components which

875
00:36:29,250 --> 00:36:34,500
are the one implemented within<font color="#E5E5E5"> occur</font>

876
00:36:31,500 --> 00:36:36,690
shell and these are<font color="#CCCCCC"> more a guiding</font>

877
00:36:34,500 --> 00:36:38,760
components to help you describe the flow

878
00:36:36,690 --> 00:36:41,670
better so the<font color="#CCCCCC"> rest of the flow will</font>

879
00:36:38,760 --> 00:36:44,190
group in<font color="#E5E5E5"> the way that you like so you</font>

880
00:36:41,670 --> 00:36:47,430
have components that will take strings

881
00:36:44,190 --> 00:36:53,670
and convert them to URL ipv4 addresses

882
00:36:47,430 --> 00:36:55,589
ipv6 addresses and etc so you can see

883
00:36:53,670 --> 00:36:57,360
took two quick examples and just a

884
00:36:55,590 --> 00:36:59,730
<font color="#CCCCCC">little</font><font color="#E5E5E5"> bit of a background about how</font>

885
00:36:57,360 --> 00:37:02,880
these are being played with bean

886
00:36:59,730 --> 00:37:04,680
components so first of all the Rings

887
00:37:02,880 --> 00:37:06,690
there is a lot of automatically stuff

888
00:37:04,680 --> 00:37:09,089
happening in hacker shell to get all

889
00:37:06,690 --> 00:37:11,660
these things working together but these

890
00:37:09,090 --> 00:37:12,810
automatic can be also broke down and<font color="#E5E5E5"> do</font>

891
00:37:11,660 --> 00:37:15,270
because

892
00:37:12,810 --> 00:37:17,690
so for<font color="#CCCCCC"> instance in this first example we</font>

893
00:37:15,270 --> 00:37:20,280
can see<font color="#E5E5E5"> a very</font><font color="#CCCCCC"> clear very simple</font>

894
00:37:17,690 --> 00:37:23,370
<font color="#E5E5E5">skimming script so we have the</font><font color="#CCCCCC"> localhost</font>

895
00:37:20,280 --> 00:37:25,200
<font color="#E5E5E5">into</font><font color="#CCCCCC"> a nose name and then into n month</font>

896
00:37:23,370 --> 00:37:28,859
now if you would like<font color="#CCCCCC"> to</font><font color="#E5E5E5"> add a</font>

897
00:37:25,200 --> 00:37:31,379
customized end up flag into the script

898
00:37:28,860 --> 00:37:33,480
or into<font color="#E5E5E5"> the actual execution then it's</font>

899
00:37:31,380 --> 00:37:36,570
not<font color="#E5E5E5"> a problem you can simply add it as a</font>

900
00:37:33,480 --> 00:37:38,880
constructor to the component and you can

901
00:37:36,570 --> 00:37:40,800
use<font color="#CCCCCC"> it to pass any</font><font color="#E5E5E5"> parameters that</font><font color="#CCCCCC"> you</font>

902
00:37:38,880 --> 00:37:43,140
would like<font color="#E5E5E5"> to customize and mucked</font>

903
00:37:40,800 --> 00:37:45,180
around as you want if you<font color="#CCCCCC"> won't pass any</font>

904
00:37:43,140 --> 00:37:47,040
parameters I do supply default each

905
00:37:45,180 --> 00:37:49,589
component supplies the default set of

906
00:37:47,040 --> 00:37:51,870
our running<font color="#E5E5E5"> for parameters so it should</font>

907
00:37:49,590 --> 00:37:54,750
work but then again<font color="#E5E5E5"> maybe not to your</font>

908
00:37:51,870 --> 00:37:56,759
taste the second<font color="#E5E5E5"> one is describing the</font>

909
00:37:54,750 --> 00:37:59,280
<font color="#CCCCCC">weight I let you to debug the actual</font>

910
00:37:56,760 --> 00:38:01,560
output so as I said<font color="#E5E5E5"> the information is</font>

911
00:37:59,280 --> 00:38:04,500
well kept within<font color="#E5E5E5"> the flow on console t</font>

912
00:38:01,560 --> 00:38:06,960
trying to take the outputs of every tool

913
00:38:04,500 --> 00:38:08,820
and convert it into this major meta data

914
00:38:06,960 --> 00:38:11,070
structure which I'll show in a few

915
00:38:08,820 --> 00:38:12,810
slides but if you would like<font color="#CCCCCC"> to have the</font>

916
00:38:11,070 --> 00:38:14,820
raw information being displayed that's

917
00:38:12,810 --> 00:38:17,430
not a problem all you have to do is

918
00:38:14,820 --> 00:38:19,950
supply debug value into the component

919
00:38:17,430 --> 00:38:22,259
and the actual output will<font color="#CCCCCC"> be printed</font><font color="#E5E5E5"> to</font>

920
00:38:19,950 --> 00:38:24,629
the screen it can be attached<font color="#CCCCCC"> to almost</font>

921
00:38:22,260 --> 00:38:26,900
<font color="#E5E5E5">any component out there that is make</font>

922
00:38:24,630 --> 00:38:29,760
sense for its output to be display

923
00:38:26,900 --> 00:38:31,950
obviously URL and all these internal

924
00:38:29,760 --> 00:38:36,210
components don't support it there is not

925
00:38:31,950 --> 00:38:38,339
much<font color="#CCCCCC"> to display from these functions so</font>

926
00:38:36,210 --> 00:38:40,260
as I<font color="#E5E5E5"> said the one of the automatic</font>

927
00:38:38,340 --> 00:38:42,630
things that happens in hacker shell is

928
00:38:40,260 --> 00:38:45,750
<font color="#CCCCCC">the context is basically each component</font>

929
00:38:42,630 --> 00:38:48,840
when it's executing the application

930
00:38:45,750 --> 00:38:51,150
whether its internal external the output

931
00:38:48,840 --> 00:38:53,550
is<font color="#E5E5E5"> a context which is a basically a meta</font>

932
00:38:51,150 --> 00:38:54,900
data structure a very abstract one which

933
00:38:53,550 --> 00:38:57,690
is<font color="#CCCCCC"> a addiction</font><font color="#E5E5E5"> I'm using a dictionary</font>

934
00:38:54,900 --> 00:39:00,360
<font color="#E5E5E5">assistive array represented in this</font>

935
00:38:57,690 --> 00:39:02,790
context in contain anything from what's

936
00:39:00,360 --> 00:39:05,850
the IP address<font color="#CCCCCC"> that we start with the</font>

937
00:39:02,790 --> 00:39:09,360
skin what's the current flow what other

938
00:39:05,850 --> 00:39:11,430
tools found in<font color="#CCCCCC"> etc so basically every</font>

939
00:39:09,360 --> 00:39:14,280
component is programmed<font color="#E5E5E5"> to accept this</font>

940
00:39:11,430 --> 00:39:17,250
context structure both as an input and

941
00:39:14,280 --> 00:39:19,560
<font color="#E5E5E5">as an output in by normalizing all the</font>

942
00:39:17,250 --> 00:39:21,690
components<font color="#E5E5E5"> to speak with this meta data</font>

943
00:39:19,560 --> 00:39:25,080
structure<font color="#E5E5E5"> I'm able to do and very</font>

944
00:39:21,690 --> 00:39:26,430
interesting things so this<font color="#CCCCCC"> is an example</font>

945
00:39:25,080 --> 00:39:29,279
<font color="#E5E5E5">of how</font>

946
00:39:26,430 --> 00:39:31,558
<font color="#E5E5E5">really the context allows you to change</font>

947
00:39:29,280 --> 00:39:34,650
<font color="#E5E5E5">the flow of the application without</font>

948
00:39:31,559 --> 00:39:37,349
worrying about it being piped in a

949
00:39:34,650 --> 00:39:40,170
correct order or it's been piped in the

950
00:39:37,349 --> 00:39:42,540
correct sequence so as opposed to appear

951
00:39:40,170 --> 00:39:47,040
that<font color="#CCCCCC"> the flow programming it wouldn't</font>

952
00:39:42,540 --> 00:39:50,009
make sense in in that sense<font color="#E5E5E5"> to have</font><font color="#CCCCCC"> ping</font>

953
00:39:47,040 --> 00:39:52,829
off after an nmap because if we look on

954
00:39:50,010 --> 00:39:56,280
<font color="#CCCCCC">the very pure basics out of the way then</font>

955
00:39:52,829 --> 00:39:58,349
ping should consume the actual target

956
00:39:56,280 --> 00:40:00,450
but things as<font color="#E5E5E5"> I said all the components</font>

957
00:39:58,349 --> 00:40:03,000
are passing the context and<font color="#E5E5E5"> the concept</font>

958
00:40:00,450 --> 00:40:06,210
does contain the source or the target

959
00:40:03,000 --> 00:40:08,880
URL then you can you can place them not

960
00:40:06,210 --> 00:40:11,190
not represent the actual flow of the

961
00:40:08,880 --> 00:40:13,440
program but more of the mindset of what

962
00:40:11,190 --> 00:40:15,990
you<font color="#E5E5E5"> like things to happen and with what</font>

963
00:40:13,440 --> 00:40:18,089
order so in the<font color="#E5E5E5"> first example what</font><font color="#CCCCCC"> we</font>

964
00:40:15,990 --> 00:40:20,459
have yours basically be taking the<font color="#E5E5E5"> local</font>

965
00:40:18,089 --> 00:40:23,609
<font color="#E5E5E5">host as a target converting it into a</font>

966
00:40:20,460 --> 00:40:26,160
URL running and map on it<font color="#E5E5E5"> and then ping</font>

967
00:40:23,609 --> 00:40:28,859
in it so if there is anything else

968
00:40:26,160 --> 00:40:32,098
further down the pink then the question

969
00:40:28,859 --> 00:40:34,339
<font color="#E5E5E5">will be if the host is not pingable then</font>

970
00:40:32,099 --> 00:40:37,410
the rest of the actions won't take place

971
00:40:34,339 --> 00:40:39,900
<font color="#E5E5E5">so basically ping is acting as a filter</font>

972
00:40:37,410 --> 00:40:42,089
component in this example but it will

973
00:40:39,900 --> 00:40:44,880
<font color="#E5E5E5">only happen after</font><font color="#CCCCCC"> nmap has</font><font color="#E5E5E5"> been executed</font>

974
00:40:42,089 --> 00:40:46,710
<font color="#CCCCCC">in the leather example you can see it's</font>

975
00:40:44,880 --> 00:40:49,829
<font color="#CCCCCC">pretty much</font><font color="#E5E5E5"> the same except the ping in</font>

976
00:40:46,710 --> 00:40:52,680
<font color="#E5E5E5">the end of order is reversed so what we</font>

977
00:40:49,829 --> 00:40:55,020
have here<font color="#CCCCCC"> is the pink as basically</font><font color="#E5E5E5"> the</font>

978
00:40:52,680 --> 00:40:57,629
program will say that only<font color="#CCCCCC"> if the URL is</font>

979
00:40:55,020 --> 00:41:01,470
pingable then we'll proceeding to our

980
00:40:57,630 --> 00:41:04,380
port scanning in a way the power<font color="#E5E5E5"> of the</font>

981
00:41:01,470 --> 00:41:06,868
<font color="#CCCCCC">the context has been able</font><font color="#E5E5E5"> to pipe in at</font>

982
00:41:04,380 --> 00:41:09,420
every level and<font color="#CCCCCC"> at every step as I said</font>

983
00:41:06,869 --> 00:41:15,630
<font color="#E5E5E5">you can change it to fit what you would</font>

984
00:41:09,420 --> 00:41:17,880
like<font color="#CCCCCC"> to have another</font><font color="#E5E5E5"> big feature of the</font>

985
00:41:15,630 --> 00:41:19,680
context in part the neck is<font color="#E5E5E5"> actually</font>

986
00:41:17,880 --> 00:41:22,500
being you bay if you're able to touch it

987
00:41:19,680 --> 00:41:25,430
in programming in runtime as easy as

988
00:41:22,500 --> 00:41:28,140
dead so this is<font color="#CCCCCC"> a very very simple</font>

989
00:41:25,430 --> 00:41:31,649
pentesting<font color="#E5E5E5"> script right here we're</font>

990
00:41:28,140 --> 00:41:34,558
taking<font color="#CCCCCC"> a URL string converting it into a</font>

991
00:41:31,650 --> 00:41:36,210
URL running an opponent then we have

992
00:41:34,559 --> 00:41:40,280
<font color="#E5E5E5">this expression will discuss in a minute</font>

993
00:41:36,210 --> 00:41:42,050
and afterwards we putting it into<font color="#E5E5E5"> W</font>

994
00:41:40,280 --> 00:41:44,630
<font color="#CCCCCC">vaf if you're not</font><font color="#E5E5E5"> familiar with it it's</font>

995
00:41:42,050 --> 00:41:47,900
an automatic pen testing tool kit and

996
00:41:44,630 --> 00:41:49,610
then printing the the result so what

997
00:41:47,900 --> 00:41:52,370
essentially what we have in this

998
00:41:49,610 --> 00:41:55,670
<font color="#E5E5E5">expression is a way</font><font color="#CCCCCC"> for us</font><font color="#E5E5E5"> to say that</font>

999
00:41:52,370 --> 00:41:57,500
<font color="#E5E5E5">okay not all</font><font color="#CCCCCC"> the floors should always be</font>

1000
00:41:55,670 --> 00:42:00,290
automatically executed if you would<font color="#E5E5E5"> like</font>

1001
00:41:57,500 --> 00:42:03,800
<font color="#CCCCCC">to specify conditions specific condition</font>

1002
00:42:00,290 --> 00:42:06,550
into running the certain flow then we're

1003
00:42:03,800 --> 00:42:10,700
able to do it describing a very simple

1004
00:42:06,550 --> 00:42:13,100
language using n or not such as in

1005
00:42:10,700 --> 00:42:15,410
Python expression and accessing the

1006
00:42:13,100 --> 00:42:17,210
count the actual context values and

1007
00:42:15,410 --> 00:42:19,790
compared them so in this particular

1008
00:42:17,210 --> 00:42:22,190
example I'm only interested in scanning

1009
00:42:19,790 --> 00:42:25,130
up actually and all interested in

1010
00:42:22,190 --> 00:42:28,490
conducting the pen test if nmap has

1011
00:42:25,130 --> 00:42:30,110
resulted in finding a port 8080 and the

1012
00:42:28,490 --> 00:42:32,810
service and then to file on this support

1013
00:42:30,110 --> 00:42:35,570
is HTTP anything that doesn't match this

1014
00:42:32,810 --> 00:42:38,540
requirement will simply not<font color="#E5E5E5"> proceed into</font>

1015
00:42:35,570 --> 00:42:40,520
the pen test so essentially you<font color="#CCCCCC"> can use</font>

1016
00:42:38,540 --> 00:42:42,170
this expression this<font color="#E5E5E5"> context to create</font>

1017
00:42:40,520 --> 00:42:44,240
this all these different situation and

1018
00:42:42,170 --> 00:42:46,910
variation of how you would likely be

1019
00:42:44,240 --> 00:42:48,709
depend test or the procedure to take

1020
00:42:46,910 --> 00:42:53,390
place depending on the information that

1021
00:42:48,710 --> 00:42:56,090
<font color="#E5E5E5">has</font><font color="#CCCCCC"> been populated in runtime so from a</font>

1022
00:42:53,390 --> 00:42:57,770
30 feet high level diagram this is how

1023
00:42:56,090 --> 00:43:00,170
<font color="#CCCCCC">trinks looks like usually when you</font>

1024
00:42:57,770 --> 00:43:02,690
you're going<font color="#E5E5E5"> to use hacker shell so the</font>

1025
00:43:00,170 --> 00:43:04,730
<font color="#E5E5E5">first input will usually be a string</font>

1026
00:43:02,690 --> 00:43:08,030
which will describe anything and any

1027
00:43:04,730 --> 00:43:10,340
<font color="#E5E5E5">endpoint from an IP V address into a URL</font>

1028
00:43:08,030 --> 00:43:12,380
and<font color="#CCCCCC"> then you will use the root component</font>

1029
00:43:10,340 --> 00:43:14,990
which will be the first step<font color="#E5E5E5"> into hacker</font>

1030
00:43:12,380 --> 00:43:18,200
shell and that will be how to describe

1031
00:43:14,990 --> 00:43:20,959
this information in a context way is it

1032
00:43:18,200 --> 00:43:23,899
a URL is it an ipv4 addresses<font color="#CCCCCC"> it's an</font>

1033
00:43:20,960 --> 00:43:25,640
<font color="#E5E5E5">ipv6 it is a local host there is there's</font>

1034
00:43:23,900 --> 00:43:28,220
a library<font color="#CCCCCC"> of different worth components</font>

1035
00:43:25,640 --> 00:43:30,470
it allow you to take in a customized

1036
00:43:28,220 --> 00:43:32,959
information based on what what is

1037
00:43:30,470 --> 00:43:35,330
<font color="#CCCCCC">actually is and the real component will</font>

1038
00:43:32,960 --> 00:43:37,100
generate the initial<font color="#CCCCCC"> context</font><font color="#E5E5E5"> and from</font>

1039
00:43:35,330 --> 00:43:41,180
there which will simply go into<font color="#E5E5E5"> all</font>

1040
00:43:37,100 --> 00:43:43,360
these different<font color="#CCCCCC"> components so as a final</font>

1041
00:43:41,180 --> 00:43:47,299
example i will<font color="#E5E5E5"> show you our step-by-step</font>

1042
00:43:43,360 --> 00:43:49,790
web pen test script using hacker shell

1043
00:43:47,300 --> 00:43:53,750
and the very few components currently

1044
00:43:49,790 --> 00:43:55,850
being supported so let's<font color="#E5E5E5"> say</font><font color="#CCCCCC"> that we're</font>

1045
00:43:53,750 --> 00:43:59,630
asking to<font color="#E5E5E5"> pen testing hacker shell</font>

1046
00:43:55,850 --> 00:44:01,640
website please don't but having<font color="#CCCCCC"> said</font>

1047
00:43:59,630 --> 00:44:03,740
that we<font color="#E5E5E5"> will take the hacker shell org</font>

1048
00:44:01,640 --> 00:44:06,259
and<font color="#CCCCCC"> we'll describe</font><font color="#E5E5E5"> it as a domain</font>

1049
00:44:03,740 --> 00:44:08,540
because we interested to see in all the

1050
00:44:06,260 --> 00:44:11,540
<font color="#CCCCCC">different subdomains that may result out</font>

1051
00:44:08,540 --> 00:44:15,050
of scanning it so we're<font color="#E5E5E5"> using the DNS</font>

1052
00:44:11,540 --> 00:44:16,810
dick tool to basically generate to brute

1053
00:44:15,050 --> 00:44:19,610
force and generate all the possible

1054
00:44:16,810 --> 00:44:23,000
subdomains out of the hacker shell dot

1055
00:44:19,610 --> 00:44:27,320
org domain so the result will<font color="#E5E5E5"> be the DNS</font>

1056
00:44:23,000 --> 00:44:30,680
that the dash for command line is

1057
00:44:27,320 --> 00:44:34,370
actually to generate ipv4 as opposed to

1058
00:44:30,680 --> 00:44:37,069
ipv6 so it will<font color="#E5E5E5"> generate any sub domains</font>

1059
00:44:34,370 --> 00:44:40,790
that has a valid ipv4 addresses<font color="#E5E5E5"> our</font>

1060
00:44:37,070 --> 00:44:43,040
<font color="#E5E5E5">result from them so now that we have all</font>

1061
00:44:40,790 --> 00:44:44,720
these different<font color="#E5E5E5"> domains the first thing</font>

1062
00:44:43,040 --> 00:44:48,050
that<font color="#E5E5E5"> you would like to</font><font color="#CCCCCC"> do is essentially</font>

1063
00:44:44,720 --> 00:44:50,839
<font color="#E5E5E5">to scan them so we're going to ask the</font>

1064
00:44:48,050 --> 00:44:53,570
<font color="#E5E5E5">DNS dick every every subdomain every</font>

1065
00:44:50,840 --> 00:44:55,730
<font color="#CCCCCC">ossining that who find it will then send</font>

1066
00:44:53,570 --> 00:44:57,710
to<font color="#CCCCCC"> end map and end up with obviously</font>

1067
00:44:55,730 --> 00:45:00,380
<font color="#CCCCCC">port scan it in to see which services</font>

1068
00:44:57,710 --> 00:45:03,050
are running on it the next<font color="#E5E5E5"> step will be</font>

1069
00:45:00,380 --> 00:45:05,120
i'm going to plug nikto into it so i'm

1070
00:45:03,050 --> 00:45:07,550
going to<font color="#E5E5E5"> use nikto as</font><font color="#CCCCCC"> a web</font>

1071
00:45:05,120 --> 00:45:10,630
vulnerability scanner so essentially the

1072
00:45:07,550 --> 00:45:13,910
flow will be<font color="#E5E5E5"> taking</font><font color="#CCCCCC"> the hacker</font><font color="#E5E5E5"> shell org</font>

1073
00:45:10,630 --> 00:45:15,830
<font color="#CCCCCC">considered</font><font color="#E5E5E5"> as a domain enumerate or</font>

1074
00:45:13,910 --> 00:45:20,060
brute force all the<font color="#E5E5E5"> possible subdomains</font>

1075
00:45:15,830 --> 00:45:21,860
using the<font color="#CCCCCC"> DNS dicked scanning these</font>

1076
00:45:20,060 --> 00:45:24,890
different all these different domains

1077
00:45:21,860 --> 00:45:27,740
and if any of these subdomains may have

1078
00:45:24,890 --> 00:45:32,299
an open HTTP port such as for instance

1079
00:45:27,740 --> 00:45:35,330
the example will be<font color="#CCCCCC"> wwf/e org it will</font>

1080
00:45:32,300 --> 00:45:37,040
obviously<font color="#E5E5E5"> have an open HTTP service so</font>

1081
00:45:35,330 --> 00:45:39,080
if it will have an open HTTP service

1082
00:45:37,040 --> 00:45:41,270
<font color="#CCCCCC">NICTA will be able</font><font color="#E5E5E5"> to automatically</font>

1083
00:45:39,080 --> 00:45:43,370
consume it Nick to<font color="#CCCCCC"> being a web service</font>

1084
00:45:41,270 --> 00:45:45,560
or<font color="#CCCCCC"> web brewery in tate pentas tool</font>

1085
00:45:43,370 --> 00:45:48,290
whichever HTTP service has been

1086
00:45:45,560 --> 00:45:50,990
<font color="#CCCCCC">identified its able</font><font color="#E5E5E5"> to consume the</font>

1087
00:45:48,290 --> 00:45:53,750
context is valid for it so simply it

1088
00:45:50,990 --> 00:45:57,350
will take the end map context and run on

1089
00:45:53,750 --> 00:46:00,290
it<font color="#CCCCCC"> and</font><font color="#E5E5E5"> a step further will be to plug</font>

1090
00:45:57,350 --> 00:46:02,150
another weapon testing tool into it so

1091
00:46:00,290 --> 00:46:04,310
<font color="#E5E5E5">now that</font><font color="#CCCCCC"> we already did a check on the</font>

1092
00:46:02,150 --> 00:46:06,860
<font color="#E5E5E5">web server surface</font><font color="#CCCCCC"> I'll also</font><font color="#E5E5E5"> like to</font>

1093
00:46:04,310 --> 00:46:07,578
step in and do a more application wise

1094
00:46:06,860 --> 00:46:11,479
up

1095
00:46:07,579 --> 00:46:13,849
this so in this example again<font color="#E5E5E5"> I'll take</font>

1096
00:46:11,479 --> 00:46:17,259
down the flow after<font color="#CCCCCC"> the bottom we have</font>

1097
00:46:13,849 --> 00:46:19,729
hackers l dot org domain we're

1098
00:46:17,259 --> 00:46:23,390
<font color="#E5E5E5">brute-forcing and using</font><font color="#CCCCCC"> DNS dick to find</font>

1099
00:46:19,729 --> 00:46:25,999
all the subdomains so the jacker shell

1100
00:46:23,390 --> 00:46:27,529
is a string in converting to a domain at

1101
00:46:25,999 --> 00:46:30,709
this<font color="#E5E5E5"> point the context has been</font>

1102
00:46:27,529 --> 00:46:32,239
<font color="#E5E5E5">initially created and every step the the</font>

1103
00:46:30,709 --> 00:46:34,940
valid context will be added more

1104
00:46:32,239 --> 00:46:37,579
information to it so in that sense the

1105
00:46:34,940 --> 00:46:40,400
<font color="#E5E5E5">DNS dick will create</font><font color="#CCCCCC"> context base from</font>

1106
00:46:37,579 --> 00:46:42,739
the<font color="#E5E5E5"> domain or the</font><font color="#CCCCCC"> other possible sub</font>

1107
00:46:40,400 --> 00:46:44,479
domains that it's able<font color="#E5E5E5"> to find the end</font>

1108
00:46:42,739 --> 00:46:47,839
map will add layer of the different

1109
00:46:44,479 --> 00:46:49,968
<font color="#CCCCCC">services and ports found within each sub</font>

1110
00:46:47,839 --> 00:46:51,859
domain nectar will only consume

1111
00:46:49,969 --> 00:46:54,469
basically it will filter only the

1112
00:46:51,859 --> 00:46:56,779
context that contain HTTP services it's

1113
00:46:54,469 --> 00:46:59,660
the<font color="#CCCCCC"> only thing</font><font color="#E5E5E5"> it's able to consume so</font>

1114
00:46:56,779 --> 00:47:03,289
from from that on it will pass it to the

1115
00:46:59,660 --> 00:47:05,839
<font color="#E5E5E5">WTF tool which will take the URL and the</font>

1116
00:47:03,289 --> 00:47:08,569
HTTP service information construct a

1117
00:47:05,839 --> 00:47:12,349
website or a URL from it and<font color="#E5E5E5"> we'll begin</font>

1118
00:47:08,569 --> 00:47:14,390
doing a pen testing so the<font color="#CCCCCC"> final the</font>

1119
00:47:12,349 --> 00:47:16,549
<font color="#E5E5E5">final step will be to actually add the</font>

1120
00:47:14,390 --> 00:47:19,219
<font color="#E5E5E5">reporting into the all the equation</font>

1121
00:47:16,549 --> 00:47:22,459
essentially on this information<font color="#CCCCCC"> up until</font>

1122
00:47:19,219 --> 00:47:25,219
this point is actually we encapsulated

1123
00:47:22,459 --> 00:47:27,109
within the system the print function in

1124
00:47:25,219 --> 00:47:29,869
this case<font color="#E5E5E5"> will do a very simple ask</font>

1125
00:47:27,109 --> 00:47:31,519
style report generation of all the

1126
00:47:29,869 --> 00:47:34,719
difference context that has been

1127
00:47:31,519 --> 00:47:38,569
survived up to up up<font color="#E5E5E5"> to this point so</font>

1128
00:47:34,719 --> 00:47:40,249
<font color="#E5E5E5">again it will be only HTTP services</font>

1129
00:47:38,569 --> 00:47:43,160
because it's the only thing that nikto

1130
00:47:40,249 --> 00:47:45,259
and WTF can consume so essentially we

1131
00:47:43,160 --> 00:47:47,410
will have all the different websites and

1132
00:47:45,259 --> 00:47:51,619
all the different vulnerabilities that

1133
00:47:47,410 --> 00:47:54,589
<font color="#CCCCCC">we have</font><font color="#E5E5E5"> found in them so just a very</font>

1134
00:47:51,619 --> 00:47:57,199
quick demonstration of how hackers sure

1135
00:47:54,589 --> 00:47:59,390
looks like and feel<font color="#CCCCCC"> like so this</font><font color="#E5E5E5"> is</font>

1136
00:47:57,199 --> 00:48:02,930
hotter she looks like a<font color="#E5E5E5"> little bit of an</font>

1137
00:47:59,390 --> 00:48:04,609
ascii art over there to a<font color="#E5E5E5"> nostalgia so</font>

1138
00:48:02,930 --> 00:48:08,269
essentially and said it's a<font color="#CCCCCC"> very unique</font>

1139
00:48:04,609 --> 00:48:10,788
<font color="#CCCCCC">like she'll just doing like these very</font>

1140
00:48:08,269 --> 00:48:17,959
simple things to quickly show you some

1141
00:48:10,789 --> 00:48:20,599
output so um as I said you can you can

1142
00:48:17,959 --> 00:48:21,169
simply<font color="#E5E5E5"> take</font><font color="#CCCCCC"> information and plug it into</font>

1143
00:48:20,599 --> 00:48:23,109
an

1144
00:48:21,170 --> 00:48:25,609
create all these different flows now

1145
00:48:23,109 --> 00:48:28,400
okay that was not<font color="#CCCCCC"> a very good example</font>

1146
00:48:25,609 --> 00:48:31,160
but the<font color="#E5E5E5"> thing is if you're not</font>

1147
00:48:28,400 --> 00:48:33,020
explicitly trying to print the

1148
00:48:31,160 --> 00:48:35,480
information then hacker shell will try

1149
00:48:33,020 --> 00:48:37,880
to generate some sort<font color="#E5E5E5"> of an executive</font>

1150
00:48:35,480 --> 00:48:40,130
summary so in this case it will try to

1151
00:48:37,880 --> 00:48:42,500
take all the means for context and just

1152
00:48:40,130 --> 00:48:44,750
write<font color="#CCCCCC"> to like place them in a tree</font>

1153
00:48:42,500 --> 00:48:47,359
structure like<font color="#CCCCCC"> sheep in C so in this</font>

1154
00:48:44,750 --> 00:48:49,369
example I simply didn't end up on my<font color="#E5E5E5"> own</font>

1155
00:48:47,359 --> 00:48:51,020
<font color="#E5E5E5">computer and they end up having these</font>

1156
00:48:49,369 --> 00:48:54,079
three with all the different<font color="#CCCCCC"> services</font>

1157
00:48:51,020 --> 00:48:56,150
that<font color="#E5E5E5"> has been found on it now I could</font>

1158
00:48:54,079 --> 00:48:58,790
have been I could have explicitly asked

1159
00:48:56,150 --> 00:49:01,280
and<font color="#E5E5E5"> map to print each and every context</font>

1160
00:48:58,790 --> 00:49:02,990
of the more information on it so as you

1161
00:49:01,280 --> 00:49:05,150
can see for every port<font color="#E5E5E5"> that has been</font>

1162
00:49:02,990 --> 00:49:07,490
found it will create this property's

1163
00:49:05,150 --> 00:49:09,230
structure and dirty can find<font color="#E5E5E5"> it</font>

1164
00:49:07,490 --> 00:49:11,450
<font color="#CCCCCC">information is related to this specific</font>

1165
00:49:09,230 --> 00:49:13,369
context so as<font color="#E5E5E5"> you can see for instance</font>

1166
00:49:11,450 --> 00:49:15,109
in<font color="#CCCCCC"> these contexts</font><font color="#E5E5E5"> has been found at a</font>

1167
00:49:13,369 --> 00:49:18,559
Vanessa<font color="#CCCCCC"> search service running on port</font>

1168
00:49:15,109 --> 00:49:20,839
22 on<font color="#E5E5E5"> TCP the flow that has been taken</font>

1169
00:49:18,559 --> 00:49:24,680
to determinant is the ipv4<font color="#E5E5E5"> ring to end</font>

1170
00:49:20,839 --> 00:49:26,660
<font color="#E5E5E5">map the target was my IP and I'm using</font>

1171
00:49:24,680 --> 00:49:29,390
the IP in this context so whichever

1172
00:49:26,660 --> 00:49:31,368
tools can consume ipv4 address they will

1173
00:49:29,390 --> 00:49:40,609
be automatically fed using this

1174
00:49:31,369 --> 00:49:43,220
<font color="#CCCCCC">information moving on different</font>

1175
00:49:40,609 --> 00:49:45,650
abilities are also been processed and

1176
00:49:43,220 --> 00:49:47,598
displayed when asked to so in this in

1177
00:49:45,650 --> 00:49:50,000
this example I've just run next on like

1178
00:49:47,599 --> 00:49:52,460
one computer and surprisingly<font color="#CCCCCC"> enough it</font>

1179
00:49:50,000 --> 00:49:54,920
found some stuff on it so again as I

1180
00:49:52,460 --> 00:49:58,430
said only the context that's bring

1181
00:49:54,920 --> 00:50:00,890
actually processed and survived using

1182
00:49:58,430 --> 00:50:02,779
the different filters are being used so

1183
00:50:00,890 --> 00:50:05,180
I'm<font color="#E5E5E5"> getting the sign here so I'll be</font>

1184
00:50:02,780 --> 00:50:07,940
very quick about it so this is<font color="#CCCCCC"> the</font>

1185
00:50:05,180 --> 00:50:10,250
<font color="#E5E5E5">properties of only the HTTP because it's</font>

1186
00:50:07,940 --> 00:50:12,319
only<font color="#E5E5E5"> makes sense for nikto and this is</font>

1187
00:50:10,250 --> 00:50:15,140
the vulnerability table output which

1188
00:50:12,319 --> 00:50:17,599
basically parsing all the nickels output

1189
00:50:15,140 --> 00:50:21,879
into the table<font color="#CCCCCC"> again this is all part of</font>

1190
00:50:17,599 --> 00:50:24,890
the metadata and it's all been possibly

1191
00:50:21,880 --> 00:50:27,109
extractable and manageable scriptable by

1192
00:50:24,890 --> 00:50:28,879
you using hacker shell you<font color="#E5E5E5"> can go to the</font>

1193
00:50:27,109 --> 00:50:30,319
website both hacker shell and pipe the

1194
00:50:28,880 --> 00:50:34,540
neck to<font color="#E5E5E5"> learn more about these languages</font>

1195
00:50:30,319 --> 00:50:34,540
and see more examples thank you

