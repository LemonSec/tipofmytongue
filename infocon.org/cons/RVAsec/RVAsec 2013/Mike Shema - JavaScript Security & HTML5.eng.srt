1
00:00:19,800 --> 00:00:27,880
so welcome to<font color="#CCCCCC"> a fine afternoon here at</font>

2
00:00:23,650 --> 00:00:30,189
RV a sec in May 31st 2013 if this were

3
00:00:27,880 --> 00:00:33,489
nineteen eighty-four<font color="#E5E5E5"> George Orwell might</font>

4
00:00:30,189 --> 00:00:35,430
be telling us that war is peace freedom

5
00:00:33,489 --> 00:00:40,930
is slavery ignorance is strength

6
00:00:35,430 --> 00:00:42,640
javascript is harmless if we're 1996 we

7
00:00:40,930 --> 00:00:44,739
fight you worried about<font color="#CCCCCC"> Java</font>

8
00:00:42,640 --> 00:00:46,870
vulnerabilities and browsers worrying

9
00:00:44,739 --> 00:00:49,989
about how to secure Java inside them or

10
00:00:46,870 --> 00:00:52,449
that could also be 2013 I suppose might

11
00:00:49,989 --> 00:00:54,849
have little things change if the thralls

12
00:00:52,450 --> 00:00:59,079
<font color="#CCCCCC">in 1996 we could possibly be reading</font>

13
00:00:54,850 --> 00:01:01,510
<font color="#CCCCCC">frac 49 or looking</font><font color="#E5E5E5"> at us about some</font><font color="#CCCCCC"> of</font>

14
00:00:59,079 --> 00:01:03,309
the insecure org mailing list about

15
00:01:01,510 --> 00:01:04,720
things like cross-site scripting and

16
00:01:03,309 --> 00:01:06,910
sequel injection and command injection

17
00:01:04,720 --> 00:01:08,500
before they recalled cross-site

18
00:01:06,910 --> 00:01:10,780
scripting sequel injection command

19
00:01:08,500 --> 00:01:13,690
injection so one of the things<font color="#CCCCCC"> I want to</font>

20
00:01:10,780 --> 00:01:15,700
<font color="#E5E5E5">try and do here is have a little bit of</font>

21
00:01:13,690 --> 00:01:17,560
sense of history but as well try and

22
00:01:15,700 --> 00:01:19,240
figure out what concepts we want to make

23
00:01:17,560 --> 00:01:21,460
sure that<font color="#CCCCCC"> we're bringing in and building</font>

24
00:01:19,240 --> 00:01:23,919
from a design perspective to improve

25
00:01:21,460 --> 00:01:25,960
security versus the same problems that

26
00:01:23,920 --> 00:01:27,610
we keep our implementing over and over

27
00:01:25,960 --> 00:01:30,100
and over<font color="#E5E5E5"> again because we're</font>

28
00:01:27,610 --> 00:01:32,380
implementing the same<font color="#CCCCCC"> int based on the</font>

29
00:01:30,100 --> 00:01:35,439
same insecure foundations and one of

30
00:01:32,380 --> 00:01:37,149
those foundations is script and so

31
00:01:35,439 --> 00:01:39,220
that's what<font color="#E5E5E5"> I want to focus on today and</font>

32
00:01:37,150 --> 00:01:41,950
this is a little<font color="#E5E5E5"> bit less</font><font color="#CCCCCC"> about</font>

33
00:01:39,220 --> 00:01:44,229
<font color="#E5E5E5">JavaScript itself and more about how to</font>

34
00:01:41,950 --> 00:01:46,780
corral it and make it safe inside the

35
00:01:44,229 --> 00:01:48,340
browser so there's a lot of aspects and

36
00:01:46,780 --> 00:01:50,140
a lot of<font color="#E5E5E5"> mistakes you can make with in</font>

37
00:01:48,340 --> 00:01:52,420
JavaScript but many of<font color="#CCCCCC"> them actually</font>

38
00:01:50,140 --> 00:01:55,030
fall more on the<font color="#CCCCCC"> performance in ization</font>

39
00:01:52,420 --> 00:01:56,979
level as opposed to a security<font color="#E5E5E5"> level so</font>

40
00:01:55,030 --> 00:02:00,009
let's talk about<font color="#E5E5E5"> html5 and kind of have</font>

41
00:01:56,979 --> 00:02:01,360
an idea how html5 can give us more

42
00:02:00,009 --> 00:02:03,759
confidence that we're building web

43
00:02:01,360 --> 00:02:06,189
applications where we have to<font color="#CCCCCC"> worry</font><font color="#E5E5E5"> less</font>

44
00:02:03,759 --> 00:02:08,889
and be less concerned about what is

45
00:02:06,189 --> 00:02:11,739
going<font color="#E5E5E5"> on inside that</font><font color="#CCCCCC"> JavaScript bundle</font>

46
00:02:08,889 --> 00:02:14,619
or that<font color="#E5E5E5"> JavaScript code and if we're</font>

47
00:02:11,739 --> 00:02:16,900
browser vendors of<font color="#E5E5E5"> course we</font><font color="#CCCCCC"> still be</font>

48
00:02:14,620 --> 00:02:20,560
really worried about<font color="#E5E5E5"> JavaScript because</font>

49
00:02:16,900 --> 00:02:22,900
if we look at a the<font color="#CCCCCC"> JSF</font><font color="#E5E5E5"> on fuzz created</font>

50
00:02:20,560 --> 00:02:25,959
back in two thousand late two thousand

51
00:02:22,900 --> 00:02:30,010
seven or down six by a fellow named

52
00:02:25,959 --> 00:02:33,460
Jesse<font color="#CCCCCC"> ruderman in those seven years it's</font>

53
00:02:30,010 --> 00:02:35,859
basically a<font color="#E5E5E5"> JavaScript program</font>

54
00:02:33,460 --> 00:02:38,740
that internally<font color="#CCCCCC"> fuzz's JavaScript the</font>

55
00:02:35,860 --> 00:02:41,560
spider monkey for Mozilla and in this

56
00:02:38,740 --> 00:02:43,810
time it's actually<font color="#CCCCCC"> gotten</font><font color="#E5E5E5"> almost 2,000</font>

57
00:02:41,560 --> 00:02:45,790
bugs created and not necessarily all of

58
00:02:43,810 --> 00:02:48,970
them are security related but my point

59
00:02:45,790 --> 00:02:52,540
here<font color="#CCCCCC"> is that javascript is a really way</font>

60
00:02:48,970 --> 00:02:54,280
a very frail tough framework to keep

61
00:02:52,540 --> 00:02:57,730
secure and if we<font color="#E5E5E5"> think about pwned to</font>

62
00:02:54,280 --> 00:03:01,540
own contests and a<font color="#E5E5E5"> recent</font><font color="#CCCCCC"> IE exploit</font>

63
00:02:57,730 --> 00:03:03,730
from<font color="#CCCCCC"> at end of 2012 it was these are</font>

64
00:03:01,540 --> 00:03:05,950
these exploits are hard to<font color="#CCCCCC"> find but</font><font color="#E5E5E5"> in</font>

65
00:03:03,730 --> 00:03:08,859
order to exploit them it only took in

66
00:03:05,950 --> 00:03:10,660
that case about<font color="#E5E5E5"> 12 lines of HTML so we</font>

67
00:03:08,860 --> 00:03:12,910
can<font color="#E5E5E5"> move beyond buffer overflows and</font>

68
00:03:10,660 --> 00:03:15,280
heap and smashing the stack for fun and

69
00:03:12,910 --> 00:03:16,690
profit and do what I<font color="#E5E5E5"> prefer is like</font>

70
00:03:15,280 --> 00:03:20,170
lazier things and<font color="#CCCCCC"> just write some</font>

71
00:03:16,690 --> 00:03:21,790
<font color="#E5E5E5">JavaScript and a lot easier so as I</font>

72
00:03:20,170 --> 00:03:23,339
mentioned there<font color="#CCCCCC"> are a lot of traps that</font>

73
00:03:21,790 --> 00:03:25,600
you can fall into dealing with

74
00:03:23,340 --> 00:03:28,030
<font color="#E5E5E5">JavaScript some of them</font><font color="#CCCCCC"> are a lot of</font>

75
00:03:25,600 --> 00:03:30,519
<font color="#E5E5E5">them are around the use of whether</font>

76
00:03:28,030 --> 00:03:31,930
you're declaring variables are you just

77
00:03:30,520 --> 00:03:34,060
declaring them naked or did you clear

78
00:03:31,930 --> 00:03:36,100
them with VAR what about<font color="#CCCCCC"> having a block</font>

79
00:03:34,060 --> 00:03:37,960
or what's the<font color="#E5E5E5"> scope of them and we can</font>

80
00:03:36,100 --> 00:03:41,470
<font color="#E5E5E5">actually kind of think of this as as the</font>

81
00:03:37,960 --> 00:03:42,970
same concept of PHP PHP has a lot of old

82
00:03:41,470 --> 00:03:45,520
vulnerabilities related to super

83
00:03:42,970 --> 00:03:48,070
Global's or uninitialized variables we

84
00:03:45,520 --> 00:03:50,860
these same kinds of concepts to

85
00:03:48,070 --> 00:03:52,989
<font color="#CCCCCC">javascript even in the sense of of</font>

86
00:03:50,860 --> 00:03:54,820
interesting quirks in the<font color="#E5E5E5"> language that</font>

87
00:03:52,990 --> 00:03:57,910
new developers might get tripped up on

88
00:03:54,820 --> 00:04:00,850
things like the type of null is actually

89
00:03:57,910 --> 00:04:03,460
an object the type of an undefined is an

90
00:04:00,850 --> 00:04:05,890
undefined a null can be equal to

91
00:04:03,460 --> 00:04:08,200
undefined but<font color="#E5E5E5"> it's not strictly equal to</font>

92
00:04:05,890 --> 00:04:09,579
undefined I just highlight this is one

93
00:04:08,200 --> 00:04:11,679
of<font color="#E5E5E5"> the things that can be a little bit</font>

94
00:04:09,580 --> 00:04:15,280
<font color="#E5E5E5">of a confusion or our source of error in</font>

95
00:04:11,680 --> 00:04:17,739
some in certain<font color="#CCCCCC"> types of programming so</font>

96
00:04:15,280 --> 00:04:19,390
on<font color="#E5E5E5"> that one hand developers can find</font>

97
00:04:17,738 --> 00:04:22,450
this language confusing on the other

98
00:04:19,390 --> 00:04:24,640
hand hackers can find this this language

99
00:04:22,450 --> 00:04:26,289
almost self off you skating and pretty

100
00:04:24,640 --> 00:04:28,719
awesome from a sense of a hacking

101
00:04:26,290 --> 00:04:31,150
perspective if you can see the bottom<font color="#E5E5E5"> of</font>

102
00:04:28,720 --> 00:04:33,430
the slide from<font color="#CCCCCC"> the back is basically an</font>

103
00:04:31,150 --> 00:04:35,770
alert pop up but it's the word alert

104
00:04:33,430 --> 00:04:38,560
that's been created by taking advantage

105
00:04:35,770 --> 00:04:40,690
<font color="#CCCCCC">of the negation of an object that's been</font>

106
00:04:38,560 --> 00:04:42,640
cast to a string<font color="#CCCCCC"> it's been cast to</font>

107
00:04:40,690 --> 00:04:44,290
another object that's doing an index

108
00:04:42,640 --> 00:04:46,570
<font color="#CCCCCC">onto a single</font><font color="#E5E5E5"> character that's using</font>

109
00:04:44,290 --> 00:04:46,960
string concatenation and all this is<font color="#CCCCCC"> as</font>

110
00:04:46,570 --> 00:04:49,690
pure

111
00:04:46,960 --> 00:04:51,460
javascript perfectly valid JavaScript so

112
00:04:49,690 --> 00:04:52,960
if you're<font color="#E5E5E5"> relying on regular expressions</font>

113
00:04:51,460 --> 00:04:54,849
and pattern matching to block those

114
00:04:52,960 --> 00:04:57,489
alert pop-ups that's probably already

115
00:04:54,850 --> 00:04:59,530
mistake number one because javascript is

116
00:04:57,490 --> 00:05:01,300
so weird or so flexible for that

117
00:04:59,530 --> 00:05:04,630
perspective that there's a lot of ways

118
00:05:01,300 --> 00:05:06,880
to<font color="#CCCCCC"> bypass those types of security I do</font>

119
00:05:04,630 --> 00:05:08,380
want<font color="#E5E5E5"> to take a tangent since we're</font>

120
00:05:06,880 --> 00:05:10,780
<font color="#CCCCCC">talking about</font><font color="#E5E5E5"> JavaScript and how to use</font>

121
00:05:08,380 --> 00:05:12,940
it it gets used a lot to build these

122
00:05:10,780 --> 00:05:15,359
html5 apps to build these really awesome

123
00:05:12,940 --> 00:05:18,340
apps that are basically like desktops

124
00:05:15,360 --> 00:05:20,490
look up the<font color="#CCCCCC"> Mozilla's banana bread demo</font>

125
00:05:18,340 --> 00:05:22,719
it's basically a first-person shooter

126
00:05:20,490 --> 00:05:25,120
purely within the<font color="#E5E5E5"> web browser it's</font>

127
00:05:22,720 --> 00:05:27,160
really awesome but we also want to be

128
00:05:25,120 --> 00:05:29,410
careful<font color="#E5E5E5"> about using crypto or using</font>

129
00:05:27,160 --> 00:05:31,479
javascript properly for example if we

130
00:05:29,410 --> 00:05:33,120
<font color="#CCCCCC">want to try and use channel security we</font>

131
00:05:31,479 --> 00:05:36,008
want to use encrypted communications

132
00:05:33,120 --> 00:05:38,139
javascript is the wrong place for<font color="#E5E5E5"> for</font>

133
00:05:36,009 --> 00:05:40,810
many many reasons first of all that's

134
00:05:38,139 --> 00:05:42,699
already been well solve to a degree if

135
00:05:40,810 --> 00:05:45,310
we want to call it solved using SSL and

136
00:05:42,699 --> 00:05:48,310
TLS better yet we should be relying on

137
00:05:45,310 --> 00:05:50,710
something<font color="#E5E5E5"> like a chat hyper HS TS and</font>

138
00:05:48,310 --> 00:05:52,240
DNS SEC<font color="#E5E5E5"> because those are much more</font>

139
00:05:50,710 --> 00:05:55,989
powerful setting up the<font color="#E5E5E5"> end-to-end</font>

140
00:05:52,240 --> 00:05:59,169
channel security identity and what have

141
00:05:55,990 --> 00:06:00,789
you some other caches there could be

142
00:05:59,169 --> 00:06:03,190
around crypto is that a lot<font color="#CCCCCC"> of crypto</font>

143
00:06:00,789 --> 00:06:05,080
relies on good cryptographically strong

144
00:06:03,190 --> 00:06:07,150
there's your hint right there random

145
00:06:05,080 --> 00:06:08,919
number generators of which is not<font color="#E5E5E5"> really</font>

146
00:06:07,150 --> 00:06:11,380
clear that the browser is a good way to

147
00:06:08,919 --> 00:06:13,479
generate these or is<font color="#CCCCCC"> a good way to have</font>

148
00:06:11,380 --> 00:06:15,520
them yet<font color="#E5E5E5"> I will point out the the</font>

149
00:06:13,479 --> 00:06:18,639
Stanford JavaScript crypto library a

150
00:06:15,520 --> 00:06:22,479
very excellent effort that has built it

151
00:06:18,639 --> 00:06:25,060
only<font color="#E5E5E5"> a random generator that has very</font>

152
00:06:22,479 --> 00:06:26,949
<font color="#E5E5E5">good cryptographic properties for it but</font>

153
00:06:25,060 --> 00:06:31,870
as well as<font color="#E5E5E5"> this implemented on things</font>

154
00:06:26,949 --> 00:06:33,460
like AES is implemented some public key

155
00:06:31,870 --> 00:06:35,139
private key type of<font color="#CCCCCC"> segment of</font>

156
00:06:33,460 --> 00:06:36,849
encryption so you can actually<font color="#E5E5E5"> have</font>

157
00:06:35,139 --> 00:06:39,130
encryption primitives within the browser

158
00:06:36,849 --> 00:06:40,690
itself which we do have to be a little

159
00:06:39,130 --> 00:06:43,000
<font color="#E5E5E5">bit careful</font><font color="#CCCCCC"> about how</font><font color="#E5E5E5"> much we want to</font>

160
00:06:40,690 --> 00:06:44,620
trust that browser because again it's a

161
00:06:43,000 --> 00:06:46,300
prototype style language you<font color="#E5E5E5"> can</font>

162
00:06:44,620 --> 00:06:48,219
actually override a lot of things<font color="#E5E5E5"> you</font>

163
00:06:46,300 --> 00:06:51,250
<font color="#E5E5E5">can actually you don't</font><font color="#CCCCCC"> have a pure</font>

164
00:06:48,219 --> 00:06:53,169
trusted environment but<font color="#E5E5E5"> if we do have at</font>

165
00:06:51,250 --> 00:06:55,750
least a degree of<font color="#E5E5E5"> trust or we want to</font>

166
00:06:53,169 --> 00:06:57,339
<font color="#E5E5E5">apply some security engineering start to</font>

167
00:06:55,750 --> 00:06:59,400
do is try to encourage developers to

168
00:06:57,339 --> 00:07:02,940
minimize this lifetime of<font color="#CCCCCC"> the</font>

169
00:06:59,400 --> 00:07:04,590
<font color="#CCCCCC">x password for example we all know where</font>

170
00:07:02,940 --> 00:07:07,110
we<font color="#E5E5E5"> all should know that</font><font color="#CCCCCC"> that password</font>

171
00:07:04,590 --> 00:07:08,580
should be salted and hashed ideally we

172
00:07:07,110 --> 00:07:13,460
would be following something like the

173
00:07:08,580 --> 00:07:16,020
pbk df2 algorithm to also make this a

174
00:07:13,460 --> 00:07:17,430
hashing algorithm that requires a big

175
00:07:16,020 --> 00:07:19,109
work factor that requires a lot of

176
00:07:17,430 --> 00:07:21,240
effort on the part of the attacker to

177
00:07:19,110 --> 00:07:23,190
get to<font color="#CCCCCC"> and if we start to hash this in</font>

178
00:07:21,240 --> 00:07:25,259
the browser and then just send<font color="#CCCCCC"> that</font>

179
00:07:23,190 --> 00:07:28,139
final hashed version and store that on

180
00:07:25,259 --> 00:07:30,600
our database then when the servers

181
00:07:28,139 --> 00:07:32,340
finally exposed by sequel injection or

182
00:07:30,600 --> 00:07:34,440
what have you there's<font color="#E5E5E5"> less of a chance</font>

183
00:07:32,340 --> 00:07:37,198
of these plain text or these poorly

184
00:07:34,440 --> 00:07:38,850
protected passwords being divulged we

185
00:07:37,199 --> 00:07:41,280
can also do things like just a client

186
00:07:38,850 --> 00:07:43,500
child a<font color="#E5E5E5"> challenge-response between the</font>

187
00:07:41,280 --> 00:07:45,539
browser and the server and again this is

188
00:07:43,500 --> 00:07:47,100
just shifting<font color="#E5E5E5"> where we're handling</font>

189
00:07:45,539 --> 00:07:49,469
security so it's not necessarily better

190
00:07:47,100 --> 00:07:52,229
or worse in any way but<font color="#E5E5E5"> i would</font>

191
00:07:49,470 --> 00:07:54,240
encourage it in a sense of the lifetime

192
00:07:52,229 --> 00:07:56,550
of the password as plain text lives as

193
00:07:54,240 --> 00:07:58,050
short as possible within<font color="#E5E5E5"> the browser and</font>

194
00:07:56,550 --> 00:08:01,320
then once it goes on to the wire your

195
00:07:58,050 --> 00:08:04,289
thing with hashed version so let's move

196
00:08:01,320 --> 00:08:06,780
from the past coming out of the the<font color="#E5E5E5"> net</font>

197
00:08:04,289 --> 00:08:09,750
<font color="#E5E5E5">escapes and shock is 1996 and we have</font>

198
00:08:06,780 --> 00:08:14,638
this beautiful doctype HTML that's

199
00:08:09,750 --> 00:08:16,169
<font color="#E5E5E5">basically all you need to have html5 so</font>

200
00:08:14,639 --> 00:08:17,789
along the way there's actually some

201
00:08:16,169 --> 00:08:19,169
really good things that<font color="#E5E5E5"> happen on the</font>

202
00:08:17,789 --> 00:08:21,360
one<font color="#E5E5E5"> hand we have a lot of stuff that's</font>

203
00:08:19,169 --> 00:08:23,240
<font color="#CCCCCC">kind of out of our domain unless worker</font>

204
00:08:21,360 --> 00:08:26,550
browser developers or browser vendors

205
00:08:23,240 --> 00:08:29,610
process separation<font color="#E5E5E5"> sandboxing some very</font>

206
00:08:26,550 --> 00:08:32,729
weak but me and meager XSS protections

207
00:08:29,610 --> 00:08:35,669
but<font color="#E5E5E5"> probably the best aspect</font><font color="#CCCCCC"> of the race</font>

208
00:08:32,729 --> 00:08:37,169
for all these browsers to adopt html5 is

209
00:08:35,669 --> 00:08:39,240
that they've had iteration after

210
00:08:37,169 --> 00:08:41,669
iteration after iteration and they've

211
00:08:39,240 --> 00:08:44,099
all done may try to make auto updating

212
00:08:41,669 --> 00:08:45,569
as easy as possible so that the users

213
00:08:44,099 --> 00:08:47,580
have the latest<font color="#E5E5E5"> and greatest and it's</font>

214
00:08:45,570 --> 00:08:49,560
not so much<font color="#CCCCCC"> of a security concern even</font>

215
00:08:47,580 --> 00:08:52,140
<font color="#CCCCCC">though it's it's a help with security</font>

216
00:08:49,560 --> 00:08:54,569
it's more<font color="#E5E5E5"> a push so now that oh hey we</font>

217
00:08:52,140 --> 00:08:56,010
support<font color="#E5E5E5"> WebSockets we support WebGL or</font>

218
00:08:54,570 --> 00:08:57,420
we actually have to take<font color="#CCCCCC"> about GL out</font>

219
00:08:56,010 --> 00:09:00,569
and I'll talk<font color="#E5E5E5"> about that a second put</font>

220
00:08:57,420 --> 00:09:02,520
WebGL back in or we have a web storage

221
00:09:00,570 --> 00:09:03,510
API and<font color="#E5E5E5"> all these different things so</font>

222
00:09:02,520 --> 00:09:05,370
this has actually been a good<font color="#E5E5E5"> thing</font>

223
00:09:03,510 --> 00:09:08,400
<font color="#CCCCCC">about browser security and that's really</font>

224
00:09:05,370 --> 00:09:10,279
<font color="#CCCCCC">that's independent of</font><font color="#E5E5E5"> html5 technology</font>

225
00:09:08,400 --> 00:09:13,249
it's more just a pattern

226
00:09:10,279 --> 00:09:17,930
a byproduct of the race to have new and

227
00:09:13,249 --> 00:09:19,310
fit and new feature full browsers but

228
00:09:17,930 --> 00:09:21,290
<font color="#E5E5E5">we're going to talk about security of</font>

229
00:09:19,310 --> 00:09:23,748
course we have to<font color="#CCCCCC"> talk about cross-site</font>

230
00:09:21,290 --> 00:09:26,509
scripting and this is one<font color="#CCCCCC"> of the things</font>

231
00:09:23,749 --> 00:09:28,850
<font color="#E5E5E5">that comes up when people</font><font color="#CCCCCC"> say ah html5</font>

232
00:09:26,509 --> 00:09:31,910
<font color="#CCCCCC">is worse html5 will make us insecure</font>

233
00:09:28,850 --> 00:09:34,189
html5 web apps are terrible or<font color="#CCCCCC"> they're</font>

234
00:09:31,910 --> 00:09:36,410
they bring a whole new<font color="#E5E5E5"> world of danger</font>

235
00:09:34,189 --> 00:09:38,089
and I'll try to temper that a little bit

236
00:09:36,410 --> 00:09:40,490
and<font color="#E5E5E5"> bring some more sanity to that</font>

237
00:09:38,089 --> 00:09:43,550
discussion really<font color="#E5E5E5"> I think when people</font>

238
00:09:40,490 --> 00:09:46,129
said XSS is worse all they really meant

239
00:09:43,550 --> 00:09:48,769
was this new<font color="#CCCCCC"> autofocus attribute it</font>

240
00:09:46,129 --> 00:09:50,269
meant that now if you were able<font color="#E5E5E5"> to</font>

241
00:09:48,769 --> 00:09:52,249
inject cross-site scripting into an

242
00:09:50,269 --> 00:09:54,740
input field rather than having to rely

243
00:09:52,249 --> 00:09:56,149
on like an on mouseover or non click so

244
00:09:54,740 --> 00:09:59,089
your victim had to come and<font color="#E5E5E5"> move the</font>

245
00:09:56,149 --> 00:10:00,680
mouse over it you have a focus that can

246
00:09:59,089 --> 00:10:04,220
trigger the on focus box and

247
00:10:00,680 --> 00:10:05,899
automatically it's going to execute<font color="#CCCCCC"> okay</font>

248
00:10:04,220 --> 00:10:08,120
that's kind of cool but it really

249
00:10:05,899 --> 00:10:10,430
fundamentally boils down to this website

250
00:10:08,120 --> 00:10:12,699
has an HTML injection vulnerability into

251
00:10:10,430 --> 00:10:17,420
it really what the point is is that

252
00:10:12,699 --> 00:10:19,309
html5 has new elements new attributes so

253
00:10:17,420 --> 00:10:20,990
if you're using those regex is you had

254
00:10:19,309 --> 00:10:22,819
be really careful to keep up with<font color="#E5E5E5"> the</font>

255
00:10:20,990 --> 00:10:24,529
canvas element the audio element the

256
00:10:22,819 --> 00:10:26,389
video element these types of things and

257
00:10:24,529 --> 00:10:28,430
if you were relying on blacklisting

258
00:10:26,389 --> 00:10:30,079
anyway you're probably failing to

259
00:10:28,430 --> 00:10:32,899
prevent one of these payloads these are

260
00:10:30,079 --> 00:10:35,870
just a few my favorites that are really

261
00:10:32,899 --> 00:10:38,000
good against defeating regular

262
00:10:35,870 --> 00:10:40,850
expressions and pattern matching because

263
00:10:38,000 --> 00:10:44,389
<font color="#CCCCCC">hTML is a nice parsing language and reg</font>

264
00:10:40,850 --> 00:10:46,970
<font color="#E5E5E5">X's are poor at parsing what other</font>

265
00:10:44,389 --> 00:10:50,059
things that html5 does is have client

266
00:10:46,970 --> 00:10:53,449
side validation for this point but<font color="#E5E5E5"> it</font>

267
00:10:50,059 --> 00:10:56,149
has<font color="#CCCCCC"> client-side input types and these</font>

268
00:10:53,449 --> 00:10:58,490
<font color="#CCCCCC">are so that on small devices or web app</font>

269
00:10:56,149 --> 00:10:59,929
or on laptops even you can have

270
00:10:58,490 --> 00:11:01,459
different input types so if you know

271
00:10:59,929 --> 00:11:03,290
<font color="#E5E5E5">it's supposed</font><font color="#CCCCCC"> to be a date you can</font><font color="#E5E5E5"> set</font>

272
00:11:01,459 --> 00:11:06,109
up<font color="#CCCCCC"> the date picker you know this was to</font>

273
00:11:03,290 --> 00:11:08,389
be<font color="#E5E5E5"> a password or what's up what's new a</font>

274
00:11:06,110 --> 00:11:10,040
number you'll just<font color="#E5E5E5"> have</font><font color="#CCCCCC"> a keyboard the</font>

275
00:11:08,389 --> 00:11:13,009
show's<font color="#CCCCCC"> number is rather than the entire</font>

276
00:11:10,040 --> 00:11:15,529
<font color="#E5E5E5">keyboard and my point here is that hey</font>

277
00:11:13,009 --> 00:11:17,360
this is something new with<font color="#E5E5E5"> html5 but the</font>

278
00:11:15,529 --> 00:11:19,279
developer that<font color="#E5E5E5"> relies on client side</font>

279
00:11:17,360 --> 00:11:21,470
validation<font color="#E5E5E5"> as a security mechanism is</font>

280
00:11:19,279 --> 00:11:22,439
the same developer<font color="#CCCCCC"> that existed back in</font>

281
00:11:21,470 --> 00:11:25,170
nineteen ninety

282
00:11:22,440 --> 00:11:26,880
that didn't realize that<font color="#CCCCCC"> the client</font><font color="#E5E5E5"> is</font>

283
00:11:25,170 --> 00:11:28,620
not<font color="#E5E5E5"> to be trusted and this is just one</font>

284
00:11:26,880 --> 00:11:30,270
<font color="#CCCCCC">of those fundamental security tents that</font>

285
00:11:28,620 --> 00:11:32,790
we repeat over and over and over again

286
00:11:30,270 --> 00:11:34,560
but mistakes continue to happen and

287
00:11:32,790 --> 00:11:36,660
that's where i think<font color="#CCCCCC"> is i'll highlight</font>

288
00:11:34,560 --> 00:11:39,479
in a little bit we finally with html5

289
00:11:36,660 --> 00:11:41,339
<font color="#CCCCCC">have some ways to design some more</font>

290
00:11:39,480 --> 00:11:43,410
security<font color="#E5E5E5"> into that web application and</font>

291
00:11:41,340 --> 00:11:45,840
that way those implementation errors

292
00:11:43,410 --> 00:11:48,360
become a little less effective or less

293
00:11:45,840 --> 00:11:50,430
bothersome so I was talking about

294
00:11:48,360 --> 00:11:54,260
prostate scripting here's<font color="#E5E5E5"> the one</font>

295
00:11:50,430 --> 00:11:57,089
talking<font color="#CCCCCC"> about csrf so a get base CSRF</font>

296
00:11:54,260 --> 00:11:59,460
which is<font color="#CCCCCC"> CSRF which about for example</font>

297
00:11:57,090 --> 00:12:02,520
has existed since the HTML 1 point 0

298
00:11:59,460 --> 00:12:04,530
spec it wasn't new in 2006 or 2005 it

299
00:12:02,520 --> 00:12:06,390
was just given a name of years ago<font color="#E5E5E5"> where</font>

300
00:12:04,530 --> 00:12:07,770
<font color="#CCCCCC">several years ago but originally it</font>

301
00:12:06,390 --> 00:12:10,199
could have been done with a with an

302
00:12:07,770 --> 00:12:12,420
image tag now<font color="#CCCCCC"> mozilla for full is</font>

303
00:12:10,200 --> 00:12:14,370
showing a prefetch attribute that you

304
00:12:12,420 --> 00:12:16,349
can add to a link and what<font color="#E5E5E5"> that will do</font>

305
00:12:14,370 --> 00:12:19,140
is automatically make that request just

306
00:12:16,350 --> 00:12:21,210
as if for example it we're an image and

307
00:12:19,140 --> 00:12:23,160
you can<font color="#E5E5E5"> use it for csr app now this</font>

308
00:12:21,210 --> 00:12:25,680
<font color="#E5E5E5">isn't a this isn't a bad thing it's in</font>

309
00:12:23,160 --> 00:12:28,439
terms of<font color="#E5E5E5"> html5 it's just a new feature</font>

310
00:12:25,680 --> 00:12:30,329
this exploiting an old vulnerability

311
00:12:28,440 --> 00:12:33,150
that already existed one thing that's

312
00:12:30,330 --> 00:12:34,560
improving is that long this case sadly

313
00:12:33,150 --> 00:12:38,010
we don't have the origin yet or header

314
00:12:34,560 --> 00:12:39,750
yet which is<font color="#CCCCCC"> a good thing for html5 so</font>

315
00:12:38,010 --> 00:12:42,480
the more for shattering for you we have

316
00:12:39,750 --> 00:12:45,030
<font color="#CCCCCC">a refer but</font><font color="#E5E5E5"> mozilla did at least add</font>

317
00:12:42,480 --> 00:12:46,320
this X dash Moz prefetch header so at

318
00:12:45,030 --> 00:12:48,329
least we have a header that<font color="#CCCCCC"> can</font>

319
00:12:46,320 --> 00:12:50,400
distinguish for us that this is a

320
00:12:48,330 --> 00:12:52,230
prefetch request and technically that

321
00:12:50,400 --> 00:12:53,850
request is just made so the application

322
00:12:52,230 --> 00:12:55,500
could make decisions based on what it

323
00:12:53,850 --> 00:12:57,450
wants<font color="#E5E5E5"> to serve rather than a real</font>

324
00:12:55,500 --> 00:12:59,820
security decision but we're starting to

325
00:12:57,450 --> 00:13:02,250
look at rely on headers more in seeing

326
00:12:59,820 --> 00:13:03,540
headers as a more helpful security

327
00:13:02,250 --> 00:13:06,210
mechanism because another<font color="#CCCCCC"> thing the</font>

328
00:13:03,540 --> 00:13:09,240
html5<font color="#E5E5E5"> does is make it</font><font color="#CCCCCC"> a little harder in</font>

329
00:13:06,210 --> 00:13:14,520
many scenarios to<font color="#E5E5E5"> build custom or</font>

330
00:13:09,240 --> 00:13:18,420
overwrite i should say default headers

331
00:13:14,520 --> 00:13:21,490
within requests so let's talk about

332
00:13:18,420 --> 00:13:24,199
<font color="#E5E5E5">let's talk about something alpha</font>

333
00:13:21,490 --> 00:13:27,980
so same origin policy this is the the

334
00:13:24,200 --> 00:13:29,810
bedrock<font color="#E5E5E5"> of web security in the sense of</font>

335
00:13:27,980 --> 00:13:32,300
making<font color="#CCCCCC"> sure that different domains</font>

336
00:13:29,810 --> 00:13:34,520
different origins don't<font color="#CCCCCC"> commingle and</font>

337
00:13:32,300 --> 00:13:37,189
interfere with each other now the iframe

338
00:13:34,520 --> 00:13:40,430
has always been an excellent client-side

339
00:13:37,190 --> 00:13:44,110
mechanism for sandboxing content however

340
00:13:40,430 --> 00:13:46,939
<font color="#CCCCCC">um what developers realize is that</font>

341
00:13:44,110 --> 00:13:48,830
iframe was being used<font color="#E5E5E5"> as a crutch and it</font>

342
00:13:46,940 --> 00:13:50,990
also made certain things a little bit

343
00:13:48,830 --> 00:13:52,910
harder to<font color="#E5E5E5"> do so developers at that</font>

344
00:13:50,990 --> 00:13:54,560
sometimes then avoid using the iframe so

345
00:13:52,910 --> 00:13:56,810
what they decided to do was add some new

346
00:13:54,560 --> 00:13:59,930
attributes like a seamless in a<font color="#E5E5E5"> sandbox</font>

347
00:13:56,810 --> 00:14:01,760
and what this actually is with I friend

348
00:13:59,930 --> 00:14:04,160
Stan boxes is sort of like a customs

349
00:14:01,760 --> 00:14:07,280
inspection it's<font color="#CCCCCC"> looking to see what's in</font>

350
00:14:04,160 --> 00:14:10,400
this HTML and do I want<font color="#E5E5E5"> to execute it so</font>

351
00:14:07,280 --> 00:14:13,010
we<font color="#E5E5E5"> can have a normal JavaScript pop up</font>

352
00:14:10,400 --> 00:14:15,350
if we're loading our infected HTML in an

353
00:14:13,010 --> 00:14:18,950
iframe or we can<font color="#CCCCCC"> ply the sandbox</font>

354
00:14:15,350 --> 00:14:21,770
attribute and javascript is disabled so

355
00:14:18,950 --> 00:14:22,940
we've disabled the exploit now we have

356
00:14:21,770 --> 00:14:24,470
and<font color="#E5E5E5"> we haven't disabled the</font>

357
00:14:22,940 --> 00:14:26,960
vulnerability that was present<font color="#CCCCCC"> in here</font>

358
00:14:24,470 --> 00:14:28,760
<font color="#CCCCCC">before so again this is the idea that</font>

359
00:14:26,960 --> 00:14:30,350
we're actually designing some security

360
00:14:28,760 --> 00:14:33,410
and we have now a security layer on top

361
00:14:30,350 --> 00:14:35,600
our web app so I frames sandbox is very

362
00:14:33,410 --> 00:14:37,819
helpful<font color="#CCCCCC"> and now of</font><font color="#E5E5E5"> course</font><font color="#CCCCCC"> we can</font><font color="#E5E5E5"> even</font>

363
00:14:35,600 --> 00:14:40,340
actually say<font color="#CCCCCC"> this sandbox is allowed to</font>

364
00:14:37,820 --> 00:14:41,870
run some JavaScript but<font color="#E5E5E5"> even if</font><font color="#CCCCCC"> we run</font>

365
00:14:40,340 --> 00:14:43,790
<font color="#E5E5E5">JavaScript in the sandbox there's an</font>

366
00:14:41,870 --> 00:14:46,040
interesting quirk here interesting

367
00:14:43,790 --> 00:14:49,069
nuance is that it still won't allow you

368
00:14:46,040 --> 00:14:51,140
to<font color="#E5E5E5"> access cookies or any of the web</font>

369
00:14:49,070 --> 00:14:53,990
storage API s so<font color="#CCCCCC"> this is</font><font color="#E5E5E5"> pretty</font>

370
00:14:51,140 --> 00:14:56,330
interesting<font color="#E5E5E5"> too is that we have sandbox</font>

371
00:14:53,990 --> 00:14:57,650
now within<font color="#E5E5E5"> only the browser itself and</font>

372
00:14:56,330 --> 00:14:59,300
you can't get access<font color="#CCCCCC"> to these cookies</font>

373
00:14:57,650 --> 00:15:01,490
are these headers and cookies for

374
00:14:59,300 --> 00:15:04,520
example often<font color="#CCCCCC"> very sensitive</font><font color="#E5E5E5"> very</font>

375
00:15:01,490 --> 00:15:07,460
security-related for talk about<font color="#CCCCCC"> CSRF or</font>

376
00:15:04,520 --> 00:15:08,750
lots of other on types of balls but of

377
00:15:07,460 --> 00:15:09,980
course who are hackers we want see

378
00:15:08,750 --> 00:15:12,140
interesting<font color="#E5E5E5"> things we</font><font color="#CCCCCC"> don't just care</font>

379
00:15:09,980 --> 00:15:13,670
about developers writing more secure web

380
00:15:12,140 --> 00:15:15,560
applications we want to think creatively

381
00:15:13,670 --> 00:15:16,939
we want to think how can<font color="#E5E5E5"> we abuse this</font>

382
00:15:15,560 --> 00:15:20,569
well if you're familiar with

383
00:15:16,940 --> 00:15:22,910
clickjacking there's one one<font color="#E5E5E5"> technique</font>

384
00:15:20,570 --> 00:15:24,920
is that that web applications use is

385
00:15:22,910 --> 00:15:26,810
basically looking<font color="#E5E5E5"> at this top got</font>

386
00:15:24,920 --> 00:15:29,000
location technique in<font color="#CCCCCC"> JavaScript a</font>

387
00:15:26,810 --> 00:15:30,979
little blob of JavaScript they'll use to

388
00:15:29,000 --> 00:15:33,050
make<font color="#E5E5E5"> sure that this web page hasn't been</font>

389
00:15:30,980 --> 00:15:35,200
framed so it's an anti framing technique

390
00:15:33,050 --> 00:15:36,640
but let's say now I<font color="#E5E5E5"> take this one</font>

391
00:15:35,200 --> 00:15:38,950
page that has this javascript-based

392
00:15:36,640 --> 00:15:41,410
<font color="#E5E5E5">aunty framing technique and I put that</font>

393
00:15:38,950 --> 00:15:44,620
<font color="#E5E5E5">inside an iframe sandbox</font><font color="#CCCCCC"> that disables</font>

394
00:15:41,410 --> 00:15:46,600
<font color="#CCCCCC">JavaScript voila I've now by past that</font>

395
00:15:44,620 --> 00:15:49,150
countermeasure so again this more

396
00:15:46,600 --> 00:15:50,710
highlights that the this JavaScript

397
00:15:49,150 --> 00:15:52,990
based countermeasure to click<font color="#E5E5E5"> jacking</font>

398
00:15:50,710 --> 00:15:54,580
was itself kind<font color="#E5E5E5"> of weak and we have</font>

399
00:15:52,990 --> 00:15:56,680
something better we<font color="#CCCCCC"> should be using</font><font color="#E5E5E5"> the</font>

400
00:15:54,580 --> 00:15:58,270
<font color="#CCCCCC">X frame options deny because that's a</font>

401
00:15:56,680 --> 00:16:00,040
header that<font color="#E5E5E5"> can be deployed at the</font>

402
00:15:58,270 --> 00:16:02,020
server level we<font color="#E5E5E5"> don't have to write</font>

403
00:16:00,040 --> 00:16:05,349
rewrite any of our HTML we don't have to

404
00:16:02,020 --> 00:16:09,100
modify any code and so much secure

405
00:16:05,350 --> 00:16:11,830
method of protecting the website so if

406
00:16:09,100 --> 00:16:13,990
the iframe sandbox was sort of like the

407
00:16:11,830 --> 00:16:16,090
the customs inspection content security

408
00:16:13,990 --> 00:16:19,420
policy you could think of<font color="#CCCCCC"> this or like</font>

409
00:16:16,090 --> 00:16:22,390
passport control and once again we're

410
00:16:19,420 --> 00:16:24,760
applying this concept of granular access

411
00:16:22,390 --> 00:16:27,069
and least privileged access to the same

412
00:16:24,760 --> 00:16:29,500
origin policy once again<font color="#E5E5E5"> it's a header</font>

413
00:16:27,070 --> 00:16:33,610
only so we see now this trend to rely on

414
00:16:29,500 --> 00:16:38,200
headers to instruct and implement or for

415
00:16:33,610 --> 00:16:40,330
as a reference<font color="#E5E5E5"> for security and its</font>

416
00:16:38,200 --> 00:16:41,770
really simple straightforward we say you

417
00:16:40,330 --> 00:16:43,510
basically<font color="#E5E5E5"> say what kind of source</font>

418
00:16:41,770 --> 00:16:47,410
attributes can<font color="#E5E5E5"> load what type of content</font>

419
00:16:43,510 --> 00:16:49,600
<font color="#CCCCCC">in this case on anything any default</font>

420
00:16:47,410 --> 00:16:53,260
source attribute like an image or an

421
00:16:49,600 --> 00:16:55,120
href can load content from origins that

422
00:16:53,260 --> 00:16:57,310
<font color="#E5E5E5">are from the zone domain in other words</font>

423
00:16:55,120 --> 00:16:58,990
self or it's kind of like this operator

424
00:16:57,310 --> 00:17:01,660
if<font color="#E5E5E5"> you're an object oriented type of</font>

425
00:16:58,990 --> 00:17:03,160
person but<font color="#CCCCCC"> we could also say we're going</font>

426
00:17:01,660 --> 00:17:05,980
to do that<font color="#E5E5E5"> for everything except frames</font>

427
00:17:03,160 --> 00:17:08,500
in this case this infected<font color="#E5E5E5"> I Frank would</font>

428
00:17:05,980 --> 00:17:10,990
be defeated and<font color="#CCCCCC"> what it's doing it once</font>

429
00:17:08,500 --> 00:17:13,060
<font color="#E5E5E5">again is going to block exploits it's</font>

430
00:17:10,990 --> 00:17:15,069
not going<font color="#E5E5E5"> to block the Volm so let's say</font>

431
00:17:13,060 --> 00:17:17,589
<font color="#CCCCCC">we have just this default source of self</font>

432
00:17:15,069 --> 00:17:20,829
content security policy is going to say

433
00:17:17,589 --> 00:17:23,198
I'm<font color="#CCCCCC"> not allowed to to execute this</font><font color="#E5E5E5"> new</font>

434
00:17:20,829 --> 00:17:25,030
<font color="#E5E5E5">fangled html5 autofocus cross-site</font>

435
00:17:23,199 --> 00:17:27,490
scripting because is what's referred<font color="#CCCCCC"> to</font>

436
00:17:25,030 --> 00:17:29,560
<font color="#E5E5E5">as the inline JavaScript of course we</font>

437
00:17:27,490 --> 00:17:32,290
would have to do we could execute if we

438
00:17:29,560 --> 00:17:33,879
want if we want to<font color="#E5E5E5"> do unsafe inline but</font>

439
00:17:32,290 --> 00:17:35,740
once<font color="#CCCCCC"> again we've just</font><font color="#E5E5E5"> actually kind of</font>

440
00:17:33,880 --> 00:17:38,620
weekend the intent and purpose of what

441
00:17:35,740 --> 00:17:41,350
CSP is and I point this out because

442
00:17:38,620 --> 00:17:43,209
unlike the clickjacking just being able

443
00:17:41,350 --> 00:17:46,820
<font color="#E5E5E5">to throw on in x-rays options header</font>

444
00:17:43,210 --> 00:17:51,070
this<font color="#E5E5E5"> actually does require modifying</font>

445
00:17:46,820 --> 00:17:54,320
so here's an<font color="#CCCCCC"> example with jquery arm and</font>

446
00:17:51,070 --> 00:17:56,269
a string concatenation that can be

447
00:17:54,320 --> 00:17:58,399
injected with an image source so there's

448
00:17:56,269 --> 00:18:01,220
a<font color="#CCCCCC"> Dom based cross-site scripting here</font>

449
00:17:58,399 --> 00:18:05,000
it's very<font color="#E5E5E5"> simple payload odds going to</font>

450
00:18:01,220 --> 00:18:06,889
pop up an alert and if and this is not a

451
00:18:05,000 --> 00:18:08,840
vulnerability with in jquery this is

452
00:18:06,889 --> 00:18:11,330
actually a mistake of string

453
00:18:08,840 --> 00:18:12,949
concatenation of how<font color="#CCCCCC"> that developers</font>

454
00:18:11,330 --> 00:18:15,049
using<font color="#E5E5E5"> jquery so this isn't like</font>

455
00:18:12,950 --> 00:18:17,990
<font color="#CCCCCC">something that should be patched in 183</font>

456
00:18:15,049 --> 00:18:20,269
or point<font color="#E5E5E5"> nine or something like that but</font>

457
00:18:17,990 --> 00:18:22,490
to apply content security policy to

458
00:18:20,269 --> 00:18:25,100
protect ourselves from this case we do

459
00:18:22,490 --> 00:18:28,070
have to rewrite that page so that we're

460
00:18:25,100 --> 00:18:30,830
<font color="#CCCCCC">moving the h2</font><font color="#E5E5E5"> the JavaScript</font><font color="#CCCCCC"> that was in</font>

461
00:18:28,070 --> 00:18:32,360
the block down to its own<font color="#E5E5E5"> JavaScript in</font>

462
00:18:30,830 --> 00:18:34,549
other words we have to take it out<font color="#CCCCCC"> of</font>

463
00:18:32,360 --> 00:18:37,189
inline mode the same ate the same

464
00:18:34,549 --> 00:18:38,929
JavaScript remains vulnerable but if<font color="#E5E5E5"> we</font>

465
00:18:37,190 --> 00:18:41,149
try to use this attack payload then a

466
00:18:38,929 --> 00:18:43,279
very simple payload it's no<font color="#E5E5E5"> longer going</font>

467
00:18:41,149 --> 00:18:45,370
to pop up at alert window so we've now

468
00:18:43,279 --> 00:18:48,230
blocked Dom<font color="#E5E5E5"> based cross-site scripting</font>

469
00:18:45,370 --> 00:18:50,029
using content security policy however

470
00:18:48,230 --> 00:18:53,120
we've done that at the expense of

471
00:18:50,029 --> 00:18:55,789
decoupling HTML and<font color="#E5E5E5"> JavaScript and if</font>

472
00:18:53,120 --> 00:18:57,408
<font color="#CCCCCC">your jquery arm hackers then it's the</font>

473
00:18:55,789 --> 00:18:59,509
idea if you're taking and changing the

474
00:18:57,409 --> 00:19:01,399
dot attribute function and just start

475
00:18:59,509 --> 00:19:04,370
using that<font color="#E5E5E5"> bind or not click or dot on</font>

476
00:19:01,399 --> 00:19:05,870
and those don't build in line events and

477
00:19:04,370 --> 00:19:07,789
you're probably<font color="#E5E5E5"> already using those</font>

478
00:19:05,870 --> 00:19:09,949
anyway so this is<font color="#CCCCCC"> the type of</font><font color="#E5E5E5"> thing that</font>

479
00:19:07,789 --> 00:19:12,470
additionally<font color="#CCCCCC"> jquery is already being</font>

480
00:19:09,950 --> 00:19:16,039
tested and trying to be as content

481
00:19:12,470 --> 00:19:19,009
security policy safe as possible so this

482
00:19:16,039 --> 00:19:20,750
also speaks to the idea of<font color="#E5E5E5"> reuse code</font>

483
00:19:19,009 --> 00:19:23,090
and rely on code that's being developed

484
00:19:20,750 --> 00:19:25,580
by experts and in particular domains

485
00:19:23,090 --> 00:19:27,799
such as security or working with gfp

486
00:19:25,580 --> 00:19:29,120
we're<font color="#E5E5E5"> working with performance rather</font>

487
00:19:27,799 --> 00:19:33,470
than trying<font color="#E5E5E5"> to build everything from</font>

488
00:19:29,120 --> 00:19:34,549
scratch though as since we always want

489
00:19:33,470 --> 00:19:38,059
<font color="#E5E5E5">to try and look at this from multiple</font>

490
00:19:34,549 --> 00:19:39,740
perspectives what if<font color="#E5E5E5"> we found an HTML</font>

491
00:19:38,059 --> 00:19:42,289
injection exploit inside a web

492
00:19:39,740 --> 00:19:44,779
application and we added<font color="#CCCCCC"> our own content</font>

493
00:19:42,289 --> 00:19:47,779
security policy header this set default

494
00:19:44,779 --> 00:19:49,759
source none suddenly we have a really

495
00:19:47,779 --> 00:19:51,590
<font color="#E5E5E5">effective denial of service against this</font>

496
00:19:49,759 --> 00:19:54,409
site because<font color="#E5E5E5"> what's going to happen is</font>

497
00:19:51,590 --> 00:19:57,649
that any browser that this http-equiv

498
00:19:54,409 --> 00:19:58,960
and follows this CSP instruction is not

499
00:19:57,649 --> 00:20:01,510
going<font color="#E5E5E5"> to load any of the rest of the</font>

500
00:19:58,960 --> 00:20:03,370
content so so from the browser's

501
00:20:01,510 --> 00:20:04,899
perspective the site is broken it

502
00:20:03,370 --> 00:20:05,949
doesn't work and<font color="#E5E5E5"> yet it's a denial of</font>

503
00:20:04,899 --> 00:20:07,959
service that<font color="#CCCCCC"> we don't</font><font color="#E5E5E5"> have</font><font color="#CCCCCC"> to rely on</font>

504
00:20:05,950 --> 00:20:10,750
bandwidth it's a type of das that relies

505
00:20:07,960 --> 00:20:13,120
on application level or application

506
00:20:10,750 --> 00:20:14,649
misuse or abuse so again it's<font color="#E5E5E5"> just one</font>

507
00:20:13,120 --> 00:20:16,629
of those things that if we're thinking

508
00:20:14,649 --> 00:20:19,029
creatively thinking cleverly we can

509
00:20:16,630 --> 00:20:20,950
abuse or use html5<font color="#E5E5E5"> against web</font>

510
00:20:19,029 --> 00:20:23,020
applications but remember<font color="#CCCCCC"> and</font><font color="#E5E5E5"> this is</font>

511
00:20:20,950 --> 00:20:24,279
the scenario<font color="#E5E5E5"> that needed that cross-site</font>

512
00:20:23,020 --> 00:20:25,899
scripting bone<font color="#E5E5E5"> in the first place and</font>

513
00:20:24,279 --> 00:20:27,700
<font color="#CCCCCC">that's</font><font color="#E5E5E5"> what the fundamental problem is</font>

514
00:20:25,899 --> 00:20:29,080
when the other thing<font color="#CCCCCC"> is that I thought</font>

515
00:20:27,700 --> 00:20:31,480
was a<font color="#E5E5E5"> little bit more interesting is</font>

516
00:20:29,080 --> 00:20:34,059
that we could also abuse content

517
00:20:31,480 --> 00:20:36,399
security policy to forge a post method

518
00:20:34,059 --> 00:20:38,649
and be no<font color="#E5E5E5"> forge a post method is</font>

519
00:20:36,399 --> 00:20:40,959
actually really cool<font color="#E5E5E5"> if we're trying to</font>

520
00:20:38,649 --> 00:20:43,479
build<font color="#CCCCCC"> CSRF attacks and we do this</font>

521
00:20:40,960 --> 00:20:45,669
because one of the cool things<font color="#CCCCCC"> about CSP</font>

522
00:20:43,480 --> 00:20:48,520
p is it has what's called a report<font color="#CCCCCC"> uri</font>

523
00:20:45,669 --> 00:20:50,649
and this was built into the spec for two

524
00:20:48,520 --> 00:20:52,629
reasons one so that<font color="#E5E5E5"> you could see who's</font>

525
00:20:50,649 --> 00:20:54,908
attempting to violate the directness

526
00:20:52,630 --> 00:20:57,100
who's attempting to build pages that in

527
00:20:54,909 --> 00:20:59,200
hack but<font color="#E5E5E5"> more importantly</font><font color="#CCCCCC"> I would say</font>

528
00:20:57,100 --> 00:21:00,820
it's<font color="#CCCCCC"> a way so that you can figure out</font>

529
00:20:59,200 --> 00:21:02,740
when you're the coupling<font color="#CCCCCC"> that HTML and</font>

530
00:21:00,820 --> 00:21:04,270
<font color="#E5E5E5">JavaScript what pages are broken or</font>

531
00:21:02,740 --> 00:21:07,029
what's<font color="#E5E5E5"> not working for you so it's</font>

532
00:21:04,270 --> 00:21:09,340
basically a debugging method but we

533
00:21:07,029 --> 00:21:13,029
could build our own<font color="#CCCCCC"> CSRF attack that</font>

534
00:21:09,340 --> 00:21:16,779
actually has a report uri of those<font color="#CCCCCC"> CSRF</font>

535
00:21:13,029 --> 00:21:19,029
<font color="#CCCCCC">payload basically and what happens is we</font>

536
00:21:16,779 --> 00:21:23,289
get a post method which is pretty cool

537
00:21:19,029 --> 00:21:25,240
we have our payload so some page and an

538
00:21:23,289 --> 00:21:27,370
<font color="#E5E5E5">Origin header is present which is</font>

539
00:21:25,240 --> 00:21:30,159
interesting the only catch is it's not<font color="#E5E5E5"> a</font>

540
00:21:27,370 --> 00:21:33,699
perfect attack because the post body it

541
00:21:30,159 --> 00:21:36,279
is de set in stone by<font color="#E5E5E5"> the browser so we</font>

542
00:21:33,700 --> 00:21:38,590
in blue here we can affect<font color="#E5E5E5"> the value of</font>

543
00:21:36,279 --> 00:21:40,539
the document URL and the value of the

544
00:21:38,590 --> 00:21:42,760
violated directive but we can't do

545
00:21:40,539 --> 00:21:45,908
anything as cleverly as add some extra

546
00:21:42,760 --> 00:21:50,140
ampersands and name value pairs so it's

547
00:21:45,909 --> 00:21:51,429
a<font color="#E5E5E5"> partial cfcs</font><font color="#CCCCCC"> CSRF attack but it's a</font>

548
00:21:50,140 --> 00:21:53,470
way that<font color="#CCCCCC"> we</font><font color="#E5E5E5"> should be looking at these</font>

549
00:21:51,429 --> 00:21:55,450
html5 spec so we need to<font color="#E5E5E5"> be poking and</font>

550
00:21:53,470 --> 00:21:57,429
prodding them so that we make sure that

551
00:21:55,450 --> 00:21:59,440
<font color="#CCCCCC">the</font><font color="#E5E5E5"> spec says you know something like</font>

552
00:21:57,429 --> 00:22:01,419
the origin header should be present so

553
00:21:59,440 --> 00:22:03,580
<font color="#CCCCCC">that web applications can now look for</font>

554
00:22:01,419 --> 00:22:05,980
this and verify where it's coming from

555
00:22:03,580 --> 00:22:08,529
as well<font color="#E5E5E5"> as making</font><font color="#CCCCCC"> sure that the values</font>

556
00:22:05,980 --> 00:22:11,230
<font color="#CCCCCC">here are being URL encoded properly to</font>

557
00:22:08,529 --> 00:22:14,380
defeat these types of attacks

558
00:22:11,230 --> 00:22:16,240
um there's cross-site or<font color="#E5E5E5"> cross</font><font color="#CCCCCC"> origin</font>

559
00:22:14,380 --> 00:22:18,130
request request sharing I'll<font color="#E5E5E5"> mention</font>

560
00:22:16,240 --> 00:22:21,490
this only because it's a way of

561
00:22:18,130 --> 00:22:22,660
basically<font color="#CCCCCC"> weaken mean this so as much as</font>

562
00:22:21,490 --> 00:22:24,669
we were trying<font color="#E5E5E5"> to say we should have</font>

563
00:22:22,660 --> 00:22:26,440
more granular access there's plenty<font color="#CCCCCC"> of</font>

564
00:22:24,669 --> 00:22:29,020
legitimate websites web applications

565
00:22:26,440 --> 00:22:30,610
that want mashups basically which even

566
00:22:29,020 --> 00:22:33,010
though the word mashup<font color="#CCCCCC"> is probably gone</font>

567
00:22:30,610 --> 00:22:34,750
is probably lost popularity the same

568
00:22:33,010 --> 00:22:36,970
types of web applications that are doing

569
00:22:34,750 --> 00:22:39,160
so or adding them and these are<font color="#CCCCCC"> just</font>

570
00:22:36,970 --> 00:22:41,770
some points about<font color="#CCCCCC"> that I think the</font>

571
00:22:39,160 --> 00:22:44,559
biggest point about this<font color="#CCCCCC"> is what I want</font>

572
00:22:41,770 --> 00:22:47,020
to say<font color="#E5E5E5"> is that</font><font color="#CCCCCC"> cross-origin request</font>

573
00:22:44,559 --> 00:22:48,790
sharing aside from being a difficult

574
00:22:47,020 --> 00:22:51,760
thing to get out my mouth today<font color="#CCCCCC"> for his</font>

575
00:22:48,790 --> 00:22:54,280
arm it's a definition of trust not

576
00:22:51,760 --> 00:22:55,809
security meaning that<font color="#E5E5E5"> you're trusting</font>

577
00:22:54,280 --> 00:22:58,600
this origin to<font color="#E5E5E5"> be</font><font color="#CCCCCC"> able to read your</font>

578
00:22:55,809 --> 00:23:01,510
<font color="#E5E5E5">content and that also can mean you're</font>

579
00:22:58,600 --> 00:23:03,399
trusting this origin to abuse misuse or

580
00:23:01,510 --> 00:23:05,620
have vulnerabilities that you're now

581
00:23:03,400 --> 00:23:07,330
sharing so you could also<font color="#E5E5E5"> call it cross</font>

582
00:23:05,620 --> 00:23:09,280
origin vulnerability sharing if you

583
00:23:07,330 --> 00:23:14,020
wanted to it's a measure of trust not

584
00:23:09,280 --> 00:23:17,220
security and and so if<font color="#CCCCCC"> we take</font><font color="#E5E5E5"> a little</font>

585
00:23:14,020 --> 00:23:19,210
bit of a shift here checking time

586
00:23:17,220 --> 00:23:21,010
there's some interesting things that<font color="#E5E5E5"> are</font>

587
00:23:19,210 --> 00:23:22,960
also with html5<font color="#E5E5E5"> are going to happen on</font>

588
00:23:21,010 --> 00:23:24,429
the server so i did mention for example

589
00:23:22,960 --> 00:23:26,919
the origin header the origin headers it

590
00:23:24,429 --> 00:23:29,470
really is a new header it's basically a

591
00:23:26,919 --> 00:23:32,620
stronger version of refer it basically

592
00:23:29,470 --> 00:23:34,990
means<font color="#E5E5E5"> that this origin was the source of</font>

593
00:23:32,620 --> 00:23:37,120
the request so now we could look at

594
00:23:34,990 --> 00:23:39,690
something<font color="#E5E5E5"> like perhaps the</font><font color="#CCCCCC"> CSRF attack</font>

595
00:23:37,120 --> 00:23:43,178
and see where that csr often that's that

596
00:23:39,690 --> 00:23:45,910
<font color="#CCCCCC">CSRF came from something something</font>

597
00:23:43,179 --> 00:23:48,490
something dot are you or CN or your

598
00:23:45,910 --> 00:23:51,850
favorite apt of choice and rather than

599
00:23:48,490 --> 00:23:54,370
<font color="#E5E5E5">coming from ebay com paypal</font><font color="#CCCCCC"> Google Gmail</font>

600
00:23:51,850 --> 00:23:57,129
and so on but it's something that needs

601
00:23:54,370 --> 00:23:58,989
<font color="#E5E5E5">to be about verify um but it found</font>

602
00:23:57,130 --> 00:24:02,260
interesting with things like server side

603
00:23:58,990 --> 00:24:05,169
with WebSockets and<font color="#CCCCCC"> no Jas is these are</font>

604
00:24:02,260 --> 00:24:07,330
new technologies and actually new

605
00:24:05,169 --> 00:24:08,740
protocols so web socks is actually

606
00:24:07,330 --> 00:24:10,659
really interesting because finally we

607
00:24:08,740 --> 00:24:16,830
have something to talk about<font color="#E5E5E5"> just beyond</font>

608
00:24:10,660 --> 00:24:19,179
<font color="#CCCCCC">um HTTP and um with WebSockets and node</font>

609
00:24:16,830 --> 00:24:21,549
actually running JavaScript on the

610
00:24:19,179 --> 00:24:22,830
server well we want to<font color="#E5E5E5"> avoid falling</font>

611
00:24:21,549 --> 00:24:25,149
into the trap of actually

612
00:24:22,830 --> 00:24:26,678
re-implementing the web server

613
00:24:25,149 --> 00:24:28,299
<font color="#E5E5E5">all because if we really meant the web</font>

614
00:24:26,679 --> 00:24:29,440
server we're going to see<font color="#CCCCCC"> font once</font>

615
00:24:28,299 --> 00:24:32,019
<font color="#E5E5E5">again we have directory traversal</font>

616
00:24:29,440 --> 00:24:33,039
vulnerabilities we have content

617
00:24:32,019 --> 00:24:35,409
vulnerabilities we were able to

618
00:24:33,039 --> 00:24:37,479
fingerprint the types of server rather

619
00:24:35,409 --> 00:24:40,299
than just doing<font color="#E5E5E5"> something like sockets</font>

620
00:24:37,479 --> 00:24:42,159
should hook up to a BNC or hook<font color="#E5E5E5"> up to an</font>

621
00:24:40,299 --> 00:24:45,580
audio we don't want to reimplement

622
00:24:42,159 --> 00:24:48,239
<font color="#CCCCCC">Apache and engine X inside nodejs I</font>

623
00:24:45,580 --> 00:24:48,239
think there was<font color="#CCCCCC"> a</font><font color="#E5E5E5"> question</font>

624
00:24:53,840 --> 00:24:59,870
no so<font color="#E5E5E5"> the questions it's so the origin</font>

625
00:24:56,929 --> 00:25:01,789
header will be<font color="#E5E5E5"> present on all modern</font>

626
00:24:59,870 --> 00:25:05,979
browsers but only in specific

627
00:25:01,789 --> 00:25:08,150
circumstances the catch is is that um

628
00:25:05,980 --> 00:25:11,210
refer for example wouldn't necessarily

629
00:25:08,150 --> 00:25:13,370
show up from<font color="#E5E5E5"> an HTTP to HTTPS transition</font>

630
00:25:11,210 --> 00:25:15,470
it may also be stripped by proxies for

631
00:25:13,370 --> 00:25:17,209
privacy reasons those same proxies might

632
00:25:15,470 --> 00:25:19,070
also strip origin because<font color="#CCCCCC"> they're either</font>

633
00:25:17,210 --> 00:25:20,960
ignorant of<font color="#E5E5E5"> it or they want this trip it</font>

634
00:25:19,070 --> 00:25:23,439
for some reason so again we have a

635
00:25:20,960 --> 00:25:26,120
<font color="#E5E5E5">problem or we as the security community</font>

636
00:25:23,440 --> 00:25:30,590
problem that we want to build better

637
00:25:26,120 --> 00:25:34,370
browsers and better<font color="#E5E5E5"> SSL and require stls</font>

638
00:25:30,590 --> 00:25:36,620
1.3 however we<font color="#CCCCCC"> have 20 years of web</font>

639
00:25:34,370 --> 00:25:38,389
applications and websites and content

640
00:25:36,620 --> 00:25:40,879
this still needs to<font color="#E5E5E5"> show up in that</font>

641
00:25:38,390 --> 00:25:43,159
browser so for<font color="#E5E5E5"> all of you that</font><font color="#CCCCCC"> wanted to</font>

642
00:25:40,880 --> 00:25:46,100
go back<font color="#CCCCCC"> and look at</font><font color="#E5E5E5"> all geocities and</font>

643
00:25:43,159 --> 00:25:47,360
blinking HTML most of your<font color="#CCCCCC"> browsers will</font>

644
00:25:46,100 --> 00:25:48,889
support that except<font color="#CCCCCC"> for the blinking</font>

645
00:25:47,360 --> 00:25:52,100
<font color="#E5E5E5">part which</font><font color="#CCCCCC"> is nice because that was</font>

646
00:25:48,890 --> 00:25:53,539
annoying um the point I wanted to make

647
00:25:52,100 --> 00:25:55,668
here<font color="#E5E5E5"> is I was talking about server-side</font>

648
00:25:53,539 --> 00:25:57,950
implementations is that on should give a

649
00:25:55,669 --> 00:26:02,539
shout out to beef is basically beef is a

650
00:25:57,950 --> 00:26:04,010
good example of why<font color="#E5E5E5"> html5 is more</font>

651
00:26:02,539 --> 00:26:05,960
dangerous from an exploitation

652
00:26:04,010 --> 00:26:07,700
perspective in other words it doesn't

653
00:26:05,960 --> 00:26:09,470
introduce new vulnerabilities it's just

654
00:26:07,700 --> 00:26:11,809
a new great more powerful way of

655
00:26:09,470 --> 00:26:14,360
exploiting the browser but one of<font color="#CCCCCC"> the</font>

656
00:26:11,809 --> 00:26:17,570
<font color="#CCCCCC">things</font><font color="#E5E5E5"> that's interesting um is that</font>

657
00:26:14,360 --> 00:26:22,699
beef relies on Ruby favorite very secure

658
00:26:17,570 --> 00:26:24,230
our harm server-side programming or

659
00:26:22,700 --> 00:26:28,130
programming language but you could

660
00:26:24,230 --> 00:26:29,690
actually<font color="#E5E5E5"> Doss or a beef server just by</font>

661
00:26:28,130 --> 00:26:31,940
sending a Jason packet or what was

662
00:26:29,690 --> 00:26:34,010
expecting adjacent packet of a dot and

663
00:26:31,940 --> 00:26:35,510
so this<font color="#E5E5E5"> just show and I</font><font color="#CCCCCC"> wanted to</font>

664
00:26:34,010 --> 00:26:37,340
highlight this not to pick on beef

665
00:26:35,510 --> 00:26:39,500
because beef is pretty cool Lord pick on

666
00:26:37,340 --> 00:26:42,408
Ruby because all languages have their

667
00:26:39,500 --> 00:26:44,450
problems<font color="#E5E5E5"> but because it's a new because</font>

668
00:26:42,409 --> 00:26:46,130
it's new technology new implementations

669
00:26:44,450 --> 00:26:47,779
it's going to<font color="#E5E5E5"> be a little bit more</font>

670
00:26:46,130 --> 00:26:49,279
crusty<font color="#CCCCCC"> it's going to have a</font><font color="#E5E5E5"> little bit</font>

671
00:26:47,779 --> 00:26:50,720
more implementation problems it's not

672
00:26:49,279 --> 00:26:52,370
<font color="#E5E5E5">going to have that solid years of</font>

673
00:26:50,720 --> 00:26:54,559
development like engine<font color="#CCCCCC"> acts and apache</font>

674
00:26:52,370 --> 00:26:56,899
have so these are interesting things to

675
00:26:54,559 --> 00:26:59,299
be looking for from a das perspective we

676
00:26:56,899 --> 00:27:01,489
can<font color="#E5E5E5"> just go back to blind fuzzing rather</font>

677
00:26:59,299 --> 00:27:03,860
than dealing<font color="#CCCCCC"> with more targeted fuzzing</font>

678
00:27:01,490 --> 00:27:08,520
that we're doing today perhaps

679
00:27:03,860 --> 00:27:10,050
so<font color="#E5E5E5"> I could probably spend all day just</font>

680
00:27:08,520 --> 00:27:12,389
talking about<font color="#E5E5E5"> what that list of new</font>

681
00:27:10,050 --> 00:27:15,419
html5<font color="#E5E5E5"> features are wanted to highlight</font>

682
00:27:12,390 --> 00:27:17,040
some additional ones of them<font color="#CCCCCC"> are what we</font>

683
00:27:15,420 --> 00:27:18,900
should be concerned<font color="#E5E5E5"> about what we</font><font color="#CCCCCC"> should</font>

684
00:27:17,040 --> 00:27:21,000
be looking at from a security and

685
00:27:18,900 --> 00:27:22,320
privacy perspective because and one

686
00:27:21,000 --> 00:27:24,390
things I<font color="#E5E5E5"> haven't really mentioned up to</font>

687
00:27:22,320 --> 00:27:27,540
the point is privacy but for as much as

688
00:27:24,390 --> 00:27:31,320
<font color="#E5E5E5">we have a patch and a geolocation and</font>

689
00:27:27,540 --> 00:27:33,389
web storage and WebGL and web / AP is to

690
00:27:31,320 --> 00:27:36,149
enable that banana bread first person

691
00:27:33,390 --> 00:27:39,240
shooter or to be<font color="#E5E5E5"> able to to enable</font>

692
00:27:36,150 --> 00:27:41,160
offline web applications or being able

693
00:27:39,240 --> 00:27:43,380
more powerful location or<font color="#CCCCCC"> Ignazio</font>

694
00:27:41,160 --> 00:27:46,530
location all of this can also be misused

695
00:27:43,380 --> 00:27:48,900
against privacy so now browser vendors

696
00:27:46,530 --> 00:27:51,660
and spec developers are an interesting

697
00:27:48,900 --> 00:27:53,280
balance between trading off what should

698
00:27:51,660 --> 00:27:55,710
go into the browser what should be

699
00:27:53,280 --> 00:27:58,170
exposed versus what should it and to

700
00:27:55,710 --> 00:28:00,540
some degree none<font color="#CCCCCC"> of you know something</font>

701
00:27:58,170 --> 00:28:03,000
like<font color="#E5E5E5"> geolocation decidedly is new within</font>

702
00:28:00,540 --> 00:28:05,220
<font color="#CCCCCC">a browser but web storage in a weight</font>

703
00:28:03,000 --> 00:28:07,920
just<font color="#CCCCCC"> a more clarified cookie and we</font>

704
00:28:05,220 --> 00:28:11,370
<font color="#CCCCCC">always have the</font><font color="#E5E5E5"> flash lso the local</font>

705
00:28:07,920 --> 00:28:13,860
objects had just<font color="#E5E5E5"> the same privacy and</font>

706
00:28:11,370 --> 00:28:16,439
every kind of tracking as something like

707
00:28:13,860 --> 00:28:18,240
web storage or app cache could use and

708
00:28:16,440 --> 00:28:20,430
if<font color="#E5E5E5"> we think</font><font color="#CCCCCC"> about this from</font><font color="#E5E5E5"> a security</font>

709
00:28:18,240 --> 00:28:24,240
perspective security community we like

710
00:28:20,430 --> 00:28:26,550
to make recommendations and say this is

711
00:28:24,240 --> 00:28:28,710
how this is what the default security

712
00:28:26,550 --> 00:28:30,450
should<font color="#E5E5E5"> look like in a web browser we're</font>

713
00:28:28,710 --> 00:28:32,880
still struggling on what that means<font color="#E5E5E5"> from</font>

714
00:28:30,450 --> 00:28:35,550
a privacy perspective so set aside

715
00:28:32,880 --> 00:28:37,020
whether you think<font color="#CCCCCC"> do-not-track</font><font color="#E5E5E5"> can can</font>

716
00:28:35,550 --> 00:28:39,570
be<font color="#CCCCCC"> effective from a policy perspective</font>

717
00:28:37,020 --> 00:28:41,480
but think about<font color="#E5E5E5"> what the default stance</font>

718
00:28:39,570 --> 00:28:44,220
of it was the<font color="#E5E5E5"> default stance was</font>

719
00:28:41,480 --> 00:28:46,800
everyone can be tracked and there was a

720
00:28:44,220 --> 00:28:49,230
significant bruja regarding whether or

721
00:28:46,800 --> 00:28:51,870
not Microsoft wanted to have DNT and

722
00:28:49,230 --> 00:28:55,020
able to fall on IE and someone like

723
00:28:51,870 --> 00:28:57,629
google says and spec developers evening

724
00:28:55,020 --> 00:29:00,420
saying no it should be opt-in<font color="#E5E5E5"> and people</font>

725
00:28:57,630 --> 00:29:02,040
should meaningfully opt into this and if

726
00:29:00,420 --> 00:29:04,320
<font color="#E5E5E5">we take a step back and start to think</font>

727
00:29:02,040 --> 00:29:06,990
about motivations we can see about we

728
00:29:04,320 --> 00:29:09,149
can talk about advertising tracking

729
00:29:06,990 --> 00:29:11,790
things like this more recent<font color="#CCCCCC"> examples</font>

730
00:29:09,150 --> 00:29:13,740
<font color="#CCCCCC">Mozilla's decision or the</font><font color="#E5E5E5"> pull back on</font>

731
00:29:11,790 --> 00:29:16,350
their decision about accepting cookies

732
00:29:13,740 --> 00:29:17,309
that were not first party cookies so

733
00:29:16,350 --> 00:29:19,949
once again we

734
00:29:17,309 --> 00:29:21,629
things that admittedly can also break

735
00:29:19,950 --> 00:29:23,820
how the web is built how the web is put

736
00:29:21,629 --> 00:29:26,399
<font color="#E5E5E5">together what expectations are but we</font>

737
00:29:23,820 --> 00:29:29,279
also<font color="#E5E5E5"> have a big push and pull between</font>

738
00:29:26,399 --> 00:29:31,469
what browser vendors want to do and what

739
00:29:29,279 --> 00:29:34,289
big website vendors want to do in order

740
00:29:31,470 --> 00:29:36,629
<font color="#E5E5E5">to provide us with good web applications</font>

741
00:29:34,289 --> 00:29:40,320
as well as from their perspectives will

742
00:29:36,629 --> 00:29:41,939
be<font color="#E5E5E5"> good types of advertising few more</font>

743
00:29:40,320 --> 00:29:44,249
notes on this one of the things I think

744
00:29:41,940 --> 00:29:46,919
is that html5 doesn't really make

745
00:29:44,249 --> 00:29:48,929
necessary doesn't necessarily make us

746
00:29:46,919 --> 00:29:50,549
less private doesn't really have an

747
00:29:48,929 --> 00:29:52,320
impact on our privacy<font color="#E5E5E5"> from a design</font>

748
00:29:50,549 --> 00:29:54,418
perspective as much as it does from an

749
00:29:52,320 --> 00:29:56,220
implementation this means we really have

750
00:29:54,419 --> 00:29:58,320
to<font color="#E5E5E5"> say is the web browser or the web</font>

751
00:29:56,220 --> 00:30:00,090
servers the web apps how they're

752
00:29:58,320 --> 00:30:02,820
collecting data and what they're<font color="#CCCCCC"> doing</font>

753
00:30:00,090 --> 00:30:04,799
with that data that's what's kind of the

754
00:30:02,820 --> 00:30:06,960
<font color="#E5E5E5">big problem is one of the things that we</font>

755
00:30:04,799 --> 00:30:09,389
can try<font color="#CCCCCC"> and do with the browser vendors</font>

756
00:30:06,960 --> 00:30:10,559
and browser developers is minimize the

757
00:30:09,389 --> 00:30:13,939
things that we don't<font color="#E5E5E5"> really want to</font>

758
00:30:10,559 --> 00:30:16,889
expose or try to minimize how much we're

759
00:30:13,940 --> 00:30:19,499
exposing by default you should if you

760
00:30:16,889 --> 00:30:21,629
<font color="#E5E5E5">haven't seen it before look at the eff</font>

761
00:30:19,499 --> 00:30:23,220
<font color="#CCCCCC">span optic lick effort it's a very</font>

762
00:30:21,629 --> 00:30:25,139
<font color="#CCCCCC">interesting effort that basically says</font>

763
00:30:23,220 --> 00:30:26,759
I'm going to<font color="#E5E5E5"> run a little bit of</font>

764
00:30:25,139 --> 00:30:28,619
JavaScript maybe some flash<font color="#E5E5E5"> fits</font>

765
00:30:26,759 --> 00:30:30,659
supported within your<font color="#E5E5E5"> browser I'm just</font>

766
00:30:28,619 --> 00:30:33,119
going to<font color="#E5E5E5"> see</font><font color="#CCCCCC"> how unique you are the idea</font>

767
00:30:30,659 --> 00:30:35,070
of<font color="#CCCCCC"> how much can</font><font color="#E5E5E5"> I fingerprint that this</font>

768
00:30:33,119 --> 00:30:37,110
is you as a browser and I don't have to

769
00:30:35,070 --> 00:30:39,658
rely<font color="#CCCCCC"> on</font><font color="#E5E5E5"> a cookie as much</font><font color="#CCCCCC"> as they try to</font>

770
00:30:37,110 --> 00:30:42,689
fingerprint this is a<font color="#E5E5E5"> laptop or this is</font>

771
00:30:39,659 --> 00:30:44,639
a phone or this is an iOS device versus

772
00:30:42,690 --> 00:30:47,909
an<font color="#E5E5E5"> Android device or this is Mozilla</font>

773
00:30:44,639 --> 00:30:49,918
versus opera and so on we're always

774
00:30:47,909 --> 00:30:52,590
going to have things<font color="#E5E5E5"> like in foreign</font>

775
00:30:49,919 --> 00:30:55,619
spaced attacks if you remember probably

776
00:30:52,590 --> 00:30:57,389
<font color="#E5E5E5">back I think in the 2005-2006 time frame</font>

777
00:30:55,619 --> 00:30:58,590
there's a lot<font color="#CCCCCC"> of really interesting</font><font color="#E5E5E5"> new</font>

778
00:30:57,389 --> 00:30:59,850
things being demonstrated about

779
00:30:58,590 --> 00:31:02,970
cross-site scripting and how to use

780
00:30:59,850 --> 00:31:05,939
cross-site scripting to scan or

781
00:31:02,970 --> 00:31:08,429
basically experts how to use HTML to

782
00:31:05,940 --> 00:31:10,499
scan an<font color="#CCCCCC"> Internet or how to look</font><font color="#E5E5E5"> at the</font>

783
00:31:08,429 --> 00:31:12,570
color of links<font color="#E5E5E5"> to figure out somebody's</font>

784
00:31:10,499 --> 00:31:15,090
history so we've always had these types

785
00:31:12,570 --> 00:31:18,090
of attacks well before html5 came along

786
00:31:15,090 --> 00:31:20,639
things like the web / 50 I may make

787
00:31:18,090 --> 00:31:22,168
these a<font color="#E5E5E5"> little bit</font><font color="#CCCCCC"> easier or WebGL may</font>

788
00:31:20,639 --> 00:31:24,779
make these a little<font color="#E5E5E5"> bit easier from an</font>

789
00:31:22,169 --> 00:31:27,119
attackers perspective or they<font color="#CCCCCC"> just make</font>

790
00:31:24,779 --> 00:31:29,880
the attack more complex but<font color="#E5E5E5"> this but is</font>

791
00:31:27,119 --> 00:31:32,340
basically a new manifestation of an

792
00:31:29,880 --> 00:31:34,050
problem the same<font color="#E5E5E5"> thing with like the cat</font>

793
00:31:32,340 --> 00:31:35,939
the<font color="#CCCCCC"> app cache</font><font color="#E5E5E5"> on message and web storage</font>

794
00:31:34,050 --> 00:31:38,570
<font color="#E5E5E5">I think one of the things I want to</font>

795
00:31:35,940 --> 00:31:41,040
mention<font color="#E5E5E5"> here about data exposure is that</font>

796
00:31:38,570 --> 00:31:46,139
we're always at the mercy of developers

797
00:31:41,040 --> 00:31:47,520
and it's them at any time any time<font color="#CCCCCC"> I if</font>

798
00:31:46,140 --> 00:31:50,130
I'm<font color="#E5E5E5"> going to use the words advanced</font>

799
00:31:47,520 --> 00:31:51,960
persistent I'm always followed by the

800
00:31:50,130 --> 00:31:54,120
word ignorance so advanced persistent

801
00:31:51,960 --> 00:31:57,480
ignorance<font color="#E5E5E5"> is the reason we have sequel</font>

802
00:31:54,120 --> 00:32:00,300
injection we've had stored procedures

803
00:31:57,480 --> 00:32:02,610
prepared statements for almost a decade

804
00:32:00,300 --> 00:32:04,639
<font color="#E5E5E5">now at least seven or eight years we can</font>

805
00:32:02,610 --> 00:32:09,120
<font color="#E5E5E5">just get rid of it by design however</font>

806
00:32:04,640 --> 00:32:11,310
<font color="#E5E5E5">last several years you know 2013 2012</font>

807
00:32:09,120 --> 00:32:13,350
2011 we can keep<font color="#CCCCCC"> going back and back and</font>

808
00:32:11,310 --> 00:32:15,840
back we have web applications that are

809
00:32:13,350 --> 00:32:17,669
vulnerable to sequel injection meaning

810
00:32:15,840 --> 00:32:20,520
that<font color="#E5E5E5"> developers are making mistakes I</font>

811
00:32:17,670 --> 00:32:24,600
was<font color="#CCCCCC"> giving a talk similar talk to</font><font color="#E5E5E5"> this</font>

812
00:32:20,520 --> 00:32:26,490
and about<font color="#CCCCCC"> a year ago and I</font><font color="#E5E5E5"> mentioned</font>

813
00:32:24,600 --> 00:32:28,860
<font color="#CCCCCC">just as a as a thought experiment</font>

814
00:32:26,490 --> 00:32:31,800
imagine now that we have the web storage

815
00:32:28,860 --> 00:32:33,719
API and rather than<font color="#E5E5E5"> having that like the</font>

816
00:32:31,800 --> 00:32:35,879
remember<font color="#CCCCCC"> me password ability or the</font>

817
00:32:33,720 --> 00:32:37,800
password reset function developer is

818
00:32:35,880 --> 00:32:39,720
just going<font color="#E5E5E5"> to put the plaintext password</font>

819
00:32:37,800 --> 00:32:41,730
into the web storage<font color="#CCCCCC"> and in the browser</font>

820
00:32:39,720 --> 00:32:43,890
and then all they have to do is<font color="#E5E5E5"> pop it</font>

821
00:32:41,730 --> 00:32:46,560
<font color="#CCCCCC">up for the user well there was a</font>

822
00:32:43,890 --> 00:32:47,820
gentleman<font color="#E5E5E5"> that came back that approached</font>

823
00:32:46,560 --> 00:32:49,500
me after the talk and said that you'd

824
00:32:47,820 --> 00:32:51,330
actually come across during a pen test

825
00:32:49,500 --> 00:32:53,370
an application<font color="#CCCCCC"> that had done exactly</font>

826
00:32:51,330 --> 00:32:56,070
that someone had stored the plaintext

827
00:32:53,370 --> 00:32:58,649
password inside the<font color="#E5E5E5"> browser's database</font>

828
00:32:56,070 --> 00:33:01,050
clearly this is a no-no something we

829
00:32:58,650 --> 00:33:02,640
would<font color="#E5E5E5"> never do but it's the</font><font color="#CCCCCC"> idea that</font>

830
00:33:01,050 --> 00:33:04,260
developers are out there and if they

831
00:33:02,640 --> 00:33:06,810
don't know if they make mistakes<font color="#E5E5E5"> they're</font>

832
00:33:04,260 --> 00:33:08,970
going to misuse html5 and make us more

833
00:33:06,810 --> 00:33:14,100
or make us less secure because of their

834
00:33:08,970 --> 00:33:15,960
mistakes not because of the spec so have

835
00:33:14,100 --> 00:33:18,389
to start to wind down now<font color="#E5E5E5"> and so what I</font>

836
00:33:15,960 --> 00:33:20,550
wanted to do is actually you know if

837
00:33:18,390 --> 00:33:23,400
javascript was harmless or not harmless

838
00:33:20,550 --> 00:33:26,280
at all hopefully html5 is making us

839
00:33:23,400 --> 00:33:27,990
making<font color="#CCCCCC"> javascript mostly harmless rather</font>

840
00:33:26,280 --> 00:33:30,090
than worrying about how we're writing it

841
00:33:27,990 --> 00:33:31,770
or what we're doing and should this be a

842
00:33:30,090 --> 00:33:34,050
for loop or should we be<font color="#CCCCCC"> doing to look</font>

843
00:33:31,770 --> 00:33:35,310
up or a property access should<font color="#E5E5E5"> how</font>

844
00:33:34,050 --> 00:33:37,710
should this be an anonymous function

845
00:33:35,310 --> 00:33:41,190
scoped what we want to do is just<font color="#E5E5E5"> say</font>

846
00:33:37,710 --> 00:33:43,530
hey I have an iframe sandbox or I have

847
00:33:41,190 --> 00:33:45,570
content security policy

848
00:33:43,530 --> 00:33:48,810
been trying to rely on something like up

849
00:33:45,570 --> 00:33:51,480
Facebook's<font color="#CCCCCC"> f bjs typos</font><font color="#E5E5E5"> javascript</font>

850
00:33:48,810 --> 00:33:54,840
sandbox into<font color="#CCCCCC"> JavaScript or Google's our</font>

851
00:33:51,480 --> 00:33:57,300
old<font color="#E5E5E5"> c aja effort that was basically to</font>

852
00:33:54,840 --> 00:33:59,909
try to build a<font color="#CCCCCC"> JavaScript sandbox for</font>

853
00:33:57,300 --> 00:34:02,879
<font color="#CCCCCC">JavaScript so we're relying on better</font>

854
00:33:59,910 --> 00:34:04,230
now standards and better designed to<font color="#CCCCCC"> do</font>

855
00:34:02,880 --> 00:34:05,670
<font color="#E5E5E5">this and one thing</font><font color="#CCCCCC"> that's going to</font>

856
00:34:04,230 --> 00:34:07,880
<font color="#E5E5E5">happen that javascript is going to</font>

857
00:34:05,670 --> 00:34:10,168
improve anyway so on the<font color="#E5E5E5"> one</font><font color="#CCCCCC"> hand</font>

858
00:34:07,880 --> 00:34:12,290
libraries like jQuery are already trying

859
00:34:10,168 --> 00:34:14,310
to build themselves to be out of<font color="#E5E5E5"> the box</font>

860
00:34:12,290 --> 00:34:16,889
compatible with content security policy

861
00:34:14,310 --> 00:34:18,060
making a lot easier<font color="#E5E5E5"> for</font><font color="#CCCCCC"> you to adopt I</font>

862
00:34:16,889 --> 00:34:20,730
start implementing these new features

863
00:34:18,060 --> 00:34:23,190
we're also for going back to that brief

864
00:34:20,730 --> 00:34:24,900
discussion i made about<font color="#E5E5E5"> javascript</font>

865
00:34:23,190 --> 00:34:27,150
encrypt though we're starting to get a

866
00:34:24,900 --> 00:34:29,400
little bit<font color="#CCCCCC"> closer to a trusted</font>

867
00:34:27,150 --> 00:34:32,940
<font color="#CCCCCC">environment things like freezing and</font>

868
00:34:29,400 --> 00:34:36,150
sealing an object Jeremiah Grossman

869
00:34:32,940 --> 00:34:38,520
famously demonstrated gmail hack that

870
00:34:36,150 --> 00:34:41,400
relied on overloading the default

871
00:34:38,520 --> 00:34:44,190
position of an array with<font color="#CCCCCC"> JavaScript</font>

872
00:34:41,400 --> 00:34:46,650
that's no longer possible partially

873
00:34:44,190 --> 00:34:48,179
because we is the<font color="#E5E5E5"> security community</font>

874
00:34:46,650 --> 00:34:50,490
have been poking and prodding and

875
00:34:48,179 --> 00:34:52,230
looking at how JavaScript can be abused

876
00:34:50,489 --> 00:34:54,209
and<font color="#E5E5E5"> misused and starting to come</font><font color="#CCCCCC"> up with</font>

877
00:34:52,230 --> 00:34:57,030
<font color="#E5E5E5">recommendations like these and something</font>

878
00:34:54,210 --> 00:34:59,190
like<font color="#CCCCCC"> two static HTML that's an</font><font color="#E5E5E5"> IE only</font>

879
00:34:57,030 --> 00:35:02,460
function but it's a<font color="#CCCCCC"> very it's a very</font>

880
00:34:59,190 --> 00:35:04,230
<font color="#E5E5E5">good step towards basically a whitelist</font>

881
00:35:02,460 --> 00:35:06,360
approach that says this is how I'm going

882
00:35:04,230 --> 00:35:08,130
to prevent cross-site scripting or dom

883
00:35:06,360 --> 00:35:10,170
based cross-site scripting because<font color="#CCCCCC"> i'm</font>

884
00:35:08,130 --> 00:35:12,750
going to give the developer an easy way

885
00:35:10,170 --> 00:35:14,790
to write<font color="#E5E5E5"> this out rather than relying on</font>

886
00:35:12,750 --> 00:35:17,250
patterns and reg<font color="#E5E5E5"> x's and guesses and</font>

887
00:35:14,790 --> 00:35:19,590
whatnot of course as I mentioned

888
00:35:17,250 --> 00:35:20,970
mistakes are always going to happen one

889
00:35:19,590 --> 00:35:23,100
<font color="#E5E5E5">of the biggest thing is probably going</font>

890
00:35:20,970 --> 00:35:25,740
to<font color="#E5E5E5"> be around that origin header that may</font>

891
00:35:23,100 --> 00:35:27,450
or may<font color="#CCCCCC"> not be present if you are have</font>

892
00:35:25,740 --> 00:35:30,359
done a lot pen testing you may<font color="#E5E5E5"> have come</font>

893
00:35:27,450 --> 00:35:32,819
across the x-forwarded-for header this

894
00:35:30,360 --> 00:35:36,390
is basically inserted by proxies and it

895
00:35:32,820 --> 00:35:38,400
gives the IP address of the<font color="#E5E5E5"> client that</font>

896
00:35:36,390 --> 00:35:41,000
the proxy is forwarding for and there

897
00:35:38,400 --> 00:35:43,710
have been<font color="#E5E5E5"> many of infamous i should say</font>

898
00:35:41,000 --> 00:35:46,200
situations where web applications were

899
00:35:43,710 --> 00:35:48,390
lying relying on the IP address of the

900
00:35:46,200 --> 00:35:50,370
x-forwarded-for header as an access

901
00:35:48,390 --> 00:35:53,609
control mechanism and now if you just

902
00:35:50,370 --> 00:35:55,970
<font color="#E5E5E5">open up burp or Zed attack proxy insert</font>

903
00:35:53,610 --> 00:35:58,070
<font color="#CCCCCC">your own exported for header</font>

904
00:35:55,970 --> 00:36:00,700
you could bypass or their access control

905
00:35:58,070 --> 00:36:03,500
say exhorted for local host or a 10 dot

906
00:36:00,700 --> 00:36:05,629
address you can bypass it so my point

907
00:36:03,500 --> 00:36:07,400
here is<font color="#CCCCCC"> that we should know the origin</font>

908
00:36:05,630 --> 00:36:09,980
is<font color="#CCCCCC"> spoofing</font><font color="#E5E5E5"> and that's perfectly fine</font>

909
00:36:07,400 --> 00:36:11,530
the idea the origin header is that it's

910
00:36:09,980 --> 00:36:13,849
going<font color="#E5E5E5"> to be present from legitimate</font>

911
00:36:11,530 --> 00:36:16,070
requests coming from a<font color="#CCCCCC"> legitimate</font>

912
00:36:13,849 --> 00:36:17,140
uncompromised web browser something

913
00:36:16,070 --> 00:36:20,690
that's just<font color="#E5E5E5"> being trying to be</font>

914
00:36:17,140 --> 00:36:23,210
manipulated or abused via plain HTML

915
00:36:20,690 --> 00:36:25,550
which is exactly what clickjacking or

916
00:36:23,210 --> 00:36:28,070
crossing<font color="#CCCCCC"> CSRF types of attacks are going</font>

917
00:36:25,550 --> 00:36:29,630
to rely<font color="#CCCCCC"> on and just again please please</font>

918
00:36:28,070 --> 00:36:34,490
<font color="#E5E5E5">please just avoid that string</font>

919
00:36:29,630 --> 00:36:36,710
concatenation um so that we have<font color="#E5E5E5"> the</font>

920
00:36:34,490 --> 00:36:38,209
idea of one of the the concept<font color="#E5E5E5"> I'm</font>

921
00:36:36,710 --> 00:36:40,310
trying to focus on here are trying to

922
00:36:38,210 --> 00:36:41,869
convey is that we<font color="#E5E5E5"> want to have security</font>

923
00:36:40,310 --> 00:36:44,029
by design rather than just

924
00:36:41,869 --> 00:36:46,880
implementation so we're<font color="#E5E5E5"> still struggling</font>

925
00:36:44,030 --> 00:36:50,359
with<font color="#CCCCCC"> csrf and how to have a design</font>

926
00:36:46,880 --> 00:36:52,970
against<font color="#CCCCCC"> CSRF that is that everyone can</font>

927
00:36:50,359 --> 00:36:55,250
adopt and everyone can deploy easily and

928
00:36:52,970 --> 00:36:57,919
securely they're still obviously good is

929
00:36:55,250 --> 00:37:00,050
to do this rely on nonces<font color="#CCCCCC"> rely</font><font color="#E5E5E5"> on</font>

930
00:36:57,920 --> 00:37:01,970
correctly double submitting cookies

931
00:37:00,050 --> 00:37:03,470
concepts like this but there's<font color="#E5E5E5"> not</font>

932
00:37:01,970 --> 00:37:06,020
something like<font color="#E5E5E5"> a header that we can</font><font color="#CCCCCC"> just</font>

933
00:37:03,470 --> 00:37:07,970
apply this similar to cfp when we get to

934
00:37:06,020 --> 00:37:10,280
<font color="#CCCCCC">that point</font><font color="#E5E5E5"> then we'll finally get rid</font><font color="#CCCCCC"> of</font>

935
00:37:07,970 --> 00:37:12,740
a whole class of vulnerabilities just

936
00:37:10,280 --> 00:37:14,240
like<font color="#E5E5E5"> we've should have gotten rid of a</font>

937
00:37:12,740 --> 00:37:15,560
whole class of sequel injection with

938
00:37:14,240 --> 00:37:17,689
those prepared statements or we<font color="#E5E5E5"> should</font>

939
00:37:15,560 --> 00:37:19,700
gotten rid of<font color="#CCCCCC"> the whole class of</font>

940
00:37:17,690 --> 00:37:21,589
clickjacking just by using that extreme

941
00:37:19,700 --> 00:37:23,629
options header and a<font color="#CCCCCC"> court for</font><font color="#E5E5E5"> getting</font>

942
00:37:21,589 --> 00:37:24,950
closer to<font color="#E5E5E5"> having better designed to get</font>

943
00:37:23,630 --> 00:37:27,619
rid of the class of cross-site scripting

944
00:37:24,950 --> 00:37:29,180
with something like CSP or being able to

945
00:37:27,619 --> 00:37:31,670
deal with mashed up sand mixed origin

946
00:37:29,180 --> 00:37:33,470
content and even things like<font color="#CCCCCC"> sniffy so</font>

947
00:37:31,670 --> 00:37:36,080
we're<font color="#CCCCCC"> getting better there as the specs</font>

948
00:37:33,470 --> 00:37:38,290
improve so there are<font color="#CCCCCC"> a few things</font><font color="#E5E5E5"> that</font>

949
00:37:36,080 --> 00:37:40,279
we want to<font color="#E5E5E5"> discourage one for example</font>

950
00:37:38,290 --> 00:37:43,190
<font color="#CCCCCC">WebSockets has gone through several</font>

951
00:37:40,280 --> 00:37:45,950
iterations and you can still download

952
00:37:43,190 --> 00:37:49,820
web sockets in deploy a WebSocket server

953
00:37:45,950 --> 00:37:51,770
that supports an old legacy version of

954
00:37:49,820 --> 00:37:53,030
the protocol this is a bad idea we

955
00:37:51,770 --> 00:37:55,280
should only be dealing<font color="#CCCCCC"> with I think</font><font color="#E5E5E5"> the</font>

956
00:37:53,030 --> 00:37:56,780
current protocols number 13 that should

957
00:37:55,280 --> 00:37:59,060
be<font color="#E5E5E5"> the version and only version that</font>

958
00:37:56,780 --> 00:38:01,430
we're supporting so it's fine<font color="#CCCCCC"> to be able</font>

959
00:37:59,060 --> 00:38:03,589
to play with<font color="#E5E5E5"> this but one of the</font>

960
00:38:01,430 --> 00:38:06,440
drawbacks we could say<font color="#E5E5E5"> on the on the</font>

961
00:38:03,589 --> 00:38:09,440
road to making that tourney<font color="#E5E5E5"> of the draft</font>

962
00:38:06,440 --> 00:38:10,880
html5 into the standard html5 is there

963
00:38:09,440 --> 00:38:12,170
were a lot of differences a lot of

964
00:38:10,880 --> 00:38:13,460
quirks that happen a<font color="#CCCCCC"> lot of the way</font>

965
00:38:12,170 --> 00:38:15,680
<font color="#E5E5E5">along the way that we need</font><font color="#CCCCCC"> to make sure</font>

966
00:38:13,460 --> 00:38:17,480
we pull out of<font color="#E5E5E5"> that server side code and</font>

967
00:38:15,680 --> 00:38:20,118
we ignore because we want<font color="#CCCCCC"> to</font><font color="#E5E5E5"> make sure</font>

968
00:38:17,480 --> 00:38:23,359
we don't reintroduce quirks and thinking

969
00:38:20,119 --> 00:38:25,580
that the header is lowercase in this

970
00:38:23,359 --> 00:38:28,160
version of<font color="#E5E5E5"> a browser but uppercase and</font>

971
00:38:25,580 --> 00:38:30,319
dispersion or so on<font color="#E5E5E5"> on the course</font>

972
00:38:28,160 --> 00:38:31,910
avoiding storing personal data in the

973
00:38:30,320 --> 00:38:33,619
browser and we want to avoid more

974
00:38:31,910 --> 00:38:35,330
plugins<font color="#CCCCCC"> and I</font><font color="#E5E5E5"> mentioned this because</font>

975
00:38:33,619 --> 00:38:38,750
there's some additional interesting

976
00:38:35,330 --> 00:38:42,290
efforts being made by for example Google

977
00:38:38,750 --> 00:38:44,660
is I wouldn't<font color="#E5E5E5"> say pushing but has</font>

978
00:38:42,290 --> 00:38:48,170
introduced or has working<font color="#E5E5E5"> on something</font>

979
00:38:44,660 --> 00:38:51,020
like dart and it's<font color="#E5E5E5"> basically vbscript</font>

980
00:38:48,170 --> 00:38:53,359
that's secure and more efficient but by

981
00:38:51,020 --> 00:38:55,490
the same token is still vbscript and my

982
00:38:53,359 --> 00:38:57,500
point there is to say that<font color="#E5E5E5"> we</font><font color="#CCCCCC"> already</font>

983
00:38:55,490 --> 00:38:59,750
<font color="#CCCCCC">have a JavaScript that has its own</font>

984
00:38:57,500 --> 00:39:01,339
issues has its problems and we start<font color="#E5E5E5"> to</font>

985
00:38:59,750 --> 00:39:04,310
introduce something like dart a new

986
00:39:01,339 --> 00:39:07,190
client side language we ripped coming

987
00:39:04,310 --> 00:39:09,920
back to this<font color="#E5E5E5"> browser or this site only</font>

988
00:39:07,190 --> 00:39:12,619
<font color="#E5E5E5">works in chrome or only works in</font><font color="#CCCCCC"> Opera</font>

989
00:39:09,920 --> 00:39:14,390
doesn't work in Mozilla<font color="#CCCCCC"> IE and so on the</font>

990
00:39:12,619 --> 00:39:17,390
same thing with something like<font color="#CCCCCC"> knakal</font>

991
00:39:14,390 --> 00:39:19,910
it's a<font color="#CCCCCC"> client side it's basically flash</font>

992
00:39:17,390 --> 00:39:22,400
that's more secure but it's still a

993
00:39:19,910 --> 00:39:24,859
plug-in that would be specific to<font color="#E5E5E5"> chrome</font>

994
00:39:22,400 --> 00:39:26,240
for example rather than an<font color="#E5E5E5"> html5</font>

995
00:39:24,859 --> 00:39:28,640
standard that would<font color="#E5E5E5"> be in all of the</font>

996
00:39:26,240 --> 00:39:30,649
browser so so i would say on the one

997
00:39:28,640 --> 00:39:32,598
hand that's probably a good<font color="#E5E5E5"> thing from a</font>

998
00:39:30,650 --> 00:39:34,790
research how do we<font color="#E5E5E5"> want to to bring</font>

999
00:39:32,599 --> 00:39:37,310
something to adopt those what we learn

1000
00:39:34,790 --> 00:39:40,640
for that into something<font color="#E5E5E5"> like javascript</font>

1001
00:39:37,310 --> 00:39:43,700
so for<font color="#E5E5E5"> example even if you're developing</font>

1002
00:39:40,640 --> 00:39:46,700
<font color="#E5E5E5">javascript one of the things to do would</font>

1003
00:39:43,700 --> 00:39:48,618
<font color="#CCCCCC">be do you</font><font color="#E5E5E5"> want</font><font color="#CCCCCC"> to decide on developing</font>

1004
00:39:46,700 --> 00:39:51,049
natively in javascript or developing in

1005
00:39:48,619 --> 00:39:53,510
java that compiles down to javascript

1006
00:39:51,050 --> 00:39:55,190
like a closure if you do<font color="#E5E5E5"> that you if you</font>

1007
00:39:53,510 --> 00:39:57,650
work in like a Java to JavaScript

1008
00:39:55,190 --> 00:39:59,690
environment you can't necessarily work

1009
00:39:57,650 --> 00:40:01,849
as easily with<font color="#E5E5E5"> third-party libraries or</font>

1010
00:39:59,690 --> 00:40:03,619
see them<font color="#E5E5E5"> in the same IDE or if you use</font>

1011
00:40:01,849 --> 00:40:05,800
<font color="#E5E5E5">something like typescript that's</font>

1012
00:40:03,619 --> 00:40:07,910
interesting because<font color="#E5E5E5"> you can have</font>

1013
00:40:05,800 --> 00:40:10,130
<font color="#E5E5E5">JavaScript code that's annotated with</font>

1014
00:40:07,910 --> 00:40:13,730
typescript that lives in the same IDE

1015
00:40:10,130 --> 00:40:15,470
the same debugging mechanisms as any

1016
00:40:13,730 --> 00:40:17,330
other<font color="#E5E5E5"> third-party JavaScript so these</font>

1017
00:40:15,470 --> 00:40:19,549
are kind of how do you want your

1018
00:40:17,330 --> 00:40:21,730
developers to to go forward what's your

1019
00:40:19,550 --> 00:40:24,340
what is<font color="#E5E5E5"> your engineering philosophy</font>

1020
00:40:21,730 --> 00:40:27,430
<font color="#E5E5E5">that and what we want to do is start to</font>

1021
00:40:24,340 --> 00:40:29,590
encourage other trends so Java continues

1022
00:40:27,430 --> 00:40:31,720
to plague us<font color="#E5E5E5"> Java is always around but</font>

1023
00:40:29,590 --> 00:40:34,090
more interesting we can now

1024
00:40:31,720 --> 00:40:35,980
compartmentalize and say Java can

1025
00:40:34,090 --> 00:40:38,140
execute on this domain or execute from

1026
00:40:35,980 --> 00:40:41,140
this origin we could even if we wanted

1027
00:40:38,140 --> 00:40:43,299
to<font color="#E5E5E5"> thought experiment decide maybe we</font>

1028
00:40:41,140 --> 00:40:45,490
wanted to take like a concept like

1029
00:40:43,300 --> 00:40:47,590
ghostery or concept like adding these

1030
00:40:45,490 --> 00:40:49,930
per domain or per origin restrictions

1031
00:40:47,590 --> 00:40:53,890
and apply them to geolocation web

1032
00:40:49,930 --> 00:40:55,569
storage API the gamepad API you know any

1033
00:40:53,890 --> 00:40:57,879
things<font color="#E5E5E5"> that are being new and developed</font>

1034
00:40:55,570 --> 00:41:01,090
on<font color="#CCCCCC"> the one hand we would start to break</font>

1035
00:40:57,880 --> 00:41:03,310
the web in the sense of web applications

1036
00:41:01,090 --> 00:41:06,160
should just expect<font color="#E5E5E5"> that this feature</font>

1037
00:41:03,310 --> 00:41:07,660
exists because as part of<font color="#E5E5E5"> html5 but if</font>

1038
00:41:06,160 --> 00:41:10,420
<font color="#E5E5E5">we want to build</font><font color="#CCCCCC"> something that's more</font>

1039
00:41:07,660 --> 00:41:12,310
of a more of a privacy browser we want

1040
00:41:10,420 --> 00:41:14,770
to build things that are more secure we

1041
00:41:12,310 --> 00:41:16,570
could possibly about do we<font color="#CCCCCC"> really</font><font color="#E5E5E5"> want</font>

1042
00:41:14,770 --> 00:41:18,820
to compartmentalize this or how we want

1043
00:41:16,570 --> 00:41:21,310
to allow or disallow access to like

1044
00:41:18,820 --> 00:41:23,109
geolocation things like this and it's

1045
00:41:21,310 --> 00:41:25,420
good<font color="#E5E5E5"> to see that same origin policy can</font>

1046
00:41:23,109 --> 00:41:29,590
be more granular<font color="#CCCCCC"> and we're basically</font>

1047
00:41:25,420 --> 00:41:33,760
getting better security by design so to

1048
00:41:29,590 --> 00:41:36,130
wrap up basically a cycle so we can

1049
00:41:33,760 --> 00:41:38,980
party<font color="#CCCCCC"> like it's 1999 but let's not code</font>

1050
00:41:36,130 --> 00:41:41,220
like it's 1999 let's adopt html5 let's

1051
00:41:38,980 --> 00:41:45,250
take advantage<font color="#CCCCCC"> of these things</font><font color="#E5E5E5"> in html5</font>

1052
00:41:41,220 --> 00:41:47,439
makes you more secure if your clients

1053
00:41:45,250 --> 00:41:49,869
browser is using it and you're using it

1054
00:41:47,440 --> 00:41:51,580
<font color="#CCCCCC">just saying we have an html5 app doesn't</font>

1055
00:41:49,869 --> 00:41:53,380
mean you're less secure it means you

1056
00:41:51,580 --> 00:41:55,630
have a more powerful app it means you

1057
00:41:53,380 --> 00:41:57,970
have more data that's exposed to you so

1058
00:41:55,630 --> 00:41:59,859
you<font color="#CCCCCC"> have to be reliable</font><font color="#E5E5E5"> about protecting</font>

1059
00:41:57,970 --> 00:42:01,810
the data the security of that data both

1060
00:41:59,859 --> 00:42:04,210
in the browser and and on<font color="#E5E5E5"> your server</font>

1061
00:42:01,810 --> 00:42:06,880
side but you can do more things with<font color="#E5E5E5"> it</font>

1062
00:42:04,210 --> 00:42:10,960
and of course<font color="#E5E5E5"> the problem</font><font color="#CCCCCC"> is going</font><font color="#E5E5E5"> to be</font>

1063
00:42:06,880 --> 00:42:12,550
<font color="#E5E5E5">on that</font><font color="#CCCCCC"> internet explorer 6 so if</font><font color="#E5E5E5"> we go</font>

1064
00:42:10,960 --> 00:42:16,510
<font color="#CCCCCC">back and</font><font color="#E5E5E5"> talk about something like the</font>

1065
00:42:12,550 --> 00:42:18,730
Aurora attacks<font color="#CCCCCC"> on on if if I remember</font>

1066
00:42:16,510 --> 00:42:20,830
correctly it one of the reasons that the

1067
00:42:18,730 --> 00:42:22,359
<font color="#E5E5E5">Google talked about how they were</font>

1068
00:42:20,830 --> 00:42:25,119
attacked or how they became vulnerable

1069
00:42:22,359 --> 00:42:27,850
to it was that they were lying on ie6

1070
00:42:25,119 --> 00:42:30,580
for a few<font color="#E5E5E5"> of their web applications so</font>

1071
00:42:27,850 --> 00:42:32,830
even you know<font color="#E5E5E5"> a modern-day a security</font>

1072
00:42:30,580 --> 00:42:34,869
very security-conscious company still

1073
00:42:32,830 --> 00:42:35,598
<font color="#E5E5E5">had to have that crutch of a very very</font>

1074
00:42:34,869 --> 00:42:37,369
old

1075
00:42:35,599 --> 00:42:39,710
browser so let's actually bring these

1076
00:42:37,369 --> 00:42:41,420
browsers up let's keep them patched if

1077
00:42:39,710 --> 00:42:43,489
we keep them patched we're already<font color="#E5E5E5"> going</font>

1078
00:42:41,420 --> 00:42:46,039
<font color="#E5E5E5">to start off secure we</font><font color="#CCCCCC"> can start to have</font>

1079
00:42:43,489 --> 00:42:48,019
things like CSP these origin headers and

1080
00:42:46,039 --> 00:42:51,549
have a lot of help so thank<font color="#E5E5E5"> you</font><font color="#CCCCCC"> for your</font>

1081
00:42:48,019 --> 00:42:51,549
<font color="#E5E5E5">time and that's all I've</font><font color="#CCCCCC"> got</font>

1082
00:42:56,240 --> 00:43:01,259
so I think Biden if I didn't go too fast

1083
00:42:59,370 --> 00:43:03,690
or too long I<font color="#E5E5E5"> think we have a few a</font>

1084
00:43:01,260 --> 00:43:06,240
little bit<font color="#E5E5E5"> of time left for questions I</font>

1085
00:43:03,690 --> 00:43:08,850
also will know if<font color="#E5E5E5"> you come</font><font color="#CCCCCC"> to the koalas</font>

1086
00:43:06,240 --> 00:43:10,589
booths are giving away by now a short

1087
00:43:08,850 --> 00:43:12,450
stack we've run out of them copies of my

1088
00:43:10,590 --> 00:43:16,410
book and I can<font color="#CCCCCC"> tell</font><font color="#E5E5E5"> you how the book</font>

1089
00:43:12,450 --> 00:43:21,210
hacked amazon little story but other

1090
00:43:16,410 --> 00:43:25,790
there any questions right now no hands

1091
00:43:21,210 --> 00:43:25,790
cover your right here

1092
00:43:34,940 --> 00:43:38,950
dhaka yeah

1093
00:43:43,600 --> 00:43:47,680
yeah yeah absolutely and I think that in

1094
00:43:45,880 --> 00:43:49,270
yeah kind of piggyback on the comments

1095
00:43:47,680 --> 00:43:51,190
basically get your input validation

1096
00:43:49,270 --> 00:43:52,780
straight and what I would<font color="#E5E5E5"> say is if</font>

1097
00:43:51,190 --> 00:43:55,540
you're using a regular<font color="#CCCCCC"> expression as</font>

1098
00:43:52,780 --> 00:43:57,880
input validation for HTML you're

1099
00:43:55,540 --> 00:43:59,200
probably doing it wrong and you're going

1100
00:43:57,880 --> 00:44:01,660
<font color="#E5E5E5">to get hacked because there's a</font><font color="#CCCCCC"> lot of</font>

1101
00:43:59,200 --> 00:44:03,160
ways to if you're<font color="#CCCCCC"> running for</font>

1102
00:44:01,660 --> 00:44:04,480
blacklisting if you're<font color="#E5E5E5"> whitelisting</font>

1103
00:44:03,160 --> 00:44:06,310
you're possibly in a little bit better

1104
00:44:04,480 --> 00:44:08,260
situation because you're matching what

1105
00:44:06,310 --> 00:44:10,000
you want rather<font color="#E5E5E5"> than trying to figure</font>

1106
00:44:08,260 --> 00:44:12,880
out what shouldn't derive but input

1107
00:44:10,000 --> 00:44:14,170
validation surely is the big deal<font color="#E5E5E5"> and</font>

1108
00:44:12,880 --> 00:44:16,930
that<font color="#E5E5E5"> goes actually we can also say that</font>

1109
00:44:14,170 --> 00:44:19,150
goes for not just html5 apps but for

1110
00:44:16,930 --> 00:44:21,370
mobile apps that are downloaded from an

1111
00:44:19,150 --> 00:44:23,260
app store but are still using HTTP is

1112
00:44:21,370 --> 00:44:24,640
the transport mechanism just because

1113
00:44:23,260 --> 00:44:26,110
it's going<font color="#CCCCCC"> to over a cheapy and it's</font>

1114
00:44:24,640 --> 00:44:29,589
called me from a compiled app that's an

1115
00:44:26,110 --> 00:44:32,020
objective<font color="#E5E5E5"> c or</font><font color="#CCCCCC"> it's in dalvik or it</font>

1116
00:44:29,590 --> 00:44:33,130
since Molly or what have you if you're

1117
00:44:32,020 --> 00:44:35,680
not doing that client or that

1118
00:44:33,130 --> 00:44:39,360
<font color="#E5E5E5">server-side input validation it doesn't</font>

1119
00:44:35,680 --> 00:44:39,359
really<font color="#E5E5E5"> matter if that's HUP</font>

1120
00:44:49,850 --> 00:44:54,680
yeah absolutely actually and again what

1121
00:44:52,760 --> 00:44:56,390
that one of the things<font color="#CCCCCC"> that I</font><font color="#E5E5E5"> found on I</font>

1122
00:44:54,680 --> 00:44:59,180
was just<font color="#E5E5E5"> trying</font><font color="#CCCCCC"> to do some simple</font>

1123
00:44:56,390 --> 00:45:02,180
<font color="#E5E5E5">security on in you know investigation on</font>

1124
00:44:59,180 --> 00:45:04,250
some native web<font color="#CCCCCC"> apps so I set up a proxy</font>

1125
00:45:02,180 --> 00:45:06,470
and was trying<font color="#E5E5E5"> to use things like a</font>

1126
00:45:04,250 --> 00:45:08,240
Twitter and some other<font color="#E5E5E5"> Facebook and some</font>

1127
00:45:06,470 --> 00:45:10,339
other these for your proxy and what's

1128
00:45:08,240 --> 00:45:12,830
good is that<font color="#E5E5E5"> the Twitter app the</font>

1129
00:45:10,340 --> 00:45:15,200
facebook app for example would refuse to

1130
00:45:12,830 --> 00:45:17,090
<font color="#E5E5E5">make the connection because the ssl</font>

1131
00:45:15,200 --> 00:45:19,370
certificate was invalid so the app

1132
00:45:17,090 --> 00:45:21,470
itself was making sure<font color="#E5E5E5"> that it that not</font>

1133
00:45:19,370 --> 00:45:23,540
only is it using<font color="#CCCCCC"> SSL but it's actually</font>

1134
00:45:21,470 --> 00:45:25,509
using SSL first intended purpose in

1135
00:45:23,540 --> 00:45:27,890
other words identifying and

1136
00:45:25,510 --> 00:45:30,080
authenticating that remote server it's

1137
00:45:27,890 --> 00:45:32,930
actually talking to Twitter however you

1138
00:45:30,080 --> 00:45:34,580
could go back to stuff on several

1139
00:45:32,930 --> 00:45:36,680
different half dozen different open

1140
00:45:34,580 --> 00:45:40,100
source examples of how to interface with

1141
00:45:36,680 --> 00:45:42,620
twitter's api and those apps none<font color="#CCCCCC"> of</font>

1142
00:45:40,100 --> 00:45:45,770
them were actually doing any client

1143
00:45:42,620 --> 00:45:47,870
validation so suddenly you<font color="#CCCCCC"> have a server</font>

1144
00:45:45,770 --> 00:45:49,910
no<font color="#CCCCCC"> Twitter</font><font color="#E5E5E5"> is pretty smart Facebook's</font>

1145
00:45:47,870 --> 00:45:51,859
pretty smart they know how to know how

1146
00:45:49,910 --> 00:45:54,529
to implement SSL but your<font color="#E5E5E5"> third-party</font>

1147
00:45:51,860 --> 00:45:58,310
developers they weren't validating that

1148
00:45:54,530 --> 00:46:00,860
arm cert and suddenly<font color="#CCCCCC"> now you can very</font>

1149
00:45:58,310 --> 00:46:02,720
easily do those interception attacks

1150
00:46:00,860 --> 00:46:06,110
intermediation attacks against<font color="#CCCCCC"> the</font>

1151
00:46:02,720 --> 00:46:08,930
against the devices and i want to say

1152
00:46:06,110 --> 00:46:10,730
there was there was a very good on paper

1153
00:46:08,930 --> 00:46:12,890
that<font color="#E5E5E5"> was released within the last six or</font>

1154
00:46:10,730 --> 00:46:14,750
so months something like the the most

1155
00:46:12,890 --> 00:46:17,000
dangerous code in the world that<font color="#CCCCCC"> was</font>

1156
00:46:14,750 --> 00:46:19,670
basically on this<font color="#E5E5E5"> point pointing out how</font>

1157
00:46:17,000 --> 00:46:21,380
many web app or not web applications how

1158
00:46:19,670 --> 00:46:24,590
many<font color="#E5E5E5"> client-side what applications had</font>

1159
00:46:21,380 --> 00:46:26,690
used tools like curl or other<font color="#E5E5E5"> on</font><font color="#CCCCCC"> ssl</font>

1160
00:46:24,590 --> 00:46:29,330
connectors and had never bothered to

1161
00:46:26,690 --> 00:46:31,220
validate that ssl serve so it's the idea

1162
00:46:29,330 --> 00:46:33,290
that we have browsers that<font color="#CCCCCC"> i was kind of</font>

1163
00:46:31,220 --> 00:46:35,990
talking about<font color="#E5E5E5"> Mozilla Chrome Opera</font>

1164
00:46:33,290 --> 00:46:38,120
Safari all these that are we can say

1165
00:46:35,990 --> 00:46:40,040
rather secure but we're also starting<font color="#E5E5E5"> to</font>

1166
00:46:38,120 --> 00:46:42,470
get many browsers or kind<font color="#E5E5E5"> of pseudo</font>

1167
00:46:40,040 --> 00:46:44,300
browsers inside these native or the

1168
00:46:42,470 --> 00:46:45,830
inside these native apps and mobile apps

1169
00:46:44,300 --> 00:46:47,450
and that's where we're going to see

1170
00:46:45,830 --> 00:46:49,759
what's real interesting do they actually

1171
00:46:47,450 --> 00:46:51,680
implement<font color="#E5E5E5"> same-origin policy correctly</font>

1172
00:46:49,760 --> 00:46:53,240
how are they implementing things like

1173
00:46:51,680 --> 00:46:55,399
the iframe sandbox if they're<font color="#E5E5E5"> trying to</font>

1174
00:46:53,240 --> 00:46:57,799
use it are you even paying attention to

1175
00:46:55,400 --> 00:47:00,730
those<font color="#CCCCCC"> ssl service and</font><font color="#E5E5E5"> that that's that's</font>

1176
00:46:57,800 --> 00:47:03,970
<font color="#E5E5E5">my long rant for your question thank you</font>

1177
00:47:00,730 --> 00:47:03,970
question in the<font color="#CCCCCC"> back</font>

1178
00:47:12,760 --> 00:47:18,580
so the question<font color="#CCCCCC"> is can it be canis I be</font>

1179
00:47:16,720 --> 00:47:21,299
a debate like<font color="#E5E5E5"> a DA compliant or can it</font>

1180
00:47:18,580 --> 00:47:23,560
be secure for people with disabilities

1181
00:47:21,300 --> 00:47:25,600
my<font color="#CCCCCC"> shorting are</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> good they</font><font color="#E5E5E5"> say</font><font color="#CCCCCC"> yes</font>

1182
00:47:23,560 --> 00:47:28,720
because that site doesn't have to be any

1183
00:47:25,600 --> 00:47:31,360
different than<font color="#CCCCCC"> any other and not being</font>

1184
00:47:28,720 --> 00:47:33,640
an expert<font color="#CCCCCC"> I'll say most of that is an</font>

1185
00:47:31,360 --> 00:47:36,280
<font color="#E5E5E5">implementation in the client in terms of</font>

1186
00:47:33,640 --> 00:47:38,740
presentation of the<font color="#E5E5E5"> the text the content</font>

1187
00:47:36,280 --> 00:47:42,430
can be annotated with<font color="#E5E5E5"> Ruby scripts can</font>

1188
00:47:38,740 --> 00:47:44,350
be annotated with audio finding things

1189
00:47:42,430 --> 00:47:45,730
like this so the security doesn't

1190
00:47:44,350 --> 00:47:48,250
necessarily the security doesn't really

1191
00:47:45,730 --> 00:47:49,900
come from<font color="#E5E5E5"> the client except in terms of</font>

1192
00:47:48,250 --> 00:47:51,100
are you<font color="#E5E5E5"> storing data like are you</font>

1193
00:47:49,900 --> 00:47:53,050
storing that plaintext password in the

1194
00:47:51,100 --> 00:47:54,910
web storage API security is going to

1195
00:47:53,050 --> 00:47:56,680
come<font color="#CCCCCC"> from the how you're dealing with</font>

1196
00:47:54,910 --> 00:47:59,799
<font color="#E5E5E5">the skirt or with data coming to and</font>

1197
00:47:56,680 --> 00:48:01,330
from the server so that's an in expert

1198
00:47:59,800 --> 00:48:04,960
answer but the<font color="#E5E5E5"> short answer is really</font>

1199
00:48:01,330 --> 00:48:08,190
going to<font color="#E5E5E5"> guess I think we</font><font color="#CCCCCC"> have maybe a</font>

1200
00:48:04,960 --> 00:48:08,190
<font color="#E5E5E5">minute left any more questions yeah</font>

1201
00:48:15,300 --> 00:48:17,360
Oh

1202
00:48:22,990 --> 00:48:28,540
right so long so so the easy step you

1203
00:48:25,750 --> 00:48:30,970
can reproduce install any app set you're

1204
00:48:28,540 --> 00:48:33,400
on<font color="#CCCCCC"> i have an iphone</font><font color="#E5E5E5"> so set your set the</font>

1205
00:48:30,970 --> 00:48:36,100
proxy to<font color="#CCCCCC"> let point2 like zed attack</font>

1206
00:48:33,400 --> 00:48:37,420
proxy or something and just<font color="#CCCCCC"> and just do</font>

1207
00:48:36,100 --> 00:48:38,940
the traffic normally through that and

1208
00:48:37,420 --> 00:48:41,680
you'll be able to see does that app

1209
00:48:38,940 --> 00:48:43,780
reject if it rejects it then and it's

1210
00:48:41,680 --> 00:48:44,680
going<font color="#E5E5E5"> over</font><font color="#CCCCCC"> SSL then very likely it's</font>

1211
00:48:43,780 --> 00:48:46,869
rejecting<font color="#E5E5E5"> it because it's actually</font>

1212
00:48:44,680 --> 00:48:48,509
verifying the cert but just if you just

1213
00:48:46,869 --> 00:48:50,560
start to see the traffic<font color="#E5E5E5"> and you can</font>

1214
00:48:48,510 --> 00:48:52,360
interact with the traffic like you could

1215
00:48:50,560 --> 00:48:53,950
with a<font color="#E5E5E5"> normal browser and the other web</font>

1216
00:48:52,360 --> 00:48:56,320
application then<font color="#CCCCCC"> is</font><font color="#E5E5E5"> pretty much</font>

1217
00:48:53,950 --> 00:48:59,618
guaranteed it's not validating the cert

1218
00:48:56,320 --> 00:49:01,990
nor also importantly do you get any type

1219
00:48:59,619 --> 00:49:04,990
of indicator that says hey you're trying

1220
00:49:01,990 --> 00:49:06,729
to connect to food bar no this is or the

1221
00:49:04,990 --> 00:49:08,529
sir is invalid or anything like that or

1222
00:49:06,730 --> 00:49:10,740
even<font color="#CCCCCC"> the</font><font color="#E5E5E5"> sort of expire you don't get</font>

1223
00:49:08,530 --> 00:49:10,740
<font color="#E5E5E5">this</font>

1224
00:49:18,500 --> 00:49:24,500
yeah yeah yeah the point is yeah right

1225
00:49:22,130 --> 00:49:26,030
the point is is that right you don't

1226
00:49:24,500 --> 00:49:27,830
<font color="#E5E5E5">even have to get to the point of SSL</font>

1227
00:49:26,030 --> 00:49:30,800
strip or anything<font color="#E5E5E5"> too complex like that</font>

1228
00:49:27,830 --> 00:49:31,850
you<font color="#E5E5E5"> just need to be able to say if</font>

1229
00:49:30,800 --> 00:49:34,760
you're trying<font color="#CCCCCC"> to set up an attack</font>

1230
00:49:31,850 --> 00:49:37,069
basically a DNS spoof point them to your

1231
00:49:34,760 --> 00:49:39,140
web<font color="#CCCCCC"> server and give up whatever is no</font>

1232
00:49:37,070 --> 00:49:40,550
sort you want and the app knows no

1233
00:49:39,140 --> 00:49:42,670
difference<font color="#E5E5E5"> because this didn't validate</font>

1234
00:49:40,550 --> 00:49:42,670
it

1235
00:49:49,519 --> 00:49:53,328
yeah so so so the idea so that the

1236
00:49:52,159 --> 00:49:55,549
countermeasures the countermeasures are

1237
00:49:53,329 --> 00:49:58,249
very simple<font color="#E5E5E5"> it's in something like arm</font>

1238
00:49:55,549 --> 00:50:00,559
and curl if you use<font color="#CCCCCC"> like lid curl there</font>

1239
00:49:58,249 --> 00:50:03,379
<font color="#CCCCCC">is verify here</font><font color="#E5E5E5"> I think or verify host</font>

1240
00:50:00,559 --> 00:50:05,449
and you set it a boolean and Don<font color="#E5E5E5"> or set</font>

1241
00:50:03,380 --> 00:50:08,539
the value properly and you're done it's

1242
00:50:05,449 --> 00:50:11,179
that simple<font color="#E5E5E5"> and</font><font color="#CCCCCC"> I got the I got the I</font>

1243
00:50:08,539 --> 00:50:13,069
got the most awesome hint from rather

1244
00:50:11,179 --> 00:50:15,679
than the 20 minute 10 minute five minute

1245
00:50:13,069 --> 00:50:17,689
mark I got the STFU hen so it's time for

1246
00:50:15,679 --> 00:50:19,099
me to golf the stage I let the next

1247
00:50:17,689 --> 00:50:22,178
person come up I thank you again I'll

1248
00:50:19,099 --> 00:50:22,179
boy answering questions later

