1
00:00:24,320 --> 00:00:30,779
<font color="#CCCCCC">alright welcome</font><font color="#E5E5E5"> everybody thank you for</font>

2
00:00:27,869 --> 00:00:33,920
coming out today um I have the highly

3
00:00:30,779 --> 00:00:36,050
desired after<font color="#E5E5E5"> lunch slot so I'll try</font><font color="#CCCCCC"> to</font>

4
00:00:33,920 --> 00:00:38,400
keep you guys awake as much as possible

5
00:00:36,050 --> 00:00:41,280
so first order to start off with a

6
00:00:38,400 --> 00:00:43,710
little little survey how many pen

7
00:00:41,280 --> 00:00:48,090
testers are in here today raise your

8
00:00:43,710 --> 00:00:51,899
hand<font color="#CCCCCC"> okay good number network security</font>

9
00:00:48,090 --> 00:00:55,440
background raise your hand application

10
00:00:51,899 --> 00:00:58,770
security<font color="#E5E5E5"> okay now are you now or have</font>

11
00:00:55,440 --> 00:01:03,059
you ever been a developer<font color="#CCCCCC"> all right</font>

12
00:00:58,770 --> 00:01:05,610
<font color="#E5E5E5">that's good to know what about managers</font>

13
00:01:03,059 --> 00:01:07,259
managerial roles got a few all right

14
00:01:05,610 --> 00:01:11,070
well the<font color="#CCCCCC"> good news is that</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> is going</font>

15
00:01:07,259 --> 00:01:13,140
<font color="#E5E5E5">to apply to all of you so more more</font>

16
00:01:11,070 --> 00:01:14,429
sensitive developers but really it

17
00:01:13,140 --> 00:01:17,009
applies across the board because it's

18
00:01:14,430 --> 00:01:19,770
about how to change the<font color="#E5E5E5"> behavior of the</font>

19
00:01:17,009 --> 00:01:21,060
development organization so yesterday<font color="#CCCCCC"> we</font>

20
00:01:19,770 --> 00:01:24,420
heard about you know a lot of the<font color="#E5E5E5"> new</font>

21
00:01:21,060 --> 00:01:26,039
security<font color="#E5E5E5"> features of html5 and some some</font>

22
00:01:24,420 --> 00:01:27,209
novel attacks on<font color="#E5E5E5"> that today we're going</font>

23
00:01:26,039 --> 00:01:29,819
<font color="#CCCCCC">to focus a little bit more on the</font>

24
00:01:27,209 --> 00:01:31,679
<font color="#CCCCCC">development side of things how you as a</font>

25
00:01:29,819 --> 00:01:33,660
developer or as a development

26
00:01:31,679 --> 00:01:35,490
organization can really make a

27
00:01:33,660 --> 00:01:37,979
difference in the quality of the

28
00:01:35,490 --> 00:01:41,280
software<font color="#E5E5E5"> that you produce and and how</font>

29
00:01:37,979 --> 00:01:44,160
that affects security so here's a quick

30
00:01:41,280 --> 00:01:47,069
overview and I'm going<font color="#E5E5E5"> to just jump</font>

31
00:01:44,160 --> 00:01:49,140
right into the introduction and then

32
00:01:47,069 --> 00:01:50,130
cover some software security basics to

33
00:01:49,140 --> 00:01:52,229
make sure everybody's on the same page

34
00:01:50,130 --> 00:01:54,179
and we're going to<font color="#E5E5E5"> talk about some</font>

35
00:01:52,229 --> 00:01:55,709
common application vulnerabilities now

36
00:01:54,179 --> 00:01:57,599
hopefully none of these are<font color="#E5E5E5"> going to be</font>

37
00:01:55,709 --> 00:02:00,270
news to any of you what's what's

38
00:01:57,599 --> 00:02:03,060
important here is to focus on how we fix

39
00:02:00,270 --> 00:02:05,910
<font color="#E5E5E5">that what what can we do to actually not</font>

40
00:02:03,060 --> 00:02:07,289
just address the to kill the exploits

41
00:02:05,910 --> 00:02:08,549
but the actual root cause the

42
00:02:07,289 --> 00:02:10,919
vulnerabilities that lead to these

43
00:02:08,550 --> 00:02:12,870
exploits and we'll show some code

44
00:02:10,919 --> 00:02:14,760
examples and then<font color="#CCCCCC"> we'll</font><font color="#E5E5E5"> take a step back</font>

45
00:02:12,870 --> 00:02:16,380
and talk about<font color="#E5E5E5"> how can we build this</font>

46
00:02:14,760 --> 00:02:18,899
into the software development lifecycle

47
00:02:16,380 --> 00:02:22,530
at the organizational level at<font color="#CCCCCC"> the</font>

48
00:02:18,900 --> 00:02:25,380
process<font color="#E5E5E5"> level so just a few words about</font>

49
00:02:22,530 --> 00:02:28,370
digital I work<font color="#E5E5E5"> for four digital which is</font>

50
00:02:25,380 --> 00:02:31,260
<font color="#E5E5E5">a software consultant software of</font>

51
00:02:28,370 --> 00:02:33,270
security consulting firm we were founded

52
00:02:31,260 --> 00:02:34,590
in nineteen<font color="#CCCCCC"> ninety-two which</font><font color="#E5E5E5"> is</font>

53
00:02:33,270 --> 00:02:37,500
a good while ago in this<font color="#E5E5E5"> industry</font>

54
00:02:34,590 --> 00:02:39,210
certainly and we started on the<font color="#E5E5E5"> software</font>

55
00:02:37,500 --> 00:02:42,830
quality side and we've now moved into

56
00:02:39,210 --> 00:02:44,850
software security and almost you know

57
00:02:42,830 --> 00:02:46,350
ninety-five percent of what<font color="#CCCCCC"> we do is</font>

58
00:02:44,850 --> 00:02:47,850
application<font color="#E5E5E5"> security</font><font color="#CCCCCC"> and software</font>

59
00:02:46,350 --> 00:02:50,820
security whatever you<font color="#E5E5E5"> want to call it</font>

60
00:02:47,850 --> 00:02:53,040
and we've written a lot of books<font color="#E5E5E5"> yadda</font>

61
00:02:50,820 --> 00:02:54,720
<font color="#E5E5E5">yadda yadda not me personally all the</font>

62
00:02:53,040 --> 00:02:58,109
other sharp guys<font color="#E5E5E5"> it's digital like</font><font color="#CCCCCC"> a</font>

63
00:02:54,720 --> 00:03:01,200
like<font color="#E5E5E5"> Gary and everybody else so they're</font>

64
00:02:58,110 --> 00:03:02,790
they're doing<font color="#E5E5E5"> great there so and I know</font>

65
00:03:01,200 --> 00:03:05,910
there's a couple<font color="#E5E5E5"> of former or current</font>

66
00:03:02,790 --> 00:03:09,120
developers in here so no offense but why

67
00:03:05,910 --> 00:03:12,150
are most programmers bad at security

68
00:03:09,120 --> 00:03:15,030
well it's usually it's it's simply not

69
00:03:12,150 --> 00:03:18,390
part of their job description they are

70
00:03:15,030 --> 00:03:19,770
not there they're focused on very

71
00:03:18,390 --> 00:03:21,899
different<font color="#E5E5E5"> things than security</font>

72
00:03:19,770 --> 00:03:24,450
professionals they're usually under time

73
00:03:21,900 --> 00:03:26,720
pressure they're focused on adding new

74
00:03:24,450 --> 00:03:29,519
functionality adding new features and

75
00:03:26,720 --> 00:03:32,640
they're not the incentives are not there

76
00:03:29,520 --> 00:03:36,750
to<font color="#CCCCCC"> really help them be successful at</font>

77
00:03:32,640 --> 00:03:39,989
creating reliable secure software a lot

78
00:03:36,750 --> 00:03:41,220
of<font color="#E5E5E5"> times design of a system and</font>

79
00:03:39,990 --> 00:03:44,250
development of a system is<font color="#E5E5E5"> very much</font>

80
00:03:41,220 --> 00:03:46,890
focused<font color="#E5E5E5"> on the positive path the if</font>

81
00:03:44,250 --> 00:03:49,170
statements not the else statements what

82
00:03:46,890 --> 00:03:51,000
is the expected behavior and a lot<font color="#CCCCCC"> of</font>

83
00:03:49,170 --> 00:03:52,829
times when I tell a programmer<font color="#E5E5E5"> okay well</font>

84
00:03:51,000 --> 00:03:54,780
you've got this vulnerability here and

85
00:03:52,830 --> 00:03:56,640
you<font color="#CCCCCC"> know an attacker could could type</font>

86
00:03:54,780 --> 00:03:58,440
something in here well our users

87
00:03:56,640 --> 00:04:00,299
wouldn't do that that<font color="#E5E5E5"> that's not how</font>

88
00:03:58,440 --> 00:04:02,220
it's designed to be<font color="#CCCCCC"> used so there's a</font>

89
00:04:00,300 --> 00:04:05,370
lot of focus on what the expected

90
00:04:02,220 --> 00:04:08,810
<font color="#E5E5E5">behavior is versus what some alternate</font>

91
00:04:05,370 --> 00:04:11,160
ways are of abusing the system and

92
00:04:08,810 --> 00:04:13,470
really the bottom line is<font color="#CCCCCC"> that input</font>

93
00:04:11,160 --> 00:04:17,100
validation is much harder than<font color="#E5E5E5"> it looks</font>

94
00:04:13,470 --> 00:04:18,480
on the<font color="#E5E5E5"> surface especially doing it the</font>

95
00:04:17,100 --> 00:04:22,500
correct way which is<font color="#CCCCCC"> white</font><font color="#E5E5E5"> listing and</font>

96
00:04:18,480 --> 00:04:24,990
<font color="#E5E5E5">I'll talk some more about that so</font>

97
00:04:22,500 --> 00:04:27,960
basically what we have right<font color="#CCCCCC"> now is that</font>

98
00:04:24,990 --> 00:04:31,650
most of what qualifies as IT security

99
00:04:27,960 --> 00:04:33,900
was actually bolted on way late and

100
00:04:31,650 --> 00:04:36,539
development cycle it's it's either<font color="#E5E5E5"> its</font>

101
00:04:33,900 --> 00:04:38,039
<font color="#E5E5E5">pen testing just before go live it's you</font>

102
00:04:36,540 --> 00:04:39,690
know<font color="#E5E5E5"> slapping a firewall in front of it</font>

103
00:04:38,040 --> 00:04:40,980
slapping an<font color="#CCCCCC"> IDs in front of it just to</font>

104
00:04:39,690 --> 00:04:43,650
see if you can catch<font color="#E5E5E5"> some</font><font color="#CCCCCC"> of the things</font>

105
00:04:40,980 --> 00:04:46,950
but it<font color="#E5E5E5"> really doesn't address the</font>

106
00:04:43,650 --> 00:04:47,310
underlying problem so what you end up

107
00:04:46,950 --> 00:04:48,750
with

108
00:04:47,310 --> 00:04:51,330
you have short term protection that's

109
00:04:48,750 --> 00:04:53,040
sort of limited in scope so a better

110
00:04:51,330 --> 00:04:55,289
approach is to really think about

111
00:04:53,040 --> 00:04:58,260
security from the<font color="#CCCCCC"> beginning to build it</font>

112
00:04:55,290 --> 00:05:00,330
into your development lifecycle so you

113
00:04:58,260 --> 00:05:02,010
start<font color="#CCCCCC"> with security requirements you ask</font>

114
00:05:00,330 --> 00:05:04,050
the right questions during the

115
00:05:02,010 --> 00:05:06,570
<font color="#E5E5E5">requirements gathering phase you ask</font>

116
00:05:04,050 --> 00:05:09,660
business owners what is this software

117
00:05:06,570 --> 00:05:11,130
designed to do what what are the

118
00:05:09,660 --> 00:05:14,130
security<font color="#E5E5E5"> implications of that are we</font>

119
00:05:11,130 --> 00:05:16,110
<font color="#E5E5E5">storing any sensitive data and all of</font>

120
00:05:14,130 --> 00:05:17,670
those types of things<font color="#E5E5E5"> and then you bake</font>

121
00:05:16,110 --> 00:05:19,290
that into your design into your

122
00:05:17,670 --> 00:05:21,720
architecture and into your code

123
00:05:19,290 --> 00:05:25,410
eventually and then of course<font color="#E5E5E5"> you test</font>

124
00:05:21,720 --> 00:05:27,000
it as you would any requirement and so

125
00:05:25,410 --> 00:05:31,110
what you what you<font color="#E5E5E5"> get with this approach</font>

126
00:05:27,000 --> 00:05:32,520
is robust long-term security because one

127
00:05:31,110 --> 00:05:33,720
of the<font color="#CCCCCC"> things that</font><font color="#E5E5E5"> you know a lot of</font>

128
00:05:32,520 --> 00:05:35,849
<font color="#E5E5E5">times developers don't</font><font color="#CCCCCC"> think about</font><font color="#E5E5E5"> it</font>

129
00:05:33,720 --> 00:05:37,800
this way but you actually have<font color="#E5E5E5"> a lot of</font>

130
00:05:35,850 --> 00:05:39,900
power<font color="#E5E5E5"> because you as the developer are</font>

131
00:05:37,800 --> 00:05:42,390
creating the rules of<font color="#E5E5E5"> engagement that</font>

132
00:05:39,900 --> 00:05:44,820
any attacker has to play by if you

133
00:05:42,390 --> 00:05:47,010
design the lockout mechanism and you do

134
00:05:44,820 --> 00:05:48,480
it the correct way the attacker what

135
00:05:47,010 --> 00:05:50,640
won't be able to get<font color="#CCCCCC"> around it they're</font>

136
00:05:48,480 --> 00:05:53,460
going<font color="#E5E5E5"> to have to play by your rules to</font>

137
00:05:50,640 --> 00:05:57,240
get into your<font color="#CCCCCC"> system so there's actually</font>

138
00:05:53,460 --> 00:06:02,969
quite a bit of power that<font color="#E5E5E5"> the developer</font>

139
00:05:57,240 --> 00:06:05,430
<font color="#CCCCCC">has these are the seven areas where</font>

140
00:06:02,970 --> 00:06:08,160
things most<font color="#E5E5E5"> likely will go wrong in any</font>

141
00:06:05,430 --> 00:06:09,780
<font color="#E5E5E5">particular application I've already</font>

142
00:06:08,160 --> 00:06:11,880
mentioned input validation there are

143
00:06:09,780 --> 00:06:16,409
multiple different ways<font color="#E5E5E5"> of representing</font>

144
00:06:11,880 --> 00:06:18,870
input in in any context think about URL

145
00:06:16,410 --> 00:06:20,660
encoding<font color="#E5E5E5"> HTML entity encoding all these</font>

146
00:06:18,870 --> 00:06:23,100
different ways of representing data

147
00:06:20,660 --> 00:06:26,700
<font color="#E5E5E5">Unicode all these different things so</font>

148
00:06:23,100 --> 00:06:29,610
<font color="#E5E5E5">API abuse is another one so having you</font>

149
00:06:26,700 --> 00:06:31,409
know this again comes back<font color="#E5E5E5"> to our users</font>

150
00:06:29,610 --> 00:06:33,090
wouldn't do that api's are often

151
00:06:31,410 --> 00:06:35,820
designed for<font color="#E5E5E5"> one thing but they can also</font>

152
00:06:33,090 --> 00:06:37,500
be<font color="#E5E5E5"> called by by other third parties by</font>

153
00:06:35,820 --> 00:06:39,240
other people that they weren't designed

154
00:06:37,500 --> 00:06:43,200
to be called by and used in different

155
00:06:39,240 --> 00:06:45,150
ways<font color="#CCCCCC"> that are unexpected security</font>

156
00:06:43,200 --> 00:06:48,150
features can actually be a detriment if

157
00:06:45,150 --> 00:06:50,789
they're not implemented correctly and of

158
00:06:48,150 --> 00:06:53,070
course<font color="#E5E5E5"> there's time and state race</font>

159
00:06:50,790 --> 00:06:56,730
conditions temp files that are created

160
00:06:53,070 --> 00:06:58,860
that can lead to issues we have standard

161
00:06:56,730 --> 00:07:00,600
error handling can either be too verbose

162
00:06:58,860 --> 00:07:02,850
or

163
00:07:00,600 --> 00:07:05,760
it can ignore some some failures

164
00:07:02,850 --> 00:07:07,620
silently that just you know are not that

165
00:07:05,760 --> 00:07:12,210
leads to unexpected behavior down the

166
00:07:07,620 --> 00:07:14,880
road standard code quality issues memory

167
00:07:12,210 --> 00:07:17,159
leaks things like that and encapsulation

168
00:07:14,880 --> 00:07:19,890
having strong boundaries between your

169
00:07:17,160 --> 00:07:21,690
data inside the application in the case

170
00:07:19,890 --> 00:07:23,640
of object-oriented programming you know

171
00:07:21,690 --> 00:07:28,620
having the correct private variables and

172
00:07:23,640 --> 00:07:31,590
so forth so here's<font color="#CCCCCC"> just a quick recent</font>

173
00:07:28,620 --> 00:07:34,590
example<font color="#E5E5E5"> of a pis and this has become</font>

174
00:07:31,590 --> 00:07:37,049
<font color="#E5E5E5">more of an issue as web services have</font>

175
00:07:34,590 --> 00:07:39,479
become<font color="#E5E5E5"> more popular because as we heard</font>

176
00:07:37,050 --> 00:07:41,160
yesterday you know most<font color="#CCCCCC"> Twitter Facebook</font>

177
00:07:39,480 --> 00:07:44,400
<font color="#E5E5E5">they're all accessible both via the</font>

178
00:07:41,160 --> 00:07:46,140
front<font color="#E5E5E5"> end and via the API and a lot</font><font color="#CCCCCC"> of</font>

179
00:07:44,400 --> 00:07:47,489
times if those two are not<font color="#E5E5E5"> in sync if</font>

180
00:07:46,140 --> 00:07:49,169
the security mechanisms are not

181
00:07:47,490 --> 00:07:51,660
consistently enforced across those two

182
00:07:49,170 --> 00:07:54,480
you can end<font color="#E5E5E5"> up with issues that an</font>

183
00:07:51,660 --> 00:07:56,760
attacker<font color="#E5E5E5"> can abuse so I know</font><font color="#CCCCCC"> a couple of</font>

184
00:07:54,480 --> 00:07:59,610
<font color="#CCCCCC">years ago yahoo had an</font><font color="#E5E5E5"> issue where they</font>

185
00:07:56,760 --> 00:08:01,440
were not enforcing a password lock out

186
00:07:59,610 --> 00:08:02,700
on their API so if you went to<font color="#CCCCCC"> the yahoo</font>

187
00:08:01,440 --> 00:08:03,630
front page and you tried a whole bunch

188
00:08:02,700 --> 00:08:05,789
of<font color="#E5E5E5"> different passwords you would get</font>

189
00:08:03,630 --> 00:08:08,550
locked out after a few attempts but if

190
00:08:05,790 --> 00:08:10,380
you did<font color="#E5E5E5"> the same thing via their API you</font>

191
00:08:08,550 --> 00:08:12,360
could bang away as long as you wanted to

192
00:08:10,380 --> 00:08:17,300
and<font color="#E5E5E5"> people were actively exploiting that</font>

193
00:08:12,360 --> 00:08:17,300
to crack a week yahoo account passwords

194
00:08:17,570 --> 00:08:21,840
so now we're<font color="#E5E5E5"> going to dive into the</font>

195
00:08:20,130 --> 00:08:23,909
vulnerabilities and again these are all

196
00:08:21,840 --> 00:08:26,580
well known vulnerabilities but the focus

197
00:08:23,910 --> 00:08:27,990
<font color="#E5E5E5">here is on on fixing them and</font><font color="#CCCCCC"> I'll</font><font color="#E5E5E5"> just</font>

198
00:08:26,580 --> 00:08:29,039
give a brief description<font color="#CCCCCC"> of each of them</font>

199
00:08:27,990 --> 00:08:33,590
to make sure<font color="#E5E5E5"> everybody's on the same</font>

200
00:08:29,040 --> 00:08:36,260
page and a lot of this<font color="#E5E5E5"> material is um</font>

201
00:08:33,590 --> 00:08:38,190
<font color="#E5E5E5">owasp is a great resource for anything</font>

202
00:08:36,260 --> 00:08:40,289
application security software security

203
00:08:38,190 --> 00:08:44,039
related and they have a lot of<font color="#E5E5E5"> good</font>

204
00:08:40,289 --> 00:08:47,780
resources there so we're going to talk

205
00:08:44,039 --> 00:08:50,370
about unvalidated input injection flaws

206
00:08:47,780 --> 00:08:52,230
cross-site scripting cross-site request

207
00:08:50,370 --> 00:08:55,920
forgery what the difference is between

208
00:08:52,230 --> 00:09:01,980
those two improper error handling broken

209
00:08:55,920 --> 00:09:06,630
access control and insecure storage so

210
00:09:01,980 --> 00:09:08,130
can anybody tell me just shout it<font color="#E5E5E5"> out is</font>

211
00:09:06,630 --> 00:09:09,970
does this look like a good<font color="#E5E5E5"> idea does</font>

212
00:09:08,130 --> 00:09:11,529
this look like a good way it can ever

213
00:09:09,970 --> 00:09:13,930
everybody can read<font color="#E5E5E5"> that does this look</font>

214
00:09:11,529 --> 00:09:16,120
like a good way of taking an input

215
00:09:13,930 --> 00:09:22,899
parameter and if not what could be the

216
00:09:16,120 --> 00:09:26,560
possible issues here good exactly so

217
00:09:22,899 --> 00:09:29,050
that's exactly one<font color="#CCCCCC"> of my examples an</font>

218
00:09:26,560 --> 00:09:30,899
attacker if you're not validating<font color="#E5E5E5"> this</font>

219
00:09:29,050 --> 00:09:33,849
correctly they can actually<font color="#E5E5E5"> access</font>

220
00:09:30,899 --> 00:09:35,680
internal hosts on your network right

221
00:09:33,850 --> 00:09:38,350
through through the<font color="#E5E5E5"> front with the</font>

222
00:09:35,680 --> 00:09:40,449
public-facing web server potentially or

223
00:09:38,350 --> 00:09:42,730
they can use it to browse of files that

224
00:09:40,449 --> 00:09:45,490
<font color="#E5E5E5">are present on on the local server where</font>

225
00:09:42,730 --> 00:09:46,779
that application is hosted so it's very

226
00:09:45,490 --> 00:09:49,329
important to think about what the

227
00:09:46,779 --> 00:09:52,689
intended uses of that code and to

228
00:09:49,329 --> 00:09:54,758
validate that input accordingly so<font color="#CCCCCC"> thank</font>

229
00:09:52,689 --> 00:10:00,819
you for that it was almost like I

230
00:09:54,759 --> 00:10:04,029
planted you in the audience so so what

231
00:10:00,819 --> 00:10:06,490
do we do about<font color="#E5E5E5"> it well actually first</font>

232
00:10:04,029 --> 00:10:08,889
let me take a step back first we have to

233
00:10:06,490 --> 00:10:10,569
realize that<font color="#E5E5E5"> you</font><font color="#CCCCCC"> know and most of you</font>

234
00:10:08,889 --> 00:10:13,240
I'm sure already know this but the

235
00:10:10,569 --> 00:10:15,370
attacker can tamper with any part of the

236
00:10:13,240 --> 00:10:17,379
query string talking about the URL

237
00:10:15,370 --> 00:10:18,850
itself the query string<font color="#E5E5E5"> anything that's</font>

238
00:10:17,379 --> 00:10:21,970
part<font color="#CCCCCC"> of their initial request coming in</font>

239
00:10:18,850 --> 00:10:24,279
headers cookies it should be considered

240
00:10:21,970 --> 00:10:26,079
tainted untrusted data and of<font color="#CCCCCC"> course</font>

241
00:10:24,279 --> 00:10:28,350
there's a whole long list of attacks

242
00:10:26,079 --> 00:10:31,120
<font color="#E5E5E5">that rely on on poor input validation</font>

243
00:10:28,350 --> 00:10:34,059
but usually<font color="#CCCCCC"> it comes down to two things</font>

244
00:10:31,120 --> 00:10:37,050
either filtering is implemented as<font color="#E5E5E5"> a</font>

245
00:10:34,059 --> 00:10:39,279
blacklist or The Improv validation and

246
00:10:37,050 --> 00:10:42,189
believe<font color="#E5E5E5"> it or not we</font><font color="#CCCCCC"> still see this all</font>

247
00:10:39,279 --> 00:10:43,870
the time it sounds so obvious but<font color="#CCCCCC"> a lot</font>

248
00:10:42,189 --> 00:10:45,730
<font color="#CCCCCC">of times improv validation is either</font>

249
00:10:43,870 --> 00:10:47,829
only performed at<font color="#CCCCCC"> the client or it's</font>

250
00:10:45,730 --> 00:10:49,149
inconsistent it's it's not the same

251
00:10:47,829 --> 00:10:52,209
validation is not performed on the

252
00:10:49,149 --> 00:10:54,430
server as on the client and<font color="#CCCCCC"> you know</font>

253
00:10:52,209 --> 00:10:56,768
some<font color="#CCCCCC"> people still think that a</font><font color="#E5E5E5"> drop-down</font>

254
00:10:54,430 --> 00:10:58,809
or a bit of javascript is a good way<font color="#CCCCCC"> to</font>

255
00:10:56,769 --> 00:11:01,000
<font color="#E5E5E5">perform input validation which is great</font>

256
00:10:58,809 --> 00:11:03,279
from a UI perspective it really<font color="#CCCCCC"> makes it</font>

257
00:11:01,000 --> 00:11:07,269
easier to use but it has no security

258
00:11:03,279 --> 00:11:09,790
value so this<font color="#E5E5E5"> is a bit of a dated</font>

259
00:11:07,269 --> 00:11:11,800
example from 09 but<font color="#E5E5E5"> I just love it so I</font>

260
00:11:09,790 --> 00:11:14,110
wanted to point it out real quick Time

261
00:11:11,800 --> 00:11:16,199
Warner Cable had these neat little boxes

262
00:11:14,110 --> 00:11:19,209
that they would give all their customers

263
00:11:16,199 --> 00:11:21,639
65,000 of them and it had it used

264
00:11:19,209 --> 00:11:23,319
<font color="#E5E5E5">JavaScript to hide admin functionality</font>

265
00:11:21,639 --> 00:11:23,920
turned out that if you just disable

266
00:11:23,319 --> 00:11:26,079
<font color="#E5E5E5">JavaScript</font>

267
00:11:23,920 --> 00:11:28,060
your browser you could then<font color="#E5E5E5"> see the</font>

268
00:11:26,079 --> 00:11:30,279
admin functionality without any password

269
00:11:28,060 --> 00:11:34,119
and even<font color="#E5E5E5"> better you could download the</font>

270
00:11:30,279 --> 00:11:37,480
configuration file for the router but

271
00:11:34,120 --> 00:11:40,899
<font color="#E5E5E5">wait there's more it had the plaintext</font>

272
00:11:37,480 --> 00:11:43,449
admin password and username and password

273
00:11:40,899 --> 00:11:45,459
in it and it was the same<font color="#E5E5E5"> hard-coded</font>

274
00:11:43,449 --> 00:11:48,069
across all of<font color="#CCCCCC"> the devices they deployed</font>

275
00:11:45,459 --> 00:11:49,540
so um I mean it's and this is I<font color="#E5E5E5"> mean</font>

276
00:11:48,070 --> 00:11:50,709
this is out this was out there<font color="#E5E5E5"> just a</font>

277
00:11:49,540 --> 00:11:52,959
few<font color="#CCCCCC"> years</font><font color="#E5E5E5"> ago and I'm sure it still is</font>

278
00:11:50,709 --> 00:11:57,760
<font color="#CCCCCC">today so we keep seeing the same</font>

279
00:11:52,959 --> 00:12:00,880
mistakes over and over again and<font color="#CCCCCC"> yeah</font>

280
00:11:57,760 --> 00:12:08,199
here's a little<font color="#E5E5E5"> little description of</font>

281
00:12:00,880 --> 00:12:10,149
what happened<font color="#E5E5E5"> there</font><font color="#CCCCCC"> okay so what can</font><font color="#E5E5E5"> we</font>

282
00:12:08,199 --> 00:12:12,639
do<font color="#CCCCCC"> about</font><font color="#E5E5E5"> it as as a developer as a</font>

283
00:12:10,149 --> 00:12:14,680
development organization what can we<font color="#CCCCCC"> do</font>

284
00:12:12,639 --> 00:12:17,410
<font color="#CCCCCC">about it</font><font color="#E5E5E5"> all input needs to be validated</font>

285
00:12:14,680 --> 00:12:19,449
on the server and it should<font color="#CCCCCC"> be done</font><font color="#E5E5E5"> by</font>

286
00:12:17,410 --> 00:12:21,310
whitelisting so there's a couple<font color="#E5E5E5"> of</font>

287
00:12:19,449 --> 00:12:24,069
different things that<font color="#CCCCCC"> you</font><font color="#E5E5E5"> want to check</font>

288
00:12:21,310 --> 00:12:26,290
and only if that input passes all of

289
00:12:24,070 --> 00:12:29,050
those checks should it<font color="#E5E5E5"> be allowed to</font>

290
00:12:26,290 --> 00:12:31,269
proceed so you can check things like the

291
00:12:29,050 --> 00:12:34,359
data type are<font color="#E5E5E5"> you expecting a string a</font>

292
00:12:31,269 --> 00:12:37,600
date and integer check the<font color="#E5E5E5"> Mac minimum</font>

293
00:12:34,360 --> 00:12:40,269
and maximum length and whether for

294
00:12:37,600 --> 00:12:43,000
example whether or not a 0 null value or

295
00:12:40,269 --> 00:12:45,010
blank value is allowed<font color="#E5E5E5"> and if it's a</font>

296
00:12:43,000 --> 00:12:46,720
number check the numeric range to<font color="#CCCCCC"> make</font>

297
00:12:45,010 --> 00:12:49,600
sure that it's within whatever the

298
00:12:46,720 --> 00:12:50,740
expected value is<font color="#E5E5E5"> and of course a</font><font color="#CCCCCC"> lot</font><font color="#E5E5E5"> of</font>

299
00:12:49,600 --> 00:12:53,380
this falls under this last category

300
00:12:50,740 --> 00:12:55,360
which is there's there's well known data

301
00:12:53,380 --> 00:12:57,220
formats phone numbers zip codes dates

302
00:12:55,360 --> 00:12:59,649
email addresses those are easy they have

303
00:12:57,220 --> 00:13:01,570
known format you can whitelist validate

304
00:12:59,649 --> 00:13:03,610
that with a regular<font color="#CCCCCC"> expression and</font>

305
00:13:01,570 --> 00:13:06,269
there's anything extra in there you

306
00:13:03,610 --> 00:13:09,730
reject the input whatever you do do not

307
00:13:06,269 --> 00:13:11,260
strip out anything don't don't try to

308
00:13:09,730 --> 00:13:12,459
look for bad characters and strip them

309
00:13:11,260 --> 00:13:14,439
out there's all kinds<font color="#E5E5E5"> of ways that that</font>

310
00:13:12,459 --> 00:13:15,790
can go wrong and that<font color="#E5E5E5"> can get abused so</font>

311
00:13:14,440 --> 00:13:17,589
always just if there's anything

312
00:13:15,790 --> 00:13:20,680
unexpected if it doesn't pass the reg ex

313
00:13:17,589 --> 00:13:22,750
just throw an error and don't abuse

314
00:13:20,680 --> 00:13:24,130
hidden<font color="#E5E5E5"> fields</font><font color="#CCCCCC"> uh just there's there</font>

315
00:13:22,750 --> 00:13:25,660
should be one cookie that<font color="#E5E5E5"> your web app</font>

316
00:13:24,130 --> 00:13:27,370
uses and that's the session cookie

317
00:13:25,660 --> 00:13:28,959
<font color="#E5E5E5">that's it don't store anything else and</font>

318
00:13:27,370 --> 00:13:30,940
hidden fields cookies anywhere else

319
00:13:28,959 --> 00:13:32,800
<font color="#CCCCCC">stored</font><font color="#E5E5E5"> in a session variable that lives</font>

320
00:13:30,940 --> 00:13:34,700
on the server that the attacker can't

321
00:13:32,800 --> 00:13:38,270
mess with

322
00:13:34,700 --> 00:13:41,510
and so here's a quick java code example

323
00:13:38,270 --> 00:13:44,990
very<font color="#E5E5E5"> simple about how to do date</font>

324
00:13:41,510 --> 00:13:47,180
validation so you can see first we've

325
00:13:44,990 --> 00:13:49,670
separated out the validation logic so

326
00:13:47,180 --> 00:13:51,859
that's<font color="#CCCCCC"> just from a low design</font>

327
00:13:49,670 --> 00:13:53,209
perspective is a good idea<font color="#E5E5E5"> and it might</font>

328
00:13:51,860 --> 00:13:56,150
<font color="#CCCCCC">be a little hard</font><font color="#E5E5E5"> to read because it's</font>

329
00:13:53,210 --> 00:13:58,970
<font color="#E5E5E5">great but it's</font><font color="#CCCCCC"> at the bottom here</font><font color="#E5E5E5"> you</font>

330
00:13:56,150 --> 00:14:00,230
<font color="#E5E5E5">can see</font><font color="#CCCCCC"> the regular</font><font color="#E5E5E5"> expression it starts</font>

331
00:13:58,970 --> 00:14:01,640
with a carrot which is important because

332
00:14:00,230 --> 00:14:03,440
that<font color="#E5E5E5"> means match the beginning of the</font>

333
00:14:01,640 --> 00:14:04,939
string so there's any extra characters

334
00:14:03,440 --> 00:14:06,620
at the beginning it's not<font color="#CCCCCC"> going to pass</font>

335
00:14:04,940 --> 00:14:08,510
and it ends with<font color="#E5E5E5"> a dollar sign which</font>

336
00:14:06,620 --> 00:14:11,900
means match the end of the string<font color="#E5E5E5"> and so</font>

337
00:14:08,510 --> 00:14:14,720
forth and so four digits dash two digits

338
00:14:11,900 --> 00:14:17,660
dash two digits so standard sequel

339
00:14:14,720 --> 00:14:20,060
year-month-day format and only if it

340
00:14:17,660 --> 00:14:22,400
matches return true and otherwise<font color="#E5E5E5"> throw</font>

341
00:14:20,060 --> 00:14:23,869
an exception and and obviously error

342
00:14:22,400 --> 00:14:26,630
handling should be done via exceptions

343
00:14:23,870 --> 00:14:30,350
not via you<font color="#E5E5E5"> know true false return</font>

344
00:14:26,630 --> 00:14:32,930
values and so forth so simple example

345
00:14:30,350 --> 00:14:36,700
<font color="#E5E5E5">but you'd be amazed as you know how many</font>

346
00:14:32,930 --> 00:14:36,699
people<font color="#E5E5E5"> still get this wrong day to day</font>

347
00:14:36,940 --> 00:14:42,140
so moving on to injection flaws so of

348
00:14:40,730 --> 00:14:44,060
<font color="#E5E5E5">course the most well-known</font><font color="#CCCCCC"> of these is</font>

349
00:14:42,140 --> 00:14:47,630
sequel injection<font color="#E5E5E5"> and this again is a</font>

350
00:14:44,060 --> 00:14:51,010
very<font color="#E5E5E5"> simple PHP example where queries</font>

351
00:14:47,630 --> 00:14:53,990
being built from a string concatenation

352
00:14:51,010 --> 00:14:57,890
to user-supplied variables all the

353
00:14:53,990 --> 00:15:00,080
attacker has to do is<font color="#CCCCCC"> enter admin single</font>

354
00:14:57,890 --> 00:15:02,750
quote for<font color="#CCCCCC"> one equals</font><font color="#E5E5E5"> 1 comment out the</font>

355
00:15:00,080 --> 00:15:04,280
rest of the query and sure enough they

356
00:15:02,750 --> 00:15:06,800
change the structure of the<font color="#E5E5E5"> query and</font>

357
00:15:04,280 --> 00:15:09,829
now now you're no longer in control of

358
00:15:06,800 --> 00:15:11,599
your database<font color="#E5E5E5"> command because they've</font>

359
00:15:09,830 --> 00:15:15,080
they can now inject anything they want

360
00:15:11,600 --> 00:15:16,790
and so obviously<font color="#E5E5E5"> it'll authenticate in</font>

361
00:15:15,080 --> 00:15:18,530
most cases and sometimes you even get

362
00:15:16,790 --> 00:15:20,000
lucky<font color="#E5E5E5"> and it dumps the entire</font><font color="#CCCCCC"> contents</font>

363
00:15:18,530 --> 00:15:25,100
of the user table and you get a list of

364
00:15:20,000 --> 00:15:27,080
<font color="#E5E5E5">all the all the valid user names so in</font>

365
00:15:25,100 --> 00:15:28,700
general<font color="#E5E5E5"> injection flaws can really occur</font>

366
00:15:27,080 --> 00:15:32,000
anywhere where there's an interpreter

367
00:15:28,700 --> 00:15:37,160
involved so that<font color="#E5E5E5"> can</font><font color="#CCCCCC"> be Perl Python</font>

368
00:15:32,000 --> 00:15:39,470
JavaScript of course sequel anytime you

369
00:15:37,160 --> 00:15:42,319
have an external shell that it's calling

370
00:15:39,470 --> 00:15:45,620
a command shell if you<font color="#CCCCCC"> do an operating</font>

371
00:15:42,320 --> 00:15:47,120
system calls database systems and of

372
00:15:45,620 --> 00:15:50,029
course half

373
00:15:47,120 --> 00:15:54,430
so when you're calling when you're

374
00:15:50,029 --> 00:15:54,430
building strings to access system files

375
00:15:55,960 --> 00:16:00,830
so<font color="#E5E5E5"> I'm going to use</font><font color="#CCCCCC"> a few screenshots</font>

376
00:15:58,460 --> 00:16:03,500
there was a recent web app pen test that

377
00:16:00,830 --> 00:16:05,270
<font color="#E5E5E5">I was involved in and we found a single</font>

378
00:16:03,500 --> 00:16:07,880
<font color="#E5E5E5">command injection vulnerability in a</font>

379
00:16:05,270 --> 00:16:10,339
third party tool kit image processing

380
00:16:07,880 --> 00:16:13,990
tool kit and this allowed us to run

381
00:16:10,339 --> 00:16:16,520
shell commands unprivileged as the web

382
00:16:13,990 --> 00:16:20,720
web server user essentially the<font color="#CCCCCC"> apache</font>

383
00:16:16,520 --> 00:16:24,020
user and but eventually we were able<font color="#E5E5E5"> to</font>

384
00:16:20,720 --> 00:16:25,880
use that through a sequence of events<font color="#CCCCCC"> we</font>

385
00:16:24,020 --> 00:16:27,890
<font color="#CCCCCC">were able</font><font color="#E5E5E5"> to use that to gain admin</font>

386
00:16:25,880 --> 00:16:29,300
access shell access to the server

387
00:16:27,890 --> 00:16:30,830
because of some other configuration

388
00:16:29,300 --> 00:16:31,819
mistakes that they have made so<font color="#E5E5E5"> I'm</font>

389
00:16:30,830 --> 00:16:36,470
<font color="#E5E5E5">going to use a couple of screenshots</font>

390
00:16:31,820 --> 00:16:38,480
from this to show some examples so

391
00:16:36,470 --> 00:16:40,460
here's the<font color="#E5E5E5"> first example it's probably</font>

392
00:16:38,480 --> 00:16:45,890
really hard to read but basically in the

393
00:16:40,460 --> 00:16:47,810
URL up top i injected LS dash LH<font color="#CCCCCC"> read</font>

394
00:16:45,890 --> 00:16:51,500
just<font color="#E5E5E5"> by appending a semicolon and then</font>

395
00:16:47,810 --> 00:16:54,349
LS LH<font color="#E5E5E5"> and also cranked up the debug</font>

396
00:16:51,500 --> 00:16:57,260
level 29 the highest<font color="#CCCCCC"> value and so we can</font>

397
00:16:54,350 --> 00:17:00,830
see the result here that it shows the

398
00:16:57,260 --> 00:17:03,020
the LS output there and we were able<font color="#E5E5E5"> to</font>

399
00:17:00,830 --> 00:17:05,449
use that<font color="#E5E5E5"> and I'll show another example</font>

400
00:17:03,020 --> 00:17:07,609
later of how<font color="#CCCCCC"> we</font><font color="#E5E5E5"> got additional access</font>

401
00:17:05,449 --> 00:17:09,020
from that but it's basically<font color="#E5E5E5"> just</font><font color="#CCCCCC"> it's</font>

402
00:17:07,609 --> 00:17:10,188
poor designed they<font color="#E5E5E5"> weren't validating</font>

403
00:17:09,020 --> 00:17:12,500
the parameter correctly they were

404
00:17:10,189 --> 00:17:14,900
expecting a number but actually they

405
00:17:12,500 --> 00:17:20,240
allowed me to put in an entire command

406
00:17:14,900 --> 00:17:23,390
string there so what what can you do

407
00:17:20,240 --> 00:17:24,620
about injection flaws in general you

408
00:17:23,390 --> 00:17:28,339
want<font color="#CCCCCC"> to try</font><font color="#E5E5E5"> to avoid external</font>

409
00:17:24,619 --> 00:17:30,020
interpreters whenever possible so for

410
00:17:28,339 --> 00:17:32,178
<font color="#CCCCCC">example in the Java world if you're</font>

411
00:17:30,020 --> 00:17:35,720
trying to send mail from inside a Java

412
00:17:32,179 --> 00:17:38,360
program don't use<font color="#E5E5E5"> runtime</font><font color="#CCCCCC"> that eggs act</font>

413
00:17:35,720 --> 00:17:42,080
to call send mail use the Java mail API

414
00:17:38,360 --> 00:17:44,510
instead always make sure that<font color="#CCCCCC"> you encode</font>

415
00:17:42,080 --> 00:17:46,520
special characters before you send it<font color="#E5E5E5"> to</font>

416
00:17:44,510 --> 00:17:49,070
the back end and<font color="#E5E5E5"> that depends of course</font>

417
00:17:46,520 --> 00:17:50,420
on what you're sending it to semicolons

418
00:17:49,070 --> 00:17:52,790
and back ticks are sensitive in the

419
00:17:50,420 --> 00:17:55,400
context of shell commands single quotes

420
00:17:52,790 --> 00:17:56,530
obviously in sequel statements but for

421
00:17:55,400 --> 00:17:58,840
<font color="#CCCCCC">that is actually better to use</font>

422
00:17:56,530 --> 00:18:00,280
parameterised queries and you know

423
00:17:58,840 --> 00:18:05,050
<font color="#E5E5E5">know how that goes and i'll show</font><font color="#CCCCCC"> a quick</font>

424
00:18:00,280 --> 00:18:06,220
example on the next<font color="#CCCCCC"> slide here very</font>

425
00:18:05,050 --> 00:18:08,770
important to run the external

426
00:18:06,220 --> 00:18:10,450
application with limited privileges you

427
00:18:08,770 --> 00:18:12,280
may want to have a separate account you

428
00:18:10,450 --> 00:18:13,690
don't give you can run it under the web

429
00:18:12,280 --> 00:18:15,639
server user but it's probably<font color="#CCCCCC"> a better</font>

430
00:18:13,690 --> 00:18:17,230
<font color="#E5E5E5">idea to have to yet another separate</font>

431
00:18:15,640 --> 00:18:19,720
user account just for those back-end

432
00:18:17,230 --> 00:18:22,510
applications that can't access anything

433
00:18:19,720 --> 00:18:24,280
else very limited privileges make sure

434
00:18:22,510 --> 00:18:26,260
<font color="#CCCCCC">that you check all the output return</font>

435
00:18:24,280 --> 00:18:27,850
codes and error codes from the third

436
00:18:26,260 --> 00:18:30,129
party application so that if there's

437
00:18:27,850 --> 00:18:34,629
anything unexpected you stop your throne

438
00:18:30,130 --> 00:18:38,200
error and don't proceed so here's a very

439
00:18:34,630 --> 00:18:39,550
quick example of a PHP parameterised

440
00:18:38,200 --> 00:18:41,860
query or what they call<font color="#CCCCCC"> a prepared</font>

441
00:18:39,550 --> 00:18:43,330
statement and so again<font color="#E5E5E5"> you set up the</font>

442
00:18:41,860 --> 00:18:45,729
<font color="#E5E5E5">structure of</font><font color="#CCCCCC"> the query this is the same</font>

443
00:18:43,330 --> 00:18:47,409
example that I showed before PHP has a

444
00:18:45,730 --> 00:18:49,420
<font color="#E5E5E5">kind</font><font color="#CCCCCC"> of a neat feature where you can</font>

445
00:18:47,410 --> 00:18:51,520
actually<font color="#E5E5E5"> name the parameters it's not</font>

446
00:18:49,420 --> 00:18:53,380
just positional you can<font color="#CCCCCC"> actually assign</font>

447
00:18:51,520 --> 00:18:55,600
different names to them and then you

448
00:18:53,380 --> 00:18:58,420
call the to bind functions there you

449
00:18:55,600 --> 00:18:59,919
bind the values to them and then you you

450
00:18:58,420 --> 00:19:01,870
execute the statement and it's<font color="#E5E5E5"> really as</font>

451
00:18:59,920 --> 00:19:04,240
simple as that and when you're doing

452
00:19:01,870 --> 00:19:06,340
that bind it automatically knows that

453
00:19:04,240 --> 00:19:08,410
anything in that string needs to be

454
00:19:06,340 --> 00:19:11,050
escaped so you see at the<font color="#E5E5E5"> bottom here</font>

455
00:19:08,410 --> 00:19:12,550
that it actually puts a backslash in

456
00:19:11,050 --> 00:19:14,470
front of the single quote which means

457
00:19:12,550 --> 00:19:16,419
it's<font color="#CCCCCC"> just part of the string and</font><font color="#E5E5E5"> so that</font>

458
00:19:14,470 --> 00:19:19,320
request would obviously fail because

459
00:19:16,420 --> 00:19:23,800
there's no user that's named admin

460
00:19:19,320 --> 00:19:25,389
single quote or one equals one and<font color="#E5E5E5"> I</font>

461
00:19:23,800 --> 00:19:27,159
<font color="#E5E5E5">mentioned owasp they have a lot of these</font>

462
00:19:25,390 --> 00:19:29,080
great resources they call them cheat

463
00:19:27,160 --> 00:19:30,910
cheats<font color="#E5E5E5"> they have it for across that</font>

464
00:19:29,080 --> 00:19:33,040
scripting<font color="#CCCCCC"> for Caesar for query</font>

465
00:19:30,910 --> 00:19:34,590
parameterization so there's a link to it

466
00:19:33,040 --> 00:19:36,850
they have a you<font color="#CCCCCC"> know</font><font color="#E5E5E5"> examples in</font>

467
00:19:34,590 --> 00:19:39,790
probably a dozen<font color="#E5E5E5"> different languages of</font>

468
00:19:36,850 --> 00:19:43,679
how to do<font color="#E5E5E5"> this in your environment so</font>

469
00:19:39,790 --> 00:19:45,460
just a quick reference<font color="#E5E5E5"> makes it easy so</font>

470
00:19:43,680 --> 00:19:46,650
we hear<font color="#E5E5E5"> a lot of our cross-site</font>

471
00:19:45,460 --> 00:19:48,670
scripting cross-site request forgery

472
00:19:46,650 --> 00:19:50,110
most of you are<font color="#E5E5E5"> probably familiar with</font>

473
00:19:48,670 --> 00:19:52,930
it but<font color="#E5E5E5"> I'm just going to cover the</font>

474
00:19:50,110 --> 00:19:54,689
difference is real quick and add to kind

475
00:19:52,930 --> 00:19:57,640
of show how they relate to each<font color="#E5E5E5"> other</font>

476
00:19:54,690 --> 00:20:00,730
cross-site scripting injects content

477
00:19:57,640 --> 00:20:02,890
into an existing page while SI sirve

478
00:20:00,730 --> 00:20:07,480
takes an action on behalf of the user

479
00:20:02,890 --> 00:20:10,060
<font color="#E5E5E5">that's currently logged in now xss can</font>

480
00:20:07,480 --> 00:20:12,280
often be used to launch see<font color="#CCCCCC"> serve and it</font>

481
00:20:10,060 --> 00:20:14,830
makes<font color="#E5E5E5"> for a much more powerful</font>

482
00:20:12,280 --> 00:20:17,170
surf attack once you have crossed<font color="#E5E5E5"> over</font>

483
00:20:14,830 --> 00:20:19,720
into that<font color="#E5E5E5"> trust boundary and you've here</font>

484
00:20:17,170 --> 00:20:24,070
in in the in the same code base as as

485
00:20:19,720 --> 00:20:25,600
the mid native JavaScript so here's two

486
00:20:24,070 --> 00:20:28,020
quick examples pretty pretty

487
00:20:25,600 --> 00:20:30,879
straightforward cross-site scripting

488
00:20:28,020 --> 00:20:32,770
posting you know a comment for example

489
00:20:30,880 --> 00:20:36,840
<font color="#E5E5E5">to a message board and injecting some</font>

490
00:20:32,770 --> 00:20:40,240
script tags into that and here is a

491
00:20:36,840 --> 00:20:44,530
example of adding a friend adding the

492
00:20:40,240 --> 00:20:46,330
attacker as a behind<font color="#E5E5E5"> the victims back so</font>

493
00:20:44,530 --> 00:20:47,800
to speak adding them as a friend<font color="#CCCCCC"> on</font>

494
00:20:46,330 --> 00:20:52,389
their social network so they can see

495
00:20:47,800 --> 00:20:54,639
their contacts so cross-site scripting

496
00:20:52,390 --> 00:20:56,500
basically the attacker injects malicious

497
00:20:54,640 --> 00:20:58,750
code into<font color="#CCCCCC"> the web page it's sent</font><font color="#E5E5E5"> to the</font>

498
00:20:56,500 --> 00:21:00,580
browser and the browser basically just

499
00:20:58,750 --> 00:21:02,620
assumes that that part is<font color="#CCCCCC"> that code is</font>

500
00:21:00,580 --> 00:21:05,260
<font color="#E5E5E5">part of the web page and runs it and</font>

501
00:21:02,620 --> 00:21:07,419
that script now has access to any of the

502
00:21:05,260 --> 00:21:09,190
same cookies session tokens anything

503
00:21:07,420 --> 00:21:11,290
else that's stored you know in that in

504
00:21:09,190 --> 00:21:13,240
that context for the domain you've got

505
00:21:11,290 --> 00:21:17,770
reflected and stored cross-site

506
00:21:13,240 --> 00:21:18,850
scripting on the other<font color="#E5E5E5"> hand see surf so</font>

507
00:21:17,770 --> 00:21:20,610
another way of looking at the difference

508
00:21:18,850 --> 00:21:24,070
between<font color="#CCCCCC"> these two is to say that</font>

509
00:21:20,610 --> 00:21:27,189
cross-site abuses or miss uses the trust

510
00:21:24,070 --> 00:21:29,320
of the user in<font color="#E5E5E5"> the application while see</font>

511
00:21:27,190 --> 00:21:31,390
surf is the other way around it abuses

512
00:21:29,320 --> 00:21:33,340
the trust of the application in the<font color="#E5E5E5"> user</font>

513
00:21:31,390 --> 00:21:35,080
because it thinks that the user<font color="#E5E5E5"> is</font>

514
00:21:33,340 --> 00:21:38,379
actually taking an action that<font color="#E5E5E5"> the user</font>

515
00:21:35,080 --> 00:21:40,540
didn't intend<font color="#E5E5E5"> to take and cross-site</font>

516
00:21:38,380 --> 00:21:42,130
scripting<font color="#CCCCCC"> misuses</font><font color="#E5E5E5"> the trust of the user</font>

517
00:21:40,540 --> 00:21:43,389
because they think<font color="#E5E5E5"> that the</font>

518
00:21:42,130 --> 00:21:44,890
functionality that<font color="#E5E5E5"> they're seeing is</font>

519
00:21:43,390 --> 00:21:47,230
built into the web application or they

520
00:21:44,890 --> 00:21:49,350
may not see the functionality but it's

521
00:21:47,230 --> 00:21:52,600
<font color="#E5E5E5">really not intended to behave that way</font>

522
00:21:49,350 --> 00:21:54,520
so cross I see surf is a good example of

523
00:21:52,600 --> 00:21:56,709
<font color="#CCCCCC">Caesar</font><font color="#E5E5E5"> is basically making an</font>

524
00:21:54,520 --> 00:21:59,050
unauthorized request on behalf of an

525
00:21:56,710 --> 00:22:01,300
authenticated user such as initiating a

526
00:21:59,050 --> 00:22:06,190
bank transfer without them being aware

527
00:22:01,300 --> 00:22:07,780
of<font color="#E5E5E5"> it so and you know the simplest way</font>

528
00:22:06,190 --> 00:22:09,730
to launch see serve is to just to put a

529
00:22:07,780 --> 00:22:12,460
link in an image<font color="#E5E5E5"> tag and when</font><font color="#CCCCCC"> that image</font>

530
00:22:09,730 --> 00:22:14,650
is loaded the get URL is is accessed and

531
00:22:12,460 --> 00:22:17,230
and that's you know<font color="#E5E5E5"> that's easy to</font>

532
00:22:14,650 --> 00:22:18,400
defend against a more sophisticated see

533
00:22:17,230 --> 00:22:20,950
sort of attacks that<font color="#E5E5E5"> are very difficult</font>

534
00:22:18,400 --> 00:22:21,850
to defend against are the ones that are

535
00:22:20,950 --> 00:22:24,550
launched to be a cross-site scripting

536
00:22:21,850 --> 00:22:25,928
because then now you have full sort of

537
00:22:24,550 --> 00:22:27,668
interactive program

538
00:22:25,929 --> 00:22:29,830
ability you can<font color="#E5E5E5"> you can make a get</font>

539
00:22:27,669 --> 00:22:31,749
request you can get the token back you

540
00:22:29,830 --> 00:22:33,759
can post the token with the next request

541
00:22:31,749 --> 00:22:39,460
so it makes it a lot harder to defend

542
00:22:33,759 --> 00:22:41,259
against that so again what can we do

543
00:22:39,460 --> 00:22:43,509
about it<font color="#E5E5E5"> is this this</font><font color="#CCCCCC"> is really where</font>

544
00:22:41,259 --> 00:22:47,049
boils down to again<font color="#E5E5E5"> I'm going to</font><font color="#CCCCCC"> say it</font>

545
00:22:43,509 --> 00:22:48,879
again input validation<font color="#CCCCCC"> it's if you do</font>

546
00:22:47,049 --> 00:22:51,340
you<font color="#E5E5E5"> interpret validation right and if</font>

547
00:22:48,879 --> 00:22:53,799
you do whitelisting then it's<font color="#E5E5E5"> going to</font>

548
00:22:51,340 --> 00:22:55,539
stop most of these<font color="#CCCCCC"> attacks just in case</font>

549
00:22:53,799 --> 00:22:58,179
<font color="#CCCCCC">you missed something you</font><font color="#E5E5E5"> want to also</font>

550
00:22:55,539 --> 00:23:00,340
use output and coding as a fallback and

551
00:22:58,179 --> 00:23:02,619
this is going to be dependent<font color="#E5E5E5"> on the</font>

552
00:23:00,340 --> 00:23:04,619
context of where you're putting this

553
00:23:02,619 --> 00:23:07,119
this output if you're<font color="#E5E5E5"> putting it into a</font>

554
00:23:04,619 --> 00:23:08,830
HTML context<font color="#CCCCCC"> it's going to be different</font>

555
00:23:07,119 --> 00:23:12,129
encoding and if you're<font color="#E5E5E5"> putting into a</font>

556
00:23:08,830 --> 00:23:15,189
JavaScript or CSS stylesheet context and

557
00:23:12,129 --> 00:23:16,600
so and for<font color="#CCCCCC"> example jquery has an encoder</font>

558
00:23:15,190 --> 00:23:18,700
library that that does that has

559
00:23:16,600 --> 00:23:21,610
different functions you can call to to

560
00:23:18,700 --> 00:23:23,889
do exactly that see sort of prevention

561
00:23:21,610 --> 00:23:25,959
as<font color="#CCCCCC"> i mentioned is a little bit trickier</font>

562
00:23:23,889 --> 00:23:29,019
because you can prevent the simple

563
00:23:25,960 --> 00:23:30,789
simple attacks just<font color="#E5E5E5"> by using a token so</font>

564
00:23:29,019 --> 00:23:32,350
that every form you know has a unique

565
00:23:30,789 --> 00:23:33,789
value associated with it or<font color="#CCCCCC"> every</font>

566
00:23:32,350 --> 00:23:35,740
request actually has<font color="#CCCCCC"> a unique value</font>

567
00:23:33,789 --> 00:23:37,629
associated with it and if<font color="#E5E5E5"> that value is</font>

568
00:23:35,740 --> 00:23:41,139
not included<font color="#E5E5E5"> in the next request then</font>

569
00:23:37,629 --> 00:23:43,330
you just discard the request but<font color="#CCCCCC"> it</font>

570
00:23:41,139 --> 00:23:44,918
doesn't doesn't help you if the attacker

571
00:23:43,330 --> 00:23:46,178
is actually exploiting another

572
00:23:44,919 --> 00:23:48,549
vulnerability such as cross-site

573
00:23:46,179 --> 00:23:52,539
scripting to get inside<font color="#E5E5E5"> the application</font>

574
00:23:48,549 --> 00:23:54,340
so<font color="#E5E5E5"> really the strongest defense and this</font>

575
00:23:52,539 --> 00:23:56,230
<font color="#E5E5E5">this is very much dependent on what</font>

576
00:23:54,340 --> 00:23:57,759
you're<font color="#CCCCCC"> trying to defend if I mean if</font>

577
00:23:56,230 --> 00:23:59,980
it's<font color="#E5E5E5"> if it's a sensitive transaction</font>

578
00:23:57,759 --> 00:24:01,570
like<font color="#E5E5E5"> a bank transfer then you would</font>

579
00:23:59,980 --> 00:24:03,309
probably want to<font color="#E5E5E5"> go to this length to</font>

580
00:24:01,570 --> 00:24:05,619
make sure that it is the user who is

581
00:24:03,309 --> 00:24:07,809
intending on performing this action so

582
00:24:05,619 --> 00:24:09,279
you can do things<font color="#CCCCCC"> like CAPTCHA which we</font>

583
00:24:07,809 --> 00:24:11,980
all know has some issues but it's

584
00:24:09,279 --> 00:24:14,559
nonetheless you know effective if you

585
00:24:11,980 --> 00:24:16,779
want to go<font color="#E5E5E5"> you know even further along</font>

586
00:24:14,559 --> 00:24:18,399
the spectrum you can reap romp<font color="#E5E5E5"> the user</font>

587
00:24:16,779 --> 00:24:20,350
for their password and again<font color="#E5E5E5"> you would</font>

588
00:24:18,399 --> 00:24:23,320
<font color="#E5E5E5">only want to do this obviously for you</font>

589
00:24:20,350 --> 00:24:26,408
know in<font color="#CCCCCC"> the cases where it's</font><font color="#E5E5E5"> very</font>

590
00:24:23,320 --> 00:24:27,639
sensitive transaction and of<font color="#CCCCCC"> course you</font>

591
00:24:26,409 --> 00:24:31,210
can use something like a one-time

592
00:24:27,639 --> 00:24:33,979
password secure ID to to basically do a

593
00:24:31,210 --> 00:24:37,610
per-transaction authentication

594
00:24:33,980 --> 00:24:40,669
and here is it's actually<font color="#CCCCCC"> a very</font><font color="#E5E5E5"> short</font>

595
00:24:37,610 --> 00:24:43,129
example basically a one-liner if you're

596
00:24:40,669 --> 00:24:44,750
doing in asp.net it has this this

597
00:24:43,130 --> 00:24:46,880
built-in mechanism called<font color="#CCCCCC"> view state</font>

598
00:24:44,750 --> 00:24:48,350
which is<font color="#E5E5E5"> was never really designed as a</font>

599
00:24:46,880 --> 00:24:50,390
security<font color="#CCCCCC"> feature but it's designed to</font>

600
00:24:48,350 --> 00:24:53,870
<font color="#E5E5E5">track form values across different</font>

601
00:24:50,390 --> 00:24:55,460
requests and it checks automatically by

602
00:24:53,870 --> 00:24:57,709
design the framework checks the

603
00:24:55,460 --> 00:25:00,110
integrity of that cookie with every

604
00:24:57,710 --> 00:25:03,230
request and so if you<font color="#E5E5E5"> simply set the</font>

605
00:25:00,110 --> 00:25:05,629
current session ID to be the key<font color="#CCCCCC"> for the</font>

606
00:25:03,230 --> 00:25:08,720
viewstate then it will automatically

607
00:25:05,630 --> 00:25:10,280
perform this validation for you so it's

608
00:25:08,720 --> 00:25:12,080
great<font color="#E5E5E5"> in the sense that you don't have</font>

609
00:25:10,280 --> 00:25:13,490
to<font color="#E5E5E5"> have any external libraries you're</font>

610
00:25:12,080 --> 00:25:15,649
not<font color="#E5E5E5"> making any major code changes to</font>

611
00:25:13,490 --> 00:25:18,260
your application but there's a few

612
00:25:15,650 --> 00:25:20,090
<font color="#E5E5E5">issues</font><font color="#CCCCCC"> with it because this requires you</font>

613
00:25:18,260 --> 00:25:22,280
to put basically a code hook into each

614
00:25:20,090 --> 00:25:25,129
page this<font color="#E5E5E5"> is done on</font><font color="#CCCCCC"> a per page basis</font>

615
00:25:22,280 --> 00:25:26,570
and so it's easy to<font color="#E5E5E5"> forget to put one in</font>

616
00:25:25,130 --> 00:25:28,700
there especially we have a big web

617
00:25:26,570 --> 00:25:31,220
application and it's<font color="#CCCCCC"> even more of a pain</font>

618
00:25:28,700 --> 00:25:34,340
<font color="#CCCCCC">to audit and having to check this across</font>

619
00:25:31,220 --> 00:25:36,200
you know<font color="#E5E5E5"> the application and the</font>

620
00:25:34,340 --> 00:25:39,559
developer can either intentionally or

621
00:25:36,200 --> 00:25:41,330
unintentionally disable this feature and

622
00:25:39,559 --> 00:25:43,100
and then there's<font color="#E5E5E5"> also some issues with</font>

623
00:25:41,330 --> 00:25:44,899
load balancing because the session IDs

624
00:25:43,100 --> 00:25:48,649
are not always replicated across the

625
00:25:44,900 --> 00:25:50,120
servers so up so this<font color="#CCCCCC"> is a</font><font color="#E5E5E5"> great sort of</font>

626
00:25:48,650 --> 00:25:51,559
quick and dirty solution that's going to

627
00:25:50,120 --> 00:25:54,409
get you you know eighty percent<font color="#E5E5E5"> of the</font>

628
00:25:51,559 --> 00:25:58,610
way there but it's not sort<font color="#E5E5E5"> of the the</font>

629
00:25:54,410 --> 00:26:00,200
<font color="#E5E5E5">best solution so owasp has has three</font>

630
00:25:58,610 --> 00:26:02,959
projects that are all related to each

631
00:26:00,200 --> 00:26:05,360
other<font color="#E5E5E5"> that are SI sirve guard in net</font>

632
00:26:02,960 --> 00:26:07,940
java and PHP and what did<font color="#E5E5E5"> this does</font>

633
00:26:05,360 --> 00:26:09,918
basically<font color="#E5E5E5"> is it allows you to handle</font>

634
00:26:07,940 --> 00:26:12,890
this<font color="#E5E5E5"> token management creation and</font>

635
00:26:09,919 --> 00:26:14,780
checking of the token transparently to

636
00:26:12,890 --> 00:26:17,270
the programmer and transparently to the

637
00:26:14,780 --> 00:26:19,639
user so you can handle<font color="#E5E5E5"> it you basically</font>

638
00:26:17,270 --> 00:26:21,559
set up a central configuration file that

639
00:26:19,640 --> 00:26:23,929
hooks into<font color="#E5E5E5"> the web server and then with</font>

640
00:26:21,559 --> 00:26:25,940
every request it figures out whether<font color="#E5E5E5"> or</font>

641
00:26:23,929 --> 00:26:27,650
not it needs to include a token it puts

642
00:26:25,940 --> 00:26:30,290
the token in there and then<font color="#CCCCCC"> it checks it</font>

643
00:26:27,650 --> 00:26:33,679
on the following<font color="#E5E5E5"> requests and there's a</font>

644
00:26:30,290 --> 00:26:37,940
link in here<font color="#E5E5E5"> to to their 20 wasp for</font>

645
00:26:33,679 --> 00:26:40,820
more<font color="#E5E5E5"> information so improper error</font>

646
00:26:37,940 --> 00:26:44,270
handling so if you have um if you're

647
00:26:40,820 --> 00:26:46,220
giving the attacker too much<font color="#E5E5E5"> information</font>

648
00:26:44,270 --> 00:26:47,779
in an error message that can<font color="#E5E5E5"> really give</font>

649
00:26:46,220 --> 00:26:49,369
them<font color="#E5E5E5"> a lot</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> clues of</font>

650
00:26:47,779 --> 00:26:53,509
out how to attack your application and

651
00:26:49,369 --> 00:26:55,879
how to mess with it and so examples of

652
00:26:53,509 --> 00:27:00,109
this obviously stack traces database

653
00:26:55,879 --> 00:27:01,968
dumps<font color="#E5E5E5"> specific error codes for</font><font color="#CCCCCC"> Java JSP</font>

654
00:27:00,109 --> 00:27:04,369
compilation errors that may have full

655
00:27:01,969 --> 00:27:06,049
paths in them if you're giving an

656
00:27:04,369 --> 00:27:08,509
inconsistent error<font color="#E5E5E5"> message you know</font>

657
00:27:06,049 --> 00:27:10,908
access denied versus found not found or

658
00:27:08,509 --> 00:27:13,309
invalid username<font color="#E5E5E5"> versus invalid password</font>

659
00:27:10,909 --> 00:27:15,830
and so forth and<font color="#E5E5E5"> of</font><font color="#CCCCCC"> course the knowledge</font>

660
00:27:13,309 --> 00:27:17,509
service and also<font color="#CCCCCC"> you always have to</font>

661
00:27:15,830 --> 00:27:21,830
watch out with error messages if you're

662
00:27:17,509 --> 00:27:23,599
repeating any user input back to to the

663
00:27:21,830 --> 00:27:25,460
user that can lead to<font color="#CCCCCC"> a reflective</font>

664
00:27:23,599 --> 00:27:27,259
cross-site scripting attack because it

665
00:27:25,460 --> 00:27:29,629
might allow if<font color="#E5E5E5"> you're not validating it</font>

666
00:27:27,259 --> 00:27:35,629
it might allow the user to to inject

667
00:27:29,629 --> 00:27:37,428
input content there so how do you how do

668
00:27:35,629 --> 00:27:39,049
<font color="#E5E5E5">you handle this you want to make sure</font>

669
00:27:37,429 --> 00:27:41,330
that<font color="#E5E5E5"> in your application you're defining</font>

670
00:27:39,049 --> 00:27:43,668
clear and consistent error handling a

671
00:27:41,330 --> 00:27:46,099
centralized error handling mechanism is

672
00:27:43,669 --> 00:27:48,619
usually the best<font color="#E5E5E5"> approach you want to</font>

673
00:27:46,099 --> 00:27:50,418
make sure<font color="#E5E5E5"> that you give the user short</font>

674
00:27:48,619 --> 00:27:53,899
but meaningful error messages that are

675
00:27:50,419 --> 00:27:55,759
actionable and you want to log more

676
00:27:53,899 --> 00:27:58,330
detailed information on the<font color="#CCCCCC"> backend</font><font color="#E5E5E5"> that</font>

677
00:27:55,759 --> 00:28:00,200
only the admin would be able<font color="#CCCCCC"> to access</font>

678
00:27:58,330 --> 00:28:02,139
so<font color="#E5E5E5"> you don't want to give useful</font>

679
00:28:00,200 --> 00:28:04,729
information for an attacker stack traces

680
00:28:02,139 --> 00:28:06,738
detailed exceptions that sort of thing

681
00:28:04,729 --> 00:28:09,109
and you want to make sure<font color="#E5E5E5"> that you're</font>

682
00:28:06,739 --> 00:28:11,210
catching specific exceptions and

683
00:28:09,109 --> 00:28:14,210
handling them as best as you can within

684
00:28:11,210 --> 00:28:15,619
<font color="#E5E5E5">the application logic don't just catch</font>

685
00:28:14,210 --> 00:28:17,989
everything at the top level and throw<font color="#E5E5E5"> a</font>

686
00:28:15,619 --> 00:28:20,238
generic error but you do want to<font color="#E5E5E5"> make</font>

687
00:28:17,989 --> 00:28:22,249
sure<font color="#CCCCCC"> that as a fallback you catch you</font>

688
00:28:20,239 --> 00:28:24,919
put a general catch block at the very

689
00:28:22,249 --> 00:28:26,450
top level so if you missed anything that

690
00:28:24,919 --> 00:28:28,789
it gets caught there and you don't end

691
00:28:26,450 --> 00:28:30,619
<font color="#CCCCCC">up with a stack trace it's also a good</font>

692
00:28:28,789 --> 00:28:35,719
idea to modify the default error pages

693
00:28:30,619 --> 00:28:37,399
that your<font color="#CCCCCC"> web server defines so another</font>

694
00:28:35,719 --> 00:28:39,289
issue that we see a lot is that access

695
00:28:37,399 --> 00:28:40,879
control is not<font color="#E5E5E5"> applied consistently and</font>

696
00:28:39,289 --> 00:28:43,190
this comes<font color="#CCCCCC"> back to what</font><font color="#E5E5E5"> I was talking</font>

697
00:28:40,879 --> 00:28:44,570
earlier about the viewstate because a

698
00:28:43,190 --> 00:28:46,969
lot of times access control is

699
00:28:44,570 --> 00:28:49,668
implemented with coat hooks so if you

700
00:28:46,969 --> 00:28:51,229
forget one of those then you know 99 of

701
00:28:49,669 --> 00:28:52,609
your<font color="#E5E5E5"> pages might be okay</font><font color="#CCCCCC"> but there's</font><font color="#E5E5E5"> one</font>

702
00:28:51,229 --> 00:28:54,320
out there where the programmer just

703
00:28:52,609 --> 00:28:57,769
forgot to<font color="#E5E5E5"> put the authentication check</font>

704
00:28:54,320 --> 00:29:00,349
into it so there's you know insecure IDs

705
00:28:57,769 --> 00:29:01,560
if you can guess<font color="#E5E5E5"> sequential numbers of</font>

706
00:29:00,349 --> 00:29:02,970
some<font color="#E5E5E5"> sort</font>

707
00:29:01,560 --> 00:29:05,610
you know if you know a particular URL

708
00:29:02,970 --> 00:29:08,940
you might be able<font color="#E5E5E5"> to force browse past</font>

709
00:29:05,610 --> 00:29:10,620
that path traversal and client-side

710
00:29:08,940 --> 00:29:12,420
caching can also be an issue if you

711
00:29:10,620 --> 00:29:15,929
<font color="#E5E5E5">don't disable caching for sensitive</font>

712
00:29:12,420 --> 00:29:18,420
information so home you know as<font color="#E5E5E5"> I</font>

713
00:29:15,930 --> 00:29:19,830
mentioned<font color="#CCCCCC"> homegrown authorization</font>

714
00:29:18,420 --> 00:29:22,230
schemes are usually not<font color="#E5E5E5"> a good idea</font>

715
00:29:19,830 --> 00:29:24,780
because<font color="#E5E5E5"> it can lead to exactly that</font>

716
00:29:22,230 --> 00:29:25,770
issue of missing one particular page or

717
00:29:24,780 --> 00:29:30,480
one particular part of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> application</font>

718
00:29:25,770 --> 00:29:34,260
and so here's here's a good example of

719
00:29:30,480 --> 00:29:36,390
this<font color="#CCCCCC"> was part of that same pen test that</font>

720
00:29:34,260 --> 00:29:39,180
i mentioned earlier if you just went to

721
00:29:36,390 --> 00:29:41,190
<font color="#E5E5E5">server name / logs you could actually</font>

722
00:29:39,180 --> 00:29:43,560
see<font color="#CCCCCC"> a copy of the access log in the</font>

723
00:29:41,190 --> 00:29:45,690
error log from<font color="#CCCCCC"> apache there which would</font>

724
00:29:43,560 --> 00:29:47,340
disclose you know all of the IP

725
00:29:45,690 --> 00:29:49,560
addresses that have accessed<font color="#E5E5E5"> that server</font>

726
00:29:47,340 --> 00:29:52,050
you could see all<font color="#CCCCCC"> the different urls</font>

727
00:29:49,560 --> 00:29:53,370
that were valid on that server that you

728
00:29:52,050 --> 00:29:54,530
<font color="#CCCCCC">may not have known about</font><font color="#E5E5E5"> otherwise so</font>

729
00:29:53,370 --> 00:30:00,479
it's really a gold mine<font color="#CCCCCC"> of information</font>

730
00:29:54,530 --> 00:30:03,840
for an attacker so what's what's the

731
00:30:00,480 --> 00:30:05,370
mitigation approach here access

732
00:30:03,840 --> 00:30:09,990
permissions should be checked with every

733
00:30:05,370 --> 00:30:11,969
request and so there you want to make

734
00:30:09,990 --> 00:30:14,490
sure<font color="#E5E5E5"> that it's consistently applied that</font>

735
00:30:11,970 --> 00:30:16,080
that there's not<font color="#E5E5E5"> a chance of missing one</font>

736
00:30:14,490 --> 00:30:19,710
<font color="#E5E5E5">of these access control checks by doing</font>

737
00:30:16,080 --> 00:30:21,840
it<font color="#E5E5E5"> in a centralized way which</font><font color="#CCCCCC"> is easy to</font>

738
00:30:19,710 --> 00:30:24,510
do if you don't roll your own access

739
00:30:21,840 --> 00:30:29,280
control so for<font color="#E5E5E5"> example on the Java side</font>

740
00:30:24,510 --> 00:30:31,200
spring security has has a wide range of

741
00:30:29,280 --> 00:30:33,300
features<font color="#E5E5E5"> that let you define how you</font>

742
00:30:31,200 --> 00:30:35,400
want<font color="#E5E5E5"> to perform authorization checking</font>

743
00:30:33,300 --> 00:30:37,050
and<font color="#CCCCCC"> its declare difference that our</font>

744
00:30:35,400 --> 00:30:39,300
programmatic so you're<font color="#E5E5E5"> not relying on</font>

745
00:30:37,050 --> 00:30:42,389
putting putting coat hooks in<font color="#CCCCCC"> you're</font>

746
00:30:39,300 --> 00:30:44,250
managing all in one<font color="#E5E5E5"> place and then other</font>

747
00:30:42,390 --> 00:30:47,640
other things to look out for is you want

748
00:30:44,250 --> 00:30:49,530
to<font color="#E5E5E5"> make</font><font color="#CCCCCC"> sure you using HTTP headers to</font>

749
00:30:47,640 --> 00:30:51,660
set the caching behavior for sensitive

750
00:30:49,530 --> 00:30:54,270
information so that's not<font color="#E5E5E5"> stored by the</font>

751
00:30:51,660 --> 00:30:55,410
browser and on the server side you want

752
00:30:54,270 --> 00:30:59,360
<font color="#CCCCCC">to make sure</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> you're using OS</font>

753
00:30:55,410 --> 00:31:04,650
security to protect sensitive data there

754
00:30:59,360 --> 00:31:06,780
and then in secure storage so you know

755
00:31:04,650 --> 00:31:08,430
this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> a laundry list of</font><font color="#E5E5E5"> things that</font>

756
00:31:06,780 --> 00:31:09,990
will go wrong and we hear about<font color="#E5E5E5"> this all</font>

757
00:31:08,430 --> 00:31:12,690
<font color="#CCCCCC">the time with with</font><font color="#E5E5E5"> the various data</font>

758
00:31:09,990 --> 00:31:15,299
breaches out there you know not

759
00:31:12,690 --> 00:31:19,139
encrypting critical data not encrypting

760
00:31:15,299 --> 00:31:21,869
cups storing keys in securely I mean a

761
00:31:19,139 --> 00:31:24,508
<font color="#E5E5E5">lot of people seem to not have heard</font>

762
00:31:21,869 --> 00:31:26,279
<font color="#CCCCCC">about these</font><font color="#E5E5E5"> things called h SMS hardware</font>

763
00:31:24,509 --> 00:31:28,080
security modules and so they're just

764
00:31:26,279 --> 00:31:29,850
storing all these sensitive keys on on

765
00:31:28,080 --> 00:31:32,009
the file system right next<font color="#CCCCCC"> to the</font>

766
00:31:29,850 --> 00:31:35,309
private key next<font color="#E5E5E5"> to the public key you</font>

767
00:31:32,009 --> 00:31:37,639
know and it's<font color="#CCCCCC"> just it's the</font><font color="#E5E5E5"> problem has</font>

768
00:31:35,309 --> 00:31:42,090
been solved but enough people are still

769
00:31:37,639 --> 00:31:44,189
not<font color="#E5E5E5"> using the correct solutions poor</font>

770
00:31:42,090 --> 00:31:46,980
sources of randomness or or poor

771
00:31:44,190 --> 00:31:49,789
algorithms<font color="#CCCCCC"> invent inventing your</font><font color="#E5E5E5"> own</font>

772
00:31:46,980 --> 00:31:52,889
algorithm I would still see that and

773
00:31:49,789 --> 00:31:54,950
fail in if you do so we're even if

774
00:31:52,889 --> 00:31:57,359
you're using a well known algorithm

775
00:31:54,950 --> 00:32:00,119
failing<font color="#CCCCCC"> to design the system so that</font><font color="#E5E5E5"> it</font>

776
00:31:57,359 --> 00:32:02,279
can<font color="#E5E5E5"> easily handle the key changes or</font>

777
00:32:00,119 --> 00:32:04,470
other you<font color="#E5E5E5"> know cryptographic maintenance</font>

778
00:32:02,279 --> 00:32:09,509
procedures or revocation and things like

779
00:32:04,470 --> 00:32:11,820
that so<font color="#CCCCCC"> here this is</font><font color="#E5E5E5"> the another</font>

780
00:32:09,509 --> 00:32:14,789
screenshot from that web app<font color="#CCCCCC"> pen test</font><font color="#E5E5E5"> I</font>

781
00:32:11,820 --> 00:32:18,139
mentioned so in this case I simply

782
00:32:14,789 --> 00:32:21,720
injected the command grep I our MySQL

783
00:32:18,139 --> 00:32:23,488
dot so it looked for the string MySQL in

784
00:32:21,720 --> 00:32:25,889
any of the the files under the current

785
00:32:23,489 --> 00:32:28,200
folder and sure enough it found the

786
00:32:25,889 --> 00:32:29,789
mysql user name and password which<font color="#CCCCCC"> you</font>

787
00:32:28,200 --> 00:32:32,279
may notice<font color="#CCCCCC"> that it might be hard to read</font>

788
00:32:29,789 --> 00:32:35,009
but it says<font color="#E5E5E5"> root so they were</font><font color="#CCCCCC"> using the</font>

789
00:32:32,279 --> 00:32:38,009
mysql root account<font color="#E5E5E5"> um and it got even</font>

790
00:32:35,009 --> 00:32:39,659
better because lo and behold that same

791
00:32:38,009 --> 00:32:41,789
password that<font color="#CCCCCC"> they use for</font><font color="#E5E5E5"> the mysql</font>

792
00:32:39,659 --> 00:32:44,190
root account worked<font color="#E5E5E5"> for ssh for the</font>

793
00:32:41,789 --> 00:32:45,960
system root account so just with<font color="#CCCCCC"> that</font>

794
00:32:44,190 --> 00:32:50,369
one command it was it was game over

795
00:32:45,960 --> 00:32:52,769
essentially so again it's you know what

796
00:32:50,369 --> 00:32:55,109
why are we there's multiple issues here

797
00:32:52,769 --> 00:32:57,330
<font color="#CCCCCC">but it comes down</font><font color="#E5E5E5"> to storing the</font>

798
00:32:55,109 --> 00:32:59,249
password and securely and reusing the

799
00:32:57,330 --> 00:33:04,730
same<font color="#E5E5E5"> password across</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> two very</font>

800
00:32:59,249 --> 00:33:07,529
different purposes so how do we fix<font color="#E5E5E5"> it</font>

801
00:33:04,730 --> 00:33:11,730
only store data that you absolutely have

802
00:33:07,529 --> 00:33:14,309
to store so for example<font color="#E5E5E5"> if</font><font color="#CCCCCC"> you're if you</font>

803
00:33:11,730 --> 00:33:16,289
if your users typically don't<font color="#E5E5E5"> have a lot</font>

804
00:33:14,309 --> 00:33:18,450
of transactions they maybe buy from you

805
00:33:16,289 --> 00:33:20,100
once or twice a year you know you might

806
00:33:18,450 --> 00:33:21,299
actually be<font color="#E5E5E5"> better off asking them to</font>

807
00:33:20,100 --> 00:33:22,980
re-enter their credit card<font color="#CCCCCC"> information</font>

808
00:33:21,299 --> 00:33:25,230
each time instead of taking all the

809
00:33:22,980 --> 00:33:27,210
liability of storing thousands of credit

810
00:33:25,230 --> 00:33:31,740
cards on your<font color="#E5E5E5"> servers</font>

811
00:33:27,210 --> 00:33:33,210
and you also for any sensitive

812
00:33:31,740 --> 00:33:35,159
information that you're storing or just

813
00:33:33,210 --> 00:33:37,320
in general you<font color="#CCCCCC"> don't want to allow any</font>

814
00:33:35,159 --> 00:33:39,870
direct channels to the<font color="#CCCCCC"> backend servers</font>

815
00:33:37,320 --> 00:33:41,189
so you don't want to give people<font color="#E5E5E5"> even</font>

816
00:33:39,870 --> 00:33:43,199
you know you even<font color="#E5E5E5"> want to limit this</font>

817
00:33:41,190 --> 00:33:45,870
internally as much as possible the

818
00:33:43,200 --> 00:33:47,730
developers obviously need access to to

819
00:33:45,870 --> 00:33:49,469
the database to troubleshoot but you

820
00:33:47,730 --> 00:33:51,059
want to make sure that<font color="#E5E5E5"> that is screened</font>

821
00:33:49,470 --> 00:33:53,610
off as much as possible so that only<font color="#E5E5E5"> the</font>

822
00:33:51,059 --> 00:33:55,320
people<font color="#CCCCCC"> who need access to those systems</font>

823
00:33:53,610 --> 00:33:57,809
can directly get to them everybody else

824
00:33:55,320 --> 00:33:59,700
has<font color="#CCCCCC"> to go through the official system</font>

825
00:33:57,809 --> 00:34:01,590
which<font color="#CCCCCC"> will have the audit trail and</font>

826
00:33:59,700 --> 00:34:04,919
everything else that you can you can

827
00:34:01,590 --> 00:34:06,570
follow in case something happens and we

828
00:34:04,919 --> 00:34:09,389
saw the screenshot earlier of the<font color="#E5E5E5"> log</font>

829
00:34:06,570 --> 00:34:11,369
data in the web server<font color="#E5E5E5"> root don't store</font>

830
00:34:09,389 --> 00:34:13,020
anything in the web server<font color="#E5E5E5"> root that</font>

831
00:34:11,369 --> 00:34:15,810
doesn't belong there<font color="#E5E5E5"> that's not intended</font>

832
00:34:13,020 --> 00:34:20,280
for public consumption log files debug

833
00:34:15,810 --> 00:34:21,839
test code unused frameworks and just get

834
00:34:20,280 --> 00:34:24,510
rid of<font color="#E5E5E5"> all that stuff only put</font>

835
00:34:21,839 --> 00:34:28,560
production code in the web server<font color="#CCCCCC"> root</font>

836
00:34:24,510 --> 00:34:34,589
and of<font color="#E5E5E5"> course don't roll your own crypto</font>

837
00:34:28,560 --> 00:34:36,210
but we already know<font color="#CCCCCC"> that so wanted to</font>

838
00:34:34,589 --> 00:34:38,639
take a couple<font color="#E5E5E5"> of minutes</font><font color="#CCCCCC"> to talk</font><font color="#E5E5E5"> about</font>

839
00:34:36,210 --> 00:34:40,830
<font color="#E5E5E5">kind of taking a step back and talk</font>

840
00:34:38,639 --> 00:34:44,839
about what this<font color="#CCCCCC"> means in terms of the</font>

841
00:34:40,830 --> 00:34:44,839
broader security development lifecycle

842
00:34:45,290 --> 00:34:50,580
so there's a lot<font color="#CCCCCC"> of different you know</font>

843
00:34:49,139 --> 00:34:54,419
things out there a lot<font color="#CCCCCC"> of different</font>

844
00:34:50,580 --> 00:34:56,310
<font color="#E5E5E5">methodologies for securing the</font>

845
00:34:54,418 --> 00:34:59,759
development lifecycle so Microsoft has

846
00:34:56,310 --> 00:35:02,279
had their sdl for for a long time and

847
00:34:59,760 --> 00:35:04,230
and they've you<font color="#CCCCCC"> know depending on who</font>

848
00:35:02,280 --> 00:35:06,599
<font color="#E5E5E5">you ask that has worked out pretty well</font>

849
00:35:04,230 --> 00:35:08,520
for them I certainly say<font color="#CCCCCC"> that you know</font>

850
00:35:06,599 --> 00:35:12,320
current windows is more secure<font color="#CCCCCC"> than</font>

851
00:35:08,520 --> 00:35:15,780
previous versions of Windows<font color="#E5E5E5"> Digital has</font>

852
00:35:12,320 --> 00:35:17,640
has these touch points and I'll talk

853
00:35:15,780 --> 00:35:21,150
<font color="#E5E5E5">about that in a second that basically</font>

854
00:35:17,640 --> 00:35:22,410
lets you focus on what are the

855
00:35:21,150 --> 00:35:23,700
activities<font color="#E5E5E5"> that you should be</font>

856
00:35:22,410 --> 00:35:25,740
incorporating into your development

857
00:35:23,700 --> 00:35:29,970
lifecycle regardless of with what

858
00:35:25,740 --> 00:35:34,950
methodology you're using and then

859
00:35:29,970 --> 00:35:36,750
there's a wasp clasp which is a again to

860
00:35:34,950 --> 00:35:39,000
be designed<font color="#E5E5E5"> to be a lightweight process</font>

861
00:35:36,750 --> 00:35:41,210
that doesn't impose sort of a specific

862
00:35:39,000 --> 00:35:43,650
methodology

863
00:35:41,210 --> 00:35:46,410
so a little bit more about<font color="#CCCCCC"> the touch</font>

864
00:35:43,650 --> 00:35:50,460
points so the touch points are really a

865
00:35:46,410 --> 00:35:53,069
way to adapt security to whatever

866
00:35:50,460 --> 00:35:55,590
existing methodology you might be using

867
00:35:53,070 --> 00:35:57,150
because let's face it there are there

868
00:35:55,590 --> 00:35:59,670
are<font color="#CCCCCC"> a couple of subjects that are</font>

869
00:35:57,150 --> 00:36:02,400
completely taboo with any developer

870
00:35:59,670 --> 00:36:04,650
religion politics and development

871
00:36:02,400 --> 00:36:07,710
methodology you don't mess<font color="#CCCCCC"> with that and</font>

872
00:36:04,650 --> 00:36:09,960
so a lot<font color="#CCCCCC"> of these methodologies that say</font>

873
00:36:07,710 --> 00:36:11,520
you must do waterfall or you must<font color="#E5E5E5"> do</font>

874
00:36:09,960 --> 00:36:13,710
agile they're not going to work because

875
00:36:11,520 --> 00:36:15,300
<font color="#E5E5E5">most organizations use some hybrid</font>

876
00:36:13,710 --> 00:36:17,250
approach they have their own methodology

877
00:36:15,300 --> 00:36:18,570
already in place and they're not<font color="#CCCCCC"> going</font>

878
00:36:17,250 --> 00:36:20,460
to want<font color="#CCCCCC"> to pick</font><font color="#E5E5E5"> they're not going to</font>

879
00:36:18,570 --> 00:36:24,060
want<font color="#E5E5E5"> to break</font><font color="#CCCCCC"> that just to adopt a more</font>

880
00:36:20,460 --> 00:36:26,430
secure way of doing things so the touch

881
00:36:24,060 --> 00:36:29,610
points here are basically a way to say

882
00:36:26,430 --> 00:36:31,919
<font color="#E5E5E5">okay at which points in the process</font><font color="#CCCCCC"> and</font>

883
00:36:29,610 --> 00:36:34,200
these these boxes that<font color="#E5E5E5"> you see at</font><font color="#CCCCCC"> the</font>

884
00:36:31,920 --> 00:36:35,580
bottom basically exist in any

885
00:36:34,200 --> 00:36:36,660
methodology you're going to have

886
00:36:35,580 --> 00:36:39,150
requirements you're going to have

887
00:36:36,660 --> 00:36:42,270
architecture and design have a test plan

888
00:36:39,150 --> 00:36:44,810
every the one the one thing that every

889
00:36:42,270 --> 00:36:47,700
development effort produces is code

890
00:36:44,810 --> 00:36:49,860
testing and test results and<font color="#E5E5E5"> then what</font>

891
00:36:47,700 --> 00:36:53,339
<font color="#E5E5E5">feedback from the field once it's</font>

892
00:36:49,860 --> 00:36:55,350
deployed and so you know<font color="#E5E5E5"> again we want</font>

893
00:36:53,340 --> 00:36:57,300
to start<font color="#CCCCCC"> with our abuse cases we want to</font>

894
00:36:55,350 --> 00:37:00,509
think<font color="#E5E5E5"> of the ways that the system can be</font>

895
00:36:57,300 --> 00:37:01,830
abused and then security requirements we

896
00:37:00,510 --> 00:37:03,150
want to make sure that<font color="#CCCCCC"> we're asking the</font>

897
00:37:01,830 --> 00:37:07,680
right questions as I mentioned before

898
00:37:03,150 --> 00:37:09,990
and risk analysis<font color="#E5E5E5"> so we need to be</font>

899
00:37:07,680 --> 00:37:13,049
<font color="#E5E5E5">thinking about what are</font><font color="#CCCCCC"> the risks that</font>

900
00:37:09,990 --> 00:37:16,049
<font color="#E5E5E5">our application has what are the</font>

901
00:37:13,050 --> 00:37:18,750
possible abuse cases there and then as

902
00:37:16,050 --> 00:37:20,970
we're generating our test plans we want

903
00:37:18,750 --> 00:37:22,950
to make sure<font color="#E5E5E5"> that we're testing those</font>

904
00:37:20,970 --> 00:37:26,160
risks that we identified<font color="#E5E5E5"> that we're</font>

905
00:37:22,950 --> 00:37:28,439
developing test cases for that and then

906
00:37:26,160 --> 00:37:30,990
once we<font color="#E5E5E5"> where the stage of generating</font>

907
00:37:28,440 --> 00:37:33,990
code we want to perform code review and

908
00:37:30,990 --> 00:37:36,450
the key<font color="#CCCCCC"> here is to</font><font color="#E5E5E5"> do it as early in the</font>

909
00:37:33,990 --> 00:37:38,850
process as possible so once you've

910
00:37:36,450 --> 00:37:39,990
reached integration testing or once

911
00:37:38,850 --> 00:37:41,520
you're you know close to<font color="#CCCCCC"> going</font><font color="#E5E5E5"> to</font>

912
00:37:39,990 --> 00:37:43,229
production that's almost<font color="#E5E5E5"> too late</font>

913
00:37:41,520 --> 00:37:45,990
<font color="#E5E5E5">because in some cases that could be</font>

914
00:37:43,230 --> 00:37:47,550
months or years from from the time that

915
00:37:45,990 --> 00:37:48,779
<font color="#CCCCCC">you started developing the software</font><font color="#E5E5E5"> and</font>

916
00:37:47,550 --> 00:37:50,160
a lot<font color="#CCCCCC"> of the people who wrote the code</font>

917
00:37:48,780 --> 00:37:51,480
may not be<font color="#E5E5E5"> around anymore so then you</font>

918
00:37:50,160 --> 00:37:54,330
have the situation<font color="#CCCCCC"> of trying to fix</font>

919
00:37:51,480 --> 00:37:56,010
somebody else's code and it's always

920
00:37:54,330 --> 00:37:57,540
extreme I mean I go back and<font color="#E5E5E5"> look at my</font>

921
00:37:56,010 --> 00:37:59,670
own code from two years ago I can barely

922
00:37:57,540 --> 00:38:03,240
read it much less somebody else's code

923
00:37:59,670 --> 00:38:04,620
so it's very important to push that code

924
00:38:03,240 --> 00:38:07,080
review as early in the process as

925
00:38:04,620 --> 00:38:08,870
possible and so one of the ways to do

926
00:38:07,080 --> 00:38:11,790
that is to basically give developers

927
00:38:08,870 --> 00:38:13,470
sort of a spell check tool that will

928
00:38:11,790 --> 00:38:15,810
catch a lot<font color="#E5E5E5"> of the</font><font color="#CCCCCC"> low-hanging fruit as</font>

929
00:38:13,470 --> 00:38:17,759
soon as they check a new version into

930
00:38:15,810 --> 00:38:20,279
svn or whatever the reap whatever repo

931
00:38:17,760 --> 00:38:22,350
they're using and give them an idea of

932
00:38:20,280 --> 00:38:24,750
where<font color="#E5E5E5"> those where those potential issues</font>

933
00:38:22,350 --> 00:38:26,940
are now from what we've seen<font color="#CCCCCC"> of that</font>

934
00:38:24,750 --> 00:38:28,950
that's<font color="#E5E5E5"> not quite as effective as looking</font>

935
00:38:26,940 --> 00:38:31,530
<font color="#E5E5E5">at you know an integrated system and</font>

936
00:38:28,950 --> 00:38:33,299
doing doing end-to-end testing but it

937
00:38:31,530 --> 00:38:35,100
catches about sixty to seventy percent

938
00:38:33,300 --> 00:38:37,830
of the issues that you would later find

939
00:38:35,100 --> 00:38:39,660
and it's much much cheaper much easier

940
00:38:37,830 --> 00:38:41,759
to fix those things early in the

941
00:38:39,660 --> 00:38:43,740
development process when the<font color="#CCCCCC"> developer</font>

942
00:38:41,760 --> 00:38:45,120
is<font color="#CCCCCC"> still working on it they're still</font>

943
00:38:43,740 --> 00:38:46,410
around they know the code they just

944
00:38:45,120 --> 00:38:49,319
looked at<font color="#E5E5E5"> it yesterday so they know how</font>

945
00:38:46,410 --> 00:38:50,910
to fix<font color="#E5E5E5"> it tomorrow and and so that makes</font>

946
00:38:49,320 --> 00:38:53,340
it gives a lot more context for the

947
00:38:50,910 --> 00:38:55,560
developer rather and and the important

948
00:38:53,340 --> 00:38:57,750
thing is to do<font color="#E5E5E5"> this inside of their IDE</font>

949
00:38:55,560 --> 00:38:59,820
you don't want to throw 100 page PDF

950
00:38:57,750 --> 00:39:01,440
report at them and say oh you've got all

951
00:38:59,820 --> 00:39:03,620
these problems<font color="#CCCCCC"> all these sequel</font>

952
00:39:01,440 --> 00:39:06,240
injection cross-site scripting go fix it

953
00:39:03,620 --> 00:39:08,940
it's much better to provide them you

954
00:39:06,240 --> 00:39:10,770
know context specific advice right in

955
00:39:08,940 --> 00:39:15,030
their familiar development environment

956
00:39:10,770 --> 00:39:17,400
and so once we get to<font color="#E5E5E5"> the testing stage</font>

957
00:39:15,030 --> 00:39:19,170
again we're doing more risk analysis

958
00:39:17,400 --> 00:39:20,370
because now we're<font color="#E5E5E5"> thinking we're making</font>

959
00:39:19,170 --> 00:39:22,500
sure we have<font color="#E5E5E5"> everything covered and</font>

960
00:39:20,370 --> 00:39:26,190
we're<font color="#CCCCCC"> coming up</font><font color="#E5E5E5"> with more test cases and</font>

961
00:39:22,500 --> 00:39:28,620
we make<font color="#CCCCCC"> sure that we're doing closing</font>

962
00:39:26,190 --> 00:39:30,750
<font color="#E5E5E5">the feedback loop there and then of</font>

963
00:39:28,620 --> 00:39:32,460
course<font color="#E5E5E5"> pen testing enters the arena so</font>

964
00:39:30,750 --> 00:39:34,050
you know pen testing a lot of times

965
00:39:32,460 --> 00:39:35,730
people see it<font color="#E5E5E5"> kind of as the end-all</font>

966
00:39:34,050 --> 00:39:36,660
be-all oh yeah we're<font color="#E5E5E5"> going to we're</font>

967
00:39:35,730 --> 00:39:37,950
going<font color="#E5E5E5"> to write the code we're going to</font>

968
00:39:36,660 --> 00:39:39,060
test it then we're going to<font color="#E5E5E5"> a quick pen</font>

969
00:39:37,950 --> 00:39:42,330
test and then we're going to roll to

970
00:39:39,060 --> 00:39:44,370
production done and you know<font color="#CCCCCC"> really the</font>

971
00:39:42,330 --> 00:39:47,009
pen test is kind of a last resort it's

972
00:39:44,370 --> 00:39:48,810
it's<font color="#E5E5E5"> what did you miss if you're</font>

973
00:39:47,010 --> 00:39:51,390
<font color="#E5E5E5">building security into the into this</font>

974
00:39:48,810 --> 00:39:52,980
process what did<font color="#E5E5E5"> you miss earlier in the</font>

975
00:39:51,390 --> 00:39:56,759
process it's it's it's a safeguard

976
00:39:52,980 --> 00:39:58,650
basically and<font color="#E5E5E5"> then of course that</font>

977
00:39:56,760 --> 00:40:01,860
continues on through deployment are you

978
00:39:58,650 --> 00:40:03,660
going to do another pen test a repeated

979
00:40:01,860 --> 00:40:05,700
pen testing of the<font color="#CCCCCC"> production system</font>

980
00:40:03,660 --> 00:40:08,279
every year<font color="#CCCCCC"> or whatever</font><font color="#E5E5E5"> the requirements</font>

981
00:40:05,700 --> 00:40:10,109
are and then make<font color="#CCCCCC"> sure that your main</font>

982
00:40:08,280 --> 00:40:12,990
the system securely during your daily

983
00:40:10,110 --> 00:40:15,240
operations and that<font color="#CCCCCC"> you create things</font>

984
00:40:12,990 --> 00:40:17,609
like you<font color="#CCCCCC"> know</font><font color="#E5E5E5"> security operations</font>

985
00:40:15,240 --> 00:40:18,750
manuals that tell people you know the

986
00:40:17,610 --> 00:40:20,100
things that they should be<font color="#CCCCCC"> watching out</font>

987
00:40:18,750 --> 00:40:28,050
for as they're interacting with the

988
00:40:20,100 --> 00:40:29,490
system day to day and so besom is is an

989
00:40:28,050 --> 00:40:32,610
initiative<font color="#E5E5E5"> that citadels started a</font>

990
00:40:29,490 --> 00:40:36,750
couple of years<font color="#E5E5E5"> ago that is fairly</font>

991
00:40:32,610 --> 00:40:39,540
unique because unlike a lot of models

992
00:40:36,750 --> 00:40:42,420
out there it doesn't<font color="#CCCCCC"> just kind of say</font>

993
00:40:39,540 --> 00:40:44,400
here's<font color="#CCCCCC"> what we think you should</font><font color="#E5E5E5"> do in</font>

994
00:40:42,420 --> 00:40:45,810
terms of software security because we've

995
00:40:44,400 --> 00:40:48,000
spent a lot<font color="#CCCCCC"> of time thinking about this</font>

996
00:40:45,810 --> 00:40:50,850
and we know<font color="#CCCCCC"> worked with quite a few</font>

997
00:40:48,000 --> 00:40:55,280
people it's<font color="#E5E5E5"> actually based on real</font>

998
00:40:50,850 --> 00:41:00,210
software<font color="#E5E5E5"> security initiatives out there</font>

999
00:40:55,280 --> 00:41:01,380
and so you see all the names on<font color="#E5E5E5"> the</font><font color="#CCCCCC"> on</font>

1000
00:41:00,210 --> 00:41:03,900
the screen here<font color="#E5E5E5"> these are all</font>

1001
00:41:01,380 --> 00:41:05,160
participants you know obviously some

1002
00:41:03,900 --> 00:41:09,180
heavy hitters here these are all

1003
00:41:05,160 --> 00:41:11,279
participants in the<font color="#CCCCCC"> besom program along</font>

1004
00:41:09,180 --> 00:41:13,799
with you<font color="#E5E5E5"> know a lot of other companies</font>

1005
00:41:11,280 --> 00:41:15,600
there's 51 total companies that that are

1006
00:41:13,800 --> 00:41:19,350
<font color="#E5E5E5">participating in</font><font color="#CCCCCC"> vcm</font><font color="#E5E5E5"> and it's now in its</font>

1007
00:41:15,600 --> 00:41:22,200
fourth iteration and there are a hundred

1008
00:41:19,350 --> 00:41:24,240
and<font color="#E5E5E5"> eleven different measurements that</font>

1009
00:41:22,200 --> 00:41:26,819
that it different parameters different

1010
00:41:24,240 --> 00:41:30,270
activities that it asks each each of

1011
00:41:26,820 --> 00:41:32,010
those participants<font color="#CCCCCC"> about and the the</font>

1012
00:41:30,270 --> 00:41:34,950
unique thing there is that we we<font color="#CCCCCC"> ask</font>

1013
00:41:32,010 --> 00:41:36,570
them not what do you think you should<font color="#CCCCCC"> be</font>

1014
00:41:34,950 --> 00:41:38,220
<font color="#CCCCCC">doing in terms of application security</font>

1015
00:41:36,570 --> 00:41:40,650
you know what are you planning on doing

1016
00:41:38,220 --> 00:41:43,379
but what are you doing today and and and

1017
00:41:40,650 --> 00:41:45,300
then we ask questions around how is it

1018
00:41:43,380 --> 00:41:47,720
working what<font color="#CCCCCC"> are the metrics and so</font>

1019
00:41:45,300 --> 00:41:50,880
forth so<font color="#CCCCCC"> that you can</font><font color="#E5E5E5"> get a good</font><font color="#CCCCCC"> idea of</font>

1020
00:41:47,720 --> 00:41:54,540
not only where you rank compared to your

1021
00:41:50,880 --> 00:41:56,640
peers but also what what your next step

1022
00:41:54,540 --> 00:42:01,770
should be to improve your your software

1023
00:41:56,640 --> 00:42:04,430
security posture so here's here's a

1024
00:42:01,770 --> 00:42:06,900
quick overview<font color="#CCCCCC"> I mentioned 111</font>

1025
00:42:04,430 --> 00:42:10,290
measurements they're divided into four

1026
00:42:06,900 --> 00:42:13,230
domains governance intelligence the

1027
00:42:10,290 --> 00:42:14,550
touch points and deployment and you can

1028
00:42:13,230 --> 00:42:17,280
see all<font color="#E5E5E5"> these different activities that</font>

1029
00:42:14,550 --> 00:42:18,570
fall<font color="#E5E5E5"> into those boxes and</font><font color="#CCCCCC"> you know for</font>

1030
00:42:17,280 --> 00:42:20,010
example<font color="#CCCCCC"> pen testing falls under</font>

1031
00:42:18,570 --> 00:42:21,120
deployment

1032
00:42:20,010 --> 00:42:22,830
we talked you know we talked a lot about

1033
00:42:21,120 --> 00:42:24,540
the<font color="#E5E5E5"> touch points the architecture</font>

1034
00:42:22,830 --> 00:42:27,360
analysis the code review and the

1035
00:42:24,540 --> 00:42:28,680
security testing piece of it and so

1036
00:42:27,360 --> 00:42:30,420
basically the way to think of this<font color="#E5E5E5"> is</font>

1037
00:42:28,680 --> 00:42:31,859
that you know if you're if you're an

1038
00:42:30,420 --> 00:42:36,300
organization and you want to<font color="#E5E5E5"> find out</font>

1039
00:42:31,860 --> 00:42:38,970
what should I be doing to to improve the

1040
00:42:36,300 --> 00:42:41,790
state of my my software security here's

1041
00:42:38,970 --> 00:42:43,950
a blueprint based on what 51 very well

1042
00:42:41,790 --> 00:42:45,690
respected companies are<font color="#E5E5E5"> actually doing</font>

1043
00:42:43,950 --> 00:42:47,220
and have done in the past that has

1044
00:42:45,690 --> 00:42:50,480
worked for them so it's very<font color="#CCCCCC"> much an</font>

1045
00:42:47,220 --> 00:42:52,709
empirical approach to it and it lets you

1046
00:42:50,480 --> 00:42:57,000
make sure that<font color="#E5E5E5"> you're you know sort of</font>

1047
00:42:52,710 --> 00:43:00,600
keeping up with the state of the art so

1048
00:42:57,000 --> 00:43:03,510
in conclusion<font color="#E5E5E5"> I'm going to say</font><font color="#CCCCCC"> this one</font>

1049
00:43:00,600 --> 00:43:06,900
more time build security in so you

1050
00:43:03,510 --> 00:43:09,090
really have<font color="#E5E5E5"> to think about security in</font>

1051
00:43:06,900 --> 00:43:11,820
your development lifecycle from day one

1052
00:43:09,090 --> 00:43:14,160
bold on solutions don't work and pen

1053
00:43:11,820 --> 00:43:15,750
testing right before you go live is it's

1054
00:43:14,160 --> 00:43:17,040
<font color="#E5E5E5">really just a you know an exercise in</font>

1055
00:43:15,750 --> 00:43:18,330
futility because you're never<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to</font>

1056
00:43:17,040 --> 00:43:19,830
<font color="#CCCCCC">have time to fix all</font><font color="#E5E5E5"> the things</font><font color="#CCCCCC"> that</font>

1057
00:43:18,330 --> 00:43:23,340
you're going<font color="#CCCCCC"> to find if that's the first</font>

1058
00:43:19,830 --> 00:43:25,770
time<font color="#E5E5E5"> your pen testing so most developers</font>

1059
00:43:23,340 --> 00:43:27,660
are not incentivized for security they

1060
00:43:25,770 --> 00:43:30,480
are very<font color="#CCCCCC"> much focused</font><font color="#E5E5E5"> on implementing</font>

1061
00:43:27,660 --> 00:43:31,500
new functionality and features and you

1062
00:43:30,480 --> 00:43:32,940
know we<font color="#E5E5E5"> really have to make</font><font color="#CCCCCC"> sure that</font>

1063
00:43:31,500 --> 00:43:34,140
we're speaking their language when we're

1064
00:43:32,940 --> 00:43:35,700
bridging the gap we don't want to talk

1065
00:43:34,140 --> 00:43:39,950
about exploits and vulnerabilities we

1066
00:43:35,700 --> 00:43:39,950
want to talk about bugs and fixes and

1067
00:43:40,610 --> 00:43:46,740
input validation is the root of all evil

1068
00:43:44,010 --> 00:43:49,940
really it<font color="#CCCCCC"> really is i mean if if you can</font>

1069
00:43:46,740 --> 00:43:53,310
<font color="#CCCCCC">get good whitelist validation working</font>

1070
00:43:49,940 --> 00:43:54,780
that that quashes you know seventy

1071
00:43:53,310 --> 00:43:56,970
eighty percent of what's out there<font color="#CCCCCC"> in</font>

1072
00:43:54,780 --> 00:43:59,310
terms of ways that attackers can mess

1073
00:43:56,970 --> 00:44:00,959
with your system and output encoding is

1074
00:43:59,310 --> 00:44:02,940
is always going<font color="#E5E5E5"> to be your fallback</font>

1075
00:44:00,960 --> 00:44:05,730
because<font color="#E5E5E5"> just in case you missed</font>

1076
00:44:02,940 --> 00:44:07,950
<font color="#E5E5E5">something then you can make sure that</font>

1077
00:44:05,730 --> 00:44:10,620
it's sort<font color="#E5E5E5"> of defanged when it gets</font>

1078
00:44:07,950 --> 00:44:12,839
output back to the user so I'm<font color="#E5E5E5"> getting</font>

1079
00:44:10,620 --> 00:44:15,750
the STFU sign so I let's take this

1080
00:44:12,840 --> 00:44:19,070
offline thanks everybody<font color="#CCCCCC"> for coming out</font>

1081
00:44:15,750 --> 00:44:19,070
I appreciate<font color="#E5E5E5"> the time</font>

1082
00:44:19,390 --> 00:44:21,450
you

