1
00:00:15,679 --> 00:00:17,359
all right everybody welcome to my talk

2
00:00:17,359 --> 00:00:19,039
introduction to inner loop security

3
00:00:19,039 --> 00:00:22,400
shifting left but better

4
00:00:22,400 --> 00:00:24,400
so quick overview today we won't uh

5
00:00:24,400 --> 00:00:26,080
spend much time on this slide tell you a

6
00:00:26,080 --> 00:00:28,160
little bit about myself i'm first time

7
00:00:28,160 --> 00:00:30,480
rva sex speaker so super excited to be

8
00:00:30,480 --> 00:00:33,040
here i've been doing this work in some

9
00:00:33,040 --> 00:00:35,920
way shape or form for about 17 years now

10
00:00:35,920 --> 00:00:37,760
i started off as a what we would now

11
00:00:37,760 --> 00:00:39,840
call a full stack developer what that

12
00:00:39,840 --> 00:00:41,600
really meant was i knew delphi and

13
00:00:41,600 --> 00:00:44,000
fortran and databases and everything in

14
00:00:44,000 --> 00:00:44,960
between

15
00:00:44,960 --> 00:00:47,200
ultimately moved into consulting where

16
00:00:47,200 --> 00:00:49,200
i've had a very exciting career spent

17
00:00:49,200 --> 00:00:51,039
some time with a little boutique firm by

18
00:00:51,039 --> 00:00:52,640
the name of aspect security and i'm

19
00:00:52,640 --> 00:00:55,039
super proud of working with the founders

20
00:00:55,039 --> 00:00:56,719
of owasp and a whole bunch of other

21
00:00:56,719 --> 00:00:58,960
people who are smarter than me i did

22
00:00:58,960 --> 00:01:01,520
some time in big4 where i worked at ey

23
00:01:01,520 --> 00:01:03,600
and led our defsec ops for financial

24
00:01:03,600 --> 00:01:05,519
services so working with some of the

25
00:01:05,519 --> 00:01:07,280
biggest and most mature applications

26
00:01:07,280 --> 00:01:09,200
security programs in the world and

27
00:01:09,200 --> 00:01:10,640
scaling them

28
00:01:10,640 --> 00:01:12,799
passionate about really everything i do

29
00:01:12,799 --> 00:01:15,200
around apsack and def secops as will

30
00:01:15,200 --> 00:01:17,200
probably be obvious in this talk i think

31
00:01:17,200 --> 00:01:19,520
we do it all wrong um you know this

32
00:01:19,520 --> 00:01:21,600
whole talk is based around how i think

33
00:01:21,600 --> 00:01:25,280
shift left itself is particularly flawed

34
00:01:25,280 --> 00:01:27,280
then i'm a big believer in

35
00:01:27,280 --> 00:01:29,520
developer enablement and just making

36
00:01:29,520 --> 00:01:31,600
things easier for developers making

37
00:01:31,600 --> 00:01:33,759
security the path of least resistance

38
00:01:33,759 --> 00:01:36,560
and when we make security easy

39
00:01:36,560 --> 00:01:38,320
it will just happen and people will do

40
00:01:38,320 --> 00:01:39,280
it

41
00:01:39,280 --> 00:01:40,960
i'm really fortunate married my high

42
00:01:40,960 --> 00:01:42,640
school sweetheart i like video games

43
00:01:42,640 --> 00:01:44,240
hiking guitar

44
00:01:44,240 --> 00:01:45,920
next few weeks are particularly exciting

45
00:01:45,920 --> 00:01:48,079
to me if anybody plays mmos we've got a

46
00:01:48,079 --> 00:01:50,240
big expansion for final fantasy 14

47
00:01:50,240 --> 00:01:52,320
coming out if you like fantasy books

48
00:01:52,320 --> 00:01:53,920
we've got will of time coming out on

49
00:01:53,920 --> 00:01:56,479
amazon i couldn't possibly be any more

50
00:01:56,479 --> 00:01:59,200
stoked for that

51
00:01:59,200 --> 00:02:02,000
so thesis for today's talk shift left is

52
00:02:02,000 --> 00:02:04,479
an outdated sentiment and it's no longer

53
00:02:04,479 --> 00:02:06,799
relevant in the world of agile and def

54
00:02:06,799 --> 00:02:09,840
devsecops it's developed into a culture

55
00:02:09,840 --> 00:02:12,800
where we punish developers for taking an

56
00:02:12,800 --> 00:02:15,360
interest in security and ultimately

57
00:02:15,360 --> 00:02:17,920
there's got to be a better way

58
00:02:17,920 --> 00:02:20,560
so the end result of this talk is really

59
00:02:20,560 --> 00:02:23,280
i want everybody in here to think about

60
00:02:23,280 --> 00:02:25,760
developers your development teams and

61
00:02:25,760 --> 00:02:28,160
the impact that we have on them as cyber

62
00:02:28,160 --> 00:02:30,239
security practitioners

63
00:02:30,239 --> 00:02:31,840
so i want this to be pretty interactive

64
00:02:31,840 --> 00:02:32,640
so

65
00:02:32,640 --> 00:02:34,239
show of hands

66
00:02:34,239 --> 00:02:36,160
let's start off easy how many of you all

67
00:02:36,160 --> 00:02:38,800
are in cyber security

68
00:02:38,800 --> 00:02:40,239
all right pretty much everybody is

69
00:02:40,239 --> 00:02:43,280
anybody a developer

70
00:02:43,920 --> 00:02:46,560
half hand all right how many of you

71
00:02:46,560 --> 00:02:48,160
write scripts even if you're not a

72
00:02:48,160 --> 00:02:49,440
developer

73
00:02:49,440 --> 00:02:51,440
so quite a few people right yeah i would

74
00:02:51,440 --> 00:02:52,959
argue to be in security you have to be

75
00:02:52,959 --> 00:02:55,200
able to do at least some level of coding

76
00:02:55,200 --> 00:02:56,800
how many of you are on an appsec team or

77
00:02:56,800 --> 00:02:59,200
do appsec

78
00:02:59,200 --> 00:03:01,120
all right a handful

79
00:03:01,120 --> 00:03:04,000
how many of you have an apsec team at

80
00:03:04,000 --> 00:03:05,920
your company even if you're not in

81
00:03:05,920 --> 00:03:08,640
appsec yourself

82
00:03:08,800 --> 00:03:11,040
yes

83
00:03:12,000 --> 00:03:15,040
all right so got a good good mix here

84
00:03:15,040 --> 00:03:16,480
it'd be interesting normally i present

85
00:03:16,480 --> 00:03:18,560
this talk to developers and appsec teams

86
00:03:18,560 --> 00:03:20,560
and devsecops conferences so we'll see

87
00:03:20,560 --> 00:03:23,920
how it goes with the cybersecurity group

88
00:03:23,920 --> 00:03:25,519
so i guess you first of all again this

89
00:03:25,519 --> 00:03:27,519
talk is really about devsecops so we

90
00:03:27,519 --> 00:03:29,840
need to agree on what that means before

91
00:03:29,840 --> 00:03:32,000
we start because probably everyone out

92
00:03:32,000 --> 00:03:34,159
here thinks something different when i

93
00:03:34,159 --> 00:03:37,280
say devsecops right so to just boil this

94
00:03:37,280 --> 00:03:39,760
down make it really simple what i mean

95
00:03:39,760 --> 00:03:42,480
is performing security inside of devops

96
00:03:42,480 --> 00:03:44,319
devops or

97
00:03:44,319 --> 00:03:46,400
doing application security

98
00:03:46,400 --> 00:03:49,519
at speed and at scale

99
00:03:49,519 --> 00:03:51,760
so regardless of your preconceptions

100
00:03:51,760 --> 00:03:54,000
about def secops for the next hour this

101
00:03:54,000 --> 00:03:57,040
is what def sec ops means

102
00:03:57,040 --> 00:03:58,959
so before we talk about shift left right

103
00:03:58,959 --> 00:04:00,239
we just kind of need to level set a

104
00:04:00,239 --> 00:04:01,519
little bit further especially since a

105
00:04:01,519 --> 00:04:03,519
lot of you aren't developers right we

106
00:04:03,519 --> 00:04:04,799
need to understand the software

107
00:04:04,799 --> 00:04:06,959
development life cycle and hopefully

108
00:04:06,959 --> 00:04:09,120
everybody even in security has at least

109
00:04:09,120 --> 00:04:10,640
heard of the software development life

110
00:04:10,640 --> 00:04:11,840
cycle before it's kind of like the

111
00:04:11,840 --> 00:04:14,480
scientific method

112
00:04:14,480 --> 00:04:16,959
it's basically the process that

113
00:04:16,959 --> 00:04:19,279
developers follow the life cycle as

114
00:04:19,279 --> 00:04:20,639
they're writing code

115
00:04:20,639 --> 00:04:22,800
and it goes from there's

116
00:04:22,800 --> 00:04:24,320
tons of these right if you google

117
00:04:24,320 --> 00:04:26,000
software development life cycle you're

118
00:04:26,000 --> 00:04:28,080
going to find a hundred different models

119
00:04:28,080 --> 00:04:30,000
they're all variations of the same thing

120
00:04:30,000 --> 00:04:31,840
they're all correct right but it

121
00:04:31,840 --> 00:04:33,280
basically goes from requirements to

122
00:04:33,280 --> 00:04:35,440
design to implementation to testing to

123
00:04:35,440 --> 00:04:37,440
deployment and then release and

124
00:04:37,440 --> 00:04:38,720
maintenance

125
00:04:38,720 --> 00:04:40,639
it's a very waterfall

126
00:04:40,639 --> 00:04:42,560
concept from back in the day when we

127
00:04:42,560 --> 00:04:44,960
used to write waterfall code um and if

128
00:04:44,960 --> 00:04:47,199
you google it you're going to find this

129
00:04:47,199 --> 00:04:48,800
written in all sorts of different ways

130
00:04:48,800 --> 00:04:50,720
now right we've written it for agile and

131
00:04:50,720 --> 00:04:52,639
it's the same damned thing it's just

132
00:04:52,639 --> 00:04:54,720
inside of an infinity symbol we've

133
00:04:54,720 --> 00:04:57,040
adapted it for devsec ops right where we

134
00:04:57,040 --> 00:04:58,960
just took security and put it around the

135
00:04:58,960 --> 00:05:00,720
infinity symbol

136
00:05:00,720 --> 00:05:01,840
and just

137
00:05:01,840 --> 00:05:04,000
have just messed it up

138
00:05:04,000 --> 00:05:06,560
really badly along the way

139
00:05:06,560 --> 00:05:07,840
but

140
00:05:07,840 --> 00:05:09,840
explaining it in a waterfall way makes

141
00:05:09,840 --> 00:05:12,560
it really easy to understand because

142
00:05:12,560 --> 00:05:14,160
it's linear right and we can all take a

143
00:05:14,160 --> 00:05:15,919
look and we can understand what these

144
00:05:15,919 --> 00:05:18,800
six items on the screen mean

145
00:05:18,800 --> 00:05:21,280
so what do we mean when we talk about

146
00:05:21,280 --> 00:05:23,680
shift left right if any of you have ever

147
00:05:23,680 --> 00:05:26,320
been to any apsec talk ever in your

148
00:05:26,320 --> 00:05:28,160
careers you've probably heard about

149
00:05:28,160 --> 00:05:30,400
shift left right and every appsec talk

150
00:05:30,400 --> 00:05:33,039
starts with some scary numbers and a

151
00:05:33,039 --> 00:05:35,039
graph and we talk about how we find

152
00:05:35,039 --> 00:05:36,960
issues with pen testing

153
00:05:36,960 --> 00:05:39,120
and they're really expensive to fix and

154
00:05:39,120 --> 00:05:41,759
if we find and fix those issues earlier

155
00:05:41,759 --> 00:05:44,400
in the software development life cycle

156
00:05:44,400 --> 00:05:46,639
it's cheaper and we don't takes less

157
00:05:46,639 --> 00:05:48,800
time for us to fix them it costs less

158
00:05:48,800 --> 00:05:50,639
money and depending on whose paper

159
00:05:50,639 --> 00:05:52,479
you're reading those numbers vary

160
00:05:52,479 --> 00:05:56,319
anywhere from 30 to 150 times more

161
00:05:56,319 --> 00:05:58,960
expensive to fix issues in the

162
00:05:58,960 --> 00:06:01,440
requirements phase than in the

163
00:06:01,440 --> 00:06:02,960
maintenance phase

164
00:06:02,960 --> 00:06:05,039
and so this term shift left kind of came

165
00:06:05,039 --> 00:06:07,840
about which referred to all right well

166
00:06:07,840 --> 00:06:09,759
everybody in the world is basically pin

167
00:06:09,759 --> 00:06:11,680
testing even if we're not doing appsec

168
00:06:11,680 --> 00:06:13,440
we're probably pin testing our apps

169
00:06:13,440 --> 00:06:14,560
sometimes

170
00:06:14,560 --> 00:06:15,840
well

171
00:06:15,840 --> 00:06:17,360
let's start doing things earlier right

172
00:06:17,360 --> 00:06:19,120
let's look at static analysis tools

173
00:06:19,120 --> 00:06:20,400
let's talk about

174
00:06:20,400 --> 00:06:22,639
threat modeling hopefully some of you in

175
00:06:22,639 --> 00:06:24,080
this room are as excited about threat

176
00:06:24,080 --> 00:06:25,520
modeling as i am

177
00:06:25,520 --> 00:06:28,400
with the obos top 10 2021 you know wasp

178
00:06:28,400 --> 00:06:30,400
is now saying everybody has to threat

179
00:06:30,400 --> 00:06:32,560
model nist just wrote a paper three

180
00:06:32,560 --> 00:06:34,560
weeks ago that says if you're not threat

181
00:06:34,560 --> 00:06:36,800
modeling today you need to be threat

182
00:06:36,800 --> 00:06:38,560
modeling and not only do you need to be

183
00:06:38,560 --> 00:06:40,479
doing it you should be doing it multiple

184
00:06:40,479 --> 00:06:43,840
times per release for your applications

185
00:06:43,840 --> 00:06:45,039
you know so look forward to that

186
00:06:45,039 --> 00:06:47,199
impacting a lot of you in the very near

187
00:06:47,199 --> 00:06:49,840
future

188
00:06:50,560 --> 00:06:52,960
so to boil it down really simple right

189
00:06:52,960 --> 00:06:54,880
shift left is just

190
00:06:54,880 --> 00:06:56,720
doing things earlier right you'll hear

191
00:06:56,720 --> 00:06:58,720
other people talk about you know shift

192
00:06:58,720 --> 00:07:00,720
everywhere or devops will talk about

193
00:07:00,720 --> 00:07:03,120
shift right it just means doing security

194
00:07:03,120 --> 00:07:05,039
throughout all of this software

195
00:07:05,039 --> 00:07:07,759
development lifecycle regardless of what

196
00:07:07,759 --> 00:07:10,720
yours looks like

197
00:07:12,880 --> 00:07:14,639
all right and so let's let's talk a

198
00:07:14,639 --> 00:07:16,319
little bit about the history of shift

199
00:07:16,319 --> 00:07:18,319
left because i this is one of those

200
00:07:18,319 --> 00:07:19,840
things that you know i've been doing

201
00:07:19,840 --> 00:07:22,240
this again for a long time

202
00:07:22,240 --> 00:07:24,160
i've always heard shift left literally

203
00:07:24,160 --> 00:07:25,759
every vendor talks about it every

204
00:07:25,759 --> 00:07:27,599
conference presentation

205
00:07:27,599 --> 00:07:29,680
so i kind of asked myself well where did

206
00:07:29,680 --> 00:07:32,000
this come from right what started this

207
00:07:32,000 --> 00:07:34,639
shift left thing and you know when did

208
00:07:34,639 --> 00:07:35,440
it

209
00:07:35,440 --> 00:07:37,440
start meaning let's give the developers

210
00:07:37,440 --> 00:07:39,440
tools that are hard to use

211
00:07:39,440 --> 00:07:42,319
analyzers that give them false positives

212
00:07:42,319 --> 00:07:45,120
that print out 700 page pdf reports that

213
00:07:45,120 --> 00:07:47,680
nobody ever reads right like when did

214
00:07:47,680 --> 00:07:49,840
shift left come to mean this and so when

215
00:07:49,840 --> 00:07:52,000
i actually traced it back

216
00:07:52,000 --> 00:07:54,240
shift left actually wasn't even an abset

217
00:07:54,240 --> 00:07:56,000
concept it was an article written in

218
00:07:56,000 --> 00:07:58,720
2001 by larry smith

219
00:07:58,720 --> 00:08:00,319
so that was the first surprise to me

220
00:08:00,319 --> 00:08:02,560
right it wasn't a pen test article it

221
00:08:02,560 --> 00:08:04,479
didn't even talk about

222
00:08:04,479 --> 00:08:07,039
you know stopping pin testing or doing

223
00:08:07,039 --> 00:08:08,400
testing earlier in the software

224
00:08:08,400 --> 00:08:10,560
development life cycle it was a quality

225
00:08:10,560 --> 00:08:13,520
assurance a qa testing article that was

226
00:08:13,520 --> 00:08:15,520
talking about writing

227
00:08:15,520 --> 00:08:17,360
testable code

228
00:08:17,360 --> 00:08:20,080
and doing qa focused testing throughout

229
00:08:20,080 --> 00:08:22,560
the software development life cycle and

230
00:08:22,560 --> 00:08:24,319
this is a quote from larry smith here

231
00:08:24,319 --> 00:08:25,759
you know bugs are cheap when caught

232
00:08:25,759 --> 00:08:27,680
young you can catch bugs earlier by

233
00:08:27,680 --> 00:08:29,840
making qa a part of your development not

234
00:08:29,840 --> 00:08:32,000
just a part of the release process if

235
00:08:32,000 --> 00:08:35,200
you go to any def sec ops talk today

236
00:08:35,200 --> 00:08:37,200
that's probably almost verbatim what a

237
00:08:37,200 --> 00:08:38,479
lot of these people are going to talk

238
00:08:38,479 --> 00:08:41,839
about this was 20 years ago this guy

239
00:08:41,839 --> 00:08:43,919
wrote this so

240
00:08:43,919 --> 00:08:45,760
my question is

241
00:08:45,760 --> 00:08:48,240
why isn't this our reality right like

242
00:08:48,240 --> 00:08:51,440
why how did shift left change meaning

243
00:08:51,440 --> 00:08:53,839
along the way and why did this focus on

244
00:08:53,839 --> 00:08:55,519
qa testing

245
00:08:55,519 --> 00:08:57,360
never happened

246
00:08:57,360 --> 00:08:58,959
and we even got a big quote that i'm not

247
00:08:58,959 --> 00:09:01,440
going to read you here from larry smith

248
00:09:01,440 --> 00:09:03,680
that talks about how embracing qa

249
00:09:03,680 --> 00:09:05,200
testing and doing it throughout the

250
00:09:05,200 --> 00:09:07,200
software development life cycle it's

251
00:09:07,200 --> 00:09:09,360
going to make your life so much easier

252
00:09:09,360 --> 00:09:11,040
it's going to make management think

253
00:09:11,040 --> 00:09:13,600
you're not working at all

254
00:09:13,600 --> 00:09:15,680
because you're working so smart and not

255
00:09:15,680 --> 00:09:17,680
hard and you even kind of cautions on

256
00:09:17,680 --> 00:09:20,080
the very last line but don't let it look

257
00:09:20,080 --> 00:09:23,320
too easy

258
00:09:25,600 --> 00:09:27,600
all right josh so you obviously don't

259
00:09:27,600 --> 00:09:29,279
like shift left

260
00:09:29,279 --> 00:09:31,600
why not right so

261
00:09:31,600 --> 00:09:33,360
security responsibilities are added to

262
00:09:33,360 --> 00:09:35,360
developers without any thought regarding

263
00:09:35,360 --> 00:09:36,560
the impact

264
00:09:36,560 --> 00:09:38,560
who here has static analysis tools in

265
00:09:38,560 --> 00:09:41,200
your organization

266
00:09:41,200 --> 00:09:43,040
who here has said that's a shift left

267
00:09:43,040 --> 00:09:45,839
activity and because it's pluggable into

268
00:09:45,839 --> 00:09:47,279
the ide and has given it to the

269
00:09:47,279 --> 00:09:51,600
developers and forced them to use it

270
00:09:51,600 --> 00:09:53,120
okay there's there was there was a half

271
00:09:53,120 --> 00:09:54,560
hand back there we have one honest

272
00:09:54,560 --> 00:09:56,560
person

273
00:09:56,560 --> 00:09:58,480
it's poorly implemented

274
00:09:58,480 --> 00:10:00,800
it often results in punishing developers

275
00:10:00,800 --> 00:10:02,800
right i'm also not a big fan of security

276
00:10:02,800 --> 00:10:04,959
champions programs right because i've

277
00:10:04,959 --> 00:10:06,959
been in consulting for a while now and i

278
00:10:06,959 --> 00:10:09,040
have seen many security champions

279
00:10:09,040 --> 00:10:10,160
programs

280
00:10:10,160 --> 00:10:11,040
fail

281
00:10:11,040 --> 00:10:13,040
right and the reason they fail or one of

282
00:10:13,040 --> 00:10:14,480
the many reasons

283
00:10:14,480 --> 00:10:16,480
is because they all start with this

284
00:10:16,480 --> 00:10:18,720
nomination program right because we say

285
00:10:18,720 --> 00:10:20,320
okay well we have like

286
00:10:20,320 --> 00:10:22,079
one you know to your point over there of

287
00:10:22,079 --> 00:10:24,480
these apsec unicorns in our organization

288
00:10:24,480 --> 00:10:27,120
we've got like 12 000 apps how on earth

289
00:10:27,120 --> 00:10:29,519
do we possibly scale this program

290
00:10:29,519 --> 00:10:31,200
oh great we have these apps champions

291
00:10:31,200 --> 00:10:33,360
right so we find some poor developers

292
00:10:33,360 --> 00:10:36,000
who you know maybe mentioned owasp or

293
00:10:36,000 --> 00:10:38,079
they found a bug in one of the apps and

294
00:10:38,079 --> 00:10:40,640
we say they would make great champions

295
00:10:40,640 --> 00:10:42,320
you know what we should do we should

296
00:10:42,320 --> 00:10:43,839
give them more work

297
00:10:43,839 --> 00:10:45,920
make them use tools that aren't designed

298
00:10:45,920 --> 00:10:48,240
for developers we should not pay them

299
00:10:48,240 --> 00:10:50,399
anymore we should not give them a cool

300
00:10:50,399 --> 00:10:51,440
title

301
00:10:51,440 --> 00:10:53,440
and then expect them to do all of these

302
00:10:53,440 --> 00:10:55,600
things that our security team is well

303
00:10:55,600 --> 00:10:58,079
trained to do

304
00:10:58,079 --> 00:10:59,760
and then we wonder why our appsec pro

305
00:10:59,760 --> 00:11:02,640
champions programs fail right that right

306
00:11:02,640 --> 00:11:05,279
there is is why they fail

307
00:11:05,279 --> 00:11:07,680
tools aren't designed for developers uh

308
00:11:07,680 --> 00:11:08,399
i

309
00:11:08,399 --> 00:11:10,160
off the top of my head i can't think of

310
00:11:10,160 --> 00:11:12,560
a single application security tool out

311
00:11:12,560 --> 00:11:14,720
there that is designed they may be

312
00:11:14,720 --> 00:11:16,399
marketed towards but they're not

313
00:11:16,399 --> 00:11:18,880
designed to be used by developers

314
00:11:18,880 --> 00:11:21,360
almost all of them take significant work

315
00:11:21,360 --> 00:11:24,320
to configure them to get good results to

316
00:11:24,320 --> 00:11:26,640
tune them to go through

317
00:11:26,640 --> 00:11:28,880
the results to do what we call a triage

318
00:11:28,880 --> 00:11:31,200
to get rid of the false positives

319
00:11:31,200 --> 00:11:33,680
almost all of them are prone to to false

320
00:11:33,680 --> 00:11:34,880
negatives

321
00:11:34,880 --> 00:11:36,160
they take up

322
00:11:36,160 --> 00:11:37,200
time

323
00:11:37,200 --> 00:11:38,880
right especially a lot of the old ide

324
00:11:38,880 --> 00:11:40,640
plugins you give them to the developers

325
00:11:40,640 --> 00:11:42,560
and they click scan and they're single

326
00:11:42,560 --> 00:11:45,040
threaded even so their ides lock up for

327
00:11:45,040 --> 00:11:47,519
hours at a time and then they can't do

328
00:11:47,519 --> 00:11:50,959
their job which is writing code

329
00:11:50,959 --> 00:11:53,200
our developer performance reviews

330
00:11:53,200 --> 00:11:56,240
don't include security right so we want

331
00:11:56,240 --> 00:11:58,720
our developers to be an arm of our

332
00:11:58,720 --> 00:12:01,120
appsec program but then we don't grade

333
00:12:01,120 --> 00:12:02,160
them on it

334
00:12:02,160 --> 00:12:03,920
right at the end of the day developers

335
00:12:03,920 --> 00:12:05,360
jobs are to

336
00:12:05,360 --> 00:12:06,639
write code

337
00:12:06,639 --> 00:12:08,800
and right to push out business features

338
00:12:08,800 --> 00:12:10,720
and business functionality and then we

339
00:12:10,720 --> 00:12:13,680
want them to do do it securely

340
00:12:13,680 --> 00:12:14,959
but that doesn't reflect in their

341
00:12:14,959 --> 00:12:16,639
performance reviews

342
00:12:16,639 --> 00:12:19,120
so how on earth can we expect them to do

343
00:12:19,120 --> 00:12:20,880
things securely if we're not going to

344
00:12:20,880 --> 00:12:22,079
grade them on it

345
00:12:22,079 --> 00:12:24,079
and then finally the value provided by

346
00:12:24,079 --> 00:12:27,440
uh shift left in my opinion is

347
00:12:27,440 --> 00:12:30,000
questionable

348
00:12:30,480 --> 00:12:32,000
i should ask before we started does

349
00:12:32,000 --> 00:12:36,279
anybody here work for a tool vendor

350
00:12:38,160 --> 00:12:39,920
hopefully not last week i presented this

351
00:12:39,920 --> 00:12:41,120
and one of the guys worked for now

352
00:12:41,120 --> 00:12:42,800
secure and

353
00:12:42,800 --> 00:12:44,240
a little uh

354
00:12:44,240 --> 00:12:47,120
felt a little bit bad

355
00:12:48,240 --> 00:12:49,360
all right

356
00:12:49,360 --> 00:12:50,399
so

357
00:12:50,399 --> 00:12:51,920
all right that's a lot of complaining

358
00:12:51,920 --> 00:12:53,519
and talking about the problem right but

359
00:12:53,519 --> 00:12:55,040
we need to come with solutions not

360
00:12:55,040 --> 00:12:57,200
problems so how do i think we can do

361
00:12:57,200 --> 00:13:00,399
this better so come up with what i call

362
00:13:00,399 --> 00:13:02,639
the inner loop and i say i come up with

363
00:13:02,639 --> 00:13:04,399
it but i really didn't

364
00:13:04,399 --> 00:13:06,160
i actually originally discovered this

365
00:13:06,160 --> 00:13:08,639
through a client of mine um and they had

366
00:13:08,639 --> 00:13:10,560
found this really cool article from a

367
00:13:10,560 --> 00:13:12,800
developer at microsoft by the name of

368
00:13:12,800 --> 00:13:15,120
mitch denney and his link is is up here

369
00:13:15,120 --> 00:13:16,720
on the screen if you try to go there it

370
00:13:16,720 --> 00:13:17,839
won't work

371
00:13:17,839 --> 00:13:20,240
the site is now down but if you use the

372
00:13:20,240 --> 00:13:22,160
the internet wayback machine you can go

373
00:13:22,160 --> 00:13:24,480
and you know view the uh blog article

374
00:13:24,480 --> 00:13:25,600
that kind of drove this whole

375
00:13:25,600 --> 00:13:26,880
presentation

376
00:13:26,880 --> 00:13:29,519
um but it's it's nothing new right

377
00:13:29,519 --> 00:13:30,959
interloop has been around for a long

378
00:13:30,959 --> 00:13:32,480
time it's been used for automotive

379
00:13:32,480 --> 00:13:34,560
manufacturing software development at

380
00:13:34,560 --> 00:13:37,120
microsoft project planning a whole bunch

381
00:13:37,120 --> 00:13:38,959
of other places you know the only thing

382
00:13:38,959 --> 00:13:40,560
innovative i've done is adapt it for

383
00:13:40,560 --> 00:13:43,040
appsec

384
00:13:43,519 --> 00:13:45,279
so what is the inner loop

385
00:13:45,279 --> 00:13:46,639
this will probably be kind of exciting

386
00:13:46,639 --> 00:13:48,320
for the developers in the room maybe a

387
00:13:48,320 --> 00:13:50,639
little bit boring for everyone else so

388
00:13:50,639 --> 00:13:52,399
we'll see how this goes but the inner

389
00:13:52,399 --> 00:13:54,160
loop you can kind of think about it

390
00:13:54,160 --> 00:13:55,519
right if you think about the developer

391
00:13:55,519 --> 00:13:57,680
software development life cycle

392
00:13:57,680 --> 00:13:59,760
the inner loop is everything from the

393
00:13:59,760 --> 00:14:01,760
time the developers put their fingers on

394
00:14:01,760 --> 00:14:03,360
the keyboard

395
00:14:03,360 --> 00:14:07,440
until they push a commit to a local get

396
00:14:07,440 --> 00:14:10,240
or whatever repository nowadays it's

397
00:14:10,240 --> 00:14:11,440
typically get

398
00:14:11,440 --> 00:14:14,000
everything that occurs after the local

399
00:14:14,000 --> 00:14:17,279
git commit is considered the outer loop

400
00:14:17,279 --> 00:14:19,760
so really it's the developers

401
00:14:19,760 --> 00:14:22,720
local development life cycle

402
00:14:22,720 --> 00:14:25,040
anything we would think of a ci cd or

403
00:14:25,040 --> 00:14:27,040
kind of traditional devops is going to

404
00:14:27,040 --> 00:14:30,800
fit into what we call the outer loop

405
00:14:30,800 --> 00:14:32,959
so to kind of put a really ugly graphic

406
00:14:32,959 --> 00:14:34,399
behind this

407
00:14:34,399 --> 00:14:36,720
we kind of have these pre-loop steps

408
00:14:36,720 --> 00:14:38,320
over here to the left right because

409
00:14:38,320 --> 00:14:39,600
there's some things that are going to be

410
00:14:39,600 --> 00:14:41,199
out of scope for this conversation

411
00:14:41,199 --> 00:14:43,519
secure design patterns threat modeling

412
00:14:43,519 --> 00:14:45,360
architecture reviews

413
00:14:45,360 --> 00:14:47,040
training you know all of those things

414
00:14:47,040 --> 00:14:48,480
that are happening outside of

415
00:14:48,480 --> 00:14:50,560
development right that we would

416
00:14:50,560 --> 00:14:52,160
traditionally consider shift left

417
00:14:52,160 --> 00:14:54,720
activities are kind of out of scope for

418
00:14:54,720 --> 00:14:56,480
this model right because at this point

419
00:14:56,480 --> 00:14:58,880
we've already started uh developing but

420
00:14:58,880 --> 00:15:01,120
then the actual inner loop itself

421
00:15:01,120 --> 00:15:03,600
consists typically of four activities

422
00:15:03,600 --> 00:15:05,600
coding building testing and committing

423
00:15:05,600 --> 00:15:07,120
you can see them there in the circle on

424
00:15:07,120 --> 00:15:09,360
the left then here in the middle we've

425
00:15:09,360 --> 00:15:11,680
got a pull request you know to take our

426
00:15:11,680 --> 00:15:14,000
code and push it to a git repository

427
00:15:14,000 --> 00:15:15,600
right at that point that's where we

428
00:15:15,600 --> 00:15:17,680
transition from the inner loop to the

429
00:15:17,680 --> 00:15:19,920
outer loop and then that right circle is

430
00:15:19,920 --> 00:15:21,440
just going you know a little more

431
00:15:21,440 --> 00:15:23,440
detailed right because modern day again

432
00:15:23,440 --> 00:15:25,199
it's it's not waterfall

433
00:15:25,199 --> 00:15:27,199
anymore we've got a lot of developers

434
00:15:27,199 --> 00:15:29,680
writing code pushing out features making

435
00:15:29,680 --> 00:15:31,759
commits right so within the outer loop

436
00:15:31,759 --> 00:15:33,920
it's it's really a whole lot of

437
00:15:33,920 --> 00:15:34,880
different

438
00:15:34,880 --> 00:15:37,040
inner loops happening all at the same

439
00:15:37,040 --> 00:15:39,199
time that are pushing to that same outer

440
00:15:39,199 --> 00:15:41,199
loop right because it's again where you

441
00:15:41,199 --> 00:15:43,040
don't have single developers working on

442
00:15:43,040 --> 00:15:44,720
a single project anymore it's a whole

443
00:15:44,720 --> 00:15:46,399
lot of people committing to that code

444
00:15:46,399 --> 00:15:48,639
base

445
00:15:50,000 --> 00:15:52,399
and so if we kind of think of a

446
00:15:52,399 --> 00:15:54,959
kind of a devops reference architecture

447
00:15:54,959 --> 00:15:57,040
here and you've probably seen similar

448
00:15:57,040 --> 00:15:59,279
drawings before again there's nothing

449
00:15:59,279 --> 00:16:01,279
super innovative here right this is just

450
00:16:01,279 --> 00:16:04,079
kind of a typical you know security

451
00:16:04,079 --> 00:16:06,480
implementation or appsec implementation

452
00:16:06,480 --> 00:16:08,639
within within the devops world right if

453
00:16:08,639 --> 00:16:11,199
we start up there at the top left we're

454
00:16:11,199 --> 00:16:12,639
hopefully we're doing this right

455
00:16:12,639 --> 00:16:14,880
creating user stories epic sprints

456
00:16:14,880 --> 00:16:16,720
tasker and all of our planning and jira

457
00:16:16,720 --> 00:16:19,600
which hopefully security is involved in

458
00:16:19,600 --> 00:16:22,160
many of your organizations probably not

459
00:16:22,160 --> 00:16:23,519
then we have threat modeling and

460
00:16:23,519 --> 00:16:25,120
architecture reviews

461
00:16:25,120 --> 00:16:26,959
then we go into coding

462
00:16:26,959 --> 00:16:28,800
and we write all of our code we do our

463
00:16:28,800 --> 00:16:30,959
sprints whatever we take our code and we

464
00:16:30,959 --> 00:16:32,720
push it out to source control

465
00:16:32,720 --> 00:16:34,560
right this is where we get into the

466
00:16:34,560 --> 00:16:36,399
outer loop so at this point we're no

467
00:16:36,399 --> 00:16:39,040
longer in the inner loop

468
00:16:39,040 --> 00:16:41,199
and then the reason i stress that is

469
00:16:41,199 --> 00:16:42,160
because

470
00:16:42,160 --> 00:16:44,160
in a lot of these other talks or your

471
00:16:44,160 --> 00:16:45,600
vendors and everything that you hear

472
00:16:45,600 --> 00:16:46,959
about today

473
00:16:46,959 --> 00:16:48,880
security is plugged in

474
00:16:48,880 --> 00:16:51,040
further down the list here right so if

475
00:16:51,040 --> 00:16:53,040
we keep kind of following the arrows you

476
00:16:53,040 --> 00:16:54,800
know we go to the build system right

477
00:16:54,800 --> 00:16:57,759
this is our our jenkins or azure devops

478
00:16:57,759 --> 00:16:59,440
whatever we might be using right it

479
00:16:59,440 --> 00:17:01,519
builds our code pulls in our libraries

480
00:17:01,519 --> 00:17:03,360
all that good stuff well then at that

481
00:17:03,360 --> 00:17:05,839
point we have these ci cd pipelines and

482
00:17:05,839 --> 00:17:07,280
that's where we take and we plug in all

483
00:17:07,280 --> 00:17:08,720
of our tools we plug in our static

484
00:17:08,720 --> 00:17:11,280
analysis or dynamic analysis our i asked

485
00:17:11,280 --> 00:17:13,679
if we're super cool um you know qa

486
00:17:13,679 --> 00:17:16,000
testing code quality all of that stuff

487
00:17:16,000 --> 00:17:17,839
right and we throw all of this into our

488
00:17:17,839 --> 00:17:19,760
pipeline and then a whole bunch of other

489
00:17:19,760 --> 00:17:22,160
stuff happens right so

490
00:17:22,160 --> 00:17:23,520
point here is

491
00:17:23,520 --> 00:17:26,240
all of that today is happening in the

492
00:17:26,240 --> 00:17:28,559
outer loop not the inner loop right and

493
00:17:28,559 --> 00:17:30,080
all of that is impactful to your

494
00:17:30,080 --> 00:17:33,840
developers build process

495
00:17:35,280 --> 00:17:37,679
all right so a couple other key concepts

496
00:17:37,679 --> 00:17:39,840
that we need to understand that's

497
00:17:39,840 --> 00:17:42,720
critical to this model

498
00:17:42,720 --> 00:17:44,880
is really tax and waste right so let's

499
00:17:44,880 --> 00:17:46,720
start with the key tenets of the inner

500
00:17:46,720 --> 00:17:47,679
loop

501
00:17:47,679 --> 00:17:50,640
loop execution should be as fast as

502
00:17:50,640 --> 00:17:51,919
possible

503
00:17:51,919 --> 00:17:53,039
so if we start thinking about

504
00:17:53,039 --> 00:17:56,960
traditional appsec tooling we've

505
00:17:56,960 --> 00:17:58,480
our tools aren't fast

506
00:17:58,480 --> 00:17:59,840
right you know anybody who has run any

507
00:17:59,840 --> 00:18:01,440
of these tools before you take a static

508
00:18:01,440 --> 00:18:04,000
analysis tool you run it you wait

509
00:18:04,000 --> 00:18:05,840
somewhere between five minutes to two

510
00:18:05,840 --> 00:18:08,080
hours maybe longer you get results if

511
00:18:08,080 --> 00:18:10,000
you run a dynamic analysis tool maybe

512
00:18:10,000 --> 00:18:13,200
you've waited for days to get results

513
00:18:13,200 --> 00:18:15,120
the tools are not fast and they're

514
00:18:15,120 --> 00:18:17,200
typically not accurate

515
00:18:17,200 --> 00:18:19,440
feedback time should be minimized but

516
00:18:19,440 --> 00:18:21,600
quality should be optimized right so

517
00:18:21,600 --> 00:18:23,760
again things should be fast and they

518
00:18:23,760 --> 00:18:26,400
should have quality results

519
00:18:26,400 --> 00:18:29,120
tax should be minimum minimized and

520
00:18:29,120 --> 00:18:31,679
waste should be eliminated all right so

521
00:18:31,679 --> 00:18:33,440
so what's tax and waste right some of

522
00:18:33,440 --> 00:18:34,960
you are probably already reading the

523
00:18:34,960 --> 00:18:37,360
slide and know what they are but if we

524
00:18:37,360 --> 00:18:39,280
break down these activities in the inner

525
00:18:39,280 --> 00:18:40,880
loop right the coding building testing

526
00:18:40,880 --> 00:18:43,840
committee right only one of these

527
00:18:43,840 --> 00:18:45,120
activities

528
00:18:45,120 --> 00:18:48,400
provides business value

529
00:18:48,400 --> 00:18:51,039
that's coding right we're taking

530
00:18:51,039 --> 00:18:53,120
features we're taking customer demand

531
00:18:53,120 --> 00:18:55,200
we're converting it into code and we're

532
00:18:55,200 --> 00:18:57,200
putting it into our application that is

533
00:18:57,200 --> 00:18:58,799
the only one of these at these

534
00:18:58,799 --> 00:19:01,360
activities that actually benefits the

535
00:19:01,360 --> 00:19:03,280
business

536
00:19:03,280 --> 00:19:05,280
building and testing

537
00:19:05,280 --> 00:19:08,480
are necessary activities that we have to

538
00:19:08,480 --> 00:19:11,760
perform as developers right we can write

539
00:19:11,760 --> 00:19:13,679
code all day long but if we never

540
00:19:13,679 --> 00:19:15,679
compile it it never

541
00:19:15,679 --> 00:19:17,679
does anything right you know in our

542
00:19:17,679 --> 00:19:19,520
compiler throws us some errors tells us

543
00:19:19,520 --> 00:19:21,200
our code is broken maybe there's just

544
00:19:21,200 --> 00:19:22,960
some warnings or if we're really lucky

545
00:19:22,960 --> 00:19:24,640
maybe it actually compiles and then we

546
00:19:24,640 --> 00:19:27,200
can run our app and see what it does

547
00:19:27,200 --> 00:19:28,960
but the point is building and testing

548
00:19:28,960 --> 00:19:31,600
are necessary activities that we have to

549
00:19:31,600 --> 00:19:32,320
do

550
00:19:32,320 --> 00:19:34,400
and they provide us feedback right you

551
00:19:34,400 --> 00:19:36,559
know they tell us if our code runs maybe

552
00:19:36,559 --> 00:19:37,919
sometimes even tells us if we have

553
00:19:37,919 --> 00:19:39,919
vulnerabilities right but it gives us

554
00:19:39,919 --> 00:19:42,720
feedback about that code that we wrote

555
00:19:42,720 --> 00:19:44,880
and then we have committing over there

556
00:19:44,880 --> 00:19:48,080
which is really a an essential evil it's

557
00:19:48,080 --> 00:19:49,679
an activity that we still have to

558
00:19:49,679 --> 00:19:51,520
perform but it's not providing us

559
00:19:51,520 --> 00:19:52,480
feedback

560
00:19:52,480 --> 00:19:54,480
in any way right it's not looping back

561
00:19:54,480 --> 00:19:56,799
into this coding process in any way it

562
00:19:56,799 --> 00:19:58,559
just lets us get our code from point a

563
00:19:58,559 --> 00:20:00,799
to point b so that kind of brings us to

564
00:20:00,799 --> 00:20:03,760
these concepts of of tax and waste right

565
00:20:03,760 --> 00:20:05,520
so tax

566
00:20:05,520 --> 00:20:08,159
are the necessary activities that we

567
00:20:08,159 --> 00:20:10,240
have to do that we're not going to get

568
00:20:10,240 --> 00:20:12,320
around and they take time but they

569
00:20:12,320 --> 00:20:14,000
provide feedback

570
00:20:14,000 --> 00:20:17,200
right and waste is just like tax except

571
00:20:17,200 --> 00:20:18,840
it's

572
00:20:18,840 --> 00:20:21,840
unnecessary so you know kind of key to

573
00:20:21,840 --> 00:20:23,520
this inner loop model

574
00:20:23,520 --> 00:20:24,400
is

575
00:20:24,400 --> 00:20:26,320
reducing tax

576
00:20:26,320 --> 00:20:29,520
and eliminating waste

577
00:20:29,520 --> 00:20:30,960
and then we've got this big blurb down

578
00:20:30,960 --> 00:20:33,200
here right conventional appsec tooling

579
00:20:33,200 --> 00:20:34,480
introduces

580
00:20:34,480 --> 00:20:35,520
large

581
00:20:35,520 --> 00:20:39,440
amounts of tax and waste

582
00:20:39,520 --> 00:20:41,120
so just like the real world right we

583
00:20:41,120 --> 00:20:42,480
don't want to pay taxes

584
00:20:42,480 --> 00:20:44,080
we we have to do it

585
00:20:44,080 --> 00:20:45,039
but

586
00:20:45,039 --> 00:20:47,280
it's a necessary evil and again you know

587
00:20:47,280 --> 00:20:49,919
a lot of us nowadays are you know fairly

588
00:20:49,919 --> 00:20:51,440
conscious we want to do good for the

589
00:20:51,440 --> 00:20:53,760
world right we know plastic is evil and

590
00:20:53,760 --> 00:20:56,159
we don't want to use plastic bottles or

591
00:20:56,159 --> 00:20:58,000
plastic straws right so we want to get

592
00:20:58,000 --> 00:21:00,799
rid of all that waste

593
00:21:00,799 --> 00:21:02,080
so this is where i'm going to need some

594
00:21:02,080 --> 00:21:03,919
participation for from everybody because

595
00:21:03,919 --> 00:21:05,360
i'm going to kind of walk through some

596
00:21:05,360 --> 00:21:07,520
some thought exercises here and just

597
00:21:07,520 --> 00:21:09,840
talk about some different types of

598
00:21:09,840 --> 00:21:12,320
common application security tooling and

599
00:21:12,320 --> 00:21:14,000
just kind of think about the tax and

600
00:21:14,000 --> 00:21:16,240
waste and if we think these different

601
00:21:16,240 --> 00:21:17,760
types of tools

602
00:21:17,760 --> 00:21:19,919
we'll work in this inner loop model

603
00:21:19,919 --> 00:21:23,919
based on everything we just introduced

604
00:21:27,280 --> 00:21:29,200
so static analysis right so you know

605
00:21:29,200 --> 00:21:31,520
static analysis tools this is referring

606
00:21:31,520 --> 00:21:33,120
you know for those of you who might not

607
00:21:33,120 --> 00:21:35,200
be in appsec um you know kind of a

608
00:21:35,200 --> 00:21:38,080
category of tools that

609
00:21:38,080 --> 00:21:41,679
scan our source code right and then they

610
00:21:41,679 --> 00:21:43,200
they go through some of them require the

611
00:21:43,200 --> 00:21:45,280
source code to compile some don't but

612
00:21:45,280 --> 00:21:47,120
point is it scans the source code and

613
00:21:47,120 --> 00:21:48,640
then it says hey we found these

614
00:21:48,640 --> 00:21:50,640
vulnerabilities some of them were lying

615
00:21:50,640 --> 00:21:51,679
to you and it's really not

616
00:21:51,679 --> 00:21:53,760
vulnerabilities but we think it is

617
00:21:53,760 --> 00:21:55,840
within the source code and so you need

618
00:21:55,840 --> 00:21:58,000
to go out and fix these because it might

619
00:21:58,000 --> 00:22:02,080
be sql injection or whatever it might be

620
00:22:02,080 --> 00:22:04,720
you so check marks appscan source

621
00:22:04,720 --> 00:22:06,159
fortify

622
00:22:06,159 --> 00:22:08,400
shift left you know a handful of the

623
00:22:08,400 --> 00:22:10,320
tools that kind of qualify as static

624
00:22:10,320 --> 00:22:12,159
analysis so for those of you who may be

625
00:22:12,159 --> 00:22:14,799
well-versed in these tools

626
00:22:14,799 --> 00:22:16,640
what do you think about static analysis

627
00:22:16,640 --> 00:22:18,400
do you think static analysis is a good

628
00:22:18,400 --> 00:22:20,240
inner loop tool and

629
00:22:20,240 --> 00:22:22,640
why

630
00:22:22,880 --> 00:22:24,799
there could be some value

631
00:22:24,799 --> 00:22:26,880
of something quick that is local or

632
00:22:26,880 --> 00:22:28,400
something like 7 grams or something just

633
00:22:28,400 --> 00:22:30,159
start off getting some sort of entrance

634
00:22:30,159 --> 00:22:31,360
or know that something could be

635
00:22:31,360 --> 00:22:34,360
dangerous

636
00:22:42,240 --> 00:22:43,760
all right

637
00:22:43,760 --> 00:22:47,799
any other thoughts in sanic analysis

638
00:22:56,640 --> 00:22:58,480
okay

639
00:22:58,480 --> 00:23:01,880
anyone else

640
00:23:22,000 --> 00:23:25,000
um

641
00:23:37,840 --> 00:23:40,840
analysis

642
00:23:50,880 --> 00:23:52,320
okay

643
00:23:52,320 --> 00:23:53,520
all right so

644
00:23:53,520 --> 00:23:55,120
i'm going to kind of half agree have to

645
00:23:55,120 --> 00:23:57,520
disagree with all of that um

646
00:23:57,520 --> 00:23:58,960
you know i think part of my my

647
00:23:58,960 --> 00:24:00,720
hesitation is you know kind of to your

648
00:24:00,720 --> 00:24:02,799
point right about going back to the 56k

649
00:24:02,799 --> 00:24:03,840
days

650
00:24:03,840 --> 00:24:06,559
it's been about 20 years since we first

651
00:24:06,559 --> 00:24:08,480
developed the initial static analysis

652
00:24:08,480 --> 00:24:10,320
tools and we've seen very little

653
00:24:10,320 --> 00:24:12,320
improvement right appscan source and

654
00:24:12,320 --> 00:24:14,240
fortify were kind of the two initial

655
00:24:14,240 --> 00:24:16,159
vendors in this space and if we look at

656
00:24:16,159 --> 00:24:17,840
them today compared to where they were

657
00:24:17,840 --> 00:24:20,640
20 years ago they're about the same they

658
00:24:20,640 --> 00:24:23,919
really don't do much more

659
00:24:23,919 --> 00:24:25,600
you know i'd argue that check marks is

660
00:24:25,600 --> 00:24:26,960
probably one of the the biggest

661
00:24:26,960 --> 00:24:29,679
innovators in this space and like

662
00:24:29,679 --> 00:24:30,960
they just don't require your code to

663
00:24:30,960 --> 00:24:32,640
compile um

664
00:24:32,640 --> 00:24:34,080
you know but otherwise it's kind of the

665
00:24:34,080 --> 00:24:35,520
same under the hood you know to your

666
00:24:35,520 --> 00:24:37,840
point about sim grip you know i do see

667
00:24:37,840 --> 00:24:39,760
you know some future in tools like sim

668
00:24:39,760 --> 00:24:41,520
grep you know it needs to get a bloody

669
00:24:41,520 --> 00:24:43,440
yui on it so that people can actually

670
00:24:43,440 --> 00:24:45,600
use it but you know at its core you know

671
00:24:45,600 --> 00:24:48,320
it does have some some some potential um

672
00:24:48,320 --> 00:24:49,440
but you know if we kind of relate it

673
00:24:49,440 --> 00:24:50,960
back to the to the inner loop model

674
00:24:50,960 --> 00:24:52,799
there's no right or wrong answers to

675
00:24:52,799 --> 00:24:54,159
these right again this is just thought

676
00:24:54,159 --> 00:24:56,559
exercises this is just my opinion yours

677
00:24:56,559 --> 00:24:58,880
may differ and that's that's part of the

678
00:24:58,880 --> 00:25:01,279
idea here right but you know i think

679
00:25:01,279 --> 00:25:03,360
static analysis tools in general they

680
00:25:03,360 --> 00:25:05,600
have long scan times which all of the

681
00:25:05,600 --> 00:25:07,600
scan time is a tax

682
00:25:07,600 --> 00:25:09,120
they all have problems with false

683
00:25:09,120 --> 00:25:10,880
positives right we have to go through

684
00:25:10,880 --> 00:25:12,960
they require a triage we've got to get

685
00:25:12,960 --> 00:25:14,960
rid of all those false positives

686
00:25:14,960 --> 00:25:16,880
hopefully before we give it back to the

687
00:25:16,880 --> 00:25:19,200
developers so then just maybe they don't

688
00:25:19,200 --> 00:25:20,400
ignore us

689
00:25:20,400 --> 00:25:21,919
you know and all those false positives

690
00:25:21,919 --> 00:25:23,279
are a waste

691
00:25:23,279 --> 00:25:25,279
it takes they take a lot of expertise to

692
00:25:25,279 --> 00:25:28,080
use which is another tax and then we

693
00:25:28,080 --> 00:25:30,320
require scan configuration as well which

694
00:25:30,320 --> 00:25:32,559
is you know another tax on on top of

695
00:25:32,559 --> 00:25:34,799
that

696
00:25:36,559 --> 00:25:38,640
so dynamic analysis so you know again

697
00:25:38,640 --> 00:25:40,799
for the uninitiated dynamic analysis

698
00:25:40,799 --> 00:25:42,480
we're talking about tools

699
00:25:42,480 --> 00:25:46,000
like web inspect appscan enterprise

700
00:25:46,000 --> 00:25:48,480
zap and burp to an extent our dynamic

701
00:25:48,480 --> 00:25:51,039
analysis tools but basically this is

702
00:25:51,039 --> 00:25:52,799
where we're taking a scanner and we're

703
00:25:52,799 --> 00:25:55,440
pointing it at a running web application

704
00:25:55,440 --> 00:25:56,880
you know we've got a tool that's kind of

705
00:25:56,880 --> 00:25:59,679
simulating a thousand monkey hackers

706
00:25:59,679 --> 00:26:01,440
you know just crawling your website

707
00:26:01,440 --> 00:26:03,600
getting a good baseline and then sending

708
00:26:03,600 --> 00:26:06,240
a bunch of malformed http requests back

709
00:26:06,240 --> 00:26:08,320
to your site and seeing what happens

710
00:26:08,320 --> 00:26:10,240
right and the whole idea being if it has

711
00:26:10,240 --> 00:26:12,640
a baseline if it has a good http get

712
00:26:12,640 --> 00:26:14,799
request and a response right we get a

713
00:26:14,799 --> 00:26:17,200
200 back everything looks good and then

714
00:26:17,200 --> 00:26:18,960
it sends say a cross-site scripting

715
00:26:18,960 --> 00:26:22,559
payload and it sees a 200 come back and

716
00:26:22,559 --> 00:26:25,600
also that input inside of the response

717
00:26:25,600 --> 00:26:27,120
it's going to say ding ding ding

718
00:26:27,120 --> 00:26:28,559
vulnerability

719
00:26:28,559 --> 00:26:30,480
um so i guess the same same question

720
00:26:30,480 --> 00:26:32,480
right dynamic analysis you know what do

721
00:26:32,480 --> 00:26:35,679
you all think for the interlude model

722
00:26:35,679 --> 00:26:38,080
good

723
00:26:38,080 --> 00:26:41,080
okay

724
00:26:45,440 --> 00:26:46,960
simply because

725
00:26:46,960 --> 00:26:51,679
your ability to know or hope that those

726
00:26:56,000 --> 00:26:57,039
all right

727
00:26:57,039 --> 00:26:59,520
anyone else

728
00:26:59,919 --> 00:27:01,039
okay

729
00:27:01,039 --> 00:27:02,880
i think i'd largely agree with that

730
00:27:02,880 --> 00:27:04,559
right so

731
00:27:04,559 --> 00:27:06,640
dynamic analysis again our app has to be

732
00:27:06,640 --> 00:27:08,720
deployed before we can do dynamic

733
00:27:08,720 --> 00:27:11,440
analysis so that's kind of a waste um

734
00:27:11,440 --> 00:27:13,120
you know dast is

735
00:27:13,120 --> 00:27:16,080
by nature much more accurate than static

736
00:27:16,080 --> 00:27:17,760
analysis tends to be right if we get a

737
00:27:17,760 --> 00:27:20,559
result back in a dash tool it largely

738
00:27:20,559 --> 00:27:22,640
tends to be a real finding so that kind

739
00:27:22,640 --> 00:27:25,440
of gets you know a good thumbs up

740
00:27:25,440 --> 00:27:27,840
varying scan times can range from hours

741
00:27:27,840 --> 00:27:29,919
to days you know that's that's kind of a

742
00:27:29,919 --> 00:27:31,520
huge tax there

743
00:27:31,520 --> 00:27:33,200
i helped out an organization once that

744
00:27:33,200 --> 00:27:35,039
had dash scans that were taking over a

745
00:27:35,039 --> 00:27:38,640
week for a single application right

746
00:27:38,640 --> 00:27:40,720
you know that's that's that's not good

747
00:27:40,720 --> 00:27:42,880
um and just by nature of how the tools

748
00:27:42,880 --> 00:27:45,360
work the reports can be inconsistent

749
00:27:45,360 --> 00:27:47,360
from one scan to to the next so for

750
00:27:47,360 --> 00:27:49,200
those of you who have used das tools you

751
00:27:49,200 --> 00:27:51,039
know this may be a frustration of yours

752
00:27:51,039 --> 00:27:52,399
right where you'll

753
00:27:52,399 --> 00:27:54,240
you know run a scan you'll have some i

754
00:27:54,240 --> 00:27:56,480
don't know 10 sql injection findings and

755
00:27:56,480 --> 00:27:57,919
you won't change anything and you'll run

756
00:27:57,919 --> 00:27:59,840
the scan again and you'll have five sql

757
00:27:59,840 --> 00:28:02,080
injection findings but at that point you

758
00:28:02,080 --> 00:28:03,840
lose all your developer trust because

759
00:28:03,840 --> 00:28:06,000
they say well i can't trust the tool

760
00:28:06,000 --> 00:28:07,760
because the results are inconsistent

761
00:28:07,760 --> 00:28:09,440
from run to run

762
00:28:09,440 --> 00:28:10,240
um

763
00:28:10,240 --> 00:28:12,000
but you know the really the big problem

764
00:28:12,000 --> 00:28:14,320
here is that your app has to be running

765
00:28:14,320 --> 00:28:17,279
so even if we forgot about this whole

766
00:28:17,279 --> 00:28:19,520
tax and waste thing the app's got to be

767
00:28:19,520 --> 00:28:22,000
deployed before we can run dynamic

768
00:28:22,000 --> 00:28:24,159
analysis um you know i tend to have a

769
00:28:24,159 --> 00:28:26,159
lot of issues with the vendor messaging

770
00:28:26,159 --> 00:28:28,399
here too because you know every vendor

771
00:28:28,399 --> 00:28:30,640
now talks about how dast will plug into

772
00:28:30,640 --> 00:28:32,480
the ci cd pipeline and we can

773
00:28:32,480 --> 00:28:34,159
automatically scan our apps and it

774
00:28:34,159 --> 00:28:35,600
sounds really really great to all the

775
00:28:35,600 --> 00:28:37,679
cyber security people but what we don't

776
00:28:37,679 --> 00:28:39,919
realize is that

777
00:28:39,919 --> 00:28:42,480
most of us aren't at a level of devops

778
00:28:42,480 --> 00:28:44,399
maturity where our apps are

779
00:28:44,399 --> 00:28:46,720
automatically being deployed

780
00:28:46,720 --> 00:28:49,039
as a part of our ci cd pipeline right we

781
00:28:49,039 --> 00:28:51,120
still have change management and idle

782
00:28:51,120 --> 00:28:52,559
and all these other things that we have

783
00:28:52,559 --> 00:28:54,960
to worry about and even if we can deploy

784
00:28:54,960 --> 00:28:56,720
them it's probably going to a static

785
00:28:56,720 --> 00:28:59,039
host and then we're just having a static

786
00:28:59,039 --> 00:29:01,039
configuration around the das tool right

787
00:29:01,039 --> 00:29:02,799
you know to really do this right you

788
00:29:02,799 --> 00:29:04,399
know we've got to be deploying to

789
00:29:04,399 --> 00:29:06,960
ephemeral host we've got to be able to

790
00:29:06,960 --> 00:29:08,480
you know dynamically set up

791
00:29:08,480 --> 00:29:11,120
authentication and authorization

792
00:29:11,120 --> 00:29:12,720
you know before we can really do this in

793
00:29:12,720 --> 00:29:16,520
a pipeline you have a question

794
00:29:33,360 --> 00:29:35,600
absolutely or maybe for those of you who

795
00:29:35,600 --> 00:29:37,360
have run it in production you've maybe

796
00:29:37,360 --> 00:29:41,840
broken an app before so i know i have

797
00:29:42,720 --> 00:29:43,679
all right

798
00:29:43,679 --> 00:29:45,520
manual pen testing right and that one's

799
00:29:45,520 --> 00:29:47,520
just there because it's it's funny

800
00:29:47,520 --> 00:29:49,600
um right you know manual pen testing is

801
00:29:49,600 --> 00:29:52,000
never going to be in the inner loop

802
00:29:52,000 --> 00:29:53,840
right and it's a you know in a perfect

803
00:29:53,840 --> 00:29:55,360
world you know i would kind of love to

804
00:29:55,360 --> 00:29:57,520
get away from manual pen testing with

805
00:29:57,520 --> 00:29:59,200
some other things we'll talk about here

806
00:29:59,200 --> 00:30:01,039
here in a minute um i think it still

807
00:30:01,039 --> 00:30:02,559
tends to be a crutch and there's a lot

808
00:30:02,559 --> 00:30:04,399
of things we can do to really reduce the

809
00:30:04,399 --> 00:30:06,399
amount of time that we spend on pin

810
00:30:06,399 --> 00:30:09,279
testing

811
00:30:09,279 --> 00:30:11,840
all right software composition analysis

812
00:30:11,840 --> 00:30:14,399
or open source analysis or one of a

813
00:30:14,399 --> 00:30:16,080
hundred other different acronyms that

814
00:30:16,080 --> 00:30:18,480
all kind of mean the same thing um so

815
00:30:18,480 --> 00:30:20,399
again for for the uninitiated right this

816
00:30:20,399 --> 00:30:22,159
is getting more into you know our third

817
00:30:22,159 --> 00:30:24,399
party libraries and dependencies and

818
00:30:24,399 --> 00:30:26,640
particularly relevant today with supply

819
00:30:26,640 --> 00:30:28,080
chain security

820
00:30:28,080 --> 00:30:31,679
so these tools primarily are looking at

821
00:30:31,679 --> 00:30:33,840
your dependencies your libraries your

822
00:30:33,840 --> 00:30:36,159
third-party code that you're pulling

823
00:30:36,159 --> 00:30:38,559
down into your applications and then it

824
00:30:38,559 --> 00:30:40,399
takes a look at all of those libraries

825
00:30:40,399 --> 00:30:42,240
and it goes out to the internet in some

826
00:30:42,240 --> 00:30:44,399
magical way and it's looking for known

827
00:30:44,399 --> 00:30:46,480
vulnerabilities inside of those

828
00:30:46,480 --> 00:30:48,320
libraries right so for example if you

829
00:30:48,320 --> 00:30:50,600
have jquery

830
00:30:50,600 --> 00:30:53,279
1.9.x or whatever

831
00:30:53,279 --> 00:30:54,720
and you know it's going to see that you

832
00:30:54,720 --> 00:30:56,159
have that library right it's going to

833
00:30:56,159 --> 00:30:58,240
look at your your pom file if you're a

834
00:30:58,240 --> 00:31:01,440
java shop using maven maybe in your mpm

835
00:31:01,440 --> 00:31:04,159
build you know nougat whatever you might

836
00:31:04,159 --> 00:31:05,679
be using right and then it's going to go

837
00:31:05,679 --> 00:31:08,159
out it's going to look up jquery 1.9 and

838
00:31:08,159 --> 00:31:09,760
it's going to say hey do we have any

839
00:31:09,760 --> 00:31:12,159
cves you know for this particular

840
00:31:12,159 --> 00:31:13,360
library

841
00:31:13,360 --> 00:31:15,360
if so the tool will report them and tell

842
00:31:15,360 --> 00:31:17,519
you that you have some cves inside of

843
00:31:17,519 --> 00:31:20,399
your application

844
00:31:21,039 --> 00:31:22,559
and here you know we're talking tools

845
00:31:22,559 --> 00:31:24,720
like black duck

846
00:31:24,720 --> 00:31:26,960
son of type nexus

847
00:31:26,960 --> 00:31:28,559
white source you know a handful of

848
00:31:28,559 --> 00:31:31,039
others even some free tools retire js

849
00:31:31,039 --> 00:31:33,279
technically does this a loss dependency

850
00:31:33,279 --> 00:31:34,480
check

851
00:31:34,480 --> 00:31:35,840
what do you all think about software

852
00:31:35,840 --> 00:31:39,320
composition analysis

853
00:31:56,080 --> 00:31:59,240
a lot of times

854
00:32:03,519 --> 00:32:07,159
which is a huge waste

855
00:32:33,039 --> 00:32:36,039
okay

856
00:32:59,679 --> 00:33:02,000
okay

857
00:33:02,480 --> 00:33:03,760
all right so

858
00:33:03,760 --> 00:33:05,679
software composition analysis i get i

859
00:33:05,679 --> 00:33:07,600
think i kind of largely agree right it's

860
00:33:07,600 --> 00:33:09,440
it's good and it's bad right it's kind

861
00:33:09,440 --> 00:33:12,159
of got its pros and cons i saw a very

862
00:33:12,159 --> 00:33:14,559
interesting talk from jeff williams um

863
00:33:14,559 --> 00:33:17,440
you know co-founder of owasp last week

864
00:33:17,440 --> 00:33:18,880
um you know and he was talking about

865
00:33:18,880 --> 00:33:20,960
software composition analysis and open

866
00:33:20,960 --> 00:33:22,559
source code and some of the work he's

867
00:33:22,559 --> 00:33:24,399
been doing and you know i think at this

868
00:33:24,399 --> 00:33:25,600
point we've all seen enough

869
00:33:25,600 --> 00:33:27,039
presentations right you know we've seen

870
00:33:27,039 --> 00:33:28,720
you know the icebergs and i think

871
00:33:28,720 --> 00:33:30,880
everybody talks now about how you know

872
00:33:30,880 --> 00:33:33,039
like back in my fortran days you know we

873
00:33:33,039 --> 00:33:35,919
wrote 80 percent of the code and 20 of

874
00:33:35,919 --> 00:33:38,159
it was open source or whatever and how

875
00:33:38,159 --> 00:33:40,080
that model is flipped right and now

876
00:33:40,080 --> 00:33:42,000
twenty percent of our code we write and

877
00:33:42,000 --> 00:33:44,480
eighty percent of it um is open source

878
00:33:44,480 --> 00:33:47,039
libraries and dependencies um and so on

879
00:33:47,039 --> 00:33:48,240
what he's done with some of the

880
00:33:48,240 --> 00:33:50,320
instrumentation work that he's done like

881
00:33:50,320 --> 00:33:52,640
you know with contrast and other tools

882
00:33:52,640 --> 00:33:54,080
is actually try to take a look you know

883
00:33:54,080 --> 00:33:55,919
like you mentioned um you know at the

884
00:33:55,919 --> 00:33:58,000
code that's actually executing

885
00:33:58,000 --> 00:33:59,919
and i don't remember the exact number

886
00:33:59,919 --> 00:34:02,480
but you know what he found was that

887
00:34:02,480 --> 00:34:04,159
on average across all of the

888
00:34:04,159 --> 00:34:07,039
applications they have tested well

889
00:34:07,039 --> 00:34:09,839
it was actually something like 85

890
00:34:09,839 --> 00:34:12,239
percent of the applic of the code that

891
00:34:12,239 --> 00:34:14,159
actually executes

892
00:34:14,159 --> 00:34:16,320
is code that you wrote

893
00:34:16,320 --> 00:34:18,239
right so even though 80 percent of our

894
00:34:18,239 --> 00:34:20,719
code is open source and third-party

895
00:34:20,719 --> 00:34:23,199
dependencies we never actually execute

896
00:34:23,199 --> 00:34:24,239
it

897
00:34:24,239 --> 00:34:26,239
which means it's just sitting there

898
00:34:26,239 --> 00:34:28,560
doing nothing really getting false

899
00:34:28,560 --> 00:34:30,159
positives from software composition

900
00:34:30,159 --> 00:34:34,399
analysis tools so most organizations are

901
00:34:34,399 --> 00:34:36,480
using software composition analysis in

902
00:34:36,480 --> 00:34:38,159
kind of a scanning mode right you know

903
00:34:38,159 --> 00:34:40,639
we throw it out in our ci cd pipeline

904
00:34:40,639 --> 00:34:42,639
and you know we just have it run

905
00:34:42,639 --> 00:34:44,320
or maybe we even schedule it you know to

906
00:34:44,320 --> 00:34:46,480
where it runs against our apps on on

907
00:34:46,480 --> 00:34:49,280
build or more of an ad hoc or a

908
00:34:49,280 --> 00:34:51,280
scheduled basis right so you know we all

909
00:34:51,280 --> 00:34:52,480
find out

910
00:34:52,480 --> 00:34:54,399
about something exciting like you know

911
00:34:54,399 --> 00:34:56,879
heartbleed or struts or something like

912
00:34:56,879 --> 00:34:58,240
that you know we still don't have a

913
00:34:58,240 --> 00:35:00,400
software build of materials or anything

914
00:35:00,400 --> 00:35:02,160
like that hopefully y'all are working on

915
00:35:02,160 --> 00:35:04,240
that because that's coming

916
00:35:04,240 --> 00:35:05,680
and so then we have to go out and we

917
00:35:05,680 --> 00:35:07,599
have to scan all of our applications and

918
00:35:07,599 --> 00:35:09,599
figure out where that impact is right

919
00:35:09,599 --> 00:35:12,800
you know one of my clients had a 15 000

920
00:35:12,800 --> 00:35:14,560
applications in their application

921
00:35:14,560 --> 00:35:16,640
portfolio right you know if something

922
00:35:16,640 --> 00:35:18,880
like another struts issue comes along

923
00:35:18,880 --> 00:35:22,640
how can you scan 15 000 applications and

924
00:35:22,640 --> 00:35:24,000
figure out which ones have the

925
00:35:24,000 --> 00:35:26,400
vulnerable version of struts right and

926
00:35:26,400 --> 00:35:28,320
you just absolutely can't and i think

927
00:35:28,320 --> 00:35:30,800
that's that's a huge tax um do you know

928
00:35:30,800 --> 00:35:31,920
to your point it's difficult to

929
00:35:31,920 --> 00:35:33,839
determine the actual impact you know

930
00:35:33,839 --> 00:35:35,680
which i would argue is a waste right

931
00:35:35,680 --> 00:35:37,680
i've built a lot of my career on helping

932
00:35:37,680 --> 00:35:39,839
financial service organizations that

933
00:35:39,839 --> 00:35:42,240
have a mature appsec program right if

934
00:35:42,240 --> 00:35:44,000
you if you don't have a mature appsec

935
00:35:44,000 --> 00:35:45,839
program and you put in something like

936
00:35:45,839 --> 00:35:47,520
software composition analysis your

937
00:35:47,520 --> 00:35:50,160
developers might even love you right

938
00:35:50,160 --> 00:35:52,079
depending um you know if you tell them

939
00:35:52,079 --> 00:35:53,359
that they have an issue they might

940
00:35:53,359 --> 00:35:55,119
actually go out and fix it and swap out

941
00:35:55,119 --> 00:35:57,359
that library if you have an organization

942
00:35:57,359 --> 00:35:59,359
that's really mature in appsec the

943
00:35:59,359 --> 00:36:00,800
developers are going to push back on

944
00:36:00,800 --> 00:36:02,880
that and they're going to say

945
00:36:02,880 --> 00:36:04,880
well i'm not even calling that

946
00:36:04,880 --> 00:36:07,040
vulnerable code or show of hands how

947
00:36:07,040 --> 00:36:12,040
many of you have ever read a cve before

948
00:36:12,079 --> 00:36:13,599
most of you

949
00:36:13,599 --> 00:36:16,480
do those cves usually tell you

950
00:36:16,480 --> 00:36:18,880
how to reproduce a vulnerability

951
00:36:18,880 --> 00:36:20,640
did they tell you where in the code that

952
00:36:20,640 --> 00:36:22,720
vulnerability is

953
00:36:22,720 --> 00:36:24,480
it's usually something fluffy like

954
00:36:24,480 --> 00:36:25,839
there's a cross-site scripting

955
00:36:25,839 --> 00:36:27,839
vulnerability in

956
00:36:27,839 --> 00:36:30,320
you know this particular library from

957
00:36:30,320 --> 00:36:32,960
version x to version y it doesn't tell

958
00:36:32,960 --> 00:36:35,520
you where the vulnerable code is you

959
00:36:35,520 --> 00:36:37,359
know and unless some super cool hacker

960
00:36:37,359 --> 00:36:39,520
has has written an exploit or something

961
00:36:39,520 --> 00:36:42,400
you probably have no idea where that is

962
00:36:42,400 --> 00:36:43,280
so

963
00:36:43,280 --> 00:36:45,280
you know a developer is not going to go

964
00:36:45,280 --> 00:36:47,920
out and re-architect their application

965
00:36:47,920 --> 00:36:49,920
because you told them there might be a

966
00:36:49,920 --> 00:36:52,960
vulnerability in a library

967
00:36:52,960 --> 00:36:54,720
um i will say

968
00:36:54,720 --> 00:36:56,000
these tools are getting a lot of

969
00:36:56,000 --> 00:36:58,320
innovation they're coming a long way and

970
00:36:58,320 --> 00:37:00,240
i think there is ways to deploy them

971
00:37:00,240 --> 00:37:02,960
well in the inner loop um you know snick

972
00:37:02,960 --> 00:37:04,880
is a good example of this you know black

973
00:37:04,880 --> 00:37:06,800
duck even has some lightweight features

974
00:37:06,800 --> 00:37:08,960
so you know now like black duck for

975
00:37:08,960 --> 00:37:11,839
example you can configure it so that if

976
00:37:11,839 --> 00:37:13,599
say you're writing a java application

977
00:37:13,599 --> 00:37:15,680
you go into your pom file you add a new

978
00:37:15,680 --> 00:37:18,160
library it'll pop up and it'll say hey

979
00:37:18,160 --> 00:37:20,079
did you know that library you're trying

980
00:37:20,079 --> 00:37:22,240
to add right now has a vulnerability you

981
00:37:22,240 --> 00:37:23,839
know maybe you want to use this version

982
00:37:23,839 --> 00:37:26,720
instead right and so basically zero

983
00:37:26,720 --> 00:37:29,200
impact to the developers we can go ahead

984
00:37:29,200 --> 00:37:30,800
and let them know and let them make the

985
00:37:30,800 --> 00:37:34,400
decision of whether or not to proceed

986
00:37:34,400 --> 00:37:36,800
snick is doing some really cool stuff

987
00:37:36,800 --> 00:37:39,280
also right so if you can configure snick

988
00:37:39,280 --> 00:37:41,520
in such a way as part of your pipeline

989
00:37:41,520 --> 00:37:43,760
even so that if you're trying to deploy

990
00:37:43,760 --> 00:37:45,520
an application it's going through your

991
00:37:45,520 --> 00:37:48,320
ci cd process and it determined it finds

992
00:37:48,320 --> 00:37:50,400
a vulnerable library

993
00:37:50,400 --> 00:37:52,960
snick will actually break the build

994
00:37:52,960 --> 00:37:54,960
and it will actually create a pull

995
00:37:54,960 --> 00:37:56,160
request

996
00:37:56,160 --> 00:37:58,720
to go out and take a newer version of

997
00:37:58,720 --> 00:38:01,280
that library and incorporate it into the

998
00:38:01,280 --> 00:38:04,240
code base for you um now you're all in

999
00:38:04,240 --> 00:38:06,560
cyber security so that probably scares

1000
00:38:06,560 --> 00:38:09,119
the out of you um you know which is

1001
00:38:09,119 --> 00:38:11,440
which is fine right you know it's

1002
00:38:11,440 --> 00:38:13,839
you know understandable but you know

1003
00:38:13,839 --> 00:38:15,440
it's what your developers need to do

1004
00:38:15,440 --> 00:38:17,200
anyway right and what you're going to

1005
00:38:17,200 --> 00:38:19,359
tell them to do if you had been the ones

1006
00:38:19,359 --> 00:38:21,599
to find this vulnerability so as long as

1007
00:38:21,599 --> 00:38:23,359
you have a good you know pull request

1008
00:38:23,359 --> 00:38:26,079
approval process in place that can be

1009
00:38:26,079 --> 00:38:29,720
incredibly valuable

1010
00:38:32,720 --> 00:38:33,760
so i want to talk a little bit about

1011
00:38:33,760 --> 00:38:35,920
securities code this is almost a

1012
00:38:35,920 --> 00:38:37,359
separate actually really could be a

1013
00:38:37,359 --> 00:38:40,560
separate talk um in and of itself right

1014
00:38:40,560 --> 00:38:42,240
and i think it requires a little bit of

1015
00:38:42,240 --> 00:38:43,920
an introduction before we kind of talk

1016
00:38:43,920 --> 00:38:47,839
about it as a thought exercise

1017
00:38:47,920 --> 00:38:50,160
so kind of before we talk about security

1018
00:38:50,160 --> 00:38:52,160
as code because this is kind of a

1019
00:38:52,160 --> 00:38:54,240
prerequisite here i want to talk about

1020
00:38:54,240 --> 00:38:56,480
testing vulnerabilities

1021
00:38:56,480 --> 00:38:59,280
versus testing controls

1022
00:38:59,280 --> 00:39:00,960
right so today

1023
00:39:00,960 --> 00:39:02,560
most of us test

1024
00:39:02,560 --> 00:39:04,079
for vulnerabilities

1025
00:39:04,079 --> 00:39:06,960
right this is how all of our tools

1026
00:39:06,960 --> 00:39:09,920
work it's how our pen testers work right

1027
00:39:09,920 --> 00:39:12,000
and security right this tends to be what

1028
00:39:12,000 --> 00:39:13,760
we hunt for right we find

1029
00:39:13,760 --> 00:39:15,280
vulnerabilities

1030
00:39:15,280 --> 00:39:17,119
but you know from absec perspectives

1031
00:39:17,119 --> 00:39:19,599
this causes a lot of problems for one we

1032
00:39:19,599 --> 00:39:21,280
get really really good

1033
00:39:21,280 --> 00:39:23,119
at finding vulnerabilities or for some

1034
00:39:23,119 --> 00:39:24,640
of us that have used some of these tools

1035
00:39:24,640 --> 00:39:26,960
we've talked about right i've run static

1036
00:39:26,960 --> 00:39:29,280
analysis tools that after you're done

1037
00:39:29,280 --> 00:39:30,400
running them

1038
00:39:30,400 --> 00:39:33,440
you have 60 70 80 000

1039
00:39:33,440 --> 00:39:36,400
vulnerabilities from one scan of one

1040
00:39:36,400 --> 00:39:37,680
application

1041
00:39:37,680 --> 00:39:39,440
right you know for those of you uh

1042
00:39:39,440 --> 00:39:41,040
hopefully all of you with mature

1043
00:39:41,040 --> 00:39:43,200
vulnerability management programs right

1044
00:39:43,200 --> 00:39:45,920
how do you manage 80 000 vulnerabilities

1045
00:39:45,920 --> 00:39:47,839
you know across your network even where

1046
00:39:47,839 --> 00:39:49,440
we're really good at vulnerability

1047
00:39:49,440 --> 00:39:51,599
management right we

1048
00:39:51,599 --> 00:39:53,119
would probably fail with that many

1049
00:39:53,119 --> 00:39:54,800
vulnerabilities

1050
00:39:54,800 --> 00:39:56,320
and that's just in a single lap from a

1051
00:39:56,320 --> 00:39:58,320
single scan right and the more we do

1052
00:39:58,320 --> 00:40:00,240
this the better we get at tuning our

1053
00:40:00,240 --> 00:40:02,560
tools we get better at pen testing and

1054
00:40:02,560 --> 00:40:04,480
we really just find more and more

1055
00:40:04,480 --> 00:40:05,920
vulnerabilities

1056
00:40:05,920 --> 00:40:08,160
um some of those are false positives

1057
00:40:08,160 --> 00:40:09,920
false negatives we don't treat

1058
00:40:09,920 --> 00:40:12,240
vulnerabilities as defects right we're

1059
00:40:12,240 --> 00:40:14,480
still giving developers you know pdf

1060
00:40:14,480 --> 00:40:16,560
reports and things like that we expect

1061
00:40:16,560 --> 00:40:17,920
them to read them

1062
00:40:17,920 --> 00:40:19,760
we don't treat vulnerabilities as

1063
00:40:19,760 --> 00:40:22,560
defects and really what we've started is

1064
00:40:22,560 --> 00:40:26,800
a race that we can absolutely never win

1065
00:40:26,800 --> 00:40:29,680
um and so what we what i think we need

1066
00:40:29,680 --> 00:40:31,359
to do is change our focus from

1067
00:40:31,359 --> 00:40:34,160
vulnerabilities to controls right and

1068
00:40:34,160 --> 00:40:35,680
again this is something else we've

1069
00:40:35,680 --> 00:40:37,839
gotten fairly good at you know with our

1070
00:40:37,839 --> 00:40:39,599
networks our hosts right a lot of our

1071
00:40:39,599 --> 00:40:41,280
security teams nowadays you know we're

1072
00:40:41,280 --> 00:40:42,800
thinking about you know security

1073
00:40:42,800 --> 00:40:46,480
controls mitigating controls um etc but

1074
00:40:46,480 --> 00:40:47,839
we're not doing it from an appsec

1075
00:40:47,839 --> 00:40:49,119
perspective

1076
00:40:49,119 --> 00:40:50,560
um so you know it's just important to

1077
00:40:50,560 --> 00:40:52,640
know from an apsec perspective you know

1078
00:40:52,640 --> 00:40:54,400
thinking about controls

1079
00:40:54,400 --> 00:40:57,119
and testing for the presence of controls

1080
00:40:57,119 --> 00:40:59,280
as opposed to vulnerabilities right it

1081
00:40:59,280 --> 00:41:01,200
enables us to you know do some really

1082
00:41:01,200 --> 00:41:03,359
cool stuff like have security design

1083
00:41:03,359 --> 00:41:05,280
patterns right i think the very first

1084
00:41:05,280 --> 00:41:07,440
slide i talked about making security

1085
00:41:07,440 --> 00:41:08,880
easy

1086
00:41:08,880 --> 00:41:11,040
right we don't do that well today we run

1087
00:41:11,040 --> 00:41:12,960
a scanner or we get a pen test the pen

1088
00:41:12,960 --> 00:41:15,119
tester comes back and says

1089
00:41:15,119 --> 00:41:16,960
hey we found this cross site request

1090
00:41:16,960 --> 00:41:19,440
forgery vulnerability and and you need

1091
00:41:19,440 --> 00:41:21,599
to fix it and the developer says okay

1092
00:41:21,599 --> 00:41:23,040
cool what the hell is a cross-site

1093
00:41:23,040 --> 00:41:25,359
request forgery uh the security person

1094
00:41:25,359 --> 00:41:27,119
you know probably says uh

1095
00:41:27,119 --> 00:41:28,480
i don't know you know here's what the

1096
00:41:28,480 --> 00:41:31,599
pin tester said go read their report and

1097
00:41:31,599 --> 00:41:32,839
and fix

1098
00:41:32,839 --> 00:41:35,359
it right so you know but if we give them

1099
00:41:35,359 --> 00:41:37,200
a design pattern you know that tells

1100
00:41:37,200 --> 00:41:39,200
them how to prevent cross-site scripting

1101
00:41:39,200 --> 00:41:40,640
and the code to put into their

1102
00:41:40,640 --> 00:41:42,640
application that stops it from be to

1103
00:41:42,640 --> 00:41:44,000
begin with

1104
00:41:44,000 --> 00:41:46,400
most developers are going to write their

1105
00:41:46,400 --> 00:41:47,599
code

1106
00:41:47,599 --> 00:41:50,240
with that design library already in

1107
00:41:50,240 --> 00:41:52,319
there right and this enables us to

1108
00:41:52,319 --> 00:41:54,800
eliminate entire categories of

1109
00:41:54,800 --> 00:41:56,400
vulnerabilities right so again if we're

1110
00:41:56,400 --> 00:41:58,560
hunting vulnerabilities if we do a pen

1111
00:41:58,560 --> 00:42:01,440
test a static analysis scan whatever

1112
00:42:01,440 --> 00:42:03,119
say it finds 10 sql injection

1113
00:42:03,119 --> 00:42:04,400
vulnerabilities

1114
00:42:04,400 --> 00:42:06,160
well that's just what it found

1115
00:42:06,160 --> 00:42:08,640
right there there could be 20 or 30 or

1116
00:42:08,640 --> 00:42:10,720
maybe even more right so if we're

1117
00:42:10,720 --> 00:42:12,720
focused on the vulnerabilities we're

1118
00:42:12,720 --> 00:42:15,119
only going to find and fix

1119
00:42:15,119 --> 00:42:17,280
some of the vulnerabilities within our

1120
00:42:17,280 --> 00:42:19,599
code but there's always going to be more

1121
00:42:19,599 --> 00:42:21,839
right but by focusing on those controls

1122
00:42:21,839 --> 00:42:24,000
and implementing strong controls we

1123
00:42:24,000 --> 00:42:27,440
could eliminate those entire categories

1124
00:42:27,440 --> 00:42:29,119
getting back to this inner loop thing

1125
00:42:29,119 --> 00:42:31,760
that also lets us do this stuff fast and

1126
00:42:31,760 --> 00:42:33,920
accurate right have any of you ever run

1127
00:42:33,920 --> 00:42:36,800
a qa test before

1128
00:42:36,800 --> 00:42:38,800
right it's fast

1129
00:42:38,800 --> 00:42:40,640
right you run a qa test is what maybe

1130
00:42:40,640 --> 00:42:41,920
milliseconds

1131
00:42:41,920 --> 00:42:44,160
right so if we can write a qa test that

1132
00:42:44,160 --> 00:42:46,640
will test for a security control and

1133
00:42:46,640 --> 00:42:48,480
have a result in

1134
00:42:48,480 --> 00:42:51,280
milliseconds or seconds that's accurate

1135
00:42:51,280 --> 00:42:54,000
and tells us if that control is there

1136
00:42:54,000 --> 00:42:56,319
that's incredibly valuable right and so

1137
00:42:56,319 --> 00:42:58,160
now that's what we're talking about with

1138
00:42:58,160 --> 00:43:01,599
security as code right so we we we

1139
00:43:01,599 --> 00:43:04,800
have to agree on a control first

1140
00:43:04,800 --> 00:43:06,480
once we have the control we can write

1141
00:43:06,480 --> 00:43:09,119
the requirements which we can turn to qa

1142
00:43:09,119 --> 00:43:10,160
test

1143
00:43:10,160 --> 00:43:11,920
and i always use the example of having

1144
00:43:11,920 --> 00:43:14,319
just a conversation with a csun right

1145
00:43:14,319 --> 00:43:15,680
because you know this is something that

1146
00:43:15,680 --> 00:43:17,440
happened to me once right you know cso

1147
00:43:17,440 --> 00:43:19,520
came to me and said hey

1148
00:43:19,520 --> 00:43:21,599
can you promise me that my application

1149
00:43:21,599 --> 00:43:23,440
does not have any cross-site scripting

1150
00:43:23,440 --> 00:43:26,480
vulnerabilities in it

1151
00:43:26,480 --> 00:43:27,280
no

1152
00:43:27,280 --> 00:43:29,200
right if anybody in this room can can

1153
00:43:29,200 --> 00:43:32,400
say yes you're you're probably a liar

1154
00:43:32,400 --> 00:43:34,960
right we can never guarantee right that

1155
00:43:34,960 --> 00:43:37,040
we don't have a vulnerability in our app

1156
00:43:37,040 --> 00:43:38,640
we might be able to say oh wait we've

1157
00:43:38,640 --> 00:43:40,960
had 10 pen tests and we found two and we

1158
00:43:40,960 --> 00:43:42,880
fixed them or check mark said that we

1159
00:43:42,880 --> 00:43:44,720
don't have any but can we really say

1160
00:43:44,720 --> 00:43:46,960
with confidence that there's none there

1161
00:43:46,960 --> 00:43:48,720
we absolutely can't

1162
00:43:48,720 --> 00:43:49,760
however

1163
00:43:49,760 --> 00:43:51,839
if we all agree as a group that's

1164
00:43:51,839 --> 00:43:53,119
something like

1165
00:43:53,119 --> 00:43:56,000
owaspa sappy will prevent cross-site

1166
00:43:56,000 --> 00:43:57,599
scripting in our organ in our

1167
00:43:57,599 --> 00:43:58,880
applications

1168
00:43:58,880 --> 00:44:01,200
and here is the snippet on how to

1169
00:44:01,200 --> 00:44:04,079
incorporate that into our apps

1170
00:44:04,079 --> 00:44:06,800
well now we can write a qa test for that

1171
00:44:06,800 --> 00:44:09,040
it's going to run in milliseconds and

1172
00:44:09,040 --> 00:44:11,200
check our application and tell us if

1173
00:44:11,200 --> 00:44:14,079
that control is present and configured

1174
00:44:14,079 --> 00:44:16,319
properly and so now if the cso comes

1175
00:44:16,319 --> 00:44:18,480
back to me and says hey josh can you

1176
00:44:18,480 --> 00:44:19,920
guarantee me my app doesn't have

1177
00:44:19,920 --> 00:44:21,920
cross-site scripting in it i still can't

1178
00:44:21,920 --> 00:44:24,960
say yes but i can at least say hey we've

1179
00:44:24,960 --> 00:44:27,920
agreed on this control that prevents

1180
00:44:27,920 --> 00:44:30,400
this vulnerability and here is all of

1181
00:44:30,400 --> 00:44:32,400
the green lights and the test results

1182
00:44:32,400 --> 00:44:34,800
saying that this was done properly right

1183
00:44:34,800 --> 00:44:36,480
so at least according to the thing that

1184
00:44:36,480 --> 00:44:37,839
you agreed to

1185
00:44:37,839 --> 00:44:40,160
yes your application is protected from

1186
00:44:40,160 --> 00:44:42,319
cross-site scripting

1187
00:44:42,319 --> 00:44:43,680
so that was a long tangent but that's

1188
00:44:43,680 --> 00:44:46,160
what we mean by security as code and i'm

1189
00:44:46,160 --> 00:44:47,760
running a little low on time so we're

1190
00:44:47,760 --> 00:44:49,280
going to skip the thought exercise here

1191
00:44:49,280 --> 00:44:50,880
a little bit

1192
00:44:50,880 --> 00:44:53,040
you know short version is personally i

1193
00:44:53,040 --> 00:44:54,400
think securities code is going to save

1194
00:44:54,400 --> 00:44:55,760
the day right you know this is kind of

1195
00:44:55,760 --> 00:44:57,119
part of the key

1196
00:44:57,119 --> 00:44:59,760
to enabling developers and being able to

1197
00:44:59,760 --> 00:45:01,280
do appsec

1198
00:45:01,280 --> 00:45:04,000
at agile speeds right and we can do

1199
00:45:04,000 --> 00:45:05,920
security as code both in the inner loop

1200
00:45:05,920 --> 00:45:07,760
and the outer loop and actually we kind

1201
00:45:07,760 --> 00:45:09,920
of have to use it in both

1202
00:45:09,920 --> 00:45:11,599
because you know some things like unit

1203
00:45:11,599 --> 00:45:13,760
and functional qa testing you know we

1204
00:45:13,760 --> 00:45:15,760
can do within the inner loop but you

1205
00:45:15,760 --> 00:45:17,680
know things like integration testing and

1206
00:45:17,680 --> 00:45:19,760
end-to-end testing we've got to have all

1207
00:45:19,760 --> 00:45:22,319
the libraries we've maybe even have to

1208
00:45:22,319 --> 00:45:24,560
have the app running so you know just by

1209
00:45:24,560 --> 00:45:26,480
the nature of those types of tests the

1210
00:45:26,480 --> 00:45:28,400
application you know does have to be in

1211
00:45:28,400 --> 00:45:30,160
the outer loop

1212
00:45:30,160 --> 00:45:32,880
but when done properly security is code

1213
00:45:32,880 --> 00:45:35,920
my opinion has immeasurable amounts of

1214
00:45:35,920 --> 00:45:39,200
tax and waste um and it also reduces

1215
00:45:39,200 --> 00:45:40,800
what we have to do with all those other

1216
00:45:40,800 --> 00:45:43,200
technologies right if we agree on owasp

1217
00:45:43,200 --> 00:45:44,800
sapi if we agree that it prevents

1218
00:45:44,800 --> 00:45:46,960
cross-site scripting well i don't really

1219
00:45:46,960 --> 00:45:49,520
need to test for that anymore right i

1220
00:45:49,520 --> 00:45:51,680
can configure my static analysis tools

1221
00:45:51,680 --> 00:45:53,760
my dynamic analysis tools that if this

1222
00:45:53,760 --> 00:45:55,359
qa test passed

1223
00:45:55,359 --> 00:45:56,960
well i don't really need to run those on

1224
00:45:56,960 --> 00:45:58,960
every build anymore right so i can start

1225
00:45:58,960 --> 00:46:00,560
tuning those scanners so that they're

1226
00:46:00,560 --> 00:46:02,319
less impactful when they are running

1227
00:46:02,319 --> 00:46:05,040
that pipeline

1228
00:46:05,200 --> 00:46:07,920
all right security spell checkers um

1229
00:46:07,920 --> 00:46:09,920
sorry security your cyber security

1230
00:46:09,920 --> 00:46:11,520
people in the room this is one of those

1231
00:46:11,520 --> 00:46:13,760
things that i think to to cyber people

1232
00:46:13,760 --> 00:46:16,960
sounds fantastic on paper um

1233
00:46:16,960 --> 00:46:18,480
right and we get really excited about

1234
00:46:18,480 --> 00:46:20,800
this hey you know how great would it be

1235
00:46:20,800 --> 00:46:22,800
if this developer was writing a

1236
00:46:22,800 --> 00:46:24,240
vulnerability

1237
00:46:24,240 --> 00:46:26,319
and we stopped them in the middle of it

1238
00:46:26,319 --> 00:46:29,280
and told them they were doing it wrong

1239
00:46:29,280 --> 00:46:31,920
it probably sounds really really great

1240
00:46:31,920 --> 00:46:33,839
right but

1241
00:46:33,839 --> 00:46:36,400
it's really not and in 100 of cases i've

1242
00:46:36,400 --> 00:46:38,319
seen where these tools are used they've

1243
00:46:38,319 --> 00:46:40,880
been actively fought or disabled by the

1244
00:46:40,880 --> 00:46:42,720
developers right and this really gets

1245
00:46:42,720 --> 00:46:45,359
down to you know just lost time right

1246
00:46:45,359 --> 00:46:46,640
you know there's a lot of studies out

1247
00:46:46,640 --> 00:46:48,480
there that show that every time you're

1248
00:46:48,480 --> 00:46:50,960
focused on a task such as writing code

1249
00:46:50,960 --> 00:46:52,400
and you're taken out of the moment

1250
00:46:52,400 --> 00:46:54,319
you're distracted you read an email you

1251
00:46:54,319 --> 00:46:57,040
check your phone whatever you lose 23

1252
00:46:57,040 --> 00:46:59,680
minutes of concentration right it takes

1253
00:46:59,680 --> 00:47:02,960
you 23 minutes to focus back on that

1254
00:47:02,960 --> 00:47:05,280
task so every time you interrupt the

1255
00:47:05,280 --> 00:47:07,119
developer from

1256
00:47:07,119 --> 00:47:09,599
doing their job and writing code you're

1257
00:47:09,599 --> 00:47:12,560
taking 23 minutes of time

1258
00:47:12,560 --> 00:47:14,480
out of their day that they could be

1259
00:47:14,480 --> 00:47:16,800
writing those business future features

1260
00:47:16,800 --> 00:47:18,800
so again right to security it sounds

1261
00:47:18,800 --> 00:47:20,240
fantastic

1262
00:47:20,240 --> 00:47:22,960
but to developers it's an absolute

1263
00:47:22,960 --> 00:47:25,359
nightmare i will say

1264
00:47:25,359 --> 00:47:27,520
in my opinion this is an area where we

1265
00:47:27,520 --> 00:47:29,280
could see a lot of innovation in the

1266
00:47:29,280 --> 00:47:30,960
next couple of years right we've had

1267
00:47:30,960 --> 00:47:32,559
some cool new things come out like

1268
00:47:32,559 --> 00:47:34,960
github co-pilot um you know that kind of

1269
00:47:34,960 --> 00:47:37,359
writes code for us you know it's still a

1270
00:47:37,359 --> 00:47:40,000
little iffy and does some weird stuff

1271
00:47:40,000 --> 00:47:42,480
but it has potential to be able to do

1272
00:47:42,480 --> 00:47:44,400
this and write code for us not only

1273
00:47:44,400 --> 00:47:46,559
write code write secure code

1274
00:47:46,559 --> 00:47:48,160
right you know think of gmail i can open

1275
00:47:48,160 --> 00:47:51,119
up gmail now and hit type in hi and then

1276
00:47:51,119 --> 00:47:53,680
tab tab tab tab tab and gmail will write

1277
00:47:53,680 --> 00:47:55,520
my email for me with pretty much the

1278
00:47:55,520 --> 00:47:58,000
words that i would use right that's

1279
00:47:58,000 --> 00:47:59,359
awesome

1280
00:47:59,359 --> 00:48:01,119
if we get these security tools to the

1281
00:48:01,119 --> 00:48:03,520
level of maturity where they can do that

1282
00:48:03,520 --> 00:48:05,520
they could be incredibly valuable in the

1283
00:48:05,520 --> 00:48:07,839
inner loop

1284
00:48:08,079 --> 00:48:10,720
all right so wrapping up

1285
00:48:10,720 --> 00:48:12,720
model for the future

1286
00:48:12,720 --> 00:48:15,520
so this is my i was in big four for four

1287
00:48:15,520 --> 00:48:17,920
years so i've got to have a slide with

1288
00:48:17,920 --> 00:48:20,559
as many buzzwords in it as i can

1289
00:48:20,559 --> 00:48:22,160
performing security inside the inner

1290
00:48:22,160 --> 00:48:24,000
loop drives a shift left culture that

1291
00:48:24,000 --> 00:48:25,760
shortens developer feedback loops to

1292
00:48:25,760 --> 00:48:27,839
release code at high velocity by

1293
00:48:27,839 --> 00:48:32,240
leveraging secure by design principles

1294
00:48:32,240 --> 00:48:34,000
and then we've got again in typical big

1295
00:48:34,000 --> 00:48:36,160
four fashion um you know just a few

1296
00:48:36,160 --> 00:48:38,559
slides here with a whole lot of words

1297
00:48:38,559 --> 00:48:40,160
that i'll publish and you can read at

1298
00:48:40,160 --> 00:48:42,240
your leisure but you know really the key

1299
00:48:42,240 --> 00:48:44,559
message here is right i would encourage

1300
00:48:44,559 --> 00:48:46,640
all of you you know the inner loop and

1301
00:48:46,640 --> 00:48:48,480
the outer loop work together i'm not

1302
00:48:48,480 --> 00:48:50,720
saying stop doing things the way you're

1303
00:48:50,720 --> 00:48:52,720
doing them today i mean i kind of am but

1304
00:48:52,720 --> 00:48:55,119
you know the ci cd pipelines are still

1305
00:48:55,119 --> 00:48:57,760
great automation is great right don't

1306
00:48:57,760 --> 00:48:59,200
automate things for the sake of

1307
00:48:59,200 --> 00:49:01,599
automating them think about the impact

1308
00:49:01,599 --> 00:49:03,599
but the inner loop and the outer loop

1309
00:49:03,599 --> 00:49:05,440
they work together they're hand in hand

1310
00:49:05,440 --> 00:49:07,839
and they allow us to change how we're

1311
00:49:07,839 --> 00:49:09,280
doing things today so that we're

1312
00:49:09,280 --> 00:49:11,760
enabling our developers you know rather

1313
00:49:11,760 --> 00:49:14,720
than punishing them right our outer loop

1314
00:49:14,720 --> 00:49:16,800
is is not scalable right every time we

1315
00:49:16,800 --> 00:49:18,800
put another tool in our pipeline it

1316
00:49:18,800 --> 00:49:22,559
takes more time right and right now your

1317
00:49:22,559 --> 00:49:25,119
development teams are severely outpacing

1318
00:49:25,119 --> 00:49:25,839
you

1319
00:49:25,839 --> 00:49:27,680
right they're trying to release code

1320
00:49:27,680 --> 00:49:30,240
maybe you just take them eight nine 12

1321
00:49:30,240 --> 00:49:32,079
months to release an app now they're

1322
00:49:32,079 --> 00:49:34,400
releasing them in four weeks

1323
00:49:34,400 --> 00:49:37,200
two weeks if you're amazon netflix maybe

1324
00:49:37,200 --> 00:49:38,559
eight seconds

1325
00:49:38,559 --> 00:49:41,119
right and if we take a tool that takes

1326
00:49:41,119 --> 00:49:42,880
eight hours to run and we put it in our

1327
00:49:42,880 --> 00:49:45,040
pipeline well you just created an eight

1328
00:49:45,040 --> 00:49:47,599
hour bottleneck

1329
00:49:47,599 --> 00:49:48,400
so

1330
00:49:48,400 --> 00:49:50,640
i'm getting the

1331
00:49:50,640 --> 00:49:53,200
sign here to stfu so we're just going to

1332
00:49:53,200 --> 00:49:56,480
jump to the conclusion here

1333
00:49:56,480 --> 00:49:57,520
so

1334
00:49:57,520 --> 00:49:59,280
in conclusion right

1335
00:49:59,280 --> 00:50:01,280
i want you to use the inner loop again

1336
00:50:01,280 --> 00:50:03,280
as a thought exercise just like we did

1337
00:50:03,280 --> 00:50:04,960
to consider the impact that you're

1338
00:50:04,960 --> 00:50:06,559
having on development teams so instead

1339
00:50:06,559 --> 00:50:08,800
of making these decisions purchasing

1340
00:50:08,800 --> 00:50:11,119
tools giving them to developers and then

1341
00:50:11,119 --> 00:50:13,119
wondering why they hate you

1342
00:50:13,119 --> 00:50:14,960
just consider that impact that you're

1343
00:50:14,960 --> 00:50:17,599
having right there is no amount there's

1344
00:50:17,599 --> 00:50:20,000
no right amount of tax and waste it's

1345
00:50:20,000 --> 00:50:21,440
going to be different for every

1346
00:50:21,440 --> 00:50:23,359
organization right so figure out what

1347
00:50:23,359 --> 00:50:25,920
works for you have the thought exercises

1348
00:50:25,920 --> 00:50:28,400
and adjust accordingly right continuous

1349
00:50:28,400 --> 00:50:30,640
improvement now also changes right it

1350
00:50:30,640 --> 00:50:34,079
becomes more of continuously reducing

1351
00:50:34,079 --> 00:50:35,760
tax and waste you're going to have a lot

1352
00:50:35,760 --> 00:50:38,400
of tax and waste today and that's okay

1353
00:50:38,400 --> 00:50:40,240
you know think about how you can reduce

1354
00:50:40,240 --> 00:50:42,480
that and then don't shift left simply

1355
00:50:42,480 --> 00:50:44,559
for the sake of shifting left right

1356
00:50:44,559 --> 00:50:46,160
we're doing this a lot just like don't

1357
00:50:46,160 --> 00:50:48,319
automate for the sake of automate right

1358
00:50:48,319 --> 00:50:50,319
if you take a 24 hour process and you

1359
00:50:50,319 --> 00:50:52,960
automate it it's still a 24 hour process

1360
00:50:52,960 --> 00:50:54,319
you just don't have to push the button

1361
00:50:54,319 --> 00:50:56,000
anymore right we got to figure out how

1362
00:50:56,000 --> 00:50:57,760
to make that process more effective as

1363
00:50:57,760 --> 00:51:00,079
well same thing with shifting left

1364
00:51:00,079 --> 00:51:01,599
and then

1365
00:51:01,599 --> 00:51:03,119
we're out of time but if you have any

1366
00:51:03,119 --> 00:51:04,960
questions feel free to find me happy to

1367
00:51:04,960 --> 00:51:08,520
talk about this more

1368
00:51:12,800 --> 00:51:14,880
you

