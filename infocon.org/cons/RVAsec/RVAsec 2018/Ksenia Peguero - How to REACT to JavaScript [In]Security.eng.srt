1
00:00:20,890 --> 00:00:30,740
<font color="#E5E5E5">all right so let's kick it up</font>

2
00:00:24,790 --> 00:00:34,910
so I'm<font color="#CCCCCC"> Sonia Epicure I am from Siberia</font>

3
00:00:30,740 --> 00:00:38,239
<font color="#E5E5E5">originally and working in the security</font>

4
00:00:34,910 --> 00:00:40,910
<font color="#CCCCCC">field for</font><font color="#E5E5E5"> over eight years now</font><font color="#CCCCCC"> with</font><font color="#E5E5E5"> the</font>

5
00:00:38,239 --> 00:00:42,800
company<font color="#CCCCCC"> you should be called Citadel</font>

6
00:00:40,910 --> 00:00:46,720
acquired by<font color="#CCCCCC"> synopsis so now with</font>

7
00:00:42,800 --> 00:00:50,440
synopsis<font color="#CCCCCC"> I used to be doing consulting</font>

8
00:00:46,720 --> 00:00:52,640
for good six seven years<font color="#E5E5E5"> and now I'm</font>

9
00:00:50,440 --> 00:00:54,110
focusing on research<font color="#E5E5E5"> now that we</font>

10
00:00:52,640 --> 00:00:56,809
officially<font color="#E5E5E5"> have an R&D department</font>

11
00:00:54,110 --> 00:00:59,720
awesome<font color="#E5E5E5"> I absolutely love it and I</font>

12
00:00:56,809 --> 00:01:03,530
concentrate on research in JavaScript

13
00:00:59,720 --> 00:01:06,470
<font color="#E5E5E5">and web</font><font color="#CCCCCC"> technologies I'm also doing my</font>

14
00:01:03,530 --> 00:01:09,409
PhD<font color="#E5E5E5"> it's gonna take me forever</font><font color="#CCCCCC"> I George</font>

15
00:01:06,470 --> 00:01:11,990
Washington University and<font color="#E5E5E5"> I tweaked on</font>

16
00:01:09,409 --> 00:01:14,840
security<font color="#E5E5E5"> stuff and I have a little girl</font>

17
00:01:11,990 --> 00:01:19,190
<font color="#CCCCCC">she's</font><font color="#E5E5E5"> amazing she's gonna turn one year</font>

18
00:01:14,840 --> 00:01:21,470
old<font color="#E5E5E5"> next week</font><font color="#CCCCCC"> and in my</font><font color="#E5E5E5"> free time when</font><font color="#CCCCCC"> I</font>

19
00:01:19,190 --> 00:01:23,810
have free<font color="#CCCCCC"> time which is almost</font><font color="#E5E5E5"> never</font><font color="#CCCCCC"> do</font>

20
00:01:21,470 --> 00:01:27,320
ballroom<font color="#E5E5E5"> dancing but also one thing</font>

21
00:01:23,810 --> 00:01:29,570
because I am from Siberia<font color="#E5E5E5"> we I grew up</font>

22
00:01:27,320 --> 00:01:31,788
where we<font color="#CCCCCC"> have like</font><font color="#E5E5E5"> six months of snow</font><font color="#CCCCCC"> so</font>

23
00:01:29,570 --> 00:01:34,820
what do you do when you have six<font color="#E5E5E5"> months</font>

24
00:01:31,789 --> 00:01:37,939
<font color="#CCCCCC">of</font><font color="#E5E5E5"> snow yes what kind of sport</font><font color="#CCCCCC"> you play</font>

25
00:01:34,820 --> 00:01:40,189
when you<font color="#CCCCCC"> have six months of snow</font><font color="#E5E5E5"> this is</font>

26
00:01:37,939 --> 00:01:43,520
incredible like last night was amazing

27
00:01:40,189 --> 00:01:45,949
<font color="#CCCCCC">my dad played hockey professional in</font>

28
00:01:43,520 --> 00:01:49,729
Russia<font color="#E5E5E5"> so I grew up in a</font><font color="#CCCCCC"> hockey field so</font>

29
00:01:45,950 --> 00:01:52,039
last night was just<font color="#CCCCCC"> ah alright</font><font color="#E5E5E5"> so now</font>

30
00:01:49,729 --> 00:01:54,560
we're<font color="#CCCCCC"> going to talk about JavaScript so</font>

31
00:01:52,039 --> 00:01:56,990
today I'll talk<font color="#CCCCCC"> about JavaScript kind</font><font color="#E5E5E5"> of</font>

32
00:01:54,560 --> 00:01:59,479
<font color="#E5E5E5">field a little bit in general covering</font>

33
00:01:56,990 --> 00:02:01,130
in terms of security<font color="#CCCCCC"> of course we'll</font>

34
00:01:59,479 --> 00:02:04,880
talk<font color="#CCCCCC"> about common JavaScript</font><font color="#E5E5E5"> owner</font>

35
00:02:01,130 --> 00:02:06,170
abilities<font color="#E5E5E5"> and then we will look at</font>

36
00:02:04,880 --> 00:02:08,210
frameworks because<font color="#E5E5E5"> everything is</font>

37
00:02:06,170 --> 00:02:10,009
frameworks in<font color="#CCCCCC"> the JavaScript world</font><font color="#E5E5E5"> and I</font>

38
00:02:08,210 --> 00:02:13,730
<font color="#E5E5E5">will have some demos and some specific</font>

39
00:02:10,008 --> 00:02:15,950
<font color="#CCCCCC">examples in react framework</font><font color="#E5E5E5"> securities</font>

40
00:02:13,730 --> 00:02:19,459
<font color="#E5E5E5">the security problems the mistakes that</font>

41
00:02:15,950 --> 00:02:21,380
developers make and how do we<font color="#E5E5E5"> fix them</font>

42
00:02:19,460 --> 00:02:22,100
just more important and I do have

43
00:02:21,380 --> 00:02:26,450
something<font color="#CCCCCC"> else</font>

44
00:02:22,100 --> 00:02:29,350
so praying to the demo gods<font color="#E5E5E5"> so who here</font>

45
00:02:26,450 --> 00:02:34,010
has written JavaScript

46
00:02:29,350 --> 00:02:35,569
awesome who has<font color="#E5E5E5"> written in react</font><font color="#CCCCCC"> all</font>

47
00:02:34,010 --> 00:02:36,940
<font color="#CCCCCC">right who knows what is cross-site</font>

48
00:02:35,569 --> 00:02:40,510
scripting

49
00:02:36,940 --> 00:02:43,030
whoa<font color="#E5E5E5"> awesome</font><font color="#CCCCCC"> that's</font><font color="#E5E5E5"> real good so I love</font>

50
00:02:40,510 --> 00:02:44,739
JavaScript<font color="#E5E5E5"> and if you have written</font>

51
00:02:43,030 --> 00:02:46,510
JavaScript you probably have a love-hate

52
00:02:44,740 --> 00:02:48,190
relationship and<font color="#E5E5E5"> that's like one</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> my</font>

53
00:02:46,510 --> 00:02:50,530
favorite<font color="#E5E5E5"> quotes</font><font color="#CCCCCC"> from</font><font color="#E5E5E5"> Twitter is you know</font>

54
00:02:48,190 --> 00:02:52,840
<font color="#CCCCCC">JavaScript</font><font color="#E5E5E5"> makes me say screw all this</font>

55
00:02:50,530 --> 00:02:57,760
but<font color="#CCCCCC"> I'd</font><font color="#E5E5E5"> not always know what this means</font>

56
00:02:52,840 --> 00:03:00,190
in<font color="#E5E5E5"> this context all right geeky jokes</font>

57
00:02:57,760 --> 00:03:02,140
so<font color="#E5E5E5"> JavaScript</font><font color="#CCCCCC"> we're going to talk about</font>

58
00:03:00,190 --> 00:03:03,790
<font color="#E5E5E5">client-side and server-side</font><font color="#CCCCCC"> writes</font>

59
00:03:02,140 --> 00:03:05,500
because<font color="#CCCCCC"> now we can</font><font color="#E5E5E5"> have JavaScript on</font>

60
00:03:03,790 --> 00:03:09,040
the server side<font color="#E5E5E5"> so if we talk</font><font color="#CCCCCC"> about</font>

61
00:03:05,500 --> 00:03:12,190
client side JavaScript<font color="#CCCCCC"> you know again</font>

62
00:03:09,040 --> 00:03:13,870
<font color="#E5E5E5">another amazing quote where there are</font>

63
00:03:12,190 --> 00:03:15,640
more JavaScript<font color="#E5E5E5"> frameworks and there are</font>

64
00:03:13,870 --> 00:03:21,030
<font color="#E5E5E5">applications that are using</font><font color="#CCCCCC"> them</font><font color="#E5E5E5"> and</font>

65
00:03:15,640 --> 00:03:22,600
notice<font color="#CCCCCC"> that this quote is from 2012</font>

66
00:03:21,030 --> 00:03:26,310
<font color="#E5E5E5">guess what</font>

67
00:03:22,600 --> 00:03:29,920
no they're even more frameworks<font color="#CCCCCC"> the</font>

68
00:03:26,310 --> 00:03:32,620
latest what's the name of that<font color="#E5E5E5"> block is</font>

69
00:03:29,920 --> 00:03:35,260
a<font color="#CCCCCC"> JavaScript report</font><font color="#E5E5E5"> somewhere in</font>

70
00:03:32,620 --> 00:03:38,080
February or January<font color="#CCCCCC"> they came out with a</font>

71
00:03:35,260 --> 00:03:41,649
list of JavaScript JavaScript frameworks

72
00:03:38,080 --> 00:03:43,390
<font color="#E5E5E5">and the list of over 50 of them that are</font>

73
00:03:41,650 --> 00:03:46,959
being used<font color="#E5E5E5"> I mean some</font><font color="#CCCCCC"> of them are very</font>

74
00:03:43,390 --> 00:03:48,850
<font color="#E5E5E5">have very specific</font><font color="#CCCCCC"> views right</font><font color="#E5E5E5"> so you're</font>

75
00:03:46,959 --> 00:03:51,220
not<font color="#E5E5E5"> gonna know all</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> them but</font><font color="#CCCCCC"> like</font>

76
00:03:48,850 --> 00:03:53,440
there are over 50<font color="#E5E5E5"> JavaScript frameworks</font>

77
00:03:51,220 --> 00:03:57,459
<font color="#CCCCCC">how do we live in this world</font><font color="#E5E5E5"> like how do</font>

78
00:03:53,440 --> 00:04:01,480
we work<font color="#CCCCCC"> Kevin how do we keep up to date</font>

79
00:03:57,459 --> 00:04:04,030
<font color="#CCCCCC">that's the biggest</font><font color="#E5E5E5"> thing and yeah you</font>

80
00:04:01,480 --> 00:04:07,209
know this<font color="#E5E5E5"> is how we wrote code in 2004</font>

81
00:04:04,030 --> 00:04:10,500
and this is<font color="#CCCCCC"> what's happening today</font><font color="#E5E5E5"> on</font>

82
00:04:07,209 --> 00:04:13,209
again yeah but this is a comic<font color="#CCCCCC"> from 2014</font>

83
00:04:10,500 --> 00:04:14,350
two months later<font color="#CCCCCC"> is it still up to date</font>

84
00:04:13,209 --> 00:04:16,180
you know<font color="#CCCCCC"> I'm spending two days in</font>

85
00:04:14,350 --> 00:04:18,279
Richmond<font color="#CCCCCC"> and when I come back when to</font>

86
00:04:16,180 --> 00:04:19,989
work on Monday maybe react is not gonna

87
00:04:18,279 --> 00:04:22,929
be a thing<font color="#CCCCCC"> anymore it's just</font><font color="#E5E5E5"> it's</font>

88
00:04:19,988 --> 00:04:28,030
developing so fast<font color="#CCCCCC"> it's just incredible</font>

89
00:04:22,930 --> 00:04:30,160
so frameworks<font color="#CCCCCC"> the good</font><font color="#E5E5E5"> the bad and the</font>

90
00:04:28,030 --> 00:04:32,590
ugly right<font color="#CCCCCC"> all</font><font color="#E5E5E5"> right so that they're</font>

91
00:04:30,160 --> 00:04:36,070
great<font color="#E5E5E5"> because if you know the framework</font>

92
00:04:32,590 --> 00:04:38,440
the development is much faster<font color="#CCCCCC"> if you're</font>

93
00:04:36,070 --> 00:04:41,349
<font color="#CCCCCC">Road react</font><font color="#E5E5E5"> how how</font><font color="#CCCCCC"> long does it take you</font>

94
00:04:38,440 --> 00:04:43,360
<font color="#CCCCCC">to start your react app it's like</font><font color="#E5E5E5"> one</font>

95
00:04:41,350 --> 00:04:47,110
line of code<font color="#CCCCCC"> right I mean</font><font color="#E5E5E5"> one command</font>

96
00:04:43,360 --> 00:04:48,910
and pops up<font color="#E5E5E5"> your your framework well</font>

97
00:04:47,110 --> 00:04:50,740
<font color="#CCCCCC">they're kind of the struts for the</font>

98
00:04:48,910 --> 00:04:53,770
application

99
00:04:50,740 --> 00:04:58,330
if you're familiar with<font color="#E5E5E5"> the idioms</font><font color="#CCCCCC"> it's</font>

100
00:04:53,770 --> 00:05:00,849
pretty easy and because you're using so

101
00:04:58,330 --> 00:05:03,940
much<font color="#CCCCCC"> open-source code that's already all</font>

102
00:05:00,850 --> 00:05:06,220
<font color="#E5E5E5">so much code that over you framework if</font>

103
00:05:03,940 --> 00:05:08,740
the security features are<font color="#E5E5E5"> built into it</font>

104
00:05:06,220 --> 00:05:10,900
<font color="#E5E5E5">then you</font><font color="#CCCCCC"> just have them</font><font color="#E5E5E5"> for free by</font>

105
00:05:08,740 --> 00:05:13,780
default this<font color="#CCCCCC"> is awesome</font>

106
00:05:10,900 --> 00:05:16,210
the bad so if you don't know the

107
00:05:13,780 --> 00:05:16,479
framework it's a pretty high learning

108
00:05:16,210 --> 00:05:19,479
curve

109
00:05:16,480 --> 00:05:22,300
pretty steep<font color="#CCCCCC"> right</font><font color="#E5E5E5"> it takes a while</font>

110
00:05:19,480 --> 00:05:24,010
<font color="#E5E5E5">especially</font><font color="#CCCCCC"> if you are in the security</font>

111
00:05:22,300 --> 00:05:26,020
<font color="#CCCCCC">field and you need to do code review so</font>

112
00:05:24,010 --> 00:05:27,520
you're<font color="#E5E5E5"> not a developer</font><font color="#CCCCCC"> and you have to</font>

113
00:05:26,020 --> 00:05:30,969
learn those<font color="#E5E5E5"> new frameworks you know</font>

114
00:05:27,520 --> 00:05:34,090
<font color="#E5E5E5">every couple of months that's but it's</font>

115
00:05:30,970 --> 00:05:37,120
hard it's not easy<font color="#CCCCCC"> okay if security</font>

116
00:05:34,090 --> 00:05:39,489
<font color="#E5E5E5">features are built in awesome if there</font>

117
00:05:37,120 --> 00:05:42,820
<font color="#E5E5E5">are bugs in the framework not so great</font>

118
00:05:39,490 --> 00:05:46,410
<font color="#CCCCCC">right the other thing is</font><font color="#E5E5E5"> with the</font>

119
00:05:42,820 --> 00:05:49,450
frameworks<font color="#E5E5E5"> oftentimes they are very</font>

120
00:05:46,410 --> 00:05:50,980
targeted to<font color="#CCCCCC"> a specific</font><font color="#E5E5E5"> task</font><font color="#CCCCCC"> so if you</font>

121
00:05:49,450 --> 00:05:54,580
<font color="#E5E5E5">compare them to</font><font color="#CCCCCC"> like you know Java</font>

122
00:05:50,980 --> 00:05:57,340
<font color="#CCCCCC">Spring Framework or struts framework in</font>

123
00:05:54,580 --> 00:05:59,680
Java those frameworks<font color="#E5E5E5"> were more over</font>

124
00:05:57,340 --> 00:06:01,359
<font color="#E5E5E5">encount encompassing and also they are</font>

125
00:05:59,680 --> 00:06:04,570
server-side frameworks<font color="#CCCCCC"> but</font><font color="#E5E5E5"> even if you</font>

126
00:06:01,360 --> 00:06:06,900
compare<font color="#E5E5E5"> them to like Express or sales</font>

127
00:06:04,570 --> 00:06:10,270
<font color="#CCCCCC">GSU</font><font color="#E5E5E5"> server-side</font><font color="#CCCCCC"> JavaScript frameworks</font>

128
00:06:06,900 --> 00:06:13,810
<font color="#CCCCCC">the older frameworks they kind</font><font color="#E5E5E5"> of cover</font>

129
00:06:10,270 --> 00:06:17,140
all the tasks<font color="#E5E5E5"> and a lot of different</font>

130
00:06:13,810 --> 00:06:20,440
<font color="#E5E5E5">features and things the developer needs</font>

131
00:06:17,140 --> 00:06:22,810
<font color="#CCCCCC">where in the JavaScript in the kind</font><font color="#E5E5E5"> of</font>

132
00:06:20,440 --> 00:06:25,330
more fast-paced<font color="#E5E5E5"> frameworks they focus</font>

133
00:06:22,810 --> 00:06:27,730
usually<font color="#CCCCCC"> on specific tasks</font><font color="#E5E5E5"> so if you need</font>

134
00:06:25,330 --> 00:06:28,930
to<font color="#CCCCCC"> do</font><font color="#E5E5E5"> something else that's not built</font>

135
00:06:27,730 --> 00:06:31,480
into<font color="#E5E5E5"> the framework you're gonna use</font>

136
00:06:28,930 --> 00:06:35,230
<font color="#E5E5E5">third-party plugins and the quality of</font>

137
00:06:31,480 --> 00:06:37,870
the code not<font color="#E5E5E5"> always great</font><font color="#CCCCCC"> that a great</font>

138
00:06:35,230 --> 00:06:40,900
example<font color="#E5E5E5"> is angular like angular by</font>

139
00:06:37,870 --> 00:06:42,970
itself is pretty secure it like<font color="#CCCCCC"> it has a</font>

140
00:06:40,900 --> 00:06:45,429
lot of good things built<font color="#CCCCCC"> into it and</font>

141
00:06:42,970 --> 00:06:47,170
when<font color="#CCCCCC"> we</font><font color="#E5E5E5"> did</font><font color="#CCCCCC"> the analysis most of the</font>

142
00:06:45,430 --> 00:06:50,020
bugs most of the vulnerabilities we find

143
00:06:47,170 --> 00:06:53,430
are actually in angular<font color="#E5E5E5"> plugins because</font>

144
00:06:50,020 --> 00:06:55,440
the<font color="#E5E5E5"> quality of code is not as great</font>

145
00:06:53,430 --> 00:06:58,810
<font color="#CCCCCC">fragmented knowledge poor documentation</font>

146
00:06:55,440 --> 00:07:02,410
<font color="#CCCCCC">this</font><font color="#E5E5E5"> is not news this is not just the</font>

147
00:06:58,810 --> 00:07:04,240
JavaScript<font color="#E5E5E5"> frameworks</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> the reality is</font>

148
00:07:02,410 --> 00:07:05,650
we<font color="#E5E5E5"> can't flip</font><font color="#CCCCCC"> without them</font><font color="#E5E5E5"> right like</font>

149
00:07:04,240 --> 00:07:08,680
who's<font color="#E5E5E5"> gonna write vanilla JavaScript</font>

150
00:07:05,650 --> 00:07:11,109
<font color="#E5E5E5">nobody so so we have we have to somehow</font>

151
00:07:08,680 --> 00:07:12,870
<font color="#E5E5E5">deal with it so if we look at the</font>

152
00:07:11,110 --> 00:07:15,520
client-side JavaScript

153
00:07:12,870 --> 00:07:18,520
<font color="#CCCCCC">problems what are the common issues that</font>

154
00:07:15,520 --> 00:07:20,799
<font color="#E5E5E5">we usually find across that scripting</font>

155
00:07:18,520 --> 00:07:22,599
obviously again since<font color="#E5E5E5"> we talked about</font><font color="#CCCCCC"> PI</font>

156
00:07:20,800 --> 00:07:25,240
inside those<font color="#E5E5E5"> gonna</font><font color="#CCCCCC"> be most</font><font color="#E5E5E5"> likely Dom</font>

157
00:07:22,600 --> 00:07:27,670
cross-site scripting<font color="#E5E5E5"> not the traditional</font>

158
00:07:25,240 --> 00:07:30,340
you know<font color="#E5E5E5"> go into the server</font><font color="#CCCCCC"> and doing</font>

159
00:07:27,670 --> 00:07:32,370
validation<font color="#E5E5E5"> of the</font><font color="#CCCCCC"> server-side a lot of</font>

160
00:07:30,340 --> 00:07:35,109
languages have<font color="#CCCCCC"> a frameworks have</font>

161
00:07:32,370 --> 00:07:36,820
expression language<font color="#E5E5E5"> like angular</font><font color="#CCCCCC"> has</font>

162
00:07:35,110 --> 00:07:38,740
expression language<font color="#CCCCCC"> view has they're</font>

163
00:07:36,820 --> 00:07:40,480
<font color="#CCCCCC">almost special language so now we have</font>

164
00:07:38,740 --> 00:07:43,630
the expression<font color="#CCCCCC"> language injections</font><font color="#E5E5E5"> for</font>

165
00:07:40,480 --> 00:07:45,130
expression injections<font color="#E5E5E5"> so which can later</font>

166
00:07:43,630 --> 00:07:48,640
lead<font color="#CCCCCC"> to cross-site scripting so it's</font>

167
00:07:45,130 --> 00:07:51,250
another new bug clickjacking<font color="#E5E5E5"> anybody</font>

168
00:07:48,640 --> 00:07:52,930
familiar with<font color="#E5E5E5"> clean</font><font color="#CCCCCC"> jackin yeah so</font>

169
00:07:51,250 --> 00:07:54,370
<font color="#E5E5E5">usually for clickjacking you need to</font>

170
00:07:52,930 --> 00:07:55,120
have<font color="#E5E5E5"> JavaScript executing in the</font>

171
00:07:54,370 --> 00:07:57,490
<font color="#E5E5E5">application</font>

172
00:07:55,120 --> 00:07:59,530
well there is SVG clickjacking now for

173
00:07:57,490 --> 00:08:03,610
<font color="#E5E5E5">example again in angular was vulnerable</font>

174
00:07:59,530 --> 00:08:06,190
to<font color="#E5E5E5"> that where you can change the</font><font color="#CCCCCC"> UI of</font>

175
00:08:03,610 --> 00:08:07,480
<font color="#E5E5E5">the application with justice VGA you</font>

176
00:08:06,190 --> 00:08:09,640
don't have to actually<font color="#CCCCCC"> execute</font><font color="#E5E5E5"> the</font>

177
00:08:07,480 --> 00:08:11,140
script<font color="#E5E5E5"> but it looks like you put another</font>

178
00:08:09,640 --> 00:08:12,760
button<font color="#E5E5E5"> on top of the button where the</font>

179
00:08:11,140 --> 00:08:14,200
user<font color="#E5E5E5"> is supposed</font><font color="#CCCCCC"> to click and you grab</font>

180
00:08:12,760 --> 00:08:17,800
their clicks and you know do some

181
00:08:14,200 --> 00:08:20,530
malicious stuff<font color="#E5E5E5"> Dom clobbering that's</font>

182
00:08:17,800 --> 00:08:23,500
not new it's been<font color="#CCCCCC"> around for a long time</font>

183
00:08:20,530 --> 00:08:26,260
but with the<font color="#E5E5E5"> JavaScript</font><font color="#CCCCCC"> frameworks</font><font color="#E5E5E5"> with</font>

184
00:08:23,500 --> 00:08:29,590
the you know heavier<font color="#E5E5E5"> logic on the client</font>

185
00:08:26,260 --> 00:08:32,770
side<font color="#CCCCCC"> that's happening more</font><font color="#E5E5E5"> often and</font>

186
00:08:29,590 --> 00:08:35,709
what<font color="#CCCCCC"> Dom clobbering is is that if you</font>

187
00:08:32,770 --> 00:08:38,049
can inject HTML suppose you cannot

188
00:08:35,710 --> 00:08:41,380
inject<font color="#E5E5E5"> JavaScript right</font><font color="#CCCCCC"> injects</font><font color="#E5E5E5"> HTML and</font>

189
00:08:38,049 --> 00:08:44,228
you inject<font color="#E5E5E5"> an element with an ID</font><font color="#CCCCCC"> that</font>

190
00:08:41,380 --> 00:08:46,870
<font color="#E5E5E5">already used in the page so</font><font color="#CCCCCC"> now you have</font>

191
00:08:44,229 --> 00:08:49,360
two<font color="#E5E5E5"> elements with the same ID guess what</font>

192
00:08:46,870 --> 00:08:50,860
some browsers are gonna treat that not

193
00:08:49,360 --> 00:08:53,320
as two different<font color="#CCCCCC"> elements but as an</font>

194
00:08:50,860 --> 00:08:55,180
array of<font color="#CCCCCC"> elements so the properties are</font>

195
00:08:53,320 --> 00:08:56,410
going<font color="#E5E5E5"> to</font><font color="#CCCCCC"> be different</font><font color="#E5E5E5"> and the code</font>

196
00:08:55,180 --> 00:08:58,900
execution is<font color="#CCCCCC"> going to be</font><font color="#E5E5E5"> different and</font>

197
00:08:56,410 --> 00:09:01,780
<font color="#E5E5E5">it's you can do some interesting stuff</font>

198
00:08:58,900 --> 00:09:04,600
<font color="#CCCCCC">with that as an attacker client-side</font>

199
00:09:01,780 --> 00:09:06,579
<font color="#E5E5E5">trust issues again nothing</font><font color="#CCCCCC"> new</font><font color="#E5E5E5"> here but</font>

200
00:09:04,600 --> 00:09:09,100
because<font color="#CCCCCC"> we have so much logic on</font><font color="#E5E5E5"> the</font>

201
00:09:06,580 --> 00:09:13,960
<font color="#E5E5E5">client side</font><font color="#CCCCCC"> that's coming up more and</font>

202
00:09:09,100 --> 00:09:16,240
<font color="#E5E5E5">more often</font><font color="#CCCCCC"> and it also kind of leads to</font>

203
00:09:13,960 --> 00:09:16,670
<font color="#E5E5E5">information leakage so for example if</font>

204
00:09:16,240 --> 00:09:18,770
<font color="#CCCCCC">we'll</font>

205
00:09:16,670 --> 00:09:21,740
at<font color="#CCCCCC"> meteora</font><font color="#E5E5E5"> another JavaScript like full</font>

206
00:09:18,770 --> 00:09:24,949
<font color="#CCCCCC">stack framework by default when you</font>

207
00:09:21,740 --> 00:09:28,160
<font color="#CCCCCC">started me to your app it uses the</font><font color="#E5E5E5"> the</font>

208
00:09:24,950 --> 00:09:30,020
<font color="#CCCCCC">pub/sub methodology to query</font><font color="#E5E5E5"> data</font>

209
00:09:28,160 --> 00:09:32,150
<font color="#CCCCCC">together date to the</font><font color="#E5E5E5"> client side by</font>

210
00:09:30,020 --> 00:09:33,470
default<font color="#E5E5E5"> it's just</font><font color="#CCCCCC"> gonna return</font><font color="#E5E5E5"> all the</font>

211
00:09:32,150 --> 00:09:34,939
data from<font color="#CCCCCC"> your database right if you</font>

212
00:09:33,470 --> 00:09:37,100
<font color="#E5E5E5">don't do you know authorizations and</font>

213
00:09:34,940 --> 00:09:41,600
checks so you may be<font color="#CCCCCC"> leaking a lot of</font>

214
00:09:37,100 --> 00:09:43,460
<font color="#E5E5E5">information on your</font><font color="#CCCCCC"> webpage</font><font color="#E5E5E5"> and CSRF you</font>

215
00:09:41,600 --> 00:09:46,160
know<font color="#E5E5E5"> partially because it's there the</font>

216
00:09:43,460 --> 00:09:48,500
<font color="#E5E5E5">client-side part of the CSRF when you</font>

217
00:09:46,160 --> 00:09:51,829
have to<font color="#E5E5E5"> submit the token by a cookie or</font>

218
00:09:48,500 --> 00:09:54,260
by the header<font color="#CCCCCC"> a lot</font><font color="#E5E5E5"> of well some</font>

219
00:09:51,830 --> 00:09:55,940
frameworks will kind of do this job for

220
00:09:54,260 --> 00:09:57,680
you like angular<font color="#E5E5E5"> for example we'll grab</font>

221
00:09:55,940 --> 00:10:00,470
the header from<font color="#E5E5E5"> the cookie and put it in</font>

222
00:09:57,680 --> 00:10:02,060
the the token from<font color="#E5E5E5"> the cookie and put it</font>

223
00:10:00,470 --> 00:10:03,350
in the header<font color="#E5E5E5"> and you</font><font color="#CCCCCC"> just need</font><font color="#E5E5E5"> to</font>

224
00:10:02,060 --> 00:10:05,060
validate on the<font color="#E5E5E5"> server side right but</font>

225
00:10:03,350 --> 00:10:06,830
<font color="#E5E5E5">other frameworks don't provide that</font><font color="#CCCCCC"> so</font>

226
00:10:05,060 --> 00:10:09,859
you have<font color="#CCCCCC"> to</font><font color="#E5E5E5"> write that manually so</font>

227
00:10:06,830 --> 00:10:11,570
that's you<font color="#CCCCCC"> know still an issue but then</font>

228
00:10:09,860 --> 00:10:13,790
as<font color="#CCCCCC"> i said</font><font color="#E5E5E5"> we can run</font><font color="#CCCCCC"> JavaScript on the</font>

229
00:10:11,570 --> 00:10:15,740
server side<font color="#E5E5E5"> so what about the</font>

230
00:10:13,790 --> 00:10:19,459
server-side<font color="#CCCCCC"> vulnerabilities</font><font color="#E5E5E5"> are they</font>

231
00:10:15,740 --> 00:10:23,540
<font color="#E5E5E5">JavaScript specific same thing as we</font>

232
00:10:19,460 --> 00:10:26,150
find in you know Java PHP<font color="#E5E5E5"> or whatnot so</font>

233
00:10:23,540 --> 00:10:28,189
the same injection<font color="#CCCCCC"> issues</font><font color="#E5E5E5"> same against a</font>

234
00:10:26,150 --> 00:10:30,170
seraph the<font color="#E5E5E5"> server-side part of the</font>

235
00:10:28,190 --> 00:10:32,020
cross-site request forgery<font color="#CCCCCC"> code</font>

236
00:10:30,170 --> 00:10:34,729
execution authentication authorization

237
00:10:32,020 --> 00:10:37,910
<font color="#E5E5E5">kind of the newer thing is this</font>

238
00:10:34,730 --> 00:10:39,890
realization<font color="#E5E5E5"> now it's in the</font><font color="#CCCCCC"> WASC</font><font color="#E5E5E5"> so in</font>

239
00:10:37,910 --> 00:10:42,620
<font color="#E5E5E5">JavaScript we have the magic function</font>

240
00:10:39,890 --> 00:10:45,710
eval which is whenever<font color="#E5E5E5"> you see eval you</font>

241
00:10:42,620 --> 00:10:49,310
should think evil<font color="#E5E5E5"> right because you</font>

242
00:10:45,710 --> 00:10:51,230
<font color="#E5E5E5">don't evaluate untrusted code but I will</font>

243
00:10:49,310 --> 00:10:53,569
show I'll show you example with javis

244
00:10:51,230 --> 00:10:55,580
but like sometimes<font color="#E5E5E5"> there is no other way</font>

245
00:10:53,570 --> 00:10:56,810
<font color="#E5E5E5">around it's</font><font color="#CCCCCC"> really hard to fix it</font>

246
00:10:55,580 --> 00:10:59,720
because<font color="#E5E5E5"> you have to</font><font color="#CCCCCC"> have fix the</font>

247
00:10:56,810 --> 00:11:01,609
architecture<font color="#CCCCCC"> so we're not</font><font color="#E5E5E5"> going</font><font color="#CCCCCC"> to talk</font>

248
00:10:59,720 --> 00:11:02,810
<font color="#E5E5E5">about these issues in this presentation</font>

249
00:11:01,610 --> 00:11:06,020
<font color="#E5E5E5">because</font><font color="#CCCCCC"> we're talking about them</font>

250
00:11:02,810 --> 00:11:09,709
client-side JavaScript<font color="#E5E5E5"> right so if we</font>

251
00:11:06,020 --> 00:11:12,560
look<font color="#CCCCCC"> at a wasp</font><font color="#E5E5E5"> and a lion a wasp</font><font color="#CCCCCC"> with</font>

252
00:11:09,710 --> 00:11:15,620
the<font color="#E5E5E5"> JavaScript how does it relate</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> the</font>

253
00:11:12,560 --> 00:11:19,640
<font color="#CCCCCC">client-side JavaScript applications so</font>

254
00:11:15,620 --> 00:11:22,520
injections<font color="#CCCCCC"> as I said expression</font>

255
00:11:19,640 --> 00:11:24,230
injection<font color="#E5E5E5"> so that's a new type well sort</font>

256
00:11:22,520 --> 00:11:25,400
of new type right so yes we cannot do a

257
00:11:24,230 --> 00:11:27,590
sickle injection<font color="#E5E5E5"> a command injection</font>

258
00:11:25,400 --> 00:11:28,620
LDAP injection but we can do an

259
00:11:27,590 --> 00:11:31,470
expression injection

260
00:11:28,620 --> 00:11:33,810
so that's something to<font color="#CCCCCC"> look after broken</font>

261
00:11:31,470 --> 00:11:35,940
authentication<font color="#E5E5E5"> the same as you know the</font>

262
00:11:33,810 --> 00:11:37,459
authorization<font color="#E5E5E5"> well if you do</font><font color="#CCCCCC"> assent</font>

263
00:11:35,940 --> 00:11:40,200
occasionally ization<font color="#CCCCCC"> on the client side</font>

264
00:11:37,460 --> 00:11:42,080
<font color="#E5E5E5">guess what right</font><font color="#CCCCCC"> can be bypassed so</font>

265
00:11:40,200 --> 00:11:44,850
that's definitely<font color="#E5E5E5"> something to look at</font>

266
00:11:42,080 --> 00:11:47,180
since<font color="#E5E5E5"> that exposure we talked about that</font>

267
00:11:44,850 --> 00:11:50,490
you know sending all<font color="#CCCCCC"> your database</font>

268
00:11:47,180 --> 00:11:55,349
fields or I guess attributes if you're

269
00:11:50,490 --> 00:11:57,860
using the<font color="#CCCCCC"> no cycle D beam not</font><font color="#E5E5E5"> filtering</font>

270
00:11:55,350 --> 00:12:01,710
them to only<font color="#E5E5E5"> what the user should see</font>

271
00:11:57,860 --> 00:12:03,930
<font color="#E5E5E5">XML it's mmm XML external entity is not</font>

272
00:12:01,710 --> 00:12:06,360
really<font color="#E5E5E5"> in client-side code right because</font>

273
00:12:03,930 --> 00:12:07,979
we<font color="#E5E5E5"> usually don't well one in JavaScript</font>

274
00:12:06,360 --> 00:12:09,960
locations we usually don't<font color="#E5E5E5"> parse XML</font>

275
00:12:07,980 --> 00:12:12,600
it's usually JSON but<font color="#CCCCCC"> two is because</font>

276
00:12:09,960 --> 00:12:15,300
<font color="#CCCCCC">it's a client-side</font><font color="#E5E5E5"> we kind of don't care</font>

277
00:12:12,600 --> 00:12:17,550
<font color="#E5E5E5">because there is nothing we can pull</font>

278
00:12:15,300 --> 00:12:19,620
<font color="#CCCCCC">yeah you know</font><font color="#E5E5E5"> on the client client side</font>

279
00:12:17,550 --> 00:12:21,780
like<font color="#CCCCCC"> there no external there no</font><font color="#E5E5E5"> entity</font>

280
00:12:19,620 --> 00:12:25,380
is from the server<font color="#E5E5E5"> that</font><font color="#CCCCCC"> we can pull in</font>

281
00:12:21,780 --> 00:12:27,030
the con<font color="#E5E5E5"> the client side</font><font color="#CCCCCC"> broken access</font>

282
00:12:25,380 --> 00:12:28,770
control<font color="#E5E5E5"> I mentioned again if you trust</font>

283
00:12:27,030 --> 00:12:31,170
the client<font color="#CCCCCC"> and you authorization is on</font>

284
00:12:28,770 --> 00:12:33,270
the<font color="#E5E5E5"> client side can be</font><font color="#CCCCCC"> bypassed security</font>

285
00:12:31,170 --> 00:12:35,370
<font color="#CCCCCC">miss configuration this is big because</font>

286
00:12:33,270 --> 00:12:37,730
<font color="#E5E5E5">we talk</font><font color="#CCCCCC"> about the frameworks so</font>

287
00:12:35,370 --> 00:12:41,370
<font color="#E5E5E5">especially if they come with some</font>

288
00:12:37,730 --> 00:12:44,220
signatures<font color="#E5E5E5"> and you miss configure them</font>

289
00:12:41,370 --> 00:12:46,200
or like either they come with non secure

290
00:12:44,220 --> 00:12:48,300
defaults and you don't change the

291
00:12:46,200 --> 00:12:50,700
defaults or<font color="#E5E5E5"> they do come</font><font color="#CCCCCC"> with secure</font>

292
00:12:48,300 --> 00:12:52,620
default<font color="#E5E5E5"> and then you change them to</font>

293
00:12:50,700 --> 00:12:56,280
something<font color="#CCCCCC"> unsecure so that configuration</font>

294
00:12:52,620 --> 00:12:58,200
<font color="#E5E5E5">becomes a bigger part</font><font color="#CCCCCC"> in security</font>

295
00:12:56,280 --> 00:13:01,410
civilization<font color="#CCCCCC"> out cross-site scripting of</font>

296
00:12:58,200 --> 00:13:05,040
course the<font color="#E5E5E5"> civilization more often</font>

297
00:13:01,410 --> 00:13:07,260
happens on the server side because<font color="#E5E5E5"> on</font>

298
00:13:05,040 --> 00:13:09,839
the client side<font color="#E5E5E5"> if your</font><font color="#CCCCCC"> sensor relies</font>

299
00:13:07,260 --> 00:13:12,060
data usually<font color="#CCCCCC"> the browser can process it</font>

300
00:13:09,840 --> 00:13:13,620
in most of the use cases<font color="#CCCCCC"> you don't</font><font color="#E5E5E5"> need</font>

301
00:13:12,060 --> 00:13:17,010
to worry<font color="#CCCCCC"> about the D serialization on</font>

302
00:13:13,620 --> 00:13:19,170
the client side<font color="#CCCCCC"> but if</font><font color="#E5E5E5"> you do then you</font>

303
00:13:17,010 --> 00:13:22,950
know with the eval<font color="#CCCCCC"> function you you can</font>

304
00:13:19,170 --> 00:13:23,969
get<font color="#E5E5E5"> yourself into trouble and you know</font>

305
00:13:22,950 --> 00:13:25,710
<font color="#E5E5E5">using components with known</font>

306
00:13:23,970 --> 00:13:28,260
vulnerabilities<font color="#E5E5E5"> I mentioned the</font>

307
00:13:25,710 --> 00:13:30,020
vulnerable<font color="#CCCCCC"> third-party</font><font color="#E5E5E5"> plugins that you</font>

308
00:13:28,260 --> 00:13:32,130
<font color="#CCCCCC">need to be very aware of and</font>

309
00:13:30,020 --> 00:13:34,079
<font color="#CCCCCC">insufficient locking and monitoring</font><font color="#E5E5E5"> I</font>

310
00:13:32,130 --> 00:13:39,050
mean usually don't<font color="#E5E5E5"> do logging on the</font>

311
00:13:34,080 --> 00:13:39,050
<font color="#E5E5E5">client-side but if you are using</font>

312
00:13:39,870 --> 00:13:45,930
some sort of<font color="#E5E5E5"> like</font><font color="#CCCCCC"> Google</font><font color="#E5E5E5"> API collecting</font>

313
00:13:42,930 --> 00:13:47,520
statistics<font color="#E5E5E5"> etc so you may kind of cover</font>

314
00:13:45,930 --> 00:13:50,540
yourself on<font color="#E5E5E5"> this end with those</font>

315
00:13:47,520 --> 00:13:54,150
<font color="#E5E5E5">third-party statistics aggregation</font>

316
00:13:50,540 --> 00:13:56,550
services so what about the frameworks

317
00:13:54,150 --> 00:13:59,730
<font color="#E5E5E5">what do they give us what do they bring</font>

318
00:13:56,550 --> 00:14:01,709
to<font color="#CCCCCC"> the table they do have</font><font color="#E5E5E5"> you know as I</font>

319
00:13:59,730 --> 00:14:04,320
said<font color="#E5E5E5"> some security features so for</font>

320
00:14:01,710 --> 00:14:07,260
example contextual encoding and template

321
00:14:04,320 --> 00:14:11,280
engines<font color="#CCCCCC"> mmo's</font><font color="#E5E5E5"> JavaScript frameworks</font>

322
00:14:07,260 --> 00:14:14,520
<font color="#CCCCCC">angular react view they do</font><font color="#E5E5E5"> automatic</font>

323
00:14:11,280 --> 00:14:17,430
contextual<font color="#E5E5E5"> way</font><font color="#CCCCCC"> based and coding right so</font>

324
00:14:14,520 --> 00:14:19,949
if you are<font color="#CCCCCC"> injecting into</font><font color="#E5E5E5"> an</font><font color="#CCCCCC"> HTML tag</font>

325
00:14:17,430 --> 00:14:21,810
they will<font color="#E5E5E5"> be HTML escaping for you if</font>

326
00:14:19,950 --> 00:14:24,000
you inject<font color="#E5E5E5"> into an</font><font color="#CCCCCC"> attribute they will</font>

327
00:14:21,810 --> 00:14:26,640
do attribute escaping for<font color="#E5E5E5"> you pretty</font>

328
00:14:24,000 --> 00:14:28,020
good<font color="#CCCCCC"> sort of protection</font><font color="#E5E5E5"> as I mentioned</font>

329
00:14:26,640 --> 00:14:31,050
<font color="#E5E5E5">for example angular</font><font color="#CCCCCC"> has this feature</font>

330
00:14:28,020 --> 00:14:33,300
react doesn't type<font color="#CCCCCC"> checking</font><font color="#E5E5E5"> again if</font>

331
00:14:31,050 --> 00:14:35,250
you're<font color="#E5E5E5"> using angular whatever the latest</font>

332
00:14:33,300 --> 00:14:37,530
version<font color="#E5E5E5"> five six right they're using</font>

333
00:14:35,250 --> 00:14:41,600
<font color="#E5E5E5">you're using typescript</font><font color="#CCCCCC"> they're strictly</font>

334
00:14:37,530 --> 00:14:45,449
typed<font color="#CCCCCC"> JavaScript</font><font color="#E5E5E5"> which is pretty good</font>

335
00:14:41,600 --> 00:14:47,210
sandboxing so again some frameworks<font color="#E5E5E5"> are</font>

336
00:14:45,450 --> 00:14:50,940
again<font color="#E5E5E5"> angular for example had that</font>

337
00:14:47,210 --> 00:14:54,390
concept<font color="#CCCCCC"> of sandbox</font><font color="#E5E5E5"> of whatever user</font>

338
00:14:50,940 --> 00:14:57,840
script user functions are executed in

339
00:14:54,390 --> 00:14:59,520
the sandbox<font color="#CCCCCC"> that prevents you running</font>

340
00:14:57,840 --> 00:15:01,440
vanilla JavaScript and you<font color="#CCCCCC"> know popping</font>

341
00:14:59,520 --> 00:15:04,470
an alert<font color="#E5E5E5"> or like calling to external</font>

342
00:15:01,440 --> 00:15:06,210
services<font color="#CCCCCC"> and they always</font><font color="#E5E5E5"> said this is</font>

343
00:15:04,470 --> 00:15:08,430
not a security<font color="#E5E5E5"> feature and with every</font>

344
00:15:06,210 --> 00:15:11,220
release that<font color="#E5E5E5"> was angularjs right</font>

345
00:15:08,430 --> 00:15:13,079
the first version<font color="#E5E5E5"> you were able will and</font>

346
00:15:11,220 --> 00:15:15,900
<font color="#E5E5E5">if attackers were able to break out of</font>

347
00:15:13,080 --> 00:15:17,250
<font color="#E5E5E5">the sandbox</font><font color="#CCCCCC"> we're finally at version</font>

348
00:15:15,900 --> 00:15:20,189
like<font color="#E5E5E5"> one point six they said</font><font color="#CCCCCC"> alright</font>

349
00:15:17,250 --> 00:15:21,870
<font color="#E5E5E5">screw it we're not you're gonna have the</font>

350
00:15:20,190 --> 00:15:24,810
sandbox<font color="#E5E5E5"> anymore and the later versions</font>

351
00:15:21,870 --> 00:15:27,180
<font color="#E5E5E5">of angular don't have it so and</font>

352
00:15:24,810 --> 00:15:29,699
<font color="#E5E5E5">sometimes</font><font color="#CCCCCC"> this frameworks can</font><font color="#E5E5E5"> provides</font>

353
00:15:27,180 --> 00:15:32,219
you a way<font color="#CCCCCC"> to whitelist your resources</font>

354
00:15:29,700 --> 00:15:34,440
<font color="#CCCCCC">begin to prevent you</font><font color="#E5E5E5"> know attacker</font>

355
00:15:32,220 --> 00:15:36,990
loading something<font color="#E5E5E5"> from a malicious</font>

356
00:15:34,440 --> 00:15:39,780
<font color="#E5E5E5">website into</font><font color="#CCCCCC"> your clients or an</font><font color="#E5E5E5"> ajax</font>

357
00:15:36,990 --> 00:15:41,100
call and then the insecurities you know

358
00:15:39,780 --> 00:15:45,120
we mentioned<font color="#CCCCCC"> the expression injection</font>

359
00:15:41,100 --> 00:15:47,370
<font color="#CCCCCC">the</font><font color="#E5E5E5"> sandbox bypasses frameworks will</font>

360
00:15:45,120 --> 00:15:50,370
have insecure api's and we'll see some

361
00:15:47,370 --> 00:15:52,710
<font color="#CCCCCC">examples that are you know meant to be</font>

362
00:15:50,370 --> 00:15:53,089
<font color="#E5E5E5">used very carefully</font><font color="#CCCCCC"> but you know if</font>

363
00:15:52,710 --> 00:15:55,429
<font color="#CCCCCC">you're</font>

364
00:15:53,089 --> 00:15:58,009
careful then you may open yourself<font color="#CCCCCC"> to a</font>

365
00:15:55,429 --> 00:15:59,929
cross-site scripting and<font color="#E5E5E5"> content</font>

366
00:15:58,009 --> 00:16:02,659
<font color="#E5E5E5">security policy bypasses there were</font>

367
00:15:59,929 --> 00:16:05,269
cases<font color="#CCCCCC"> where you know the application</font>

368
00:16:02,659 --> 00:16:07,968
itself may not<font color="#E5E5E5"> have a problem with</font>

369
00:16:05,269 --> 00:16:09,289
content security policy<font color="#E5E5E5"> but because</font><font color="#CCCCCC"> of</font>

370
00:16:07,969 --> 00:16:11,539
the framework that<font color="#CCCCCC"> you're using in the</font>

371
00:16:09,289 --> 00:16:16,789
vulnerability in the framework angular

372
00:16:11,539 --> 00:16:20,119
had that<font color="#E5E5E5"> mojo</font><font color="#CCCCCC"> I think had that and there</font>

373
00:16:16,789 --> 00:16:21,739
was another one it was escaping me but

374
00:16:20,119 --> 00:16:23,239
<font color="#E5E5E5">it's</font><font color="#CCCCCC"> JavaScript framework that had a</font>

375
00:16:21,739 --> 00:16:25,579
content security<font color="#CCCCCC"> bypass basically</font>

376
00:16:23,239 --> 00:16:28,789
<font color="#CCCCCC">continued content security policy bypass</font>

377
00:16:25,579 --> 00:16:30,348
basically what happened was<font color="#CCCCCC"> that you had</font>

378
00:16:28,789 --> 00:16:36,679
a<font color="#CCCCCC"> content</font><font color="#E5E5E5"> security policy who's familiar</font>

379
00:16:30,349 --> 00:16:40,489
with huge balls here<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> it's a</font>

380
00:16:36,679 --> 00:16:42,379
technology<font color="#E5E5E5"> that</font><font color="#CCCCCC"> allows you to tell</font><font color="#E5E5E5"> the</font>

381
00:16:40,489 --> 00:16:44,659
browser<font color="#E5E5E5"> that you're only allowed to</font>

382
00:16:42,379 --> 00:16:48,309
<font color="#CCCCCC">loading</font><font color="#E5E5E5"> while the page</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> only allowed</font>

383
00:16:44,659 --> 00:16:52,159
to<font color="#CCCCCC"> loading resources from specific</font>

384
00:16:48,309 --> 00:16:54,889
origins<font color="#E5E5E5"> right so you say I only trust</font>

385
00:16:52,159 --> 00:16:57,499
scripts<font color="#CCCCCC"> that are loaded</font><font color="#E5E5E5"> from my you know</font>

386
00:16:54,889 --> 00:16:59,239
scripts dot example.com<font color="#E5E5E5"> and I</font><font color="#CCCCCC"> don't</font>

387
00:16:57,499 --> 00:17:02,169
<font color="#E5E5E5">allow loading scripts from somewhere</font>

388
00:16:59,239 --> 00:17:06,079
<font color="#E5E5E5">else</font><font color="#CCCCCC"> and the browser is the one who</font>

389
00:17:02,169 --> 00:17:08,628
enforces this policy for<font color="#E5E5E5"> every user so</font>

390
00:17:06,079 --> 00:17:10,938
with the framework<font color="#E5E5E5"> and usually the other</font>

391
00:17:08,628 --> 00:17:14,928
feature<font color="#CCCCCC"> that it will give you is that</font><font color="#E5E5E5"> it</font>

392
00:17:10,939 --> 00:17:16,939
will<font color="#E5E5E5"> not allow running any inline</font>

393
00:17:14,929 --> 00:17:19,009
JavaScript<font color="#E5E5E5"> and that's how most of the</font>

394
00:17:16,939 --> 00:17:21,049
injections happen right<font color="#CCCCCC"> so with</font><font color="#E5E5E5"> the</font>

395
00:17:19,009 --> 00:17:23,299
content security policy<font color="#E5E5E5"> you say okay no</font>

396
00:17:21,049 --> 00:17:25,999
inline JavaScript but because of<font color="#E5E5E5"> the</font>

397
00:17:23,299 --> 00:17:28,879
quirks of the framework<font color="#E5E5E5"> you</font><font color="#CCCCCC"> can for</font>

398
00:17:25,999 --> 00:17:31,129
example<font color="#E5E5E5"> inject the code for like in this</font>

399
00:17:28,879 --> 00:17:33,439
framework<font color="#CCCCCC"> like some angular</font>

400
00:17:31,129 --> 00:17:36,320
attribute and<font color="#E5E5E5"> angular directives right</font>

401
00:17:33,440 --> 00:17:39,529
<font color="#E5E5E5">Oh some other framework directives</font><font color="#CCCCCC"> that</font>

402
00:17:36,320 --> 00:17:41,149
<font color="#CCCCCC">will not be</font><font color="#E5E5E5"> technically JavaScript so</font>

403
00:17:39,529 --> 00:17:43,129
the browser is<font color="#CCCCCC"> not gonna block them with</font>

404
00:17:41,149 --> 00:17:45,229
<font color="#CCCCCC">the policy but then the framework</font><font color="#E5E5E5"> will</font>

405
00:17:43,129 --> 00:17:47,090
execute those<font color="#E5E5E5"> directives and they will</font>

406
00:17:45,230 --> 00:17:50,389
be turned into<font color="#E5E5E5"> something malicious</font><font color="#CCCCCC"> so</font>

407
00:17:47,090 --> 00:17:52,939
there were some cases<font color="#E5E5E5"> with that all</font>

408
00:17:50,389 --> 00:17:55,158
right<font color="#CCCCCC"> so</font><font color="#E5E5E5"> today</font><font color="#CCCCCC"> we're going to talk</font><font color="#E5E5E5"> about</font>

409
00:17:52,940 --> 00:17:57,799
react specifically<font color="#CCCCCC"> in kind</font><font color="#E5E5E5"> of look at</font>

410
00:17:55,159 --> 00:17:59,840
<font color="#E5E5E5">some of the examples of react</font><font color="#CCCCCC"> why are we</font>

411
00:17:57,799 --> 00:18:03,350
<font color="#E5E5E5">talking about react right well that's</font>

412
00:17:59,840 --> 00:18:05,178
kind<font color="#E5E5E5"> of the new hottest thing on</font><font color="#CCCCCC"> the</font>

413
00:18:03,350 --> 00:18:07,090
<font color="#E5E5E5">block if we look at the statistics</font><font color="#CCCCCC"> here</font>

414
00:18:05,179 --> 00:18:10,670
from<font color="#CCCCCC"> NPM</font>

415
00:18:07,090 --> 00:18:12,800
angular react versus view I mean react

416
00:18:10,670 --> 00:18:15,380
<font color="#CCCCCC">downloads</font><font color="#E5E5E5"> are up</font><font color="#CCCCCC"> there view is actually</font>

417
00:18:12,800 --> 00:18:18,260
<font color="#CCCCCC">catching up</font><font color="#E5E5E5"> so we'll see what's gonna</font>

418
00:18:15,380 --> 00:18:21,070
<font color="#E5E5E5">happen like six months maybe you will be</font>

419
00:18:18,260 --> 00:18:24,800
<font color="#E5E5E5">the newest biggest</font><font color="#CCCCCC"> hottest thing</font>

420
00:18:21,070 --> 00:18:29,720
how did react<font color="#E5E5E5"> come along so it was</font>

421
00:18:24,800 --> 00:18:30,379
introduced<font color="#E5E5E5"> in 2013 and in 2013 five</font>

422
00:18:29,720 --> 00:18:32,840
years ago

423
00:18:30,380 --> 00:18:39,080
angularjs<font color="#E5E5E5"> was you know the biggest</font>

424
00:18:32,840 --> 00:18:41,449
framework and what happened was that at

425
00:18:39,080 --> 00:18:43,699
<font color="#CCCCCC">that time so that</font><font color="#E5E5E5"> was still angular 1</font>

426
00:18:41,450 --> 00:18:45,710
<font color="#E5E5E5">right angle GS at that time the angular</font>

427
00:18:43,700 --> 00:18:48,020
team was saying<font color="#CCCCCC"> ok we're</font><font color="#E5E5E5"> gonna release</font>

428
00:18:45,710 --> 00:18:49,850
<font color="#E5E5E5">angular 2 and it's gonna be a breaking</font>

429
00:18:48,020 --> 00:18:51,800
<font color="#CCCCCC">change</font><font color="#E5E5E5"> and it's gonna be this you know</font>

430
00:18:49,850 --> 00:18:55,040
amazing framework<font color="#E5E5E5"> all</font><font color="#CCCCCC"> these great</font>

431
00:18:51,800 --> 00:18:56,510
features<font color="#CCCCCC"> but the breaking change part</font>

432
00:18:55,040 --> 00:18:59,870
<font color="#E5E5E5">right like developers don't like</font>

433
00:18:56,510 --> 00:19:02,000
breaking changes<font color="#CCCCCC"> what I want to rewrite</font>

434
00:18:59,870 --> 00:19:03,830
the application from<font color="#CCCCCC"> scratch and what it</font>

435
00:19:02,000 --> 00:19:05,390
<font color="#E5E5E5">wasn't it was basically a completely</font>

436
00:19:03,830 --> 00:19:07,610
different framework<font color="#CCCCCC"> so one thing they</font>

437
00:19:05,390 --> 00:19:09,950
said<font color="#CCCCCC"> ok we got you know they're gonna be</font>

438
00:19:07,610 --> 00:19:11,809
<font color="#E5E5E5">this new framework that's you have to</font>

439
00:19:09,950 --> 00:19:13,970
write the applications but then they

440
00:19:11,809 --> 00:19:18,620
waited<font color="#E5E5E5"> they announced it in</font><font color="#CCCCCC"> September of</font>

441
00:19:13,970 --> 00:19:20,390
2014 and they released angular 2 in 2016

442
00:19:18,620 --> 00:19:22,580
almost<font color="#CCCCCC"> 2 years later after</font><font color="#E5E5E5"> they</font>

443
00:19:20,390 --> 00:19:24,950
announced it<font color="#E5E5E5"> so for</font><font color="#CCCCCC"> 2</font><font color="#E5E5E5"> years</font>

444
00:19:22,580 --> 00:19:26,870
<font color="#E5E5E5">developers were in this limbo</font><font color="#CCCCCC"> right I'm</font>

445
00:19:24,950 --> 00:19:28,370
still writing<font color="#CCCCCC"> angular code or I'm</font>

446
00:19:26,870 --> 00:19:30,080
starting a<font color="#CCCCCC"> new application should</font><font color="#E5E5E5"> I</font>

447
00:19:28,370 --> 00:19:31,969
write it<font color="#CCCCCC"> in angular so</font><font color="#E5E5E5"> you know choose</font>

448
00:19:30,080 --> 00:19:33,649
<font color="#E5E5E5">not available yet</font><font color="#CCCCCC"> I'm gonna start an</font>

449
00:19:31,970 --> 00:19:35,090
angular<font color="#CCCCCC"> one</font><font color="#E5E5E5"> but then they're gonna</font>

450
00:19:33,650 --> 00:19:37,130
finally<font color="#E5E5E5"> release it and I'll have to</font>

451
00:19:35,090 --> 00:19:40,760
<font color="#E5E5E5">rewrite</font><font color="#CCCCCC"> it like</font><font color="#E5E5E5"> I wanna be in the</font>

452
00:19:37,130 --> 00:19:44,150
<font color="#E5E5E5">situation</font><font color="#CCCCCC"> so react came alone with these</font>

453
00:19:40,760 --> 00:19:46,550
new features<font color="#CCCCCC"> the JSX the templating</font>

454
00:19:44,150 --> 00:19:48,890
<font color="#E5E5E5">engine was the templates were much</font>

455
00:19:46,550 --> 00:19:52,760
<font color="#CCCCCC">easier to make to write them in angular</font>

456
00:19:48,890 --> 00:19:55,309
<font color="#E5E5E5">the virtual Dom talked about a</font><font color="#CCCCCC"> little</font>

457
00:19:52,760 --> 00:19:57,830
bit<font color="#CCCCCC"> later</font><font color="#E5E5E5"> but one of the biggest thing</font>

458
00:19:55,309 --> 00:20:00,350
was<font color="#E5E5E5"> the</font><font color="#CCCCCC"> one-way</font><font color="#E5E5E5"> binding so in angular</font>

459
00:19:57,830 --> 00:20:02,449
there's<font color="#E5E5E5"> two-way binding you change the</font>

460
00:20:00,350 --> 00:20:05,149
model the view changes automatically

461
00:20:02,450 --> 00:20:06,920
<font color="#CCCCCC">that's</font><font color="#E5E5E5"> pretty standard</font><font color="#CCCCCC"> but it was two</font>

462
00:20:05,150 --> 00:20:08,720
<font color="#E5E5E5">ways</font><font color="#CCCCCC"> so you change the view so you</font>

463
00:20:06,920 --> 00:20:12,350
change something on<font color="#E5E5E5"> the HTML and on the</font>

464
00:20:08,720 --> 00:20:14,990
page and<font color="#E5E5E5"> the front end and the model</font>

465
00:20:12,350 --> 00:20:17,659
changes automatically<font color="#E5E5E5"> sounds great but</font>

466
00:20:14,990 --> 00:20:19,140
it's really hard to maintain<font color="#E5E5E5"> for big</font>

467
00:20:17,660 --> 00:20:23,010
applications for big

468
00:20:19,140 --> 00:20:25,710
<font color="#CCCCCC">cages</font><font color="#E5E5E5"> so react says no we're not gonna</font>

469
00:20:23,010 --> 00:20:27,660
do this it's gonna be<font color="#CCCCCC"> one-way model to</font>

470
00:20:25,710 --> 00:20:29,760
view and that's<font color="#E5E5E5"> it and if you have to</font>

471
00:20:27,660 --> 00:20:31,320
change<font color="#E5E5E5"> the other</font><font color="#CCCCCC"> way around</font><font color="#E5E5E5"> to change</font>

472
00:20:29,760 --> 00:20:33,480
the<font color="#CCCCCC"> view you have to send the</font><font color="#E5E5E5"> request to</font>

473
00:20:31,320 --> 00:20:35,610
<font color="#CCCCCC">the</font><font color="#E5E5E5"> server change the model update the</font>

474
00:20:33,480 --> 00:20:39,240
model update to you and it's only one

475
00:20:35,610 --> 00:20:41,490
way<font color="#E5E5E5"> change so and I was backed by</font>

476
00:20:39,240 --> 00:20:44,670
<font color="#E5E5E5">Facebook you know Google versus Facebook</font>

477
00:20:41,490 --> 00:20:46,530
<font color="#E5E5E5">so it's pretty it was</font><font color="#CCCCCC"> pretty well</font>

478
00:20:44,670 --> 00:20:51,090
supported so a lot of people change

479
00:20:46,530 --> 00:20:52,950
switch to react in<font color="#CCCCCC"> that time</font><font color="#E5E5E5"> I'm talking</font>

480
00:20:51,090 --> 00:20:54,600
about<font color="#CCCCCC"> JavaScript frameworks</font><font color="#E5E5E5"> and then I'm</font>

481
00:20:52,950 --> 00:20:56,490
<font color="#E5E5E5">talking about react which is technically</font>

482
00:20:54,600 --> 00:20:58,889
is<font color="#CCCCCC"> not a framework</font><font color="#E5E5E5"> like</font><font color="#CCCCCC"> if you look at</font>

483
00:20:56,490 --> 00:21:02,310
their documentation<font color="#E5E5E5"> they say react is</font>

484
00:20:58,890 --> 00:21:04,830
actually a UI library and the reason why

485
00:21:02,310 --> 00:21:08,250
they say<font color="#CCCCCC"> that is because</font><font color="#E5E5E5"> again as I said</font>

486
00:21:04,830 --> 00:21:11,699
it's very targeted solution for a very

487
00:21:08,250 --> 00:21:13,350
specific problem<font color="#CCCCCC"> or use case they didn't</font>

488
00:21:11,700 --> 00:21:15,360
want to cover all the other things that

489
00:21:13,350 --> 00:21:17,939
<font color="#E5E5E5">the framework is supposed to cover so</font>

490
00:21:15,360 --> 00:21:20,459
for example they don't have any state

491
00:21:17,940 --> 00:21:22,140
management<font color="#CCCCCC"> any routing as I said any</font>

492
00:21:20,460 --> 00:21:23,670
<font color="#CCCCCC">serious arrest protection they don't</font>

493
00:21:22,140 --> 00:21:26,190
worry<font color="#E5E5E5"> about it like it's that's just the</font>

494
00:21:23,670 --> 00:21:28,440
UI library<font color="#E5E5E5"> but it's used as a framework</font>

495
00:21:26,190 --> 00:21:29,640
like<font color="#CCCCCC"> when when you ask</font><font color="#E5E5E5"> developer what is</font>

496
00:21:28,440 --> 00:21:31,470
the applications written in<font color="#CCCCCC"> they say</font>

497
00:21:29,640 --> 00:21:34,800
it's in<font color="#E5E5E5"> a</font><font color="#CCCCCC"> react</font><font color="#E5E5E5"> right and</font><font color="#CCCCCC"> they treat it</font>

498
00:21:31,470 --> 00:21:37,830
<font color="#E5E5E5">the same way and they also say oh we're</font>

499
00:21:34,800 --> 00:21:40,139
and we're not opinionated right we you

500
00:21:37,830 --> 00:21:41,850
can use whatever out or you want<font color="#E5E5E5"> you can</font>

501
00:21:40,140 --> 00:21:44,040
use<font color="#CCCCCC"> whatever state management</font><font color="#E5E5E5"> you want</font>

502
00:21:41,850 --> 00:21:46,080
but really<font color="#CCCCCC"> everybody</font><font color="#E5E5E5"> is most</font>

503
00:21:44,040 --> 00:21:48,060
<font color="#E5E5E5">applications are you using Redux like</font>

504
00:21:46,080 --> 00:21:49,919
you kind of come<font color="#CCCCCC"> up with</font><font color="#E5E5E5"> the standard</font>

505
00:21:48,060 --> 00:21:52,679
solution standard<font color="#E5E5E5"> locks that</font><font color="#CCCCCC"> everybody</font>

506
00:21:49,920 --> 00:21:54,660
is<font color="#CCCCCC"> using anyway and it's also very</font>

507
00:21:52,680 --> 00:21:56,670
opinionated<font color="#E5E5E5"> about how you write</font><font color="#CCCCCC"> the code</font>

508
00:21:54,660 --> 00:21:58,950
<font color="#CCCCCC">because it's based on</font><font color="#E5E5E5"> the functional</font>

509
00:21:56,670 --> 00:22:00,330
programming<font color="#CCCCCC"> it's not a functional</font>

510
00:21:58,950 --> 00:22:02,850
programming<font color="#CCCCCC"> language because</font><font color="#E5E5E5"> it's still</font>

511
00:22:00,330 --> 00:22:05,370
<font color="#E5E5E5">JavaScript but the ideas are</font><font color="#CCCCCC"> like</font>

512
00:22:02,850 --> 00:22:07,020
<font color="#E5E5E5">everything</font><font color="#CCCCCC"> is a function every component</font>

513
00:22:05,370 --> 00:22:12,360
<font color="#E5E5E5">is a function so it's a slightly</font>

514
00:22:07,020 --> 00:22:14,879
different<font color="#E5E5E5"> way</font><font color="#CCCCCC"> of writing the code and as</font>

515
00:22:12,360 --> 00:22:18,449
a bunch of plugins<font color="#E5E5E5"> and very diverse</font>

516
00:22:14,880 --> 00:22:21,150
<font color="#E5E5E5">ecosystem so this is how a you know</font><font color="#CCCCCC"> a</font>

517
00:22:18,450 --> 00:22:24,540
component in react looks like it's a

518
00:22:21,150 --> 00:22:27,660
function and then inside your return

519
00:22:24,540 --> 00:22:31,920
statement<font color="#E5E5E5"> so this is the</font><font color="#CCCCCC"> JSX right there</font>

520
00:22:27,660 --> 00:22:32,850
<font color="#CCCCCC">their template looking</font><font color="#E5E5E5"> the the template</font>

521
00:22:31,920 --> 00:22:34,590
language<font color="#E5E5E5"> kind of</font>

522
00:22:32,850 --> 00:22:37,280
it's built<font color="#E5E5E5"> into the JavaScript where you</font>

523
00:22:34,590 --> 00:22:39,540
kind of stick some HTML looking things

524
00:22:37,280 --> 00:22:41,220
inside your<font color="#E5E5E5"> JavaScript and say okay this</font>

525
00:22:39,540 --> 00:22:43,020
<font color="#CCCCCC">is</font><font color="#E5E5E5"> component is a button and has an</font>

526
00:22:41,220 --> 00:22:46,860
onclick method and this is the class

527
00:22:43,020 --> 00:22:52,590
name<font color="#E5E5E5"> so think</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> it when we were</font>

528
00:22:46,860 --> 00:22:55,860
writing HTML<font color="#CCCCCC"> in the 90s we had HTML</font>

529
00:22:52,590 --> 00:22:58,199
files<font color="#E5E5E5"> and then we had JavaScript inside</font>

530
00:22:55,860 --> 00:22:59,969
<font color="#E5E5E5">the HTML</font><font color="#CCCCCC"> files</font><font color="#E5E5E5"> and then we're saying oh</font>

531
00:22:58,200 --> 00:23:01,440
this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> not</font><font color="#E5E5E5"> good</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> know content</font>

532
00:22:59,970 --> 00:23:03,510
<font color="#E5E5E5">security policy we have two separate</font>

533
00:23:01,440 --> 00:23:04,950
HTML<font color="#CCCCCC"> should be separate</font><font color="#E5E5E5"> JavaScript</font>

534
00:23:03,510 --> 00:23:07,020
should be separate your angular<font color="#E5E5E5"> and all</font>

535
00:23:04,950 --> 00:23:09,120
this framework<font color="#E5E5E5"> should be separate</font><font color="#CCCCCC"> and</font>

536
00:23:07,020 --> 00:23:11,370
now it<font color="#CCCCCC"> looks like</font><font color="#E5E5E5"> we have HTML inside</font>

537
00:23:09,120 --> 00:23:15,449
<font color="#E5E5E5">the JavaScript</font><font color="#CCCCCC"> it's like it's switched</font>

538
00:23:11,370 --> 00:23:19,860
and we're back that same<font color="#CCCCCC"> two context</font>

539
00:23:15,450 --> 00:23:24,950
world<font color="#E5E5E5"> sort of in the files so let's</font><font color="#CCCCCC"> look</font>

540
00:23:19,860 --> 00:23:28,260
at some<font color="#E5E5E5"> of the vulnerabilities so react</font>

541
00:23:24,950 --> 00:23:31,560
<font color="#CCCCCC">cross-site scripting has output encoding</font>

542
00:23:28,260 --> 00:23:33,930
built into it all great so if you are

543
00:23:31,560 --> 00:23:35,580
trying to output some malicious inputs

544
00:23:33,930 --> 00:23:37,460
on your untrusted data and you put it in

545
00:23:35,580 --> 00:23:40,290
curly<font color="#E5E5E5"> braces automatically escaped</font>

546
00:23:37,460 --> 00:23:44,310
<font color="#E5E5E5">awesome because</font><font color="#CCCCCC"> react doesn't change the</font>

547
00:23:40,290 --> 00:23:46,320
inner HTML property of the element but

548
00:23:44,310 --> 00:23:48,240
if you absolutely<font color="#CCCCCC"> have to unfortunately</font>

549
00:23:46,320 --> 00:23:51,570
<font color="#CCCCCC">it happens very</font><font color="#E5E5E5"> often that you</font><font color="#CCCCCC"> have to</font>

550
00:23:48,240 --> 00:23:53,940
do that<font color="#E5E5E5"> there are functions called</font>

551
00:23:51,570 --> 00:23:55,800
<font color="#CCCCCC">dangerously set</font><font color="#E5E5E5"> in HTML I like how they</font>

552
00:23:53,940 --> 00:23:58,770
call the function in angle<font color="#E5E5E5"> it used to be</font>

553
00:23:55,800 --> 00:24:00,120
<font color="#E5E5E5">trust as HTML kind of I just trust my</font>

554
00:23:58,770 --> 00:24:02,060
framework<font color="#E5E5E5"> right where I sit here like</font>

555
00:24:00,120 --> 00:24:04,919
says you know this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> actually dangerous</font>

556
00:24:02,060 --> 00:24:08,310
<font color="#E5E5E5">I'm gonna speed</font><font color="#CCCCCC"> up because</font><font color="#E5E5E5"> when I look</font>

557
00:24:04,920 --> 00:24:10,770
at the demos then react doesn't have

558
00:24:08,310 --> 00:24:13,649
expression language<font color="#E5E5E5"> so no expression</font>

559
00:24:10,770 --> 00:24:17,070
injection awesome<font color="#E5E5E5"> but we generate</font>

560
00:24:13,650 --> 00:24:19,200
components dynamically so if well we can

561
00:24:17,070 --> 00:24:21,330
like we create<font color="#E5E5E5"> components so if we are</font>

562
00:24:19,200 --> 00:24:23,640
generating<font color="#E5E5E5"> component dynamically we may</font>

563
00:24:21,330 --> 00:24:26,790
have a component injection<font color="#E5E5E5"> so let's look</font>

564
00:24:23,640 --> 00:24:31,460
at that when we<font color="#CCCCCC"> create a component we</font>

565
00:24:26,790 --> 00:24:32,610
are providing<font color="#E5E5E5"> three elements so here is</font>

566
00:24:31,460 --> 00:24:35,220
<font color="#CCCCCC">JSX</font>

567
00:24:32,610 --> 00:24:36,990
on the left and if<font color="#E5E5E5"> we kind of transpile</font>

568
00:24:35,220 --> 00:24:39,690
to<font color="#CCCCCC"> javascript</font><font color="#E5E5E5"> and just change it into</font>

569
00:24:36,990 --> 00:24:41,790
<font color="#E5E5E5">just function call we add</font><font color="#CCCCCC"> create element</font>

570
00:24:39,690 --> 00:24:43,620
we<font color="#E5E5E5"> are sending three parameters we're</font>

571
00:24:41,790 --> 00:24:45,540
sending the type of<font color="#E5E5E5"> the element in this</font>

572
00:24:43,620 --> 00:24:46,649
case<font color="#CCCCCC"> it's a header</font><font color="#E5E5E5"> we're sending the</font>

573
00:24:45,540 --> 00:24:48,629
properties so those

574
00:24:46,650 --> 00:24:50,250
gonna be the attributes<font color="#E5E5E5"> and they were</font>

575
00:24:48,630 --> 00:24:53,700
sending<font color="#E5E5E5"> the children</font><font color="#CCCCCC"> so in this case</font>

576
00:24:50,250 --> 00:24:55,230
let's a text node<font color="#E5E5E5"> no say hello world so</font>

577
00:24:53,700 --> 00:24:58,980
we can inject into<font color="#E5E5E5"> all these three</font>

578
00:24:55,230 --> 00:25:07,440
potentially<font color="#E5E5E5"> all these three elements</font><font color="#CCCCCC"> one</font>

579
00:24:58,980 --> 00:25:10,770
was the injection into<font color="#CCCCCC"> the well first it</font>

580
00:25:07,440 --> 00:25:13,260
<font color="#CCCCCC">was injection</font><font color="#E5E5E5"> into</font><font color="#CCCCCC"> the actual value that</font>

581
00:25:10,770 --> 00:25:17,280
you're outputting<font color="#E5E5E5"> right</font><font color="#CCCCCC"> they're the</font>

582
00:25:13,260 --> 00:25:19,650
children<font color="#E5E5E5"> part so if we look at this code</font>

583
00:25:17,280 --> 00:25:21,270
<font color="#E5E5E5">we're saying okay this is a tacher</font>

584
00:25:19,650 --> 00:25:23,940
<font color="#E5E5E5">payload we're submitting it in curly</font>

585
00:25:21,270 --> 00:25:27,180
braces<font color="#CCCCCC"> it should be fine we just said</font>

586
00:25:23,940 --> 00:25:29,910
here<font color="#CCCCCC"> write</font><font color="#E5E5E5"> that whatever is in the curly</font>

587
00:25:27,180 --> 00:25:33,420
braces is gonna be output encoded well

588
00:25:29,910 --> 00:25:35,010
it will if it is a string but as you

589
00:25:33,420 --> 00:25:37,920
know<font color="#CCCCCC"> Boehner ability was discovered</font><font color="#E5E5E5"> on</font>

590
00:25:35,010 --> 00:25:42,420
<font color="#E5E5E5">the hyper one</font><font color="#CCCCCC"> website</font><font color="#E5E5E5"> which is pretty</font>

591
00:25:37,920 --> 00:25:46,320
pretty cool<font color="#CCCCCC"> if</font><font color="#E5E5E5"> you are</font><font color="#CCCCCC"> submitting not a</font>

592
00:25:42,420 --> 00:25:50,430
string<font color="#E5E5E5"> but an object</font><font color="#CCCCCC"> a react object with</font>

593
00:25:46,320 --> 00:25:51,929
JSON object and to be a react object it

594
00:25:50,430 --> 00:25:55,290
just<font color="#E5E5E5"> has to have an attribute that's</font>

595
00:25:51,930 --> 00:25:58,680
called is react element<font color="#E5E5E5"> it was true and</font>

596
00:25:55,290 --> 00:26:00,389
then you<font color="#CCCCCC"> supply all the properties and</font>

597
00:25:58,680 --> 00:26:03,030
<font color="#CCCCCC">one of the</font><font color="#E5E5E5"> properties will be the</font>

598
00:26:00,390 --> 00:26:06,120
dangerous<font color="#CCCCCC"> or</font><font color="#E5E5E5"> set H dangerously set HTML</font>

599
00:26:03,030 --> 00:26:07,980
with your payload react<font color="#E5E5E5"> or actual</font>

600
00:26:06,120 --> 00:26:12,179
<font color="#CCCCCC">interpreted</font><font color="#E5E5E5"> that you know as the object</font>

601
00:26:07,980 --> 00:26:13,680
<font color="#E5E5E5">and will not do any escaping and there</font>

602
00:26:12,180 --> 00:26:17,280
is your<font color="#E5E5E5"> owner ability there's a process</font>

603
00:26:13,680 --> 00:26:21,750
scripting so this was fixed<font color="#E5E5E5"> pretty</font>

604
00:26:17,280 --> 00:26:23,399
quickly<font color="#CCCCCC"> so not possible anymore</font><font color="#E5E5E5"> good but</font>

605
00:26:21,750 --> 00:26:26,700
there is still<font color="#E5E5E5"> two other avenues right</font>

606
00:26:23,400 --> 00:26:29,550
<font color="#E5E5E5">so there is the title</font><font color="#CCCCCC"> yeah the the</font><font color="#E5E5E5"> type</font>

607
00:26:26,700 --> 00:26:31,650
which are the type of the attribute of

608
00:26:29,550 --> 00:26:35,159
the element that<font color="#E5E5E5"> you're creating so if</font>

609
00:26:31,650 --> 00:26:38,820
we can inject into h1<font color="#E5E5E5"> all right well we</font>

610
00:26:35,160 --> 00:26:41,160
<font color="#CCCCCC">can create a development a span element</font>

611
00:26:38,820 --> 00:26:43,590
<font color="#E5E5E5">some other element but we cannot inject</font>

612
00:26:41,160 --> 00:26:47,910
any attributes here Kenny are we

613
00:26:43,590 --> 00:26:49,730
executing in JavaScript not really<font color="#CCCCCC"> I</font>

614
00:26:47,910 --> 00:26:53,220
mean<font color="#E5E5E5"> you're just</font><font color="#CCCCCC"> okay you create an</font>

615
00:26:49,730 --> 00:26:55,830
<font color="#CCCCCC">JavaScript tag</font><font color="#E5E5E5"> but there is no script</font>

616
00:26:53,220 --> 00:26:57,410
<font color="#E5E5E5">attached</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> it so that's yeah not as</font>

617
00:26:55,830 --> 00:26:59,990
interesting

618
00:26:57,410 --> 00:27:01,550
<font color="#E5E5E5">then we can inject into properties which</font>

619
00:26:59,990 --> 00:27:03,110
become attributes<font color="#E5E5E5"> so that's more</font>

620
00:27:01,550 --> 00:27:06,020
interesting<font color="#E5E5E5"> because then that's where</font>

621
00:27:03,110 --> 00:27:10,189
you<font color="#E5E5E5"> will inject your dangerousness</font><font color="#CCCCCC"> at</font>

622
00:27:06,020 --> 00:27:13,879
innerhtml<font color="#CCCCCC"> right</font><font color="#E5E5E5"> so that might still be</font>

623
00:27:10,190 --> 00:27:19,250
<font color="#E5E5E5">an issue</font><font color="#CCCCCC"> and then if you can inject</font><font color="#E5E5E5"> into</font>

624
00:27:13,880 --> 00:27:21,080
<font color="#CCCCCC">the children actually before I get that</font>

625
00:27:19,250 --> 00:27:22,850
so<font color="#E5E5E5"> talking about the injections into the</font>

626
00:27:21,080 --> 00:27:25,820
attributes right well<font color="#CCCCCC"> actual the</font>

627
00:27:22,850 --> 00:27:28,310
children was<font color="#CCCCCC"> the</font><font color="#E5E5E5"> example with the you</font>

628
00:27:25,820 --> 00:27:31,210
know<font color="#E5E5E5"> the for the full element that we</font>

629
00:27:28,310 --> 00:27:34,280
created here so that was the<font color="#E5E5E5"> third one</font>

630
00:27:31,210 --> 00:27:38,180
so the<font color="#E5E5E5"> properties there there are other</font>

631
00:27:34,280 --> 00:27:41,300
properties<font color="#CCCCCC"> that</font><font color="#E5E5E5"> are vulnerable so for</font>

632
00:27:38,180 --> 00:27:45,020
<font color="#E5E5E5">example the atria again that that's been</font>

633
00:27:41,300 --> 00:27:47,659
around<font color="#E5E5E5"> forever it's a link but we can</font>

634
00:27:45,020 --> 00:27:51,860
inject the<font color="#CCCCCC"> JavaScript header</font><font color="#E5E5E5"> and we</font><font color="#CCCCCC"> can</font>

635
00:27:47,660 --> 00:27:53,390
execute<font color="#CCCCCC"> JavaScript in</font><font color="#E5E5E5"> the atria and</font><font color="#CCCCCC"> you</font>

636
00:27:51,860 --> 00:27:55,459
know any JavaScript doesn't<font color="#E5E5E5"> matter which</font>

637
00:27:53,390 --> 00:27:57,380
framework<font color="#E5E5E5"> react also this is vulnerable</font>

638
00:27:55,460 --> 00:28:02,630
<font color="#CCCCCC">to that</font><font color="#E5E5E5"> and not just the JavaScript</font><font color="#CCCCCC"> you</font>

639
00:27:57,380 --> 00:28:06,980
can<font color="#E5E5E5"> also inject</font><font color="#CCCCCC"> the data schema</font><font color="#E5E5E5"> and then</font>

640
00:28:02,630 --> 00:28:10,700
<font color="#E5E5E5">which will be intent of well</font><font color="#CCCCCC"> there the</font>

641
00:28:06,980 --> 00:28:12,440
value of that tag will be<font color="#E5E5E5"> injected into</font>

642
00:28:10,700 --> 00:28:17,090
<font color="#E5E5E5">your page and it may contain JavaScript</font>

643
00:28:12,440 --> 00:28:19,400
as well<font color="#CCCCCC"> actually executed but in HTML</font>

644
00:28:17,090 --> 00:28:22,330
there are only a<font color="#E5E5E5"> couple elements that</font>

645
00:28:19,400 --> 00:28:25,670
will interpret<font color="#E5E5E5"> links with the</font><font color="#CCCCCC"> java</font>

646
00:28:22,330 --> 00:28:29,270
<font color="#CCCCCC">javascript schema</font><font color="#E5E5E5"> and you know one of</font>

647
00:28:25,670 --> 00:28:30,980
them is obviously<font color="#E5E5E5"> the href still</font><font color="#CCCCCC"> will</font>

648
00:28:29,270 --> 00:28:32,270
not vulnerable like it's a feature right

649
00:28:30,980 --> 00:28:34,280
sometimes<font color="#CCCCCC"> you have to run some</font>

650
00:28:32,270 --> 00:28:37,220
<font color="#E5E5E5">JavaScript when the somebody clicks on a</font>

651
00:28:34,280 --> 00:28:39,950
link<font color="#E5E5E5"> but there are other locations in</font>

652
00:28:37,220 --> 00:28:43,190
<font color="#E5E5E5">html5 elements like the form action can</font>

653
00:28:39,950 --> 00:28:44,840
execute<font color="#CCCCCC"> JavaScript the poster tag</font><font color="#E5E5E5"> you</font>

654
00:28:43,190 --> 00:28:46,100
would poster<font color="#E5E5E5"> attribute for the video tag</font>

655
00:28:44,840 --> 00:28:47,540
you used to be able to<font color="#E5E5E5"> execute</font>

656
00:28:46,100 --> 00:28:49,820
JavaScript<font color="#E5E5E5"> not anymore nothing the</font>

657
00:28:47,540 --> 00:28:53,180
latest versions but it was<font color="#CCCCCC"> vulnerable</font>

658
00:28:49,820 --> 00:28:56,060
before so how and<font color="#E5E5E5"> then also there are</font>

659
00:28:53,180 --> 00:28:59,720
the<font color="#E5E5E5"> HTML imports right when you can</font>

660
00:28:56,060 --> 00:29:02,820
inject some JavaScript with the link tag

661
00:28:59,720 --> 00:29:05,760
<font color="#E5E5E5">in the header of their file</font>

662
00:29:02,820 --> 00:29:09,210
so how do we<font color="#E5E5E5"> fix that one we can just</font>

663
00:29:05,760 --> 00:29:13,110
strip out the<font color="#E5E5E5"> JavaScript word in the</font>

664
00:29:09,210 --> 00:29:14,910
string but<font color="#E5E5E5"> that's not a good option</font><font color="#CCCCCC"> it's</font>

665
00:29:13,110 --> 00:29:17,699
better<font color="#E5E5E5"> to use</font><font color="#CCCCCC"> something like the</font><font color="#E5E5E5"> URL</font>

666
00:29:14,910 --> 00:29:19,980
parser<font color="#E5E5E5"> the you know the URL library</font><font color="#CCCCCC"> that</font>

667
00:29:17,700 --> 00:29:23,370
<font color="#CCCCCC">will say okay the protocol is JavaScript</font>

668
00:29:19,980 --> 00:29:25,140
<font color="#E5E5E5">and the only filter well is it better to</font>

669
00:29:23,370 --> 00:29:27,780
filter to search for the<font color="#E5E5E5"> JavaScript</font>

670
00:29:25,140 --> 00:29:29,640
<font color="#E5E5E5">protocol and disallow the JavaScript</font>

671
00:29:27,780 --> 00:29:31,080
protocol<font color="#E5E5E5"> or is</font><font color="#CCCCCC"> it better to search for</font>

672
00:29:29,640 --> 00:29:34,530
the protocol<font color="#CCCCCC"> that you're expecting like</font>

673
00:29:31,080 --> 00:29:36,330
<font color="#CCCCCC">she's PE HTTP right whitelisting is</font>

674
00:29:34,530 --> 00:29:37,980
obviously better because it's<font color="#E5E5E5"> not as I</font>

675
00:29:36,330 --> 00:29:40,760
said not<font color="#CCCCCC"> just JavaScript but also the</font>

676
00:29:37,980 --> 00:29:45,090
data protocol can<font color="#E5E5E5"> be dangerous as well</font>

677
00:29:40,760 --> 00:29:49,590
and I don't<font color="#E5E5E5"> know why this is not still a</font>

678
00:29:45,090 --> 00:29:53,070
feature of<font color="#E5E5E5"> the framework domenico raging</font>

679
00:29:49,590 --> 00:29:55,470
about it's like<font color="#E5E5E5"> come on if untrusted</font>

680
00:29:53,070 --> 00:29:58,169
input is<font color="#E5E5E5"> coming into application and the</font>

681
00:29:55,470 --> 00:29:59,850
schema starts with<font color="#E5E5E5"> JavaScript like it</font>

682
00:29:58,170 --> 00:30:01,710
already should<font color="#E5E5E5"> be automatically taken</font>

683
00:29:59,850 --> 00:30:07,189
<font color="#CCCCCC">care of because</font><font color="#E5E5E5"> that that shouldn't be a</font>

684
00:30:01,710 --> 00:30:07,190
future<font color="#E5E5E5"> so let's look at a quick example</font>

685
00:30:10,990 --> 00:30:18,779
<font color="#E5E5E5">all right so you know</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> little test</font>

686
00:30:14,020 --> 00:30:18,779
application<font color="#E5E5E5"> and if we create</font>

687
00:30:21,290 --> 00:30:27,420
<font color="#E5E5E5">post and then instead of putting</font><font color="#CCCCCC"> a URL</font>

688
00:30:24,920 --> 00:30:29,650
would just say JavaScript<font color="#CCCCCC"> alert</font><font color="#E5E5E5"> one</font>

689
00:30:27,420 --> 00:30:33,010
[Music]

690
00:30:29,650 --> 00:30:33,010
create the link

691
00:30:39,340 --> 00:30:42,240
demo gods

692
00:30:58,630 --> 00:31:04,800
<font color="#E5E5E5">I'm going to go to some of</font><font color="#CCCCCC"> the looks</font>

693
00:31:00,880 --> 00:31:07,390
<font color="#CCCCCC">that L</font><font color="#E5E5E5"> would create it but</font><font color="#CCCCCC"> basically</font>

694
00:31:04,800 --> 00:31:09,100
once you do<font color="#CCCCCC"> that and you click on</font><font color="#E5E5E5"> the</font>

695
00:31:07,390 --> 00:31:15,250
link and the script<font color="#E5E5E5"> is going to be</font>

696
00:31:09,100 --> 00:31:17,469
executed<font color="#CCCCCC"> right so alert demo</font><font color="#E5E5E5"> gods right</font>

697
00:31:15,250 --> 00:31:21,640
<font color="#E5E5E5">hopefully</font><font color="#CCCCCC"> they'll be</font><font color="#E5E5E5"> more interesting</font>

698
00:31:17,470 --> 00:31:25,120
demos<font color="#CCCCCC"> all right this is all easy and</font>

699
00:31:21,640 --> 00:31:31,270
<font color="#E5E5E5">straightforward</font><font color="#CCCCCC"> what</font><font color="#E5E5E5"> about cases where I</font>

700
00:31:25,120 --> 00:31:34,389
need<font color="#CCCCCC"> to have some HTML</font><font color="#E5E5E5"> tags available</font>

701
00:31:31,270 --> 00:31:36,670
<font color="#CCCCCC">for my users</font><font color="#E5E5E5"> if they</font><font color="#CCCCCC"> are writing</font><font color="#E5E5E5"> a blog</font>

702
00:31:34,390 --> 00:31:38,980
post<font color="#E5E5E5"> and they want to use you know pink</font>

703
00:31:36,670 --> 00:31:42,160
color to<font color="#E5E5E5"> highlight something right or</font>

704
00:31:38,980 --> 00:31:45,340
bold or italics<font color="#CCCCCC"> so what do we</font><font color="#E5E5E5"> use we use</font>

705
00:31:42,160 --> 00:31:46,900
markup<font color="#E5E5E5"> you know it's not early</font>

706
00:31:45,340 --> 00:31:48,520
two-thousands anymore we have markup

707
00:31:46,900 --> 00:31:52,480
mark table<font color="#E5E5E5"> doesn't allow you to inject</font>

708
00:31:48,520 --> 00:31:54,700
scripts all good is that true<font color="#E5E5E5"> well the</font>

709
00:31:52,480 --> 00:31:58,570
<font color="#CCCCCC">markup itself</font><font color="#E5E5E5"> doesn't have anything for</font>

710
00:31:54,700 --> 00:32:04,330
<font color="#E5E5E5">JavaScript right only has the text</font>

711
00:31:58,570 --> 00:32:07,300
editing features<font color="#E5E5E5"> but actually if</font><font color="#CCCCCC"> you do</font>

712
00:32:04,330 --> 00:32:10,659
inject some JavaScript into the mark

713
00:32:07,300 --> 00:32:13,840
<font color="#E5E5E5">into whatever is then repeated from</font>

714
00:32:10,660 --> 00:32:16,510
markup to HTML<font color="#E5E5E5"> guess what the libraries</font>

715
00:32:13,840 --> 00:32:17,949
like here and<font color="#CCCCCC"> have an</font><font color="#E5E5E5"> example right with</font>

716
00:32:16,510 --> 00:32:20,530
<font color="#E5E5E5">our</font><font color="#CCCCCC"> way your the users submit some work</font>

717
00:32:17,950 --> 00:32:23,200
up and then we use the showdown library

718
00:32:20,530 --> 00:32:25,480
<font color="#E5E5E5">to convert it from markup to the HTML</font>

719
00:32:23,200 --> 00:32:28,660
<font color="#E5E5E5">and then display to the user so when we</font>

720
00:32:25,480 --> 00:32:31,510
<font color="#CCCCCC">display to the user</font><font color="#E5E5E5"> we converted HTML we</font>

721
00:32:28,660 --> 00:32:35,730
have to show the HTML<font color="#E5E5E5"> so how do we do</font>

722
00:32:31,510 --> 00:32:38,110
this in react<font color="#E5E5E5"> well we have to</font><font color="#CCCCCC"> use the</font>

723
00:32:35,730 --> 00:32:39,760
dangerousness that energy amount like

724
00:32:38,110 --> 00:32:42,850
that's the only<font color="#CCCCCC"> way we're going to be</font>

725
00:32:39,760 --> 00:32:47,410
able<font color="#CCCCCC"> to</font><font color="#E5E5E5"> show our you know pink font in</font>

726
00:32:42,850 --> 00:32:50,050
<font color="#CCCCCC">the</font><font color="#E5E5E5"> post but if the user</font><font color="#CCCCCC"> actually is</font>

727
00:32:47,410 --> 00:32:52,180
<font color="#E5E5E5">able to submit script and store to the</font>

728
00:32:50,050 --> 00:32:55,180
database<font color="#E5E5E5"> and then it is converted from</font>

729
00:32:52,180 --> 00:32:57,100
<font color="#E5E5E5">markup into HTML guess what happens with</font>

730
00:32:55,180 --> 00:33:00,520
<font color="#CCCCCC">that script statement</font><font color="#E5E5E5"> it's not getting</font>

731
00:32:57,100 --> 00:33:02,350
<font color="#E5E5E5">filtered out</font><font color="#CCCCCC"> the showdown library or</font><font color="#E5E5E5"> any</font>

732
00:33:00,520 --> 00:33:06,340
other mark that<font color="#CCCCCC"> will the ones that I've</font>

733
00:33:02,350 --> 00:33:08,230
seen<font color="#E5E5E5"> they are not the filtration</font>

734
00:33:06,340 --> 00:33:10,209
libraries they're not the sanitization

735
00:33:08,230 --> 00:33:12,710
libraries<font color="#E5E5E5"> they will take your JavaScript</font>

736
00:33:10,210 --> 00:33:15,399
<font color="#E5E5E5">and put it into the output HTML</font>

737
00:33:12,710 --> 00:33:18,350
and you're gonna stick<font color="#E5E5E5"> it into the page</font>

738
00:33:15,399 --> 00:33:21,498
so if you're using markup<font color="#E5E5E5"> that</font><font color="#CCCCCC"> doesn't</font>

739
00:33:18,350 --> 00:33:23,299
mean you are you cannot<font color="#E5E5E5"> have a</font>

740
00:33:21,499 --> 00:33:26,809
cross-site scripting<font color="#E5E5E5"> you still have to</font>

741
00:33:23,299 --> 00:33:29,210
sanitize<font color="#E5E5E5"> your code after the markup</font>

742
00:33:26,809 --> 00:33:34,070
library did<font color="#E5E5E5"> it's you know deep well did</font>

743
00:33:29,210 --> 00:33:36,230
it<font color="#E5E5E5"> convert it it to HTML</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> one way</font>

744
00:33:34,070 --> 00:33:38,480
<font color="#CCCCCC">well one</font><font color="#E5E5E5"> of the best ways to sanitize</font>

745
00:33:36,230 --> 00:33:42,080
<font color="#E5E5E5">your HTML is actually to use the Dom</font>

746
00:33:38,480 --> 00:33:44,509
purify library<font color="#E5E5E5"> from dr. Mario is amazing</font>

747
00:33:42,080 --> 00:33:46,009
<font color="#E5E5E5">still has vulnerable has</font><font color="#CCCCCC"> all their</font>

748
00:33:44,509 --> 00:33:49,610
abilities every now and then but the

749
00:33:46,009 --> 00:33:56,090
patch them pretty quickly<font color="#CCCCCC"> so here's an</font>

750
00:33:49,610 --> 00:33:58,729
<font color="#CCCCCC">example right so here's my little react</font>

751
00:33:56,090 --> 00:34:03,769
app that accepts some work up<font color="#E5E5E5"> right so</font>

752
00:33:58,730 --> 00:34:06,230
we have like I can take today the second

753
00:34:03,769 --> 00:34:18,040
title but then if I inject something

754
00:34:06,230 --> 00:34:22,790
<font color="#E5E5E5">like image source X on error alert so</font>

755
00:34:18,040 --> 00:34:28,219
come on you guys<font color="#E5E5E5"> have to clever</font><font color="#CCCCCC"> alert</font>

756
00:34:22,790 --> 00:34:29,418
<font color="#CCCCCC">Popo but yeah so mark out be very</font>

757
00:34:28,219 --> 00:34:32,299
<font color="#CCCCCC">careful about</font><font color="#E5E5E5"> it you still</font><font color="#CCCCCC"> have to</font>

758
00:34:29,418 --> 00:34:35,750
<font color="#CCCCCC">sanitize it</font><font color="#E5E5E5"> another cool feature that</font>

759
00:34:32,299 --> 00:34:38,359
<font color="#E5E5E5">react provides a server-side rendering</font>

760
00:34:35,750 --> 00:34:40,909
or a dumb<font color="#E5E5E5"> server-side</font><font color="#CCCCCC"> Dom rendering</font>

761
00:34:38,359 --> 00:34:42,469
right how<font color="#E5E5E5"> is it different from</font>

762
00:34:40,909 --> 00:34:44,559
<font color="#E5E5E5">client-side um right now what kind</font><font color="#CCCCCC"> of</font>

763
00:34:42,469 --> 00:34:47,299
what what is it<font color="#CCCCCC"> why do we</font><font color="#E5E5E5"> need that</font>

764
00:34:44,559 --> 00:34:52,280
traditionally in the<font color="#E5E5E5"> client-side</font>

765
00:34:47,299 --> 00:34:55,609
rendering<font color="#E5E5E5"> a client-side really we send</font>

766
00:34:52,280 --> 00:34:58,849
the HTML<font color="#CCCCCC"> you</font><font color="#E5E5E5"> know from the server to</font><font color="#CCCCCC"> the</font>

767
00:34:55,609 --> 00:35:02,750
client then the browser loads<font color="#E5E5E5"> all the</font>

768
00:34:58,849 --> 00:35:05,000
<font color="#E5E5E5">JavaScript then loads react library</font>

769
00:35:02,750 --> 00:35:08,390
which is not small<font color="#E5E5E5"> then it executes all</font>

770
00:35:05,000 --> 00:35:11,770
the reacts<font color="#E5E5E5"> bells and whistles and that's</font>

771
00:35:08,390 --> 00:35:14,480
when the page becomes available<font color="#CCCCCC"> and</font>

772
00:35:11,770 --> 00:35:19,400
active<font color="#E5E5E5"> and the user can start clicking</font>

773
00:35:14,480 --> 00:35:22,369
so that third step of executing react

774
00:35:19,400 --> 00:35:24,680
<font color="#E5E5E5">actually takes some time and it may take</font>

775
00:35:22,369 --> 00:35:25,950
you know<font color="#E5E5E5"> half a second which is a lot of</font>

776
00:35:24,680 --> 00:35:27,450
time

777
00:35:25,950 --> 00:35:28,919
wait<font color="#E5E5E5"> for it and if you're in a</font><font color="#CCCCCC"> mobile</font>

778
00:35:27,450 --> 00:35:31,410
device<font color="#CCCCCC"> let's say give it a</font><font color="#E5E5E5"> little bit</font>

779
00:35:28,920 --> 00:35:34,980
longer<font color="#E5E5E5"> that's not gonna work</font><font color="#CCCCCC"> right for</font>

780
00:35:31,410 --> 00:35:37,740
the users<font color="#E5E5E5"> so the</font><font color="#CCCCCC"> server-side rendering</font>

781
00:35:34,980 --> 00:35:39,200
concept is<font color="#CCCCCC"> that well the rendering</font><font color="#E5E5E5"> also</font>

782
00:35:37,740 --> 00:35:41,939
the rendering<font color="#CCCCCC"> part is kind of</font>

783
00:35:39,200 --> 00:35:43,080
performance intensive and you<font color="#CCCCCC"> don't want</font>

784
00:35:41,940 --> 00:35:44,820
to<font color="#CCCCCC"> do it</font><font color="#E5E5E5"> on the clients browser</font>

785
00:35:43,080 --> 00:35:47,040
<font color="#CCCCCC">especially if it's a mobile browser and</font>

786
00:35:44,820 --> 00:35:49,860
it's eating<font color="#E5E5E5"> your battery so it's much</font>

787
00:35:47,040 --> 00:35:52,259
easier<font color="#CCCCCC"> and faster</font><font color="#E5E5E5"> to render it on the</font>

788
00:35:49,860 --> 00:35:54,810
server side<font color="#E5E5E5"> so what what the</font><font color="#CCCCCC"> server-side</font>

789
00:35:52,260 --> 00:35:57,210
<font color="#CCCCCC">rendering does it takes the HTML</font><font color="#E5E5E5"> it</font>

790
00:35:54,810 --> 00:35:59,670
renders it into what the page will

791
00:35:57,210 --> 00:36:02,520
actually look like<font color="#E5E5E5"> and then since that</font>

792
00:35:59,670 --> 00:36:05,760
<font color="#E5E5E5">rendered part into the browser</font><font color="#CCCCCC"> it</font>

793
00:36:02,520 --> 00:36:08,310
becomes visible<font color="#E5E5E5"> immediately and then</font>

794
00:36:05,760 --> 00:36:10,710
when the page is<font color="#CCCCCC"> already</font><font color="#E5E5E5"> visible the</font>

795
00:36:08,310 --> 00:36:12,570
browser downloads react and all the

796
00:36:10,710 --> 00:36:15,390
other<font color="#CCCCCC"> scripts and then</font><font color="#E5E5E5"> executes set them</font>

797
00:36:12,570 --> 00:36:18,060
and then it becomes active<font color="#CCCCCC"> so it still</font>

798
00:36:15,390 --> 00:36:20,339
takes that half a second but for that

799
00:36:18,060 --> 00:36:23,340
<font color="#E5E5E5">half a second the user can see the page</font>

800
00:36:20,340 --> 00:36:25,230
<font color="#CCCCCC">and while they're figuring</font><font color="#E5E5E5"> out where</font>

801
00:36:23,340 --> 00:36:28,080
should I click by the time they click

802
00:36:25,230 --> 00:36:30,210
the page is<font color="#CCCCCC"> already at 6:00 though it's</font>

803
00:36:28,080 --> 00:36:32,520
awesome it's amazing<font color="#CCCCCC"> it's also great for</font>

804
00:36:30,210 --> 00:36:33,900
search engine optimization<font color="#CCCCCC"> right</font><font color="#E5E5E5"> because</font>

805
00:36:32,520 --> 00:36:37,680
when you send you just send the final

806
00:36:33,900 --> 00:36:41,360
<font color="#E5E5E5">HTML with all the terms titles you know</font>

807
00:36:37,680 --> 00:36:44,430
subtitles<font color="#E5E5E5"> great for sale engines to grab</font>

808
00:36:41,360 --> 00:36:47,070
but what does<font color="#CCCCCC"> it tell</font><font color="#E5E5E5"> us in</font><font color="#CCCCCC"> terms</font><font color="#E5E5E5"> of</font>

809
00:36:44,430 --> 00:36:49,589
security<font color="#E5E5E5"> so it kind of brings us to the</font>

810
00:36:47,070 --> 00:36:53,280
old days you<font color="#CCCCCC"> know when you wrote like</font>

811
00:36:49,590 --> 00:36:56,250
<font color="#CCCCCC">JSX like the service of JSX</font><font color="#E5E5E5"> GSP right</font>

812
00:36:53,280 --> 00:36:58,200
the<font color="#CCCCCC"> server-side templates you render a</font>

813
00:36:56,250 --> 00:37:01,200
template<font color="#E5E5E5"> on the server side you execute</font>

814
00:36:58,200 --> 00:37:03,000
everything<font color="#E5E5E5"> you make it look what how the</font>

815
00:37:01,200 --> 00:37:04,439
user<font color="#CCCCCC"> should see and</font><font color="#E5E5E5"> only then you send</font>

816
00:37:03,000 --> 00:37:06,600
it<font color="#E5E5E5"> to the user that means you're</font>

817
00:37:04,440 --> 00:37:09,680
injecting data on the server<font color="#E5E5E5"> side and</font>

818
00:37:06,600 --> 00:37:12,630
because the react is executing<font color="#CCCCCC"> there</font>

819
00:37:09,680 --> 00:37:15,210
things doing<font color="#CCCCCC"> its magic later in the</font><font color="#E5E5E5"> game</font>

820
00:37:12,630 --> 00:37:18,740
<font color="#E5E5E5">whatever you inject when you're</font>

821
00:37:15,210 --> 00:37:22,290
<font color="#E5E5E5">rendering your template is not gonna be</font>

822
00:37:18,740 --> 00:37:25,140
sanitized<font color="#CCCCCC"> or processed by react so if</font>

823
00:37:22,290 --> 00:37:27,990
<font color="#E5E5E5">you're able to have an injection</font><font color="#CCCCCC"> on that</font>

824
00:37:25,140 --> 00:37:30,569
step<font color="#CCCCCC"> to then react will not save you</font>

825
00:37:27,990 --> 00:37:32,379
like all these contextual escaping magic

826
00:37:30,570 --> 00:37:34,990
is not<font color="#E5E5E5"> going to happen</font>

827
00:37:32,380 --> 00:37:37,810
and when we render<font color="#E5E5E5"> the page we also have</font>

828
00:37:34,990 --> 00:37:42,339
to send<font color="#E5E5E5"> it some state some data to fill</font>

829
00:37:37,810 --> 00:37:44,470
it<font color="#CCCCCC"> up so</font><font color="#E5E5E5"> so there are two state steps</font>

830
00:37:42,340 --> 00:37:46,720
<font color="#E5E5E5">right so we rendered the page and then</font>

831
00:37:44,470 --> 00:37:49,299
<font color="#E5E5E5">we said the initial state and then the</font>

832
00:37:46,720 --> 00:37:51,430
page becomes<font color="#E5E5E5"> active on their client side</font>

833
00:37:49,300 --> 00:37:54,250
<font color="#CCCCCC">so how do we</font><font color="#E5E5E5"> say the initial</font><font color="#CCCCCC"> State</font><font color="#E5E5E5"> well</font>

834
00:37:51,430 --> 00:37:56,020
we just<font color="#CCCCCC"> said some JavaScript</font><font color="#E5E5E5"> variable</font>

835
00:37:54,250 --> 00:37:57,730
<font color="#CCCCCC">alright and</font><font color="#E5E5E5"> usually it's called</font>

836
00:37:56,020 --> 00:37:59,770
<font color="#E5E5E5">something like</font><font color="#CCCCCC"> pre-loaded State</font>

837
00:37:57,730 --> 00:38:02,350
application<font color="#E5E5E5"> state is just</font><font color="#CCCCCC"> global</font>

838
00:37:59,770 --> 00:38:07,750
accessible variable on the<font color="#CCCCCC"> window object</font>

839
00:38:02,350 --> 00:38:10,740
<font color="#CCCCCC">and we set it to JSON</font><font color="#E5E5E5"> all good so that</font>

840
00:38:07,750 --> 00:38:13,240
if the<font color="#CCCCCC"> JSON contains some untrusted data</font>

841
00:38:10,740 --> 00:38:14,950
for example<font color="#CCCCCC"> you know contains the name</font>

842
00:38:13,240 --> 00:38:16,839
that<font color="#E5E5E5"> comes from the user which you</font>

843
00:38:14,950 --> 00:38:19,169
didn't sanitize<font color="#E5E5E5"> because you're using</font>

844
00:38:16,840 --> 00:38:22,510
react you trust react<font color="#E5E5E5"> everything is good</font>

845
00:38:19,170 --> 00:38:25,510
<font color="#CCCCCC">well if I'm</font><font color="#E5E5E5"> trying if I try to inject</font>

846
00:38:22,510 --> 00:38:28,210
<font color="#E5E5E5">something and break out of this JSON</font>

847
00:38:25,510 --> 00:38:33,100
context if I inject a double quote<font color="#E5E5E5"> to</font>

848
00:38:28,210 --> 00:38:35,290
break out of<font color="#CCCCCC"> you know</font><font color="#E5E5E5"> me</font><font color="#CCCCCC"> senia</font><font color="#E5E5E5"> name</font><font color="#CCCCCC"> Java</font>

849
00:38:33,100 --> 00:38:39,700
<font color="#CCCCCC">Script is just gonna</font><font color="#E5E5E5"> escape it</font><font color="#CCCCCC"> you know</font>

850
00:38:35,290 --> 00:38:42,070
<font color="#CCCCCC">backslash in front of it</font><font color="#E5E5E5"> all good but if</font>

851
00:38:39,700 --> 00:38:43,629
I inject something<font color="#E5E5E5"> like this so</font>

852
00:38:42,070 --> 00:38:45,820
technically if we look at it<font color="#E5E5E5"> from the</font>

853
00:38:43,630 --> 00:38:47,950
JavaScript context<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is all the</font>

854
00:38:45,820 --> 00:38:50,290
string right it's it's<font color="#E5E5E5"> all in double</font>

855
00:38:47,950 --> 00:38:52,299
quotes<font color="#E5E5E5"> script script</font><font color="#CCCCCC"> alert it's all</font>

856
00:38:50,290 --> 00:38:54,250
string looks benign<font color="#E5E5E5"> where we didn't</font>

857
00:38:52,300 --> 00:38:56,890
break out<font color="#E5E5E5"> of the JSON context however</font>

858
00:38:54,250 --> 00:38:59,500
because it's a JSON context but<font color="#E5E5E5"> it also</font>

859
00:38:56,890 --> 00:39:02,589
is an HTML context when the browser

860
00:38:59,500 --> 00:39:05,550
parses the page the HTML gets parsed

861
00:39:02,590 --> 00:39:08,830
first and then<font color="#E5E5E5"> the JavaScript</font>

862
00:39:05,550 --> 00:39:11,170
interpreter kicks in right<font color="#E5E5E5"> so when the</font>

863
00:39:08,830 --> 00:39:14,380
browser parses the HTML it finds<font color="#E5E5E5"> this</font>

864
00:39:11,170 --> 00:39:16,390
first script<font color="#E5E5E5"> before the window opening</font>

865
00:39:14,380 --> 00:39:18,250
script and then it finds the closing

866
00:39:16,390 --> 00:39:20,470
script<font color="#E5E5E5"> and says that's it</font>

867
00:39:18,250 --> 00:39:22,510
<font color="#E5E5E5">that's the script so then the second</font>

868
00:39:20,470 --> 00:39:25,649
script<font color="#E5E5E5"> with the alert it gets executed</font>

869
00:39:22,510 --> 00:39:28,760
it's an inline script so this is your

870
00:39:25,650 --> 00:39:33,300
JavaScript injection<font color="#E5E5E5"> right in them</font>

871
00:39:28,760 --> 00:39:37,680
<font color="#CCCCCC">mm-hmm</font><font color="#E5E5E5"> and the dangerous thing is that</font>

872
00:39:33,300 --> 00:39:41,220
this code<font color="#CCCCCC"> it's one without</font><font color="#E5E5E5"> any</font><font color="#CCCCCC"> sent</font>

873
00:39:37,680 --> 00:39:43,109
today<font color="#E5E5E5"> is in almost every tutorial</font><font color="#CCCCCC"> you go</font>

874
00:39:41,220 --> 00:39:44,850
to stack overflow<font color="#CCCCCC"> how to do server-side</font>

875
00:39:43,110 --> 00:39:46,170
rendering<font color="#E5E5E5"> that's the example that you're</font>

876
00:39:44,850 --> 00:39:51,180
gonna get and it's<font color="#CCCCCC"> going to</font><font color="#E5E5E5"> be</font>

877
00:39:46,170 --> 00:39:53,570
<font color="#E5E5E5">vulnerable</font><font color="#CCCCCC"> so if we look at another demo</font>

878
00:39:51,180 --> 00:39:53,569
here

879
00:40:07,400 --> 00:40:18,499
so if<font color="#E5E5E5"> I submit my name right all good if</font>

880
00:40:11,450 --> 00:40:20,930
I<font color="#CCCCCC"> submit the script here Lord pops up</font>

881
00:40:18,499 --> 00:40:22,700
<font color="#CCCCCC">I'll good well no good</font><font color="#E5E5E5"> but the</font>

882
00:40:20,930 --> 00:40:31,549
interesting thing if we look at the page

883
00:40:22,700 --> 00:40:34,129
<font color="#E5E5E5">source the injection happens right here</font>

884
00:40:31,549 --> 00:40:37,700
<font color="#E5E5E5">this is</font><font color="#CCCCCC"> before the react application</font>

885
00:40:34,130 --> 00:40:40,339
starts<font color="#E5E5E5"> it's magic</font><font color="#CCCCCC"> right the react is</font>

886
00:40:37,700 --> 00:40:42,319
right here in the body<font color="#CCCCCC"> like this</font><font color="#E5E5E5"> is</font>

887
00:40:40,339 --> 00:40:43,970
where we<font color="#CCCCCC"> load the</font><font color="#E5E5E5"> bundle of GS that</font>

888
00:40:42,319 --> 00:40:46,569
contains the react library and does all

889
00:40:43,970 --> 00:40:51,230
<font color="#E5E5E5">the thing and note</font><font color="#CCCCCC"> that when I inject</font>

890
00:40:46,569 --> 00:40:54,650
<font color="#E5E5E5">the name like inside the react code</font><font color="#CCCCCC"> it</font>

891
00:40:51,230 --> 00:40:56,630
<font color="#CCCCCC">so</font><font color="#E5E5E5"> escaped it's all good right it's less</font>

892
00:40:54,650 --> 00:40:58,789
than greater<font color="#CCCCCC"> than the react does its</font>

893
00:40:56,630 --> 00:41:00,829
thing<font color="#E5E5E5"> but</font><font color="#CCCCCC"> because you inject the data</font>

894
00:40:58,789 --> 00:41:02,930
before they react<font color="#E5E5E5"> we have your state</font>

895
00:41:00,829 --> 00:41:08,119
variable like that's where the injection

896
00:41:02,930 --> 00:41:13,779
<font color="#E5E5E5">is happening so how do</font><font color="#CCCCCC"> you fix that</font>

897
00:41:08,119 --> 00:41:16,999
oh and the<font color="#CCCCCC"> other</font><font color="#E5E5E5"> thing is</font><font color="#CCCCCC"> that was a</font>

898
00:41:13,779 --> 00:41:19,130
very simple<font color="#E5E5E5"> example where the state</font><font color="#CCCCCC"> is</font>

899
00:41:16,999 --> 00:41:22,899
just in a<font color="#CCCCCC"> JavaScript</font><font color="#E5E5E5"> felt very variable</font>

900
00:41:19,130 --> 00:41:25,190
<font color="#E5E5E5">no magic but usually with reacts</font>

901
00:41:22,900 --> 00:41:26,749
<font color="#E5E5E5">developers are</font><font color="#CCCCCC"> using</font><font color="#E5E5E5"> Redux to maintain</font>

902
00:41:25,190 --> 00:41:29,089
the state of state is you know more than

903
00:41:26,749 --> 00:41:31,640
just<font color="#CCCCCC"> a couple</font><font color="#E5E5E5"> of attributes</font><font color="#CCCCCC"> again you go</font>

904
00:41:29,089 --> 00:41:33,410
<font color="#E5E5E5">to the Redux documentation the same</font>

905
00:41:31,640 --> 00:41:36,470
vulnerable code was in their

906
00:41:33,410 --> 00:41:38,868
documentation<font color="#E5E5E5"> until you know somebody</font>

907
00:41:36,470 --> 00:41:44,058
found<font color="#CCCCCC"> the vulnerability filed bug and</font>

908
00:41:38,869 --> 00:41:46,430
now<font color="#E5E5E5"> what they suggest as a fix is</font>

909
00:41:44,059 --> 00:41:49,579
actually just<font color="#E5E5E5"> to double you know replace</font>

910
00:41:46,430 --> 00:41:51,169
<font color="#CCCCCC">replays</font><font color="#E5E5E5"> Open bracket with less than</font>

911
00:41:49,579 --> 00:41:55,339
character<font color="#E5E5E5"> or whatever they're suggesting</font>

912
00:41:51,170 --> 00:41:58,369
you have a<font color="#CCCCCC"> unicode character yeah I mean</font>

913
00:41:55,339 --> 00:42:01,160
it works I guess<font color="#E5E5E5"> but that's kind of</font>

914
00:41:58,369 --> 00:42:04,420
<font color="#CCCCCC">blacklisting approach</font><font color="#E5E5E5"> so again a better</font>

915
00:42:01,160 --> 00:42:06,980
approach<font color="#CCCCCC"> would be to use</font><font color="#E5E5E5"> a serialized</font>

916
00:42:04,420 --> 00:42:10,789
<font color="#CCCCCC">function from the serialized</font><font color="#E5E5E5"> JavaScript</font>

917
00:42:06,980 --> 00:42:14,779
library that<font color="#CCCCCC"> what it will do when</font><font color="#E5E5E5"> it C</font>

918
00:42:10,789 --> 00:42:18,589
realises JSON<font color="#CCCCCC"> that you are submitting it</font>

919
00:42:14,779 --> 00:42:20,630
serialize it does<font color="#CCCCCC"> JavaScript</font><font color="#E5E5E5"> escaping so</font>

920
00:42:18,589 --> 00:42:23,630
<font color="#E5E5E5">all your less than greater than special</font>

921
00:42:20,630 --> 00:42:26,660
characters will be JavaScript escaped

922
00:42:23,630 --> 00:42:30,289
with the slash slash slash slash<font color="#CCCCCC"> unicode</font>

923
00:42:26,660 --> 00:42:32,420
character<font color="#E5E5E5"> and in this case the browser</font>

924
00:42:30,289 --> 00:42:34,009
<font color="#E5E5E5">will do the serialization for you</font><font color="#CCCCCC"> but d</font>

925
00:42:32,420 --> 00:42:35,809
serialization<font color="#E5E5E5"> for you so you don't</font><font color="#CCCCCC"> need</font>

926
00:42:34,009 --> 00:42:36,259
to do anything<font color="#E5E5E5"> else</font><font color="#CCCCCC"> on the clients on</font>

927
00:42:35,809 --> 00:42:41,170
there

928
00:42:36,259 --> 00:42:45,289
<font color="#E5E5E5">yeah only on the client side all right</font>

929
00:42:41,170 --> 00:42:47,869
<font color="#CCCCCC">the next vulnerability is the</font><font color="#E5E5E5"> evil again</font>

930
00:42:45,289 --> 00:42:50,349
like it's been so many years<font color="#CCCCCC"> and as long</font>

931
00:42:47,869 --> 00:42:54,499
<font color="#CCCCCC">as the language has this evil function</font>

932
00:42:50,349 --> 00:43:00,619
bad things are bound<font color="#E5E5E5"> to</font><font color="#CCCCCC"> happen but</font><font color="#E5E5E5"> it's</font>

933
00:42:54,499 --> 00:43:02,538
so functional<font color="#CCCCCC"> and it's so it gives you</font>

934
00:43:00,619 --> 00:43:04,130
so many<font color="#E5E5E5"> capabilities that you know</font>

935
00:43:02,539 --> 00:43:05,900
<font color="#CCCCCC">javascript is never gonna say</font><font color="#E5E5E5"> okay we're</font>

936
00:43:04,130 --> 00:43:07,279
now gonna support eval function anymore

937
00:43:05,900 --> 00:43:11,269
<font color="#CCCCCC">like</font><font color="#E5E5E5"> there are so many frameworks</font><font color="#CCCCCC"> that</font>

938
00:43:07,279 --> 00:43:13,519
depend on<font color="#E5E5E5"> that functionality but the</font>

939
00:43:11,269 --> 00:43:15,788
interesting<font color="#CCCCCC"> thing</font><font color="#E5E5E5"> is so with the</font>

940
00:43:13,519 --> 00:43:19,308
JavaScript<font color="#CCCCCC"> utilization like this new</font>

941
00:43:15,789 --> 00:43:22,720
vulnerability in the<font color="#CCCCCC"> OL wasp</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> almost</font>

942
00:43:19,309 --> 00:43:25,630
not<font color="#E5E5E5"> just me was better put in our field</font>

943
00:43:22,720 --> 00:43:27,980
<font color="#CCCCCC">what happens is</font><font color="#E5E5E5"> for example the</font>

944
00:43:25,630 --> 00:43:29,239
<font color="#E5E5E5">serialized JavaScript library that I</font>

945
00:43:27,980 --> 00:43:32,390
just said you know<font color="#E5E5E5"> it's a great library</font>

946
00:43:29,239 --> 00:43:35,210
<font color="#E5E5E5">use it so they say realize the</font>

947
00:43:32,390 --> 00:43:36,769
<font color="#E5E5E5">JavaScript but do you think they have</font>

948
00:43:35,210 --> 00:43:40,849
the<font color="#CCCCCC"> deserialize function built into the</font>

949
00:43:36,769 --> 00:43:42,200
library yep so how<font color="#E5E5E5"> do</font><font color="#CCCCCC"> decentralize</font>

950
00:43:40,849 --> 00:43:44,809
things what if you need to deserialize

951
00:43:42,200 --> 00:43:46,879
whatever you get that serialize data so

952
00:43:44,809 --> 00:43:49,099
again in their documentation<font color="#CCCCCC"> they say</font>

953
00:43:46,880 --> 00:43:51,499
we'll<font color="#CCCCCC"> just do</font><font color="#E5E5E5"> this this function</font><font color="#CCCCCC"> right</font>

954
00:43:49,099 --> 00:43:55,759
this relies a<font color="#E5E5E5"> utilize</font><font color="#CCCCCC"> evolved</font><font color="#E5E5E5"> any well</font>

955
00:43:51,499 --> 00:43:58,368
<font color="#CCCCCC">whatever</font><font color="#E5E5E5"> so they didn't want to put this</font>

956
00:43:55,759 --> 00:44:00,980
into their code<font color="#E5E5E5"> because that would be a</font>

957
00:43:58,369 --> 00:44:02,690
huge<font color="#CCCCCC"> security issue</font><font color="#E5E5E5"> instead they just</font>

958
00:44:00,980 --> 00:44:04,400
put it<font color="#E5E5E5"> into their documentation send you</font>

959
00:44:02,690 --> 00:44:05,749
developer<font color="#E5E5E5"> you've read this function you</font>

960
00:44:04,400 --> 00:44:07,130
just<font color="#CCCCCC"> copy-paste it and it's gonna</font><font color="#E5E5E5"> be</font>

961
00:44:05,749 --> 00:44:08,419
into your code and<font color="#E5E5E5"> it's gonna be your</font>

962
00:44:07,130 --> 00:44:11,749
<font color="#E5E5E5">problem to fix it</font>

963
00:44:08,420 --> 00:44:13,640
it sounds gonna be our bug<font color="#E5E5E5"> why because</font>

964
00:44:11,749 --> 00:44:15,980
there is no function that's called<font color="#E5E5E5"> you</font>

965
00:44:13,640 --> 00:44:17,690
know safe<font color="#E5E5E5"> evil like to solve this</font>

966
00:44:15,980 --> 00:44:20,180
<font color="#E5E5E5">problem it's real you have to really</font>

967
00:44:17,690 --> 00:44:23,390
tech tree application you cannot it's

968
00:44:20,180 --> 00:44:25,700
not like you know<font color="#E5E5E5"> concatenate sequel</font>

969
00:44:23,390 --> 00:44:27,319
statement bad use parametrized queries

970
00:44:25,700 --> 00:44:28,609
easy fix<font color="#E5E5E5"> all done</font>

971
00:44:27,319 --> 00:44:31,070
like there<font color="#E5E5E5"> is no so</font>

972
00:44:28,610 --> 00:44:34,190
speaks for the evil<font color="#CCCCCC"> you just have</font><font color="#E5E5E5"> to</font>

973
00:44:31,070 --> 00:44:38,180
somehow things differently and<font color="#E5E5E5"> do input</font>

974
00:44:34,190 --> 00:44:40,040
validation<font color="#E5E5E5"> or something like</font><font color="#CCCCCC"> that and</font>

975
00:44:38,180 --> 00:44:43,640
then<font color="#E5E5E5"> another example that I saw was</font>

976
00:44:40,040 --> 00:44:45,860
again on Stack Overflow<font color="#E5E5E5"> all of this is</font>

977
00:44:43,640 --> 00:44:47,600
<font color="#E5E5E5">github example on github applications</font>

978
00:44:45,860 --> 00:44:50,480
like the examples that everybody is

979
00:44:47,600 --> 00:44:54,950
using<font color="#CCCCCC"> in Stack Overflow where a</font>

980
00:44:50,480 --> 00:44:57,920
developer wanted to have the react

981
00:44:54,950 --> 00:45:01,069
application<font color="#E5E5E5"> send a</font><font color="#CCCCCC"> Jaya Sykes a new</font>

982
00:44:57,920 --> 00:45:03,260
template code<font color="#E5E5E5"> into</font><font color="#CCCCCC"> the client and then</font>

983
00:45:01,070 --> 00:45:05,570
you know update some element with this

984
00:45:03,260 --> 00:45:08,600
<font color="#CCCCCC">JSX code and the developer was asking</font>

985
00:45:05,570 --> 00:45:10,550
well how do I translate<font color="#E5E5E5"> it into the Java</font>

986
00:45:08,600 --> 00:45:12,710
<font color="#E5E5E5">Script slash HTML and somebody</font>

987
00:45:10,550 --> 00:45:14,750
recommended well just use the<font color="#CCCCCC"> báb Babel</font>

988
00:45:12,710 --> 00:45:17,770
library and you know transpile it and

989
00:45:14,750 --> 00:45:20,300
then just do the eval on the output code

990
00:45:17,770 --> 00:45:22,460
<font color="#E5E5E5">yeah right well first you don't use</font>

991
00:45:20,300 --> 00:45:24,950
<font color="#E5E5E5">babel on the cert on the client</font><font color="#CCCCCC"> side and</font>

992
00:45:22,460 --> 00:45:29,060
on the browser<font color="#E5E5E5"> side because it's big and</font>

993
00:45:24,950 --> 00:45:31,279
heavy<font color="#E5E5E5"> and it's gonna use your processing</font>

994
00:45:29,060 --> 00:45:34,700
power<font color="#CCCCCC"> and the battery</font><font color="#E5E5E5"> if you're using</font>

995
00:45:31,280 --> 00:45:36,320
the mobile<font color="#E5E5E5"> device</font><font color="#CCCCCC"> so you know there's</font><font color="#E5E5E5"> no</font>

996
00:45:34,700 --> 00:45:38,990
<font color="#E5E5E5">there's no solution to this</font>

997
00:45:36,320 --> 00:45:41,630
<font color="#CCCCCC">unfortunately except for just it</font><font color="#E5E5E5"> should</font>

998
00:45:38,990 --> 00:45:44,089
<font color="#E5E5E5">be an architectural solution all right</font>

999
00:45:41,630 --> 00:45:45,830
I'm almost<font color="#E5E5E5"> out</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> time</font>

1000
00:45:44,090 --> 00:45:48,110
I'm gonna like breeze through the rest

1001
00:45:45,830 --> 00:45:49,700
the other<font color="#E5E5E5"> thing it would react</font><font color="#CCCCCC"> is when</font>

1002
00:45:48,110 --> 00:45:52,610
you are fetching data from<font color="#CCCCCC"> the server</font>

1003
00:45:49,700 --> 00:45:54,439
side<font color="#CCCCCC"> if you're using the pool you</font><font color="#E5E5E5"> will</font>

1004
00:45:52,610 --> 00:45:56,240
probably be<font color="#E5E5E5"> using fetch function the new</font>

1005
00:45:54,440 --> 00:45:59,270
<font color="#E5E5E5">JavaScript function by default it's</font>

1006
00:45:56,240 --> 00:46:02,509
using a get request<font color="#CCCCCC"> so look for that as</font>

1007
00:45:59,270 --> 00:46:04,610
<font color="#E5E5E5">well you know if you're actually</font><font color="#CCCCCC"> sending</font>

1008
00:46:02,510 --> 00:46:08,080
some<font color="#CCCCCC"> hose</font><font color="#E5E5E5"> data don't send it with just</font>

1009
00:46:04,610 --> 00:46:12,020
<font color="#E5E5E5">the regular fetch use the post set your</font>

1010
00:46:08,080 --> 00:46:14,180
credentials<font color="#E5E5E5"> and usually it by default it</font>

1011
00:46:12,020 --> 00:46:17,750
doesn't submit<font color="#E5E5E5"> any cookies so you should</font>

1012
00:46:14,180 --> 00:46:19,940
either set the cookies to same<font color="#E5E5E5"> origin</font><font color="#CCCCCC"> if</font>

1013
00:46:17,750 --> 00:46:22,430
you are<font color="#E5E5E5"> only doing it's the same you</font>

1014
00:46:19,940 --> 00:46:24,500
<font color="#E5E5E5">know in the same origin space if you</font><font color="#CCCCCC"> are</font>

1015
00:46:22,430 --> 00:46:26,750
using cross-origin resource sharing you

1016
00:46:24,500 --> 00:46:28,070
have to set the cookies to include then

1017
00:46:26,750 --> 00:46:31,070
they will be included<font color="#CCCCCC"> on</font><font color="#E5E5E5"> the cross</font>

1018
00:46:28,070 --> 00:46:33,230
origin request<font color="#E5E5E5"> as well but by</font><font color="#CCCCCC"> default</font>

1019
00:46:31,070 --> 00:46:36,260
<font color="#CCCCCC">it's unauthenticated right no cookies</font>

1020
00:46:33,230 --> 00:46:40,010
and<font color="#E5E5E5"> authenticated react applications</font>

1021
00:46:36,260 --> 00:46:41,780
<font color="#CCCCCC">oftentimes</font><font color="#E5E5E5"> use</font><font color="#CCCCCC"> GWT s which is a separate</font>

1022
00:46:40,010 --> 00:46:45,740
huge topic<font color="#CCCCCC"> their issue</font>

1023
00:46:41,780 --> 00:46:48,470
with<font color="#CCCCCC"> jwg</font><font color="#E5E5E5"> is kind of by themselves I'm</font>

1024
00:46:45,740 --> 00:46:49,850
not<font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> dive into that but for that</font>

1025
00:46:48,470 --> 00:46:51,500
<font color="#E5E5E5">you have to also include the</font>

1026
00:46:49,850 --> 00:46:52,910
authorization header<font color="#CCCCCC"> right</font><font color="#E5E5E5"> you're not</font>

1027
00:46:51,500 --> 00:46:54,620
using cookies but<font color="#CCCCCC"> you have to include</font>

1028
00:46:52,910 --> 00:46:56,330
the authorization header<font color="#CCCCCC"> make sure</font><font color="#E5E5E5"> your</font>

1029
00:46:54,620 --> 00:46:58,220
<font color="#CCCCCC">JWT is generated correctly</font><font color="#E5E5E5"> you're</font>

1030
00:46:56,330 --> 00:47:02,529
verifying them you're signing them blah

1031
00:46:58,220 --> 00:47:05,680
blah blah<font color="#E5E5E5"> all that stuff</font><font color="#CCCCCC"> so there's that</font>

1032
00:47:02,530 --> 00:47:10,550
and yeah<font color="#E5E5E5"> conclusions and recommendations</font>

1033
00:47:05,680 --> 00:47:14,000
<font color="#E5E5E5">so if you are reviewing react</font>

1034
00:47:10,550 --> 00:47:15,860
applications<font color="#E5E5E5"> things to look for is you</font>

1035
00:47:14,000 --> 00:47:19,600
know definitely search for<font color="#E5E5E5"> dangerousness</font>

1036
00:47:15,860 --> 00:47:22,430
<font color="#CCCCCC">at inner HTML look for eval</font><font color="#E5E5E5"> look for</font>

1037
00:47:19,600 --> 00:47:25,580
untrusted input in the you<font color="#E5E5E5"> are eyes in</font>

1038
00:47:22,430 --> 00:47:28,819
the href form action<font color="#E5E5E5"> all these HTML</font>

1039
00:47:25,580 --> 00:47:32,630
attributes that inject<font color="#E5E5E5"> links</font><font color="#CCCCCC"> or elles</font>

1040
00:47:28,820 --> 00:47:35,540
and look if the components are created

1041
00:47:32,630 --> 00:47:37,790
<font color="#E5E5E5">dynamically</font><font color="#CCCCCC"> and if any malicious input</font>

1042
00:47:35,540 --> 00:47:39,230
is sent you know to<font color="#E5E5E5"> those components</font><font color="#CCCCCC"> so</font>

1043
00:47:37,790 --> 00:47:42,860
those are kind of the<font color="#E5E5E5"> key things that</font>

1044
00:47:39,230 --> 00:47:45,590
you<font color="#E5E5E5"> can look for in react and if you are</font>

1045
00:47:42,860 --> 00:47:48,110
using<font color="#CCCCCC"> Yelland the</font><font color="#E5E5E5"> java splinting tool</font>

1046
00:47:45,590 --> 00:47:49,970
there are<font color="#CCCCCC"> a couple rules</font><font color="#E5E5E5"> for react</font><font color="#CCCCCC"> there</font>

1047
00:47:48,110 --> 00:47:52,910
there is<font color="#E5E5E5"> this library called yes</font><font color="#CCCCCC"> and</font>

1048
00:47:49,970 --> 00:47:57,410
<font color="#CCCCCC">plugin react</font><font color="#E5E5E5"> most of the rules in</font><font color="#CCCCCC"> that</font>

1049
00:47:52,910 --> 00:47:59,420
isn't<font color="#E5E5E5"> plug in our quality focused but</font>

1050
00:47:57,410 --> 00:48:01,940
there are<font color="#CCCCCC"> a couple of security</font><font color="#E5E5E5"> rules</font>

1051
00:47:59,420 --> 00:48:04,130
that<font color="#E5E5E5"> I highlighted here so for example</font>

1052
00:48:01,940 --> 00:48:06,260
it will help you find<font color="#E5E5E5"> the dangerously</font>

1053
00:48:04,130 --> 00:48:08,570
<font color="#E5E5E5">set inner HTML and then you still</font><font color="#CCCCCC"> need</font>

1054
00:48:06,260 --> 00:48:10,670
to do the<font color="#E5E5E5"> data flow manual right this is</font>

1055
00:48:08,570 --> 00:48:16,640
just<font color="#CCCCCC"> a linter</font><font color="#E5E5E5"> tool it's just a glorified</font>

1056
00:48:10,670 --> 00:48:19,580
grep basically<font color="#E5E5E5"> hmm and don't if you're</font>

1057
00:48:16,640 --> 00:48:21,859
using<font color="#E5E5E5"> SSR server-side rendering make</font>

1058
00:48:19,580 --> 00:48:24,440
sure you call the<font color="#CCCCCC"> serialized javascript</font>

1059
00:48:21,860 --> 00:48:27,430
library before<font color="#E5E5E5"> you stick it into your</font>

1060
00:48:24,440 --> 00:48:30,020
HTML<font color="#E5E5E5"> right like look for</font><font color="#CCCCCC"> that injection</font>

1061
00:48:27,430 --> 00:48:31,819
<font color="#E5E5E5">you know if you're</font><font color="#CCCCCC"> using fetch make sure</font>

1062
00:48:30,020 --> 00:48:34,250
the calls are authenticated<font color="#CCCCCC"> have the</font>

1063
00:48:31,820 --> 00:48:39,620
cookies or<font color="#CCCCCC"> headers or you know and</font><font color="#E5E5E5"> using</font>

1064
00:48:34,250 --> 00:48:41,930
the posts and react also<font color="#E5E5E5"> have type</font>

1065
00:48:39,620 --> 00:48:44,210
checking library that called prop types

1066
00:48:41,930 --> 00:48:46,730
<font color="#CCCCCC">if you are using</font><font color="#E5E5E5"> that or you recommend</font>

1067
00:48:44,210 --> 00:48:48,650
developers to<font color="#CCCCCC"> use that then you have</font>

1068
00:48:46,730 --> 00:48:50,990
type checking without using<font color="#CCCCCC"> typescript</font>

1069
00:48:48,650 --> 00:48:53,330
<font color="#E5E5E5">but you will show you specify the types</font>

1070
00:48:50,990 --> 00:48:54,680
of your variables and attributes<font color="#E5E5E5"> and</font>

1071
00:48:53,330 --> 00:48:58,460
yeah<font color="#E5E5E5"> use you</font>

1072
00:48:54,680 --> 00:49:01,609
<font color="#E5E5E5">like plugin tell your developers to</font><font color="#CCCCCC"> use</font>

1073
00:48:58,460 --> 00:49:04,450
it<font color="#E5E5E5"> that will be great and that's it</font>

1074
00:49:01,610 --> 00:49:04,450
any questions

1075
00:49:05,450 --> 00:49:12,319
[Applause]

