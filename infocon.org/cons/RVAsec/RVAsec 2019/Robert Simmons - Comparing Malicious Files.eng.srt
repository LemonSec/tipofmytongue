1
00:00:28,670 --> 00:00:33,350
well it actually means a duckbill

2
00:00:31,010 --> 00:00:36,290
platypus in Russian it's a really long

3
00:00:33,350 --> 00:00:37,400
story come ask me after my talk but

4
00:00:36,290 --> 00:00:41,269
today we're going to be talking about

5
00:00:37,400 --> 00:00:43,339
comparing malicious files and a little

6
00:00:41,270 --> 00:00:45,350
bit about Who I am I'm the former

7
00:00:43,340 --> 00:00:46,970
director of research at threat connect

8
00:00:45,350 --> 00:00:51,320
and now I'm an independent malware

9
00:00:46,970 --> 00:00:53,269
researcher kind of a ronin so to start

10
00:00:51,320 --> 00:00:55,280
off I want to go over some of the

11
00:00:53,270 --> 00:00:56,989
problem statements so when you're

12
00:00:55,280 --> 00:00:58,820
comparing malicious files you might have

13
00:00:56,989 --> 00:01:01,730
a couple of different problems that

14
00:00:58,820 --> 00:01:03,560
you're that you're that you run into one

15
00:01:01,730 --> 00:01:07,490
of the largest ones that I can identify

16
00:01:03,560 --> 00:01:11,479
is what we call the AV problem so many

17
00:01:07,490 --> 00:01:14,000
AV vendors use different nomenclature

18
00:01:11,479 --> 00:01:15,619
depending on you know whatever signature

19
00:01:14,000 --> 00:01:17,930
is the signature set they have they

20
00:01:15,619 --> 00:01:20,090
might have their own internal signature

21
00:01:17,930 --> 00:01:22,190
set their own internal name nomenclature

22
00:01:20,090 --> 00:01:25,850
for what the malware is that it's

23
00:01:22,190 --> 00:01:28,039
identified so these are not all

24
00:01:25,850 --> 00:01:29,630
overlapping and some of them are

25
00:01:28,040 --> 00:01:31,790
radically different some of them use the

26
00:01:29,630 --> 00:01:34,339
same same systems so that caused a

27
00:01:31,790 --> 00:01:36,170
problem you also have the marketing

28
00:01:34,340 --> 00:01:38,179
problem which is slightly related to

29
00:01:36,170 --> 00:01:40,039
this so marketing departments want to

30
00:01:38,179 --> 00:01:42,560
come up with you know a cute name for

31
00:01:40,039 --> 00:01:45,590
malware we see this a lot in

32
00:01:42,560 --> 00:01:48,740
vulnerabilities each vulnerability now

33
00:01:45,590 --> 00:01:50,990
has to have a name by the way in one of

34
00:01:48,740 --> 00:01:52,009
the one of the groups I'm in I thought

35
00:01:50,990 --> 00:01:54,500
maybe

36
00:01:52,009 --> 00:01:56,660
mightor should actually just roll the

37
00:01:54,500 --> 00:01:59,450
dice and come up with a two-syllable

38
00:01:56,660 --> 00:02:01,729
name that every CV is assigned to take

39
00:01:59,450 --> 00:02:04,849
away the ability to name things from

40
00:02:01,729 --> 00:02:06,770
companies but you know maybe that's a

41
00:02:04,849 --> 00:02:09,619
solution maybe not kind of like

42
00:02:06,770 --> 00:02:12,740
hurricane naming so what you end up with

43
00:02:09,619 --> 00:02:14,840
is rocket kittens and and bears and

44
00:02:12,740 --> 00:02:18,500
pandas and all this sort of stuff and

45
00:02:14,840 --> 00:02:21,340
then you get this massive group of names

46
00:02:18,500 --> 00:02:23,750
which are not necessarily the same thing

47
00:02:21,340 --> 00:02:25,130
but they're you know a Venn diagrams

48
00:02:23,750 --> 00:02:27,620
that are all the circles are just

49
00:02:25,130 --> 00:02:30,319
slightly off around one sort of thing

50
00:02:27,620 --> 00:02:33,700
and so you've got like a PT 28 pawn

51
00:02:30,319 --> 00:02:39,070
storm fancy bear said nits our team TG

52
00:02:33,700 --> 00:02:42,190
4127 group 41:27 strontium tag double

53
00:02:39,070 --> 00:02:45,250
zero seven zero zero Swallowtail

54
00:02:42,190 --> 00:02:47,260
iron twilight group 74 all these are

55
00:02:45,250 --> 00:02:50,050
approximate synonyms depending on which

56
00:02:47,260 --> 00:02:52,600
company you're buying your stuff from so

57
00:02:50,050 --> 00:02:56,710
the the marketing problem is a bit of a

58
00:02:52,600 --> 00:02:59,140
bit of a difficulty so then from the the

59
00:02:56,710 --> 00:03:02,080
the person who's actually comparing

60
00:02:59,140 --> 00:03:05,290
malicious files I've kind of identified

61
00:03:02,080 --> 00:03:09,400
two kind of general roles that they fit

62
00:03:05,290 --> 00:03:11,950
into so when you have all the when you

63
00:03:09,400 --> 00:03:14,410
have all these marketing systems one of

64
00:03:11,950 --> 00:03:18,369
the things that that Robert M Lee noted

65
00:03:14,410 --> 00:03:20,859
here is this is the outward facing piece

66
00:03:18,370 --> 00:03:23,680
of the information that you're getting

67
00:03:20,860 --> 00:03:26,170
so what's happening under the scenes is

68
00:03:23,680 --> 00:03:28,420
that you have a set of collection

69
00:03:26,170 --> 00:03:30,910
criteria where you're basically

70
00:03:28,420 --> 00:03:34,390
collecting data from various sources and

71
00:03:30,910 --> 00:03:37,060
then organizing it into groups and so

72
00:03:34,390 --> 00:03:39,160
you group it via different you know

73
00:03:37,060 --> 00:03:41,580
different features of the malware

74
00:03:39,160 --> 00:03:43,450
different static features of the malware

75
00:03:41,580 --> 00:03:45,880
attribution knowledge that you might

76
00:03:43,450 --> 00:03:48,040
know from either the infrastructure or

77
00:03:45,880 --> 00:03:52,269
the targeting the and stuff like this

78
00:03:48,040 --> 00:03:54,549
and when you reuse these names that

79
00:03:52,270 --> 00:03:56,770
other organizations are using as their

80
00:03:54,550 --> 00:04:00,070
outward facing names for stuff that is

81
00:03:56,770 --> 00:04:02,590
fully baked let's call it you're missing

82
00:04:00,070 --> 00:04:04,690
those basic collection criteria that

83
00:04:02,590 --> 00:04:05,980
they're using internally which are

84
00:04:04,690 --> 00:04:07,980
typically their intellectual property

85
00:04:05,980 --> 00:04:10,869
and they're not going to share those

86
00:04:07,980 --> 00:04:12,549
basic criteria with you and what I mean

87
00:04:10,870 --> 00:04:14,440
with those basic criteria is you've got

88
00:04:12,550 --> 00:04:17,410
just a plethora of data coming in from

89
00:04:14,440 --> 00:04:19,810
all of your collections and then you're

90
00:04:17,410 --> 00:04:21,580
basically bucketing it into buckets and

91
00:04:19,810 --> 00:04:23,350
these buckets don't have fancy names

92
00:04:21,579 --> 00:04:25,780
they'll have a numbering system or

93
00:04:23,350 --> 00:04:28,660
lettering system or combination of such

94
00:04:25,780 --> 00:04:30,400
and so once you've got a bucket that

95
00:04:28,660 --> 00:04:32,770
becomes you know a little bit more

96
00:04:30,400 --> 00:04:35,140
coherent and people you know your

97
00:04:32,770 --> 00:04:37,930
analysts start focusing on it that can

98
00:04:35,140 --> 00:04:39,580
be promoted into a more formal name and

99
00:04:37,930 --> 00:04:40,900
then marketing gets a hold of it and

100
00:04:39,580 --> 00:04:43,000
then that thing starts attacking

101
00:04:40,900 --> 00:04:45,849
important companies then it becomes a a

102
00:04:43,000 --> 00:04:48,640
cute name so the problem with using

103
00:04:45,850 --> 00:04:50,919
these is you don't know those those the

104
00:04:48,640 --> 00:04:53,169
criteria that are being used under the

105
00:04:50,919 --> 00:04:54,700
hood and so it's always good if you're

106
00:04:53,169 --> 00:04:56,580
going to do this sort of thing if you're

107
00:04:54,700 --> 00:04:58,889
going to compare malicious files

108
00:04:56,580 --> 00:05:01,530
just use your own system develop your

109
00:04:58,889 --> 00:05:03,210
own system of basic criteria collect and

110
00:05:01,530 --> 00:05:06,719
you know create your own bucketing

111
00:05:03,210 --> 00:05:09,000
system and focus on on groupings that

112
00:05:06,719 --> 00:05:12,509
come together and become more coherent

113
00:05:09,000 --> 00:05:15,870
the more data you have about them so

114
00:05:12,509 --> 00:05:18,770
there's two two general groups of people

115
00:05:15,870 --> 00:05:22,139
so you have the researcher like myself

116
00:05:18,770 --> 00:05:25,139
we have a little bit more of a relaxed

117
00:05:22,139 --> 00:05:28,259
aspect of what we're doing because we

118
00:05:25,139 --> 00:05:29,879
don't we don't have the the an emergency

119
00:05:28,259 --> 00:05:32,400
that's going on we're just looking for

120
00:05:29,879 --> 00:05:34,979
new things so one of the questions you

121
00:05:32,400 --> 00:05:37,650
want to ask is what is it I'm looking at

122
00:05:34,979 --> 00:05:39,568
what malware family is it can I relate

123
00:05:37,650 --> 00:05:41,789
this to other samples that have already

124
00:05:39,569 --> 00:05:44,219
been identified and you know basically

125
00:05:41,789 --> 00:05:45,690
is this something new is this something

126
00:05:44,219 --> 00:05:47,159
that I could publish about is this

127
00:05:45,690 --> 00:05:49,650
something that I could talk about that's

128
00:05:47,159 --> 00:05:51,629
that is something that is completely

129
00:05:49,650 --> 00:05:52,830
different or slightly different than

130
00:05:51,629 --> 00:05:56,279
things that have been discovered before

131
00:05:52,830 --> 00:05:58,830
or found before is it a new attack now

132
00:05:56,279 --> 00:06:01,680
the the things that you're going to do

133
00:05:58,830 --> 00:06:04,229
to identify and compare malicious files

134
00:06:01,680 --> 00:06:06,330
are very much the same but the other

135
00:06:04,229 --> 00:06:08,310
person is the incident responder so an

136
00:06:06,330 --> 00:06:10,258
incident responder has is under the gun

137
00:06:08,310 --> 00:06:12,330
basically you have an incident you have

138
00:06:10,259 --> 00:06:14,039
to figure out exactly what this thing is

139
00:06:12,330 --> 00:06:16,948
that was on that workstation that

140
00:06:14,039 --> 00:06:18,810
network that router you know in this

141
00:06:16,949 --> 00:06:22,080
organization and you have to do it as

142
00:06:18,810 --> 00:06:24,300
quickly as possible so identifying other

143
00:06:22,080 --> 00:06:26,779
samples that are related to it is not

144
00:06:24,300 --> 00:06:30,300
necessarily for the same reason that

145
00:06:26,779 --> 00:06:32,940
that a researcher would but what you

146
00:06:30,300 --> 00:06:35,580
want to do is find other research about

147
00:06:32,940 --> 00:06:37,770
this particular unknown and then

148
00:06:35,580 --> 00:06:39,659
basically short you know take a short

149
00:06:37,770 --> 00:06:41,580
cut in your research so that you can

150
00:06:39,659 --> 00:06:43,710
figure out exactly what it is as quickly

151
00:06:41,580 --> 00:06:46,620
as possible so if you have an unknown

152
00:06:43,710 --> 00:06:48,599
there's you know it might be a waste of

153
00:06:46,620 --> 00:06:50,849
time to go and do a full reverse

154
00:06:48,599 --> 00:06:54,389
engineering on it if you can identify

155
00:06:50,849 --> 00:06:56,370
other related files that may have been

156
00:06:54,389 --> 00:06:58,229
already reverse engineered by someone

157
00:06:56,370 --> 00:06:59,969
else or have been researched by a

158
00:06:58,229 --> 00:07:01,740
different organization so finding those

159
00:06:59,969 --> 00:07:03,629
and identifying something as quickly as

160
00:07:01,740 --> 00:07:08,279
possible is more important for an it's

161
00:07:03,629 --> 00:07:09,139
in a responder so as far as solutions to

162
00:07:08,279 --> 00:07:11,330
the the two

163
00:07:09,139 --> 00:07:13,699
different problems the two overarching

164
00:07:11,330 --> 00:07:16,389
problems how to identify a file and how

165
00:07:13,699 --> 00:07:19,039
to find more files that are like it so

166
00:07:16,389 --> 00:07:20,449
sample identification is basically

167
00:07:19,039 --> 00:07:22,188
determining the Malheur family

168
00:07:20,449 --> 00:07:24,620
membership of the sample so I say

169
00:07:22,189 --> 00:07:27,830
malware family here there's a couple

170
00:07:24,620 --> 00:07:30,229
different sort of over overlapping

171
00:07:27,830 --> 00:07:32,599
definitions of malware family you could

172
00:07:30,229 --> 00:07:34,188
think of it as some people would think

173
00:07:32,599 --> 00:07:36,378
of a malware family as something being

174
00:07:34,189 --> 00:07:37,819
used by a particular threat actor some

175
00:07:36,379 --> 00:07:40,129
people might think of a malware family

176
00:07:37,819 --> 00:07:42,169
as being just the structural you know

177
00:07:40,129 --> 00:07:44,719
the static values of the file static

178
00:07:42,169 --> 00:07:48,169
features of the file that you know tie

179
00:07:44,719 --> 00:07:51,680
together a particular build of software

180
00:07:48,169 --> 00:07:53,900
for instance and some of it just ends up

181
00:07:51,680 --> 00:07:55,819
being a TTP or a collection of

182
00:07:53,900 --> 00:07:59,029
techniques and tactics and how that

183
00:07:55,819 --> 00:08:02,839
particular file is used to attack

184
00:07:59,029 --> 00:08:06,169
someone so the other piece of the the

185
00:08:02,839 --> 00:08:08,210
other solution is locating Associated

186
00:08:06,169 --> 00:08:09,620
samples and finding more files that are

187
00:08:08,210 --> 00:08:12,620
related to the file that you're looking

188
00:08:09,620 --> 00:08:14,569
at so what you need here is a body of

189
00:08:12,620 --> 00:08:16,550
data other files

190
00:08:14,569 --> 00:08:18,139
you know collected collected files from

191
00:08:16,550 --> 00:08:21,500
various places either your own

192
00:08:18,139 --> 00:08:23,659
repository or public repositories or

193
00:08:21,500 --> 00:08:25,610
paid repositories and you take the file

194
00:08:23,659 --> 00:08:28,789
that you're looking at gather some

195
00:08:25,610 --> 00:08:32,029
features or behavior or data about that

196
00:08:28,789 --> 00:08:34,279
and then compare those to your dataset

197
00:08:32,029 --> 00:08:36,229
and see if it matches up with any known

198
00:08:34,279 --> 00:08:38,570
files and then you can pivot from that

199
00:08:36,229 --> 00:08:40,550
to research that has been done on those

200
00:08:38,570 --> 00:08:44,690
particular files or you might find a new

201
00:08:40,549 --> 00:08:46,279
nexus among files so the first

202
00:08:44,690 --> 00:08:48,949
identification method that I want to

203
00:08:46,279 --> 00:08:51,850
talk about is based on antivirus scanner

204
00:08:48,949 --> 00:08:54,790
results and so this is going to be the

205
00:08:51,850 --> 00:08:58,100
the the weakest data set I would say

206
00:08:54,790 --> 00:09:00,140
you're relying on a lot of different a V

207
00:08:58,100 --> 00:09:02,269
vendors and what they think something is

208
00:09:00,140 --> 00:09:05,300
at a particular moment in time the

209
00:09:02,269 --> 00:09:07,850
signatures change if you look at the

210
00:09:05,300 --> 00:09:09,949
detection overall of a particular file

211
00:09:07,850 --> 00:09:11,570
from all the AV vendors some of them

212
00:09:09,949 --> 00:09:13,420
will change the name of the signature

213
00:09:11,570 --> 00:09:15,380
that matches some of them will stop

214
00:09:13,420 --> 00:09:18,620
detecting something some of them will

215
00:09:15,380 --> 00:09:20,899
start detecting something so it's a bit

216
00:09:18,620 --> 00:09:22,530
it's a bit of a messy data set but I'm

217
00:09:20,899 --> 00:09:24,450
going to try to give you a

218
00:09:22,530 --> 00:09:27,360
a better way to look at it in a

219
00:09:24,450 --> 00:09:29,610
methodology to look at it and a couple

220
00:09:27,360 --> 00:09:31,680
people asked me if I have they'd seen my

221
00:09:29,610 --> 00:09:34,200
talk at besides charm so there's

222
00:09:31,680 --> 00:09:35,969
actually a new new piece of software

223
00:09:34,200 --> 00:09:38,970
that I'm going to show you in here which

224
00:09:35,970 --> 00:09:41,730
actually automates all of this and it's

225
00:09:38,970 --> 00:09:44,790
open source so one of the things you

226
00:09:41,730 --> 00:09:48,000
need to look at with with with using

227
00:09:44,790 --> 00:09:50,849
this data is shared engines so a number

228
00:09:48,000 --> 00:09:53,550
of Av companies have shared engines and

229
00:09:50,850 --> 00:09:55,610
you'll see this where the the result and

230
00:09:53,550 --> 00:10:00,150
this is actually just a generic generic

231
00:09:55,610 --> 00:10:01,740
trojan but if you look at the the digits

232
00:10:00,150 --> 00:10:05,010
at the end the four oh four three seven

233
00:10:01,740 --> 00:10:06,840
four eight seven compared to the a/v

234
00:10:05,010 --> 00:10:09,390
scanner results from all of the other

235
00:10:06,840 --> 00:10:12,690
vendors in the data set it's fairly

236
00:10:09,390 --> 00:10:15,210
unique so you'll see these repeated

237
00:10:12,690 --> 00:10:17,790
patterns across AV vendors that share

238
00:10:15,210 --> 00:10:20,760
engines and so if you think about it if

239
00:10:17,790 --> 00:10:23,130
you're ranking what you think a

240
00:10:20,760 --> 00:10:25,710
particular file is by what the AV

241
00:10:23,130 --> 00:10:28,980
vendors think it is you shouldn't count

242
00:10:25,710 --> 00:10:31,110
all of these shared engines as multiple

243
00:10:28,980 --> 00:10:33,210
you know points towards it being a

244
00:10:31,110 --> 00:10:34,890
particular thing you should lump them in

245
00:10:33,210 --> 00:10:39,030
and correct for that when you're doing

246
00:10:34,890 --> 00:10:41,760
your your analysis so there's another

247
00:10:39,030 --> 00:10:44,189
piece here and I'm I'm not sure that

248
00:10:41,760 --> 00:10:48,390
there that there isn't just to kind of

249
00:10:44,190 --> 00:10:50,130
competing you know business reasons to

250
00:10:48,390 --> 00:10:52,170
go in different directions here so

251
00:10:50,130 --> 00:10:54,750
you've got generic beer a generic

252
00:10:52,170 --> 00:10:56,610
signature which covers lots and lots and

253
00:10:54,750 --> 00:10:59,940
lots of malware but it comes back as

254
00:10:56,610 --> 00:11:03,240
saying generic or or Zeus or something

255
00:10:59,940 --> 00:11:05,040
like this and the goal of the companies

256
00:11:03,240 --> 00:11:07,260
that are producing this type of

257
00:11:05,040 --> 00:11:09,300
signature would be to just block the

258
00:11:07,260 --> 00:11:13,290
malware right so if it doesn't have a

259
00:11:09,300 --> 00:11:15,390
good granular name in the AV results

260
00:11:13,290 --> 00:11:16,890
that might not be the goal of that

261
00:11:15,390 --> 00:11:20,100
company the goal that company might be

262
00:11:16,890 --> 00:11:25,199
to block it completely but then you have

263
00:11:20,100 --> 00:11:26,940
specific very specific you know AV

264
00:11:25,200 --> 00:11:30,870
results so I have my favorite beer

265
00:11:26,940 --> 00:11:34,410
company DC Brau and so the very specific

266
00:11:30,870 --> 00:11:36,270
results might be might be due to those

267
00:11:34,410 --> 00:11:38,160
particular companies having a draw

268
00:11:36,270 --> 00:11:41,329
or a business reason to have very

269
00:11:38,160 --> 00:11:43,649
granular results and so those two

270
00:11:41,330 --> 00:11:46,080
development methodologies for signatures

271
00:11:43,649 --> 00:11:47,520
may have different costs involved and

272
00:11:46,080 --> 00:11:49,980
there might be different draws for the

273
00:11:47,520 --> 00:11:52,319
do to their customer base so you end up

274
00:11:49,980 --> 00:11:56,070
with a variety of different AV vendors

275
00:11:52,320 --> 00:11:57,300
which have different results some of the

276
00:11:56,070 --> 00:11:59,670
vendors I want to highlight that have

277
00:11:57,300 --> 00:12:00,750
very usable results Microsoft if it can

278
00:11:59,670 --> 00:12:03,240
detect it at all

279
00:12:00,750 --> 00:12:06,149
has a very very specific name for most

280
00:12:03,240 --> 00:12:08,399
things that it detects ESET Kaspersky

281
00:12:06,149 --> 00:12:10,529
Sophos these are other good ones that

282
00:12:08,399 --> 00:12:12,959
have fairly specific granular results

283
00:12:10,529 --> 00:12:14,730
and I've listed a couple of the the

284
00:12:12,959 --> 00:12:16,709
insect you know the the malware

285
00:12:14,730 --> 00:12:18,600
encyclopedias where you can take the

286
00:12:16,709 --> 00:12:20,910
result and look up what they think it is

287
00:12:18,600 --> 00:12:24,240
and get a little bit more context behind

288
00:12:20,910 --> 00:12:26,880
it so first I want to show you how to

289
00:12:24,240 --> 00:12:29,100
boil down some of the results so this is

290
00:12:26,880 --> 00:12:32,520
a sample you could follow along with on

291
00:12:29,100 --> 00:12:34,680
your own later and what you want to do

292
00:12:32,520 --> 00:12:36,720
first is remove things that are clearly

293
00:12:34,680 --> 00:12:38,729
generic results it'll be obvious you

294
00:12:36,720 --> 00:12:41,250
know generic or Jen and stuff like that

295
00:12:38,730 --> 00:12:44,250
but you also have some of the sneaky

296
00:12:41,250 --> 00:12:47,970
generics there are you know Zeus Zbot

297
00:12:44,250 --> 00:12:50,399
Zusi a few other a few other groups of

298
00:12:47,970 --> 00:12:52,170
names which are no longer really that

299
00:12:50,399 --> 00:12:54,000
particular malware family they've just

300
00:12:52,170 --> 00:12:57,630
grown into something that's much more

301
00:12:54,000 --> 00:12:59,850
generic and so are less valuable for

302
00:12:57,630 --> 00:13:02,010
identification purposes so you want to

303
00:12:59,850 --> 00:13:06,480
remove the clearly generics and remove

304
00:13:02,010 --> 00:13:08,250
the sneaky generics so here's a data set

305
00:13:06,480 --> 00:13:11,070
where I've already removed all of the

306
00:13:08,250 --> 00:13:15,540
sneaky results and all of the generics

307
00:13:11,070 --> 00:13:18,600
and you'll see here these are all one a

308
00:13:15,540 --> 00:13:20,790
particular shared engine and then down

309
00:13:18,600 --> 00:13:22,589
here we've got another shared engine and

310
00:13:20,790 --> 00:13:24,569
I'll go back to this one I know there's

311
00:13:22,589 --> 00:13:27,720
that B in parenthesis there but I'm

312
00:13:24,570 --> 00:13:30,510
gonna count that as the same engine it's

313
00:13:27,720 --> 00:13:32,550
just a little bit of you know magic

314
00:13:30,510 --> 00:13:35,399
sprinkle that any soft has put on their

315
00:13:32,550 --> 00:13:37,170
particular a V result but it's pretty

316
00:13:35,399 --> 00:13:40,860
much the same engine so I would count

317
00:13:37,170 --> 00:13:42,449
them all as one so after boiling down

318
00:13:40,860 --> 00:13:46,020
the results and removing all the other

319
00:13:42,450 --> 00:13:47,520
pieces you end up with these two so

320
00:13:46,020 --> 00:13:49,560
these two if you look at it a little bit

321
00:13:47,520 --> 00:13:51,360
closer those are approximately

322
00:13:49,560 --> 00:13:55,319
same so you know maybe you give it a

323
00:13:51,360 --> 00:13:57,540
half-point together or maybe one and a

324
00:13:55,320 --> 00:13:59,400
half points and by the way this is well

325
00:13:57,540 --> 00:14:05,310
this is a little bit of a you know

326
00:13:59,400 --> 00:14:07,770
plastic procedure here and then you have

327
00:14:05,310 --> 00:14:10,170
three different engines that have is bar

328
00:14:07,770 --> 00:14:12,540
so we would weight this as a little bit

329
00:14:10,170 --> 00:14:16,199
more is bar a little bit less semi but

330
00:14:12,540 --> 00:14:17,790
semi in his barb so I know you're asking

331
00:14:16,200 --> 00:14:22,260
me you're thinking yourself like how can

332
00:14:17,790 --> 00:14:23,670
I actually operationalize this so this

333
00:14:22,260 --> 00:14:26,400
is the software that that I was

334
00:14:23,670 --> 00:14:29,279
introduced to recently so this is a open

335
00:14:26,400 --> 00:14:31,020
source project called AV class I have

336
00:14:29,279 --> 00:14:33,630
actually written my own algorithm in

337
00:14:31,020 --> 00:14:37,260
Python for doing this whole similar

338
00:14:33,630 --> 00:14:38,610
thing but just as as things go this is

339
00:14:37,260 --> 00:14:41,040
much better than the stuff that I've

340
00:14:38,610 --> 00:14:42,480
written so I'm gonna kind of look at the

341
00:14:41,040 --> 00:14:44,520
look at the source code that they've got

342
00:14:42,480 --> 00:14:47,370
and kind of add any knowledge that I've

343
00:14:44,520 --> 00:14:50,100
got to it and you know deprecated my

344
00:14:47,370 --> 00:14:52,110
stuff so what it can do is give you

345
00:14:50,100 --> 00:14:53,940
family rankings so like I said in that

346
00:14:52,110 --> 00:14:55,500
previous slide if you go back here the

347
00:14:53,940 --> 00:14:58,670
family ranking would be a little bit

348
00:14:55,500 --> 00:15:01,650
more is bar a little bit less semi and

349
00:14:58,670 --> 00:15:04,469
then it has pub classifications so if

350
00:15:01,650 --> 00:15:06,060
anyone's familiar with PU P if you're in

351
00:15:04,470 --> 00:15:08,520
like malware analysis and stuff like

352
00:15:06,060 --> 00:15:10,969
that it's that sort of gray area it's

353
00:15:08,520 --> 00:15:14,970
called potentially unwanted programs

354
00:15:10,970 --> 00:15:16,860
these are in Mike in my in my opinion

355
00:15:14,970 --> 00:15:19,950
it's all malware there's it's all black

356
00:15:16,860 --> 00:15:23,100
and white there is no pup but pup is

357
00:15:19,950 --> 00:15:25,530
more of a legal category let's say

358
00:15:23,100 --> 00:15:28,530
because the the malware author in this

359
00:15:25,530 --> 00:15:31,980
case actually has a company and you know

360
00:15:28,530 --> 00:15:33,990
has a presence where they've convinced

361
00:15:31,980 --> 00:15:36,810
some people that they have some value

362
00:15:33,990 --> 00:15:38,700
and so you know this would be this would

363
00:15:36,810 --> 00:15:42,689
be like a toolbar that you get installed

364
00:15:38,700 --> 00:15:45,300
that kind of is adware or is spyware the

365
00:15:42,690 --> 00:15:46,950
sort of thing where it's in that sort of

366
00:15:45,300 --> 00:15:49,079
legal gray area where it's not

367
00:15:46,950 --> 00:15:52,410
completely malware not stealing your

368
00:15:49,080 --> 00:15:54,390
bank account information but is is a way

369
00:15:52,410 --> 00:15:57,270
for for you to lose privacy and this

370
00:15:54,390 --> 00:15:59,130
sort of thing again this has ground

371
00:15:57,270 --> 00:16:02,439
truth evaluation so you can create a

372
00:15:59,130 --> 00:16:05,320
little table if you know in advance that

373
00:16:02,440 --> 00:16:06,820
a particular file is belongs to a

374
00:16:05,320 --> 00:16:08,710
malware family

375
00:16:06,820 --> 00:16:10,720
you can preload that into a

376
00:16:08,710 --> 00:16:13,690
configuration file and then you can

377
00:16:10,720 --> 00:16:15,850
compare your ground truth with what the

378
00:16:13,690 --> 00:16:18,760
what a v-class comes up with after

379
00:16:15,850 --> 00:16:20,920
boiling down a view results

380
00:16:18,760 --> 00:16:23,010
it also has generic token detection

381
00:16:20,920 --> 00:16:25,420
which is what I mentioned earlier about

382
00:16:23,010 --> 00:16:27,910
removing the generics and removing the

383
00:16:25,420 --> 00:16:30,099
sneaky generics and then it also has a

384
00:16:27,910 --> 00:16:34,480
leus detection so you can take the

385
00:16:30,100 --> 00:16:36,730
different a V a V company names and you

386
00:16:34,480 --> 00:16:39,700
can create synonyms for them so you can

387
00:16:36,730 --> 00:16:44,710
create aliases so take a look at that

388
00:16:39,700 --> 00:16:46,360
it's basically a you know a full a full

389
00:16:44,710 --> 00:16:49,660
product for doing exactly what I've been

390
00:16:46,360 --> 00:16:52,630
talking about you know up until now so

391
00:16:49,660 --> 00:16:56,920
another identification method is mitre

392
00:16:52,630 --> 00:16:59,290
attack and so mitre attack has it's

393
00:16:56,920 --> 00:17:02,920
basically a set of tactics and

394
00:16:59,290 --> 00:17:05,500
techniques and it's a data set where

395
00:17:02,920 --> 00:17:07,449
you've got a detection method usually

396
00:17:05,500 --> 00:17:10,119
there's a way to detect the thing that

397
00:17:07,449 --> 00:17:12,270
or that tactic or technique usually

398
00:17:10,119 --> 00:17:17,349
there's a sick there's a signature in

399
00:17:12,270 --> 00:17:20,369
pseudocode often and so this is an

400
00:17:17,349 --> 00:17:22,839
excellent first step but for for malware

401
00:17:20,369 --> 00:17:25,179
classification it's not really ready and

402
00:17:22,839 --> 00:17:26,980
I actually spoke with some of the people

403
00:17:25,180 --> 00:17:29,560
that are behind attack after the last

404
00:17:26,980 --> 00:17:33,910
talk and there's actually a better

405
00:17:29,560 --> 00:17:38,770
option so attack is good but there is

406
00:17:33,910 --> 00:17:41,350
the there was the the ma EC or Mike

407
00:17:38,770 --> 00:17:44,920
which is malware behavior and so there's

408
00:17:41,350 --> 00:17:46,540
a new rebooting or a new refresh of Mike

409
00:17:44,920 --> 00:17:48,580
which I'll go over in just a moment

410
00:17:46,540 --> 00:17:50,830
which is more appropriate for malware

411
00:17:48,580 --> 00:17:54,310
classification specifically so if you

412
00:17:50,830 --> 00:17:57,730
think about it attack is more adversary

413
00:17:54,310 --> 00:18:01,840
behavior and then Mike is mike is more

414
00:17:57,730 --> 00:18:04,030
for behavior of a malware file so

415
00:18:01,840 --> 00:18:06,129
automated behavior as opposed to

416
00:18:04,030 --> 00:18:09,580
adversary behavior pivoting around the

417
00:18:06,130 --> 00:18:11,290
network and doing their bad stuff so one

418
00:18:09,580 --> 00:18:14,530
of the complaints that I had with attack

419
00:18:11,290 --> 00:18:16,389
is the lack of granularity now it's not

420
00:18:14,530 --> 00:18:18,580
going to be this way for

421
00:18:16,390 --> 00:18:20,140
as long as people keep contributing to

422
00:18:18,580 --> 00:18:21,760
it but it doesn't have a lot of

423
00:18:20,140 --> 00:18:26,530
granularity so what you're looking at

424
00:18:21,760 --> 00:18:28,510
here is a malware malware campaign

425
00:18:26,530 --> 00:18:30,399
called alpha blend that's the blog post

426
00:18:28,510 --> 00:18:32,560
I wrote about it and what you're looking

427
00:18:30,400 --> 00:18:34,900
at here is called a structured exception

428
00:18:32,560 --> 00:18:40,409
handler so a structured exception

429
00:18:34,900 --> 00:18:42,940
handler is who here programs in Python

430
00:18:40,410 --> 00:18:44,500
alright so this is pretty easy for me to

431
00:18:42,940 --> 00:18:46,030
convey for the people that write Python

432
00:18:44,500 --> 00:18:47,590
or if you're already a programmer you

433
00:18:46,030 --> 00:18:50,770
know an exception is an exception

434
00:18:47,590 --> 00:18:53,199
handler but in Python you have a try and

435
00:18:50,770 --> 00:18:55,060
accept statement so if you try something

436
00:18:53,200 --> 00:18:57,310
and then it causes an error and then you

437
00:18:55,060 --> 00:18:59,800
catch the error in the except that's the

438
00:18:57,310 --> 00:19:02,560
exception handler and then this is where

439
00:18:59,800 --> 00:19:04,480
the adversary puts their code in that

440
00:19:02,560 --> 00:19:07,149
exception handler and what they do is

441
00:19:04,480 --> 00:19:08,800
they instead of you know catching an

442
00:19:07,150 --> 00:19:11,200
exception that they think might happen

443
00:19:08,800 --> 00:19:13,480
they do something that forces an

444
00:19:11,200 --> 00:19:16,960
exception to happen and then it passes

445
00:19:13,480 --> 00:19:19,060
execution away from where where where

446
00:19:16,960 --> 00:19:21,130
that exception happens over to the

447
00:19:19,060 --> 00:19:22,629
structured exception handler so it it

448
00:19:21,130 --> 00:19:24,430
makes it slightly more difficult for

449
00:19:22,630 --> 00:19:27,910
someone to reverse-engineer it this is

450
00:19:24,430 --> 00:19:29,620
an anti debugging technique and so even

451
00:19:27,910 --> 00:19:32,230
though the structured exception handler

452
00:19:29,620 --> 00:19:34,419
can happen in in many different ways and

453
00:19:32,230 --> 00:19:36,970
then the the the the malicious code

454
00:19:34,420 --> 00:19:39,340
might be very different there's kind of

455
00:19:36,970 --> 00:19:41,350
two signposts that you have with

456
00:19:39,340 --> 00:19:44,139
structured exception handlers up at the

457
00:19:41,350 --> 00:19:45,699
top you have sorry up at the top you

458
00:19:44,140 --> 00:19:49,330
have the structured exception handler

459
00:19:45,700 --> 00:19:52,330
save and so that is the push d-word to

460
00:19:49,330 --> 00:19:54,429
pointer at the top which is in red and

461
00:19:52,330 --> 00:19:56,860
then you have a seh

462
00:19:54,430 --> 00:19:59,500
init which is down at the bottom which

463
00:19:56,860 --> 00:20:04,030
is the move D word pointer from eat from

464
00:19:59,500 --> 00:20:08,020
EAX and what I found was that this the

465
00:20:04,030 --> 00:20:09,730
EAX is slightly different than you know

466
00:20:08,020 --> 00:20:11,500
the signatures that I was able to find

467
00:20:09,730 --> 00:20:12,910
online so I did a little search when I

468
00:20:11,500 --> 00:20:17,050
found when I was researching this

469
00:20:12,910 --> 00:20:19,780
malware and I found a yard signature set

470
00:20:17,050 --> 00:20:22,450
which actually detects structured

471
00:20:19,780 --> 00:20:26,379
exception handlers of this type however

472
00:20:22,450 --> 00:20:29,950
that yarra signature was looking for a

473
00:20:26,380 --> 00:20:32,049
different seh in it and so right

474
00:20:29,950 --> 00:20:35,230
now this is the second seh a knit

475
00:20:32,049 --> 00:20:37,360
pattern that I've found but one of the

476
00:20:35,230 --> 00:20:40,179
one of my goals coming up is to figure

477
00:20:37,360 --> 00:20:43,019
out are there other ways to do a CH in

478
00:20:40,179 --> 00:20:46,720
it and then from that se H in it

479
00:20:43,019 --> 00:20:49,149
differentiation to see to differentiate

480
00:20:46,720 --> 00:20:51,970
among inside of our families or among

481
00:20:49,149 --> 00:20:54,879
our families what seh in it they

482
00:20:51,970 --> 00:20:57,250
particularly use so it's just a way to

483
00:20:54,880 --> 00:21:03,159
get even more granular differentiation

484
00:20:57,250 --> 00:21:06,159
among files so this is a this is a you

485
00:21:03,159 --> 00:21:08,559
know next iteration of the Y our rule

486
00:21:06,159 --> 00:21:11,080
that I wrote the original author was

487
00:21:08,559 --> 00:21:13,990
knacks and Eze and so these are the two

488
00:21:11,080 --> 00:21:17,678
strings now that match up with so this

489
00:21:13,990 --> 00:21:22,059
is this is actually the hex of that se H

490
00:21:17,679 --> 00:21:25,630
in it and so if you look at the top I've

491
00:21:22,059 --> 00:21:29,289
actually added a few pieces of attacks

492
00:21:25,630 --> 00:21:33,159
so I've started putting in tags in my

493
00:21:29,289 --> 00:21:36,850
our rules that line up with the tactics

494
00:21:33,159 --> 00:21:38,409
and techniques from attack and then

495
00:21:36,850 --> 00:21:40,779
there's another concept called sub

496
00:21:38,409 --> 00:21:43,269
techniques which attack is is working on

497
00:21:40,779 --> 00:21:47,200
deploying which are making the

498
00:21:43,269 --> 00:21:48,580
techniques even more granular so I hope

499
00:21:47,200 --> 00:21:52,510
that everyone in the room if you have

500
00:21:48,580 --> 00:21:55,480
time and resources please contribute sub

501
00:21:52,510 --> 00:21:56,860
techniques to attack this is the this is

502
00:21:55,480 --> 00:21:59,679
the link that you should follow if you

503
00:21:56,860 --> 00:22:04,080
want to contribute more more things to

504
00:21:59,679 --> 00:22:06,940
attack and so let me give you an idea of

505
00:22:04,080 --> 00:22:08,799
you know things that you could that you

506
00:22:06,940 --> 00:22:11,230
could contribute so this is an example

507
00:22:08,799 --> 00:22:14,590
of something that I found so second

508
00:22:11,230 --> 00:22:16,720
factor interception is T 1 1 1 1 and so

509
00:22:14,590 --> 00:22:20,199
second factor interception can come in

510
00:22:16,720 --> 00:22:23,590
many different forms right and so these

511
00:22:20,200 --> 00:22:25,740
are sub techniques that I have you know

512
00:22:23,590 --> 00:22:29,490
I've got a set of documents ready to

513
00:22:25,740 --> 00:22:31,960
submit to to attack about these so

514
00:22:29,490 --> 00:22:34,389
second factor interception can happen as

515
00:22:31,960 --> 00:22:36,809
SMS interception on the wire if you're

516
00:22:34,389 --> 00:22:40,870
familiar with Psalm which is the Russian

517
00:22:36,809 --> 00:22:43,790
sort of Universal data collection system

518
00:22:40,870 --> 00:22:47,209
there have been examples of

519
00:22:43,790 --> 00:22:50,810
people who have used sms-based second

520
00:22:47,210 --> 00:22:53,060
factor going over Russian networks and

521
00:22:50,810 --> 00:22:55,970
then SMS is intercepted and then used

522
00:22:53,060 --> 00:22:58,010
immediately to log into their you know

523
00:22:55,970 --> 00:23:00,680
whatever they're logging into you can

524
00:22:58,010 --> 00:23:02,750
also have SMS interception by number

525
00:23:00,680 --> 00:23:05,240
porting so this is if you have your

526
00:23:02,750 --> 00:23:07,880
phone number gets ported to another SIM

527
00:23:05,240 --> 00:23:10,190
card by an adversary and then they

528
00:23:07,880 --> 00:23:13,670
collect your SMS and then log into your

529
00:23:10,190 --> 00:23:16,340
stuff you have the more older older

530
00:23:13,670 --> 00:23:18,920
forms of SMS second factor interception

531
00:23:16,340 --> 00:23:21,889
code interception via phishing page so

532
00:23:18,920 --> 00:23:26,120
these are Nile fish and charming kitten

533
00:23:21,890 --> 00:23:27,890
commonly used these if you look at some

534
00:23:26,120 --> 00:23:30,919
of the research that that's been done on

535
00:23:27,890 --> 00:23:34,460
them and then the sort of least common

536
00:23:30,920 --> 00:23:36,650
denominator is key logger so there's a

537
00:23:34,460 --> 00:23:38,300
lot of green space in attack for you to

538
00:23:36,650 --> 00:23:42,380
contribute and you know make it more

539
00:23:38,300 --> 00:23:44,030
granular and you know make it better so

540
00:23:42,380 --> 00:23:45,950
another thing I was - I was talking

541
00:23:44,030 --> 00:23:48,860
about earlier is the better Mike so Mike

542
00:23:45,950 --> 00:23:50,630
has been rebooted and for for malware

543
00:23:48,860 --> 00:23:53,590
behavior this is much more appropriate

544
00:23:50,630 --> 00:23:57,860
so this is actually where a lot of my

545
00:23:53,590 --> 00:24:00,860
you know research and and data is going

546
00:23:57,860 --> 00:24:03,110
to be steered towards now so the new

547
00:24:00,860 --> 00:24:05,030
Mike this is the link for it down at the

548
00:24:03,110 --> 00:24:08,149
bottom they have a malware behaviors

549
00:24:05,030 --> 00:24:10,700
taxonomy set and so these are the basic

550
00:24:08,150 --> 00:24:13,700
components of the taxonomy set and as

551
00:24:10,700 --> 00:24:15,740
you noticed earlier the SE h and anti

552
00:24:13,700 --> 00:24:18,170
debugging you know that's something

553
00:24:15,740 --> 00:24:20,570
that's actually captured here in the

554
00:24:18,170 --> 00:24:23,750
mike malware behaviors rather than then

555
00:24:20,570 --> 00:24:26,330
attack so you've got anti behavioral

556
00:24:23,750 --> 00:24:27,860
analysis anti static analysis and that's

557
00:24:26,330 --> 00:24:29,990
actually where that structured exception

558
00:24:27,860 --> 00:24:32,570
handling

559
00:24:29,990 --> 00:24:34,940
you know identification fits and you

560
00:24:32,570 --> 00:24:36,980
know please go look at this and again if

561
00:24:34,940 --> 00:24:38,600
you want to if you're more interested in

562
00:24:36,980 --> 00:24:41,510
the malware aspects and things please

563
00:24:38,600 --> 00:24:43,550
contribute to it so another

564
00:24:41,510 --> 00:24:48,260
identification method is called mel

565
00:24:43,550 --> 00:24:50,120
pedia and so mal pedia is a site that

566
00:24:48,260 --> 00:24:52,520
has many many many many many

567
00:24:50,120 --> 00:24:54,949
contributors at the moment it is a

568
00:24:52,520 --> 00:24:57,080
closed system it's an invite-only closed

569
00:24:54,950 --> 00:24:58,820
site but

570
00:24:57,080 --> 00:25:02,540
the stuff that is exposed on the outside

571
00:24:58,820 --> 00:25:04,070
is the ability to look up Yarra

572
00:25:02,540 --> 00:25:08,360
signatures that you can use to identify

573
00:25:04,070 --> 00:25:11,389
different Mallard families and you

574
00:25:08,360 --> 00:25:14,990
basically take a file and then a plot

575
00:25:11,390 --> 00:25:16,940
you you send it to Mel pedia and then

576
00:25:14,990 --> 00:25:19,160
all of the Yarra signatures that they

577
00:25:16,940 --> 00:25:22,940
have in their library any of them that

578
00:25:19,160 --> 00:25:26,450
match the file will trigger you know a

579
00:25:22,940 --> 00:25:28,490
string match and it'll show you if it

580
00:25:26,450 --> 00:25:31,520
you know if the string matches on one of

581
00:25:28,490 --> 00:25:33,980
their rule names or multiple rule names

582
00:25:31,520 --> 00:25:37,100
you'll get a result back based on which

583
00:25:33,980 --> 00:25:40,370
which rules were triggered which is very

584
00:25:37,100 --> 00:25:43,250
powerful but it doesn't necessarily have

585
00:25:40,370 --> 00:25:45,649
critical mass quite yet you'll notice

586
00:25:43,250 --> 00:25:47,900
that there's three three different

587
00:25:45,650 --> 00:25:51,080
things you either have you know

588
00:25:47,900 --> 00:25:53,090
reference samples that are you know that

589
00:25:51,080 --> 00:25:55,010
are the ground truth known to be that

590
00:25:53,090 --> 00:25:57,290
particular malware family you have

591
00:25:55,010 --> 00:25:59,150
signatures and then you have information

592
00:25:57,290 --> 00:26:01,760
about who's using it or what mal or

593
00:25:59,150 --> 00:26:03,740
family or adversaries are so there's

594
00:26:01,760 --> 00:26:05,540
there's plenty of gaps that we that you

595
00:26:03,740 --> 00:26:07,670
know the people that are running mal

596
00:26:05,540 --> 00:26:10,120
pedia and mal pedia needs help filling

597
00:26:07,670 --> 00:26:12,320
so there's plenty of work to be done and

598
00:26:10,120 --> 00:26:15,229
this is another thing I've added to this

599
00:26:12,320 --> 00:26:18,020
to the talk you can actually submit

600
00:26:15,230 --> 00:26:19,940
changes or proposed changes in mal pedia

601
00:26:18,020 --> 00:26:21,740
on your own even if you're not in the

602
00:26:19,940 --> 00:26:24,950
invite only group that runs the the

603
00:26:21,740 --> 00:26:25,910
system so if you see something if you

604
00:26:24,950 --> 00:26:27,890
want to add to it

605
00:26:25,910 --> 00:26:29,990
proposing a change for some of the

606
00:26:27,890 --> 00:26:34,250
adversaries behaviors malware samples

607
00:26:29,990 --> 00:26:38,210
etc you can actually add that yourself

608
00:26:34,250 --> 00:26:40,160
so please contribute again and then the

609
00:26:38,210 --> 00:26:41,390
least common denominator is Google so if

610
00:26:40,160 --> 00:26:44,090
you have something that you need to

611
00:26:41,390 --> 00:26:47,570
research like even a even a file hash

612
00:26:44,090 --> 00:26:51,230
google it because as we all know the way

613
00:26:47,570 --> 00:26:53,330
that you become a expert in IT is you

614
00:26:51,230 --> 00:26:55,280
know finding menu item buttons blah blah

615
00:26:53,330 --> 00:26:57,169
blah Google the name of the program plus

616
00:26:55,280 --> 00:26:58,340
a few words relation related to what you

617
00:26:57,170 --> 00:27:01,310
want it to do and follow any

618
00:26:58,340 --> 00:27:05,780
instructions so Google is still a very

619
00:27:01,310 --> 00:27:08,270
powerful tool so if you've seen some of

620
00:27:05,780 --> 00:27:10,668
my earlier talks about this subject I

621
00:27:08,270 --> 00:27:13,610
had a proposal for fixing kind of the

622
00:27:10,669 --> 00:27:16,250
the nomenclature problem but I'm going

623
00:27:13,610 --> 00:27:18,559
to admit that my proposal was incorrect

624
00:27:16,250 --> 00:27:21,710
so my proposal was basically to use the

625
00:27:18,559 --> 00:27:25,279
you know the idea that biology has

626
00:27:21,710 --> 00:27:26,480
already the binomial nomenclature and I

627
00:27:25,279 --> 00:27:30,100
was thinking that binomial nomenclature

628
00:27:26,480 --> 00:27:32,330
if applied properly in as you know in

629
00:27:30,100 --> 00:27:35,330
malware identification would work

630
00:27:32,330 --> 00:27:36,918
because first of all it gives you the it

631
00:27:35,330 --> 00:27:38,809
gives the marketing departments a little

632
00:27:36,919 --> 00:27:40,399
bit of their fame piece because they

633
00:27:38,809 --> 00:27:42,470
still get to name something after

634
00:27:40,399 --> 00:27:44,658
themselves or afters you know their

635
00:27:42,470 --> 00:27:50,059
favorite book or whatever as biologists

636
00:27:44,659 --> 00:27:52,669
do with new new species but the problem

637
00:27:50,059 --> 00:27:54,500
is that isn't going to really work

638
00:27:52,669 --> 00:27:56,630
because there are so many different

639
00:27:54,500 --> 00:28:00,380
layers of how you identify a malware

640
00:27:56,630 --> 00:28:02,690
family and from the the adversary level

641
00:28:00,380 --> 00:28:04,309
you have the botnet operator you have

642
00:28:02,690 --> 00:28:07,600
the person that wrote the software the

643
00:28:04,309 --> 00:28:10,399
author you have the you know the

644
00:28:07,600 --> 00:28:12,769
distributors you may actually have the

645
00:28:10,399 --> 00:28:16,010
same piece of malware may have multiple

646
00:28:12,769 --> 00:28:18,220
different personas operating on it at

647
00:28:16,010 --> 00:28:21,649
different moments in time so an implant

648
00:28:18,220 --> 00:28:23,899
may actually an implant in an

649
00:28:21,649 --> 00:28:25,639
organization might be sold by one

650
00:28:23,899 --> 00:28:29,209
adversary to a different one they might

651
00:28:25,639 --> 00:28:31,490
have you know one adversary goes and

652
00:28:29,210 --> 00:28:33,649
infects a number of hosts and then

653
00:28:31,490 --> 00:28:36,169
groups those together and sells that to

654
00:28:33,649 --> 00:28:38,239
a different adversary you also have a

655
00:28:36,169 --> 00:28:42,080
malware family where maybe that

656
00:28:38,240 --> 00:28:44,840
particular file the change in the the

657
00:28:42,080 --> 00:28:47,299
command-and-control is not based on any

658
00:28:44,840 --> 00:28:50,178
structural change to the file but it's a

659
00:28:47,299 --> 00:28:52,429
change in the configuration so that will

660
00:28:50,179 --> 00:28:55,850
have a command-and-control you know

661
00:28:52,429 --> 00:28:57,830
packet or configuration file change and

662
00:28:55,850 --> 00:29:00,740
now is that a different malware family

663
00:28:57,830 --> 00:29:03,199
is it not and so you also have the idea

664
00:29:00,740 --> 00:29:07,100
of what's called an intrusion set and so

665
00:29:03,200 --> 00:29:08,809
an intrusion set is a tool so these are

666
00:29:07,100 --> 00:29:11,629
like the hacking tools that don't count

667
00:29:08,809 --> 00:29:13,010
as malware but are always bad if you

668
00:29:11,630 --> 00:29:15,470
find them on your network but they're

669
00:29:13,010 --> 00:29:17,240
not actually malware like nmap for

670
00:29:15,470 --> 00:29:20,059
example and this sort of thing so these

671
00:29:17,240 --> 00:29:22,100
are these would be a tool and then you

672
00:29:20,059 --> 00:29:23,690
have the malware and then you have the

673
00:29:22,100 --> 00:29:25,668
adversary that the

674
00:29:23,690 --> 00:29:27,289
the entity that's controlling it so the

675
00:29:25,669 --> 00:29:30,200
collection of these things along with

676
00:29:27,289 --> 00:29:32,779
the TTP is like how how that whole thing

677
00:29:30,200 --> 00:29:34,970
behaves is called an intrusion set and

678
00:29:32,779 --> 00:29:38,240
so the intrusion sets are more important

679
00:29:34,970 --> 00:29:40,669
to kind of differentiate than it is to

680
00:29:38,240 --> 00:29:43,100
to kind of differentiate all the

681
00:29:40,669 --> 00:29:46,309
different malware families per se so

682
00:29:43,100 --> 00:29:48,019
perhaps my proposal was incorrect but

683
00:29:46,309 --> 00:29:50,299
I'll be seeking you know always looking

684
00:29:48,019 --> 00:29:53,200
for for better ways to kind of

685
00:29:50,299 --> 00:29:57,080
differentiate and compare malware files

686
00:29:53,200 --> 00:29:59,960
so for Association methods I want to go

687
00:29:57,080 --> 00:30:02,449
over a few few basic ones so one is

688
00:29:59,960 --> 00:30:04,279
static analysis so when you're when

689
00:30:02,450 --> 00:30:06,259
you're reverse engineering malware or

690
00:30:04,279 --> 00:30:08,240
analyzing malware there's a few

691
00:30:06,259 --> 00:30:12,230
different stages of the analysis process

692
00:30:08,240 --> 00:30:14,120
and you have automated analysis and in

693
00:30:12,230 --> 00:30:15,860
automated analysis you have static

694
00:30:14,120 --> 00:30:18,918
analysis which is looking at the

695
00:30:15,860 --> 00:30:22,100
features of a particular sample and then

696
00:30:18,919 --> 00:30:24,320
you have behavioral analysis and so

697
00:30:22,100 --> 00:30:26,029
behavioral analysis is where you run the

698
00:30:24,320 --> 00:30:27,889
file so static analysis you're not

699
00:30:26,029 --> 00:30:29,779
actually running the file you're just

700
00:30:27,889 --> 00:30:31,820
looking at its structure and then

701
00:30:29,779 --> 00:30:33,830
behavioral analysis you're running the

702
00:30:31,820 --> 00:30:36,080
file and seeing what it does in the

703
00:30:33,830 --> 00:30:39,199
operating system you know what what

704
00:30:36,080 --> 00:30:41,960
activities it has and then you have

705
00:30:39,200 --> 00:30:43,850
manual analysis which is going into a

706
00:30:41,960 --> 00:30:45,980
debugger and first basically full

707
00:30:43,850 --> 00:30:47,750
reverse engineering so that's where you

708
00:30:45,980 --> 00:30:49,490
sit there and step through the step

709
00:30:47,750 --> 00:30:52,129
through the malware using a debugger or

710
00:30:49,490 --> 00:30:54,649
if you have another instrumentation

711
00:30:52,129 --> 00:30:57,529
system but you're actually manually

712
00:30:54,649 --> 00:31:02,350
observing and and and and watching the

713
00:30:57,529 --> 00:31:04,700
file as it runs so for static analysis

714
00:31:02,350 --> 00:31:06,590
some of the basic pieces of static

715
00:31:04,700 --> 00:31:09,049
analysis that you get back are hashes

716
00:31:06,590 --> 00:31:12,678
and some important hashes in my opinion

717
00:31:09,049 --> 00:31:15,620
are these two so SS deep is context

718
00:31:12,679 --> 00:31:18,139
triggered piecewise hash and so SS deep

719
00:31:15,620 --> 00:31:21,469
if you think of the the regular hash is

720
00:31:18,139 --> 00:31:24,889
like an md5 sha-1 sha-256 you've got a

721
00:31:21,470 --> 00:31:27,080
sample and that sample you know without

722
00:31:24,889 --> 00:31:29,870
a collision if you let's just exclude

723
00:31:27,080 --> 00:31:33,480
the idea of hash collisions but you have

724
00:31:29,870 --> 00:31:35,070
a file and that equals one one

725
00:31:33,480 --> 00:31:37,320
hache and then if you change the file

726
00:31:35,070 --> 00:31:42,059
even slightly you get a different hash

727
00:31:37,320 --> 00:31:44,639
so identifying groups of malware that's

728
00:31:42,059 --> 00:31:47,299
not an ideal type of hash to use it's

729
00:31:44,640 --> 00:31:50,040
impossible to use in that way it's more

730
00:31:47,299 --> 00:31:51,870
for differentiating two files that are

731
00:31:50,040 --> 00:31:54,570
exactly you know very very close

732
00:31:51,870 --> 00:31:57,178
together but SS deep what it does it

733
00:31:54,570 --> 00:32:00,629
takes your file and essentially breaks

734
00:31:57,179 --> 00:32:02,640
it up into you know equal parts

735
00:32:00,630 --> 00:32:05,220
predetermined parts and then hashes

736
00:32:02,640 --> 00:32:07,410
those parts in a certain way so that you

737
00:32:05,220 --> 00:32:10,169
can take two files and you can see which

738
00:32:07,410 --> 00:32:13,200
part is different and you can basically

739
00:32:10,169 --> 00:32:14,910
see how different two files are and it's

740
00:32:13,200 --> 00:32:20,669
called an edit distance in the in

741
00:32:14,910 --> 00:32:23,190
particular for SSD and so SSD doesn't

742
00:32:20,669 --> 00:32:26,730
necessarily it doesn't necessarily tell

743
00:32:23,190 --> 00:32:29,460
you where you should put your threshold

744
00:32:26,730 --> 00:32:32,220
so if you've got a set of files let's

745
00:32:29,460 --> 00:32:34,620
say X group of files and then you've got

746
00:32:32,220 --> 00:32:37,290
one file you would you would get an SSD

747
00:32:34,620 --> 00:32:38,790
p-- edit distance between each one of

748
00:32:37,290 --> 00:32:40,470
those files so some of them are a little

749
00:32:38,790 --> 00:32:42,299
bit further away some of them are a

750
00:32:40,470 --> 00:32:44,370
little bit closer and so when you're

751
00:32:42,299 --> 00:32:48,150
using SS deep you need to pick a

752
00:32:44,370 --> 00:32:51,239
threshold of how close of that edit

753
00:32:48,150 --> 00:32:54,510
distance would you consider same and so

754
00:32:51,240 --> 00:32:55,919
you basically can you'd pick a a good

755
00:32:54,510 --> 00:32:58,590
edit distance that you would consider

756
00:32:55,919 --> 00:33:00,419
same and then all the results that are

757
00:32:58,590 --> 00:33:03,360
inside of that edit distance you're

758
00:33:00,419 --> 00:33:05,660
going to then look more closely at so

759
00:33:03,360 --> 00:33:10,320
this is a way of kind of shaving down

760
00:33:05,660 --> 00:33:11,580
the the the extra information additional

761
00:33:10,320 --> 00:33:14,280
information when you're looking at a

762
00:33:11,580 --> 00:33:16,230
huge data set you can narrow it down to

763
00:33:14,280 --> 00:33:19,590
something that is more manageable for

764
00:33:16,230 --> 00:33:23,520
you to do further more specific

765
00:33:19,590 --> 00:33:25,139
investigations on so one of the problems

766
00:33:23,520 --> 00:33:28,799
that you'll find with SS deep is that

767
00:33:25,140 --> 00:33:31,320
most of the many not not all but many of

768
00:33:28,799 --> 00:33:35,850
the the repositories of malware out

769
00:33:31,320 --> 00:33:38,549
there are not unpacked so malware is

770
00:33:35,850 --> 00:33:40,439
usually put into a packer which can be

771
00:33:38,549 --> 00:33:42,360
you know a commercial Packer like

772
00:33:40,440 --> 00:33:45,059
something that the commercial software

773
00:33:42,360 --> 00:33:46,860
uses to package their software it could

774
00:33:45,059 --> 00:33:49,200
be something that just in

775
00:33:46,860 --> 00:33:53,520
it could be something that compresses it

776
00:33:49,200 --> 00:33:55,740
so if you're applying SS deep to a

777
00:33:53,520 --> 00:33:58,440
repository of files that are packed

778
00:33:55,740 --> 00:34:00,960
you're going to basically compare the

779
00:33:58,440 --> 00:34:03,720
Edit distance between the Packer not the

780
00:34:00,960 --> 00:34:06,030
payload so you need to if you're using

781
00:34:03,720 --> 00:34:08,720
SS deep it's much better to unpack all

782
00:34:06,030 --> 00:34:11,399
the files and then apply your SS deep

783
00:34:08,719 --> 00:34:13,739
process to the unpacked file so

784
00:34:11,399 --> 00:34:15,719
essentially unpacked would be for

785
00:34:13,739 --> 00:34:17,908
example if the malware runs unpacked

786
00:34:15,719 --> 00:34:20,819
itself into memory you want to take that

787
00:34:17,909 --> 00:34:22,320
the you want to capture the the code

788
00:34:20,820 --> 00:34:24,600
that's actually running in memory the

789
00:34:22,320 --> 00:34:28,440
unpacked code and apply your SS deep

790
00:34:24,600 --> 00:34:30,839
hashes to that import hash or impasse

791
00:34:28,440 --> 00:34:33,540
this is another very very powerful hash

792
00:34:30,840 --> 00:34:35,909
so PE files have an import table these

793
00:34:33,540 --> 00:34:38,790
are the functions that are imported for

794
00:34:35,909 --> 00:34:41,159
it to use and so that table has a

795
00:34:38,790 --> 00:34:43,710
certain order and a certain set of

796
00:34:41,159 --> 00:34:46,679
imports and so if you take that import

797
00:34:43,710 --> 00:34:49,168
table and create a hash of it you can

798
00:34:46,679 --> 00:34:51,330
find other files that share that exact

799
00:34:49,168 --> 00:34:53,368
same import table and there's a high

800
00:34:51,330 --> 00:34:54,869
likelihood that those other files are

801
00:34:53,369 --> 00:34:57,630
related to the file that you're looking

802
00:34:54,869 --> 00:34:59,160
at and again from a large data set if

803
00:34:57,630 --> 00:35:01,530
you find a set of files that have the

804
00:34:59,160 --> 00:35:03,420
same import table that smaller number of

805
00:35:01,530 --> 00:35:06,930
files gives you a manageable number of

806
00:35:03,420 --> 00:35:09,720
files to to do research on and target

807
00:35:06,930 --> 00:35:12,810
and run through either automated

808
00:35:09,720 --> 00:35:14,850
analysis or manual analysis but again

809
00:35:12,810 --> 00:35:19,350
there's a couple of sticky points with

810
00:35:14,850 --> 00:35:21,900
import hashes as well and some malware

811
00:35:19,350 --> 00:35:24,480
is packed with dotnet and so if you pack

812
00:35:21,900 --> 00:35:26,940
malware net and you look at the import

813
00:35:24,480 --> 00:35:28,800
hash of the resulting binary you're

814
00:35:26,940 --> 00:35:31,680
going to find an import hash that has

815
00:35:28,800 --> 00:35:33,450
that shared among lots and lots of other

816
00:35:31,680 --> 00:35:35,850
dotnet binaries and you're not going to

817
00:35:33,450 --> 00:35:37,560
identify it as being related to your

818
00:35:35,850 --> 00:35:41,850
file you're just going to identify it as

819
00:35:37,560 --> 00:35:45,509
being dotnet so another another wealth

820
00:35:41,850 --> 00:35:47,490
of data is from exif metadata these are

821
00:35:45,510 --> 00:35:49,530
some of the highlights so the modified

822
00:35:47,490 --> 00:35:52,649
time so any of the times that you can

823
00:35:49,530 --> 00:35:55,530
get out of a file are very effective

824
00:35:52,650 --> 00:35:57,540
data points and then the modified by and

825
00:35:55,530 --> 00:35:59,400
the author you know these text strings

826
00:35:57,540 --> 00:36:00,660
are other things that you can use to

827
00:35:59,400 --> 00:36:04,410
identify out of a large

828
00:36:00,660 --> 00:36:07,740
dataset files that are related again a

829
00:36:04,410 --> 00:36:09,470
peer code page so languages languages

830
00:36:07,740 --> 00:36:12,959
other than English if there's a

831
00:36:09,470 --> 00:36:14,970
different code page outside of the the

832
00:36:12,960 --> 00:36:17,880
usual ones that's another one that can

833
00:36:14,970 --> 00:36:19,828
be used as a single data point code

834
00:36:17,880 --> 00:36:23,309
signing certificates are very important

835
00:36:19,829 --> 00:36:26,309
so you'll find fake certs self-signed

836
00:36:23,309 --> 00:36:28,170
cert s' you'll have stolen certs that

837
00:36:26,309 --> 00:36:30,450
are taken from a legitimate software

838
00:36:28,170 --> 00:36:32,700
company that have begun then they've

839
00:36:30,450 --> 00:36:35,038
been used to sign malware and then you

840
00:36:32,700 --> 00:36:37,288
have these sort of outliers which are

841
00:36:35,039 --> 00:36:39,089
who knows what the heck it is

842
00:36:37,289 --> 00:36:41,910
it's not assert but it's in the correct

843
00:36:39,089 --> 00:36:43,470
directory under the PE file for the for

844
00:36:41,910 --> 00:36:45,629
it to be assert but there's actually

845
00:36:43,470 --> 00:36:48,689
something else there maybe ASCII art or

846
00:36:45,630 --> 00:36:51,839
something who knows but all of these I

847
00:36:48,690 --> 00:36:53,700
would consider certs in some way and all

848
00:36:51,839 --> 00:36:57,089
of them even the ones that are broken

849
00:36:53,700 --> 00:36:59,098
can be used if you find another file and

850
00:36:57,089 --> 00:37:02,788
that cert is broken in the same way

851
00:36:59,099 --> 00:37:06,470
those two can be related together I

852
00:37:02,789 --> 00:37:09,240
found over the past few months a

853
00:37:06,470 --> 00:37:12,328
particular malware family called file

854
00:37:09,240 --> 00:37:14,640
tor which is doing a really really bad

855
00:37:12,329 --> 00:37:17,880
job of a good job of abusing

856
00:37:14,640 --> 00:37:21,348
certificates so of these you know 25

857
00:37:17,880 --> 00:37:23,970
approximately 25,000 samples there are

858
00:37:21,349 --> 00:37:27,089
500 legitimate certificates that were

859
00:37:23,970 --> 00:37:28,680
signed by CAS so these the malware

860
00:37:27,089 --> 00:37:30,990
authors actually went out and purchased

861
00:37:28,680 --> 00:37:34,558
certificates you know signed their

862
00:37:30,990 --> 00:37:36,828
malware and sent you know send it out in

863
00:37:34,559 --> 00:37:39,660
a previous talk actually called called

864
00:37:36,829 --> 00:37:41,369
software signing certs I had a Freudian

865
00:37:39,660 --> 00:37:45,660
slip and is called the malware signing

866
00:37:41,369 --> 00:37:48,329
certs so moving on to a couple other

867
00:37:45,660 --> 00:37:51,058
data points so you have PE metadata so

868
00:37:48,329 --> 00:37:54,390
sections imports exports resources we

869
00:37:51,059 --> 00:37:56,670
saw the the power of imports earlier so

870
00:37:54,390 --> 00:37:58,230
these are all components of a PE file I

871
00:37:56,670 --> 00:38:02,609
know this is a little bit hard to read

872
00:37:58,230 --> 00:38:04,559
but a PE file is structured in a very

873
00:38:02,609 --> 00:38:06,839
regular way so you have directories and

874
00:38:04,559 --> 00:38:09,059
areas in the PE file that are always in

875
00:38:06,839 --> 00:38:11,910
the same spot and so you can take things

876
00:38:09,059 --> 00:38:14,190
like sections and resources and take

877
00:38:11,910 --> 00:38:16,290
that smaller set of data

878
00:38:14,190 --> 00:38:18,090
and make a hash of it and then you can

879
00:38:16,290 --> 00:38:19,950
find other files as long as you've

880
00:38:18,090 --> 00:38:22,320
repeated this process across all the

881
00:38:19,950 --> 00:38:24,240
Pease and you're in your repository you

882
00:38:22,320 --> 00:38:27,800
can find other files that share that

883
00:38:24,240 --> 00:38:32,009
same section or share that same resource

884
00:38:27,800 --> 00:38:35,160
so here here's an example of a resource

885
00:38:32,010 --> 00:38:37,800
so real oak and this is the md5 of this

886
00:38:35,160 --> 00:38:40,379
particular section again here's a

887
00:38:37,800 --> 00:38:43,940
resource ont version and that's the shot

888
00:38:40,380 --> 00:38:48,200
to v6 of that area of the PE file

889
00:38:43,940 --> 00:38:51,180
there's also a few sort of you know

890
00:38:48,200 --> 00:38:52,770
algorithms that allow you to take a file

891
00:38:51,180 --> 00:38:54,540
and find other ones that are related to

892
00:38:52,770 --> 00:38:56,640
it in various products that the

893
00:38:54,540 --> 00:38:58,650
companies have so reversing labs this is

894
00:38:56,640 --> 00:39:00,810
the reversing labs hash algorithm

895
00:38:58,650 --> 00:39:03,030
they've nicely written a blog post about

896
00:39:00,810 --> 00:39:04,310
exactly how they do their hash algorithm

897
00:39:03,030 --> 00:39:07,050
to compare files

898
00:39:04,310 --> 00:39:09,750
another one is virustotal they have an

899
00:39:07,050 --> 00:39:10,350
index called similar to it's quite

900
00:39:09,750 --> 00:39:12,660
powerful

901
00:39:10,350 --> 00:39:15,360
it creates they create what's called a V

902
00:39:12,660 --> 00:39:19,259
hash but you know its proprietary black

903
00:39:15,360 --> 00:39:21,240
magic but it's super effective document

904
00:39:19,260 --> 00:39:23,720
metadata again back to those strings

905
00:39:21,240 --> 00:39:27,569
that we just looked at in the EXIF tool

906
00:39:23,720 --> 00:39:30,359
you have author timestamps language PDF

907
00:39:27,570 --> 00:39:32,400
producer in the PDF land and the office

908
00:39:30,360 --> 00:39:34,770
document land office documents they call

909
00:39:32,400 --> 00:39:37,380
it author PDF land they call it PDF

910
00:39:34,770 --> 00:39:40,530
producer but that's basically the the

911
00:39:37,380 --> 00:39:44,820
name of the person who you know in

912
00:39:40,530 --> 00:39:47,700
theory created that document now let's

913
00:39:44,820 --> 00:39:50,430
talk about dynamic analysis so there's a

914
00:39:47,700 --> 00:39:52,500
few interesting components of dynamic

915
00:39:50,430 --> 00:39:54,720
analysis so you've got file names all

916
00:39:52,500 --> 00:39:56,700
right this just the file name if the

917
00:39:54,720 --> 00:39:59,490
file name that the particular malware

918
00:39:56,700 --> 00:40:01,049
drops itself as or drops pieces of it as

919
00:39:59,490 --> 00:40:03,450
if it's all the same it's not really

920
00:40:01,050 --> 00:40:05,430
important but it's more exciting if that

921
00:40:03,450 --> 00:40:08,480
malware actually has an algorithm for

922
00:40:05,430 --> 00:40:11,370
generating random or seemingly random

923
00:40:08,480 --> 00:40:13,050
file names and so you can write a regex

924
00:40:11,370 --> 00:40:15,779
if you know that pattern you can write a

925
00:40:13,050 --> 00:40:18,450
regex and that the the particulars of

926
00:40:15,780 --> 00:40:20,130
drop file names that the malware uses

927
00:40:18,450 --> 00:40:23,910
can be used to identify the malware

928
00:40:20,130 --> 00:40:25,890
family I put this in here just because

929
00:40:23,910 --> 00:40:27,390
it's interesting it's not necessarily

930
00:40:25,890 --> 00:40:30,009
related to

931
00:40:27,390 --> 00:40:32,440
identifying the malware family but the

932
00:40:30,010 --> 00:40:34,270
place where the payload is is stored

933
00:40:32,440 --> 00:40:37,780
like they you know the compromised

934
00:40:34,270 --> 00:40:40,840
website compromised website the

935
00:40:37,780 --> 00:40:44,320
structure of that URL is closely related

936
00:40:40,840 --> 00:40:47,140
to the vulnerability that was used in in

937
00:40:44,320 --> 00:40:48,610
compromising the website so that's not

938
00:40:47,140 --> 00:40:50,109
related to the malware family but I

939
00:40:48,610 --> 00:40:52,420
figured I'd put it in here because I'm

940
00:40:50,110 --> 00:40:55,110
talking about URL structure anyway so

941
00:40:52,420 --> 00:40:57,700
this is an example you know you'll see

942
00:40:55,110 --> 00:41:00,430
compromised websites with the payload or

943
00:40:57,700 --> 00:41:02,319
the fishing kit or the malware whatever

944
00:41:00,430 --> 00:41:06,490
stored in something like WP content

945
00:41:02,320 --> 00:41:09,310
theme is 2016 2015 and 2014 2013 etc etc

946
00:41:06,490 --> 00:41:12,430
etc so you can build a regex which would

947
00:41:09,310 --> 00:41:13,900
identify that particular you know the

948
00:41:12,430 --> 00:41:17,700
particular vulnerability WordPress

949
00:41:13,900 --> 00:41:21,060
vulnerability so keeping that in mind

950
00:41:17,700 --> 00:41:23,589
let's think about C 2 so the the the

951
00:41:21,060 --> 00:41:28,630
command and control infrastructure for a

952
00:41:23,590 --> 00:41:30,490
particular file has its directly related

953
00:41:28,630 --> 00:41:32,710
to the malware family so the the C 2

954
00:41:30,490 --> 00:41:34,899
structure that it uses is actually

955
00:41:32,710 --> 00:41:36,820
encoded in the malware file and so

956
00:41:34,900 --> 00:41:38,770
that's under the control of the malware

957
00:41:36,820 --> 00:41:40,990
author and it's the you know it's the

958
00:41:38,770 --> 00:41:44,050
way that the the file calls back to its

959
00:41:40,990 --> 00:41:45,669
masters and so this is directly related

960
00:41:44,050 --> 00:41:49,090
to the malware family so an example of

961
00:41:45,670 --> 00:41:51,160
this this is I believe my memory serves

962
00:41:49,090 --> 00:41:54,460
me correctly this is a pony sample and

963
00:41:51,160 --> 00:41:57,399
this is a you know Pony password stealer

964
00:41:54,460 --> 00:42:02,050
it's a fairly common type of malware and

965
00:41:57,400 --> 00:42:04,660
so you it has a very regular gate dot

966
00:42:02,050 --> 00:42:07,750
PHP and then a string before that and so

967
00:42:04,660 --> 00:42:11,020
you can differentiate certain builds of

968
00:42:07,750 --> 00:42:14,650
Pony depending on the structure of its

969
00:42:11,020 --> 00:42:17,380
c2 callback and by the way this is a boy

970
00:42:14,650 --> 00:42:18,910
is so this is this is actually Russian

971
00:42:17,380 --> 00:42:22,600
and so as a boy is basically means

972
00:42:18,910 --> 00:42:24,609
bender like a drinking bender but so koi

973
00:42:22,600 --> 00:42:26,080
is usually not like a weekend like a per

974
00:42:24,610 --> 00:42:30,700
trinken bender it's more of like a month

975
00:42:26,080 --> 00:42:33,460
or three months long as a boy so a

976
00:42:30,700 --> 00:42:35,439
mutual exclusion so mutual exclusions

977
00:42:33,460 --> 00:42:37,930
are used to prevent race conditions so

978
00:42:35,440 --> 00:42:39,320
if you have in the multi processing and

979
00:42:37,930 --> 00:42:41,419
multi-threading world that we're in

980
00:42:39,320 --> 00:42:43,700
now when you write software you don't

981
00:42:41,420 --> 00:42:45,770
you have to kind of deconflict what the

982
00:42:43,700 --> 00:42:49,189
software is doing across processors and

983
00:42:45,770 --> 00:42:51,740
threads and so the mutual exclusion is

984
00:42:49,190 --> 00:42:53,810
used so that these are you know software

985
00:42:51,740 --> 00:42:55,549
doesn't stomp on itself by being run in

986
00:42:53,810 --> 00:42:58,310
different processors or and run in

987
00:42:55,550 --> 00:43:00,590
different threads and so now our authors

988
00:42:58,310 --> 00:43:03,590
also need to use mutual exclusions and

989
00:43:00,590 --> 00:43:06,260
so it's a string that's used to you know

990
00:43:03,590 --> 00:43:08,090
kind of deconflict and that string might

991
00:43:06,260 --> 00:43:10,220
be unique by the malware family so

992
00:43:08,090 --> 00:43:12,680
observing in the malware behavior the

993
00:43:10,220 --> 00:43:15,589
mutual exclusion that it sets can can

994
00:43:12,680 --> 00:43:17,330
you know show you other malware families

995
00:43:15,590 --> 00:43:20,570
that use that or other malware samples

996
00:43:17,330 --> 00:43:24,980
that use that exact same mutex so that's

997
00:43:20,570 --> 00:43:27,260
a good way to identify registry keys the

998
00:43:24,980 --> 00:43:30,650
registry behavior all malware is almost

999
00:43:27,260 --> 00:43:33,500
all malware is going to go and make many

1000
00:43:30,650 --> 00:43:35,930
edits create registry key is delete

1001
00:43:33,500 --> 00:43:37,790
registry keys adjust registry keys you

1002
00:43:35,930 --> 00:43:40,100
know updates all this sort of thing so

1003
00:43:37,790 --> 00:43:42,560
that set of changes that the malware

1004
00:43:40,100 --> 00:43:44,660
does to your registry can be used as a

1005
00:43:42,560 --> 00:43:48,790
signature to find other malware that

1006
00:43:44,660 --> 00:43:51,470
does that same set of registry behaviors

1007
00:43:48,790 --> 00:43:54,529
so let's go a little bit more high level

1008
00:43:51,470 --> 00:43:56,990
and more complex of Association method

1009
00:43:54,530 --> 00:43:59,540
so there's clustering algorithms and

1010
00:43:56,990 --> 00:44:01,160
here I'm actually going to kind of stand

1011
00:43:59,540 --> 00:44:04,550
on the shoulder of a giant so this is

1012
00:44:01,160 --> 00:44:07,430
Seb Draven I would point you towards his

1013
00:44:04,550 --> 00:44:10,850
talk this is from 2017 I was at BOTS

1014
00:44:07,430 --> 00:44:12,290
conf and I took this this workshop from

1015
00:44:10,850 --> 00:44:15,470
him so it's Python and machine learning

1016
00:44:12,290 --> 00:44:18,020
and one of the things you learn is how

1017
00:44:15,470 --> 00:44:20,600
to take the there's a you know public

1018
00:44:18,020 --> 00:44:23,420
public data set and then apply a few of

1019
00:44:20,600 --> 00:44:26,330
the common algorithms like k-means and

1020
00:44:23,420 --> 00:44:29,030
DB scan to take a file that you have and

1021
00:44:26,330 --> 00:44:31,759
then compare it to repo of other files

1022
00:44:29,030 --> 00:44:33,530
and cluster eyes them and see which

1023
00:44:31,760 --> 00:44:35,030
cluster or which cluster which cluster

1024
00:44:33,530 --> 00:44:36,920
it fits into which cluster your file

1025
00:44:35,030 --> 00:44:39,500
fits into you or which cluster it

1026
00:44:36,920 --> 00:44:41,630
doesn't fit into and what's interesting

1027
00:44:39,500 --> 00:44:43,460
about this is if you if you take a look

1028
00:44:41,630 --> 00:44:45,230
you would think oh my gosh if I'm going

1029
00:44:43,460 --> 00:44:47,150
to cluster eyes lots of malware files I

1030
00:44:45,230 --> 00:44:50,270
need a GPU I need like all of this

1031
00:44:47,150 --> 00:44:52,849
horsepower but there's actually there's

1032
00:44:50,270 --> 00:44:54,349
a concept called sparse matrices we

1033
00:44:52,849 --> 00:44:56,630
you can actually save a lot of your

1034
00:44:54,349 --> 00:45:00,229
computing resources by using sparse

1035
00:44:56,630 --> 00:45:02,299
matrices to cluster eyes malware and you

1036
00:45:00,229 --> 00:45:05,210
can actually use a laptop just like this

1037
00:45:02,299 --> 00:45:07,519
to run as long as your data set is

1038
00:45:05,210 --> 00:45:12,140
reasonable size to cluster eyes that

1039
00:45:07,519 --> 00:45:14,390
that data set so another Association

1040
00:45:12,140 --> 00:45:17,440
method is the diamond diamond model of

1041
00:45:14,390 --> 00:45:20,029
intrusion analysis and so this is the

1042
00:45:17,440 --> 00:45:22,940
this is an example of the diamond model

1043
00:45:20,029 --> 00:45:25,099
I know this is the technical track but

1044
00:45:22,940 --> 00:45:27,380
I'm gonna throw in a little bit of star

1045
00:45:25,099 --> 00:45:29,660
wars so this is taking this is an

1046
00:45:27,380 --> 00:45:33,410
example of the diamond model applied to

1047
00:45:29,660 --> 00:45:35,390
Star Wars so the diamond model has the

1048
00:45:33,410 --> 00:45:37,609
adversary so this is the the attacker

1049
00:45:35,390 --> 00:45:39,410
right and then you have the victim and

1050
00:45:37,609 --> 00:45:43,190
then you have capabilities so

1051
00:45:39,410 --> 00:45:45,319
capabilities are the malware or you know

1052
00:45:43,190 --> 00:45:47,569
the implant of some type infrastructure

1053
00:45:45,319 --> 00:45:50,359
is where everything calls back to and so

1054
00:45:47,569 --> 00:45:53,569
if you group your samples and your

1055
00:45:50,359 --> 00:45:56,538
information and data into these into

1056
00:45:53,569 --> 00:45:58,969
these these areas you can then see

1057
00:45:56,539 --> 00:46:01,460
patterns like the the victimology who

1058
00:45:58,969 --> 00:46:03,950
the who the victim is compared to the

1059
00:46:01,460 --> 00:46:06,319
the adversary and you know the the

1060
00:46:03,950 --> 00:46:08,598
callback infrastructure and then the

1061
00:46:06,319 --> 00:46:11,089
malware all these can be used to relate

1062
00:46:08,599 --> 00:46:13,940
the different these groups together and

1063
00:46:11,089 --> 00:46:16,969
and you know kind of learn more about

1064
00:46:13,940 --> 00:46:19,670
the relationships I invite you to go

1065
00:46:16,969 --> 00:46:22,009
ahead and go learn a little bit more go

1066
00:46:19,670 --> 00:46:27,200
to that that is the actual diamond model

1067
00:46:22,009 --> 00:46:29,210
paper and the another association method

1068
00:46:27,200 --> 00:46:32,569
is ice-water so this is basically a

1069
00:46:29,210 --> 00:46:34,130
cluster ization algorithm you can do a

1070
00:46:32,569 --> 00:46:35,869
search in here so if you have a

1071
00:46:34,130 --> 00:46:38,569
particular file you want to generate a

1072
00:46:35,869 --> 00:46:42,440
hash do the search in the ice-water hash

1073
00:46:38,569 --> 00:46:44,089
search and you end up with clusters and

1074
00:46:42,440 --> 00:46:45,499
then you have the cluster neighbors so

1075
00:46:44,089 --> 00:46:48,140
you have the blue cluster which is the

1076
00:46:45,499 --> 00:46:50,479
cluster of the thing that that your file

1077
00:46:48,140 --> 00:46:53,328
is a member of and then you can see all

1078
00:46:50,479 --> 00:46:56,779
these other clusters that are one bit in

1079
00:46:53,329 --> 00:46:59,690
that that cluster ID these are one bit

1080
00:46:56,779 --> 00:47:02,029
different and then the the green one is

1081
00:46:59,690 --> 00:47:03,499
two bits different so you have a cluster

1082
00:47:02,029 --> 00:47:05,509
and then the green one is a cluster of

1083
00:47:03,499 --> 00:47:06,529
stuff that's two bits different those

1084
00:47:05,509 --> 00:47:08,690
big orange ones are

1085
00:47:06,530 --> 00:47:10,730
clusters of one bit different so this is

1086
00:47:08,690 --> 00:47:13,850
a way if you have a file you can then

1087
00:47:10,730 --> 00:47:15,770
find more files that might be either a

1088
00:47:13,850 --> 00:47:18,020
different build of them our family etc

1089
00:47:15,770 --> 00:47:20,600
so you have more data to look look at

1090
00:47:18,020 --> 00:47:23,000
and it also produces a nice little

1091
00:47:20,600 --> 00:47:24,920
picture and so if you take a cluster and

1092
00:47:23,000 --> 00:47:26,450
you take all the pictures you can make a

1093
00:47:24,920 --> 00:47:28,970
little movie and you can see exactly

1094
00:47:26,450 --> 00:47:31,540
we're gonna see exactly where the thing

1095
00:47:28,970 --> 00:47:34,069
is changing inside of the cluster

1096
00:47:31,540 --> 00:47:37,610
control flow graph analysis is another

1097
00:47:34,070 --> 00:47:39,020
methodology so this is another one where

1098
00:47:37,610 --> 00:47:41,180
I'm going to point you to someone who's

1099
00:47:39,020 --> 00:47:43,040
much smarter than I am so take a look at

1100
00:47:41,180 --> 00:47:46,819
Douglas Goddard's talk this is the

1101
00:47:43,040 --> 00:47:48,470
YouTube video of it derbycon 2014 if the

1102
00:47:46,820 --> 00:47:50,570
camera was slightly to the left you'd

1103
00:47:48,470 --> 00:47:55,040
see the top of my head I was in the

1104
00:47:50,570 --> 00:47:57,200
front row fanboying and so control flow

1105
00:47:55,040 --> 00:48:00,140
graph analysis is essentially where you

1106
00:47:57,200 --> 00:48:02,089
take all of the blocks of code and look

1107
00:48:00,140 --> 00:48:05,089
at the control flow so control flow is

1108
00:48:02,090 --> 00:48:06,890
either an if-then where the the changes

1109
00:48:05,090 --> 00:48:09,200
to a different block depending on what

1110
00:48:06,890 --> 00:48:12,500
the data what the variable is set to or

1111
00:48:09,200 --> 00:48:15,439
it has a loop so loops and and decisions

1112
00:48:12,500 --> 00:48:17,600
like if-then are all control flow and so

1113
00:48:15,440 --> 00:48:20,600
if you take all those blocks and then

1114
00:48:17,600 --> 00:48:23,000
take all of the different decisions that

1115
00:48:20,600 --> 00:48:25,970
it makes you can take you can create a

1116
00:48:23,000 --> 00:48:28,520
signature based on that control flow and

1117
00:48:25,970 --> 00:48:30,649
so adversaries are going to reuse their

1118
00:48:28,520 --> 00:48:31,880
code because all programmers are lazy

1119
00:48:30,650 --> 00:48:33,920
and that's a good thing

1120
00:48:31,880 --> 00:48:36,500
that's a that's a positive quality and

1121
00:48:33,920 --> 00:48:39,230
programmers and so when you reuse code

1122
00:48:36,500 --> 00:48:41,030
you've got you know you may have one

1123
00:48:39,230 --> 00:48:42,980
malware family that was written by a

1124
00:48:41,030 --> 00:48:45,170
particular author and you can see that

1125
00:48:42,980 --> 00:48:47,720
control flow in a different piece of

1126
00:48:45,170 --> 00:48:49,220
software that may you know within a

1127
00:48:47,720 --> 00:48:51,529
certain confidence be written by the

1128
00:48:49,220 --> 00:48:55,640
same individual or at least copypasta of

1129
00:48:51,530 --> 00:49:00,110
that same code and the last thing is

1130
00:48:55,640 --> 00:49:02,420
graphing threat data and so this is you

1131
00:49:00,110 --> 00:49:05,870
know if you if you know sticks this is

1132
00:49:02,420 --> 00:49:07,820
one of the the kind of nomenclature so

1133
00:49:05,870 --> 00:49:08,900
you have sticks domain objects and these

1134
00:49:07,820 --> 00:49:11,420
are all the different pieces of our

1135
00:49:08,900 --> 00:49:13,400
families indicators attack patterns and

1136
00:49:11,420 --> 00:49:15,260
then you have relationship objects so if

1137
00:49:13,400 --> 00:49:18,250
you think about it this is just graph

1138
00:49:15,260 --> 00:49:20,980
data so graph graphs are nodes

1139
00:49:18,250 --> 00:49:24,190
Edge's so a node is like a data point in

1140
00:49:20,980 --> 00:49:26,770
that in your data set and then the edges

1141
00:49:24,190 --> 00:49:30,100
are how those how those data points are

1142
00:49:26,770 --> 00:49:33,220
related to each other so there's tools

1143
00:49:30,100 --> 00:49:35,170
for for graph for saving that graph data

1144
00:49:33,220 --> 00:49:37,750
so you have resource description

1145
00:49:35,170 --> 00:49:39,400
framework and JSON for linking data I'm

1146
00:49:37,750 --> 00:49:41,080
gonna kind of breeze through this a

1147
00:49:39,400 --> 00:49:43,930
little bit because JSON for linking data

1148
00:49:41,080 --> 00:49:46,660
is not necessarily as important rdf and

1149
00:49:43,930 --> 00:49:48,399
quad is the one that i use it's a little

1150
00:49:46,660 --> 00:49:51,670
bit more complex but the reason for

1151
00:49:48,400 --> 00:49:53,680
using it is i use de Graaff so these are

1152
00:49:51,670 --> 00:49:56,620
the two major graph databases today

1153
00:49:53,680 --> 00:49:58,930
neo4j is a little bit older I use D

1154
00:49:56,620 --> 00:50:01,000
graph because it's much simpler it's

1155
00:49:58,930 --> 00:50:05,200
distributed it's written and go it's the

1156
00:50:01,000 --> 00:50:06,940
hipster graph database but I would

1157
00:50:05,200 --> 00:50:08,890
encourage you to take a look at like how

1158
00:50:06,940 --> 00:50:11,260
this works because if you if you think

1159
00:50:08,890 --> 00:50:14,319
about threat data it is all kind of

1160
00:50:11,260 --> 00:50:16,240
naturally already graph data and so

1161
00:50:14,320 --> 00:50:19,180
putting it in a graph database is the

1162
00:50:16,240 --> 00:50:21,279
right place to put it and if you're

1163
00:50:19,180 --> 00:50:23,370
introduced if you're interested in graph

1164
00:50:21,280 --> 00:50:25,600
theory this is a good book to start with

1165
00:50:23,370 --> 00:50:29,020
introduction to graph theory by Richard

1166
00:50:25,600 --> 00:50:30,610
Trudeau and then just you know so you

1167
00:50:29,020 --> 00:50:32,259
it's so you get a little bit of visual

1168
00:50:30,610 --> 00:50:33,970
on what this is before I take some

1169
00:50:32,260 --> 00:50:35,890
questions so this is a network graph

1170
00:50:33,970 --> 00:50:38,109
you've got a node and then those are the

1171
00:50:35,890 --> 00:50:40,509
edges the and edges can have

1172
00:50:38,110 --> 00:50:41,770
directionality going you know from one

1173
00:50:40,510 --> 00:50:44,110
to another or they could be

1174
00:50:41,770 --> 00:50:46,690
bi-directional and so this is a network

1175
00:50:44,110 --> 00:50:48,400
graph of a particular but the two two

1176
00:50:46,690 --> 00:50:51,220
malware samples those are the ones in

1177
00:50:48,400 --> 00:50:53,650
yellow and this is a neste malware

1178
00:50:51,220 --> 00:50:56,919
family so that blue is the the neshty

1179
00:50:53,650 --> 00:50:59,770
malware family node and then green is

1180
00:50:56,920 --> 00:51:02,560
the import hash that these two these two

1181
00:50:59,770 --> 00:51:04,330
files share and then set up that exe and

1182
00:51:02,560 --> 00:51:08,259
install DX ER nodes

1183
00:51:04,330 --> 00:51:13,690
meaning the file name so I just got the

1184
00:51:08,260 --> 00:51:16,350
of the finish up message so anyone has

1185
00:51:13,690 --> 00:51:16,350
any questions

1186
00:51:22,930 --> 00:51:30,040
so that's actually it so this is just

1187
00:51:25,030 --> 00:51:32,670
the visualization of so DeGraff has a

1188
00:51:30,040 --> 00:51:35,050
front end if anyone's familiar with

1189
00:51:32,670 --> 00:51:37,900
elasticsearch so you have elasticsearch

1190
00:51:35,050 --> 00:51:38,620
and then you have the front end which is

1191
00:51:37,900 --> 00:51:41,740
Cabana

1192
00:51:38,620 --> 00:51:43,810
so indygraf land you have D graph and

1193
00:51:41,740 --> 00:51:46,149
then retell what you're looking at here

1194
00:51:43,810 --> 00:51:50,220
is rotelle so this is just the way that

1195
00:51:46,150 --> 00:51:53,710
the way that rotelle visualizes the

1196
00:51:50,220 --> 00:51:57,580
edges so that's a bi-directional edge

1197
00:51:53,710 --> 00:51:59,830
and the little tilde those are actually

1198
00:51:57,580 --> 00:52:02,830
the names of the edges and so the little

1199
00:51:59,830 --> 00:52:07,150
tilde is kind of the reverse edge so you

1200
00:52:02,830 --> 00:52:09,610
have a you know a left-to-right edge

1201
00:52:07,150 --> 00:52:11,560
let's say and then the tilde is the is

1202
00:52:09,610 --> 00:52:13,330
the right to left sorry left to right

1203
00:52:11,560 --> 00:52:17,730
and right to left will be the tilde so

1204
00:52:13,330 --> 00:52:17,730
the tilde is the opposite direction a

1205
00:52:46,020 --> 00:52:52,960
Latino socially but let me kind of

1206
00:52:49,510 --> 00:52:56,710
restate the question so you're asking if

1207
00:52:52,960 --> 00:52:58,960
you see a shared engine you know have a

1208
00:52:56,710 --> 00:53:03,100
false positive and then that that

1209
00:52:58,960 --> 00:53:04,210
detection is removed is does that cause

1210
00:53:03,100 --> 00:53:05,920
a problem yes

1211
00:53:04,210 --> 00:53:08,230
so I mean that would actually cause a

1212
00:53:05,920 --> 00:53:10,170
much more expounded problem if one AV

1213
00:53:08,230 --> 00:53:12,550
engine that doesn't have a shared engine

1214
00:53:10,170 --> 00:53:13,960
detects something that isn't actually

1215
00:53:12,550 --> 00:53:16,000
malware and then it becomes a false

1216
00:53:13,960 --> 00:53:17,800
positive and they remove that if one of

1217
00:53:16,000 --> 00:53:20,110
those shared engines detects something

1218
00:53:17,800 --> 00:53:21,820
and that's a false positive yeah that

1219
00:53:20,110 --> 00:53:24,670
would compound to the problem of that

1220
00:53:21,820 --> 00:53:27,430
false positive by you know times the

1221
00:53:24,670 --> 00:53:31,650
number of AV scanner engines times the

1222
00:53:27,430 --> 00:53:31,649
number of customers they have etc yeah

1223
00:53:32,950 --> 00:53:44,138
all right thank you everybody

1224
00:53:35,820 --> 00:53:44,139
[Applause]

