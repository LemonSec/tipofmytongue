1
00:00:24,550 --> 00:00:29,980
all right sorry everyone for the

2
00:00:26,920 --> 00:00:31,060
technical difficulties my laptop didn't

3
00:00:29,980 --> 00:00:33,910
want to communicate with the projector

4
00:00:31,060 --> 00:00:34,300
so we had to come up with an alternate

5
00:00:33,910 --> 00:00:37,000
plan

6
00:00:34,300 --> 00:00:38,470
so I mean jump into things really

7
00:00:37,000 --> 00:00:40,600
quickly because we're already short on

8
00:00:38,470 --> 00:00:41,920
time my name is Aaron bishop I'm a

9
00:00:40,600 --> 00:00:44,050
principal penetration tester at

10
00:00:41,920 --> 00:00:45,910
securitymetrics I've been involved in

11
00:00:44,050 --> 00:00:48,730
the security field for about 10 years

12
00:00:45,910 --> 00:00:51,129
now my starts doing IIT and sysadmin

13
00:00:48,730 --> 00:00:53,559
work taking care of databases web

14
00:00:51,129 --> 00:00:55,900
servers mail servers telephony servers

15
00:00:53,559 --> 00:00:58,690
all sorts of fun stuff and then over the

16
00:00:55,900 --> 00:01:00,910
years I moved away from fixing things to

17
00:00:58,690 --> 00:01:03,579
breaking things I spent this past six

18
00:01:00,910 --> 00:01:04,330
years as a penetration tester today

19
00:01:03,579 --> 00:01:06,729
we're going to be talking about

20
00:01:04,330 --> 00:01:09,670
cross-site request forgery also known as

21
00:01:06,729 --> 00:01:11,259
C surf for the rest of presentation I'll

22
00:01:09,670 --> 00:01:12,729
refer to it SC surf because it's a lot

23
00:01:11,259 --> 00:01:17,770
easier to say and cross-site request

24
00:01:12,729 --> 00:01:23,410
forgery so moving right along what is C

25
00:01:17,770 --> 00:01:25,300
surf Oh wasp defines C surf as it's an

26
00:01:23,410 --> 00:01:26,950
attack that forces an end user to

27
00:01:25,300 --> 00:01:29,200
execute unwanted actions on a web

28
00:01:26,950 --> 00:01:30,729
application and a lot of people they

29
00:01:29,200 --> 00:01:32,289
look at the definitions from a wasp and

30
00:01:30,729 --> 00:01:34,390
the things they put up it doesn't make a

31
00:01:32,289 --> 00:01:37,600
whole lot of sense for me I've

32
00:01:34,390 --> 00:01:39,550
simplified C surf down to just we're

33
00:01:37,600 --> 00:01:42,550
gonna trick a user into doing something

34
00:01:39,550 --> 00:01:44,590
they didn't intend to do and so for the

35
00:01:42,550 --> 00:01:47,590
rest of our presentation here we're

36
00:01:44,590 --> 00:01:51,100
gonna follow our friend Bob throughout

37
00:01:47,590 --> 00:01:53,709
his normal daily actions now I would

38
00:01:51,100 --> 00:01:56,919
have a nice presentation with different

39
00:01:53,709 --> 00:01:58,660
tabs and wind or different windows and

40
00:01:56,920 --> 00:02:11,800
stuff but we don't have that luxury

41
00:01:58,660 --> 00:02:18,940
right now so do it in here all right so

42
00:02:11,800 --> 00:02:21,069
this is our friend Bob so Bob will say

43
00:02:18,940 --> 00:02:23,500
this is his company's website he comes

44
00:02:21,069 --> 00:02:26,200
and he logs into it every day goes about

45
00:02:23,500 --> 00:02:28,030
his work and he uses it when he goes off

46
00:02:26,200 --> 00:02:32,679
to go to lunch or something he updates

47
00:02:28,030 --> 00:02:35,170
his name just display the ease out at

48
00:02:32,680 --> 00:02:38,020
work or out at lunch

49
00:02:35,170 --> 00:02:40,119
so now everybody knows Bob's gone today

50
00:02:38,020 --> 00:02:42,690
where's my wife I must ask not doing any

51
00:02:40,120 --> 00:02:45,670
work he went to lunch and so Bob uses

52
00:02:42,690 --> 00:02:52,650
his time at lunch to visit his favorite

53
00:02:45,670 --> 00:02:59,829
site that hosts some of his favorite

54
00:02:52,650 --> 00:03:01,989
videos online so Bob goes visits his

55
00:02:59,830 --> 00:03:05,520
favorite site it's two watches pink

56
00:03:01,989 --> 00:03:05,520
fluffy unicorns dancing on the rainbow

57
00:03:05,580 --> 00:03:17,880
and when Bob comes back to view his page

58
00:03:10,600 --> 00:03:28,239
I think the browser blocked the attack

59
00:03:17,880 --> 00:03:29,560
okay that's fun so we can actually check

60
00:03:28,239 --> 00:03:32,580
and see if that's what happened here

61
00:03:29,560 --> 00:03:32,580
let's see

62
00:03:37,690 --> 00:03:43,780
yeah all right so browsers do have

63
00:03:40,690 --> 00:03:47,650
built-in C surf protection in some cases

64
00:03:43,780 --> 00:03:51,970
in the sense that this request is trying

65
00:03:47,650 --> 00:03:54,130
to go to a different domain so your

66
00:03:51,970 --> 00:03:57,460
browser blocked that so with that being

67
00:03:54,130 --> 00:04:04,990
the case a lot of these demonstrations

68
00:03:57,460 --> 00:04:14,170
aren't actually going to work so I don't

69
00:04:04,990 --> 00:04:17,190
know if Firefox is on here I'll see a

70
00:04:14,170 --> 00:04:17,190
Firefox hasn't

71
00:04:36,660 --> 00:04:41,220
that's right IV changes develops

72
00:04:38,800 --> 00:04:41,220
username

73
00:05:21,780 --> 00:05:30,989
all right see if Firefox print it and it

74
00:05:25,620 --> 00:05:35,250
did awesome all right well the demo gods

75
00:05:30,990 --> 00:05:39,150
are not happy with me today so that is

76
00:05:35,250 --> 00:05:40,740
an option luckily I kind of all right

77
00:05:39,150 --> 00:05:44,700
document everything that's supposed to

78
00:05:40,740 --> 00:05:46,440
happen and I didn't verify what happened

79
00:05:44,700 --> 00:05:49,080
on those particular browsers probably

80
00:05:46,440 --> 00:05:50,370
should have but I didn't so what would

81
00:05:49,080 --> 00:05:53,789
have happened and what you would have

82
00:05:50,370 --> 00:05:55,620
seen there as Bob would log into let's

83
00:05:53,790 --> 00:05:58,470
say his company site see sort of normal

84
00:05:55,620 --> 00:06:01,080
that page the page would respond by

85
00:05:58,470 --> 00:06:02,760
setting a session identifier something

86
00:06:01,080 --> 00:06:04,469
to indicate the Bob has an active

87
00:06:02,760 --> 00:06:06,590
session keep track keeping track of the

88
00:06:04,470 --> 00:06:10,650
actions that he's doing on the site

89
00:06:06,590 --> 00:06:12,929
things like that and then Bob well then

90
00:06:10,650 --> 00:06:16,320
browse over to his favorite site that's

91
00:06:12,930 --> 00:06:17,970
hosting his unicorn video and on that

92
00:06:16,320 --> 00:06:21,150
site we would see some malicious

93
00:06:17,970 --> 00:06:24,780
JavaScript that submits a post request

94
00:06:21,150 --> 00:06:28,560
to his company site in this case or this

95
00:06:24,780 --> 00:06:31,109
the vulnerable C surf site now Bob's

96
00:06:28,560 --> 00:06:35,850
browser would interpret that request and

97
00:06:31,110 --> 00:06:38,669
then submit the request to the company

98
00:06:35,850 --> 00:06:40,890
site and that will be using Bob's

99
00:06:38,669 --> 00:06:44,099
browser would be using Bob's session so

100
00:06:40,890 --> 00:06:46,080
everything would be presented as it was

101
00:06:44,100 --> 00:06:49,020
Bob making that request to the site now

102
00:06:46,080 --> 00:06:51,620
in this case those requests didn't work

103
00:06:49,020 --> 00:06:53,729
because I was using javascript and those

104
00:06:51,620 --> 00:06:55,770
newer versions of the browsers are

105
00:06:53,729 --> 00:06:58,620
stopping that if you had done it as just

106
00:06:55,770 --> 00:06:59,669
a form just like an HTML form where they

107
00:06:58,620 --> 00:07:01,460
have to click a button or something like

108
00:06:59,669 --> 00:07:05,700
that it wouldn't have been any problem

109
00:07:01,460 --> 00:07:11,400
browsers don't stop those those types of

110
00:07:05,700 --> 00:07:12,840
requests so C surf has been around for a

111
00:07:11,400 --> 00:07:15,359
long time with a really notable attack a

112
00:07:12,840 --> 00:07:17,969
couple years ago known as the goat worm

113
00:07:15,360 --> 00:07:20,340
on Twitter it was known as the goat worm

114
00:07:17,970 --> 00:07:23,280
because users started a user started it

115
00:07:20,340 --> 00:07:24,510
posted a link or tweeted a link and all

116
00:07:23,280 --> 00:07:27,179
of his followers that click the link

117
00:07:24,510 --> 00:07:30,719
would then tweet out a request that said

118
00:07:27,180 --> 00:07:34,870
I like to perform sexually explicit acts

119
00:07:30,720 --> 00:07:41,830
with goats WTF and then the link as well

120
00:07:34,870 --> 00:07:43,450
so the worm multiplied and spread not

121
00:07:41,830 --> 00:07:45,490
sure what happened there

122
00:07:43,450 --> 00:07:48,370
so the worm multiplied and spread and

123
00:07:45,490 --> 00:07:51,850
started with one tweet and then all of

124
00:07:48,370 --> 00:07:52,660
that users followers or when many of I

125
00:07:51,850 --> 00:07:55,390
maybe not all of them

126
00:07:52,660 --> 00:07:57,490
click the tweet and when they click the

127
00:07:55,390 --> 00:07:59,020
link they then tweeted the link out as

128
00:07:57,490 --> 00:08:01,240
well you know why not all of their

129
00:07:59,020 --> 00:08:03,630
followers and I just kept spreading and

130
00:08:01,240 --> 00:08:06,400
propagating and ended up affecting

131
00:08:03,630 --> 00:08:07,840
thousands and thousands maybe hundreds

132
00:08:06,400 --> 00:08:15,969
of thousands of users from the first

133
00:08:07,840 --> 00:08:17,919
couple days so see surf can can be

134
00:08:15,970 --> 00:08:21,400
really harmful or it could be funny

135
00:08:17,920 --> 00:08:23,410
submitting or sending tweets about goats

136
00:08:21,400 --> 00:08:26,560
is kind of funny not particularly

137
00:08:23,410 --> 00:08:30,340
detrimental it could be more harmful in

138
00:08:26,560 --> 00:08:32,200
cases there's one case that or in some

139
00:08:30,340 --> 00:08:34,150
of the pen tests we've done want the

140
00:08:32,200 --> 00:08:36,310
other analyst I work with found an

141
00:08:34,150 --> 00:08:38,439
instance where he could check other

142
00:08:36,309 --> 00:08:40,419
people's kids out of daycare by

143
00:08:38,440 --> 00:08:43,690
exploiting us Easter fatigue

144
00:08:40,419 --> 00:08:46,930
I found sea serpent acts maybe a little

145
00:08:43,690 --> 00:08:48,910
more financially damaging where you know

146
00:08:46,930 --> 00:08:51,699
if somebody would visit my page or click

147
00:08:48,910 --> 00:08:55,510
on my link or whatever would trigger the

148
00:08:51,700 --> 00:08:57,460
attack they would order cheesy bread or

149
00:08:55,510 --> 00:09:00,340
visited my page if they were logged into

150
00:08:57,460 --> 00:09:01,380
a pizza company they would order pizza

151
00:09:00,340 --> 00:09:05,110
and cheesy bread Mountain Dew and

152
00:09:01,380 --> 00:09:07,240
delivered to my house and so in that

153
00:09:05,110 --> 00:09:10,270
case I benefited they were out a couple

154
00:09:07,240 --> 00:09:12,040
bucks for pizza and Mountain Dew and the

155
00:09:10,270 --> 00:09:14,770
company would hang on their face because

156
00:09:12,040 --> 00:09:18,069
their customers were being attacked and

157
00:09:14,770 --> 00:09:21,640
they weren't being protected and see

158
00:09:18,070 --> 00:09:25,930
surf had been on the top ten for a long

159
00:09:21,640 --> 00:09:28,270
time it first appeared in 2007 it was

160
00:09:25,930 --> 00:09:31,030
initially discussed in an OAuth meeting

161
00:09:28,270 --> 00:09:33,400
in 2006 but the attack vector itself has

162
00:09:31,030 --> 00:09:35,439
been known since at least 2001 there was

163
00:09:33,400 --> 00:09:37,329
a white paper published back then

164
00:09:35,440 --> 00:09:38,620
talking about session writing which is

165
00:09:37,330 --> 00:09:45,430
another name for cross-site request

166
00:09:38,620 --> 00:09:48,639
forgery and so with so what yeah a wasp

167
00:09:45,430 --> 00:09:50,349
decided to add it to the top ten in 2007

168
00:09:48,639 --> 00:09:52,720
and it maintained its paw on the OWASP

169
00:09:50,350 --> 00:09:57,910
top 10 until this most recent released

170
00:09:52,720 --> 00:09:59,470
in 2017 2017 it was merged or retired

171
00:09:57,910 --> 00:10:01,559
but it was not forgotten

172
00:09:59,470 --> 00:10:05,589
a wasp said the less than 5% of

173
00:10:01,559 --> 00:10:08,589
applications that were less than 5% of

174
00:10:05,589 --> 00:10:12,429
applications had Caesar identified as an

175
00:10:08,589 --> 00:10:16,529
attack vector personally I think the

176
00:10:12,429 --> 00:10:19,480
numbers a lot higher but a wasp takes

177
00:10:16,529 --> 00:10:20,829
the entire industry into account and so

178
00:10:19,480 --> 00:10:23,110
everybody's gonna have different

179
00:10:20,829 --> 00:10:26,170
opinions it could just be that my sight

180
00:10:23,110 --> 00:10:28,600
sight come acrossed haven't come around

181
00:10:26,170 --> 00:10:31,689
to fixing it yeah I tend I tend to see

182
00:10:28,600 --> 00:10:32,980
it closer to 50% of the time cap decides

183
00:10:31,689 --> 00:10:34,629
today test

184
00:10:32,980 --> 00:10:36,249
end up being vulnerable to cross-site

185
00:10:34,629 --> 00:10:39,489
request forgery in some way shape or

186
00:10:36,249 --> 00:10:42,189
form some instances they think they

187
00:10:39,489 --> 00:10:44,290
fixed cross-site request forgery and a

188
00:10:42,189 --> 00:10:46,299
previous pen test that somebody did but

189
00:10:44,290 --> 00:10:50,110
they didn't actually takes that take the

190
00:10:46,299 --> 00:10:55,449
steps to prevent it they just hit it or

191
00:10:50,110 --> 00:10:58,419
or masked it so I look at some of the

192
00:10:55,449 --> 00:11:00,729
ways that you can protect yourself from

193
00:10:58,419 --> 00:11:02,169
see Cerf obviously if you're using

194
00:11:00,730 --> 00:11:03,129
newest most current browsers they're

195
00:11:02,169 --> 00:11:06,610
gonna verify it a little bit of

196
00:11:03,129 --> 00:11:09,100
protection interrupts your demos now a

197
00:11:06,610 --> 00:11:11,019
really common way probably the most

198
00:11:09,100 --> 00:11:12,910
popular way protect yourself from

199
00:11:11,019 --> 00:11:14,619
cross-site request forgery just use

200
00:11:12,910 --> 00:11:15,790
what's called the synchronizer token and

201
00:11:14,619 --> 00:11:18,279
that's when you just stick a really

202
00:11:15,790 --> 00:11:20,349
large random value into the request

203
00:11:18,279 --> 00:11:23,649
typically into the body of the request

204
00:11:20,350 --> 00:11:27,399
in this instance we would have seen on

205
00:11:23,649 --> 00:11:32,679
the example is the developers just added

206
00:11:27,399 --> 00:11:35,379
a really large sha-256 value as a

207
00:11:32,679 --> 00:11:36,699
parameter in the post body for any

208
00:11:35,379 --> 00:11:39,819
request that changes state in the

209
00:11:36,699 --> 00:11:43,059
application so any requests that Bob

210
00:11:39,819 --> 00:11:45,299
makes after or on the site includes that

211
00:11:43,059 --> 00:11:48,730
request and that interrupts attackers

212
00:11:45,299 --> 00:11:50,529
because it's a large random value which

213
00:11:48,730 --> 00:11:52,509
the attacker doesn't know about so if

214
00:11:50,529 --> 00:11:53,980
they try and submit a request to

215
00:11:52,509 --> 00:11:56,259
ain't change the name like they did

216
00:11:53,980 --> 00:11:58,929
before with name equals Caesar it gets

217
00:11:56,259 --> 00:12:02,129
rejected the site checks and says that

218
00:11:58,929 --> 00:12:02,129
the see sort of taken isn't there

219
00:12:03,949 --> 00:12:10,019
we can see that's what or so if the

220
00:12:06,990 --> 00:12:12,300
attacker then changed to try and adapt

221
00:12:10,019 --> 00:12:16,019
to what the side is done and they start

222
00:12:12,300 --> 00:12:18,569
including the CE surf taken in their

223
00:12:16,019 --> 00:12:21,120
requests that they're making its gonna

224
00:12:18,569 --> 00:12:23,099
check to see if the site is actually

225
00:12:21,120 --> 00:12:25,559
validating the token or if it's just

226
00:12:23,100 --> 00:12:27,749
looking for the sea so surf token

227
00:12:25,559 --> 00:12:30,180
parameter to exist believe it or not

228
00:12:27,749 --> 00:12:33,240
that's a common mistake that a lot of

229
00:12:30,180 --> 00:12:36,180
sites have made so check to see that a

230
00:12:33,240 --> 00:12:38,220
sea sir token parameter whatever they

231
00:12:36,180 --> 00:12:39,779
call it is present in the request but

232
00:12:38,220 --> 00:12:42,120
they don't actually check what the value

233
00:12:39,779 --> 00:12:47,309
of the token is what's is what they're

234
00:12:42,120 --> 00:12:49,230
expecting it's on the demonstration the

235
00:12:47,309 --> 00:12:51,120
attacker would have submitted fake is

236
00:12:49,230 --> 00:12:53,519
the value of the sea surfed in and it

237
00:12:51,120 --> 00:12:55,499
would have succeeded because the site

238
00:12:53,519 --> 00:12:57,629
didn't actually validate it

239
00:12:55,499 --> 00:12:59,699
so if they'd fix it and actually

240
00:12:57,629 --> 00:13:01,740
validate that the token matches the

241
00:12:59,699 --> 00:13:05,399
token that they're expecting and they

242
00:13:01,740 --> 00:13:07,589
would have protected themselves another

243
00:13:05,399 --> 00:13:10,769
option to protect yourself from Caesar

244
00:13:07,589 --> 00:13:13,769
attacks is to require active interaction

245
00:13:10,769 --> 00:13:15,750
from the user that's typically requiring

246
00:13:13,769 --> 00:13:17,160
the user to either re-enter their

247
00:13:15,750 --> 00:13:19,319
password before they're making a change

248
00:13:17,160 --> 00:13:23,089
or doing something substantial like

249
00:13:19,319 --> 00:13:26,399
making a purchase or to require them to

250
00:13:23,089 --> 00:13:29,610
answer a CAPTCHA or something along

251
00:13:26,399 --> 00:13:32,220
those lines you see the required

252
00:13:29,610 --> 00:13:34,649
password a lot on password reset forms

253
00:13:32,220 --> 00:13:36,240
that tends to be popular one where users

254
00:13:34,649 --> 00:13:39,509
have to enter their old password in

255
00:13:36,240 --> 00:13:42,870
order to change to a new password Amazon

256
00:13:39,509 --> 00:13:44,610
has started require or requesting your

257
00:13:42,870 --> 00:13:46,259
password as you're proceeding through

258
00:13:44,610 --> 00:13:48,269
the checkout function just to make sure

259
00:13:46,259 --> 00:13:51,120
that you're actually intending to make

260
00:13:48,269 --> 00:13:54,929
the function but the idea being that

261
00:13:51,120 --> 00:13:56,879
requiring their password it's supposed

262
00:13:54,929 --> 00:13:57,990
to verify that that's the user and the

263
00:13:56,879 --> 00:13:59,790
user actually intends to make the

264
00:13:57,990 --> 00:14:01,980
request the attacker already knows the

265
00:13:59,790 --> 00:14:05,040
user password I don't need to use C surf

266
00:14:01,980 --> 00:14:06,209
to attack site they just log in as the

267
00:14:05,040 --> 00:14:08,329
user and perform the actions on their

268
00:14:06,209 --> 00:14:08,329
own

269
00:14:10,270 --> 00:14:19,220
so it seems to be that there was it was

270
00:14:16,250 --> 00:14:20,540
kind of a switchover in mindset a couple

271
00:14:19,220 --> 00:14:22,610
years ago I don't know if there was a

272
00:14:20,540 --> 00:14:24,829
new batch of developers coming out of

273
00:14:22,610 --> 00:14:26,030
college or just new fancy technology

274
00:14:24,830 --> 00:14:27,770
that was coming out and everybody's

275
00:14:26,030 --> 00:14:29,240
excited about it but a lot of

276
00:14:27,770 --> 00:14:32,120
applications on the internet started

277
00:14:29,240 --> 00:14:35,500
moving towards single page applications

278
00:14:32,120 --> 00:14:38,210
I'm using angular node sales Express

279
00:14:35,500 --> 00:14:40,130
things like that and the sites that were

280
00:14:38,210 --> 00:14:44,020
created were a beautiful they were

281
00:14:40,130 --> 00:14:47,090
dynamic they've had a clean modern fuel

282
00:14:44,020 --> 00:14:49,819
there were a lot more pleasant for users

283
00:14:47,090 --> 00:14:52,610
to interact with it was about that same

284
00:14:49,820 --> 00:14:56,740
time when there was that switch a lot of

285
00:14:52,610 --> 00:14:56,740
people our lost sites started

286
00:14:57,130 --> 00:15:03,860
reintroducing or becoming vulnerable to

287
00:15:01,100 --> 00:15:06,620
cross-site request forgery again the

288
00:15:03,860 --> 00:15:09,800
reason being is that single page

289
00:15:06,620 --> 00:15:13,120
applications as they tend to pass

290
00:15:09,800 --> 00:15:17,719
information back and forth using Ajax

291
00:15:13,120 --> 00:15:23,120
making requests passing JSON with

292
00:15:17,720 --> 00:15:27,080
content type of application JSON so when

293
00:15:23,120 --> 00:15:30,560
a user or if an attacker we're trying to

294
00:15:27,080 --> 00:15:34,760
mimic that behavior and Smid request the

295
00:15:30,560 --> 00:15:36,800
head yeah they had a content type of

296
00:15:34,760 --> 00:15:39,650
application JSON that would trigger the

297
00:15:36,800 --> 00:15:43,069
in browser protections like we saw when

298
00:15:39,650 --> 00:15:49,850
I was trying to do the demos earlier and

299
00:15:43,070 --> 00:15:52,190
I blocked those requests a lot of those

300
00:15:49,850 --> 00:15:56,390
requests if you're trying to submit

301
00:15:52,190 --> 00:15:58,550
requests like that if your your

302
00:15:56,390 --> 00:16:01,220
submitted requests using application

303
00:15:58,550 --> 00:16:06,050
JSON his content type it'll trigger an

304
00:16:01,220 --> 00:16:08,570
options request the demos had worked

305
00:16:06,050 --> 00:16:10,729
we've had a burp log running of the

306
00:16:08,570 --> 00:16:12,590
requests as they were being sent and we

307
00:16:10,730 --> 00:16:15,020
would have seen that when Bob visited

308
00:16:12,590 --> 00:16:17,360
the malicious site instead of sending a

309
00:16:15,020 --> 00:16:22,290
post request I were sent an options

310
00:16:17,360 --> 00:16:24,840
request that options request is a

311
00:16:22,290 --> 00:16:27,540
a result of the core specification that

312
00:16:24,840 --> 00:16:29,520
came out a few years ago if you were in

313
00:16:27,540 --> 00:16:32,719
this top in the talk it took place just

314
00:16:29,520 --> 00:16:35,640
before this course came up briefly

315
00:16:32,720 --> 00:16:38,190
stands for cross-origin resource sharing

316
00:16:35,640 --> 00:16:40,319
it's a specification that dictates how

317
00:16:38,190 --> 00:16:42,240
websites can communicate with each other

318
00:16:40,320 --> 00:16:44,430
how they can share information what

319
00:16:42,240 --> 00:16:46,530
resources one side is enough is allowed

320
00:16:44,430 --> 00:16:49,859
to access from another site and things

321
00:16:46,530 --> 00:16:53,790
of that nature I'm part of the course

322
00:16:49,860 --> 00:16:56,490
specification that say states that non

323
00:16:53,790 --> 00:16:58,199
simple requests require a course

324
00:16:56,490 --> 00:17:00,390
pre-flight that's what that options

325
00:16:58,200 --> 00:17:03,980
request is it's a pre-flight request

326
00:17:00,390 --> 00:17:06,510
preflight request to satisfy the cours

327
00:17:03,980 --> 00:17:08,339
specification just to make sure that

328
00:17:06,510 --> 00:17:11,849
what the site is requesting is actually

329
00:17:08,339 --> 00:17:16,169
allowed by the side that it's requesting

330
00:17:11,849 --> 00:17:19,730
it from now we're we're gonna talk about

331
00:17:16,170 --> 00:17:23,340
cores just briefly specifically about

332
00:17:19,730 --> 00:17:26,790
simple requests the reason being is that

333
00:17:23,339 --> 00:17:29,040
simple requests are it's pretty

334
00:17:26,790 --> 00:17:31,710
straightforward it's a small very

335
00:17:29,040 --> 00:17:34,110
limited subset of all possible requests

336
00:17:31,710 --> 00:17:37,500
that are considered simple it's requests

337
00:17:34,110 --> 00:17:42,840
that are get that are either get method

338
00:17:37,500 --> 00:17:46,290
post method or that use a well it's a

339
00:17:42,840 --> 00:17:49,740
post method that uses a basic HTML form

340
00:17:46,290 --> 00:17:54,120
essentially or what could be submitted

341
00:17:49,740 --> 00:17:56,190
in a basic HTML form whereas all the

342
00:17:54,120 --> 00:17:59,040
other possible requests that are out

343
00:17:56,190 --> 00:18:00,510
there are really large as of talking

344
00:17:59,040 --> 00:18:05,970
about each and every one of those trying

345
00:18:00,510 --> 00:18:10,770
to define a request is non simple a much

346
00:18:05,970 --> 00:18:15,090
bigger pie that's Apple so simple

347
00:18:10,770 --> 00:18:17,700
requests so they're get post or head and

348
00:18:15,090 --> 00:18:19,800
they allow simple headers you can

349
00:18:17,700 --> 00:18:21,690
normally see those headers just in your

350
00:18:19,800 --> 00:18:24,659
normal everyday browsing using the

351
00:18:21,690 --> 00:18:25,380
internet with specific three specific

352
00:18:24,660 --> 00:18:26,670
content types

353
00:18:25,380 --> 00:18:28,490
that are allowed the three that are

354
00:18:26,670 --> 00:18:31,620
allowed if you're using a form element

355
00:18:28,490 --> 00:18:35,280
those being text plain multi-part form

356
00:18:31,620 --> 00:18:38,850
data or application xww

357
00:18:35,280 --> 00:18:41,070
uncoded so it's pretty pretty small

358
00:18:38,850 --> 00:18:44,340
subset of all possible requests are

359
00:18:41,070 --> 00:18:46,470
considered simple and so with the

360
00:18:44,340 --> 00:18:48,419
evolution into single page applications

361
00:18:46,470 --> 00:18:50,760
and everybody moving to using

362
00:18:48,420 --> 00:18:53,760
application JSON as the content type a

363
00:18:50,760 --> 00:18:57,270
lot of requests have no longer fallen

364
00:18:53,760 --> 00:18:59,960
into the simple category the requests

365
00:18:57,270 --> 00:19:03,389
that require a course pre-flight and

366
00:18:59,960 --> 00:19:10,350
therefore lot of browsers are blocking

367
00:19:03,390 --> 00:19:13,410
those requests and then in the

368
00:19:10,350 --> 00:19:18,449
pre-flight all it is is they'll send in

369
00:19:13,410 --> 00:19:20,760
options and the origin site will send in

370
00:19:18,450 --> 00:19:23,130
options and ask with the access control

371
00:19:20,760 --> 00:19:26,010
request and then I'll list off a couple

372
00:19:23,130 --> 00:19:28,320
of the things that it wants or the

373
00:19:26,010 --> 00:19:31,170
special things that make the request not

374
00:19:28,320 --> 00:19:35,790
simple see if they're acceptable by the

375
00:19:31,170 --> 00:19:37,740
other side so the problem with that is

376
00:19:35,790 --> 00:19:40,980
that korres is not a security

377
00:19:37,740 --> 00:19:43,740
specification they explicitly say in the

378
00:19:40,980 --> 00:19:47,540
core specification that it's not a

379
00:19:43,740 --> 00:19:49,260
security specification that all normal

380
00:19:47,540 --> 00:19:51,300
protections should be in place

381
00:19:49,260 --> 00:19:54,090
especially protections related to

382
00:19:51,300 --> 00:19:57,810
cross-site request forgery because any

383
00:19:54,090 --> 00:20:00,300
protection that occurs because of course

384
00:19:57,810 --> 00:20:02,490
being implemented on a browser is

385
00:20:00,300 --> 00:20:04,379
incidental they're not they weren't

386
00:20:02,490 --> 00:20:05,880
trying to secure anything when they

387
00:20:04,380 --> 00:20:12,360
defined when they came up with a

388
00:20:05,880 --> 00:20:15,120
specification so one of the common

389
00:20:12,360 --> 00:20:17,790
things that I've seen that catches

390
00:20:15,120 --> 00:20:20,250
people that are relying on Korres as

391
00:20:17,790 --> 00:20:21,899
their method of protection is they think

392
00:20:20,250 --> 00:20:24,570
that now what are you doing Ajax

393
00:20:21,900 --> 00:20:26,520
requests application JSON for everything

394
00:20:24,570 --> 00:20:29,820
that's in use on our site and so we're

395
00:20:26,520 --> 00:20:32,340
safe we're protected you know cores will

396
00:20:29,820 --> 00:20:36,179
will protect us but then we run into a

397
00:20:32,340 --> 00:20:39,169
problem that if we submit a request it

398
00:20:36,180 --> 00:20:42,480
uses text plane it still passes the body

399
00:20:39,170 --> 00:20:44,790
and what appears to be a JSON object all

400
00:20:42,480 --> 00:20:47,940
the times the sites will validate it or

401
00:20:44,790 --> 00:20:49,100
accept it they're trying to be more more

402
00:20:47,940 --> 00:20:52,669
lenient or forgive

403
00:20:49,100 --> 00:20:55,428
two requests coming in and so they make

404
00:20:52,669 --> 00:20:58,039
it so text plain is acceptable

405
00:20:55,429 --> 00:21:03,250
they just parse the Jason JSON on the

406
00:20:58,039 --> 00:21:06,139
back end text plain is considered simple

407
00:21:03,250 --> 00:21:08,659
no matter what the body actually looks

408
00:21:06,139 --> 00:21:11,269
like your browser is just gonna treat it

409
00:21:08,659 --> 00:21:15,470
as as text just raw text being saying

410
00:21:11,269 --> 00:21:19,279
being sent so even if your entire site

411
00:21:15,470 --> 00:21:20,720
is communicating with the Ajax and

412
00:21:19,279 --> 00:21:23,240
you're passing JSON back and forth

413
00:21:20,720 --> 00:21:25,070
if you accept requests that are text

414
00:21:23,240 --> 00:21:28,450
playing you could be vulnerable to

415
00:21:25,070 --> 00:21:28,450
cross-site request forgery

416
00:21:28,750 --> 00:21:38,840
there's even an even more drastic or

417
00:21:34,100 --> 00:21:47,449
involved way to bypass cores as well see

418
00:21:38,840 --> 00:21:50,240
if this one will actually work so let's

419
00:21:47,450 --> 00:21:58,820
see you've still got Bob he's still out

420
00:21:50,240 --> 00:22:02,090
at lunch so Bob comes back and checks

421
00:21:58,820 --> 00:22:07,730
out his new favorite video yon cat it's

422
00:22:02,090 --> 00:22:10,360
gonna go on for 10 hours and that one

423
00:22:07,730 --> 00:22:10,360
didn't work either

424
00:22:23,850 --> 00:22:32,260
so not entirely sure why that one didn't

425
00:22:30,250 --> 00:22:38,230
work but we'll take a look at what it's

426
00:22:32,260 --> 00:22:40,540
supposed to happen if we go back to our

427
00:22:38,230 --> 00:22:45,030
scenario with Bob we're gonna lift them

428
00:22:40,540 --> 00:22:45,030
off Bob will login to the application

429
00:22:45,420 --> 00:22:57,720
application what's set okey so you see

430
00:22:51,070 --> 00:22:57,720
if I jump ahead to that

431
00:23:02,240 --> 00:23:05,799
[Music]

432
00:23:19,890 --> 00:23:22,549
No

433
00:23:23,360 --> 00:23:28,800
all right so I will just walk through it

434
00:23:26,730 --> 00:23:31,500
in the slideshow I actually have a

435
00:23:28,800 --> 00:23:36,530
working demonstration but another way

436
00:23:31,500 --> 00:23:38,670
and the attackers can bypass cores

437
00:23:36,530 --> 00:23:41,879
perform across that request for degree

438
00:23:38,670 --> 00:23:45,300
attack so Bob logs into the application

439
00:23:41,880 --> 00:23:47,730
gets a an active session and goes to

440
00:23:45,300 --> 00:23:49,230
visit his favorite site that's hosting

441
00:23:47,730 --> 00:23:53,970
the videos he likes to watch while he's

442
00:23:49,230 --> 00:23:56,910
at lunch then embedded on that site we

443
00:23:53,970 --> 00:24:00,570
can either have a more verbose or

444
00:23:56,910 --> 00:24:03,060
visible script that it just creates a an

445
00:24:00,570 --> 00:24:05,399
object on the page which is a flash

446
00:24:03,060 --> 00:24:09,120
object and we pass a couple of

447
00:24:05,400 --> 00:24:11,520
parameters to a flash object or we can

448
00:24:09,120 --> 00:24:14,370
base64 and quote the object and just

449
00:24:11,520 --> 00:24:16,980
include it in an iframe which is a much

450
00:24:14,370 --> 00:24:18,030
easier way to OP you skate the attack so

451
00:24:16,980 --> 00:24:20,880
if somebody were to look at the source

452
00:24:18,030 --> 00:24:22,980
they're probably just see blobs of code

453
00:24:20,880 --> 00:24:26,970
and most people want to care that

454
00:24:22,980 --> 00:24:30,750
there's a base64 encoded object included

455
00:24:26,970 --> 00:24:35,010
on the page and then how the attack

456
00:24:30,750 --> 00:24:39,810
works is Bob's browser would then visit

457
00:24:35,010 --> 00:24:43,379
the vulnerable or the malicious flash

458
00:24:39,810 --> 00:24:47,460
page and visits the malicious flash page

459
00:24:43,380 --> 00:24:51,090
it passes in most parameters first

460
00:24:47,460 --> 00:24:53,280
parameter being the API or the endpoint

461
00:24:51,090 --> 00:24:56,310
that we're actually targeting on the

462
00:24:53,280 --> 00:24:59,100
vulnerable site request method that

463
00:24:56,310 --> 00:25:01,020
we're going to use post content type the

464
00:24:59,100 --> 00:25:05,370
request should be which is application

465
00:25:01,020 --> 00:25:09,090
JSON and then the actual data that we're

466
00:25:05,370 --> 00:25:12,570
submitting to the page and finally we're

467
00:25:09,090 --> 00:25:16,050
gonna pass in a redirect page just a PHP

468
00:25:12,570 --> 00:25:19,620
redirect page and so the flash object is

469
00:25:16,050 --> 00:25:23,970
going to then submit a request to the

470
00:25:19,620 --> 00:25:25,709
redirect page with all or using those

471
00:25:23,970 --> 00:25:28,980
parameters are passed to it to construct

472
00:25:25,710 --> 00:25:32,870
a request and so the endpoint that's

473
00:25:28,980 --> 00:25:36,789
gonna be passed to the redirect page is

474
00:25:32,870 --> 00:25:39,709
yeah this endpoint on the vulnerable say

475
00:25:36,789 --> 00:25:41,390
and then the request is sent to the

476
00:25:39,710 --> 00:25:44,419
redirect page it's passing with a

477
00:25:41,390 --> 00:25:48,169
content type of application JSON with

478
00:25:44,419 --> 00:25:49,370
the actual JSON data and the body and

479
00:25:48,169 --> 00:25:52,539
then our redirect page which is

480
00:25:49,370 --> 00:25:58,309
literally one line of PHP that just

481
00:25:52,539 --> 00:26:00,530
performs a 307 redirect we'll take all

482
00:25:58,309 --> 00:26:02,990
those take the information that came

483
00:26:00,530 --> 00:26:08,360
into it with a post request and just

484
00:26:02,990 --> 00:26:11,750
submit it to a new location and so we

485
00:26:08,360 --> 00:26:14,959
end up with a post to the vulnerable

486
00:26:11,750 --> 00:26:19,130
page that looks like it came from from

487
00:26:14,960 --> 00:26:22,039
Bob's Burgers or with the actual or with

488
00:26:19,130 --> 00:26:30,740
the body to change the change Bob's name

489
00:26:22,039 --> 00:26:32,900
and it's using Bob's session so a couple

490
00:26:30,740 --> 00:26:35,059
things went on that tack that you didn't

491
00:26:32,900 --> 00:26:37,100
actually get to see but I had a walk

492
00:26:35,059 --> 00:26:39,879
order that I walked you through

493
00:26:37,100 --> 00:26:44,658
so why was flash used flash came out

494
00:26:39,880 --> 00:26:48,110
with a cross domain policy several years

495
00:26:44,659 --> 00:26:50,510
before the course policy came about so

496
00:26:48,110 --> 00:26:52,820
they flash doesn't respect cores or

497
00:26:50,510 --> 00:26:54,200
specification they don't adhere to it

498
00:26:52,820 --> 00:26:57,649
they just kind of do their own thing and

499
00:26:54,200 --> 00:27:03,110
then we use a 307 redirect number 302

500
00:26:57,650 --> 00:27:05,750
because 302 redirects ignore the method

501
00:27:03,110 --> 00:27:08,959
that was used if you redirect a post

502
00:27:05,750 --> 00:27:11,659
with a 302 it'll tend to do a get or as

503
00:27:08,960 --> 00:27:14,330
the 307 will honor everything about the

504
00:27:11,659 --> 00:27:16,880
request that came in so who we submitted

505
00:27:14,330 --> 00:27:20,740
a post with a specific content type and

506
00:27:16,880 --> 00:27:23,720
body to a 307 and 307 keeps the request

507
00:27:20,740 --> 00:27:27,429
as it originally appeared and just

508
00:27:23,720 --> 00:27:27,429
redirects it to a new host

509
00:27:28,600 --> 00:27:37,580
so well it may seem that there's always

510
00:27:33,440 --> 00:27:40,070
ways to potentially get around C surf

511
00:27:37,580 --> 00:27:42,350
protections that are out there active

512
00:27:40,070 --> 00:27:44,539
and passive protections do you work with

513
00:27:42,350 --> 00:27:47,059
an ax works next to passive protections

514
00:27:44,539 --> 00:27:48,930
because if cross-site scripting is it

515
00:27:47,059 --> 00:27:51,559
exists on the site

516
00:27:48,930 --> 00:27:53,970
and passive protections won't work

517
00:27:51,559 --> 00:27:57,690
cross-site scripting can be used if

518
00:27:53,970 --> 00:28:00,480
you're including that's Hogan and the

519
00:27:57,690 --> 00:28:04,230
request you can grab that token with

520
00:28:00,480 --> 00:28:06,990
JavaScript and spy pass across site

521
00:28:04,230 --> 00:28:09,510
request forgery protections actually

522
00:28:06,990 --> 00:28:12,450
perform that attack like that on a

523
00:28:09,510 --> 00:28:17,190
client just a couple days ago where they

524
00:28:12,450 --> 00:28:19,110
had they had their c-cert oaken token

525
00:28:17,190 --> 00:28:21,450
included in all the requests it was

526
00:28:19,110 --> 00:28:22,770
large it was random checked them but

527
00:28:21,450 --> 00:28:27,030
they had cross-site scripting on a

528
00:28:22,770 --> 00:28:30,470
couple of their pages and their C surf

529
00:28:27,030 --> 00:28:33,270
talkin was valid for the entire session

530
00:28:30,470 --> 00:28:35,850
and it didn't change so if I got it once

531
00:28:33,270 --> 00:28:38,190
then I could perform any attack or

532
00:28:35,850 --> 00:28:43,320
perform any request as if I was that

533
00:28:38,190 --> 00:28:46,950
user using their ever see surf token so

534
00:28:43,320 --> 00:28:48,030
keep that in mind when you're trying to

535
00:28:46,950 --> 00:28:51,140
protect if you're trying to protect

536
00:28:48,030 --> 00:28:55,770
yourself from cross-site request forgery

537
00:28:51,140 --> 00:28:58,830
so some final thoughts every state

538
00:28:55,770 --> 00:29:00,480
changing request should be protected

539
00:28:58,830 --> 00:29:02,760
from cross-site request forgery

540
00:29:00,480 --> 00:29:04,790
whether it be logging in changing the

541
00:29:02,760 --> 00:29:07,620
username changing your password

542
00:29:04,790 --> 00:29:10,470
transferring money whatever is going on

543
00:29:07,620 --> 00:29:12,510
on the site if it's changing the state

544
00:29:10,470 --> 00:29:15,420
of the application it should be

545
00:29:12,510 --> 00:29:19,520
protected and you can either protect it

546
00:29:15,420 --> 00:29:19,520
with either active or passive measures

547
00:29:20,210 --> 00:29:27,450
don't rely on Caesar protection well

548
00:29:23,400 --> 00:29:29,160
know if your framework is using includes

549
00:29:27,450 --> 00:29:31,670
some form of C surf protection make sure

550
00:29:29,160 --> 00:29:34,559
that it's actually enabled and working

551
00:29:31,670 --> 00:29:36,840
I've come across several clients or

552
00:29:34,559 --> 00:29:38,970
customers that you know I'll report

553
00:29:36,840 --> 00:29:40,260
cross-site request forgery on there and

554
00:29:38,970 --> 00:29:42,200
their penetration test and they'll come

555
00:29:40,260 --> 00:29:44,280
back and say our framework says it

556
00:29:42,200 --> 00:29:46,590
influence cross-site request forgery why

557
00:29:44,280 --> 00:29:48,480
isn't it working like well honey if your

558
00:29:46,590 --> 00:29:50,428
requests included a cross-site request

559
00:29:48,480 --> 00:29:52,620
forgery token or any sort of random data

560
00:29:50,429 --> 00:29:54,660
/ to prevent the attack are you guys

561
00:29:52,620 --> 00:29:55,949
sure that you enabled it all times it's

562
00:29:54,660 --> 00:29:58,679
as simple as they didn't go into a

563
00:29:55,950 --> 00:30:00,390
config file and but see Cerf equals true

564
00:29:58,679 --> 00:30:03,980
or C sir protection equals true or

565
00:30:00,390 --> 00:30:03,980
whatever the framework Adam do

566
00:30:06,500 --> 00:30:12,390
so if you want any more information

567
00:30:09,799 --> 00:30:18,450
there's some of the resources that I

568
00:30:12,390 --> 00:30:23,100
used this swf json c surf they have a

569
00:30:18,450 --> 00:30:27,179
really useful tool to craft to surf

570
00:30:23,100 --> 00:30:28,500
attacks using flash so sorry no man that

571
00:30:27,179 --> 00:30:32,039
now the demonstrations work so you could

572
00:30:28,500 --> 00:30:33,360
see all that cool stuff but good news is

573
00:30:32,039 --> 00:30:33,870
you get out here a few minutes early for

574
00:30:33,360 --> 00:30:36,260
lunch

575
00:30:33,870 --> 00:30:37,020
so there you go

576
00:30:36,260 --> 00:30:41,549
[Music]

577
00:30:37,020 --> 00:30:41,549
[Applause]

