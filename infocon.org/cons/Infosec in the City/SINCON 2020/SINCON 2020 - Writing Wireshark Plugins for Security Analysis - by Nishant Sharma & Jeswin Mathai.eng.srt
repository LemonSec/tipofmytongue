1
00:00:04,240 --> 00:00:05,359
hello i'm casey

2
00:00:05,359 --> 00:00:07,200
and i hope you've enjoyed the simcon

3
00:00:07,200 --> 00:00:09,120
conference the past two days

4
00:00:09,120 --> 00:00:11,519
now last but not least let us welcome

5
00:00:11,519 --> 00:00:12,799
nishant and jaswin

6
00:00:12,799 --> 00:00:14,400
who will be teaching us about writing

7
00:00:14,400 --> 00:00:18,080
wireshark plugins for security analysis

8
00:00:18,080 --> 00:00:21,039
hello guys welcome to the event uh this

9
00:00:21,039 --> 00:00:21,439
is

10
00:00:21,439 --> 00:00:23,680
writing wireshark plugins for security

11
00:00:23,680 --> 00:00:25,119
analysis workshop

12
00:00:25,119 --> 00:00:27,359
so before moving to the main content a

13
00:00:27,359 --> 00:00:28,880
little bit introduction

14
00:00:28,880 --> 00:00:31,119
my name is nishant i work for pentester

15
00:00:31,119 --> 00:00:32,159
academy

16
00:00:32,159 --> 00:00:34,079
before working with them i was working

17
00:00:34,079 --> 00:00:35,200
for another company

18
00:00:35,200 --> 00:00:38,079
which used to create access points for

19
00:00:38,079 --> 00:00:38,879
enterprises

20
00:00:38,879 --> 00:00:40,640
and the wi-fi intrusion prevention

21
00:00:40,640 --> 00:00:42,879
system i have a master's degree in

22
00:00:42,879 --> 00:00:45,360
information security and for a couple of

23
00:00:45,360 --> 00:00:46,800
years now i am

24
00:00:46,800 --> 00:00:48,800
training and you know presenting my

25
00:00:48,800 --> 00:00:51,039
research at different different

26
00:00:51,039 --> 00:00:54,480
conferences worldwide uh justin mathai

27
00:00:54,480 --> 00:00:56,320
is the person who has you know

28
00:00:56,320 --> 00:00:58,000
contributed a lot to this workshop

29
00:00:58,000 --> 00:01:01,199
and uh he's my portrait trainer also uh

30
00:01:01,199 --> 00:01:03,920
this time it's virtual so you know he

31
00:01:03,920 --> 00:01:04,400
was

32
00:01:04,400 --> 00:01:06,320
mainly dealing with the support and all

33
00:01:06,320 --> 00:01:08,080
the things but you know he had

34
00:01:08,080 --> 00:01:10,880
a very good contribution to this uh he

35
00:01:10,880 --> 00:01:12,720
is a security researcher

36
00:01:12,720 --> 00:01:15,200
at pentester academy and uh you know

37
00:01:15,200 --> 00:01:16,159
with me

38
00:01:16,159 --> 00:01:18,880
and with the team for past couple of

39
00:01:18,880 --> 00:01:19,360
years

40
00:01:19,360 --> 00:01:21,280
he has been publishing research you know

41
00:01:21,280 --> 00:01:22,479
he he is

42
00:01:22,479 --> 00:01:26,640
training people across the globe

43
00:01:26,640 --> 00:01:29,119
some cool logos for the conferences

44
00:01:29,119 --> 00:01:31,920
where you know we we have been

45
00:01:31,920 --> 00:01:35,439
so pentesteracademy.com is a on-demand

46
00:01:35,439 --> 00:01:36,479
video course

47
00:01:36,479 --> 00:01:40,640
website website

48
00:01:40,640 --> 00:01:43,360
so pentesteracademy.com is the main

49
00:01:43,360 --> 00:01:45,280
website on which we have a different

50
00:01:45,280 --> 00:01:46,399
different courses

51
00:01:46,399 --> 00:01:49,439
related to security and then we also

52
00:01:49,439 --> 00:01:50,159
operate at

53
00:01:50,159 --> 00:01:53,360
defense.com which is a browser-based

54
00:01:53,360 --> 00:01:58,000
cloud lab so the main usp of the lab is

55
00:01:58,000 --> 00:01:59,759
that you don't need any vpn you don't

56
00:01:59,759 --> 00:02:01,040
need any plugin

57
00:02:01,040 --> 00:02:03,920
just a web browser is enough so now

58
00:02:03,920 --> 00:02:04,799
coming to the

59
00:02:04,799 --> 00:02:08,239
workshop outline first we are going to

60
00:02:08,239 --> 00:02:08,959
talk about

61
00:02:08,959 --> 00:02:11,920
uh the basics of wireshark plugins uh

62
00:02:11,920 --> 00:02:12,720
what kind of

63
00:02:12,720 --> 00:02:14,959
plugins are there and then we will also

64
00:02:14,959 --> 00:02:17,200
take a hello world example

65
00:02:17,200 --> 00:02:20,080
of different kind of plugins and then we

66
00:02:20,080 --> 00:02:21,599
will talk about the heuristics

67
00:02:21,599 --> 00:02:23,440
dissector and then you know we will go

68
00:02:23,440 --> 00:02:25,120
ahead and we will also see

69
00:02:25,120 --> 00:02:28,319
how plugins can be dealt for

70
00:02:28,319 --> 00:02:32,799
conventional and newer protocols

71
00:02:33,760 --> 00:02:36,640
so what is the motivation for creating

72
00:02:36,640 --> 00:02:38,959
these wireshark plugins

73
00:02:38,959 --> 00:02:41,200
so these wireshark plugins are actually

74
00:02:41,200 --> 00:02:42,800
a very specialized

75
00:02:42,800 --> 00:02:46,160
specific compact code that

76
00:02:46,160 --> 00:02:49,280
is to perform a specific task

77
00:02:49,280 --> 00:02:52,000
so now uh wireshark is a very popular

78
00:02:52,000 --> 00:02:52,400
tool

79
00:02:52,400 --> 00:02:54,959
it's been around for quite some time now

80
00:02:54,959 --> 00:02:55,440
and

81
00:02:55,440 --> 00:02:58,560
the main objective of this tool or the

82
00:02:58,560 --> 00:02:59,760
main work that

83
00:02:59,760 --> 00:03:02,560
people do with this is the microanalysis

84
00:03:02,560 --> 00:03:03,599
so suppose

85
00:03:03,599 --> 00:03:05,040
you know you are working on something

86
00:03:05,040 --> 00:03:07,280
and now you want to debug the

87
00:03:07,280 --> 00:03:09,040
the protocol you want to see what is

88
00:03:09,040 --> 00:03:10,480
happening with the packets what kind of

89
00:03:10,480 --> 00:03:12,159
packets are going and coming

90
00:03:12,159 --> 00:03:15,040
right what kind of values are there so

91
00:03:15,040 --> 00:03:17,040
you can do that with wireshark you can

92
00:03:17,040 --> 00:03:19,840
take the trace

93
00:03:44,840 --> 00:03:47,840
hmm

94
00:03:49,360 --> 00:03:51,120
you can take the trace you can look into

95
00:03:51,120 --> 00:03:53,280
the packets and what's happening right

96
00:03:53,280 --> 00:03:55,760
but what if if you want to do macro

97
00:03:55,760 --> 00:03:56,959
analysis with it

98
00:03:56,959 --> 00:03:59,519
so when we see macro analysis it means

99
00:03:59,519 --> 00:04:00,000
you know you

100
00:04:00,000 --> 00:04:04,080
want to come to some conclusion or you

101
00:04:04,080 --> 00:04:05,680
want to create a summary

102
00:04:05,680 --> 00:04:08,799
after looking at multiple packets so

103
00:04:08,799 --> 00:04:09,439
that's the

104
00:04:09,439 --> 00:04:10,959
point here because you know when you can

105
00:04:10,959 --> 00:04:12,959
do that you can detect

106
00:04:12,959 --> 00:04:15,360
attacks by correlation you can see a

107
00:04:15,360 --> 00:04:16,639
pattern and you can

108
00:04:16,639 --> 00:04:18,399
say that this kind of activity is

109
00:04:18,399 --> 00:04:19,839
happening right

110
00:04:19,839 --> 00:04:22,079
uh so we will take example of uh all of

111
00:04:22,079 --> 00:04:23,520
this you know later in the

112
00:04:23,520 --> 00:04:26,800
slides uh second thing suppose you're

113
00:04:26,800 --> 00:04:28,000
working for some company

114
00:04:28,000 --> 00:04:29,600
or you know you are working on your own

115
00:04:29,600 --> 00:04:31,440
project which has a custom

116
00:04:31,440 --> 00:04:34,000
or proprietary protocol right so in that

117
00:04:34,000 --> 00:04:35,199
case uh

118
00:04:35,199 --> 00:04:37,919
it will be it is very likely that

119
00:04:37,919 --> 00:04:40,000
wireshark will not be able to understand

120
00:04:40,000 --> 00:04:41,520
what the packet is

121
00:04:41,520 --> 00:04:43,919
and you you will only see the chunk of

122
00:04:43,919 --> 00:04:44,800
data right

123
00:04:44,800 --> 00:04:46,960
so now if you're doing it day in day out

124
00:04:46,960 --> 00:04:47,919
it makes sense

125
00:04:47,919 --> 00:04:50,000
uh to write a plugin which will actually

126
00:04:50,000 --> 00:04:51,199
understand that

127
00:04:51,199 --> 00:04:53,120
and it will be the structure is known to

128
00:04:53,120 --> 00:04:54,320
you right because it is

129
00:04:54,320 --> 00:04:56,400
your company's protocol or your own

130
00:04:56,400 --> 00:04:57,840
custom protocol

131
00:04:57,840 --> 00:04:59,919
so once you do that you don't have to

132
00:04:59,919 --> 00:05:00,880
deal with all the

133
00:05:00,880 --> 00:05:03,199
hacks and uh you know those those values

134
00:05:03,199 --> 00:05:04,800
again and again right

135
00:05:04,800 --> 00:05:07,840
uh third one as i already mentioned when

136
00:05:07,840 --> 00:05:08,639
you have

137
00:05:08,639 --> 00:05:11,840
power of macro analysis you can detect

138
00:05:11,840 --> 00:05:14,639
attacks you can detect a lot of things

139
00:05:14,639 --> 00:05:15,520
and

140
00:05:15,520 --> 00:05:18,400
why why shark because wildshark is

141
00:05:18,400 --> 00:05:20,240
everywhere it is well maintained it is

142
00:05:20,240 --> 00:05:20,880
free

143
00:05:20,880 --> 00:05:23,280
it is available on all platforms you

144
00:05:23,280 --> 00:05:24,080
know it is available

145
00:05:24,080 --> 00:05:26,320
on osx it is available on linux and

146
00:05:26,320 --> 00:05:27,680
windows as well

147
00:05:27,680 --> 00:05:30,720
so you can do it on any platform uh

148
00:05:30,720 --> 00:05:32,479
without you know having a need

149
00:05:32,479 --> 00:05:36,320
to move to linux or something

150
00:05:36,400 --> 00:05:39,280
now how to create these wireshark

151
00:05:39,280 --> 00:05:40,560
plugins

152
00:05:40,560 --> 00:05:43,440
so you have two options first one is to

153
00:05:43,440 --> 00:05:44,240
use

154
00:05:44,240 --> 00:05:47,120
lua scripts so lua is this language

155
00:05:47,120 --> 00:05:48,000
which is

156
00:05:48,000 --> 00:05:49,919
uh high level and it is more like

157
00:05:49,919 --> 00:05:51,280
english so it is more

158
00:05:51,280 --> 00:05:54,160
you know easier for new people to grasp

159
00:05:54,160 --> 00:05:55,759
then the other option is

160
00:05:55,759 --> 00:05:59,039
to use c and c plus plus now we know

161
00:05:59,039 --> 00:06:00,479
that c and c plus plus

162
00:06:00,479 --> 00:06:02,720
it is also a high level language but it

163
00:06:02,720 --> 00:06:04,720
is not very user friendly

164
00:06:04,720 --> 00:06:06,479
because a lot of things you have to do

165
00:06:06,479 --> 00:06:08,639
on your own uh even if you are using

166
00:06:08,639 --> 00:06:10,960
libraries it it is better if you have

167
00:06:10,960 --> 00:06:12,400
done this before right

168
00:06:12,400 --> 00:06:15,120
for new people it is not that easy so

169
00:06:15,120 --> 00:06:17,520
what we did we actually went with lower

170
00:06:17,520 --> 00:06:20,400
why uh it's obvious right uh it is user

171
00:06:20,400 --> 00:06:22,319
friendly uh and the second thing

172
00:06:22,319 --> 00:06:24,479
uh there is no compilation needed in

173
00:06:24,479 --> 00:06:25,360
this case

174
00:06:25,360 --> 00:06:27,600
so you can just write the lua script and

175
00:06:27,600 --> 00:06:29,440
then you can put the code

176
00:06:29,440 --> 00:06:31,360
in the plugins directory and it will run

177
00:06:31,360 --> 00:06:32,720
out of the box

178
00:06:32,720 --> 00:06:35,680
uh so if you go with c or c plus plus

179
00:06:35,680 --> 00:06:36,880
you know the drill right

180
00:06:36,880 --> 00:06:38,639
you will write the code you will compile

181
00:06:38,639 --> 00:06:40,080
it you will put it you know where

182
00:06:40,080 --> 00:06:43,199
it is supposed to be and if something is

183
00:06:43,199 --> 00:06:45,199
wrong or if you want to enhance it or

184
00:06:45,199 --> 00:06:46,080
modify it

185
00:06:46,080 --> 00:06:49,199
you have to repeat the cycle so choosing

186
00:06:49,199 --> 00:06:52,560
lua will actually reduce on the work

187
00:06:52,560 --> 00:06:54,240
uh at least now you know when you are

188
00:06:54,240 --> 00:06:56,560
learning about it

189
00:06:56,560 --> 00:06:59,919
so now how to locate the plugins folders

190
00:06:59,919 --> 00:07:00,319
right

191
00:07:00,319 --> 00:07:02,960
where the plugins are so that's very

192
00:07:02,960 --> 00:07:03,599
easy

193
00:07:03,599 --> 00:07:06,800
you open your wireshark you go to help

194
00:07:06,800 --> 00:07:09,759
and from there you go to about wireshark

195
00:07:09,759 --> 00:07:10,639
and then

196
00:07:10,639 --> 00:07:13,440
it will show you the folders and you you

197
00:07:13,440 --> 00:07:14,000
can go

198
00:07:14,000 --> 00:07:16,319
with those filters then so i will show

199
00:07:16,319 --> 00:07:17,520
you now

200
00:07:17,520 --> 00:07:19,360
i'm using windows but you know you can

201
00:07:19,360 --> 00:07:21,680
use ubuntu you can use any other linux

202
00:07:21,680 --> 00:07:23,759
or you can use kali linux if you want or

203
00:07:23,759 --> 00:07:30,400
similarly for osx as well

204
00:07:30,400 --> 00:07:33,919
so this is the y sharp now you go to

205
00:07:33,919 --> 00:07:35,360
help

206
00:07:35,360 --> 00:07:38,960
and in help you go to about y sharp

207
00:07:38,960 --> 00:07:43,280
and you can see that it's a 3.0.6

208
00:07:43,280 --> 00:07:46,960
and here you can observe that

209
00:07:46,960 --> 00:07:49,759
we have different different uh folders

210
00:07:49,759 --> 00:07:51,280
so

211
00:07:51,280 --> 00:07:54,160
this is the personal plugin folder right

212
00:07:54,160 --> 00:07:54,479
so

213
00:07:54,479 --> 00:07:56,800
suppose if i only want to do this for me

214
00:07:56,800 --> 00:07:58,160
for my user

215
00:07:58,160 --> 00:08:00,479
i'll use this if i want to do it

216
00:08:00,479 --> 00:08:03,759
globally then you know i'll use this one

217
00:08:03,759 --> 00:08:05,520
and if you click on it it will open it

218
00:08:05,520 --> 00:08:08,240
up so

219
00:08:08,240 --> 00:08:11,360
uh but don't put it these in both places

220
00:08:11,360 --> 00:08:12,800
right because

221
00:08:12,800 --> 00:08:15,919
what will happen then so yeah also

222
00:08:15,919 --> 00:08:17,919
it's very important to understand this

223
00:08:17,919 --> 00:08:19,680
one is not for lu okay

224
00:08:19,680 --> 00:08:22,960
so this one is for lua

225
00:08:22,960 --> 00:08:24,639
so also it is very important to

226
00:08:24,639 --> 00:08:26,160
understand that don't put

227
00:08:26,160 --> 00:08:28,479
these in both places right otherwise you

228
00:08:28,479 --> 00:08:30,240
will see duplicates

229
00:08:30,240 --> 00:08:32,479
so that's that's not good so if you have

230
00:08:32,479 --> 00:08:33,440
the binary ones

231
00:08:33,440 --> 00:08:36,240
if you see these are the locations if

232
00:08:36,240 --> 00:08:37,599
you are using lua then

233
00:08:37,599 --> 00:08:39,839
these are the locations so i have

234
00:08:39,839 --> 00:08:40,880
already opened

235
00:08:40,880 --> 00:08:44,399
this one so let's see currently it is

236
00:08:44,399 --> 00:08:48,640
blank so

237
00:08:50,800 --> 00:08:53,279
there you go totally blank nothing is

238
00:08:53,279 --> 00:08:54,160
there

239
00:08:54,160 --> 00:08:56,399
so we will now put something here and

240
00:08:56,399 --> 00:08:57,440
then you know we will

241
00:08:57,440 --> 00:09:00,959
see how all of this is working so now

242
00:09:00,959 --> 00:09:03,920
going back to slides

243
00:09:06,320 --> 00:09:09,839
so if we talk

244
00:09:19,120 --> 00:09:22,000
so if we talk about the plugin types you

245
00:09:22,000 --> 00:09:23,120
can broadly

246
00:09:23,120 --> 00:09:26,080
categorize these into two categories

247
00:09:26,080 --> 00:09:27,360
first is the dissector

248
00:09:27,360 --> 00:09:30,480
and the other one is the listener or tab

249
00:09:30,480 --> 00:09:32,800
so in dissector you will have again

250
00:09:32,800 --> 00:09:34,320
different sub categories you will have

251
00:09:34,320 --> 00:09:36,320
the chain dissector the post dissector

252
00:09:36,320 --> 00:09:37,519
and the heuristics

253
00:09:37,519 --> 00:09:40,959
dissectors so

254
00:09:40,959 --> 00:09:44,320
let's see what a dissector is so suppose

255
00:09:44,320 --> 00:09:45,839
you know whenever you're getting a

256
00:09:45,839 --> 00:09:47,440
packet in wireshark

257
00:09:47,440 --> 00:09:49,360
and you are seeing this very beautiful

258
00:09:49,360 --> 00:09:51,040
tree created right

259
00:09:51,040 --> 00:09:53,040
so what i'm talking about i'll just open

260
00:09:53,040 --> 00:09:54,720
one

261
00:09:54,720 --> 00:09:58,399
p cap and i'll show you what i actually

262
00:10:02,839 --> 00:10:05,839
meant

263
00:10:20,560 --> 00:10:23,680
so here you can see that all of our dns

264
00:10:23,680 --> 00:10:33,839
traffic is here and uh

265
00:10:38,079 --> 00:10:41,199
and what you can

266
00:10:42,320 --> 00:10:44,320
so here you can see that all of dns

267
00:10:44,320 --> 00:10:46,480
packets are there and

268
00:10:46,480 --> 00:10:49,360
if you select any one of these you will

269
00:10:49,360 --> 00:10:51,200
be able to see all the layers

270
00:10:51,200 --> 00:10:53,120
so you can see that the ethernet is the

271
00:10:53,120 --> 00:10:54,240
first one and then

272
00:10:54,240 --> 00:10:57,040
you know it is the ip layer and then

273
00:10:57,040 --> 00:10:58,800
obviously the udp

274
00:10:58,800 --> 00:11:01,680
and in the end the dns one is there

275
00:11:01,680 --> 00:11:02,240
right

276
00:11:02,240 --> 00:11:05,279
so this is the tree that i'm talking

277
00:11:05,279 --> 00:11:06,160
about right

278
00:11:06,160 --> 00:11:09,279
so so easy it is to you know to navigate

279
00:11:09,279 --> 00:11:09,600
it

280
00:11:09,600 --> 00:11:12,240
to find the information that you need

281
00:11:12,240 --> 00:11:14,399
all of this is here

282
00:11:14,399 --> 00:11:17,600
so now how this tree is created so what

283
00:11:17,600 --> 00:11:18,399
happens

284
00:11:18,399 --> 00:11:21,200
when this packet will be sent to y shark

285
00:11:21,200 --> 00:11:22,160
uh it will go

286
00:11:22,160 --> 00:11:24,959
through a number of dissectors which

287
00:11:24,959 --> 00:11:26,720
will process it and then you know it

288
00:11:26,720 --> 00:11:27,279
will

289
00:11:27,279 --> 00:11:30,000
give it back so you know just remember

290
00:11:30,000 --> 00:11:30,640
this part

291
00:11:30,640 --> 00:11:34,560
the ethernet the ip the udp and the dns

292
00:11:34,560 --> 00:11:36,640
so you can see it's kind of you know we

293
00:11:36,640 --> 00:11:38,240
are moving up

294
00:11:38,240 --> 00:11:41,040
uh the network model right you have your

295
00:11:41,040 --> 00:11:42,000
application layer you

296
00:11:42,000 --> 00:11:43,839
have your transport layer then you have

297
00:11:43,839 --> 00:11:45,279
your networking layer

298
00:11:45,279 --> 00:11:46,959
and then you also have your mac layer

299
00:11:46,959 --> 00:11:50,319
right so

300
00:11:50,639 --> 00:11:54,000
if we go back to the slides

301
00:11:54,000 --> 00:11:57,040
what happens when so packet what

302
00:11:57,040 --> 00:11:59,680
is it is right a packet is nothing but a

303
00:11:59,680 --> 00:12:01,440
collection of bits right at the end of

304
00:12:01,440 --> 00:12:03,680
the day it's just a collection of bits

305
00:12:03,680 --> 00:12:06,560
that represents something so when i say

306
00:12:06,560 --> 00:12:07,279
something

307
00:12:07,279 --> 00:12:10,399
half of it or most or some of it

308
00:12:10,399 --> 00:12:13,360
is actually related to the protocol that

309
00:12:13,360 --> 00:12:14,240
will be used

310
00:12:14,240 --> 00:12:17,279
to transmit to understand it and then

311
00:12:17,279 --> 00:12:19,680
uh there is the real data right so what

312
00:12:19,680 --> 00:12:21,200
we do uh when the first

313
00:12:21,200 --> 00:12:23,360
time packet will be given to varshar

314
00:12:23,360 --> 00:12:24,880
wireshark will be

315
00:12:24,880 --> 00:12:27,760
passing it to the first dissector in the

316
00:12:27,760 --> 00:12:28,639
chain

317
00:12:28,639 --> 00:12:30,639
so in this case the first dissector is

318
00:12:30,639 --> 00:12:31,839
ethernet

319
00:12:31,839 --> 00:12:33,760
if you have a radio tab also on that

320
00:12:33,760 --> 00:12:35,839
then the first will be the radio tab

321
00:12:35,839 --> 00:12:38,480
and one shark has conditions which are

322
00:12:38,480 --> 00:12:39,200
defined

323
00:12:39,200 --> 00:12:41,680
in these dissectors uh you know which

324
00:12:41,680 --> 00:12:43,120
help wireshark to choose

325
00:12:43,120 --> 00:12:46,000
which director to send it right so if it

326
00:12:46,000 --> 00:12:48,240
is a wi-fi packet it will go accordingly

327
00:12:48,240 --> 00:12:51,440
to another sector if it is a lan packet

328
00:12:51,440 --> 00:12:53,920
then it will be accepted by some other

329
00:12:53,920 --> 00:12:55,600
other receptor right

330
00:12:55,600 --> 00:12:57,600
so what will happen now in this case uh

331
00:12:57,600 --> 00:12:59,040
when an ethernet packet

332
00:12:59,040 --> 00:13:01,839
will be passed to dissector one that is

333
00:13:01,839 --> 00:13:02,880
ethernet

334
00:13:02,880 --> 00:13:06,000
uh so this dissector will parse the

335
00:13:06,000 --> 00:13:08,959
header and all those components of

336
00:13:08,959 --> 00:13:09,839
header

337
00:13:09,839 --> 00:13:13,360
for the ethernet part and then rest data

338
00:13:13,360 --> 00:13:15,839
which is the payload of ethernet packet

339
00:13:15,839 --> 00:13:18,320
or frame will be passed to the next

340
00:13:18,320 --> 00:13:20,160
dissector in the chain

341
00:13:20,160 --> 00:13:22,639
so here we can see the next form is ip

342
00:13:22,639 --> 00:13:23,279
right

343
00:13:23,279 --> 00:13:25,519
so iv will ibisector will again do the

344
00:13:25,519 --> 00:13:26,880
same thing it will

345
00:13:26,880 --> 00:13:29,120
parse its own header and then it will

346
00:13:29,120 --> 00:13:31,200
pass the remaining one

347
00:13:31,200 --> 00:13:34,000
to the next one that is tcp or udp

348
00:13:34,000 --> 00:13:35,200
depending on

349
00:13:35,200 --> 00:13:37,680
you know the protocol and then similarly

350
00:13:37,680 --> 00:13:39,839
unit will be passed on to the

351
00:13:39,839 --> 00:13:41,519
application layer and then if you have

352
00:13:41,519 --> 00:13:43,920
something custom so suppose for example

353
00:13:43,920 --> 00:13:45,680
if you have built something

354
00:13:45,680 --> 00:13:48,560
which is running inside the http part

355
00:13:48,560 --> 00:13:49,279
right

356
00:13:49,279 --> 00:13:51,360
so you're sending some kind of you know

357
00:13:51,360 --> 00:13:52,959
signaling messages or something

358
00:13:52,959 --> 00:13:56,480
using http uh then

359
00:13:56,480 --> 00:13:58,800
you have to write your own custom plugin

360
00:13:58,800 --> 00:13:59,519
because

361
00:13:59,519 --> 00:14:02,320
wireshark will not be able to decode it

362
00:14:02,320 --> 00:14:03,279
after

363
00:14:03,279 --> 00:14:06,079
http it will show you all the fields and

364
00:14:06,079 --> 00:14:06,639
everything

365
00:14:06,639 --> 00:14:09,440
passed properly till http but if you

366
00:14:09,440 --> 00:14:10,720
want beyond that

367
00:14:10,720 --> 00:14:13,839
then you have to put a custom

368
00:14:13,839 --> 00:14:17,199
dissector at the end

369
00:14:17,199 --> 00:14:19,680
similarly if you are putting it you know

370
00:14:19,680 --> 00:14:21,519
in some cases it is possible that

371
00:14:21,519 --> 00:14:25,440
you are using some kind of custom

372
00:14:25,440 --> 00:14:27,920
you know encapsulation so in that case

373
00:14:27,920 --> 00:14:28,720
you know you will

374
00:14:28,720 --> 00:14:31,279
put your dissector in the chain and

375
00:14:31,279 --> 00:14:33,279
similarly you know you can put it in the

376
00:14:33,279 --> 00:14:33,760
end

377
00:14:33,760 --> 00:14:37,600
depends uh now what is a listener

378
00:14:37,600 --> 00:14:39,120
because you know we are going to

379
00:14:39,120 --> 00:14:40,959
listener now

380
00:14:40,959 --> 00:14:43,760
so dissector is when you want to pass

381
00:14:43,760 --> 00:14:44,000
the

382
00:14:44,000 --> 00:14:46,320
packet and you also want to show

383
00:14:46,320 --> 00:14:47,199
whatever

384
00:14:47,199 --> 00:14:50,079
you know you have seen and interpreted

385
00:14:50,079 --> 00:14:50,560
as

386
00:14:50,560 --> 00:14:54,000
part of the tree uh so that's that's for

387
00:14:54,000 --> 00:14:55,519
the dissector right

388
00:14:55,519 --> 00:14:58,399
now for listener you don't want to show

389
00:14:58,399 --> 00:14:59,279
anything

390
00:14:59,279 --> 00:15:03,360
in as a part of tree but you want to

391
00:15:03,360 --> 00:15:05,279
save this information and then you know

392
00:15:05,279 --> 00:15:07,760
you want to go over packet by packet

393
00:15:07,760 --> 00:15:10,560
on multiple packets and then you know

394
00:15:10,560 --> 00:15:11,760
whatever summary

395
00:15:11,760 --> 00:15:13,839
or the statistics that you're getting

396
00:15:13,839 --> 00:15:14,800
from there

397
00:15:14,800 --> 00:15:16,639
you want to show them in collective

398
00:15:16,639 --> 00:15:18,880
manner so that's the

399
00:15:18,880 --> 00:15:21,680
microanalysis or summary part right as

400
00:15:21,680 --> 00:15:24,000
we were talking talking before

401
00:15:24,000 --> 00:15:27,360
so how to write a hello world

402
00:15:27,360 --> 00:15:30,880
uh you know program for a wireshark

403
00:15:30,880 --> 00:15:33,360
listener

404
00:15:34,480 --> 00:15:36,000
so it will be a simple hello world

405
00:15:36,000 --> 00:15:38,000
program uh we will just talk about the

406
00:15:38,000 --> 00:15:39,440
skeleton code and we will

407
00:15:39,440 --> 00:15:41,920
just do you know some simple things so

408
00:15:41,920 --> 00:15:43,360
it becomes more clear to you

409
00:15:43,360 --> 00:15:45,519
and then for more complex things we are

410
00:15:45,519 --> 00:15:46,399
providing you with

411
00:15:46,399 --> 00:15:48,639
code so you can you know go back and you

412
00:15:48,639 --> 00:15:50,079
can try out with code as well

413
00:15:50,079 --> 00:15:52,240
i'll also do a call code walkthrough for

414
00:15:52,240 --> 00:15:54,320
you

415
00:15:54,320 --> 00:15:57,920
so the file name that we will provide

416
00:15:57,920 --> 00:16:01,680
is the hello world listener.lua

417
00:16:01,680 --> 00:16:05,680
so first line is to check if the gui is

418
00:16:05,680 --> 00:16:09,279
enabled so it is done because uh you

419
00:16:09,279 --> 00:16:11,680
know t shark is also there with varshark

420
00:16:11,680 --> 00:16:13,440
so those people who don't know what t

421
00:16:13,440 --> 00:16:14,880
shark is tishak is

422
00:16:14,880 --> 00:16:18,800
a cli based cousin of wireshark

423
00:16:18,800 --> 00:16:20,480
so first of all we are checking because

424
00:16:20,480 --> 00:16:22,320
uh in this one

425
00:16:22,320 --> 00:16:24,880
and also in the dissector one we want to

426
00:16:24,880 --> 00:16:26,160
show this output

427
00:16:26,160 --> 00:16:28,959
for now we want to show this output uh

428
00:16:28,959 --> 00:16:30,160
on gui

429
00:16:30,160 --> 00:16:32,480
so if gui is not there then now there's

430
00:16:32,480 --> 00:16:33,519
no

431
00:16:33,519 --> 00:16:36,320
real reason to run it right if it is

432
00:16:36,320 --> 00:16:38,240
running in cli or something

433
00:16:38,240 --> 00:16:40,800
so first check is if the gui is enabled

434
00:16:40,800 --> 00:16:41,839
then it will run

435
00:16:41,839 --> 00:16:47,199
otherwise it will go back it will exit

436
00:16:47,519 --> 00:16:50,240
after that we create we created one

437
00:16:50,240 --> 00:16:51,759
function

438
00:16:51,759 --> 00:16:56,000
we named it dialog menu and in that

439
00:16:56,000 --> 00:16:59,199
we have created a window

440
00:16:59,199 --> 00:17:02,079
so this window will have title hello

441
00:17:02,079 --> 00:17:05,039
world right so you can see clearly

442
00:17:05,039 --> 00:17:06,480
this function here will create the

443
00:17:06,480 --> 00:17:08,799
window and this is the title that we are

444
00:17:08,799 --> 00:17:10,880
putting in

445
00:17:10,880 --> 00:17:14,160
and then we are setting this text

446
00:17:14,160 --> 00:17:16,319
in the body of the window which is again

447
00:17:16,319 --> 00:17:17,520
hello world but

448
00:17:17,520 --> 00:17:20,480
here i have three exclamation marks here

449
00:17:20,480 --> 00:17:21,439
i have one

450
00:17:21,439 --> 00:17:24,160
right and once you write this uh

451
00:17:24,160 --> 00:17:24,959
function

452
00:17:24,959 --> 00:17:28,160
you now want to register it with

453
00:17:28,160 --> 00:17:31,360
the shark ui right so what we have done

454
00:17:31,360 --> 00:17:32,000
we have

455
00:17:32,000 --> 00:17:35,200
registered it with tools menu

456
00:17:35,200 --> 00:17:38,480
so it will appear as hello world

457
00:17:38,480 --> 00:17:41,280
in the menu you click on it it will open

458
00:17:41,280 --> 00:17:42,640
up a window

459
00:17:42,640 --> 00:17:44,160
and the title of the window will be

460
00:17:44,160 --> 00:17:46,880
hello world one explanation

461
00:17:46,880 --> 00:17:49,039
and the content will be hello world and

462
00:17:49,039 --> 00:17:52,000
three signs of explanation

463
00:17:52,000 --> 00:17:56,640
so this is how it will look hello world

464
00:17:56,640 --> 00:17:59,360
and if you click on it this is how it is

465
00:17:59,360 --> 00:18:01,360
going to show

466
00:18:01,360 --> 00:18:03,120
so it is clear right so this is the

467
00:18:03,120 --> 00:18:06,559
title part and uh this is the content

468
00:18:06,559 --> 00:18:08,559
now obviously it's a hello world program

469
00:18:08,559 --> 00:18:09,760
and that's why we

470
00:18:09,760 --> 00:18:12,160
are actually printing hello world uh

471
00:18:12,160 --> 00:18:13,440
otherwise there's no

472
00:18:13,440 --> 00:18:15,919
real reason or benefit of printing hello

473
00:18:15,919 --> 00:18:16,640
world

474
00:18:16,640 --> 00:18:18,880
uh obviously we what we will do in a

475
00:18:18,880 --> 00:18:19,760
real example

476
00:18:19,760 --> 00:18:21,760
when we do this for for realistic

477
00:18:21,760 --> 00:18:23,520
protocols to find some meaningful

478
00:18:23,520 --> 00:18:24,480
information

479
00:18:24,480 --> 00:18:26,160
uh we will go over the packets and we

480
00:18:26,160 --> 00:18:28,400
will try to find the statistics and all

481
00:18:28,400 --> 00:18:30,400
and then we will show those so that will

482
00:18:30,400 --> 00:18:32,799
make more sense

483
00:18:32,799 --> 00:18:35,200
but before doing that let's also take a

484
00:18:35,200 --> 00:18:38,400
look at hello world dissector

485
00:18:38,400 --> 00:18:40,240
so what we are going to do now is we are

486
00:18:40,240 --> 00:18:42,799
going to add a dummy

487
00:18:42,799 --> 00:18:45,440
hello world to all the packets in the

488
00:18:45,440 --> 00:18:47,039
protocol tree

489
00:18:47,039 --> 00:18:49,000
and the file name is hello world

490
00:18:49,000 --> 00:18:51,360
bisector.lua

491
00:18:51,360 --> 00:18:53,840
so first in this case i will define the

492
00:18:53,840 --> 00:18:56,000
variables and the field

493
00:18:56,000 --> 00:18:59,039
so first of all our protocol name is the

494
00:18:59,039 --> 00:19:00,320
hello world

495
00:19:00,320 --> 00:19:03,360
it will appear you know with this name

496
00:19:03,360 --> 00:19:05,120
obviously this is the the name that we

497
00:19:05,120 --> 00:19:06,960
will use internally

498
00:19:06,960 --> 00:19:09,200
and then we are defining the fields for

499
00:19:09,200 --> 00:19:11,600
it and you can also see the hierarchy

500
00:19:11,600 --> 00:19:14,720
the name of the protocol and also here

501
00:19:14,720 --> 00:19:18,080
we have defined the name of the field

502
00:19:18,080 --> 00:19:20,400
as hello world right you can see the

503
00:19:20,400 --> 00:19:22,160
variable name here hello world

504
00:19:22,160 --> 00:19:24,320
and this we have defined this specific

505
00:19:24,320 --> 00:19:25,200
field

506
00:19:25,200 --> 00:19:27,919
this is the hierarchy to apply filters

507
00:19:27,919 --> 00:19:28,799
and all

508
00:19:28,799 --> 00:19:30,880
and again the name of the field will be

509
00:19:30,880 --> 00:19:32,080
hello world

510
00:19:32,080 --> 00:19:34,240
now you have defined the protocol you

511
00:19:34,240 --> 00:19:36,080
have defined the field

512
00:19:36,080 --> 00:19:38,320
you have to register the field in the

513
00:19:38,320 --> 00:19:39,440
protocol

514
00:19:39,440 --> 00:19:42,559
so we take world dot field where world

515
00:19:42,559 --> 00:19:44,640
is your protocol object

516
00:19:44,640 --> 00:19:47,200
and you take your field object and you

517
00:19:47,200 --> 00:19:48,880
define it like this

518
00:19:48,880 --> 00:19:51,760
so now you have registered your fields

519
00:19:51,760 --> 00:19:54,640
to the protocol

520
00:19:55,120 --> 00:19:58,000
after that we will write a function for

521
00:19:58,000 --> 00:19:59,760
the dissector

522
00:19:59,760 --> 00:20:02,640
now this is from the standard so you

523
00:20:02,640 --> 00:20:03,679
have to pass

524
00:20:03,679 --> 00:20:06,320
so you know when you define this uh it

525
00:20:06,320 --> 00:20:07,440
will add in the

526
00:20:07,440 --> 00:20:11,039
line in the in the chain and y shark

527
00:20:11,039 --> 00:20:14,559
will then send it the buffer the packet

528
00:20:14,559 --> 00:20:15,600
info

529
00:20:15,600 --> 00:20:18,400
and the tree the current state of the

530
00:20:18,400 --> 00:20:19,679
tree

531
00:20:19,679 --> 00:20:22,320
so now first what we are doing here is

532
00:20:22,320 --> 00:20:22,799
we are

533
00:20:22,799 --> 00:20:25,120
finding the packet length from the

534
00:20:25,120 --> 00:20:26,320
buffer

535
00:20:26,320 --> 00:20:29,280
and then we are adding one element to

536
00:20:29,280 --> 00:20:29,919
the tree

537
00:20:29,919 --> 00:20:33,039
that is passed to us and we are

538
00:20:33,039 --> 00:20:36,400
adding the hello world to it so this is

539
00:20:36,400 --> 00:20:37,039
the value

540
00:20:37,039 --> 00:20:40,480
and this is the value

541
00:20:40,480 --> 00:20:44,640
so after this we need to register it

542
00:20:44,640 --> 00:20:47,600
so in this example we are not really

543
00:20:47,600 --> 00:20:49,200
using any conditions because you know

544
00:20:49,200 --> 00:20:51,039
it's a hello dissector

545
00:20:51,039 --> 00:20:54,240
so we have defined it like this so what

546
00:20:54,240 --> 00:20:56,240
it will do it will attach

547
00:20:56,240 --> 00:20:59,440
a new part of tree

548
00:20:59,440 --> 00:21:01,919
or a component of tree or you know you

549
00:21:01,919 --> 00:21:02,559
can say

550
00:21:02,559 --> 00:21:05,840
one stage of tree to all the packets

551
00:21:05,840 --> 00:21:09,200
which will say hello world so

552
00:21:09,200 --> 00:21:12,799
when you run it this is before you

553
00:21:12,799 --> 00:21:16,000
enable this plugin and

554
00:21:16,000 --> 00:21:18,240
this is after enabling the plugin so

555
00:21:18,240 --> 00:21:19,760
what you can observe here

556
00:21:19,760 --> 00:21:23,520
is it is everywhere if you apply filter

557
00:21:23,520 --> 00:21:26,159
using this field here it will look like

558
00:21:26,159 --> 00:21:27,600
this

559
00:21:27,600 --> 00:21:30,559
if you apply the filter using the second

560
00:21:30,559 --> 00:21:31,120
part

561
00:21:31,120 --> 00:21:34,000
that's the content field right then it

562
00:21:34,000 --> 00:21:34,960
will look like this

563
00:21:34,960 --> 00:21:36,400
you can observe that you know it is it

564
00:21:36,400 --> 00:21:39,760
is on all the packets here

565
00:21:40,799 --> 00:21:43,520
so these were the hello world you know

566
00:21:43,520 --> 00:21:44,000
plugins

567
00:21:44,000 --> 00:21:46,080
that we had so now what we are going to

568
00:21:46,080 --> 00:21:48,799
do before moving to the next part

569
00:21:48,799 --> 00:21:51,520
we are going to move these to plugins

570
00:21:51,520 --> 00:21:52,559
folder

571
00:21:52,559 --> 00:21:59,840
and see if you know if it really works

572
00:22:07,600 --> 00:22:12,480
so here are those two files i'm copying

573
00:22:12,480 --> 00:22:14,799
these

574
00:22:20,559 --> 00:22:23,360
this is the dynamic

575
00:22:23,760 --> 00:22:27,919
this is the destination so i'll paste it

576
00:22:27,919 --> 00:22:30,400
after that i already have a wireshark

577
00:22:30,400 --> 00:22:31,679
opened

578
00:22:31,679 --> 00:22:41,840
like this

579
00:22:55,520 --> 00:22:57,679
ah now because the wireshark is already

580
00:22:57,679 --> 00:22:59,600
running right so there are two options

581
00:22:59,600 --> 00:23:00,559
you have

582
00:23:00,559 --> 00:23:03,039
first is to stop it and you know start

583
00:23:03,039 --> 00:23:05,120
it again to close it and start it again

584
00:23:05,120 --> 00:23:07,520
obviously that will load the plugins the

585
00:23:07,520 --> 00:23:09,440
second one you also have one more option

586
00:23:09,440 --> 00:23:10,720
you can

587
00:23:10,720 --> 00:23:13,919
go to analyze and then from here

588
00:23:13,919 --> 00:23:16,559
you can click this part reload lua

589
00:23:16,559 --> 00:23:18,240
plugins

590
00:23:18,240 --> 00:23:21,760
and once you do that and you go here

591
00:23:21,760 --> 00:23:24,960
you'll see that the option for the

592
00:23:24,960 --> 00:23:26,640
listener or the tab

593
00:23:26,640 --> 00:23:29,919
is now here you click on it and

594
00:23:29,919 --> 00:23:32,000
there you go you have hello world

595
00:23:32,000 --> 00:23:33,200
written here with

596
00:23:33,200 --> 00:23:36,400
title of hello world similarly

597
00:23:36,400 --> 00:23:39,840
if you check any packet in this precap

598
00:23:39,840 --> 00:23:42,880
you will see this field here

599
00:23:42,880 --> 00:23:46,320
which is added by our hello world

600
00:23:46,320 --> 00:23:50,320
dissector now i was telling you that

601
00:23:50,320 --> 00:23:52,080
you know you can pretty much go ahead

602
00:23:52,080 --> 00:23:56,080
and also modify them

603
00:23:59,440 --> 00:24:00,960
so i was telling you that you know you

604
00:24:00,960 --> 00:24:03,120
can also modify them in place

605
00:24:03,120 --> 00:24:05,039
and you know the changes will be

606
00:24:05,039 --> 00:24:09,039
available so let's do that

607
00:24:11,520 --> 00:24:15,760
so let's open our listener

608
00:24:17,279 --> 00:24:20,640
here is the listener it says hello world

609
00:24:20,640 --> 00:24:23,200
as of now right so

610
00:24:23,200 --> 00:24:26,159
let me change it

611
00:24:31,679 --> 00:24:34,640
there you go i have changed the content

612
00:24:34,640 --> 00:24:35,360
also let's

613
00:24:35,360 --> 00:24:38,880
change it to buy and

614
00:24:38,880 --> 00:24:42,799
let's also change this one to buy

615
00:24:42,799 --> 00:24:46,960
right so if i save it

616
00:24:46,960 --> 00:24:51,200
now we we will go back to wireshark

617
00:24:53,360 --> 00:24:56,879
so currently it's hello world

618
00:24:57,360 --> 00:25:01,520
now let's go here reload to our plugins

619
00:25:01,520 --> 00:25:04,080
and you will see that now it has changed

620
00:25:04,080 --> 00:25:04,880
to

621
00:25:04,880 --> 00:25:08,000
by word so this is what the

622
00:25:08,000 --> 00:25:10,559
convenience is right you can directly

623
00:25:10,559 --> 00:25:11,440
make the change

624
00:25:11,440 --> 00:25:14,720
and then you know you can just reload it

625
00:25:14,720 --> 00:25:16,960
and it will work no compilation nothing

626
00:25:16,960 --> 00:25:18,400
doing

627
00:25:18,400 --> 00:25:22,400
so let's move back to slides now

628
00:25:25,279 --> 00:25:26,799
so now let's understand what a

629
00:25:26,799 --> 00:25:30,240
heuristics dissector is

630
00:25:30,400 --> 00:25:32,799
so sometimes or actually for most of the

631
00:25:32,799 --> 00:25:35,120
protocols if you haven't enabled

632
00:25:35,120 --> 00:25:38,159
the heuristics of wireshark

633
00:25:38,159 --> 00:25:40,080
for most of the protocols it actually

634
00:25:40,080 --> 00:25:42,080
uses its port

635
00:25:42,080 --> 00:25:44,880
number to find if the packet belongs to

636
00:25:44,880 --> 00:25:47,440
you know that specific protocol

637
00:25:47,440 --> 00:25:49,520
now problem with that is if you change

638
00:25:49,520 --> 00:25:50,559
the port number

639
00:25:50,559 --> 00:25:53,360
it will not know if the packet belongs

640
00:25:53,360 --> 00:25:55,600
to that protocol or not

641
00:25:55,600 --> 00:25:58,880
so to handle all of that you bring in

642
00:25:58,880 --> 00:25:59,760
the heuristics

643
00:25:59,760 --> 00:26:03,360
dissector so heuristics are

644
00:26:03,360 --> 00:26:06,320
properties and things that we know about

645
00:26:06,320 --> 00:26:07,440
the protocol

646
00:26:07,440 --> 00:26:10,480
or the protocol packets and we can use

647
00:26:10,480 --> 00:26:15,120
those to then locate these packets right

648
00:26:15,120 --> 00:26:17,840
so let's see an example of this so we

649
00:26:17,840 --> 00:26:18,880
are going to

650
00:26:18,880 --> 00:26:22,159
take an example of our dns dissector

651
00:26:22,159 --> 00:26:24,480
and it is taken from wireshark's own

652
00:26:24,480 --> 00:26:27,200
website it's not created by us

653
00:26:27,200 --> 00:26:30,159
and what will happen so this is the the

654
00:26:30,159 --> 00:26:32,400
flow right this is the example flow

655
00:26:32,400 --> 00:26:35,760
so suppose uh till tcp

656
00:26:35,760 --> 00:26:39,039
if the packet is you know recognized and

657
00:26:39,039 --> 00:26:42,480
is dissected but after that if no one is

658
00:26:42,480 --> 00:26:45,120
understanding it then it will be passed

659
00:26:45,120 --> 00:26:47,039
to the heuristics dissector

660
00:26:47,039 --> 00:26:48,960
and then heuristics the sector will run

661
00:26:48,960 --> 00:26:50,840
on it

662
00:26:50,840 --> 00:26:54,400
so this is the example and we also have

663
00:26:54,400 --> 00:26:56,960
a live file for this we will see that

664
00:26:56,960 --> 00:27:01,440
uh so in this case it's the dns traffic

665
00:27:01,440 --> 00:27:03,840
you can see the content but the

666
00:27:03,840 --> 00:27:04,960
destination port

667
00:27:04,960 --> 00:27:06,960
instead of using you know your standard

668
00:27:06,960 --> 00:27:08,400
53

669
00:27:08,400 --> 00:27:12,640
it has changed it export to 8089

670
00:27:12,640 --> 00:27:15,840
and due to that wireshark is able to

671
00:27:15,840 --> 00:27:16,640
understand

672
00:27:16,640 --> 00:27:20,000
till the transport layer that's udp

673
00:27:20,000 --> 00:27:21,919
but it's not able to understand beyond

674
00:27:21,919 --> 00:27:24,240
that so that's where your

675
00:27:24,240 --> 00:27:27,679
heuristics dissector can come in

676
00:27:27,679 --> 00:27:29,440
here you can see it's telling you that

677
00:27:29,440 --> 00:27:31,360
the heuristics dissector is used

678
00:27:31,360 --> 00:27:35,039
because no other plugin was able to

679
00:27:35,039 --> 00:27:36,880
understand what it is

680
00:27:36,880 --> 00:27:39,200
so my dns was the name of that uh

681
00:27:39,200 --> 00:27:41,279
heuristics dissector and it had

682
00:27:41,279 --> 00:27:44,480
all the structure of dns packet

683
00:27:44,480 --> 00:27:47,600
so what was the heuristics in this case

684
00:27:47,600 --> 00:27:51,520
what were the heuristics in this case uh

685
00:27:51,520 --> 00:27:53,919
so if we take a look on this first thing

686
00:27:53,919 --> 00:27:55,200
is uh you know this

687
00:27:55,200 --> 00:27:58,320
function which will handle the tv buff

688
00:27:58,320 --> 00:28:00,080
and the packet info and the root from

689
00:28:00,080 --> 00:28:02,320
wireshark it will print

690
00:28:02,320 --> 00:28:05,440
that this dissector dns is called

691
00:28:05,440 --> 00:28:08,960
and then here this is the first one

692
00:28:08,960 --> 00:28:12,080
it is checking if the remaining length

693
00:28:12,080 --> 00:28:15,039
of past buffer is greater than dns

694
00:28:15,039 --> 00:28:16,399
header length

695
00:28:16,399 --> 00:28:18,640
because if it is a dns packet this

696
00:28:18,640 --> 00:28:20,399
condition needs to be true right it

697
00:28:20,399 --> 00:28:21,360
cannot

698
00:28:21,360 --> 00:28:24,000
have length less than dns header because

699
00:28:24,000 --> 00:28:26,080
your packet should have the header

700
00:28:26,080 --> 00:28:28,240
then the payload right if it is less

701
00:28:28,240 --> 00:28:30,080
than that then obviously it is not dns

702
00:28:30,080 --> 00:28:32,480
packet

703
00:28:36,799 --> 00:28:39,279
the second factor they have taken is

704
00:28:39,279 --> 00:28:39,840
they know

705
00:28:39,840 --> 00:28:43,360
that at this specific location

706
00:28:43,360 --> 00:28:46,960
the op code has to be one of these

707
00:28:46,960 --> 00:28:49,440
so you know

708
00:28:50,480 --> 00:28:53,440
it can be zero one two four five but not

709
00:28:53,440 --> 00:28:55,520
three

710
00:28:55,520 --> 00:28:57,840
similarly the third factor is that the r

711
00:28:57,840 --> 00:29:00,480
code which has this location

712
00:29:00,480 --> 00:29:03,840
needs to be from this range

713
00:29:03,840 --> 00:29:06,000
and then you know verify the number of

714
00:29:06,000 --> 00:29:07,200
questions or answers

715
00:29:07,200 --> 00:29:08,880
that should be reasonable it should not

716
00:29:08,880 --> 00:29:11,200
be very high because you know it's a dns

717
00:29:11,200 --> 00:29:13,520
packet if it is a real dns packet

718
00:29:13,520 --> 00:29:16,640
it will be in this reasonable range and

719
00:29:16,640 --> 00:29:17,039
then

720
00:29:17,039 --> 00:29:19,919
you know you register the function and

721
00:29:19,919 --> 00:29:22,000
here what you can observe is

722
00:29:22,000 --> 00:29:24,240
because it's a heuristics dissector

723
00:29:24,240 --> 00:29:25,760
right so the weight

724
00:29:25,760 --> 00:29:27,760
is registered you you actually mention

725
00:29:27,760 --> 00:29:29,360
the protocol

726
00:29:29,360 --> 00:29:33,279
uh you know before it if no protocol

727
00:29:33,279 --> 00:29:35,919
after this protocol that is mentioned is

728
00:29:35,919 --> 00:29:37,840
able to understand this packet

729
00:29:37,840 --> 00:29:40,159
then it will be passed to the heuristics

730
00:29:40,159 --> 00:29:42,159
dissector

731
00:29:42,159 --> 00:29:45,840
so that's how it works so let's let's

732
00:29:45,840 --> 00:29:46,240
see

733
00:29:46,240 --> 00:29:55,840
heuristics dissector in action

734
00:29:57,440 --> 00:30:02,159
so this is the file let's copy it

735
00:30:05,520 --> 00:30:07,679
we are going to delete the hello world

736
00:30:07,679 --> 00:30:10,559
dissectors now

737
00:30:10,880 --> 00:30:14,720
let's paste the heuristics dissector

738
00:30:14,880 --> 00:30:17,360
and we also need to open the

739
00:30:17,360 --> 00:30:18,320
corresponding

740
00:30:18,320 --> 00:30:23,840
pcap so let's do that

741
00:30:25,679 --> 00:30:27,919
but actually uh you know let's let's

742
00:30:27,919 --> 00:30:29,600
remove this two

743
00:30:29,600 --> 00:30:32,159
for the time being so that we can see

744
00:30:32,159 --> 00:30:33,200
how it looks uh

745
00:30:33,200 --> 00:30:38,159
before and after right so let's open the

746
00:30:48,840 --> 00:30:51,840
pcapp

747
00:30:52,799 --> 00:30:56,559
so this is the p cap in this case

748
00:30:56,960 --> 00:31:00,080
and what you can observe here is

749
00:31:00,080 --> 00:31:03,440
this is the data if you take it a little

750
00:31:03,440 --> 00:31:04,799
bit

751
00:31:04,799 --> 00:31:06,960
like this you will see that the domain

752
00:31:06,960 --> 00:31:07,919
name is there

753
00:31:07,919 --> 00:31:10,960
right so this is actually a dns packet

754
00:31:10,960 --> 00:31:12,159
and we know because you know the

755
00:31:12,159 --> 00:31:13,840
destination port we already know we

756
00:31:13,840 --> 00:31:15,760
already talked about it

757
00:31:15,760 --> 00:31:17,519
and then you know if you don't know

758
00:31:17,519 --> 00:31:19,519
about that by seeing this

759
00:31:19,519 --> 00:31:22,559
specific part right you can

760
00:31:22,559 --> 00:31:24,799
actually get suspicion and you can also

761
00:31:24,799 --> 00:31:26,559
see that there is a reply

762
00:31:26,559 --> 00:31:29,039
which should also contain this name and

763
00:31:29,039 --> 00:31:29,679
then

764
00:31:29,679 --> 00:31:32,720
the ip right

765
00:31:32,720 --> 00:31:35,120
so we can observe that wireshark is

766
00:31:35,120 --> 00:31:35,919
currently

767
00:31:35,919 --> 00:31:38,080
not able to you know understand what it

768
00:31:38,080 --> 00:31:41,120
is and obviously we don't have any tools

769
00:31:41,120 --> 00:31:44,320
and again just to just to make it clear

770
00:31:44,320 --> 00:31:46,720
the dissector will not show up here by

771
00:31:46,720 --> 00:31:48,080
the way

772
00:31:48,080 --> 00:31:52,879
so let's go back to the folder

773
00:31:54,799 --> 00:31:57,840
now let's paste the dissector here

774
00:31:57,840 --> 00:32:01,840
it is here now

775
00:32:02,480 --> 00:32:15,840
and now let's reload it

776
00:32:31,039 --> 00:32:34,080
go to enable protocols because it's a

777
00:32:34,080 --> 00:32:36,000
new protocol right so you have to look

778
00:32:36,000 --> 00:32:43,840
for my dns

779
00:32:47,039 --> 00:32:51,039
and we are in the m region

780
00:32:51,039 --> 00:32:53,519
and here it is right it's already

781
00:32:53,519 --> 00:32:55,279
enabled

782
00:32:55,279 --> 00:32:59,120
so for some reason it is not working

783
00:33:03,519 --> 00:33:07,200
let's close the wireshark and start it

784
00:33:08,840 --> 00:33:11,840
again

785
00:33:30,000 --> 00:33:32,399
so here we can observe that this is the

786
00:33:32,399 --> 00:33:33,679
dns packet

787
00:33:33,679 --> 00:33:37,120
and we can also see that it's not being

788
00:33:37,120 --> 00:33:38,399
interpreted as

789
00:33:38,399 --> 00:33:40,640
the dns packet or the my dns packet in

790
00:33:40,640 --> 00:33:41,679
this case

791
00:33:41,679 --> 00:33:44,000
uh that's because the heuristics need to

792
00:33:44,000 --> 00:33:45,120
be uh

793
00:33:45,120 --> 00:33:48,240
you know enabled so that you can do

794
00:33:48,240 --> 00:33:51,600
you can go to edit you can go to

795
00:33:51,600 --> 00:33:55,039
preferences and here from protocols

796
00:33:55,039 --> 00:33:57,519
uh just you know type the name so in

797
00:33:57,519 --> 00:34:00,399
this case the my dns name

798
00:34:00,399 --> 00:34:03,440
so there you go my dns and

799
00:34:03,440 --> 00:34:07,679
here you have to enable the heuristics

800
00:34:07,679 --> 00:34:11,199
you do that you click ok and it will

801
00:34:11,199 --> 00:34:13,119
work

802
00:34:13,119 --> 00:34:15,760
you can observe heuristics dissector

803
00:34:15,760 --> 00:34:17,280
used

804
00:34:17,280 --> 00:34:19,679
my dns and now you are seeing the dns

805
00:34:19,679 --> 00:34:21,280
one

806
00:34:21,280 --> 00:34:23,839
so this is how the heuristics dissectors

807
00:34:23,839 --> 00:34:24,399
they work

808
00:34:24,399 --> 00:34:27,040
right so when uh so if suppose you are

809
00:34:27,040 --> 00:34:27,520
you know

810
00:34:27,520 --> 00:34:30,719
searching for something uh which which

811
00:34:30,719 --> 00:34:33,199
you which can be a http channel but it's

812
00:34:33,199 --> 00:34:35,440
not really you know running on http

813
00:34:35,440 --> 00:34:36,480
tunnel

814
00:34:36,480 --> 00:34:39,440
so this might also be one way of doing

815
00:34:39,440 --> 00:34:41,119
it

816
00:34:41,119 --> 00:34:42,639
it will obviously work for the dns

817
00:34:42,639 --> 00:34:44,399
tunnels if they are not using on

818
00:34:44,399 --> 00:34:47,440
the standard ports but for http you can

819
00:34:47,440 --> 00:34:49,599
check

820
00:34:49,599 --> 00:34:52,720
going back to the slides

821
00:34:55,918 --> 00:34:59,119
so now similarly using the same concepts

822
00:34:59,119 --> 00:35:01,599
we have created multiple plugins for

823
00:35:01,599 --> 00:35:02,960
wi-fi

824
00:35:02,960 --> 00:35:05,599
so i'll walk you through those so this

825
00:35:05,599 --> 00:35:06,640
is the one

826
00:35:06,640 --> 00:35:08,880
for overview so suppose you know you

827
00:35:08,880 --> 00:35:09,839
want to see

828
00:35:09,839 --> 00:35:11,920
from security perspective that you know

829
00:35:11,920 --> 00:35:14,480
which ssid or bssid

830
00:35:14,480 --> 00:35:19,440
in a pcap or in the live traffic feed

831
00:35:19,440 --> 00:35:21,520
have you know weak security so for

832
00:35:21,520 --> 00:35:23,520
example here also you can observe that

833
00:35:23,520 --> 00:35:24,720
serial number 2

834
00:35:24,720 --> 00:35:28,000
3 6 8 9

835
00:35:28,000 --> 00:35:31,119
and 12 have wps enabled

836
00:35:31,119 --> 00:35:34,000
that's a very very very bad uh thing

837
00:35:34,000 --> 00:35:35,599
from security angle

838
00:35:35,599 --> 00:35:38,560
so you can do that now using the same

839
00:35:38,560 --> 00:35:40,320
analysis logic

840
00:35:40,320 --> 00:35:43,200
you can actually also see uh you know if

841
00:35:43,200 --> 00:35:44,720
someone is performing the

842
00:35:44,720 --> 00:35:47,920
wi-fi beacon flood so in you know which

843
00:35:47,920 --> 00:35:51,520
he is sending random ssids

844
00:35:51,520 --> 00:35:54,640
with different different bssids or

845
00:35:54,640 --> 00:35:58,240
if he is sending multiple bssids

846
00:35:58,240 --> 00:36:00,880
but using the same ssids right so it

847
00:36:00,880 --> 00:36:03,119
becomes very easy for you

848
00:36:03,119 --> 00:36:06,560
to use it to find the problem

849
00:36:06,560 --> 00:36:09,520
using wireshark plugins similarly if you

850
00:36:09,520 --> 00:36:10,800
want to see if the

851
00:36:10,800 --> 00:36:13,359
authentication attack is being done you

852
00:36:13,359 --> 00:36:14,960
know you can see stats about it

853
00:36:14,960 --> 00:36:16,720
you can see how many packets are being

854
00:36:16,720 --> 00:36:18,160
sent per second

855
00:36:18,160 --> 00:36:20,320
you can also see if it is a broadcast d

856
00:36:20,320 --> 00:36:21,760
auth or if it is

857
00:36:21,760 --> 00:36:24,800
a unicast one

858
00:36:25,280 --> 00:36:27,920
similarly checking the wpa cracking

859
00:36:27,920 --> 00:36:29,920
possibility

860
00:36:29,920 --> 00:36:32,079
so now you can you know go ahead you

861
00:36:32,079 --> 00:36:33,839
have the b caps you have

862
00:36:33,839 --> 00:36:36,400
the plugins i'll show you how to use

863
00:36:36,400 --> 00:36:37,119
them and

864
00:36:37,119 --> 00:36:41,839
you can try these out

865
00:36:44,480 --> 00:36:48,160
so you go here and

866
00:36:48,160 --> 00:36:51,920
you know just go to the plugins part

867
00:36:51,920 --> 00:36:55,839
and just copy all the plugins from here

868
00:37:00,000 --> 00:37:02,720
this is the plugins folder paste

869
00:37:02,720 --> 00:37:04,079
everything here

870
00:37:04,079 --> 00:37:05,839
so we don't have to do it again and

871
00:37:05,839 --> 00:37:07,520
again

872
00:37:07,520 --> 00:37:11,440
now we can go back to you know the

873
00:37:11,440 --> 00:37:23,839
the pcap folder

874
00:37:23,920 --> 00:37:27,040
and let's open you know one of the p

875
00:37:27,040 --> 00:37:28,480
caps here

876
00:37:28,480 --> 00:37:30,720
so you know let's open the

877
00:37:30,720 --> 00:37:33,680
authentication flood once

878
00:37:33,680 --> 00:37:38,000
so it's opened

879
00:37:41,599 --> 00:37:43,200
it's a large p cap so it's you know

880
00:37:43,200 --> 00:37:51,520
taking a little bit more time

881
00:37:51,520 --> 00:37:54,640
so it will also show you the the benefit

882
00:37:54,640 --> 00:37:57,200
of this right you can observe that

883
00:37:57,200 --> 00:38:00,880
it's around 184

884
00:38:00,880 --> 00:38:04,560
000 packets not the precise number but

885
00:38:04,560 --> 00:38:05,839
the cutoff

886
00:38:05,839 --> 00:38:08,640
and from here you can observe that you

887
00:38:08,640 --> 00:38:10,640
have different different options

888
00:38:10,640 --> 00:38:13,680
so i'll go for the wi-fi one if i do

889
00:38:13,680 --> 00:38:17,440
overview and as you can observe

890
00:38:17,440 --> 00:38:19,839
these tables we have created these in a

891
00:38:19,839 --> 00:38:20,640
very

892
00:38:20,640 --> 00:38:22,320
basic manner so these are just the

893
00:38:22,320 --> 00:38:24,079
characters which are forming the lines

894
00:38:24,079 --> 00:38:25,520
and the borders

895
00:38:25,520 --> 00:38:27,680
so you can observe that you know all of

896
00:38:27,680 --> 00:38:29,119
these are here

897
00:38:29,119 --> 00:38:31,920
for some of these the wps is enabled you

898
00:38:31,920 --> 00:38:33,520
can also do a search on it

899
00:38:33,520 --> 00:38:36,079
if you like to so for example i want to

900
00:38:36,079 --> 00:38:37,760
see the pa underscore

901
00:38:37,760 --> 00:38:42,800
net to ok and it will filter

902
00:38:42,880 --> 00:38:46,880
similarly you can use all the other

903
00:38:46,880 --> 00:38:50,160
plugins like this to see that the

904
00:38:50,160 --> 00:38:52,640
authentication flood

905
00:38:52,640 --> 00:38:54,880
you can observe that this one this guy

906
00:38:54,880 --> 00:38:56,720
is doing the authentication on all of

907
00:38:56,720 --> 00:38:58,079
these

908
00:38:58,079 --> 00:39:01,839
right and then there is another one

909
00:39:03,839 --> 00:39:07,040
similarly all the other tools uh you

910
00:39:07,040 --> 00:39:08,880
know all the other protocols and

911
00:39:08,880 --> 00:39:09,520
everything

912
00:39:09,520 --> 00:39:11,839
you know we will leave to you uh you can

913
00:39:11,839 --> 00:39:14,560
try this out

914
00:39:14,560 --> 00:39:18,560
now let's move back to the slides

915
00:39:22,800 --> 00:39:26,560
so now we will take a look at a plugin

916
00:39:26,560 --> 00:39:28,240
which is created for a conventional

917
00:39:28,240 --> 00:39:30,240
protocol and we will see how you know it

918
00:39:30,240 --> 00:39:31,440
is working

919
00:39:31,440 --> 00:39:34,720
why why it was needed so

920
00:39:34,720 --> 00:39:37,680
we will talk about the sip sip is

921
00:39:37,680 --> 00:39:39,920
session initiation protocol

922
00:39:39,920 --> 00:39:43,119
it's used to do your ip telephony so if

923
00:39:43,119 --> 00:39:43,920
you want to do

924
00:39:43,920 --> 00:39:47,440
voip sip plus rtp

925
00:39:47,440 --> 00:39:51,680
is one of the widely used protocols

926
00:39:51,680 --> 00:39:54,320
so suppose you have a lot of traffic for

927
00:39:54,320 --> 00:39:57,119
sip and rtp you want to see

928
00:39:57,119 --> 00:39:58,640
what is happening you want to create a

929
00:39:58,640 --> 00:40:00,800
summary out of it and you also

930
00:40:00,800 --> 00:40:04,079
want a dissector to show you in clear

931
00:40:04,079 --> 00:40:05,920
the authentication hash

932
00:40:05,920 --> 00:40:08,880
that is used by these clients for

933
00:40:08,880 --> 00:40:11,040
authentication right

934
00:40:11,040 --> 00:40:14,319
so let's go back

935
00:40:14,319 --> 00:40:17,200
to the wireshark

936
00:40:23,119 --> 00:40:26,000
so this is the sip capture open sap

937
00:40:26,000 --> 00:40:28,400
capture

938
00:40:33,119 --> 00:40:34,880
so you can observe that the hello world

939
00:40:34,880 --> 00:40:36,720
is everywhere right so

940
00:40:36,720 --> 00:40:39,839
let's let's get rid of this

941
00:42:00,800 --> 00:42:02,960
so i have deleted those plugins the

942
00:42:02,960 --> 00:42:04,720
basic plugins you know the hello world

943
00:42:04,720 --> 00:42:07,040
dissector the hello world listener

944
00:42:07,040 --> 00:42:10,240
and all the other ones and now we only

945
00:42:10,240 --> 00:42:11,119
have

946
00:42:11,119 --> 00:42:14,560
the sap ones that you know we want to

947
00:42:14,560 --> 00:42:17,599
consider along with the other protocol

948
00:42:17,599 --> 00:42:19,520
ones

949
00:42:19,520 --> 00:42:23,839
so here if we go to the sip extensions

950
00:42:23,839 --> 00:42:26,160
if you click on it it will show you

951
00:42:26,160 --> 00:42:27,359
these are the unique

952
00:42:27,359 --> 00:42:30,720
extensions or users or numbers

953
00:42:30,720 --> 00:42:34,960
that are used to make the

954
00:42:34,960 --> 00:42:37,680
calls or tried to you know try for the

955
00:42:37,680 --> 00:42:39,760
calls or registered with the

956
00:42:39,760 --> 00:42:42,800
machine now the second one that

957
00:42:42,800 --> 00:42:45,599
you know we have here so what happens

958
00:42:45,599 --> 00:42:47,200
first time you know this client is

959
00:42:47,200 --> 00:42:49,359
trying to register this server

960
00:42:49,359 --> 00:42:51,920
it is getting unauthorized because it

961
00:42:51,920 --> 00:42:53,440
was not sending

962
00:42:53,440 --> 00:42:57,359
authentication hash so now in next

963
00:42:57,359 --> 00:43:00,400
message packet you will see the

964
00:43:00,400 --> 00:43:02,480
authentication hash

965
00:43:02,480 --> 00:43:05,520
so this one is our custom sip

966
00:43:05,520 --> 00:43:08,880
dissector and we have used it to

967
00:43:08,880 --> 00:43:12,079
carve out this specific part

968
00:43:12,079 --> 00:43:14,480
if you don't do that you have to you

969
00:43:14,480 --> 00:43:16,079
know open it up

970
00:43:16,079 --> 00:43:19,440
and then somewhere here you will be able

971
00:43:19,440 --> 00:43:20,319
to find

972
00:43:20,319 --> 00:43:23,040
the authentication response see this

973
00:43:23,040 --> 00:43:24,800
right the digest

974
00:43:24,800 --> 00:43:27,440
so we are taking it and we are putting

975
00:43:27,440 --> 00:43:27,839
it

976
00:43:27,839 --> 00:43:31,359
clear you know here so it is easily

977
00:43:31,359 --> 00:43:33,520
you know viewable so again this is a

978
00:43:33,520 --> 00:43:36,319
sample uh

979
00:43:36,319 --> 00:43:40,800
similarly for the memcache ones

980
00:43:40,800 --> 00:43:42,880
you can you have to open the memcache

981
00:43:42,880 --> 00:43:55,839
file for that let me do that

982
00:43:56,160 --> 00:43:58,880
so here is the memcache one and numcash

983
00:43:58,880 --> 00:44:00,160
has its own

984
00:44:00,160 --> 00:44:03,280
dissector as well but

985
00:44:03,280 --> 00:44:06,960
let's try to see which items it is it is

986
00:44:06,960 --> 00:44:08,000
getting the key value

987
00:44:08,000 --> 00:44:10,400
pairs

988
00:44:13,440 --> 00:44:16,480
so if you go here and if you click here

989
00:44:16,480 --> 00:44:20,400
you will see that the key the value

990
00:44:20,400 --> 00:44:23,520
the key value for all the interactions

991
00:44:23,520 --> 00:44:27,119
is here and that that is in

992
00:44:27,119 --> 00:44:31,280
a very you know easy and summarized form

993
00:44:31,280 --> 00:44:34,079
so now let's take a look at the code of

994
00:44:34,079 --> 00:44:37,839
these two

995
00:44:47,040 --> 00:44:50,000
so let's start with the sip listener

996
00:44:50,000 --> 00:44:51,599
part

997
00:44:51,599 --> 00:44:53,359
you will see that the skeleton code is

998
00:44:53,359 --> 00:44:54,720
not changing a lot

999
00:44:54,720 --> 00:44:56,480
we are just adding some things to it and

1000
00:44:56,480 --> 00:44:58,480
you know it just work

1001
00:44:58,480 --> 00:45:01,359
so first line you know now it is just a

1002
00:45:01,359 --> 00:45:02,160
ui check

1003
00:45:02,160 --> 00:45:05,680
if the gui is enabled then it will run

1004
00:45:05,680 --> 00:45:10,319
if it is not enabled it will exit

1005
00:45:10,319 --> 00:45:14,240
so from here we are taking this value

1006
00:45:14,240 --> 00:45:16,800
we can take this value because the sip

1007
00:45:16,800 --> 00:45:17,760
protocol

1008
00:45:17,760 --> 00:45:20,240
is already passing it if it was not

1009
00:45:20,240 --> 00:45:22,480
parsing it then we have to parse it

1010
00:45:22,480 --> 00:45:24,880
but that's not the case so we can take

1011
00:45:24,880 --> 00:45:26,000
the user

1012
00:45:26,000 --> 00:45:28,880
from here and what we are doing here is

1013
00:45:28,880 --> 00:45:30,880
we are creating a table

1014
00:45:30,880 --> 00:45:33,920
to store unique usernames because we

1015
00:45:33,920 --> 00:45:36,960
want all the unique users or

1016
00:45:36,960 --> 00:45:40,160
extensions which are used to make a call

1017
00:45:40,160 --> 00:45:43,598
or to register with the server

1018
00:45:43,839 --> 00:45:48,960
so we did that here now

1019
00:45:48,960 --> 00:45:51,359
we are filtering the frames with this

1020
00:45:51,359 --> 00:45:52,560
specific filter

1021
00:45:52,560 --> 00:45:54,240
because you know these are the only

1022
00:45:54,240 --> 00:45:55,760
packets that will contain this

1023
00:45:55,760 --> 00:45:58,160
information

1024
00:45:58,160 --> 00:46:01,200
and when you open a new pcapp obviously

1025
00:46:01,200 --> 00:46:02,880
you don't want to retain all of this

1026
00:46:02,880 --> 00:46:03,920
right if you haven't

1027
00:46:03,920 --> 00:46:05,680
closed your wireshark and if you are

1028
00:46:05,680 --> 00:46:07,440
opening a new peak app obviously this

1029
00:46:07,440 --> 00:46:08,480
should change

1030
00:46:08,480 --> 00:46:10,720
so that's what we are doing here we are

1031
00:46:10,720 --> 00:46:11,920
resetting the tab

1032
00:46:11,920 --> 00:46:16,240
so this value is again empty

1033
00:46:16,240 --> 00:46:19,520
and now this is the main function

1034
00:46:19,520 --> 00:46:22,560
which is taking information the packet

1035
00:46:22,560 --> 00:46:23,040
info

1036
00:46:23,040 --> 00:46:25,920
and the tb buff and from there it is

1037
00:46:25,920 --> 00:46:27,280
getting the username

1038
00:46:27,280 --> 00:46:30,400
so user is defined

1039
00:46:30,400 --> 00:46:34,640
here right so this means this

1040
00:46:34,640 --> 00:46:37,520
so from this field it is taking the

1041
00:46:37,520 --> 00:46:38,800
username

1042
00:46:38,800 --> 00:46:41,520
in string format and if it is not

1043
00:46:41,520 --> 00:46:42,640
already there

1044
00:46:42,640 --> 00:46:45,680
it is storing it

1045
00:46:46,640 --> 00:46:49,040
then we have the dialogue menu which

1046
00:46:49,040 --> 00:46:51,359
will be used to show the information

1047
00:46:51,359 --> 00:46:54,800
so this one here is actually

1048
00:46:54,800 --> 00:46:56,880
getting the information and this one

1049
00:46:56,880 --> 00:46:59,200
will be displaying it

1050
00:46:59,200 --> 00:47:03,599
so when you will click on this window

1051
00:47:03,599 --> 00:47:05,839
a window with sip extensions will open

1052
00:47:05,839 --> 00:47:07,680
as we already saw

1053
00:47:07,680 --> 00:47:11,280
and it will have unique sap extension of

1054
00:47:11,280 --> 00:47:12,800
the users

1055
00:47:12,800 --> 00:47:17,040
and it will append all the users

1056
00:47:17,040 --> 00:47:25,440
in form of a list

1057
00:47:25,440 --> 00:47:27,200
so we are printing all of the

1058
00:47:27,200 --> 00:47:28,720
information and then

1059
00:47:28,720 --> 00:47:31,200
this part you already know this is to

1060
00:47:31,200 --> 00:47:32,160
register

1061
00:47:32,160 --> 00:47:35,200
this specific function to

1062
00:47:35,200 --> 00:47:37,920
your tools menu and we have already seen

1063
00:47:37,920 --> 00:47:39,920
this in action right

1064
00:47:39,920 --> 00:47:43,520
similarly moving to the sip auth digest

1065
00:47:43,520 --> 00:47:47,200
dissector you can observe that we have

1066
00:47:47,200 --> 00:47:48,640
defined a protocol

1067
00:47:48,640 --> 00:47:51,599
that is sep authorized then we are

1068
00:47:51,599 --> 00:47:53,599
defining a field in it

1069
00:47:53,599 --> 00:47:57,040
for the digest response and then

1070
00:47:57,040 --> 00:48:00,720
you know this this response digest

1071
00:48:00,720 --> 00:48:04,400
field we are taking it this information

1072
00:48:04,400 --> 00:48:05,359
here

1073
00:48:05,359 --> 00:48:07,839
it is again it is coming from the

1074
00:48:07,839 --> 00:48:09,040
already passed

1075
00:48:09,040 --> 00:48:12,240
field by the step

1076
00:48:12,240 --> 00:48:15,119
right so this part you can see sip auth

1077
00:48:15,119 --> 00:48:16,720
digest response

1078
00:48:16,720 --> 00:48:19,599
and this is the one that we are creating

1079
00:48:19,599 --> 00:48:21,760
okay

1080
00:48:21,760 --> 00:48:24,240
so after you you have your field you

1081
00:48:24,240 --> 00:48:25,040
have your

1082
00:48:25,040 --> 00:48:27,839
protocol you register the fields with

1083
00:48:27,839 --> 00:48:29,520
the protocols

1084
00:48:29,520 --> 00:48:31,599
and then you have your function the

1085
00:48:31,599 --> 00:48:33,599
dissector function

1086
00:48:33,599 --> 00:48:36,720
if it is the digest that is being taken

1087
00:48:36,720 --> 00:48:37,520
from

1088
00:48:37,520 --> 00:48:41,200
this part here if it is nil then it will

1089
00:48:41,200 --> 00:48:41,920
not run

1090
00:48:41,920 --> 00:48:45,599
if it is not nil then it will run and

1091
00:48:45,599 --> 00:48:47,920
it will take this information add it to

1092
00:48:47,920 --> 00:48:48,800
the tree

1093
00:48:48,800 --> 00:48:50,640
and then we will be able to see this

1094
00:48:50,640 --> 00:48:52,480
tree and then

1095
00:48:52,480 --> 00:48:55,200
you will register this protocol so

1096
00:48:55,200 --> 00:48:56,960
that's how the dissector is

1097
00:48:56,960 --> 00:49:00,240
happening and then the last one

1098
00:49:00,240 --> 00:49:03,839
the memcache listener

1099
00:49:04,480 --> 00:49:07,920
plugin in this one again you can see

1100
00:49:07,920 --> 00:49:08,800
that

1101
00:49:08,800 --> 00:49:11,920
we have already passed information so we

1102
00:49:11,920 --> 00:49:14,079
just want to take it and we want to show

1103
00:49:14,079 --> 00:49:14,480
it in

1104
00:49:14,480 --> 00:49:17,760
in a summary view so first of all we are

1105
00:49:17,760 --> 00:49:20,160
creating this listener here

1106
00:49:20,160 --> 00:49:23,680
and it is taking clicking memcache value

1107
00:49:23,680 --> 00:49:26,000
and then you know you are taking these

1108
00:49:26,000 --> 00:49:27,119
objects

1109
00:49:27,119 --> 00:49:28,839
from these fields which are already

1110
00:49:28,839 --> 00:49:31,280
passed and you are storing it in this

1111
00:49:31,280 --> 00:49:32,960
store

1112
00:49:32,960 --> 00:49:36,160
and once you have all of these this one

1113
00:49:36,160 --> 00:49:38,640
you know right this is to reset

1114
00:49:38,640 --> 00:49:40,720
and this is the main function which will

1115
00:49:40,720 --> 00:49:41,839
fill the

1116
00:49:41,839 --> 00:49:44,960
the information so you are going over

1117
00:49:44,960 --> 00:49:46,400
the packets and where

1118
00:49:46,400 --> 00:49:49,520
key and value are not nil you are taking

1119
00:49:49,520 --> 00:49:49,920
them

1120
00:49:49,920 --> 00:49:52,079
you are converting them into strings and

1121
00:49:52,079 --> 00:49:53,040
you are storing it

1122
00:49:53,040 --> 00:49:57,440
in the store and then the display

1123
00:49:57,440 --> 00:50:00,559
you part creating a text field sorry the

1124
00:50:00,559 --> 00:50:02,079
text window

1125
00:50:02,079 --> 00:50:05,520
with a title that is this and then you

1126
00:50:05,520 --> 00:50:06,720
are printing this

1127
00:50:06,720 --> 00:50:09,119
you know this line here that these are

1128
00:50:09,119 --> 00:50:11,520
the memcacity key value pairs

1129
00:50:11,520 --> 00:50:14,559
and then you will take you know each key

1130
00:50:14,559 --> 00:50:15,680
value and it will

1131
00:50:15,680 --> 00:50:19,040
print it and this one again is to

1132
00:50:19,040 --> 00:50:20,160
register this

1133
00:50:20,160 --> 00:50:27,839
function with the tools menu

1134
00:50:28,400 --> 00:50:30,240
so with this we have covered the

1135
00:50:30,240 --> 00:50:31,440
memcacity

1136
00:50:31,440 --> 00:50:34,800
as well as the sip so memcached for

1137
00:50:34,800 --> 00:50:36,240
those people you know who

1138
00:50:36,240 --> 00:50:39,520
don't know m cash is a ram based caching

1139
00:50:39,520 --> 00:50:40,640
solution

1140
00:50:40,640 --> 00:50:43,760
which is used a lot by you know a lot of

1141
00:50:43,760 --> 00:50:46,880
industries a lot of people and

1142
00:50:46,880 --> 00:50:50,400
mainly the way it works it has keys and

1143
00:50:50,400 --> 00:50:52,640
values stored in the ram

1144
00:50:52,640 --> 00:50:54,480
whenever you want to store something you

1145
00:50:54,480 --> 00:50:56,960
provide this pair it is saved in the ram

1146
00:50:56,960 --> 00:50:58,559
and when you want to get it

1147
00:50:58,559 --> 00:51:01,920
you need to need know the key and by

1148
00:51:01,920 --> 00:51:03,680
sending it the key you can actually get

1149
00:51:03,680 --> 00:51:04,960
the value back

1150
00:51:04,960 --> 00:51:07,599
and that's precisely what we saw in the

1151
00:51:07,599 --> 00:51:09,760
plugin

1152
00:51:09,760 --> 00:51:12,240
so if you want to download you know all

1153
00:51:12,240 --> 00:51:12,880
of these

1154
00:51:12,880 --> 00:51:16,000
you can do that from github.com we have

1155
00:51:16,000 --> 00:51:18,000
posted all the code here

1156
00:51:18,000 --> 00:51:20,000
if you want to see more specific things

1157
00:51:20,000 --> 00:51:21,119
to wipe

1158
00:51:21,119 --> 00:51:24,960
it is at this link so with this

1159
00:51:24,960 --> 00:51:27,520
we conclude this workshop if you have

1160
00:51:27,520 --> 00:51:28,559
any questions

1161
00:51:28,559 --> 00:51:30,400
this is my email address you reach out

1162
00:51:30,400 --> 00:51:33,280
to me and i'll try to help you out

1163
00:51:33,280 --> 00:51:36,480
again thanks for watching this video

1164
00:51:36,480 --> 00:51:39,680
uh i hope you learned how to create

1165
00:51:39,680 --> 00:51:43,440
a new uh you know plugin for wireshark

1166
00:51:43,440 --> 00:51:46,800
using lua language and hopefully we'll

1167
00:51:46,800 --> 00:51:47,359
see you

1168
00:51:47,359 --> 00:51:51,440
again next

1169
00:51:51,440 --> 00:51:56,240
so with that thanks again and all the

1170
00:52:02,599 --> 00:52:05,599
best

