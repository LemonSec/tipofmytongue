1
00:00:00,000 --> 00:00:02,939
quite a lot to get through so talk today

2
00:00:02,939 --> 00:00:04,549
is about container of security

3
00:00:04,549 --> 00:00:07,140
kubernetes and docker I I got involved

4
00:00:07,140 --> 00:00:09,929
with with docker about five years ago

5
00:00:09,929 --> 00:00:11,759
just over five years ago and it was

6
00:00:11,759 --> 00:00:13,080
typically how you'd expect to see a new

7
00:00:13,080 --> 00:00:15,179
technology it was a really early adopter

8
00:00:15,179 --> 00:00:18,900
I was bored offering it 1.0 and that was

9
00:00:18,900 --> 00:00:20,430
fair enough you'd expect that but when I

10
00:00:20,430 --> 00:00:22,769
got involved with kubernetes it was in

11
00:00:22,769 --> 00:00:24,330
the really early days of kubernetes and

12
00:00:24,330 --> 00:00:25,859
it was a british government department

13
00:00:25,859 --> 00:00:27,840
and it was at that point I realized hang

14
00:00:27,840 --> 00:00:28,980
on a second this is probably all quite

15
00:00:28,980 --> 00:00:30,480
popular if you've got everyone from

16
00:00:30,480 --> 00:00:32,159
startups all the way through to the

17
00:00:32,159 --> 00:00:34,140
government making use of this stuff so

18
00:00:34,140 --> 00:00:35,160
over the last couple of years I've done

19
00:00:35,160 --> 00:00:36,780
quite a lot of containers security work

20
00:00:36,780 --> 00:00:38,280
and this talk is essentially is about

21
00:00:38,280 --> 00:00:40,620
some of the things that can go wrong and

22
00:00:40,620 --> 00:00:42,510
how containers actually work because I

23
00:00:42,510 --> 00:00:43,410
think there's a bit still a bit of

24
00:00:43,410 --> 00:00:44,820
confusion in the industry about what

25
00:00:44,820 --> 00:00:46,469
actually are containers and how do they

26
00:00:46,469 --> 00:00:48,090
work so we're going to talk about about

27
00:00:48,090 --> 00:00:51,149
that as well the very brief about me

28
00:00:51,149 --> 00:00:52,680
first so I've been an IT temperate

29
00:00:52,680 --> 00:00:54,360
security for about 19 years now

30
00:00:54,360 --> 00:00:56,789
financial services at consultancy I'm a

31
00:00:56,789 --> 00:00:58,500
principal consultant a company called

32
00:00:58,500 --> 00:01:00,059
NCC we've got an office here in

33
00:01:00,059 --> 00:01:02,070
Singapore as well as offices of various

34
00:01:02,070 --> 00:01:04,199
places around the world and most the

35
00:01:04,199 --> 00:01:05,700
time these days I do container security

36
00:01:05,700 --> 00:01:08,130
work I'm a contributor at security Stack

37
00:01:08,130 --> 00:01:10,080
Exchange quick short people heard of

38
00:01:10,080 --> 00:01:12,689
security stock exchange at all okay go

39
00:01:12,689 --> 00:01:14,280
excellent so it is a smaller and

40
00:01:14,280 --> 00:01:16,350
friendlier version of Stack Overflow and

41
00:01:16,350 --> 00:01:17,850
we actually I think have four of the

42
00:01:17,850 --> 00:01:19,259
people the contributors to it you're

43
00:01:19,259 --> 00:01:20,250
actually speaking at this conference

44
00:01:20,250 --> 00:01:22,920
which is a lot of us so if you have any

45
00:01:22,920 --> 00:01:24,750
crisis about security container security

46
00:01:24,750 --> 00:01:26,159
or otherwise feel free to go there

47
00:01:26,159 --> 00:01:28,920
and you can also answer questions as

48
00:01:28,920 --> 00:01:29,549
well you want to

49
00:01:29,549 --> 00:01:32,189
and lastly possibly most relevantly for

50
00:01:32,189 --> 00:01:34,500
this talk I'm a contributor to the CIA's

51
00:01:34,500 --> 00:01:36,659
benchmarks for docker and kubernetes one

52
00:01:36,659 --> 00:01:38,460
of the authors when I got started in

53
00:01:38,460 --> 00:01:40,020
container security there was almost no

54
00:01:40,020 --> 00:01:41,430
information out there about how it

55
00:01:41,430 --> 00:01:43,710
worked so we've got CIS benchmarks which

56
00:01:43,710 --> 00:01:45,210
are moderately up-to-date the kubernetes

57
00:01:45,210 --> 00:01:46,860
ones pretty good doctor one needs a bit

58
00:01:46,860 --> 00:01:50,520
of work so those are available as I'm a

59
00:01:50,520 --> 00:01:52,399
security tester I get to work remotely

60
00:01:52,399 --> 00:01:54,659
so I live here

61
00:01:54,659 --> 00:01:56,490
this is Locke Boyle head in the Scottish

62
00:01:56,490 --> 00:01:58,890
Highlands and it's a long way from here

63
00:01:58,890 --> 00:01:59,579
I'll tell you that I haven't just

64
00:01:59,579 --> 00:02:01,350
travelled here but it's very nice when

65
00:02:01,350 --> 00:02:04,799
it's not raining so what I'm talk about

66
00:02:04,799 --> 00:02:07,049
today we're quickly gonna talk about

67
00:02:07,049 --> 00:02:08,220
what are containers

68
00:02:08,220 --> 00:02:09,750
let's nicely break down what containers

69
00:02:09,750 --> 00:02:10,949
are and how they work because that's

70
00:02:10,949 --> 00:02:11,970
kind of important before you start

71
00:02:11,970 --> 00:02:13,650
talking about breaking into something

72
00:02:13,650 --> 00:02:15,420
or securing it it really helps if you

73
00:02:15,420 --> 00:02:18,299
understand how it works very quickly go

74
00:02:18,299 --> 00:02:20,220
through container orchestration 101 so

75
00:02:20,220 --> 00:02:20,819
kubernetes

76
00:02:20,819 --> 00:02:22,829
is very popular understanding a bit

77
00:02:22,829 --> 00:02:24,989
about how it works let's move on to the

78
00:02:24,989 --> 00:02:26,819
last bit some container Breaking and

79
00:02:26,819 --> 00:02:28,860
Entering let's show you how how we've

80
00:02:28,860 --> 00:02:30,569
hacked into clusters how other people

81
00:02:30,569 --> 00:02:32,310
are hacking into clusters and some of

82
00:02:32,310 --> 00:02:33,390
the things you need to get right to

83
00:02:33,390 --> 00:02:37,799
avoid it being you next so what are

84
00:02:37,799 --> 00:02:41,609
containers anyway they're not new is

85
00:02:41,609 --> 00:02:43,650
what containers are containers are very

86
00:02:43,650 --> 00:02:44,939
much not a new technology so

87
00:02:44,939 --> 00:02:47,220
containerization got started in 1979 in

88
00:02:47,220 --> 00:02:50,040
unix with the chiller system call so

89
00:02:50,040 --> 00:02:52,170
they're that old and then around 2000

90
00:02:52,170 --> 00:02:53,909
various operating systems started

91
00:02:53,909 --> 00:02:56,040
implementing some kind of idea of

92
00:02:56,040 --> 00:02:59,760
containers so bsd first with jails linux

93
00:02:59,760 --> 00:03:01,200
codes first containerization 2001

94
00:03:01,200 --> 00:03:04,799
solaris 2004 then in 2008 Alexi came

95
00:03:04,799 --> 00:03:06,629
along which is called Project you can

96
00:03:06,629 --> 00:03:07,260
use today

97
00:03:07,260 --> 00:03:10,109
and it was the ancestor of docker when

98
00:03:10,109 --> 00:03:11,549
docker got started they made use of

99
00:03:11,549 --> 00:03:13,829
alexey technology they don't anymore and

100
00:03:13,829 --> 00:03:17,040
in 2013 daughter was the first kind of

101
00:03:17,040 --> 00:03:19,290
start-up of the darker project to go off

102
00:03:19,290 --> 00:03:21,720
them to hit 1.0 though so it's not a new

103
00:03:21,720 --> 00:03:24,209
technology but it is a popular

104
00:03:24,209 --> 00:03:27,449
technology so this was taken from stack

105
00:03:27,449 --> 00:03:29,489
overflow do a professional developer

106
00:03:29,489 --> 00:03:31,109
survey and what they do is they surveyed

107
00:03:31,109 --> 00:03:32,849
90,000 developers and they said to them

108
00:03:32,849 --> 00:03:34,680
what platforms do you make look you saw

109
00:03:34,680 --> 00:03:36,659
right number one is Linux that's not a

110
00:03:36,659 --> 00:03:37,049
surprise

111
00:03:37,049 --> 00:03:38,760
you know most servers on Linux these

112
00:03:38,760 --> 00:03:40,829
days number two is not surprise either

113
00:03:40,829 --> 00:03:43,079
windows most desktops or windows and a

114
00:03:43,079 --> 00:03:44,970
lot of servers are as well but number

115
00:03:44,970 --> 00:03:46,709
three was docker so ahead of all the

116
00:03:46,709 --> 00:03:48,209
cloud platforms ahead of all the mobile

117
00:03:48,209 --> 00:03:50,519
platforms dr. came in as the thing that

118
00:03:50,519 --> 00:03:52,290
professional developers were using which

119
00:03:52,290 --> 00:03:53,250
I thought was really interesting cuz

120
00:03:53,250 --> 00:03:55,829
that that's come out of nowhere you know

121
00:03:55,829 --> 00:03:57,060
this thing didn't exist six years ago

122
00:03:57,060 --> 00:03:58,440
now is the third most popular platform

123
00:03:58,440 --> 00:04:02,549
the developers use why are they popular

124
00:04:02,549 --> 00:04:03,930
the first question you ask yourself

125
00:04:03,930 --> 00:04:05,099
where does this come why is this so

126
00:04:05,099 --> 00:04:06,629
popular and this is a really good

127
00:04:06,629 --> 00:04:08,879
example this is a really basic docker

128
00:04:08,879 --> 00:04:10,859
command this basically says give me a

129
00:04:10,859 --> 00:04:12,780
web server and nginx web server and

130
00:04:12,780 --> 00:04:14,519
expose the poor and run in the

131
00:04:14,519 --> 00:04:17,099
background and if you're a developer and

132
00:04:17,099 --> 00:04:18,720
you want to run any one of the two

133
00:04:18,720 --> 00:04:20,668
million-plus images on docker hub most

134
00:04:20,668 --> 00:04:22,289
of the commands are that simple you

135
00:04:22,289 --> 00:04:23,520
don't need to know how the application

136
00:04:23,520 --> 00:04:24,840
was packaged you don't need to know what

137
00:04:24,840 --> 00:04:26,099
versions of what libraries you might

138
00:04:26,099 --> 00:04:26,850
need to use

139
00:04:26,850 --> 00:04:27,990
you don't need no know what language

140
00:04:27,990 --> 00:04:29,580
runtime you might need to use you just

141
00:04:29,580 --> 00:04:32,100
say docker run this and it works and it

142
00:04:32,100 --> 00:04:33,210
works the same if you run it on your

143
00:04:33,210 --> 00:04:34,920
laptop as if you run it on your on-prem

144
00:04:34,920 --> 00:04:36,120
server as if you run it in your cloud

145
00:04:36,120 --> 00:04:38,610
server but I think is what to me is why

146
00:04:38,610 --> 00:04:40,880
docker is very popular with developers

147
00:04:40,880 --> 00:04:44,280
there's another reason though is very

148
00:04:44,280 --> 00:04:46,110
popular with companies and that's

149
00:04:46,110 --> 00:04:47,520
because of money which is unsurprising

150
00:04:47,520 --> 00:04:49,650
leox companies like making money these

151
00:04:49,650 --> 00:04:51,930
days pretty much everyone deploys their

152
00:04:51,930 --> 00:04:53,970
stuff in the cloud right in AWS is your

153
00:04:53,970 --> 00:04:57,780
GCP when you buy an ec2 VM you buy it by

154
00:04:57,780 --> 00:04:59,700
the error and you pay the same if it's

155
00:04:59,700 --> 00:05:01,440
one percent utilized or a hundred

156
00:05:01,440 --> 00:05:03,660
percent utilized so traditionally you

157
00:05:03,660 --> 00:05:05,490
would have one application running any

158
00:05:05,490 --> 00:05:07,560
of vm and with containers what you can

159
00:05:07,560 --> 00:05:09,390
do is you can have seven eight nine ten

160
00:05:09,390 --> 00:05:11,280
even more than that reasonably well

161
00:05:11,280 --> 00:05:12,780
isolated applications running on a

162
00:05:12,780 --> 00:05:15,090
single VM so your utilization goes up

163
00:05:15,090 --> 00:05:17,100
your ec2 bill comes down and your

164
00:05:17,100 --> 00:05:18,480
company's happy as they're saving money

165
00:05:18,480 --> 00:05:24,030
on their cloud bill what are they we've

166
00:05:24,030 --> 00:05:25,230
said they're popular who watch they are

167
00:05:25,230 --> 00:05:27,000
there they're not a virtual machine

168
00:05:27,000 --> 00:05:28,230
first thing when you're talking about

169
00:05:28,230 --> 00:05:30,030
containers they kind of look a lot like

170
00:05:30,030 --> 00:05:31,290
virtual machines but they're really not

171
00:05:31,290 --> 00:05:33,810
virtual machines usually I'm gonna there

172
00:05:33,810 --> 00:05:34,920
are some edge cases where they might be

173
00:05:34,920 --> 00:05:35,940
but let's talk about docker because

174
00:05:35,940 --> 00:05:37,170
that's the West thing I know they're not

175
00:05:37,170 --> 00:05:38,550
usually what they are is a lightweight

176
00:05:38,550 --> 00:05:41,460
process as our Linux process isolated

177
00:05:41,460 --> 00:05:43,230
from the underlying host so if you're

178
00:05:43,230 --> 00:05:44,820
thinking about securing darker attacking

179
00:05:44,820 --> 00:05:46,200
docker doing anything else what you're

180
00:05:46,200 --> 00:05:48,120
doing is you're tacky analytics process

181
00:05:48,120 --> 00:05:49,890
the one that is isolated from the

182
00:05:49,890 --> 00:05:51,330
underlying host that's all you're doing

183
00:05:51,330 --> 00:05:52,560
and we're you think we're securing it

184
00:05:52,560 --> 00:05:54,060
anything you can do to a Linux process

185
00:05:54,060 --> 00:05:56,010
you can do to a docker container it's

186
00:05:56,010 --> 00:05:58,530
exactly the same so how do they do this

187
00:05:58,530 --> 00:06:00,150
how do they actually isolate this from

188
00:06:00,150 --> 00:06:02,430
the underlying host well the answer

189
00:06:02,430 --> 00:06:04,290
turns out to be the use a whole lot of

190
00:06:04,290 --> 00:06:05,340
technology has been around for a long

191
00:06:05,340 --> 00:06:07,350
time so I have my process here that

192
00:06:07,350 --> 00:06:09,360
could be nginx it could be WordPress it

193
00:06:09,360 --> 00:06:09,920
could be whatever

194
00:06:09,920 --> 00:06:12,810
they then use namespaces namespaces are

195
00:06:12,810 --> 00:06:14,430
been around for a long time they are a

196
00:06:14,430 --> 00:06:16,290
technology that essentially says you can

197
00:06:16,290 --> 00:06:18,570
only see this subset of resources so if

198
00:06:18,570 --> 00:06:19,980
you use the mount namespace you can say

199
00:06:19,980 --> 00:06:21,600
you can only see your own files you

200
00:06:21,600 --> 00:06:22,680
can't see the files and the rest of the

201
00:06:22,680 --> 00:06:25,320
hosts the net namespace says you can

202
00:06:25,320 --> 00:06:27,180
only see your IP address we'll give you

203
00:06:27,180 --> 00:06:28,410
a new one you don't get to see the real

204
00:06:28,410 --> 00:06:30,390
IP address of the host and it ends up

205
00:06:30,390 --> 00:06:33,360
looking quite a lot like a VM on top of

206
00:06:33,360 --> 00:06:35,550
that you have capabilities so one of the

207
00:06:35,550 --> 00:06:36,930
main complaints that gets thrown a

208
00:06:36,930 --> 00:06:38,310
docker is they say oh well your route

209
00:06:38,310 --> 00:06:40,530
you written this container so obviously

210
00:06:40,530 --> 00:06:40,889
it's in

211
00:06:40,889 --> 00:06:43,020
secur you're not really root though so

212
00:06:43,020 --> 00:06:45,629
what they've done with docker is they've

213
00:06:45,629 --> 00:06:47,280
taken the capabilities which are a linux

214
00:06:47,280 --> 00:06:49,050
feature anyone can use capabilities and

215
00:06:49,050 --> 00:06:51,599
it breaks up the root privilege instead

216
00:06:51,599 --> 00:06:53,310
of being just root you can say I want

217
00:06:53,310 --> 00:06:55,590
this one small piece of root so what

218
00:06:55,590 --> 00:06:56,849
they do with docker is they said here is

219
00:06:56,849 --> 00:06:58,469
a set of subsets of these capabilities

220
00:06:58,469 --> 00:07:01,110
you just get these but a fall and they

221
00:07:01,110 --> 00:07:04,349
are the less dangerous ones not all

222
00:07:04,349 --> 00:07:05,759
entirely not dangerous but less

223
00:07:05,759 --> 00:07:08,039
dangerous on top of that they put see

224
00:07:08,039 --> 00:07:10,110
groups so if I got my containers running

225
00:07:10,110 --> 00:07:12,689
and one container can take all the

226
00:07:12,689 --> 00:07:14,340
resource on my hosts obviously that's

227
00:07:14,340 --> 00:07:16,229
not much good so you can apply see group

228
00:07:16,229 --> 00:07:17,250
to to say you can only have so much

229
00:07:17,250 --> 00:07:18,990
memory so much des cailloux so much

230
00:07:18,990 --> 00:07:21,750
processor time on top of that the other

231
00:07:21,750 --> 00:07:24,330
end layer either a farmer or SELinux so

232
00:07:24,330 --> 00:07:25,830
as long as you haven't disabled SELinux

233
00:07:25,830 --> 00:07:28,080
like most people do you will get an su

234
00:07:28,080 --> 00:07:29,819
linux profile on every container or an

235
00:07:29,819 --> 00:07:32,339
arm or profile by default and then

236
00:07:32,339 --> 00:07:34,349
lastly on top of all those layers they

237
00:07:34,349 --> 00:07:35,009
said okay

238
00:07:35,009 --> 00:07:37,259
Cisco's are dangerous syscalls is when

239
00:07:37,259 --> 00:07:38,550
you talk to the Linux kernel you're

240
00:07:38,550 --> 00:07:40,199
making syscalls some of those are

241
00:07:40,199 --> 00:07:41,939
dangerous so what we'll do is we'll

242
00:07:41,939 --> 00:07:43,589
create a whitelist of a load syscalls

243
00:07:43,589 --> 00:07:45,089
and we'll get rid of all the ones we

244
00:07:45,089 --> 00:07:46,710
think might actually you know allow you

245
00:07:46,710 --> 00:07:49,650
to easily break out and the essentially

246
00:07:49,650 --> 00:07:51,479
when you do docker run it does all this

247
00:07:51,479 --> 00:07:53,610
for you so it's setting up namespaces

248
00:07:53,610 --> 00:07:55,439
it's setting up see groups are a farmer

249
00:07:55,439 --> 00:07:57,419
and second profiles and saying what

250
00:07:57,419 --> 00:07:59,159
capabilities you have and that

251
00:07:59,159 --> 00:08:00,810
essentially gives you this level or this

252
00:08:00,810 --> 00:08:03,870
available the isolated environment one

253
00:08:03,870 --> 00:08:04,979
of the really cool things about docker

254
00:08:04,979 --> 00:08:06,149
is you can tweak everything on one of

255
00:08:06,149 --> 00:08:07,800
those so you they give you defaults but

256
00:08:07,800 --> 00:08:08,699
there's nothing to stop you saying here

257
00:08:08,699 --> 00:08:09,960
you know I don't like what you chose I

258
00:08:09,960 --> 00:08:11,819
want to choose a more secure or indeed a

259
00:08:11,819 --> 00:08:14,789
less secure to fall but that's what it

260
00:08:14,789 --> 00:08:18,509
does that's what doctor actually does so

261
00:08:18,509 --> 00:08:19,860
what container images I said you could

262
00:08:19,860 --> 00:08:20,909
get two million of these things actually

263
00:08:20,909 --> 00:08:22,979
I got took this off docker hub which is

264
00:08:22,979 --> 00:08:24,750
docker hub is the App Store of docker

265
00:08:24,750 --> 00:08:26,240
it's where all the images live

266
00:08:26,240 --> 00:08:28,469
screenshot says 2.1 million actually

267
00:08:28,469 --> 00:08:29,699
looked yesterday and there's two point

268
00:08:29,699 --> 00:08:32,339
three five million different images on

269
00:08:32,339 --> 00:08:35,250
docker hub all they are is tarballs

270
00:08:35,250 --> 00:08:37,620
so if you know linux tar files that's

271
00:08:37,620 --> 00:08:39,659
all the docker images it's a tar file

272
00:08:39,659 --> 00:08:42,089
with some json metadata if you want to

273
00:08:42,089 --> 00:08:44,159
analyze it use tar you can literally use

274
00:08:44,159 --> 00:08:46,140
tar on antara and look and see whatever

275
00:08:46,140 --> 00:08:47,790
is in there there's literally no magic

276
00:08:47,790 --> 00:08:49,440
there this is very easy it's all just

277
00:08:49,440 --> 00:08:50,640
Linux technology one thing you find out

278
00:08:50,640 --> 00:08:51,899
docker is everything dock or does it

279
00:08:51,899 --> 00:08:53,640
just Linux there's nothing that's not

280
00:08:53,640 --> 00:08:54,420
part of original

281
00:08:54,420 --> 00:08:56,820
so listen JSON metadata and that's your

282
00:08:56,820 --> 00:08:59,519
images what does docker do there

283
00:08:59,519 --> 00:09:02,550
so docker works like this you have a

284
00:09:02,550 --> 00:09:04,380
doctor client so command-line utility

285
00:09:04,380 --> 00:09:07,769
used to run it talks over a REST API to

286
00:09:07,769 --> 00:09:10,380
the engine the engine says hey I'll talk

287
00:09:10,380 --> 00:09:11,730
to doctor hub to get my images if I

288
00:09:11,730 --> 00:09:13,139
don't have them or any other registry

289
00:09:13,139 --> 00:09:14,790
and then I create these isolated

290
00:09:14,790 --> 00:09:17,550
processes which are containers so what

291
00:09:17,550 --> 00:09:18,959
docker is is really it's a process

292
00:09:18,959 --> 00:09:21,329
running thing all it does is it lets you

293
00:09:21,329 --> 00:09:23,760
run processes remotely or locally in a

294
00:09:23,760 --> 00:09:27,660
semi isolated way really not to magic

295
00:09:27,660 --> 00:09:29,040
and it's just a REST API so you can talk

296
00:09:29,040 --> 00:09:33,839
to it with Carol if you wanted so doctor

297
00:09:33,839 --> 00:09:35,699
security very quickly you have to cover

298
00:09:35,699 --> 00:09:36,810
you talk with doc security you have to

299
00:09:36,810 --> 00:09:38,970
cover this sudden red hot coined the

300
00:09:38,970 --> 00:09:41,279
phrase containers don't contain and they

301
00:09:41,279 --> 00:09:42,839
said well you know it's a you know you

302
00:09:42,839 --> 00:09:44,310
can break out and the answer is that

303
00:09:44,310 --> 00:09:45,839
it's not that simple it's not it's not

304
00:09:45,839 --> 00:09:46,560
straightforward

305
00:09:46,560 --> 00:09:48,570
are there vulnerabilities that could let

306
00:09:48,570 --> 00:09:50,220
you break out of a container yes or

307
00:09:50,220 --> 00:09:51,839
their vulnerabilities look at your break

308
00:09:51,839 --> 00:09:54,600
out of any sandbox probably yes you need

309
00:09:54,600 --> 00:09:56,339
to understand where those

310
00:09:56,339 --> 00:09:58,170
vulnerabilities are and when you might

311
00:09:58,170 --> 00:09:59,699
go to exploit them but the idea that

312
00:09:59,699 --> 00:10:01,019
container is just blank it don't contain

313
00:10:01,019 --> 00:10:02,820
isn't true to my mind they do provide a

314
00:10:02,820 --> 00:10:04,620
decent level of isolation for a lot of

315
00:10:04,620 --> 00:10:05,880
workloads it might be perfectly good

316
00:10:05,880 --> 00:10:08,370
level of isolation so that's too

317
00:10:08,370 --> 00:10:09,720
simplistic you will see that read any

318
00:10:09,720 --> 00:10:11,220
doctor security articles I guarantee you

319
00:10:11,220 --> 00:10:12,360
someone will quote containers don't

320
00:10:12,360 --> 00:10:15,600
contain somewhere how can you break out

321
00:10:15,600 --> 00:10:17,699
so if you're running containers how do

322
00:10:17,699 --> 00:10:20,040
you break out of them Linux kernel

323
00:10:20,040 --> 00:10:22,110
burner abilities so before when I said

324
00:10:22,110 --> 00:10:23,699
you're running against the same kernel

325
00:10:23,699 --> 00:10:25,170
so I've got ten containers running on a

326
00:10:25,170 --> 00:10:27,240
single host they're all cheering a Linux

327
00:10:27,240 --> 00:10:28,860
kernel if there's a vulnerability in

328
00:10:28,860 --> 00:10:30,449
that kernel someone could try use that

329
00:10:30,449 --> 00:10:32,370
to break out they do have to get past

330
00:10:32,370 --> 00:10:33,600
all the layers of isolation we talked

331
00:10:33,600 --> 00:10:35,640
about but there have been cases where

332
00:10:35,640 --> 00:10:39,240
that's possible exposed file systems

333
00:10:39,240 --> 00:10:41,220
typically with docker you will mount

334
00:10:41,220 --> 00:10:42,720
file systems for the underlying host

335
00:10:42,720 --> 00:10:44,279
into your containers quite a long time

336
00:10:44,279 --> 00:10:45,959
if you do something like mount slash

337
00:10:45,959 --> 00:10:47,940
etc' which is where all the system files

338
00:10:47,940 --> 00:10:50,040
live inside your container it's going to

339
00:10:50,040 --> 00:10:51,510
go badly wrong for you and that does

340
00:10:51,510 --> 00:10:55,160
happen the other thing is insecure

341
00:10:55,160 --> 00:10:58,050
configuration a lot of when you get

342
00:10:58,050 --> 00:10:59,339
docker containers from people they say

343
00:10:59,339 --> 00:11:00,569
I'll run my daughter container to do

344
00:11:00,569 --> 00:11:02,579
whatever you want they give you some

345
00:11:02,579 --> 00:11:04,470
rather dodgy defaults rather some dodgy

346
00:11:04,470 --> 00:11:05,670
suggestions from a security standpoint

347
00:11:05,670 --> 00:11:07,620
the first thing they'll do is they'll

348
00:11:07,620 --> 00:11:08,380
say

349
00:11:08,380 --> 00:11:10,380
we need to access to the docker socket a

350
00:11:10,380 --> 00:11:12,520
docker socket essentially is the the

351
00:11:12,520 --> 00:11:14,410
read the API endpoint if you give

352
00:11:14,410 --> 00:11:16,180
someone dock or socket access you're

353
00:11:16,180 --> 00:11:18,160
giving them RIT on the host so if you're

354
00:11:18,160 --> 00:11:19,300
thinking about this we if someone says I

355
00:11:19,300 --> 00:11:20,830
want to expose the docker socket inside

356
00:11:20,830 --> 00:11:22,630
my container that's root on the host

357
00:11:22,630 --> 00:11:24,220
just treat it like that and understand

358
00:11:24,220 --> 00:11:26,620
that's what you're doing doctor also has

359
00:11:26,620 --> 00:11:28,240
a really cool switch called - -

360
00:11:28,240 --> 00:11:31,240
privileged and - - privileged is turn

361
00:11:31,240 --> 00:11:33,010
off all the security seal those lovely

362
00:11:33,010 --> 00:11:35,100
nurse of isolation bend them all and

363
00:11:35,100 --> 00:11:37,720
unfortunately quite a few people will

364
00:11:37,720 --> 00:11:38,770
that makes things easy right because

365
00:11:38,770 --> 00:11:39,820
everything just works if I turn off the

366
00:11:39,820 --> 00:11:40,240
security

367
00:11:40,240 --> 00:11:42,280
so you'll see commercial software

368
00:11:42,280 --> 00:11:43,900
packages containers and they'll save one

369
00:11:43,900 --> 00:11:46,090
is privileged always challenge a vendor

370
00:11:46,090 --> 00:11:47,470
that tries to tell you that and say no

371
00:11:47,470 --> 00:11:49,180
no that that's the best builders better

372
00:11:49,180 --> 00:11:51,430
ways than - - privileged in almost every

373
00:11:51,430 --> 00:11:55,360
case so to demonstrate this and we're

374
00:11:55,360 --> 00:11:57,160
going to be video demos because it works

375
00:11:57,160 --> 00:11:59,380
better with the recording where's my

376
00:11:59,380 --> 00:12:04,390
mouse so I'm gonna run something called

377
00:12:04,390 --> 00:12:06,460
the most pointless docker command ever

378
00:12:06,460 --> 00:12:08,440
there's a guy called Ian meal and he

379
00:12:08,440 --> 00:12:09,730
came up this idea this is he said this

380
00:12:09,730 --> 00:12:10,960
is the most pointless docker command you

381
00:12:10,960 --> 00:12:12,190
can run I actually think this is the

382
00:12:12,190 --> 00:12:13,600
most useful docker card you can I use

383
00:12:13,600 --> 00:12:17,170
all the time so I've got I'm on one

384
00:12:17,170 --> 00:12:18,940
machine I'm calling dr. on another

385
00:12:18,940 --> 00:12:21,820
machine and I'll pause it there except

386
00:12:21,820 --> 00:12:23,200
talk this through what this command

387
00:12:23,200 --> 00:12:25,420
basically says is it says run is

388
00:12:25,420 --> 00:12:26,710
privileged the thing I just told you not

389
00:12:26,710 --> 00:12:27,790
to do

390
00:12:27,790 --> 00:12:29,950
give me the network of the hosts give me

391
00:12:29,950 --> 00:12:31,900
the process list of the hosts

392
00:12:31,900 --> 00:12:34,810
give me the IPC of the host mount the

393
00:12:34,810 --> 00:12:36,880
entire host file system into my

394
00:12:36,880 --> 00:12:40,420
container as slash host and then change

395
00:12:40,420 --> 00:12:42,460
route to that if you run this command

396
00:12:42,460 --> 00:12:47,650
what happens is it basically says I

397
00:12:47,650 --> 00:12:48,850
can't find that image locally goes off

398
00:12:48,850 --> 00:12:51,010
the dock up and get so and then once

399
00:12:51,010 --> 00:12:55,030
it's run it says oh your root on the

400
00:12:55,030 --> 00:12:56,920
host so I'm just the root user

401
00:12:56,920 --> 00:12:58,480
so one doctor command I'm no root on

402
00:12:58,480 --> 00:13:00,610
that host I'm phool proper root I'm not

403
00:13:00,610 --> 00:13:02,950
constrained in any way shape or form so

404
00:13:02,950 --> 00:13:05,230
I could do anything I want so there I'm

405
00:13:05,230 --> 00:13:06,550
on the docker host and I'm running it

406
00:13:06,550 --> 00:13:09,370
through and I hide UPS CF about full

407
00:13:09,370 --> 00:13:10,630
process lest I can do anything I want to

408
00:13:10,630 --> 00:13:11,440
any of those processes

409
00:13:11,440 --> 00:13:15,760
I am room and that is so docker security

410
00:13:15,760 --> 00:13:17,920
is very nice very flexible but it being

411
00:13:17,920 --> 00:13:19,060
very flexible means you can take it all

412
00:13:19,060 --> 00:13:20,980
the way so you do have to be careful

413
00:13:20,980 --> 00:13:22,209
when you're using it the industry

414
00:13:22,209 --> 00:13:24,990
a little will ears of isolation away

415
00:13:24,990 --> 00:13:27,069
other things to consider about doctor

416
00:13:27,069 --> 00:13:29,679
security where do my images come from so

417
00:13:29,679 --> 00:13:31,329
you know I said there are 2.3 million

418
00:13:31,329 --> 00:13:35,230
images in docker hub of those 270 or

419
00:13:35,230 --> 00:13:37,089
what they call official images which are

420
00:13:37,089 --> 00:13:39,639
maintained by docker and are supported

421
00:13:39,639 --> 00:13:41,110
or at least get updates from the vendor

422
00:13:41,110 --> 00:13:45,369
the RS or 2.3 million - 277 could be

423
00:13:45,369 --> 00:13:47,079
anything they could be malware they

424
00:13:47,079 --> 00:13:48,249
could be cryptically mining they could

425
00:13:48,249 --> 00:13:50,860
be literally anything do run images from

426
00:13:50,860 --> 00:13:53,019
docker hub in production make your own

427
00:13:53,019 --> 00:13:55,149
images have your own registry maintain

428
00:13:55,149 --> 00:13:56,980
them yourselves don't run from docker

429
00:13:56,980 --> 00:13:59,319
hub I do pen tests on containers this is

430
00:13:59,319 --> 00:14:01,360
like a free fighting free finding is you

431
00:14:01,360 --> 00:14:02,529
are running images from docker hub that

432
00:14:02,529 --> 00:14:04,480
you don't own because people do and they

433
00:14:04,480 --> 00:14:07,269
shouldn't it's really dangerous just not

434
00:14:07,269 --> 00:14:07,949
a good idea

435
00:14:07,949 --> 00:14:11,279
so that was my very quick quiz - Dockers

436
00:14:11,279 --> 00:14:12,879
security we're never talked about

437
00:14:12,879 --> 00:14:15,360
container clustering very quickly so

438
00:14:15,360 --> 00:14:18,069
docker is one host right docker is one

439
00:14:18,069 --> 00:14:19,509
machine I'm gonna run docker on a single

440
00:14:19,509 --> 00:14:21,309
machine and I'll run the containers on

441
00:14:21,309 --> 00:14:23,350
that machine obviously if I have a big

442
00:14:23,350 --> 00:14:24,970
company one machine isn't lending like

443
00:14:24,970 --> 00:14:26,619
enough I need a hundred machines two

444
00:14:26,619 --> 00:14:27,639
hundred machines three hundred machines

445
00:14:27,639 --> 00:14:29,619
to do that you need some sort of

446
00:14:29,619 --> 00:14:32,980
clustering software and that lace is

447
00:14:32,980 --> 00:14:34,449
something you need something scales up

448
00:14:34,449 --> 00:14:36,189
all over all those hosts this is where

449
00:14:36,189 --> 00:14:37,929
kubernetes comes in there are other

450
00:14:37,929 --> 00:14:39,970
container orchestration systems but

451
00:14:39,970 --> 00:14:41,230
there was like a kind of big it gets

452
00:14:41,230 --> 00:14:42,699
called the container orchestration Wars

453
00:14:42,699 --> 00:14:44,980
like two years ago and the Kuban is what

454
00:14:44,980 --> 00:14:47,049
it's all over kubernetes won the war it

455
00:14:47,049 --> 00:14:48,519
is now the container Orchestrator

456
00:14:48,519 --> 00:14:49,749
everyone uses whether they should or not

457
00:14:49,749 --> 00:14:52,869
they do what you need to know about

458
00:14:52,869 --> 00:14:55,899
kubernetes is it's very hard to define

459
00:14:55,899 --> 00:14:59,949
kubernetes so no one gets goes to the

460
00:14:59,949 --> 00:15:01,959
github repository clones the software

461
00:15:01,959 --> 00:15:03,939
and installs it from that they use an

462
00:15:03,939 --> 00:15:05,379
installer because it's quite a complex

463
00:15:05,379 --> 00:15:07,509
thing as of last time I checked there

464
00:15:07,509 --> 00:15:09,040
are a hundred and nine different

465
00:15:09,040 --> 00:15:11,170
installers or software as a service

466
00:15:11,170 --> 00:15:12,670
providers who will give you kubernetes

467
00:15:12,670 --> 00:15:16,299
um so from a security standpoint I can't

468
00:15:16,299 --> 00:15:17,170
tell you things about

469
00:15:17,170 --> 00:15:19,209
kubernetes security all the time because

470
00:15:19,209 --> 00:15:20,709
sometimes it depends on the Installer

471
00:15:20,709 --> 00:15:22,509
right maybe they'll have a security fall

472
00:15:22,509 --> 00:15:24,639
maybe they'll have a bad default one

473
00:15:24,639 --> 00:15:25,959
thing I would advise you if you're

474
00:15:25,959 --> 00:15:27,279
thinking about deploying kubernetes is

475
00:15:27,279 --> 00:15:28,990
find out what the defaults for your

476
00:15:28,990 --> 00:15:30,639
chosen installer are because I've had

477
00:15:30,639 --> 00:15:33,009
some nasty surprises with big companies

478
00:15:33,009 --> 00:15:34,149
who you think would know better

479
00:15:34,149 --> 00:15:35,680
putting some really in

480
00:15:35,680 --> 00:15:36,850
secur defaults in their kubernetes

481
00:15:36,850 --> 00:15:38,710
installs so don't assume that just cuz

482
00:15:38,710 --> 00:15:39,700
it comes from like some really

483
00:15:39,700 --> 00:15:40,720
well-known company they'll get it all

484
00:15:40,720 --> 00:15:42,130
completely right that's not my

485
00:15:42,130 --> 00:15:44,680
experience at all it's very hard to hear

486
00:15:44,680 --> 00:15:46,540
this everyone literally everyone's got a

487
00:15:46,540 --> 00:15:48,040
to compare its distribution at this

488
00:15:48,040 --> 00:15:49,540
point as far as I can tell if you're a

489
00:15:49,540 --> 00:15:52,690
big tech company you have to have one so

490
00:15:52,690 --> 00:15:53,470
what is it actually

491
00:15:53,470 --> 00:15:57,910
what does it how does it work this is

492
00:15:57,910 --> 00:15:59,649
vanilla kubernetes this is the absolute

493
00:15:59,649 --> 00:16:01,089
will be most basic cluster you could

494
00:16:01,089 --> 00:16:03,370
have it's not it's more a lot more

495
00:16:03,370 --> 00:16:05,020
complicated than docker but it's not too

496
00:16:05,020 --> 00:16:06,910
horrible everything here basically is

497
00:16:06,910 --> 00:16:09,550
rest api's so it's everything the expose

498
00:16:09,550 --> 00:16:11,080
all these service is just an HTTP API

499
00:16:11,080 --> 00:16:12,459
you can call it with curl you don't have

500
00:16:12,459 --> 00:16:14,529
to use the tooling the main thing red

501
00:16:14,529 --> 00:16:17,230
component in the middle API server so

502
00:16:17,230 --> 00:16:18,670
that essentially is the heart of

503
00:16:18,670 --> 00:16:20,320
kubernetes everything talk to the API

504
00:16:20,320 --> 00:16:23,200
server it manages everything if that

505
00:16:23,200 --> 00:16:24,160
goes wrong from a security perspective

506
00:16:24,160 --> 00:16:25,750
you're gonna have a really bad time

507
00:16:25,750 --> 00:16:27,790
because remember I said Dockers like a

508
00:16:27,790 --> 00:16:30,520
remote process creation tool that's the

509
00:16:30,520 --> 00:16:32,050
same except I can do something to 100

510
00:16:32,050 --> 00:16:33,490
hosts or a thousand hosts all at once so

511
00:16:33,490 --> 00:16:35,140
if you get control of that bad things

512
00:16:35,140 --> 00:16:37,690
gonna happen kubernetes doesn't store

513
00:16:37,690 --> 00:16:39,339
States itself so it uses a thing called

514
00:16:39,339 --> 00:16:41,529
at CD which is just a key value store

515
00:16:41,529 --> 00:16:43,990
it's a fairly basic database and it sits

516
00:16:43,990 --> 00:16:45,370
at the top there and it stores all the

517
00:16:45,370 --> 00:16:47,709
state for the cluster and the other

518
00:16:47,709 --> 00:16:49,029
really interesting component is down in

519
00:16:49,029 --> 00:16:50,709
the bottom so there's a component that

520
00:16:50,709 --> 00:16:52,209
runs on every worker notes I've got come

521
00:16:52,209 --> 00:16:54,160
my master nodes that like manage things

522
00:16:54,160 --> 00:16:55,900
and my worker nodes that run workloads

523
00:16:55,900 --> 00:16:57,400
there's a thing called the queue blur

524
00:16:57,400 --> 00:17:00,190
and the cube essentially manages docker

525
00:17:00,190 --> 00:17:02,440
so what happens is you say to the API

526
00:17:02,440 --> 00:17:05,380
server give me ten websites and the API

527
00:17:05,380 --> 00:17:06,790
server it says to ten of its worker

528
00:17:06,790 --> 00:17:07,300
nodes

529
00:17:07,300 --> 00:17:09,400
give me one website each go and do that

530
00:17:09,400 --> 00:17:11,230
and that's the queue blur and the

531
00:17:11,230 --> 00:17:12,760
cueball it then says two darker hey

532
00:17:12,760 --> 00:17:14,290
docker couldn't run a container for me

533
00:17:14,290 --> 00:17:15,730
so typically I put in the

534
00:17:15,730 --> 00:17:17,380
right-hand-side container engine that's

535
00:17:17,380 --> 00:17:18,849
almost always docker at the moment it

536
00:17:18,849 --> 00:17:20,260
won't be in a year's time people are

537
00:17:20,260 --> 00:17:21,670
like getting rigid or cramping other

538
00:17:21,670 --> 00:17:23,260
things there but the time being is

539
00:17:23,260 --> 00:17:25,329
always darker pretty much so if you can

540
00:17:25,329 --> 00:17:26,859
control the queue blur you can control

541
00:17:26,859 --> 00:17:29,140
docker if you can control docker that

542
00:17:29,140 --> 00:17:31,150
command I worked dead before that gives

543
00:17:31,150 --> 00:17:32,290
you route on the underlying host will

544
00:17:32,290 --> 00:17:32,830
work just fine

545
00:17:32,830 --> 00:17:34,690
so it's really important to get those

546
00:17:34,690 --> 00:17:36,280
three components security right

547
00:17:36,280 --> 00:17:40,840
otherwise bad things happen and an

548
00:17:40,840 --> 00:17:42,130
honorable mention to curate is

549
00:17:42,130 --> 00:17:43,960
networking if you samurais he's only

550
00:17:43,960 --> 00:17:46,480
using kubernetes at all little like okay

551
00:17:46,480 --> 00:17:48,220
so when you come to use Q&A at ease one

552
00:17:48,220 --> 00:17:48,960
of the things you'll find is

553
00:17:48,960 --> 00:17:50,549
networking is a bit weird is the only

554
00:17:50,549 --> 00:17:53,940
language to describe it if I've got like

555
00:17:53,940 --> 00:17:55,559
a hundred seven hundred VMs right and

556
00:17:55,559 --> 00:17:57,450
I'm running containers across all of

557
00:17:57,450 --> 00:17:59,070
them the container could get put

558
00:17:59,070 --> 00:18:00,960
anywhere so I have a web server over

559
00:18:00,960 --> 00:18:02,429
here you could even run like one cluster

560
00:18:02,429 --> 00:18:03,929
in multiple clouds if you really felt

561
00:18:03,929 --> 00:18:05,850
like it I need to provide some way of

562
00:18:05,850 --> 00:18:07,440
all these were close to see each other

563
00:18:07,440 --> 00:18:08,669
they've got to have like they can

564
00:18:08,669 --> 00:18:09,690
address each other and talk to each

565
00:18:09,690 --> 00:18:11,309
other so what kubernetes does is it

566
00:18:11,309 --> 00:18:13,409
trains your overlay network and that's

567
00:18:13,409 --> 00:18:15,600
actually a big flat network by default

568
00:18:15,600 --> 00:18:17,370
where every workload could talk to every

569
00:18:17,370 --> 00:18:18,779
other workload now from a security

570
00:18:18,779 --> 00:18:19,950
standpoint you can probably see the

571
00:18:19,950 --> 00:18:21,840
problem already it's a big flat network

572
00:18:21,840 --> 00:18:24,020
we don't like big flat networks and

573
00:18:24,020 --> 00:18:26,580
weirdly kubernetes decided to outsource

574
00:18:26,580 --> 00:18:28,230
this and they said right we're not gonna

575
00:18:28,230 --> 00:18:29,549
do this ourselves we're gonna give it

576
00:18:29,549 --> 00:18:30,929
and there's all these plugins with funny

577
00:18:30,929 --> 00:18:33,090
names like weave calico flannel Ramana

578
00:18:33,090 --> 00:18:34,740
psyllium so there's a lots of different

579
00:18:34,740 --> 00:18:37,110
options for your networking so each

580
00:18:37,110 --> 00:18:38,610
cluster you run into might well be

581
00:18:38,610 --> 00:18:39,659
different they might use different

582
00:18:39,659 --> 00:18:43,890
networking setups so let's talk about

583
00:18:43,890 --> 00:18:46,049
security when I'm talking about Cuban IT

584
00:18:46,049 --> 00:18:47,549
security when I'm looking at how to hack

585
00:18:47,549 --> 00:18:49,230
into clusters I generally look at three

586
00:18:49,230 --> 00:18:51,960
threat models I see there's attackers on

587
00:18:51,960 --> 00:18:53,190
the internet right the people outside

588
00:18:53,190 --> 00:18:54,570
your cluster they're trying to break in

589
00:18:54,570 --> 00:18:56,100
they don't have any access to your

590
00:18:56,100 --> 00:18:58,559
cluster then we've got compromised

591
00:18:58,559 --> 00:19:00,960
containers so if I'm running 500 app

592
00:19:00,960 --> 00:19:02,940
containers in my cluster chances are

593
00:19:02,940 --> 00:19:03,779
there's the one that's gonna have a

594
00:19:03,779 --> 00:19:05,039
vulnerability in it someone's gonna

595
00:19:05,039 --> 00:19:06,779
break into it what can they do once

596
00:19:06,779 --> 00:19:08,460
they've got that one container can they

597
00:19:08,460 --> 00:19:10,130
get the whole cluster and then

598
00:19:10,130 --> 00:19:13,049
kubernetes is a multi-user system unlike

599
00:19:13,049 --> 00:19:14,970
docker you can have privileges so if I

600
00:19:14,970 --> 00:19:16,500
have a user who's got some rights like

601
00:19:16,500 --> 00:19:18,299
I've got a developer they can create new

602
00:19:18,299 --> 00:19:20,070
websites but they shouldn't have access

603
00:19:20,070 --> 00:19:21,960
to the entire cluster how easy it's

604
00:19:21,960 --> 00:19:23,190
gonna be for them to do that how can you

605
00:19:23,190 --> 00:19:26,549
stop them so I'll start with an external

606
00:19:26,549 --> 00:19:28,440
attackers so if I'm an external attacker

607
00:19:28,440 --> 00:19:30,240
everyone's here as a pen tester you find

608
00:19:30,240 --> 00:19:31,559
you know what you do with the systems

609
00:19:31,559 --> 00:19:33,630
when you get them what you do is you

610
00:19:33,630 --> 00:19:35,610
port scan them and if you poor scan a

611
00:19:35,610 --> 00:19:37,980
cluster you get potentially quite a lot

612
00:19:37,980 --> 00:19:39,679
of fun stuff depends on whether it's

613
00:19:39,679 --> 00:19:41,909
visible in the cloud or not if you fool

614
00:19:41,909 --> 00:19:43,169
these are some of the ports you would

615
00:19:43,169 --> 00:19:46,529
see the main one API server is either on

616
00:19:46,529 --> 00:19:48,330
six four four three four four three or

617
00:19:48,330 --> 00:19:49,770
four four three depends on the

618
00:19:49,770 --> 00:19:51,899
distribution each one is different so if

619
00:19:51,899 --> 00:19:53,730
you see that that's bad this one you can

620
00:19:53,730 --> 00:19:55,289
claim to tell it might be bad right it's

621
00:19:55,289 --> 00:19:57,299
called the insecure API server that's

622
00:19:57,299 --> 00:19:58,620
its formal name that's its name in the

623
00:19:58,620 --> 00:20:00,090
documentation it's called the insecure

624
00:20:00,090 --> 00:20:01,990
API server so you'd think no one would

625
00:20:01,990 --> 00:20:05,230
run that and then the cubelets got its

626
00:20:05,230 --> 00:20:06,520
own ports as well but all these things

627
00:20:06,520 --> 00:20:08,260
you know if I'm a network pen tester and

628
00:20:08,260 --> 00:20:09,640
I see that I probably have a good day

629
00:20:09,640 --> 00:20:10,780
cuz I've got lots of things to try and

630
00:20:10,780 --> 00:20:13,420
attack and the network plugins again

631
00:20:13,420 --> 00:20:17,220
they can sometimes open ports too so

632
00:20:17,220 --> 00:20:19,480
honorable mention the screen shot

633
00:20:19,480 --> 00:20:21,280
probably too visible battle table and

634
00:20:21,280 --> 00:20:22,510
several hurt by the service called

635
00:20:22,510 --> 00:20:23,950
binary edge which is kind of like

636
00:20:23,950 --> 00:20:26,530
showdown and what binary edge have done

637
00:20:26,530 --> 00:20:28,809
recently is they've added some specific

638
00:20:28,809 --> 00:20:30,610
filtering so if you don't know showdown

639
00:20:30,610 --> 00:20:31,780
essentially this camera and the entire

640
00:20:31,780 --> 00:20:34,030
internet they port scan a bunch of hosts

641
00:20:34,030 --> 00:20:35,080
like every host they can get their hands

642
00:20:35,080 --> 00:20:36,880
on and then they give you a database and

643
00:20:36,880 --> 00:20:38,140
you can search and say what can I find

644
00:20:38,140 --> 00:20:40,059
on the internet in Riyadh you've done a

645
00:20:40,059 --> 00:20:41,440
cool thing where they've added type

646
00:20:41,440 --> 00:20:43,870
kubernetes so you can actually say give

647
00:20:43,870 --> 00:20:45,160
me all the systems that look like

648
00:20:45,160 --> 00:20:46,660
they're kubernetes cluster is exposed on

649
00:20:46,660 --> 00:20:48,280
the Internet and then they added a

650
00:20:48,280 --> 00:20:50,080
really cool filter down here poly can't

651
00:20:50,080 --> 00:20:53,230
see it which is author acquired false so

652
00:20:53,230 --> 00:20:54,610
what they did was he said tell me about

653
00:20:54,610 --> 00:20:56,140
all the criminals clusters that are on

654
00:20:56,140 --> 00:20:57,840
the internet without authentication

655
00:20:57,840 --> 00:21:02,830
turns out there are about 700 800 people

656
00:21:02,830 --> 00:21:04,179
have left their clusters on the internet

657
00:21:04,179 --> 00:21:06,700
without authentication and they're all

658
00:21:06,700 --> 00:21:08,350
cryptic remaining there pretty much all

659
00:21:08,350 --> 00:21:10,240
of them they actually do a query where

660
00:21:10,240 --> 00:21:11,679
they show you all the running workloads

661
00:21:11,679 --> 00:21:13,960
on this and you can pretty much see the

662
00:21:13,960 --> 00:21:16,120
signatures of the cryptical Mainers that

663
00:21:16,120 --> 00:21:18,550
these people are running so there's

664
00:21:18,550 --> 00:21:20,020
absolutely systems out there that aren't

665
00:21:20,020 --> 00:21:21,070
being secured and just being shoved on

666
00:21:21,070 --> 00:21:21,670
the Internet

667
00:21:21,670 --> 00:21:24,910
SCD there's about 3,000 of those without

668
00:21:24,910 --> 00:21:26,080
authentication on the Internet

669
00:21:26,080 --> 00:21:29,140
even the docker so you know I said dr.

670
00:21:29,140 --> 00:21:30,429
axe is essentially a true there are

671
00:21:30,429 --> 00:21:32,080
people putting their darker demons on

672
00:21:32,080 --> 00:21:33,160
the internet without authentication

673
00:21:33,160 --> 00:21:34,870
there's a couple thousand of those and

674
00:21:34,870 --> 00:21:36,010
they're all practically mining as well

675
00:21:36,010 --> 00:21:37,840
so basically if you put your stuff on

676
00:21:37,840 --> 00:21:39,970
the internet now your rates cluster the

677
00:21:39,970 --> 00:21:41,500
bad guys are absolutely up on this

678
00:21:41,500 --> 00:21:42,520
because this is great for them right

679
00:21:42,520 --> 00:21:44,530
because kubernetes cluster is great for

680
00:21:44,530 --> 00:21:45,700
a cryptic remaining attacker because

681
00:21:45,700 --> 00:21:47,860
it's designed to run new processors so

682
00:21:47,860 --> 00:21:48,880
they just say give me my cryptic

683
00:21:48,880 --> 00:21:50,800
remaining container from that place and

684
00:21:50,800 --> 00:21:51,820
it does it because that's what it's

685
00:21:51,820 --> 00:21:52,630
designed to do for living

686
00:21:52,630 --> 00:21:53,920
so yeah there are people who have made

687
00:21:53,920 --> 00:21:55,840
that mistake and the really surprising

688
00:21:55,840 --> 00:21:58,750
thing was for me was 390 bills at the

689
00:21:58,750 --> 00:22:00,730
insecure port just called the unsecured

690
00:22:00,730 --> 00:22:02,350
port and they configured the clusters

691
00:22:02,350 --> 00:22:03,580
the list on the insecure port on the

692
00:22:03,580 --> 00:22:08,050
internet there you go but let's talk

693
00:22:08,050 --> 00:22:09,730
about some of the other ones the EPI

694
00:22:09,730 --> 00:22:11,140
servers could have an easy attack but

695
00:22:11,140 --> 00:22:12,820
the couplets a fun thing to attack and

696
00:22:12,820 --> 00:22:14,740
this one in terms of like if you're a

697
00:22:14,740 --> 00:22:15,789
pen tester anything

698
00:22:15,789 --> 00:22:17,799
see this stuff the Cuba I still see

699
00:22:17,799 --> 00:22:19,330
other indicators I've seen that in the

700
00:22:19,330 --> 00:22:21,429
last six months definitely it's not it

701
00:22:21,429 --> 00:22:22,929
used to be the default but it was out of

702
00:22:22,929 --> 00:22:24,609
them to get that all the time these days

703
00:22:24,609 --> 00:22:27,129
it's less bad but that's not to say I

704
00:22:27,129 --> 00:22:28,629
haven't seen production clusters that

705
00:22:28,629 --> 00:22:30,729
I've got this unauthenticated and I said

706
00:22:30,729 --> 00:22:32,109
it controls docker so let's see what you

707
00:22:32,109 --> 00:22:34,239
can do with that I'm gonna go back to

708
00:22:34,239 --> 00:22:37,899
start this video so if you get the cue

709
00:22:37,899 --> 00:22:39,340
blip one of the cool things about

710
00:22:39,340 --> 00:22:41,889
kubernetes testing is it's just curl you

711
00:22:41,889 --> 00:22:43,090
don't need to like fancy tooling or

712
00:22:43,090 --> 00:22:44,559
anything because they're all HTTP API is

713
00:22:44,559 --> 00:22:46,779
all you need is a copy of Perl and you

714
00:22:46,779 --> 00:22:51,359
can do some fun stuff so if I do on this

715
00:22:51,359 --> 00:22:54,999
yeah so if you get curl in this case

716
00:22:54,999 --> 00:22:59,440
I've got a cluster and it is so you can

717
00:22:59,440 --> 00:23:00,489
do things like give me the container

718
00:23:00,489 --> 00:23:02,769
logs so because this thing manages

719
00:23:02,769 --> 00:23:05,409
docker it has an endpoint for logs and

720
00:23:05,409 --> 00:23:06,970
you can say just give me the logs for

721
00:23:06,970 --> 00:23:08,919
whatever container is running on my host

722
00:23:08,919 --> 00:23:10,899
in this case the API server which we say

723
00:23:10,899 --> 00:23:12,580
at the API server is super important so

724
00:23:12,580 --> 00:23:14,679
if you expose the cubelet that way then

725
00:23:14,679 --> 00:23:16,710
what you can do is just say dump logs

726
00:23:16,710 --> 00:23:19,919
and that's not a bad it's quite useful

727
00:23:19,919 --> 00:23:22,479
and you get that so you get by the logs

728
00:23:22,479 --> 00:23:23,799
because just executing a command and

729
00:23:23,799 --> 00:23:24,399
returning it

730
00:23:24,399 --> 00:23:26,259
that's kinda useful obviously it's not

731
00:23:26,259 --> 00:23:27,429
as good as I should like compromising

732
00:23:27,429 --> 00:23:29,409
the entire host fun thing is you can do

733
00:23:29,409 --> 00:23:32,369
that too so we've got this command here

734
00:23:32,369 --> 00:23:35,049
and this isn't it looks a bit

735
00:23:35,049 --> 00:23:36,460
complicated but it's not that bad

736
00:23:36,460 --> 00:23:38,440
it basically says give me the run end

737
00:23:38,440 --> 00:23:39,729
point because there's a rest api so it

738
00:23:39,729 --> 00:23:40,809
just hasn't one called run

739
00:23:40,809 --> 00:23:42,720
give me the namespace in which its

740
00:23:42,720 --> 00:23:44,470
namespace which is just how the

741
00:23:44,470 --> 00:23:46,359
organized containers then give me the

742
00:23:46,359 --> 00:23:48,970
api server and the api server and then

743
00:23:48,970 --> 00:23:49,899
what i'm going to do is i'm gonna run a

744
00:23:49,899 --> 00:23:51,999
command and the command i'm going to run

745
00:23:51,999 --> 00:23:57,429
is cat yet see kubernetes piki I see a

746
00:23:57,429 --> 00:24:00,220
key which is you know highlight that so

747
00:24:00,220 --> 00:24:02,619
that is the certificate authority key

748
00:24:02,619 --> 00:24:04,179
for the certificate authority that

749
00:24:04,179 --> 00:24:06,700
manages the cluster if you can cat that

750
00:24:06,700 --> 00:24:08,739
file out you can basically take full

751
00:24:08,739 --> 00:24:10,869
control the cluster because you do

752
00:24:10,869 --> 00:24:12,099
certificate authentication and you can

753
00:24:12,099 --> 00:24:13,179
just sell yourself a new certificate

754
00:24:13,179 --> 00:24:15,129
saying I'd like a new user called cost

755
00:24:15,129 --> 00:24:17,739
Robin please and it'll give you one so

756
00:24:17,739 --> 00:24:19,599
access to the cubelet very very quickly

757
00:24:19,599 --> 00:24:21,669
leads to fool copper imposter compromise

758
00:24:21,669 --> 00:24:23,529
you can just carry a file or you can

759
00:24:23,529 --> 00:24:24,999
actually I mean things that come up

760
00:24:24,999 --> 00:24:26,739
parameter there's command that's

761
00:24:26,739 --> 00:24:28,210
literally run this command in the

762
00:24:28,210 --> 00:24:29,200
container that can be

763
00:24:29,200 --> 00:24:30,549
anything you can run any Linux command

764
00:24:30,549 --> 00:24:32,320
and you are route at that point so it's

765
00:24:32,320 --> 00:24:33,820
run commander's route so see this

766
00:24:33,820 --> 00:24:36,309
command execution as a service and it's

767
00:24:36,309 --> 00:24:44,200
very useful other means of acquiring

768
00:24:44,200 --> 00:24:45,429
access if you're in the outside world

769
00:24:45,429 --> 00:24:47,380
you don't actually have access yet yeah

770
00:24:47,380 --> 00:24:50,230
so obviously people put things on github

771
00:24:50,230 --> 00:24:52,659
they shouldn't github are getting better

772
00:24:52,659 --> 00:24:55,090
like warning you if you do that but they

773
00:24:55,090 --> 00:24:56,500
haven't got around to kubernetes yet

774
00:24:56,500 --> 00:24:59,320
so typically kubernetes authentication

775
00:24:59,320 --> 00:25:00,610
if I've got users and I'm giving them

776
00:25:00,610 --> 00:25:02,110
rights to the cluster I give them a file

777
00:25:02,110 --> 00:25:04,870
called a compact file that was a query I

778
00:25:04,870 --> 00:25:07,029
did four things which I know are in Cube

779
00:25:07,029 --> 00:25:11,440
config files and I got 666 reserved 636

780
00:25:11,440 --> 00:25:13,870
results now most of those were just like

781
00:25:13,870 --> 00:25:15,789
templates I had a look at a couple and

782
00:25:15,789 --> 00:25:17,620
they look like real Koster data to me a

783
00:25:17,620 --> 00:25:19,690
little a real users in real clusters I

784
00:25:19,690 --> 00:25:21,880
obviously not watching to risk going to

785
00:25:21,880 --> 00:25:23,769
jail didn't try any of them but the

786
00:25:23,769 --> 00:25:25,630
simple fact is if you've got people who

787
00:25:25,630 --> 00:25:27,639
are developing and using github they

788
00:25:27,639 --> 00:25:29,049
might make a mistake and they might post

789
00:25:29,049 --> 00:25:30,789
their credentials into github you need

790
00:25:30,789 --> 00:25:32,620
to watch for that we've I've seen many

791
00:25:32,620 --> 00:25:34,600
cases where customers will post things

792
00:25:34,600 --> 00:25:36,340
into github a common thing I've seen

793
00:25:36,340 --> 00:25:37,990
happen a lot as if you develop on github

794
00:25:37,990 --> 00:25:40,149
as in companies that don't develop it in

795
00:25:40,149 --> 00:25:41,830
private repositories and then a single

796
00:25:41,830 --> 00:25:43,539
developer will go oh I want to work on

797
00:25:43,539 --> 00:25:45,220
this so they clone it and then they go

798
00:25:45,220 --> 00:25:46,840
I'm not really ready to put that back in

799
00:25:46,840 --> 00:25:48,519
the main repository so fork it and put

800
00:25:48,519 --> 00:25:50,260
in my private github account but they do

801
00:25:50,260 --> 00:25:52,000
that as a public repository and then

802
00:25:52,000 --> 00:25:53,860
suddenly all the secrets are removed

803
00:25:53,860 --> 00:25:56,289
into the public repository so typically

804
00:25:56,289 --> 00:25:57,519
we say if you're using get out a lot you

805
00:25:57,519 --> 00:25:58,779
need to scan and get out regularly and

806
00:25:58,779 --> 00:26:03,010
kubernetes is no exception so malicious

807
00:26:03,010 --> 00:26:04,779
container see I've got a most just

808
00:26:04,779 --> 00:26:05,200
container

809
00:26:05,200 --> 00:26:06,760
you know I've one of the web apps get

810
00:26:06,760 --> 00:26:08,289
deployed has got a vulnerability I've

811
00:26:08,289 --> 00:26:10,779
got command execution what extra things

812
00:26:10,779 --> 00:26:14,559
can I do to break into a cluster I've

813
00:26:14,559 --> 00:26:15,789
got to increase the tax effort at this

814
00:26:15,789 --> 00:26:17,230
point no more things I can play with

815
00:26:17,230 --> 00:26:19,389
I've got access to the container file

816
00:26:19,389 --> 00:26:20,889
system right so I've compromised one

817
00:26:20,889 --> 00:26:22,480
container I can see whatever is in that

818
00:26:22,480 --> 00:26:24,880
container I shouldn't give me much but

819
00:26:24,880 --> 00:26:27,370
it does I've got my internal network

820
00:26:27,370 --> 00:26:29,289
position so now I can scan this big flat

821
00:26:29,289 --> 00:26:30,909
network and try and find you know under

822
00:26:30,909 --> 00:26:34,269
indicated services none obviously I can

823
00:26:34,269 --> 00:26:35,019
attack the kernel

824
00:26:35,019 --> 00:26:36,789
these are containers is a shared kernel

825
00:26:36,789 --> 00:26:41,799
I can do that too so oh yeah so tacking

826
00:26:41,799 --> 00:26:42,010
sit

827
00:26:42,010 --> 00:26:43,180
service accounts are a thing that

828
00:26:43,180 --> 00:26:45,340
kubernetes came up with it's the second

829
00:26:45,340 --> 00:26:47,380
weirdest decision that your Bernanke's

830
00:26:47,380 --> 00:26:48,940
made with regards to security there's

831
00:26:48,940 --> 00:26:50,200
one weirder one which I'll talk about

832
00:26:50,200 --> 00:26:52,570
later on with this one what they did was

833
00:26:52,570 --> 00:26:54,130
they said every single container running

834
00:26:54,130 --> 00:26:56,650
in the cluster by default will be given

835
00:26:56,650 --> 00:26:59,320
a JWT token they'll be mounted into the

836
00:26:59,320 --> 00:27:01,210
file system that has access to the API

837
00:27:01,210 --> 00:27:04,600
server in the old days those were all

838
00:27:04,600 --> 00:27:06,310
passed Ravin so if you're in a really

839
00:27:06,310 --> 00:27:07,540
old cluster you'll find every single one

840
00:27:07,540 --> 00:27:08,770
of those is cluster admin and you let

841
00:27:08,770 --> 00:27:10,930
you just get the token and say thank you

842
00:27:10,930 --> 00:27:13,360
I'm quest Ratman these days people have

843
00:27:13,360 --> 00:27:15,280
worked to lock those down a bit but I

844
00:27:15,280 --> 00:27:16,900
have started to see clusters where

845
00:27:16,900 --> 00:27:18,730
they're making mistakes with the role

846
00:27:18,730 --> 00:27:20,380
based access control and they're giving

847
00:27:20,380 --> 00:27:23,560
these tokens far too much access so it's

848
00:27:23,560 --> 00:27:25,780
why I tend to do you get your cut you

849
00:27:25,780 --> 00:27:26,950
compromise container and you can check

850
00:27:26,950 --> 00:27:28,540
into your access this tokens go and a

851
00:27:28,540 --> 00:27:29,620
lot of time you'll find you get more

852
00:27:29,620 --> 00:27:30,550
access than you thought you were gonna

853
00:27:30,550 --> 00:27:44,110
happen so just to demonstrate that so

854
00:27:44,110 --> 00:27:45,820
I'm just gonna run I've got a cluster

855
00:27:45,820 --> 00:27:46,990
running here and I'm just going to

856
00:27:46,990 --> 00:27:48,760
connect to my cluster and execute come

857
00:27:48,760 --> 00:27:49,780
on the net

858
00:27:49,780 --> 00:27:51,970
give myself a new container and I was

859
00:27:51,970 --> 00:27:53,170
gonna run a shell in it so I can run a

860
00:27:53,170 --> 00:27:55,420
shell inside a container no problem it

861
00:27:55,420 --> 00:27:57,280
will warm a bit some stuff I don't care

862
00:27:57,280 --> 00:28:01,180
and then fun part is I'm never gonna run

863
00:28:01,180 --> 00:28:02,560
another cube now now I'm inside the

864
00:28:02,560 --> 00:28:03,490
container right I don't know the

865
00:28:03,490 --> 00:28:05,380
credentials I had before and I'm running

866
00:28:05,380 --> 00:28:07,720
commands inside the container the fun

867
00:28:07,720 --> 00:28:11,530
part is it works so Cupid 80s is very

868
00:28:11,530 --> 00:28:14,290
helpful it sets environment variables in

869
00:28:14,290 --> 00:28:16,690
every container the tale process is

870
00:28:16,690 --> 00:28:18,760
where to find the API server and then

871
00:28:18,760 --> 00:28:21,790
this this cube CTL command knows to look

872
00:28:21,790 --> 00:28:23,890
for credentials and default locations so

873
00:28:23,890 --> 00:28:25,000
it will go and look and see if it's got

874
00:28:25,000 --> 00:28:26,560
a token that it can use and then it'll

875
00:28:26,560 --> 00:28:29,050
use it so literally if you get access to

876
00:28:29,050 --> 00:28:31,150
compromised container download cube CTL

877
00:28:31,150 --> 00:28:33,400
and run it and it'll probably work and

878
00:28:33,400 --> 00:28:34,840
if they've got me the mess of the rights

879
00:28:34,840 --> 00:28:36,280
you'll have more rights than you think

880
00:28:36,280 --> 00:28:39,400
so at that point you can get quite a lot

881
00:28:39,400 --> 00:28:42,280
of access quite easily if they haven't

882
00:28:42,280 --> 00:28:43,750
given like now that case is cross

883
00:28:43,750 --> 00:28:45,580
grabbing so it's no problem if you've

884
00:28:45,580 --> 00:28:46,630
given them less rights you can still

885
00:28:46,630 --> 00:28:48,040
query and say what rights have you given

886
00:28:48,040 --> 00:28:50,020
me and you try and use that to escalate

887
00:28:50,020 --> 00:28:53,560
access but it literally can be that say

888
00:28:53,560 --> 00:28:55,120
I have had I got a call from someone

889
00:28:55,120 --> 00:28:55,870
who's doing a

890
00:28:55,870 --> 00:28:57,610
kubernetes test they said I'm doing

891
00:28:57,610 --> 00:28:59,740
compromise container of you and I just

892
00:28:59,740 --> 00:29:00,940
ran that and it worked and now I'm

893
00:29:00,940 --> 00:29:02,350
cluster admin and it's 10 o'clock in the

894
00:29:02,350 --> 00:29:04,059
morning on the first day of the test and

895
00:29:04,059 --> 00:29:05,320
I was like oh well you've got a really

896
00:29:05,320 --> 00:29:07,050
easy job now because you've kind of done

897
00:29:07,050 --> 00:29:08,950
so it's done the game production

898
00:29:08,950 --> 00:29:10,450
clusters it's not unknown for that to be

899
00:29:10,450 --> 00:29:13,480
a thing that happens if you're attacking

900
00:29:13,480 --> 00:29:15,700
the kernel to be honest with you there

901
00:29:15,700 --> 00:29:17,260
have been two breakouts there was dirty

902
00:29:17,260 --> 00:29:19,570
cow in 2016 there was wait ID in 2017

903
00:29:19,570 --> 00:29:21,460
there haven't been that many exploits

904
00:29:21,460 --> 00:29:24,550
that alone is 2x and get over running

905
00:29:24,550 --> 00:29:26,230
dr. dinner decently configured one with

906
00:29:26,230 --> 00:29:27,670
an up-to-date kernel obviously if

907
00:29:27,670 --> 00:29:28,990
someone super old on their kernels you

908
00:29:28,990 --> 00:29:30,910
could try these again people probably

909
00:29:30,910 --> 00:29:32,110
have Linux privilege escalation

910
00:29:32,110 --> 00:29:33,190
vulnerabilities but that's the sort of

911
00:29:33,190 --> 00:29:34,390
thing you need to break out it's not

912
00:29:34,390 --> 00:29:36,730
like trivial but it's definitely one to

913
00:29:36,730 --> 00:29:40,660
know about and leverage so I want to

914
00:29:40,660 --> 00:29:42,190
mention levering act is accessed in the

915
00:29:42,190 --> 00:29:44,380
cloud not least because this talk was

916
00:29:44,380 --> 00:29:47,020
cloudy clusters most people deploy their

917
00:29:47,020 --> 00:29:49,870
clusters inside AWS zero GCP places ah

918
00:29:49,870 --> 00:29:52,150
if you've noticed one thing you might

919
00:29:52,150 --> 00:29:54,130
know about AWS for example is they have

920
00:29:54,130 --> 00:29:56,470
a metadata service the metadata service

921
00:29:56,470 --> 00:29:58,179
lists on a predictable IP address one

922
00:29:58,179 --> 00:29:59,620
six nine two five four one six nine two

923
00:29:59,620 --> 00:30:01,750
five four as your and GCP have something

924
00:30:01,750 --> 00:30:05,500
similar and in if you give credentials

925
00:30:05,500 --> 00:30:07,809
so Amazon credentials to your ec2

926
00:30:07,809 --> 00:30:09,580
machines which is quite common in

927
00:30:09,580 --> 00:30:11,230
cubensis deployments so some of the

928
00:30:11,230 --> 00:30:13,270
installers say give your ec2 machines

929
00:30:13,270 --> 00:30:16,240
these AWS rights you can access those

930
00:30:16,240 --> 00:30:18,460
credentials from inside the container so

931
00:30:18,460 --> 00:30:19,720
you can actually see from a compromised

932
00:30:19,720 --> 00:30:21,760
container hit one six nine two five four

933
00:30:21,760 --> 00:30:23,530
and then get a set of Amazon valid

934
00:30:23,530 --> 00:30:25,510
Amazon credentials so commonly on tests

935
00:30:25,510 --> 00:30:26,650
now what we're doing is we're saying

936
00:30:26,650 --> 00:30:28,630
we'll not just try the cluster we'll try

937
00:30:28,630 --> 00:30:29,620
and then break out your Amazon account

938
00:30:29,620 --> 00:30:31,420
I'll show you that it's really fairly

939
00:30:31,420 --> 00:30:33,760
straightforward so I've got a cluster

940
00:30:33,760 --> 00:30:37,300
running in a running amls here and I'm

941
00:30:37,300 --> 00:30:39,040
just do it mr. it attached to my cluster

942
00:30:39,040 --> 00:30:40,360
so I'm gonna attach this cluster this

943
00:30:40,360 --> 00:30:44,710
cluster is running in AWS and once

944
00:30:44,710 --> 00:30:47,170
you're attached all you need to do again

945
00:30:47,170 --> 00:30:49,000
this is hacking with curl I love this

946
00:30:49,000 --> 00:30:50,020
because it's literally if you've got

947
00:30:50,020 --> 00:30:51,070
curl you can do all sorts of fun stuff

948
00:30:51,070 --> 00:30:52,809
with clusters you basically just hit

949
00:30:52,809 --> 00:30:55,690
this and that is a predictable type ones

950
00:30:55,690 --> 00:30:57,400
that address is always the same an

951
00:30:57,400 --> 00:30:58,750
Amazon level you can't block that

952
00:30:58,750 --> 00:31:00,520
there's no facility for blocking

953
00:31:00,520 --> 00:31:02,740
metadata access there are things you can

954
00:31:02,740 --> 00:31:04,330
install in kubernetes to stop it being

955
00:31:04,330 --> 00:31:06,310
accessible from inside containers but if

956
00:31:06,310 --> 00:31:08,370
you don't install them it will be

957
00:31:08,370 --> 00:31:14,980
and then so yeah ABC just says that's

958
00:31:14,980 --> 00:31:17,530
the address those are my credentials and

959
00:31:17,530 --> 00:31:18,760
you can kind of iterate through it to

960
00:31:18,760 --> 00:31:20,350
your finder and you'll give you a list

961
00:31:20,350 --> 00:31:22,240
of those names if you ask the directory

962
00:31:22,240 --> 00:31:24,460
and it does that and it'll dump you and

963
00:31:24,460 --> 00:31:26,410
that's a valid set of AWS creds and you

964
00:31:26,410 --> 00:31:28,030
can then go and you try uses it up yes

965
00:31:28,030 --> 00:31:30,040
creds and say what can I do now can that

966
00:31:30,040 --> 00:31:31,240
actually let me do anything else and

967
00:31:31,240 --> 00:31:33,100
some of the installers for kubernetes

968
00:31:33,100 --> 00:31:35,200
are a bit notorious for giving a lot of

969
00:31:35,200 --> 00:31:36,850
permissions to Amazon as part of the

970
00:31:36,850 --> 00:31:38,830
install process so your ec2 might have

971
00:31:38,830 --> 00:31:40,690
for example full control of ec2 for that

972
00:31:40,690 --> 00:31:41,050
account

973
00:31:41,050 --> 00:31:42,550
so put which point you can create as

974
00:31:42,550 --> 00:31:43,660
many of you m do you want cryptically

975
00:31:43,660 --> 00:31:44,770
mining again could be great fun at that

976
00:31:44,770 --> 00:31:47,080
point where you can say how many VMs

977
00:31:47,080 --> 00:31:53,370
poor their credit card runs out so

978
00:31:53,370 --> 00:31:57,160
malicious users it's harder to stop

979
00:31:57,160 --> 00:31:59,350
mostess users from from from doing bad

980
00:31:59,350 --> 00:32:01,230
things to your cluster

981
00:32:01,230 --> 00:32:03,880
but if you've got some criticism meant

982
00:32:03,880 --> 00:32:05,500
to be a multi-user system I've seen a

983
00:32:05,500 --> 00:32:07,660
lot of customers running big clusters

984
00:32:07,660 --> 00:32:10,180
with like 10 20 30 apps no obviously you

985
00:32:10,180 --> 00:32:11,290
don't want every developer to have

986
00:32:11,290 --> 00:32:12,760
access to every app and did you

987
00:32:12,760 --> 00:32:13,750
definitely want every deal could have

988
00:32:13,750 --> 00:32:15,280
access to cluster admin so you have

989
00:32:15,280 --> 00:32:18,180
trying to stop them from getting that

990
00:32:18,180 --> 00:32:20,560
but that's actually quite difficult by

991
00:32:20,560 --> 00:32:23,860
default at the box kubernetes anyone who

992
00:32:23,860 --> 00:32:26,170
has the rights to create a pod is going

993
00:32:26,170 --> 00:32:27,970
to be able to get access to the

994
00:32:27,970 --> 00:32:29,800
underlying hosts because there's no

995
00:32:29,800 --> 00:32:31,330
facilities slop you're doing docker run

996
00:32:31,330 --> 00:32:33,340
- - privileged that command we did

997
00:32:33,340 --> 00:32:34,810
earlier it just strips away all the

998
00:32:34,810 --> 00:32:37,330
security that's entirely plausible so

999
00:32:37,330 --> 00:32:39,280
basically you need to add additional

1000
00:32:39,280 --> 00:32:40,990
features on there's a feature called pod

1001
00:32:40,990 --> 00:32:43,360
security policy which lets you block the

1002
00:32:43,360 --> 00:32:44,350
creation of things like privilege

1003
00:32:44,350 --> 00:32:46,570
containers lets you block mounting the

1004
00:32:46,570 --> 00:32:48,610
underlying host filesystem all that

1005
00:32:48,610 --> 00:32:50,770
stuff I will say that I've never seen

1006
00:32:50,770 --> 00:32:52,480
animal deploy here so I've literally

1007
00:32:52,480 --> 00:32:53,680
never seen a cluster where anyone's

1008
00:32:53,680 --> 00:32:55,420
deployed pod it is a bit of a picky

1009
00:32:55,420 --> 00:32:56,800
thing to get working I'm not gonna lie

1010
00:32:56,800 --> 00:32:59,200
but without that you can pretty much if

1011
00:32:59,200 --> 00:33:00,370
you're an attacker and you've got the

1012
00:33:00,370 --> 00:33:01,330
reach create pods

1013
00:33:01,330 --> 00:33:02,470
you're going to be able to compromise

1014
00:33:02,470 --> 00:33:03,820
the cluster or at least compromise some

1015
00:33:03,820 --> 00:33:06,040
of the underlying nodes to give a quick

1016
00:33:06,040 --> 00:33:10,440
demo of that that's quickly

1017
00:33:13,080 --> 00:33:20,420
so whatever here is I've got a little

1018
00:33:20,420 --> 00:33:22,160
Manifest we just look at just how you

1019
00:33:22,160 --> 00:33:24,530
create containers and it's called a

1020
00:33:24,530 --> 00:33:26,690
daemon set and a daemon said basically

1021
00:33:26,690 --> 00:33:28,310
is a type of kubernetes object where it

1022
00:33:28,310 --> 00:33:30,350
says create one of these containers on

1023
00:33:30,350 --> 00:33:32,360
every single node in the cluster so I

1024
00:33:32,360 --> 00:33:33,680
one of these containers I want you to

1025
00:33:33,680 --> 00:33:34,940
give me one of those in every single

1026
00:33:34,940 --> 00:33:37,730
node including master nodes so you'll

1027
00:33:37,730 --> 00:33:38,990
get where all the API servers are as

1028
00:33:38,990 --> 00:33:40,760
well once you've got that you can just

1029
00:33:40,760 --> 00:33:42,320
say show me the things you've created

1030
00:33:42,320 --> 00:33:43,910
and it's created to them I've got two

1031
00:33:43,910 --> 00:33:46,670
node cluster and then all I need to do

1032
00:33:46,670 --> 00:33:49,790
is I say exec into one of those nodes

1033
00:33:49,790 --> 00:33:52,190
into one of the pods I've created let's

1034
00:33:52,190 --> 00:33:53,810
give it a name and I'd give it that

1035
00:33:53,810 --> 00:33:55,190
command it's sim command I used to the

1036
00:33:55,190 --> 00:33:56,890
docker container sure it's /host

1037
00:33:56,890 --> 00:33:58,780
actually yeah I'm gonna get that wrong

1038
00:33:58,780 --> 00:34:03,010
yes true slash host and it does it and

1039
00:34:03,010 --> 00:34:06,470
what do you notice I'm ripped on the

1040
00:34:06,470 --> 00:34:08,149
node so I'm just the root user at that

1041
00:34:08,149 --> 00:34:09,590
point I'm the unconstrained root user

1042
00:34:09,590 --> 00:34:11,480
I've got full access to that machine and

1043
00:34:11,480 --> 00:34:13,760
there's two nodes in that cluster but I

1044
00:34:13,760 --> 00:34:15,560
since I've got root on both so the

1045
00:34:15,560 --> 00:34:17,389
single manifest you can essentially take

1046
00:34:17,389 --> 00:34:19,159
root access or 100 node cluster and

1047
00:34:19,159 --> 00:34:20,300
every single node at the same time if

1048
00:34:20,300 --> 00:34:21,800
they've not deployed port security

1049
00:34:21,800 --> 00:34:23,480
policies so that's why pod security

1050
00:34:23,480 --> 00:34:24,739
postures are so important because if you

1051
00:34:24,739 --> 00:34:27,530
don't people do that to you the

1052
00:34:27,530 --> 00:34:29,389
interesting thing about or what anything

1053
00:34:29,389 --> 00:34:30,679
is thing to me about this is people

1054
00:34:30,679 --> 00:34:32,239
exposed to humanities clusters the

1055
00:34:32,239 --> 00:34:34,630
internet a lot there are I think

1056
00:34:34,630 --> 00:34:36,290
conservative estimate there's a couple

1057
00:34:36,290 --> 00:34:38,000
hundred thousand humanities clusters you

1058
00:34:38,000 --> 00:34:39,560
can tell from the SSL Certificates that

1059
00:34:39,560 --> 00:34:40,880
it's give rates cluster and there's a

1060
00:34:40,880 --> 00:34:41,899
couple hundred thousand totally online

1061
00:34:41,899 --> 00:34:43,790
so if any of their credentials go

1062
00:34:43,790 --> 00:34:45,830
missing then you can head it online and

1063
00:34:45,830 --> 00:34:48,168
you can do that so it could be quite bad

1064
00:34:48,168 --> 00:34:51,918
so how do we fix all this we've said

1065
00:34:51,918 --> 00:34:53,179
we've got a lot of problems there's lots

1066
00:34:53,179 --> 00:34:54,500
things me to think about if you're

1067
00:34:54,500 --> 00:34:56,449
deploying kubernetes and as I said I've

1068
00:34:56,449 --> 00:34:57,770
seen a huge number of companies doing

1069
00:34:57,770 --> 00:35:01,250
this so I was at cube con you walk about

1070
00:35:01,250 --> 00:35:03,560
three weeks ago and there were seven

1071
00:35:03,560 --> 00:35:05,060
thousand seven hundred people out there

1072
00:35:05,060 --> 00:35:06,560
the previous year it had been I think

1073
00:35:06,560 --> 00:35:07,880
four thousand the previous year had been

1074
00:35:07,880 --> 00:35:09,350
fourteen hundred so there's a huge

1075
00:35:09,350 --> 00:35:10,580
growth and interest in this if you're

1076
00:35:10,580 --> 00:35:11,750
not running humanities now you're Pro

1077
00:35:11,750 --> 00:35:12,920
gonna run across people running it

1078
00:35:12,920 --> 00:35:16,160
pretty soon so what you to worry about

1079
00:35:16,160 --> 00:35:18,590
you need to lock down the API security

1080
00:35:18,590 --> 00:35:20,960
that's absolute like table stakes the

1081
00:35:20,960 --> 00:35:22,040
very first thing you do is get those

1082
00:35:22,040 --> 00:35:23,930
api's i talked about and make sure

1083
00:35:23,930 --> 00:35:24,980
they're not available unauthenticated

1084
00:35:24,980 --> 00:35:26,420
make sure you've got your authentication

1085
00:35:26,420 --> 00:35:29,780
configured correctly and they're they're

1086
00:35:29,780 --> 00:35:33,380
not easily accessible then we get to api

1087
00:35:33,380 --> 00:35:34,540
server authentic a

1088
00:35:34,540 --> 00:35:37,869
this one has the the weirdest thing

1089
00:35:37,869 --> 00:35:39,280
about kubernetes security that I've

1090
00:35:39,280 --> 00:35:41,500
found so kubernetes by default within

1091
00:35:41,500 --> 00:35:43,030
product provides three ways of

1092
00:35:43,030 --> 00:35:44,920
authenticating it provides basic

1093
00:35:44,920 --> 00:35:46,480
authentication which is clear text

1094
00:35:46,480 --> 00:35:48,700
credentials in a file it provides token

1095
00:35:48,700 --> 00:35:50,380
authentication which is clear text

1096
00:35:50,380 --> 00:35:52,240
credentials in a file and it provides

1097
00:35:52,240 --> 00:35:54,310
client certificate authentication so

1098
00:35:54,310 --> 00:35:55,510
obviously of those three people go oh

1099
00:35:55,510 --> 00:35:56,950
well client certificate that's obviously

1100
00:35:56,950 --> 00:35:58,740
better there's one small problem

1101
00:35:58,740 --> 00:36:00,700
kubernetes doesn't have certificate

1102
00:36:00,700 --> 00:36:03,820
revocation at all so if I issue a client

1103
00:36:03,820 --> 00:36:05,589
certificate with a user I say here's

1104
00:36:05,589 --> 00:36:06,820
your appliance difficut for a temptation

1105
00:36:06,820 --> 00:36:08,589
in this cluster and then they leave the

1106
00:36:08,589 --> 00:36:10,150
company in three months time or they

1107
00:36:10,150 --> 00:36:12,460
move jobs or they lose their laptop and

1108
00:36:12,460 --> 00:36:14,230
Starbucks and it wasn't encrypted the

1109
00:36:14,230 --> 00:36:16,150
only way to defeat that is to reroll the

1110
00:36:16,150 --> 00:36:18,010
entire cluster so basically blow with

1111
00:36:18,010 --> 00:36:19,240
the entire sniff authority and go from

1112
00:36:19,240 --> 00:36:21,160
scratch that's dealing that is and to

1113
00:36:21,160 --> 00:36:22,510
this day there's an open issue on github

1114
00:36:22,510 --> 00:36:23,920
that's been issued open for four years

1115
00:36:23,920 --> 00:36:25,690
which says can we please implement

1116
00:36:25,690 --> 00:36:27,940
certificate revocation and they happen

1117
00:36:27,940 --> 00:36:29,710
so it's probably not gonna happen that

1118
00:36:29,710 --> 00:36:31,960
if you're doing this and your companies

1119
00:36:31,960 --> 00:36:33,400
wanted to do this the answer is use an

1120
00:36:33,400 --> 00:36:35,140
external authentication service so they

1121
00:36:35,140 --> 00:36:36,910
do have they can hook into like Active

1122
00:36:36,910 --> 00:36:38,170
Directory or you can hook into like

1123
00:36:38,170 --> 00:36:40,210
Google or github or something do not use

1124
00:36:40,210 --> 00:36:41,560
the umbilicus indication options because

1125
00:36:41,560 --> 00:36:43,570
there's no good ones they kind of live

1126
00:36:43,570 --> 00:36:44,770
their opinion is they cannibal are that

1127
00:36:44,770 --> 00:36:45,400
is not their problem

1128
00:36:45,400 --> 00:36:47,680
I disagree respectfully but that's

1129
00:36:47,680 --> 00:36:49,470
obviously their software

1130
00:36:49,470 --> 00:36:53,470
authorization is important so obviously

1131
00:36:53,470 --> 00:36:54,580
once you've got your users you need to

1132
00:36:54,580 --> 00:36:55,540
make sure they can only do what they

1133
00:36:55,540 --> 00:36:57,790
need our back is a bit of a complicated

1134
00:36:57,790 --> 00:37:00,250
Beast it's quite easy to make mistakes a

1135
00:37:00,250 --> 00:37:01,839
good example of how you can make an easy

1136
00:37:01,839 --> 00:37:04,000
mistake is you might have an account

1137
00:37:04,000 --> 00:37:05,260
that will say you say I want to give

1138
00:37:05,260 --> 00:37:07,150
someone read-only access so you say ok a

1139
00:37:07,150 --> 00:37:07,990
cluster-level

1140
00:37:07,990 --> 00:37:09,400
let them read things now that sounds

1141
00:37:09,400 --> 00:37:11,170
quite safe right it's read-only access

1142
00:37:11,170 --> 00:37:13,780
but kubernetes is an object type called

1143
00:37:13,780 --> 00:37:15,339
secret so if you give some read-only

1144
00:37:15,339 --> 00:37:17,020
access they could dump all the secrets

1145
00:37:17,020 --> 00:37:18,400
out of the cluster and that's all the

1146
00:37:18,400 --> 00:37:19,510
passwords and all the corrections and

1147
00:37:19,510 --> 00:37:21,099
everything else so read-only access

1148
00:37:21,099 --> 00:37:22,119
isn't safe

1149
00:37:22,119 --> 00:37:24,609
as a curette ease option so you need to

1150
00:37:24,609 --> 00:37:26,080
really think about how you implement our

1151
00:37:26,080 --> 00:37:28,320
back because it can be quite tricky

1152
00:37:28,320 --> 00:37:30,130
other things to think about in

1153
00:37:30,130 --> 00:37:32,050
communities pod security policy I've

1154
00:37:32,050 --> 00:37:34,750
mentioned it's super important without

1155
00:37:34,750 --> 00:37:36,099
what security policy basically

1156
00:37:36,099 --> 00:37:37,810
everything goes horribly wrong if you've

1157
00:37:37,810 --> 00:37:39,250
got multiple users if you're doing

1158
00:37:39,250 --> 00:37:41,349
everything but like a CI CD pipeline so

1159
00:37:41,349 --> 00:37:43,089
like no ordinary users should be getting

1160
00:37:43,089 --> 00:37:44,680
there you can do the checks elsewhere so

1161
00:37:44,680 --> 00:37:45,520
you can do the checks in your CI

1162
00:37:45,520 --> 00:37:47,020
pipeline it's not too much of a problem

1163
00:37:47,020 --> 00:37:47,770
but if you've got

1164
00:37:47,770 --> 00:37:49,990
multiple users you need that and network

1165
00:37:49,990 --> 00:37:52,090
policy is a feature that lets you get

1166
00:37:52,090 --> 00:37:53,920
rid of that big flat network so you can

1167
00:37:53,920 --> 00:37:55,180
actually lock it down and say you know

1168
00:37:55,180 --> 00:37:56,740
hey every app doesn't need to talk to

1169
00:37:56,740 --> 00:37:58,870
every other app you can implement

1170
00:37:58,870 --> 00:38:01,030
network policy just to add a CL to your

1171
00:38:01,030 --> 00:38:05,530
cluster other related things cuz the

1172
00:38:05,530 --> 00:38:06,910
kubernetes has I cannot get an ecosystem

1173
00:38:06,910 --> 00:38:08,320
of products now the cloud native

1174
00:38:08,320 --> 00:38:09,670
computing foundation has tons of

1175
00:38:09,670 --> 00:38:11,560
products and some of them have some what

1176
00:38:11,560 --> 00:38:12,910
I can describe is slightly questionable

1177
00:38:12,910 --> 00:38:15,430
Security choices the first one to know

1178
00:38:15,430 --> 00:38:17,470
about cuz this is quite common is helm

1179
00:38:17,470 --> 00:38:19,660
and tiller helm is a package manager for

1180
00:38:19,660 --> 00:38:21,520
kubernetes it lets you deploy so they'll

1181
00:38:21,520 --> 00:38:23,710
have like charts that they say you can

1182
00:38:23,710 --> 00:38:25,120
install an entire system with this one

1183
00:38:25,120 --> 00:38:26,980
char and you run it and it and it works

1184
00:38:26,980 --> 00:38:28,930
and it deploys on your cluster by

1185
00:38:28,930 --> 00:38:31,150
default the happy path installer

1186
00:38:31,150 --> 00:38:33,460
says install this tiller component

1187
00:38:33,460 --> 00:38:35,350
inside your cluster with the traits of

1188
00:38:35,350 --> 00:38:36,820
cluster admin and then don't turn

1189
00:38:36,820 --> 00:38:39,280
authentication on so if you can reach

1190
00:38:39,280 --> 00:38:41,500
the port that tiller runs on inside the

1191
00:38:41,500 --> 00:38:43,960
cluster you get plus trapping by default

1192
00:38:43,960 --> 00:38:44,950
you can just say you can give it

1193
00:38:44,950 --> 00:38:46,750
anything you want to know just run it so

1194
00:38:46,750 --> 00:38:48,640
I have seen this in production clusters

1195
00:38:48,640 --> 00:38:51,490
recently as in two weeks ago most people

1196
00:38:51,490 --> 00:38:53,080
who deploy tiller don't do it securely

1197
00:38:53,080 --> 00:38:54,700
because it's kind of complicated to do

1198
00:38:54,700 --> 00:38:57,180
securely so they just do it that way

1199
00:38:57,180 --> 00:38:59,800
Jenkins other thing I see all the time

1200
00:38:59,800 --> 00:39:01,960
when I do cluster reviews I see Jenkins

1201
00:39:01,960 --> 00:39:03,670
because people use CI CD along with this

1202
00:39:03,670 --> 00:39:06,520
stuff Jenkins security has its own topic

1203
00:39:06,520 --> 00:39:07,930
I you know get someone to do the entire

1204
00:39:07,930 --> 00:39:09,940
topic just on Jenkins security well it's

1205
00:39:09,940 --> 00:39:11,530
just something where you'll see a lot of

1206
00:39:11,530 --> 00:39:12,970
Rights being given to Jenkins you then

1207
00:39:12,970 --> 00:39:14,800
have to be careful that developers can't

1208
00:39:14,800 --> 00:39:16,990
say my rights and Jenkins let me deploy

1209
00:39:16,990 --> 00:39:17,500
containers

1210
00:39:17,500 --> 00:39:19,030
I'll just deploy a privileged container

1211
00:39:19,030 --> 00:39:20,950
to every host and away you go

1212
00:39:20,950 --> 00:39:23,470
so that's can be come to think about the

1213
00:39:23,470 --> 00:39:24,730
last one is worth mentioning is

1214
00:39:24,730 --> 00:39:26,770
prometheus prometheus is a monitoring

1215
00:39:26,770 --> 00:39:28,180
tool that the cloud native computing

1216
00:39:28,180 --> 00:39:30,430
foundation support I see a lot in

1217
00:39:30,430 --> 00:39:32,500
clusters the reason I mention it here is

1218
00:39:32,500 --> 00:39:34,390
the Prometheus teams attitude to

1219
00:39:34,390 --> 00:39:35,880
authentication is that's not our problem

1220
00:39:35,880 --> 00:39:37,720
they actually had a security review

1221
00:39:37,720 --> 00:39:40,060
where the reviewer said the code quality

1222
00:39:40,060 --> 00:39:41,770
is good but we questioned the fact that

1223
00:39:41,770 --> 00:39:42,700
they've decided they'd have to worry

1224
00:39:42,700 --> 00:39:44,380
about the education so if you deploy

1225
00:39:44,380 --> 00:39:45,790
Prometheus or your developers wanted to

1226
00:39:45,790 --> 00:39:47,290
play Prometheus you have to come do your

1227
00:39:47,290 --> 00:39:48,910
own like reverse proxy or something and

1228
00:39:48,910 --> 00:39:50,350
set it in front of it to stop people

1229
00:39:50,350 --> 00:39:52,540
being able to basically get hold of it

1230
00:39:52,540 --> 00:39:54,040
gives you a very least a huge amount of

1231
00:39:54,040 --> 00:39:55,360
information disclosure because it's got

1232
00:39:55,360 --> 00:39:56,470
information all the clusters and their

1233
00:39:56,470 --> 00:39:58,210
applications running on it so you have

1234
00:39:58,210 --> 00:40:01,110
to quite careful with that as well

1235
00:40:01,560 --> 00:40:03,700
resources things you can use if you're

1236
00:40:03,700 --> 00:40:04,830
not involved in create security

1237
00:40:04,830 --> 00:40:07,150
someone's that much mentally the CIA's

1238
00:40:07,150 --> 00:40:09,000
benchmarks are not a bad place to start

1239
00:40:09,000 --> 00:40:11,560
they they're a bit worthy like I'll see

1240
00:40:11,560 --> 00:40:12,640
how severe it would you see I scratch

1241
00:40:12,640 --> 00:40:13,720
once they get a bit wordy but they do

1242
00:40:13,720 --> 00:40:15,460
have color of good information there's

1243
00:40:15,460 --> 00:40:18,520
also some tools from aqua security cube

1244
00:40:18,520 --> 00:40:20,890
bench and cube hunter cube and she's

1245
00:40:20,890 --> 00:40:22,840
like a lets you assess your cluster

1246
00:40:22,840 --> 00:40:24,250
again it's the sea-ice benchmark it

1247
00:40:24,250 --> 00:40:25,960
doesn't work on every cluster but it is

1248
00:40:25,960 --> 00:40:27,880
worth looking at and cube hunter is just

1249
00:40:27,880 --> 00:40:29,740
a little pen testing tool so if you want

1250
00:40:29,740 --> 00:40:30,880
like automate some of the things I've

1251
00:40:30,880 --> 00:40:32,530
been doing here like I want to try it'll

1252
00:40:32,530 --> 00:40:33,850
tell you whether your couplets available

1253
00:40:33,850 --> 00:40:35,260
on authenticated and it'll let you try

1254
00:40:35,260 --> 00:40:36,910
to attack that so you can do that as

1255
00:40:36,910 --> 00:40:41,350
well a conclusion so things to take away

1256
00:40:41,350 --> 00:40:43,900
from this talk is containers are just

1257
00:40:43,900 --> 00:40:45,340
little isolated olympics processes

1258
00:40:45,340 --> 00:40:46,810
they're not magic there's nothing funny

1259
00:40:46,810 --> 00:40:48,250
about them it's just a tarball

1260
00:40:48,250 --> 00:40:50,110
that's being run in linux with some

1261
00:40:50,110 --> 00:40:51,570
constraints literally that's it

1262
00:40:51,570 --> 00:40:53,530
most of the attack service for these

1263
00:40:53,530 --> 00:40:55,480
things is rest api s-- so if you think

1264
00:40:55,480 --> 00:40:56,950
about how you would if your hand gesture

1265
00:40:56,950 --> 00:40:59,200
basically you just need curl you can use

1266
00:40:59,200 --> 00:41:00,730
the tooling as well but curl will do for

1267
00:41:00,730 --> 00:41:02,590
most of this so you isn't you don't know

1268
00:41:02,590 --> 00:41:04,570
little fancy tooling and the other thing

1269
00:41:04,570 --> 00:41:06,100
I'd say is this is a really rapidly

1270
00:41:06,100 --> 00:41:08,980
developing area so kubernetes is on a

1271
00:41:08,980 --> 00:41:11,080
three-month release cadence so they do a

1272
00:41:11,080 --> 00:41:12,340
new version everything every three

1273
00:41:12,340 --> 00:41:14,410
months also if you're deploying this

1274
00:41:14,410 --> 00:41:16,180
worth noting they only support the

1275
00:41:16,180 --> 00:41:18,610
current release and the previous two so

1276
00:41:18,610 --> 00:41:19,870
you have to be ready to upgrade every

1277
00:41:19,870 --> 00:41:21,550
cluster every nine months if you want to

1278
00:41:21,550 --> 00:41:23,170
stay in support there is no long-term

1279
00:41:23,170 --> 00:41:25,360
support release available from any

1280
00:41:25,360 --> 00:41:27,610
vendor maybe Red Hat might do one by

1281
00:41:27,610 --> 00:41:29,260
don't think so right now there is no

1282
00:41:29,260 --> 00:41:30,610
long-term support so you have to be in a

1283
00:41:30,610 --> 00:41:31,950
position where you're happy to redeploy

1284
00:41:31,950 --> 00:41:34,510
docker is slightly better and I think

1285
00:41:34,510 --> 00:41:36,370
you if you get like a six months

1286
00:41:36,370 --> 00:41:37,630
actually that's what it's six nine

1287
00:41:37,630 --> 00:41:39,670
months as well as a year for their

1288
00:41:39,670 --> 00:41:42,160
enterprise version so basically for all

1289
00:41:42,160 --> 00:41:44,200
this software if you are deploying it

1290
00:41:44,200 --> 00:41:45,280
you have to be super assured that you

1291
00:41:45,280 --> 00:41:47,260
can reroll stuff with the every you know

1292
00:41:47,260 --> 00:41:48,370
it's not something where you put it in

1293
00:41:48,370 --> 00:41:49,570
leave in five years that won't work

1294
00:41:49,570 --> 00:41:51,670
because we are it will be vulnerable and

1295
00:41:51,670 --> 00:41:53,200
they won't do security patches beyond a

1296
00:41:53,200 --> 00:41:54,580
month so the next time the security

1297
00:41:54,580 --> 00:41:55,720
buddy building comes out if your

1298
00:41:55,720 --> 00:41:57,460
clusters over nine months old its rushed

1299
00:41:57,460 --> 00:42:01,110
upgrade rather than planned upgrade

1300
00:42:02,040 --> 00:42:04,660
question time now or if not I got my

1301
00:42:04,660 --> 00:42:06,280
Twitter handle their email they're

1302
00:42:06,280 --> 00:42:07,780
always happy to take any questions on

1303
00:42:07,780 --> 00:42:09,790
container security there any now also I

1304
00:42:09,790 --> 00:42:11,740
think we've got come on it's here yeah

1305
00:42:11,740 --> 00:42:14,189
come on us

1306
00:42:15,500 --> 00:42:17,880
you measure a little bit janky inspire

1307
00:42:17,880 --> 00:42:19,680
commands in terms of the answer ball or

1308
00:42:19,680 --> 00:42:21,840
popular chef in this or admissions the

1309
00:42:21,840 --> 00:42:24,830
ICD internal security perspective so

1310
00:42:24,830 --> 00:42:27,780
yeah there's a lot of installers that

1311
00:42:27,780 --> 00:42:29,940
use ads will have a you know this is you

1312
00:42:29,940 --> 00:42:31,200
can find a way of deploying kubernetes

1313
00:42:31,200 --> 00:42:34,040
under any of those it probably isn't

1314
00:42:34,040 --> 00:42:35,910
those installers poor you'll have too

1315
00:42:35,910 --> 00:42:37,290
much effect on the cost of security

1316
00:42:37,290 --> 00:42:39,720
itself so any of those are probably it

1317
00:42:39,720 --> 00:42:41,040
but you really have to look at each

1318
00:42:41,040 --> 00:42:42,870
individual installer and find out you

1319
00:42:42,870 --> 00:42:44,400
know what it does there's no you can't

1320
00:42:44,400 --> 00:42:45,690
see across it all Jesus like there so

1321
00:42:45,690 --> 00:42:47,760
that it will depend I think is the

1322
00:42:47,760 --> 00:42:49,140
answer not great answer about

1323
00:42:49,140 --> 00:42:51,890
unfortunately that's it

