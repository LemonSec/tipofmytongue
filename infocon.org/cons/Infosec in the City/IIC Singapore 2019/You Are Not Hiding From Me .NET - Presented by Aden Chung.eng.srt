1
00:00:00,060 --> 00:00:02,629
so good morning everyone I made it and

2
00:00:02,629 --> 00:00:05,190
thank you for coming to my talk this so

3
00:00:05,190 --> 00:00:07,919
these are in the morning so today we are

4
00:00:07,919 --> 00:00:09,469
gonna talk about defense and security

5
00:00:09,469 --> 00:00:12,030
today we're gonna talk about donate or

6
00:00:12,030 --> 00:00:14,340
more specifically how Donna attacks are

7
00:00:14,340 --> 00:00:17,580
not so hidden from us so before I begin

8
00:00:17,580 --> 00:00:20,369
just a quick introduction for myself

9
00:00:20,369 --> 00:00:23,160
so just four things achaya hunter

10
00:00:23,160 --> 00:00:25,590
account set and from em deriving for

11
00:00:25,590 --> 00:00:28,050
security so we are a consultancy firm

12
00:00:28,050 --> 00:00:29,789
and I belong to the detection and

13
00:00:29,789 --> 00:00:31,859
response team and my job is literally

14
00:00:31,859 --> 00:00:34,469
detection and response for the detection

15
00:00:34,469 --> 00:00:36,719
part I do something known as an

16
00:00:36,719 --> 00:00:38,879
hypothesis driven hunting where I see

17
00:00:38,879 --> 00:00:40,950
shoe on my client data I hunt for

18
00:00:40,950 --> 00:00:43,200
enormous events an event where I fight

19
00:00:43,200 --> 00:00:45,480
something suspicious I investigated so

20
00:00:45,480 --> 00:00:47,760
hence the response part where I do where

21
00:00:47,760 --> 00:00:49,680
I use various symmetries like process

22
00:00:49,680 --> 00:00:51,420
logins event logs

23
00:00:51,420 --> 00:00:55,289
MFT to aid me in my investigation so I'm

24
00:00:55,289 --> 00:00:57,360
also somewhat of an attack detection

25
00:00:57,360 --> 00:00:59,940
blogger so as for my job being a hunter

26
00:00:59,940 --> 00:01:01,890
I need to do quite a bit of a techie

27
00:01:01,890 --> 00:01:03,480
action research because as we all know

28
00:01:03,480 --> 00:01:05,640
the bad guys are always constantly

29
00:01:05,640 --> 00:01:08,010
absolutely themselves so we as defenders

30
00:01:08,010 --> 00:01:10,020
we has a good guys with obscure service

31
00:01:10,020 --> 00:01:12,930
well so I in events where I find

32
00:01:12,930 --> 00:01:15,900
something interesting or um picking up a

33
00:01:15,900 --> 00:01:17,250
blog about them and put it on the

34
00:01:17,250 --> 00:01:19,140
comment step by Potter so we officially

35
00:01:19,140 --> 00:01:20,820
krabi aku research going on on the

36
00:01:20,820 --> 00:01:22,380
Kansai web product so feel free to just

37
00:01:22,380 --> 00:01:25,560
jump in and I'm also a bit of a co

38
00:01:25,560 --> 00:01:27,509
junkie I like to write scripts write

39
00:01:27,509 --> 00:01:29,850
code to automate activities and I

40
00:01:29,850 --> 00:01:32,400
literally wrote a script once to decide

41
00:01:32,400 --> 00:01:34,200
what to eat for lunch on the current day

42
00:01:34,200 --> 00:01:35,610
because I have no idea what to eat for

43
00:01:35,610 --> 00:01:37,829
lunch so yeah so my first of all

44
00:01:37,829 --> 00:01:40,740
problems and lastly I'm a Netflix ad

45
00:01:40,740 --> 00:01:43,979
when I'm just like I have nothing to do

46
00:01:43,979 --> 00:01:46,049
literally just borrow my I'll just

47
00:01:46,049 --> 00:01:48,149
literally literally chew and just watch

48
00:01:48,149 --> 00:01:51,479
Netflix so anyway let's move back to the

49
00:01:51,479 --> 00:01:53,430
agenda which is why we are here today

50
00:01:53,430 --> 00:01:55,770
other than the free beer that's going on

51
00:01:55,770 --> 00:01:58,229
at the after party so we only have two

52
00:01:58,229 --> 00:02:00,899
agendas today what firstly the

53
00:02:00,899 --> 00:02:02,939
importance of donut detection why do we

54
00:02:02,939 --> 00:02:05,130
need to do it and what you're basically

55
00:02:05,130 --> 00:02:06,590
why do we do it on a detection

56
00:02:06,590 --> 00:02:09,030
also I'm going to talk about how we

57
00:02:09,030 --> 00:02:11,190
actually do the detection person portion

58
00:02:11,190 --> 00:02:13,740
itself so I'm gonna first

59
00:02:13,740 --> 00:02:16,230
turn on why the need to do Donna

60
00:02:16,230 --> 00:02:19,920
detection so a little bit of history as

61
00:02:19,920 --> 00:02:22,530
a chanting concept I have seen my fair

62
00:02:22,530 --> 00:02:24,240
share of adversary and I was faced my

63
00:02:24,240 --> 00:02:26,880
fair share of Investigation and among

64
00:02:26,880 --> 00:02:29,250
the tractors I faced typically most of

65
00:02:29,250 --> 00:02:31,530
them typically use script based attacks

66
00:02:31,530 --> 00:02:34,290
and probably because these cubist

67
00:02:34,290 --> 00:02:35,790
attacks are linked to binaries or

68
00:02:35,790 --> 00:02:37,500
processes they are in stop by default on

69
00:02:37,500 --> 00:02:38,670
a Windows machine

70
00:02:38,670 --> 00:02:41,310
so I've seen PowerShell invoking down

71
00:02:41,310 --> 00:02:43,200
low string trying to run a memory cache

72
00:02:43,200 --> 00:02:45,600
program I've seen VB script trying to

73
00:02:45,600 --> 00:02:47,760
enumerate user drives I will see those

74
00:02:47,760 --> 00:02:49,650
pesky the macros they try to trick users

75
00:02:49,650 --> 00:02:52,580
into clicking them to get a free iPhone

76
00:02:52,580 --> 00:02:56,450
so about our bodies Scribus attacks

77
00:02:56,450 --> 00:02:59,940
PowerShell is a hot favorite probably

78
00:02:59,940 --> 00:03:02,190
because I mean it's a really really

79
00:03:02,190 --> 00:03:04,020
powerful tool it's a really powerful

80
00:03:04,020 --> 00:03:07,050
initiative - we did a tractor can should

81
00:03:07,050 --> 00:03:09,210
abuse it to load chakra in the memory

82
00:03:09,210 --> 00:03:11,430
call upon the donate API which

83
00:03:11,430 --> 00:03:13,320
essentially what culture is based on and

84
00:03:13,320 --> 00:03:15,660
going as far as calling upon the native

85
00:03:15,660 --> 00:03:18,180
API as well and if you tell about

86
00:03:18,180 --> 00:03:20,640
PowerShell in general it's quite easy to

87
00:03:20,640 --> 00:03:23,190
POC it like all you need to do is to

88
00:03:23,190 --> 00:03:26,100
fire up a console test our code and I'm

89
00:03:26,100 --> 00:03:27,360
pretty sure you just do a quick Google

90
00:03:27,360 --> 00:03:29,550
search on PowerShell framework you can

91
00:03:29,550 --> 00:03:32,840
easily get like 20 hits easily but as

92
00:03:32,840 --> 00:03:35,750
defenders we are also getting better as

93
00:03:35,750 --> 00:03:38,460
compared to in the past partial text are

94
00:03:38,460 --> 00:03:40,830
not so annoys hard to detect as he was

95
00:03:40,830 --> 00:03:43,770
before with the rights of EDR agents it

96
00:03:43,770 --> 00:03:46,290
means about a difference of telemetry in

97
00:03:46,290 --> 00:03:48,600
which defenders can see levitron such as

98
00:03:48,600 --> 00:03:50,610
analyzing parent-child process

99
00:03:50,610 --> 00:03:53,100
relationship like my example here from

100
00:03:53,100 --> 00:03:55,020
here we see what document or Excel

101
00:03:55,020 --> 00:03:57,300
spreadsheets spawning PowerShell which

102
00:03:57,300 --> 00:03:59,490
is very anomalous you know expect like a

103
00:03:59,490 --> 00:04:01,620
word document to actually need to spawn

104
00:04:01,620 --> 00:04:04,140
PowerShell and to be honest I've

105
00:04:04,140 --> 00:04:06,330
actually seen legitimate usage of this

106
00:04:06,330 --> 00:04:08,430
throughout my client data there actually

107
00:04:08,430 --> 00:04:11,010
is some legitimate usage but it's very

108
00:04:11,010 --> 00:04:12,990
rare and probably when you see such a

109
00:04:12,990 --> 00:04:15,630
behavior most of the time is probably

110
00:04:15,630 --> 00:04:19,738
enormous and perhaps malicious we can

111
00:04:19,738 --> 00:04:21,839
also look at the common arguments that

112
00:04:21,839 --> 00:04:23,580
comes with a newly spawned powershell

113
00:04:23,580 --> 00:04:25,530
process like in this case we see that

114
00:04:25,530 --> 00:04:27,450
the powder is simply just outputting a

115
00:04:27,450 --> 00:04:28,950
come on deceive a comment so we know

116
00:04:28,950 --> 00:04:31,200
nothing nothing bad but what if the part

117
00:04:31,200 --> 00:04:32,820
I was actually running maquettes or

118
00:04:32,820 --> 00:04:34,110
something else

119
00:04:34,110 --> 00:04:36,480
so with this level visibility defenders

120
00:04:36,480 --> 00:04:38,910
can actually better see what is actually

121
00:04:38,910 --> 00:04:40,950
happening right what a partial process

122
00:04:40,950 --> 00:04:43,740
is attempting to do there are so other

123
00:04:43,740 --> 00:04:46,020
defenses such as mg that can assist

124
00:04:46,020 --> 00:04:48,000
antivirus which we base a tank detection

125
00:04:48,000 --> 00:04:51,180
so MZ is decision tree is essentially an

126
00:04:51,180 --> 00:04:53,400
interface that sits between a partial

127
00:04:53,400 --> 00:04:56,070
process and the antivirus when the

128
00:04:56,070 --> 00:04:57,570
command is entered to the PowerShell

129
00:04:57,570 --> 00:05:00,150
console you'll be sent to the engineer

130
00:05:00,150 --> 00:05:01,890
page which will in turn send to the

131
00:05:01,890 --> 00:05:04,050
antivirus and if a signature is created

132
00:05:04,050 --> 00:05:07,050
the comma will be blocked so like my

133
00:05:07,050 --> 00:05:09,450
example right here I actually enter mgu

134
00:05:09,450 --> 00:05:11,370
tools in the command prompt but before

135
00:05:11,370 --> 00:05:13,410
he was executed it was sent to the

136
00:05:13,410 --> 00:05:16,050
antivirus BR MZ and because the

137
00:05:16,050 --> 00:05:17,820
signature has been created the S

138
00:05:17,820 --> 00:05:20,640
creature actually stopped so another de

139
00:05:20,640 --> 00:05:22,500
penser we have is power JavaScript

140
00:05:22,500 --> 00:05:24,960
logging which actually can eat with

141
00:05:24,960 --> 00:05:27,300
defenders as well so any commands enter

142
00:05:27,300 --> 00:05:28,800
within a partial console us should be

143
00:05:28,800 --> 00:05:30,990
not within the event idea of for 1:04

144
00:05:30,990 --> 00:05:34,380
for later versions of PowerShell so to

145
00:05:34,380 --> 00:05:35,910
just give a summary of what we have

146
00:05:35,910 --> 00:05:38,310
actually discussed as a industry as a

147
00:05:38,310 --> 00:05:41,820
whole we have gotten better we are given

148
00:05:41,820 --> 00:05:43,740
we are given more opportunities to

149
00:05:43,740 --> 00:05:45,990
detect malicious PowerShell and I think

150
00:05:45,990 --> 00:05:49,080
we deserve a panel back but as always

151
00:05:49,080 --> 00:05:53,310
there's a bad bad guys they just don't

152
00:05:53,310 --> 00:05:56,700
give up the being bad guys are aware of

153
00:05:56,700 --> 00:05:58,800
the challenges that PowerShell face so

154
00:05:58,800 --> 00:06:00,330
they are moving on to different

155
00:06:00,330 --> 00:06:02,340
techniques and attack to invade current

156
00:06:02,340 --> 00:06:05,250
defenses and one of the attack they're

157
00:06:05,250 --> 00:06:07,320
chosen is actually donate attacks

158
00:06:07,320 --> 00:06:10,320
whereby you invoke the donate college I

159
00:06:10,320 --> 00:06:12,060
really don't even dirty instead of true

160
00:06:12,060 --> 00:06:14,820
for some impartial so our touched on to

161
00:06:14,820 --> 00:06:16,380
what I mean by this statement in a

162
00:06:16,380 --> 00:06:18,420
couple of sites later but first let's

163
00:06:18,420 --> 00:06:21,180
ask ourselves a question why don't it

164
00:06:21,180 --> 00:06:23,310
well if dick about it

165
00:06:23,310 --> 00:06:25,530
don't let is rather similar to power

166
00:06:25,530 --> 00:06:29,100
right it's powerful it's stop by default

167
00:06:29,100 --> 00:06:31,530
on most Windows machine by you one key

168
00:06:31,530 --> 00:06:33,330
difference there's currently a lack of

169
00:06:33,330 --> 00:06:36,380
telemetry towards don't at attacks and

170
00:06:36,380 --> 00:06:39,630
I'll show it with an example here so I'm

171
00:06:39,630 --> 00:06:41,510
going to do a demonstration a video demo

172
00:06:41,510 --> 00:06:45,300
with comparing powershell and dotnet so

173
00:06:45,300 --> 00:06:46,919
both of them are gonna do exactly the

174
00:06:46,919 --> 00:06:47,460
same thing

175
00:06:47,460 --> 00:06:49,800
firstly they're gonna write a registry

176
00:06:49,800 --> 00:06:53,070
key to the use of the donut api secondly

177
00:06:53,070 --> 00:06:55,080
they're gonna pop a message box through

178
00:06:55,080 --> 00:06:57,240
the use of a Windows native API so

179
00:06:57,240 --> 00:06:59,729
native API is essentially how the

180
00:06:59,729 --> 00:07:02,669
Windows OS communicates basically the

181
00:07:02,669 --> 00:07:06,000
windows native API so I have a demo here

182
00:07:06,000 --> 00:07:08,430
so right here as you can see I have a

183
00:07:08,430 --> 00:07:12,120
partially Shiva and a ternary shaper so

184
00:07:12,120 --> 00:07:13,770
I'm going to click on my posture here

185
00:07:13,770 --> 00:07:17,430
shape alphas so just just before the

186
00:07:17,430 --> 00:07:22,169
video a lot so I'm gonna clear my

187
00:07:22,169 --> 00:07:24,449
posture in shaper and I'm gonna execute

188
00:07:24,449 --> 00:07:27,449
power shell code so as you see I put

189
00:07:27,449 --> 00:07:28,169
message box

190
00:07:28,169 --> 00:07:34,620
I wrote a registry key and now we're

191
00:07:34,620 --> 00:07:36,600
gonna see what indicators left by this

192
00:07:36,600 --> 00:07:40,139
particular example so I'm gonna use

193
00:07:40,139 --> 00:07:41,820
event locks this one to look at the

194
00:07:41,820 --> 00:07:45,050
process logging and as you can see here

195
00:07:45,050 --> 00:07:48,830
we see a partial process being spawn and

196
00:07:48,830 --> 00:07:53,010
it was spawned by an MSHA process which

197
00:07:53,010 --> 00:07:55,440
is rather enormous you wanna expand MSHA

198
00:07:55,440 --> 00:07:58,650
to spawn typically and if you look at

199
00:07:58,650 --> 00:08:01,080
the command line arguments we actually

200
00:08:01,080 --> 00:08:03,210
see a partial basic support encoded

201
00:08:03,210 --> 00:08:06,539
command so with this visibility as a

202
00:08:06,539 --> 00:08:09,470
defender I can attempt to decode this

203
00:08:09,470 --> 00:08:12,240
command so I can use a tool like cyber

204
00:08:12,240 --> 00:08:17,370
chef facing my encoder commands basic

205
00:08:17,370 --> 00:08:20,340
support decode it and once I decoded I

206
00:08:20,340 --> 00:08:22,349
can just see what the particle was being

207
00:08:22,349 --> 00:08:24,419
run giving me visibility on on how to

208
00:08:24,419 --> 00:08:26,699
react and as a defender this visibly I

209
00:08:26,699 --> 00:08:28,770
can know how to react and how to advise

210
00:08:28,770 --> 00:08:31,560
my friends on what to do so I'm just

211
00:08:31,560 --> 00:08:33,870
going to clear out all my artifacts now

212
00:08:33,870 --> 00:08:35,610
and I'm gonna run the door Mahesh donut

213
00:08:35,610 --> 00:08:37,320
payload now and I'll show you the

214
00:08:37,320 --> 00:08:39,059
visibility the visibility that we can

215
00:08:39,059 --> 00:08:47,160
see for me so I'm just gonna close the

216
00:08:47,160 --> 00:08:50,190
partial HIPAA and open the donut head

217
00:08:50,190 --> 00:08:54,240
shape up and now I'm gonna execute it

218
00:08:54,240 --> 00:08:54,660
same thing

219
00:08:54,660 --> 00:08:56,040
I pull a message box

220
00:08:56,040 --> 00:08:58,720
same thing I created I read read Ricky

221
00:08:58,720 --> 00:09:02,950
and now let's look at the event locks

222
00:09:02,950 --> 00:09:04,330
again let's look at the process locks

223
00:09:04,330 --> 00:09:07,410
choose this one and as you can see

224
00:09:07,410 --> 00:09:10,390
that's all we have we see a message a

225
00:09:10,390 --> 00:09:14,350
process running a hasty FM and with this

226
00:09:14,350 --> 00:09:17,620
level of visibility as a defender or I

227
00:09:17,620 --> 00:09:19,930
can actually let me tell you what I can

228
00:09:19,930 --> 00:09:21,940
do all I can see is just a history of

229
00:09:21,940 --> 00:09:24,460
our being executed and to father please

230
00:09:24,460 --> 00:09:26,410
investigate our actually need a he she

231
00:09:26,410 --> 00:09:28,180
about to how do you need a quite history

232
00:09:28,180 --> 00:09:32,230
about to look at it so to just give a

233
00:09:32,230 --> 00:09:34,360
summary of what I should demonstrated in

234
00:09:34,360 --> 00:09:37,630
this video form for the partial payload

235
00:09:37,630 --> 00:09:40,720
with a messy process I spawn a partial

236
00:09:40,720 --> 00:09:43,540
process which was used to write a

237
00:09:43,540 --> 00:09:47,320
registry key and power message box with

238
00:09:47,320 --> 00:09:50,200
the donor history however I use a

239
00:09:50,200 --> 00:09:52,510
message a process to call the donate

240
00:09:52,510 --> 00:09:54,490
framework directly so that's the

241
00:09:54,490 --> 00:09:56,890
question here how did I actually achieve

242
00:09:56,890 --> 00:10:00,040
this and this is something known as an

243
00:10:00,040 --> 00:10:03,640
in-memory assembly loading technique so

244
00:10:03,640 --> 00:10:05,350
I actually have a flow chart which I

245
00:10:05,350 --> 00:10:06,880
will show you now how this was actually

246
00:10:06,880 --> 00:10:11,140
perform so first on my attackers machine

247
00:10:11,140 --> 00:10:13,960
I have a see shop code I will compile

248
00:10:13,960 --> 00:10:16,380
the seizure code into a donut assembly

249
00:10:16,380 --> 00:10:19,810
next I was realize it so it can actually

250
00:10:19,810 --> 00:10:22,270
do it with Jim's washer on a Jewish J

251
00:10:22,270 --> 00:10:24,730
Street panic or other particular tools

252
00:10:24,730 --> 00:10:27,310
that you want after realizing it our

253
00:10:27,310 --> 00:10:30,130
embedded into a delivery mechanism so in

254
00:10:30,130 --> 00:10:32,230
my case I use a hash a power as my

255
00:10:32,230 --> 00:10:34,060
delivery mechanism but typically you can

256
00:10:34,060 --> 00:10:35,920
use any other Democrats um after

257
00:10:35,920 --> 00:10:39,220
choosing one-sided debate to my victims

258
00:10:39,220 --> 00:10:42,340
payload our load into memory and when

259
00:10:42,340 --> 00:10:45,130
it's launched memory visualizes back to

260
00:10:45,130 --> 00:10:47,290
the donor assembly and once it's this

261
00:10:47,290 --> 00:10:49,330
your lives I will instantiate an object

262
00:10:49,330 --> 00:10:52,630
out of it so basically this entire flow

263
00:10:52,630 --> 00:10:54,940
chart if you are aware of

264
00:10:54,940 --> 00:10:57,040
object-oriented programming you realize

265
00:10:57,040 --> 00:10:58,930
that this entire flow chart is very

266
00:10:58,930 --> 00:11:00,780
similar to this three lines of code

267
00:11:00,780 --> 00:11:04,240
whereby this is final support whereby I

268
00:11:04,240 --> 00:11:07,660
attempt to reference an assembly with

269
00:11:07,660 --> 00:11:09,850
their assembly I'm able to call

270
00:11:09,850 --> 00:11:12,850
one class contractor and once I call

271
00:11:12,850 --> 00:11:15,430
points constructor I can invoke his

272
00:11:15,430 --> 00:11:17,470
methods so essentially these three

273
00:11:17,470 --> 00:11:19,329
symbols are cooked which are trying to

274
00:11:19,329 --> 00:11:21,220
enjoy did the entire flow tried I was

275
00:11:21,220 --> 00:11:23,019
trying to do was actually attempting to

276
00:11:23,019 --> 00:11:26,800
replicate these shriveled codes and not

277
00:11:26,800 --> 00:11:28,569
have this blow the object what can you

278
00:11:28,569 --> 00:11:31,690
do basically anything polisher can do it

279
00:11:31,690 --> 00:11:33,639
can do since there are base they are

280
00:11:33,639 --> 00:11:36,300
basically backed by the down a framework

281
00:11:36,300 --> 00:11:39,490
so to just give a midpoint check on what

282
00:11:39,490 --> 00:11:42,160
we have discussed so far we have a load

283
00:11:42,160 --> 00:11:45,550
object right now which we created

284
00:11:45,550 --> 00:11:47,459
through the use of a in memory assembly

285
00:11:47,459 --> 00:11:52,720
this loaded object can is you can do

286
00:11:52,720 --> 00:11:55,269
whatever powers I can do by with one key

287
00:11:55,269 --> 00:11:57,040
difference there is a current leg of

288
00:11:57,040 --> 00:11:59,620
telemetry to watch it so this is what

289
00:11:59,620 --> 00:12:00,819
we're going to discuss and these are

290
00:12:00,819 --> 00:12:03,990
challenged today can we detect this and

291
00:12:03,990 --> 00:12:07,180
now I'm gonna move on to the second

292
00:12:07,180 --> 00:12:09,790
agenda of my topic how do we actually do

293
00:12:09,790 --> 00:12:13,930
the detection portion itself so I'm

294
00:12:13,930 --> 00:12:16,660
going to do some informal initial triage

295
00:12:16,660 --> 00:12:19,449
first with process occur so for those of

296
00:12:19,449 --> 00:12:21,399
you who are unaware what process hacker

297
00:12:21,399 --> 00:12:24,130
is is essentially a tool that allows you

298
00:12:24,130 --> 00:12:26,290
to analyze a process properties such as

299
00:12:26,290 --> 00:12:29,199
its tracks performance the module loads

300
00:12:29,199 --> 00:12:32,740
and I'm going to use it to analyze the

301
00:12:32,740 --> 00:12:35,290
MSHA process that was used to run the

302
00:12:35,290 --> 00:12:41,350
donor HTML and with it firstly we look

303
00:12:41,350 --> 00:12:43,120
at the module looks within the MSHA

304
00:12:43,120 --> 00:12:44,829
process and we can see something

305
00:12:44,829 --> 00:12:47,199
interesting we can she see that within

306
00:12:47,199 --> 00:12:48,880
the module loads there are a couple of

307
00:12:48,880 --> 00:12:50,470
don't let one tiny out they were being

308
00:12:50,470 --> 00:12:53,009
loaded and this makes sense because

309
00:12:53,009 --> 00:12:55,149
initially their message process was

310
00:12:55,149 --> 00:12:57,009
running a donut assembly hence he

311
00:12:57,009 --> 00:13:00,790
requires this runtime engine so this is

312
00:13:00,790 --> 00:13:03,009
a very suspicious right if it's in

313
00:13:03,009 --> 00:13:05,470
bentonville on the behavior MSHA what

314
00:13:05,470 --> 00:13:06,100
does it do

315
00:13:06,100 --> 00:13:08,860
it typically only runs HTML or

316
00:13:08,860 --> 00:13:11,920
JavaScript code so it's pretty dodgy and

317
00:13:11,920 --> 00:13:15,130
this logic doesn't only apply to MSHA

318
00:13:15,130 --> 00:13:17,230
process you can say apply it to other

319
00:13:17,230 --> 00:13:19,329
binaries that typically do not execute

320
00:13:19,329 --> 00:13:22,300
done I could and with this we can think

321
00:13:22,300 --> 00:13:24,180
of a hangar bodices

322
00:13:24,180 --> 00:13:27,790
whereby we can she have a hypothesis to

323
00:13:27,790 --> 00:13:29,650
hunt for the presence of Donna runtime

324
00:13:29,650 --> 00:13:34,300
jl in these binaries so this can

325
00:13:34,300 --> 00:13:35,740
actually help us with like a certain

326
00:13:35,740 --> 00:13:38,860
anonymous activity but as usual that's

327
00:13:38,860 --> 00:13:41,710
always a bad what if the tractor were to

328
00:13:41,710 --> 00:13:44,160
use a binary rate has done it such as

329
00:13:44,160 --> 00:13:48,460
MSP dot exe whereby MSV dot exe is a

330
00:13:48,460 --> 00:13:51,010
donor application that allows you to

331
00:13:51,010 --> 00:13:54,450
build on an application or rather a

332
00:13:54,450 --> 00:13:56,950
third party software like SQL server

333
00:13:56,950 --> 00:13:59,320
whereby you can't reuse SQL Server to

334
00:13:59,320 --> 00:14:02,640
execute C char code so with this

335
00:14:02,640 --> 00:14:05,170
processes it's not uncommon for them to

336
00:14:05,170 --> 00:14:08,310
actually have a turnaround time the area

337
00:14:08,310 --> 00:14:11,610
so we need something better

338
00:14:11,610 --> 00:14:14,110
unfortunately for us the answer to this

339
00:14:14,110 --> 00:14:16,710
actually lies deep within process occur

340
00:14:16,710 --> 00:14:20,590
so in process occur there's a column

341
00:14:20,590 --> 00:14:22,650
that typically don't appear by default

342
00:14:22,650 --> 00:14:25,870
it only appears when you detect events

343
00:14:25,870 --> 00:14:27,910
related to the loading of tonette

344
00:14:27,910 --> 00:14:31,060
assemblies and allow you to focus on one

345
00:14:31,060 --> 00:14:33,370
of the assembly in particular basically

346
00:14:33,370 --> 00:14:36,670
a my assembly so if you look at it you

347
00:14:36,670 --> 00:14:37,960
realize and you compare to the other

348
00:14:37,960 --> 00:14:40,210
assembly load united states the lack of

349
00:14:40,210 --> 00:14:42,520
paths which is a very strong indicator

350
00:14:42,520 --> 00:14:45,550
of a potential in memory a semi load the

351
00:14:45,550 --> 00:14:47,050
other assembly has a path because

352
00:14:47,050 --> 00:14:49,210
they'll locate on a dis hence the path

353
00:14:49,210 --> 00:14:51,610
by in this case because there was any

354
00:14:51,610 --> 00:14:55,480
phone on this there's no path so I'm

355
00:14:55,480 --> 00:14:58,150
gonna will touch more to in memory us

356
00:14:58,150 --> 00:15:00,730
and we lose in later slides but let's

357
00:15:00,730 --> 00:15:03,640
assess are another question here how the

358
00:15:03,640 --> 00:15:07,690
process hacker achieved this so it turns

359
00:15:07,690 --> 00:15:10,120
out that in process cycle they within it

360
00:15:10,120 --> 00:15:14,290
he actually utilize a set of donut if W

361
00:15:14,290 --> 00:15:16,570
provide us so it abused are basically

362
00:15:16,570 --> 00:15:19,270
event tracing for Windows essentially

363
00:15:19,270 --> 00:15:21,970
whether something happens in Windows

364
00:15:21,970 --> 00:15:24,250
whether and it would be long so

365
00:15:24,250 --> 00:15:26,020
essentially any donor events will be lot

366
00:15:26,020 --> 00:15:29,440
with within Windows so with this year is

367
00:15:29,440 --> 00:15:31,360
essentially a wealth of information that

368
00:15:31,360 --> 00:15:35,920
we can see leverage on and we a concept

369
00:15:35,920 --> 00:15:38,410
we create a item po6 trip by leveraging

370
00:15:38,410 --> 00:15:40,899
on pi eyes if you double tracing library

371
00:15:40,899 --> 00:15:43,660
to consume this donor is w events and

372
00:15:43,660 --> 00:15:46,060
now with this new level

373
00:15:46,060 --> 00:15:49,540
visibility let's try to detect the

374
00:15:49,540 --> 00:15:52,630
payload that I run on in the paradigm

375
00:15:52,630 --> 00:15:54,850
initiation let's try to find indicators

376
00:15:54,850 --> 00:15:57,490
related to in memory as amyloid let's

377
00:15:57,490 --> 00:15:59,350
try to find indicators related to the

378
00:15:59,350 --> 00:16:00,790
register equation through the use of

379
00:16:00,790 --> 00:16:03,940
donna api and finally let's try to find

380
00:16:03,940 --> 00:16:06,130
indicators related to invoking of native

381
00:16:06,130 --> 00:16:09,519
API so let's move let's go back to our

382
00:16:09,519 --> 00:16:11,199
discussion on in memory lot

383
00:16:11,199 --> 00:16:14,260
let's let's look again on eventually to

384
00:16:14,260 --> 00:16:16,680
in memory as I mean loading indicators

385
00:16:16,680 --> 00:16:19,510
so as I mentioned earlier with the user

386
00:16:19,510 --> 00:16:21,220
process occur we actually are able to

387
00:16:21,220 --> 00:16:23,350
find out eventually to the loading of

388
00:16:23,350 --> 00:16:25,870
donna assembly and weave it we can we

389
00:16:25,870 --> 00:16:27,820
have strong indicators related to in

390
00:16:27,820 --> 00:16:30,399
memory a semi loading this another event

391
00:16:30,399 --> 00:16:31,930
that we can use though and is something

392
00:16:31,930 --> 00:16:35,050
known as just-in-time compilation so

393
00:16:35,050 --> 00:16:36,880
before I dive deep into what

394
00:16:36,880 --> 00:16:39,880
just-in-time compilation events are we

395
00:16:39,880 --> 00:16:42,250
need to understand how the donate

396
00:16:42,250 --> 00:16:44,890
compilation architecture look like so

397
00:16:44,890 --> 00:16:48,160
don't net is a managed code essentially

398
00:16:48,160 --> 00:16:50,529
it runs within a managed environment it

399
00:16:50,529 --> 00:16:52,000
compound it don't compiled to native

400
00:16:52,000 --> 00:16:56,680
code directly so when a donor code

401
00:16:56,680 --> 00:16:59,560
compiles it composes something known as

402
00:16:59,560 --> 00:17:02,760
the CIL the common intermediate language

403
00:17:02,760 --> 00:17:06,939
this CIL before execution upon execution

404
00:17:06,939 --> 00:17:09,609
I mean it will be run through something

405
00:17:09,609 --> 00:17:11,530
known as the JIT compiler the

406
00:17:11,530 --> 00:17:14,439
just-in-time compiler and with it you'll

407
00:17:14,439 --> 00:17:17,199
be compelled to a native code once even

408
00:17:17,199 --> 00:17:19,569
compared to a native code he will be

409
00:17:19,569 --> 00:17:22,030
cash and the JIT compiler will not be

410
00:17:22,030 --> 00:17:24,069
used again all right I mean for this

411
00:17:24,069 --> 00:17:26,770
particular process so this is

412
00:17:26,770 --> 00:17:29,620
interesting because wherever the JIT

413
00:17:29,620 --> 00:17:31,960
compiler is used an event will be

414
00:17:31,960 --> 00:17:35,020
generated so essentially an event will

415
00:17:35,020 --> 00:17:37,360
be gentle whenever a doughnut matter is

416
00:17:37,360 --> 00:17:39,640
first utilized because you'll be put

417
00:17:39,640 --> 00:17:41,919
through the JIT compiler after you've

418
00:17:41,919 --> 00:17:44,500
been put through the JIT compiler you'll

419
00:17:44,500 --> 00:17:47,350
be cash so no instances of the event

420
00:17:47,350 --> 00:17:49,690
will appear

421
00:17:49,690 --> 00:17:51,159
so to guess give a summary of what we

422
00:17:51,159 --> 00:17:53,860
can use to detect in memory a similarly

423
00:17:53,860 --> 00:17:56,620
we can use avenge later to the loading

424
00:17:56,620 --> 00:17:58,360
of Donna assembly and we can use

425
00:17:58,360 --> 00:18:00,779
eventuated to just-in-time compilation

426
00:18:00,779 --> 00:18:04,480
so i've output from concepts and

427
00:18:04,480 --> 00:18:08,529
empirical here firstly we see the

428
00:18:08,529 --> 00:18:11,019
loading of a donut assembly basically my

429
00:18:11,019 --> 00:18:13,509
assembly without path which is a strong

430
00:18:13,509 --> 00:18:15,429
indicator of any memory as a mere

431
00:18:15,429 --> 00:18:18,399
loading technique subsequently after

432
00:18:18,399 --> 00:18:20,919
looking at one assembly is doing we see

433
00:18:20,919 --> 00:18:22,659
they actually call upon a constructor

434
00:18:22,659 --> 00:18:25,690
which is basically how it how it typical

435
00:18:25,690 --> 00:18:29,080
donut object in box itself and if you

436
00:18:29,080 --> 00:18:30,850
look at the indicators that we detected

437
00:18:30,850 --> 00:18:33,220
here it's actually very similar to what

438
00:18:33,220 --> 00:18:36,129
we discussed earlier about about a

439
00:18:36,129 --> 00:18:37,480
memory a semi loading attempting to

440
00:18:37,480 --> 00:18:39,250
reference an assembly and creating an

441
00:18:39,250 --> 00:18:42,519
object of it and so we're actually able

442
00:18:42,519 --> 00:18:45,190
to have visibility over in memory a

443
00:18:45,190 --> 00:18:47,440
memory a semi loads with the use of

444
00:18:47,440 --> 00:18:50,700
those two events I I proceeded mentioned

445
00:18:50,700 --> 00:18:54,460
now let's move on to another indicator

446
00:18:54,460 --> 00:18:56,379
let's move on to the indicator relates

447
00:18:56,379 --> 00:18:58,870
to the use of bonnet API to do very sure

448
00:18:58,870 --> 00:18:59,820
equation

449
00:18:59,820 --> 00:19:04,210
so just in tiny W events we use it to

450
00:19:04,210 --> 00:19:06,490
quite great success just now so can we

451
00:19:06,490 --> 00:19:09,159
use it again can we use this to help us

452
00:19:09,159 --> 00:19:13,750
in our detection so Sally just-in-time

453
00:19:13,750 --> 00:19:16,149
compilation do not occur for native

454
00:19:16,149 --> 00:19:19,659
dotnet assembly and what I did my native

455
00:19:19,659 --> 00:19:21,700
done an assembly I mean by this

456
00:19:21,700 --> 00:19:25,029
particular system dot Texas MP as a

457
00:19:25,029 --> 00:19:27,009
secret programmer if you to reference

458
00:19:27,009 --> 00:19:29,470
this system detect assembly you're able

459
00:19:29,470 --> 00:19:31,029
to use the function console dot write

460
00:19:31,029 --> 00:19:32,950
line so this is essentially an example

461
00:19:32,950 --> 00:19:37,659
of a native Don SMP so why don't why

462
00:19:37,659 --> 00:19:39,009
doesn't this occur

463
00:19:39,009 --> 00:19:41,769
well when the donut framework is first

464
00:19:41,769 --> 00:19:45,039
installed all the relevant donut native

465
00:19:45,039 --> 00:19:46,539
assemblies would be installed as well

466
00:19:46,539 --> 00:19:49,659
and once they're installed you'll be

467
00:19:49,659 --> 00:19:53,230
compiled and upon compilation you'll be

468
00:19:53,230 --> 00:19:54,970
cached by something known as the native

469
00:19:54,970 --> 00:19:57,129
image generator the engine which

470
00:19:57,129 --> 00:19:59,019
basically will compile donut native

471
00:19:59,019 --> 00:20:00,850
don't assemblies to native images and

472
00:20:00,850 --> 00:20:01,570
catch

473
00:20:01,570 --> 00:20:05,259
and because once their cash just-in-time

474
00:20:05,259 --> 00:20:07,840
compilation will not occur and because

475
00:20:07,840 --> 00:20:08,799
they're not Anka

476
00:20:08,799 --> 00:20:11,019
there'll be no just-in-time events for

477
00:20:11,019 --> 00:20:14,379
us to look at so essentially we are not

478
00:20:14,379 --> 00:20:16,749
at a very good place for indicators

479
00:20:16,749 --> 00:20:19,769
related to the use of native Donna API

480
00:20:19,769 --> 00:20:22,570
so now I'm going to move on to the last

481
00:20:22,570 --> 00:20:24,970
indicator indicators related to the

482
00:20:24,970 --> 00:20:29,859
invoking of native API so if you

483
00:20:29,859 --> 00:20:31,720
remember from my previous demonstration

484
00:20:31,720 --> 00:20:33,970
I actually have a message box through

485
00:20:33,970 --> 00:20:36,609
the use of native API which I imported

486
00:20:36,609 --> 00:20:38,159
from user t2l

487
00:20:38,159 --> 00:20:40,210
essentially the name of this function is

488
00:20:40,210 --> 00:20:42,279
message box which I basically imported

489
00:20:42,279 --> 00:20:45,330
from the windows libraries and

490
00:20:45,330 --> 00:20:47,289
fortunately for us there is a way to

491
00:20:47,289 --> 00:20:48,940
detect it and it's something known as

492
00:20:48,940 --> 00:20:52,779
Interop events so intro events are

493
00:20:52,779 --> 00:20:55,389
essentially events that are generated

494
00:20:55,389 --> 00:20:57,700
wherever a call is made towards the

495
00:20:57,700 --> 00:21:00,479
windows native API by a doughnut

496
00:21:00,479 --> 00:21:04,599
application so to just give a simple

497
00:21:04,599 --> 00:21:07,450
output from my POC script we're actually

498
00:21:07,450 --> 00:21:09,789
able to detect a car towards the message

499
00:21:09,789 --> 00:21:11,919
box function which is a native function

500
00:21:11,919 --> 00:21:16,179
from my doughnut assembly and native API

501
00:21:16,179 --> 00:21:18,879
by itself it's is very useful like

502
00:21:18,879 --> 00:21:21,279
you're able to like with native API you

503
00:21:21,279 --> 00:21:23,349
can pop a message but you can't you

504
00:21:23,349 --> 00:21:24,940
can't reuse it to do our network

505
00:21:24,940 --> 00:21:27,849
connections by seizure bad guys tracked

506
00:21:27,849 --> 00:21:31,749
us they can always abuse it and these

507
00:21:31,749 --> 00:21:33,190
are some interesting activities they can

508
00:21:33,190 --> 00:21:35,320
do if they are busy like locking our

509
00:21:35,320 --> 00:21:37,629
quiche hooks extracting credentials from

510
00:21:37,629 --> 00:21:40,779
memory or any other malicious activity

511
00:21:40,779 --> 00:21:43,090
that you guys can the tractors or bad

512
00:21:43,090 --> 00:21:47,169
guys can potentially thing off so in

513
00:21:47,169 --> 00:21:48,789
this case having visited the over this

514
00:21:48,789 --> 00:21:51,789
is actually rather useful for us so our

515
00:21:51,789 --> 00:21:54,099
this tree detector star mean to our tree

516
00:21:54,099 --> 00:21:56,950
so not so bad and we're gonna use what

517
00:21:56,950 --> 00:21:58,509
we've learned now on another

518
00:21:58,509 --> 00:22:00,279
demonstration right now we're going to

519
00:22:00,279 --> 00:22:01,509
try on a real world example

520
00:22:01,509 --> 00:22:04,749
Sonnen trinity so sanity is a post

521
00:22:04,749 --> 00:22:07,119
exploitation agent there was this bill

522
00:22:07,119 --> 00:22:08,220
in ironpython

523
00:22:08,220 --> 00:22:11,080
essentially iron fighter is Python that

524
00:22:11,080 --> 00:22:13,090
has ability to call upon the donor

525
00:22:13,090 --> 00:22:15,370
assembly libraries we

526
00:22:15,370 --> 00:22:17,620
we're gonna see whether we can detect

527
00:22:17,620 --> 00:22:20,350
the launch of a donor SMD you're

528
00:22:20,350 --> 00:22:22,570
learning and research ready I'm gonna do

529
00:22:22,570 --> 00:22:23,590
something bad now is they're just

530
00:22:23,590 --> 00:22:25,180
popping a message well I'm going to

531
00:22:25,180 --> 00:22:26,740
launch the if they get a credential

532
00:22:26,740 --> 00:22:30,040
extraction - so let's move on to the

533
00:22:30,040 --> 00:22:34,780
demonstration so I'm on my left here or

534
00:22:34,780 --> 00:22:37,720
rather on your right there is a micro

535
00:22:37,720 --> 00:22:40,420
console that has my MSP xml's scientist

536
00:22:40,420 --> 00:22:41,020
rate stager

537
00:22:41,020 --> 00:22:43,390
so I'm actually this contains the stager

538
00:22:43,390 --> 00:22:45,280
for mysoline Trinity and I'm gonna run

539
00:22:45,280 --> 00:22:50,080
it with MSB exe and on your left there

540
00:22:50,080 --> 00:22:52,300
is a I have a Python POC script right

541
00:22:52,300 --> 00:22:53,860
here which basically what we wrote

542
00:22:53,860 --> 00:22:55,780
rolling concept and it's the one that is

543
00:22:55,780 --> 00:22:57,700
going to be used to consume the donor is

544
00:22:57,700 --> 00:23:02,170
w events so I'm just gonna run the final

545
00:23:02,170 --> 00:23:04,600
script in a minute

546
00:23:04,600 --> 00:23:09,030
I guess yeah I'm gonna run it now then

547
00:23:09,030 --> 00:23:11,740
I'm gonna run my son in GD stager and

548
00:23:11,740 --> 00:23:14,860
you can see whew whole lot of output I

549
00:23:14,860 --> 00:23:16,030
mean it's eventually sing right you

550
00:23:16,030 --> 00:23:18,400
expect a lot of output from you so we're

551
00:23:18,400 --> 00:23:20,560
gonna ignore this output for now and I'm

552
00:23:20,560 --> 00:23:23,500
gonna move to my attackers console in a

553
00:23:23,500 --> 00:23:28,780
minute I think I am Mabini so basically

554
00:23:28,780 --> 00:23:30,250
I'm gonna run safety testing right now

555
00:23:30,250 --> 00:23:33,120
I'm gonna dumb credentials from memory

556
00:23:33,120 --> 00:23:36,670
and yeah we actually got the credentials

557
00:23:36,670 --> 00:23:41,820
out so cool now let's move back to our

558
00:23:41,820 --> 00:23:46,330
detection machine and I see we're still

559
00:23:46,330 --> 00:23:48,070
getting a lot of output and frankly

560
00:23:48,070 --> 00:23:50,230
we're gonna ignore this again because I

561
00:23:50,230 --> 00:23:52,060
actually filter out the important

562
00:23:52,060 --> 00:23:54,100
information for us to look at and this

563
00:23:54,100 --> 00:23:55,420
is why you want to expect to do in a

564
00:23:55,420 --> 00:23:57,220
real world in a real world you are faced

565
00:23:57,220 --> 00:23:59,920
with a lot of different data one goal

566
00:23:59,920 --> 00:24:02,710
and it's our job as JavaScript

567
00:24:02,710 --> 00:24:04,210
professionals to actually filter out the

568
00:24:04,210 --> 00:24:06,150
necessary information for us to look at

569
00:24:06,150 --> 00:24:09,820
so right here firstly we actually see

570
00:24:09,820 --> 00:24:12,700
some interesting assembly loads we

571
00:24:12,700 --> 00:24:14,560
actually see the loading of PI a bit of

572
00:24:14,560 --> 00:24:16,870
iron pipes and assemblies without a lack

573
00:24:16,870 --> 00:24:19,840
of path which good is a strong indicator

574
00:24:19,840 --> 00:24:23,170
of any memory a semi-log painting so I'm

575
00:24:23,170 --> 00:24:24,790
either by itself it's not malicious

576
00:24:24,790 --> 00:24:27,850
right it's just a it's just a module for

577
00:24:27,850 --> 00:24:28,940
you to run i'm pattern

578
00:24:28,940 --> 00:24:31,479
but if you see in an organization that's

579
00:24:31,479 --> 00:24:33,919
definitely very enormous and the sea

580
00:24:33,919 --> 00:24:36,049
without path then you're probably on a

581
00:24:36,049 --> 00:24:39,529
technology as well so subsequently let's

582
00:24:39,529 --> 00:24:41,859
look at other indicators that we can see

583
00:24:41,859 --> 00:24:46,549
in a minute again so I'm gonna scroll

584
00:24:46,549 --> 00:24:49,599
down now I guess and if you see here

585
00:24:49,599 --> 00:24:51,649
we're share but we actually see a couple

586
00:24:51,649 --> 00:24:54,049
of interesting native API calls like but

587
00:24:54,049 --> 00:24:55,940
sure a lot low library get process

588
00:24:55,940 --> 00:24:59,720
address typical API common if I'm any

589
00:24:59,720 --> 00:25:01,940
windows process but can also be abused

590
00:25:01,940 --> 00:25:04,340
by tractors for Co injection purposes

591
00:25:04,340 --> 00:25:07,669
and lastly there's a native API that I

592
00:25:07,669 --> 00:25:09,649
want you guys to look at which is more

593
00:25:09,649 --> 00:25:11,299
specific to the evidence of static

594
00:25:11,299 --> 00:25:15,080
execution I should be scrolling up in

595
00:25:15,080 --> 00:25:18,080
Anna so this is known as mini done right

596
00:25:18,080 --> 00:25:20,720
down it's a native API that allows the

597
00:25:20,720 --> 00:25:23,059
process to grab handle on another

598
00:25:23,059 --> 00:25:25,519
process and dummies contents which is

599
00:25:25,519 --> 00:25:28,039
quite similar to how you expect a

600
00:25:28,039 --> 00:25:30,289
credential extraction process to lock to

601
00:25:30,289 --> 00:25:34,429
behave so this level of is the allow us

602
00:25:34,429 --> 00:25:37,940
to distribute the site or rather have

603
00:25:37,940 --> 00:25:40,609
some poor visibility on what a tractor

604
00:25:40,609 --> 00:25:43,330
is attempting to perform on Windows XP

605
00:25:43,330 --> 00:25:46,849
so to just give a rough summary of the

606
00:25:46,849 --> 00:25:49,570
various donut Panama trees that I have

607
00:25:49,570 --> 00:25:54,220
spoken up plus the donut runtime DLL

608
00:25:54,220 --> 00:25:56,389
essentially we can do a hand for

609
00:25:56,389 --> 00:25:59,269
processes that has don't ever intend via

610
00:25:59,269 --> 00:26:01,489
within them and for this binaries that

611
00:26:01,489 --> 00:26:03,889
typically do not execute donut code

612
00:26:03,889 --> 00:26:06,470
having a donor on Sandia within it is

613
00:26:06,470 --> 00:26:09,619
rather suspicious we can also look at

614
00:26:09,619 --> 00:26:12,169
Donna SWE events with this level with

615
00:26:12,169 --> 00:26:13,759
this events reentry attempt to trace

616
00:26:13,759 --> 00:26:18,379
what a detractor is a time we do on on a

617
00:26:18,379 --> 00:26:21,320
Windows machine and if you look back

618
00:26:21,320 --> 00:26:23,720
into the sub-q chain there are a lotta

619
00:26:23,720 --> 00:26:25,690
memories that we can't rework refer to

620
00:26:25,690 --> 00:26:28,669
donut territories are useful enough but

621
00:26:28,669 --> 00:26:30,289
there are events that we can also look

622
00:26:30,289 --> 00:26:33,379
at so you expect like a donut code

623
00:26:33,379 --> 00:26:36,200
execution to occur on the execution pace

624
00:26:36,200 --> 00:26:38,989
of a cyber kitchen but typically I

625
00:26:38,989 --> 00:26:40,789
actually use it to do your persistency

626
00:26:40,789 --> 00:26:42,350
you can use it to send up

627
00:26:42,350 --> 00:26:44,660
connections to connect your c2 but all

628
00:26:44,660 --> 00:26:47,480
these live different indicators for

629
00:26:47,480 --> 00:26:51,289
example if you do persist you can the

630
00:26:51,289 --> 00:26:52,549
indicators you live from in different my

631
00:26:52,549 --> 00:26:54,890
point sample we can hunt for persistency

632
00:26:54,890 --> 00:26:56,870
indicators should shoot a registry can

633
00:26:56,870 --> 00:26:58,760
angle position see indicators true a

634
00:26:58,760 --> 00:27:03,049
scheduled tasks for common control we

635
00:27:03,049 --> 00:27:04,700
can tree hunt for the presence of a CG

636
00:27:04,700 --> 00:27:06,140
channel by lucky and never outbound

637
00:27:06,140 --> 00:27:08,240
connections and how about even before

638
00:27:08,240 --> 00:27:10,640
the entire execution occur how did the

639
00:27:10,640 --> 00:27:12,110
attacker actually gone to network how

640
00:27:12,110 --> 00:27:13,760
was it delivered what's the live actual

641
00:27:13,760 --> 00:27:14,270
hm

642
00:27:14,270 --> 00:27:17,870
HEPA was delivered true X and alpha so

643
00:27:17,870 --> 00:27:20,690
it's don't action which is by itself is

644
00:27:20,690 --> 00:27:22,850
useful by fuel to combine with other

645
00:27:22,850 --> 00:27:25,520
telemetry be on from different one

646
00:27:25,520 --> 00:27:27,020
entire side back you chain you can

647
00:27:27,020 --> 00:27:28,600
actually pain a greater picture and

648
00:27:28,600 --> 00:27:30,860
determine what actually occur on a

649
00:27:30,860 --> 00:27:35,179
single X state so to just give a summary

650
00:27:35,179 --> 00:27:38,720
of what we have discuss show this entire

651
00:27:38,720 --> 00:27:41,510
presentation PowerShell is still deadly

652
00:27:41,510 --> 00:27:43,610
definitely I mean stranger still use it

653
00:27:43,610 --> 00:27:46,610
I still see commonly on my clinic clinic

654
00:27:46,610 --> 00:27:49,340
states but there are various challenges

655
00:27:49,340 --> 00:27:50,870
the PowerShell fish right now there are

656
00:27:50,870 --> 00:27:52,549
different defenses mechanism against

657
00:27:52,549 --> 00:27:55,970
PowerShell so different attackers

658
00:27:55,970 --> 00:27:57,679
different bad guys have move on to

659
00:27:57,679 --> 00:27:59,659
different set of techniques and attack

660
00:27:59,659 --> 00:28:02,870
and don't let being one of them but as

661
00:28:02,870 --> 00:28:05,270
I'll show you today Donna attacks are

662
00:28:05,270 --> 00:28:08,059
not that invisible as orbital there are

663
00:28:08,059 --> 00:28:09,830
two telemetrics indicators that we

664
00:28:09,830 --> 00:28:13,400
offenders can lavish on and lastly the

665
00:28:13,400 --> 00:28:15,260
most important point is to try out

666
00:28:15,260 --> 00:28:15,799
yourself

667
00:28:15,799 --> 00:28:18,650
editing the action today is open source

668
00:28:18,650 --> 00:28:20,990
like you could grab a Python PHP from

669
00:28:20,990 --> 00:28:23,510
our current site get up don't know Jesse

670
00:28:23,510 --> 00:28:25,400
James for sure actually you can get it

671
00:28:25,400 --> 00:28:27,950
from a skit process cycle you can just

672
00:28:27,950 --> 00:28:30,500
download offline online sanction T so so

673
00:28:30,500 --> 00:28:33,020
is different yeah so nothing beats

674
00:28:33,020 --> 00:28:35,690
trying out yourself because a service

675
00:28:35,690 --> 00:28:37,220
very professional we have to constantly

676
00:28:37,220 --> 00:28:39,049
obscure self and and sure that we are on

677
00:28:39,049 --> 00:28:42,169
par with the bad guys so yeah we have to

678
00:28:42,169 --> 00:28:43,580
so for those who are interested you can

679
00:28:43,580 --> 00:28:46,070
actually grab me off the top and or

680
00:28:46,070 --> 00:28:48,020
email me or DME and I can sing all the

681
00:28:48,020 --> 00:28:51,500
link necessary links so there we offer

682
00:28:51,500 --> 00:28:54,169
on presentation taste and let's move to

683
00:28:54,169 --> 00:28:56,740
questions

684
00:28:57,980 --> 00:29:04,170
yeah have you looked at the changes in

685
00:29:04,170 --> 00:29:07,620
tone 84.8 so oh yes so but I think what

686
00:29:07,620 --> 00:29:09,620
don't have a point MZ has really been

687
00:29:09,620 --> 00:29:13,020
incorporated we've don't evaporate if

688
00:29:13,020 --> 00:29:16,140
I'm if I'm not wrong whereby is actually

689
00:29:16,140 --> 00:29:19,470
able to track in is in our Excel

690
00:29:19,470 --> 00:29:21,320
interface between the donut frameworks

691
00:29:21,320 --> 00:29:25,020
against against reverse so yeah and well

692
00:29:25,020 --> 00:29:27,440
that but I think there are two ways to

693
00:29:27,440 --> 00:29:31,800
bypass the MZ interface like like I I

694
00:29:31,800 --> 00:29:33,960
rendered sorry first they actually look

695
00:29:33,960 --> 00:29:39,450
to bypassing this mg even even the

696
00:29:39,450 --> 00:29:42,990
allotted in a donut so um to answer

697
00:29:42,990 --> 00:29:45,060
question yes I I look at it but I really

698
00:29:45,060 --> 00:29:49,140
like dig really deep into it to to give

699
00:29:49,140 --> 00:29:53,000
a definite answer yeah yeah

