1
00:00:06,720 --> 00:00:07,680
now

2
00:00:07,680 --> 00:00:10,480
let us all welcome our next income 2021

3
00:00:10,480 --> 00:00:13,840
keynote blind spots of platform security

4
00:00:13,840 --> 00:00:16,239
hardware and firmware challenges please

5
00:00:16,239 --> 00:00:19,520
welcome alex microsoft founder and ceo

6
00:00:19,520 --> 00:00:22,160
of finally inc

7
00:00:22,160 --> 00:00:24,960
good morning singapore and

8
00:00:24,960 --> 00:00:27,359
it is a big pleasure for me to be here

9
00:00:27,359 --> 00:00:30,960
on the virtual stage of simcon 2021

10
00:00:30,960 --> 00:00:31,840
and

11
00:00:31,840 --> 00:00:34,480
i'm happy to deliver my knot which is

12
00:00:34,480 --> 00:00:36,640
focusing on blind spots of platform

13
00:00:36,640 --> 00:00:39,840
security and we will talk today about

14
00:00:39,840 --> 00:00:42,559
the hardware and firmware challenges but

15
00:00:42,559 --> 00:00:45,280
my name is alex machrossov and i'm

16
00:00:45,280 --> 00:00:46,719
well-known a forensic security

17
00:00:46,719 --> 00:00:49,840
researcher spring in almost two decades

18
00:00:49,840 --> 00:00:52,879
uh focused on reverse engineering and

19
00:00:52,879 --> 00:00:55,760
detection of low-level threats and

20
00:00:55,760 --> 00:00:57,600
basically breaking the hardware and

21
00:00:57,600 --> 00:00:59,520
firmwares i've been working for the

22
00:00:59,520 --> 00:01:02,800
companies like intel and nvidia and some

23
00:01:02,800 --> 00:01:05,519
others and actually

24
00:01:05,519 --> 00:01:07,680
currently i founded my own company

25
00:01:07,680 --> 00:01:10,640
called binary focus it exactly on these

26
00:01:10,640 --> 00:01:13,280
blind spots and try to fix the industry

27
00:01:13,280 --> 00:01:16,320
and get it watched

28
00:01:16,640 --> 00:01:18,880
so let's

29
00:01:18,880 --> 00:01:21,360
talk about what the challenges are

30
00:01:21,360 --> 00:01:23,920
and if you think about we spend the

31
00:01:23,920 --> 00:01:27,280
decades on targeting detections on

32
00:01:27,280 --> 00:01:30,400
operating system level and that doesn't

33
00:01:30,400 --> 00:01:32,799
mean we don't have the threats which is

34
00:01:32,799 --> 00:01:36,000
evolving on um

35
00:01:36,000 --> 00:01:38,320
firmware and hardware space it is

36
00:01:38,320 --> 00:01:41,680
actually a big mistake from the industry

37
00:01:41,680 --> 00:01:44,560
it's been constantly overlooking and

38
00:01:44,560 --> 00:01:48,240
ignoring such of the spaces but now it

39
00:01:48,240 --> 00:01:50,960
is actually right timing to focus on

40
00:01:50,960 --> 00:01:54,079
that problems and in my knot i will be

41
00:01:54,079 --> 00:01:57,040
discussed today why

42
00:01:57,040 --> 00:02:00,479
so if you think about like in the open

43
00:02:00,479 --> 00:02:02,479
boring security industry we just

44
00:02:02,479 --> 00:02:05,439
scratching the surface on what we try to

45
00:02:05,439 --> 00:02:07,840
detect on the hardware and firmware

46
00:02:07,840 --> 00:02:10,000
level and of course like modern

47
00:02:10,000 --> 00:02:11,840
persistent techniques it's always

48
00:02:11,840 --> 00:02:14,400
evolving and try to invent new

49
00:02:14,400 --> 00:02:17,040
techniques to bypass endpoint solutions

50
00:02:17,040 --> 00:02:18,959
or stay

51
00:02:18,959 --> 00:02:23,120
not detected for a long time

52
00:02:23,120 --> 00:02:25,360
and if you look on evolution of the

53
00:02:25,360 --> 00:02:28,319
persistent technique it's been always

54
00:02:28,319 --> 00:02:31,519
some sort of like a

55
00:02:31,840 --> 00:02:36,480
challenge between mitigations and

56
00:02:36,480 --> 00:02:39,280
modern persistence complexity because if

57
00:02:39,280 --> 00:02:40,160
you

58
00:02:40,160 --> 00:02:43,840
look on this figure you can see so we

59
00:02:43,840 --> 00:02:45,920
have a root kit which has been pretty

60
00:02:45,920 --> 00:02:48,080
actively before

61
00:02:48,080 --> 00:02:49,920
attacking and hooking an operating

62
00:02:49,920 --> 00:02:52,080
system above the code but when the code

63
00:02:52,080 --> 00:02:55,200
signing policy for external models being

64
00:02:55,200 --> 00:02:59,280
involved like this uh mainstream threats

65
00:02:59,280 --> 00:03:02,480
move to the lower lower stack and try to

66
00:03:02,480 --> 00:03:03,760
in fact

67
00:03:03,760 --> 00:03:06,080
moisture good volume records and some

68
00:03:06,080 --> 00:03:08,480
other stuff which is actually bootstrap

69
00:03:08,480 --> 00:03:09,280
uh

70
00:03:09,280 --> 00:03:11,920
some code before the operating system

71
00:03:11,920 --> 00:03:14,640
get control and basically it's allows

72
00:03:14,640 --> 00:03:18,560
the attacker to be in the place where

73
00:03:18,560 --> 00:03:21,280
at the time not been much solution

74
00:03:21,280 --> 00:03:23,200
looking effectively to detect such of

75
00:03:23,200 --> 00:03:27,200
the threats right and then um

76
00:03:27,200 --> 00:03:29,519
actually secure boot came onto the

77
00:03:29,519 --> 00:03:31,200
others where

78
00:03:31,200 --> 00:03:33,599
it is create uh

79
00:03:33,599 --> 00:03:36,400
some integrity of the good process and

80
00:03:36,400 --> 00:03:38,159
boot kids became

81
00:03:38,159 --> 00:03:41,599
less effective right so and it it's been

82
00:03:41,599 --> 00:03:43,519
a time where

83
00:03:43,519 --> 00:03:45,840
attackers need to look and find the new

84
00:03:45,840 --> 00:03:48,000
spots and it is exactly it's a firmware

85
00:03:48,000 --> 00:03:50,319
right so buyers and plants it's actually

86
00:03:50,319 --> 00:03:53,680
less rare than we think about and even

87
00:03:53,680 --> 00:03:55,840
nowadays uh

88
00:03:55,840 --> 00:03:58,239
attacking the sign a driver and

89
00:03:58,239 --> 00:04:00,799
bootstrap your code to the kernel mode

90
00:04:00,799 --> 00:04:02,799
also a potential scenario for the

91
00:04:02,799 --> 00:04:04,959
attacker to bypass code sign-in policy

92
00:04:04,959 --> 00:04:07,360
because you can

93
00:04:07,360 --> 00:04:10,720
execute the code uh over-exporting the

94
00:04:10,720 --> 00:04:13,040
vulnerability in a legitimate driver

95
00:04:13,040 --> 00:04:15,439
right or use legitimate driver if it is

96
00:04:15,439 --> 00:04:18,639
providing some functions for abuse this

97
00:04:18,639 --> 00:04:21,199
driver and deliver malicious code

98
00:04:21,199 --> 00:04:23,440
operating system level

99
00:04:23,440 --> 00:04:24,800
and

100
00:04:24,800 --> 00:04:26,720
that's

101
00:04:26,720 --> 00:04:29,520
a good topic with a picture where we can

102
00:04:29,520 --> 00:04:33,040
see how moving down from the operating

103
00:04:33,040 --> 00:04:36,240
system to the hardware we actually have

104
00:04:36,240 --> 00:04:38,639
less mitigations less detection

105
00:04:38,639 --> 00:04:41,680
techniques and actually persistence and

106
00:04:41,680 --> 00:04:44,080
the quality of the persistent techniques

107
00:04:44,080 --> 00:04:45,360
is growing

108
00:04:45,360 --> 00:04:48,240
exponentially

109
00:04:48,240 --> 00:04:49,199
also

110
00:04:49,199 --> 00:04:53,120
that's a very good statistics about how

111
00:04:53,120 --> 00:04:54,479
many

112
00:04:54,479 --> 00:04:57,919
etr bypasses we have in the wild if you

113
00:04:57,919 --> 00:05:00,160
think about modern edr endpoint

114
00:05:00,160 --> 00:05:03,120
detection and response solutions uh

115
00:05:03,120 --> 00:05:05,919
all of them based on apis which is

116
00:05:05,919 --> 00:05:09,360
microsoft provide with atw interfaces

117
00:05:09,360 --> 00:05:12,320
right and if you have an ability to

118
00:05:12,320 --> 00:05:17,360
bypass such of the interfaces or like uh

119
00:05:17,360 --> 00:05:18,560
stay

120
00:05:18,560 --> 00:05:20,800
under the rudders of this cemetery

121
00:05:20,800 --> 00:05:24,639
system you can be undetected by

122
00:05:24,639 --> 00:05:28,000
many of endpoint solutions nowadays and

123
00:05:28,000 --> 00:05:29,199
on this

124
00:05:29,199 --> 00:05:32,720
chart we can see how

125
00:05:32,880 --> 00:05:35,759
how many vulnerabilities actually

126
00:05:35,759 --> 00:05:38,479
vulnerabilities grows by the last two

127
00:05:38,479 --> 00:05:41,360
years right so in 2021

128
00:05:41,360 --> 00:05:44,479
just actually overloading us with

129
00:05:44,479 --> 00:05:47,360
multiple vectors which is can bypass by

130
00:05:47,360 --> 00:05:50,560
design two telemetry collection and

131
00:05:50,560 --> 00:05:53,280
endpoint solutions uh actually about

132
00:05:53,280 --> 00:05:55,039
that my colleagues

133
00:05:55,039 --> 00:05:58,400
from binary will be talked about on the

134
00:05:58,400 --> 00:06:01,440
next week at black hat europe

135
00:06:01,440 --> 00:06:04,240
and to be honest uh it's very big

136
00:06:04,240 --> 00:06:06,720
problem for the industry where we have

137
00:06:06,720 --> 00:06:09,600
unified interface which is cool right so

138
00:06:09,600 --> 00:06:11,520
we have unified interface and from

139
00:06:11,520 --> 00:06:13,280
development perspective it's very

140
00:06:13,280 --> 00:06:15,360
effective way but

141
00:06:15,360 --> 00:06:18,560
also unified interface means

142
00:06:18,560 --> 00:06:21,600
bypass once work for whole industry

143
00:06:21,600 --> 00:06:24,319
right and such of the problems also

144
00:06:24,319 --> 00:06:26,319
exist in the firmware space and we will

145
00:06:26,319 --> 00:06:29,360
talk about that a bit later

146
00:06:29,360 --> 00:06:31,919
but let's uh focus on

147
00:06:31,919 --> 00:06:35,280
how actually mitra attack providing us

148
00:06:35,280 --> 00:06:37,600
some guidance about the firmware

149
00:06:37,600 --> 00:06:40,479
corruption threats and the mitigations

150
00:06:40,479 --> 00:06:43,680
is actually exist right so in

151
00:06:43,680 --> 00:06:45,919
in

152
00:06:46,639 --> 00:06:48,800
it's actually doesn't provide much

153
00:06:48,800 --> 00:06:50,800
guidance we have a boot integrity we

154
00:06:50,800 --> 00:06:53,120
have a privilege account management and

155
00:06:53,120 --> 00:06:55,120
update software right so you need to use

156
00:06:55,120 --> 00:06:57,520
the recent bios you need to basically

157
00:06:57,520 --> 00:07:01,520
reduce the privileges of the user and

158
00:07:01,520 --> 00:07:04,240
check the integrity of

159
00:07:04,240 --> 00:07:06,160
your bias but

160
00:07:06,160 --> 00:07:08,720
to be honest integrity doesn't provide

161
00:07:08,720 --> 00:07:10,800
much visibility even the integrity

162
00:07:10,800 --> 00:07:14,000
failed so you don't understand what is

163
00:07:14,000 --> 00:07:17,039
cause this failure right and os

164
00:07:17,039 --> 00:07:19,520
privileges doesn't equal to firmware

165
00:07:19,520 --> 00:07:21,840
privileges basically yes you can reduce

166
00:07:21,840 --> 00:07:24,639
a bit attack surface but you will be not

167
00:07:24,639 --> 00:07:27,199
eliminated

168
00:07:27,199 --> 00:07:28,960
also updated

169
00:07:28,960 --> 00:07:31,039
firmware doesn't mean it is secure

170
00:07:31,039 --> 00:07:33,520
firmware because uh based on our

171
00:07:33,520 --> 00:07:36,639
statistics from binary actually one day

172
00:07:36,639 --> 00:07:39,440
vulnerabilities can survive up to two

173
00:07:39,440 --> 00:07:41,680
years in many actually enterprise

174
00:07:41,680 --> 00:07:44,800
vendors and that's kind of scary right

175
00:07:44,800 --> 00:07:47,280
so broken integrity really doesn't tell

176
00:07:47,280 --> 00:07:50,639
us much about an impact too and we need

177
00:07:50,639 --> 00:07:52,400
really to

178
00:07:52,400 --> 00:07:55,599
call the industry and reinvent how we

179
00:07:55,599 --> 00:07:58,720
think about such of the detection and

180
00:07:58,720 --> 00:08:01,199
mitigations for for these problems

181
00:08:01,199 --> 00:08:03,440
because the similar approaches we

182
00:08:03,440 --> 00:08:05,919
currently apply in our operating system

183
00:08:05,919 --> 00:08:08,240
available doesn't work effectively on

184
00:08:08,240 --> 00:08:12,080
the firmware and hardware space

185
00:08:12,080 --> 00:08:14,960
uh but let's talk about the threats

186
00:08:14,960 --> 00:08:18,000
actually we're detecting right now in um

187
00:08:18,000 --> 00:08:20,000
in the wild and

188
00:08:20,000 --> 00:08:22,160
this screenshot made from the mosaic

189
00:08:22,160 --> 00:08:24,960
regressor from ida pro and to be honest

190
00:08:24,960 --> 00:08:27,120
massage aggressor has been one of the

191
00:08:27,120 --> 00:08:29,759
threats detected by in the last year by

192
00:08:29,759 --> 00:08:33,360
kaspersky lab and interestingly

193
00:08:33,360 --> 00:08:34,880
such of the thread

194
00:08:34,880 --> 00:08:38,159
being based on the even older

195
00:08:38,159 --> 00:08:41,919
implant uh firmware implant developed by

196
00:08:41,919 --> 00:08:45,839
hakken team and uh called rk loader

197
00:08:45,839 --> 00:08:49,279
to be honest uh mosaic aggressor

198
00:08:49,279 --> 00:08:52,800
developers didn't remove indicator which

199
00:08:52,800 --> 00:08:55,200
is called the infection indicator for

200
00:08:55,200 --> 00:08:57,839
hiking team and it is um

201
00:08:57,839 --> 00:09:00,640
it is ufi variable with the constant

202
00:09:00,640 --> 00:09:02,320
name fta

203
00:09:02,320 --> 00:09:03,120
and

204
00:09:03,120 --> 00:09:06,800
this five years old indicator why mosaic

205
00:09:06,800 --> 00:09:10,560
regressor takes a while to detect and

206
00:09:10,560 --> 00:09:13,040
actually

207
00:09:13,760 --> 00:09:16,160
provide guidance from the industry for

208
00:09:16,160 --> 00:09:19,279
such of the threats it is ridiculously

209
00:09:19,279 --> 00:09:22,959
long time and to be honest it's

210
00:09:22,959 --> 00:09:27,279
contains both indicators and it's stay

211
00:09:27,279 --> 00:09:30,000
undetected which is exactly prove the

212
00:09:30,000 --> 00:09:32,560
statement which i told before we don't

213
00:09:32,560 --> 00:09:34,800
have effective tools for detecting such

214
00:09:34,800 --> 00:09:37,519
of the threats right

215
00:09:37,519 --> 00:09:39,839
another example it is abusing the

216
00:09:39,839 --> 00:09:42,959
bootloaders of operating system and

217
00:09:42,959 --> 00:09:45,040
basically provides some

218
00:09:45,040 --> 00:09:47,360
sort of

219
00:09:47,360 --> 00:09:50,920
some sort of

220
00:09:57,839 --> 00:10:00,560
in another example it is actually some

221
00:10:00,560 --> 00:10:05,839
of the pocs get developed on top of

222
00:10:06,000 --> 00:10:10,320
modern e5 boot loaders when it's try to

223
00:10:10,320 --> 00:10:13,519
show some random screen screen

224
00:10:13,519 --> 00:10:16,800
with like a pretty simple output of the

225
00:10:16,800 --> 00:10:19,279
strings on

226
00:10:19,279 --> 00:10:20,640
in uefi

227
00:10:20,640 --> 00:10:23,680
console output so basically this is

228
00:10:23,680 --> 00:10:26,320
being detected by eset but to be honest

229
00:10:26,320 --> 00:10:28,880
it's being found on github with source

230
00:10:28,880 --> 00:10:32,160
code and i hope the ransomware will be

231
00:10:32,160 --> 00:10:34,240
not showing up in the firmware space

232
00:10:34,240 --> 00:10:36,399
because it is much more scary than

233
00:10:36,399 --> 00:10:38,800
operating system level because it can

234
00:10:38,800 --> 00:10:42,160
cause uh actually critical failures for

235
00:10:42,160 --> 00:10:44,079
the systems

236
00:10:44,079 --> 00:10:44,839
and

237
00:10:44,839 --> 00:10:47,760
uh to be honest

238
00:10:47,760 --> 00:10:50,480
i demonstrated some uh

239
00:10:50,480 --> 00:10:54,480
uh poc about how from operating system

240
00:10:54,480 --> 00:10:56,800
level to the firmware that title can

241
00:10:56,800 --> 00:11:00,000
persist in black at asia 2017

242
00:11:00,000 --> 00:11:02,880
and it's been in marina bay sands in

243
00:11:02,880 --> 00:11:05,200
singapore hopefully i will be come back

244
00:11:05,200 --> 00:11:09,519
there soon it is awesome venue and

245
00:11:09,519 --> 00:11:12,800
where it's been showing how actually the

246
00:11:12,800 --> 00:11:15,200
attacker can persist survive and

247
00:11:15,200 --> 00:11:17,839
potentially it's quite scary vector for

248
00:11:17,839 --> 00:11:20,399
ransomware right

249
00:11:20,399 --> 00:11:23,279
but let's come back on some uh nowadays

250
00:11:23,279 --> 00:11:25,519
news and uh

251
00:11:25,519 --> 00:11:28,880
what is happening in the wild last month

252
00:11:28,880 --> 00:11:31,519
right so it is a two threats which is

253
00:11:31,519 --> 00:11:33,839
actually being detected in the wild one

254
00:11:33,839 --> 00:11:35,920
of them it is

255
00:11:35,920 --> 00:11:38,720
finn fisher uh state sponsor government

256
00:11:38,720 --> 00:11:41,839
sponsored attack detected by kaspersky

257
00:11:41,839 --> 00:11:44,880
which is being used in the module

258
00:11:44,880 --> 00:11:46,480
where

259
00:11:46,480 --> 00:11:50,220
it is a bootloader with some

260
00:11:50,220 --> 00:11:51,440
[Music]

261
00:11:51,440 --> 00:11:52,639
very

262
00:11:52,639 --> 00:11:54,880
minimal modifications to basically

263
00:11:54,880 --> 00:11:56,800
bootstrap uh

264
00:11:56,800 --> 00:12:00,000
the code for uh providing towards the

265
00:12:00,000 --> 00:12:03,040
operating system malicious payload and

266
00:12:03,040 --> 00:12:05,440
this is a classical boot kit because it

267
00:12:05,440 --> 00:12:08,160
is abused the bootloader not exactly the

268
00:12:08,160 --> 00:12:10,639
firmware and another one it is being

269
00:12:10,639 --> 00:12:14,000
inspector which is uh being detected by

270
00:12:14,000 --> 00:12:17,600
anti-virus company called eset and uh

271
00:12:17,600 --> 00:12:20,000
it's pretty similar techniques get used

272
00:12:20,000 --> 00:12:22,839
by both of these um

273
00:12:22,839 --> 00:12:28,240
uh attackers and uh basically inspector

274
00:12:28,240 --> 00:12:30,160
also uh

275
00:12:30,160 --> 00:12:32,639
interesting because it stayed under the

276
00:12:32,639 --> 00:12:36,240
rudders almost nine years

277
00:12:36,240 --> 00:12:37,760
and

278
00:12:37,760 --> 00:12:41,200
it shows exactly the problem uh industry

279
00:12:41,200 --> 00:12:44,560
not ready to detect um the threads which

280
00:12:44,560 --> 00:12:48,079
is uh under or below the operating

281
00:12:48,079 --> 00:12:50,079
system level right so

282
00:12:50,079 --> 00:12:53,440
where it became very complicated to

283
00:12:53,440 --> 00:12:55,360
detect such of the threats

284
00:12:55,360 --> 00:12:57,040
so

285
00:12:57,040 --> 00:12:58,240
and

286
00:12:58,240 --> 00:13:01,920
if you think about uh which we're being

287
00:13:01,920 --> 00:13:05,279
attacked by inspector and finfisher it

288
00:13:05,279 --> 00:13:07,920
is exactly bootloaders

289
00:13:07,920 --> 00:13:10,240
which is responsible for actually

290
00:13:10,240 --> 00:13:11,440
loading

291
00:13:11,440 --> 00:13:15,279
windows kernel and initialized rest of

292
00:13:15,279 --> 00:13:18,399
the code during the boot

293
00:13:18,399 --> 00:13:19,200
so

294
00:13:19,200 --> 00:13:22,000
of course secure good will save us all

295
00:13:22,000 --> 00:13:25,040
right so but uh on the practice even

296
00:13:25,040 --> 00:13:28,079
secure boot it's not that hard to bypass

297
00:13:28,079 --> 00:13:31,600
and we'll talk uh a bit later how we can

298
00:13:31,600 --> 00:13:34,720
do it with modern attack factors in the

299
00:13:34,720 --> 00:13:36,160
firmware

300
00:13:36,160 --> 00:13:39,040
so but to be honest these techniques

301
00:13:39,040 --> 00:13:41,040
which has been used in the fin fischer

302
00:13:41,040 --> 00:13:43,120
and inspector it's not new and it is

303
00:13:43,120 --> 00:13:46,399
even even been discussed in my book uh

304
00:13:46,399 --> 00:13:49,199
which is being released a few years ago

305
00:13:49,199 --> 00:13:50,240
and

306
00:13:50,240 --> 00:13:51,279
uh

307
00:13:51,279 --> 00:13:53,600
the techniques originally actually been

308
00:13:53,600 --> 00:13:57,680
presented in 2012 by researchers and

309
00:13:57,680 --> 00:14:00,560
only now we get actual detection for

310
00:14:00,560 --> 00:14:03,440
that which is quite scary because

311
00:14:03,440 --> 00:14:05,440
industry looks like not ready for more

312
00:14:05,440 --> 00:14:08,240
complicated threats which is inside the

313
00:14:08,240 --> 00:14:10,160
firmware

314
00:14:10,160 --> 00:14:13,680
and this is actually a snapshot of the

315
00:14:13,680 --> 00:14:17,839
code from the entry point of

316
00:14:18,000 --> 00:14:20,880
of uh one of the bootloaders from the

317
00:14:20,880 --> 00:14:23,519
inspector and we can see clearly here is

318
00:14:23,519 --> 00:14:26,880
a position independent code uh where

319
00:14:26,880 --> 00:14:30,959
the attacker tried to actually

320
00:14:30,959 --> 00:14:34,399
modify the bootloader but stay stable on

321
00:14:34,399 --> 00:14:37,440
execution flow and will be

322
00:14:37,440 --> 00:14:41,600
independent on relocations on whatever

323
00:14:41,600 --> 00:14:44,560
changes in runtime can happens so

324
00:14:44,560 --> 00:14:46,399
basically

325
00:14:46,399 --> 00:14:47,519
this code

326
00:14:47,519 --> 00:14:49,680
obviously looks like not a standard code

327
00:14:49,680 --> 00:14:53,120
produced by the compiler but still why

328
00:14:53,120 --> 00:14:56,079
for detection such of the threads takes

329
00:14:56,079 --> 00:14:59,040
a while

330
00:14:59,040 --> 00:14:59,920
and

331
00:14:59,920 --> 00:15:02,160
it's no easy answer to be honest the

332
00:15:02,160 --> 00:15:04,800
industry have a lot of other problems

333
00:15:04,800 --> 00:15:07,680
but back to the firmware and hardware it

334
00:15:07,680 --> 00:15:08,959
is

335
00:15:08,959 --> 00:15:11,839
some disconnection between

336
00:15:11,839 --> 00:15:15,040
operating system and actual hardware and

337
00:15:15,040 --> 00:15:17,040
firmware threads because it's completely

338
00:15:17,040 --> 00:15:20,240
different worlds and need very specific

339
00:15:20,240 --> 00:15:23,199
expertise to develop effective solution

340
00:15:23,199 --> 00:15:25,519
for that and of course like endpoint

341
00:15:25,519 --> 00:15:26,560
vendors

342
00:15:26,560 --> 00:15:28,880
don't really focus on firmware specifics

343
00:15:28,880 --> 00:15:30,560
because they try to cover the whole

344
00:15:30,560 --> 00:15:33,440
stack and it is uh creates some

345
00:15:33,440 --> 00:15:35,040
complications

346
00:15:35,040 --> 00:15:37,440
because firmware it is

347
00:15:37,440 --> 00:15:39,920
actual uh real-time operating system

348
00:15:39,920 --> 00:15:42,959
nowadays to be honest uh

349
00:15:42,959 --> 00:15:46,800
firmware it is uh six million swines of

350
00:15:46,800 --> 00:15:49,759
the code in your modern laptop actually

351
00:15:49,759 --> 00:15:51,920
more than six million one of the code

352
00:15:51,920 --> 00:15:55,600
and nowadays in in toscarino even

353
00:15:55,600 --> 00:15:57,120
smaller than that

354
00:15:57,120 --> 00:15:59,440
and such of the operating system

355
00:15:59,440 --> 00:16:01,040
executed before

356
00:16:01,040 --> 00:16:02,480
main uh

357
00:16:02,480 --> 00:16:04,240
operating system which is getting

358
00:16:04,240 --> 00:16:06,839
control later and of course

359
00:16:06,839 --> 00:16:10,240
uh this code need to be verified and

360
00:16:10,240 --> 00:16:13,360
monitored otherwise it's hard to

361
00:16:13,360 --> 00:16:15,920
trust everything which is executed

362
00:16:15,920 --> 00:16:18,639
afterwards

363
00:16:19,440 --> 00:16:20,320
and

364
00:16:20,320 --> 00:16:22,079
also the threat modeling for the

365
00:16:22,079 --> 00:16:24,560
hardware firmware and operating system

366
00:16:24,560 --> 00:16:27,360
is completely separated

367
00:16:27,360 --> 00:16:29,279
if you think about we have a three

368
00:16:29,279 --> 00:16:32,079
different ecosystem where the hardware

369
00:16:32,079 --> 00:16:35,199
vendors developing the hardware security

370
00:16:35,199 --> 00:16:37,920
features and then the firmware

371
00:16:37,920 --> 00:16:40,160
developers try to

372
00:16:40,160 --> 00:16:42,240
implement the support some of these

373
00:16:42,240 --> 00:16:45,040
hardware security features in their code

374
00:16:45,040 --> 00:16:47,839
and operating system developers which is

375
00:16:47,839 --> 00:16:49,920
completely separate teams separate

376
00:16:49,920 --> 00:16:52,560
groups or separate companies try to

377
00:16:52,560 --> 00:16:55,199
build something on top of that and this

378
00:16:55,199 --> 00:16:57,519
creates a lot of complications because

379
00:16:57,519 --> 00:17:00,320
we don't have unified software stack

380
00:17:00,320 --> 00:17:02,480
which is protect protect where the

381
00:17:02,480 --> 00:17:04,720
protection is unite right

382
00:17:04,720 --> 00:17:07,520
and of course uh as we go

383
00:17:07,520 --> 00:17:09,599
down to the stack we have a lack of

384
00:17:09,599 --> 00:17:11,919
threat intel signals because we don't

385
00:17:11,919 --> 00:17:13,919
have much visibility there we don't have

386
00:17:13,919 --> 00:17:17,359
much data we don't have a much uh

387
00:17:17,359 --> 00:17:20,160
interfaces to actually produce such of

388
00:17:20,160 --> 00:17:23,919
the data for uh investigations for nsx

389
00:17:23,919 --> 00:17:27,199
and actually protecting the users in our

390
00:17:27,199 --> 00:17:29,520
modern infrastructures and of course

391
00:17:29,520 --> 00:17:32,240
platform boot process is also very

392
00:17:32,240 --> 00:17:34,880
complicated and

393
00:17:34,880 --> 00:17:37,600
it is just

394
00:17:37,600 --> 00:17:40,160
get more and more complicated

395
00:17:40,160 --> 00:17:43,360
uh getting upper to the stack

396
00:17:43,360 --> 00:17:47,120
so and complexity is growing

397
00:17:50,320 --> 00:17:52,960
another good example of this broken

398
00:17:52,960 --> 00:17:56,640
disconnection it is

399
00:17:56,720 --> 00:17:57,600
this

400
00:17:57,600 --> 00:18:00,400
driver which is uh developed by one of

401
00:18:00,400 --> 00:18:03,440
the vendors and actually correctly sign

402
00:18:03,440 --> 00:18:05,520
it this driver introduced some of the

403
00:18:05,520 --> 00:18:08,400
vulnerabilities which is easy to explore

404
00:18:08,400 --> 00:18:10,240
easy to exploit it's been classical

405
00:18:10,240 --> 00:18:12,720
stack overflow and it can be abused for

406
00:18:12,720 --> 00:18:14,880
actually delivering malicious payload

407
00:18:14,880 --> 00:18:17,280
and bypass the secure wood and this

408
00:18:17,280 --> 00:18:22,000
caused all uh movement of

409
00:18:22,000 --> 00:18:24,720
boot hall attack vectors right so i

410
00:18:24,720 --> 00:18:25,520
think

411
00:18:25,520 --> 00:18:28,320
one of the main lessons learned sign it

412
00:18:28,320 --> 00:18:32,400
it doesn't mean trusted and to be honest

413
00:18:32,400 --> 00:18:33,919
it is a

414
00:18:33,919 --> 00:18:35,919
completely different problem where we

415
00:18:35,919 --> 00:18:38,880
have a lot of cyanide drivers which is

416
00:18:38,880 --> 00:18:41,280
contain vulnerabilities which is can

417
00:18:41,280 --> 00:18:44,000
actually be abused to bootstrap and

418
00:18:44,000 --> 00:18:46,480
deliver malicious code to some

419
00:18:46,480 --> 00:18:49,120
privileged mods like a system system

420
00:18:49,120 --> 00:18:52,080
management mode or even others and

421
00:18:52,080 --> 00:18:54,960
another example vulnerability on

422
00:18:54,960 --> 00:18:58,480
hp proliant server which is actually uh

423
00:18:58,480 --> 00:19:00,559
has

424
00:19:00,559 --> 00:19:02,720
also

425
00:19:02,720 --> 00:19:04,960
some memory corruption vulnerability and

426
00:19:04,960 --> 00:19:08,320
allows attacker to uh bypass

427
00:19:08,320 --> 00:19:11,360
secure boot integrity

428
00:19:11,360 --> 00:19:15,280
so um also that's remind me very old uh

429
00:19:15,280 --> 00:19:18,400
problem with mass 16100 which has been

430
00:19:18,400 --> 00:19:21,799
called golden key and presented uh in

431
00:19:21,799 --> 00:19:24,960
2016 at defcon basically vulnerability

432
00:19:24,960 --> 00:19:27,520
allows attacker to bypass the security

433
00:19:27,520 --> 00:19:29,760
feature by using actually sign that good

434
00:19:29,760 --> 00:19:34,080
manager which has been uh vulnerable for

435
00:19:34,080 --> 00:19:35,840
some of

436
00:19:35,840 --> 00:19:38,400
uh some of the uh

437
00:19:38,400 --> 00:19:41,039
problems and actually those are tiger to

438
00:19:41,039 --> 00:19:44,000
bypass windows security features and

439
00:19:44,000 --> 00:19:45,600
this uh

440
00:19:45,600 --> 00:19:48,880
bootloader version can be reused on this

441
00:19:48,880 --> 00:19:51,120
other operating system because it's

442
00:19:51,120 --> 00:19:53,760
signed by microsoft right and before of

443
00:19:53,760 --> 00:19:57,360
that it's been actually a huge problem

444
00:19:57,360 --> 00:20:01,039
so we blindly trust any code which is

445
00:20:01,039 --> 00:20:04,000
come from the trusted source right so if

446
00:20:04,000 --> 00:20:06,159
the code sign it and come from the

447
00:20:06,159 --> 00:20:08,080
trusted source we just

448
00:20:08,080 --> 00:20:12,159
blindly trust any uh any code like that

449
00:20:12,159 --> 00:20:15,120
and it's create a lot of complications

450
00:20:15,120 --> 00:20:17,200
from the industry because we don't have

451
00:20:17,200 --> 00:20:20,480
an ability to understand what is inside

452
00:20:20,480 --> 00:20:23,840
this cyanide coat right so basically uh

453
00:20:23,840 --> 00:20:26,400
what happening right now uh

454
00:20:26,400 --> 00:20:29,360
industry overloaded with integrity

455
00:20:29,360 --> 00:20:32,640
solutions for the firmware but

456
00:20:32,640 --> 00:20:35,200
this integrity solutions provide zero

457
00:20:35,200 --> 00:20:40,400
visibility about their alerts right

458
00:20:40,400 --> 00:20:43,919
uh but let's talk about ecosystem of

459
00:20:43,919 --> 00:20:47,520
modern x86 hardware and

460
00:20:47,520 --> 00:20:48,799
actually

461
00:20:48,799 --> 00:20:51,600
complexity of supply chain

462
00:20:51,600 --> 00:20:54,080
uh we have the hardware vendors

463
00:20:54,080 --> 00:20:55,679
which is actually developing the

464
00:20:55,679 --> 00:20:57,840
hardware and

465
00:20:57,840 --> 00:21:00,320
on top of that we have independent bios

466
00:21:00,320 --> 00:21:03,600
vendors is which is developing some sort

467
00:21:03,600 --> 00:21:05,760
of

468
00:21:06,159 --> 00:21:08,720
frameworks on top of it device

469
00:21:08,720 --> 00:21:11,280
manufacturers developing their code so

470
00:21:11,280 --> 00:21:13,120
basically we have the hardware vendors

471
00:21:13,120 --> 00:21:15,280
delivering the reference code to

472
00:21:15,280 --> 00:21:18,720
independent bias vendors and then they

473
00:21:18,720 --> 00:21:21,200
on top of that developing their code

474
00:21:21,200 --> 00:21:23,520
right so and device manufacturers

475
00:21:23,520 --> 00:21:26,080
actually uh providing less than 10

476
00:21:26,080 --> 00:21:28,159
percent of

477
00:21:28,159 --> 00:21:31,120
initial code base and original equipment

478
00:21:31,120 --> 00:21:34,400
manufacturers uh

479
00:21:34,400 --> 00:21:37,280
shipping this uh

480
00:21:37,280 --> 00:21:40,320
firmwares and hardwares i can't say

481
00:21:40,320 --> 00:21:43,520
blindly but it's a lot of blind spots in

482
00:21:43,520 --> 00:21:45,919
terms of this complexity of supply chain

483
00:21:45,919 --> 00:21:48,240
because like

484
00:21:48,240 --> 00:21:50,559
we trust what is inside reference code

485
00:21:50,559 --> 00:21:54,799
we trust what provided by ibvs and

486
00:21:54,799 --> 00:21:56,240
in the end we have a device

487
00:21:56,240 --> 00:21:58,880
manufacturers which can introduce also

488
00:21:58,880 --> 00:22:01,039
other problems

489
00:22:01,039 --> 00:22:03,440
so this complexity of the supply chain

490
00:22:03,440 --> 00:22:06,159
create a lot of

491
00:22:06,159 --> 00:22:09,520
blind spots for

492
00:22:10,559 --> 00:22:13,039
introducing known vulnerabilities or

493
00:22:13,039 --> 00:22:16,000
complicate patching uh

494
00:22:16,000 --> 00:22:18,320
introducing new vulnerabilities and

495
00:22:18,320 --> 00:22:20,080
complicate watching known

496
00:22:20,080 --> 00:22:21,600
vulnerabilities

497
00:22:21,600 --> 00:22:24,080
and this huge problem for the industry

498
00:22:24,080 --> 00:22:26,080
and to be honest complexity of modern

499
00:22:26,080 --> 00:22:28,880
firmer supply chain is only growing and

500
00:22:28,880 --> 00:22:31,679
get more complicated and

501
00:22:31,679 --> 00:22:34,559
not controlled by any single vendor

502
00:22:34,559 --> 00:22:36,960
completely

503
00:22:36,960 --> 00:22:39,679
so but let's talk about more

504
00:22:39,679 --> 00:22:41,600
how

505
00:22:41,600 --> 00:22:44,240
firmware developers and hardware

506
00:22:44,240 --> 00:22:47,120
companies looks on the identification

507
00:22:47,120 --> 00:22:49,360
such of the threats and what they are

508
00:22:49,360 --> 00:22:51,120
doing and of course here is a big

509
00:22:51,120 --> 00:22:53,440
disconnection between development teams

510
00:22:53,440 --> 00:22:55,600
architects who design and security

511
00:22:55,600 --> 00:22:58,799
features and actual implementation and

512
00:22:58,799 --> 00:23:00,640
as we can see

513
00:23:00,640 --> 00:23:03,440
basically creating the threat model just

514
00:23:03,440 --> 00:23:05,919
based on the stride and other

515
00:23:05,919 --> 00:23:07,520
frameworks for

516
00:23:07,520 --> 00:23:10,000
threat modeling it is not enough

517
00:23:10,000 --> 00:23:12,559
actually we need to understand uh what

518
00:23:12,559 --> 00:23:15,200
the attack surface uh not

519
00:23:15,200 --> 00:23:17,919
uh only today's state we need to

520
00:23:17,919 --> 00:23:20,640
understand what it will be tomorrow uh

521
00:23:20,640 --> 00:23:23,120
on the hands of the attacker just to

522
00:23:23,120 --> 00:23:25,440
predict and mitigate such of the threats

523
00:23:25,440 --> 00:23:27,760
correctly and of course

524
00:23:27,760 --> 00:23:30,240
this framework doesn't provide that

525
00:23:30,240 --> 00:23:34,159
ability and need to be

526
00:23:35,039 --> 00:23:38,799
modified for um to be more connected for

527
00:23:38,799 --> 00:23:39,600
uh

528
00:23:39,600 --> 00:23:42,400
current industry needs

529
00:23:42,400 --> 00:23:44,240
and another problem i think for the

530
00:23:44,240 --> 00:23:47,520
industry we also try to make a lot of

531
00:23:47,520 --> 00:23:50,000
security by obscurity i think actually

532
00:23:50,000 --> 00:23:52,640
open source security firmware foundation

533
00:23:52,640 --> 00:23:57,039
uh making a lot of movement to

534
00:23:57,760 --> 00:24:00,320
make more popular

535
00:24:00,320 --> 00:24:02,880
between the vendors

536
00:24:02,880 --> 00:24:05,360
development processes for open firmware

537
00:24:05,360 --> 00:24:07,279
right so we have a

538
00:24:07,279 --> 00:24:10,000
a lot of activities on open bmc we have

539
00:24:10,000 --> 00:24:12,240
a lot of activities on the core booth

540
00:24:12,240 --> 00:24:14,240
and i hope it will be more transparency

541
00:24:14,240 --> 00:24:16,480
on the firmware level in general because

542
00:24:16,480 --> 00:24:19,039
it's very important and security by

543
00:24:19,039 --> 00:24:21,919
obscurity never works right so and if we

544
00:24:21,919 --> 00:24:22,799
have a

545
00:24:22,799 --> 00:24:25,919
firmware binaries where we have stupid

546
00:24:25,919 --> 00:24:28,960
function names it doesn't remove a lot

547
00:24:28,960 --> 00:24:31,360
of other symbolic information which is

548
00:24:31,360 --> 00:24:33,520
can be analyzed by the analyst and

549
00:24:33,520 --> 00:24:35,360
understands the behavior of the function

550
00:24:35,360 --> 00:24:36,960
and of course it's not removing the

551
00:24:36,960 --> 00:24:38,640
vulnerabilities which is inside the

552
00:24:38,640 --> 00:24:41,520
binaries right so and it's just create

553
00:24:41,520 --> 00:24:43,919
much more problems and actually

554
00:24:43,919 --> 00:24:47,039
complexity of debugging of the problems

555
00:24:47,039 --> 00:24:49,679
than actual profit for protecting the

556
00:24:49,679 --> 00:24:52,159
users

557
00:24:52,159 --> 00:24:53,600
and

558
00:24:53,600 --> 00:24:55,679
also another statement basically

559
00:24:55,679 --> 00:24:57,679
security researchers are you can pilot

560
00:24:57,679 --> 00:25:00,880
the binaries and of course yes

561
00:25:00,880 --> 00:25:02,159
but

562
00:25:02,159 --> 00:25:03,840
if you think about

563
00:25:03,840 --> 00:25:04,880
current

564
00:25:04,880 --> 00:25:07,120
reverse engineering frameworks it's very

565
00:25:07,120 --> 00:25:10,320
effective and if you look it is actually

566
00:25:10,320 --> 00:25:11,440
a

567
00:25:11,440 --> 00:25:13,279
screenshot from one of the functions

568
00:25:13,279 --> 00:25:17,360
from u5 firmware dixie driver and it is

569
00:25:17,360 --> 00:25:18,400
normal

570
00:25:18,400 --> 00:25:21,120
decompilation flow right

571
00:25:21,120 --> 00:25:22,960
i would say it's

572
00:25:22,960 --> 00:25:25,919
it's okay but it's not really readable

573
00:25:25,919 --> 00:25:28,720
right so but after

574
00:25:28,720 --> 00:25:32,000
the plugin which binary team supported

575
00:25:32,000 --> 00:25:34,240
called efi explorer it's completely open

576
00:25:34,240 --> 00:25:37,039
sourced on github so if i explorer

577
00:25:37,039 --> 00:25:39,360
provides some semantic annotations and

578
00:25:39,360 --> 00:25:41,520
makes this code much readable and

579
00:25:41,520 --> 00:25:44,159
provide you some additional symbols

580
00:25:44,159 --> 00:25:45,840
based on

581
00:25:45,840 --> 00:25:49,039
constant and a lot of code context which

582
00:25:49,039 --> 00:25:52,400
is can be extracted automatically so and

583
00:25:52,400 --> 00:25:55,200
this functions and actually look pretty

584
00:25:55,200 --> 00:25:58,080
close to the original logic of

585
00:25:58,080 --> 00:26:00,400
the function in the source code and

586
00:26:00,400 --> 00:26:02,799
analyzing these functions is pretty easy

587
00:26:02,799 --> 00:26:05,039
that's mean like security by security

588
00:26:05,039 --> 00:26:08,159
doesn't work because we have a lot of

589
00:26:08,159 --> 00:26:11,679
already know that will have a lot of

590
00:26:11,679 --> 00:26:14,960
novel techniques to code similarity for

591
00:26:14,960 --> 00:26:16,080
symbols

592
00:26:16,080 --> 00:26:18,320
reconstruction a lot of other stuff

593
00:26:18,320 --> 00:26:19,679
which is

594
00:26:19,679 --> 00:26:21,760
of course providing modern reverse

595
00:26:21,760 --> 00:26:24,240
engineers a lot of new tooling and make

596
00:26:24,240 --> 00:26:27,279
their work more effective it's why we

597
00:26:27,279 --> 00:26:30,640
need to think how we can protect and

598
00:26:30,640 --> 00:26:32,799
mitigate thermal threats more

599
00:26:32,799 --> 00:26:35,679
effectively with current reality and

600
00:26:35,679 --> 00:26:38,880
don't try to come back in early 2000s

601
00:26:38,880 --> 00:26:41,760
and think about security by obscurity as

602
00:26:41,760 --> 00:26:44,559
a security feature

603
00:26:44,559 --> 00:26:47,200
also another story it is about few

604
00:26:47,200 --> 00:26:50,000
vulnerabilities which we presented

605
00:26:50,000 --> 00:26:51,679
earlier this year

606
00:26:51,679 --> 00:26:54,480
visa my colleagues

607
00:26:54,480 --> 00:26:57,679
from nvidia so basically uh they found

608
00:26:57,679 --> 00:27:00,799
few vulnerabilities in a

609
00:27:00,799 --> 00:27:04,640
dell power h server and one of them in

610
00:27:04,640 --> 00:27:08,559
crystal ridge dixie driver another in a

611
00:27:08,559 --> 00:27:11,360
platform initialization driver one it's

612
00:27:11,360 --> 00:27:13,520
actually classical stack overflow and

613
00:27:13,520 --> 00:27:16,080
another the hip overflow

614
00:27:16,080 --> 00:27:17,679
but it's already actually well

615
00:27:17,679 --> 00:27:20,240
documented in our slides from blackhead

616
00:27:20,240 --> 00:27:22,880
vegas this year and those you can find

617
00:27:22,880 --> 00:27:25,200
binary blog post explaining these

618
00:27:25,200 --> 00:27:28,960
problems but interestingly why

619
00:27:28,960 --> 00:27:31,760
this problem on these slides i want to

620
00:27:31,760 --> 00:27:36,000
show you how current state of uh modern

621
00:27:36,000 --> 00:27:37,919
exploitation for the firmware it looks

622
00:27:37,919 --> 00:27:40,159
like

623
00:27:41,600 --> 00:27:44,880
so uh first vulnerability actually it's

624
00:27:44,880 --> 00:27:46,080
just

625
00:27:46,080 --> 00:27:48,640
get some ufi variable which is can be

626
00:27:48,640 --> 00:27:51,279
controlled by the attacker attacker can

627
00:27:51,279 --> 00:27:54,799
uh write to this q5 variable and it can

628
00:27:54,799 --> 00:27:56,080
cause

629
00:27:56,080 --> 00:27:58,559
some hip overflow and corrupt the memory

630
00:27:58,559 --> 00:28:01,200
and in that attacker can lead the code

631
00:28:01,200 --> 00:28:04,480
execution so this crystal rich dixie

632
00:28:04,480 --> 00:28:07,200
driver is quite interesting because it

633
00:28:07,200 --> 00:28:09,200
is tied to the new type of the memory

634
00:28:09,200 --> 00:28:11,279
developed by intel

635
00:28:11,279 --> 00:28:12,640
and of course

636
00:28:12,640 --> 00:28:14,799
this new type of memory

637
00:28:14,799 --> 00:28:16,480
can be used

638
00:28:16,480 --> 00:28:17,760
by

639
00:28:17,760 --> 00:28:20,559
an attacker to

640
00:28:20,559 --> 00:28:22,559
actually abuse

641
00:28:22,559 --> 00:28:25,120
this vulnerability and it's been stay

642
00:28:25,120 --> 00:28:27,039
and pass quite a while

643
00:28:27,039 --> 00:28:29,679
to be honest and

644
00:28:29,679 --> 00:28:32,000
exploitation it's

645
00:28:32,000 --> 00:28:34,880
not very complicated but also which is

646
00:28:34,880 --> 00:28:38,080
more scary this vulnerability by pass

647
00:28:38,080 --> 00:28:40,240
any sort of integrity checking and the

648
00:28:40,240 --> 00:28:43,039
attacker can in run time get execution

649
00:28:43,039 --> 00:28:45,200
which will be not detected by any sort

650
00:28:45,200 --> 00:28:47,679
of health station based on the tpm

651
00:28:47,679 --> 00:28:48,880
because

652
00:28:48,880 --> 00:28:53,279
tpm pcrs can be extended in runtime

653
00:28:53,279 --> 00:28:54,880
and of course

654
00:28:54,880 --> 00:28:57,279
both of these vulnerabilities is

655
00:28:57,279 --> 00:28:58,399
actually

656
00:28:58,399 --> 00:29:01,279
providing some sort of

657
00:29:01,279 --> 00:29:02,399
context

658
00:29:02,399 --> 00:29:07,440
about how it is easy to bypass modern uh

659
00:29:07,440 --> 00:29:09,520
boot integrity process and boot

660
00:29:09,520 --> 00:29:13,200
verification process and secondly

661
00:29:13,200 --> 00:29:15,279
actually cross the security boundaries

662
00:29:15,279 --> 00:29:17,600
where we execute the code and can

663
00:29:17,600 --> 00:29:20,399
transplant to the operating system and

664
00:29:20,399 --> 00:29:21,679
attack

665
00:29:21,679 --> 00:29:24,080
from the lower stack the upper stack

666
00:29:24,080 --> 00:29:27,039
effectively but they don't even need to

667
00:29:27,039 --> 00:29:29,360
exploit this

668
00:29:29,360 --> 00:29:31,600
vulnerabilities because it's been

669
00:29:31,600 --> 00:29:35,279
another bug we found

670
00:29:36,480 --> 00:29:40,000
together with nvidia team and

671
00:29:40,000 --> 00:29:43,440
intel uh bssidft it's been a feature was

672
00:29:43,440 --> 00:29:45,760
designed to run some arbitrary and same

673
00:29:45,760 --> 00:29:50,240
cloud code uh stored in efi variable but

674
00:29:50,240 --> 00:29:52,720
of course it's intel reference code and

675
00:29:52,720 --> 00:29:55,919
this feature being actually totally

676
00:29:55,919 --> 00:29:57,440
developed for

677
00:29:57,440 --> 00:29:59,200
debugging reasons

678
00:29:59,200 --> 00:30:00,000
but

679
00:30:00,000 --> 00:30:02,480
uh in the end not all the vendors been

680
00:30:02,480 --> 00:30:04,720
effectively disabling this feature which

681
00:30:04,720 --> 00:30:06,720
is of course tied to the supply chain

682
00:30:06,720 --> 00:30:10,159
problem and can cause a lot of

683
00:30:10,159 --> 00:30:13,039
security failures in modern data centers

684
00:30:13,039 --> 00:30:15,440
it's not infrastructure

685
00:30:15,440 --> 00:30:16,159
so

686
00:30:16,159 --> 00:30:17,120
uh

687
00:30:17,120 --> 00:30:19,440
all the details about this vulnerability

688
00:30:19,440 --> 00:30:21,919
you can find in our blackhead slides and

689
00:30:21,919 --> 00:30:24,080
also binary block called attacking

690
00:30:24,080 --> 00:30:27,679
pre-fire ecosystem but in short

691
00:30:27,679 --> 00:30:29,279
this

692
00:30:29,279 --> 00:30:32,159
vulnerability allows the attacker to

693
00:30:32,159 --> 00:30:35,440
ride up to 100 kilobyte

694
00:30:35,440 --> 00:30:38,559
binary blob which is can be

695
00:30:38,559 --> 00:30:40,480
executed during the platform

696
00:30:40,480 --> 00:30:42,320
initialization phase and it's pretty

697
00:30:42,320 --> 00:30:44,480
early phase where the hardware gets

698
00:30:44,480 --> 00:30:47,679
initialized and uh system management

699
00:30:47,679 --> 00:30:50,320
mode and dixie it's not initialized yet

700
00:30:50,320 --> 00:30:53,039
so attacker have an ability to influence

701
00:30:53,039 --> 00:30:56,240
a lot on later phases of the boot

702
00:30:56,240 --> 00:30:58,080
process and

703
00:30:58,080 --> 00:31:00,720
this uh because this

704
00:31:00,720 --> 00:31:03,440
actual design feature

705
00:31:03,440 --> 00:31:06,159
it's very stable way of get the code

706
00:31:06,159 --> 00:31:08,880
execution right and it's quite scary

707
00:31:08,880 --> 00:31:11,440
such of the epoch

708
00:31:11,440 --> 00:31:13,600
and

709
00:31:13,840 --> 00:31:16,159
design problems it's actually create

710
00:31:16,159 --> 00:31:19,840
very complicated problems in in

711
00:31:19,840 --> 00:31:24,000
in detection and response for the modern

712
00:31:24,000 --> 00:31:28,240
hardware ecosystems in the data centers

713
00:31:28,240 --> 00:31:30,559
and of course the same problem it will

714
00:31:30,559 --> 00:31:33,360
not uh detected by a health attack

715
00:31:33,360 --> 00:31:38,399
station or tpm uh because uh pcrs will

716
00:31:38,399 --> 00:31:41,200
be not extended and these registers

717
00:31:41,200 --> 00:31:44,399
usually stored the hashes right so and

718
00:31:44,399 --> 00:31:45,760
basically these hashes are

719
00:31:45,760 --> 00:31:48,640
pre-calculated and any runtime

720
00:31:48,640 --> 00:31:52,559
exploitation bypass such of the

721
00:31:52,880 --> 00:31:55,919
technology easily because it just not

722
00:31:55,919 --> 00:31:58,159
been designed to detect any sort of

723
00:31:58,159 --> 00:32:00,720
exploitations like that

724
00:32:00,720 --> 00:32:02,399
and

725
00:32:02,399 --> 00:32:04,880
of course as we discussed before

726
00:32:04,880 --> 00:32:07,440
a lot of vendors don't disable this

727
00:32:07,440 --> 00:32:10,640
feature because it is being

728
00:32:10,640 --> 00:32:12,159
introduced for

729
00:32:12,159 --> 00:32:14,799
debugging purposes but interestingly

730
00:32:14,799 --> 00:32:18,080
it's been another logical bug uh caused

731
00:32:18,080 --> 00:32:20,720
an intel reference code where

732
00:32:20,720 --> 00:32:23,679
the function which need to be emulate

733
00:32:23,679 --> 00:32:25,679
physical presence of the jumper and

734
00:32:25,679 --> 00:32:29,279
returning someone's information about if

735
00:32:29,279 --> 00:32:32,000
activity of this feature of

736
00:32:32,000 --> 00:32:34,880
this ssadft it's been always returning

737
00:32:34,880 --> 00:32:38,320
true and cause some

738
00:32:38,320 --> 00:32:40,240
problems because it's been hard to

739
00:32:40,240 --> 00:32:42,960
detected it's been failure logic

740
00:32:42,960 --> 00:32:44,480
and

741
00:32:44,480 --> 00:32:46,399
as you can see it's not been this

742
00:32:46,399 --> 00:32:48,559
vulnerability not been attacking the

743
00:32:48,559 --> 00:32:50,960
single vendor it's actually caused the

744
00:32:50,960 --> 00:32:52,880
whole industry problem with a lot of

745
00:32:52,880 --> 00:32:55,200
different vendors get

746
00:32:55,200 --> 00:32:58,240
vulnerable for um

747
00:32:58,240 --> 00:33:00,320
this vulnerability and actually of

748
00:33:00,320 --> 00:33:02,080
course different vendors have a

749
00:33:02,080 --> 00:33:04,960
different patch cycles and

750
00:33:04,960 --> 00:33:08,000
all of this reflecting on uh

751
00:33:08,000 --> 00:33:12,960
ecosystem and basically uh even

752
00:33:12,960 --> 00:33:14,720
single vulnerability in the intel

753
00:33:14,720 --> 00:33:18,080
reference code can cause outage of many

754
00:33:18,080 --> 00:33:20,559
many many other platforms and we see

755
00:33:20,559 --> 00:33:23,279
here it's not only

756
00:33:23,279 --> 00:33:26,080
vendors which is

757
00:33:26,080 --> 00:33:28,080
just the usual

758
00:33:28,080 --> 00:33:30,480
mainstream enterprise vendors for the

759
00:33:30,480 --> 00:33:33,360
laptops it is actually servers it is

760
00:33:33,360 --> 00:33:35,440
critical infrastructure and network

761
00:33:35,440 --> 00:33:38,440
appliances

762
00:33:38,640 --> 00:33:41,039
so we blindly trust

763
00:33:41,039 --> 00:33:43,600
everything which is brake it and silicon

764
00:33:43,600 --> 00:33:45,440
and not only to the firmware because we

765
00:33:45,440 --> 00:33:48,080
don't have a tooling we don't have an

766
00:33:48,080 --> 00:33:52,559
ability to vidify our hardware and we

767
00:33:52,559 --> 00:33:55,519
have some sort of

768
00:33:55,519 --> 00:33:57,840
hangover from the past

769
00:33:57,840 --> 00:33:58,720
where

770
00:33:58,720 --> 00:34:02,080
uh actually we really hear the story

771
00:34:02,080 --> 00:34:05,440
about the bloomberg and supermicro also

772
00:34:05,440 --> 00:34:08,639
counter fire device that is not rare and

773
00:34:08,639 --> 00:34:10,719
f-secure laps actually provide been

774
00:34:10,719 --> 00:34:14,639
providing very interesting story about

775
00:34:14,639 --> 00:34:18,719
fake cisco appliances with uh actual uh

776
00:34:18,719 --> 00:34:22,639
backdoors on it so i think uh it's a lot

777
00:34:22,639 --> 00:34:25,918
of uh new challenges for the industry to

778
00:34:25,918 --> 00:34:28,800
fix such of the problems but i think

779
00:34:28,800 --> 00:34:32,079
we need to find the complex way how we

780
00:34:32,079 --> 00:34:35,199
can stop the modern attacker and don't

781
00:34:35,199 --> 00:34:38,000
let them hack modern infrastructures

782
00:34:38,000 --> 00:34:39,760
because it's make

783
00:34:39,760 --> 00:34:41,918
a lot of

784
00:34:41,918 --> 00:34:44,320
it's gives them too much power to

785
00:34:44,320 --> 00:34:46,879
influence in uh

786
00:34:46,879 --> 00:34:49,760
in our companies and actually our lives

787
00:34:49,760 --> 00:34:52,159
and this is my thoughts and thank you

788
00:34:52,159 --> 00:34:53,280
very much

789
00:34:53,280 --> 00:34:56,560
for uh spending some time at today's

790
00:34:56,560 --> 00:35:00,400
morning and i wish you the

791
00:35:00,400 --> 00:35:03,920
happy thing on 2021 i see a lot of

792
00:35:03,920 --> 00:35:06,000
interesting topics in the agenda and

793
00:35:06,000 --> 00:35:08,160
it's been big pleasure for me to be on

794
00:35:08,160 --> 00:35:10,880
the stage again thank you very much

795
00:35:10,880 --> 00:35:12,800
bye-bye

796
00:35:12,800 --> 00:35:14,720
thank you very much alex for the

797
00:35:14,720 --> 00:35:16,880
insightful keynote

798
00:35:16,880 --> 00:35:18,560
all q and a with our speakers will be

799
00:35:18,560 --> 00:35:20,880
done by this chord so make sure you get

800
00:35:20,880 --> 00:35:21,839
on it

801
00:35:21,839 --> 00:35:24,560
and that's it for singcon 2021 keynote

802
00:35:24,560 --> 00:35:27,599
segment starting at 11 30 we will be

803
00:35:27,599 --> 00:35:30,400
starting our three tracks our main stage

804
00:35:30,400 --> 00:35:33,200
workshops and open biz contract

805
00:35:33,200 --> 00:35:36,680
see you all then

