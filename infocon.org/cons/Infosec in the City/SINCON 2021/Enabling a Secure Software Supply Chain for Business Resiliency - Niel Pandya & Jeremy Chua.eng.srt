1
00:00:05,040 --> 00:00:06,640
a very good afternoon everyone thank you

2
00:00:06,640 --> 00:00:07,919
for joining us on this session on

3
00:00:07,919 --> 00:00:10,320
enabling a secure software supply chain

4
00:00:10,320 --> 00:00:12,480
for business resiliency my name is neil

5
00:00:12,480 --> 00:00:14,719
pandya and i'm the cyber security lead

6
00:00:14,719 --> 00:00:17,199
for for microfocus here at apj i'm

7
00:00:17,199 --> 00:00:18,880
joined today with my esteemed colleague

8
00:00:18,880 --> 00:00:20,640
jeremy chua security architect here at

9
00:00:20,640 --> 00:00:22,640
microfocus covering all areas of our

10
00:00:22,640 --> 00:00:24,720
security portfolio a little bit about

11
00:00:24,720 --> 00:00:26,400
cyber res cyber rest is a line of

12
00:00:26,400 --> 00:00:28,560
business under micro focus cyber rest is

13
00:00:28,560 --> 00:00:29,199
a

14
00:00:29,199 --> 00:00:30,800
line of business that we we set up for

15
00:00:30,800 --> 00:00:33,200
this fy so a year ago we had some

16
00:00:33,200 --> 00:00:35,200
investment into our security portfolio

17
00:00:35,200 --> 00:00:37,520
uh where we where we rebranded a lot of

18
00:00:37,520 --> 00:00:38,559
the uh

19
00:00:38,559 --> 00:00:40,480
the capabilities that we have and

20
00:00:40,480 --> 00:00:42,399
invested very heavily in r d for our

21
00:00:42,399 --> 00:00:44,399
security portfolio so with that let's

22
00:00:44,399 --> 00:00:46,320
get started when we look at the supply

23
00:00:46,320 --> 00:00:47,760
chain the software supply chain there

24
00:00:47,760 --> 00:00:49,920
are many key components to the software

25
00:00:49,920 --> 00:00:51,520
supply chain and let's have a look at

26
00:00:51,520 --> 00:00:54,239
how we look at protecting every single

27
00:00:54,239 --> 00:00:55,920
piece of that supply chain

28
00:00:55,920 --> 00:00:58,559
so when we look at the supply chain we

29
00:00:58,559 --> 00:01:00,960
start off by looking at how we

30
00:01:00,960 --> 00:01:03,520
actually enroll uh developers into our

31
00:01:03,520 --> 00:01:05,360
network and give them access to resource

32
00:01:05,360 --> 00:01:07,840
and services that's first thing we hire

33
00:01:07,840 --> 00:01:10,080
a contractor or or somebody from the

34
00:01:10,080 --> 00:01:11,680
development team to actually develop

35
00:01:11,680 --> 00:01:12,880
code for us the first thing they need to

36
00:01:12,880 --> 00:01:14,479
do is to access resources within the

37
00:01:14,479 --> 00:01:16,560
network next thing they do is we

38
00:01:16,560 --> 00:01:18,960
provision them a workstation now the

39
00:01:18,960 --> 00:01:21,280
question here is is that is the uh the

40
00:01:21,280 --> 00:01:23,840
workstation itself secure to have risk

41
00:01:23,840 --> 00:01:25,680
scan for any vulnerabilities next thing

42
00:01:25,680 --> 00:01:26,400
we do

43
00:01:26,400 --> 00:01:28,000
is that a developer will install some

44
00:01:28,000 --> 00:01:29,840
tools for software development that's

45
00:01:29,840 --> 00:01:31,680
what we hire them to do and this is

46
00:01:31,680 --> 00:01:32,880
their role so they'll need to install

47
00:01:32,880 --> 00:01:34,720
some tools to help them with the the

48
00:01:34,720 --> 00:01:36,320
project in hand

49
00:01:36,320 --> 00:01:37,439
the kind of things that we want to look

50
00:01:37,439 --> 00:01:39,680
for here is is there any malware within

51
00:01:39,680 --> 00:01:41,280
the software that are installing is it

52
00:01:41,280 --> 00:01:42,720
freeware what about my software

53
00:01:42,720 --> 00:01:44,399
compliance it's a number of things that

54
00:01:44,399 --> 00:01:46,479
we want to check for here the next part

55
00:01:46,479 --> 00:01:48,720
of this is to keep the job in hand the

56
00:01:48,720 --> 00:01:50,320
developer needs to write application

57
00:01:50,320 --> 00:01:52,560
code so when the code is being written

58
00:01:52,560 --> 00:01:54,159
how do we test the code for any

59
00:01:54,159 --> 00:01:56,880
vulnerabilities

60
00:01:57,119 --> 00:01:58,799
once the code's been written it needs to

61
00:01:58,799 --> 00:02:00,799
be saved to a code repository so again

62
00:02:00,799 --> 00:02:02,399
what we want to do is to understand how

63
00:02:02,399 --> 00:02:04,399
the code repository is being accessed

64
00:02:04,399 --> 00:02:06,079
and whether it's been accessed in a

65
00:02:06,079 --> 00:02:08,399
normal fashion as as we understand the

66
00:02:08,399 --> 00:02:10,479
behavior of the developer

67
00:02:10,479 --> 00:02:12,400
then once the code is ready it moves

68
00:02:12,400 --> 00:02:14,400
into a another environment maybe further

69
00:02:14,400 --> 00:02:16,319
testing like a uat or a system

70
00:02:16,319 --> 00:02:17,440
integration

71
00:02:17,440 --> 00:02:19,440
once the code moves into further

72
00:02:19,440 --> 00:02:22,319
downstream testing it finally moves into

73
00:02:22,319 --> 00:02:24,160
a production environment and

74
00:02:24,160 --> 00:02:26,560
goes live what we're doing here is we're

75
00:02:26,560 --> 00:02:29,280
trying to understand the maturity of our

76
00:02:29,280 --> 00:02:31,760
software security assurance now there

77
00:02:31,760 --> 00:02:33,599
are key components to this and when we

78
00:02:33,599 --> 00:02:34,959
look at some of the vulnerabilities

79
00:02:34,959 --> 00:02:37,040
associated here we start to address them

80
00:02:37,040 --> 00:02:38,640
with some of the technology that we have

81
00:02:38,640 --> 00:02:40,640
so here at microfocus within our

82
00:02:40,640 --> 00:02:42,800
sideways portfolio we have an identity

83
00:02:42,800 --> 00:02:45,120
access management solution net iq that

84
00:02:45,120 --> 00:02:47,360
helps us understand how the developer is

85
00:02:47,360 --> 00:02:49,280
accessing different types of resources

86
00:02:49,280 --> 00:02:51,840
and services within my network and this

87
00:02:51,840 --> 00:02:54,000
is where we start to apply controls

88
00:02:54,000 --> 00:02:56,239
around access and have visibility on

89
00:02:56,239 --> 00:02:57,760
what's being accessed and how they're

90
00:02:57,760 --> 00:02:59,519
accessing that and also resources as

91
00:02:59,519 --> 00:03:02,560
well as different types of applications

92
00:03:02,560 --> 00:03:05,680
when we move into uh scanning for uh any

93
00:03:05,680 --> 00:03:08,400
vulnerabilities within our uh platforms

94
00:03:08,400 --> 00:03:10,560
that are being used by the developer to

95
00:03:10,560 --> 00:03:12,640
to build code on we can actually scan

96
00:03:12,640 --> 00:03:14,159
those assets those platforms for any

97
00:03:14,159 --> 00:03:16,400
vulnerabilities and we have um within

98
00:03:16,400 --> 00:03:18,480
our item portfolio

99
00:03:18,480 --> 00:03:20,080
we have technology which stands for

100
00:03:20,080 --> 00:03:21,760
non-vulnerabilities we can do automated

101
00:03:21,760 --> 00:03:24,239
patching as well very very important to

102
00:03:24,239 --> 00:03:25,360
have that

103
00:03:25,360 --> 00:03:27,599
capability in place

104
00:03:27,599 --> 00:03:28,879
next thing we do

105
00:03:28,879 --> 00:03:31,200
is we actually uh

106
00:03:31,200 --> 00:03:33,280
control how a developer would install

107
00:03:33,280 --> 00:03:34,959
software on their workstation for

108
00:03:34,959 --> 00:03:36,959
example using mfa and otp every time

109
00:03:36,959 --> 00:03:39,120
some software is downloaded we actually

110
00:03:39,120 --> 00:03:42,000
challenge the user for an mfa or an otp

111
00:03:42,000 --> 00:03:44,080
and this way we ensure that it is the

112
00:03:44,080 --> 00:03:46,000
developer who's actually installing the

113
00:03:46,000 --> 00:03:47,680
software on their workstation and it's

114
00:03:47,680 --> 00:03:48,879
not

115
00:03:48,879 --> 00:03:50,560
someone else doing that

116
00:03:50,560 --> 00:03:52,400
and as the code starts to get developed

117
00:03:52,400 --> 00:03:53,760
we start to test the code for

118
00:03:53,760 --> 00:03:55,599
vulnerabilities my colleague jeremy will

119
00:03:55,599 --> 00:03:57,280
talk a lot more about fortifying we'll

120
00:03:57,280 --> 00:03:59,040
go into a bit more detail about

121
00:03:59,040 --> 00:04:00,640
applications code

122
00:04:00,640 --> 00:04:02,480
application security testing and how we

123
00:04:02,480 --> 00:04:03,920
can approach that

124
00:04:03,920 --> 00:04:06,400
so here the code is being tested and

125
00:04:06,400 --> 00:04:07,840
scanned for any vulnerabilities any

126
00:04:07,840 --> 00:04:09,599
known vulnerabilities and we can we'll

127
00:04:09,599 --> 00:04:11,200
talk a bit more about that in in the

128
00:04:11,200 --> 00:04:12,720
follow-up sessions uh for upside by

129
00:04:12,720 --> 00:04:14,319
journal

130
00:04:14,319 --> 00:04:15,920
the code's been

131
00:04:15,920 --> 00:04:17,839
written and it's being said to a code

132
00:04:17,839 --> 00:04:21,199
repository now we have ueba technologies

133
00:04:21,199 --> 00:04:23,440
user behavior analytic technologies

134
00:04:23,440 --> 00:04:25,520
capabilities which understands and has a

135
00:04:25,520 --> 00:04:28,479
look at how a developer might be reading

136
00:04:28,479 --> 00:04:30,400
code from a repository as well as

137
00:04:30,400 --> 00:04:32,960
writing cultural repository and we

138
00:04:32,960 --> 00:04:34,960
benchmark how that that particular

139
00:04:34,960 --> 00:04:38,240
developer is behaving and we look at

140
00:04:38,240 --> 00:04:40,560
new behavior patterns and we compare

141
00:04:40,560 --> 00:04:42,240
them to existing patterns to see if

142
00:04:42,240 --> 00:04:44,479
there is any anomaly and how how much of

143
00:04:44,479 --> 00:04:46,479
a deviation is that from the normal

144
00:04:46,479 --> 00:04:48,479
behavior we also compared that

145
00:04:48,479 --> 00:04:50,320
particular developer with their peers as

146
00:04:50,320 --> 00:04:52,720
well so who else has access to this code

147
00:04:52,720 --> 00:04:55,600
repository or certain projects within

148
00:04:55,600 --> 00:04:57,759
those code repositories as well this

149
00:04:57,759 --> 00:04:59,919
gives an indication if there's any

150
00:04:59,919 --> 00:05:01,919
insider breach or somebody who's trying

151
00:05:01,919 --> 00:05:04,160
to inject uh vulnerabilities into the

152
00:05:04,160 --> 00:05:06,240
code that already exists in my code

153
00:05:06,240 --> 00:05:08,400
repository for example if i'm reading

154
00:05:08,400 --> 00:05:10,080
more code from the code repository than

155
00:05:10,080 --> 00:05:11,680
writing there might be something in

156
00:05:11,680 --> 00:05:13,440
there that that we need to look at if

157
00:05:13,440 --> 00:05:14,400
i'm

158
00:05:14,400 --> 00:05:16,880
writing more code to a code repository

159
00:05:16,880 --> 00:05:18,160
than reading there might be some

160
00:05:18,160 --> 00:05:19,360
vulnerabilities that i'm trying to

161
00:05:19,360 --> 00:05:22,320
inject into that into those projects

162
00:05:22,320 --> 00:05:24,639
as the code gets tested removed

163
00:05:24,639 --> 00:05:26,720
using our adm portfolio which is our

164
00:05:26,720 --> 00:05:28,560
application delivery management and

165
00:05:28,560 --> 00:05:32,160
fortify we can move the code into into

166
00:05:32,160 --> 00:05:33,680
other environments downstream for

167
00:05:33,680 --> 00:05:35,440
further testing like uat or system

168
00:05:35,440 --> 00:05:37,120
integration but we do this in a very

169
00:05:37,120 --> 00:05:39,680
very controlled manner and finally the

170
00:05:39,680 --> 00:05:41,680
code moves into a production and goes

171
00:05:41,680 --> 00:05:44,080
live and again we're using our adm and

172
00:05:44,080 --> 00:05:46,000
fortify to help us enable some of that

173
00:05:46,000 --> 00:05:47,039
as well

174
00:05:47,039 --> 00:05:50,080
what this means is once we do this in

175
00:05:50,080 --> 00:05:52,479
his completeness we actually arrive at a

176
00:05:52,479 --> 00:05:55,039
at a very strong compliance posture the

177
00:05:55,039 --> 00:05:57,199
software is delivered with a higher

178
00:05:57,199 --> 00:05:58,560
security assurance

179
00:05:58,560 --> 00:06:00,560
and we've also mitigated the risk from a

180
00:06:00,560 --> 00:06:01,840
number of different

181
00:06:01,840 --> 00:06:03,520
levels

182
00:06:03,520 --> 00:06:04,960
when we talk about the software supply

183
00:06:04,960 --> 00:06:07,039
chain it's very important to understand

184
00:06:07,039 --> 00:06:08,560
that although we talk about the

185
00:06:08,560 --> 00:06:11,520
microfocus platform being able to fully

186
00:06:11,520 --> 00:06:13,919
uh secure the software supply chain we

187
00:06:13,919 --> 00:06:15,600
can integrate this with whatever secure

188
00:06:15,600 --> 00:06:18,080
technology you're using for your iem

189
00:06:18,080 --> 00:06:20,240
or your user behavior analytics or your

190
00:06:20,240 --> 00:06:22,479
network monitoring it doesn't have to be

191
00:06:22,479 --> 00:06:24,240
on the complete micro focus platform we

192
00:06:24,240 --> 00:06:25,919
can integrate with whatever you have

193
00:06:25,919 --> 00:06:27,520
with that i'm going to hand over to my

194
00:06:27,520 --> 00:06:29,520
esteemed colleague jeremy to talk us

195
00:06:29,520 --> 00:06:32,080
through application security testing

196
00:06:32,080 --> 00:06:35,280
jeremy over to you yes thanks neil so

197
00:06:35,280 --> 00:06:37,199
good afternoon everyone my name is

198
00:06:37,199 --> 00:06:39,120
jeremy so i'm the security architect as

199
00:06:39,120 --> 00:06:40,639
well as the resource manager for

200
00:06:40,639 --> 00:06:43,600
southeast asia region so in addition to

201
00:06:43,600 --> 00:06:45,919
what neil has just mentioned for the

202
00:06:45,919 --> 00:06:48,080
software supply chain so i'll really

203
00:06:48,080 --> 00:06:50,560
provide a deep dive into the software

204
00:06:50,560 --> 00:06:52,639
security assurance for

205
00:06:52,639 --> 00:06:54,400
in general most

206
00:06:54,400 --> 00:06:56,160
enterprises

207
00:06:56,160 --> 00:06:56,880
so

208
00:06:56,880 --> 00:06:59,199
um it's surprisingly that when we talk

209
00:06:59,199 --> 00:07:02,400
to customers so a lot of them are still

210
00:07:02,400 --> 00:07:04,479
running running in silos so what do i

211
00:07:04,479 --> 00:07:06,800
mean in silos so

212
00:07:06,800 --> 00:07:08,960
um they are running the software

213
00:07:08,960 --> 00:07:12,080
development and security is not built

214
00:07:12,080 --> 00:07:14,080
into or integrate into their software

215
00:07:14,080 --> 00:07:16,560
development lifecycle right but let me

216
00:07:16,560 --> 00:07:18,639
let us take a step back to understand

217
00:07:18,639 --> 00:07:20,880
that how software developments life

218
00:07:20,880 --> 00:07:23,680
cycle or methodology evolve so five to

219
00:07:23,680 --> 00:07:26,080
ten years ago we are talking about a

220
00:07:26,080 --> 00:07:28,240
waterfall model where it's very very

221
00:07:28,240 --> 00:07:31,440
rigid and structured right so in general

222
00:07:31,440 --> 00:07:33,199
you'll create some fiction where we

223
00:07:33,199 --> 00:07:35,520
actually integrate security activities

224
00:07:35,520 --> 00:07:37,680
in it right so pretty much the silo

225
00:07:37,680 --> 00:07:40,960
comes from uh doing security testing

226
00:07:40,960 --> 00:07:41,840
right

227
00:07:41,840 --> 00:07:44,720
pre-production so what this means so out

228
00:07:44,720 --> 00:07:48,160
of three months or six months of works

229
00:07:48,160 --> 00:07:49,520
it just

230
00:07:49,520 --> 00:07:51,599
performs a security testing at the

231
00:07:51,599 --> 00:07:53,680
pre-production phase so what this means

232
00:07:53,680 --> 00:07:56,240
it has a very short window time frame

233
00:07:56,240 --> 00:07:58,319
right for the developers and security

234
00:07:58,319 --> 00:08:00,479
team to work together right to resolve

235
00:08:00,479 --> 00:08:03,039
or mitigate those issues this creates a

236
00:08:03,039 --> 00:08:05,680
lot a lot of friction and

237
00:08:05,680 --> 00:08:07,680
induce a lot of inefficiencies and

238
00:08:07,680 --> 00:08:10,639
productivity so the ramification of it

239
00:08:10,639 --> 00:08:13,520
is to release application with much more

240
00:08:13,520 --> 00:08:15,199
probabilities in them

241
00:08:15,199 --> 00:08:16,960
right so practitioners in the field

242
00:08:16,960 --> 00:08:19,199
understand right so what they really

243
00:08:19,199 --> 00:08:21,520
want to do is to build insecurity into

244
00:08:21,520 --> 00:08:24,160
those uh software development life cycle

245
00:08:24,160 --> 00:08:26,479
phases right so i'll not delve into

246
00:08:26,479 --> 00:08:28,639
really those uh mindshare but i really

247
00:08:28,639 --> 00:08:31,120
want to focus on the security part

248
00:08:31,120 --> 00:08:33,279
right so today you heard a lot of terms

249
00:08:33,279 --> 00:08:36,000
like agile or website ops

250
00:08:36,000 --> 00:08:38,799
so the main objective of it is to shift

251
00:08:38,799 --> 00:08:41,760
left right so just giving

252
00:08:41,760 --> 00:08:43,519
mind on these three things we want to

253
00:08:43,519 --> 00:08:45,440
test it early we want to test it

254
00:08:45,440 --> 00:08:48,160
frequently and we want to test it fast

255
00:08:48,160 --> 00:08:49,920
i'll read i'll talk about the

256
00:08:49,920 --> 00:08:52,080
individuals into the various phases of

257
00:08:52,080 --> 00:08:54,480
the software development lifecycle

258
00:08:54,480 --> 00:08:57,120
right so in the very early phases of

259
00:08:57,120 --> 00:08:58,959
software development lifecycle that's

260
00:08:58,959 --> 00:09:01,839
where the security requirements will be

261
00:09:01,839 --> 00:09:04,000
part of the software

262
00:09:04,000 --> 00:09:06,320
design requirements right so

263
00:09:06,320 --> 00:09:08,320
what we want is to have a secure by

264
00:09:08,320 --> 00:09:10,959
design right so the requirements will

265
00:09:10,959 --> 00:09:13,360
then translate to some testing testing

266
00:09:13,360 --> 00:09:15,040
where we actually also include uh

267
00:09:15,040 --> 00:09:16,720
security testing

268
00:09:16,720 --> 00:09:19,120
as part of the requirements and testing

269
00:09:19,120 --> 00:09:20,240
phase

270
00:09:20,240 --> 00:09:23,200
right so after which we will have the

271
00:09:23,200 --> 00:09:25,200
coding or implementation phase where

272
00:09:25,200 --> 00:09:27,600
developers will start writing their code

273
00:09:27,600 --> 00:09:29,200
they will uh

274
00:09:29,200 --> 00:09:31,600
also leverage open source frameworks or

275
00:09:31,600 --> 00:09:33,360
components as part of their development

276
00:09:33,360 --> 00:09:35,440
life cycle

277
00:09:35,440 --> 00:09:37,440
for english uh if you are there if they

278
00:09:37,440 --> 00:09:39,920
are on arial basically uh you'll be a

279
00:09:39,920 --> 00:09:43,519
buy release print so they'll do uh

280
00:09:43,519 --> 00:09:46,160
talk about their features and do their

281
00:09:46,160 --> 00:09:48,320
testing bi-weekly

282
00:09:48,320 --> 00:09:50,080
and followed by production you know

283
00:09:50,080 --> 00:09:51,279
where they actually release their

284
00:09:51,279 --> 00:09:53,680
software so moving back to the coding or

285
00:09:53,680 --> 00:09:56,160
implementation phase this is the point

286
00:09:56,160 --> 00:09:58,640
where we really want to scan the source

287
00:09:58,640 --> 00:10:01,279
code to detect or identify insecure

288
00:10:01,279 --> 00:10:02,959
coding practices

289
00:10:02,959 --> 00:10:05,200
right so this is really really at the

290
00:10:05,200 --> 00:10:07,120
early phases of the software development

291
00:10:07,120 --> 00:10:08,640
life cycle where we really want to talk

292
00:10:08,640 --> 00:10:10,640
about shift left

293
00:10:10,640 --> 00:10:12,880
right and a lot of our customers

294
00:10:12,880 --> 00:10:14,720
that we talk to are actually moving

295
00:10:14,720 --> 00:10:16,839
towards this direction especially large

296
00:10:16,839 --> 00:10:20,079
enterprises right so everything converge

297
00:10:20,079 --> 00:10:21,680
so what do we mean by converge when

298
00:10:21,680 --> 00:10:24,399
there's a time to market where

299
00:10:24,399 --> 00:10:26,000
business

300
00:10:26,000 --> 00:10:28,079
business owners really need to release

301
00:10:28,079 --> 00:10:30,240
new features into the market fast they

302
00:10:30,240 --> 00:10:32,079
really need to adopt agile or deaf

303
00:10:32,079 --> 00:10:34,240
cyclops that's where they'll move

304
00:10:34,240 --> 00:10:36,399
towards new technologies or new

305
00:10:36,399 --> 00:10:39,600
methodologies for example micro services

306
00:10:39,600 --> 00:10:42,079
as well as leverage docker

307
00:10:42,079 --> 00:10:44,320
right or kubernetes

308
00:10:44,320 --> 00:10:46,959
so during this phase i mentioned uh

309
00:10:46,959 --> 00:10:49,760
where we want to stand the source code

310
00:10:49,760 --> 00:10:51,839
right to identify potential insecure

311
00:10:51,839 --> 00:10:54,880
coding practices we also want to scan

312
00:10:54,880 --> 00:10:57,519
the open source library to identify

313
00:10:57,519 --> 00:10:58,959
whether the

314
00:10:58,959 --> 00:11:01,839
availability exists or whether the api

315
00:11:01,839 --> 00:11:03,120
that was used in the software

316
00:11:03,120 --> 00:11:06,000
development has a vulnerability right so

317
00:11:06,000 --> 00:11:07,440
this constitute the

318
00:11:07,440 --> 00:11:09,839
static application security testing so

319
00:11:09,839 --> 00:11:11,680
this is the activity that we really want

320
00:11:11,680 --> 00:11:12,959
to integrate

321
00:11:12,959 --> 00:11:14,640
as part of the

322
00:11:14,640 --> 00:11:17,200
coding implementation phase so moving

323
00:11:17,200 --> 00:11:18,800
next where

324
00:11:18,800 --> 00:11:21,519
the application is built which resulted

325
00:11:21,519 --> 00:11:24,000
in an artifact that artifact will be

326
00:11:24,000 --> 00:11:25,360
deployed

327
00:11:25,360 --> 00:11:26,480
in the

328
00:11:26,480 --> 00:11:29,040
runtime environment right so for example

329
00:11:29,040 --> 00:11:31,440
java you'll be deployed in the java

330
00:11:31,440 --> 00:11:32,880
container like

331
00:11:32,880 --> 00:11:36,079
jboss tomcat or weblogic so for net it

332
00:11:36,079 --> 00:11:38,720
will be iis or it can be a standalone

333
00:11:38,720 --> 00:11:39,920
binary

334
00:11:39,920 --> 00:11:43,279
which is uh for net core applications

335
00:11:43,279 --> 00:11:45,040
right so once those applications are

336
00:11:45,040 --> 00:11:46,640
deployed

337
00:11:46,640 --> 00:11:48,399
what they'll do is they'll also run

338
00:11:48,399 --> 00:11:50,079
functional tests

339
00:11:50,079 --> 00:11:52,560
and they also run some node testing so

340
00:11:52,560 --> 00:11:54,480
for this phase what we want to do is we

341
00:11:54,480 --> 00:11:56,560
want to integrate dynamic application

342
00:11:56,560 --> 00:11:59,440
security testing as part of the software

343
00:11:59,440 --> 00:12:02,160
development life cycle so dynamic

344
00:12:02,160 --> 00:12:04,639
application security testing can be akin

345
00:12:04,639 --> 00:12:05,839
to like

346
00:12:05,839 --> 00:12:08,639
pan automated pen testing where a tool

347
00:12:08,639 --> 00:12:11,839
will continuously automatically scans

348
00:12:11,839 --> 00:12:14,480
the website for attack surveys and

349
00:12:14,480 --> 00:12:17,519
actually potential exploits right so

350
00:12:17,519 --> 00:12:21,279
both sasd and dsd can be integrated as

351
00:12:21,279 --> 00:12:22,320
part of

352
00:12:22,320 --> 00:12:24,160
the contiguous integration continuous

353
00:12:24,160 --> 00:12:26,240
deployment delivery pipeline right which

354
00:12:26,240 --> 00:12:28,480
i'll touch on later on

355
00:12:28,480 --> 00:12:30,320
on a high level right when we talk about

356
00:12:30,320 --> 00:12:32,079
automated platform end-to-end

357
00:12:32,079 --> 00:12:34,160
application security we do have software

358
00:12:34,160 --> 00:12:36,959
security center as well as our 45 demand

359
00:12:36,959 --> 00:12:39,200
dashboard so it creates a roadway

360
00:12:39,200 --> 00:12:41,440
success for various stakeholders

361
00:12:41,440 --> 00:12:44,639
so once user login basically

362
00:12:44,639 --> 00:12:46,240
according to their role they were able

363
00:12:46,240 --> 00:12:47,920
to have a set of permissions whether

364
00:12:47,920 --> 00:12:49,920
they can actually upload the results

365
00:12:49,920 --> 00:12:52,320
review the results or provide comments

366
00:12:52,320 --> 00:12:54,720
so this is definitely very vital in

367
00:12:54,720 --> 00:12:57,440
terms of the reputation workflow

368
00:12:57,440 --> 00:12:59,760
right so in particular what i really

369
00:12:59,760 --> 00:13:01,680
want to discuss as part of this

370
00:13:01,680 --> 00:13:03,519
automated platform

371
00:13:03,519 --> 00:13:04,880
right is

372
00:13:04,880 --> 00:13:07,200
traditionally when i talk about silos

373
00:13:07,200 --> 00:13:09,519
right in a lot of organizations how are

374
00:13:09,519 --> 00:13:11,200
those results

375
00:13:11,200 --> 00:13:14,000
being distributed to the developers

376
00:13:14,000 --> 00:13:16,320
right so a few years ago when we talked

377
00:13:16,320 --> 00:13:19,600
to many customers they are

378
00:13:19,600 --> 00:13:22,240
solution so what do i mean by that so

379
00:13:22,240 --> 00:13:24,959
for example the security teams uh all

380
00:13:24,959 --> 00:13:26,959
the developers after they perform the

381
00:13:26,959 --> 00:13:28,800
scan what they will do is they will

382
00:13:28,800 --> 00:13:31,440
actually generate a pdf report

383
00:13:31,440 --> 00:13:34,000
right there that will be distributed out

384
00:13:34,000 --> 00:13:36,160
to the various team members including

385
00:13:36,160 --> 00:13:37,839
the security team

386
00:13:37,839 --> 00:13:41,199
right that's one one very important

387
00:13:41,199 --> 00:13:43,440
problem that they are facing right if

388
00:13:43,440 --> 00:13:44,959
you're talking about one application

389
00:13:44,959 --> 00:13:46,880
just one particular scan definitely

390
00:13:46,880 --> 00:13:49,279
there's no issue right but we need a

391
00:13:49,279 --> 00:13:51,040
solution that is

392
00:13:51,040 --> 00:13:53,680
will be sustainable manageable in the

393
00:13:53,680 --> 00:13:56,079
long run because software security

394
00:13:56,079 --> 00:13:58,639
assurance it's it's it's not

395
00:13:58,639 --> 00:14:00,480
it's a journey

396
00:14:00,480 --> 00:14:02,320
right so we also need to understand the

397
00:14:02,320 --> 00:14:05,040
history so the silos theme basically

398
00:14:05,040 --> 00:14:07,440
they'll use excel files to manage those

399
00:14:07,440 --> 00:14:10,399
issues on the status right we all know

400
00:14:10,399 --> 00:14:12,079
that in the long run as more

401
00:14:12,079 --> 00:14:15,199
applications come in as more scans come

402
00:14:15,199 --> 00:14:17,680
in this will be unmanageable that's

403
00:14:17,680 --> 00:14:20,000
where a centralized managed dashboard

404
00:14:20,000 --> 00:14:22,560
will will provide a lot of benefits in

405
00:14:22,560 --> 00:14:25,199
terms of this

406
00:14:26,079 --> 00:14:28,160
so for refund demand and software

407
00:14:28,160 --> 00:14:30,320
security center basically provides

408
00:14:30,320 --> 00:14:32,880
capability that i just mentioned

409
00:14:32,880 --> 00:14:34,720
so for sasd

410
00:14:34,720 --> 00:14:36,480
we have sca basically it's called the

411
00:14:36,480 --> 00:14:39,199
static code analyzer it supports up to

412
00:14:39,199 --> 00:14:41,519
27 programming languages and more will

413
00:14:41,519 --> 00:14:43,360
be added in the future as part of our

414
00:14:43,360 --> 00:14:46,480
roadmap so we try to catch up with the

415
00:14:46,480 --> 00:14:48,560
market in terms of the new programming

416
00:14:48,560 --> 00:14:50,880
like we just are getting uh they're

417
00:14:50,880 --> 00:14:53,120
getting uh more use by a lot of

418
00:14:53,120 --> 00:14:56,000
enterprises so the most common ones that

419
00:14:56,000 --> 00:14:58,240
we see in the market are java.net those

420
00:14:58,240 --> 00:15:00,079
are the usual ones so the new ones that

421
00:15:00,079 --> 00:15:02,480
are coming in basically are typescript

422
00:15:02,480 --> 00:15:04,800
which most nodejs applications are based

423
00:15:04,800 --> 00:15:07,680
on as well as gold length

424
00:15:07,680 --> 00:15:11,279
right so um as part of the scst we also

425
00:15:11,279 --> 00:15:13,440
need to know what is the baseline uh

426
00:15:13,440 --> 00:15:15,279
standard that most organizations will be

427
00:15:15,279 --> 00:15:17,680
based on so when we talk to a lot of

428
00:15:17,680 --> 00:15:20,000
customers when we already advise them

429
00:15:20,000 --> 00:15:22,560
unless they have a specific compliance

430
00:15:22,560 --> 00:15:24,720
that they need to adhere to for example

431
00:15:24,720 --> 00:15:28,160
pci dss or gdpr so and so forth we

432
00:15:28,160 --> 00:15:30,240
usually advise or most customers will

433
00:15:30,240 --> 00:15:32,720
take up waps as part of their baseline

434
00:15:32,720 --> 00:15:35,040
standard in fact fortify support all

435
00:15:35,040 --> 00:15:37,120
those standards that we just that i just

436
00:15:37,120 --> 00:15:39,040
mentioned and not only that we support

437
00:15:39,040 --> 00:15:41,440
more categories than those standards so

438
00:15:41,440 --> 00:15:43,199
we also provide the flexibility for

439
00:15:43,199 --> 00:15:46,639
custom customers to create new new

440
00:15:46,639 --> 00:15:48,399
categories that

441
00:15:48,399 --> 00:15:50,000
they need will be useful to their

442
00:15:50,000 --> 00:15:51,519
organization or they can profile their

443
00:15:51,519 --> 00:15:53,360
applications based on those standards

444
00:15:53,360 --> 00:15:56,320
that i've discussed

445
00:15:56,560 --> 00:15:59,199
so as part of dsd we have this solution

446
00:15:59,199 --> 00:16:01,360
which is weapon spec

447
00:16:01,360 --> 00:16:03,519
it basically does the dynamic

448
00:16:03,519 --> 00:16:05,360
application security testing on a

449
00:16:05,360 --> 00:16:08,320
runtime environment so uh which is not

450
00:16:08,320 --> 00:16:10,000
enough which is agnostic to the

451
00:16:10,000 --> 00:16:12,000
programming languages so basically it

452
00:16:12,000 --> 00:16:14,079
has two phases the very first phase is

453
00:16:14,079 --> 00:16:16,320
what we call crawling or mapping out the

454
00:16:16,320 --> 00:16:19,199
attack surface so you'll send a request

455
00:16:19,199 --> 00:16:20,720
to the server

456
00:16:20,720 --> 00:16:22,800
which is a which is a base url that was

457
00:16:22,800 --> 00:16:25,600
provided and you'll crawl from there

458
00:16:25,600 --> 00:16:28,000
right to map up the attack surface so

459
00:16:28,000 --> 00:16:30,160
from there basically uh you'll identify

460
00:16:30,160 --> 00:16:32,560
what are the potential uh

461
00:16:32,560 --> 00:16:34,399
uh points that you can exploit for

462
00:16:34,399 --> 00:16:37,759
example hp haters for example uh html

463
00:16:37,759 --> 00:16:40,800
form fields or even cookies so from

464
00:16:40,800 --> 00:16:43,120
there our backend analysis engine will

465
00:16:43,120 --> 00:16:45,360
kick in for various categories

466
00:16:45,360 --> 00:16:48,800
to send malicious payload to the server

467
00:16:48,800 --> 00:16:50,480
and study the response as part of the

468
00:16:50,480 --> 00:16:52,240
audit process so from there you

469
00:16:52,240 --> 00:16:54,560
determine whether it's a true positive

470
00:16:54,560 --> 00:16:57,120
or whether export didn't happen

471
00:16:57,120 --> 00:16:59,519
so in addition to that um

472
00:16:59,519 --> 00:17:01,839
now more and more mobile applications

473
00:17:01,839 --> 00:17:04,799
are being created so in addition to

474
00:17:04,799 --> 00:17:06,240
scanning of the source code of the

475
00:17:06,240 --> 00:17:08,079
mobile application we also want to test

476
00:17:08,079 --> 00:17:11,039
test the back-end server right and

477
00:17:11,039 --> 00:17:12,959
testing the mobile app and the back-end

478
00:17:12,959 --> 00:17:15,679
server is very very different right so

479
00:17:15,679 --> 00:17:18,400
it requires a certain workflow not like

480
00:17:18,400 --> 00:17:21,039
basically a web page where we can crawl

481
00:17:21,039 --> 00:17:23,439
because basically uh

482
00:17:23,439 --> 00:17:26,400
mobile applications will be using

483
00:17:26,400 --> 00:17:28,960
restful apis to communicate with a

484
00:17:28,960 --> 00:17:31,440
back-end server right so definitely

485
00:17:31,440 --> 00:17:33,840
there are certain automated flow for

486
00:17:33,840 --> 00:17:36,160
functional testers or

487
00:17:36,160 --> 00:17:38,880
quality testers to test the workflow so

488
00:17:38,880 --> 00:17:40,559
all these can be captured as part of a

489
00:17:40,559 --> 00:17:43,520
proxy file and this proxy file can be

490
00:17:43,520 --> 00:17:46,160
loaded into web inspect to run automated

491
00:17:46,160 --> 00:17:48,320
mobile application security testing for

492
00:17:48,320 --> 00:17:50,160
the backend servers

493
00:17:50,160 --> 00:17:52,799
right in addition to that uh our 45 on

494
00:17:52,799 --> 00:17:55,919
demand also provide manual uh manual

495
00:17:55,919 --> 00:17:57,039
testing

496
00:17:57,039 --> 00:18:00,080
on top of the backend server basically

497
00:18:00,080 --> 00:18:01,200
taking the

498
00:18:01,200 --> 00:18:03,679
mobile application install on the device

499
00:18:03,679 --> 00:18:06,160
and perform manual testing on that

500
00:18:06,160 --> 00:18:07,520
so

501
00:18:07,520 --> 00:18:09,679
the next one is more on the architecture

502
00:18:09,679 --> 00:18:10,880
perspective

503
00:18:10,880 --> 00:18:12,080
right

504
00:18:12,080 --> 00:18:14,480
when application number of applications

505
00:18:14,480 --> 00:18:16,799
scale right the back-end application

506
00:18:16,799 --> 00:18:19,360
platform solution platform that we want

507
00:18:19,360 --> 00:18:21,039
to integrate in terms of application

508
00:18:21,039 --> 00:18:24,480
security must be able to scan and

509
00:18:24,480 --> 00:18:26,960
uh to queue the scan

510
00:18:26,960 --> 00:18:28,720
which is to line up the scan where more

511
00:18:28,720 --> 00:18:32,080
requests comes in or to integrate with

512
00:18:32,080 --> 00:18:34,000
other technologies for example view

513
00:18:34,000 --> 00:18:36,880
tools ci cd we have approach of a

514
00:18:36,880 --> 00:18:39,760
centralized scanning so various

515
00:18:39,760 --> 00:18:42,240
build jobs can communicate with the

516
00:18:42,240 --> 00:18:44,640
back-end sensors or scanners through a

517
00:18:44,640 --> 00:18:48,160
centralized way right so not only that

518
00:18:48,160 --> 00:18:50,080
we can also integrate with various

519
00:18:50,080 --> 00:18:53,679
bluetooth for example gradle maven

520
00:18:53,679 --> 00:18:58,000
ms field and so and so forth right uh as

521
00:18:58,000 --> 00:19:00,640
part of centralized scanning so you're

522
00:19:00,640 --> 00:19:04,240
taking scan drops and distribute to uh

523
00:19:04,240 --> 00:19:07,280
the back-end scanners as well as sensors

524
00:19:07,280 --> 00:19:09,919
right so this is more of a decapit

525
00:19:09,919 --> 00:19:12,320
architecture right and not only that it

526
00:19:12,320 --> 00:19:14,960
is pretty much easy easier to scale

527
00:19:14,960 --> 00:19:17,200
right if more demands come up basically

528
00:19:17,200 --> 00:19:19,760
you have to spin up more sensors or more

529
00:19:19,760 --> 00:19:23,360
more uh uh scanners right so we all know

530
00:19:23,360 --> 00:19:25,039
that uh in terms of this you can

531
00:19:25,039 --> 00:19:27,440
actually utilize stalker or kubernetes

532
00:19:27,440 --> 00:19:29,280
to achieve this basically you don't need

533
00:19:29,280 --> 00:19:32,320
a baboon vm a babble machine or a vm to

534
00:19:32,320 --> 00:19:34,799
create a standalone sensors so as part

535
00:19:34,799 --> 00:19:36,400
of the architecture you can utilize

536
00:19:36,400 --> 00:19:40,320
docker to spin up the scanners or

537
00:19:40,320 --> 00:19:43,039
sensors in a container on demand when a

538
00:19:43,039 --> 00:19:46,080
scan is required

539
00:19:47,120 --> 00:19:47,840
so

540
00:19:47,840 --> 00:19:50,480
as part of the sesd our technology

541
00:19:50,480 --> 00:19:52,960
partner which is sonar type they do

542
00:19:52,960 --> 00:19:55,440
provide these capabilities and all these

543
00:19:55,440 --> 00:19:57,600
that are mentioned can be integrated

544
00:19:57,600 --> 00:19:59,360
into the continuous integration

545
00:19:59,360 --> 00:20:02,320
continuous deployment delivery pipeline

546
00:20:02,320 --> 00:20:04,480
right so in addition to that we do

547
00:20:04,480 --> 00:20:07,120
provide a single unified dashboard to

548
00:20:07,120 --> 00:20:08,559
view

549
00:20:08,559 --> 00:20:11,840
the sest results and esd results in the

550
00:20:11,840 --> 00:20:15,280
software security center

551
00:20:17,200 --> 00:20:19,360
we also want to provide

552
00:20:19,360 --> 00:20:22,640
developer friendly tools that they can

553
00:20:22,640 --> 00:20:25,200
perform the scans in india

554
00:20:25,200 --> 00:20:27,360
so in particular we do support some of

555
00:20:27,360 --> 00:20:31,039
the commonly used ids like eclipse

556
00:20:31,039 --> 00:20:34,240
video studio intellij based ids so for

557
00:20:34,240 --> 00:20:37,520
example php storm and android studio

558
00:20:37,520 --> 00:20:40,400
right so i think developers are moving

559
00:20:40,400 --> 00:20:42,400
towards using visual studio code which

560
00:20:42,400 --> 00:20:44,880
we do also support

561
00:20:44,880 --> 00:20:47,280
right so in addition to that we also

562
00:20:47,280 --> 00:20:50,159
provide a real-time lightweight scanner

563
00:20:50,159 --> 00:20:52,400
basically it's the spell tracker like uh

564
00:20:52,400 --> 00:20:53,280
tool

565
00:20:53,280 --> 00:20:56,320
right for you to scan for you to as far

566
00:20:56,320 --> 00:20:58,480
as the scanner code in real time as the

567
00:20:58,480 --> 00:21:00,559
developers start the code so all these

568
00:21:00,559 --> 00:21:03,840
are provided as a plugin

569
00:21:04,320 --> 00:21:06,720
we also provide uh plugins for

570
00:21:06,720 --> 00:21:09,520
continuous integration right so as part

571
00:21:09,520 --> 00:21:11,520
of your build pipeline you can integrate

572
00:21:11,520 --> 00:21:15,200
uh scse and dsd into the pipeline as

573
00:21:15,200 --> 00:21:17,840
well so some of the plug-ready plug-ins

574
00:21:17,840 --> 00:21:19,120
that we do have

575
00:21:19,120 --> 00:21:22,400
uh would be bamboo jenkins uh

576
00:21:22,400 --> 00:21:24,400
devops

577
00:21:24,400 --> 00:21:25,760
for those that we don't support don't

578
00:21:25,760 --> 00:21:29,280
worry about that we do provide some

579
00:21:29,280 --> 00:21:31,840
command line approach or we do provide a

580
00:21:31,840 --> 00:21:33,919
wizard for you to generate script so

581
00:21:33,919 --> 00:21:35,520
basically you can trigger the script as

582
00:21:35,520 --> 00:21:37,840
part of your pipeline to trigger the

583
00:21:37,840 --> 00:21:40,158
scan

584
00:21:40,960 --> 00:21:43,120
in addition to that right

585
00:21:43,120 --> 00:21:44,400
we want to know

586
00:21:44,400 --> 00:21:47,360
uh to scan by commit right so we do

587
00:21:47,360 --> 00:21:49,760
provide github actions they can perform

588
00:21:49,760 --> 00:21:52,480
that as well right so

589
00:21:52,480 --> 00:21:54,159
take a look uh

590
00:21:54,159 --> 00:21:56,720
at our github repository or the github

591
00:21:56,720 --> 00:21:58,960
page we do have some samples on that as

592
00:21:58,960 --> 00:22:01,200
well

593
00:22:01,280 --> 00:22:03,440
so like i mentioned uh a lot of

594
00:22:03,440 --> 00:22:05,919
organizations they want to have that

595
00:22:05,919 --> 00:22:08,720
speed but without uh

596
00:22:08,720 --> 00:22:11,120
the lack of security right so we do

597
00:22:11,120 --> 00:22:13,760
provide uh various type of scans that

598
00:22:13,760 --> 00:22:15,840
you can perform for example commit scan

599
00:22:15,840 --> 00:22:18,159
so when developers uh commit their code

600
00:22:18,159 --> 00:22:19,919
you'll trigger the scan right it's a

601
00:22:19,919 --> 00:22:22,000
matter of just a configuration we also

602
00:22:22,000 --> 00:22:24,799
have speed down right so for the

603
00:22:24,799 --> 00:22:27,360
organizations to adjust the speed and

604
00:22:27,360 --> 00:22:28,720
the quality of the results that they

605
00:22:28,720 --> 00:22:29,520
bought

606
00:22:29,520 --> 00:22:30,799
right so

607
00:22:30,799 --> 00:22:33,120
in all we do provide the breadth and

608
00:22:33,120 --> 00:22:35,440
depth we also provide the flexibility

609
00:22:35,440 --> 00:22:37,760
for our customers for them to embark on

610
00:22:37,760 --> 00:22:39,600
the journey in terms of the application

611
00:22:39,600 --> 00:22:42,240
security

612
00:22:43,679 --> 00:22:45,919
and not only that so um

613
00:22:45,919 --> 00:22:47,440
most of the challenge when we talk to

614
00:22:47,440 --> 00:22:49,520
customers they do have is

615
00:22:49,520 --> 00:22:52,000
as more applications get scanned as more

616
00:22:52,000 --> 00:22:53,919
more and more applications get scanned

617
00:22:53,919 --> 00:22:55,760
right the number of issues that they

618
00:22:55,760 --> 00:22:58,559
need to review is humongous

619
00:22:58,559 --> 00:23:02,320
right so fortify does provide um

620
00:23:02,320 --> 00:23:04,880
a solution called audit assistant so

621
00:23:04,880 --> 00:23:07,360
it's a machine learning based

622
00:23:07,360 --> 00:23:09,760
auditing solution right where the

623
00:23:09,760 --> 00:23:12,240
results from software security center or

624
00:23:12,240 --> 00:23:14,799
from our 45 demand will be submitted to

625
00:23:14,799 --> 00:23:16,799
audi assistant

626
00:23:16,799 --> 00:23:17,679
and

627
00:23:17,679 --> 00:23:20,480
true machine learning algorithms

628
00:23:20,480 --> 00:23:23,039
depictable predictable the predicted

629
00:23:23,039 --> 00:23:25,039
results are actually returned right

630
00:23:25,039 --> 00:23:27,919
putting a threshold or a verdict on the

631
00:23:27,919 --> 00:23:30,000
results whether it's a true positive or

632
00:23:30,000 --> 00:23:32,720
false positive right the whole of our

633
00:23:32,720 --> 00:23:35,520
fod for the final demand platform

634
00:23:35,520 --> 00:23:38,640
is using our assistant so we have years

635
00:23:38,640 --> 00:23:41,520
and years and tons of results as a ways

636
00:23:41,520 --> 00:23:45,279
of learning with our algorithm

637
00:23:45,279 --> 00:23:48,480
so this actually reduce a lot of time

638
00:23:48,480 --> 00:23:51,279
right when security teams need to really

639
00:23:51,279 --> 00:23:52,400
review

640
00:23:52,400 --> 00:23:54,400
a lot of issues under a short amount of

641
00:23:54,400 --> 00:23:57,600
time right so this also let them focus

642
00:23:57,600 --> 00:24:00,799
on more critical projects so for less

643
00:24:00,799 --> 00:24:02,559
critical projects they can actually use

644
00:24:02,559 --> 00:24:06,480
audit assistance for that matter

645
00:24:07,200 --> 00:24:10,159
in terms of reporting and management so

646
00:24:10,159 --> 00:24:13,120
both software security center and 45

647
00:24:13,120 --> 00:24:17,520
demand provide the features to report uh

648
00:24:17,520 --> 00:24:20,159
to generate reports uh those that i have

649
00:24:20,159 --> 00:24:21,840
mentioned earlier for example who are

650
00:24:21,840 --> 00:24:25,760
stopped and sent stop 25 pci dss gdpr

651
00:24:25,760 --> 00:24:29,679
iso 27001 etc right the dashboard also

652
00:24:29,679 --> 00:24:32,480
provide some key trending metrics for

653
00:24:32,480 --> 00:24:34,559
example the average days to remediation

654
00:24:34,559 --> 00:24:36,880
the average days to audit

655
00:24:36,880 --> 00:24:38,799
right so these are some

656
00:24:38,799 --> 00:24:40,880
important information for the management

657
00:24:40,880 --> 00:24:43,360
to know what is the progress in terms of

658
00:24:43,360 --> 00:24:46,000
their application security assurance

659
00:24:46,000 --> 00:24:47,360
journey

660
00:24:47,360 --> 00:24:49,520
so let me give you a typical example

661
00:24:49,520 --> 00:24:52,000
why managing the issues is very

662
00:24:52,000 --> 00:24:54,400
important so for example i do have a

663
00:24:54,400 --> 00:24:56,480
development team you know on the very

664
00:24:56,480 --> 00:24:58,400
first scan which is the baseline scan

665
00:24:58,400 --> 00:25:00,320
there are a lot of cross-site scripting

666
00:25:00,320 --> 00:25:03,279
issues being reported right generally uh

667
00:25:03,279 --> 00:25:05,200
when developers get trained on secure

668
00:25:05,200 --> 00:25:07,600
coding right the number of issues being

669
00:25:07,600 --> 00:25:10,080
remediated uh will

670
00:25:10,080 --> 00:25:11,760
be reduced and not only that they pick

671
00:25:11,760 --> 00:25:13,360
up the habit

672
00:25:13,360 --> 00:25:16,240
of doing secure coding so generally

673
00:25:16,240 --> 00:25:17,600
you'll see a

674
00:25:17,600 --> 00:25:19,760
reduce in the number of issues for that

675
00:25:19,760 --> 00:25:22,559
category right for example

676
00:25:22,559 --> 00:25:24,000
right but

677
00:25:24,000 --> 00:25:26,720
once all these issues or the trending

678
00:25:26,720 --> 00:25:28,720
metrics are being displayed you'll

679
00:25:28,720 --> 00:25:31,200
notice that whether this actually takes

680
00:25:31,200 --> 00:25:33,840
place right you'll see the progress or

681
00:25:33,840 --> 00:25:36,240
in general the security posture for the

682
00:25:36,240 --> 00:25:38,720
application or that um

683
00:25:38,720 --> 00:25:40,720
or for your organization

684
00:25:40,720 --> 00:25:41,600
right

685
00:25:41,600 --> 00:25:43,520
and one very important thing that i want

686
00:25:43,520 --> 00:25:45,279
to mention is

687
00:25:45,279 --> 00:25:47,440
regardless of how many times you scan

688
00:25:47,440 --> 00:25:49,919
right how frequent you scan how fast you

689
00:25:49,919 --> 00:25:51,360
scan

690
00:25:51,360 --> 00:25:53,520
it doesn't it doesn't mean that the

691
00:25:53,520 --> 00:25:55,520
application will be secure

692
00:25:55,520 --> 00:25:57,600
the application is secured after the

693
00:25:57,600 --> 00:25:59,200
issues all the probabilities are

694
00:25:59,200 --> 00:26:02,559
initiated right so which means

695
00:26:02,559 --> 00:26:05,919
we need to enable the developers to

696
00:26:05,919 --> 00:26:08,960
write secure code right so as part of a

697
00:26:08,960 --> 00:26:11,360
collaboration with securecode warrior so

698
00:26:11,360 --> 00:26:13,840
there's a direct integration

699
00:26:13,840 --> 00:26:16,159
with software security center and our 45

700
00:26:16,159 --> 00:26:19,200
demand dashboard where developers will

701
00:26:19,200 --> 00:26:20,799
get access

702
00:26:20,799 --> 00:26:24,159
to content to a gaming fight way of

703
00:26:24,159 --> 00:26:26,159
secure coding training meaning uh

704
00:26:26,159 --> 00:26:28,799
they'll get a scenario for a particular

705
00:26:28,799 --> 00:26:32,559
category they will be shown with us a

706
00:26:32,559 --> 00:26:35,200
piece of vulnerable code so the solution

707
00:26:35,200 --> 00:26:37,039
secure code warrior will also guide them

708
00:26:37,039 --> 00:26:39,600
to identify the piece of

709
00:26:39,600 --> 00:26:41,919
uh vulnerable code and guide them on how

710
00:26:41,919 --> 00:26:43,840
to remediate that piece of vulnerable

711
00:26:43,840 --> 00:26:48,000
code right so in particular we not only

712
00:26:48,000 --> 00:26:50,960
we want to provide the best solution to

713
00:26:50,960 --> 00:26:53,440
uh with your journey of application

714
00:26:53,440 --> 00:26:55,520
security we also want to train the

715
00:26:55,520 --> 00:26:58,320
developers right to adopt secure coding

716
00:26:58,320 --> 00:27:00,799
practices

717
00:27:02,799 --> 00:27:04,840
so moving to

718
00:27:04,840 --> 00:27:07,520
production uh we integrate with runtime

719
00:27:07,520 --> 00:27:09,360
application self-production which

720
00:27:09,360 --> 00:27:11,440
basically provide an agent installed on

721
00:27:11,440 --> 00:27:13,360
the application server it instruments

722
00:27:13,360 --> 00:27:15,200
the application by instrumenting the

723
00:27:15,200 --> 00:27:16,960
application it understands certain

724
00:27:16,960 --> 00:27:19,760
context of the application so it is not

725
00:27:19,760 --> 00:27:21,520
library application firewall which

726
00:27:21,520 --> 00:27:24,080
inspects the packet that comes into the

727
00:27:24,080 --> 00:27:26,720
network for the for example through http

728
00:27:26,720 --> 00:27:30,080
or https so basically uh runtime

729
00:27:30,080 --> 00:27:32,000
application self protection

730
00:27:32,000 --> 00:27:35,279
scans the data that is coming directly

731
00:27:35,279 --> 00:27:37,200
into the application because it

732
00:27:37,200 --> 00:27:39,919
instruments it so from there uh once it

733
00:27:39,919 --> 00:27:41,600
detects

734
00:27:41,600 --> 00:27:44,159
malicious data basically uh it can

735
00:27:44,159 --> 00:27:46,080
trigger into two types of actions

736
00:27:46,080 --> 00:27:47,679
whether you want to protect it in real

737
00:27:47,679 --> 00:27:48,399
time

738
00:27:48,399 --> 00:27:49,919
or you want to

739
00:27:49,919 --> 00:27:52,880
uh and or you want to alert the uh send

740
00:27:52,880 --> 00:27:56,720
that alert to your siem solution

741
00:27:56,720 --> 00:27:58,320
right so

742
00:27:58,320 --> 00:28:01,360
not only we want a proactive approach we

743
00:28:01,360 --> 00:28:03,039
also have a defensive approach in terms

744
00:28:03,039 --> 00:28:06,559
of your application security journey

745
00:28:06,559 --> 00:28:08,799
right so all in all we provide an

746
00:28:08,799 --> 00:28:11,279
end-to-end with a breath and depth of

747
00:28:11,279 --> 00:28:13,200
application security solution for all

748
00:28:13,200 --> 00:28:16,240
customers not only for on-premises not

749
00:28:16,240 --> 00:28:19,760
only for cloud but also as a hybrid so

750
00:28:19,760 --> 00:28:21,440
we do have some customers that run

751
00:28:21,440 --> 00:28:22,720
on-premises and

752
00:28:22,720 --> 00:28:25,120
and outside solution together

753
00:28:25,120 --> 00:28:26,159
okay

754
00:28:26,159 --> 00:28:28,720
so to end this um i would like to share

755
00:28:28,720 --> 00:28:31,360
with the audience that uh as part of our

756
00:28:31,360 --> 00:28:33,360
expansion and as part of our commitment

757
00:28:33,360 --> 00:28:36,000
to customers to get a better reach we

758
00:28:36,000 --> 00:28:39,279
recently launched an instance for our 45

759
00:28:39,279 --> 00:28:42,240
on demand in singapore so

760
00:28:42,240 --> 00:28:44,559
the customers in the region will have a

761
00:28:44,559 --> 00:28:46,240
better reach of us

762
00:28:46,240 --> 00:28:47,279
right

763
00:28:47,279 --> 00:28:50,880
so please scan the qr code for more info

764
00:28:50,880 --> 00:28:54,120
thank you

