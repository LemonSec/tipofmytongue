1
00:00:07,120 --> 00:00:08,240
hello

2
00:00:08,240 --> 00:00:11,360
welcome to simcon 2021

3
00:00:11,360 --> 00:00:13,599
well we did the same thing earlier this

4
00:00:13,599 --> 00:00:16,560
year but that is for 2020 and this is

5
00:00:16,560 --> 00:00:18,880
the second time for 2021

6
00:00:18,880 --> 00:00:21,359
and we do make a wish that you know

7
00:00:21,359 --> 00:00:23,439
after at least this year we supposed to

8
00:00:23,439 --> 00:00:27,039
have a real conference and unfortunately

9
00:00:27,039 --> 00:00:29,679
we are still here so

10
00:00:29,679 --> 00:00:32,400
okay uh

11
00:00:35,120 --> 00:00:38,879
okay this is uh me all right uh

12
00:00:38,879 --> 00:00:41,520
i'm from uh this uh

13
00:00:41,520 --> 00:00:44,719
chinese version of amazon called jd

14
00:00:44,719 --> 00:00:46,960
alright i also the founder for cheating

15
00:00:46,960 --> 00:00:49,440
framework

16
00:00:49,680 --> 00:00:51,120
i also run this

17
00:00:51,120 --> 00:00:52,640
small little

18
00:00:52,640 --> 00:00:55,280
project called batchmaker

19
00:00:55,280 --> 00:00:58,000
we design batch for security conferences

20
00:00:58,000 --> 00:01:00,480
and you know a few other friends

21
00:01:00,480 --> 00:01:01,520
party

22
00:01:01,520 --> 00:01:03,920
all right uh and these some of the lists

23
00:01:03,920 --> 00:01:05,920
of the talk that we have joined i mean

24
00:01:05,920 --> 00:01:08,880
you can see it's quite not updated and

25
00:01:08,880 --> 00:01:11,360
uh well it's

26
00:01:11,360 --> 00:01:12,479
yeah

27
00:01:12,479 --> 00:01:15,920
it's supposed to be that way you know

28
00:01:16,640 --> 00:01:20,960
okay um my other partner uh cabo hits uh

29
00:01:20,960 --> 00:01:24,000
he's the core developer of chilling and

30
00:01:24,000 --> 00:01:27,200
he's the one that uh quote uh most of

31
00:01:27,200 --> 00:01:30,560
the uh well most when i say most is 99

32
00:01:30,560 --> 00:01:32,000
of the uh

33
00:01:32,000 --> 00:01:35,280
smart contract uh part

34
00:01:35,280 --> 00:01:36,079
i

35
00:01:36,079 --> 00:01:39,360
i i i am the chief designer and he's the

36
00:01:39,360 --> 00:01:42,159
chief coder so this is how how we uh put

37
00:01:42,159 --> 00:01:43,360
it all right

38
00:01:43,360 --> 00:01:45,680
so uh

39
00:01:45,680 --> 00:01:47,119
all right uh

40
00:01:47,119 --> 00:01:49,280
for the new uh comments that uh if you

41
00:01:49,280 --> 00:01:51,920
haven't heard uh about it before this is

42
00:01:51,920 --> 00:01:54,560
a very quick very quick introduct

43
00:01:54,560 --> 00:01:57,119
introduction to uh cheating uh the

44
00:01:57,119 --> 00:01:59,680
entire idea itself we wanted to make

45
00:01:59,680 --> 00:02:02,640
iot reverse engineering great all right

46
00:02:02,640 --> 00:02:05,280
not again but great you you know what i

47
00:02:05,280 --> 00:02:06,560
mean

48
00:02:06,560 --> 00:02:09,119
okay so uh the the one one of the

49
00:02:09,119 --> 00:02:12,319
biggest issue with uh

50
00:02:12,319 --> 00:02:14,160
one of the biggest issue with iot

51
00:02:14,160 --> 00:02:16,560
analysis is uh you need to have the

52
00:02:16,560 --> 00:02:20,000
actual hardware in order to do uh uh the

53
00:02:20,000 --> 00:02:21,120
analysis

54
00:02:21,120 --> 00:02:23,440
so uh the reason why it's the

55
00:02:23,440 --> 00:02:25,920
instrumentation layer in

56
00:02:25,920 --> 00:02:28,400
the entire

57
00:02:28,400 --> 00:02:30,879
iot analysis it's not

58
00:02:30,879 --> 00:02:32,160
convenient

59
00:02:32,160 --> 00:02:34,560
it's not designed for iot

60
00:02:34,560 --> 00:02:35,519
yet

61
00:02:35,519 --> 00:02:38,160
it's uh not designed for

62
00:02:38,160 --> 00:02:39,200
uh

63
00:02:39,200 --> 00:02:42,319
or iot analysis especially you know like

64
00:02:42,319 --> 00:02:44,640
people like us for reversal engineering

65
00:02:44,640 --> 00:02:45,440
so

66
00:02:45,440 --> 00:02:47,519
uh just just for quick example if you

67
00:02:47,519 --> 00:02:50,319
wanted to uh to to go into a mass

68
00:02:50,319 --> 00:02:52,640
variety of a car analysis

69
00:02:52,640 --> 00:02:54,640
first of all you need to have

70
00:02:54,640 --> 00:02:57,519
the devices or else it's it's gonna be

71
00:02:57,519 --> 00:02:59,519
uh too expensive it's gonna be a too

72
00:02:59,519 --> 00:03:03,200
tough for you to do analysis

73
00:03:03,519 --> 00:03:05,840
so how do we fix this it uh how do we

74
00:03:05,840 --> 00:03:09,120
fix it with uh chilling framework is uh

75
00:03:09,120 --> 00:03:12,560
when we started the entire iot analysis

76
00:03:12,560 --> 00:03:14,879
uh i we did a talk in a couple of

77
00:03:14,879 --> 00:03:16,840
conferences in year

78
00:03:16,840 --> 00:03:21,440
2018 uh we do bump into a lot of issue

79
00:03:21,440 --> 00:03:24,159
whereby devices is the hardest thing to

80
00:03:24,159 --> 00:03:26,480
to to emulate you know you have things

81
00:03:26,480 --> 00:03:27,680
like uh

82
00:03:27,680 --> 00:03:28,720
audio

83
00:03:28,720 --> 00:03:32,239
uh screen uh even things like a gps cam

84
00:03:32,239 --> 00:03:33,840
you know how can you emulate those

85
00:03:33,840 --> 00:03:35,760
device in a very

86
00:03:35,760 --> 00:03:40,000
easy way for for you to uh comes into uh

87
00:03:40,000 --> 00:03:42,560
for you to make a tools to to emulate

88
00:03:42,560 --> 00:03:44,879
all these devices so

89
00:03:44,879 --> 00:03:47,040
the entire idea of a chilling framework

90
00:03:47,040 --> 00:03:49,680
is we wanted to bring firmware

91
00:03:49,680 --> 00:03:52,000
emulation with comes with an

92
00:03:52,000 --> 00:03:54,319
instrumentation then we can make use of

93
00:03:54,319 --> 00:03:56,959
the instrumentation the api plug-in

94
00:03:56,959 --> 00:04:01,360
to build uh virtual device support

95
00:04:01,360 --> 00:04:02,319
uh

96
00:04:02,319 --> 00:04:04,000
like what i mentioned just now you do

97
00:04:04,000 --> 00:04:05,920
have a couple of virtual machines that

98
00:04:05,920 --> 00:04:08,319
are able to uh do that you know if you

99
00:04:08,319 --> 00:04:11,680
patch qemu here and there uh you will be

100
00:04:11,680 --> 00:04:13,280
able to do that you know create some

101
00:04:13,280 --> 00:04:15,439
fake devices you know try try try to

102
00:04:15,439 --> 00:04:17,358
emulate some bluetooth devices

103
00:04:17,358 --> 00:04:20,478
it's possible but we wanted a thing that

104
00:04:20,478 --> 00:04:23,120
can do uh things on the fly but there

105
00:04:23,120 --> 00:04:24,880
are still still a lot of things that you

106
00:04:24,880 --> 00:04:27,600
know qemu or even bosch can't

107
00:04:27,600 --> 00:04:29,520
able to emulate that kind of stuff you

108
00:04:29,520 --> 00:04:32,479
know like like qualcomm edl you wanted

109
00:04:32,479 --> 00:04:34,639
to do emulation with instrumentation

110
00:04:34,639 --> 00:04:37,840
it's totally not possible uefi it's one

111
00:04:37,840 --> 00:04:38,880
of the

112
00:04:38,880 --> 00:04:41,680
pain for reverse engineering we're

113
00:04:41,680 --> 00:04:43,919
talking about boot loader we are talking

114
00:04:43,919 --> 00:04:46,800
about you know uh anti-debug and dnt

115
00:04:46,800 --> 00:04:48,800
debug and uh

116
00:04:48,800 --> 00:04:49,600
uh

117
00:04:49,600 --> 00:04:52,000
master boot record and of course the

118
00:04:52,000 --> 00:04:55,199
topic today is we're gonna focus on

119
00:04:55,199 --> 00:04:57,840
smart contract

120
00:04:58,000 --> 00:04:59,759
so before we goes into our smart

121
00:04:59,759 --> 00:05:02,240
contract

122
00:05:03,520 --> 00:05:05,120
so before it goes into a smart contract

123
00:05:05,120 --> 00:05:07,680
there are few things that uh

124
00:05:07,680 --> 00:05:10,240
we wanted to do if a chilling's a

125
00:05:10,240 --> 00:05:12,160
framework introduction

126
00:05:12,160 --> 00:05:14,639
so first thing first is uh these are

127
00:05:14,639 --> 00:05:17,199
most probably at the platform that

128
00:05:17,199 --> 00:05:18,560
we are supporting

129
00:05:18,560 --> 00:05:20,720
uh when i mentioned most probably the

130
00:05:20,720 --> 00:05:23,440
only reason it's uh

131
00:05:23,440 --> 00:05:25,759
we are looking at the things that uh we

132
00:05:25,759 --> 00:05:28,320
know if i miss out something that

133
00:05:28,320 --> 00:05:30,960
could be a very high possibility i

134
00:05:30,960 --> 00:05:31,680
i

135
00:05:31,680 --> 00:05:33,600
lost count some of the features and

136
00:05:33,600 --> 00:05:37,039
functionality okay so uh

137
00:05:37,039 --> 00:05:40,240
we are purely uh solely based on unicorn

138
00:05:40,240 --> 00:05:42,560
engine as the uh

139
00:05:42,560 --> 00:05:46,400
lower layer uh uh engine to do the uh

140
00:05:46,400 --> 00:05:49,280
cpu emulation all right so and then i'll

141
00:05:49,280 --> 00:05:52,080
be build chilling engine on top of it so

142
00:05:52,080 --> 00:05:53,919
what what you can

143
00:05:53,919 --> 00:05:56,400
think of is a chilling engine it's part

144
00:05:56,400 --> 00:05:58,400
of the

145
00:05:58,400 --> 00:06:01,120
unicorn engine is the cpu cpu emulator

146
00:06:01,120 --> 00:06:04,240
chilling engine is the os emulator then

147
00:06:04,240 --> 00:06:06,240
from a chilling engine we do have a

148
00:06:06,240 --> 00:06:08,160
layer that you can emulate a different

149
00:06:08,160 --> 00:06:11,120
kind of hardware then that is where the

150
00:06:11,120 --> 00:06:13,600
instrumentation comes in all the apis

151
00:06:13,600 --> 00:06:16,319
comes in then uh you started to have all

152
00:06:16,319 --> 00:06:17,840
the different architectures you know

153
00:06:17,840 --> 00:06:20,800
like intel x86x65

154
00:06:20,800 --> 00:06:26,000
x okay x8664 uh uh 32 uh 32 bits uh

155
00:06:26,000 --> 00:06:27,919
intel uh

156
00:06:27,919 --> 00:06:30,800
audio arm pro uh audio arm processor

157
00:06:30,800 --> 00:06:32,319
series uh

158
00:06:32,319 --> 00:06:34,319
and then we you you have the uh eight

159
00:06:34,319 --> 00:06:36,319
zero eight six you know we have even uh

160
00:06:36,319 --> 00:06:38,880
emulate ms-dos uh mips

161
00:06:38,880 --> 00:06:42,400
uh linux mac os uh like what i mentioned

162
00:06:42,400 --> 00:06:45,039
just now edl ufi and then we built all

163
00:06:45,039 --> 00:06:46,240
kind of uh

164
00:06:46,240 --> 00:06:48,560
uh debugger that that they can connect

165
00:06:48,560 --> 00:06:51,039
to uh chilling and then uh all other

166
00:06:51,039 --> 00:06:53,759
different kinds of uh extension so there

167
00:06:53,759 --> 00:06:55,520
are a few small things that uh that we

168
00:06:55,520 --> 00:06:58,400
would like to share uh we just released

169
00:06:58,400 --> 00:07:01,440
a stm32

170
00:07:01,440 --> 00:07:02,800
module

171
00:07:02,800 --> 00:07:04,479
into a chilling it's still very

172
00:07:04,479 --> 00:07:06,560
primitive uh we are good enough to

173
00:07:06,560 --> 00:07:08,479
emulate

174
00:07:08,479 --> 00:07:09,319
uh

175
00:07:09,319 --> 00:07:12,960
stm32f1 f7 and f4

176
00:07:12,960 --> 00:07:14,160
uh

177
00:07:14,160 --> 00:07:15,599
and then uh

178
00:07:15,599 --> 00:07:17,039
of course the topic today that we're

179
00:07:17,039 --> 00:07:20,000
gonna focus on uh it's gonna be the uh

180
00:07:20,000 --> 00:07:23,599
uh the evm smart contract uh series so

181
00:07:23,599 --> 00:07:25,120
uh these these are the few things that

182
00:07:25,120 --> 00:07:28,880
we would like to cover uh today

183
00:07:28,880 --> 00:07:32,000
so of course when it comes to a evm none

184
00:07:32,000 --> 00:07:33,360
of this

185
00:07:33,360 --> 00:07:34,720
uh

186
00:07:34,720 --> 00:07:37,840
emulation tools or or framework able to

187
00:07:37,840 --> 00:07:41,840
do a evm so instrumental evm i guess we

188
00:07:41,840 --> 00:07:44,639
are the only one that able to do to run

189
00:07:44,639 --> 00:07:46,160
evm bytecode

190
00:07:46,160 --> 00:07:48,960
with instrumentation on the uh framework

191
00:07:48,960 --> 00:07:50,160
level so

192
00:07:50,160 --> 00:07:52,080
so none of this is a project able to do

193
00:07:52,080 --> 00:07:54,240
it

194
00:07:54,319 --> 00:07:57,360
so uh just to just to do a very quick uh

195
00:07:57,360 --> 00:07:59,759
recap all right uh this is the framework

196
00:07:59,759 --> 00:08:01,120
not the two so

197
00:08:01,120 --> 00:08:04,080
uh the entire idea is we wanted to we

198
00:08:04,080 --> 00:08:06,160
wanted the community to build all the

199
00:08:06,160 --> 00:08:08,160
different all different kind of tools on

200
00:08:08,160 --> 00:08:10,639
top of our chilling framework so

201
00:08:10,639 --> 00:08:13,120
we have seen uh some uh

202
00:08:13,120 --> 00:08:15,039
some uh very creative work you know like

203
00:08:15,039 --> 00:08:17,120
efi faster we have like you know some

204
00:08:17,120 --> 00:08:20,479
some uh malware decoder and then uh uh

205
00:08:20,479 --> 00:08:23,520
vac3 emulator uh we have seen quite a

206
00:08:23,520 --> 00:08:26,479
bit of our sandbox here and there uh

207
00:08:26,479 --> 00:08:27,840
and then uh

208
00:08:27,840 --> 00:08:29,440
we are still building we we are still

209
00:08:29,440 --> 00:08:32,000
making a mac os emulations uh emulation

210
00:08:32,000 --> 00:08:34,159
is complete so hopefully uh when when we

211
00:08:34,159 --> 00:08:37,360
complete the mac os emulations the ios

212
00:08:37,360 --> 00:08:38,799
and uh

213
00:08:38,799 --> 00:08:41,360
m1 series will be

214
00:08:41,360 --> 00:08:42,559
perfect

215
00:08:42,559 --> 00:08:46,560
okay i i hope perfect is a very big word

216
00:08:46,560 --> 00:08:48,959
to choose

217
00:08:48,959 --> 00:08:52,160
so uh i do mention quite a fair bit of a

218
00:08:52,160 --> 00:08:54,080
couple of times on the instrumentation

219
00:08:54,080 --> 00:08:57,040
so to cut instrumentation shot this is

220
00:08:57,040 --> 00:09:00,000
an instrumentation so in a normal binary

221
00:09:00,000 --> 00:09:03,040
execution flow you try to execute a

222
00:09:03,040 --> 00:09:05,440
binary that does a hello world maybe so

223
00:09:05,440 --> 00:09:07,040
it will from

224
00:09:07,040 --> 00:09:09,440
c d e f

225
00:09:09,440 --> 00:09:11,279
and then uh you know along the way they

226
00:09:11,279 --> 00:09:14,240
will stay they'll call the library to

227
00:09:14,240 --> 00:09:17,760
run the hanover so this is how hello

228
00:09:17,760 --> 00:09:21,120
executions are being done

229
00:09:21,200 --> 00:09:23,040
but uh instrumentation uh what we're

230
00:09:23,040 --> 00:09:25,519
trying to achieve is uh if we already

231
00:09:25,519 --> 00:09:27,760
know this is the flow for binary and

232
00:09:27,760 --> 00:09:30,080
then we try to do analysis with some

233
00:09:30,080 --> 00:09:33,200
alteration along the way so we so for

234
00:09:33,200 --> 00:09:35,360
example we want to start from b and then

235
00:09:35,360 --> 00:09:37,120
we want to alter the memory we want to

236
00:09:37,120 --> 00:09:41,120
do or auto a library function call then

237
00:09:41,120 --> 00:09:44,800
we will skip c then we go into a d

238
00:09:44,800 --> 00:09:47,519
then we will do the cpu we will update

239
00:09:47,519 --> 00:09:49,680
part of the cpu register and then we're

240
00:09:49,680 --> 00:09:53,120
going to end in e so these are the parts

241
00:09:53,120 --> 00:09:55,839
that uh if imagine you are dealing with

242
00:09:55,839 --> 00:10:00,240
a a a fairly large binary then uh

243
00:10:00,240 --> 00:10:03,120
by cutting off a certain parts of the uh

244
00:10:03,120 --> 00:10:04,560
the uh

245
00:10:04,560 --> 00:10:06,079
the execution it's going to save you

246
00:10:06,079 --> 00:10:08,000
quite a fair bit of time and when it

247
00:10:08,000 --> 00:10:10,560
comes to buzzing this is totally uh

248
00:10:10,560 --> 00:10:13,680
comes in handy you can fast with a

249
00:10:13,680 --> 00:10:15,360
different cpu register you know

250
00:10:15,360 --> 00:10:17,040
different parts of the memory you try to

251
00:10:17,040 --> 00:10:18,560
update the function everything it's

252
00:10:18,560 --> 00:10:20,800
possible over here so this is an

253
00:10:20,800 --> 00:10:24,240
instrumentation change the execution uh

254
00:10:24,240 --> 00:10:25,920
method of the uh

255
00:10:25,920 --> 00:10:28,399
executable file and try to

256
00:10:28,399 --> 00:10:29,680
change the

257
00:10:29,680 --> 00:10:33,120
binary flow and update or outer

258
00:10:33,120 --> 00:10:34,720
alterations uh

259
00:10:34,720 --> 00:10:36,800
memory function cpu restore whatever

260
00:10:36,800 --> 00:10:40,880
things that you want to do along the way

261
00:10:40,880 --> 00:10:41,760
so

262
00:10:41,760 --> 00:10:43,920
uh

263
00:10:43,920 --> 00:10:46,480
when we are trying to build a uh uh

264
00:10:46,480 --> 00:10:49,040
chilling framework all right uh we now

265
00:10:49,040 --> 00:10:50,880
now we are splitting it into uh three

266
00:10:50,880 --> 00:10:52,720
parts so uh

267
00:10:52,720 --> 00:10:54,000
like what i mentioned this time we

268
00:10:54,000 --> 00:10:56,800
support all the way from windows mac ios

269
00:10:56,800 --> 00:10:57,920
evm

270
00:10:57,920 --> 00:11:01,000
and then uh uh

271
00:11:01,000 --> 00:11:03,839
stm32 series then we have all the

272
00:11:03,839 --> 00:11:06,480
different types of uh uh architecture uh

273
00:11:06,480 --> 00:11:09,120
api that are able to do instrumentation

274
00:11:09,120 --> 00:11:12,079
on the evm itself so uh of course the

275
00:11:12,079 --> 00:11:14,000
software mode the last one the software

276
00:11:14,000 --> 00:11:15,600
mode will be the uh

277
00:11:15,600 --> 00:11:18,480
the ordinary uh uh the original chilling

278
00:11:18,480 --> 00:11:20,800
framework that uh that we have with a

279
00:11:20,800 --> 00:11:24,399
cpu and an os

280
00:11:24,399 --> 00:11:25,279
so

281
00:11:25,279 --> 00:11:27,680
uh

282
00:11:27,760 --> 00:11:30,240
the reason why we named this uh this uh

283
00:11:30,240 --> 00:11:32,640
this presentation as a

284
00:11:32,640 --> 00:11:33,920
bringing that

285
00:11:33,920 --> 00:11:36,399
bringing the x86 experience into smart

286
00:11:36,399 --> 00:11:39,519
contract the entire idea is we wanted to

287
00:11:39,519 --> 00:11:41,519
bring all the tools that you familiar

288
00:11:41,519 --> 00:11:42,560
with

289
00:11:42,560 --> 00:11:45,760
all right you used to do with x86 and we

290
00:11:45,760 --> 00:11:47,920
wanted to bring the entire

291
00:11:47,920 --> 00:11:50,720
user experience from from x86

292
00:11:50,720 --> 00:11:53,440
engineering back into a

293
00:11:53,440 --> 00:11:55,760
smart contract

294
00:11:55,760 --> 00:11:56,720
so

295
00:11:56,720 --> 00:11:58,880
so uh

296
00:11:58,880 --> 00:12:00,320
you guys might heard you know smart

297
00:12:00,320 --> 00:12:03,040
contract you always have this uh uh all

298
00:12:03,040 --> 00:12:05,519
different kinds of bug that people

299
00:12:05,519 --> 00:12:07,519
started to steal millions and millions

300
00:12:07,519 --> 00:12:08,880
of dollars

301
00:12:08,880 --> 00:12:11,519
on the uh smart contract so there are a

302
00:12:11,519 --> 00:12:14,480
lot of types of uh vulnerabilities uh

303
00:12:14,480 --> 00:12:16,560
whenever defy comes out you know we

304
00:12:16,560 --> 00:12:18,800
started with the apps and then this

305
00:12:18,800 --> 00:12:21,200
decentralized application decentralized

306
00:12:21,200 --> 00:12:24,320
finance and then uh that is where yeah

307
00:12:24,320 --> 00:12:26,079
things started to get complicated you

308
00:12:26,079 --> 00:12:29,279
know as long as the finance is involved

309
00:12:29,279 --> 00:12:32,800
so uh on the very old data all right uh

310
00:12:32,800 --> 00:12:36,320
it's around 109 billion uh

311
00:12:36,320 --> 00:12:37,120
uh

312
00:12:37,120 --> 00:12:39,680
decentralized finance market cap i saw

313
00:12:39,680 --> 00:12:42,560
as of april all right uh and then from

314
00:12:42,560 --> 00:12:46,880
2019 to 2020 that's around 22 billion

315
00:12:46,880 --> 00:12:49,079
us dollar test in the entire defend

316
00:12:49,079 --> 00:12:52,399
market uh

317
00:12:52,399 --> 00:12:54,800
don't get me wrong all right the 22

318
00:12:54,800 --> 00:12:57,600
billion it's pretty much based on

319
00:12:57,600 --> 00:13:00,399
the value of the uh the value of the

320
00:13:00,399 --> 00:13:02,240
tokens uh

321
00:13:02,240 --> 00:13:05,440
uh during that time uh it could be it

322
00:13:05,440 --> 00:13:07,120
could be if you want to wanted to

323
00:13:07,120 --> 00:13:08,720
convert the uh

324
00:13:08,720 --> 00:13:11,440
the token value uh based on today's

325
00:13:11,440 --> 00:13:13,600
currency depends on which token it's

326
00:13:13,600 --> 00:13:15,519
gonna be a way more

327
00:13:15,519 --> 00:13:17,680
uh way more uh

328
00:13:17,680 --> 00:13:18,720
value

329
00:13:18,720 --> 00:13:24,560
uh in in value usd in tava uh nowadays

330
00:13:24,560 --> 00:13:25,360
so

331
00:13:25,360 --> 00:13:26,560
uh

332
00:13:26,560 --> 00:13:29,200
a lot of those have been been published

333
00:13:29,200 --> 00:13:30,560
uh in the open source were in the

334
00:13:30,560 --> 00:13:31,920
commercial world

335
00:13:31,920 --> 00:13:35,200
uh these days for uh for evm uh smart

336
00:13:35,200 --> 00:13:37,519
contract analysis but the only thing

337
00:13:37,519 --> 00:13:38,959
it's uh

338
00:13:38,959 --> 00:13:40,480
uh there are a few things that uh it's

339
00:13:40,480 --> 00:13:43,040
not easy to analyze when it comes to uh

340
00:13:43,040 --> 00:13:45,920
binary only contracts you know we we

341
00:13:45,920 --> 00:13:48,240
still do believe that there's a lot of

342
00:13:48,240 --> 00:13:49,199
uh

343
00:13:49,199 --> 00:13:50,800
smart contracts are covering the source

344
00:13:50,800 --> 00:13:52,320
code that that is based on the best

345
00:13:52,320 --> 00:13:54,000
practice then that you can do on the

346
00:13:54,000 --> 00:13:57,440
either scan or whatever but

347
00:13:57,519 --> 00:13:58,399
uh

348
00:13:58,399 --> 00:14:00,480
the uh that there's still quite a fair

349
00:14:00,480 --> 00:14:02,720
bit of a smart contract

350
00:14:02,720 --> 00:14:04,880
that you cannot get the source code so

351
00:14:04,880 --> 00:14:06,720
the analysis is going to be a way more

352
00:14:06,720 --> 00:14:07,760
harder

353
00:14:07,760 --> 00:14:10,800
uh we all know that uh cmax symbolic

354
00:14:10,800 --> 00:14:12,800
execution is something

355
00:14:12,800 --> 00:14:13,920
you need

356
00:14:13,920 --> 00:14:16,320
a lot of a human intervention to to to

357
00:14:16,320 --> 00:14:20,000
analyze the uh the post report the uh

358
00:14:20,000 --> 00:14:21,440
whatever things that are produced by

359
00:14:21,440 --> 00:14:23,360
your cmax engine

360
00:14:23,360 --> 00:14:26,720
uh and again a cement ac max engine

361
00:14:26,720 --> 00:14:29,440
also comes with a quite a high level of

362
00:14:29,440 --> 00:14:31,440
force positive so that is something that

363
00:14:31,440 --> 00:14:32,320
uh

364
00:14:32,320 --> 00:14:33,920
that uh

365
00:14:33,920 --> 00:14:36,639
uh making a lot of people

366
00:14:36,639 --> 00:14:38,720
having trouble having issue to analyze

367
00:14:38,720 --> 00:14:41,680
us uh smart contract uh the last thing

368
00:14:41,680 --> 00:14:43,760
is like what i mentioned just now

369
00:14:43,760 --> 00:14:45,760
regardless of what kind of tools that

370
00:14:45,760 --> 00:14:48,560
you're using you're using uh if you're

371
00:14:48,560 --> 00:14:49,760
checking the source code if you're

372
00:14:49,760 --> 00:14:53,120
checking the uh the uh the analysis uh

373
00:14:53,120 --> 00:14:55,600
uh symbolic uh dynamic symbolic

374
00:14:55,600 --> 00:14:58,240
executions uh you still need quite a

375
00:14:58,240 --> 00:15:00,399
fair bit of a human

376
00:15:00,399 --> 00:15:02,959
intervention to to come up with the

377
00:15:02,959 --> 00:15:06,160
proper analysis report

378
00:15:06,480 --> 00:15:07,279
so

379
00:15:07,279 --> 00:15:09,120
uh

380
00:15:09,120 --> 00:15:11,440
the official emulator yes that that

381
00:15:11,440 --> 00:15:13,440
there is a lot of our official emulator

382
00:15:13,440 --> 00:15:14,800
for all the different chains you know

383
00:15:14,800 --> 00:15:17,360
all the way from cardano from uh from uh

384
00:15:17,360 --> 00:15:21,279
uh ethereum ethereum 2.0 uh eos polka

385
00:15:21,279 --> 00:15:23,680
dot and uh and uh binance

386
00:15:23,680 --> 00:15:25,199
all right uh

387
00:15:25,199 --> 00:15:28,079
and now we all know that uh 99 percent

388
00:15:28,079 --> 00:15:31,199
of the smart contract and it's on uh

389
00:15:31,199 --> 00:15:34,880
it's on uh evm or wsm of course academic

390
00:15:34,880 --> 00:15:37,519
is uh totally on a different path okay

391
00:15:37,519 --> 00:15:39,360
on the high scale uh

392
00:15:39,360 --> 00:15:42,079
kind of a mechanism so uh that is

393
00:15:42,079 --> 00:15:44,480
something that uh we are looking at and

394
00:15:44,480 --> 00:15:47,120
now we might want to uh goes into that

395
00:15:47,120 --> 00:15:49,360
that space uh of course i miss out

396
00:15:49,360 --> 00:15:51,120
solana

397
00:15:51,120 --> 00:15:53,199
uh

398
00:15:53,199 --> 00:15:54,800
but what is missing over here is a

399
00:15:54,800 --> 00:15:57,040
regardless of which coin and which

400
00:15:57,040 --> 00:15:59,440
blockchain that that we are referring to

401
00:15:59,440 --> 00:16:00,320
uh

402
00:16:00,320 --> 00:16:03,839
what is missing over here is uh

403
00:16:03,839 --> 00:16:06,399
uh most of this engine they never

404
00:16:06,399 --> 00:16:08,880
provide a dynamic execution hook that

405
00:16:08,880 --> 00:16:11,519
something is uh missing there is no

406
00:16:11,519 --> 00:16:13,839
unconditional executions okay

407
00:16:13,839 --> 00:16:17,120
uh there is uh

408
00:16:17,360 --> 00:16:20,240
how how should i put it a hack

409
00:16:20,240 --> 00:16:22,639
and put together faster

410
00:16:22,639 --> 00:16:24,720
engine that too fast or smart contracts

411
00:16:24,720 --> 00:16:26,160
so

412
00:16:26,160 --> 00:16:27,839
in a nutshell what they're trying to do

413
00:16:27,839 --> 00:16:29,199
it's uh

414
00:16:29,199 --> 00:16:30,240
they are

415
00:16:30,240 --> 00:16:32,079
fuzzing the and they are fasting the

416
00:16:32,079 --> 00:16:33,199
entire

417
00:16:33,199 --> 00:16:35,759
uh immolation engine and then they try

418
00:16:35,759 --> 00:16:37,759
to figure out the uh

419
00:16:37,759 --> 00:16:39,360
the crash inside

420
00:16:39,360 --> 00:16:40,720
the the

421
00:16:40,720 --> 00:16:43,120
the system then we have things like you

422
00:16:43,120 --> 00:16:45,759
know uh there's no pattern execution

423
00:16:45,759 --> 00:16:48,160
check there is no life debugging of

424
00:16:48,160 --> 00:16:50,160
course and then uh it's not the real

425
00:16:50,160 --> 00:16:52,560
instrumentation so it's just a symbolic

426
00:16:52,560 --> 00:16:54,320
execution plus some work around to do

427
00:16:54,320 --> 00:16:56,320
the instrumentation and of course the

428
00:16:56,320 --> 00:16:59,199
last thing is not the framework

429
00:16:59,199 --> 00:17:01,279
so why not the framework it's very

430
00:17:01,279 --> 00:17:03,120
important it's uh

431
00:17:03,120 --> 00:17:05,280
this will allow other people to build

432
00:17:05,280 --> 00:17:08,000
more and more tools to on on top of the

433
00:17:08,000 --> 00:17:09,919
emulation engine then that we have built

434
00:17:09,919 --> 00:17:10,959
so

435
00:17:10,959 --> 00:17:13,199
that's the reason why we required

436
00:17:13,199 --> 00:17:14,559
uh

437
00:17:14,559 --> 00:17:15,919
uh

438
00:17:15,919 --> 00:17:18,000
we then there's a reason why we are

439
00:17:18,000 --> 00:17:19,919
always looking at a framework then we

440
00:17:19,919 --> 00:17:21,520
allow other people to build more tools

441
00:17:21,520 --> 00:17:24,000
on top of our framework just like how we

442
00:17:24,000 --> 00:17:26,319
decide you know how we mess with our

443
00:17:26,319 --> 00:17:28,240
unicorn engine you know how how queen

444
00:17:28,240 --> 00:17:29,919
mess with a keystone engine capital

445
00:17:29,919 --> 00:17:30,799
engine

446
00:17:30,799 --> 00:17:32,640
a couple couple of years back until

447
00:17:32,640 --> 00:17:34,960
today

448
00:17:34,960 --> 00:17:37,679
so uh there's certain uh uh mode that we

449
00:17:37,679 --> 00:17:39,840
would like to uh talk about so uh we're

450
00:17:39,840 --> 00:17:41,360
gonna start with the architecture the

451
00:17:41,360 --> 00:17:43,679
smart contract the symbolic execution

452
00:17:43,679 --> 00:17:46,080
layer the evm state and the debugger

453
00:17:46,080 --> 00:17:48,480
okay so uh once you receive a smart

454
00:17:48,480 --> 00:17:50,640
contract either in a binary format or in

455
00:17:50,640 --> 00:17:51,280
a

456
00:17:51,280 --> 00:17:54,720
in a in a hex code format uh you can

457
00:17:54,720 --> 00:17:56,240
always uh when you set up the

458
00:17:56,240 --> 00:17:58,000
architecture you can always create

459
00:17:58,000 --> 00:18:00,640
account and create a message that is uh

460
00:18:00,640 --> 00:18:02,640
the the two key apis that we have

461
00:18:02,640 --> 00:18:05,760
provided inside the framework

462
00:18:05,760 --> 00:18:07,520
okay so that is where you can started to

463
00:18:07,520 --> 00:18:09,120
create account now

464
00:18:09,120 --> 00:18:11,840
uh you can start to create account to to

465
00:18:11,840 --> 00:18:14,000
tell what is the balance inside via

466
00:18:14,000 --> 00:18:15,280
smart contract of course when you have

467
00:18:15,280 --> 00:18:17,039
smart contract you need to tell the

468
00:18:17,039 --> 00:18:18,480
smart contract yeah how many accounts

469
00:18:18,480 --> 00:18:19,840
over there and then are there how many

470
00:18:19,840 --> 00:18:22,000
users over there and each and every

471
00:18:22,000 --> 00:18:22,880
account

472
00:18:22,880 --> 00:18:25,440
uh have how many uh balancer token

473
00:18:25,440 --> 00:18:28,640
inside the smart contract

474
00:18:28,640 --> 00:18:30,559
then uh inside the smart contract deck

475
00:18:30,559 --> 00:18:33,200
is where you started to to

476
00:18:33,200 --> 00:18:36,000
to able to put in the hook so hope on

477
00:18:36,000 --> 00:18:39,280
instruction put on a specific address or

478
00:18:39,280 --> 00:18:41,440
you can hook on a specific buy code that

479
00:18:41,440 --> 00:18:44,240
you are you are looking at and then uh

480
00:18:44,240 --> 00:18:46,799
you can start to do a disassembly uh

481
00:18:46,799 --> 00:18:49,120
function or the analysis function a

482
00:18:49,120 --> 00:18:51,678
signature

483
00:18:51,760 --> 00:18:54,000
so these are the example on we can hope

484
00:18:54,000 --> 00:18:56,160
on different uh we can hold on a

485
00:18:56,160 --> 00:18:58,480
specific instruction like push for

486
00:18:58,480 --> 00:19:00,880
we can uh create a

487
00:19:00,880 --> 00:19:03,120
hook test on a

488
00:19:03,120 --> 00:19:05,520
a specific address

489
00:19:05,520 --> 00:19:07,679
all right and then we have things like

490
00:19:07,679 --> 00:19:09,760
uh

491
00:19:09,760 --> 00:19:11,760
symbolic executions we are still haven't

492
00:19:11,760 --> 00:19:14,080
decided whether do we want to put in the

493
00:19:14,080 --> 00:19:16,160
engine or not this is something that we

494
00:19:16,160 --> 00:19:19,200
are still appending

495
00:19:19,200 --> 00:19:21,520
so uh by putting in uh by putting in a

496
00:19:21,520 --> 00:19:23,200
smart contract dyna you can started to

497
00:19:23,200 --> 00:19:24,640
put in the uh

498
00:19:24,640 --> 00:19:27,600
the uh uh symbolic executions then that

499
00:19:27,600 --> 00:19:29,600
is where you can start to load the cfg

500
00:19:29,600 --> 00:19:32,080
and and generate the graph for for

501
00:19:32,080 --> 00:19:34,400
symbolic executions

502
00:19:34,400 --> 00:19:36,720
okay and then uh

503
00:19:36,720 --> 00:19:39,039
on the evm states then now you can start

504
00:19:39,039 --> 00:19:41,760
to have all different kinds of uh uh evm

505
00:19:41,760 --> 00:19:43,280
standard command you don't get get

506
00:19:43,280 --> 00:19:46,320
storage get balanced get code okay stack

507
00:19:46,320 --> 00:19:48,160
storage set balance uh then that is

508
00:19:48,160 --> 00:19:50,000
where you can started to do the transfer

509
00:19:50,000 --> 00:19:51,679
or whatsoever

510
00:19:51,679 --> 00:19:52,640
so

511
00:19:52,640 --> 00:19:54,559
get to to delete account

512
00:19:54,559 --> 00:19:57,200
to the set storage this is

513
00:19:57,200 --> 00:19:59,760
all the evm standard command that you

514
00:19:59,760 --> 00:20:00,960
can run

515
00:20:00,960 --> 00:20:02,799
with together with all the tools that we

516
00:20:02,799 --> 00:20:05,679
have provided

517
00:20:05,840 --> 00:20:08,159
and then of course uh to the the last

518
00:20:08,159 --> 00:20:09,840
thing and then the most important thing

519
00:20:09,840 --> 00:20:13,120
it's uh the debugging mode

520
00:20:13,120 --> 00:20:13,919
so

521
00:20:13,919 --> 00:20:15,919
we got a very small debugger that uh

522
00:20:15,919 --> 00:20:17,200
built into a

523
00:20:17,200 --> 00:20:19,919
chilling framework that you can debuff

524
00:20:19,919 --> 00:20:22,880
all the way from the x86 uh uh tools to

525
00:20:22,880 --> 00:20:26,159
to until the uh the evm code so uh

526
00:20:26,159 --> 00:20:28,080
everything is built into one simple

527
00:20:28,080 --> 00:20:30,480
plugin that you are able to do

528
00:20:30,480 --> 00:20:33,760
you know step in step over continue uh

529
00:20:33,760 --> 00:20:36,000
at breakpoint list on the breakpoint

530
00:20:36,000 --> 00:20:38,240
just just like how you use your your gdp

531
00:20:38,240 --> 00:20:41,919
in a x86 environment

532
00:20:42,559 --> 00:20:45,679
okay so uh that's basically everything

533
00:20:45,679 --> 00:20:49,520
about the evm engine uh i guess

534
00:20:49,520 --> 00:20:51,440
you will you'll be able to know more

535
00:20:51,440 --> 00:20:53,919
when we started to uh show you the demo

536
00:20:53,919 --> 00:20:56,400
on how things works over the uh evm

537
00:20:56,400 --> 00:20:58,720
engine

538
00:20:58,720 --> 00:21:01,360
so uh uh cabal will be doing the evm

539
00:21:01,360 --> 00:21:03,679
demo we will be uh he'll be showing you

540
00:21:03,679 --> 00:21:06,080
a step by step on you know how we uh how

541
00:21:06,080 --> 00:21:09,280
we can replicate or how we can redo

542
00:21:09,280 --> 00:21:12,320
certain parts of the uh uh defy

543
00:21:12,320 --> 00:21:15,200
uh money stealing project you know we we

544
00:21:15,200 --> 00:21:17,039
did not steal any money but based on the

545
00:21:17,039 --> 00:21:20,159
old use case or all demos uh oh

546
00:21:20,159 --> 00:21:22,880
all uh uh uh whatever things that

547
00:21:22,880 --> 00:21:24,159
happened before

548
00:21:24,159 --> 00:21:26,080
you know we can replicate and then we

549
00:21:26,080 --> 00:21:28,320
can re-implement into the evm uh

550
00:21:28,320 --> 00:21:29,600
blockchain uh

551
00:21:29,600 --> 00:21:31,760
environment so

552
00:21:31,760 --> 00:21:35,200
i'll pass this to a couple

553
00:21:35,440 --> 00:21:38,400
hello everyone i'm kevin and i think

554
00:21:38,400 --> 00:21:41,760
it's time to do some demonstrations

555
00:21:41,760 --> 00:21:44,159
we have done a lot of work science

556
00:21:44,159 --> 00:21:46,960
supply had asia this year

557
00:21:46,960 --> 00:21:48,960
so today i will show

558
00:21:48,960 --> 00:21:52,240
how will bring the x86 reverse

559
00:21:52,240 --> 00:21:53,600
engineering

560
00:21:53,600 --> 00:21:56,480
experience to smart contracts through a

561
00:21:56,480 --> 00:21:59,840
few demos we have built a eth smart

562
00:21:59,840 --> 00:22:03,200
contract emulator with instrumentation

563
00:22:03,200 --> 00:22:04,640
in the past

564
00:22:04,640 --> 00:22:07,600
it is not just a virtual machine it also

565
00:22:07,600 --> 00:22:09,760
simulates a live with blockchain

566
00:22:09,760 --> 00:22:11,760
environment

567
00:22:11,760 --> 00:22:14,240
is a platform that can be

568
00:22:14,240 --> 00:22:17,200
extended to the specific analysis

569
00:22:17,200 --> 00:22:18,400
direction

570
00:22:18,400 --> 00:22:21,600
based on this we build a series of tools

571
00:22:21,600 --> 00:22:23,679
to enhance smart contract analysis

572
00:22:23,679 --> 00:22:25,280
capabilities

573
00:22:25,280 --> 00:22:28,000
so first let me demonstrate the real

574
00:22:28,000 --> 00:22:30,880
time uam debugger

575
00:22:30,880 --> 00:22:34,240
to use the debugger users just need to

576
00:22:34,240 --> 00:22:37,120
enhance a tiering class

577
00:22:37,120 --> 00:22:38,720
and

578
00:22:38,720 --> 00:22:42,159
turn on the debugger option

579
00:22:42,159 --> 00:22:45,600
and emulate the transaction

580
00:22:45,600 --> 00:22:49,039
uh we call it message into the uam

581
00:22:49,039 --> 00:22:50,960
engine

582
00:22:50,960 --> 00:22:55,159
and finally we can write

583
00:22:59,280 --> 00:23:03,760
well as you can see there are six panels

584
00:23:03,760 --> 00:23:05,520
in the terminal

585
00:23:05,520 --> 00:23:09,520
you can check the vm state and

586
00:23:09,520 --> 00:23:11,679
blockchain information

587
00:23:11,679 --> 00:23:13,919
when we debug the

588
00:23:13,919 --> 00:23:17,120
disassembler code

589
00:23:18,000 --> 00:23:21,440
we can view all spotted commands now

590
00:23:21,440 --> 00:23:25,039
by entering help

591
00:23:25,600 --> 00:23:29,600
the debugger style pretty like gdb

592
00:23:29,600 --> 00:23:31,360
let's try to

593
00:23:31,360 --> 00:23:34,960
step the disassembly code

594
00:23:34,960 --> 00:23:38,720
entering si or step into

595
00:23:38,720 --> 00:23:42,480
and you can see the line of the pc is

596
00:23:42,480 --> 00:23:44,880
marked as a red

597
00:23:44,880 --> 00:23:48,159
we can see memory and stack changes in

598
00:23:48,159 --> 00:23:50,720
real time

599
00:23:50,720 --> 00:23:54,400
we can set bring points to

600
00:23:54,400 --> 00:23:56,400
any address

601
00:23:56,400 --> 00:23:59,679
and like here we set the breakpoint to

602
00:23:59,679 --> 00:24:01,600
785

603
00:24:01,600 --> 00:24:05,039
and we can use continue to execute to

604
00:24:05,039 --> 00:24:07,279
there

605
00:24:10,559 --> 00:24:14,240
we also support to write memory and

606
00:24:14,240 --> 00:24:15,840
stack

607
00:24:15,840 --> 00:24:19,840
and just use the right command

608
00:24:20,880 --> 00:24:24,799
for example we can try to write memory

609
00:24:24,799 --> 00:24:28,799
to write memory we need two parameters

610
00:24:28,799 --> 00:24:33,679
one is address and another is values

611
00:24:33,679 --> 00:24:36,960
here we write one two three four to

612
00:24:36,960 --> 00:24:38,720
address zero

613
00:24:38,720 --> 00:24:41,120
and now you can see

614
00:24:41,120 --> 00:24:45,158
rewriting is successful

615
00:24:46,080 --> 00:24:48,880
we can check information use command

616
00:24:48,880 --> 00:24:50,559
info

617
00:24:50,559 --> 00:24:53,360
like here we can check bring point by

618
00:24:53,360 --> 00:24:55,919
code and memory

619
00:24:55,919 --> 00:24:57,440
uh here we

620
00:24:57,440 --> 00:25:00,640
can input inform by code

621
00:25:00,640 --> 00:25:02,640
and here is the

622
00:25:02,640 --> 00:25:06,640
by code in memory view

623
00:25:06,640 --> 00:25:08,880
we can also check all

624
00:25:08,880 --> 00:25:12,799
breakpoint with have set

625
00:25:13,679 --> 00:25:17,440
sometimes we want to step a lot of times

626
00:25:17,440 --> 00:25:18,559
and

627
00:25:18,559 --> 00:25:21,039
watch the memory and the stack of

628
00:25:21,039 --> 00:25:22,720
changes

629
00:25:22,720 --> 00:25:24,400
we don't need to

630
00:25:24,400 --> 00:25:26,159
input si

631
00:25:26,159 --> 00:25:29,600
or step into button one time and one

632
00:25:29,600 --> 00:25:31,039
time

633
00:25:31,039 --> 00:25:36,159
and just need to input a command named

634
00:25:36,159 --> 00:25:38,240
auto

635
00:25:38,240 --> 00:25:40,840
you have two optional

636
00:25:40,840 --> 00:25:44,559
parameters firstly the count means we

637
00:25:44,559 --> 00:25:46,480
can also

638
00:25:46,480 --> 00:25:48,000
execute

639
00:25:48,000 --> 00:25:49,679
how many times

640
00:25:49,679 --> 00:25:50,640
and

641
00:25:50,640 --> 00:25:52,320
the other is

642
00:25:52,320 --> 00:25:56,640
sweep means how long it will wait every

643
00:25:56,640 --> 00:25:58,159
time

644
00:25:58,159 --> 00:26:02,240
you see each step five times after the

645
00:26:02,240 --> 00:26:05,120
executed command

646
00:26:05,120 --> 00:26:08,799
we can also let it execute until the end

647
00:26:08,799 --> 00:26:11,279
automatically

648
00:26:11,279 --> 00:26:15,600
just remove the count parameter

649
00:26:22,880 --> 00:26:25,120
you see it will

650
00:26:25,120 --> 00:26:27,918
stop and hit

651
00:26:29,120 --> 00:26:31,840
and because it is a

652
00:26:31,840 --> 00:26:34,880
deploy transaction so

653
00:26:34,880 --> 00:26:37,279
it will write the runtime code to the

654
00:26:37,279 --> 00:26:41,840
memory as you see at memory panel

655
00:26:41,840 --> 00:26:45,279
okay now let's see a more complex

656
00:26:45,279 --> 00:26:47,600
example

657
00:26:47,600 --> 00:26:50,720
this is a smart contract with fantasy

658
00:26:50,720 --> 00:26:53,440
vulnerability

659
00:26:53,440 --> 00:26:56,080
you can learn how it works through this

660
00:26:56,080 --> 00:26:57,760
picture

661
00:26:57,760 --> 00:27:02,240
uh basically it will be recursive and

662
00:27:02,240 --> 00:27:05,360
creates a messy child message again and

663
00:27:05,360 --> 00:27:06,799
then and again

664
00:27:06,799 --> 00:27:07,760
then

665
00:27:07,760 --> 00:27:11,520
until the balance of smart contracts

666
00:27:11,520 --> 00:27:15,679
less than 18 it will be back

667
00:27:15,679 --> 00:27:18,640
okay first of all let's

668
00:27:18,640 --> 00:27:21,279
run the whole thing results using

669
00:27:21,279 --> 00:27:23,840
debugger

670
00:27:24,159 --> 00:27:25,679
initial time

671
00:27:25,679 --> 00:27:28,240
the balance of attacker

672
00:27:28,240 --> 00:27:30,640
is 100 eth

673
00:27:30,640 --> 00:27:32,320
and

674
00:27:32,320 --> 00:27:33,360
after

675
00:27:33,360 --> 00:27:36,000
the attacking process

676
00:27:36,000 --> 00:27:37,840
on the attacker

677
00:27:37,840 --> 00:27:39,360
still

678
00:27:39,360 --> 00:27:43,158
almost 1988

679
00:27:43,679 --> 00:27:47,039
now let's open the debugger option and

680
00:27:47,039 --> 00:27:49,600
see what is going on

681
00:27:49,600 --> 00:27:52,240
inside

682
00:27:54,159 --> 00:27:57,120
okay now we are in the debugger

683
00:27:57,120 --> 00:28:00,320
and you can see the message the nonce of

684
00:28:00,320 --> 00:28:02,399
message is zero

685
00:28:02,399 --> 00:28:05,840
that means the tips of message

686
00:28:05,840 --> 00:28:09,360
we are at is zero

687
00:28:09,360 --> 00:28:12,399
and let's continue execute and see what

688
00:28:12,399 --> 00:28:16,000
you will happen

689
00:28:16,000 --> 00:28:18,399
number of nons

690
00:28:18,399 --> 00:28:23,440
increases from 0 to 40 and then it's

691
00:28:23,440 --> 00:28:25,039
reduced back

692
00:28:25,039 --> 00:28:28,559
and then we input ctrl d to create the

693
00:28:28,559 --> 00:28:32,240
debugger and it will execute

694
00:28:32,240 --> 00:28:34,399
next transaction

695
00:28:34,399 --> 00:28:35,760
and

696
00:28:35,760 --> 00:28:38,320
return the output

697
00:28:38,320 --> 00:28:41,520
i will open the debugger and this time

698
00:28:41,520 --> 00:28:44,320
we will make it slow

699
00:28:44,320 --> 00:28:48,399
we need to use the option no parameter

700
00:28:48,399 --> 00:28:50,559
names sweep

701
00:28:50,559 --> 00:28:52,240
same as the

702
00:28:52,240 --> 00:28:57,960
optional parameter sweep in the step in

703
00:28:59,520 --> 00:29:04,399
okay now we can watch it clearly

704
00:29:06,960 --> 00:29:09,600
and you can see it will jump between the

705
00:29:09,600 --> 00:29:12,960
rectum contract and

706
00:29:12,960 --> 00:29:16,760
an attacker contract

707
00:29:26,880 --> 00:29:31,640
now it will begin to reduce

708
00:29:44,159 --> 00:29:47,440
and we can see what has happened

709
00:29:47,440 --> 00:29:51,559
in memory and stack

710
00:29:58,159 --> 00:30:00,399
okay now the transaction

711
00:30:00,399 --> 00:30:03,520
execute finished so we can use the

712
00:30:03,520 --> 00:30:07,559
country to create

713
00:30:12,080 --> 00:30:14,480
next demo i want to show is

714
00:30:14,480 --> 00:30:18,559
smart contract symbolic execution

715
00:30:18,559 --> 00:30:21,279
use symbolic execution to

716
00:30:21,279 --> 00:30:22,720
detected the

717
00:30:22,720 --> 00:30:24,799
vulnerabilities of

718
00:30:24,799 --> 00:30:27,520
a smart contract is very easy into the

719
00:30:27,520 --> 00:30:29,039
engine

720
00:30:29,039 --> 00:30:33,120
we just need to create a ethhs vm

721
00:30:33,120 --> 00:30:36,480
then load the barcode to disassembler

722
00:30:36,480 --> 00:30:38,320
create a

723
00:30:38,320 --> 00:30:39,840
analyzer

724
00:30:39,840 --> 00:30:41,520
and after

725
00:30:41,520 --> 00:30:43,840
analysis finished

726
00:30:43,840 --> 00:30:48,120
it will return a report

727
00:30:52,960 --> 00:30:55,520
as you can see

728
00:30:55,520 --> 00:30:58,799
we will create a panel for every

729
00:30:58,799 --> 00:31:00,880
vulnerability

730
00:31:00,880 --> 00:31:02,320
i include

731
00:31:02,320 --> 00:31:04,960
the vulnerability runability name id

732
00:31:04,960 --> 00:31:06,880
function and

733
00:31:06,880 --> 00:31:10,880
how we can recurrent it

734
00:31:13,840 --> 00:31:16,559
in the end i want to show our smart

735
00:31:16,559 --> 00:31:20,960
contract security detection platform

736
00:31:20,960 --> 00:31:25,919
the detection based on loose match

737
00:31:25,919 --> 00:31:28,720
now let me start up the back end and the

738
00:31:28,720 --> 00:31:32,200
front end

739
00:31:43,279 --> 00:31:46,240
well that's it which i need to improve

740
00:31:46,240 --> 00:31:49,840
the contract by code and click the ok

741
00:31:49,840 --> 00:31:52,320
button

742
00:31:52,880 --> 00:31:56,000
here i have 5 contracts and

743
00:31:56,000 --> 00:31:57,120
let's see

744
00:31:57,120 --> 00:32:01,399
the detection results

745
00:32:04,240 --> 00:32:06,960
if the rules matched it will be marked

746
00:32:06,960 --> 00:32:10,200
in red

747
00:32:28,320 --> 00:32:33,639
you can see the detection is very fast

748
00:33:13,679 --> 00:33:16,240
users also can write their

749
00:33:16,240 --> 00:33:20,159
own blues by themselves

750
00:33:20,159 --> 00:33:23,120
okay so that's what i want to show see

751
00:33:23,120 --> 00:33:25,840
you

752
00:33:27,360 --> 00:33:29,039
so uh

753
00:33:29,039 --> 00:33:33,279
thank you for the demonstration so uh

754
00:33:33,279 --> 00:33:35,760
before i end the entire presentation all

755
00:33:35,760 --> 00:33:39,200
right uh entire sharing session

756
00:33:39,200 --> 00:33:40,880
some other things that we would like to

757
00:33:40,880 --> 00:33:43,519
share it's uh

758
00:33:43,519 --> 00:33:46,799
uh finally we released our qemu five out

759
00:33:46,799 --> 00:33:48,960
of we didn't release qmi5 for the help

760
00:33:48,960 --> 00:33:51,360
we're talking about uh finally we

761
00:33:51,360 --> 00:33:53,679
released a unicorn 2

762
00:33:53,679 --> 00:33:55,919
that integrate with uh

763
00:33:55,919 --> 00:33:58,960
qemu 5 so you have the complete

764
00:33:58,960 --> 00:33:59,760
uh

765
00:33:59,760 --> 00:34:01,600
cpu architecture that's supported by a

766
00:34:01,600 --> 00:34:03,840
uh qmu5

767
00:34:03,840 --> 00:34:05,279
uh there are some other things that's

768
00:34:05,279 --> 00:34:07,200
still in the road map so uh we are still

769
00:34:07,200 --> 00:34:09,119
looking at the android java by code

770
00:34:09,119 --> 00:34:12,079
layer instrumentation um

771
00:34:12,079 --> 00:34:14,399
something rather big but uh we are still

772
00:34:14,399 --> 00:34:15,760
not

773
00:34:15,760 --> 00:34:16,719
maybe

774
00:34:16,719 --> 00:34:18,079
it's

775
00:34:18,079 --> 00:34:20,560
in the planning but uh

776
00:34:20,560 --> 00:34:22,239
nothing has started yet

777
00:34:22,239 --> 00:34:25,280
uh we did a bit off on a

778
00:34:25,280 --> 00:34:27,520
host implementation for cisco the host

779
00:34:27,520 --> 00:34:30,560
implementation it's something that we

780
00:34:30,560 --> 00:34:33,279
wanted to do

781
00:34:33,440 --> 00:34:34,560
we

782
00:34:34,560 --> 00:34:37,199
got a bit of uh

783
00:34:37,199 --> 00:34:39,119
achievement but uh the code is still

784
00:34:39,119 --> 00:34:41,760
rather ugly we are still haven't decided

785
00:34:41,760 --> 00:34:44,560
should we add into the uh uh then the

786
00:34:44,560 --> 00:34:46,879
the core of our chilling or not

787
00:34:46,879 --> 00:34:50,159
uh we are cleaning up our iphone

788
00:34:50,159 --> 00:34:53,679
uh os mac os uh mac os m1 emulation

789
00:34:53,679 --> 00:34:57,359
support uh this should be uh

790
00:34:57,359 --> 00:35:00,480
uh rather quick we i i do think we

791
00:35:00,480 --> 00:35:04,640
should be able to finish before q4 of

792
00:35:04,640 --> 00:35:07,520
2021

793
00:35:07,599 --> 00:35:09,680
obviously we'll be finishing uh faster

794
00:35:09,680 --> 00:35:12,320
than uh you know covet

795
00:35:12,320 --> 00:35:14,400
unlock period

796
00:35:14,400 --> 00:35:17,359
uh

797
00:35:17,359 --> 00:35:19,040
we are still looking at uh windows

798
00:35:19,040 --> 00:35:20,720
emulation uh i think if you have

799
00:35:20,720 --> 00:35:23,440
followed our so-called little podcast on

800
00:35:23,440 --> 00:35:28,000
our youtube channel we should be uh

801
00:35:28,000 --> 00:35:29,680
we will talk about this and then we

802
00:35:29,680 --> 00:35:32,480
wanted to find a way to uh to to to fix

803
00:35:32,480 --> 00:35:33,680
this thing up

804
00:35:33,680 --> 00:35:36,320
uh as soon as uh possible all right uh

805
00:35:36,320 --> 00:35:38,560
we released a smart contract engine uh

806
00:35:38,560 --> 00:35:40,880
we raised a evm and uh

807
00:35:40,880 --> 00:35:42,240
uh

808
00:35:42,240 --> 00:35:43,839
i heard there are some other groups

809
00:35:43,839 --> 00:35:46,480
working on the wasm so hopefully uh

810
00:35:46,480 --> 00:35:48,880
we'll be seeing this engineer real soon

811
00:35:48,880 --> 00:35:49,839
uh

812
00:35:49,839 --> 00:35:52,880
we released the mcu engine yes uh we are

813
00:35:52,880 --> 00:35:55,680
still working on a lot of stuff on mcu

814
00:35:55,680 --> 00:35:58,480
so please do feel free to join us and uh

815
00:35:58,480 --> 00:36:00,079
you know give us a bit more pull

816
00:36:00,079 --> 00:36:03,760
requests on the project you know

817
00:36:03,760 --> 00:36:05,920
so uh

818
00:36:05,920 --> 00:36:07,760
before we uh try to take in any

819
00:36:07,760 --> 00:36:10,240
questions all right uh well i'm not too

820
00:36:10,240 --> 00:36:12,000
sure how do we take in uh questions from

821
00:36:12,000 --> 00:36:13,599
the virtual conference but you can still

822
00:36:13,599 --> 00:36:15,920
always uh come over and ping us on

823
00:36:15,920 --> 00:36:19,200
on the telegram group uh drop us a a

824
00:36:19,200 --> 00:36:21,760
twitter message all right uh of course

825
00:36:21,760 --> 00:36:23,760
uh

826
00:36:23,760 --> 00:36:25,599
it will be more responsive in the

827
00:36:25,599 --> 00:36:27,200
telegram group because more people were

828
00:36:27,200 --> 00:36:29,839
there you know a lot of people

829
00:36:29,839 --> 00:36:31,680
will be able to help you if you have any

830
00:36:31,680 --> 00:36:34,000
issues on the chilling framework uh

831
00:36:34,000 --> 00:36:36,720
always always always go to our github

832
00:36:36,720 --> 00:36:38,880
repo start our project you know that is

833
00:36:38,880 --> 00:36:42,160
part of the kpi that that we know

834
00:36:42,160 --> 00:36:44,400
you like our project and you appreciate

835
00:36:44,400 --> 00:36:48,000
our project so uh

836
00:36:48,560 --> 00:36:50,160
yeah uh

837
00:36:50,160 --> 00:36:52,560
always always always

838
00:36:52,560 --> 00:36:54,160
you know come to our telegram group and

839
00:36:54,160 --> 00:36:55,280
then uh

840
00:36:55,280 --> 00:36:58,000
look forward and uh ask us if you have

841
00:36:58,000 --> 00:36:59,280
any questions

842
00:36:59,280 --> 00:37:03,040
so all right that's all for today and uh

843
00:37:03,040 --> 00:37:06,599
thank you very much

844
00:37:10,400 --> 00:37:12,480
you

