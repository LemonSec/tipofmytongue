1
00:00:05,290 --> 00:00:08,480
[Applause]

2
00:00:08,480 --> 00:00:11,519
all right uh can everyone hear me okay

3
00:00:11,519 --> 00:00:12,960
loud and clear okay yeah there is uh

4
00:00:12,960 --> 00:00:15,120
there is uh two dakotas uh north and the

5
00:00:15,120 --> 00:00:17,920
south so thank you for pointing that out

6
00:00:17,920 --> 00:00:19,199
that's always good to get recognition

7
00:00:19,199 --> 00:00:20,160
for that

8
00:00:20,160 --> 00:00:22,080
my name is josh i did leave the title

9
00:00:22,080 --> 00:00:23,840
off on purpose

10
00:00:23,840 --> 00:00:25,599
and i really appreciate the opportunity

11
00:00:25,599 --> 00:00:27,680
to be here with you all

12
00:00:27,680 --> 00:00:29,439
first time i've been in a room with a

13
00:00:29,439 --> 00:00:31,199
lot of people and quite some time as i

14
00:00:31,199 --> 00:00:32,960
sure it is for many of you so it's been

15
00:00:32,960 --> 00:00:34,960
a great opportunity to get here

16
00:00:34,960 --> 00:00:37,120
augusta is beautiful from the back of a

17
00:00:37,120 --> 00:00:38,640
lift at 1am so i'm really looking

18
00:00:38,640 --> 00:00:40,800
forward to seeing the rest of it today

19
00:00:40,800 --> 00:00:43,200
as we get going as phil said

20
00:00:43,200 --> 00:00:44,640
we're here to represent the open

21
00:00:44,640 --> 00:00:46,559
information security foundation that is

22
00:00:46,559 --> 00:00:48,160
a mouthful the oisf which is the

23
00:00:48,160 --> 00:00:50,320
foundation that supports circada

24
00:00:50,320 --> 00:00:52,480
so thank you phil doug and everyone for

25
00:00:52,480 --> 00:00:54,320
security onion for this opportunity and

26
00:00:54,320 --> 00:00:55,920
for everything that you do

27
00:00:55,920 --> 00:00:58,320
my main goal today other than to just

28
00:00:58,320 --> 00:01:00,719
feel some time is to talk mainly about

29
00:01:00,719 --> 00:01:02,000
surakata

30
00:01:02,000 --> 00:01:04,400
to focus about or on threats and to talk

31
00:01:04,400 --> 00:01:06,560
about circada metadata so so hopefully

32
00:01:06,560 --> 00:01:09,360
if you are a user of surakata you'll see

33
00:01:09,360 --> 00:01:10,880
some additional capabilities that maybe

34
00:01:10,880 --> 00:01:12,720
you didn't know were there if you're not

35
00:01:12,720 --> 00:01:14,240
a user maybe this will get you to

36
00:01:14,240 --> 00:01:16,240
consider it and maybe consider using it

37
00:01:16,240 --> 00:01:18,080
in ways that you didn't maybe

38
00:01:18,080 --> 00:01:19,920
expect

39
00:01:19,920 --> 00:01:21,520
outside of this i guess just a little

40
00:01:21,520 --> 00:01:23,680
bit of background for me i also teach at

41
00:01:23,680 --> 00:01:26,159
a university in south dakota we do cyber

42
00:01:26,159 --> 00:01:28,159
much like the universities here in

43
00:01:28,159 --> 00:01:29,840
augusta

44
00:01:29,840 --> 00:01:31,759
retiring from the iowa air national

45
00:01:31,759 --> 00:01:34,000
guard so i just eclipsed 20 years this

46
00:01:34,000 --> 00:01:36,000
last summer i'm now in the obligatory

47
00:01:36,000 --> 00:01:37,520
grow my hair until i can put it in a

48
00:01:37,520 --> 00:01:38,960
ponytail phase

49
00:01:38,960 --> 00:01:40,560
i don't know if it's going well my kids

50
00:01:40,560 --> 00:01:42,159
say it looks awful but i'm gonna i said

51
00:01:42,159 --> 00:01:44,079
it's at least a year commitment now

52
00:01:44,079 --> 00:01:45,520
i can commit 20 to the guard i can

53
00:01:45,520 --> 00:01:48,640
commit a year to my hair um

54
00:01:48,640 --> 00:01:51,360
and do some three research for hp

55
00:01:51,360 --> 00:01:53,040
formerly bromium they got acquired by

56
00:01:53,040 --> 00:01:55,119
the hp giant a couple years ago

57
00:01:55,119 --> 00:01:56,560
endpoint protection through micro

58
00:01:56,560 --> 00:01:58,159
virtualization i could talk about that

59
00:01:58,159 --> 00:01:59,600
all day as well

60
00:01:59,600 --> 00:02:02,560
and then some trainings and such

61
00:02:02,560 --> 00:02:04,719
okay so a little bit about oisf it is a

62
00:02:04,719 --> 00:02:07,759
us-based 501c3 it is the foundation that

63
00:02:07,759 --> 00:02:08,878
is tasked right now solely was

64
00:02:08,878 --> 00:02:11,920
supporting the cerakata project

65
00:02:11,920 --> 00:02:14,959
uh it is dedicated to providing that

66
00:02:14,959 --> 00:02:16,400
that platform for the ongoing

67
00:02:16,400 --> 00:02:18,239
development of cerakata

68
00:02:18,239 --> 00:02:20,560
that includes a variety of full-time and

69
00:02:20,560 --> 00:02:22,480
part-time developers

70
00:02:22,480 --> 00:02:25,120
contractors other support staff folks

71
00:02:25,120 --> 00:02:26,720
like me i don't do anything with the

72
00:02:26,720 --> 00:02:28,000
development in cerakata i have a

73
00:02:28,000 --> 00:02:30,000
development history but

74
00:02:30,000 --> 00:02:31,440
you probably don't want me writing code

75
00:02:31,440 --> 00:02:33,280
at this point in my career

76
00:02:33,280 --> 00:02:35,040
so it's the organization that makes it

77
00:02:35,040 --> 00:02:36,400
all happen

78
00:02:36,400 --> 00:02:39,840
the foundation and the project itself is

79
00:02:39,840 --> 00:02:42,000
supported totally by the community

80
00:02:42,000 --> 00:02:44,319
both directly through financial support

81
00:02:44,319 --> 00:02:46,080
consortium membership attendance to our

82
00:02:46,080 --> 00:02:47,200
conference

83
00:02:47,200 --> 00:02:49,120
as well as

84
00:02:49,120 --> 00:02:51,120
contributions a lot of the significant

85
00:02:51,120 --> 00:02:53,360
contributions and ideas for the project

86
00:02:53,360 --> 00:02:55,440
have come from the community those out

87
00:02:55,440 --> 00:02:58,159
there using it day in and day out

88
00:02:58,159 --> 00:03:00,080
we have some forums we went ahead and

89
00:03:00,080 --> 00:03:02,480
set up a discourse not a discord

90
00:03:02,480 --> 00:03:03,760
although we are wrestling with our

91
00:03:03,760 --> 00:03:05,440
discord right now

92
00:03:05,440 --> 00:03:08,159
in order to provide a community space

93
00:03:08,159 --> 00:03:10,640
this was the first pivot from irc so i'm

94
00:03:10,640 --> 00:03:12,560
really proud of the team we were able to

95
00:03:12,560 --> 00:03:14,879
pivot off of irc i no longer have to

96
00:03:14,879 --> 00:03:16,720
open up jabber

97
00:03:16,720 --> 00:03:19,120
and uh and we can use i guess a browser

98
00:03:19,120 --> 00:03:20,239
to get to these forums so please

99
00:03:20,239 --> 00:03:22,000
consider joining a lot of great

100
00:03:22,000 --> 00:03:24,239
conversation the community's there it's

101
00:03:24,239 --> 00:03:25,840
a it's an open space to talk all things

102
00:03:25,840 --> 00:03:28,080
surakata

103
00:03:28,080 --> 00:03:30,560
a couple weeks we have surcon our annual

104
00:03:30,560 --> 00:03:32,560
user conference this will be in boston

105
00:03:32,560 --> 00:03:35,840
massachusetts so october 18th through

106
00:03:35,840 --> 00:03:36,879
the

107
00:03:36,879 --> 00:03:38,239
well the week of the 18th now i'm kind

108
00:03:38,239 --> 00:03:40,080
of forgetting my dates so please

109
00:03:40,080 --> 00:03:41,280
consider we've got a couple days of

110
00:03:41,280 --> 00:03:42,560
training leading up to the conference

111
00:03:42,560 --> 00:03:44,480
the conference will have much like this

112
00:03:44,480 --> 00:03:45,519
talks

113
00:03:45,519 --> 00:03:47,280
development discussions road map

114
00:03:47,280 --> 00:03:48,799
planning and it's an opportunity for the

115
00:03:48,799 --> 00:03:50,640
community to really come and have their

116
00:03:50,640 --> 00:03:52,640
voice heard on where surakata should

117
00:03:52,640 --> 00:03:54,799
head next

118
00:03:54,799 --> 00:03:56,640
so a little about sarakata

119
00:03:56,640 --> 00:03:58,480
it was written quite a few years ago in

120
00:03:58,480 --> 00:04:02,480
2009 by the now famous victor julian a

121
00:04:02,480 --> 00:04:03,680
little bit of trivia if you find

122
00:04:03,680 --> 00:04:05,280
yourself at suricon this might come in

123
00:04:05,280 --> 00:04:07,439
handy is

124
00:04:07,439 --> 00:04:10,000
that it was originally named vips

125
00:04:10,000 --> 00:04:12,720
victor's ips very creative

126
00:04:12,720 --> 00:04:15,680
it is open source gplv2 on github we

127
00:04:15,680 --> 00:04:18,079
have a very diverse team working on uh

128
00:04:18,079 --> 00:04:20,959
this project from saskatoon canada to

129
00:04:20,959 --> 00:04:23,280
sioux falls south dakota to um you know

130
00:04:23,280 --> 00:04:25,360
parts in india so it's an interesting

131
00:04:25,360 --> 00:04:27,680
and very dynamic organization it's fun

132
00:04:27,680 --> 00:04:29,120
scheduling meetings and times to get

133
00:04:29,120 --> 00:04:30,880
together virtual and in person because

134
00:04:30,880 --> 00:04:33,840
we're spanning so many time zones

135
00:04:33,840 --> 00:04:36,479
a pretty common deployment scenario

136
00:04:36,479 --> 00:04:37,840
again i don't want to dwell on this too

137
00:04:37,840 --> 00:04:38,960
long

138
00:04:38,960 --> 00:04:40,880
but looking at an elastic stack or a

139
00:04:40,880 --> 00:04:42,800
splunk you have cerakata as one of those

140
00:04:42,800 --> 00:04:44,720
primary data generators

141
00:04:44,720 --> 00:04:46,160
it's going to be placed on a network in

142
00:04:46,160 --> 00:04:47,600
a lot of scenarios

143
00:04:47,600 --> 00:04:49,199
listening to your network traffic

144
00:04:49,199 --> 00:04:50,479
however you're acquiring that network

145
00:04:50,479 --> 00:04:52,400
traffic and sending it to it and then

146
00:04:52,400 --> 00:04:54,080
from there it's going to be able to not

147
00:04:54,080 --> 00:04:56,000
only generate your ids alerts which is

148
00:04:56,000 --> 00:04:58,000
what most folks probably associate

149
00:04:58,000 --> 00:05:00,639
cerakata with but then also all sorts of

150
00:05:00,639 --> 00:05:03,280
metadata protocol specific logs file

151
00:05:03,280 --> 00:05:05,120
identification file extraction can

152
00:05:05,120 --> 00:05:06,560
generate pcap so there's quite a few

153
00:05:06,560 --> 00:05:08,880
things that we'll they'll touch on today

154
00:05:08,880 --> 00:05:10,960
so it's going to take the traffic in

155
00:05:10,960 --> 00:05:13,199
it's going to take rules from local and

156
00:05:13,199 --> 00:05:14,880
external sources to help generate those

157
00:05:14,880 --> 00:05:16,479
alerts it's going to generate the

158
00:05:16,479 --> 00:05:19,199
outputs which can then be fed to

159
00:05:19,199 --> 00:05:21,120
you know a file beat or there is a file

160
00:05:21,120 --> 00:05:22,960
beat for circada that works well comes

161
00:05:22,960 --> 00:05:25,360
with some some default dashboards

162
00:05:25,360 --> 00:05:27,360
you can ship it directly to log stash

163
00:05:27,360 --> 00:05:29,600
adjust it into elastic since the primary

164
00:05:29,600 --> 00:05:31,440
output is in json format it's just sort

165
00:05:31,440 --> 00:05:33,280
of ready to go

166
00:05:33,280 --> 00:05:35,039
and then begin to visualize that through

167
00:05:35,039 --> 00:05:37,360
tools like cabana or evebox or anything

168
00:05:37,360 --> 00:05:40,639
that can consume that data

169
00:05:41,039 --> 00:05:43,520
so what can circ how to do

170
00:05:43,520 --> 00:05:45,199
most of this if not all of this is

171
00:05:45,199 --> 00:05:47,120
pretty well documented on read the docs

172
00:05:47,120 --> 00:05:48,560
so i would encourage you to check that

173
00:05:48,560 --> 00:05:50,240
out if you haven't

174
00:05:50,240 --> 00:05:52,639
as i said pretty standards in terms of

175
00:05:52,639 --> 00:05:53,919
configuration and output the

176
00:05:53,919 --> 00:05:56,319
configuration is yaml based with pretty

177
00:05:56,319 --> 00:05:57,840
good commenting inside of it so it's not

178
00:05:57,840 --> 00:05:59,919
too hard to get in there and start

179
00:05:59,919 --> 00:06:01,840
modifying the behaviors of your cerakata

180
00:06:01,840 --> 00:06:05,120
deployment the json native default json

181
00:06:05,120 --> 00:06:06,880
output easy to integrate into other

182
00:06:06,880 --> 00:06:08,000
workflows

183
00:06:08,000 --> 00:06:09,759
sims and everything else

184
00:06:09,759 --> 00:06:11,440
it is multi-threaded there is hardware

185
00:06:11,440 --> 00:06:13,360
acceleration available typically if

186
00:06:13,360 --> 00:06:14,400
you're thinking about hardware

187
00:06:14,400 --> 00:06:16,720
acceleration dedicated network interface

188
00:06:16,720 --> 00:06:18,160
cards and the like

189
00:06:18,160 --> 00:06:19,440
you know you're talking a pretty serious

190
00:06:19,440 --> 00:06:20,800
deployment

191
00:06:20,800 --> 00:06:23,039
native ipv6 support some auto protocol

192
00:06:23,039 --> 00:06:24,479
detection we'll talk a little bit about

193
00:06:24,479 --> 00:06:26,720
auto protocol detection today um

194
00:06:26,720 --> 00:06:29,600
advanced support for a lot of the more

195
00:06:29,600 --> 00:06:31,280
common and popular application layer

196
00:06:31,280 --> 00:06:33,680
protocols and by that just saying that

197
00:06:33,680 --> 00:06:36,160
there is um greater flexibility and the

198
00:06:36,160 --> 00:06:37,919
rules that are written and then there's

199
00:06:37,919 --> 00:06:40,240
a greater amount of protocol data that's

200
00:06:40,240 --> 00:06:41,919
being logged as it's inspecting that

201
00:06:41,919 --> 00:06:43,440
network traffic

202
00:06:43,440 --> 00:06:45,039
uh it does have the ability to do both

203
00:06:45,039 --> 00:06:47,039
file identification and file extraction

204
00:06:47,039 --> 00:06:49,039
so i can id files on the wire as well as

205
00:06:49,039 --> 00:06:50,800
then extract those and we'll actually do

206
00:06:50,800 --> 00:06:52,400
that in just a few minutes

207
00:06:52,400 --> 00:06:54,240
this includes generating checksums on

208
00:06:54,240 --> 00:06:57,759
the fly on md5 sha-1 shot twos

209
00:06:57,759 --> 00:06:59,759
and netflow outputs available upon

210
00:06:59,759 --> 00:07:02,000
request

211
00:07:02,000 --> 00:07:04,479
it is extensible through lewis scripting

212
00:07:04,479 --> 00:07:06,080
although i don't think that that's super

213
00:07:06,080 --> 00:07:06,960
active

214
00:07:06,960 --> 00:07:10,479
uh ipl lists guip ip reputation

215
00:07:10,479 --> 00:07:12,400
there's bypass rules for dealing with

216
00:07:12,400 --> 00:07:14,880
large flows such as streaming services

217
00:07:14,880 --> 00:07:16,880
there's a community id we'll take a look

218
00:07:16,880 --> 00:07:20,160
at that as well uh generation of j3 j3s

219
00:07:20,160 --> 00:07:21,520
when it comes to dealing with tls

220
00:07:21,520 --> 00:07:22,720
traffic

221
00:07:22,720 --> 00:07:24,720
and increasing and ongoing kind of

222
00:07:24,720 --> 00:07:26,720
support for different scada protocols

223
00:07:26,720 --> 00:07:29,520
especially for our ics systems

224
00:07:29,520 --> 00:07:32,000
as i said full packet capture

225
00:07:32,000 --> 00:07:33,120
so that's just a list of a few of the

226
00:07:33,120 --> 00:07:34,479
features

227
00:07:34,479 --> 00:07:36,720
what's next we do anticipate the release

228
00:07:36,720 --> 00:07:38,960
of cerakata 7 to come here sometime in

229
00:07:38,960 --> 00:07:41,120
early 2022

230
00:07:41,120 --> 00:07:43,919
the 6.0 branch 6.x branch is what we're

231
00:07:43,919 --> 00:07:46,639
currently is the stable and the release

232
00:07:46,639 --> 00:07:48,560
tempo has been usually about one major

233
00:07:48,560 --> 00:07:50,800
release per year and we tried to get

234
00:07:50,800 --> 00:07:53,360
that out at suricon but just with some

235
00:07:53,360 --> 00:07:55,360
of the challenges this year not quite

236
00:07:55,360 --> 00:07:56,639
going to happen

237
00:07:56,639 --> 00:07:58,240
we've got some trainings coming up

238
00:07:58,240 --> 00:08:01,599
suricon and boston uh deep sec troopers

239
00:08:01,599 --> 00:08:03,120
and flo con those will all be virtual

240
00:08:03,120 --> 00:08:05,120
events and then it looks like we're

241
00:08:05,120 --> 00:08:06,639
going to arsac

242
00:08:06,639 --> 00:08:08,240
in san francisco so we'll see what

243
00:08:08,240 --> 00:08:10,639
happens there

244
00:08:10,639 --> 00:08:12,000
if anyone has any questions along the

245
00:08:12,000 --> 00:08:14,000
way please feel free to just shout out

246
00:08:14,000 --> 00:08:16,160
or i guess you got those onions so that

247
00:08:16,160 --> 00:08:18,319
we can chuck them at each other right

248
00:08:18,319 --> 00:08:20,400
okay i'll be on the lookout then you

249
00:08:20,400 --> 00:08:24,599
guys have the high ground i don't

250
00:08:32,159 --> 00:08:34,320
okay so hopefully uh wes made the

251
00:08:34,320 --> 00:08:36,719
appropriate sacrifices to the demos demo

252
00:08:36,719 --> 00:08:38,399
guides this morning because i'm going to

253
00:08:38,399 --> 00:08:40,559
do a lot of demonstration today again if

254
00:08:40,559 --> 00:08:42,080
there's any trouble seeing the screen i

255
00:08:42,080 --> 00:08:44,480
can see it it looks good to me

256
00:08:44,480 --> 00:08:46,240
but you know i've got 40 year old eyes

257
00:08:46,240 --> 00:08:47,200
now so

258
00:08:47,200 --> 00:08:48,640
might not look good to you so let me

259
00:08:48,640 --> 00:08:51,120
know if i need to increase anything

260
00:08:51,120 --> 00:08:53,440
the distribution here that i'm using um

261
00:08:53,440 --> 00:08:55,200
is selks it's something that's homegrown

262
00:08:55,200 --> 00:08:56,959
from one of our core developers one of

263
00:08:56,959 --> 00:08:59,279
our qa folks uh peter manav and his

264
00:08:59,279 --> 00:09:01,360
company stamis we use that for a lot of

265
00:09:01,360 --> 00:09:03,920
our training because it's focused on you

266
00:09:03,920 --> 00:09:06,880
know showcasing circada so it's a linux

267
00:09:06,880 --> 00:09:08,880
a debian-based distro circuit is

268
00:09:08,880 --> 00:09:10,800
installed typically peter likes to live

269
00:09:10,800 --> 00:09:12,480
on the edge so we've got the 7-0 dev

270
00:09:12,480 --> 00:09:13,839
branch on here

271
00:09:13,839 --> 00:09:16,000
i guess it's his way of extending his qa

272
00:09:16,000 --> 00:09:17,760
capabilities

273
00:09:17,760 --> 00:09:20,320
and and then an elastic stack so it's a

274
00:09:20,320 --> 00:09:22,480
little resource hungry and then you know

275
00:09:22,480 --> 00:09:23,680
kind of the standard stuff we've got

276
00:09:23,680 --> 00:09:25,120
kibana and we've got some other

277
00:09:25,120 --> 00:09:26,959
dashboards that we'll use i don't want

278
00:09:26,959 --> 00:09:28,320
to spend too much time in the browser

279
00:09:28,320 --> 00:09:29,440
though i do want to spend a little bit

280
00:09:29,440 --> 00:09:32,000
more time just dealing with the raw data

281
00:09:32,000 --> 00:09:34,160
you can download this from the github

282
00:09:34,160 --> 00:09:35,120
if you

283
00:09:35,120 --> 00:09:38,080
want this specific distro this this vm

284
00:09:38,080 --> 00:09:39,680
that i have right here i'm happy to

285
00:09:39,680 --> 00:09:41,760
upload it and share it via a link and i

286
00:09:41,760 --> 00:09:44,560
can do that as well

287
00:09:47,360 --> 00:09:51,200
some of the tools that are available

288
00:09:51,200 --> 00:09:53,600
we have moloch formerly known as moloch

289
00:09:53,600 --> 00:09:55,760
it's now archime

290
00:09:55,760 --> 00:09:57,360
generating data on its own so i'm not

291
00:09:57,360 --> 00:09:58,399
going to spend a lot of time with that

292
00:09:58,399 --> 00:10:00,480
but it is set up by default we'll take a

293
00:10:00,480 --> 00:10:01,839
look at evebox that's a really

294
00:10:01,839 --> 00:10:03,040
lightweight

295
00:10:03,040 --> 00:10:05,680
alert manager with some ability to look

296
00:10:05,680 --> 00:10:07,360
at the metadata

297
00:10:07,360 --> 00:10:10,000
sirius is something very unique to selks

298
00:10:10,000 --> 00:10:12,240
it's here to help with not only managing

299
00:10:12,240 --> 00:10:14,720
rule sets but then also

300
00:10:14,720 --> 00:10:15,600
you know

301
00:10:15,600 --> 00:10:18,399
other configuration for the system and

302
00:10:18,399 --> 00:10:20,240
some of its own kind of home-built

303
00:10:20,240 --> 00:10:22,800
dashboards and visualizations as well

304
00:10:22,800 --> 00:10:24,720
of course there's kibana what else stack

305
00:10:24,720 --> 00:10:26,560
wouldn't be complete without that

306
00:10:26,560 --> 00:10:28,640
and with that comes quite a few

307
00:10:28,640 --> 00:10:30,640
visualizations and dashboards so again

308
00:10:30,640 --> 00:10:32,880
the idea here isn't is really just to

309
00:10:32,880 --> 00:10:34,560
have something to showcase cerakata

310
00:10:34,560 --> 00:10:36,240
everything is really driven off of

311
00:10:36,240 --> 00:10:38,800
cerakata data and so that's what we like

312
00:10:38,800 --> 00:10:41,199
to go with

313
00:10:42,480 --> 00:10:44,079
when it comes to updating those rules

314
00:10:44,079 --> 00:10:46,959
that's one of the first thing i might do

315
00:10:46,959 --> 00:10:50,640
sirius is one way to do that

316
00:10:54,640 --> 00:10:57,360
i've got to drill down to the

317
00:10:57,360 --> 00:11:01,800
management side of things and

318
00:11:02,160 --> 00:11:04,160
circadas so we have sources we have rule

319
00:11:04,160 --> 00:11:06,079
sets and then we have circada itself and

320
00:11:06,079 --> 00:11:08,000
this is a pretty standard flow

321
00:11:08,000 --> 00:11:09,839
the defaults are kind of the go-to rule

322
00:11:09,839 --> 00:11:11,680
manager actually ships with circuit all

323
00:11:11,680 --> 00:11:13,680
recent major versions of cerakata we'll

324
00:11:13,680 --> 00:11:15,120
take a look at that in a minute circuit

325
00:11:15,120 --> 00:11:16,320
update

326
00:11:16,320 --> 00:11:18,079
so the sources where we're pulling our

327
00:11:18,079 --> 00:11:19,680
rules from

328
00:11:19,680 --> 00:11:21,600
with this utility you can build rule

329
00:11:21,600 --> 00:11:23,279
sets so you can take different rule

330
00:11:23,279 --> 00:11:24,959
sources and combine them into rule sets

331
00:11:24,959 --> 00:11:27,200
based off of your use case or need

332
00:11:27,200 --> 00:11:30,079
and then once we have updated those

333
00:11:30,079 --> 00:11:31,839
we do need to go ahead and not only

334
00:11:31,839 --> 00:11:33,839
download those but have the utility

335
00:11:33,839 --> 00:11:35,200
typically what they do now is take all

336
00:11:35,200 --> 00:11:36,720
of those rule sources they combine them

337
00:11:36,720 --> 00:11:39,040
into one rule file and then write that

338
00:11:39,040 --> 00:11:40,560
to the file system

339
00:11:40,560 --> 00:11:42,959
if circada is running then you can ask

340
00:11:42,959 --> 00:11:45,120
it to do a live rule set reload which

341
00:11:45,120 --> 00:11:47,440
stops the stops circada from having to

342
00:11:47,440 --> 00:11:49,519
stop and re-initialize

343
00:11:49,519 --> 00:11:51,680
in a training vm like this we just need

344
00:11:51,680 --> 00:11:53,279
to write them to the file system so that

345
00:11:53,279 --> 00:11:55,440
when we run seracota we're going to work

346
00:11:55,440 --> 00:11:57,200
with this offline mode

347
00:11:57,200 --> 00:11:59,040
when we run it then it just knows to

348
00:11:59,040 --> 00:12:00,959
blow of course the most recent

349
00:12:00,959 --> 00:12:02,320
rule set

350
00:12:02,320 --> 00:12:03,920
i've already done that but that's just

351
00:12:03,920 --> 00:12:06,399
one way of managing those rules

352
00:12:06,399 --> 00:12:10,120
the other as i said

353
00:12:12,240 --> 00:12:14,160
oh here we go

354
00:12:14,160 --> 00:12:16,880
what's going on

355
00:12:22,720 --> 00:12:25,200
must be a new new mac feature i just

356
00:12:25,200 --> 00:12:27,680
updated

357
00:12:28,079 --> 00:12:29,760
is circuit update

358
00:12:29,760 --> 00:12:31,440
so it's a command line driven way in

359
00:12:31,440 --> 00:12:32,800
order to do all of the same things that

360
00:12:32,800 --> 00:12:33,920
you would do with rules configure

361
00:12:33,920 --> 00:12:36,240
sources add sources enable disable

362
00:12:36,240 --> 00:12:37,360
update

363
00:12:37,360 --> 00:12:39,200
modify as well so something i'm not

364
00:12:39,200 --> 00:12:40,880
going to talk a lot about today

365
00:12:40,880 --> 00:12:43,600
but you get maybe the et set the et open

366
00:12:43,600 --> 00:12:44,720
et pro

367
00:12:44,720 --> 00:12:46,079
all of those are alert you want to make

368
00:12:46,079 --> 00:12:48,160
some of those drop well you can create

369
00:12:48,160 --> 00:12:50,880
modification files to modify the rules

370
00:12:50,880 --> 00:12:52,560
that you want to change and then you

371
00:12:52,560 --> 00:12:55,279
circle to update to manage that

372
00:12:55,279 --> 00:12:56,959
and this is what ships with circada by

373
00:12:56,959 --> 00:12:59,360
default now

374
00:12:59,360 --> 00:13:01,519
now when it comes to

375
00:13:01,519 --> 00:13:02,320
this

376
00:13:02,320 --> 00:13:04,639
training and demos i like to use p caps

377
00:13:04,639 --> 00:13:06,079
because p caps are a little bit easier i

378
00:13:06,079 --> 00:13:08,079
know what's in the traffic i can cheat

379
00:13:08,079 --> 00:13:09,680
and study them in advance so that i

380
00:13:09,680 --> 00:13:10,959
don't have to try to figure it out on

381
00:13:10,959 --> 00:13:12,399
the fly

382
00:13:12,399 --> 00:13:14,880
it's easy to share as well and

383
00:13:14,880 --> 00:13:17,120
fortunately cerakata has an offline mode

384
00:13:17,120 --> 00:13:19,200
it has the ability to process a pcap or

385
00:13:19,200 --> 00:13:21,200
a directory of p caps you'll see some

386
00:13:21,200 --> 00:13:23,440
sandboxes are using that offline mode in

387
00:13:23,440 --> 00:13:25,839
order to capture p cap from analysis run

388
00:13:25,839 --> 00:13:27,200
the p cap through and then show you the

389
00:13:27,200 --> 00:13:28,160
alerts

390
00:13:28,160 --> 00:13:29,839
some are going to be doing it in live

391
00:13:29,839 --> 00:13:32,079
mode in fact i run a sandbox at home i

392
00:13:32,079 --> 00:13:34,320
own store in an old cuckoo instance but

393
00:13:34,320 --> 00:13:37,040
i run surakata in a socket mode where i

394
00:13:37,040 --> 00:13:39,680
can feed the pcap2 circada via a unix

395
00:13:39,680 --> 00:13:41,519
socket and then i don't have the penalty

396
00:13:41,519 --> 00:13:42,959
of having to stop it and start it and

397
00:13:42,959 --> 00:13:44,880
stop and start it post every single

398
00:13:44,880 --> 00:13:46,480
analysis

399
00:13:46,480 --> 00:13:47,680
there's some scripts here to help with

400
00:13:47,680 --> 00:13:49,920
that there's a lot of cleanup we gotta

401
00:13:49,920 --> 00:13:51,760
delete all the elastic data delete some

402
00:13:51,760 --> 00:13:53,839
moloch or archery data doing that so

403
00:13:53,839 --> 00:13:55,519
that every time we run a pcap we're just

404
00:13:55,519 --> 00:13:58,079
focused on the traffic from that pcap um

405
00:13:58,079 --> 00:13:59,920
this could listen to to whatever

406
00:13:59,920 --> 00:14:01,920
interfaces i have available to me so

407
00:14:01,920 --> 00:14:03,760
live on a network but i also don't want

408
00:14:03,760 --> 00:14:05,519
that right now because that would really

409
00:14:05,519 --> 00:14:07,839
confuse the data that i'm looking at

410
00:14:07,839 --> 00:14:10,240
uh to get cerakata to run in offline

411
00:14:10,240 --> 00:14:11,839
mode

412
00:14:11,839 --> 00:14:13,440
i've kind of got this little bit of an

413
00:14:13,440 --> 00:14:15,920
overly verbose command here

414
00:14:15,920 --> 00:14:16,880
but

415
00:14:16,880 --> 00:14:19,199
the main thing is just to say dash r

416
00:14:19,199 --> 00:14:21,920
dash r and then the path to the pcap

417
00:14:21,920 --> 00:14:24,560
file or the directory so that's one way

418
00:14:24,560 --> 00:14:26,959
to do it in offline mode the other again

419
00:14:26,959 --> 00:14:28,639
is pretty well documented to get it

420
00:14:28,639 --> 00:14:29,600
running

421
00:14:29,600 --> 00:14:31,199
running in socket mode and then feeding

422
00:14:31,199 --> 00:14:33,600
pcap to the socket

423
00:14:33,600 --> 00:14:35,440
once this is done

424
00:14:35,440 --> 00:14:38,000
this script will grip the output file so

425
00:14:38,000 --> 00:14:41,040
the main output file being eve.json

426
00:14:41,040 --> 00:14:43,360
and it will grip that

427
00:14:43,360 --> 00:14:46,560
json file using jq to filter and provide

428
00:14:46,560 --> 00:14:50,359
us with just the alerts

429
00:15:01,279 --> 00:15:03,600
okay

430
00:15:07,680 --> 00:15:09,600
okay so while this happens

431
00:15:09,600 --> 00:15:11,440
takes a few minutes again at this point

432
00:15:11,440 --> 00:15:13,199
sarakata has to load

433
00:15:13,199 --> 00:15:14,800
you're seeing output right now from the

434
00:15:14,800 --> 00:15:16,399
engine initializing

435
00:15:16,399 --> 00:15:18,320
from it loading all of the rules that

436
00:15:18,320 --> 00:15:20,240
it's configured to load parsing the

437
00:15:20,240 --> 00:15:22,320
configuration file and getting ready to

438
00:15:22,320 --> 00:15:23,360
either

439
00:15:23,360 --> 00:15:25,120
you know start listening to traffic or

440
00:15:25,120 --> 00:15:27,680
in this case begin parsing the pcap file

441
00:15:27,680 --> 00:15:29,279
because we've told it to run in offline

442
00:15:29,279 --> 00:15:30,079
mode

443
00:15:30,079 --> 00:15:31,600
any configuration errors you start

444
00:15:31,600 --> 00:15:32,800
messing around with config you're going

445
00:15:32,800 --> 00:15:34,399
to see those emitted here you'll get

446
00:15:34,399 --> 00:15:36,160
pretty much anything in red likely means

447
00:15:36,160 --> 00:15:37,279
you need to take a look at your

448
00:15:37,279 --> 00:15:39,600
configuration or your setup to make sure

449
00:15:39,600 --> 00:15:41,680
or resolve any of those issues

450
00:15:41,680 --> 00:15:43,360
you'll get version information and in

451
00:15:43,360 --> 00:15:45,120
the case with a pcap you'll get

452
00:15:45,120 --> 00:15:47,199
confirmation once it's done that it was

453
00:15:47,199 --> 00:15:48,880
able to read the pcap the number of

454
00:15:48,880 --> 00:15:51,360
packets that it read and that's you know

455
00:15:51,360 --> 00:15:53,440
absent seeing some alerts that way you

456
00:15:53,440 --> 00:15:56,160
know for sure that it has read those

457
00:15:56,160 --> 00:15:59,360
uh takes a minute or two

458
00:15:59,360 --> 00:16:01,759
and there we go so there's our results

459
00:16:01,759 --> 00:16:03,920
again maybe not the prettiest we're

460
00:16:03,920 --> 00:16:06,560
dealing at output on the command line

461
00:16:06,560 --> 00:16:08,480
certainly this doesn't scale well but

462
00:16:08,480 --> 00:16:10,560
again my my whole focus here was to look

463
00:16:10,560 --> 00:16:12,240
at the actual data

464
00:16:12,240 --> 00:16:13,920
and then from that data you build things

465
00:16:13,920 --> 00:16:15,199
like your dashboard your visual

466
00:16:15,199 --> 00:16:17,759
visualizations your other workflows

467
00:16:17,759 --> 00:16:20,240
so this again just a quick confirmation

468
00:16:20,240 --> 00:16:22,560
that we do in fact have some alerts and

469
00:16:22,560 --> 00:16:24,560
so just grabbing specific fields just

470
00:16:24,560 --> 00:16:26,079
like you would see in your

471
00:16:26,079 --> 00:16:27,759
visualizations and dashboards right

472
00:16:27,759 --> 00:16:29,519
we're picking out certain information to

473
00:16:29,519 --> 00:16:31,279
to take action on that data to present

474
00:16:31,279 --> 00:16:33,519
that data to track it to monitor it

475
00:16:33,519 --> 00:16:34,959
that's all we're seeing here so we're

476
00:16:34,959 --> 00:16:37,440
just getting an important but a small

477
00:16:37,440 --> 00:16:38,959
part of that puzzle

478
00:16:38,959 --> 00:16:41,120
we have things like time stamp we have

479
00:16:41,120 --> 00:16:43,440
the signature id we have the actual

480
00:16:43,440 --> 00:16:44,560
signature

481
00:16:44,560 --> 00:16:45,519
message

482
00:16:45,519 --> 00:16:47,360
which is you know usually your first

483
00:16:47,360 --> 00:16:49,040
point of contact with any sort of alert

484
00:16:49,040 --> 00:16:50,639
that is generated

485
00:16:50,639 --> 00:16:52,720
categories you have of course your

486
00:16:52,720 --> 00:16:54,720
source and destination ips as well as

487
00:16:54,720 --> 00:16:58,160
the ports that they were talking on

488
00:17:00,480 --> 00:17:04,680
by default all of this data

489
00:17:06,720 --> 00:17:09,280
we'll be in bar log circadia dot json of

490
00:17:09,280 --> 00:17:11,199
course all of that is configurable

491
00:17:11,199 --> 00:17:12,720
and if we cap that we're going to get

492
00:17:12,720 --> 00:17:15,119
just sort of this big massive mess

493
00:17:15,119 --> 00:17:15,839
so

494
00:17:15,839 --> 00:17:19,119
we'll use jq i'll use jq a lot and

495
00:17:19,119 --> 00:17:20,559
right now that still doesn't help

496
00:17:20,559 --> 00:17:22,640
because we have a lot of data but at

497
00:17:22,640 --> 00:17:24,640
least with the jq we can start to not

498
00:17:24,640 --> 00:17:27,119
only format that json output so it's a

499
00:17:27,119 --> 00:17:29,200
little bit easier to visually parse but

500
00:17:29,200 --> 00:17:31,679
then also begin to query the data and

501
00:17:31,679 --> 00:17:33,280
like i said this doesn't necessarily

502
00:17:33,280 --> 00:17:34,720
scale well but this gives me a good

503
00:17:34,720 --> 00:17:35,919
opportunity to really get down in the

504
00:17:35,919 --> 00:17:39,360
weeds and explore this information

505
00:17:41,120 --> 00:17:43,440
okay on the way here i got paranoid that

506
00:17:43,440 --> 00:17:44,320
i was going to have a hard time

507
00:17:44,320 --> 00:17:47,039
remembering all my commands so i made it

508
00:17:47,039 --> 00:17:50,160
a cheat sheet for myself

509
00:17:57,039 --> 00:17:58,480
so let's start

510
00:17:58,480 --> 00:18:01,360
again by just looking at the contents of

511
00:18:01,360 --> 00:18:05,039
that eve.json file and using jq to

512
00:18:05,039 --> 00:18:07,600
filter it down to just the event type so

513
00:18:07,600 --> 00:18:09,039
the primary record that you'll see in

514
00:18:09,039 --> 00:18:11,520
the eve.json the primary output type is

515
00:18:11,520 --> 00:18:12,799
going to be driven by these event

516
00:18:12,799 --> 00:18:15,039
records and every event record will have

517
00:18:15,039 --> 00:18:15,919
a type

518
00:18:15,919 --> 00:18:18,320
so you'll see here

519
00:18:18,320 --> 00:18:19,679
i'm going to scroll back just a little

520
00:18:19,679 --> 00:18:20,799
ways

521
00:18:20,799 --> 00:18:22,160
there's all of the different event

522
00:18:22,160 --> 00:18:24,320
record types so we have flow records we

523
00:18:24,320 --> 00:18:26,320
have dns records we have tls records

524
00:18:26,320 --> 00:18:29,200
alert records http records so we have

525
00:18:29,200 --> 00:18:31,360
protocol specific we have lower level

526
00:18:31,360 --> 00:18:33,440
you know networking events we have file

527
00:18:33,440 --> 00:18:35,360
information we have alert event and so

528
00:18:35,360 --> 00:18:37,360
all of these different records have

529
00:18:37,360 --> 00:18:39,200
quite a bit of data associated with each

530
00:18:39,200 --> 00:18:41,360
one that we can dig into and use to

531
00:18:41,360 --> 00:18:42,480
understand

532
00:18:42,480 --> 00:18:44,320
better to build more context as to what

533
00:18:44,320 --> 00:18:46,720
happened to the traffic to maybe the

534
00:18:46,720 --> 00:18:49,039
alerts that we're trying to triage

535
00:18:49,039 --> 00:18:51,039
there's also circuit itself is going to

536
00:18:51,039 --> 00:18:52,240
generate

537
00:18:52,240 --> 00:18:54,400
some stats records which just can help

538
00:18:54,400 --> 00:18:57,840
with monitoring performance

539
00:19:03,200 --> 00:19:06,200
now

540
00:19:17,840 --> 00:19:19,120
actually i think i have this in my

541
00:19:19,120 --> 00:19:21,520
history

542
00:19:23,600 --> 00:19:25,760
yeah there we go

543
00:19:25,760 --> 00:19:28,480
okay so now um shift gears a little bit

544
00:19:28,480 --> 00:19:32,080
and focus on just the alert data so

545
00:19:32,080 --> 00:19:34,880
again using something like real simple

546
00:19:34,880 --> 00:19:36,720
um and i'm not

547
00:19:36,720 --> 00:19:38,960
the foremost expert on grepping or

548
00:19:38,960 --> 00:19:41,039
anything so please just

549
00:19:41,039 --> 00:19:44,000
roll with me on what i'm doing here

550
00:19:44,000 --> 00:19:46,559
so we can grab the the log file and you

551
00:19:46,559 --> 00:19:48,160
know narrow that down we can just get

552
00:19:48,160 --> 00:19:49,520
our event types

553
00:19:49,520 --> 00:19:51,120
which will give us our alert records so

554
00:19:51,120 --> 00:19:52,400
that record will just be written on a

555
00:19:52,400 --> 00:19:54,480
line and we'll be able to redirect that

556
00:19:54,480 --> 00:19:55,760
through jq

557
00:19:55,760 --> 00:19:57,520
and further

558
00:19:57,520 --> 00:20:00,240
so we could go

559
00:20:00,240 --> 00:20:02,559
before i do all that

560
00:20:02,559 --> 00:20:06,720
i could just look at the structure of

561
00:20:06,720 --> 00:20:08,320
an alert

562
00:20:08,320 --> 00:20:10,880
now some of these have to deal with file

563
00:20:10,880 --> 00:20:12,559
downloads in particular you may have

564
00:20:12,559 --> 00:20:14,960
noticed there's a pe file download uh pe

565
00:20:14,960 --> 00:20:17,200
files typically are quite large so the

566
00:20:17,200 --> 00:20:19,039
data just sort of fills up my terminal

567
00:20:19,039 --> 00:20:20,480
history and so we're going to have to

568
00:20:20,480 --> 00:20:21,760
pipe it through more just to deal with

569
00:20:21,760 --> 00:20:22,400
it

570
00:20:22,400 --> 00:20:24,159
but here you can see now

571
00:20:24,159 --> 00:20:27,120
just the raw event record for in in this

572
00:20:27,120 --> 00:20:29,440
case we have the alert

573
00:20:29,440 --> 00:20:32,080
it is for a j3 hash

574
00:20:32,080 --> 00:20:33,600
and there's all the information again

575
00:20:33,600 --> 00:20:34,880
that you might expect to be around that

576
00:20:34,880 --> 00:20:36,640
alert that isn't always necessary to be

577
00:20:36,640 --> 00:20:38,720
present inside of the visualizations or

578
00:20:38,720 --> 00:20:40,559
the dashboards that you're looking at

579
00:20:40,559 --> 00:20:42,480
um we have a flow id we'll talk about

580
00:20:42,480 --> 00:20:44,000
the flow id the flow id will help us to

581
00:20:44,000 --> 00:20:46,000
pivot kind of take a step back and see

582
00:20:46,000 --> 00:20:47,600
in a slightly broader context what

583
00:20:47,600 --> 00:20:48,720
happened

584
00:20:48,720 --> 00:20:50,559
around that alert

585
00:20:50,559 --> 00:20:53,120
around that particular flow and this

586
00:20:53,120 --> 00:20:55,039
data is generated regardless of the

587
00:20:55,039 --> 00:20:56,799
event type so this happens to be an

588
00:20:56,799 --> 00:20:59,200
alert but if we were just looking at a

589
00:20:59,200 --> 00:21:02,880
file info or an anomalous event or a tls

590
00:21:02,880 --> 00:21:04,799
record right the same information is

591
00:21:04,799 --> 00:21:06,960
still being generated so this really the

592
00:21:06,960 --> 00:21:08,880
only thing that's unique to this alert

593
00:21:08,880 --> 00:21:11,679
record is the alert data

594
00:21:11,679 --> 00:21:13,280
which is all organized a little bit

595
00:21:13,280 --> 00:21:15,280
further down in this record

596
00:21:15,280 --> 00:21:18,000
we have the desk ip destination port the

597
00:21:18,000 --> 00:21:20,480
protocol uh the community id which can

598
00:21:20,480 --> 00:21:22,480
be used for further data correlation

599
00:21:22,480 --> 00:21:24,799
with other platforms and further

600
00:21:24,799 --> 00:21:27,039
information broken down very granularly

601
00:21:27,039 --> 00:21:29,600
about that alert that generated

602
00:21:29,600 --> 00:21:31,840
such as the action the signature

603
00:21:31,840 --> 00:21:34,799
some of the metadata

604
00:21:36,880 --> 00:21:38,080
in this case

605
00:21:38,080 --> 00:21:40,640
the alert was generated due to tls

606
00:21:40,640 --> 00:21:42,960
traffic tls certificate so with the

607
00:21:42,960 --> 00:21:44,720
alert we have information about the tls

608
00:21:44,720 --> 00:21:46,080
certificate

609
00:21:46,080 --> 00:21:47,760
and you can probably see there's some

610
00:21:47,760 --> 00:21:49,679
things that really stand out as odd of

611
00:21:49,679 --> 00:21:51,600
course there was some information just

612
00:21:51,600 --> 00:21:52,880
previous

613
00:21:52,880 --> 00:21:54,480
i'll scroll back a little bit that was

614
00:21:54,480 --> 00:21:56,559
also kind of odd such as the destination

615
00:21:56,559 --> 00:21:58,960
port

616
00:21:58,960 --> 00:22:00,799
information then you know when we get

617
00:22:00,799 --> 00:22:02,320
into tls traffic

618
00:22:02,320 --> 00:22:04,240
we lose visibility especially if we're

619
00:22:04,240 --> 00:22:07,039
not able to do any sort of

620
00:22:07,039 --> 00:22:08,960
inspection into that traffic

621
00:22:08,960 --> 00:22:10,320
but there's still certificate

622
00:22:10,320 --> 00:22:12,480
information that can be parsed out and

623
00:22:12,480 --> 00:22:15,600
turned into either rules for

624
00:22:15,600 --> 00:22:17,440
you know rules for signatures as you're

625
00:22:17,440 --> 00:22:20,159
seeing here this is a j3 alert

626
00:22:20,159 --> 00:22:22,080
or any other you know sort of

627
00:22:22,080 --> 00:22:24,000
visualization dashboard or data point

628
00:22:24,000 --> 00:22:26,320
that you would want to hunt on it also

629
00:22:26,320 --> 00:22:29,440
generates things like j3 and j3s a

630
00:22:29,440 --> 00:22:30,960
really you know interesting technology

631
00:22:30,960 --> 00:22:32,240
from salesforce you can go to their

632
00:22:32,240 --> 00:22:33,600
github and read a little bit more about

633
00:22:33,600 --> 00:22:35,840
it but just taking certain

634
00:22:35,840 --> 00:22:37,679
elements of the certificate

635
00:22:37,679 --> 00:22:39,600
putting them together generating a hash

636
00:22:39,600 --> 00:22:41,679
and i'm saying that that hashes could be

637
00:22:41,679 --> 00:22:43,600
unique enough to help you identify

638
00:22:43,600 --> 00:22:45,360
threats or hunt for threats so in this

639
00:22:45,360 --> 00:22:48,000
case somebody created that j3 sig saying

640
00:22:48,000 --> 00:22:51,280
we think this is unique enough

641
00:22:51,919 --> 00:22:54,400
there's also some flow information

642
00:22:54,400 --> 00:22:57,760
i'm going to scroll down here

643
00:22:58,720 --> 00:23:00,559
again there's a pe file so there's a lot

644
00:23:00,559 --> 00:23:04,960
of content the actual payload since this

645
00:23:06,480 --> 00:23:08,080
or no this isn't the pe file i'm sorry

646
00:23:08,080 --> 00:23:12,320
never mind i'm getting to the pe file

647
00:23:16,000 --> 00:23:18,559
there we go

648
00:23:19,120 --> 00:23:22,918
was that a p oh

649
00:23:26,000 --> 00:23:27,840
okay i may have lost my spot there for a

650
00:23:27,840 --> 00:23:30,799
moment this is where i wanted to get um

651
00:23:30,799 --> 00:23:33,200
so we have another alert again i kind of

652
00:23:33,200 --> 00:23:35,039
skipped over reading those alerts to you

653
00:23:35,039 --> 00:23:36,799
but there was a handful of alerts for

654
00:23:36,799 --> 00:23:38,559
the download of the pe file and then

655
00:23:38,559 --> 00:23:40,640
there was a couple of alerts for the j3

656
00:23:40,640 --> 00:23:43,039
hash indicating some potential anomalous

657
00:23:43,039 --> 00:23:45,200
malicious tls traffic

658
00:23:45,200 --> 00:23:46,640
for these that have to deal then with

659
00:23:46,640 --> 00:23:48,320
the actual pe file

660
00:23:48,320 --> 00:23:49,919
we have all of that same information

661
00:23:49,919 --> 00:23:52,000
that we were just talking about um we

662
00:23:52,000 --> 00:23:53,919
have in addition if any flow bits were

663
00:23:53,919 --> 00:23:56,320
set flow bits being a way to tie alerts

664
00:23:56,320 --> 00:23:58,240
together so maybe one rule doesn't alert

665
00:23:58,240 --> 00:24:00,400
but it sets a flow bit another rule sees

666
00:24:00,400 --> 00:24:02,320
if that flow but is set then it can if

667
00:24:02,320 --> 00:24:04,880
it matches and it's rule syntax and it

668
00:24:04,880 --> 00:24:06,559
can generate the alert

669
00:24:06,559 --> 00:24:08,000
um

670
00:24:08,000 --> 00:24:09,279
going a little bit further here again

671
00:24:09,279 --> 00:24:12,320
now this is where the pe file is so just

672
00:24:12,320 --> 00:24:16,200
a little painful on the terminal

673
00:24:20,880 --> 00:24:23,679
we also get into file information so

674
00:24:23,679 --> 00:24:26,000
circada has identified this as a file

675
00:24:26,000 --> 00:24:27,840
and has provided some minimal

676
00:24:27,840 --> 00:24:30,720
information about this particular file

677
00:24:30,720 --> 00:24:33,200
the file name based off of the http

678
00:24:33,200 --> 00:24:35,039
response so of course this can be

679
00:24:35,039 --> 00:24:38,640
completely nonsensical or gibberish

680
00:24:38,640 --> 00:24:40,720
this is a good example we have a dot pdf

681
00:24:40,720 --> 00:24:41,840
extension

682
00:24:41,840 --> 00:24:44,000
but the file magic

683
00:24:44,000 --> 00:24:46,480
that was compared against that http

684
00:24:46,480 --> 00:24:47,919
response buffer

685
00:24:47,919 --> 00:24:50,080
says that no this is actually a pe file

686
00:24:50,080 --> 00:24:51,840
so the extension in the name you know

687
00:24:51,840 --> 00:24:54,320
that's all dependent upon how that http

688
00:24:54,320 --> 00:24:56,400
response was sent

689
00:24:56,400 --> 00:24:57,600
libmagic

690
00:24:57,600 --> 00:24:59,840
we have that information available so in

691
00:24:59,840 --> 00:25:01,679
this case this pe file was returned not

692
00:25:01,679 --> 00:25:02,799
only

693
00:25:02,799 --> 00:25:05,120
not on a secure connection but also on

694
00:25:05,120 --> 00:25:07,200
obfuscated so we just had a pe file that

695
00:25:07,200 --> 00:25:09,120
we're able to identify here on the

696
00:25:09,120 --> 00:25:10,640
network

697
00:25:10,640 --> 00:25:12,480
this is some of the basic information

698
00:25:12,480 --> 00:25:14,320
all right cut also has the ability to

699
00:25:14,320 --> 00:25:16,559
extract the file uh to generate file

700
00:25:16,559 --> 00:25:18,400
information and we'll see that

701
00:25:18,400 --> 00:25:20,480
two parts there's a file info record and

702
00:25:20,480 --> 00:25:22,400
then there's also

703
00:25:22,400 --> 00:25:26,279
the file extraction capability

704
00:25:28,000 --> 00:25:30,400
this isn't going to go back

705
00:25:30,400 --> 00:25:33,760
so i'm going to drop

706
00:25:34,000 --> 00:25:35,760
one more time

707
00:25:35,760 --> 00:25:38,480
signature id

708
00:25:39,919 --> 00:25:43,039
is supposed to be a unique id for every

709
00:25:43,039 --> 00:25:44,880
signature in your rule set

710
00:25:44,880 --> 00:25:46,960
and circada has a way of deconflicting

711
00:25:46,960 --> 00:25:49,919
likely when the engine initializes it'll

712
00:25:49,919 --> 00:25:51,919
tell you that there's a deconflicting

713
00:25:51,919 --> 00:25:54,320
rule based off of the signature id and

714
00:25:54,320 --> 00:25:56,000
then it'll take whichever one i think it

715
00:25:56,000 --> 00:25:58,159
takes whichever one has the most recent

716
00:25:58,159 --> 00:25:59,600
created date or the last one that it

717
00:25:59,600 --> 00:26:01,279
processed i don't i forget exactly what

718
00:26:01,279 --> 00:26:02,320
it does

719
00:26:02,320 --> 00:26:03,200
but

720
00:26:03,200 --> 00:26:04,640
the idea is that everything should be

721
00:26:04,640 --> 00:26:05,919
unique

722
00:26:05,919 --> 00:26:09,880
if we ever need to look at those

723
00:26:13,360 --> 00:26:14,799
again just doing it from the command

724
00:26:14,799 --> 00:26:17,120
line

725
00:26:23,279 --> 00:26:24,880
in the case of selfs it's going to write

726
00:26:24,880 --> 00:26:27,520
this rules file to etsy ceracata rules

727
00:26:27,520 --> 00:26:30,080
sirius.rules uh circada update we'll

728
00:26:30,080 --> 00:26:31,520
write that by default of our lib

729
00:26:31,520 --> 00:26:34,080
cerakata rules or cut it out rules so

730
00:26:34,080 --> 00:26:35,039
you might have to search a little bit

731
00:26:35,039 --> 00:26:36,880
based off of your distro

732
00:26:36,880 --> 00:26:39,039
but we can grip that and based off of

733
00:26:39,039 --> 00:26:41,440
the sid and we should see a single rule

734
00:26:41,440 --> 00:26:44,080
so as we're trying to understand what

735
00:26:44,080 --> 00:26:45,520
you know circada is telling us with the

736
00:26:45,520 --> 00:26:46,960
data we're trying to process it we have

737
00:26:46,960 --> 00:26:48,799
something a little bit more discrete

738
00:26:48,799 --> 00:26:50,159
like an alert

739
00:26:50,159 --> 00:26:52,320
we can use that sid to dig into the rule

740
00:26:52,320 --> 00:26:53,760
to understand what exactly did this

741
00:26:53,760 --> 00:26:56,159
match on now it isn't always easy you

742
00:26:56,159 --> 00:26:57,760
have to be able to understand the rule

743
00:26:57,760 --> 00:27:01,200
syntax a bit um sometimes as in a j3

744
00:27:01,200 --> 00:27:03,440
rule it's fairly straightforward and

745
00:27:03,440 --> 00:27:05,760
that it just has a value for the je3

746
00:27:05,760 --> 00:27:07,440
hash so some player someone along the

747
00:27:07,440 --> 00:27:09,200
way said this hash is bad let's write a

748
00:27:09,200 --> 00:27:10,559
rule for it

749
00:27:10,559 --> 00:27:11,919
you can get into other rules that are

750
00:27:11,919 --> 00:27:13,840
going to be quite a bit more complex but

751
00:27:13,840 --> 00:27:15,360
again it's just it's just pattern

752
00:27:15,360 --> 00:27:17,200
matching it's just content matching so

753
00:27:17,200 --> 00:27:20,480
it's it's really nothing that is uh

754
00:27:20,480 --> 00:27:23,760
terribly complex i don't think

755
00:27:28,880 --> 00:27:31,880
okay

756
00:27:36,480 --> 00:27:37,679
okay so

757
00:27:37,679 --> 00:27:38,960
let's go back to those alerts for a

758
00:27:38,960 --> 00:27:41,039
minute

759
00:27:41,039 --> 00:27:42,159
and

760
00:27:42,159 --> 00:27:44,799
using jq i'm gonna again try to distill

761
00:27:44,799 --> 00:27:47,520
those results a little bit and

762
00:27:47,520 --> 00:27:49,520
provide just the signature

763
00:27:49,520 --> 00:27:51,440
as well as the flow id and then the

764
00:27:51,440 --> 00:27:52,640
signature id i don't really need the

765
00:27:52,640 --> 00:27:54,880
signature id anymore i had that earlier

766
00:27:54,880 --> 00:27:56,320
to show you how to group into the rule

767
00:27:56,320 --> 00:27:58,320
file really what i want is the flow id

768
00:27:58,320 --> 00:27:59,760
right now

769
00:27:59,760 --> 00:28:01,679
so here's the alerts that were generated

770
00:28:01,679 --> 00:28:03,440
for this particular pcap as you can see

771
00:28:03,440 --> 00:28:06,320
it looks like possible drydex and it was

772
00:28:06,320 --> 00:28:08,559
we have a couple of j3 hash alerts we

773
00:28:08,559 --> 00:28:09,840
have

774
00:28:09,840 --> 00:28:10,640
three

775
00:28:10,640 --> 00:28:13,760
alerts that are in relation to you know

776
00:28:13,760 --> 00:28:17,039
pe file download an executable or a dll

777
00:28:17,039 --> 00:28:19,760
when we look at

778
00:28:19,760 --> 00:28:22,000
the flow we can see that all of those

779
00:28:22,000 --> 00:28:23,840
alerts are actually associated with the

780
00:28:23,840 --> 00:28:25,360
same flow and that kind of makes sense

781
00:28:25,360 --> 00:28:27,360
when we deal with pe files oftentimes

782
00:28:27,360 --> 00:28:29,120
the downloading of that file will

783
00:28:29,120 --> 00:28:31,679
generate

784
00:28:31,679 --> 00:28:33,520
you know multiple alerts for that one

785
00:28:33,520 --> 00:28:36,240
file download

786
00:28:36,720 --> 00:28:39,440
so i'm going to grab

787
00:28:40,960 --> 00:28:44,279
flow events

788
00:28:56,080 --> 00:28:58,480
there we go paste that in

789
00:28:58,480 --> 00:29:00,559
so now what i'll do is take a different

790
00:29:00,559 --> 00:29:03,440
look at the data and get the all of the

791
00:29:03,440 --> 00:29:05,760
event records just based off of that

792
00:29:05,760 --> 00:29:08,320
flow id so any record that match on the

793
00:29:08,320 --> 00:29:10,879
flow id

794
00:29:11,120 --> 00:29:12,480
so here you can see

795
00:29:12,480 --> 00:29:14,000
we have our three alerts not a big

796
00:29:14,000 --> 00:29:15,440
surprise we've already really kind of

797
00:29:15,440 --> 00:29:17,600
established that ground already um but

798
00:29:17,600 --> 00:29:20,240
we also have an http event a file info

799
00:29:20,240 --> 00:29:22,159
event and two flow events

800
00:29:22,159 --> 00:29:23,840
so again kind of makes sense we have the

801
00:29:23,840 --> 00:29:26,480
establishment of our tcp session we have

802
00:29:26,480 --> 00:29:28,880
our http request to download this

803
00:29:28,880 --> 00:29:30,720
payload and

804
00:29:30,720 --> 00:29:32,799
a file info event that you know that

805
00:29:32,799 --> 00:29:35,600
represents that http response content

806
00:29:35,600 --> 00:29:37,520
that also happens to represent the pe

807
00:29:37,520 --> 00:29:40,520
file

808
00:29:42,399 --> 00:29:46,239
so what can the file info event tell us

809
00:29:53,520 --> 00:29:55,520
okay so my command's getting a little

810
00:29:55,520 --> 00:29:57,039
bit longer

811
00:29:57,039 --> 00:29:59,279
still gripping on the flow id

812
00:29:59,279 --> 00:30:01,679
just going to grab one more time

813
00:30:01,679 --> 00:30:04,000
in order to get the file info record and

814
00:30:04,000 --> 00:30:07,960
then jq it

815
00:30:08,159 --> 00:30:09,440
that didn't work

816
00:30:09,440 --> 00:30:11,440
what did i i got to change the flow id

817
00:30:11,440 --> 00:30:13,760
don't i

818
00:30:17,520 --> 00:30:19,600
you can see it coming right you know he

819
00:30:19,600 --> 00:30:21,200
missed the flow id he's going to hit

820
00:30:21,200 --> 00:30:24,480
enter and then go what went wrong

821
00:30:30,240 --> 00:30:32,080
there it is

822
00:30:32,080 --> 00:30:34,000
all right there's our file info

823
00:30:34,000 --> 00:30:35,200
so again

824
00:30:35,200 --> 00:30:37,520
data that you would expect source desk

825
00:30:37,520 --> 00:30:40,399
ports protocols flow bits community id

826
00:30:40,399 --> 00:30:42,960
the flow id we have that some of that

827
00:30:42,960 --> 00:30:45,360
original content from the http response

828
00:30:45,360 --> 00:30:48,080
that we saw associated with the alert

829
00:30:48,080 --> 00:30:49,760
or it is associated with the alert if i

830
00:30:49,760 --> 00:30:52,000
forgot to show it um but now we also

831
00:30:52,000 --> 00:30:55,279
have the file info so we have the magic

832
00:30:55,279 --> 00:30:58,799
the lib magic results we have the md5

833
00:30:58,799 --> 00:31:01,760
the sha one the sha-256 and there's some

834
00:31:01,760 --> 00:31:03,279
important state information that's

835
00:31:03,279 --> 00:31:04,960
presented here

836
00:31:04,960 --> 00:31:06,720
the biggest one being the state of this

837
00:31:06,720 --> 00:31:09,519
file so by default circada is only going

838
00:31:09,519 --> 00:31:12,080
to read so far into an http response

839
00:31:12,080 --> 00:31:14,080
either the request or the response

840
00:31:14,080 --> 00:31:15,200
so there's a couple places in the

841
00:31:15,200 --> 00:31:17,519
configuration you have to go and look at

842
00:31:17,519 --> 00:31:19,120
i suspect it's for performance reasons

843
00:31:19,120 --> 00:31:20,640
because again some of these pe files can

844
00:31:20,640 --> 00:31:22,480
get fairly large and if it's reading all

845
00:31:22,480 --> 00:31:23,919
the way every time

846
00:31:23,919 --> 00:31:25,120
there's likely going to be a bit of a

847
00:31:25,120 --> 00:31:26,559
performance hit

848
00:31:26,559 --> 00:31:29,279
if the state is truncated then that just

849
00:31:29,279 --> 00:31:31,760
simply means circada got to its maximum

850
00:31:31,760 --> 00:31:33,760
and stopped so it took what it could

851
00:31:33,760 --> 00:31:36,320
read it created your hashes but those

852
00:31:36,320 --> 00:31:38,080
aren't proper or accurate hashes they're

853
00:31:38,080 --> 00:31:40,399
accurate for the content that it's read

854
00:31:40,399 --> 00:31:42,159
but it didn't get to the end of the file

855
00:31:42,159 --> 00:31:43,519
so the closed state means that it

856
00:31:43,519 --> 00:31:45,440
actually read to the end of the file and

857
00:31:45,440 --> 00:31:47,279
the hash is therefore are the actual

858
00:31:47,279 --> 00:31:50,240
hashes of the file

859
00:31:50,240 --> 00:31:52,720
so from there even with a hash now of

860
00:31:52,720 --> 00:31:54,799
course if this were an emerging threat

861
00:31:54,799 --> 00:31:56,000
it might be a little bit harder to

862
00:31:56,000 --> 00:31:58,159
detect but something like this this is

863
00:31:58,159 --> 00:32:01,679
that is nice and old

864
00:32:01,679 --> 00:32:05,279
i forgot to connect to the internet

865
00:32:09,120 --> 00:32:11,039
well you'll have to take my word for it

866
00:32:11,039 --> 00:32:12,640
we can find it on the url house and

867
00:32:12,640 --> 00:32:14,159
you'll see that it not only identifies

868
00:32:14,159 --> 00:32:15,679
the original url that dropped that

869
00:32:15,679 --> 00:32:18,080
payload but it has a nice clean tag that

870
00:32:18,080 --> 00:32:20,799
says drydex

871
00:32:21,519 --> 00:32:23,600
okay what else did we miss

872
00:32:23,600 --> 00:32:27,719
well we had some tls sessions

873
00:32:34,000 --> 00:32:37,880
all right and we could use

874
00:32:42,720 --> 00:32:44,480
go back to our original alerts we have

875
00:32:44,480 --> 00:32:46,480
those j3 hashes

876
00:32:46,480 --> 00:32:48,159
again if we have alerts based off of j3

877
00:32:48,159 --> 00:32:49,679
we know that there's something to do

878
00:32:49,679 --> 00:32:52,720
with tls

879
00:32:55,200 --> 00:32:57,840
and

880
00:33:03,039 --> 00:33:06,919
you can use those flows

881
00:33:30,799 --> 00:33:31,919
all right there we go we can see the

882
00:33:31,919 --> 00:33:33,440
events so we have the alert we have the

883
00:33:33,440 --> 00:33:35,679
tls we have the flow again

884
00:33:35,679 --> 00:33:37,440
probably not a big surprise if we're

885
00:33:37,440 --> 00:33:38,960
used to looking at this because we have

886
00:33:38,960 --> 00:33:40,799
you know the tcp establishment we have

887
00:33:40,799 --> 00:33:42,960
the tls the session establishment and

888
00:33:42,960 --> 00:33:44,799
that tls record

889
00:33:44,799 --> 00:33:47,440
so from here

890
00:33:47,519 --> 00:33:50,640
let's grab the flow id

891
00:33:50,640 --> 00:33:54,640
i have this in my history here somewhere

892
00:34:00,399 --> 00:34:01,760
all right i'll just type it in real

893
00:34:01,760 --> 00:34:04,760
quick

894
00:34:07,919 --> 00:34:10,918
hmm

895
00:34:20,639 --> 00:34:23,119
there we go

896
00:34:24,560 --> 00:34:26,560
and i don't necessarily need the flow id

897
00:34:26,560 --> 00:34:28,079
i guess for the demonstration purposes

898
00:34:28,079 --> 00:34:29,440
there are going to be very few tls

899
00:34:29,440 --> 00:34:30,800
records i could have just we could just

900
00:34:30,800 --> 00:34:32,800
dump all the tls records but just so we

901
00:34:32,800 --> 00:34:35,839
get the right one

902
00:34:41,918 --> 00:34:45,638
thanks and

903
00:34:48,480 --> 00:34:50,480
this typing spell so much more fluid on

904
00:34:50,480 --> 00:34:54,040
the airplane here

905
00:35:02,160 --> 00:35:04,240
there we go right so there's information

906
00:35:04,240 --> 00:35:06,320
now about that tls session so this again

907
00:35:06,320 --> 00:35:08,240
is everything that was generated that

908
00:35:08,240 --> 00:35:10,320
either can be used to generate the alert

909
00:35:10,320 --> 00:35:12,640
or just becomes part of the data that

910
00:35:12,640 --> 00:35:14,880
you're you're archiving or storing you

911
00:35:14,880 --> 00:35:16,560
have for your visualizations your

912
00:35:16,560 --> 00:35:18,560
dashboards your any other sort of

913
00:35:18,560 --> 00:35:20,400
alerting that you're doing as well as

914
00:35:20,400 --> 00:35:22,079
that historical context being able to go

915
00:35:22,079 --> 00:35:23,280
back and see what's happened on a

916
00:35:23,280 --> 00:35:24,480
network

917
00:35:24,480 --> 00:35:26,240
some things that stand out with this uh

918
00:35:26,240 --> 00:35:27,920
certainly there are some more obvious

919
00:35:27,920 --> 00:35:29,680
signs that something is a bit of skew

920
00:35:29,680 --> 00:35:30,640
here

921
00:35:30,640 --> 00:35:32,480
you know information here in the subject

922
00:35:32,480 --> 00:35:34,560
and the issuer dn

923
00:35:34,560 --> 00:35:37,200
there's also the destination port

924
00:35:37,200 --> 00:35:38,960
so looking for things that may be

925
00:35:38,960 --> 00:35:41,760
showing up or you know tls traffic to

926
00:35:41,760 --> 00:35:43,359
non-standard ports

927
00:35:43,359 --> 00:35:45,119
what you'll find with the rule syntax if

928
00:35:45,119 --> 00:35:47,200
we go back and look at that

929
00:35:47,200 --> 00:35:48,480
is that the

930
00:35:48,480 --> 00:35:51,280
the the rule itself you can say alert

931
00:35:51,280 --> 00:35:54,560
tls and then it will alert on tls over

932
00:35:54,560 --> 00:35:56,800
any combination of ports you don't have

933
00:35:56,800 --> 00:35:58,640
to tie it to a specific port or series

934
00:35:58,640 --> 00:35:59,920
of ports

935
00:35:59,920 --> 00:36:02,079
so finding alerts to these non-standard

936
00:36:02,079 --> 00:36:03,520
ports becomes quite a bit easier in

937
00:36:03,520 --> 00:36:05,440
terms of writing the rules having the

938
00:36:05,440 --> 00:36:07,760
data of course also becomes a bit easier

939
00:36:07,760 --> 00:36:09,280
whether you have a visualization that's

940
00:36:09,280 --> 00:36:10,960
helping to identify these sort of

941
00:36:10,960 --> 00:36:12,960
anomalous things or you use something

942
00:36:12,960 --> 00:36:15,520
like like a moloch or an archimede

943
00:36:15,520 --> 00:36:17,359
which again is up and running here it

944
00:36:17,359 --> 00:36:18,880
can be a bit slow so we'll see if it

945
00:36:18,880 --> 00:36:21,880
works

946
00:36:27,280 --> 00:36:28,720
but

947
00:36:28,720 --> 00:36:30,880
taking you know the data

948
00:36:30,880 --> 00:36:33,599
again moloch or arkham here is is

949
00:36:33,599 --> 00:36:34,960
harvesting its own it's doing its own

950
00:36:34,960 --> 00:36:37,440
parsing and so it's its own um ingestion

951
00:36:37,440 --> 00:36:39,200
into elastic so circada really has

952
00:36:39,200 --> 00:36:40,640
nothing to do with this

953
00:36:40,640 --> 00:36:42,320
there is an integration to get alert

954
00:36:42,320 --> 00:36:44,400
data into archime

955
00:36:44,400 --> 00:36:46,880
but that's about the extent of it but

956
00:36:46,880 --> 00:36:48,720
here you can see how easy it is to

957
00:36:48,720 --> 00:36:50,640
quickly say something like hey any any

958
00:36:50,640 --> 00:36:52,560
tls session that's not over 443 i want

959
00:36:52,560 --> 00:36:54,400
to see it and then you can drill down

960
00:36:54,400 --> 00:36:57,760
into it a little bit further from here

961
00:37:00,960 --> 00:37:04,079
okay questions so far

962
00:37:04,079 --> 00:37:06,839
phil i'm doing good just got

963
00:37:06,839 --> 00:37:10,160
time 20 minutes okay

964
00:37:10,160 --> 00:37:11,920
phil said the most dangerous thing to an

965
00:37:11,920 --> 00:37:14,000
academic he says you've got extra time

966
00:37:14,000 --> 00:37:17,200
fill it can you fill it for me

967
00:37:19,359 --> 00:37:21,200
remember the first time i taught

968
00:37:21,200 --> 00:37:23,119
like a an evening class it was for

969
00:37:23,119 --> 00:37:24,800
non-traditional students you know so all

970
00:37:24,800 --> 00:37:26,240
the working professionals coming in at

971
00:37:26,240 --> 00:37:28,160
seven o'clock at night and it was like a

972
00:37:28,160 --> 00:37:29,520
three-hour block of time and i thought

973
00:37:29,520 --> 00:37:30,400
okay i'm going to go in here i'm going

974
00:37:30,400 --> 00:37:31,599
to kill this

975
00:37:31,599 --> 00:37:33,040
about an hour and a half into it i ran

976
00:37:33,040 --> 00:37:35,119
out of material and i thought oh well

977
00:37:35,119 --> 00:37:36,160
you know they'll be happy that i'm going

978
00:37:36,160 --> 00:37:38,160
to let them go early and i had so many

979
00:37:38,160 --> 00:37:40,079
people pissed off that i let them go

980
00:37:40,079 --> 00:37:42,320
early i got rage emails and my boss got

981
00:37:42,320 --> 00:37:44,000
called and like this clown's going to

982
00:37:44,000 --> 00:37:46,160
only use an hour and a half of my time

983
00:37:46,160 --> 00:37:50,359
so the next night we went four hours

984
00:37:52,940 --> 00:37:56,160
[Laughter]

985
00:37:58,640 --> 00:38:03,160
okay i'll get rid of it three minutes

986
00:38:04,480 --> 00:38:06,560
okay another file

987
00:38:06,560 --> 00:38:09,359
that i want to take a look

988
00:38:16,839 --> 00:38:20,240
at this a second um this isn't uh from

989
00:38:20,240 --> 00:38:22,240
an age of tesla uh

990
00:38:22,240 --> 00:38:24,480
a commodity stealer uh i think they

991
00:38:24,480 --> 00:38:26,400
actually tried to sell it at some point

992
00:38:26,400 --> 00:38:29,040
uh sort of as legitimate software um i

993
00:38:29,040 --> 00:38:31,520
believe it's written in dot net uh

994
00:38:31,520 --> 00:38:33,520
as recent or at least the not too

995
00:38:33,520 --> 00:38:35,119
distant past one of their x field

996
00:38:35,119 --> 00:38:37,760
methods was over smtp which you know

997
00:38:37,760 --> 00:38:39,920
surprisingly enough was a way to be a

998
00:38:39,920 --> 00:38:41,520
bit stealthy although if you don't have

999
00:38:41,520 --> 00:38:43,599
smg smtp in your environment it becomes

1000
00:38:43,599 --> 00:38:45,839
quite loud

1001
00:38:45,839 --> 00:38:47,920
but not a lot at least from the the in

1002
00:38:47,920 --> 00:38:50,000
the ut open side for rules that catch

1003
00:38:50,000 --> 00:38:51,920
that and and again sometimes these

1004
00:38:51,920 --> 00:38:54,000
variations and how activity is

1005
00:38:54,000 --> 00:38:55,760
accomplished the ttps they change just

1006
00:38:55,760 --> 00:38:58,560
subtly enough uh that it's it's easy to

1007
00:38:58,560 --> 00:39:00,560
miss

1008
00:39:00,560 --> 00:39:01,920
you'll see here in just a moment with

1009
00:39:01,920 --> 00:39:03,839
this one

1010
00:39:03,839 --> 00:39:06,000
no signature hits so

1011
00:39:06,000 --> 00:39:07,839
nothing nothing out of the ordinary

1012
00:39:07,839 --> 00:39:09,920
although there is in fact some some very

1013
00:39:09,920 --> 00:39:14,200
definite exfil going on here

1014
00:39:24,160 --> 00:39:26,079
look at just the event types i can do

1015
00:39:26,079 --> 00:39:28,320
that just because again you know it's a

1016
00:39:28,320 --> 00:39:29,680
little bit easier looking at pcaps

1017
00:39:29,680 --> 00:39:30,640
because we're dealing with a much

1018
00:39:30,640 --> 00:39:32,960
smaller data set rather than trying to

1019
00:39:32,960 --> 00:39:35,040
fish this out of of you know real

1020
00:39:35,040 --> 00:39:36,640
network traffic

1021
00:39:36,640 --> 00:39:38,240
but some things you know certainly stand

1022
00:39:38,240 --> 00:39:40,400
out here we have some dns entries that

1023
00:39:40,400 --> 00:39:42,079
might be worth looking into to see what

1024
00:39:42,079 --> 00:39:44,320
dns was resolved more than likely that

1025
00:39:44,320 --> 00:39:46,800
was you know in relation to this smtp

1026
00:39:46,800 --> 00:39:47,760
record

1027
00:39:47,760 --> 00:39:49,440
there's some anomaly records as well as

1028
00:39:49,440 --> 00:39:51,920
some file info so

1029
00:39:51,920 --> 00:39:54,640
let's take a look

1030
00:39:54,839 --> 00:39:59,200
at the smtp record

1031
00:40:06,079 --> 00:40:07,760
and there we go we can see at least some

1032
00:40:07,760 --> 00:40:09,839
basic information about it

1033
00:40:09,839 --> 00:40:11,920
certainly seeing things like names of

1034
00:40:11,920 --> 00:40:14,079
our users or names of our assets in

1035
00:40:14,079 --> 00:40:15,839
email subject lines going out of the

1036
00:40:15,839 --> 00:40:17,680
environment is a bad sign

1037
00:40:17,680 --> 00:40:19,440
we can see that here this is one of my

1038
00:40:19,440 --> 00:40:21,119
sandbox systems

1039
00:40:21,119 --> 00:40:23,280
of which my favorite user john who is in

1040
00:40:23,280 --> 00:40:26,480
hr happened to be a victim of this it

1041
00:40:26,480 --> 00:40:28,960
had an attachment a jpeg file so again

1042
00:40:28,960 --> 00:40:30,480
we can sort of speculate at this point

1043
00:40:30,480 --> 00:40:32,720
that likely that file info record had to

1044
00:40:32,720 --> 00:40:35,119
deal with this jpeg file

1045
00:40:35,119 --> 00:40:38,119
so

1046
00:40:42,160 --> 00:40:46,640
i can move from smtp to file info

1047
00:40:47,040 --> 00:40:49,760
there we go we can see file information

1048
00:40:49,760 --> 00:40:52,560
the state was closed the md5

1049
00:40:52,560 --> 00:40:54,079
the different hashes

1050
00:40:54,079 --> 00:40:56,000
it was not stored right so even though

1051
00:40:56,000 --> 00:40:58,160
we're generating file information

1052
00:40:58,160 --> 00:41:00,079
we haven't extracted any files there's

1053
00:41:00,079 --> 00:41:01,359
an extra step that we have to take in

1054
00:41:01,359 --> 00:41:02,720
order to do that

1055
00:41:02,720 --> 00:41:04,800
but it does look like a no kidding jpeg

1056
00:41:04,800 --> 00:41:09,520
file if we want to to do file extraction

1057
00:41:09,520 --> 00:41:13,640
it's really a two-step process

1058
00:41:22,319 --> 00:41:24,880
let's do

1059
00:41:26,560 --> 00:41:30,680
fighting my urge to use nano

1060
00:41:36,160 --> 00:41:37,760
okay um we have to go into the

1061
00:41:37,760 --> 00:41:40,240
configuration and again most of this is

1062
00:41:40,240 --> 00:41:42,640
is pretty well documented um so you go

1063
00:41:42,640 --> 00:41:44,720
into the uh

1064
00:41:44,720 --> 00:41:46,640
the configuration here and then we have

1065
00:41:46,640 --> 00:41:48,720
to enable the file store so i've already

1066
00:41:48,720 --> 00:41:50,960
done that uh of course but that's not

1067
00:41:50,960 --> 00:41:52,720
the default state uh something that you

1068
00:41:52,720 --> 00:41:53,839
have to do intentionally because you

1069
00:41:53,839 --> 00:41:55,760
don't want to start extracting files all

1070
00:41:55,760 --> 00:41:57,359
the time filling up disk space on on

1071
00:41:57,359 --> 00:41:58,560
your sensor

1072
00:41:58,560 --> 00:42:00,000
so that's enabled

1073
00:42:00,000 --> 00:42:02,800
and then the next part of it

1074
00:42:02,800 --> 00:42:06,079
is we have to write a rule

1075
00:42:06,960 --> 00:42:10,920
i don't need pseudo for that

1076
00:42:19,119 --> 00:42:21,280
okay so there it is very simple rule not

1077
00:42:21,280 --> 00:42:22,480
the best rule

1078
00:42:22,480 --> 00:42:24,400
but in terms of just getting the file

1079
00:42:24,400 --> 00:42:26,319
extraction to occur this will be a good

1080
00:42:26,319 --> 00:42:28,720
example

1081
00:42:28,800 --> 00:42:30,400
the the action really doesn't matter

1082
00:42:30,400 --> 00:42:31,839
we're going to say alert in this case so

1083
00:42:31,839 --> 00:42:33,599
that we we know that it's that we've had

1084
00:42:33,599 --> 00:42:36,240
a file extraction occur um i don't know

1085
00:42:36,240 --> 00:42:37,920
if it would make sense to say drop but i

1086
00:42:37,920 --> 00:42:39,200
suppose you could

1087
00:42:39,200 --> 00:42:41,200
there's the protocol so we're looking at

1088
00:42:41,200 --> 00:42:42,800
just smtp

1089
00:42:42,800 --> 00:42:46,160
we have um typically where we define our

1090
00:42:46,160 --> 00:42:48,160
you know our internal external ip space

1091
00:42:48,160 --> 00:42:49,920
so what direction in the communication

1092
00:42:49,920 --> 00:42:51,119
are we looking at

1093
00:42:51,119 --> 00:42:52,640
you'll see this commonly with your home

1094
00:42:52,640 --> 00:42:54,800
net external net which your home net

1095
00:42:54,800 --> 00:42:57,200
tends to be your rfc 1918 your external

1096
00:42:57,200 --> 00:42:59,200
of course is anything that isn't that so

1097
00:42:59,200 --> 00:43:01,440
you define that for your environment

1098
00:43:01,440 --> 00:43:03,520
again i'll just be lazy i'll say any any

1099
00:43:03,520 --> 00:43:06,400
so any ip any port going to any ip any

1100
00:43:06,400 --> 00:43:08,800
port so whether it's coming in or out

1101
00:43:08,800 --> 00:43:10,480
message is arbitrary that's just what

1102
00:43:10,480 --> 00:43:12,319
you see when the alert is generated we

1103
00:43:12,319 --> 00:43:14,160
have a couple keywords though one is

1104
00:43:14,160 --> 00:43:16,160
file store we have to say file store in

1105
00:43:16,160 --> 00:43:18,400
order to tell circada to store and then

1106
00:43:18,400 --> 00:43:20,800
we have to tell it what to match on so

1107
00:43:20,800 --> 00:43:22,960
you can match off a file extension which

1108
00:43:22,960 --> 00:43:24,880
may not always be accurate

1109
00:43:24,880 --> 00:43:27,119
you can match on file magic which then

1110
00:43:27,119 --> 00:43:29,359
we're just taking a part of whatever the

1111
00:43:29,359 --> 00:43:30,800
magic of the file that you want to

1112
00:43:30,800 --> 00:43:33,200
extract assuming that that's going to be

1113
00:43:33,200 --> 00:43:35,040
you know concrete and unique enough to

1114
00:43:35,040 --> 00:43:37,440
give you the extraction that you want

1115
00:43:37,440 --> 00:43:39,920
and that's pretty much it we have a sid

1116
00:43:39,920 --> 00:43:41,440
which is our signature id we have to

1117
00:43:41,440 --> 00:43:43,599
define that and then the revision which

1118
00:43:43,599 --> 00:43:46,240
is just one

1119
00:43:50,640 --> 00:43:54,598
and now when we run this

1120
00:43:56,079 --> 00:43:57,680
assuming i didn't make any typos what

1121
00:43:57,680 --> 00:44:00,240
will happen then is we should see um

1122
00:44:00,240 --> 00:44:02,079
an alert that is generated indicating

1123
00:44:02,079 --> 00:44:04,319
that the file was in fact extracted

1124
00:44:04,319 --> 00:44:06,319
uh now when it comes to file extraction

1125
00:44:06,319 --> 00:44:08,400
the convention that cerakata uses is it

1126
00:44:08,400 --> 00:44:10,960
takes the first two characters of the

1127
00:44:10,960 --> 00:44:12,560
sha-256

1128
00:44:12,560 --> 00:44:15,200
and then it creates a folder structure

1129
00:44:15,200 --> 00:44:17,760
in the var log cerakata folder so you'll

1130
00:44:17,760 --> 00:44:19,920
see a file store folder and those first

1131
00:44:19,920 --> 00:44:22,480
two characters of the sha-256

1132
00:44:22,480 --> 00:44:24,560
is the subdirectories and then it drops

1133
00:44:24,560 --> 00:44:26,000
the files by

1134
00:44:26,000 --> 00:44:29,599
hash into those folders so again it's

1135
00:44:29,599 --> 00:44:31,839
not sure the rationale behind it

1136
00:44:31,839 --> 00:44:33,280
but it is certainly a way to organize

1137
00:44:33,280 --> 00:44:35,119
that it is a way to find those and it is

1138
00:44:35,119 --> 00:44:36,640
documented

1139
00:44:36,640 --> 00:44:40,160
so let's see what we get here

1140
00:44:46,240 --> 00:44:48,240
okay so there's an example of permission

1141
00:44:48,240 --> 00:44:50,960
error so an error in

1142
00:44:50,960 --> 00:44:53,280
output was generated

1143
00:44:53,280 --> 00:44:55,440
this says it extracted and i did this

1144
00:44:55,440 --> 00:44:57,040
previously so the file should still be

1145
00:44:57,040 --> 00:44:58,160
there so

1146
00:44:58,160 --> 00:44:59,760
likely what happened is i went ahead and

1147
00:44:59,760 --> 00:45:01,359
i changed the permissions of the file

1148
00:45:01,359 --> 00:45:03,680
store direct directory

1149
00:45:03,680 --> 00:45:05,839
and now circad is having issues

1150
00:45:05,839 --> 00:45:07,599
accessing it

1151
00:45:07,599 --> 00:45:09,200
there's a tendency in this vm for

1152
00:45:09,200 --> 00:45:11,040
everything to just be root and pseudo

1153
00:45:11,040 --> 00:45:12,800
and i try to get away from that and i

1154
00:45:12,800 --> 00:45:14,800
think that might have been the problem

1155
00:45:14,800 --> 00:45:16,720
so we'll go to

1156
00:45:16,720 --> 00:45:19,839
where this file should be

1157
00:45:20,880 --> 00:45:23,520
bar log

1158
00:45:23,920 --> 00:45:25,280
where are you

1159
00:45:25,280 --> 00:45:28,800
circada file store

1160
00:45:28,800 --> 00:45:32,000
i think it was 1b

1161
00:45:32,000 --> 00:45:35,839
yeah there it is so there you can see

1162
00:45:36,560 --> 00:45:38,720
all of the directories and now we'll be

1163
00:45:38,720 --> 00:45:40,480
able to find our files so it'll be

1164
00:45:40,480 --> 00:45:42,160
written there by hash and it'd be up to

1165
00:45:42,160 --> 00:45:44,160
us then to further identify

1166
00:45:44,160 --> 00:45:45,839
what type of file is it and what does it

1167
00:45:45,839 --> 00:45:48,079
do what we actually want to do with it

1168
00:45:48,079 --> 00:45:49,839
in this case it did take a no kidding

1169
00:45:49,839 --> 00:45:52,480
screenshot of the the system it was

1170
00:45:52,480 --> 00:45:53,839
running on

1171
00:45:53,839 --> 00:45:57,799
which is a pretty boring one

1172
00:46:06,400 --> 00:46:11,000
okay any questions for me so far

1173
00:46:19,520 --> 00:46:20,960
okay so

1174
00:46:20,960 --> 00:46:22,319
obviously doing that all from a command

1175
00:46:22,319 --> 00:46:24,400
line it does not scale well

1176
00:46:24,400 --> 00:46:26,000
so there's any number of ways to take

1177
00:46:26,000 --> 00:46:28,720
that data and make it more effective

1178
00:46:28,720 --> 00:46:31,359
operationalize it make it more useful

1179
00:46:31,359 --> 00:46:34,319
eve box is just a project supported by

1180
00:46:34,319 --> 00:46:36,319
one of the core developers jason ish

1181
00:46:36,319 --> 00:46:38,000
he's been on the team for a very long

1182
00:46:38,000 --> 00:46:39,359
time

1183
00:46:39,359 --> 00:46:41,200
it's you know very lightweight it's easy

1184
00:46:41,200 --> 00:46:42,400
to set up and run

1185
00:46:42,400 --> 00:46:45,839
and you get the basics of managing it's

1186
00:46:45,839 --> 00:46:47,599
primarily focused on alert so it has

1187
00:46:47,599 --> 00:46:49,680
this inbox approach in which you'll see

1188
00:46:49,680 --> 00:46:51,280
all of the alerts that are generated

1189
00:46:51,280 --> 00:46:53,520
here you have the ability to drill down

1190
00:46:53,520 --> 00:46:55,440
into those alerts to start to see some

1191
00:46:55,440 --> 00:46:58,000
of the metadata that's there

1192
00:46:58,000 --> 00:47:02,160
if not you can go all the way down

1193
00:47:03,440 --> 00:47:05,280
and all of that

1194
00:47:05,280 --> 00:47:07,760
json the event record from the eve.json

1195
00:47:07,760 --> 00:47:10,560
file is also displayed there so

1196
00:47:10,560 --> 00:47:12,240
you know arguably an easier way to get

1197
00:47:12,240 --> 00:47:14,000
access to that data

1198
00:47:14,000 --> 00:47:15,520
there's some basic commenting there's

1199
00:47:15,520 --> 00:47:18,480
some basic escalation and all of the or

1200
00:47:18,480 --> 00:47:20,079
at least most of the data points here

1201
00:47:20,079 --> 00:47:21,440
also

1202
00:47:21,440 --> 00:47:23,359
you know you're able to click on and

1203
00:47:23,359 --> 00:47:24,800
start to pivot a little bit easier in

1204
00:47:24,800 --> 00:47:26,640
this interface so there's a flow id for

1205
00:47:26,640 --> 00:47:28,640
example we can click on the flow id

1206
00:47:28,640 --> 00:47:30,559
that'll take us to this events page and

1207
00:47:30,559 --> 00:47:32,000
now we'll see all of those events just

1208
00:47:32,000 --> 00:47:34,400
like we saw previously but in a ui

1209
00:47:34,400 --> 00:47:36,880
instead of in our terminal

1210
00:47:36,880 --> 00:47:38,400
not all of it's there

1211
00:47:38,400 --> 00:47:40,640
some quirky things that are maybe

1212
00:47:40,640 --> 00:47:42,000
missing a bit

1213
00:47:42,000 --> 00:47:42,960
um

1214
00:47:42,960 --> 00:47:45,599
for example

1215
00:47:49,760 --> 00:47:53,839
there's my desktop there it is

1216
00:47:59,839 --> 00:48:02,720
you know if we look at this smtp session

1217
00:48:02,720 --> 00:48:04,240
and something like wireshark and i'm

1218
00:48:04,240 --> 00:48:05,520
sure the data is there i just haven't

1219
00:48:05,520 --> 00:48:06,880
found it

1220
00:48:06,880 --> 00:48:07,680
you know of course they had to

1221
00:48:07,680 --> 00:48:09,839
authenticate to their servers so we've

1222
00:48:09,839 --> 00:48:12,160
captured that information

1223
00:48:12,160 --> 00:48:14,800
what you do with it is up to you

1224
00:48:14,800 --> 00:48:16,319
i would never authenticate to something

1225
00:48:16,319 --> 00:48:17,599
like that

1226
00:48:17,599 --> 00:48:19,200
but certainly there's some maybe some

1227
00:48:19,200 --> 00:48:21,920
additional information that's there

1228
00:48:21,920 --> 00:48:23,760
all the event records again the ability

1229
00:48:23,760 --> 00:48:26,319
to query some basic reporting you know

1230
00:48:26,319 --> 00:48:28,000
it doesn't replace

1231
00:48:28,000 --> 00:48:30,319
maybe more complex ways of managing

1232
00:48:30,319 --> 00:48:31,599
these but it is a great way to get

1233
00:48:31,599 --> 00:48:33,760
started and certainly one of the reasons

1234
00:48:33,760 --> 00:48:35,680
that we like to use it inside of the

1235
00:48:35,680 --> 00:48:39,319
training vm here

1236
00:48:51,599 --> 00:48:54,319
um okay

1237
00:48:58,480 --> 00:48:59,839
i guess i still have a few minutes don't

1238
00:48:59,839 --> 00:49:01,680
i okay let's take a look at one more

1239
00:49:01,680 --> 00:49:03,280
then

1240
00:49:03,280 --> 00:49:05,920
unless you've had enough

1241
00:49:05,920 --> 00:49:08,160
keep

1242
00:49:14,839 --> 00:49:18,000
going okay so while that pcap gets set

1243
00:49:18,000 --> 00:49:20,160
up

1244
00:49:27,760 --> 00:49:28,800
oh

1245
00:49:28,800 --> 00:49:31,800
okay

1246
00:49:32,160 --> 00:49:34,079
okay so these are

1247
00:49:34,079 --> 00:49:35,920
you know you run across these um these

1248
00:49:35,920 --> 00:49:37,280
these interesting

1249
00:49:37,280 --> 00:49:38,800
you know documents malicious office

1250
00:49:38,800 --> 00:49:41,359
documents from time to time uh 20 20 and

1251
00:49:41,359 --> 00:49:43,200
21's been an interesting year because we

1252
00:49:43,200 --> 00:49:45,680
saw this resurgence of excel 4 macros

1253
00:49:45,680 --> 00:49:48,400
which initially was very different from

1254
00:49:48,400 --> 00:49:50,720
the normal sort of vba macro style

1255
00:49:50,720 --> 00:49:52,800
enabled documents

1256
00:49:52,800 --> 00:49:55,119
with the excel docs being again seeing

1257
00:49:55,119 --> 00:49:57,359
this resurgence

1258
00:49:57,359 --> 00:49:59,599
there was a lot of clever ways that were

1259
00:49:59,599 --> 00:50:01,680
discovered to get code to execute um

1260
00:50:01,680 --> 00:50:03,280
some of them most of them still require

1261
00:50:03,280 --> 00:50:05,200
some some form of user interaction

1262
00:50:05,200 --> 00:50:06,880
enabling dynamic content enabling

1263
00:50:06,880 --> 00:50:09,680
external content or data sources um but

1264
00:50:09,680 --> 00:50:11,760
definitely there there were you know

1265
00:50:11,760 --> 00:50:13,280
these little oddballs thrown at us

1266
00:50:13,280 --> 00:50:15,839
pretty regularly um anytime i get an

1267
00:50:15,839 --> 00:50:18,559
office stock and it doesn't have macros

1268
00:50:18,559 --> 00:50:20,319
right then the first question that pops

1269
00:50:20,319 --> 00:50:21,839
into my head is what is it used for and

1270
00:50:21,839 --> 00:50:23,680
how does it get code to execute

1271
00:50:23,680 --> 00:50:25,040
maybe it's just meant to be part of a

1272
00:50:25,040 --> 00:50:26,800
fish but odds are if i throw it in a

1273
00:50:26,800 --> 00:50:28,640
sandbox and i see it make an http

1274
00:50:28,640 --> 00:50:30,960
request to some you know suspicious

1275
00:50:30,960 --> 00:50:33,119
looking domain i know something's up uh

1276
00:50:33,119 --> 00:50:34,880
this is one document

1277
00:50:34,880 --> 00:50:36,720
i came across again this technique isn't

1278
00:50:36,720 --> 00:50:38,160
anything new

1279
00:50:38,160 --> 00:50:39,440
it just isn't something that i come

1280
00:50:39,440 --> 00:50:41,599
across too regular um i don't look at

1281
00:50:41,599 --> 00:50:43,839
thousands of documents a day though um

1282
00:50:43,839 --> 00:50:46,000
and it had a

1283
00:50:46,000 --> 00:50:46,720
as

1284
00:50:46,720 --> 00:50:48,640
a as an office doc

1285
00:50:48,640 --> 00:50:49,920
it had

1286
00:50:49,920 --> 00:50:51,119
no macros

1287
00:50:51,119 --> 00:50:54,920
and it's word

1288
00:50:56,160 --> 00:50:58,000
there we go word document microsoft word

1289
00:50:58,000 --> 00:50:59,359
2007

1290
00:50:59,359 --> 00:51:00,640
but definitely we want to throw it in a

1291
00:51:00,640 --> 00:51:03,119
sandbox it exhibits behavior something's

1292
00:51:03,119 --> 00:51:04,480
going on

1293
00:51:04,480 --> 00:51:06,079
so this was just one of those techniques

1294
00:51:06,079 --> 00:51:07,760
that i had to stumble across and do a

1295
00:51:07,760 --> 00:51:09,920
little research others of course have

1296
00:51:09,920 --> 00:51:11,440
come across this technique and already

1297
00:51:11,440 --> 00:51:13,680
written blogs and white papers about it

1298
00:51:13,680 --> 00:51:15,839
it performs template injection

1299
00:51:15,839 --> 00:51:17,839
and so the original document doesn't

1300
00:51:17,839 --> 00:51:19,839
contain anything but a link to an

1301
00:51:19,839 --> 00:51:21,520
external resource which then when you

1302
00:51:21,520 --> 00:51:24,319
open it it happily will go and download

1303
00:51:24,319 --> 00:51:26,000
and then execute any macro content

1304
00:51:26,000 --> 00:51:28,800
inside that document so it it adds a bit

1305
00:51:28,800 --> 00:51:30,559
of stealth you could say and that this

1306
00:51:30,559 --> 00:51:32,319
original doc if this is where you

1307
00:51:32,319 --> 00:51:34,000
stopped your analysis you'd say must

1308
00:51:34,000 --> 00:51:35,200
have been a false positive maybe

1309
00:51:35,200 --> 00:51:36,960
somebody didn't understand whatever the

1310
00:51:36,960 --> 00:51:39,760
reason and you might move on

1311
00:51:39,760 --> 00:51:41,440
on the network it leaves some pretty

1312
00:51:41,440 --> 00:51:43,920
interesting

1313
00:51:44,160 --> 00:51:45,599
tells

1314
00:51:45,599 --> 00:51:47,760
you can see this one generated quite a

1315
00:51:47,760 --> 00:51:49,520
few alerts

1316
00:51:49,520 --> 00:51:52,960
but if we look at the http flows what

1317
00:51:52,960 --> 00:51:55,040
really stood out to me

1318
00:51:55,040 --> 00:51:56,400
you know if we just take a step back and

1319
00:51:56,400 --> 00:51:57,760
say all right what could be some maybe

1320
00:51:57,760 --> 00:51:59,119
some odd things that are going on in our

1321
00:51:59,119 --> 00:52:00,079
network

1322
00:52:00,079 --> 00:52:02,400
well seeing those verbs

1323
00:52:02,400 --> 00:52:05,680
prop find and options and head

1324
00:52:05,680 --> 00:52:07,280
you know depending on your environment

1325
00:52:07,280 --> 00:52:08,720
that might be something that could stand

1326
00:52:08,720 --> 00:52:09,599
out

1327
00:52:09,599 --> 00:52:11,280
certainly in my sandbox environment

1328
00:52:11,280 --> 00:52:13,040
that's something that stands out because

1329
00:52:13,040 --> 00:52:15,599
i don't typically see that type of http

1330
00:52:15,599 --> 00:52:17,359
activity so

1331
00:52:17,359 --> 00:52:18,800
looking at those

1332
00:52:18,800 --> 00:52:21,440
you'll notice that there is a rather

1333
00:52:21,440 --> 00:52:23,240
suspicious looking domain

1334
00:52:23,240 --> 00:52:24,880
doctor.hop2.org

1335
00:52:24,880 --> 00:52:26,960
it's making a request for this nd dot

1336
00:52:26,960 --> 00:52:28,240
dot

1337
00:52:28,240 --> 00:52:30,559
and then eventually we have a request

1338
00:52:30,559 --> 00:52:32,960
for nv.exe right so we can start to

1339
00:52:32,960 --> 00:52:34,400
piece together what's happening here is

1340
00:52:34,400 --> 00:52:36,400
that this document is somehow

1341
00:52:36,400 --> 00:52:38,480
grabbing

1342
00:52:38,480 --> 00:52:40,880
this document or this thing

1343
00:52:40,880 --> 00:52:43,280
and then this thing eventually leads to

1344
00:52:43,280 --> 00:52:44,720
the download and execution of our

1345
00:52:44,720 --> 00:52:46,480
payload

1346
00:52:46,480 --> 00:52:48,400
so what is this file

1347
00:52:48,400 --> 00:52:50,000
well i mean they kind of give it away

1348
00:52:50,000 --> 00:52:52,480
with the dot dot extension but we can

1349
00:52:52,480 --> 00:52:53,680
certainly go and look at file

1350
00:52:53,680 --> 00:52:56,558
information events

1351
00:52:56,800 --> 00:52:59,040
and we have

1352
00:52:59,040 --> 00:53:01,920
and d dot dot right here

1353
00:53:01,920 --> 00:53:04,400
and our magic says that this is a rich

1354
00:53:04,400 --> 00:53:06,400
text format it's an rtf doc

1355
00:53:06,400 --> 00:53:08,880
um it was fully extracted

1356
00:53:08,880 --> 00:53:10,559
or at least in this case we didn't

1357
00:53:10,559 --> 00:53:12,640
extract it because i didn't write

1358
00:53:12,640 --> 00:53:14,720
i don't have a rule that extracts rtf

1359
00:53:14,720 --> 00:53:16,480
docs or pdf docs you saw all i have is a

1360
00:53:16,480 --> 00:53:18,800
rule to extract that one jpeg

1361
00:53:18,800 --> 00:53:20,640
but it did give us the file information

1362
00:53:20,640 --> 00:53:22,960
so now we have a solid hash

1363
00:53:22,960 --> 00:53:24,000
and because i didn't connect to the

1364
00:53:24,000 --> 00:53:25,200
internet i'm not going to be able to

1365
00:53:25,200 --> 00:53:29,160
connect to this um

1366
00:53:29,760 --> 00:53:31,200
i'm always afraid to show what's on my

1367
00:53:31,200 --> 00:53:33,759
desktop

1368
00:53:35,040 --> 00:53:37,279
okay

1369
00:53:40,559 --> 00:53:41,920
i'll give that a second and see if it

1370
00:53:41,920 --> 00:53:44,559
actually connects

1371
00:53:46,000 --> 00:53:49,359
oh looks like it yes

1372
00:53:51,839 --> 00:53:54,640
okay so we go to a place sandbox

1373
00:53:54,640 --> 00:53:58,000
like any run which

1374
00:53:58,000 --> 00:53:59,760
while it reports it as suspicious the

1375
00:53:59,760 --> 00:54:02,319
only reason it's suspicious

1376
00:54:02,319 --> 00:54:04,640
is because

1377
00:54:04,640 --> 00:54:06,880
this dns request failed so at the time

1378
00:54:06,880 --> 00:54:09,200
that this was submitted to the sandbox

1379
00:54:09,200 --> 00:54:11,200
the the dns was not resolving so that

1380
00:54:11,200 --> 00:54:13,200
next stage payload didn't come

1381
00:54:13,200 --> 00:54:14,960
i would say word launching equation

1382
00:54:14,960 --> 00:54:16,559
editor is probably suspicious that's

1383
00:54:16,559 --> 00:54:19,920
good old cve 2017-1182

1384
00:54:19,920 --> 00:54:21,119
been around for a while it's been

1385
00:54:21,119 --> 00:54:22,640
mitigated and patched for a while but a

1386
00:54:22,640 --> 00:54:24,160
lot of those you know sort of mid-tier

1387
00:54:24,160 --> 00:54:26,319
low-tier threat actor criminal

1388
00:54:26,319 --> 00:54:28,160
organizations whomever they're still

1389
00:54:28,160 --> 00:54:29,280
using it and they're still using it

1390
00:54:29,280 --> 00:54:31,440
pretty regularly they must be finding

1391
00:54:31,440 --> 00:54:32,880
some success out there in the world with

1392
00:54:32,880 --> 00:54:34,000
it

1393
00:54:34,000 --> 00:54:36,799
so rtf doc that was weaponized to use

1394
00:54:36,799 --> 00:54:39,200
the equation editor in order to execute

1395
00:54:39,200 --> 00:54:41,599
some code and download the next stage so

1396
00:54:41,599 --> 00:54:44,559
that's how that whole chain unraveled

1397
00:54:44,559 --> 00:54:46,000
and

1398
00:54:46,000 --> 00:54:48,240
you know again this one had some pretty

1399
00:54:48,240 --> 00:54:50,480
some pretty good alerts

1400
00:54:50,480 --> 00:54:52,880
go back and take a look at those um you

1401
00:54:52,880 --> 00:54:55,920
know the pe file download was a big one

1402
00:54:55,920 --> 00:54:57,359
again i don't understand why they don't

1403
00:54:57,359 --> 00:54:59,040
take just that extra step and obfuscate

1404
00:54:59,040 --> 00:55:00,640
that even if they just flip the first

1405
00:55:00,640 --> 00:55:04,480
two bytes in the the payload response

1406
00:55:04,480 --> 00:55:06,640
that would probably bypass a lot of this

1407
00:55:06,640 --> 00:55:08,319
um you know they're not using a tls

1408
00:55:08,319 --> 00:55:09,520
session which again i know a lot of

1409
00:55:09,520 --> 00:55:10,960
compromised infrastructure that takes

1410
00:55:10,960 --> 00:55:12,079
more work maybe they don't have the

1411
00:55:12,079 --> 00:55:13,200
ability to

1412
00:55:13,200 --> 00:55:15,280
sites that compromise aren't using it

1413
00:55:15,280 --> 00:55:17,760
um you know some of the dine dns dynamic

1414
00:55:17,760 --> 00:55:19,280
dns and things like that that also

1415
00:55:19,280 --> 00:55:21,119
becomes a pretty large

1416
00:55:21,119 --> 00:55:22,880
you know at least an indicator that can

1417
00:55:22,880 --> 00:55:25,680
be more easily alerted on although how

1418
00:55:25,680 --> 00:55:27,200
does that scale in an environment i

1419
00:55:27,200 --> 00:55:29,200
really don't know

1420
00:55:29,200 --> 00:55:30,960
the only thing that is maybe really

1421
00:55:30,960 --> 00:55:33,280
unique in terms of our alerts to this

1422
00:55:33,280 --> 00:55:35,920
particular injection

1423
00:55:35,920 --> 00:55:38,319
is this possible fake microsoft office

1424
00:55:38,319 --> 00:55:40,240
user agent

1425
00:55:40,240 --> 00:55:42,160
so and that's a new one i haven't seen

1426
00:55:42,160 --> 00:55:44,720
that one before last time i ran this

1427
00:55:44,720 --> 00:55:46,559
so again you know having all of that

1428
00:55:46,559 --> 00:55:48,799
different http information those verbs

1429
00:55:48,799 --> 00:55:50,160
those are things that can really stand

1430
00:55:50,160 --> 00:55:52,319
out if you're watching for them

1431
00:55:52,319 --> 00:55:53,119
okay

1432
00:55:53,119 --> 00:55:55,119
i think i got there questions uh

1433
00:55:55,119 --> 00:55:57,680
comments for me

1434
00:55:57,680 --> 00:55:59,680
okay well thank you very much again doug

1435
00:55:59,680 --> 00:56:01,440
and everyone phil and thank everyone for

1436
00:56:01,440 --> 00:56:03,040
your attention and

1437
00:56:03,040 --> 00:56:06,480
look forward to meeting everyone

1438
00:56:07,040 --> 00:56:08,960
thank you josh

1439
00:56:08,960 --> 00:56:10,799
thank you so much josh really appreciate

1440
00:56:10,799 --> 00:56:12,880
it

1441
00:56:13,839 --> 00:56:16,640
am i on am i on can you hear me okay

1442
00:56:16,640 --> 00:56:18,480
all right um

1443
00:56:18,480 --> 00:56:19,359
so

1444
00:56:19,359 --> 00:56:21,040
this conference is about community

1445
00:56:21,040 --> 00:56:23,119
there's lots of other projects in the

1446
00:56:23,119 --> 00:56:24,640
community so i hope you all enjoyed that

1447
00:56:24,640 --> 00:56:25,680
very much

1448
00:56:25,680 --> 00:56:27,760
as much as as much as i did

1449
00:56:27,760 --> 00:56:29,040
um

1450
00:56:29,040 --> 00:56:32,480
if you want to use suricata metadata in

1451
00:56:32,480 --> 00:56:35,359
security onion you can

1452
00:56:35,359 --> 00:56:37,359
so if you've installed security onion

1453
00:56:37,359 --> 00:56:39,280
for a long time or had it installed for

1454
00:56:39,280 --> 00:56:41,359
a long time you're probably used to

1455
00:56:41,359 --> 00:56:44,319
using zeek for metadata but if you want

1456
00:56:44,319 --> 00:56:46,960
to use cerakata for metadata that

1457
00:56:46,960 --> 00:56:48,240
feature is now available in

1458
00:56:48,240 --> 00:56:50,160
securityonion all you need to do is in

1459
00:56:50,160 --> 00:56:53,359
the global global pillar file

1460
00:56:53,359 --> 00:56:55,359
you just need to make a quick entry

1461
00:56:55,359 --> 00:56:58,000
change as i think it's md engine you

1462
00:56:58,000 --> 00:57:00,079
change that from zeke to cerakote of

1463
00:57:00,079 --> 00:57:01,920
course there's a there's a whole process

1464
00:57:01,920 --> 00:57:03,359
involved you have to

1465
00:57:03,359 --> 00:57:05,599
um you have to you know do some other

1466
00:57:05,599 --> 00:57:07,680
things so if you wanted more information

1467
00:57:07,680 --> 00:57:08,559
on that you can go out to our

1468
00:57:08,559 --> 00:57:10,839
documentation site that's

1469
00:57:10,839 --> 00:57:12,559
securityonion.net

1470
00:57:12,559 --> 00:57:15,119
docs docs slash

1471
00:57:15,119 --> 00:57:17,040
cerakata usually you can do

1472
00:57:17,040 --> 00:57:20,720
securityonion.net docs slash something

1473
00:57:20,720 --> 00:57:22,559
and if we have a page for it

1474
00:57:22,559 --> 00:57:24,559
if you catch the name right you might be

1475
00:57:24,559 --> 00:57:26,079
redirected you should be redirected to

1476
00:57:26,079 --> 00:57:27,119
that page

1477
00:57:27,119 --> 00:57:30,880
so again securityonion.net docs slash

1478
00:57:30,880 --> 00:57:32,240
suricata

1479
00:57:32,240 --> 00:57:34,400
and you'll get information there on how

1480
00:57:34,400 --> 00:57:36,720
to enable just about everything josh

1481
00:57:36,720 --> 00:57:40,879
just talked about right in security on

