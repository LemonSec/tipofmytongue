1
00:00:13,450 --> 00:00:19,520
<font color="#E5E5E5">all right thanks everyone</font><font color="#CCCCCC"> like Phil said</font>

2
00:00:17,210 --> 00:00:20,990
my name is<font color="#CCCCCC"> David Bianco or as I prefer</font>

3
00:00:19,520 --> 00:00:29,869
<font color="#CCCCCC">to think of myself today</font>

4
00:00:20,990 --> 00:00:31,848
<font color="#E5E5E5">Doug Burke says warm-up</font><font color="#CCCCCC"> band so</font><font color="#E5E5E5"> I got my</font>

5
00:00:29,869 --> 00:00:33,379
start in information security I don't

6
00:00:31,849 --> 00:00:35,660
know I'm<font color="#CCCCCC"> not</font><font color="#E5E5E5"> gonna say how</font><font color="#CCCCCC"> many</font><font color="#E5E5E5"> years</font>

7
00:00:33,379 --> 00:00:37,460
<font color="#CCCCCC">ago but on the on the network security</font>

8
00:00:35,660 --> 00:00:40,459
<font color="#E5E5E5">monitoring side that's actually how I</font>

9
00:00:37,460 --> 00:00:41,409
know Doug because I was an early<font color="#E5E5E5"> user of</font>

10
00:00:40,460 --> 00:00:45,470
some of the things<font color="#E5E5E5"> that went into</font>

11
00:00:41,409 --> 00:00:48,019
security onion and<font color="#E5E5E5"> but in the last few</font>

12
00:00:45,470 --> 00:00:50,839
<font color="#E5E5E5">years I've been concentrating</font><font color="#CCCCCC"> a lot</font><font color="#E5E5E5"> more</font>

13
00:00:48,019 --> 00:00:53,989
on the<font color="#E5E5E5"> idea of</font><font color="#CCCCCC"> taking big</font><font color="#E5E5E5"> piles of data</font>

14
00:00:50,839 --> 00:00:56,750
and doing some analysis<font color="#E5E5E5"> on that data to</font>

15
00:00:53,989 --> 00:00:59,530
try to figure<font color="#E5E5E5"> out what kind of evil</font><font color="#CCCCCC"> I</font>

16
00:00:56,750 --> 00:01:01,939
can find out of<font color="#CCCCCC"> that data</font><font color="#E5E5E5"> threat hunting</font>

17
00:00:59,530 --> 00:01:03,949
<font color="#CCCCCC">data</font><font color="#E5E5E5"> analytics data science it doesn't</font>

18
00:01:01,939 --> 00:01:05,269
<font color="#E5E5E5">really matter what you call</font><font color="#CCCCCC"> it the kind</font>

19
00:01:03,949 --> 00:01:08,810
<font color="#E5E5E5">that I do</font><font color="#CCCCCC"> they're pretty</font><font color="#E5E5E5"> much all the</font>

20
00:01:05,269 --> 00:01:11,180
same so in this talk I wanted<font color="#E5E5E5"> to tell</font>

21
00:01:08,810 --> 00:01:13,880
<font color="#E5E5E5">you a little</font><font color="#CCCCCC"> bit about</font><font color="#E5E5E5"> how I approach</font>

22
00:01:11,180 --> 00:01:15,649
<font color="#E5E5E5">these</font><font color="#CCCCCC"> things and give you a kind of set</font>

23
00:01:13,880 --> 00:01:17,990
<font color="#E5E5E5">of practical examples that you might be</font>

24
00:01:15,649 --> 00:01:21,950
able<font color="#CCCCCC"> to go back</font><font color="#E5E5E5"> and take some</font><font color="#CCCCCC"> of my code</font>

25
00:01:17,990 --> 00:01:24,969
and do get<font color="#E5E5E5"> started doing this kind of</font>

26
00:01:21,950 --> 00:01:27,289
thing with your<font color="#E5E5E5"> data on your network</font>

27
00:01:24,969 --> 00:01:29,178
<font color="#E5E5E5">specifically I lied to you when I wrote</font>

28
00:01:27,289 --> 00:01:31,280
<font color="#E5E5E5">this title it's not</font><font color="#CCCCCC"> only</font><font color="#E5E5E5"> about security</font>

29
00:01:29,179 --> 00:01:33,020
<font color="#E5E5E5">onion</font><font color="#CCCCCC"> I do have a couple touch points</font>

30
00:01:31,280 --> 00:01:35,899
with security onion but those are not

31
00:01:33,020 --> 00:01:39,020
<font color="#CCCCCC">the</font><font color="#E5E5E5"> it's not</font><font color="#CCCCCC"> the only thing that you'll</font>

32
00:01:35,899 --> 00:01:40,729
be able<font color="#CCCCCC"> to</font><font color="#E5E5E5"> analyze but before I get</font>

33
00:01:39,020 --> 00:01:42,289
<font color="#E5E5E5">started on that I feel like since</font><font color="#CCCCCC"> mark</font>

34
00:01:40,729 --> 00:01:43,880
opened it up<font color="#E5E5E5"> by telling</font><font color="#CCCCCC"> you about his</font>

35
00:01:42,289 --> 00:01:46,969
super power<font color="#CCCCCC"> weight at the beginning</font><font color="#E5E5E5"> of</font>

36
00:01:43,880 --> 00:01:48,469
the day I should<font color="#CCCCCC"> tell you I cannot fold</font>

37
00:01:46,969 --> 00:01:53,178
a fitted sheet<font color="#E5E5E5"> and if you don't believe</font>

38
00:01:48,469 --> 00:01:56,329
<font color="#E5E5E5">me</font><font color="#CCCCCC"> go ask</font><font color="#E5E5E5"> my wife so you'll tell you but</font>

39
00:01:53,179 --> 00:01:59,240
I am an<font color="#E5E5E5"> aficionado of dad jokes there</font>

40
00:01:56,329 --> 00:02:01,758
you go so you're like David<font color="#E5E5E5"> how do you</font>

41
00:01:59,240 --> 00:02:03,439
know if it's a joke or a dad<font color="#E5E5E5"> joke and</font>

42
00:02:01,759 --> 00:02:06,069
the<font color="#E5E5E5"> only advice I</font><font color="#CCCCCC"> can give you</font><font color="#E5E5E5"> is it</font>

43
00:02:03,439 --> 00:02:06,068
<font color="#E5E5E5">will be a parent</font>

44
00:02:06,210 --> 00:02:16,790
[Applause]

45
00:02:14,110 --> 00:02:19,760
so there's that

46
00:02:16,790 --> 00:02:21,230
I have to front-load all my<font color="#E5E5E5"> jokes</font>

47
00:02:19,760 --> 00:02:27,709
because<font color="#E5E5E5"> the rest of</font><font color="#CCCCCC"> this is a data</font>

48
00:02:21,230 --> 00:02:30,980
analytics<font color="#E5E5E5"> talk so so what are we</font><font color="#CCCCCC"> gonna</font>

49
00:02:27,710 --> 00:02:34,610
<font color="#E5E5E5">cover today</font><font color="#CCCCCC"> we read</font><font color="#E5E5E5"> all those words five</font>

50
00:02:30,980 --> 00:02:37,429
seconds<font color="#E5E5E5"> go</font><font color="#CCCCCC"> seriously we're gonna</font>

51
00:02:34,610 --> 00:02:39,260
actually take a very brief kind<font color="#E5E5E5"> of</font>

52
00:02:37,430 --> 00:02:42,640
<font color="#E5E5E5">high-level intro but I'm going</font><font color="#CCCCCC"> to give</font>

53
00:02:39,260 --> 00:02:44,870
you some<font color="#E5E5E5"> really useful pointers to some</font>

54
00:02:42,640 --> 00:02:47,000
<font color="#CCCCCC">different types of techniques that you</font>

55
00:02:44,870 --> 00:02:49,700
can<font color="#E5E5E5"> use for</font><font color="#CCCCCC"> different kinds of</font><font color="#E5E5E5"> data</font><font color="#CCCCCC"> that</font>

56
00:02:47,000 --> 00:02:52,820
you might<font color="#E5E5E5"> have to extract the evil out</font>

57
00:02:49,700 --> 00:02:54,589
<font color="#CCCCCC">of them</font><font color="#E5E5E5"> I'm going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> you don't have</font><font color="#CCCCCC"> to</font>

58
00:02:52,820 --> 00:02:57,079
<font color="#E5E5E5">know this really to get out of the talk</font>

59
00:02:54,590 --> 00:02:58,610
but I'm gonna do<font color="#CCCCCC"> all these things first</font>

60
00:02:57,080 --> 00:03:00,020
of<font color="#E5E5E5"> all in Python you kind of do have to</font>

61
00:02:58,610 --> 00:03:04,670
know<font color="#E5E5E5"> that and pandas you do have to know</font>

62
00:03:00,020 --> 00:03:06,770
<font color="#E5E5E5">that</font><font color="#CCCCCC"> but I'm using the Jupiter platform</font>

63
00:03:04,670 --> 00:03:09,380
<font color="#CCCCCC">I don't know if anybody Jupiter users in</font>

64
00:03:06,770 --> 00:03:11,030
here yeah<font color="#CCCCCC"> a few you might</font><font color="#E5E5E5"> have seen this</font>

65
00:03:09,380 --> 00:03:13,609
in<font color="#E5E5E5"> years past called the ipython</font>

66
00:03:11,030 --> 00:03:18,110
notebook<font color="#CCCCCC"> but</font><font color="#E5E5E5"> now I'll</font><font color="#CCCCCC"> be using</font><font color="#E5E5E5"> the</font>

67
00:03:13,610 --> 00:03:21,470
Jupiter notebook for this talk<font color="#CCCCCC"> so first</font>

68
00:03:18,110 --> 00:03:23,540
I want to talk about probably<font color="#E5E5E5"> the most</font>

69
00:03:21,470 --> 00:03:27,440
important<font color="#E5E5E5"> piece of</font><font color="#CCCCCC"> data analysis</font>

70
00:03:23,540 --> 00:03:29,959
software on the planet<font color="#CCCCCC"> maybe it's this</font>

71
00:03:27,440 --> 00:03:32,570
this certainly for<font color="#E5E5E5"> people who use Python</font>

72
00:03:29,959 --> 00:03:35,810
as I do it's this<font color="#E5E5E5"> one called pandas</font>

73
00:03:32,570 --> 00:03:37,790
pandas is just a package<font color="#CCCCCC"> that you can</font>

74
00:03:35,810 --> 00:03:40,489
<font color="#CCCCCC">download it's supported by the</font>

75
00:03:37,790 --> 00:03:44,810
scientific I think it's a new scientific

76
00:03:40,489 --> 00:03:46,670
<font color="#E5E5E5">Python</font><font color="#CCCCCC"> but it's one of the most popular</font>

77
00:03:44,810 --> 00:03:49,519
pieces<font color="#E5E5E5"> probably the most popular piece</font>

78
00:03:46,670 --> 00:03:53,690
for people<font color="#CCCCCC"> who deal with data in</font><font color="#E5E5E5"> Python</font>

79
00:03:49,519 --> 00:03:55,640
<font color="#CCCCCC">it provides two data structures that are</font>

80
00:03:53,690 --> 00:03:57,920
really important<font color="#E5E5E5"> I'm not going to go</font>

81
00:03:55,640 --> 00:04:00,559
<font color="#E5E5E5">into super long detail most of these</font>

82
00:03:57,920 --> 00:04:02,359
things that will we'll find out how they

83
00:04:00,560 --> 00:04:04,459
work<font color="#E5E5E5"> kind of naturally through the</font>

84
00:04:02,360 --> 00:04:07,040
course<font color="#E5E5E5"> of the presentation</font><font color="#CCCCCC"> but I</font><font color="#E5E5E5"> just</font>

85
00:04:04,459 --> 00:04:09,019
did want<font color="#CCCCCC"> to point</font><font color="#E5E5E5"> out that we</font><font color="#CCCCCC"> have the</font>

86
00:04:07,040 --> 00:04:12,679
series<font color="#E5E5E5"> up here which is kind of like</font><font color="#CCCCCC"> a</font>

87
00:04:09,019 --> 00:04:14,780
fancy along array except it<font color="#E5E5E5"> also has a</font>

88
00:04:12,680 --> 00:04:17,599
number<font color="#CCCCCC"> of built-in functions</font><font color="#E5E5E5"> that you</font>

89
00:04:14,780 --> 00:04:18,450
<font color="#CCCCCC">can do to it so you can summon a series</font>

90
00:04:17,599 --> 00:04:21,209
in one

91
00:04:18,450 --> 00:04:23,340
go<font color="#CCCCCC"> or you can average it or you can</font>

92
00:04:21,209 --> 00:04:25,260
transform it<font color="#E5E5E5"> by</font><font color="#CCCCCC"> adding three to</font>

93
00:04:23,340 --> 00:04:28,140
<font color="#E5E5E5">everything in the series in one</font>

94
00:04:25,260 --> 00:04:30,570
<font color="#E5E5E5">statement right things like that and</font>

95
00:04:28,140 --> 00:04:34,280
then<font color="#E5E5E5"> more importantly for</font><font color="#CCCCCC"> us it has</font><font color="#E5E5E5"> this</font>

96
00:04:30,570 --> 00:04:38,640
<font color="#E5E5E5">this idea of the data frame which is</font><font color="#CCCCCC"> a</font>

97
00:04:34,280 --> 00:04:41,099
<font color="#CCCCCC">2-dimensional data</font><font color="#E5E5E5"> structure usually we</font>

98
00:04:38,640 --> 00:04:45,360
use<font color="#E5E5E5"> it pretty</font><font color="#CCCCCC"> much only</font><font color="#E5E5E5"> as a 2d data</font>

99
00:04:41,100 --> 00:04:49,890
structure where<font color="#E5E5E5"> it has columns which are</font>

100
00:04:45,360 --> 00:04:52,050
<font color="#E5E5E5">named series and each column</font><font color="#CCCCCC"> you can</font>

101
00:04:49,890 --> 00:04:55,229
<font color="#E5E5E5">access the whole data frame as a row as</font>

102
00:04:52,050 --> 00:04:58,410
well so if the rows are the<font color="#E5E5E5"> excuse me</font>

103
00:04:55,230 --> 00:05:01,680
<font color="#CCCCCC">the rows are all the</font><font color="#E5E5E5"> same length so if</font>

104
00:04:58,410 --> 00:05:04,850
you<font color="#CCCCCC"> ask</font><font color="#E5E5E5"> for you know column</font><font color="#CCCCCC"> four you get</font>

105
00:05:01,680 --> 00:05:07,560
the fourth element across all the series

106
00:05:04,850 --> 00:05:09,540
so it's kind of<font color="#E5E5E5"> like think of</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> almost</font>

107
00:05:07,560 --> 00:05:13,640
like<font color="#CCCCCC"> a programmable spreadsheet but in a</font>

108
00:05:09,540 --> 00:05:17,220
cool way<font color="#CCCCCC"> it's</font><font color="#E5E5E5"> really extremely popular</font>

109
00:05:13,640 --> 00:05:19,409
<font color="#E5E5E5">so much so that</font><font color="#CCCCCC"> if you</font><font color="#E5E5E5"> kind of</font><font color="#CCCCCC"> Google</font>

110
00:05:17,220 --> 00:05:22,260
<font color="#E5E5E5">anything</font><font color="#CCCCCC"> any</font><font color="#E5E5E5"> kind of numerical question</font>

111
00:05:19,410 --> 00:05:24,900
<font color="#E5E5E5">and you add Python or pandas to</font><font color="#CCCCCC"> the end</font>

112
00:05:22,260 --> 00:05:26,460
of the query you're very likely<font color="#E5E5E5"> to get</font>

113
00:05:24,900 --> 00:05:30,090
somebody who has asked your exact same

114
00:05:26,460 --> 00:05:31,349
thing and<font color="#E5E5E5"> Stack Overflow and so you know</font>

115
00:05:30,090 --> 00:05:33,030
you don't<font color="#E5E5E5"> you almost don't really have</font>

116
00:05:31,350 --> 00:05:34,530
to<font color="#E5E5E5"> know how</font><font color="#CCCCCC"> to use pandas you just have</font>

117
00:05:33,030 --> 00:05:38,039
to kind of<font color="#E5E5E5"> know how to Google</font><font color="#CCCCCC"> for the</font>

118
00:05:34,530 --> 00:05:41,940
answers with pandas<font color="#CCCCCC"> and that's kind of</font>

119
00:05:38,040 --> 00:05:46,230
how I learned it<font color="#E5E5E5"> oh I didn't want to</font>

120
00:05:41,940 --> 00:05:48,480
<font color="#CCCCCC">mention one thing here so you can see on</font>

121
00:05:46,230 --> 00:05:50,580
here an<font color="#E5E5E5"> example of how we're going to</font>

122
00:05:48,480 --> 00:05:52,350
<font color="#E5E5E5">create a simple one here I'm just</font>

123
00:05:50,580 --> 00:05:53,789
importing pandas there's also this other

124
00:05:52,350 --> 00:05:56,310
one that<font color="#CCCCCC"> we'll</font><font color="#E5E5E5"> talk</font><font color="#CCCCCC"> about a</font><font color="#E5E5E5"> little bit</font>

125
00:05:53,790 --> 00:05:58,260
<font color="#E5E5E5">as we go along called numpy which is a</font>

126
00:05:56,310 --> 00:06:01,350
<font color="#E5E5E5">numerical library that pandas is built</font>

127
00:05:58,260 --> 00:06:03,060
on and we just<font color="#E5E5E5"> create a data frame in</font>

128
00:06:01,350 --> 00:06:07,050
<font color="#E5E5E5">this case</font><font color="#CCCCCC"> I'm</font><font color="#E5E5E5"> creating a data frame out</font>

129
00:06:03,060 --> 00:06:10,050
of data that<font color="#CCCCCC"> I just hard-coded right</font>

130
00:06:07,050 --> 00:06:12,180
into my script<font color="#E5E5E5"> so a list of</font><font color="#CCCCCC"> Lists</font><font color="#E5E5E5"> and I</font>

131
00:06:10,050 --> 00:06:18,180
call the columns<font color="#E5E5E5"> a B C D and E and then</font>

132
00:06:12,180 --> 00:06:20,760
<font color="#CCCCCC">you have the and then you</font><font color="#E5E5E5"> have the the</font>

133
00:06:18,180 --> 00:06:23,400
data frame here there are one a B C D

134
00:06:20,760 --> 00:06:27,990
and E so<font color="#CCCCCC"> you can actually</font><font color="#E5E5E5"> just call it</font>

135
00:06:23,400 --> 00:06:29,969
you know data frame dot<font color="#E5E5E5"> a and</font><font color="#CCCCCC"> you'll get</font>

136
00:06:27,990 --> 00:06:32,319
that whole series<font color="#E5E5E5"> or data frame</font><font color="#CCCCCC"> dot zero</font>

137
00:06:29,970 --> 00:06:36,470
and you'll get that<font color="#E5E5E5"> whole row</font>

138
00:06:32,319 --> 00:06:38,449
so<font color="#E5E5E5"> hard coding</font><font color="#CCCCCC"> everything into your</font>

139
00:06:36,470 --> 00:06:41,449
Python script is usually not going<font color="#E5E5E5"> to</font>

140
00:06:38,449 --> 00:06:43,490
help you very<font color="#CCCCCC"> much in our kind</font><font color="#E5E5E5"> of work</font>

141
00:06:41,449 --> 00:06:45,229
<font color="#CCCCCC">so how do you get that data in well</font>

142
00:06:43,490 --> 00:06:47,630
there's a number<font color="#E5E5E5"> of</font><font color="#CCCCCC"> ways but probably</font>

143
00:06:45,229 --> 00:06:50,719
<font color="#E5E5E5">the most common way is to just read it</font>

144
00:06:47,630 --> 00:06:53,270
<font color="#E5E5E5">in from a CSV</font><font color="#CCCCCC"> file</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> in the first</font>

145
00:06:50,720 --> 00:06:56,090
<font color="#E5E5E5">example</font><font color="#CCCCCC"> up here you can see I've just</font>

146
00:06:53,270 --> 00:06:58,580
<font color="#E5E5E5">kind of named a CSV file and it sucks it</font>

147
00:06:56,090 --> 00:07:02,359
all<font color="#E5E5E5"> in and returns a data frame that I'm</font>

148
00:06:58,580 --> 00:07:07,580
calling<font color="#E5E5E5"> DF because I'm great at naming</font>

149
00:07:02,360 --> 00:07:10,940
<font color="#E5E5E5">things but when you are talking about</font>

150
00:07:07,580 --> 00:07:14,870
<font color="#CCCCCC">you're gonna</font><font color="#E5E5E5"> load up data</font><font color="#CCCCCC"> from security</font>

151
00:07:10,940 --> 00:07:18,080
onion or Zeke<font color="#CCCCCC"> you</font><font color="#E5E5E5"> probably are talking</font>

152
00:07:14,870 --> 00:07:20,330
about<font color="#CCCCCC"> a tab separated values file</font><font color="#E5E5E5"> not a</font>

153
00:07:18,080 --> 00:07:23,000
comma<font color="#E5E5E5"> separated values file it turns out</font>

154
00:07:20,330 --> 00:07:25,130
super easy<font color="#CCCCCC"> also you just use the same</font>

155
00:07:23,000 --> 00:07:30,110
read CSV<font color="#CCCCCC"> and you tell it that the</font>

156
00:07:25,130 --> 00:07:33,259
separator<font color="#E5E5E5"> is a tap instead of the</font>

157
00:07:30,110 --> 00:07:34,880
default<font color="#E5E5E5"> and it just sucks everything all</font>

158
00:07:33,259 --> 00:07:37,130
<font color="#CCCCCC">in there's a lot</font><font color="#E5E5E5"> of other options you</font>

159
00:07:34,880 --> 00:07:39,229
<font color="#E5E5E5">can do if you by default it will look at</font>

160
00:07:37,130 --> 00:07:41,719
the<font color="#E5E5E5"> first line to tell you the names of</font>

161
00:07:39,229 --> 00:07:42,979
<font color="#E5E5E5">the columns</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> the data frame</font><font color="#CCCCCC"> if you</font>

162
00:07:41,719 --> 00:07:44,270
don't have<font color="#E5E5E5"> that or if they're in a</font>

163
00:07:42,979 --> 00:07:46,609
<font color="#CCCCCC">different place or if you have some</font>

164
00:07:44,270 --> 00:07:48,109
<font color="#E5E5E5">comments</font><font color="#CCCCCC"> you have</font><font color="#E5E5E5"> to skip over or you</font>

165
00:07:46,610 --> 00:07:51,259
know whatever if your data files

166
00:07:48,110 --> 00:07:54,740
compressed<font color="#CCCCCC"> you can look all those up</font>

167
00:07:51,259 --> 00:07:56,509
<font color="#E5E5E5">later but it easily sorts them out with</font>

168
00:07:54,740 --> 00:07:59,150
just a<font color="#E5E5E5"> few</font><font color="#CCCCCC"> command-line options and you</font>

169
00:07:56,509 --> 00:08:01,099
could all end<font color="#E5E5E5"> to memory</font><font color="#CCCCCC"> the this last</font>

170
00:07:59,150 --> 00:08:03,830
<font color="#E5E5E5">one here especially if you're working on</font>

171
00:08:01,099 --> 00:08:05,659
<font color="#CCCCCC">something like security onion where they</font>

172
00:08:03,830 --> 00:08:08,060
might<font color="#E5E5E5"> be logging in JSON format because</font>

173
00:08:05,659 --> 00:08:10,699
they're sending everything<font color="#CCCCCC"> into ELQ you</font>

174
00:08:08,060 --> 00:08:13,430
<font color="#CCCCCC">can also read it as a set of JSON files</font>

175
00:08:10,699 --> 00:08:15,919
the only trick for<font color="#E5E5E5"> that one is the</font>

176
00:08:13,430 --> 00:08:17,810
default version<font color="#E5E5E5"> of it thinks that it's</font>

177
00:08:15,919 --> 00:08:20,180
going<font color="#E5E5E5"> to</font><font color="#CCCCCC"> be one big JSON document with a</font>

178
00:08:17,810 --> 00:08:22,280
bunch of as a list of other JSON

179
00:08:20,180 --> 00:08:24,949
documents in it so we have to tell<font color="#E5E5E5"> it</font>

180
00:08:22,280 --> 00:08:27,799
<font color="#E5E5E5">that in our case we're loading</font>

181
00:08:24,949 --> 00:08:30,380
<font color="#E5E5E5">everything where each line is its own</font>

182
00:08:27,800 --> 00:08:33,649
JSON document separate from all<font color="#E5E5E5"> the</font>

183
00:08:30,380 --> 00:08:36,740
others with lines equals true here at

184
00:08:33,649 --> 00:08:39,589
the bottom<font color="#E5E5E5"> or</font><font color="#CCCCCC"> at the</font><font color="#E5E5E5"> end but either way</font>

185
00:08:36,740 --> 00:08:42,469
<font color="#E5E5E5">all three of those you get a data frame</font>

186
00:08:39,589 --> 00:08:44,350
<font color="#E5E5E5">reading it directly</font><font color="#CCCCCC"> from a file</font><font color="#E5E5E5"> but what</font>

187
00:08:42,469 --> 00:08:49,180
if you don't<font color="#E5E5E5"> have</font><font color="#CCCCCC"> it in a file</font>

188
00:08:44,350 --> 00:08:52,480
well you can query your elastic or

189
00:08:49,180 --> 00:08:54,849
<font color="#CCCCCC">Splunk servers directly now and</font><font color="#E5E5E5"> return</font>

190
00:08:52,480 --> 00:08:57,790
the values to you as a programmer as a

191
00:08:54,850 --> 00:09:00,760
panda's data frame<font color="#E5E5E5"> this is a library</font>

192
00:08:57,790 --> 00:09:03,250
<font color="#CCCCCC">that</font><font color="#E5E5E5"> I wrote that</font><font color="#CCCCCC"> I wrote for my</font>

193
00:09:00,760 --> 00:09:09,490
employer<font color="#CCCCCC"> Target Corporation right yeah</font>

194
00:09:03,250 --> 00:09:11,880
retail why are you laughing

195
00:09:09,490 --> 00:09:11,880
I<font color="#E5E5E5"> don't know</font>

196
00:09:12,610 --> 00:09:16,990
this library wrote called hunt Lib<font color="#E5E5E5"> which</font>

197
00:09:14,620 --> 00:09:20,350
is<font color="#E5E5E5"> basically I packaged up a number of</font>

198
00:09:16,990 --> 00:09:22,660
smaller functions<font color="#CCCCCC"> and</font><font color="#E5E5E5"> classes from</font>

199
00:09:20,350 --> 00:09:25,990
Python that I use when I do my hunting

200
00:09:22,660 --> 00:09:27,610
and target<font color="#E5E5E5"> has allowed me to</font><font color="#CCCCCC"> open-source</font>

201
00:09:25,990 --> 00:09:30,820
<font color="#CCCCCC">that and release</font><font color="#E5E5E5"> it on github and you</font>

202
00:09:27,610 --> 00:09:32,920
can see the link<font color="#E5E5E5"> here on the slide</font><font color="#CCCCCC"> it's</font>

203
00:09:30,820 --> 00:09:34,780
a side note even though target as a

204
00:09:32,920 --> 00:09:37,390
corporation<font color="#E5E5E5"> has</font><font color="#CCCCCC"> been using that for a</font>

205
00:09:34,780 --> 00:09:39,970
<font color="#E5E5E5">while to release a bunch of open</font><font color="#CCCCCC"> source</font>

206
00:09:37,390 --> 00:09:43,230
like data engineering<font color="#E5E5E5"> and and API</font>

207
00:09:39,970 --> 00:09:45,850
programming and<font color="#CCCCCC"> development</font><font color="#E5E5E5"> tools</font>

208
00:09:43,230 --> 00:09:48,120
<font color="#E5E5E5">recently the team that I work</font><font color="#CCCCCC"> for in the</font>

209
00:09:45,850 --> 00:09:50,920
cyber fusion<font color="#E5E5E5"> center the security team</font>

210
00:09:48,120 --> 00:09:54,010
has started<font color="#CCCCCC"> releasing more and more of</font>

211
00:09:50,920 --> 00:09:56,410
open<font color="#E5E5E5"> source packages as well so I</font>

212
00:09:54,010 --> 00:09:58,900
<font color="#E5E5E5">encourage</font><font color="#CCCCCC"> you to</font><font color="#E5E5E5"> go</font><font color="#CCCCCC"> around</font><font color="#E5E5E5"> to github.com</font>

213
00:09:56,410 --> 00:10:00,310
slash target<font color="#E5E5E5"> just look around</font><font color="#CCCCCC"> they're</font>

214
00:09:58,900 --> 00:10:02,620
starting<font color="#CCCCCC"> to be more</font><font color="#E5E5E5"> things that</font><font color="#CCCCCC"> as</font>

215
00:10:00,310 --> 00:10:04,959
security analysts<font color="#E5E5E5"> and security</font>

216
00:10:02,620 --> 00:10:06,790
infrastructure engineers<font color="#E5E5E5"> that we might</font>

217
00:10:04,960 --> 00:10:08,200
<font color="#E5E5E5">really care about I want to call</font><font color="#CCCCCC"> up my</font>

218
00:10:06,790 --> 00:10:10,120
my coworker

219
00:10:08,200 --> 00:10:13,300
Josh Liberty has published probably the

220
00:10:10,120 --> 00:10:15,520
biggest package<font color="#E5E5E5"> from our team</font><font color="#CCCCCC"> that will</font>

221
00:10:13,300 --> 00:10:18,640
be<font color="#E5E5E5"> published in probably a while called</font>

222
00:10:15,520 --> 00:10:24,130
<font color="#CCCCCC">Strelka which is kind of</font><font color="#E5E5E5"> like</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> our take</font>

223
00:10:18,640 --> 00:10:26,710
on like the boss so<font color="#E5E5E5"> hunt lib to get back</font>

224
00:10:24,130 --> 00:10:28,390
to the real<font color="#CCCCCC"> reason that</font><font color="#E5E5E5"> you came hunt</font>

225
00:10:26,710 --> 00:10:30,370
<font color="#CCCCCC">lib has a bunch of</font><font color="#E5E5E5"> different functions</font>

226
00:10:28,390 --> 00:10:33,069
<font color="#E5E5E5">and it can do</font><font color="#CCCCCC"> you things like</font><font color="#E5E5E5"> tell me</font>

227
00:10:30,370 --> 00:10:34,450
<font color="#E5E5E5">how far</font><font color="#CCCCCC"> apart these strings are like</font>

228
00:10:33,070 --> 00:10:36,070
what<font color="#CCCCCC"> their</font><font color="#E5E5E5"> edit distance is or how</font>

229
00:10:34,450 --> 00:10:38,620
similar they are<font color="#CCCCCC"> I can</font><font color="#E5E5E5"> tell you like</font>

230
00:10:36,070 --> 00:10:41,830
entropy<font color="#CCCCCC"> I'm now seriously thinking</font><font color="#E5E5E5"> about</font>

231
00:10:38,620 --> 00:10:44,920
<font color="#CCCCCC">putting a bigram frequency</font><font color="#E5E5E5"> after</font>

232
00:10:41,830 --> 00:10:47,650
listening to<font color="#CCCCCC"> Marc's talk</font><font color="#E5E5E5"> maybe I should</font>

233
00:10:44,920 --> 00:10:54,910
put that<font color="#CCCCCC"> in there but what we care about</font>

234
00:10:47,650 --> 00:10:56,590
for<font color="#CCCCCC"> today is it has this elastic DF so</font>

235
00:10:54,910 --> 00:10:59,890
if you

236
00:10:56,590 --> 00:11:01,780
take three lines similar<font color="#E5E5E5"> to these like</font>

237
00:10:59,890 --> 00:11:03,730
from<font color="#CCCCCC"> hunt live without elastic import</font>

238
00:11:01,780 --> 00:11:06,100
elastic<font color="#CCCCCC"> D F</font><font color="#E5E5E5"> right and then you give it</font>

239
00:11:03,730 --> 00:11:09,210
<font color="#CCCCCC">the you construct the elastic</font><font color="#E5E5E5"> D F with</font>

240
00:11:06,100 --> 00:11:12,310
just the URL<font color="#CCCCCC"> to your elastic server and</font>

241
00:11:09,210 --> 00:11:14,950
you can<font color="#CCCCCC"> just do a search search and then</font>

242
00:11:12,310 --> 00:11:17,469
you<font color="#CCCCCC"> can give</font><font color="#E5E5E5"> it the</font><font color="#CCCCCC"> the same leucine</font>

243
00:11:14,950 --> 00:11:19,510
query that<font color="#E5E5E5"> you would type</font><font color="#CCCCCC"> into cabana</font><font color="#E5E5E5"> or</font>

244
00:11:17,470 --> 00:11:21,550
something like<font color="#E5E5E5"> that</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> tell it</font><font color="#CCCCCC"> what</font>

245
00:11:19,510 --> 00:11:23,560
index you want to search<font color="#E5E5E5"> from and it</font>

246
00:11:21,550 --> 00:11:25,839
<font color="#E5E5E5">will</font><font color="#CCCCCC"> redo that search and return to you</font>

247
00:11:23,560 --> 00:11:28,599
a panda's data frame<font color="#E5E5E5"> now if you're on</font>

248
00:11:25,840 --> 00:11:30,040
security onion you it will look<font color="#E5E5E5"> probably</font>

249
00:11:28,600 --> 00:11:31,840
<font color="#E5E5E5">a little bit different than what I have</font>

250
00:11:30,040 --> 00:11:34,480
on the<font color="#CCCCCC"> slide because</font><font color="#E5E5E5"> by default security</font>

251
00:11:31,840 --> 00:11:37,240
onion does<font color="#E5E5E5"> not allow you to contact the</font>

252
00:11:34,480 --> 00:11:39,010
elastic server from off<font color="#CCCCCC"> of the security</font>

253
00:11:37,240 --> 00:11:41,320
onion box itself<font color="#E5E5E5"> it's restricted to</font>

254
00:11:39,010 --> 00:11:43,900
localhost<font color="#CCCCCC"> so probably the best</font><font color="#E5E5E5"> way is</font><font color="#CCCCCC"> to</font>

255
00:11:41,320 --> 00:11:46,570
set<font color="#CCCCCC"> up an SSH tunnel and then instead of</font>

256
00:11:43,900 --> 00:11:49,840
naming<font color="#E5E5E5"> the URL explicitly here you would</font>

257
00:11:46,570 --> 00:11:53,470
<font color="#E5E5E5">just say like localhost HTTP colon slash</font>

258
00:11:49,840 --> 00:11:55,120
slash localhost<font color="#E5E5E5"> right</font><font color="#CCCCCC"> but then you get</font>

259
00:11:53,470 --> 00:11:58,180
connected<font color="#CCCCCC"> and you don't have</font><font color="#E5E5E5"> to actually</font>

260
00:11:55,120 --> 00:12:01,540
export<font color="#E5E5E5"> your stuff and transfer it to</font>

261
00:11:58,180 --> 00:12:05,020
<font color="#CCCCCC">your box</font><font color="#E5E5E5"> and import it as a CSV file or</font>

262
00:12:01,540 --> 00:12:07,360
<font color="#CCCCCC">whatever you can just get it directly</font>

263
00:12:05,020 --> 00:12:10,480
<font color="#E5E5E5">from elastic</font><font color="#CCCCCC"> the spunk version of that</font>

264
00:12:07,360 --> 00:12:11,650
<font color="#E5E5E5">is extremely similar to</font><font color="#CCCCCC"> this but we're</font>

265
00:12:10,480 --> 00:12:15,910
just not showing it<font color="#CCCCCC"> because it's an open</font>

266
00:12:11,650 --> 00:12:21,280
<font color="#CCCCCC">source talk so once you have read on</font>

267
00:12:15,910 --> 00:12:25,060
your data what do you get<font color="#CCCCCC"> well this is a</font>

268
00:12:21,280 --> 00:12:27,939
this<font color="#CCCCCC"> an</font><font color="#E5E5E5"> example of me reading this</font>

269
00:12:25,060 --> 00:12:31,030
transactions by bytes dot CSV file<font color="#CCCCCC"> and</font>

270
00:12:27,940 --> 00:12:32,410
you get<font color="#E5E5E5"> this data frame DF it called</font><font color="#CCCCCC"> DF</font>

271
00:12:31,030 --> 00:12:34,569
<font color="#CCCCCC">info and I'll tell you a</font><font color="#E5E5E5"> little bit</font>

272
00:12:32,410 --> 00:12:36,219
<font color="#CCCCCC">about the metadata behind</font><font color="#E5E5E5"> that data</font>

273
00:12:34,570 --> 00:12:37,840
frame<font color="#E5E5E5"> and you can see first of all</font>

274
00:12:36,220 --> 00:12:39,610
there's a whole bunch<font color="#E5E5E5"> of things in here</font>

275
00:12:37,840 --> 00:12:43,540
<font color="#CCCCCC">but</font><font color="#E5E5E5"> first of all look that we have</font>

276
00:12:39,610 --> 00:12:49,240
almost<font color="#E5E5E5"> 37 million entries I'm sorry mark</font>

277
00:12:43,540 --> 00:12:52,689
I can't really say mega<font color="#E5E5E5"> logs without but</font>

278
00:12:49,240 --> 00:12:54,390
so we have<font color="#E5E5E5"> ultra we have 37 mega logs</font>

279
00:12:52,690 --> 00:12:57,850
<font color="#CCCCCC">all</font><font color="#E5E5E5"> right</font>

280
00:12:54,390 --> 00:13:00,100
and<font color="#CCCCCC"> they're by</font><font color="#E5E5E5"> default just index by</font>

281
00:12:57,850 --> 00:13:02,680
integer<font color="#E5E5E5"> from zero to whatever that is</font>

282
00:13:00,100 --> 00:13:05,470
and we<font color="#E5E5E5"> have</font><font color="#CCCCCC"> 6 different</font><font color="#E5E5E5"> columns we have</font>

283
00:13:02,680 --> 00:13:07,930
<font color="#E5E5E5">time span destination des type</font><font color="#CCCCCC"> e</font><font color="#E5E5E5"> et</font>

284
00:13:05,470 --> 00:13:08,920
cetera<font color="#E5E5E5"> and then the last thing to note</font>

285
00:13:07,930 --> 00:13:12,988
is

286
00:13:08,920 --> 00:13:16,839
it's taking up<font color="#CCCCCC"> 1.6</font><font color="#E5E5E5"> gigabytes of memory</font>

287
00:13:12,989 --> 00:13:19,179
which is not terrible<font color="#E5E5E5"> on my</font><font color="#CCCCCC"> laptop</font><font color="#E5E5E5"> but</font>

288
00:13:16,839 --> 00:13:21,999
certainly could be a lot<font color="#E5E5E5"> better</font><font color="#CCCCCC"> there's</font>

289
00:13:19,179 --> 00:13:24,670
a number<font color="#E5E5E5"> of things though that</font><font color="#CCCCCC"> I don't</font>

290
00:13:21,999 --> 00:13:26,709
<font color="#CCCCCC">like about that</font><font color="#E5E5E5"> out output so I've read</font>

291
00:13:24,670 --> 00:13:29,498
<font color="#E5E5E5">in</font><font color="#CCCCCC"> that data</font><font color="#E5E5E5"> but am I ready really</font><font color="#CCCCCC"> ready</font>

292
00:13:26,709 --> 00:13:31,299
to analyze<font color="#E5E5E5"> it and for most times you</font>

293
00:13:29,499 --> 00:13:33,609
read that<font color="#E5E5E5"> data in for the first time the</font>

294
00:13:31,299 --> 00:13:34,899
answer<font color="#E5E5E5"> is no you're gonna have to do</font>

295
00:13:33,609 --> 00:13:36,910
something about that

296
00:13:34,899 --> 00:13:40,329
to kind of clean it<font color="#CCCCCC"> up normalize it</font>

297
00:13:36,910 --> 00:13:43,149
reduce the<font color="#CCCCCC"> memory footprint etc but</font><font color="#E5E5E5"> I</font>

298
00:13:40,329 --> 00:13:45,669
also want to see kind of first of all<font color="#E5E5E5"> if</font>

299
00:13:43,149 --> 00:13:47,980
I'm parsing everything correctly<font color="#E5E5E5"> so I'm</font>

300
00:13:45,669 --> 00:13:51,309
gonna call the D F dot head method<font color="#CCCCCC"> which</font>

301
00:13:47,980 --> 00:13:53,259
just<font color="#E5E5E5"> prints out the first few lines just</font>

302
00:13:51,309 --> 00:13:56,139
<font color="#E5E5E5">to give me that idea did</font><font color="#CCCCCC"> I parse it out</font>

303
00:13:53,259 --> 00:13:58,509
yeah looks<font color="#E5E5E5"> like I did that's a</font><font color="#CCCCCC"> timestamp</font>

304
00:13:56,139 --> 00:14:00,850
that's a IP destination<font color="#CCCCCC"> in a desk port</font>

305
00:13:58,509 --> 00:14:02,350
<font color="#CCCCCC">oh it's a floating point that</font><font color="#E5E5E5"> okay is</font>

306
00:14:00,850 --> 00:14:06,220
same with bytes<font color="#CCCCCC"> looks a little bit weird</font>

307
00:14:02,350 --> 00:14:08,350
<font color="#CCCCCC">a</font><font color="#E5E5E5"> protocol scheme an HTTP method not</font>

308
00:14:06,220 --> 00:14:09,699
everything in here was<font color="#E5E5E5"> a HTTP</font>

309
00:14:08,350 --> 00:14:12,189
transaction there are outgoing

310
00:14:09,699 --> 00:14:14,829
transactions of many sorts but those two

311
00:14:12,189 --> 00:14:17,709
<font color="#CCCCCC">things only</font><font color="#E5E5E5"> apply to HTTP transactions</font>

312
00:14:14,829 --> 00:14:19,269
so if<font color="#CCCCCC"> I parse the rest of them correctly</font>

313
00:14:17,709 --> 00:14:21,819
<font color="#E5E5E5">I'd probably parse those correctly as</font>

314
00:14:19,269 --> 00:14:25,779
<font color="#CCCCCC">well</font><font color="#E5E5E5"> and pandas is just showing me that</font>

315
00:14:21,819 --> 00:14:28,149
<font color="#CCCCCC">it's version</font><font color="#E5E5E5"> of null is</font><font color="#CCCCCC"> NAND not the</font>

316
00:14:25,779 --> 00:14:29,739
<font color="#E5E5E5">number so it's just showing me that it</font>

317
00:14:28,149 --> 00:14:32,290
didn't have any entries for those and

318
00:14:29,739 --> 00:14:32,949
those<font color="#E5E5E5"> rows so it looks like</font><font color="#CCCCCC"> I've parsed</font>

319
00:14:32,290 --> 00:14:34,929
it correctly

320
00:14:32,949 --> 00:14:36,699
so now we can begin to<font color="#E5E5E5"> kind of clean</font>

321
00:14:34,929 --> 00:14:38,410
that data up<font color="#E5E5E5"> a little bit and see what's</font>

322
00:14:36,699 --> 00:14:41,859
going on the<font color="#E5E5E5"> first thing</font><font color="#CCCCCC"> I would</font>

323
00:14:38,410 --> 00:14:43,809
<font color="#E5E5E5">normally suggest is drop any columns</font>

324
00:14:41,860 --> 00:14:46,689
that<font color="#E5E5E5"> you don't need just</font><font color="#CCCCCC"> delete them get</font>

325
00:14:43,809 --> 00:14:48,819
<font color="#E5E5E5">rid of them in my data frame I want</font><font color="#CCCCCC"> to</font>

326
00:14:46,689 --> 00:14:51,339
keep them<font color="#E5E5E5"> all for this exercise so here</font>

327
00:14:48,819 --> 00:14:53,618
I've just created<font color="#E5E5E5"> again that example</font>

328
00:14:51,339 --> 00:14:56,709
<font color="#E5E5E5">from the beginning where I created some</font>

329
00:14:53,619 --> 00:14:58,539
out of<font color="#CCCCCC"> a list</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> lists called a B C D</font>

330
00:14:56,709 --> 00:15:00,638
and<font color="#E5E5E5"> E for the the column names and</font>

331
00:14:58,539 --> 00:15:02,980
here's an example<font color="#CCCCCC"> of</font><font color="#E5E5E5"> just</font><font color="#CCCCCC"> how you drop</font>

332
00:15:00,639 --> 00:15:05,049
some right I'm just<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to call D F</font>

333
00:15:02,980 --> 00:15:07,209
drop and I'm gonna<font color="#E5E5E5"> make a list of the</font>

334
00:15:05,049 --> 00:15:11,019
names of the columns<font color="#E5E5E5"> and I'm gonna draw</font>

335
00:15:07,209 --> 00:15:13,539
<font color="#E5E5E5">it column B</font><font color="#CCCCCC"> and column E it's so only</font><font color="#E5E5E5"> a</font>

336
00:15:11,019 --> 00:15:15,279
slightly bit tricky in two ways first of

337
00:15:13,539 --> 00:15:17,019
<font color="#E5E5E5">all you have</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> tell it what</font><font color="#CCCCCC"> axis you</font>

338
00:15:15,279 --> 00:15:20,019
<font color="#E5E5E5">want to drop because</font><font color="#CCCCCC"> I could have</font><font color="#E5E5E5"> had</font>

339
00:15:17,019 --> 00:15:21,639
these rows called<font color="#CCCCCC"> a B C D and E</font><font color="#E5E5E5"> 2 and it</font>

340
00:15:20,019 --> 00:15:22,600
wouldn't<font color="#E5E5E5"> know if I want to drop rows or</font>

341
00:15:21,639 --> 00:15:24,819
columns<font color="#E5E5E5"> so I</font>

342
00:15:22,600 --> 00:15:26,500
<font color="#E5E5E5">tell</font><font color="#CCCCCC"> the axis</font><font color="#E5E5E5"> so in pandas if I'm</font>

343
00:15:24,819 --> 00:15:28,569
dropping axis<font color="#CCCCCC"> one that</font><font color="#E5E5E5"> means I'm</font>

344
00:15:26,500 --> 00:15:30,190
dropping columns<font color="#E5E5E5"> and if I'm dropping</font>

345
00:15:28,569 --> 00:15:33,610
axis<font color="#E5E5E5"> zero</font><font color="#CCCCCC"> it just means I'm dropping</font>

346
00:15:30,190 --> 00:15:37,060
<font color="#E5E5E5">rows the other tricky part is</font><font color="#CCCCCC"> you see I</font>

347
00:15:33,610 --> 00:15:41,380
have this<font color="#E5E5E5"> D F equals D F dot drop by</font>

348
00:15:37,060 --> 00:15:45,459
default<font color="#E5E5E5"> all these things return views of</font>

349
00:15:41,380 --> 00:15:47,769
the original so<font color="#CCCCCC"> it creates a new view of</font>

350
00:15:45,459 --> 00:15:49,329
that data frame<font color="#CCCCCC"> and returns it and so I</font>

351
00:15:47,769 --> 00:15:51,430
could<font color="#E5E5E5"> actually have kept the original</font>

352
00:15:49,329 --> 00:15:53,138
<font color="#E5E5E5">data frame</font><font color="#CCCCCC"> and create a sub data frame</font>

353
00:15:51,430 --> 00:15:54,880
out<font color="#CCCCCC"> of it in this case</font><font color="#E5E5E5"> I</font><font color="#CCCCCC"> don't want to</font>

354
00:15:53,139 --> 00:15:56,410
do that<font color="#CCCCCC"> I explicitly</font><font color="#E5E5E5"> want to get rid of</font>

355
00:15:54,880 --> 00:15:58,360
the old<font color="#E5E5E5"> data frame because I'm trying to</font>

356
00:15:56,410 --> 00:16:02,649
<font color="#E5E5E5">reduce</font><font color="#CCCCCC"> my memory footprint not increase</font>

357
00:15:58,360 --> 00:16:05,230
it so<font color="#CCCCCC"> I just assign it to its the output</font>

358
00:16:02,649 --> 00:16:07,360
of<font color="#E5E5E5"> itself and this is</font><font color="#CCCCCC"> the a very</font><font color="#E5E5E5"> very</font>

359
00:16:05,230 --> 00:16:09,759
common<font color="#E5E5E5"> pattern you will see me use like</font>

360
00:16:07,360 --> 00:16:11,709
almost every<font color="#CCCCCC"> thing that I do in</font><font color="#E5E5E5"> this</font>

361
00:16:09,759 --> 00:16:16,990
<font color="#CCCCCC">presentation</font><font color="#E5E5E5"> and you will see a lot of</font>

362
00:16:11,709 --> 00:16:18,609
<font color="#E5E5E5">other people</font><font color="#CCCCCC"> code</font><font color="#E5E5E5"> doing it too so the</font>

363
00:16:16,990 --> 00:16:20,889
next thing is<font color="#E5E5E5"> I</font><font color="#CCCCCC"> want to maybe drop some</font>

364
00:16:18,610 --> 00:16:22,389
unnecessary rows remember I<font color="#E5E5E5"> said not</font>

365
00:16:20,889 --> 00:16:24,690
<font color="#E5E5E5">everything in here is the HTTP</font>

366
00:16:22,389 --> 00:16:29,199
transaction<font color="#CCCCCC"> if I'm</font><font color="#E5E5E5"> only interested in</font>

367
00:16:24,690 --> 00:16:33,160
HTTP transactions<font color="#E5E5E5"> I will drop</font><font color="#CCCCCC"> everything</font>

368
00:16:29,199 --> 00:16:35,649
that's not one right<font color="#CCCCCC"> make sense</font><font color="#E5E5E5"> right</font>

369
00:16:33,160 --> 00:16:38,620
in this case<font color="#E5E5E5"> I'm more interested in</font>

370
00:16:35,649 --> 00:16:40,720
<font color="#E5E5E5">things that actually completed</font><font color="#CCCCCC"> than</font>

371
00:16:38,620 --> 00:16:43,689
things<font color="#E5E5E5"> that tried to</font><font color="#CCCCCC"> not complete or</font>

372
00:16:40,720 --> 00:16:46,029
<font color="#E5E5E5">tried but did not complete so for</font>

373
00:16:43,689 --> 00:16:48,610
example the way I tell if it was<font color="#E5E5E5"> the</font>

374
00:16:46,029 --> 00:16:49,420
completed transaction is if I transfer

375
00:16:48,610 --> 00:16:52,060
<font color="#CCCCCC">it any bytes</font>

376
00:16:49,420 --> 00:16:53,560
Ferg's though<font color="#CCCCCC"> in my mind I'm thinking</font>

377
00:16:52,060 --> 00:16:55,479
I'm looking<font color="#E5E5E5"> for things like data</font>

378
00:16:53,560 --> 00:16:56,829
exfiltration or whatever<font color="#E5E5E5"> and I can't</font>

379
00:16:55,480 --> 00:16:58,779
really do<font color="#CCCCCC"> that</font><font color="#E5E5E5"> very well without</font>

380
00:16:56,829 --> 00:17:00,189
<font color="#E5E5E5">transferring bytes so first of all</font>

381
00:16:58,779 --> 00:17:01,509
anything<font color="#E5E5E5"> where the number of bytes</font>

382
00:17:00,189 --> 00:17:04,089
transferred<font color="#CCCCCC"> was</font><font color="#E5E5E5"> zero</font>

383
00:17:01,509 --> 00:17:07,329
I want to drop but in ours we<font color="#E5E5E5"> don't</font>

384
00:17:04,089 --> 00:17:10,178
actually show<font color="#CCCCCC"> 0 it shows null that's</font>

385
00:17:07,329 --> 00:17:11,859
just the way our data was so we're gonna

386
00:17:10,179 --> 00:17:14,470
<font color="#E5E5E5">do this thing up here and we're going</font><font color="#CCCCCC"> to</font>

387
00:17:11,859 --> 00:17:16,928
<font color="#CCCCCC">unpack this first of all</font><font color="#E5E5E5"> remember we</font>

388
00:17:14,470 --> 00:17:19,689
have the data frame and then<font color="#E5E5E5"> the column</font>

389
00:17:16,929 --> 00:17:22,140
name is bytes<font color="#E5E5E5"> so I can name</font><font color="#CCCCCC"> it here DF</font>

390
00:17:19,689 --> 00:17:28,000
<font color="#CCCCCC">bytes and now I'm looking at a series</font>

391
00:17:22,140 --> 00:17:30,820
<font color="#E5E5E5">right and then is null so really what</font>

392
00:17:28,000 --> 00:17:33,309
I'm doing<font color="#E5E5E5"> there</font><font color="#CCCCCC"> is applying the</font><font color="#E5E5E5"> is null</font>

393
00:17:30,820 --> 00:17:35,379
function to the entire series<font color="#E5E5E5"> and it</font>

394
00:17:33,309 --> 00:17:36,730
will<font color="#E5E5E5"> return a series of the same length</font>

395
00:17:35,380 --> 00:17:38,710
<font color="#E5E5E5">where every value</font>

396
00:17:36,730 --> 00:17:43,320
is either true<font color="#CCCCCC"> or false depending on</font>

397
00:17:38,710 --> 00:17:43,320
whether it was null or not<font color="#E5E5E5"> null in that</font>

398
00:17:43,500 --> 00:17:47,740
but I don't<font color="#E5E5E5"> want</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> I don't want to keep</font>

399
00:17:45,790 --> 00:17:48,909
the<font color="#E5E5E5"> one isn't where their null</font><font color="#CCCCCC"> I want to</font>

400
00:17:47,740 --> 00:17:51,280
keep<font color="#E5E5E5"> the ones where they're not null so</font>

401
00:17:48,910 --> 00:17:53,380
there's a<font color="#CCCCCC"> not</font><font color="#E5E5E5"> here</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> little squiggly</font>

402
00:17:51,280 --> 00:17:55,178
<font color="#E5E5E5">thing is a</font><font color="#CCCCCC"> knot</font><font color="#E5E5E5"> so I'm just inverting</font>

403
00:17:53,380 --> 00:17:57,070
the truth values in that<font color="#E5E5E5"> whole series so</font>

404
00:17:55,179 --> 00:17:59,169
<font color="#CCCCCC">I end up with a series that's the same</font>

405
00:17:57,070 --> 00:18:01,299
length<font color="#E5E5E5"> as the bytes series and it says</font>

406
00:17:59,169 --> 00:18:04,890
if there's bytes in it it's true and if

407
00:18:01,299 --> 00:18:09,690
there's null<font color="#CCCCCC"> it's 0 or it's</font><font color="#E5E5E5"> false</font><font color="#CCCCCC"> and</font>

408
00:18:04,890 --> 00:18:13,210
I'm using the handy dandy<font color="#E5E5E5"> data frame</font>

409
00:18:09,690 --> 00:18:14,710
subscript method which accepts<font color="#CCCCCC"> a number</font>

410
00:18:13,210 --> 00:18:17,140
of things one<font color="#E5E5E5"> of the things</font><font color="#CCCCCC"> that accepts</font>

411
00:18:14,710 --> 00:18:21,700
is a series of true/false<font color="#E5E5E5"> and it returns</font>

412
00:18:17,140 --> 00:18:25,419
only<font color="#CCCCCC"> the</font><font color="#E5E5E5"> subset of those where the value</font>

413
00:18:21,700 --> 00:18:27,220
was true think<font color="#E5E5E5"> about that</font><font color="#CCCCCC"> for a minute</font>

414
00:18:25,419 --> 00:18:29,169
that part is<font color="#E5E5E5"> that took me a little while</font>

415
00:18:27,220 --> 00:18:33,160
to fully unpack but basically it says

416
00:18:29,169 --> 00:18:35,049
<font color="#CCCCCC">anytime it is</font><font color="#E5E5E5"> null</font><font color="#CCCCCC"> I'm going to put that</font>

417
00:18:33,160 --> 00:18:37,780
into my resulting data frame<font color="#E5E5E5"> and if it's</font>

418
00:18:35,049 --> 00:18:39,220
and if it's excuse me if it's not<font color="#CCCCCC"> null</font>

419
00:18:37,780 --> 00:18:41,139
I'm gonna put it<font color="#E5E5E5"> in my resulting data</font>

420
00:18:39,220 --> 00:18:43,990
frame and<font color="#CCCCCC"> if it is no I'm gonna leave</font><font color="#E5E5E5"> it</font>

421
00:18:41,140 --> 00:18:46,990
out<font color="#E5E5E5"> and then I just apply it to myself</font>

422
00:18:43,990 --> 00:18:49,210
again<font color="#CCCCCC"> and so now I've just dropped all</font>

423
00:18:46,990 --> 00:18:51,040
these rows in fact you can see I call

424
00:18:49,210 --> 00:18:56,350
info again<font color="#E5E5E5"> and I</font><font color="#CCCCCC"> drop</font><font color="#E5E5E5"> like half the rows</font>

425
00:18:51,040 --> 00:18:58,540
and I'm down<font color="#E5E5E5"> to just</font><font color="#CCCCCC"> a tad over one</font>

426
00:18:56,350 --> 00:19:01,949
gigabytes<font color="#E5E5E5"> actually tad under one</font>

427
00:18:58,540 --> 00:19:06,879
gigabyte right<font color="#E5E5E5"> so that's</font><font color="#CCCCCC"> pretty good I</font>

428
00:19:01,950 --> 00:19:08,890
dropped like 0.6 of<font color="#E5E5E5"> a gigabyte already</font>

429
00:19:06,880 --> 00:19:11,860
but we could do a little bit<font color="#E5E5E5"> better if</font>

430
00:19:08,890 --> 00:19:14,559
you see here the data types<font color="#CCCCCC"> for</font><font color="#E5E5E5"> much</font>

431
00:19:11,860 --> 00:19:17,770
most<font color="#E5E5E5"> most of these columns are our kind</font>

432
00:19:14,559 --> 00:19:20,139
<font color="#E5E5E5">of odd object object float object object</font>

433
00:19:17,770 --> 00:19:22,900
when you<font color="#E5E5E5"> see object data type in pandas</font>

434
00:19:20,140 --> 00:19:25,030
it means<font color="#E5E5E5"> oh</font><font color="#CCCCCC"> I don't know what</font><font color="#E5E5E5"> that was</font>

435
00:19:22,900 --> 00:19:28,360
<font color="#CCCCCC">I'm just gonna basically</font><font color="#E5E5E5"> store it as a</font>

436
00:19:25,030 --> 00:19:30,190
string<font color="#E5E5E5"> not a great</font><font color="#CCCCCC"> thing to store</font>

437
00:19:28,360 --> 00:19:35,860
everything<font color="#CCCCCC"> as because if for example you</font>

438
00:19:30,190 --> 00:19:38,620
think<font color="#CCCCCC"> of the</font><font color="#E5E5E5"> number 1000 you could store</font>

439
00:19:35,860 --> 00:19:40,719
that<font color="#E5E5E5"> in like</font><font color="#CCCCCC"> 2 bytes or you could store</font>

440
00:19:38,620 --> 00:19:43,239
it in<font color="#CCCCCC"> 4</font><font color="#E5E5E5"> 5 bytes as a string with a null</font>

441
00:19:40,720 --> 00:19:44,799
terminator<font color="#E5E5E5"> you would like to store it as</font>

442
00:19:43,240 --> 00:19:47,710
a<font color="#E5E5E5"> number in two bytes</font>

443
00:19:44,799 --> 00:19:50,170
I suspect so<font color="#E5E5E5"> there the next thing we</font><font color="#CCCCCC"> can</font>

444
00:19:47,710 --> 00:19:53,260
do is actually come back and<font color="#CCCCCC"> cur</font>

445
00:19:50,170 --> 00:19:55,420
the<font color="#CCCCCC"> datatypes</font><font color="#E5E5E5"> really simply the</font>

446
00:19:53,260 --> 00:19:57,940
<font color="#E5E5E5">dataframe has this as type function and</font>

447
00:19:55,420 --> 00:20:01,240
you<font color="#E5E5E5"> can say</font><font color="#CCCCCC"> so the argument is</font><font color="#E5E5E5"> a dict</font>

448
00:19:57,940 --> 00:20:04,510
<font color="#E5E5E5">where it has the names of the columns</font>

449
00:20:01,240 --> 00:20:06,429
<font color="#E5E5E5">and the data type that they</font><font color="#CCCCCC"> yet you want</font>

450
00:20:04,510 --> 00:20:10,420
them to be<font color="#E5E5E5"> so here we're saying time</font>

451
00:20:06,429 --> 00:20:12,040
<font color="#E5E5E5">stamp is a</font><font color="#CCCCCC"> date/time object</font><font color="#E5E5E5"> you know for</font>

452
00:20:10,420 --> 00:20:14,320
some<font color="#CCCCCC"> reason my thing is</font><font color="#E5E5E5"> not even going</font>

453
00:20:12,040 --> 00:20:18,549
<font color="#CCCCCC">now</font><font color="#E5E5E5"> that's awesome</font>

454
00:20:14,320 --> 00:20:20,350
where<font color="#CCCCCC"> my my</font><font color="#E5E5E5"> date my time stamp is a</font>

455
00:20:18,549 --> 00:20:24,370
<font color="#CCCCCC">date/time object from numpy so it's</font>

456
00:20:20,350 --> 00:20:27,159
<font color="#CCCCCC">64-bit date time I have I'm setting the</font>

457
00:20:24,370 --> 00:20:29,409
bytes to be an integer column<font color="#E5E5E5"> it makes</font>

458
00:20:27,160 --> 00:20:31,150
sense<font color="#E5E5E5"> right and</font><font color="#CCCCCC"> then for</font><font color="#E5E5E5"> some of these</font>

459
00:20:29,410 --> 00:20:33,160
<font color="#E5E5E5">other ones like des port and protocol</font>

460
00:20:31,150 --> 00:20:35,919
scheme<font color="#E5E5E5"> I have this thing called category</font>

461
00:20:33,160 --> 00:20:38,770
category<font color="#CCCCCC"> is a little bit</font><font color="#E5E5E5"> weird one if</font>

462
00:20:35,919 --> 00:20:41,080
you<font color="#E5E5E5"> think of a column of values if you</font>

463
00:20:38,770 --> 00:20:42,220
really do<font color="#CCCCCC"> have a lots and lots of</font>

464
00:20:41,080 --> 00:20:44,530
different<font color="#CCCCCC"> values</font><font color="#E5E5E5"> and there's not very</font>

465
00:20:42,220 --> 00:20:46,780
much overlap<font color="#CCCCCC"> you probably</font><font color="#E5E5E5"> don't want</font>

466
00:20:44,530 --> 00:20:49,330
this<font color="#E5E5E5"> but in this case think of like the</font>

467
00:20:46,780 --> 00:20:52,270
HTTP<font color="#CCCCCC"> method</font><font color="#E5E5E5"> you know that's your get</font>

468
00:20:49,330 --> 00:20:54,309
your post right and there's just not

469
00:20:52,270 --> 00:20:59,559
that many values that you<font color="#E5E5E5"> can have out</font>

470
00:20:54,309 --> 00:21:02,230
<font color="#E5E5E5">of 37 mega logs you you might have less</font>

471
00:20:59,559 --> 00:21:06,730
<font color="#E5E5E5">than</font><font color="#CCCCCC"> ten distinct values right</font>

472
00:21:02,230 --> 00:21:12,520
so why store<font color="#E5E5E5"> 37 mega strings worth of</font>

473
00:21:06,730 --> 00:21:17,580
data when you could store the category

474
00:21:12,520 --> 00:21:21,129
<font color="#E5E5E5">probably as a number a bite maybe and</font>

475
00:21:17,580 --> 00:21:23,199
and just have that<font color="#CCCCCC"> many of that</font><font color="#E5E5E5"> bite</font>

476
00:21:21,130 --> 00:21:24,910
right<font color="#E5E5E5"> instead</font><font color="#CCCCCC"> of that many of</font><font color="#E5E5E5"> that</font>

477
00:21:23,200 --> 00:21:26,950
strings which could be two three<font color="#E5E5E5"> four</font>

478
00:21:24,910 --> 00:21:31,419
times as much<font color="#E5E5E5"> so here we're just going</font>

479
00:21:26,950 --> 00:21:34,210
to convert them into<font color="#CCCCCC"> categories</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> if</font>

480
00:21:31,419 --> 00:21:36,549
you<font color="#E5E5E5"> we've done</font><font color="#CCCCCC"> that you can see that now</font>

481
00:21:34,210 --> 00:21:39,940
<font color="#CCCCCC">I keep thinking this</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> going to</font><font color="#E5E5E5"> work</font>

482
00:21:36,549 --> 00:21:41,889
<font color="#E5E5E5">but now you have the</font><font color="#CCCCCC"> date/time</font><font color="#E5E5E5"> as a</font>

483
00:21:39,940 --> 00:21:43,809
<font color="#E5E5E5">timestamp that's correct</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> have</font>

484
00:21:41,890 --> 00:21:47,350
some categories<font color="#CCCCCC"> and we have an integer</font>

485
00:21:43,809 --> 00:21:49,510
type and that's we're down to like six

486
00:21:47,350 --> 00:21:51,699
hundred<font color="#CCCCCC"> and</font><font color="#E5E5E5"> forty</font><font color="#CCCCCC"> five megabytes so</font>

487
00:21:49,510 --> 00:21:53,650
<font color="#CCCCCC">that's pretty good</font><font color="#E5E5E5"> notice I did keep the</font>

488
00:21:51,700 --> 00:21:55,090
destination as an<font color="#CCCCCC"> object because</font><font color="#E5E5E5"> that</font>

489
00:21:53,650 --> 00:21:57,280
<font color="#E5E5E5">could be an IP</font><font color="#CCCCCC"> address or it could be a</font>

490
00:21:55,090 --> 00:21:59,350
<font color="#E5E5E5">domain name or</font><font color="#CCCCCC"> something and</font><font color="#E5E5E5"> it's really</font>

491
00:21:57,280 --> 00:22:03,010
is more like a string in this what I

492
00:21:59,350 --> 00:22:03,669
<font color="#E5E5E5">want to do</font><font color="#CCCCCC"> also I would</font><font color="#E5E5E5"> like to tell</font>

493
00:22:03,010 --> 00:22:05,200
tell

494
00:22:03,670 --> 00:22:07,960
for a minute you might<font color="#E5E5E5"> be saying David</font>

495
00:22:05,200 --> 00:22:11,350
you screwed up<font color="#CCCCCC"> because we have desc</font>

496
00:22:07,960 --> 00:22:13,620
ports and they're clearly integers<font color="#E5E5E5"> who</font>

497
00:22:11,350 --> 00:22:17,169
<font color="#E5E5E5">thinks the dust port is an integer</font><font color="#CCCCCC"> Oh</font>

498
00:22:13,620 --> 00:22:18,969
<font color="#E5E5E5">nobody you're smart you're not falling</font>

499
00:22:17,170 --> 00:22:20,250
for<font color="#E5E5E5"> that trap yeah des portes looked</font>

500
00:22:18,970 --> 00:22:22,630
like integers<font color="#E5E5E5"> but you don't like</font>

501
00:22:20,250 --> 00:22:25,120
<font color="#E5E5E5">multiply</font><font color="#CCCCCC"> 2 des portes and</font><font color="#E5E5E5"> get a new des</font>

502
00:22:22,630 --> 00:22:27,910
port or you don't<font color="#E5E5E5"> subtract 4 from it or</font>

503
00:22:25,120 --> 00:22:29,800
<font color="#E5E5E5">divide it by 9 they're really not there</font>

504
00:22:27,910 --> 00:22:34,110
they're more categorical<font color="#E5E5E5"> data</font><font color="#CCCCCC"> so we</font>

505
00:22:29,800 --> 00:22:36,070
treat them as categorical usually<font color="#E5E5E5"> I</font>

506
00:22:34,110 --> 00:22:41,649
don't<font color="#CCCCCC"> know why this thing has</font><font color="#E5E5E5"> stopped</font>

507
00:22:36,070 --> 00:22:47,710
working<font color="#CCCCCC"> but we'll see</font><font color="#E5E5E5"> if we can maybe do</font>

508
00:22:41,650 --> 00:22:50,080
without it so now that we have<font color="#CCCCCC"> this data</font>

509
00:22:47,710 --> 00:22:52,270
<font color="#E5E5E5">and we've read it in and we are now</font>

510
00:22:50,080 --> 00:22:55,120
prepared to<font color="#E5E5E5"> do</font><font color="#CCCCCC"> analysis with this data</font>

511
00:22:52,270 --> 00:22:57,639
<font color="#E5E5E5">right the first kind of analysis that we</font>

512
00:22:55,120 --> 00:22:59,280
<font color="#E5E5E5">might want to do is probably one that a</font>

513
00:22:57,640 --> 00:23:02,260
<font color="#E5E5E5">lot</font><font color="#CCCCCC"> of you in this room</font><font color="#E5E5E5"> have</font><font color="#CCCCCC"> done</font>

514
00:22:59,280 --> 00:23:04,750
<font color="#CCCCCC">frequency analysis sometimes called stat</font>

515
00:23:02,260 --> 00:23:07,960
counting which I firmly believe is

516
00:23:04,750 --> 00:23:11,380
<font color="#E5E5E5">probably like the number</font><font color="#CCCCCC"> one numeric</font>

517
00:23:07,960 --> 00:23:13,060
method of<font color="#E5E5E5"> thread hunting just</font><font color="#CCCCCC"> hands</font><font color="#E5E5E5"> down</font>

518
00:23:11,380 --> 00:23:16,960
<font color="#CCCCCC">this is what everybody learns first</font>

519
00:23:13,060 --> 00:23:19,600
almost so all we're doing<font color="#E5E5E5"> is basically</font>

520
00:23:16,960 --> 00:23:24,220
<font color="#E5E5E5">we're saying in this</font><font color="#CCCCCC"> case</font><font color="#E5E5E5"> I would</font><font color="#CCCCCC"> like</font>

521
00:23:19,600 --> 00:23:26,469
to see how many<font color="#CCCCCC"> different HTTP method</font>

522
00:23:24,220 --> 00:23:29,140
verbs we have in our data and how many

523
00:23:26,470 --> 00:23:33,250
times each one<font color="#CCCCCC"> appears</font><font color="#E5E5E5"> and I'm</font>

524
00:23:29,140 --> 00:23:35,920
<font color="#E5E5E5">interested in the less frequent ones</font>

525
00:23:33,250 --> 00:23:38,830
because I expect a lot<font color="#CCCCCC"> of</font><font color="#E5E5E5"> like get and</font>

526
00:23:35,920 --> 00:23:40,510
post<font color="#CCCCCC"> maybe some head or option or</font>

527
00:23:38,830 --> 00:23:42,520
whatever but<font color="#E5E5E5"> I want to see what's in</font>

528
00:23:40,510 --> 00:23:44,620
there<font color="#E5E5E5"> and the more rare they are the</font>

529
00:23:42,520 --> 00:23:47,230
more interesting they might be to me<font color="#E5E5E5"> so</font>

530
00:23:44,620 --> 00:23:48,939
I'm gonna order them that way<font color="#E5E5E5"> so really</font>

531
00:23:47,230 --> 00:23:50,890
this is<font color="#CCCCCC"> pretty simple</font>

532
00:23:48,940 --> 00:23:53,350
pandas allows you to do<font color="#E5E5E5"> this on a data</font>

533
00:23:50,890 --> 00:23:56,170
frame by<font color="#CCCCCC"> using this group by function up</font>

534
00:23:53,350 --> 00:23:58,209
here<font color="#E5E5E5"> where it says DF group I and you</font>

535
00:23:56,170 --> 00:24:00,430
can group by<font color="#E5E5E5"> just the name of one column</font>

536
00:23:58,210 --> 00:24:01,750
<font color="#CCCCCC">or</font><font color="#E5E5E5"> you can</font><font color="#CCCCCC"> even</font><font color="#E5E5E5"> have a list of column</font>

537
00:24:00,430 --> 00:24:05,800
names so<font color="#E5E5E5"> you can do a multi-column</font>

538
00:24:01,750 --> 00:24:08,080
grouping but the group the group<font color="#CCCCCC"> by</font>

539
00:24:05,800 --> 00:24:08,530
return value<font color="#CCCCCC"> is not that useful by</font>

540
00:24:08,080 --> 00:24:10,389
itself

541
00:24:08,530 --> 00:24:12,310
<font color="#E5E5E5">you have to tell it what</font><font color="#CCCCCC"> you want to do</font>

542
00:24:10,390 --> 00:24:14,050
with that group so I'm doing<font color="#E5E5E5"> some</font>

543
00:24:12,310 --> 00:24:16,570
function chaining here so I'm<font color="#CCCCCC"> grouping</font>

544
00:24:14,050 --> 00:24:18,789
by the HTTP method<font color="#E5E5E5"> row are</font>

545
00:24:16,570 --> 00:24:21,490
<font color="#CCCCCC">column but then I'm telling it to apply</font>

546
00:24:18,789 --> 00:24:24,549
<font color="#CCCCCC">a count the total</font><font color="#E5E5E5"> number</font><font color="#CCCCCC"> of times that</font>

547
00:24:21,490 --> 00:24:26,409
occurs<font color="#E5E5E5"> right and then I'm</font><font color="#CCCCCC"> just doing</font>

548
00:24:24,549 --> 00:24:28,000
this weird thing<font color="#E5E5E5"> called reset index</font>

549
00:24:26,409 --> 00:24:30,490
which just makes it<font color="#E5E5E5"> look a little bit</font>

550
00:24:28,000 --> 00:24:34,570
<font color="#CCCCCC">nicer</font><font color="#E5E5E5"> but technically you don't need to</font>

551
00:24:30,490 --> 00:24:37,419
do this<font color="#CCCCCC"> the result here I'm gonna sort</font>

552
00:24:34,570 --> 00:24:38,769
<font color="#CCCCCC">and you're like why is he sorting it by</font>

553
00:24:37,419 --> 00:24:40,659
the<font color="#CCCCCC"> timestamp I don't even see any</font>

554
00:24:38,769 --> 00:24:43,899
timestamps on here so this is a little

555
00:24:40,659 --> 00:24:47,440
<font color="#E5E5E5">bit unusual</font><font color="#CCCCCC"> so what happens is</font><font color="#E5E5E5"> when you</font>

556
00:24:43,899 --> 00:24:49,809
say a group<font color="#E5E5E5"> by for one or more columns</font>

557
00:24:47,440 --> 00:24:52,059
<font color="#CCCCCC">there is probably other columns that are</font>

558
00:24:49,809 --> 00:24:54,549
not in<font color="#CCCCCC"> that group right there they're</font>

559
00:24:52,059 --> 00:24:56,769
<font color="#E5E5E5">not part of the grouping what it does</font>

560
00:24:54,549 --> 00:25:01,570
when you do count<font color="#CCCCCC"> it actually returns</font>

561
00:24:56,769 --> 00:25:03,159
the the count of non null values<font color="#E5E5E5"> like</font>

562
00:25:01,570 --> 00:25:04,870
we've already filtered<font color="#E5E5E5"> out than</font><font color="#CCCCCC"> than</font>

563
00:25:03,159 --> 00:25:06,220
most of the nulls here so that's<font color="#E5E5E5"> not as</font>

564
00:25:04,870 --> 00:25:09,489
<font color="#CCCCCC">much</font><font color="#E5E5E5"> of an issue for us but it that's</font>

565
00:25:06,220 --> 00:25:12,970
what it<font color="#E5E5E5"> does and if you have columns</font>

566
00:25:09,490 --> 00:25:14,679
that have<font color="#E5E5E5"> data in some of the rows and</font>

567
00:25:12,970 --> 00:25:18,070
not in others and<font color="#E5E5E5"> maybe they're</font>

568
00:25:14,679 --> 00:25:20,409
different<font color="#E5E5E5"> amounts of those nulls in</font>

569
00:25:18,070 --> 00:25:23,740
different columns<font color="#E5E5E5"> you could actually get</font>

570
00:25:20,409 --> 00:25:27,039
different numbers<font color="#E5E5E5"> across</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> board here</font>

571
00:25:23,740 --> 00:25:31,870
<font color="#E5E5E5">in our case though our data is really</font>

572
00:25:27,039 --> 00:25:33,789
<font color="#E5E5E5">rather uniform in that way</font><font color="#CCCCCC"> so we get the</font>

573
00:25:31,870 --> 00:25:36,879
same I think it's the same number<font color="#CCCCCC"> in all</font>

574
00:25:33,789 --> 00:25:38,950
all of those across each row so you<font color="#E5E5E5"> just</font>

575
00:25:36,879 --> 00:25:41,019
have<font color="#E5E5E5"> to choose which one of those that</font>

576
00:25:38,950 --> 00:25:42,909
<font color="#E5E5E5">you want to sort by</font><font color="#CCCCCC"> just as a</font><font color="#E5E5E5"> good</font>

577
00:25:41,019 --> 00:25:44,710
<font color="#E5E5E5">practice I know that every single</font><font color="#CCCCCC"> thing</font>

578
00:25:42,909 --> 00:25:46,840
<font color="#CCCCCC">in there would be guaranteed to have a</font>

579
00:25:44,710 --> 00:25:48,250
<font color="#CCCCCC">timestamp</font><font color="#E5E5E5"> or it's kind of like they say</font>

580
00:25:46,840 --> 00:25:56,168
<font color="#E5E5E5">on the</font><font color="#CCCCCC"> internet timestamps or</font><font color="#E5E5E5"> didn't</font>

581
00:25:48,250 --> 00:25:58,000
happen<font color="#E5E5E5"> nobody</font><font color="#CCCCCC"> alright but so so I chose</font>

582
00:25:56,169 --> 00:26:00,429
time Sam<font color="#CCCCCC"> but really in this data set I</font>

583
00:25:58,000 --> 00:26:01,870
could have chose any of those like other

584
00:26:00,429 --> 00:26:05,320
ones and<font color="#E5E5E5"> it would have given me the</font><font color="#CCCCCC"> same</font>

585
00:26:01,870 --> 00:26:08,918
<font color="#E5E5E5">answer right so I've come</font><font color="#CCCCCC"> to say</font><font color="#E5E5E5"> okay</font>

586
00:26:05,320 --> 00:26:12,639
I've got you know what is it a little

587
00:26:08,919 --> 00:26:15,220
<font color="#E5E5E5">over 1 million gets a bunch of posts</font>

588
00:26:12,639 --> 00:26:17,740
some even some heads and<font color="#E5E5E5"> options but</font>

589
00:26:15,220 --> 00:26:22,120
that there's puts man I only got<font color="#CCCCCC"> 7 out</font>

590
00:26:17,740 --> 00:26:23,799
of<font color="#E5E5E5"> 37 million entries I kind of maybe</font>

591
00:26:22,120 --> 00:26:26,918
I've<font color="#E5E5E5"> just</font><font color="#CCCCCC"> been conditioned this way but</font>

592
00:26:23,799 --> 00:26:28,120
I kind of find put value or put objects

593
00:26:26,919 --> 00:26:30,240
<font color="#E5E5E5">to be.we</font>

594
00:26:28,120 --> 00:26:32,739
and kind of suspicious<font color="#CCCCCC"> because they're</font>

595
00:26:30,240 --> 00:26:35,049
<font color="#CCCCCC">mainly they're really only use</font><font color="#E5E5E5"> is to put</font>

596
00:26:32,740 --> 00:26:36,760
a data blob on<font color="#CCCCCC"> the main on the remote</font>

597
00:26:35,049 --> 00:26:41,860
server<font color="#CCCCCC"> and we used to</font><font color="#E5E5E5"> see them a lot</font>

598
00:26:36,760 --> 00:26:43,960
when like I don't know in like 1999<font color="#E5E5E5"> when</font>

599
00:26:41,860 --> 00:26:45,969
you had to publish your website<font color="#E5E5E5"> from</font>

600
00:26:43,960 --> 00:26:48,159
<font color="#CCCCCC">your desktop publishing application and</font>

601
00:26:45,970 --> 00:26:52,860
they would use puts<font color="#E5E5E5"> I don't I don't see</font>

602
00:26:48,159 --> 00:26:55,720
<font color="#CCCCCC">them a</font><font color="#E5E5E5"> lot really now</font><font color="#CCCCCC"> but let's see</font><font color="#E5E5E5"> what</font>

603
00:26:52,860 --> 00:26:57,070
we want to we<font color="#CCCCCC"> want to</font><font color="#E5E5E5"> find a little bit</font>

604
00:26:55,720 --> 00:26:59,110
<font color="#CCCCCC">more about those so let's see what we</font>

605
00:26:57,070 --> 00:27:01,240
<font color="#E5E5E5">can do about that well fortunately</font>

606
00:26:59,110 --> 00:27:04,629
pandas makes it really easy<font color="#E5E5E5"> to drill</font>

607
00:27:01,240 --> 00:27:07,059
down we're<font color="#E5E5E5"> gonna use a similar mechanism</font>

608
00:27:04,630 --> 00:27:09,039
<font color="#E5E5E5">that we used to drop some of those rows</font>

609
00:27:07,059 --> 00:27:13,470
we're going to just say look I want<font color="#E5E5E5"> all</font>

610
00:27:09,039 --> 00:27:17,500
the rows where<font color="#E5E5E5"> the method is put and</font>

611
00:27:13,470 --> 00:27:21,100
return that<font color="#E5E5E5"> one thing to note</font>

612
00:27:17,500 --> 00:27:22,600
I did not say DF equals anything because

613
00:27:21,100 --> 00:27:24,760
I<font color="#E5E5E5"> don't want to overwrite my whole data</font>

614
00:27:22,600 --> 00:27:28,059
frame<font color="#E5E5E5"> and so that I drop everything but</font>

615
00:27:24,760 --> 00:27:31,570
seven rows<font color="#CCCCCC"> Jupiter's platform is really</font>

616
00:27:28,059 --> 00:27:33,100
<font color="#CCCCCC">smart about the the return</font><font color="#E5E5E5"> value of</font><font color="#CCCCCC"> a</font>

617
00:27:31,570 --> 00:27:34,899
block of<font color="#E5E5E5"> code it just automatically</font>

618
00:27:33,100 --> 00:27:38,279
prints<font color="#E5E5E5"> wouldn't no matter what it is</font><font color="#CCCCCC"> and</font>

619
00:27:34,899 --> 00:27:40,570
<font color="#E5E5E5">so the return value of this is just the</font>

620
00:27:38,279 --> 00:27:43,120
the temporary<font color="#E5E5E5"> data frame that was</font>

621
00:27:40,570 --> 00:27:46,379
returned from<font color="#E5E5E5"> that selection so I just</font>

622
00:27:43,120 --> 00:27:48,639
get a data frame of what seven rows and

623
00:27:46,380 --> 00:27:52,840
totally nothing<font color="#E5E5E5"> on here to be concerned</font>

624
00:27:48,640 --> 00:27:57,880
with<font color="#CCCCCC"> I think that last one is looking</font>

625
00:27:52,840 --> 00:28:00,158
pretty suspicious<font color="#CCCCCC"> I gotta say and here</font>

626
00:27:57,880 --> 00:28:02,710
you<font color="#E5E5E5"> have you have the</font><font color="#CCCCCC"> timestamps</font><font color="#E5E5E5"> I</font>

627
00:28:00,159 --> 00:28:04,929
didn't put the source IPS on here

628
00:28:02,710 --> 00:28:07,240
<font color="#E5E5E5">because I didn't want to do a bad</font><font color="#CCCCCC"> job of</font>

629
00:28:04,929 --> 00:28:10,630
anonymizing them but you could have<font color="#E5E5E5"> done</font>

630
00:28:07,240 --> 00:28:12,669
<font color="#CCCCCC">that and</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> would know the IP</font><font color="#E5E5E5"> that it</font>

631
00:28:10,630 --> 00:28:13,779
came from<font color="#CCCCCC"> and</font><font color="#E5E5E5"> the time but now you just</font>

632
00:28:12,669 --> 00:28:16,090
<font color="#CCCCCC">know the time and you know the</font>

633
00:28:13,779 --> 00:28:19,149
<font color="#CCCCCC">destination</font><font color="#E5E5E5"> so you can find it</font><font color="#CCCCCC"> yourself</font>

634
00:28:16,090 --> 00:28:26,949
and the raw logs or something in query

635
00:28:19,149 --> 00:28:28,870
<font color="#CCCCCC">elk so that's how you</font><font color="#E5E5E5"> find something one</font>

636
00:28:26,950 --> 00:28:31,330
way of finding<font color="#CCCCCC"> anyway a specific</font>

637
00:28:28,870 --> 00:28:34,110
transaction<font color="#CCCCCC"> that's bad</font><font color="#E5E5E5"> but what if</font>

638
00:28:31,330 --> 00:28:38,230
you're more interested<font color="#CCCCCC"> in</font><font color="#E5E5E5"> finding like a</font>

639
00:28:34,110 --> 00:28:41,370
group of transactions<font color="#E5E5E5"> that collectively</font>

640
00:28:38,230 --> 00:28:41,370
are suspicious

641
00:28:41,460 --> 00:28:48,930
well we<font color="#CCCCCC"> often work with</font><font color="#E5E5E5"> data over time</font>

642
00:28:47,370 --> 00:28:50,969
I've seen<font color="#E5E5E5"> it</font><font color="#CCCCCC"> in some</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> the other</font>

643
00:28:48,930 --> 00:28:53,130
presentations<font color="#E5E5E5"> today we have a</font><font color="#CCCCCC"> timeline</font>

644
00:28:50,970 --> 00:28:57,420
of<font color="#E5E5E5"> things and you're like find me the</font>

645
00:28:53,130 --> 00:28:59,370
spike well<font color="#E5E5E5"> problem</font><font color="#CCCCCC"> is when you're</font>

646
00:28:57,420 --> 00:29:01,980
looking<font color="#CCCCCC"> at a bunch</font><font color="#E5E5E5"> of data that happens</font>

647
00:28:59,370 --> 00:29:03,899
over time<font color="#E5E5E5"> you don't necessarily want to</font>

648
00:29:01,980 --> 00:29:06,270
find the spikes<font color="#CCCCCC"> you want to find the</font>

649
00:29:03,900 --> 00:29:09,000
unusual spikes<font color="#E5E5E5"> because</font><font color="#CCCCCC"> if you think</font>

650
00:29:06,270 --> 00:29:11,310
<font color="#E5E5E5">about it things have</font><font color="#CCCCCC"> a kind</font><font color="#E5E5E5"> of a rhythm</font>

651
00:29:09,000 --> 00:29:13,020
<font color="#CCCCCC">that they go in pretty often</font><font color="#E5E5E5"> if you look</font>

652
00:29:11,310 --> 00:29:15,179
at for example<font color="#E5E5E5"> the total number of</font>

653
00:29:13,020 --> 00:29:17,160
<font color="#CCCCCC">outgoing transactions</font><font color="#E5E5E5"> in your network</font>

654
00:29:15,180 --> 00:29:19,320
<font color="#E5E5E5">they probably spiked around</font><font color="#CCCCCC"> eight or</font>

655
00:29:17,160 --> 00:29:21,060
<font color="#CCCCCC">nine o'clock</font><font color="#E5E5E5"> when people come</font><font color="#CCCCCC"> into work</font>

656
00:29:19,320 --> 00:29:22,950
<font color="#E5E5E5">they go down a little</font><font color="#CCCCCC"> bit they probably</font>

657
00:29:21,060 --> 00:29:24,840
<font color="#E5E5E5">spiked again it</font><font color="#CCCCCC"> around noon and</font><font color="#E5E5E5"> they</font>

658
00:29:22,950 --> 00:29:28,310
probably<font color="#E5E5E5"> drop off a lot</font><font color="#CCCCCC"> it like I</font><font color="#E5E5E5"> don't</font>

659
00:29:24,840 --> 00:29:31,290
know 5:30 or<font color="#CCCCCC"> 6:00</font><font color="#E5E5E5"> when people leave</font>

660
00:29:28,310 --> 00:29:32,820
those you know those<font color="#E5E5E5"> are spikes positive</font>

661
00:29:31,290 --> 00:29:35,460
spikes or negative spikes maybe but

662
00:29:32,820 --> 00:29:38,909
their spikes<font color="#E5E5E5"> but they're not</font><font color="#CCCCCC"> necessarily</font>

663
00:29:35,460 --> 00:29:41,970
unusual<font color="#E5E5E5"> spikes so what we want to do is</font>

664
00:29:38,910 --> 00:29:43,500
we want to focus<font color="#E5E5E5"> on how you</font><font color="#CCCCCC"> can find</font><font color="#E5E5E5"> the</font>

665
00:29:41,970 --> 00:29:46,020
spikes<font color="#E5E5E5"> that normally wouldn't happen</font>

666
00:29:43,500 --> 00:29:47,790
that might be indicative of<font color="#CCCCCC"> something</font>

667
00:29:46,020 --> 00:29:51,110
odd going<font color="#CCCCCC"> on</font><font color="#E5E5E5"> I don't know if it's</font>

668
00:29:47,790 --> 00:29:55,139
<font color="#CCCCCC">malicious or</font><font color="#E5E5E5"> not but it's suspicious</font><font color="#CCCCCC"> and</font>

669
00:29:51,110 --> 00:29:56,610
to do that we<font color="#E5E5E5"> talked</font><font color="#CCCCCC"> about using</font><font color="#E5E5E5"> some</font>

670
00:29:55,140 --> 00:30:00,440
techniques<font color="#CCCCCC"> that coat fall under the</font>

671
00:29:56,610 --> 00:30:07,350
collective<font color="#E5E5E5"> term of time series analysis</font>

672
00:30:00,440 --> 00:30:09,090
<font color="#E5E5E5">sounds hard basic idea</font><font color="#CCCCCC"> super easy the</font>

673
00:30:07,350 --> 00:30:11,969
first thing we're going to do though<font color="#E5E5E5"> is</font>

674
00:30:09,090 --> 00:30:14,879
we have to construct<font color="#E5E5E5"> a time series so a</font>

675
00:30:11,970 --> 00:30:18,300
time series<font color="#CCCCCC"> is just</font><font color="#E5E5E5"> a regular series</font><font color="#CCCCCC"> and</font>

676
00:30:14,880 --> 00:30:20,070
pandas really but instead<font color="#E5E5E5"> of having</font>

677
00:30:18,300 --> 00:30:22,320
integer indexes it's going to have a

678
00:30:20,070 --> 00:30:24,120
<font color="#CCCCCC">date/time</font><font color="#E5E5E5"> index you pretty much have any</font>

679
00:30:22,320 --> 00:30:25,800
kind of data type you<font color="#E5E5E5"> want as an index</font>

680
00:30:24,120 --> 00:30:30,899
<font color="#E5E5E5">to your series as long as each one is</font>

681
00:30:25,800 --> 00:30:35,700
unique so we'll have<font color="#CCCCCC"> a date/time</font><font color="#E5E5E5"> and we</font>

682
00:30:30,900 --> 00:30:38,040
could easily<font color="#E5E5E5"> convert the the the data</font>

683
00:30:35,700 --> 00:30:41,490
<font color="#E5E5E5">frame we've been working with to</font><font color="#CCCCCC"> a data</font>

684
00:30:38,040 --> 00:30:44,970
frame that has<font color="#E5E5E5"> sorry a series that</font><font color="#CCCCCC"> has</font>

685
00:30:41,490 --> 00:30:46,920
an index<font color="#E5E5E5"> of the date times of all the</font>

686
00:30:44,970 --> 00:30:48,930
<font color="#CCCCCC">events</font><font color="#E5E5E5"> but</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> don't necessarily want</font><font color="#CCCCCC"> to</font>

687
00:30:46,920 --> 00:30:52,380
deal with<font color="#CCCCCC"> every single event</font><font color="#E5E5E5"> when we're</font>

688
00:30:48,930 --> 00:30:54,630
doing time series analysis 37 million

689
00:30:52,380 --> 00:30:56,730
<font color="#E5E5E5">data points</font><font color="#CCCCCC"> is probably a lot</font>

690
00:30:54,630 --> 00:30:58,470
individual transactions<font color="#E5E5E5"> so the first</font>

691
00:30:56,730 --> 00:31:01,830
thing we<font color="#CCCCCC"> usually do is think</font><font color="#E5E5E5"> of how we</font>

692
00:30:58,470 --> 00:31:06,210
<font color="#E5E5E5">can bucket those so</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> we don't</font><font color="#CCCCCC"> have</font>

693
00:31:01,830 --> 00:31:08,310
37 million data points<font color="#E5E5E5"> we have a far</font>

694
00:31:06,210 --> 00:31:11,370
smaller number<font color="#E5E5E5"> that</font><font color="#CCCCCC"> are representative</font>

695
00:31:08,310 --> 00:31:17,280
<font color="#E5E5E5">of that 37 million so in pandas we call</font>

696
00:31:11,370 --> 00:31:21,120
this resampling so<font color="#E5E5E5"> I have created an a</font>

697
00:31:17,280 --> 00:31:24,210
data frame that just says the it's

698
00:31:21,120 --> 00:31:27,689
called<font color="#CCCCCC"> the exfil DF and it just says the</font>

699
00:31:24,210 --> 00:31:32,240
the index is the<font color="#E5E5E5"> data frame sorry the</font>

700
00:31:27,690 --> 00:31:35,190
index is the<font color="#E5E5E5"> timestamp</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> the value is</font>

701
00:31:32,240 --> 00:31:40,170
<font color="#E5E5E5">the bytes</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> just had to pick some column</font>

702
00:31:35,190 --> 00:31:43,290
you<font color="#E5E5E5"> know here's the value and now I want</font>

703
00:31:40,170 --> 00:31:45,840
to resample that<font color="#E5E5E5"> into I just picked</font>

704
00:31:43,290 --> 00:31:47,970
<font color="#CCCCCC">15-minute buckets because</font><font color="#E5E5E5"> it seemed like</font>

705
00:31:45,840 --> 00:31:50,939
that was<font color="#CCCCCC"> a pretty</font><font color="#E5E5E5"> good deal</font><font color="#CCCCCC"> we want to</font>

706
00:31:47,970 --> 00:31:52,200
look at daily patterns<font color="#E5E5E5"> so we picked</font>

707
00:31:50,940 --> 00:31:54,960
something<font color="#E5E5E5"> that's substantially smaller</font>

708
00:31:52,200 --> 00:31:56,790
than<font color="#E5E5E5"> a day but it's still reasonable so</font>

709
00:31:54,960 --> 00:31:58,890
you might if you have more data look<font color="#E5E5E5"> at</font>

710
00:31:56,790 --> 00:32:01,620
things weekly patterns or monthly

711
00:31:58,890 --> 00:32:04,260
patterns but I didn't have<font color="#CCCCCC"> that</font><font color="#E5E5E5"> much</font>

712
00:32:01,620 --> 00:32:07,379
data I only had<font color="#E5E5E5"> one one month or so</font><font color="#CCCCCC"> of</font>

713
00:32:04,260 --> 00:32:10,260
data<font color="#E5E5E5"> so I had enough to do daily</font>

714
00:32:07,380 --> 00:32:13,410
patterns<font color="#E5E5E5"> so I bucket it here say</font><font color="#CCCCCC"> I'm</font>

715
00:32:10,260 --> 00:32:15,570
gonna create this<font color="#CCCCCC"> exfil data frame I'm</font>

716
00:32:13,410 --> 00:32:17,750
gonna this new time series is the exfil

717
00:32:15,570 --> 00:32:20,970
data frame the<font color="#CCCCCC"> timestamp</font><font color="#E5E5E5"> and the bytes</font>

718
00:32:17,750 --> 00:32:23,040
from there and I'm gonna set the index

719
00:32:20,970 --> 00:32:26,250
to<font color="#CCCCCC"> be the</font><font color="#E5E5E5"> timestamp and now I have a</font>

720
00:32:23,040 --> 00:32:29,700
data frame where the<font color="#E5E5E5"> index is timestamps</font>

721
00:32:26,250 --> 00:32:31,620
<font color="#E5E5E5">and the values are bytes but now I don't</font>

722
00:32:29,700 --> 00:32:33,630
<font color="#E5E5E5">but now they're the rottens actions</font>

723
00:32:31,620 --> 00:32:37,709
individual transactions so I want<font color="#E5E5E5"> to say</font>

724
00:32:33,630 --> 00:32:40,080
<font color="#E5E5E5">I'm</font><font color="#CCCCCC"> gonna resample that to 15 units of</font>

725
00:32:37,710 --> 00:32:42,240
time minutes I don't not<font color="#E5E5E5"> sure why they</font>

726
00:32:40,080 --> 00:32:44,010
used<font color="#CCCCCC"> T for that</font><font color="#E5E5E5"> except probably you</font>

727
00:32:42,240 --> 00:32:45,600
could resample things<font color="#E5E5E5"> to months and then</font>

728
00:32:44,010 --> 00:32:48,690
it would<font color="#E5E5E5"> be two M's and it would be</font>

729
00:32:45,600 --> 00:32:51,659
confusing<font color="#E5E5E5"> so 15 t means</font><font color="#CCCCCC"> 15-minute time</font>

730
00:32:48,690 --> 00:32:53,250
buckets and the aggregation<font color="#CCCCCC"> that I want</font>

731
00:32:51,660 --> 00:32:55,170
to<font color="#E5E5E5"> apply is just the total number of</font>

732
00:32:53,250 --> 00:32:57,510
transactions that happened I'm<font color="#E5E5E5"> not</font>

733
00:32:55,170 --> 00:32:59,820
actually using<font color="#E5E5E5"> the byte value in this it</font>

734
00:32:57,510 --> 00:33:02,040
<font color="#E5E5E5">was just a convenient</font><font color="#CCCCCC"> way of creating</font>

735
00:32:59,820 --> 00:33:05,159
the individual transactions<font color="#E5E5E5"> I'm counting</font>

736
00:33:02,040 --> 00:33:06,730
the number<font color="#CCCCCC"> of transactions</font><font color="#E5E5E5"> that happened</font>

737
00:33:05,160 --> 00:33:09,009
in each 15 minutes

738
00:33:06,730 --> 00:33:10,869
and then the last one<font color="#CCCCCC"> dropped in a I'm</font>

739
00:33:09,009 --> 00:33:11,919
<font color="#E5E5E5">just getting rid</font><font color="#CCCCCC"> of any times any</font>

740
00:33:10,869 --> 00:33:13,539
buckets<font color="#CCCCCC"> that didn't have any</font>

741
00:33:11,919 --> 00:33:15,940
transactions in them like maybe

742
00:33:13,539 --> 00:33:17,769
overnight or something just<font color="#CCCCCC"> to</font><font color="#E5E5E5"> make this</font>

743
00:33:15,940 --> 00:33:21,070
small and then<font color="#E5E5E5"> you can see I'm looking</font>

744
00:33:17,769 --> 00:33:24,309
<font color="#E5E5E5">at the top</font><font color="#CCCCCC"> of it and</font><font color="#E5E5E5"> indeed I have time</font>

745
00:33:21,070 --> 00:33:26,109
stamps<font color="#CCCCCC"> that</font><font color="#E5E5E5"> are exactly 15 minutes</font><font color="#CCCCCC"> so</font>

746
00:33:24,309 --> 00:33:30,369
each of those stamps<font color="#E5E5E5"> is the beginning of</font>

747
00:33:26,109 --> 00:33:30,730
its bucket<font color="#E5E5E5"> and then I have values that's</font>

748
00:33:30,369 --> 00:33:33,249
<font color="#E5E5E5">easy</font>

749
00:33:30,730 --> 00:33:42,100
so now it<font color="#CCCCCC"> should be super easy to</font><font color="#E5E5E5"> find</font>

750
00:33:33,249 --> 00:33:46,330
the unusual spikes right<font color="#E5E5E5"> guesses</font><font color="#CCCCCC"> no this</font>

751
00:33:42,100 --> 00:33:48,580
is still super noisy there's like this

752
00:33:46,330 --> 00:33:50,320
downward thing so things at the

753
00:33:48,580 --> 00:33:51,908
<font color="#E5E5E5">beginning of the month apparently had a</font>

754
00:33:50,320 --> 00:33:53,710
higher transaction volume than the

755
00:33:51,909 --> 00:33:56,169
<font color="#E5E5E5">bottom of the month so you can't really</font>

756
00:33:53,710 --> 00:33:58,119
do an apples-to-apples comparison across

757
00:33:56,169 --> 00:34:00,009
<font color="#E5E5E5">all the days of the month</font>

758
00:33:58,119 --> 00:34:02,139
there's a lot there's a<font color="#E5E5E5"> substantial</font>

759
00:34:00,009 --> 00:34:03,850
<font color="#E5E5E5">amount of noise in there and it so it's</font>

760
00:34:02,139 --> 00:34:06,129
hard<font color="#CCCCCC"> to tell which of</font><font color="#E5E5E5"> those spikes are</font>

761
00:34:03,850 --> 00:34:07,869
expected which you're not<font color="#E5E5E5"> which are even</font>

762
00:34:06,129 --> 00:34:10,149
<font color="#CCCCCC">really spikes and</font><font color="#E5E5E5"> which are just noise</font>

763
00:34:07,869 --> 00:34:11,679
it's hard to see if you stare<font color="#CCCCCC"> at it for</font>

764
00:34:10,149 --> 00:34:14,739
a really<font color="#E5E5E5"> long</font><font color="#CCCCCC"> time you might be</font><font color="#E5E5E5"> able to</font>

765
00:34:11,679 --> 00:34:17,079
<font color="#E5E5E5">gain</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> little</font><font color="#CCCCCC"> bit of insight</font><font color="#E5E5E5"> but you</font>

766
00:34:14,739 --> 00:34:24,578
know I can't really tell that<font color="#CCCCCC"> much</font><font color="#E5E5E5"> about</font>

767
00:34:17,079 --> 00:34:27,329
<font color="#E5E5E5">it so in terms of time series analysis</font>

768
00:34:24,579 --> 00:34:31,510
the things that we're interested<font color="#CCCCCC"> in are</font>

769
00:34:27,329 --> 00:34:34,329
<font color="#E5E5E5">three things we want to take this raw</font>

770
00:34:31,510 --> 00:34:36,309
<font color="#CCCCCC">date and we think of the raw data being</font>

771
00:34:34,329 --> 00:34:39,159
<font color="#E5E5E5">composed of three different</font><font color="#CCCCCC"> parts</font><font color="#E5E5E5"> and</font>

772
00:34:36,309 --> 00:34:41,109
we're going to<font color="#E5E5E5"> decompose the raw that</font>

773
00:34:39,159 --> 00:34:41,799
observed data back<font color="#E5E5E5"> into those three</font>

774
00:34:41,109 --> 00:34:46,389
<font color="#E5E5E5">different parts</font>

775
00:34:41,799 --> 00:34:48,790
<font color="#CCCCCC">the first part is</font><font color="#E5E5E5"> the well the first one</font>

776
00:34:46,389 --> 00:34:51,129
on here<font color="#E5E5E5"> you see</font><font color="#CCCCCC"> i've called seasonal</font>

777
00:34:48,790 --> 00:34:52,899
<font color="#E5E5E5">decompose that's really all</font><font color="#CCCCCC"> i had to do</font>

778
00:34:51,129 --> 00:34:55,598
is call seasonal decompose on my time

779
00:34:52,899 --> 00:34:57,308
series<font color="#CCCCCC"> i told it</font><font color="#E5E5E5"> which model</font><font color="#CCCCCC"> I wanted</font>

780
00:34:55,599 --> 00:34:59,829
<font color="#E5E5E5">but I think that's technically</font><font color="#CCCCCC"> optional</font>

781
00:34:57,309 --> 00:35:02,079
and<font color="#E5E5E5"> I told it</font><font color="#CCCCCC"> the frequency so I</font>

782
00:34:59,829 --> 00:35:04,799
<font color="#E5E5E5">computed the</font><font color="#CCCCCC"> number of</font><font color="#E5E5E5"> minutes in a</font><font color="#CCCCCC"> day</font>

783
00:35:02,079 --> 00:35:07,869
<font color="#E5E5E5">but because we have</font><font color="#CCCCCC"> 15-minute buckets I</font>

784
00:35:04,799 --> 00:35:09,549
divided it<font color="#CCCCCC"> by 15 and that means</font><font color="#E5E5E5"> that</font>

785
00:35:07,869 --> 00:35:11,470
<font color="#E5E5E5">number of buckets I have in a day and</font>

786
00:35:09,549 --> 00:35:14,770
<font color="#E5E5E5">that's I've told it the patterns should</font>

787
00:35:11,470 --> 00:35:17,859
<font color="#E5E5E5">be this wide so I have 30 ish of those</font>

788
00:35:14,770 --> 00:35:19,630
<font color="#E5E5E5">in my</font><font color="#CCCCCC"> data</font><font color="#E5E5E5"> set and it goes and it</font>

789
00:35:17,859 --> 00:35:22,180
returns me<font color="#E5E5E5"> a value</font>

790
00:35:19,630 --> 00:35:24,670
<font color="#CCCCCC">a structure that has four things in it</font>

791
00:35:22,180 --> 00:35:25,210
the first thing is<font color="#CCCCCC"> just the observed</font>

792
00:35:24,670 --> 00:35:27,250
things

793
00:35:25,210 --> 00:35:29,650
it's a copy of exactly<font color="#E5E5E5"> what I passed in</font>

794
00:35:27,250 --> 00:35:30,519
all<font color="#E5E5E5"> right the second one here is the</font>

795
00:35:29,650 --> 00:35:33,849
<font color="#CCCCCC">trendline</font>

796
00:35:30,519 --> 00:35:40,839
I really wish this worked now<font color="#CCCCCC"> oh it does</font>

797
00:35:33,849 --> 00:35:47,769
I really wish I had a million<font color="#CCCCCC"> dollars</font><font color="#E5E5E5"> no</font>

798
00:35:40,839 --> 00:35:50,950
I blew my wish man<font color="#CCCCCC"> and the second thing</font>

799
00:35:47,769 --> 00:35:53,470
<font color="#E5E5E5">is this trend line and the trend line is</font>

800
00:35:50,950 --> 00:35:54,970
it's important because<font color="#E5E5E5"> later</font><font color="#CCCCCC"> on</font><font color="#E5E5E5"> if you</font>

801
00:35:53,470 --> 00:35:56,950
<font color="#E5E5E5">see the</font><font color="#CCCCCC"> original one it's kind of like</font>

802
00:35:54,970 --> 00:36:02,549
<font color="#E5E5E5">tilted like this but using the trend</font>

803
00:35:56,950 --> 00:36:04,868
line we're<font color="#E5E5E5"> gonna make it more straight</font>

804
00:36:02,549 --> 00:36:06,220
<font color="#E5E5E5">basically things which are exactly on</font>

805
00:36:04,869 --> 00:36:08,289
the trend line are going<font color="#CCCCCC"> to come</font><font color="#E5E5E5"> out at</font>

806
00:36:06,220 --> 00:36:09,819
the<font color="#E5E5E5"> zero line things that are a</font><font color="#CCCCCC"> little</font>

807
00:36:08,289 --> 00:36:11,319
<font color="#E5E5E5">bit above or a little bit below will</font>

808
00:36:09,819 --> 00:36:13,538
come out a little<font color="#E5E5E5"> bit</font><font color="#CCCCCC"> above or below</font>

809
00:36:11,319 --> 00:36:14,369
<font color="#CCCCCC">zero but</font><font color="#E5E5E5"> they'll be straight</font><font color="#CCCCCC"> so it'll be</font>

810
00:36:13,539 --> 00:36:18,220
easy

811
00:36:14,369 --> 00:36:20,500
the third thing here is the the

812
00:36:18,220 --> 00:36:22,779
<font color="#E5E5E5">seasonality the seasonal pattern that we</font>

813
00:36:20,500 --> 00:36:24,819
saw<font color="#E5E5E5"> per day it's it's hard to see that</font>

814
00:36:22,779 --> 00:36:26,529
all jumbled up but I<font color="#E5E5E5"> think you can</font>

815
00:36:24,819 --> 00:36:28,210
<font color="#E5E5E5">probably see that</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> looks like</font><font color="#CCCCCC"> a really</font>

816
00:36:26,529 --> 00:36:30,700
repeating pattern even<font color="#E5E5E5"> though</font><font color="#CCCCCC"> you can't</font>

817
00:36:28,210 --> 00:36:33,130
<font color="#CCCCCC">really tell</font><font color="#E5E5E5"> on that</font><font color="#CCCCCC"> small view what the</font>

818
00:36:30,700 --> 00:36:35,169
repeating pattern actually<font color="#E5E5E5"> is and the</font>

819
00:36:33,130 --> 00:36:38,259
the third<font color="#E5E5E5"> or the fourth thing here is</font>

820
00:36:35,170 --> 00:36:41,259
what<font color="#E5E5E5"> we</font><font color="#CCCCCC"> call</font><font color="#E5E5E5"> the residual it's the</font>

821
00:36:38,259 --> 00:36:44,339
observed values corrected for the<font color="#E5E5E5"> trend</font>

822
00:36:41,259 --> 00:36:46,390
and corrected for<font color="#E5E5E5"> the seasonal pattern</font>

823
00:36:44,339 --> 00:36:48,609
don't worry you<font color="#CCCCCC"> don't</font><font color="#E5E5E5"> have to read</font><font color="#CCCCCC"> it</font>

824
00:36:46,390 --> 00:36:51,250
off these tiny<font color="#E5E5E5"> things this basically is</font>

825
00:36:48,609 --> 00:36:55,750
<font color="#CCCCCC">just something that you print to</font><font color="#E5E5E5"> show</font>

826
00:36:51,250 --> 00:36:59,349
<font color="#E5E5E5">yourself</font><font color="#CCCCCC"> that it actually worked so</font>

827
00:36:55,750 --> 00:37:02,619
here's a plot in a little bit better

828
00:36:59,349 --> 00:37:05,410
detail<font color="#E5E5E5"> of one day of that repeating</font>

829
00:37:02,619 --> 00:37:07,660
pattern right<font color="#E5E5E5"> it's still pretty noisy</font>

830
00:37:05,410 --> 00:37:09,460
<font color="#E5E5E5">but doesn't matter because this is your</font>

831
00:37:07,660 --> 00:37:11,680
normal<font color="#CCCCCC"> pattern</font><font color="#E5E5E5"> and you don't really have</font>

832
00:37:09,460 --> 00:37:15,869
<font color="#CCCCCC">to know what all those spikes</font><font color="#E5E5E5"> and dips</font>

833
00:37:11,680 --> 00:37:18,339
and things<font color="#CCCCCC"> actually really are</font><font color="#E5E5E5"> are for</font>

834
00:37:15,869 --> 00:37:21,069
<font color="#E5E5E5">they're just they</font><font color="#CCCCCC"> just occur on a</font>

835
00:37:18,339 --> 00:37:24,339
regular<font color="#E5E5E5"> basis throughout the throughout</font>

836
00:37:21,069 --> 00:37:26,769
the data set on each<font color="#E5E5E5"> day and yeah</font>

837
00:37:24,339 --> 00:37:29,619
there's some spikes<font color="#E5E5E5"> that occur</font><font color="#CCCCCC"> these</font>

838
00:37:26,769 --> 00:37:33,040
<font color="#E5E5E5">actually</font><font color="#CCCCCC"> go</font><font color="#E5E5E5"> through like I think it's</font>

839
00:37:29,619 --> 00:37:35,740
like<font color="#CCCCCC"> 1:00 p.m.</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> 11:00 p.m.</font>

840
00:37:33,040 --> 00:37:38,830
or something like<font color="#CCCCCC"> that this spike and</font>

841
00:37:35,740 --> 00:37:40,959
this spike<font color="#CCCCCC"> are the exact same one so</font>

842
00:37:38,830 --> 00:37:46,480
<font color="#E5E5E5">that's actually where the you know 24</font>

843
00:37:40,960 --> 00:37:48,280
hours<font color="#E5E5E5"> so it's fairly noisy but the cool</font>

844
00:37:46,480 --> 00:37:50,290
<font color="#CCCCCC">thing is</font><font color="#E5E5E5"> that now you've identified it</font>

845
00:37:48,280 --> 00:37:56,290
<font color="#E5E5E5">you don't really have to know</font><font color="#CCCCCC"> it what</font>

846
00:37:50,290 --> 00:37:59,170
this<font color="#E5E5E5"> all means so here I'm just plotting</font>

847
00:37:56,290 --> 00:38:02,140
the residual data this is<font color="#E5E5E5"> the corrected</font>

848
00:37:59,170 --> 00:38:05,110
data<font color="#CCCCCC"> and you</font><font color="#E5E5E5"> get super nice you can say</font>

849
00:38:02,140 --> 00:38:07,779
hey<font color="#E5E5E5"> at the beginning of the month</font><font color="#CCCCCC"> at the</font>

850
00:38:05,110 --> 00:38:10,510
<font color="#E5E5E5">end of the month the trend lines have</font>

851
00:38:07,780 --> 00:38:14,110
been corrected<font color="#E5E5E5"> I've ever taken out the</font>

852
00:38:10,510 --> 00:38:16,660
seasonal or the<font color="#E5E5E5"> daily I should say the</font>

853
00:38:14,110 --> 00:38:19,570
seasonality<font color="#E5E5E5"> the daily fluctuations and</font>

854
00:38:16,660 --> 00:38:22,480
and now it just<font color="#CCCCCC"> becomes a matter if I</font>

855
00:38:19,570 --> 00:38:24,490
pick what I want<font color="#CCCCCC"> my threshold</font><font color="#E5E5E5"> to be and</font>

856
00:38:22,480 --> 00:38:28,590
I draw a<font color="#E5E5E5"> line straight across the graph</font>

857
00:38:24,490 --> 00:38:31,089
<font color="#E5E5E5">and any spike that it intersects with</font>

858
00:38:28,590 --> 00:38:32,890
well that's my that threshold<font color="#E5E5E5"> is my</font>

859
00:38:31,090 --> 00:38:35,680
unusual threshold so anything<font color="#CCCCCC"> it</font>

860
00:38:32,890 --> 00:38:41,259
intersects with I'm considering unusual

861
00:38:35,680 --> 00:38:43,270
<font color="#E5E5E5">and if I say it's around 500 or 600 you</font>

862
00:38:41,260 --> 00:38:44,770
know I'm gonna<font color="#E5E5E5"> get one</font><font color="#CCCCCC"> too this</font><font color="#E5E5E5"> is</font>

863
00:38:43,270 --> 00:38:48,370
<font color="#E5E5E5">actually to really close</font><font color="#CCCCCC"> together so</font>

864
00:38:44,770 --> 00:38:50,380
<font color="#CCCCCC">four</font><font color="#E5E5E5"> five maybe five unusual spikes</font><font color="#CCCCCC"> I</font>

865
00:38:48,370 --> 00:38:51,880
know the whole thing<font color="#E5E5E5"> that doesn't mean</font>

866
00:38:50,380 --> 00:38:54,010
they're<font color="#E5E5E5"> all bad</font><font color="#CCCCCC"> just means they're</font>

867
00:38:51,880 --> 00:38:57,220
unusual<font color="#E5E5E5"> they're pretty large they</font>

868
00:38:54,010 --> 00:39:00,970
wouldn't normally<font color="#E5E5E5"> be explained by the</font>

869
00:38:57,220 --> 00:39:02,859
normal daily activity right and there

870
00:39:00,970 --> 00:39:04,839
may be other tests<font color="#CCCCCC"> that you could apply</font>

871
00:39:02,860 --> 00:39:08,860
to this to kind<font color="#CCCCCC"> of narrow those down</font><font color="#E5E5E5"> but</font>

872
00:39:04,840 --> 00:39:11,560
<font color="#E5E5E5">that's the basics of the</font><font color="#CCCCCC"> time series</font>

873
00:39:08,860 --> 00:39:13,000
<font color="#E5E5E5">analysis correcting for the trend and</font>

874
00:39:11,560 --> 00:39:15,430
<font color="#E5E5E5">the seasonality said that you can</font>

875
00:39:13,000 --> 00:39:17,200
actually<font color="#CCCCCC"> more easily</font><font color="#E5E5E5"> find which ones</font>

876
00:39:15,430 --> 00:39:19,029
have<font color="#E5E5E5"> this</font><font color="#CCCCCC"> unusual spikes that you might</font>

877
00:39:17,200 --> 00:39:21,100
care<font color="#E5E5E5"> about versus which ones are the</font>

878
00:39:19,030 --> 00:39:24,160
spikes<font color="#CCCCCC"> that</font><font color="#E5E5E5"> you'd normally expect</font><font color="#CCCCCC"> and</font>

879
00:39:21,100 --> 00:39:24,990
this is pretty much<font color="#E5E5E5"> the</font><font color="#CCCCCC"> end</font><font color="#E5E5E5"> of my</font>

880
00:39:24,160 --> 00:39:30,040
presentation

881
00:39:24,990 --> 00:39:34,000
<font color="#CCCCCC">everything that I've used</font><font color="#E5E5E5"> is on here so</font>

882
00:39:30,040 --> 00:39:36,070
we have<font color="#E5E5E5"> Python</font><font color="#CCCCCC"> of course</font><font color="#E5E5E5"> and the project</font>

883
00:39:34,000 --> 00:39:39,370
Jupiter<font color="#E5E5E5"> the Jupiter notebook or the</font>

884
00:39:36,070 --> 00:39:41,560
Jupiter lab<font color="#E5E5E5"> a really great web-based</font>

885
00:39:39,370 --> 00:39:44,380
interactive Python<font color="#CCCCCC"> environment that you</font>

886
00:39:41,560 --> 00:39:46,749
<font color="#CCCCCC">can bring in these emerges the Python</font>

887
00:39:44,380 --> 00:39:48,880
code the plots the

888
00:39:46,749 --> 00:39:50,649
any other images or media that you have

889
00:39:48,880 --> 00:39:52,599
and puts it all together<font color="#E5E5E5"> in</font><font color="#CCCCCC"> one document</font>

890
00:39:50,650 --> 00:39:54,429
<font color="#CCCCCC">so you</font><font color="#E5E5E5"> can</font><font color="#CCCCCC"> keep track</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> what you did</font>

891
00:39:52,599 --> 00:39:58,390
<font color="#CCCCCC">why you did it</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> can do it again</font>

892
00:39:54,429 --> 00:40:00,519
easily<font color="#E5E5E5"> later also</font><font color="#CCCCCC"> Neffe and</font><font color="#E5E5E5"> pandas you</font>

893
00:39:58,390 --> 00:40:02,469
can download from<font color="#E5E5E5"> there</font><font color="#CCCCCC"> I didn't really</font>

894
00:40:00,519 --> 00:40:04,839
talk<font color="#E5E5E5"> a lot</font><font color="#CCCCCC"> about this this is kind</font><font color="#E5E5E5"> of</font>

895
00:40:02,469 --> 00:40:05,859
the<font color="#E5E5E5"> Express version</font><font color="#CCCCCC"> of this talk that</font>

896
00:40:04,839 --> 00:40:07,839
was a<font color="#E5E5E5"> little bit longer</font>

897
00:40:05,859 --> 00:40:10,239
<font color="#E5E5E5">I dropped a few slides</font><font color="#CCCCCC"> to make it fit in</font>

898
00:40:07,839 --> 00:40:13,739
<font color="#CCCCCC">the time but the visualizations</font><font color="#E5E5E5"> that I</font>

899
00:40:10,239 --> 00:40:16,179
did were created with a<font color="#E5E5E5"> third-party</font>

900
00:40:13,739 --> 00:40:21,459
<font color="#CCCCCC">visualization package called plotly and</font>

901
00:40:16,179 --> 00:40:25,239
a package that<font color="#E5E5E5"> binds them to the pandas</font>

902
00:40:21,459 --> 00:40:28,479
dataframes<font color="#CCCCCC"> in</font><font color="#E5E5E5"> series called cufflinks</font><font color="#CCCCCC"> so</font>

903
00:40:25,239 --> 00:40:29,890
if you<font color="#CCCCCC"> actually</font><font color="#E5E5E5"> want to reproduce the</font>

904
00:40:28,479 --> 00:40:32,109
<font color="#CCCCCC">graphs</font><font color="#E5E5E5"> you would use</font><font color="#CCCCCC"> plot layin</font>

905
00:40:29,890 --> 00:40:33,459
cufflinks<font color="#CCCCCC"> and then hunt</font><font color="#E5E5E5"> lib I talked</font>

906
00:40:32,109 --> 00:40:35,828
about earlier<font color="#E5E5E5"> that's the thing that I</font>

907
00:40:33,459 --> 00:40:38,799
wrote that<font color="#E5E5E5"> that target open sourced and</font>

908
00:40:35,829 --> 00:40:40,989
stats models for the seasonal

909
00:40:38,799 --> 00:40:43,089
decomposition now<font color="#E5E5E5"> that's a lot</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> tools</font>

910
00:40:40,989 --> 00:40:45,969
right<font color="#CCCCCC"> and you could</font><font color="#E5E5E5"> get them and install</font>

911
00:40:43,089 --> 00:40:49,239
them no problem<font color="#CCCCCC"> but there</font><font color="#E5E5E5"> might be an</font>

912
00:40:45,969 --> 00:40:50,709
easier<font color="#CCCCCC"> way the</font><font color="#E5E5E5"> the last thing here the</font>

913
00:40:49,239 --> 00:40:53,650
threat hunting project of which I'm the

914
00:40:50,709 --> 00:41:00,569
<font color="#E5E5E5">principal and probably realistically</font><font color="#CCCCCC"> the</font>

915
00:40:53,650 --> 00:41:04,689
<font color="#CCCCCC">only person I should</font><font color="#E5E5E5"> just say</font><font color="#CCCCCC"> I I</font>

916
00:41:00,569 --> 00:41:06,249
created a docker image with all<font color="#E5E5E5"> these</font>

917
00:41:04,689 --> 00:41:07,928
<font color="#E5E5E5">things in it</font><font color="#CCCCCC"> and that docker image is</font>

918
00:41:06,249 --> 00:41:10,328
actually<font color="#CCCCCC"> what I use day-to-day when I'm</font>

919
00:41:07,929 --> 00:41:12,670
doing my<font color="#E5E5E5"> data analysis so the tools that</font>

920
00:41:10,329 --> 00:41:14,979
<font color="#E5E5E5">I'm</font><font color="#CCCCCC"> using the exact copies of that tools</font>

921
00:41:12,670 --> 00:41:18,279
all available<font color="#E5E5E5"> to anyone</font><font color="#CCCCCC"> who just</font><font color="#E5E5E5"> wants</font>

922
00:41:14,979 --> 00:41:21,999
<font color="#CCCCCC">to</font><font color="#E5E5E5"> do</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> docker pull and you can find</font>

923
00:41:18,279 --> 00:41:23,859
that<font color="#E5E5E5"> here at this URL there's a little</font>

924
00:41:21,999 --> 00:41:26,348
bit about that<font color="#E5E5E5"> and pointers to it on</font>

925
00:41:23,859 --> 00:41:27,640
both the docker hub and the build

926
00:41:26,349 --> 00:41:32,529
<font color="#CCCCCC">environment for it if you want to</font><font color="#E5E5E5"> build</font>

927
00:41:27,640 --> 00:41:34,868
your<font color="#CCCCCC"> own</font><font color="#E5E5E5"> copy on github that's pretty</font>

928
00:41:32,529 --> 00:41:37,089
much it<font color="#CCCCCC"> I will just</font><font color="#E5E5E5"> say that the copies</font>

929
00:41:34,869 --> 00:41:38,319
<font color="#E5E5E5">of my slides I've already posted</font><font color="#CCCCCC"> I'd</font>

930
00:41:37,089 --> 00:41:40,749
meant to say that<font color="#CCCCCC"> at the</font><font color="#E5E5E5"> beginning of</font>

931
00:41:38,319 --> 00:41:42,308
the talk probably<font color="#CCCCCC"> a bit</font><font color="#E5E5E5"> more helpful but</font>

932
00:41:40,749 --> 00:41:44,618
if<font color="#E5E5E5"> you want to if you want</font><font color="#CCCCCC"> the link</font><font color="#E5E5E5"> for</font>

933
00:41:42,309 --> 00:41:48,939
them<font color="#CCCCCC"> they're on my Twitter account here</font>

934
00:41:44,619 --> 00:41:55,269
david at david<font color="#CCCCCC"> j</font><font color="#E5E5E5"> Bianco</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> with that as</font>

935
00:41:48,939 --> 00:41:56,910
anybody still awake for questions no the

936
00:41:55,269 --> 00:42:00,609
answer<font color="#E5E5E5"> is No</font>

937
00:41:56,910 --> 00:42:02,920
<font color="#E5E5E5">all right well I'll be here and I'll</font><font color="#CCCCCC"> be</font>

938
00:42:00,610 --> 00:42:06,100
<font color="#CCCCCC">it</font><font color="#E5E5E5"> besides tomorrow for a little while</font>

939
00:42:02,920 --> 00:42:08,010
so if you have any questions let<font color="#CCCCCC"> pick me</font>

940
00:42:06,100 --> 00:42:13,249
up otherwise<font color="#CCCCCC"> thank you</font><font color="#E5E5E5"> very much</font>

941
00:42:08,010 --> 00:42:13,249
[Applause]

