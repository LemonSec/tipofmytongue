1
00:00:00,000 --> 00:00:14,200
lower-body you and your name is Brandon
Wilson I'm going to be talking about

2
00:00:14,200 --> 00:00:21,990
intercepting and or manipulating USB
traffic for both good and evil show of

3
00:00:21,990 --> 00:00:31,090
hands here for the evil part 04 the good
part where thinks by evil I meant attack

4
00:00:31,090 --> 00:00:43,690
and defense so we know is who I wasn't
mad rush to many slides and I'm a

5
00:00:43,690 --> 00:00:47,140
terrible public speaker so pretty much
been reading the slides are about that

6
00:00:47,140 --> 00:00:56,149
we're going through it right so to talk
about USB first have to know what that

7
00:00:56,149 --> 00:01:00,190
communication looks like who here is a
written code that interacts with the USB

8
00:01:00,190 --> 00:01:05,220
prefer or pretends to be one like the
BSP Linux USB gadget drivers Argentina's

9
00:01:05,220 --> 00:01:12,580
PCs keyboards gamepads couple of you
guys you probably already know about to

10
00:01:12,580 --> 00:01:19,430
go over the crash course on USB at the
top of the USB chain is the USB host

11
00:01:19,430 --> 00:01:23,110
controller which is capable of talking
to you up 227 different devices each

12
00:01:23,110 --> 00:01:27,090
having a unique address assigned to it
by the house and all traffic is

13
00:01:27,090 --> 00:01:30,780
broadcast from the hosts to all the
devices downstream and each device is

14
00:01:30,780 --> 00:01:36,310
trusted only to only communicate on the
address given to it by itself and note

15
00:01:36,310 --> 00:01:42,970
that does count has 127 devices as I
said each device has a unique address

16
00:01:42,970 --> 00:01:48,020
and is capable of communication up to 16
different channels or in points and he's

17
00:01:48,020 --> 00:01:51,670
in point seven number of features
associated with them you know a number

18
00:01:51,670 --> 00:01:53,590
like a unique number that identifies it

19
00:01:53,590 --> 00:01:59,060
directions so either incoming or
outgoing bonobos and a type and that

20
00:01:59,060 --> 00:02:03,219
type can either be controlled both
interrupter isochronous I kinda like

21
00:02:03,219 --> 00:02:07,549
john wants actually are bidirectional
they're not only required they are there

22
00:02:07,549 --> 00:02:12,010
are also required and every device must
have one and only one since that's what

23
00:02:12,010 --> 00:02:15,459
all standard USB requests go home like
setting the device address sending

24
00:02:15,459 --> 00:02:21,050
device features balkan points are used
to transmit large person information and

25
00:02:21,050 --> 00:02:25,800
they have the lowest priority on the bus
and interrupting points are low latency

26
00:02:25,800 --> 00:02:29,750
so their highest priority on the bus and
they're used to transmit small chunks of

27
00:02:29,750 --> 00:02:35,840
data like keyboard and isochronous
that's how I see it and points are used

28
00:02:35,840 --> 00:02:39,250
to transmit large amounts of data as
well but unlike the other implant types

29
00:02:39,250 --> 00:02:42,819
there is no we're checking involved so
they are from anyone to transmit data as

30
00:02:42,819 --> 00:02:46,470
fast as possible even if some of it as a
corrupted on the other end like with

31
00:02:46,470 --> 00:02:52,470
headset audio and it may surprise you to
know that the host is responsible for

32
00:02:52,470 --> 00:02:56,720
all transfers even the incoming ones so
the device wants to send data to the

33
00:02:56,720 --> 00:03:00,330
host has to buffer the request and wait
for the host asked for it if it ever

34
00:03:00,330 --> 00:03:03,760
does so when I say interesting points
have the highest birdie on the bus that

35
00:03:03,760 --> 00:03:10,550
means it gets pulled more often and
before all the others by the host so

36
00:03:10,550 --> 00:03:12,810
whatever you plug in USB device

37
00:03:12,810 --> 00:03:17,190
well the first to host or connect all of
which are you planning to detect a new

38
00:03:17,190 --> 00:03:21,760
device has been connected to our hosting
and it was power to that device and its

39
00:03:21,760 --> 00:03:26,819
location driver and then that device is
expected to start at the default address

40
00:03:26,819 --> 00:03:31,580
400 and since the hostess tonight will
power to the party believes that can

41
00:03:31,580 --> 00:03:35,330
communicate with the with the device on
a dress assuming nothing else be honest

42
00:03:35,330 --> 00:03:39,280
here anymore and so it allocates a new
address until the device

43
00:03:39,280 --> 00:03:45,739
addresses 12 and the host then assumes
that further indication what happened on

44
00:03:45,739 --> 00:03:49,709
that new address and requests and Vice
descriptor on that required control in

45
00:03:49,709 --> 00:03:54,689
point and then descriptor descriptor
contains information about all the

46
00:03:54,689 --> 00:04:00,710
devices interfaces and end points for
each one and at that point the host game

47
00:04:00,710 --> 00:04:03,790
low drivers for each interface which
contain the logic for knowing what

48
00:04:03,790 --> 00:04:10,770
devices what influence it has and so on
so communication can start having said

49
00:04:10,770 --> 00:04:16,650
all that what is this bad USB thing
about what's it's just the device lying

50
00:04:16,650 --> 00:04:21,200
to the host about what it really is so
you know it's about reprogramming a USB

51
00:04:21,200 --> 00:04:25,440
device firmware to behave differently
than originally intended and you know

52
00:04:25,440 --> 00:04:28,460
it's hardly an exploit or anything it's
just changing the interface and in

53
00:04:28,460 --> 00:04:34,860
points and so on the device claims that
it has and what traffic it sends in that

54
00:04:34,860 --> 00:04:38,730
specific case where the term values we
came from its about reprogramming the

55
00:04:38,730 --> 00:04:43,160
firmware stored on a USB flash drive
people didn't realize this but a flash

56
00:04:43,160 --> 00:04:48,980
drive is kind of a little minicomputer
it has a CPU RAM some code a bit off and

57
00:04:48,980 --> 00:04:53,350
most importantly additional circuitry
for communicating over USB and the NAND

58
00:04:53,350 --> 00:04:58,260
flash memory that's inside that drive so
when a PC request data from the drive

59
00:04:58,260 --> 00:05:01,590
the drive goes through a lot of
complicated steps to find the physical

60
00:05:01,590 --> 00:05:06,330
location of the data on an ship before
returning it back to the PC and actually

61
00:05:06,330 --> 00:05:10,030
since it's complicated their firmware
updates for it to become necessary from

62
00:05:10,030 --> 00:05:14,820
time to time has named a USB controller
bugs are identified and fix in the big

63
00:05:14,820 --> 00:05:17,610
problem here is that these firmware
updater typically not cryptography

64
00:05:17,610 --> 00:05:21,480
signed so we are free to change them to
do whatever we want flashback to the

65
00:05:21,480 --> 00:05:26,660
device and then we own it so for example
instead of a flash drive firmware

66
00:05:26,660 --> 00:05:29,450
choosing to expose a mass storage
interface which is what we normally do

67
00:05:29,450 --> 00:05:33,260
that instead exposes a keyboard
interface with an incoming interrupt him

68
00:05:33,260 --> 00:05:34,350
.

69
00:05:34,350 --> 00:05:41,710
types out some malicious scripts quickly
as I can for the user doesn't happen the

70
00:05:41,710 --> 00:05:47,420
problem could be even worse than that
what if the device starts violating the

71
00:05:47,420 --> 00:05:51,100
USB specification in strange and
unexpected ways so I can imagine if it

72
00:05:51,100 --> 00:05:54,690
suddenly no cheese don't address and
started listening to traffic didn't

73
00:05:54,690 --> 00:06:01,350
belong to it or smooth traffic as though
it came from another testifies so for

74
00:06:01,350 --> 00:06:05,330
example way back in 2010 the first
exploit for unsigned code execution on

75
00:06:05,330 --> 00:06:07,110
the PlayStation 3 came out

76
00:06:07,110 --> 00:06:12,040
and that relies vs jailbreak and that
rely on a memory allocation issue when

77
00:06:12,040 --> 00:06:15,700
connecting and disconnecting many
devices on an attached USB hub in rapid

78
00:06:15,700 --> 00:06:20,330
succession so after that cell phones USB
development boards to a graphing

79
00:06:20,330 --> 00:06:23,840
calculators everything with the USB
controller that allowed changing its own

80
00:06:23,840 --> 00:06:28,050
device address the trigger that
explained by pretending to be a and then

81
00:06:28,050 --> 00:06:31,730
virtually attaching devices by claiming
new devices are attached and then

82
00:06:31,730 --> 00:06:35,960
switching to address 02 briefly pretend
to be that Tobias before going back to

83
00:06:35,960 --> 00:06:38,570
the home address and then virtually
attaching another one and another and

84
00:06:38,570 --> 00:06:45,010
another another the the latest chrome
cast route called hubcap and it isn't

85
00:06:45,010 --> 00:06:50,320
very similar to this message of the
device address so matter what we do or

86
00:06:50,320 --> 00:06:57,770
don't do it it's simply too dangerous to
leave it at the bus so what are what are

87
00:06:57,770 --> 00:06:59,900
our defenses against this kind of thing

88
00:06:59,900 --> 00:07:06,020
well we can disconnect two of the four
USB lines the team responsible for data

89
00:07:06,020 --> 00:07:11,400
transfer data plus and minus like what
the so-called USB condom does but when

90
00:07:11,400 --> 00:07:16,570
you do that you can communicate with
devices only power so that's kind you

91
00:07:16,570 --> 00:07:20,710
could use a cheap Linux port like to be
gone black something that can both

92
00:07:20,710 --> 00:07:26,200
simulated and has a USB Host Controller
for attaching other devices so we could

93
00:07:26,200 --> 00:07:29,930
simulate the USB peripheral and only
relay the communication we expect

94
00:07:29,930 --> 00:07:35,390
between the host and so you know if you
want a flash drive in his only start

95
00:07:35,390 --> 00:07:38,590
sending me keyboard key presses I'm just
gonna ignore it and not let that make

96
00:07:38,590 --> 00:07:44,040
its way back to the PC the problem with
that is Linux is a complex OS with

97
00:07:44,040 --> 00:07:48,160
limited low-level access just like the
hosts so it can be compromised as well

98
00:07:48,160 --> 00:07:52,960
arguably just as easily as you know PC

99
00:07:52,960 --> 00:07:59,169
so I see discussion out there making a
totally custom board with code that only

100
00:07:59,169 --> 00:08:03,509
delays the traffic it understands and
expects which is actually not a bad idea

101
00:08:03,509 --> 00:08:08,660
but that requires manufacturing custom
PCB soldering component yourself or

102
00:08:08,660 --> 00:08:11,569
waiting on someone else to assemble it
for you which people don't necessarily

103
00:08:11,569 --> 00:08:20,490
want to do so I came up with a solution
to this problem is called vicar which

104
00:08:20,490 --> 00:08:23,960
consists of an Arduino compatible board
hand the USPTO shield for Arduino

105
00:08:23,960 --> 00:08:30,539
Arduino before they may look familiar to
you it's used all over the place and

106
00:08:30,539 --> 00:08:33,459
Arduino board needs to communicate with
the USB peripherals like a Bluetooth

107
00:08:33,459 --> 00:08:40,839
adapter flash drive it contains a
maximum max 3421 E USB controller chip

108
00:08:40,839 --> 00:08:45,950
for communicating with any any USB
performance may not trust so instead of

109
00:08:45,950 --> 00:08:49,130
your PC having to talk to the
untrustworthy device directly it can

110
00:08:49,130 --> 00:08:51,130
tell the Arduino to do everything on
your behalf

111
00:08:51,130 --> 00:08:57,630
isolate you from anything tricky the
device might try to do it is possible by

112
00:08:57,630 --> 00:09:00,880
the show without that with the headers
actually already installed so you could

113
00:09:00,880 --> 00:09:11,600
simply slap it on to an Arduino and done
that's not your thing figured out / 2010

114
00:09:11,600 --> 00:09:16,300
exposes an API to the post that allows
low-level control of anything attached

115
00:09:16,300 --> 00:09:21,060
to the USB O'Shields USB port so
essentially you are becoming a USB Host

116
00:09:21,060 --> 00:09:25,510
Controller driver instead of having just
the one that means it's up to you to

117
00:09:25,510 --> 00:09:29,950
handle innovations detecting a new
device they're making up a new 90

118
00:09:29,950 --> 00:09:33,870
address for its and in the Senators
control requires to let the device known

119
00:09:33,870 --> 00:09:35,459
as switching the address communicating
on

120
00:09:35,459 --> 00:09:41,269
that might some kind of tedious and it
is but it gives you the ability to

121
00:09:41,269 --> 00:09:44,459
handle weird scenarios such as a
peripheral suddenly switching to another

122
00:09:44,459 --> 00:09:48,490
address without your say so and also
gives you the ability to handle multiple

123
00:09:48,490 --> 00:09:52,519
devices so you know if you plug into the
USB Host Shield and it also becomes your

124
00:09:52,519 --> 00:09:56,689
responsibility if you choose to respond
to any new device connected on poor

125
00:09:56,689 --> 00:10:00,420
events from so it's not limited to a
single device you can do anything you

126
00:10:00,420 --> 00:10:11,300
want to or USB through the same plug it
in it defaults to human interface device

127
00:10:11,300 --> 00:10:15,369
your head and since there is a class
tomorrow s you don't need to install

128
00:10:15,369 --> 00:10:22,119
drivers automatically get what to do
with it goes to this interface by

129
00:10:22,119 --> 00:10:25,720
default because that's the safest when
you began to still be able to talk to

130
00:10:25,720 --> 00:10:28,490
matter what restrictions might be in
effect on the computer you plug in this

131
00:10:28,490 --> 00:10:32,970
into fortunately however it is not that
great for something variable-length

132
00:10:32,970 --> 00:10:36,649
command back its only sending a text
data report each time because it's

133
00:10:36,649 --> 00:10:41,059
tended to send back structured report
data leaky purses so in this mode I

134
00:10:41,059 --> 00:10:46,459
enable all packets email packets 228
bites which can be slowed

135
00:10:46,459 --> 00:10:54,160
commanded to do some things so that
brings us to the second option custom

136
00:10:54,160 --> 00:10:58,629
vendor defined interface which would
allow us anything we want normally you

137
00:10:58,629 --> 00:11:01,459
would need to supply driver to
communicate with an interface like this

138
00:11:01,459 --> 00:11:06,149
especially windows but the lakers coach
supports Microsoft when USB OS two

139
00:11:06,149 --> 00:11:10,720
scriptures which essentially means 127
up automatically detected detected

140
00:11:10,720 --> 00:11:15,809
install when USB device driver for that
interface and nine other OS is going to

141
00:11:15,809 --> 00:11:27,829
be much something so first thing to
mention a scenario where you're in a

142
00:11:27,829 --> 00:11:32,290
lockdown Windows environment where your
prevented from me what amounts to a

143
00:11:32,290 --> 00:11:33,630
storage devices

144
00:11:33,630 --> 00:11:39,410
so that's what kind of device can be
well since we have to be able to get to

145
00:11:39,410 --> 00:11:42,770
go to type obviously we know we can
still connect USB human interface

146
00:11:42,770 --> 00:11:48,530
devices and keyboard which means
theoretically Vickers well even without

147
00:11:48,530 --> 00:11:50,480
a minister to do it

148
00:11:50,480 --> 00:11:54,630
face so since we can communicate with
that means we can also communicate with

149
00:11:54,630 --> 00:11:59,100
any device you plug into the USB Host
Shield like flash drive so we can write

150
00:11:59,100 --> 00:12:03,120
some code on the PC to issue mass
storage read sector and write sector

151
00:12:03,120 --> 00:12:06,610
commands to the device and will be able
to read or write any data that we won't

152
00:12:06,610 --> 00:12:13,650
and that's great and all but make it
useful we need some way to get the

153
00:12:13,650 --> 00:12:17,900
actual files not just the sectors of
what sectors and that's where the dotnet

154
00:12:17,900 --> 00:12:22,030
disc utils library comes in and that
library has support for reading and

155
00:12:22,030 --> 00:12:26,200
manipulating disk images in a lot of
different formats including you to NTFS

156
00:12:26,200 --> 00:12:33,300
so by creating a design and
implementation of that victory and

157
00:12:33,300 --> 00:12:37,000
combining it with a digital library we
can put together a simple shell for

158
00:12:37,000 --> 00:12:41,150
browsing directory contents and reading
files from writing files to a USB flash

159
00:12:41,150 --> 00:13:10,080
drive without the ability to actually
use and so I will try to show that

160
00:13:10,080 --> 00:13:46,700
I'm not okay so that I wrote for
communicating with that Victor device

161
00:13:46,700 --> 00:13:51,370
supports both the interface and the
customer base and so it looks for both

162
00:13:51,370 --> 00:13:54,940
so when he first saw it when you first
start this it looks for either one it

163
00:13:54,940 --> 00:13:59,270
found the headline it detected it is
waiting for a device to be attached and

164
00:13:59,270 --> 00:14:04,700
here's the device other way I don't
argue that easy to point out device

165
00:14:04,700 --> 00:14:11,870
teeny tiny version of the hotel has got
a five star like that so it detects it

166
00:14:11,870 --> 00:14:17,020
wait for it to become too attached it is
attached and then started sending mass

167
00:14:17,020 --> 00:14:22,010
storage commands so now we're at that
show was talking about so we can look at

168
00:14:22,010 --> 00:14:26,310
the files on there you can see there's
one director in one file and if you get

169
00:14:26,310 --> 00:14:41,760
it actually means we get out of this
turn on verbose and say that yes so

170
00:14:41,760 --> 00:14:46,250
those are all master is going to be
going across this is what this is what's

171
00:14:46,250 --> 00:14:49,780
actually going across the wire so
because reason the interface there's has

172
00:14:49,780 --> 00:14:54,070
to transfer damaged data while it once
so you're seeing a lot more than you

173
00:14:54,070 --> 00:14:58,280
normally would be launched as heroes but
those are the commands of going back and

174
00:14:58,280 --> 00:15:20,560
forth so

175
00:15:20,560 --> 00:15:45,500
directory and you can also go the other
way you can write files there right

176
00:15:45,500 --> 00:15:56,790
cause there's another text file have now
it doesn't actually sent the commands to

177
00:15:56,790 --> 00:16:03,400
the to the device and I told you so as a
flesh wound up in here so flush it will

178
00:16:03,400 --> 00:16:07,100
actually write the sectors to the to the
device cannot read his mounting a

179
00:16:07,100 --> 00:16:23,180
readonly their home if you wanna
persisted in the flesh plug in the drive

180
00:16:23,180 --> 00:16:39,120
directly eventually

181
00:16:39,120 --> 00:16:54,660
Toronto's just right so that's great but
I don't have to read implement the

182
00:16:54,660 --> 00:16:57,700
entire mass storage protocol and the
code to handle the file system stored on

183
00:16:57,700 --> 00:17:02,320
there it would be nice if we could get
the host OS two handle for us so for

184
00:17:02,320 --> 00:17:06,689
specific scenarios such as mass storage
devices there is an option we can make

185
00:17:06,689 --> 00:17:10,490
their to expose an additional mass
storage innovation interface and pushing

186
00:17:10,490 --> 00:17:14,130
him a storage traffic from the device
straight to that interface that way the

187
00:17:14,130 --> 00:17:18,010
PC just sees me the drive and you can do
all the work for us he could say I've

188
00:17:18,010 --> 00:17:27,030
got to interface is there a keyboard one
in a mass storage interfaces that the PC

189
00:17:27,030 --> 00:17:31,720
wants to use us for the first time and
you don't actually do anything until you

190
00:17:31,720 --> 00:17:35,260
tell Victor to start forwarding traffic
between the attached prefer and host OS

191
00:17:35,260 --> 00:17:39,380
so the keyboard interface doesn't send
any key presses and mastered interface

192
00:17:39,380 --> 00:17:44,190
claims no media is certain but once once
you do send the command star-forming

193
00:17:44,190 --> 00:17:49,179
data and PC will suddenly begin
receiving the real master's commands

194
00:17:49,179 --> 00:17:54,300
from the responses from the peripheral
announced that the media being inserted

195
00:17:54,300 --> 00:17:59,909
it sees the dr Sedan starts mounting
drivers and so on and any attempt by the

196
00:17:59,910 --> 00:18:04,440
militias device to claim it something
else or just ignoring it only mass

197
00:18:04,440 --> 00:18:07,770
storage like data that I verified that
the device can verify will get sent back

198
00:18:07,770 --> 00:18:17,940
to the PC ISO nine of the vicar devices
firmly entrenched between the host and

199
00:18:17,940 --> 00:18:21,610
the attached flash drive we can choose
to send what package to send it back

200
00:18:21,610 --> 00:18:25,510
it's not the same that's exactly what
USB right pocket does it we forward

201
00:18:25,510 --> 00:18:28,790
everything except the ones Pacific
Command which is the right sector

202
00:18:28,790 --> 00:18:34,220
command was gonna say this but there's
no point showing something that doesn't

203
00:18:34,220 --> 00:18:36,220
work she doesn't work

204
00:18:36,220 --> 00:18:40,820
an appointment so I will mention though
that it's not just about ignoring

205
00:18:40,820 --> 00:18:44,020
certificates we could handle it
ourselves and responded that it

206
00:18:44,020 --> 00:18:47,230
succeeded him know really didn't do
those two never know so it's not just

207
00:18:47,230 --> 00:18:54,880
ignoring things you can do whatever it
is well we can communicate with any

208
00:18:54,880 --> 00:18:59,390
device that hosts the host OS two is
your host OS is USB stack normally just

209
00:18:59,390 --> 00:19:04,380
as capable of so for example a while
back FTDI released an update for Windows

210
00:19:04,380 --> 00:19:08,970
Update that would bring counterfeit
serial devices by updating devices USB

211
00:19:08,970 --> 00:19:14,340
product aidid 20 which gets returned to
the PC during integration in the device

212
00:19:14,340 --> 00:19:19,740
descriptor that by itself would actually
bring it to speak but he would prevent

213
00:19:19,740 --> 00:19:22,780
Windows from seeing it because Windows
is assumed that you never have a product

214
00:19:22,780 --> 00:19:27,350
9202 it just doesn't bother with it so
when is generated you can't run anything

215
00:19:27,350 --> 00:19:32,380
that would talk to fix it back to what
it was but with thicker you can choose

216
00:19:32,380 --> 00:19:36,700
you can choose to ignore whatever we r
descriptors the device might return or

217
00:19:36,700 --> 00:19:40,140
even bother requesting them and just say
whatever commands you need to send it

218
00:19:40,140 --> 00:19:45,440
back to a non-zero value hopefully as
people get more inventive with screwing

219
00:19:45,440 --> 00:19:55,600
up USB will be able to write code it so
wrapping wrapping up this is definitely

220
00:19:55,600 --> 00:19:59,240
a complicated project to try to
accomplish in a few weeks ago myself to

221
00:19:59,240 --> 00:20:03,700
work on it had to completely rewrite the
USB Host Shield outrage to the DNC so

222
00:20:03,700 --> 00:20:06,720
that I could create the protocol on
interface for manipulating you speak at

223
00:20:06,720 --> 00:20:10,630
a fairly low level from PC working from
the ground up and try to build a

224
00:20:10,630 --> 00:20:17,559
relationship between the USPTO shields
chip and live usb like interface PC also

225
00:20:17,559 --> 00:20:21,840
reeling travel like this is really slow
so to accommodate that I've modified

226
00:20:21,840 --> 00:20:28,450
that disk util caching layer so it would
only read sectors from the Dr only is it

227
00:20:28,450 --> 00:20:33,870
needed to interpret the mission and come
up with a way to communicate overhead

228
00:20:33,870 --> 00:20:36,970
and send large chunks of data as quickly
as possible

229
00:20:36,970 --> 00:20:43,289
also mentioned for the hit protocol is
limited in her 10 points used by head

230
00:20:43,289 --> 00:20:46,230
may be low latency is not good for
transmitting a lot of saturday between

231
00:20:46,230 --> 00:20:50,490
PC and drive so the only way to transmit
large chunks of data once I had to buy

232
00:20:50,490 --> 00:20:56,210
sister that controlling point so I
created a second hid her face with an

233
00:20:56,210 --> 00:21:01,000
extremely large head report which is for
kilobytes which is the maximum windows

234
00:21:01,000 --> 00:21:05,909
and other US will allow and reserve that
just for transmitting a lot of endpoint

235
00:21:05,909 --> 00:21:10,460
data back and forth so it's pretty
clunky but it's kind of work but it does

236
00:21:10,460 --> 00:21:16,409
work also not all are doing those are
created equal to create the victor

237
00:21:16,409 --> 00:21:19,590
interface we need to be able to
customize the USB connection between it

238
00:21:19,590 --> 00:21:24,580
and the PC and most of us don't do that
they just expose a USB to serial

239
00:21:24,580 --> 00:21:29,330
interface for its cereal debug logging
and nothing else but some variants like

240
00:21:29,330 --> 00:21:33,720
their dunno are capable of it because
they use a dedicated you r for handling

241
00:21:33,720 --> 00:21:36,370
the USB communication one which has
rewritable

242
00:21:36,370 --> 00:21:42,169
fortunately I don't have time to work on
that all this only works in the TV 2.0

243
00:21:42,169 --> 00:21:46,919
device at the moment and depends don't
line up between the DNC and USB host

244
00:21:46,919 --> 00:21:55,299
shells little bit a soldering wires is
required to handle and finally it's not

245
00:21:55,299 --> 00:22:00,840
news to anyone who knows me but I am in
fact and saying I can't say this product

246
00:22:00,840 --> 00:22:04,120
as well as I hoped it would but I did
essentially get it working and I still

247
00:22:04,120 --> 00:22:06,760
maintain as a whole lot of value in
having a device that shifts the

248
00:22:06,760 --> 00:22:11,820
responsibility of communicating with USB
at a low level to the PC instead of

249
00:22:11,820 --> 00:22:12,860
embedding

250
00:22:12,860 --> 00:22:18,909
betting in bed in some devices from
we're just hoping that it does what you

251
00:22:18,909 --> 00:22:23,590
want or need it to do so hopefully this
talk in this code on putting out there

252
00:22:23,590 --> 00:22:26,570
gets a little discussion going amongst
us and if nothing else it was definitely

253
00:22:26,570 --> 00:22:29,840
a learning experience for me

254
00:22:29,840 --> 00:22:34,539
I don't have the bigger coat up and get
home to see you there at the second but

255
00:22:34,539 --> 00:22:39,830
will shortly hear some links for buyers
using other stuff or get contact me so

