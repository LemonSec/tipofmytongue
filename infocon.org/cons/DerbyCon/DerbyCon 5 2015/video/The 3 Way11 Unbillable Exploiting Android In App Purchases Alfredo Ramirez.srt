1
00:00:00,000 --> 00:00:04,830
alright I think we're coming together
and find your become so far this is my

2
00:00:04,830 --> 00:00:09,250
first time here and in louisville
actually I'm not sure what I was

3
00:00:09,250 --> 00:00:11,990
expecting but it's huge

4
00:00:11,990 --> 00:00:16,800
actually I'm on my third or fourth
conference has ever been to and so I'm

5
00:00:16,800 --> 00:00:22,300
Alfredo I'm gonna talk a little bit
about Android in-app purchases or in-app

6
00:00:22,300 --> 00:00:24,990
billing I will use the terms
interchangeably because even though we

7
00:00:24,990 --> 00:00:32,439
all call it I P Google thought it'd be
cool to call their API iad because you

8
00:00:32,439 --> 00:00:38,230
know security by obscurity I so I am a
consultant and researcher envious are in

9
00:00:38,230 --> 00:00:42,530
Boston we mostly do a lot of you know AB
psych you know we do the do the radio

10
00:00:42,530 --> 00:00:46,870
network security stuff and then we get
to do a fair bit of mobile work in in

11
00:00:46,870 --> 00:00:51,829
different areas and so personally I got
interested in in a building or in-app

12
00:00:51,829 --> 00:00:56,079
purchasing couple years ago I was in New
York City I was sitting on the subway

13
00:00:56,079 --> 00:01:02,050
and there's some kid playing candy crush
and you know I heard this game is a

14
00:01:02,050 --> 00:01:05,960
super popular in his playing and he runs
out alive and well that's kinda stupid

15
00:01:05,960 --> 00:01:10,710
and suggested by more with actual money
and I'm like wow that seems kind of done

16
00:01:10,710 --> 00:01:14,060
to me that you just paid to continue
playing this game and I was wondering

17
00:01:14,060 --> 00:01:19,439
you know can you can bypass that you
just shake buying the stuff or you know

18
00:01:19,439 --> 00:01:23,420
pick by ladies lollipop hammers and all
of these bugs and just you know cheat

19
00:01:23,420 --> 00:01:29,119
your way out of having to pay it turns
out you can I could but as it turns out

20
00:01:29,119 --> 00:01:33,229
then once you strip out how the IP stuff
from something like candy crush it's

21
00:01:33,229 --> 00:01:37,880
really just a pretty mediocre match 3
game kind of the fun part is really

22
00:01:37,880 --> 00:01:43,060
breaking it because playing it not
really worth it so why why even bother

23
00:01:43,060 --> 00:01:48,290
talking about you know that feeling you
know why some interesting topics and why

24
00:01:48,290 --> 00:01:53,740
is it relevant almost autism money as
with most things so you know that's the

25
00:01:53,740 --> 00:01:58,259
reason why most of our customers are in
finance or health care or that sort of

26
00:01:58,259 --> 00:02:02,079
stuff is because there's a lot of money
they're well-trained up there's a lot of

27
00:02:02,079 --> 00:02:06,550
money and in-app purchases and it is
skyrocketing in

28
00:02:06,550 --> 00:02:13,230
2011 in-app purchase revenue hit two
billion it's bullshit about 14 this year

29
00:02:13,230 --> 00:02:18,200
and is projected to just keep on going
and as of right now in app purchases

30
00:02:18,200 --> 00:02:22,760
make up about 75 percent of revenue for
mobile developers so this is actually

31
00:02:22,760 --> 00:02:26,230
really big business and it's just
getting bigger because for some reason

32
00:02:26,230 --> 00:02:30,530
people are more than happy to drop in on
99 cents here and there to play their

33
00:02:30,530 --> 00:02:34,840
full time waster games on the side was
we're on the toilet or wherever his

34
00:02:34,840 --> 00:02:40,930
people playing reports that sort of
stuff now I mentioned games because most

35
00:02:40,930 --> 00:02:46,350
top grossing Android applications are
games for some reason there are

36
00:02:46,350 --> 00:02:50,570
exceptions Pandora for example HBO now
tender

37
00:02:50,570 --> 00:02:55,490
snapchat just added in-app purchases you
can add lensing effects to your snaps

38
00:02:55,490 --> 00:03:01,220
for $3 or whatever and but the vast
majority of our games and so you know I

39
00:03:01,220 --> 00:03:04,480
say that a lot of games you know that's
a really big deal who cares people are

40
00:03:04,480 --> 00:03:07,950
chanting in video games what turns out
there's actually a lot of money they're

41
00:03:07,950 --> 00:03:13,630
super cell who are the people that make
clash of clans southern revenue triple

42
00:03:13,630 --> 00:03:21,310
between 24 2013 and 2014 to 1.7 billion
USD lawyers dollars up late King the

43
00:03:21,310 --> 00:03:25,250
guys who make candy crush who are the
top dogs right now but are kind of on

44
00:03:25,250 --> 00:03:28,980
the down so because they've been writing
began to persuade for like five years at

45
00:03:28,980 --> 00:03:33,950
this point they make about 2.4 billion
dollars a year I mean and this is almost

46
00:03:33,950 --> 00:03:38,630
exclusively through in-app purchases
were telling him how video games having

47
00:03:38,630 --> 00:03:43,000
a lot of money in them outside of that
we're seeing the rise of stuff like

48
00:03:43,000 --> 00:03:47,190
mobile MMORPGs massively multiplayer
online role-playing games though I'm

49
00:03:47,190 --> 00:03:51,760
sure you get some of that is there's
this for example again that's very

50
00:03:51,760 --> 00:03:55,790
popular and iOS and Android called clock
clash of the Order and Chaos Online

51
00:03:55,790 --> 00:04:01,450
which is a traditional type animal like
World of Warcraft but it's on mobile and

52
00:04:01,450 --> 00:04:04,370
so we're starting to see the same kinds
of grain markets where people are

53
00:04:04,370 --> 00:04:08,550
selling these virtual items or selling
their accounts you know they'll the

54
00:04:08,550 --> 00:04:12,170
starting the count of grand up to
whatever the max level is and get some

55
00:04:12,170 --> 00:04:15,500
sweet items and then they sell these
accounts for a hundred bucks 200 bucks a

56
00:04:15,500 --> 00:04:19,839
pop so what that says is that if you're
able to actually just cheat the system

57
00:04:19,840 --> 00:04:23,530
entirely you're you're basically
manufacturing money at that ass much

58
00:04:23,530 --> 00:04:28,600
smaller time clocks than you would
otherwise by having to get this stuff in

59
00:04:28,600 --> 00:04:36,150
the game and essentially if there's a
lot of money to be made your head you're

60
00:04:36,150 --> 00:04:39,520
going to attract bad actors you know
people who are going to figure out how

61
00:04:39,520 --> 00:04:42,510
to exploit the system and make their own
you know

62
00:04:42,510 --> 00:04:47,060
gains without having to play by the
rules and as it happened that is what

63
00:04:47,060 --> 00:04:50,040
happens and we're going to talk a little
bit about that how you do that and how

64
00:04:50,040 --> 00:04:55,650
you fix it how to prevent so before we
do that let's talk a little bit about

65
00:04:55,650 --> 00:05:01,410
Android app billing actually is also in
a billing in general is just a way for

66
00:05:01,410 --> 00:05:06,270
people to buy things from developers
without having to leave the application

67
00:05:06,270 --> 00:05:13,169
this is an important distinction because
stuff like Ticketmaster or Live Nation

68
00:05:13,169 --> 00:05:18,500
they let you buy tickets from your phone
just doing it through their standard AP

69
00:05:18,500 --> 00:05:21,900
ice there are you know you're giving
them your payment data you're going

70
00:05:21,900 --> 00:05:24,810
through the same way that a web user
would you're just doing it on your

71
00:05:24,810 --> 00:05:25,889
mobile device

72
00:05:25,889 --> 00:05:29,190
in-app billing the whole idea is you
doing it from the app itself and

73
00:05:29,190 --> 00:05:33,570
Google's inability API the whole point
is that you can make a purchase a user

74
00:05:33,570 --> 00:05:37,630
can make a purchase without ever having
to give you their payment data to the

75
00:05:37,630 --> 00:05:41,190
way it works is the user says hey I want
to purchase this thing in the app says

76
00:05:41,190 --> 00:05:45,090
hey Google Play my user would like to
purchase this SKU you know this you know

77
00:05:45,090 --> 00:05:49,190
he'll always pop hammer in Google Play
takes control and says hey give me your

78
00:05:49,190 --> 00:05:53,430
your payment details do you want to buy
this thing the user says yes or no

79
00:05:53,430 --> 00:05:57,260
whatever and in google says okay the
payment went through the purchase is

80
00:05:57,260 --> 00:06:02,400
complete you can give them their content
now and the whole thing is you know

81
00:06:02,400 --> 00:06:07,139
people like super cell chained all of
these companies they don't have to

82
00:06:07,139 --> 00:06:10,120
actually keep track of your credit card
data they want to take you know any kind

83
00:06:10,120 --> 00:06:15,229
of payment details on that vastly
simplifies the entire process especially

84
00:06:15,229 --> 00:06:19,099
for users because if you've ever bought
something from application you that you

85
00:06:19,099 --> 00:06:23,139
click on button click the second button
then you buy so it's very easy and it

86
00:06:23,139 --> 00:06:26,729
makes it very simple for people to drop
cash on stuff that they wouldn't

87
00:06:26,729 --> 00:06:34,310
otherwise so this is an API provided by
Google that allows you to interface with

88
00:06:34,310 --> 00:06:38,130
their Google Play Store and they provide
excellent documentation like this

89
00:06:38,130 --> 00:06:42,880
extremely simple diagram unfortunately
this diagram is overly simplified and

90
00:06:42,880 --> 00:06:47,140
doesn't give you a good picture so you
have something like this so this is what

91
00:06:47,140 --> 00:06:55,770
inability actually looks like my point
here is that it is confusing at its core

92
00:06:55,770 --> 00:06:59,710
in-app billing relies on an interprocess
communication mechanism that's part of a

93
00:06:59,710 --> 00:07:04,969
nerd called intense so when you click on
a button to buy something within an AB

94
00:07:04,969 --> 00:07:10,400
the absence and intent to the Google
Play app which you know every 400 fun

95
00:07:10,400 --> 00:07:13,070
hasn't says you know this user would
like to buy this

96
00:07:13,070 --> 00:07:17,640
SKU and then you interact with the
Google Play App you do your thing and

97
00:07:17,640 --> 00:07:23,479
then that at the Google Play actions in
intent back to the apt to the original

98
00:07:23,479 --> 00:07:27,800
application saying this is what happened
and so intense as bundled data

99
00:07:27,800 --> 00:07:30,890
you know i mean you can just think of
him as JSON really because they

100
00:07:30,890 --> 00:07:35,289
effectively are serialized in a very
similar way but you know you have like

101
00:07:35,289 --> 00:07:39,710
ok this is the SK use was the result of
the transaction and there's additional

102
00:07:39,710 --> 00:07:43,969
medidata for example when you say they'd
like to buy this

103
00:07:43,969 --> 00:07:48,159
I would this user would like to buy this
thing you sent Google Play your public

104
00:07:48,159 --> 00:07:52,960
key and that's what they use your
identifier that's how they will link up

105
00:07:52,960 --> 00:07:59,440
your request to who's actually getting
paid and they also use this because you

106
00:07:59,440 --> 00:08:04,389
have your private key registered on your
Google Developer Console it's a it's

107
00:08:04,389 --> 00:08:07,729
kind of weird scheme so basically your
private key isn't is private in the

108
00:08:07,729 --> 00:08:12,539
sense that only you and Google know it
and Google uses it to encrypt a

109
00:08:12,539 --> 00:08:17,289
signature for every purchase so this
here's your purchase result includes

110
00:08:17,289 --> 00:08:21,510
this signature that says this is how you
can verify the authenticity of this

111
00:08:21,510 --> 00:08:28,870
transaction but ultimately implementing
in a building is confusing and because

112
00:08:28,870 --> 00:08:34,659
of that developers take shortcuts or you
know make mistakes that lead to

113
00:08:34,659 --> 00:08:39,410
exploitable vulnerabilities and that's
what we're going to look at here because

114
00:08:39,410 --> 00:08:45,650
they essentially allow bad people you
know I guys to completely circumvent the

115
00:08:45,650 --> 00:08:52,640
process and get stuff for free Google
tries to make things simpler by

116
00:08:52,640 --> 00:08:56,810
providing you with a sample application
that demonstrates how in a building

117
00:08:56,810 --> 00:09:02,640
works it's like this fake little game
where you can buy gas for your truck to

118
00:09:02,640 --> 00:09:06,160
make it go further and so you know the
hell they just kind of walks you for

119
00:09:06,160 --> 00:09:09,920
registering in SKU under Developer
Console and you know what it would look

120
00:09:09,920 --> 00:09:14,000
like to send the right intends to buy a
thing and so on and so forth and they

121
00:09:14,000 --> 00:09:19,699
put a disclaimer hey don't use this this
is not you know production code make

122
00:09:19,699 --> 00:09:23,500
sure you modify it because it's missing
you know all kinds of other security

123
00:09:23,500 --> 00:09:26,930
precautions that we think you should
take so it probably you probably

124
00:09:26,930 --> 00:09:32,430
shouldn't use this in your coat and as
part of it you know the main the core of

125
00:09:32,430 --> 00:09:38,380
it is this helper class called the IAB
helper that implements the in-app

126
00:09:38,380 --> 00:09:45,870
billing API novice class III set is very
streamlined for the whole point is it's

127
00:09:45,870 --> 00:09:50,310
a demo to walk you through this is what
intent for purchasing looks like this is

128
00:09:50,310 --> 00:09:54,329
what are responsible look like please
don't use it you know it's not for

129
00:09:54,329 --> 00:09:56,770
production so what happens

130
00:09:56,770 --> 00:10:00,839
well everybody's in production you know
candy crush literally just takes the

131
00:10:00,839 --> 00:10:04,870
class and copy-paste you have here one
of the other top racing game Marvel

132
00:10:04,870 --> 00:10:09,350
battles just takes it and copy paste it
there's tons of other games where you

133
00:10:09,350 --> 00:10:13,600
know it's actually trivial to obfuscate
in Android just by enabling ProGuard

134
00:10:13,600 --> 00:10:19,160
when you compile so you'll just have no
class B which is i be helped her and you

135
00:10:19,160 --> 00:10:23,440
know wholesale and they haven't changed
anything and so they've looked at a lot

136
00:10:23,440 --> 00:10:28,579
of these templates on how these
functions work and left out you know

137
00:10:28,579 --> 00:10:32,140
critical things like you know how
senator verification works for sending

138
00:10:32,140 --> 00:10:36,940
in a security token with your purchase
requests of the verify authenticity I

139
00:10:36,940 --> 00:10:39,710
will talk about it

140
00:10:39,710 --> 00:10:46,170
so this shouldn't be a surprise but
there are essentially crack binaries for

141
00:10:46,170 --> 00:10:50,710
just about any any major game that you
can think of and whether in the form of

142
00:10:50,710 --> 00:10:57,030
practically che's or there are these
little things like freedom and lucky

143
00:10:57,030 --> 00:11:01,350
patcher the employer rooted android
device that essentially replace the

144
00:11:01,350 --> 00:11:06,780
entire Google Play API with a fake one
so that absolutely think that you're

145
00:11:06,780 --> 00:11:10,360
buying from google but really you're
just not doing it at all this is a

146
00:11:10,360 --> 00:11:15,420
problem in two ways obviously it's a
problem for developers in lost revenue

147
00:11:15,420 --> 00:11:20,020
if you think about something like so
estimates i've seen that claimed to be

148
00:11:20,020 --> 00:11:22,500
good and go to market analysis

149
00:11:22,500 --> 00:11:27,650
the idea that clash of clans Mexican
million bucks a day like this is which

150
00:11:27,650 --> 00:11:32,110
is crazy to me because I mean things
cost like a dollar on their summit tons

151
00:11:32,110 --> 00:11:35,290
of people are dropping money in here so
the fact that you can shoot around this

152
00:11:35,290 --> 00:11:41,190
is literally lost revenue but more
importantly to me really i mean you know

153
00:11:41,190 --> 00:11:46,840
go super cell but I think the bigger
issues that people downloading cracked

154
00:11:46,840 --> 00:11:50,890
binaries is a pretty big source of
mobile malware especially enjoyed I mean

155
00:11:50,890 --> 00:11:54,980
when they do surveys they find that most
people who have malware it's because

156
00:11:54,980 --> 00:11:58,360
they downloaded something from an
untrusted source or you have these

157
00:11:58,360 --> 00:12:01,670
things like freedom and lucky patcher
with which replaced the Google Play

158
00:12:01,670 --> 00:12:05,960
entirely and those require you to that
first root your phone and then be

159
00:12:05,960 --> 00:12:12,550
download this intentionally shady code
to run your device which is fine and if

160
00:12:12,550 --> 00:12:15,660
we're doing it but if it's just the guy
who just wants to get stuff for free he

161
00:12:15,660 --> 00:12:20,480
might also be downloading no additional
add-ons with his with his stuff that

162
00:12:20,480 --> 00:12:28,790
will take over as device and that's
kinda bad so let's take a look at how

163
00:12:28,790 --> 00:12:34,230
ideas actually implemented and how we're
going to exploit it i dnt questions so

164
00:12:34,230 --> 00:12:40,780
far as i'm talking a little fast but
feel free to interrupt me at any point

165
00:12:40,780 --> 00:12:44,990
ya feel free to interrupt me at any
point that's I can regain my train of

166
00:12:44,990 --> 00:12:49,870
thought of you have any questions before
I started looking at this deeply I

167
00:12:49,870 --> 00:12:53,670
didn't really know anything about
purchases or how they work and I'm kind

168
00:12:53,670 --> 00:12:57,220
of taking for granted that you know
certain things about Android itself

169
00:12:57,220 --> 00:13:07,470
that's kind of what we're gonna with one
of the things are going to talk about

170
00:13:07,470 --> 00:13:10,530
and that's exactly what we're gonna do
they're going to manipulate some intense

171
00:13:10,530 --> 00:13:15,980
because ultimately since all this
communication is happening inside the

172
00:13:15,980 --> 00:13:23,850
device it's fairly trivial to manhandle
it so in order to actually exploit the

173
00:13:23,850 --> 00:13:27,780
stuff we're going to use or what I'm
going to use is something called Cydia

174
00:13:27,780 --> 00:13:33,910
substrates who is familiar with city of
substrate ok right back to the room is

175
00:13:33,910 --> 00:13:39,190
about it so city centre is awesome he
came out in May of 2013 it was kind of

176
00:13:39,190 --> 00:13:43,770
an offshoot of mobile substrate which
was for iOS made by the studio called

177
00:13:43,770 --> 00:13:49,800
sorry Jay Freeman and actually I learned
how to use this framework mostly by

178
00:13:49,800 --> 00:13:55,340
being on IRC just doesn't work I don't
know just teaching your API is hard to

179
00:13:55,340 --> 00:14:00,170
use and so if he did cuz she's awesome
and city of substrate essentially what

180
00:14:00,170 --> 00:14:05,270
it is it's a framework that allows you
to modify the way in a behavior at

181
00:14:05,270 --> 00:14:12,260
runtime so we know hopefully that
Android is mostly job you know it's it's

182
00:14:12,260 --> 00:14:16,660
a Linux kernel but the most of the layer
that were gonna interface with his job

183
00:14:16,660 --> 00:14:21,510
but instead of running a Java Virtual
Machine virtual machine in stock based

184
00:14:21,510 --> 00:14:25,820
on virtual machine running a register
based Baltic virtual machine which is

185
00:14:25,820 --> 00:14:31,660
essentially the same thing for our
purposes but one of the ways they

186
00:14:31,660 --> 00:14:36,560
overcame things like shared libraries
and slow loading is that at

187
00:14:36,560 --> 00:14:39,620
when you first start your phone when you
first day you know when Android is

188
00:14:39,620 --> 00:14:47,880
booting up it creates a prototypical
virtual Miller DVM called the zygote and

189
00:14:47,880 --> 00:14:51,200
so all of your shared libraries and
everything are loaded into the psycho

190
00:14:51,200 --> 00:14:54,010
and then when a new process bonds

191
00:14:54,010 --> 00:15:00,650
it clones this virtual machine so if you
can modify these I go to your that's

192
00:15:00,650 --> 00:15:04,260
going to propagate to all of your child
processes and that's essentially what

193
00:15:04,260 --> 00:15:10,190
substrate does is that stuff is loaded
from a nap so you know classes da txt

194
00:15:10,190 --> 00:15:14,370
file and you at runtime are going to
inject your own definitions for classes

195
00:15:14,370 --> 00:15:20,790
and methods so you can do what you want
the way this works is pretty simple you

196
00:15:20,790 --> 00:15:25,540
took a class with a method that's part
of their API and what that does is that

197
00:15:25,540 --> 00:15:30,010
you're essentially one as soon as the
classes loaded you're looking into it

198
00:15:30,010 --> 00:15:35,800
and once that happens you can pick a
method or you know any number of methods

199
00:15:35,800 --> 00:15:39,270
and you can modify them in any way you
can think of you know you can change the

200
00:15:39,270 --> 00:15:44,440
way they what they return you can change
into their arguments really anything or

201
00:15:44,440 --> 00:15:48,200
you can use it for logging you know
we're using this to bypass in a building

202
00:15:48,200 --> 00:15:50,600
but in my own work

203
00:15:50,600 --> 00:15:56,760
substrate is really useful for just any
type of mobile engagement as certificate

204
00:15:56,760 --> 00:16:03,900
becomes more common substrate is great
because you can modify the way that you

205
00:16:03,900 --> 00:16:08,530
know trust towards work and just say hey
you're gonna allow everything so don't

206
00:16:08,530 --> 00:16:11,860
worry about finding and that we can
proxy stuff super click normal without

207
00:16:11,860 --> 00:16:17,560
even having like Lotus search into your
device or you can use substrate to log

208
00:16:17,560 --> 00:16:21,750
you know crypto functions as you can see
how it is that happening anytime

209
00:16:21,750 --> 00:16:25,570
applications invoking any kind of crypto
you can you can look through that very

210
00:16:25,570 --> 00:16:27,670
simply and see ok this is what they're
doing

211
00:16:27,670 --> 00:16:30,760
you know they're using that trip here or
there you know they do something

212
00:16:30,760 --> 00:16:35,400
questionable here and I can look into
that further at one point and actually

213
00:16:35,400 --> 00:16:39,480
built a dynamic vulnerability scanner
that just basically runs on top of your

214
00:16:39,480 --> 00:16:44,060
application using substrate and it was
rules based in so you just kind of say

215
00:16:44,060 --> 00:16:48,180
hey look for this you know things that
fit into this template like you know use

216
00:16:48,180 --> 00:16:53,670
of Mt five-hour look for you know right
calls to the sdcard and so you just use

217
00:16:53,670 --> 00:16:57,800
the application in this thing you know
would give you a report to say this is

218
00:16:57,800 --> 00:17:01,940
the stuff that's happening in this
application and knock out a lot of the

219
00:17:01,940 --> 00:17:04,550
automated stops and then you can
manually going in

220
00:17:04,550 --> 00:17:08,330
and look further so substrates really
awesome if you do any kind of mobile

221
00:17:08,330 --> 00:17:13,810
work whether it's on mobile are on iOS
or Android is invaluable and I

222
00:17:13,810 --> 00:17:18,500
definitely recommend you check it out
there were most you can use it to break

223
00:17:18,500 --> 00:17:25,300
this and so are excellent examples going
to focus on candy crush I picked fresh

224
00:17:25,300 --> 00:17:29,830
because it's been around for a long time
as a top grossing app its I think number

225
00:17:29,830 --> 00:17:35,910
two or three today it was number one you
know three years ago and it's seems like

226
00:17:35,910 --> 00:17:42,760
people don't get tired of it it's also
commits a lot of the common errors that

227
00:17:42,760 --> 00:17:48,100
we're going to see in implementation of
in-app billing it's not unique in this

228
00:17:48,100 --> 00:17:52,810
respect where you know where i could
think of it I've included examples from

229
00:17:52,810 --> 00:17:56,590
other applications so you don't think
I'm just picking on candy crush or that

230
00:17:56,590 --> 00:18:01,110
you know this is you know that my my
message here are you know one use only

231
00:18:01,110 --> 00:18:06,740
the real problem here that we're
addressing is the fact that almost all

232
00:18:06,740 --> 00:18:10,630
devs are doing things in the same way
and those wheels were wrong and so we

233
00:18:10,630 --> 00:18:19,370
need to fix that kind of go through some
of these common flaws and and then we're

234
00:18:19,370 --> 00:18:24,590
going to see how are going to exploit
those in a little bit there's a lot of

235
00:18:24,590 --> 00:18:31,050
coat so I try to make that simple to
look at it let me know if it's not so

236
00:18:31,050 --> 00:18:33,790
when you launch your purchase

237
00:18:33,790 --> 00:18:39,820
flow one of the things that you can do
is you can send in a a token this is

238
00:18:39,820 --> 00:18:44,610
just like us it's like a hit and you
know him better on a form you know it's

239
00:18:44,610 --> 00:18:49,460
a token essentially and so the idea that
you send this to google just token and

240
00:18:49,460 --> 00:18:52,910
then that way you get the token back and
that way you're able to match up a

241
00:18:52,910 --> 00:18:57,560
request with the results so that you
know for example you don't have to worry

242
00:18:57,560 --> 00:19:01,910
about replay attacks or you can purchase
request for trees and stuff like that

243
00:19:01,910 --> 00:19:07,850
unsurprisingly the Google helper class
doesn't include that because that's just

244
00:19:07,850 --> 00:19:12,840
you know making things more complicated
and so developers in production

245
00:19:12,840 --> 00:19:16,409
don't include that and you just have
like this empty string that they're

246
00:19:16,409 --> 00:19:19,840
sending through and they're not even
used it's a simple thing to include her

247
00:19:19,840 --> 00:19:25,630
check and they're not bothering because
that's not what the sample did which

248
00:19:25,630 --> 00:19:28,289
makes it a lot easier for us to meet you
don't have to worry about forging that

249
00:19:28,289 --> 00:19:34,240
not really a vulnerability per se but
this is extremely common in just about

250
00:19:34,240 --> 00:19:40,400
every you really can and/or here but the
city like step-by-step debugging in the

251
00:19:40,400 --> 00:19:45,799
logs I mean it's it's pretty trivial if
you hook up an Android device to your

252
00:19:45,799 --> 00:19:50,240
computer and then run run logcat you can
see it you know whatever the devices

253
00:19:50,240 --> 00:19:56,059
logging as it turns out people log a lot
especially for in-app billing aids a lot

254
00:19:56,059 --> 00:19:59,309
of the default like helper classes
include a large statements and also I

255
00:19:59,309 --> 00:20:02,179
suspect they do it because you know they
needed to troubleshoot and then they

256
00:20:02,179 --> 00:20:07,000
just leave it in so it's it's really
simple if you're writing and exploit for

257
00:20:07,000 --> 00:20:10,779
an application you know if it's not
working they're essentially doing

258
00:20:10,779 --> 00:20:13,820
step-by-step debugging for you and you
can see where things are breaking down

259
00:20:13,820 --> 00:20:19,000
and that's really useful it's not a
loner ability per se but it i mean

260
00:20:19,000 --> 00:20:26,220
excessive logging is definitely a
problem and then why the really big ones

261
00:20:26,220 --> 00:20:31,980
just about everybody does have examples
here from candy crush Pandora from clash

262
00:20:31,980 --> 00:20:36,799
of clans and it's essentially a bit
signature verification like I said when

263
00:20:36,799 --> 00:20:41,570
you send in app purchase request a
Google does the thing what the user and

264
00:20:41,570 --> 00:20:46,730
then it says sends back the results to
the application with a signature will be

265
00:20:46,730 --> 00:20:53,380
signatures are verified typically buy a
Boolean function on the device so it's

266
00:20:53,380 --> 00:20:57,010
entirely client-based you know
developers haven't learned to think of

267
00:20:57,010 --> 00:21:02,419
the idea of the device itself as an
untrusted client and so

268
00:21:02,419 --> 00:21:06,600
if you're doing all of your signature
verification locally I can just always

269
00:21:06,600 --> 00:21:12,320
make it say that it verified and that's
one of the bigger problems

270
00:21:12,320 --> 00:21:16,600
client-side senior for signature
verification is a huge issue just

271
00:21:16,600 --> 00:21:20,980
because I mean anyone who works in the
web app world I think knows this right i

272
00:21:20,980 --> 00:21:23,629
mean if you're doing anything all of
your validation in javascript

273
00:21:23,629 --> 00:21:27,769
people are just going to bypass that and
it's the same thing here i mean you need

274
00:21:27,769 --> 00:21:35,090
to be doing server-side checks if you
actually care about your signatures so

275
00:21:35,090 --> 00:22:03,480
I'm gonna show you so candy crash so
that we can buy things to use my

276
00:22:03,480 --> 00:22:07,399
lollipop Harris I can't buy more
interviews them up so I'm gonna do that

277
00:22:07,399 --> 00:22:11,529
but essentially what we've done is we've
made it so that when I start the

278
00:22:11,529 --> 00:22:17,409
purchasing close flow if I cancel out of
it instead of going through with it the

279
00:22:17,409 --> 00:22:21,350
application gets a ok everything's good
you know you he bought the thing given

280
00:22:21,350 --> 00:22:26,409
the stuff now and it it accepts that you
know so you know you click to go by you

281
00:22:26,409 --> 00:22:32,539
get now now now it's Google plays ball
and you hit cancel and it works

282
00:22:32,539 --> 00:22:40,139
you never had to actually buy anything
and so completely bypassed the in-app

283
00:22:40,139 --> 00:22:42,029
purchase

284
00:22:42,029 --> 00:22:50,950
so how does this actually where was
actually supplied me that's like

285
00:22:50,950 --> 00:22:54,499
basically three-step process in order
just go in

286
00:22:54,499 --> 00:23:00,469
modify couple lines of code and you've
now completely broken this app that if

287
00:23:00,469 --> 00:23:03,049
this is really the most important part
of the Act I mean if all of their

288
00:23:03,049 --> 00:23:07,409
revenues from in-app purchases they
should probably do a better job not

289
00:23:07,409 --> 00:23:16,479
letting you break that so just looks
very similar tragedy earlier the first

290
00:23:16,479 --> 00:23:19,669
thing your gonna do is just gonna hook
there I T helper class because they're

291
00:23:19,669 --> 00:23:27,109
using the exact Google class helper
class and then what what you do is that

292
00:23:27,109 --> 00:23:32,320
you're gonna replace the intent that
Google sends back so normally if you

293
00:23:32,320 --> 00:23:37,889
cancel a transaction google says out the
user cancelled nevermind that goes

294
00:23:37,889 --> 00:23:41,999
alright we're not giving you think then
obviously and so what we're doing is as

295
00:23:41,999 --> 00:23:45,559
you know as the gentleman mentioned is
that since since it's all done with

296
00:23:45,559 --> 00:23:50,359
intense you can just replace the intent
and so what we do here just manufacturer

297
00:23:50,359 --> 00:23:58,389
a successful transaction response code
zero means hey that worked he bought the

298
00:23:58,389 --> 00:24:02,789
product ideas you know the thing you
bought with its members are extra lies

299
00:24:02,789 --> 00:24:06,979
are or what have you and then everything
else we just fake you know I mean it

300
00:24:06,979 --> 00:24:10,479
doesn't matter they don't check the you
know the order I D we're going to put a

301
00:24:10,479 --> 00:24:14,049
fake signature in here we're gonna put a
fake token because none of these things

302
00:24:14,049 --> 00:24:18,119
actually matter because the last thing
we're doing is we're actually gonna go

303
00:24:18,119 --> 00:24:22,539
into their security class and we're
going to look at their verify a

304
00:24:22,539 --> 00:24:27,119
signature methods and we're just gonna
always make them return true because if

305
00:24:27,119 --> 00:24:31,070
you put something inside the client I'm
just going to buy passes I say this a

306
00:24:31,070 --> 00:24:35,059
lot because it's kind of like one of the
biggest takeaways his clients address is

307
00:24:35,059 --> 00:24:40,950
bad and we know this I thought but as it
turns out that when we move from one

308
00:24:40,950 --> 00:24:45,119
platform to another we forget everything
we learned in the last platform and we

309
00:24:45,119 --> 00:24:47,040
start doing things over again

310
00:24:47,040 --> 00:24:51,960
but sat on the server

311
00:24:51,960 --> 00:25:03,530
know why I'm actually going to see a
little bit but the idea that would be

312
00:25:03,530 --> 00:25:08,610
that you send the entire thing to the
server right and the server performs

313
00:25:08,610 --> 00:25:13,290
signature verification on there and and
if it doesn't verify it doesn't send you

314
00:25:13,290 --> 00:25:19,920
the content right obviously if you just
had a service 800 clear then you can

315
00:25:19,920 --> 00:25:23,770
replace that as well but the ideas then
you have to put content onto the server

316
00:25:23,770 --> 00:25:28,480
side and that actually is a valid
strategy and a lot of cases for some the

317
00:25:28,480 --> 00:25:40,350
context for gonna talk about them again
but so soon as I mean this is trivial to

318
00:25:40,350 --> 00:25:47,440
break and the DAPI has gotten a little
better because Google's kind of realized

319
00:25:47,440 --> 00:25:50,730
that developers are not doing
server-side checks they should be doing

320
00:25:50,730 --> 00:25:56,130
and so they're kind of recognizing like
oh you know we should probably make

321
00:25:56,130 --> 00:25:59,820
things a little more robust on our end
to make up for the developers not doing

322
00:25:59,820 --> 00:26:04,750
what they're supposed to do but even so
I mean they can they can't do it all so

323
00:26:04,750 --> 00:26:07,890
it's just it's a little harder to break
now than it was two years ago but it's

324
00:26:07,890 --> 00:26:14,040
still fairly easily breakable and so
there are some best practices that you

325
00:26:14,040 --> 00:26:17,420
know Google suggests that you know will
suggest that people should be following

326
00:26:17,420 --> 00:26:21,670
any other kinds of things that you can
suggest if your pen testing an app that

327
00:26:21,670 --> 00:26:28,820
uses I you know in a building and isn't
doing it properly so I'm going back to

328
00:26:28,820 --> 00:26:34,910
your question ultimately the real big
issue is client-side trust we're doing

329
00:26:34,910 --> 00:26:39,420
everything on the clamor verifying
content all the signatures of the

330
00:26:39,420 --> 00:26:45,610
content is on the client itself
typically so for example if you have i

331
00:26:45,610 --> 00:26:48,810
mean like something I can't write the
lollipop members are just are not a real

332
00:26:48,810 --> 00:26:52,150
thing that just to counter that's
maintained internally on the on the

333
00:26:52,150 --> 00:26:57,890
application which is fine because that's
a single player offline game if people

334
00:26:57,890 --> 00:27:01,640
cheating that you're losing some money
but it's not really a big deal but when

335
00:27:01,640 --> 00:27:04,490
you start talking about things like
clash of clans are you know a lot of

336
00:27:04,490 --> 00:27:08,690
these online animos now you're you're
creating competitive environments work

337
00:27:08,690 --> 00:27:13,430
for players are actually working against
her together against each other together

338
00:27:13,430 --> 00:27:19,130
and so cheating now because has greater
repercussions nobody wants to play in a

339
00:27:19,130 --> 00:27:24,930
hacked game I mean if you've ever played
like I guess call of duty and you log

340
00:27:24,930 --> 00:27:28,180
onto like a hacked map like that's
actually not sign that people will stop

341
00:27:28,180 --> 00:27:34,050
playing if it becomes rampant and and in
these cases were you already have an

342
00:27:34,050 --> 00:27:38,030
online infrastructure because you have
an online game it actually makes sense

343
00:27:38,030 --> 00:27:44,660
to put some of this stuff on the server
where possible so for example you should

344
00:27:44,660 --> 00:27:48,560
instead have the client starts the
purchase flow you talk to Google

345
00:27:48,560 --> 00:27:52,080
get back and then he said that after the
server and the server decides the

346
00:27:52,080 --> 00:27:56,590
validity of these transactions based on
data that only they have in that

347
00:27:56,590 --> 00:28:01,460
obviously the client can manipulate and
then delivers the actual content like

348
00:28:01,460 --> 00:28:07,590
Pandora right so all of the music is
actually stream from their servers you

349
00:28:07,590 --> 00:28:14,870
know obviously on the client but that's
irrelevant if the client is the one that

350
00:28:14,870 --> 00:28:18,380
says hey you should stream me this
content and you shouldn't give me any

351
00:28:18,380 --> 00:28:22,960
ads I bought this thing I bought about
Pandora One just move up and the

352
00:28:22,960 --> 00:28:26,980
services ok here's all the music you
don't get any ads what should be

353
00:28:26,980 --> 00:28:31,480
happening is you know you have to buy it

354
00:28:31,480 --> 00:28:36,210
the apps and that's up to the server in
the server says ok this is how it

355
00:28:36,210 --> 00:28:41,560
purchase I'm gonna mark your account on
the server as one that does not get ads

356
00:28:41,560 --> 00:28:51,210
but that's how they do so obviously
you're able to circumvent that kind of

357
00:28:51,210 --> 00:28:56,440
going back to a game context you know it
it will often makes sense for servers to

358
00:28:56,440 --> 00:28:59,800
keep track of data rather than letting
the client do it i mean this isn't like

359
00:28:59,800 --> 00:29:04,300
you know rocket science because this is
true in the web world is true the

360
00:29:04,300 --> 00:29:08,170
desktop world you know instead of having
a client say these are the things that I

361
00:29:08,170 --> 00:29:12,470
have this is my hit point values is my
magic point value here you go server

362
00:29:12,470 --> 00:29:16,790
this is what I am just certainly should
be clear are the client should be

363
00:29:16,790 --> 00:29:20,180
clearing the server who should have
these values so that they can be

364
00:29:20,180 --> 00:29:26,380
manipulated i mean this is essentially
assault problem in you know in the PC

365
00:29:26,380 --> 00:29:30,970
world and should in in the mobile world
has a lot they could learn from that

366
00:29:30,970 --> 00:29:34,940
there are of course exceptions I mean
there's a major online game that

367
00:29:34,940 --> 00:29:44,050
launched like a year ago and people very
quickly found out just by running from

368
00:29:44,050 --> 00:29:48,780
peek at five point values are stored
client-side and money values are stored

369
00:29:48,780 --> 00:29:53,060
client side and they were just sent his
network packets ok well we're gonna tell

370
00:29:53,060 --> 00:29:55,990
the server that we have all the stuff
and so you had people running around

371
00:29:55,990 --> 00:30:00,970
this you know massively multiplayer game
with infant health infant money and and

372
00:30:00,970 --> 00:30:04,110
that that created a pretty big backlash
for the game and they actually just

373
00:30:04,110 --> 00:30:07,320
recently did like Major League server
consolidation cause their player trip

374
00:30:07,320 --> 00:30:12,330
basis dropped dramatically and so I
guess my point here is that the cheating

375
00:30:12,330 --> 00:30:17,910
in games doesn't sound serious but it
definitely results in lost revenue for

376
00:30:17,910 --> 00:30:22,850
the actual developers in a very
meaningful way and so that's why we need

377
00:30:22,850 --> 00:30:26,080
to care about this and why we need to
help you know our clients do things

378
00:30:26,080 --> 00:30:28,000
better

379
00:30:28,000 --> 00:30:33,500
ur another thing that you can do just
going back to one of the first issues I

380
00:30:33,500 --> 00:30:38,210
talks about is add you know I see surf
token to your transactions it'll protect

381
00:30:38,210 --> 00:30:43,380
your customers from you know request for
dreams are replay attacks this isn't

382
00:30:43,380 --> 00:30:47,990
like anything new to anyone who's in the
web app world and it shouldn't be new to

383
00:30:47,990 --> 00:30:56,230
people in the mobile world either
something that I see all too frequently

384
00:30:56,230 --> 00:31:03,020
is completely devastated binaries and I
know a lot of people think obligations

385
00:31:03,020 --> 00:31:08,660
useless I don't think it's useless I
don't think it's a solution per se

386
00:31:08,660 --> 00:31:13,630
because ultimately you know if I care
enough I'm going to follow all of these

387
00:31:13,630 --> 00:31:16,780
you know this logic flow of these
functions and find things I'm really

388
00:31:16,780 --> 00:31:21,770
looking for but obfuscation definitely
helps and it's trivial to do a nandroid

389
00:31:21,770 --> 00:31:26,250
I mean literally anyone you're compiling
you enable you to check a box to enable

390
00:31:26,250 --> 00:31:32,140
ProGuard and your and your application
is mostly obfuscated it and it's a pain

391
00:31:32,140 --> 00:31:36,620
to work with i mean some of some of
these applications that I look at our up

392
00:31:36,620 --> 00:31:42,310
to stated and some but most aren't and
that makes it a lot easier to work with

393
00:31:42,310 --> 00:31:45,650
to figure out you know where the where
the stuff that I need a break is and

394
00:31:45,650 --> 00:31:50,470
actually break them and if it's that
easy to do to actually obfuscated I

395
00:31:50,470 --> 00:31:54,540
don't see why you're not doing it at the
very least I can convince an attacker to

396
00:31:54,540 --> 00:31:59,870
pick you know low-hanging fruit in your
own application and and there are other

397
00:31:59,870 --> 00:32:05,890
you know solutions that people swear
failsafe parks and all about their

398
00:32:05,890 --> 00:32:11,830
magical obfuscation but it's just kind
of a simple thing to do that at least

399
00:32:11,830 --> 00:32:20,460
help I mentioned that your public key is
the way that Google identifies you and

400
00:32:20,460 --> 00:32:22,890
actually you know

401
00:32:22,890 --> 00:32:28,070
handles the purchase low right so
basically you say hey my customers would

402
00:32:28,070 --> 00:32:32,300
like to purchase items this is my public
key you know they look at your public

403
00:32:32,300 --> 00:32:36,280
like oh this is developer blah this guy
but this thing and we're going to put

404
00:32:36,280 --> 00:32:41,590
this money in their account so whether
or not you think this is a flawed

405
00:32:41,590 --> 00:32:47,560
process which you could certainly argue
effectively it's the way it is and so

406
00:32:47,560 --> 00:32:52,210
Google says hey obfuscated your public
key because that's the thing that we do

407
00:32:52,210 --> 00:32:57,260
now because if you don't someone can
take your binary take your public key

408
00:32:57,260 --> 00:33:02,290
output bears in recompile distribute
announcing time somebody buys it saying

409
00:33:02,290 --> 00:33:07,950
they're getting your money and so that
such i mean there's there's really no

410
00:33:07,950 --> 00:33:12,820
two ways about it i mean that's that's
poor design but it is what developers

411
00:33:12,820 --> 00:33:17,780
have to work with so if you do want to
get your money you should try to make

412
00:33:17,780 --> 00:33:22,190
sure that your public key is less
exposed than it could be so that people

413
00:33:22,190 --> 00:33:33,580
can easily replace it and and get your
money and then here is really the the

414
00:33:33,580 --> 00:33:39,280
real big one which is don't use modified
code that you downloaded off the

415
00:33:39,280 --> 00:33:48,520
internet I see this a lot these days
especially in mobile but you know we're

416
00:33:48,520 --> 00:33:52,410
somewhere like I'll see some interesting
comment like don't use this and then

417
00:33:52,410 --> 00:33:57,930
I'll copy paste this code and it turns
out it came from github repo of this guy

418
00:33:57,930 --> 00:34:01,780
just kind of shine like a proof of
concept of how to implement you know RSA

419
00:34:01,780 --> 00:34:06,010
Android user yeah this is my school
project is they don't use this and then

420
00:34:06,010 --> 00:34:11,399
you see that in like a production
banking at night while I should have

421
00:34:11,399 --> 00:34:17,490
this happen and when people don't i mean
it's just that's that's the really

422
00:34:17,490 --> 00:34:21,220
critical one because if I understand
that it's hard sometimes to implement

423
00:34:21,220 --> 00:34:25,330
certain functionality but you can't just
download something that you have

424
00:34:25,330 --> 00:34:29,409
invented and used that I mean I think
stuff like hardly has already shown us

425
00:34:29,409 --> 00:34:33,429
that even you know well established
libraries and programs in like fashion

426
00:34:33,429 --> 00:34:35,300
OpenSSL

427
00:34:35,300 --> 00:34:38,660
have these longstanding vulnerabilities
that people haven't actually comes

428
00:34:38,660 --> 00:34:42,250
through and found so if these things are
problematic

429
00:34:42,250 --> 00:34:47,190
free code that you just get off of you
know get Harbor Stack Overflow are even

430
00:34:47,190 --> 00:34:53,570
bigger issues and we need to make sure
that you know we're not just downloading

431
00:34:53,570 --> 00:34:56,990
that stuff and putting in invented
malicious code into our into our

432
00:34:56,990 --> 00:35:03,030
applications and I i mean I remember
when I was first looking through this

433
00:35:03,030 --> 00:35:08,860
stuff most application most Android apps
were either using this I T helper that

434
00:35:08,860 --> 00:35:12,300
they literally copy pasted from Google
or there is a like stackoverflow

435
00:35:12,300 --> 00:35:15,470
question that was like I'm having
trouble implementing you know in a

436
00:35:15,470 --> 00:35:19,100
building in my application you can you
help me here and somebody like oh here's

437
00:35:19,100 --> 00:35:25,420
an example and then we should find that
example Stack Overflow answer in tons of

438
00:35:25,420 --> 00:35:30,590
these top grossing apps and no going
back to earlier these guys have a lot of

439
00:35:30,590 --> 00:35:34,230
money and development or should have a
lot of you have a lot of money so they

440
00:35:34,230 --> 00:35:38,210
should have a lot of development
resources and they could be doing things

441
00:35:38,210 --> 00:35:44,170
better and so ultimately our job is Penn
testers is to learn to recognize you

442
00:35:44,170 --> 00:35:48,180
know these sorts of issues will you know
when we're testing mobile applications

443
00:35:48,180 --> 00:35:53,230
that have in-app purchases you know it's
it's there's things you can look for to

444
00:35:53,230 --> 00:35:56,350
see if they're doing it right after
doing it wrong and hopefully we can

445
00:35:56,350 --> 00:36:00,570
implement that we can use that knowledge
to actually tell our customers what they

446
00:36:00,570 --> 00:36:08,530
need to be doing better and that's
essentially it you know that as security

447
00:36:08,530 --> 00:36:13,370
professionals that's our job we can help
developers do things right we can help

448
00:36:13,370 --> 00:36:18,220
them spot the mistakes and actually
implement the stuff properly it's

449
00:36:18,220 --> 00:36:25,610
definitely doable there are good cases
top of my head

450
00:36:25,610 --> 00:36:29,970
there's like the comiXology which sells
no comic books digital comic books and

451
00:36:29,970 --> 00:36:33,410
they have an Android application that
uses in-app purchases and they do all

452
00:36:33,410 --> 00:36:37,540
the things right i mean aidid keep all
their content on the server side dishes

453
00:36:37,540 --> 00:36:42,870
and they do all of their you know checks
and stuff on the server side and so you

454
00:36:42,870 --> 00:36:48,900
can actually get free comics which sucks
for me but at least you know they're

455
00:36:48,900 --> 00:36:59,440
doing things properly and so I'm
effectively finished so we have to take

456
00:36:59,440 --> 00:37:12,990
my death not really not directly no I
mean there's no mean because if you did

457
00:37:12,990 --> 00:37:17,850
I would just rewrite your codes that you
don't it's the same sort of way like

458
00:37:17,850 --> 00:37:21,110
root detection is pointless because you
know to run Cydia for example you need

459
00:37:21,110 --> 00:37:28,060
to have read write and so so that kind
of breaks that there are certain things

460
00:37:28,060 --> 00:37:34,190
you let people try to claim like parks
and definitely claims that they can you

461
00:37:34,190 --> 00:37:38,490
work around some of that stuff but I
haven't actually seen dat of it really

462
00:37:38,490 --> 00:37:43,500
supports it where they can actually
detect you know city at runtime it's

463
00:37:43,500 --> 00:37:50,840
ultimately if laws that architecture of
Android and I don't really know if

464
00:37:50,840 --> 00:37:54,910
there's anything you can do about that
in the same way that you can't control

465
00:37:54,910 --> 00:38:00,090
the way your javascript is going to be
executed on a client browser and so the

466
00:38:00,090 --> 00:38:05,390
only real solution is you know except
that except that the client can be

467
00:38:05,390 --> 00:38:21,710
trusted and what do we do now I always
are Qatar the way that iOS implements

468
00:38:21,710 --> 00:38:27,700
in-app purchases is completely different
but also breakable but you know because

469
00:38:27,700 --> 00:38:31,480
I mean I'm just completely different
platforms so that's why I discovered one

470
00:38:31,480 --> 00:38:36,490
but there are you know crack binaries
for iOS apps it's a lot of the similar

471
00:38:36,490 --> 00:38:44,470
kinds of stuff that you would see on
Android and it's harder because

472
00:38:44,470 --> 00:38:48,800
runtime code injection is is something
you can do on iOS to it's it's it's a

473
00:38:48,800 --> 00:38:53,210
little harder than it is on Android but
you could do the same kind of thing with

474
00:38:53,210 --> 00:38:59,160
mobile substrate which is the iOS
version because ultimately this whole

475
00:38:59,160 --> 00:39:04,770
idea of client-side trust is just very
weak and mobile from what I have seen

476
00:39:04,770 --> 00:39:12,030
where we've learned a lot of this stuff
from the web but you look at you know

477
00:39:12,030 --> 00:39:16,090
a lot of I mean we're just looking at a
banking at the other day and they have

478
00:39:16,090 --> 00:39:20,840
been protection right and it's literally
just a function that you can look and

479
00:39:20,840 --> 00:39:27,340
say oh never mind games good and that's
to protect your money I mean so for some

480
00:39:27,340 --> 00:39:31,950
reason a lot of these lessons from the
web haven't translated to Android and

481
00:39:31,950 --> 00:39:55,460
iOS ya know honest especially as
entrenched as they are at this point and

482
00:39:55,460 --> 00:40:01,850
this fine to their life cycle but most
popular games now our online I mean if

483
00:40:01,850 --> 00:40:05,730
you look at the top you know 100 that I
should you at the beginning like they're

484
00:40:05,730 --> 00:40:10,860
almost all online games a lot of them
are competitive so they actually have

485
00:40:10,860 --> 00:40:15,590
some kind of server infrastructure that
they could be leveraging but aren't and

486
00:40:15,590 --> 00:40:20,360
some of most of what we're talking about
here isn't going to incur a huge

487
00:40:20,360 --> 00:40:35,830
additional load on the system that's the
good thing is that thing like their

488
00:40:35,830 --> 00:40:41,820
sample code has a big disclaimer that
says we don't include this stuff yeah I

489
00:40:41,820 --> 00:40:45,680
mean they literally say hey we don't
include the security token because that

490
00:40:45,680 --> 00:40:49,770
would just make this whole already
confusing process i mean you can tell

491
00:40:49,770 --> 00:40:53,850
from the way they write things that they
understand that their API is really hard

492
00:40:53,850 --> 00:40:57,810
to use and so they've really stripped
down there examples so that they're easy

493
00:40:57,810 --> 00:41:02,500
to use but then you stopped a lot of
security and so they're aware of that

494
00:41:02,500 --> 00:41:06,050
and I guess it just kind of cover their
bases by

495
00:41:06,050 --> 00:41:11,450
you know by saying hey don't use this
but also the the API has evolved in the

496
00:41:11,450 --> 00:41:18,180
last year so they've added some extra
checks that Google does on there and but

497
00:41:18,180 --> 00:41:23,580
ultimately this checks get sent back to
the client and then you know that can be

498
00:41:23,580 --> 00:41:27,090
made that point so mean they're trying
but they there's only so much they can

499
00:41:27,090 --> 00:41:44,780
do because they don't hold your content
and that's really the key yes absolutely

500
00:41:44,780 --> 00:41:51,910
on a non rooted device if so here's the
thing you want to do see some of the

501
00:41:51,910 --> 00:41:57,210
stuff on a non rooted device you could
download a cracked by an area that does

502
00:41:57,210 --> 00:42:02,310
things differently so you know like a
crack cracked clash of clans are cracked

503
00:42:02,310 --> 00:42:07,280
like for example you can do laundry
device you can run a Windows desktop

504
00:42:07,280 --> 00:42:12,270
application that will talk to your clash
of clans and secure energy crystals or

505
00:42:12,270 --> 00:42:15,430
whatever their IP currency as to
whatever you want

506
00:42:15,430 --> 00:42:20,560
on a on a large scale you cannot
manipulate intense from another process

507
00:42:20,560 --> 00:42:24,420
unless you have ripped that's one of the
protections of that's that's exactly

508
00:42:24,420 --> 00:42:27,790
what the mechanism is supposed to
protect you against right is that

509
00:42:27,790 --> 00:42:32,770
another process is not going to mass
with your memory and your data it's just

510
00:42:32,770 --> 00:42:44,080
that once you have ruled that out the
window

511
00:42:44,080 --> 00:42:47,640
general user would use Download a
modified version of the application

512
00:42:47,640 --> 00:42:55,660
which doesn't require root because then
you've modified the application itself

513
00:42:55,660 --> 00:43:01,030
nobody would I guess what I'm saying is
you wouldn't have to at that point

514
00:43:01,030 --> 00:43:06,299
because you know what I did was I modify
the behavior of candy pressure right in

515
00:43:06,299 --> 00:43:12,710
at runtime I could have also just you
know he compiled code modified and

516
00:43:12,710 --> 00:43:16,400
recompiled which is what these crack
binaries do and so then you don't have

517
00:43:16,400 --> 00:43:42,730
to worry about having ruled that point
no no no no one should be manipulated by

518
00:43:42,730 --> 00:43:56,220
different processes questions it's not
where I will thank you very much

519
00:43:56,220 --> 00:44:02,430
you have any other questions or if you
happen across an interesting idea season

520
00:44:02,430 --> 00:44:07,400
UD like you know about it I'll be happy
to talk to you about in or around

