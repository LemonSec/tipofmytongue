1
00:00:00,000 --> 00:01:04,839
an introduction to real-world
cryptography

2
00:01:04,839 --> 00:01:11,119
cover today in a relatively short amount
of time this is a somewhat ambitious

3
00:01:11,119 --> 00:01:15,070
talk and that about 25 minutes to cover
a huge amount of information so I'm

4
00:01:15,070 --> 00:01:18,990
gonna go kinda quick and I'm going to do
my best not to his entire process here

5
00:01:18,990 --> 00:01:23,619
so I A

6
00:01:23,619 --> 00:01:28,299
independent security researcher and
software developer more than fifty years

7
00:01:28,299 --> 00:01:29,790
experience

8
00:01:29,790 --> 00:01:37,360
security has been a major focus of my
job my entire career and one of the real

9
00:01:37,360 --> 00:01:42,229
people that has a real passion for both
development and for security and all too

10
00:01:42,229 --> 00:01:45,930
often there is a gap between those two
worlds so anytime I have the chance I

11
00:01:45,930 --> 00:01:55,740
tried to break I try to bring these two
communities together so today

12
00:01:55,740 --> 00:01:59,210
I hope everybody here is one walk away
with a better understanding of

13
00:01:59,210 --> 00:02:07,220
cryptography is a very challenging world
but very rewarding area to study also

14
00:02:07,220 --> 00:02:12,190
think I'm hoping that you'll end up with
a better respect for the care that's

15
00:02:12,190 --> 00:02:15,510
needed for dealing with cryptography
because of the difficulties that come

16
00:02:15,510 --> 00:02:24,910
with this talk is about giving you a
brief introduction this doesn't mean

17
00:02:24,910 --> 00:02:29,959
that after the stalk you would sit down
and write a NSA approved chat

18
00:02:29,959 --> 00:02:37,989
application or no sit down on your
laptop and break RSA what you should be

19
00:02:37,989 --> 00:02:41,920
able to do is be able to talk
intelligently with other people when the

20
00:02:41,920 --> 00:02:43,830
topic turned to cryptography

21
00:02:43,830 --> 00:02:46,930
enough of the basics to understand
what's going on

22
00:02:46,930 --> 00:02:53,720
fully you will then choose to do more
research on your own

23
00:02:53,720 --> 00:03:05,519
the talk we can learn more about the
topic so the goal here is to impart as

24
00:03:05,519 --> 00:03:12,549
much knowledge as I possibly can in 25
minutes on this one is important in this

25
00:03:12,549 --> 00:03:16,100
is something that everybody needs to
understand

26
00:03:16,100 --> 00:03:23,000
cryptography just the first talked about
what he gets for too many ppl

27
00:03:23,000 --> 00:03:28,020
cryptography is seen as a magical fairy
dust can sprinkle on to something that

28
00:03:28,020 --> 00:03:35,230
wouldn't do it with security I think we
all know the doctor when you just wake

29
00:03:35,230 --> 00:03:40,950
cryptography often does more harm than a
dozen good it provides a false sense of

30
00:03:40,950 --> 00:03:46,000
security and it provides a layer of of
obscurity and it's hard to understand

31
00:03:46,000 --> 00:03:53,520
what a system or protocol is even doing
photography can be a great and powerful

32
00:03:53,520 --> 00:03:59,540
tool when used correctly when used as
part of a system that is properly

33
00:03:59,540 --> 00:04:06,580
designed proper design though is far
more challenging than most people

34
00:04:06,580 --> 00:04:14,900
realize there is much that must be
understood even seemingly simple design

35
00:04:14,900 --> 00:04:20,959
properties if you don't understand how
things in iraq can end up exposing fatal

36
00:04:20,960 --> 00:04:28,840
flaws in the system can anyone hear
guess the most common reason that a

37
00:04:28,840 --> 00:04:34,440
cryptosystem fails

38
00:04:34,440 --> 00:04:44,660
sensible people making steaks almost all
over almost all of them are simple

39
00:04:44,660 --> 00:04:49,730
avoidable mistakes that occurred because
they didn't have a solid understanding

40
00:04:49,730 --> 00:04:54,689
of what they were doing

41
00:04:54,689 --> 00:05:00,199
I'm not blaming people that have made
these mistakes because they happen but

42
00:05:00,199 --> 00:05:02,610
there's a lot to learn there's a lot to
understand when you're putting together

43
00:05:02,610 --> 00:05:03,919
a system like this

44
00:05:03,919 --> 00:05:09,219
anytime that you don't talk of either
interactions that are not obvious but

45
00:05:09,219 --> 00:05:12,479
you have to understand it to make the
system more correctly

46
00:05:12,479 --> 00:05:19,469
almost all of the significant failures
over the last several years have been a

47
00:05:19,469 --> 00:05:28,669
direct result of somebody making an
avoidable mistake this list covers all

48
00:05:28,669 --> 00:05:36,329
of the key topics you need to understand
when discussing crypto

49
00:05:36,329 --> 00:05:41,829
attention here you walk away with enough
understanding of the stuff to hold up

50
00:05:41,829 --> 00:05:50,059
your end of a conversation so it's like
that encryption for symmetric or secret

51
00:05:50,059 --> 00:05:55,899
key encryption algorithms fall into two
basic types stream ciphers and block

52
00:05:55,899 --> 00:06:07,489
ciphers since I first are fairly simple
they are typically very fast and they're

53
00:06:07,489 --> 00:06:12,809
fairly easy to understand they really
aren't that complicated generally a

54
00:06:12,809 --> 00:06:17,069
stream cipher is a strong

55
00:06:17,069 --> 00:06:24,599
a random number generator where you use
the key as the seed

56
00:06:24,599 --> 00:06:29,819
the output that it generates which is
referred to as a g-string it explored

57
00:06:29,819 --> 00:06:34,620
with a plain text 0424 text it's a very
simple operation

58
00:06:34,620 --> 00:06:39,760
so the RNG random number generator
creates a shaky stream that is the same

59
00:06:39,760 --> 00:06:45,650
link as a plain text in function this is
very similar to a one-time pan that was

60
00:06:45,650 --> 00:06:51,630
in some cases extremely successful
during ww2 in shortly after and in other

61
00:06:51,630 --> 00:06:53,590
cases failed completely

62
00:06:53,590 --> 00:06:58,740
the problem the one-time pad is your
message can only be the size of the key

63
00:06:58,740 --> 00:07:02,690
and since you're keen your message or
the same size makes it kind of hard to

64
00:07:02,690 --> 00:07:07,070
transmit your key is if you have a
secure me to Trenton Vicky Pope you can

65
00:07:07,070 --> 00:07:19,800
just use your message on the topic of
our C four was probably the single most

66
00:07:19,800 --> 00:07:27,620
popular general purpose stream cipher in
use and it's a great example today of

67
00:07:27,620 --> 00:07:33,410
what happens when an algorithm fails and
how it can cause issues many years after

68
00:07:33,410 --> 00:07:44,830
the fact our c4 happens to be very very
fast because of its speed and its ease

69
00:07:44,830 --> 00:07:49,139
of implementation there's actually
challenge a while back trying to fit in

70
00:07:49,139 --> 00:07:59,680
a hierarchy for implementation works at
a very simple algorithm because of this

71
00:07:59,680 --> 00:08:09,860
became extremely popular especially in
the world of tell us but while it was

72
00:08:09,860 --> 00:08:20,820
becoming popular being noticed an estate
back to 1995 by then it was understood

73
00:08:20,820 --> 00:08:26,030
it was no problem is nobody understood
how far they want

74
00:08:26,030 --> 00:08:35,860
in 2001 a major attack was released that
allowed the other primaries or Farsi for

75
00:08:35,860 --> 00:08:44,560
web to be easily broken after the attack
in 2001 it was largely considered

76
00:08:44,560 --> 00:08:52,220
insignificant by the Economic Community
it was broken it was boring now moved on

77
00:08:52,220 --> 00:08:56,730
to other things so for many years

78
00:08:56,730 --> 00:09:02,300
our C four was basically ignored there
was no real research going on there were

79
00:09:02,300 --> 00:09:09,790
attacks released in 2005 2007 but they
weren't that significant and like I said

80
00:09:09,790 --> 00:09:12,550
for the most part the academic community
just simply moved on and didn't care

81
00:09:12,550 --> 00:09:21,470
anymore unfortunately nobody else was
paying attention to this pls continue to

82
00:09:21,470 --> 00:09:28,080
use our c4 as did all kinds of systems
across the world it was still incredibly

83
00:09:28,080 --> 00:09:37,560
popular despite the fact that was going
to be fought in 2011 said the attack was

84
00:09:37,560 --> 00:09:42,840
announced which was attack against

85
00:09:42,840 --> 00:09:49,390
CBC mode as implemented

86
00:09:49,390 --> 00:09:54,290
the best short-term fix that was
available at the time was to stop using

87
00:09:54,290 --> 00:10:02,740
ASM transfer all your traffic over to
our C four which is exactly what this

88
00:10:02,740 --> 00:10:13,330
points most Internet traffic was our c4
kept it just known algorithm was

89
00:10:13,330 --> 00:10:21,140
encrypting everything the one good thing
that came out of this is it put or c4

90
00:10:21,140 --> 00:10:24,250
back on the radar for the academic
community they realize they still need

91
00:10:24,250 --> 00:10:29,570
to look at this one it wasn't dead yet

92
00:10:29,570 --> 00:10:33,700
early days it was known that there were
certain biases in the first few bites of

93
00:10:33,700 --> 00:10:44,540
the G string certain values came up more
often in 2013 the academic community

94
00:10:44,540 --> 00:10:53,620
finally finished the way you think there
is actually pattern

95
00:10:53,620 --> 00:11:01,710
the beginning of the key string if that
was done correctly you just see random

96
00:11:01,710 --> 00:11:05,920
there should be no parent should be no
discernible anything the fact that

97
00:11:05,920 --> 00:11:09,630
you're seeing this nation that there is
a clear pattern to it being generated

98
00:11:09,630 --> 00:11:17,330
the biases that were thought to be only
the first you might actually extend

99
00:11:17,330 --> 00:11:23,870
throughout the quiche with enough
connections it possible for an attacker

100
00:11:23,870 --> 00:11:27,870
to recover the key and decrypt

101
00:11:27,870 --> 00:11:34,660
get back to the plaintext in general in
cryptography it's rare for an algorithm

102
00:11:34,660 --> 00:11:39,710
to fail but when it does it tends to be
catastrophic r/c force a great example

103
00:11:39,710 --> 00:11:43,570
of that

104
00:11:43,570 --> 00:11:50,400
block ciphers are in some ways simpler
and more complex where ships are for can

105
00:11:50,400 --> 00:11:58,100
least theoretically handle plain text of
any size block ciphers can only encrypt

106
00:11:58,100 --> 00:12:04,050
up to their blocks ice for a yes that's
a hundred twenty eight deaths 16 points

107
00:12:04,050 --> 00:12:11,660
that's all you can encrypt show to make
it useful to go beyond that we introduce

108
00:12:11,660 --> 00:12:20,970
block notes which are a higher level
operating they impact they they define

109
00:12:20,970 --> 00:12:26,490
how blush reflected in how one block
affects others around it the most common

110
00:12:26,490 --> 00:12:35,440
block mode is CBC or cipher block
chaining for the first block user random

111
00:12:35,440 --> 00:12:41,860
I V or initialization vector exercise
that was a plain text before performing

112
00:12:41,860 --> 00:12:47,930
the encrypt operation for subsequent
blocks it uses decipher text of the last

113
00:12:47,930 --> 00:12:53,000
block as its Ivy this way every block is
different you don't get patterns in your

114
00:12:53,000 --> 00:13:00,800
data there are many many different modes
they're used some are good some are bad

115
00:13:00,800 --> 00:13:15,070
here see this image before the lights

116
00:13:15,070 --> 00:13:20,690
this is for those that don't know what
you get when you encrypt a bitmap of

117
00:13:20,690 --> 00:13:30,550
talks in ECB mode ECB mode is basically
just encryption operation performed 16

118
00:13:30,550 --> 00:13:35,430
nothing is carried forward nothing is
altered nothing has changed

119
00:13:35,430 --> 00:13:45,960
ECB mood is actually dangerous in many
if not most cases it's something to be

120
00:13:45,960 --> 00:13:51,560
avoided if at all possible what you're
seeing here is the amount of structure

121
00:13:51,560 --> 00:13:58,920
that is being leaked for Sun some types
of data structure can reveal what's

122
00:13:58,920 --> 00:14:06,470
actually in there as you can see here at
one point sometime back I was doing some

123
00:14:06,470 --> 00:14:14,070
research on snapchat as an interesting
note they use a hard-coded key in the

124
00:14:14,070 --> 00:14:18,230
application to encrypt their images
before they're being sent to the server

125
00:14:18,230 --> 00:14:30,530
their images are encrypted and ECB mode
when the sued snapchat for misleading

126
00:14:30,530 --> 00:14:34,850
customers about the security of the
application they act the FTC actually

127
00:14:34,850 --> 00:14:40,790
use my research to prove that snapshot
was aware of the problems and win they

128
00:14:40,790 --> 00:14:41,700
became aware of it

129
00:14:41,700 --> 00:14:48,300
proving that they have been like four
years in general you should never use

130
00:14:48,300 --> 00:14:52,210
ECB mode for anything it's dangerous
whenever possible you should be using

131
00:14:52,210 --> 00:15:00,380
GCM note if you're free market Royce
doesn't provide GCM CBC with an HMAC is

132
00:15:00,380 --> 00:15:06,140
a acceptable alternative but not quite
as strong

133
00:15:06,140 --> 00:15:13,390
on the public key crypto we have
asymmetric or public key encryption this

134
00:15:13,390 --> 00:15:17,860
is my favorite area tour because allows
you to do things that if you stop and

135
00:15:17,860 --> 00:15:24,650
think about is really quite fascinating
being able to exchange encrypted

136
00:15:24,650 --> 00:15:30,260
messages without revealing a key is a
remarkable thing I can send you

137
00:15:30,260 --> 00:15:36,230
something and nobody else has inability
to see it unless they possess the same

138
00:15:36,230 --> 00:15:43,460
private key you do modern public key
encryption also falls in two basic types

139
00:15:43,460 --> 00:15:49,340
and they are primarily defined by what
hard math problem you have to solve to

140
00:15:49,340 --> 00:15:58,060
completely shattered that for me it is
so clean so simple

141
00:15:58,060 --> 00:16:03,010
the concepts behind our assay were first
detailed unclassified research in 1973

142
00:16:03,010 --> 00:16:07,890
four years later the concept was
independently rediscovered published

143
00:16:07,890 --> 00:16:20,280
publicly which leaves us with RSA RSA it
is still a key factor in chill us it is

144
00:16:20,280 --> 00:16:23,710
becoming less popular because of
performance and other issues but it is

145
00:16:23,710 --> 00:16:30,410
still widely used as you can see here
the math behind our assay is actually

146
00:16:30,410 --> 00:16:34,800
fairly simple to encrypt you simply take
a message as a binary number raised it

147
00:16:34,800 --> 00:16:36,860
to a certain value called E

148
00:16:36,860 --> 00:16:44,130
in we're in is the product of two secret
prime numbers the values for CNN are

149
00:16:44,130 --> 00:16:50,060
both part of the public he their public
knowledge but without knowing what to

150
00:16:50,060 --> 00:16:57,320
prime numbers made up in there is no way
to complete the secret operation

151
00:16:57,320 --> 00:17:01,560
take a system secures the two prime
numbers in play have to be quite large

152
00:17:01,560 --> 00:17:09,810
today it's considered an in of less than
2048 bitch isn't secure easy on the

153
00:17:09,810 --> 00:17:16,730
other hand is just a little bit more
complex while ECU or elliptic curve

154
00:17:16,730 --> 00:17:20,760
cryptography was first developed in 1985
it's only in the last few years and it's

155
00:17:20,760 --> 00:17:27,949
been in widespread use this is largely
due to various patent issues complex

156
00:17:27,949 --> 00:17:32,920
topic not gonna get into it I will say
though that it has closed a sale last

157
00:17:32,920 --> 00:17:41,660
four years the public Red Hat threads on
the topic are absolutely fantastic

158
00:17:41,660 --> 00:17:46,050
there are implementations though
suggests curve to 5519 that are

159
00:17:46,050 --> 00:17:49,340
completely unencumbered the code is in
the public domain there are no patents

160
00:17:49,340 --> 00:17:54,700
are no trademarks know nothing he says
he has a major advantages over IRAs

161
00:17:54,700 --> 00:18:00,940
saying the keys are smaller at the 128th
pitch security level keys are on 256

162
00:18:00,940 --> 00:18:12,390
bits and links RSA at that same security
level is 3072 bets is much faster than

163
00:18:12,390 --> 00:18:18,490
our essay which eliminates a lot of
scalability issues that come with it

164
00:18:18,490 --> 00:18:23,650
generation is also much simpler you
don't need these huge prime numbers it

165
00:18:23,650 --> 00:18:28,310
is basically a random number there is no
she was certain curves there is no

166
00:18:28,310 --> 00:18:31,670
structure to it whatsoever is literally
a random number

167
00:18:31,670 --> 00:18:41,730
hashing functions contacted a frequently
were block cipher scrambles data in such

168
00:18:41,730 --> 00:18:44,950
a way that it can be reversed if you
know certain secret hash functions are

169
00:18:44,950 --> 00:18:49,580
one-way operations there is no efficient
way of getting back to the input value

170
00:18:49,580 --> 00:18:57,000
and efficient being defined as anything
less than brute force in 25 still widely

171
00:18:57,000 --> 00:18:59,250
used thankfully is being phased out

172
00:18:59,250 --> 00:19:02,750
secure is completely broken if you're if

173
00:19:02,750 --> 00:19:05,840
and if I should not be used

174
00:19:05,840 --> 00:19:12,510
sure one was designed by the NSA to
replace indy five it also broken jaw to

175
00:19:12,510 --> 00:19:20,680
which was also designed by the NSA this
time to replace shot one has actually

176
00:19:20,680 --> 00:19:26,110
hold up fairly well it has multiple
output prices shot shot who is also

177
00:19:26,110 --> 00:19:31,950
known as shot 56 shot 34 and chopped 512
which is about to get confusing because

178
00:19:31,950 --> 00:19:40,980
we now have shot three which also has
output of 256 384 512 that's the big

179
00:19:40,980 --> 00:19:44,070
difference between shots which are three
ish i three in a completely different

180
00:19:44,070 --> 00:19:49,440
type of structure it was selected from a
contest it was not designed by the NSA

181
00:19:49,440 --> 00:19:59,690
the security level 32 is roughly
equivalent at this point I'd like to be

182
00:19:59,690 --> 00:20:08,870
the best research candidate for the SHA
three competition was Blake after

183
00:20:08,870 --> 00:20:17,610
another candidate one debate team came
back to it is faster than 85 and a

184
00:20:17,610 --> 00:20:22,930
secure shot three with variable output
so if you're retrofitting a system that

185
00:20:22,930 --> 00:20:27,920
uses him 25 it is a great option

186
00:20:27,920 --> 00:20:33,520
password storage

187
00:20:33,520 --> 00:20:41,070
have to decrypt a script passwords or
anything else it's plain and simple PDF

188
00:20:41,070 --> 00:20:45,540
to is common it easy to implement but it
has enough memory

189
00:20:45,540 --> 00:20:52,240
the big thing to take away from this one
is you've got to find a balance with his

190
00:20:52,240 --> 00:20:53,610
stuff because

191
00:20:53,610 --> 00:20:58,080
if you go something like a script with
the top trainers it will bring your

192
00:20:58,080 --> 00:21:02,390
service to an absolute crawl so finding
the balance on how to protect passwords

193
00:21:02,390 --> 00:21:08,850
is tricky I'm sure all of you know speed
kills when it comes to password hashing

194
00:21:08,850 --> 00:21:14,040
29 runs a company that they build
password cracking rick's if you look at

195
00:21:14,040 --> 00:21:18,750
this chart this is based off of a single
GPU system that he recently built in

196
00:21:18,750 --> 00:21:29,030
millions per second indy five it is
modern GPUs can just absolutely destroy

197
00:21:29,030 --> 00:21:29,540
it

198
00:21:29,540 --> 00:21:40,419
this is another one of his systems a
cheap use one box and they close to

199
00:21:40,419 --> 00:21:44,950
these things together for certain
unnamed alliance that want to crack

200
00:21:44,950 --> 00:21:56,100
anything but he's together it's pretty
effective validating data there are

201
00:21:56,100 --> 00:22:02,520
various programs DSA ECDs AEDT si than
others

202
00:22:02,520 --> 00:22:07,890
these are all built on public key crypto
they allow you to verify the message is

203
00:22:07,890 --> 00:22:13,780
from somebody holding a specific private
key while widely used BSA must be used

204
00:22:13,780 --> 00:22:20,500
with extreme care it relies on a good
random number generator if the RNG fails

205
00:22:20,500 --> 00:22:26,770
it can expose the private key on the
symmetric side there are Macs or message

206
00:22:26,770 --> 00:22:31,540
authentication codes these are
effectively secret key signatures if you

207
00:22:31,540 --> 00:22:38,309
know the secret key you can compute the
Mac and verify that the data when

208
00:22:38,309 --> 00:22:48,460
implementing this H Mac which is a hash
based Mac using a strong hash function

209
00:22:48,460 --> 00:22:51,590
a one other thing that's important to
note here is something that should

210
00:22:51,590 --> 00:22:57,860
always be remembered never reuse your
Christian he's if you are encrypting

211
00:22:57,860 --> 00:23:02,410
entering the Mac from the same piece of
data use different keys if you use the

212
00:23:02,410 --> 00:23:06,100
same key you can reveal information
which could allow both of them to be

213
00:23:06,100 --> 00:23:11,660
broken right here

214
00:23:11,660 --> 00:23:19,230
an example of the DSA issue this but
Sony in 2013

215
00:23:19,230 --> 00:23:22,800
community fairly hard because an issue
with Bitcoin wallet to have been

216
00:23:22,800 --> 00:23:26,650
generated off of Android devices because
the random number generator was

217
00:23:26,650 --> 00:23:32,930
improperly seated that reveal patterns
in the signatures next thing you know

218
00:23:32,930 --> 00:23:36,520
somebody has the private key and in the
Bitcoin world if somebody has your

219
00:23:36,520 --> 00:23:43,970
private key they have your money which
is exactly what happened I could spend

220
00:23:43,970 --> 00:23:47,690
an hour on this one just bites off
random number generators are fascinating

221
00:23:47,690 --> 00:23:55,540
topic and something that you've got to
be very very careful with the device

222
00:23:55,540 --> 00:23:59,700
would give you at this point is simply
use the operating system provided random

223
00:23:59,700 --> 00:24:05,200
number generator don't use usual and
generators and for the love of god don't

224
00:24:05,200 --> 00:24:13,400
try to rally around if you're using some
nicks various UN used f you random not

225
00:24:13,400 --> 00:24:19,940
random you r and using Windows Script
Jen random if using anything else you

226
00:24:19,940 --> 00:24:22,140
doing it wrong

227
00:24:22,140 --> 00:24:31,070
you want to learn more by this book this
is the single best piece of material

228
00:24:31,070 --> 00:24:37,530
available today on practical applied
cryptography she does a lot of stuff out

229
00:24:37,530 --> 00:24:42,570
there that goes deep into theory that
goes deep into the mass for most people

230
00:24:42,570 --> 00:24:45,930
you need to know that you need to know
how to apply it that's one thing I

231
00:24:45,930 --> 00:24:52,350
really like about this book there are
projects such as the underhanded crypto

232
00:24:52,350 --> 00:24:56,270
contest that study different ways that
intentional floss to be introduced to

233
00:24:56,270 --> 00:25:03,990
understand their impact if you want to
understand how systems are affected by

234
00:25:03,990 --> 00:25:08,980
the flaws that can be introduced either
intentionally or otherwise the results

235
00:25:08,980 --> 00:25:14,360
being produced by this contest are
absolutely fantastic some great material

236
00:25:14,360 --> 00:25:20,400
there and what that everybody thank you
so much I think I nailed it I'm

237
00:25:20,400 --> 00:25:23,080
perfectly thanks

