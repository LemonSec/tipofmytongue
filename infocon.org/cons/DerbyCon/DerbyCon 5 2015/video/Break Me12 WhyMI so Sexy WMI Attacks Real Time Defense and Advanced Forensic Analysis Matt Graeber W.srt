1
00:00:00,000 --> 00:00:04,150
around here cuz we got something for
everything something for everyone here

2
00:00:04,150 --> 00:00:09,620
you know if you don't have not too
familiar W my maybe think the product

3
00:00:09,620 --> 00:00:12,860
name is actually why am I so sexy it's
ok you're in the right place we've got

4
00:00:12,860 --> 00:00:13,440
you covered

5
00:00:13,440 --> 00:00:17,320
will teach you how to do this after the
Red tumors in the room were gonna be

6
00:00:17,320 --> 00:00:21,880
teaching you some really neat techniques
here in my experience there is actually

7
00:00:21,880 --> 00:00:26,269
I've seen organizations that are ready
and prepared to deal with attacks a

8
00:00:26,269 --> 00:00:33,520
highly leveraged W my and are there any
blue teams in their own if there are any

9
00:00:33,520 --> 00:00:34,460
kind of scare you

10
00:00:34,460 --> 00:00:40,840
good that's a good attitude to have but
it did scare you

11
00:00:40,840 --> 00:00:44,680
we got a lot of information for you as
well to deal with attacks in real time

12
00:00:44,680 --> 00:00:48,610
to actually have an active decent
defense and also to do offline

13
00:00:48,610 --> 00:00:52,350
investigation after the fact figure out
what happened we got information to

14
00:00:52,350 --> 00:00:59,980
cover i dont wanna spend time on this I
don't know it just happens it was

15
00:00:59,980 --> 00:01:02,360
probably China

16
00:01:02,360 --> 00:01:17,390
easy enough all right now it's on to
give us your insight alright so let's

17
00:01:17,390 --> 00:01:20,330
jump into a demo of an attack

18
00:01:20,330 --> 00:01:25,510
well first of all so you can own with
WMI what do you do next or first of all

19
00:01:25,510 --> 00:01:29,820
would you even know if your own with WMI
in reality there's very few

20
00:01:29,820 --> 00:01:35,270
organizations as well as you would
actually be able to 12 tax at their own

21
00:01:35,270 --> 00:01:41,960
with WMI and then properly remediated
after the facts right and until recently

22
00:01:41,960 --> 00:01:47,640
recently as in Vegas there was no
forensic like like dead this forensic

23
00:01:47,640 --> 00:01:54,100
parsing capability fortunately we have
some awesome parsing utilities now that

24
00:01:54,100 --> 00:01:58,470
can extract some really valuable
artifacts from the the W my repository

25
00:01:58,470 --> 00:02:05,680
right and then I would say that there's
a general lack of awareness of the

26
00:02:05,680 --> 00:02:10,720
offensive capabilities of W my so I hope
to share some of those to you and also

27
00:02:10,720 --> 00:02:17,870
there there's very few actual defensive
capabilities but there are one or two

28
00:02:17,870 --> 00:02:23,590
great ones out there already but let's
let's look at a quick demo here so here

29
00:02:23,590 --> 00:02:28,700
in this fictitious attack what I'm gonna
do from my attackers machine the the red

30
00:02:28,700 --> 00:02:35,950
the end is remotely install credit card
attracted a scraper on my victim using

31
00:02:35,950 --> 00:02:41,180
nothing but I'll be home so the trigger
for this payload on the victim machine

32
00:02:41,180 --> 00:02:47,120
will be whenever payment processor
databse is started on the victim it will

33
00:02:47,120 --> 00:02:53,040
launch this payload and so all this is
persisted remotely and installed

34
00:02:53,040 --> 00:02:56,910
remotely so now in our victim machine
here's our fictitious payment processor

35
00:02:56,910 --> 00:03:03,760
databse just gonna pay since some fake
track data fake but Val attracted

36
00:03:03,760 --> 00:03:10,890
so now the the payload has executed you
know unbeknownst to the victim and it's

37
00:03:10,890 --> 00:03:15,590
running through all the pages in memory
parsing out all the strings and if it

38
00:03:15,590 --> 00:03:21,579
detects the regex matches then you'll
get some nice pretty I'll play that

39
00:03:21,579 --> 00:03:27,860
you'll see yer and it's nice because
it'll be like a fully parts like pretty

40
00:03:27,860 --> 00:03:31,540
harsh objects so there you go

41
00:03:31,540 --> 00:03:35,950
okay so you were you were just own with
that so how would you go about detecting

42
00:03:35,950 --> 00:03:40,680
that and go about mining forensic
artifacts from that we're gonna gonna

43
00:03:40,680 --> 00:03:47,319
cover that will spend too much time an
introduction hear my name is William

44
00:03:47,319 --> 00:03:53,530
County an engineer have some background
in forensics running learning how to

45
00:03:53,530 --> 00:03:58,769
skateboard stuff like that let's get on
to the good content I'm at you don't

46
00:03:58,769 --> 00:04:04,319
already know I'm kind of a powershell
sampling I'm going to do the rest

47
00:04:04,319 --> 00:04:08,069
I don't recognize my me than a month
actually does not the nickname is my

48
00:04:08,069 --> 00:04:13,730
English translation of my name

49
00:04:13,730 --> 00:04:20,000
and I'm part of the team as well as
these two guys and a forensic research

50
00:04:20,000 --> 00:04:26,620
at work for guidance after doing in case
parsers for ten years and now I joined

51
00:04:26,620 --> 00:04:31,949
forces with his the guys and doing stuff
and I wanted to be a soak up there by my

52
00:04:31,949 --> 00:04:35,860
parents had a different idea so

53
00:04:35,860 --> 00:04:44,719
so now the outline ahora talk so far to
go in some background motivations and

54
00:04:44,719 --> 00:04:50,159
attack examples some W my basic switch
architecture of the quoted language the

55
00:04:50,159 --> 00:04:55,500
W my uses and inventing and the British
history of W my mother and their attacks

56
00:04:55,500 --> 00:05:02,180
lifecycle providers file format
investigation real-time communications

57
00:05:02,180 --> 00:05:09,639
jumping to the W my forensics do have a
mock investigation of the credit card

58
00:05:09,639 --> 00:05:19,210
scraper and then we'll talk about
defense and detection let's cover the

59
00:05:19,210 --> 00:05:20,009
basics

60
00:05:20,009 --> 00:05:25,860
already know what they are no W my as
you probably use PowerShell interface

61
00:05:25,860 --> 00:05:30,659
with other minor when McDonald's is
really popular amongst ancestors but so

62
00:05:30,659 --> 00:05:35,300
so what is it Windows Management
Instrumentation basically it's just a

63
00:05:35,300 --> 00:05:40,389
really powerful local and remote
administration framework so you can use

64
00:05:40,389 --> 00:05:46,150
it to mine all kinds of really useful
information to both an attacker and

65
00:05:46,150 --> 00:05:53,539
defender said you could use it to
remotely obtained registry keys to file

66
00:05:53,539 --> 00:05:56,889
US things what's great is that so

67
00:05:56,889 --> 00:06:02,779
W my is it's like a very object oriented
language so you can know there's a

68
00:06:02,779 --> 00:06:07,550
tunnel that there's thousands of
built-in W my classes and you can create

69
00:06:07,550 --> 00:06:12,860
your own so many of these objects also
have methods associated with them so I

70
00:06:12,860 --> 00:06:17,099
really popular one among the attackers
is the create method the static method

71
00:06:17,099 --> 00:06:21,199
in the win32 underscore process object
that enables you to execute code

72
00:06:21,199 --> 00:06:26,060
remotely so it's really really powerful
so there's a bunch of other available

73
00:06:26,060 --> 00:06:33,360
methods as well sort of the killer
feature to me for W my is has asshole

74
00:06:33,360 --> 00:06:38,180
like event subscription mechanism so you
can do both locally like so you want to

75
00:06:38,180 --> 00:06:41,289
do it like just in the context of a
powershell down easy you can also

76
00:06:41,289 --> 00:06:45,210
subscribe you can do like permanent W my
subscription so there's a great

77
00:06:45,210 --> 00:06:49,530
persistence mechanism for attackers but
also defenders can leverage it to their

78
00:06:49,530 --> 00:06:55,139
advantage as well and as is the case
with anything you know if you if you

79
00:06:55,139 --> 00:07:00,009
have told that's really valuable to
administrators and you know chances are

80
00:07:00,009 --> 00:07:01,160
it's really powerful

81
00:07:01,160 --> 00:07:05,810
attackers as well you know so some like
PowerShell young greater administrators

82
00:07:05,810 --> 00:07:11,039
and then defenders also a great tool for
attackers now there's a ton of different

83
00:07:11,039 --> 00:07:15,479
ways to interactive PowerShell I'm not
I'm not going to enumerate every single

84
00:07:15,479 --> 00:07:20,039
ones you know that there's women died
Dec see you can interface with it and

85
00:07:20,039 --> 00:07:26,699
VBScript JScript if you were to write
like C++ code there's like a commoner

86
00:07:26,699 --> 00:07:30,789
phase that you can use interface with
this now I'm not just saying this cuz

87
00:07:30,789 --> 00:07:35,949
you know I'm biased in our whole family
by interacting with our ship with W my

88
00:07:35,949 --> 00:07:39,490
power show is extremely powerful so
right out of the box

89
00:07:39,490 --> 00:07:44,490
going back to console version one you
have all the W my commandments

90
00:07:44,490 --> 00:07:48,319
the ones that you see at the top there
so you can use these to enumerate

91
00:07:48,319 --> 00:07:55,479
objects execute W my methods register
events as an attack on the Sri much

92
00:07:55,479 --> 00:08:00,289
everything you need there are some
functionality extended beyond those

93
00:08:00,289 --> 00:08:03,919
those commandments and power shoppers
and 3 and above with the same

94
00:08:03,919 --> 00:08:09,130
commandments so they basically allow you
to do the same thing the the biggest

95
00:08:09,130 --> 00:08:12,380
advantage to using the same command
lance is if you're an environment where

96
00:08:12,380 --> 00:08:16,539
they're using one around her torso
remoting these commandments can run over

97
00:08:16,539 --> 00:08:22,620
that protocol in addition to the legacy
protocol which is decomp ok let's talk a

98
00:08:22,620 --> 00:08:28,310
little bit about the the Query Language
44 w myself W out very simple like

99
00:08:28,310 --> 00:08:34,640
language it's pretty simple so it can be
used to basically you two things to

100
00:08:34,640 --> 00:08:40,370
enumerate object instances and to
register events right now that the three

101
00:08:40,370 --> 00:08:46,930
classes of shares are instance queries
so they wanted to an instance like get

102
00:08:46,930 --> 00:08:51,110
get a listing of all all running
processes ok all instances of win32

103
00:08:51,110 --> 00:08:54,700
wonders for process objects which we can
register of dance

104
00:08:54,700 --> 00:08:59,550
and we'll dig into those briefly and
then there's a medical area so if you

105
00:08:59,550 --> 00:09:04,670
want to learn more about how these
repositories W my repositories organized

106
00:09:04,670 --> 00:09:08,780
you can use a medic query to like list
out all the namespaces and classes that

107
00:09:08,780 --> 00:09:10,300
might be available to you

108
00:09:10,300 --> 00:09:15,500
here's one instance where he looks like
so I just jump right to the example

109
00:09:15,500 --> 00:09:21,000
where so you say select star star
meaning I want you to return all of the

110
00:09:21,000 --> 00:09:26,670
properties of what objects the win32
process objects and then you optionally

111
00:09:26,670 --> 00:09:31,960
you can add a filter on so that where
the win32 process . name property

112
00:09:31,960 --> 00:09:37,190
contains the string so just a process
listing of all the current processes is

113
00:09:37,190 --> 00:09:41,890
what that's doing now we can also
register events I find these to be

114
00:09:41,890 --> 00:09:46,320
extremely powerful you get very creative
as both a defender an attacker here so

115
00:09:46,320 --> 00:09:50,680
let's look at the first example shows
like star for instance creation event so

116
00:09:50,680 --> 00:09:56,090
this whole trip so trigger and return
all the properties of and any W my

117
00:09:56,090 --> 00:09:59,560
object that has created now we're gonna
have to have a filter on that because

118
00:09:59,560 --> 00:10:03,530
there's so many objects that are created
all the time so that those are being

119
00:10:03,530 --> 00:10:08,880
where the target instance is a win32
logon session and target instance logon

120
00:10:08,880 --> 00:10:15,160
type vehicles to tell me what this is
going to Trader authors and interactive

121
00:10:15,160 --> 00:10:20,890
logon exactly so the second example here
like star from winter to volume change

122
00:10:20,890 --> 00:10:24,810
man where event titles to know there's
not going to turn up on you you know

123
00:10:24,810 --> 00:10:29,640
turned into volume up or down right so
it can you tell me what what this does

124
00:10:29,640 --> 00:10:35,240
hear ya so

125
00:10:35,240 --> 00:10:39,029
when a disc is mounted by specifically
event i people's two if you look it up

126
00:10:39,029 --> 00:10:45,709
in MSDN this will trigger upon insertion
or removal of removable media

127
00:10:45,709 --> 00:10:50,720
the the last example here is pretty
pretty straight forward so that this is

128
00:10:50,720 --> 00:10:56,260
an extremely valuable query for four
defenders off for obvious reasons

129
00:10:56,260 --> 00:11:01,330
eventing one sticking to this little bit
more so you've already seen a few

130
00:11:01,330 --> 00:11:06,470
examples of some practical examples of
how you could use these enquiries for

131
00:11:06,470 --> 00:11:11,580
good or evil you can get extremely
created so if you just take like your

132
00:11:11,580 --> 00:11:17,279
your default like Windows 7 machine and
enumerate every single objects installed

133
00:11:17,279 --> 00:11:21,540
in there as well over like seven
thousand objects to get super creative

134
00:11:21,540 --> 00:11:26,990
here as an attacker defender now there's
two late registration mechanisms for

135
00:11:26,990 --> 00:11:33,060
double my events there's like the local
contacts so you could call like invoke

136
00:11:33,060 --> 00:11:40,060
registered W my event to register an
event within the context that are sold a

137
00:11:40,060 --> 00:11:45,680
taxi but you can also do this in a
persistent fashion so will persist

138
00:11:45,680 --> 00:11:49,709
across reboots by using permanent of my
event subscriptions so these require

139
00:11:49,709 --> 00:11:54,800
three things a filter which we've
already seen is just that WHQL query so

140
00:11:54,800 --> 00:11:59,850
that's dictating like what what what is
it that you're interested in triggering

141
00:11:59,850 --> 00:12:05,339
off and then the consumer what is it you
want to do upon triggering that event

142
00:12:05,339 --> 00:12:09,700
and then a binding filter to consumer
bonnie is just the registration

143
00:12:09,700 --> 00:12:13,959
mechanism that binds the consumer to the
filter and and actually installs that

144
00:12:13,959 --> 00:12:14,980
permanent

145
00:12:14,980 --> 00:12:20,140
have been subscription there's two event
classes so there's intrinsic events

146
00:12:20,140 --> 00:12:25,800
these are events that are built into
every WMI namespace so I one of the

147
00:12:25,800 --> 00:12:31,829
well-known names places like roots in v2
there's there's a lot of great stuff in

148
00:12:31,829 --> 00:12:34,700
there within their you would see all
these intrinsic events

149
00:12:34,700 --> 00:12:42,290
so take for example instance creation
event so when a new process torrance

150
00:12:42,290 --> 00:12:47,760
there's going to be an instance created
of a win32 underscore process objects ok

151
00:12:47,760 --> 00:12:51,830
so you could tie into the instance
creation events events and they do

152
00:12:51,830 --> 00:12:55,820
something interesting based on that then
they say like file creation modification

153
00:12:55,820 --> 00:13:00,740
and deletion there's going to be an
instance creation modification or

154
00:13:00,740 --> 00:13:05,500
deletion event that occurs whenever
files created modified or deleted now

155
00:13:05,500 --> 00:13:09,350
there's extrinsic events these kind of
specialized events are not present in

156
00:13:09,350 --> 00:13:16,300
all W my name spaces but these are very
likely performance event classes that

157
00:13:16,300 --> 00:13:19,260
will trigger immediately so what are the
differences between extrinsic and

158
00:13:19,260 --> 00:13:23,530
intrinsic is that you have to specify a
polling interval for intrinsic events

159
00:13:23,530 --> 00:13:27,780
and I i think the reason behind that is
because the intrinsic advanced fire

160
00:13:27,780 --> 00:13:32,350
constantly all the time so I mean it
would bring your system like to his

161
00:13:32,350 --> 00:13:36,950
knees if if if you know you have some
event consumer that launched some

162
00:13:36,950 --> 00:13:42,660
process upon you know some data file
instance being created so these are kind

163
00:13:42,660 --> 00:13:45,200
of specialized ones that fired
immediately that don't require the

164
00:13:45,200 --> 00:13:50,270
polling interval so yes some valuable
insight 132 process start race cars

165
00:13:50,270 --> 00:13:55,680
immediately upon a process being started
module autres fires upon any deal out as

166
00:13:55,680 --> 00:14:00,850
a capable device driver being loaded so
you get really really creative here so

167
00:14:00,850 --> 00:14:04,670
then there's the consumers what is it
that you want to do upon the event

168
00:14:04,670 --> 00:14:09,590
firing so there's five bills and
consumers and in Windows something

169
00:14:09,590 --> 00:14:14,040
should be obvious so you have something
trigger and then you can have event data

170
00:14:14,040 --> 00:14:19,430
be appended to a log file and an exact
descriptive and consumers so upon

171
00:14:19,430 --> 00:14:25,920
triggering something execute VBScript or
JScript attackers love this event log

172
00:14:25,920 --> 00:14:31,020
event consumer as MTV consumer should
often you know a lot of a consumer

173
00:14:31,020 --> 00:14:36,170
obviously attackers love this as well so
you know you imagine invoking like

174
00:14:36,170 --> 00:14:39,740
PowerShell down XP insert your your
payload here

175
00:14:39,740 --> 00:14:46,970
ok so just as a reminder this is the the
registration mechanism for persisting

176
00:14:46,970 --> 00:14:51,260
your your W my pale as you need to
filter which is that wo query a consumer

177
00:14:51,260 --> 00:14:54,280
what it is that you want to do from an
attack respecting the privacy act

178
00:14:54,280 --> 00:14:59,850
descriptive and consumer or consumer and
under but the binding 22 actually

179
00:14:59,850 --> 00:15:07,270
register ok so let's talk about attack
history so the earliest attack that I'm

180
00:15:07,270 --> 00:15:11,910
aware of publicly that used to be my
with Stuxnet no it didn't really

181
00:15:11,910 --> 00:15:17,180
leverage Stuxnet in like the traditional
contacts whereas a excuse some command

182
00:15:17,180 --> 00:15:21,590
at like system startup so what they did
was they used it as a privilege

183
00:15:21,590 --> 00:15:25,850
escalation so back in the day before
Mike sauce fix this

184
00:15:25,850 --> 00:15:31,550
well as Stuxnet what one of the things
like the printer spooler vulnerability

185
00:15:31,550 --> 00:15:36,660
is like an arbitrary right vulnerability
so just imagine if you could drop a file

186
00:15:36,660 --> 00:15:41,830
anywhere in windows to get code
execution what file might you create and

187
00:15:41,830 --> 00:15:49,840
where would you put it so the idea of
putting a model which testifies like you

188
00:15:49,840 --> 00:15:54,320
can use them off I'll 22 do like
permanent W my event subscriptions they

189
00:15:54,320 --> 00:16:00,860
drop that into the WBA directory and
windows used to do was any time a new

190
00:16:00,860 --> 00:16:05,870
models creating their most complex come
by and just compiled and automatically

191
00:16:05,870 --> 00:16:12,100
added into the W my story and it runs in
the system context so they they use that

192
00:16:12,100 --> 00:16:13,540
as a pretty clever

193
00:16:13,540 --> 00:16:18,940
privilege escalation goes to cite the
first like a commodity mailer that that

194
00:16:18,940 --> 00:16:23,430
i've seen that was using WMI is just
like a file Steelers so every monitor

195
00:16:23,430 --> 00:16:28,260
for those like some data file objects
like whenever a new file will be created

196
00:16:28,260 --> 00:16:33,680
or modified in the user the user
document directory it automatically

197
00:16:33,680 --> 00:16:37,980
billed as those out and then W W my cell
is pretty cool

198
00:16:37,980 --> 00:16:41,720
is his first instance where the game I
was used as like a bureaucratic control

199
00:16:41,720 --> 00:16:47,600
channels and the mechanism by which it
did that was it creates W my name spaces

200
00:16:47,600 --> 00:16:51,589
like stuffs the payload in there and
then calls the create method and whether

201
00:16:51,589 --> 00:16:56,750
to underscore process executes satin and
saves the output of that man into

202
00:16:56,750 --> 00:17:02,380
another namespace and then you put that
back remotely so I was kinda inspired by

203
00:17:02,380 --> 00:17:08,209
that and extended it a little bit and I
just added hours as I W my command which

204
00:17:08,209 --> 00:17:12,230
instead of using WMI namespace is that
just uses the registry as a means to

205
00:17:12,230 --> 00:17:18,470
two-stage Excel and and and payloads so
check that out and I are good friends

206
00:17:18,470 --> 00:17:25,530
apt 29 have been super active in in
using done W my going into what they've

207
00:17:25,530 --> 00:17:29,890
been doing ok but from an attack
perspective there's very little that you

208
00:17:29,890 --> 00:17:36,429
can't do using nothing but and you know
so from like your windows 10 attack

209
00:17:36,429 --> 00:17:41,520
machine say there's some like old crusty
like Windows 98 or your entity for box

210
00:17:41,520 --> 00:17:43,140
sitting out there somewhere

211
00:17:43,140 --> 00:17:48,280
the the W my service is listening on it
so you know there's like its rich you

212
00:17:48,280 --> 00:17:49,409
know attack surface

213
00:17:49,409 --> 00:17:54,130
given you have administrator credentials
to pop like any box and in a Windows

214
00:17:54,130 --> 00:17:57,990
environments so we can do stuff like
reconnaissance I've seen some malware

215
00:17:57,990 --> 00:18:02,049
used to be my 4 p.m. detection code
execution lateral movement persistence

216
00:18:02,049 --> 00:18:08,970
data storage in situ comes alright so I
mean this is by far not an exhaustive

217
00:18:08,970 --> 00:18:13,580
list of what you can do to perform
reconnaissance so here I am just kind of

218
00:18:13,580 --> 00:18:17,950
missing out like some of the common
things on our will do anyway as a first

219
00:18:17,950 --> 00:18:21,549
step as it's like reconnaissance stuff
well you have all these rich W my

220
00:18:21,549 --> 00:18:27,380
objects anyway we can get all that
information so good execution lateral

221
00:18:27,380 --> 00:18:31,830
movement again that create method is
extremely valuable so here on just

222
00:18:31,830 --> 00:18:37,440
invoking no cat died at sea on on some
remote system so you know just replace

223
00:18:37,440 --> 00:18:41,710
no had a taxi with PowerShell not exceed
icing dashing Cody command and then

224
00:18:41,710 --> 00:18:42,740
insert your

225
00:18:42,740 --> 00:18:52,850
militias one-liner stage career so again
for permanent W my persistence you need

226
00:18:52,850 --> 00:18:56,450
to filter consumer and and binding so
attackers love this so here's an example

227
00:18:56,450 --> 00:19:02,429
of what the seed Eddie Bauer was doing
so that this is actually a full-featured

228
00:19:02,429 --> 00:19:08,410
Python back door where its persistence
component was basically this powershell

229
00:19:08,410 --> 00:19:13,460
script and then it just invoke article
directory to persist itself is not

230
00:19:13,460 --> 00:19:19,270
terribly sophisticated in fact they just
ripped out the the WTO clear that I used

231
00:19:19,270 --> 00:19:23,980
in our sport here in the clear it
objects so all that's doing as it's

232
00:19:23,980 --> 00:19:28,929
going to trigger shortly after system
startup and also gonna do as it's using

233
00:19:28,929 --> 00:19:35,920
the command line and consumer to simply
execute the the Python executable evil

234
00:19:35,920 --> 00:19:40,970
dicey so not super sophisticated but you
know you want to be able to detect

235
00:19:40,970 --> 00:19:42,570
something like this now

236
00:19:42,570 --> 00:19:48,179
data storage mechanism is pretty cool so
I never even like really consider that

237
00:19:48,179 --> 00:19:52,600
you could do this until we saw if these
29 doing something similar to those so

238
00:19:52,600 --> 00:19:56,740
what they were doing was creating a
custom W my class and then stopping

239
00:19:56,740 --> 00:20:02,110
their payload into the names of one of
the properties so here just imagine you

240
00:20:02,110 --> 00:20:05,000
know replacing this another hour you're
looking for with some white base 64

241
00:20:05,000 --> 00:20:09,559
encoded payload which you could then use
like the winter to underscore process

242
00:20:09,559 --> 00:20:12,210
create method to pull that down

243
00:20:12,210 --> 00:20:19,090
executed and then save the output into
the property of another custom W my

244
00:20:19,090 --> 00:20:25,100
classes he created so that's exactly
what abt 20 I'm doing alright so real

245
00:20:25,100 --> 00:20:30,410
briefly W my providers these things that
provide W my own its functionality so

246
00:20:30,410 --> 00:20:35,100
when you a numerate all 132 process
objects you know there's there's some

247
00:20:35,100 --> 00:20:40,550
deal now that that backs W my that has
to actually provide that information and

248
00:20:40,550 --> 00:20:44,150
go into the process these and then
populate those those objects

249
00:20:44,150 --> 00:20:45,100
respectfully

250
00:20:45,100 --> 00:20:50,210
so that that's what these providers do I
don't know why I said there's probably

251
00:20:50,210 --> 00:20:55,130
like a hundred built-in riders that is
just calm the elves and until recently I

252
00:20:55,130 --> 00:20:59,500
mean we just kinda theorize like I can't
imagine there's any like Melissa Melissa

253
00:20:59,500 --> 00:21:05,309
W my providers but that would be really
cool you know in fact most of the

254
00:21:05,309 --> 00:21:06,400
built-in

255
00:21:06,400 --> 00:21:10,210
providers obviously are going to be from
Microsoft there are some third-party

256
00:21:10,210 --> 00:21:17,280
providers for example right here on my
Lenovo laptop Lenovo provides you or you

257
00:21:17,280 --> 00:21:22,730
know Chinese abt the ability to remotely
set BIOS settings flash the bios so good

258
00:21:22,730 --> 00:21:28,650
good stuff so when you consider that to
the militias are legitimate I i dont

259
00:21:28,650 --> 00:21:33,730
know anyway so i reset somebody's mind
when it be cool if there's an actual

260
00:21:33,730 --> 00:21:37,870
like legitimate melissa Debling my
providers and so without bail you know

261
00:21:37,870 --> 00:21:44,179
these guys went out like the day after
they you know wrote their own voices of

262
00:21:44,179 --> 00:21:50,039
my brother so Casey Smith wrote a
sheltered runner which runs in the

263
00:21:50,039 --> 00:21:55,360
contacts in the system contacts so
here's an example indication that just

264
00:21:55,360 --> 00:21:59,240
to show you how easy it is that excuse
shellcode in a system with this provider

265
00:21:59,240 --> 00:22:04,600
and then I Jarrett Jack Johnson wrote
his own so he wanted to be able to list

266
00:22:04,600 --> 00:22:08,510
out all of the active network
connections but that kind of on the side

267
00:22:08,510 --> 00:22:13,419
he created an additional method run ps2
method which would just execute

268
00:22:13,419 --> 00:22:18,580
arbitrary power shown in a certain
context it's really alright so talk a

269
00:22:18,580 --> 00:22:24,789
little bit about the attacks now let's
start investigating these things yes

270
00:22:24,789 --> 00:22:28,230
that's met some really neat stuff we can
do what everyone basically an entire

271
00:22:28,230 --> 00:22:34,110
domain using just W my eye I wish you
could say that we came up with this idea

272
00:22:34,110 --> 00:22:36,210
in like a yeah this is

273
00:22:36,210 --> 00:22:40,790
totally unique as well we cannot what is
not quite the case in the past I think

274
00:22:40,790 --> 00:22:44,960
approximately EUR so we've worked a
handful of cases dealing with this group

275
00:22:44,960 --> 00:22:50,360
apt 29 just kind of Manning's internal
name for a lot of you may know of as

276
00:22:50,360 --> 00:22:57,660
like the the Duke family now CDU cosmic
do some people believe their Russian and

277
00:22:57,660 --> 00:23:00,850
they've been some of the most
interesting investigations I worked

278
00:23:00,850 --> 00:23:04,980
recently and Carlos actually had a
really good analogy yesterday which is

279
00:23:04,980 --> 00:23:08,320
just perfect for this and he was talking
actually about as a red team are going

280
00:23:08,320 --> 00:23:12,820
into environment actually encountering a
pretty good defense right where you Papa

281
00:23:12,820 --> 00:23:16,220
shell and then like a minute later that
shut you down and you have to be

282
00:23:16,220 --> 00:23:20,180
creative and that's actually kind of fun
doing with an adversary that you can

283
00:23:20,180 --> 00:23:24,880
respect because they have good skills
ride so this was an investigation where

284
00:23:24,880 --> 00:23:29,790
I felt that way because these attackers
they knew what they were doing they were

285
00:23:29,790 --> 00:23:33,440
using really really good techniques they
were clearly about laws all the time

286
00:23:33,440 --> 00:23:37,360
they were secured deleting all of their
files I have a feeling that index in the

287
00:23:37,360 --> 00:23:42,010
back end that noted down every single
file they created easily delete it after

288
00:23:42,010 --> 00:23:47,580
the fact and they were also aware of
what defenders were doing alright they

289
00:23:47,580 --> 00:23:52,010
were aware when we were finding their
back doors identifying the network

290
00:23:52,010 --> 00:23:55,650
connections and within days they would
have new versions of things new network

291
00:23:55,650 --> 00:24:00,110
protocols that see daddy backdoor
written in Python and I was set on the

292
00:24:00,110 --> 00:24:03,170
next week later they had a brand new
implementation and dotnet it was totally

293
00:24:03,170 --> 00:24:08,620
weird but they were moving very quickly
and so it was it was a fun investigation

294
00:24:08,620 --> 00:24:14,120
because as we found these guys as we
deployed more interesting techniques

295
00:24:14,120 --> 00:24:18,910
technologies ways to detect them they
also ratcheted up their game and this

296
00:24:18,910 --> 00:24:21,790
was very valuable to us because along
the way we were able to get a lot of

297
00:24:21,790 --> 00:24:25,250
that intelligence and understand how
they were working and some of things

298
00:24:25,250 --> 00:24:29,630
that they were doing was using WMI
extensively to first move laterally

299
00:24:29,630 --> 00:24:31,420
throughout the environment

300
00:24:31,420 --> 00:24:35,290
alright came from one season to the next
system staging payloads remotely on

301
00:24:35,290 --> 00:24:40,570
those systems stuffing data into the W
my repositories and using that both to

302
00:24:40,570 --> 00:24:43,160
execute new commands and capture the
output

303
00:24:43,160 --> 00:24:47,810
now this is really interesting from a
defender's perspective because all of

304
00:24:47,810 --> 00:24:52,920
these persistent offense all of this
data is that stored B&W my those are not

305
00:24:52,920 --> 00:24:56,400
going two distinct files in the file
system right that would make it easy for

306
00:24:56,400 --> 00:25:01,200
us to identify no in fact home that data
that's that's being tracked by W my is

307
00:25:01,200 --> 00:25:05,350
stored in a single database is an opaque
database that really no one knows how to

308
00:25:05,350 --> 00:25:09,620
process all right and others as a
defender you come in and you look at

309
00:25:09,620 --> 00:25:13,500
this box and say I i do my timeline and
I do I processing I don't seem to

310
00:25:13,500 --> 00:25:16,840
processes I don't see any new files I
don't say anything in the event log

311
00:25:16,840 --> 00:25:21,100
you know what else to have to look at
and that was our situation there it was

312
00:25:21,100 --> 00:25:26,580
very difficult to find but we were
fortunate enough to have good network

313
00:25:26,580 --> 00:25:29,950
coverage and some interesting no space
technology so we could see what the

314
00:25:29,950 --> 00:25:32,510
attackers are doing the commands are
executing and so you can track them down

315
00:25:32,510 --> 00:25:37,730
even though they were using WMI and so
that the next question as we know the

316
00:25:37,730 --> 00:25:42,830
using WMI how can we actually start
looking on a much larger scale where is

317
00:25:42,830 --> 00:25:48,030
w my being used by attackers and so it
obviously we can do is use some of those

318
00:25:48,030 --> 00:25:54,330
W my medical worries to inspect w myself
to see what's going on there we can

319
00:25:54,330 --> 00:25:58,770
actually see when new things are
installed in the WMI repository new

320
00:25:58,770 --> 00:26:04,180
persistence findings things like that
but can even see why that isn't a

321
00:26:04,180 --> 00:26:06,250
complete solution

322
00:26:06,250 --> 00:26:07,100
well

323
00:26:07,100 --> 00:26:10,240
here's a good example systems offline
there's nothing we can do about it we

324
00:26:10,240 --> 00:26:14,750
can inspect the offline system because I
W my service has to be running alright

325
00:26:14,750 --> 00:26:18,630
also I feel a little uncomfortable when
I trust the operating system to tell me

326
00:26:18,630 --> 00:26:23,960
everything about itself these days I
mean we're probably Sat but next week

327
00:26:23,960 --> 00:26:28,669
next month six 6 months from now I think
aww my roof it would be really need

328
00:26:28,669 --> 00:26:32,510
something that filters out the data
being returned by W my and you would be

329
00:26:32,510 --> 00:26:36,400
none the wiser so although this the
solution what was feasible it didn't

330
00:26:36,400 --> 00:26:41,260
seem like a good solution so we now
think ok well we have these database

331
00:26:41,260 --> 00:26:44,230
files on disk and we know that these are
the files containing interesting

332
00:26:44,230 --> 00:26:46,039
information we don't know what to do
with them

333
00:26:46,039 --> 00:26:49,940
alright so some somethings come to us
naturally hey we can just run strings on

334
00:26:49,940 --> 00:26:53,679
these guys right now that's not for
instance sometimes get good results

335
00:26:53,679 --> 00:26:57,340
you don't really know what you're
looking at and so for a long time that

336
00:26:57,340 --> 00:27:02,299
was the extent of our ability to analyze
these W my databases we can guess at the

337
00:27:02,299 --> 00:27:06,500
open but when the attacker started
storing large back doors in the WMI

338
00:27:06,500 --> 00:27:11,659
repository things that were like 50
kilobyte sixty kilobytes it turns out

339
00:27:11,659 --> 00:27:15,640
that the databases operates on a page
level those pages are for kilobytes in

340
00:27:15,640 --> 00:27:19,909
size and the data actually gets stored
all over the place and so we had a very

341
00:27:19,909 --> 00:27:23,530
hard time reconstructing the incomplete
back doors so that didn't quite work

342
00:27:23,530 --> 00:27:28,480
also if we could have done and we tried
a couple times as we could take the

343
00:27:28,480 --> 00:27:33,059
database from an existing compromised
system moving into a virtual machine and

344
00:27:33,059 --> 00:27:36,760
then analyze it and that were true
machine we can kind of Frankenstein

345
00:27:36,760 --> 00:27:42,539
system we're kind of W my service on the
VMAs able to inspect itself that also

346
00:27:42,539 --> 00:27:47,409
maybe a little bit uncomfortable because
I don't know what Windows is doing under

347
00:27:47,409 --> 00:27:50,740
the hood in order to parse that database
I don't know if it's doing automatic

348
00:27:50,740 --> 00:27:54,940
repair of that database and removing
evidence I don't I just don't know what

349
00:27:54,940 --> 00:27:58,690
he's doing and it makes me uncomfortable
and so we set out to to figure out what

350
00:27:58,690 --> 00:28:03,590
the state of its look like and see if we
could actually do real forensics is dead

351
00:28:03,590 --> 00:28:09,970
boxes so things that we expected to find
in this double W my databases are all

352
00:28:09,970 --> 00:28:14,720
those kind of basic to my concept of
looking at namespaces classes this is

353
00:28:14,720 --> 00:28:16,600
the type of data that we can query for

354
00:28:16,600 --> 00:28:22,740
properties are specific features of a
class and the other things that matter

355
00:28:22,740 --> 00:28:26,450
you can imagine so we're expecting this
type of information and we expect to

356
00:28:26,450 --> 00:28:29,250
find it and these few files lost on the
screen here

357
00:28:29,250 --> 00:28:32,520
objects that data is usually pretty
large file might be tens or hundreds

358
00:28:32,520 --> 00:28:38,760
megabytes on your system exists in this
system rout W W Ben repository directory

359
00:28:38,760 --> 00:28:43,790
on strings on a lot of really good stuff
but you open a hex editor and you see

360
00:28:43,790 --> 00:28:46,900
that it's it's not but text file it's
not it's not easy to interpret as a

361
00:28:46,900 --> 00:28:51,470
human so for a long time we just
collected that files and ran strings on

362
00:28:51,470 --> 00:28:56,220
it and we got a little got somewhere at
least but that up too excited to file

363
00:28:56,220 --> 00:28:59,800
doesn't exist by itself and you cannot
process it completely without the rest

364
00:28:59,800 --> 00:29:03,930
of these files indexed BTR file is a
petri index that allows you to quickly

365
00:29:03,930 --> 00:29:08,520
look up and curry the object database
and there's some additional files are

366
00:29:08,520 --> 00:29:12,430
provided metadata about this database
but still we're dealing with this huge

367
00:29:12,430 --> 00:29:17,040
database this huge hundred megabyte file
we don't know the primary structure so

368
00:29:17,040 --> 00:29:22,310
put our heads together we spend a few
weeks looking at this thing I we reverse

369
00:29:22,310 --> 00:29:26,090
this entire database format we know that
every single bite means in the entire

370
00:29:26,090 --> 00:29:32,700
repository done W my database and this
is really powerful because we can now do

371
00:29:32,700 --> 00:29:37,230
through forensics on these things and
I'll make a note to the site here along

372
00:29:37,230 --> 00:29:40,860
the way we actually didn't do any static
analysis of the W my service even though

373
00:29:40,860 --> 00:29:44,400
we're reverse engineers we understand
assembly could things like that we

374
00:29:44,400 --> 00:29:49,630
didn't we don't look at that w my
service dynamically above the operations

375
00:29:49,630 --> 00:29:53,140
right thing actually just looked at the
database files themselves and specter of

376
00:29:53,140 --> 00:29:57,490
them till our eyes bleed again and again

377
00:29:57,490 --> 00:30:01,530
but he was successful if you wanna know
a little bit about how he did that you

378
00:30:01,530 --> 00:30:04,260
can imagine we are you know this
interesting strings in there so we had

379
00:30:04,260 --> 00:30:07,870
to start with those ok I know what that
spring probably represents that's the

380
00:30:07,870 --> 00:30:11,960
name of a filter to consumer binding
once you have a human-readable strength

381
00:30:11,960 --> 00:30:15,440
you can imagine this must be pointed to
by other data structures so you start

382
00:30:15,440 --> 00:30:19,100
looking for pointers to these
interesting strings a lot of times these

383
00:30:19,100 --> 00:30:23,210
pointers fall within kind of a table of
contents section that has pointed to

384
00:30:23,210 --> 00:30:27,300
many interesting objects to kind of work
backwards from there you'll have to

385
00:30:27,300 --> 00:30:31,540
think well W my provides all these
various pieces of data and must be able

386
00:30:31,540 --> 00:30:34,840
to query this information very very
quickly so you start imagining how they

387
00:30:34,840 --> 00:30:38,940
must have designed the data structures
when they're going forward with the the

388
00:30:38,940 --> 00:30:44,059
engineering and we just reverse engineer
that so we're pretty successful and take

389
00:30:44,059 --> 00:30:49,020
a few minutes after walk us through some
of the structures so as we was

390
00:30:49,020 --> 00:30:54,700
mentioning the most important parts of
the W my depository are the index BTR

391
00:30:54,700 --> 00:31:00,120
objects that data and the mapping that
map as you saw their up to three

392
00:31:00,120 --> 00:31:04,480
variants of the mapping done map and but
when you want is caught in the other one

393
00:31:04,480 --> 00:31:11,490
of the backups and the mapping done map
contains the logical to physical map and

394
00:31:11,490 --> 00:31:15,940
the three pages map for both objects
that they don't indict BTR explain how

395
00:31:15,940 --> 00:31:22,530
this is used both index BTR and objects
that data are organizing pages the page

396
00:31:22,530 --> 00:31:32,850
is 2006 in size or 8192 let's take this
example here in the exhibit year as will

397
00:31:32,850 --> 00:31:41,870
you mention it's a bitchy on this
physical page 10 we see be tricky that

398
00:31:41,870 --> 00:31:47,900
represents a new consumer instance and
the key consists of multiple parts the

399
00:31:47,900 --> 00:31:55,230
first part is the namespace to which the
instant belongs is perfect but predicts

400
00:31:55,230 --> 00:31:59,770
diana's underscores training and then
the next is the class which in this case

401
00:31:59,770 --> 00:32:06,300
is a command-line even consumer and is
perfect by CIA underscore underneath it

402
00:32:06,300 --> 00:32:12,510
sells underscore be fixed by I
underscore the last three integers is

403
00:32:12,510 --> 00:32:17,650
the location record the first is the
physiological page in the objects that

404
00:32:17,650 --> 00:32:23,820
data where the data for the consumer
instance resides the next one is the

405
00:32:23,820 --> 00:32:28,480
record I D and the next one is the size
of the size of the data objects that

406
00:32:28,480 --> 00:32:33,669
they do so how the translation is done
we have the the logical page which is in

407
00:32:33,669 --> 00:32:38,410
this case five hundred and sixty-three
you go to the logical to physical map

408
00:32:38,410 --> 00:32:45,679
for objects that data and we find out
that index 563 in the mapping it's

409
00:32:45,679 --> 00:32:51,220
stored 230 which means this is the beach
the physical page into zones Exadata

410
00:32:51,220 --> 00:33:00,020
where the record date for the consumer
instance resides so to find the physical

411
00:33:00,020 --> 00:33:07,120
offset you multiply by the page number
with the page size you don't want to

412
00:33:07,120 --> 00:33:13,059
read the page which is as I mention 8192
bytes at the beginning of each page that

413
00:33:13,059 --> 00:33:18,640
contains records there are there is a
list of record headers the most

414
00:33:18,640 --> 00:33:23,540
important things touring the record
headers are the record I D and

415
00:33:23,540 --> 00:33:29,220
offsetting the page and its size of the
record so you use the record I need that

416
00:33:29,220 --> 00:33:36,720
were was in the apt key to identify the
record the offset for the record the

417
00:33:36,720 --> 00:33:42,400
record the header and you get the
offsetting page ad that all setting page

418
00:33:42,400 --> 00:33:47,940
to the physical page of set in objects
that they don't you have the you have

419
00:33:47,940 --> 00:33:54,250
the size of both in the in the apt key
record header and you have the

420
00:33:54,250 --> 00:34:00,580
information about consumer that you need
to parse since I mentioned that the BDR

421
00:34:00,580 --> 00:34:03,110
apt on disk

422
00:34:03,110 --> 00:34:07,950
pointers to the next pages are
represented does a logical

423
00:34:07,950 --> 00:34:12,700
logical page numbers so you have to use
the mapping for the index BTR to

424
00:34:12,700 --> 00:34:18,730
translate the logical page the physical
page to get to the data of the children

425
00:34:18,730 --> 00:34:28,190
in the in the beach next that's part of
the presentation of of a page in the the

426
00:34:28,190 --> 00:34:36,000
tree the red the red part is the strains
and then the next are the data

427
00:34:36,000 --> 00:34:39,810
structures that you combine to create
the actual you used to compare to

428
00:34:39,810 --> 00:34:47,230
combine the strings to pay the actual be
turkey's and then another and another

429
00:34:47,230 --> 00:34:53,179
read the section towards the beginning
it's the pointers to the children would

430
00:34:53,179 --> 00:35:06,840
be representing logical page numbers so
who don't understand

431
00:35:06,840 --> 00:35:15,170
basically we just want to demonstrate we
know at this thing looks like we know

432
00:35:15,170 --> 00:35:18,490
how to parse it and in fact if you were
interested in that in that did kind of

433
00:35:18,490 --> 00:35:21,660
pique your interest we have already
released a white paper it's almost a

434
00:35:21,660 --> 00:35:24,650
hundred pages long right now that
describes how to do this part saying how

435
00:35:24,650 --> 00:35:29,440
to write your own parser how to manually
verify all those structures so if that

436
00:35:29,440 --> 00:35:35,850
interests you that information is online
will have references later on anyways so

437
00:35:35,850 --> 00:35:39,090
we did this reverse engineering we
figured out what the database look like

438
00:35:39,090 --> 00:35:43,790
the next step was actually build tools
around to make sure other people could

439
00:35:43,790 --> 00:35:48,910
do it on their own and so we've built to
tools around this knowledge right the

440
00:35:48,910 --> 00:35:55,720
first time I talked about as Python same
project this is a pure Python parser for

441
00:35:55,720 --> 00:36:01,300
these are my databases design primarily
as a librarian makes it very easy to

442
00:36:01,300 --> 00:36:05,520
develop short and sweet scripts that
look for evil within W my repositories

443
00:36:05,520 --> 00:36:10,160
and it's very easy to use and the second
one Claudia road is a seat

444
00:36:10,160 --> 00:36:15,000
C++ program blazing fast and include
codes lot of the knowledge that we

445
00:36:15,000 --> 00:36:19,620
already have about how attackers are
leveraging W my and finds unlikely for

446
00:36:19,620 --> 00:36:20,320
you

447
00:36:20,320 --> 00:36:24,090
alright so you have a couple options
here let me start by walking you through

448
00:36:24,090 --> 00:36:28,030
the Python library I'm just the kind of
demonstrates capabilities I wrote a

449
00:36:28,030 --> 00:36:36,470
small user interface around it so we can
kind of check that out alright so here I

450
00:36:36,470 --> 00:36:40,820
am i morning on Linux just demonstrating
its a cross-platform tool it displays

451
00:36:40,820 --> 00:36:46,550
information on my street view it's very
intuitive to explore at this time we

452
00:36:46,550 --> 00:36:50,170
basically have was almost like a file
system we can kind of browser were

453
00:36:50,170 --> 00:36:54,740
essentially directories and inspect the
data so here we are going through the

454
00:36:54,740 --> 00:37:00,440
same be tuned in space and down here
were eventually decide will pick the

455
00:37:00,440 --> 00:37:07,090
namespace route subscription exploring
looking at the various classes at a very

456
00:37:07,090 --> 00:37:10,820
pretty snappy interface because we're
able to use of beetroot index to quickly

457
00:37:10,820 --> 00:37:12,570
navigate to the data that we look at

458
00:37:12,570 --> 00:37:17,420
so the data that we've decided to focus
on here is this filter to consumer

459
00:37:17,420 --> 00:37:22,330
binding missus well a lot of attackers
used to maintain persistence on a box so

460
00:37:22,330 --> 00:37:26,800
as we inspect this particular class we
can look at all its bills one of things

461
00:37:26,800 --> 00:37:30,010
we learned on parsing out this database
is there's a bunch of additional

462
00:37:30,010 --> 00:37:32,950
timestamp stored in there we suspect
that these are the created a

463
00:37:32,950 --> 00:37:37,160
modification time spent time stamp of
objects so when attackers are actually

464
00:37:37,160 --> 00:37:42,550
using WMI this is another entries you
can add to your your timeline to figure

465
00:37:42,550 --> 00:37:46,470
out when the attackers active I really
interesting stuff there were also able

466
00:37:46,470 --> 00:37:49,360
to parse out heat one of the properties
and that's the type of information that

467
00:37:49,360 --> 00:37:53,250
we can pull from each instance of a W my
object

468
00:37:53,250 --> 00:37:58,250
all right now one of the really neat
aspects least in my opinion of this tool

469
00:37:58,250 --> 00:38:01,090
is not only does it all the data for you

470
00:38:01,090 --> 00:38:04,940
it tells you how it got there alright so
any of these structures that you're able

471
00:38:04,940 --> 00:38:09,160
to browse in the tree view it also
parcels out for you and shows your next

472
00:38:09,160 --> 00:38:13,610
few and so you can see why its
interpreting well okay so this is the

473
00:38:13,610 --> 00:38:18,410
indication related class it tells you
where it found that that strength where

474
00:38:18,410 --> 00:38:22,310
it found the timestamps Waretown the
properties and as you can see here we

475
00:38:22,310 --> 00:38:26,010
can we can browse and information at the
bottom and it shows us where that

476
00:38:26,010 --> 00:38:31,010
information coming from we can highlight
various fields if you do in your boss

477
00:38:31,010 --> 00:38:34,260
you really think you're doing a lot of
our

478
00:38:34,260 --> 00:38:38,620
but practically speaking this is a good
feature to have because you can always

479
00:38:38,620 --> 00:38:42,810
go back and confirm actual what's on
this if it doesn't make sense you can go

480
00:38:42,810 --> 00:38:46,470
inspected yourself and can actually ok
my database is corrupt now I know it's

481
00:38:46,470 --> 00:38:50,660
happening or you can say I didn't know
the attacker actually was active on that

482
00:38:50,660 --> 00:38:56,460
date not confirmed it manually in the
Davis so that was exploring a class

483
00:38:56,460 --> 00:39:01,220
definition we can also take a look at
this specific instances of this class is

484
00:39:01,220 --> 00:39:05,650
a instances of that persistent objects
says these are filtered consumer binding

485
00:39:05,650 --> 00:39:09,520
instances we see a couple timestamps
there when these instances were created

486
00:39:09,520 --> 00:39:19,600
this was back in 2009 and additional
aspects of the W nine min spaces and

487
00:39:19,600 --> 00:39:23,710
classes and the references to
essentially all those areas that matter

488
00:39:23,710 --> 00:39:29,580
was driving earlier in this talk we can
now do offline on OS X system Linux

489
00:39:29,580 --> 00:39:33,480
system Windows system he's pipeline to
do you see to do it we now have this

490
00:39:33,480 --> 00:39:44,990
capability I think that's pretty neat
but he wants to your time so much more

491
00:39:44,990 --> 00:39:51,050
for my design from our perspective to
get to the information click on whatever

492
00:39:51,050 --> 00:40:01,910
whatever information he star but an evil
consumer so first to comment line and

493
00:40:01,910 --> 00:40:07,520
you specified path to the repository
that contains the tree files object that

494
00:40:07,520 --> 00:40:13,380
data in the sub-region the mapping and
what I'm doing here i'm looking for all

495
00:40:13,380 --> 00:40:17,520
the consumer instances in the route
subscription namespace and I've iPhone

496
00:40:17,520 --> 00:40:21,830
here a command-line consumer name says
consumer that exact starts PowerShell

497
00:40:21,830 --> 00:40:27,850
invoke an expression of data that is
stored in the payload under the win32

498
00:40:27,850 --> 00:40:35,510
underscore payload the class next is an
end even know consumer this is

499
00:40:35,510 --> 00:40:42,080
automatically installed by Microsoft so
it's legit but don't take my word for it

500
00:40:42,080 --> 00:40:48,550
next another command line even consumer
it's called DVD consumer this again it's

501
00:40:48,550 --> 00:40:57,230
legit one but I saw my work over writing
this so validate that it's legit DVD

502
00:40:57,230 --> 00:41:05,460
consumer since the first one as consumer
was looking weird and my diva i'm taking

503
00:41:05,460 --> 00:41:12,800
a deeper look into that I say that there
is a class win32 payload with property

504
00:41:12,800 --> 00:41:19,430
payload and also I find a binding to get
the trigger that makes this consumer

505
00:41:19,430 --> 00:41:24,430
execute so I see the future events or
even feel turning payment card processor

506
00:41:24,430 --> 00:41:30,690
lounged and I'm trying to see if I can
take a look what is doing to find the

507
00:41:30,690 --> 00:41:39,600
actual event so Nextel gonna look for
fielder instance subscription and he's

508
00:41:39,600 --> 00:41:45,540
named of government but Berman current
crisis and its WHQL Corey and the same

509
00:41:45,540 --> 00:41:50,990
as select star which means whenever the
payment process he starts the consumer

510
00:41:50,990 --> 00:41:55,710
will execute so what has a cute what
we'll do we'll go into the payload

511
00:41:55,710 --> 00:42:01,940
property from the win under win32
underscore payload class right now I'm

512
00:42:01,940 --> 00:42:06,790
actually dumping the definition of the
of that class and I see a big global

513
00:42:06,790 --> 00:42:13,640
base 64 encoded data which is stored as
a default value for the payload property

514
00:42:13,640 --> 00:42:20,060
and you see here class created 727 2015
which is a good indication when you

515
00:42:20,060 --> 00:42:24,080
attack started and i won

516
00:42:24,080 --> 00:42:30,150
I'm interested in what does big global
base 64 encoded data is doing and I'm

517
00:42:30,150 --> 00:42:32,500
exiting

518
00:42:32,500 --> 00:42:42,090
a total tool to be coded and it's
actually my memory scraper and what it

519
00:42:42,090 --> 00:42:43,680
does

520
00:42:43,680 --> 00:42:49,150
scripts credit cards and place them into
win32 excelled in the property track

521
00:42:49,150 --> 00:42:56,610
data under root CA me to see my space
and then going back into the WI parcel

522
00:42:56,610 --> 00:43:04,210
on see what is touring in that track
data I guess you guys can infer so

523
00:43:04,210 --> 00:43:14,010
looking plus was created on the same
around the same date so again and

524
00:43:14,010 --> 00:43:23,380
external tool to decode it and finally
we see that the track one of the credit

525
00:43:23,380 --> 00:43:36,720
card for Fred Smith it starting that
property it's it's a city lies dotnet

526
00:43:36,720 --> 00:43:53,609
object so that concludes my drama

527
00:43:53,609 --> 00:44:07,869
so we've been talking about W my venting
for a while now primarily from an attack

528
00:44:07,869 --> 00:44:12,539
response perspective while defenders
perspective you get really creative here

529
00:44:12,539 --> 00:44:18,230
so almost every single interaction on
the operating system can possibly

530
00:44:18,230 --> 00:44:22,989
trigger some kind of W my event so as a
defender start getting really creative

531
00:44:22,989 --> 00:44:29,839
rights so for example what you saw
previously was the trigger was whenever

532
00:44:29,839 --> 00:44:36,499
win32 process instance was created and
that Palin would execute well how's that

533
00:44:36,499 --> 00:44:41,460
payload installed in the first place
using WMI permanent events subscriptions

534
00:44:41,460 --> 00:44:45,640
right so what kind of artifacts might be
present

535
00:44:45,640 --> 00:44:51,019
by going through the installation
process well you would have an instance

536
00:44:51,019 --> 00:44:55,470
creation event event that would be
triggered whenever you would have the

537
00:44:55,470 --> 00:45:01,539
filter to consumer binding the event
consumer and events filter classes being

538
00:45:01,539 --> 00:45:05,410
created so as a defender start thinking
about how you might be able to detect

539
00:45:05,410 --> 00:45:11,549
these sorts of things right so I mean
you may begin to to see a pattern here

540
00:45:11,549 --> 00:45:15,920
right so what I just said like 10 years
event consumers to trigger alerts on

541
00:45:15,920 --> 00:45:21,430
event consumers you could totally do
that w my right so you can use it to

542
00:45:21,430 --> 00:45:25,660
detective in my persistence registry
persistent service creation scheduled

543
00:45:25,660 --> 00:45:32,569
task creation so on and so forth so I is
a great solution for this so it's it's

544
00:45:32,569 --> 00:45:38,819
the agentless ideas that you never knew
you had to leave so while ago I wrote

545
00:45:38,819 --> 00:45:44,519
sort of like a perfect concept post
ideas it's on this get up here don't use

546
00:45:44,519 --> 00:45:47,710
it instead

547
00:45:47,710 --> 00:45:53,830
used Jarrett's upper utilities so this
is an active development like he's

548
00:45:53,830 --> 00:45:58,580
actually developing it as a legitimate
agentless host idea so it's a great tool

549
00:45:58,580 --> 00:46:03,490
there's still a lot of work to be done
but he's abstracted it out such that

550
00:46:03,490 --> 00:46:07,530
it's really easy to add new signatures
to it so I really recommend you check

551
00:46:07,530 --> 00:46:14,020
that out he's done some great work and
he's a total hipster so take away from

552
00:46:14,020 --> 00:46:18,550
all this is the creative alright just
because attackers are doing this doesn't

553
00:46:18,550 --> 00:46:22,490
mean that you as defenders you know are
going to be left to it with your pants

554
00:46:22,490 --> 00:46:29,550
down as if you can get creative when I
think few people will shoulder Justin

555
00:46:29,550 --> 00:46:34,510
warner helping out with some of the
malicious ideas here and then some are

556
00:46:34,510 --> 00:46:40,180
are many and investigators are the ones
who brought all this time I all these

557
00:46:40,180 --> 00:46:44,390
capabilities to our attention these are
the guys who were you know in the field

558
00:46:44,390 --> 00:46:49,280
investigating the apt 29 so we go out to
them because they're also I what they do

559
00:46:49,280 --> 00:46:53,800
and of course apt 29 for inspiration to
allow me to steal some of your

560
00:46:53,800 --> 00:47:06,840
capabilities and integrate those and my
own tools so thank you very much

561
00:47:06,840 --> 00:47:33,190
questions you can you can do it no
problem the only thing is there anything

562
00:47:33,190 --> 00:47:40,120
that I W my does the mapping its says
that is a dirty state so as long as you

563
00:47:40,120 --> 00:47:42,380
don't stop the service the mapping

564
00:47:42,380 --> 00:47:46,920
you might lose some information out of
there but you can do without any problem

565
00:47:46,920 --> 00:47:50,680
that is you have you don't have a
restriction to the pages of those that

566
00:47:50,680 --> 00:47:54,110
are in the object that the only thing is
that the mapping that they'd always say

567
00:47:54,110 --> 00:48:18,660
that is not participate

568
00:48:18,660 --> 00:48:25,200
right now is that there's literally
thousands of these different W my

569
00:48:25,200 --> 00:48:29,290
objects and classes and interfaces and
although we have some knowledge about W

570
00:48:29,290 --> 00:48:32,090
my we don't know everything that's
supposed to be there and what's not

571
00:48:32,090 --> 00:48:35,440
supposed to be there but it's trivial
for us to write a differing script now

572
00:48:35,440 --> 00:48:39,890
that we can yeah exactly the Golden Age
look for differences and just focus on

573
00:48:39,890 --> 00:48:42,660
taking a look at those that's an easy
way to start analysis

574
00:48:42,660 --> 00:48:47,080
all right thank you can create your own
providers that they inject whatever they

575
00:48:47,080 --> 00:48:53,050
want so you don't know what we should be
there so that's why you have is good to

576
00:48:53,050 --> 00:48:54,260
have a baseline all the time

