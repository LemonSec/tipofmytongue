1
00:00:00,000 --> 00:00:04,339
on the PowerShell team been working on
the team for a while also the author of

2
00:00:04,339 --> 00:00:10,179
the parish hall cookbook so if you're
here to learn how to pop offices sorry

3
00:00:10,179 --> 00:00:14,849
this is not be the right one yet so
gotta question who here is involved in

4
00:00:14,849 --> 00:00:20,460
Ooty meetings are protecting customers
hoping know how to save themselves from

5
00:00:20,460 --> 00:00:25,350
you just bring them all right so we're
not talking today you probably heard a

6
00:00:25,350 --> 00:00:31,349
lot in the presentations and chats and
stuff so far are ways an hour show in

7
00:00:31,349 --> 00:00:37,290
the Inbox scripting stuff in Windows is
being used to let people escalate

8
00:00:37,290 --> 00:00:41,809
privileges and everything else so we're
gonna talk about today are ways that you

9
00:00:41,809 --> 00:00:48,420
can help customers protect themselves
much more readily and and really have a

10
00:00:48,420 --> 00:00:54,390
better control on their environment now
the one thing that I i think is really

11
00:00:54,390 --> 00:01:01,859
good to start with is just talking about
security boundaries now it seems kind of

12
00:01:01,859 --> 00:01:04,439
ridiculous thing to say

13
00:01:04,439 --> 00:01:10,409
Derby Conn but the big thing that when
we start talking about when everyone is

14
00:01:10,409 --> 00:01:14,390
running mimic has to suffer memory
ultimately their administrator on the

15
00:01:14,390 --> 00:01:19,450
machine and gonna compromise any
operating system as hell that's just the

16
00:01:19,450 --> 00:01:25,450
way that operating systems work now you
see why did you start with a little

17
00:01:25,450 --> 00:01:31,909
worried about security boundaries the
execution policy so when you start

18
00:01:31,909 --> 00:01:36,530
thinking about PowerShell insecurity
what most people start talking about is

19
00:01:36,530 --> 00:01:43,640
the PowerShell execution policy and have
a pipe that is not a security boundary

20
00:01:43,640 --> 00:01:49,759
by any means execution policy has
anybody had term malware bypassing

21
00:01:49,759 --> 00:01:52,860
exclusion policy

22
00:01:52,860 --> 00:01:58,710
so the execution policy the way to think
about that is like chmod units right if

23
00:01:58,710 --> 00:02:02,480
if you're an attacker you're not by
passing anything by changing the

24
00:02:02,480 --> 00:02:06,980
executable bit on a file you not like
he's brilliant or anything so that's

25
00:02:06,980 --> 00:02:13,220
what the execution policy is is a
century on Windows that gives you more

26
00:02:13,220 --> 00:02:17,520
control over it when I run these scripts
do I require that they are signed or

27
00:02:17,520 --> 00:02:24,209
anything else so when you get here you
know first token instant read when you

28
00:02:24,209 --> 00:02:28,990
start talking about our show in the wild
in with other researchers don't be so

29
00:02:28,990 --> 00:02:34,070
proud of bypassing the execution policy
because our children and actually made

30
00:02:34,070 --> 00:02:38,500
command line parameters to do it so
you're not preaching anything there so

31
00:02:38,500 --> 00:02:41,700
there's a lot of different ways you can
have fun and that's not the one issue

32
00:02:41,700 --> 00:02:49,320
proud of the other things that I find
when we start talking about our national

33
00:02:49,320 --> 00:02:54,690
security is a lot of customers and
people who you're in an engagement with

34
00:02:54,690 --> 00:03:01,580
a nearly died just two machines from
PowerShell Democrats running and their

35
00:03:01,580 --> 00:03:08,630
natural reaction to start running after
the very end game they're running after

36
00:03:08,630 --> 00:03:14,920
the tools and techniques but maybe not
mature enough at the bottom levels so I

37
00:03:14,920 --> 00:03:18,850
start to think about it like the
Maslow's hierarchy of security controls

38
00:03:18,850 --> 00:03:24,830
Maslow has got his hierarchy of needs
right so you need to have food and water

39
00:03:24,830 --> 00:03:30,350
security controls are the same way

40
00:03:30,350 --> 00:03:34,480
customer and they don't have a while
they're not protecting themselves even

41
00:03:34,480 --> 00:03:39,120
from malware that's known to the entire
industry if they don't have any sort of

42
00:03:39,120 --> 00:03:43,769
application whitelisting then they're
not protecting themselves from any

43
00:03:43,769 --> 00:03:48,980
random C++ think dropped on this nobody
ever talks about protecting themselves

44
00:03:48,980 --> 00:03:50,840
from C++ attacks

45
00:03:50,840 --> 00:03:53,840
but for some reason they think that it's
a good thing to start talking about

46
00:03:53,840 --> 00:03:58,819
protecting themselves through PowerShell
attacks or whatever else and that when

47
00:03:58,819 --> 00:04:02,580
you start talking about protecting
yourself from Paris militarize you

48
00:04:02,580 --> 00:04:07,819
really have a top of the hierarchy there
especially if you're concerned is hey I

49
00:04:07,819 --> 00:04:12,010
did this all in memory forensically
clean if the customer has no capability

50
00:04:12,010 --> 00:04:16,949
of doing any sort of memory analysis and
risk analysis then they're really just

51
00:04:16,949 --> 00:04:20,650
grasping for straws and they're just
gonna get popped two minutes later with

52
00:04:20,650 --> 00:04:25,139
somebody who just changes their
techniques by one little bit so this is

53
00:04:25,139 --> 00:04:28,410
a good way you're starting to talk
engage with somebody and they're trying

54
00:04:28,410 --> 00:04:32,220
to react to something that you've done
this is a great way to start helping me

55
00:04:32,220 --> 00:04:36,570
helping them understand what are good
reasonable ways to start protecting from

56
00:04:36,570 --> 00:04:46,110
attacks me talk to US security
boundaries the one place that PowerShell

57
00:04:46,110 --> 00:04:52,820
is frequently on an attack surface is
the the singleton two-parent ecology has

58
00:04:52,820 --> 00:04:57,450
anybody heard of Adjustment
administration stuff and PowerShell

59
00:04:57,450 --> 00:05:00,970
people so it's just enough
administration is the ability to set up

60
00:05:00,970 --> 00:05:06,300
a powershell remote endpoint so when
somebody connects up to that end point

61
00:05:06,300 --> 00:05:10,530
then all the get are the commands that
you want them to run so you don't have

62
00:05:10,530 --> 00:05:14,470
to have administrators running around
your whole domain doing everything that

63
00:05:14,470 --> 00:05:18,620
administrator can do you can say when
you connect up to this machine you're

64
00:05:18,620 --> 00:05:32,040
only allowed to do the following
commands

65
00:05:32,040 --> 00:06:05,980
security

66
00:06:05,980 --> 00:06:14,850
sometimes when somebody is writing
that's preventing people from running

67
00:06:14,850 --> 00:06:20,430
just arbitrary stuff in the domain or on
that machine noting what you've got here

68
00:06:20,430 --> 00:06:25,550
is the end up writing wrapper functions
in PowerShell here's an example of

69
00:06:25,550 --> 00:06:30,920
somebody who says when somebody commits
up to this room space is endpoint I only

70
00:06:30,920 --> 00:06:35,850
want to let them run get process if
they're looking for the PowerShell

71
00:06:35,850 --> 00:06:42,210
process you might imagine a situation
like that but if you look online tenders

72
00:06:42,210 --> 00:06:46,120
and invoke expression there's a
columnist understanding that when you're

73
00:06:46,120 --> 00:06:50,780
creating dynamic PowerShell especially
around an indication that you need to

74
00:06:50,780 --> 00:06:56,210
use it and I think it comes from other
things that have the system command

75
00:06:56,210 --> 00:07:02,340
that's generally the way you do it but
this you know any other language has the

76
00:07:02,340 --> 00:07:07,400
capability to run arbitrary code and so
with this the same committee get with

77
00:07:07,400 --> 00:07:15,080
sequel injection or from an injection of
the person has actually done is if the

78
00:07:15,080 --> 00:07:19,930
user's input matches the text PowerShell
then I just added to the get process

79
00:07:19,930 --> 00:07:25,400
command and I run whatever I want now is
the attacker had actually said hi

80
00:07:25,400 --> 00:07:28,729
rochelle semicolon format C Drive

81
00:07:28,729 --> 00:07:36,270
will then your own right so there is a
great example of command injection that

82
00:07:36,270 --> 00:07:41,210
you can help them prevent themselves or
if you see this during the audit this is

83
00:07:41,210 --> 00:07:46,650
a way that you can get in so you really
never need to use invoke expression

84
00:07:46,650 --> 00:07:51,159
PowerShell if you do it on an attack
surface you're usually going to be own

85
00:07:51,159 --> 00:07:56,779
somehow so that the first example that I
was showing was trying to pass the

86
00:07:56,779 --> 00:08:02,050
user's input to a variable mean as a as
a parameter so you see in like two I can

87
00:08:02,050 --> 00:08:09,509
I can just read it he used to get a
command to to get in a quantifiable but

88
00:08:09,509 --> 00:08:13,889
if I didn't know the primitive value
beforehand I can send it as a as a

89
00:08:13,889 --> 00:08:19,389
variable just to the get tackled ash
path so if that had a semicolon in it

90
00:08:19,389 --> 00:08:23,419
and further stuff PowerShell is gonna do
all the work to ensure that that doesn't

91
00:08:23,419 --> 00:08:26,939
become part of the command line it just
becomes the command line argument

92
00:08:26,939 --> 00:08:33,389
another complicated one is if you have
cash tables so if you don't actually

93
00:08:33,389 --> 00:08:36,599
know which parameters you wanna call
beforehand and this sometimes happens

94
00:08:36,599 --> 00:08:40,639
when somebody doesn't know for example
if they want to use the Eid prayer

95
00:08:40,639 --> 00:08:46,160
beforehand or the name from there before
and then you can actually just goes into

96
00:08:46,160 --> 00:08:50,930
a hash table is called splitting and
then pass that hash table to the command

97
00:08:50,930 --> 00:08:57,990
and then those parameters we resolved
when so again if you if you don't know

98
00:08:57,990 --> 00:08:59,209
that promise beforehand

99
00:08:59,209 --> 00:09:03,000
you're good and actually PowerShell even
lets you run a command when you don't

100
00:09:03,000 --> 00:09:07,430
know the CommandName beforehand so if
you don't know here's an example of you

101
00:09:07,430 --> 00:09:10,569
don't know the command name you don't
know the command line parameters you

102
00:09:10,569 --> 00:09:14,399
don't know the value of those parameters
and you can still do it without any sort

103
00:09:14,399 --> 00:09:19,750
of command injection if you see somebody
using invoke expression for command

104
00:09:19,750 --> 00:09:23,970
invocation this is a great way to
prevent it just like you would with a

105
00:09:23,970 --> 00:09:25,550
prepared statement

106
00:09:25,550 --> 00:09:33,459
now I think this might be a little bit
hard to read but sometimes there is a

107
00:09:33,459 --> 00:09:39,180
legitimate reason for invoke expression
so for example if you're interacting

108
00:09:39,180 --> 00:09:44,910
with another system and products for
example and all it takes is a powershell

109
00:09:44,910 --> 00:09:50,850
included scripts what we did and
PowerShell version 5 was this system

110
00:09:50,850 --> 00:09:55,680
management automation got language code
generation because what you're doing

111
00:09:55,680 --> 00:10:01,320
when you're doing command creation
injection is really generating code and

112
00:10:01,320 --> 00:10:05,560
so you see here in the code generation
Apia there's things like if I'm gonna be

113
00:10:05,560 --> 00:10:07,410
putting it into a block comment

114
00:10:07,410 --> 00:10:12,720
there's an escape escape comment content
so there's all these different API is

115
00:10:12,720 --> 00:10:19,079
and the one that people will need is
escape single coated contact because one

116
00:10:19,079 --> 00:10:23,089
of the things that people try to do is
they'll know that there in one of these

117
00:10:23,089 --> 00:10:26,839
situations where I'm passing into
another system all it takes is

118
00:10:26,839 --> 00:10:31,079
PowerShell and so with the deal with
them know that they put it in a

119
00:10:31,079 --> 00:10:34,790
powershell a single quotas train and
then they know that if the user and

120
00:10:34,790 --> 00:10:38,290
having single quote a single post in
there then they'll just replace them

121
00:10:38,290 --> 00:10:45,420
with new single votes and that will save
them from any sort of a single however

122
00:10:45,420 --> 00:10:49,560
parish I was raised in the age of look
inward and blogs and all that kind of

123
00:10:49,560 --> 00:10:54,329
stuff where you put a script online and
it is automatically screwed up to be as

124
00:10:54,329 --> 00:11:00,540
I dunno fancy probes so the PowerShell
language actually defines a whole set of

125
00:11:00,540 --> 00:11:05,550
single quotes that include single back
takes and single left hanging curly's is

126
00:11:05,550 --> 00:11:10,520
like 45 him so if somebody's only doing
single quote escaping then you can just

127
00:11:10,520 --> 00:11:16,959
use the early versions to escape out to
these cogeneration API is take care of

128
00:11:16,959 --> 00:11:19,040
that stuff for you because they are
written by the

129
00:11:19,040 --> 00:11:25,449
see people who have the language is
another situation that you sometimes

130
00:11:25,449 --> 00:11:31,029
feel the need to invoke expression on
and that's when you have a data file in

131
00:11:31,029 --> 00:11:35,540
power show so PowerShell has hash tables
and you can put these hash tables in

132
00:11:35,540 --> 00:11:41,319
files and so those those hash tables you
see them in if you have a PowerShell

133
00:11:41,319 --> 00:11:48,199
module module manifests really just hash
tables in a file so when you get into a

134
00:11:48,199 --> 00:11:51,399
situation of trying to import one of
those things since it looks like the

135
00:11:51,399 --> 00:11:55,329
parish a language everybody goes and
they they imported and they run involve

136
00:11:55,329 --> 00:11:59,339
expression that's unsafe because there's
lots of stuff that can happen in the

137
00:11:59,339 --> 00:12:04,160
powerful language and so that's why
we've got this is a test

138
00:12:04,160 --> 00:12:07,980
safe get value so this will be in the
deck that is that if you're interested

139
00:12:07,980 --> 00:12:12,740
you can look at it later but this will
actually visit the AST this is the

140
00:12:12,740 --> 00:12:18,300
equivalent of people who take a JSON
parser and they just run in JavaScript

141
00:12:18,300 --> 00:12:22,680
four assists people who actually made a
sound person what we've done with this

142
00:12:22,680 --> 00:12:29,699
get value is done it as a people person
so you don't have to worry about are

143
00:12:29,699 --> 00:12:34,560
portrayed content coming into your
process if somebody manages to inject

144
00:12:34,560 --> 00:12:40,230
themselves into the father loaded so
those are the situations where you might

145
00:12:40,230 --> 00:12:44,279
run into somebody putting powerful into
taxer is those are some ways that you

146
00:12:44,279 --> 00:12:48,720
can attack them and also we can help
them prevent the attacks from happening

147
00:12:48,720 --> 00:12:55,850
now that said there's a ton of
situations where PowerShell it's not

148
00:12:55,850 --> 00:13:00,079
actually on the attacks her rights or
PowerShell is being used

149
00:13:00,079 --> 00:13:03,600
somebody pops a box from sequel
injection or command injection or

150
00:13:03,600 --> 00:13:04,639
something else

151
00:13:04,639 --> 00:13:09,490
once they've done that then what they're
doing is they're starting to pull in our

152
00:13:09,490 --> 00:13:16,220
involvement has been doing in memory
they're doing stages all these funds how

153
00:13:16,220 --> 00:13:24,139
creative it is now that situation is
just unauthorized system administration

154
00:13:24,139 --> 00:13:29,380
we spent the last 10 years writing
PowerShell to be a powerful system

155
00:13:29,380 --> 00:13:34,160
administration language we're not about
to start teaching the language and

156
00:13:34,160 --> 00:13:37,620
ditching the ability to run dotnet
because that's what makes it such a

157
00:13:37,620 --> 00:13:42,920
fantastic experience on Windows when
you're off to do it and so what we've

158
00:13:42,920 --> 00:13:47,600
done is spent a lot of time in our full
version 5 to make it more security

159
00:13:47,600 --> 00:13:53,959
transparent so a reasonable come before
was given for doing this stuff and be no

160
00:13:53,959 --> 00:13:58,870
way to know so we spent a lot of time
cracking up the loading a bunch of

161
00:13:58,870 --> 00:14:03,040
different ways that makes PowerShell
like you are never uncertain what

162
00:14:03,040 --> 00:14:06,930
happened with PowerShell in your bars
when you've installed PowerShell version

163
00:14:06,930 --> 00:14:10,439
for Windows 10 and then you've enabled
the right things will go into the right

164
00:14:10,439 --> 00:14:20,899
now the first one is pipeline so this is
existed since paratroopers into it got a

165
00:14:20,899 --> 00:14:25,779
lot better in PowerShell version 3 in
person and you can just set a group

166
00:14:25,779 --> 00:14:30,870
policy that says PowerShell whenever you
run any command just log the command

167
00:14:30,870 --> 00:14:34,850
that was run and all the arguing that
were passed to it so what you see here

168
00:14:34,850 --> 00:14:40,930
is an example where somebody is using
the ad type command so the ad type

169
00:14:40,930 --> 00:14:47,449
command in PowerShell lets you take a
string of C sharp and pilot in memory

170
00:14:47,449 --> 00:14:54,220
and then run the sentiment is from there
now but I did hear in the first couple

171
00:14:54,220 --> 00:14:59,089
lines I ran the ad type command and that
was now see sure potent memories after

172
00:14:59,089 --> 00:15:04,380
is compiled and the next pregnancy here
is the logging of everything that

173
00:15:04,380 --> 00:15:07,639
happens so you see here they ran ad type

174
00:15:07,639 --> 00:15:13,459
dash type definition with a script

175
00:15:13,459 --> 00:15:17,999
a great way to see every command that
was running the system is a lot of

176
00:15:17,999 --> 00:15:18,980
commands it don't

177
00:15:18,980 --> 00:15:23,589
attacks and a lot of scenarios that
don't involve just simple PowerShell

178
00:15:23,589 --> 00:15:32,019
commands and so we also added
transporting and and stripped lobbying

179
00:15:32,019 --> 00:15:37,189
should get into the second so transcript
also has existed since version one and

180
00:15:37,189 --> 00:15:41,740
when anybody tries to use it as a
security control until version 5 their

181
00:15:41,740 --> 00:15:46,499
energy challenges so transcription is
the idea that what would you see if

182
00:15:46,499 --> 00:15:51,589
you're looking over somebody's shoulder
on on a system using them typing

183
00:15:51,589 --> 00:15:55,579
commands you see the output coming and
that's a great way to understand what

184
00:15:55,579 --> 00:16:16,070
happened to a machine here

185
00:16:16,070 --> 00:16:34,810
started transcript to help with
directory run some commands and the

186
00:16:34,810 --> 00:16:39,520
waist up the transcript we did that was
kind of funny is that we had a day

187
00:16:39,520 --> 00:16:48,310
that's not just a string that comes back
it's an object it's gonna pass so now we

188
00:16:48,310 --> 00:16:52,980
can see this is what happens with over
the shoulder transcript so I can see

189
00:16:52,980 --> 00:16:56,660
here a bunch of interesting things you
see there's a username and run as user

190
00:16:56,660 --> 00:17:01,990
that's a great thing to do when you got
PowerShell transporting enabled on a

191
00:17:01,990 --> 00:17:07,020
remote system where somebody has lived
in and you've got PowerShell does

192
00:17:07,020 --> 00:17:11,990
support credential translation so you
can log in as somebody so i connect up

193
00:17:11,990 --> 00:17:16,900
to machine and then it elevates to local
admin so that I don't have any danger of

194
00:17:16,900 --> 00:17:22,220
you know might compromise what you would
see here in that transcript that it was

195
00:17:22,220 --> 00:17:28,040
being run as that's a local admin but
the user connecting with me

196
00:17:28,040 --> 00:17:34,430
bunch of information about PowerShell
and then you also have an headers so

197
00:17:34,430 --> 00:17:38,410
that you can later process these things
and have kind of output demand response

198
00:17:38,410 --> 00:17:50,260
things and it looks like you would
expect to get process

199
00:17:50,260 --> 00:17:54,810
existed since PowerShell version one is
the ability to interactively say start

200
00:17:54,810 --> 00:18:18,380
and stop transcript but we did in
PowerShell version 50 years before

201
00:18:18,380 --> 00:18:29,040
turning on module logging I can enable
it for all modules and now ever

202
00:18:29,040 --> 00:18:40,350
man that powerful run is gonna get lost
in the event log

203
00:18:40,350 --> 00:19:23,549
can enable this given that what
directory and before the only way that

204
00:19:23,549 --> 00:19:29,240
you could do that was based putting this
transcript command in the PowerShell

205
00:19:29,240 --> 00:20:52,630
system my profile

206
00:20:52,630 --> 00:21:02,420
transcripts are here now the cool thing
that given that that's a systemwide

207
00:21:02,420 --> 00:21:07,990
transcript so we made a mistake in the
early versions of power show adding that

208
00:21:07,990 --> 00:21:13,010
transcript support to the PowerShell
console boat itself so this new thing

209
00:21:13,010 --> 00:21:18,530
that you see here just the console
that's not actually power show that's a

210
00:21:18,530 --> 00:21:24,630
console application hosting the powerful
engine so we've got also the PowerShell

211
00:21:24,630 --> 00:21:28,820
ISE rate the integrated scripting
environment there's a Windows

212
00:21:28,820 --> 00:21:35,240
application hosting the powerful engine
so we made the mistake of adding

213
00:21:35,240 --> 00:21:40,350
transporting to the console host itself
just the native executable and so what

214
00:21:40,350 --> 00:21:44,360
we did it along with moving this to
system might support we put it deep into

215
00:21:44,360 --> 00:21:50,600
the engine so without any changes now
the ISE supports transcript thing and it

216
00:21:50,600 --> 00:21:54,860
also supports it listens to the
automatic system i transfer to have you

217
00:21:54,860 --> 00:22:01,650
been able to try again

218
00:22:01,650 --> 00:22:07,290
well the problem is I'm doing this and
real demand join machine takes forever

219
00:22:07,290 --> 00:22:17,410
and so here's an example of a ignorant
transcriber so I showed you the ad type

220
00:22:17,410 --> 00:22:23,020
command where you've got I told you
multiple things can host the PowerShell

221
00:22:23,020 --> 00:22:28,020
engine and so here's an example of me
creating a C sharp class

222
00:22:28,020 --> 00:22:36,850
that hosts the PowerShell engine and its
gonna run get process for all processes

223
00:22:36,850 --> 00:22:38,930
that have a name that starts with S

224
00:22:38,930 --> 00:22:44,010
as an example so this is a C sharp class
that does this

225
00:22:44,010 --> 00:22:52,320
the ad type command just Composite Index
see so now I have an executable hosting

226
00:22:52,320 --> 00:22:58,960
the powerful engine and because this was
done deep into the PowerShell engine its

227
00:22:58,960 --> 00:25:19,640
gonna pull up transcript and support as
well over here

228
00:25:19,640 --> 00:25:50,150
so does all these things so I can just
do is enable transcription that's now

229
00:25:50,150 --> 00:25:56,710
unable and I can run the well lets show
you first at something actually works

230
00:25:56,710 --> 00:26:23,320
alright see we've got a system my
transcript that you get over the

231
00:26:23,320 --> 00:26:38,820
shoulder of you that was enabled via
group policy but the great thing about

232
00:26:38,820 --> 00:26:43,170
telling me I have 30 processes that
start with the letter as it came and

233
00:26:43,170 --> 00:26:47,260
went away just person who wrote this
thing had no idea that that

234
00:26:47,260 --> 00:26:54,960
transcription wasn't able to machine but
you get basically the same views as we

235
00:26:54,960 --> 00:27:01,120
did this deep in the powerful engine so
if you're trying to do any sort of

236
00:27:01,120 --> 00:27:05,830
change management control and machine
this is a great way to say to know

237
00:27:05,830 --> 00:27:11,740
exactly what's happening in your systems
and so this is a virtual view of what

238
00:27:11,740 --> 00:27:12,659
the process

239
00:27:12,659 --> 00:27:17,200
the process would have seen and you can
see here that it was actually done from

240
00:27:17,200 --> 00:27:18,299
the API

241
00:27:18,299 --> 00:27:21,970
the command looks different it doesn't
look like a person just typed it it was

242
00:27:21,970 --> 00:27:29,309
an API commanders even the host
application you can see here and the

243
00:27:29,309 --> 00:27:33,330
process IDC can see exactly what
happened in that process while it was

244
00:27:33,330 --> 00:27:42,899
run now that's not much of a security
benefit that way if you're dumping

245
00:27:42,899 --> 00:27:46,909
transcripts on the local machine then
you're probably just going to have

246
00:27:46,909 --> 00:27:51,090
somebody who sees it happens and they're
gonna lead over transcripts but you

247
00:27:51,090 --> 00:27:56,200
definitely want to have is auditing of
any protections you've got but one great

248
00:27:56,200 --> 00:28:13,679
example that you can also set up so the
ability to him down here is a trading

249
00:28:13,679 --> 00:28:20,169
yes transcription air now this will
create a share on a specific machine and

250
00:28:20,169 --> 00:28:25,109
it'll say it was carried out as equal
and backsides transcripts the

251
00:28:25,109 --> 00:28:28,869
administrator gets full control but
everything else you can drop of the

252
00:28:28,869 --> 00:28:33,739
permissions so if you're dumping
transcripts to this remote share and

253
00:28:33,739 --> 00:28:37,869
somebody takes over machine they can't
even see the transcripts of a previously

254
00:28:37,869 --> 00:28:45,470
wrote and then when you create the new
SMB share here so this would you do this

255
00:28:45,470 --> 00:28:50,609
on a distributed file server all these
men have a share and then all your your

256
00:28:50,609 --> 00:28:55,399
systems in your enterprise or whatever
could be all going to use this same

257
00:28:55,399 --> 00:29:20,820
share

258
00:29:20,820 --> 00:29:27,940
that I've created a transcript share who
is the owner of the file on that

259
00:29:27,940 --> 00:29:42,809
transcription so local machine to the
current user's Documents directory so

260
00:29:42,809 --> 00:29:46,759
that's the default and so there's always
gonna be controlled by the actions of

261
00:29:46,759 --> 00:30:05,669
the directory that you put them into the
attack reading more sensitive

262
00:30:05,669 --> 00:30:10,250
transcripts so if you're storing those
transcripts on the local machine and the

263
00:30:10,250 --> 00:30:14,580
attacker has admin privilege then
they're gonna be able to do that if they

264
00:30:14,580 --> 00:30:17,919
don't have admin privilege then you just
make sure that you're looking into a

265
00:30:17,919 --> 00:30:22,000
directory that they don't have
permissions to now the question you have

266
00:30:22,000 --> 00:30:26,210
a really good one and we'll get to it a
little bit further of what can I do to

267
00:30:26,210 --> 00:30:32,230
protect sensitive data that I'm storing
in the machine and we got some great

268
00:30:32,230 --> 00:30:46,389
stuff for that show that in a minute so
that's the ability to create every note

269
00:30:46,389 --> 00:30:50,179
transcripts share that all the machines
will dump into and it will show you

270
00:30:50,179 --> 00:30:53,899
everything that happened as though he
were looking over the shoulder but

271
00:30:53,899 --> 00:30:56,330
there's something that you don't see
when you're looking over their shoulder

272
00:30:56,330 --> 00:31:01,509
so how many people have seen in
presentations like PowerShell dashing

273
00:31:01,509 --> 00:31:11,080
Cody command execution by that kind of a
typical teenager with that yeah now you

274
00:31:11,080 --> 00:31:15,370
might wonder they leave her show why did
you make of parameters specifically for

275
00:31:15,370 --> 00:31:17,840
attackers

276
00:31:17,840 --> 00:31:26,460
so this is so is the best thing now
that's an example where even looking

277
00:31:26,460 --> 00:31:29,980
over the purse shoulder doesn't really
help you out you know all you see is

278
00:31:29,980 --> 00:31:33,750
encoded command and you don't know what
to do with it what that included command

279
00:31:33,750 --> 00:31:37,690
did turn into though is a set of
PowerShell script blocks and PowerShell

280
00:31:37,690 --> 00:31:41,750
indications and those complex in
vacations meant something to PowerShell

281
00:31:41,750 --> 00:31:46,140
that was you know whatever but let me
show you made it the background behind

282
00:31:46,140 --> 00:31:54,289
that Simon Power said right here I can
type in power show 1+1

283
00:31:54,289 --> 00:32:12,570
parish and dutifully says the answers to
this complicated things get process now

284
00:32:12,570 --> 00:32:18,390
if you were a betting man and woman
you'd probably say hey this is just

285
00:32:18,390 --> 00:32:22,520
returning texts as you'd expect that
coming from things but when power shots

286
00:32:22,520 --> 00:32:26,820
easier using VBScript locks it actually
does something much smarter this isn't

287
00:32:26,820 --> 00:32:37,580
taxed I'm using to get member commanded
here because all these properties

288
00:32:37,580 --> 00:32:43,039
delicious delicious droppings so this is
a Dec realized system diagnostics top

289
00:32:43,039 --> 00:32:49,110
process and given that these are all
properties with reeling in 32 min 64th

290
00:32:49,110 --> 00:33:05,799
and stuff I can do things

291
00:33:05,799 --> 00:33:12,600
if this was texting has some magic box
said great magic that would've been

292
00:33:12,600 --> 00:33:20,399
better anyways this is the core
infrastructure that causes important

293
00:33:20,399 --> 00:33:29,989
command so for example send this same
syntax to a process it doesn't

294
00:33:29,989 --> 00:33:39,129
understand it so you can see here when I
was launching a process with the script

295
00:33:39,129 --> 00:33:47,809
law will do his own and encoding command
and influence and a given input from it

296
00:33:47,809 --> 00:33:54,799
of XML output format of texts and now
this is Michelle understands this and do

297
00:33:54,799 --> 00:34:00,039
all that bright object mad magic CMD
dozens this is why that from it exists

298
00:34:00,039 --> 00:34:06,970
if you're a blue team and you use with
anything but input format and output

299
00:34:06,970 --> 00:34:12,119
format in this exact syntax you've got
something happening this will never have

300
00:34:12,119 --> 00:34:16,440
execution bypass it will never have
windows tell him it would never have no

301
00:34:16,440 --> 00:34:21,659
profile this is the situation that you
can just light up if you see something

302
00:34:21,659 --> 00:34:22,909
like that

303
00:34:22,909 --> 00:34:29,389
say that all the script lots happening
so this included command one thing that

304
00:34:29,389 --> 00:34:40,589
we've added is stripped block logging

305
00:34:40,589 --> 00:34:48,979
now have been able to skip plugging and
when you've done this

306
00:34:48,979 --> 00:35:10,190
across your system's PowerShell now has
a bunch of new events so I just ran some

307
00:35:10,190 --> 00:35:53,940
simple math and variable access right to
invoke expression of hello world so

308
00:35:53,940 --> 00:36:04,789
here's a bunch of commands it is friends
with adrenaline + 10 problems it ran and

309
00:36:04,789 --> 00:36:19,890
invoke expression hello world and this
again and it will

310
00:36:19,890 --> 00:36:25,099
have evaluated the string HelloWorld so
with this you have even if you're

311
00:36:25,099 --> 00:36:29,460
running encoded commands you don't have
to worry about what is happening with

312
00:36:29,460 --> 00:36:50,279
that look silly

313
00:36:50,279 --> 00:36:54,890
go to the same models

314
00:36:54,890 --> 00:37:01,970
here's the problem that was run you can
imagine an attacker saying I'm gonna be

315
00:37:01,970 --> 00:37:06,510
really secret the problem the machine
and just start power shelling killed it

316
00:37:06,510 --> 00:37:10,559
and then all the command invocation
happens to the prompt so that was a loud

317
00:37:10,559 --> 00:37:35,079
and here is the script luck that was run
from the the the other console and see

318
00:37:35,079 --> 00:37:39,640
see all the script even describe it was
in the PowerShell formatting files was

319
00:37:39,640 --> 00:37:43,589
right there for you to analyze any of
that stuff is his temper or not you've

320
00:37:43,589 --> 00:38:01,390
got access to him so there's

321
00:38:01,390 --> 00:38:13,710
take a look at something like this
PowerShell dash dash command with a web

322
00:38:13,710 --> 00:39:09,990
stager going off to bed leave who knows
what is pulling down now what happened

323
00:39:09,990 --> 00:39:28,230
this is an epic so we can do the message
parameter but into the clipboard and

324
00:39:28,230 --> 00:39:34,780
let's start announcing analyzing what
happened so you see here I had been able

325
00:39:34,780 --> 00:39:43,700
to I ran this

326
00:39:43,700 --> 00:39:54,400
you see here we lunch thing we loaded
the profile here now here is where

327
00:39:54,400 --> 00:40:01,550
stress to get suspicious here's the
invoke expression and then it is

328
00:40:01,550 --> 00:40:12,200
something machine now that in the
expression what you see here is this

329
00:40:12,200 --> 00:40:19,280
this and this is complicated this would
be a hard thing to reverse you got

330
00:40:19,280 --> 00:40:36,839
download string data here and then you
see we've got some more complicated

331
00:40:36,839 --> 00:40:42,160
stuff around we have a was actually gzip
compressed up in memory how we gonna

332
00:40:42,160 --> 00:40:48,210
start to think it was that into it takes
this big block and Dana D compresses it

333
00:40:48,210 --> 00:40:53,319
and then it runs invoke expression on
that structure so you might think that

334
00:40:53,319 --> 00:40:59,980
that's pointless you've got malware that
downloaded data

335
00:40:59,980 --> 00:41:05,690
stager when invoking special on the data
structure but now we can see what

336
00:41:05,690 --> 00:41:17,119
actually was done in the expression that
looks kind of complicated as you can see

337
00:41:17,119 --> 00:41:25,110
here that half of the data that was
taken down where the text

338
00:41:25,110 --> 00:41:32,520
so if you block enabling logging enabled
you don't have to worry about people

339
00:41:32,520 --> 00:41:39,880
doing suspicious stuff that you have no
idea what it is all out for you know

340
00:41:39,880 --> 00:41:44,730
there was a question of what are they
doing all this amazing logging enabled

341
00:41:44,730 --> 00:41:50,250
you know one of the theories is if an
attacker compromises machine with all

342
00:41:50,250 --> 00:41:53,760
this logging enabled we're gonna have
some serious danger if they can start

343
00:41:53,760 --> 00:41:57,460
looking through all this love stuff
maybe there's been credentials and

344
00:41:57,460 --> 00:42:05,980
passwords sensitive shares and the good
news is that we got your back there so

345
00:42:05,980 --> 00:42:14,100
version 5 and the CMS message from
analyst soso MS stands for the

346
00:42:14,100 --> 00:42:19,550
cryptographic message syntax so that's a
standard thing out there it's supported

347
00:42:19,550 --> 00:42:26,760
in OpenSSL and Windows is based on the
the encryption that people use when

348
00:42:26,760 --> 00:42:32,600
they're doing sign emails so we had to
get protect and unprotect CMS message

349
00:42:32,600 --> 00:42:43,020
command Lewis know what you can do if
you want is this

350
00:42:43,020 --> 00:42:53,690
it has the this is this is the OED
production encryption so if you've got

351
00:42:53,690 --> 00:42:57,450
any system that does certificate
issuance

352
00:42:57,450 --> 00:43:03,050
lady and you've got an appropriate
certificate so this is really boring you

353
00:43:03,050 --> 00:43:11,800
want to do is the new cell science
commandment that that's in windows and

354
00:43:11,800 --> 00:43:19,330
I'm just gonna give it a document
encryption serve as the argument so now

355
00:43:19,330 --> 00:43:27,540
I have a new cell phone certificate and
you can validate that you got them here

356
00:43:27,540 --> 00:43:32,350
I had been the local machine my I now
have this cell signed document

357
00:43:32,350 --> 00:43:36,150
encryption certificate and you can even
just used up in a corruption search

358
00:43:36,150 --> 00:43:42,860
parameter to figure out which ones you
got so here's an example of actually how

359
00:43:42,860 --> 00:43:45,999
easy it is to encrypt something I've got
some text

360
00:43:45,999 --> 00:43:56,929
send it to protect CMS message
commandant

361
00:43:56,929 --> 00:44:07,769
encrypted using public key crypto text
now if you a check out all the stuff

362
00:44:07,769 --> 00:44:11,119
that you can do with one of these things
you've got the mississippi nympho so the

363
00:44:11,119 --> 00:44:16,589
nice thing about this encoding format is
that it contains or you don't have to

364
00:44:16,589 --> 00:44:21,009
worry about when you're decrypting
actually saying which recipient of a use

365
00:44:21,009 --> 00:44:27,689
for the encryption and then I can just
take that same content and run it

366
00:44:27,689 --> 00:44:34,229
through unprotected CMS message so
that's using the full public-private key

367
00:44:34,229 --> 00:44:46,099
crypto now you might be like oh here's
an example of an OpenSSL actually so the

368
00:44:46,099 --> 00:44:49,419
only thing that gets challenging about
interrupt the OpenSSL

369
00:44:49,419 --> 00:44:53,129
OpenSSL assumes that the only thing
using the cryptographic message syntax

370
00:44:53,129 --> 00:44:59,079
literally emails so when you're doing
the back and forth just a quick example

371
00:44:59,079 --> 00:45:04,049
of like taking off the mine had just
kind of massaging the data itself into

372
00:45:04,049 --> 00:45:17,329
the OpenSSL format but then it encrypts
and decrypts just fine

373
00:45:17,329 --> 00:45:24,369
like it was then you might still under
how does this relate to me an event logs

374
00:45:24,369 --> 00:45:42,450
what we've had is that's clear this
event again we've done is an able script

375
00:45:42,450 --> 00:45:48,819
plugging but I've also enable protected
event logging so the magic public and

376
00:45:48,819 --> 00:45:52,890
private key crypto is at the encryption
key is different than the decryption key

377
00:45:52,890 --> 00:45:58,369
so you can leave your your public key
everywhere on all the machines in an

378
00:45:58,369 --> 00:46:03,660
entire enterprise and in paris Hilton
encrypt to that certificate and then

379
00:46:03,660 --> 00:46:08,619
when you have your say whatever you have
taken these event logs off the box you

380
00:46:08,619 --> 00:46:12,880
can have your private key on that
collector machine and indeed there and

381
00:46:12,880 --> 00:46:16,539
not have to worry that I machine might
compromise is going to disclose

382
00:46:16,539 --> 00:46:51,650
sensitive data so when I think not count
in routine now disable these things

383
00:46:51,650 --> 00:46:57,540
we've done is really great as you get a
warning if the certificate but you left

384
00:46:57,540 --> 00:47:02,380
behind contains a private key to helping
us all that all the private key in the

385
00:47:02,380 --> 00:47:54,040
box and all this stuff so that's
creating content everywhere

386
00:47:54,040 --> 00:48:01,360
see is that the content of all those
strip locks are going to be the CMS

387
00:48:01,360 --> 00:48:06,620
message format and then you can just
either pipe the output of get one event

388
00:48:06,620 --> 00:48:10,720
to undertake CMS message and it would be
automatically deducted for you or you

389
00:48:10,720 --> 00:48:25,270
could just send that text itself over to
other machines and do it that way that

390
00:48:25,270 --> 00:48:40,270
is very great thank you

391
00:48:40,270 --> 00:48:47,840
it was so hard to make it seamless so
what this is actually in the event log

392
00:48:47,840 --> 00:48:54,460
but to show you how easy it is to
convert it to think that your systems

393
00:48:54,460 --> 00:49:01,210
are already used to inject ingesting
these things so that's what it looks

394
00:49:01,210 --> 00:49:06,900
like when you include the context you
can even get rid of the include context

395
00:49:06,900 --> 00:49:29,350
parameter and actually just get the text
cell so you can enable logging in

396
00:49:29,350 --> 00:49:35,050
PowerShell and not have to worry at all
about that data getting left behind

397
00:49:35,050 --> 00:49:50,590
so thanks for any questions I don't try
to make it as easy as possible to take

398
00:49:50,590 --> 00:49:56,600
it out of that format so that they can
ingest regular messages right

