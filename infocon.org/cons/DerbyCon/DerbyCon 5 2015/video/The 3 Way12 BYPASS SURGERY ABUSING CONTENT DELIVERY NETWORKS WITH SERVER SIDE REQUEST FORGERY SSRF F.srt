1
00:00:00,000 --> 00:00:03,629
making this content producer Fox been at
work for a ride sharing service called

2
00:00:03,629 --> 00:00:10,420
posts I D plus about security on my blog
at the dot-com hit me up on Twitter and

3
00:00:10,420 --> 00:00:11,170
I am an attorney

4
00:00:11,170 --> 00:00:16,209
the Seychelles keep republicans public
so I say nothing of your texts and

5
00:00:16,209 --> 00:00:23,910
emails 10 days it's not me and I Mike
Brooks I go by rock which comes from my

6
00:00:23,910 --> 00:00:30,460
last name just without the BS III
participate in stackoverflow insecurity

7
00:00:30,460 --> 00:00:33,700
. Stock Exchange think these are great
communities rich security professionals

8
00:00:33,700 --> 00:00:41,500
I recommend that others participate so
we're an interesting point with the web

9
00:00:41,500 --> 00:00:45,010
in the way that things are architected
when it comes to kind of like you like

10
00:00:45,010 --> 00:00:50,050
to top 10,000 locations it's pretty rare
nowadays real have just a single web

11
00:00:50,050 --> 00:00:54,829
page that has all the resources hosted
on just that one website they all make

12
00:00:54,829 --> 00:00:59,160
use of different their party Services
Google Analytics you know aww ask all

13
00:00:59,160 --> 00:01:01,800
these different things to kind of bring
together his final products that you

14
00:01:01,800 --> 00:01:06,220
actually when you like go to
facebook.com for example and so what's

15
00:01:06,220 --> 00:01:09,180
interesting about this is you actually
end up implicitly trusting all of these

16
00:01:09,180 --> 00:01:12,909
third parties just by using the website
itself without you even knowing what

17
00:01:12,909 --> 00:01:16,900
they're having a third party services at
all and so this brings into

18
00:01:16,900 --> 00:01:19,810
consideration some of the interesting
security implications when you have an

19
00:01:19,810 --> 00:01:25,340
ability in one of these third parties so
specifically we're going to talk about

20
00:01:25,340 --> 00:01:29,470
content delivery networks and what our
content delivery networks it basically

21
00:01:29,470 --> 00:01:34,759
you have things like Akamai you know who
basically have these huge networks which

22
00:01:34,759 --> 00:01:38,310
you can use in order to serve content
quickly to users you take advantage will

23
00:01:38,310 --> 00:01:41,960
serve content for you and get you get
you save on bandwidth you can make

24
00:01:41,960 --> 00:01:47,110
outsourced to them and of course you
know these operate in the background

25
00:01:47,110 --> 00:01:54,380
all the services because there just
invisible to you too many people

26
00:01:54,380 --> 00:01:57,420
probably parents think of the

27
00:01:57,420 --> 00:02:01,900
think of the internet and kind of this
way they think I taking foxnews.com into

28
00:02:01,900 --> 00:02:08,539
the the web icon and it Fox and Fox give
me back the web page and like that's

29
00:02:08,539 --> 00:02:13,850
that's it they don't know how to have a
good idea how that might work but of

30
00:02:13,850 --> 00:02:18,040
course we know that that's just not the
case anymore we see that Fox News you

31
00:02:18,040 --> 00:02:21,580
maybe want to gather analytics and other
users browse the site of course the

32
00:02:21,580 --> 00:02:25,670
transcript from Adobe furtive analytics
maybe they don't want to host a big

33
00:02:25,670 --> 00:02:29,920
global JavaScript sticks within the men
went to the use jQuery to content may be

34
00:02:29,920 --> 00:02:34,630
four other images the something like
Akamai in order to serve all the heavy

35
00:02:34,630 --> 00:02:38,690
lifting stuff for them and maybe even
their DNS is actually managed by third

36
00:02:38,690 --> 00:02:41,989
parties are like the idea of something
so the other things can come together to

37
00:02:41,989 --> 00:02:47,870
give you this final product Dec so it
fits into a very interesting position

38
00:02:47,870 --> 00:02:52,160
where we have come a couple of course ed
and products that all of these different

39
00:02:52,160 --> 00:02:55,890
websites kind of implicitly trust so
what happens when you find a

40
00:02:55,890 --> 00:03:00,280
vulnerability in one of these core CD
ends on the answer is the impact is

41
00:03:00,280 --> 00:03:07,170
severe and its far-reaching so we're
we're sorry off a showing you an example

42
00:03:07,170 --> 00:03:13,290
of the hack and this examples with Ralph
Lauren so those who don't learn is kind

43
00:03:13,290 --> 00:03:18,829
of a high-end clothing retailer
accessories versus what what have you

44
00:03:18,829 --> 00:03:22,650
Highmark debates said he's addressing
that site and after they you know log

45
00:03:22,650 --> 00:03:26,530
into this website they never get to this
third party website which is just some

46
00:03:26,530 --> 00:03:31,070
arbitrary attacker control domain after
they do so they go back to the original

47
00:03:31,070 --> 00:03:35,680
website and enter something has happened
on the same or they see something's been

48
00:03:35,680 --> 00:03:42,859
added to shopping bag could that be and
the answer is we've added a very

49
00:03:42,859 --> 00:03:48,650
expensive alligator handbag almost
$29,000 that's one fancy alligator

50
00:03:48,650 --> 00:03:52,730
do your shopping carts it without you
having any knowledge of this this is

51
00:03:52,730 --> 00:03:58,890
quite concerning happen with an example
here before I go into some interesting

52
00:03:58,890 --> 00:04:02,950
to point out that mad props to Microsoft
when we did the stock at Black Hat

53
00:04:02,950 --> 00:04:07,159
actually reached out to us beforehand or
like hey when are you gonna talk

54
00:04:07,159 --> 00:04:10,400
affected anything we can do to get
passed before you even give the stock

55
00:04:10,400 --> 00:04:15,189
and of course we've identified some
points in like fashion so massive and

56
00:04:15,189 --> 00:04:20,220
off to those guys really really nice
stuff so here's an example we have a

57
00:04:20,220 --> 00:04:25,900
user browsing to actually a subdomain of
my curtsy we have live.com something

58
00:04:25,900 --> 00:04:30,320
made of soft on demand and we see that
they go you know the center protect your

59
00:04:30,320 --> 00:04:31,240
PC

60
00:04:31,240 --> 00:04:34,500
the project go download microsoft
Security Essentials gonna get it now

61
00:04:34,500 --> 00:04:40,690
they don't get Microsoft Security
Essentials they get so why is you know

62
00:04:40,690 --> 00:04:45,260
house is happening how are they serving
up this random binary and the answer is

63
00:04:45,260 --> 00:04:51,500
a vulnerability in the city and the use
what happened here we use an attack

64
00:04:51,500 --> 00:04:56,830
chain comprised of server-side request
forgery and remotes with include to

65
00:04:56,830 --> 00:05:02,930
control the content delivered by the
network so why are you attacking why is

66
00:05:02,930 --> 00:05:08,810
actually useful attaching allows us to
increase the impact posed by bugs

67
00:05:08,810 --> 00:05:14,349
real-world example would be here trying
to break into a building let's say you

68
00:05:14,349 --> 00:05:20,539
find that their the gate to their their
backyard is open and you walk into their

69
00:05:20,539 --> 00:05:23,580
backyard you find that there's a ladder
in the backyard and use the slider to

70
00:05:23,580 --> 00:05:31,240
get onto their patio and then once
you're up there are you find that one of

71
00:05:31,240 --> 00:05:34,110
the windows is open and now you're
inside the building so that that's a

72
00:05:34,110 --> 00:05:39,349
physical attraction the larger break
into a building so what about how did

73
00:05:39,349 --> 00:05:40,760
you break into

74
00:05:40,760 --> 00:05:50,370
ivory tower will you use an ivory latter
elephants elephants in order to find

75
00:05:50,370 --> 00:05:56,720
this issue we need diana's DNS holds all
the keys it shows us trust relationships

76
00:05:56,720 --> 00:05:59,810
and it revealed this issue to begin with

77
00:05:59,810 --> 00:06:04,070
so this particular vulnerability and
Akamai has been around for a long time

78
00:06:04,070 --> 00:06:08,810
and went undiscovered for quite some
time and I think there are a couple of

79
00:06:08,810 --> 00:06:15,480
reasons for that is that penetration
tests are have a divided scope usually

80
00:06:15,480 --> 00:06:20,870
penetration tests are worried about load
balancers HTTP servers databases and

81
00:06:20,870 --> 00:06:25,530
administrative interfaces and the
external supporting services such as

82
00:06:25,530 --> 00:06:32,050
Gmail Syrians CloudFlare a lot Amazon
AWS services are left out of scope so in

83
00:06:32,050 --> 00:06:36,070
the case of Gmail and Google services I
mean they have a bug bounty program you

84
00:06:36,070 --> 00:06:39,310
think that they would be pretty secure
but all too often they have very weak

85
00:06:39,310 --> 00:06:44,590
passwords and user are left outside of
of an assessment this particular issue

86
00:06:44,590 --> 00:06:49,500
is affecting the external supporting
infrastructure and I think that's as a

87
00:06:49,500 --> 00:06:50,800
contributing factor

88
00:06:50,800 --> 00:06:56,240
another part of it is dns what tools are
used to map out our targets so their

89
00:06:56,240 --> 00:07:00,660
number of DNS tools that help you in the
printing process one of them is dennis

90
00:07:00,660 --> 00:07:06,140
dumpster dot com now the service has an
artificial limitation it returns a large

91
00:07:06,140 --> 00:07:11,650
number of DNS records for your host but
it's limited to only 256 records now 256

92
00:07:11,650 --> 00:07:15,500
records is nice but it is nowhere near
the number of records and you'll find on

93
00:07:15,500 --> 00:07:21,810
the Alexa top ten thousand so the other
tools DNS recon or fierce these are

94
00:07:21,810 --> 00:07:28,140
older brute force utilities that helped
subdue means I think that there's a I

95
00:07:28,140 --> 00:07:32,760
don't like the limitations in these
tools so I wrote some show of hands are

96
00:07:32,760 --> 00:07:36,040
there any sub root users in the crowd

97
00:07:36,040 --> 00:07:41,750
couple ok well im the project maintainer
of this of some fruit and we have over

98
00:07:41,750 --> 00:07:50,060
94,000 I'll get up and the usage of
simple in this case the first command

99
00:07:50,060 --> 00:07:55,450
here is running against Google HP print
out all the DNS records of fines and

100
00:07:55,450 --> 00:08:01,220
ashes are used in this case a large list
of subdomains there's also a test our

101
00:08:01,220 --> 00:08:08,130
option and reuses open resolvers is a
kind of proxy between you and the

102
00:08:08,130 --> 00:08:09,800
authoritative name servers such that

103
00:08:09,800 --> 00:08:12,930
none of your traffic goes directly to
your target so this is a pseudo

104
00:08:12,930 --> 00:08:17,990
anonymous feature also significantly
faster because it bypasses the

105
00:08:17,990 --> 00:08:25,940
rate-limiting which is prevalent in
montana servers so now support is

106
00:08:25,940 --> 00:08:30,199
medicare a spider so what is a DNS
mckree well

107
00:08:30,199 --> 00:08:34,740
uses two different medic raise the first
one is an XFR

108
00:08:34,740 --> 00:08:39,560
so far is the easy button if X fires are
allowed by the authoritative name server

109
00:08:39,560 --> 00:08:46,060
you get a list of every DNS record it is
responsible for done now what does it

110
00:08:46,060 --> 00:08:50,750
say tries each DNS server responded by
DNS record because one of them may be

111
00:08:50,750 --> 00:08:56,170
configured to allow exit Mars but
something like 99% of the time this is

112
00:08:56,170 --> 00:09:01,829
gonna fail it's worth trying so then it
falls back on any medicare and medicaid

113
00:09:01,829 --> 00:09:07,209
pays return all records of all type for
a particular name but you still have to

114
00:09:07,209 --> 00:09:10,839
find out what those names are so you can
do

115
00:09:10,839 --> 00:09:15,640
decrees on the command line using dick
in this case any google.com using it as

116
00:09:15,640 --> 00:09:20,779
a territory returns 24 different record
checks there a records could replace and

117
00:09:20,779 --> 00:09:27,760
a steak 257 IMAX some interesting stuff
to look at so what does is it does a

118
00:09:27,760 --> 00:09:33,870
decree and it matches all of the data
segment against regular expression

119
00:09:33,870 --> 00:09:38,310
looking for subdomains of interest now
this is future-proof I don't care what

120
00:09:38,310 --> 00:09:42,529
the type of record it is I just carried
that there's a DNS there's a subdomain

121
00:09:42,529 --> 00:09:46,700
some some some demand within the the
data type and then recursively calls

122
00:09:46,700 --> 00:09:52,750
these types so what does that give us
when running this against google.com we

123
00:09:52,750 --> 00:09:58,560
find over 3,000 DNS records I don't know
of any other tool any other open source

124
00:09:58,560 --> 00:10:02,490
tool it doesn't matter I don't know of
any other way to get more than 3,000 DNS

125
00:10:02,490 --> 00:10:07,240
records on google.com and that is a bad
thing there are a lot more than 3,000

126
00:10:07,240 --> 00:10:13,279
DNS records and i am looking for ways to
find more we need better DNS tools so

127
00:10:13,279 --> 00:10:17,350
that we can find vulnerabilities since
content delivery network so we can find

128
00:10:17,350 --> 00:10:21,870
vulnerabilities in supporting
infrastructure to encourage others to

129
00:10:21,870 --> 00:10:26,120
send me pull request the starboard or
fork me or find ways to find more DNS

130
00:10:26,120 --> 00:10:30,630
records so let's look at the break down
here overwhelmingly Google's returning a

131
00:10:30,630 --> 00:10:35,279
records now these are just a DNS record
pointing to an IP address and the reason

132
00:10:35,279 --> 00:10:39,380
why Google has predominantly a records
is because Google hosts all of their

133
00:10:39,380 --> 00:10:43,040
services in-house use their own content
delivery networks their own email their

134
00:10:43,040 --> 00:10:46,640
own VoIP everything is in house and so
it's all pointing to their own systems

135
00:10:46,640 --> 00:10:51,020
now I think this works really well for
Google they're they're very hard in

136
00:10:51,020 --> 00:10:54,680
target and they were not vulnerable to
this particular issue but there are

137
00:10:54,680 --> 00:11:00,560
other records returned see names could
replace SRV records no error type 257

138
00:11:00,560 --> 00:11:07,589
what are these okay so type 2 57 is a
new DNS record type and it is using DNS

139
00:11:07,589 --> 00:11:12,600
certificate pinning it is the shower
when hash of the issuing CA SERT used by

140
00:11:12,600 --> 00:11:18,330
Google if this is a way to help defeat
militia CA is issuing certificates for

141
00:11:18,330 --> 00:11:23,250
google.com now why is this a problem
will Google is running into trouble with

142
00:11:23,250 --> 00:11:28,230
malicious governments in this case the
Chinese government is notorious for

143
00:11:28,230 --> 00:11:34,560
using their own certificate authorities
to issue malicious certs for Google's

144
00:11:34,560 --> 00:11:38,570
domains such as not only shows us trust
relationships it shows us that our

145
00:11:38,570 --> 00:11:43,100
target does has trust issues that they
don't trust people not important

146
00:11:43,100 --> 00:11:47,760
very interesting now there's another
emerging standard Indian ass that's

147
00:11:47,760 --> 00:11:52,880
called Dane or DNS based authentication
of named entities this is a way of

148
00:11:52,880 --> 00:11:58,240
replacing our broken PKI with using 10 a
sec

149
00:11:58,240 --> 00:12:03,670
as a trusted party for distribution of
certificates I think Dane has the

150
00:12:03,670 --> 00:12:08,630
potential for solving this problem of
malicious issuing CA sir lucious

151
00:12:08,630 --> 00:12:12,610
certificate authorities and in the
future I think it will solve this

152
00:12:12,610 --> 00:12:19,200
problem but we don't live in that future
not yet now other records returned for

153
00:12:19,200 --> 00:12:24,270
SRV records what r SRV records so in
this case as Harvey records follow a

154
00:12:24,270 --> 00:12:29,870
common pattern this case Cal dive is
running on TCP and it's very important

155
00:12:29,870 --> 00:12:33,480
eighty and pointing to calendar .
google.com was also held out

156
00:12:33,480 --> 00:12:39,100
which is running on TCP port 389 and
found it held out google.com so service

157
00:12:39,100 --> 00:12:45,880
records are away for applications to
find the the server that they use so

158
00:12:45,880 --> 00:12:50,779
when you put a VoIP phone into your
network how does the boyfriend find its

159
00:12:50,779 --> 00:12:56,050
voice gateway it uses SRV records how do
Windows machines find their domain

160
00:12:56,050 --> 00:13:02,110
controller SRV records now something
else that we found when we're mapping

161
00:13:02,110 --> 00:13:07,620
out our target in a pen test was we
found this strange scene M train so we

162
00:13:07,620 --> 00:13:12,250
found that some subdomain of our target
was pointing to edge sweet and another

163
00:13:12,250 --> 00:13:16,880
CNN pointing to Akamai and finally an A
record pointing to an IP address now we

164
00:13:16,880 --> 00:13:22,350
started mapping out these Dennis records
not only for our target but for some of

165
00:13:22,350 --> 00:13:25,940
our other clients and then in this case
Facebook and we noticed that this common

166
00:13:25,940 --> 00:13:26,740
pattern

167
00:13:26,740 --> 00:13:33,329
existed on large number of sites this is
one of the first indications of the

168
00:13:33,329 --> 00:13:38,490
vulnerability that we are going into the
brood can also be used on internal

169
00:13:38,490 --> 00:13:43,069
network assessment and that's why built
suburb . exe running Windows system or

170
00:13:43,069 --> 00:13:47,560
using an impost exploitation so in this
case separate txt is being run against

171
00:13:47,560 --> 00:13:51,319
the subdomain on an internal network and
the internal name servers will return

172
00:13:51,319 --> 00:13:56,240
will give you more information about
what's running through it in this case

173
00:13:56,240 --> 00:14:02,040
running it we found 19 domain
controllers in this network that's huge

174
00:14:02,040 --> 00:14:06,220
now each of the domain controllers are
named after hockey teams the Rangers the

175
00:14:06,220 --> 00:14:12,410
Sharks the Canucks how much you wanna
bet that one of their passwords was a

176
00:14:12,410 --> 00:14:16,180
hockey player name followed by his
jersey number

177
00:14:16,180 --> 00:14:20,400
the chances were good

178
00:14:20,400 --> 00:14:25,930
now at dinner can also suffer from
information leaks in this case a common

179
00:14:25,930 --> 00:14:32,150
DNS configuration opens the door for CWE
2003 which is information disclosure

180
00:14:32,150 --> 00:14:37,550
through discrepancy is the kind of catch
all for disclosing information so what

181
00:14:37,550 --> 00:14:42,390
does that look like now what's upper
does is it tries to look up a domain or

182
00:14:42,390 --> 00:14:47,310
subdomain that it knows doesn't exist
some random large sub and if it ever

183
00:14:47,310 --> 00:14:50,950
gets it while it's looking up other
demands of every gets a discrepancy some

184
00:14:50,950 --> 00:14:54,890
other response recorded it and so in
this case when running against our

185
00:14:54,890 --> 00:15:02,770
target we get these no errors so I say
hey domain.com does not exist so

186
00:15:02,770 --> 00:15:07,360
conservative pie with I can't confirm or
deny the existence of that data but you

187
00:15:07,360 --> 00:15:09,520
definitely didn't throw an error when
you requested it

188
00:15:09,520 --> 00:15:15,400
fishy in this case subs of Domaine key
our public keys used for a

189
00:15:15,400 --> 00:15:19,550
cryptographically signing outgoing email
by having to minke

190
00:15:19,550 --> 00:15:23,020
we know that our target is
cryptographically sending email using

191
00:15:23,020 --> 00:15:29,280
became awesome as CIA of UCSD of what
are these internal that legit pink dot

192
00:15:29,280 --> 00:15:36,150
com now that's interesting so let's
enumerated these supplements so sub

193
00:15:36,150 --> 00:15:40,890
route takes it up her files as inputs
and so we can specifically reruns sub

194
00:15:40,890 --> 00:15:46,910
root against all of the new errors that
were returned so held at St I dot dot

195
00:15:46,910 --> 00:15:52,450
com awesome sorry no sei is its own
domain under legit pink dot com it has a

196
00:15:52,450 --> 00:15:56,950
domain controller the results to an
internal $10 IP address which we just

197
00:15:56,950 --> 00:16:01,230
found the IP address of their domain
controller from an external assessment

198
00:16:01,230 --> 00:16:04,980
but we can't access it's 10 . it's still

199
00:16:04,980 --> 00:16:08,890
information disclosure vulnerability
this configuration should not exist in a

200
00:16:08,890 --> 00:16:15,520
production environment without internal
so internal we found two subs accounting

201
00:16:15,520 --> 00:16:18,760
done internal knowledge of Bank dot com
I would love to access the banks

202
00:16:18,760 --> 00:16:23,140
accounting system monitoring that's
awesome but I can't access is $10 from

203
00:16:23,140 --> 00:16:26,410
the external or cannot

204
00:16:26,410 --> 00:16:32,800
this brings us to server-side request
forgery CSRF is about trust so our

205
00:16:32,800 --> 00:16:38,509
target our server legit bank dot com
needs to trust other services may be a

206
00:16:38,509 --> 00:16:42,759
part of a virtual private cloud
deployment it has other internal issue

207
00:16:42,759 --> 00:16:46,019
to be servers that it relies upon
internal databases and internal

208
00:16:46,019 --> 00:16:53,790
administrative interfaces SRF allows us
to make requests as the server and

209
00:16:53,790 --> 00:16:59,920
access these internal these internal
resources so why does SRF exist in the

210
00:16:59,920 --> 00:17:05,959
first place why would anyone have this
ability will win the one reason why it

211
00:17:05,959 --> 00:17:09,669
may exist is to circumvent the same
origin policy using something called a

212
00:17:09,669 --> 00:17:14,220
cross-domain proxy now when you search
for custom in proxy on Google

213
00:17:14,220 --> 00:17:19,679
the first two results are SRF now it
specifically the second results here PHP

214
00:17:19,679 --> 00:17:24,319
across them in proxy will go into in a
bit okay so what tools to use for

215
00:17:24,319 --> 00:17:29,280
exploitation and identification of these
issues now there's an cats which is the

216
00:17:29,280 --> 00:17:32,270
latest version of neck and I highly
recommend updating our new features and

217
00:17:32,270 --> 00:17:38,200
MCAT that are there are trading was also
each be been Doric which is an

218
00:17:38,200 --> 00:17:42,049
interesting HIV server the kids you a
variety of responses back now personally

219
00:17:42,049 --> 00:17:47,130
I never use a should be been on a pen
test because I want my odz to be private

220
00:17:47,130 --> 00:17:54,260
so I run my own work collaborator and
that way I love this is sickness or call

221
00:17:54,260 --> 00:17:58,760
backs I receive and I'm not worried
about a third party

222
00:17:58,760 --> 00:18:04,289
finding my photos so in this particular
case but collaborator would easily find

223
00:18:04,289 --> 00:18:11,390
this issue of PHP proxy so now PHP proxy
except one parameter it is a in this

224
00:18:11,390 --> 00:18:17,429
case you are out and so this URL what
happens if we put in localhost 631 so

225
00:18:17,429 --> 00:18:23,770
will call 631 is an issue server running
the cops Damon which is a printer daemon

226
00:18:23,770 --> 00:18:30,190
and this runs as root on localhost now
older versions with their shows that

227
00:18:30,190 --> 00:18:33,960
were able to access to local whose
Damien from the remote internet

228
00:18:33,960 --> 00:18:37,720
able to to break a trust boundary we
should not be able to access this

229
00:18:37,720 --> 00:18:38,220
interface

230
00:18:38,220 --> 00:18:42,240
older versions of the cuts Damon were
vulnerable to shell shocked and

231
00:18:42,240 --> 00:18:47,870
exploitation of shell-shocked in this
context these remote root however 1.53

232
00:18:47,870 --> 00:18:53,230
was not vulnerable to shell shocked
unfortunately so what else can we do

233
00:18:53,230 --> 00:18:57,490
with us so we can turn this particular
issue into a port scanner to scan the

234
00:18:57,490 --> 00:19:00,150
local internet now

235
00:19:00,150 --> 00:19:05,900
intruder has a cluster bomb mode mode
does is in this case we have to

236
00:19:05,900 --> 00:19:09,809
insertion points and we provided two
lists and it permeates through every

237
00:19:09,809 --> 00:19:13,730
combination of these two lists this is
very helpful in performing a brute-force

238
00:19:13,730 --> 00:19:18,210
attack really give a list of usernames
and passwords or in this case a list of

239
00:19:18,210 --> 00:19:24,250
local IP addresses and common parts with
HTTP servers 88 et cetera what did we

240
00:19:24,250 --> 00:19:31,220
find 192 168 8 2012 at 1:18 we found a
Cisco switch with a default username and

241
00:19:31,220 --> 00:19:35,210
password and all too common finding an
internal network assessment or in this

242
00:19:35,210 --> 00:19:38,250
case and external network assessment
that just broke into the internal

243
00:19:38,250 --> 00:19:43,750
network so what else can we do with us
now

244
00:19:43,750 --> 00:19:47,240
legit bank dot com is

245
00:19:47,240 --> 00:19:54,299
engine next load balancer and it is a
gateway for a number of HDB servers that

246
00:19:54,299 --> 00:20:00,500
are hosting www.inc.com now is there a
way to fool the system into accessing

247
00:20:00,500 --> 00:20:06,679
accounting . internal that legit bank
dot com there was in this case we create

248
00:20:06,679 --> 00:20:11,690
an HTTPS connection to legit bank dot
com and we change our host header to

249
00:20:11,690 --> 00:20:15,710
access accounting and internal debt
legit bank dot com now with this

250
00:20:15,710 --> 00:20:23,080
returned with a 401 unauthorized and it
had a trivial username and password now

251
00:20:23,080 --> 00:20:27,270
counting down internet legit pink dot
com allowed us to transfer money

252
00:20:27,270 --> 00:20:34,679
arbitrarily between accounts it has it
was on a protected network on their

253
00:20:34,679 --> 00:20:38,330
internal system was segregated from the
rest of their internal network however

254
00:20:38,330 --> 00:20:42,640
their web server needed to access
accounts because that's how it moved

255
00:20:42,640 --> 00:20:45,250
money around for the users so

256
00:20:45,250 --> 00:20:49,760
it had a triple username and password
because they weren't expecting employees

257
00:20:49,760 --> 00:20:55,630
to access or in this case and external
pen tester to access to a simple it's

258
00:20:55,630 --> 00:21:02,530
free basic auth and were able to log in
and access this RESTful API to load

259
00:21:02,530 --> 00:21:07,780
balancers I mean I highly recommend
looking for this issue I think that this

260
00:21:07,780 --> 00:21:12,860
is something that is much more common
and I recommend that other painters look

261
00:21:12,860 --> 00:21:17,420
for this type of defect so no other
questions to ask yourself in exploiting

262
00:21:17,420 --> 00:21:23,430
asahara can access a protected resource
such as an internal server can I turn

263
00:21:23,430 --> 00:21:28,430
another vulnerabilities such as XXII
into SRF you can using a DTD system to

264
00:21:28,430 --> 00:21:33,970
make HTTP calls now can access internal
IP addresses such as one's enumerated by

265
00:21:33,970 --> 00:21:37,600
separate could access virtual private
cloud instances

266
00:21:37,600 --> 00:21:41,090
ps3 for MongoDB MongoDB by default

267
00:21:41,090 --> 00:21:46,900
doesn't have a username and password and
SRF may expose private collections

268
00:21:46,900 --> 00:21:52,660
doctor who controls such as netcat by
connecting back to my own server

269
00:21:52,660 --> 00:21:57,850
I'm connecting to a HDB client that's
running on the web application now that

270
00:21:57,850 --> 00:22:02,800
client that web application may be
running an older version of the OpenSSL

271
00:22:02,800 --> 00:22:08,580
library and I could exploit heart bleed
on that system even if the web server

272
00:22:08,580 --> 00:22:12,370
itself is patched libraries run by the
application may still be affected by

273
00:22:12,370 --> 00:22:18,110
heart played or download arbitrate
content such as a swift on my target

274
00:22:18,110 --> 00:22:21,510
domain

275
00:22:21,510 --> 00:22:28,520
microphone up the state was made for
tall people so we're gonna switch gears

276
00:22:28,520 --> 00:22:34,300
here and talk about flashlights with
include vulnerabilities there it's / the

277
00:22:34,300 --> 00:22:39,810
way that it works the way you can

278
00:22:39,810 --> 00:22:45,290
so flash works when it loads of Thrones
wes is actually quite different from the

279
00:22:45,290 --> 00:22:48,390
way for example JavaScript works when
you take a third-party JavaScript file

280
00:22:48,390 --> 00:22:52,350
embedded in your page in this lead to
some interesting experts in areas where

281
00:22:52,350 --> 00:22:56,410
actually show you started we want you
guys to actually go out and actually you

282
00:22:56,410 --> 00:23:01,070
know stuff yourself so here's some tools
you can go about doing this with one of

283
00:23:01,070 --> 00:23:07,680
them is a proof of concept to a know
what this is applied to an example host

284
00:23:07,680 --> 00:23:12,980
and it lets you set up requests in Flash
and execute them and see if they are

285
00:23:12,980 --> 00:23:16,920
successful or if they failed for
security reason and then you can you

286
00:23:16,920 --> 00:23:22,340
know debug basically your flow with this
it now after you've successfully

287
00:23:22,340 --> 00:23:27,430
year you can actually use something
called fascist EP requests and this is a

288
00:23:27,430 --> 00:23:32,670
bridge that allows you to perform
requests in flash via javascript so

289
00:23:32,670 --> 00:23:35,510
instead of writing like a lot of action
script which is it a bad time in general

290
00:23:35,510 --> 00:23:43,500
are you can see JavaScript which is less
bad not great so another two of you

291
00:23:43,500 --> 00:23:47,160
actually go out of business with
something called J packs in this is a

292
00:23:47,160 --> 00:23:51,960
tool that might actually recommended to
me I was using some terribly this is a

293
00:23:51,960 --> 00:23:55,260
much better basically what you do is to
decompile get the source file what's

294
00:23:55,260 --> 00:23:56,450
going on

295
00:23:56,450 --> 00:24:00,300
debugging features in addition you can
actually a data source code recompile on

296
00:24:00,300 --> 00:24:04,240
the fly industry some really great deal
with flash of you wanna find swift bones

297
00:24:04,240 --> 00:24:08,140
this is a great tool to be using so
after you you know after you've got your

298
00:24:08,140 --> 00:24:15,700
working Piercy who is using this tool
called search diggity this is a tool

299
00:24:15,700 --> 00:24:19,800
developed by one of the founders of fox
and it's it's great so you can actually

300
00:24:19,800 --> 00:24:23,360
take utilize I think that Google search
engines to go out and find who has a

301
00:24:23,360 --> 00:24:29,780
larger tax service search engine hacking
is alive and well in 2015 research

302
00:24:29,780 --> 00:24:36,100
diggity I highly recommend checking it
out that's awesome tool

303
00:24:36,100 --> 00:24:39,809
right so I talked earlier kinda
comparing flash to JavaScript to give

304
00:24:39,809 --> 00:24:43,350
you an idea of why flashes in the way
that you embed into your page and

305
00:24:43,350 --> 00:24:44,250
operates

306
00:24:44,250 --> 00:24:52,220
compared to JavaScript examples from
both show you in contrast so we gotta

307
00:24:52,220 --> 00:24:54,640
stop for a second here we got to talk
about something called the same origin

308
00:24:54,640 --> 00:24:57,610
policy how do you have you guys are
familiar with the same origin policy or

309
00:24:57,610 --> 00:25:00,620
heard of it also records here

310
00:25:00,620 --> 00:25:05,000
great so what the same origin policy
does is it's kind of a fundamental

311
00:25:05,000 --> 00:25:08,970
pillar of web security and the idea is
you had for example your Gmail opened

312
00:25:08,970 --> 00:25:13,820
right and then you get to my blog should
my blog be able to read your email

313
00:25:13,820 --> 00:25:17,150
the answer is of course now and what
does it do that and the reason for that

314
00:25:17,150 --> 00:25:22,909
is each site has its origin origin is
simply that the protocol the host name

315
00:25:22,909 --> 00:25:27,370
in the ports like a certain website so
for example in the case I just talked

316
00:25:27,370 --> 00:25:34,640
about you have issues you have a GPS the
hacker blog.com and FG motocross kind of

317
00:25:34,640 --> 00:25:37,760
my side of ice per se it wouldn't work
because those portions are not the same

318
00:25:37,760 --> 00:25:42,780
violation of this policy so this is what
sandboxes all these different websites

319
00:25:42,780 --> 00:25:50,350
from accessing each other's data so what
is the difference between the way when

320
00:25:50,350 --> 00:25:54,679
you do flat remote includes with
Javascript and Flash so in JavaScript we

321
00:25:54,679 --> 00:25:57,850
do for example script tag and you
specify that they're pretty resources in

322
00:25:57,850 --> 00:26:01,740
a completely separate domain when that
script actually execute execute in the

323
00:26:01,740 --> 00:26:05,850
context of the page that did the
including so this is actually completely

324
00:26:05,850 --> 00:26:11,059
opposite from a flash works so we do
flash you include the sweat in your own

325
00:26:11,059 --> 00:26:14,760
page that's with actually execute in the
context of whatever is hosting thats

326
00:26:14,760 --> 00:26:19,530
West contrite and the testing this with
you including your page it's in the

327
00:26:19,530 --> 00:26:23,190
context of third-party dot com that's
kind of the that's that's the difference

328
00:26:23,190 --> 00:26:28,900
between the two when she got some
examples to come home so what does it

329
00:26:28,900 --> 00:26:32,700
look like he promised in this if you
view this web page before you do you

330
00:26:32,700 --> 00:26:38,340
have a script Src and you have a
third-party dot com dot com so basically

331
00:26:38,340 --> 00:26:41,659
when your browser process the page it
grabs this remote chance profile polls

332
00:26:41,659 --> 00:26:43,430
in execute it on

333
00:26:43,430 --> 00:26:48,970
threatens JavaScript file is just a
simple script that basically Prince the

334
00:26:48,970 --> 00:26:53,020
executing origins you can see what is
the script after script executing us

335
00:26:53,020 --> 00:26:58,090
first we gotta run this because of a job
search works for you including your

336
00:26:58,090 --> 00:27:02,040
paychecks executed in the context of the
page that did the including it doesn't

337
00:27:02,040 --> 00:27:07,330
execute their party and execute in the
context of legit bank as important

338
00:27:07,330 --> 00:27:11,930
because as we see with flash we do
something we do object a great have a

339
00:27:11,930 --> 00:27:17,020
third party with onto our own page now
which we are flashes when you actually

340
00:27:17,020 --> 00:27:21,910
execute in the context of the say that
hosting this with not you know

341
00:27:21,910 --> 00:27:28,080
dot com which is actually has a nice
page so to show you guys example this to

342
00:27:28,080 --> 00:27:33,010
kind of prove that this works we have
secret a text file on the dot com show

343
00:27:33,010 --> 00:27:37,000
this fall actually happening with a
short video here this is that cross the

344
00:27:37,000 --> 00:27:40,470
main doctor told I talked about earlier

345
00:27:40,470 --> 00:27:45,160
set up a very basic requests were gonna
say you know let's get a request to that

346
00:27:45,160 --> 00:27:48,610
third party dot com secret a tax holiday
mentioned earlier and we'll see if it

347
00:27:48,610 --> 00:27:52,960
works right we've got to do it does work
in this this makes sense because this

348
00:27:52,960 --> 00:27:58,840
with other side not the context of the
Peters running on which is the bank and

349
00:27:58,840 --> 00:28:03,580
we turn around we try to do a little
bank dot com it doesn't work

350
00:28:03,580 --> 00:28:09,030
reason being is this within the context
of a third party bank so that's that's

351
00:28:09,030 --> 00:28:15,290
the difference so you know there are
some scenarios where you'd want to open

352
00:28:15,290 --> 00:28:20,280
up other sites to access your site may
be having a third party which profile

353
00:28:20,280 --> 00:28:24,070
information to display something to the
user of the service service you can show

354
00:28:24,070 --> 00:28:26,970
that up in the way that you do that is
generally

355
00:28:26,970 --> 00:28:30,830
you use across them in XML file and
usually this is like a small document

356
00:28:30,830 --> 00:28:35,560
placed in your web root and it basically
list off allow access from and it says

357
00:28:35,560 --> 00:28:39,770
you know what that means I trust so I
can say like a surprise outcomes cool

358
00:28:39,770 --> 00:28:44,990
you know if they can pull the data and
they can pursue that went with it this

359
00:28:44,990 --> 00:28:48,340
is a large level of trust right you
trusting these demands to handle all of

360
00:28:48,340 --> 00:28:52,020
your users sensitive data to make sure
that this is that these

361
00:28:52,020 --> 00:28:58,300
tax services here but that's never the
case actually with my files whatever

362
00:28:58,300 --> 00:29:01,490
reason while Curtis is just a lot and
it's incredibly common place that's not

363
00:29:01,490 --> 00:29:08,770
just like a meetup statistic so we elect
a top ten thousand

364
00:29:08,770 --> 00:29:14,550
so we have two entries here right

365
00:29:14,550 --> 00:29:18,810
seems a pretty small ok well two entries
that a lot but actually with these wild

366
00:29:18,810 --> 00:29:23,910
cards that means any subdomain legit
bank or 38 third-party dot com can grab

367
00:29:23,910 --> 00:29:28,060
all these information from the dot-com
while these are like 10 is actually a

368
00:29:28,060 --> 00:29:31,330
very large attack surface and he said to
me anywhere they could be any third

369
00:29:31,330 --> 00:29:36,340
party service on this is this is
potentially thousands of points that

370
00:29:36,340 --> 00:29:41,890
attacker could get us with on for
example right so I can talk about

371
00:29:41,890 --> 00:29:46,160
anything we can just pull this out of
our you know where we actually pulled

372
00:29:46,160 --> 00:29:54,670
the top ten thousand those the head it
and it's actually like 75% of all sites

373
00:29:54,670 --> 00:29:59,800
employed the start time domain like they
did all all subdomains right and this is

374
00:29:59,800 --> 00:30:02,600
incredibly dangerous Rights Watch cites
walking around trusting all the

375
00:30:02,600 --> 00:30:07,120
subdomain stuff like i mean demand
attention 2010 points

376
00:30:07,120 --> 00:30:10,190
compromise the security of their main
website and this is the pretenders

377
00:30:10,190 --> 00:30:20,850
problematic behavior so your attacker
your view on the cross that you want to

378
00:30:20,850 --> 00:30:24,520
compromise the security what's the first
thing you do I noticed that not a whole

379
00:30:24,520 --> 00:30:29,970
lot of a subject that's so sad to be at
or you can just plug this domain that

380
00:30:29,970 --> 00:30:34,600
she wants to increase in here we had
their party the jetpack plugin to

381
00:30:34,600 --> 00:30:38,390
separate into print out all the
subdomains of these host right he can go

382
00:30:38,390 --> 00:30:42,100
independent each subdomain see if you
get a sweat on there in some way and

383
00:30:42,100 --> 00:30:47,010
then if you get any sound like print out
to you like you can compromise the

384
00:30:47,010 --> 00:30:52,000
security of Japan back on

385
00:30:52,000 --> 00:30:57,910
so I talked about flash you know include
security what does that mean what they

386
00:30:57,910 --> 00:31:02,760
look like an example here which is an
application called flowplayer so what is

387
00:31:02,760 --> 00:31:10,730
pho player like flash video player also
players it's a special occasion a place

388
00:31:10,730 --> 00:31:13,840
videos for you but it gives you extra
functionality where you can kinda

389
00:31:13,840 --> 00:31:17,960
customize the look of the player you can
you make it different colors

390
00:31:17,960 --> 00:31:23,380
functionality by just making art race
with plugins alone player unfortunately

391
00:31:23,380 --> 00:31:30,960
with foreplay ever since below 32 . 16
and that version you can actually load

392
00:31:30,960 --> 00:31:34,370
plugins from arbitrate domains which is
actually incredibly dangerous behavior

393
00:31:34,370 --> 00:31:38,900
so what this means is if you have the
full Pierce within your web site any

394
00:31:38,900 --> 00:31:43,000
third party can include that in their
own page they can load a plugin to

395
00:31:43,000 --> 00:31:46,720
hijack thats with and they can operate
as if they were coming from your origin

396
00:31:46,720 --> 00:31:52,760
right so we'll see how this comes back
to bite us in a full set this up

397
00:31:52,760 --> 00:31:58,720
basically so we have any but it's worth
of the other player on the GenBank dot

398
00:31:58,720 --> 00:32:02,290
com you know you want to include a
third-party plug-in here to set up in

399
00:32:02,290 --> 00:32:08,630
javascript and then it switches the
player so this is obviously incredibly

400
00:32:08,630 --> 00:32:14,100
dangerous behavior eventually thought I
was like alright this is a bad deal we

401
00:32:14,100 --> 00:32:19,500
can do this we don't want our users to
be like walking a sappy bypasses so what

402
00:32:19,500 --> 00:32:23,510
turned out to be as they and three-point
shootout 18 they actually do some code

403
00:32:23,510 --> 00:32:26,720
that says alright well it has to be on
the same manner has be trusted in some

404
00:32:26,720 --> 00:32:29,910
way they had a lot of Education Code to
basically prevent arbitrate plug-ins

405
00:32:29,910 --> 00:32:34,980
from hijacking this player so they had a
bunch of code that that parses the

406
00:32:34,980 --> 00:32:36,830
plugins URL to check if it's true

407
00:32:36,830 --> 00:32:45,510
trusted local however this is actually
pretty interesting story so one of the

408
00:32:45,510 --> 00:32:49,260
problems as they wrote their own URL
parser and it's a common problem for

409
00:32:49,260 --> 00:32:52,410
developers to think that person you're
also very simple but there's a whole

410
00:32:52,410 --> 00:32:57,060
chapter devoted in the tangled web to
just problems with parsing your else

411
00:32:57,060 --> 00:33:01,500
this is an amazing book I love this book
this is the Holy Bible

412
00:33:01,500 --> 00:33:09,420
for packing and after reading this book
I was like yeah I am totally prepared

413
00:33:09,420 --> 00:33:14,230
for bypassing some or all parsing

414
00:33:14,230 --> 00:33:24,720
so I just started at the very top of the
players and I found a sop bypass or find

415
00:33:24,720 --> 00:33:30,060
a way to include arbitrate slips and and
then I sent the link to the code of my

416
00:33:30,060 --> 00:33:41,920
friend Matt here and dedication you find
my bypass but his the bypass he found

417
00:33:41,920 --> 00:33:46,310
specifically is on this line here now
you may think that there may be some

418
00:33:46,310 --> 00:33:49,920
other problems here obviously but this
one is interesting so in this case

419
00:33:49,920 --> 00:33:54,430
they're looking for a string that starts
with forward slash and saying okay well

420
00:33:54,430 --> 00:33:58,740
that's probably a local spot on the
local demand that should be fine right

421
00:33:58,740 --> 00:34:04,760
well know you can if you start with two
forward slashes it inherits the protocol

422
00:34:04,760 --> 00:34:11,649
of the demand that's loading in this
case the protocols HTTP HTTP annexation

423
00:34:11,649 --> 00:34:17,850
request attacker dot com and lose the
swift just fine so the one I found is

424
00:34:17,850 --> 00:34:23,230
here this is some interesting kind of
complex code and what its doing it a try

425
00:34:23,230 --> 00:34:28,490
to separate the beginning of the scheme
the protocol scheme with the demand and

426
00:34:28,490 --> 00:34:33,700
the problem is here looking for 34 it
slashes as the beginning of the scheme

427
00:34:33,700 --> 00:34:39,129
and we can bypass that by saying
attacker dot com 34 and slashes which

428
00:34:39,129 --> 00:34:42,070
tracks the URL parser to think that a
court outcome is part of the protocol

429
00:34:42,070 --> 00:34:49,800
and then we use a dot / remove legit
banks are calm and then just letters

430
00:34:49,800 --> 00:34:54,130
the third one is more general in this
case we're turning and open redirect

431
00:34:54,130 --> 00:35:00,400
vulnerability to trick the euro parts
into loading are swept remotely now this

432
00:35:00,400 --> 00:35:05,230
is a more general bypass for swift
include vulnerabilities and that's why I

433
00:35:05,230 --> 00:35:10,540
included this can take a remote open
redirect vulnerability which is

434
00:35:10,540 --> 00:35:14,840
typically lower medium risk finding into
a high-risk same origin policy bypass

435
00:35:14,840 --> 00:35:19,830
and so this is a more general issue
there may be more bypasses but there is

436
00:35:19,830 --> 00:35:27,430
a good number is a good number so what
does this mean crisis attackers right

437
00:35:27,430 --> 00:35:33,220
what this means is if any domain has the
four players like anywhere on their

438
00:35:33,220 --> 00:35:37,320
website you can basically XQ flashes if
you're coming from that website had an

439
00:35:37,320 --> 00:35:40,710
interesting side note here is we
actually reached out to the guys like

440
00:35:40,710 --> 00:35:46,380
hey you got mad wants you to fix this
this is dangerous and that she responded

441
00:35:46,380 --> 00:35:52,070
with you know flashed kind of dad like a
small 505 player want to go off and use

442
00:35:52,070 --> 00:35:57,210
that so it's not exactly a great
response actually they're not going to

443
00:35:57,210 --> 00:36:07,680
pass this so any site that has till you
can just take care of a complex flow

444
00:36:07,680 --> 00:36:13,240
when I walk you through it so here's an
example or a heavy user into the dot-com

445
00:36:13,240 --> 00:36:16,950
managing their financials you know their
credit card statements whatever they may

446
00:36:16,950 --> 00:36:20,400
be after the authenticate they somehow
navigate across the web and they

447
00:36:20,400 --> 00:36:24,190
attacked her page and what their
attacker page goes off and does it

448
00:36:24,190 --> 00:36:29,720
includes a swift from the Japan TACOM
with the slow player and an object tag

449
00:36:29,720 --> 00:36:34,310
we loaded onto our own page once we've
done that we actually set up with

450
00:36:34,310 --> 00:36:42,580
javascript and we include are you know
plugin to hijack this and we can hijack

451
00:36:42,580 --> 00:36:49,420
the context remember of the Japan dot
com so what does this mean so now have

452
00:36:49,420 --> 00:36:53,290
hijacked the swift we can actually go
right back to legit Bangkok ahmoudi just

453
00:36:53,290 --> 00:36:56,240
our polling data why does this work
because this will actually already

454
00:36:56,240 --> 00:36:58,420
getting in the context of the Japan

455
00:36:58,420 --> 00:37:03,369
same origin policy violation we're doing
that same origin so it's completely fine

456
00:37:03,369 --> 00:37:10,220
so now we're gonna kinda tired all
together here comes together and how we

457
00:37:10,220 --> 00:37:18,000
were able to large sites so this is
about Akamai's edge we like what is

458
00:37:18,000 --> 00:37:23,540
actually edged with an ad is actually
domain that's used in Akamai's content

459
00:37:23,540 --> 00:37:27,140
delivery network more specifically it
actually a product of their free for us

460
00:37:27,140 --> 00:37:30,859
areas which is a super deprecated when
they were young CNN back in the nineties

461
00:37:30,859 --> 00:37:36,069
the free flow used to be how this all
worked on for sure they do do you know

462
00:37:36,069 --> 00:37:38,260
it's not just moving forward

463
00:37:38,260 --> 00:37:45,880
lot of like working men en pointe still
have enabled and some people I can't

464
00:37:45,880 --> 00:37:50,809
patch their dependence structure so the
way this works is you actually take your

465
00:37:50,809 --> 00:37:54,530
own subdomain in your map into Akamai's
network so when they hit the subdomain

466
00:37:54,530 --> 00:38:02,369
that she had no idea it just looks like
they're so remember earlier my talked

467
00:38:02,369 --> 00:38:05,890
about like the Facebook site operates
you have this interesting like DNS

468
00:38:05,890 --> 00:38:10,040
configurations you have like a command
example.com which is a CNAME towards

469
00:38:10,040 --> 00:38:16,599
example.com net yet another see name
into this net a record that actually

470
00:38:16,599 --> 00:38:23,089
hits and a common point right this is
the kind of stuff that we saw before so

471
00:38:23,089 --> 00:38:27,619
I cry why do people do this why it why
use Akamai recent news because of this

472
00:38:27,619 --> 00:38:31,920
so when you have a user who wants for
example Asia image of a cat just kind of

473
00:38:31,920 --> 00:38:36,980
my view of the Internet traffic at large

474
00:38:36,980 --> 00:38:46,160
true actually but that they're heading
Akamai Akamai does at example.com they

475
00:38:46,160 --> 00:38:50,400
grabbed an image stored locally to
distribute it and then return it back to

476
00:38:50,400 --> 00:38:57,700
the user and so why do this right it's
like an extra hops this and the reason

477
00:38:57,700 --> 00:39:02,260
why they do this is the next time
something comes along with lines they

478
00:39:02,260 --> 00:39:08,420
actually just skip the whole steps to
surgery right away you know they can be

479
00:39:08,420 --> 00:39:11,530
geographically close speed that up thats
Eng

480
00:39:11,530 --> 00:39:18,260
so another piece of functionality
established in the nineties is something

481
00:39:18,260 --> 00:39:23,320
called a narrow and errol stands for
Akamai Resource Locator actually special

482
00:39:23,320 --> 00:39:29,070
you're used to construct work again

483
00:39:29,070 --> 00:39:41,660
deprecated style points for example you
have this swath and you want to take

484
00:39:41,660 --> 00:39:45,770
advantage of this service how do you do
it you take my own point we actually

485
00:39:45,770 --> 00:39:49,900
have a combined example.com you pass a
few parameters things like how long she

486
00:39:49,900 --> 00:39:53,940
catches for what my client I D for
billing and the like that and any supply

487
00:39:53,940 --> 00:39:56,810
this arbitrary you're all here where
this file is located

488
00:39:56,810 --> 00:40:01,560
go off and grab it bring it back and
serve it on your own page right so this

489
00:40:01,560 --> 00:40:06,150
example looks a bit familiar doesn't it
so when Mike talked about this section

490
00:40:06,150 --> 00:40:10,130
exactly the same flow right you have an
arbitrator I'll be specified you have a

491
00:40:10,130 --> 00:40:14,290
serving of Engraving and returning it
right on the page and so perhaps there's

492
00:40:14,290 --> 00:40:19,530
an issue with a sort of functionality
and I was so again this is called

493
00:40:19,530 --> 00:40:22,130
accusation of your eye out kid you not

494
00:40:22,130 --> 00:40:31,000
and maximize big network component file
and returning on that page so the

495
00:40:31,000 --> 00:40:36,430
vulnerability that we had was if you
point a combined example.com to Akamai's

496
00:40:36,430 --> 00:40:40,290
edge we can free full service we can
actually host arbitrate files on that

497
00:40:40,290 --> 00:40:45,440
subdomain so I'm not quite sure some
issues we're trying to actually

498
00:40:45,440 --> 00:40:50,220
practically exploit this we saw this
happening it depends on configuration

499
00:40:50,220 --> 00:40:56,650
like some allowed us to load any files
but there was a much more variety of

500
00:40:56,650 --> 00:41:02,650
websites that allow us to just load
specific waitlisted demands right seven

501
00:41:02,650 --> 00:41:06,290
hours ago at last was like alright well
what's in the way let's have a new

502
00:41:06,290 --> 00:41:10,460
meaning it any guesses what we may use

503
00:41:10,460 --> 00:41:21,070
ok so you know we're testing this out we
like all right let's try to load Google

504
00:41:21,070 --> 00:41:24,570
Product X files and we try to do that we
can access denied error which was like

505
00:41:24,570 --> 00:41:29,300
why we can access denied this arbitrary
files other one and we kind of take it

506
00:41:29,300 --> 00:41:34,630
out there must be some internal like a
wait list of demands to do this right so

507
00:41:34,630 --> 00:41:39,740
we set up we used Subaru and we try to
find zedge we don't have this is like

508
00:41:39,740 --> 00:41:41,150
Akamai's

509
00:41:41,150 --> 00:41:46,560
try to find some kind of figured that
maybe one of those who use it to contact

510
00:41:46,560 --> 00:41:50,810
their site right so after some searching
with subgroups Googler can we thought it

511
00:41:50,810 --> 00:41:59,160
actually worked and this is whom I
thought it might be problematic yeah I

512
00:41:59,160 --> 00:42:07,369
know the simplest arbitrary so this is
actual server that hosts not only the

513
00:42:07,369 --> 00:42:11,550
member the 3.2 I wanted to implement a
couple of like verification things that

514
00:42:11,550 --> 00:42:15,320
we were able to bypass that even within
required because they hosted on the old

515
00:42:15,320 --> 00:42:21,320
versions to just pull 3.net 16 version
in just a matter anyways so what this

516
00:42:21,320 --> 00:42:28,240
means is right we putting all this
together we can actually put this with

517
00:42:28,240 --> 00:42:32,330
my own point and then immediately
hijacking with the vulnerable as we

518
00:42:32,330 --> 00:42:37,540
talked about before so here's an example
of that happening right we have I dot

519
00:42:37,540 --> 00:42:42,290
dot com which is mapped Akamai's like
service and then we specify this weird

520
00:42:42,290 --> 00:42:47,420
errol style syntax and we gets we
justify this 32216 portable version of

521
00:42:47,420 --> 00:42:51,290
where and when we do this actually
appears like this site is hosting the

522
00:42:51,290 --> 00:42:56,500
file itself which is great for us
because we can hi jacket so what's this

523
00:42:56,500 --> 00:43:00,830
mean on a grander scale so this means
that any points that are mapped to

524
00:43:00,830 --> 00:43:12,760
Akamai's services free flow has been
right there are so complex

525
00:43:12,760 --> 00:43:19,630
time we have the usual I can't alleged
bank after lying on the ground and they

526
00:43:19,630 --> 00:43:23,090
eventually hit our attacker payload
right the attacker paler goes off using

527
00:43:23,090 --> 00:43:29,590
the arrow and we love this website I
want this file Akamai goes off to this

528
00:43:29,590 --> 00:43:31,460
media P&S sweet server

529
00:43:31,460 --> 00:43:35,520
the swift returns it as if it was hosted
on a common knowledge of Bank dot com

530
00:43:35,520 --> 00:43:39,840
and other questions including attacker
dot com that webpage right so it's also

531
00:43:39,840 --> 00:43:50,070
hosts the following cell's ability to
then of course after that right so

532
00:43:50,070 --> 00:43:53,360
that's just didn't have to be there had
to have legit bank open up on the web

533
00:43:53,360 --> 00:43:56,310
browser at all actually just actually
just proud of our attack reciting his

534
00:43:56,310 --> 00:44:04,340
habits in the background to be logged in
but they don't have to have both offers

535
00:44:04,340 --> 00:44:11,270
so as we saw before we HijackThis an
hour executing in the context of a

536
00:44:11,270 --> 00:44:15,160
criminologist bank dot com and member I
talked about earlier

537
00:44:15,160 --> 00:44:18,740
across the main files doing this
wildcard subdomain thing well guess what

538
00:44:18,740 --> 00:44:22,050
this is this is a subdomain of the Japan
dot com which of course is trusted by

539
00:44:22,050 --> 00:44:28,930
75% of whatever and then we can go right
back and we can grab all the kind of the

540
00:44:28,930 --> 00:44:40,120
dot-com so we can go off we can send my
manager and friend weekend yet so let's

541
00:44:40,120 --> 00:44:44,370
go back out across the main parties
running back to him

542
00:44:44,370 --> 00:44:50,810
policy earlier like now so we're
actually pretty bad off right so if

543
00:44:50,810 --> 00:44:57,480
anyone of these sub demands japan girl
3.com two end points we can hire

544
00:44:57,480 --> 00:45:02,840
security of legit Bangkok on that's a
bad deal because Akamai is like a very

545
00:45:02,840 --> 00:45:09,700
presence this opens up some even know
radar applications where you may you may

546
00:45:09,700 --> 00:45:13,500
have never even heard of Akamai right
but you trust them to your costs and

547
00:45:13,500 --> 00:45:14,600
policy here

548
00:45:14,600 --> 00:45:18,920
security is compromised anyways right
they can still perform this exploit and

549
00:45:18,920 --> 00:45:22,160
so do to this convention that's used in
cross

550
00:45:22,160 --> 00:45:43,900
impact so what's the fallout like reuses
CNN's Candy view Verizon Wireless you

551
00:45:43,900 --> 00:45:47,830
know it's they did reach out to us more
like this and that we had a passion for

552
00:45:47,830 --> 00:45:48,900
the doxa

553
00:45:48,900 --> 00:46:00,010
they're awesome so here's an example
going about their daily business like if

554
00:46:00,010 --> 00:46:05,290
you have a company phone numbers of
rising you use as part of the log n

555
00:46:05,290 --> 00:46:13,890
phone numbers so these are signs in just
like they know me well and they come

556
00:46:13,890 --> 00:46:19,290
across this page but then later on as we
saw before then at navigating to a

557
00:46:19,290 --> 00:46:23,550
third-party attacker controlled site
right there to see this example here

558
00:46:23,550 --> 00:46:27,090
where they have authenticated they just
brought that would normally and they

559
00:46:27,090 --> 00:46:31,220
come across this site has a Zacks place
whose example here the navigators

560
00:46:31,220 --> 00:46:37,640
they're pretty website this web site in
bed the swift and high Jackson one of

561
00:46:37,640 --> 00:46:40,960
their something is mapped Akamai and
because of that because I trust all

562
00:46:40,960 --> 00:46:45,000
subdomains you their costs remain we can
hijack thats with got rising grab your

563
00:46:45,000 --> 00:46:49,060
phone number data for all this
information on the data from the account

564
00:46:49,060 --> 00:46:52,990
do anything as you write and this kind
of the widespread impact that we see we

565
00:46:52,990 --> 00:46:58,820
have another example here are there any
US computers here do not raise your

566
00:46:58,820 --> 00:47:02,170
hands you know that can get bypass

567
00:47:02,170 --> 00:47:07,850
so what it further down and write the
script is a sweet add-on for Firefox

568
00:47:07,850 --> 00:47:10,290
that basically prevents

569
00:47:10,290 --> 00:47:15,560
/ whatever can just go ahead and right
away

570
00:47:15,560 --> 00:47:21,020
actually prevents that consent before
because they're often quite dangerous

571
00:47:21,020 --> 00:47:23,400
right time

572
00:47:23,400 --> 00:47:34,740
safely but loaded with a whitelist and
these demands actually like the demands

573
00:47:34,740 --> 00:47:38,440
as well they're all trusted and so of
course where the where the bed like one

574
00:47:38,440 --> 00:47:46,880
of them is mad Akamai the answer is
absolutely just because he's just one of

575
00:47:46,880 --> 00:47:51,530
them had to be mapped out on my pillow
cotton and we have that a man could

576
00:47:51,530 --> 00:47:52,900
completely bypassing

577
00:47:52,900 --> 00:48:04,740
doesn't matter so content security
policy it's kind of a way that it's got

578
00:48:04,740 --> 00:48:12,210
a new way to prevent cross-site
scripting reference transcript tax for

579
00:48:12,210 --> 00:48:14,850
everything it's great for providing
things like cross-site scripting

580
00:48:14,850 --> 00:48:20,330
unfortunately it's absolutely useless
because we don't even like anything in

581
00:48:20,330 --> 00:48:24,180
here page Russia take your sweat into
our home page and then kind of like

582
00:48:24,180 --> 00:48:30,920
hijacking it right to ply here even
going even further with us to define

583
00:48:30,920 --> 00:48:35,360
like a list of trusted demands right so
even even in this scenario

584
00:48:35,360 --> 00:48:49,200
trusted like wide reaching implications
for stuff like I had a question the

585
00:48:49,200 --> 00:48:54,030
answer is No

586
00:48:54,030 --> 00:49:00,490
so remediation effects this right

587
00:49:00,490 --> 00:49:13,370
Akamai has been awesome they were super
nice and they want to work together they

588
00:49:13,370 --> 00:49:18,130
were super helpful but the night before
giving our black had talked we were like

589
00:49:18,130 --> 00:49:21,580
refreshing our client pages and they're
all still affected and something like

590
00:49:21,580 --> 00:49:25,240
eight hours before we went on stage they
started rolling up hatches and like we

591
00:49:25,240 --> 00:49:28,870
couldn't go on stage unless they fixed
and they fixed at like the last possible

592
00:49:28,870 --> 00:49:35,560
minute Thank You Akamai but yeah yeah
they are not saying they don't make us

593
00:49:35,560 --> 00:49:45,050
nervous but they did fix it right so say
mediates first thing you should know is

594
00:49:45,050 --> 00:49:47,870
that you may already have hatched second
I started doing like advanced things

595
00:49:47,870 --> 00:49:52,500
just like trying this era functionality
all foreign still had nothing broken and

596
00:49:52,500 --> 00:49:55,800
fixes fallibility a large portion of
customers that they can do that for

597
00:49:55,800 --> 00:50:00,450
because they use deprecated style they
depend on it right kind of like a slow

598
00:50:00,450 --> 00:50:04,260
burn like this issue is something that's
gonna be around for a while because they

599
00:50:04,260 --> 00:50:08,040
can't fix it across the board there are
going to be a large number of sites that

600
00:50:08,040 --> 00:50:12,670
may be affected for even the next decade
there is no timeframe on when it will be

601
00:50:12,670 --> 00:50:18,430
patched a large number of people are
patched but not everyone but certain to

602
00:50:18,430 --> 00:50:21,000
take an account to your right like if
you're doing a fantastic job you lookin

603
00:50:21,000 --> 00:50:27,480
officer is this we dressing style right
customer you can call them at this

604
00:50:27,480 --> 00:50:32,330
number at this actually have a playbook
that their support agents have that just

605
00:50:32,330 --> 00:50:40,650
bought this phone billy wright also want
to let you guys know that a public

606
00:50:40,650 --> 00:50:49,319
inquiries can be directed to rob Morgan
phone number email address or talk to us

607
00:50:49,319 --> 00:50:54,729
so they also want to let us let us that
they encourage security research on the

608
00:50:54,729 --> 00:50:57,999
Akamai product if you find any
vulnerabilities like hit them up

609
00:50:57,999 --> 00:51:00,420
security at active.com

610
00:51:00,420 --> 00:51:16,619
GPP you know that they're hiring
structured securities then it's so we're

611
00:51:16,619 --> 00:51:20,229
also hiring a bishop Fox were looking
for penetration testers and here's our

612
00:51:20,229 --> 00:51:31,459
contact information and thank you thank
you to recon there's kind of a complex

613
00:51:31,459 --> 00:51:35,430
like exploit chain are there any
questions you guys have about how this

614
00:51:35,430 --> 00:51:45,930
works how you can get a patch

615
00:51:45,930 --> 00:52:06,740
so i think is important to note here is
actually violence the way this works

616
00:52:06,740 --> 00:52:15,369
right doesn't hijack it is actually
executed in the same words right so yeah

617
00:52:15,369 --> 00:52:22,359
yes we fashioned use for the whole
however because of this optimization you

618
00:52:22,359 --> 00:52:26,700
can also learn HTML files and so it is
possible the loan issue arbitrary binary

619
00:52:26,700 --> 00:52:32,589
is through this accusation as a reformer
ability right the reason he's flashes

620
00:52:32,589 --> 00:52:36,589
because actually amplified our attack
right across the main files

621
00:52:36,589 --> 00:52:47,550
service

622
00:52:47,550 --> 00:52:55,390
yeah yeah I've ever made in here that
you can just got to the fact that common

623
00:52:55,390 --> 00:52:56,200
ground these lights as well

