1
00:00:00,000 --> 00:00:22,500
branch and we are here

2
00:00:22,500 --> 00:00:32,250
mobile application engineering some dude
ranch I'm associate security analyst at

3
00:00:32,250 --> 00:00:37,120
independent security evaluators and
what's going on in computer engineering

4
00:00:37,120 --> 00:00:42,579
and I'm currently pursuing my Masters in
cyber security at UMBC and I love to

5
00:00:42,579 --> 00:00:53,079
learn about new tech and also playing
various Force security of elevators bas

6
00:00:53,079 --> 00:01:13,369
aise is the beauty security firm that
specializes in assessments and all of

7
00:01:13,369 --> 00:01:19,400
our clients environment we focus on
applications assessments I guess geared

8
00:01:19,400 --> 00:01:25,630
toward like more so about a white box
perspective we take the approach of like

9
00:01:25,630 --> 00:01:31,409
knowing how I guess the hacker will
think and we also think like hackers to

10
00:01:31,409 --> 00:01:40,100
reform our assessment so I guess get
familiar with our application and also

11
00:01:40,100 --> 00:01:46,950
like attack a vocation as a hacker would
we do a lot of different types of

12
00:01:46,950 --> 00:01:48,610
assessments

13
00:01:48,610 --> 00:01:54,740
clearly we do mobile stuff we do a lot
of web apps native stuff and basically

14
00:01:54,740 --> 00:02:03,050
all over the place it's Christmas or so
the overview of the presentation

15
00:02:03,050 --> 00:02:09,250
we're going to be looking at the common
security mistakes that is usually make

16
00:02:09,250 --> 00:02:14,709
within mobile applications and then we
will describe the problem that we

17
00:02:14,709 --> 00:02:21,170
encounter during the assessment these
problems are will real-world problems

18
00:02:21,170 --> 00:02:26,730
and then we're going to be showing you
guys how to overcome these problems and

19
00:02:26,730 --> 00:02:35,830
then touch home reverse engineering
techniques so the iOS half

20
00:02:35,830 --> 00:02:40,450
handling that his name be using them
home then honorable iOS up the show some

21
00:02:40,450 --> 00:02:46,290
things that have been handling a small
custom application that will be looking

22
00:02:46,290 --> 00:02:55,660
at a little bit about the damnable iOS
application it was developed for 10

23
00:02:55,660 --> 00:03:00,690
testers such as yourself to learn new
skills and also test your up early BC no

24
00:03:00,690 --> 00:03:05,290
knowledge so it's not right into it

25
00:03:05,290 --> 00:03:13,170
developers tend to store sensitive data
on the filesystem example of this my

26
00:03:13,170 --> 00:03:17,690
credit card information username and
passwords and also other personal

27
00:03:17,690 --> 00:03:21,400
information

28
00:03:21,400 --> 00:03:27,970
this type of information should not be
stored in the file system we feel that

29
00:03:27,970 --> 00:03:36,570
other information may be stored but we
don't feel like it's necessary so the

30
00:03:36,570 --> 00:03:41,630
couple problems or a problem everyone
into our checking mobile applications

31
00:03:41,630 --> 00:03:44,030
mobile operating system does not include

32
00:03:44,030 --> 00:03:54,250
whose file browser capabilities built in
so how do we overcome this trial West we

33
00:03:54,250 --> 00:04:01,330
use application called I explore is a
free Windows and Mac OS application just

34
00:04:01,330 --> 00:04:04,900
downloaded he just running on your
computer

35
00:04:04,900 --> 00:04:11,360
many of its features you can run in use
without having to jailbreak your iOS

36
00:04:11,360 --> 00:04:17,320
device so much is extracting files and
also opening various files such as

37
00:04:17,320 --> 00:04:24,190
databases plist files and also just
regular files such as image is also

38
00:04:24,190 --> 00:04:34,150
documents within damnable wireless
application to have a module where you

39
00:04:34,150 --> 00:04:40,630
can store various types of information
in various types so here as you can see

40
00:04:40,630 --> 00:04:48,690
I am storing tests user as the username
and also secret password as the past

41
00:04:48,690 --> 00:04:55,350
work now to your right you see i 40 and
I had the ILS device connected to my

42
00:04:55,350 --> 00:05:02,590
laptop via USB and as you can see here
you see the gamble iOS application

43
00:05:02,590 --> 00:05:08,950
folder and I have the document and user
info that playlist file is that voter

44
00:05:08,950 --> 00:05:17,380
and you can easily just right click and
then open that file and you can see that

45
00:05:17,380 --> 00:05:23,850
a secret passwords stored and test users
also stored now this process usually

46
00:05:23,850 --> 00:05:29,930
takes about I wanna say minutes till
about two minutes could you have to you

47
00:05:29,930 --> 00:05:33,780
know open up various files and see if
the developer actually store sensitive

48
00:05:33,780 --> 00:05:39,129
information and files but this process
is fairly simple is easy

49
00:05:39,129 --> 00:05:49,800
and we actually encounter this life
quite often do on our set another common

50
00:05:49,800 --> 00:05:57,360
security mistake is sending sensitive
data over an unencrypted ac3 HTTPS

51
00:05:57,360 --> 00:06:02,589
connection so she's user credentials
credit card information and also other

52
00:06:02,589 --> 00:06:08,059
sensitive information now it is
inappropriate in this type of data

53
00:06:08,059 --> 00:06:15,449
without any encryption such is using SSL
TLS or just using you know I guess the

54
00:06:15,449 --> 00:06:22,490
commonly use encryption algorithm such
as a yes to your day before sending it

55
00:06:22,490 --> 00:06:30,219
to the server now problem we encounter
while checking this is that we cannot

56
00:06:30,219 --> 00:06:38,579
run a packet sniffer on the actual
mobile device so what can we do we can

57
00:06:38,579 --> 00:06:42,729
run a proxy server or another system
such as a laptop or just a regular

58
00:06:42,729 --> 00:06:52,479
computer system and for complete I tend
to use purposely

59
00:06:52,479 --> 00:07:05,159
very handy tool so for example damn
global iOS application has a model that

60
00:07:05,159 --> 00:07:16,749
you can get credit card information over
HTTP HTTP requests for example I am

61
00:07:16,749 --> 00:07:17,860
sending

62
00:07:17,860 --> 00:07:28,370
139 wife and my credit card information
I know is larger than 16 16 digits but I

63
00:07:28,370 --> 00:07:39,830
am saying 1230 the CVV number and name
as the name so here is the packet that

64
00:07:39,830 --> 00:07:41,330
was captured by

65
00:07:41,330 --> 00:07:46,610
sleep as you can see here you can see
the type of question was which is

66
00:07:46,610 --> 00:07:52,759
opposed also at the bottom you can see
the fake name CVV number and also the

67
00:07:52,759 --> 00:08:06,740
credit card numbers here so another
comment security mistake that developers

68
00:08:06,740 --> 00:08:16,400
make is they don't I guess really test
for security both within the API a

69
00:08:16,400 --> 00:08:20,860
couple of samples are missing
authentication and RESTful API also

70
00:08:20,860 --> 00:08:27,940
broke in authentication checks and I'm
sending sensitive data to the server now

71
00:08:27,940 --> 00:08:32,510
problem that we encounter when we're
testing for this is that if they're

72
00:08:32,510 --> 00:08:38,949
using HTTPS and checking search properly
we cannot perform a man in middle attack

73
00:08:38,949 --> 00:08:48,339
and I guess mobile devices they don't
have built-in developer tools like

74
00:08:48,339 --> 00:08:55,279
browsers do so developers I guess tend
to overlook I guess easy problems that

75
00:08:55,279 --> 00:09:07,050
can easily be fixed they are so I guess
I think that obscurity is I guess a good

76
00:09:07,050 --> 00:09:11,730
I guess method of security to secure
this type of information from a very

77
00:09:11,730 --> 00:09:17,760
scene and also testing in APA

78
00:09:17,760 --> 00:09:23,520
how do we overcome this we will use the
interception software such as virtually

79
00:09:23,520 --> 00:09:33,240
iOS iOS has a list of trusted CA's
within its operating system we can

80
00:09:33,240 --> 00:09:41,150
easily have first week create his own CA
and then go back into a mobile operating

81
00:09:41,150 --> 00:09:48,770
system and have that CA be trusted

82
00:09:48,770 --> 00:09:54,650
sweet if you aren't familiar with it as
a job application that can be expandable

83
00:09:54,650 --> 00:10:03,810
using various plugins has various
features such as the proxy spyware I

84
00:10:03,810 --> 00:10:05,180
guess web a problem

85
00:10:05,180 --> 00:10:10,100
scanner which scans whatever catches for
August commonly known vulnerabilities

86
00:10:10,100 --> 00:10:15,570
and also like a repeater for
manipulation of various requests and you

87
00:10:15,570 --> 00:10:28,700
can also recent request a couple of the
features a check out use pretty handy so

88
00:10:28,700 --> 00:10:35,610
problems while checking I guess you know
is that the application might use his

89
00:10:35,610 --> 00:10:43,580
own CA or have CA built into the
application if the developer area is

90
00:10:43,580 --> 00:10:49,500
acting building ciated application using
a process called which is yes

91
00:10:49,500 --> 00:10:58,470
associating with its expected search or
public key to overcome this there's a

92
00:10:58,470 --> 00:11:05,190
tool you can find out the web call SSL
killswitch attaches to the application

93
00:11:05,190 --> 00:11:06,450
and suppresses

94
00:11:06,450 --> 00:11:14,440
and imitations of certainty and this
application requires home to be four or

95
00:11:14,440 --> 00:11:20,930
iOS device to be jailbroken so I'm gonna
take a quick detour

96
00:11:20,930 --> 00:11:30,970
kinda like this is that these are the
craziest this so jailbreaking what is it

97
00:11:30,970 --> 00:11:37,040
is the exploitation of security by the
operating system this allows the user to

98
00:11:37,040 --> 00:11:44,209
have superuser control over the mobile
applications mobile operating system and

99
00:11:44,209 --> 00:11:50,360
also allows users to install various
applications that are not within the app

100
00:11:50,360 --> 00:12:01,310
store so a couple developer
misunderstandings is that developers

101
00:12:01,310 --> 00:12:09,870
tend to overestimate the difficulty of
jailbreaking device is very simple

102
00:12:09,870 --> 00:12:17,360
their applications out there mixed up
process treat for also they

103
00:12:17,360 --> 00:12:22,070
underestimate the types of attacks that
you can perform without breaking the

104
00:12:22,070 --> 00:12:33,910
device such as opening files and
extracting data that way

105
00:12:33,910 --> 00:12:43,220
conventional laptops already jailbroken
state so I guess when a developer says

106
00:12:43,220 --> 00:12:51,920
that if a user has to jailbreak advised
then the severity of I guess this attack

107
00:12:51,920 --> 00:12:57,890
will be less than what it really is but
Joe bringing the process is so easy that

108
00:12:57,890 --> 00:13:06,420
mostly all users can you know I think
you this process and have user control

109
00:13:06,420 --> 00:13:16,340
over to mobile operating system started
jailbreaking also allows users to remote

110
00:13:16,340 --> 00:13:28,690
into I was devices the OpenSSH have also
been testing tools so like I said before

111
00:13:28,690 --> 00:13:34,450
there one click jailbreak applications
out there right now there are job

112
00:13:34,450 --> 00:13:40,880
applications for mobile devices running
iOS a point for and lower i would tell

113
00:13:40,880 --> 00:13:47,300
you guys to be careful when updating
your iOS device because you might not

114
00:13:47,300 --> 00:13:53,630
have a job application available for one
to two weeks even up to a month after

115
00:13:53,630 --> 00:13:57,000
release

116
00:13:57,000 --> 00:14:03,610
back

117
00:14:03,610 --> 00:14:09,010
storing sensitive information and
developers I guess have this notion that

118
00:14:09,010 --> 00:14:15,120
the keychain is 100% completely secure
and that any information stored in a key

119
00:14:15,120 --> 00:14:21,440
change cannot be access developers
usually store passwords or encryption

120
00:14:21,440 --> 00:14:29,850
decryption keys and also I guess off
tokens in various other sensitive

121
00:14:29,850 --> 00:14:35,870
information to soar so problems while
checking out we can see the keychain

122
00:14:35,870 --> 00:14:42,649
without jailbreaking of ice so to
execute I guess to to access the key

123
00:14:42,649 --> 00:14:48,390
chain will have to jailbreak device and
there is there that we can use to do

124
00:14:48,390 --> 00:14:56,010
which is called keychain number now the
Iowa security model relies on the fact

125
00:14:56,010 --> 00:15:04,100
that a user does not have root access to
so we can upload an application to the

126
00:15:04,100 --> 00:15:10,100
mobile operating system there now we can
actually don't the keychain and I guess

127
00:15:10,100 --> 00:15:12,500
I have always liked being

128
00:15:12,500 --> 00:15:24,660
contingent on users not being able to do
this so store chain for this example

129
00:15:24,660 --> 00:15:30,630
when using the damn Bell wireless
application is a matter with where I

130
00:15:30,630 --> 00:15:37,480
will be touring with Nikki chain so at
their

131
00:15:37,480 --> 00:15:43,040
download and transfer the keychain don't
wear to the library system we've been

132
00:15:43,040 --> 00:15:49,010
you know satisfied his execution right
and then execute the program key chain

133
00:15:49,010 --> 00:15:53,410
thumper dumps all the data that is
stored in the keating such is any

134
00:15:53,410 --> 00:15:59,880
information that app developers not to
actually store chain and also any other

135
00:15:59,880 --> 00:16:02,819
information such as wi-fi passwords

136
00:16:02,819 --> 00:16:11,009
so as you can see here so you're right
we see the damnable iOS application

137
00:16:11,009 --> 00:16:16,600
entry in the keychain and you can see
that this is a secret is clearly

138
00:16:16,600 --> 00:16:30,689
displayed in plain text and now their
security mistake that developers me hard

139
00:16:30,689 --> 00:16:37,129
coating sensitive data in the habitation
winery passwords

140
00:16:37,129 --> 00:16:41,249
chiquis and also like client-side
authentication and session management

141
00:16:41,249 --> 00:16:52,350
developers think that mobile
applications are harder as a couple we

142
00:16:52,350 --> 00:16:57,329
run into we're trying to analyze the
application binary is that applications

143
00:16:57,329 --> 00:17:06,130
from the App Store are in fact encrypted

144
00:17:06,130 --> 00:17:13,520
option is encrypted we cannot load
application binary within a pro was just

145
00:17:13,520 --> 00:17:23,730
the simpler and you actually simply code
that makes up so we have to do we have

146
00:17:23,730 --> 00:17:25,140
to jailbreak

147
00:17:25,140 --> 00:17:32,150
device and then run application call
clutch clutch is application that the

148
00:17:32,150 --> 00:17:38,650
crips applications binary which allows
us to extract the binary and download

149
00:17:38,650 --> 00:17:53,340
the binary within ida to analyze it was
another detour so

150
00:17:53,340 --> 00:18:00,020
binaries from App Store are encrypted
they do not contain any debugging info

151
00:18:00,020 --> 00:18:07,590
which is helpful for engineers binary
from the developer they are encrypted

152
00:18:07,590 --> 00:18:13,240
they contain debugging info and is a
preferred method when cleaning

153
00:18:13,240 --> 00:18:19,410
assessment on a mobile application is
kind of like I guess white box vs black

154
00:18:19,410 --> 00:18:41,120
box you wanna think of it that way I use

155
00:18:41,120 --> 00:18:45,620
dynamic analysis tool called snap it
very useful tool

156
00:18:45,620 --> 00:18:52,220
this is the easy way to perform dynamic
analysis would have to jailbreak the

157
00:18:52,220 --> 00:18:58,690
application and then adds new pit city
is source list

158
00:18:58,690 --> 00:19:04,850
city is automatically installed when you
jailbreak iOS device so you don't have

159
00:19:04,850 --> 00:19:16,000
to worry about so what does it actually
watches out for calm in the event that

160
00:19:16,000 --> 00:19:21,929
are important to recent years such is
key chain access system access as well

161
00:19:21,929 --> 00:19:27,970
as network activity and also
cryptography activity has various other

162
00:19:27,970 --> 00:19:35,429
features but I seem to use it just for
for these four or item

163
00:19:35,429 --> 00:19:46,270
have a screenshot is actually analyze
program here and as you can see that I

164
00:19:46,270 --> 00:19:56,100
have the key chains have open and you
can see when the keychain was read when

165
00:19:56,100 --> 00:20:06,520
teaching was rain too and also when the
entry was deleted or updated web

166
00:20:06,520 --> 00:20:15,150
interface so you would need a laptop or
computer to access it is like a easy

167
00:20:15,150 --> 00:20:25,300
user-friendly application that makes a
dynamic analysis so much easier so I'm

168
00:20:25,300 --> 00:20:27,760
extracting implementation details

169
00:20:27,760 --> 00:20:37,370
iOS applications are coated in object of
C compiler different SEC C C++ compilers

170
00:20:37,370 --> 00:20:43,220
Objective C uses message passing in late
binding which leads to the inclusion of

171
00:20:43,220 --> 00:20:57,550
a better streams class information and
also when objects are standing each

172
00:20:57,550 --> 00:21:04,800
other messages late binding allows
classes to handle the same messages like

173
00:21:04,800 --> 00:21:14,950
in a different manner than other classes
so how do you extracted patient details

174
00:21:14,950 --> 00:21:20,630
on this application called class don't
you have to download this application

175
00:21:20,630 --> 00:21:28,800
and then uploaded the binary and have it
on your computer system and I guess view

176
00:21:28,800 --> 00:21:35,530
the details that way or you can actually
put class Tom a brain system and I'll

177
00:21:35,530 --> 00:21:43,150
run the last open a binary like that
displays all the classes the message

178
00:21:43,150 --> 00:21:47,309
variables and also properties associated
with those classes and the user friendly

179
00:21:47,309 --> 00:21:49,410
easy to read

180
00:21:49,410 --> 00:22:02,059
layout

181
00:22:02,059 --> 00:22:12,860
require LDB as the debugger instead of
GV LTV is or was created by Apple and it

182
00:22:12,860 --> 00:22:14,950
is a remote debugger

183
00:22:14,950 --> 00:22:18,340
the debugger configuration sorry

184
00:22:18,340 --> 00:22:27,620
requires a Mac and Xcode so to you
though the bee contestants must extract

185
00:22:27,620 --> 00:22:37,580
iOS developer image the boxer am sorry
from the developer image had their

186
00:22:37,580 --> 00:22:42,480
correct entitlements to allow the
program to debug other applications and

187
00:22:42,480 --> 00:22:52,130
also loaded onto the iOS operating
system so usage you have a chance to the

188
00:22:52,130 --> 00:22:53,550
mobile device

189
00:22:53,550 --> 00:22:59,090
the open SSH so you will have
application running you would need

190
00:22:59,090 --> 00:23:08,390
process I D so here I am searching for
then i less application I see that

191
00:23:08,390 --> 00:23:16,530
process idea is 3680 then run debug
server to accept communications

192
00:23:16,530 --> 00:23:24,220
connections and port 1234 and I am
attaching to the process

193
00:23:24,220 --> 00:23:41,860
368 so after that process is attached to
you and start than you would if you do

194
00:23:41,860 --> 00:23:47,100
not have Xcode command line tools a
prompt will prompt you and actually want

195
00:23:47,100 --> 00:23:54,060
you download install them look like okay
then after that you type in select from

196
00:23:54,060 --> 00:24:00,570
Ohio West willow various library that
require and then you type in prosperous

197
00:24:00,570 --> 00:24:12,370
connect connected IP address of the
mobile device and also the corner

198
00:24:12,370 --> 00:25:03,570
so it is already available in the
various documentation applications again

199
00:25:03,570 --> 00:25:29,350
and we talked about the anger inside of
a dog

200
00:25:29,350 --> 00:25:38,770
asians specifically never traffic
encryption key compilation the source

201
00:25:38,770 --> 00:25:50,310
code analysis and so I want to talk
about a couple times that you may not be

202
00:25:50,310 --> 00:25:55,730
familiar with that are required to this
apk is an Android package file space

203
00:25:55,730 --> 00:26:02,290
city equivalent of a Windows MSI or a
Debian deb file just installed and

204
00:26:02,290 --> 00:26:08,820
everything is required for the
application to run next insert italic

205
00:26:08,820 --> 00:26:16,830
executable the Android equivalent of a
Java class file basically the DDM is the

206
00:26:16,830 --> 00:26:21,120
Delphic virtual machine again has the
Android equivalent of the Java Virtual

207
00:26:21,120 --> 00:26:25,970
Machine and I T not really going to be
talking about much but in recent

208
00:26:25,970 --> 00:26:34,430
versions of Android it has begun to
begin to replace the dog Chien so what

209
00:26:34,430 --> 00:26:41,450
does this look at the simple online
stores application to stalk missile the

210
00:26:41,450 --> 00:26:48,970
login screen looks like very simple what
can it do alright so our goal for this

211
00:26:48,970 --> 00:26:54,950
section is to enumerate functionality of
this application do that around on the

212
00:26:54,950 --> 00:27:05,910
application software required just need
the app itself harder fingers so

213
00:27:05,910 --> 00:27:11,300
not be used to download files you can
store files locally as you can see from

214
00:27:11,300 --> 00:27:20,100
this house on the edge of the ice and
finally it can decrypt files and they

215
00:27:20,100 --> 00:27:29,610
said that is download the files they can
be viewed in the basement so now it's up

216
00:27:29,610 --> 00:27:36,580
to formulate a plan to have some targets
you want to look at stories that's when

217
00:27:36,580 --> 00:27:43,930
I look at how it's downloading things we
want to look at the encryption so the

218
00:27:43,930 --> 00:27:48,760
first big question is is the story
secure our goal here to investigate the

219
00:27:48,760 --> 00:27:55,950
files are stored on the sdcard to do
this we're gonna pull the files off the

220
00:27:55,950 --> 00:28:02,760
engine device so check them out in a
friendly environment software will be

221
00:28:02,760 --> 00:28:07,410
talking about is going to be a tebe
because the Android Evo bridge its

222
00:28:07,410 --> 00:28:13,300
command line utility that can be used to
interact with an Android emulator or a

223
00:28:13,300 --> 00:28:17,570
physical device running Android she
thanked him and you can push pull files

224
00:28:17,570 --> 00:28:27,820
indexed he commands on it and then using
a couple links utilities 30 attacks on a

225
00:28:27,820 --> 00:28:35,620
file strings and less talk about that
when I get there so first we want to see

226
00:28:35,620 --> 00:28:40,730
what is being stored by the suffocation
suffocation stores files on the sdcard

227
00:28:40,730 --> 00:28:46,670
in a directory called private things so
this command is gonna do it can use adb

228
00:28:46,670 --> 00:28:50,279
debug bridge and we're gonna say we're
gonna pass

229
00:28:50,279 --> 00:28:54,489
shall commit to it so basically adb
shell does by itself is will give you a

230
00:28:54,489 --> 00:29:00,239
shell on the device if you pass more
parameters as I have to execute that

231
00:29:00,239 --> 00:29:05,690
command on the device directly to screen
it is gonna do you have a long listing

232
00:29:05,690 --> 00:29:11,090
of all the director all the files in the
directory / sdcard / private everything

233
00:29:11,090 --> 00:29:19,929
the app price the sdcard so we do that
we did see one file when we were in

234
00:29:19,929 --> 00:29:25,169
writing before you download files you
would have downloaded this file that's

235
00:29:25,169 --> 00:29:33,129
why it is currently on the sdcard so now
you wanna get that file onto our desktop

236
00:29:33,129 --> 00:29:40,129
so we can do some poking at it looks
like right now and to directory on my

237
00:29:40,129 --> 00:29:45,960
host machine and they were in the next
vote eighty paul mitchell download a

238
00:29:45,960 --> 00:29:52,049
file from the device to the host machine
specifying file / sdcard / private

239
00:29:52,049 --> 00:30:00,330
things / 12 file you're just looking at
before I takes about thirty second never

240
00:30:00,330 --> 00:30:07,609
do that unless you have the file on the
local machine so now do so in person I

241
00:30:07,609 --> 00:30:13,669
want to do is run the file photo man
very simple basically attempts to tell

242
00:30:13,669 --> 00:30:21,710
you what type of data is stored in my
case file the only primary is going to

243
00:30:21,710 --> 00:30:31,349
be the allocation of a hard one so it
turns out that we run file we don't get

244
00:30:31,349 --> 00:30:38,089
anything useful tells us data in this
file so it doesn't seem to be able to

245
00:30:38,089 --> 00:30:40,380
figure out anything beyond that

246
00:30:40,380 --> 00:30:53,160
okay so it's something very strange man
but stringz does is will print printed

247
00:30:53,160 --> 00:30:56,640
text strings from within about her file

248
00:30:56,640 --> 00:31:00,210
typically want to run this on something
to see for example you run executable

249
00:31:00,210 --> 00:31:04,800
you might get some information about
libraries are being looked at as a bee

250
00:31:04,800 --> 00:31:14,830
in my case around our file and we get so
again this has been particularly useful

251
00:31:14,830 --> 00:31:19,730
this is truncated as many lines of this
short strings that the thing that mean

252
00:31:19,730 --> 00:31:33,740
anything so less less is man but
everyone's probably used Linux the page

253
00:31:33,740 --> 00:31:45,400
look at the contents of a file for not
less on a file and we get a bunch so I'm

254
00:31:45,400 --> 00:31:49,030
doing something like this

255
00:31:49,030 --> 00:32:04,620
chances are decrypted or coded
something's going on so my question is

256
00:32:04,620 --> 00:32:14,740
secure enough to decide if we look at
these downloads our goal for the section

257
00:32:14,740 --> 00:32:22,490
to gain access to files we shouldn't be
able to download download one is beyond

258
00:32:22,490 --> 00:32:27,190
that file to download something else to
do this

259
00:32:27,190 --> 00:32:32,810
take a simple approach we're gonna guess
URLs based on the one that was requested

260
00:32:32,810 --> 00:32:42,380
to this step when using very sweet I
co-presenter mentioned it is a very

261
00:32:42,380 --> 00:32:46,960
small proxy as a lot of features I'm
using a very small subset of those

262
00:32:46,960 --> 00:32:53,750
features basically the application going
to sit in between the application and

263
00:32:53,750 --> 00:32:59,660
the service at suppressing the file so I
wanna do I want to capture their quest

264
00:32:59,660 --> 00:33:05,840
on the way and change it to attempt to
download a file so first off this is

265
00:33:05,840 --> 00:33:11,590
what it looks like movie download it or
file during the enumeration stages so

266
00:33:11,590 --> 00:33:24,320
the hosts file was one very simple of
service looks like right file so you go

267
00:33:24,320 --> 00:33:32,840
through we get a response ok and not
surprisingly contents is to see the

268
00:33:32,840 --> 00:33:41,560
content length is about a megabyte
something so try to get a different so

269
00:33:41,560 --> 00:33:45,800
this is the original crossed the line
that I just showed me on notice that

270
00:33:45,800 --> 00:33:51,720
there is another tab now it says editor
request that's because transit as the

271
00:33:51,720 --> 00:33:57,470
original price was captured by edit it
before 42 the server so I don't want to

272
00:33:57,470 --> 00:33:58,950
be too

273
00:33:58,950 --> 00:34:02,740
free to be a good idea something called
one chances are something else might be

274
00:34:02,740 --> 00:34:09,540
called 2004 this request along the
server I get a response again I get a

275
00:34:09,540 --> 00:34:15,859
HTTP 200 ok now it's time you that there
is a file it worked i download a file

276
00:34:15,859 --> 00:34:20,030
that is online at some of these I'll
probably should be able to download that

277
00:34:20,030 --> 00:34:21,669
again

278
00:34:21,669 --> 00:34:28,919
much garbage probably the same type of
garbage as my other content length is

279
00:34:28,919 --> 00:34:32,690
also shorter on this file so it's
definitely not the same file with a

280
00:34:32,690 --> 00:34:43,109
different so look like you downloaded
can use adb shell again to get a long

281
00:34:43,109 --> 00:34:51,849
missing files in a directory at the
rectory you see now we have to so we

282
00:34:51,849 --> 00:34:54,570
definitely did download something that
we probably shouldn't have been able to

283
00:34:54,570 --> 00:34:59,829
download so result of this section

284
00:34:59,829 --> 00:35:06,480
pretty good he found that doesn't have
broken an occasion or no indication when

285
00:35:06,480 --> 00:35:13,060
downloading files design using download
result in a breach of authenticity

286
00:35:13,060 --> 00:35:18,030
authentication the loss of
confidentiality and important in my

287
00:35:18,030 --> 00:35:23,990
result in possible changes to the staff
development him real quick talk about

288
00:35:23,990 --> 00:35:30,060
what we know that storage is possibly
secure we know for sure the dollars are

289
00:35:30,060 --> 00:35:33,530
protected so let me know

290
00:35:33,530 --> 00:35:40,020
access the possibly encrypted files of
other users now I wanna know are these

291
00:35:40,020 --> 00:35:46,040
files actually encrypted so we're going
to hear you should get a look at the

292
00:35:46,040 --> 00:35:54,410
source code is determined to do this
through media compiling a musical piece

293
00:35:54,410 --> 00:36:02,670
of software to do this again to pull the
application of us are using text enjoy

294
00:36:02,670 --> 00:36:13,180
it too typical Java class files see
anybody jar file containing rather than

295
00:36:13,180 --> 00:36:32,720
a be a JAR file really do compiling a
JAR file with a java Decompiler come

296
00:36:32,720 --> 00:36:34,270
around the JDU

297
00:36:34,270 --> 00:36:45,280
exists first gonna get the get the
application of the device to my

298
00:36:45,280 --> 00:36:51,210
experience I know that typically the
apathy Kaiser can be stored and / data /

299
00:36:51,210 --> 00:37:00,160
app on the Android device so simple call
such as I know the name of the app cos

300
00:37:00,160 --> 00:37:05,829
certificate of this format package comes
out there yet

301
00:37:05,829 --> 00:37:12,589
ok so I have a second now have a copy of
the application on my local machine

302
00:37:12,589 --> 00:37:28,309
tonight idk

303
00:37:28,309 --> 00:37:33,920
copied in our directory contains quite a
few scripts thanks john was a

304
00:37:33,920 --> 00:37:46,339
functionality using so this on invoke
the DJed XHR script output a file called

305
00:37:46,339 --> 00:38:05,420
CNN live in Texas so the jurors seemed
to just open a sanity compiling so first

306
00:38:05,420 --> 00:38:11,390
step he added to file a patent rights as
jeff Teague II 100 doctor jeff Teague is

307
00:38:11,390 --> 00:38:20,099
going to be a compelling reason to
launch a new job demand shock like RJR

308
00:38:20,099 --> 00:38:26,530
wanna run and a passing our source code
joy as parameter

309
00:38:26,530 --> 00:38:36,770
sitting alongside a buoy and we look at
some of the co gonna look like a

310
00:38:36,770 --> 00:38:41,180
painting classes on the right wing of
the code to the currently selected class

311
00:38:41,180 --> 00:38:46,940
this is very useful right to be able to
see the source code

312
00:38:46,940 --> 00:38:58,110
gue so usually export the code to file
free ezel disingenuous just file civil

313
00:38:58,110 --> 00:39:07,690
sources the location and then you see
now we have been left guard outsourced

314
00:39:07,690 --> 00:39:11,690
that's it for this pausing to contain
all the sources obligation that GDP was

315
00:39:11,690 --> 00:39:31,400
able to compile so quietly I need to
file a destination to the source

316
00:39:31,400 --> 00:39:43,380
directory so directly on the right and
just make sure it's not so now we have

317
00:39:43,380 --> 00:39:51,240
source code look at right now the
question is are these files actually

318
00:39:51,240 --> 00:39:57,300
cryptid well without diving into deep we
can see a lot of imports from Spanish

319
00:39:57,300 --> 00:40:03,200
castle which makes it the Android
implementation of the library for Java

320
00:40:03,200 --> 00:40:04,270
and C sharp

321
00:40:04,270 --> 00:40:08,980
also judging from the class name
productivity it's probably pretty likely

322
00:40:08,980 --> 00:40:17,090
that looks like it so the real question
is your questions from our goal here is

323
00:40:17,090 --> 00:40:26,060
to investigate to do this is actually
happening myself personally

324
00:40:26,060 --> 00:40:34,710
export Co usually use vim text editor
see tags which is generated text file of

325
00:40:34,710 --> 00:40:41,960
all the objects found in forestry basic
and aging reprehensible searching tools

326
00:40:41,960 --> 00:40:48,040
so not going really into that for this
not the time to do that I will point out

327
00:40:48,040 --> 00:40:53,780
some of the code from encryption she
said using a sec

328
00:40:53,780 --> 00:41:00,050
seventh inning passing this PC flag so
BC specifying the provider in Scopus go

329
00:41:00,050 --> 00:41:07,310
about castle OSU strong when using CBC
mode properly

330
00:41:07,310 --> 00:41:14,140
having issues and further down will see
that the keys being generated as 256 bit

331
00:41:14,140 --> 00:41:20,350
so they're going to keep it looks like
this is pretty alright might be more

332
00:41:20,350 --> 00:41:28,490
efficient to be around elsewhere and
I've to deepen is so strong it looks

333
00:41:28,490 --> 00:41:29,780
like it is

334
00:41:29,780 --> 00:41:37,670
I was stuck to our next question is
going to be a key goals here is going to

335
00:41:37,670 --> 00:41:40,690
grab the ski at runtime

336
00:41:40,690 --> 00:41:46,110
dividing a little bit softer going to be
using his ATV junction with gdb the job

337
00:41:46,110 --> 00:41:54,030
debugger the first set up pretty gay dwp
command in conjunction with a TV

338
00:41:54,030 --> 00:41:58,640
JDW P stands for the Java Depot wire
protocol they say it's a way for the

339
00:41:58,640 --> 00:42:03,150
little bugger to communicate with the
virtual machines in the case of ATB with

340
00:42:03,150 --> 00:42:07,170
this will do is list the peds the
process IDs of every running application

341
00:42:07,170 --> 00:42:14,070
is currently available in all cases only
one my location and this is fed through

342
00:42:14,070 --> 00:42:19,330
the setup supporting so basically this
is gonna do is going to be able to

343
00:42:19,330 --> 00:42:28,820
connect to our local port 7892 now allow
us to communicate with paid 11 12910

344
00:42:28,820 --> 00:42:33,930
operate from that now that we have that
wedding set up a db2 connect that's fine

345
00:42:33,930 --> 00:42:42,690
socket to our local host 17011 port 7902
that we are presented with a problem

346
00:42:42,690 --> 00:42:49,090
next time we're good to go

347
00:42:49,090 --> 00:42:59,510
availability clear the screen shot this
prompts earlier we would have picked out

348
00:42:59,510 --> 00:43:03,480
some file some functions that look like
they might be important so then the

349
00:43:03,480 --> 00:43:11,720
crypto activity doesn't sound like my
idea is to break in that function and

350
00:43:11,720 --> 00:43:14,470
see what kind of information can find

351
00:43:14,470 --> 00:43:22,000
to do any JDB you stop in New specify
function well I go to a condo derby at

352
00:43:22,000 --> 00:43:29,369
the package name the criminal activity
activity in C which is the function so

353
00:43:29,369 --> 00:43:31,480
easy right

354
00:43:31,480 --> 00:43:39,810
gdb command called locals so once we had
a break point set four got to use the

355
00:43:39,810 --> 00:43:50,780
app until that activity isn't vote so
that has been done on the sides so now

356
00:43:50,780 --> 00:44:04,010
the local variables that we've broken so
the simplification they didn't do a good

357
00:44:04,010 --> 00:44:07,890
job so we don't the locals he said the
seed very well

358
00:44:07,890 --> 00:44:12,710
saddam's method arguments but there are
a lot of it was called seed in the seed

359
00:44:12,710 --> 00:44:16,560
is a plane is a plain text ring that
says at least one uppercase or lowercase

360
00:44:16,560 --> 00:44:20,089
one number and one special character
which ironically it as another number

361
00:44:20,089 --> 00:44:27,140
two seed chances are you'll be able to
break the secretion doing that beyond

362
00:44:27,140 --> 00:44:35,030
the scope of this is a huge part of a
result of this is good he's received

363
00:44:35,030 --> 00:44:39,849
nothing perceived for it but i wanna do
now

364
00:44:39,849 --> 00:44:45,349
well as one thing we could do quickly
and as test this new CDATA with our

365
00:44:45,349 --> 00:44:53,839
download a file to see if the keys are
share the case here so the key is shared

366
00:44:53,839 --> 00:45:01,450
we're now able to decrypt not only our
own file that you downloaded that

367
00:45:01,450 --> 00:45:16,619
as nicely to do that so we did that's it
sounds very very simple sample right

368
00:45:16,619 --> 00:45:21,680
typically allegations not typically
sometimes develops into a lot better job

369
00:45:21,680 --> 00:45:29,180
sometimes it is a nice brief coverage of
simplification so what we do today which

370
00:45:29,180 --> 00:45:37,230
ended up around about out of target
areas downloads storage encryption

371
00:45:37,230 --> 00:45:44,490
investigated those areas throughout our
talk to me she's right

372
00:45:44,490 --> 00:45:53,390
found that I download files exceed going
on issues together to be able to break

373
00:45:53,390 --> 00:45:58,510
the protection mechanisms of the
outpatient setting my talk to thank you

374
00:45:58,510 --> 00:46:06,160
guys for coming out the same to us
around the morning so I guess now open

375
00:46:06,160 --> 00:46:21,850
for questions for both of us

376
00:46:21,850 --> 00:46:37,430
question was sometimes developers will
use obfuscation but not like out of the

377
00:46:37,430 --> 00:47:14,170
market now not like I less question was
not so I guess usually approach to this

378
00:47:14,170 --> 00:47:21,880
will be to encrypt your data and I guess
storm system if need be but you should

379
00:47:21,880 --> 00:47:41,660
stay far away from that is possible
ground offensive about it is running a

380
00:47:41,660 --> 00:47:48,720
competition in the Derby so probably in
there at some point he was stopped by my

381
00:47:48,720 --> 00:47:56,350
coworker and dad is giving a talk
tomorrow with some GB stuff and Jenny so

382
00:47:56,350 --> 00:48:02,930
dirty room right outside the stores here
thanks

