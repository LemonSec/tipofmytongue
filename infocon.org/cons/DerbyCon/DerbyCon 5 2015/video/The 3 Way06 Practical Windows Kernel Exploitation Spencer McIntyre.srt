1
00:00:51,300 --> 00:01:33,119
everyone down but today I'm gonna be
into it because I'm kinda bought stuff

2
00:01:33,119 --> 00:01:35,920
to go over so much for us still works
out

3
00:01:35,920 --> 00:01:44,610
silver lining is open only I could see
that our city and gender so over

4
00:01:44,610 --> 00:01:48,420
exploitation basics recover some of
their common vulnerability classes so

5
00:01:48,420 --> 00:01:52,429
that explains that we see and then we're
going to dive into what those classes

6
00:01:52,429 --> 00:01:56,910
need to us when it comes to things like
our reliability text tricks that we can

7
00:01:56,910 --> 00:02:01,830
use how do we take up four billion take
it and use it to get code execution

8
00:02:01,830 --> 00:02:07,670
which states were always after eckstein
code and hit on mitigation technology

9
00:02:07,670 --> 00:02:10,310
sometimes little bit like asking for
things like that some of the newer

10
00:02:10,310 --> 00:02:14,540
technologies at the problems that we
have their running into these armored

11
00:02:14,540 --> 00:02:18,230
how bad are correctly display framework
so how they're actually implemented we

12
00:02:18,230 --> 00:02:24,069
talk about the basic two different types
of the exploits as a framework and then

13
00:02:24,069 --> 00:02:27,370
some of the common techniques they use
which is very very interesting at least

14
00:02:27,370 --> 00:02:30,099
from my perspective is a lot of
domestically exploits are some of the

15
00:02:30,099 --> 00:02:33,760
more reliable exploits in my opinion
sort of the techniques that they are

16
00:02:33,760 --> 00:02:37,720
using how can they be applied to other
exploits stand-alone ones if you are so

17
00:02:37,720 --> 00:02:42,420
inclined to write a 4-1 and finally
talked about improving reliability is

18
00:02:42,420 --> 00:02:46,770
really the reason why I wanted to give
the stock is that there's tons of really

19
00:02:46,770 --> 00:02:51,430
awesome curl research exploit research
out there is really good but I find a

20
00:02:51,430 --> 00:02:53,500
lot of it is not particularly

21
00:02:53,500 --> 00:02:58,070
edge cases that you know the stars like
white right now like its December

22
00:02:58,070 --> 00:03:01,800
meeting type of portability but a lot of
times they're not always the most

23
00:03:01,800 --> 00:03:07,300
reliable exploit and a practical
actually needs to be reliable

24
00:03:07,300 --> 00:03:11,510
a lot of you in here are probably Penn
testers CSR Hebel quick up ten testers

25
00:03:11,510 --> 00:03:16,459
ok so on the flip side if you consider
yourself a plurality of researchers I

26
00:03:16,459 --> 00:03:21,490
see I see your hands ok so not quite as
many vulnerability researchers I hope

27
00:03:21,490 --> 00:03:24,230
that somebody everybody gets a little
bit of something in here but a lot of

28
00:03:24,230 --> 00:03:27,700
you are penned testers and what's
probably the most important thing to you

29
00:03:27,700 --> 00:03:29,450
is these reliable

30
00:03:29,450 --> 00:03:34,270
exploits need to be able i was the first
and foremost thing because if you're not

31
00:03:34,270 --> 00:03:38,140
like we're gonna lose that shell in and
nobody wants that this never get that

32
00:03:38,140 --> 00:03:45,590
money slots are you saying you are
indeed going to cut that short a lot of

33
00:03:45,590 --> 00:03:51,730
the things in this presentation will
cause you to death under just like any

34
00:03:51,730 --> 00:03:56,630
other problems there is no one solution
that fits every day and try to try to

35
00:03:56,630 --> 00:04:03,080
minimize the blue screens and different
techniques used to do that so that's a

36
00:04:03,080 --> 00:04:06,959
blue screen right there that's running
into with an AK-forty board you will

37
00:04:06,959 --> 00:04:12,560
find out a little bit last year some the
basics on so y creo exploitation why why

38
00:04:12,560 --> 00:04:17,690
do we care there's been a downward trend
remote code execution vulnerabilities

39
00:04:17,690 --> 00:04:22,450
arguably one of the last great once was
a mess of a 267 all depend testers

40
00:04:22,450 --> 00:04:27,110
favorite that reliable code execution
that you can still find I found on a

41
00:04:27,110 --> 00:04:31,740
domain controller kind of sad but it is
starting to become less and West

42
00:04:31,740 --> 00:04:37,110
apparently people are actually catching
up so she is now generally being found

43
00:04:37,110 --> 00:04:41,000
in Lex 3rd party libraries and things
like that so you're getting things we

44
00:04:41,000 --> 00:04:45,669
are still seen RCG but they're not quite
as like traveling in the window of

45
00:04:45,669 --> 00:04:47,040
source

46
00:04:47,040 --> 00:04:52,250
curl exploits is that the kernel is
always there the Windows kernel is

47
00:04:52,250 --> 00:04:56,320
always going to be there soon attack
surface that is not easy to get away

48
00:04:56,320 --> 00:04:59,110
from unless you're running Linux you're
probably going to have to win two

49
00:04:59,110 --> 00:05:03,660
scoreless not really any way to to
mitigate that also come into why you see

50
00:05:03,660 --> 00:05:06,670
a lot of plants that exploits that
drivers

51
00:05:06,670 --> 00:05:11,590
abilities a sort of second phase 2 once
an attacker compromises of like a

52
00:05:11,590 --> 00:05:15,390
browser something like that deliver to
Kurt Warner ability to escalate

53
00:05:15,390 --> 00:05:18,130
themselves and they usually get out of
some type of sandbox and things like

54
00:05:18,130 --> 00:05:23,060
that a lot of these loans were seen are
being released from I told our own lives

55
00:05:23,060 --> 00:05:26,460
like fantastic bugs that are coming out
there and enacted the researchers

56
00:05:26,460 --> 00:05:31,730
released then there they have their day
on there were at least in like write-ups

57
00:05:31,730 --> 00:05:35,250
afterwards people can actually to figure
out like what they did and you know they

58
00:05:35,250 --> 00:05:38,780
just closed the vulnerabilities that
we're seeing a lot of great research

59
00:05:38,780 --> 00:05:42,390
coming out the podium competition as far
as Colonel bugs another fantastic

60
00:05:42,390 --> 00:05:46,530
resource that we're seeing a lot is the
Google security research six they're

61
00:05:46,530 --> 00:05:49,790
releasing a lot about colonel bilities
as well

62
00:05:49,790 --> 00:05:55,810
to look back on it and these are a bunch
of kernel bug that I found to be notable

63
00:05:55,810 --> 00:06:00,150
the reason why I found these wants to be
notable is that other than the typical

64
00:06:00,150 --> 00:06:03,760
Microsoft boilerplate something was
wrong in the current overfished there

65
00:06:03,760 --> 00:06:07,760
were some type of additional research or
some type of coat to go along with

66
00:06:07,760 --> 00:06:12,790
somebody actually looked into taking
this budget and making it into a actual

67
00:06:12,790 --> 00:06:17,780
full blown explains leveraging it was
quite a few they're the latest the

68
00:06:17,780 --> 00:06:23,320
senate's 1597 was actually really sought
to exploit TV as a proof of concept now

69
00:06:23,320 --> 00:06:26,860
serves that's actually earlier this week
so a lot of really great stuff their

70
00:06:26,860 --> 00:06:35,360
classes so I happen here broken out the
top three are the primary right what

71
00:06:35,360 --> 00:06:39,270
we're under a pointed reference and then
use after free and then finally have an

72
00:06:39,270 --> 00:06:45,540
honorable mention people think about it
talk about sex off road was just not

73
00:06:45,540 --> 00:06:50,160
quite as prevalent in like colonel and I
can't really think of any recent

74
00:06:50,160 --> 00:06:54,310
exploits like Microsoft driver that
leverage saxophone flute not to say they

75
00:06:54,310 --> 00:06:58,150
don't exist but what's really gonna be
focusing on the cost of building classes

76
00:06:58,150 --> 00:07:01,780
so all they are common in other types of
software code execution things like that

77
00:07:01,780 --> 00:07:07,970
not always and colonel and specifically
the first right what we're so what is it

78
00:07:07,970 --> 00:07:12,070
it is sometimes attacker controlled data
can be written to an attacker control

79
00:07:12,070 --> 00:07:14,930
location now this is fantastic because
an attacker can

80
00:07:14,930 --> 00:07:20,810
usually leverage this by writing data to
a location that they control now it's

81
00:07:20,810 --> 00:07:24,979
usually the attacker to be able to
control the location of the data more

82
00:07:24,979 --> 00:07:29,130
than what the data actually is of course
they have full control over both of them

83
00:07:29,130 --> 00:07:34,070
usually getting code execution it is
trivial from that point deserve a lot of

84
00:07:34,070 --> 00:07:37,270
really well documented techniques of
what the window structures you can

85
00:07:37,270 --> 00:07:40,830
corrupt our that will give you access to
up to code execution if you control both

86
00:07:40,830 --> 00:07:46,110
white and where she know where it is to
go

87
00:07:46,110 --> 00:07:50,380
expectation using this is often
relatively stable are the reason why is

88
00:07:50,380 --> 00:07:54,099
because you're right what we're
conditioned people end up attacking the

89
00:07:54,099 --> 00:07:59,910
end up hurting too how dispatched able
to do special point in the past year but

90
00:07:59,910 --> 00:08:05,310
yasser for on a 32 bit system that is a
call back so you can target as you're

91
00:08:05,310 --> 00:08:10,039
aware and you have your what data you
can trigger the code that is written on

92
00:08:10,039 --> 00:08:14,380
at that that is pointing to by that
point that you cannot overwrite to be

93
00:08:14,380 --> 00:08:19,970
executed on demand and that is to be
done on demand is very key to us for all

94
00:08:19,970 --> 00:08:24,460
the liability because what we can do is
between execute exploit multiple times

95
00:08:24,460 --> 00:08:28,389
to for example I'll be ourselves and
then clean up the system after dawn

96
00:08:28,389 --> 00:08:34,289
things like that in addition to that are
usually corrupting that table on it it's

97
00:08:34,289 --> 00:08:40,560
not it generally doesn't meet you it's
less less likely to lead to you

98
00:08:40,560 --> 00:08:45,480
instability because the system calls
that I trigger that expose the pointer

99
00:08:45,480 --> 00:08:48,910
to be called or not quite use as
frequently as some others

100
00:08:48,910 --> 00:08:52,029
exploits that utilize this technique

101
00:08:52,029 --> 00:08:58,760
1188 join these are rare condition those
released by a setback in 2011 and then

102
00:08:58,760 --> 00:09:06,790
more recently released as 1475 that
factored out windows server 2003

103
00:09:06,790 --> 00:09:12,399
movies like fourth quarter of last year
so next up you have no pointer directs

104
00:09:12,399 --> 00:09:17,810
this occurs when like a pointer is
referenced this referred to as as an

105
00:09:17,810 --> 00:09:23,180
object of course why this is bad is that
if an attacker can map to a memory out

106
00:09:23,180 --> 00:09:23,830
that ad

107
00:09:23,830 --> 00:09:27,960
then they will actually be able to
create a potentially malicious objects

108
00:09:27,960 --> 00:09:33,120
at that address that can be used and
depending on what that object is gonna

109
00:09:33,120 --> 00:09:35,910
depend on how it is actually being used

110
00:09:35,910 --> 00:09:38,950
unfortunately the attacker to need to
know what types of objects that could

111
00:09:38,950 --> 00:09:42,230
put there and how it's being exposed to
sexual tension can be a little bit more

112
00:09:42,230 --> 00:09:45,650
complications are gonna have to have an
understanding of what the structures are

113
00:09:45,650 --> 00:09:53,040
how they use and how hard boner ability
is treating them when it is trigger so

114
00:09:53,040 --> 00:09:58,470
sometimes I cannot always be mapped
others medication for that page mapping

115
00:09:58,470 --> 00:10:04,440
and includes that and I believe on
Windows 64 bit systems by default I

116
00:10:04,440 --> 00:10:09,350
guess she's always on you can't allocate
the lower pages can allocate that no

117
00:10:09,350 --> 00:10:11,850
paging everyone just a little bit of a
problem

118
00:10:11,850 --> 00:10:16,270
one thing that is interesting about this
though is that sometimes as we've seen

119
00:10:16,270 --> 00:10:21,630
in MS 14:58 is that a point or I can be
truncated so whereas on a 32 bit system

120
00:10:21,630 --> 00:10:28,620
update of one was actually being used on
a 64 bit system it was the psych 000 F

121
00:10:28,620 --> 00:10:34,790
and what's very interesting to us about
that is instead of control page being

122
00:10:34,790 --> 00:10:41,200
referred to as objects address that is
much higher in a user memory space was

123
00:10:41,200 --> 00:10:46,010
being used and so because of that next
week for 64 bit was able to be written

124
00:10:46,010 --> 00:10:50,160
because that is outside the boundaries
of where windows as their protection in

125
00:10:50,160 --> 00:10:54,630
place they're able to leverage that and
so there's a reliable 64 bit codex

126
00:10:54,630 --> 00:11:01,310
feature that because the deployment was
truncated right to use after free

127
00:11:01,310 --> 00:11:07,570
secretary is kind of similar in the
sense of a pointed reference the night

128
00:11:07,570 --> 00:11:13,540
invalid memory locations being used to
refer to an object I'm so out of the

129
00:11:13,540 --> 00:11:18,930
three classes are described the one that
is most difficult you are lively

130
00:11:18,930 --> 00:11:24,330
actually because usually it requires you
to successfully reallocate the memory

131
00:11:24,330 --> 00:11:28,400
that was originally free and this is
very critical and it's not always easy

132
00:11:28,400 --> 00:11:29,640
thing to do

133
00:11:29,640 --> 00:11:34,670
additionally more difficult at that
issue don't always know can't tell the

134
00:11:34,670 --> 00:11:35,130
issue

135
00:11:35,130 --> 00:11:41,190
have successfully reallocated that is
that a little bit more later point time

136
00:11:41,190 --> 00:11:45,270
but when the examples of this morning he
was an assistant end but was a scrollbar

137
00:11:45,270 --> 00:11:50,350
info use after Sri

138
00:11:50,350 --> 00:11:54,470
so how do we take these vulnerabilities
actually get code execution out of them

139
00:11:54,470 --> 00:11:56,950
because a lot of times you can trigger
the ball until you get a blue screen

140
00:11:56,950 --> 00:12:01,050
that that's fantastic you know you're
able to trigger that border ability but

141
00:12:01,050 --> 00:12:04,880
we don't want that once again like I
said all is as Penn testers you want to

142
00:12:04,880 --> 00:12:07,890
expletive you alive we want to work
first time every time should not gonna

143
00:12:07,890 --> 00:12:13,910
lose your shelter thank you to be able
to do that very carefully like I said

144
00:12:13,910 --> 00:12:17,340
with the right what we're conditioned
upper much to go to technique is to be

145
00:12:17,340 --> 00:12:22,360
corrupting the hell dispatched a boxer's
a pointer at that offset is on all

146
00:12:22,360 --> 00:12:27,820
versions of Windows XP all the way up to
understand and you can actually result

147
00:12:27,820 --> 00:12:31,710
that simple that's another very nice
thing about it is that with and to you

148
00:12:31,710 --> 00:12:37,030
Karen LPGA you can resolve the symbol
out so you can calculate the offset to

149
00:12:37,030 --> 00:12:41,470
where that is in memory I say that
however you should note that in order to

150
00:12:41,470 --> 00:12:45,270
do that to exploit the native
architecture of the offering smear

151
00:12:45,270 --> 00:12:50,730
tactic that what I mean by that is that
if you are running 64 process should be

152
00:12:50,730 --> 00:12:55,350
a lot more difficult because you can't
load data executable tend to think all

153
00:12:55,350 --> 00:13:00,080
those library a lot to get Rach actress
so it works a lot better to 32 bit or 64

154
00:13:00,080 --> 00:13:04,600
bit process in terms of Medicine however
such as usual

155
00:13:04,600 --> 00:13:08,980
session needs to be a the need of
architecture of the system in order to

156
00:13:08,980 --> 00:13:14,000
be able to resolve that address which is
why you see a whole lot of while 64

157
00:13:14,000 --> 00:13:19,710
exploits just complicates things are
going to open though a lot of times they

158
00:13:19,710 --> 00:13:25,330
are forced to do that so if you want to
look at them that some of the pond own

159
00:13:25,330 --> 00:13:29,410
research it comes out there is fantastic
and to query interval profile is that

160
00:13:29,410 --> 00:13:32,970
function that I've mentioned so once to
help dispatch table is corrupted because

161
00:13:32,970 --> 00:13:36,880
you control what data is written and
where it is written to set out where to

162
00:13:36,880 --> 00:13:40,850
be this offset ninety how dispatch table
after you have done that

163
00:13:40,850 --> 00:13:44,449
you have that though what conditions of
what you wrote to that point your

164
00:13:44,449 --> 00:13:48,269
shelter that's going to do whatever it
is that you would like to do after you

165
00:13:48,269 --> 00:13:53,509
have that you can call and to create a
full profile to trigger the show on

166
00:13:53,509 --> 00:13:58,100
demand just very flexible from an
attacker's perspective because if you

167
00:13:58,100 --> 00:14:02,319
have control over where the show is you
could potentially change the shellcode

168
00:14:02,319 --> 00:14:06,019
because it's in your process memory
space with outreach recurring the

169
00:14:06,019 --> 00:14:09,930
vulnerability to think all antique
oriental profile again to execute

170
00:14:09,930 --> 00:14:14,170
different shellcode in the context of
the kernel with outreach Treasury

171
00:14:14,170 --> 00:14:18,819
explosive that happened where tuition
again and a few times you can trigger

172
00:14:18,819 --> 00:14:22,000
the actual conditions of course going to
increase your chances of stability so

173
00:14:22,000 --> 00:14:23,209
you don't have to anymore

174
00:14:23,209 --> 00:14:28,800
business reference and use after free up
there they're similar in the sense that

175
00:14:28,800 --> 00:14:33,730
they are dependent like I said it's
gonna require the attacker to know what

176
00:14:33,730 --> 00:14:37,560
the object is and how it's being used as
an order to be able to get some type of

177
00:14:37,560 --> 00:14:41,709
a structure corrupt in such a way this
can be useful to that end up reading a

178
00:14:41,709 --> 00:14:46,339
lot of write ups on issues after
cerebral modalities pointed references

179
00:14:46,339 --> 00:14:50,980
I'm convinced there some secretive like
restaurants everyone has like points to

180
00:14:50,980 --> 00:14:55,459
like the different locations like what
such structures can use and how there's

181
00:14:55,459 --> 00:14:59,800
not really good reference to my
knowledge on that is kind of up to the

182
00:14:59,800 --> 00:15:03,750
attacker to figure out how that
structure is being used and then look up

183
00:15:03,750 --> 00:15:10,660
the usually nonexistent documentation I
usually end up forcing a lot of how the

184
00:15:10,660 --> 00:15:17,399
code is being referred to in order to
find a way to leverage it ends up

185
00:15:17,399 --> 00:15:20,980
getting it ends up being corrupted on
either

186
00:15:20,980 --> 00:15:25,370
corrupting it or you're providing your
own object in it is sometimes corrupt

187
00:15:25,370 --> 00:15:28,639
because you don't always have the
ability to create a fully legitimate one

188
00:15:28,639 --> 00:15:30,880
any use after free

189
00:15:30,880 --> 00:15:36,130
object is that that is free you end up
having to replace its not always with

190
00:15:36,130 --> 00:15:41,279
the same type of object but it is it
does have to be the same memory location

191
00:15:41,279 --> 00:15:45,920
which definitely impact stability is
that you need to be able to allocate

192
00:15:45,920 --> 00:15:49,370
region that had been free and there's a
lot of different factors that go into

193
00:15:49,370 --> 00:15:54,610
that such as the different types of
sheets have added an additional tax

194
00:15:54,610 --> 00:15:59,860
cheats and so objects can be free to all
the same time but not all objects are

195
00:15:59,860 --> 00:16:01,100
used on

196
00:16:01,100 --> 00:16:06,310
are in the same destination is targeting
know what objects are used in the same

197
00:16:06,310 --> 00:16:12,300
that you're targeting so that those
objects they might be able to initialize

198
00:16:12,300 --> 00:16:19,269
over the area that read so usually wind
turbine to look for an object to replace

199
00:16:19,269 --> 00:16:22,310
the one that had been freed you're
looking for some kind of a primitive I'm

200
00:16:22,310 --> 00:16:26,370
just the the primitive ends up being
ideal lead something that can be used to

201
00:16:26,370 --> 00:16:29,000
once again and she like a right what
we're conditioned you're looking for

202
00:16:29,000 --> 00:16:33,220
some type of appointed call function on
this object that allows you to write

203
00:16:33,220 --> 00:16:38,269
data to a location that you control as
you try to go for promised I feel like

204
00:16:38,269 --> 00:16:43,660
right conditions would be ideal the most
ideal second course you call but that's

205
00:16:43,660 --> 00:16:47,529
not quite as frequent but read
conditions are also beneficial because

206
00:16:47,529 --> 00:16:52,860
you can seek out additional data that
I'm 21 object I just want to point out

207
00:16:52,860 --> 00:16:57,089
that is a fantastic object that you can
corrupted is relatively easy to achieve

208
00:16:57,089 --> 00:17:02,550
code execution within as the tag und
objects that is the window object that

209
00:17:02,550 --> 00:17:06,919
stored in kernel memory space as it has
all of the information as pertaining to

210
00:17:06,919 --> 00:17:13,169
the window they are interviewing and so
what's a very useful about this object

211
00:17:13,169 --> 00:17:17,309
is that it has two fields in the
structure on the peace server-side radio

212
00:17:17,309 --> 00:17:21,419
project is that is a bit like this
problem set to 0 on but if that's

213
00:17:21,419 --> 00:17:28,150
lacking be set to one then this out yet
and WMD Proc the pointer points to a

214
00:17:28,150 --> 00:17:33,270
call back and win that server side
window Proc slack is set on we send

215
00:17:33,270 --> 00:17:37,900
events to the window that w and
approximation will be called in the

216
00:17:37,900 --> 00:17:42,530
context of the kernel so you can set
that flag I'm usually already have

217
00:17:42,530 --> 00:17:49,070
relatively easy access to the window
boxes to call it relaxes me to set it

218
00:17:49,070 --> 00:17:53,490
because it is set to an address in usual
and when does makes it easy to set that

219
00:17:53,490 --> 00:17:54,220
but that

220
00:17:54,220 --> 00:17:58,020
service I went to prague flag is what's
always your own is what is really

221
00:17:58,020 --> 00:18:02,860
protecting the system usually from
Darfur bilities so if you can set that

222
00:18:02,860 --> 00:18:06,809
flag you can then send an event to the
window and once again you can usually

223
00:18:06,809 --> 00:18:13,450
achieved code execution on demand in a
relatively reliable communication

224
00:18:13,450 --> 00:18:18,630
technologies unfortunately the day's
jumped yes she died with expertise is

225
00:18:18,630 --> 00:18:23,809
long gone and it's just not realistic to
think that you're going to be able to

226
00:18:23,809 --> 00:18:33,370
exploit the SLR is semi issue because
usually when you are running a local a

227
00:18:33,370 --> 00:18:36,409
local privilege escalation when you're
running attack against the current you

228
00:18:36,409 --> 00:18:40,409
already have code execution usually I'm
in terms of Medicine this usually means

229
00:18:40,409 --> 00:18:45,500
that you're loading a DLL interpreter
session groovy hii calls you see railgun

230
00:18:45,500 --> 00:18:50,760
you can usually used to resolve
addresses at least out of our User land

231
00:18:50,760 --> 00:18:54,549
on suka now I'm have that ability and
once again like I was talking about the

232
00:18:54,549 --> 00:18:58,909
and see how dispatched it would actually
load the kernel executable into memories

233
00:18:58,909 --> 00:19:03,159
you can resolve the address that anyhow
dispatch table I'm so is or it isn't

234
00:19:03,159 --> 00:19:07,610
issue with only an issue so it depends
on what exactly you're trying to corrupt

235
00:19:07,610 --> 00:19:13,409
and where it is it's not as much as his
code execution works purely a black box

236
00:19:13,409 --> 00:19:20,020
usually no idea where the addresses are
unless you have some kind of leak so

237
00:19:20,020 --> 00:19:25,390
some addresses are also still usually at
static offset sometimes some of the

238
00:19:25,390 --> 00:19:29,590
tables are always out like jack off
thats if you need to use those those are

239
00:19:29,590 --> 00:19:34,390
available as well for the most part the
kernel modules are randomized but once

240
00:19:34,390 --> 00:19:39,280
you can still usually a result the
address is base addresses of the windows

241
00:19:39,280 --> 00:19:44,909
curls and then Data Execution Prevention
absolutely because you have code

242
00:19:44,909 --> 00:19:46,330
execution ahead of time

243
00:19:46,330 --> 00:19:51,370
XE XE Execution Prevention is not use
the products you can set the permissions

244
00:19:51,370 --> 00:19:56,340
on the page now that did change with the
introduction of Windows 8 but we'll talk

245
00:19:56,340 --> 00:19:58,210
about that just second

246
00:19:58,210 --> 00:20:02,700
so initially there's no page mapping
that's when the protection provided by

247
00:20:02,700 --> 00:20:03,290
admin

248
00:20:03,290 --> 00:20:08,380
I believe you can also enable it within
the operating system without and like I

249
00:20:08,380 --> 00:20:12,910
said about 64 bit Windows 7 64 bit
Windows has that baked white cannot

250
00:20:12,910 --> 00:20:18,070
allocate those really low level there's
no number of pages on a 64 bit Windows

251
00:20:18,070 --> 00:20:22,890
from the user process just doesn't allow
you to do that what they end up actually

252
00:20:22,890 --> 00:20:28,080
doing to mitigate that is that the
operating system maps that ahead of time

253
00:20:28,080 --> 00:20:32,100
and such the permission slip no access
so it's basically the operating system

254
00:20:32,100 --> 00:20:40,660
squat on that on that page that process
cannot not allocated and so there's

255
00:20:40,660 --> 00:20:45,660
estimate was originally designed by
Intel and introduced into their

256
00:20:45,660 --> 00:20:49,820
processors long before Windows 8 came
out but it wasn't till when do they came

257
00:20:49,820 --> 00:20:53,410
out that the operating system did start
to take advantage of this feature I'm

258
00:20:53,410 --> 00:20:58,720
not what does prevents usual and
addresses from be executed within the

259
00:20:58,720 --> 00:21:02,890
context of the kernel which can
definitely be a problem for an attacker

260
00:21:02,890 --> 00:21:07,490
because usually their shell code is in a
useful and address space if they're

261
00:21:07,490 --> 00:21:09,210
trying to get around like death or
something like that you probably

262
00:21:09,210 --> 00:21:12,810
allocated to page with rewrite execute
permissions wrote their shelter to there

263
00:21:12,810 --> 00:21:16,420
and then had some type of a primitive in
order to get that to be executed because

264
00:21:16,420 --> 00:21:20,560
that isn't usually SMS going to prevent
that from being executed go through an

265
00:21:20,560 --> 00:21:22,050
exception

266
00:21:22,050 --> 00:21:27,010
looks just like that on Windows 3.1 so
that attempted executed no extra memory

267
00:21:27,010 --> 00:21:35,230
on Sunday they asked me yesterday a
fantastic technique used to disable SMS

268
00:21:35,230 --> 00:21:42,800
it is in my references what they ended
up doing was they ended up signing rock

269
00:21:42,800 --> 00:21:48,010
gadgets in the Windows kernel that is
those gadgets could be executed they

270
00:21:48,010 --> 00:21:54,760
could disable on s map so what you end
up doing in order to disable ass map is

271
00:21:54,760 --> 00:21:58,840
you end up resulting these addresses out
of the Coeur d'Alene executing those and

272
00:21:58,840 --> 00:22:02,330
then when that returns you have to have
some type of the technique North 14 Mb

273
00:22:02,330 --> 00:22:06,540
executing into your shelf and so on this
fantastic research on that is great

274
00:22:06,540 --> 00:22:08,519
white paper on it

275
00:22:08,519 --> 00:22:12,609
the more difficult things about this
though is that unlike dnt how dispatch

276
00:22:12,609 --> 00:22:17,919
table the address of these rock gadgets
to not be directly result because it's

277
00:22:17,919 --> 00:22:23,179
like barry down within a function and
like the page out a section on what you

278
00:22:23,179 --> 00:22:27,679
can end up doing this you can still do
something similar by loading the kernel

279
00:22:27,679 --> 00:22:33,289
executable into your closet space you
can search that KLK section processing

280
00:22:33,289 --> 00:22:38,539
orders and you can search for gadgets
and you can use data to determine the

281
00:22:38,539 --> 00:22:42,859
address of the Jag suitable for
disabling estimate and what that's going

282
00:22:42,859 --> 00:22:48,119
to do that gadgets can disable SMS by
setting the UCR up a flag in the CCR for

283
00:22:48,119 --> 00:22:53,239
register and then after that can disable
you can execute your code in a usually

284
00:22:53,239 --> 00:22:59,869
happens from the context so once again
the current campaign loaded in 1644

285
00:22:59,869 --> 00:23:06,659
system 32 bit processor is 64 bit
executable so I suppose you could write

286
00:23:06,659 --> 00:23:11,200
your own research to do that but it is a
little bit more difficult to text can't

287
00:23:11,200 --> 00:23:17,589
use the Windows API calls just load it
and the process if sex talk about how

288
00:23:17,589 --> 00:23:19,859
the are in bed asleep

289
00:23:19,859 --> 00:23:24,799
understanding of the different classes
in how they can use levers to gain code

290
00:23:24,799 --> 00:23:29,359
execution super much all the kernel
exploit and legislature although

291
00:23:29,359 --> 00:23:36,989
escalations on that you find under
Windows XP Windows Mobile so they're

292
00:23:36,989 --> 00:23:40,389
dividing into two different categories
based on their implementation they have

293
00:23:40,389 --> 00:23:46,039
exploits that aren't entirely and
exploit are implemented in C as

294
00:23:46,039 --> 00:23:50,119
reflectively verbal deal well so there's
advantages to both of these approaches

295
00:23:50,119 --> 00:23:59,599
so there aren't but most of the ones in
medical and certainly under that

296
00:23:59,599 --> 00:24:03,109
category are there are a couple of that
one is correct there outside of that

297
00:24:03,109 --> 00:24:06,820
specific tree and so what we're focusing
on focusing on this privilege escalation

298
00:24:06,820 --> 00:24:11,769
vulnerability there are these two
classes I'm so most of them are gonna

299
00:24:11,769 --> 00:24:14,669
try to directly either steal the target

300
00:24:14,669 --> 00:24:20,309
or duplicate the system token now each
process has a token of reference in it

301
00:24:20,309 --> 00:24:24,299
which is what identifies the process is
being controlled by a specific user and

302
00:24:24,299 --> 00:24:29,239
so the object of local privilege
escalation vulnerability is going to

303
00:24:29,239 --> 00:24:33,720
usually beaches swap that token out for
a system-level token which can allow

304
00:24:33,720 --> 00:24:37,019
these hackers do things of course with
system-level privileges because the

305
00:24:37,019 --> 00:24:41,059
system is going to think that that is
that the system process death token

306
00:24:41,059 --> 00:24:46,879
there's one exploit and modestly that
does not attempt to modify the token and

307
00:24:46,879 --> 00:24:52,029
there's the MS 1353 exploit this was one
of the ones I came out of the pond own

308
00:24:52,029 --> 00:24:56,600
competition and that one takes an
approach different doesn't directly try

309
00:24:56,600 --> 00:25:00,679
to you either copy or duplicate
assistant token what it actually does it

310
00:25:00,679 --> 00:25:05,139
clears out the ACL of a system process I
believe its wind walk in and what's the

311
00:25:05,139 --> 00:25:09,809
ACL is cleared out is that the process
able to inject a payload into the wind

312
00:25:09,809 --> 00:25:13,460
log-in process so we can utilize that so
that's that's a different technique but

313
00:25:13,460 --> 00:25:17,159
that's the only export that you said
most of the other ones are all going try

314
00:25:17,159 --> 00:25:22,739
to either copy or duplicate duplicate or
create a new token there is a Windows

315
00:25:22,739 --> 00:25:27,859
kernel exploit nixon for us onto these
methods exist to be able to you like

316
00:25:27,859 --> 00:25:32,359
result the address the NTL dispatch
table on your stockings stealing shelton

317
00:25:32,359 --> 00:25:37,289
in there and things like that so
implementation so why would you want to

318
00:25:37,289 --> 00:25:43,710
ride out the whole kernel exploit in
Ruby might eventually be deprecated in

319
00:25:43,710 --> 00:25:49,249
favor of DLL steps because there's a lot
more advantages to that concert

320
00:25:49,249 --> 00:25:52,320
currently there are not a whole lot
they're being done in this round but a

321
00:25:52,320 --> 00:25:58,879
lot of the older local exploits are
entirely as ruby files using rail got so

322
00:25:58,879 --> 00:26:03,769
this technique is well suited for Xmas
that are very simple that generally true

323
00:26:03,769 --> 00:26:06,940
sometimes you're right but we're
conditioned communist like ENT devices

324
00:26:06,940 --> 00:26:14,399
profile centre-backs boys I would like
an 81 on is one of them so you can

325
00:26:14,399 --> 00:26:19,289
utilize the device outro function was
like a specially crafted author and

326
00:26:19,289 --> 00:26:22,499
that's what's necessary to actually I
miss levin et is that deck specially

327
00:26:22,499 --> 00:26:24,280
crafted buffer allows you to

328
00:26:24,280 --> 00:26:29,140
control what data is written where as
one of the benefits

329
00:26:29,140 --> 00:26:34,570
entirely self-contained revival I know a
lot people shy away from writing in see

330
00:26:34,570 --> 00:26:38,090
what people like your pen tester just
trying to get into you may not want to

331
00:26:38,090 --> 00:26:41,570
write Excellency the code I think if
you're looking at it might be a little

332
00:26:41,570 --> 00:26:46,840
bit more intimidating but if you're
writing in Ruby like this technique can

333
00:26:46,840 --> 00:26:50,990
be very well suited for once at a
relatively simple to just meet that one

334
00:26:50,990 --> 00:26:54,670
called you sort of Rightmove air
conditioned

335
00:26:54,670 --> 00:26:59,530
implementations there are a lot more
flexible they allow faster easier access

336
00:26:59,530 --> 00:27:04,580
to the Windows API and so one of the
other nice things about this is that

337
00:27:04,580 --> 00:27:11,390
because the exploit is implemented as
the DLL load that either into its own

338
00:27:11,390 --> 00:27:16,440
process or can elevate another process
for you which is something you can do

339
00:27:16,440 --> 00:27:21,740
with the route that it was now why would
you want him to escalate another process

340
00:27:21,740 --> 00:27:25,530
is because if something goes wrong and
that process becomes unstable and

341
00:27:25,530 --> 00:27:31,460
crashes so the reason why you'd want to
escalate another process that that if it

342
00:27:31,460 --> 00:27:35,560
fails and it doesn't lose screen you'll
still have your session that's a big if

343
00:27:35,560 --> 00:27:39,830
thats requires that you still that it's
not going to fail in colonel and

344
00:27:39,830 --> 00:27:43,010
snacking on your screen but if it fails
and use the left you'll likely still

345
00:27:43,010 --> 00:27:48,440
have a session a lot of the exploits are
implemented this way so what they'll try

346
00:27:48,440 --> 00:27:53,700
to do by default assault ride spawn a
new process injected into that and then

347
00:27:53,700 --> 00:27:59,480
injected he allowed to elevate the other
process like no Patrick out on sometimes

348
00:27:59,480 --> 00:28:04,260
us and boxes prevent this though I miss
you like a browser exploit you can

349
00:28:04,260 --> 00:28:08,280
actually start those other processes
will scale back to you

350
00:28:08,280 --> 00:28:11,790
loading the DL low-interest loan process
to elevate down one instead that way you

351
00:28:11,790 --> 00:28:16,510
can still tried as as for last-ditch
effort but once again if its sales gonna

352
00:28:16,510 --> 00:28:26,220
lose your session it whether the SATs
are not okay so most of the exploits

353
00:28:26,220 --> 00:28:29,880
take like a basic like four steps that
you sometimes like environment attention

354
00:28:29,880 --> 00:28:33,480
to check to see if it is already running
a system if it is

355
00:28:33,480 --> 00:28:38,049
bailout because there's no point in
continuing any future texts weekend is

356
00:28:38,049 --> 00:28:41,720
always a chance of instabilities you
don't do any more than is necessary

357
00:28:41,720 --> 00:28:47,559
a water Windows local place a mess but
also they do you check out the damage

358
00:28:47,559 --> 00:28:52,270
that's gonna try to see if this horrible
and Wimbledon due Tuesday and uploading

359
00:28:52,270 --> 00:28:56,799
the end up looking at the driver on disk
in the end up checking the the final

360
00:28:56,799 --> 00:29:00,679
version of that against the Packers and
check to see that version is patch on

361
00:29:00,679 --> 00:29:03,540
the small subunit face revealed wanted
you any type of sex and gets like the

362
00:29:03,540 --> 00:29:07,000
person does make sure you're running
tests in need of architecture not unlike

363
00:29:07,000 --> 00:29:11,540
a while 64 process a lot of times they
also brought in to check out the new

364
00:29:11,540 --> 00:29:18,059
exploits 10 you it doesn't look like the
systems but once again they cost system

365
00:29:18,059 --> 00:29:24,730
instability in addition to BSOD in the
box most likely to get so they get deal

366
00:29:24,730 --> 00:29:28,280
process is that you want to start up a
dummy process of like Notepad or

367
00:29:28,280 --> 00:29:31,900
something and you want you inject and
elevate that once that there's something

368
00:29:31,900 --> 00:29:37,900
useful and you're not going to lose your
session and hopefully that will do its

369
00:29:37,900 --> 00:29:38,570
job

370
00:29:38,570 --> 00:29:48,299
X elevate you to a system-level ok so
should I shocker time either implemented

371
00:29:48,299 --> 00:29:53,520
as like dropped bytes is what kind of
all started to see a shift in some of

372
00:29:53,520 --> 00:29:58,049
the newer exploits to using icy Bay
shelter which one it is not something

373
00:29:58,049 --> 00:30:02,049
you can do with their exploits but not
reflective yellow ones you can write a

374
00:30:02,049 --> 00:30:08,380
function and have that be executed as
your show sonya damages to that is that

375
00:30:08,380 --> 00:30:12,049
the show can be a little bit more
flexible when you are dealing with the

376
00:30:12,049 --> 00:30:16,429
law by Tony you have like an assembly
stuff that's going to steal your token

377
00:30:16,429 --> 00:30:20,669
that's can be dependent upon the version
of Windows that you're running two

378
00:30:20,669 --> 00:30:24,370
different versions of Windows Store the
token and different part of the

379
00:30:24,370 --> 00:30:28,760
structures different offset to the
shelter has to be specific to your

380
00:30:28,760 --> 00:30:32,690
version of Windows which once again that
can be a source of instability so if you

381
00:30:32,690 --> 00:30:36,919
can use Joker that implemented in C on a
couple of the latest exploits in

382
00:30:36,919 --> 00:30:41,600
Metasploit have used ones that actually
searched for and copy over the shoko and

383
00:30:41,600 --> 00:30:44,940
then that implementation because it's
searching for its lot more dynamic and

384
00:30:44,940 --> 00:30:46,669
it's not going to be specific to us

385
00:30:46,669 --> 00:30:51,889
single version of Windows in addition to
coach me exude a host system 64 bit

386
00:30:51,889 --> 00:30:56,179
systems are which is also something that
you just like the rock by code which is

387
00:30:56,179 --> 00:31:05,659
really popular ok so what's going to
talk about why billy just nobody wanted

388
00:31:05,659 --> 00:31:11,919
BSOD ok so source of instability what's
gonna cost things to be unstable can be

389
00:31:11,919 --> 00:31:16,399
corrupted structures in terms of things
like use after free despite me the

390
00:31:16,399 --> 00:31:20,669
number one most common source of
instability that kind of like a system

391
00:31:20,669 --> 00:31:23,940
structure weather be like out like
something on the sheep or some other

392
00:31:23,940 --> 00:31:27,769
type of object a windows like a linked
list of possibilities are endless

393
00:31:27,769 --> 00:31:31,629
there's a lot of things that could be
corrupted another source ends up being a

394
00:31:31,629 --> 00:31:35,299
token reference count so it when the
stockings are identifying the processing

395
00:31:35,299 --> 00:31:40,139
who owns it has a reference count so you
sit there and you exploit exploit

396
00:31:40,139 --> 00:31:44,919
multiple times and its blindly copying
hope this system token what happens is

397
00:31:44,919 --> 00:31:48,950
that when that elevated process exits
that system talking on the reference

398
00:31:48,950 --> 00:31:52,989
count on it is decrypted and because the
show could most likely to not increase

399
00:31:52,989 --> 00:31:57,369
the reference count once the reference
count reaches zero that token objects

400
00:31:57,369 --> 00:32:00,759
can be freed and that can cause
instability when there's references to

401
00:32:00,759 --> 00:32:08,519
dad that missing object you don't want
to cause instability and then returning

402
00:32:08,519 --> 00:32:12,889
control after elevation so after your
show code executes how'd you get control

403
00:32:12,889 --> 00:32:16,019
back to the attacker should continue
what they're doing they need to be able

404
00:32:16,019 --> 00:32:21,070
to watch the procession elevate
themselves somehow the heat actually do

405
00:32:21,070 --> 00:32:26,169
something with the process that they
were able to tell

406
00:32:26,169 --> 00:32:29,820
structures one of the nice things about
Windows is that there are certain

407
00:32:29,820 --> 00:32:35,049
objects there in a shared recent memory
between the user and the current address

408
00:32:35,049 --> 00:32:39,779
space so on his original memory that's
read only to the user laugh but you can

409
00:32:39,779 --> 00:32:44,850
actually walk through this and only the
right to it is included as read only to

410
00:32:44,850 --> 00:32:49,669
you as performance increase because
every time something is done in the

411
00:32:49,669 --> 00:32:54,580
context of the kernel the context has to
be switch neck very slow speed this up

412
00:32:54,580 --> 00:32:57,180
windows makes all of these structures in
this

413
00:32:57,180 --> 00:33:01,300
specific reached a memory available from
the usual a process that does computer

414
00:33:01,300 --> 00:33:07,270
read so if you're messing with is within
this region which you can actually do is

415
00:33:07,270 --> 00:33:11,110
you can book through this region to see
if perhaps you've been able to corrupt

416
00:33:11,110 --> 00:33:16,270
successfully orgy been able to like
allocated you can sign it look at that

417
00:33:16,270 --> 00:33:20,650
and see if you think that continuing the
exploitation process is going to cause

418
00:33:20,650 --> 00:33:24,750
instability or not and ideally if you
see that there is something wrong that

419
00:33:24,750 --> 00:33:29,140
you weren't able to corrupt structure in
just the right way you can bail out of

420
00:33:29,140 --> 00:33:35,130
the actual process required to trigger
some type of instability so this shared

421
00:33:35,130 --> 00:33:41,040
region it exists in portions prior to
Windows 7 however Windows seven thunders

422
00:33:41,040 --> 00:33:45,570
a pointer to it that's used 32 DLL that
actually tells you exactly where that

423
00:33:45,570 --> 00:33:50,030
region is that we know where that is she
can walk through that I'm some the

424
00:33:50,030 --> 00:33:54,690
objects are stored on there's the handle
table at like the Windows objects like

425
00:33:54,690 --> 00:33:58,500
this just active you and you can be
stored in there and they're not usually

426
00:33:58,500 --> 00:34:04,290
used by like you they are available from
UCL and one of the things that you can

427
00:34:04,290 --> 00:34:07,880
do if you are backing up structures on
this page that you can reach as you can

428
00:34:07,880 --> 00:34:12,020
back it up prior to starting your

429
00:34:12,020 --> 00:34:15,100
exploitation process you can take the
structures that you might end up

430
00:34:15,100 --> 00:34:19,420
corrupting and copy them over to another
recent memory and you can copy them back

431
00:34:19,420 --> 00:34:24,020
to anything happening as you like the
last step if you're up shellcode last

432
00:34:24,020 --> 00:34:27,360
few show could you copy that data back
you can usually avoid system instability

433
00:34:27,360 --> 00:34:30,880
from that perspective not always the
case though just once again that

434
00:34:30,880 --> 00:34:34,400
requires you to be able to read it from
the use of land before getting started

435
00:34:34,400 --> 00:34:39,870
up again once again like its structures
are be corrupted could actually two

436
00:34:39,870 --> 00:34:42,669
dozen her then

437
00:34:42,669 --> 00:34:48,760
system is going to die almost always
caused you don't have that 30 execution

438
00:34:48,760 --> 00:34:52,669
is very difficult to be able to clean up
after yourself in very much depend on

439
00:34:52,669 --> 00:34:56,399
what has two things are being corrupted
you access most the time the system is

440
00:34:56,399 --> 00:35:01,490
going to die so talking reference count
she becomes a problem when like

441
00:35:01,490 --> 00:35:05,849
exploited stealing to token and it's
executed multiple times they have that

442
00:35:05,849 --> 00:35:09,569
reference count on certain types of
things you can do to avoid that is we

443
00:35:09,569 --> 00:35:14,690
can use that out that ACL I technique
those used by I miss 30533 actually

444
00:35:14,690 --> 00:35:18,740
clear out the ACL overpasses inject into
actors then you're not messing with the

445
00:35:18,740 --> 00:35:23,710
tokens United adjusting the reference
count however if you're as you probably

446
00:35:23,710 --> 00:35:29,069
know as a pen test don't want to inject
into an already running system process

447
00:35:29,069 --> 00:35:33,990
doctor also cause system instability
processes that you inject into that

448
00:35:33,990 --> 00:35:36,160
something goes wrong that process dies

449
00:35:36,160 --> 00:35:42,559
probably gonna shut down it's not always
a good thing so duplicating the actual

450
00:35:42,559 --> 00:35:48,079
Hogan and duplicating it intelligently
see you can believe there's a a function

451
00:35:48,079 --> 00:35:51,890
in the kernel that you call to actually
duplicated token so that's going to you

452
00:35:51,890 --> 00:35:57,430
safely copy that token over into the new
process the elevator process exits that

453
00:35:57,430 --> 00:36:02,250
reference count is not going to be
corrupted you can back up the original

454
00:36:02,250 --> 00:36:09,369
token do what you need to do and then
restore it now this is very useful if

455
00:36:09,369 --> 00:36:13,569
you have a right what we're conditioned
to once again like you can trigger door

456
00:36:13,569 --> 00:36:18,780
code execution on demand in the context
of the kernel you can have two sets of

457
00:36:18,780 --> 00:36:22,700
shellcode you can have one that's going
to blindness deals that ok and after

458
00:36:22,700 --> 00:36:27,089
that executes get control back to the
attacker they can do what you need to do

459
00:36:27,089 --> 00:36:33,950
a system process you can do whatever it
is but before that process dies you swap

460
00:36:33,950 --> 00:36:38,579
out that shellcode michelle is gonna put
the original token back as you put that

461
00:36:38,579 --> 00:36:40,240
original talking back did

462
00:36:40,240 --> 00:36:44,579
process can exit out cleanly and it can
be that ritual tokens records count

463
00:36:44,579 --> 00:36:47,980
tickets deeper minutes you can put it
back if that's an option as well

464
00:36:47,980 --> 00:36:52,990
on desk exploit trigger twice that's not
always a good case depending on the

465
00:36:52,990 --> 00:36:56,230
class but it is that like right what
we're conditioned you can up the ante

466
00:36:56,230 --> 00:37:02,060
how dispatch table this is a viable
factor so return to chill so what do you

467
00:37:02,060 --> 00:37:07,300
do after after process after elevations
how to get back to you just want to get

468
00:37:07,300 --> 00:37:11,540
you elvin for reason you want to
actually do something with it I'm still

469
00:37:11,540 --> 00:37:18,200
find allocations you can actually return
control to turn execution back to it

470
00:37:18,200 --> 00:37:26,040
1112 stacked in assembly Microsoft uses
a standardized calling convention so

471
00:37:26,040 --> 00:37:30,720
what that means every time its function
is executed and returns it the calling

472
00:37:30,720 --> 00:37:34,990
commission is what dictates how the
registers are set up as a because it's a

473
00:37:34,990 --> 00:37:39,280
standardized calling convention almost
all the Microsoft code is going to

474
00:37:39,280 --> 00:37:44,850
utilize this one convention which means
that you can actually like unwind the

475
00:37:44,850 --> 00:37:48,130
stack of what that means you can
determine how many frames up the

476
00:37:48,130 --> 00:37:53,359
different functions are held like DDR /
how debuggers are going to be able to

477
00:37:53,359 --> 00:38:00,300
work using this because it's relatively
trivial to be able to determine if an

478
00:38:00,300 --> 00:38:04,400
address is a useful and address or
chrome and address basically can tell by

479
00:38:04,400 --> 00:38:08,170
looking at the numbers on which you can
do as you can unwind the stack and you

480
00:38:08,170 --> 00:38:13,040
can look at the cul-de-sac and see what
function is the last function before

481
00:38:13,040 --> 00:38:19,670
switch contacts into current land and
Richmond / before it goes back I'm

482
00:38:19,670 --> 00:38:25,400
switch you can do is you can actually
returned to NGK I system service post

483
00:38:25,400 --> 00:38:30,300
call which is one of the last addresses
in colonel and and what that's going to

484
00:38:30,300 --> 00:38:33,890
use its going to switch the context back
and it's very critical that you support

485
00:38:33,890 --> 00:38:39,380
the context i just want to get it you're
just back into usual and directly it to

486
00:38:39,380 --> 00:38:43,119
colonel is going to be an inconsistent
state and republican cause a lot of

487
00:38:43,119 --> 00:38:48,190
problems but if returned directly from
your show code is causing issues because

488
00:38:48,190 --> 00:38:52,490
the function is using object you
corrupted somehow or something like that

489
00:38:52,490 --> 00:38:58,520
it's not very comment you need a way to
turn execution after axing shellcode

490
00:38:58,520 --> 00:39:10,130
10 you so the chaos system service post
call is is is executed gorgeous which

491
00:39:10,130 --> 00:39:15,280
the context backs of set everything back
up so when the user can the usual and

492
00:39:15,280 --> 00:39:20,350
coat continue executing and use code is
where the attacker is it has full

493
00:39:20,350 --> 00:39:23,520
control so that's what they can do
whatever malicious things that they need

494
00:39:23,520 --> 00:39:30,230
after that I'm using this technique you
can also manipulate the registers upset

495
00:39:30,230 --> 00:39:35,440
up whatever return value you want to
have for that system on most the time

496
00:39:35,440 --> 00:39:39,260
people would probably the first instinct
would be to have it returned up success

497
00:39:39,260 --> 00:39:43,450
that may not necessarily be the best
idea because if you're calling you

498
00:39:43,450 --> 00:39:47,610
select how if it takes that the system
call completed successfully it's

499
00:39:47,610 --> 00:39:51,460
probably going to try to continue it
doesn't know any better if you told it

500
00:39:51,460 --> 00:39:55,000
works it's gonna think it works it's
going to continue and it continues it

501
00:39:55,000 --> 00:39:58,960
once again my trigger something
everything is in its state state that

502
00:39:58,960 --> 00:40:03,470
might cause like a BSOD on like us up
another system call so you actually

503
00:40:03,470 --> 00:40:06,420
might want to look at doing as an
auction is play around with the

504
00:40:06,420 --> 00:40:11,220
different errors that you can actually
use your returning error codes probably

505
00:40:11,220 --> 00:40:16,150
going to return control directly back to
the attacker without continuing audience

506
00:40:16,150 --> 00:40:23,620
using those corrupt structures so you
can see that but this is 32 shoko that

507
00:40:23,620 --> 00:40:27,840
demonstrates that up so it's just
basically unwind stack and compares the

508
00:40:27,840 --> 00:40:33,550
addresses of each one on some counts of
how deep it is and then calculates

509
00:40:33,550 --> 00:40:39,040
upcoming friend Steve the kernel
addresses are so we can jump back into

510
00:40:39,040 --> 00:40:47,170
the last frame system service post call
Jessica return back into that and the

511
00:40:47,170 --> 00:40:53,140
switch contacts back as you continue to
64 bit exploitation is starting to pick

512
00:40:53,140 --> 00:40:55,450
up there is actually the latest

513
00:40:55,450 --> 00:40:58,990
weirdoes local privilege escalation as
adding too much weight was just

514
00:40:58,990 --> 00:41:06,690
targeting Windows 8 point 1064 exploits
ODIs trying to pick up things is that on

515
00:41:06,690 --> 00:41:11,140
64 bit use this one calling convention
which is very nice on 32 bit Windows

516
00:41:11,140 --> 00:41:15,820
they had like standard call last call
this called for the most part I 64 bit

517
00:41:15,820 --> 00:41:20,490
systems on everything can be just the
one calling convention which is nice

518
00:41:20,490 --> 00:41:25,550
mentioned about 64 complicates things
I'm specifically resulting addresses

519
00:41:25,550 --> 00:41:28,870
caused a lot of those addresses that are
like that colonel executable executable

520
00:41:28,870 --> 00:41:34,110
64 bit extra load data into a third
shift process so you need to have

521
00:41:34,110 --> 00:41:40,560
different ways to resolve this address
is out and those who are looking at a

522
00:41:40,560 --> 00:41:45,260
value on a 32 bit system and for
whatever reason it doesn't work out or

523
00:41:45,260 --> 00:41:49,340
even if it does if you want to look at
64 bit system check for up for

524
00:41:49,340 --> 00:41:54,110
truncations if the pointer is actually
if the value is different that might

525
00:41:54,110 --> 00:41:55,850
mean different things for you

526
00:41:55,850 --> 00:42:01,380
indicates that if like an ass 14580
closing thoughts

527
00:42:01,380 --> 00:42:06,390
explanation is really flexible on
speaker attacker has correct solution

528
00:42:06,390 --> 00:42:10,700
ahead of time they can set things up to
have more pieces to deposit they can

529
00:42:10,700 --> 00:42:14,730
sort play with things they can massage
this system to such a way that it

530
00:42:14,730 --> 00:42:19,730
benefits that mean that the attack is
more likely to 60 also like made attack

531
00:42:19,730 --> 00:42:23,860
they can sometimes be able to check out
the structures are corrupted bailout

532
00:42:23,860 --> 00:42:26,600
things like that so it's a lot more
flexible than it is

533
00:42:26,600 --> 00:42:31,880
code execution typically decisions
complete black box has no way to know

534
00:42:31,880 --> 00:42:37,310
anything on there I'm additionally size
doesn't matter through local food

535
00:42:37,310 --> 00:42:41,590
escalation on the water the exploits in
windows or like full blown DLL so you

536
00:42:41,590 --> 00:42:45,710
don't have to worry about like size
restrictions like you do in a remote

537
00:42:45,710 --> 00:42:49,810
code execution vulnerability I can show
code will fit you have been tired yellow

538
00:42:49,810 --> 00:42:54,690
Lotus memory so that's that's not a
problem at all very nice personal

539
00:42:54,690 --> 00:42:57,830
hypothesis is correct but he's going to
stick around

540
00:42:57,830 --> 00:43:02,050
is one of those factors just because a
growing trend of my client side attacks

541
00:43:02,050 --> 00:43:06,309
whether he liked browser exploit your
job or / 20 days

542
00:43:06,309 --> 00:43:10,519
fishing fishing is definitely one of the
biggest set we're seeing a lot of 10

543
00:43:10,519 --> 00:43:15,670
testers are most likely using things
like empire and things like that you get

544
00:43:15,670 --> 00:43:20,549
compromised systems by fishing and when
they do that usually hopefully they

545
00:43:20,549 --> 00:43:24,160
don't already have a system
administrator access so this might be

546
00:43:24,160 --> 00:43:30,019
one of the techniques to elevate
themselves something you can do you want

547
00:43:30,019 --> 00:43:33,719
to continue on just practicing and
learning up there is a global driver

548
00:43:33,719 --> 00:43:38,819
does least get a view or else out there
was a really nice things about this

549
00:43:38,819 --> 00:43:41,789
drivers that when you're playing around
is that it does have two different

550
00:43:41,789 --> 00:43:47,170
portability classes broke out shortly
around the different ones I'm so I

551
00:43:47,170 --> 00:43:49,979
didn't close out with some things on
Windows 10

552
00:43:49,979 --> 00:43:53,390
everybody understands talks about this

553
00:43:53,390 --> 00:43:56,420
good up so

554
00:43:56,420 --> 00:44:00,660
gadget that I did mention is in the
exact same location so I can tell

555
00:44:00,660 --> 00:44:07,559
technique and assessment by executing
this gadget on it still is on it after

556
00:44:07,559 --> 00:44:11,979
it's in the same function but he can't
resolve that function but it does still

557
00:44:11,979 --> 00:44:12,979
exist

558
00:44:12,979 --> 00:44:17,929
one thing that comes very interesting is
that starting in 2010 20:32 case is

559
00:44:17,929 --> 00:44:22,619
actually broken out three different
parts not sure why my accepted a private

560
00:44:22,619 --> 00:44:26,779
was growing very large but a lot of the
windows vulnerabilities are in the

561
00:44:26,779 --> 00:44:32,640
Winter Kate assist drivers so very
interesting see how if that affects

562
00:44:32,640 --> 00:44:35,039
exploits moving forward

563
00:44:35,039 --> 00:44:39,029
I'm so I doubt I have any time for
questions are an incredibly late but

564
00:44:39,029 --> 00:44:43,359
there's a ton a fantastic resource out
there on this I have two full pages on

565
00:44:43,359 --> 00:44:46,410
some really great white papers they're
really talking everything I know about

566
00:44:46,410 --> 00:44:51,429
Windows corrects location so I want to
kind of share back my experiences with

567
00:44:51,429 --> 00:44:56,529
everybody in the tips and tricks that I
found that increase reliability exploits

568
00:44:56,529 --> 00:45:01,719
cause a text book lacks what
specifically is no good of sour apple

569
00:45:01,719 --> 00:45:05,920
says the first page that was the second
page

570
00:45:05,920 --> 00:45:12,940
ok and thank you everyone for waiting to
get these presentations are spending

571
00:45:12,940 --> 00:45:13,480
your afternoon

