1
00:00:00,000 --> 00:00:03,970
air so thanks for coming out this is
going off the rails on a crazy trying

2
00:00:03,970 --> 00:00:07,399
just a brief introduction for who we are

3
00:00:07,399 --> 00:00:12,320
my name's time I am a senior security
consultant at NCC group I used to be a

4
00:00:12,320 --> 00:00:19,070
Rails developer now I break rules out so
far less forgiving this is just a

5
00:00:19,070 --> 00:00:42,920
gesture I got a lot of real were great
man a little bit and show you our from

6
00:00:42,920 --> 00:00:49,120
NCC group headquartered in the UK were
both from the Chicago office just

7
00:00:49,120 --> 00:00:54,879
operates protesting domain services so
what's happened to the outline of what

8
00:00:54,879 --> 00:00:59,289
we're going to be going over here so I
just go over a brief introduction to

9
00:00:59,289 --> 00:01:03,870
Rails just gonna get happened to
authentication I'm gonna talk about

10
00:01:03,870 --> 00:01:09,080
authorization and then we're gonna do a
demo of a dynamic analysis tool that we

11
00:01:09,080 --> 00:01:16,070
can make testing authentication
authorization you see there so when you

12
00:01:16,070 --> 00:01:20,229
start off well as an NBC framework so
this is the kind of output that you'll

13
00:01:20,229 --> 00:01:23,460
start seeing for the directory structure
when you run the command rails new

14
00:01:23,460 --> 00:01:27,950
sample out in the main app directory
we're just going to go over the files

15
00:01:27,950 --> 00:01:31,720
that we kind of are going to care about
for this talk got the models directory

16
00:01:31,720 --> 00:01:36,970
of the models are gonna be mappings
objects to data to database rows and

17
00:01:36,970 --> 00:01:39,740
tables and then you got their views

18
00:01:39,740 --> 00:01:42,790
that's going to be the templates that
the client are actually gonna see when

19
00:01:42,790 --> 00:01:47,950
they go to your website and the
controllers that's a piece that you lose

20
00:01:47,950 --> 00:01:52,799
them on the piece together encounter get
everything ready to present to the user

21
00:01:52,799 --> 00:01:58,200
and the configuration directory you have
the right style this is going to be

22
00:01:58,200 --> 00:02:01,880
going to go over this a bit later but
this is a mapping of all the URLs in

23
00:02:01,880 --> 00:02:08,119
your application and to which controller
actions and maps to the junk file is

24
00:02:08,119 --> 00:02:11,009
going to be pretty much a list of
libraries

25
00:02:11,009 --> 00:02:16,420
external jams application uses it is
going to be interesting to see how are

26
00:02:16,420 --> 00:02:21,540
they using like devised or can can
repugnant the Gemfile dot lock is going

27
00:02:21,540 --> 00:02:25,140
to give you the specific versions of
those jams said then you can start

28
00:02:25,140 --> 00:02:30,370
looking for things like this there's a
specific version of the CMS available

29
00:02:30,370 --> 00:02:36,489
you can look into just found out like to
see what version are using so the rails

30
00:02:36,489 --> 00:02:40,439
way rails is kind of nice because it
provides a lot of protections for

31
00:02:40,439 --> 00:02:46,060
developers by defaults so here we have
the MVC architecture coming out again

32
00:02:46,060 --> 00:02:51,739
through these three different mechanisms
to Active Record is how the models are

33
00:02:51,739 --> 00:02:56,470
set up in Rails that's gonna give you
equal protection by default now there

34
00:02:56,470 --> 00:03:00,970
are ways to get that wrong so we have a
link there for Rails SQL I dot org it's

35
00:03:00,970 --> 00:03:05,190
a pretty comprehensive list of how you
can still get single injection in Rails

36
00:03:05,190 --> 00:03:11,450
applications we refer to that pretty
frequently action view is gonna buy the

37
00:03:11,450 --> 00:03:18,680
fall apart in code user and quote again
there's ways to do that wrong but if you

38
00:03:18,680 --> 00:03:23,410
just kind of used the framework as
intended and you're gonna get access

39
00:03:23,410 --> 00:03:24,760
protection by the fall

40
00:03:24,760 --> 00:03:29,160
action controller is gonna give you
things like sea surge protection by the

41
00:03:29,160 --> 00:03:36,299
fall through things like protect
reporters so just going to kind of start

42
00:03:36,299 --> 00:03:45,859
going into your authentication here so
you know it's like rails gives you a lot

43
00:03:45,859 --> 00:03:49,819
of scary reactions kind of out of the
box but we're kinda goes off the rails

44
00:03:49,819 --> 00:03:53,659
when it comes to authentication
authorization that's something the most

45
00:03:53,659 --> 00:03:56,940
you know reasonable applications are
going to need the concept of the user

46
00:03:56,940 --> 00:03:59,889
and what the prediction model is it
things like that but there's really not

47
00:03:59,889 --> 00:04:05,260
a lot of native sport in Rails 44 either
so the first point is that

48
00:04:05,260 --> 00:04:08,419
authentication authorization or two
distinctly different things rates

49
00:04:08,419 --> 00:04:11,780
authentication is focused on who is the
user just identifying them in an

50
00:04:11,780 --> 00:04:13,550
authorization is you know

51
00:04:13,550 --> 00:04:17,840
what permissions they're allowed
oftentimes I see that people mix the two

52
00:04:17,840 --> 00:04:23,560
together into a single you know and that
can sometimes be a little bit of the

53
00:04:23,560 --> 00:04:28,510
source attribution identification from
all that you really get out of the box

54
00:04:28,510 --> 00:04:34,150
with Rails is you know basic cost I just
off which you probably don't want to use

55
00:04:34,150 --> 00:04:40,490
population from there's really nothing
native but there are some helper methods

56
00:04:40,490 --> 00:04:45,410
of things that we'll talk about that can
help so you're kinda last 22 you know

57
00:04:45,410 --> 00:04:49,450
come up with your own authentication
system so you have two options in the

58
00:04:49,450 --> 00:04:53,070
first is to write your own
authentication system there are some

59
00:04:53,070 --> 00:04:56,820
pros and cons to that approach you know
you're kind of reinventing the wheel and

60
00:04:56,820 --> 00:05:01,050
doing things that people have done
before you know so you're kinda likely

61
00:05:01,050 --> 00:05:05,260
to fall into some common pitfalls that
we can talk about there's also a lot

62
00:05:05,260 --> 00:05:09,740
more to authentication than just
verifying the user is and a lot of times

63
00:05:09,740 --> 00:05:15,590
people don't think about something other
ancillary futures in Rails since 31

64
00:05:15,590 --> 00:05:19,210
there's a helper method called has
secure password will talk about it a

65
00:05:19,210 --> 00:05:22,660
little bit more detail but I can make it
easy to get kind of a simple

66
00:05:22,660 --> 00:05:25,640
authentication function built pretty
quickly

67
00:05:25,640 --> 00:05:30,130
your other option is to you to take it
off the shelf Janet someone's written

68
00:05:30,130 --> 00:05:37,490
open-source you know and use that again
pros and cons so vulnerabilities in

69
00:05:37,490 --> 00:05:42,130
Jamestown to be really attractive you
know two attackers because their common

70
00:05:42,130 --> 00:05:47,240
across a lot of different applications
but on the other hand though you know

71
00:05:47,240 --> 00:05:51,140
welcome for that reason you know you you
can't have two you make sure that you

72
00:05:51,140 --> 00:05:55,150
manager dependencies and you know and
keep updated as new versions are

73
00:05:55,150 --> 00:06:00,230
released and bug fixes things like that
you're still gonna have to do some work

74
00:06:00,230 --> 00:06:03,900
to integrate to john Lynch your own
application and Anderson caveats to that

75
00:06:03,900 --> 00:06:11,840
cautious but on the plus side the core
code in you know popular authentication

76
00:06:11,840 --> 00:06:15,470
Jones is generally pretty well reviewed
you know there's a lot of a lot of eyes

77
00:06:15,470 --> 00:06:20,870
on it sort of the many guys make small
bug shellow theory and then you know as

78
00:06:20,870 --> 00:06:24,590
the community learn new things on her
abilities are found their fixed

79
00:06:24,590 --> 00:06:28,690
you know over time the whole thing gets
a little bit better as a result of that

80
00:06:28,690 --> 00:06:36,150
some of the common authentication James
device is really the the big one

81
00:06:36,150 --> 00:06:41,050
you know it's safe to say that the vast
majority of Rails applications are using

82
00:06:41,050 --> 00:06:48,990
devised for for authentication the
author is you know I know wats consumer

83
00:06:48,990 --> 00:06:53,130
so if you want to do things like you
know a lot of users to authenticate with

84
00:06:53,130 --> 00:06:55,440
Facebook or Google or something like
that

85
00:06:55,440 --> 00:07:00,980
got this really you know the common one
there there's some some hooks in devices

86
00:07:00,980 --> 00:07:05,330
that allow you to call back Tom not so
that you can work together so you can

87
00:07:05,330 --> 00:07:08,460
have the ideas for your standard you
know username password authentication

88
00:07:08,460 --> 00:07:13,020
and then have it call I'm not
automatically you know if you're doing

89
00:07:13,020 --> 00:07:19,440
you know authentication doorkeeper the
third one there is is a little bit

90
00:07:19,440 --> 00:07:23,510
different cuz that's a lot provider so
instead of allowing users to

91
00:07:23,510 --> 00:07:27,880
authenticate with Facebook or Google
allows you to come to the provider in

92
00:07:27,880 --> 00:07:35,450
other applications can seem that logic
is you know one of the other popular

93
00:07:35,450 --> 00:07:40,260
John's it's not nearly as common and
it's a little bit different and it's a

94
00:07:40,260 --> 00:07:46,200
model that kind of blends sessions with
authentication rather than implementing

95
00:07:46,200 --> 00:07:49,370
it was part of the user model so it's a
little bit unusual and I don't see it

96
00:07:49,370 --> 00:07:54,910
quite as often as you know devised but
it's it's worth noting there's obviously

97
00:07:54,910 --> 00:07:59,480
you know any number of other gems but
these are kind of the really popular

98
00:07:59,480 --> 00:08:04,760
common ones that say a lot when it comes
to writing your own authentication

99
00:08:04,760 --> 00:08:08,920
there's a lot of a lot of arguments that
people commonly make this is a quote

100
00:08:08,920 --> 00:08:14,480
from from the rails tutorial book is
also available freely on the internet so

101
00:08:14,480 --> 00:08:19,840
it's really popular you know
introduction to writing Rails apps and

102
00:08:19,840 --> 00:08:24,640
it's you know it's kind of the Bible of
how people code rails but they say a

103
00:08:24,640 --> 00:08:28,360
couple of things here about writing an
authentication system

104
00:08:28,360 --> 00:08:32,560
authentication requires extensive
customization modifying a third party

105
00:08:32,560 --> 00:08:37,349
product is more work than off the shelf
systems can be black boxes and these are

106
00:08:37,349 --> 00:08:40,579
things that we hear a lot when we talk
to clients and their describing their

107
00:08:40,579 --> 00:08:44,769
approach to authentication and why they
chose to write their own I don't really

108
00:08:44,769 --> 00:08:49,149
I don't agree with these arguments for
the most part to say that an off the

109
00:08:49,149 --> 00:08:52,880
shelf system as a black box can
certainly be true but that's just a true

110
00:08:52,880 --> 00:08:58,959
a Rails itself as it is you know of the
third party authentication jam as far as

111
00:08:58,959 --> 00:09:04,730
being more work to write to integrated
than you know write your own that that

112
00:09:04,730 --> 00:09:09,910
to me is just flat out false you know we
did some work to do integrated with your

113
00:09:09,910 --> 00:09:15,589
application but you know it's it's it's
not nearly as much work as you know is

114
00:09:15,589 --> 00:09:19,120
writing a system from scratch and making
sure that you get all the little details

115
00:09:19,120 --> 00:09:24,790
and nuances right but when people talk
about you know writing their own

116
00:09:24,790 --> 00:09:31,230
invention has your password earlier and
that's a really useful helper method so

117
00:09:31,230 --> 00:09:35,079
this is kind of an example of how you
use it we've got a user model that's got

118
00:09:35,079 --> 00:09:39,750
a really simple scheme up with two
strains for name and password I just and

119
00:09:39,750 --> 00:09:46,440
you know in that model you just include
a secure password what that does is it

120
00:09:46,440 --> 00:09:52,339
allows you to do things like this you
can call you know user New to create a

121
00:09:52,339 --> 00:09:57,050
new user pass it a name password
password confirmation you'll notice that

122
00:09:57,050 --> 00:10:00,920
the the the schema doesn't actually have
the password or password confirmation

123
00:10:00,920 --> 00:10:06,120
feels those are provided by the has
secure password helper which

124
00:10:06,120 --> 00:10:09,940
transparently then uses be tripped in
the background

125
00:10:09,940 --> 00:10:13,440
taking the password password
confirmation making sure they match

126
00:10:13,440 --> 00:10:18,410
decrypting and storing a digest securely
so right there you've got a pretty

127
00:10:18,410 --> 00:10:24,920
decent you know password storage system
with you know one line of code you know

128
00:10:24,920 --> 00:10:28,540
then you say even though you know say
the user returns true

129
00:10:28,540 --> 00:10:34,460
you know you're also as I mentioned the
digester stored with the crypt so you

130
00:10:34,460 --> 00:10:39,210
know reasonably secure password storage
mechanism I wrote a really long blog

131
00:10:39,210 --> 00:10:44,370
post talking about you know kind of my
thoughts on your password storage so if

132
00:10:44,370 --> 00:10:45,700
you're interested in and more

133
00:10:45,700 --> 00:10:50,000
yeah there's a link to that some of the
other things you get with that has

134
00:10:50,000 --> 00:10:56,640
secure password authentication method
that you get you past the password to

135
00:10:56,640 --> 00:11:02,250
the user models authenticate my third
and it returns false if it's wrong if

136
00:11:02,250 --> 00:11:06,380
it's correct it returns the user model
itself so you've got a really simple

137
00:11:06,380 --> 00:11:12,530
authentication function you can also do
things you know since you're inheriting

138
00:11:12,530 --> 00:11:16,430
the model inherits from Active Record
you get all your Active Record you'll

139
00:11:16,430 --> 00:11:23,210
find her so you can go to a query on the
user root last 20 find the user by name

140
00:11:23,210 --> 00:11:26,610
and I call authenticate and if the
password matches it's going to return

141
00:11:26,610 --> 00:11:34,300
the corresponding user jack but there's
still a lot more that you need to do you

142
00:11:34,300 --> 00:11:36,730
know storing credentials and
authenticating is really just an

143
00:11:36,730 --> 00:11:40,910
authentication function it's not really
an authentication system so you're

144
00:11:40,910 --> 00:11:43,330
definitely gonna have to think about
things like you know session management

145
00:11:43,330 --> 00:11:48,180
password complexity requirements what
you gonna do in the case of a lost or

146
00:11:48,180 --> 00:11:53,190
forgotten password and that's a really
really big one depending on the

147
00:11:53,190 --> 00:11:57,010
application you might have to deal with
things like API Tolkien's multi-factor

148
00:11:57,010 --> 00:12:04,530
two factor auth earlier so this is
really just the beginning so let's talk

149
00:12:04,530 --> 00:12:09,160
about session management is being kind
of the next thing you need to do so

150
00:12:09,160 --> 00:12:13,200
sessions are basically the idea of
exchanging user credentials for a cookie

151
00:12:13,200 --> 00:12:17,900
for Tolkien and then using that talking
to identify the user and subsequent

152
00:12:17,900 --> 00:12:21,010
requests are not changing credentials
and every request

153
00:12:21,010 --> 00:12:26,280
step 3 you there is kind of important
than people forget about this a lot that

154
00:12:26,280 --> 00:12:29,080
you need to invalidate the token at some
point whether it's when the user logs

155
00:12:29,080 --> 00:12:35,150
out or you know after some period of
time when it's just expired and in Rails

156
00:12:35,150 --> 00:12:39,730
there's a couple of different approaches
to wear session state is stored spent

157
00:12:39,730 --> 00:12:44,760
some time here talking about that the
current default is encrypted key

158
00:12:44,760 --> 00:12:50,000
sessions on recent versions of rails so
we gotta an example here what kind of

159
00:12:50,000 --> 00:12:55,420
walk through the flow you got a simple
sign in page user comes in provides

160
00:12:55,420 --> 00:13:02,650
their you know their user IDs they give
their password sent to the application

161
00:13:02,650 --> 00:13:07,670
that looks up the user by there I D
authenticate them using that password

162
00:13:07,670 --> 00:13:13,680
assuming thats correct the user model is
is returned and there's a session object

163
00:13:13,680 --> 00:13:18,640
created on the server side with
encrypted cookie sessions that session

164
00:13:18,640 --> 00:13:24,660
object is then serialize encrypted and
presented to the user as their as their

165
00:13:24,660 --> 00:13:29,100
cookies to the important thing here is
that the cookie that the user has is

166
00:13:29,100 --> 00:13:35,180
literally an encrypted serialized object
that servers gonna be used to create

167
00:13:35,180 --> 00:13:44,340
that session the next option that is
database back sessions so we got kind of

168
00:13:44,340 --> 00:13:50,200
similar flow but in this case there's no
database on the server again the user's

169
00:13:50,200 --> 00:13:53,710
going to provide their password
indicates that password

170
00:13:53,710 --> 00:13:57,840
creates a session object that's then
stored in the database

171
00:13:57,840 --> 00:14:04,730
there's also then cookie tour alongside
that session object and then a cookie

172
00:14:04,730 --> 00:14:09,960
value is provided to users that's just a
random token that that allows the

173
00:14:09,960 --> 00:14:13,780
application to look up that session
object in its own database so on

174
00:14:13,780 --> 00:14:18,440
subsequent visits the users can provide
that that random tote in a database

175
00:14:18,440 --> 00:14:25,120
query retreat this action from the
database so there's pros and cons of

176
00:14:25,120 --> 00:14:27,889
each of these approaches

177
00:14:27,889 --> 00:14:36,319
on the database front the user cookie is
just a random value as I mentioned you

178
00:14:36,319 --> 00:14:40,829
know on the serialize cookies it's it's
an encrypted serialized object

179
00:14:40,829 --> 00:14:45,759
italicized the database column because I
feel like that's a win for database

180
00:14:45,759 --> 00:14:49,209
options there's a little bit less you
know

181
00:14:49,209 --> 00:14:54,559
attack surface they're exposed moving on
when we talk about like how we're going

182
00:14:54,559 --> 00:15:00,029
to revoke the session with database
actions you know you can just delete

183
00:15:00,029 --> 00:15:03,079
this action from the database and it's
gone

184
00:15:03,079 --> 00:15:07,439
cookie sessions it's a little bit more
complicated because you know once that

185
00:15:07,439 --> 00:15:12,889
that values given to the user you really
can't can provoke it so you have to have

186
00:15:12,889 --> 00:15:19,699
things like you know a time stamp on it
that expire or some other token included

187
00:15:19,699 --> 00:15:26,089
in that session male on both cases
you're going to need to be conscious of

188
00:15:26,089 --> 00:15:31,290
having a maximum lifetime to your
sessions neither won by default is gonna

189
00:15:31,290 --> 00:15:38,009
do that so we'll talk about how to get
out a little bit I mentioned the attack

190
00:15:38,009 --> 00:15:42,669
surface again I think this is a big win
for database options the only way to

191
00:15:42,669 --> 00:15:47,410
really attack that is to steal or a
numerate that random told in with the

192
00:15:47,410 --> 00:15:51,559
serialize sessions you've still got that
option you also have the possibility of

193
00:15:51,559 --> 00:15:57,949
you know cryptographic attacks against
against the session object itself you

194
00:15:57,949 --> 00:16:02,660
know you've got a higher probability of
longer internet live sessions cos cos of

195
00:16:02,660 --> 00:16:08,519
revocation issues if the encryption key
is ever exposed its fatal

196
00:16:08,519 --> 00:16:13,789
you know then I can create my own
sessions arbitrarily and the application

197
00:16:13,789 --> 00:16:18,919
will honor them and then there's also
some issues surrounding the the

198
00:16:18,919 --> 00:16:22,819
serialization and I kinda relates to
some of the the rails deserialization

199
00:16:22,819 --> 00:16:28,470
issues for a couple years ago we will
talk a little bit about that too

200
00:16:28,470 --> 00:16:33,050
the overhead here is kind of a big
reason that people tend to favor

201
00:16:33,050 --> 00:16:39,370
encrypted cookie sessions with database
sessions on you to request you gotta do

202
00:16:39,370 --> 00:16:43,570
a query to retrieve that object from the
database so it can identify the context

203
00:16:43,570 --> 00:16:48,400
and user session so there's a lot of
overhead involved in that caching can

204
00:16:48,400 --> 00:16:53,140
help you know I've heard of people doing
things like like a number of databases

205
00:16:53,140 --> 00:16:58,280
to you know to try and reduce the
overhead and active record in recent

206
00:16:58,280 --> 00:17:02,330
years and the rails it had a lot of
caching and performance improvements so

207
00:17:02,330 --> 00:17:05,610
I don't think that the overhead is is
all that bad except I'm really large

208
00:17:05,610 --> 00:17:11,630
applications but for this reason
database options are really are no

209
00:17:11,630 --> 00:17:15,220
longer included in Rails by defaulters a
separate Jen that you need to include

210
00:17:15,220 --> 00:17:19,790
and I'm a little bit I'm a little bit
disappointed by that cuz you know

211
00:17:19,790 --> 00:17:23,530
whether our performance issues on large
applications I feel like you know

212
00:17:23,530 --> 00:17:27,710
there's a small percentage of times when
that's really a practical concern

213
00:17:27,710 --> 00:17:32,490
developers and so removing it you know
from even being an option in the

214
00:17:32,490 --> 00:17:36,260
framework seems a little a little
heavy-handed

215
00:17:36,260 --> 00:17:41,200
cryptically sessions you've still got
some overhead which is validating the

216
00:17:41,200 --> 00:17:45,210
cryptographic signatures you know
decrypting the data and a juicy

217
00:17:45,210 --> 00:17:50,700
realizing it I haven't really done the
measurements to compare the two directly

218
00:17:50,700 --> 00:17:54,430
so I'm going to trust the rails team
when they say that database options are

219
00:17:54,430 --> 00:17:59,420
are more overhead but I kind of question
exactly how much at some point I'll

220
00:17:59,420 --> 00:18:07,500
probably do the math ok so we talked
about having a couple of different types

221
00:18:07,500 --> 00:18:11,900
of sessions those are going to configure
it in your session store initializer

222
00:18:11,900 --> 00:18:17,110
file photo lineup looks a little bit
like this you'll know if they're on on

223
00:18:17,110 --> 00:18:20,640
this particular one we've got the
session side has cookies store and I

224
00:18:20,640 --> 00:18:25,450
bolded the expire after setting that's
not there by default so if you don't

225
00:18:25,450 --> 00:18:29,410
have that there are sections are gonna
live forever so that that's one thing

226
00:18:29,410 --> 00:18:32,570
when you're assessing applications you
want to look at you know is there is

227
00:18:32,570 --> 00:18:36,430
there a session timeout obviously did
you that black box just you know just

228
00:18:36,430 --> 00:18:37,710
had a session active

229
00:18:37,710 --> 00:18:41,990
and wait awhile and see if it still
honored but it's a lot easier to just

230
00:18:41,990 --> 00:18:49,520
look at the source so such an extra time
has to be manually configure that could

231
00:18:49,520 --> 00:18:53,190
restore setting is where you would you
would change your session storage type

232
00:18:53,190 --> 00:18:56,799
if you want to use Active Record Store
you do still have to include the German

233
00:18:56,799 --> 00:19:05,220
the application to to support that ok so
with cookie sessions then going also had

234
00:19:05,220 --> 00:19:10,110
a setting in secret Seattle that
contains your secret key base that's the

235
00:19:10,110 --> 00:19:14,090
encryption key that used for encrypting
those sessions so you wanna make sure

236
00:19:14,090 --> 00:19:19,169
that that's you know a fairly fairly
secure value and you know let it rain

237
00:19:19,169 --> 00:19:26,630
secret if instead you have a secret
token you don't get encryption at all

238
00:19:26,630 --> 00:19:32,760
what you end up getting his is just
encoded serialize session so that's kind

239
00:19:32,760 --> 00:19:35,890
of interesting because if they're
storing sensitive data within the

240
00:19:35,890 --> 00:19:40,260
session object you can take that could
you just basically portico it and you

241
00:19:40,260 --> 00:19:46,299
know you've got a serialized object so
you can get a little bit of exposure of

242
00:19:46,299 --> 00:19:53,669
sensitive information that way within
the session store initializer you also

243
00:19:53,669 --> 00:19:57,429
have a sudden here that determines what
the serialization method is for that for

244
00:19:57,429 --> 00:20:03,710
that session currently its defaults to
JSON this is the case since rails for

245
00:20:03,710 --> 00:20:11,110
one prior to that it defaulted to
marshal marshal load was the vector for

246
00:20:11,110 --> 00:20:18,470
the the rails gamble deserialization
palms of 2013 I think it was so if it's

247
00:20:18,470 --> 00:20:25,049
up to marshal and I know the encryption
key I can craft a malicious session

248
00:20:25,049 --> 00:20:28,520
object that when deserialize going to
execute arbitrary code on the server

249
00:20:28,520 --> 00:20:31,630
it's not quite as bad as the original
doctor because you have to have that

250
00:20:31,630 --> 00:20:35,610
encryption key but that over leaks not
only democrats session objects I can

251
00:20:35,610 --> 00:20:42,970
also get code execution on the server
this hybrid serializer is kind of a and

252
00:20:42,970 --> 00:20:47,880
operate path so in hybrid mode at the
applications gonna issue JSON serializer

253
00:20:47,880 --> 00:20:50,840
cookies but it's going to honor either
JSON

254
00:20:50,840 --> 00:20:55,650
Marshall serialize could use so it's
meant to allow you to migrate

255
00:20:55,650 --> 00:20:59,570
transparently i've seen a number of
applications where people turned on

256
00:20:59,570 --> 00:21:04,450
hybrid mode tattoo you know to
facilitate the operator and just left it

257
00:21:04,450 --> 00:21:09,980
and you still have the vector therefore
RCE where applications not issuing

258
00:21:09,980 --> 00:21:15,540
Marshall serialize cookies if an honors
and it's kind of interesting you really

259
00:21:15,540 --> 00:21:19,280
don't need to have that hybrid mode for
very long as if you have a maximum

260
00:21:19,280 --> 00:21:24,210
lifetime configured on your sessions
you're only gonna need to honor the

261
00:21:24,210 --> 00:21:27,880
legacy Marshall sessions for the
duration of your social life time Tues

262
00:21:27,880 --> 00:21:32,120
at that point they're all expired your
number to see him again so it's really

263
00:21:32,120 --> 00:21:35,730
the sort of thing that you probably need
to have you know I have enabled in

264
00:21:35,730 --> 00:21:40,470
production for a couple hours but a lot
of times people just you know don't go

265
00:21:40,470 --> 00:21:43,470
back and so that's something to watch
out for

266
00:21:43,470 --> 00:21:49,990
we talked a little bit mentioned lost
forgotten password recovery is kind of

267
00:21:49,990 --> 00:21:54,420
difficult there's a lot of different
approaches people people you know used

268
00:21:54,420 --> 00:21:59,030
to handle s most of them are kinda poor
in one way or the other

269
00:21:59,030 --> 00:22:03,520
there's really only one approach that
that I'm fond of and that's this process

270
00:22:03,520 --> 00:22:08,520
generate a random Tolkien you wanna make
sure that that's generated with a

271
00:22:08,520 --> 00:22:13,820
cryptographically secure random number
generator so it's not predictable send

272
00:22:13,820 --> 00:22:17,560
that to all stored in the user object
along with the timestamp of when it was

273
00:22:17,560 --> 00:22:18,730
created

274
00:22:18,730 --> 00:22:23,340
send it to the user our fan from the
application so this is the usual you

275
00:22:23,340 --> 00:22:26,280
know you get an email with a link that
says click here to reset your password

276
00:22:26,280 --> 00:22:32,940
you don't the user's I'm gonna visit the
site that Tolkien applications go look

277
00:22:32,940 --> 00:22:39,110
up the user by that token verify that
that Tolkien you know the time stamp on

278
00:22:39,110 --> 00:22:44,020
a token it was stored is within an
expiry time you know what these things

279
00:22:44,020 --> 00:22:49,100
to be valid forever you know if I issue
a result ok you know then forget about

280
00:22:49,100 --> 00:22:55,370
it never going to reset my token you
don't want that's it and you know days

281
00:22:55,370 --> 00:23:00,300
or weeks later and then you change the
user's password and delete the token

282
00:23:00,300 --> 00:23:03,149
that's another caveat

283
00:23:03,149 --> 00:23:08,200
that people often forget you know after
password been reset you want to leave

284
00:23:08,200 --> 00:23:14,559
that so that someone else can reset it
again using same token machine cures and

285
00:23:14,559 --> 00:23:19,019
talk about devise a little bit mentioned
that that's the way that you know the

286
00:23:19,019 --> 00:23:22,979
vast majority of applications are gonna
gonna handle authentication

287
00:23:22,979 --> 00:23:26,669
example here about user model that was
generated by devised when it installed

288
00:23:26,669 --> 00:23:32,399
and it's really simple and got to devise
helper that includes a number symbols

289
00:23:32,399 --> 00:23:38,979
represent different modules that allows
has to include various functionality the

290
00:23:38,979 --> 00:23:44,099
names here are pretty pretty self
explanatory explaining what they do you

291
00:23:44,099 --> 00:23:47,499
know register a bowl allows a user to
anonymously visit the site and create a

292
00:23:47,499 --> 00:23:53,339
new account YouTube e-sata cable was
kind of self-confidence it's the main

293
00:23:53,339 --> 00:24:00,039
authentication mechanism no recoverable
allows for a password reset flow when

294
00:24:00,039 --> 00:24:04,489
when a password forgotten there's a
number of other modules here that are

295
00:24:04,489 --> 00:24:09,399
common to doubt that just aren't enabled
by default you know so too so it's kinda

296
00:24:09,399 --> 00:24:12,529
nice that you can just enable and
disable these modules and get different

297
00:24:12,529 --> 00:24:19,690
different components of functionality
once you've got a vice installed if you

298
00:24:19,690 --> 00:24:23,839
look at your routes are be you're going
to see a line that's device for users

299
00:24:23,839 --> 00:24:29,409
just that one line this calls this
device helper on your user model the

300
00:24:29,409 --> 00:24:33,099
effect of that is going to be if you run
rake routes and see what your actual

301
00:24:33,099 --> 00:24:40,749
routes that the application has no has
configured are you see this so you've

302
00:24:40,749 --> 00:24:46,549
got a whole number of different routes
with you know various methods and these

303
00:24:46,549 --> 00:24:51,059
do things like you know give the user a
sign in page except their credentials

304
00:24:51,059 --> 00:24:56,330
and authenticate them you know presented
a password reset slow so it without a

305
00:24:56,330 --> 00:25:00,800
lot of work you know you get a lot of
functionality

306
00:25:00,800 --> 00:25:06,820
so then tying devised to the application
you've got a bunch of helpers provided

307
00:25:06,820 --> 00:25:13,730
the main thing is this controller filter
implemented as a book or action in the

308
00:25:13,730 --> 00:25:17,480
application controller that all the
other controllers inherit from and

309
00:25:17,480 --> 00:25:20,160
that's really easy way to just say ok
across the application for an

310
00:25:20,160 --> 00:25:25,850
authenticated users will talk a little
bit about that relations side the other

311
00:25:25,850 --> 00:25:31,160
helpers are you know pretty well named
user signed in other users sign in or

312
00:25:31,160 --> 00:25:36,470
not current user user session return the
current user and the user session

313
00:25:36,470 --> 00:25:42,570
current user is really the big 12 you'll
see most of your your queries are gonna

314
00:25:42,570 --> 00:25:47,780
be built from that objects the root
device has a bit of a security history

315
00:25:47,780 --> 00:25:53,310
this is a snippet of some of the the
recent versions that have had security

316
00:25:53,310 --> 00:26:00,820
relevant changes the key point here is
the most of these are really tiny minor

317
00:26:00,820 --> 00:26:07,090
flaws and all that sort of things that
are really easy to get wrong but over

318
00:26:07,090 --> 00:26:07,700
time

319
00:26:07,700 --> 00:26:13,340
communities kind of benefiting from from
you know incentivize the true there are

320
00:26:13,340 --> 00:26:19,750
bolded going to talk about over the next
couple of slides tournage back of of

321
00:26:19,750 --> 00:26:25,110
recent tokens now instead of the
probability of the token itself and then

322
00:26:25,110 --> 00:26:29,520
there was a type confusion vulnerability
gonna spend a couple of slides talking

323
00:26:29,520 --> 00:26:34,000
about this this is a really interesting
vulnerability was disclosed in 2013 by

324
00:26:34,000 --> 00:26:39,600
your ensign so let's look at how that
works

325
00:26:39,600 --> 00:26:45,650
Rothley devices password reset function
is not look something like this this is

326
00:26:45,650 --> 00:26:49,880
kinda pseudocode its across a number of
different you know different classes and

327
00:26:49,880 --> 00:26:54,160
slap more complicated but the basic idea
of it is that you know when this reset

328
00:26:54,160 --> 00:26:58,790
method is called we're going to get the
user's reset password token from the

329
00:26:58,790 --> 00:27:03,670
parameters look up the user object
associated with that Tolkien and then

330
00:27:03,670 --> 00:27:09,190
you know it exists were gonna change the
password to the new value with that in

331
00:27:09,190 --> 00:27:09,950
mind

332
00:27:09,950 --> 00:27:18,250
the bug actually stems from bicycles
equality operators so this is really not

333
00:27:18,250 --> 00:27:24,429
what I would expect you know when you do
a query where the injured one equals a

334
00:27:24,429 --> 00:27:28,240
strain that starts with one it's
actually true

335
00:27:28,240 --> 00:27:34,830
gonna return data similarly the integers
euro is going to be equivalent to any

336
00:27:34,830 --> 00:27:41,570
string that begins with a non-injury
character i dont i dont get their site

337
00:27:41,570 --> 00:27:46,029
have no idea why this is the case but
that's how am I supposed equality works

338
00:27:46,029 --> 00:27:50,370
and it doesn't seem like they're likely
to change it because it's gonna break

339
00:27:50,370 --> 00:28:00,289
all kinds of things that they do but
that's really the root of the Pug yeah

340
00:28:00,289 --> 00:28:11,730
right like it's it's it's so late but
anyway how to exploit this in Rails in

341
00:28:11,730 --> 00:28:19,450
devised in Rails there's this this has
called params that's usually a bunch of

342
00:28:19,450 --> 00:28:24,549
strings that are the user's URL
parameters so if you've got a query with

343
00:28:24,549 --> 00:28:30,389
rhubarb is buys you get a Brands Hatch
where you know who it says bar and so on

344
00:28:30,389 --> 00:28:36,440
a few passengers and the second example
there it's interesting to note that

345
00:28:36,440 --> 00:28:40,090
those are quoted so they're they're
strength as you know even though it's an

346
00:28:40,090 --> 00:28:45,620
integer value it's it's handled as a
string in prams hash we don't need

347
00:28:45,620 --> 00:28:49,519
strings here we need to get any jurors
for that but that bicycle confusion

348
00:28:49,519 --> 00:28:53,309
there some rails magic the let's do that

349
00:28:53,309 --> 00:29:01,190
rails will when it receives a post with
a an XML or JSON body is going to

350
00:29:01,190 --> 00:29:06,529
automatically parse that body and
typecast things as analogies on formats

351
00:29:06,529 --> 00:29:07,820
dictate

352
00:29:07,820 --> 00:29:14,910
XML is no longer supported out of the
box in 40 and later there's a suffrage

353
00:29:14,910 --> 00:29:18,700
and to enable it but that was kinda
disabled again as a result of the

354
00:29:18,700 --> 00:29:26,270
realization bones JSON however is still
supported automagically out of the box

355
00:29:26,270 --> 00:29:36,290
on all versions rails so if we decide to
post with the XML example like this you

356
00:29:36,290 --> 00:29:40,610
know with with an object to his you'll
notice we specify the type is an integer

357
00:29:40,610 --> 00:29:45,720
then we're gonna get back Rams hash
where is the integer ones now we've got

358
00:29:45,720 --> 00:29:52,130
injured in the crash that killed the
first stop similarly with JSON represent

359
00:29:52,130 --> 00:29:57,020
a sign like this in just don't quote the
reset password took in you know it's

360
00:29:57,020 --> 00:30:02,270
gonna come through in Jersey now we've
got 20 so if we send something like this

361
00:30:02,270 --> 00:30:07,190
to the application what we're gonna end
up with these brands hash you know where

362
00:30:07,190 --> 00:30:10,380
we control password password
confirmation result token is the integer

363
00:30:10,380 --> 00:30:15,970
0 as a result of that the ActiveRecord
period gonna do I find my token with the

364
00:30:15,970 --> 00:30:19,970
integer 0 is the argument of records
that could build a seat will guarantee

365
00:30:19,970 --> 00:30:25,990
that you know that looks like this we're
talking equals integer 0 and the result

366
00:30:25,990 --> 00:30:31,600
of that is that we're gonna get back the
User objects of the first outstanding

367
00:30:31,600 --> 00:30:36,750
token and there's a little bit because
due to the comparison is the first

368
00:30:36,750 --> 00:30:41,980
outstanding token that starts with a
nine incher but in most cases you know

369
00:30:41,980 --> 00:30:45,200
your tokens are generally not gonna have
any injuries or if they do they're only

370
00:30:45,200 --> 00:30:53,680
to be you know one or two digits before
it you know before its character so

371
00:30:53,680 --> 00:30:57,640
that's kind of interesting has now we've
got you know we got a user objects from

372
00:30:57,640 --> 00:31:01,610
the password reset tool that we didn't
know that's the core of the

373
00:31:01,610 --> 00:31:06,950
vulnerability I wrote him a display
module for this couple years ago the

374
00:31:06,950 --> 00:31:12,390
Metasploit module will loop through and
you know monitor the response codes to

375
00:31:12,390 --> 00:31:16,640
clear out any existing tokens the
benefit of doing that is that then we

376
00:31:16,640 --> 00:31:17,330
can sign up

377
00:31:17,330 --> 00:31:22,530
you know a password recovery request for
a given user and know that that's the

378
00:31:22,530 --> 00:31:26,080
only token outstanding there's a little
bit of a race condition there if the

379
00:31:26,080 --> 00:31:29,920
applications you know other people
requesting things at the same time but

380
00:31:29,920 --> 00:31:35,270
generally it's passed now that you know
I can be too much of an issue once we

381
00:31:35,270 --> 00:31:40,580
got an outstanding token we can go ahead
and and reset password without knowing

382
00:31:40,580 --> 00:31:44,750
that token the caveat to this is the
legitimate user the account is gonna get

383
00:31:44,750 --> 00:31:48,850
an email there's nothing we can do about
that you know they're going to get the

384
00:31:48,850 --> 00:31:54,110
password reset email with their token
but I think you know by the time they

385
00:31:54,110 --> 00:32:03,660
see that you're generally can already be
so that's kind of fun so why are we

386
00:32:03,660 --> 00:32:09,150
talking about this you know this
vulnerability it's from 2013 it's

387
00:32:09,150 --> 00:32:15,350
patched in recent versions to devise the
devise patch all it really does go back

388
00:32:15,350 --> 00:32:23,580
to let's go code there we go so I said
that the the reason not to look

389
00:32:23,580 --> 00:32:24,940
something like this

390
00:32:24,940 --> 00:32:30,310
the patch essentially takes that that
fine by Tolkien and adds a toString so

391
00:32:30,310 --> 00:32:36,810
we just casts it explicitly to a string
so you can get injuries through that's

392
00:32:36,810 --> 00:32:38,420
how devised matched it

393
00:32:38,420 --> 00:32:47,760
rails also see oh ok well make this
point that the core hole mobility here

394
00:32:47,760 --> 00:32:51,220
being in my sequel and you know dr.
records gratis

395
00:32:51,220 --> 00:32:55,580
thanks a lot more than justifies so
while while it's a couple of years old

396
00:32:55,580 --> 00:33:00,200
vulnerability in most people have
operated device in the meantime you see

397
00:33:00,200 --> 00:33:03,390
that same thing a lot of times when
people write their own their own

398
00:33:03,390 --> 00:33:05,380
recovery functions

399
00:33:05,380 --> 00:33:10,820
tokens recent tokens things like that so
it's it's a good one to be aware of what

400
00:33:10,820 --> 00:33:15,060
module can pretty easily be tweaked to
you know to interoperate with nine

401
00:33:15,060 --> 00:33:18,890
points that would be vulnerable to the
same the same issue

402
00:33:18,890 --> 00:33:25,610
I talked about the devise patch the
rails fixes for this kind of interesting

403
00:33:25,610 --> 00:33:32,080
in Rails 3 to 12 a push to change that
would cause after record to build his

404
00:33:32,080 --> 00:33:38,630
queries using the type of the database
so if it's looking up a string in the

405
00:33:38,630 --> 00:33:44,830
database it would cast the parameter to
a strained automagically they ended up a

406
00:33:44,830 --> 00:33:51,150
reversing that in Rails 3 to 13 because
it broke some other functionality so on

407
00:33:51,150 --> 00:33:54,950
the 32 branch there's really only one
version where that that function is

408
00:33:54,950 --> 00:34:01,230
enabled in Rails 42 in later however
will build agrees that way out of the

409
00:34:01,230 --> 00:34:10,360
box so that's an improvement but even on
42 and later if you build your queries

410
00:34:10,360 --> 00:34:14,649
using something like where you know you
can still introduced the same the same

411
00:34:14,649 --> 00:34:16,010
sort of issue

412
00:34:16,010 --> 00:34:20,840
the supreme and ice cream so it's not
sequel injectable but I can you know I

413
00:34:20,840 --> 00:34:23,720
can control the type of the parameter
and that's that's really all I need to

414
00:34:23,720 --> 00:34:28,820
know to exploit something like this so
what that we're gonna move on

415
00:34:28,820 --> 00:34:40,330
authorization to talk about that right
now that we have an awesomely

416
00:34:40,330 --> 00:34:46,110
authenticated go over authorization so I
kind of think about this as what can I

417
00:34:46,110 --> 00:34:52,620
do this tends to be tied to the concept
of roles within applications like to

418
00:34:52,620 --> 00:34:56,909
break it down into two separate groups
have the notion vertical authorization

419
00:34:56,909 --> 00:35:01,550
sitting examples here you might have a
site at minutes full access and

420
00:35:01,550 --> 00:35:06,750
organization had man that's gonna have a
more granular access controls applied to

421
00:35:06,750 --> 00:35:12,260
it you know maybe full access to a
specific organization a regular user is

422
00:35:12,260 --> 00:35:16,260
going to have limited read access and an
unauthenticated should have no access

423
00:35:16,260 --> 00:35:20,960
anything horizontal authorization on the
other hand is

424
00:35:20,960 --> 00:35:25,780
is a regular user an organization one
shouldn't be able to see the data of

425
00:35:25,780 --> 00:35:32,589
organization to so what does this look
like an authorization we tend to see

426
00:35:32,589 --> 00:35:36,500
that for vertical authorization that
gets implemented with the use of before

427
00:35:36,500 --> 00:35:41,589
actions so here we have some examples at
the top you might see something in a

428
00:35:41,589 --> 00:35:47,250
controller that says require admin so
before actions is pretty much a method

429
00:35:47,250 --> 00:35:53,410
that's gonna get run before any action
is called within that controller and

430
00:35:53,410 --> 00:35:58,660
then you can specify options to say
things like only accept if you only want

431
00:35:58,660 --> 00:36:05,060
the actions before actions to be run on
certain controller actions so far

432
00:36:05,060 --> 00:36:09,670
horizontal authorization this tends to
get implemented with the use of

433
00:36:09,670 --> 00:36:15,480
associations so we had the notion of a
current user object into my eyes and

434
00:36:15,480 --> 00:36:19,810
then we're going to do here is say okay
for the current user let's get their

435
00:36:19,810 --> 00:36:25,670
organization get all the posts within an
organization and then look at your

436
00:36:25,670 --> 00:36:32,869
lookup methods on that so what that does
is it a pretty much keeps this subset of

437
00:36:32,869 --> 00:36:38,210
data that's going to get queried two
things that belong to that user

438
00:36:38,210 --> 00:36:42,140
going into you how routing works in
Rails is going to briefly go over this

439
00:36:42,140 --> 00:36:47,230
this is gonna be a line that you'll see
in the configuration file and routes

440
00:36:47,230 --> 00:36:54,310
that are being and so it's pretty simple
here you have your HTTP method the pass

441
00:36:54,310 --> 00:37:00,400
the UN expose in your application and
then you pointed to the controller and

442
00:37:00,400 --> 00:37:05,270
action and here this is an ocean have
controllers that class in an action is a

443
00:37:05,270 --> 00:37:13,359
method within a class so this is gonna
be a typical Rails controller you'll see

444
00:37:13,359 --> 00:37:15,680
that is inheriting from application
controller here

445
00:37:15,680 --> 00:37:17,260
index is gonna be

446
00:37:17,260 --> 00:37:21,930
you know the the method with in this
class is going to be exposed to test the

447
00:37:21,930 --> 00:37:26,500
action and rails but yes you'll notice
the use of the application controller

448
00:37:26,500 --> 00:37:31,210
here so we kind of go inside and talk
about control hierarchy so the

449
00:37:31,210 --> 00:37:38,480
application controller is the main kind
of class that by default all the

450
00:37:38,480 --> 00:37:42,260
controllers are going to inherit from
says very common that you're going to

451
00:37:42,260 --> 00:37:47,380
see he kind of site-wide authorization
and authentication before actions within

452
00:37:47,380 --> 00:37:51,220
this year also gonna get things by
defaults that protect from forgery line

453
00:37:51,220 --> 00:37:59,190
just generated when you generate the
application so again going back to the

454
00:37:59,190 --> 00:38:03,500
post controller that's going to inherit
from application controller and then as

455
00:38:03,500 --> 00:38:08,240
you go up you have more lighter weight
classes and so you're gonna start losing

456
00:38:08,240 --> 00:38:12,470
functionality that you get by default so
for example work we sometimes see

457
00:38:12,470 --> 00:38:19,100
applications where you know people
inherit from application or action

458
00:38:19,100 --> 00:38:25,330
controller base and so they're gonna
lose things like Caesar protection to go

459
00:38:25,330 --> 00:38:29,710
into how callbacks work within rails

460
00:38:29,710 --> 00:38:35,190
tend to have three different ways you
can apply this to you before around and

461
00:38:35,190 --> 00:38:38,170
after but with the way that
authorization tends to work you

462
00:38:38,170 --> 00:38:42,870
unauthorized user before you start
running any code that might change the

463
00:38:42,870 --> 00:38:48,960
database so we tend to focus on before
actions you're gonna see this in a few

464
00:38:48,960 --> 00:38:53,750
different flavors you can't touch on
this earlier but you can say only accept

465
00:38:53,750 --> 00:38:59,360
which is gonna be pretty much an array
of actions to say only run on these or

466
00:38:59,360 --> 00:39:04,830
running on everything except these
actions you can also provide other

467
00:39:04,830 --> 00:39:09,910
conditional methods and say you know if
this method returns true run this before

468
00:39:09,910 --> 00:39:16,760
action or unless you can also skip
before actions so you can say you know

469
00:39:16,760 --> 00:39:20,870
if you have the application controller
and it's calling authorized user which

470
00:39:20,870 --> 00:39:24,750
means that it's going to get run and
every single action by default you can

471
00:39:24,750 --> 00:39:29,920
say skip the authorized user before
action on specific

472
00:39:29,920 --> 00:39:36,940
controller actions you also see things
like you can pass it or Prague with

473
00:39:36,940 --> 00:39:41,790
custom authorization logic if it's small
enough that it's gonna fit there but

474
00:39:41,790 --> 00:39:50,829
this is pretty rare so there are some
authorization gems for Rails funded and

475
00:39:50,829 --> 00:39:59,240
can can can formally can can are two of
the more popular ones so pundit you're

476
00:39:59,240 --> 00:40:03,130
going to see something like this when
you look up a post object and then you

477
00:40:03,130 --> 00:40:06,500
call authorized on that and so that's
going to be a national method call

478
00:40:06,500 --> 00:40:14,040
within the controller action itself can
can can works in a very similar way but

479
00:40:14,040 --> 00:40:17,819
you kind of specify the actual ability
as you call the authorized in my head

480
00:40:17,819 --> 00:40:22,319
and it provides some helper methods as
well like loading authorized resource

481
00:40:22,319 --> 00:40:26,950
which is smart enough to know that hey
you're probably looking for a post

482
00:40:26,950 --> 00:40:33,980
object so low that by the idea program
and look that up an authorized user just

483
00:40:33,980 --> 00:40:39,549
a quick note on that opening Canyon can
are pretty popular I think we tend to

484
00:40:39,549 --> 00:40:44,559
see more often than not that people
implement their own authorization logic

485
00:40:44,559 --> 00:40:53,880
go over things to be on the lookout for
calling fine by methods directly on

486
00:40:53,880 --> 00:40:58,500
models so we kind of talked about
associations earlier this is just

487
00:40:58,500 --> 00:41:01,589
something to be on the lookout for its
not automatically going to be a

488
00:41:01,589 --> 00:41:04,980
vulnerability but when we find
authorization flaws

489
00:41:04,980 --> 00:41:09,559
it's going to be around patterns like
this so we like to see again the use of

490
00:41:09,559 --> 00:41:13,930
associations limit the subset of data
that you're clearing

491
00:41:13,930 --> 00:41:24,160
ones that belong to the user so be on
the lookout for whitelisted actions so

492
00:41:24,160 --> 00:41:29,690
here we're saying authorized author for
only the update destroy and create

493
00:41:29,690 --> 00:41:34,250
actions in the post controller so you
might think about this scenario where

494
00:41:34,250 --> 00:41:39,180
developer comes in as new controller
action and they don't add that new

495
00:41:39,180 --> 00:41:41,770
controller action to this list

496
00:41:41,770 --> 00:41:46,980
so that's what you might find
authorization bypass around that so we

497
00:41:46,980 --> 00:41:53,120
tend to like more kind of like a black
list approach we're saying run this

498
00:41:53,120 --> 00:41:58,680
authorized author before action on every
single action of the post controller

499
00:41:58,680 --> 00:42:02,890
automatically except for the ones
provided so that same scenario the

500
00:42:02,890 --> 00:42:07,920
developer comes in as new controller
action they have to explicitly added to

501
00:42:07,920 --> 00:42:15,000
this less so that it doesn't get run
lightweight controllers a touch on this

502
00:42:15,000 --> 00:42:18,470
little bit earlier but the farther you
go up that hierarchy the more you're

503
00:42:18,470 --> 00:42:20,740
gonna lose here again

504
00:42:20,740 --> 00:42:23,780
inheriting directly from action
controller base you're gonna lose things

505
00:42:23,780 --> 00:42:29,290
like sea surf now that doesn't mean it's
gonna have been avoided billion

506
00:42:29,290 --> 00:42:34,420
necessarily because you might want this
for things like API's right but when you

507
00:42:34,420 --> 00:42:38,990
get down to like action controller medal
you just lose the ability to even call

508
00:42:38,990 --> 00:42:42,510
before actions because that's a
middleware so you would have to include

509
00:42:42,510 --> 00:42:46,530
that explicitly say if you see a
controller that just inherit from

510
00:42:46,530 --> 00:42:51,180
application controller you're probably
not going to say anything to walk around

511
00:42:51,180 --> 00:42:58,520
that authorization logic in use so again
missus

512
00:42:58,520 --> 00:43:03,070
developers correctly checking for roles
see if there had been but they're just

513
00:43:03,070 --> 00:43:08,200
showing and hiding that in the view and
so on the back and you want to ensure

514
00:43:08,200 --> 00:43:13,490
that the actual controller logic that
corresponds to this do you want to make

515
00:43:13,490 --> 00:43:19,790
sure that they're properly checking
roles there's the use of skipping of

516
00:43:19,790 --> 00:43:28,100
filters so again this is just more try
to get it if you see it because you want

517
00:43:28,100 --> 00:43:32,450
to make sure that the developer actually
meant to do this sometimes we might see

518
00:43:32,450 --> 00:43:36,640
things like developers trying to test
with a curly client they don't wanna

519
00:43:36,640 --> 00:43:41,000
play around with authenticity token so
though say skip it for action verify

520
00:43:41,000 --> 00:43:45,330
authenticity token and then forget to
take that back out and they committed so

521
00:43:45,330 --> 00:43:48,770
then you have sea surf across a
controller

522
00:43:48,770 --> 00:43:56,040
real scaffolding is really nice in the
sense that it allows you to get control

523
00:43:56,040 --> 00:44:00,820
actions up and running very quickly and
it'll generate things like views and

524
00:44:00,820 --> 00:44:02,190
controllers for you

525
00:44:02,190 --> 00:44:06,670
the problem is that it generates some
artifacts that developers don't really

526
00:44:06,670 --> 00:44:13,000
know about and so here we're just
running rails generate scaffold and then

527
00:44:13,000 --> 00:44:18,150
you can specify the attributes for that
model and again it'll go through

528
00:44:18,150 --> 00:44:24,520
generate the views these JBuilder files
and then the ActiveRecord models so what

529
00:44:24,520 --> 00:44:30,230
happens with that is that for example
for the JBuilder files this is kind of a

530
00:44:30,230 --> 00:44:36,970
review template so that when you request
a JSON response at all it'll generate

531
00:44:36,970 --> 00:44:41,380
this and then at all of these attributes
automatically so every single attribute

532
00:44:41,380 --> 00:44:46,320
you generated rail scaffold will be
available by default if you have some

533
00:44:46,320 --> 00:44:49,880
secret token or something that you don't
want users to see its gonna show up

534
00:44:49,880 --> 00:44:57,380
automatically in the same way for strong
parameters which is kind of the

535
00:44:57,380 --> 00:45:01,470
protection for mass assignment
vulnerabilities and rails all of the

536
00:45:01,470 --> 00:45:05,790
attributes will automatically get added
to the permit method so everything on

537
00:45:05,790 --> 00:45:10,510
tributes gonna be mass assignable see
all those are going to be some of the

538
00:45:10,510 --> 00:45:16,740
patterns we're gonna talk about
parliament right now so we only looked

539
00:45:16,740 --> 00:45:20,350
at one controller and the post
controller you can imagine

540
00:45:20,350 --> 00:45:24,980
checking every single before action for
every controller and application it can

541
00:45:24,980 --> 00:45:32,330
become a pretty big hassle here so man
tries to bring every single before

542
00:45:32,330 --> 00:45:36,220
action and across every controller into
one place that you can query and look at

543
00:45:36,220 --> 00:45:44,770
dynamically so just a bit about how it
works it plugs into existing Rails

544
00:45:44,770 --> 00:45:50,410
applications and it gets mounted as a
Rails engine so you do need pretty much

545
00:45:50,410 --> 00:45:53,339
shell access to the application

546
00:45:53,339 --> 00:45:57,690
with rails assessments and it being more
towards the startup kind of crowd our

547
00:45:57,690 --> 00:46:02,719
clients tend to be pretty open with
giving us access their box or they just

548
00:46:02,719 --> 00:46:06,960
quickly stand up like a staging instance

549
00:46:06,960 --> 00:46:11,349
again as a minimum requirement rail
access to the rails councils gonna be

550
00:46:11,349 --> 00:46:15,910
needed once you have it mounted you can
just go to for its last man in the

551
00:46:15,910 --> 00:46:20,690
application and start running through it
so I'm actually go through a quick demo

552
00:46:20,690 --> 00:46:35,820
here looks like

553
00:46:35,820 --> 00:46:51,660
the example when I use here is the rails
going is unintentionally vulnerable

554
00:46:51,660 --> 00:46:56,360
Rails application kind of release
through the Oscar organization so this

555
00:46:56,360 --> 00:47:00,220
is a full application if you guys are
interested in our testing rails after

556
00:47:00,220 --> 00:47:03,800
getting started doing security
assessments you can get this up and

557
00:47:03,800 --> 00:47:07,190
running really quickly and then start
going through some common trails

558
00:47:07,190 --> 00:47:15,720
vulnerabilities this is this is a full
web log in and play around with that but

559
00:47:15,720 --> 00:47:18,890
if we just go to four sites where a man
here I've already installed it into this

560
00:47:18,890 --> 00:47:26,400
application you're gonna start seeing
this is the main view so you have basic

561
00:47:26,400 --> 00:47:32,050
filters to say show me only the
controllers and include a strength give

562
00:47:32,050 --> 00:47:38,510
me every action that you know has a
specific before action or without 10

563
00:47:38,510 --> 00:47:42,570
here you're going to see a table
breakdown of every single controller and

564
00:47:42,570 --> 00:47:47,940
every action and a controller so here we
have the controller use the Forgot

565
00:47:47,940 --> 00:47:54,090
Password action and hear all the before
actions that get run out there any

566
00:47:54,090 --> 00:47:58,320
people out there that assess Rails
applications for a living but if

567
00:47:58,320 --> 00:48:02,130
anyone's part of our ability right now
based off of an action that should

568
00:48:02,130 --> 00:48:09,339
probably get on every single action
controller

569
00:48:09,339 --> 00:48:13,769
well it so it's not actually here is the
thing is these are all the actions that

570
00:48:13,769 --> 00:48:22,229
are gonna run exactly so by default if
we look into the application control arm

571
00:48:22,229 --> 00:48:26,910
will see that is commented out here
what's known about security guys talking

572
00:48:26,910 --> 00:48:35,219
about see surfing so if we uncomment
this out and refresh the page here we'll

573
00:48:35,219 --> 00:48:39,309
see verify authenticity token is
automatically added to every single

574
00:48:39,309 --> 00:48:45,660
action is kinda nice to be able to spot
things like that automatically but we

575
00:48:45,660 --> 00:48:52,809
have an example here so there's a mobile
API endpoint available here so if we

576
00:48:52,809 --> 00:49:03,779
look at API will see there is an API
controller available for users and then

577
00:49:03,779 --> 00:49:13,549
one available for the mobile controller
said I kind of open up the Red Cross is

578
00:49:13,549 --> 00:49:19,809
really nice red cross was gonna show you
every single controller action here this

579
00:49:19,809 --> 00:49:26,910
is my car show where this is pretty much
something I ask every client right off

580
00:49:26,910 --> 00:49:30,890
the bat and going to show you everything
a patent applications are you don't have

581
00:49:30,890 --> 00:49:39,940
to enumerate them manually but if we
look here hasn't shown to but we have

582
00:49:39,940 --> 00:49:45,940
this kind of so if we say a PIB 1 users
so this is gonna go to the user's action

583
00:49:45,940 --> 00:49:51,950
or the users control over the index
action so we pulled out of here we'll

584
00:49:51,950 --> 00:49:55,969
see things like valid API token so I'm
pretty certain that that's going to be

585
00:49:55,969 --> 00:50:02,810
some kind of authentication type action

586
00:50:02,810 --> 00:50:18,900
so here we're getting HTTP token access
denied so that's probably going to be

587
00:50:18,900 --> 00:50:24,880
from this ballad API token if we look up
the actual users controller will see

588
00:50:24,880 --> 00:50:30,030
that they're saying before filter valid
API token and so we look at that method

589
00:50:30,030 --> 00:50:33,450
they're doing some kind of
authentication around that side want to

590
00:50:33,450 --> 00:50:38,720
say I'd probably want to find any API
controller actions that don't call this

591
00:50:38,720 --> 00:50:44,400
method so they go back up to the filters
and say you know for the API controllers

592
00:50:44,400 --> 00:50:50,080
give me every single action without the
valid API token you will see nothing

593
00:50:50,080 --> 00:50:56,270
comes up and the user's controller but
every mobile controller controller

594
00:50:56,270 --> 00:51:01,950
action is going to be a seemingly
vulnerable and has no authentication so

595
00:51:01,950 --> 00:51:13,320
if you go back to the rake routes and we
pulled one of these guys we've gotten no

596
00:51:13,320 --> 00:51:18,090
response here but you will see you see
ever know learning the HTTP token error

597
00:51:18,090 --> 00:51:22,040
back so if we look at the Mobile
controller for our index action which is

598
00:51:22,040 --> 00:51:27,460
what we've just called will see first
there's no before filter that's expected

599
00:51:27,460 --> 00:51:34,100
and an index action it's it's requiring
in this class parameter and ultimately

600
00:51:34,100 --> 00:51:38,900
what's going on here this is a bit of a
non-standard code pattern you normally

601
00:51:38,900 --> 00:51:45,420
gonna see this too often apart from the
dynamic classification I guess but

602
00:51:45,420 --> 00:51:50,130
they're saying given whatever class you
passing as a parameter turn into a class

603
00:51:50,130 --> 00:51:53,550
constant eyes it and then just called at
all on and which is going to return

604
00:51:53,550 --> 00:52:00,350
everything for the provided class so we
can do something like last week was user

605
00:52:00,350 --> 00:52:03,279
and it'll call user . all and returned
everything here

606
00:52:03,279 --> 00:52:10,529
r so that's the damage but if you kind
of assess Rails application for a living

607
00:52:10,529 --> 00:52:14,239
and see this like this should already be
something really nice hopefully it's

608
00:52:14,239 --> 00:52:15,159
going to be useful

609
00:52:15,159 --> 00:52:21,349
its new applications so it's going to be
a bit rough around the edges but I

610
00:52:21,349 --> 00:52:28,619
encourage anyone with acid rails app to
use it if you ever see anything wrong

611
00:52:28,619 --> 00:52:36,589
with it but again to to use it you can
do gem install boiler man but primarily

612
00:52:36,589 --> 00:52:40,499
you're going to add it to the Gemfile of
your Rails application and then run

613
00:52:40,499 --> 00:52:46,819
bundle install the takeaways is even if
you don't use break man rails console is

614
00:52:46,819 --> 00:52:51,299
extremely powerful and assessments
that's kind of where this came from I

615
00:52:51,299 --> 00:52:55,130
just started kind of playing around and
then realise like hey you can pretty

616
00:52:55,130 --> 00:52:58,989
much query programmatically any aspect
of a Rails application if you have

617
00:52:58,989 --> 00:53:00,179
access to it

618
00:53:00,179 --> 00:53:04,269
future ideas endings and III
visualization were kind of working on it

619
00:53:04,269 --> 00:53:09,679
on the way up here but didn't get quite
done source clearing is going to be

620
00:53:09,679 --> 00:53:14,679
coming soon as well so in the cases of
like pundit and can can you can say give

621
00:53:14,679 --> 00:53:19,419
me all the controller actions that don't
call authorized yeah that's everything

622
00:53:19,419 --> 00:53:24,439
any questions

623
00:53:24,439 --> 00:53:30,419
yeah she was supposed to do that show
that really quickly here so yeah if you

624
00:53:30,419 --> 00:53:45,990
don't have access outside of the app you
can run off the rails console directly

625
00:53:45,990 --> 00:54:09,770
some cases where you might have shut
shell access the box but for one reason

626
00:54:09,770 --> 00:54:15,440
or another you can add it to the Gemfile
relaunch everything so you can foresight

627
00:54:15,440 --> 00:54:20,530
load it through rails console having
some instructions on how to do that but

628
00:54:20,530 --> 00:54:39,640
yes the rails console if you don't want
to use actually sure thanks we had lunch

629
00:54:39,640 --> 00:54:45,730
yeah i know i mean so this is you can
just kind of programmatically get this

630
00:54:45,730 --> 00:54:47,730
year but

