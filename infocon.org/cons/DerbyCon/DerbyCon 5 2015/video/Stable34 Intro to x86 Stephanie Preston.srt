1
00:00:00,000 --> 00:00:35,559
7 p.m. talks not the biggest turnout
ever so thanks for being here even if it

2
00:00:35,559 --> 00:00:39,890
also wasn't the talk you are expecting
to see I'm gonna talk about the x86

3
00:00:39,890 --> 00:00:44,969
assembly language and also pre
apologizes on the standby list so I had

4
00:00:44,969 --> 00:00:48,670
to make a presentation so the
presentations longer than 25 minutes so

5
00:00:48,670 --> 00:00:52,780
again as far as we can and then if you
want the rest of the sides of my email

6
00:00:52,780 --> 00:00:58,399
address and everything after a bogus far
as we can in 25 minutes so who am i i'm

7
00:00:58,399 --> 00:01:02,760
stephanie I am in embedded systems
engineer at Battelle Memorial Institute

8
00:01:02,760 --> 00:01:06,689
and I'm also an adjunct professor at the
ohio State University's College of

9
00:01:06,689 --> 00:01:14,689
Computer Engineering briefly computer
architecture so we're not going to go

10
00:01:14,689 --> 00:01:19,130
into much detail of all of this but at a
high level your computer consists of

11
00:01:19,130 --> 00:01:24,110
some standard pieces you've got your CPU
memory there's a bridge to handle the

12
00:01:24,110 --> 00:01:28,340
transactions between your CPU and memory
and then some type of i/o bus to let you

13
00:01:28,340 --> 00:01:36,350
talk peripheral devices so CPU contains
a few key pieces it's responsible for

14
00:01:36,350 --> 00:01:41,150
processing information it contains
arithmetic logic unit does all your math

15
00:01:41,150 --> 00:01:45,939
and contains some registers so these
registers important the register store

16
00:01:45,939 --> 00:01:50,700
data and because they're in the CPU
they're extremely fast the register size

17
00:01:50,700 --> 00:01:56,210
is one word to a 32 bit architecture
they'd be 32 bit size they're generally

18
00:01:56,210 --> 00:02:01,979
named rather than addresses and it also
does the control unit it actually

19
00:02:01,979 --> 00:02:05,830
execute the code for asking it to do

20
00:02:05,830 --> 00:02:10,960
the registers vs memory registers
technically serve the same purpose is

21
00:02:10,960 --> 00:02:17,970
managed memory the whole purpose is to
store data but memory and is moderate

22
00:02:17,970 --> 00:02:22,520
access speeds and because it's not on
the CPU there's a fetch delay between

23
00:02:22,520 --> 00:02:27,030
going through that basically going
through the memory controller hub to get

24
00:02:27,030 --> 00:02:31,330
things out of memory it's cheap to
produce three computers typically have a

25
00:02:31,330 --> 00:02:36,330
lot of it registers are extremely fast
access because they're inside and the

26
00:02:36,330 --> 00:02:42,310
CPU but the actual cost that goes into
producing the registers extremely

27
00:02:42,310 --> 00:02:46,410
expensive the type of memory that is so
there tends to be a very few of them on

28
00:02:46,410 --> 00:02:50,610
your system so your program data etc

29
00:02:50,610 --> 00:02:55,740
typically sits in memory while registers
are used to simply process small pieces

30
00:02:55,740 --> 00:03:02,160
of your application given time to
machine code machine code controlled the

31
00:03:02,160 --> 00:03:05,880
processor on the most detailed level
possible so the machine code is

32
00:03:05,880 --> 00:03:10,220
responsible for moving information in
and out of memory which involves moving

33
00:03:10,220 --> 00:03:15,930
it in and out of memory to registers
internal to the CPU it controls the

34
00:03:15,930 --> 00:03:21,660
system bus it's gonna control your email
you control unit assembly on the other

35
00:03:21,660 --> 00:03:27,590
hand is a shorthand more legible version
of machine code so assembly code uses

36
00:03:27,590 --> 00:03:31,670
pneumonic to save us from having to
memorize machine code so assembly allows

37
00:03:31,670 --> 00:03:35,550
me to say something like sub instead of
having to remember the machine code and

38
00:03:35,550 --> 00:03:44,750
this case X 83 so writing and machine
code is fun has its uses but it's really

39
00:03:44,750 --> 00:03:49,069
difficult in common is much more
practical to write an assembly

40
00:03:49,069 --> 00:03:54,540
assembler is a tool that will translate
from assembly to machine code and its

41
00:03:54,540 --> 00:03:58,739
process is called assembling a
disassembler is then a tool that will

42
00:03:58,739 --> 00:04:03,439
translate from machine code back to
assembly code and called disassembling

43
00:04:03,439 --> 00:04:11,159
so there's something called the
instruction set architecture so ni sa ni

44
00:04:11,159 --> 00:04:16,019
sa defines the processor registers that
exists for that particular architecture

45
00:04:16,019 --> 00:04:21,720
so we're concentrating specifically on
x86 so they're x86 ISA would define what

46
00:04:21,720 --> 00:04:27,530
registers are available in x86 it would
define the size of those registers but

47
00:04:27,530 --> 00:04:32,030
also define the address and data formats
so when I grab something from memory how

48
00:04:32,030 --> 00:04:37,240
many bytes to grab what size of data my
first name it also defined machine

49
00:04:37,240 --> 00:04:42,430
instructions so it defines can I do
things like subtract can I multiply can

50
00:04:42,430 --> 00:04:47,650
I so what functionality in the machine
instructions exist in that assembly

51
00:04:47,650 --> 00:04:53,539
language so indirectly it defines the
assembly Wang and assembly language

52
00:04:53,539 --> 00:05:03,740
defining what low-level instructions we
have and what those instructions do so

53
00:05:03,740 --> 00:05:08,159
and ISA is just one piece of the puzzle
so an ISA is describing what that

54
00:05:08,159 --> 00:05:12,530
architecture has to be capable of
dealing with a microarchitecture is

55
00:05:12,530 --> 00:05:16,430
actually the way that that architecture
would be implemented so I know you can't

56
00:05:16,430 --> 00:05:20,400
really read this flowchart we're not
really gonna go right but this is the

57
00:05:20,400 --> 00:05:22,440
microarchitecture

58
00:05:22,440 --> 00:05:27,000
the Intel Core 2 Duo so this is how
Intel specifically chose to implement

59
00:05:27,000 --> 00:05:34,509
the ISA for x86 Intel Core 2 Duo and if
you get the slides for me the link in

60
00:05:34,509 --> 00:05:39,669
the bomb that you can't read would take
you to the source of that if you so

61
00:05:39,669 --> 00:05:44,120
collectively instruction set
architecture and the microarchitecture

62
00:05:44,120 --> 00:05:49,169
to find a computer architecture so there
are thousands of instruction set

63
00:05:49,169 --> 00:05:52,330
architectures there are thousands of
micro architectures and thousands of

64
00:05:52,330 --> 00:05:54,590
computer architectures out there

65
00:05:54,590 --> 00:06:02,450
R two architectures and a high level are
divided into two main categories reduced

66
00:06:02,450 --> 00:06:06,750
instruction set computing call a RISC
architecture or complex instruction set

67
00:06:06,750 --> 00:06:12,740
computing so the difference in risk
insist are generally risk is a very

68
00:06:12,740 --> 00:06:18,490
small set of simple instructions because
it's a set of simple instructions it's

69
00:06:18,490 --> 00:06:21,350
generally cheaper to create those
processes are going to be cheaper to

70
00:06:21,350 --> 00:06:25,670
produce because they're not as
functional easier to design lower power

71
00:06:25,670 --> 00:06:29,900
consumption which also makes them
physically smaller assist processor

72
00:06:29,900 --> 00:06:33,770
tends to be extremely large and powerful
though it that comes from the obvious

73
00:06:33,770 --> 00:06:38,670
it's more expensive to create targeted
design for a much higher power

74
00:06:38,670 --> 00:06:44,570
restrictions are much higher power
requirement and physically larger an

75
00:06:44,570 --> 00:06:49,650
example of one versus the other
hypothetical example of Malta plane

76
00:06:49,650 --> 00:06:51,430
something by five

77
00:06:51,430 --> 00:06:55,470
soon as Cisco architecture because its
complexity probably having something

78
00:06:55,470 --> 00:07:01,250
like a multiply instruction and I can
simply say multiplied by five I can

79
00:07:01,250 --> 00:07:05,130
achieve the same functionality and a
RISC architecture but it's unlikely that

80
00:07:05,130 --> 00:07:09,040
I have multiplied instruction that's
actually fairly complex instruction so

81
00:07:09,040 --> 00:07:12,880
to achieve the same thing instead of one
instruction I have to change multiple at

82
00:07:12,880 --> 00:07:16,990
instructions together to achieve the
same thing so same functionality it was

83
00:07:16,990 --> 00:07:24,110
just harder to do it and one then the
other so some examples of each so and

84
00:07:24,110 --> 00:07:28,130
the risk category of arms the most
popular one that's what's running on

85
00:07:28,130 --> 00:07:34,050
most of your phones Android iPhones
tablets MIPS runs on a lot of embedded

86
00:07:34,050 --> 00:07:39,380
systems you'll see it on networking
equipment routers PowerPC this was on

87
00:07:39,380 --> 00:07:44,300
the original max I can remember what
version of Mac they switch over to x86

88
00:07:44,300 --> 00:07:52,570
but on the original macsai where power
PC Xbox and Xbox 360 are PowerPC risk to

89
00:07:52,570 --> 00:07:57,500
your complex instructions x86 what we're
gonna be focusing on is a very complex

90
00:07:57,500 --> 00:08:02,090
instruction set to all of your consumer
computers so now all of your Mac's your

91
00:08:02,090 --> 00:08:09,140
PC's and the new Xbox one is also x86
architecture and the Motorola 68 K

92
00:08:09,140 --> 00:08:20,150
really early PCs so let's actually talk
about x86 so the history of x86 so it

93
00:08:20,150 --> 00:08:24,920
all started with the Intel 8080 chip
which resonate bit processor introduced

94
00:08:24,920 --> 00:08:33,050
in 1974 sorry I mean it water the next

95
00:08:33,050 --> 00:08:38,610
progression from that was the 16 bit
processor the 8086 which was introduced

96
00:08:38,610 --> 00:08:48,010
in 1978 this architecture has been
around a really long time the next one

97
00:08:48,010 --> 00:08:54,399
after that was the 83864 32 bit
architecture in 1985 and lastly the 64

98
00:08:54,399 --> 00:09:02,990
bit version of that it was introduced in
2003 or 2004 so it's a very complex

99
00:09:02,990 --> 00:09:07,180
architecture the intel software
developer's manual I have linked here is

100
00:09:07,180 --> 00:09:11,350
four thousand pages long and doesn't
even begin to scratch the surface if you

101
00:09:11,350 --> 00:09:15,180
really start to dig into writing x86
you'll find that there's a lot of things

102
00:09:15,180 --> 00:09:20,459
missing from this manual so even at four
thousand pages it is missing a lot of

103
00:09:20,459 --> 00:09:28,220
information so today generally the term
x86 if someone says that there were four

104
00:09:28,220 --> 00:09:33,519
into all of the architecture is based
off of the original 8086 all way back to

105
00:09:33,519 --> 00:09:40,079
the original sixteen-bit architecture
and the term X 64 typically refers to 64

106
00:09:40,079 --> 00:09:46,600
bit version of x86 there are there is a
lot of overlap between the 32 bit and 64

107
00:09:46,600 --> 00:09:50,279
bit versions but more specifically for
this talk I'm just going to talk about

108
00:09:50,279 --> 00:09:59,480
the 32 bit version so just x86

109
00:09:59,480 --> 00:10:06,730
so if your call the ISAF x86 it defines
its functionality and features but it

110
00:10:06,730 --> 00:10:10,380
doesn't technically defined how to write
it so it says things like you will have

111
00:10:10,380 --> 00:10:14,089
a multiple instruction that can multiply
two registers but doesn't actually tell

112
00:10:14,089 --> 00:10:19,470
you how someone would write instructions
to do that if I'm writing an assembly

113
00:10:19,470 --> 00:10:22,639
code there two main branches of x86

114
00:10:22,639 --> 00:10:30,329
syntax that exists the two branches are
AT&T which is used by GCC compiler on

115
00:10:30,329 --> 00:10:36,019
Intel Intel and hundreds of smaller
variations but for the most part you're

116
00:10:36,019 --> 00:10:42,800
always gonna generally run across either
AT&T wrandell syntax for x86 so

117
00:10:42,800 --> 00:10:47,800
specifically for this talk I'm gonna
show you guys how to use the assembler

118
00:10:47,800 --> 00:10:55,620
Nazem the net wide assembler extremely
popular free and Nazem uses Intel syntax

119
00:10:55,620 --> 00:10:59,680
so we're going to specifically focus on
Intel syntax but it will briefly show

120
00:10:59,680 --> 00:11:03,199
you what the difference between the two
is in case you come across some AT&T

121
00:11:03,199 --> 00:11:11,600
syntax so almost universally true but
specifically true with Nazem lines do

122
00:11:11,600 --> 00:11:16,050
not tenderness I mean call and
semicolons are used to start a single

123
00:11:16,050 --> 00:11:16,630
comment

124
00:11:16,630 --> 00:11:20,069
a single line comments 0 if its old
habit that you end of a line with the

125
00:11:20,069 --> 00:11:22,069
semicolon it's not going to cause any
harm

126
00:11:22,069 --> 00:11:25,350
really just means that you're adding a
comment at the end of each airline so

127
00:11:25,350 --> 00:11:32,910
generally of instruction semicolon
comment right the registers to mention

128
00:11:32,910 --> 00:11:37,510
these before but the registers are how
the process or stores information to the

129
00:11:37,510 --> 00:11:42,310
processor can access memory but since
the memories system's memory is not a

130
00:11:42,310 --> 00:11:46,790
part of the actual processor that
process is extremely slow to getting

131
00:11:46,790 --> 00:11:48,660
things out of memory

132
00:11:48,660 --> 00:11:53,769
registers are contained in the actual
processor is extremely fast access data

133
00:11:53,769 --> 00:12:00,379
manipulate data that's in them so it's
easy to think of the registers as 32 bit

134
00:12:00,379 --> 00:12:05,379
variables each has its own name and it
can be modified not the name but the

135
00:12:05,379 --> 00:12:11,069
contents but they're very limited number
of registers and they must be shared

136
00:12:11,069 --> 00:12:14,079
with the whole program and not just the
whole program but everything that's

137
00:12:14,079 --> 00:12:19,370
running on your CPU is sharing the same
registers so when they run out they need

138
00:12:19,370 --> 00:12:25,680
their data stored back to memory so
typical execution of machine instruction

139
00:12:25,680 --> 00:12:29,420
will be fetching data that the
instructions from memory into the

140
00:12:29,420 --> 00:12:35,050
internal CPU registers do the work on
the register or pork on that data save

141
00:12:35,050 --> 00:12:42,769
the data back to memory P so that
picture is kinda blurry but this is the

142
00:12:42,769 --> 00:12:49,839
registers that exist on x86 CPU
fortunately you don't have to memorize

143
00:12:49,839 --> 00:12:53,800
all these because most of them are
reserved and only accessible by the CPU

144
00:12:53,800 --> 00:12:57,310
so for writing a machine code there's a
very small subset of them that we are

145
00:12:57,310 --> 00:13:03,220
actually going to be using so as two
categories of them the general purpose

146
00:13:03,220 --> 00:13:07,449
registers and the special purpose
registers so general purpose registers

147
00:13:07,449 --> 00:13:14,040
we have those six that were allowed to
access and special purpose registers we

148
00:13:14,040 --> 00:13:21,580
have instruction pointer and the flags
register

149
00:13:21,580 --> 00:13:26,800
of the register as I mentioned earlier
we're going to focus just on 32 bit so

150
00:13:26,800 --> 00:13:31,250
all of these registers are 32 bit
registers and you know they're 32 bit

151
00:13:31,250 --> 00:13:33,680
registers because they all start with
the letter E

152
00:13:33,680 --> 00:13:37,790
so anytime you're looking at an x86
register if it starts with an E

153
00:13:37,790 --> 00:13:41,820
that stands for extended because it was
extended off of the original sixteen-bit

154
00:13:41,820 --> 00:13:44,630
architecture so register starts with E

155
00:13:44,630 --> 00:13:51,670
means the 32 bit version of its
sixteen-bit predecessor to serve a

156
00:13:51,670 --> 00:13:55,260
different look at all the ways we can
access the memory in those registers

157
00:13:55,260 --> 00:14:00,660
because x86 it's an old language but
Intel works really hard to keep

158
00:14:00,660 --> 00:14:04,430
backwards compatibility so instead of
wiping out all the functionality the

159
00:14:04,430 --> 00:14:11,780
constantly just adding on so going back
to its days of being a 16 bit

160
00:14:11,780 --> 00:14:16,500
architecture you can still access all
the 16 bit registers on these general

161
00:14:16,500 --> 00:14:22,540
purpose registers if I use the eversion
of their name so if I use DAX I'm

162
00:14:22,540 --> 00:14:27,350
accessing the full 32 bit value stored
in that register but I can still access

163
00:14:27,350 --> 00:14:32,510
smaller subsets of that register so if I
drop the EU and just use AIX I'm

164
00:14:32,510 --> 00:14:38,740
actually accessing just the lower 16
bits I can go even further and do either

165
00:14:38,740 --> 00:14:45,620
in AHR in ATL for accessing the high
eight bits of the low 16 bets or the low

166
00:14:45,620 --> 00:14:53,230
eight bits of the lower 16 bits and
that's only on these main for general

167
00:14:53,230 --> 00:15:00,120
purpose registers up here so they
classify eSign Udi's general purpose

168
00:15:00,120 --> 00:15:03,710
registers also but they don't have that
fine granularity where I can talk to

169
00:15:03,710 --> 00:15:07,440
smaller subset versions of them they can
only be fetched in their full 32 bit

170
00:15:07,440 --> 00:15:12,990
versions and then you have the stack
planner and the base pointer which also

171
00:15:12,990 --> 00:15:17,990
cannot be accessed in smaller subsets
but those are not registered that you're

172
00:15:17,990 --> 00:15:22,250
generally going to be using for a lot of
your data transfer data manipulations

173
00:15:22,250 --> 00:15:26,150
because they serve a specific purpose
and architecture your code probably

174
00:15:26,150 --> 00:15:29,769
won't work very well you manipulate
those too much

175
00:15:29,769 --> 00:15:36,739
rights let's talk about some actual x86
instructions so there are far more

176
00:15:36,739 --> 00:15:40,910
instructions then when I'm showing you
here but a lot of them are very small

177
00:15:40,910 --> 00:15:46,350
corner cases of use as I said x86 never
wants to break backwards compatibility

178
00:15:46,350 --> 00:15:50,279
so they just keep adding to the
architecture and it is essentially a

179
00:15:50,279 --> 00:15:54,649
huge behemoth at this point but these
are the useful instructions and because

180
00:15:54,649 --> 00:15:57,939
the stock is short the ones that are
bolded are the only ones were going to

181
00:15:57,939 --> 00:16:03,170
go over specifically but these are all I
would say if you want to learn x86 these

182
00:16:03,170 --> 00:16:08,879
are the basic setup instructions that
you should be familiar with so how I'm

183
00:16:08,879 --> 00:16:14,170
gonna write stuff on the next couple
slides so if anywhere you see that I've

184
00:16:14,170 --> 00:16:20,369
written in carrots a Reg 32 it means
that any of the 32 bit registers could

185
00:16:20,369 --> 00:16:26,049
be in that location it gets other
business granularity or if you just you

186
00:16:26,049 --> 00:16:30,019
read any of the registers could be used
their and any subset version of them

187
00:16:30,019 --> 00:16:36,269
simply means any memory address and you
think built off of the con- keyword

188
00:16:36,269 --> 00:16:40,589
a constant essentially what I mean by
that

189
00:16:40,589 --> 00:16:45,889
so let's look at the move instruction so
the move instruction and Intel syntax

190
00:16:45,889 --> 00:16:51,369
starts with the destination than the
source and simply move data from the

191
00:16:51,369 --> 00:16:57,399
source to destination and here's that
syntax so their specific combinations of

192
00:16:57,399 --> 00:17:02,670
their called operations which I get to
another site but their specific

193
00:17:02,670 --> 00:17:07,490
combinations of operations that you can
use for different instructions so this

194
00:17:07,490 --> 00:17:11,750
essentially just lays out the types of
operations the types of source and

195
00:17:11,750 --> 00:17:14,880
destination that you're allowed to peres
together there are certain restrictions

196
00:17:14,880 --> 00:17:19,039
for example you can't have two memory
addresses so you see I can't move from

197
00:17:19,039 --> 00:17:23,089
one memory address to another memory
address if I want that as my end goal I

198
00:17:23,089 --> 00:17:27,149
always have to have an intermediate step
out of memory and to register in a move

199
00:17:27,149 --> 00:17:32,659
that register into my new memory
location and a specific example is

200
00:17:32,659 --> 00:17:38,680
moving from EBS in TX to simply copy the
contents of ABX

201
00:17:38,680 --> 00:17:43,110
in TX to the move instruction is a
little deceiving that says move it's

202
00:17:43,110 --> 00:17:47,170
actually a copy it does not remove the
contents from EBS it simply copy it over

203
00:17:47,170 --> 00:17:56,310
to you so add a top on up to it simply
add the two operands together in stores

204
00:17:56,310 --> 00:18:02,550
the results in the first opera in here
is the combination of operations that

205
00:18:02,550 --> 00:18:07,350
you can use a simple example of us
adding the value 1000 constant value of

206
00:18:07,350 --> 00:18:12,580
ten into the rent to register some
specifically using this one out in a

207
00:18:12,580 --> 00:18:21,240
constant to register so subtract it does
the same thing I've to operations its

208
00:18:21,240 --> 00:18:24,720
attracts the second operand from the
first and restores the result in the

209
00:18:24,720 --> 00:18:30,490
first operand I can do it between two
registers so I can subtract but top

210
00:18:30,490 --> 00:18:37,710
eight bits of the lower 16 bits of a
register from the lower beds in store

211
00:18:37,710 --> 00:18:43,800
that into a oh I can subtract a constant
so the difference between I mention that

212
00:18:43,800 --> 00:18:50,720
were riding in assembly code so that we
can use pneumonic so I can say sub so

213
00:18:50,720 --> 00:18:54,340
while these both look like some
instructions at the assembly level at

214
00:18:54,340 --> 00:18:57,880
the Machine Co level these are actually
all encoded differently so each of these

215
00:18:57,880 --> 00:19:01,320
would result in different machine code
that sub instruction is different for

216
00:19:01,320 --> 00:19:06,380
each of these combinations which is one
of the managers of writing an assembly

217
00:19:06,380 --> 00:19:09,610
is that I don't have to memorize the
difference between all of these subs to

218
00:19:09,610 --> 00:19:12,600
me they're just subs I don't need to
know that each one has a different

219
00:19:12,600 --> 00:19:20,730
machine code behind it so the and offer
and it does a bitwise AND of the two

220
00:19:20,730 --> 00:19:27,200
operations and have the truth table
friends over here as a result back in

221
00:19:27,200 --> 00:19:32,680
opera and one hears all the different
operand combinations that you're allowed

222
00:19:32,680 --> 00:19:37,120
to use you'll notice none of these
allowed to memory addresses I don't

223
00:19:37,120 --> 00:19:42,150
believe there any x86 operands that
allow you to memory addresses as the two

224
00:19:42,150 --> 00:19:44,990
operands USF to have an intermediate

225
00:19:44,990 --> 00:19:52,670
so I can and in this case and it was a
constant of zero in hex and or so if I

226
00:19:52,670 --> 00:19:57,010
haven't and you feel to do one or two
dozen or the two operations and say

227
00:19:57,010 --> 00:20:02,270
there is owned and operated one hears
the various syntax and the same example

228
00:20:02,270 --> 00:20:09,570
but now it's an or and XOR Sodexo is an
extremely useful opera and it does a bit

229
00:20:09,570 --> 00:20:14,590
why is X are the two operands and saves
the results in opera and one so for

230
00:20:14,590 --> 00:20:19,740
those not familiar with an exclusive or
I usually just remember it as long as

231
00:20:19,740 --> 00:20:25,900
there's an odd number of one's when I
get a one so if I had to ones in this

232
00:20:25,900 --> 00:20:35,030
case a result in 20 as long as I only
have two ones I had a one in 2010 in

233
00:20:35,030 --> 00:20:42,140
online results in an exclusive or an
easy way that you'll see often use in

234
00:20:42,140 --> 00:20:47,000
x86 to set a registered 20 instead of
moving a zero-interest er actually

235
00:20:47,000 --> 00:20:52,490
faster and exclusive for it with itself
which will always set it to 0 so saying

236
00:20:52,490 --> 00:20:58,740
you register 20 X or any with itself so
enough enough is very popular and

237
00:20:58,740 --> 00:21:03,740
security world essentially just means no
operation it literally does nothing it

238
00:21:03,740 --> 00:21:09,170
just consumes a clock cycle on your CPU
compiled to exactly one by a machine

239
00:21:09,170 --> 00:21:16,020
code which is next 90 and this is
commonly used for legitimate uses our

240
00:21:16,020 --> 00:21:21,580
timing memory alignment something called
a branch delay slot but a lot of RISC

241
00:21:21,580 --> 00:21:26,210
architectures have potentially a
placeholder to be replaced later so

242
00:21:26,210 --> 00:21:30,470
people who are making code that is
designed to be hooked legitimate Lee to

243
00:21:30,470 --> 00:21:34,980
add functionality will often leaves
series of knots in their later when you

244
00:21:34,980 --> 00:21:39,550
apply patches are sent on updates you
can hook those knocks over right them

245
00:21:39,550 --> 00:21:44,100
with your new code to add new
functionality so where there used in

246
00:21:44,100 --> 00:21:49,860
hacking a lot is so how can likes to do
not said if you've ever done a buffer

247
00:21:49,860 --> 00:21:54,200
overflow gonna need something called on
up so it's actually just a series of

248
00:21:54,200 --> 00:21:56,120
knots because not still nothing

249
00:21:56,120 --> 00:22:00,210
the entire goal is that you don't know
where your code is jumping I'm gonna put

250
00:22:00,210 --> 00:22:04,540
instruction that does nothing just keep
doing nothing until it reaches my code

251
00:22:04,540 --> 00:22:09,070
so cracked games are not being out there
is ever a security section of the code

252
00:22:09,070 --> 00:22:13,100
that you simply don't want to run the
easiest way to get rid of it is simply

253
00:22:13,100 --> 00:22:16,760
not but out so just make every
instruction a 90 on the CPU will do

254
00:22:16,760 --> 00:22:24,620
nothing right so mentioned that there
are two main branches of syntax so I'm

255
00:22:24,620 --> 00:22:28,760
specifically showing new Intel syntax
and all of these slides but I do want

256
00:22:28,760 --> 00:22:34,510
you to know that AT&T syntax exist these
are the two main rivals I personally

257
00:22:34,510 --> 00:22:38,950
really don't like AT&T syntax but it is
popular you will run into it from time

258
00:22:38,950 --> 00:22:43,920
to time so the main difference that I
want you to know about is that the

259
00:22:43,920 --> 00:22:48,830
operands are in the opposite order so
for example the move I have a source and

260
00:22:48,830 --> 00:22:53,930
destination the flocked on AT&T syntax
if you're ever looking at someone else's

261
00:22:53,930 --> 00:22:57,820
code that Sprint and AT&T that usually
the biggest hurdle is understanding that

262
00:22:57,820 --> 00:23:04,750
the operands are switched the other
changes the operations typically contain

263
00:23:04,750 --> 00:23:12,070
a size in AT&T so the equivalent code
between AT&T and intel and the stable

264
00:23:12,070 --> 00:23:16,360
you see on the left hand side for Intel
I simply have a move but I'm not

265
00:23:16,360 --> 00:23:21,580
specifically specify the size whereas an
AT&T syntaxin specify moving along so

266
00:23:21,580 --> 00:23:27,150
move 32 bits of a wine into the ex
register so majority of their cause will

267
00:23:27,150 --> 00:23:34,830
have a size letter at the end so either
by a word or along the other difference

268
00:23:34,830 --> 00:23:39,170
is all registers are accessed with a
percent sign in front of them and AT&T

269
00:23:39,170 --> 00:23:42,920
syntax and that's the main reason that I
don't like typing AT&T it's just an

270
00:23:42,920 --> 00:23:46,780
extra key stroke every single time I
want access to register programmers are

271
00:23:46,780 --> 00:23:50,680
inherently lazy so I don't like doing
this and the last one is memory

272
00:23:50,680 --> 00:23:55,570
references are done with the print this
year's instead of the square brackets so

273
00:23:55,570 --> 00:24:01,740
here I come across AT&T syntax that the
difference between the main main to his

274
00:24:01,740 --> 00:24:02,500
calls

275
00:24:02,500 --> 00:24:07,010
so something called sis calls that can
be made from x86 to achieve some basic

276
00:24:07,010 --> 00:24:14,960
functionality it varies by OS but
specifically for Lennox nice list here

277
00:24:14,960 --> 00:24:20,710
but I'm just gonna tell you the main too
so sister right so it's handy to be able

278
00:24:20,710 --> 00:24:25,690
to write out to the console from x86 in
the way you do this there are several

279
00:24:25,690 --> 00:24:29,480
ways you could get a little more complex
and linked with a higher-level language

280
00:24:29,480 --> 00:24:34,700
like C or if you want to say strictly an
x86 you can use this cause long as

281
00:24:34,700 --> 00:24:41,100
you're targeting Linux with these
instructions and I one minute left some

282
00:24:41,100 --> 00:24:46,050
charge the next couple sides can write
out to the console so here's an example

283
00:24:46,050 --> 00:24:51,180
of writing out again if I want to slide
my email address will be up an awesome

284
00:24:51,180 --> 00:24:57,820
to make your application stop otherwise
your application will probably run until

285
00:24:57,820 --> 00:25:01,820
it hits invalid memory and you'll say so
if you want your application gracefully

286
00:25:01,820 --> 00:25:06,780
you can call system so here's how you
invoke it so here's a simple hello world

287
00:25:06,780 --> 00:25:13,170
in x86 I'm using that in Turks entity
that Cisco to write out the string and

288
00:25:13,170 --> 00:25:17,350
then I magnin in my application so
really quick if you get the sides to me

289
00:25:17,350 --> 00:25:22,550
I have instructions on how you build all
of this I have sample code again I was

290
00:25:22,550 --> 00:25:28,680
really trying our presentation so if
this interests you please email me

291
00:25:28,680 --> 00:25:31,480
there's a lot of useful stuff in here
you can use to start right here on

292
00:25:31,480 --> 00:25:36,560
things i've also boilerplate code how to
declare variables and how to run

293
00:25:36,560 --> 00:25:41,540
everything through JDBC how you can
debug x86 code doesn't work so I was

294
00:25:41,540 --> 00:25:44,580
going through all of this

295
00:25:44,580 --> 00:25:47,890
dangle the carrot so you guys all 14
slides look at all this useful

296
00:25:47,890 --> 00:25:53,860
information you could have so much
useful information and I went past my

297
00:25:53,860 --> 00:25:57,980
email address

298
00:25:57,980 --> 00:26:05,740
so 200 X Shadowfax a gmail email me I
love to give you the slides I love

299
00:26:05,740 --> 00:26:10,390
talking about x86 this is what I teach
at OSU so many questions you have

300
00:26:10,390 --> 00:26:15,640
sorry we don't get to the rest of the
content but how useful you show I'm just

301
00:26:15,640 --> 00:26:17,390
thinks

