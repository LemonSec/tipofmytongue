1
00:00:00,000 --> 00:00:06,600
one week yeah good<font color="#E5E5E5"> moring thank you for</font>

2
00:00:04,620 --> 00:00:09,900
coming so early<font color="#CCCCCC"> usually I'm not</font><font color="#E5E5E5"> the wake</font>

3
00:00:06,600 --> 00:00:14,639
of<font color="#E5E5E5"> these kind of owls okay so let's</font>

4
00:00:09,900 --> 00:00:16,139
<font color="#CCCCCC">start so today we're going to talk about</font>

5
00:00:14,639 --> 00:00:18,150
two new tools<font color="#E5E5E5"> that</font><font color="#CCCCCC"> we developed a</font>

6
00:00:16,139 --> 00:00:21,900
javelin networks and we will make them

7
00:00:18,150 --> 00:00:24,090
<font color="#CCCCCC">available for</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> we will talk how we</font>

8
00:00:21,900 --> 00:00:25,709
got to them so we<font color="#E5E5E5"> will need</font><font color="#CCCCCC"> to start</font><font color="#E5E5E5"> by</font>

9
00:00:24,090 --> 00:00:28,500
talking<font color="#CCCCCC"> about PowerShell in ready blue</font>

10
00:00:25,710 --> 00:00:33,079
how many people have got been to the

11
00:00:28,500 --> 00:00:36,329
training for PowerShell yeah amazing<font color="#CCCCCC"> and</font>

12
00:00:33,079 --> 00:00:38,520
<font color="#E5E5E5">we'll have to go into a little bit into</font>

13
00:00:36,329 --> 00:00:40,020
the internals of dotnet and PowerShell

14
00:00:38,520 --> 00:00:42,809
to<font color="#E5E5E5"> understand what happens behind the</font>

15
00:00:40,020 --> 00:00:44,850
scenes<font color="#E5E5E5"> and lastly we'll need to</font>

16
00:00:42,809 --> 00:00:50,099
understand how you how<font color="#E5E5E5"> you hook don't</font>

17
00:00:44,850 --> 00:00:52,440
net assemblies but let's<font color="#E5E5E5"> start with the</font>

18
00:00:50,100 --> 00:00:53,910
<font color="#CCCCCC">beginning so Who am I I'm Memorial I</font>

19
00:00:52,440 --> 00:00:56,250
manage the endpoint team at javelin

20
00:00:53,910 --> 00:00:59,489
networks we protect the Active<font color="#CCCCCC"> Directory</font>

21
00:00:56,250 --> 00:01:02,399
<font color="#E5E5E5">from the endpoint</font><font color="#CCCCCC"> I have more</font><font color="#E5E5E5"> than</font><font color="#CCCCCC"> a</font>

22
00:00:59,489 --> 00:01:04,830
decade experience<font color="#E5E5E5"> when I'm in a decade</font>

23
00:01:02,399 --> 00:01:06,479
I'm talking about<font color="#CCCCCC"> full time</font><font color="#E5E5E5"> job I</font>

24
00:01:04,830 --> 00:01:10,920
started<font color="#CCCCCC"> working when I was 14 at my</font>

25
00:01:06,479 --> 00:01:13,860
gossip<font color="#CCCCCC"> I've been like many of the</font>

26
00:01:10,920 --> 00:01:16,020
Israelis<font color="#E5E5E5"> in</font><font color="#CCCCCC"> the industry I did my time</font>

27
00:01:13,860 --> 00:01:19,439
in<font color="#CCCCCC"> the intelligence cops</font>

28
00:01:16,020 --> 00:01:23,610
<font color="#E5E5E5">I</font><font color="#CCCCCC"> developed</font><font color="#E5E5E5"> medical imaging software for</font>

29
00:01:19,439 --> 00:01:26,399
about<font color="#E5E5E5"> six</font><font color="#CCCCCC"> years and I</font><font color="#E5E5E5"> also been</font><font color="#CCCCCC"> Malvo</font>

30
00:01:23,610 --> 00:01:28,770
researcher at IBM<font color="#CCCCCC"> - still for</font><font color="#E5E5E5"> two years</font>

31
00:01:26,400 --> 00:01:32,280
and<font color="#CCCCCC"> for the past two years</font><font color="#E5E5E5"> I've been</font>

32
00:01:28,770 --> 00:01:37,048
<font color="#E5E5E5">with Java networks</font><font color="#CCCCCC"> I also have a BFA in</font>

33
00:01:32,280 --> 00:01:38,640
photography and I also<font color="#E5E5E5"> started my first</font>

34
00:01:37,049 --> 00:01:42,090
steps with the traditional woodworking

35
00:01:38,640 --> 00:01:45,689
woodworking which is working<font color="#CCCCCC"> with</font><font color="#E5E5E5"> solid</font>

36
00:01:42,090 --> 00:01:48,930
wood<font color="#E5E5E5"> without power tools</font><font color="#CCCCCC"> okay so let's</font>

37
00:01:45,689 --> 00:01:50,520
<font color="#E5E5E5">start I have to give you</font><font color="#CCCCCC"> a heads up when</font>

38
00:01:48,930 --> 00:01:54,540
we talk<font color="#CCCCCC"> about power shell attacks we are</font>

39
00:01:50,520 --> 00:01:56,579
so way up high on the<font color="#E5E5E5"> cliff</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> we</font>

40
00:01:54,540 --> 00:01:59,460
don't know what happens<font color="#E5E5E5"> beneath</font><font color="#CCCCCC"> our</font>

41
00:01:56,579 --> 00:02:01,229
heads<font color="#E5E5E5"> and in order</font><font color="#CCCCCC"> to understand</font><font color="#E5E5E5"> all the</font>

42
00:01:59,460 --> 00:02:03,240
<font color="#CCCCCC">things I'm talking about to talk to you</font>

43
00:02:01,229 --> 00:02:05,969
about we have<font color="#E5E5E5"> to jump from the top</font><font color="#CCCCCC"> of</font>

44
00:02:03,240 --> 00:02:08,628
the cliff down into the deepest layers

45
00:02:05,969 --> 00:02:11,500
of assembly so we have it in the middle

46
00:02:08,628 --> 00:02:13,959
<font color="#CCCCCC">usually it starts</font><font color="#E5E5E5"> with a phishing attack</font>

47
00:02:11,500 --> 00:02:15,430
<font color="#E5E5E5">then it goes to powershell scripts and</font>

48
00:02:13,960 --> 00:02:17,260
<font color="#CCCCCC">Powter scripts on on the powershell</font>

49
00:02:15,430 --> 00:02:19,030
engine and<font color="#E5E5E5"> polishin engine is system</font>

50
00:02:17,260 --> 00:02:23,230
management<font color="#CCCCCC"> automation the other which</font><font color="#E5E5E5"> I</font>

51
00:02:19,030 --> 00:02:24,400
hope all of you<font color="#E5E5E5"> know by now and the</font>

52
00:02:23,230 --> 00:02:27,299
system management I mentioned the other

53
00:02:24,400 --> 00:02:30,580
<font color="#CCCCCC">day is a dotnet</font><font color="#E5E5E5"> DLL so it works on</font>

54
00:02:27,300 --> 00:02:33,070
the.net framework<font color="#E5E5E5"> and</font><font color="#CCCCCC"> that works on</font>

55
00:02:30,580 --> 00:02:34,600
Windows and the end it goes<font color="#E5E5E5"> back to</font>

56
00:02:33,070 --> 00:02:36,280
assembly so we'll have to jump<font color="#E5E5E5"> all the</font>

57
00:02:34,600 --> 00:02:41,230
<font color="#E5E5E5">way down to the assembly and then jump</font>

58
00:02:36,280 --> 00:02:44,400
back up to to the<font color="#CCCCCC"> powershell and by</font>

59
00:02:41,230 --> 00:02:47,440
doing so<font color="#E5E5E5"> I can show you how we can both</font>

60
00:02:44,400 --> 00:02:50,020
reveal and guess<font color="#E5E5E5"> the security of</font>

61
00:02:47,440 --> 00:02:54,010
<font color="#E5E5E5">PowerShell</font><font color="#CCCCCC"> and also defeat all the</font>

62
00:02:50,020 --> 00:02:55,930
security features<font color="#CCCCCC"> in my</font><font color="#E5E5E5"> polishing but</font>

63
00:02:54,010 --> 00:03:00,070
then again we don't<font color="#CCCCCC"> have enough time to</font>

64
00:02:55,930 --> 00:03:02,380
talk<font color="#CCCCCC"> about</font><font color="#E5E5E5"> all of this so I won't dive</font>

65
00:03:00,070 --> 00:03:06,040
into the tiny<font color="#E5E5E5"> details I will try to dump</font>

66
00:03:02,380 --> 00:03:08,440
the dump it down<font color="#E5E5E5"> the</font><font color="#CCCCCC"> most I can and</font>

67
00:03:06,040 --> 00:03:10,690
Microsoft uses<font color="#CCCCCC"> GA</font><font color="#E5E5E5"> for just enough</font>

68
00:03:08,440 --> 00:03:12,310
administration I will use GA for just

69
00:03:10,690 --> 00:03:17,920
another news meant when I give my

70
00:03:12,310 --> 00:03:19,560
explanations<font color="#CCCCCC"> ok so we have to start by</font>

71
00:03:17,920 --> 00:03:23,290
talking<font color="#E5E5E5"> about the elephant in</font><font color="#CCCCCC"> the</font>

72
00:03:19,560 --> 00:03:24,870
PowerShell is not an<font color="#CCCCCC"> exploitation to and</font>

73
00:03:23,290 --> 00:03:27,040
it's important<font color="#E5E5E5"> to understand that</font>

74
00:03:24,870 --> 00:03:30,250
<font color="#E5E5E5">PowerShell is always used post</font>

75
00:03:27,040 --> 00:03:33,730
exploitation and when I say that<font color="#E5E5E5"> it</font>

76
00:03:30,250 --> 00:03:36,040
<font color="#E5E5E5">means the</font><font color="#CCCCCC"> point</font><font color="#E5E5E5"> attacker runs powder on</font>

77
00:03:33,730 --> 00:03:37,988
<font color="#E5E5E5">your machine she already has the ability</font>

78
00:03:36,040 --> 00:03:39,060
to execute<font color="#E5E5E5"> any code she wants on</font><font color="#CCCCCC"> that</font>

79
00:03:37,989 --> 00:03:43,560
machine

80
00:03:39,060 --> 00:03:46,720
however PowerShell does have powerful

81
00:03:43,560 --> 00:03:48,510
feature<font color="#E5E5E5"> for attackers which it allows</font>

82
00:03:46,720 --> 00:03:51,280
them<font color="#E5E5E5"> to live off</font><font color="#CCCCCC"> the land which means</font>

83
00:03:48,510 --> 00:03:53,350
<font color="#E5E5E5">they don't need to drop any file to disk</font>

84
00:03:51,280 --> 00:03:58,060
<font color="#CCCCCC">they can just on</font><font color="#E5E5E5"> PowerShell and escape</font>

85
00:03:53,350 --> 00:04:01,239
inside and the<font color="#E5E5E5"> i/o sees that you get</font>

86
00:03:58,060 --> 00:04:03,579
will be<font color="#E5E5E5"> much fewer than if five would</font>

87
00:04:01,239 --> 00:04:05,739
have been<font color="#CCCCCC"> thought and there are many</font>

88
00:04:03,579 --> 00:04:07,680
tools<font color="#CCCCCC"> that use the PowerShell</font><font color="#E5E5E5"> I don't</font>

89
00:04:05,739 --> 00:04:12,209
need to list you you know<font color="#CCCCCC"> Empire and a</font>

90
00:04:07,680 --> 00:04:14,260
lot<font color="#E5E5E5"> of other stuff and we have to start</font>

91
00:04:12,209 --> 00:04:17,200
looking<font color="#CCCCCC"> at it by looking</font><font color="#E5E5E5"> at</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> real</font>

92
00:04:14,260 --> 00:04:21,608
<font color="#CCCCCC">attacks so I will tell you about</font><font color="#E5E5E5"> report</font>

93
00:04:17,200 --> 00:04:23,440
by<font color="#E5E5E5"> Michael Gove Alec about</font><font color="#CCCCCC"> Finn 7</font><font color="#E5E5E5"> Finn 7</font>

94
00:04:21,608 --> 00:04:24,739
sometimes<font color="#E5E5E5"> they are referred</font><font color="#CCCCCC"> as carbon</font>

95
00:04:23,440 --> 00:04:26,889
arc<font color="#E5E5E5"> it's a</font>

96
00:04:24,740 --> 00:04:32,180
naturally motivated<font color="#E5E5E5"> or attacked</font><font color="#CCCCCC"> oh and</font>

97
00:04:26,889 --> 00:04:37,940
they<font color="#E5E5E5"> primarily target</font><font color="#CCCCCC"> the retailer and</font>

98
00:04:32,180 --> 00:04:39,979
<font color="#E5E5E5">the hospitality business the</font><font color="#CCCCCC"> 3600</font><font color="#E5E5E5"> known</font>

99
00:04:37,940 --> 00:04:44,090
<font color="#E5E5E5">compromised location and they stole over</font>

100
00:04:39,979 --> 00:04:46,580
15 million credit cards so far<font color="#E5E5E5"> the tool</font>

101
00:04:44,090 --> 00:04:48,500
the<font color="#E5E5E5"> tool</font><font color="#CCCCCC"> set is constantly evolving</font><font color="#E5E5E5"> and</font>

102
00:04:46,580 --> 00:04:50,659
<font color="#CCCCCC">it relies heavily on Association they're</font>

103
00:04:48,500 --> 00:04:53,360
using<font color="#E5E5E5"> cutting-edge technology</font><font color="#CCCCCC"> they watch</font>

104
00:04:50,660 --> 00:04:55,610
all the<font color="#CCCCCC"> conference's they they know</font>

105
00:04:53,360 --> 00:04:57,409
their stuff

106
00:04:55,610 --> 00:05:01,190
last August<font color="#CCCCCC"> three</font><font color="#E5E5E5"> members were arrested</font>

107
00:04:57,409 --> 00:05:02,840
<font color="#E5E5E5">from the team but don't slip thinking</font>

108
00:05:01,190 --> 00:05:03,969
that everything<font color="#CCCCCC"> okay the group operation</font>

109
00:05:02,840 --> 00:05:08,419
<font color="#E5E5E5">still persists</font>

110
00:05:03,970 --> 00:05:10,699
so how everything starts as usual it all

111
00:05:08,419 --> 00:05:12,349
starts with a phishing attack and of

112
00:05:10,699 --> 00:05:13,789
<font color="#E5E5E5">course you are all in security or all</font>

113
00:05:12,349 --> 00:05:16,610
<font color="#E5E5E5">the world that you should not click</font>

114
00:05:13,789 --> 00:05:19,219
enable macros but if you want a business

115
00:05:16,610 --> 00:05:21,889
<font color="#E5E5E5">and you get a letter</font><font color="#CCCCCC"> of demand from an</font>

116
00:05:19,220 --> 00:05:25,580
angry customer<font color="#E5E5E5"> you will click the enable</font>

117
00:05:21,889 --> 00:05:28,009
macros<font color="#E5E5E5"> we are not on the same</font><font color="#CCCCCC"> level</font>

118
00:05:25,580 --> 00:05:32,630
well doing IT stuff<font color="#CCCCCC"> they are managing a</font>

119
00:05:28,009 --> 00:05:34,099
<font color="#CCCCCC">business and</font><font color="#E5E5E5"> it's completely deaf so</font>

120
00:05:32,630 --> 00:05:36,139
when you click<font color="#E5E5E5"> that</font><font color="#CCCCCC"> a name with</font><font color="#E5E5E5"> Marco</font>

121
00:05:34,099 --> 00:05:38,330
what happens in background is<font color="#CCCCCC"> that a vbi</font>

122
00:05:36,139 --> 00:05:41,810
script<font color="#CCCCCC"> runs and as you can see that</font><font color="#E5E5E5"> VB</font>

123
00:05:38,330 --> 00:05:43,219
<font color="#E5E5E5">script invokes PowerShell and just to</font>

124
00:05:41,810 --> 00:05:45,050
<font color="#E5E5E5">show you the</font><font color="#CCCCCC"> sophistication they are not</font>

125
00:05:43,219 --> 00:05:47,900
<font color="#CCCCCC">on invoking PowerShell straight from</font>

126
00:05:45,050 --> 00:05:49,550
your<font color="#E5E5E5"> document they're using</font><font color="#CCCCCC"> WMI</font><font color="#E5E5E5"> so if</font>

127
00:05:47,900 --> 00:05:52,580
you have an endpoint<font color="#E5E5E5"> protection that you</font>

128
00:05:49,550 --> 00:05:54,139
<font color="#E5E5E5">relied on the next</font><font color="#CCCCCC"> gen to catch that</font>

129
00:05:52,580 --> 00:05:55,550
PowerShell eggs there is a child process

130
00:05:54,139 --> 00:05:58,009
<font color="#E5E5E5">of</font><font color="#CCCCCC"> all the eggs that</font><font color="#E5E5E5"> won't happen</font>

131
00:05:55,550 --> 00:06:01,610
because PowerShell will be a child

132
00:05:58,009 --> 00:06:03,770
process<font color="#E5E5E5"> of</font><font color="#CCCCCC"> dumbell WMI</font><font color="#E5E5E5"> and it will also</font>

133
00:06:01,610 --> 00:06:07,250
<font color="#E5E5E5">be</font><font color="#CCCCCC"> on</font><font color="#E5E5E5"> the services so it will also be on</font>

134
00:06:03,770 --> 00:06:11,180
<font color="#CCCCCC">sessions 0 so your endpoint protection</font>

135
00:06:07,250 --> 00:06:14,419
is caught off<font color="#CCCCCC"> guard on</font><font color="#E5E5E5"> this on this</font>

136
00:06:11,180 --> 00:06:16,610
instance<font color="#E5E5E5"> but it's also important to note</font>

137
00:06:14,419 --> 00:06:19,460
as I said before<font color="#CCCCCC"> that an attacker don't</font>

138
00:06:16,610 --> 00:06:22,159
have to run PowerShell<font color="#E5E5E5"> this is an</font>

139
00:06:19,460 --> 00:06:24,919
example of running<font color="#CCCCCC"> shell</font><font color="#E5E5E5"> code script</font>

140
00:06:22,159 --> 00:06:27,740
<font color="#E5E5E5">from VBA</font><font color="#CCCCCC"> bi mát weeks</font><font color="#E5E5E5"> it was published</font>

141
00:06:24,919 --> 00:06:30,139
<font color="#CCCCCC">in 2012</font><font color="#E5E5E5"> so you know how all this thing</font>

142
00:06:27,740 --> 00:06:33,229
is<font color="#CCCCCC"> it's</font><font color="#E5E5E5"> also incorporating incorporated</font>

143
00:06:30,139 --> 00:06:35,870
into<font color="#CCCCCC"> Metis flight and it allows you</font><font color="#E5E5E5"> to</font>

144
00:06:33,229 --> 00:06:37,310
run<font color="#E5E5E5"> any shell code you will you want so</font>

145
00:06:35,870 --> 00:06:38,880
<font color="#E5E5E5">that means you can also reflectively</font>

146
00:06:37,310 --> 00:06:41,830
load dll's into the

147
00:06:38,880 --> 00:06:44,469
what process<font color="#CCCCCC"> and you can do whatever you</font>

148
00:06:41,830 --> 00:06:45,789
want with the process but let's<font color="#E5E5E5"> get</font><font color="#CCCCCC"> back</font>

149
00:06:44,470 --> 00:06:47,800
to<font color="#CCCCCC"> Finland</font>

150
00:06:45,790 --> 00:06:49,870
so after a few<font color="#CCCCCC"> steps of the obfuscation</font>

151
00:06:47,800 --> 00:06:51,190
of the<font color="#CCCCCC"> scrip</font><font color="#E5E5E5"> the skit looks like this if</font>

152
00:06:49,870 --> 00:06:53,020
<font color="#E5E5E5">you're asking</font><font color="#CCCCCC"> yourself what are all</font>

153
00:06:51,190 --> 00:06:55,150
those slashes and stuff those are

154
00:06:53,020 --> 00:06:58,330
variable names and<font color="#E5E5E5"> function names so if</font>

155
00:06:55,150 --> 00:06:59,979
you do<font color="#CCCCCC"> put skated</font><font color="#E5E5E5"> a little bit more you</font>

156
00:06:58,330 --> 00:07:02,050
<font color="#E5E5E5">can find there and clip the clip and the</font>

157
00:06:59,979 --> 00:07:05,020
logic function of the function<font color="#CCCCCC"> of the</font>

158
00:07:02,050 --> 00:07:06,130
<font color="#E5E5E5">model and what it does it communicates</font>

159
00:07:05,020 --> 00:07:08,139
with<font color="#E5E5E5"> the</font><font color="#CCCCCC"> command-and-control</font><font color="#E5E5E5"> server</font>

160
00:07:06,130 --> 00:07:09,909
through<font color="#E5E5E5"> DNS so again if you had</font>

161
00:07:08,139 --> 00:07:12,370
<font color="#CCCCCC">firewalls that</font><font color="#E5E5E5"> you trusted to block the</font>

162
00:07:09,910 --> 00:07:14,680
communication<font color="#CCCCCC"> that</font><font color="#E5E5E5"> passing through your</font>

163
00:07:12,370 --> 00:07:18,970
file<font color="#E5E5E5"> was the passing</font><font color="#CCCCCC"> pool every security</font>

164
00:07:14,680 --> 00:07:21,430
<font color="#E5E5E5">mechanism you know we</font><font color="#CCCCCC"> can talk</font><font color="#E5E5E5"> about we</font>

165
00:07:18,970 --> 00:07:23,919
can<font color="#E5E5E5"> talk about</font><font color="#CCCCCC"> powershell text</font><font color="#E5E5E5"> without</font>

166
00:07:21,430 --> 00:07:25,840
talking about<font color="#E5E5E5"> office</font><font color="#CCCCCC"> keishon and the</font>

167
00:07:23,919 --> 00:07:28,560
most comprehensive<font color="#CCCCCC"> tool that we know is</font>

168
00:07:25,840 --> 00:07:33,460
they<font color="#E5E5E5"> invoke confiscation</font><font color="#CCCCCC"> by Daniel Bonin</font>

169
00:07:28,560 --> 00:07:35,229
which he wrote based on obfuscation

170
00:07:33,460 --> 00:07:37,359
techniques that<font color="#E5E5E5"> he's seen on the wild</font>

171
00:07:35,229 --> 00:07:39,909
it's not stuff<font color="#CCCCCC"> that he made up this</font><font color="#E5E5E5"> is</font>

172
00:07:37,360 --> 00:07:43,599
stuff that<font color="#CCCCCC"> actually exists</font><font color="#E5E5E5"> and is used</font>

173
00:07:39,910 --> 00:07:46,030
by threat actors<font color="#E5E5E5"> it's important to</font><font color="#CCCCCC"> note</font>

174
00:07:43,599 --> 00:07:47,770
<font color="#CCCCCC">that Daniel and Lee Holmes</font><font color="#E5E5E5"> also</font>

175
00:07:46,030 --> 00:07:50,580
developed a tool called revoke of

176
00:07:47,770 --> 00:07:54,639
<font color="#CCCCCC">possession</font><font color="#E5E5E5"> that allows you to detect</font>

177
00:07:50,580 --> 00:08:00,039
obfuscated<font color="#CCCCCC"> scripts offline and offline</font>

178
00:07:54,639 --> 00:08:02,260
is important<font color="#E5E5E5"> remark</font><font color="#CCCCCC"> so let's see some</font>

179
00:08:00,039 --> 00:08:03,909
<font color="#CCCCCC">examples</font><font color="#E5E5E5"> about obfuscation</font><font color="#CCCCCC"> I'll start</font>

180
00:08:02,260 --> 00:08:05,320
with the most<font color="#CCCCCC"> simple command</font><font color="#E5E5E5"> Who am I</font>

181
00:08:03,910 --> 00:08:06,970
every attacker would like to run you

182
00:08:05,320 --> 00:08:08,740
this command<font color="#E5E5E5"> on</font><font color="#CCCCCC"> your machine but it's</font>

183
00:08:06,970 --> 00:08:11,800
also gets a little<font color="#E5E5E5"> philosophical when</font>

184
00:08:08,740 --> 00:08:14,199
you start to lose<font color="#CCCCCC"> your own identity</font><font color="#E5E5E5"> so</font>

185
00:08:11,800 --> 00:08:17,410
<font color="#E5E5E5">you can do string token manipulation</font><font color="#CCCCCC"> and</font>

186
00:08:14,199 --> 00:08:22,690
you can split<font color="#E5E5E5"> the string can also</font>

187
00:08:17,410 --> 00:08:25,630
reverse<font color="#CCCCCC"> the order you</font><font color="#E5E5E5"> can also use</font>

188
00:08:22,690 --> 00:08:29,199
<font color="#CCCCCC">compression</font><font color="#E5E5E5"> and you can also use what</font>

189
00:08:25,630 --> 00:08:33,760
the is this but this is this is<font color="#CCCCCC"> Who</font>

190
00:08:29,199 --> 00:08:36,159
am I so you might feel a<font color="#CCCCCC"> little bit</font>

191
00:08:33,760 --> 00:08:37,900
<font color="#CCCCCC">discouraged but don't be microsoft</font><font color="#E5E5E5"> came</font>

192
00:08:36,159 --> 00:08:39,849
to the rescue<font color="#CCCCCC"> and they published</font>

193
00:08:37,900 --> 00:08:42,189
<font color="#CCCCCC">PowerShell</font><font color="#E5E5E5"> how it's the blue team which</font>

194
00:08:39,849 --> 00:08:47,500
is a PowerShell<font color="#E5E5E5"> which is Microsoft Bible</font>

195
00:08:42,190 --> 00:08:49,510
for powers<font color="#E5E5E5"> of security and every time I</font>

196
00:08:47,500 --> 00:08:51,880
see<font color="#E5E5E5"> Lee</font><font color="#CCCCCC"> Holmes</font><font color="#E5E5E5"> see you here in the</font>

197
00:08:49,510 --> 00:08:52,640
audience<font color="#E5E5E5"> thank you for coming</font><font color="#CCCCCC"> I see a</font>

198
00:08:51,880 --> 00:08:54,110
person<font color="#E5E5E5"> that</font>

199
00:08:52,640 --> 00:08:55,790
he understands security because

200
00:08:54,110 --> 00:08:57,350
sometimes when we talk and<font color="#E5E5E5"> we do our</font>

201
00:08:55,790 --> 00:08:59,660
<font color="#E5E5E5">research we'll get caught up with the</font>

202
00:08:57,350 --> 00:09:01,870
technical details<font color="#E5E5E5"> of specific stuff that</font>

203
00:08:59,660 --> 00:09:05,030
we forget<font color="#E5E5E5"> to see</font><font color="#CCCCCC"> the whole picture and</font>

204
00:09:01,870 --> 00:09:08,330
<font color="#CCCCCC">when Lee holmes talks about it you see</font>

205
00:09:05,030 --> 00:09:11,180
that<font color="#E5E5E5"> he mentions all the time that the</font>

206
00:09:08,330 --> 00:09:14,090
attacker has the ability to<font color="#E5E5E5"> encode and</font>

207
00:09:11,180 --> 00:09:15,620
he has she has<font color="#E5E5E5"> the</font><font color="#CCCCCC"> ability to bypass</font><font color="#E5E5E5"> a</font>

208
00:09:14,090 --> 00:09:17,300
<font color="#CCCCCC">lot of</font><font color="#E5E5E5"> protection mechanism that you</font>

209
00:09:15,620 --> 00:09:19,610
<font color="#E5E5E5">have and the best thing</font><font color="#CCCCCC"> you can have</font><font color="#E5E5E5"> is</font>

210
00:09:17,300 --> 00:09:21,709
to<font color="#CCCCCC"> have</font><font color="#E5E5E5"> visibility on the attack because</font>

211
00:09:19,610 --> 00:09:23,540
once you have<font color="#E5E5E5"> visibility you can trace</font>

212
00:09:21,710 --> 00:09:25,490
back<font color="#CCCCCC"> the</font><font color="#E5E5E5"> attack and find out what</font>

213
00:09:23,540 --> 00:09:28,819
happened<font color="#E5E5E5"> and what was compromised</font>

214
00:09:25,490 --> 00:09:30,640
exactly so let's<font color="#E5E5E5"> see all the security</font>

215
00:09:28,820 --> 00:09:33,770
features<font color="#CCCCCC"> that</font><font color="#E5E5E5"> are incorporated into</font>

216
00:09:30,640 --> 00:09:36,199
PowerShell the first one is<font color="#CCCCCC"> capable of</font>

217
00:09:33,770 --> 00:09:38,750
logging so every time most of the time

218
00:09:36,200 --> 00:09:41,030
that<font color="#E5E5E5"> escape is being evaluated it will</font>

219
00:09:38,750 --> 00:09:43,010
save you<font color="#CCCCCC"> the</font><font color="#E5E5E5"> sky block and this feature</font>

220
00:09:41,030 --> 00:09:46,310
<font color="#E5E5E5">is enabled by default for suspicious</font>

221
00:09:43,010 --> 00:09:48,710
suspicious<font color="#E5E5E5"> escapes so you don't need to</font>

222
00:09:46,310 --> 00:09:50,510
enable it but you should enable it for

223
00:09:48,710 --> 00:09:52,820
<font color="#CCCCCC">all the</font><font color="#E5E5E5"> scripts that run on your machine</font>

224
00:09:50,510 --> 00:09:56,689
because that's a really good visibility

225
00:09:52,820 --> 00:09:58,970
feature the<font color="#E5E5E5"> next one is a pipeline or</font>

226
00:09:56,690 --> 00:10:00,980
<font color="#E5E5E5">module</font><font color="#CCCCCC"> logging</font><font color="#E5E5E5"> which gives you much more</font>

227
00:09:58,970 --> 00:10:04,430
<font color="#CCCCCC">information on each scripts that</font><font color="#E5E5E5"> you run</font>

228
00:10:00,980 --> 00:10:06,890
and each command that is invoked<font color="#CCCCCC"> a</font>

229
00:10:04,430 --> 00:10:08,870
partial command the next one is

230
00:10:06,890 --> 00:10:13,010
transcription<font color="#E5E5E5"> over-the-shoulder</font>

231
00:10:08,870 --> 00:10:14,600
logging and that one<font color="#E5E5E5"> logs for each</font>

232
00:10:13,010 --> 00:10:16,850
process of PowerShell<font color="#CCCCCC"> and again I'm</font>

233
00:10:14,600 --> 00:10:18,980
<font color="#E5E5E5">saying partial its system management</font>

234
00:10:16,850 --> 00:10:22,760
<font color="#CCCCCC">automation every time that DLL is loaded</font>

235
00:10:18,980 --> 00:10:25,220
into somewhere and it saves the<font color="#E5E5E5"> input at</font>

236
00:10:22,760 --> 00:10:28,340
an<font color="#E5E5E5"> output of the shell so for each</font>

237
00:10:25,220 --> 00:10:30,170
process<font color="#E5E5E5"> you will get</font><font color="#CCCCCC"> a txt</font><font color="#E5E5E5"> file like</font>

238
00:10:28,340 --> 00:10:32,870
this<font color="#E5E5E5"> gives you a lot</font><font color="#CCCCCC"> of data about</font><font color="#E5E5E5"> the</font>

239
00:10:30,170 --> 00:10:35,300
session and all the<font color="#CCCCCC"> input-output</font>

240
00:10:32,870 --> 00:10:37,520
microsoft recommends that you create a

241
00:10:35,300 --> 00:10:39,170
shared folder<font color="#E5E5E5"> and you give everyone</font>

242
00:10:37,520 --> 00:10:41,660
permission<font color="#E5E5E5"> to write and create on that</font>

243
00:10:39,170 --> 00:10:43,849
folder but<font color="#E5E5E5"> you add the creative owner</font>

244
00:10:41,660 --> 00:10:47,420
deny on everything<font color="#CCCCCC"> so this</font><font color="#E5E5E5"> is like a</font>

245
00:10:43,850 --> 00:10:49,190
game of ACLs which allows everyone to

246
00:10:47,420 --> 00:10:50,839
<font color="#CCCCCC">create and write to logs but no one can</font>

247
00:10:49,190 --> 00:10:53,150
actually list<font color="#E5E5E5"> the folder and</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> leader</font>

248
00:10:50,840 --> 00:10:55,850
files after<font color="#CCCCCC"> it's been created</font><font color="#E5E5E5"> so this is</font>

249
00:10:53,150 --> 00:10:57,410
also<font color="#E5E5E5"> a powerful logging mechanism and</font>

250
00:10:55,850 --> 00:11:01,430
gives you a lot<font color="#CCCCCC"> of visibility and not</font>

251
00:10:57,410 --> 00:11:04,040
happen on attacks now<font color="#CCCCCC"> to</font><font color="#E5E5E5"> more feet</font>

252
00:11:01,430 --> 00:11:05,660
so yeah<font color="#CCCCCC"> show</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> there constrain</font>

253
00:11:04,040 --> 00:11:06,810
language mode is another feature that

254
00:11:05,660 --> 00:11:08,610
<font color="#E5E5E5">allows you</font><font color="#CCCCCC"> to</font>

255
00:11:06,810 --> 00:11:12,779
as it says as the name<font color="#E5E5E5"> suggests</font>

256
00:11:08,610 --> 00:11:16,920
<font color="#CCCCCC">constrain the actions you can perform on</font>

257
00:11:12,779 --> 00:11:20,880
<font color="#CCCCCC">the</font><font color="#E5E5E5"> PowerShell on PowerShell so you</font>

258
00:11:16,920 --> 00:11:25,529
won't<font color="#CCCCCC"> be able</font><font color="#E5E5E5"> to execute commands that</font>

259
00:11:20,880 --> 00:11:27,570
have the ability<font color="#CCCCCC"> to be malicious two</font>

260
00:11:25,529 --> 00:11:28,740
more features<font color="#CCCCCC"> that we have protected</font>

261
00:11:27,570 --> 00:11:30,180
event logging and just enough

262
00:11:28,740 --> 00:11:32,160
administration I won't go into<font color="#E5E5E5"> the</font>

263
00:11:30,180 --> 00:11:34,229
<font color="#CCCCCC">befell</font><font color="#E5E5E5"> into the details because it's not</font>

264
00:11:32,160 --> 00:11:35,880
related to<font color="#E5E5E5"> a talk but</font><font color="#CCCCCC"> I'll</font><font color="#E5E5E5"> just</font><font color="#CCCCCC"> say</font>

265
00:11:34,230 --> 00:11:39,930
<font color="#E5E5E5">protected the event logging allows you</font>

266
00:11:35,880 --> 00:11:42,510
to use a symmetric encryption on<font color="#E5E5E5"> the</font>

267
00:11:39,930 --> 00:11:46,469
load so we<font color="#E5E5E5"> want you won't have clear</font>

268
00:11:42,510 --> 00:11:47,939
text passwords on the logs and just

269
00:11:46,470 --> 00:11:52,139
enough administration is<font color="#E5E5E5"> concept that</font>

270
00:11:47,940 --> 00:11:54,240
<font color="#CCCCCC">you can lead users of a moat</font><font color="#E5E5E5"> PowerShell</font>

271
00:11:52,139 --> 00:11:56,339
to<font color="#CCCCCC"> a specific</font><font color="#E5E5E5"> task</font><font color="#CCCCCC"> so they won't be</font><font color="#E5E5E5"> able</font>

272
00:11:54,240 --> 00:11:59,910
<font color="#E5E5E5">to execute anything other than the</font><font color="#CCCCCC"> nd</font>

273
00:11:56,339 --> 00:12:01,860
<font color="#CCCCCC">shoot and now we're</font><font color="#E5E5E5"> getting to</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> crown</font>

274
00:11:59,910 --> 00:12:04,949
<font color="#E5E5E5">jewel of a PowerShell which is the</font>

275
00:12:01,860 --> 00:12:06,630
antimatter<font color="#CCCCCC"> scan interface and it's</font>

276
00:12:04,949 --> 00:12:10,050
actually<font color="#E5E5E5"> not a powerful feature it's</font>

277
00:12:06,630 --> 00:12:13,290
Windows 10 feature and the way it works

278
00:12:10,050 --> 00:12:15,029
is that<font color="#E5E5E5"> every person</font><font color="#CCCCCC"> that writes a soft</font>

279
00:12:13,290 --> 00:12:17,310
<font color="#E5E5E5">or can interact with it</font><font color="#CCCCCC"> and in this case</font>

280
00:12:15,029 --> 00:12:19,800
<font color="#CCCCCC">PowerShell before</font><font color="#E5E5E5"> running scripts it</font>

281
00:12:17,310 --> 00:12:22,439
goes to a mess I say we do the<font color="#CCCCCC"> heavy</font>

282
00:12:19,800 --> 00:12:24,930
script<font color="#E5E5E5"> do you think it's</font><font color="#CCCCCC"> okay and I</font>

283
00:12:22,440 --> 00:12:26,639
<font color="#CCCCCC">looked at the escapes let me check this</font>

284
00:12:24,930 --> 00:12:30,239
out for you<font color="#CCCCCC"> and it takes</font><font color="#E5E5E5"> it to all the</font>

285
00:12:26,639 --> 00:12:32,639
endpoint protection that you<font color="#E5E5E5"> have on</font>

286
00:12:30,240 --> 00:12:35,100
<font color="#E5E5E5">your machine the ones that are using</font>

287
00:12:32,639 --> 00:12:37,440
<font color="#CCCCCC">Emma science tell them look dude</font><font color="#E5E5E5"> this</font>

288
00:12:35,100 --> 00:12:39,839
<font color="#CCCCCC">say partially gave me this</font><font color="#E5E5E5"> cape do you</font>

289
00:12:37,440 --> 00:12:41,550
think it's okay to<font color="#E5E5E5"> hand and they look at</font>

290
00:12:39,839 --> 00:12:43,350
<font color="#E5E5E5">it and then Windows Defender Center I</font>

291
00:12:41,550 --> 00:12:45,599
know this one this<font color="#CCCCCC"> is</font><font color="#E5E5E5"> the malicious</font>

292
00:12:43,350 --> 00:12:49,470
don't don't do it so it<font color="#E5E5E5"> goes back to</font>

293
00:12:45,600 --> 00:12:54,060
PowerShell<font color="#CCCCCC"> and pouches says I won't run</font>

294
00:12:49,470 --> 00:12:58,079
it<font color="#E5E5E5"> and yeah so this</font><font color="#CCCCCC"> is basically how</font><font color="#E5E5E5"> it</font>

295
00:12:54,060 --> 00:13:00,510
<font color="#CCCCCC">works</font><font color="#E5E5E5"> it's just asking</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> permission to</font>

296
00:12:58,079 --> 00:13:02,849
<font color="#E5E5E5">do stuff those are the vendors that</font>

297
00:13:00,510 --> 00:13:05,550
currently support<font color="#E5E5E5"> a</font><font color="#CCCCCC"> MSI so obviously</font>

298
00:13:02,850 --> 00:13:08,010
Windows Defender AVG<font color="#E5E5E5"> be defender ESET</font>

299
00:13:05,550 --> 00:13:10,709
dr.<font color="#E5E5E5"> Webb</font><font color="#CCCCCC"> a vest and</font>

300
00:13:08,010 --> 00:13:14,519
Kaspersky and<font color="#E5E5E5"> code slack but there is a</font>

301
00:13:10,709 --> 00:13:17,489
problem with the MSI because as I<font color="#CCCCCC"> said</font>

302
00:13:14,519 --> 00:13:19,560
<font color="#E5E5E5">before when an attacker is executing</font>

303
00:13:17,490 --> 00:13:19,990
code in<font color="#E5E5E5"> your system she already has the</font>

304
00:13:19,560 --> 00:13:22,359
ability

305
00:13:19,990 --> 00:13:24,459
to do what<font color="#E5E5E5"> she wants with a user space</font>

306
00:13:22,360 --> 00:13:25,750
and this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> the user</font><font color="#E5E5E5"> space that is</font>

307
00:13:24,459 --> 00:13:29,760
<font color="#CCCCCC">vulnerable</font><font color="#E5E5E5"> because once you have</font>

308
00:13:25,750 --> 00:13:33,430
execution permission you can modify

309
00:13:29,760 --> 00:13:35,020
<font color="#E5E5E5">every part of these layers and what do</font>

310
00:13:33,430 --> 00:13:37,239
we show you later is that<font color="#E5E5E5"> there is</font>

311
00:13:35,020 --> 00:13:40,420
another<font color="#CCCCCC"> layer that we all</font><font color="#E5E5E5"> of us forgot</font>

312
00:13:37,240 --> 00:13:43,500
which is the dotnet framework<font color="#CCCCCC"> so let's</font>

313
00:13:40,420 --> 00:13:46,000
see<font color="#E5E5E5"> some bypasses to a MSI and this is</font>

314
00:13:43,500 --> 00:13:51,160
one of<font color="#E5E5E5"> the most known</font><font color="#CCCCCC"> its names I</font>

315
00:13:46,000 --> 00:13:52,540
bypassed<font color="#CCCCCC"> by with a single twit and it</font>

316
00:13:51,160 --> 00:13:56,050
was<font color="#CCCCCC"> written</font><font color="#E5E5E5"> by a mad</font><font color="#CCCCCC"> Corrado</font>

317
00:13:52,540 --> 00:13:58,990
and the way<font color="#E5E5E5"> PowerShell works the first</font>

318
00:13:56,050 --> 00:14:01,569
<font color="#E5E5E5">time it needs to call a MSI it will try</font>

319
00:13:58,990 --> 00:14:04,000
to<font color="#E5E5E5"> initiate type load the DLL and</font><font color="#CCCCCC"> if it</font>

320
00:14:01,570 --> 00:14:06,610
<font color="#E5E5E5">fails it saves</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> boolean flag saying</font>

321
00:14:04,000 --> 00:14:10,149
<font color="#E5E5E5">that the initialization failed and it</font>

322
00:14:06,610 --> 00:14:13,510
will not try to call MSI again

323
00:14:10,149 --> 00:14:16,420
so<font color="#CCCCCC"> what Matt did he just used reflection</font>

324
00:14:13,510 --> 00:14:20,880
to find this flag and set it to<font color="#CCCCCC"> 2 so how</font>

325
00:14:16,420 --> 00:14:24,279
<font color="#E5E5E5">shall we never call MSI again but this</font>

326
00:14:20,880 --> 00:14:26,680
line is<font color="#CCCCCC"> now this escape is now known to</font>

327
00:14:24,279 --> 00:14:29,649
<font color="#E5E5E5">Microsoft so they added it</font><font color="#CCCCCC"> to em side</font>

328
00:14:26,680 --> 00:14:35,410
because it has to<font color="#CCCCCC"> pass first</font><font color="#E5E5E5"> to MSI to</font>

329
00:14:29,649 --> 00:14:38,740
<font color="#E5E5E5">be evaluated but again if you use some</font>

330
00:14:35,410 --> 00:14:41,620
modification you<font color="#E5E5E5"> can bypass</font><font color="#CCCCCC"> aim studies</font>

331
00:14:38,740 --> 00:14:44,589
for detecting this script<font color="#CCCCCC"> so this is</font>

332
00:14:41,620 --> 00:14:45,370
like the top layer<font color="#CCCCCC"> of</font><font color="#E5E5E5"> PowerShell bypass</font>

333
00:14:44,589 --> 00:14:49,000
<font color="#E5E5E5">let's see</font>

334
00:14:45,370 --> 00:14:54,149
another bypass<font color="#E5E5E5"> that</font><font color="#CCCCCC"> attacks the</font><font color="#E5E5E5"> which</font>

335
00:14:49,000 --> 00:14:58,089
receives time win32 layer and this<font color="#E5E5E5"> is a</font>

336
00:14:54,149 --> 00:15:02,050
research by<font color="#CCCCCC"> avi Gimple</font><font color="#E5E5E5"> and what he did</font>

337
00:14:58,089 --> 00:15:04,660
he<font color="#CCCCCC"> just overly level right</font><font color="#E5E5E5"> 3 bytes on a</font>

338
00:15:02,050 --> 00:15:07,510
<font color="#E5E5E5">msi</font><font color="#CCCCCC"> dll on the function that</font><font color="#E5E5E5"> checks</font>

339
00:15:04,660 --> 00:15:09,610
checks your<font color="#CCCCCC"> bottles</font><font color="#E5E5E5"> and what happens</font>

340
00:15:07,510 --> 00:15:12,880
from<font color="#E5E5E5"> now on is that whenever you call</font>

341
00:15:09,610 --> 00:15:14,890
the<font color="#E5E5E5"> MSI scan Bothell function it thinks</font>

342
00:15:12,880 --> 00:15:16,570
that<font color="#E5E5E5"> the length of the string</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> 0 so it</font>

343
00:15:14,890 --> 00:15:21,040
<font color="#CCCCCC">will tell you the worst thing</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> always</font>

344
00:15:16,570 --> 00:15:23,740
<font color="#E5E5E5">a JIT you can run it yes so that</font><font color="#CCCCCC"> was the</font>

345
00:15:21,040 --> 00:15:26,079
lower level and this<font color="#E5E5E5"> is like</font><font color="#CCCCCC"> le</font>

346
00:15:23,740 --> 00:15:28,150
<font color="#E5E5E5">traveling this is what one</font><font color="#CCCCCC"> of the</font><font color="#E5E5E5"> things</font>

347
00:15:26,079 --> 00:15:31,750
that got<font color="#CCCCCC"> me started in this research to</font>

348
00:15:28,150 --> 00:15:33,340
do the<font color="#E5E5E5"> baby shellfish and this is work</font>

349
00:15:31,750 --> 00:15:36,280
by<font color="#CCCCCC"> encode</font><font color="#E5E5E5"> that the</font>

350
00:15:33,340 --> 00:15:38,940
which<font color="#CCCCCC"> last</font><font color="#E5E5E5"> they'll become it's a tool</font>

351
00:15:36,280 --> 00:15:42,250
called<font color="#CCCCCC"> psi MSI and it allows you to</font>

352
00:15:38,940 --> 00:15:43,780
write one big malicious script<font color="#CCCCCC"> and feed</font>

353
00:15:42,250 --> 00:15:46,180
it to<font color="#CCCCCC"> a</font><font color="#E5E5E5"> I'm sorry</font>

354
00:15:43,780 --> 00:15:49,689
and now I am sighs tell you exactly

355
00:15:46,180 --> 00:15:51,699
which<font color="#E5E5E5"> lines offending MSI and this tool</font>

356
00:15:49,690 --> 00:15:55,630
also allows you to minimally<font color="#E5E5E5"> obfuscate</font>

357
00:15:51,700 --> 00:15:58,420
<font color="#E5E5E5">those specific lines to allow them to be</font>

358
00:15:55,630 --> 00:16:02,470
to bypass<font color="#CCCCCC"> a.m.</font><font color="#E5E5E5"> sighs so this</font><font color="#CCCCCC"> bypass is</font>

359
00:15:58,420 --> 00:16:06,760
like a<font color="#E5E5E5"> bypass to the third</font><font color="#CCCCCC"> level</font><font color="#E5E5E5"> the</font>

360
00:16:02,470 --> 00:16:11,130
<font color="#CCCCCC">level of the security</font><font color="#E5E5E5"> windows and not on</font>

361
00:16:06,760 --> 00:16:13,660
<font color="#E5E5E5">the win32 order the</font><font color="#CCCCCC"> powershell</font><font color="#E5E5E5"> process</font>

362
00:16:11,130 --> 00:16:17,050
so this is like a very<font color="#E5E5E5"> powerful and I</font>

363
00:16:13,660 --> 00:16:18,880
<font color="#E5E5E5">got wondering why you can bypass the</font>

364
00:16:17,050 --> 00:16:21,430
security windows with such a<font color="#E5E5E5"> simple</font>

365
00:16:18,880 --> 00:16:23,980
<font color="#CCCCCC">layout post occasion so I place the hook</font>

366
00:16:21,430 --> 00:16:27,430
on<font color="#CCCCCC"> AMS I scan content and I wanted</font><font color="#E5E5E5"> to</font>

367
00:16:23,980 --> 00:16:31,080
see<font color="#CCCCCC"> what strings that</font><font color="#E5E5E5"> he'd get so I gave</font>

368
00:16:27,430 --> 00:16:33,969
it Who am I and obviously<font color="#CCCCCC"> I got Who am</font><font color="#E5E5E5"> I</font>

369
00:16:31,080 --> 00:16:38,320
<font color="#E5E5E5">and then I gave</font><font color="#CCCCCC"> it what the</font>

370
00:16:33,970 --> 00:16:40,780
and then I got each line is another call

371
00:16:38,320 --> 00:16:43,150
to<font color="#E5E5E5"> msi scan battle</font><font color="#CCCCCC"> and you're still</font>

372
00:16:40,780 --> 00:16:43,689
seeing what the here but wait it

373
00:16:43,150 --> 00:16:46,000
gets better

374
00:16:43,690 --> 00:16:47,770
<font color="#E5E5E5">then you can see the last two lines are</font>

375
00:16:46,000 --> 00:16:49,570
human right readable and most

376
00:16:47,770 --> 00:16:51,130
importantly the<font color="#E5E5E5"> regex</font>

377
00:16:49,570 --> 00:16:53,320
<font color="#E5E5E5">readable because</font><font color="#CCCCCC"> this is how your</font>

378
00:16:51,130 --> 00:16:56,020
endpoint security checks for those lines

379
00:16:53,320 --> 00:16:58,710
so that's<font color="#CCCCCC"> good job Microsoft but still</font>

380
00:16:56,020 --> 00:17:03,040
how is it possible that you bypass

381
00:16:58,710 --> 00:17:05,380
<font color="#CCCCCC">inside with the simple obfuscation</font><font color="#E5E5E5"> so I</font>

382
00:17:03,040 --> 00:17:07,540
gave it this simple obfuscation

383
00:17:05,380 --> 00:17:11,260
technique the string token manipulation

384
00:17:07,540 --> 00:17:14,889
I read it and that's<font color="#E5E5E5"> it that's the</font><font color="#CCCCCC"> only</font>

385
00:17:11,260 --> 00:17:18,579
line that<font color="#E5E5E5"> a msi gets so I started</font>

386
00:17:14,890 --> 00:17:20,610
wondering why is this happening<font color="#CCCCCC"> and I</font>

387
00:17:18,579 --> 00:17:23,490
got a<font color="#CCCCCC"> solution how to make it better</font><font color="#E5E5E5"> so</font>

388
00:17:20,609 --> 00:17:27,599
the solution is obviously baby shellfish

389
00:17:23,490 --> 00:17:27,599
and<font color="#E5E5E5"> you want to see a demo</font>

390
00:17:35,120 --> 00:17:41,790
okay so<font color="#CCCCCC"> maybe</font><font color="#E5E5E5"> shellfish is</font><font color="#CCCCCC"> 2dl DLLs the</font>

391
00:17:39,510 --> 00:17:44,430
<font color="#CCCCCC">coop of fire and</font><font color="#E5E5E5"> the baby shellfish</font>

392
00:17:41,790 --> 00:17:46,020
dotnet model<font color="#E5E5E5"> you have a fancy</font>

393
00:17:44,430 --> 00:17:48,960
installation<font color="#E5E5E5"> batch escape that you can</font>

394
00:17:46,020 --> 00:17:51,780
provide it with the parameters if you

395
00:17:48,960 --> 00:17:53,310
want to<font color="#E5E5E5"> output to the debug out if you</font>

396
00:17:51,780 --> 00:17:55,790
want to scan the content with<font color="#CCCCCC"> a</font><font color="#E5E5E5"> MSI if</font>

397
00:17:53,310 --> 00:17:58,889
you want to<font color="#CCCCCC"> look</font><font color="#E5E5E5"> there in situ and</font>

398
00:17:55,790 --> 00:18:02,280
folders for<font color="#E5E5E5"> the logs or the and the</font>

399
00:17:58,890 --> 00:18:05,940
dealers for the<font color="#CCCCCC"> baby shellfish and now</font>

400
00:18:02,280 --> 00:18:09,330
when<font color="#E5E5E5"> you run PowerShell you already have</font>

401
00:18:05,940 --> 00:18:11,700
<font color="#E5E5E5">babel shellfish inside and it doesn't</font>

402
00:18:09,330 --> 00:18:14,730
matter which way you want<font color="#CCCCCC"> PowerShell</font>

403
00:18:11,700 --> 00:18:20,730
even not<font color="#CCCCCC"> powershell methods below the</font>

404
00:18:14,730 --> 00:18:22,310
inside with it and the<font color="#CCCCCC"> lobes are saved</font>

405
00:18:20,730 --> 00:18:24,660
in<font color="#E5E5E5"> the same format</font><font color="#CCCCCC"> is the</font><font color="#E5E5E5"> transcription</font>

406
00:18:22,310 --> 00:18:27,530
<font color="#E5E5E5">it's actually the same code I stole it</font>

407
00:18:24,660 --> 00:18:29,760
from<font color="#E5E5E5"> PowerShell</font><font color="#CCCCCC"> Thank</font><font color="#E5E5E5"> You PowerShell and</font>

408
00:18:27,530 --> 00:18:31,110
<font color="#E5E5E5">if you want Who am I you can see the</font>

409
00:18:29,760 --> 00:18:32,940
command but then you can see that<font color="#E5E5E5"> baby</font>

410
00:18:31,110 --> 00:18:35,310
shellfish also sees the<font color="#E5E5E5"> exact process</font>

411
00:18:32,940 --> 00:18:38,430
that was executed<font color="#CCCCCC"> when you want that</font>

412
00:18:35,310 --> 00:18:45,600
<font color="#E5E5E5">command and</font><font color="#CCCCCC"> let's</font><font color="#E5E5E5"> tie something a little</font>

413
00:18:38,430 --> 00:18:47,820
bit<font color="#E5E5E5"> more complicated</font><font color="#CCCCCC"> okay I exit because</font>

414
00:18:45,600 --> 00:18:50,780
<font color="#E5E5E5">there is a caching mechanism and</font>

415
00:18:47,820 --> 00:18:53,939
sometimes<font color="#CCCCCC"> MSI won't be called if one</font>

416
00:18:50,780 --> 00:18:57,240
more if you want the same command<font color="#E5E5E5"> so now</font>

417
00:18:53,940 --> 00:18:59,190
I will run the<font color="#E5E5E5"> obfuscated command and we</font>

418
00:18:57,240 --> 00:19:05,580
will look at what MSI cysts<font color="#E5E5E5"> and what</font>

419
00:18:59,190 --> 00:19:07,950
<font color="#E5E5E5">babel shellfish is so now you can see</font>

420
00:19:05,580 --> 00:19:10,260
that<font color="#CCCCCC"> MSI got escaped Babel shellfish</font>

421
00:19:07,950 --> 00:19:12,810
<font color="#E5E5E5">also got the scale the obfuscated scale</font>

422
00:19:10,260 --> 00:19:14,790
but it also got again<font color="#CCCCCC"> the same process</font>

423
00:19:12,810 --> 00:19:17,370
<font color="#CCCCCC">that you</font><font color="#E5E5E5"> execute with the parameters</font>

424
00:19:14,790 --> 00:19:19,200
that process was executed<font color="#E5E5E5"> good and this</font>

425
00:19:17,370 --> 00:19:22,979
<font color="#CCCCCC">is something that mm</font><font color="#E5E5E5"> size you can</font><font color="#CCCCCC"> see</font>

426
00:19:19,200 --> 00:19:25,040
can't get so let's do something<font color="#CCCCCC"> a</font><font color="#E5E5E5"> little</font>

427
00:19:22,980 --> 00:19:30,200
<font color="#E5E5E5">bit</font><font color="#CCCCCC"> more complicated</font>

428
00:19:25,040 --> 00:19:33,899
let's try<font color="#CCCCCC"> mad grubbles</font><font color="#E5E5E5"> lying so we will</font>

429
00:19:30,200 --> 00:19:35,550
enable<font color="#E5E5E5"> the</font><font color="#CCCCCC"> Windows Defender</font><font color="#E5E5E5"> to protect</font>

430
00:19:33,900 --> 00:19:37,440
our<font color="#CCCCCC"> powershell script and the worst</font>

431
00:19:35,550 --> 00:19:40,530
thing about<font color="#E5E5E5"> Windows Defender when you do</font>

432
00:19:37,440 --> 00:19:43,950
this kind<font color="#E5E5E5"> of the most</font><font color="#CCCCCC"> ranches that it</font>

433
00:19:40,530 --> 00:19:45,899
just pops so many<font color="#CCCCCC"> implications</font><font color="#E5E5E5"> because</font>

434
00:19:43,950 --> 00:19:48,310
<font color="#CCCCCC">it's</font><font color="#E5E5E5"> test machine obviously it has</font>

435
00:19:45,900 --> 00:19:51,970
<font color="#E5E5E5">threads on it</font>

436
00:19:48,310 --> 00:19:53,820
so if we run the command as it<font color="#E5E5E5"> should be</font>

437
00:19:51,970 --> 00:19:58,440
<font color="#CCCCCC">you can</font><font color="#E5E5E5"> see that we know the defenders</font>

438
00:19:53,820 --> 00:19:58,439
manages<font color="#CCCCCC"> us to catch it</font><font color="#E5E5E5"> and block the</font>

439
00:19:58,590 --> 00:20:04,510
script<font color="#CCCCCC"> and what we will do next we will</font>

440
00:20:02,530 --> 00:20:06,910
<font color="#CCCCCC">use an obfuscated command and we will</font>

441
00:20:04,510 --> 00:20:12,460
see what<font color="#CCCCCC"> a MSI's is and what</font><font color="#E5E5E5"> babel</font>

442
00:20:06,910 --> 00:20:14,950
shellfish sees<font color="#CCCCCC"> now we'll take the</font>

443
00:20:12,460 --> 00:20:16,660
minimally obfuscated command<font color="#E5E5E5"> which</font><font color="#CCCCCC"> is</font>

444
00:20:14,950 --> 00:20:19,120
the same command as<font color="#CCCCCC"> matt</font><font color="#E5E5E5"> grab as</font><font color="#CCCCCC"> a</font>

445
00:20:16,660 --> 00:20:22,090
bypass<font color="#E5E5E5"> if you run it</font><font color="#CCCCCC"> you see that it</font>

446
00:20:19,120 --> 00:20:24,639
bypassed<font color="#CCCCCC"> IMSI we are now practically</font>

447
00:20:22,090 --> 00:20:26,709
disabled<font color="#CCCCCC"> inside on the system you can</font>

448
00:20:24,640 --> 00:20:29,440
<font color="#CCCCCC">see also again</font><font color="#E5E5E5"> msi gets the opposite</font>

449
00:20:26,710 --> 00:20:30,520
escape baby shellfish also get<font color="#CCCCCC"> the</font>

450
00:20:29,440 --> 00:20:33,610
emissary<font color="#E5E5E5"> pod for skating</font>

451
00:20:30,520 --> 00:20:35,920
but now msi sees all the the invocation

452
00:20:33,610 --> 00:20:38,110
<font color="#E5E5E5">you can see</font><font color="#CCCCCC"> it's you can see that it</font>

453
00:20:35,920 --> 00:20:40,120
<font color="#E5E5E5">it's looking for the type and size kills</font>

454
00:20:38,110 --> 00:20:43,149
<font color="#CCCCCC">you can see that it's</font><font color="#E5E5E5"> looking for the</font>

455
00:20:40,120 --> 00:20:46,330
<font color="#E5E5E5">field of fairness</font><font color="#CCCCCC"> i in it fail</font><font color="#E5E5E5"> with the</font>

456
00:20:43,150 --> 00:20:48,340
<font color="#CCCCCC">non-public and Static parameters</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> you</font>

457
00:20:46,330 --> 00:20:53,139
can also see that<font color="#CCCCCC"> it has invocation for</font>

458
00:20:48,340 --> 00:20:56,709
<font color="#E5E5E5">the set value to set it to true so this</font>

459
00:20:53,140 --> 00:21:02,190
is what<font color="#CCCCCC"> IMS I should</font><font color="#E5E5E5"> have got when the</font>

460
00:20:56,710 --> 00:21:02,190
<font color="#E5E5E5">PowerShell team developed developed it</font>

461
00:21:02,250 --> 00:21:09,130
<font color="#CCCCCC">ok so as you've seen</font><font color="#E5E5E5"> if you want to use</font>

462
00:21:06,760 --> 00:21:13,090
the baby shellfish it has a fancy bad

463
00:21:09,130 --> 00:21:14,890
script<font color="#E5E5E5"> that installs it you can give it</font>

464
00:21:13,090 --> 00:21:17,220
the parameter if you want to see the

465
00:21:14,890 --> 00:21:19,330
<font color="#CCCCCC">debug output if y'all know the bugging</font>

466
00:21:17,220 --> 00:21:20,980
escape and want to see what happened

467
00:21:19,330 --> 00:21:23,320
what happens in<font color="#E5E5E5"> a real</font><font color="#CCCCCC"> time you</font><font color="#E5E5E5"> can use</font>

468
00:21:20,980 --> 00:21:26,710
this one you can send the screens<font color="#E5E5E5"> the</font>

469
00:21:23,320 --> 00:21:29,429
strings<font color="#E5E5E5"> to am a</font><font color="#CCCCCC"> site</font><font color="#E5E5E5"> to scan them and</font><font color="#CCCCCC"> I</font>

470
00:21:26,710 --> 00:21:32,170
<font color="#E5E5E5">haven't got</font><font color="#CCCCCC"> to a point where it actually</font>

471
00:21:29,430 --> 00:21:35,230
manages<font color="#E5E5E5"> to catch things I think it tries</font>

472
00:21:32,170 --> 00:21:36,640
to do some kind of tokenizing<font color="#E5E5E5"> behind the</font>

473
00:21:35,230 --> 00:21:40,060
scenes so it's<font color="#E5E5E5"> not the same language</font>

474
00:21:36,640 --> 00:21:42,460
<font color="#CCCCCC">that it talks but if I must</font><font color="#E5E5E5"> I will find</font>

475
00:21:40,060 --> 00:21:44,530
something malicious<font color="#E5E5E5"> it will stop</font>

476
00:21:42,460 --> 00:21:46,060
execution<font color="#CCCCCC"> and this is what I told you</font>

477
00:21:44,530 --> 00:21:48,450
about<font color="#E5E5E5"> the</font><font color="#CCCCCC"> Volkov publication that</font><font color="#E5E5E5"> works</font>

478
00:21:46,060 --> 00:21:51,310
on offline<font color="#CCCCCC"> babel shellfish works online</font>

479
00:21:48,450 --> 00:21:53,770
so you can<font color="#E5E5E5"> run malicious skits and if</font>

480
00:21:51,310 --> 00:21:56,080
<font color="#E5E5E5">MSI's find them malicious after doing</font>

481
00:21:53,770 --> 00:21:59,050
<font color="#E5E5E5">all those layers</font><font color="#CCCCCC"> of the obfuscation</font><font color="#E5E5E5"> it</font>

482
00:21:56,080 --> 00:22:01,240
will stop your script<font color="#CCCCCC"> so it's another</font>

483
00:21:59,050 --> 00:22:02,080
layer of<font color="#CCCCCC"> protection but I wouldn't</font>

484
00:22:01,240 --> 00:22:05,520
suggest it

485
00:22:02,080 --> 00:22:08,800
you you<font color="#E5E5E5"> you will use it as a your own</font>

486
00:22:05,520 --> 00:22:14,889
security<font color="#E5E5E5"> mechanism it's still a</font><font color="#CCCCCC"> POC code</font>

487
00:22:08,800 --> 00:22:17,020
<font color="#CCCCCC">and still have a lot you can also log a</font>

488
00:22:14,890 --> 00:22:18,550
<font color="#CCCCCC">messiah skirts again it's just for</font>

489
00:22:17,020 --> 00:22:21,250
curiosity if you want to see what<font color="#CCCCCC"> the</font>

490
00:22:18,550 --> 00:22:23,379
<font color="#CCCCCC">MSI's sees and</font><font color="#E5E5E5"> you can give it a path</font>

491
00:22:21,250 --> 00:22:25,980
for the log folder to be<font color="#E5E5E5"> saved as you've</font>

492
00:22:23,380 --> 00:22:28,540
seen it's like that<font color="#CCCCCC"> conscription folder</font>

493
00:22:25,980 --> 00:22:30,760
and you need to give<font color="#E5E5E5"> it the path for the</font>

494
00:22:28,540 --> 00:22:32,590
baby shellfish<font color="#CCCCCC"> dealer so we can it can</font>

495
00:22:30,760 --> 00:22:34,720
register those<font color="#E5E5E5"> dll's you need</font>

496
00:22:32,590 --> 00:22:38,399
<font color="#E5E5E5">administrative private privileges to</font>

497
00:22:34,720 --> 00:22:41,080
register the<font color="#CCCCCC"> to install bible shellfish</font>

498
00:22:38,400 --> 00:22:46,420
and<font color="#E5E5E5"> i think i should add another one</font>

499
00:22:41,080 --> 00:22:50,199
installed<font color="#E5E5E5"> let's go paralegal so how does</font>

500
00:22:46,420 --> 00:22:53,200
payable shellfish<font color="#E5E5E5"> works and how</font><font color="#CCCCCC"> we hope</font>

501
00:22:50,200 --> 00:22:56,860
it<font color="#CCCCCC"> first returns of stand the internals</font>

502
00:22:53,200 --> 00:22:58,420
of<font color="#CCCCCC"> powershell and</font><font color="#E5E5E5"> when i told you before</font>

503
00:22:56,860 --> 00:23:00,760
<font color="#E5E5E5">i gave you the heads up that</font><font color="#CCCCCC"> we're</font><font color="#E5E5E5"> going</font>

504
00:22:58,420 --> 00:23:05,500
<font color="#E5E5E5">to jump off the cliff this is where we</font>

505
00:23:00,760 --> 00:23:09,790
start<font color="#CCCCCC"> the jump so join me into one</font><font color="#E5E5E5"> of</font>

506
00:23:05,500 --> 00:23:11,650
the highest jumps in security<font color="#CCCCCC"> so</font>

507
00:23:09,790 --> 00:23:13,180
<font color="#CCCCCC">powershell has four parts</font><font color="#E5E5E5"> that you need</font>

508
00:23:11,650 --> 00:23:15,010
<font color="#CCCCCC">to know about the</font><font color="#E5E5E5"> first one is the</font>

509
00:23:13,180 --> 00:23:17,890
tokenizer<font color="#E5E5E5"> then you have the</font><font color="#CCCCCC"> abstract</font>

510
00:23:15,010 --> 00:23:21,040
syntax tree then<font color="#E5E5E5"> the pipeline processor</font>

511
00:23:17,890 --> 00:23:21,640
and the command processor the token the

512
00:23:21,040 --> 00:23:24,010
tokenizer

513
00:23:21,640 --> 00:23:26,290
is<font color="#CCCCCC"> complete CEO text into lexical units</font>

514
00:23:24,010 --> 00:23:27,730
which means<font color="#CCCCCC"> gives them meaning so it is</font>

515
00:23:26,290 --> 00:23:30,129
the<font color="#E5E5E5"> first one</font><font color="#CCCCCC"> and knows it is</font><font color="#E5E5E5"> its</font>

516
00:23:27,730 --> 00:23:32,800
operator it's a group start<font color="#E5E5E5"> string and</font>

517
00:23:30,130 --> 00:23:37,300
so on so<font color="#CCCCCC"> I think</font><font color="#E5E5E5"> only when you see this</font>

518
00:23:32,800 --> 00:23:40,720
kind of division into lexical units<font color="#E5E5E5"> it's</font>

519
00:23:37,300 --> 00:23:44,010
much<font color="#E5E5E5"> easier to understand how a script</font>

520
00:23:40,720 --> 00:23:48,010
<font color="#CCCCCC">block</font><font color="#E5E5E5"> looks like so every script look</font>

521
00:23:44,010 --> 00:23:49,900
<font color="#E5E5E5">starts with a</font><font color="#CCCCCC"> Skyblock ast and a</font><font color="#E5E5E5"> named</font>

522
00:23:48,010 --> 00:23:51,700
low-caste<font color="#E5E5E5"> they have also the pipeline</font>

523
00:23:49,900 --> 00:23:53,740
which I will<font color="#CCCCCC"> explain later and you can</font>

524
00:23:51,700 --> 00:23:55,360
<font color="#CCCCCC">see the commands</font><font color="#E5E5E5"> but now when you've</font>

525
00:23:53,740 --> 00:23:57,250
seen<font color="#E5E5E5"> the tokenizer it's easier to</font>

526
00:23:55,360 --> 00:23:59,290
understand what<font color="#CCCCCC"> each</font><font color="#E5E5E5"> command does and</font>

527
00:23:57,250 --> 00:24:02,050
what are the parameters which commands

528
00:23:59,290 --> 00:24:06,540
but it's also important<font color="#E5E5E5"> to understand</font>

529
00:24:02,050 --> 00:24:09,760
<font color="#CCCCCC">that now ast doesn't contain any</font>

530
00:24:06,540 --> 00:24:11,290
meaningful information<font color="#E5E5E5"> just knows</font><font color="#CCCCCC"> that</font>

531
00:24:09,760 --> 00:24:14,440
it needs<font color="#CCCCCC"> to run a command it doesn't</font>

532
00:24:11,290 --> 00:24:15,870
know what the command is an<font color="#E5E5E5"> ast will be</font>

533
00:24:14,440 --> 00:24:17,580
compiled into expression

534
00:24:15,870 --> 00:24:19,800
object which is the<font color="#E5E5E5"> actual object that</font>

535
00:24:17,580 --> 00:24:21,870
<font color="#CCCCCC">partial can run and only doing the</font>

536
00:24:19,800 --> 00:24:23,850
execution the object will<font color="#CCCCCC"> have the</font>

537
00:24:21,870 --> 00:24:28,409
<font color="#E5E5E5">actual meaning in the actual escape that</font>

538
00:24:23,850 --> 00:24:31,980
it needs<font color="#CCCCCC"> to on</font><font color="#E5E5E5"> so when you compile an</font>

539
00:24:28,410 --> 00:24:33,930
<font color="#CCCCCC">ast</font><font color="#E5E5E5"> into</font><font color="#CCCCCC"> compiled</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> blog this</font><font color="#E5E5E5"> is the</font>

540
00:24:31,980 --> 00:24:35,370
code for Microsoft and I'm not<font color="#E5E5E5"> making</font>

541
00:24:33,930 --> 00:24:38,040
<font color="#E5E5E5">this up they actually call the function</font>

542
00:24:35,370 --> 00:24:39,780
<font color="#E5E5E5">really</font><font color="#CCCCCC"> compiled not compile and those</font>

543
00:24:38,040 --> 00:24:41,610
are the two<font color="#E5E5E5"> functions that you</font><font color="#CCCCCC"> need to</font>

544
00:24:39,780 --> 00:24:44,670
be<font color="#CCCCCC"> aware of</font><font color="#E5E5E5"> perform security</font><font color="#CCCCCC"> checks</font>

545
00:24:41,610 --> 00:24:46,820
which caused a MSI<font color="#E5E5E5"> and compile low</font>

546
00:24:44,670 --> 00:24:50,429
compile style which logs the script look

547
00:24:46,820 --> 00:24:53,550
code<font color="#E5E5E5"> so those are the points</font><font color="#CCCCCC"> that</font>

548
00:24:50,429 --> 00:24:57,929
Microsoft chose to<font color="#CCCCCC"> protect the scripts</font>

549
00:24:53,550 --> 00:25:00,240
<font color="#E5E5E5">and it's a</font><font color="#CCCCCC"> logical place</font><font color="#E5E5E5"> to put</font><font color="#CCCCCC"> this not</font>

550
00:24:57,929 --> 00:25:02,550
saying<font color="#E5E5E5"> anything bad about</font><font color="#CCCCCC"> it but it</font>

551
00:25:00,240 --> 00:25:05,670
happens<font color="#CCCCCC"> before the compilation</font><font color="#E5E5E5"> so the</font>

552
00:25:02,550 --> 00:25:09,000
only<font color="#E5E5E5"> notion that the script has now is</font>

553
00:25:05,670 --> 00:25:10,770
just the<font color="#CCCCCC"> original</font><font color="#E5E5E5"> obfuscated script</font><font color="#CCCCCC"> and</font>

554
00:25:09,000 --> 00:25:13,559
the only time<font color="#E5E5E5"> it</font><font color="#CCCCCC"> will be</font><font color="#E5E5E5"> called again</font>

555
00:25:10,770 --> 00:25:16,470
<font color="#E5E5E5">it's if it will have to regenerate</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> new</font>

556
00:25:13,559 --> 00:25:18,389
script look and it happens<font color="#E5E5E5"> on certain</font>

557
00:25:16,470 --> 00:25:20,840
types of evaluation doesn't happen on

558
00:25:18,390 --> 00:25:22,710
all the kinds of evaluation of scripts

559
00:25:20,840 --> 00:25:24,689
so next in line is<font color="#CCCCCC"> the pipeline</font>

560
00:25:22,710 --> 00:25:26,280
<font color="#E5E5E5">processor and this is the actual</font>

561
00:25:24,690 --> 00:25:28,679
mechanism that runs your<font color="#E5E5E5"> commands</font><font color="#CCCCCC"> and</font>

562
00:25:26,280 --> 00:25:30,600
<font color="#E5E5E5">needs to take the output</font><font color="#CCCCCC"> from one</font>

563
00:25:28,679 --> 00:25:32,220
command and<font color="#E5E5E5"> pass the fasiq as the input</font>

564
00:25:30,600 --> 00:25:34,080
<font color="#E5E5E5">for the</font><font color="#CCCCCC"> next command but how does it run</font>

565
00:25:32,220 --> 00:25:36,300
the<font color="#CCCCCC"> commands it uses the command</font>

566
00:25:34,080 --> 00:25:38,340
processor and the command processor it's

567
00:25:36,300 --> 00:25:41,250
actually a base<font color="#E5E5E5"> class that has three</font>

568
00:25:38,340 --> 00:25:43,470
classes<font color="#CCCCCC"> but they</font><font color="#E5E5E5"> inherit from it script</font>

569
00:25:41,250 --> 00:25:45,480
command processor which runs actual

570
00:25:43,470 --> 00:25:49,410
scripts<font color="#E5E5E5"> you have the command processor</font>

571
00:25:45,480 --> 00:25:51,360
that runs<font color="#CCCCCC"> see shout compile the command</font>

572
00:25:49,410 --> 00:25:56,100
<font color="#CCCCCC">lets and the native</font><font color="#E5E5E5"> command processor</font>

573
00:25:51,360 --> 00:25:59,100
that runs<font color="#CCCCCC"> runs processes and there's</font>

574
00:25:56,100 --> 00:26:03,330
another class the<font color="#CCCCCC"> last script command</font>

575
00:25:59,100 --> 00:26:04,678
which is<font color="#E5E5E5"> actually the class that makes</font>

576
00:26:03,330 --> 00:26:07,740
all the<font color="#E5E5E5"> implementation of the scape</font>

577
00:26:04,679 --> 00:26:10,530
common script but now you can start

578
00:26:07,740 --> 00:26:13,200
<font color="#E5E5E5">getting the</font><font color="#CCCCCC"> idea why a MSI is easily</font>

579
00:26:10,530 --> 00:26:16,170
bypassed because I am<font color="#CCCCCC"> si</font><font color="#E5E5E5"> and the script</font>

580
00:26:13,200 --> 00:26:19,470
logging<font color="#CCCCCC"> works</font><font color="#E5E5E5"> when you compile the ast</font>

581
00:26:16,170 --> 00:26:22,290
into script<font color="#E5E5E5"> log into execution</font><font color="#CCCCCC"> object</font>

582
00:26:19,470 --> 00:26:24,810
and what we understood in javelin is

583
00:26:22,290 --> 00:26:26,250
that we had to implement<font color="#CCCCCC"> babel shellfish</font>

584
00:26:24,810 --> 00:26:29,840
on the command processor and on the

585
00:26:26,250 --> 00:26:32,510
compiler so we<font color="#CCCCCC"> analyzed the power</font>

586
00:26:29,840 --> 00:26:35,030
code and we placed hooks on each one<font color="#E5E5E5"> of</font>

587
00:26:32,510 --> 00:26:37,129
<font color="#CCCCCC">those command</font><font color="#E5E5E5"> processes and also we</font>

588
00:26:35,030 --> 00:26:40,040
inserted<font color="#E5E5E5"> some code into the compiler</font><font color="#CCCCCC"> and</font>

589
00:26:37,130 --> 00:26:43,130
we hook all of those function on one

590
00:26:40,040 --> 00:26:46,760
time when<font color="#E5E5E5"> we when</font><font color="#CCCCCC"> babel shellfish</font><font color="#E5E5E5"> loads</font>

591
00:26:43,130 --> 00:26:50,270
with PowerShell<font color="#E5E5E5"> so now that</font><font color="#CCCCCC"> you're</font>

592
00:26:46,760 --> 00:26:52,640
experts on PowerShell<font color="#E5E5E5"> let's see if you</font>

593
00:26:50,270 --> 00:26:56,510
can also be experts on<font color="#CCCCCC"> that net dotnet</font>

594
00:26:52,640 --> 00:26:58,760
and CLR<font color="#CCCCCC"> this is time that I mentioned</font>

595
00:26:56,510 --> 00:27:04,010
just<font color="#E5E5E5"> enough amusement because there is</font>

596
00:26:58,760 --> 00:27:07,370
no way I can explain to you how dotnet

597
00:27:04,010 --> 00:27:09,590
walks in<font color="#E5E5E5"> five minutes</font><font color="#CCCCCC"> or maybe less so I</font>

598
00:27:07,370 --> 00:27:13,280
<font color="#CCCCCC">would use this analogy</font><font color="#E5E5E5"> the Greeks used</font>

599
00:27:09,590 --> 00:27:15,679
it to<font color="#E5E5E5"> explain complex stories and</font>

600
00:27:13,280 --> 00:27:18,290
complex stuff so I will also<font color="#CCCCCC"> use analogy</font>

601
00:27:15,680 --> 00:27:20,120
I hope you will follow me along<font color="#E5E5E5"> let's</font>

602
00:27:18,290 --> 00:27:23,450
think about the CLL as a<font color="#CCCCCC"> ruminant</font>

603
00:27:20,120 --> 00:27:26,929
<font color="#CCCCCC">digestive digestive system so if the</font>

604
00:27:23,450 --> 00:27:29,240
field<font color="#E5E5E5"> is a CPU and Windows is the cow</font>

605
00:27:26,930 --> 00:27:32,150
and<font color="#CCCCCC"> CLR as we said is the digestive</font>

606
00:27:29,240 --> 00:27:34,910
system<font color="#CCCCCC"> you feed it with c-sharp</font><font color="#E5E5E5"> and VB</font>

607
00:27:32,150 --> 00:27:38,450
code you take it through the<font color="#E5E5E5"> CLR</font>

608
00:27:34,910 --> 00:27:41,930
compiler and you get<font color="#CCCCCC"> IL assemblies at</font>

609
00:27:38,450 --> 00:27:43,490
the<font color="#CCCCCC"> end</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> I'll assemblies are not</font>

610
00:27:41,930 --> 00:27:45,230
assemblies that<font color="#CCCCCC"> you can run because</font><font color="#E5E5E5"> I'll</font>

611
00:27:43,490 --> 00:27:47,560
stand<font color="#E5E5E5"> for intermediate language it's not</font>

612
00:27:45,230 --> 00:27:49,850
assembly code that your CPU can digest

613
00:27:47,560 --> 00:27:51,909
so you need to pass it<font color="#CCCCCC"> through another</font>

614
00:27:49,850 --> 00:27:55,010
<font color="#CCCCCC">mechanism and there are two mechanism to</font>

615
00:27:51,910 --> 00:27:56,570
turn there are assemblies into assembly

616
00:27:55,010 --> 00:27:58,850
<font color="#E5E5E5">the first one is JIT it stands for</font>

617
00:27:56,570 --> 00:28:01,790
just-in-time compiler and<font color="#CCCCCC"> the CLR when</font>

618
00:27:58,850 --> 00:28:03,500
it run when it loads your<font color="#E5E5E5"> dll every time</font>

619
00:28:01,790 --> 00:28:06,020
you call a function for<font color="#E5E5E5"> the first time</font>

620
00:28:03,500 --> 00:28:09,290
at that<font color="#E5E5E5"> specific</font><font color="#CCCCCC"> moment it</font><font color="#E5E5E5"> will compile</font>

621
00:28:06,020 --> 00:28:12,080
it into assembly code<font color="#E5E5E5"> and my it sounds</font>

622
00:28:09,290 --> 00:28:14,659
like it takes a lot of<font color="#E5E5E5"> resources so you</font>

623
00:28:12,080 --> 00:28:17,360
can pre compile those assemblies using a

624
00:28:14,660 --> 00:28:20,420
engine so engine creates a bridge it

625
00:28:17,360 --> 00:28:22,000
<font color="#CCCCCC">assemblies</font><font color="#E5E5E5"> those assemblies contain both</font>

626
00:28:20,420 --> 00:28:25,480
the<font color="#CCCCCC"> aisle code and the assembly code</font>

627
00:28:22,000 --> 00:28:28,910
that can<font color="#E5E5E5"> be run and this is important</font>

628
00:28:25,480 --> 00:28:31,370
thing that you<font color="#CCCCCC"> need to remember</font><font color="#E5E5E5"> because</font>

629
00:28:28,910 --> 00:28:33,230
<font color="#CCCCCC">I will mention it later and</font><font color="#E5E5E5"> once you</font>

630
00:28:31,370 --> 00:28:36,439
have those assemblies you can fill it to

631
00:28:33,230 --> 00:28:38,480
<font color="#E5E5E5">the last stomach the CLR hosting that</font>

632
00:28:36,440 --> 00:28:42,310
knows how<font color="#E5E5E5"> to run those assemblies and</font>

633
00:28:38,480 --> 00:28:42,310
feed it and on<font color="#E5E5E5"> the CPU</font>

634
00:28:43,330 --> 00:28:51,379
yeah I<font color="#E5E5E5"> just</font><font color="#CCCCCC"> compelled Microsoft to</font><font color="#E5E5E5"> a cow</font>

635
00:28:45,800 --> 00:28:54,320
and no one blink blink in<font color="#E5E5E5"> the room okay</font>

636
00:28:51,380 --> 00:28:56,530
so now it's time<font color="#CCCCCC"> to</font><font color="#E5E5E5"> learn how</font><font color="#CCCCCC"> to hook</font>

637
00:28:54,320 --> 00:29:00,320
<font color="#E5E5E5">doesn't assemblies and there is a great</font>

638
00:28:56,530 --> 00:29:01,970
paper that<font color="#CCCCCC"> was also</font><font color="#E5E5E5"> I don't</font><font color="#CCCCCC"> know how to</font>

639
00:29:00,320 --> 00:29:05,230
pronounce names if I pronounce your<font color="#E5E5E5"> name</font>

640
00:29:01,970 --> 00:29:07,340
wrong blame your parents<font color="#CCCCCC"> shield</font>

641
00:29:05,230 --> 00:29:10,520
hijacking dotnet to defend PowerShell

642
00:29:07,340 --> 00:29:14,360
<font color="#CCCCCC">and she leads lists the known methods to</font>

643
00:29:10,520 --> 00:29:16,240
hook dotnet assemblies and one thing

644
00:29:14,360 --> 00:29:19,850
<font color="#E5E5E5">that she ment mentioned throughout</font>

645
00:29:16,240 --> 00:29:22,520
research is<font color="#CCCCCC"> that it's very very</font>

646
00:29:19,850 --> 00:29:24,620
problematic<font color="#CCCCCC"> to hook</font><font color="#E5E5E5"> predated code</font>

647
00:29:22,520 --> 00:29:27,950
<font color="#E5E5E5">because all the</font><font color="#CCCCCC"> known methods are</font>

648
00:29:24,620 --> 00:29:32,050
usually either<font color="#E5E5E5"> replacing the</font><font color="#CCCCCC"> I'll code</font>

649
00:29:27,950 --> 00:29:35,570
or waiting for<font color="#CCCCCC"> the Jeep</font><font color="#E5E5E5"> to happen and</font>

650
00:29:32,050 --> 00:29:39,139
<font color="#CCCCCC">it's how to do it</font><font color="#E5E5E5"> oh it was at least</font>

651
00:29:35,570 --> 00:29:42,080
<font color="#E5E5E5">impossible until now to do the things</font>

652
00:29:39,140 --> 00:29:43,760
that<font color="#E5E5E5"> we the method that she suggests is</font>

653
00:29:42,080 --> 00:29:46,760
a<font color="#E5E5E5"> get function pointer which I've</font>

654
00:29:43,760 --> 00:29:49,629
<font color="#E5E5E5">explained a limit later which hooks the</font>

655
00:29:46,760 --> 00:29:53,390
assembly code<font color="#CCCCCC"> after it was cheated</font>

656
00:29:49,630 --> 00:29:55,850
another good research<font color="#CCCCCC"> it was done by</font>

657
00:29:53,390 --> 00:30:00,740
Satoshi<font color="#E5E5E5"> condom a partial inside out</font>

658
00:29:55,850 --> 00:30:03,649
<font color="#E5E5E5">and he gave POC code that actually runs</font>

659
00:30:00,740 --> 00:30:05,960
and he uses<font color="#E5E5E5"> a flexion to find partials</font>

660
00:30:03,650 --> 00:30:07,940
method specifically<font color="#E5E5E5"> it's a scan content</font>

661
00:30:05,960 --> 00:30:10,370
<font color="#E5E5E5">it's the function that</font><font color="#CCCCCC"> calls a young</font>

662
00:30:07,940 --> 00:30:13,460
side and then he<font color="#E5E5E5"> uses</font><font color="#CCCCCC"> gate function</font>

663
00:30:10,370 --> 00:30:16,939
pointer on that scan content<font color="#E5E5E5"> function to</font>

664
00:30:13,460 --> 00:30:19,640
find<font color="#E5E5E5"> the assembly</font><font color="#CCCCCC"> there the others of</font>

665
00:30:16,940 --> 00:30:24,070
<font color="#E5E5E5">the assembly code and hook dot that</font>

666
00:30:19,640 --> 00:30:27,440
location<font color="#E5E5E5"> so this is a good method to</font>

667
00:30:24,070 --> 00:30:28,909
incorporate a<font color="#CCCCCC"> msi into previous versions</font>

668
00:30:27,440 --> 00:30:31,550
of Windows<font color="#CCCCCC"> if you are developing</font>

669
00:30:28,910 --> 00:30:33,440
endpoint security<font color="#E5E5E5"> but then</font><font color="#CCCCCC"> again it has</font>

670
00:30:31,550 --> 00:30:36,350
<font color="#CCCCCC">all the limitation that</font><font color="#E5E5E5"> a MSI has</font>

671
00:30:33,440 --> 00:30:42,260
because sees what<font color="#CCCCCC"> I honest I would have</font>

672
00:30:36,350 --> 00:30:46,639
seen so now let's see how we can

673
00:30:42,260 --> 00:30:52,160
<font color="#CCCCCC">actually hook also</font><font color="#E5E5E5"> pre did at the</font>

674
00:30:46,640 --> 00:30:52,850
assemblies<font color="#E5E5E5"> and I didn't know what to do</font>

675
00:30:52,160 --> 00:30:55,670
at first

676
00:30:52,850 --> 00:30:57,770
dotnet is huge framework so

677
00:30:55,670 --> 00:31:01,730
I asked the only one that<font color="#E5E5E5"> knows</font>

678
00:30:57,770 --> 00:31:04,309
everything<font color="#CCCCCC"> in</font><font color="#E5E5E5"> the world</font><font color="#CCCCCC"> Google so</font><font color="#E5E5E5"> ask</font>

679
00:31:01,730 --> 00:31:07,730
Google Google<font color="#E5E5E5"> you know well can find</font>

680
00:31:04,309 --> 00:31:10,280
native<font color="#E5E5E5"> code in</font><font color="#CCCCCC"> all of the doclet</font>

681
00:31:07,730 --> 00:31:12,620
documentation and lo and behold the

682
00:31:10,280 --> 00:31:13,910
first answer it gives me<font color="#CCCCCC"> it's get coding</font>

683
00:31:12,620 --> 00:31:17,750
<font color="#E5E5E5">form that sounds interesting</font>

684
00:31:13,910 --> 00:31:20,030
so I looked into it and get Cody info is

685
00:31:17,750 --> 00:31:21,500
the part of<font color="#E5E5E5"> the still a profiler</font><font color="#CCCCCC"> and</font>

686
00:31:20,030 --> 00:31:25,399
<font color="#CCCCCC">I'll explain a little</font><font color="#E5E5E5"> bit what it is</font>

687
00:31:21,500 --> 00:31:27,380
later<font color="#CCCCCC"> and it gives you the there are</font>

688
00:31:25,400 --> 00:31:28,790
simply<font color="#E5E5E5"> code address of those function</font>

689
00:31:27,380 --> 00:31:32,480
and it doesn't matter<font color="#E5E5E5"> if</font><font color="#CCCCCC"> those functions</font>

690
00:31:28,790 --> 00:31:36,320
were appreciated or cheated or just in

691
00:31:32,480 --> 00:31:41,059
time compiled so that's a powerful

692
00:31:36,320 --> 00:31:43,428
powerful<font color="#E5E5E5"> think that we can use so what</font>

693
00:31:41,059 --> 00:31:45,530
is the silica<font color="#CCCCCC"> file oh it's available</font>

694
00:31:43,429 --> 00:31:47,690
form the dotnet one so you<font color="#E5E5E5"> can use it on</font>

695
00:31:45,530 --> 00:31:51,320
any dotnet version<font color="#E5E5E5"> even on</font><font color="#CCCCCC"> powershell</font>

696
00:31:47,690 --> 00:31:53,059
2.0 if you want<font color="#E5E5E5"> the setup of filer is a</font>

697
00:31:51,320 --> 00:31:55,809
<font color="#CCCCCC">comm object-- that you need to write so</font>

698
00:31:53,059 --> 00:31:59,030
it's<font color="#E5E5E5"> unmanaged dll and it can not</font>

699
00:31:55,809 --> 00:32:02,240
contact any managed code because then

700
00:31:59,030 --> 00:32:06,678
the<font color="#E5E5E5"> CLR will just lose itself to lose</font>

701
00:32:02,240 --> 00:32:10,070
its<font color="#E5E5E5"> mind</font><font color="#CCCCCC"> you don't have to have</font>

702
00:32:06,679 --> 00:32:11,450
administrative privileges to unseal<font color="#E5E5E5"> our</font>

703
00:32:10,070 --> 00:32:15,649
profiler<font color="#CCCCCC"> and this is important for</font>

704
00:32:11,450 --> 00:32:17,450
attackers and you don't also<font color="#E5E5E5"> have</font><font color="#CCCCCC"> to</font>

705
00:32:15,650 --> 00:32:19,250
<font color="#E5E5E5">register it as a</font><font color="#CCCCCC"> comma object</font><font color="#E5E5E5"> two</font>

706
00:32:17,450 --> 00:32:20,540
methods to<font color="#E5E5E5"> do it you can either</font><font color="#CCCCCC"> recall</font>

707
00:32:19,250 --> 00:32:24,380
<font color="#CCCCCC">there is still a profiler attached</font>

708
00:32:20,540 --> 00:32:27,559
profile and<font color="#E5E5E5"> attach profiler to attach it</font>

709
00:32:24,380 --> 00:32:30,890
to<font color="#E5E5E5"> a running process</font><font color="#CCCCCC"> oh you can use the</font>

710
00:32:27,559 --> 00:32:34,399
environment<font color="#CCCCCC"> vile variable XLR profiler</font>

711
00:32:30,890 --> 00:32:36,530
<font color="#CCCCCC">path</font><font color="#E5E5E5"> that will give you the same</font>

712
00:32:34,400 --> 00:32:39,429
functionality to load<font color="#CCCCCC"> that comm object</font>

713
00:32:36,530 --> 00:32:42,500
<font color="#CCCCCC">from</font><font color="#E5E5E5"> a path not from the registry</font>

714
00:32:39,429 --> 00:32:45,400
velocity of the<font color="#CCCCCC"> cone objects and</font><font color="#E5E5E5"> the</font>

715
00:32:42,500 --> 00:32:47,720
important thing<font color="#E5E5E5"> is that you can get</font>

716
00:32:45,400 --> 00:32:50,270
<font color="#E5E5E5">g-code cold at us this is what we want</font>

717
00:32:47,720 --> 00:32:52,820
<font color="#E5E5E5">and another thing that you need</font><font color="#CCCCCC"> to</font>

718
00:32:50,270 --> 00:32:56,389
remember you can unload<font color="#E5E5E5"> the profiler dll</font>

719
00:32:52,820 --> 00:32:58,159
so in a format a couple spective you can

720
00:32:56,390 --> 00:32:59,870
load the CLR you can hook the functions

721
00:32:58,160 --> 00:33:02,059
and then<font color="#E5E5E5"> unload the profiler and</font><font color="#CCCCCC"> you</font>

722
00:32:59,870 --> 00:33:05,120
don't not<font color="#CCCCCC"> have any DLL loaded into</font><font color="#E5E5E5"> your</font>

723
00:33:02,059 --> 00:33:08,530
<font color="#CCCCCC">process</font><font color="#E5E5E5"> memory so forensics tools will</font>

724
00:33:05,120 --> 00:33:11,409
not see the Xalapa file on that

725
00:33:08,530 --> 00:33:13,870
<font color="#CCCCCC">endo</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> another thing that it's worth</font>

726
00:33:11,410 --> 00:33:16,690
<font color="#E5E5E5">mentioning cellprofiler is used as</font><font color="#CCCCCC"> an</font>

727
00:33:13,870 --> 00:33:19,330
<font color="#CCCCCC">own the OIC</font><font color="#E5E5E5"> bypass and bypass and as you</font>

728
00:33:16,690 --> 00:33:21,820
know<font color="#E5E5E5"> UIC is not security boundary so</font>

729
00:33:19,330 --> 00:33:25,570
Microsoft won't fix it<font color="#E5E5E5"> it was reported</font>

730
00:33:21,820 --> 00:33:29,500
the last night by Casey Smith<font color="#CCCCCC"> and so it</font>

731
00:33:25,570 --> 00:33:32,679
can also be<font color="#CCCCCC"> used to disadvantage</font><font color="#E5E5E5"> but and</font>

732
00:33:29,500 --> 00:33:36,460
this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> the big</font><font color="#E5E5E5"> but there is another way</font>

733
00:33:32,680 --> 00:33:39,220
<font color="#E5E5E5">when I did my research I found at least</font>

734
00:33:36,460 --> 00:33:42,520
<font color="#E5E5E5">four methods to hook dotnet assemblies</font>

735
00:33:39,220 --> 00:33:44,440
<font color="#CCCCCC">that can hook rigid code and each one</font>

736
00:33:42,520 --> 00:33:46,360
has its own adventures advantages and

737
00:33:44,440 --> 00:33:48,730
disadvantages and one<font color="#E5E5E5"> method in</font>

738
00:33:46,360 --> 00:33:50,979
particular<font color="#E5E5E5"> allows you to live off</font><font color="#CCCCCC"> the</font>

739
00:33:48,730 --> 00:33:54,220
land<font color="#E5E5E5"> which means you can book dotnet</font>

740
00:33:50,980 --> 00:33:55,690
assemblies without leaving any trace on

741
00:33:54,220 --> 00:33:58,420
the target process<font color="#E5E5E5"> without leaving any</font>

742
00:33:55,690 --> 00:34:00,640
trace on disk<font color="#E5E5E5"> you don't need to do any</font>

743
00:33:58,420 --> 00:34:02,770
<font color="#E5E5E5">of</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> and as you've</font><font color="#CCCCCC"> seen the xalapa</font>

744
00:34:00,640 --> 00:34:06,520
<font color="#E5E5E5">file</font><font color="#CCCCCC"> you need to</font><font color="#E5E5E5"> write a</font><font color="#CCCCCC"> file to disk</font>

745
00:34:02,770 --> 00:34:08,918
and<font color="#CCCCCC"> I'm</font><font color="#E5E5E5"> counting the process of being</font>

746
00:34:06,520 --> 00:34:12,219
responsible<font color="#E5E5E5"> disclosure with Microsoft so</font>

747
00:34:08,918 --> 00:34:13,870
after this<font color="#CCCCCC"> process will</font><font color="#E5E5E5"> be done I</font><font color="#CCCCCC"> will</font>

748
00:34:12,219 --> 00:34:16,959
<font color="#E5E5E5">release the code for this hooking</font>

749
00:34:13,870 --> 00:34:19,270
mechanism and for now I felt<font color="#CCCCCC"> Saito to</font>

750
00:34:16,960 --> 00:34:22,780
use just<font color="#E5E5E5"> the</font><font color="#CCCCCC"> setup of</font><font color="#E5E5E5"> file to show it to</font>

751
00:34:19,270 --> 00:34:28,239
the community<font color="#E5E5E5"> and</font><font color="#CCCCCC"> again if</font><font color="#E5E5E5"> anyone wants</font>

752
00:34:22,780 --> 00:34:31,810
to know the method to protect<font color="#E5E5E5"> developing</font>

753
00:34:28,239 --> 00:34:33,219
<font color="#E5E5E5">endpoint protection this protection or</font>

754
00:34:31,810 --> 00:34:35,409
<font color="#E5E5E5">to know what the method about just</font>

755
00:34:33,219 --> 00:34:39,928
contact me and I won't hide any

756
00:34:35,409 --> 00:34:39,929
information we need<font color="#CCCCCC"> to know about it</font><font color="#E5E5E5"> so</font>

757
00:34:40,110 --> 00:34:48,070
<font color="#CCCCCC">now</font><font color="#E5E5E5"> we have a way to get the address of</font>

758
00:34:44,949 --> 00:34:51,009
<font color="#E5E5E5">the assembly code in memory and we need</font>

759
00:34:48,070 --> 00:34:52,750
to hook<font color="#E5E5E5"> them so the method</font><font color="#CCCCCC"> that we used</font>

760
00:34:51,010 --> 00:34:54,730
<font color="#E5E5E5">for the past decades to hook</font><font color="#CCCCCC"> a assembly</font>

761
00:34:52,750 --> 00:34:56,380
<font color="#E5E5E5">calls is in line hooks and now we</font>

762
00:34:54,730 --> 00:34:58,930
finally<font color="#E5E5E5"> got to assembly remember the</font>

763
00:34:56,380 --> 00:35:01,990
cliff that<font color="#CCCCCC"> we</font><font color="#E5E5E5"> had to jump on we</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> got</font>

764
00:34:58,930 --> 00:35:04,990
to<font color="#E5E5E5"> the pool of assembly now so how does</font>

765
00:35:01,990 --> 00:35:07,060
in line hooks<font color="#CCCCCC"> works</font><font color="#E5E5E5"> this is the</font><font color="#CCCCCC"> original</font>

766
00:35:04,990 --> 00:35:09,100
<font color="#CCCCCC">function assembly code in this case this</font>

767
00:35:07,060 --> 00:35:11,259
<font color="#CCCCCC">is Ken content that they call the</font><font color="#E5E5E5"> MSI</font>

768
00:35:09,100 --> 00:35:14,490
<font color="#E5E5E5">you can see it does</font><font color="#CCCCCC"> their</font><font color="#E5E5E5"> usual stuff it</font>

769
00:35:11,260 --> 00:35:17,170
pushes<font color="#E5E5E5"> history it allocates a</font><font color="#CCCCCC"> basic</font>

770
00:35:14,490 --> 00:35:19,930
<font color="#CCCCCC">allocate</font><font color="#E5E5E5"> space on stack and starts</font>

771
00:35:17,170 --> 00:35:22,450
moving stuff all around<font color="#E5E5E5"> and when you</font>

772
00:35:19,930 --> 00:35:24,848
<font color="#E5E5E5">hook the hooking engine actually</font>

773
00:35:22,450 --> 00:35:27,160
places the<font color="#CCCCCC"> first the</font><font color="#E5E5E5"> first bites of</font><font color="#CCCCCC"> that</font>

774
00:35:24,849 --> 00:35:29,589
function with a jump to<font color="#E5E5E5"> the hook</font>

775
00:35:27,160 --> 00:35:32,020
function so<font color="#E5E5E5"> whenever someone calls that</font>

776
00:35:29,589 --> 00:35:33,910
function<font color="#CCCCCC"> it will immediately jump to</font>

777
00:35:32,020 --> 00:35:36,670
<font color="#E5E5E5">your hook function but now you have a</font>

778
00:35:33,910 --> 00:35:38,950
<font color="#E5E5E5">problem because maybe the hoop function</font>

779
00:35:36,670 --> 00:35:41,680
want to get the original function

780
00:35:38,950 --> 00:35:43,149
functionality so the hooking engine

781
00:35:41,680 --> 00:35:45,549
creates something<font color="#CCCCCC"> called the trampoline</font>

782
00:35:43,150 --> 00:35:48,220
which is a copy<font color="#E5E5E5"> of the first</font><font color="#CCCCCC"> bytes</font><font color="#E5E5E5"> that</font>

783
00:35:45,550 --> 00:35:50,740
it overwritten with<font color="#CCCCCC"> a</font><font color="#E5E5E5"> jump up code the</font>

784
00:35:48,220 --> 00:35:52,839
jumps<font color="#E5E5E5"> after</font><font color="#CCCCCC"> the jump</font><font color="#E5E5E5"> so essentially if</font>

785
00:35:50,740 --> 00:35:55,770
you run the commands one by one from<font color="#E5E5E5"> the</font>

786
00:35:52,839 --> 00:35:58,570
trampoline<font color="#CCCCCC"> you get the original function</font>

787
00:35:55,770 --> 00:36:02,140
<font color="#CCCCCC">functionality without</font><font color="#E5E5E5"> jumping into your</font>

788
00:35:58,570 --> 00:36:05,160
hook function but we had a problem with

789
00:36:02,140 --> 00:36:09,368
dotnet because dotnet cannot call

790
00:36:05,160 --> 00:36:10,930
directly<font color="#E5E5E5"> into pointers you need to pass</font>

791
00:36:09,369 --> 00:36:12,670
this<font color="#CCCCCC"> point of the trampoline</font><font color="#E5E5E5"> to the hook</font>

792
00:36:10,930 --> 00:36:15,190
function so it knows<font color="#CCCCCC"> how</font><font color="#E5E5E5"> to call it and</font>

793
00:36:12,670 --> 00:36:17,200
don't it cannot call pointers or at

794
00:36:15,190 --> 00:36:19,599
least is<font color="#CCCCCC"> not supposed you can call</font>

795
00:36:17,200 --> 00:36:21,759
pointers with dotnet but let's assume

796
00:36:19,599 --> 00:36:24,730
<font color="#E5E5E5">that you</font><font color="#CCCCCC"> can so how you solve this</font>

797
00:36:21,760 --> 00:36:26,530
problem<font color="#E5E5E5"> you have the</font><font color="#CCCCCC"> original function</font>

798
00:36:24,730 --> 00:36:28,540
<font color="#CCCCCC">and when you write your hook function</font>

799
00:36:26,530 --> 00:36:30,190
you call a dummy function and you define

800
00:36:28,540 --> 00:36:34,359
this function<font color="#E5E5E5"> and you need to define it</font>

801
00:36:30,190 --> 00:36:36,569
with some code so the<font color="#CCCCCC"> scylla the JIT</font>

802
00:36:34,359 --> 00:36:39,490
compiler will not remove it completely

803
00:36:36,569 --> 00:36:41,050
<font color="#E5E5E5">and what you do you hook the original</font>

804
00:36:39,490 --> 00:36:42,490
function as before<font color="#E5E5E5"> so now everyone</font>

805
00:36:41,050 --> 00:36:46,119
<font color="#E5E5E5">calling the original function will be</font>

806
00:36:42,490 --> 00:36:48,250
redirected to<font color="#CCCCCC"> your hook function and it</font>

807
00:36:46,119 --> 00:36:51,369
creates<font color="#E5E5E5"> also the trampoline so now the</font>

808
00:36:48,250 --> 00:36:54,130
<font color="#E5E5E5">next</font><font color="#CCCCCC"> step you do you</font><font color="#E5E5E5"> hook the dummy</font>

809
00:36:51,369 --> 00:36:56,020
function and pass it the<font color="#E5E5E5"> trampoline as</font>

810
00:36:54,130 --> 00:36:57,730
the point of the hook function so

811
00:36:56,020 --> 00:36:59,410
<font color="#E5E5E5">whenever your hook functions</font><font color="#CCCCCC"> call</font><font color="#E5E5E5"> the</font>

812
00:36:57,730 --> 00:37:02,619
<font color="#CCCCCC">damage function it will actually call</font>

813
00:36:59,410 --> 00:37:04,629
the<font color="#E5E5E5"> original function</font><font color="#CCCCCC"> to get the</font>

814
00:37:02,619 --> 00:37:08,640
original<font color="#E5E5E5"> functionality and dotnet will</font>

815
00:37:04,630 --> 00:37:08,640
not know that<font color="#CCCCCC"> the function was hooked</font>

816
00:37:09,180 --> 00:37:15,970
<font color="#CCCCCC">okay</font><font color="#E5E5E5"> so now that you</font><font color="#CCCCCC"> know how to hook</font>

817
00:37:12,640 --> 00:37:20,650
functions<font color="#E5E5E5"> let's see what</font><font color="#CCCCCC"> envisioned</font>

818
00:37:15,970 --> 00:37:24,540
<font color="#E5E5E5">invisi</font><font color="#CCCCCC"> shell can do all the reading so</font>

819
00:37:20,650 --> 00:37:27,160
<font color="#CCCCCC">in visual hooks all of</font><font color="#E5E5E5"> powershell</font>

820
00:37:24,540 --> 00:37:28,540
function and again<font color="#CCCCCC"> when I say partial I</font>

821
00:37:27,160 --> 00:37:30,009
mean system<font color="#E5E5E5"> management automation it</font>

822
00:37:28,540 --> 00:37:31,589
doesn't matter how you<font color="#E5E5E5"> load PowerShell</font>

823
00:37:30,010 --> 00:37:33,599
<font color="#CCCCCC">and</font>

824
00:37:31,589 --> 00:37:35,999
I<font color="#E5E5E5"> would load the</font><font color="#CCCCCC"> power engine it will be</font>

825
00:37:33,599 --> 00:37:37,880
hooked it<font color="#CCCCCC"> hook system cordial alien and</font>

826
00:37:35,999 --> 00:37:41,700
don't know any other<font color="#E5E5E5"> method of hooking</font>

827
00:37:37,880 --> 00:37:45,749
assemblies that<font color="#E5E5E5"> can hook this DLL and</font><font color="#CCCCCC"> it</font>

828
00:37:41,700 --> 00:37:47,669
cooks<font color="#E5E5E5"> obviously on the</font><font color="#CCCCCC"> cause</font><font color="#E5E5E5"> DMA MSI but</font>

829
00:37:45,749 --> 00:37:49,828
then again there is no<font color="#E5E5E5"> need to actually</font>

830
00:37:47,670 --> 00:37:52,109
place a hook function<font color="#E5E5E5"> because we</font><font color="#CCCCCC"> don't</font>

831
00:37:49,829 --> 00:37:54,660
want the functions that<font color="#E5E5E5"> log the messages</font>

832
00:37:52,109 --> 00:37:57,479
to do anything<font color="#E5E5E5"> we just add the read up</font>

833
00:37:54,660 --> 00:38:00,149
code instead<font color="#CCCCCC"> of adding a jump as</font><font color="#E5E5E5"> I so</font>

834
00:37:57,479 --> 00:38:02,129
<font color="#E5E5E5">I've shown you before so we don't</font><font color="#CCCCCC"> even</font>

835
00:38:00,150 --> 00:38:03,479
<font color="#E5E5E5">need to load any other DLL except for</font>

836
00:38:02,130 --> 00:38:08,130
the setup<font color="#CCCCCC"> of phyllo to find those</font>

837
00:38:03,479 --> 00:38:09,808
functions<font color="#E5E5E5"> and hook them you can run in</font>

838
00:38:08,130 --> 00:38:13,289
visually the<font color="#E5E5E5"> either with admin</font>

839
00:38:09,809 --> 00:38:15,779
privileges or without and it<font color="#E5E5E5"> touches</font>

840
00:38:13,289 --> 00:38:18,569
<font color="#CCCCCC">after it hooks</font><font color="#E5E5E5"> all the function so again</font>

841
00:38:15,779 --> 00:38:22,489
forensics tools will not see the<font color="#CCCCCC"> scylla</font>

842
00:38:18,569 --> 00:38:33,538
the<font color="#CCCCCC"> invisi shell on their target process</font>

843
00:38:22,489 --> 00:38:36,029
so we want to see how it works what<font color="#E5E5E5"> no</font>

844
00:38:33,539 --> 00:38:38,519
<font color="#E5E5E5">you can run it either as admin as I've</font>

845
00:38:36,029 --> 00:38:39,989
shown before<font color="#E5E5E5"> with the</font><font color="#CCCCCC"> scylla</font><font color="#E5E5E5"> path oh no</font>

846
00:38:38,519 --> 00:38:41,758
not me<font color="#CCCCCC"> but then</font><font color="#E5E5E5"> you need to register it</font>

847
00:38:39,989 --> 00:38:47,489
as a<font color="#E5E5E5"> canopic so it will make a little</font>

848
00:38:41,759 --> 00:38:49,680
<font color="#CCCCCC">bit</font><font color="#E5E5E5"> nose noise in the register</font><font color="#CCCCCC"> okay so</font><font color="#E5E5E5"> I</font>

849
00:38:47,489 --> 00:38:51,599
set<font color="#CCCCCC"> up the machine with the</font><font color="#E5E5E5"> top</font><font color="#CCCCCC"> security</font>

850
00:38:49,680 --> 00:38:58,288
we have<font color="#E5E5E5"> the script block logging in mode</font>

851
00:38:51,599 --> 00:38:59,759
logging and a transcription and we also

852
00:38:58,289 --> 00:39:01,859
have Windows Defender run in the

853
00:38:59,759 --> 00:39:04,319
background and<font color="#E5E5E5"> if I try to run invoke</font>

854
00:39:01,859 --> 00:39:07,348
mimikatz<font color="#CCCCCC"> Lane</font><font color="#E5E5E5"> site I don't try to</font>

855
00:39:04,319 --> 00:39:10,109
<font color="#E5E5E5">obfuscate anything and I am</font><font color="#CCCCCC"> blocked by</font>

856
00:39:07,349 --> 00:39:11,849
Windows Defender<font color="#CCCCCC"> so I will</font><font color="#E5E5E5"> try</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> also</font>

857
00:39:10,109 --> 00:39:13,140
run<font color="#E5E5E5"> it would constrain language mode and</font>

858
00:39:11,849 --> 00:39:14,700
now<font color="#E5E5E5"> you will see that</font><font color="#CCCCCC"> I'm not blocked by</font>

859
00:39:13,140 --> 00:39:16,319
<font color="#CCCCCC">Windows I'm blocked by PowerShell</font>

860
00:39:14,700 --> 00:39:21,749
because I cannot run this command in

861
00:39:16,319 --> 00:39:23,339
<font color="#CCCCCC">constrained language mode okay so you</font>

862
00:39:21,749 --> 00:39:25,109
<font color="#E5E5E5">can see</font><font color="#CCCCCC"> that the Conscription</font><font color="#E5E5E5"> was</font>

863
00:39:23,339 --> 00:39:28,219
created<font color="#E5E5E5"> I will just clean all the logs</font>

864
00:39:25,109 --> 00:39:32,538
<font color="#CCCCCC">so we won't be confused</font><font color="#E5E5E5"> if our</font>

865
00:39:28,219 --> 00:39:35,460
<font color="#CCCCCC">powerfully</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> the logs or conscription</font>

866
00:39:32,539 --> 00:39:39,119
you can see that it logs everything<font color="#E5E5E5"> and</font>

867
00:39:35,460 --> 00:39:43,280
<font color="#E5E5E5">we'll clean the locks and windows keeps</font>

868
00:39:39,119 --> 00:39:46,700
popping all the messages all<font color="#CCCCCC"> the time</font>

869
00:39:43,280 --> 00:39:46,700
<font color="#E5E5E5">please relax</font>

870
00:39:51,320 --> 00:39:56,130
okay so<font color="#CCCCCC"> invisi sure</font><font color="#E5E5E5"> is actually just the</font>

871
00:39:53,940 --> 00:39:57,900
<font color="#CCCCCC">invisi shall be ll which</font><font color="#E5E5E5"> is a</font><font color="#CCCCCC"> syllable</font>

872
00:39:56,130 --> 00:40:01,290
<font color="#E5E5E5">filer</font><font color="#CCCCCC"> you can run it is a either as</font>

873
00:39:57,900 --> 00:40:02,730
admin or non admin fancy<font color="#E5E5E5"> bad scripts we</font>

874
00:40:01,290 --> 00:40:05,580
will own it<font color="#E5E5E5"> as admin because</font><font color="#CCCCCC"> we want</font><font color="#E5E5E5"> to</font>

875
00:40:02,730 --> 00:40:08,550
invoke mimikatz<font color="#CCCCCC"> and now you have power</font>

876
00:40:05,580 --> 00:40:09,450
<font color="#E5E5E5">shell within visit shell</font><font color="#CCCCCC"> inside</font><font color="#E5E5E5"> so the</font>

877
00:40:08,550 --> 00:40:11,430
first thing I'll do

878
00:40:09,450 --> 00:40:13,529
I'm moving to<font color="#E5E5E5"> constrain language mode</font>

879
00:40:11,430 --> 00:40:15,600
and then I will run invoke mimikatz<font color="#CCCCCC"> in</font>

880
00:40:13,530 --> 00:40:16,860
plain sight<font color="#E5E5E5"> without any obfuscation</font><font color="#CCCCCC"> do</font>

881
00:40:15,600 --> 00:40:23,400
you think Windows Defender<font color="#E5E5E5"> will you find</font>

882
00:40:16,860 --> 00:40:24,990
it<font color="#CCCCCC"> no</font><font color="#E5E5E5"> you didn't get all the passwords</font>

883
00:40:23,400 --> 00:40:27,870
<font color="#E5E5E5">all the stuff you need</font>

884
00:40:24,990 --> 00:40:29,660
you didn't had to obfuscate<font color="#E5E5E5"> any of the</font>

885
00:40:27,870 --> 00:40:32,220
scripts<font color="#E5E5E5"> but this is not the main</font><font color="#CCCCCC"> issue</font>

886
00:40:29,660 --> 00:40:37,100
<font color="#E5E5E5">you don't have any transcription written</font>

887
00:40:32,220 --> 00:40:40,290
to disk<font color="#E5E5E5"> you don't have any logs written</font>

888
00:40:37,100 --> 00:40:54,120
this is actually visible<font color="#E5E5E5"> method to run</font>

889
00:40:40,290 --> 00:41:00,840
PowerShell yeah the<font color="#E5E5E5"> DLL is loaded but</font>

890
00:40:54,120 --> 00:41:02,910
<font color="#CCCCCC">it's loaded form the CLR hosting so some</font>

891
00:41:00,840 --> 00:41:05,100
processes will look it will see it as

892
00:41:02,910 --> 00:41:07,410
some<font color="#E5E5E5"> imperfections will see it as legit</font>

893
00:41:05,100 --> 00:41:09,420
action because<font color="#E5E5E5"> it's legitimate to load</font>

894
00:41:07,410 --> 00:41:12,000
the Xalapa<font color="#E5E5E5"> file into a dotnet process</font>

895
00:41:09,420 --> 00:41:13,770
and as far<font color="#E5E5E5"> as I am concerned I don't</font>

896
00:41:12,000 --> 00:41:15,810
<font color="#E5E5E5">know any and</font><font color="#CCCCCC"> put protection</font><font color="#E5E5E5"> that</font>

897
00:41:13,770 --> 00:41:18,500
protects against loading<font color="#CCCCCC"> xalapa file or</font>

898
00:41:15,810 --> 00:41:18,500
<font color="#E5E5E5">internal process</font>

899
00:41:24,260 --> 00:41:28,559
yeah you will see the dealer loaded into

900
00:41:26,700 --> 00:41:31,109
<font color="#E5E5E5">that process</font><font color="#CCCCCC"> but after</font><font color="#E5E5E5"> it finishes the</font>

901
00:41:28,559 --> 00:41:32,819
operation it will unload<font color="#E5E5E5"> so you will get</font>

902
00:41:31,109 --> 00:41:35,910
<font color="#E5E5E5">the look that the DLL was loaded if you</font>

903
00:41:32,819 --> 00:41:38,190
are monitoring monitoring it online<font color="#E5E5E5"> but</font>

904
00:41:35,910 --> 00:41:41,368
<font color="#CCCCCC">you</font><font color="#E5E5E5"> won't get the</font><font color="#CCCCCC"> DLL you won't see the</font>

905
00:41:38,190 --> 00:41:45,230
DLL if you try to get forensics<font color="#CCCCCC"> after it</font>

906
00:41:41,369 --> 00:41:45,230
was loaded<font color="#E5E5E5"> and finished the operation</font>

907
00:41:47,869 --> 00:42:01,319
exactly know it doesn't<font color="#CCCCCC"> need to be</font>

908
00:41:54,599 --> 00:42:03,869
<font color="#E5E5E5">assigned the other no you don't need to</font>

909
00:42:01,319 --> 00:42:07,380
sign the<font color="#CCCCCC"> setup of fellow DLL</font><font color="#E5E5E5"> but the CLR</font>

910
00:42:03,869 --> 00:42:09,510
hosting loads it for you so it's it is

911
00:42:07,380 --> 00:42:11,700
loaded as if it is trusted and<font color="#E5E5E5"> as I said</font>

912
00:42:09,510 --> 00:42:16,109
<font color="#CCCCCC">before</font><font color="#E5E5E5"> there is a UAC bypass if you</font>

913
00:42:11,700 --> 00:42:18,089
define<font color="#CCCCCC"> xalapa file</font><font color="#E5E5E5"> for user without if</font>

914
00:42:16,109 --> 00:42:22,589
you don't have new staff administrative

915
00:42:18,089 --> 00:42:23,849
privileges<font color="#E5E5E5"> and load processing with</font>

916
00:42:22,589 --> 00:42:26,578
administrative privileges

917
00:42:23,849 --> 00:42:29,039
the<font color="#CCCCCC"> sila</font><font color="#E5E5E5"> we load your CLL</font><font color="#CCCCCC"> profile</font><font color="#E5E5E5"> even</font>

918
00:42:26,579 --> 00:42:35,309
<font color="#E5E5E5">though that you didn't had</font><font color="#CCCCCC"> the</font>

919
00:42:29,039 --> 00:42:37,799
privileges to register it<font color="#CCCCCC"> okay so this</font>

920
00:42:35,309 --> 00:42:40,079
was a group<font color="#CCCCCC"> I</font><font color="#E5E5E5"> thought maybe I'm talking</font>

921
00:42:37,799 --> 00:42:43,049
<font color="#E5E5E5">me here but there</font><font color="#CCCCCC"> is a whole team behind</font>

922
00:42:40,079 --> 00:42:45,539
me that<font color="#E5E5E5"> help in this research so please</font>

923
00:42:43,049 --> 00:42:49,020
give a round of applause to<font color="#CCCCCC"> yell no</font>

924
00:42:45,539 --> 00:42:51,270
money<font color="#E5E5E5"> or forensics expert to guy phone</font>

925
00:42:49,020 --> 00:42:52,859
call<font color="#CCCCCC"> our</font><font color="#E5E5E5"> CTO that you can drop him</font>

926
00:42:51,270 --> 00:42:55,680
<font color="#E5E5E5">anywhere in the world and we he will</font>

927
00:42:52,859 --> 00:43:00,089
tell you what<font color="#E5E5E5"> good restaurants to go to</font>

928
00:42:55,680 --> 00:43:02,129
<font color="#CCCCCC">a fine</font><font color="#E5E5E5"> noble girl from a my team which</font>

929
00:43:00,089 --> 00:43:04,890
is one<font color="#CCCCCC"> of the biters developer you got</font>

930
00:43:02,130 --> 00:43:08,039
work with and lastly your sister<font color="#CCCCCC"> C which</font>

931
00:43:04,890 --> 00:43:10,410
is my which he might<font color="#E5E5E5"> be</font><font color="#CCCCCC"> world</font><font color="#E5E5E5"> expert in</font>

932
00:43:08,039 --> 00:43:12,660
<font color="#E5E5E5">PowerShell and Active Directory security</font>

933
00:43:10,410 --> 00:43:14,038
but he is a guitar legend<font color="#E5E5E5"> and if the</font>

934
00:43:12,660 --> 00:43:15,990
only thing<font color="#E5E5E5"> you</font><font color="#CCCCCC"> will take from this talk</font>

935
00:43:14,039 --> 00:43:18,690
<font color="#CCCCCC">is</font><font color="#E5E5E5"> the you'll open your iTunes or</font>

936
00:43:15,990 --> 00:43:21,419
Spotify and look for your<font color="#CCCCCC"> city and the</font>

937
00:43:18,690 --> 00:43:24,390
<font color="#CCCCCC">Oriental Orchestra or any other</font><font color="#E5E5E5"> office</font>

938
00:43:21,420 --> 00:43:28,650
projects<font color="#E5E5E5"> I promise you it will be will</font>

939
00:43:24,390 --> 00:43:32,549
be<font color="#E5E5E5"> well worth</font><font color="#CCCCCC"> your time</font><font color="#E5E5E5"> so the takeaways</font>

940
00:43:28,650 --> 00:43:34,020
<font color="#E5E5E5">that should take with you you need to</font>

941
00:43:32,549 --> 00:43:37,640
<font color="#CCCCCC">know that there</font><font color="#E5E5E5"> is a way to hook dotnet</font>

942
00:43:34,020 --> 00:43:39,940
without leaving any trace on<font color="#E5E5E5"> disk</font>

943
00:43:37,640 --> 00:43:42,830
<font color="#E5E5E5">the industry</font><font color="#CCCCCC"> needs</font><font color="#E5E5E5"> to be aware of that</font>

944
00:43:39,940 --> 00:43:46,190
<font color="#E5E5E5">we can also use the dotnet hooks to</font>

945
00:43:42,830 --> 00:43:48,740
enhance<font color="#E5E5E5"> our security and visibility so</font>

946
00:43:46,190 --> 00:43:50,660
we did the research<font color="#CCCCCC"> please and Point</font>

947
00:43:48,740 --> 00:43:54,979
solutions take that<font color="#E5E5E5"> research and</font>

948
00:43:50,660 --> 00:43:58,580
implement it<font color="#CCCCCC"> in your solutions next</font>

949
00:43:54,980 --> 00:44:00,410
<font color="#E5E5E5">Microsoft please improve MSI</font><font color="#CCCCCC"> I have to</font>

950
00:43:58,580 --> 00:44:02,450
say maybe I<font color="#E5E5E5"> bashed them a little bit but</font>

951
00:44:00,410 --> 00:44:05,569
PowerShell was written by very good

952
00:44:02,450 --> 00:44:07,339
<font color="#E5E5E5">developers</font><font color="#CCCCCC"> I seen the code it's amazing</font>

953
00:44:05,570 --> 00:44:09,920
code they have<font color="#E5E5E5"> very bright developers</font>

954
00:44:07,340 --> 00:44:11,740
<font color="#E5E5E5">but they did missed some</font><font color="#CCCCCC"> stuff in</font>

955
00:44:09,920 --> 00:44:14,630
security and<font color="#E5E5E5"> I know how hard it is to</font>

956
00:44:11,740 --> 00:44:16,850
hire people that<font color="#CCCCCC"> know security and know</font>

957
00:44:14,630 --> 00:44:20,450
good development<font color="#E5E5E5"> I'm also looking for</font>

958
00:44:16,850 --> 00:44:21,860
two positions<font color="#CCCCCC"> in my team so I don't want</font>

959
00:44:20,450 --> 00:44:23,629
to<font color="#E5E5E5"> hold this against them but please</font>

960
00:44:21,860 --> 00:44:25,190
Microsoft see what we did with<font color="#E5E5E5"> Babel</font>

961
00:44:23,630 --> 00:44:28,190
shellfish and see if you can also take

962
00:44:25,190 --> 00:44:30,080
<font color="#E5E5E5">it and implement it into PowerShell next</font>

963
00:44:28,190 --> 00:44:32,180
<font color="#CCCCCC">because we don't really</font><font color="#E5E5E5"> need to hook</font>

964
00:44:30,080 --> 00:44:34,370
PowerShell<font color="#CCCCCC"> to get the security should be</font>

965
00:44:32,180 --> 00:44:37,129
<font color="#CCCCCC">already building into PowerShell</font><font color="#E5E5E5"> and</font>

966
00:44:34,370 --> 00:44:39,740
lastly<font color="#E5E5E5"> let's let's break it to make it</font>

967
00:44:37,130 --> 00:44:45,560
better<font color="#CCCCCC"> so thank you</font>

968
00:44:39,740 --> 00:44:45,560
[Applause]

969
00:44:46,220 --> 00:44:58,640
<font color="#CCCCCC">I have the resources if you want about</font>

970
00:44:49,430 --> 00:45:00,919
stuff that I mentioned and lastly I<font color="#CCCCCC"> will</font>

971
00:44:58,640 --> 00:45:08,210
publish<font color="#CCCCCC"> the code on my Twitter account</font>

972
00:45:00,920 --> 00:45:10,130
<font color="#CCCCCC">so follow me</font><font color="#E5E5E5"> good</font><font color="#CCCCCC"> okay so if anyone has</font>

973
00:45:08,210 --> 00:45:13,010
<font color="#E5E5E5">any</font><font color="#CCCCCC"> questions I think we have enough</font>

974
00:45:10,130 --> 00:45:18,380
time<font color="#E5E5E5"> yeah we have five minutes for</font>

975
00:45:13,010 --> 00:45:21,609
<font color="#CCCCCC">questions so the question was if I</font>

976
00:45:18,380 --> 00:45:32,650
tested it<font color="#E5E5E5"> against</font><font color="#CCCCCC"> AVL tools no I didn't</font>

977
00:45:21,609 --> 00:45:32,650
yeah okay thank you<font color="#E5E5E5"> very much</font>

