1
00:00:02,000 --> 00:00:13,830
good hi my name is<font color="#CCCCCC"> Gayle Rosner</font><font color="#E5E5E5"> this is</font>

2
00:00:11,400 --> 00:00:16,619
sin<font color="#CCCCCC"> fun building language aware buzzers</font>

3
00:00:13,830 --> 00:00:18,779
<font color="#E5E5E5">this is a highly condensed version of</font>

4
00:00:16,619 --> 00:00:27,779
the abstract<font color="#CCCCCC"> that was in the program</font>

5
00:00:18,779 --> 00:00:42,960
<font color="#CCCCCC">there were</font><font color="#E5E5E5"> some scheduling is that</font>

6
00:00:27,779 --> 00:00:44,850
better<font color="#CCCCCC"> all right stay</font><font color="#E5E5E5"> so I tried to keep</font>

7
00:00:42,960 --> 00:00:45,930
in all the<font color="#E5E5E5"> relevant</font><font color="#CCCCCC"> information</font><font color="#E5E5E5"> if</font>

8
00:00:44,850 --> 00:00:52,559
there's something you're lost on just

9
00:00:45,930 --> 00:00:54,750
yell and I<font color="#CCCCCC"> will explain so to get</font>

10
00:00:52,559 --> 00:00:56,940
<font color="#E5E5E5">started</font><font color="#CCCCCC"> if you've</font><font color="#E5E5E5"> ever tried testing</font>

11
00:00:54,750 --> 00:00:59,730
software<font color="#E5E5E5"> with really highly structured</font>

12
00:00:56,940 --> 00:01:02,339
<font color="#E5E5E5">input data you've likely run into</font><font color="#CCCCCC"> a</font>

13
00:00:59,730 --> 00:01:03,989
handful<font color="#E5E5E5"> of problems but ultimately this</font>

14
00:01:02,340 --> 00:01:05,900
comes down<font color="#CCCCCC"> to the fact</font><font color="#E5E5E5"> that testing</font>

15
00:01:03,989 --> 00:01:07,860
structured input is really hard<font color="#CCCCCC"> and</font>

16
00:01:05,900 --> 00:01:10,740
<font color="#CCCCCC">examples</font><font color="#E5E5E5"> of this are things like</font>

17
00:01:07,860 --> 00:01:13,220
compilers interpreters complex<font color="#E5E5E5"> network</font>

18
00:01:10,740 --> 00:01:15,630
protocols<font color="#E5E5E5"> things that have really</font>

19
00:01:13,220 --> 00:01:18,420
structured data<font color="#E5E5E5"> where there is maybe</font>

20
00:01:15,630 --> 00:01:20,070
information that is in one part that's

21
00:01:18,420 --> 00:01:22,259
<font color="#E5E5E5">going to be used somewhere</font><font color="#CCCCCC"> else</font><font color="#E5E5E5"> to</font>

22
00:01:20,070 --> 00:01:25,408
determine<font color="#CCCCCC"> how to continue to unpack or</font>

23
00:01:22,259 --> 00:01:28,170
understand something<font color="#CCCCCC"> terminal menus if</font>

24
00:01:25,409 --> 00:01:30,240
<font color="#E5E5E5">you're interactive programs</font><font color="#CCCCCC"> places where</font>

25
00:01:28,170 --> 00:01:32,430
you really<font color="#CCCCCC"> need to make</font><font color="#E5E5E5"> sure that you're</font>

26
00:01:30,240 --> 00:01:34,439
testing<font color="#E5E5E5"> like the right series</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> things</font>

27
00:01:32,430 --> 00:01:36,150
<font color="#E5E5E5">that get you to</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> place in</font><font color="#CCCCCC"> the</font>

28
00:01:34,439 --> 00:01:40,619
application<font color="#CCCCCC"> that will have some kind</font><font color="#E5E5E5"> of</font>

29
00:01:36,150 --> 00:01:43,829
interaction<font color="#E5E5E5"> and it's hard for</font><font color="#CCCCCC"> a handful</font>

30
00:01:40,619 --> 00:01:45,899
of<font color="#E5E5E5"> reasons the first being that simply</font>

31
00:01:43,829 --> 00:01:47,939
getting<font color="#E5E5E5"> our test cases is a really hard</font>

32
00:01:45,899 --> 00:01:50,310
<font color="#E5E5E5">thing to do if you've ever worked on</font>

33
00:01:47,939 --> 00:01:54,179
<font color="#E5E5E5">software you know that test cases are</font>

34
00:01:50,310 --> 00:01:57,119
not<font color="#E5E5E5"> always super common and depending on</font>

35
00:01:54,180 --> 00:01:59,820
how strict<font color="#E5E5E5"> your team is you may or may</font>

36
00:01:57,119 --> 00:02:01,380
<font color="#CCCCCC">not have good test</font><font color="#E5E5E5"> coverage</font><font color="#CCCCCC"> if you're an</font>

37
00:01:59,820 --> 00:02:05,339
<font color="#CCCCCC">open source you kind</font><font color="#E5E5E5"> of have the benefit</font>

38
00:02:01,380 --> 00:02:07,710
<font color="#CCCCCC">of getting</font><font color="#E5E5E5"> access to the the actual test</font>

39
00:02:05,340 --> 00:02:10,410
cases<font color="#E5E5E5"> if they exist if you're working on</font>

40
00:02:07,710 --> 00:02:13,540
say<font color="#E5E5E5"> reverse and hearing something or you</font>

41
00:02:10,410 --> 00:02:16,209
are<font color="#E5E5E5"> trying</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> determine whether or not</font>

42
00:02:13,540 --> 00:02:18,129
<font color="#E5E5E5">your building is going to be compliant</font>

43
00:02:16,209 --> 00:02:21,519
with something else out there<font color="#E5E5E5"> you might</font>

44
00:02:18,129 --> 00:02:23,260
<font color="#E5E5E5">not have the</font><font color="#CCCCCC"> closed-source test cases</font><font color="#E5E5E5"> it</font>

45
00:02:21,519 --> 00:02:25,750
just<font color="#CCCCCC"> is part</font><font color="#E5E5E5"> of you know the actual</font>

46
00:02:23,260 --> 00:02:27,399
products<font color="#CCCCCC"> source</font><font color="#E5E5E5"> code and you don't have</font>

47
00:02:25,750 --> 00:02:30,180
access<font color="#CCCCCC"> to</font><font color="#E5E5E5"> that so you're kind of</font><font color="#CCCCCC"> limited</font>

48
00:02:27,400 --> 00:02:30,180
in<font color="#E5E5E5"> what you can get access</font><font color="#CCCCCC"> to</font>

49
00:02:30,209 --> 00:02:34,599
understanding code coverage<font color="#CCCCCC"> is sometimes</font>

50
00:02:33,340 --> 00:02:36,970
difficult there's a lot of<font color="#E5E5E5"> cooling out</font>

51
00:02:34,599 --> 00:02:39,459
there that will inspect<font color="#E5E5E5"> the application</font>

52
00:02:36,970 --> 00:02:42,340
will trace execution through<font color="#E5E5E5"> there and</font>

53
00:02:39,459 --> 00:02:45,430
kind of show you where you have<font color="#E5E5E5"> explored</font>

54
00:02:42,340 --> 00:02:46,720
in the application<font color="#CCCCCC"> but</font><font color="#E5E5E5"> that's not always</font>

55
00:02:45,430 --> 00:02:48,519
<font color="#E5E5E5">available and</font><font color="#CCCCCC"> just because you've been</font>

56
00:02:46,720 --> 00:02:51,819
<font color="#CCCCCC">to a place doesn't</font><font color="#E5E5E5"> mean you've really</font>

57
00:02:48,519 --> 00:02:53,709
exercised it<font color="#CCCCCC"> state is a thing it's very</font>

58
00:02:51,819 --> 00:02:55,869
<font color="#CCCCCC">rare that</font><font color="#E5E5E5"> you see truly stateless code</font>

59
00:02:53,709 --> 00:02:57,700
<font color="#CCCCCC">and so just because you got</font><font color="#E5E5E5"> to an area</font>

60
00:02:55,870 --> 00:03:00,909
with some certain<font color="#E5E5E5"> state does not mean</font>

61
00:02:57,700 --> 00:03:05,950
that<font color="#CCCCCC"> different state will not have some</font>

62
00:03:00,909 --> 00:03:07,569
completely different behavior<font color="#E5E5E5"> hike code</font>

63
00:03:05,950 --> 00:03:11,108
coverage does not<font color="#E5E5E5"> miss ed</font><font color="#CCCCCC"> it's not</font>

64
00:03:07,569 --> 00:03:12,429
<font color="#E5E5E5">always equal well exercised and so like</font>

65
00:03:11,109 --> 00:03:13,989
if you're<font color="#E5E5E5"> trying to test a parser</font><font color="#CCCCCC"> or</font>

66
00:03:12,430 --> 00:03:16,930
something that uses<font color="#CCCCCC"> a parser to validate</font>

67
00:03:13,989 --> 00:03:19,120
input<font color="#CCCCCC"> if you don't get past that</font><font color="#E5E5E5"> initial</font>

68
00:03:16,930 --> 00:03:21,040
parse<font color="#E5E5E5"> you might not ever get</font><font color="#CCCCCC"> to anything</font>

69
00:03:19,120 --> 00:03:22,449
<font color="#E5E5E5">interesting in the application because</font>

70
00:03:21,040 --> 00:03:24,459
it's that<font color="#E5E5E5"> gatekeeper</font><font color="#CCCCCC"> and it's stopping</font>

71
00:03:22,449 --> 00:03:29,590
<font color="#E5E5E5">you from getting</font><font color="#CCCCCC"> to a place</font><font color="#E5E5E5"> where</font><font color="#CCCCCC"> that</font>

72
00:03:24,459 --> 00:03:31,959
information<font color="#E5E5E5"> is</font><font color="#CCCCCC"> being used</font><font color="#E5E5E5"> so you want to</font>

73
00:03:29,590 --> 00:03:34,359
<font color="#E5E5E5">avoid an interesting input stuff</font><font color="#CCCCCC"> that's</font>

74
00:03:31,959 --> 00:03:36,720
not<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> get you past that point and</font>

75
00:03:34,359 --> 00:03:40,090
so<font color="#E5E5E5"> typically a lot of</font><font color="#CCCCCC"> off-the-shelf</font>

76
00:03:36,720 --> 00:03:42,209
<font color="#CCCCCC">buzzers and tooling out there is gonna</font>

77
00:03:40,090 --> 00:03:44,769
<font color="#E5E5E5">look for very</font><font color="#CCCCCC"> specific conditions</font>

78
00:03:42,209 --> 00:03:48,639
<font color="#CCCCCC">looking for</font><font color="#E5E5E5"> cases</font><font color="#CCCCCC"> of did I crash the</font>

79
00:03:44,769 --> 00:03:52,060
application<font color="#E5E5E5"> did it end in a</font><font color="#CCCCCC"> segfault did</font>

80
00:03:48,639 --> 00:03:54,849
<font color="#CCCCCC">it end in a</font><font color="#E5E5E5"> sick abort</font><font color="#CCCCCC"> what's the return</font>

81
00:03:52,060 --> 00:03:58,299
<font color="#E5E5E5">value of the application and and what</font>

82
00:03:54,849 --> 00:04:00,220
did<font color="#E5E5E5"> it do</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> you've limited flexibility</font>

83
00:03:58,299 --> 00:04:04,269
<font color="#E5E5E5">in</font><font color="#CCCCCC"> determining you know</font><font color="#E5E5E5"> your failure</font>

84
00:04:00,220 --> 00:04:05,470
cases<font color="#E5E5E5"> and understanding did that do</font>

85
00:04:04,269 --> 00:04:07,389
something<font color="#CCCCCC"> interesting and</font><font color="#E5E5E5"> do I want</font><font color="#CCCCCC"> to</font>

86
00:04:05,470 --> 00:04:10,060
continue<font color="#CCCCCC"> down this path you also have</font>

87
00:04:07,389 --> 00:04:12,340
pretty limited flexibility<font color="#E5E5E5"> typically in</font>

88
00:04:10,060 --> 00:04:15,759
creating that<font color="#CCCCCC"> feedback loop in</font><font color="#E5E5E5"> terms of</font>

89
00:04:12,340 --> 00:04:18,579
how you<font color="#E5E5E5"> want to modify your input</font><font color="#CCCCCC"> for</font>

90
00:04:15,759 --> 00:04:21,519
that that<font color="#E5E5E5"> next</font><font color="#CCCCCC"> generation as you</font>

91
00:04:18,579 --> 00:04:23,020
<font color="#CCCCCC">generate your next input so that next</font>

92
00:04:21,519 --> 00:04:24,729
mutation<font color="#E5E5E5"> you're gonna perform to the</font>

93
00:04:23,020 --> 00:04:26,180
input to see you know am<font color="#E5E5E5"> i doing</font>

94
00:04:24,729 --> 00:04:27,890
something<font color="#CCCCCC"> interesting now</font>

95
00:04:26,180 --> 00:04:30,980
<font color="#CCCCCC">a lot of the time as</font><font color="#E5E5E5"> well see you</font>

96
00:04:27,890 --> 00:04:32,719
there's based on randomness<font color="#CCCCCC"> and a</font>

97
00:04:30,980 --> 00:04:35,750
handful<font color="#E5E5E5"> of other techniques</font><font color="#CCCCCC"> but</font>

98
00:04:32,720 --> 00:04:37,790
<font color="#CCCCCC">ultimately for any sufficiently larger</font>

99
00:04:35,750 --> 00:04:40,370
complex program you're probably<font color="#E5E5E5"> gonna</font>

100
00:04:37,790 --> 00:04:43,250
<font color="#CCCCCC">want</font><font color="#E5E5E5"> to use some sort</font><font color="#CCCCCC"> of automated</font><font color="#E5E5E5"> test</font>

101
00:04:40,370 --> 00:04:46,840
generation<font color="#E5E5E5"> fuzzing is just one of those</font>

102
00:04:43,250 --> 00:04:49,010
ways you're going<font color="#E5E5E5"> to become effective in</font>

103
00:04:46,840 --> 00:04:55,580
trying to<font color="#E5E5E5"> get good coverage and</font>

104
00:04:49,010 --> 00:04:57,500
<font color="#E5E5E5">understand that you are you feel</font>

105
00:04:55,580 --> 00:05:00,109
comfortable with<font color="#E5E5E5"> how much you've tested</font>

106
00:04:57,500 --> 00:05:02,630
<font color="#E5E5E5">this</font><font color="#CCCCCC"> it's the only way you're</font><font color="#E5E5E5"> gonna get</font>

107
00:05:00,110 --> 00:05:04,430
<font color="#E5E5E5">billions of test cases out in any</font>

108
00:05:02,630 --> 00:05:08,180
<font color="#E5E5E5">reasonable amount</font><font color="#CCCCCC"> of time with any a</font>

109
00:05:04,430 --> 00:05:11,210
reasonable<font color="#E5E5E5"> amount of work there's a lot</font>

110
00:05:08,180 --> 00:05:12,470
of different<font color="#E5E5E5"> ways</font><font color="#CCCCCC"> you can do this and a</font>

111
00:05:11,210 --> 00:05:13,840
lot of<font color="#E5E5E5"> different</font><font color="#CCCCCC"> techniques</font><font color="#E5E5E5"> we're gonna</font>

112
00:05:12,470 --> 00:05:17,450
focus on<font color="#E5E5E5"> grammar based fuzzing and</font>

113
00:05:13,840 --> 00:05:19,700
<font color="#E5E5E5">essentially what this</font><font color="#CCCCCC"> does is it takes a</font>

114
00:05:17,450 --> 00:05:21,620
grammar file<font color="#E5E5E5"> and when I say grammar file</font>

115
00:05:19,700 --> 00:05:23,539
<font color="#CCCCCC">when you're building a language you</font>

116
00:05:21,620 --> 00:05:26,450
typically will define a grammar whether

117
00:05:23,540 --> 00:05:28,190
it's context-free or regular or contact

118
00:05:26,450 --> 00:05:31,039
<font color="#E5E5E5">sensitive or turing-complete</font><font color="#CCCCCC"> but you're</font>

119
00:05:28,190 --> 00:05:32,510
gonna define<font color="#E5E5E5"> this grammar</font><font color="#CCCCCC"> and if you're</font>

120
00:05:31,040 --> 00:05:34,520
using a parser generator you're gonna

121
00:05:32,510 --> 00:05:36,590
feed<font color="#E5E5E5"> this grammar in and it's gonna spit</font>

122
00:05:34,520 --> 00:05:39,140
you out some code that<font color="#E5E5E5"> will recognize</font>

123
00:05:36,590 --> 00:05:41,150
that language<font color="#CCCCCC"> so we're gonna take this</font>

124
00:05:39,140 --> 00:05:42,860
grammar<font color="#E5E5E5"> and from that grammar we're</font>

125
00:05:41,150 --> 00:05:44,510
going to do the opposite<font color="#CCCCCC"> rather</font><font color="#E5E5E5"> than</font>

126
00:05:42,860 --> 00:05:47,150
trying to<font color="#E5E5E5"> parse input we're</font><font color="#CCCCCC"> going</font><font color="#E5E5E5"> to</font>

127
00:05:44,510 --> 00:05:48,349
generate<font color="#E5E5E5"> input from</font><font color="#CCCCCC"> that grammar</font><font color="#E5E5E5"> so that</font>

128
00:05:47,150 --> 00:05:50,330
we know<font color="#E5E5E5"> that it's syntactically correct</font>

129
00:05:48,350 --> 00:05:53,420
<font color="#E5E5E5">and we don't have to worry about that</font>

130
00:05:50,330 --> 00:05:55,130
case<font color="#E5E5E5"> of sending an input</font><font color="#CCCCCC"> that's not</font>

131
00:05:53,420 --> 00:05:59,600
getting<font color="#CCCCCC"> us past that</font><font color="#E5E5E5"> initial parse phase</font>

132
00:05:55,130 --> 00:06:02,390
at least hopefully as<font color="#E5E5E5"> I've said if</font>

133
00:05:59,600 --> 00:06:03,710
you're using these<font color="#CCCCCC"> tools they all have</font>

134
00:06:02,390 --> 00:06:06,560
their own grammar definition languages

135
00:06:03,710 --> 00:06:09,859
<font color="#CCCCCC">so whether you're</font><font color="#E5E5E5"> using like bison or</font>

136
00:06:06,560 --> 00:06:11,780
yak or antler or any number<font color="#CCCCCC"> of</font><font color="#E5E5E5"> these</font>

137
00:06:09,860 --> 00:06:13,190
<font color="#E5E5E5">different tools out there</font><font color="#CCCCCC"> they're all</font>

138
00:06:11,780 --> 00:06:14,989
<font color="#E5E5E5">going to be subtly different</font><font color="#CCCCCC"> their</font>

139
00:06:13,190 --> 00:06:17,480
parsing algorithms are different the

140
00:06:14,990 --> 00:06:22,820
actual definition languages is different

141
00:06:17,480 --> 00:06:25,130
and because<font color="#CCCCCC"> of</font><font color="#E5E5E5"> that you typically for</font>

142
00:06:22,820 --> 00:06:27,290
the tools out there<font color="#CCCCCC"> need</font><font color="#E5E5E5"> to end up</font>

143
00:06:25,130 --> 00:06:29,180
<font color="#E5E5E5">rewriting a lot of these grammars in the</font>

144
00:06:27,290 --> 00:06:31,400
very specific language<font color="#CCCCCC"> that the tool</font>

145
00:06:29,180 --> 00:06:34,010
expects so examples of<font color="#E5E5E5"> tools</font><font color="#CCCCCC"> that do</font>

146
00:06:31,400 --> 00:06:37,419
this are<font color="#CCCCCC"> Mozilla Dharma which is an open</font>

147
00:06:34,010 --> 00:06:39,740
source<font color="#E5E5E5"> project</font><font color="#CCCCCC"> that they use for testing</font>

148
00:06:37,419 --> 00:06:43,039
<font color="#CCCCCC">browsers</font><font color="#E5E5E5"> so for HTML</font>

149
00:06:39,740 --> 00:06:45,169
CSS<font color="#E5E5E5"> JavaScript</font><font color="#CCCCCC"> there's also a really</font>

150
00:06:43,039 --> 00:06:46,729
<font color="#E5E5E5">great paper called fussing with code</font>

151
00:06:45,169 --> 00:06:50,090
fragments<font color="#E5E5E5"> to introduced a tool called</font>

152
00:06:46,729 --> 00:06:51,590
<font color="#CCCCCC">Ling Fazal set of</font><font color="#E5E5E5"> Mozilla</font><font color="#CCCCCC"> this is not</font>

153
00:06:50,090 --> 00:06:55,039
<font color="#E5E5E5">open source and as far as I know it's</font>

154
00:06:51,590 --> 00:06:57,198
not<font color="#CCCCCC"> available generally both</font><font color="#E5E5E5"> are really</font>

155
00:06:55,039 --> 00:07:00,080
good places to start<font color="#CCCCCC"> looking at</font><font color="#E5E5E5"> for more</font>

156
00:06:57,199 --> 00:07:06,280
<font color="#E5E5E5">information about how this works</font><font color="#CCCCCC"> but the</font>

157
00:07:00,080 --> 00:07:08,539
idea is they both take these specific

158
00:07:06,280 --> 00:07:11,210
grammar languages where you<font color="#E5E5E5"> define their</font>

159
00:07:08,539 --> 00:07:13,068
grammar<font color="#E5E5E5"> and you could translate the</font>

160
00:07:11,210 --> 00:07:14,930
grammar that<font color="#E5E5E5"> you're working with to this</font>

161
00:07:13,069 --> 00:07:16,880
language<font color="#E5E5E5"> and that's not</font><font color="#CCCCCC"> necessarily</font><font color="#E5E5E5"> an</font>

162
00:07:14,930 --> 00:07:19,220
<font color="#E5E5E5">easy thing to do you're talking about</font>

163
00:07:16,880 --> 00:07:22,370
grammars<font color="#E5E5E5"> that might be 10 mm of lines</font>

164
00:07:19,220 --> 00:07:24,770
long<font color="#CCCCCC"> super complex and maybe the syntax</font>

165
00:07:22,370 --> 00:07:27,650
<font color="#E5E5E5">or</font><font color="#CCCCCC"> the semantics of it</font><font color="#E5E5E5"> are subtly</font>

166
00:07:24,770 --> 00:07:29,060
different from<font color="#E5E5E5"> how a different one might</font>

167
00:07:27,650 --> 00:07:30,440
work and so you need to be really

168
00:07:29,060 --> 00:07:32,360
<font color="#CCCCCC">careful when</font><font color="#E5E5E5"> you do this that you don't</font>

169
00:07:30,440 --> 00:07:34,639
change the<font color="#E5E5E5"> semantic meaning of what that</font>

170
00:07:32,360 --> 00:07:36,880
grammar is<font color="#E5E5E5"> showing and that's really</font>

171
00:07:34,639 --> 00:07:36,880
hard

172
00:07:38,259 --> 00:07:43,000
<font color="#E5E5E5">they're also typically limited</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> two</font>

173
00:07:41,270 --> 00:07:46,520
context-free grammars<font color="#E5E5E5"> or regular</font>

174
00:07:43,000 --> 00:07:48,320
<font color="#CCCCCC">specifically with</font><font color="#E5E5E5"> text-based input and</font>

175
00:07:46,520 --> 00:07:50,990
this is great if<font color="#CCCCCC"> that's</font><font color="#E5E5E5"> what you're</font>

176
00:07:48,320 --> 00:07:53,259
looking<font color="#CCCCCC"> to test but</font><font color="#E5E5E5"> if you're trying to</font>

177
00:07:50,990 --> 00:07:55,280
<font color="#E5E5E5">do you know binary file formats or</font>

178
00:07:53,259 --> 00:07:57,620
network protocols that are<font color="#E5E5E5"> all binary</font>

179
00:07:55,280 --> 00:07:58,969
<font color="#E5E5E5">based you're typically pretty limited</font><font color="#CCCCCC"> in</font>

180
00:07:57,620 --> 00:08:00,169
what you<font color="#E5E5E5"> can do with these tools because</font>

181
00:07:58,969 --> 00:08:04,639
they just don't<font color="#E5E5E5"> give you the freedom to</font>

182
00:08:00,169 --> 00:08:08,448
<font color="#E5E5E5">express that language so what can we do</font>

183
00:08:04,639 --> 00:08:10,580
to do better<font color="#E5E5E5"> as I said earlier you</font><font color="#CCCCCC"> know</font>

184
00:08:08,449 --> 00:08:13,099
<font color="#E5E5E5">one of the things that is a big</font><font color="#CCCCCC"> problem</font>

185
00:08:10,580 --> 00:08:15,800
<font color="#E5E5E5">is the</font><font color="#CCCCCC"> ability</font><font color="#E5E5E5"> to build custom test</font>

186
00:08:13,099 --> 00:08:18,680
harnesses<font color="#E5E5E5"> most fuzzers and and tools out</font>

187
00:08:15,800 --> 00:08:20,090
<font color="#E5E5E5">there that are in this vein</font><font color="#CCCCCC"> there look</font>

188
00:08:18,680 --> 00:08:23,120
for<font color="#CCCCCC"> a</font><font color="#E5E5E5"> very specific thing set a crashed</font>

189
00:08:20,090 --> 00:08:26,989
application what's the return type<font color="#CCCCCC"> what</font>

190
00:08:23,120 --> 00:08:29,000
signal did it throw at the end<font color="#E5E5E5"> and so</font>

191
00:08:26,990 --> 00:08:31,310
being able to<font color="#E5E5E5"> have more flexibility in</font>

192
00:08:29,000 --> 00:08:35,659
terms of determining<font color="#E5E5E5"> am I seeing</font>

193
00:08:31,310 --> 00:08:37,399
something interesting<font color="#E5E5E5"> and determining is</font>

194
00:08:35,659 --> 00:08:39,049
there something interesting<font color="#E5E5E5"> I can get</font>

195
00:08:37,399 --> 00:08:40,969
out<font color="#CCCCCC"> of this is there some information</font>

196
00:08:39,049 --> 00:08:45,260
<font color="#CCCCCC">that sharing is leaking that</font><font color="#E5E5E5"> I can</font>

197
00:08:40,969 --> 00:08:47,600
determine<font color="#E5E5E5"> something more from being able</font>

198
00:08:45,260 --> 00:08:50,270
to directly<font color="#CCCCCC"> use the grammar</font><font color="#E5E5E5"> from our</font>

199
00:08:47,600 --> 00:08:52,630
parser is great if I've<font color="#CCCCCC"> already gone to</font>

200
00:08:50,270 --> 00:08:55,240
<font color="#E5E5E5">the process of writing</font>

201
00:08:52,630 --> 00:08:58,860
so in the<font color="#CCCCCC"> instance of one of the</font><font color="#E5E5E5"> reasons</font>

202
00:08:55,240 --> 00:09:01,240
<font color="#E5E5E5">this I built this is we built our own</font>

203
00:08:58,860 --> 00:09:03,790
implementations of a handful of

204
00:09:01,240 --> 00:09:08,620
different sequel parsers because we

205
00:09:03,790 --> 00:09:09,819
needed<font color="#E5E5E5"> it</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> an analysis tool</font><font color="#CCCCCC"> and one</font>

206
00:09:08,620 --> 00:09:12,460
<font color="#E5E5E5">of the big</font><font color="#CCCCCC"> problems we're trying to</font>

207
00:09:09,820 --> 00:09:16,780
figure<font color="#CCCCCC"> out is</font><font color="#E5E5E5"> how close is our grammar</font>

208
00:09:12,460 --> 00:09:19,150
<font color="#E5E5E5">to the original one what do we parse and</font>

209
00:09:16,780 --> 00:09:21,670
how does<font color="#CCCCCC"> it</font><font color="#E5E5E5"> affect how similar is it to</font>

210
00:09:19,150 --> 00:09:22,840
the real one<font color="#CCCCCC"> and if we were that</font><font color="#E5E5E5"> good</font>

211
00:09:21,670 --> 00:09:25,719
<font color="#E5E5E5">enough to go and take this</font><font color="#CCCCCC"> you know</font>

212
00:09:22,840 --> 00:09:31,240
<font color="#CCCCCC">fifteen thousand line grammar definition</font>

213
00:09:25,720 --> 00:09:33,910
and convert it over to the<font color="#E5E5E5"> the grammar</font>

214
00:09:31,240 --> 00:09:35,560
definition<font color="#E5E5E5"> that say</font><font color="#CCCCCC"> Dharma uses</font><font color="#E5E5E5"> we're</font>

215
00:09:33,910 --> 00:09:36,939
not going<font color="#E5E5E5"> to be able</font><font color="#CCCCCC"> to manage</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> as</font>

216
00:09:35,560 --> 00:09:39,670
we make<font color="#CCCCCC"> changes in one we're not going</font>

217
00:09:36,940 --> 00:09:41,110
<font color="#CCCCCC">to be able</font><font color="#E5E5E5"> to go and</font><font color="#CCCCCC"> update it</font><font color="#E5E5E5"> and keep</font>

218
00:09:39,670 --> 00:09:42,910
them in<font color="#E5E5E5"> sync and we'll never be able</font><font color="#CCCCCC"> to</font>

219
00:09:41,110 --> 00:09:47,980
to<font color="#E5E5E5"> really know that we're doing the</font>

220
00:09:42,910 --> 00:09:50,680
right<font color="#E5E5E5"> thing here expressivity</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> another</font>

221
00:09:47,980 --> 00:09:52,960
one as I said<font color="#CCCCCC"> having</font><font color="#E5E5E5"> the ability to do</font>

222
00:09:50,680 --> 00:09:56,229
these common<font color="#E5E5E5"> things like</font><font color="#CCCCCC"> text-based</font>

223
00:09:52,960 --> 00:09:57,670
<font color="#E5E5E5">context-free and regular but having more</font>

224
00:09:56,230 --> 00:10:00,160
than<font color="#E5E5E5"> that you know being</font><font color="#CCCCCC"> able to really</font>

225
00:09:57,670 --> 00:10:04,240
<font color="#E5E5E5">hit the binary stuff you know if we want</font>

226
00:10:00,160 --> 00:10:06,969
<font color="#E5E5E5">to do like complex file formats</font><font color="#CCCCCC"> like elf</font>

227
00:10:04,240 --> 00:10:08,830
files or PE files<font color="#E5E5E5"> where there are fixed</font>

228
00:10:06,970 --> 00:10:10,240
offsets in there that need to<font color="#CCCCCC"> be correct</font>

229
00:10:08,830 --> 00:10:15,220
so they can go to the right place and

230
00:10:10,240 --> 00:10:17,560
get<font color="#E5E5E5"> information</font><font color="#CCCCCC"> so being able to</font><font color="#E5E5E5"> have</font>

231
00:10:15,220 --> 00:10:21,280
<font color="#CCCCCC">that</font><font color="#E5E5E5"> breadth and do more with</font><font color="#CCCCCC"> it is this</font>

232
00:10:17,560 --> 00:10:23,050
<font color="#E5E5E5">something really important being able to</font>

233
00:10:21,280 --> 00:10:25,089
use it<font color="#CCCCCC"> from other languages this is</font>

234
00:10:23,050 --> 00:10:27,219
<font color="#E5E5E5">another thing there's a lot of tooling</font>

235
00:10:25,090 --> 00:10:29,560
especially for parser<font color="#CCCCCC"> Combinator's where</font>

236
00:10:27,220 --> 00:10:32,080
it's built<font color="#E5E5E5"> for a specific</font><font color="#CCCCCC"> language</font><font color="#E5E5E5"> like</font>

237
00:10:29,560 --> 00:10:33,640
for instance<font color="#E5E5E5"> antler was built for Java</font>

238
00:10:32,080 --> 00:10:35,320
<font color="#E5E5E5">and there's a lot of really good tooling</font>

239
00:10:33,640 --> 00:10:37,930
for<font color="#CCCCCC"> it in Java but as soon</font><font color="#E5E5E5"> as you</font>

240
00:10:35,320 --> 00:10:39,280
deviate<font color="#CCCCCC"> from that platform getting</font>

241
00:10:37,930 --> 00:10:41,260
<font color="#E5E5E5">access to that tooling is pretty</font>

242
00:10:39,280 --> 00:10:43,000
difficult<font color="#CCCCCC"> what if you could</font><font color="#E5E5E5"> use this in</font>

243
00:10:41,260 --> 00:10:46,510
Java<font color="#E5E5E5"> but also use it in</font><font color="#CCCCCC"> Ruby or Python</font>

244
00:10:43,000 --> 00:10:49,210
<font color="#E5E5E5">and go so having that flexibility to use</font>

245
00:10:46,510 --> 00:10:52,090
this this code base<font color="#E5E5E5"> from anywhere it</font>

246
00:10:49,210 --> 00:10:54,130
would<font color="#CCCCCC"> be really</font><font color="#E5E5E5"> helpful and as I said</font>

247
00:10:52,090 --> 00:10:56,500
reusing as much as possible<font color="#CCCCCC"> let's</font><font color="#E5E5E5"> avoid</font>

248
00:10:54,130 --> 00:10:58,600
duplication<font color="#E5E5E5"> because when we start</font>

249
00:10:56,500 --> 00:11:01,120
talking about inputs this large there's

250
00:10:58,600 --> 00:11:03,040
<font color="#E5E5E5">no way we can keep this keep track of</font>

251
00:11:01,120 --> 00:11:04,990
this we need to<font color="#E5E5E5"> make</font><font color="#CCCCCC"> sure</font><font color="#E5E5E5"> that we're</font>

252
00:11:03,040 --> 00:11:06,130
<font color="#CCCCCC">using like</font><font color="#E5E5E5"> the original source material</font>

253
00:11:04,990 --> 00:11:07,630
<font color="#CCCCCC">and we're</font>

254
00:11:06,130 --> 00:11:13,090
not going<font color="#E5E5E5"> to get into the place where we</font>

255
00:11:07,630 --> 00:11:14,800
have to<font color="#CCCCCC"> manage</font><font color="#E5E5E5"> multiple ones so as I</font>

256
00:11:13,090 --> 00:11:19,930
<font color="#E5E5E5">said this has been released since around</font>

257
00:11:14,800 --> 00:11:22,599
<font color="#E5E5E5">Def Con</font><font color="#CCCCCC"> the architecture ends up looking</font>

258
00:11:19,930 --> 00:11:25,479
<font color="#E5E5E5">something like</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> at the the base you</font>

259
00:11:22,600 --> 00:11:27,070
have<font color="#CCCCCC"> sin FFA's which is it functions</font>

260
00:11:25,480 --> 00:11:30,400
<font color="#E5E5E5">mostly as an intermediate representation</font>

261
00:11:27,070 --> 00:11:35,110
<font color="#E5E5E5">so you build front ends</font><font color="#CCCCCC"> that will</font>

262
00:11:30,400 --> 00:11:36,730
recognize individual<font color="#CCCCCC"> grammar languages</font>

263
00:11:35,110 --> 00:11:39,670
<font color="#CCCCCC">so you could have</font><font color="#E5E5E5"> one for antler</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> one</font>

264
00:11:36,730 --> 00:11:42,040
for<font color="#CCCCCC"> ragel</font><font color="#E5E5E5"> one for</font><font color="#CCCCCC"> EB and</font><font color="#E5E5E5"> F bison and</font>

265
00:11:39,670 --> 00:11:45,040
what<font color="#CCCCCC"> these do is it reads in a grammar</font>

266
00:11:42,040 --> 00:11:48,300
file for<font color="#E5E5E5"> their specified format and then</font>

267
00:11:45,040 --> 00:11:51,610
<font color="#CCCCCC">will translate that to</font><font color="#E5E5E5"> the sin</font><font color="#CCCCCC"> FFA's</font>

268
00:11:48,300 --> 00:11:54,729
syntax tree<font color="#E5E5E5"> and then from there you</font><font color="#CCCCCC"> can</font>

269
00:11:51,610 --> 00:12:00,340
generate test cases and use<font color="#E5E5E5"> that to</font>

270
00:11:54,730 --> 00:12:03,100
<font color="#E5E5E5">build your</font><font color="#CCCCCC"> own</font><font color="#E5E5E5"> test runners and so by</font>

271
00:12:00,340 --> 00:12:05,140
<font color="#CCCCCC">making this</font><font color="#E5E5E5"> code based and making it so</font>

272
00:12:03,100 --> 00:12:07,000
<font color="#CCCCCC">that you don't have to it mean it's it's</font>

273
00:12:05,140 --> 00:12:08,500
<font color="#CCCCCC">very</font><font color="#E5E5E5"> much not out</font><font color="#CCCCCC"> of the box</font><font color="#E5E5E5"> like you</font>

274
00:12:07,000 --> 00:12:10,660
would get from<font color="#E5E5E5"> something like say a FL</font>

275
00:12:08,500 --> 00:12:13,390
where it will<font color="#E5E5E5"> just run on a</font><font color="#CCCCCC"> binary and</font>

276
00:12:10,660 --> 00:12:15,699
and fill in stuff for you<font color="#E5E5E5"> but it allows</font>

277
00:12:13,390 --> 00:12:17,590
you flexibility in that<font color="#CCCCCC"> you can build a</font>

278
00:12:15,700 --> 00:12:19,210
lot<font color="#CCCCCC"> of your own tooling and look for</font>

279
00:12:17,590 --> 00:12:20,800
very specific<font color="#CCCCCC"> things and</font><font color="#E5E5E5"> we'll look at</font>

280
00:12:19,210 --> 00:12:23,620
<font color="#E5E5E5">how we're going to do that in a few</font>

281
00:12:20,800 --> 00:12:25,150
<font color="#E5E5E5">minutes</font><font color="#CCCCCC"> but the important thing to note</font>

282
00:12:23,620 --> 00:12:27,790
is that we can build<font color="#E5E5E5"> tools like that</font>

283
00:12:25,150 --> 00:12:29,410
<font color="#E5E5E5">from this and the</font><font color="#CCCCCC"> idea with this is that</font>

284
00:12:27,790 --> 00:12:31,270
you<font color="#CCCCCC"> should only ever have to write your</font>

285
00:12:29,410 --> 00:12:34,000
<font color="#E5E5E5">own test harnesses you shouldn't have to</font>

286
00:12:31,270 --> 00:12:36,760
write your<font color="#CCCCCC"> own</font><font color="#E5E5E5"> front ends those will be</font>

287
00:12:34,000 --> 00:12:40,390
built for you right now antler exists

288
00:12:36,760 --> 00:12:41,620
and<font color="#E5E5E5"> I'm planning on building</font><font color="#CCCCCC"> out more so</font>

289
00:12:40,390 --> 00:12:43,900
let's take a look<font color="#E5E5E5"> at how this works and</font>

290
00:12:41,620 --> 00:12:45,940
how<font color="#CCCCCC"> you might do</font><font color="#E5E5E5"> it that's the most</font>

291
00:12:43,900 --> 00:12:48,340
<font color="#CCCCCC">basic level you</font><font color="#E5E5E5"> get the Combinator</font>

292
00:12:45,940 --> 00:12:50,350
interface that sin<font color="#E5E5E5"> fuzz provides you and</font>

293
00:12:48,340 --> 00:12:53,350
this is<font color="#E5E5E5"> how you express a grammar and</font>

294
00:12:50,350 --> 00:12:55,410
any front-end will end up<font color="#E5E5E5"> converting</font><font color="#CCCCCC"> so</font>

295
00:12:53,350 --> 00:12:59,560
this is writing in the pure Combinator

296
00:12:55,410 --> 00:13:00,850
<font color="#E5E5E5">language</font><font color="#CCCCCC"> within</font><font color="#E5E5E5"> rust and if you've ever</font>

297
00:12:59,560 --> 00:13:03,250
worked<font color="#E5E5E5"> the Combinator library it will</font>

298
00:13:00,850 --> 00:13:07,780
look<font color="#E5E5E5"> probably pretty familiar to you the</font>

299
00:13:03,250 --> 00:13:10,090
top here we're<font color="#E5E5E5"> declaring a generator for</font>

300
00:13:07,780 --> 00:13:13,600
a number<font color="#E5E5E5"> which is essentially just a</font>

301
00:13:10,090 --> 00:13:18,640
sequence of<font color="#E5E5E5"> the numbers 1 to</font><font color="#CCCCCC"> 9 and then</font>

302
00:13:13,600 --> 00:13:19,400
a<font color="#E5E5E5"> sequence followed</font><font color="#CCCCCC"> by 0 or more of</font><font color="#E5E5E5"> 0 to</font>

303
00:13:18,640 --> 00:13:21,069
<font color="#E5E5E5">9</font>

304
00:13:19,400 --> 00:13:25,490
and so what this is<font color="#CCCCCC"> doing</font><font color="#E5E5E5"> is building up</font>

305
00:13:21,070 --> 00:13:28,060
<font color="#CCCCCC">in expression so something like</font><font color="#E5E5E5"> a number</font>

306
00:13:25,490 --> 00:13:30,710
<font color="#E5E5E5">plus number or number times number as</font>

307
00:13:28,060 --> 00:13:32,630
<font color="#CCCCCC">complexes you want</font><font color="#E5E5E5"> to go from there</font><font color="#CCCCCC"> so</font>

308
00:13:30,710 --> 00:13:35,150
<font color="#CCCCCC">we have our operators we have our</font>

309
00:13:32,630 --> 00:13:40,939
numbers<font color="#E5E5E5"> and then</font><font color="#CCCCCC"> we have the expression</font>

310
00:13:35,150 --> 00:13:44,029
that combines all<font color="#E5E5E5"> that</font><font color="#CCCCCC"> together to use</font>

311
00:13:40,940 --> 00:13:45,800
this<font color="#E5E5E5"> we can go a</font><font color="#CCCCCC"> little</font><font color="#E5E5E5"> bit deeper and</font>

312
00:13:44,029 --> 00:13:47,779
we can use one of<font color="#E5E5E5"> the front ends this is</font>

313
00:13:45,800 --> 00:13:48,829
<font color="#CCCCCC">the</font><font color="#E5E5E5"> antler one and so this is</font>

314
00:13:47,779 --> 00:13:52,460
<font color="#E5E5E5">essentially all that's really required</font>

315
00:13:48,830 --> 00:13:54,890
is you<font color="#CCCCCC"> provide it a grammar file</font><font color="#E5E5E5"> you</font>

316
00:13:52,460 --> 00:13:56,330
read it in<font color="#CCCCCC"> you generate the rules from</font>

317
00:13:54,890 --> 00:13:58,010
<font color="#E5E5E5">it which is basically just parsing it</font>

318
00:13:56,330 --> 00:14:00,920
and then translating it into the

319
00:13:58,010 --> 00:14:03,260
intermediate representation<font color="#E5E5E5"> and then you</font>

320
00:14:00,920 --> 00:14:06,079
can pick a<font color="#E5E5E5"> starting point</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> in my case</font>

321
00:14:03,260 --> 00:14:07,640
<font color="#E5E5E5">right here I'm using the node root so</font>

322
00:14:06,080 --> 00:14:08,960
that's like<font color="#CCCCCC"> the</font><font color="#E5E5E5"> top of</font><font color="#CCCCCC"> the tree but</font><font color="#E5E5E5"> if</font>

323
00:14:07,640 --> 00:14:11,420
you wanted to<font color="#E5E5E5"> say generate just some</font>

324
00:14:08,960 --> 00:14:13,040
subsection of that<font color="#E5E5E5"> grammar you</font><font color="#CCCCCC"> can say I</font>

325
00:14:11,420 --> 00:14:15,529
want<font color="#CCCCCC"> you</font><font color="#E5E5E5"> to start here and it will build</font>

326
00:14:13,040 --> 00:14:19,089
you a tree down from there<font color="#CCCCCC"> and and just</font>

327
00:14:15,529 --> 00:14:21,410
generate subsections of that language

328
00:14:19,089 --> 00:14:24,430
<font color="#CCCCCC">below that it just kind of</font><font color="#E5E5E5"> get to you</font>

329
00:14:21,410 --> 00:14:27,650
the string out<font color="#CCCCCC"> of</font><font color="#E5E5E5"> there and</font><font color="#CCCCCC"> print it out</font>

330
00:14:24,430 --> 00:14:29,959
<font color="#CCCCCC">this is like the most</font><font color="#E5E5E5"> basic</font><font color="#CCCCCC"> example you</font>

331
00:14:27,650 --> 00:14:33,500
can pretty much<font color="#E5E5E5"> use any method you</font><font color="#CCCCCC"> want</font>

332
00:14:29,959 --> 00:14:35,119
for<font color="#E5E5E5"> positioning this into a program</font><font color="#CCCCCC"> the</font>

333
00:14:33,500 --> 00:14:35,900
full socket API if you want to do so if

334
00:14:35,120 --> 00:14:39,170
you<font color="#E5E5E5"> want to send it</font><font color="#CCCCCC"> over the</font><font color="#E5E5E5"> network</font>

335
00:14:35,900 --> 00:14:40,459
<font color="#CCCCCC">you're good you get pipes</font><font color="#E5E5E5"> files</font><font color="#CCCCCC"> you know</font>

336
00:14:39,170 --> 00:14:42,349
anything you can<font color="#E5E5E5"> use with operating some</font>

337
00:14:40,459 --> 00:15:06,979
level you have the flexibility to<font color="#CCCCCC"> use</font>

338
00:14:42,350 --> 00:15:08,360
with this this<font color="#CCCCCC"> is</font><font color="#E5E5E5"> the executable showing</font>

339
00:15:06,980 --> 00:15:10,910
the very first example<font color="#CCCCCC"> that</font><font color="#E5E5E5"> I</font><font color="#CCCCCC"> showed</font>

340
00:15:08,360 --> 00:15:12,470
this is the expression<font color="#E5E5E5"> and you can see</font>

341
00:15:10,910 --> 00:15:22,689
<font color="#CCCCCC">me running it multiple times</font><font color="#E5E5E5"> here and</font>

342
00:15:12,470 --> 00:15:22,690
it's is it<font color="#E5E5E5"> a projector</font>

343
00:15:34,009 --> 00:15:44,009
cool the<font color="#E5E5E5"> thing is here it's a and every</font>

344
00:15:42,389 --> 00:15:46,379
<font color="#E5E5E5">single iteration</font><font color="#CCCCCC"> it takes it will</font>

345
00:15:44,009 --> 00:15:48,209
generate you a new string<font color="#E5E5E5"> 100% random</font>

346
00:15:46,379 --> 00:15:50,069
it's coming from that<font color="#E5E5E5"> grammar we fed it</font>

347
00:15:48,209 --> 00:15:53,368
<font color="#CCCCCC">and it</font><font color="#E5E5E5"> will give you a new one every</font>

348
00:15:50,069 --> 00:15:58,248
<font color="#CCCCCC">single time so long as the randomness</font>

349
00:15:53,369 --> 00:15:58,249
doesn't generate<font color="#E5E5E5"> the same values so</font>

350
00:16:06,079 --> 00:16:09,628
<font color="#CCCCCC">we've seen</font><font color="#E5E5E5"> how</font><font color="#CCCCCC"> we can</font><font color="#E5E5E5"> use</font><font color="#CCCCCC"> this now let's</font>

351
00:16:08,339 --> 00:16:10,740
talk<font color="#CCCCCC"> about designing test harnesses</font>

352
00:16:09,629 --> 00:16:11,759
<font color="#E5E5E5">because that's really where we're</font>

353
00:16:10,740 --> 00:16:16,110
probably<font color="#E5E5E5"> going to spend a lot of the</font>

354
00:16:11,759 --> 00:16:17,910
time<font color="#E5E5E5"> using a</font><font color="#CCCCCC"> tool like this at the most</font>

355
00:16:16,110 --> 00:16:19,889
<font color="#E5E5E5">basic level</font><font color="#CCCCCC"> this is like what</font><font color="#E5E5E5"> we</font>

356
00:16:17,910 --> 00:16:23,610
typically see<font color="#E5E5E5"> most fuzzers doing is you</font>

357
00:16:19,889 --> 00:16:26,819
<font color="#E5E5E5">know did</font><font color="#CCCCCC"> it crash did it do something</font>

358
00:16:23,610 --> 00:16:28,679
<font color="#E5E5E5">that is like considered bad</font><font color="#CCCCCC"> so to do</font>

359
00:16:26,819 --> 00:16:32,128
this we can you know use something like

360
00:16:28,679 --> 00:16:34,559
<font color="#CCCCCC">P open or</font><font color="#E5E5E5"> exec we start the process we</font>

361
00:16:32,129 --> 00:16:36,509
generate<font color="#E5E5E5"> some input using the code</font>

362
00:16:34,559 --> 00:16:38,309
snippet that<font color="#CCCCCC"> I showed earlier and we</font>

363
00:16:36,509 --> 00:16:39,569
feed it into<font color="#E5E5E5"> the application using</font>

364
00:16:38,309 --> 00:16:43,889
whatever mechanism whether it's a socket

365
00:16:39,569 --> 00:16:46,559
<font color="#E5E5E5">or a pipe or standard in or argument or</font>

366
00:16:43,889 --> 00:16:49,529
environment variable and then<font color="#E5E5E5"> we listen</font>

367
00:16:46,559 --> 00:16:51,240
<font color="#CCCCCC">for</font><font color="#E5E5E5"> to end does it halt</font>

368
00:16:49,529 --> 00:16:53,759
does it<font color="#CCCCCC"> halt with a signal that</font><font color="#E5E5E5"> we</font>

369
00:16:51,240 --> 00:16:55,860
understand is it<font color="#E5E5E5"> you know seg fault is</font>

370
00:16:53,759 --> 00:16:58,230
it's like abort<font color="#CCCCCC"> did it do something</font>

371
00:16:55,860 --> 00:17:00,179
<font color="#E5E5E5">interesting</font><font color="#CCCCCC"> we can do and this is</font>

372
00:16:58,230 --> 00:17:03,899
essentially<font color="#E5E5E5"> the state of where we are</font>

373
00:17:00,179 --> 00:17:05,189
<font color="#E5E5E5">with most common fuzzers today we can</font>

374
00:17:03,899 --> 00:17:08,130
replicate that<font color="#E5E5E5"> functionality by doing</font>

375
00:17:05,189 --> 00:17:10,980
some just<font color="#E5E5E5"> like this</font><font color="#CCCCCC"> once</font><font color="#E5E5E5"> this happens we</font>

376
00:17:08,130 --> 00:17:14,010
analyze the crash<font color="#CCCCCC"> we see if it did</font>

377
00:17:10,980 --> 00:17:16,860
<font color="#E5E5E5">something interesting</font><font color="#CCCCCC"> do we have access</font>

378
00:17:14,010 --> 00:17:18,599
<font color="#E5E5E5">to modify the interaction pointer can we</font>

379
00:17:16,859 --> 00:17:20,969
can we take control<font color="#E5E5E5"> of this the answer</font>

380
00:17:18,599 --> 00:17:22,708
is yes<font color="#CCCCCC"> Chloe found</font><font color="#E5E5E5"> me interesting let's</font>

381
00:17:20,970 --> 00:17:23,850
go a little<font color="#E5E5E5"> bit</font><font color="#CCCCCC"> more esoteric a little</font>

382
00:17:22,709 --> 00:17:25,860
bit more interesting<font color="#E5E5E5"> something that we</font>

383
00:17:23,849 --> 00:17:29,549
can do that<font color="#CCCCCC"> you can't typically</font><font color="#E5E5E5"> do with</font>

384
00:17:25,859 --> 00:17:31,590
one<font color="#E5E5E5"> of the off-the-shelf</font><font color="#CCCCCC"> esters today as</font>

385
00:17:29,549 --> 00:17:33,539
I<font color="#E5E5E5"> said before</font><font color="#CCCCCC"> one of the main reasons</font>

386
00:17:31,590 --> 00:17:36,840
for<font color="#E5E5E5"> building this was to test</font>

387
00:17:33,539 --> 00:17:39,060
<font color="#E5E5E5">reimplementation</font><font color="#CCCCCC"> x'</font><font color="#E5E5E5"> of of parsers that</font>

388
00:17:36,840 --> 00:17:44,040
<font color="#CCCCCC">we didn't know if we were going</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> be</font>

389
00:17:39,060 --> 00:17:46,860
replicating<font color="#E5E5E5"> the correct behavior how do</font>

390
00:17:44,040 --> 00:17:50,129
we determine<font color="#CCCCCC"> if</font><font color="#E5E5E5"> our implementation is</font>

391
00:17:46,860 --> 00:17:51,360
<font color="#E5E5E5">over fit the case that we are parsing</font>

392
00:17:50,130 --> 00:17:54,510
<font color="#E5E5E5">things that the reference implementation</font>

393
00:17:51,360 --> 00:17:57,360
doesn't<font color="#E5E5E5"> so one of the ways you</font><font color="#CCCCCC"> can do</font>

394
00:17:54,510 --> 00:17:59,990
that<font color="#E5E5E5"> is</font><font color="#CCCCCC"> you set up</font><font color="#E5E5E5"> your test harness</font>

395
00:17:57,360 --> 00:18:02,909
<font color="#E5E5E5">same way you generate</font><font color="#CCCCCC"> a test case and</font>

396
00:17:59,990 --> 00:18:04,950
<font color="#E5E5E5">you need to find it Oracle and what I</font>

397
00:18:02,910 --> 00:18:09,450
mean<font color="#CCCCCC"> by</font><font color="#E5E5E5"> Oracle is it some mechanism</font><font color="#CCCCCC"> for</font>

398
00:18:04,950 --> 00:18:11,640
determining<font color="#E5E5E5"> whether the error that</font>

399
00:18:09,450 --> 00:18:13,890
<font color="#CCCCCC">you're</font><font color="#E5E5E5"> getting back he's either a syntax</font>

400
00:18:11,640 --> 00:18:17,460
<font color="#E5E5E5">error or a runtime error if it's a</font>

401
00:18:13,890 --> 00:18:19,470
syntax error<font color="#CCCCCC"> then it means that</font><font color="#E5E5E5"> the</font>

402
00:18:17,460 --> 00:18:23,400
grammar<font color="#E5E5E5"> that you fed it</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> generate it</font>

403
00:18:19,470 --> 00:18:25,500
<font color="#CCCCCC">input from is</font><font color="#E5E5E5"> going to be not</font><font color="#CCCCCC"> the same</font>

404
00:18:23,400 --> 00:18:27,690
as the one you're testing against you

405
00:18:25,500 --> 00:18:29,670
have generated<font color="#CCCCCC"> something</font><font color="#E5E5E5"> that your</font>

406
00:18:27,690 --> 00:18:32,250
grammar says is valid<font color="#E5E5E5"> but the reference</font>

407
00:18:29,670 --> 00:18:34,680
one does not if it's a runtime<font color="#E5E5E5"> error</font>

408
00:18:32,250 --> 00:18:35,730
<font color="#E5E5E5">there could be some state involved that</font>

409
00:18:34,680 --> 00:18:37,830
<font color="#CCCCCC">where you</font><font color="#E5E5E5"> generated something that</font>

410
00:18:35,730 --> 00:18:39,570
<font color="#E5E5E5">passes the parsing phase but there's</font>

411
00:18:37,830 --> 00:18:41,100
something<font color="#CCCCCC"> about the internal state of</font>

412
00:18:39,570 --> 00:18:44,100
what's<font color="#E5E5E5"> going on that that is not</font>

413
00:18:41,100 --> 00:18:45,240
semantically<font color="#CCCCCC"> correct so once you find</font><font color="#E5E5E5"> an</font>

414
00:18:44,100 --> 00:18:48,120
<font color="#E5E5E5">Oracle that</font><font color="#CCCCCC"> will provide that</font>

415
00:18:45,240 --> 00:18:51,210
<font color="#CCCCCC">information to</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> you can use</font><font color="#E5E5E5"> that to</font>

416
00:18:48,120 --> 00:18:52,590
make those decisions<font color="#E5E5E5"> so one example of</font>

417
00:18:51,210 --> 00:18:55,350
<font color="#E5E5E5">this is</font><font color="#CCCCCC"> something like in my sequel</font>

418
00:18:52,590 --> 00:18:57,659
there's two<font color="#CCCCCC"> examples</font><font color="#E5E5E5"> here of errors you</font>

419
00:18:55,350 --> 00:18:59,909
might get from sending a sequel query to

420
00:18:57,660 --> 00:19:02,040
my sequel the top one here<font color="#CCCCCC"> is a syntax</font>

421
00:18:59,910 --> 00:19:03,540
error where it specifically says<font color="#E5E5E5"> there's</font>

422
00:19:02,040 --> 00:19:05,310
an error<font color="#E5E5E5"> in your syntax and it shows you</font>

423
00:19:03,540 --> 00:19:07,230
<font color="#E5E5E5">kind</font><font color="#CCCCCC"> of where it happened and this is a</font>

424
00:19:05,310 --> 00:19:09,870
case where<font color="#E5E5E5"> we wrote something</font><font color="#CCCCCC"> that never</font>

425
00:19:07,230 --> 00:19:12,600
passed<font color="#E5E5E5"> the parsing phase if you go</font><font color="#CCCCCC"> below</font>

426
00:19:09,870 --> 00:19:15,270
it you'll see a runtime error<font color="#CCCCCC"> the table</font>

427
00:19:12,600 --> 00:19:17,399
my sequel a does<font color="#E5E5E5"> not exist and this</font>

428
00:19:15,270 --> 00:19:19,350
means it finished parsing it<font color="#E5E5E5"> validated</font>

429
00:19:17,400 --> 00:19:22,920
the sentence the sentence is a correct

430
00:19:19,350 --> 00:19:24,959
sentence in that<font color="#CCCCCC"> language</font><font color="#E5E5E5"> but something</font>

431
00:19:22,920 --> 00:19:27,390
in the<font color="#E5E5E5"> state the database the schema</font>

432
00:19:24,960 --> 00:19:29,040
it's it's not meaningful<font color="#CCCCCC"> there's</font>

433
00:19:27,390 --> 00:19:30,450
<font color="#E5E5E5">something wrong with the statement but</font>

434
00:19:29,040 --> 00:19:32,370
<font color="#E5E5E5">we know we got past that so we're</font>

435
00:19:30,450 --> 00:19:34,020
getting<font color="#CCCCCC"> to</font><font color="#E5E5E5"> the interesting points of the</font>

436
00:19:32,370 --> 00:19:41,030
application which means<font color="#CCCCCC"> that we're not</font>

437
00:19:34,020 --> 00:19:43,280
<font color="#CCCCCC">over</font><font color="#E5E5E5"> fit</font><font color="#CCCCCC"> the converse</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> have under fit</font>

438
00:19:41,030 --> 00:19:46,889
<font color="#E5E5E5">does the reference implementation</font>

439
00:19:43,280 --> 00:19:50,550
<font color="#CCCCCC">generate sentences that are something</font>

440
00:19:46,890 --> 00:19:52,830
<font color="#CCCCCC">that our parser does not match if we</font>

441
00:19:50,550 --> 00:19:54,450
have<font color="#E5E5E5"> access to</font><font color="#CCCCCC"> the actual grammar we can</font>

442
00:19:52,830 --> 00:19:56,399
do the opposite<font color="#CCCCCC"> will regenerate</font><font color="#E5E5E5"> from the</font>

443
00:19:54,450 --> 00:19:57,690
reference implementation<font color="#E5E5E5"> so in the case</font>

444
00:19:56,399 --> 00:19:59,760
<font color="#E5E5E5">of</font><font color="#CCCCCC"> open source</font><font color="#E5E5E5"> software if you get</font>

445
00:19:57,690 --> 00:20:00,779
<font color="#CCCCCC">access to</font><font color="#E5E5E5"> that Confederate from there</font>

446
00:19:59,760 --> 00:20:02,789
and feed it into<font color="#E5E5E5"> yours</font>

447
00:20:00,779 --> 00:20:04,890
if yours comes back and says<font color="#E5E5E5"> this isn't</font>

448
00:20:02,789 --> 00:20:30,779
<font color="#CCCCCC">valid then it's</font><font color="#E5E5E5"> something that's under</font>

449
00:20:04,890 --> 00:20:33,809
fit so quick<font color="#E5E5E5"> other demo</font><font color="#CCCCCC"> visible so this</font>

450
00:20:30,779 --> 00:20:36,840
is an example<font color="#CCCCCC"> testing actual my sequel</font>

451
00:20:33,809 --> 00:20:38,940
so I used the<font color="#E5E5E5"> public available my</font><font color="#CCCCCC"> sickle</font>

452
00:20:36,840 --> 00:20:40,408
grammar for antler<font color="#E5E5E5"> and built a test</font>

453
00:20:38,940 --> 00:20:43,409
<font color="#CCCCCC">harness around</font><font color="#E5E5E5"> that same methodology</font>

454
00:20:40,409 --> 00:20:45,269
<font color="#E5E5E5">where it will basically generate and</font>

455
00:20:43,409 --> 00:20:47,070
then send<font color="#E5E5E5"> to</font><font color="#CCCCCC"> there</font><font color="#E5E5E5"> and then identify the</font>

456
00:20:45,269 --> 00:20:49,470
<font color="#E5E5E5">error message coming back and determine</font>

457
00:20:47,070 --> 00:20:53,189
if it is a syntax error<font color="#CCCCCC"> or some type of</font>

458
00:20:49,470 --> 00:20:56,309
<font color="#E5E5E5">runtime error</font><font color="#CCCCCC"> so here I'm</font><font color="#E5E5E5"> feeding it in</font>

459
00:20:53,190 --> 00:20:57,480
a starting path of create table<font color="#CCCCCC"> so it's</font>

460
00:20:56,309 --> 00:20:58,769
gonna<font color="#CCCCCC"> generate me a whole bunch of</font>

461
00:20:57,480 --> 00:21:03,990
statements<font color="#CCCCCC"> that are create table</font>

462
00:20:58,769 --> 00:21:05,850
statements<font color="#CCCCCC"> here on the left there's no</font>

463
00:21:03,990 --> 00:21:25,740
tables there I'm gonna hit<font color="#CCCCCC"> play and</font><font color="#E5E5E5"> it's</font>

464
00:21:05,850 --> 00:21:28,320
gonna so it's<font color="#E5E5E5"> running there on the right</font>

465
00:21:25,740 --> 00:21:30,990
and it's<font color="#E5E5E5"> just iterating</font><font color="#CCCCCC"> through this</font>

466
00:21:28,320 --> 00:21:33,870
create statements<font color="#E5E5E5"> you'll see it spitting</font>

467
00:21:30,990 --> 00:21:36,539
out syntax errors<font color="#CCCCCC"> those are all strings</font>

468
00:21:33,870 --> 00:21:38,010
it generated<font color="#E5E5E5"> did it pass to the the my</font>

469
00:21:36,539 --> 00:21:40,139
sequel database and the database<font color="#E5E5E5"> head</font>

470
00:21:38,010 --> 00:21:41,970
this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> syntax error</font><font color="#CCCCCC"> so there</font><font color="#E5E5E5"> are</font>

471
00:21:40,139 --> 00:21:44,250
clearly issues<font color="#E5E5E5"> with the grammar that</font>

472
00:21:41,970 --> 00:21:45,720
we're being used<font color="#CCCCCC"> you also</font><font color="#E5E5E5"> see</font><font color="#CCCCCC"> a left</font>

473
00:21:44,250 --> 00:21:48,840
<font color="#E5E5E5">hand side it goes from having</font><font color="#CCCCCC"> zero</font>

474
00:21:45,720 --> 00:21:52,490
tables to like a thousand so it's<font color="#CCCCCC"> pretty</font>

475
00:21:48,840 --> 00:21:52,490
<font color="#E5E5E5">quick and</font><font color="#CCCCCC"> generating these</font><font color="#E5E5E5"> these values</font>

476
00:21:55,549 --> 00:22:11,908
how would<font color="#E5E5E5"> I just do so what's ready</font>

477
00:22:09,360 --> 00:22:14,428
today<font color="#CCCCCC"> you have</font><font color="#E5E5E5"> access to synthesis this</font>

478
00:22:11,909 --> 00:22:17,250
is a public<font color="#CCCCCC"> open source project that I'm</font>

479
00:22:14,429 --> 00:22:19,919
still working<font color="#CCCCCC"> on</font><font color="#E5E5E5"> there's a ton of stuff</font>

480
00:22:17,250 --> 00:22:21,919
happening on it<font color="#E5E5E5"> in terms of getting</font><font color="#CCCCCC"> more</font>

481
00:22:19,919 --> 00:22:29,190
<font color="#E5E5E5">front-end built out for it as well as</font>

482
00:22:21,919 --> 00:22:30,059
adding<font color="#CCCCCC"> more functionality to</font><font color="#E5E5E5"> it some</font>

483
00:22:29,190 --> 00:22:32,280
other things<font color="#E5E5E5"> I'm working</font><font color="#CCCCCC"> on right now</font><font color="#E5E5E5"> is</font>

484
00:22:30,059 --> 00:22:33,960
<font color="#CCCCCC">cycle detection</font><font color="#E5E5E5"> and forcing progression</font>

485
00:22:32,280 --> 00:22:36,809
<font color="#E5E5E5">so you can get into places</font><font color="#CCCCCC"> where</font><font color="#E5E5E5"> there</font>

486
00:22:33,960 --> 00:22:39,690
are significant amounts of recursion

487
00:22:36,809 --> 00:22:41,250
<font color="#E5E5E5">that can cause stack overflows so fixing</font>

488
00:22:39,690 --> 00:22:44,909
that problem<font color="#CCCCCC"> and making it</font><font color="#E5E5E5"> possible</font><font color="#CCCCCC"> to</font>

489
00:22:41,250 --> 00:22:46,740
<font color="#CCCCCC">use very recursive grammars exposing</font><font color="#E5E5E5"> C</font>

490
00:22:44,909 --> 00:22:48,120
bindings and other language bindings<font color="#CCCCCC"> you</font>

491
00:22:46,740 --> 00:22:52,590
can actually<font color="#E5E5E5"> bring this into any</font>

492
00:22:48,120 --> 00:22:57,149
language<font color="#E5E5E5"> you'd want to negation logic is</font>

493
00:22:52,590 --> 00:22:58,709
complicated<font color="#CCCCCC"> context-sensitive</font><font color="#E5E5E5"> and</font>

494
00:22:57,150 --> 00:23:02,309
<font color="#CCCCCC">instruction grammars</font><font color="#E5E5E5"> and functionality</font>

495
00:22:58,710 --> 00:23:03,840
<font color="#E5E5E5">to handle that and then grammar coverage</font>

496
00:23:02,309 --> 00:23:05,549
information<font color="#E5E5E5"> so understanding</font><font color="#CCCCCC"> how much</font><font color="#E5E5E5"> of</font>

497
00:23:03,840 --> 00:23:07,379
the grammar we've explored<font color="#E5E5E5"> and what</font>

498
00:23:05,549 --> 00:23:10,770
we've generated<font color="#E5E5E5"> from there and then</font>

499
00:23:07,380 --> 00:23:12,890
bility<font color="#CCCCCC"> to tune that cool that's</font><font color="#E5E5E5"> it thank</font>

500
00:23:10,770 --> 00:23:12,889
<font color="#E5E5E5">you</font>

501
00:23:13,330 --> 00:23:20,679
[Applause]

