1
00:00:01,260 --> 00:00:09,690
<font color="#CCCCCC">alright alright a minute alright welcome</font>

2
00:00:07,109 --> 00:00:12,480
<font color="#E5E5E5">everyone so we're</font><font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> talk really</font>

3
00:00:09,690 --> 00:00:16,619
<font color="#E5E5E5">briefly about an introduction</font><font color="#CCCCCC"> to x86</font>

4
00:00:12,480 --> 00:00:19,470
assembly so quick introduction<font color="#E5E5E5"> this is</font>

5
00:00:16,619 --> 00:00:22,020
Stephanie<font color="#CCCCCC"> my name is Chris we've been</font>

6
00:00:19,470 --> 00:00:25,229
doing cybersecurity research<font color="#E5E5E5"> for about</font><font color="#CCCCCC"> a</font>

7
00:00:22,020 --> 00:00:26,698
decade<font color="#CCCCCC"> we also teach classes on assembly</font>

8
00:00:25,230 --> 00:00:29,250
and computer architecture at the<font color="#E5E5E5"> Ohio</font>

9
00:00:26,699 --> 00:00:30,480
State<font color="#E5E5E5"> University and</font><font color="#CCCCCC"> we do some some</font>

10
00:00:29,250 --> 00:00:32,009
workshops on assembly<font color="#E5E5E5"> and reverse</font>

11
00:00:30,480 --> 00:00:33,390
engineering if you're interested in

12
00:00:32,009 --> 00:00:35,940
<font color="#E5E5E5">learning</font><font color="#CCCCCC"> more you</font><font color="#E5E5E5"> can check</font><font color="#CCCCCC"> out dazzle</font>

13
00:00:33,390 --> 00:00:37,410
<font color="#CCCCCC">cot duo for that information but most</font>

14
00:00:35,940 --> 00:00:39,750
importantly<font color="#E5E5E5"> for this in presentation</font>

15
00:00:37,410 --> 00:00:41,669
we're sort of<font color="#E5E5E5"> x86 apologists we think</font>

16
00:00:39,750 --> 00:00:43,440
this<font color="#CCCCCC"> is a really fascinating</font><font color="#E5E5E5"> complex</font>

17
00:00:41,670 --> 00:00:44,670
architecture that everybody<font color="#E5E5E5"> should know</font>

18
00:00:43,440 --> 00:00:46,199
a<font color="#CCCCCC"> little</font><font color="#E5E5E5"> bit about so that's sort of</font>

19
00:00:44,670 --> 00:00:48,300
what<font color="#E5E5E5"> this presentation is about is a</font>

20
00:00:46,200 --> 00:00:51,030
sort of brief introduction to<font color="#E5E5E5"> this now</font>

21
00:00:48,300 --> 00:00:53,218
x86<font color="#E5E5E5"> is really really complex we can't</font>

22
00:00:51,030 --> 00:00:55,949
cover everything in<font color="#E5E5E5"> the next</font><font color="#CCCCCC"> 25 minutes</font>

23
00:00:53,219 --> 00:00:57,149
sorry cool today<font color="#E5E5E5"> is sort of to start</font>

24
00:00:55,949 --> 00:00:58,890
with<font color="#E5E5E5"> zero knowledge</font><font color="#CCCCCC"> maybe you know a</font>

25
00:00:57,149 --> 00:01:00,300
little<font color="#CCCCCC"> bit about assembly or x86 maybe</font>

26
00:00:58,890 --> 00:01:01,410
you know a lot maybe<font color="#E5E5E5"> you know nothing</font>

27
00:01:00,300 --> 00:01:03,059
we're<font color="#E5E5E5"> gonna assume</font><font color="#CCCCCC"> that everybody knows</font>

28
00:01:01,410 --> 00:01:04,018
<font color="#E5E5E5">nothing and we're gonna try to get to</font>

29
00:01:03,059 --> 00:01:05,580
the point<font color="#E5E5E5"> where we can all write a</font>

30
00:01:04,019 --> 00:01:06,720
<font color="#E5E5E5">HelloWorld program which I think will</font>

31
00:01:05,580 --> 00:01:08,640
put everybody<font color="#E5E5E5"> on good footing for</font>

32
00:01:06,720 --> 00:01:10,979
learning a lot<font color="#E5E5E5"> more if you're</font><font color="#CCCCCC"> interested</font>

33
00:01:08,640 --> 00:01:12,450
you<font color="#CCCCCC"> know pursuing</font><font color="#E5E5E5"> this further but the</font>

34
00:01:10,979 --> 00:01:14,789
<font color="#CCCCCC">premise behind all of</font><font color="#E5E5E5"> this sort of</font>

35
00:01:12,450 --> 00:01:17,369
starts at a very very<font color="#CCCCCC"> low level that's</font>

36
00:01:14,790 --> 00:01:19,140
what<font color="#CCCCCC"> assemblies</font><font color="#E5E5E5"> all about and the idea</font>

37
00:01:17,369 --> 00:01:20,640
<font color="#E5E5E5">is that everything your CPU does</font>

38
00:01:19,140 --> 00:01:23,280
ultimately<font color="#E5E5E5"> comes down to digital logic</font>

39
00:01:20,640 --> 00:01:25,409
<font color="#CCCCCC">right</font><font color="#E5E5E5"> on and off ultimately running</font>

40
00:01:23,280 --> 00:01:28,170
current through transistors or not which

41
00:01:25,409 --> 00:01:31,259
we abstract away<font color="#E5E5E5"> as the idea of either</font><font color="#CCCCCC"> 1</font>

42
00:01:28,170 --> 00:01:33,270
or<font color="#CCCCCC"> 0 now if you think of</font><font color="#E5E5E5"> these ones and</font>

43
00:01:31,259 --> 00:01:35,430
<font color="#CCCCCC">zeroes the way a computer chip is</font>

44
00:01:33,270 --> 00:01:36,630
designed is it's<font color="#E5E5E5"> designed to accept a</font>

45
00:01:35,430 --> 00:01:38,430
<font color="#E5E5E5">string of these ones and zeros and</font>

46
00:01:36,630 --> 00:01:41,548
basically do things based<font color="#E5E5E5"> on the</font>

47
00:01:38,430 --> 00:01:42,659
specific stream that you give it and if

48
00:01:41,549 --> 00:01:44,159
you<font color="#E5E5E5"> think about the stream of ones and</font>

49
00:01:42,659 --> 00:01:46,350
<font color="#E5E5E5">zeros essentially what you have</font><font color="#CCCCCC"> is just</font>

50
00:01:44,159 --> 00:01:48,450
a bunch of numbers<font color="#E5E5E5"> that ultimately tell</font>

51
00:01:46,350 --> 00:01:50,429
your<font color="#E5E5E5"> CPU what to do so we call those</font>

52
00:01:48,450 --> 00:01:52,200
numbers<font color="#E5E5E5"> machine code</font><font color="#CCCCCC"> and if you break</font>

53
00:01:50,430 --> 00:01:53,880
those<font color="#CCCCCC"> down those bits those ones</font><font color="#E5E5E5"> and</font>

54
00:01:52,200 --> 00:01:55,680
<font color="#E5E5E5">zeroes into groups of eight and change</font>

55
00:01:53,880 --> 00:01:57,719
it into hexadecimal<font color="#CCCCCC"> you end up with</font>

56
00:01:55,680 --> 00:01:58,860
something<font color="#E5E5E5"> on that looks like this</font>

57
00:01:57,719 --> 00:02:01,169
so<font color="#E5E5E5"> this is what we would normally think</font>

58
00:01:58,860 --> 00:02:04,670
<font color="#E5E5E5">of when</font><font color="#CCCCCC"> we think of machine code just a</font>

59
00:02:01,170 --> 00:02:07,170
big stream of hexadecimal bytes<font color="#E5E5E5"> now</font>

60
00:02:04,670 --> 00:02:08,878
<font color="#E5E5E5">ultimately</font><font color="#CCCCCC"> this is what your CPUs after</font>

61
00:02:07,170 --> 00:02:10,080
right this is what<font color="#E5E5E5"> tells the CPU what to</font>

62
00:02:08,878 --> 00:02:13,019
do when<font color="#CCCCCC"> to do it how</font><font color="#E5E5E5"> to do it</font>

63
00:02:10,080 --> 00:02:14,070
etc but humans don't think this way very

64
00:02:13,020 --> 00:02:16,200
<font color="#CCCCCC">very well we</font>

65
00:02:14,070 --> 00:02:18,570
some sort of abstraction around this so

66
00:02:16,200 --> 00:02:20,940
whereas on the left is what your CPU

67
00:02:18,570 --> 00:02:22,829
wants<font color="#E5E5E5"> on the right is a way that's a</font>

68
00:02:20,940 --> 00:02:25,740
little<font color="#CCCCCC"> bit easier for us</font><font color="#E5E5E5"> to think</font><font color="#CCCCCC"> about</font>

69
00:02:22,830 --> 00:02:27,420
<font color="#E5E5E5">that that information so on the right is</font>

70
00:02:25,740 --> 00:02:29,820
what we call assembly it's<font color="#CCCCCC"> a light</font>

71
00:02:27,420 --> 00:02:32,190
abstraction<font color="#E5E5E5"> over machine code that</font><font color="#CCCCCC"> makes</font>

72
00:02:29,820 --> 00:02:34,470
things<font color="#E5E5E5"> easier for us</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> read so for</font>

73
00:02:32,190 --> 00:02:36,420
example I<font color="#E5E5E5"> might want</font><font color="#CCCCCC"> to tell</font><font color="#E5E5E5"> the CPU</font>

74
00:02:34,470 --> 00:02:38,280
well<font color="#CCCCCC"> return from</font><font color="#E5E5E5"> your current subroutine</font>

75
00:02:36,420 --> 00:02:40,019
<font color="#E5E5E5">so I can just remember that that's the</font>

76
00:02:38,280 --> 00:02:41,160
RET instruction instead of having to

77
00:02:40,020 --> 00:02:44,310
<font color="#CCCCCC">remember that the machine code behind</font>

78
00:02:41,160 --> 00:02:46,140
<font color="#E5E5E5">that is the number</font><font color="#CCCCCC"> C</font><font color="#E5E5E5"> 3 and you</font><font color="#CCCCCC"> can see</font>

79
00:02:44,310 --> 00:02:47,730
that although assembly isn't the easiest

80
00:02:46,140 --> 00:02:49,589
<font color="#E5E5E5">thing to read it's a whole lot easier</font><font color="#CCCCCC"> to</font>

81
00:02:47,730 --> 00:02:51,090
<font color="#E5E5E5">start making sense of than the machine</font>

82
00:02:49,590 --> 00:02:52,470
code so for<font color="#E5E5E5"> example even with just a</font>

83
00:02:51,090 --> 00:02:53,790
<font color="#CCCCCC">little</font><font color="#E5E5E5"> bit of</font><font color="#CCCCCC"> knowledge here we can sort</font>

84
00:02:52,470 --> 00:02:55,650
of<font color="#E5E5E5"> infer that well this first</font>

85
00:02:53,790 --> 00:02:57,570
instruction pushes<font color="#E5E5E5"> something on to the</font>

86
00:02:55,650 --> 00:03:00,120
<font color="#E5E5E5">stack this next one copies something</font>

87
00:02:57,570 --> 00:03:01,859
from one<font color="#E5E5E5"> value into another then we do</font>

88
00:03:00,120 --> 00:03:04,080
some arithmetic then we call a function

89
00:03:01,860 --> 00:03:06,180
we leave the current stack frame we

90
00:03:04,080 --> 00:03:07,440
return from<font color="#E5E5E5"> this</font><font color="#CCCCCC"> function so you don't</font>

91
00:03:06,180 --> 00:03:10,020
need to know exactly<font color="#CCCCCC"> what each of these</font>

92
00:03:07,440 --> 00:03:11,520
does do but you can sort<font color="#CCCCCC"> of get a sense</font>

93
00:03:10,020 --> 00:03:13,070
for what's going<font color="#E5E5E5"> on at the machine</font><font color="#CCCCCC"> code</font>

94
00:03:11,520 --> 00:03:15,900
<font color="#E5E5E5">level if we can read this assembly</font>

95
00:03:13,070 --> 00:03:17,790
<font color="#E5E5E5">abstraction of</font><font color="#CCCCCC"> that information</font><font color="#E5E5E5"> so</font>

96
00:03:15,900 --> 00:03:19,410
ultimately as humans it's more<font color="#CCCCCC"> practical</font>

97
00:03:17,790 --> 00:03:21,000
for<font color="#CCCCCC"> us to write</font><font color="#E5E5E5"> an assembly but that</font>

98
00:03:19,410 --> 00:03:22,859
lets us<font color="#E5E5E5"> get about as close as</font><font color="#CCCCCC"> we would</font>

99
00:03:21,000 --> 00:03:26,160
ever want to get to<font color="#E5E5E5"> communicating</font><font color="#CCCCCC"> with</font>

100
00:03:22,860 --> 00:03:27,630
the processor<font color="#CCCCCC"> itself so fortunately</font><font color="#E5E5E5"> we</font>

101
00:03:26,160 --> 00:03:29,450
<font color="#E5E5E5">don't need to understand exactly how to</font>

102
00:03:27,630 --> 00:03:32,489
do that<font color="#E5E5E5"> translation between these two</font>

103
00:03:29,450 --> 00:03:34,350
abstractions ourselves if we want<font color="#CCCCCC"> to</font>

104
00:03:32,489 --> 00:03:35,640
write an assembly<font color="#E5E5E5"> and</font><font color="#CCCCCC"> we want to get</font>

105
00:03:34,350 --> 00:03:36,989
<font color="#CCCCCC">that into a state that the CPU</font><font color="#E5E5E5"> can</font>

106
00:03:35,640 --> 00:03:38,579
understand we can use a tool<font color="#CCCCCC"> called</font><font color="#E5E5E5"> an</font>

107
00:03:36,989 --> 00:03:40,980
assembler in order<font color="#E5E5E5"> to convert our</font>

108
00:03:38,580 --> 00:03:42,030
assembly<font color="#E5E5E5"> into machine code</font><font color="#CCCCCC"> on the</font><font color="#E5E5E5"> other</font>

109
00:03:40,980 --> 00:03:45,299
hand if we want<font color="#E5E5E5"> to go in the other</font>

110
00:03:42,030 --> 00:03:46,950
<font color="#E5E5E5">direction if we want</font><font color="#CCCCCC"> to take a machine</font>

111
00:03:45,300 --> 00:03:48,390
code and<font color="#E5E5E5"> bring it into something that we</font>

112
00:03:46,950 --> 00:03:50,280
<font color="#CCCCCC">can understand if we want</font><font color="#E5E5E5"> to take that</font>

113
00:03:48,390 --> 00:03:53,519
<font color="#E5E5E5">into assembly we can use a disassembler</font>

114
00:03:50,280 --> 00:03:54,750
in order to do that process<font color="#CCCCCC"> so now that</font>

115
00:03:53,520 --> 00:03:56,220
we<font color="#E5E5E5"> sort of understand the premise of</font>

116
00:03:54,750 --> 00:03:57,989
what<font color="#E5E5E5"> we're looking at we need to pick a</font>

117
00:03:56,220 --> 00:04:00,120
specific<font color="#E5E5E5"> architecture or specific</font>

118
00:03:57,989 --> 00:04:01,920
assembly language to dive into<font color="#E5E5E5"> and a</font>

119
00:04:00,120 --> 00:04:04,530
little bit more depth<font color="#E5E5E5"> so let's look at</font>

120
00:04:01,920 --> 00:04:06,619
x86 so a lot<font color="#CCCCCC"> of</font><font color="#E5E5E5"> people will shy away</font>

121
00:04:04,530 --> 00:04:08,310
<font color="#E5E5E5">from x86 if you don't know a lot about</font>

122
00:04:06,620 --> 00:04:09,720
assembly and<font color="#E5E5E5"> you haven't really looked</font>

123
00:04:08,310 --> 00:04:11,070
<font color="#E5E5E5">at a computer from this perspective</font>

124
00:04:09,720 --> 00:04:12,870
<font color="#E5E5E5">before a lot of</font><font color="#CCCCCC"> people will tell you</font>

125
00:04:11,070 --> 00:04:14,519
stay away<font color="#E5E5E5"> from x86 that's not a good</font>

126
00:04:12,870 --> 00:04:17,430
place<font color="#CCCCCC"> to start</font><font color="#E5E5E5"> and the reason they'll</font>

127
00:04:14,519 --> 00:04:19,108
say that is x86 is just insanely complex

128
00:04:17,430 --> 00:04:20,549
<font color="#E5E5E5">so people will say it's not a good</font>

129
00:04:19,108 --> 00:04:22,409
<font color="#CCCCCC">language to to start with and I actually</font>

130
00:04:20,548 --> 00:04:24,239
<font color="#E5E5E5">don't think that's the case I think x86</font>

131
00:04:22,410 --> 00:04:26,280
is the perfect language<font color="#E5E5E5"> to begin</font>

132
00:04:24,240 --> 00:04:27,710
learning<font color="#E5E5E5"> if you're if you're interested</font>

133
00:04:26,280 --> 00:04:30,650
in diving<font color="#E5E5E5"> into assembly</font>

134
00:04:27,710 --> 00:04:33,650
the reason I say that<font color="#CCCCCC"> is that</font><font color="#E5E5E5"> with x86</font>

135
00:04:30,650 --> 00:04:35,719
you can build and run<font color="#E5E5E5"> and play</font><font color="#CCCCCC"> with the</font>

136
00:04:33,650 --> 00:04:36,919
language<font color="#CCCCCC"> on your own computer right</font><font color="#E5E5E5"> now</font>

137
00:04:35,720 --> 00:04:38,810
you don't need<font color="#CCCCCC"> special</font><font color="#E5E5E5"> hardware you</font>

138
00:04:36,919 --> 00:04:40,130
don't need emulators<font color="#E5E5E5"> basically</font><font color="#CCCCCC"> everyone</font>

139
00:04:38,810 --> 00:04:42,470
<font color="#E5E5E5">if you could pull</font><font color="#CCCCCC"> out</font><font color="#E5E5E5"> your laptops and</font>

140
00:04:40,130 --> 00:04:44,960
start using<font color="#E5E5E5"> this immediately</font><font color="#CCCCCC"> and I think</font>

141
00:04:42,470 --> 00:04:46,490
that makes<font color="#E5E5E5"> it a great learning tool it's</font>

142
00:04:44,960 --> 00:04:48,560
also<font color="#E5E5E5"> extremely</font><font color="#CCCCCC"> popular its present on</font>

143
00:04:46,490 --> 00:04:50,720
billions of systems worldwide<font color="#E5E5E5"> has total</font>

144
00:04:48,560 --> 00:04:51,889
market dominance in the PC space<font color="#E5E5E5"> which</font>

145
00:04:50,720 --> 00:04:54,620
means that there's plenty<font color="#CCCCCC"> of learning</font>

146
00:04:51,889 --> 00:04:55,970
material<font color="#E5E5E5"> you can start diving into any</font>

147
00:04:54,620 --> 00:04:57,560
of the applications<font color="#E5E5E5"> on your</font><font color="#CCCCCC"> computer</font>

148
00:04:55,970 --> 00:04:59,449
right<font color="#E5E5E5"> now pulling them</font><font color="#CCCCCC"> apart in order</font><font color="#E5E5E5"> to</font>

149
00:04:57,560 --> 00:05:00,800
learn<font color="#E5E5E5"> more</font><font color="#CCCCCC"> about how they work I'm a new</font>

150
00:04:59,449 --> 00:05:03,440
forms of core<font color="#E5E5E5"> of a lot of familiar</font>

151
00:05:00,800 --> 00:05:05,419
operating systems<font color="#CCCCCC"> Windows Mac Linux</font><font color="#E5E5E5"> all</font>

152
00:05:03,440 --> 00:05:08,270
sort of<font color="#CCCCCC"> built in one way or another or</font>

153
00:05:05,419 --> 00:05:09,680
<font color="#E5E5E5">in one flavor another on on x86 so I</font>

154
00:05:08,270 --> 00:05:10,909
<font color="#CCCCCC">think that makes it a really really good</font>

155
00:05:09,680 --> 00:05:14,539
language<font color="#E5E5E5"> to start with</font>

156
00:05:10,910 --> 00:05:16,970
despite its complexity<font color="#E5E5E5"> but that's not to</font>

157
00:05:14,539 --> 00:05:18,380
say<font color="#E5E5E5"> it's not complex it is the</font><font color="#CCCCCC"> Intel</font>

158
00:05:16,970 --> 00:05:20,300
software<font color="#CCCCCC"> developers manual what we call</font>

159
00:05:18,380 --> 00:05:22,550
the SDM is sort of the<font color="#E5E5E5"> go-to reference</font>

160
00:05:20,300 --> 00:05:25,250
for learning<font color="#E5E5E5"> at say t6 you can find it</font>

161
00:05:22,550 --> 00:05:26,569
here<font color="#E5E5E5"> but it is 4,000 pages long last</font>

162
00:05:25,250 --> 00:05:29,330
<font color="#E5E5E5">time I checked and it does not even</font>

163
00:05:26,569 --> 00:05:31,039
<font color="#CCCCCC">begin to scratch the surface</font><font color="#E5E5E5"> of all of</font>

164
00:05:29,330 --> 00:05:33,229
x86 the reason I point<font color="#E5E5E5"> this out is</font>

165
00:05:31,039 --> 00:05:35,659
<font color="#E5E5E5">there's no way in a 25 minute</font>

166
00:05:33,229 --> 00:05:37,849
<font color="#E5E5E5">presentation we</font><font color="#CCCCCC"> can really get deep into</font>

167
00:05:35,659 --> 00:05:39,680
<font color="#CCCCCC">this so our goal moving</font><font color="#E5E5E5"> forward is</font>

168
00:05:37,849 --> 00:05:40,969
basically<font color="#CCCCCC"> just to give you</font><font color="#E5E5E5"> the basics</font>

169
00:05:39,680 --> 00:05:42,370
give you enough that you can get<font color="#CCCCCC"> started</font>

170
00:05:40,970 --> 00:05:46,460
if you want to go out<font color="#E5E5E5"> on</font><font color="#CCCCCC"> your</font><font color="#E5E5E5"> own and</font>

171
00:05:42,370 --> 00:05:47,690
dive in to some<font color="#E5E5E5"> more depth</font><font color="#CCCCCC"> so with that</font>

172
00:05:46,460 --> 00:05:48,919
I'm going<font color="#CCCCCC"> to hand things over</font><font color="#E5E5E5"> and</font>

173
00:05:47,690 --> 00:05:50,630
Stephanie's going<font color="#E5E5E5"> to talk about the</font>

174
00:05:48,919 --> 00:05:55,698
<font color="#E5E5E5">actual technical aspects behind</font><font color="#CCCCCC"> all of</font>

175
00:05:50,630 --> 00:05:56,990
this so x86 assembly<font color="#E5E5E5"> so we kind of</font>

176
00:05:55,699 --> 00:05:58,940
introduced the topic<font color="#CCCCCC"> I'm</font><font color="#E5E5E5"> going to</font>

177
00:05:56,990 --> 00:06:02,060
introduce that there are two main rivals

178
00:05:58,940 --> 00:06:04,159
of x86 syntax so despite x86 being a

179
00:06:02,060 --> 00:06:06,889
known architecture there's actually no

180
00:06:04,159 --> 00:06:08,419
one way to write x86 it's actually

181
00:06:06,889 --> 00:06:10,820
depending on what assembler you're using

182
00:06:08,419 --> 00:06:13,370
<font color="#E5E5E5">so there are two of the largest</font>

183
00:06:10,820 --> 00:06:15,560
competitors<font color="#E5E5E5"> in x86 syntax world or what</font>

184
00:06:13,370 --> 00:06:18,080
you'll you'll see called<font color="#CCCCCC"> a TNT syntax</font>

185
00:06:15,560 --> 00:06:20,000
and Intel syntax<font color="#E5E5E5"> and both have pretty</font>

186
00:06:18,080 --> 00:06:21,590
good<font color="#E5E5E5"> market dominance they both have</font>

187
00:06:20,000 --> 00:06:24,169
their<font color="#E5E5E5"> pros</font><font color="#CCCCCC"> and cons there</font><font color="#E5E5E5"> are hundreds</font>

188
00:06:21,590 --> 00:06:26,900
of smaller ones<font color="#CCCCCC"> for the purposes of this</font>

189
00:06:24,169 --> 00:06:29,508
<font color="#CCCCCC">presentation and</font><font color="#E5E5E5"> my own personal opinion</font>

190
00:06:26,900 --> 00:06:32,448
I think<font color="#E5E5E5"> AT&T is horrible and hard to</font>

191
00:06:29,509 --> 00:06:34,009
read<font color="#CCCCCC"> so it's the one on the top</font><font color="#E5E5E5"> and we</font>

192
00:06:32,449 --> 00:06:36,139
will<font color="#E5E5E5"> be focused on Intel but if you're</font>

193
00:06:34,009 --> 00:06:37,760
ever looking<font color="#E5E5E5"> up x86 and you see all</font>

194
00:06:36,139 --> 00:06:39,409
these weird like percent signs and

195
00:06:37,760 --> 00:06:41,060
dollar signs<font color="#E5E5E5"> everywhere you are looking</font>

196
00:06:39,409 --> 00:06:43,250
at AT&T syntax

197
00:06:41,060 --> 00:06:45,260
so make sure you just understand some of

198
00:06:43,250 --> 00:06:47,690
<font color="#E5E5E5">the small nuances it's still x86</font>

199
00:06:45,260 --> 00:06:49,580
assembly it's just a different syntax<font color="#CCCCCC"> if</font>

200
00:06:47,690 --> 00:06:51,110
you don't see<font color="#E5E5E5"> all the percent signs and</font>

201
00:06:49,580 --> 00:06:54,979
dollar signs<font color="#E5E5E5"> you're probably looking at</font>

202
00:06:51,110 --> 00:06:56,630
Intel syntax so<font color="#CCCCCC"> assembler</font><font color="#E5E5E5"> syntax I said</font>

203
00:06:54,980 --> 00:06:59,000
it depends<font color="#CCCCCC"> on your assembler there is no</font>

204
00:06:56,630 --> 00:07:00,140
one right<font color="#CCCCCC"> way to</font><font color="#E5E5E5"> write x86 which is</font>

205
00:06:59,000 --> 00:07:02,030
different from<font color="#E5E5E5"> most programming</font>

206
00:07:00,140 --> 00:07:04,280
<font color="#E5E5E5">languages it all depends what assembler</font>

207
00:07:02,030 --> 00:07:05,630
you're using<font color="#E5E5E5"> so the assembler that is</font>

208
00:07:04,280 --> 00:07:08,239
most commonly<font color="#CCCCCC"> used in the one I'll</font>

209
00:07:05,630 --> 00:07:10,130
introduce<font color="#E5E5E5"> is called</font><font color="#CCCCCC"> NASM</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> NASM is is a</font>

210
00:07:08,240 --> 00:07:13,460
<font color="#CCCCCC">linux-based</font><font color="#E5E5E5"> net wide assembler it's</font>

211
00:07:10,130 --> 00:07:15,670
called so<font color="#CCCCCC"> NASM syntax it's intel syntax</font>

212
00:07:13,460 --> 00:07:18,140
<font color="#E5E5E5">lines don't end in a semicolon</font>

213
00:07:15,670 --> 00:07:19,310
<font color="#E5E5E5">semicolons start a single line comment</font>

214
00:07:18,140 --> 00:07:21,320
so the last line<font color="#E5E5E5"> there shows you</font>

215
00:07:19,310 --> 00:07:22,760
instruction and then<font color="#E5E5E5"> colon would be a</font>

216
00:07:21,320 --> 00:07:23,800
comment otherwise<font color="#CCCCCC"> it colons not</font>

217
00:07:22,760 --> 00:07:27,980
necessary

218
00:07:23,800 --> 00:07:29,210
so some x86 instructions so the first

219
00:07:27,980 --> 00:07:30,860
thing you<font color="#E5E5E5"> need to understand before we</font>

220
00:07:29,210 --> 00:07:33,229
show<font color="#E5E5E5"> you instructions is how you use</font>

221
00:07:30,860 --> 00:07:35,480
registers so the registers<font color="#E5E5E5"> are how your</font>

222
00:07:33,230 --> 00:07:38,390
processor actually<font color="#E5E5E5"> stores data on the</font>

223
00:07:35,480 --> 00:07:41,090
processor<font color="#E5E5E5"> system</font><font color="#CCCCCC"> memory is extremely</font>

224
00:07:38,390 --> 00:07:42,440
slow<font color="#CCCCCC"> and</font><font color="#E5E5E5"> and extremely slow seems kind</font>

225
00:07:41,090 --> 00:07:44,330
of odd to<font color="#CCCCCC"> think of your system</font><font color="#E5E5E5"> memory</font>

226
00:07:42,440 --> 00:07:46,580
<font color="#CCCCCC">memories fast and it's gotten a lot</font>

227
00:07:44,330 --> 00:07:48,859
faster<font color="#CCCCCC"> but compared to a register inside</font>

228
00:07:46,580 --> 00:07:50,870
of the<font color="#CCCCCC"> CPU is thousands of</font><font color="#E5E5E5"> times slower</font>

229
00:07:48,860 --> 00:07:52,430
<font color="#E5E5E5">to fetch something from memory than it</font>

230
00:07:50,870 --> 00:07:54,530
is to fetch it<font color="#CCCCCC"> from</font><font color="#E5E5E5"> one of the</font><font color="#CCCCCC"> cpu</font>

231
00:07:52,430 --> 00:07:55,850
registers<font color="#CCCCCC"> so the registers are</font><font color="#E5E5E5"> your</font>

232
00:07:54,530 --> 00:07:57,320
preferred way of<font color="#E5E5E5"> handling and</font>

233
00:07:55,850 --> 00:07:59,300
manipulating data if you can avoid

234
00:07:57,320 --> 00:08:01,760
memory fetches you want to for<font color="#E5E5E5"> speed</font>

235
00:07:59,300 --> 00:08:03,560
reasons<font color="#E5E5E5"> registers are actually inside</font>

236
00:08:01,760 --> 00:08:05,050
<font color="#E5E5E5">the processor physically that's why they</font>

237
00:08:03,560 --> 00:08:07,820
are<font color="#CCCCCC"> so much faster</font>

238
00:08:05,050 --> 00:08:11,120
so there are<font color="#E5E5E5"> we're going to</font><font color="#CCCCCC"> focus on the</font>

239
00:08:07,820 --> 00:08:12,950
32 bit registers<font color="#CCCCCC"> in this particular</font>

240
00:08:11,120 --> 00:08:14,540
<font color="#E5E5E5">presentation know that the 64 bit</font>

241
00:08:12,950 --> 00:08:16,610
<font color="#E5E5E5">everything we're learning here it still</font>

242
00:08:14,540 --> 00:08:18,710
applies to 64-bit registers it's just

243
00:08:16,610 --> 00:08:21,860
that you put<font color="#E5E5E5"> a are in front so instead</font>

244
00:08:18,710 --> 00:08:23,810
of<font color="#CCCCCC"> EAX it would be</font><font color="#E5E5E5"> our</font><font color="#CCCCCC"> ax it's</font><font color="#E5E5E5"> just a</font>

245
00:08:21,860 --> 00:08:26,630
<font color="#E5E5E5">64-bit</font><font color="#CCCCCC"> version of the same</font><font color="#E5E5E5"> register</font>

246
00:08:23,810 --> 00:08:28,400
<font color="#E5E5E5">everything else still applies so the</font>

247
00:08:26,630 --> 00:08:30,380
naming<font color="#E5E5E5"> convention</font><font color="#CCCCCC"> for the 32 bit</font>

248
00:08:28,400 --> 00:08:32,720
registers<font color="#E5E5E5"> you see that you really only</font>

249
00:08:30,380 --> 00:08:37,429
<font color="#CCCCCC">have</font><font color="#E5E5E5"> these six general-purpose registers</font>

250
00:08:32,720 --> 00:08:40,790
at the top so EAX EBX ECX<font color="#E5E5E5"> edx ESI and</font>

251
00:08:37,429 --> 00:08:42,829
<font color="#E5E5E5">EDI</font><font color="#CCCCCC"> so the top four</font><font color="#E5E5E5"> you can refer to</font>

252
00:08:40,789 --> 00:08:44,750
<font color="#E5E5E5">smaller versions of them so you see you</font>

253
00:08:42,830 --> 00:08:47,570
<font color="#CCCCCC">can</font><font color="#E5E5E5"> look at like a</font><font color="#CCCCCC"> X</font><font color="#E5E5E5"> as just the lower</font>

254
00:08:44,750 --> 00:08:51,140
16 bits of it and that's<font color="#E5E5E5"> because x86 has</font>

255
00:08:47,570 --> 00:08:53,060
been around since<font color="#E5E5E5"> the 60s and 70s</font><font color="#CCCCCC"> and it</font>

256
00:08:51,140 --> 00:08:53,520
has been<font color="#E5E5E5"> backwards compatible since then</font>

257
00:08:53,060 --> 00:08:55,589
so the

258
00:08:53,520 --> 00:08:57,199
current x86 manifestation is still

259
00:08:55,590 --> 00:09:00,180
backwards compatible with<font color="#CCCCCC"> the original</font>

260
00:08:57,200 --> 00:09:02,340
<font color="#E5E5E5">like</font><font color="#CCCCCC"> 16 and</font><font color="#E5E5E5"> 8-bit versions of the</font>

261
00:09:00,180 --> 00:09:03,989
architecture<font color="#CCCCCC"> and that's</font><font color="#E5E5E5"> why you have</font>

262
00:09:02,340 --> 00:09:05,520
these<font color="#E5E5E5"> old historical versions of these</font>

263
00:09:03,990 --> 00:09:07,610
<font color="#E5E5E5">registers</font><font color="#CCCCCC"> because</font><font color="#E5E5E5"> the original code</font>

264
00:09:05,520 --> 00:09:12,180
<font color="#CCCCCC">written for the</font><font color="#E5E5E5"> original 8086 and 8088</font>

265
00:09:07,610 --> 00:09:13,800
still run on a modern processor<font color="#E5E5E5"> so the</font>

266
00:09:12,180 --> 00:09:16,410
other instruction or<font color="#E5E5E5"> the other register</font>

267
00:09:13,800 --> 00:09:18,630
worth knowing is VIP<font color="#E5E5E5"> so this is your</font>

268
00:09:16,410 --> 00:09:20,490
instruction pointer register<font color="#CCCCCC"> you</font><font color="#E5E5E5"> have no</font>

269
00:09:18,630 --> 00:09:22,200
<font color="#E5E5E5">direct</font><font color="#CCCCCC"> control over</font><font color="#E5E5E5"> this you can't load</font>

270
00:09:20,490 --> 00:09:24,240
it<font color="#CCCCCC"> you can't use</font><font color="#E5E5E5"> it like a normal</font>

271
00:09:22,200 --> 00:09:25,890
variable<font color="#E5E5E5"> but it always contains the</font>

272
00:09:24,240 --> 00:09:28,170
memory address of<font color="#E5E5E5"> the next instruction</font>

273
00:09:25,890 --> 00:09:30,390
to<font color="#CCCCCC"> execute so anytime you're doing</font>

274
00:09:28,170 --> 00:09:31,709
<font color="#E5E5E5">debugging the EIP one is when you're</font>

275
00:09:30,390 --> 00:09:33,689
going<font color="#E5E5E5"> to want</font><font color="#CCCCCC"> to pay attention</font><font color="#E5E5E5"> to and</font>

276
00:09:31,710 --> 00:09:35,670
<font color="#E5E5E5">it's the next instruction so not the one</font>

277
00:09:33,690 --> 00:09:37,410
<font color="#E5E5E5">that's currently executing but what will</font>

278
00:09:35,670 --> 00:09:40,800
be next<font color="#CCCCCC"> if you were to</font><font color="#E5E5E5"> step through your</font>

279
00:09:37,410 --> 00:09:43,709
<font color="#CCCCCC">code the other important thing before we</font>

280
00:09:40,800 --> 00:09:45,839
<font color="#CCCCCC">introduce actual instructions is how you</font>

281
00:09:43,710 --> 00:09:47,520
<font color="#E5E5E5">actually access memory the registers</font><font color="#CCCCCC"> are</font>

282
00:09:45,840 --> 00:09:49,170
the preferred way<font color="#CCCCCC"> to do things but</font>

283
00:09:47,520 --> 00:09:50,819
routinely stuff is stored<font color="#E5E5E5"> in</font><font color="#CCCCCC"> memory or</font>

284
00:09:49,170 --> 00:09:53,040
<font color="#E5E5E5">you saw you really only</font><font color="#CCCCCC"> have six</font>

285
00:09:50,820 --> 00:09:54,840
registers<font color="#E5E5E5"> and for all the complex things</font>

286
00:09:53,040 --> 00:09:57,180
your computer does there's no way to do

287
00:09:54,840 --> 00:09:58,860
<font color="#E5E5E5">that entirely in those six registers</font><font color="#CCCCCC"> so</font>

288
00:09:57,180 --> 00:10:01,319
you will routinely find needs where you

289
00:09:58,860 --> 00:10:03,690
have to store things<font color="#E5E5E5"> in memory and</font>

290
00:10:01,320 --> 00:10:05,970
refetch them so if<font color="#E5E5E5"> you</font><font color="#CCCCCC"> are going to</font>

291
00:10:03,690 --> 00:10:08,550
<font color="#E5E5E5">manipulate memory you simply put the</font>

292
00:10:05,970 --> 00:10:10,740
memory address inside of square<font color="#E5E5E5"> brackets</font>

293
00:10:08,550 --> 00:10:12,810
is how you're telling the<font color="#CCCCCC"> CPU basically</font>

294
00:10:10,740 --> 00:10:16,110
go<font color="#E5E5E5"> to that memory address</font><font color="#CCCCCC"> and fetch the</font>

295
00:10:12,810 --> 00:10:17,880
<font color="#CCCCCC">information at that memory address</font><font color="#E5E5E5"> so</font>

296
00:10:16,110 --> 00:10:22,320
<font color="#E5E5E5">Kristen</font><font color="#CCCCCC"> mentioned that the developer</font>

297
00:10:17,880 --> 00:10:24,180
manual for x86<font color="#E5E5E5"> is 4,000 pages</font><font color="#CCCCCC"> truthfully</font>

298
00:10:22,320 --> 00:10:25,680
if you just<font color="#E5E5E5"> learned the instructions</font>

299
00:10:24,180 --> 00:10:28,709
that<font color="#E5E5E5"> I show on this page that</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> going</font>

300
00:10:25,680 --> 00:10:30,839
to get you<font color="#E5E5E5"> 95% of the way I Kris and I</font>

301
00:10:28,710 --> 00:10:32,430
consider ourselves<font color="#E5E5E5"> to be x86 experts and</font>

302
00:10:30,840 --> 00:10:33,750
<font color="#E5E5E5">I've get I would guarantee if I look</font>

303
00:10:32,430 --> 00:10:35,099
<font color="#E5E5E5">through that developer manual there'd be</font>

304
00:10:33,750 --> 00:10:36,660
a ton of stuff<font color="#CCCCCC"> that I didn't</font><font color="#E5E5E5"> know</font>

305
00:10:35,100 --> 00:10:38,310
because the truth is<font color="#CCCCCC"> you don't need it</font>

306
00:10:36,660 --> 00:10:40,650
if you're doing<font color="#E5E5E5"> x86 it's all really</font>

307
00:10:38,310 --> 00:10:41,699
obscure corner case stuff so these are

308
00:10:40,650 --> 00:10:43,470
the instructions you're going to want to

309
00:10:41,700 --> 00:10:45,990
focus on I'll<font color="#CCCCCC"> introduce most of them</font>

310
00:10:43,470 --> 00:10:48,510
today<font color="#CCCCCC"> but when you're</font><font color="#E5E5E5"> going back are</font>

311
00:10:45,990 --> 00:10:49,650
people<font color="#CCCCCC"> watching this</font><font color="#E5E5E5"> video</font><font color="#CCCCCC"> kind of look</font>

312
00:10:48,510 --> 00:10:51,689
at this slide<font color="#CCCCCC"> and these are the</font>

313
00:10:49,650 --> 00:10:54,870
instructions<font color="#CCCCCC"> you should learn to be able</font>

314
00:10:51,690 --> 00:10:56,790
<font color="#E5E5E5">to</font><font color="#CCCCCC"> actually do x86</font><font color="#E5E5E5"> this is one of</font><font color="#CCCCCC"> my</font>

315
00:10:54,870 --> 00:10:58,020
favorite references<font color="#CCCCCC"> so if you're</font><font color="#E5E5E5"> on your</font>

316
00:10:56,790 --> 00:11:01,349
computer<font color="#CCCCCC"> and</font><font color="#E5E5E5"> actually trying to look up</font>

317
00:10:58,020 --> 00:11:03,270
x86 this is this is the one I<font color="#E5E5E5"> always go</font>

318
00:11:01,350 --> 00:11:05,310
to<font color="#E5E5E5"> for quickly looking up x86</font>

319
00:11:03,270 --> 00:11:07,380
instructions and quickly how they work

320
00:11:05,310 --> 00:11:10,079
and<font color="#E5E5E5"> how they assemble</font>

321
00:11:07,380 --> 00:11:11,970
so the most important instruction is the

322
00:11:10,080 --> 00:11:14,220
<font color="#CCCCCC">move instruction and</font><font color="#E5E5E5"> despite</font><font color="#CCCCCC"> being</font>

323
00:11:11,970 --> 00:11:18,750
called move it actually makes a copy it

324
00:11:14,220 --> 00:11:21,450
does not move data<font color="#CCCCCC"> so the way it is move</font>

325
00:11:18,750 --> 00:11:23,220
and then destination source<font color="#E5E5E5"> this is</font><font color="#CCCCCC"> the</font>

326
00:11:21,450 --> 00:11:26,130
<font color="#E5E5E5">biggest</font><font color="#CCCCCC"> difference between Intel and</font>

327
00:11:23,220 --> 00:11:28,230
AT&T syntax<font color="#E5E5E5"> AT&T has source and</font>

328
00:11:26,130 --> 00:11:30,689
destination flipped so if you're looking

329
00:11:28,230 --> 00:11:31,800
<font color="#CCCCCC">at</font><font color="#E5E5E5"> AT&T syntax everything is reverse</font>

330
00:11:30,690 --> 00:11:35,160
order<font color="#CCCCCC"> from Intel</font>

331
00:11:31,800 --> 00:11:37,859
so the Intel syntax is destination

332
00:11:35,160 --> 00:11:40,230
<font color="#E5E5E5">source and then I've got examples down</font>

333
00:11:37,860 --> 00:11:41,790
there and I kind<font color="#CCCCCC"> of have a that part</font>

334
00:11:40,230 --> 00:11:43,470
where it says copy underlined because

335
00:11:41,790 --> 00:11:44,849
people when they're<font color="#E5E5E5"> starting get very</font>

336
00:11:43,470 --> 00:11:47,760
confused by the fact<font color="#CCCCCC"> that it's called</font>

337
00:11:44,850 --> 00:11:52,260
move<font color="#E5E5E5"> if I am moving from</font><font color="#CCCCCC"> say memory</font>

338
00:11:47,760 --> 00:11:54,180
<font color="#E5E5E5">address 100</font><font color="#CCCCCC"> into EDX register that</font>

339
00:11:52,260 --> 00:11:56,460
original data the value still stays at

340
00:11:54,180 --> 00:11:59,579
memory address 100 it<font color="#CCCCCC"> is not an</font><font color="#E5E5E5"> actual</font>

341
00:11:56,460 --> 00:12:01,650
move it is a copy<font color="#CCCCCC"> same for the last one</font>

342
00:11:59,580 --> 00:12:04,830
so if I'm<font color="#CCCCCC"> moving</font><font color="#E5E5E5"> from the</font><font color="#CCCCCC"> EAX register</font>

343
00:12:01,650 --> 00:12:06,750
into the edx register<font color="#CCCCCC"> yeck still</font>

344
00:12:04,830 --> 00:12:09,120
maintains its original value<font color="#CCCCCC"> i've</font><font color="#E5E5E5"> simply</font>

345
00:12:06,750 --> 00:12:12,570
made a copy<font color="#E5E5E5"> of it so it's called move</font>

346
00:12:09,120 --> 00:12:15,660
but it's actually a copy instruction<font color="#E5E5E5"> so</font>

347
00:12:12,570 --> 00:12:17,820
add and subtract<font color="#CCCCCC"> so for intel</font><font color="#E5E5E5"> just</font>

348
00:12:15,660 --> 00:12:20,760
ubiquitously<font color="#E5E5E5"> will always be destination</font>

349
00:12:17,820 --> 00:12:22,170
<font color="#E5E5E5">first and then</font><font color="#CCCCCC"> whatever other value</font><font color="#E5E5E5"> that</font>

350
00:12:20,760 --> 00:12:24,569
instruction needs so if I'm adding

351
00:12:22,170 --> 00:12:26,640
<font color="#E5E5E5">something</font><font color="#CCCCCC"> I have destination and value</font>

352
00:12:24,570 --> 00:12:28,500
so the interesting<font color="#E5E5E5"> things about add and</font>

353
00:12:26,640 --> 00:12:30,540
subtract is there's<font color="#E5E5E5"> only two arguments</font>

354
00:12:28,500 --> 00:12:34,410
<font color="#E5E5E5">so your destination is always one of the</font>

355
00:12:30,540 --> 00:12:37,709
arguments<font color="#E5E5E5"> so if I'm adding add</font><font color="#CCCCCC"> Dax</font><font color="#E5E5E5"> and</font>

356
00:12:34,410 --> 00:12:40,589
<font color="#CCCCCC">then this long number EAX is both used</font>

357
00:12:37,710 --> 00:12:44,040
in the<font color="#CCCCCC"> equation</font><font color="#E5E5E5"> and is the destination</font>

358
00:12:40,590 --> 00:12:45,570
so your destination is<font color="#E5E5E5"> always part of</font>

359
00:12:44,040 --> 00:12:47,790
<font color="#CCCCCC">the</font><font color="#E5E5E5"> equation you can't save it</font><font color="#CCCCCC"> in a</font>

360
00:12:45,570 --> 00:12:49,890
third variable<font color="#E5E5E5"> so it's important to</font>

361
00:12:47,790 --> 00:12:51,240
<font color="#E5E5E5">understand you're also overriding one of</font>

362
00:12:49,890 --> 00:12:56,250
your variables<font color="#E5E5E5"> when you're doing an add</font>

363
00:12:51,240 --> 00:12:59,160
or subtract so the jump instruction x86

364
00:12:56,250 --> 00:13:01,110
<font color="#E5E5E5">like all coding languages</font><font color="#CCCCCC"> executes it's</font>

365
00:12:59,160 --> 00:13:03,060
linearly so it'll just<font color="#CCCCCC"> keep going unless</font>

366
00:13:01,110 --> 00:13:05,340
you hit something<font color="#CCCCCC"> that will change or</font>

367
00:13:03,060 --> 00:13:07,410
divert the EIP register you cannot

368
00:13:05,340 --> 00:13:08,910
affect the EIP register<font color="#CCCCCC"> directly so the</font>

369
00:13:07,410 --> 00:13:11,760
way you affected is things<font color="#E5E5E5"> like jump</font>

370
00:13:08,910 --> 00:13:13,890
instructions<font color="#E5E5E5"> jump</font><font color="#CCCCCC"> will load the address</font>

371
00:13:11,760 --> 00:13:15,870
<font color="#CCCCCC">that</font><font color="#E5E5E5"> you have there into</font><font color="#CCCCCC"> EIP so that the</font>

372
00:13:13,890 --> 00:13:17,689
next instruction<font color="#CCCCCC"> will be that</font>

373
00:13:15,870 --> 00:13:18,800
instruction instead of the one that<font color="#CCCCCC"> was</font>

374
00:13:17,690 --> 00:13:21,619
<font color="#E5E5E5">after</font>

375
00:13:18,800 --> 00:13:23,269
so in this case jump begin<font color="#E5E5E5"> I'm telling</font>

376
00:13:21,619 --> 00:13:24,920
it that<font color="#E5E5E5"> the next instruction I want you</font>

377
00:13:23,269 --> 00:13:29,149
to go to<font color="#CCCCCC"> is a place that I've labeled in</font>

378
00:13:24,920 --> 00:13:31,910
my code called begin so an example<font color="#E5E5E5"> of</font>

379
00:13:29,149 --> 00:13:34,189
<font color="#E5E5E5">this implement a loop so real quickly I</font>

380
00:13:31,910 --> 00:13:36,980
move a 0<font color="#E5E5E5"> into e^x so I'm setting using</font>

381
00:13:34,189 --> 00:13:39,110
<font color="#CCCCCC">EAX</font><font color="#E5E5E5"> kind of as my loop counter I'm going</font>

382
00:13:36,980 --> 00:13:41,059
to<font color="#E5E5E5"> increment</font><font color="#CCCCCC"> IX which just adds one to e</font>

383
00:13:39,110 --> 00:13:44,119
<font color="#CCCCCC">a X</font><font color="#E5E5E5"> so on first increment it would be a</font>

384
00:13:41,059 --> 00:13:46,129
<font color="#E5E5E5">1 and</font><font color="#CCCCCC"> then I'm going to jump loop so</font>

385
00:13:44,119 --> 00:13:48,230
<font color="#CCCCCC">that just loads the loop instruction</font><font color="#E5E5E5"> the</font>

386
00:13:46,129 --> 00:13:50,480
address which was one line ahead<font color="#E5E5E5"> into</font>

387
00:13:48,230 --> 00:13:52,730
<font color="#CCCCCC">EIP so the</font><font color="#E5E5E5"> next instruction would go</font>

388
00:13:50,480 --> 00:13:54,529
back up in increment<font color="#CCCCCC"> EAX</font><font color="#E5E5E5"> so this is</font>

389
00:13:52,730 --> 00:13:56,059
<font color="#E5E5E5">actually an infinite loop</font><font color="#CCCCCC"> the ax</font><font color="#E5E5E5"> will</font>

390
00:13:54,529 --> 00:13:57,829
indefinitely increment I'll show you how

391
00:13:56,059 --> 00:13:59,629
<font color="#E5E5E5">to not have an infinite loop later but</font>

392
00:13:57,829 --> 00:14:01,189
just<font color="#E5E5E5"> introduce the jump instruction</font><font color="#CCCCCC"> in</font>

393
00:13:59,629 --> 00:14:03,079
<font color="#E5E5E5">this</font><font color="#CCCCCC"> case it's what we call an</font>

394
00:14:01,189 --> 00:14:04,939
unconditional jump<font color="#CCCCCC"> it will always</font><font color="#E5E5E5"> take</font>

395
00:14:03,079 --> 00:14:06,109
the jump<font color="#E5E5E5"> which sometimes you need but</font>

396
00:14:04,939 --> 00:14:09,319
<font color="#CCCCCC">sometimes you need some that are</font>

397
00:14:06,110 --> 00:14:10,819
conditional to have a conditional jump

398
00:14:09,319 --> 00:14:12,910
you have<font color="#CCCCCC"> to do some kind of a comparison</font>

399
00:14:10,819 --> 00:14:15,199
<font color="#E5E5E5">so I have to have some kind</font><font color="#CCCCCC"> of an a</font>

400
00:14:12,910 --> 00:14:17,360
statement that I'm trying to<font color="#E5E5E5"> say well if</font>

401
00:14:15,199 --> 00:14:19,339
this then jump<font color="#E5E5E5"> if not this then don't</font>

402
00:14:17,360 --> 00:14:21,579
<font color="#E5E5E5">jump so I do that by using things like</font>

403
00:14:19,339 --> 00:14:24,259
comparisons<font color="#E5E5E5"> so the compare operator</font>

404
00:14:21,579 --> 00:14:26,899
subtracts the second operand<font color="#E5E5E5"> from the</font>

405
00:14:24,259 --> 00:14:28,910
first operand<font color="#E5E5E5"> the results are discarded</font>

406
00:14:26,899 --> 00:14:33,139
so what I mean<font color="#E5E5E5"> is if I compare a 5 to a</font>

407
00:14:28,910 --> 00:14:34,850
3 5 minus 3 is<font color="#CCCCCC"> 2</font><font color="#E5E5E5"> the 2 is discarded</font><font color="#CCCCCC"> that</font>

408
00:14:33,139 --> 00:14:37,069
doesn't overwrite any<font color="#E5E5E5"> of the operands</font>

409
00:14:34,850 --> 00:14:39,619
<font color="#E5E5E5">but the fact that it was a positive 2 is</font>

410
00:14:37,069 --> 00:14:41,118
used in the next<font color="#CCCCCC"> instruction to decide</font>

411
00:14:39,619 --> 00:14:44,149
whether<font color="#E5E5E5"> or not you are</font><font color="#CCCCCC"> going to take</font>

412
00:14:41,119 --> 00:14:46,910
<font color="#E5E5E5">that jump so here's an</font><font color="#CCCCCC"> example of</font><font color="#E5E5E5"> it so</font>

413
00:14:44,149 --> 00:14:49,339
why is this<font color="#E5E5E5"> useful</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> if I load 100 into</font>

414
00:14:46,910 --> 00:14:51,410
EAX<font color="#CCCCCC"> a 200 into evx</font>

415
00:14:49,339 --> 00:14:52,730
and do a compare between<font color="#E5E5E5"> the</font><font color="#CCCCCC"> two but</font>

416
00:14:51,410 --> 00:14:55,969
<font color="#E5E5E5">that's</font><font color="#CCCCCC"> actually doing behind the scenes</font>

417
00:14:52,730 --> 00:14:59,420
<font color="#E5E5E5">is e I X minus</font><font color="#CCCCCC"> e be X so I'm going to</font>

418
00:14:55,970 --> 00:15:01,429
<font color="#E5E5E5">get a hundred hex</font><font color="#CCCCCC"> sorry negative hundred</font>

419
00:14:59,420 --> 00:15:03,860
hex<font color="#E5E5E5"> and what that's actually</font><font color="#CCCCCC"> going to do</font>

420
00:15:01,429 --> 00:15:05,959
behind<font color="#CCCCCC"> the scenes</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> basically just set</font>

421
00:15:03,860 --> 00:15:08,569
the the<font color="#E5E5E5"> knowledge that the information</font>

422
00:15:05,959 --> 00:15:10,729
was negative<font color="#CCCCCC"> so if the result</font><font color="#E5E5E5"> was</font>

423
00:15:08,569 --> 00:15:13,309
negative<font color="#E5E5E5"> you get this SF which is the</font>

424
00:15:10,730 --> 00:15:14,779
<font color="#E5E5E5">sign flag but all that's met all it's</font>

425
00:15:13,309 --> 00:15:16,730
relevant<font color="#E5E5E5"> to you is that the computer now</font>

426
00:15:14,779 --> 00:15:19,579
knows<font color="#CCCCCC"> that the result was negative which</font>

427
00:15:16,730 --> 00:15:21,970
<font color="#E5E5E5">meant that</font><font color="#CCCCCC"> ei X is smaller than eb x</font>

428
00:15:19,579 --> 00:15:25,878
<font color="#E5E5E5">that's really all you</font><font color="#CCCCCC"> have to understand</font>

429
00:15:21,970 --> 00:15:28,759
so reverse opposite of that<font color="#E5E5E5"> so now</font><font color="#CCCCCC"> EI</font><font color="#E5E5E5"> x</font>

430
00:15:25,879 --> 00:15:31,690
is bigger<font color="#E5E5E5"> than eb</font><font color="#CCCCCC"> X so if I</font><font color="#E5E5E5"> load a 300</font>

431
00:15:28,759 --> 00:15:34,780
into EAX<font color="#CCCCCC"> a 200 into eb x and do</font>

432
00:15:31,690 --> 00:15:36,400
<font color="#CCCCCC">compare it's still going to do</font><font color="#E5E5E5"> the 300</font><font color="#CCCCCC"> -</font>

433
00:15:34,780 --> 00:15:38,920
the 200 but this time I get<font color="#CCCCCC"> a positive</font>

434
00:15:36,400 --> 00:15:40,480
number<font color="#CCCCCC"> the fact that it's a positive 100</font>

435
00:15:38,920 --> 00:15:42,130
is irrelevant<font color="#CCCCCC"> all the computer cares</font>

436
00:15:40,480 --> 00:15:45,400
about is<font color="#CCCCCC"> that it was a positive</font><font color="#E5E5E5"> result</font>

437
00:15:42,130 --> 00:15:47,080
<font color="#CCCCCC">which meant EAX was bigger than EAX</font><font color="#E5E5E5"> so</font>

438
00:15:45,400 --> 00:15:48,760
that knowledge<font color="#CCCCCC"> is what the computer is</font>

439
00:15:47,080 --> 00:15:51,040
then<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to use when you do then</font>

440
00:15:48,760 --> 00:15:52,930
conditional jumps<font color="#E5E5E5"> so how do</font><font color="#CCCCCC"> I do a</font>

441
00:15:51,040 --> 00:15:55,120
conditional jump<font color="#E5E5E5"> so conditional jumps</font>

442
00:15:52,930 --> 00:15:57,430
take into consideration the state of the

443
00:15:55,120 --> 00:15:59,440
<font color="#E5E5E5">CPU so the CPU is tracking the fact that</font>

444
00:15:57,430 --> 00:16:02,589
<font color="#E5E5E5">the last compare resulted in a positive</font>

445
00:15:59,440 --> 00:16:04,390
<font color="#E5E5E5">number</font><font color="#CCCCCC"> so meant greater than so I get</font>

446
00:16:02,590 --> 00:16:06,670
all these<font color="#E5E5E5"> different possible control</font>

447
00:16:04,390 --> 00:16:08,319
<font color="#E5E5E5">flow instructions so jump equal if the</font>

448
00:16:06,670 --> 00:16:10,270
last compare the both the numbers were

449
00:16:08,320 --> 00:16:13,120
equal then jump<font color="#E5E5E5"> equal would get taken</font>

450
00:16:10,270 --> 00:16:15,040
<font color="#CCCCCC">jump not equals the exact opposite</font><font color="#E5E5E5"> so</font>

451
00:16:13,120 --> 00:16:16,960
you also have your jump<font color="#E5E5E5"> zero jump</font>

452
00:16:15,040 --> 00:16:19,300
greater than jump greater than equal to

453
00:16:16,960 --> 00:16:21,070
<font color="#E5E5E5">less than and less than</font><font color="#CCCCCC"> equal to</font><font color="#E5E5E5"> so you</font>

454
00:16:19,300 --> 00:16:23,979
can<font color="#E5E5E5"> just kind of</font><font color="#CCCCCC"> imagine the truth table</font>

455
00:16:21,070 --> 00:16:25,300
<font color="#CCCCCC">with that compare instruction of if the</font>

456
00:16:23,980 --> 00:16:27,250
numbers were less<font color="#CCCCCC"> than if they were</font>

457
00:16:25,300 --> 00:16:29,469
<font color="#CCCCCC">equal if they were greater than I would</font>

458
00:16:27,250 --> 00:16:31,930
use the various conditional jumps<font color="#E5E5E5"> based</font>

459
00:16:29,470 --> 00:16:33,880
on what I was<font color="#E5E5E5"> trying</font><font color="#CCCCCC"> to achieve remember</font>

460
00:16:31,930 --> 00:16:36,880
this is a 25-minute intro so jumps are

461
00:16:33,880 --> 00:16:38,680
kind<font color="#E5E5E5"> of complicated but this is the</font>

462
00:16:36,880 --> 00:16:40,720
basic to the<font color="#E5E5E5"> logic you need to be able</font>

463
00:16:38,680 --> 00:16:41,920
<font color="#E5E5E5">to make code that is not stuck</font><font color="#CCCCCC"> in an</font>

464
00:16:40,720 --> 00:16:45,760
infinite loop and<font color="#E5E5E5"> does something</font>

465
00:16:41,920 --> 00:16:47,199
<font color="#E5E5E5">condition I so here a different example</font>

466
00:16:45,760 --> 00:16:50,170
<font color="#E5E5E5">of how I could have done a loop so I</font>

467
00:16:47,200 --> 00:16:52,030
<font color="#E5E5E5">compare EAX EBX</font><font color="#CCCCCC"> and then jump less than</font>

468
00:16:50,170 --> 00:16:55,449
equal to done<font color="#E5E5E5"> so in that case I'm</font>

469
00:16:52,030 --> 00:16:58,120
<font color="#E5E5E5">comparing something and if it is greater</font>

470
00:16:55,450 --> 00:16:59,680
than I want to keep<font color="#CCCCCC"> executing but if not</font>

471
00:16:58,120 --> 00:17:01,750
then I'm gonna say well if it's<font color="#E5E5E5"> less</font>

472
00:16:59,680 --> 00:17:03,400
<font color="#CCCCCC">than or equal</font><font color="#E5E5E5"> to I'm done</font><font color="#CCCCCC"> I'm exiting my</font>

473
00:17:01,750 --> 00:17:04,660
loop<font color="#CCCCCC"> so that's how you would do the</font>

474
00:17:03,400 --> 00:17:07,089
equivalent<font color="#CCCCCC"> of what you would</font><font color="#E5E5E5"> think</font><font color="#CCCCCC"> of as</font>

475
00:17:04,660 --> 00:17:09,520
a conditional loop in any other language

476
00:17:07,089 --> 00:17:12,040
<font color="#CCCCCC">so here's one</font><font color="#E5E5E5"> on a loop from</font><font color="#CCCCCC"> zero to</font>

477
00:17:09,520 --> 00:17:13,780
<font color="#CCCCCC">five</font><font color="#E5E5E5"> so instead of incrementing a X</font>

478
00:17:12,040 --> 00:17:17,139
indefinitely I only want to<font color="#E5E5E5"> increment it</font>

479
00:17:13,780 --> 00:17:20,649
<font color="#CCCCCC">five</font><font color="#E5E5E5"> times so low to zero into ax by a</font>

480
00:17:17,140 --> 00:17:24,010
zero moving into<font color="#E5E5E5"> y ax I'm an increment Y</font>

481
00:17:20,650 --> 00:17:26,439
ax<font color="#E5E5E5"> I'm going to compare EI</font><font color="#CCCCCC"> X to 5 and if</font>

482
00:17:24,010 --> 00:17:29,320
it's jump<font color="#E5E5E5"> less than or equal</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> loop so</font>

483
00:17:26,439 --> 00:17:32,050
if a<font color="#CCCCCC"> EI</font><font color="#E5E5E5"> X was less than or</font><font color="#CCCCCC"> equal</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> five</font>

484
00:17:29,320 --> 00:17:34,090
<font color="#CCCCCC">I jump back up</font><font color="#E5E5E5"> and do the loop again so</font>

485
00:17:32,050 --> 00:17:36,820
what<font color="#E5E5E5"> that means is when EI</font><font color="#CCCCCC"> X is greater</font>

486
00:17:34,090 --> 00:17:38,919
<font color="#E5E5E5">than</font><font color="#CCCCCC"> five I will not take the jump</font><font color="#E5E5E5"> and I</font>

487
00:17:36,820 --> 00:17:40,540
will end the loop<font color="#CCCCCC"> so now I've got a</font>

488
00:17:38,920 --> 00:17:43,900
conditional the<font color="#E5E5E5"> ability to do</font>

489
00:17:40,540 --> 00:17:45,090
conditional looping so different

490
00:17:43,900 --> 00:17:48,040
conditional

491
00:17:45,090 --> 00:17:49,629
this one it's not<font color="#E5E5E5"> a loop</font><font color="#CCCCCC"> now I have an</font>

492
00:17:48,040 --> 00:17:51,730
<font color="#E5E5E5">if statement so think</font><font color="#CCCCCC"> of if statements</font>

493
00:17:49,630 --> 00:17:53,860
<font color="#CCCCCC">in any other</font><font color="#E5E5E5"> higher level language if a</font>

494
00:17:51,730 --> 00:17:56,560
is<font color="#E5E5E5"> equal to B I want to set some</font><font color="#CCCCCC"> values</font>

495
00:17:53,860 --> 00:18:00,250
in this case x equals to<font color="#CCCCCC"> 1 so I'm</font><font color="#E5E5E5"> going</font>

496
00:17:56,560 --> 00:18:03,280
to say compare ax to<font color="#E5E5E5"> BX which is taking</font>

497
00:18:00,250 --> 00:18:05,650
ax minus BX<font color="#E5E5E5"> and then if it's jump not</font>

498
00:18:03,280 --> 00:18:07,750
equal to skip so if they were not equal

499
00:18:05,650 --> 00:18:09,310
<font color="#E5E5E5">then I want to jump over the next</font>

500
00:18:07,750 --> 00:18:11,680
instruction<font color="#E5E5E5"> so you see how the</font><font color="#CCCCCC"> Skip</font>

501
00:18:09,310 --> 00:18:13,770
label is lower<font color="#CCCCCC"> so if they were not equal</font>

502
00:18:11,680 --> 00:18:16,450
<font color="#CCCCCC">I'm going to skip the next</font><font color="#E5E5E5"> instruction</font>

503
00:18:13,770 --> 00:18:18,100
if they were equal<font color="#CCCCCC"> to I</font><font color="#E5E5E5"> will</font><font color="#CCCCCC"> go ahead</font>

504
00:18:16,450 --> 00:18:21,730
and<font color="#CCCCCC"> execute the next instruction which</font>

505
00:18:18,100 --> 00:18:23,830
move to<font color="#CCCCCC"> 1</font><font color="#E5E5E5"> into CX so in that case now I</font>

506
00:18:21,730 --> 00:18:26,650
can do things like if-else statements

507
00:18:23,830 --> 00:18:30,250
<font color="#E5E5E5">else ifs using the compare and</font>

508
00:18:26,650 --> 00:18:31,420
conditional jumps so functions are

509
00:18:30,250 --> 00:18:34,360
another big<font color="#E5E5E5"> thing you're going to want</font>

510
00:18:31,420 --> 00:18:36,400
to be able<font color="#CCCCCC"> to</font><font color="#E5E5E5"> do so think of call as the</font>

511
00:18:34,360 --> 00:18:38,229
way<font color="#E5E5E5"> that I invoke a</font><font color="#CCCCCC"> function so I would</font>

512
00:18:36,400 --> 00:18:40,090
call and then the name of<font color="#CCCCCC"> my function</font>

513
00:18:38,230 --> 00:18:41,560
<font color="#E5E5E5">and any</font><font color="#CCCCCC"> higher-level</font><font color="#E5E5E5"> language you would</font>

514
00:18:40,090 --> 00:18:43,480
still put the name of<font color="#CCCCCC"> the</font><font color="#E5E5E5"> function</font><font color="#CCCCCC"> just</font>

515
00:18:41,560 --> 00:18:46,440
without<font color="#E5E5E5"> the</font><font color="#CCCCCC"> keyword call this time you</font>

516
00:18:43,480 --> 00:18:49,240
<font color="#E5E5E5">just have</font><font color="#CCCCCC"> to add a call in front of it</font>

517
00:18:46,440 --> 00:18:50,920
<font color="#CCCCCC">Brett is how you return</font><font color="#E5E5E5"> from</font><font color="#CCCCCC"> one of your</font>

518
00:18:49,240 --> 00:18:52,180
calls<font color="#CCCCCC"> so once you're inside of</font><font color="#E5E5E5"> a</font>

519
00:18:50,920 --> 00:18:53,770
function<font color="#E5E5E5"> if you're done with</font><font color="#CCCCCC"> that</font>

520
00:18:52,180 --> 00:18:55,810
function<font color="#CCCCCC"> and you want to go back to</font>

521
00:18:53,770 --> 00:18:59,620
where it<font color="#CCCCCC"> was initially called</font><font color="#E5E5E5"> use the</font>

522
00:18:55,810 --> 00:19:01,360
RET instruction<font color="#E5E5E5"> so no op is a</font>

523
00:18:59,620 --> 00:19:03,639
<font color="#E5E5E5">particularly popular one in the security</font>

524
00:19:01,360 --> 00:19:07,270
<font color="#E5E5E5">field so no op or not</font><font color="#CCCCCC"> literally</font><font color="#E5E5E5"> does</font>

525
00:19:03,640 --> 00:19:10,180
nothing<font color="#CCCCCC"> they waste one CPU</font><font color="#E5E5E5"> cycle</font><font color="#CCCCCC"> it's</font>

526
00:19:07,270 --> 00:19:12,820
<font color="#E5E5E5">often</font><font color="#CCCCCC"> used</font><font color="#E5E5E5"> nefariously for things like</font>

527
00:19:10,180 --> 00:19:14,650
<font color="#CCCCCC">knobs LEDs</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> knocking</font><font color="#E5E5E5"> out security</font>

528
00:19:12,820 --> 00:19:16,120
<font color="#E5E5E5">checks so if there's a piece of code</font>

529
00:19:14,650 --> 00:19:17,920
<font color="#CCCCCC">that I don't actually want to</font><font color="#E5E5E5"> run for</font>

530
00:19:16,120 --> 00:19:19,899
security reasons am trying to get past

531
00:19:17,920 --> 00:19:22,570
your authentication<font color="#E5E5E5"> just fill it with</font>

532
00:19:19,900 --> 00:19:24,760
<font color="#CCCCCC">knops which is a machine</font><font color="#E5E5E5"> code 90 the</font>

533
00:19:22,570 --> 00:19:27,010
legitimate uses for<font color="#CCCCCC"> it or for timing and</font>

534
00:19:24,760 --> 00:19:28,570
trying to get code to be aligned so<font color="#E5E5E5"> it</font>

535
00:19:27,010 --> 00:19:30,430
literally just<font color="#E5E5E5"> tells the computer to do</font>

536
00:19:28,570 --> 00:19:31,899
nothing but it does it<font color="#E5E5E5"> in a valid way</font>

537
00:19:30,430 --> 00:19:33,700
that<font color="#E5E5E5"> won't cause any crashes</font>

538
00:19:31,900 --> 00:19:37,660
so<font color="#CCCCCC"> knots can be useful in</font><font color="#E5E5E5"> the right</font>

539
00:19:33,700 --> 00:19:39,160
situations<font color="#CCCCCC"> at this</font><font color="#E5E5E5"> example I'm not going</font>

540
00:19:37,660 --> 00:19:41,050
to go through<font color="#E5E5E5"> it line by line but I</font>

541
00:19:39,160 --> 00:19:42,550
<font color="#E5E5E5">wanted it to be</font><font color="#CCCCCC"> in here so if you go</font>

542
00:19:41,050 --> 00:19:45,040
back and reference the video you<font color="#E5E5E5"> can</font>

543
00:19:42,550 --> 00:19:46,180
have some code but in<font color="#E5E5E5"> a 25-minute talk I</font>

544
00:19:45,040 --> 00:19:48,550
can't actually go over<font color="#E5E5E5"> the whole thing</font>

545
00:19:46,180 --> 00:19:50,590
<font color="#E5E5E5">but here's an</font><font color="#CCCCCC"> example</font><font color="#E5E5E5"> that will actually</font>

546
00:19:48,550 --> 00:19:52,899
<font color="#E5E5E5">show</font><font color="#CCCCCC"> you just</font><font color="#E5E5E5"> kind of how you would take</font>

547
00:19:50,590 --> 00:19:54,610
a piece<font color="#CCCCCC"> of pseudocode in this case some</font>

548
00:19:52,900 --> 00:19:56,980
really simple addition<font color="#E5E5E5"> and setting up of</font>

549
00:19:54,610 --> 00:19:57,870
variables<font color="#E5E5E5"> and actually do some simple</font>

550
00:19:56,980 --> 00:20:00,820
arithmetic<font color="#E5E5E5"> on</font>

551
00:19:57,870 --> 00:20:02,770
so that<font color="#E5E5E5"> example is there for you</font><font color="#CCCCCC"> guys to</font>

552
00:20:00,820 --> 00:20:04,689
reference later<font color="#CCCCCC"> so the other important</font>

553
00:20:02,770 --> 00:20:06,790
thing I want<font color="#CCCCCC"> to introduce</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> the fact</font>

554
00:20:04,690 --> 00:20:09,820
that you will need the<font color="#E5E5E5"> operating systems</font>

555
00:20:06,790 --> 00:20:11,350
help if you are<font color="#CCCCCC"> writing x86 while it is</font>

556
00:20:09,820 --> 00:20:14,320
<font color="#E5E5E5">true that you could literally do</font>

557
00:20:11,350 --> 00:20:16,149
<font color="#CCCCCC">everything right riding at x86</font><font color="#E5E5E5"> if you</font>

558
00:20:14,320 --> 00:20:18,820
want it to turn<font color="#CCCCCC"> on or off a pixel on</font>

559
00:20:16,150 --> 00:20:20,560
your screen in pure x86 you're<font color="#E5E5E5"> going to</font>

560
00:20:18,820 --> 00:20:22,870
be writing thousands<font color="#CCCCCC"> if not tens of</font>

561
00:20:20,560 --> 00:20:25,270
thousands<font color="#E5E5E5"> of lines of code</font><font color="#CCCCCC"> it is not fun</font>

562
00:20:22,870 --> 00:20:27,100
so<font color="#CCCCCC"> there</font><font color="#E5E5E5"> are times when you</font><font color="#CCCCCC"> actually</font>

563
00:20:25,270 --> 00:20:28,300
want to ask the operating<font color="#CCCCCC"> system to help</font>

564
00:20:27,100 --> 00:20:31,540
<font color="#E5E5E5">you a little</font><font color="#CCCCCC"> bit even</font><font color="#E5E5E5"> though you're</font>

565
00:20:28,300 --> 00:20:32,919
writing in<font color="#CCCCCC"> x86 assembly</font><font color="#E5E5E5"> so in Linux we</font>

566
00:20:31,540 --> 00:20:34,620
do that through what are called<font color="#E5E5E5"> sis</font>

567
00:20:32,920 --> 00:20:37,870
calls or<font color="#CCCCCC"> into ATS</font>

568
00:20:34,620 --> 00:20:40,000
so sis calls<font color="#CCCCCC"> ask the Linux kernel to</font>

569
00:20:37,870 --> 00:20:41,260
help you out<font color="#E5E5E5"> so a Linux kernel can you</font>

570
00:20:40,000 --> 00:20:43,120
actually<font color="#E5E5E5"> do a basic piece</font><font color="#CCCCCC"> of</font>

571
00:20:41,260 --> 00:20:44,620
functionality<font color="#E5E5E5"> for me so I'm</font><font color="#CCCCCC"> gonna</font>

572
00:20:43,120 --> 00:20:46,510
<font color="#E5E5E5">introduce the two that we need for</font><font color="#CCCCCC"> a</font>

573
00:20:44,620 --> 00:20:48,459
hello world<font color="#CCCCCC"> but I've given</font><font color="#E5E5E5"> you the links</font>

574
00:20:46,510 --> 00:20:50,650
here<font color="#CCCCCC"> to</font><font color="#E5E5E5"> look at other system calls that</font>

575
00:20:48,460 --> 00:20:53,230
you can easily invoke from x86 assembly

576
00:20:50,650 --> 00:20:56,080
<font color="#E5E5E5">to ask the Linux kernel to do things for</font>

577
00:20:53,230 --> 00:20:57,760
you<font color="#CCCCCC"> so the first one you need to</font><font color="#E5E5E5"> know is</font>

578
00:20:56,080 --> 00:21:00,189
<font color="#CCCCCC">assists right when we're writing hello</font>

579
00:20:57,760 --> 00:21:02,590
world<font color="#E5E5E5"> if I actually try</font><font color="#CCCCCC"> to write the</font>

580
00:21:00,190 --> 00:21:04,060
<font color="#E5E5E5">text hello world to the screen I can do</font>

581
00:21:02,590 --> 00:21:06,159
it in pure assembly but we're<font color="#E5E5E5"> talking</font>

582
00:21:04,060 --> 00:21:07,929
tens of thousands of lines<font color="#CCCCCC"> mate that one</font>

583
00:21:06,160 --> 00:21:09,850
<font color="#E5E5E5">may be hundreds of thousands so I'd</font>

584
00:21:07,930 --> 00:21:13,120
rather<font color="#E5E5E5"> ask the operating system</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> help</font>

585
00:21:09,850 --> 00:21:15,520
me<font color="#E5E5E5"> out using</font><font color="#CCCCCC"> assist the way you do that</font>

586
00:21:13,120 --> 00:21:17,709
is you<font color="#CCCCCC"> have to</font><font color="#E5E5E5"> preload particular values</font>

587
00:21:15,520 --> 00:21:19,720
into the appropriate registers and then

588
00:21:17,710 --> 00:21:22,060
<font color="#E5E5E5">invoke the operating system so for</font>

589
00:21:19,720 --> 00:21:23,830
assist right<font color="#CCCCCC"> I have</font><font color="#E5E5E5"> to get a four into</font>

590
00:21:22,060 --> 00:21:25,450
EAX<font color="#CCCCCC"> so that's how I tell the Linux</font>

591
00:21:23,830 --> 00:21:28,330
kernel that<font color="#E5E5E5"> I want to assist</font><font color="#CCCCCC"> write</font><font color="#E5E5E5"> its</font>

592
00:21:25,450 --> 00:21:30,340
function number four in the<font color="#CCCCCC"> EBX</font><font color="#E5E5E5"> I put a</font>

593
00:21:28,330 --> 00:21:32,050
<font color="#CCCCCC">one which is telling</font><font color="#E5E5E5"> it to write out to</font>

594
00:21:30,340 --> 00:21:35,260
the console<font color="#CCCCCC"> so this will write out to a</font>

595
00:21:32,050 --> 00:21:37,750
terminal<font color="#E5E5E5"> in ECX I'm going to put the</font>

596
00:21:35,260 --> 00:21:40,930
string I want it to write and in EDX I

597
00:21:37,750 --> 00:21:43,030
put the length of the string so<font color="#CCCCCC"> an</font>

598
00:21:40,930 --> 00:21:44,710
example<font color="#E5E5E5"> of that that would write out to</font>

599
00:21:43,030 --> 00:21:46,180
the thing and then the int<font color="#CCCCCC"> xat is the</font>

600
00:21:44,710 --> 00:21:48,550
thing that<font color="#E5E5E5"> says all right Linux kernel</font>

601
00:21:46,180 --> 00:21:50,050
do what I just<font color="#CCCCCC"> asked</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> to so an</font><font color="#E5E5E5"> int</font><font color="#CCCCCC"> 80</font>

602
00:21:48,550 --> 00:21:52,360
is how you<font color="#E5E5E5"> actually invoke the kernel</font>

603
00:21:50,050 --> 00:21:53,680
this this exit is<font color="#E5E5E5"> the other one so if</font>

604
00:21:52,360 --> 00:21:55,240
<font color="#E5E5E5">you want to</font><font color="#CCCCCC"> actually exit cleanly from</font>

605
00:21:53,680 --> 00:21:57,190
<font color="#E5E5E5">your application</font><font color="#CCCCCC"> you don't</font><font color="#E5E5E5"> want your</font>

606
00:21:55,240 --> 00:21:58,810
assembly to just stop<font color="#E5E5E5"> you want to tell</font>

607
00:21:57,190 --> 00:22:01,810
the kernel hey I'm actually<font color="#E5E5E5"> done clean</font>

608
00:21:58,810 --> 00:22:04,060
up this<font color="#CCCCCC"> process</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> that's this exit</font><font color="#E5E5E5"> is</font>

609
00:22:01,810 --> 00:22:05,710
how you do<font color="#E5E5E5"> that so putting it all</font>

610
00:22:04,060 --> 00:22:07,179
together<font color="#CCCCCC"> I won't</font><font color="#E5E5E5"> go through this</font><font color="#CCCCCC"> in</font>

611
00:22:05,710 --> 00:22:08,590
detail<font color="#CCCCCC"> but again this is here</font><font color="#E5E5E5"> for the</font>

612
00:22:07,180 --> 00:22:10,960
video<font color="#CCCCCC"> so if you</font><font color="#E5E5E5"> are going to start</font>

613
00:22:08,590 --> 00:22:11,909
writing<font color="#CCCCCC"> x86 assembly this</font><font color="#E5E5E5"> is how you</font>

614
00:22:10,960 --> 00:22:13,860
will<font color="#E5E5E5"> want to set</font><font color="#CCCCCC"> up</font><font color="#E5E5E5"> your</font>

615
00:22:11,910 --> 00:22:15,480
file<font color="#E5E5E5"> everything you see in black</font><font color="#CCCCCC"> our</font>

616
00:22:13,860 --> 00:22:18,389
<font color="#E5E5E5">keywords that you actually need</font><font color="#CCCCCC"> to have</font>

617
00:22:15,480 --> 00:22:20,610
<font color="#E5E5E5">in your file</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> then where you see code</font>

618
00:22:18,390 --> 00:22:22,080
goes here<font color="#E5E5E5"> variables go there that's</font>

619
00:22:20,610 --> 00:22:25,320
where you would<font color="#CCCCCC"> put your code</font><font color="#E5E5E5"> that's</font>

620
00:22:22,080 --> 00:22:26,820
where you put<font color="#E5E5E5"> your variables</font><font color="#CCCCCC"> this is</font>

621
00:22:25,320 --> 00:22:28,980
<font color="#CCCCCC">just showing you examples</font><font color="#E5E5E5"> of how you</font>

622
00:22:26,820 --> 00:22:31,110
<font color="#CCCCCC">declare variables</font><font color="#E5E5E5"> so how you would</font>

623
00:22:28,980 --> 00:22:34,020
declare<font color="#E5E5E5"> in strings anything that you</font>

624
00:22:31,110 --> 00:22:36,540
might<font color="#CCCCCC"> need</font><font color="#E5E5E5"> in your code then putting it</font>

625
00:22:34,020 --> 00:22:38,820
all<font color="#E5E5E5"> together</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> this is how you're going</font>

626
00:22:36,540 --> 00:22:41,159
to<font color="#E5E5E5"> actually build x86 assembly and Linux</font>

627
00:22:38,820 --> 00:22:42,480
<font color="#E5E5E5">so I told you we were gonna use NASM so</font>

628
00:22:41,160 --> 00:22:45,900
you're gonna invoke it with that first

629
00:22:42,480 --> 00:22:48,300
line there<font color="#CCCCCC"> NASM</font><font color="#E5E5E5"> FF FF is telling you elf</font>

630
00:22:45,900 --> 00:22:49,830
<font color="#E5E5E5">is the executable format for Linux</font><font color="#CCCCCC"> so</font>

631
00:22:48,300 --> 00:22:52,620
you<font color="#CCCCCC"> are saying build me something that</font>

632
00:22:49,830 --> 00:22:54,480
can<font color="#E5E5E5"> execute in Linux and then linking it</font>

633
00:22:52,620 --> 00:22:56,070
together is how you actually<font color="#E5E5E5"> then link</font>

634
00:22:54,480 --> 00:22:58,050
it<font color="#E5E5E5"> so the operating system knows how to</font>

635
00:22:56,070 --> 00:23:01,530
find all of<font color="#E5E5E5"> the calls it was using and</font>

636
00:22:58,050 --> 00:23:05,520
then the dot dot slash is how you<font color="#E5E5E5"> would</font>

637
00:23:01,530 --> 00:23:08,250
<font color="#E5E5E5">run any executable so that's just</font>

638
00:23:05,520 --> 00:23:11,580
<font color="#E5E5E5">putting it in</font><font color="#CCCCCC"> more detail what NASM is</font>

639
00:23:08,250 --> 00:23:13,500
doing with that<font color="#E5E5E5"> command the linker</font><font color="#CCCCCC"> you</font>

640
00:23:11,580 --> 00:23:17,610
are telling it<font color="#CCCCCC"> to link this with x86</font>

641
00:23:13,500 --> 00:23:19,080
<font color="#E5E5E5">that's what the</font><font color="#CCCCCC"> ml5 386 is doing if you</font>

642
00:23:17,610 --> 00:23:21,300
want to disassemble it so you want to

643
00:23:19,080 --> 00:23:23,669
see what you actually<font color="#CCCCCC"> built object dump</font>

644
00:23:21,300 --> 00:23:25,830
is built<font color="#CCCCCC"> into all</font><font color="#E5E5E5"> Linux distributions so</font>

645
00:23:23,670 --> 00:23:28,200
you will do the -<font color="#CCCCCC"> D - tell it to dump</font>

646
00:23:25,830 --> 00:23:30,179
the code<font color="#CCCCCC"> in</font><font color="#E5E5E5"> data section and - M Intel</font>

647
00:23:28,200 --> 00:23:32,340
tells it to<font color="#CCCCCC"> dump it in Intel syntax</font>

648
00:23:30,180 --> 00:23:34,320
because<font color="#E5E5E5"> none</font><font color="#CCCCCC"> of these tools</font><font color="#E5E5E5"> agree with</font>

649
00:23:32,340 --> 00:23:37,590
each other so object dump defaults to

650
00:23:34,320 --> 00:23:40,379
AT&T syntax<font color="#CCCCCC"> NASM defaults Intel syntax</font>

651
00:23:37,590 --> 00:23:41,970
so you need the<font color="#CCCCCC"> EM Intel you</font><font color="#E5E5E5"> can throw</font>

652
00:23:40,380 --> 00:23:43,530
this on a make file so here's a sample

653
00:23:41,970 --> 00:23:47,640
make file so<font color="#E5E5E5"> you don't to type that</font><font color="#CCCCCC"> out</font>

654
00:23:43,530 --> 00:23:50,100
every<font color="#E5E5E5"> time</font><font color="#CCCCCC"> if you do these -</font><font color="#E5E5E5"> geez</font>

655
00:23:47,640 --> 00:23:51,870
we'll add debug symbols<font color="#E5E5E5"> into your x86 so</font>

656
00:23:50,100 --> 00:23:53,760
if you are writing assembly to debug it

657
00:23:51,870 --> 00:23:55,649
yourself to learn better put the -<font color="#E5E5E5"> geez</font>

658
00:23:53,760 --> 00:23:57,330
and<font color="#E5E5E5"> that will leave the debug symbols so</font>

659
00:23:55,650 --> 00:23:59,790
it's easier for<font color="#E5E5E5"> you to look at what got</font>

660
00:23:57,330 --> 00:24:01,620
actually built<font color="#E5E5E5"> and then here is a hello</font>

661
00:23:59,790 --> 00:24:03,930
world application<font color="#E5E5E5"> so when you get home</font>

662
00:24:01,620 --> 00:24:06,989
pull up this<font color="#E5E5E5"> video or take a screen shot</font>

663
00:24:03,930 --> 00:24:09,360
really<font color="#E5E5E5"> quick</font><font color="#CCCCCC"> and if you write this</font><font color="#E5E5E5"> into</font>

664
00:24:06,990 --> 00:24:11,100
an awesome file<font color="#E5E5E5"> build it with the</font><font color="#CCCCCC"> NASM</font>

665
00:24:09,360 --> 00:24:14,090
and<font color="#CCCCCC"> Link it</font><font color="#E5E5E5"> this will actually print</font>

666
00:24:11,100 --> 00:24:14,090
hello world<font color="#E5E5E5"> to the screen</font>

667
00:24:16,400 --> 00:24:21,830
so that's<font color="#E5E5E5"> sort</font><font color="#CCCCCC"> of wrapping</font><font color="#E5E5E5"> it up a</font>

668
00:24:18,570 --> 00:24:25,439
really<font color="#E5E5E5"> quick crash</font><font color="#CCCCCC"> course into into x86</font>

669
00:24:21,830 --> 00:24:27,299
<font color="#E5E5E5">and I think a lot of people want to know</font>

670
00:24:25,440 --> 00:24:30,030
<font color="#E5E5E5">like well where do I go now</font>

671
00:24:27,299 --> 00:24:32,730
yeah can you<font color="#CCCCCC"> I</font><font color="#E5E5E5"> turn that down where do I</font>

672
00:24:30,030 --> 00:24:33,658
go from from here one thing<font color="#E5E5E5"> I find when</font>

673
00:24:32,730 --> 00:24:35,429
a lot<font color="#E5E5E5"> of people are starting</font><font color="#CCCCCC"> out with</font>

674
00:24:33,659 --> 00:24:36,750
<font color="#CCCCCC">low-level assembly</font><font color="#E5E5E5"> is they they don't</font>

675
00:24:35,429 --> 00:24:39,780
<font color="#E5E5E5">really</font><font color="#CCCCCC"> appreciate the power</font><font color="#E5E5E5"> of it and</font>

676
00:24:36,750 --> 00:24:41,880
and what you can do with it the fact<font color="#E5E5E5"> is</font>

677
00:24:39,780 --> 00:24:43,230
<font color="#CCCCCC">like x86 is</font><font color="#E5E5E5"> turing-complete</font><font color="#CCCCCC"> it's as</font>

678
00:24:41,880 --> 00:24:44,610
<font color="#E5E5E5">powerful as any other programming</font>

679
00:24:43,230 --> 00:24:46,530
language<font color="#CCCCCC"> that we might use it a how</font><font color="#E5E5E5"> to</font>

680
00:24:44,610 --> 00:24:48,389
at a much higher<font color="#CCCCCC"> level we do anything</font><font color="#E5E5E5"> in</font>

681
00:24:46,530 --> 00:24:51,059
x86 that we could in<font color="#E5E5E5"> any other</font><font color="#CCCCCC"> language</font>

682
00:24:48,390 --> 00:24:54,059
and<font color="#CCCCCC"> sort</font><font color="#E5E5E5"> of as a as</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> way of</font><font color="#CCCCCC"> pointing</font>

683
00:24:51,059 --> 00:24:55,649
that out I'm a<font color="#E5E5E5"> 90s kid</font><font color="#CCCCCC"> I spent a lot of</font>

684
00:24:54,059 --> 00:24:58,490
time<font color="#E5E5E5"> playing roller coaster tycoon this</font>

685
00:24:55,650 --> 00:25:01,650
game was written<font color="#E5E5E5"> in</font><font color="#CCCCCC"> 99%</font><font color="#E5E5E5"> directly in x86</font>

686
00:24:58,490 --> 00:25:04,320
<font color="#E5E5E5">assembly it made hundreds of millions</font><font color="#CCCCCC"> of</font>

687
00:25:01,650 --> 00:25:05,909
<font color="#E5E5E5">dollars</font><font color="#CCCCCC"> so you know it's a kind of a</font>

688
00:25:04,320 --> 00:25:09,389
<font color="#E5E5E5">jumping off point I</font><font color="#CCCCCC"> think the best way</font>

689
00:25:05,909 --> 00:25:10,200
to learn<font color="#E5E5E5"> more</font><font color="#CCCCCC"> is to</font><font color="#E5E5E5"> basically just start</font>

690
00:25:09,390 --> 00:25:11,970
with the<font color="#E5E5E5"> building blocks</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> we</font>

691
00:25:10,200 --> 00:25:15,150
<font color="#E5E5E5">discussed today</font><font color="#CCCCCC"> and start</font><font color="#E5E5E5"> trying</font><font color="#CCCCCC"> to add</font>

692
00:25:11,970 --> 00:25:17,669
your own<font color="#E5E5E5"> additions just start using it</font>

693
00:25:15,150 --> 00:25:19,350
to<font color="#E5E5E5"> build tiny programs start tearing</font>

694
00:25:17,669 --> 00:25:21,750
apart<font color="#E5E5E5"> other people's programs see how</font>

695
00:25:19,350 --> 00:25:24,149
they work that's sort of the way to

696
00:25:21,750 --> 00:25:25,799
improve your<font color="#CCCCCC"> knowledge of</font><font color="#E5E5E5"> this and again</font>

697
00:25:24,150 --> 00:25:28,020
like I said<font color="#E5E5E5"> sort of the sky's the limit</font>

698
00:25:25,799 --> 00:25:29,639
<font color="#CCCCCC">with what you can what you</font><font color="#E5E5E5"> can do with</font>

699
00:25:28,020 --> 00:25:31,350
<font color="#E5E5E5">this so I hope this</font><font color="#CCCCCC"> is a I hope that's</font>

700
00:25:29,640 --> 00:25:34,909
been<font color="#CCCCCC"> helpful</font><font color="#E5E5E5"> and we're out of time</font><font color="#CCCCCC"> now</font>

701
00:25:31,350 --> 00:25:34,908
but<font color="#E5E5E5"> I thank you everybody for attending</font>

702
00:25:39,049 --> 00:25:41,110
<font color="#E5E5E5">you</font>

