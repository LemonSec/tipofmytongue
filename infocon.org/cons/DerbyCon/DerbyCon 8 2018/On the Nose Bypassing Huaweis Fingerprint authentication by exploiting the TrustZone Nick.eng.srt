1
00:00:14,809 --> 00:00:23,460
<font color="#E5E5E5">okay hello my name is Nick if all name</font>

2
00:00:20,939 --> 00:00:25,859
is Nick Stevens<font color="#CCCCCC"> uh I'm</font><font color="#E5E5E5"> gonna be talking</font>

3
00:00:23,460 --> 00:00:28,380
about<font color="#E5E5E5"> a number</font><font color="#CCCCCC"> of trust zone bugs in</font>

4
00:00:25,859 --> 00:00:30,240
<font color="#CCCCCC">Huawei phones</font><font color="#E5E5E5"> also just normal</font><font color="#CCCCCC"> Huawei</font>

5
00:00:28,380 --> 00:00:32,009
kernel bugs<font color="#E5E5E5"> if you don't know what</font>

6
00:00:30,240 --> 00:00:33,899
Huawei<font color="#CCCCCC"> is it's okay I'm gonna</font><font color="#E5E5E5"> talk</font><font color="#CCCCCC"> about</font>

7
00:00:32,009 --> 00:00:35,880
in just a second<font color="#CCCCCC"> I also want to</font><font color="#E5E5E5"> briefly</font>

8
00:00:33,899 --> 00:00:37,469
apologize for the<font color="#E5E5E5"> the program just has</font>

9
00:00:35,880 --> 00:00:39,450
my bio as<font color="#E5E5E5"> the description of this talk</font>

10
00:00:37,469 --> 00:00:41,790
<font color="#E5E5E5">I'm not gonna be talking about myself</font>

11
00:00:39,450 --> 00:00:43,260
I'm<font color="#E5E5E5"> gonna be talking about actual</font>

12
00:00:41,790 --> 00:00:44,969
technical work so I'm<font color="#E5E5E5"> sorry if anyone's</font>

13
00:00:43,260 --> 00:00:47,149
confused by that<font color="#E5E5E5"> I don't know how</font><font color="#CCCCCC"> that</font>

14
00:00:44,969 --> 00:00:51,300
happened

15
00:00:47,149 --> 00:00:54,120
so the first<font color="#CCCCCC"> little</font><font color="#E5E5E5"> bit about me</font><font color="#CCCCCC"> i play</font>

16
00:00:51,300 --> 00:00:56,360
<font color="#CCCCCC">on</font><font color="#E5E5E5"> the shellfish etf team from familiar</font>

17
00:00:54,120 --> 00:00:59,519
with CTF it stands for capture the flag

18
00:00:56,360 --> 00:01:01,680
<font color="#CCCCCC">it's like a hacking competition</font><font color="#E5E5E5"> but more</font>

19
00:00:59,520 --> 00:01:03,710
<font color="#E5E5E5">focused on actual exploit development</font>

20
00:01:01,680 --> 00:01:08,180
and<font color="#E5E5E5"> software vulnerability finding</font>

21
00:01:03,710 --> 00:01:10,530
<font color="#CCCCCC">unless so about like a</font><font color="#E5E5E5"> pen testing</font><font color="#CCCCCC"> I</font>

22
00:01:08,180 --> 00:01:12,930
also worked on<font color="#CCCCCC"> the cyber</font><font color="#E5E5E5"> brain challenge</font>

23
00:01:10,530 --> 00:01:15,720
which<font color="#CCCCCC"> is another</font><font color="#E5E5E5"> thing that's similar</font><font color="#CCCCCC"> to</font>

24
00:01:12,930 --> 00:01:17,759
a CTF but it was run by DARPA which is

25
00:01:15,720 --> 00:01:21,360
the defense advanced<font color="#E5E5E5"> research programs</font>

26
00:01:17,759 --> 00:01:23,280
agency or<font color="#E5E5E5"> something</font><font color="#CCCCCC"> they ran a</font>

27
00:01:21,360 --> 00:01:25,470
<font color="#CCCCCC">competition to see who could write an</font>

28
00:01:23,280 --> 00:01:27,240
automated hacking tool<font color="#CCCCCC"> tool I could find</font>

29
00:01:25,470 --> 00:01:28,770
bugs automatically and automatically

30
00:01:27,240 --> 00:01:30,929
<font color="#E5E5E5">where exploits for the bugs it found so</font>

31
00:01:28,770 --> 00:01:33,240
it was sort<font color="#CCCCCC"> of called the self-driving</font>

32
00:01:30,930 --> 00:01:35,700
<font color="#E5E5E5">car equivalent of hacking so it worked a</font>

33
00:01:33,240 --> 00:01:36,990
lot on<font color="#E5E5E5"> that with shellfish as well</font><font color="#CCCCCC"> and</font>

34
00:01:35,700 --> 00:01:40,799
then also<font color="#E5E5E5"> we publish a number</font><font color="#CCCCCC"> of</font>

35
00:01:36,990 --> 00:01:42,329
research<font color="#E5E5E5"> papers on subjects like</font>

36
00:01:40,799 --> 00:01:44,549
<font color="#E5E5E5">automated bug finding and automating</font>

37
00:01:42,329 --> 00:01:46,289
exploitation and also<font color="#E5E5E5"> I published in</font>

38
00:01:44,549 --> 00:01:47,579
papers on<font color="#E5E5E5"> Android bugs and just trust</font>

39
00:01:46,290 --> 00:01:48,479
them bugs in general and the kind of

40
00:01:47,579 --> 00:01:50,610
<font color="#E5E5E5">problems that</font><font color="#CCCCCC"> trustzone</font>

41
00:01:48,479 --> 00:01:51,539
<font color="#E5E5E5">introduced and I'm in</font><font color="#CCCCCC"> familiar with any</font>

42
00:01:50,610 --> 00:01:52,829
<font color="#E5E5E5">of these things like trust</font><font color="#CCCCCC"> owned I'm</font>

43
00:01:51,540 --> 00:01:55,350
<font color="#CCCCCC">gonna</font><font color="#E5E5E5"> be talking</font><font color="#CCCCCC"> about them and</font>

44
00:01:52,829 --> 00:01:57,240
introducing them to<font color="#E5E5E5"> you</font><font color="#CCCCCC"> in general just</font>

45
00:01:55,350 --> 00:02:02,130
<font color="#E5E5E5">played a lot of CTF and now I currently</font>

46
00:01:57,240 --> 00:02:04,229
<font color="#E5E5E5">work for</font><font color="#CCCCCC"> Rieti on CSI as</font><font color="#E5E5E5"> a vulnerability</font>

47
00:02:02,130 --> 00:02:05,850
researcher<font color="#CCCCCC"> you may have actually</font><font color="#E5E5E5"> heard</font>

48
00:02:04,229 --> 00:02:07,380
of<font color="#E5E5E5"> us before we</font><font color="#CCCCCC"> used</font><font color="#E5E5E5"> to go by</font><font color="#CCCCCC"> that law</font>

49
00:02:05,850 --> 00:02:09,660
different names such as<font color="#E5E5E5"> breaking on</font><font color="#CCCCCC"> si</font>

50
00:02:07,380 --> 00:02:12,549
<font color="#CCCCCC">Gove's and recount</font><font color="#E5E5E5"> COI</font><font color="#CCCCCC"> and now it's si</font>

51
00:02:09,660 --> 00:02:15,370
<font color="#CCCCCC">si you can just call it Raytheon</font>

52
00:02:12,550 --> 00:02:17,320
and I do this<font color="#E5E5E5"> kind of work</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> a living</font>

53
00:02:15,370 --> 00:02:20,160
them<font color="#CCCCCC"> at</font><font color="#E5E5E5"> present if you're interested</font>

54
00:02:17,320 --> 00:02:22,959
please<font color="#E5E5E5"> let</font><font color="#CCCCCC"> me know we're always hiring</font>

55
00:02:20,160 --> 00:02:25,090
<font color="#CCCCCC">so first of all the</font><font color="#E5E5E5"> goal of this talk is</font>

56
00:02:22,960 --> 00:02:27,640
<font color="#CCCCCC">to demonstrate</font><font color="#E5E5E5"> a way to completely</font>

57
00:02:25,090 --> 00:02:30,840
compromise the<font color="#CCCCCC"> huawei p9 now the what</font>

58
00:02:27,640 --> 00:02:33,250
wall way is a Chinese phone manufacturer

59
00:02:30,840 --> 00:02:34,750
<font color="#CCCCCC">they're not very popular in</font><font color="#E5E5E5"> the States</font>

60
00:02:33,250 --> 00:02:36,430
<font color="#CCCCCC">so</font><font color="#E5E5E5"> if you haven't</font><font color="#CCCCCC"> heard of them don't</font>

61
00:02:34,750 --> 00:02:38,020
worry<font color="#CCCCCC"> they actually have a very</font>

62
00:02:36,430 --> 00:02:39,730
<font color="#E5E5E5">difficult time entering the US market</font>

63
00:02:38,020 --> 00:02:41,410
because<font color="#CCCCCC"> of natural</font><font color="#E5E5E5"> national security</font>

64
00:02:39,730 --> 00:02:43,090
concerns<font color="#CCCCCC"> they're all you can find</font><font color="#E5E5E5"> them</font>

65
00:02:41,410 --> 00:02:45,790
in the news about once a<font color="#E5E5E5"> year they often</font>

66
00:02:43,090 --> 00:02:47,530
<font color="#E5E5E5">get in trouble</font><font color="#CCCCCC"> but besides</font><font color="#E5E5E5"> leaking</font>

67
00:02:45,790 --> 00:02:49,440
phones what they also do is<font color="#CCCCCC"> they'll make</font>

68
00:02:47,530 --> 00:02:53,100
<font color="#E5E5E5">network equipment and sell that to other</font>

69
00:02:49,440 --> 00:02:55,630
<font color="#E5E5E5">countries</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> u.s.</font><font color="#E5E5E5"> finds unsavory</font>

70
00:02:53,100 --> 00:02:57,519
<font color="#CCCCCC">now this is a pretty interesting target</font>

71
00:02:55,630 --> 00:03:01,030
because they don't actually see as<font color="#E5E5E5"> much</font>

72
00:02:57,520 --> 00:03:04,450
public<font color="#E5E5E5"> scrutiny</font><font color="#CCCCCC"> so I decided to</font><font color="#E5E5E5"> look for</font>

73
00:03:01,030 --> 00:03:05,500
bugs in<font color="#E5E5E5"> it as an exercise so what we're</font>

74
00:03:04,450 --> 00:03:07,299
going<font color="#E5E5E5"> to do is going to start from an</font>

75
00:03:05,500 --> 00:03:08,560
untrusted<font color="#E5E5E5"> app on your phone</font><font color="#CCCCCC"> and</font>

76
00:03:07,300 --> 00:03:11,320
<font color="#CCCCCC">completely</font><font color="#E5E5E5"> compromise something called</font>

77
00:03:08,560 --> 00:03:13,120
the<font color="#CCCCCC"> t twe which stands for</font><font color="#E5E5E5"> the trusted</font>

78
00:03:11,320 --> 00:03:15,130
<font color="#CCCCCC">execution environment</font><font color="#E5E5E5"> now this is</font>

79
00:03:13,120 --> 00:03:16,780
<font color="#CCCCCC">actually a</font><font color="#E5E5E5"> special operating context on</font>

80
00:03:15,130 --> 00:03:18,340
your phone<font color="#CCCCCC"> that meaningful don't know</font>

81
00:03:16,780 --> 00:03:19,750
<font color="#CCCCCC">about it's it's pretty</font><font color="#E5E5E5"> different than</font>

82
00:03:18,340 --> 00:03:21,490
<font color="#E5E5E5">what most of my familiar with when it</font>

83
00:03:19,750 --> 00:03:24,280
<font color="#CCCCCC">comes to security architectures and</font><font color="#E5E5E5"> it's</font>

84
00:03:21,490 --> 00:03:27,400
between<font color="#CCCCCC"> link</font><font color="#E5E5E5"> ring zero and ring one</font><font color="#CCCCCC"> ring</font>

85
00:03:24,280 --> 00:03:28,750
<font color="#E5E5E5">three excuse me but because</font><font color="#CCCCCC"> of the</font>

86
00:03:27,400 --> 00:03:32,470
number of sensitive operations that take

87
00:03:28,750 --> 00:03:33,970
<font color="#CCCCCC">place on our smart phones</font><font color="#E5E5E5"> are armed in</font>

88
00:03:32,470 --> 00:03:35,650
particular and mobile manufacturers<font color="#CCCCCC"> that</font>

89
00:03:33,970 --> 00:03:38,140
<font color="#E5E5E5">general have introduced more security</font>

90
00:03:35,650 --> 00:03:39,340
<font color="#E5E5E5">mitigations to stop roots from being</font>

91
00:03:38,140 --> 00:03:41,890
able to completely steal<font color="#CCCCCC"> all your</font>

92
00:03:39,340 --> 00:03:43,570
<font color="#E5E5E5">information so all your sensitive</font>

93
00:03:41,890 --> 00:03:46,329
fingerprint data is actually stored in

94
00:03:43,570 --> 00:03:48,609
the<font color="#E5E5E5"> T on an Android phone and</font><font color="#CCCCCC"> Huawei</font>

95
00:03:46,330 --> 00:03:49,570
store has a fingerprint<font color="#CCCCCC"> agents which</font>

96
00:03:48,610 --> 00:03:52,380
<font color="#E5E5E5">we'll get to in</font><font color="#CCCCCC"> a minute and</font><font color="#E5E5E5"> tell you</font>

97
00:03:49,570 --> 00:03:55,630
how that<font color="#E5E5E5"> works and</font><font color="#CCCCCC"> just for a background</font>

98
00:03:52,380 --> 00:03:56,890
<font color="#E5E5E5">an untrusted app and in this context is</font>

99
00:03:55,630 --> 00:04:00,460
an app<font color="#E5E5E5"> you just install off your phone</font>

100
00:03:56,890 --> 00:04:04,299
from<font color="#E5E5E5"> the Play Store I assume that it has</font>

101
00:04:00,460 --> 00:04:05,770
<font color="#E5E5E5">no special permissions</font><font color="#CCCCCC"> you know</font>

102
00:04:04,300 --> 00:04:07,660
oftentimes<font color="#CCCCCC"> you someone snappin for you</font>

103
00:04:05,770 --> 00:04:10,330
guys have seen it asking for like access

104
00:04:07,660 --> 00:04:13,120
to<font color="#CCCCCC"> logs or contacts</font><font color="#E5E5E5"> so none</font><font color="#CCCCCC"> of that has</font>

105
00:04:10,330 --> 00:04:14,380
<font color="#CCCCCC">been enabled and if</font><font color="#E5E5E5"> you're no Android at</font>

106
00:04:13,120 --> 00:04:16,660
all<font color="#E5E5E5"> you also know the untrusted app is</font>

107
00:04:14,380 --> 00:04:19,000
the name<font color="#E5E5E5"> of the</font><font color="#CCCCCC"> selinux context which in</font>

108
00:04:16,660 --> 00:04:21,940
half is installed for so it's a bit a

109
00:04:19,000 --> 00:04:24,830
<font color="#E5E5E5">little bit in a sandbox</font><font color="#CCCCCC"> so we're</font><font color="#E5E5E5"> going</font>

110
00:04:21,940 --> 00:04:26,210
<font color="#CCCCCC">to be starting</font><font color="#E5E5E5"> from</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> sandbox so</font>

111
00:04:24,830 --> 00:04:27,770
<font color="#CCCCCC">I had talked about</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> new security</font>

112
00:04:26,210 --> 00:04:28,849
<font color="#CCCCCC">maintenance this</font><font color="#E5E5E5"> is kind of what it</font>

113
00:04:27,770 --> 00:04:32,479
<font color="#CCCCCC">looks like</font><font color="#E5E5E5"> broken down into different</font>

114
00:04:28,849 --> 00:04:35,479
trust boundaries<font color="#E5E5E5"> so on Android</font><font color="#CCCCCC"> you have</font>

115
00:04:32,479 --> 00:04:37,219
your your<font color="#E5E5E5"> four components all right</font>

116
00:04:35,479 --> 00:04:39,710
you have your<font color="#E5E5E5"> normal user land where</font><font color="#CCCCCC"> all</font>

117
00:04:37,219 --> 00:04:41,810
your apps<font color="#E5E5E5"> with is exception level zero</font>

118
00:04:39,710 --> 00:04:43,099
and there's another tacos<font color="#CCCCCC"> interaction</font>

119
00:04:41,810 --> 00:04:46,849
went over the<font color="#CCCCCC"> armed exception levels</font>

120
00:04:43,099 --> 00:04:49,069
<font color="#E5E5E5">these</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> kind of like rings and then</font>

121
00:04:46,849 --> 00:04:50,750
you have exception level one which is

122
00:04:49,069 --> 00:04:52,550
your kernel which<font color="#CCCCCC"> Android is kind of</font>

123
00:04:50,750 --> 00:04:54,229
like a<font color="#E5E5E5"> modified version of Linux</font><font color="#CCCCCC"> there's</font>

124
00:04:52,550 --> 00:04:56,780
<font color="#CCCCCC">a</font><font color="#E5E5E5"> few lines added in</font><font color="#CCCCCC"> networking</font><font color="#E5E5E5"> and</font>

125
00:04:54,229 --> 00:04:59,180
other things to enable certain Android

126
00:04:56,780 --> 00:05:01,190
security paradigms<font color="#CCCCCC"> but then there's sort</font>

127
00:04:59,180 --> 00:05:03,319
<font color="#E5E5E5">of this shadow world that the</font><font color="#CCCCCC"> T</font>

128
00:05:01,190 --> 00:05:06,080
implements which has its<font color="#E5E5E5"> own user land</font>

129
00:05:03,319 --> 00:05:08,240
<font color="#E5E5E5">and kernel land and</font><font color="#CCCCCC"> its own usual and it</font>

130
00:05:06,080 --> 00:05:10,550
has trusted<font color="#E5E5E5"> apps which</font><font color="#CCCCCC"> have the</font><font color="#E5E5E5"> secure</font>

131
00:05:08,240 --> 00:05:12,289
<font color="#CCCCCC">Stormin secure storage secure payment</font>

132
00:05:10,550 --> 00:05:14,870
has the biometric sensors<font color="#E5E5E5"> like the</font>

133
00:05:12,289 --> 00:05:17,779
<font color="#CCCCCC">fingerprint implements things like</font><font color="#E5E5E5"> DRM</font>

134
00:05:14,870 --> 00:05:22,669
<font color="#E5E5E5">things that we don't want our kernel to</font>

135
00:05:17,779 --> 00:05:24,080
have access<font color="#E5E5E5"> to so hypothetically the</font>

136
00:05:22,669 --> 00:05:26,000
kernel should<font color="#E5E5E5"> never have any insight</font>

137
00:05:24,080 --> 00:05:27,919
<font color="#CCCCCC">into the trusted apps even if you root</font>

138
00:05:26,000 --> 00:05:29,539
your<font color="#E5E5E5"> phone everything in the blue box</font>

139
00:05:27,919 --> 00:05:32,270
should<font color="#E5E5E5"> be out of</font><font color="#CCCCCC"> bounds for the</font><font color="#E5E5E5"> kernel</font>

140
00:05:29,539 --> 00:05:34,909
<font color="#E5E5E5">of course it can communicate with this</font>

141
00:05:32,270 --> 00:05:36,229
world<font color="#E5E5E5"> but otherwise would</font><font color="#CCCCCC"> be useless but</font>

142
00:05:34,909 --> 00:05:38,090
it doesn't have direct<font color="#CCCCCC"> access to</font><font color="#E5E5E5"> the</font>

143
00:05:36,229 --> 00:05:41,060
apps running<font color="#E5E5E5"> it like it does for</font><font color="#CCCCCC"> apps</font>

144
00:05:38,090 --> 00:05:42,349
like<font color="#CCCCCC"> Chrome or the Play Store and then</font>

145
00:05:41,060 --> 00:05:46,159
finally to support all these

146
00:05:42,349 --> 00:05:47,569
<font color="#CCCCCC">applications in the</font><font color="#E5E5E5"> security</font><font color="#CCCCCC"> l0 or the</font>

147
00:05:46,159 --> 00:05:50,150
trusted apps we need another<font color="#CCCCCC"> kernel</font>

148
00:05:47,569 --> 00:05:54,039
which can do things<font color="#E5E5E5"> like load apps</font><font color="#CCCCCC"> map</font>

149
00:05:50,150 --> 00:05:56,750
and memory and<font color="#CCCCCC"> support</font><font color="#E5E5E5"> things like</font><font color="#CCCCCC"> IPC</font>

150
00:05:54,039 --> 00:05:58,759
<font color="#E5E5E5">so here's how the expla is going to work</font>

151
00:05:56,750 --> 00:06:00,919
in general<font color="#CCCCCC"> uses a</font><font color="#E5E5E5"> road map we're going</font>

152
00:05:58,759 --> 00:06:02,150
to start executing<font color="#E5E5E5"> code in</font><font color="#CCCCCC"> use rule in</font>

153
00:06:00,919 --> 00:06:03,500
so that's<font color="#E5E5E5"> the assumption is every day of</font>

154
00:06:02,150 --> 00:06:06,289
code execution on the phone that's kind

155
00:06:03,500 --> 00:06:08,210
of a big assumption I know but just for

156
00:06:06,289 --> 00:06:09,759
<font color="#CCCCCC">academic person</font><font color="#E5E5E5"> purposes just please</font>

157
00:06:08,210 --> 00:06:11,989
accept it

158
00:06:09,759 --> 00:06:13,789
people do<font color="#CCCCCC"> have found bugs and</font><font color="#E5E5E5"> things at</font>

159
00:06:11,990 --> 00:06:16,580
<font color="#CCCCCC">Google Chrome and</font><font color="#E5E5E5"> Google Hangouts so</font>

160
00:06:13,789 --> 00:06:17,900
it's you can't<font color="#CCCCCC"> imagine that</font><font color="#E5E5E5"> if you want</font>

161
00:06:16,580 --> 00:06:20,330
to step further you do<font color="#E5E5E5"> spaghetti</font>

162
00:06:17,900 --> 00:06:22,758
executing code in<font color="#E5E5E5"> Chrome or hangouts or</font>

163
00:06:20,330 --> 00:06:24,859
a bug through one of those and then<font color="#CCCCCC"> you</font>

164
00:06:22,759 --> 00:06:27,050
can begin<font color="#E5E5E5"> at the stage of</font><font color="#CCCCCC"> this talk so</font>

165
00:06:24,860 --> 00:06:28,729
<font color="#CCCCCC">from usual end we're going to find a bug</font>

166
00:06:27,050 --> 00:06:31,009
in the kernel and<font color="#CCCCCC"> Huawei's kernel and</font>

167
00:06:28,729 --> 00:06:33,110
<font color="#E5E5E5">we're going to exploit</font><font color="#CCCCCC"> that that will be</font>

168
00:06:31,009 --> 00:06:35,899
a traditional<font color="#E5E5E5"> route that's just</font><font color="#CCCCCC"> two bugs</font>

169
00:06:33,110 --> 00:06:37,550
<font color="#E5E5E5">that I use</font><font color="#CCCCCC"> of an</font><font color="#E5E5E5"> exploit to get root on</font>

170
00:06:35,899 --> 00:06:37,990
<font color="#E5E5E5">the phone</font><font color="#CCCCCC"> and then once we get</font><font color="#E5E5E5"> rid of</font>

171
00:06:37,550 --> 00:06:39,190
the phone

172
00:06:37,990 --> 00:06:40,870
we're going to take<font color="#CCCCCC"> advantage of the</font>

173
00:06:39,190 --> 00:06:43,300
privileges that that gets us<font color="#CCCCCC"> to find a</font>

174
00:06:40,870 --> 00:06:45,250
bug and<font color="#E5E5E5"> trusted app and then we're going</font>

175
00:06:43,300 --> 00:06:48,190
<font color="#E5E5E5">to get code execution and one of the</font>

176
00:06:45,250 --> 00:06:49,450
trusted applications<font color="#CCCCCC"> from the trust</font><font color="#E5E5E5"> more</font>

177
00:06:48,190 --> 00:06:51,219
<font color="#E5E5E5">in the trusted applications we're going</font>

178
00:06:49,450 --> 00:06:53,740
to then go<font color="#CCCCCC"> one sit further</font><font color="#E5E5E5"> in filing a</font>

179
00:06:51,220 --> 00:06:56,350
code execution in the actual kernel<font color="#E5E5E5"> the</font>

180
00:06:53,740 --> 00:06:57,850
<font color="#E5E5E5">TOS and with the</font><font color="#CCCCCC"> tos code execution</font>

181
00:06:56,350 --> 00:07:00,340
we're gonna be able<font color="#E5E5E5"> to find this</font>

182
00:06:57,850 --> 00:07:01,480
fingerprint sensor<font color="#E5E5E5"> app so it's</font><font color="#CCCCCC"> another</font>

183
00:07:00,340 --> 00:07:02,500
application<font color="#E5E5E5"> that I actually didn't have</font>

184
00:07:01,480 --> 00:07:04,300
access<font color="#CCCCCC"> to and I'll talk a little bit</font>

185
00:07:02,500 --> 00:07:06,070
that later<font color="#CCCCCC"> we're gonna</font><font color="#E5E5E5"> find this</font>

186
00:07:04,300 --> 00:07:10,660
application<font color="#E5E5E5"> and patch it to accept any</font>

187
00:07:06,070 --> 00:07:13,810
fingerprint so a<font color="#E5E5E5"> little bit about more</font>

188
00:07:10,660 --> 00:07:17,530
about<font color="#CCCCCC"> Huawei</font><font color="#E5E5E5"> the team presentation is</font>

189
00:07:13,810 --> 00:07:20,080
<font color="#E5E5E5">actually entirely depends on your chips</font>

190
00:07:17,530 --> 00:07:22,650
and manufacturer so<font color="#E5E5E5"> Qualcomm</font><font color="#CCCCCC"> has their</font>

191
00:07:20,080 --> 00:07:25,780
own tea in Huawei also has their<font color="#E5E5E5"> own tea</font>

192
00:07:22,650 --> 00:07:26,859
<font color="#CCCCCC">now Huawei phones</font><font color="#E5E5E5"> very own which chips</font>

193
00:07:25,780 --> 00:07:31,510
that<font color="#E5E5E5"> they</font><font color="#CCCCCC"> actually use and this</font><font color="#E5E5E5"> has</font>

194
00:07:26,860 --> 00:07:33,820
something<font color="#E5E5E5"> to do</font><font color="#CCCCCC"> with like I</font><font color="#E5E5E5"> think</font>

195
00:07:31,510 --> 00:07:34,630
certain like<font color="#E5E5E5"> baseband or cell phone</font>

196
00:07:33,820 --> 00:07:38,230
stuff<font color="#E5E5E5"> they</font><font color="#CCCCCC"> don't really</font><font color="#E5E5E5"> know that much</font>

197
00:07:34,630 --> 00:07:39,520
about<font color="#E5E5E5"> but people are so many factors</font>

198
00:07:38,230 --> 00:07:40,840
will sometimes have<font color="#E5E5E5"> their own ship set</font>

199
00:07:39,520 --> 00:07:42,400
that they develop and sometimes they'll

200
00:07:40,840 --> 00:07:44,590
swap them around<font color="#CCCCCC"> so there are</font><font color="#E5E5E5"> a number</font>

201
00:07:42,400 --> 00:07:46,150
<font color="#CCCCCC">wall</font><font color="#E5E5E5"> in phones with Qualcomm but wall</font>

202
00:07:44,590 --> 00:07:47,739
<font color="#E5E5E5">way also has their</font><font color="#CCCCCC"> own ships</font><font color="#E5E5E5"> and</font>

203
00:07:46,150 --> 00:07:50,440
manufacturer called high silicon which I

204
00:07:47,740 --> 00:07:52,690
<font color="#E5E5E5">think they acquired in 2010 this is is a</font>

205
00:07:50,440 --> 00:07:55,480
<font color="#E5E5E5">Chinese chip manufacturer that they now</font>

206
00:07:52,690 --> 00:07:57,940
own and they now make the kerydin chip

207
00:07:55,480 --> 00:08:00,310
series<font color="#E5E5E5"> which a lot of Huawei phones now</font>

208
00:07:57,940 --> 00:08:03,790
use but still<font color="#CCCCCC"> not</font><font color="#E5E5E5"> all so the bugs that</font>

209
00:08:00,310 --> 00:08:06,100
must discuss<font color="#E5E5E5"> all affect the Korean</font><font color="#CCCCCC"> chip</font>

210
00:08:03,790 --> 00:08:07,540
<font color="#CCCCCC">Series and they've actually all been</font>

211
00:08:06,100 --> 00:08:11,650
disclosed as well this<font color="#E5E5E5"> is a disclaimer</font>

212
00:08:07,540 --> 00:08:15,210
<font color="#E5E5E5">and they do not affect all Android</font>

213
00:08:11,650 --> 00:08:18,340
<font color="#CCCCCC">phones by any means just huawei phones</font>

214
00:08:15,210 --> 00:08:20,919
so the<font color="#E5E5E5"> huawei trusted architecture kinda</font>

215
00:08:18,340 --> 00:08:22,390
looks<font color="#CCCCCC"> like this now the reason is is</font>

216
00:08:20,920 --> 00:08:24,760
there's a<font color="#E5E5E5"> fundamental question to answer</font>

217
00:08:22,390 --> 00:08:26,289
is how does a normal<font color="#E5E5E5"> app actually start</font>

218
00:08:24,760 --> 00:08:28,800
communicating<font color="#E5E5E5"> with the trust own and get</font>

219
00:08:26,290 --> 00:08:32,470
anything<font color="#CCCCCC"> meaningful out of it now the</font>

220
00:08:28,800 --> 00:08:35,740
first thing<font color="#CCCCCC"> that we</font><font color="#E5E5E5"> need</font><font color="#CCCCCC"> to know is how</font>

221
00:08:32,470 --> 00:08:37,570
does<font color="#E5E5E5"> the new world begin talking to it</font>

222
00:08:35,740 --> 00:08:39,370
how does<font color="#CCCCCC"> the kernel talk to</font><font color="#E5E5E5"> the trust</font>

223
00:08:37,570 --> 00:08:42,190
zone and there's a special<font color="#CCCCCC"> privilege</font>

224
00:08:39,370 --> 00:08:44,920
instruction known as SMC<font color="#CCCCCC"> I believe the</font>

225
00:08:42,190 --> 00:08:46,780
stands<font color="#CCCCCC"> for secure monitor</font><font color="#E5E5E5"> call that the</font>

226
00:08:44,920 --> 00:08:48,370
<font color="#E5E5E5">only the</font><font color="#CCCCCC"> kernel can issue to actually</font>

227
00:08:46,780 --> 00:08:50,620
make a request<font color="#CCCCCC"> and interrupt the trust</font>

228
00:08:48,370 --> 00:08:51,490
own kernel<font color="#E5E5E5"> so to handle this</font>

229
00:08:50,620 --> 00:08:52,720
<font color="#CCCCCC">Huawei</font>

230
00:08:51,490 --> 00:08:53,950
and<font color="#CCCCCC"> a number</font><font color="#E5E5E5"> of other transit</font>

231
00:08:52,720 --> 00:08:55,839
manufacturers that have<font color="#CCCCCC"> their own team</font>

232
00:08:53,950 --> 00:08:57,880
<font color="#E5E5E5">have a kernel driver which takes</font>

233
00:08:55,839 --> 00:09:00,220
requests from<font color="#E5E5E5"> user land and will issue</font>

234
00:08:57,880 --> 00:09:02,950
this<font color="#E5E5E5"> SMC instruction on their behalf</font><font color="#CCCCCC"> now</font>

235
00:09:00,220 --> 00:09:05,110
it gets kind of complicated<font color="#E5E5E5"> because the</font>

236
00:09:02,950 --> 00:09:06,580
curl<font color="#E5E5E5"> driver often wants to have some</font>

237
00:09:05,110 --> 00:09:09,670
<font color="#E5E5E5">form of session management between</font>

238
00:09:06,580 --> 00:09:12,130
<font color="#E5E5E5">itself and the</font><font color="#CCCCCC"> trust let's that talks</font><font color="#E5E5E5"> to</font>

239
00:09:09,670 --> 00:09:13,959
so<font color="#CCCCCC"> wall way an intent to</font><font color="#E5E5E5"> be</font><font color="#CCCCCC"> secured</font>

240
00:09:12,130 --> 00:09:16,209
actually has a number of<font color="#E5E5E5"> these trustless</font>

241
00:09:13,959 --> 00:09:18,520
on the right<font color="#CCCCCC"> implement their own form of</font>

242
00:09:16,209 --> 00:09:21,189
<font color="#CCCCCC">credential tracking so secure storage</font>

243
00:09:18,520 --> 00:09:22,540
<font color="#CCCCCC">can only</font><font color="#E5E5E5"> be spoken to by my file</font>

244
00:09:21,190 --> 00:09:23,620
management application<font color="#E5E5E5"> other</font>

245
00:09:22,540 --> 00:09:26,640
<font color="#E5E5E5">applications should not be allowed to</font>

246
00:09:23,620 --> 00:09:29,350
make<font color="#E5E5E5"> requests to it mighty a fingerprint</font>

247
00:09:26,640 --> 00:09:31,510
<font color="#CCCCCC">trust it should only</font><font color="#E5E5E5"> be spoken do by</font>

248
00:09:29,350 --> 00:09:33,880
fingerprint<font color="#CCCCCC"> D</font><font color="#E5E5E5"> the fingerprint daemon so</font>

249
00:09:31,510 --> 00:09:35,790
the kernel driver is going<font color="#E5E5E5"> to be passing</font>

250
00:09:33,880 --> 00:09:38,620
credentials<font color="#E5E5E5"> up to all these different</font>

251
00:09:35,790 --> 00:09:40,120
trust<font color="#CCCCCC"> le'ts and then those trusses</font><font color="#E5E5E5"> in</font>

252
00:09:38,620 --> 00:09:41,830
<font color="#CCCCCC">turn</font><font color="#E5E5E5"> and me checking this credentials</font>

253
00:09:40,120 --> 00:09:44,380
make sure they're correct<font color="#CCCCCC"> but</font><font color="#E5E5E5"> until we</font>

254
00:09:41,830 --> 00:09:46,480
compromise<font color="#E5E5E5"> the kernel bra can be able to</font>

255
00:09:44,380 --> 00:09:48,610
<font color="#CCCCCC">forge</font><font color="#E5E5E5"> any of those credentials</font><font color="#CCCCCC"> so once</font>

256
00:09:46,480 --> 00:09:51,430
we have<font color="#E5E5E5"> chrome code execution and</font>

257
00:09:48,610 --> 00:09:52,779
control the kernel driver<font color="#E5E5E5"> all of those</font>

258
00:09:51,430 --> 00:09:56,920
<font color="#CCCCCC">trust lets or many of them are</font><font color="#E5E5E5"> going to</font>

259
00:09:52,779 --> 00:09:59,740
<font color="#E5E5E5">be off limits</font><font color="#CCCCCC"> now for an app to</font><font color="#E5E5E5"> log in</font>

260
00:09:56,920 --> 00:10:01,779
what it has to do is talk<font color="#CCCCCC"> to a user land</font>

261
00:09:59,740 --> 00:10:03,130
<font color="#E5E5E5">program then</font><font color="#CCCCCC"> it's TCD the T connection</font>

262
00:10:01,779 --> 00:10:05,950
daemon I believe<font color="#CCCCCC"> is what</font><font color="#E5E5E5"> it stands for I</font>

263
00:10:03,130 --> 00:10:08,649
<font color="#E5E5E5">don't actually know so it will actually</font>

264
00:10:05,950 --> 00:10:12,279
<font color="#E5E5E5">make open up a UNIX domain socket to</font>

265
00:10:08,649 --> 00:10:14,440
this this daemon and once it opens<font color="#CCCCCC"> up</font>

266
00:10:12,279 --> 00:10:15,880
<font color="#CCCCCC">that socket the daemon</font><font color="#E5E5E5"> is going to read</font>

267
00:10:14,440 --> 00:10:18,390
off the credentials from<font color="#CCCCCC"> the socket</font><font color="#E5E5E5"> this</font>

268
00:10:15,880 --> 00:10:21,430
is something you can do in UNIX<font color="#E5E5E5"> you can</font>

269
00:10:18,390 --> 00:10:24,279
get I think the UID in the pit of your

270
00:10:21,430 --> 00:10:26,380
connector or your client and then it

271
00:10:24,279 --> 00:10:28,480
will<font color="#CCCCCC"> use that</font><font color="#E5E5E5"> to look up actually which</font>

272
00:10:26,380 --> 00:10:32,860
application itself is<font color="#E5E5E5"> making the request</font>

273
00:10:28,480 --> 00:10:34,060
<font color="#CCCCCC">and then it will make my octal</font><font color="#E5E5E5"> to the</font>

274
00:10:32,860 --> 00:10:35,740
<font color="#CCCCCC">kernel driver file</font><font color="#E5E5E5"> descriptors</font><font color="#CCCCCC"> that it</font>

275
00:10:34,060 --> 00:10:39,189
has open this<font color="#E5E5E5"> is kind of complicated</font><font color="#CCCCCC"> I'm</font>

276
00:10:35,740 --> 00:10:41,350
sorry<font color="#E5E5E5"> and it will do</font><font color="#CCCCCC"> the login ion</font><font color="#E5E5E5"> tools</font>

277
00:10:39,190 --> 00:10:43,899
<font color="#E5E5E5">once it has logged in and there's no way</font>

278
00:10:41,350 --> 00:10:45,760
<font color="#E5E5E5">to log out once it has logged in the TCD</font>

279
00:10:43,899 --> 00:10:47,320
will take that logs<font color="#E5E5E5"> in final descriptor</font>

280
00:10:45,760 --> 00:10:49,360
<font color="#CCCCCC">and send it back to the</font><font color="#E5E5E5"> android app</font>

281
00:10:47,320 --> 00:10:52,270
<font color="#E5E5E5">through</font><font color="#CCCCCC"> C message which is</font><font color="#E5E5E5"> another thing</font>

282
00:10:49,360 --> 00:10:55,000
<font color="#E5E5E5">you can do interestingly in UNIX</font><font color="#CCCCCC"> you can</font>

283
00:10:52,270 --> 00:10:56,589
or passing<font color="#E5E5E5"> space systems the links in</font>

284
00:10:55,000 --> 00:10:58,600
particular<font color="#E5E5E5"> you can send file descriptors</font>

285
00:10:56,589 --> 00:11:00,910
over an X domain socket yes being on a<font color="#CCCCCC"> C</font>

286
00:10:58,600 --> 00:11:03,730
message<font color="#E5E5E5"> so now our</font><font color="#CCCCCC"> Android app has this</font>

287
00:11:00,910 --> 00:11:05,170
file descriptor to the<font color="#CCCCCC"> trustzone driver</font>

288
00:11:03,730 --> 00:11:07,089
and it can make<font color="#CCCCCC"> I off</font>

289
00:11:05,170 --> 00:11:08,649
like you normally went to a driver to

290
00:11:07,089 --> 00:11:09,700
make requests and it can send<font color="#E5E5E5"> parameters</font>

291
00:11:08,649 --> 00:11:12,850
up and so forth

292
00:11:09,700 --> 00:11:14,500
and one more simple step and I've

293
00:11:12,850 --> 00:11:16,269
already<font color="#CCCCCC"> kind of talked about</font><font color="#E5E5E5"> this the</font>

294
00:11:14,500 --> 00:11:18,040
trusses<font color="#E5E5E5"> of course can talk to the</font>

295
00:11:16,269 --> 00:11:20,800
colonel<font color="#E5E5E5"> but while we call is a trusted</font>

296
00:11:18,040 --> 00:11:22,240
<font color="#E5E5E5">core and it does that</font><font color="#CCCCCC"> through normal</font>

297
00:11:20,800 --> 00:11:24,660
system calls like a normal user<font color="#CCCCCC"> line</font><font color="#E5E5E5"> app</font>

298
00:11:22,240 --> 00:11:26,769
is so this<font color="#E5E5E5"> is sort of the entire map of</font>

299
00:11:24,660 --> 00:11:30,130
how things<font color="#E5E5E5"> are communicating back and</font>

300
00:11:26,769 --> 00:11:32,050
<font color="#E5E5E5">forth in a</font><font color="#CCCCCC"> huawei's system now we're in</font>

301
00:11:30,130 --> 00:11:33,880
Trump<font color="#E5E5E5"> right into the bugs and these are</font>

302
00:11:32,050 --> 00:11:37,779
all very<font color="#E5E5E5"> memory corruption and focused</font>

303
00:11:33,880 --> 00:11:40,990
<font color="#CCCCCC">so</font><font color="#E5E5E5"> I'm going to assume a little bit of</font>

304
00:11:37,779 --> 00:11:42,610
knowledge<font color="#E5E5E5"> based off like security</font>

305
00:11:40,990 --> 00:11:43,870
mitigations from memory corruption types

306
00:11:42,610 --> 00:11:46,240
of bugs<font color="#CCCCCC"> are things like a</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> law or</font>

307
00:11:43,870 --> 00:11:47,649
buffer overflows and<font color="#CCCCCC"> out-of-bounds bugs</font>

308
00:11:46,240 --> 00:11:49,560
and what you can do with those<font color="#E5E5E5"> I will</font>

309
00:11:47,649 --> 00:11:52,329
try to go<font color="#CCCCCC"> over the best as a can though</font>

310
00:11:49,560 --> 00:11:54,369
so the first thing we do is sticking in

311
00:11:52,329 --> 00:11:55,839
the trustzone<font color="#CCCCCC"> domain is we're</font><font color="#E5E5E5"> gonna</font>

312
00:11:54,370 --> 00:11:58,089
target<font color="#CCCCCC"> the</font><font color="#E5E5E5"> actual kernel driver itself</font>

313
00:11:55,839 --> 00:11:59,290
<font color="#E5E5E5">there are two vulnerabilities and the</font>

314
00:11:58,089 --> 00:12:00,550
kernel driver which will allow<font color="#E5E5E5"> us to</font>

315
00:11:59,290 --> 00:12:01,660
<font color="#E5E5E5">actually get code execution in the</font>

316
00:12:00,550 --> 00:12:02,979
<font color="#E5E5E5">kernel</font>

317
00:12:01,660 --> 00:12:05,399
so I've kind<font color="#CCCCCC"> of already went over the</font>

318
00:12:02,980 --> 00:12:07,360
responsibilities of the<font color="#CCCCCC"> trust</font><font color="#E5E5E5"> own driver</font>

319
00:12:05,399 --> 00:12:10,209
<font color="#CCCCCC">but something I need to mention</font><font color="#E5E5E5"> quickly</font>

320
00:12:07,360 --> 00:12:13,390
<font color="#E5E5E5">is</font><font color="#CCCCCC"> that and this</font><font color="#E5E5E5"> is going to relate</font>

321
00:12:10,209 --> 00:12:15,880
directly to<font color="#E5E5E5"> the vulnerabilities</font><font color="#CCCCCC"> is that</font>

322
00:12:13,390 --> 00:12:17,380
the sanitization of parameters is

323
00:12:15,880 --> 00:12:19,209
handled entirely<font color="#E5E5E5"> by</font><font color="#CCCCCC"> the kernel driver -</font>

324
00:12:17,380 --> 00:12:21,459
and<font color="#E5E5E5"> this is where the books come up so</font>

325
00:12:19,209 --> 00:12:23,680
our driver needs to be able<font color="#E5E5E5"> to handle</font>

326
00:12:21,459 --> 00:12:26,859
sanitizing complicated data structures

327
00:12:23,680 --> 00:12:29,680
<font color="#CCCCCC">like memory buffers as well as integer</font>

328
00:12:26,860 --> 00:12:33,040
values<font color="#E5E5E5"> introduces some complicated but</font>

329
00:12:29,680 --> 00:12:34,989
the buffers are<font color="#CCCCCC"> once a sanitized as</font>

330
00:12:33,040 --> 00:12:36,459
those and<font color="#CCCCCC"> see</font><font color="#E5E5E5"> realises them it's going</font>

331
00:12:34,990 --> 00:12:37,720
to be sending<font color="#CCCCCC"> this</font><font color="#E5E5E5"> up to trustless that</font>

332
00:12:36,459 --> 00:12:39,910
it chooses<font color="#CCCCCC"> and the trust lets will then</font>

333
00:12:37,720 --> 00:12:43,240
<font color="#E5E5E5">act on those and that's how the</font>

334
00:12:39,910 --> 00:12:45,819
communication<font color="#E5E5E5"> will occur so a little bit</font>

335
00:12:43,240 --> 00:12:47,500
<font color="#CCCCCC">about</font><font color="#E5E5E5"> how the normal world and the</font>

336
00:12:45,820 --> 00:12:49,630
trusted core agree on things<font color="#CCCCCC"> like memory</font>

337
00:12:47,500 --> 00:12:51,959
buffers<font color="#CCCCCC"> so the normal world is often</font>

338
00:12:49,630 --> 00:12:55,000
<font color="#CCCCCC">going</font><font color="#E5E5E5"> to want to send up memory to the</font>

339
00:12:51,959 --> 00:12:57,819
to destination<font color="#E5E5E5"> trust let's now there's a</font>

340
00:12:55,000 --> 00:12:59,440
<font color="#CCCCCC">fundamental problem</font><font color="#E5E5E5"> here in</font><font color="#CCCCCC"> that the</font>

341
00:12:57,820 --> 00:13:00,910
trusted core the<font color="#CCCCCC"> gnomon willecombe</font><font color="#E5E5E5"> don't</font>

342
00:12:59,440 --> 00:13:04,390
have a lot<font color="#E5E5E5"> in common by nature of this</font>

343
00:13:00,910 --> 00:13:06,069
design<font color="#CCCCCC"> so your</font><font color="#E5E5E5"> normal</font><font color="#CCCCCC"> call has no</font>

344
00:13:04,390 --> 00:13:06,880
<font color="#E5E5E5">insight into the trusted apps that are</font>

345
00:13:06,070 --> 00:13:09,279
<font color="#CCCCCC">running</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> that's the way it's supposed</font>

346
00:13:06,880 --> 00:13:10,899
<font color="#CCCCCC">to be for security reasons</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> what</font>

347
00:13:09,279 --> 00:13:14,110
happens is the small<font color="#CCCCCC"> song-and-dance</font>

348
00:13:10,899 --> 00:13:15,339
<font color="#E5E5E5">where the trusted core has a virtual</font>

349
00:13:14,110 --> 00:13:16,660
<font color="#E5E5E5">address</font><font color="#CCCCCC"> space but it's actually</font>

350
00:13:15,339 --> 00:13:17,990
one-to-one with the physical address

351
00:13:16,660 --> 00:13:20,300
<font color="#CCCCCC">space so</font><font color="#E5E5E5"> all</font>

352
00:13:17,990 --> 00:13:22,100
<font color="#CCCCCC">the virtual</font><font color="#E5E5E5"> addresses that exist in the</font>

353
00:13:20,300 --> 00:13:24,020
trusted core are actually the exact same

354
00:13:22,100 --> 00:13:27,700
<font color="#E5E5E5">the values of those addresses are the X</font>

355
00:13:24,020 --> 00:13:30,110
<font color="#CCCCCC">aim the physical address is values so</font>

356
00:13:27,700 --> 00:13:31,459
this becomes complicated<font color="#CCCCCC"> because</font><font color="#E5E5E5"> trusses</font>

357
00:13:30,110 --> 00:13:32,750
themselves don't<font color="#E5E5E5"> actually</font><font color="#CCCCCC"> all follow</font>

358
00:13:31,459 --> 00:13:34,880
this rule<font color="#CCCCCC"> they're mapped into their own</font>

359
00:13:32,750 --> 00:13:36,380
virtual<font color="#E5E5E5"> address space and one</font><font color="#CCCCCC"> of the</font>

360
00:13:34,880 --> 00:13:39,050
reasons they do this is so<font color="#CCCCCC"> trust more</font>

361
00:13:36,380 --> 00:13:41,630
<font color="#E5E5E5">security via a SLR which is address</font>

362
00:13:39,050 --> 00:13:44,149
based layout randomization<font color="#CCCCCC"> it's a pretty</font>

363
00:13:41,630 --> 00:13:48,260
<font color="#E5E5E5">standard way</font><font color="#CCCCCC"> of making an attackers life</font>

364
00:13:44,149 --> 00:13:50,510
more<font color="#E5E5E5"> difficult so what has to</font><font color="#CCCCCC"> happen is</font>

365
00:13:48,260 --> 00:13:51,950
<font color="#CCCCCC">the normal kernel now has to look</font><font color="#E5E5E5"> up</font>

366
00:13:50,510 --> 00:13:54,140
physical addresses of any buffers<font color="#CCCCCC"> that</font>

367
00:13:51,950 --> 00:13:55,940
it wants<font color="#CCCCCC"> to pass in to the trust</font><font color="#E5E5E5"> let's</font>

368
00:13:54,140 --> 00:13:57,830
and it has to send those up<font color="#E5E5E5"> to the</font>

369
00:13:55,940 --> 00:13:59,270
trusted core<font color="#E5E5E5"> and once it has a physical</font>

370
00:13:57,830 --> 00:14:00,860
<font color="#CCCCCC">address of trusted core can</font><font color="#E5E5E5"> say oh I</font>

371
00:13:59,270 --> 00:14:02,720
understand physical<font color="#E5E5E5"> addresses as</font><font color="#CCCCCC"> well I</font>

372
00:14:00,860 --> 00:14:06,170
will take<font color="#E5E5E5"> this physical address all</font>

373
00:14:02,720 --> 00:14:07,640
mapping<font color="#E5E5E5"> into this destination trust lit</font>

374
00:14:06,170 --> 00:14:09,770
and now your destination trust<font color="#CCCCCC"> lit can</font>

375
00:14:07,640 --> 00:14:12,410
<font color="#E5E5E5">access it because I know about the trust</font>

376
00:14:09,770 --> 00:14:16,130
let's page tables<font color="#E5E5E5"> I can modify them as I</font>

377
00:14:12,410 --> 00:14:19,040
like so this introduces our first

378
00:14:16,130 --> 00:14:20,720
problem<font color="#E5E5E5"> where during the during the</font>

379
00:14:19,040 --> 00:14:22,819
process<font color="#E5E5E5"> of actually creating</font><font color="#CCCCCC"> this</font>

380
00:14:20,720 --> 00:14:25,910
<font color="#E5E5E5">physical address we have a pretty severe</font>

381
00:14:22,820 --> 00:14:28,850
out of bounds<font color="#CCCCCC"> right so well not</font><font color="#E5E5E5"> our</font>

382
00:14:25,910 --> 00:14:30,439
<font color="#E5E5E5">minds right but an out of bounds bug so</font>

383
00:14:28,850 --> 00:14:32,360
if I want<font color="#E5E5E5"> to set</font><font color="#CCCCCC"> up a</font><font color="#E5E5E5"> memory reference</font>

384
00:14:30,440 --> 00:14:35,750
or a buffer I'm gonna be<font color="#E5E5E5"> sending up a</font>

385
00:14:32,360 --> 00:14:38,600
virtual<font color="#CCCCCC"> address</font><font color="#E5E5E5"> up into the kernel</font><font color="#CCCCCC"> now</font>

386
00:14:35,750 --> 00:14:39,680
it<font color="#CCCCCC"> needs to immediately translate this</font>

387
00:14:38,600 --> 00:14:42,290
to a physical<font color="#E5E5E5"> address</font>

388
00:14:39,680 --> 00:14:44,359
but for some reason why we also include

389
00:14:42,290 --> 00:14:45,860
<font color="#CCCCCC">the option to specify</font><font color="#E5E5E5"> an offset</font><font color="#CCCCCC"> and</font>

390
00:14:44,360 --> 00:14:48,380
<font color="#CCCCCC">since memory</font><font color="#E5E5E5"> reference and they never</font>

391
00:14:45,860 --> 00:14:49,940
check this offset<font color="#E5E5E5"> so what I can do is I</font>

392
00:14:48,380 --> 00:14:51,709
can give<font color="#E5E5E5"> it a kernel address and I can</font>

393
00:14:49,940 --> 00:14:54,050
give it an arbitrary<font color="#E5E5E5"> offset of 32 bits</font>

394
00:14:51,709 --> 00:14:55,609
<font color="#E5E5E5">and now I can do an</font><font color="#CCCCCC"> out-of-bounds and</font>

395
00:14:54,050 --> 00:14:58,040
access and specify a different<font color="#CCCCCC"> physical</font>

396
00:14:55,610 --> 00:15:00,200
<font color="#E5E5E5">page which doesn't actually exist in my</font>

397
00:14:58,040 --> 00:15:01,490
address<font color="#E5E5E5"> space</font><font color="#CCCCCC"> and just for those</font><font color="#E5E5E5"> who are</font>

398
00:15:00,200 --> 00:15:03,980
curious the kernel<font color="#CCCCCC"> of course I</font><font color="#E5E5E5"> don't</font>

399
00:15:01,490 --> 00:15:06,620
control<font color="#E5E5E5"> so as you see it's iterating</font>

400
00:15:03,980 --> 00:15:08,180
over this linked list<font color="#CCCCCC"> it's going to</font>

401
00:15:06,620 --> 00:15:10,790
<font color="#CCCCCC">ensure that</font><font color="#E5E5E5"> I in my</font><font color="#CCCCCC"> own user land</font>

402
00:15:08,180 --> 00:15:12,349
process register pages and say<font color="#E5E5E5"> these are</font>

403
00:15:10,790 --> 00:15:16,189
<font color="#CCCCCC">usually on pages</font><font color="#E5E5E5"> which I'm going to pass</font>

404
00:15:12,350 --> 00:15:17,930
the trust<font color="#CCCCCC"> zone</font><font color="#E5E5E5"> and when I pass up an</font>

405
00:15:16,190 --> 00:15:19,459
address<font color="#E5E5E5"> it must exist in this list and</font>

406
00:15:17,930 --> 00:15:22,370
then it will use<font color="#CCCCCC"> the correlating kernel</font>

407
00:15:19,459 --> 00:15:27,589
address which is aware<font color="#CCCCCC"> of</font><font color="#E5E5E5"> as one</font><font color="#CCCCCC"> of the</font>

408
00:15:22,370 --> 00:15:30,290
operands<font color="#E5E5E5"> to that</font><font color="#CCCCCC"> addition so this allows</font>

409
00:15:27,589 --> 00:15:31,130
us<font color="#CCCCCC"> to</font><font color="#E5E5E5"> specify an arbitrary physical page</font>

410
00:15:30,290 --> 00:15:33,319
to pass up

411
00:15:31,130 --> 00:15:35,270
and now once we colonel pass up the

412
00:15:33,320 --> 00:15:37,400
<font color="#CCCCCC">physical page</font><font color="#E5E5E5"> the trust doesn't know any</font>

413
00:15:35,270 --> 00:15:38,689
<font color="#CCCCCC">better it doesn't</font><font color="#E5E5E5"> keep</font><font color="#CCCCCC"> equality</font>

414
00:15:37,400 --> 00:15:42,010
<font color="#E5E5E5">theoretically</font><font color="#CCCCCC"> Kuya doesn't actually keep</font>

415
00:15:38,690 --> 00:15:44,630
track<font color="#CCCCCC"> of the normal world page tables</font><font color="#E5E5E5"> so</font>

416
00:15:42,010 --> 00:15:47,330
this will create an<font color="#CCCCCC"> issue where</font><font color="#E5E5E5"> trestles</font>

417
00:15:44,630 --> 00:15:49,250
will begin operating on memory which

418
00:15:47,330 --> 00:15:51,560
actually exists<font color="#E5E5E5"> into</font><font color="#CCCCCC"> the kernel or</font>

419
00:15:49,250 --> 00:15:52,820
<font color="#E5E5E5">belong to the kernel and not to usually</font>

420
00:15:51,560 --> 00:15:56,239
an app which is<font color="#CCCCCC"> making the request</font><font color="#E5E5E5"> which</font>

421
00:15:52,820 --> 00:15:57,710
<font color="#CCCCCC">is a pretty</font><font color="#E5E5E5"> severe vulnerability</font><font color="#CCCCCC"> so as</font>

422
00:15:56,240 --> 00:16:00,200
you can see<font color="#CCCCCC"> we</font><font color="#E5E5E5"> can pass any physical</font>

423
00:15:57,710 --> 00:16:02,180
address of<font color="#CCCCCC"> any page map in and we'll use</font>

424
00:16:00,200 --> 00:16:05,780
<font color="#E5E5E5">this</font><font color="#CCCCCC"> too right now this becomes</font><font color="#E5E5E5"> more</font>

425
00:16:02,180 --> 00:16:07,520
<font color="#CCCCCC">complicated because</font><font color="#E5E5E5"> I would also like a</font>

426
00:16:05,780 --> 00:16:08,900
leak before<font color="#E5E5E5"> I do the write in the kernel</font>

427
00:16:07,520 --> 00:16:10,670
<font color="#CCCCCC">so I know precisely what</font><font color="#E5E5E5"> I want to write</font>

428
00:16:08,900 --> 00:16:13,400
<font color="#CCCCCC">over now here's a slightly more</font>

429
00:16:10,670 --> 00:16:15,199
interesting bug in my opinion<font color="#CCCCCC"> this is</font>

430
00:16:13,400 --> 00:16:16,970
sort of a design flaw<font color="#CCCCCC"> wall way since</font><font color="#E5E5E5"> I</font>

431
00:16:15,200 --> 00:16:19,550
didn't actually know this subsystem very

432
00:16:16,970 --> 00:16:24,530
well so drivers can implement a number

433
00:16:19,550 --> 00:16:25,609
<font color="#CCCCCC">of different</font><font color="#E5E5E5"> system calls</font><font color="#CCCCCC"> when they</font><font color="#E5E5E5"> are</font>

434
00:16:24,530 --> 00:16:29,480
<font color="#CCCCCC">being operated</font><font color="#E5E5E5"> on as a file descriptor</font>

435
00:16:25,610 --> 00:16:32,840
<font color="#E5E5E5">and such as open and</font><font color="#CCCCCC"> close</font><font color="#E5E5E5"> and they also</font>

436
00:16:29,480 --> 00:16:34,190
can implement on map now<font color="#CCCCCC"> while they're</font>

437
00:16:32,840 --> 00:16:36,560
on an app and in fact<font color="#E5E5E5"> this is</font><font color="#CCCCCC"> how you</font>

438
00:16:34,190 --> 00:16:37,940
register pages that<font color="#E5E5E5"> get added</font><font color="#CCCCCC"> to the</font>

439
00:16:36,560 --> 00:16:40,040
<font color="#CCCCCC">link list as I showed you earlier</font>

440
00:16:37,940 --> 00:16:41,540
<font color="#E5E5E5">you say I want</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> and map this page that</font>

441
00:16:40,040 --> 00:16:44,540
I'll eventually<font color="#E5E5E5"> want to send it to the</font>

442
00:16:41,540 --> 00:16:46,459
trust zone<font color="#CCCCCC"> and what they do is you call</font>

443
00:16:44,540 --> 00:16:47,599
<font color="#CCCCCC">mmm they call a currently pad called get</font>

444
00:16:46,460 --> 00:16:49,160
free<font color="#E5E5E5"> pages this</font><font color="#CCCCCC"> is kind of</font>

445
00:16:47,600 --> 00:16:51,410
self-explanatory<font color="#E5E5E5"> it's a number of</font><font color="#CCCCCC"> four</font>

446
00:16:49,160 --> 00:16:53,209
<font color="#E5E5E5">physical pages they bind those physical</font>

447
00:16:51,410 --> 00:16:55,880
pages<font color="#E5E5E5"> to the virtual address that the</font>

448
00:16:53,210 --> 00:16:58,100
<font color="#E5E5E5">Linux of system created for it and then</font>

449
00:16:55,880 --> 00:17:00,080
adds<font color="#E5E5E5"> it to the linked list as we saw now</font>

450
00:16:58,100 --> 00:17:01,610
the big problem<font color="#CCCCCC"> is they had</font><font color="#E5E5E5"> no</font><font color="#CCCCCC"> idea how</font>

451
00:17:00,080 --> 00:17:04,970
<font color="#E5E5E5">to</font><font color="#CCCCCC"> actually clean up</font><font color="#E5E5E5"> it's</font><font color="#CCCCCC"> no operation</font>

452
00:17:01,610 --> 00:17:06,140
so how do you clean up<font color="#E5E5E5"> a lot people</font>

453
00:17:04,970 --> 00:17:08,390
don't<font color="#CCCCCC"> know how to actually clean up a</font>

454
00:17:06,140 --> 00:17:11,959
map page<font color="#E5E5E5"> by a custom Linux kernel driver</font>

455
00:17:08,390 --> 00:17:13,850
<font color="#E5E5E5">so their solution was to implement</font><font color="#CCCCCC"> in a</font>

456
00:17:11,959 --> 00:17:16,100
octal<font color="#CCCCCC"> as you see here something</font><font color="#E5E5E5"> the</font>

457
00:17:13,849 --> 00:17:17,839
<font color="#E5E5E5">aisle is implemented don't familiar with</font>

458
00:17:16,099 --> 00:17:19,579
a octal it's just<font color="#CCCCCC"> a</font><font color="#E5E5E5"> very it's a system</font>

459
00:17:17,839 --> 00:17:21,530
call where you<font color="#E5E5E5"> can send custom commands</font>

460
00:17:19,579 --> 00:17:23,119
to a driver so you give<font color="#CCCCCC"> it an integer</font>

461
00:17:21,530 --> 00:17:25,369
<font color="#E5E5E5">value and</font><font color="#CCCCCC"> then the driver will say I</font>

462
00:17:23,119 --> 00:17:26,780
<font color="#CCCCCC">know how to handle</font><font color="#E5E5E5"> this command</font><font color="#CCCCCC"> idx</font><font color="#E5E5E5"> and</font>

463
00:17:25,369 --> 00:17:29,719
it'll have special voucher for handling

464
00:17:26,780 --> 00:17:32,899
it<font color="#E5E5E5"> so now they have a case called shared</font>

465
00:17:29,720 --> 00:17:35,090
<font color="#E5E5E5">memory lease</font><font color="#CCCCCC"> now there is a way to</font>

466
00:17:32,900 --> 00:17:36,650
actually do this<font color="#E5E5E5"> safely</font><font color="#CCCCCC"> but the</font><font color="#E5E5E5"> problem</font>

467
00:17:35,090 --> 00:17:37,790
with<font color="#E5E5E5"> implementing it as an ion tool is</font>

468
00:17:36,650 --> 00:17:39,380
that<font color="#CCCCCC"> you're not actually talking to the</font>

469
00:17:37,790 --> 00:17:41,600
rest<font color="#E5E5E5"> of the Linux subsystem which is</font>

470
00:17:39,380 --> 00:17:45,059
responsible<font color="#E5E5E5"> for managing</font><font color="#CCCCCC"> this virtual</font>

471
00:17:41,600 --> 00:17:47,668
page so what it does is

472
00:17:45,059 --> 00:17:50,639
is the<font color="#CCCCCC"> tea CNS</font><font color="#E5E5E5"> your memory release will</font>

473
00:17:47,669 --> 00:17:52,320
actually free those physical pages<font color="#E5E5E5"> but</font>

474
00:17:50,639 --> 00:17:53,610
because it actually<font color="#CCCCCC"> never bothers to</font>

475
00:17:52,320 --> 00:17:56,879
talk to the rest<font color="#E5E5E5"> of</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> Linux virtual</font>

476
00:17:53,610 --> 00:18:01,019
memory subsystem<font color="#CCCCCC"> it never</font><font color="#E5E5E5"> actually</font>

477
00:17:56,879 --> 00:18:03,779
cleans up the page table so what you

478
00:18:01,019 --> 00:18:06,090
have in<font color="#E5E5E5"> your Uslan process is a virtual</font>

479
00:18:03,779 --> 00:18:08,249
memory<font color="#E5E5E5"> mapping which now exists are now</font>

480
00:18:06,090 --> 00:18:11,189
correlates to<font color="#E5E5E5"> and points to a free</font>

481
00:18:08,249 --> 00:18:13,289
physical page<font color="#E5E5E5"> so what happens when I</font>

482
00:18:11,190 --> 00:18:15,139
free a physical page in the kernel is it

483
00:18:13,289 --> 00:18:18,509
gets added<font color="#E5E5E5"> to</font><font color="#CCCCCC"> a list of free pages and</font>

484
00:18:15,139 --> 00:18:19,979
this<font color="#E5E5E5"> is very basic explanation of it it</font>

485
00:18:18,509 --> 00:18:21,749
as<font color="#E5E5E5"> a free list of pages</font><font color="#CCCCCC"> in the kernel</font>

486
00:18:19,980 --> 00:18:22,889
<font color="#CCCCCC">and</font><font color="#E5E5E5"> then when another application</font><font color="#CCCCCC"> or</font><font color="#E5E5E5"> the</font>

487
00:18:21,749 --> 00:18:24,809
kernel<font color="#E5E5E5"> itself wants to allocate more</font>

488
00:18:22,889 --> 00:18:26,399
memory<font color="#E5E5E5"> the</font><font color="#CCCCCC"> curl</font><font color="#E5E5E5"> will</font><font color="#CCCCCC"> say I had this list</font>

489
00:18:24,809 --> 00:18:29,600
<font color="#E5E5E5">of free</font><font color="#CCCCCC"> pages you can</font><font color="#E5E5E5"> just take this one</font>

490
00:18:26,399 --> 00:18:33,199
<font color="#CCCCCC">so what we can do is we can allocate</font>

491
00:18:29,600 --> 00:18:36,330
memory<font color="#E5E5E5"> in</font><font color="#CCCCCC"> our user land process we can</font>

492
00:18:33,200 --> 00:18:39,240
<font color="#E5E5E5">via the</font><font color="#CCCCCC"> M map then we can issue the eye</font>

493
00:18:36,330 --> 00:18:41,699
octal<font color="#E5E5E5"> to free it we still have that</font>

494
00:18:39,240 --> 00:18:43,379
virtual memory page lying around<font color="#CCCCCC"> and</font>

495
00:18:41,700 --> 00:18:44,669
<font color="#E5E5E5">then we can create a bunch of</font><font color="#CCCCCC"> requests</font>

496
00:18:43,379 --> 00:18:45,959
and<font color="#CCCCCC"> ask the kernel to allocate more</font>

497
00:18:44,669 --> 00:18:48,179
memory for<font color="#CCCCCC"> us</font><font color="#E5E5E5"> you know for example</font>

498
00:18:45,960 --> 00:18:49,379
eye-opening files the kernel will have

499
00:18:48,179 --> 00:18:50,970
to<font color="#E5E5E5"> open so many</font><font color="#CCCCCC"> files and</font><font color="#E5E5E5"> eventually</font>

500
00:18:49,379 --> 00:18:53,879
<font color="#CCCCCC">we'll need a physical page of its own</font>

501
00:18:50,970 --> 00:18:55,590
and at that point<font color="#E5E5E5"> it's when I take the</font>

502
00:18:53,879 --> 00:18:58,230
physical<font color="#E5E5E5"> page which is still bound to</font>

503
00:18:55,590 --> 00:18:59,459
<font color="#CCCCCC">our virtual</font><font color="#E5E5E5"> memory map inside of</font><font color="#CCCCCC"> Uslan</font>

504
00:18:58,230 --> 00:19:00,899
process and<font color="#E5E5E5"> the kernel will begin</font>

505
00:18:59,460 --> 00:19:02,490
essentially allocating kernel data

506
00:19:00,899 --> 00:19:05,459
structures inside our user<font color="#E5E5E5"> lim process</font>

507
00:19:02,490 --> 00:19:07,799
which is another giant issue<font color="#CCCCCC"> and you</font>

508
00:19:05,460 --> 00:19:09,779
could use this for<font color="#CCCCCC"> a</font><font color="#E5E5E5"> lot more leveling</font>

509
00:19:07,799 --> 00:19:11,399
purposes I just<font color="#CCCCCC"> use it for</font><font color="#E5E5E5"> leaking but</font>

510
00:19:09,779 --> 00:19:13,499
this is a pretty interesting bug I think

511
00:19:11,399 --> 00:19:15,178
it's the first<font color="#E5E5E5"> physical page you set for</font>

512
00:19:13,499 --> 00:19:18,600
free I've ever seen

513
00:19:15,179 --> 00:19:20,789
so that can cause some havoc and<font color="#CCCCCC"> that's</font>

514
00:19:18,600 --> 00:19:21,840
<font color="#E5E5E5">pretty fun so as I say with some kernel</font>

515
00:19:20,789 --> 00:19:22,950
spring we can get<font color="#CCCCCC"> to Colonel -</font>

516
00:19:21,840 --> 00:19:25,908
structures and get a leak<font color="#CCCCCC"> and</font><font color="#E5E5E5"> in</font>

517
00:19:22,950 --> 00:19:28,830
<font color="#E5E5E5">particular I'm gonna show you how I</font>

518
00:19:25,909 --> 00:19:31,110
exploited this so there's lots of ways

519
00:19:28,830 --> 00:19:33,689
<font color="#E5E5E5">to do this with an</font><font color="#CCCCCC"> arbitrary write this</font>

520
00:19:31,110 --> 00:19:35,789
is just the way I chose so I wanted<font color="#CCCCCC"> to</font>

521
00:19:33,690 --> 00:19:37,409
overwrite a file operations<font color="#E5E5E5"> boring table</font>

522
00:19:35,789 --> 00:19:39,299
so a<font color="#E5E5E5"> little bit about files how files</font>

523
00:19:37,409 --> 00:19:40,559
are implemented<font color="#E5E5E5"> in Linux and UNIX</font>

524
00:19:39,299 --> 00:19:41,668
systems in<font color="#CCCCCC"> general I'm sure many people</font>

525
00:19:40,559 --> 00:19:43,289
<font color="#CCCCCC">are familiar with the file descriptor</font>

526
00:19:41,669 --> 00:19:44,789
it's sort of an opaque number which

527
00:19:43,289 --> 00:19:48,240
represents<font color="#CCCCCC"> a more complicated structure</font>

528
00:19:44,789 --> 00:19:49,799
in the kernel<font color="#CCCCCC"> so</font><font color="#E5E5E5"> when I open a file I</font>

529
00:19:48,240 --> 00:19:52,110
have<font color="#E5E5E5"> the file descriptor and that</font>

530
00:19:49,799 --> 00:19:53,549
<font color="#E5E5E5">correlates to this Jolyon structure that</font>

531
00:19:52,110 --> 00:19:55,350
the kernel has<font color="#E5E5E5"> in its own memory space</font>

532
00:19:53,549 --> 00:19:57,389
which has<font color="#CCCCCC"> this file operations pointer</font>

533
00:19:55,350 --> 00:19:58,969
table which is<font color="#CCCCCC"> you can</font><font color="#E5E5E5"> think it's kind</font>

534
00:19:57,389 --> 00:20:02,090
of like a c++<font color="#E5E5E5"> v table it's</font>

535
00:19:58,970 --> 00:20:05,090
way to kind of do<font color="#CCCCCC"> object-oriented like</font>

536
00:20:02,090 --> 00:20:06,500
things<font color="#CCCCCC"> by essentially</font><font color="#E5E5E5"> allowing you to</font>

537
00:20:05,090 --> 00:20:08,389
<font color="#E5E5E5">overload a lot of different operations</font>

538
00:20:06,500 --> 00:20:10,490
<font color="#E5E5E5">so the way a file descriptor in Linux</font>

539
00:20:08,390 --> 00:20:11,990
can do so<font color="#E5E5E5"> many different things as we</font>

540
00:20:10,490 --> 00:20:13,640
know file descriptors can<font color="#E5E5E5"> be a socket or</font>

541
00:20:11,990 --> 00:20:16,190
<font color="#E5E5E5">it can be a file of many different kinds</font>

542
00:20:13,640 --> 00:20:18,080
of formats<font color="#E5E5E5"> is that uses this file</font>

543
00:20:16,190 --> 00:20:19,970
operations table to implement all sorts

544
00:20:18,080 --> 00:20:21,770
of different<font color="#E5E5E5"> methods</font><font color="#CCCCCC"> I also contains</font>

545
00:20:19,970 --> 00:20:23,539
things you'd expect<font color="#E5E5E5"> the file to maintain</font>

546
00:20:21,770 --> 00:20:24,710
or the Carleton<font color="#CCCCCC"> maintain like</font><font color="#E5E5E5"> an offset</font>

547
00:20:23,539 --> 00:20:29,720
<font color="#CCCCCC">and the permissions</font><font color="#E5E5E5"> the file was</font><font color="#CCCCCC"> opened</font>

548
00:20:24,710 --> 00:20:32,419
with so for example if we<font color="#E5E5E5"> opened a file</font>

549
00:20:29,720 --> 00:20:34,100
on a<font color="#E5E5E5"> normal system we're gonna have our</font>

550
00:20:32,419 --> 00:20:37,190
operations<font color="#CCCCCC"> two</font><font color="#E5E5E5"> pointer table like X</font><font color="#CCCCCC"> T</font>

551
00:20:34,100 --> 00:20:38,840
<font color="#E5E5E5">for read by octal</font><font color="#CCCCCC"> and L seek but we want</font>

552
00:20:37,190 --> 00:20:42,049
to do is overwrite that file operations

553
00:20:38,840 --> 00:20:45,168
pointer table and point it at a rock

554
00:20:42,049 --> 00:20:46,549
gadget pointer table which will<font color="#E5E5E5"> do nasty</font>

555
00:20:45,169 --> 00:20:47,990
<font color="#E5E5E5">things for us so for those unfamiliar</font>

556
00:20:46,549 --> 00:20:53,179
blob stands for<font color="#CCCCCC"> return oriented</font>

557
00:20:47,990 --> 00:20:56,770
programming it's a way of<font color="#E5E5E5"> bypassing NX</font>

558
00:20:53,179 --> 00:20:58,429
<font color="#E5E5E5">which is a non non-executable memory</font><font color="#CCCCCC"> so</font>

559
00:20:56,770 --> 00:21:00,740
<font color="#E5E5E5">just because we can't introduce</font>

560
00:20:58,429 --> 00:21:02,270
<font color="#E5E5E5">executable code into the kernel</font><font color="#CCCCCC"> we can</font>

561
00:21:00,740 --> 00:21:05,419
reuse the<font color="#E5E5E5"> code that is just in the</font>

562
00:21:02,270 --> 00:21:07,158
kernel<font color="#E5E5E5"> to do things we would like like</font>

563
00:21:05,419 --> 00:21:09,289
for<font color="#E5E5E5"> example I have two examples</font><font color="#CCCCCC"> of Rob</font>

564
00:21:07,159 --> 00:21:11,720
gadgets here<font color="#CCCCCC"> I have a write gadget which</font>

565
00:21:09,289 --> 00:21:16,190
will take whatever in<font color="#E5E5E5"> x1 and write it 2</font>

566
00:21:11,720 --> 00:21:17,929
X 2 these are<font color="#CCCCCC"> our 64 registers and then</font>

567
00:21:16,190 --> 00:21:22,850
return and<font color="#CCCCCC"> I</font><font color="#E5E5E5"> have a</font><font color="#CCCCCC"> leap gadget which</font>

568
00:21:17,929 --> 00:21:25,010
will load from load the<font color="#E5E5E5"> value that x1</font>

569
00:21:22,850 --> 00:21:27,918
represents has an<font color="#E5E5E5"> address and populate</font>

570
00:21:25,010 --> 00:21:32,059
<font color="#CCCCCC">x0 with it and then return</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> x0</font><font color="#E5E5E5"> is the</font>

571
00:21:27,919 --> 00:21:34,400
return value<font color="#CCCCCC"> in arm so if you have</font><font color="#E5E5E5"> x0</font>

572
00:21:32,059 --> 00:21:35,780
returns<font color="#E5E5E5"> that's the value that L seek for</font>

573
00:21:34,400 --> 00:21:37,400
example<font color="#CCCCCC"> when you're</font><font color="#E5E5E5"> turning so what I</font>

574
00:21:35,780 --> 00:21:40,190
<font color="#E5E5E5">can do once they set up this fake table</font>

575
00:21:37,400 --> 00:21:41,630
is I can say L seek to<font color="#E5E5E5"> this address and</font>

576
00:21:40,190 --> 00:21:43,130
<font color="#E5E5E5">then the return value of else equal I</font>

577
00:21:41,630 --> 00:21:47,200
should be the value<font color="#CCCCCC"> of</font><font color="#E5E5E5"> that address and</font>

578
00:21:43,130 --> 00:21:49,730
<font color="#E5E5E5">not what has</font><font color="#CCCCCC"> actually been</font><font color="#E5E5E5"> L synced so</font>

579
00:21:47,200 --> 00:21:51,320
<font color="#CCCCCC">to</font><font color="#E5E5E5"> redirect the al-hafiz table we</font><font color="#CCCCCC"> just</font>

580
00:21:49,730 --> 00:21:53,419
<font color="#CCCCCC">need missing one piece we have</font><font color="#E5E5E5"> this</font>

581
00:21:51,320 --> 00:21:55,730
<font color="#E5E5E5">arbitrary right but we need</font><font color="#CCCCCC"> a component</font>

582
00:21:53,419 --> 00:21:58,730
in the<font color="#E5E5E5"> trust zone which will actually do</font>

583
00:21:55,730 --> 00:22:01,490
the<font color="#CCCCCC"> right</font><font color="#E5E5E5"> so here I actually have</font><font color="#CCCCCC"> a</font>

584
00:21:58,730 --> 00:22:04,010
<font color="#CCCCCC">screencap of IDA so as I said the</font><font color="#E5E5E5"> t's</font>

585
00:22:01,490 --> 00:22:05,809
completely proprietary<font color="#E5E5E5"> the</font><font color="#CCCCCC"> chipset</font>

586
00:22:04,010 --> 00:22:07,309
manufacturers have no obligation<font color="#E5E5E5"> to</font>

587
00:22:05,809 --> 00:22:08,870
<font color="#E5E5E5">open-source any of this so if you want</font>

588
00:22:07,309 --> 00:22:10,549
<font color="#E5E5E5">to start looking</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> bugs in</font><font color="#CCCCCC"> your trust</font>

589
00:22:08,870 --> 00:22:12,260
zone<font color="#CCCCCC"> you have to begin reversing it I</font>

590
00:22:10,549 --> 00:22:13,460
was lucky enough<font color="#CCCCCC"> to afford</font><font color="#E5E5E5"> a deacon</font>

591
00:22:12,260 --> 00:22:15,860
which not<font color="#E5E5E5"> everyone has the</font><font color="#CCCCCC"> privilege to</font>

592
00:22:13,460 --> 00:22:18,800
<font color="#E5E5E5">do but this is what it looks like it's</font>

593
00:22:15,860 --> 00:22:20,949
very<font color="#E5E5E5"> nice</font><font color="#CCCCCC"> so the first thing that I</font>

594
00:22:18,800 --> 00:22:23,180
found<font color="#E5E5E5"> that did this is an interesting</font>

595
00:22:20,950 --> 00:22:24,740
<font color="#E5E5E5">global command that anyone can</font><font color="#CCCCCC"> actually</font>

596
00:22:23,180 --> 00:22:28,550
talk<font color="#E5E5E5"> to the</font><font color="#CCCCCC"> requests in the</font><font color="#E5E5E5"> trust zone</font>

597
00:22:24,740 --> 00:22:30,800
which is<font color="#E5E5E5"> a command</font><font color="#CCCCCC"> ID need</font><font color="#E5E5E5"> load app now</font>

598
00:22:28,550 --> 00:22:32,990
this<font color="#E5E5E5"> is kind of a weird function which</font>

599
00:22:30,800 --> 00:22:36,050
will tell you if you need<font color="#E5E5E5"> to load an app</font>

600
00:22:32,990 --> 00:22:39,740
or not into the<font color="#E5E5E5"> truss zone so I will</font>

601
00:22:36,050 --> 00:22:42,800
give it a UUID<font color="#E5E5E5"> which Huawei uses as a</font>

602
00:22:39,740 --> 00:22:45,710
way to<font color="#E5E5E5"> recognize individual trust</font><font color="#CCCCCC"> lids</font>

603
00:22:42,800 --> 00:22:48,649
<font color="#E5E5E5">so each Russell has a new UID and their</font>

604
00:22:45,710 --> 00:22:51,470
trust<font color="#E5E5E5"> trust</font><font color="#CCCCCC"> zone</font><font color="#E5E5E5"> kernel will tell me is</font>

605
00:22:48,650 --> 00:22:53,030
this<font color="#CCCCCC"> UUID loaded if it's not it will say</font>

606
00:22:51,470 --> 00:22:55,430
yes you<font color="#E5E5E5"> need to load this app I'm</font><font color="#CCCCCC"> going</font>

607
00:22:53,030 --> 00:22:57,200
to write a<font color="#CCCCCC"> 1 back into your buffer if</font>

608
00:22:55,430 --> 00:22:59,600
you don't need<font color="#CCCCCC"> to</font><font color="#E5E5E5"> load the app then I'm</font>

609
00:22:57,200 --> 00:23:01,730
gonna write a<font color="#E5E5E5"> 0 back into your buffer so</font>

610
00:22:59,600 --> 00:23:03,500
what I can<font color="#CCCCCC"> do is I can point this buffer</font>

611
00:23:01,730 --> 00:23:05,270
as I<font color="#E5E5E5"> you know my control</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> could point</font>

612
00:23:03,500 --> 00:23:06,890
that any<font color="#E5E5E5"> physical page I like I'm gonna</font>

613
00:23:05,270 --> 00:23:08,450
point<font color="#E5E5E5"> that at my f off</font><font color="#CCCCCC"> stable that I</font>

614
00:23:06,890 --> 00:23:10,700
want to overwrite I'm<font color="#E5E5E5"> gonna begin</font>

615
00:23:08,450 --> 00:23:12,470
<font color="#E5E5E5">writing a 1 or a 0 there</font><font color="#CCCCCC"> so I have</font>

616
00:23:10,700 --> 00:23:14,750
<font color="#E5E5E5">essentially an arbitrary</font><font color="#CCCCCC"> write 1 or</font>

617
00:23:12,470 --> 00:23:17,540
write 0<font color="#E5E5E5"> actually becomes</font><font color="#CCCCCC"> a right one</font>

618
00:23:14,750 --> 00:23:19,670
because these are<font color="#CCCCCC"> uu IDs of</font><font color="#E5E5E5"> values I</font>

619
00:23:17,540 --> 00:23:22,250
don't know about and I can't<font color="#E5E5E5"> control the</font>

620
00:23:19,670 --> 00:23:24,320
value<font color="#E5E5E5"> of what I want to write</font><font color="#CCCCCC"> to so I</font>

621
00:23:22,250 --> 00:23:26,390
have an<font color="#E5E5E5"> arbitrary right one now how do</font>

622
00:23:24,320 --> 00:23:27,710
you with<font color="#E5E5E5"> the ability</font><font color="#CCCCCC"> to write a 3</font>

623
00:23:26,390 --> 00:23:28,910
<font color="#E5E5E5">two-bit one anywhere</font><font color="#CCCCCC"> in kernel memory</font>

624
00:23:27,710 --> 00:23:31,730
how do you exploit the<font color="#E5E5E5"> state code</font>

625
00:23:28,910 --> 00:23:32,780
execution<font color="#E5E5E5"> so I was really fortunate</font><font color="#CCCCCC"> I</font>

626
00:23:31,730 --> 00:23:35,930
could trigger this<font color="#E5E5E5"> as</font><font color="#CCCCCC"> many</font><font color="#E5E5E5"> times as I</font>

627
00:23:32,780 --> 00:23:38,030
like so what I<font color="#CCCCCC"> did is I</font><font color="#E5E5E5"> took this a</font>

628
00:23:35,930 --> 00:23:41,540
while<font color="#CCCCCC"> operation spoil your table as you</font>

629
00:23:38,030 --> 00:23:43,510
can see at the top<font color="#CCCCCC"> we have this kernel</font>

630
00:23:41,540 --> 00:23:46,460
pointer which is pointing to an existing

631
00:23:43,510 --> 00:23:48,170
ext4 file<font color="#E5E5E5"> operations table and</font><font color="#CCCCCC"> I</font>

632
00:23:46,460 --> 00:23:50,810
<font color="#E5E5E5">overwrite it piece by piece with little</font>

633
00:23:48,170 --> 00:23:53,210
<font color="#E5E5E5">endian ones to shrink it into an address</font>

634
00:23:50,810 --> 00:23:54,950
<font color="#CCCCCC">that points into user land so I can</font>

635
00:23:53,210 --> 00:23:56,720
<font color="#CCCCCC">never</font><font color="#E5E5E5"> write the very first</font><font color="#CCCCCC"> four bytes</font>

636
00:23:54,950 --> 00:23:58,790
<font color="#E5E5E5">and make that into a 1 now the interest</font>

637
00:23:56,720 --> 00:24:00,890
is<font color="#E5E5E5"> much smaller then I can overwrite the</font>

638
00:23:58,790 --> 00:24:02,389
next<font color="#CCCCCC"> 3 bytes</font><font color="#E5E5E5"> and I can make that into a</font>

639
00:24:00,890 --> 00:24:04,280
<font color="#E5E5E5">1 over</font><font color="#CCCCCC"> writing the original</font><font color="#E5E5E5"> one that I</font>

640
00:24:02,390 --> 00:24:06,230
placed<font color="#E5E5E5"> and then I can sort</font><font color="#CCCCCC"> of even it</font>

641
00:24:04,280 --> 00:24:08,000
out<font color="#E5E5E5"> so this third</font><font color="#CCCCCC"> transition actually</font>

642
00:24:06,230 --> 00:24:10,100
<font color="#CCCCCC">isn't legal I can't map that page it's</font>

643
00:24:08,000 --> 00:24:11,450
too low<font color="#E5E5E5"> there's an</font><font color="#CCCCCC"> min requirement which</font>

644
00:24:10,100 --> 00:24:13,790
stops and all the reference<font color="#E5E5E5"> bugs</font><font color="#CCCCCC"> for</font>

645
00:24:11,450 --> 00:24:15,170
being exploited<font color="#E5E5E5"> so I need to write</font>

646
00:24:13,790 --> 00:24:16,460
<font color="#CCCCCC">another one to bring</font><font color="#E5E5E5"> that up to a more</font>

647
00:24:15,170 --> 00:24:18,320
manageable address<font color="#E5E5E5"> that I can actually</font>

648
00:24:16,460 --> 00:24:21,230
map into my new client process<font color="#E5E5E5"> and at</font>

649
00:24:18,320 --> 00:24:23,060
<font color="#E5E5E5">this point we've actually now pointed an</font>

650
00:24:21,230 --> 00:24:25,580
existing ext file operation pointer

651
00:24:23,060 --> 00:24:26,119
table into user<font color="#CCCCCC"> land</font><font color="#E5E5E5"> so now whenever I</font>

652
00:24:25,580 --> 00:24:28,428
want to<font color="#E5E5E5"> make</font>

653
00:24:26,119 --> 00:24:30,589
or<font color="#CCCCCC"> writes that write or read from</font><font color="#E5E5E5"> that</font>

654
00:24:28,429 --> 00:24:32,389
file or<font color="#E5E5E5"> LC con it it's going</font><font color="#CCCCCC"> to be using</font>

655
00:24:30,589 --> 00:24:34,789
my file operations table and use<font color="#E5E5E5"> rule</font>

656
00:24:32,389 --> 00:24:36,408
and memory<font color="#E5E5E5"> to figure out where those</font>

657
00:24:34,789 --> 00:24:38,419
functions are<font color="#CCCCCC"> implemented so I have code</font>

658
00:24:36,409 --> 00:24:39,949
execution in<font color="#E5E5E5"> the kernel now so with the</font>

659
00:24:38,419 --> 00:24:42,319
rocket<font color="#CCCCCC"> just I showed you I can now</font>

660
00:24:39,949 --> 00:24:43,189
<font color="#E5E5E5">overwrite my cred structure if you're</font>

661
00:24:42,319 --> 00:24:45,319
not familiar<font color="#E5E5E5"> with Linux kernel</font>

662
00:24:43,189 --> 00:24:46,849
exploitation that's<font color="#E5E5E5"> okay</font>

663
00:24:45,319 --> 00:24:48,949
I now<font color="#E5E5E5"> have</font><font color="#CCCCCC"> ultra me too right so what I</font>

664
00:24:46,849 --> 00:24:52,489
can<font color="#CCCCCC"> do is just say my UID is now zero</font>

665
00:24:48,949 --> 00:24:54,919
essentially<font color="#E5E5E5"> and</font><font color="#CCCCCC"> that makes me route so</font>

666
00:24:52,489 --> 00:24:58,539
now with<font color="#CCCCCC"> root we still have two more</font>

667
00:24:54,919 --> 00:25:00,919
stages to go<font color="#E5E5E5"> so I hope you're</font><font color="#CCCCCC"> not</font><font color="#E5E5E5"> bored</font>

668
00:24:58,539 --> 00:25:05,419
<font color="#CCCCCC">so these are a little</font><font color="#E5E5E5"> bit less painful</font>

669
00:25:00,919 --> 00:25:08,029
<font color="#CCCCCC">so the we need</font><font color="#E5E5E5"> to now own a trust lit</font>

670
00:25:05,419 --> 00:25:09,769
and in<font color="#E5E5E5"> this case we're going to</font><font color="#CCCCCC"> be</font>

671
00:25:08,029 --> 00:25:13,729
<font color="#CCCCCC">owning</font><font color="#E5E5E5"> something known as a secure</font>

672
00:25:09,769 --> 00:25:15,589
storage trust lit this is what's

673
00:25:13,729 --> 00:25:17,839
responsible<font color="#E5E5E5"> for transparently encrypting</font>

674
00:25:15,589 --> 00:25:20,359
files on disk<font color="#E5E5E5"> so not all phones</font><font color="#CCCCCC"> actually</font>

675
00:25:17,839 --> 00:25:21,708
offer this but<font color="#CCCCCC"> Huawei has a special safe</font>

676
00:25:20,359 --> 00:25:23,928
feature that<font color="#E5E5E5"> they offer where you can</font>

677
00:25:21,709 --> 00:25:25,939
centrally say I have these files<font color="#E5E5E5"> you</font>

678
00:25:23,929 --> 00:25:27,949
<font color="#CCCCCC">need</font><font color="#E5E5E5"> to put them in a special</font><font color="#CCCCCC"> place and</font>

679
00:25:25,939 --> 00:25:29,659
the way is going<font color="#E5E5E5"> to handle this is it's</font>

680
00:25:27,949 --> 00:25:32,539
<font color="#CCCCCC">going to pass the content of this file</font>

681
00:25:29,659 --> 00:25:33,769
to the secure storage file<font color="#E5E5E5"> trust lit and</font>

682
00:25:32,539 --> 00:25:36,849
it's going<font color="#E5E5E5"> to be encrypting them with a</font>

683
00:25:33,769 --> 00:25:40,159
key<font color="#CCCCCC"> that your kernel has no idea about</font>

684
00:25:36,849 --> 00:25:41,509
<font color="#E5E5E5">so theoretically this means that even</font><font color="#CCCCCC"> if</font>

685
00:25:40,159 --> 00:25:43,639
your phone<font color="#CCCCCC"> is</font><font color="#E5E5E5"> free to buy a malicious</font>

686
00:25:41,509 --> 00:25:45,619
actor all the<font color="#CCCCCC"> finals you point</font><font color="#E5E5E5"> you're</font>

687
00:25:43,639 --> 00:25:48,228
safe<font color="#E5E5E5"> are absolutely safe because they</font>

688
00:25:45,619 --> 00:25:50,539
have<font color="#CCCCCC"> no way of finding that</font><font color="#E5E5E5"> key now</font>

689
00:25:48,229 --> 00:25:52,519
unfortunately the secure storage<font color="#E5E5E5"> trust</font>

690
00:25:50,539 --> 00:25:53,799
was actually riddled with bugs<font color="#CCCCCC"> so it</font>

691
00:25:52,519 --> 00:25:57,949
doesn't<font color="#CCCCCC"> really</font><font color="#E5E5E5"> matter</font>

692
00:25:53,799 --> 00:26:00,168
<font color="#E5E5E5">now there's one big type confusion here</font>

693
00:25:57,949 --> 00:26:01,579
and to talk<font color="#CCCCCC"> about</font><font color="#E5E5E5"> that I'm gonna have to</font>

694
00:26:00,169 --> 00:26:03,979
talk<font color="#E5E5E5"> about look back and see the</font>

695
00:26:01,579 --> 00:26:05,629
<font color="#E5E5E5">sanitization so the way they</font><font color="#CCCCCC"> actually</font>

696
00:26:03,979 --> 00:26:06,949
handle the sanitization of<font color="#E5E5E5"> these</font>

697
00:26:05,629 --> 00:26:07,639
different parameter types isn't<font color="#E5E5E5"> that</font>

698
00:26:06,949 --> 00:26:09,319
complicated

699
00:26:07,639 --> 00:26:11,238
<font color="#E5E5E5">to have a</font><font color="#CCCCCC"> union which means they</font>

700
00:26:09,319 --> 00:26:15,289
essentially have a data type<font color="#CCCCCC"> that can be</font>

701
00:26:11,239 --> 00:26:19,609
one of<font color="#CCCCCC"> two things</font><font color="#E5E5E5"> and they have a</font><font color="#CCCCCC"> Union</font>

702
00:26:15,289 --> 00:26:20,959
which can handle<font color="#E5E5E5"> either values or memory</font>

703
00:26:19,609 --> 00:26:22,549
references now a memory reference has

704
00:26:20,959 --> 00:26:26,119
the buffer in size and<font color="#E5E5E5"> you might expect</font>

705
00:26:22,549 --> 00:26:28,309
<font color="#E5E5E5">and the Union just has two engineers and</font>

706
00:26:26,119 --> 00:26:30,079
<font color="#E5E5E5">you can pass up</font><font color="#CCCCCC"> I imagine it's two just</font>

707
00:26:28,309 --> 00:26:31,908
<font color="#E5E5E5">because the buffer</font><font color="#CCCCCC"> it's memory reference</font>

708
00:26:30,079 --> 00:26:34,039
<font color="#CCCCCC">it has two</font><font color="#E5E5E5"> values but you can pass them</font>

709
00:26:31,909 --> 00:26:35,599
an A and a B now the unit weight should

710
00:26:34,039 --> 00:26:36,709
actually distinguish between<font color="#E5E5E5"> these kinds</font>

711
00:26:35,599 --> 00:26:38,870
<font color="#CCCCCC">of parameter types</font><font color="#E5E5E5"> because it isn't</font>

712
00:26:36,709 --> 00:26:40,549
Union there's no me to type<font color="#CCCCCC"> track this</font>

713
00:26:38,870 --> 00:26:42,949
and so when they're actually passing up

714
00:26:40,549 --> 00:26:44,960
this payload to the<font color="#E5E5E5"> trust</font><font color="#CCCCCC"> lit</font><font color="#E5E5E5"> they say</font>

715
00:26:42,950 --> 00:26:48,230
I'm gonna have four parameters<font color="#CCCCCC"> which can</font>

716
00:26:44,960 --> 00:26:49,309
<font color="#E5E5E5">be either</font><font color="#CCCCCC"> a value or MMF but just so</font><font color="#E5E5E5"> you</font>

717
00:26:48,230 --> 00:26:52,309
<font color="#E5E5E5">can tell the difference between these</font>

718
00:26:49,309 --> 00:26:53,779
two I'm<font color="#E5E5E5"> gonna have an integer</font><font color="#CCCCCC"> which can</font>

719
00:26:52,309 --> 00:26:56,450
support type<font color="#E5E5E5"> checking for four different</font>

720
00:26:53,779 --> 00:26:58,610
parameters so every single<font color="#E5E5E5"> bite</font><font color="#CCCCCC"> of that</font>

721
00:26:56,450 --> 00:27:01,330
unsigned int will represent the type<font color="#E5E5E5"> of</font>

722
00:26:58,610 --> 00:27:05,149
each<font color="#CCCCCC"> four of</font><font color="#E5E5E5"> each of the four parameters</font>

723
00:27:01,330 --> 00:27:08,210
<font color="#E5E5E5">now unfortunately they never</font><font color="#CCCCCC"> actually</font>

724
00:27:05,149 --> 00:27:10,459
checked per<font color="#E5E5E5"> M types so I can create a</font>

725
00:27:08,210 --> 00:27:13,519
secure storage file and the secure

726
00:27:10,460 --> 00:27:15,799
<font color="#E5E5E5">storage file is actually kind</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> like a</font>

727
00:27:13,519 --> 00:27:17,059
POSIX API<font color="#CCCCCC"> I can say I</font><font color="#E5E5E5"> want to</font><font color="#CCCCCC"> open the</font>

728
00:27:15,799 --> 00:27:18,889
file<font color="#E5E5E5"> and then it will hand me back an</font>

729
00:27:17,059 --> 00:27:20,360
opaque file descriptor or<font color="#CCCCCC"> a final handle</font>

730
00:27:18,889 --> 00:27:22,399
which I can say I<font color="#CCCCCC"> want to read or write</font>

731
00:27:20,360 --> 00:27:24,799
from so I can<font color="#E5E5E5"> open up the secure storage</font>

732
00:27:22,399 --> 00:27:26,629
file<font color="#CCCCCC"> keep in mind I have kernel</font><font color="#E5E5E5"> Co</font>

733
00:27:24,799 --> 00:27:28,399
<font color="#CCCCCC">solutions so I can now</font><font color="#E5E5E5"> log</font><font color="#CCCCCC"> into this</font>

734
00:27:26,629 --> 00:27:35,928
trust<font color="#E5E5E5"> lit and begin interacting</font><font color="#CCCCCC"> with</font>

735
00:27:28,399 --> 00:27:37,699
this API<font color="#CCCCCC"> and</font><font color="#E5E5E5"> then I can assume I can</font>

736
00:27:35,929 --> 00:27:40,070
<font color="#E5E5E5">tell it that when I want to read from it</font>

737
00:27:37,700 --> 00:27:42,409
I'm going to give you a an integer<font color="#E5E5E5"> as</font>

738
00:27:40,070 --> 00:27:45,259
your buffer argument and since it never

739
00:27:42,409 --> 00:27:48,019
<font color="#CCCCCC">actually checks those params integer</font>

740
00:27:45,259 --> 00:27:49,610
will now be used as the buffer and this

741
00:27:48,019 --> 00:27:52,519
<font color="#E5E5E5">essentially prevents them from being</font>

742
00:27:49,610 --> 00:27:54,168
<font color="#E5E5E5">able to type check and make sure</font><font color="#CCCCCC"> that</font>

743
00:27:52,519 --> 00:27:56,600
the buffer address is actually<font color="#CCCCCC"> pointing</font>

744
00:27:54,169 --> 00:27:58,369
to<font color="#E5E5E5"> a valid region</font><font color="#CCCCCC"> so what this causes is</font>

745
00:27:56,600 --> 00:28:03,439
essentially me to read or write to any

746
00:27:58,369 --> 00:28:06,529
place in<font color="#E5E5E5"> the trust itself</font><font color="#CCCCCC"> now the way</font>

747
00:28:03,440 --> 00:28:08,059
this so to give you<font color="#E5E5E5"> an analogy</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> this</font>

748
00:28:06,529 --> 00:28:10,639
is to be<font color="#E5E5E5"> similar to if you had a</font><font color="#CCCCCC"> Lynx</font>

749
00:28:08,059 --> 00:28:12,649
<font color="#E5E5E5">kernel or any kernel that never</font><font color="#CCCCCC"> actually</font>

750
00:28:10,639 --> 00:28:14,619
checked<font color="#E5E5E5"> the user land pointers that</font><font color="#CCCCCC"> you</font>

751
00:28:12,649 --> 00:28:16,789
<font color="#E5E5E5">passed in so when I say I want</font><font color="#CCCCCC"> to read</font>

752
00:28:14,619 --> 00:28:18,320
from the to this address

753
00:28:16,789 --> 00:28:19,460
what it's going<font color="#CCCCCC"> to do is when you say</font>

754
00:28:18,320 --> 00:28:21,830
the buffer<font color="#E5E5E5"> that you want to read into</font>

755
00:28:19,460 --> 00:28:23,240
must exist in user land<font color="#E5E5E5"> it cannot exist</font>

756
00:28:21,830 --> 00:28:24,499
in kernel land it's going to<font color="#E5E5E5"> check that</font>

757
00:28:23,240 --> 00:28:26,809
<font color="#E5E5E5">against some boundary between your user</font>

758
00:28:24,499 --> 00:28:29,389
land and your kernel<font color="#E5E5E5"> now that</font><font color="#CCCCCC"> track</font>

759
00:28:26,809 --> 00:28:31,190
never occurs<font color="#E5E5E5"> so what we can do is we can</font>

760
00:28:29,389 --> 00:28:32,899
<font color="#CCCCCC">just read data back into</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> trust</font>

761
00:28:31,190 --> 00:28:35,450
itself<font color="#E5E5E5"> and overwrite its function</font>

762
00:28:32,899 --> 00:28:37,610
pointers<font color="#E5E5E5"> or we can write data out of the</font>

763
00:28:35,450 --> 00:28:39,549
<font color="#E5E5E5">trust</font><font color="#CCCCCC"> and leek values from within side</font>

764
00:28:37,610 --> 00:28:42,619
<font color="#E5E5E5">of it</font>

765
00:28:39,549 --> 00:28:44,509
so how do we<font color="#E5E5E5"> actually exploit this and</font>

766
00:28:42,619 --> 00:28:46,539
this<font color="#E5E5E5"> is a different</font><font color="#CCCCCC"> kind of file format</font>

767
00:28:44,509 --> 00:28:49,669
it's not it like<font color="#E5E5E5"> a it's not your typical</font>

768
00:28:46,539 --> 00:28:51,110
<font color="#E5E5E5">form of a process in memory it's all</font>

769
00:28:49,669 --> 00:28:54,650
existing and<font color="#E5E5E5"> we're operating</font><font color="#CCCCCC"> context</font>

770
00:28:51,110 --> 00:28:58,010
so I was super versing<font color="#E5E5E5"> I found this team</font>

771
00:28:54,650 --> 00:29:00,610
<font color="#CCCCCC">Alec</font><font color="#E5E5E5"> which is</font><font color="#CCCCCC"> hi self-explanatory now it</font>

772
00:28:58,010 --> 00:29:03,920
uses<font color="#CCCCCC"> a table of function pointers to</font>

773
00:29:00,610 --> 00:29:06,409
implement different<font color="#CCCCCC"> size classes of</font>

774
00:29:03,920 --> 00:29:07,700
requests so what I<font color="#E5E5E5"> can do as long as I</font>

775
00:29:06,410 --> 00:29:12,890
can overwrite one of these pointers<font color="#E5E5E5"> with</font>

776
00:29:07,700 --> 00:29:17,960
my read am i right<font color="#CCCCCC"> I can actually get</font><font color="#E5E5E5"> a</font>

777
00:29:12,890 --> 00:29:20,090
<font color="#E5E5E5">PC program counter control when I caused</font>

778
00:29:17,960 --> 00:29:22,309
a malloc request to be made<font color="#E5E5E5"> now there's</font>

779
00:29:20,090 --> 00:29:23,449
<font color="#E5E5E5">one small problem</font><font color="#CCCCCC"> and like</font><font color="#E5E5E5"> I said I have</font>

780
00:29:22,309 --> 00:29:24,799
no<font color="#CCCCCC"> idea how this</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> actually mapped out</font>

781
00:29:23,450 --> 00:29:26,809
through<font color="#CCCCCC"> a lot</font><font color="#E5E5E5"> of painful experimentation</font>

782
00:29:24,799 --> 00:29:28,460
<font color="#CCCCCC">I found that</font><font color="#E5E5E5"> that there's this very</font>

783
00:29:26,809 --> 00:29:30,500
weird address space layout of a<font color="#CCCCCC"> trust</font>

784
00:29:28,460 --> 00:29:32,620
<font color="#E5E5E5">lit so if you remember the memory</font>

785
00:29:30,500 --> 00:29:36,080
reference<font color="#CCCCCC"> that I talked about earlier</font>

786
00:29:32,620 --> 00:29:37,909
<font color="#E5E5E5">they had this interesting thing where</font>

787
00:29:36,080 --> 00:29:40,668
they would<font color="#E5E5E5"> have to remap buffers in my</font>

788
00:29:37,910 --> 00:29:42,770
<font color="#E5E5E5">user land process wanted to pass up into</font>

789
00:29:40,669 --> 00:29:43,880
the trust<font color="#CCCCCC"> lit</font><font color="#E5E5E5"> now it turns out that</font>

790
00:29:42,770 --> 00:29:45,350
these memory references that are

791
00:29:43,880 --> 00:29:47,540
remapped in the trust was address space

792
00:29:45,350 --> 00:29:49,520
<font color="#CCCCCC">for actually readwrite executable so</font>

793
00:29:47,540 --> 00:29:50,809
this violates the property of NX<font color="#E5E5E5"> I</font>

794
00:29:49,520 --> 00:29:52,760
essentially have all these buffers which

795
00:29:50,809 --> 00:29:56,660
I control which have both writable and

796
00:29:52,760 --> 00:29:59,860
executable memory<font color="#CCCCCC"> so what this means is</font>

797
00:29:56,660 --> 00:30:02,059
that I can<font color="#E5E5E5"> point any of these T malloc</font>

798
00:29:59,860 --> 00:30:04,668
function pointers up into my memory

799
00:30:02,059 --> 00:30:07,240
references<font color="#E5E5E5"> and my fourth parameter to my</font>

800
00:30:04,669 --> 00:30:10,070
<font color="#E5E5E5">trusted</font><font color="#CCCCCC"> call can</font><font color="#E5E5E5"> be my shell code and</font>

801
00:30:07,240 --> 00:30:12,049
that makes<font color="#E5E5E5"> expedition very simple so</font>

802
00:30:10,070 --> 00:30:13,850
then as soon as I get that<font color="#E5E5E5"> email and</font>

803
00:30:12,049 --> 00:30:17,090
call and go can I do my reason<font color="#CCCCCC"> my rights</font>

804
00:30:13,850 --> 00:30:18,770
<font color="#CCCCCC">I can get code execution immediately and</font>

805
00:30:17,090 --> 00:30:20,689
have that<font color="#CCCCCC"> trusted code execution and</font>

806
00:30:18,770 --> 00:30:23,260
<font color="#E5E5E5">begin writing my final stage payload</font>

807
00:30:20,690 --> 00:30:26,840
which<font color="#E5E5E5"> executes or exploits the kernel</font>

808
00:30:23,260 --> 00:30:28,940
now this one small problem starting with

809
00:30:26,840 --> 00:30:30,500
the p9<font color="#CCCCCC"> trusted loading actually</font>

810
00:30:28,940 --> 00:30:31,790
implemented a<font color="#CCCCCC"> Salar which is the address</font>

811
00:30:30,500 --> 00:30:34,340
<font color="#E5E5E5">space layout randomization that I</font>

812
00:30:31,790 --> 00:30:36,200
mentioned<font color="#E5E5E5"> so I don't know where the</font><font color="#CCCCCC"> t</font>

813
00:30:34,340 --> 00:30:41,449
malloc address space is going<font color="#E5E5E5"> to</font>

814
00:30:36,200 --> 00:30:43,040
<font color="#E5E5E5">actually lie</font><font color="#CCCCCC"> but they only gave a solar</font>

815
00:30:41,450 --> 00:30:46,520
<font color="#CCCCCC">a</font><font color="#E5E5E5"> single byte of entropy which makes it</font>

816
00:30:43,040 --> 00:30:49,700
very<font color="#CCCCCC"> easy to brute-force so additionally</font>

817
00:30:46,520 --> 00:30:50,809
<font color="#E5E5E5">as soon as a trusted crashes is</font><font color="#CCCCCC"> there</font>

818
00:30:49,700 --> 00:30:52,580
meant<font color="#CCCCCC"> to</font><font color="#E5E5E5"> be very robust they'll</font>

819
00:30:50,809 --> 00:30:53,899
immediately<font color="#E5E5E5"> be loaded back up and</font>

820
00:30:52,580 --> 00:30:55,220
they're<font color="#CCCCCC"> actually putting the same exact</font>

821
00:30:53,900 --> 00:30:58,190
address<font color="#CCCCCC"> whichever originally load it</font>

822
00:30:55,220 --> 00:31:00,530
into so<font color="#E5E5E5"> I'm most there's 256 guesses I</font>

823
00:30:58,190 --> 00:31:02,000
need to make to hit that trust lit<font color="#CCCCCC"> but</font>

824
00:31:00,530 --> 00:31:04,310
even then there's another<font color="#CCCCCC"> problem and</font>

825
00:31:02,000 --> 00:31:06,950
<font color="#E5E5E5">that root has access to all these</font>

826
00:31:04,310 --> 00:31:12,010
log files<font color="#E5E5E5"> which just</font><font color="#CCCCCC"> revealed the ASL</font>

827
00:31:06,950 --> 00:31:14,420
<font color="#E5E5E5">are</font><font color="#CCCCCC"> out right so I can completely defeat</font>

828
00:31:12,010 --> 00:31:16,760
<font color="#E5E5E5">the trust Allah enlarges with</font><font color="#CCCCCC"> route</font>

829
00:31:14,420 --> 00:31:19,280
because they log any<font color="#E5E5E5"> crashes and I made</font>

830
00:31:16,760 --> 00:31:21,470
<font color="#E5E5E5">two tasks storage so if I find a single</font>

831
00:31:19,280 --> 00:31:24,200
<font color="#CCCCCC">Molony reference in any</font><font color="#E5E5E5"> of these apps I</font>

832
00:31:21,470 --> 00:31:25,310
<font color="#CCCCCC">can link their</font><font color="#E5E5E5"> aslr which is finding</font><font color="#CCCCCC"> in</font>

833
00:31:24,200 --> 00:31:32,960
<font color="#E5E5E5">all</font><font color="#CCCCCC"> the reference is pretty easy</font><font color="#E5E5E5"> to do</font>

834
00:31:25,310 --> 00:31:34,760
in these<font color="#CCCCCC"> applications so now we have</font>

835
00:31:32,960 --> 00:31:36,560
trusted<font color="#E5E5E5"> code execution</font><font color="#CCCCCC"> I have used the</font>

836
00:31:34,760 --> 00:31:38,960
leak to actually overwrite those

837
00:31:36,560 --> 00:31:41,990
function pointers in<font color="#E5E5E5"> T malloc now all I</font>

838
00:31:38,960 --> 00:31:45,500
need<font color="#CCCCCC"> to do is find a bug in the huawei</font>

839
00:31:41,990 --> 00:31:46,640
trusted core<font color="#E5E5E5"> itself in the kernel</font><font color="#CCCCCC"> so a</font>

840
00:31:45,500 --> 00:31:49,030
little bit<font color="#E5E5E5"> about what the</font><font color="#CCCCCC"> trust</font><font color="#E5E5E5"> own</font>

841
00:31:46,640 --> 00:31:51,980
kernel<font color="#E5E5E5"> does responsibilities it has</font>

842
00:31:49,030 --> 00:31:54,230
again it provides<font color="#E5E5E5"> IPC so actually when</font>

843
00:31:51,980 --> 00:31:55,850
I'm making<font color="#E5E5E5"> a</font><font color="#CCCCCC"> request through</font><font color="#E5E5E5"> the kernel</font>

844
00:31:54,230 --> 00:31:57,320
<font color="#E5E5E5">to talk to a trusted this is actually</font>

845
00:31:55,850 --> 00:31:58,699
<font color="#E5E5E5">hitting the trusted core first so it can</font>

846
00:31:57,320 --> 00:32:00,950
remap as an<font color="#E5E5E5"> Emory references but then</font>

847
00:31:58,700 --> 00:32:03,290
also it<font color="#E5E5E5"> will dispatch the</font><font color="#CCCCCC"> call to the</font>

848
00:32:00,950 --> 00:32:04,700
destination trust<font color="#CCCCCC"> light it supports the</font>

849
00:32:03,290 --> 00:32:08,149
memory address translation process which

850
00:32:04,700 --> 00:32:11,420
I just<font color="#E5E5E5"> mentioned and it also has all the</font>

851
00:32:08,150 --> 00:32:12,710
<font color="#CCCCCC">trusts in its address space so once we</font>

852
00:32:11,420 --> 00:32:14,120
have trusted core<font color="#E5E5E5"> access we can</font>

853
00:32:12,710 --> 00:32:17,810
<font color="#E5E5E5">hopefully find our fingerprint trust</font>

854
00:32:14,120 --> 00:32:20,330
<font color="#CCCCCC">light and do things to it like</font><font color="#E5E5E5"> make it</font>

855
00:32:17,810 --> 00:32:22,100
accept any fingerprint now there's one

856
00:32:20,330 --> 00:32:24,379
<font color="#E5E5E5">big</font><font color="#CCCCCC"> moaner ability here which anyone</font>

857
00:32:22,100 --> 00:32:26,270
<font color="#E5E5E5">with kernel exploitation experience or</font>

858
00:32:24,380 --> 00:32:28,280
kernel security auditing will probably

859
00:32:26,270 --> 00:32:29,990
familiar with<font color="#E5E5E5"> and</font><font color="#CCCCCC"> that is there's</font>

860
00:32:28,280 --> 00:32:32,230
<font color="#CCCCCC">absolutely no pointer sanitization so</font>

861
00:32:29,990 --> 00:32:34,730
every single<font color="#CCCCCC"> system called deny pass up</font>

862
00:32:32,230 --> 00:32:38,780
<font color="#CCCCCC">they'll never check those</font><font color="#E5E5E5"> pointer values</font>

863
00:32:34,730 --> 00:32:42,140
to make sure that they exist within<font color="#E5E5E5"> just</font>

864
00:32:38,780 --> 00:32:43,310
<font color="#CCCCCC">a trust</font><font color="#E5E5E5"> list address space now this is</font>

865
00:32:42,140 --> 00:32:45,590
partly I think because of<font color="#E5E5E5"> this weird</font>

866
00:32:43,310 --> 00:32:47,270
issue where they're actually mapping<font color="#CCCCCC"> the</font>

867
00:32:45,590 --> 00:32:49,520
trusted<font color="#E5E5E5"> core into the middle of memory</font>

868
00:32:47,270 --> 00:32:51,860
<font color="#E5E5E5">instead of at the</font><font color="#CCCCCC"> very top like you do</font>

869
00:32:49,520 --> 00:32:54,860
<font color="#CCCCCC">you seen a normal kernel for</font><font color="#E5E5E5"> example a</font>

870
00:32:51,860 --> 00:32:56,810
Linux kernel you have all of your<font color="#E5E5E5"> user</font>

871
00:32:54,860 --> 00:32:57,949
<font color="#E5E5E5">land apps in the bottom of memory at</font>

872
00:32:56,810 --> 00:32:59,840
lower addresses<font color="#E5E5E5"> and then you have your</font>

873
00:32:57,950 --> 00:33:01,670
kernel at higher addresses and it makes

874
00:32:59,840 --> 00:33:03,080
<font color="#CCCCCC">it very easy</font><font color="#E5E5E5"> to check</font><font color="#CCCCCC"> between</font><font color="#E5E5E5"> legitimate</font>

875
00:33:01,670 --> 00:33:05,690
pointers to legitimate user land

876
00:33:03,080 --> 00:33:07,100
pointers and kernel pointers but because

877
00:33:05,690 --> 00:33:09,350
they have this trusted core in a weird

878
00:33:07,100 --> 00:33:11,030
location<font color="#CCCCCC"> it's not as easy for</font><font color="#E5E5E5"> them to</font>

879
00:33:09,350 --> 00:33:12,889
<font color="#E5E5E5">make this check and I don't know what</font>

880
00:33:11,030 --> 00:33:18,080
rationally<font color="#E5E5E5"> trust are doing it but it</font>

881
00:33:12,890 --> 00:33:21,080
causes<font color="#CCCCCC"> problems so this means that I</font>

882
00:33:18,080 --> 00:33:22,668
<font color="#E5E5E5">to actually exploit the</font><font color="#CCCCCC"> trusted</font><font color="#E5E5E5"> core</font><font color="#CCCCCC"> i</font>

883
00:33:21,080 --> 00:33:24,408
mostly<font color="#CCCCCC"> seem to</font><font color="#E5E5E5"> reverse-engineer the</font>

884
00:33:22,669 --> 00:33:25,970
<font color="#E5E5E5">kernel and find a strange sequence of</font>

885
00:33:24,409 --> 00:33:29,269
system<font color="#E5E5E5"> calls which will give me a</font>

886
00:33:25,970 --> 00:33:31,100
magical<font color="#E5E5E5"> right what where which is the</font>

887
00:33:29,269 --> 00:33:32,659
<font color="#E5E5E5">holy</font><font color="#CCCCCC"> grail means</font><font color="#E5E5E5"> I can write any value I</font>

888
00:33:31,100 --> 00:33:34,370
want<font color="#E5E5E5"> to any address I want in the kernel</font>

889
00:33:32,659 --> 00:33:37,340
and that alone<font color="#E5E5E5"> should be enough to get</font>

890
00:33:34,370 --> 00:33:39,289
<font color="#E5E5E5">me a code execution so a little bit</font>

891
00:33:37,340 --> 00:33:40,370
<font color="#E5E5E5">about the trusted core environment what</font>

892
00:33:39,289 --> 00:33:41,269
<font color="#E5E5E5">kind of security</font><font color="#CCCCCC"> mitigation is we're</font>

893
00:33:40,370 --> 00:33:43,129
dealing<font color="#CCCCCC"> with</font>

894
00:33:41,269 --> 00:33:45,860
there is<font color="#E5E5E5"> no a SLR</font><font color="#CCCCCC"> or I guess in this</font>

895
00:33:43,130 --> 00:33:47,870
<font color="#E5E5E5">case should be KS or</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> but there are</font>

896
00:33:45,860 --> 00:33:49,039
in this kind<font color="#CCCCCC"> of country so they just set</font>

897
00:33:47,870 --> 00:33:50,719
<font color="#CCCCCC">up at no</font><font color="#E5E5E5"> point in position there are</font>

898
00:33:49,039 --> 00:33:52,970
<font color="#E5E5E5">some</font><font color="#CCCCCC"> functions which strangely do have</font>

899
00:33:50,720 --> 00:33:55,309
<font color="#CCCCCC">hard-coded</font><font color="#E5E5E5"> balance tracks so mem copy</font>

900
00:33:52,970 --> 00:33:56,539
<font color="#CCCCCC">and said the</font><font color="#E5E5E5"> trusted core does check to</font>

901
00:33:55,309 --> 00:33:58,120
see if it exists<font color="#E5E5E5"> within those boundaries</font>

902
00:33:56,539 --> 00:34:00,799
but almost<font color="#E5E5E5"> everything else does</font><font color="#CCCCCC"> not</font>

903
00:33:58,120 --> 00:34:03,110
there is<font color="#CCCCCC"> something</font><font color="#E5E5E5"> something called pxn</font>

904
00:34:00,799 --> 00:34:06,620
which stands for page<font color="#CCCCCC"> executes never</font>

905
00:34:03,110 --> 00:34:09,379
this<font color="#E5E5E5"> is an</font><font color="#CCCCCC"> armed mitigation which says</font>

906
00:34:06,620 --> 00:34:12,020
<font color="#CCCCCC">that</font><font color="#E5E5E5"> I can't execute code in</font><font color="#CCCCCC"> userspace</font>

907
00:34:09,379 --> 00:34:13,668
<font color="#CCCCCC">so back</font><font color="#E5E5E5"> in the old days I</font><font color="#CCCCCC"> used to be</font>

908
00:34:12,020 --> 00:34:15,530
able<font color="#E5E5E5"> to put a shellcode</font><font color="#CCCCCC"> payload</font>

909
00:34:13,668 --> 00:34:16,759
dimensional<font color="#E5E5E5"> in process I would write a</font>

910
00:34:15,530 --> 00:34:18,919
function<font color="#E5E5E5"> pointer over in the kernel and</font>

911
00:34:16,760 --> 00:34:20,810
I would just say execute my kernel

912
00:34:18,918 --> 00:34:23,388
exploit payload<font color="#CCCCCC"> and user lands</font><font color="#E5E5E5"> and it</font>

913
00:34:20,810 --> 00:34:25,099
would oblige<font color="#E5E5E5"> but it will no longer do</font>

914
00:34:23,389 --> 00:34:29,179
<font color="#CCCCCC">that arm has protections against that</font>

915
00:34:25,099 --> 00:34:32,149
there's also no pan or so I<font color="#CCCCCC"> can't access</font>

916
00:34:29,179 --> 00:34:33,500
<font color="#CCCCCC">user space just fine so this</font><font color="#E5E5E5"> is for page</font>

917
00:34:32,149 --> 00:34:34,759
access Denver if you're familiar with

918
00:34:33,500 --> 00:34:37,219
<font color="#E5E5E5">these you might be familiar with their</font>

919
00:34:34,760 --> 00:34:39,139
x86 equivalents<font color="#E5E5E5"> which are SMAP and SMAP</font>

920
00:34:37,219 --> 00:34:40,699
which are like supervisor mode access

921
00:34:39,139 --> 00:34:44,240
<font color="#E5E5E5">protection and supervisor supervisor</font>

922
00:34:40,699 --> 00:34:47,719
<font color="#CCCCCC">mode execution protection these</font><font color="#E5E5E5"> are</font>

923
00:34:44,239 --> 00:34:49,609
essentially equivalents<font color="#E5E5E5"> so with the</font><font color="#CCCCCC"> axis</font>

924
00:34:47,719 --> 00:34:51,859
<font color="#E5E5E5">never what what which should occur is</font>

925
00:34:49,609 --> 00:34:54,379
that<font color="#E5E5E5"> if I ever want</font><font color="#CCCCCC"> to access an address</font>

926
00:34:51,859 --> 00:34:55,879
<font color="#E5E5E5">and userland</font><font color="#CCCCCC"> I have to go through a gate</font>

927
00:34:54,379 --> 00:34:57,170
first<font color="#E5E5E5"> and the</font><font color="#CCCCCC"> kernel will say ok I'm</font>

928
00:34:55,879 --> 00:34:58,700
gonna briefly turn off this mitigation

929
00:34:57,170 --> 00:34:59,660
and<font color="#E5E5E5"> do whatever</font><font color="#CCCCCC"> access is uni on this</font>

930
00:34:58,700 --> 00:35:01,580
usually in structure but<font color="#E5E5E5"> then</font>

931
00:34:59,660 --> 00:35:03,830
immediately<font color="#E5E5E5"> return and</font><font color="#CCCCCC"> make sure that</font>

932
00:35:01,580 --> 00:35:04,940
<font color="#E5E5E5">any other</font><font color="#CCCCCC"> accesses</font><font color="#E5E5E5"> violate so there's no</font>

933
00:35:03,830 --> 00:35:07,069
gate we have<font color="#CCCCCC"> to go through which makes</font>

934
00:35:04,940 --> 00:35:09,950
it quite<font color="#CCCCCC"> a bit easier to</font><font color="#E5E5E5"> do exploitation</font>

935
00:35:07,070 --> 00:35:11,630
now<font color="#CCCCCC"> there's also no DEP which stands for</font>

936
00:35:09,950 --> 00:35:15,680
<font color="#E5E5E5">data execution prevention this is</font>

937
00:35:11,630 --> 00:35:16,780
similar<font color="#E5E5E5"> to</font><font color="#CCCCCC"> right X or X which is you</font>

938
00:35:15,680 --> 00:35:20,450
can't have writable and executable

939
00:35:16,780 --> 00:35:21,680
memory that<font color="#E5E5E5"> exists at the same time</font><font color="#CCCCCC"> so</font>

940
00:35:20,450 --> 00:35:23,149
this<font color="#E5E5E5"> means that our kernel heap is</font>

941
00:35:21,680 --> 00:35:24,919
executable which makes it a great<font color="#E5E5E5"> place</font>

942
00:35:23,150 --> 00:35:27,830
<font color="#E5E5E5">to store shellcode</font>

943
00:35:24,920 --> 00:35:30,470
now interestingly<font color="#CCCCCC"> for</font><font color="#E5E5E5"> a kernel with only</font>

944
00:35:27,830 --> 00:35:31,460
about<font color="#E5E5E5"> nine different processes</font><font color="#CCCCCC"> it</font>

945
00:35:30,470 --> 00:35:33,410
<font color="#CCCCCC">actually has about</font>

946
00:35:31,460 --> 00:35:36,260
different system calls<font color="#E5E5E5"> now I don't know</font>

947
00:35:33,410 --> 00:35:37,730
why it<font color="#E5E5E5"> needs so many system calls</font><font color="#CCCCCC"> but I</font>

948
00:35:36,260 --> 00:35:39,130
suspect<font color="#E5E5E5"> this is something do with</font><font color="#CCCCCC"> Huawei</font>

949
00:35:37,730 --> 00:35:41,150
just completely<font color="#CCCCCC"> ripping off another</font>

950
00:35:39,130 --> 00:35:43,670
real-time operating system kernel<font color="#E5E5E5"> that</font>

951
00:35:41,150 --> 00:35:47,660
they found online<font color="#CCCCCC"> that has all this</font>

952
00:35:43,670 --> 00:35:48,890
functionality<font color="#E5E5E5"> they don't need so some of</font>

953
00:35:47,660 --> 00:35:51,589
these are<font color="#E5E5E5"> also behind permission checks</font>

954
00:35:48,890 --> 00:35:53,859
which will stop us from having as large

955
00:35:51,589 --> 00:35:57,080
of<font color="#E5E5E5"> an attack</font><font color="#CCCCCC"> servers</font><font color="#E5E5E5"> as we would like</font>

956
00:35:53,859 --> 00:35:58,580
now<font color="#E5E5E5"> there are a number of primitives in</font>

957
00:35:57,080 --> 00:36:01,819
here that exist<font color="#E5E5E5"> for a different system</font>

958
00:35:58,580 --> 00:36:03,650
calls and<font color="#E5E5E5"> this is a bit more of a</font>

959
00:36:01,820 --> 00:36:04,700
pedantic slide if you<font color="#CCCCCC"> found the rest of</font>

960
00:36:03,650 --> 00:36:08,060
the talk pedantic this is going to be

961
00:36:04,700 --> 00:36:10,399
really bad<font color="#CCCCCC"> so there's no magical like</font>

962
00:36:08,060 --> 00:36:11,779
right<font color="#CCCCCC"> arg1 to our Gojira</font><font color="#E5E5E5"> call which is</font>

963
00:36:10,400 --> 00:36:13,280
<font color="#E5E5E5">what we'd want we would love to</font><font color="#CCCCCC"> find a</font>

964
00:36:11,780 --> 00:36:14,750
<font color="#CCCCCC">system call which just would</font><font color="#E5E5E5"> take our</font>

965
00:36:13,280 --> 00:36:17,270
first argument<font color="#E5E5E5"> and write to whatever</font>

966
00:36:14,750 --> 00:36:19,760
<font color="#E5E5E5">address whatever pointer is in our zero</font>

967
00:36:17,270 --> 00:36:21,470
with argument or vice versa<font color="#CCCCCC"> now we don't</font>

968
00:36:19,760 --> 00:36:24,980
<font color="#E5E5E5">have</font><font color="#CCCCCC"> that but we do have</font><font color="#E5E5E5"> other</font><font color="#CCCCCC"> room</font>

969
00:36:21,470 --> 00:36:27,020
parameters so we<font color="#E5E5E5"> can allocate</font><font color="#CCCCCC"> a 16 byte</font>

970
00:36:24,980 --> 00:36:29,150
string we control and we<font color="#CCCCCC"> can</font><font color="#E5E5E5"> write the</font>

971
00:36:27,020 --> 00:36:30,470
pointer of<font color="#CCCCCC"> that</font><font color="#E5E5E5"> to the allocation</font>

972
00:36:29,150 --> 00:36:31,450
anywhere in the kernel that's pretty

973
00:36:30,470 --> 00:36:33,799
nice

974
00:36:31,450 --> 00:36:34,970
we can<font color="#CCCCCC"> allocate an arbitrary science</font>

975
00:36:33,800 --> 00:36:36,980
kernel heat buffer and return<font color="#CCCCCC"> this</font>

976
00:36:34,970 --> 00:36:38,899
address this doesn't sound<font color="#E5E5E5"> very juicy</font>

977
00:36:36,980 --> 00:36:40,970
but it's actually pretty weird<font color="#CCCCCC"> if you</font>

978
00:36:38,900 --> 00:36:43,580
<font color="#E5E5E5">imagine a Linux kernel system</font><font color="#CCCCCC"> coal that</font>

979
00:36:40,970 --> 00:36:45,109
would allocate a kernel heat buffer and

980
00:36:43,580 --> 00:36:46,130
<font color="#E5E5E5">then return</font><font color="#CCCCCC"> that kernel intrastate user</font>

981
00:36:45,109 --> 00:36:48,680
land<font color="#E5E5E5"> that's essentially the equivalent</font>

982
00:36:46,130 --> 00:36:50,480
you have<font color="#CCCCCC"> that'd be very</font><font color="#E5E5E5"> strange</font><font color="#CCCCCC"> we can</font>

983
00:36:48,680 --> 00:36:51,830
also write an uncontrolled dynamic value

984
00:36:50,480 --> 00:36:53,480
from a<font color="#CCCCCC"> linked</font><font color="#E5E5E5"> list into the kernel</font><font color="#CCCCCC"> I</font>

985
00:36:51,830 --> 00:36:56,089
know that sounds<font color="#E5E5E5"> odd but</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> can be</font>

986
00:36:53,480 --> 00:36:57,560
<font color="#CCCCCC">used</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> essentially use this at will so</font>

987
00:36:56,089 --> 00:37:00,080
once we can<font color="#E5E5E5"> fill that linked list we can</font>

988
00:36:57,560 --> 00:37:01,790
write values<font color="#E5E5E5"> anywhere we want now we can</font>

989
00:37:00,080 --> 00:37:04,130
also<font color="#CCCCCC"> copy the</font><font color="#E5E5E5"> trustus process name to an</font>

990
00:37:01,790 --> 00:37:06,200
arbitrary address this<font color="#E5E5E5"> is not</font><font color="#CCCCCC"> as nice as</font>

991
00:37:04,130 --> 00:37:08,450
<font color="#CCCCCC">it sounds because we can't change the</font>

992
00:37:06,200 --> 00:37:09,919
<font color="#CCCCCC">name of our trusted processes there's no</font>

993
00:37:08,450 --> 00:37:12,799
nice system call to do that or at<font color="#CCCCCC"> least</font>

994
00:37:09,920 --> 00:37:16,190
one that<font color="#CCCCCC"> I could</font><font color="#E5E5E5"> not find and then we</font>

995
00:37:12,800 --> 00:37:18,740
have another bug<font color="#E5E5E5"> which well via an</font>

996
00:37:16,190 --> 00:37:22,550
overflow this isn't good point<font color="#CCCCCC"> player</font>

997
00:37:18,740 --> 00:37:24,229
sanitization we can get a leak<font color="#E5E5E5"> so we can</font>

998
00:37:22,550 --> 00:37:26,510
have<font color="#CCCCCC"> leak values from the kernel</font>

999
00:37:24,230 --> 00:37:27,619
arbitrarily<font color="#E5E5E5"> okay so this is my most</font><font color="#CCCCCC"> been</font>

1000
00:37:26,510 --> 00:37:29,720
<font color="#CCCCCC">anything</font><font color="#E5E5E5"> slide I'm not going to really</font>

1001
00:37:27,619 --> 00:37:31,040
go over<font color="#E5E5E5"> all this if you're curious</font><font color="#CCCCCC"> I</font>

1002
00:37:29,720 --> 00:37:33,290
suggest you talk to me about<font color="#CCCCCC"> about</font><font color="#E5E5E5"> it</font>

1003
00:37:31,040 --> 00:37:35,570
before but<font color="#E5E5E5"> we essentially do is allocate</font>

1004
00:37:33,290 --> 00:37:37,390
a kernel buffer to store<font color="#CCCCCC"> shellcode in we</font>

1005
00:37:35,570 --> 00:37:40,880
<font color="#E5E5E5">leak the address of our process name</font>

1006
00:37:37,390 --> 00:37:42,589
pointer<font color="#E5E5E5"> so he has a</font><font color="#CCCCCC"> a giant table</font><font color="#E5E5E5"> of</font>

1007
00:37:40,880 --> 00:37:44,480
string pointers we should have all<font color="#E5E5E5"> other</font>

1008
00:37:42,589 --> 00:37:45,110
processes<font color="#E5E5E5"> name in it you find where that</font>

1009
00:37:44,480 --> 00:37:47,030
exists

1010
00:37:45,110 --> 00:37:50,060
<font color="#E5E5E5">as we have that we're going to point</font>

1011
00:37:47,030 --> 00:37:51,710
<font color="#E5E5E5">this linked list</font><font color="#CCCCCC"> to a small snippet</font><font color="#E5E5E5"> of</font>

1012
00:37:50,060 --> 00:37:53,690
<font color="#E5E5E5">16 bytes we control so we control some</font>

1013
00:37:51,710 --> 00:37:55,460
<font color="#E5E5E5">the linked list</font><font color="#CCCCCC"> we're</font><font color="#E5E5E5"> gonna point</font><font color="#CCCCCC"> that</font>

1014
00:37:53,690 --> 00:37:56,900
<font color="#E5E5E5">to our stack and then we can essentially</font>

1015
00:37:55,460 --> 00:37:58,910
do is<font color="#E5E5E5"> we're gonna continue</font><font color="#CCCCCC"> to unlink</font>

1016
00:37:56,900 --> 00:38:00,740
this list and<font color="#E5E5E5"> get it to arbitrary</font><font color="#CCCCCC"> writes</font>

1017
00:37:58,910 --> 00:38:03,529
for us<font color="#E5E5E5"> and then once we're doing those</font>

1018
00:38:00,740 --> 00:38:05,120
<font color="#CCCCCC">on</font><font color="#E5E5E5"> links from our stack we're going to</font>

1019
00:38:03,530 --> 00:38:06,500
write<font color="#CCCCCC"> kernel shellcode</font><font color="#E5E5E5"> into that</font>

1020
00:38:05,120 --> 00:38:07,730
criminal buffer that<font color="#E5E5E5"> we just allocated</font>

1021
00:38:06,500 --> 00:38:10,910
and then we're gonna overwrite a

1022
00:38:07,730 --> 00:38:13,010
function pointer<font color="#CCCCCC"> in the huawei trusted</font>

1023
00:38:10,910 --> 00:38:15,620
core which there are plenty of and we're

1024
00:38:13,010 --> 00:38:16,910
going to make<font color="#E5E5E5"> that function pointer get</font>

1025
00:38:15,620 --> 00:38:18,319
executed<font color="#E5E5E5"> and as soon as</font><font color="#CCCCCC"> that happens</font>

1026
00:38:16,910 --> 00:38:21,379
we're<font color="#E5E5E5"> gonna be executing trusted</font>

1027
00:38:18,320 --> 00:38:22,520
<font color="#E5E5E5">shellcode now that I know</font><font color="#CCCCCC"> that sounds</font>

1028
00:38:21,380 --> 00:38:23,870
really<font color="#CCCCCC"> exciting that pretty much</font><font color="#E5E5E5"> means</font>

1029
00:38:22,520 --> 00:38:26,300
were done<font color="#E5E5E5"> there's actually one</font>

1030
00:38:23,870 --> 00:38:27,410
interesting problem left<font color="#E5E5E5"> and that's I</font>

1031
00:38:26,300 --> 00:38:29,810
actually had no<font color="#CCCCCC"> idea where the</font>

1032
00:38:27,410 --> 00:38:34,879
fingerprint logic<font color="#CCCCCC"> actually was so if you</font>

1033
00:38:29,810 --> 00:38:37,640
take<font color="#E5E5E5"> your trusted execution environment</font>

1034
00:38:34,880 --> 00:38:39,710
OS image<font color="#CCCCCC"> off the phone you're</font><font color="#E5E5E5"> gonna get</font>

1035
00:38:37,640 --> 00:38:41,569
this blob with about seven different<font color="#E5E5E5"> or</font>

1036
00:38:39,710 --> 00:38:42,920
six different<font color="#E5E5E5"> else in it some of these</font>

1037
00:38:41,570 --> 00:38:45,020
are<font color="#E5E5E5"> kind</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> self-explanatory like your</font>

1038
00:38:42,920 --> 00:38:46,460
key master<font color="#E5E5E5"> and your secure storage but</font>

1039
00:38:45,020 --> 00:38:49,430
there's nothing in there which looks

1040
00:38:46,460 --> 00:38:50,780
like<font color="#CCCCCC"> a</font><font color="#E5E5E5"> fingerprint module for one this</font>

1041
00:38:49,430 --> 00:38:53,990
<font color="#CCCCCC">should be</font><font color="#E5E5E5"> pretty</font><font color="#CCCCCC"> large they're probably</font>

1042
00:38:50,780 --> 00:38:54,980
<font color="#CCCCCC">larger than</font><font color="#E5E5E5"> 100k fingerprint logic or if</font>

1043
00:38:53,990 --> 00:38:56,540
you're<font color="#E5E5E5"> protecting</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is kind of</font>

1044
00:38:54,980 --> 00:38:58,100
<font color="#E5E5E5">complex logic which will require some</font>

1045
00:38:56,540 --> 00:39:02,360
form<font color="#E5E5E5"> of like image recognition or image</font>

1046
00:38:58,100 --> 00:39:03,770
matching<font color="#E5E5E5"> so where is it so where</font><font color="#CCCCCC"> I had</font>

1047
00:39:02,360 --> 00:39:06,290
to do was follow the userland

1048
00:39:03,770 --> 00:39:09,320
fingerprint the around and see what kind

1049
00:39:06,290 --> 00:39:13,009
of<font color="#E5E5E5"> stuff it was mapping</font><font color="#CCCCCC"> now the reason</font>

1050
00:39:09,320 --> 00:39:14,240
<font color="#E5E5E5">this is is to support for Android to</font>

1051
00:39:13,010 --> 00:39:17,390
support so<font color="#E5E5E5"> many different</font>

1052
00:39:14,240 --> 00:39:19,370
implementations the way an OEM like

1053
00:39:17,390 --> 00:39:20,870
<font color="#CCCCCC">Huawei has to hook into</font><font color="#E5E5E5"> this is they</font>

1054
00:39:19,370 --> 00:39:22,580
need<font color="#E5E5E5"> to provide a library that gets</font>

1055
00:39:20,870 --> 00:39:26,029
<font color="#E5E5E5">loaded into fingerprint D that has an</font>

1056
00:39:22,580 --> 00:39:27,740
API that<font color="#CCCCCC"> it</font><font color="#E5E5E5"> uses so there was an</font>

1057
00:39:26,030 --> 00:39:29,300
interesting library called<font color="#CCCCCC"> FBC</font><font color="#E5E5E5"> tax</font>

1058
00:39:27,740 --> 00:39:32,450
shared<font color="#E5E5E5"> I think</font><font color="#CCCCCC"> it stands for fingerprint</font>

1059
00:39:29,300 --> 00:39:35,110
<font color="#E5E5E5">something tack trusted agent</font><font color="#CCCCCC"> something I</font>

1060
00:39:32,450 --> 00:39:37,370
<font color="#E5E5E5">don't know what</font><font color="#CCCCCC"> the C is in either case</font>

1061
00:39:35,110 --> 00:39:39,080
<font color="#E5E5E5">but it has this really</font><font color="#CCCCCC"> interesting</font><font color="#E5E5E5"> Blom</font>

1062
00:39:37,370 --> 00:39:42,350
in it where it takes this hard-coded

1063
00:39:39,080 --> 00:39:45,860
paths with a UUID<font color="#E5E5E5"> dot</font><font color="#CCCCCC"> SEC and</font><font color="#E5E5E5"> then it</font>

1064
00:39:42,350 --> 00:39:49,250
calls<font color="#CCCCCC"> TKE open session on that so this</font>

1065
00:39:45,860 --> 00:39:51,560
<font color="#E5E5E5">is going to cause</font><font color="#CCCCCC"> us to have well this</font>

1066
00:39:49,250 --> 00:39:53,420
causes a<font color="#E5E5E5"> lot</font><font color="#CCCCCC"> of questions right what</font>

1067
00:39:51,560 --> 00:39:55,160
what is<font color="#E5E5E5"> this if you want to file on</font><font color="#CCCCCC"> it</font>

1068
00:39:53,420 --> 00:39:57,050
it's certainly<font color="#E5E5E5"> not an elf</font><font color="#CCCCCC"> and just as</font>

1069
00:39:55,160 --> 00:39:59,118
data<font color="#CCCCCC"> so this</font><font color="#E5E5E5"> is actually encrypted trust</font>

1070
00:39:57,050 --> 00:40:01,160
lit now why<font color="#CCCCCC"> wall wave</font>

1071
00:39:59,119 --> 00:40:02,539
need to encrypt this trust<font color="#E5E5E5"> lid begs a</font>

1072
00:40:01,160 --> 00:40:04,879
lot of questions about<font color="#E5E5E5"> where while we</font>

1073
00:40:02,539 --> 00:40:06,380
got this fingerprint<font color="#CCCCCC"> tracking logic I</font>

1074
00:40:04,880 --> 00:40:08,809
don't know I've heard from<font color="#E5E5E5"> some people</font>

1075
00:40:06,380 --> 00:40:10,460
<font color="#E5E5E5">they think it might</font><font color="#CCCCCC"> be stolen which</font>

1076
00:40:08,809 --> 00:40:12,109
would seem<font color="#CCCCCC"> very likely to me but I don't</font>

1077
00:40:10,460 --> 00:40:18,170
<font color="#CCCCCC">know it's just a rumor</font>

1078
00:40:12,109 --> 00:40:21,259
now what do we do<font color="#E5E5E5"> with with this so if</font>

1079
00:40:18,170 --> 00:40:23,089
the trusted core code<font color="#E5E5E5"> exec we can dump</font>

1080
00:40:21,259 --> 00:40:24,980
the<font color="#E5E5E5"> cripton memory so although it's</font>

1081
00:40:23,089 --> 00:40:26,839
encrypted<font color="#E5E5E5"> we can get around that because</font>

1082
00:40:24,980 --> 00:40:28,369
<font color="#CCCCCC">we're figure we're checking</font><font color="#E5E5E5"> to work the</font>

1083
00:40:26,839 --> 00:40:29,029
code<font color="#E5E5E5"> must be decrypted somewhere in</font>

1084
00:40:28,369 --> 00:40:31,369
<font color="#CCCCCC">memory right</font>

1085
00:40:29,029 --> 00:40:35,059
so<font color="#CCCCCC"> we have</font><font color="#E5E5E5"> the code execution actually</font>

1086
00:40:31,369 --> 00:40:36,950
<font color="#E5E5E5">working what we can do is crawl</font><font color="#CCCCCC"> the</font>

1087
00:40:35,059 --> 00:40:39,170
address space and find any arm

1088
00:40:36,950 --> 00:40:40,578
instructions so<font color="#CCCCCC"> it</font><font color="#E5E5E5"> can be blindly going</font>

1089
00:40:39,170 --> 00:40:42,230
through an entire address<font color="#CCCCCC"> space as a</font>

1090
00:40:40,579 --> 00:40:44,150
<font color="#CCCCCC">trusted colonel looking for</font><font color="#E5E5E5"> arm</font>

1091
00:40:42,230 --> 00:40:45,109
instructions and once we find some<font color="#E5E5E5"> we're</font>

1092
00:40:44,150 --> 00:40:46,519
going<font color="#E5E5E5"> to be looking for string</font>

1093
00:40:45,109 --> 00:40:47,690
references for things like<font color="#E5E5E5"> fingerprint</font>

1094
00:40:46,519 --> 00:40:49,459
and fingerprint<font color="#E5E5E5"> dean FBC</font>

1095
00:40:47,690 --> 00:40:52,039
and this very naive approach<font color="#E5E5E5"> actually</font>

1096
00:40:49,460 --> 00:40:54,170
worked in my case I was able<font color="#CCCCCC"> to find the</font>

1097
00:40:52,039 --> 00:40:56,900
fingerprint checking logic just<font color="#E5E5E5"> via this</font>

1098
00:40:54,170 --> 00:40:59,660
once I found fingerprint<font color="#E5E5E5"> the fingerprint</font>

1099
00:40:56,900 --> 00:41:01,490
D strings<font color="#CCCCCC"> it'll crawl up and find the</font>

1100
00:40:59,660 --> 00:41:04,249
elf header and then very gracefully just

1101
00:41:01,490 --> 00:41:06,470
extract<font color="#E5E5E5"> the entire elf interestingly</font>

1102
00:41:04,249 --> 00:41:08,390
enough when<font color="#E5E5E5"> I pulled it out decrypted it</font>

1103
00:41:06,470 --> 00:41:09,980
had symbols in it<font color="#CCCCCC"> so it</font><font color="#E5E5E5"> was</font><font color="#CCCCCC"> very</font><font color="#E5E5E5"> easy to</font>

1104
00:41:08,390 --> 00:41:12,950
reverse<font color="#CCCCCC"> I think there was actually a</font>

1105
00:41:09,980 --> 00:41:14,539
function called<font color="#E5E5E5"> identify image and</font><font color="#CCCCCC"> that</font>

1106
00:41:12,950 --> 00:41:16,538
logic<font color="#E5E5E5"> was essentially just returned to 0</font>

1107
00:41:14,539 --> 00:41:19,849
or<font color="#E5E5E5"> 1 based off whether that was the</font>

1108
00:41:16,539 --> 00:41:22,119
<font color="#E5E5E5">correct fingerprint so I just whipped up</font>

1109
00:41:19,849 --> 00:41:25,059
<font color="#E5E5E5">about</font><font color="#CCCCCC"> 3 different arm instructions to</font>

1110
00:41:22,119 --> 00:41:27,710
null out<font color="#E5E5E5"> that logic and write a 0 for</font>

1111
00:41:25,059 --> 00:41:30,230
<font color="#CCCCCC">correct I don't know why this was</font>

1112
00:41:27,710 --> 00:41:33,279
<font color="#CCCCCC">inverse</font><font color="#E5E5E5"> but they said</font><font color="#CCCCCC"> 0 was correct and</font>

1113
00:41:30,230 --> 00:41:35,599
then<font color="#CCCCCC"> return and</font><font color="#E5E5E5"> once that Patrick heard</font>

1114
00:41:33,279 --> 00:41:37,970
<font color="#CCCCCC">we were done that</font><font color="#E5E5E5"> actually actually</font>

1115
00:41:35,599 --> 00:41:43,150
<font color="#E5E5E5">finished it now that's essentially the</font>

1116
00:41:37,970 --> 00:41:47,680
end of the slides<font color="#E5E5E5"> but I have a demo</font>

1117
00:41:43,150 --> 00:41:50,029
where<font color="#CCCCCC"> I unlock</font><font color="#E5E5E5"> the phone with my nose so</font>

1118
00:41:47,680 --> 00:41:52,519
<font color="#E5E5E5">here he goes a first of all a little bit</font>

1119
00:41:50,029 --> 00:41:53,539
<font color="#CCCCCC">of imitation wants</font><font color="#E5E5E5"> to I don't like</font><font color="#CCCCCC"> the</font>

1120
00:41:52,519 --> 00:41:57,499
<font color="#E5E5E5">volunteer things I'm not gonna ask</font>

1121
00:41:53,539 --> 00:41:59,450
anyone to come up<font color="#E5E5E5"> but so as an example I</font>

1122
00:41:57,499 --> 00:42:01,910
have the locked phone I'm<font color="#CCCCCC"> sorry if it's</font>

1123
00:41:59,450 --> 00:42:06,379
hard<font color="#E5E5E5"> to see I can use my index finger to</font>

1124
00:42:01,910 --> 00:42:07,848
unlock it<font color="#CCCCCC"> ok I cannot</font><font color="#E5E5E5"> use this index</font>

1125
00:42:06,380 --> 00:42:11,150
finger to unlock it I know this<font color="#CCCCCC"> isn't</font>

1126
00:42:07,849 --> 00:42:13,240
very<font color="#E5E5E5"> convincing</font><font color="#CCCCCC"> but it's working so I</font>

1127
00:42:11,150 --> 00:42:17,330
can't I can't use my nose either

1128
00:42:13,240 --> 00:42:19,129
<font color="#E5E5E5">it won't work now</font><font color="#CCCCCC"> just a second</font><font color="#E5E5E5"> now I'm</font>

1129
00:42:17,330 --> 00:42:21,710
going to run the user the<font color="#CCCCCC"> untrusted app</font>

1130
00:42:19,130 --> 00:42:24,730
I have installed here<font color="#CCCCCC"> alright it's</font>

1131
00:42:21,710 --> 00:42:29,480
running<font color="#E5E5E5"> it's not 100% reliable</font>

1132
00:42:24,730 --> 00:42:32,240
<font color="#E5E5E5">okay oh just one more time</font><font color="#CCCCCC"> it just</font>

1133
00:42:29,480 --> 00:42:35,590
crashed<font color="#CCCCCC"> so I have to write</font><font color="#E5E5E5"> again this is</font>

1134
00:42:32,240 --> 00:42:37,609
this is actually<font color="#E5E5E5"> a this is not a</font>

1135
00:42:35,590 --> 00:42:42,070
production piece of software this<font color="#E5E5E5"> is</font>

1136
00:42:37,610 --> 00:42:44,840
just proof<font color="#E5E5E5"> of concept so one moment</font>

1137
00:42:42,070 --> 00:42:47,360
<font color="#E5E5E5">luckily I still have about</font><font color="#CCCCCC"> eight</font><font color="#E5E5E5"> minutes</font>

1138
00:42:44,840 --> 00:42:48,350
<font color="#E5E5E5">left in my talk</font><font color="#CCCCCC"> so there's plenty of</font>

1139
00:42:47,360 --> 00:42:55,610
<font color="#CCCCCC">time to</font><font color="#E5E5E5"> see me unlock this with my</font>

1140
00:42:48,350 --> 00:42:56,930
fingerprint or my nose<font color="#E5E5E5"> okay hopefully</font>

1141
00:42:55,610 --> 00:43:01,550
<font color="#CCCCCC">the second time is a charm</font>

1142
00:42:56,930 --> 00:43:05,450
<font color="#CCCCCC">all right it's running okay</font><font color="#E5E5E5"> I'm true not</font>

1143
00:43:01,550 --> 00:43:07,580
even one second<font color="#CCCCCC"> okay it worked this time</font>

1144
00:43:05,450 --> 00:43:10,520
okay<font color="#E5E5E5"> so</font><font color="#CCCCCC"> it shows</font><font color="#E5E5E5"> through the shellfish</font>

1145
00:43:07,580 --> 00:43:13,960
logo which means it worked<font color="#E5E5E5"> now okay lock</font>

1146
00:43:10,520 --> 00:43:13,960
screen<font color="#E5E5E5"> I'm gonna hold up to my nose</font>

1147
00:43:17,500 --> 00:43:24,020
thank you<font color="#CCCCCC"> yeah I hope everyone enjoyed</font>

1148
00:43:20,120 --> 00:43:26,330
it<font color="#CCCCCC"> and</font><font color="#E5E5E5"> of course if anyone has any</font>

1149
00:43:24,020 --> 00:43:29,780
<font color="#E5E5E5">questions feel free to ask</font><font color="#CCCCCC"> them here or</font>

1150
00:43:26,330 --> 00:43:32,690
after<font color="#E5E5E5"> the talk and one small pitch like</font>

1151
00:43:29,780 --> 00:43:33,890
I<font color="#E5E5E5"> said I work for Raytheon CSI</font><font color="#CCCCCC"> so if</font>

1152
00:43:32,690 --> 00:43:35,330
you're interested<font color="#CCCCCC"> in this</font><font color="#E5E5E5"> kind of work</font>

1153
00:43:33,890 --> 00:43:37,549
if you're<font color="#E5E5E5"> sitting in reverse engineering</font>

1154
00:43:35,330 --> 00:43:39,049
<font color="#CCCCCC">that's a job</font><font color="#E5E5E5"> or writing X loses</font><font color="#CCCCCC"> a job</font>

1155
00:43:37,550 --> 00:43:42,080
<font color="#E5E5E5">we're looking for bugs as a job come</font>

1156
00:43:39,050 --> 00:43:43,970
talk to me<font color="#CCCCCC"> I know it seems like</font><font color="#E5E5E5"> a crazy</font>

1157
00:43:42,080 --> 00:43:46,279
<font color="#CCCCCC">thing but people</font><font color="#E5E5E5"> do pay you to do</font><font color="#CCCCCC"> that</font>

1158
00:43:43,970 --> 00:43:49,850
so if you're interested<font color="#CCCCCC"> please let me</font>

1159
00:43:46,280 --> 00:44:08,210
know and yeah you can work for<font color="#E5E5E5"> us</font><font color="#CCCCCC"> okay</font>

1160
00:43:49,850 --> 00:44:09,830
<font color="#E5E5E5">thank you any questions yeah you can all</font>

1161
00:44:08,210 --> 00:44:12,110
<font color="#E5E5E5">right so the</font><font color="#CCCCCC"> question was one time in</font>

1162
00:44:09,830 --> 00:44:14,450
the trusted core can<font color="#CCCCCC"> I essentially play</font>

1163
00:44:12,110 --> 00:44:16,700
with the<font color="#CCCCCC"> base man firmware the memory</font>

1164
00:44:14,450 --> 00:44:17,930
<font color="#E5E5E5">and these things like glowy fuses now I</font>

1165
00:44:16,700 --> 00:44:20,540
haven't<font color="#CCCCCC"> played around</font><font color="#E5E5E5"> with the e fuses</font>

1166
00:44:17,930 --> 00:44:21,830
<font color="#E5E5E5">but you can read and write from the</font>

1167
00:44:20,540 --> 00:44:23,330
basement memory<font color="#E5E5E5"> that's</font><font color="#CCCCCC"> flown in since it</font>

1168
00:44:21,830 --> 00:44:24,860
exists at a physical address<font color="#CCCCCC"> I think</font>

1169
00:44:23,330 --> 00:44:25,970
<font color="#CCCCCC">that could differ depending on I</font>

1170
00:44:24,860 --> 00:44:26,750
something I<font color="#E5E5E5"> actually don't know that</font>

1171
00:44:25,970 --> 00:44:28,759
<font color="#E5E5E5">much about</font>

1172
00:44:26,750 --> 00:44:31,970
but I have<font color="#E5E5E5"> played around with it on on</font>

1173
00:44:28,760 --> 00:44:34,520
this<font color="#E5E5E5"> Huawei phone and I was actually</font>

1174
00:44:31,970 --> 00:44:37,299
able<font color="#CCCCCC"> to read</font><font color="#E5E5E5"> a memory out of there I</font>

1175
00:44:34,520 --> 00:44:40,400
think<font color="#E5E5E5"> it's</font><font color="#CCCCCC"> scissor belong modem</font><font color="#E5E5E5"> and</font>

1176
00:44:37,300 --> 00:44:43,250
<font color="#CCCCCC">right to</font><font color="#E5E5E5"> it as well</font><font color="#CCCCCC"> so it is</font><font color="#E5E5E5"> something</font>

1177
00:44:40,400 --> 00:44:46,400
<font color="#E5E5E5">is interesting research introspection</font>

1178
00:44:43,250 --> 00:44:53,980
technique that you could use yet any

1179
00:44:46,400 --> 00:44:53,980
other questions<font color="#CCCCCC"> ok thank you</font><font color="#E5E5E5"> everyone</font>

1180
00:44:57,730 --> 00:45:00,900
[Applause]

1181
00:45:01,100 --> 00:45:04,290
[Music]

