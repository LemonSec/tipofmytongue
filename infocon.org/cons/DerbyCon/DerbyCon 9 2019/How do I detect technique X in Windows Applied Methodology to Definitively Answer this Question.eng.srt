1
00:00:05,899 --> 00:00:09,919
get started in one more minute

2
00:00:27,340 --> 00:00:33,820
there was no substantial charity all for

3
00:00:29,840 --> 00:00:33,820
me this year so I blame you

4
00:01:19,229 --> 00:01:28,420
let's get cozy I see plenty of open

5
00:01:22,900 --> 00:01:31,830
chairs you can stand up right next to me

6
00:01:28,420 --> 00:01:31,830
if you want I mean that's cool too

7
00:02:08,960 --> 00:02:12,710
we get on the av

8
00:02:52,150 --> 00:02:58,970
all right thanks everyone for coming

9
00:02:54,850 --> 00:03:02,510
so the talk I'm given today is how do I

10
00:02:58,970 --> 00:03:04,280
detect technique X in Windows so I

11
00:03:02,510 --> 00:03:07,070
thought it would be valuable to give a

12
00:03:04,280 --> 00:03:10,690
talk like this one having asked the

13
00:03:07,070 --> 00:03:14,209
question myself enough times and also

14
00:03:10,690 --> 00:03:17,090
having people come to me asking me that

15
00:03:14,210 --> 00:03:19,160
question so many times in a previous

16
00:03:17,090 --> 00:03:22,190
life having put out a lot of offensive

17
00:03:19,160 --> 00:03:25,820
techniques I got this question a lot and

18
00:03:22,190 --> 00:03:28,520
to be honest up until a certain point

19
00:03:25,820 --> 00:03:32,420
probably recently I can't say that I

20
00:03:28,520 --> 00:03:35,840
always had a good confident answer for

21
00:03:32,420 --> 00:03:38,780
any given attack technique that I may

22
00:03:35,840 --> 00:03:40,400
have been operationalizing with team

23
00:03:38,780 --> 00:03:42,350
members or something that I came up with

24
00:03:40,400 --> 00:03:45,470
on my own

25
00:03:42,350 --> 00:03:48,410
so this is my attempt you could say to

26
00:03:45,470 --> 00:03:50,840
make amends with all the offensive

27
00:03:48,410 --> 00:03:55,640
techniques that put out in the past and

28
00:03:50,840 --> 00:03:58,850
to try to develop and apply a somewhat

29
00:03:55,640 --> 00:04:01,760
more formalized methodology to actually

30
00:03:58,850 --> 00:04:04,280
get to the core of how do we take any

31
00:04:01,760 --> 00:04:06,950
technique in Windows and this is going

32
00:04:04,280 --> 00:04:09,890
to be Windows endpoints specific this

33
00:04:06,950 --> 00:04:11,810
being my particular area of comfort and

34
00:04:09,890 --> 00:04:15,799
get to the bottom of how we can actually

35
00:04:11,810 --> 00:04:18,579
start detecting some things beyond what

36
00:04:15,800 --> 00:04:22,010
we already may know like Event log or

37
00:04:18,579 --> 00:04:23,990
proc Mon and then using proc Mon to

38
00:04:22,010 --> 00:04:25,310
build system on rules so I'm gonna be

39
00:04:23,990 --> 00:04:28,010
talking about all that and I've got some

40
00:04:25,310 --> 00:04:29,480
tricks and tips along those lines but

41
00:04:28,010 --> 00:04:32,950
we're gonna dig just a little bit deeper

42
00:04:29,480 --> 00:04:35,210
today so Who am I my name is Matt graver

43
00:04:32,950 --> 00:04:38,510
manifestation on Twitter I'm a

44
00:04:35,210 --> 00:04:40,820
consultant at Specter ops extremely

45
00:04:38,510 --> 00:04:43,130
humbled to be here one of the reasons I

46
00:04:40,820 --> 00:04:45,800
say that is because I've been living off

47
00:04:43,130 --> 00:04:48,469
the land with Chris Campbell here since

48
00:04:45,800 --> 00:04:52,390
my first Derby con so I believe it was

49
00:04:48,470 --> 00:04:57,350
second Derby con I gave my first InfoSec

50
00:04:52,390 --> 00:04:59,539
presentation there and staying true to

51
00:04:57,350 --> 00:05:02,000
the the living off the land

52
00:04:59,540 --> 00:05:03,710
but ology that Chris and I covered we're

53
00:05:02,000 --> 00:05:08,120
also going to be living out the land

54
00:05:03,710 --> 00:05:12,080
someone here only instead of using

55
00:05:08,120 --> 00:05:13,580
built-in tools to to abuse functionality

56
00:05:12,080 --> 00:05:18,650
we're going to use built-in tools and

57
00:05:13,580 --> 00:05:25,310
data sources to attempt to develop some

58
00:05:18,650 --> 00:05:27,830
novel detections okay so you may have

59
00:05:25,310 --> 00:05:30,140
been approached with the following task

60
00:05:27,830 --> 00:05:33,500
you know replace this particular

61
00:05:30,140 --> 00:05:36,650
technique with any given TTP out there

62
00:05:33,500 --> 00:05:39,230
all right so where do you possibly start

63
00:05:36,650 --> 00:05:42,380
okay and I asked myself this question a

64
00:05:39,230 --> 00:05:45,110
lot in fact I'm still learning everyday

65
00:05:42,380 --> 00:05:48,380
how to get better at doing this thing

66
00:05:45,110 --> 00:05:49,010
right so this is a very broad ask all

67
00:05:48,380 --> 00:05:51,770
right so

68
00:05:49,010 --> 00:05:53,750
WMI you know I feel like I'm pretty

69
00:05:51,770 --> 00:05:55,960
comfortable with WMI developed a few

70
00:05:53,750 --> 00:06:01,430
offensive techniques along those lines

71
00:05:55,960 --> 00:06:04,039
in my day so now it's my turn to develop

72
00:06:01,430 --> 00:06:07,280
a generic detection for WMI based

73
00:06:04,040 --> 00:06:09,170
lateral movement all right well so I see

74
00:06:07,280 --> 00:06:12,229
at least three things that are being

75
00:06:09,170 --> 00:06:14,210
asked of me detect okay so I need a

76
00:06:12,230 --> 00:06:16,250
detection that's gonna be in the form of

77
00:06:14,210 --> 00:06:18,109
something actually tangible right that

78
00:06:16,250 --> 00:06:20,900
might surface as an alert to a sock

79
00:06:18,110 --> 00:06:24,380
analyst and perhaps apply some valuable

80
00:06:20,900 --> 00:06:26,650
context to an incident responder WMI

81
00:06:24,380 --> 00:06:29,060
based all right so there's a specific

82
00:06:26,650 --> 00:06:31,580
technology in there and if you're

83
00:06:29,060 --> 00:06:36,500
familiar at all with WMI you know that

84
00:06:31,580 --> 00:06:39,229
WMI spans a very broad swath of things

85
00:06:36,500 --> 00:06:41,450
right that attackers can abuse not only

86
00:06:39,230 --> 00:06:44,480
lateral movement but persistence and

87
00:06:41,450 --> 00:06:47,450
many other things as well and then

88
00:06:44,480 --> 00:06:49,970
lateral movement so at least this kind

89
00:06:47,450 --> 00:06:52,219
of by saying lateral movement and we

90
00:06:49,970 --> 00:06:54,050
want to detect that that kind of scopes

91
00:06:52,220 --> 00:06:58,660
our detection a little bit right so

92
00:06:54,050 --> 00:07:03,230
lateral movement being the overarching

93
00:06:58,660 --> 00:07:07,430
tactic right and then WMI being the more

94
00:07:03,230 --> 00:07:08,030
specific technique alright so where do

95
00:07:07,430 --> 00:07:10,520
we even start

96
00:07:08,030 --> 00:07:12,960
so I would suggest that we prioritize

97
00:07:10,520 --> 00:07:16,320
things a little bit first okay

98
00:07:12,960 --> 00:07:19,530
but first the goal of this talk is again

99
00:07:16,320 --> 00:07:23,190
to establish a methodology for this talk

100
00:07:19,530 --> 00:07:25,619
is really geared towards detection

101
00:07:23,190 --> 00:07:28,410
engineers to exploit all feasible data

102
00:07:25,620 --> 00:07:30,840
sources on a Windows endpoint resulting

103
00:07:28,410 --> 00:07:34,830
in a detection that is ideally robust in

104
00:07:30,840 --> 00:07:38,250
other words resilient against attacker

105
00:07:34,830 --> 00:07:42,570
evasion techniques which if you develop

106
00:07:38,250 --> 00:07:45,360
a brittle signature it's going to be

107
00:07:42,570 --> 00:07:46,860
pretty pretty trivial to bypass so we'd

108
00:07:45,360 --> 00:07:49,919
like to mitigate that if at all possible

109
00:07:46,860 --> 00:07:53,460
and to also identify data sources that's

110
00:07:49,919 --> 00:07:58,008
a supply sufficient context to both Sauk

111
00:07:53,460 --> 00:08:01,830
analysts and incident responders right

112
00:07:58,009 --> 00:08:05,400
alright so here is the strategy that I

113
00:08:01,830 --> 00:08:08,190
proposed in going about detecting a

114
00:08:05,400 --> 00:08:10,620
generic attack technique on a Windows

115
00:08:08,190 --> 00:08:12,449
endpoint first we need to understand how

116
00:08:10,620 --> 00:08:15,150
attackers operationalize this technique

117
00:08:12,449 --> 00:08:17,340
all right so this ties in to how we're

118
00:08:15,150 --> 00:08:20,039
going to prioritize the very broad ask

119
00:08:17,340 --> 00:08:24,150
that we just received of detecting WMI

120
00:08:20,039 --> 00:08:26,990
base lateral movement okay so we can

121
00:08:24,150 --> 00:08:29,729
look to threat intelligence blog post

122
00:08:26,990 --> 00:08:33,570
the Twittersphere there's going to be a

123
00:08:29,729 --> 00:08:35,490
lot of stuff out there mitre attack next

124
00:08:33,570 --> 00:08:38,430
we're going to develop representative

125
00:08:35,490 --> 00:08:41,370
attack validations so if we're building

126
00:08:38,429 --> 00:08:43,620
a detection I like to refer to this as

127
00:08:41,370 --> 00:08:46,560
like the dynamic analysis portion of

128
00:08:43,620 --> 00:08:49,130
detection engineering right we're not

129
00:08:46,560 --> 00:08:52,140
going to be able to develop a robust

130
00:08:49,130 --> 00:08:56,520
detection if we don't have a broad swath

131
00:08:52,140 --> 00:09:00,050
of validations that ideally cover as

132
00:08:56,520 --> 00:09:00,050
much as possible or

133
00:09:02,830 --> 00:09:12,020
all the known public attack variants of

134
00:09:07,490 --> 00:09:14,780
this given technique alright because

135
00:09:12,020 --> 00:09:16,220
otherwise there's the big potential that

136
00:09:14,780 --> 00:09:19,030
we would be missing out on true

137
00:09:16,220 --> 00:09:22,160
positives okay like actual attacks

138
00:09:19,030 --> 00:09:24,500
getting through our detection the next

139
00:09:22,160 --> 00:09:26,540
thing that we'll do and this should be

140
00:09:24,500 --> 00:09:28,220
familiar with everyone is once you've

141
00:09:26,540 --> 00:09:29,719
developed your attack validations you

142
00:09:28,220 --> 00:09:32,270
run them in your controlled environment

143
00:09:29,720 --> 00:09:35,090
and then you just enumerate and observe

144
00:09:32,270 --> 00:09:36,590
all of the artifacts that occur so what

145
00:09:35,090 --> 00:09:39,620
is the traditional thing that we do

146
00:09:36,590 --> 00:09:43,070
right we run our proof-of-concept

147
00:09:39,620 --> 00:09:45,860
attack suite perhaps see what events

148
00:09:43,070 --> 00:09:48,320
were generated in the event log do a

149
00:09:45,860 --> 00:09:51,620
proc Mon trace to see what image loads

150
00:09:48,320 --> 00:09:53,930
occur what process creation network

151
00:09:51,620 --> 00:09:56,120
connections registry access was made so

152
00:09:53,930 --> 00:09:59,449
on and so forth right so we're fairly

153
00:09:56,120 --> 00:10:01,070
familiar with this step but where we're

154
00:09:59,450 --> 00:10:03,410
going to dig a little bit deeper and

155
00:10:01,070 --> 00:10:06,860
that's why I highlighted this here is

156
00:10:03,410 --> 00:10:09,650
we'd also like to enumerate what it is

157
00:10:06,860 --> 00:10:11,840
that is actually observable right so

158
00:10:09,650 --> 00:10:15,260
I've identified a few things right the

159
00:10:11,840 --> 00:10:18,320
event log proc Mon is a valuable tool

160
00:10:15,260 --> 00:10:20,569
and the detection engineers toolchain

161
00:10:18,320 --> 00:10:23,600
but is there anything beyond that are

162
00:10:20,570 --> 00:10:25,700
there any file based logs that we could

163
00:10:23,600 --> 00:10:27,950
look at any other artifacts that we

164
00:10:25,700 --> 00:10:30,770
might be able to dig into that perhaps

165
00:10:27,950 --> 00:10:32,840
we're blind to currently as detection

166
00:10:30,770 --> 00:10:35,030
engineers so I'm going to cover some

167
00:10:32,840 --> 00:10:37,010
methodology into how we can enumerate

168
00:10:35,030 --> 00:10:39,050
what is actually observable on a Windows

169
00:10:37,010 --> 00:10:40,670
endpoint next we're going to attempt to

170
00:10:39,050 --> 00:10:44,000
understand the implementation of the

171
00:10:40,670 --> 00:10:47,719
technology so this is the really fun

172
00:10:44,000 --> 00:10:50,210
part for me personally as a reverse

173
00:10:47,720 --> 00:10:51,890
engineer this is to me what makes

174
00:10:50,210 --> 00:10:55,010
detection engineering like really sexy

175
00:10:51,890 --> 00:10:57,170
right like the realm of reverse

176
00:10:55,010 --> 00:10:58,670
engineering is not limited to just like

177
00:10:57,170 --> 00:11:01,790
vulnerability researchers and our

178
00:10:58,670 --> 00:11:04,250
analysts detection engineers to can have

179
00:11:01,790 --> 00:11:08,660
plenty of fun reverse engineering so

180
00:11:04,250 --> 00:11:11,090
what I'll cover is some steps in how you

181
00:11:08,660 --> 00:11:12,980
can go about identifying what the actual

182
00:11:11,090 --> 00:11:15,889
components are that implement the

183
00:11:12,980 --> 00:11:17,389
technique that you're investigating and

184
00:11:15,889 --> 00:11:18,859
once you've identified those components

185
00:11:17,389 --> 00:11:20,720
start digging in and reversing and

186
00:11:18,859 --> 00:11:24,819
gradually gaining more context in

187
00:11:20,720 --> 00:11:27,049
getting a bigger picture into how these

188
00:11:24,819 --> 00:11:29,118
potentially valuable data sources that

189
00:11:27,049 --> 00:11:31,160
you otherwise didn't consider previously

190
00:11:29,119 --> 00:11:32,480
are actually implemented under the hood

191
00:11:31,160 --> 00:11:37,160
because this is what attackers are

192
00:11:32,480 --> 00:11:39,169
already doing all right and then next we

193
00:11:37,160 --> 00:11:42,169
want to contextualize relevant data

194
00:11:39,169 --> 00:11:43,879
sources sometimes Microsoft is nice

195
00:11:42,169 --> 00:11:47,899
enough to document some of these things

196
00:11:43,879 --> 00:11:50,119
for me but considering I mentioned the

197
00:11:47,899 --> 00:11:52,819
event log really just scratches the

198
00:11:50,119 --> 00:11:55,220
surface and of all the events that can

199
00:11:52,819 --> 00:11:56,959
be captured in the event log what

200
00:11:55,220 --> 00:11:59,059
percentage of those would you say are

201
00:11:56,959 --> 00:12:02,238
actually documented by Microsoft it's

202
00:11:59,059 --> 00:12:03,589
probably a very small percentage and

203
00:12:02,239 --> 00:12:05,629
we're gonna go just beneath the surface

204
00:12:03,589 --> 00:12:06,079
of the event log to where it's no man's

205
00:12:05,629 --> 00:12:08,299
land

206
00:12:06,079 --> 00:12:09,949
we're none of none of this stuff that

207
00:12:08,299 --> 00:12:13,040
we're gonna see is actually documented

208
00:12:09,949 --> 00:12:16,459
so there's gonna be our job to document

209
00:12:13,040 --> 00:12:18,108
ie supply context around the events and

210
00:12:16,459 --> 00:12:20,899
data sources that we discover along the

211
00:12:18,109 --> 00:12:25,040
way and all of this is going to allow us

212
00:12:20,899 --> 00:12:28,579
to scope the detection right so once we

213
00:12:25,040 --> 00:12:31,459
gain a more holistic picture of how this

214
00:12:28,579 --> 00:12:34,910
technology is implemented then we can

215
00:12:31,459 --> 00:12:37,399
use our scalpel to start carving out the

216
00:12:34,910 --> 00:12:42,829
data sources that we found - I did

217
00:12:37,399 --> 00:12:45,259
ideally find a of that valuable data

218
00:12:42,829 --> 00:12:47,779
source that can build a robust detection

219
00:12:45,259 --> 00:12:50,899
all right so first we're gonna

220
00:12:47,779 --> 00:12:52,790
prioritize right so again W my base

221
00:12:50,899 --> 00:12:56,239
lateral movement is a very broad topic

222
00:12:52,790 --> 00:12:58,279
there's a lot of ways to do it but going

223
00:12:56,239 --> 00:13:00,679
through my research and you know arms

224
00:12:58,279 --> 00:13:04,579
with the knowledge that I already had I

225
00:13:00,679 --> 00:13:07,220
know that attackers love win32 process

226
00:13:04,579 --> 00:13:09,429
create base lateral movement like this

227
00:13:07,220 --> 00:13:12,889
is w my lateral movement on easy mode

228
00:13:09,429 --> 00:13:14,539
it's really easy to implement attackers

229
00:13:12,889 --> 00:13:17,660
love to do it they're still doing it

230
00:13:14,539 --> 00:13:19,489
just because it's easy doesn't mean you

231
00:13:17,660 --> 00:13:21,139
know well-funded advanced adversaries

232
00:13:19,489 --> 00:13:23,709
aren't going to use it it's tried and

233
00:13:21,139 --> 00:13:26,509
true and it still persists to this day

234
00:13:23,709 --> 00:13:28,869
so for the purpose of this talk we're

235
00:13:26,509 --> 00:13:31,779
going to scope our detection and

236
00:13:28,870 --> 00:13:35,350
data source analysis around just this

237
00:13:31,779 --> 00:13:39,000
particular procedure right so TTP

238
00:13:35,350 --> 00:13:41,980
procedure of win32 process create based

239
00:13:39,000 --> 00:13:43,269
lateral movements and there are some

240
00:13:41,980 --> 00:13:47,829
good resources out there that I've

241
00:13:43,269 --> 00:13:49,569
highlighted here okay so what I'd like

242
00:13:47,829 --> 00:13:52,569
to do is to start understanding the

243
00:13:49,569 --> 00:13:55,060
implementation of win32 process create

244
00:13:52,569 --> 00:13:57,819
so when you obviously when you call the

245
00:13:55,060 --> 00:14:00,670
create method of the win32 process class

246
00:13:57,819 --> 00:14:04,509
this doesn't just occur magically right

247
00:14:00,670 --> 00:14:07,389
there's code somewhere that executes a

248
00:14:04,509 --> 00:14:10,389
thing that does the thing that the

249
00:14:07,389 --> 00:14:15,399
attacker wants to achieve right so this

250
00:14:10,389 --> 00:14:18,279
being WMI WMI allows us to query the its

251
00:14:15,399 --> 00:14:20,439
own schema really well and so the first

252
00:14:18,279 --> 00:14:22,569
line that you're seeing here is I'm

253
00:14:20,439 --> 00:14:27,250
getting an instance of the win32 process

254
00:14:22,569 --> 00:14:29,560
class and there for every class in WMI

255
00:14:27,250 --> 00:14:32,230
there's a provider attribute that's

256
00:14:29,560 --> 00:14:34,630
applied to the definition of that and so

257
00:14:32,230 --> 00:14:37,209
that will have a value attached to it

258
00:14:34,630 --> 00:14:41,230
which is a CLS ID or a good value right

259
00:14:37,209 --> 00:14:43,209
and when you see clsid think comm okay

260
00:14:41,230 --> 00:14:46,509
so knowing that it's calm and you have a

261
00:14:43,209 --> 00:14:50,709
CLS ID value you can take that go to the

262
00:14:46,509 --> 00:14:54,160
registry and in the corresponding clsid

263
00:14:50,709 --> 00:14:56,768
value in proxy server 32 it will show

264
00:14:54,160 --> 00:14:59,800
you the corresponding comm dll that

265
00:14:56,769 --> 00:15:03,250
implements in this case that W my class

266
00:14:59,800 --> 00:15:06,459
okay so in this case we have sim win32

267
00:15:03,250 --> 00:15:08,470
dll alright so add that to your notes of

268
00:15:06,459 --> 00:15:11,439
something to potentially investigate

269
00:15:08,470 --> 00:15:15,339
because we'd like to ideally identify

270
00:15:11,439 --> 00:15:19,000
how the create call actually spawns a

271
00:15:15,339 --> 00:15:23,230
process on a remote machine okay so

272
00:15:19,000 --> 00:15:27,370
digging in we found this so there's a

273
00:15:23,230 --> 00:15:29,920
call to create process as user W so

274
00:15:27,370 --> 00:15:34,269
already as a detection engineer I'm

275
00:15:29,920 --> 00:15:37,360
thinking well okay so create process so

276
00:15:34,269 --> 00:15:39,639
process creation events in proc Mon 46

277
00:15:37,360 --> 00:15:42,430
88 those seem like they're going to be

278
00:15:39,639 --> 00:15:44,140
in play considering this is been

279
00:15:42,430 --> 00:15:49,510
done remotely and as another user

280
00:15:44,140 --> 00:15:50,920
perhaps there is a logon session that's

281
00:15:49,510 --> 00:15:52,600
going to be created so that's just

282
00:15:50,920 --> 00:15:55,149
another thing that I'll want to annotate

283
00:15:52,600 --> 00:15:58,060
and investigate and I have the code that

284
00:15:55,149 --> 00:16:01,180
backs this to to actually dig in to

285
00:15:58,060 --> 00:16:04,180
validate so if I'm not seeing an event

286
00:16:01,180 --> 00:16:07,420
that I expect I can refer back to the

287
00:16:04,180 --> 00:16:12,310
the disassembly to confirm whether or

288
00:16:07,420 --> 00:16:16,180
not my hypothesis is true so this is

289
00:16:12,310 --> 00:16:21,219
within the sim win32 process class

290
00:16:16,180 --> 00:16:23,979
creation function all right so moving on

291
00:16:21,220 --> 00:16:25,450
I did a little bit of dynamic analysis

292
00:16:23,980 --> 00:16:26,860
actually no this is still static

293
00:16:25,450 --> 00:16:29,490
analysis so following all the cross

294
00:16:26,860 --> 00:16:32,830
references up from that process creation

295
00:16:29,490 --> 00:16:35,649
function call going up and up and up all

296
00:16:32,830 --> 00:16:40,050
the way to exact method I'm starting to

297
00:16:35,649 --> 00:16:43,600
build out a map of the flow of execution

298
00:16:40,050 --> 00:16:46,630
when we're 32 process create is called

299
00:16:43,600 --> 00:16:51,160
and so each one of these functions here

300
00:16:46,630 --> 00:16:53,740
serves as a launchpad into a potentially

301
00:16:51,160 --> 00:16:56,920
new data source it's going to be up to

302
00:16:53,740 --> 00:17:02,950
me though to to quickly dive into the

303
00:16:56,920 --> 00:17:07,149
actual implementation though okay now

304
00:17:02,950 --> 00:17:09,220
and as you can see so the the function

305
00:17:07,150 --> 00:17:10,809
call that's the function that calls

306
00:17:09,220 --> 00:17:13,449
process creation is check process

307
00:17:10,809 --> 00:17:15,970
creation so we're kind of broadening the

308
00:17:13,449 --> 00:17:18,220
scope of the implementation here but

309
00:17:15,970 --> 00:17:20,439
we're also just getting a much clearer

310
00:17:18,220 --> 00:17:24,250
picture of the overall flow of this

311
00:17:20,439 --> 00:17:26,579
implementation all right so we've dug in

312
00:17:24,250 --> 00:17:29,730
a little bit into the implementation now

313
00:17:26,579 --> 00:17:32,470
through our various open source research

314
00:17:29,730 --> 00:17:36,309
let's start developing some actual

315
00:17:32,470 --> 00:17:41,200
attack validations okay so the rationale

316
00:17:36,309 --> 00:17:42,639
to develop as many attack validations or

317
00:17:41,200 --> 00:17:44,890
like proof-of-concept validations as

318
00:17:42,640 --> 00:17:46,750
possible is to identify common and/or

319
00:17:44,890 --> 00:17:49,240
distinct detection data sources across

320
00:17:46,750 --> 00:17:51,850
procedures in other words I refer to

321
00:17:49,240 --> 00:17:55,030
this as detection coverage all right so

322
00:17:51,850 --> 00:17:56,050
if you're building a detection off of

323
00:17:55,030 --> 00:17:59,530
the exit

324
00:17:56,050 --> 00:18:02,669
ocean of wmic dot process call create

325
00:17:59,530 --> 00:18:06,490
you very well could be limiting yourself

326
00:18:02,670 --> 00:18:08,500
alright so if the goal is to detect WMI

327
00:18:06,490 --> 00:18:10,690
based lateral movement are you really

328
00:18:08,500 --> 00:18:14,010
detecting WMI based on roll movement or

329
00:18:10,690 --> 00:18:17,850
are you detecting attacker use of wmic

330
00:18:14,010 --> 00:18:19,840
dot exe for WMI based lateral movement

331
00:18:17,850 --> 00:18:22,270
so that's where you might want to get a

332
00:18:19,840 --> 00:18:26,230
little bit of clarification from whoever

333
00:18:22,270 --> 00:18:29,530
is requesting the detection alright so

334
00:18:26,230 --> 00:18:32,620
here's here's one attack validation so

335
00:18:29,530 --> 00:18:34,510
here's how you would do

336
00:18:32,620 --> 00:18:37,030
wmii based lateral movement using with

337
00:18:34,510 --> 00:18:40,420
thirty-two process create using wmic dot

338
00:18:37,030 --> 00:18:46,270
exe so this is just one procedure for

339
00:18:40,420 --> 00:18:49,630
this tcp wmic ok and here's another one

340
00:18:46,270 --> 00:18:54,910
using PowerShell using the older invoke

341
00:18:49,630 --> 00:18:57,100
WMI method method or command lit so this

342
00:18:54,910 --> 00:18:58,390
under the hood is going to be pretty

343
00:18:57,100 --> 00:19:00,790
similar to wmic

344
00:18:58,390 --> 00:19:04,390
where things get a little bit different

345
00:19:00,790 --> 00:19:07,810
potentially is you can also interact

346
00:19:04,390 --> 00:19:10,630
with WMI using the newer sim commandlets

347
00:19:07,810 --> 00:19:14,260
so here we establish a remote sim

348
00:19:10,630 --> 00:19:17,740
session which if you didn't know already

349
00:19:14,260 --> 00:19:21,820
by default WI uses decom the decon

350
00:19:17,740 --> 00:19:25,840
protocol the sim commandlets use winter

351
00:19:21,820 --> 00:19:28,270
on so single a single port single

352
00:19:25,840 --> 00:19:30,970
protocol pretty nice you can have

353
00:19:28,270 --> 00:19:33,280
everything work in a nice firewall

354
00:19:30,970 --> 00:19:35,860
friendly manner right so that's that's

355
00:19:33,280 --> 00:19:37,389
what we're afforded here so we'd like to

356
00:19:35,860 --> 00:19:39,580
incorporate this into our attack

357
00:19:37,390 --> 00:19:43,780
validations as well to get the broadest

358
00:19:39,580 --> 00:19:45,370
amount of code coverage as possible and

359
00:19:43,780 --> 00:19:48,610
then the last thing that came to mind

360
00:19:45,370 --> 00:19:50,709
for me was calling winter m dot CMD or

361
00:19:48,610 --> 00:19:53,320
winter on BBS so these are all built-in

362
00:19:50,710 --> 00:19:55,480
utilities of course there's you can call

363
00:19:53,320 --> 00:20:00,669
the api's directly there's other tools

364
00:19:55,480 --> 00:20:02,920
that can interact with WMI and like call

365
00:20:00,670 --> 00:20:05,080
win32 process create like we're just

366
00:20:02,920 --> 00:20:07,360
scratching the surface here given the

367
00:20:05,080 --> 00:20:09,020
potential constraints of time and money

368
00:20:07,360 --> 00:20:13,110
that we have

369
00:20:09,020 --> 00:20:15,990
all right so let's start observing some

370
00:20:13,110 --> 00:20:22,050
detection artifacts so here's where you

371
00:20:15,990 --> 00:20:26,280
would do your traditional analysis all

372
00:20:22,050 --> 00:20:31,080
right so for the first demo what I'm

373
00:20:26,280 --> 00:20:32,910
gonna do is this so here's what I'm

374
00:20:31,080 --> 00:20:35,490
going to execute and I'm just going to

375
00:20:32,910 --> 00:20:37,140
execute it locally I would also want to

376
00:20:35,490 --> 00:20:39,450
be doing this remotely as well because

377
00:20:37,140 --> 00:20:42,240
we're actually testing lateral movement

378
00:20:39,450 --> 00:20:44,309
but I'm gonna call invoke same method on

379
00:20:42,240 --> 00:20:46,230
win32 process create and just spawn a

380
00:20:44,309 --> 00:20:49,470
notepad and what I'm gonna do right

381
00:20:46,230 --> 00:20:53,600
before that in PowerShell is annotate

382
00:20:49,470 --> 00:20:57,900
the time I'm gonna execute my thing

383
00:20:53,600 --> 00:21:00,330
write the lateral movement scenario just

384
00:20:57,900 --> 00:21:03,740
sleep for a few seconds and then I'm

385
00:21:00,330 --> 00:21:07,350
going to iterate through every event log

386
00:21:03,740 --> 00:21:10,140
where the event log date time entry is

387
00:21:07,350 --> 00:21:13,649
greater than or equal to what I took

388
00:21:10,140 --> 00:21:16,530
right before I executed it right so the

389
00:21:13,650 --> 00:21:18,270
event log as you know is pretty huge we

390
00:21:16,530 --> 00:21:22,440
don't want to be swimming in a sea of

391
00:21:18,270 --> 00:21:24,720
events and this can really mitigate much

392
00:21:22,440 --> 00:21:29,420
of that and really let you get down to

393
00:21:24,720 --> 00:21:29,420
the relative potentially relevant events

394
00:21:32,809 --> 00:21:43,040
okay so let's do that okay we spawned a

395
00:21:40,080 --> 00:21:45,449
notepad we're gonna wait five seconds

396
00:21:43,040 --> 00:21:48,990
just to make sure the events are coming

397
00:21:45,450 --> 00:21:52,260
in this will take a second to go through

398
00:21:48,990 --> 00:21:57,270
all of the event logs and what do we

399
00:21:52,260 --> 00:22:00,000
have okay some of these look familiar to

400
00:21:57,270 --> 00:22:04,260
you at least two of these should look

401
00:22:00,000 --> 00:22:06,360
familiar yeah so 46 88 these are our

402
00:22:04,260 --> 00:22:13,620
classic man this is hard to type with

403
00:22:06,360 --> 00:22:18,260
one hand our classic process auditing

404
00:22:13,620 --> 00:22:21,040
okay so here you see notepad was spawned

405
00:22:18,260 --> 00:22:25,299
so we get some user context

406
00:22:21,040 --> 00:22:27,280
is spawned by what WMI PRV se right if

407
00:22:25,299 --> 00:22:31,120
you've investigated this before this

408
00:22:27,280 --> 00:22:35,139
should be nothing new to you okay but I

409
00:22:31,120 --> 00:22:37,030
offer this as a handy tip I use this all

410
00:22:35,140 --> 00:22:38,799
the time like this is like step number

411
00:22:37,030 --> 00:22:40,299
one for me I'm like show me want to get

412
00:22:38,799 --> 00:22:42,460
it in the event log and I don't want to

413
00:22:40,299 --> 00:22:44,799
see of events so only show me what

414
00:22:42,460 --> 00:22:47,470
occurred immediately before I execute in

415
00:22:44,799 --> 00:22:49,530
my attack validation okay so we have 46

416
00:22:47,470 --> 00:22:53,590
88 and then what's that last one there

417
00:22:49,530 --> 00:23:00,040
that one look kind of interesting so

418
00:22:53,590 --> 00:23:02,949
this is event ID 58 57 in Windows WI

419
00:23:00,040 --> 00:23:08,980
activity operational log sim win32

420
00:23:02,950 --> 00:23:13,299
provider started in a host process WMI

421
00:23:08,980 --> 00:23:14,679
PRV SE from this path okay that's kind

422
00:23:13,299 --> 00:23:17,500
of interesting

423
00:23:14,679 --> 00:23:20,500
I would annotate that now this doesn't

424
00:23:17,500 --> 00:23:23,140
necessarily scream out to me lateral

425
00:23:20,500 --> 00:23:27,070
movement occurred alright so I know that

426
00:23:23,140 --> 00:23:28,990
WI is pretty noisy right so anytime WI

427
00:23:27,070 --> 00:23:31,510
is ever used it's going to be loading

428
00:23:28,990 --> 00:23:36,250
these provider dll's into the W my

429
00:23:31,510 --> 00:23:38,740
service so this from my observations is

430
00:23:36,250 --> 00:23:41,260
a pretty common thing so this doesn't

431
00:23:38,740 --> 00:23:43,960
necessarily scream out to me that

432
00:23:41,260 --> 00:23:46,990
lateral movement occurred and I'm not

433
00:23:43,960 --> 00:23:50,080
even getting any direct contact saying

434
00:23:46,990 --> 00:23:51,580
that this thing executed remotely well

435
00:23:50,080 --> 00:23:57,610
even though my example didn't execute

436
00:23:51,580 --> 00:23:59,949
remotely okay so again that is always

437
00:23:57,610 --> 00:24:01,209
pretty much step number one for me let

438
00:23:59,950 --> 00:24:03,520
me see what I get in the event log

439
00:24:01,210 --> 00:24:05,260
because if I can get something great in

440
00:24:03,520 --> 00:24:06,879
the event log then I'm gonna go with

441
00:24:05,260 --> 00:24:11,290
that because the event log is really

442
00:24:06,880 --> 00:24:14,040
easy to consume alright but the event

443
00:24:11,290 --> 00:24:14,040
log still

444
00:24:15,919 --> 00:24:22,039
leaves much to be desired so moving on

445
00:24:19,460 --> 00:24:25,940
we might utilize something like proc Mon

446
00:24:22,039 --> 00:24:30,190
which is an amazing tool to allow us to

447
00:24:25,940 --> 00:24:32,720
trace process creation module loads

448
00:24:30,190 --> 00:24:34,669
network connections all that I'm sure

449
00:24:32,720 --> 00:24:37,700
many of you are intimately familiar with

450
00:24:34,669 --> 00:24:40,399
proc Mon so I would absolutely use that

451
00:24:37,700 --> 00:24:43,600
as well because I want to be building up

452
00:24:40,399 --> 00:24:48,949
a holistic picture of what are all the

453
00:24:43,600 --> 00:24:51,408
components that are utilized in the

454
00:24:48,950 --> 00:24:54,139
course of executing my attack validation

455
00:24:51,409 --> 00:24:55,399
but as a reverse engineer right like one

456
00:24:54,139 --> 00:24:56,990
of the first things I might execute

457
00:24:55,399 --> 00:24:59,389
would be something like strings right

458
00:24:56,990 --> 00:25:01,730
and so that could give me an initial

459
00:24:59,389 --> 00:25:04,340
sense of where I should start diving

460
00:25:01,730 --> 00:25:06,080
into that's how I view proc Mon from a

461
00:25:04,340 --> 00:25:08,389
detection engineering perspective I

462
00:25:06,080 --> 00:25:11,168
don't necessarily trust that the events

463
00:25:08,389 --> 00:25:14,570
that I see populated in proc Mon are

464
00:25:11,169 --> 00:25:17,360
100% related to the attack validation

465
00:25:14,570 --> 00:25:20,149
that I was executing but they can still

466
00:25:17,360 --> 00:25:24,350
serve as good hints for further deep

467
00:25:20,149 --> 00:25:27,260
dives ok so one thing that you might

468
00:25:24,350 --> 00:25:30,260
observe would be that any time when 32

469
00:25:27,260 --> 00:25:32,870
process lateral movement is performed it

470
00:25:30,260 --> 00:25:36,110
always spawns a child process from WMI

471
00:25:32,870 --> 00:25:37,939
prvs exe so that that is valuable I

472
00:25:36,110 --> 00:25:40,340
don't want to negate the value of that

473
00:25:37,940 --> 00:25:45,559
but is that going to give us enough

474
00:25:40,340 --> 00:25:47,570
context behind lateral movement I mean

475
00:25:45,559 --> 00:25:49,970
that's a that's a judgment call in my

476
00:25:47,570 --> 00:25:53,658
opinion but from my experience I would

477
00:25:49,970 --> 00:25:56,480
say largely know like you could infer

478
00:25:53,659 --> 00:26:00,529
that but you don't know for sure that

479
00:25:56,480 --> 00:26:02,539
that call originated from a remote

480
00:26:00,529 --> 00:26:06,260
attacker system that's what I'd like to

481
00:26:02,539 --> 00:26:08,110
get at that's the context that your sock

482
00:26:06,260 --> 00:26:14,269
analysts and incident responders need

483
00:26:08,110 --> 00:26:16,820
ideally ok so can we do better and I

484
00:26:14,269 --> 00:26:19,669
would propose that through etw we can

485
00:26:16,820 --> 00:26:21,019
all right so etw is event racing for

486
00:26:19,669 --> 00:26:24,110
Windows

487
00:26:21,019 --> 00:26:26,419
I think we've we as the derbycon

488
00:26:24,110 --> 00:26:29,659
community have been very fortunate that

489
00:26:26,419 --> 00:26:31,760
in years past there have been large

490
00:26:29,660 --> 00:26:33,350
handful of etw talks said i recommend

491
00:26:31,760 --> 00:26:37,250
you check out if you want to learn more

492
00:26:33,350 --> 00:26:40,189
about this it's just such a rich source

493
00:26:37,250 --> 00:26:42,800
of events that if you learn how to tap

494
00:26:40,190 --> 00:26:45,710
into them properly then you can really

495
00:26:42,800 --> 00:26:50,500
harness the power of these these data

496
00:26:45,710 --> 00:26:50,500
sources underneath the hood of Windows

497
00:26:50,590 --> 00:26:55,970
alright so where I said that Microsoft

498
00:26:53,840 --> 00:26:59,120
only documents a fraction of the events

499
00:26:55,970 --> 00:27:03,410
in the event log the amount of events

500
00:26:59,120 --> 00:27:05,239
that can be populated through etw well

501
00:27:03,410 --> 00:27:08,210
sorry that can be populated through the

502
00:27:05,240 --> 00:27:13,550
event log is a very tiny fraction of

503
00:27:08,210 --> 00:27:16,970
what etw can publish so the event log if

504
00:27:13,550 --> 00:27:21,379
you didn't know receives its events from

505
00:27:16,970 --> 00:27:23,150
etw ok so let's cover some key

506
00:27:21,380 --> 00:27:24,650
terminology if you're not familiar with

507
00:27:23,150 --> 00:27:28,010
etw so

508
00:27:24,650 --> 00:27:30,290
ECW providers these are the think of it

509
00:27:28,010 --> 00:27:32,390
as a channel through which an event is

510
00:27:30,290 --> 00:27:34,370
written and consumed all right so

511
00:27:32,390 --> 00:27:38,300
there's code somewhere that says hey I

512
00:27:34,370 --> 00:27:40,760
want to log this thing ok so ok code I'm

513
00:27:38,300 --> 00:27:43,850
gonna go log this contextual event data

514
00:27:40,760 --> 00:27:46,070
for someone to consume it whoever

515
00:27:43,850 --> 00:27:49,100
consumes it I don't care if there's no

516
00:27:46,070 --> 00:27:51,020
one consuming it then it then you really

517
00:27:49,100 --> 00:27:53,000
have a minimal perf impact it was

518
00:27:51,020 --> 00:27:54,560
designed pretty well but then when a

519
00:27:53,000 --> 00:27:57,500
consumer does come around

520
00:27:54,560 --> 00:28:00,110
this is called an etw trace session this

521
00:27:57,500 --> 00:28:02,360
is the consumer of these events so a

522
00:28:00,110 --> 00:28:05,360
tray session can subscribe to these

523
00:28:02,360 --> 00:28:07,520
providers of which there are many where

524
00:28:05,360 --> 00:28:10,399
each of which has its own unique good

525
00:28:07,520 --> 00:28:13,010
value and many of which have human

526
00:28:10,400 --> 00:28:14,890
readable names so in manifest space etw

527
00:28:13,010 --> 00:28:19,129
which we're going to be talking about

528
00:28:14,890 --> 00:28:22,340
mainly here each one has a name and they

529
00:28:19,130 --> 00:28:24,970
tend to be - delimited so the WMI one is

530
00:28:22,340 --> 00:28:27,770
Microsoft Windows WI activity alright

531
00:28:24,970 --> 00:28:30,440
and what's great about manifests etw is

532
00:28:27,770 --> 00:28:32,960
that there's a binary somewhere that has

533
00:28:30,440 --> 00:28:35,450
serialized XML that stores the schema of

534
00:28:32,960 --> 00:28:38,000
all these events so if you know how to

535
00:28:35,450 --> 00:28:41,660
capture that schema and recover it back

536
00:28:38,000 --> 00:28:43,280
into XML then as detection engineers we

537
00:28:41,660 --> 00:28:46,550
have some more data to go

538
00:28:43,280 --> 00:28:49,070
to continue our investigation into this

539
00:28:46,550 --> 00:28:51,649
attack technique okay

540
00:28:49,070 --> 00:28:55,520
Oh a really important point here

541
00:28:51,650 --> 00:28:57,980
channels so every ECW event can have a

542
00:28:55,520 --> 00:29:01,700
property applied to it referred to as a

543
00:28:57,980 --> 00:29:04,520
channel so if an etw event has a channel

544
00:29:01,700 --> 00:29:08,000
value applied to it that means that that

545
00:29:04,520 --> 00:29:10,879
ECW event is designed to be consumed by

546
00:29:08,000 --> 00:29:12,920
the event log many etw events though do

547
00:29:10,880 --> 00:29:14,960
not have channel attributes applied to

548
00:29:12,920 --> 00:29:16,970
them unfortunately and that's what we're

549
00:29:14,960 --> 00:29:20,090
going to be dealing with in a little bit

550
00:29:16,970 --> 00:29:23,750
okay so again Trey sessions these are

551
00:29:20,090 --> 00:29:27,409
the consumers of the ECU provider events

552
00:29:23,750 --> 00:29:31,100
and you can subscribe to one or many ECW

553
00:29:27,410 --> 00:29:33,830
events where take the application event

554
00:29:31,100 --> 00:29:36,379
log the application event log is an etw

555
00:29:33,830 --> 00:29:40,429
Trey session that's all it is it's

556
00:29:36,380 --> 00:29:44,960
really nothing not special okay so ECW

557
00:29:40,430 --> 00:29:47,330
really is core to the data sources and

558
00:29:44,960 --> 00:29:52,520
detection telemetry available to us in

559
00:29:47,330 --> 00:29:55,070
Windows okay so if you want to start

560
00:29:52,520 --> 00:29:57,020
digging around into the etw provider

561
00:29:55,070 --> 00:30:00,260
schemas what I recommend is this open

562
00:29:57,020 --> 00:30:05,389
source tool called WEP or WEP Explorer

563
00:30:00,260 --> 00:30:07,550
and I have it up here so we're gonna dig

564
00:30:05,390 --> 00:30:10,670
in a little bit here so this is what

565
00:30:07,550 --> 00:30:13,909
you'll see initially oh sorry let me do

566
00:30:10,670 --> 00:30:16,250
interactive zoom okay so all we're gonna

567
00:30:13,910 --> 00:30:18,290
do is just search for our key term right

568
00:30:16,250 --> 00:30:22,870
we want to detect WMI so let's search

569
00:30:18,290 --> 00:30:26,870
for WMI and we get a few things here and

570
00:30:22,870 --> 00:30:28,370
so if I was to choose if I had to

571
00:30:26,870 --> 00:30:30,020
prioritize these and there were a bunch

572
00:30:28,370 --> 00:30:32,959
of events in these which one would I

573
00:30:30,020 --> 00:30:36,160
choose well I would probably start with

574
00:30:32,960 --> 00:30:38,720
Microsoft Windows W my activity Y

575
00:30:36,160 --> 00:30:40,490
because when I was collecting events

576
00:30:38,720 --> 00:30:42,170
through the event log I saw that there

577
00:30:40,490 --> 00:30:44,270
was one event in the women tippity

578
00:30:42,170 --> 00:30:46,460
operational log that popped up

579
00:30:44,270 --> 00:30:49,070
it didn't seem super relevant to me but

580
00:30:46,460 --> 00:30:51,020
perhaps there's there might be some

581
00:30:49,070 --> 00:30:53,179
other relevant events in there so I'm

582
00:30:51,020 --> 00:30:56,850
gonna start here and double click that

583
00:30:53,180 --> 00:30:59,460
and then you can go down here and then

584
00:30:56,850 --> 00:31:04,500
here are all the events that this

585
00:30:59,460 --> 00:31:07,080
provider supports okay oh and here's a

586
00:31:04,500 --> 00:31:08,700
channel tab alright so let's just go

587
00:31:07,080 --> 00:31:13,350
through this pretty much one by one all

588
00:31:08,700 --> 00:31:16,050
right I D this is event ID so if this is

589
00:31:13,350 --> 00:31:19,830
something that the event log can consume

590
00:31:16,050 --> 00:31:22,860
this is the this is the event ID that

591
00:31:19,830 --> 00:31:25,770
you will see now there are logging

592
00:31:22,860 --> 00:31:28,590
levels in the event log in etw and so

593
00:31:25,770 --> 00:31:30,180
they can be applied to detail to egw

594
00:31:28,590 --> 00:31:32,510
events it's not a requirement

595
00:31:30,180 --> 00:31:36,660
same with OP code tasks and keyword

596
00:31:32,510 --> 00:31:40,770
think of all these as the built in etw

597
00:31:36,660 --> 00:31:43,620
ways in which we can do filtering it's

598
00:31:40,770 --> 00:31:48,030
unfortunate actually that using built-in

599
00:31:43,620 --> 00:31:50,850
etw you can't filter by event ID you can

600
00:31:48,030 --> 00:31:53,190
only filter by these things here in

601
00:31:50,850 --> 00:31:57,990
keywords and channels are actually just

602
00:31:53,190 --> 00:32:01,110
a special form of a keyword that the

603
00:31:57,990 --> 00:32:04,500
event log understands and then what's

604
00:32:01,110 --> 00:32:07,260
also cool here is a message alright so

605
00:32:04,500 --> 00:32:10,140
this you know if we have any programmers

606
00:32:07,260 --> 00:32:12,360
here this is just a format string

607
00:32:10,140 --> 00:32:14,490
alright so percent one percent two

608
00:32:12,360 --> 00:32:16,620
percent three so these are placeholders

609
00:32:14,490 --> 00:32:18,810
for Strings to be populated

610
00:32:16,620 --> 00:32:21,179
well what strings are actually being

611
00:32:18,810 --> 00:32:27,540
populated well we have that here in the

612
00:32:21,180 --> 00:32:30,210
fields column okay so what I would do at

613
00:32:27,540 --> 00:32:33,120
this point would just be to casually go

614
00:32:30,210 --> 00:32:36,750
through all of these and see if there's

615
00:32:33,120 --> 00:32:39,810
anything of potential interest now some

616
00:32:36,750 --> 00:32:45,060
of these etw providers they're going to

617
00:32:39,810 --> 00:32:46,770
be many many many different events so if

618
00:32:45,060 --> 00:32:49,260
you're swimming in a sea of events then

619
00:32:46,770 --> 00:32:51,240
what I'll recommend is that you just run

620
00:32:49,260 --> 00:32:53,040
a trace to capture all these events and

621
00:32:51,240 --> 00:32:55,110
then weed through them and see which

622
00:32:53,040 --> 00:32:56,940
ones are actually captured so it's sort

623
00:32:55,110 --> 00:32:58,560
of like the etw equivalent of what we

624
00:32:56,940 --> 00:33:00,810
just did with the event log and I'll

625
00:32:58,560 --> 00:33:02,940
show an example of that briefly but um

626
00:33:00,810 --> 00:33:08,639
what I want to show you here was I'm

627
00:33:02,940 --> 00:33:10,090
gonna sort channel and here we have some

628
00:33:08,640 --> 00:33:12,270
operational ones

629
00:33:10,090 --> 00:33:15,370
so by default you may know this already

630
00:33:12,270 --> 00:33:19,680
the event logs that are enabled by

631
00:33:15,370 --> 00:33:22,659
default are the operational and admin

632
00:33:19,680 --> 00:33:24,580
event logs so if you see an etw event

633
00:33:22,660 --> 00:33:26,950
that has one of those channels applied

634
00:33:24,580 --> 00:33:31,540
to it that means that it was designed to

635
00:33:26,950 --> 00:33:34,750
be consumed by the event log okay so

636
00:33:31,540 --> 00:33:37,720
what events in the WMI activity event

637
00:33:34,750 --> 00:33:42,370
log are designed to be consumed by the

638
00:33:37,720 --> 00:33:43,990
event log all these here alright so some

639
00:33:42,370 --> 00:33:48,300
of you may have seen these before but

640
00:33:43,990 --> 00:33:53,470
now we have some context let's see

641
00:33:48,300 --> 00:33:57,480
client process ID host process if you

642
00:33:53,470 --> 00:33:57,480
were to expand this out what you'd find

643
00:33:59,130 --> 00:34:07,620
is that many of these are related to

644
00:34:04,950 --> 00:34:12,040
permanent WMI persistence

645
00:34:07,620 --> 00:34:14,739
okay so this is out of the scope of our

646
00:34:12,040 --> 00:34:17,170
detection but if it was in our scope

647
00:34:14,739 --> 00:34:19,359
these would be the extremely valuable

648
00:34:17,170 --> 00:34:24,310
data sources which also happen to be

649
00:34:19,360 --> 00:34:26,410
consumable by the event log so let me

650
00:34:24,310 --> 00:34:29,799
say that again so if someone was to

651
00:34:26,409 --> 00:34:33,370
approach you to say hey does the event

652
00:34:29,800 --> 00:34:38,230
log log X this is how I would find out

653
00:34:33,370 --> 00:34:41,620
definitively okay I would find a

654
00:34:38,230 --> 00:34:44,290
potentially relevant etw provider in

655
00:34:41,620 --> 00:34:46,150
this case I just searched for WMI and I

656
00:34:44,290 --> 00:34:48,100
also got the hint from collecting event

657
00:34:46,150 --> 00:34:50,170
logs earlier that when I saw on

658
00:34:48,100 --> 00:34:52,929
Microsoft Windows W my activity go to

659
00:34:50,170 --> 00:34:54,730
that corresponding et IV provider go

660
00:34:52,929 --> 00:34:57,850
through the events and look for all the

661
00:34:54,730 --> 00:35:00,820
events that have an operational or an

662
00:34:57,850 --> 00:35:03,130
ADD mid or excuse me an admin channel

663
00:35:00,820 --> 00:35:05,460
applied to them and that's what can be

664
00:35:03,130 --> 00:35:07,690
consumed by the event log cool

665
00:35:05,460 --> 00:35:09,910
now again only a fraction of these are

666
00:35:07,690 --> 00:35:14,320
going to be actually documented by

667
00:35:09,910 --> 00:35:19,089
Microsoft so this is always the fun part

668
00:35:14,320 --> 00:35:21,520
for me as a reverse engineer to obtain

669
00:35:19,090 --> 00:35:23,880
that context

670
00:35:21,520 --> 00:35:27,220
so I have some strategies for that

671
00:35:23,880 --> 00:35:29,380
another thing that we can investigate so

672
00:35:27,220 --> 00:35:31,959
this is a great GUI utility I think it

673
00:35:29,380 --> 00:35:34,900
has some limitations I will also use

674
00:35:31,960 --> 00:35:36,970
perf view as well this is a Microsoft

675
00:35:34,900 --> 00:35:38,590
utility you have to download it but this

676
00:35:36,970 --> 00:35:45,359
is the command that you would use to

677
00:35:38,590 --> 00:35:49,780
dump the schema for this etw provider

678
00:35:45,360 --> 00:35:52,000
windows WMI activity and the thing I

679
00:35:49,780 --> 00:35:54,370
find most valuable sometimes is you see

680
00:35:52,000 --> 00:35:56,410
that template ID there at the top it

681
00:35:54,370 --> 00:36:00,609
says task unjust underscore Oh two three

682
00:35:56,410 --> 00:36:03,549
args so OH two three refers to the event

683
00:36:00,610 --> 00:36:05,620
ID in this case sometimes these schemas

684
00:36:03,550 --> 00:36:08,770
will have really nice names applied to

685
00:36:05,620 --> 00:36:10,450
them okay in this case it didn't so

686
00:36:08,770 --> 00:36:14,740
we're gonna have to dive into the code

687
00:36:10,450 --> 00:36:18,399
to actually verify what this event

688
00:36:14,740 --> 00:36:20,740
actually corresponds to but this looks

689
00:36:18,400 --> 00:36:22,720
kind of cool potentially this event

690
00:36:20,740 --> 00:36:25,779
event ID 23 right because we get

691
00:36:22,720 --> 00:36:29,259
command-line and we get user and client

692
00:36:25,780 --> 00:36:30,820
machine is local all right so we're

693
00:36:29,260 --> 00:36:31,950
adding this to our notes for things to

694
00:36:30,820 --> 00:36:35,080
investigate

695
00:36:31,950 --> 00:36:36,339
so we've collected some good potential

696
00:36:35,080 --> 00:36:38,230
information that we'd like to

697
00:36:36,340 --> 00:36:41,260
investigate further so let's go ahead

698
00:36:38,230 --> 00:36:43,180
and start that investigation so we're

699
00:36:41,260 --> 00:36:45,250
going to collect aw my trace at this

700
00:36:43,180 --> 00:36:47,980
point and we're gonna use well I'm gonna

701
00:36:45,250 --> 00:36:51,580
use log man dot exe which is a built-in

702
00:36:47,980 --> 00:36:54,370
utility since this in 32 this is the

703
00:36:51,580 --> 00:36:58,720
like main command-line utility in

704
00:36:54,370 --> 00:37:00,730
Windows to control etw tray sessions so

705
00:36:58,720 --> 00:37:02,169
a log man start okay we want to start

706
00:37:00,730 --> 00:37:05,080
something what do we want to start we

707
00:37:02,170 --> 00:37:07,480
want to start a trace we give it and

708
00:37:05,080 --> 00:37:10,330
then we give it a name so I just called

709
00:37:07,480 --> 00:37:13,510
it W my trace - P stands for a provider

710
00:37:10,330 --> 00:37:15,279
so we specify the provider name right

711
00:37:13,510 --> 00:37:17,650
there and then we give it a keyword

712
00:37:15,280 --> 00:37:20,680
value so if we wanted to filter on

713
00:37:17,650 --> 00:37:24,370
certain keyword values we could but

714
00:37:20,680 --> 00:37:26,890
instead so this is a 64-bit value I'm

715
00:37:24,370 --> 00:37:28,839
just setting all the bits to one meaning

716
00:37:26,890 --> 00:37:30,790
I want to collect all the keywords I

717
00:37:28,840 --> 00:37:31,780
don't want to do any filtering on any of

718
00:37:30,790 --> 00:37:34,830
the events that are going to be

719
00:37:31,780 --> 00:37:38,280
collected in this trace and then 0xff

720
00:37:34,830 --> 00:37:39,990
this bite refers to the log level okay I

721
00:37:38,280 --> 00:37:41,580
don't care about the log level I don't

722
00:37:39,990 --> 00:37:43,799
want to filter just give me all the all

723
00:37:41,580 --> 00:37:46,950
the events and then I'm gonna output it

724
00:37:43,800 --> 00:37:49,890
to a trace file an ETL file okay and

725
00:37:46,950 --> 00:37:51,660
then ETS is uh I think it's like a

726
00:37:49,890 --> 00:37:54,259
real-time trace session I just always

727
00:37:51,660 --> 00:37:58,109
use that and always forget what it means

728
00:37:54,260 --> 00:38:01,770
okay so after we run that we're going to

729
00:37:58,110 --> 00:38:04,160
run our attack scenarios our attack

730
00:38:01,770 --> 00:38:06,690
proof-of-concept attack validations

731
00:38:04,160 --> 00:38:07,859
after the trace has started and then

732
00:38:06,690 --> 00:38:10,380
when we're done doing that we're gonna

733
00:38:07,860 --> 00:38:14,430
stop our trace with log man stop and

734
00:38:10,380 --> 00:38:16,320
then it's been my observation in Windows

735
00:38:14,430 --> 00:38:18,750
10 and I haven't really investigated

736
00:38:16,320 --> 00:38:21,930
this but generally speaking ECL files

737
00:38:18,750 --> 00:38:25,680
are not very usable at least in like

738
00:38:21,930 --> 00:38:29,250
previous versions of Windows the the

739
00:38:25,680 --> 00:38:31,680
relevant schemas for the etw provider

740
00:38:29,250 --> 00:38:33,780
would not be applied to the ETL file so

741
00:38:31,680 --> 00:38:36,810
you an ETL file would just consist of

742
00:38:33,780 --> 00:38:39,870
the raw trace data with no human

743
00:38:36,810 --> 00:38:41,460
readable context around it so what you'd

744
00:38:39,870 --> 00:38:44,279
have to do is use another built in

745
00:38:41,460 --> 00:38:47,280
utility code trace RPT to convert the

746
00:38:44,280 --> 00:38:48,900
ETL to an e VTX file which is going to

747
00:38:47,280 --> 00:38:51,260
be human readable and so the process

748
00:38:48,900 --> 00:38:54,630
under the hood that happens there is

749
00:38:51,260 --> 00:38:57,540
trace are bt knows how to recover the

750
00:38:54,630 --> 00:39:00,510
ECL view provider schema and apply it to

751
00:38:57,540 --> 00:39:02,460
the raw data in the ETL and then convert

752
00:39:00,510 --> 00:39:04,770
it to something actually usable in this

753
00:39:02,460 --> 00:39:11,760
case an e VTX but it also supports CSV

754
00:39:04,770 --> 00:39:16,490
and XML alright so after I ran my trace

755
00:39:11,760 --> 00:39:16,490
and I think I have this handy here

756
00:39:22,450 --> 00:39:28,980
Oh mance is hard okay

757
00:39:31,599 --> 00:39:37,329
so after we ran our trace let's look at

758
00:39:35,380 --> 00:39:39,969
some of the events and the ones there

759
00:39:37,329 --> 00:39:42,039
were many events logged and etw when you

760
00:39:39,969 --> 00:39:45,039
do a neat CW trace just fair warning it

761
00:39:42,039 --> 00:39:47,799
can be very noisy the ones that looked

762
00:39:45,039 --> 00:39:52,539
potentially relevant to lateral movement

763
00:39:47,799 --> 00:39:55,089
were of nid 1112 22 and 23 which when

764
00:39:52,539 --> 00:39:57,549
going into WP explorer none of which had

765
00:39:55,089 --> 00:40:00,479
the operational or admin channels

766
00:39:57,549 --> 00:40:06,969
applied to them okay so these cannot be

767
00:40:00,479 --> 00:40:10,328
consumed by the event log okay so let's

768
00:40:06,969 --> 00:40:13,239
start digging into what let's start

769
00:40:10,329 --> 00:40:16,239
trying to extract some context from

770
00:40:13,239 --> 00:40:20,519
these events alright so here's the first

771
00:40:16,239 --> 00:40:23,739
one event ID 11 kind of interesting okay

772
00:40:20,519 --> 00:40:25,899
win32 process create we get the client

773
00:40:23,739 --> 00:40:27,670
machine so that's kind of interesting it

774
00:40:25,900 --> 00:40:30,849
looks like we could get contacts from

775
00:40:27,670 --> 00:40:32,920
the client that initiated the lateral

776
00:40:30,849 --> 00:40:35,799
movement because some stuff about the

777
00:40:32,920 --> 00:40:39,849
namespace and whatnot so that's

778
00:40:35,799 --> 00:40:42,910
potentially interesting here you found

779
00:40:39,849 --> 00:40:46,089
any 12 so win32 process create right

780
00:40:42,910 --> 00:40:50,078
there alright that's pretty handy and we

781
00:40:46,089 --> 00:40:51,999
get like a corresponding dll path so we

782
00:40:50,079 --> 00:40:54,699
got that event in the event log earlier

783
00:40:51,999 --> 00:40:57,848
that's that that sim win32 was loaded it

784
00:40:54,699 --> 00:41:00,190
looks like this event ID tells us why he

785
00:40:57,849 --> 00:41:02,019
goes win32 process create was called so

786
00:41:00,190 --> 00:41:05,769
that corresponding provider was loaded

787
00:41:02,019 --> 00:41:07,660
event ID 22 we get some additional

788
00:41:05,769 --> 00:41:10,058
interesting contextual information

789
00:41:07,660 --> 00:41:13,440
potentially related to the lateral

790
00:41:10,059 --> 00:41:18,099
movement activity and then my favorite

791
00:41:13,440 --> 00:41:20,249
event ID 23 which also includes the

792
00:41:18,099 --> 00:41:25,989
command line of what was executed

793
00:41:20,249 --> 00:41:28,538
alright so just by observing this you

794
00:41:25,989 --> 00:41:31,239
get some potential good ideas but do you

795
00:41:28,539 --> 00:41:34,690
understand completely the context behind

796
00:41:31,239 --> 00:41:36,999
each one of those fields the answers

797
00:41:34,690 --> 00:41:39,549
probably no and it certainly was for me

798
00:41:36,999 --> 00:41:41,410
so I had to dig in a little bit and this

799
00:41:39,549 --> 00:41:42,519
is what I came up with so I'll just kind

800
00:41:41,410 --> 00:41:45,160
of leave this here for your reference

801
00:41:42,519 --> 00:41:49,419
for when I publish the slides later but

802
00:41:45,160 --> 00:41:51,339
this is the result of doing some re2 to

803
00:41:49,420 --> 00:41:54,579
extract the context for each one of

804
00:41:51,339 --> 00:41:56,680
these fields and what's amazing in my

805
00:41:54,579 --> 00:41:59,589
opinion for these events were the

806
00:41:56,680 --> 00:42:01,960
following key findings so notepad.exe

807
00:41:59,589 --> 00:42:04,058
was started and it started with a

808
00:42:01,960 --> 00:42:08,230
corresponding process ID so we get that

809
00:42:04,059 --> 00:42:11,230
but we also get the process ID of the

810
00:42:08,230 --> 00:42:13,359
source process right so we get the

811
00:42:11,230 --> 00:42:18,670
process ID from the attacker machine as

812
00:42:13,359 --> 00:42:20,288
well there's some solid sock and IR

813
00:42:18,670 --> 00:42:23,289
contacts right there we get the command

814
00:42:20,289 --> 00:42:26,099
line of what was executed we get the

815
00:42:23,289 --> 00:42:28,359
user context the command was executed in

816
00:42:26,099 --> 00:42:31,359
we get the host a fully qualified domain

817
00:42:28,359 --> 00:42:34,480
name of the client machine the attacker

818
00:42:31,359 --> 00:42:37,058
machine we get the WMI provider name

819
00:42:34,480 --> 00:42:42,130
space class name and method name so

820
00:42:37,059 --> 00:42:44,500
validation that when win32 based lateral

821
00:42:42,130 --> 00:42:46,450
movement was performed we get an

822
00:42:44,500 --> 00:42:48,970
indication that the WMI operation was

823
00:42:46,450 --> 00:42:52,210
performed remotely via the is remote

824
00:42:48,970 --> 00:42:54,700
field so super valuable stuff right here

825
00:42:52,210 --> 00:42:56,740
which unfortunately is not consumed by

826
00:42:54,700 --> 00:42:58,808
the event log but there are ways that we

827
00:42:56,740 --> 00:43:00,759
can tap into it all right

828
00:42:58,809 --> 00:43:04,390
so how would we go about obtaining this

829
00:43:00,760 --> 00:43:08,410
context the strategy that I've been

830
00:43:04,390 --> 00:43:12,279
using a lot is I mentioned that an ETU

831
00:43:08,410 --> 00:43:15,819
provider has a good value applied to it

832
00:43:12,279 --> 00:43:19,660
so a good is just a sequence of 16 bytes

833
00:43:15,819 --> 00:43:22,089
all right so if you just search all the

834
00:43:19,660 --> 00:43:23,230
binaries like in system 32 or like in C

835
00:43:22,089 --> 00:43:26,230
windows that were cursed through they're

836
00:43:23,230 --> 00:43:28,089
looking for that byte sequence then what

837
00:43:26,230 --> 00:43:29,559
you'll find is the following and I've

838
00:43:28,089 --> 00:43:33,130
got some code to do this I'll release

839
00:43:29,559 --> 00:43:35,710
all the code as well so here I'm just

840
00:43:33,130 --> 00:43:39,760
forming a binary reg X to look for that

841
00:43:35,710 --> 00:43:43,260
corresponding whimmy activity etw

842
00:43:39,760 --> 00:43:49,329
provider and here's what I came up with

843
00:43:43,260 --> 00:43:52,119
so I only found these three dll's it T

844
00:43:49,329 --> 00:43:55,869
static is not relevant that's related to

845
00:43:52,119 --> 00:43:57,880
like telemetry mi utils wasn't super

846
00:43:55,869 --> 00:43:59,030
relevant I forget what it was for but

847
00:43:57,880 --> 00:44:01,850
wbem

848
00:43:59,030 --> 00:44:04,000
and look like the absolute like relevant

849
00:44:01,850 --> 00:44:07,610
component here that I wanted to dig into

850
00:44:04,000 --> 00:44:09,110
so I started digging into it and what

851
00:44:07,610 --> 00:44:11,390
was handy to with this coat that I

852
00:44:09,110 --> 00:44:13,460
provided was that it gave you the file

853
00:44:11,390 --> 00:44:15,319
offset of where that bite sequence

854
00:44:13,460 --> 00:44:18,290
occurred so considering was talking

855
00:44:15,320 --> 00:44:21,530
about Pease here pea has a has section

856
00:44:18,290 --> 00:44:24,950
headers so we can map the file offset to

857
00:44:21,530 --> 00:44:26,900
the virtual address so we can just map

858
00:44:24,950 --> 00:44:31,029
directly that file offset to the address

859
00:44:26,900 --> 00:44:35,270
in Ida and have it take us directly to

860
00:44:31,030 --> 00:44:38,000
to where that good that etw provider

861
00:44:35,270 --> 00:44:41,570
good is defined in the code which is

862
00:44:38,000 --> 00:44:43,910
pretty cool some additional context I

863
00:44:41,570 --> 00:44:46,970
might want to know is ok WB I'm calm and

864
00:44:43,910 --> 00:44:50,120
looks interesting what what processes

865
00:44:46,970 --> 00:44:52,069
load that DLL all right so this is the

866
00:44:50,120 --> 00:44:54,049
one-liner in PowerShell I might use to

867
00:44:52,070 --> 00:44:56,180
find that out and it turns out that this

868
00:44:54,050 --> 00:44:59,170
is only loaded by the wind management or

869
00:44:56,180 --> 00:45:03,500
WMI service and the winner end service

870
00:44:59,170 --> 00:45:07,460
ok so I would take this and what I would

871
00:45:03,500 --> 00:45:10,160
do here is so I have it here I'm gonna

872
00:45:07,460 --> 00:45:11,720
follow this cross-reference and it takes

873
00:45:10,160 --> 00:45:14,569
me to this code here let me zoom in a

874
00:45:11,720 --> 00:45:16,939
little bit and it calls etw event

875
00:45:14,570 --> 00:45:18,710
register and so what you do when you

876
00:45:16,940 --> 00:45:23,060
call you TW event registers it returns a

877
00:45:18,710 --> 00:45:26,120
handle so we want to register we want

878
00:45:23,060 --> 00:45:28,820
this code to be able to write to win the

879
00:45:26,120 --> 00:45:31,040
activity events and any code that does

880
00:45:28,820 --> 00:45:32,540
that has to use this handle so now I'm

881
00:45:31,040 --> 00:45:35,180
going to fall across references to this

882
00:45:32,540 --> 00:45:39,200
handle and we get some interesting stuff

883
00:45:35,180 --> 00:45:41,660
here so what stood out to me pretty much

884
00:45:39,200 --> 00:45:43,609
right away was the the highlighted

885
00:45:41,660 --> 00:45:47,710
function here published win32 process

886
00:45:43,610 --> 00:45:52,310
creation so let me click on that and

887
00:45:47,710 --> 00:45:54,290
what's called here is etw event right ok

888
00:45:52,310 --> 00:45:55,820
so what is actually being written here's

889
00:45:54,290 --> 00:46:00,350
where you need some context right so you

890
00:45:55,820 --> 00:46:03,080
look up on MSDN all the arguments for

891
00:46:00,350 --> 00:46:05,839
each w event right and you would look at

892
00:46:03,080 --> 00:46:08,779
its corresponding event descriptor which

893
00:46:05,840 --> 00:46:12,230
indeed so the first field in the

894
00:46:08,780 --> 00:46:12,710
structure is hex 17 or decimal 23 that

895
00:46:12,230 --> 00:46:15,560
event

896
00:46:12,710 --> 00:46:24,710
23 so he positively identified the code

897
00:46:15,560 --> 00:46:27,259
that generates this event okay cool

898
00:46:24,710 --> 00:46:30,410
now that function happened to be an

899
00:46:27,260 --> 00:46:32,900
export function so my next question was

900
00:46:30,410 --> 00:46:34,848
okay what code calls that export

901
00:46:32,900 --> 00:46:37,550
function and I have a one-liner for that

902
00:46:34,849 --> 00:46:40,670
as well and it turns out WBM core dot

903
00:46:37,550 --> 00:46:42,170
dll is the only one that calls that so

904
00:46:40,670 --> 00:46:44,630
we're starting to build out this picture

905
00:46:42,170 --> 00:46:47,660
even further of the implementation in

906
00:46:44,630 --> 00:46:50,510
this case on the server side so here's

907
00:46:47,660 --> 00:46:53,629
what the the call trace would look like

908
00:46:50,510 --> 00:46:55,310
if you were doing this dynamically so

909
00:46:53,630 --> 00:46:59,210
some additional interesting context

910
00:46:55,310 --> 00:47:01,099
there all right and then as you start

911
00:46:59,210 --> 00:47:03,369
digging into this so let's put our

912
00:47:01,099 --> 00:47:05,900
attacker hats on and I see these

913
00:47:03,369 --> 00:47:07,970
comparisons being made it's looking for

914
00:47:05,900 --> 00:47:10,790
the literal string win32 process and

915
00:47:07,970 --> 00:47:14,060
create well I happen to know that you

916
00:47:10,790 --> 00:47:15,890
can clone any WMI class to the name of

917
00:47:14,060 --> 00:47:19,160
your choosing so you could clone it to

918
00:47:15,890 --> 00:47:21,200
say the win32 not a process and then

919
00:47:19,160 --> 00:47:23,450
call the create method alright so having

920
00:47:21,200 --> 00:47:26,060
identified the code and seeing the

921
00:47:23,450 --> 00:47:27,890
implementation I thought oh here's a new

922
00:47:26,060 --> 00:47:31,820
attack variant that I might be able to

923
00:47:27,890 --> 00:47:34,759
try and it turns out it's still logged I

924
00:47:31,820 --> 00:47:35,960
haven't really dug into why that could

925
00:47:34,760 --> 00:47:39,800
weren't warrant some further

926
00:47:35,960 --> 00:47:43,220
investigation but I would have only

927
00:47:39,800 --> 00:47:44,780
figured this out if I like having gone

928
00:47:43,220 --> 00:47:46,819
through the steps that I'm highlighting

929
00:47:44,780 --> 00:47:48,650
here alright so there are some

930
00:47:46,820 --> 00:47:50,540
additional data sources as well if we

931
00:47:48,650 --> 00:47:54,230
want to keep going into the weeds if we

932
00:47:50,540 --> 00:47:55,790
find that etw manifest space etw is not

933
00:47:54,230 --> 00:47:59,780
giving us the answers that we're looking

934
00:47:55,790 --> 00:48:02,570
for and we can achieve those by digging

935
00:47:59,780 --> 00:48:05,690
into WPP and trace logging these are

936
00:48:02,570 --> 00:48:09,070
other etw based data sources used

937
00:48:05,690 --> 00:48:12,770
primarily for debugging and telemetry

938
00:48:09,070 --> 00:48:15,830
purposes so I personally don't recommend

939
00:48:12,770 --> 00:48:17,900
building detections off these Microsoft

940
00:48:15,830 --> 00:48:21,140
actually does they build some detection

941
00:48:17,900 --> 00:48:22,550
Zoff trace logging data sources I don't

942
00:48:21,140 --> 00:48:25,279
have time to get into the weeds there

943
00:48:22,550 --> 00:48:26,299
but I gave a talk at recon about this

944
00:48:25,280 --> 00:48:30,410
topic and I

945
00:48:26,299 --> 00:48:32,689
a pretty extensive blogpost on this okay

946
00:48:30,410 --> 00:48:35,058
so in summary we've identified what can

947
00:48:32,689 --> 00:48:37,368
be logged through ECW we've identified

948
00:48:35,059 --> 00:48:40,339
the code that performs the logging and

949
00:48:37,369 --> 00:48:41,749
in doing so we started to understand the

950
00:48:40,339 --> 00:48:44,420
components involved in the technology

951
00:48:41,749 --> 00:48:46,819
and in beginning to reverse-engineer

952
00:48:44,420 --> 00:48:48,829
these components we started to gain some

953
00:48:46,819 --> 00:48:51,709
insight into how an attacker might go

954
00:48:48,829 --> 00:48:53,449
about evading our detections and in this

955
00:48:51,709 --> 00:48:55,519
case we got lucky with an extremely

956
00:48:53,449 --> 00:48:59,900
valuable data source in this case of NID

957
00:48:55,519 --> 00:49:01,819
23 all right so cool story bro but like

958
00:48:59,900 --> 00:49:04,969
what am I actually supposed to do with

959
00:49:01,819 --> 00:49:08,449
etw all right so therein lies the

960
00:49:04,969 --> 00:49:11,719
challenge there are tools out there that

961
00:49:08,449 --> 00:49:15,979
can allow you to collect these etw

962
00:49:11,719 --> 00:49:18,619
events at scale at in varying manners

963
00:49:15,979 --> 00:49:20,118
all right so defender ATP and I'm sure

964
00:49:18,619 --> 00:49:23,269
there's other commercial products out

965
00:49:20,119 --> 00:49:26,029
there as well that tap into egw like do

966
00:49:23,269 --> 00:49:28,189
so in an extremely efficient and like

967
00:49:26,029 --> 00:49:29,839
performant manner so like that's out

968
00:49:28,189 --> 00:49:32,029
there if you've got some cash to burn

969
00:49:29,839 --> 00:49:34,189
defender ATP's like really good at that

970
00:49:32,029 --> 00:49:35,989
if you're looking for open source like

971
00:49:34,189 --> 00:49:37,879
amazing options that are out there for

972
00:49:35,989 --> 00:49:40,069
your experimentation purposes there's

973
00:49:37,880 --> 00:49:43,549
crab ztw which was open sourced by

974
00:49:40,069 --> 00:49:46,038
Microsoft and silk etw by fuzzy second

975
00:49:43,549 --> 00:49:48,288
at fireEye both amazing tools that I

976
00:49:46,039 --> 00:49:50,689
encourage you to investigate if you want

977
00:49:48,289 --> 00:49:53,799
to dig into this further so thanks a lot

978
00:49:50,689 --> 00:49:53,799
I don't have to

