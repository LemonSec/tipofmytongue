1
00:00:00,000 --> 00:00:03,959
you started my name is Jared Dumont

2
00:00:02,129 --> 00:00:06,839
we're talking about using next-gen

3
00:00:03,959 --> 00:00:10,230
buzzing tools sitting on a pile oh oh

4
00:00:06,839 --> 00:00:11,610
day yeah my co-speaker John is down here

5
00:00:10,230 --> 00:00:14,099
he's going to be coming up halfway

6
00:00:11,610 --> 00:00:16,020
through to kind of pick up where I leave

7
00:00:14,099 --> 00:00:18,930
off so thank you so much for coming

8
00:00:16,020 --> 00:00:20,970
really excited to be here as always yeah

9
00:00:18,930 --> 00:00:23,539
good stuff so if you don't know who i am

10
00:00:20,970 --> 00:00:25,859
i'm the founder of EDA labs former NSA

11
00:00:23,539 --> 00:00:28,470
built a bunch of next-gen tech have

12
00:00:25,859 --> 00:00:30,420
classes i'm Pluralsight in the news

13
00:00:28,470 --> 00:00:31,109
train here did training class here was

14
00:00:30,420 --> 00:00:33,510
really fun

15
00:00:31,109 --> 00:00:35,420
did our advanced memory corruption class

16
00:00:33,510 --> 00:00:38,610
here so we just finished up to that so

17
00:00:35,420 --> 00:00:40,530
any of my students that were in that

18
00:00:38,610 --> 00:00:42,540
anybody here did anybody come I think I

19
00:00:40,530 --> 00:00:44,309
saw a few nobody wants to admit it okay

20
00:00:42,540 --> 00:00:45,450
anyway there is there's at least one I

21
00:00:44,309 --> 00:00:48,000
know I know there's a few that we're

22
00:00:45,450 --> 00:00:50,760
gonna come so cool so that's me

23
00:00:48,000 --> 00:00:51,960
John also he's a security senior

24
00:00:50,760 --> 00:00:53,430
security engineer with us here at video

25
00:00:51,960 --> 00:00:55,770
labs and does a lot of things from

26
00:00:53,430 --> 00:00:58,079
penetration testing to code auditing and

27
00:00:55,770 --> 00:00:59,850
all the different sort of things that we

28
00:00:58,079 --> 00:01:02,550
do app tests social engineering we do a

29
00:00:59,850 --> 00:01:04,290
lot of different things and I won't bore

30
00:01:02,550 --> 00:01:05,429
you with a long pitch about what we do a

31
00:01:04,290 --> 00:01:06,960
video but just so you have some

32
00:01:05,430 --> 00:01:10,710
background so you know why are these

33
00:01:06,960 --> 00:01:12,089
guys even fuzzing for O'Dea and and how

34
00:01:10,710 --> 00:01:14,250
did they get access to Microsoft's tool

35
00:01:12,090 --> 00:01:15,960
that's another good question which way I

36
00:01:14,250 --> 00:01:18,360
won't answer but you know maybe we will

37
00:01:15,960 --> 00:01:19,679
but basically we do that kind of fits

38
00:01:18,360 --> 00:01:20,880
into our special project so we kind of

39
00:01:19,680 --> 00:01:22,950
split our business and it sort of for

40
00:01:20,880 --> 00:01:25,589
the makers side so we do a lot of code

41
00:01:22,950 --> 00:01:27,090
audits and products and IOT and SDLC and

42
00:01:25,590 --> 00:01:28,979
training for kind of product maker and

43
00:01:27,090 --> 00:01:31,110
we also do a lot of enterprise red

44
00:01:28,979 --> 00:01:32,759
teaming you know compliance of

45
00:01:31,110 --> 00:01:33,840
monitoring's blue team security

46
00:01:32,759 --> 00:01:35,400
engineering a lot of really interesting

47
00:01:33,840 --> 00:01:36,740
stuff like that so very exciting stuff

48
00:01:35,400 --> 00:01:40,259
for all different industries

49
00:01:36,740 --> 00:01:41,310
that's us here Jaron Jonna and VA we

50
00:01:40,259 --> 00:01:42,720
actually have another talk here

51
00:01:41,310 --> 00:01:44,220
Michael's in the is Michael raise your

52
00:01:42,720 --> 00:01:46,048
hand I'm embarrass you we have at least

53
00:01:44,220 --> 00:01:47,189
another another talk I have some some

54
00:01:46,049 --> 00:01:48,780
other video folks they're gonna be doing

55
00:01:47,189 --> 00:01:49,979
a WebSocket hacking talk if you stick

56
00:01:48,780 --> 00:01:51,899
around until Sunday you want to catch

57
00:01:49,979 --> 00:01:53,369
that one too because he's gonna be

58
00:01:51,899 --> 00:01:54,869
talking about making WebSockets great

59
00:01:53,369 --> 00:01:56,219
again I think that's the hat I saw I'm

60
00:01:54,869 --> 00:01:58,409
pretty sure I don't know did I hear that

61
00:01:56,219 --> 00:01:58,919
maybe I misheard that I might have made

62
00:01:58,409 --> 00:02:02,189
that up

63
00:01:58,920 --> 00:02:03,299
I could have it's possible so one thing

64
00:02:02,189 --> 00:02:04,589
when you talk about doing a product

65
00:02:03,299 --> 00:02:05,850
security assessment just to give you a

66
00:02:04,590 --> 00:02:07,320
real quick background I'm not going to

67
00:02:05,850 --> 00:02:09,750
bore you with a long you know STLCC

68
00:02:07,320 --> 00:02:11,549
thing or anything like that but just to

69
00:02:09,750 --> 00:02:13,709
give you a little backdrop on how a

70
00:02:11,550 --> 00:02:16,349
product or software security

71
00:02:13,709 --> 00:02:18,989
the whole lifecycle and process and

72
00:02:16,349 --> 00:02:21,420
maturity of software security it is kind

73
00:02:18,989 --> 00:02:22,769
of different from enterprise security we

74
00:02:21,420 --> 00:02:25,379
work out both and we see those

75
00:02:22,769 --> 00:02:27,120
differences in spirit it's kind of

76
00:02:25,379 --> 00:02:29,819
similar right it's it's you know

77
00:02:27,120 --> 00:02:31,439
measuring and metrics and training and

78
00:02:29,819 --> 00:02:33,750
kind of doing better kind of continuous

79
00:02:31,439 --> 00:02:35,340
improvement the idea is the same with

80
00:02:33,750 --> 00:02:36,420
any sort of security program but it's a

81
00:02:35,340 --> 00:02:38,069
little bit different because you've got

82
00:02:36,420 --> 00:02:40,500
a trained developers an architecture

83
00:02:38,069 --> 00:02:42,298
review and ramped up on the domain and

84
00:02:40,500 --> 00:02:44,519
you know code creation and testing

85
00:02:42,299 --> 00:02:46,680
component static dynamic manual analysis

86
00:02:44,519 --> 00:02:48,989
these are some of the skill sets from at

87
00:02:46,680 --> 00:02:51,510
least a penetration testing or a product

88
00:02:48,989 --> 00:02:52,769
security assessment skill set that's a

89
00:02:51,510 --> 00:02:56,340
little bit different than kind of the

90
00:02:52,769 --> 00:02:57,569
enterprise pen testing von scanning you

91
00:02:56,340 --> 00:02:59,010
know different different type of skill

92
00:02:57,569 --> 00:03:00,358
set but kind of you know a lot of the

93
00:02:59,010 --> 00:03:03,000
same folks some of the same folks do

94
00:03:00,359 --> 00:03:04,139
both not all do though but so just to

95
00:03:03,000 --> 00:03:05,400
give you a little background that there

96
00:03:04,139 --> 00:03:06,750
is a little bit of a difference and

97
00:03:05,400 --> 00:03:09,090
that's kind of the background that we

98
00:03:06,750 --> 00:03:11,849
come from which is kind of understanding

99
00:03:09,090 --> 00:03:13,349
both so you know and one of the things

100
00:03:11,849 --> 00:03:15,418
to take away from this is fuzzing the

101
00:03:13,349 --> 00:03:16,768
only way that you could find out a or is

102
00:03:15,419 --> 00:03:19,229
fuzzing the only way that you could

103
00:03:16,769 --> 00:03:20,669
mature your you know your your software

104
00:03:19,229 --> 00:03:24,209
product of course not you know there's

105
00:03:20,669 --> 00:03:25,769
lots of different STL C programs there's

106
00:03:24,209 --> 00:03:27,540
lots of different places from the design

107
00:03:25,769 --> 00:03:29,519
review to the you know who knows what

108
00:03:27,540 --> 00:03:30,750
type of static analysis tools a lot of

109
00:03:29,519 --> 00:03:32,699
different ways that you could find and

110
00:03:30,750 --> 00:03:34,019
you should use all those techniques to

111
00:03:32,699 --> 00:03:36,989
find bugs we're just talking in

112
00:03:34,019 --> 00:03:38,430
particular about next-gen fuzzing so and

113
00:03:36,989 --> 00:03:40,169
of course the reason you want to do any

114
00:03:38,430 --> 00:03:42,299
of those activities is because it'll

115
00:03:40,169 --> 00:03:43,620
cost you more and this is true of so

116
00:03:42,299 --> 00:03:45,930
this is our business case if you're in

117
00:03:43,620 --> 00:03:47,310
security and you haven't you know

118
00:03:45,930 --> 00:03:48,150
figured out how to make a business case

119
00:03:47,310 --> 00:03:49,650
to your manage yet

120
00:03:48,150 --> 00:03:50,909
this is basically how you make the case

121
00:03:49,650 --> 00:03:52,799
to your management your customer which

122
00:03:50,909 --> 00:03:54,629
is if you don't spend money now you'll

123
00:03:52,799 --> 00:03:55,979
spend more later right that's that's the

124
00:03:54,629 --> 00:03:57,810
whole reason we do security from a

125
00:03:55,979 --> 00:03:59,579
business analysis side of things and so

126
00:03:57,810 --> 00:04:01,379
that's true of software security too

127
00:03:59,579 --> 00:04:02,669
right it's gonna cost you more to fix

128
00:04:01,379 --> 00:04:04,379
your products once they're filled up now

129
00:04:02,669 --> 00:04:06,030
what kind of bugs are we gonna be

130
00:04:04,379 --> 00:04:08,489
talking about today that are kind of

131
00:04:06,030 --> 00:04:10,049
mostly we're talking about the tool and

132
00:04:08,489 --> 00:04:13,049
the fuzzing and how to use it in how we

133
00:04:10,049 --> 00:04:14,310
find bugs and stuff so but we do want to

134
00:04:13,049 --> 00:04:16,470
give you just a little bit of backdrop

135
00:04:14,310 --> 00:04:19,289
because you know the type of people that

136
00:04:16,470 --> 00:04:21,840
are interested in fully compiled native

137
00:04:19,289 --> 00:04:24,150
code C C++ assembly that kind of stuff

138
00:04:21,839 --> 00:04:25,979
it's a slightly different set of folks

139
00:04:24,150 --> 00:04:28,049
than maybe are always interested in

140
00:04:25,979 --> 00:04:30,460
mobile ABS web

141
00:04:28,050 --> 00:04:32,199
lots of different kinds of languages

142
00:04:30,460 --> 00:04:34,989
Rusco you know more memory safe

143
00:04:32,199 --> 00:04:37,060
languages by the way if you can use

144
00:04:34,990 --> 00:04:40,060
those you should just put that out there

145
00:04:37,060 --> 00:04:41,590
for what it's worth because there are

146
00:04:40,060 --> 00:04:44,080
still a lot of memory corruption

147
00:04:41,590 --> 00:04:45,758
vulnerabilities still being found you

148
00:04:44,080 --> 00:04:48,250
would think that you know in 20 years

149
00:04:45,759 --> 00:04:50,740
that if that I've been in this field and

150
00:04:48,250 --> 00:04:52,120
and and in 20 years that things would

151
00:04:50,740 --> 00:04:54,789
have changed drastically and in some

152
00:04:52,120 --> 00:04:57,069
ways they have and in other ways I'll

153
00:04:54,789 --> 00:04:59,229
show you an example of a vulnerability

154
00:04:57,069 --> 00:05:00,699
we just found last last night actually

155
00:04:59,229 --> 00:05:02,800
as we were kind of continuing with some

156
00:05:00,699 --> 00:05:04,270
of this research where we see that man

157
00:05:02,800 --> 00:05:06,340
this looks a lot like the late 90s

158
00:05:04,270 --> 00:05:07,840
interesting you know so you still see a

159
00:05:06,340 --> 00:05:08,888
lot of difference so it depending on the

160
00:05:07,840 --> 00:05:10,599
language you're working at you're gonna

161
00:05:08,889 --> 00:05:12,669
look for a different set of bugs like OS

162
00:05:10,599 --> 00:05:14,259
top ten for more web apps memory

163
00:05:12,669 --> 00:05:16,930
corruption for more seen C++ so that's

164
00:05:14,259 --> 00:05:19,180
just the backdrop there and again DAST

165
00:05:16,930 --> 00:05:20,590
is one of the ways that you would find

166
00:05:19,180 --> 00:05:23,199
dynamic application security testing

167
00:05:20,590 --> 00:05:25,479
which for native code generally means

168
00:05:23,199 --> 00:05:27,669
fuzzing and interesting a little bit of

169
00:05:25,479 --> 00:05:31,120
trivia here seventy percent of the patch

170
00:05:27,669 --> 00:05:32,799
TVs and windows over the last twenty

171
00:05:31,120 --> 00:05:34,000
years are still memory corruption

172
00:05:32,800 --> 00:05:35,680
vulnerabilities that actually hasn't

173
00:05:34,000 --> 00:05:37,060
changed that statistic has not changed

174
00:05:35,680 --> 00:05:38,680
over the years it goes up and down a

175
00:05:37,060 --> 00:05:41,110
little bit you know year to year but

176
00:05:38,680 --> 00:05:42,610
generally that's the same and you might

177
00:05:41,110 --> 00:05:44,259
say wow that's really weird like I would

178
00:05:42,610 --> 00:05:45,789
have thought that you know overflows and

179
00:05:44,259 --> 00:05:47,620
heap Powter flows and uninitialized

180
00:05:45,789 --> 00:05:49,210
memory and all these different kinds of

181
00:05:47,620 --> 00:05:50,380
use after free type confusion all these

182
00:05:49,210 --> 00:05:52,388
kind of vulnerabilities those would all

183
00:05:50,380 --> 00:05:54,820
be gone by now but when you're a

184
00:05:52,389 --> 00:05:56,740
platform maker like Microsoft or like

185
00:05:54,820 --> 00:05:58,419
other operating systems or kernels or

186
00:05:56,740 --> 00:06:00,520
desktop if your office or making a

187
00:05:58,419 --> 00:06:01,870
browser or anything like that you know

188
00:06:00,520 --> 00:06:03,190
you're you're writing at that layer

189
00:06:01,870 --> 00:06:04,960
where those kind of bugs tend to be

190
00:06:03,190 --> 00:06:06,610
prevalent if you're making a web app and

191
00:06:04,960 --> 00:06:07,719
c-sharp you should have zero percent of

192
00:06:06,610 --> 00:06:09,039
the bugs that you patch our memory

193
00:06:07,719 --> 00:06:10,570
corruption bugs generally unless you're

194
00:06:09,039 --> 00:06:11,530
working on the the.net framework or

195
00:06:10,570 --> 00:06:14,139
something right so does that make sense

196
00:06:11,530 --> 00:06:16,179
that just has kind of a backdrop so

197
00:06:14,139 --> 00:06:17,520
what's interesting though the tool that

198
00:06:16,180 --> 00:06:19,599
we're going to be talking mostly about

199
00:06:17,520 --> 00:06:21,250
which is Microsoft's tool it's called

200
00:06:19,599 --> 00:06:22,780
Microsoft security risk detection tool

201
00:06:21,250 --> 00:06:24,130
that's that's the the tool that we

202
00:06:22,780 --> 00:06:26,409
ultimately decided we wanted to play

203
00:06:24,130 --> 00:06:27,699
with most compared to AFL and some of

204
00:06:26,409 --> 00:06:29,740
the other next gen fuzzing tools and

205
00:06:27,699 --> 00:06:31,719
we'll talk more about that and they've

206
00:06:29,740 --> 00:06:33,849
kind of taken this approach of well

207
00:06:31,719 --> 00:06:35,380
people doing ghast want to also scan web

208
00:06:33,849 --> 00:06:37,690
ads so they've actually included a web

209
00:06:35,380 --> 00:06:39,969
app security scanning tool as part of

210
00:06:37,690 --> 00:06:40,580
their security scanner it's not just a

211
00:06:39,969 --> 00:06:41,960
native code

212
00:06:40,580 --> 00:06:43,580
it also has a web app which is kind of

213
00:06:41,960 --> 00:06:46,008
interesting kind of more of that sweet

214
00:06:43,580 --> 00:06:47,539
approach we see other vendors have taken

215
00:06:46,009 --> 00:06:48,620
the same sort of approach like synopsis

216
00:06:47,539 --> 00:06:49,849
went about a whole bunch of companies

217
00:06:48,620 --> 00:06:52,639
and they include a whole bunch of

218
00:06:49,849 --> 00:06:53,960
different products across the board in

219
00:06:52,639 --> 00:06:56,150
there and their suite of offerings as

220
00:06:53,960 --> 00:06:58,008
well so not uncommon that we see

221
00:06:56,150 --> 00:06:59,750
companies that are playing in security

222
00:06:58,009 --> 00:07:01,610
kind of offering not just one niche

223
00:06:59,750 --> 00:07:04,219
product but trying to offer more of a

224
00:07:01,610 --> 00:07:05,629
suite of products so anyway long story

225
00:07:04,219 --> 00:07:08,840
short there's things that you could test

226
00:07:05,629 --> 00:07:10,490
from api's input field setting pages

227
00:07:08,840 --> 00:07:14,388
whatever on the website and of course

228
00:07:10,490 --> 00:07:16,069
more of the file inputs or packet inputs

229
00:07:14,389 --> 00:07:17,330
or whatever it may be on the native side

230
00:07:16,069 --> 00:07:19,009
if you're testing a web server you're

231
00:07:17,330 --> 00:07:20,810
sending data to it via packets if it's

232
00:07:19,009 --> 00:07:22,550
more like office you're delivering more

233
00:07:20,810 --> 00:07:24,860
like office documents to it so somehow

234
00:07:22,550 --> 00:07:27,259
we need to get data to it and see if the

235
00:07:24,860 --> 00:07:30,259
application can be robust in the face of

236
00:07:27,259 --> 00:07:32,360
kind of severe inputs or mutated inputs

237
00:07:30,259 --> 00:07:33,650
or you know kind of as you get code

238
00:07:32,360 --> 00:07:36,849
coverage across the app so let's all

239
00:07:33,650 --> 00:07:36,849
talk more and explain more about that

240
00:07:39,159 --> 00:07:44,539
last little bit of background is that

241
00:07:43,279 --> 00:07:46,039
there are pros and cons to different

242
00:07:44,539 --> 00:07:47,599
approaches right the manual you know

243
00:07:46,039 --> 00:07:50,029
security analysis approaches they find

244
00:07:47,599 --> 00:07:52,099
those hard to find bugs dynamic finds

245
00:07:50,029 --> 00:07:53,690
bugs in like heavy parsing code we're

246
00:07:52,099 --> 00:07:55,849
reading it's hard or static analysis

247
00:07:53,690 --> 00:07:57,740
might fail and it tends to get less

248
00:07:55,849 --> 00:07:59,930
false positives which is great in

249
00:07:57,740 --> 00:08:01,310
dynamic although it's not perfect either

250
00:07:59,930 --> 00:08:02,960
right it doesn't you know it only is

251
00:08:01,310 --> 00:08:04,550
hitting certain parts the app generally

252
00:08:02,960 --> 00:08:07,190
speaking in the past one of the biggest

253
00:08:04,550 --> 00:08:08,629
you know sort of criticisms of fuzzing

254
00:08:07,190 --> 00:08:10,669
was well it doesn't integrate well with

255
00:08:08,629 --> 00:08:12,080
CI CD so we only use it kind of ad hoc

256
00:08:10,669 --> 00:08:14,599
now and then and it's really only

257
00:08:12,080 --> 00:08:16,370
hitting the attack surface so we're not

258
00:08:14,599 --> 00:08:17,960
going very deep in the protocol and so

259
00:08:16,370 --> 00:08:19,430
static analysis is better generally

260
00:08:17,960 --> 00:08:21,109
because we can run that you know maybe

261
00:08:19,430 --> 00:08:22,789
every time we check in code or we have

262
00:08:21,110 --> 00:08:25,969
we have a better ability to integrate

263
00:08:22,789 --> 00:08:28,370
static analysis into CI CD so that's

264
00:08:25,969 --> 00:08:29,539
kind of been the the best tool maybe in

265
00:08:28,370 --> 00:08:31,520
some ways from a security standpoint

266
00:08:29,539 --> 00:08:32,958
from a developer standpoint but yeah

267
00:08:31,520 --> 00:08:34,458
fuzzing finds a lot of bugs and so does

268
00:08:32,958 --> 00:08:35,809
manual analysis and it's like you need

269
00:08:34,458 --> 00:08:38,119
those you really need those approaches

270
00:08:35,809 --> 00:08:39,140
in there too and so that's kind of what

271
00:08:38,120 --> 00:08:41,240
we're going to be talking about too

272
00:08:39,140 --> 00:08:42,979
which is how do we integrate these and a

273
00:08:41,240 --> 00:08:44,810
more continuous manner so that we can do

274
00:08:42,979 --> 00:08:45,649
this better than just an ad-hoc basis so

275
00:08:44,810 --> 00:08:48,109
that's part of what we want to get

276
00:08:45,649 --> 00:08:51,100
across so that's the background on kind

277
00:08:48,110 --> 00:08:53,449
of you know software security in general

278
00:08:51,100 --> 00:08:54,110
and kind of who we are and why we're

279
00:08:53,449 --> 00:08:55,040
doing this project

280
00:08:54,110 --> 00:08:56,120
why we're doing this project because

281
00:08:55,040 --> 00:08:58,040
I've been interested in fuzzing my whole

282
00:08:56,120 --> 00:08:59,209
career and it's a very interesting way

283
00:08:58,040 --> 00:09:00,589
that we can get back to the community

284
00:08:59,209 --> 00:09:02,239
sharing the research and stuff that we

285
00:09:00,589 --> 00:09:03,380
do and I think there's a lot of need

286
00:09:02,240 --> 00:09:05,450
there's a lot of companies that still

287
00:09:03,380 --> 00:09:06,829
are not integrating fuzzing into their

288
00:09:05,450 --> 00:09:08,510
development lifestyle and there's a lot

289
00:09:06,829 --> 00:09:11,120
of hackers you know maybe still not

290
00:09:08,510 --> 00:09:13,010
realizing they can fully leverage next

291
00:09:11,120 --> 00:09:14,360
gen fuzzy ninja bug hunting so whichever

292
00:09:13,010 --> 00:09:16,579
side whether you're kind of more on the

293
00:09:14,360 --> 00:09:17,870
offense or defense you can take kind of

294
00:09:16,579 --> 00:09:19,310
what we're and we're going to release

295
00:09:17,870 --> 00:09:20,209
some of this on a github to some of the

296
00:09:19,310 --> 00:09:23,449
some of the stuff that we're going to

297
00:09:20,209 --> 00:09:25,430
talk about so all right real quickly and

298
00:09:23,450 --> 00:09:26,839
it'll be quick I promise because you get

299
00:09:25,430 --> 00:09:28,099
maybe a few followed fuzzing you kind of

300
00:09:26,839 --> 00:09:29,540
know some of the traditional fuzzing

301
00:09:28,100 --> 00:09:30,550
tools versus feedback which is what

302
00:09:29,540 --> 00:09:32,810
we're going to be talking about so

303
00:09:30,550 --> 00:09:35,089
traditional fuzzing methods are mutation

304
00:09:32,810 --> 00:09:36,469
and basically that would be like you

305
00:09:35,089 --> 00:09:38,480
have a bunch of samples a bunch of

306
00:09:36,470 --> 00:09:40,700
whatever files whatever your fuzzing

307
00:09:38,480 --> 00:09:43,339
right could be images could be movies

308
00:09:40,700 --> 00:09:45,290
could be PNG s could be PDFs could be

309
00:09:43,339 --> 00:09:46,490
whatever if you're if you're doing file

310
00:09:45,290 --> 00:09:48,829
fuzzing I'm just we're using file

311
00:09:46,490 --> 00:09:51,350
fuzzing in this case mostly because they

312
00:09:48,829 --> 00:09:52,719
integrate the easiest into feedback

313
00:09:51,350 --> 00:09:54,680
fuzzers and I'll talk about why that is

314
00:09:52,720 --> 00:09:56,510
so you have so you have a bunch of

315
00:09:54,680 --> 00:09:57,890
samples maybe you do some min set to get

316
00:09:56,510 --> 00:10:00,470
good seeds and all that John I'll talk a

317
00:09:57,890 --> 00:10:01,970
little bit about seeds but basically you

318
00:10:00,470 --> 00:10:04,160
need long runtimes because it's not very

319
00:10:01,970 --> 00:10:06,290
intelligently targeted fuzzing so that's

320
00:10:04,160 --> 00:10:08,930
one good and bad so it's not overly

321
00:10:06,290 --> 00:10:10,370
complex to set up but it's not too could

322
00:10:08,930 --> 00:10:11,810
take a long time to get good code

323
00:10:10,370 --> 00:10:13,940
coverage across the app if you're doing

324
00:10:11,810 --> 00:10:15,800
mutation fuzzing generation fuzzing was

325
00:10:13,940 --> 00:10:18,350
more where you construct the inputs from

326
00:10:15,800 --> 00:10:20,000
scratch so you sort of reverse engineer

327
00:10:18,350 --> 00:10:21,380
maybe the RFC or you read through it and

328
00:10:20,000 --> 00:10:22,880
you basically say this field does this

329
00:10:21,380 --> 00:10:24,589
these three bytes do this here's a hash

330
00:10:22,880 --> 00:10:26,750
here's a field here's a link here's do

331
00:10:24,589 --> 00:10:28,160
you kind of reconstruct the protocol

332
00:10:26,750 --> 00:10:30,560
whether its network or file or whatever

333
00:10:28,160 --> 00:10:32,360
and then you generate inputs deliver to

334
00:10:30,560 --> 00:10:33,619
the application and then boom maybe you

335
00:10:32,360 --> 00:10:35,060
find your bug there you hope so that's

336
00:10:33,620 --> 00:10:36,320
the whole idea you're monitoring

337
00:10:35,060 --> 00:10:37,430
throughout that project you're not

338
00:10:36,320 --> 00:10:38,779
monitoring you're wasting your time

339
00:10:37,430 --> 00:10:40,760
right so it's a little bit laborious

340
00:10:38,779 --> 00:10:42,709
though to create those data definitions

341
00:10:40,760 --> 00:10:44,449
I don't know if anybody's done that with

342
00:10:42,709 --> 00:10:45,380
like peach pits or any of the you know

343
00:10:44,449 --> 00:10:47,479
kind of fuzzers that are out there

344
00:10:45,380 --> 00:10:48,800
things like that you know it's it's

345
00:10:47,480 --> 00:10:50,390
really cool and really good way to get

346
00:10:48,800 --> 00:10:52,459
going fuzzing stuff very still very

347
00:10:50,390 --> 00:10:55,089
valid way create a sulli definition or

348
00:10:52,459 --> 00:10:57,170
Buffa's is an new report of Sulli

349
00:10:55,089 --> 00:10:59,209
but it's a little bit laborious to

350
00:10:57,170 --> 00:11:02,029
create those and that's kind of the

351
00:10:59,209 --> 00:11:04,160
downside there there are some tools that

352
00:11:02,029 --> 00:11:05,899
you can buy like defense six so it was a

353
00:11:04,160 --> 00:11:07,790
company called code Nova con got bought

354
00:11:05,899 --> 00:11:09,590
by synopsis now it's called defense six

355
00:11:07,790 --> 00:11:12,170
they basically have a suite of existing

356
00:11:09,590 --> 00:11:15,170
like you can buy their JPEG buzzer their

357
00:11:12,170 --> 00:11:16,760
Bluetooth buzzer their IP v6 fuzz or

358
00:11:15,170 --> 00:11:18,290
whatever it is so you can kind of and

359
00:11:16,760 --> 00:11:20,510
that's another approach so these were

360
00:11:18,290 --> 00:11:24,170
the three primary approaches really

361
00:11:20,510 --> 00:11:25,460
before feedback fuzzing came to be so

362
00:11:24,170 --> 00:11:26,569
things like this is a tool that I wrote

363
00:11:25,460 --> 00:11:28,430
a long time I call called general

364
00:11:26,570 --> 00:11:30,710
purpose fuzzy or spying on the art of

365
00:11:28,430 --> 00:11:32,959
fighting mini fuzz pfff rad Masoli

366
00:11:30,710 --> 00:11:34,580
Buffa's kernel fuzz peach fuzzer defense

367
00:11:32,960 --> 00:11:36,440
sticks these are these are a lot of

368
00:11:34,580 --> 00:11:38,330
existing tools that are out there that

369
00:11:36,440 --> 00:11:40,040
you can either go and download or buy or

370
00:11:38,330 --> 00:11:41,660
whatever and they all work pretty good I

371
00:11:40,040 --> 00:11:44,390
generally speaking they've all found

372
00:11:41,660 --> 00:11:46,069
their fair share of significant

373
00:11:44,390 --> 00:11:47,960
vulnerabilities and bugs in the past so

374
00:11:46,070 --> 00:11:52,280
good stuff good stuff there that's kind

375
00:11:47,960 --> 00:11:54,680
of the roots in the history fuzzing and

376
00:11:52,280 --> 00:11:55,670
then I actually as part of my PhD work I

377
00:11:54,680 --> 00:11:57,199
actually started doing some research

378
00:11:55,670 --> 00:11:59,810
into new fuzzing techniques and other

379
00:11:57,200 --> 00:12:01,010
people did too things like scale and and

380
00:11:59,810 --> 00:12:02,540
feedback being one of the more

381
00:12:01,010 --> 00:12:05,450
interesting ones using either a genetic

382
00:12:02,540 --> 00:12:07,490
algorithm or a constraint solver to find

383
00:12:05,450 --> 00:12:09,260
and automatically generate new inputs so

384
00:12:07,490 --> 00:12:11,180
that you don't have to either fuzz

385
00:12:09,260 --> 00:12:14,990
forever with mutation or take this

386
00:12:11,180 --> 00:12:16,939
laborious task of creating a fuzzing

387
00:12:14,990 --> 00:12:20,750
definition so that's the whole idea with

388
00:12:16,940 --> 00:12:22,430
feedback that's why it's cool my early

389
00:12:20,750 --> 00:12:23,690
research was called cyber fuzz I

390
00:12:22,430 --> 00:12:24,949
originally call it cluster fuzz which

391
00:12:23,690 --> 00:12:26,360
interestingly enough Google came out

392
00:12:24,950 --> 00:12:28,160
with something called cluster fuzz 2 was

393
00:12:26,360 --> 00:12:29,720
really interesting my adviser made me

394
00:12:28,160 --> 00:12:31,819
change mind a cyber fuzz because he got

395
00:12:29,720 --> 00:12:32,960
close to buzzer sounded to like I don't

396
00:12:31,820 --> 00:12:36,440
know bad or something I guess

397
00:12:32,960 --> 00:12:38,180
but anyway ultimately though what the

398
00:12:36,440 --> 00:12:40,250
two tools that really emerged from all

399
00:12:38,180 --> 00:12:43,459
the early research from different people

400
00:12:40,250 --> 00:12:46,340
was sage and AFL sage was a Microsoft

401
00:12:43,460 --> 00:12:47,960
internal tool AFL was is a public free

402
00:12:46,340 --> 00:12:49,520
open-source tool that came out of kind

403
00:12:47,960 --> 00:12:52,520
of a Google vein of things and those two

404
00:12:49,520 --> 00:12:54,050
tools are really the two I think best

405
00:12:52,520 --> 00:12:55,819
fuzzers out there that people should be

406
00:12:54,050 --> 00:12:57,109
using in one fashion or another if

407
00:12:55,820 --> 00:12:58,670
you're if you're interested in doing

408
00:12:57,110 --> 00:13:01,100
fuzzing at all that's those really where

409
00:12:58,670 --> 00:13:02,180
you want to be and so from the AFL side

410
00:13:01,100 --> 00:13:03,830
of things from the Google side of the

411
00:13:02,180 --> 00:13:05,780
house you've got AFL itself that black

412
00:13:03,830 --> 00:13:07,610
screenshot is a screenshot of AFL and

413
00:13:05,780 --> 00:13:09,920
there's a bunch of tools that are now

414
00:13:07,610 --> 00:13:11,570
trying to commercialize AFL there's one

415
00:13:09,920 --> 00:13:13,189
called buzz buzz and one called fuzz it

416
00:13:11,570 --> 00:13:14,480
and a bunch of others I think Google

417
00:13:13,190 --> 00:13:16,850
just has a free and open source one

418
00:13:14,480 --> 00:13:19,880
called cluster photos you can just use

419
00:13:16,850 --> 00:13:21,320
that so and the idea and the benefit of

420
00:13:19,880 --> 00:13:25,040
those is you get the power

421
00:13:21,320 --> 00:13:27,020
of feedback fuzzing and you should apply

422
00:13:25,040 --> 00:13:28,640
it at scale through the cloud or

423
00:13:27,020 --> 00:13:31,340
something like that so that you can get

424
00:13:28,640 --> 00:13:32,990
this you know massive horsepower and you

425
00:13:31,340 --> 00:13:34,370
can find these hard-to-reach bugs right

426
00:13:32,990 --> 00:13:36,440
that's the idea is you're there's gonna

427
00:13:34,370 --> 00:13:39,380
be in any significant especially old

428
00:13:36,440 --> 00:13:42,170
complex codebase think of things like

429
00:13:39,380 --> 00:13:44,990
font files or JavaScript engines or

430
00:13:42,170 --> 00:13:47,569
image rendering movie rendering even

431
00:13:44,990 --> 00:13:48,860
simple unix utilities like could LS have

432
00:13:47,570 --> 00:13:49,910
a vulnerability you wonder like I don't

433
00:13:48,860 --> 00:13:52,430
know it's weird look we'll talk about

434
00:13:49,910 --> 00:13:53,930
that or simple utilities like that you

435
00:13:52,430 --> 00:13:55,010
wouldn't think so right a lot of it some

436
00:13:53,930 --> 00:13:55,939
of them you think that there shouldn't

437
00:13:55,010 --> 00:13:58,790
really be vulnerabilities there but

438
00:13:55,940 --> 00:14:00,770
anyway there could be in there could

439
00:13:58,790 --> 00:14:04,670
bugs tend to hide for one of three

440
00:14:00,770 --> 00:14:06,710
reasons either the code is old and

441
00:14:04,670 --> 00:14:08,360
complex and kind of hard to find bugs

442
00:14:06,710 --> 00:14:09,950
and or there's just a very hard to reach

443
00:14:08,360 --> 00:14:12,380
this an example of kind of a theoretical

444
00:14:09,950 --> 00:14:14,840
it's not a real piece of code but this

445
00:14:12,380 --> 00:14:16,760
this theoretical bug is what drove the

446
00:14:14,840 --> 00:14:18,650
research behind stage and AFL like if

447
00:14:16,760 --> 00:14:20,600
you had some bug that was hard to reach

448
00:14:18,650 --> 00:14:22,640
because you have to input exactly the

449
00:14:20,600 --> 00:14:24,230
right parameters and if and only if you

450
00:14:22,640 --> 00:14:25,790
do that will you trigger this bug those

451
00:14:24,230 --> 00:14:27,710
are those are considered sort of hard to

452
00:14:25,790 --> 00:14:29,990
reach right so your mutation fuzzer

453
00:14:27,710 --> 00:14:32,270
might have to run forever to find that

454
00:14:29,990 --> 00:14:35,270
or a long time and so that was really

455
00:14:32,270 --> 00:14:36,860
what drove the need and sage went down

456
00:14:35,270 --> 00:14:38,840
the route of constraint solving which is

457
00:14:36,860 --> 00:14:41,090
like okay if I if I you know if I don't

458
00:14:38,840 --> 00:14:43,130
match this if loop then I'll negate each

459
00:14:41,090 --> 00:14:44,660
constraint until we finally follow all

460
00:14:43,130 --> 00:14:46,730
the paths through this so the constraint

461
00:14:44,660 --> 00:14:48,319
solving theoretically is the best way to

462
00:14:46,730 --> 00:14:50,000
do it if L took more the genetic

463
00:14:48,320 --> 00:14:51,770
algorithm route which is well we've got

464
00:14:50,000 --> 00:14:53,960
some good samples and we're just going

465
00:14:51,770 --> 00:14:56,510
to kind of search through this by kind

466
00:14:53,960 --> 00:14:58,130
of percolating and mating and mutating

467
00:14:56,510 --> 00:15:00,350
data but in it with with it with a ga

468
00:14:58,130 --> 00:15:02,060
and eventually either one should get to

469
00:15:00,350 --> 00:15:03,950
this as sort of the hope in the idea as

470
00:15:02,060 --> 00:15:05,329
well as applying fuzzing best practice

471
00:15:03,950 --> 00:15:07,310
so you got this great fuzzing library

472
00:15:05,330 --> 00:15:08,750
kind of known heuristics of fuzzy and

473
00:15:07,310 --> 00:15:10,640
puts in the past that have caused you so

474
00:15:08,750 --> 00:15:12,110
kind of not just randomly changing

475
00:15:10,640 --> 00:15:14,150
things but with some intelligence as

476
00:15:12,110 --> 00:15:16,360
well so that's kind of some of the

477
00:15:14,150 --> 00:15:18,980
background of why there was a need for

478
00:15:16,360 --> 00:15:20,600
constraint solving and other types of

479
00:15:18,980 --> 00:15:22,280
search feedback buzzers and they have

480
00:15:20,600 --> 00:15:23,960
borne fruit okay and this is another

481
00:15:22,280 --> 00:15:26,329
sort of old background from the original

482
00:15:23,960 --> 00:15:28,640
Microsoft Research Sage paper that shows

483
00:15:26,330 --> 00:15:31,460
some of the tools like at bear fire

484
00:15:28,640 --> 00:15:33,920
nirvana true scans III constraint solver

485
00:15:31,460 --> 00:15:35,779
basically the process of

486
00:15:33,920 --> 00:15:37,759
test and input if it doesn't cause a

487
00:15:35,779 --> 00:15:39,319
crash let's make some new inputs and try

488
00:15:37,759 --> 00:15:41,629
some more you know and somewhere another

489
00:15:39,319 --> 00:15:45,529
will make new inputs so we're sort of in

490
00:15:41,629 --> 00:15:47,389
some ways creating the test suite you

491
00:15:45,529 --> 00:15:49,220
know kind of as we run and that's really

492
00:15:47,389 --> 00:15:50,569
cool and you know there's been a lot of

493
00:15:49,220 --> 00:15:53,299
fruit that's come out of that Microsoft

494
00:15:50,569 --> 00:15:54,649
said in you know for back way back when

495
00:15:53,299 --> 00:15:56,119
when they were doing the file fuzzing

496
00:15:54,649 --> 00:15:57,889
for Windows seven that sage found a

497
00:15:56,119 --> 00:15:59,299
third of all the file fuzzing bugs after

498
00:15:57,889 --> 00:16:00,739
they'd run all their other tools so it's

499
00:15:59,299 --> 00:16:02,540
very significant amount of findings that

500
00:16:00,739 --> 00:16:04,609
they have with sage but it was very

501
00:16:02,540 --> 00:16:06,498
private you know very internal tool to

502
00:16:04,609 --> 00:16:07,549
Microsoft and wasn't something that they

503
00:16:06,499 --> 00:16:09,589
wanted to release to the public

504
00:16:07,549 --> 00:16:11,059
understandably because like hey we've

505
00:16:09,589 --> 00:16:12,319
got this oday machine that we're using

506
00:16:11,059 --> 00:16:14,179
to find a bunch of flaws in our own

507
00:16:12,319 --> 00:16:15,529
software we probably shouldn't give that

508
00:16:14,179 --> 00:16:17,660
to the world like that seems like a bad

509
00:16:15,529 --> 00:16:19,339
idea but then they later decided that

510
00:16:17,660 --> 00:16:20,779
they would do that and so they came up

511
00:16:19,339 --> 00:16:21,829
with a project called Springfield that

512
00:16:20,779 --> 00:16:23,359
was the early name for it and now

513
00:16:21,829 --> 00:16:24,410
there's a tool called Microsoft security

514
00:16:23,359 --> 00:16:26,629
research or MS RD

515
00:16:24,410 --> 00:16:28,339
where commercially you can buy or if you

516
00:16:26,629 --> 00:16:30,859
have a Microsoft license already you can

517
00:16:28,339 --> 00:16:32,929
get access to this product and that's

518
00:16:30,859 --> 00:16:35,449
really cool that's really interesting

519
00:16:32,929 --> 00:16:37,309
and that's something that that we wanted

520
00:16:35,449 --> 00:16:40,040
to take a look at and be a part of so we

521
00:16:37,309 --> 00:16:41,809
got involved in that asked the primary

522
00:16:40,040 --> 00:16:43,069
manager that David Molnar if we could

523
00:16:41,809 --> 00:16:44,660
get involved and he's like sure yeah

524
00:16:43,069 --> 00:16:46,009
here's access to another Sardi fuzz away

525
00:16:44,660 --> 00:16:48,139
so that's kind of cool that's basically

526
00:16:46,009 --> 00:16:49,999
how we got access to NS Rd which is

527
00:16:48,139 --> 00:16:51,649
really interesting and very fun for us

528
00:16:49,999 --> 00:16:53,360
to be able to have a chance to you know

529
00:16:51,649 --> 00:16:54,949
find some interesting bugs now of course

530
00:16:53,360 --> 00:16:56,629
constraint solvers aren't perfect right

531
00:16:54,949 --> 00:16:58,459
we see some possible limitations here

532
00:16:56,629 --> 00:17:00,679
there's things like path explosion and

533
00:16:58,459 --> 00:17:03,709
non determinism and hard to solve

534
00:17:00,679 --> 00:17:05,148
branches that maybe can't be you know

535
00:17:03,709 --> 00:17:06,619
solved in a straightforward way by

536
00:17:05,148 --> 00:17:08,178
constraint solver so it's not to say

537
00:17:06,619 --> 00:17:10,279
that this tool is gonna be this magic

538
00:17:08,179 --> 00:17:11,929
machine that finally like you put in

539
00:17:10,279 --> 00:17:13,398
binary outcomes working exploit or

540
00:17:11,929 --> 00:17:16,309
something it's not quite that magic

541
00:17:13,398 --> 00:17:18,079
right people have been looking for that

542
00:17:16,309 --> 00:17:20,029
the holy grail of sort of exploit dev

543
00:17:18,079 --> 00:17:22,220
for a long long time that's not really a

544
00:17:20,029 --> 00:17:23,569
thing that doesn't really exist but you

545
00:17:22,220 --> 00:17:24,980
know some tools are better than others

546
00:17:23,569 --> 00:17:26,629
in terms of finding at least good

547
00:17:24,980 --> 00:17:28,189
crashes and this is definitely one of

548
00:17:26,630 --> 00:17:30,139
them but what's interesting is that

549
00:17:28,189 --> 00:17:32,029
those limitations those sort of

550
00:17:30,139 --> 00:17:34,070
theoretical limitations aren't actually

551
00:17:32,029 --> 00:17:35,419
what's limited fuzzing I think mostly

552
00:17:34,070 --> 00:17:37,399
what's limited fuzzing is still there's

553
00:17:35,419 --> 00:17:38,899
a lot of people not applying into their

554
00:17:37,399 --> 00:17:40,820
projects because of what I mentioned

555
00:17:38,899 --> 00:17:42,379
earlier it's been difficult to integrate

556
00:17:40,820 --> 00:17:44,779
fuzzing in a reliable way to your

557
00:17:42,379 --> 00:17:46,639
project it's been kind of you needed a

558
00:17:44,779 --> 00:17:48,049
very skilled individual to write a

559
00:17:46,639 --> 00:17:50,059
fuzzer and to apply it

560
00:17:48,049 --> 00:17:51,710
to use it and so that's been kind of the

561
00:17:50,059 --> 00:17:54,799
thing that I think's Limited fuzzing the

562
00:17:51,710 --> 00:17:58,999
most more than anything and so that's

563
00:17:54,799 --> 00:18:01,730
one of the things that you know cluster

564
00:17:58,999 --> 00:18:04,070
fuzz with AFL and MS RD with Azure

565
00:18:01,730 --> 00:18:06,259
DevOps they're changing that there's a

566
00:18:04,070 --> 00:18:08,509
way now that you can actually apply

567
00:18:06,259 --> 00:18:10,879
fuzzing in an ongoing straightforward

568
00:18:08,509 --> 00:18:11,539
way into your DevOps life so which is

569
00:18:10,879 --> 00:18:12,769
really cool

570
00:18:11,539 --> 00:18:14,210
so that's something that you know that's

571
00:18:12,769 --> 00:18:15,409
one of the takeaways I want you to know

572
00:18:14,210 --> 00:18:18,739
about this is that you can actually

573
00:18:15,409 --> 00:18:21,049
integrate NS Rd into your product in an

574
00:18:18,739 --> 00:18:22,580
ongoing kind of manner so Microsoft

575
00:18:21,049 --> 00:18:24,619
security research detection that's all

576
00:18:22,580 --> 00:18:26,359
the background on us and fuzzing and all

577
00:18:24,619 --> 00:18:28,549
that stuff so what about this tool tell

578
00:18:26,359 --> 00:18:30,529
me more about this interesting tool that

579
00:18:28,549 --> 00:18:31,908
that you're that you're talking about so

580
00:18:30,529 --> 00:18:33,799
here's the website Microsoft security

581
00:18:31,909 --> 00:18:35,359
risk detection you can go and check that

582
00:18:33,799 --> 00:18:38,029
out and kind of learn more about that

583
00:18:35,359 --> 00:18:41,600
scalable cloud-based easy to set up a

584
00:18:38,029 --> 00:18:43,009
target application it does a lot of the

585
00:18:41,600 --> 00:18:43,509
little things that help you find bugs

586
00:18:43,009 --> 00:18:45,739
anyway

587
00:18:43,509 --> 00:18:47,059
things like enabling that you know the

588
00:18:45,739 --> 00:18:48,619
debug heap and a lot of these little

589
00:18:47,059 --> 00:18:50,119
tricks that expert fuzzers kind of knew

590
00:18:48,619 --> 00:18:51,889
about but a lot of other people didn't

591
00:18:50,119 --> 00:18:54,230
know about they're all sort of already

592
00:18:51,889 --> 00:18:56,539
integrated into the fuzzing environment

593
00:18:54,230 --> 00:19:00,200
which is really cool nice you know

594
00:18:56,539 --> 00:19:02,600
web-based graphical reporting triaging

595
00:19:00,200 --> 00:19:05,720
is made easier I'm not gonna say it's

596
00:19:02,600 --> 00:19:06,949
simple it's you know still not perfect

597
00:19:05,720 --> 00:19:08,450
because you still have to do a lot of

598
00:19:06,950 --> 00:19:10,669
the you know if you want to do any

599
00:19:08,450 --> 00:19:12,049
triaging of crashes or you know that a

600
00:19:10,669 --> 00:19:13,519
lot of it's made simplify because it's

601
00:19:12,049 --> 00:19:15,049
bucketed and it's great and you've got

602
00:19:13,519 --> 00:19:16,279
the reproduction you've got the input

603
00:19:15,049 --> 00:19:18,109
that caused the crash all this kind of

604
00:19:16,279 --> 00:19:20,299
stuff really cool stuff you'll see but

605
00:19:18,109 --> 00:19:24,259
you still have to do some there is still

606
00:19:20,299 --> 00:19:26,090
some expert analysis required so yeah

607
00:19:24,259 --> 00:19:27,590
and what's cool about it is it finds

608
00:19:26,090 --> 00:19:33,918
security bugs and heavily tested app so

609
00:19:27,590 --> 00:19:36,049
you take a nap ok well known you know

610
00:19:33,919 --> 00:19:38,299
PDF Reader or something like that or

611
00:19:36,049 --> 00:19:40,190
whatever and you throw you know throw

612
00:19:38,299 --> 00:19:41,960
this at it and it'll probably find bugs

613
00:19:40,190 --> 00:19:43,399
if it if it hasn't been used against it

614
00:19:41,960 --> 00:19:45,230
before so basically in our mind you know

615
00:19:43,399 --> 00:19:47,149
for what we're seeing is basically an OD

616
00:19:45,230 --> 00:19:49,279
machine that's kind of the bottom line

617
00:19:47,149 --> 00:19:51,590
on that you can find bugs and stuff that

618
00:19:49,279 --> 00:19:52,970
has probably been somewhat well tested

619
00:19:51,590 --> 00:19:54,470
already you could probably find new bugs

620
00:19:52,970 --> 00:19:57,830
and that is pretty cool that's very

621
00:19:54,470 --> 00:20:00,259
interesting to us so here's a picture of

622
00:19:57,830 --> 00:20:01,399
the web scanning portion of MS RD we're

623
00:20:00,259 --> 00:20:01,760
not really going to talk about that in

624
00:20:01,399 --> 00:20:03,260
this

625
00:20:01,760 --> 00:20:05,629
because this talk is more focused on the

626
00:20:03,260 --> 00:20:07,010
native and you know that side of things

627
00:20:05,630 --> 00:20:09,170
the memory corruption and that sort of

628
00:20:07,010 --> 00:20:11,030
thing but if you want to play more with

629
00:20:09,170 --> 00:20:12,470
the web scanning tool that's included in

630
00:20:11,030 --> 00:20:14,090
this are definitely encourage you to

631
00:20:12,470 --> 00:20:15,530
play more about that we could talk to

632
00:20:14,090 --> 00:20:17,209
you more about that kind of offline if

633
00:20:15,530 --> 00:20:18,740
you want to hear more about that maybe

634
00:20:17,210 --> 00:20:20,420
in the future they'll even you know

635
00:20:18,740 --> 00:20:22,310
maybe decide to include like a mobile

636
00:20:20,420 --> 00:20:24,500
app scan or more more things yet that

637
00:20:22,310 --> 00:20:25,850
would be you know kind of further arrows

638
00:20:24,500 --> 00:20:27,050
in the quiver so to speak but right now

639
00:20:25,850 --> 00:20:29,419
it's basically just the native code

640
00:20:27,050 --> 00:20:31,310
fuzzer and a web scan web security

641
00:20:29,420 --> 00:20:33,230
scanning tool so that's cool so this is

642
00:20:31,310 --> 00:20:34,730
what the platform looks like and there

643
00:20:33,230 --> 00:20:36,260
are actual O'Day's by the way in this

644
00:20:34,730 --> 00:20:38,630
talk that are going to be disclosed like

645
00:20:36,260 --> 00:20:40,160
some of the application names you're

646
00:20:38,630 --> 00:20:41,450
seeing on there these are actual

647
00:20:40,160 --> 00:20:43,130
application names that we're finding

648
00:20:41,450 --> 00:20:44,390
vulnerabilities and pretty easily like

649
00:20:43,130 --> 00:20:46,760
it's not taking us a lot of effort to

650
00:20:44,390 --> 00:20:48,560
find a real and serious vulnerabilities

651
00:20:46,760 --> 00:20:50,090
in some of these application which is

652
00:20:48,560 --> 00:20:52,700
kind of cool so we're having a lot of

653
00:20:50,090 --> 00:20:54,500
fun blowing up apps one of the ones that

654
00:20:52,700 --> 00:20:56,360
I was just mentioning is interesting

655
00:20:54,500 --> 00:21:00,680
because you would think it's a Microsoft

656
00:20:56,360 --> 00:21:02,300
tool you can only fuzz Windows actually

657
00:21:00,680 --> 00:21:06,080
not true we're doing a lot of fuzzing

658
00:21:02,300 --> 00:21:08,210
for Windows apps in you know on a

659
00:21:06,080 --> 00:21:10,220
Windows sort of a VM basically as part

660
00:21:08,210 --> 00:21:12,140
of the fuzzing but you can also start

661
00:21:10,220 --> 00:21:13,580
linux fuzzing runs as well which is

662
00:21:12,140 --> 00:21:16,430
really cool so we've been doing that so

663
00:21:13,580 --> 00:21:17,780
there's a debian utility called ISO info

664
00:21:16,430 --> 00:21:19,220
it's just kind of like a command-line

665
00:21:17,780 --> 00:21:20,899
utility I think of it as just kind of

666
00:21:19,220 --> 00:21:22,850
like another LS right it's just a UNIX

667
00:21:20,900 --> 00:21:24,710
command like what's the chance that you

668
00:21:22,850 --> 00:21:27,139
take the latest version of some random

669
00:21:24,710 --> 00:21:28,520
UNIX command throw it in here and find a

670
00:21:27,140 --> 00:21:30,290
vulnerability seems unlikely right like

671
00:21:28,520 --> 00:21:33,889
these are well tested code that's been

672
00:21:30,290 --> 00:21:36,500
around forever you're not gonna find a

673
00:21:33,890 --> 00:21:38,000
vulnerability or actually yes you will

674
00:21:36,500 --> 00:21:40,400
like I think it was the tickets like

675
00:21:38,000 --> 00:21:42,380
what 20 minutes or something to to

676
00:21:40,400 --> 00:21:44,690
shakeout exploitable stack buffer

677
00:21:42,380 --> 00:21:46,280
overflows in this and it's really funny

678
00:21:44,690 --> 00:21:49,780
kind of interesting this is this is a

679
00:21:46,280 --> 00:21:53,120
screenshot of this actual O'Day so sorry

680
00:21:49,780 --> 00:21:54,710
is this this this is a portion of guitro

681
00:21:53,120 --> 00:21:55,879
where you can see that the highlighted

682
00:21:54,710 --> 00:21:57,590
function is the function that has the

683
00:21:55,880 --> 00:21:59,060
vulnerabilities in it if you're

684
00:21:57,590 --> 00:22:00,409
interested in you know it's you don't

685
00:21:59,060 --> 00:22:01,820
actually actually have to reverse this

686
00:22:00,410 --> 00:22:03,530
code because it's open-source code right

687
00:22:01,820 --> 00:22:05,240
it's Linux code so you can go and get

688
00:22:03,530 --> 00:22:07,970
the source code and look at it but the

689
00:22:05,240 --> 00:22:10,400
only reason you might need to reverse

690
00:22:07,970 --> 00:22:12,050
engineer it is because it crashes in a

691
00:22:10,400 --> 00:22:14,690
really weird place that's not directly

692
00:22:12,050 --> 00:22:15,649
the back-trace is all messed up so you

693
00:22:14,690 --> 00:22:17,060
I have to figure out looks like it's

694
00:22:15,650 --> 00:22:18,170
crashing at this bite so I need to

695
00:22:17,060 --> 00:22:19,639
actually figure out like in a

696
00:22:18,170 --> 00:22:20,990
disassembly where it's crashing so I can

697
00:22:19,640 --> 00:22:22,280
make sense of in the source code where

698
00:22:20,990 --> 00:22:25,340
it's actually where the vulnerability

699
00:22:22,280 --> 00:22:27,020
really is so anyway just um you know

700
00:22:25,340 --> 00:22:28,429
what kind of as we're talking throw us

701
00:22:27,020 --> 00:22:29,720
Amodei just sort of here and there kind

702
00:22:28,430 --> 00:22:32,510
of toss them out a little left and right

703
00:22:29,720 --> 00:22:34,970
why not so how does how does MS RD

704
00:22:32,510 --> 00:22:36,140
actually work basically is one of the

705
00:22:34,970 --> 00:22:37,310
things the thing that we really want to

706
00:22:36,140 --> 00:22:40,430
get across the point that we're trying

707
00:22:37,310 --> 00:22:42,460
to make here so either manually or from

708
00:22:40,430 --> 00:22:45,350
a DevOps standpoint upload your binary

709
00:22:42,460 --> 00:22:47,300
set up the the fuzzy and run by you know

710
00:22:45,350 --> 00:22:49,070
basically there's a GUI wizard you

711
00:22:47,300 --> 00:22:52,419
answer some questions about what kind of

712
00:22:49,070 --> 00:22:55,520
input it takes the one one downer about

713
00:22:52,420 --> 00:22:58,760
feedback buzzers right now is that ALR

714
00:22:55,520 --> 00:23:00,980
and MS RD they basically depend on the

715
00:22:58,760 --> 00:23:03,050
generic format of your application being

716
00:23:00,980 --> 00:23:04,970
application file input or it's maybe

717
00:23:03,050 --> 00:23:06,980
some parameters in a file input they're

718
00:23:04,970 --> 00:23:08,630
natively not so great with like network

719
00:23:06,980 --> 00:23:09,980
apps or IOT or

720
00:23:08,630 --> 00:23:11,660
WebSockets or they don't do any of that

721
00:23:09,980 --> 00:23:13,610
by default you can actually make these

722
00:23:11,660 --> 00:23:15,050
type of fuzzer to do that but it takes

723
00:23:13,610 --> 00:23:16,610
some professional services you basically

724
00:23:15,050 --> 00:23:17,870
have to write harnesses and things like

725
00:23:16,610 --> 00:23:20,449
that you need to do some extra work

726
00:23:17,870 --> 00:23:23,479
around that to integrate those the

727
00:23:20,450 --> 00:23:24,770
feedback from from those processes so

728
00:23:23,480 --> 00:23:26,660
that's part of what we need so we're the

729
00:23:24,770 --> 00:23:27,800
fuzzing experts on this and we've been

730
00:23:26,660 --> 00:23:29,780
playing with this and it's been a lot of

731
00:23:27,800 --> 00:23:32,510
fun so you can get multiple fuzzing jobs

732
00:23:29,780 --> 00:23:34,910
running fix rinse and repeat so anyway

733
00:23:32,510 --> 00:23:36,140
that's all my background and what I'm

734
00:23:34,910 --> 00:23:37,220
gonna do is turn it over to John and

735
00:23:36,140 --> 00:23:39,260
he's actually going to give a demo

736
00:23:37,220 --> 00:23:40,910
walkthrough of how to set up a fuzz run

737
00:23:39,260 --> 00:23:44,300
and talk through more the findings and

738
00:23:40,910 --> 00:23:44,720
things that we found hey guys how we

739
00:23:44,300 --> 00:23:48,020
doing

740
00:23:44,720 --> 00:23:50,180
I'm jealous dual video absent senior

741
00:23:48,020 --> 00:23:51,920
security engineer so I'm gonna walk you

742
00:23:50,180 --> 00:23:56,740
through what a demo of MSR D looks like

743
00:23:51,920 --> 00:23:56,740
taking seeds and funding a crash

744
00:24:04,400 --> 00:24:08,090
so here gonna start with the demo here

745
00:24:05,840 --> 00:24:09,919
um we created this demo so on this other

746
00:24:08,090 --> 00:24:12,530
documentation out there on Microsoft's

747
00:24:09,920 --> 00:24:14,870
website but we decided to a nice little

748
00:24:12,530 --> 00:24:16,670
demo here um so we're basically gonna

749
00:24:14,870 --> 00:24:18,169
start a job and this is just remoting to

750
00:24:16,670 --> 00:24:20,420
abeam like we're just going to provision

751
00:24:18,170 --> 00:24:23,330
it real quick um there's more options as

752
00:24:20,420 --> 00:24:26,150
well but we're just using 2008 as just

753
00:24:23,330 --> 00:24:28,429
in this demo so after I create the job

754
00:24:26,150 --> 00:24:30,050
here what happens is gonna provision it

755
00:24:28,430 --> 00:24:31,550
will take some time especially with

756
00:24:30,050 --> 00:24:33,350
Windows um it could be a good hour to

757
00:24:31,550 --> 00:24:35,030
setup once that's done you can just

758
00:24:33,350 --> 00:24:37,040
remote into the VM and you can stall any

759
00:24:35,030 --> 00:24:38,740
application you want put your seats on

760
00:24:37,040 --> 00:24:50,030
there and start a job

761
00:24:38,740 --> 00:24:53,110
yeah let's skip real quick maybe I won't

762
00:24:50,030 --> 00:24:53,110
pause its gonna die on me

763
00:25:00,210 --> 00:25:06,040
okay so we're gonna remote to the VM

764
00:25:02,200 --> 00:25:08,590
here so here all it is just it's a

765
00:25:06,040 --> 00:25:10,210
14-day setup we have 14 days to clear

766
00:25:08,590 --> 00:25:12,250
fuzzing and that's after submission so

767
00:25:10,210 --> 00:25:15,100
that's really important um roughly we

768
00:25:12,250 --> 00:25:16,930
get about 3 million fuzzing mutations in

769
00:25:15,100 --> 00:25:18,610
those 14 days and that's on a good job

770
00:25:16,930 --> 00:25:20,200
so and that's still like usually be able

771
00:25:18,610 --> 00:25:22,330
to five second iteration and they'll do

772
00:25:20,200 --> 00:25:23,830
parallel jobs between the fuzzing so for

773
00:25:22,330 --> 00:25:26,679
example like if your executable can be

774
00:25:23,830 --> 00:25:28,510
renamed they'll fuzz it simultaneously

775
00:25:26,680 --> 00:25:29,800
together like it will be a really fast

776
00:25:28,510 --> 00:25:31,360
fuss if you can do that like for a

777
00:25:29,800 --> 00:25:33,310
browser where you can't rename Firefox

778
00:25:31,360 --> 00:25:33,699
or like Chrome it doesn't let you do

779
00:25:33,310 --> 00:25:35,110
that

780
00:25:33,700 --> 00:25:37,300
you can't do that so like you're slowed

781
00:25:35,110 --> 00:25:38,889
down to probably a few hundred thousand

782
00:25:37,300 --> 00:25:41,020
so a few hundred thousand compared to

783
00:25:38,890 --> 00:25:42,730
three million it's pretty good so here

784
00:25:41,020 --> 00:25:44,680
I'm just dropped the application on here

785
00:25:42,730 --> 00:25:47,020
I have X interview which is an example

786
00:25:44,680 --> 00:25:48,370
here all it is is just test file which

787
00:25:47,020 --> 00:25:52,870
will do the seats I have this season

788
00:25:48,370 --> 00:25:54,250
there I'm doing a web P file so I'm just

789
00:25:52,870 --> 00:25:57,040
attaching that so then we have these new

790
00:25:54,250 --> 00:25:58,420
options here basically seats can

791
00:25:57,040 --> 00:26:00,460
reference other seeds or reference other

792
00:25:58,420 --> 00:26:02,170
files in the web this will lose internet

793
00:26:00,460 --> 00:26:03,640
connection once it does start fuzzing so

794
00:26:02,170 --> 00:26:05,230
it will not like you can't have a call

795
00:26:03,640 --> 00:26:07,240
to HTML it's kind of a bummer but

796
00:26:05,230 --> 00:26:08,860
they're working on that so basically

797
00:26:07,240 --> 00:26:10,180
we'll force to close and then we'll

798
00:26:08,860 --> 00:26:12,699
validate our job and this is really

799
00:26:10,180 --> 00:26:14,230
important here as well so if it doesn't

800
00:26:12,700 --> 00:26:16,450
validate you and you give it a bad input

801
00:26:14,230 --> 00:26:19,300
or a bad crash it won't let you continue

802
00:26:16,450 --> 00:26:20,710
so you have to give it good data there's

803
00:26:19,300 --> 00:26:22,690
a few ways you can trick it to get the

804
00:26:20,710 --> 00:26:23,770
to take bad data but you can't have a

805
00:26:22,690 --> 00:26:25,300
crash you could have first chance

806
00:26:23,770 --> 00:26:26,680
exceptions but no second chance

807
00:26:25,300 --> 00:26:30,850
exceptions and that's really important

808
00:26:26,680 --> 00:26:32,590
so here just going to validate um it was

809
00:26:30,850 --> 00:26:34,330
just a five second job so it will take

810
00:26:32,590 --> 00:26:36,399
some time so application verifier is

811
00:26:34,330 --> 00:26:37,389
rain with this in the background um and

812
00:26:36,400 --> 00:26:38,800
that's what it allows us to find the

813
00:26:37,390 --> 00:26:40,570
first chance exceptions and this is

814
00:26:38,800 --> 00:26:43,000
where we get our good results from so

815
00:26:40,570 --> 00:26:44,830
here I'm done submit the job and then

816
00:26:43,000 --> 00:26:46,210
we're gonna go and provision it so then

817
00:26:44,830 --> 00:26:50,370
it will take some time to validate that

818
00:26:46,210 --> 00:26:50,370
and we should see that here in this demo

819
00:26:50,580 --> 00:26:55,060
so once we hit the validate and submit

820
00:26:53,050 --> 00:26:56,440
there the VM dies it was internet and

821
00:26:55,060 --> 00:26:57,970
will start start fuzzing they have their

822
00:26:56,440 --> 00:27:00,190
internal communications where you can

823
00:26:57,970 --> 00:27:04,510
didn't see the reporting so here I'm

824
00:27:00,190 --> 00:27:09,310
showing it's validating and then the

825
00:27:04,510 --> 00:27:11,110
results so here I ran a job similar to

826
00:27:09,310 --> 00:27:14,149
this um through X and view through some

827
00:27:11,110 --> 00:27:16,669
FP X and basically I found 100

828
00:27:14,150 --> 00:27:18,740
308 results and these are all crashes

829
00:27:16,670 --> 00:27:20,480
divided by zeros right read access

830
00:27:18,740 --> 00:27:22,160
violations you name it null null

831
00:27:20,480 --> 00:27:23,840
difference pointers I mean look at the

832
00:27:22,160 --> 00:27:25,430
results I mean it's just crazy what you

833
00:27:23,840 --> 00:27:27,590
get off of it and that's just one job

834
00:27:25,430 --> 00:27:30,770
you mean we've run thousands of crashes

835
00:27:27,590 --> 00:27:32,240
lots of every day's so anyway here I'm

836
00:27:30,770 --> 00:27:36,800
showing you a call stack example here I

837
00:27:32,240 --> 00:27:38,120
mean you saw the corrupted stack so so

838
00:27:36,800 --> 00:27:39,800
they helped us log in here on there as

839
00:27:38,120 --> 00:27:42,560
well and it takes the windbg output it

840
00:27:39,800 --> 00:27:44,629
dumps it it's useful it can be sometimes

841
00:27:42,560 --> 00:27:46,220
it gives you weird results as well so

842
00:27:44,630 --> 00:27:48,350
I'm showing you a first chance exception

843
00:27:46,220 --> 00:27:49,370
here on the stack trace and then I'm

844
00:27:48,350 --> 00:27:50,629
gonna go down and show you a second

845
00:27:49,370 --> 00:27:54,550
chance exception and then I'm going to

846
00:27:50,630 --> 00:27:54,550
show you a dirty call stack here

847
00:27:56,050 --> 00:28:02,750
probably on another crash I'm gonna show

848
00:27:58,040 --> 00:28:04,310
you yeah and this actually did turn out

849
00:28:02,750 --> 00:28:05,570
to be an actual O'Day here I created an

850
00:28:04,310 --> 00:28:07,340
exploit for this one on one of these

851
00:28:05,570 --> 00:28:08,929
crashes I mean there's something they

852
00:28:07,340 --> 00:28:11,540
choose from right there so we got a heap

853
00:28:08,930 --> 00:28:13,330
you know C 0 C 0 C 0 so we were

854
00:28:11,540 --> 00:28:15,470
integrating heap there on an address so

855
00:28:13,330 --> 00:28:16,820
and that's just one example I mean

856
00:28:15,470 --> 00:28:18,290
there's so there's so many and that's

857
00:28:16,820 --> 00:28:20,689
just one application I mean we've we've

858
00:28:18,290 --> 00:28:22,730
done tons of applications I've done many

859
00:28:20,690 --> 00:28:23,780
and I'll show you what I've done there's

860
00:28:22,730 --> 00:28:27,050
some big names out there we've

861
00:28:23,780 --> 00:28:27,800
definitely targeted so here in this demo

862
00:28:27,050 --> 00:28:29,210
as well I'm going to show you how to

863
00:28:27,800 --> 00:28:31,190
download and test so you can get the

864
00:28:29,210 --> 00:28:33,620
results they store ten at a time

865
00:28:31,190 --> 00:28:35,510
there's no way to increase that so if

866
00:28:33,620 --> 00:28:37,280
you have ten similar crashes that Lane

867
00:28:35,510 --> 00:28:38,780
and the similar call stack they'll save

868
00:28:37,280 --> 00:28:41,090
those ten for you and then that's maxed

869
00:28:38,780 --> 00:28:42,320
out so you could download all ten one

870
00:28:41,090 --> 00:28:44,300
font at one time in a zip file

871
00:28:42,320 --> 00:28:46,399
that's what machine right here so then

872
00:28:44,300 --> 00:28:48,110
once you get the seeds right away that

873
00:28:46,400 --> 00:28:49,250
calls the crash and then sometimes I'll

874
00:28:48,110 --> 00:28:50,810
compare them like we were doing the

875
00:28:49,250 --> 00:28:53,540
compare with edge or insulate that all

876
00:28:50,810 --> 00:28:55,040
comparing with 0 1 0 so it's pretty

877
00:28:53,540 --> 00:28:55,430
pretty easy so you just pull the poem

878
00:28:55,040 --> 00:28:57,200
over

879
00:28:55,430 --> 00:28:59,210
I have windbg up I'm gonna show you what

880
00:28:57,200 --> 00:29:04,760
a crash looks like so I mean it's it's

881
00:28:59,210 --> 00:29:06,620
it's so simple introduced so you're just

882
00:29:04,760 --> 00:29:09,050
going to target the application we've

883
00:29:06,620 --> 00:29:10,850
all seen this so and then I'm you know

884
00:29:09,050 --> 00:29:11,510
debug for child processes and then we're

885
00:29:10,850 --> 00:29:13,540
going to go ahead and run the

886
00:29:11,510 --> 00:29:13,540
application

887
00:29:22,910 --> 00:29:28,440
and there's our first access valuation

888
00:29:25,670 --> 00:29:33,120
0-5 at their second chance so we pull

889
00:29:28,440 --> 00:29:35,030
down a crash just as an example and

890
00:29:33,120 --> 00:29:37,560
that's it that's it for the demo there

891
00:29:35,030 --> 00:29:38,910
so our results now so what have we been

892
00:29:37,560 --> 00:29:42,330
doing why I've been doing this you know

893
00:29:38,910 --> 00:29:44,460
what are we targeting here so some of

894
00:29:42,330 --> 00:29:49,290
our sample applications Foxit PDF Reader

895
00:29:44,460 --> 00:29:50,820
WinZip WinRAR Chrome OpenOffice Lipper

896
00:29:49,290 --> 00:29:53,370
office so we had a really cool office

897
00:29:50,820 --> 00:29:55,020
plug in zero day as well at WPS I firm

898
00:29:53,370 --> 00:29:57,780
view and I'm gonna release one of these

899
00:29:55,020 --> 00:30:00,030
here as a node a later than this demo

900
00:29:57,780 --> 00:30:01,470
here so anyway do a lot spores is why we

901
00:30:00,030 --> 00:30:03,240
do tons more so that's just some

902
00:30:01,470 --> 00:30:06,630
examples on here the screen was a big

903
00:30:03,240 --> 00:30:08,010
enough to fit them all so so types of

904
00:30:06,630 --> 00:30:10,140
crashes we're gonna find so this is

905
00:30:08,010 --> 00:30:11,490
really important um basically what you

906
00:30:10,140 --> 00:30:12,840
think we're just gonna see a read and

907
00:30:11,490 --> 00:30:14,610
write access evaluation there's more

908
00:30:12,840 --> 00:30:16,020
than that they are not they're adding

909
00:30:14,610 --> 00:30:17,790
more and more all the time it's really

910
00:30:16,020 --> 00:30:18,720
great so we'll see no differences heap

911
00:30:17,790 --> 00:30:20,370
stack corruptions

912
00:30:18,720 --> 00:30:22,560
we sold the Linux example that Jarrod

913
00:30:20,370 --> 00:30:23,909
said we saw actually a stack based

914
00:30:22,560 --> 00:30:25,379
overflow right there on the spot you

915
00:30:23,910 --> 00:30:27,150
know that was really cool it shows you

916
00:30:25,380 --> 00:30:29,490
that it's really great we see a lot of

917
00:30:27,150 --> 00:30:31,110
divide by zeros so a lot of these aren't

918
00:30:29,490 --> 00:30:33,180
exploitable I mean but a lot are though

919
00:30:31,110 --> 00:30:34,830
right so it depends what your kind of

920
00:30:33,180 --> 00:30:36,600
focus is gonna be on using the

921
00:30:34,830 --> 00:30:37,649
application or MS RD right what you're

922
00:30:36,600 --> 00:30:39,689
targeting what are you trying to get out

923
00:30:37,650 --> 00:30:41,280
of it and I'll talk about seeds as well

924
00:30:39,690 --> 00:30:43,110
and how important is and what type of

925
00:30:41,280 --> 00:30:45,870
input you're gonna send to it so here's

926
00:30:43,110 --> 00:30:48,449
an example result so Foxit updated to

927
00:30:45,870 --> 00:30:49,800
update 95 and it broke my um my zero day

928
00:30:48,450 --> 00:30:51,690
so I was like okay well we need another

929
00:30:49,800 --> 00:30:53,700
one so we threw it up there put some

930
00:30:51,690 --> 00:30:54,660
more seeds in there and I mean I

931
00:30:53,700 --> 00:30:56,370
couldn't even put them all on the screen

932
00:30:54,660 --> 00:30:57,870
to show you guys so all these were all

933
00:30:56,370 --> 00:30:59,729
redacted violations we got rights as

934
00:30:57,870 --> 00:31:01,290
well so it was really good stuff and

935
00:30:59,730 --> 00:31:02,370
mostly their exploitable as well I

936
00:31:01,290 --> 00:31:05,700
wanted to show only one of the show the

937
00:31:02,370 --> 00:31:07,679
exploded ones here so so we also support

938
00:31:05,700 --> 00:31:10,440
was it exposing as well obviously we did

939
00:31:07,680 --> 00:31:12,420
the ISO info as well that was a fun 15

940
00:31:10,440 --> 00:31:14,670
minutes set up it was really good so

941
00:31:12,420 --> 00:31:16,470
it's based on Red Hat Linux um all they

942
00:31:14,670 --> 00:31:19,890
do is lie to SSH into it you download

943
00:31:16,470 --> 00:31:21,630
your programs GUI support as well it's

944
00:31:19,890 --> 00:31:22,770
not too hard to use and basically they

945
00:31:21,630 --> 00:31:24,360
have a free trial right now that anybody

946
00:31:22,770 --> 00:31:26,100
can use so you want to go out there and

947
00:31:24,360 --> 00:31:28,889
start linux fuzzing and try it

948
00:31:26,100 --> 00:31:30,300
we had result in 25 minutes I put 25

949
00:31:28,890 --> 00:31:30,780
because I couldn't I didn't was able to

950
00:31:30,300 --> 00:31:31,980
count

951
00:31:30,780 --> 00:31:33,149
it was less than that I was like 15

952
00:31:31,980 --> 00:31:34,800
minutes once the job started running

953
00:31:33,150 --> 00:31:35,880
aiya so info was busted

954
00:31:34,800 --> 00:31:39,350
you know we checked it stack buffer

955
00:31:35,880 --> 00:31:41,580
overflow we could it's exploitable so

956
00:31:39,350 --> 00:31:43,500
here I'm gonna show you example trial

957
00:31:41,580 --> 00:31:45,750
crash so I like to bring this up here

958
00:31:43,500 --> 00:31:47,250
it's it's really easy to get the results

959
00:31:45,750 --> 00:31:49,080
and bring them down and I tried to

960
00:31:47,250 --> 00:31:50,550
highlight that in the demo I like to

961
00:31:49,080 --> 00:31:51,689
highlight it again here so basically

962
00:31:50,550 --> 00:31:53,070
it's a cloud in her face

963
00:31:51,690 --> 00:31:55,050
you have Aaron access you go up to the

964
00:31:53,070 --> 00:31:57,300
cloud after you started your fuzzing job

965
00:31:55,050 --> 00:31:58,710
you can run 14 days you can stop it you

966
00:31:57,300 --> 00:32:00,300
can run for a day if you want to you can

967
00:31:58,710 --> 00:32:01,800
switch it in a change out whatever you

968
00:32:00,300 --> 00:32:04,260
want it's based on how many jobs you

969
00:32:01,800 --> 00:32:05,700
have with MS RD so it's based on the

970
00:32:04,260 --> 00:32:07,530
seat that you use as well so if it input

971
00:32:05,700 --> 00:32:09,480
seat isn't getting crashes you stop the

972
00:32:07,530 --> 00:32:11,010
job change the seat seat input and you

973
00:32:09,480 --> 00:32:12,480
start again and then you try to get more

974
00:32:11,010 --> 00:32:14,640
crash it's it's all based on how

975
00:32:12,480 --> 00:32:16,200
creative you can be with it right so

976
00:32:14,640 --> 00:32:18,420
it's really easy to download the files

977
00:32:16,200 --> 00:32:20,670
the results we sell the zip file of ten

978
00:32:18,420 --> 00:32:21,840
it can be you can download many many

979
00:32:20,670 --> 00:32:24,090
different kinds of crashes different

980
00:32:21,840 --> 00:32:24,419
call stacks come out so and it's not too

981
00:32:24,090 --> 00:32:26,340
bad

982
00:32:24,420 --> 00:32:28,650
um after the point of the crash is where

983
00:32:26,340 --> 00:32:30,600
I go in and I create the exploit the

984
00:32:28,650 --> 00:32:31,920
zero day however you want to call it but

985
00:32:30,600 --> 00:32:36,090
on that's still a manual process there's

986
00:32:31,920 --> 00:32:37,860
no way to fully automate that today so

987
00:32:36,090 --> 00:32:40,770
here's our stats so far that I've pulled

988
00:32:37,860 --> 00:32:42,659
over so I started fuzzing with this tool

989
00:32:40,770 --> 00:32:43,800
in February January maybe maybe maybe

990
00:32:42,660 --> 00:32:46,620
less than that

991
00:32:43,800 --> 00:32:49,020
so over 50 applications tested so I went

992
00:32:46,620 --> 00:32:51,300
I went through 15 to 20 percent or

993
00:32:49,020 --> 00:32:53,610
exploitable so 25 25 percent are

994
00:32:51,300 --> 00:32:55,290
probably exploitable um it all depends

995
00:32:53,610 --> 00:32:58,409
on time and the 10 to 15 we're just come

996
00:32:55,290 --> 00:33:00,210
up as unknown so it could be just weird

997
00:32:58,410 --> 00:33:02,130
crash to that happen it give me the C++

998
00:33:00,210 --> 00:33:04,890
crashes and then we have 250 though this

999
00:33:02,130 --> 00:33:06,450
55 that 60% also unknown as well so and

1000
00:33:04,890 --> 00:33:08,250
this was done with hash Bank exploitable

1001
00:33:06,450 --> 00:33:09,420
just to do a demo we see a lot of people

1002
00:33:08,250 --> 00:33:12,690
do that I figure it'd be kind of cool to

1003
00:33:09,420 --> 00:33:19,470
throw it in there so why not so thousand

1004
00:33:12,690 --> 00:33:22,680
solid bugs at least 100 O'Day so far so

1005
00:33:19,470 --> 00:33:25,920
here is my so I'm gonna release an 0 day

1006
00:33:22,680 --> 00:33:27,690
for eyghon view so and all we're gonna

1007
00:33:25,920 --> 00:33:29,460
do is just pop calculator but it's a

1008
00:33:27,690 --> 00:33:31,830
good demo so we're here mystically call

1009
00:33:29,460 --> 00:33:34,050
I have already had my PVC ready to go so

1010
00:33:31,830 --> 00:33:35,370
this is just a real live crash very

1011
00:33:34,050 --> 00:33:37,560
similar to X in view it's a very popular

1012
00:33:35,370 --> 00:33:40,469
application so a 32-bit one here 64-bit

1013
00:33:37,560 --> 00:33:42,600
was also as well so and we're go for the

1014
00:33:40,470 --> 00:33:44,160
pups calculator so pretty cool so we're

1015
00:33:42,600 --> 00:33:51,149
going to leave some work on them get

1016
00:33:44,160 --> 00:33:54,090
as well so thanks you guys appreciate

1017
00:33:51,150 --> 00:33:55,590
that so we released some of our working

1018
00:33:54,090 --> 00:33:56,970
github as well I like to get back to the

1019
00:33:55,590 --> 00:33:58,439
community I think it's really important

1020
00:33:56,970 --> 00:34:00,030
I'll share what we've learned you know

1021
00:33:58,440 --> 00:34:01,770
and help other people foes as well I

1022
00:34:00,030 --> 00:34:04,530
know when I started it wasn't as easy to

1023
00:34:01,770 --> 00:34:05,730
get into and understand seeds so we're

1024
00:34:04,530 --> 00:34:06,720
always here to help as well so that's

1025
00:34:05,730 --> 00:34:09,090
the biggest thing and I wait to

1026
00:34:06,720 --> 00:34:11,340
highlight that it is complex it can be

1027
00:34:09,090 --> 00:34:12,960
anybody can you know download it and

1028
00:34:11,340 --> 00:34:14,429
start the applications you know pull up

1029
00:34:12,960 --> 00:34:16,230
Emma Sardi start fuzzing but to get

1030
00:34:14,429 --> 00:34:18,389
something really useful it will take

1031
00:34:16,230 --> 00:34:19,590
time and practice so and especially in

1032
00:34:18,389 --> 00:34:20,819
the see discovery and creation that's

1033
00:34:19,590 --> 00:34:23,130
one of the hardest parts that I come

1034
00:34:20,820 --> 00:34:24,720
across you know what file formats to use

1035
00:34:23,130 --> 00:34:26,669
you know how to create the file formats

1036
00:34:24,719 --> 00:34:27,839
how complex do we have to make it do we

1037
00:34:26,668 --> 00:34:29,909
need to breathe the protocol and with

1038
00:34:27,840 --> 00:34:31,830
the specification like for ISO or WinRAR

1039
00:34:29,909 --> 00:34:33,870
you know like how deep do we really have

1040
00:34:31,830 --> 00:34:35,460
to go to get viable crashes so and

1041
00:34:33,870 --> 00:34:38,040
that's that's always really difficult to

1042
00:34:35,460 --> 00:34:41,040
kind of get to so the feedback is always

1043
00:34:38,040 --> 00:34:44,279
good right good tools work consuming

1044
00:34:41,040 --> 00:34:46,050
applications so one thing that I have

1045
00:34:44,280 --> 00:34:48,300
noticed over some certain applications

1046
00:34:46,050 --> 00:34:50,160
MS RD is not always plug-and-play so

1047
00:34:48,300 --> 00:34:51,540
custom harnesses have to be built for

1048
00:34:50,159 --> 00:34:52,889
certain API it's like we did a custom

1049
00:34:51,540 --> 00:34:56,250
harness for a deal and I'll show that

1050
00:34:52,889 --> 00:34:57,390
here later you may have to be creative

1051
00:34:56,250 --> 00:34:59,070
and think out of the box with certain

1052
00:34:57,390 --> 00:35:00,720
things certain applications like it's

1053
00:34:59,070 --> 00:35:02,820
not like you can't just if you're trying

1054
00:35:00,720 --> 00:35:04,169
to thaw the GUI for example and you have

1055
00:35:02,820 --> 00:35:06,600
to be able to reach that code path to

1056
00:35:04,170 --> 00:35:08,520
get viable crashes so if you can't just

1057
00:35:06,600 --> 00:35:09,660
get on the command line point to it it's

1058
00:35:08,520 --> 00:35:10,650
like okay I'm gonna get a crash it

1059
00:35:09,660 --> 00:35:12,870
doesn't it doesn't always work that way

1060
00:35:10,650 --> 00:35:14,580
if it doesn't work we go back we've

1061
00:35:12,870 --> 00:35:15,630
figure it out and we'll get we'll try to

1062
00:35:14,580 --> 00:35:16,950
get to that code path where you want

1063
00:35:15,630 --> 00:35:19,320
that's going to get us a good crash that

1064
00:35:16,950 --> 00:35:20,279
can be exploitable so we also do

1065
00:35:19,320 --> 00:35:21,870
software fixes with vendors and

1066
00:35:20,280 --> 00:35:23,850
obviously I do with the exploit creation

1067
00:35:21,870 --> 00:35:25,890
as well so it's really important yeah

1068
00:35:23,850 --> 00:35:27,930
responsible disclosure or however you

1069
00:35:25,890 --> 00:35:30,060
want to word it but we try to do it the

1070
00:35:27,930 --> 00:35:31,109
best we can as well we definitely talk

1071
00:35:30,060 --> 00:35:32,400
with vendors we work with the

1072
00:35:31,110 --> 00:35:34,470
development teams we release the bugs

1073
00:35:32,400 --> 00:35:35,790
we'll know what we found there's been

1074
00:35:34,470 --> 00:35:37,500
times where they have no idea what we're

1075
00:35:35,790 --> 00:35:38,610
talking about but we keep working with

1076
00:35:37,500 --> 00:35:42,240
them in that I think that's a good

1077
00:35:38,610 --> 00:35:48,990
important thing to highlight as well so

1078
00:35:42,240 --> 00:35:50,220
we are the MS RD partner so so I'm gonna

1079
00:35:48,990 --> 00:35:52,259
highlight seats here as well

1080
00:35:50,220 --> 00:35:53,700
so good seeds get the best code coverage

1081
00:35:52,260 --> 00:35:55,650
and that's really important as well so

1082
00:35:53,700 --> 00:35:57,919
like I've gone on where I've downloaded

1083
00:35:55,650 --> 00:35:59,780
seized from PDFs off the internet Google

1084
00:35:57,920 --> 00:36:03,560
I pulled him in from Russian websites

1085
00:35:59,780 --> 00:36:05,390
you name it I've done it so it's really

1086
00:36:03,560 --> 00:36:07,430
important to have a good seed to have

1087
00:36:05,390 --> 00:36:09,650
good code coverage you know a PDF that

1088
00:36:07,430 --> 00:36:11,180
just does one thing or has one image you

1089
00:36:09,650 --> 00:36:13,250
know it's not as good as a PDF that has

1090
00:36:11,180 --> 00:36:15,560
30 images that pulls on different

1091
00:36:13,250 --> 00:36:18,470
formats different object files so it's

1092
00:36:15,560 --> 00:36:20,360
really important so good seats find more

1093
00:36:18,470 --> 00:36:22,730
crashes which is true so I've learned up

1094
00:36:20,360 --> 00:36:24,830
the hard way so I fuzzing harness so

1095
00:36:22,730 --> 00:36:27,980
this is really important I like this so

1096
00:36:24,830 --> 00:36:30,230
basically you take inputs so for example

1097
00:36:27,980 --> 00:36:31,550
you have an application that only talks

1098
00:36:30,230 --> 00:36:33,950
on the command line like through an echo

1099
00:36:31,550 --> 00:36:36,260
or stin or basically it can't take a

1100
00:36:33,950 --> 00:36:38,540
file input you use your harness to send

1101
00:36:36,260 --> 00:36:40,250
that to the stand right so you'll

1102
00:36:38,540 --> 00:36:42,080
basically write a wrapper you'll wrap

1103
00:36:40,250 --> 00:36:44,090
around it and take that file because MS

1104
00:36:42,080 --> 00:36:45,799
RD is only file file based input right

1105
00:36:44,090 --> 00:36:47,570
you have to use files and they mutate

1106
00:36:45,800 --> 00:36:48,680
those files in that siege directory so

1107
00:36:47,570 --> 00:36:50,270
you have to be creative and tape those

1108
00:36:48,680 --> 00:36:52,250
seeds and send it to your application

1109
00:36:50,270 --> 00:36:53,840
that way but the hardest part that was

1110
00:36:52,250 --> 00:36:54,920
getting the trash is back like we can

1111
00:36:53,840 --> 00:36:57,020
create a Perl script right now that

1112
00:36:54,920 --> 00:36:58,100
would just send input pipe it over

1113
00:36:57,020 --> 00:36:59,810
however you want to do it doesn't matter

1114
00:36:58,100 --> 00:37:01,460
hundred ways you can do it but getting

1115
00:36:59,810 --> 00:37:03,380
the crashes back is hard so you have to

1116
00:37:01,460 --> 00:37:04,730
include api's in your deed and your

1117
00:37:03,380 --> 00:37:06,110
harness as well to be able to pull those

1118
00:37:04,730 --> 00:37:06,800
crashes back it has to interface with

1119
00:37:06,110 --> 00:37:08,300
windbg

1120
00:37:06,800 --> 00:37:09,770
and that's the hardest thing that it's

1121
00:37:08,300 --> 00:37:11,060
not really documented because we're like

1122
00:37:09,770 --> 00:37:12,620
and like we're on the unknown on the

1123
00:37:11,060 --> 00:37:14,450
black area where connor is learning on

1124
00:37:12,620 --> 00:37:16,220
her own because microsoft is like yeah

1125
00:37:14,450 --> 00:37:18,770
figure it out it's cool go for it

1126
00:37:16,220 --> 00:37:21,560
so harnesses have been known to find old

1127
00:37:18,770 --> 00:37:23,150
bugs so they had an Adobe Adobe back

1128
00:37:21,560 --> 00:37:24,980
then and they fused a harness and they

1129
00:37:23,150 --> 00:37:26,570
found a really old code path that was a

1130
00:37:24,980 --> 00:37:27,710
really really old one so I hope that was

1131
00:37:26,570 --> 00:37:29,060
really interesting and we kind of base

1132
00:37:27,710 --> 00:37:31,520
our work on that come on you know

1133
00:37:29,060 --> 00:37:33,740
mythology this the idea so I like that

1134
00:37:31,520 --> 00:37:35,540
so here's an example of a custom fuzzing

1135
00:37:33,740 --> 00:37:37,459
harness we created Michael McBride

1136
00:37:35,540 --> 00:37:39,590
actually worked on this one here so this

1137
00:37:37,460 --> 00:37:41,270
is go script to him so base we're

1138
00:37:39,590 --> 00:37:42,770
passing data to the DL using seat files

1139
00:37:41,270 --> 00:37:45,880
that's all we're doing so we created a

1140
00:37:42,770 --> 00:37:48,230
basically available DL and then

1141
00:37:45,880 --> 00:37:49,880
basically put it in the MS RD and it

1142
00:37:48,230 --> 00:37:51,650
found the crash so the call stack was

1143
00:37:49,880 --> 00:37:53,390
kind of weird actually but it does work

1144
00:37:51,650 --> 00:37:54,710
so this is one example I've done a whole

1145
00:37:53,390 --> 00:37:57,680
bunch of ones like where I'm doing like

1146
00:37:54,710 --> 00:37:59,210
ping or I'm doing Perl wrappers just

1147
00:37:57,680 --> 00:38:01,190
using the API to grab the crashes back

1148
00:37:59,210 --> 00:38:03,770
but you could use whatever language you

1149
00:38:01,190 --> 00:38:05,300
want as long as it can be exe use any

1150
00:38:03,770 --> 00:38:07,340
kind of wrapper so it works so

1151
00:38:05,300 --> 00:38:09,320
client-server setups GUI applications

1152
00:38:07,340 --> 00:38:10,400
API testing was one of my favorites and

1153
00:38:09,320 --> 00:38:11,360
then honestly just a wrapper for

1154
00:38:10,400 --> 00:38:14,540
whatever you want you can

1155
00:38:11,360 --> 00:38:17,150
yoky GUI I use like what Auto it where I

1156
00:38:14,540 --> 00:38:18,980
send the GUI up to a certain point in

1157
00:38:17,150 --> 00:38:20,720
the GUI application and then I just have

1158
00:38:18,980 --> 00:38:22,160
MS RD fuzz that kind of seed but getting

1159
00:38:20,720 --> 00:38:23,629
crashes back is the hardest part though

1160
00:38:22,160 --> 00:38:27,560
you can automate anything just getting

1161
00:38:23,630 --> 00:38:28,940
data getting results back so exploit

1162
00:38:27,560 --> 00:38:30,380
development this is my favorite part so

1163
00:38:28,940 --> 00:38:32,090
I love building exploits is what I do

1164
00:38:30,380 --> 00:38:33,890
I'll take the crashes I'll build any

1165
00:38:32,090 --> 00:38:35,900
kind of exploit if I can right but not

1166
00:38:33,890 --> 00:38:38,930
all the more exploitable so we work with

1167
00:38:35,900 --> 00:38:40,670
vendors and it's really important to be

1168
00:38:38,930 --> 00:38:42,680
responsible with what you do and how you

1169
00:38:40,670 --> 00:38:44,150
build your exploits right so sometimes

1170
00:38:42,680 --> 00:38:46,370
you have to build exploit though to

1171
00:38:44,150 --> 00:38:48,320
prove the crash is viable right it's

1172
00:38:46,370 --> 00:38:50,180
like okay just a crash who cares right

1173
00:38:48,320 --> 00:38:52,610
well if I can exploit that program I can

1174
00:38:50,180 --> 00:38:53,899
get rude or I can get you know system

1175
00:38:52,610 --> 00:38:55,490
doesn't really matter right it's

1176
00:38:53,900 --> 00:38:57,320
important it is and some vendors need

1177
00:38:55,490 --> 00:38:59,779
that some vendors need that push right

1178
00:38:57,320 --> 00:39:02,360
so help expedite the fix which is

1179
00:38:59,780 --> 00:39:04,460
important so here I just shown you guys

1180
00:39:02,360 --> 00:39:06,500
you know a IP overflow you know four

1181
00:39:04,460 --> 00:39:08,720
days for one for one for one for one you

1182
00:39:06,500 --> 00:39:12,290
know it's cool so but yeah exploit

1183
00:39:08,720 --> 00:39:14,149
development so it's very I like so code

1184
00:39:12,290 --> 00:39:15,410
patches this is really good so we're

1185
00:39:14,150 --> 00:39:17,180
with vendors to have them paschal code

1186
00:39:15,410 --> 00:39:18,890
directly so sometimes it's difficult

1187
00:39:17,180 --> 00:39:20,540
sometimes it's dreamless right create a

1188
00:39:18,890 --> 00:39:22,460
CVE you know put on reserve wait till

1189
00:39:20,540 --> 00:39:24,110
the vendor reaches out back to you

1190
00:39:22,460 --> 00:39:26,960
okay it's good okay we released our work

1191
00:39:24,110 --> 00:39:28,310
then so but sometimes they don't

1192
00:39:26,960 --> 00:39:29,390
understand they can't do it so we'll

1193
00:39:28,310 --> 00:39:31,130
build the patches tonight or guitro

1194
00:39:29,390 --> 00:39:32,480
right fixing the voluble code for them

1195
00:39:31,130 --> 00:39:33,830
you know Jared went over there and

1196
00:39:32,480 --> 00:39:35,290
showed you the I said info we could have

1197
00:39:33,830 --> 00:39:37,400
patched that right there on the spot so

1198
00:39:35,290 --> 00:39:39,200
wasn't too bad and sometimes it's

1199
00:39:37,400 --> 00:39:40,670
necessary you know but sometimes the

1200
00:39:39,200 --> 00:39:42,350
application is so weak or so unknown

1201
00:39:40,670 --> 00:39:44,600
it's just I mean is it really worth it

1202
00:39:42,350 --> 00:39:47,240
so that's the kind of question so here

1203
00:39:44,600 --> 00:39:49,490
we took his on screenshot of IDA last

1204
00:39:47,240 --> 00:39:50,569
night and he showed we're showing part

1205
00:39:49,490 --> 00:39:52,640
of the volatile code and then I was

1206
00:39:50,570 --> 00:39:54,200
showing it like how to patch it so just

1207
00:39:52,640 --> 00:39:57,230
a good example here denna find the crash

1208
00:39:54,200 --> 00:39:59,870
applying patches to test applications so

1209
00:39:57,230 --> 00:40:01,520
and VJs gonna get back so we're gonna

1210
00:39:59,870 --> 00:40:03,470
put some of our exploits and crashes on

1211
00:40:01,520 --> 00:40:05,420
github so we're gonna release our work

1212
00:40:03,470 --> 00:40:06,740
and we're gonna help the community so I

1213
00:40:05,420 --> 00:40:09,230
think that's important that's one thing

1214
00:40:06,740 --> 00:40:10,910
I wait to live in scribe boy so yep and

1215
00:40:09,230 --> 00:40:11,930
that's our github github add-on video

1216
00:40:10,910 --> 00:40:15,170
laughs Dessler

1217
00:40:11,930 --> 00:40:17,710
yeah video - laughs so pretty cool so

1218
00:40:15,170 --> 00:40:17,710
questions

1219
00:40:22,960 --> 00:40:27,050
great job John this John's first year we

1220
00:40:25,430 --> 00:40:30,080
can talk so please give him a round of

1221
00:40:27,050 --> 00:40:32,420
applause yeah thanks dub nice job man

1222
00:40:30,080 --> 00:40:33,440
good work good yeah it's awesome yeah no

1223
00:40:32,420 --> 00:40:36,410
you do it that's fine

1224
00:40:33,440 --> 00:40:38,620
so yeah who's got questions for us yeah

1225
00:40:36,410 --> 00:40:38,620
go ahead

1226
00:40:43,270 --> 00:40:50,330
so bang exploitable is dead right for my

1227
00:40:46,010 --> 00:40:53,120
understanding no but so someone online

1228
00:40:50,330 --> 00:40:55,009
um has a very good recompiled version of

1229
00:40:53,120 --> 00:40:57,319
it I was able to find that I was able to

1230
00:40:55,010 --> 00:40:58,580
download it and use it so but if you go

1231
00:40:57,320 --> 00:41:00,280
to the Microsoft website and try to

1232
00:40:58,580 --> 00:41:02,240
download it it's not there anymore so

1233
00:41:00,280 --> 00:41:03,800
unfortunately but it's still a good tool

1234
00:41:02,240 --> 00:41:05,750
I like to like to use it it's great to

1235
00:41:03,800 --> 00:41:07,160
show it in slides right so I mean it

1236
00:41:05,750 --> 00:41:09,770
doesn't really tell you a lot I mean

1237
00:41:07,160 --> 00:41:16,910
hence using the - M option sure but

1238
00:41:09,770 --> 00:41:18,200
other than that I mean yeah so yes yes

1239
00:41:16,910 --> 00:41:19,640
you have to download the Seas from MS RD

1240
00:41:18,200 --> 00:41:22,520
break him down and then you have to

1241
00:41:19,640 --> 00:41:23,810
point to the seeds yeah one cool thing

1242
00:41:22,520 --> 00:41:25,520
though they do a pretty good job of

1243
00:41:23,810 --> 00:41:26,750
bucketing the crashes when you look

1244
00:41:25,520 --> 00:41:28,190
through the GUI they'll tell you like it

1245
00:41:26,750 --> 00:41:29,660
looks severe it's a stack overflow I

1246
00:41:28,190 --> 00:41:31,070
mean they do some of that bucketing for

1247
00:41:29,660 --> 00:41:33,259
you and yeah it's his point bein

1248
00:41:31,070 --> 00:41:34,790
exploitable was always sort of you know

1249
00:41:33,260 --> 00:41:36,080
kind of a roll the dice on how accurate

1250
00:41:34,790 --> 00:41:37,550
it really was because a lot of times you

1251
00:41:36,080 --> 00:41:39,230
might crash over here and it looks like

1252
00:41:37,550 --> 00:41:40,730
only this but if you just tweak a few

1253
00:41:39,230 --> 00:41:42,740
things all of a sudden now it's more

1254
00:41:40,730 --> 00:41:44,330
interesting so but though it is good we

1255
00:41:42,740 --> 00:41:47,410
did it Sims from rough bucketing - with

1256
00:41:44,330 --> 00:41:47,410
it and stuff so yeah question

1257
00:42:05,310 --> 00:42:09,029
yeah it's a good question I'll take a

1258
00:42:07,290 --> 00:42:10,440
first stab and then I'll let you fill in

1259
00:42:09,030 --> 00:42:15,510
whatever whatever you want to say but

1260
00:42:10,440 --> 00:42:18,360
first question is related to no I just

1261
00:42:15,510 --> 00:42:20,940
lost it code coverage right yes yeah I

1262
00:42:18,360 --> 00:42:23,040
got distracted asking code coverage so

1263
00:42:20,940 --> 00:42:25,020
the constraint solver is basically what

1264
00:42:23,040 --> 00:42:26,580
does the code coverage and MS RD write

1265
00:42:25,020 --> 00:42:28,530
so there's a constraint solving process

1266
00:42:26,580 --> 00:42:30,720
where it's like okay we got to here by

1267
00:42:28,530 --> 00:42:32,970
either you know looking at the basic

1268
00:42:30,720 --> 00:42:34,980
blocks or whatever and now we need to

1269
00:42:32,970 --> 00:42:38,040
try to go down these different paths so

1270
00:42:34,980 --> 00:42:40,590
the in the cage of saige MS RD it uses a

1271
00:42:38,040 --> 00:42:41,940
constraint solver and you I show that

1272
00:42:40,590 --> 00:42:45,780
one picture is showing that the four

1273
00:42:41,940 --> 00:42:48,150
different major pieces of tools that it

1274
00:42:45,780 --> 00:42:49,080
uses to accomplish that there's a number

1275
00:42:48,150 --> 00:42:51,300
of different tools that work in

1276
00:42:49,080 --> 00:42:54,000
conjunction to basically create the new

1277
00:42:51,300 --> 00:42:56,460
inputs and then the second question was

1278
00:42:54,000 --> 00:42:58,440
related to how does it identify whether

1279
00:42:56,460 --> 00:43:00,390
it was a stack smash or heap smash or

1280
00:42:58,440 --> 00:43:01,650
that kind of stuff that's a good

1281
00:43:00,390 --> 00:43:03,240
question I don't know if I know all of

1282
00:43:01,650 --> 00:43:04,950
those but a lot of times the the

1283
00:43:03,240 --> 00:43:07,680
debugger can report a lot of that anyway

1284
00:43:04,950 --> 00:43:09,330
it's gonna report through some like if

1285
00:43:07,680 --> 00:43:10,440
there's a like for example some of the

1286
00:43:09,330 --> 00:43:12,090
ones we're looking at the Linux side

1287
00:43:10,440 --> 00:43:13,020
there's like a fortify stack check so

1288
00:43:12,090 --> 00:43:14,700
some of that's getting bubbled up

1289
00:43:13,020 --> 00:43:16,320
through an abort there's a signal that's

1290
00:43:14,700 --> 00:43:17,580
being thrown anyway so basically you get

1291
00:43:16,320 --> 00:43:18,840
that information and they're just kind

1292
00:43:17,580 --> 00:43:20,790
of bubbling that up to the gooey and

1293
00:43:18,840 --> 00:43:22,200
same thing on the window side based on

1294
00:43:20,790 --> 00:43:23,580
the type of crash they see they're able

1295
00:43:22,200 --> 00:43:26,700
to kind of expose that and bubble that

1296
00:43:23,580 --> 00:43:28,259
up so I don't you want to add to that so

1297
00:43:26,700 --> 00:43:29,580
basically all used to be was just write

1298
00:43:28,260 --> 00:43:31,590
read access violations they were just

1299
00:43:29,580 --> 00:43:32,640
labeled all the same both sides right so

1300
00:43:31,590 --> 00:43:33,540
now they've kind of changed it what

1301
00:43:32,640 --> 00:43:34,740
they're telling us more information

1302
00:43:33,540 --> 00:43:36,690
about their crashes they're trying to

1303
00:43:34,740 --> 00:43:37,709
make it easier for you guys right so for

1304
00:43:36,690 --> 00:43:39,030
instead of us like where we have to

1305
00:43:37,710 --> 00:43:40,950
download the C's that's like okay what

1306
00:43:39,030 --> 00:43:42,000
truly is this bug you know but now

1307
00:43:40,950 --> 00:43:43,589
they're trying to they're trying to help

1308
00:43:42,000 --> 00:43:45,540
you label it so they're not always right

1309
00:43:43,590 --> 00:43:46,650
through nots but most time they're

1310
00:43:45,540 --> 00:43:54,890
trying to get to that point

1311
00:43:46,650 --> 00:43:54,890
so okay any other questions yes

1312
00:44:03,460 --> 00:44:08,510
so they have a lot of enterprise do you

1313
00:44:07,010 --> 00:44:10,339
know named colonic clients that work

1314
00:44:08,510 --> 00:44:13,900
with this tool as well so there's also

1315
00:44:10,339 --> 00:44:13,900
that Asha DevOps as well they work with

1316
00:44:13,960 --> 00:44:19,520
I'm sorry what's that oh so he's asking

1317
00:44:18,080 --> 00:44:21,140
about confidentiality for clients as

1318
00:44:19,520 --> 00:44:24,530
well so that's really important right so

1319
00:44:21,140 --> 00:44:25,819
Microsoft has three-letter code names

1320
00:44:24,530 --> 00:44:27,290
you know or three go to companies that

1321
00:44:25,820 --> 00:44:29,300
we can't really talk about right what

1322
00:44:27,290 --> 00:44:30,800
kind of the confidentiality um all

1323
00:44:29,300 --> 00:44:32,480
internet connections connection to the

1324
00:44:30,800 --> 00:44:34,070
fuzzing once results come or or turned

1325
00:44:32,480 --> 00:44:35,480
off to that VM so you can change

1326
00:44:34,070 --> 00:44:36,500
passwords they and they recommend and

1327
00:44:35,480 --> 00:44:38,119
they'll help you through everything as

1328
00:44:36,500 --> 00:44:39,410
well with that confidentiality there's a

1329
00:44:38,119 --> 00:44:40,910
lot you can do that we don't do

1330
00:44:39,410 --> 00:44:41,868
obviously we don't really I mean it's

1331
00:44:40,910 --> 00:44:43,190
not really that important to us about

1332
00:44:41,869 --> 00:44:45,349
our results because we don't have any

1333
00:44:43,190 --> 00:44:46,910
clients that need that confidentiality

1334
00:44:45,349 --> 00:44:48,740
for testing we're just doing testing

1335
00:44:46,910 --> 00:44:50,569
purposes right now with the results

1336
00:44:48,740 --> 00:44:51,649
we've shown you so there's a lot more to

1337
00:44:50,570 --> 00:44:53,270
it than I don't even understand what

1338
00:44:51,650 --> 00:44:54,740
Microsoft can do with those those

1339
00:44:53,270 --> 00:44:57,859
clients if you give them a constraint

1340
00:44:54,740 --> 00:44:59,479
they'll probably fix it for you yeah so

1341
00:44:57,859 --> 00:45:00,740
to tack onto that too if you really like

1342
00:44:59,480 --> 00:45:02,240
if you're like man I'd really like an

1343
00:45:00,740 --> 00:45:04,009
on-prem version of this instead of

1344
00:45:02,240 --> 00:45:05,089
running in their cloud they might be

1345
00:45:04,010 --> 00:45:06,800
able to do that I don't know that would

1346
00:45:05,089 --> 00:45:07,910
be a David Molnar question at Microsoft

1347
00:45:06,800 --> 00:45:09,589
we could probably bubble that question

1348
00:45:07,910 --> 00:45:12,440
up to them if you want to reach out to

1349
00:45:09,589 --> 00:45:13,430
us info a PDA labs or JD MonaVie labs or

1350
00:45:12,440 --> 00:45:14,780
whatever we can probably help you get

1351
00:45:13,430 --> 00:45:17,779
that question answered that is a good

1352
00:45:14,780 --> 00:45:20,960
question any other questions about MS RD

1353
00:45:17,780 --> 00:45:23,290
and fuzzing alright thank you appreciate

1354
00:45:20,960 --> 00:45:23,290
it guys

