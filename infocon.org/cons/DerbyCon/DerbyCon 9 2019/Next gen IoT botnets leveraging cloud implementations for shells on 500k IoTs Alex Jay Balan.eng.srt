1
00:00:00,060 --> 00:00:07,079
hello everyone thank you for joining me

2
00:00:02,760 --> 00:00:10,379
today my name is Alex Balan akj I work

3
00:00:07,080 --> 00:00:13,440
for BitDefender and today we're going to

4
00:00:10,380 --> 00:00:15,480
talk about bad cloud implementations in

5
00:00:13,440 --> 00:00:17,820
IOT and essentially how to leverage

6
00:00:15,480 --> 00:00:20,820
those bad clown implementations to do

7
00:00:17,820 --> 00:00:24,180
all kinds of crazy stuff with a lot of

8
00:00:20,820 --> 00:00:26,880
IOT s we've kind of been doing this for

9
00:00:24,180 --> 00:00:29,400
the past six years and we've been

10
00:00:26,880 --> 00:00:33,210
looking at cloud platforms for the past

11
00:00:29,400 --> 00:00:37,129
three maybe three-and-a-half and the

12
00:00:33,210 --> 00:00:42,120
situation except for maybe one or two

13
00:00:37,129 --> 00:00:43,949
companies is disastrous to say the least

14
00:00:42,120 --> 00:00:46,260
essentially which is why we came up with

15
00:00:43,950 --> 00:00:48,300
this we kind of cut this small clip

16
00:00:46,260 --> 00:00:52,620
about what happens when we send reports

17
00:00:48,300 --> 00:00:55,669
to vendors and essentially this is kind

18
00:00:52,620 --> 00:01:00,239
of what we imagine happens at vendor HQ

19
00:00:55,670 --> 00:01:05,220
you know the cloud nobody understands

20
00:01:00,239 --> 00:01:10,710
the cloud yeah basically that's kind of

21
00:01:05,220 --> 00:01:13,439
a DF so as we're going to see further on

22
00:01:10,710 --> 00:01:15,270
it's it's it's very close to reality

23
00:01:13,439 --> 00:01:19,798
it's very close to what's happening over

24
00:01:15,270 --> 00:01:21,750
there Advent or HQ so I'm gonna start

25
00:01:19,799 --> 00:01:23,759
with something that I really like to say

26
00:01:21,750 --> 00:01:26,700
before I get into any kind of IOT talks

27
00:01:23,759 --> 00:01:28,380
is defining IOT right and I see IITs

28
00:01:26,700 --> 00:01:31,229
hardware plus operating system plus AB

29
00:01:28,380 --> 00:01:35,610
plus cloud now what if I told you that

30
00:01:31,229 --> 00:01:38,039
an IOT is like a WordPress website who

31
00:01:35,610 --> 00:01:40,020
just a quick show of hands who can see

32
00:01:38,040 --> 00:01:43,549
the connection between an IOT and the

33
00:01:40,020 --> 00:01:46,679
WordPress website not bad not bad

34
00:01:43,549 --> 00:01:49,439
because essentially we have these stacks

35
00:01:46,680 --> 00:01:52,470
like you know if you remember we FTP D

36
00:01:49,439 --> 00:01:55,229
Red Hat 6.2 and hardware as a stack or

37
00:01:52,470 --> 00:01:58,380
Hardware plus Windows operating system

38
00:01:55,229 --> 00:02:01,890
is point 5.0 or hardware plus windows +

39
00:01:58,380 --> 00:02:06,000
r DP and so on and so forth in the IOT

40
00:02:01,890 --> 00:02:09,840
case we also have a mobile app and a

41
00:02:06,000 --> 00:02:13,850
cloud which essentially expands the

42
00:02:09,840 --> 00:02:15,850
attack surface by a lot

43
00:02:13,850 --> 00:02:18,680
now if you want to get into IT hacking

44
00:02:15,850 --> 00:02:20,299
so the nice guys antenna ball before me

45
00:02:18,680 --> 00:02:22,790
was kind enough to kind of get into what

46
00:02:20,300 --> 00:02:26,180
to look for when doing IT security

47
00:02:22,790 --> 00:02:28,910
research so telnet is still listening in

48
00:02:26,180 --> 00:02:30,320
2019 look for mobile app and device

49
00:02:28,910 --> 00:02:32,420
communication I'm not going to stay too

50
00:02:30,320 --> 00:02:34,609
much on this you can get the slides if

51
00:02:32,420 --> 00:02:36,649
you want a quick cheat sheet on what to

52
00:02:34,610 --> 00:02:39,170
look for when doing IT security research

53
00:02:36,650 --> 00:02:42,230
but look for command injection directory

54
00:02:39,170 --> 00:02:45,140
traversal and buffer overflows because

55
00:02:42,230 --> 00:02:48,859
in the IOT space our nephew is a SLR

56
00:02:45,140 --> 00:02:51,290
does not work just out of curiosity how

57
00:02:48,860 --> 00:02:55,640
many here knew that SLR does not work in

58
00:02:51,290 --> 00:02:58,549
IOT it's because quite a lot and it's

59
00:02:55,640 --> 00:03:00,679
because for a SLR to works binaries need

60
00:02:58,550 --> 00:03:02,630
to be compiled with a flag called pike

61
00:03:00,680 --> 00:03:05,210
position independent a securable

62
00:03:02,630 --> 00:03:08,290
which actually takes quite a bunch of

63
00:03:05,210 --> 00:03:11,600
CPU cycles to work and which is why

64
00:03:08,290 --> 00:03:13,519
literally all the IITs that we've we've

65
00:03:11,600 --> 00:03:17,299
looked at had binaries compiled without

66
00:03:13,520 --> 00:03:19,070
Pi which meant that we if we found any

67
00:03:17,300 --> 00:03:24,080
kind of buffer overflows we had

68
00:03:19,070 --> 00:03:28,430
predictable RC and yeah also worth

69
00:03:24,080 --> 00:03:31,040
mentioning a lot of the vendors use very

70
00:03:28,430 --> 00:03:34,070
a lot of shared code in their devices

71
00:03:31,040 --> 00:03:37,010
which means that we found a C and SDK

72
00:03:34,070 --> 00:03:38,840
that's implemented into one IOT all

73
00:03:37,010 --> 00:03:40,970
essentially and defined a vulnerability

74
00:03:38,840 --> 00:03:44,890
in that there is a good chance that is

75
00:03:40,970 --> 00:03:47,120
going to work on 20 more other vendors

76
00:03:44,890 --> 00:03:48,769
obviously this is common stuff we've

77
00:03:47,120 --> 00:03:51,290
seen it all over the place credential

78
00:03:48,770 --> 00:03:55,120
reuse private key reuse backdoors or as

79
00:03:51,290 --> 00:03:58,340
they call them service interfaces or

80
00:03:55,120 --> 00:04:00,500
support interfaces yeah that's right

81
00:03:58,340 --> 00:04:02,030
and look for cloud chatter how does the

82
00:04:00,500 --> 00:04:04,460
mobile app go to the cloud and so on and

83
00:04:02,030 --> 00:04:06,320
so forth now if you want to get a chance

84
00:04:04,460 --> 00:04:07,790
to have a look at the former and there

85
00:04:06,320 --> 00:04:12,079
is no way to get into it right off the

86
00:04:07,790 --> 00:04:14,209
bat look for serial interfaces and it's

87
00:04:12,080 --> 00:04:17,810
very easy to do both hijacks on most

88
00:04:14,210 --> 00:04:19,460
deities if you know how to do a password

89
00:04:17,810 --> 00:04:22,100
reset only notes by you know stopping

90
00:04:19,459 --> 00:04:25,099
grub and doing in it equals being a sage

91
00:04:22,100 --> 00:04:27,630
to be dropped into a shell it's pretty

92
00:04:25,100 --> 00:04:29,820
much the same thing with IITs

93
00:04:27,630 --> 00:04:32,730
you have you just stop the bootloader we

94
00:04:29,820 --> 00:04:35,310
are the serial interface and you pad you

95
00:04:32,730 --> 00:04:37,410
you pass all those flags to the

96
00:04:35,310 --> 00:04:39,780
bootloader and they're gonna drop you

97
00:04:37,410 --> 00:04:41,580
into a shell that you can use to change

98
00:04:39,780 --> 00:04:43,739
the password and then get access to the

99
00:04:41,580 --> 00:04:45,990
former so this is kind of basic stuff

100
00:04:43,740 --> 00:04:49,980
that you want to know if you want to get

101
00:04:45,990 --> 00:04:51,740
into you know hacking royalties now to

102
00:04:49,980 --> 00:04:55,740
the topic at hand

103
00:04:51,740 --> 00:04:58,100
traditionally botnets crawl traditional

104
00:04:55,740 --> 00:05:01,650
botnet because they're still happening

105
00:04:58,100 --> 00:05:03,840
work by iterating IP addresses trying to

106
00:05:01,650 --> 00:05:06,659
see if there's turn it enabled brute

107
00:05:03,840 --> 00:05:09,179
forcing a root password or if there's a

108
00:05:06,660 --> 00:05:10,980
web interface look for some command

109
00:05:09,180 --> 00:05:12,810
injection into the web interface so I'm

110
00:05:10,980 --> 00:05:16,580
pretty fine like 20 exploits that were

111
00:05:12,810 --> 00:05:19,580
trying and they go by IP and IP and IP

112
00:05:16,580 --> 00:05:23,340
this is going to stop working soon

113
00:05:19,580 --> 00:05:24,479
essentially because most IRT is in our

114
00:05:23,340 --> 00:05:27,739
days have a different implementation

115
00:05:24,480 --> 00:05:30,300
they use clout and they're like behind

116
00:05:27,740 --> 00:05:32,070
NAT there's no direct connection from

117
00:05:30,300 --> 00:05:34,620
the internet and cloud is being used for

118
00:05:32,070 --> 00:05:39,180
managing all the IDS from that vendor

119
00:05:34,620 --> 00:05:46,860
and the way that's implemented today in

120
00:05:39,180 --> 00:05:48,480
like 99% of the cases is this also yeah

121
00:05:46,860 --> 00:05:50,280
very important they have a modular

122
00:05:48,480 --> 00:05:52,260
architecture so when when vendors

123
00:05:50,280 --> 00:05:54,539
implement this cloud platform usually

124
00:05:52,260 --> 00:05:58,050
the way they do it is that they go to

125
00:05:54,540 --> 00:06:00,240
IOT cloud platform from company X and

126
00:05:58,050 --> 00:06:02,370
they say we want to use your cloud

127
00:06:00,240 --> 00:06:04,560
platform and company access sure pays

128
00:06:02,370 --> 00:06:06,330
money and the company paid is the money

129
00:06:04,560 --> 00:06:09,600
and they integrate that cloud platform

130
00:06:06,330 --> 00:06:11,700
into their IDs they get an agent that

131
00:06:09,600 --> 00:06:14,190
embed into the firmware and that agent

132
00:06:11,700 --> 00:06:16,560
talks to the cloud platform and I'm sure

133
00:06:14,190 --> 00:06:18,920
you know there's like dozens of cloud

134
00:06:16,560 --> 00:06:21,540
IOT cloud platforms being you know

135
00:06:18,920 --> 00:06:23,400
advertised everywhere security

136
00:06:21,540 --> 00:06:27,690
conferences IOT conferences and so on

137
00:06:23,400 --> 00:06:31,380
and so forth but mostly they have a very

138
00:06:27,690 --> 00:06:35,550
similar architecture most of them they

139
00:06:31,380 --> 00:06:40,050
use a 32-bit sometimes larger sometimes

140
00:06:35,550 --> 00:06:41,460
smaller device identifier to talk to to

141
00:06:40,050 --> 00:06:43,199
facilitate the communication

142
00:06:41,460 --> 00:06:45,750
between the application and the device

143
00:06:43,199 --> 00:06:49,229
essentially the app tells the cloud I

144
00:06:45,750 --> 00:06:53,460
want to talk to device ID and 32 bit

145
00:06:49,229 --> 00:06:56,008
string now that string is not easy to

146
00:06:53,460 --> 00:06:57,989
brute-force right it's quite long it's

147
00:06:56,009 --> 00:07:02,490
pretty unpredictable let's call it a

148
00:06:57,990 --> 00:07:04,650
let's call it safe so as I was saying

149
00:07:02,490 --> 00:07:07,770
all communication is done by using the

150
00:07:04,650 --> 00:07:10,710
device ID and most of them actually have

151
00:07:07,770 --> 00:07:13,530
a decent usage of encryption we've seen

152
00:07:10,710 --> 00:07:16,409
even unique keys per device and they

153
00:07:13,530 --> 00:07:18,780
have like a es 256 and on number of

154
00:07:16,410 --> 00:07:20,370
encryption mechanisms between the IOT

155
00:07:18,780 --> 00:07:22,169
and the cloud between the app and the

156
00:07:20,370 --> 00:07:27,000
cloud we've seen certificate pinning

157
00:07:22,169 --> 00:07:28,289
being used and props to that and as I

158
00:07:27,000 --> 00:07:31,860
was saying this is kind of a generic

159
00:07:28,289 --> 00:07:34,650
description but this kind of applies to

160
00:07:31,860 --> 00:07:36,900
roughly 90% of all we've analyzed

161
00:07:34,650 --> 00:07:39,210
actually it applies to 100% of all that

162
00:07:36,900 --> 00:07:41,400
we've analyzed in IIT we're just saying

163
00:07:39,210 --> 00:07:43,948
it's 90% because we didn't get a chance

164
00:07:41,400 --> 00:07:46,979
to locate everything right there's a lot

165
00:07:43,949 --> 00:07:49,789
of IITs so that's great

166
00:07:46,979 --> 00:07:55,258
for all intents and purposes I mean

167
00:07:49,789 --> 00:07:59,759
really secure but as we have come to

168
00:07:55,259 --> 00:08:02,370
realize upon a closer look not all cloud

169
00:07:59,759 --> 00:08:05,419
implementations are you know very well

170
00:08:02,370 --> 00:08:08,820
implemented and as we're going to see

171
00:08:05,419 --> 00:08:11,190
the cloud platform itself is pretty

172
00:08:08,820 --> 00:08:14,759
decently designed however the

173
00:08:11,190 --> 00:08:21,060
implementation by the vendor is not that

174
00:08:14,759 --> 00:08:24,169
distant so there's no authentication in

175
00:08:21,060 --> 00:08:26,909
this architecture all all that

176
00:08:24,169 --> 00:08:30,539
authentication is the key exchange on

177
00:08:26,909 --> 00:08:33,510
SSL or TLS sorry and and that device ID

178
00:08:30,539 --> 00:08:35,429
that's kind of the identifier the

179
00:08:33,510 --> 00:08:37,828
authentication that's being used for

180
00:08:35,429 --> 00:08:44,390
talking to a to tonality connected to

181
00:08:37,828 --> 00:08:47,040
that cloud and some vendors actually use

182
00:08:44,390 --> 00:08:49,110
additional implementations and unique

183
00:08:47,040 --> 00:08:52,920
symmetric keys however some other

184
00:08:49,110 --> 00:08:54,930
vendors add on top of that other

185
00:08:52,920 --> 00:08:55,920
implementations of their own like we've

186
00:08:54,930 --> 00:08:58,250
scene and we're going to see today

187
00:08:55,920 --> 00:09:01,260
something called a client ID for

188
00:08:58,250 --> 00:09:04,800
facilitating multiple device IDs per one

189
00:09:01,260 --> 00:09:07,970
client and just really don't get afraid

190
00:09:04,800 --> 00:09:12,959
we're going to get into practical

191
00:09:07,970 --> 00:09:14,730
hands-on analysis about this now a few

192
00:09:12,959 --> 00:09:17,719
words on s3 buckets I'm sure you're

193
00:09:14,730 --> 00:09:20,010
familiar with the way they work I wasn't

194
00:09:17,720 --> 00:09:21,120
but I've talked to some of our cloud

195
00:09:20,010 --> 00:09:24,480
guys and they're telling me that

196
00:09:21,120 --> 00:09:27,779
traditionally in s3 the way the way it

197
00:09:24,480 --> 00:09:31,500
kind of works is that a device creates a

198
00:09:27,779 --> 00:09:33,660
file stores it on s3 on a path and then

199
00:09:31,500 --> 00:09:37,050
relays that path to the mobile lab that

200
00:09:33,660 --> 00:09:38,939
needs to access that file so essentially

201
00:09:37,050 --> 00:09:40,770
the security measure here is that you do

202
00:09:38,940 --> 00:09:42,779
not know the path of the file or the

203
00:09:40,770 --> 00:09:44,550
file name that's being passed through

204
00:09:42,779 --> 00:09:48,110
the app and the app knows okay I can

205
00:09:44,550 --> 00:09:52,260
access that file in that path and

206
00:09:48,110 --> 00:09:55,140
ideally you cannot list the contents of

207
00:09:52,260 --> 00:10:01,350
an s3 bucket it just access that file

208
00:09:55,140 --> 00:10:03,660
cannot do lists in in a folder or as I

209
00:10:01,350 --> 00:10:06,920
was saying you shouldn't be able to do

210
00:10:03,660 --> 00:10:09,920
that but bad implementations means that

211
00:10:06,920 --> 00:10:13,020
we've seen an alarming number of vendors

212
00:10:09,920 --> 00:10:16,469
that not only enable you to do a list in

213
00:10:13,020 --> 00:10:19,079
your own bucket they enable you to do

214
00:10:16,470 --> 00:10:21,000
lists in all the buckets of all their

215
00:10:19,080 --> 00:10:23,850
customers and you can do it recursively

216
00:10:21,000 --> 00:10:27,750
and see all the things of all their

217
00:10:23,850 --> 00:10:30,810
customers and in unfortunately this is

218
00:10:27,750 --> 00:10:32,220
something I want to touch on this really

219
00:10:30,810 --> 00:10:34,650
quick this is something that is very

220
00:10:32,220 --> 00:10:36,959
difficult to talk about because from a

221
00:10:34,650 --> 00:10:39,150
legal standpoint you are not allowed to

222
00:10:36,959 --> 00:10:41,640
research that you are not allowed to go

223
00:10:39,150 --> 00:10:43,620
that up one level and see if you can go

224
00:10:41,640 --> 00:10:46,319
outside of your own bucket but there's

225
00:10:43,620 --> 00:10:49,770
no way to prove that you can go outside

226
00:10:46,320 --> 00:10:53,779
of your own bucket unless you try so a

227
00:10:49,770 --> 00:10:53,779
friend of mine tried

228
00:10:54,260 --> 00:11:05,040
and using a device from a very popular

229
00:11:00,230 --> 00:11:07,170
baby monitor company and supposedly that

230
00:11:05,040 --> 00:11:08,910
friend was able to see the recordings of

231
00:11:07,170 --> 00:11:11,849
all the baby monitors of all the

232
00:11:08,910 --> 00:11:14,189
customers of that company and he tried

233
00:11:11,850 --> 00:11:21,390
reaching out to them and they did not

234
00:11:14,190 --> 00:11:23,310
reply a few words and MQTT mkdd i was

235
00:11:21,390 --> 00:11:27,270
not familiar with ETD and up until a few

236
00:11:23,310 --> 00:11:29,969
months ago essentially amputee is a some

237
00:11:27,270 --> 00:11:33,090
sort of a server much like Tauron times

238
00:11:29,970 --> 00:11:35,370
untold which essentially says that the

239
00:11:33,090 --> 00:11:38,600
device registers to the servers to the

240
00:11:35,370 --> 00:11:41,610
server end and there's a tree structure

241
00:11:38,600 --> 00:11:44,040
that allows the device to say okay I can

242
00:11:41,610 --> 00:11:45,960
broadcast these topics that are called

243
00:11:44,040 --> 00:11:48,329
right and it's like slash vendor slash

244
00:11:45,960 --> 00:11:50,580
device ID and the slash topic where the

245
00:11:48,330 --> 00:11:53,040
topic is like I'm online I'm offline I'm

246
00:11:50,580 --> 00:11:55,350
doing this and doing that and then it

247
00:11:53,040 --> 00:11:57,990
tells that to the server and then the

248
00:11:55,350 --> 00:12:02,820
mobile app knows that it can register to

249
00:11:57,990 --> 00:12:05,580
those topics those specific topics so I

250
00:12:02,820 --> 00:12:07,320
really it's it's it's a very efficient

251
00:12:05,580 --> 00:12:08,340
way for the mobile app to stay in touch

252
00:12:07,320 --> 00:12:10,950
with the device and get like

253
00:12:08,340 --> 00:12:13,980
notifications get config see that if I

254
00:12:10,950 --> 00:12:15,990
stay this and all that stuff but another

255
00:12:13,980 --> 00:12:17,640
big flaw that we've seen in

256
00:12:15,990 --> 00:12:22,950
implementation much like with the s3

257
00:12:17,640 --> 00:12:26,730
bucket is that you could basically tap

258
00:12:22,950 --> 00:12:29,580
into the slash and then get

259
00:12:26,730 --> 00:12:32,930
notifications from all the device IDs

260
00:12:29,580 --> 00:12:36,810
and all the devices from that vendor and

261
00:12:32,930 --> 00:12:38,810
chaining these two together with another

262
00:12:36,810 --> 00:12:41,069
which are simulating the mobile app

263
00:12:38,810 --> 00:12:43,199
essentially can do a targeted attack and

264
00:12:41,070 --> 00:12:45,240
just see the video feeds of a specific

265
00:12:43,200 --> 00:12:50,160
user that you want to target and and

266
00:12:45,240 --> 00:12:53,040
it's as simple as hack Irene's baby

267
00:12:50,160 --> 00:12:57,060
monitor yeah again purely hypothetical

268
00:12:53,040 --> 00:13:00,300
ah you registered to slash on that

269
00:12:57,060 --> 00:13:02,400
vendor on mqtt you look for all the

270
00:13:00,300 --> 00:13:04,060
notifications you harvest all the device

271
00:13:02,400 --> 00:13:10,329
IDs that you see

272
00:13:04,060 --> 00:13:13,079
and then you emulate the mobile app to

273
00:13:10,330 --> 00:13:15,850
pull the config for that device ID and

274
00:13:13,080 --> 00:13:17,890
once you validate that that if I say D

275
00:13:15,850 --> 00:13:20,160
is correlated with the email address

276
00:13:17,890 --> 00:13:22,569
that you want to target you go to s3 and

277
00:13:20,160 --> 00:13:25,630
you look up that device ID for the

278
00:13:22,570 --> 00:13:28,000
recordings and I hope that this makes

279
00:13:25,630 --> 00:13:31,600
sense to you guys it it does make sense

280
00:13:28,000 --> 00:13:32,830
for my friend and unfortunately it does

281
00:13:31,600 --> 00:13:38,230
work and of course it's a purely

282
00:13:32,830 --> 00:13:41,860
hypothetical scenario anyway I just

283
00:13:38,230 --> 00:13:43,210
wanted to fit this in because it's kind

284
00:13:41,860 --> 00:13:45,400
of tricky to talk about it so I'm just

285
00:13:43,210 --> 00:13:46,840
putting two slides about it just because

286
00:13:45,400 --> 00:13:48,699
I think people need to know about this

287
00:13:46,840 --> 00:13:52,240
and if you're doing IT security research

288
00:13:48,700 --> 00:13:55,720
look into directory traversal in both h3

289
00:13:52,240 --> 00:13:57,190
and MQTT you're going to find a lot of

290
00:13:55,720 --> 00:14:04,300
companies that are vulnerable to this

291
00:13:57,190 --> 00:14:06,220
and yeah fun times another paper that we

292
00:14:04,300 --> 00:14:07,689
published was on the air Emacs smart

293
00:14:06,220 --> 00:14:09,270
power outlet there's no problem talking

294
00:14:07,690 --> 00:14:11,440
about this because it's already public

295
00:14:09,270 --> 00:14:14,500
essentially their device idea was not

296
00:14:11,440 --> 00:14:19,450
even a 32 string bit a 32 bit string it

297
00:14:14,500 --> 00:14:21,550
was the MAC address of the device and if

298
00:14:19,450 --> 00:14:23,790
you knew the MAC address you could like

299
00:14:21,550 --> 00:14:25,959
turn the power outlet on and off and

300
00:14:23,790 --> 00:14:28,209
that's kind of tricky because it's it's

301
00:14:25,960 --> 00:14:30,670
actually being heavily used in a lot of

302
00:14:28,210 --> 00:14:35,050
enterprises companies and I'm scared to

303
00:14:30,670 --> 00:14:38,410
say hospitals it's still vulnerable

304
00:14:35,050 --> 00:14:40,540
today they published a patch nobody

305
00:14:38,410 --> 00:14:45,850
applied it because the usability on

306
00:14:40,540 --> 00:14:47,709
their upgrade system is very faulty we

307
00:14:45,850 --> 00:14:49,600
try to apply it and we couldn't and we

308
00:14:47,710 --> 00:14:52,330
actually intended to apply the patch and

309
00:14:49,600 --> 00:14:53,680
we couldn't apply it and we know a few

310
00:14:52,330 --> 00:14:55,660
things about how computers work

311
00:14:53,680 --> 00:14:58,540
I mean supposedly we're supposed to be

312
00:14:55,660 --> 00:15:00,579
able to do it um and yeah you can

313
00:14:58,540 --> 00:15:04,449
essentially turn the power outlet on and

314
00:15:00,580 --> 00:15:07,780
off you can get actually a command

315
00:15:04,450 --> 00:15:09,430
injection on it relayed by the cloud and

316
00:15:07,780 --> 00:15:11,620
it get a connect back shell from it and

317
00:15:09,430 --> 00:15:13,569
if you're in in the same Wi-Fi is the

318
00:15:11,620 --> 00:15:14,770
power outlet you can actually sniff they

319
00:15:13,570 --> 00:15:17,680
don't use encryption they're using

320
00:15:14,770 --> 00:15:19,930
coding and we it took us like 5mm

321
00:15:17,680 --> 00:15:22,540
needs to decode that traffic and you get

322
00:15:19,930 --> 00:15:24,459
like their email credentials like the

323
00:15:22,540 --> 00:15:25,540
gmail account and password and so on and

324
00:15:24,460 --> 00:15:28,330
so forth because the power outlet

325
00:15:25,540 --> 00:15:31,180
doesn't have an SMTP server it's using

326
00:15:28,330 --> 00:15:34,029
the user's gmail account and password to

327
00:15:31,180 --> 00:15:38,370
send notification emails so again

328
00:15:34,029 --> 00:15:41,620
fun times and now to the topic at hand

329
00:15:38,370 --> 00:15:44,020
for our demo today we're going to use a

330
00:15:41,620 --> 00:15:46,330
popular security camera that we've kind

331
00:15:44,020 --> 00:15:48,069
of dissected a while back and it's

332
00:15:46,330 --> 00:15:50,160
called a guardzilla smart security

333
00:15:48,070 --> 00:15:55,830
camera and we have one over there on the

334
00:15:50,160 --> 00:15:57,699
audio-video pit table pointing at me so

335
00:15:55,830 --> 00:16:01,120
we took a look at the mobile app

336
00:15:57,700 --> 00:16:02,920
behavior and the first thing that we

337
00:16:01,120 --> 00:16:08,740
noticed is that after the authentication

338
00:16:02,920 --> 00:16:13,870
we were assigned a client ID six digit

339
00:16:08,740 --> 00:16:14,500
number can anybody see what's wrong with

340
00:16:13,870 --> 00:16:20,709
this picture

341
00:16:14,500 --> 00:16:22,120
oh yeah and I mean I can stop the talk

342
00:16:20,709 --> 00:16:23,890
right here but I'm actually going to

343
00:16:22,120 --> 00:16:26,339
show you what you can do with this

344
00:16:23,890 --> 00:16:29,830
client ID because it's more fun that way

345
00:16:26,339 --> 00:16:33,990
so it cannot be changed

346
00:16:29,830 --> 00:16:33,990
it's incremented by one for each account

347
00:16:34,560 --> 00:16:40,420
and it's all you need to pull stuff from

348
00:16:38,200 --> 00:16:48,190
the guardzilla cloud on the things

349
00:16:40,420 --> 00:16:49,630
associated with that client ID yeah it's

350
00:16:48,190 --> 00:16:50,830
worth mentioning that the post requests

351
00:16:49,630 --> 00:16:54,400
are actually sent to the cloud encrypted

352
00:16:50,830 --> 00:16:56,320
with AES 256 cbc mode but the encryption

353
00:16:54,400 --> 00:16:57,880
key and IV initialization vector are

354
00:16:56,320 --> 00:17:00,490
hard-coded in the app so you can pull

355
00:16:57,880 --> 00:17:02,980
those and you can use those to script

356
00:17:00,490 --> 00:17:11,500
the requests to the guardzilla cloud

357
00:17:02,980 --> 00:17:13,990
which is actually what we did yeah so

358
00:17:11,500 --> 00:17:15,459
this is how a post request of the

359
00:17:13,990 --> 00:17:19,750
guardzilla cloud with the client that it

360
00:17:15,459 --> 00:17:22,209
looks like you send the request you use

361
00:17:19,750 --> 00:17:24,429
the encryption key and the IV that you

362
00:17:22,209 --> 00:17:26,319
have from the app create a small Python

363
00:17:24,429 --> 00:17:27,970
script send the request of the

364
00:17:26,319 --> 00:17:31,059
guardzilla cloud tell me information

365
00:17:27,970 --> 00:17:33,629
about that user ID and it sends back

366
00:17:31,059 --> 00:17:36,789
and this is the most beautiful format

367
00:17:33,629 --> 00:17:41,080
device ID and password which is what

368
00:17:36,789 --> 00:17:43,240
we're interested in and once we have

369
00:17:41,080 --> 00:17:49,230
that device ID we can do magical stuff

370
00:17:43,240 --> 00:17:53,620
with it and just as the first demo I

371
00:17:49,230 --> 00:18:02,190
have here a shell opened and it still

372
00:17:53,620 --> 00:18:02,189
works on a machine someplace in I don't

373
00:18:11,639 --> 00:18:16,899
sorry

374
00:18:12,759 --> 00:18:18,429
without my name no I mean Canada so just

375
00:18:16,899 --> 00:18:20,830
to show that everything that I'm going

376
00:18:18,429 --> 00:18:23,110
to do is fully remote to a camera behind

377
00:18:20,830 --> 00:18:25,029
two firewalls here maybe three I don't

378
00:18:23,110 --> 00:18:26,529
know it's like my modern then the

379
00:18:25,029 --> 00:18:28,929
derbycon access point and then the

380
00:18:26,529 --> 00:18:29,820
Marriot access point should be secure

381
00:18:28,929 --> 00:18:32,710
enough right

382
00:18:29,820 --> 00:18:34,450
so I'm gonna go to be the research

383
00:18:32,710 --> 00:18:37,289
guardzilla and the first thing we're

384
00:18:34,450 --> 00:18:43,450
going to do is try to pull information

385
00:18:37,289 --> 00:18:49,240
about my user ID right so python get UID

386
00:18:43,450 --> 00:18:56,259
new this is mine 408 3 1 1 I'm just

387
00:18:49,240 --> 00:19:01,450
gonna beautify it a little bit and there

388
00:18:56,259 --> 00:19:04,360
we go we have this is bug boy that guy

389
00:19:01,450 --> 00:19:07,029
over there and this is the password so

390
00:19:04,360 --> 00:19:09,570
obviously if you want to do it for four

391
00:19:07,029 --> 00:19:12,460
ways 3 1 2 or if you want to do it for

392
00:19:09,570 --> 00:19:17,320
105 or if you want to do it for 500

393
00:19:12,460 --> 00:19:18,999
thousand 641 you can and you can pull

394
00:19:17,320 --> 00:19:28,529
the devices from all those customers

395
00:19:18,999 --> 00:19:31,179
from the vendor so cool that's m22 -

396
00:19:28,529 --> 00:19:33,220
yeah also worth mentioning that password

397
00:19:31,179 --> 00:19:35,559
that you saw is going to be needed when

398
00:19:33,220 --> 00:19:37,749
interacting with the device the user can

399
00:19:35,559 --> 00:19:40,149
change the password however it's gonna

400
00:19:37,749 --> 00:19:41,740
be kind of useless because once you pull

401
00:19:40,149 --> 00:19:43,268
the information for the cloud part of

402
00:19:41,740 --> 00:19:44,560
that information is the device ID and

403
00:19:43,269 --> 00:19:46,270
the password

404
00:19:44,560 --> 00:19:48,460
so if there is or changes the password

405
00:19:46,270 --> 00:19:50,950
to some thing the user like security

406
00:19:48,460 --> 00:19:53,260
conscience like you and I are like forty

407
00:19:50,950 --> 00:19:56,020
characters alphanumeric password

408
00:19:53,260 --> 00:19:57,640
very strong unfortunally is going to be

409
00:19:56,020 --> 00:19:59,889
useless because I'm going to be able to

410
00:19:57,640 --> 00:20:00,880
pull that information from the

411
00:19:59,890 --> 00:20:02,950
guardzilla cloud and the guardzilla

412
00:20:00,880 --> 00:20:08,680
cloud is going to tell me that device is

413
00:20:02,950 --> 00:20:10,330
password so yeah tough you can do an

414
00:20:08,680 --> 00:20:12,730
account takeover so there's an API on

415
00:20:10,330 --> 00:20:14,379
the owner on the guardzilla cloud that

416
00:20:12,730 --> 00:20:16,780
has several function one of them is

417
00:20:14,380 --> 00:20:21,160
change email address and change password

418
00:20:16,780 --> 00:20:24,220
there's no notification of that and you

419
00:20:21,160 --> 00:20:25,240
can't do a full camera takeover I don't

420
00:20:24,220 --> 00:20:27,520
know why you would want to do that

421
00:20:25,240 --> 00:20:29,080
because the person owning it is going to

422
00:20:27,520 --> 00:20:30,400
want is going to see that they're not

423
00:20:29,080 --> 00:20:32,530
going to have access to it there's gonna

424
00:20:30,400 --> 00:20:36,040
reset it to defaults but I just included

425
00:20:32,530 --> 00:20:39,250
it here because you can do it but more

426
00:20:36,040 --> 00:20:41,020
fun than that is that you can have

427
00:20:39,250 --> 00:20:43,540
access to the audio and video feed and

428
00:20:41,020 --> 00:20:47,170
for that purpose we've actually written

429
00:20:43,540 --> 00:20:49,180
a small client that connects to the

430
00:20:47,170 --> 00:20:51,310
camera and pipes the video feed to VLC

431
00:20:49,180 --> 00:20:55,120
it's a little or a lot

432
00:20:51,310 --> 00:21:01,480
buggy but I'm going to show you two

433
00:20:55,120 --> 00:21:03,939
anyway so I'm going to simulate trying

434
00:21:01,480 --> 00:21:08,470
to hack somebody's camera first of all

435
00:21:03,940 --> 00:21:11,260
I'm going to pull the information about

436
00:21:08,470 --> 00:21:17,700
the camera what I need is the device ID

437
00:21:11,260 --> 00:21:21,600
and the password right so I have those

438
00:21:17,700 --> 00:21:27,510
again I can do this for any client ID

439
00:21:21,600 --> 00:21:27,510
after that I use my little client here

440
00:21:34,250 --> 00:21:47,090
see what we'll see and there mi so no

441
00:21:45,020 --> 00:21:48,320
authentication required I mean some

442
00:21:47,090 --> 00:21:49,730
authentication required but you pulled

443
00:21:48,320 --> 00:21:51,260
the credentials from the goldzilla cloud

444
00:21:49,730 --> 00:21:53,690
so it's as simple as that

445
00:21:51,260 --> 00:21:55,180
and unfortunately you can do that with

446
00:21:53,690 --> 00:21:57,980
everybody

447
00:21:55,180 --> 00:22:04,570
am i moving again

448
00:21:57,980 --> 00:22:10,820
buggy sorry ok so this is the hard way

449
00:22:04,570 --> 00:22:13,000
but there's an easy way and the easy way

450
00:22:10,820 --> 00:22:14,950
is this ok take this out there's an API

451
00:22:13,000 --> 00:22:18,830
another API

452
00:22:14,950 --> 00:22:20,450
it's called send invite in which you're

453
00:22:18,830 --> 00:22:30,590
allowed to signify to somebody to see

454
00:22:20,450 --> 00:22:34,880
your camera and you use the user ID the

455
00:22:30,590 --> 00:22:38,810
device ID and I think it's fun to

456
00:22:34,880 --> 00:22:42,400
mention that there's no notification to

457
00:22:38,810 --> 00:22:44,179
the owner whatsoever so the owner has no

458
00:22:42,400 --> 00:22:46,940
indication that somebody has been

459
00:22:44,180 --> 00:22:49,490
invited to be their camera so for them

460
00:22:46,940 --> 00:22:59,720
or number 2 I'm going to use modern

461
00:22:49,490 --> 00:23:06,680
technology and my phone there we go open

462
00:22:59,720 --> 00:23:16,580
up the guardzilla app and go to manage

463
00:23:06,680 --> 00:23:18,620
cameras and essentially invite myself so

464
00:23:16,580 --> 00:23:21,620
again we wrote a small Python script

465
00:23:18,620 --> 00:23:23,780
that emulates the connection PD with the

466
00:23:21,620 --> 00:23:26,330
guardzilla cloud right so it's like

467
00:23:23,780 --> 00:23:27,860
invite for client ID photo which we

468
00:23:26,330 --> 00:23:30,169
won't want the device ID that we pulled

469
00:23:27,860 --> 00:23:32,389
earlier and this is our email address

470
00:23:30,170 --> 00:23:41,750
which is logged on to this mobile phone

471
00:23:32,390 --> 00:23:45,910
so once we do this in a few moments with

472
00:23:41,750 --> 00:23:45,910
hopes and prayers to the demo gods

473
00:23:49,190 --> 00:24:07,560
there we go so accept and now there we

474
00:23:57,540 --> 00:24:10,409
go we have a yeah so the easy way has

475
00:24:07,560 --> 00:24:12,360
better quality or VLC of pipe was kind

476
00:24:10,410 --> 00:24:15,270
of damaged but you know it's just a POC

477
00:24:12,360 --> 00:24:19,580
right so we didn't wanna invest too much

478
00:24:15,270 --> 00:24:25,320
time into that so fun times huh so far

479
00:24:19,580 --> 00:24:28,020
okay so close you I can endure it

480
00:24:25,320 --> 00:24:35,389
anymore moving on

481
00:24:28,020 --> 00:24:35,389
I would like to by the way say thank you

482
00:24:37,460 --> 00:24:42,030
some guy gave me a smear enough ice

483
00:24:40,410 --> 00:24:45,830
yesterday and said that I'm supposed to

484
00:24:42,030 --> 00:24:45,830
drink in our stage so thanks to that guy

485
00:24:53,000 --> 00:25:05,190
okay now easy does so now that we know

486
00:25:02,490 --> 00:25:07,440
that we can essentially pull the

487
00:25:05,190 --> 00:25:10,290
information from all the cameras of all

488
00:25:07,440 --> 00:25:13,590
the customers from the vendor one of the

489
00:25:10,290 --> 00:25:15,870
magical things about cloud platforms

490
00:25:13,590 --> 00:25:20,310
when it comes to IOT is that they really

491
00:25:15,870 --> 00:25:23,340
input to the IOT and that input is going

492
00:25:20,310 --> 00:25:28,080
to be parsed by some binaries on the IOT

493
00:25:23,340 --> 00:25:29,459
or some script so essentially when we

494
00:25:28,080 --> 00:25:32,189
interact with the cloud and send

495
00:25:29,460 --> 00:25:34,710
something to the camera we can get

496
00:25:32,190 --> 00:25:35,970
command ejection buffer overflows and

497
00:25:34,710 --> 00:25:38,870
all the good stuff and get command

498
00:25:35,970 --> 00:25:41,340
execution on the device as we will see

499
00:25:38,870 --> 00:25:44,010
so the first thing that we discovered

500
00:25:41,340 --> 00:25:46,790
was a buffer overflow in the cloud agent

501
00:25:44,010 --> 00:25:49,530
that are saying a lot of the IOT vendors

502
00:25:46,790 --> 00:25:52,530
get the cloud from a different vendor

503
00:25:49,530 --> 00:25:55,320
and that particular cloud agent running

504
00:25:52,530 --> 00:25:59,030
on the firmware of the device was from

505
00:25:55,320 --> 00:26:00,679
the tally platform wherever they are and

506
00:25:59,030 --> 00:26:03,920
the combination of p2p a relay server

507
00:26:00,680 --> 00:26:06,370
used to bypass snap restrictions and the

508
00:26:03,920 --> 00:26:08,750
application running on busy box was main

509
00:26:06,370 --> 00:26:11,060
v5 140 XE

510
00:26:08,750 --> 00:26:16,730
because why not why shouldn't you have

511
00:26:11,060 --> 00:26:18,770
exe running on on on busy box and upon

512
00:26:16,730 --> 00:26:20,420
inspection we identified a function

513
00:26:18,770 --> 00:26:22,879
vulnerable to out-of-bounds writes which

514
00:26:20,420 --> 00:26:27,140
is called T case device model riku

515
00:26:22,880 --> 00:26:29,720
request handle and essentially the code

516
00:26:27,140 --> 00:26:32,980
looks like this this is from us trying

517
00:26:29,720 --> 00:26:36,470
to kind of disassemble it with EDA and

518
00:26:32,980 --> 00:26:38,840
it looks very very ugly and after we

519
00:26:36,470 --> 00:26:40,520
kind of did everything that we were

520
00:26:38,840 --> 00:26:42,260
supposed to do with somebody told me

521
00:26:40,520 --> 00:26:47,570
that the actual code was available on

522
00:26:42,260 --> 00:26:50,330
github so yeah but this is what we're

523
00:26:47,570 --> 00:26:53,179
looking for you see that a string copy

524
00:26:50,330 --> 00:26:55,070
over there we're going to overflow v28

525
00:26:53,180 --> 00:26:56,710
and be very night which are actually

526
00:26:55,070 --> 00:27:03,530
called different in the real code and

527
00:26:56,710 --> 00:27:07,730
after that we have system at 81 be 80

528
00:27:03,530 --> 00:27:10,610
and you see we have system over here so

529
00:27:07,730 --> 00:27:12,770
essentially this is our exploit we're

530
00:27:10,610 --> 00:27:18,020
going to exploit the AV send IO control

531
00:27:12,770 --> 00:27:19,879
buffer function we're going to send it

532
00:27:18,020 --> 00:27:22,520
the command that's relative to that

533
00:27:19,880 --> 00:27:24,140
particular memory address and we're

534
00:27:22,520 --> 00:27:25,760
going to use that memory address to call

535
00:27:24,140 --> 00:27:29,090
system which is like the next one in

536
00:27:25,760 --> 00:27:31,460
stack so the main my binary is going to

537
00:27:29,090 --> 00:27:35,449
crash body is going to stick around with

538
00:27:31,460 --> 00:27:39,830
us for a for a shell and we tested it on

539
00:27:35,450 --> 00:27:43,850
this so we're going to try to get a

540
00:27:39,830 --> 00:27:48,139
shell from canada in louisville kentucky

541
00:27:43,850 --> 00:28:01,209
right so for that we're going to open up

542
00:27:48,140 --> 00:28:01,210
a listener on port 4444 and

543
00:28:05,490 --> 00:28:12,840
this is the exploit essentially we we

544
00:28:08,039 --> 00:28:13,230
kind of this one we made in C so wish me

545
00:28:12,840 --> 00:28:20,000
luck

546
00:28:13,230 --> 00:28:20,000
oh there we go

547
00:28:20,149 --> 00:28:24,299
so now we have a shell on that camera

548
00:28:22,529 --> 00:28:28,440
over there and it's that simple again

549
00:28:24,299 --> 00:28:34,820
behind that behind like three nuts right

550
00:28:28,440 --> 00:28:42,659
all really by the cloud so this is

551
00:28:34,820 --> 00:28:44,039
something something if anybody wants me

552
00:28:42,659 --> 00:28:53,039
to run a comment on it now is your

553
00:28:44,039 --> 00:28:55,679
chance I still need it I'm gonna do a

554
00:28:53,039 --> 00:28:59,370
talk this the same talk I'm gonna do it

555
00:28:55,679 --> 00:29:13,100
next month I think so yeah I don't know

556
00:28:59,370 --> 00:29:13,100
I mean mmm what's that anyway so yeah

557
00:29:13,669 --> 00:29:21,630
let me just reboot it to make sure that

558
00:29:17,429 --> 00:29:24,419
it's already stable so yeah obviously

559
00:29:21,630 --> 00:29:27,659
you can get this type of connect back

560
00:29:24,419 --> 00:29:30,600
shot from like most of the devices by

561
00:29:27,659 --> 00:29:33,360
this vendor and given the fact that we

562
00:29:30,600 --> 00:29:36,840
are at four oh eight three one one and a

563
00:29:33,360 --> 00:29:38,490
friend of mine iterated some of the

564
00:29:36,840 --> 00:29:41,039
other client theories and ended up at

565
00:29:38,490 --> 00:29:44,070
about five hundred thousand and four

566
00:29:41,039 --> 00:29:46,260
five hundred and forty thousand like six

567
00:29:44,070 --> 00:29:48,059
months ago and they didn't try since

568
00:29:46,260 --> 00:29:52,140
then and they're getting new customers

569
00:29:48,059 --> 00:29:55,110
every day you know granting that some of

570
00:29:52,140 --> 00:29:56,610
the customers may leave but most of them

571
00:29:55,110 --> 00:29:58,529
won't because usually people don't

572
00:29:56,610 --> 00:30:00,658
change their security system so easily I

573
00:29:58,529 --> 00:30:03,779
would say that group and there's like

574
00:30:00,659 --> 00:30:05,070
two or three devices per customer I say

575
00:30:03,779 --> 00:30:07,649
that we're looking at at least five

576
00:30:05,070 --> 00:30:10,139
hundred thousand devices easy that you

577
00:30:07,649 --> 00:30:17,000
can get a shell on or unauthorized

578
00:30:10,140 --> 00:30:17,000
access so yeah it's kind of bad now

579
00:30:20,090 --> 00:30:25,350
another RC that we found in another

580
00:30:22,470 --> 00:30:27,690
version of of their product I don't have

581
00:30:25,350 --> 00:30:30,270
it with me here unfortunately is a

582
00:30:27,690 --> 00:30:32,760
command injection the device itself

583
00:30:30,270 --> 00:30:35,670
supports remote upgrade and the way it

584
00:30:32,760 --> 00:30:39,570
does that is that you send it an upgrade

585
00:30:35,670 --> 00:30:42,360
command with a new RL that only needs to

586
00:30:39,570 --> 00:30:44,040
be valid because it's gonna be parsed by

587
00:30:42,360 --> 00:30:45,709
a system command that's going to connect

588
00:30:44,040 --> 00:30:48,950
to it and disconnect if it doesn't work

589
00:30:45,710 --> 00:30:56,970
but the thing is going to be parsed by

590
00:30:48,950 --> 00:30:59,460
I'm just going to go to the code tar so

591
00:30:56,970 --> 00:31:02,070
you simply go to the absolute guardzilla

592
00:30:59,460 --> 00:31:03,840
cloud send the upgrade command and your

593
00:31:02,070 --> 00:31:06,600
command injection is the parameter and

594
00:31:03,840 --> 00:31:08,129
the URL that works and you're going to

595
00:31:06,600 --> 00:31:14,159
get your command injection execute it on

596
00:31:08,130 --> 00:31:17,360
the device so yeah as bonus they had an

597
00:31:14,160 --> 00:31:21,840
open-eyed AWS bucket which they fixed

598
00:31:17,360 --> 00:31:25,850
they did it you're the guys that

599
00:31:21,840 --> 00:31:33,570
published before us about the AWS bucket

600
00:31:25,850 --> 00:31:35,129
no you know you forced our hand so so we

601
00:31:33,570 --> 00:31:38,159
were sitting on the guardzilla research

602
00:31:35,130 --> 00:31:40,020
for a few months and then when we had

603
00:31:38,160 --> 00:31:42,240
the AWS bucket as well and then these

604
00:31:40,020 --> 00:31:43,800
guys publish and they published on net

605
00:31:42,240 --> 00:31:44,970
secure as well and they're like ok now

606
00:31:43,800 --> 00:31:48,540
we got to do it so we published

607
00:31:44,970 --> 00:31:50,640
everything and I don't know about you

608
00:31:48,540 --> 00:31:53,129
guys but I got a call from a director at

609
00:31:50,640 --> 00:31:55,440
guardzilla a few days after that I was

610
00:31:53,130 --> 00:31:57,600
in the Philippines and I was asking him

611
00:31:55,440 --> 00:31:59,280
but do you not pen test your stuff

612
00:31:57,600 --> 00:32:02,870
before you publish well sure we do did

613
00:31:59,280 --> 00:32:02,870
you pay a lot of money for that pen test

614
00:32:04,960 --> 00:32:09,980
because seeing that you have like a

615
00:32:07,450 --> 00:32:17,269
six-digit client ID is really not that

616
00:32:09,980 --> 00:32:37,869
difficult you know anyway so let me edit

617
00:32:17,269 --> 00:32:40,730
here not fixed yeah okay so to sum up

618
00:32:37,869 --> 00:32:42,740
usually based starting from that client

619
00:32:40,730 --> 00:32:44,179
ID that you can you can like enumerate

620
00:32:42,740 --> 00:32:45,950
you can get all the informations from

621
00:32:44,179 --> 00:32:49,789
all the devices from all the customers

622
00:32:45,950 --> 00:32:57,350
from this particular vendor and that's

623
00:32:49,789 --> 00:32:59,809
bad okay okay it's takeaways this is for

624
00:32:57,350 --> 00:33:02,119
you know other types of conference like

625
00:32:59,809 --> 00:33:05,149
RSA IOT is a huge attack surface and you

626
00:33:02,119 --> 00:33:07,490
should pen test your devices before you

627
00:33:05,149 --> 00:33:10,279
put them into the market and blah blah

628
00:33:07,490 --> 00:33:11,779
blah but I think that a key takeaway

629
00:33:10,279 --> 00:33:13,190
that I would want you guys to have is

630
00:33:11,779 --> 00:33:15,679
that you can leverage the cloud

631
00:33:13,190 --> 00:33:17,990
implementation to bypass net all IOT s

632
00:33:15,679 --> 00:33:20,149
are moving to the cloud all of them and

633
00:33:17,990 --> 00:33:21,710
we've done research or a number of them

634
00:33:20,149 --> 00:33:26,090
and unfortunately we couldn't publish

635
00:33:21,710 --> 00:33:28,070
everything just yet I'm going to have a

636
00:33:26,090 --> 00:33:32,449
desire these honorable mention after

637
00:33:28,070 --> 00:33:34,730
this slide but trust me you can use the

638
00:33:32,450 --> 00:33:35,899
cloud to like parse input to the device

639
00:33:34,730 --> 00:33:38,119
and get connect back shells

640
00:33:35,899 --> 00:33:42,229
unauthenticated our authentication

641
00:33:38,119 --> 00:33:44,299
bypasses and all that cool stuff so and

642
00:33:42,230 --> 00:33:47,629
yeah it's still trivial to find our C if

643
00:33:44,299 --> 00:33:49,460
you just extract the firmware in like 9

644
00:33:47,629 --> 00:33:51,830
out of 10 cases you're gonna find buffer

645
00:33:49,460 --> 00:33:55,879
overflows in command injection a lot of

646
00:33:51,830 --> 00:33:57,379
them now additional dimension

647
00:33:55,879 --> 00:34:01,189
so far we've published only a fraction

648
00:33:57,379 --> 00:34:03,678
of a research because of legal issues so

649
00:34:01,190 --> 00:34:06,110
just as a curiosity and a question to

650
00:34:03,679 --> 00:34:10,520
the audience how many of you work for

651
00:34:06,110 --> 00:34:14,759
corporations a lot and how many of you

652
00:34:10,520 --> 00:34:17,668
are independent researchers it's

653
00:34:14,760 --> 00:34:19,859
same kind of feedback I had a village at

654
00:34:17,668 --> 00:34:21,899
DEFCON like two or three people or

655
00:34:19,859 --> 00:34:23,489
independent researchers and the vast

656
00:34:21,899 --> 00:34:26,368
majority were working for a corporation

657
00:34:23,489 --> 00:34:29,040
and I don't know how if it's how is the

658
00:34:26,369 --> 00:34:32,460
case with you guys but at a corporation

659
00:34:29,040 --> 00:34:34,679
that I know of the legal department kind

660
00:34:32,460 --> 00:34:37,260
of put a gag on some of the things that

661
00:34:34,679 --> 00:34:38,760
we wanted to publish so one of the

662
00:34:37,260 --> 00:34:41,100
purposes of this talk is to kind of

663
00:34:38,760 --> 00:34:44,669
stimulate some of the research in this

664
00:34:41,100 --> 00:34:47,759
direction and especially in stuff that

665
00:34:44,668 --> 00:34:49,319
can be hot unmask most most IT talks

666
00:34:47,760 --> 00:34:51,179
that I'm seeing are about hacking

667
00:34:49,320 --> 00:34:53,310
something that's in your house or you

668
00:34:51,179 --> 00:34:55,470
know it's perimeter based you have

669
00:34:53,310 --> 00:34:58,650
access to the Wi-Fi you have access to

670
00:34:55,469 --> 00:35:03,089
the Bluetooth area or whatever I think

671
00:34:58,650 --> 00:35:04,619
that this type of hacks are more I don't

672
00:35:03,090 --> 00:35:07,140
to say more important but I'm going to

673
00:35:04,619 --> 00:35:09,780
say more important because it it can

674
00:35:07,140 --> 00:35:12,390
literally lead to new next-generation

675
00:35:09,780 --> 00:35:13,950
botnets you can have like five hundred

676
00:35:12,390 --> 00:35:15,210
thousand devices hacked like this and

677
00:35:13,950 --> 00:35:17,669
the bad guys are going to be able to

678
00:35:15,210 --> 00:35:18,000
take it down who what one knows what

679
00:35:17,670 --> 00:35:20,850
else

680
00:35:18,000 --> 00:35:22,619
and I mean all I'm saying is that

681
00:35:20,850 --> 00:35:25,589
there's needs to be more research

682
00:35:22,619 --> 00:35:29,420
downtime on mass hacks things that can

683
00:35:25,590 --> 00:35:32,160
have an impact on a global scale so I'm

684
00:35:29,420 --> 00:35:33,869
going to say that it's easier for any

685
00:35:32,160 --> 00:35:35,730
kind of company to go after another

686
00:35:33,869 --> 00:35:37,770
company then after an independent

687
00:35:35,730 --> 00:35:40,859
researcher so independent researchers I

688
00:35:37,770 --> 00:35:45,660
think have an easier time publishing and

689
00:35:40,859 --> 00:35:48,060
reporting vulnerabilities we don't mind

690
00:35:45,660 --> 00:35:53,339
sharing some of the private stuff that

691
00:35:48,060 --> 00:35:55,440
we have and if you want our assistance

692
00:35:53,340 --> 00:35:57,900
we can definitely help you with that we

693
00:35:55,440 --> 00:36:00,030
have again a number of research that we

694
00:35:57,900 --> 00:36:02,400
were not able to put out that really has

695
00:36:00,030 --> 00:36:04,680
a huge impact still has a huge impact

696
00:36:02,400 --> 00:36:07,320
still unpatched and we're trying to find

697
00:36:04,680 --> 00:36:08,640
out how to kind of get it out there so

698
00:36:07,320 --> 00:36:12,450
they can get their stuff together and

699
00:36:08,640 --> 00:36:14,368
patch their stuff well with that in mind

700
00:36:12,450 --> 00:36:15,270
I think I'm a little bit ahead of

701
00:36:14,369 --> 00:36:17,970
schedule

702
00:36:15,270 --> 00:36:23,970
but I can open up if there's any Q&A if

703
00:36:17,970 --> 00:36:27,020
not you know so any questions cool no oh

704
00:36:23,970 --> 00:36:27,020
one question

705
00:36:55,620 --> 00:37:01,029
okay that's that's actually an excellent

706
00:36:58,150 --> 00:37:03,220
question because the answer is and I'm

707
00:37:01,030 --> 00:37:05,830
sorry to say this there's not much that

708
00:37:03,220 --> 00:37:08,049
you can do these are not devices that

709
00:37:05,830 --> 00:37:10,450
you port forward and access to report

710
00:37:08,050 --> 00:37:12,340
forward these are devices that are

711
00:37:10,450 --> 00:37:14,890
managed and you access their feed and

712
00:37:12,340 --> 00:37:17,320
they're functionalities relayed by the

713
00:37:14,890 --> 00:37:18,850
by the vendor cloud if you cut the

714
00:37:17,320 --> 00:37:21,070
connection with the vendor cloud that if

715
00:37:18,850 --> 00:37:23,620
I stops working and the connection to

716
00:37:21,070 --> 00:37:25,330
the vendor cloud is legitimate and it's

717
00:37:23,620 --> 00:37:28,120
also fully encrypted so you're not going

718
00:37:25,330 --> 00:37:30,009
to be able to ID a sit and do the packet

719
00:37:28,120 --> 00:37:31,480
inspection and see mike-mike I don't

720
00:37:30,010 --> 00:37:35,290
know buffer overflow of an injection

721
00:37:31,480 --> 00:37:37,210
payload so I mean the only thing that

722
00:37:35,290 --> 00:37:38,860
you might be able to see but you're not

723
00:37:37,210 --> 00:37:41,380
gonna see that in consumer products is

724
00:37:38,860 --> 00:37:44,380
the connection to my the connect back

725
00:37:41,380 --> 00:37:46,180
shell to my server presumably right so

726
00:37:44,380 --> 00:37:47,980
there's a normal connection to the

727
00:37:46,180 --> 00:37:50,319
vendor cloud but at some point the

728
00:37:47,980 --> 00:37:53,460
device makes a connection to my server

729
00:37:50,320 --> 00:37:56,650
in Canada on port 4000 you know 4 4 4 4

730
00:37:53,460 --> 00:37:57,970
you might see that but you're gonna have

731
00:37:56,650 --> 00:38:00,310
like and you're gonna need to have like

732
00:37:57,970 --> 00:38:08,520
a network anomaly detection product at

733
00:38:00,310 --> 00:38:17,980
home which I doubt many people do yes

734
00:38:08,520 --> 00:38:20,950
yeah no no no no so most devices now are

735
00:38:17,980 --> 00:38:22,960
or all of them locked down and the only

736
00:38:20,950 --> 00:38:25,330
connectivity is between device and cloud

737
00:38:22,960 --> 00:38:27,280
so there's no open ports in most cases

738
00:38:25,330 --> 00:38:30,009
there's no port there's not even a web

739
00:38:27,280 --> 00:38:32,080
interface in most new devices right

740
00:38:30,010 --> 00:38:35,290
they're trying to cut down the attack

741
00:38:32,080 --> 00:38:36,850
surface as much as possible so this is a

742
00:38:35,290 --> 00:38:38,500
good implementation for all intensive

743
00:38:36,850 --> 00:38:40,299
purposes talking only to the cloud and

744
00:38:38,500 --> 00:38:41,800
not allowing other connections but it

745
00:38:40,300 --> 00:38:44,020
kind of disables you as

746
00:38:41,800 --> 00:38:45,730
Blue team let's say to kind of pick up

747
00:38:44,020 --> 00:38:47,470
whenever somebody's trying to exploit

748
00:38:45,730 --> 00:38:50,140
the device or have unauthorized access

749
00:38:47,470 --> 00:38:53,049
to it so I guess the only advice that I

750
00:38:50,140 --> 00:38:59,950
can give is plan test it before you buy

751
00:38:53,050 --> 00:39:01,540
it or something going to Best Buy and

752
00:38:59,950 --> 00:39:03,580
tell that you know can I have a look at

753
00:39:01,540 --> 00:39:05,710
this before before the purchase I might

754
00:39:03,580 --> 00:39:19,540
I might break it but you know it's for

755
00:39:05,710 --> 00:39:22,000
the greater good so again you're

756
00:39:19,540 --> 00:39:26,710
thinking about all types of cameras

757
00:39:22,000 --> 00:39:29,290
right these thing nest think ring think

758
00:39:26,710 --> 00:39:31,870
of guardzilla you cannot directly

759
00:39:29,290 --> 00:39:34,090
interact with it so even though you set

760
00:39:31,870 --> 00:39:35,920
up firewall rules or whatever the only

761
00:39:34,090 --> 00:39:38,020
way to manage and access the camera is

762
00:39:35,920 --> 00:39:40,210
through the mobile app relayed by the

763
00:39:38,020 --> 00:39:41,560
cloud so the connection doesn't come

764
00:39:40,210 --> 00:39:43,120
from another IP address the connection

765
00:39:41,560 --> 00:39:49,750
comes from the vendor cloud to the

766
00:39:43,120 --> 00:39:52,660
device nope that was relayed by the

767
00:39:49,750 --> 00:39:55,450
cloud so I talked to the guardzilla

768
00:39:52,660 --> 00:39:57,670
cloud I was in Canada how could I talk

769
00:39:55,450 --> 00:40:01,480
to the device from Canada I was in a VPS

770
00:39:57,670 --> 00:40:04,180
way far away from here so from that

771
00:40:01,480 --> 00:40:07,060
EPA's I talked to the cloud and told the

772
00:40:04,180 --> 00:40:09,879
cloud to tell the device to send a

773
00:40:07,060 --> 00:40:14,700
connect back shell to me in Canada so

774
00:40:09,880 --> 00:40:14,700
look Jeff you know I'm not lying this

775
00:40:15,570 --> 00:40:25,950
was the this was the show that I use

776
00:40:18,160 --> 00:40:34,379
right and this IP are

777
00:40:25,950 --> 00:40:36,270
that I have here is not my laptop is I'm

778
00:40:34,380 --> 00:40:49,890
actually logged on from this IP is from

779
00:40:36,270 --> 00:40:53,849
12 this is my current IP address so this

780
00:40:49,890 --> 00:40:54,720
is my laptop's IP address right so when

781
00:40:53,849 --> 00:40:56,849
I got the shell

782
00:40:54,720 --> 00:41:06,709
I got it completely far away no data

783
00:40:56,849 --> 00:41:14,099
connection any other questions please

784
00:41:06,710 --> 00:41:17,510
I'm sorry the floor screeched that's

785
00:41:14,099 --> 00:41:22,500
such a tough question because you know

786
00:41:17,510 --> 00:41:27,599
correct is an absolute term right better

787
00:41:22,500 --> 00:41:30,119
yes but correct you don't know if it's

788
00:41:27,599 --> 00:41:33,000
correct I mean as far as you have we I

789
00:41:30,119 --> 00:41:35,310
mean we managed to find something

790
00:41:33,000 --> 00:41:37,140
literally all the devices that we've

791
00:41:35,310 --> 00:41:39,810
analyzed that something might have had a

792
00:41:37,140 --> 00:41:42,540
higher impact or a lower impact my might

793
00:41:39,810 --> 00:41:45,930
be more difficult to exploit or easier

794
00:41:42,540 --> 00:41:48,950
to explain this one is easy we did a bit

795
00:41:45,930 --> 00:41:52,799
of research on a very popular Asian

796
00:41:48,950 --> 00:41:55,680
vendor that I'm not able to disclose and

797
00:41:52,800 --> 00:41:57,180
they had like an insanely well put in

798
00:41:55,680 --> 00:41:59,160
place system for authenticated

799
00:41:57,180 --> 00:42:01,379
communication with the device right so

800
00:41:59,160 --> 00:42:03,720
if for example unique keys for each

801
00:42:01,380 --> 00:42:06,000
device so I couldn't use my the keys

802
00:42:03,720 --> 00:42:08,490
from my app to interact with the device

803
00:42:06,000 --> 00:42:10,200
and with another person's device I could

804
00:42:08,490 --> 00:42:11,490
interact with my own but I couldn't

805
00:42:10,200 --> 00:42:14,399
interact with another person's device

806
00:42:11,490 --> 00:42:17,040
and so on and so forth but we managed to

807
00:42:14,400 --> 00:42:19,829
find a way to kind of kill that

808
00:42:17,040 --> 00:42:23,520
encryption right so you send a null byte

809
00:42:19,829 --> 00:42:26,490
at a certain API and that kind of

810
00:42:23,520 --> 00:42:27,990
enables us at the second stage to bypass

811
00:42:26,490 --> 00:42:29,939
encryption and be able to talk to

812
00:42:27,990 --> 00:42:32,640
another device it's it wasn't as trivial

813
00:42:29,940 --> 00:42:35,130
as a guardzilla implementation but still

814
00:42:32,640 --> 00:42:37,290
not impossible so yeah we've seen much

815
00:42:35,130 --> 00:42:39,360
better implementations but unfortunately

816
00:42:37,290 --> 00:42:41,640
not a lot of them

817
00:42:39,360 --> 00:42:43,950
yeah I would say that any company that's

818
00:42:41,640 --> 00:42:46,799
for example nest or ring they're okay

819
00:42:43,950 --> 00:42:48,480
now perfect bar okay but why because

820
00:42:46,800 --> 00:42:50,490
they're on bug bounty programs there's

821
00:42:48,480 --> 00:42:54,300
people hammering at them all the time

822
00:42:50,490 --> 00:42:56,580
and they have a very responsible team

823
00:42:54,300 --> 00:42:58,920
that answers vulnerability disclosure so

824
00:42:56,580 --> 00:43:05,520
props to them unfortunately these are

825
00:42:58,920 --> 00:43:09,800
like very few anything else oh thank you

826
00:43:05,520 --> 00:43:09,800
so much for joining me and yeah

827
00:43:14,470 --> 00:43:17,620
[Applause]

