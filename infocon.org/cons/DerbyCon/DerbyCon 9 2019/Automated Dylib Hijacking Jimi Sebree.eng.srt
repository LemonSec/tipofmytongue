1
00:00:00,539 --> 00:00:05,699
good to go alright how's it going

2
00:00:03,929 --> 00:00:07,770
everyone my name is Jimmy we're gonna

3
00:00:05,700 --> 00:00:09,870
talk about automated dial-up hijacking

4
00:00:07,770 --> 00:00:12,210
specifically with dynamic libraries on

5
00:00:09,870 --> 00:00:14,250
mac OS a couple of quick notes before I

6
00:00:12,210 --> 00:00:14,839
get started this was all done as sort of

7
00:00:14,250 --> 00:00:18,210
just a

8
00:00:14,839 --> 00:00:26,490
can't hear ya good sort of a pet project

9
00:00:18,210 --> 00:00:33,050
of mine I haven't have a need for better

10
00:00:26,490 --> 00:00:35,968
good more higher yell got it alright I

11
00:00:33,050 --> 00:00:37,440
had a need to do some like dynamic

12
00:00:35,969 --> 00:00:40,350
library hijacking for some of the

13
00:00:37,440 --> 00:00:43,320
research I was doing so I went up using

14
00:00:40,350 --> 00:00:46,710
a lot of Patrick Wartell and Jonathan

15
00:00:43,320 --> 00:00:48,899
Levin's like previous works that being

16
00:00:46,710 --> 00:00:50,070
said there's almost no new content in

17
00:00:48,899 --> 00:00:52,079
this talk compared to what they've

18
00:00:50,070 --> 00:00:55,170
released prior this is just how I wound

19
00:00:52,079 --> 00:00:57,199
up using their research and a little bit

20
00:00:55,170 --> 00:01:00,539
of like what I did with it

21
00:00:57,199 --> 00:01:02,190
since this is a sort of shortened time

22
00:01:00,539 --> 00:01:04,500
slot I'm gonna be talking really fast

23
00:01:02,190 --> 00:01:06,240
and sacrificing a bunch of technical

24
00:01:04,500 --> 00:01:08,250
details for the sake of conceptual

25
00:01:06,240 --> 00:01:10,048
clarity so if you notice something wrong

26
00:01:08,250 --> 00:01:12,360
it's probably intentional you can yell

27
00:01:10,049 --> 00:01:14,880
at me later I probably won't care but

28
00:01:12,360 --> 00:01:15,900
notice that the resources at the end of

29
00:01:14,880 --> 00:01:19,170
the talk will point you in the right

30
00:01:15,900 --> 00:01:21,420
direction for that a little bit about me

31
00:01:19,170 --> 00:01:23,580
I'm a security research Hannibal these

32
00:01:21,420 --> 00:01:27,900
are my dogs that's my cat he's the

33
00:01:23,580 --> 00:01:30,600
favorite none of that's important so for

34
00:01:27,900 --> 00:01:32,460
those that aren't familiar with diamond

35
00:01:30,600 --> 00:01:34,289
dynamic libraries I'm gonna give a quick

36
00:01:32,460 --> 00:01:35,669
overview I know we have some IT folks

37
00:01:34,290 --> 00:01:38,130
rather than developers in here so I'll

38
00:01:35,670 --> 00:01:40,500
give just a quick conceptual overview of

39
00:01:38,130 --> 00:01:42,810
that talk about hijacking them in

40
00:01:40,500 --> 00:01:47,009
general and then talk about how I wound

41
00:01:42,810 --> 00:01:49,740
up automating the process so dynamic

42
00:01:47,009 --> 00:01:52,200
libraries from Mac OS specifically it's

43
00:01:49,740 --> 00:01:55,470
important to know in a Mac OS

44
00:01:52,200 --> 00:01:57,060
application structure I won't really

45
00:01:55,470 --> 00:01:59,729
touch on too much in this talk but if

46
00:01:57,060 --> 00:02:02,930
you go to actually implement any of this

47
00:01:59,729 --> 00:02:05,039
on your own this will become important

48
00:02:02,930 --> 00:02:08,190
really all you need to know is that all

49
00:02:05,040 --> 00:02:10,739
mac OS applications are special bundles

50
00:02:08,190 --> 00:02:13,340
all that means is its directory with a

51
00:02:10,739 --> 00:02:15,260
very specific structure so you

52
00:02:13,340 --> 00:02:17,540
contents folder all of your frameworks

53
00:02:15,260 --> 00:02:19,310
somewhere resources and there's gonna be

54
00:02:17,540 --> 00:02:20,720
special directory for Mac OS where all

55
00:02:19,310 --> 00:02:24,950
of your actual applications are launched

56
00:02:20,720 --> 00:02:27,530
from dynamic libraries for those that

57
00:02:24,950 --> 00:02:31,129
are aware also known as shared libraries

58
00:02:27,530 --> 00:02:33,129
shared objects all they are external

59
00:02:31,129 --> 00:02:37,879
resources that are loaded at runtime

60
00:02:33,129 --> 00:02:41,209
nothing else fancy mac OS inherits BSD

61
00:02:37,879 --> 00:02:42,590
style format you'll typically see these

62
00:02:41,209 --> 00:02:44,989
implemented as frameworks which are

63
00:02:42,590 --> 00:02:46,610
themselves special bundles that the

64
00:02:44,989 --> 00:02:48,349
operating system knows to traverse that

65
00:02:46,610 --> 00:02:53,180
special structure and load things

66
00:02:48,349 --> 00:02:55,819
properly to load the dynamic library on

67
00:02:53,180 --> 00:03:00,290
Mac OS it's all handled by a special

68
00:02:55,819 --> 00:03:01,940
Damon called dy LD all you need if you

69
00:03:00,290 --> 00:03:04,220
want to load a library first off has to

70
00:03:01,940 --> 00:03:06,319
exist you got to have some search paths

71
00:03:04,220 --> 00:03:08,120
to find it and you need some load

72
00:03:06,319 --> 00:03:09,859
commands all of these are added at

73
00:03:08,120 --> 00:03:12,709
compile time and you can use certain

74
00:03:09,860 --> 00:03:16,040
tools such as O'Tool or NM or any other

75
00:03:12,709 --> 00:03:20,780
variety of those to actually parse them

76
00:03:16,040 --> 00:03:24,950
and read out these load commands the

77
00:03:20,780 --> 00:03:26,930
actual hijacking process I'm gonna start

78
00:03:24,950 --> 00:03:29,030
with a brief introduction of DLL

79
00:03:26,930 --> 00:03:30,560
hijacking just because this is a dead

80
00:03:29,030 --> 00:03:34,010
horse that's been beaten over and over

81
00:03:30,560 --> 00:03:35,750
people already understand it not gonna

82
00:03:34,010 --> 00:03:38,328
read off the flight here but more or

83
00:03:35,750 --> 00:03:41,030
less when Windows launches an executable

84
00:03:38,329 --> 00:03:42,709
if an external resource is needed it'll

85
00:03:41,030 --> 00:03:44,090
go through all the search paths in order

86
00:03:42,709 --> 00:03:45,680
if it doesn't exist in the first it will

87
00:03:44,090 --> 00:03:47,810
check the second doesn't exist in the

88
00:03:45,680 --> 00:03:50,720
second it'll check the third so on and

89
00:03:47,810 --> 00:03:52,489
so forth the way you can actually hijack

90
00:03:50,720 --> 00:03:54,410
these is if you find a gap in that

91
00:03:52,489 --> 00:03:56,450
search path you can put your library

92
00:03:54,410 --> 00:04:00,790
first in the search paths so it's loaded

93
00:03:56,450 --> 00:04:04,700
instead of the desired one for Mac OS

94
00:04:00,790 --> 00:04:06,138
exactly the same process except you can

95
00:04:04,700 --> 00:04:08,630
do it a little bit easier by parsing

96
00:04:06,139 --> 00:04:11,480
these load commands so anytime you see

97
00:04:08,630 --> 00:04:13,310
these LC load die Lib commands or LC

98
00:04:11,480 --> 00:04:16,010
load weak pilot or any of the other load

99
00:04:13,310 --> 00:04:20,690
functions it's gonna go down and find

100
00:04:16,010 --> 00:04:22,669
special ARP F commands that specify what

101
00:04:20,690 --> 00:04:23,690
all the relative paths are one thing I

102
00:04:22,669 --> 00:04:25,250
want to touch on here I'm going to

103
00:04:23,690 --> 00:04:26,840
mention our pass a lot

104
00:04:25,250 --> 00:04:28,790
you're from a more UNIX II background

105
00:04:26,840 --> 00:04:30,830
our path does mean something special in

106
00:04:28,790 --> 00:04:33,080
a different context here when I say it

107
00:04:30,830 --> 00:04:35,359
more or less all I'm referring to is a

108
00:04:33,080 --> 00:04:39,859
special like relative to the current

109
00:04:35,360 --> 00:04:41,300
directory path there are special things

110
00:04:39,860 --> 00:04:43,250
called executable bat and loader path

111
00:04:41,300 --> 00:04:44,810
not necessarily important for this talk

112
00:04:43,250 --> 00:04:48,970
but you will see them pop up in a couple

113
00:04:44,810 --> 00:04:51,440
of my slides vulnerable functions

114
00:04:48,970 --> 00:04:53,840
vulnerable in this context is sort of

115
00:04:51,440 --> 00:04:56,630
misleading is when people see vulnerable

116
00:04:53,840 --> 00:04:59,060
they typically think Oh flaw that needs

117
00:04:56,630 --> 00:05:00,560
to be fixed we're not really there's

118
00:04:59,060 --> 00:05:02,300
nothing inherently wrong with the

119
00:05:00,560 --> 00:05:05,210
functionality we're abusing because it's

120
00:05:02,300 --> 00:05:07,160
intended so keep that in mind because

121
00:05:05,210 --> 00:05:08,659
there's a lot of ways you can use this

122
00:05:07,160 --> 00:05:12,200
technique for good rather than just

123
00:05:08,660 --> 00:05:14,780
abusing an application the two commands

124
00:05:12,200 --> 00:05:16,250
that we'll look at our LC load I live

125
00:05:14,780 --> 00:05:18,799
and LC load weak die Lib

126
00:05:16,250 --> 00:05:21,410
they both iterate while over all of the

127
00:05:18,800 --> 00:05:23,750
árpád's and you can like search in order

128
00:05:21,410 --> 00:05:25,880
the distinction between the two is the

129
00:05:23,750 --> 00:05:27,919
first one I fit doesn't find a library

130
00:05:25,880 --> 00:05:29,930
throws an exception in the application

131
00:05:27,919 --> 00:05:32,919
will exit the second if the library

132
00:05:29,930 --> 00:05:38,360
doesn't exist it doesn't care the

133
00:05:32,919 --> 00:05:41,359
execution will continue so quick note on

134
00:05:38,360 --> 00:05:43,820
that sometimes whether for backwards

135
00:05:41,360 --> 00:05:46,100
compatibility or functionality that

136
00:05:43,820 --> 00:05:48,320
doesn't exist without like paid

137
00:05:46,100 --> 00:05:51,290
extensions or whatever you'll see

138
00:05:48,320 --> 00:05:54,469
developers use load weak dial load weak

139
00:05:51,290 --> 00:05:59,450
die Lib instead which is the type on the

140
00:05:54,470 --> 00:06:01,690
slide basically allows you to use this

141
00:05:59,450 --> 00:06:04,969
extra functionality not necessarily a

142
00:06:01,690 --> 00:06:06,440
problem if the library doesn't exist the

143
00:06:04,970 --> 00:06:08,930
important thing to note is if it doesn't

144
00:06:06,440 --> 00:06:11,030
exist and it's not necessarily a dynamic

145
00:06:08,930 --> 00:06:12,320
or pet that's being searched you can

146
00:06:11,030 --> 00:06:18,619
still put your own in and it will be

147
00:06:12,320 --> 00:06:21,469
loaded now for the actual LC load die

148
00:06:18,620 --> 00:06:22,790
Lib if you can see at the top of the

149
00:06:21,470 --> 00:06:26,960
little screenshot there it says load

150
00:06:22,790 --> 00:06:30,020
command 43 44 45 so on down all of these

151
00:06:26,960 --> 00:06:32,989
are run in order by dy LD as the

152
00:06:30,020 --> 00:06:36,140
application is launched so when it looks

153
00:06:32,990 --> 00:06:38,390
for this live Swift XP C die lib it's

154
00:06:36,140 --> 00:06:39,110
going to check that first slash user

155
00:06:38,390 --> 00:06:40,580
slash libs

156
00:06:39,110 --> 00:06:42,800
Swift directory first if it doesn't

157
00:06:40,580 --> 00:06:44,390
exist it'll check the next one so if

158
00:06:42,800 --> 00:06:48,070
there are any gaps in this path you can

159
00:06:44,390 --> 00:06:48,070
abuse that and put it in an earlier past

160
00:06:48,760 --> 00:06:55,610
an example application I wrote for this

161
00:06:51,200 --> 00:06:57,620
just for clarity sake we've got a tiny

162
00:06:55,610 --> 00:06:58,310
example that's the binary that we're

163
00:06:57,620 --> 00:07:00,200
gonna target

164
00:06:58,310 --> 00:07:02,150
we've got dilate to hijack and then

165
00:07:00,200 --> 00:07:06,650
we've got an empty nested folder /

166
00:07:02,150 --> 00:07:09,440
frameworks the applications very simple

167
00:07:06,650 --> 00:07:11,479
it has an external call to a print

168
00:07:09,440 --> 00:07:13,310
message function and it calls it a few

169
00:07:11,480 --> 00:07:15,200
times the library that we're gonna

170
00:07:13,310 --> 00:07:17,150
hijack just defines this it's just a

171
00:07:15,200 --> 00:07:21,500
wrapper for printf just for simplicity

172
00:07:17,150 --> 00:07:23,989
and then from this example application

173
00:07:21,500 --> 00:07:26,480
we can see it loads the styling and it

174
00:07:23,990 --> 00:07:28,250
loads it from our path slash dialer up

175
00:07:26,480 --> 00:07:29,780
to hijack if you look in the second

176
00:07:28,250 --> 00:07:31,310
screenshot on this slide you've got the

177
00:07:29,780 --> 00:07:33,619
first one checking that nested folder

178
00:07:31,310 --> 00:07:35,780
which we know it doesn't exist in the

179
00:07:33,620 --> 00:07:37,010
second path checking the first

180
00:07:35,780 --> 00:07:42,320
frameworks folder that we know it does

181
00:07:37,010 --> 00:07:44,150
exist in so we take a look at that we

182
00:07:42,320 --> 00:07:46,610
can we know that this is vulnerable

183
00:07:44,150 --> 00:07:49,010
hijack point so if we put a rogue

184
00:07:46,610 --> 00:07:52,970
library in this path ours will be loaded

185
00:07:49,010 --> 00:07:54,920
instead of the real one I'll talk about

186
00:07:52,970 --> 00:07:58,550
how we actually do that here in just a

187
00:07:54,920 --> 00:08:01,070
second I'll get back to that so

188
00:07:58,550 --> 00:08:05,270
automating the process some of this is

189
00:08:01,070 --> 00:08:07,909
the only original part of this talk it's

190
00:08:05,270 --> 00:08:09,799
pretty simple mostly because Mac OS has

191
00:08:07,910 --> 00:08:11,300
all of the tools you need to actually do

192
00:08:09,800 --> 00:08:13,730
this built-in you just have to script it

193
00:08:11,300 --> 00:08:16,010
so the three steps you follow

194
00:08:13,730 --> 00:08:18,050
scan for hijack points since we just did

195
00:08:16,010 --> 00:08:21,140
that manually and it's obvious that it's

196
00:08:18,050 --> 00:08:23,540
pretty easy to parse that's a pretty

197
00:08:21,140 --> 00:08:25,820
simple step you create your new new

198
00:08:23,540 --> 00:08:27,710
library which is as complicated as you

199
00:08:25,820 --> 00:08:29,780
want it to be we'll talk about that here

200
00:08:27,710 --> 00:08:33,890
in a second and then you just drop your

201
00:08:29,780 --> 00:08:36,530
new library and move on with life to

202
00:08:33,890 --> 00:08:38,900
scan for these as we did manually a

203
00:08:36,530 --> 00:08:41,059
second ago we'll search a given

204
00:08:38,900 --> 00:08:43,728
directory for any binary that happens to

205
00:08:41,059 --> 00:08:45,979
have LC load die Lib commands so if

206
00:08:43,729 --> 00:08:49,040
you're loading a dynamic library you'll

207
00:08:45,980 --> 00:08:50,390
then parse all the our pads and check

208
00:08:49,040 --> 00:08:52,120
those paths to see if your library

209
00:08:50,390 --> 00:08:54,580
exists if it exists in

210
00:08:52,120 --> 00:08:56,440
the first path that searched just move

211
00:08:54,580 --> 00:08:58,270
on if it exists in the second path that

212
00:08:56,440 --> 00:09:00,730
search well you know you have a gap in

213
00:08:58,270 --> 00:09:02,140
that so you'll just flag it and report

214
00:09:00,730 --> 00:09:07,000
back and you'll drop a library in there

215
00:09:02,140 --> 00:09:08,080
later now wrapping and proxying

216
00:09:07,000 --> 00:09:09,850
functions this is where you're going to

217
00:09:08,080 --> 00:09:11,170
actually do the hijacking there are two

218
00:09:09,850 --> 00:09:13,630
ways that I've used to do it there's the

219
00:09:11,170 --> 00:09:15,040
easy way in the annoying way I'll talk

220
00:09:13,630 --> 00:09:17,680
about the easy way first and that's

221
00:09:15,040 --> 00:09:22,870
gonna abuse the built-in C attribute

222
00:09:17,680 --> 00:09:25,150
constructor so to do this this is all

223
00:09:22,870 --> 00:09:27,250
the source code for our rogue library

224
00:09:25,150 --> 00:09:29,199
all it does is have this attribute

225
00:09:27,250 --> 00:09:32,020
constructor specifies a function name

226
00:09:29,200 --> 00:09:35,950
which doesn't matter and loads and runs

227
00:09:32,020 --> 00:09:38,560
like whatever code we want in there so

228
00:09:35,950 --> 00:09:40,330
what's important to note here is as soon

229
00:09:38,560 --> 00:09:43,119
as the application launches and loads

230
00:09:40,330 --> 00:09:45,840
this library this code is run what's

231
00:09:43,120 --> 00:09:48,460
also important to note is if we didn't

232
00:09:45,840 --> 00:09:51,910
like do this reax port here that i'm

233
00:09:48,460 --> 00:09:53,770
gonna talk about we would get a symbol

234
00:09:51,910 --> 00:09:56,230
error or symbol not found error as soon

235
00:09:53,770 --> 00:09:58,180
as the application tries to load the

236
00:09:56,230 --> 00:10:00,160
like try to call functions that are

237
00:09:58,180 --> 00:10:02,620
expected in the real library so we'll

238
00:10:00,160 --> 00:10:04,589
want to add at compile time a special

239
00:10:02,620 --> 00:10:07,390
attribute called LC re-export nya Lib

240
00:10:04,590 --> 00:10:09,580
that will basically grab the desired

241
00:10:07,390 --> 00:10:13,420
library which you can change without

242
00:10:09,580 --> 00:10:14,140
recompiling and load it so that all the

243
00:10:13,420 --> 00:10:19,630
symbols are found

244
00:10:14,140 --> 00:10:22,150
so after normal execution this is what

245
00:10:19,630 --> 00:10:24,280
the application does pretty simple after

246
00:10:22,150 --> 00:10:26,770
we've dropped our library and the hijack

247
00:10:24,280 --> 00:10:29,260
point it'll run our hijacked code and

248
00:10:26,770 --> 00:10:31,210
then it'll run normal execution this

249
00:10:29,260 --> 00:10:36,700
would crash if we didn't actually react

250
00:10:31,210 --> 00:10:38,440
sport the original library so that's the

251
00:10:36,700 --> 00:10:40,270
really easy method to do you can have a

252
00:10:38,440 --> 00:10:42,190
single binary that's very portable and

253
00:10:40,270 --> 00:10:43,780
just kind of toss it around and change

254
00:10:42,190 --> 00:10:47,320
paths as you need with a tool called

255
00:10:43,780 --> 00:10:49,740
install name tool now the annoying way

256
00:10:47,320 --> 00:10:51,700
is if you want to actually examine the

257
00:10:49,740 --> 00:10:55,780
functionality of the library that's

258
00:10:51,700 --> 00:10:57,520
being imported the reason it's annoying

259
00:10:55,780 --> 00:10:59,500
is because you have to have access to

260
00:10:57,520 --> 00:11:01,990
some more sort of compiler when you're

261
00:10:59,500 --> 00:11:03,670
trying to automate this process luckily

262
00:11:01,990 --> 00:11:05,920
since I'm just a developer and

263
00:11:03,670 --> 00:11:07,899
researcher I can use GCC and solve

264
00:11:05,920 --> 00:11:09,849
system it doesn't matter if you were a

265
00:11:07,899 --> 00:11:10,990
malware author or someone on a red team

266
00:11:09,850 --> 00:11:12,880
trying to actually automate this process

267
00:11:10,990 --> 00:11:14,800
you'd have to package some sort of

268
00:11:12,880 --> 00:11:18,579
compiler with your code and then ship

269
00:11:14,800 --> 00:11:22,329
that off to actually do the scanning if

270
00:11:18,579 --> 00:11:23,979
you want to inspect public like publicly

271
00:11:22,329 --> 00:11:25,920
exported symbols or functions that are

272
00:11:23,980 --> 00:11:28,990
accessible within the library normally

273
00:11:25,920 --> 00:11:30,519
its next big isn't very important but if

274
00:11:28,990 --> 00:11:33,519
you want to also inspect private

275
00:11:30,519 --> 00:11:34,720
functions of these libraries you'll want

276
00:11:33,519 --> 00:11:36,519
to use some sort of simple phishing

277
00:11:34,720 --> 00:11:39,040
library the reason I have an asterisk

278
00:11:36,519 --> 00:11:40,660
there it's a term I love no idea where

279
00:11:39,040 --> 00:11:42,310
it came from never seen anyone else use

280
00:11:40,660 --> 00:11:43,839
it except for like one blog post if

281
00:11:42,310 --> 00:11:47,109
anyone knows who came up with it please

282
00:11:43,839 --> 00:11:49,389
let me know and then you'll want to

283
00:11:47,110 --> 00:11:50,620
create stubs for each of the export

284
00:11:49,389 --> 00:11:54,660
symbols or private symbols in the

285
00:11:50,620 --> 00:11:56,639
library that you want the trick here is

286
00:11:54,660 --> 00:11:58,810
typically if you want to override a

287
00:11:56,639 --> 00:12:00,910
function you'll need to know its actual

288
00:11:58,810 --> 00:12:02,619
prototype there's a little tricky way

289
00:12:00,910 --> 00:12:05,730
I'm using yup using the calling you

290
00:12:02,620 --> 00:12:09,190
Convention and Mac OS to get around that

291
00:12:05,730 --> 00:12:11,829
I'm not gonna go to far end but Jonathan

292
00:12:09,190 --> 00:12:13,180
Levin has put out a lot of research and

293
00:12:11,829 --> 00:12:16,510
material there a few other libraries

294
00:12:13,180 --> 00:12:18,399
around that allow you to use the course

295
00:12:16,510 --> 00:12:19,930
on symbolic ation framework which is

296
00:12:18,399 --> 00:12:21,940
private by Apple but it's been very

297
00:12:19,930 --> 00:12:23,199
heavily reversed you can use that to

298
00:12:21,940 --> 00:12:28,089
actually pull in all the privately

299
00:12:23,199 --> 00:12:29,709
exported symbols the next three or four

300
00:12:28,089 --> 00:12:31,899
slides are all from the same source code

301
00:12:29,709 --> 00:12:35,439
file this is my actual little hijacker

302
00:12:31,899 --> 00:12:39,130
library all of this is just setting up

303
00:12:35,440 --> 00:12:41,230
the storage so symbols are gonna be all

304
00:12:39,130 --> 00:12:42,820
the symbols that I'm importing and gonna

305
00:12:41,230 --> 00:12:45,370
re export so that we don't get any

306
00:12:42,820 --> 00:12:47,170
symbol errors and then register storage

307
00:12:45,370 --> 00:12:48,790
since I mentioned we're going to abused

308
00:12:47,170 --> 00:12:51,490
the calling convention we need somewhere

309
00:12:48,790 --> 00:12:53,800
to store current register values before

310
00:12:51,490 --> 00:12:55,779
I actually get into it and then the

311
00:12:53,800 --> 00:12:57,399
library hijacked that library fool is

312
00:12:55,779 --> 00:13:01,779
going to be replaced with our desired

313
00:12:57,399 --> 00:13:03,100
library when this is dropped the payload

314
00:13:01,779 --> 00:13:05,139
function all I'm going to do here is

315
00:13:03,100 --> 00:13:06,550
keep it simple just print that I

316
00:13:05,139 --> 00:13:09,639
hijacked a function then print the

317
00:13:06,550 --> 00:13:12,490
function that I hijacked the hijack

318
00:13:09,639 --> 00:13:14,500
function all it does is open the desired

319
00:13:12,490 --> 00:13:16,510
library grab all the symbols from it

320
00:13:14,500 --> 00:13:21,060
store those and that symbols variable

321
00:13:16,510 --> 00:13:21,060
from earlier and then return

322
00:13:21,300 --> 00:13:28,150
proxy this is where kind of the meet

323
00:13:23,620 --> 00:13:29,710
happens we'll run our payload well first

324
00:13:28,150 --> 00:13:31,959
we'll hijack we'll run our payload and

325
00:13:29,710 --> 00:13:36,340
then we'll grab the real symbol and then

326
00:13:31,960 --> 00:13:39,310
make a call to that so what I mentioned

327
00:13:36,340 --> 00:13:41,950
before since Mac OS uses the system VAB

328
00:13:39,310 --> 00:13:44,469
I calling convention it has a very

329
00:13:41,950 --> 00:13:47,740
specific set of registers that are used

330
00:13:44,470 --> 00:13:48,940
to pass parameters until it runs out of

331
00:13:47,740 --> 00:13:51,010
these registers and then it just uses

332
00:13:48,940 --> 00:13:53,350
the stack well there are special

333
00:13:51,010 --> 00:13:55,689
built-in standard libraries and C that

334
00:13:53,350 --> 00:13:58,270
allow you to use a variable number of

335
00:13:55,690 --> 00:14:00,100
parameters that library fortunately has

336
00:13:58,270 --> 00:14:01,689
a lot of extra protections for the stack

337
00:14:00,100 --> 00:14:03,640
so I don't have to worry about messing

338
00:14:01,690 --> 00:14:05,200
with that all I have to do is care about

339
00:14:03,640 --> 00:14:07,060
the registers that are there so if I

340
00:14:05,200 --> 00:14:08,500
just store these register values

341
00:14:07,060 --> 00:14:10,750
manually with a little bit of assembly

342
00:14:08,500 --> 00:14:13,450
and then put them back where they belong

343
00:14:10,750 --> 00:14:14,830
after I run my payload the application

344
00:14:13,450 --> 00:14:17,500
is done the wiser so I don't actually

345
00:14:14,830 --> 00:14:20,500
have to reverse engineer the library and

346
00:14:17,500 --> 00:14:22,170
I can run my code without needed

347
00:14:20,500 --> 00:14:26,290
actually take the time to do that so

348
00:14:22,170 --> 00:14:28,990
this function stub I just export the sir

349
00:14:26,290 --> 00:14:32,260
specify the symbol I've like pre parts

350
00:14:28,990 --> 00:14:34,420
from the nm utility and then preserve

351
00:14:32,260 --> 00:14:38,020
the registers and call my proxy function

352
00:14:34,420 --> 00:14:41,110
that's all you need to do and once you

353
00:14:38,020 --> 00:14:43,600
do that you can get this kind of output

354
00:14:41,110 --> 00:14:45,160
so every time any function is called in

355
00:14:43,600 --> 00:14:46,570
the binary you can we get a little

356
00:14:45,160 --> 00:14:48,280
output that hey I've hijacked this

357
00:14:46,570 --> 00:14:54,370
function and then it'll give you the

358
00:14:48,280 --> 00:14:55,750
real output if you're using the

359
00:14:54,370 --> 00:14:57,400
constructor method which you probably

360
00:14:55,750 --> 00:14:59,520
will be if you're looking for any sort

361
00:14:57,400 --> 00:15:01,300
of persistence or privilege escalation

362
00:14:59,520 --> 00:15:03,430
you don't need to do anything special

363
00:15:01,300 --> 00:15:05,319
you can use your precompiled binary and

364
00:15:03,430 --> 00:15:06,880
just use the install name tool to change

365
00:15:05,320 --> 00:15:09,280
the pads every time you find a new

366
00:15:06,880 --> 00:15:11,350
library you want to hijack view doing it

367
00:15:09,280 --> 00:15:13,270
the more annoying way you'll just need

368
00:15:11,350 --> 00:15:15,160
to do a little extra groundwork to parse

369
00:15:13,270 --> 00:15:18,069
some of the output from some special

370
00:15:15,160 --> 00:15:23,079
tools and then like build and then

371
00:15:18,070 --> 00:15:25,000
compile and then drop fancy flowchart

372
00:15:23,080 --> 00:15:27,250
just kind of developed like talking

373
00:15:25,000 --> 00:15:28,900
about the tool I've made I think I'm

374
00:15:27,250 --> 00:15:29,980
moving fast enough I'm not going to talk

375
00:15:28,900 --> 00:15:31,480
about this too much but it's a good

376
00:15:29,980 --> 00:15:33,730
resource for anyone that wants to look

377
00:15:31,480 --> 00:15:37,610
this talk up later

378
00:15:33,730 --> 00:15:40,160
go through some final thoughts here if

379
00:15:37,610 --> 00:15:41,720
you run into any issues with this the

380
00:15:40,160 --> 00:15:43,790
most common one I've run into is a

381
00:15:41,720 --> 00:15:45,800
version mismatch issue and it's

382
00:15:43,790 --> 00:15:48,170
basically stating that I've tried to

383
00:15:45,800 --> 00:15:50,240
load a version of a library that the

384
00:15:48,170 --> 00:15:52,339
application isn't expecting you can look

385
00:15:50,240 --> 00:15:54,680
this up in the output it's just shows

386
00:15:52,339 --> 00:15:57,760
min version max version change yours to

387
00:15:54,680 --> 00:15:59,899
what's accepted and you're good to go

388
00:15:57,760 --> 00:16:01,670
you might run into some permissions

389
00:15:59,899 --> 00:16:03,740
issues the scanner I wrote doesn't take

390
00:16:01,670 --> 00:16:05,540
any of these into account so if you're

391
00:16:03,740 --> 00:16:08,120
trying to hijack something that's

392
00:16:05,540 --> 00:16:09,740
requires elevated privilege to write to

393
00:16:08,120 --> 00:16:13,450
that directory it's gonna fail on you

394
00:16:09,740 --> 00:16:18,350
and then my little assembly thing is

395
00:16:13,450 --> 00:16:21,230
hacky at best it works on my machine it

396
00:16:18,350 --> 00:16:24,770
may not work on yours so keep in mind

397
00:16:21,230 --> 00:16:26,089
that more often than not if it goes

398
00:16:24,770 --> 00:16:27,500
wrong you're probably trying to do a

399
00:16:26,089 --> 00:16:29,029
little bit too much anything I've done

400
00:16:27,500 --> 00:16:31,490
where it's failed I'm the one at fault

401
00:16:29,029 --> 00:16:32,480
not necessarily the method it's usually

402
00:16:31,490 --> 00:16:34,040
because I'm trying to mess with the

403
00:16:32,480 --> 00:16:37,820
stack in ways that are screwing up

404
00:16:34,040 --> 00:16:38,959
things downstream but it's probably

405
00:16:37,820 --> 00:16:43,790
better to take a more targeted approach

406
00:16:38,959 --> 00:16:45,859
at that point use cases I use this quite

407
00:16:43,790 --> 00:16:48,199
a bit just to replace actual libraries

408
00:16:45,860 --> 00:16:50,420
and monitor execution flow it's a lot

409
00:16:48,200 --> 00:16:54,050
easier than getting DTrace or LOD B

410
00:16:50,420 --> 00:16:55,699
scripts set up so like it's fun just to

411
00:16:54,050 --> 00:16:57,279
kind of delete the desired library

412
00:16:55,700 --> 00:17:01,580
replace it with my hijacker and then

413
00:16:57,279 --> 00:17:03,800
watch the output in syslog it's a great

414
00:17:01,580 --> 00:17:05,300
persistence mechanism the caveat there

415
00:17:03,800 --> 00:17:07,490
is you have to pick something that's

416
00:17:05,300 --> 00:17:11,240
gonna be used regularly for your code to

417
00:17:07,490 --> 00:17:12,709
be run and then the biggest deal from a

418
00:17:11,240 --> 00:17:14,959
security perspective is privilege

419
00:17:12,709 --> 00:17:17,170
escalation if you find a library that

420
00:17:14,959 --> 00:17:20,240
can be hijacked and it happens to run as

421
00:17:17,170 --> 00:17:22,250
root but you can write to those

422
00:17:20,240 --> 00:17:26,230
directories as a normal user you now

423
00:17:22,250 --> 00:17:26,230
have privilege escalation to root

424
00:17:26,290 --> 00:17:30,800
mitigations there's not really anything

425
00:17:29,030 --> 00:17:33,550
good you can do other than proper

426
00:17:30,800 --> 00:17:37,100
permissioning and like IT and deaf roles

427
00:17:33,550 --> 00:17:38,870
more or less just kind of clean up after

428
00:17:37,100 --> 00:17:40,730
yourself if you have code that you're

429
00:17:38,870 --> 00:17:43,129
not really using anymore just get rid of

430
00:17:40,730 --> 00:17:45,350
it if you're having pads that you're not

431
00:17:43,130 --> 00:17:46,880
actually using take them out of your our

432
00:17:45,350 --> 00:17:51,860
path listing

433
00:17:46,880 --> 00:17:53,420
that's pretty much it like I mentioned I

434
00:17:51,860 --> 00:17:55,429
owe a lot of credit to Patrick Wartell

435
00:17:53,420 --> 00:17:58,340
and Jonathan Levin for all the research

436
00:17:55,430 --> 00:17:59,990
I've done so I highly suggest giving

437
00:17:58,340 --> 00:18:03,340
them a shout-out see a couple people

438
00:17:59,990 --> 00:18:03,340
taking pictures so I'll wait a second

439
00:18:04,780 --> 00:18:11,440
all right and I kind of blitz through

440
00:18:08,120 --> 00:18:11,439
that a lot faster go ahead

441
00:18:13,540 --> 00:18:21,550
not my name but I have seen it any other

442
00:18:19,220 --> 00:18:21,550
questions

443
00:18:22,330 --> 00:18:26,139
cool well thank you very much

444
00:18:29,450 --> 00:18:32,569
[Applause]

