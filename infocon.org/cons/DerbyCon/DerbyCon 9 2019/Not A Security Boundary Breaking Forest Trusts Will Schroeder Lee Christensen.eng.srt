1
00:00:11,179 --> 00:00:20,460
all right let's get going so this is not

2
00:00:17,550 --> 00:00:21,990
a security boundary breaking forest

3
00:00:20,460 --> 00:00:25,080
trust we're gonna hit some Active

4
00:00:21,990 --> 00:00:27,028
Directory stuff trust this is a very

5
00:00:25,080 --> 00:00:28,830
interesting bug that has now since been

6
00:00:27,029 --> 00:00:29,970
patched by Microsoft we will explain the

7
00:00:28,830 --> 00:00:31,589
patch and kind of behavior and

8
00:00:29,970 --> 00:00:33,390
everything that fixed it but we're gonna

9
00:00:31,590 --> 00:00:35,100
walk you through all the components that

10
00:00:33,390 --> 00:00:37,739
are going to be needed to really

11
00:00:35,100 --> 00:00:39,660
understand what this issue was how we

12
00:00:37,739 --> 00:00:43,169
kind of went about finding it and how it

13
00:00:39,660 --> 00:00:45,449
got fixed so my name is Wil Schrager my

14
00:00:43,170 --> 00:00:47,969
handle on Twitter and github is harm joy

15
00:00:45,450 --> 00:00:50,039
I am a Technical Architect at Specter

16
00:00:47,969 --> 00:00:51,989
ups right a lot of the code over the

17
00:00:50,039 --> 00:00:54,420
years helped out veil framework empire

18
00:00:51,989 --> 00:00:56,610
power sploit bloodhound whole bunch of

19
00:00:54,420 --> 00:00:58,140
fun stuff and the one project that I've

20
00:00:56,610 --> 00:01:00,750
written that will be used in these demos

21
00:00:58,140 --> 00:01:04,860
is Rubeus for a lot of c-sharp kerberos

22
00:01:00,750 --> 00:01:06,960
exploitation and my name is lee

23
00:01:04,860 --> 00:01:09,210
christensen I'm also a Technical

24
00:01:06,960 --> 00:01:10,890
Architect over at Specter ops I do a lot

25
00:01:09,210 --> 00:01:13,649
of red teaming I do a bunch of tool

26
00:01:10,890 --> 00:01:16,590
development research a lot of Windows

27
00:01:13,650 --> 00:01:18,240
internals stuff as well and a bunch of

28
00:01:16,590 --> 00:01:20,250
training there as well for the Red Team

29
00:01:18,240 --> 00:01:20,699
class in general I just love shiny

30
00:01:20,250 --> 00:01:22,860
things

31
00:01:20,700 --> 00:01:25,110
anything that's interesting in security

32
00:01:22,860 --> 00:01:27,869
all I'm more than happy to dive into and

33
00:01:25,110 --> 00:01:30,619
research all right

34
00:01:27,869 --> 00:01:32,759
so force and security boundaries

35
00:01:30,619 --> 00:01:34,560
security boundaries is a concept in

36
00:01:32,759 --> 00:01:36,930
Microsoft that's actually pretty pretty

37
00:01:34,560 --> 00:01:38,220
well defined to wear outside of

38
00:01:36,930 --> 00:01:40,290
something that might be a security

39
00:01:38,220 --> 00:01:42,420
feature like UAC to wear fixes or

40
00:01:40,290 --> 00:01:44,250
bypasses won't be serviced security

41
00:01:42,420 --> 00:01:46,110
boundaries are supposed to be serviced

42
00:01:44,250 --> 00:01:47,520
if there's some kind of violation the

43
00:01:46,110 --> 00:01:50,220
classic is going to be like local

44
00:01:47,520 --> 00:01:52,320
privilege escalation so four years in

45
00:01:50,220 --> 00:01:54,060
documentation Microsoft stone docs

46
00:01:52,320 --> 00:01:56,189
this is the water domain some forest

47
00:01:54,060 --> 00:01:58,500
Doc's they explicitly talk about forest

48
00:01:56,189 --> 00:02:00,210
as security boundaries to where all the

49
00:01:58,500 --> 00:02:01,740
objects from one forest if you

50
00:02:00,210 --> 00:02:03,509
compromise everything in forest day

51
00:02:01,740 --> 00:02:05,429
you're not supposed to be able to then

52
00:02:03,509 --> 00:02:08,788
use that access to compromise say

53
00:02:05,430 --> 00:02:12,140
something in another forest so there is

54
00:02:08,788 --> 00:02:13,799
some I think confusion about exactly

55
00:02:12,140 --> 00:02:15,480
even on the Microsoft

56
00:02:13,800 --> 00:02:17,370
about how they were going to treat

57
00:02:15,480 --> 00:02:18,660
forests as actual security boundaries

58
00:02:17,370 --> 00:02:19,980
and if this is going to be treated in

59
00:02:18,660 --> 00:02:22,049
the same way that they would for

60
00:02:19,980 --> 00:02:23,880
host-based local proves escalation and

61
00:02:22,050 --> 00:02:25,410
things like that but we're gonna explore

62
00:02:23,880 --> 00:02:27,630
this kind of in the journey and we're

63
00:02:25,410 --> 00:02:29,520
going to explain exactly why forests

64
00:02:27,630 --> 00:02:31,109
were thought of or function as security

65
00:02:29,520 --> 00:02:35,100
boundaries and how we violated some of

66
00:02:31,110 --> 00:02:37,560
those assumptions so this is kind of the

67
00:02:35,100 --> 00:02:40,560
general scenario is what if a computer

68
00:02:37,560 --> 00:02:42,750
in forest a authenticates to a computer

69
00:02:40,560 --> 00:02:44,970
and force B where there's a two-way

70
00:02:42,750 --> 00:02:48,200
force to forest trust in the terms of it

71
00:02:44,970 --> 00:02:50,490
and the realm of Active Directory and

72
00:02:48,200 --> 00:02:52,940
what if full ticket granting ticket

73
00:02:50,490 --> 00:02:55,560
stege ETS could move across the trust

74
00:02:52,940 --> 00:02:58,770
boundary between forest a and force B

75
00:02:55,560 --> 00:03:01,200
and what if we had a way to easily

76
00:02:58,770 --> 00:03:04,290
extract and reuse these ticket granting

77
00:03:01,200 --> 00:03:05,970
ticket sand the forests we control bonus

78
00:03:04,290 --> 00:03:07,679
points if we can force the

79
00:03:05,970 --> 00:03:09,390
authentication steps instead of just

80
00:03:07,680 --> 00:03:11,580
waiting where we are what if we could

81
00:03:09,390 --> 00:03:13,320
coerce a domain controller or another

82
00:03:11,580 --> 00:03:15,660
system to then authenticate to us on a

83
00:03:13,320 --> 00:03:16,920
capture target this is essentially the

84
00:03:15,660 --> 00:03:18,570
mad recipe that we're going to go over

85
00:03:16,920 --> 00:03:21,359
that has to do with unconstrained

86
00:03:18,570 --> 00:03:23,190
delegation delegation T GTS flowing over

87
00:03:21,360 --> 00:03:25,170
trust boundaries and specific types of

88
00:03:23,190 --> 00:03:26,340
waves of or specific trust and we're

89
00:03:25,170 --> 00:03:27,988
going to wrap everything up with the

90
00:03:26,340 --> 00:03:29,370
printer bug that we talked about orally

91
00:03:27,989 --> 00:03:33,690
talked about last year and we're on

92
00:03:29,370 --> 00:03:36,390
stage but first we have to explain

93
00:03:33,690 --> 00:03:39,840
Kerberos in 60 seconds or maybe a couple

94
00:03:36,390 --> 00:03:41,429
of minutes so that there's no way that

95
00:03:39,840 --> 00:03:43,620
we can go into the detail that we really

96
00:03:41,430 --> 00:03:45,900
want to to explain all of Kerberos you

97
00:03:43,620 --> 00:03:47,160
know it's not that complex really wink

98
00:03:45,900 --> 00:03:49,830
wink

99
00:03:47,160 --> 00:03:51,540
but it's a dense topic well we're just

100
00:03:49,830 --> 00:03:53,540
gonna rush through it really quick we do

101
00:03:51,540 --> 00:03:56,010
highly recommend Sean Metcalfe's post

102
00:03:53,540 --> 00:03:58,470
online it goes into very good detail

103
00:03:56,010 --> 00:04:02,100
about how Kerberos works so that's there

104
00:03:58,470 --> 00:04:04,920
for reference when you log on to a

105
00:04:02,100 --> 00:04:07,079
computer the very first thing that you

106
00:04:04,920 --> 00:04:09,720
do is you send essentially you take a

107
00:04:07,080 --> 00:04:12,810
time spin you time you take a time stamp

108
00:04:09,720 --> 00:04:14,400
and you encrypt it with the with a hash

109
00:04:12,810 --> 00:04:16,560
that's associated with your password

110
00:04:14,400 --> 00:04:18,149
password you send that timestamp to the

111
00:04:16,560 --> 00:04:20,298
domain controller and it validates that

112
00:04:18,149 --> 00:04:23,609
it was encrypted with your password

113
00:04:20,298 --> 00:04:26,310
assuming that the timestamp was

114
00:04:23,610 --> 00:04:27,730
correctly encrypted the domain

115
00:04:26,310 --> 00:04:29,470
controller is going to return to

116
00:04:27,730 --> 00:04:32,590
you what's called a ticket granting

117
00:04:29,470 --> 00:04:35,080
ticket once you have this ticket this is

118
00:04:32,590 --> 00:04:38,200
proof that you've been authenticated it

119
00:04:35,080 --> 00:04:39,640
within the domain this this ticket also

120
00:04:38,200 --> 00:04:42,340
contains something inside of it called

121
00:04:39,640 --> 00:04:44,530
the PAC which is essentially a piece of

122
00:04:42,340 --> 00:04:47,020
information that identifies you so it

123
00:04:44,530 --> 00:04:49,299
has a your unique identifier and the

124
00:04:47,020 --> 00:04:51,039
unique identifier of all the groups that

125
00:04:49,300 --> 00:04:53,170
you're a part of within the domain these

126
00:04:51,040 --> 00:04:58,330
are your SIDS your group SIDS and your

127
00:04:53,170 --> 00:05:01,180
user SID this pack you know you may be

128
00:04:58,330 --> 00:05:02,560
thinking in your head I have it this TGT

129
00:05:01,180 --> 00:05:04,450
was sent back to me from the domain

130
00:05:02,560 --> 00:05:06,640
controller why can't I just modify it

131
00:05:04,450 --> 00:05:08,289
and claim I'm anybody and in the

132
00:05:06,640 --> 00:05:10,539
environment well the reason why you

133
00:05:08,290 --> 00:05:13,540
can't is because it's encrypted

134
00:05:10,540 --> 00:05:15,130
using the krbtgt accounts password hash

135
00:05:13,540 --> 00:05:17,740
which is only present on domain

136
00:05:15,130 --> 00:05:20,350
controllers so you know an attacker with

137
00:05:17,740 --> 00:05:21,940
access to a TGT cannot just you know

138
00:05:20,350 --> 00:05:24,610
decrypt it and start tampering with

139
00:05:21,940 --> 00:05:27,490
these SIDS the user said and the group

140
00:05:24,610 --> 00:05:29,770
says because they're encrypted with that

141
00:05:27,490 --> 00:05:32,830
TGT account which will need the domain

142
00:05:29,770 --> 00:05:34,359
controller has so you have this TGT and

143
00:05:32,830 --> 00:05:37,750
now you want to access another resource

144
00:05:34,360 --> 00:05:39,370
in the environment so what we do is we

145
00:05:37,750 --> 00:05:42,310
issue what's called a service ticket

146
00:05:39,370 --> 00:05:44,170
request we present our TGT to the domain

147
00:05:42,310 --> 00:05:47,860
controller saying hey I would like to

148
00:05:44,170 --> 00:05:53,170
access some service so let's say like a

149
00:05:47,860 --> 00:05:54,700
file share we present the TGT to the

150
00:05:53,170 --> 00:05:58,390
domain controller it validates that it's

151
00:05:54,700 --> 00:06:01,420
correct and if it is correct it returns

152
00:05:58,390 --> 00:06:04,030
to us a service ticket and then we use

153
00:06:01,420 --> 00:06:05,950
that service ticket to authenticate to

154
00:06:04,030 --> 00:06:09,309
whatever service we present it to the

155
00:06:05,950 --> 00:06:11,200
service it also contains a pack that you

156
00:06:09,310 --> 00:06:13,420
know that structure that identifies us

157
00:06:11,200 --> 00:06:15,700
and so we present that to the service

158
00:06:13,420 --> 00:06:18,160
and it looks at who we are the groups

159
00:06:15,700 --> 00:06:20,770
were a part of and depending on you know

160
00:06:18,160 --> 00:06:23,020
if we're authorized or not like do we

161
00:06:20,770 --> 00:06:27,210
have access to this file share it'll

162
00:06:23,020 --> 00:06:27,210
grant or deny us access to that service

163
00:06:27,240 --> 00:06:33,300
there you go you're all experts just as

164
00:06:29,770 --> 00:06:37,690
smart as us yay I wish it was that easy

165
00:06:33,300 --> 00:06:40,510
this is a slightly lied it's not quite

166
00:06:37,690 --> 00:06:41,230
that easy it's there's a few extra steps

167
00:06:40,510 --> 00:06:43,840
especially

168
00:06:41,230 --> 00:06:45,940
we start talking about inter domain or

169
00:06:43,840 --> 00:06:48,760
multiple domains and and forest trusts

170
00:06:45,940 --> 00:06:50,530
in particular so this is another way of

171
00:06:48,760 --> 00:06:53,380
looking at it you know step one here

172
00:06:50,530 --> 00:06:55,059
we're talking about using the you know

173
00:06:53,380 --> 00:06:57,730
that's when we send the timestamp to the

174
00:06:55,060 --> 00:07:00,730
domain controller step two it returns

175
00:06:57,730 --> 00:07:02,950
our TGT step three though is when we're

176
00:07:00,730 --> 00:07:05,620
trying to authenticate to a service in

177
00:07:02,950 --> 00:07:08,110
another domain a different process

178
00:07:05,620 --> 00:07:09,970
occurs here we say hey we want to access

179
00:07:08,110 --> 00:07:11,890
this file share that's in a different

180
00:07:09,970 --> 00:07:13,900
domain and rather than returning a

181
00:07:11,890 --> 00:07:17,890
service ticket immediately our domain

182
00:07:13,900 --> 00:07:20,560
controller returns a referral TGT that

183
00:07:17,890 --> 00:07:22,780
referral TGT is encrypted with an inter

184
00:07:20,560 --> 00:07:24,520
realm trust key so when a trust gets

185
00:07:22,780 --> 00:07:27,580
established that key is generated and

186
00:07:24,520 --> 00:07:30,549
then we receive a TGT that's encrypted

187
00:07:27,580 --> 00:07:33,340
with that and we present that TGT to the

188
00:07:30,550 --> 00:07:35,290
other domains domain controller saying

189
00:07:33,340 --> 00:07:37,179
hey we want to access the service in

190
00:07:35,290 --> 00:07:39,940
your domain and then that domain

191
00:07:37,180 --> 00:07:42,370
controller returns a service ticket for

192
00:07:39,940 --> 00:07:44,700
that file share so a little more

193
00:07:42,370 --> 00:07:48,370
complicated but not too bad

194
00:07:44,700 --> 00:07:50,950
there we go you're experts now right so

195
00:07:48,370 --> 00:07:52,900
that's the Kerberos 101 there's a second

196
00:07:50,950 --> 00:07:55,479
part in Active Directory that's a really

197
00:07:52,900 --> 00:07:57,820
useful or needed thing in a lot of

198
00:07:55,480 --> 00:07:59,770
operations called delegation meaning

199
00:07:57,820 --> 00:08:01,840
when you need to pretend to be another

200
00:07:59,770 --> 00:08:04,960
user impersonate them to a different

201
00:08:01,840 --> 00:08:09,159
service for example the canonical

202
00:08:04,960 --> 00:08:11,020
example is when a you say a web

203
00:08:09,160 --> 00:08:14,050
application and that web application

204
00:08:11,020 --> 00:08:16,560
needs to impersonate or pretend to be

205
00:08:14,050 --> 00:08:19,150
that person to say a back-end database

206
00:08:16,560 --> 00:08:20,890
so this is a common scenario that arises

207
00:08:19,150 --> 00:08:22,599
in enterprises and arises in these

208
00:08:20,890 --> 00:08:24,430
architectures because we've talked to

209
00:08:22,600 --> 00:08:26,440
some people know why is delegation even

210
00:08:24,430 --> 00:08:28,210
enabled Nady just for the same reason

211
00:08:26,440 --> 00:08:30,040
you can do token impersonation on hosts

212
00:08:28,210 --> 00:08:31,780
like this is a needed primitive where

213
00:08:30,040 --> 00:08:34,120
certain services need to be able to

214
00:08:31,780 --> 00:08:37,839
impersonate and pretend to be other

215
00:08:34,120 --> 00:08:40,450
users to a different service ok the way

216
00:08:37,840 --> 00:08:41,140
Microsoft implemented this is three

217
00:08:40,450 --> 00:08:42,760
different flavors

218
00:08:41,140 --> 00:08:44,560
there's unconstrained delegation

219
00:08:42,760 --> 00:08:46,200
traditional constrained delegation and

220
00:08:44,560 --> 00:08:48,189
resource based constrained delegation

221
00:08:46,200 --> 00:08:50,170
unconstrained was their first take edit

222
00:08:48,190 --> 00:08:53,500
it's been in Microsoft Active Directory

223
00:08:50,170 --> 00:08:54,790
since Windows 2000 or a 2000 domain

224
00:08:53,500 --> 00:08:56,770
functional level

225
00:08:54,790 --> 00:08:58,510
shanell constrain was in 2003 and

226
00:08:56,770 --> 00:09:01,540
resource base constrain delegation was

227
00:08:58,510 --> 00:09:03,730
in 2012 all three of these delegation

228
00:09:01,540 --> 00:09:05,319
types have different attacks or not

229
00:09:03,730 --> 00:09:06,790
vulnerabilities but different kind of

230
00:09:05,320 --> 00:09:07,480
operational attacks that are associated

231
00:09:06,790 --> 00:09:09,130
with them

232
00:09:07,480 --> 00:09:10,420
we're not going to cover the constrained

233
00:09:09,130 --> 00:09:12,460
and resource-based constrained though

234
00:09:10,420 --> 00:09:14,829
they are quite interesting we're only

235
00:09:12,460 --> 00:09:16,120
going to hit unconstrained where if you

236
00:09:14,830 --> 00:09:18,250
have a server configured for

237
00:09:16,120 --> 00:09:20,170
unconstrained delegation then when a

238
00:09:18,250 --> 00:09:22,420
user requests a service ticket for it

239
00:09:20,170 --> 00:09:23,949
they have a forwarded version of their

240
00:09:22,420 --> 00:09:25,449
ticket granting ticket that's stuffed

241
00:09:23,950 --> 00:09:28,660
into the request and presented to the

242
00:09:25,450 --> 00:09:30,910
target this means that if an attacker

243
00:09:28,660 --> 00:09:32,890
controls a server with unconstrained

244
00:09:30,910 --> 00:09:35,860
delegation than anyone that

245
00:09:32,890 --> 00:09:37,600
authenticates to it their TGT will be

246
00:09:35,860 --> 00:09:39,790
cached in memory on that unconstrained

247
00:09:37,600 --> 00:09:42,700
server and you can extract it out and

248
00:09:39,790 --> 00:09:46,900
pretend to be that person so this is

249
00:09:42,700 --> 00:09:48,670
dangerous because control of an

250
00:09:46,900 --> 00:09:50,380
unconstrained server along with a couple

251
00:09:48,670 --> 00:09:53,430
other primitives can result in complete

252
00:09:50,380 --> 00:09:55,930
domain or forest compromised

253
00:09:53,430 --> 00:09:57,489
Microsoft knew that this was like

254
00:09:55,930 --> 00:09:59,650
unconstrained delegation it's needed

255
00:09:57,490 --> 00:10:01,180
just on domain controllers by default

256
00:09:59,650 --> 00:10:03,069
within the domain so there's always at

257
00:10:01,180 --> 00:10:05,290
least one system you know in a domain

258
00:10:03,070 --> 00:10:06,880
that has this but we've seen many times

259
00:10:05,290 --> 00:10:08,589
where people had like provisioning

260
00:10:06,880 --> 00:10:10,210
problems or they just didn't realize

261
00:10:08,590 --> 00:10:11,440
like oh all workstations of these

262
00:10:10,210 --> 00:10:13,450
servers all have unconstrained

263
00:10:11,440 --> 00:10:15,430
delegation because there weren't fully

264
00:10:13,450 --> 00:10:17,530
weaponized attack chains until this past

265
00:10:15,430 --> 00:10:19,500
year that actually let you abuse this in

266
00:10:17,530 --> 00:10:22,589
a really really effective way but again

267
00:10:19,500 --> 00:10:25,390
compromised them an unconstrained server

268
00:10:22,590 --> 00:10:27,070
you can extract out the TGT of anyone

269
00:10:25,390 --> 00:10:27,520
that connects to it it's kind of like a

270
00:10:27,070 --> 00:10:31,750
waterhole

271
00:10:27,520 --> 00:10:33,819
you know titan type type of attack and

272
00:10:31,750 --> 00:10:35,530
again we can mention DCs are the only

273
00:10:33,820 --> 00:10:37,360
ones configure by default for this but

274
00:10:35,530 --> 00:10:39,790
there are often miss configurations you

275
00:10:37,360 --> 00:10:41,890
can see in the field for this we've been

276
00:10:39,790 --> 00:10:43,719
in environments where we've seen every

277
00:10:41,890 --> 00:10:45,130
single computer for whatever reason

278
00:10:43,720 --> 00:10:47,800
being granted on constrained delegation

279
00:10:45,130 --> 00:10:50,410
rates so we've been able to use this to

280
00:10:47,800 --> 00:10:52,900
elevate just from a normal workstation

281
00:10:50,410 --> 00:10:54,370
and we talked about this combined with

282
00:10:52,900 --> 00:10:56,110
the printer bug which we'll go over like

283
00:10:54,370 --> 00:10:58,630
we talked about last year we realized

284
00:10:56,110 --> 00:11:01,300
that control of a unconstrained server

285
00:10:58,630 --> 00:11:03,610
can result in a compromise of the entire

286
00:11:01,300 --> 00:11:05,709
domain but then we started researching

287
00:11:03,610 --> 00:11:08,430
this a bit more in Dovan and realize

288
00:11:05,710 --> 00:11:11,640
there's implications for forest raus

289
00:11:08,430 --> 00:11:13,349
well and this is just kind of what it

290
00:11:11,640 --> 00:11:14,699
like looks like from like an ldap

291
00:11:13,350 --> 00:11:16,589
property type level you can really

292
00:11:14,700 --> 00:11:18,630
easily enumerate any systems that have

293
00:11:16,589 --> 00:11:19,920
unconstrained delegation it's just a bit

294
00:11:18,630 --> 00:11:22,680
flag in the user account control

295
00:11:19,920 --> 00:11:26,189
settings for any computer object it's

296
00:11:22,680 --> 00:11:27,630
also very very difficult to flip this

297
00:11:26,190 --> 00:11:29,370
bit like if you have control of your own

298
00:11:27,630 --> 00:11:30,630
object you can't just go in and flip it

299
00:11:29,370 --> 00:11:32,850
and something I'll take over the domain

300
00:11:30,630 --> 00:11:34,680
there's a very special privilege that by

301
00:11:32,850 --> 00:11:37,020
default only domain administrators have

302
00:11:34,680 --> 00:11:39,209
and that privilege is needed SSA enable

303
00:11:37,020 --> 00:11:41,699
delegation is needed to modify any

304
00:11:39,209 --> 00:11:44,010
delegation settings in Active Directory

305
00:11:41,700 --> 00:11:46,080
objects because modification of any

306
00:11:44,010 --> 00:11:48,149
delegation stuff could result in

307
00:11:46,080 --> 00:11:50,040
complete domain compromise let's say

308
00:11:48,149 --> 00:11:53,100
we're on you know this primary machine

309
00:11:50,040 --> 00:11:55,890
is trusted for delegation unconstrained

310
00:11:53,100 --> 00:11:57,510
and say someone who's a da just like

311
00:11:55,890 --> 00:11:59,580
list the file share on that remote

312
00:11:57,510 --> 00:12:02,760
server and their full ticket granting

313
00:11:59,580 --> 00:12:04,350
ticket is going to be ATS for at least a

314
00:12:02,760 --> 00:12:08,370
period of time will be in memory on that

315
00:12:04,350 --> 00:12:10,500
primary system cool alright that's the

316
00:12:08,370 --> 00:12:13,920
second part Kerberos and then delegation

317
00:12:10,500 --> 00:12:16,620
now we're gonna hit trusts so domain

318
00:12:13,920 --> 00:12:19,199
trusts what are they

319
00:12:16,620 --> 00:12:23,370
so trusts all they are is they are a way

320
00:12:19,200 --> 00:12:25,320
for them to link authentication systems

321
00:12:23,370 --> 00:12:27,360
in Active Directory so you may have

322
00:12:25,320 --> 00:12:29,370
several different domains and all the

323
00:12:27,360 --> 00:12:31,170
trust does is it allows you to link

324
00:12:29,370 --> 00:12:34,110
those two domains together

325
00:12:31,170 --> 00:12:36,779
so essentially users from domain a can

326
00:12:34,110 --> 00:12:40,170
now authenticate to resources in domain

327
00:12:36,779 --> 00:12:43,680
B there's various different kinds of

328
00:12:40,170 --> 00:12:46,770
trusts and how this you know how this

329
00:12:43,680 --> 00:12:50,250
how a trust actually works underneath is

330
00:12:46,770 --> 00:12:51,990
when the trust gets created there's this

331
00:12:50,250 --> 00:12:55,800
thing called an inter realm trust key

332
00:12:51,990 --> 00:12:58,020
that's that's created and that's used to

333
00:12:55,800 --> 00:13:01,079
encrypt the Kerberos referral tickets

334
00:12:58,020 --> 00:13:02,760
that are you know that are created so

335
00:13:01,079 --> 00:13:04,979
essentially I'm trying to access a

336
00:13:02,760 --> 00:13:06,510
resource in another domain I'm going to

337
00:13:04,980 --> 00:13:08,370
say hey domain controller I want to

338
00:13:06,510 --> 00:13:10,500
access you know the file share over in

339
00:13:08,370 --> 00:13:13,200
Wills domain and it's gonna send me a

340
00:13:10,500 --> 00:13:15,560
TGT encrypted with that inter realm

341
00:13:13,200 --> 00:13:19,290
trust key and then I'm gonna use that

342
00:13:15,560 --> 00:13:22,589
referral TGT and send it to Wills domain

343
00:13:19,290 --> 00:13:24,939
and he'll return a service to get to me

344
00:13:22,590 --> 00:13:26,740
so that's that's essentially the

345
00:13:24,940 --> 00:13:29,080
referral process that occurs whenever

346
00:13:26,740 --> 00:13:34,120
there's trust this only occurs when it's

347
00:13:29,080 --> 00:13:35,920
going between separate domains when it

348
00:13:34,120 --> 00:13:37,270
comes to trust there's this constant

349
00:13:35,920 --> 00:13:40,209
there's a couple different concepts that

350
00:13:37,270 --> 00:13:42,100
we want to talk about the first is the

351
00:13:40,210 --> 00:13:46,090
direction of the trust and transitivity

352
00:13:42,100 --> 00:13:47,860
so there's the first one that we'll talk

353
00:13:46,090 --> 00:13:50,110
about is a one-way trust so this is just

354
00:13:47,860 --> 00:13:53,500
saying you know I have a domain we'll

355
00:13:50,110 --> 00:13:55,780
has a domain and I say I trust will that

356
00:13:53,500 --> 00:13:57,700
means any users and Will's domain can

357
00:13:55,780 --> 00:14:00,699
you know authenticate into my domain

358
00:13:57,700 --> 00:14:02,890
because I trust him likewise trust can

359
00:14:00,700 --> 00:14:05,140
be bi-directional or two-way that means

360
00:14:02,890 --> 00:14:06,819
you know I trust him and he trusts me

361
00:14:05,140 --> 00:14:08,439
therefore the users in my domain can

362
00:14:06,820 --> 00:14:11,680
authenticate to resources in his domain

363
00:14:08,440 --> 00:14:13,540
and vice versa then there's the idea of

364
00:14:11,680 --> 00:14:15,069
a transitive trust so you know there's

365
00:14:13,540 --> 00:14:16,120
me there's will and then there's another

366
00:14:15,070 --> 00:14:18,370
domain over there

367
00:14:16,120 --> 00:14:21,760
well since if I trust will and will

368
00:14:18,370 --> 00:14:24,850
trust that domain then by transit by

369
00:14:21,760 --> 00:14:30,340
transitivity that domain trusts me

370
00:14:24,850 --> 00:14:33,360
so that's transitivity in addition to

371
00:14:30,340 --> 00:14:36,700
direction and transitivity transitivity

372
00:14:33,360 --> 00:14:39,640
there's different kinds of trusts

373
00:14:36,700 --> 00:14:42,730
so there's intro forest trusts which are

374
00:14:39,640 --> 00:14:45,340
typically like parent-child or cross

375
00:14:42,730 --> 00:14:47,110
link and then there's the inter domain

376
00:14:45,340 --> 00:14:49,420
trust so if you have two different

377
00:14:47,110 --> 00:14:51,100
Active Directory forests and you want to

378
00:14:49,420 --> 00:14:53,910
link them together let's link them

379
00:14:51,100 --> 00:14:56,260
together you'll set up a forest trust

380
00:14:53,910 --> 00:14:59,620
likewise you could also have an external

381
00:14:56,260 --> 00:15:01,180
trust creating their and that the thing

382
00:14:59,620 --> 00:15:03,100
about you know with external trust they

383
00:15:01,180 --> 00:15:11,020
are non transitive so you can't just

384
00:15:03,100 --> 00:15:14,080
immediately access into them so recall

385
00:15:11,020 --> 00:15:16,840
that when we receive a TGT from a domain

386
00:15:14,080 --> 00:15:20,320
controller inside of that TGT is a

387
00:15:16,840 --> 00:15:24,640
structure called the pack the privileged

388
00:15:20,320 --> 00:15:26,140
account or what is it attribute yeah

389
00:15:24,640 --> 00:15:27,180
privileged that should be certificates

390
00:15:26,140 --> 00:15:29,290
pack yeah there we go

391
00:15:27,180 --> 00:15:31,870
what this actually looks like on the

392
00:15:29,290 --> 00:15:33,640
inside is there's a few different fields

393
00:15:31,870 --> 00:15:35,650
that were really interested in so like

394
00:15:33,640 --> 00:15:38,740
the very first one is the user

395
00:15:35,650 --> 00:15:41,079
that's identifies who we are within the

396
00:15:38,740 --> 00:15:43,120
domain it also contains the groups that

397
00:15:41,080 --> 00:15:44,740
were a part of those are the SIDS of

398
00:15:43,120 --> 00:15:47,020
each of the groups and then maybe the

399
00:15:44,740 --> 00:15:50,050
extra says and this is you know if we're

400
00:15:47,020 --> 00:15:52,150
attenti cating to enemy remote domains

401
00:15:50,050 --> 00:15:54,760
this is going to be any you know

402
00:15:52,150 --> 00:15:58,089
potentially in the extra SIDS it's also

403
00:15:54,760 --> 00:16:00,010
used in sid history and so idea of being

404
00:15:58,089 --> 00:16:01,900
here you know this is how we are

405
00:16:00,010 --> 00:16:05,380
identified with in active directory

406
00:16:01,900 --> 00:16:09,640
using Kerberos this identifies us and

407
00:16:05,380 --> 00:16:11,740
our privileges as a user why this is

408
00:16:09,640 --> 00:16:14,640
important and why all these SIDS that we

409
00:16:11,740 --> 00:16:17,920
mentioned here are important is because

410
00:16:14,640 --> 00:16:20,529
when it comes to setting up trusts

411
00:16:17,920 --> 00:16:23,439
there's a protection that Active

412
00:16:20,529 --> 00:16:25,210
Directory has called CID filtering so

413
00:16:23,440 --> 00:16:29,260
whenever you authenticate to another

414
00:16:25,210 --> 00:16:31,420
domain this CID filtering process occurs

415
00:16:29,260 --> 00:16:33,730
essentially when we try not fennec eight

416
00:16:31,420 --> 00:16:38,529
to another domain the other domain looks

417
00:16:33,730 --> 00:16:40,660
at the SIDS inside of our pack and will

418
00:16:38,529 --> 00:16:42,580
potentially remove some of those sits

419
00:16:40,660 --> 00:16:45,279
before granting us access into the

420
00:16:42,580 --> 00:16:47,560
domain and which SIDS get removed

421
00:16:45,279 --> 00:16:51,730
depends on the type of trust that's

422
00:16:47,560 --> 00:16:54,729
created so inside of a domain the SIDS

423
00:16:51,730 --> 00:16:57,970
are filtered differently than if there's

424
00:16:54,730 --> 00:16:59,830
a forest trust so the type of filtering

425
00:16:57,970 --> 00:17:03,279
is gonna change depending on the type of

426
00:16:59,830 --> 00:17:05,350
trust and so a good example of this is

427
00:17:03,279 --> 00:17:07,660
you know let's say I have my own forest

428
00:17:05,349 --> 00:17:10,030
and Will has his own forest if I try and

429
00:17:07,660 --> 00:17:14,170
authenticate into wills forest you know

430
00:17:10,030 --> 00:17:15,730
I could claim that I have SIDS from like

431
00:17:14,170 --> 00:17:18,280
maybe the I Enterprise administrators

432
00:17:15,730 --> 00:17:19,929
group for wills forest but when I try

433
00:17:18,280 --> 00:17:21,939
and authenticate over there

434
00:17:19,929 --> 00:17:24,400
Sid filtering is going to remove the

435
00:17:21,939 --> 00:17:26,589
enterprise admin SID from my group SIDS

436
00:17:24,400 --> 00:17:29,590
or my extra TSA's and that's due to this

437
00:17:26,589 --> 00:17:31,450
Sid filtering protection that's inside

438
00:17:29,590 --> 00:17:33,189
of Active Directory

439
00:17:31,450 --> 00:17:35,020
that being said like you can still

440
00:17:33,190 --> 00:17:38,170
pretend to be any I could pretend to be

441
00:17:35,020 --> 00:17:40,120
any user inside of my current domain I

442
00:17:38,170 --> 00:17:41,890
mean if those users have been granted

443
00:17:40,120 --> 00:17:43,389
access to resources and wills domain you

444
00:17:41,890 --> 00:17:46,270
know yeah I could potentially escalate

445
00:17:43,390 --> 00:17:48,190
privileges but I can't instantly become

446
00:17:46,270 --> 00:17:48,990
an enterprise administrator because that

447
00:17:48,190 --> 00:17:51,179
is SID

448
00:17:48,990 --> 00:17:54,929
is filtered when we crossed that forest

449
00:17:51,179 --> 00:17:59,010
trust so that's why when we're talking

450
00:17:54,929 --> 00:18:02,010
about you know what is the the boundary

451
00:17:59,010 --> 00:18:05,010
the inside of Active Directory the

452
00:18:02,010 --> 00:18:07,080
reason why the forest is the security

453
00:18:05,010 --> 00:18:10,260
boundary is due to this CID filtering

454
00:18:07,080 --> 00:18:12,590
it's gonna remove any of those SIDS when

455
00:18:10,260 --> 00:18:15,330
we go into a you know a different domain

456
00:18:12,590 --> 00:18:18,030
a really good overview of CID filtering

457
00:18:15,330 --> 00:18:19,379
Dirk Young has a really good link down

458
00:18:18,030 --> 00:18:22,500
there at the bottom if you're interested

459
00:18:19,380 --> 00:18:26,610
in what actually looks like like we said

460
00:18:22,500 --> 00:18:29,730
the ultimately CID filtering across Russ

461
00:18:26,610 --> 00:18:32,040
trusts is to stop a compromised you know

462
00:18:29,730 --> 00:18:35,309
trusted forest or domain from

463
00:18:32,040 --> 00:18:36,899
compromising a trusting forest so what

464
00:18:35,309 --> 00:18:39,750
do we mean by that you know we'll may

465
00:18:36,900 --> 00:18:42,840
trust me there may be a trust between us

466
00:18:39,750 --> 00:18:46,890
but if I'm compromised if my domain is

467
00:18:42,840 --> 00:18:48,330
compromised Sid filtering should the key

468
00:18:46,890 --> 00:18:50,700
word is should there should prevent me

469
00:18:48,330 --> 00:18:53,040
from immediately compromising his domain

470
00:18:50,700 --> 00:18:56,690
and that's why again that's why it's the

471
00:18:53,040 --> 00:18:56,690
boundary inside of Active Directory

472
00:18:57,350 --> 00:19:02,340
alright so for a long time

473
00:18:59,820 --> 00:19:05,129
Microsoft has explicitly stated and told

474
00:19:02,340 --> 00:19:07,919
anybody that the domain itself is not a

475
00:19:05,130 --> 00:19:09,870
security boundary the reason it's not a

476
00:19:07,920 --> 00:19:12,030
security boundary is because of how Sid

477
00:19:09,870 --> 00:19:15,689
filtering is applied for domains within

478
00:19:12,030 --> 00:19:17,160
the same forest this is a screenshot of

479
00:19:15,690 --> 00:19:19,650
some of the SID filtering rules that we

480
00:19:17,160 --> 00:19:22,260
had linked and there is a specific one

481
00:19:19,650 --> 00:19:24,000
called for specific where SIDS are never

482
00:19:22,260 --> 00:19:27,170
allowed in a pact that originated from

483
00:19:24,000 --> 00:19:30,600
outside of the forest but they are

484
00:19:27,170 --> 00:19:32,429
honored within the same forest so if you

485
00:19:30,600 --> 00:19:36,300
have domain a B and C within the same

486
00:19:32,429 --> 00:19:38,760
forest then the enterprise admin SID is

487
00:19:36,300 --> 00:19:40,020
allowed to cross those boundaries as

488
00:19:38,760 --> 00:19:43,410
long as the domains are in the same

489
00:19:40,020 --> 00:19:45,720
forest so this seems like a weird nitty

490
00:19:43,410 --> 00:19:46,740
gritty subtle type thing but the reason

491
00:19:45,720 --> 00:19:50,100
that this is awesome

492
00:19:46,740 --> 00:19:52,290
is a couple years ago Shawn Metcalfe and

493
00:19:50,100 --> 00:19:53,399
Delpy realized the implications of these

494
00:19:52,290 --> 00:19:55,290
types of things which are cover in a

495
00:19:53,400 --> 00:19:57,660
second but again city of enterprise

496
00:19:55,290 --> 00:19:59,399
admins not filtered out by default for

497
00:19:57,660 --> 00:20:02,370
inter um tickets at both domains are in

498
00:19:59,400 --> 00:20:05,010
the same forest so it

499
00:20:02,370 --> 00:20:07,169
you can somehow set either your Sid

500
00:20:05,010 --> 00:20:09,180
history which is a property on Active

501
00:20:07,170 --> 00:20:10,950
Directory users that allowed for like

502
00:20:09,180 --> 00:20:13,170
different migrations and stuff but if

503
00:20:10,950 --> 00:20:15,120
you can set the sid history the extra

504
00:20:13,170 --> 00:20:17,160
SIDS in a ticket to somehow be

505
00:20:15,120 --> 00:20:19,800
enterprise admins in your in a child

506
00:20:17,160 --> 00:20:21,630
domain you can instantly compromise the

507
00:20:19,800 --> 00:20:26,309
forest route and everything in the same

508
00:20:21,630 --> 00:20:28,320
forest and this is exactly what Delpy

509
00:20:26,309 --> 00:20:29,850
and sean figured out and weaponized so

510
00:20:28,320 --> 00:20:31,200
for a long time people knew this is a

511
00:20:29,850 --> 00:20:33,149
vulnerability because if you could

512
00:20:31,200 --> 00:20:34,830
somehow modify that property on an

513
00:20:33,150 --> 00:20:37,140
object and child domain you could have

514
00:20:34,830 --> 00:20:38,610
complete forest compromised but there

515
00:20:37,140 --> 00:20:41,250
wasn't weaponization for it really

516
00:20:38,610 --> 00:20:43,949
because it's very very difficult to

517
00:20:41,250 --> 00:20:45,960
modify the sid history on any active

518
00:20:43,950 --> 00:20:49,260
user or group in an Active Directory

519
00:20:45,960 --> 00:20:50,850
domain database until Delpy realized and

520
00:20:49,260 --> 00:20:52,679
Sean like oh if you're creating golden

521
00:20:50,850 --> 00:20:54,439
tickets why don't we just add this extra

522
00:20:52,679 --> 00:20:57,240
Sid and then we can hop up immediately

523
00:20:54,440 --> 00:21:00,360
we have a obligatory like don't be

524
00:20:57,240 --> 00:21:02,160
jumping in right so when I first learned

525
00:21:00,360 --> 00:21:03,449
about this attack it kind of blew my

526
00:21:02,160 --> 00:21:04,800
mind I've been doing a lot of trust

527
00:21:03,450 --> 00:21:07,500
stuff this happened several years ago

528
00:21:04,800 --> 00:21:09,030
and it allows us to where if you

529
00:21:07,500 --> 00:21:11,370
compromised domain administrator

530
00:21:09,030 --> 00:21:12,840
credentials for any child domain in the

531
00:21:11,370 --> 00:21:14,189
forest for five minutes you can then

532
00:21:12,840 --> 00:21:18,809
compromise everything in the entire

533
00:21:14,190 --> 00:21:20,880
forest but sin filtering for sensitive

534
00:21:18,809 --> 00:21:23,370
groups does protect acrost

535
00:21:20,880 --> 00:21:26,070
forest trust boundaries this is why

536
00:21:23,370 --> 00:21:29,639
forests were established as a security

537
00:21:26,070 --> 00:21:31,500
boundary at least as far as we can tell

538
00:21:29,640 --> 00:21:35,010
obviously you know we're not from

539
00:21:31,500 --> 00:21:36,690
Microsoft so but there's a couple more

540
00:21:35,010 --> 00:21:37,980
site notes so now that's most kind of

541
00:21:36,690 --> 00:21:39,240
some of the technical backgrounds

542
00:21:37,980 --> 00:21:41,130
there's a couple of side notes we

543
00:21:39,240 --> 00:21:42,800
noticed in documentation that let us

544
00:21:41,130 --> 00:21:45,630
start putting this cool attack together

545
00:21:42,800 --> 00:21:47,669
the first one is that when you're

546
00:21:45,630 --> 00:21:50,730
authenticating from forest a to 4sb

547
00:21:47,670 --> 00:21:53,309
you always receive a new identifier

548
00:21:50,730 --> 00:21:55,050
called authenticated users in your new

549
00:21:53,309 --> 00:21:56,520
token when you're authenticating against

550
00:21:55,050 --> 00:21:58,860
the other forest so if Lee's and his

551
00:21:56,520 --> 00:22:00,480
forest and authenticates and gets a

552
00:21:58,860 --> 00:22:01,979
referral to mine he's gonna

553
00:22:00,480 --> 00:22:04,140
automatically get the authenticated

554
00:22:01,980 --> 00:22:06,809
users SID for my forest put into his

555
00:22:04,140 --> 00:22:09,960
referral this is important or it comes

556
00:22:06,809 --> 00:22:12,330
into play later on so any user in either

557
00:22:09,960 --> 00:22:14,180
trust can perform any action that domain

558
00:22:12,330 --> 00:22:16,340
authenticated users can

559
00:22:14,180 --> 00:22:19,400
for example query an LDAP or doom

560
00:22:16,340 --> 00:22:21,020
whatever else and also side note on

561
00:22:19,400 --> 00:22:22,970
delegation and Trust this is until

562
00:22:21,020 --> 00:22:26,420
recently until a couple months ago is

563
00:22:22,970 --> 00:22:28,580
that when full delegation is enabled the

564
00:22:26,420 --> 00:22:30,170
server can use delegated T GTS to

565
00:22:28,580 --> 00:22:32,360
connect as any user to any server

566
00:22:30,170 --> 00:22:35,090
including those across a one-way trust

567
00:22:32,360 --> 00:22:37,550
so what this means is that delegated

568
00:22:35,090 --> 00:22:41,570
ticket granting ticket could flow across

569
00:22:37,550 --> 00:22:42,860
trust boundaries so like why should you

570
00:22:41,570 --> 00:22:45,740
give a crap about all this stuff like

571
00:22:42,860 --> 00:22:48,139
what is this matter so delegated TG T's

572
00:22:45,740 --> 00:22:50,630
can be used across forest trust

573
00:22:48,140 --> 00:22:52,820
boundaries and a compromise

574
00:22:50,630 --> 00:22:54,890
unconstrained delegation server means

575
00:22:52,820 --> 00:22:56,620
that an attacker can extract TG T's of

576
00:22:54,890 --> 00:22:59,150
users who authenticate to that machine

577
00:22:56,620 --> 00:23:03,080
even if they connect from another forest

578
00:22:59,150 --> 00:23:06,080
up until a few months ago and what if we

579
00:23:03,080 --> 00:23:07,909
could coerce particular accounts and one

580
00:23:06,080 --> 00:23:10,159
for us to authenticate to an

581
00:23:07,910 --> 00:23:14,900
unconstrained server that we control I

582
00:23:10,160 --> 00:23:18,050
wonder if this would be possible yes we

583
00:23:14,900 --> 00:23:20,840
can so that's where the printer bug

584
00:23:18,050 --> 00:23:23,330
comes into play so you know our problem

585
00:23:20,840 --> 00:23:25,879
here is we want to be able to coerce you

586
00:23:23,330 --> 00:23:28,159
know any you know a privileged account

587
00:23:25,880 --> 00:23:31,190
to authenticate to an unconstrained

588
00:23:28,160 --> 00:23:33,890
server and so the the printer bug is a

589
00:23:31,190 --> 00:23:38,060
nice little thing that I discovered it's

590
00:23:33,890 --> 00:23:43,550
a well it abuses an old printer protocol

591
00:23:38,060 --> 00:23:45,800
the MS are PRN protocol and what it does

592
00:23:43,550 --> 00:23:48,020
is inside of that RPC protocol there's a

593
00:23:45,800 --> 00:23:50,960
couple different methods that I saw our

594
00:23:48,020 --> 00:23:53,600
PC Remote find first printer changed

595
00:23:50,960 --> 00:23:56,950
notification I mean doesn't that sound

596
00:23:53,600 --> 00:23:58,969
just like such a great method but

597
00:23:56,950 --> 00:24:00,710
essentially what I found when looking

598
00:23:58,970 --> 00:24:03,740
through the protocol spec is that when

599
00:24:00,710 --> 00:24:06,860
invoked when you use this method what

600
00:24:03,740 --> 00:24:10,490
happens is you know I say I call this

601
00:24:06,860 --> 00:24:12,500
method against wills computer and upon

602
00:24:10,490 --> 00:24:15,200
doing that his machine immediately

603
00:24:12,500 --> 00:24:17,300
connects back to me and that's this is

604
00:24:15,200 --> 00:24:20,480
because it's essentially what what this

605
00:24:17,300 --> 00:24:23,899
method is supposed to do is supposed to

606
00:24:20,480 --> 00:24:26,090
be used for printers to allow to notify

607
00:24:23,900 --> 00:24:28,490
me of when like things happen what

608
00:24:26,090 --> 00:24:30,260
that printer so like like saying wills I

609
00:24:28,490 --> 00:24:32,240
want wills printer to notify me whenever

610
00:24:30,260 --> 00:24:35,870
a new print job occurs then it would

611
00:24:32,240 --> 00:24:37,340
connect back to me and notify me but you

612
00:24:35,870 --> 00:24:39,678
know you know that's the legitimate use

613
00:24:37,340 --> 00:24:41,120
case we can of course use that to coerce

614
00:24:39,679 --> 00:24:44,419
authentication that's what we're

615
00:24:41,120 --> 00:24:46,010
interested in as an attacker so it's

616
00:24:44,419 --> 00:24:48,320
worth noting that this is just one way

617
00:24:46,010 --> 00:24:50,299
there we already know that there are

618
00:24:48,320 --> 00:24:54,350
other ways to do this I don't think this

619
00:24:50,299 --> 00:24:56,389
is the only way so like we said MSRP RN

620
00:24:54,350 --> 00:24:59,928
just a little few details about it it

621
00:24:56,390 --> 00:25:02,690
uses the SMB RPC protocols using named

622
00:24:59,929 --> 00:25:04,850
pipes there's some of the details around

623
00:25:02,690 --> 00:25:09,289
around it but the important thing here

624
00:25:04,850 --> 00:25:12,049
is that we can invoke that method as an

625
00:25:09,289 --> 00:25:14,059
authenticated user so remember

626
00:25:12,049 --> 00:25:16,760
authenticated users you know when you

627
00:25:14,059 --> 00:25:19,340
authenticate over a trust boundary you

628
00:25:16,760 --> 00:25:22,700
are granted the authenticated users SID

629
00:25:19,340 --> 00:25:25,820
so you know I we can query we can use

630
00:25:22,700 --> 00:25:28,340
this method against machines in other

631
00:25:25,820 --> 00:25:33,230
forest forest and course those machines

632
00:25:28,340 --> 00:25:34,220
to authenticate anywhere we want also

633
00:25:33,230 --> 00:25:35,690
want to give a shout-out to e latch

634
00:25:34,220 --> 00:25:38,720
Sameera key also independently

635
00:25:35,690 --> 00:25:42,289
discovered this a little bit after me as

636
00:25:38,720 --> 00:25:44,299
as far as I know this bug still works it

637
00:25:42,289 --> 00:25:46,490
doesn't work less than eight because it

638
00:25:44,299 --> 00:25:48,320
was enabled you know as far as I can

639
00:25:46,490 --> 00:25:49,490
tell on Windows 8 and above it works

640
00:25:48,320 --> 00:25:51,889
just fine

641
00:25:49,490 --> 00:25:53,870
we Ted we used it on an op just a couple

642
00:25:51,890 --> 00:25:55,640
weeks ago to compromise a forest and

643
00:25:53,870 --> 00:25:58,639
still worked on a twenty sixteen server

644
00:25:55,640 --> 00:26:04,880
so should still work don't know about

645
00:25:58,640 --> 00:26:06,950
2019 yet so this is so in order to

646
00:26:04,880 --> 00:26:12,640
exploit this I created a tool called a

647
00:26:06,950 --> 00:26:16,730
spool sample the spooler come on

648
00:26:12,640 --> 00:26:18,890
but anyways spool sample is a it's got

649
00:26:16,730 --> 00:26:20,330
an example of it running here so on that

650
00:26:18,890 --> 00:26:23,240
first line you can see that we're on a

651
00:26:20,330 --> 00:26:25,010
machine called wind 10 I'm running as a

652
00:26:23,240 --> 00:26:27,169
marketer which is you know just a low

653
00:26:25,010 --> 00:26:29,059
privileged account in the network and

654
00:26:27,169 --> 00:26:32,029
I'm saying I'm running spool sample

655
00:26:29,059 --> 00:26:34,340
against domain controller the lab DC and

656
00:26:32,029 --> 00:26:36,890
I'm saying please authenticate back to

657
00:26:34,340 --> 00:26:38,439
my Windows 10 machine and so I go ahead

658
00:26:36,890 --> 00:26:41,800
and execute it

659
00:26:38,440 --> 00:26:44,590
and then I use seatbelt to just list the

660
00:26:41,800 --> 00:26:46,540
logon events and as you can see on the

661
00:26:44,590 --> 00:26:48,699
Windows 10 machine we can see that the

662
00:26:46,540 --> 00:26:51,370
domain controller did indeed try and

663
00:26:48,700 --> 00:26:53,110
authenticate back to us and we can see

664
00:26:51,370 --> 00:26:55,060
you know there that it's using Kerberos

665
00:26:53,110 --> 00:26:57,310
when it did that authentication we could

666
00:26:55,060 --> 00:27:00,129
also force it to use ntlm but in this

667
00:26:57,310 --> 00:27:01,629
case we're just gonna use Kerberos so

668
00:27:00,130 --> 00:27:04,360
that's very cool that's an extremely

669
00:27:01,630 --> 00:27:08,410
powerful primitive especially in this

670
00:27:04,360 --> 00:27:12,219
scenario all right we're gonna put all

671
00:27:08,410 --> 00:27:14,920
the pieces together so in this scenario

672
00:27:12,220 --> 00:27:19,330
say an attacker completely compromises

673
00:27:14,920 --> 00:27:22,420
force B so this is also going to include

674
00:27:19,330 --> 00:27:24,310
by like guarantee to have the compromise

675
00:27:22,420 --> 00:27:25,990
of at least one server with on

676
00:27:24,310 --> 00:27:29,200
constrained delegation which would be

677
00:27:25,990 --> 00:27:31,870
the domain controller for force B let's

678
00:27:29,200 --> 00:27:34,270
say force B shares a two-way forest

679
00:27:31,870 --> 00:27:35,949
trust before a stay so theoretically

680
00:27:34,270 --> 00:27:38,830
based on this being a boundary

681
00:27:35,950 --> 00:27:41,620
compromise a force B should not be able

682
00:27:38,830 --> 00:27:45,550
to facilitate compromise of any

683
00:27:41,620 --> 00:27:47,379
resources in forest a we're going to use

684
00:27:45,550 --> 00:27:49,870
in this demo we're going to use a Rubeus

685
00:27:47,380 --> 00:27:51,220
for TGT monitoring and extractions pull

686
00:27:49,870 --> 00:27:54,729
sample for the coerced authentication

687
00:27:51,220 --> 00:27:57,010
and then me me cats with DC sync it's

688
00:27:54,730 --> 00:27:58,390
actually not there's only a few few

689
00:27:57,010 --> 00:28:01,330
steps there's not actually too many

690
00:27:58,390 --> 00:28:02,920
moving parts so okay where you have our

691
00:28:01,330 --> 00:28:06,699
victim force which is a and we've

692
00:28:02,920 --> 00:28:10,270
compromised everything in force B first

693
00:28:06,700 --> 00:28:12,570
as a domain attacker the via that the

694
00:28:10,270 --> 00:28:15,700
print spooler stuff the MSRP RN i'm

695
00:28:12,570 --> 00:28:18,220
going to tell the domain controller in

696
00:28:15,700 --> 00:28:22,090
forest a please authenticate to me on

697
00:28:18,220 --> 00:28:24,040
domain controller be domain controller a

698
00:28:22,090 --> 00:28:26,949
with its machine account will

699
00:28:24,040 --> 00:28:28,600
authenticate to be this is these two

700
00:28:26,950 --> 00:28:31,030
parts or what compromises the printer

701
00:28:28,600 --> 00:28:33,580
bug and it sends its ticket granting

702
00:28:31,030 --> 00:28:35,170
ticket because of unconstrained

703
00:28:33,580 --> 00:28:37,120
delegation it'll send a completely

704
00:28:35,170 --> 00:28:40,960
forwarded ticket granting ticket over

705
00:28:37,120 --> 00:28:42,939
the forest trust boundary then all the

706
00:28:40,960 --> 00:28:45,310
attacker does is extract that ticket

707
00:28:42,940 --> 00:28:47,860
granting ticket of DC a domain

708
00:28:45,310 --> 00:28:49,419
controller they can resubmit it to the

709
00:28:47,860 --> 00:28:51,919
local security authority on their box

710
00:28:49,420 --> 00:28:53,780
and now their RDC

711
00:28:51,920 --> 00:28:57,560
they can just DC sync any account they

712
00:28:53,780 --> 00:29:01,490
want in forestay because now they are it

713
00:28:57,560 --> 00:29:03,129
is if they are DCA's rtca the domain

714
00:29:01,490 --> 00:29:05,990
controller

715
00:29:03,130 --> 00:29:09,500
worth noting here that nowhere DC said

716
00:29:05,990 --> 00:29:10,850
filtering take place so that's the

717
00:29:09,500 --> 00:29:12,890
entire attack kind of laid out and we're

718
00:29:10,850 --> 00:29:16,310
gonna show a demo video of this so again

719
00:29:12,890 --> 00:29:17,900
AAA has a two way trust would be we're

720
00:29:16,310 --> 00:29:18,620
just proving it and I promise you no

721
00:29:17,900 --> 00:29:22,310
we're not lying

722
00:29:18,620 --> 00:29:24,379
we didn't fake out the demo we're on the

723
00:29:22,310 --> 00:29:25,940
domain controller we control we are

724
00:29:24,380 --> 00:29:27,410
gonna start monitoring for new ticket

725
00:29:25,940 --> 00:29:29,630
granting ticket scumming in this will

726
00:29:27,410 --> 00:29:31,160
just actually monitor the 464 logon

727
00:29:29,630 --> 00:29:33,590
events then we're gonna trigger the

728
00:29:31,160 --> 00:29:37,340
printer bug against DCA saying please

729
00:29:33,590 --> 00:29:39,139
connect to DC be you get DCA's take your

730
00:29:37,340 --> 00:29:44,840
granny ticket let's extract it out as a

731
00:29:39,140 --> 00:29:46,850
base64 blob we're gonna take this ticket

732
00:29:44,840 --> 00:29:47,659
out just remove the newline so we then

733
00:29:46,850 --> 00:29:49,610
we can resubmit it

734
00:29:47,660 --> 00:29:52,700
you could automate this even more I

735
00:29:49,610 --> 00:29:55,189
suppose if you'd like and just as an FYI

736
00:29:52,700 --> 00:29:56,750
we will post the slides for this and

737
00:29:55,190 --> 00:30:00,590
tweet it out right after the the talk is

738
00:29:56,750 --> 00:30:02,600
over so we get that base64 of DCA's

739
00:30:00,590 --> 00:30:04,699
ticket granting ticket we can verify

740
00:30:02,600 --> 00:30:06,020
that this is real by parsing the ticket

741
00:30:04,700 --> 00:30:07,940
structures with Rubeus and then

742
00:30:06,020 --> 00:30:11,120
verifying the information within it so

743
00:30:07,940 --> 00:30:12,230
okay this is for DC a dollar sign for

744
00:30:11,120 --> 00:30:14,239
the machine account of the domain

745
00:30:12,230 --> 00:30:17,180
controller we're gonna submit that

746
00:30:14,240 --> 00:30:21,050
ticket granting ticket to LSA now it is

747
00:30:17,180 --> 00:30:23,980
as if we are DC $1 the Machine account

748
00:30:21,050 --> 00:30:27,340
then all we have to do left is DC sync

749
00:30:23,980 --> 00:30:30,710
any account we want say the krbtgt of

750
00:30:27,340 --> 00:30:32,240
that trusting forest dope that was the

751
00:30:30,710 --> 00:30:33,920
entire attack this is actually the demo

752
00:30:32,240 --> 00:30:36,380
video for proof of concept that we sent

753
00:30:33,920 --> 00:30:38,390
in to Microsoft when we filed this so

754
00:30:36,380 --> 00:30:39,710
the TLDR of this is if you compromise

755
00:30:38,390 --> 00:30:41,870
any server with on constrained

756
00:30:39,710 --> 00:30:44,690
delegation domain controller otherwise

757
00:30:41,870 --> 00:30:47,540
you can use that access with the printer

758
00:30:44,690 --> 00:30:49,670
bug to compromise the current domain all

759
00:30:47,540 --> 00:30:52,490
domains in your current forest and until

760
00:30:49,670 --> 00:30:54,380
recently all domains in any foreign

761
00:30:52,490 --> 00:30:57,590
forest that there's a two way for us

762
00:30:54,380 --> 00:30:59,120
trust with so some people didn't really

763
00:30:57,590 --> 00:31:00,740
think that this was a big deal some of

764
00:30:59,120 --> 00:31:02,840
the public reaction we posted this was

765
00:31:00,740 --> 00:31:04,620
still a security boundary as long as

766
00:31:02,840 --> 00:31:08,879
there's not a two-way trust which

767
00:31:04,620 --> 00:31:10,739
okay I guess I kind of disagree our step

768
00:31:08,880 --> 00:31:12,330
one have force root domain admin

769
00:31:10,740 --> 00:31:13,890
credential step to have things grossly

770
00:31:12,330 --> 00:31:16,100
misconfigure because I guess having a

771
00:31:13,890 --> 00:31:18,779
trust is a Christmas configuration or I

772
00:31:16,100 --> 00:31:20,129
don't think I've heard anyone claim that

773
00:31:18,779 --> 00:31:21,750
boundary still exists when a two-way

774
00:31:20,130 --> 00:31:23,640
trust is in place to which we kind of

775
00:31:21,750 --> 00:31:25,770
respond with the way people come were

776
00:31:23,640 --> 00:31:27,990
thinking about this or like why call to

777
00:31:25,770 --> 00:31:29,639
force a security boundary if like why

778
00:31:27,990 --> 00:31:31,559
even have it as a security boundary

779
00:31:29,640 --> 00:31:34,620
unless it's in the context of trust with

780
00:31:31,559 --> 00:31:36,480
other domains so we kind of disagree

781
00:31:34,620 --> 00:31:37,860
with some of this but we understand why

782
00:31:36,480 --> 00:31:41,309
it's a complex issue with a lot of

783
00:31:37,860 --> 00:31:44,879
subtlety so we understand why you know

784
00:31:41,309 --> 00:31:47,309
people kind of eat it this way yep and

785
00:31:44,880 --> 00:31:49,860
so like the big thing here is you know

786
00:31:47,309 --> 00:31:54,120
in an active directory's default

787
00:31:49,860 --> 00:31:56,490
configuration this you know this is it

788
00:31:54,120 --> 00:31:59,370
is vulnerable so you can if one forest

789
00:31:56,490 --> 00:32:03,480
trust another forest then the compromise

790
00:31:59,370 --> 00:32:07,100
of one is going to result in the

791
00:32:03,480 --> 00:32:10,470
compromise of the second forest so the

792
00:32:07,100 --> 00:32:12,750
the issue here is like you have this

793
00:32:10,470 --> 00:32:14,520
dependency now on the security of this

794
00:32:12,750 --> 00:32:17,940
you know untrusted forest that you

795
00:32:14,520 --> 00:32:22,309
you're just assuming is okay or is

796
00:32:17,940 --> 00:32:22,309
isolated off but that is no longer the

797
00:32:26,280 --> 00:32:32,220
case you cannot assume I can't assume

798
00:32:29,460 --> 00:32:37,020
that wills for us is you know completely

799
00:32:32,220 --> 00:32:40,289
trustworthy now so even if you know I

800
00:32:37,020 --> 00:32:43,710
had perfect security I did everything

801
00:32:40,289 --> 00:32:46,679
right just by virtue of having a trust

802
00:32:43,710 --> 00:32:49,530
between us if wills force is compromised

803
00:32:46,679 --> 00:32:52,260
and I am also compromised or it could be

804
00:32:49,530 --> 00:32:54,270
compromised so the reason that we think

805
00:32:52,260 --> 00:32:56,070
this matters or is impactful is

806
00:32:54,270 --> 00:32:57,960
especially with larger corporations that

807
00:32:56,070 --> 00:33:00,059
you say acquisitions where they bring in

808
00:32:57,960 --> 00:33:01,830
new Active Directory resources and then

809
00:33:00,059 --> 00:33:03,720
in order for things to intercommunicate

810
00:33:01,830 --> 00:33:05,699
we'll just hook it up with the trust and

811
00:33:03,720 --> 00:33:08,340
based on the guidance from Microsoft for

812
00:33:05,700 --> 00:33:10,620
years okay we're doing this right we're

813
00:33:08,340 --> 00:33:12,299
doing a forest trust because that's

814
00:33:10,620 --> 00:33:12,989
gonna that's a security boundary so

815
00:33:12,299 --> 00:33:15,090
we're not gonna be able to be

816
00:33:12,990 --> 00:33:16,710
compromised and then if a single server

817
00:33:15,090 --> 00:33:18,330
single unconstraint server is

818
00:33:16,710 --> 00:33:20,190
compromised and that new domain they

819
00:33:18,330 --> 00:33:23,250
hooked up the entire thing comes

820
00:33:20,190 --> 00:33:25,559
crashing down we've seen this more than

821
00:33:23,250 --> 00:33:28,250
once in actual environments so we knew

822
00:33:25,559 --> 00:33:33,178
from practical you know experience that

823
00:33:28,250 --> 00:33:35,780
organizations were doing this so we

824
00:33:33,179 --> 00:33:38,610
reported this last fall to nsrc um

825
00:33:35,780 --> 00:33:40,918
initially the engineering teams got back

826
00:33:38,610 --> 00:33:44,610
to us and they they claimed it was not

827
00:33:40,919 --> 00:33:47,669
an issue we fight and it was by design

828
00:33:44,610 --> 00:33:49,889
this is how it was designed and you know

829
00:33:47,669 --> 00:33:51,450
we responded saying no we really do

830
00:33:49,890 --> 00:33:55,020
think this is an issue like you should

831
00:33:51,450 --> 00:33:57,059
reconsider sure enough they they did not

832
00:33:55,020 --> 00:33:58,710
patch it they said maybe we'll think

833
00:33:57,059 --> 00:34:03,000
about doing it in the future and a V

834
00:33:58,710 --> 00:34:06,360
next patch but you know no promises

835
00:34:03,000 --> 00:34:08,219
so we went ahead and we you know decided

836
00:34:06,360 --> 00:34:10,230
to disclose to the public so we

837
00:34:08,219 --> 00:34:13,830
published this along with some really

838
00:34:10,230 --> 00:34:16,020
great defensive guidance and sure enough

839
00:34:13,830 --> 00:34:19,290
the they decided it was a mistake at

840
00:34:16,020 --> 00:34:22,199
that point so soon after that an

841
00:34:19,290 --> 00:34:23,668
advisory was released talking about the

842
00:34:22,199 --> 00:34:27,719
issue that was at play here

843
00:34:23,668 --> 00:34:32,310
um and months later in March a patch was

844
00:34:27,719 --> 00:34:33,359
finally released so while we do like we

845
00:34:32,310 --> 00:34:35,429
didn't agree with their initial

846
00:34:33,359 --> 00:34:37,259
assessment we do applaud Microsoft for

847
00:34:35,429 --> 00:34:37,679
you know actually it meeting their error

848
00:34:37,260 --> 00:34:39,990
and

849
00:34:37,679 --> 00:34:41,220
doing it and they ended up coming up

850
00:34:39,989 --> 00:34:43,529
with a really good patch which we're

851
00:34:41,219 --> 00:34:45,689
gonna talk about but to their credit

852
00:34:43,530 --> 00:34:49,800
they did admit it and they owned up to

853
00:34:45,690 --> 00:34:51,450
their that the mistake and so in March

854
00:34:49,800 --> 00:34:53,849
of this year that's where CVE twenty

855
00:34:51,449 --> 00:34:56,399
nine twenty nineteen oh six eight three

856
00:34:53,849 --> 00:34:58,290
came I'm just talking about how there's

857
00:34:56,399 --> 00:35:03,118
an elevation of privilege between Active

858
00:34:58,290 --> 00:35:04,950
Directory forests so some of the details

859
00:35:03,119 --> 00:35:06,630
and what they actually did and why we

860
00:35:04,950 --> 00:35:08,520
think this is such a cool example of

861
00:35:06,630 --> 00:35:10,260
like really killing the entire

862
00:35:08,520 --> 00:35:12,599
fundamental issue instead of just doing

863
00:35:10,260 --> 00:35:14,130
like a little band-aid over it so after

864
00:35:12,599 --> 00:35:15,900
they officially recognized it they

865
00:35:14,130 --> 00:35:17,880
rolled a patched out over the next are

866
00:35:15,900 --> 00:35:20,700
the over several months this year

867
00:35:17,880 --> 00:35:22,619
and they did it in multiple steps so but

868
00:35:20,700 --> 00:35:24,868
in general what it does now is it

869
00:35:22,619 --> 00:35:27,150
disables TGT delegation across forest

870
00:35:24,869 --> 00:35:28,950
trust boundaries by default and the cool

871
00:35:27,150 --> 00:35:30,930
way they did it is there is an opt-in

872
00:35:28,950 --> 00:35:32,460
period where if you wanted to still

873
00:35:30,930 --> 00:35:34,740
allow this behavior in your environment

874
00:35:32,460 --> 00:35:37,430
you're able to flip a bit and still have

875
00:35:34,740 --> 00:35:40,169
this existing type functionality and

876
00:35:37,430 --> 00:35:42,419
then early a few months after that they

877
00:35:40,170 --> 00:35:44,549
completely disabled and like killed

878
00:35:42,420 --> 00:35:46,920
stuff by defaults where unless you opted

879
00:35:44,549 --> 00:35:49,230
in to preserve this behavior and all

880
00:35:46,920 --> 00:35:51,660
modern patch domains now this this thing

881
00:35:49,230 --> 00:35:54,420
is completely killed so they Microsoft

882
00:35:51,660 --> 00:35:56,339
very rarely breaks backwards

883
00:35:54,420 --> 00:35:57,750
compatibility by default usually the

884
00:35:56,339 --> 00:36:00,029
option would be we're gonna give you

885
00:35:57,750 --> 00:36:02,430
something in this scenario that will let

886
00:36:00,030 --> 00:36:05,250
you disable this behavior they very

887
00:36:02,430 --> 00:36:07,290
rarely go back in and then change the

888
00:36:05,250 --> 00:36:09,030
existing established architectural

889
00:36:07,290 --> 00:36:10,770
behavior of a system in a way that

890
00:36:09,030 --> 00:36:12,059
breaks backwards compatibility so

891
00:36:10,770 --> 00:36:14,579
there's a very big deal that this

892
00:36:12,059 --> 00:36:16,109
happened and as of July they add a new

893
00:36:14,579 --> 00:36:19,049
safe configuration from constrained

894
00:36:16,109 --> 00:36:20,730
servers delegations across trusts so how

895
00:36:19,049 --> 00:36:23,089
did this patch actually actually work

896
00:36:20,730 --> 00:36:27,329
under the hood how to roll out so

897
00:36:23,089 --> 00:36:30,058
they're in modern 2012 domains there was

898
00:36:27,329 --> 00:36:32,220
an option that you could disable TGT

899
00:36:30,059 --> 00:36:33,990
delegation across trusts it was an

900
00:36:32,220 --> 00:36:35,459
opt-in it was an optional thing that you

901
00:36:33,990 --> 00:36:38,759
had to set it was not turned on by

902
00:36:35,460 --> 00:36:40,920
default so in March of this year they

903
00:36:38,760 --> 00:36:43,280
back ported that functionality to Server

904
00:36:40,920 --> 00:36:46,770
2008 of a step 1

905
00:36:43,280 --> 00:36:49,109
then in May they introduced a new trust

906
00:36:46,770 --> 00:36:50,250
flag so trusts are actually represented

907
00:36:49,109 --> 00:36:51,120
as something called trusted domain

908
00:36:50,250 --> 00:36:53,730
objects

909
00:36:51,120 --> 00:36:55,529
in Active Directory so in Li's domain if

910
00:36:53,730 --> 00:36:58,140
he trusts my domain there's going to be

911
00:36:55,530 --> 00:36:59,970
an object of wills domain represented as

912
00:36:58,140 --> 00:37:02,640
a trusted domain object and Lee's doing

913
00:36:59,970 --> 00:37:04,770
so everything is an object in AD it all

914
00:37:02,640 --> 00:37:06,270
has properties this is how it knows like

915
00:37:04,770 --> 00:37:07,920
should I do this filtering or not all

916
00:37:06,270 --> 00:37:10,290
these different settings so they

917
00:37:07,920 --> 00:37:12,750
introduced a new flag that was cross

918
00:37:10,290 --> 00:37:15,000
organisation enabled TGT delegation

919
00:37:12,750 --> 00:37:16,590
this was the opt-in period where if you

920
00:37:15,000 --> 00:37:19,890
still wanted to preserve this behavior

921
00:37:16,590 --> 00:37:22,650
you could flip this they also for any

922
00:37:19,890 --> 00:37:25,170
new trust they flipped the old flag on

923
00:37:22,650 --> 00:37:27,780
by default so cross organization no TGT

924
00:37:25,170 --> 00:37:30,210
delegation so new they let you opt in

925
00:37:27,780 --> 00:37:32,760
and then they disabled the behavior by

926
00:37:30,210 --> 00:37:35,640
default and how it currently was then

927
00:37:32,760 --> 00:37:38,070
the big step is in july 2019

928
00:37:35,640 --> 00:37:39,779
they started enforcement of the new

929
00:37:38,070 --> 00:37:42,300
trust flag and they're completely

930
00:37:39,780 --> 00:37:44,190
ignoring the old opt-in one so if you

931
00:37:42,300 --> 00:37:47,160
did not in that short period of time

932
00:37:44,190 --> 00:37:49,590
flip this existing flag to preserve the

933
00:37:47,160 --> 00:37:51,600
functionality now on patch domains this

934
00:37:49,590 --> 00:37:54,660
just does not work anymore delegated TG

935
00:37:51,600 --> 00:37:56,549
T's will not flow between forest rust so

936
00:37:54,660 --> 00:37:59,190
forests are now again a security

937
00:37:56,550 --> 00:38:00,360
boundary so the operational guidance

938
00:37:59,190 --> 00:38:03,090
though from offensive or defensive

939
00:38:00,360 --> 00:38:06,240
standpoint is if this one particular

940
00:38:03,090 --> 00:38:08,640
flag is set the issue will be mitigated

941
00:38:06,240 --> 00:38:09,959
if that cross organization no delegation

942
00:38:08,640 --> 00:38:12,330
is set the issue

943
00:38:09,960 --> 00:38:16,830
completely is mitigated if all DCs are

944
00:38:12,330 --> 00:38:19,680
running Server 2012 or if you have 2008

945
00:38:16,830 --> 00:38:21,630
DCs if they're patched as of March 2019

946
00:38:19,680 --> 00:38:24,419
they got that update and you have this

947
00:38:21,630 --> 00:38:27,210
flag set if you have the cross

948
00:38:24,420 --> 00:38:28,350
organisation enable te GT flag set then

949
00:38:27,210 --> 00:38:30,450
the whole domain set up is still

950
00:38:28,350 --> 00:38:32,790
vulnerable but someone had to actively

951
00:38:30,450 --> 00:38:36,419
opt in to preserve this risky behavior

952
00:38:32,790 --> 00:38:37,650
in this risky setup and if neither flag

953
00:38:36,420 --> 00:38:39,600
is set which is going to be the most

954
00:38:37,650 --> 00:38:42,270
common then you're vulnerable

955
00:38:39,600 --> 00:38:44,880
if the may 20 19 update is not applied

956
00:38:42,270 --> 00:38:47,040
to every domain controller which is kind

957
00:38:44,880 --> 00:38:48,420
of the trickier part so once this kind

958
00:38:47,040 --> 00:38:49,830
of flipped on we started seeing it

959
00:38:48,420 --> 00:38:51,390
slowly rolling out to different domain

960
00:38:49,830 --> 00:38:52,590
controllers or different environments I

961
00:38:51,390 --> 00:38:53,940
think most environments are going to be

962
00:38:52,590 --> 00:38:55,140
protected now as long as people are

963
00:38:53,940 --> 00:38:57,420
updating their domain controllers

964
00:38:55,140 --> 00:38:59,040
they're good there is a technical

965
00:38:57,420 --> 00:39:01,230
reference in some of the github issues

966
00:38:59,040 --> 00:39:02,340
for vinson the twos pin Castle project

967
00:39:01,230 --> 00:39:03,960
that we have a link down there or

968
00:39:02,340 --> 00:39:04,440
someone actually reversed the patch and

969
00:39:03,960 --> 00:39:05,910
figured out

970
00:39:04,440 --> 00:39:09,089
flags I'm figured out exactly what was

971
00:39:05,910 --> 00:39:12,000
happening so I know we went a bit quick

972
00:39:09,089 --> 00:39:13,020
but that's that's the talk so thank you

973
00:39:12,000 --> 00:39:14,970
guys for coming out

974
00:39:13,020 --> 00:39:16,560
we always love talking to Derby con and

975
00:39:14,970 --> 00:39:17,910
if there's any particular questions we

976
00:39:16,560 --> 00:39:21,180
can take them or if you want to come up

977
00:39:17,910 --> 00:39:22,560
and chat with us after definitely can we

978
00:39:21,180 --> 00:39:24,890
have a bunch of references and stuff and

979
00:39:22,560 --> 00:39:27,180
again we will upload this slide deck to

980
00:39:24,890 --> 00:39:29,520
fly chair and then tweet out the link

981
00:39:27,180 --> 00:39:30,549
here and within the next hour so so

982
00:39:29,520 --> 00:39:37,489
thank you guys

983
00:39:30,550 --> 00:39:37,489
[Applause]

984
00:39:37,640 --> 00:39:39,700
you

