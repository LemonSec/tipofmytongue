1
00:00:00,000 --> 00:00:04,620
a couple Derby Khan's ago there is like

2
00:00:02,610 --> 00:00:06,089
but the speaker's the the mics were hot

3
00:00:04,620 --> 00:00:11,280
before the talks they had that kind of

4
00:00:06,089 --> 00:00:14,090
watched she said before another people

5
00:00:11,280 --> 00:00:14,090
are still filing in

6
00:00:15,580 --> 00:00:18,710
[Music]

7
00:00:25,930 --> 00:00:29,000
[Applause]

8
00:00:38,020 --> 00:00:41,090
[Music]

9
00:02:06,170 --> 00:02:14,310
thank you very much okay come on that

10
00:02:08,758 --> 00:02:16,079
shot okay okay so we'll go ahead and get

11
00:02:14,310 --> 00:02:18,150
going then so thanks again for coming

12
00:02:16,080 --> 00:02:20,250
out we're watching online for those who

13
00:02:18,150 --> 00:02:22,650
are watching later my name is Casey

14
00:02:20,250 --> 00:02:26,310
Smith I'm on Twitter sometimes at sub T

15
00:02:22,650 --> 00:02:28,170
so I've moved a lot of my code for the

16
00:02:26,310 --> 00:02:30,390
talk to malware your labs it's just a

17
00:02:28,170 --> 00:02:32,280
place I've created to put different

18
00:02:30,390 --> 00:02:34,170
group of concepts and things to kind of

19
00:02:32,280 --> 00:02:36,150
consolidate some of my code so all of

20
00:02:34,170 --> 00:02:38,700
the slides and code will be there that

21
00:02:36,150 --> 00:02:41,190
I'm demonstrating today so what we're

22
00:02:38,700 --> 00:02:43,560
gonna talk about today is dotnet

23
00:02:41,190 --> 00:02:45,510
manifests in influencing the common

24
00:02:43,560 --> 00:02:46,800
language runtime loader we'll look at a

25
00:02:45,510 --> 00:02:48,060
couple of things but I want to take you

26
00:02:46,800 --> 00:02:50,070
through real quick and outline we're

27
00:02:48,060 --> 00:02:53,160
gonna look at sort of why this is

28
00:02:50,070 --> 00:02:54,870
interesting and some background on CLR I

29
00:02:53,160 --> 00:02:56,970
realize not everybody may be familiar

30
00:02:54,870 --> 00:02:59,730
with net common language runtime so just

31
00:02:56,970 --> 00:03:01,200
a brief overview what manifests are why

32
00:02:59,730 --> 00:03:04,170
they're important to developers and

33
00:03:01,200 --> 00:03:06,238
software deployment an older technology

34
00:03:04,170 --> 00:03:09,809
windows side-by-side that's still in use

35
00:03:06,239 --> 00:03:10,980
today on endpoints fusion logging some

36
00:03:09,810 --> 00:03:12,840
of you may have heard of this before but

37
00:03:10,980 --> 00:03:15,179
it's a way to really inspect telemetry

38
00:03:12,840 --> 00:03:17,610
around any time but net assembly loads

39
00:03:15,180 --> 00:03:19,280
whether it's through a byte array or

40
00:03:17,610 --> 00:03:22,410
from disk so there's some really rich

41
00:03:19,280 --> 00:03:25,200
datasets in there well then talk about

42
00:03:22,410 --> 00:03:26,970
ways to influence or encourage the

43
00:03:25,200 --> 00:03:28,560
dotnet runtime to run things that maybe

44
00:03:26,970 --> 00:03:30,989
wasn't designed to run or didn't want to

45
00:03:28,560 --> 00:03:33,870
run so things like profilers application

46
00:03:30,989 --> 00:03:36,299
domain managers specifically a class

47
00:03:33,870 --> 00:03:37,590
called activation context and hopefully

48
00:03:36,299 --> 00:03:39,600
I'll put all this together with a tool

49
00:03:37,590 --> 00:03:41,549
based on a tool called dynamic rapper X

50
00:03:39,600 --> 00:03:43,590
which was intriguing to me years ago and

51
00:03:41,549 --> 00:03:47,220
finally was able to re-implement it in a

52
00:03:43,590 --> 00:03:48,959
new way so and hopefully explained my

53
00:03:47,220 --> 00:03:50,730
thought process and have time for

54
00:03:48,959 --> 00:03:52,500
questions if we did not have quite time

55
00:03:50,730 --> 00:03:54,060
for questions I'll hang out afterwards

56
00:03:52,500 --> 00:03:55,530
and then lots of references and

57
00:03:54,060 --> 00:03:58,530
resources really two points you to the

58
00:03:55,530 --> 00:03:59,850
places where you can learn more or dive

59
00:03:58,530 --> 00:04:02,070
deeper because certainly these are just

60
00:03:59,850 --> 00:04:05,310
things that I've looked at or been

61
00:04:02,070 --> 00:04:07,440
curious about ok so I really like this

62
00:04:05,310 --> 00:04:09,750
quote it came out in a blog on Google

63
00:04:07,440 --> 00:04:11,790
project zero a couple weeks ago and just

64
00:04:09,750 --> 00:04:13,199
sometimes hacking is someone spending

65
00:04:11,790 --> 00:04:15,410
more time on something that anyone else

66
00:04:13,199 --> 00:04:17,270
might reasonably expect and so

67
00:04:15,410 --> 00:04:19,390
i resonate with that because oftentimes

68
00:04:17,269 --> 00:04:22,219
I just spend a lot of time reading MSDN

69
00:04:19,390 --> 00:04:23,840
looking at like traces from different

70
00:04:22,220 --> 00:04:26,000
tools developer tools just trying to

71
00:04:23,840 --> 00:04:27,979
understand what they do and so that's a

72
00:04:26,000 --> 00:04:30,250
really fun way to learn I think is just

73
00:04:27,980 --> 00:04:32,360
ask lots of really good questions and

74
00:04:30,250 --> 00:04:33,980
there's three things I want you to learn

75
00:04:32,360 --> 00:04:35,930
today like what I think is interesting

76
00:04:33,980 --> 00:04:36,980
around dotnet manifest and loaders so

77
00:04:35,930 --> 00:04:39,110
first of all we're gonna be able to load

78
00:04:36,980 --> 00:04:42,200
any DLL we want from any location with

79
00:04:39,110 --> 00:04:43,310
VB or jscript so it older definitely no

80
00:04:42,200 --> 00:04:45,830
other thing but still interesting

81
00:04:43,310 --> 00:04:47,690
because sometimes VB or J script is a

82
00:04:45,830 --> 00:04:49,580
sort of a gateway or trampoline into

83
00:04:47,690 --> 00:04:51,860
something else and lots of things run

84
00:04:49,580 --> 00:04:54,320
that and then we'll look at how would I

85
00:04:51,860 --> 00:04:56,360
create a custom dinette object and then

86
00:04:54,320 --> 00:04:58,010
use manifest to load that into like a

87
00:04:56,360 --> 00:05:01,730
script host so if I wanted to create

88
00:04:58,010 --> 00:05:03,590
like a custom method or property and and

89
00:05:01,730 --> 00:05:04,520
I'd be able to do that pretty easily and

90
00:05:03,590 --> 00:05:08,440
then lastly how would I actually

91
00:05:04,520 --> 00:05:11,630
encourage the loader to run anything

92
00:05:08,440 --> 00:05:13,460
that I may feed it if you will on the

93
00:05:11,630 --> 00:05:18,170
end point so I'm sorry just chicken my

94
00:05:13,460 --> 00:05:19,969
timer okay so first of all done CLR

95
00:05:18,170 --> 00:05:21,950
common language run time think of an

96
00:05:19,970 --> 00:05:25,850
assembly as a unit of deployment they

97
00:05:21,950 --> 00:05:27,440
can be either exe s or dll's they're the

98
00:05:25,850 --> 00:05:29,450
common language runtime is an amazing

99
00:05:27,440 --> 00:05:30,980
like like testimony to software

100
00:05:29,450 --> 00:05:32,780
engineering this is really cool way of

101
00:05:30,980 --> 00:05:34,550
abstracting like processor so you could

102
00:05:32,780 --> 00:05:36,349
run code on different operating systems

103
00:05:34,550 --> 00:05:38,810
and there's a really rich set of

104
00:05:36,350 --> 00:05:40,580
telemetry around this thing so when you

105
00:05:38,810 --> 00:05:42,920
start looking at the CLR you're really

106
00:05:40,580 --> 00:05:44,840
looking at a very complex system that

107
00:05:42,920 --> 00:05:46,310
has lots of really neat ways to get

108
00:05:44,840 --> 00:05:49,539
access to data and that's interesting I

109
00:05:46,310 --> 00:05:52,340
think for both offense and defense

110
00:05:49,540 --> 00:05:54,260
specifically though with loading and

111
00:05:52,340 --> 00:05:57,469
related to manifest we're gonna focus on

112
00:05:54,260 --> 00:05:59,539
two early stage elements so what we call

113
00:05:57,470 --> 00:06:01,850
binding and probing which is really like

114
00:05:59,540 --> 00:06:04,100
how does the runtime know where to find

115
00:06:01,850 --> 00:06:06,050
an assembly and that you can tell it

116
00:06:04,100 --> 00:06:09,350
where to go look or encourage you to

117
00:06:06,050 --> 00:06:11,690
look at certain places so what does a

118
00:06:09,350 --> 00:06:13,280
manifest do when you're looking at

119
00:06:11,690 --> 00:06:14,090
dotnet like you have to ask yourself

120
00:06:13,280 --> 00:06:15,979
when you're looking at a particular

121
00:06:14,090 --> 00:06:18,409
technology like why is this a thing and

122
00:06:15,980 --> 00:06:19,730
often it's for developers that like

123
00:06:18,410 --> 00:06:21,200
think of the problems they're trying to

124
00:06:19,730 --> 00:06:23,000
solve or work on when they deploy

125
00:06:21,200 --> 00:06:24,229
software and so you have to really start

126
00:06:23,000 --> 00:06:25,310
thinking like a software engineer like

127
00:06:24,229 --> 00:06:27,370
what problems do they have

128
00:06:25,310 --> 00:06:29,180
like deploying software at scale

129
00:06:27,370 --> 00:06:30,950
maintaining software up

130
00:06:29,180 --> 00:06:33,020
dating fixing things so there's a lot of

131
00:06:30,950 --> 00:06:35,510
things in these frameworks that are used

132
00:06:33,020 --> 00:06:37,010
for those type of roles you know why is

133
00:06:35,510 --> 00:06:38,630
this even a thing and there's a lot of

134
00:06:37,010 --> 00:06:40,730
really good documentation a lot of time

135
00:06:38,630 --> 00:06:41,960
is spent when you're researching some of

136
00:06:40,730 --> 00:06:43,700
these things just reading documentation

137
00:06:41,960 --> 00:06:45,409
and just asking what does that property

138
00:06:43,700 --> 00:06:47,900
do or how would I change that property

139
00:06:45,410 --> 00:06:48,920
or how would I you know make it point

140
00:06:47,900 --> 00:06:52,310
somewhere else whatever you might be

141
00:06:48,920 --> 00:06:54,020
looking at and then specifically there's

142
00:06:52,310 --> 00:06:56,960
things around dotnet and side-by-side

143
00:06:54,020 --> 00:06:58,849
resolution that they help make sure that

144
00:06:56,960 --> 00:07:01,039
you ultimately how do I find the right

145
00:06:58,850 --> 00:07:03,380
assembly to load or right dll to load

146
00:07:01,040 --> 00:07:06,380
like if I was on version 2 and I've

147
00:07:03,380 --> 00:07:07,760
updated to version 2.0 1 and I want to

148
00:07:06,380 --> 00:07:09,230
make sure all my clients get the right

149
00:07:07,760 --> 00:07:11,060
version that's really the problem a

150
00:07:09,230 --> 00:07:13,550
manifest one of the problems I would say

151
00:07:11,060 --> 00:07:15,260
a manifest would be trying to solve so

152
00:07:13,550 --> 00:07:18,040
encouraging the application to find the

153
00:07:15,260 --> 00:07:21,020
correct libraries correct versions etc

154
00:07:18,040 --> 00:07:23,210
so how many of you have heard of sxs or

155
00:07:21,020 --> 00:07:24,859
side by side load you know he said this

156
00:07:23,210 --> 00:07:27,200
is actually an older technology it's

157
00:07:24,860 --> 00:07:29,750
really may have heard of DLL hell or

158
00:07:27,200 --> 00:07:32,180
it's like I can't find the dll or

159
00:07:29,750 --> 00:07:33,770
there's multiple you know versions and

160
00:07:32,180 --> 00:07:36,020
making sure we get the right one so this

161
00:07:33,770 --> 00:07:37,370
was side by side registration is the

162
00:07:36,020 --> 00:07:39,680
thing that helps with like registration

163
00:07:37,370 --> 00:07:42,170
free comm so normally when you want to

164
00:07:39,680 --> 00:07:45,260
create a comm object you have to put

165
00:07:42,170 --> 00:07:47,900
that into the registry and leave sort of

166
00:07:45,260 --> 00:07:49,460
an imprint there and so this is a really

167
00:07:47,900 --> 00:07:55,489
good tool built in if you start digging

168
00:07:49,460 --> 00:07:59,120
into side by side s X s Trace is an ETL

169
00:07:55,490 --> 00:08:00,800
or etw component is like writes ETL

170
00:07:59,120 --> 00:08:02,510
files and looks at like hey but my

171
00:08:00,800 --> 00:08:02,960
manifest didn't work and my DLL didn't

172
00:08:02,510 --> 00:08:04,430
load

173
00:08:02,960 --> 00:08:06,560
what happens so think of it like a

174
00:08:04,430 --> 00:08:08,420
flight recorder you turn it on you run

175
00:08:06,560 --> 00:08:10,130
your tool it records what happened and

176
00:08:08,420 --> 00:08:12,080
then you stop it and analyzed the trace

177
00:08:10,130 --> 00:08:14,330
output so it's very helpful a really

178
00:08:12,080 --> 00:08:16,539
good blog post that reference here talks

179
00:08:14,330 --> 00:08:18,830
about like all the different elements of

180
00:08:16,540 --> 00:08:20,180
wind side-by-side so that's well that's

181
00:08:18,830 --> 00:08:22,370
one area that we're gonna look at later

182
00:08:20,180 --> 00:08:27,920
that will come up as these side by side

183
00:08:22,370 --> 00:08:30,410
trace and assembly manifest so what

184
00:08:27,920 --> 00:08:32,030
about assembly loading so how many of

185
00:08:30,410 --> 00:08:33,440
you have heard of Fusion logging some of

186
00:08:32,030 --> 00:08:35,480
you may have heard of this with a couple

187
00:08:33,440 --> 00:08:36,920
hands so good ok Sophie this is new to

188
00:08:35,480 --> 00:08:39,350
you so when a developer is

189
00:08:36,919 --> 00:08:41,380
troubleshooting like why is my assembly

190
00:08:39,350 --> 00:08:44,050
not loading or did I get an error or

191
00:08:41,380 --> 00:08:45,939
like couldn't find the assembly you can

192
00:08:44,049 --> 00:08:48,880
turn on fusion logging and it will

193
00:08:45,940 --> 00:08:51,280
record elements like where did where was

194
00:08:48,880 --> 00:08:53,560
it looking you know what error did it

195
00:08:51,280 --> 00:08:54,880
receive like access denied or file not

196
00:08:53,560 --> 00:08:56,229
found there's a number of different

197
00:08:54,880 --> 00:08:58,660
elements that might help you learn like

198
00:08:56,230 --> 00:09:00,640
wide or wide that assembly not load so

199
00:08:58,660 --> 00:09:02,110
I've put a screenshot here of some of

200
00:09:00,640 --> 00:09:03,970
the registry keys you can set to turn

201
00:09:02,110 --> 00:09:06,280
this on this is again very very useful

202
00:09:03,970 --> 00:09:08,620
for both research for offense and

203
00:09:06,280 --> 00:09:10,870
defensive capability so you just set a

204
00:09:08,620 --> 00:09:12,700
path and you would run your fusion log

205
00:09:10,870 --> 00:09:16,750
and then another reference to Matt

206
00:09:12,700 --> 00:09:18,820
Warren's blog matt is a dotnet he writes

207
00:09:16,750 --> 00:09:20,590
a lot about net and a lot of its

208
00:09:18,820 --> 00:09:21,820
performance and really low-level stuff

209
00:09:20,590 --> 00:09:24,040
so there's a really good blog that

210
00:09:21,820 --> 00:09:26,320
describes some of the steps in assembly

211
00:09:24,040 --> 00:09:28,750
binding and logging in his blog called

212
00:09:26,320 --> 00:09:30,280
68 things the CLR does before executing

213
00:09:28,750 --> 00:09:33,130
a single line of code it's a really good

214
00:09:30,280 --> 00:09:35,050
reference to dig into so what does a a

215
00:09:33,130 --> 00:09:36,670
fusion blog look like and so when I

216
00:09:35,050 --> 00:09:39,069
approach research and I'm looking at

217
00:09:36,670 --> 00:09:41,199
like maybe loading a dll in a weird way

218
00:09:39,070 --> 00:09:43,270
or maybe using a tool in a different way

219
00:09:41,200 --> 00:09:44,890
like I just start asking questions so I

220
00:09:43,270 --> 00:09:47,590
turn on fusion logging and so here

221
00:09:44,890 --> 00:09:49,720
here's a an output of the log and I just

222
00:09:47,590 --> 00:09:51,640
started asking myself like I don't know

223
00:09:49,720 --> 00:09:53,590
what's at base like how do you set that

224
00:09:51,640 --> 00:09:55,689
it automatically got set to system 32

225
00:09:53,590 --> 00:09:56,650
but is that you know what what caused

226
00:09:55,690 --> 00:09:59,080
that to get set

227
00:09:56,650 --> 00:10:01,420
what's dynamic base there's the

228
00:09:59,080 --> 00:10:02,920
application name if you look down

229
00:10:01,420 --> 00:10:04,449
further in the log you can see well it

230
00:10:02,920 --> 00:10:08,079
was trying to find this assembly in the

231
00:10:04,450 --> 00:10:10,000
task directory and it looks a lot like a

232
00:10:08,080 --> 00:10:12,970
URL maybe I could load from a remote

233
00:10:10,000 --> 00:10:14,460
location too so those are some of the

234
00:10:12,970 --> 00:10:18,510
things like would I look at an output

235
00:10:14,460 --> 00:10:21,040
inside of there I might be exploring so

236
00:10:18,510 --> 00:10:22,960
ok so that's a little bit about like

237
00:10:21,040 --> 00:10:26,170
some of the manifests and components

238
00:10:22,960 --> 00:10:28,260
like things that influence the loader

239
00:10:26,170 --> 00:10:31,599
now kind of shifting gears would be like

240
00:10:28,260 --> 00:10:34,390
if I'm going to either instrument to

241
00:10:31,600 --> 00:10:37,240
collect additional telemetry or debug or

242
00:10:34,390 --> 00:10:39,100
investigate something or inject

243
00:10:37,240 --> 00:10:40,810
something from an offensive perspective

244
00:10:39,100 --> 00:10:42,670
what are some things I can use in

245
00:10:40,810 --> 00:10:44,109
the.net framework to do that so a couple

246
00:10:42,670 --> 00:10:46,000
of that a really interesting ones would

247
00:10:44,110 --> 00:10:48,010
be like profilers and they referenced

248
00:10:46,000 --> 00:10:49,839
the blog here that talks a lot about a

249
00:10:48,010 --> 00:10:51,490
dotnet profiler so there's an

250
00:10:49,839 --> 00:10:53,620
environment variable you can set so when

251
00:10:51,490 --> 00:10:54,600
any dot that application starts either

252
00:10:53,620 --> 00:10:58,079
globally

253
00:10:54,600 --> 00:10:59,820
or per process or per user it'll say do

254
00:10:58,079 --> 00:11:01,979
I have a profiler set if I do go ahead

255
00:10:59,820 --> 00:11:04,019
and load that DLL so that gives you

256
00:11:01,980 --> 00:11:07,170
really early early entry point into a

257
00:11:04,019 --> 00:11:09,149
dotnet application running a couple of

258
00:11:07,170 --> 00:11:11,550
other manifests areas that are good our

259
00:11:09,149 --> 00:11:14,760
application and machine configs and so

260
00:11:11,550 --> 00:11:17,459
these are in typically in the location

261
00:11:14,760 --> 00:11:19,560
where the binary is sometimes you'll see

262
00:11:17,459 --> 00:11:21,599
attackers copy like system files to

263
00:11:19,560 --> 00:11:23,579
writable locations and they often do

264
00:11:21,600 --> 00:11:25,589
that so they can put configs there or

265
00:11:23,579 --> 00:11:26,969
other files so when you see people

266
00:11:25,589 --> 00:11:28,800
moving things around it's because maybe

267
00:11:26,970 --> 00:11:30,990
they couldn't write to system 32 to put

268
00:11:28,800 --> 00:11:32,519
a dot config file there but if they

269
00:11:30,990 --> 00:11:34,740
write it to see tools then they could

270
00:11:32,519 --> 00:11:36,990
put it put the binary and a config and

271
00:11:34,740 --> 00:11:38,130
it'll find it locally so that's kind of

272
00:11:36,990 --> 00:11:40,320
an interesting thing to be able to

273
00:11:38,130 --> 00:11:42,329
observe like people shuttling system

274
00:11:40,320 --> 00:11:44,279
files around specifically there's a

275
00:11:42,329 --> 00:11:46,859
really neat entry in the XML around the

276
00:11:44,279 --> 00:11:49,740
developer path and so it you know it

277
00:11:46,860 --> 00:11:51,420
would clearly states on MSDN don't use

278
00:11:49,740 --> 00:11:52,800
this in production this is really for

279
00:11:51,420 --> 00:11:54,689
troubleshooting but of course attackers

280
00:11:52,800 --> 00:11:58,380
aren't going to - maybe acknowledge that

281
00:11:54,690 --> 00:12:01,260
so like def path maybe a dev is a really

282
00:11:58,380 --> 00:12:03,540
neat way to influence where the dotnet

283
00:12:01,260 --> 00:12:05,120
runtime finds an assembly from and then

284
00:12:03,540 --> 00:12:08,459
amanda wrote a really good paper on

285
00:12:05,120 --> 00:12:10,560
hijacking net to defend powershell it's

286
00:12:08,459 --> 00:12:12,930
it's a really good resource in terms of

287
00:12:10,560 --> 00:12:14,550
some of what i'm talking about here in

288
00:12:12,930 --> 00:12:17,069
the inside of that paper specifically

289
00:12:14,550 --> 00:12:18,660
around like understanding powershell

290
00:12:17,069 --> 00:12:20,160
some of that was written earlier before

291
00:12:18,660 --> 00:12:21,689
some of the logging capabilities were

292
00:12:20,160 --> 00:12:23,130
available but it's really good read to

293
00:12:21,690 --> 00:12:27,930
look at some not only PowerShell but

294
00:12:23,130 --> 00:12:29,639
done net internals so today specifically

295
00:12:27,930 --> 00:12:31,649
just for sake of time I wanted to focus

296
00:12:29,639 --> 00:12:34,319
on two areas the really the application

297
00:12:31,649 --> 00:12:37,199
domain manager so some of you may have

298
00:12:34,319 --> 00:12:38,699
heard of these before some of this may

299
00:12:37,199 --> 00:12:40,109
be new and so this is really interesting

300
00:12:38,699 --> 00:12:41,550
because an app domain manager an

301
00:12:40,110 --> 00:12:43,260
application domain is a unit of

302
00:12:41,550 --> 00:12:45,180
isolation you could think of inside of a

303
00:12:43,260 --> 00:12:46,829
dotnet application so there are

304
00:12:45,180 --> 00:12:50,339
application domains that are set up by

305
00:12:46,829 --> 00:12:52,829
the CLR when a assembly is loaded or

306
00:12:50,339 --> 00:12:54,389
processes begun and these can be

307
00:12:52,829 --> 00:12:57,779
controlled by environment variables and

308
00:12:54,389 --> 00:12:59,639
so and then you once you load your app

309
00:12:57,779 --> 00:13:02,040
domain manager you can then further

310
00:12:59,639 --> 00:13:03,839
affect assembly resolution so you can

311
00:13:02,040 --> 00:13:06,329
set up functions you can override

312
00:13:03,839 --> 00:13:07,830
functions so that when it a particular

313
00:13:06,329 --> 00:13:10,140
dll is searched

314
00:13:07,830 --> 00:13:11,910
or it uses your path or your

315
00:13:10,140 --> 00:13:14,040
recommendation as opposed to maybe what

316
00:13:11,910 --> 00:13:15,660
was expected by the system so the

317
00:13:14,040 --> 00:13:18,060
interesting thing here is these can be

318
00:13:15,660 --> 00:13:19,620
set per process environment variables is

319
00:13:18,060 --> 00:13:21,300
what I'm referring to here or user or

320
00:13:19,620 --> 00:13:22,860
system so it could be actually a

321
00:13:21,300 --> 00:13:25,199
persistence mechanism if you wanted to

322
00:13:22,860 --> 00:13:28,110
hijack globally every dotnet application

323
00:13:25,200 --> 00:13:30,300
and put your like app domain manager

324
00:13:28,110 --> 00:13:31,290
there you could easily do that and we'll

325
00:13:30,300 --> 00:13:34,890
see an example of that

326
00:13:31,290 --> 00:13:36,990
later on in the talk oh yeah

327
00:13:34,890 --> 00:13:38,880
there's another one kind of related to

328
00:13:36,990 --> 00:13:41,580
dotnet Jas profile or some of you may

329
00:13:38,880 --> 00:13:43,650
have heard of this if your if you like

330
00:13:41,580 --> 00:13:44,670
jscript and like debugging jscript

331
00:13:43,650 --> 00:13:47,160
there's this really cool environment

332
00:13:44,670 --> 00:13:49,650
variable called Jas profiler that will

333
00:13:47,160 --> 00:13:51,270
load anytime a script host stars so

334
00:13:49,650 --> 00:13:53,939
that's also interesting especially like

335
00:13:51,270 --> 00:13:55,319
if you're maybe doing dynamic analysis

336
00:13:53,940 --> 00:13:57,510
or you want to collect some data about a

337
00:13:55,320 --> 00:14:01,020
script so but also interesting if you

338
00:13:57,510 --> 00:14:04,680
wanted to inject a script into or a dll

339
00:14:01,020 --> 00:14:06,240
into any script that ran so and so I

340
00:14:04,680 --> 00:14:07,560
encourage you to go look at some of

341
00:14:06,240 --> 00:14:10,260
these there are a lot of environment

342
00:14:07,560 --> 00:14:12,089
variables that influence the loading

343
00:14:10,260 --> 00:14:15,810
I've talked about a couple app domain

344
00:14:12,090 --> 00:14:18,300
managers and you can look at the github

345
00:14:15,810 --> 00:14:19,530
repo for the.net framework and see a lot

346
00:14:18,300 --> 00:14:20,520
of these yourself and see like ask

347
00:14:19,530 --> 00:14:26,730
yourself like what would that actually

348
00:14:20,520 --> 00:14:29,730
do so okay so let's like bring it to a

349
00:14:26,730 --> 00:14:31,230
practical step so in 2017 James for

350
00:14:29,730 --> 00:14:33,870
shell did a really good talk on dotnet

351
00:14:31,230 --> 00:14:37,380
interrupt interrupt and he describes

352
00:14:33,870 --> 00:14:38,580
this activation context class let me

353
00:14:37,380 --> 00:14:40,650
give you a little bit a background of

354
00:14:38,580 --> 00:14:43,050
why this was interesting to me

355
00:14:40,650 --> 00:14:45,780
dynamic rapper X is this really

356
00:14:43,050 --> 00:14:47,400
interesting DLL that extends the script

357
00:14:45,780 --> 00:14:50,760
host I guess is a nice way to say it it

358
00:14:47,400 --> 00:14:52,650
lets you it lets you map API calls

359
00:14:50,760 --> 00:14:53,790
directly through VB script or J script

360
00:14:52,650 --> 00:14:55,410
now why is that interesting because

361
00:14:53,790 --> 00:14:58,199
normally you can't just call load

362
00:14:55,410 --> 00:15:00,510
library directly from a VB script or J

363
00:14:58,200 --> 00:15:01,830
script file so for example if you look

364
00:15:00,510 --> 00:15:04,500
at the bottom here we can create a

365
00:15:01,830 --> 00:15:07,140
dynamic wrapper class and we could say

366
00:15:04,500 --> 00:15:10,740
create or register the messagebox

367
00:15:07,140 --> 00:15:13,140
function which would be in user 32 we

368
00:15:10,740 --> 00:15:15,950
define the inputs the return values and

369
00:15:13,140 --> 00:15:18,350
now we can just make a direct API call

370
00:15:15,950 --> 00:15:19,519
now that's pretty cool it's a dll on

371
00:15:18,350 --> 00:15:21,110
disk and if you go look at the

372
00:15:19,519 --> 00:15:23,149
documentation for dynamic wrapper

373
00:15:21,110 --> 00:15:25,040
actions it kind of makes sense the early

374
00:15:23,149 --> 00:15:27,350
early phases but then there's actually

375
00:15:25,040 --> 00:15:28,819
registering just raw hex bytes that you

376
00:15:27,350 --> 00:15:30,529
can call you start thinking like I'm not

377
00:15:28,820 --> 00:15:33,529
sure a lot of comm developers need to

378
00:15:30,529 --> 00:15:35,720
like register you know assembly code or

379
00:15:33,529 --> 00:15:37,880
functions but you can use this your

380
00:15:35,720 --> 00:15:38,690
interpretation of that Mesilla pretty

381
00:15:37,880 --> 00:15:40,010
cool how many of you have heard of

382
00:15:38,690 --> 00:15:41,240
dynamic rapper X I think I've talked a

383
00:15:40,010 --> 00:15:44,389
little bit about it before but it's very

384
00:15:41,240 --> 00:15:47,389
good to to be aware so Co ADAC is a

385
00:15:44,389 --> 00:15:50,420
really cool framework that Sean rho0

386
00:15:47,389 --> 00:15:53,600
some 0x0 and this is an example of

387
00:15:50,420 --> 00:15:55,010
loading or setting up like the API calls

388
00:15:53,600 --> 00:15:56,899
it would be interesting to maybe

389
00:15:55,010 --> 00:15:59,870
offensive team so you have like virtual

390
00:15:56,899 --> 00:16:02,810
Alec right process memory create thread

391
00:15:59,870 --> 00:16:05,360
and so now I can do the entire shell

392
00:16:02,810 --> 00:16:08,479
code run or me me cast whatever I want

393
00:16:05,360 --> 00:16:12,139
to do right inside of a jscript file so

394
00:16:08,480 --> 00:16:13,399
that's really interesting and so what I

395
00:16:12,139 --> 00:16:16,579
want to show you now is a really easy

396
00:16:13,399 --> 00:16:19,399
way to just load a DLL into a JavaScript

397
00:16:16,579 --> 00:16:20,390
file so all you would do is set the TMP

398
00:16:19,399 --> 00:16:23,750
variable so when you look at this

399
00:16:20,390 --> 00:16:25,880
activation context class the location of

400
00:16:23,750 --> 00:16:28,310
the binary is really it's going to go

401
00:16:25,880 --> 00:16:32,000
look in TMP so by default that's like

402
00:16:28,310 --> 00:16:33,319
user update a local okay and so anything

403
00:16:32,000 --> 00:16:35,870
loading or running from there is

404
00:16:33,320 --> 00:16:37,130
probably suspect I know that may be a

405
00:16:35,870 --> 00:16:39,170
little bit hard to see but that's the in

406
00:16:37,130 --> 00:16:42,279
the manifest text that's just the name

407
00:16:39,170 --> 00:16:44,959
of the DLL so it says message box 64

408
00:16:42,279 --> 00:16:46,490
here is the path that I set up notice

409
00:16:44,959 --> 00:16:49,279
I'm setting an environment variable to

410
00:16:46,490 --> 00:16:51,620
the process and you could change that to

411
00:16:49,279 --> 00:16:54,050
user if you do change it to user that

412
00:16:51,620 --> 00:16:55,820
persists on a reboot and that's nice and

413
00:16:54,050 --> 00:16:57,649
then there's also system you'd have to

414
00:16:55,820 --> 00:16:59,810
have admin to change that as well I say

415
00:16:57,649 --> 00:17:01,850
instead of my temp for this process

416
00:16:59,810 --> 00:17:03,829
pointing to a plate a local go point

417
00:17:01,850 --> 00:17:07,160
into My Documents for this message box

418
00:17:03,829 --> 00:17:08,688
DLL I create app I created a thing

419
00:17:07,160 --> 00:17:10,549
called dynamic wrapper X that doesn't

420
00:17:08,689 --> 00:17:11,689
really actually have to be in the DLL

421
00:17:10,549 --> 00:17:14,720
what you're looking for here is like

422
00:17:11,689 --> 00:17:17,480
just load up a DLL and call DLL main so

423
00:17:14,720 --> 00:17:20,990
just that initialization function so and

424
00:17:17,480 --> 00:17:22,790
then that has to match line 10 whatever

425
00:17:20,990 --> 00:17:24,409
you created your class here I just use

426
00:17:22,790 --> 00:17:25,639
the same structure pretty

427
00:17:24,409 --> 00:17:27,380
straightforward all the other stuff is

428
00:17:25,640 --> 00:17:28,470
actually Harbert rarey like the gooood

429
00:17:27,380 --> 00:17:30,210
and some of these other things

430
00:17:28,470 --> 00:17:33,000
like they don't really matter and if

431
00:17:30,210 --> 00:17:35,309
you're just trying to get like vbscript

432
00:17:33,000 --> 00:17:37,620
to load your binary and take off from

433
00:17:35,309 --> 00:17:39,710
there so this is what it might look like

434
00:17:37,620 --> 00:17:43,918
so here's just a code snippet at the top

435
00:17:39,710 --> 00:17:45,510
you can see like here I'm just running

436
00:17:43,919 --> 00:17:48,090
this inside of a debugger and I just ran

437
00:17:45,510 --> 00:17:51,510
like set a breakpoint anytime the

438
00:17:48,090 --> 00:17:53,639
message box 64 DLL loads and so here you

439
00:17:51,510 --> 00:17:56,520
can see a very simple output suing that

440
00:17:53,640 --> 00:17:58,860
I just ran load library and then I was

441
00:17:56,520 --> 00:18:00,990
able to see the DLL loaded so that's

442
00:17:58,860 --> 00:18:03,209
kind of a neat primitive kind of

443
00:18:00,990 --> 00:18:04,950
interesting maybe useful maybe not a

444
00:18:03,210 --> 00:18:06,360
little bit older technology but I

445
00:18:04,950 --> 00:18:09,900
thought it was interesting because that

446
00:18:06,360 --> 00:18:11,219
really means like I can run any DLL from

447
00:18:09,900 --> 00:18:16,020
any location anywhere so let's do the

448
00:18:11,220 --> 00:18:23,039
demo so essentially if I if I type out

449
00:18:16,020 --> 00:18:24,059
the load library so in here I know

450
00:18:23,039 --> 00:18:25,559
that's a little hard to see but

451
00:18:24,059 --> 00:18:28,408
essentially I just got my manifest in

452
00:18:25,559 --> 00:18:31,530
the jscript file I've got the location I

453
00:18:28,409 --> 00:18:33,539
then point the manifest set the property

454
00:18:31,530 --> 00:18:39,809
create the dynamic wrapper X and so now

455
00:18:33,539 --> 00:18:41,580
if I just do C script library it pops my

456
00:18:39,809 --> 00:18:42,870
loads my deal I'll that's from the DLL

457
00:18:41,580 --> 00:18:44,070
main function so that's got a bit like I

458
00:18:42,870 --> 00:18:45,479
said a neat way it may just be that

459
00:18:44,070 --> 00:18:47,970
entry point that attackers are looking

460
00:18:45,480 --> 00:18:51,210
for so it may find that curious

461
00:18:47,970 --> 00:18:53,130
okay so observation again we created the

462
00:18:51,210 --> 00:18:55,500
manifest we set the temporary rule

463
00:18:53,130 --> 00:18:57,809
created the object we set the property

464
00:18:55,500 --> 00:19:00,390
to the path for the manifest and then

465
00:18:57,809 --> 00:19:02,070
we're able to load our binary doesn't

466
00:19:00,390 --> 00:19:03,900
really evade anything like in terms of

467
00:19:02,070 --> 00:19:06,059
like a whitelist or something like that

468
00:19:03,900 --> 00:19:07,679
hopefully you've got DLL whitelisting

469
00:19:06,059 --> 00:19:09,389
but just is still interesting so now

470
00:19:07,679 --> 00:19:12,659
that now I wanted to extend this so I

471
00:19:09,390 --> 00:19:15,090
wanted to be able to load it any dotnet

472
00:19:12,659 --> 00:19:17,730
assembly into J script or VB script so

473
00:19:15,090 --> 00:19:19,320
now I wanted to build my own assembly

474
00:19:17,730 --> 00:19:21,360
that had methods and properties that I

475
00:19:19,320 --> 00:19:24,059
could call just like dynamic wrapper X

476
00:19:21,360 --> 00:19:25,379
might let me do and then I wanted to be

477
00:19:24,059 --> 00:19:27,780
able to do that for any system32

478
00:19:25,380 --> 00:19:30,270
variable so if you're familiar with

479
00:19:27,780 --> 00:19:31,710
dotnet 2j script this is a similar

480
00:19:30,270 --> 00:19:34,620
approach it's just that you're loading

481
00:19:31,710 --> 00:19:36,840
it from disk instead of deserializing

482
00:19:34,620 --> 00:19:39,899
and assembly and we'll talk about some

483
00:19:36,840 --> 00:19:41,909
of the risks of that in a moment but for

484
00:19:39,899 --> 00:19:44,669
reference defined P and vote

485
00:19:41,910 --> 00:19:46,590
that is a really cool component in.net

486
00:19:44,670 --> 00:19:49,020
that lets you dynamically define those

487
00:19:46,590 --> 00:19:51,870
API calls you may want to use like you

488
00:19:49,020 --> 00:19:53,190
saw dynamic Ripper X using I'm really

489
00:19:51,870 --> 00:19:55,169
just putting this in for references a

490
00:19:53,190 --> 00:19:56,820
lot there but when you start using these

491
00:19:55,170 --> 00:19:58,530
type of reflection and building

492
00:19:56,820 --> 00:20:00,480
different components it gets a little

493
00:19:58,530 --> 00:20:01,139
bit confusing like what is what and what

494
00:20:00,480 --> 00:20:03,000
are the steps

495
00:20:01,140 --> 00:20:05,340
so hopefully that might help you

496
00:20:03,000 --> 00:20:06,810
organize your thinking around like the

497
00:20:05,340 --> 00:20:08,459
app domain is the beginning that it

498
00:20:06,810 --> 00:20:10,139
loads the assembly that modules have the

499
00:20:08,460 --> 00:20:12,300
different elements under there so I'll

500
00:20:10,140 --> 00:20:14,430
leave that up for too long just for

501
00:20:12,300 --> 00:20:16,680
reference okay so it's interesting

502
00:20:14,430 --> 00:20:18,840
because see script is in system 32

503
00:20:16,680 --> 00:20:22,770
directory I don't have write access to

504
00:20:18,840 --> 00:20:25,770
system 32 or do I and so how would I

505
00:20:22,770 --> 00:20:27,450
force a script to find my assembly well

506
00:20:25,770 --> 00:20:29,910
we're gonna use activation context to do

507
00:20:27,450 --> 00:20:32,910
that so it turns out if you look at the

508
00:20:29,910 --> 00:20:35,820
documentation that system 32 tasks is a

509
00:20:32,910 --> 00:20:37,290
read/write folder for any user and

510
00:20:35,820 --> 00:20:38,460
that's you can explore the different

511
00:20:37,290 --> 00:20:40,260
reasons and permissions but that's

512
00:20:38,460 --> 00:20:43,050
interesting because if you have a binary

513
00:20:40,260 --> 00:20:45,690
in system 32 and you tell it to load

514
00:20:43,050 --> 00:20:47,610
this app domain manager or assembly it

515
00:20:45,690 --> 00:20:49,650
will go look in the folder name that was

516
00:20:47,610 --> 00:20:51,449
related to the app assembly name that

517
00:20:49,650 --> 00:20:53,280
it's looking for so like you couldn't

518
00:20:51,450 --> 00:20:56,580
write to system 32 but turns out if you

519
00:20:53,280 --> 00:20:59,760
name your assembly tasks and put it in

520
00:20:56,580 --> 00:21:01,949
the tasks folder resolution happens just

521
00:20:59,760 --> 00:21:03,600
fine naturally so that's for defenders

522
00:21:01,950 --> 00:21:05,940
you probably watch for thing dll's

523
00:21:03,600 --> 00:21:09,629
loading from system 32 tasks directory

524
00:21:05,940 --> 00:21:11,550
is probably unusual just some code for

525
00:21:09,630 --> 00:21:13,950
reference these are some of the classes

526
00:21:11,550 --> 00:21:15,840
I wanted to create and methods pretty

527
00:21:13,950 --> 00:21:18,240
straightforward stuff here's the code

528
00:21:15,840 --> 00:21:20,399
you would essentially set your manifests

529
00:21:18,240 --> 00:21:22,530
and then you would say you know create

530
00:21:20,400 --> 00:21:24,090
an object now called my DLL operations

531
00:21:22,530 --> 00:21:25,860
which is going to be referenced from the

532
00:21:24,090 --> 00:21:28,290
manifest notice you're using the ax

533
00:21:25,860 --> 00:21:30,840
object that you created here and now I

534
00:21:28,290 --> 00:21:32,580
can call any function like you know get

535
00:21:30,840 --> 00:21:35,129
value trigger the assembly now I've

536
00:21:32,580 --> 00:21:37,199
written an assembly to system 32 tasks

537
00:21:35,130 --> 00:21:39,810
and I've loaded it through J script and

538
00:21:37,200 --> 00:21:41,820
I can call my own methods and property

539
00:21:39,810 --> 00:21:43,230
so that's exciting to me not as exciting

540
00:21:41,820 --> 00:21:45,389
as done that to J script but still cool

541
00:21:43,230 --> 00:21:46,920
way to extend the script oh so okay

542
00:21:45,390 --> 00:21:49,140
we're getting closing in on time so let

543
00:21:46,920 --> 00:21:51,390
me just go a little bit quicker so it

544
00:21:49,140 --> 00:21:53,020
does require a DLL on disk it only

545
00:21:51,390 --> 00:21:54,220
effects C script could we low

546
00:21:53,020 --> 00:21:56,470
you know the question might be could we

547
00:21:54,220 --> 00:22:00,429
load a dotnet assembly into other dotnet

548
00:21:56,470 --> 00:22:02,700
binaries the answer is yes but first a

549
00:22:00,429 --> 00:22:05,410
word on single file bias so very often

550
00:22:02,700 --> 00:22:07,990
as defenders or researchers we look at a

551
00:22:05,410 --> 00:22:09,550
single binary or single process in

552
00:22:07,990 --> 00:22:11,830
isolation when in reality these are

553
00:22:09,550 --> 00:22:13,780
complex systems with different parts and

554
00:22:11,830 --> 00:22:15,280
so one of the things you may want to do

555
00:22:13,780 --> 00:22:16,960
is even though you put something down on

556
00:22:15,280 --> 00:22:19,690
disk it may just be a very minimal

557
00:22:16,960 --> 00:22:21,580
gadget that needs extra capability fed

558
00:22:19,690 --> 00:22:24,550
to it through a script file or config

559
00:22:21,580 --> 00:22:26,710
file so once you start breaking things

560
00:22:24,550 --> 00:22:29,020
into multiple elements that's a really

561
00:22:26,710 --> 00:22:31,300
hard thing like it's harder to upload

562
00:22:29,020 --> 00:22:32,679
like 12 files the virustotal and get

563
00:22:31,300 --> 00:22:36,010
them to be analyzed all at the same time

564
00:22:32,679 --> 00:22:37,960
that's an example so in summary keep

565
00:22:36,010 --> 00:22:40,510
your gadgets small encrypt anything that

566
00:22:37,960 --> 00:22:43,870
touches disk and it may help evade or

567
00:22:40,510 --> 00:22:46,300
slow down reverse engineering so so the

568
00:22:43,870 --> 00:22:50,139
question you may have is like what are

569
00:22:46,300 --> 00:22:52,360
the system32 dotnet binaries I used mat

570
00:22:50,140 --> 00:22:53,710
grabbers PowerShell Arsenal to search

571
00:22:52,360 --> 00:22:55,500
and see like what are the things that

572
00:22:53,710 --> 00:22:57,970
are referencing the dotnet framework

573
00:22:55,500 --> 00:22:58,929
Matt had a really good tweet that

574
00:22:57,970 --> 00:23:01,450
basically said you can also use

575
00:22:58,929 --> 00:23:05,170
reflection load to determine the same

576
00:23:01,450 --> 00:23:06,820
thing and also Paul had a really good

577
00:23:05,170 --> 00:23:08,290
blog that defines a lot of what I'm

578
00:23:06,820 --> 00:23:09,730
describing here and I know we're kind of

579
00:23:08,290 --> 00:23:10,809
going through this quick but he did a

580
00:23:09,730 --> 00:23:13,480
really good job of looking at app

581
00:23:10,809 --> 00:23:15,399
domains and looking at persistence so

582
00:23:13,480 --> 00:23:19,150
these are the binaries that will load

583
00:23:15,400 --> 00:23:21,550
dotnet assemblies so the steps would be

584
00:23:19,150 --> 00:23:24,070
simply copy your task dll into that

585
00:23:21,550 --> 00:23:25,870
folder to change a few environment

586
00:23:24,070 --> 00:23:28,870
variables and now you can load up your

587
00:23:25,870 --> 00:23:31,809
assembly so let's look at the code this

588
00:23:28,870 --> 00:23:33,760
is simply an app domain manager inherits

589
00:23:31,809 --> 00:23:36,730
from the app domain class like I said

590
00:23:33,760 --> 00:23:38,320
all this is going to be on github this

591
00:23:36,730 --> 00:23:39,700
is what the jscript file would look like

592
00:23:38,320 --> 00:23:42,159
to load it

593
00:23:39,700 --> 00:23:43,330
and let's load Mimi cats into something

594
00:23:42,160 --> 00:23:45,400
new that no one's ever seen before

595
00:23:43,330 --> 00:23:47,169
because that's fun it's the last Derby

596
00:23:45,400 --> 00:23:50,220
con so I'm gonna load Mimi cats into

597
00:23:47,170 --> 00:23:55,230
this TS WPF WRP dot exe because why not

598
00:23:50,220 --> 00:24:01,870
so if you if you look at the demo file

599
00:23:55,230 --> 00:24:05,160
we can see I've got I think I did cat

600
00:24:01,870 --> 00:24:07,600
instead of type which was affected by my

601
00:24:05,160 --> 00:24:09,660
so the demo dot bat just sets to

602
00:24:07,600 --> 00:24:11,620
environment variables app domain manager

603
00:24:09,660 --> 00:24:13,300
location and then the test fold I've

604
00:24:11,620 --> 00:24:15,459
already copied it into the folder so

605
00:24:13,300 --> 00:24:17,169
just so there's no magic there we're

606
00:24:15,460 --> 00:24:21,670
gonna go ahead and run the tool you can

607
00:24:17,170 --> 00:24:23,470
see here if I do task manager and look

608
00:24:21,670 --> 00:24:26,140
at the details there's not a process

609
00:24:23,470 --> 00:24:29,020
named Mima cats you can actually just

610
00:24:26,140 --> 00:24:31,600
see that we're running in the new file

611
00:24:29,020 --> 00:24:34,690
down here so pretty cool cool way to

612
00:24:31,600 --> 00:24:37,719
load assemblies and so I think I'm close

613
00:24:34,690 --> 00:24:38,620
out of time so I'm going to stop closing

614
00:24:37,720 --> 00:24:40,630
thoughts I'll just leave it with this

615
00:24:38,620 --> 00:24:43,419
thank you I'll jump through real quick

616
00:24:40,630 --> 00:24:46,110
to the last slide where the references

617
00:24:43,420 --> 00:24:46,110
are thank you for your time

