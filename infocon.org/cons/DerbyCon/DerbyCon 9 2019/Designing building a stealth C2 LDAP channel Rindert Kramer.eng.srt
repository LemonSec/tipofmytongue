1
00:00:18,949 --> 00:00:24,510
all right so hello everyone welcome if

2
00:00:22,560 --> 00:00:27,390
my talk about designing and building a

3
00:00:24,510 --> 00:00:28,619
stealth sea to Alder channel my name is

4
00:00:27,390 --> 00:00:30,599
Linda scammer

5
00:00:28,619 --> 00:00:34,829
I'm from Holland the Netherlands

6
00:00:30,599 --> 00:00:36,210
netherworld I'm a hacker at Fox 18 and I

7
00:00:34,829 --> 00:00:38,730
love extreme that's all Active Directory

8
00:00:36,210 --> 00:00:40,290
meets regular expressions and that's it

9
00:00:38,730 --> 00:00:41,968
for the introduction I have too much

10
00:00:40,290 --> 00:00:44,370
image to share with you guys and I

11
00:00:41,969 --> 00:00:45,899
haven't got enough time so if you're

12
00:00:44,370 --> 00:00:47,550
interesting about a prior work Suffolk

13
00:00:45,899 --> 00:00:51,289
that's hit me up for a cup of coffee or

14
00:00:47,550 --> 00:00:54,328
beer and I'll bring you up to speed so

15
00:00:51,289 --> 00:00:56,610
about this presentation how did I end up

16
00:00:54,329 --> 00:00:58,230
with a back door that works over LDAP

17
00:00:56,610 --> 00:01:00,420
and how do we build something like that

18
00:00:58,230 --> 00:01:02,398
and a little bit information a little

19
00:01:00,420 --> 00:01:06,630
bit information about helping the blue

20
00:01:02,399 --> 00:01:10,290
team so a little bit of background story

21
00:01:06,630 --> 00:01:11,729
meaning colleague we're at a client that

22
00:01:10,290 --> 00:01:14,960
had multiple networks that were

23
00:01:11,729 --> 00:01:16,950
physically separated from each other and

24
00:01:14,960 --> 00:01:18,899
all the networks were completely

25
00:01:16,950 --> 00:01:20,670
isolated from each other except from one

26
00:01:18,900 --> 00:01:23,880
major overlapping component which was

27
00:01:20,670 --> 00:01:25,549
Active Directory and this is how that

28
00:01:23,880 --> 00:01:27,539
look like so

29
00:01:25,549 --> 00:01:29,549
network segment a and that you can see

30
00:01:27,540 --> 00:01:31,290
right over there I was able to connect

31
00:01:29,549 --> 00:01:33,180
to the internet well segment Network

32
00:01:31,290 --> 00:01:34,439
segment B could not connect to the

33
00:01:33,180 --> 00:01:35,939
internet and was completely firewalls

34
00:01:34,439 --> 00:01:38,399
and was only able to reach the domain

35
00:01:35,939 --> 00:01:40,979
and that domain was shared between other

36
00:01:38,400 --> 00:01:43,470
networks as well and we had physical

37
00:01:40,979 --> 00:01:45,869
exits on workstation in both network

38
00:01:43,470 --> 00:01:47,610
segments but we wanted to control the

39
00:01:45,869 --> 00:01:49,920
next the workstation workstation

40
00:01:47,610 --> 00:01:52,110
remotely so we thought it would be

41
00:01:49,920 --> 00:01:54,090
really nice if you were able to route

42
00:01:52,110 --> 00:01:57,979
data from network a over Active

43
00:01:54,090 --> 00:02:00,659
Directory over L up to network segment B

44
00:01:57,979 --> 00:02:03,000
so that's what we did and we started off

45
00:02:00,659 --> 00:02:06,750
small by building a really simple LDAP

46
00:02:03,000 --> 00:02:08,580
channel and every user accounts has by

47
00:02:06,750 --> 00:02:11,840
default read and write permissions to

48
00:02:08,580 --> 00:02:11,840
modify some of their attributes

49
00:02:12,760 --> 00:02:16,190
for example you can modify public

50
00:02:14,930 --> 00:02:18,080
information such as your telephone

51
00:02:16,190 --> 00:02:21,500
number your street address your office

52
00:02:18,080 --> 00:02:23,210
whatever and many other public

53
00:02:21,500 --> 00:02:24,890
information attributes basically and

54
00:02:23,210 --> 00:02:26,540
these attributes needs to be accessible

55
00:02:24,890 --> 00:02:28,279
needs to be readable for every other

56
00:02:26,540 --> 00:02:30,709
user accounts in the same domain or

57
00:02:28,280 --> 00:02:32,360
other domains otherwise how would Alice

58
00:02:30,710 --> 00:02:34,160
find Bob's new telephone number and

59
00:02:32,360 --> 00:02:36,050
since every account can write

60
00:02:34,160 --> 00:02:38,180
information to its account that's

61
00:02:36,050 --> 00:02:39,830
accessible by also other accounts it

62
00:02:38,180 --> 00:02:43,220
means that basically we can use Active

63
00:02:39,830 --> 00:02:45,680
Directory as a data proxy I like high

64
00:02:43,220 --> 00:02:47,930
level of use so another one and let's

65
00:02:45,680 --> 00:02:50,630
say that we use the same user account in

66
00:02:47,930 --> 00:02:53,090
network segment a and we used same user

67
00:02:50,630 --> 00:02:54,680
accounts also in network segment B so

68
00:02:53,090 --> 00:02:57,020
from network segment a we write IP

69
00:02:54,680 --> 00:02:58,850
config into the info attribute of the

70
00:02:57,020 --> 00:03:00,860
user account and from network segment B

71
00:02:58,850 --> 00:03:02,180
we reach the IP config also from the

72
00:03:00,860 --> 00:03:04,220
inference with and we execute a command

73
00:03:02,180 --> 00:03:08,390
and we process the data that's basically

74
00:03:04,220 --> 00:03:09,740
how that works so a little demo so on

75
00:03:08,390 --> 00:03:12,708
the Left which you can also see in the

76
00:03:09,740 --> 00:03:15,380
top is Alice which will issue a command

77
00:03:12,709 --> 00:03:17,120
over LDAP which will execute it which

78
00:03:15,380 --> 00:03:20,739
will be executed on Bob's workstation

79
00:03:17,120 --> 00:03:20,739
which in the on the right

80
00:03:55,099 --> 00:04:08,578
okay so now we know that that works so

81
00:04:00,450 --> 00:04:10,349
any questions now I just kidding no

82
00:04:08,579 --> 00:04:11,700
we're not done not quite yet

83
00:04:10,349 --> 00:04:14,328
people already built some proof of

84
00:04:11,700 --> 00:04:17,339
concepts doing the exact same thing

85
00:04:14,329 --> 00:04:20,039
there's a block tip go read it after

86
00:04:17,339 --> 00:04:21,478
this talk obviously but I'm joy from

87
00:04:20,039 --> 00:04:24,419
Specter offs wrote a really nice blog

88
00:04:21,478 --> 00:04:28,199
post about this technique Riggle go

89
00:04:24,419 --> 00:04:31,049
check it down but it also depends there

90
00:04:28,199 --> 00:04:32,550
works quite some issues and well it

91
00:04:31,050 --> 00:04:33,780
depends on the replication between the

92
00:04:32,550 --> 00:04:35,699
mexisolar so for example if you write

93
00:04:33,780 --> 00:04:37,948
the message the bailouts to do make

94
00:04:35,699 --> 00:04:40,710
solar a but you read the message from

95
00:04:37,949 --> 00:04:43,979
domain controller B you might have to

96
00:04:40,710 --> 00:04:46,590
wait for the replication in order to get

97
00:04:43,979 --> 00:04:48,659
the data basically and the info

98
00:04:46,590 --> 00:04:50,400
attribute that we used in the demo only

99
00:04:48,660 --> 00:04:53,460
can only store around one kilobyte of

100
00:04:50,400 --> 00:04:55,138
data but if you want to send large

101
00:04:53,460 --> 00:04:58,590
messages then just want tell by which is

102
00:04:55,139 --> 00:05:00,960
often the case do you need more space or

103
00:04:58,590 --> 00:05:02,190
you need to fragment the messages and

104
00:05:00,960 --> 00:05:05,280
the accounts were pre-configured which

105
00:05:02,190 --> 00:05:08,940
which wasn't idly not really idle as

106
00:05:05,280 --> 00:05:10,530
well so that's why I decided to build a

107
00:05:08,940 --> 00:05:13,110
more advanced LDAP channel that

108
00:05:10,530 --> 00:05:14,669
mitigates most of these issues so a

109
00:05:13,110 --> 00:05:16,020
small spoiler for the end of the

110
00:05:14,669 --> 00:05:17,820
presentation but I wrote a tool that's

111
00:05:16,020 --> 00:05:20,549
able to Alta to offer our clients a

112
00:05:17,820 --> 00:05:22,169
server fragments the messages based on

113
00:05:20,550 --> 00:05:24,599
the attribute length that's selected and

114
00:05:22,169 --> 00:05:27,508
exchange information such as accounts

115
00:05:24,599 --> 00:05:31,889
attributes as you see Jackson's proxy

116
00:05:27,509 --> 00:05:34,020
data and more but there are no solutions

117
00:05:31,889 --> 00:05:35,400
without having a problem first and there

118
00:05:34,020 --> 00:05:36,630
were quite some hurdles that means we

119
00:05:35,400 --> 00:05:40,739
have come during the development of that

120
00:05:36,630 --> 00:05:42,960
tool and in the last demo we use the

121
00:05:40,740 --> 00:05:44,220
info attribute but what if what if the

122
00:05:42,960 --> 00:05:45,710
end four attributes already contains

123
00:05:44,220 --> 00:05:46,919
data are we going to overwrite it with

124
00:05:45,710 --> 00:05:50,070
yeah

125
00:05:46,919 --> 00:05:51,448
gibberish crap days up for example so

126
00:05:50,070 --> 00:05:53,639
choosing a difference attributes is the

127
00:05:51,449 --> 00:05:57,750
solution for that but how do we choose

128
00:05:53,639 --> 00:06:00,210
as we and which one and I also wanted it

129
00:05:57,750 --> 00:06:01,409
to be a stealth as possible so the new

130
00:06:00,210 --> 00:06:03,719
attributes has been selected for example

131
00:06:01,409 --> 00:06:05,010
but I did not want to communicate the

132
00:06:03,719 --> 00:06:08,110
name of des Baux directly over the

133
00:06:05,010 --> 00:06:10,300
network via LDAP

134
00:06:08,110 --> 00:06:11,740
I wanted to share the name of the Ezra

135
00:06:10,300 --> 00:06:13,180
basically without sharing the name of

136
00:06:11,740 --> 00:06:16,170
the attribute so chicken egg problem

137
00:06:13,180 --> 00:06:19,660
gets you into but how do you do that

138
00:06:16,170 --> 00:06:21,490
another issue replication so chances are

139
00:06:19,660 --> 00:06:22,990
that the transfer rate of the LDAP

140
00:06:21,490 --> 00:06:26,890
Channel is higher than the replication

141
00:06:22,990 --> 00:06:29,890
occurs between domain controllers yeah

142
00:06:26,890 --> 00:06:31,240
how do you fix that and how do we

143
00:06:29,890 --> 00:06:32,590
communicate the choisnet screech I mean

144
00:06:31,240 --> 00:06:34,840
we needs an attribute in the first place

145
00:06:32,590 --> 00:06:36,310
to communicate over Active Directory so

146
00:06:34,840 --> 00:06:40,390
if there's no edge which we can not

147
00:06:36,310 --> 00:06:41,380
communicate and how do we know if and

148
00:06:40,390 --> 00:06:43,120
when a message has been received

149
00:06:41,380 --> 00:06:46,060
correctly and if the integrity is

150
00:06:43,120 --> 00:06:48,430
maintains and stuff like that and what

151
00:06:46,060 --> 00:06:49,780
if the message of the board payload size

152
00:06:48,430 --> 00:06:52,390
is bigger than the maximum at which

153
00:06:49,780 --> 00:06:54,039
space and the last one yeah the whole

154
00:06:52,390 --> 00:06:56,020
l-dub channel depends on working user

155
00:06:54,040 --> 00:06:59,260
accounts and I didn't want to configure

156
00:06:56,020 --> 00:07:00,729
user account editing so how do both

157
00:06:59,260 --> 00:07:01,900
client to server Alice and Bob basically

158
00:07:00,730 --> 00:07:05,800
find each other

159
00:07:01,900 --> 00:07:07,929
independently so the first step that I

160
00:07:05,800 --> 00:07:10,300
took was to query every user attributes

161
00:07:07,930 --> 00:07:12,310
from the ad schema as well as all the

162
00:07:10,300 --> 00:07:14,140
domain source and I store this

163
00:07:12,310 --> 00:07:17,350
information into two separate hash

164
00:07:14,140 --> 00:07:18,700
tables so as for how to choose the right

165
00:07:17,350 --> 00:07:21,690
edge with that we're going to use for

166
00:07:18,700 --> 00:07:23,920
proxy and data between Alice and Bob I

167
00:07:21,690 --> 00:07:25,090
created a small process to select a

168
00:07:23,920 --> 00:07:27,430
suitable attribute that we can work with

169
00:07:25,090 --> 00:07:29,619
basically and so we query all the user

170
00:07:27,430 --> 00:07:31,990
attributes and we check for each

171
00:07:29,620 --> 00:07:33,760
attribute if it's contains data if the

172
00:07:31,990 --> 00:07:35,770
user has write permissions with if the

173
00:07:33,760 --> 00:07:37,960
user can actually clear the attribute

174
00:07:35,770 --> 00:07:39,880
and if that's all checks out positively

175
00:07:37,960 --> 00:07:42,310
we add the attributes to an array and

176
00:07:39,880 --> 00:07:44,469
for now because of bandwidth and speed

177
00:07:42,310 --> 00:07:47,470
reasons yes root with the maximum length

178
00:07:44,470 --> 00:07:51,730
is selected for storing data between

179
00:07:47,470 --> 00:07:53,950
Alice and Bob and for dates are not

180
00:07:51,730 --> 00:07:55,180
ending up in the GUI I could not find a

181
00:07:53,950 --> 00:07:58,840
really reliable way to identify

182
00:07:55,180 --> 00:08:02,080
attributes to add identified objects but

183
00:07:58,840 --> 00:08:04,179
so I created a blacklist in code that

184
00:08:02,080 --> 00:08:05,440
contains attributes like the telephone

185
00:08:04,180 --> 00:08:06,930
numbers to its address and stuff like

186
00:08:05,440 --> 00:08:09,820
that that ends up in the address book

187
00:08:06,930 --> 00:08:11,880
now that's what's the most efficient

188
00:08:09,820 --> 00:08:14,200
solution that I could think of

189
00:08:11,880 --> 00:08:16,750
well yeah how do we share this attribute

190
00:08:14,200 --> 00:08:19,110
without sharing the name so let me take

191
00:08:16,750 --> 00:08:19,110
a sip of water

192
00:08:20,319 --> 00:08:24,129
so we just selected one expert that we

193
00:08:22,779 --> 00:08:25,869
were using for sharing data between

194
00:08:24,129 --> 00:08:29,740
Alice and Bob between to set and network

195
00:08:25,869 --> 00:08:31,899
segments but since Alice and Bob Klein's

196
00:08:29,740 --> 00:08:33,130
a server queries all the attributes from

197
00:08:31,899 --> 00:08:37,029
the scheme and sort it into a hash table

198
00:08:33,130 --> 00:08:38,740
we can simply send the hash from the

199
00:08:37,029 --> 00:08:42,219
chosen attribute and send it over LDAP

200
00:08:38,740 --> 00:08:45,220
from Alice to Bob and they both sites

201
00:08:42,219 --> 00:08:46,870
can basically use the hash to resolve

202
00:08:45,220 --> 00:08:49,120
the actual attribute name based on the

203
00:08:46,870 --> 00:08:52,480
hash so you just sent the hash over held

204
00:08:49,120 --> 00:08:53,740
up from the one and to the other you can

205
00:08:52,480 --> 00:08:58,360
resolve the attribute name based on the

206
00:08:53,740 --> 00:09:01,569
hash so how do we for its application

207
00:08:58,360 --> 00:09:03,040
issues all domain controllers were also

208
00:09:01,569 --> 00:09:05,290
queried during startup and store it into

209
00:09:03,040 --> 00:09:06,790
a hash table and I didn't want to send a

210
00:09:05,290 --> 00:09:08,139
fully qualified domain name of the

211
00:09:06,790 --> 00:09:12,490
domain controller that we're going to

212
00:09:08,139 --> 00:09:13,660
use of the line as well so also the hash

213
00:09:12,490 --> 00:09:18,850
of the children domain controller is

214
00:09:13,660 --> 00:09:20,709
shared between Alice and Bob so we have

215
00:09:18,850 --> 00:09:22,600
a suitable spirit we know what to share

216
00:09:20,709 --> 00:09:24,069
of data attributes we know how to force

217
00:09:22,600 --> 00:09:25,149
a replication issues but we still need

218
00:09:24,069 --> 00:09:28,209
an expert in the first place to

219
00:09:25,149 --> 00:09:31,500
communicate and I couldn't think of real

220
00:09:28,209 --> 00:09:33,449
reliable way for sharing data initially

221
00:09:31,500 --> 00:09:36,639
other than having some static

222
00:09:33,449 --> 00:09:38,439
placeholders so luckily there are some

223
00:09:36,639 --> 00:09:40,240
really old attributes that are part of

224
00:09:38,440 --> 00:09:43,209
the ad schema since a very long time and

225
00:09:40,240 --> 00:09:45,779
I chose these three mainly because I

226
00:09:43,209 --> 00:09:49,779
think they are induced as often anymore

227
00:09:45,779 --> 00:09:51,250
and yeah one of these three is chosen

228
00:09:49,779 --> 00:09:53,260
randomly and the initial data that's

229
00:09:51,250 --> 00:09:59,220
used for other discovery basically is

230
00:09:53,260 --> 00:09:59,220
written to one of these attributes so

231
00:09:59,819 --> 00:10:05,050
how do we know if a message has been

232
00:10:02,470 --> 00:10:07,149
received correctly so I chose to

233
00:10:05,050 --> 00:10:10,089
influence your C for this whole protocol

234
00:10:07,149 --> 00:10:11,529
basically so besides the data attribute

235
00:10:10,089 --> 00:10:14,439
that's used to transfer data between

236
00:10:11,529 --> 00:10:16,959
Alice and Bob I chose another attribute

237
00:10:14,439 --> 00:10:18,939
that is another attribute is selected

238
00:10:16,959 --> 00:10:21,790
that will contain the C or C checksums

239
00:10:18,939 --> 00:10:26,250
and the attribute is selected in the

240
00:10:21,790 --> 00:10:29,469
exact same way as the data attribute so

241
00:10:26,250 --> 00:10:32,050
nice flow so in order to send a message

242
00:10:29,470 --> 00:10:34,010
from Alice to Bob Alice would first

243
00:10:32,050 --> 00:10:35,479
calculates the CRC of the

244
00:10:34,010 --> 00:10:38,090
message herself before she sends it

245
00:10:35,480 --> 00:10:39,590
since it's over held up to bubble and as

246
00:10:38,090 --> 00:10:43,070
she sends to Bob she will monitor Bob

247
00:10:39,590 --> 00:10:44,450
CRC attribute to see if it contains data

248
00:10:43,070 --> 00:10:46,010
and if it contains data analysts will

249
00:10:44,450 --> 00:10:48,110
verify if the data that's in the

250
00:10:46,010 --> 00:10:50,720
attribute if it's matches this year see

251
00:10:48,110 --> 00:10:52,310
that you calculated herself if that's

252
00:10:50,720 --> 00:10:55,160
match then the message has to be sent to

253
00:10:52,310 --> 00:10:57,500
receive correctly if it's not a match

254
00:10:55,160 --> 00:10:59,540
she will increase accounts basically and

255
00:10:57,500 --> 00:11:02,390
she will wait up until one second

256
00:10:59,540 --> 00:11:03,610
in 100 milliseconds in false to wait for

257
00:11:02,390 --> 00:11:08,540
Bob to receive the message correctly

258
00:11:03,610 --> 00:11:11,240
basically so the process on the

259
00:11:08,540 --> 00:11:13,459
receiving end is much simpler so after a

260
00:11:11,240 --> 00:11:15,170
new message has to be received this you

261
00:11:13,460 --> 00:11:17,060
see is calculated and written to the COC

262
00:11:15,170 --> 00:11:21,589
attributes after which the message will

263
00:11:17,060 --> 00:11:24,739
be processed by the receiving end so

264
00:11:21,590 --> 00:11:26,420
what about fragmentation so every

265
00:11:24,740 --> 00:11:28,220
message that's written to the data

266
00:11:26,420 --> 00:11:30,740
attribute contains information such as

267
00:11:28,220 --> 00:11:33,620
message IDs the number of parts it

268
00:11:30,740 --> 00:11:35,810
contains of the data itself and it's

269
00:11:33,620 --> 00:11:38,690
base64 encoded which also increased some

270
00:11:35,810 --> 00:11:40,219
overheads or add some overhead but let's

271
00:11:38,690 --> 00:11:44,450
say that the attribute space has room

272
00:11:40,220 --> 00:11:47,540
for one kilobyte so to fragment a

273
00:11:44,450 --> 00:11:48,950
message of one-and-a-half kilobyte the

274
00:11:47,540 --> 00:11:51,500
message will be split in two parts and

275
00:11:48,950 --> 00:11:53,600
sent separately so one part will be one

276
00:11:51,500 --> 00:11:56,750
kilobyte and the other part will be half

277
00:11:53,600 --> 00:11:59,600
kilobytes and it's track keeps track off

278
00:11:56,750 --> 00:12:01,520
and stuff like that so after all

279
00:11:59,600 --> 00:12:03,140
fragments of be received the fragments

280
00:12:01,520 --> 00:12:06,140
are referred back into the original

281
00:12:03,140 --> 00:12:07,490
state and yeah by using this methods

282
00:12:06,140 --> 00:12:11,360
basically you can send pretty large

283
00:12:07,490 --> 00:12:14,540
files over the network with LDAP and

284
00:12:11,360 --> 00:12:16,790
it's pretty reliable way basically yeah

285
00:12:14,540 --> 00:12:19,189
so we know which routes are used in the

286
00:12:16,790 --> 00:12:20,120
process which know my crystal which to

287
00:12:19,190 --> 00:12:22,790
Megatron is used

288
00:12:20,120 --> 00:12:24,830
CFC stuff like that but how do client

289
00:12:22,790 --> 00:12:28,069
and server independently find each other

290
00:12:24,830 --> 00:12:30,800
and at 24 bytes string is built with the

291
00:12:28,070 --> 00:12:32,420
information of the hash of the data the

292
00:12:30,800 --> 00:12:34,459
hash of the CRC attributes and the hash

293
00:12:32,420 --> 00:12:36,110
of the next roller and that hash is

294
00:12:34,460 --> 00:12:37,940
written to one of the static

295
00:12:36,110 --> 00:12:42,800
placeholders or a truth that we defined

296
00:12:37,940 --> 00:12:44,690
earlier and the tool will basically

297
00:12:42,800 --> 00:12:49,060
query the whole Active Directory domain

298
00:12:44,690 --> 00:12:49,060
for user accounts that

299
00:12:49,930 --> 00:12:53,810
sorry the tool will basically query the

300
00:12:52,340 --> 00:12:56,330
whole domain for these attributes that

301
00:12:53,810 --> 00:12:58,729
are present on user accounts and if they

302
00:12:56,330 --> 00:13:00,260
contain data and it's it's parsed and if

303
00:12:58,730 --> 00:13:02,260
part successfully both client and server

304
00:13:00,260 --> 00:13:04,670
basically have identified to each other

305
00:13:02,260 --> 00:13:06,050
but also now which do make a solar it

306
00:13:04,670 --> 00:13:08,569
should be used within the process which

307
00:13:06,050 --> 00:13:12,680
are called which attributes we for data

308
00:13:08,570 --> 00:13:15,470
on which it's built for CRC so now we

309
00:13:12,680 --> 00:13:17,959
have everything in place to create an

310
00:13:15,470 --> 00:13:19,700
interactive channel over Elda and I

311
00:13:17,960 --> 00:13:21,950
wanted to weaponize it with called

312
00:13:19,700 --> 00:13:23,600
strike so called strike has an

313
00:13:21,950 --> 00:13:26,450
experimental interface that allows you

314
00:13:23,600 --> 00:13:33,410
to create your own transport channel so

315
00:13:26,450 --> 00:13:35,060
that's what I did and next I so in order

316
00:13:33,410 --> 00:13:37,040
to get scopes right working over l-dub I

317
00:13:35,060 --> 00:13:39,050
added two more properties the hatch of

318
00:13:37,040 --> 00:13:40,280
the architecture which is resolved

319
00:13:39,050 --> 00:13:44,660
basically on the same way as the other

320
00:13:40,280 --> 00:13:47,420
its use hashes of the attributes and

321
00:13:44,660 --> 00:13:50,540
randomized part name and called strike

322
00:13:47,420 --> 00:13:52,069
works basically almost right back so the

323
00:13:50,540 --> 00:13:53,990
experimental interface of cob strike

324
00:13:52,070 --> 00:13:55,730
will create the dol injectable payload

325
00:13:53,990 --> 00:13:57,680
that if you inject it it will start a

326
00:13:55,730 --> 00:13:59,270
named pipe server and you can specify

327
00:13:57,680 --> 00:14:03,709
the name of the name pipe server as well

328
00:13:59,270 --> 00:14:05,030
which is the pipe name there so this

329
00:14:03,710 --> 00:14:07,730
information is relayed to the external

330
00:14:05,030 --> 00:14:10,579
interface of called strike and cop psych

331
00:14:07,730 --> 00:14:13,339
will serve own customized reflective DLL

332
00:14:10,580 --> 00:14:14,270
and this ETL is injected into a new

333
00:14:13,339 --> 00:14:17,270
suspended process

334
00:14:14,270 --> 00:14:22,449
notepad which will start a new name pipe

335
00:14:17,270 --> 00:14:24,380
server so I used the external situ

336
00:14:22,450 --> 00:14:26,960
documentation as inspiration for that

337
00:14:24,380 --> 00:14:28,790
basically but this basically how it

338
00:14:26,960 --> 00:14:30,770
works so Alice and Bob find each other

339
00:14:28,790 --> 00:14:32,569
during the other discover and so the

340
00:14:30,770 --> 00:14:34,160
name of the name pipe in architecture

341
00:14:32,570 --> 00:14:36,770
and stuff like that is exchanged and

342
00:14:34,160 --> 00:14:38,000
Alice will for did this to the code

343
00:14:36,770 --> 00:14:41,060
strike external situ

344
00:14:38,000 --> 00:14:43,520
server code strike will return the

345
00:14:41,060 --> 00:14:46,010
payload to Alice and Alice will relay or

346
00:14:43,520 --> 00:14:48,110
send the data back to Bob over exit

347
00:14:46,010 --> 00:14:49,850
Directory or LDAP and Bob will inject it

348
00:14:48,110 --> 00:14:52,700
into a new process which will start a

349
00:14:49,850 --> 00:14:54,110
new name pipe server beaucoup next to

350
00:14:52,700 --> 00:14:55,640
the name pipe server gets all the data

351
00:14:54,110 --> 00:14:58,190
that's already on the name pipe server

352
00:14:55,640 --> 00:14:59,750
and forward it back to Alice over LDAP

353
00:14:58,190 --> 00:15:01,840
and Alice will write it back to the

354
00:14:59,750 --> 00:15:04,300
external C to surf

355
00:15:01,840 --> 00:15:06,790
so at this point I knew as be beacon

356
00:15:04,300 --> 00:15:08,229
will appear in covered strike and let's

357
00:15:06,790 --> 00:15:09,579
say that we want to run a task for

358
00:15:08,230 --> 00:15:12,490
example taking screenshots or run

359
00:15:09,580 --> 00:15:14,410
ipconfig or stuff like that the task

360
00:15:12,490 --> 00:15:17,230
will be sent to Alice and Alice will

361
00:15:14,410 --> 00:15:19,900
relate the task over LDAP back to Bob

362
00:15:17,230 --> 00:15:22,600
and Bob will write the task on the name

363
00:15:19,900 --> 00:15:26,319
pipe server and the pipe servers will

364
00:15:22,600 --> 00:15:28,540
basically process the task will write

365
00:15:26,320 --> 00:15:30,070
the response back on the name pipe Bob

366
00:15:28,540 --> 00:15:33,370
will read the name pipe will write back

367
00:15:30,070 --> 00:15:35,170
on the L over L dub back to Alice now

368
00:15:33,370 --> 00:15:36,490
and that's basically it and the process

369
00:15:35,170 --> 00:15:40,990
will continue until the connection drops

370
00:15:36,490 --> 00:15:45,690
the computer restarts stuff like that so

371
00:15:40,990 --> 00:15:45,690
the demo how that works

372
00:15:58,350 --> 00:16:02,070
all right so what we see here is that

373
00:16:00,089 --> 00:16:03,990
both Alice and Bob exchange their data

374
00:16:02,070 --> 00:16:05,880
such as the data attributes of the COC

375
00:16:03,990 --> 00:16:08,670
at the name of the five to architecture

376
00:16:05,880 --> 00:16:11,060
stuff like that and Alice relates all

377
00:16:08,670 --> 00:16:13,500
that information back to called strike

378
00:16:11,060 --> 00:16:19,319
and called strike surf the payload back

379
00:16:13,500 --> 00:16:20,850
to Alice and Alice Alice send the

380
00:16:19,319 --> 00:16:24,240
payloads over LDAP to Bob and Bob

381
00:16:20,850 --> 00:16:26,100
injected into a new process basically so

382
00:16:24,240 --> 00:16:32,490
now the relaying between the name pipe

383
00:16:26,100 --> 00:16:35,720
and curve strike off LDAP can begin so

384
00:16:32,490 --> 00:16:35,720
there's the new lmv beacon

385
00:16:54,360 --> 00:17:23,459
oh yeah alright then alright so yeah why

386
00:17:21,179 --> 00:17:25,230
would you why do you want to use the c2l

387
00:17:23,459 --> 00:17:27,059
dog channel so yeah basically if network

388
00:17:25,230 --> 00:17:28,290
segments are completely firewalls and

389
00:17:27,059 --> 00:17:29,520
restricts as the stuff like that they

390
00:17:28,290 --> 00:17:32,780
still use the same Active Directory

391
00:17:29,520 --> 00:17:34,168
domain this can be a pretty reliable way

392
00:17:32,780 --> 00:17:36,899
further than that

393
00:17:34,169 --> 00:17:40,559
SMB WM is often used and often monitored

394
00:17:36,900 --> 00:17:42,809
and blocked or restricted these methods

395
00:17:40,559 --> 00:17:44,940
only requires a valid user account with

396
00:17:42,809 --> 00:17:47,070
no additional permissions so even you

397
00:17:44,940 --> 00:17:48,960
can use this even on the workstation

398
00:17:47,070 --> 00:17:50,970
with the user account that's not allowed

399
00:17:48,960 --> 00:17:54,179
to log in on that workstation basically

400
00:17:50,970 --> 00:17:56,340
but it still lost resort of hope I would

401
00:17:54,179 --> 00:17:58,650
definitely recommend a reverse HTTPS or

402
00:17:56,340 --> 00:18:02,059
basically any other type of tunnel if

403
00:17:58,650 --> 00:18:06,690
you can but if you cannot then this is a

404
00:18:02,059 --> 00:18:08,280
good way so future plans source report

405
00:18:06,690 --> 00:18:10,679
so you can route data over a soft server

406
00:18:08,280 --> 00:18:13,410
basically support from multiple domains

407
00:18:10,679 --> 00:18:15,740
or forced using multiple attributes for

408
00:18:13,410 --> 00:18:18,809
data for basically a higher bandwidth

409
00:18:15,740 --> 00:18:20,309
and multiple sessions on one Internet

410
00:18:18,809 --> 00:18:22,260
breakout point so you have multiple bobs

411
00:18:20,309 --> 00:18:25,080
and one Alice and you can just run all

412
00:18:22,260 --> 00:18:29,520
the data through Ellis to your Copts

413
00:18:25,080 --> 00:18:35,549
frog instance so helping the blue team

414
00:18:29,520 --> 00:18:37,679
oh yeah we're still good guys right yeah

415
00:18:35,549 --> 00:18:40,379
so having a baseline is really important

416
00:18:37,679 --> 00:18:42,030
to detect these kinds of backdoor

417
00:18:40,380 --> 00:18:44,130
channel traffic so if you don't have a

418
00:18:42,030 --> 00:18:47,250
baseline then your I think out of luck

419
00:18:44,130 --> 00:18:50,640
if you have a baseline you can detect

420
00:18:47,250 --> 00:18:53,549
anomalies like many changes to an ad

421
00:18:50,640 --> 00:18:55,140
object so there's the event ID an

422
00:18:53,549 --> 00:18:56,790
unusual amount of traffic between

423
00:18:55,140 --> 00:18:59,120
clients and the bank source and then you

424
00:18:56,790 --> 00:19:00,990
can enable and inspector blocking and

425
00:18:59,120 --> 00:19:03,629
advanced threat protection from

426
00:19:00,990 --> 00:19:06,090
Microsoft has some specific

427
00:19:03,630 --> 00:19:07,920
functionality that you can monitor and

428
00:19:06,090 --> 00:19:12,810
track our own suspicious

429
00:19:07,920 --> 00:19:29,340
queries and that's it

430
00:19:12,810 --> 00:19:34,740
any questions yeah it's a native l-dub

431
00:19:29,340 --> 00:19:36,240
so secure tls/ssl whatever oh no no so I

432
00:19:34,740 --> 00:19:38,310
think it's really hard to intercept

433
00:19:36,240 --> 00:19:41,100
traffic and unless you're a self-loading

434
00:19:38,310 --> 00:19:42,960
stuff but I think you should be focusing

435
00:19:41,100 --> 00:19:49,800
on the receiving end like we are locking

436
00:19:42,960 --> 00:19:53,310
onto megatronus or stuff like that yeah

437
00:19:49,800 --> 00:19:55,169
you have there oh yeah sorry yeah forgot

438
00:19:53,310 --> 00:19:57,990
it yeah the tool is going to be up

439
00:19:55,170 --> 00:19:59,100
source give me two weeks or so to clean

440
00:19:57,990 --> 00:20:08,490
up code stuff like that yeah it's going

441
00:19:59,100 --> 00:20:10,580
to be up source so yeah yeah how often

442
00:20:08,490 --> 00:20:12,420
are ready to change

443
00:20:10,580 --> 00:20:14,909
not directly

444
00:20:12,420 --> 00:20:16,470
you can I think there are numbers that

445
00:20:14,910 --> 00:20:19,200
indicate that the record is changing you

446
00:20:16,470 --> 00:20:35,130
can keep track of them yourself but no

447
00:20:19,200 --> 00:20:38,160
not already any more questions yeah yeah

448
00:20:35,130 --> 00:20:42,450
so it's you mean when Bailey is excused

449
00:20:38,160 --> 00:20:45,960
from cops rakija so yeah it's a sports

450
00:20:42,450 --> 00:20:54,390
new process with rwx permissions in

451
00:20:45,960 --> 00:20:57,740
memory stuff like that so oh okay so my

452
00:20:54,390 --> 00:21:01,890
twitter handle is also in the in the

453
00:20:57,740 --> 00:21:05,180
what's called schedule so I will send a

454
00:21:01,890 --> 00:21:05,180
message on Twitter and then you can

455
00:21:08,690 --> 00:21:12,770
alright thanks very much

