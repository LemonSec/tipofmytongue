1
00:00:00,000 --> 00:00:09,510
ten gig IDs anybody ever try to do this

2
00:00:03,080 --> 00:00:10,230
whoo all right first of all what are we

3
00:00:09,510 --> 00:00:14,610
doing here

4
00:00:10,230 --> 00:00:17,010
but a focus on performance so not not

5
00:00:14,610 --> 00:00:19,259
necessarily outputs the visualizations

6
00:00:17,010 --> 00:00:23,850
integrations or rules just trying to get

7
00:00:19,260 --> 00:00:26,550
our performance up above this this old

8
00:00:23,850 --> 00:00:29,699
but theoretical 50 megabit per core

9
00:00:26,550 --> 00:00:32,250
limit anybody who's tried it probably

10
00:00:29,699 --> 00:00:35,489
knows yes you you can jump past this but

11
00:00:32,250 --> 00:00:37,680
and in this talk we'll try and get focus

12
00:00:35,489 --> 00:00:41,280
on the big knobs um simply because it's

13
00:00:37,680 --> 00:00:43,079
a stable talk and they said get to get

14
00:00:41,280 --> 00:00:46,200
you started here because packet sniffing

15
00:00:43,079 --> 00:00:49,770
is fun I give you excuses for doing yr

16
00:00:46,200 --> 00:00:52,110
sniffing you know the who is it strand

17
00:00:49,770 --> 00:00:55,559
and and and then we'll say all the

18
00:00:52,110 --> 00:00:58,050
packet or the wire doesn't lie that's an

19
00:00:55,559 --> 00:01:00,239
excuse I love sniffing packets I've

20
00:00:58,050 --> 00:01:06,360
always loved sniffing packets I'll use

21
00:01:00,239 --> 00:01:08,340
any excuse to do so and then also you

22
00:01:06,360 --> 00:01:10,470
know things you can get from this

23
00:01:08,340 --> 00:01:13,520
obviously running a signature based

24
00:01:10,470 --> 00:01:16,650
detection flow data can come out of of

25
00:01:13,520 --> 00:01:18,630
sericata pretty easily so your DNS and

26
00:01:16,650 --> 00:01:21,049
your your cert and foe say even if we're

27
00:01:18,630 --> 00:01:24,210
getting in the point where it's more TLS

28
00:01:21,049 --> 00:01:26,759
in encrypted data we can still extract

29
00:01:24,210 --> 00:01:31,048
value out of out of doing this I'm also

30
00:01:26,759 --> 00:01:33,930
not going to to cover the brover snort

31
00:01:31,049 --> 00:01:39,780
verse sericata conversation or Linux and

32
00:01:33,930 --> 00:01:43,680
BSD why worried over a few missed

33
00:01:39,780 --> 00:01:46,290
packets this I actually found surprising

34
00:01:43,680 --> 00:01:49,590
when I started doing this um I was

35
00:01:46,290 --> 00:01:52,520
watching Eric I'm not gonna try to say

36
00:01:49,590 --> 00:01:54,810
his name he's one of the main thefts for

37
00:01:52,520 --> 00:01:57,479
for sericata and he was giving a

38
00:01:54,810 --> 00:02:04,430
presentation that dev I was watching for

39
00:01:57,479 --> 00:02:07,710
the xdp part of it and he took a peek at

40
00:02:04,430 --> 00:02:10,080
sabotage did a little bit to try and get

41
00:02:07,710 --> 00:02:12,709
these results and it was kind of

42
00:02:10,080 --> 00:02:17,099
surprising to see this this 10%

43
00:02:12,709 --> 00:02:21,599
missed alerts on just 3% so it does

44
00:02:17,099 --> 00:02:26,689
become a big deal quick my observed drop

45
00:02:21,599 --> 00:02:30,328
rate was 9% with just 1.5 5% packet loss

46
00:02:26,689 --> 00:02:33,000
again he mangled the the P caps that he

47
00:02:30,329 --> 00:02:35,040
was running for mine I just destroyed

48
00:02:33,000 --> 00:02:39,269
the sensor and sent it well above

49
00:02:35,040 --> 00:02:42,709
capacity to force these drops get out

50
00:02:39,269 --> 00:02:45,269
the lab codes be scientific about this

51
00:02:42,709 --> 00:02:49,170
honestly I should have made this slide

52
00:02:45,269 --> 00:02:52,170
before I even started the whole

53
00:02:49,170 --> 00:02:55,470
scientific method don't don't wing it be

54
00:02:52,170 --> 00:02:59,339
very measured in your approach you

55
00:02:55,470 --> 00:03:01,920
you'll make Mis assumptions very very

56
00:02:59,340 --> 00:03:04,590
easily a couple years ago I was first

57
00:03:01,920 --> 00:03:06,179
doing this I thought oh geez jackpot I

58
00:03:04,590 --> 00:03:08,340
found a couple settings I play with

59
00:03:06,180 --> 00:03:13,049
these I get awesome performance all I

60
00:03:08,340 --> 00:03:16,170
was doing was relying on buffer to

61
00:03:13,049 --> 00:03:17,730
account for for a packet burst in a

62
00:03:16,170 --> 00:03:21,179
sustained environment you quickly find

63
00:03:17,730 --> 00:03:22,470
out no you cannot rely on memory to to

64
00:03:21,180 --> 00:03:24,389
save you

65
00:03:22,470 --> 00:03:26,400
buffers will fill you will start

66
00:03:24,389 --> 00:03:28,440
dropping packets and once you force

67
00:03:26,400 --> 00:03:30,000
yourself into this packet drop scenarios

68
00:03:28,440 --> 00:03:31,560
you're you're really hurting your

69
00:03:30,000 --> 00:03:34,560
performance and it's hard to recover

70
00:03:31,560 --> 00:03:37,919
from I figure out what you want to

71
00:03:34,560 --> 00:03:39,900
measure and how I did not use perf in

72
00:03:37,919 --> 00:03:42,959
this case just because I didn't want to

73
00:03:39,900 --> 00:03:45,239
get back into watching what the CPU was

74
00:03:42,959 --> 00:03:47,970
doing but if you're going hard or

75
00:03:45,239 --> 00:03:51,959
definitely look into that I focused on

76
00:03:47,970 --> 00:03:53,579
packet drops most of my stats will be in

77
00:03:51,959 --> 00:03:56,099
in bandwidth rather than the more

78
00:03:53,579 --> 00:03:57,989
appropriate packets per second and then

79
00:03:56,099 --> 00:04:00,290
the amount of alerts generated off of

80
00:03:57,989 --> 00:04:02,730
off the test because ultimately that's

81
00:04:00,290 --> 00:04:04,828
truly what the deliverable is you're

82
00:04:02,730 --> 00:04:08,659
trying to get alerts into a sim so

83
00:04:04,829 --> 00:04:08,659
people can review it and take action

84
00:04:08,780 --> 00:04:15,569
and then part of them one another

85
00:04:13,889 --> 00:04:17,639
mistake I made which I'm trying to head

86
00:04:15,569 --> 00:04:19,440
you off on is think about what you want

87
00:04:17,639 --> 00:04:23,159
to measure first so you don't have to

88
00:04:19,440 --> 00:04:24,820
retest because that kind of sucks in one

89
00:04:23,159 --> 00:04:26,800
of the things I failed to measure

90
00:04:24,820 --> 00:04:28,000
memory consumption so I could at the end

91
00:04:26,800 --> 00:04:30,520
I'm like all sweet let's throw some

92
00:04:28,000 --> 00:04:34,060
memory utilizations and show you which

93
00:04:30,520 --> 00:04:36,789
settings really impact memory and I did

94
00:04:34,060 --> 00:04:40,690
did not have time to retest all that for

95
00:04:36,790 --> 00:04:43,180
you resources this is probably the most

96
00:04:40,690 --> 00:04:50,110
critical slide for anyone who actually

97
00:04:43,180 --> 00:04:52,090
wants to pursue this start here start

98
00:04:50,110 --> 00:04:53,590
good especially you know obviously

99
00:04:52,090 --> 00:04:56,020
you're gonna have to do the sericata

100
00:04:53,590 --> 00:05:00,159
documentation start there that'll get

101
00:04:56,020 --> 00:05:02,320
you a good feel then go to the next

102
00:05:00,160 --> 00:05:04,650
arakata extreme performance and tuning

103
00:05:02,320 --> 00:05:07,120
there's two guides one and two it

104
00:05:04,650 --> 00:05:12,479
consolidated a lot of the research that

105
00:05:07,120 --> 00:05:16,420
I had already done into one place and

106
00:05:12,480 --> 00:05:19,060
they had better explanations for what I

107
00:05:16,420 --> 00:05:22,030
had found in other places and and the

108
00:05:19,060 --> 00:05:24,580
explanations were specific to what we're

109
00:05:22,030 --> 00:05:26,590
trying to do one of the big mistakes I

110
00:05:24,580 --> 00:05:31,300
made here was with the sea states on the

111
00:05:26,590 --> 00:05:34,060
processor they I disabled all the power

112
00:05:31,300 --> 00:05:37,050
saving stuff the call that out no you

113
00:05:34,060 --> 00:05:41,710
actually want to in key power saving

114
00:05:37,050 --> 00:05:44,230
states available somewhat because you'll

115
00:05:41,710 --> 00:05:45,789
over a call me as you you need to take

116
00:05:44,230 --> 00:05:48,310
advantage of turbo mode on your cores

117
00:05:45,790 --> 00:05:49,480
and if you're all your cores are running

118
00:05:48,310 --> 00:05:51,390
hot and you won't actually be able to

119
00:05:49,480 --> 00:05:56,170
get the core is going in the turbo mode

120
00:05:51,390 --> 00:05:57,760
and so build a good theory for what you

121
00:05:56,170 --> 00:06:03,780
want to do first before he starts

122
00:05:57,760 --> 00:06:11,550
spending money on a box alright so this

123
00:06:03,780 --> 00:06:13,510
slide is I'll explain quickly this is

124
00:06:11,550 --> 00:06:16,510
actually I don't know if you read that

125
00:06:13,510 --> 00:06:19,330
command at the bottom the LS top oh it's

126
00:06:16,510 --> 00:06:23,560
a top its topology view of your of your

127
00:06:19,330 --> 00:06:25,960
hardware especially around the big boxes

128
00:06:23,560 --> 00:06:28,600
are the the CPUs which is going to be

129
00:06:25,960 --> 00:06:30,760
your focal point this will help you make

130
00:06:28,600 --> 00:06:33,910
decisions on where you want what

131
00:06:30,760 --> 00:06:37,510
processes to run obviously these are two

132
00:06:33,910 --> 00:06:41,140
very very small boxes and then I

133
00:06:37,510 --> 00:06:46,599
it out where I'm using the Intel x5 29

134
00:06:41,140 --> 00:06:49,750
capture cards here I'll jump to a bigger

135
00:06:46,600 --> 00:06:52,840
one this is a much much bigger box this

136
00:06:49,750 --> 00:06:56,500
is actually screenshot is cut off

137
00:06:52,840 --> 00:06:57,820
there's no device huh the small box is

138
00:06:56,500 --> 00:07:00,550
going down those are the devices that

139
00:06:57,820 --> 00:07:03,280
are associated strictly to the to that

140
00:07:00,550 --> 00:07:07,540
CPU what's hanging off on the other side

141
00:07:03,280 --> 00:07:11,890
is just the rest of the CPU and then

142
00:07:07,540 --> 00:07:14,320
here's a another big boy this one

143
00:07:11,890 --> 00:07:16,390
actually had a mirror come in it ran ran

144
00:07:14,320 --> 00:07:18,580
quite well force which surprising when

145
00:07:16,390 --> 00:07:21,780
you look at we were reading through the

146
00:07:18,580 --> 00:07:24,729
documentation you will want to to

147
00:07:21,780 --> 00:07:28,510
actually test the theories one of the

148
00:07:24,730 --> 00:07:33,220
big contradictions I found was Nick quit

149
00:07:28,510 --> 00:07:34,659
it was hyper-threading there there you

150
00:07:33,220 --> 00:07:37,540
getting into argument about whether or

151
00:07:34,660 --> 00:07:39,790
not you should use hyper threading on in

152
00:07:37,540 --> 00:07:43,210
this application because it's eerie they

153
00:07:39,790 --> 00:07:47,710
could fight with each other but your

154
00:07:43,210 --> 00:07:51,250
results aren't consistent this box loved

155
00:07:47,710 --> 00:07:54,549
it hyper threaded a burn every core and

156
00:07:51,250 --> 00:07:58,630
everything runs great this box

157
00:07:54,550 --> 00:08:02,290
no only runs single cord or a single

158
00:07:58,630 --> 00:08:04,900
thread autumn the the performance was it

159
00:08:02,290 --> 00:08:07,240
was a remarkable impact on performance

160
00:08:04,900 --> 00:08:10,210
so that's why again don't run with

161
00:08:07,240 --> 00:08:12,760
assumptions start testing these to your

162
00:08:10,210 --> 00:08:16,000
hardware and your then the settings

163
00:08:12,760 --> 00:08:18,400
themselves let me see

164
00:08:16,000 --> 00:08:21,640
oh and I also tried on this one a lot of

165
00:08:18,400 --> 00:08:24,250
times I'll I'll increase the buffer

166
00:08:21,640 --> 00:08:26,560
sizes this was one of the only ones

167
00:08:24,250 --> 00:08:29,230
where it actually hurt horribly

168
00:08:26,560 --> 00:08:30,970
increasing a peak at buffer that because

169
00:08:29,230 --> 00:08:34,300
it's a mere comet instead of AF pack and

170
00:08:30,970 --> 00:08:37,599
use PP cap increase the buffer size on

171
00:08:34,299 --> 00:08:40,289
this one destroyed performance so let's

172
00:08:37,599 --> 00:08:44,169
start building up what we'll do

173
00:08:40,289 --> 00:08:48,569
isolate your cores first this is the

174
00:08:44,169 --> 00:08:49,939
primary box I used here was a a core box

175
00:08:48,570 --> 00:08:51,920
now no

176
00:08:49,940 --> 00:08:55,790
I did not get 10 gig on an eight-core

177
00:08:51,920 --> 00:08:59,990
box but I would wanted to prove that I

178
00:08:55,790 --> 00:09:01,790
could get a gigabit per core so that you

179
00:08:59,990 --> 00:09:03,470
could easily scale up if so if you when

180
00:09:01,790 --> 00:09:05,750
you have access to this tube larger

181
00:09:03,470 --> 00:09:10,190
boxes you're easily reaching for for a

182
00:09:05,750 --> 00:09:11,750
10 core and you'll see the all the

183
00:09:10,190 --> 00:09:13,430
different settings in here a lot of this

184
00:09:11,750 --> 00:09:16,940
is all called out in the documentation

185
00:09:13,430 --> 00:09:18,979
especially on sericata tuning odd but

186
00:09:16,940 --> 00:09:22,730
yes that sea state setting setting them

187
00:09:18,980 --> 00:09:25,670
to 3 I did that wrong but the critical

188
00:09:22,730 --> 00:09:28,460
ones here are the isolate CPU you're

189
00:09:25,670 --> 00:09:31,040
telling the task scheduler don't put

190
00:09:28,460 --> 00:09:34,310
anything else on those cores so we'll

191
00:09:31,040 --> 00:09:35,689
leave core 0 that's normal stuff you

192
00:09:34,310 --> 00:09:39,530
know Linux you're going to need your

193
00:09:35,690 --> 00:09:46,790
cell running you have to leave one for

194
00:09:39,530 --> 00:09:49,610
in that state from there surprisingly

195
00:09:46,790 --> 00:09:52,099
spend a lot of time here don't really

196
00:09:49,610 --> 00:09:54,740
pay attention these are just settings

197
00:09:52,100 --> 00:09:57,560
that were randomly used I can give you

198
00:09:54,740 --> 00:10:00,050
the full ones how I was doing this I had

199
00:09:57,560 --> 00:10:02,000
I would set up or configure the the

200
00:10:00,050 --> 00:10:03,500
driver based and just have a shell

201
00:10:02,000 --> 00:10:05,300
script run all the commands for this

202
00:10:03,500 --> 00:10:09,500
configuration run all the commands for

203
00:10:05,300 --> 00:10:12,400
for that configuration for my testing

204
00:10:09,500 --> 00:10:14,720
most primarily using AF packet and

205
00:10:12,400 --> 00:10:17,240
another set up using the extended

206
00:10:14,720 --> 00:10:20,870
Berkeley packet filters and a next EP

207
00:10:17,240 --> 00:10:23,270
they utilize the receive size scale and

208
00:10:20,870 --> 00:10:26,300
completely different with AF packet you

209
00:10:23,270 --> 00:10:28,610
want one processor processing all the

210
00:10:26,300 --> 00:10:30,939
interrupts from the card and let it bear

211
00:10:28,610 --> 00:10:33,740
that brunt while the other cores are

212
00:10:30,940 --> 00:10:38,150
working processing the packets as they

213
00:10:33,740 --> 00:10:39,800
come in for the xdp configuration they

214
00:10:38,150 --> 00:10:45,290
want you to spread it out get that

215
00:10:39,800 --> 00:10:47,810
workload distributed and if you're going

216
00:10:45,290 --> 00:10:49,610
to do that xdp route the two on the

217
00:10:47,810 --> 00:10:52,130
bottom are the board ones that's going

218
00:10:49,610 --> 00:10:55,850
to actually enable what you the the the

219
00:10:52,130 --> 00:10:57,589
driver to do the interaction or sericata

220
00:10:55,850 --> 00:10:59,360
to you interact with the driver and the

221
00:10:57,589 --> 00:11:02,570
method needed and then the other thing

222
00:10:59,360 --> 00:11:03,290
is overriding the default hashing key

223
00:11:02,570 --> 00:11:06,620
come

224
00:11:03,290 --> 00:11:08,839
by default our Microsoft developed RSS 4

225
00:11:06,620 --> 00:11:12,259
for web servers which is completely

226
00:11:08,839 --> 00:11:16,269
different application your when it's

227
00:11:12,259 --> 00:11:19,420
with an IDs you need the complete flow

228
00:11:16,269 --> 00:11:23,060
bi-directionally going to the same core

229
00:11:19,420 --> 00:11:26,240
with a web server you can spread that

230
00:11:23,060 --> 00:11:29,239
out that will not help here we need it

231
00:11:26,240 --> 00:11:32,389
bound to the same core and that will

232
00:11:29,240 --> 00:11:37,699
help account for this by default our SSO

233
00:11:32,389 --> 00:11:40,100
will break you next look at what

234
00:11:37,699 --> 00:11:43,069
sericata is built to do this is less

235
00:11:40,100 --> 00:11:45,620
important today but a few years ago that

236
00:11:43,069 --> 00:11:49,849
critical go the jail stop was not in

237
00:11:45,620 --> 00:11:51,680
there and a lot of default packages you

238
00:11:49,850 --> 00:11:54,139
really really need to have hyper scan

239
00:11:51,680 --> 00:11:57,920
that was the single biggest benefit you

240
00:11:54,139 --> 00:12:02,779
could get across the board but hyper

241
00:11:57,920 --> 00:12:07,610
scan requires sse3 that which is an

242
00:12:02,779 --> 00:12:09,439
intel command minor was it micro kind of

243
00:12:07,610 --> 00:12:12,699
camera blinking outlets or instruction

244
00:12:09,440 --> 00:12:16,040
set and then AMD came along in 2001

245
00:12:12,699 --> 00:12:17,870
adding it again I'm using AF packet for

246
00:12:16,040 --> 00:12:21,500
the Intel cards B cap for the mirror

247
00:12:17,870 --> 00:12:23,300
comes and then my supposed saving grace

248
00:12:21,500 --> 00:12:25,160
for another issue we run into is the

249
00:12:23,300 --> 00:12:29,569
extended Birkett berkeley packet filters

250
00:12:25,160 --> 00:12:32,649
and XDP now I get to find out who was

251
00:12:29,569 --> 00:12:35,120
paying attention to the last slide I

252
00:12:32,649 --> 00:12:38,329
know everybody wants to know what you

253
00:12:35,120 --> 00:12:41,199
can do with a PI but anybody gonna tell

254
00:12:38,329 --> 00:12:41,199
me why this ain't gonna work

255
00:12:41,529 --> 00:12:51,680
winner winner correctly arms do not have

256
00:12:48,170 --> 00:12:53,990
the required instruction set but I tried

257
00:12:51,680 --> 00:12:59,150
it anyhow with a brand-new PI 4 with 4

258
00:12:53,990 --> 00:13:02,690
gigs I had to move it

259
00:12:59,150 --> 00:13:06,439
that was really warm so I put the IR

260
00:13:02,690 --> 00:13:08,660
probe on that's a hundred and fifty two

261
00:13:06,440 --> 00:13:11,900
degrees on the surface of that board so

262
00:13:08,660 --> 00:13:17,240
I quickly said how do we check the

263
00:13:11,900 --> 00:13:25,250
internal temp yeah we got 84 degrees the

264
00:13:17,240 --> 00:13:29,270
PI's max is 85 Celsius so here's what

265
00:13:25,250 --> 00:13:31,130
happened pushing the gigabit to it it

266
00:13:29,270 --> 00:13:35,410
did not take it would not receive a

267
00:13:31,130 --> 00:13:38,750
gigabit it maxed when it was cold at 723

268
00:13:35,410 --> 00:13:40,880
as the tempers the packets per second it

269
00:13:38,750 --> 00:13:45,589
would ingest we started dropping

270
00:13:40,880 --> 00:13:48,470
considerably yeah the results were awful

271
00:13:45,589 --> 00:13:50,930
and and the PI suffered little so yeah

272
00:13:48,470 --> 00:13:52,970
in a small small workout breakout this

273
00:13:50,930 --> 00:13:55,459
will work fine in your house like not

274
00:13:52,970 --> 00:13:58,880
pushing packets yes at home it works

275
00:13:55,460 --> 00:14:02,660
that but 100 Meg watching your internet

276
00:13:58,880 --> 00:14:05,029
traffic for this for real now here's a

277
00:14:02,660 --> 00:14:06,949
lot of the critical settings inside of

278
00:14:05,029 --> 00:14:11,390
the sericata config that I found the

279
00:14:06,950 --> 00:14:13,040
most beneficial AF packets there's we're

280
00:14:11,390 --> 00:14:14,959
running eight core so I went ahead with

281
00:14:13,040 --> 00:14:16,959
seven keep that in mind these numbers

282
00:14:14,959 --> 00:14:19,969
were specific to my box

283
00:14:16,959 --> 00:14:22,779
you take these numbers and change them

284
00:14:19,970 --> 00:14:25,130
adjust them up and down some of these

285
00:14:22,779 --> 00:14:27,110
numbers I have here completely

286
00:14:25,130 --> 00:14:29,660
contradict the documentation

287
00:14:27,110 --> 00:14:31,100
specifically that max pending packets

288
00:14:29,660 --> 00:14:33,170
they want you to have it low

289
00:14:31,100 --> 00:14:38,000
some of them I've put it as high as

290
00:14:33,170 --> 00:14:40,699
possible the detect profiles I that

291
00:14:38,000 --> 00:14:44,000
that's very consistent going with 200

292
00:14:40,700 --> 00:14:46,339
groups there and then on the right side

293
00:14:44,000 --> 00:14:49,459
coming down that's how you set up the CP

294
00:14:46,339 --> 00:14:51,529
to see for the core isolation and the

295
00:14:49,459 --> 00:14:53,689
xdp config that's another thing to note

296
00:14:51,529 --> 00:14:55,910
here the documentation does not match

297
00:14:53,690 --> 00:15:00,050
this but this works what's in the

298
00:14:55,910 --> 00:15:03,819
documentation doesn't another possible

299
00:15:00,050 --> 00:15:06,500
consideration we could do here would be

300
00:15:03,820 --> 00:15:07,910
using the Burke just not not extended

301
00:15:06,500 --> 00:15:10,130
Berkeley packet filters with a regular

302
00:15:07,910 --> 00:15:13,929
Berkeley packet filters in excluding

303
00:15:10,130 --> 00:15:16,850
traffic on the command line is for Sarah

304
00:15:13,929 --> 00:15:18,738
it took me a while to get to the point

305
00:15:16,850 --> 00:15:20,600
where this would be beneficial because I

306
00:15:18,739 --> 00:15:23,119
was dropping packets earlier on you

307
00:15:20,600 --> 00:15:26,059
could also do a pass role in sericata

308
00:15:23,119 --> 00:15:27,379
too to just make a match and jump but

309
00:15:26,059 --> 00:15:29,118
you're you're you're hurting yourself

310
00:15:27,379 --> 00:15:31,519
because you want to get rid of the

311
00:15:29,119 --> 00:15:37,279
packets as early as possible now let's

312
00:15:31,519 --> 00:15:40,309
get to some results here my this might

313
00:15:37,279 --> 00:15:42,639
actually be the third box we did the

314
00:15:40,309 --> 00:15:45,079
first one didn't have the ssse3

315
00:15:42,639 --> 00:15:47,029
instruction set which is how I found

316
00:15:45,079 --> 00:15:49,939
that out the hard way this is the

317
00:15:47,029 --> 00:15:53,869
smallest box I had that that was

318
00:15:49,939 --> 00:15:59,360
successful with the hyper scan this is a

319
00:15:53,869 --> 00:16:02,629
crappy Celeron box and yeah once we make

320
00:15:59,360 --> 00:16:05,809
a few small adjustments here it starts

321
00:16:02,629 --> 00:16:07,939
doing it pretty well and there you can

322
00:16:05,809 --> 00:16:10,459
call out the the difference with having

323
00:16:07,939 --> 00:16:13,160
hyper scan and veil available leaving

324
00:16:10,459 --> 00:16:16,579
that having that not available to the

325
00:16:13,160 --> 00:16:20,689
engine I'm dropping 33% enabling it it

326
00:16:16,579 --> 00:16:22,790
goes 0 at at one gigabit so that's why

327
00:16:20,689 --> 00:16:27,860
I'm giving you a full stop get hyper

328
00:16:22,790 --> 00:16:32,420
scan going this is where I did the most

329
00:16:27,860 --> 00:16:35,569
of the testing I did it with a couple of

330
00:16:32,420 --> 00:16:39,290
different ways I was I've intentionally

331
00:16:35,569 --> 00:16:41,628
I was instead of doing live peak apps or

332
00:16:39,290 --> 00:16:43,129
coming off the live wire the problem

333
00:16:41,629 --> 00:16:45,230
with doing that you'll start making

334
00:16:43,129 --> 00:16:47,209
assumptions based on your traffic flow

335
00:16:45,230 --> 00:16:49,339
different times a day you get different

336
00:16:47,209 --> 00:16:52,040
traffic I was using peak apps being

337
00:16:49,339 --> 00:16:55,639
pushed with TCP relay so I could get the

338
00:16:52,040 --> 00:16:57,860
same consistent push and use that to

339
00:16:55,639 --> 00:17:01,209
either throttle up throttle down the

340
00:16:57,860 --> 00:17:04,399
traffic and then also to keep my

341
00:17:01,209 --> 00:17:09,020
expected alerts consistent so I know how

342
00:17:04,398 --> 00:17:12,349
many alerts I'm dropping started off at

343
00:17:09,020 --> 00:17:15,859
one gigabit wait hang on oh I'm sorry

344
00:17:12,349 --> 00:17:18,099
and I intentionally used one of the peak

345
00:17:15,859 --> 00:17:20,839
apps was intentional to cause an issue

346
00:17:18,099 --> 00:17:22,938
your biggest problem with doing this is

347
00:17:20,839 --> 00:17:26,149
going to be an elephant flow so getting

348
00:17:22,939 --> 00:17:28,459
a single flow that's over 500 megabit

349
00:17:26,150 --> 00:17:30,260
that's what's gonna hurt you you do you

350
00:17:28,459 --> 00:17:32,720
turn these cranks you will easily be

351
00:17:30,260 --> 00:17:36,350
able to handle ten gig worth of traffic

352
00:17:32,720 --> 00:17:38,030
except for that elephant flow and that's

353
00:17:36,350 --> 00:17:40,580
that's what I was working in this eight

354
00:17:38,030 --> 00:17:43,990
core box I could not get it below three

355
00:17:40,580 --> 00:17:49,970
and a half percent but this was on older

356
00:17:43,990 --> 00:17:52,970
desktop this was not a true server um is

357
00:17:49,970 --> 00:17:55,820
the documentation will lead you astray

358
00:17:52,970 --> 00:17:59,150
with the Intel cards they will say don't

359
00:17:55,820 --> 00:18:01,639
use the drivers from Intel it won't work

360
00:17:59,150 --> 00:18:04,809
you have to use currently you have to

361
00:18:01,640 --> 00:18:04,809
use the Intel drivers

362
00:18:04,990 --> 00:18:11,540
and then also I ended up when they both

363
00:18:09,500 --> 00:18:15,530
go through these quits so you can see

364
00:18:11,540 --> 00:18:18,860
with hyper scan going on oh and and you

365
00:18:15,530 --> 00:18:21,440
also cranked up I cranked up the loops

366
00:18:18,860 --> 00:18:24,500
for my testing because I made a bad

367
00:18:21,440 --> 00:18:26,300
assumption early on I was pushing the

368
00:18:24,500 --> 00:18:28,550
peak apps but I wasn't filling the

369
00:18:26,300 --> 00:18:31,520
buffers so in production you want to

370
00:18:28,550 --> 00:18:33,919
have buffers to to safeguard from

371
00:18:31,520 --> 00:18:36,260
dropping packets when you're testing

372
00:18:33,920 --> 00:18:39,740
unless you want to really drag out how

373
00:18:36,260 --> 00:18:42,140
long you want to - to run your tests you

374
00:18:39,740 --> 00:18:45,170
need to keep your buffers as slow as low

375
00:18:42,140 --> 00:18:48,679
as reasonable so yeah I did a happy

376
00:18:45,170 --> 00:18:50,929
dance pushed six gigabit yay didn't drop

377
00:18:48,679 --> 00:18:52,730
a packet then realize nope everything

378
00:18:50,929 --> 00:18:56,090
was in the ring buffer a few of these

379
00:18:52,730 --> 00:18:57,440
tests I would stop TC TCP really it

380
00:18:56,090 --> 00:19:01,580
would be done after five minutes of

381
00:18:57,440 --> 00:19:04,490
traffic but sericata is still burning on

382
00:19:01,580 --> 00:19:06,649
two cores because it's playing catch-up

383
00:19:04,490 --> 00:19:09,380
processing with the ring buffers that's

384
00:19:06,650 --> 00:19:11,780
cool if you want to just show off but if

385
00:19:09,380 --> 00:19:18,110
you're going to sustain at ten gig you

386
00:19:11,780 --> 00:19:21,170
cannot rely on memory and then I

387
00:19:18,110 --> 00:19:22,699
eventually dropped started dropping how

388
00:19:21,170 --> 00:19:26,240
many cores I was using this

389
00:19:22,700 --> 00:19:29,540
configuration I ended up getting using

390
00:19:26,240 --> 00:19:32,150
one for work one worker one completely

391
00:19:29,540 --> 00:19:35,330
idle and I was still and then well six

392
00:19:32,150 --> 00:19:38,330
I'm sorry one for management one one

393
00:19:35,330 --> 00:19:38,980
idle and six actual doing workers to

394
00:19:38,330 --> 00:19:43,070
give me

395
00:19:38,980 --> 00:19:46,280
the one gigabit per core that worked

396
00:19:43,070 --> 00:19:47,360
fine however when I cut it to five cores

397
00:19:46,280 --> 00:19:49,580
actually working

398
00:19:47,360 --> 00:19:52,250
I started dropping packets again so even

399
00:19:49,580 --> 00:19:56,870
on this desktop quality hardware I'm

400
00:19:52,250 --> 00:19:59,300
still processing one gigabit of traffic

401
00:19:56,870 --> 00:20:01,909
without drops now the last part was the

402
00:19:59,300 --> 00:20:08,300
disappointing the XDP versus not next EP

403
00:20:01,910 --> 00:20:10,460
xdp and the BPF is supposed to drop the

404
00:20:08,300 --> 00:20:13,909
the flows even earlier so you start

405
00:20:10,460 --> 00:20:17,540
watching the flow you get to the Signet

406
00:20:13,910 --> 00:20:18,800
normal signature depth you're not going

407
00:20:17,540 --> 00:20:20,840
to have a match so go ahead and just

408
00:20:18,800 --> 00:20:23,030
start dropping that Pat that that flow

409
00:20:20,840 --> 00:20:24,379
and don't try and get it down if you get

410
00:20:23,030 --> 00:20:26,450
the right card and doing the firmware

411
00:20:24,380 --> 00:20:28,190
otherwise you're doing a driver laughs I

412
00:20:26,450 --> 00:20:30,710
really thought this was going to be the

413
00:20:28,190 --> 00:20:32,540
Silver Bullet yay at the end of the

414
00:20:30,710 --> 00:20:35,510
presentation this old this will answer

415
00:20:32,540 --> 00:20:40,300
all our hopes and prayers it did not it

416
00:20:35,510 --> 00:20:40,300
actually performed worse unexpectedly

417
00:20:40,360 --> 00:20:47,060
yeah with xdp now the statistically from

418
00:20:44,510 --> 00:20:48,830
the alert standpoint because of the peak

419
00:20:47,060 --> 00:20:51,710
apps I used the number of lurch

420
00:20:48,830 --> 00:20:53,750
generated was the same but the the flows

421
00:20:51,710 --> 00:20:56,000
that were being dropped were later in in

422
00:20:53,750 --> 00:20:58,550
the the peak apps but if you look at the

423
00:20:56,000 --> 00:21:00,110
actual drop rate of packets I'm running

424
00:20:58,550 --> 00:21:05,120
over four and a half which is getting

425
00:21:00,110 --> 00:21:10,030
getting too high mera kaam if you're

426
00:21:05,120 --> 00:21:12,709
going to use a capture card you must

427
00:21:10,030 --> 00:21:17,060
recompile the mirror comes against the

428
00:21:12,710 --> 00:21:20,540
sniffer library for one two don't follow

429
00:21:17,060 --> 00:21:22,700
the documentation snap this this worked

430
00:21:20,540 --> 00:21:24,590
what didn't what they lead you to do in

431
00:21:22,700 --> 00:21:27,650
the documentation to configure it does

432
00:21:24,590 --> 00:21:30,169
not and then on a later Debian system

433
00:21:27,650 --> 00:21:33,880
with with system D this is where I chose

434
00:21:30,170 --> 00:21:36,320
to put in the Lib system DS systems

435
00:21:33,880 --> 00:21:38,710
sericata service file to get and

436
00:21:36,320 --> 00:21:42,889
basically you need to pass environmental

437
00:21:38,710 --> 00:21:46,430
variables into the process when starting

438
00:21:42,890 --> 00:21:48,410
up to configure it and my data ring size

439
00:21:46,430 --> 00:21:50,720
if you go by the documentation there

440
00:21:48,410 --> 00:21:52,550
that's completely contradicts what the

441
00:21:50,720 --> 00:21:54,800
documentation says again

442
00:21:52,550 --> 00:21:57,919
just these settings test them for your

443
00:21:54,800 --> 00:22:00,680
hardware and your environment because

444
00:21:57,920 --> 00:22:03,680
your traffic flows will make all the

445
00:22:00,680 --> 00:22:09,350
difference in the world and you have an

446
00:22:03,680 --> 00:22:11,660
H top screenshot there that is I think

447
00:22:09,350 --> 00:22:14,600
that was taken at eight gigabit so of

448
00:22:11,660 --> 00:22:15,980
live live traffic and yes this is the

449
00:22:14,600 --> 00:22:21,340
one that does not like the

450
00:22:15,980 --> 00:22:21,340
hyper-threading but it's it's processing

451
00:22:22,810 --> 00:22:29,899
no I don't want any questions questions

452
00:22:27,460 --> 00:22:31,610
sorry for doing this is a stable talk

453
00:22:29,900 --> 00:22:33,680
this really could have been full length

454
00:22:31,610 --> 00:22:40,070
talk for every Derby con but we ran out

455
00:22:33,680 --> 00:22:41,360
of Derby Con before I got started come

456
00:22:40,070 --> 00:22:43,189
on somebody's got to call me out on

457
00:22:41,360 --> 00:22:57,320
something here there's a lot of room yes

458
00:22:43,190 --> 00:22:58,940
Mick surprisingly no on you getting the

459
00:22:57,320 --> 00:23:01,280
current of the for Colonel tree I'd

460
00:22:58,940 --> 00:23:06,830
found it not necessarily using the the

461
00:23:01,280 --> 00:23:09,860
Debian in straight up you you do an app

462
00:23:06,830 --> 00:23:13,970
get install sericata even and you can

463
00:23:09,860 --> 00:23:16,459
get a good ways up this tree but make

464
00:23:13,970 --> 00:23:19,400
sure your but if you do this a few

465
00:23:16,460 --> 00:23:22,430
Debian built our versions ago no

466
00:23:19,400 --> 00:23:24,920
absolutely not compile your kernel you

467
00:23:22,430 --> 00:23:28,910
have to compile sericata because you

468
00:23:24,920 --> 00:23:33,020
won't you won't have hyper scan anything

469
00:23:28,910 --> 00:23:36,460
else not saying that the kernel compile

470
00:23:33,020 --> 00:23:37,570
one couldn't possibly yes sir

471
00:23:36,460 --> 00:23:45,279
[Music]

472
00:23:37,570 --> 00:23:47,830
I was using TCP relay to to replay pcaps

473
00:23:45,279 --> 00:23:49,299
for this that was that was my primer

474
00:23:47,830 --> 00:23:52,629
because that like said I wanted to be

475
00:23:49,299 --> 00:23:54,940
the same repeatable test otherwise again

476
00:23:52,629 --> 00:23:58,359
I made that mistake before by by not

477
00:23:54,940 --> 00:24:01,720
really controlling the packet flow and I

478
00:23:58,359 --> 00:24:03,609
made bad assumptions one of the big bad

479
00:24:01,720 --> 00:24:05,559
assumptions you can make is yeah

480
00:24:03,609 --> 00:24:06,908
everything works in the afternoon will

481
00:24:05,559 --> 00:24:09,009
it work in the morning when the users

482
00:24:06,909 --> 00:24:09,789
all logged in that actually did work out

483
00:24:09,009 --> 00:24:12,279
it was fine

484
00:24:09,789 --> 00:24:15,369
where I got hurt was in the middle of

485
00:24:12,279 --> 00:24:18,759
the night what happens in the middle of

486
00:24:15,369 --> 00:24:21,728
the night on a network guess what a

487
00:24:18,759 --> 00:24:23,799
backup counts as that's where I started

488
00:24:21,729 --> 00:24:25,269
learning about these alleged elephant

489
00:24:23,799 --> 00:24:29,619
flows that are the bane of your

490
00:24:25,269 --> 00:24:32,470
existence yes yes but you want to try

491
00:24:29,619 --> 00:24:33,789
and keep up with scans especially

492
00:24:32,470 --> 00:24:35,619
because a lot of them seem to be short

493
00:24:33,789 --> 00:24:36,999
and sleep but either way I already got

494
00:24:35,619 --> 00:24:40,769
the stop sign so if you want to keep

495
00:24:36,999 --> 00:24:40,769
talking we will talk outside

496
00:24:44,150 --> 00:24:47,349
[Applause]

