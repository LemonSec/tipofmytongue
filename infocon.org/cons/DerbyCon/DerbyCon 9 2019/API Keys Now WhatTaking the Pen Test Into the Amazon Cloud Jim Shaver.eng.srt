1
00:00:00,000 --> 00:00:06,839
this talk is API keys now what yes so

2
00:00:05,160 --> 00:00:09,420
we're taking the pen testing in the

3
00:00:06,839 --> 00:00:12,690
Amazon Cloud and basically if you're

4
00:00:09,420 --> 00:00:13,830
here for GCP or azure I may have a

5
00:00:12,690 --> 00:00:18,600
couple of tips for you but it's

6
00:00:13,830 --> 00:00:20,070
primarily going to be an Amazon talk as

7
00:00:18,600 --> 00:00:24,240
I said my name is Jim shaver I go by

8
00:00:20,070 --> 00:00:26,910
elitist most places around the web the

9
00:00:24,240 --> 00:00:29,848
overview of this talk basically kind of

10
00:00:26,910 --> 00:00:32,250
talk a little bit about what AWS is what

11
00:00:29,849 --> 00:00:34,559
API keys are and what do you do with

12
00:00:32,250 --> 00:00:36,300
them how they work a little bit we're

13
00:00:34,559 --> 00:00:39,328
going to talk about what tools are out

14
00:00:36,300 --> 00:00:42,809
there to help you and we're gonna show

15
00:00:39,329 --> 00:00:44,370
off some examples we're not doing any of

16
00:00:42,809 --> 00:00:45,718
these in any particular order it sort of

17
00:00:44,370 --> 00:00:47,489
goes in this order but we're gonna bob

18
00:00:45,719 --> 00:00:50,100
and weave a little bit as what as we go

19
00:00:47,489 --> 00:00:53,280
and then at the end we're going to talk

20
00:00:50,100 --> 00:00:56,820
about some other resources that can help

21
00:00:53,280 --> 00:00:59,190
you so the first question is what is AWS

22
00:00:56,820 --> 00:01:01,199
and most people when they think about

23
00:00:59,190 --> 00:01:08,130
AWS they think about primarily two

24
00:01:01,199 --> 00:01:11,070
things ec2 and s3 ec2 basically is the

25
00:01:08,130 --> 00:01:13,740
virtual machine part of AWS and s3 is

26
00:01:11,070 --> 00:01:17,220
the storage part of AWS a shared storage

27
00:01:13,740 --> 00:01:18,899
part but AWS is a lot more complicated I

28
00:01:17,220 --> 00:01:21,960
feel like I find out about a new part of

29
00:01:18,900 --> 00:01:23,820
AWS like every week so and they are also

30
00:01:21,960 --> 00:01:26,610
releasing new parts of AWS all the time

31
00:01:23,820 --> 00:01:31,380
so just know that it's complicated and

32
00:01:26,610 --> 00:01:32,880
it can do a lot of things AWS is not

33
00:01:31,380 --> 00:01:35,579
Active Directory but I think like the

34
00:01:32,880 --> 00:01:37,619
Windows analogy is not terrible so I'm

35
00:01:35,579 --> 00:01:39,298
gonna use a little bit if you think

36
00:01:37,619 --> 00:01:41,490
about what Windows is it does a whole

37
00:01:39,299 --> 00:01:42,869
bunch of things or it can do a whole

38
00:01:41,490 --> 00:01:47,490
bunch of things if you turn those things

39
00:01:42,869 --> 00:01:49,229
on yeah and all of these things fulfill

40
00:01:47,490 --> 00:01:50,490
a need so some of these things are

41
00:01:49,229 --> 00:01:52,530
virtual machines some of them are shared

42
00:01:50,490 --> 00:01:58,679
storage some of them are email DNS etc

43
00:01:52,530 --> 00:02:02,729
etc and I am and Amazon has things that

44
00:01:58,680 --> 00:02:05,630
are complementary now you know route 53

45
00:02:02,729 --> 00:02:09,209
doesn't work exactly the same as MST

46
00:02:05,630 --> 00:02:11,690
Microsoft DNS but they both do DNS okay

47
00:02:09,209 --> 00:02:11,690
so

48
00:02:12,000 --> 00:02:17,980
so it's good to think about that there's

49
00:02:14,590 --> 00:02:19,390
more more to AWS then than just you know

50
00:02:17,980 --> 00:02:23,260
to those two things we're gonna

51
00:02:19,390 --> 00:02:27,059
primarily talk about ec2 and s3 today so

52
00:02:23,260 --> 00:02:29,319
that is sort of the focus of the talk

53
00:02:27,060 --> 00:02:33,579
next we're gonna talk about what our api

54
00:02:29,319 --> 00:02:34,869
AWS api keys okay and first we need to

55
00:02:33,579 --> 00:02:36,640
understand how authentication works

56
00:02:34,870 --> 00:02:41,170
within AWS

57
00:02:36,640 --> 00:02:44,018
so when you authenticate to the AWS

58
00:02:41,170 --> 00:02:47,950
console which is basically the wind the

59
00:02:44,019 --> 00:02:49,989
web UI for AWS you're generally using a

60
00:02:47,950 --> 00:02:54,578
username and password and you may be

61
00:02:49,989 --> 00:02:57,510
using MFA to log into the into the

62
00:02:54,579 --> 00:02:59,829
website okay that is your authentication

63
00:02:57,510 --> 00:03:04,269
when you look like fennekin against the

64
00:02:59,829 --> 00:03:07,510
API you're using API keys okay this is

65
00:03:04,269 --> 00:03:09,069
what AWS API keys kind of look like so

66
00:03:07,510 --> 00:03:11,170
that you know what they look like so

67
00:03:09,069 --> 00:03:12,159
that you could find them basically and

68
00:03:11,170 --> 00:03:17,379
we're going to talk about how to find

69
00:03:12,159 --> 00:03:20,620
them a little bit later - sure yeah and

70
00:03:17,379 --> 00:03:22,750
these slides will be later so the the

71
00:03:20,620 --> 00:03:25,030
key ends an example piece so I don't

72
00:03:22,750 --> 00:03:29,620
think these these keys are valid some

73
00:03:25,030 --> 00:03:33,699
tells me the random number generator or

74
00:03:29,620 --> 00:03:35,560
not that bad I guess okay so we're going

75
00:03:33,699 --> 00:03:38,169
to talk about some tools today I've got

76
00:03:35,560 --> 00:03:39,879
a big long list of tools at the end as

77
00:03:38,169 --> 00:03:42,159
well that you can you can dive deeper

78
00:03:39,879 --> 00:03:43,448
into I've split them up into two

79
00:03:42,159 --> 00:03:46,048
sections we're gonna spend most of the

80
00:03:43,449 --> 00:03:49,000
time on the stealthy side of things

81
00:03:46,049 --> 00:03:51,280
there are also some louder tools that

82
00:03:49,000 --> 00:03:54,129
are a little bit more oddity I would say

83
00:03:51,280 --> 00:03:56,379
on the audit side of things but

84
00:03:54,129 --> 00:03:56,888
basically AWS CLI is a really good place

85
00:03:56,379 --> 00:03:59,260
to start

86
00:03:56,889 --> 00:04:03,699
it's basically I want to run a command

87
00:03:59,260 --> 00:04:06,849
against the AWS API and then there's bo2

88
00:04:03,699 --> 00:04:08,829
3 why is it named boto well it's a

89
00:04:06,849 --> 00:04:11,589
dolphin that lives in the Amazon River

90
00:04:08,829 --> 00:04:13,120
so some smart person was like that makes

91
00:04:11,590 --> 00:04:18,190
sense and I guess it's the third version

92
00:04:13,120 --> 00:04:21,728
so and basically boto is the Python SDK

93
00:04:18,190 --> 00:04:23,380
for AWS okay so most of the tools that

94
00:04:21,728 --> 00:04:25,800
you've ever used that are written in

95
00:04:23,380 --> 00:04:25,800
Python

96
00:04:25,870 --> 00:04:33,580
or prob for AWS are probably written in

97
00:04:29,230 --> 00:04:35,590
or using poetry it's also Scout 2 which

98
00:04:33,580 --> 00:04:37,419
basically if you're a blue team or if

99
00:04:35,590 --> 00:04:40,630
you're red teamer and like you're like

100
00:04:37,419 --> 00:04:42,039
oh we just got this new AWS thing how do

101
00:04:40,630 --> 00:04:44,560
I keep an eye on it

102
00:04:42,040 --> 00:04:46,480
Scout 2 is like the base level that you

103
00:04:44,560 --> 00:04:49,270
should be doing it is like the Nessus of

104
00:04:46,480 --> 00:04:52,450
AWS it'll generate you nice pretty

105
00:04:49,270 --> 00:04:53,859
reports that you can tell your AWS cloud

106
00:04:52,450 --> 00:04:56,860
team that hey you're doing this bad

107
00:04:53,860 --> 00:05:00,370
you're doing this good you know it's

108
00:04:56,860 --> 00:05:03,600
it's a good starting block and then

109
00:05:00,370 --> 00:05:05,350
cartographer is from the people at lyft

110
00:05:03,600 --> 00:05:06,910
released a couple of months ago I've

111
00:05:05,350 --> 00:05:08,050
talked to lots of AWS people and they've

112
00:05:06,910 --> 00:05:09,460
never even heard of this thing so I

113
00:05:08,050 --> 00:05:11,800
guess it's just so new that it's new to

114
00:05:09,460 --> 00:05:12,909
a lot of people basically it's if you're

115
00:05:11,800 --> 00:05:16,300
familiar with bloodhound

116
00:05:12,910 --> 00:05:18,760
for the windows world cartographer is

117
00:05:16,300 --> 00:05:21,490
basically bloodhound for AWS so you can

118
00:05:18,760 --> 00:05:22,900
do queries and have nice pretty circles

119
00:05:21,490 --> 00:05:24,490
that connect to each other and that type

120
00:05:22,900 --> 00:05:27,789
of thing and we'll take a look at what

121
00:05:24,490 --> 00:05:29,650
that looks like as well so the first

122
00:05:27,790 --> 00:05:32,560
example we're going to talk about is the

123
00:05:29,650 --> 00:05:35,530
sub-domain takeover this one doesn't

124
00:05:32,560 --> 00:05:37,479
require really any authentication into

125
00:05:35,530 --> 00:05:41,679
your target environment at all so this

126
00:05:37,479 --> 00:05:45,479
one sort of stands alone and this is

127
00:05:41,680 --> 00:05:47,500
part of s3 so this is an s3 bucket and

128
00:05:45,479 --> 00:05:50,349
all you need to know about an s3 bucket

129
00:05:47,500 --> 00:05:54,280
is it's just a container for data and it

130
00:05:50,350 --> 00:05:56,260
just holds files and folders and you can

131
00:05:54,280 --> 00:05:59,289
copy stuff to it you could read stuff

132
00:05:56,260 --> 00:06:02,020
from it it can host websites some some

133
00:05:59,289 --> 00:06:04,450
people like stopped hosting their

134
00:06:02,020 --> 00:06:06,549
WordPress sites and started taking

135
00:06:04,450 --> 00:06:08,349
static copies of those websites and

136
00:06:06,550 --> 00:06:11,740
putting them into s3 buckets because

137
00:06:08,350 --> 00:06:15,100
it's a lot a lot more secure than

138
00:06:11,740 --> 00:06:18,880
running WordPress so basically the way

139
00:06:15,100 --> 00:06:21,910
an s3 bucket is is there is a you can

140
00:06:18,880 --> 00:06:24,070
technically make the s3 bucket name

141
00:06:21,910 --> 00:06:26,860
anything you want so it could be a like

142
00:06:24,070 --> 00:06:32,500
just a bunch of random gibberish s3

143
00:06:26,860 --> 00:06:34,990
Amazon AWS on that but they really

144
00:06:32,500 --> 00:06:38,560
prefer you to use like DNS compliant

145
00:06:34,990 --> 00:06:39,729
names so this is I own the domain hacked

146
00:06:38,560 --> 00:06:42,629
outlaw

147
00:06:39,729 --> 00:06:45,909
so I have created a website above my

148
00:06:42,629 --> 00:06:47,919
hacking adventures I guess called info

149
00:06:45,909 --> 00:06:52,990
dot hacked law and I want to host it on

150
00:06:47,919 --> 00:06:56,589
s3 okay so this is the DNS record in

151
00:06:52,990 --> 00:06:59,020
fact for that website okay and the

152
00:06:56,589 --> 00:07:01,360
website is a bucket it has three files

153
00:06:59,020 --> 00:07:06,818
in it an about page that in HTML and

154
00:07:01,360 --> 00:07:10,449
index and a contact page so the way the

155
00:07:06,819 --> 00:07:12,639
subdomain takeover works is nobody's

156
00:07:10,449 --> 00:07:17,110
going to type that big long DNS record

157
00:07:12,639 --> 00:07:20,620
into their browser so that you create a

158
00:07:17,110 --> 00:07:23,199
cname record in flow tactile all the

159
00:07:20,620 --> 00:07:27,039
points at the longer record that then in

160
00:07:23,199 --> 00:07:28,870
turn Amazon points at a managed IP and

161
00:07:27,039 --> 00:07:33,360
it's sort of geo-located around globe

162
00:07:28,870 --> 00:07:37,479
magic happens in the Amazon Cloud okay

163
00:07:33,360 --> 00:07:41,469
so the thing that goes bad is that

164
00:07:37,479 --> 00:07:43,748
sometimes websites go away and so you're

165
00:07:41,469 --> 00:07:47,620
no longer hosting this website but you

166
00:07:43,749 --> 00:07:49,089
keep the DNS record okay and what a bad

167
00:07:47,620 --> 00:07:50,919
guy could do is he could like look at

168
00:07:49,089 --> 00:07:54,249
all your DNS records for like DNS

169
00:07:50,919 --> 00:07:56,349
dumpster or whatever and see that you

170
00:07:54,249 --> 00:08:00,159
have this DNS record that doesn't go

171
00:07:56,349 --> 00:08:02,349
anywhere in Amazon and they can register

172
00:08:00,159 --> 00:08:04,060
that bucket because if it's not

173
00:08:02,349 --> 00:08:06,188
registered anyone can register it and

174
00:08:04,060 --> 00:08:08,050
then they can put whatever they want in

175
00:08:06,189 --> 00:08:09,939
the bucket do you like the Faceman that

176
00:08:08,050 --> 00:08:12,969
type of thing and then they now control

177
00:08:09,939 --> 00:08:15,819
what shows up when somebody goes to info

178
00:08:12,969 --> 00:08:18,430
dot hack tile all in the browser okay so

179
00:08:15,819 --> 00:08:20,889
that's the subdomain takeover basically

180
00:08:18,430 --> 00:08:23,709
the fix with this is like make sure your

181
00:08:20,889 --> 00:08:25,599
when you decommission static websites in

182
00:08:23,709 --> 00:08:29,559
that our buckets you also decommission

183
00:08:25,599 --> 00:08:31,509
or change the DNS record okay so that's

184
00:08:29,559 --> 00:08:34,839
a super simple example we're gonna do

185
00:08:31,509 --> 00:08:38,620
another more complicated s3 example

186
00:08:34,839 --> 00:08:41,829
around week permissions okay so this is

187
00:08:38,620 --> 00:08:44,649
secret stacked all all and basically

188
00:08:41,828 --> 00:08:49,089
what's in here I've got all my oh my

189
00:08:44,649 --> 00:08:51,819
good like AWS credentials and passwords

190
00:08:49,089 --> 00:08:53,510
and keys and stuff I guess it's all in

191
00:08:51,819 --> 00:08:56,610
keys

192
00:08:53,510 --> 00:08:58,350
so there's a get repo we're gonna see

193
00:08:56,610 --> 00:09:00,649
what's in there and then there's a PIM

194
00:08:58,350 --> 00:09:02,940
file which is basically like an SSH key

195
00:09:00,649 --> 00:09:08,790
we're gonna see what that might be

196
00:09:02,940 --> 00:09:14,880
useful for a little later okay and this

197
00:09:08,790 --> 00:09:18,689
is a an AWS permission statement it's

198
00:09:14,880 --> 00:09:20,189
written in JSON and it's kind of like

199
00:09:18,690 --> 00:09:23,360
you can think of this as like a Windows

200
00:09:20,190 --> 00:09:24,750
like file system ECL that's kind of the

201
00:09:23,360 --> 00:09:27,950
analog here

202
00:09:24,750 --> 00:09:30,720
okay now this technically isn't a valid

203
00:09:27,950 --> 00:09:32,220
permission statement I've combined a few

204
00:09:30,720 --> 00:09:34,200
things just so that it fits on one slide

205
00:09:32,220 --> 00:09:37,200
but I've got all the important things in

206
00:09:34,200 --> 00:09:39,690
here so the people who are real cloud

207
00:09:37,200 --> 00:09:43,769
people don't don't yell at me but

208
00:09:39,690 --> 00:09:45,899
basically there is so we're adding

209
00:09:43,769 --> 00:09:53,880
permission that's that's the name of the

210
00:09:45,899 --> 00:09:56,459
the policy that we're setting we the the

211
00:09:53,880 --> 00:09:58,920
permissions were adding our get object

212
00:09:56,459 --> 00:10:00,899
and list bucket yet object you kind of

213
00:09:58,920 --> 00:10:05,339
think of as read list bucket you can

214
00:10:00,899 --> 00:10:07,440
think of as list and then we're adding

215
00:10:05,339 --> 00:10:09,740
it to the resource secret stack towel

216
00:10:07,440 --> 00:10:11,610
that's the name of the bucket okay and

217
00:10:09,740 --> 00:10:13,470
normally this these are not like

218
00:10:11,610 --> 00:10:15,180
inherently bad permissions to add the

219
00:10:13,470 --> 00:10:18,120
problem is is that we've got this one

220
00:10:15,180 --> 00:10:19,589
tiny little star that is the principle

221
00:10:18,120 --> 00:10:21,690
and basically what we're saying is we're

222
00:10:19,589 --> 00:10:26,070
giving out this permission to every

223
00:10:21,690 --> 00:10:30,959
person globally around the world okay so

224
00:10:26,070 --> 00:10:32,820
every everybody who can get to s3 can

225
00:10:30,959 --> 00:10:36,810
read what's in this bucket and also list

226
00:10:32,820 --> 00:10:38,640
what's in this bucket okay so what does

227
00:10:36,810 --> 00:10:41,880
that mean as an attacker how do i how do

228
00:10:38,640 --> 00:10:45,300
i actually operationalize or attack okay

229
00:10:41,880 --> 00:10:46,500
so the way you do it is with the or the

230
00:10:45,300 --> 00:10:48,930
way one of the ways you can do it is

231
00:10:46,500 --> 00:10:52,709
with the AWS CLI there are other tools

232
00:10:48,930 --> 00:10:54,839
that will do it too and basically how

233
00:10:52,709 --> 00:10:56,069
this works is we're running AWS which is

234
00:10:54,839 --> 00:10:58,890
the command you can install this via pip

235
00:10:56,070 --> 00:11:03,060
AWS the sub command is s3 we're running

236
00:10:58,890 --> 00:11:04,980
an LS on the resource which is a curse

237
00:11:03,060 --> 00:11:06,150
so we want to show everything in every

238
00:11:04,980 --> 00:11:07,590
folder

239
00:11:06,150 --> 00:11:11,010
the no sign request this is the

240
00:11:07,590 --> 00:11:13,200
important part of this we're not

241
00:11:11,010 --> 00:11:16,430
actually logging in we're not trying to

242
00:11:13,200 --> 00:11:18,870
use our API keys or if we have API keys

243
00:11:16,430 --> 00:11:21,270
we're just saying we want to be

244
00:11:18,870 --> 00:11:25,410
anonymous and not actually authenticate

245
00:11:21,270 --> 00:11:28,230
and because of the weak permissions this

246
00:11:25,410 --> 00:11:30,300
actually succeeds we're able to list the

247
00:11:28,230 --> 00:11:32,280
information that's in this bucket okay

248
00:11:30,300 --> 00:11:34,459
and we see that as an attacker we see

249
00:11:32,280 --> 00:11:36,120
there's some interesting stuff in here

250
00:11:34,460 --> 00:11:37,890
so that's great

251
00:11:36,120 --> 00:11:42,930
what do I do with this with this

252
00:11:37,890 --> 00:11:47,100
information well you can there's a AWS

253
00:11:42,930 --> 00:11:48,540
s3 CP copy command but sync is probably

254
00:11:47,100 --> 00:11:51,780
because there's a large number of a

255
00:11:48,540 --> 00:11:54,750
large number of files you can do a sync

256
00:11:51,780 --> 00:11:59,579
source destination again a no sign

257
00:11:54,750 --> 00:12:01,080
request and you can even sync between s3

258
00:11:59,580 --> 00:12:05,010
buckets if you want so you could say I

259
00:12:01,080 --> 00:12:07,050
want to go from this s3 bucket that I'm

260
00:12:05,010 --> 00:12:09,630
attacking to this s3 bucket which I

261
00:12:07,050 --> 00:12:11,099
control if you want or you could just go

262
00:12:09,630 --> 00:12:12,810
to your fossils depends on how much data

263
00:12:11,100 --> 00:12:15,150
you have to you've got if you don't know

264
00:12:12,810 --> 00:12:17,280
much room on your on your workstation

265
00:12:15,150 --> 00:12:21,120
and you know you want to store in the

266
00:12:17,280 --> 00:12:24,870
cloud you can do that so let's look at

267
00:12:21,120 --> 00:12:26,760
this this git repo we've got a

268
00:12:24,870 --> 00:12:29,190
credentials file this is actually at AWS

269
00:12:26,760 --> 00:12:31,710
credentials file and our developers or

270
00:12:29,190 --> 00:12:33,780
whoever have created this git repo have

271
00:12:31,710 --> 00:12:36,660
been smart and said you know we're not

272
00:12:33,780 --> 00:12:40,410
storing our AWS AWS access key and our

273
00:12:36,660 --> 00:12:43,199
secret key in this file they've put a

274
00:12:40,410 --> 00:12:45,780
change this you know in there and that's

275
00:12:43,200 --> 00:12:48,630
good best practice but at one point they

276
00:12:45,780 --> 00:12:51,839
have not done this and an older version

277
00:12:48,630 --> 00:12:55,730
of the repo actually contained secret

278
00:12:51,840 --> 00:12:58,290
key or a secret key and a key ID okay so

279
00:12:55,730 --> 00:13:01,230
the way we find that is we use a great

280
00:12:58,290 --> 00:13:02,880
tool called truffle hog and basically

281
00:13:01,230 --> 00:13:05,490
truffle hog you pointed out a folder I

282
00:13:02,880 --> 00:13:09,270
also pointed out I wet like a git repo

283
00:13:05,490 --> 00:13:10,920
on a website and it will go through and

284
00:13:09,270 --> 00:13:13,069
recurse through all the files in the

285
00:13:10,920 --> 00:13:16,140
commit history and all that and it will

286
00:13:13,070 --> 00:13:19,050
look for stuff that looks like keys or

287
00:13:16,140 --> 00:13:19,860
other sensitive information so in this

288
00:13:19,050 --> 00:13:24,000
case it

289
00:13:19,860 --> 00:13:29,100
it came up with a with with a you know

290
00:13:24,000 --> 00:13:29,640
set of API keys okay great that's

291
00:13:29,100 --> 00:13:31,920
awesome

292
00:13:29,640 --> 00:13:35,910
we found some API keys so now what what

293
00:13:31,920 --> 00:13:38,069
what do we do with them and actually

294
00:13:35,910 --> 00:13:40,469
first so where do we where else can I

295
00:13:38,070 --> 00:13:43,260
find API keys right so you can find them

296
00:13:40,470 --> 00:13:46,350
in code you can also find if you hack a

297
00:13:43,260 --> 00:13:48,420
you know somebody's you social and get a

298
00:13:46,350 --> 00:13:50,070
shell in a box you might be able to find

299
00:13:48,420 --> 00:13:52,529
it in a system that's one of the reasons

300
00:13:50,070 --> 00:13:55,560
why attacking the API with API keys is a

301
00:13:52,529 --> 00:13:57,510
lot better than attacking the AWS

302
00:13:55,560 --> 00:14:00,750
console with username password because

303
00:13:57,510 --> 00:14:04,620
API keys are left lying around all the

304
00:14:00,750 --> 00:14:06,690
time a lot more often okay you can also

305
00:14:04,620 --> 00:14:08,220
find them in environment variables so

306
00:14:06,690 --> 00:14:11,850
there's a very common environment

307
00:14:08,220 --> 00:14:14,610
variable AWS access key ID that Amazon

308
00:14:11,850 --> 00:14:18,300
puts in their documentation and they and

309
00:14:14,610 --> 00:14:19,920
some people use it so definitely check

310
00:14:18,300 --> 00:14:21,990
your environment variables when you get

311
00:14:19,920 --> 00:14:23,640
on a box or if you're in like a

312
00:14:21,990 --> 00:14:25,110
configuration management and you get

313
00:14:23,640 --> 00:14:27,240
into something that does configuration

314
00:14:25,110 --> 00:14:31,890
management check that the what

315
00:14:27,240 --> 00:14:34,860
environment variables are being set and

316
00:14:31,890 --> 00:14:38,579
then there's also a location in the home

317
00:14:34,860 --> 00:14:43,920
folder a lot of users that use AWS on a

318
00:14:38,579 --> 00:14:46,620
regular basis that's you know dot e WS /

319
00:14:43,920 --> 00:14:49,529
credentials and basically this this is

320
00:14:46,620 --> 00:14:51,480
what's called a native profile and this

321
00:14:49,529 --> 00:14:55,189
is how a way that you can when you have

322
00:14:51,480 --> 00:14:58,350
to authenticate against a you know

323
00:14:55,190 --> 00:15:01,800
against AWS over and over again this is

324
00:14:58,350 --> 00:15:06,270
a way to do it okay so that's what I

325
00:15:01,800 --> 00:15:11,089
mean by there lying around you can also

326
00:15:06,270 --> 00:15:14,040
just search for AWS keys with with grep

327
00:15:11,089 --> 00:15:17,579
if you want so you know good things to

328
00:15:14,040 --> 00:15:20,339
search with our AWS key ID secret access

329
00:15:17,579 --> 00:15:23,760
key aki a is a really good one because

330
00:15:20,339 --> 00:15:26,550
that is the beginning of almost every

331
00:15:23,760 --> 00:15:29,310
access key that ever or every key idea

332
00:15:26,550 --> 00:15:32,209
that i've ever seen is aki some

333
00:15:29,310 --> 00:15:32,209
exceptions to that but

334
00:15:32,280 --> 00:15:41,699
that's pretty common for like user and

335
00:15:34,290 --> 00:15:44,370
system keys and then thanks alright so I

336
00:15:41,700 --> 00:15:47,490
also have a couple of strips that are I

337
00:15:44,370 --> 00:15:49,380
have a github repo that you can take a

338
00:15:47,490 --> 00:15:51,210
look at this is just a little bit of one

339
00:15:49,380 --> 00:15:54,360
and basically this is using both three

340
00:15:51,210 --> 00:15:59,280
so we now have a set of API keys we need

341
00:15:54,360 --> 00:16:00,690
like check because oftentimes in a git

342
00:15:59,280 --> 00:16:02,400
repo if they've been committed and

343
00:16:00,690 --> 00:16:03,780
somebody has already found them then the

344
00:16:02,400 --> 00:16:05,970
keys have been rotated so we need to

345
00:16:03,780 --> 00:16:07,680
know are these actually keys that are

346
00:16:05,970 --> 00:16:10,500
useful to us or are they just garbage

347
00:16:07,680 --> 00:16:12,810
and they've been rotated already so this

348
00:16:10,500 --> 00:16:15,660
is a simple script I wrote with boto 3

349
00:16:12,810 --> 00:16:18,300
and basically it asked for the key idea

350
00:16:15,660 --> 00:16:20,550
secret it runs a few checks so it checks

351
00:16:18,300 --> 00:16:24,780
to see if the user is like a valid user

352
00:16:20,550 --> 00:16:26,339
or not it also checks the user name so

353
00:16:24,780 --> 00:16:29,310
you need to like hunt down the person

354
00:16:26,340 --> 00:16:32,640
that belongs to these keys this is a

355
00:16:29,310 --> 00:16:35,550
really good way to know who they are or

356
00:16:32,640 --> 00:16:37,980
what they're involved with so like if

357
00:16:35,550 --> 00:16:39,449
they're if their name is like first or

358
00:16:37,980 --> 00:16:41,130
if they're you account is first letter

359
00:16:39,450 --> 00:16:44,160
last name you know who to talk to if

360
00:16:41,130 --> 00:16:47,310
it's an account related to you know

361
00:16:44,160 --> 00:16:48,600
databases or whatever then you know sort

362
00:16:47,310 --> 00:16:52,560
of the general group that you may need

363
00:16:48,600 --> 00:16:55,160
to talk to so the output of this script

364
00:16:52,560 --> 00:16:58,680
kind of looks like this it says you know

365
00:16:55,160 --> 00:17:01,469
valid key this is the user name what

366
00:16:58,680 --> 00:17:06,300
groups is a part of what policies is a

367
00:17:01,470 --> 00:17:08,490
part of and is MFA being used which is

368
00:17:06,300 --> 00:17:15,030
also a good thing to know because just

369
00:17:08,490 --> 00:17:16,710
you know good practice all right so the

370
00:17:15,030 --> 00:17:19,200
other thing we found in that secrets

371
00:17:16,710 --> 00:17:21,290
bucket was a PEM file or a secret key

372
00:17:19,200 --> 00:17:26,790
okay and there's a couple of uses for

373
00:17:21,290 --> 00:17:29,100
these secret keys one of them is every

374
00:17:26,790 --> 00:17:31,710
Linux host that you spin up at ec2 which

375
00:17:29,100 --> 00:17:35,639
is every Linux virtual machine basically

376
00:17:31,710 --> 00:17:40,610
has an initial user that you can connect

377
00:17:35,640 --> 00:17:43,680
to the box with and when you create that

378
00:17:40,610 --> 00:17:45,840
virtual machine you associate a secret

379
00:17:43,680 --> 00:17:48,029
key with that machine

380
00:17:45,840 --> 00:17:53,129
and so if you find that key you can

381
00:17:48,029 --> 00:17:54,870
probably login as the user that is the

382
00:17:53,129 --> 00:17:56,668
first user on that box okay and that's

383
00:17:54,870 --> 00:18:00,889
usually a very well permissioned user

384
00:17:56,669 --> 00:18:00,889
unless somebody's changed something I

385
00:18:01,100 --> 00:18:07,860
say they can yeah well I'm gonna get to

386
00:18:04,590 --> 00:18:10,649
that hold on so you're getting a head so

387
00:18:07,860 --> 00:18:12,299
this is if the box is sitting on the

388
00:18:10,649 --> 00:18:13,799
public internet and like listening on

389
00:18:12,299 --> 00:18:15,509
port 22 it that is an excellent point

390
00:18:13,799 --> 00:18:21,059
okay we're going to talk about that in a

391
00:18:15,509 --> 00:18:23,340
minute so this is and this is like you

392
00:18:21,059 --> 00:18:24,720
know the first pen test for this place

393
00:18:23,340 --> 00:18:30,269
so that you know they don't they're not

394
00:18:24,720 --> 00:18:31,830
doing good things well okay so the how

395
00:18:30,269 --> 00:18:33,840
do I get a list of Linux hosts there's

396
00:18:31,830 --> 00:18:36,119
this complicated command at the bottom

397
00:18:33,840 --> 00:18:38,070
here basically describe instances the

398
00:18:36,119 --> 00:18:39,779
way is a way to like get information

399
00:18:38,070 --> 00:18:43,499
about all the instances running within

400
00:18:39,779 --> 00:18:45,149
ec2 now this one isn't perfect because

401
00:18:43,499 --> 00:18:47,850
you still have to parse through like and

402
00:18:45,149 --> 00:18:50,539
remove all the windows instances the

403
00:18:47,850 --> 00:18:52,709
platform so long story but basically

404
00:18:50,539 --> 00:18:58,169
it's not a good way to filter out Linux

405
00:18:52,710 --> 00:18:59,730
boxes all right next up Windows

406
00:18:58,169 --> 00:19:01,019
passwords using a Windows passwords out

407
00:18:59,730 --> 00:19:04,289
of AWS isn't that cool

408
00:19:01,019 --> 00:19:08,070
so the way you do it so when you set up

409
00:19:04,289 --> 00:19:09,658
a Windows box in AWS it's like okay I

410
00:19:08,070 --> 00:19:11,879
have this password but it's encrypted

411
00:19:09,659 --> 00:19:13,769
and the way it encrypts it is it uses

412
00:19:11,879 --> 00:19:18,119
the public key of that private key that

413
00:19:13,769 --> 00:19:19,350
the pin file to encrypt the password so

414
00:19:18,119 --> 00:19:21,090
that they can store the encrypted

415
00:19:19,350 --> 00:19:23,428
version of the password and then when

416
00:19:21,090 --> 00:19:25,529
you need it you can be like give me the

417
00:19:23,429 --> 00:19:27,360
password and they're like okay give me

418
00:19:25,529 --> 00:19:29,220
the private key it does the decryption

419
00:19:27,360 --> 00:19:34,408
in the browser and that gives you the

420
00:19:29,220 --> 00:19:35,639
initial password on the host right okay

421
00:19:34,409 --> 00:19:39,720
so this that's what happens in the

422
00:19:35,639 --> 00:19:42,320
browser so remember I said anything you

423
00:19:39,720 --> 00:19:45,269
do in the console in the GUI you can do

424
00:19:42,320 --> 00:19:46,830
at the API level right so think about

425
00:19:45,269 --> 00:19:49,110
how this actually works right so your

426
00:19:46,830 --> 00:19:51,570
username in in the in the in the GUI in

427
00:19:49,110 --> 00:19:53,610
the console your authentication is

428
00:19:51,570 --> 00:19:56,460
username password multi-factor

429
00:19:53,610 --> 00:19:58,168
authentication if present and then the

430
00:19:56,460 --> 00:19:59,610
decryption is handled by your private

431
00:19:58,169 --> 00:20:01,500
key and I

432
00:19:59,610 --> 00:20:02,939
a windows Password okay so that's

433
00:20:01,500 --> 00:20:06,210
essentially what's happening when you

434
00:20:02,940 --> 00:20:07,320
get that Windows password in the GUI

435
00:20:06,210 --> 00:20:09,960
okay

436
00:20:07,320 --> 00:20:16,559
how does this work at the API level a

437
00:20:09,960 --> 00:20:18,870
lot simpler right so your API keys are

438
00:20:16,559 --> 00:20:21,480
the only authentication that you need

439
00:20:18,870 --> 00:20:25,760
and your private key does the decryption

440
00:20:21,480 --> 00:20:28,140
and then you get a Windows password okay

441
00:20:25,760 --> 00:20:31,080
this is also a script I have it's up on

442
00:20:28,140 --> 00:20:35,910
my github you can take a look I also use

443
00:20:31,080 --> 00:20:44,399
this boat oh okay so there's one caveat

444
00:20:35,910 --> 00:20:46,980
with this obviously the password RDP

445
00:20:44,400 --> 00:20:48,630
needs to be listening on the internet

446
00:20:46,980 --> 00:20:51,090
for you to like make use of that

447
00:20:48,630 --> 00:20:55,350
password and second of all if they've

448
00:20:51,090 --> 00:20:58,590
rotated the password since the box was

449
00:20:55,350 --> 00:21:00,030
spun up then the this is not going to

450
00:20:58,590 --> 00:21:04,530
have the most up-to-date password it's

451
00:21:00,030 --> 00:21:06,690
just the initial password okay so yeah

452
00:21:04,530 --> 00:21:10,559
passwords I've been changed you know

453
00:21:06,690 --> 00:21:14,700
good luck all right so this is the AWS

454
00:21:10,559 --> 00:21:17,340
networking slide and basically I'm not a

455
00:21:14,700 --> 00:21:19,169
networking guy so I need like some like

456
00:21:17,340 --> 00:21:23,149
meme assistants so I'm gonna do the big

457
00:21:19,169 --> 00:21:26,580
explosive brain meme yeah so basically

458
00:21:23,150 --> 00:21:29,100
the first level of AWS networking the

459
00:21:26,580 --> 00:21:30,870
Homer Simpson brain is like management

460
00:21:29,100 --> 00:21:33,090
interfaces on the public Internet so

461
00:21:30,870 --> 00:21:36,629
that's like port 22 and three and you

462
00:21:33,090 --> 00:21:38,939
know RDP on the public Internet that's

463
00:21:36,630 --> 00:21:42,830
that's Homer system brain okay that's no

464
00:21:38,940 --> 00:21:44,880
good so the next level is and these

465
00:21:42,830 --> 00:21:46,439
second third and fourth level it kind of

466
00:21:44,880 --> 00:21:50,210
like you could take them in multiple

467
00:21:46,440 --> 00:21:52,610
orders I like this order so basically

468
00:21:50,210 --> 00:21:57,059
you're starting to fire your synapses

469
00:21:52,610 --> 00:22:00,030
limits network changes in I am so like

470
00:21:57,059 --> 00:22:01,200
you know only let your you know people

471
00:22:00,030 --> 00:22:03,990
who know how to do networking do

472
00:22:01,200 --> 00:22:08,130
networking in AWS okay that's that's

473
00:22:03,990 --> 00:22:10,800
step two step three is like you could a

474
00:22:08,130 --> 00:22:12,150
CL off and just say 422 and three three

475
00:22:10,800 --> 00:22:13,280
eight nine you can only get to that from

476
00:22:12,150 --> 00:22:16,200
like certain ip's

477
00:22:13,280 --> 00:22:19,860
it's like you start now you're starting

478
00:22:16,200 --> 00:22:24,270
to fire the next level is VPN tunnels to

479
00:22:19,860 --> 00:22:28,139
AWS so and I say VPC so that's a V PC is

480
00:22:24,270 --> 00:22:30,330
like a cloud network on Amazon okay so

481
00:22:28,140 --> 00:22:32,490
like basically the idea is you have a

482
00:22:30,330 --> 00:22:34,050
private network in Amazon you have a

483
00:22:32,490 --> 00:22:36,150
private network wherever you're working

484
00:22:34,050 --> 00:22:39,720
and you put a VPN tunnel that you can

485
00:22:36,150 --> 00:22:42,900
route to run through and then you can

486
00:22:39,720 --> 00:22:45,030
SSH to the management interfaces through

487
00:22:42,900 --> 00:22:46,740
that for that tunnel okay perhaps some

488
00:22:45,030 --> 00:22:51,629
sort of jump box or you know whatever

489
00:22:46,740 --> 00:22:56,610
you want to do so that's explosive brain

490
00:22:51,630 --> 00:22:59,160
and then the Nirvana brain is obviously

491
00:22:56,610 --> 00:23:01,530
monitoring Network changes in traffic so

492
00:22:59,160 --> 00:23:02,850
that's you know I don't know if there's

493
00:23:01,530 --> 00:23:04,470
any other brains that we could fit on

494
00:23:02,850 --> 00:23:07,469
the slide but basically that's that's

495
00:23:04,470 --> 00:23:09,660
what I feel like AWS networking it and

496
00:23:07,470 --> 00:23:14,040
why this is important to know as a pen

497
00:23:09,660 --> 00:23:18,480
tester is like if you can get them to

498
00:23:14,040 --> 00:23:21,090
move like to step three you're probably

499
00:23:18,480 --> 00:23:24,620
out of luck okay in terms of getting to

500
00:23:21,090 --> 00:23:24,620
those management interfaces okay

501
00:23:24,680 --> 00:23:29,990
and you might say well why don't you put

502
00:23:27,210 --> 00:23:33,390
separate it's up to Walt because

503
00:23:29,990 --> 00:23:37,400
developers are gonna like open up 22 if

504
00:23:33,390 --> 00:23:39,480
they have the ability to so okay so

505
00:23:37,400 --> 00:23:41,190
that's AWS networking there's another

506
00:23:39,480 --> 00:23:43,110
interesting thing to mention about AWS

507
00:23:41,190 --> 00:23:45,540
networking that like I don't know that

508
00:23:43,110 --> 00:23:47,219
it's super useful for anything other

509
00:23:45,540 --> 00:23:49,110
than like enumeration if you have some

510
00:23:47,220 --> 00:23:51,450
ideas feel free to let me know but

511
00:23:49,110 --> 00:23:52,860
there's this like here we got like a 169

512
00:23:51,450 --> 00:23:56,790
address on a Windows computer and it's

513
00:23:52,860 --> 00:23:58,649
like you don't have Internet well AWS

514
00:23:56,790 --> 00:24:03,560
was like man we can use that like

515
00:23:58,650 --> 00:24:03,560
non-routable IP address and have it like

516
00:24:04,100 --> 00:24:08,790
like feed information within the virtual

517
00:24:06,930 --> 00:24:12,300
machine so if you get a shell on a box

518
00:24:08,790 --> 00:24:15,750
that are running with an AWS you can get

519
00:24:12,300 --> 00:24:20,659
certain metadata about the box you know

520
00:24:15,750 --> 00:24:23,340
things like IDs policies security groups

521
00:24:20,660 --> 00:24:26,780
network information that type of thing

522
00:24:23,340 --> 00:24:29,360
and you just have to curl this magic URL

523
00:24:26,780 --> 00:24:31,760
and the within the VM or if you have

524
00:24:29,360 --> 00:24:39,729
like a web shell or whatever so an

525
00:24:31,760 --> 00:24:42,410
interesting note of about that I guess

526
00:24:39,730 --> 00:24:48,770
and that's kind of what it looks like so

527
00:24:42,410 --> 00:24:54,770
you get like information back all right

528
00:24:48,770 --> 00:24:59,870
elastic block storage so within AWS

529
00:24:54,770 --> 00:25:03,530
there's kind of a couple of ways that

530
00:24:59,870 --> 00:25:05,810
data is stored in ec2 all right so if

531
00:25:03,530 --> 00:25:08,710
you have a the base virtual machine

532
00:25:05,810 --> 00:25:11,659
image that's called the AMI Amazon

533
00:25:08,710 --> 00:25:14,030
machine image I guess it is and then you

534
00:25:11,660 --> 00:25:16,550
also have a plastic block storage so

535
00:25:14,030 --> 00:25:19,360
that's basically I need to have more

536
00:25:16,550 --> 00:25:24,560
hard drives that are connected to this

537
00:25:19,360 --> 00:25:25,850
to this VM that's or I want to take

538
00:25:24,560 --> 00:25:29,740
snapshots that type of thing

539
00:25:25,850 --> 00:25:29,740
that's what elastic block storage is so

540
00:25:29,860 --> 00:25:33,679
one of the one of the things that

541
00:25:32,180 --> 00:25:38,060
happened at Def Con was somebody gave a

542
00:25:33,680 --> 00:25:41,360
talk Ben Morris called more keys than

543
00:25:38,060 --> 00:25:43,879
the janitor and basically what been

544
00:25:41,360 --> 00:25:45,949
figured out so there are a heck of a lot

545
00:25:43,880 --> 00:25:53,680
of elastic block storage

546
00:25:45,950 --> 00:25:57,980
a whole bunch of elastic block storage

547
00:25:53,680 --> 00:26:00,830
devices I guess in AWS that are public

548
00:25:57,980 --> 00:26:03,980
that of public permissions the public

549
00:26:00,830 --> 00:26:06,649
read essentially okay so these are like

550
00:26:03,980 --> 00:26:12,550
hard drive images that have public

551
00:26:06,650 --> 00:26:16,580
reading so what he figured out was these

552
00:26:12,550 --> 00:26:18,020
these EBS things are public and they're

553
00:26:16,580 --> 00:26:20,300
not encrypted so you can encrypt the

554
00:26:18,020 --> 00:26:25,400
volumes but that's work and who's going

555
00:26:20,300 --> 00:26:28,520
to do that right so what he figured out

556
00:26:25,400 --> 00:26:31,330
how to do was from a wholly totally

557
00:26:28,520 --> 00:26:31,330
different aw

558
00:26:33,940 --> 00:26:36,000
you

559
00:26:40,280 --> 00:26:47,658
this account take a snapshot that has

560
00:26:45,530 --> 00:26:51,980
been taken and then connect to it with a

561
00:26:47,659 --> 00:26:53,990
different AWS image and then read the

562
00:26:51,980 --> 00:26:56,990
date or straight off the disk and

563
00:26:53,990 --> 00:27:04,640
potentially exfiltrated it however they

564
00:26:56,990 --> 00:27:06,320
want to okay so he was like I'm gonna

565
00:27:04,640 --> 00:27:07,940
release a tool and I was like I'm not

566
00:27:06,320 --> 00:27:10,250
gonna write anything then I'm just gonna

567
00:27:07,940 --> 00:27:12,409
wait for him to release it so it's been

568
00:27:10,250 --> 00:27:14,720
since Def Con and he hasn't released it

569
00:27:12,409 --> 00:27:19,190
so I don't know if people have contacted

570
00:27:14,720 --> 00:27:21,710
him or what but basically this should

571
00:27:19,190 --> 00:27:24,110
also be possible not a cross account so

572
00:27:21,710 --> 00:27:27,470
if you you're well permissioned in a in

573
00:27:24,110 --> 00:27:29,059
a environment that you're attacking you

574
00:27:27,470 --> 00:27:32,150
should be able to take a snapshot and

575
00:27:29,059 --> 00:27:35,330
then just spin up an ami and then

576
00:27:32,150 --> 00:27:38,210
connect that image and then exit rate

577
00:27:35,330 --> 00:27:42,970
the data however you want so that's an

578
00:27:38,210 --> 00:27:46,039
important thing to think about as well

579
00:27:42,970 --> 00:27:49,159
all right so that's like stealthy stuff

580
00:27:46,039 --> 00:27:52,658
they're relatively stealthy stuff the

581
00:27:49,159 --> 00:27:55,940
Scout 2 by NCC group is a really good

582
00:27:52,659 --> 00:27:58,220
baseline tool so basically it also

583
00:27:55,940 --> 00:28:02,120
supports a WRI it also supports an azure

584
00:27:58,220 --> 00:28:15,169
and beta GCP alibaba cloud and Oracle

585
00:28:02,120 --> 00:28:16,908
cloud clout a cloud audit support those

586
00:28:15,169 --> 00:28:18,860
keys need to be associated with a lot of

587
00:28:16,909 --> 00:28:22,730
permissions within whatever environment

588
00:28:18,860 --> 00:28:25,039
you're assessing it'll run a report and

589
00:28:22,730 --> 00:28:26,900
then it'll highlight areas that need

590
00:28:25,039 --> 00:28:29,559
work or have issues or whatever you

591
00:28:26,900 --> 00:28:31,820
control through the report and say ok

592
00:28:29,559 --> 00:28:34,428
what's wrong with the root account let's

593
00:28:31,820 --> 00:28:34,939
you know figure out what we need to do

594
00:28:34,429 --> 00:28:42,890
to fix that

595
00:28:34,940 --> 00:28:46,159
ok so let's go to cartography is by the

596
00:28:42,890 --> 00:28:50,240
lifts people and AWS bloodhound

597
00:28:46,159 --> 00:28:53,020
basically so same audit permission you

598
00:28:50,240 --> 00:28:56,380
run it against an upload

599
00:28:53,020 --> 00:28:58,570
data into a neo4j database just like

600
00:28:56,380 --> 00:29:00,580
with bloodhound it doesn't have the nice

601
00:28:58,570 --> 00:29:02,590
electron front interface so you actually

602
00:29:00,580 --> 00:29:04,689
have to like write some of the queries

603
00:29:02,590 --> 00:29:08,889
yourself and the query language is not

604
00:29:04,690 --> 00:29:10,330
too difficult to pick up so but what's

605
00:29:08,890 --> 00:29:12,280
really cool about this is you can you

606
00:29:10,330 --> 00:29:15,340
can write queries and say okay show me

607
00:29:12,280 --> 00:29:19,090
all the s3 buckets that have public

608
00:29:15,340 --> 00:29:22,379
permissions show me all the databases

609
00:29:19,090 --> 00:29:24,850
that aren't encrypted you can write

610
00:29:22,380 --> 00:29:25,990
queries like that and it will show it to

611
00:29:24,850 --> 00:29:28,059
you easily there's other ways to do it

612
00:29:25,990 --> 00:29:34,059
too but this one's pretty

613
00:29:28,059 --> 00:29:36,309
so other resources so if you want to

614
00:29:34,059 --> 00:29:38,440
learn more about AWS there's a couple of

615
00:29:36,309 --> 00:29:40,000
CTFs that are in Amazon Web Services

616
00:29:38,440 --> 00:29:43,179
flossed cloud and flus

617
00:29:40,000 --> 00:29:44,260
- dark cloud I I would say and I I wish

618
00:29:43,179 --> 00:29:45,550
I could give credit the people who've

619
00:29:44,260 --> 00:29:47,530
made I'm good I don't remember what it

620
00:29:45,550 --> 00:29:51,040
is you'll figure it out when you get

621
00:29:47,530 --> 00:29:53,620
there but they ramp up in intensity

622
00:29:51,040 --> 00:29:55,240
pretty quickly I feel like but a lot of

623
00:29:53,620 --> 00:29:57,459
the early challenges will get you

624
00:29:55,240 --> 00:30:00,190
started and there's good write-ups out

625
00:29:57,460 --> 00:30:04,240
there for them so definitely check those

626
00:30:00,190 --> 00:30:07,720
out if you want to learn more there's

627
00:30:04,240 --> 00:30:10,059
also a slurp there's multiple slurps out

628
00:30:07,720 --> 00:30:13,600
there but like this slurp is really good

629
00:30:10,059 --> 00:30:16,690
it has s3 bucket enumeration this one

630
00:30:13,600 --> 00:30:19,030
ties into search stream so it will go

631
00:30:16,690 --> 00:30:21,940
through the search stream and for a

632
00:30:19,030 --> 00:30:24,970
certain domain and find subdomains that

633
00:30:21,940 --> 00:30:29,590
a big created via search stream very

634
00:30:24,970 --> 00:30:32,470
well that have been put into the search

635
00:30:29,590 --> 00:30:36,189
what's that sir transparency log and

636
00:30:32,470 --> 00:30:40,780
then sucked into search stream Tony blex

637
00:30:36,190 --> 00:30:43,030
is like this crazy AWS person that has a

638
00:30:40,780 --> 00:30:45,460
lot of really good AWS tools one of them

639
00:30:43,030 --> 00:30:47,920
is called Prowler if you're like a CIS

640
00:30:45,460 --> 00:30:49,870
benchmark shop or you have like weird

641
00:30:47,920 --> 00:30:51,820
compliance requirements it's probably a

642
00:30:49,870 --> 00:30:54,070
tool you want to look at it is the most

643
00:30:51,820 --> 00:30:55,570
extensive set of bash scripts I've ever

644
00:30:54,070 --> 00:30:58,240
seen in my entire life it's amazing

645
00:30:55,570 --> 00:31:00,460
these run written such a sophisticated

646
00:30:58,240 --> 00:31:03,010
tool in bash I'm very impressed but it

647
00:31:00,460 --> 00:31:05,890
works very well and it's able to help

648
00:31:03,010 --> 00:31:06,730
you with your best practices and it's a

649
00:31:05,890 --> 00:31:09,610
little bit easy

650
00:31:06,730 --> 00:31:13,360
to set up and run then Scout - I would

651
00:31:09,610 --> 00:31:14,860
say so and you can run it on a regular

652
00:31:13,360 --> 00:31:19,600
basis a little bit easier

653
00:31:14,860 --> 00:31:24,790
so Tony blacks also has my arsenal of

654
00:31:19,600 --> 00:31:26,530
AWS tools on github I would say some of

655
00:31:24,790 --> 00:31:30,220
these articles are good and some of them

656
00:31:26,530 --> 00:31:34,480
are not so good but they are broke down

657
00:31:30,220 --> 00:31:36,000
yeah you just put them on there he does

658
00:31:34,480 --> 00:31:41,140
break them down into like offensive

659
00:31:36,000 --> 00:31:43,480
defensive beefer training you know that

660
00:31:41,140 --> 00:31:46,059
took things other groups so it's it's a

661
00:31:43,480 --> 00:31:49,890
good resource just to look through and

662
00:31:46,059 --> 00:31:49,889
be like I didn't know but that you know

663
00:31:51,419 --> 00:31:55,030
for if you're an address up and I'm

664
00:31:53,590 --> 00:31:57,428
hearing a lot more about Azure these

665
00:31:55,030 --> 00:32:01,418
days people that are migrating away from

666
00:31:57,429 --> 00:32:04,090
AWS and or just like Microsoft is making

667
00:32:01,419 --> 00:32:06,520
it so expensive to be on Prem and so

668
00:32:04,090 --> 00:32:09,939
cheap to be in the cloud that people are

669
00:32:06,520 --> 00:32:14,770
going Azure knits the next five people

670
00:32:09,940 --> 00:32:18,280
have some tools around a sure not a ton

671
00:32:14,770 --> 00:32:20,160
but you know decent amount and then of

672
00:32:18,280 --> 00:32:25,750
course they're all in PowerShell so

673
00:32:20,160 --> 00:32:27,520
there's that and you know i derbycon

674
00:32:25,750 --> 00:32:28,929
it's made me meant a lot to me in the

675
00:32:27,520 --> 00:32:30,820
last three years and you know part of

676
00:32:28,929 --> 00:32:33,820
the journey is the end I want to really

677
00:32:30,820 --> 00:32:35,860
thank all the volunteers do AV and setup

678
00:32:33,820 --> 00:32:38,409
and takedown and Dave Kennedy and

679
00:32:35,860 --> 00:32:40,479
everybody who volunteers it's really

680
00:32:38,410 --> 00:32:43,890
been a great great con and it's meant a

681
00:32:40,480 --> 00:32:43,890
lot to me so thank you

682
00:32:49,100 --> 00:32:53,699
so my name is Jim shaver I go by latest

683
00:32:52,200 --> 00:32:56,880
in all places around the web I've got

684
00:32:53,700 --> 00:32:58,230
those scripts up in github presently the

685
00:32:56,880 --> 00:33:01,110
presentation will probably be up in a

686
00:32:58,230 --> 00:33:04,350
day and just hit me up on Twitter if I'm

687
00:33:01,110 --> 00:33:27,510
lagging so I would that I'll take your

688
00:33:04,350 --> 00:33:30,510
questions yeah yeah I don't think so

689
00:33:27,510 --> 00:33:35,730
I mean and sometimes windows instances

690
00:33:30,510 --> 00:33:39,150
that are set up in oh yeah sorry so the

691
00:33:35,730 --> 00:33:40,890
question is do the AWS instances windows

692
00:33:39,150 --> 00:33:43,040
instances require a password rotation

693
00:33:40,890 --> 00:33:45,000
I'm not sure I don't think so

694
00:33:43,040 --> 00:34:10,739
anybody know that answer I don't think

695
00:33:45,000 --> 00:34:11,969
so no right right so so the question

696
00:34:10,739 --> 00:34:13,649
basically is like if you get that when

697
00:34:11,969 --> 00:34:15,449
it's password can use it for other

698
00:34:13,649 --> 00:34:16,830
things other than RDP well our DP is the

699
00:34:15,449 --> 00:34:18,540
most likely thing you'll be able to do

700
00:34:16,830 --> 00:34:20,549
but like unless you're like internal

701
00:34:18,540 --> 00:34:22,290
doing like any like if you're on the

702
00:34:20,550 --> 00:34:24,480
land of the corporation and you can

703
00:34:22,290 --> 00:34:31,889
route to the box over an internal IP

704
00:34:24,480 --> 00:34:33,990
through like some sort of VPN you're

705
00:34:31,889 --> 00:34:36,000
probably the only thing that you should

706
00:34:33,989 --> 00:34:37,859
be able to get to is RDP let me put it

707
00:34:36,000 --> 00:34:41,929
that way so four or five should not be

708
00:34:37,859 --> 00:34:41,929
listening on the web or on the internet

709
00:34:45,080 --> 00:34:49,538
yeah

710
00:34:46,389 --> 00:34:49,539
[Music]

711
00:34:49,750 --> 00:35:16,310
okay okay okay sigh Amazon there's a

712
00:35:00,350 --> 00:35:18,740
regex for Aki Aki alternative yeah okay

713
00:35:16,310 --> 00:35:27,380
it's different in so that one six nine

714
00:35:18,740 --> 00:35:40,069
address is different than UCS okay okay

715
00:35:27,380 --> 00:35:41,570
okay yeah oh really

716
00:35:40,070 --> 00:35:42,980
yeah I've got I've seen that but I'm

717
00:35:41,570 --> 00:35:47,510
like I don't know what I do with those

718
00:35:42,980 --> 00:35:48,380
so there's there's there are 169 so like

719
00:35:47,510 --> 00:36:07,130
what do you what do you do with those

720
00:35:48,380 --> 00:36:10,670
API keys okay gotcha okay cool yeah I'm

721
00:36:07,130 --> 00:36:12,110
sure I'm sure yeah it it depends on how

722
00:36:10,670 --> 00:36:17,300
on their use of cloud trail but yeah

723
00:36:12,110 --> 00:36:21,620
shred then yeah it could also appear

724
00:36:17,300 --> 00:36:26,000
like I mean yeah yes the answer and the

725
00:36:21,620 --> 00:36:27,440
question was shouldn't a cloud trail

726
00:36:26,000 --> 00:36:29,000
pick up on some of this stuff a lot of

727
00:36:27,440 --> 00:36:31,640
this stuff if you're looking at cloud

728
00:36:29,000 --> 00:36:34,940
trail it's you should be able to pick up

729
00:36:31,640 --> 00:36:43,990
on on a lot of this okay now the

730
00:36:34,940 --> 00:36:43,990
questions in the front yeah

731
00:37:08,430 --> 00:37:17,890
right so the one we distill down the

732
00:37:11,410 --> 00:37:25,078
question to basically I get on a box is

733
00:37:17,890 --> 00:37:28,109
that yeah so you can you can enumerate

734
00:37:25,079 --> 00:37:31,329
networking information through that that

735
00:37:28,109 --> 00:37:33,430
one six nine address you can all you

736
00:37:31,329 --> 00:37:36,400
should also I mean if you're on a VP see

737
00:37:33,430 --> 00:37:42,519
if you're on a cloud network when you're

738
00:37:36,400 --> 00:37:43,900
on the Box you should be able to like

739
00:37:42,519 --> 00:37:46,508
you should just be able to see what's on

740
00:37:43,900 --> 00:37:49,660
the network just like a normal pen test

741
00:37:46,509 --> 00:37:53,950
so you just on an internal network from

742
00:37:49,660 --> 00:37:56,879
that point so potentially question

743
00:37:53,950 --> 00:37:56,879
behind yes

744
00:38:08,549 --> 00:38:14,650
in yeah I think so

745
00:38:12,009 --> 00:38:18,509
I I haven't heard a lot about it and I

746
00:38:14,650 --> 00:38:18,509
haven't seen a lot of them so I I think

