1
00:00:09,140 --> 00:00:13,590
welcome everyone to the Metasploit town

2
00:00:11,490 --> 00:00:15,840
hall fifth edition here at Derby con

3
00:00:13,590 --> 00:00:18,270
we're super excited to be here today

4
00:00:15,840 --> 00:00:20,009
glad you could be here with us a lot of

5
00:00:18,270 --> 00:00:22,689
cool stuff to talk about but first let's

6
00:00:20,010 --> 00:00:25,090
do a quick round of introductions

7
00:00:22,690 --> 00:00:27,580
my name is Pierce I'm a manager in the

8
00:00:25,090 --> 00:00:29,410
Metasploit team rapid7 with me today is

9
00:00:27,580 --> 00:00:32,259
Jeffrey Martin lead software engineer on

10
00:00:29,410 --> 00:00:34,030
the Metasploit team Mathew Kino senior

11
00:00:32,259 --> 00:00:35,860
soft engineer on the Metasploit team and

12
00:00:34,030 --> 00:00:37,120
a face probably familiar to you if

13
00:00:35,860 --> 00:00:39,640
you've been two previous Metasploit town

14
00:00:37,120 --> 00:00:40,599
hall talks mr. Brent cook senior

15
00:00:39,640 --> 00:00:42,870
engineering manager on the Metasploit

16
00:00:40,600 --> 00:00:45,730
team Brent you want to take it

17
00:00:42,870 --> 00:00:48,010
yeah thanks what Pierce hey everybody um

18
00:00:45,730 --> 00:00:49,660
let me go in advance so we're gonna talk

19
00:00:48,010 --> 00:00:50,920
a lot a lot of cool stuff and then we're

20
00:00:49,660 --> 00:00:53,230
going to open up the floor for your

21
00:00:50,920 --> 00:00:55,210
questions as well so part of the reason

22
00:00:53,230 --> 00:00:56,319
why we have town holiday every year is

23
00:00:55,210 --> 00:00:57,790
not just to let you guys know what we've

24
00:00:56,320 --> 00:00:59,590
been up to what the community's been up

25
00:00:57,790 --> 00:01:01,210
to throughout the year but also to get

26
00:00:59,590 --> 00:01:02,620
some real concrete feedback on things we

27
00:01:01,210 --> 00:01:04,899
can do better and things you'd like to

28
00:01:02,620 --> 00:01:06,250
see in the future we're going to be

29
00:01:04,899 --> 00:01:08,350
talking a little bit about things that

30
00:01:06,250 --> 00:01:10,930
we also have a disk for for Metasploit

31
00:01:08,350 --> 00:01:12,280
six kind of our future development this

32
00:01:10,930 --> 00:01:15,280
is kind of overview of what we're all

33
00:01:12,280 --> 00:01:16,869
gonna be talking about today so to start

34
00:01:15,280 --> 00:01:18,970
off here's a little town hall history I

35
00:01:16,869 --> 00:01:20,440
wanted to give a warm thanks to Dave and

36
00:01:18,970 --> 00:01:21,880
the rest of derbycon crew for allowing

37
00:01:20,440 --> 00:01:24,039
us to speak about mess but year after

38
00:01:21,880 --> 00:01:25,449
year it's been really valuable to go

39
00:01:24,039 --> 00:01:27,190
your feedback and fold it into the other

40
00:01:25,450 --> 00:01:30,039
cool things to develop as part of

41
00:01:27,190 --> 00:01:31,840
Metasploit there's an example of the way

42
00:01:30,039 --> 00:01:34,599
that we can take that feedback and build

43
00:01:31,840 --> 00:01:36,700
neat new features Pierce is going to be

44
00:01:34,599 --> 00:01:38,619
demonstrating some of the cool tips and

45
00:01:36,700 --> 00:01:41,319
tricks based on enhancements to

46
00:01:38,619 --> 00:01:43,509
Metasploit over the past year that you

47
00:01:41,319 --> 00:01:45,759
may not have known about it's taking

48
00:01:43,509 --> 00:01:47,890
away Pierce

49
00:01:45,759 --> 00:01:49,439
thanks Brett let's talk about some of

50
00:01:47,890 --> 00:01:51,820
those nude Metasploit tips and tricks

51
00:01:49,439 --> 00:01:53,829
we've got a new web service for the

52
00:01:51,820 --> 00:01:56,740
Metasploit database allows an easy way

53
00:01:53,829 --> 00:01:59,889
for you to access and store data in your

54
00:01:56,740 --> 00:02:02,860
database we also have a new JSON RPC API

55
00:01:59,890 --> 00:02:05,380
makes it easy to automate tasks with

56
00:02:02,860 --> 00:02:07,390
your Metasploit instance we've also got

57
00:02:05,380 --> 00:02:09,639
new commands that allow you to use what

58
00:02:07,390 --> 00:02:10,810
you want and search everything but you

59
00:02:09,639 --> 00:02:14,200
know rather than me read through this

60
00:02:10,810 --> 00:02:15,580
list let me just show you ok so first

61
00:02:14,200 --> 00:02:17,708
thing we do is we're going to initialize

62
00:02:15,580 --> 00:02:20,560
our database which also sets up the web

63
00:02:17,709 --> 00:02:23,049
service thanks here it's creating the

64
00:02:20,560 --> 00:02:24,670
initial schema and it's requesting a web

65
00:02:23,049 --> 00:02:27,220
service account username and password

66
00:02:24,670 --> 00:02:29,380
and it is starting up the web service

67
00:02:27,220 --> 00:02:31,630
it was a long API token they're kind of

68
00:02:29,380 --> 00:02:33,430
in the middle of the screen so we'll be

69
00:02:31,630 --> 00:02:35,890
saving that off for this next part of

70
00:02:33,430 --> 00:02:37,750
the demo the web service hosts its own

71
00:02:35,890 --> 00:02:41,109
swagger Doc's end point so you can

72
00:02:37,750 --> 00:02:42,549
authorize quick web browser edit and

73
00:02:41,110 --> 00:02:44,860
then click the authorize button drop

74
00:02:42,549 --> 00:02:47,410
your API key in here that we just got

75
00:02:44,860 --> 00:02:49,599
from the previous step and hit authorize

76
00:02:47,410 --> 00:02:51,250
and then you can interact with the

77
00:02:49,599 --> 00:02:53,470
Metasploit database web service

78
00:02:51,250 --> 00:02:54,639
I'm just through this this site you can

79
00:02:53,470 --> 00:02:57,239
see all the scroll down to see all the

80
00:02:54,639 --> 00:03:00,370
things you could do with hosts loot

81
00:02:57,239 --> 00:03:02,170
payloads sessions it's quite a bit of

82
00:03:00,370 --> 00:03:04,239
things you can do both reading and

83
00:03:02,170 --> 00:03:06,608
writing operations so why don't we do a

84
00:03:04,239 --> 00:03:09,220
get on the workspace I will click the

85
00:03:06,609 --> 00:03:12,160
try it out button over here this will

86
00:03:09,220 --> 00:03:14,980
allow us to see what workspaces exist in

87
00:03:12,160 --> 00:03:17,650
our Metasploit database it also gives us

88
00:03:14,980 --> 00:03:19,869
the curl command equivalent here let me

89
00:03:17,650 --> 00:03:20,889
in big in a bit here the curl command it

90
00:03:19,870 --> 00:03:22,209
cool if you wanted to run this on the

91
00:03:20,889 --> 00:03:23,680
command line and fortunately kind of

92
00:03:22,209 --> 00:03:25,030
squinches the curl command there but you

93
00:03:23,680 --> 00:03:26,230
get the idea you could copy and paste

94
00:03:25,030 --> 00:03:28,000
that drop down command line and here's

95
00:03:26,230 --> 00:03:30,369
the response body from the web service

96
00:03:28,000 --> 00:03:32,109
that says you have one workspace called

97
00:03:30,370 --> 00:03:34,269
default which is expected when you've

98
00:03:32,109 --> 00:03:37,569
initialized a new database great alright

99
00:03:34,269 --> 00:03:39,010
so let's look at the JSON RPC API so

100
00:03:37,569 --> 00:03:41,440
here we are starting at the JSON RPC

101
00:03:39,010 --> 00:03:44,380
daemon nothing too crazy there it's

102
00:03:41,440 --> 00:03:46,840
going to listen on a local port and then

103
00:03:44,380 --> 00:03:48,459
we can use the curl command with our API

104
00:03:46,840 --> 00:03:50,260
key to do a request this is just give us

105
00:03:48,459 --> 00:03:52,299
some version info about the JSON RPC

106
00:03:50,260 --> 00:03:54,459
service and it drops that out there

107
00:03:52,299 --> 00:03:56,079
great and then we say another girl

108
00:03:54,459 --> 00:03:58,730
command to say let's the numerator work

109
00:03:56,079 --> 00:04:00,379
spaces like we did in the previous step

110
00:03:58,730 --> 00:04:02,000
to the UI and it shows one service

111
00:04:00,379 --> 00:04:03,799
called default great all right let's

112
00:04:02,000 --> 00:04:05,080
enumerate hosts oh there's no host in

113
00:04:03,800 --> 00:04:07,489
there well we just created the database

114
00:04:05,080 --> 00:04:09,650
that sounds about right perfect

115
00:04:07,489 --> 00:04:10,879
why don't we get some hosts the first

116
00:04:09,650 --> 00:04:13,670
thing we'll do to get some hosts is

117
00:04:10,879 --> 00:04:16,370
we'll create a console instance I'll use

118
00:04:13,670 --> 00:04:18,108
the console create command there and now

119
00:04:16,370 --> 00:04:20,180
we will actually use a console write

120
00:04:18,108 --> 00:04:21,918
command to write a DB it tell it to do a

121
00:04:20,180 --> 00:04:23,030
DB and map operation you can see the

122
00:04:21,918 --> 00:04:25,880
string there kind of in the middle of

123
00:04:23,030 --> 00:04:28,760
the screen says DB nmap than 170 228 128

124
00:04:25,880 --> 00:04:30,590
space and then you can do a console read

125
00:04:28,760 --> 00:04:31,849
to see the output from that and another

126
00:04:30,590 --> 00:04:33,260
console read you can see a bunch of in

127
00:04:31,850 --> 00:04:34,490
my fat book which is not really human

128
00:04:33,260 --> 00:04:35,870
readable that way so let's just

129
00:04:34,490 --> 00:04:37,970
enumerate the hosts again using the same

130
00:04:35,870 --> 00:04:39,590
command we used a minute ago and now we

131
00:04:37,970 --> 00:04:42,919
can see we have three hosts populated

132
00:04:39,590 --> 00:04:45,109
supercool so that's the JSON RPC API

133
00:04:42,919 --> 00:04:47,090
this is an example integration that I

134
00:04:45,110 --> 00:04:50,060
wrote with a Python script with the JSON

135
00:04:47,090 --> 00:04:51,560
RPC API I went and pulled hosts and

136
00:04:50,060 --> 00:04:54,590
services out of a Metasploit database

137
00:04:51,560 --> 00:04:56,360
instance I had and the orange nodes are

138
00:04:54,590 --> 00:04:58,010
representative hosts the blue nodes are

139
00:04:56,360 --> 00:04:59,810
services the ones that are in common

140
00:04:58,010 --> 00:05:01,729
have connections to both hosts if

141
00:04:59,810 --> 00:05:04,520
they're in common between both those and

142
00:05:01,729 --> 00:05:06,080
if you mouse over the edge connecting a

143
00:05:04,520 --> 00:05:07,479
host to a service you actually see like

144
00:05:06,080 --> 00:05:10,570
the port number so you can have data

145
00:05:07,479 --> 00:05:12,830
associated with that edge this is neo4j

146
00:05:10,570 --> 00:05:14,270
graphical database if you use bloodhound

147
00:05:12,830 --> 00:05:16,669
that's what bloodhound uses for its

148
00:05:14,270 --> 00:05:18,889
visual representations all right so

149
00:05:16,669 --> 00:05:21,710
let's run the Metasploit console look at

150
00:05:18,889 --> 00:05:23,660
all MSF console we get my favorite

151
00:05:21,710 --> 00:05:24,979
banner of all time now listen you rate

152
00:05:23,660 --> 00:05:27,830
the host again great that lines up with

153
00:05:24,979 --> 00:05:30,349
what we've seen via the JSON RPC API and

154
00:05:27,830 --> 00:05:32,180
let's look at the services that last

155
00:05:30,350 --> 00:05:33,830
hosts at 10:00 kinda looks like a

156
00:05:32,180 --> 00:05:35,930
Windows system based on the services

157
00:05:33,830 --> 00:05:37,550
reports I wonder if I could use a turn

158
00:05:35,930 --> 00:05:38,419
old blue on it but I want to scan it

159
00:05:37,550 --> 00:05:40,400
well I don't murmur the name of the

160
00:05:38,419 --> 00:05:42,049
module a Search Search eternal ah

161
00:05:40,400 --> 00:05:43,909
there's an enumerated list with numbers

162
00:05:42,050 --> 00:05:45,530
down the left side I can use the east

163
00:05:43,910 --> 00:05:48,169
command because I see the number one is

164
00:05:45,530 --> 00:05:50,000
the eternal blue scanner I wanna use so

165
00:05:48,169 --> 00:05:53,479
I'll so use one now set the our host

166
00:05:50,000 --> 00:05:54,530
target to that system IP address it's

167
00:05:53,479 --> 00:05:57,320
all pretty straightforward

168
00:05:54,530 --> 00:06:00,260
do the run command the scanner runs says

169
00:05:57,320 --> 00:06:01,639
ha it's vulnerable perfect hmm I wonder

170
00:06:00,260 --> 00:06:03,770
what modules I could use for it if it's

171
00:06:01,639 --> 00:06:05,060
vulnerable to turn a blue analyse

172
00:06:03,770 --> 00:06:06,979
command will help us with that so we

173
00:06:05,060 --> 00:06:08,659
analyzed with the IP address and it

174
00:06:06,979 --> 00:06:11,960
tells us hey here's some modules that

175
00:06:08,659 --> 00:06:12,169
you might find useful and so at this

176
00:06:11,960 --> 00:06:14,090
point

177
00:06:12,169 --> 00:06:15,229
we can now do the use command again and

178
00:06:14,090 --> 00:06:18,318
we can still use the results from our

179
00:06:15,229 --> 00:06:20,150
previous search output at the top there

180
00:06:18,319 --> 00:06:22,129
so we can use number two that module

181
00:06:20,150 --> 00:06:25,179
which is the turtle blue

182
00:06:22,129 --> 00:06:31,279
yes at the our host again and run and

183
00:06:25,180 --> 00:06:32,810
fingers crossed solved over the shoulder

184
00:06:31,279 --> 00:06:34,249
knock wood whatever the good luck stuff

185
00:06:32,810 --> 00:06:37,909
is perfect we have a command shell now

186
00:06:34,249 --> 00:06:39,289
let us do a directory just to make sure

187
00:06:37,909 --> 00:06:41,960
we're there yep that looks like a Window

188
00:06:39,289 --> 00:06:44,210
System all right so help so here we get

189
00:06:41,960 --> 00:06:46,339
the better shell these are new commands

190
00:06:44,210 --> 00:06:49,219
that help make even just standard shell

191
00:06:46,339 --> 00:06:50,810
connections a little more easy to do

192
00:06:49,219 --> 00:06:52,159
things with you can drop into an

193
00:06:50,810 --> 00:06:54,860
interactive Ruby prompt where you can

194
00:06:52,159 --> 00:06:57,409
run Ruby commands directly within your

195
00:06:54,860 --> 00:07:00,379
session there another thing you can do

196
00:06:57,409 --> 00:07:04,009
is you can also drop into pry debugger

197
00:07:00,379 --> 00:07:05,180
yeah that's your thing and within there

198
00:07:04,009 --> 00:07:07,819
you can do a number of different things

199
00:07:05,180 --> 00:07:10,550
like look at distance variables you know

200
00:07:07,819 --> 00:07:13,279
as an example I can exit that you can

201
00:07:10,550 --> 00:07:15,589
also background the session and just

202
00:07:13,279 --> 00:07:16,729
goes it's parked with as sessions

203
00:07:15,589 --> 00:07:19,219
usually do what you can see with the

204
00:07:16,729 --> 00:07:21,409
sessions command and then you can

205
00:07:19,219 --> 00:07:22,580
interact with it again as you normally

206
00:07:21,409 --> 00:07:24,319
wouldn't I once do the directory command

207
00:07:22,580 --> 00:07:26,870
again to show that we're still using our

208
00:07:24,319 --> 00:07:29,060
session medicine all also supports

209
00:07:26,870 --> 00:07:31,099
commands for upload download and running

210
00:07:29,060 --> 00:07:33,139
resource scripts on certain platforms

211
00:07:31,099 --> 00:07:35,210
it's pretty handy and as in the

212
00:07:33,139 --> 00:07:37,009
newsstand Metasploit tips and tricks I'm

213
00:07:35,210 --> 00:07:39,669
gonna hand it over to Matthew talk about

214
00:07:37,009 --> 00:07:39,669
pingback payloads

215
00:07:41,479 --> 00:07:47,250
something new that we added was ping

216
00:07:43,830 --> 00:07:49,800
back payloads a new payload type for

217
00:07:47,250 --> 00:07:53,190
when you have the need for a benign

218
00:07:49,800 --> 00:07:55,949
payload that is being able to check for

219
00:07:53,190 --> 00:07:58,620
remote code execution but without the

220
00:07:55,949 --> 00:08:00,120
need for an interactive show cases where

221
00:07:58,620 --> 00:08:01,380
you might want something simple like a

222
00:08:00,120 --> 00:08:03,090
ping back payload it would be

223
00:08:01,380 --> 00:08:05,490
vulnerability validation or exploit

224
00:08:03,090 --> 00:08:08,239
development these are situations when

225
00:08:05,490 --> 00:08:10,949
you need a simple test of code execution

226
00:08:08,240 --> 00:08:12,750
the reason you would select a benign

227
00:08:10,949 --> 00:08:15,539
payload is that it adds a layer of

228
00:08:12,750 --> 00:08:17,760
safety if we think about a pen tester on

229
00:08:15,539 --> 00:08:20,010
an engagement they might want to perform

230
00:08:17,760 --> 00:08:22,289
vulnerability validation but without the

231
00:08:20,010 --> 00:08:25,169
risk of creating a shell in this case

232
00:08:22,289 --> 00:08:27,870
the ping back payload could be used a

233
00:08:25,169 --> 00:08:30,510
session could be validated and there is

234
00:08:27,870 --> 00:08:33,080
no risk of sensitive information on the

235
00:08:30,510 --> 00:08:36,319
target being exposed to the pen tester

236
00:08:33,080 --> 00:08:38,520
another safeguard is that any traffic

237
00:08:36,320 --> 00:08:41,750
intercepted between the listener and the

238
00:08:38,520 --> 00:08:44,550
target only contains the 16 by trand

239
00:08:41,750 --> 00:08:46,260
invent ester happened to be using a bind

240
00:08:44,550 --> 00:08:47,819
payload and for whatever reason they

241
00:08:46,260 --> 00:08:51,089
were unable to connect back to it

242
00:08:47,820 --> 00:08:53,100
someone discovered this and connected to

243
00:08:51,089 --> 00:08:55,589
the server the client would only receive

244
00:08:53,100 --> 00:08:59,370
a 16 byte random value before the buying

245
00:08:55,589 --> 00:09:02,310
payload disconnects and exits the ping

246
00:08:59,370 --> 00:09:04,890
back payload operate based on the

247
00:09:02,310 --> 00:09:07,579
transmission of a UID value the concept

248
00:09:04,890 --> 00:09:10,290
of using UI IDs with payloads is not new

249
00:09:07,580 --> 00:09:12,330
you add ease combined with payloads

250
00:09:10,290 --> 00:09:15,020
allow you to have a payload with a

251
00:09:12,330 --> 00:09:17,820
specific purpose and track its use and

252
00:09:15,020 --> 00:09:21,360
mid-2015 the Metasploit team first

253
00:09:17,820 --> 00:09:24,750
introduced UID is too many HTTP and TCP

254
00:09:21,360 --> 00:09:27,060
payloads these were 16 byte values that

255
00:09:24,750 --> 00:09:29,580
encoded information tracking a white

256
00:09:27,060 --> 00:09:33,089
listing was handled via the payloads

257
00:09:29,580 --> 00:09:34,770
JSON file hang a file on disk becomes a

258
00:09:33,089 --> 00:09:36,600
little difficult when you think about a

259
00:09:34,770 --> 00:09:38,730
team wanting to share a set of payloads

260
00:09:36,600 --> 00:09:42,839
the file will have to be shared and then

261
00:09:38,730 --> 00:09:45,000
kept in sync in late 2018 as a part of

262
00:09:42,839 --> 00:09:47,730
the MSF I've pushed to separate the

263
00:09:45,000 --> 00:09:50,579
database into Davis Services layer the

264
00:09:47,730 --> 00:09:52,260
team revisited payload you IDs with a

265
00:09:50,579 --> 00:09:54,150
focus on supporting the feature through

266
00:09:52,260 --> 00:09:55,139
the data services layer thus allowing

267
00:09:54,150 --> 00:09:57,989
teams

268
00:09:55,139 --> 00:10:01,799
more easily work from a single payload

269
00:09:57,989 --> 00:10:05,029
UID source the new payload you IDs are

270
00:10:01,799 --> 00:10:09,540
random and do not encode any information

271
00:10:05,029 --> 00:10:13,350
we created 11 total payloads across four

272
00:10:09,540 --> 00:10:17,160
languages bash Python Ruby and C the C

273
00:10:13,350 --> 00:10:20,339
gives way to Linux 64-bit and Windows 32

274
00:10:17,160 --> 00:10:22,618
and 64-bit these are divided across two

275
00:10:20,339 --> 00:10:25,829
different transport types bind and

276
00:10:22,619 --> 00:10:28,319
reverse TCP because we are only

277
00:10:25,829 --> 00:10:30,809
transmitting a 16 byte value to confirm

278
00:10:28,319 --> 00:10:33,329
execution there are many possibilities

279
00:10:30,809 --> 00:10:34,949
for future transport mechanisms and we

280
00:10:33,329 --> 00:10:39,089
are excited to see what the community

281
00:10:34,949 --> 00:10:42,929
might do here I'm gonna do a quick demo

282
00:10:39,089 --> 00:10:45,720
of PS execute against a Windows 10 host

283
00:10:42,929 --> 00:10:49,290
and talk through what is going on in the

284
00:10:45,720 --> 00:10:51,869
back end we see the Windows 10 host here

285
00:10:49,290 --> 00:10:58,410
and then I'm gonna drop back to MSF

286
00:10:51,869 --> 00:11:01,470
console I'm going to load PS execute

287
00:10:58,410 --> 00:11:04,679
exploit and specify the windows pingback

288
00:11:01,470 --> 00:11:09,059
reverse tcp payload and then configure

289
00:11:04,679 --> 00:11:12,089
everything when I run the exploit it's

290
00:11:09,059 --> 00:11:16,410
going to generate a UID and store it in

291
00:11:12,089 --> 00:11:18,389
the database the UID gets encoded into

292
00:11:16,410 --> 00:11:21,419
the payload and transmitted to the

293
00:11:18,389 --> 00:11:23,399
target when the target executes the

294
00:11:21,419 --> 00:11:25,829
payload it's going to call back to our

295
00:11:23,399 --> 00:11:28,470
listener and then it will create an

296
00:11:25,829 --> 00:11:30,628
ephemeral ping back session open long

297
00:11:28,470 --> 00:11:34,019
enough to transmit the UID before

298
00:11:30,629 --> 00:11:36,239
shutting down the UID will be looked up

299
00:11:34,019 --> 00:11:39,209
in the database in order to confirm it

300
00:11:36,239 --> 00:11:40,950
was a payload we generated if found a

301
00:11:39,209 --> 00:11:44,029
success message is displayed to the user

302
00:11:40,950 --> 00:11:44,029
[Music]

303
00:11:48,740 --> 00:11:52,970
in a situation where the UUID is not

304
00:11:51,800 --> 00:11:55,990
found in the database

305
00:11:52,970 --> 00:11:58,640
the user will receive a warning message

306
00:11:55,990 --> 00:11:59,780
I'm going to turn it over to Jeffrey to

307
00:11:58,640 --> 00:12:02,470
talk to us about the Metasploit

308
00:11:59,780 --> 00:12:02,470
community

309
00:12:03,760 --> 00:12:07,510
so I get to talk a little bit about what

310
00:12:05,949 --> 00:12:11,050
the Metasploit community brought to the

311
00:12:07,510 --> 00:12:12,730
table this year about what users like

312
00:12:11,050 --> 00:12:15,189
many of those in this room as well as

313
00:12:12,730 --> 00:12:17,470
all around the world brought into

314
00:12:15,190 --> 00:12:19,600
Metasploit and expanded and shared with

315
00:12:17,470 --> 00:12:21,399
us in terms of capabilities and new

316
00:12:19,600 --> 00:12:24,360
modules and new capabilities and new

317
00:12:21,399 --> 00:12:30,029
functionality within Metis played that

318
00:12:24,360 --> 00:12:32,680
work this year landed 682 community PRS

319
00:12:30,029 --> 00:12:34,600
208 individual community members

320
00:12:32,680 --> 00:12:36,279
contributed to that work providing us

321
00:12:34,600 --> 00:12:39,430
with new capabilities with new modules

322
00:12:36,279 --> 00:12:40,930
with new functionality things we we find

323
00:12:39,430 --> 00:12:42,599
interesting things we would like to

324
00:12:40,930 --> 00:12:46,420
share with the world

325
00:12:42,600 --> 00:12:48,130
183 modules came out of that work four

326
00:12:46,420 --> 00:12:50,500
of those modules are something a little

327
00:12:48,130 --> 00:12:53,470
bit new though were evasion modules

328
00:12:50,500 --> 00:12:56,949
those are modules that were introduced

329
00:12:53,470 --> 00:12:58,180
last year here at Derby con and do

330
00:12:56,949 --> 00:13:00,479
something a little bit different they

331
00:12:58,180 --> 00:13:03,069
evade a capability within a system

332
00:13:00,480 --> 00:13:05,740
most of them target things like

333
00:13:03,070 --> 00:13:08,380
antivirus the four that we actually

334
00:13:05,740 --> 00:13:10,300
received here were all from an

335
00:13:08,380 --> 00:13:11,529
individual contributor and a PR that was

336
00:13:10,300 --> 00:13:13,599
done before evasion modules were

337
00:13:11,529 --> 00:13:15,639
announced that got reworked into

338
00:13:13,600 --> 00:13:17,699
individual modules these modules now

339
00:13:15,639 --> 00:13:20,139
offer techniques for evading

340
00:13:17,699 --> 00:13:21,990
whitelisting applications primarily a

341
00:13:20,139 --> 00:13:25,089
blocker on Windows

342
00:13:21,990 --> 00:13:27,519
there were also 17 post modules that

343
00:13:25,089 --> 00:13:29,589
landed 48 different auxilary modules and

344
00:13:27,519 --> 00:13:31,930
over a hundred and fourteen exploit

345
00:13:29,589 --> 00:13:34,269
modules that provide new capabilities

346
00:13:31,930 --> 00:13:36,279
targeting different CVEs out there in

347
00:13:34,269 --> 00:13:38,860
the world in the wild and gave us new

348
00:13:36,279 --> 00:13:40,360
capabilities so some of the community

349
00:13:38,860 --> 00:13:43,000
standouts this year that we wanted to

350
00:13:40,360 --> 00:13:45,430
highlight were some of the work arc like

351
00:13:43,000 --> 00:13:47,110
what are John the Ripper overhaul that

352
00:13:45,430 --> 00:13:49,810
was contributed by hoody out in the

353
00:13:47,110 --> 00:13:51,970
community this turned out to be work

354
00:13:49,810 --> 00:13:54,430
that was well overdue to be done the

355
00:13:51,970 --> 00:13:56,860
John River update its our implementation

356
00:13:54,430 --> 00:13:58,599
was over four years old and completely

357
00:13:56,860 --> 00:14:00,010
out of date with the latest releases -

358
00:13:58,600 --> 00:14:02,350
what hoody did here was he actually

359
00:14:00,010 --> 00:14:04,290
updated our environment to interact with

360
00:14:02,350 --> 00:14:07,329
the latest John the Ripper jumbo release

361
00:14:04,290 --> 00:14:09,269
and this brings in new capabilities for

362
00:14:07,329 --> 00:14:11,529
new hashes that can be cracked and new

363
00:14:09,269 --> 00:14:13,050
targets credentials that can be

364
00:14:11,529 --> 00:14:16,260
evaluated and

365
00:14:13,050 --> 00:14:17,729
worked and and tested it also hoodie

366
00:14:16,260 --> 00:14:20,310
went the extra mile and went in and

367
00:14:17,730 --> 00:14:21,570
added new capabilities in to be a little

368
00:14:20,310 --> 00:14:23,579
bit more efficient than what we were

369
00:14:21,570 --> 00:14:25,019
doing before we actually went in and dug

370
00:14:23,580 --> 00:14:27,690
through and figured out how to be able

371
00:14:25,019 --> 00:14:29,610
to check and see if individual thing

372
00:14:27,690 --> 00:14:31,230
that you're trying to crack has been

373
00:14:29,610 --> 00:14:32,790
cracked before and if you already have

374
00:14:31,230 --> 00:14:34,170
the credential for it and if so just

375
00:14:32,790 --> 00:14:36,360
hand you that back out instead of

376
00:14:34,170 --> 00:14:38,969
actually taking all the extra work to go

377
00:14:36,360 --> 00:14:41,370
and recraft at credential another

378
00:14:38,970 --> 00:14:44,100
standout contribution was the Cisco RP

379
00:14:41,370 --> 00:14:46,410
130 configuration vulnerability that was

380
00:14:44,100 --> 00:14:47,610
contributed by unfortunately I'm gonna

381
00:14:46,410 --> 00:14:50,790
butcher the name so I'm just not going

382
00:14:47,610 --> 00:14:52,860
to say them but by a good number of

383
00:14:50,790 --> 00:14:54,930
community members that work there whose

384
00:14:52,860 --> 00:14:56,910
work led to this module and this

385
00:14:54,930 --> 00:14:58,859
capability and functionality that has

386
00:14:56,910 --> 00:15:01,350
been expanded multiple times over the

387
00:14:58,860 --> 00:15:04,320
course of the year to target additional

388
00:15:01,350 --> 00:15:06,990
Cisco devices and capabilities another

389
00:15:04,320 --> 00:15:10,680
interesting module was the 40 net 40

390
00:15:06,990 --> 00:15:14,459
gate SSL VPN module provided by max

391
00:15:10,680 --> 00:15:16,920
Michaels this module actually he shows

392
00:15:14,459 --> 00:15:18,540
and expands on some work from a Def Con

393
00:15:16,920 --> 00:15:20,969
talk that you may have seen by orange

394
00:15:18,540 --> 00:15:23,339
site that talks about how a lot of

395
00:15:20,970 --> 00:15:25,170
things that are on our SSL VPN gateways

396
00:15:23,339 --> 00:15:27,690
and the way these things are configured

397
00:15:25,170 --> 00:15:29,430
by security vendors that are actually a

398
00:15:27,690 --> 00:15:32,040
little bit insecure and they store some

399
00:15:29,430 --> 00:15:33,989
information that is a goldmine for

400
00:15:32,040 --> 00:15:35,880
somebody doing a red team or an

401
00:15:33,990 --> 00:15:40,160
engagement against the system and it

402
00:15:35,880 --> 00:15:42,810
also takes something that you treat as

403
00:15:40,160 --> 00:15:45,779
the something that's assuring your

404
00:15:42,810 --> 00:15:47,160
security and makes it an actual target

405
00:15:45,779 --> 00:15:49,350
against you and turns it against you and

406
00:15:47,160 --> 00:15:51,779
makes it so that an attacker can

407
00:15:49,350 --> 00:15:54,149
actually take control of more systems on

408
00:15:51,779 --> 00:15:55,890
that thread another module that was

409
00:15:54,149 --> 00:15:57,180
offered by Aaron Ringo the package

410
00:15:55,890 --> 00:15:59,160
manager persistence module that

411
00:15:57,180 --> 00:16:01,529
originally came in targeting apt and was

412
00:15:59,160 --> 00:16:04,290
expanded and expanded it to also provide

413
00:16:01,529 --> 00:16:06,209
young capabilities takes a tool that

414
00:16:04,290 --> 00:16:08,069
many IT professionals and security

415
00:16:06,209 --> 00:16:09,649
engineers use to keep their software up

416
00:16:08,070 --> 00:16:11,370
to date and keep it capable and

417
00:16:09,649 --> 00:16:13,709
functioning and to patch things

418
00:16:11,370 --> 00:16:15,750
effectively and actually uses a post

419
00:16:13,709 --> 00:16:18,149
module to insert some scripting

420
00:16:15,750 --> 00:16:19,769
capabilities on to the end of the actual

421
00:16:18,149 --> 00:16:21,839
execution run that will actually improve

422
00:16:19,769 --> 00:16:24,240
on your persistence that will actually

423
00:16:21,839 --> 00:16:24,790
keep a module around even after security

424
00:16:24,240 --> 00:16:26,710
updates or

425
00:16:24,790 --> 00:16:28,780
done once you've gotten in there it

426
00:16:26,710 --> 00:16:31,210
expands on that back door and keeps you

427
00:16:28,780 --> 00:16:32,740
up to up-to-date another item is the

428
00:16:31,210 --> 00:16:35,350
blue keep scanner the blue keep scanner

429
00:16:32,740 --> 00:16:37,980
was originally authored from a POC by J

430
00:16:35,350 --> 00:16:40,420
to go and expanded by zero-sum and

431
00:16:37,980 --> 00:16:42,250
provided us with an ability to see what

432
00:16:40,420 --> 00:16:44,890
systems out there were impacted by blue

433
00:16:42,250 --> 00:16:46,270
key Tom cellars one of rapid Evans own

434
00:16:44,890 --> 00:16:48,280
actually expanded on this capability

435
00:16:46,270 --> 00:16:51,460
reworked some of our RDP capabilities

436
00:16:48,280 --> 00:16:53,380
and made it the added an action to this

437
00:16:51,460 --> 00:16:54,880
scanner that allows you to actually

438
00:16:53,380 --> 00:16:58,300
crash systems based on the blue keep

439
00:16:54,880 --> 00:17:00,730
vulnerability this kind of helps bring

440
00:16:58,300 --> 00:17:02,500
to home the functionality is there and

441
00:17:00,730 --> 00:17:05,910
that this is actually a very important

442
00:17:02,500 --> 00:17:07,990
vulnerability to patch so that's a

443
00:17:05,910 --> 00:17:11,079
little bit of the highlights from this

444
00:17:07,990 --> 00:17:13,030
year from that we also wanted to add a

445
00:17:11,079 --> 00:17:15,220
little bit more to this and what we've

446
00:17:13,030 --> 00:17:17,230
got is we actually have built up a

447
00:17:15,220 --> 00:17:20,350
little bit we have a presentation for

448
00:17:17,230 --> 00:17:22,230
you every two weeks we do a demo of the

449
00:17:20,349 --> 00:17:24,520
new capabilities that are landed into

450
00:17:22,230 --> 00:17:26,650
Metasploit and we actually publish that

451
00:17:24,520 --> 00:17:28,810
on youtube what we've done here is we've

452
00:17:26,650 --> 00:17:30,220
actually taken a lot of little demos

453
00:17:28,810 --> 00:17:32,320
that are in there and we're making them

454
00:17:30,220 --> 00:17:34,030
a little bit of a montage to kind of

455
00:17:32,320 --> 00:17:36,730
show off the things that the community

456
00:17:34,030 --> 00:17:39,570
brought to us and we got to we got we

457
00:17:36,730 --> 00:17:39,570
got to show off to the world

458
00:17:44,520 --> 00:18:17,000
[Music]

459
00:18:19,340 --> 00:18:54,319
[Music]

460
00:18:57,590 --> 00:19:03,980
you

461
00:18:58,480 --> 00:19:03,980
[Music]

462
00:19:06,680 --> 00:19:11,360
hello hello hi I'm Brent again I'm back

463
00:19:09,350 --> 00:19:13,250
on stage I'm gonna talk to you again

464
00:19:11,360 --> 00:19:15,740
about some of the future things or think

465
00:19:13,250 --> 00:19:17,030
about Metasploit six you know we always

466
00:19:15,740 --> 00:19:18,500
get all kinds of great ideas and we

467
00:19:17,030 --> 00:19:20,110
really appreciate things in the issue

468
00:19:18,500 --> 00:19:23,270
queue and of course really appreciate

469
00:19:20,110 --> 00:19:24,620
even more but we're thinking about all

470
00:19:23,270 --> 00:19:26,480
the different ways that we can make the

471
00:19:24,620 --> 00:19:28,100
next version MS white easier to use more

472
00:19:26,480 --> 00:19:30,140
fun to use just an overall better

473
00:19:28,100 --> 00:19:31,790
experience for everyone we would think

474
00:19:30,140 --> 00:19:33,440
about this for a good long time and

475
00:19:31,790 --> 00:19:35,690
sometimes futures can take a good few

476
00:19:33,440 --> 00:19:37,010
years to think about but I'm gonna talk

477
00:19:35,690 --> 00:19:38,300
to you about a few of the things that

478
00:19:37,010 --> 00:19:39,680
we're really excited about and I'd like

479
00:19:38,300 --> 00:19:41,810
to hear from you what you're interested

480
00:19:39,680 --> 00:19:43,730
in what you want to know more about or

481
00:19:41,810 --> 00:19:47,300
just cheer aloud if there's so you see

482
00:19:43,730 --> 00:19:48,860
something you like to get started let's

483
00:19:47,300 --> 00:19:50,480
talk a little bit about the protocol

484
00:19:48,860 --> 00:19:52,639
that meterpreter uses to talk back to

485
00:19:50,480 --> 00:19:54,170
Metasploit framework um its protocol

486
00:19:52,640 --> 00:19:57,370
it's been around for a while called TLD

487
00:19:54,170 --> 00:19:59,300
or type linked to value it's uh

488
00:19:57,370 --> 00:20:01,100
basically was really designed to be

489
00:19:59,300 --> 00:20:02,990
synchronous and basically what that

490
00:20:01,100 --> 00:20:05,360
means is that it assumes that all the

491
00:20:02,990 --> 00:20:07,880
packets come in the same order that they

492
00:20:05,360 --> 00:20:09,370
are never lost there's a lot of

493
00:20:07,880 --> 00:20:12,050
attributes that make it really hard to

494
00:20:09,370 --> 00:20:14,750
put it into alternate command and

495
00:20:12,050 --> 00:20:17,600
control streams like DMS or anything

496
00:20:14,750 --> 00:20:19,430
that's lossy or infrequent so we want to

497
00:20:17,600 --> 00:20:22,280
do is come up with a way to make TLV to

498
00:20:19,430 --> 00:20:25,580
do a new version work in these kind of

499
00:20:22,280 --> 00:20:27,230
varying modes of communication we really

500
00:20:25,580 --> 00:20:29,990
think this will allow meterpreter to run

501
00:20:27,230 --> 00:20:32,960
more reliably even over the transports

502
00:20:29,990 --> 00:20:34,580
of sports today and support things that

503
00:20:32,960 --> 00:20:36,410
a lot of other CG frameworks have like

504
00:20:34,580 --> 00:20:38,449
in the end encryption and default

505
00:20:36,410 --> 00:20:40,280
authentication something else that we've

506
00:20:38,450 --> 00:20:43,160
been looking at with all the really cool

507
00:20:40,280 --> 00:20:45,170
new C two frameworks coming out has been

508
00:20:43,160 --> 00:20:48,200
the ability for Metasploit to integrate

509
00:20:45,170 --> 00:20:50,000
with with other c2 frameworks as well

510
00:20:48,200 --> 00:20:52,820
so as part of its kind of this

511
00:20:50,000 --> 00:20:55,130
exploration and TLB to toe we would like

512
00:20:52,820 --> 00:20:56,540
to do is take a look at separating out

513
00:20:55,130 --> 00:20:58,100
things like listeners and listener

514
00:20:56,540 --> 00:21:01,460
protocols so that we could actually

515
00:20:58,100 --> 00:21:03,230
integrate with other c2 frameworks so if

516
00:21:01,460 --> 00:21:04,970
the same interpreter doesn't work

517
00:21:03,230 --> 00:21:07,190
exactly like you want with Metasploit

518
00:21:04,970 --> 00:21:09,830
you use something else making it easy

519
00:21:07,190 --> 00:21:11,180
would be a really great addition smart

520
00:21:09,830 --> 00:21:14,179
asynchronous stagers is something else

521
00:21:11,180 --> 00:21:16,430
that we're looking at today sages tend

522
00:21:14,180 --> 00:21:18,980
to be pretty dumb they'll just accept

523
00:21:16,430 --> 00:21:20,090
connections from whoever and except for

524
00:21:18,980 --> 00:21:24,590
maybe a couple of proto

525
00:21:20,090 --> 00:21:26,539
a couple of different payload types they

526
00:21:24,590 --> 00:21:29,959
really don't have much in the way of

527
00:21:26,539 --> 00:21:32,980
encryption or authentication so I really

528
00:21:29,960 --> 00:21:36,289
like to do is come with a way to make

529
00:21:32,980 --> 00:21:38,360
staging safer better faster and more

530
00:21:36,289 --> 00:21:40,010
reliable this will be piggybacking off

531
00:21:38,360 --> 00:21:41,719
of some of the code that we showed you

532
00:21:40,010 --> 00:21:44,029
earlier with the ping back support

533
00:21:41,720 --> 00:21:46,070
another neat addition that we're working

534
00:21:44,029 --> 00:21:48,200
on right now kind of actively is the

535
00:21:46,070 --> 00:21:51,049
ability to use native tool chains for

536
00:21:48,200 --> 00:21:53,500
building payloads on the fly if you've

537
00:21:51,049 --> 00:21:55,850
ever gotten meterpreter payload or a

538
00:21:53,500 --> 00:21:57,080
Metasploit stage you're caught by a B

539
00:21:55,850 --> 00:21:59,928
that's because they're currently

540
00:21:57,080 --> 00:22:01,668
generated very statically but being able

541
00:21:59,929 --> 00:22:03,770
to say build your own compilers building

542
00:22:01,669 --> 00:22:06,620
new compiler plugins for obfuscation

543
00:22:03,770 --> 00:22:10,690
would allow both being able to create

544
00:22:06,620 --> 00:22:14,299
more complex payloads and ability to

545
00:22:10,690 --> 00:22:15,470
generate them on the fly have you ever

546
00:22:14,299 --> 00:22:16,639
used the Metasploit database and

547
00:22:15,470 --> 00:22:18,980
wondered like why do I have to use

548
00:22:16,640 --> 00:22:20,720
Postgres or wondered why sometimes

549
00:22:18,980 --> 00:22:22,130
certain commands require the database

550
00:22:20,720 --> 00:22:23,929
like the host command or the vulns

551
00:22:22,130 --> 00:22:25,309
command or anything like that well we'd

552
00:22:23,929 --> 00:22:27,200
like to do with Metasploit six is figure

553
00:22:25,309 --> 00:22:28,279
out a way to make the database always

554
00:22:27,200 --> 00:22:30,470
available even if you don't have

555
00:22:28,279 --> 00:22:31,640
Postgres part of our work that we've

556
00:22:30,470 --> 00:22:33,500
done with this what if I've made

557
00:22:31,640 --> 00:22:36,080
Metasploit have a separate API for

558
00:22:33,500 --> 00:22:38,870
talking to the database why not use that

559
00:22:36,080 --> 00:22:41,149
kind of thing to to make it simpler to

560
00:22:38,870 --> 00:22:43,449
just use Metasploit with data

561
00:22:41,149 --> 00:22:45,678
persistence even if it's just in Graham

562
00:22:43,450 --> 00:22:47,210
logging is another thing that a lot of

563
00:22:45,679 --> 00:22:50,179
times pen testers and red teamers really

564
00:22:47,210 --> 00:22:53,179
need and you know it's really easy with

565
00:22:50,179 --> 00:22:54,679
no swipe to say delete all your data so

566
00:22:53,179 --> 00:22:55,640
something we're also thinking about is

567
00:22:54,679 --> 00:22:57,649
scored with breaking backwards

568
00:22:55,640 --> 00:23:01,100
compatibility is to figure out how do we

569
00:22:57,649 --> 00:23:03,860
make all the logging that we do kind of

570
00:23:01,100 --> 00:23:05,389
a time-based or temporal so that would

571
00:23:03,860 --> 00:23:07,908
mean probably a big change in the

572
00:23:05,390 --> 00:23:09,860
database structures it's today so that

573
00:23:07,909 --> 00:23:12,830
we're actually logging events rather

574
00:23:09,860 --> 00:23:14,779
than tables which is kind of how

575
00:23:12,830 --> 00:23:17,539
attackers think anyway so it makes a

576
00:23:14,779 --> 00:23:19,190
whole lot of sense one neat thing that

577
00:23:17,539 --> 00:23:21,200
we kind of learned certain explorations

578
00:23:19,190 --> 00:23:23,299
is that modules basically don't assume

579
00:23:21,200 --> 00:23:25,700
really much of anything about you know

580
00:23:23,299 --> 00:23:27,950
the table structures databases anyway so

581
00:23:25,700 --> 00:23:29,390
at least as far as converting modules to

582
00:23:27,950 --> 00:23:29,990
understand how to do temporal a lot of

583
00:23:29,390 --> 00:23:32,390
data logging

584
00:23:29,990 --> 00:23:33,890
we're almost there some other cool stuff

585
00:23:32,390 --> 00:23:35,660
I want to show you guys is some sense

586
00:23:33,890 --> 00:23:38,150
design work we've been doing on using

587
00:23:35,660 --> 00:23:39,650
Metis plate so we showed you earlier the

588
00:23:38,150 --> 00:23:41,270
cool search feature with Metasploit and

589
00:23:39,650 --> 00:23:42,470
so how it with a single command you can

590
00:23:41,270 --> 00:23:44,870
show all the models related to a

591
00:23:42,470 --> 00:23:46,010
particular vulnerability but one

592
00:23:44,870 --> 00:23:47,270
question might ask yourself is why are

593
00:23:46,010 --> 00:23:49,850
there are five different modules

594
00:23:47,270 --> 00:23:52,040
relating to Ms 1701 Oh what if there is

595
00:23:49,850 --> 00:23:54,080
just one module and it had multiple

596
00:23:52,040 --> 00:23:56,690
actions so this is something we've been

597
00:23:54,080 --> 00:23:58,370
exploring is a new way to use Metasploit

598
00:23:56,690 --> 00:24:00,830
and this would of course be a change in

599
00:23:58,370 --> 00:24:01,850
backwards compatibility but basically

600
00:24:00,830 --> 00:24:03,439
making so that you know these

601
00:24:01,850 --> 00:24:05,600
differences between an exploit module

602
00:24:03,440 --> 00:24:06,860
and aux module scanner module etc are

603
00:24:05,600 --> 00:24:10,490
all just sort of convinced of single

604
00:24:06,860 --> 00:24:12,350
module capabilities in addition when you

605
00:24:10,490 --> 00:24:13,610
look at Metasploit options

606
00:24:12,350 --> 00:24:15,500
think about all the different option

607
00:24:13,610 --> 00:24:17,959
ships set today to like say specify a

608
00:24:15,500 --> 00:24:21,530
web target with a web exploit like this

609
00:24:17,960 --> 00:24:23,000
Jenkins metaprogramming example why not

610
00:24:21,530 --> 00:24:25,940
do it like sort of you think about

611
00:24:23,000 --> 00:24:28,130
things which is a URL so time we're

612
00:24:25,940 --> 00:24:31,430
proposing also is is using URLs to

613
00:24:28,130 --> 00:24:32,810
specify targets rather than you know

614
00:24:31,430 --> 00:24:34,280
five or six different parameters that

615
00:24:32,810 --> 00:24:37,580
basically all get concatenate together

616
00:24:34,280 --> 00:24:39,170
anyway for for targeting a host I think

617
00:24:37,580 --> 00:24:40,399
this will be a lot more natural of

618
00:24:39,170 --> 00:24:43,610
course it'll break a little bit of

619
00:24:40,400 --> 00:24:44,870
muscle memory for some folks but there

620
00:24:43,610 --> 00:24:47,659
may be ways that we can creep backwards

621
00:24:44,870 --> 00:24:50,620
compatibility you know with new versions

622
00:24:47,660 --> 00:24:50,620
of Metasploit as well

623
00:24:50,950 --> 00:24:54,609
there's one more thing if you've been

624
00:24:52,899 --> 00:24:56,408
monitoring the pull request queue for

625
00:24:54,609 --> 00:24:58,359
Metasploit framework just for this talk

626
00:24:56,409 --> 00:25:01,210
we push that the first exploit module

627
00:24:58,359 --> 00:25:03,699
for CBE 2,000 1907 o8 also known as blue

628
00:25:01,210 --> 00:25:05,169
keep we've got Tom sellers and Spencer

629
00:25:03,700 --> 00:25:08,080
McEntire out in the audience say come up

630
00:25:05,169 --> 00:25:11,109
guys let's go ahead and give them a warm

631
00:25:08,080 --> 00:25:13,869
round of applause so Sean Dylan also

632
00:25:11,109 --> 00:25:15,789
known as zero-sum and Ryan Hansen shared

633
00:25:13,869 --> 00:25:17,559
this module with us about a month ago

634
00:25:15,789 --> 00:25:20,289
we've been working on converting it to

635
00:25:17,559 --> 00:25:23,109
Ruby improving the reliability adding

636
00:25:20,289 --> 00:25:26,649
targets also adding some next features

637
00:25:23,109 --> 00:25:29,590
to met have them if you notice during

638
00:25:26,649 --> 00:25:31,238
the end of that exploitation demo that

639
00:25:29,590 --> 00:25:33,820
we did earlier you might have seen that

640
00:25:31,239 --> 00:25:36,190
the last exploit that we did was kind of

641
00:25:33,820 --> 00:25:38,129
an easter egg it was actually the the

642
00:25:36,190 --> 00:25:42,190
blue key module as the the 17th

643
00:25:38,129 --> 00:25:44,709
exploited target shell so I really want

644
00:25:42,190 --> 00:25:48,399
to thank Sean Dylan Ryan Hansen Odie

645
00:25:44,710 --> 00:25:50,710
Reeves everyone who helped kind of get

646
00:25:48,399 --> 00:25:53,529
both the RDP libraries improving the

647
00:25:50,710 --> 00:25:56,049
module you know doing a lot of testing

648
00:25:53,529 --> 00:25:57,009
targeting that sort of thing of course

649
00:25:56,049 --> 00:25:59,619
there's still a lot more work to be done

650
00:25:57,009 --> 00:26:01,480
the modules need some you know some

651
00:25:59,619 --> 00:26:04,570
specific targets sort of set up in our

652
00:26:01,480 --> 00:26:05,859
effort to run successfully also we have

653
00:26:04,570 --> 00:26:08,408
more target so you want to add in the

654
00:26:05,859 --> 00:26:10,239
future so certainly check it out in the

655
00:26:08,409 --> 00:26:12,190
pull request queue if you want and I'm

656
00:26:10,239 --> 00:26:18,879
gonna go ahead and give you guys a more

657
00:26:12,190 --> 00:26:20,320
direct demo let's see here starting up

658
00:26:18,879 --> 00:26:24,639
here's the information screen for the

659
00:26:20,320 --> 00:26:26,470
module but if alt the module isn't going

660
00:26:24,639 --> 00:26:28,059
to target any particular host what it

661
00:26:26,470 --> 00:26:29,820
does is is text of vulnerability and

662
00:26:28,059 --> 00:26:33,970
uses some of the fingerprinting code

663
00:26:29,820 --> 00:26:36,340
that Tom and Spencer put together to

664
00:26:33,970 --> 00:26:38,169
give an approximation of which OS we're

665
00:26:36,340 --> 00:26:40,389
targeting but you need to know things

666
00:26:38,169 --> 00:26:41,619
like is a physical hardware is it

667
00:26:40,389 --> 00:26:43,029
running a particular virtualization

668
00:26:41,619 --> 00:26:46,720
system that sort of thing because the

669
00:26:43,029 --> 00:26:48,039
memory layout changes a bit but I'll

670
00:26:46,720 --> 00:26:49,539
give you guys an example of what it

671
00:26:48,039 --> 00:26:51,489
looks like when you show it for running

672
00:26:49,539 --> 00:26:53,080
with the default settings see here it

673
00:26:51,489 --> 00:26:55,749
just basically it's indicated that the

674
00:26:53,080 --> 00:26:57,928
targets were vulnerable but if you set

675
00:26:55,749 --> 00:27:00,639
the correct target in this case I've got

676
00:26:57,929 --> 00:27:02,499
VirtualBox so that's the target - we'll

677
00:27:00,639 --> 00:27:04,389
go ahead and target the both of the

678
00:27:02,499 --> 00:27:06,700
hosts this is using the windows

679
00:27:04,390 --> 00:27:09,160
the Metasploit 5 feature where we can

680
00:27:06,700 --> 00:27:11,260
target multiple hosts simultaneously I'm

681
00:27:09,160 --> 00:27:13,960
so we're going to go ahead and inject

682
00:27:11,260 --> 00:27:15,370
the shellcode into the heap wait a

683
00:27:13,960 --> 00:27:17,230
little bit for this top and it takes

684
00:27:15,370 --> 00:27:18,639
about a minute there we go we've got our

685
00:27:17,230 --> 00:27:23,280
first meterpreter shell and then we're

686
00:27:18,640 --> 00:27:23,280
going to target a Windows 7 box as well

687
00:27:31,429 --> 00:27:35,029
and there we go - interpreter shells

688
00:27:33,320 --> 00:27:36,649
let's go ahead and just verify that we

689
00:27:35,029 --> 00:27:37,159
can interact with the sessions there

690
00:27:36,649 --> 00:27:39,109
they are

691
00:27:37,159 --> 00:27:40,999
I'm gonna go ahead and run some commands

692
00:27:39,109 --> 00:27:42,889
on the sessions to show that we are

693
00:27:40,999 --> 00:27:45,200
indeed running on the operating systems

694
00:27:42,889 --> 00:27:47,718
we said we were and then we're gonna con

695
00:27:45,200 --> 00:27:53,570
verify that we're running as a system

696
00:27:47,719 --> 00:27:57,200
user and there you go that's a blue cape

697
00:27:53,570 --> 00:27:59,509
exploit certainly looking forward to any

698
00:27:57,200 --> 00:28:02,539
kind of con comments or contributions

699
00:27:59,509 --> 00:28:04,580
that you may be able to supply we do

700
00:28:02,539 --> 00:28:06,408
have a to-do list that if you are

701
00:28:04,580 --> 00:28:07,849
interested in we could certainly use

702
00:28:06,409 --> 00:28:09,950
some help with a few things with

703
00:28:07,849 --> 00:28:10,759
targeting reliability improvements all

704
00:28:09,950 --> 00:28:13,909
that sort of thing

705
00:28:10,759 --> 00:28:16,219
but I hope you are able to you know make

706
00:28:13,909 --> 00:28:18,739
good use of it it's a it's an

707
00:28:16,219 --> 00:28:21,289
interesting exploit it's certainly one

708
00:28:18,739 --> 00:28:23,570
that you also want to be looking forward

709
00:28:21,289 --> 00:28:25,129
to how did you detect and of course you

710
00:28:23,570 --> 00:28:27,379
haven't passed already and now's a good

711
00:28:25,129 --> 00:28:29,269
time to do it so I really wanted to

712
00:28:27,379 --> 00:28:31,759
thank again all the contributors who

713
00:28:29,269 --> 00:28:34,399
worked on this module zero some Ryan

714
00:28:31,759 --> 00:28:37,879
Hansen O'Jays Joe Steiner Rick Oates

715
00:28:34,399 --> 00:28:40,609
William boo van der waters Wade chin Tom

716
00:28:37,879 --> 00:28:42,709
cellars and and everyone else who's

717
00:28:40,609 --> 00:28:46,309
going to help us in the future too so

718
00:28:42,710 --> 00:28:47,989
thanks a lot guys after this talk we're

719
00:28:46,309 --> 00:28:50,330
going to go ahead and open up the floor

720
00:28:47,989 --> 00:28:52,629
for any questions and thank you very

721
00:28:50,330 --> 00:28:52,629
much

722
00:29:00,020 --> 00:29:02,080
you

