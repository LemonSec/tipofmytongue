1
00:00:01,560 --> 00:00:08,940
quick show of hands who here works with

2
00:00:04,620 --> 00:00:11,129
kubernetes okay quite a few that's good

3
00:00:08,940 --> 00:00:13,230
have any of you ever in your kubernetes

4
00:00:11,130 --> 00:00:17,330
cluster out sudden found a bunch of pods

5
00:00:13,230 --> 00:00:19,619
that were cryptocurrency mining okay

6
00:00:17,330 --> 00:00:22,229
well that's going to be the topic of

7
00:00:19,619 --> 00:00:23,580
today's talk for those of you who aren't

8
00:00:22,230 --> 00:00:25,849
familiar with kubernetes we'll do a

9
00:00:23,580 --> 00:00:28,560
quick overview of what curb renée's is

10
00:00:25,849 --> 00:00:30,599
and then I'll talk about some previous

11
00:00:28,560 --> 00:00:32,940
research that we did looking at

12
00:00:30,599 --> 00:00:35,840
misconfigured Cooper neighs components

13
00:00:32,940 --> 00:00:38,218
and those being exposed to the Internet

14
00:00:35,840 --> 00:00:41,160
then we'll talk a little bit about a

15
00:00:38,219 --> 00:00:43,530
honeypot that we set up to catch tax

16
00:00:41,160 --> 00:00:46,919
targeting kubernetes clusters and then

17
00:00:43,530 --> 00:00:49,370
how we expanded that research to see the

18
00:00:46,920 --> 00:00:52,760
kind of the larger scale impact of that

19
00:00:49,370 --> 00:00:55,559
now if you've ever been to kubernetes

20
00:00:52,760 --> 00:00:58,108
presentation you'll notice that they

21
00:00:55,559 --> 00:01:00,390
generally are nautical-themed that's

22
00:00:58,109 --> 00:01:02,399
because Cabernets is Greek for helmsman

23
00:01:00,390 --> 00:01:05,580
so this gave me the perfect opportunity

24
00:01:02,399 --> 00:01:06,150
to make pirate-themed but along those

25
00:01:05,580 --> 00:01:08,908
lines

26
00:01:06,150 --> 00:01:12,470
we just need to Clara a few terms and

27
00:01:08,909 --> 00:01:15,689
definitions so this here's crypto booty

28
00:01:12,470 --> 00:01:18,360
crypto birdie booty is crypto currency

29
00:01:15,689 --> 00:01:20,580
obtained from illicit coin mining in a

30
00:01:18,360 --> 00:01:22,680
kubernetes cluster so I'm kind of hoping

31
00:01:20,580 --> 00:01:26,759
that we can make this term at household

32
00:01:22,680 --> 00:01:29,189
phrase after this a quick quick little

33
00:01:26,759 --> 00:01:31,829
bit on myself director of research at

34
00:01:29,189 --> 00:01:34,500
lacework lacework is a start-up at

35
00:01:31,829 --> 00:01:36,649
Mountain View California we do cloud

36
00:01:34,500 --> 00:01:39,509
security so everything from

37
00:01:36,650 --> 00:01:42,479
configuration and compliance for your

38
00:01:39,509 --> 00:01:45,090
major cloud providers to Linux workload

39
00:01:42,479 --> 00:01:48,119
security kubernetes and container

40
00:01:45,090 --> 00:01:50,909
security I actually got my start in the

41
00:01:48,119 --> 00:01:52,829
air force following that and went to

42
00:01:50,909 --> 00:01:55,350
Mandy and did instant response for a bit

43
00:01:52,829 --> 00:01:59,219
and then as that another startup called

44
00:01:55,350 --> 00:02:00,929
protect wise doing threat research so my

45
00:01:59,219 --> 00:02:03,030
background is primarily in network

46
00:02:00,930 --> 00:02:05,100
forensics incident response threat

47
00:02:03,030 --> 00:02:07,399
intelligence and cloud security if

48
00:02:05,100 --> 00:02:11,129
you're interested in a cloud security

49
00:02:07,399 --> 00:02:12,640
topics be sure to follow me on twitter

50
00:02:11,129 --> 00:02:13,899
at least work labs

51
00:02:12,640 --> 00:02:19,899
and you can also check out our blog for

52
00:02:13,900 --> 00:02:22,420
any of the research that we do okay so

53
00:02:19,900 --> 00:02:25,180
ku Bernays is a container Orchestrator

54
00:02:22,420 --> 00:02:26,649
it's an open-source project it's been

55
00:02:25,180 --> 00:02:30,910
open source for a little over five years

56
00:02:26,650 --> 00:02:34,570
now before that it was developed at

57
00:02:30,910 --> 00:02:36,250
Google and if you aren't in DevOps you

58
00:02:34,570 --> 00:02:38,590
might be wondering you know why do we

59
00:02:36,250 --> 00:02:40,959
need an Orchestrator well the main

60
00:02:38,590 --> 00:02:42,700
reason really boils down to as you start

61
00:02:40,959 --> 00:02:45,070
to scale the containers that you have

62
00:02:42,700 --> 00:02:47,320
and you start scaling the micro services

63
00:02:45,070 --> 00:02:49,239
that you're using a lot of the smaller

64
00:02:47,320 --> 00:02:51,670
challenges on a small scale start

65
00:02:49,239 --> 00:02:53,980
becoming big challenges and that's where

66
00:02:51,670 --> 00:02:56,290
an Orchestrator can come in and help so

67
00:02:53,980 --> 00:02:57,850
things like networking such as if your

68
00:02:56,290 --> 00:02:59,679
container dies and you get a new IP

69
00:02:57,850 --> 00:03:01,750
address how you're gonna handle that

70
00:02:59,680 --> 00:03:04,209
networking easily how you're gonna

71
00:03:01,750 --> 00:03:06,970
handle service discovery setting up

72
00:03:04,209 --> 00:03:08,530
strategies for deployments of how your

73
00:03:06,970 --> 00:03:10,380
infrastructure may scale up or scale

74
00:03:08,530 --> 00:03:13,660
down based on the load that you have

75
00:03:10,380 --> 00:03:15,220
that's what your Orchestrator does now

76
00:03:13,660 --> 00:03:17,560
there's a lot of different orchestras

77
00:03:15,220 --> 00:03:20,140
out there Huber denny's isn't the only

78
00:03:17,560 --> 00:03:22,690
one but right now it's really become

79
00:03:20,140 --> 00:03:24,880
kind of the DFAC to standard and the

80
00:03:22,690 --> 00:03:27,340
most popular so that's why we're talking

81
00:03:24,880 --> 00:03:29,350
about today additionally it has a number

82
00:03:27,340 --> 00:03:31,120
of security features with each new

83
00:03:29,350 --> 00:03:33,340
release it becomes more and more mature

84
00:03:31,120 --> 00:03:38,709
so it becomes something interesting for

85
00:03:33,340 --> 00:03:40,750
us to study now if you haven't seen this

86
00:03:38,709 --> 00:03:42,250
YouTube video before I highly recommend

87
00:03:40,750 --> 00:03:44,380
checking it out it's illustrated

88
00:03:42,250 --> 00:03:46,440
children's guide to kubernetes and

89
00:03:44,380 --> 00:03:49,299
essentially it's a ten minute video

90
00:03:46,440 --> 00:03:54,250
explaining how kubernetes works from the

91
00:03:49,299 --> 00:03:56,410
point and story of a children's book so

92
00:03:54,250 --> 00:03:59,079
this is a very simplified architecture

93
00:03:56,410 --> 00:04:00,940
for kubernetes kubernetes is pretty

94
00:03:59,079 --> 00:04:03,130
complex but we have some major

95
00:04:00,940 --> 00:04:05,410
components and I'll just run through

96
00:04:03,130 --> 00:04:08,859
these real quick so future in the talk

97
00:04:05,410 --> 00:04:10,870
this will make some sense so all the

98
00:04:08,859 --> 00:04:13,239
servers in your kubernetes cluster are

99
00:04:10,870 --> 00:04:15,370
going to be referred to as nodes one of

100
00:04:13,239 --> 00:04:18,250
the most important objects is a pod and

101
00:04:15,370 --> 00:04:20,620
the pot is what actually holds your

102
00:04:18,250 --> 00:04:23,080
containers so an easy way to remember

103
00:04:20,620 --> 00:04:24,640
what pod is is it's a pot of whales and

104
00:04:23,080 --> 00:04:26,320
if you think of containers like docker

105
00:04:24,640 --> 00:04:28,719
docker uses the way

106
00:04:26,320 --> 00:04:31,360
Elle mascot and that's where the pod

107
00:04:28,720 --> 00:04:33,400
comes from also on the nodes we have a

108
00:04:31,360 --> 00:04:36,670
demon called cubelet and that helps

109
00:04:33,400 --> 00:04:38,979
bridge the resources from the node to

110
00:04:36,670 --> 00:04:42,040
the rest of the cluster also helps keep

111
00:04:38,980 --> 00:04:44,230
the pots check on the pots health now

112
00:04:42,040 --> 00:04:47,080
then we have special notes called master

113
00:04:44,230 --> 00:04:49,270
nodes you may have one or more depending

114
00:04:47,080 --> 00:04:50,979
on the size of your cluster but they

115
00:04:49,270 --> 00:04:52,750
have what we call it the control plane

116
00:04:50,980 --> 00:04:54,640
and these are the critical components

117
00:04:52,750 --> 00:04:56,470
keep your cluster running

118
00:04:54,640 --> 00:04:58,300
that's your API server which is

119
00:04:56,470 --> 00:05:00,220
essentially the hub of all the

120
00:04:58,300 --> 00:05:02,920
communications going on in your cluster

121
00:05:00,220 --> 00:05:04,600
at CD that's a database that's going to

122
00:05:02,920 --> 00:05:06,820
store all of your configuration and

123
00:05:04,600 --> 00:05:08,620
state and then you have a scheduler and

124
00:05:06,820 --> 00:05:11,469
Control Manager to help schedule the

125
00:05:08,620 --> 00:05:13,930
pods that you're running and also make

126
00:05:11,470 --> 00:05:17,580
sure that they're healthy outside of the

127
00:05:13,930 --> 00:05:20,350
cluster users can interface with it with

128
00:05:17,580 --> 00:05:23,650
command-line utility called coop control

129
00:05:20,350 --> 00:05:26,350
or you can also enable dashboard to have

130
00:05:23,650 --> 00:05:28,090
a web front-end to this but at the end

131
00:05:26,350 --> 00:05:30,580
of the day kind of the easiest way to

132
00:05:28,090 --> 00:05:33,489
think of kubernetes is it's essentially

133
00:05:30,580 --> 00:05:35,650
a declarative API where you declare what

134
00:05:33,490 --> 00:05:37,540
your ideal state of the world is for

135
00:05:35,650 --> 00:05:40,299
your container eyes applications and

136
00:05:37,540 --> 00:05:42,790
then kubernetes consistently is checking

137
00:05:40,300 --> 00:05:44,890
that to make sure that the actual state

138
00:05:42,790 --> 00:05:50,410
of the world matches what your declared

139
00:05:44,890 --> 00:05:51,849
state is so since kubernetes is a really

140
00:05:50,410 --> 00:05:53,980
interesting piece of technology and

141
00:05:51,850 --> 00:05:56,620
there's a lot of moving parts it brings

142
00:05:53,980 --> 00:05:58,360
up a lot of concerns around security so

143
00:05:56,620 --> 00:06:00,880
that's one of the motivations that took

144
00:05:58,360 --> 00:06:02,650
us down the path of let's kind of figure

145
00:06:00,880 --> 00:06:04,780
out what the security concerns might be

146
00:06:02,650 --> 00:06:07,030
with kubernetes and there's kind of two

147
00:06:04,780 --> 00:06:08,679
different roads you can go down so one

148
00:06:07,030 --> 00:06:11,710
of the most common things that we see in

149
00:06:08,680 --> 00:06:13,990
the cloud is misconfigurations this

150
00:06:11,710 --> 00:06:16,120
happens a lot with you know a MongoDB

151
00:06:13,990 --> 00:06:18,160
is exposed to the Internet has a bunch

152
00:06:16,120 --> 00:06:21,010
of sense of information people find it

153
00:06:18,160 --> 00:06:22,780
leak it out the other side of the coin

154
00:06:21,010 --> 00:06:24,640
is probably some more than advanced

155
00:06:22,780 --> 00:06:27,219
stuff so this is you have an application

156
00:06:24,640 --> 00:06:29,469
in that container and that application

157
00:06:27,220 --> 00:06:32,680
gets exploited what can the attacker do

158
00:06:29,470 --> 00:06:35,350
next can they move laterally within the

159
00:06:32,680 --> 00:06:37,390
cluster can they pivot into your cloud

160
00:06:35,350 --> 00:06:38,930
service provider account can they break

161
00:06:37,390 --> 00:06:41,930
out of the container what if your know

162
00:06:38,930 --> 00:06:44,419
get attacked so we decided to focus more

163
00:06:41,930 --> 00:06:46,250
on the misconfigurations part of this of

164
00:06:44,419 --> 00:06:48,560
the puzzle because we want to really see

165
00:06:46,250 --> 00:06:51,229
what the scope of it is sometimes these

166
00:06:48,560 --> 00:06:53,389
misconfigurations seem really silly but

167
00:06:51,229 --> 00:06:56,690
with the vast amount of different tools

168
00:06:53,389 --> 00:06:58,669
there are the bootstrap a cluster it's

169
00:06:56,690 --> 00:07:03,469
kind of you can kind of see how these

170
00:06:58,669 --> 00:07:04,990
might come along so specifically some of

171
00:07:03,470 --> 00:07:08,630
the major things that we see

172
00:07:04,990 --> 00:07:11,509
misconfigured are the dashboard so you

173
00:07:08,630 --> 00:07:13,490
don't need to use the dashboard this is

174
00:07:11,509 --> 00:07:17,000
the component that you can enable on

175
00:07:13,490 --> 00:07:19,509
your own and winds up happening is if

176
00:07:17,000 --> 00:07:22,820
this gets exposed to unauthorized access

177
00:07:19,509 --> 00:07:25,880
depending on the account that the

178
00:07:22,820 --> 00:07:28,690
dashboard is using there might be a lot

179
00:07:25,880 --> 00:07:31,340
that someone could do so in like

180
00:07:28,690 --> 00:07:34,490
2017-2018 there was a number of reports

181
00:07:31,340 --> 00:07:36,460
of major companies where security

182
00:07:34,490 --> 00:07:38,630
researchers found exposed dashboards

183
00:07:36,460 --> 00:07:40,250
discovered that there was crypto mining

184
00:07:38,630 --> 00:07:42,880
going on and that there was access

185
00:07:40,250 --> 00:07:46,990
beyond those clusters that can be gained

186
00:07:42,880 --> 00:07:49,760
the API server is really interesting

187
00:07:46,990 --> 00:07:53,180
there's actually two different parts to

188
00:07:49,760 --> 00:07:55,719
API server so the API server is in

189
00:07:53,180 --> 00:07:58,639
charge of authentication authorization

190
00:07:55,720 --> 00:08:01,250
and admissions control within your

191
00:07:58,639 --> 00:08:04,039
cluster now it serves on two different

192
00:08:01,250 --> 00:08:05,360
ports most of your configuration tools

193
00:08:04,039 --> 00:08:07,639
are going to take care of this on its

194
00:08:05,360 --> 00:08:10,909
own but one is referred to as a secure

195
00:08:07,639 --> 00:08:12,320
port that secure port is going to be TLS

196
00:08:10,909 --> 00:08:15,889
encrypted and go through all those

197
00:08:12,320 --> 00:08:17,690
regular modules that I just said now

198
00:08:15,889 --> 00:08:21,080
there's also in an insecure version that

199
00:08:17,690 --> 00:08:23,479
just uses HTTP and this bypasses

200
00:08:21,080 --> 00:08:25,698
authentication authorization so if this

201
00:08:23,479 --> 00:08:26,270
happens to get exposed to unauthorized

202
00:08:25,699 --> 00:08:28,639
access

203
00:08:26,270 --> 00:08:30,830
whoever's hitting that and can just make

204
00:08:28,639 --> 00:08:32,719
any sort of API calls that they want and

205
00:08:30,830 --> 00:08:35,569
that's where we end up focusing some of

206
00:08:32,719 --> 00:08:39,229
this research a little bit later at CD

207
00:08:35,570 --> 00:08:40,789
that CD is the key value store it stores

208
00:08:39,229 --> 00:08:42,770
your configuration and state but

209
00:08:40,789 --> 00:08:45,170
something really important to know is

210
00:08:42,770 --> 00:08:46,430
out of the box at CD isn't going to

211
00:08:45,170 --> 00:08:49,670
recall require any sort of

212
00:08:46,430 --> 00:08:51,620
authentication it's also going to it's

213
00:08:49,670 --> 00:08:54,140
not going to have any encryption at rest

214
00:08:51,620 --> 00:08:56,120
so the secrets that gets stored a net CD

215
00:08:54,140 --> 00:08:58,880
are going to be base64 encoded by

216
00:08:56,120 --> 00:09:01,610
default and if you were to be able to

217
00:08:58,880 --> 00:09:04,040
access this meal get some sort of sense

218
00:09:01,610 --> 00:09:06,140
of information generally in a kubernetes

219
00:09:04,040 --> 00:09:08,630
cluster we can expect that at some point

220
00:09:06,140 --> 00:09:10,370
there might be credentials that are

221
00:09:08,630 --> 00:09:12,890
leading to the cloud service provider

222
00:09:10,370 --> 00:09:15,620
that's being used on and then there's

223
00:09:12,890 --> 00:09:17,449
cubelet Cuba is the daemon that's

224
00:09:15,620 --> 00:09:19,910
running on all the different nodes and

225
00:09:17,450 --> 00:09:21,350
some of the older versions of kubernetes

226
00:09:19,910 --> 00:09:23,990
there's a lot of issues with

227
00:09:21,350 --> 00:09:25,490
unauthorized access to this such as you

228
00:09:23,990 --> 00:09:28,640
know scheduling pods and things like

229
00:09:25,490 --> 00:09:30,740
that we didn't focus too much research

230
00:09:28,640 --> 00:09:33,770
on this this one was a little bit more

231
00:09:30,740 --> 00:09:37,400
difficult to do some internet scanning

232
00:09:33,770 --> 00:09:40,160
on to go out and discover but I'll give

233
00:09:37,400 --> 00:09:41,660
you a quick demo of how we can find open

234
00:09:40,160 --> 00:09:44,600
dashboards so we use a variety of

235
00:09:41,660 --> 00:09:47,180
different tools we use Census and showed

236
00:09:44,600 --> 00:09:51,320
in just mass internet scanning tools

237
00:09:47,180 --> 00:09:54,140
that can index the metadata that we're

238
00:09:51,320 --> 00:09:55,760
looking for so specifically if we want

239
00:09:54,140 --> 00:09:58,160
to find a dashboard we just need some

240
00:09:55,760 --> 00:10:02,000
way to fingerprint it we know it's HTML

241
00:09:58,160 --> 00:10:04,160
so there's an HTML element that's pretty

242
00:10:02,000 --> 00:10:08,750
unique to it and it's just kubernetes

243
00:10:04,160 --> 00:10:13,670
dashboard and so here this is just doing

244
00:10:08,750 --> 00:10:15,620
a quick search in census we see about

245
00:10:13,670 --> 00:10:18,380
500 different results it's just a

246
00:10:15,620 --> 00:10:23,330
listing of IPs where there was some sort

247
00:10:18,380 --> 00:10:25,130
of result related to this we drill into

248
00:10:23,330 --> 00:10:27,680
one of these just one the ones that we

249
00:10:25,130 --> 00:10:29,330
pick off the top get some more info on

250
00:10:27,680 --> 00:10:35,180
it and then we can actually go straight

251
00:10:29,330 --> 00:10:37,340
to the site and within this we found

252
00:10:35,180 --> 00:10:40,609
this completely open kubernetes

253
00:10:37,340 --> 00:10:42,440
dashboard in this case this one you can

254
00:10:40,610 --> 00:10:44,180
do whatever you want with it you can see

255
00:10:42,440 --> 00:10:47,330
what's in that CD you could schedule

256
00:10:44,180 --> 00:10:48,949
your own pods things like that the vast

257
00:10:47,330 --> 00:10:51,080
majority of the ones that we did find

258
00:10:48,950 --> 00:10:52,940
though did have some sort of

259
00:10:51,080 --> 00:10:56,780
authentication where you would be asked

260
00:10:52,940 --> 00:10:59,240
to give a token or coop config file some

261
00:10:56,780 --> 00:11:01,550
of the older versions of kubernetes the

262
00:10:59,240 --> 00:11:03,930
account that the service account that's

263
00:11:01,550 --> 00:11:07,500
used on that dashboard is to permit

264
00:11:03,930 --> 00:11:09,359
so that's just just one way that we can

265
00:11:07,500 --> 00:11:11,160
show you how we discover some of these

266
00:11:09,360 --> 00:11:12,990
things so what we'll actually do is

267
00:11:11,160 --> 00:11:16,469
automate it in the backend validate the

268
00:11:12,990 --> 00:11:20,100
findings and go through that way so it's

269
00:11:16,470 --> 00:11:23,870
just a few numbers of what we saw this

270
00:11:20,100 --> 00:11:27,570
is earlier this year over 500 different

271
00:11:23,870 --> 00:11:30,300
dashboards that were open 2,400

272
00:11:27,570 --> 00:11:33,630
different HD clusters now the note on

273
00:11:30,300 --> 00:11:38,099
this is these SED clusters you can do @

274
00:11:33,630 --> 00:11:40,290
çd outside of kubernetes but a lot of

275
00:11:38,100 --> 00:11:44,130
these we found metadata that strongly

276
00:11:40,290 --> 00:11:45,719
associated with kubernetes and so with

277
00:11:44,130 --> 00:11:47,939
these ones they're completely opened the

278
00:11:45,720 --> 00:11:50,490
internet that shoten can pick up on you

279
00:11:47,940 --> 00:11:52,260
can do a simple curl command and dump

280
00:11:50,490 --> 00:11:55,920
out all the key value pairs that are in

281
00:11:52,260 --> 00:11:58,710
there on the API server side we'd see

282
00:11:55,920 --> 00:12:01,579
between anywhere anywhere between twenty

283
00:11:58,710 --> 00:12:04,020
one thousand and twenty four thousand

284
00:12:01,580 --> 00:12:06,180
accessible API servers any given time

285
00:12:04,020 --> 00:12:09,329
now this is on the secure port this

286
00:12:06,180 --> 00:12:11,910
isn't a huge security concern you can do

287
00:12:09,330 --> 00:12:14,280
data leak there's also a big CDE that

288
00:12:11,910 --> 00:12:17,520
came out last year related to the API

289
00:12:14,280 --> 00:12:20,640
server but prior most interesting

290
00:12:17,520 --> 00:12:23,579
finding was 600 different API servers

291
00:12:20,640 --> 00:12:25,949
with the insecure so that means that

292
00:12:23,580 --> 00:12:27,480
these API servers are completely open to

293
00:12:25,950 --> 00:12:29,390
the world there's no authentication or

294
00:12:27,480 --> 00:12:32,130
authorization involved in them and

295
00:12:29,390 --> 00:12:34,050
anyone that is where those could

296
00:12:32,130 --> 00:12:38,640
essentially make the API calls they want

297
00:12:34,050 --> 00:12:41,040
with unfettered access so kind of the

298
00:12:38,640 --> 00:12:44,060
next step is we did some research see

299
00:12:41,040 --> 00:12:46,650
some exposure you don't hear a lot about

300
00:12:44,060 --> 00:12:48,660
attacks are targeting Cooper days in the

301
00:12:46,650 --> 00:12:51,449
news so we want to learn a little bit

302
00:12:48,660 --> 00:12:54,870
more about it specifically we wanted to

303
00:12:51,450 --> 00:12:56,280
know if attacks are occurring how long

304
00:12:54,870 --> 00:12:58,260
does it take to get attacked we know

305
00:12:56,280 --> 00:13:00,390
that we can put certain applications up

306
00:12:58,260 --> 00:13:02,069
in the cloud and within a day you know

307
00:13:00,390 --> 00:13:04,620
we'll see multiple exploits being thrown

308
00:13:02,070 --> 00:13:07,440
at it but what would be like kubernetes

309
00:13:04,620 --> 00:13:11,460
what happens if I leave my insecurity PI

310
00:13:07,440 --> 00:13:13,820
server open or a dashboard open so I

311
00:13:11,460 --> 00:13:16,590
went poking around for just some more

312
00:13:13,820 --> 00:13:17,459
reporting at the end of 2018 I started

313
00:13:16,590 --> 00:13:19,170
here in a couple

314
00:13:17,459 --> 00:13:22,859
rumors about a few different things

315
00:13:19,170 --> 00:13:24,990
going on this was a blog post entitled

316
00:13:22,860 --> 00:13:27,029
an overview of micro Cades the tool the

317
00:13:24,990 --> 00:13:28,499
QuickStart the kubernetes cluster and

318
00:13:27,029 --> 00:13:31,410
why using in the cloud was a terrible

319
00:13:28,499 --> 00:13:33,240
idea and so that can kind of tell you

320
00:13:31,410 --> 00:13:34,889
what happened here but essentially they

321
00:13:33,240 --> 00:13:36,480
use micro codes and I'll explain what

322
00:13:34,889 --> 00:13:39,389
that is here in a couple minutes if

323
00:13:36,480 --> 00:13:42,119
you're not familiar with it but they

324
00:13:39,389 --> 00:13:43,860
they put micro page and a major cloud

325
00:13:42,119 --> 00:13:46,439
provider they expose it to the Internet

326
00:13:43,860 --> 00:13:48,329
and shortly later they found that there

327
00:13:46,439 --> 00:13:51,118
was one two cryptocurrency mining going

328
00:13:48,329 --> 00:13:55,040
on now the interesting thing here is

329
00:13:51,119 --> 00:13:57,420
this kind of brought up a lot of debate

330
00:13:55,040 --> 00:13:59,459
from this thread and a lot of people

331
00:13:57,420 --> 00:14:01,170
very familiar with the micro case

332
00:13:59,459 --> 00:14:02,849
project we're like okay you're not

333
00:14:01,170 --> 00:14:05,610
supposed to use micro Kate's like this

334
00:14:02,850 --> 00:14:07,319
this is not the intended usage and what

335
00:14:05,610 --> 00:14:10,709
I ended up doing is eventually there was

336
00:14:07,319 --> 00:14:12,990
a PR there's a pull request in the micro

337
00:14:10,709 --> 00:14:17,069
Kate's project to bind that insecure

338
00:14:12,990 --> 00:14:20,579
port to localhost so it made a made a

339
00:14:17,069 --> 00:14:23,998
decent splash after that later in

340
00:14:20,579 --> 00:14:25,618
December we see this was just this

341
00:14:23,999 --> 00:14:26,970
random comment I found in this forum

342
00:14:25,619 --> 00:14:29,549
that was talking about some different

343
00:14:26,970 --> 00:14:31,290
crypto jacking campaigns going on and

344
00:14:29,549 --> 00:14:34,610
essentially they said they had a fresh

345
00:14:31,290 --> 00:14:36,689
microcut since solution we see some

346
00:14:34,610 --> 00:14:40,199
different files being downloaded and

347
00:14:36,689 --> 00:14:41,730
executed an interesting cron job but the

348
00:14:40,199 --> 00:14:44,368
big thing to point out here is the

349
00:14:41,730 --> 00:14:46,259
conclusion is do not install micro Cades

350
00:14:44,369 --> 00:14:49,709
with its default configuration on a

351
00:14:46,259 --> 00:14:51,959
server exposed to the Internet so that

352
00:14:49,709 --> 00:14:54,109
really gives us a great kind of starting

353
00:14:51,959 --> 00:14:58,018
point for our own experiment

354
00:14:54,110 --> 00:14:59,809
so micro Cades there's there's a lot of

355
00:14:58,019 --> 00:15:03,089
different tools for bootstrapping

356
00:14:59,809 --> 00:15:04,350
crewnecks clusters micro kites is quite

357
00:15:03,089 --> 00:15:06,959
a bit different because it's just a

358
00:15:04,350 --> 00:15:09,329
small lightweight single node Cades

359
00:15:06,959 --> 00:15:11,790
cluster to maintain by the same people

360
00:15:09,329 --> 00:15:13,589
that maintain a bun - it's super easy to

361
00:15:11,790 --> 00:15:15,689
set up you can set it up and have it

362
00:15:13,589 --> 00:15:17,189
running within a couple of minutes but

363
00:15:15,689 --> 00:15:20,519
it's primarily used for offline

364
00:15:17,189 --> 00:15:23,699
development and prototype testing things

365
00:15:20,519 --> 00:15:25,949
like that it's not really meant to you

366
00:15:23,699 --> 00:15:30,299
know do something large production-grade

367
00:15:25,949 --> 00:15:31,310
you know in the cloud so for our

368
00:15:30,299 --> 00:15:34,640
honeypot

369
00:15:31,310 --> 00:15:36,619
need to do was up in a bunt to server we

370
00:15:34,640 --> 00:15:39,020
install micro Cades it comes as a snap

371
00:15:36,620 --> 00:15:40,910
package from there you can enable

372
00:15:39,020 --> 00:15:43,040
various different add-ons so we made

373
00:15:40,910 --> 00:15:45,110
sure to enable the dashboard so we could

374
00:15:43,040 --> 00:15:47,680
expose that we made sure that the

375
00:15:45,110 --> 00:15:50,870
unsecure api was accessible to the world

376
00:15:47,680 --> 00:15:54,050
we expose all traffic to that instance

377
00:15:50,870 --> 00:15:56,810
ran TCP dump put our lakes work agent on

378
00:15:54,050 --> 00:15:59,150
it and then decide to go from there and

379
00:15:56,810 --> 00:16:01,310
just as a disclaimer as Liz was saying

380
00:15:59,150 --> 00:16:03,860
this is not how micro Kate's is designed

381
00:16:01,310 --> 00:16:06,920
to be used so this isn't a security flaw

382
00:16:03,860 --> 00:16:13,029
with them this is simply just us using

383
00:16:06,920 --> 00:16:15,290
as an easy way to set up a honeypot so

384
00:16:13,029 --> 00:16:17,240
when I first set it up I was really

385
00:16:15,290 --> 00:16:20,089
excited because I figured within a

386
00:16:17,240 --> 00:16:22,070
couple of hours or maybe a day I'd start

387
00:16:20,089 --> 00:16:24,770
seeing the activity that I was looking

388
00:16:22,070 --> 00:16:26,660
for but what all that was really

389
00:16:24,770 --> 00:16:28,250
happening at first was a lot of

390
00:16:26,660 --> 00:16:31,219
different IPS were just scanning it

391
00:16:28,250 --> 00:16:33,740
mainly hitting that API server that was

392
00:16:31,220 --> 00:16:36,589
open not see a bunch of weird stuff like

393
00:16:33,740 --> 00:16:39,260
directory traversal attempts and random

394
00:16:36,589 --> 00:16:40,640
exploits being thrown at it but not much

395
00:16:39,260 --> 00:16:43,970
was going on there there wasn't much

396
00:16:40,640 --> 00:16:48,890
traffic to the dashboard either but

397
00:16:43,970 --> 00:16:51,320
after 31 days we finally had success so

398
00:16:48,890 --> 00:16:53,510
this is just a Wireshark screenshot and

399
00:16:51,320 --> 00:16:54,950
what's going on here this is just the

400
00:16:53,510 --> 00:16:57,830
typical scanning we would see on a

401
00:16:54,950 --> 00:17:00,050
day-to-day basis and one of the things

402
00:16:57,830 --> 00:17:03,500
that was kind of interesting is even

403
00:17:00,050 --> 00:17:05,928
like for the majority of inbound HTTP

404
00:17:03,500 --> 00:17:07,670
requests that we would get we'd always

405
00:17:05,929 --> 00:17:11,449
kind of get the same response from the

406
00:17:07,670 --> 00:17:13,429
stuff from the API server which this is

407
00:17:11,449 --> 00:17:20,000
listing out all the different API

408
00:17:13,429 --> 00:17:22,160
endpoints and then one day date 31 we

409
00:17:20,000 --> 00:17:24,290
find this interesting user agent and

410
00:17:22,160 --> 00:17:26,420
it's cute control so remember from

411
00:17:24,290 --> 00:17:28,069
earlier cute controls our command-line

412
00:17:26,420 --> 00:17:30,200
utility that we can use the interface of

413
00:17:28,069 --> 00:17:32,720
the cluster and this time they went

414
00:17:30,200 --> 00:17:36,950
through and looked at every single API

415
00:17:32,720 --> 00:17:39,110
endpoint and then eventually what we end

416
00:17:36,950 --> 00:17:43,330
up with is we see a post request

417
00:17:39,110 --> 00:17:44,479
now what this close request is doing is

418
00:17:43,330 --> 00:17:47,540
it

419
00:17:44,480 --> 00:17:49,669
is creating a replication controller so

420
00:17:47,540 --> 00:17:52,010
with five replicas so essentially what

421
00:17:49,669 --> 00:17:54,130
that is is it's it's a kubernetes object

422
00:17:52,010 --> 00:17:58,580
where you can run multiple replicas of

423
00:17:54,130 --> 00:18:02,030
get a given pod and if we take a closer

424
00:17:58,580 --> 00:18:05,030
look at one of the pod configurations we

425
00:18:02,030 --> 00:18:09,049
see that they're using CentOS as the

426
00:18:05,030 --> 00:18:11,389
image and then we have the command that

427
00:18:09,049 --> 00:18:13,429
used to run the container is the curl

428
00:18:11,390 --> 00:18:15,830
command 4xm rig which is an open source

429
00:18:13,429 --> 00:18:19,210
of an arrow miner and then it pulls down

430
00:18:15,830 --> 00:18:22,520
a configuration file and then changes

431
00:18:19,210 --> 00:18:25,820
mix that makes XM regen executable and

432
00:18:22,520 --> 00:18:27,290
then go ahead and execute it so the

433
00:18:25,820 --> 00:18:29,600
thing that was really interesting to me

434
00:18:27,290 --> 00:18:31,790
at this point is I kind of just assumed

435
00:18:29,600 --> 00:18:33,860
that an attacker would pull down an

436
00:18:31,790 --> 00:18:35,780
attacker controlled image that was

437
00:18:33,860 --> 00:18:38,449
already set up and then just run it that

438
00:18:35,780 --> 00:18:39,980
way but this this would was a better way

439
00:18:38,450 --> 00:18:41,960
for them to do it because it's just a

440
00:18:39,980 --> 00:18:43,790
clean CentOS image it's not something

441
00:18:41,960 --> 00:18:47,030
they have to worry about people finding

442
00:18:43,790 --> 00:18:48,799
on any major repos another interesting

443
00:18:47,030 --> 00:18:51,950
thing is we see this container named my

444
00:18:48,799 --> 00:18:55,040
res do too so that comes in handy here

445
00:18:51,950 --> 00:18:58,040
in a little bit this is just a

446
00:18:55,040 --> 00:18:59,629
configuration file for XM rig we have

447
00:18:58,040 --> 00:19:02,120
this Manero address that we can do a

448
00:18:59,630 --> 00:19:07,700
little more research on we see custom

449
00:19:02,120 --> 00:19:10,668
mining pools and then what we saw is the

450
00:19:07,700 --> 00:19:12,860
IP address that was used pull down XM

451
00:19:10,669 --> 00:19:15,020
rig and the configuration file was

452
00:19:12,860 --> 00:19:16,790
actually in a lot of other previous

453
00:19:15,020 --> 00:19:19,490
research from different security vendors

454
00:19:16,790 --> 00:19:22,428
and you know private forums and things

455
00:19:19,490 --> 00:19:25,580
like that we see a lot of we see a lot

456
00:19:22,429 --> 00:19:28,010
of ties to the 8220 gang and then we see

457
00:19:25,580 --> 00:19:30,470
that Manero address used in other crypto

458
00:19:28,010 --> 00:19:33,440
jackin attacks so the big thing that we

459
00:19:30,470 --> 00:19:35,600
learn here is that this is just one part

460
00:19:33,440 --> 00:19:38,419
of many other types of crypto checking

461
00:19:35,600 --> 00:19:42,980
attacks whether it's jinkins or Drupal

462
00:19:38,419 --> 00:19:44,929
you know things like that so we want to

463
00:19:42,980 --> 00:19:46,929
take this and kind of expand it so we

464
00:19:44,929 --> 00:19:49,460
saw all this other miss configuration

465
00:19:46,929 --> 00:19:52,640
going on is this happening to some of

466
00:19:49,460 --> 00:19:56,299
these other clusters out there so we

467
00:19:52,640 --> 00:19:58,050
revisit our previous research and we

468
00:19:56,299 --> 00:20:02,790
focus on the IP addresses

469
00:19:58,050 --> 00:20:06,960
that have that API insecure poor open to

470
00:20:02,790 --> 00:20:09,720
the world which is about 678 of them so

471
00:20:06,960 --> 00:20:12,960
we take those IP addresses and we scan

472
00:20:09,720 --> 00:20:14,670
their pot configurations and this will

473
00:20:12,960 --> 00:20:16,620
give us a kind of a good idea if there's

474
00:20:14,670 --> 00:20:19,470
any you know indicators of compromise

475
00:20:16,620 --> 00:20:22,050
going on we see about ten thousand seven

476
00:20:19,470 --> 00:20:23,400
hundred different pods and when we rack

477
00:20:22,050 --> 00:20:26,669
and stack some of the metadata

478
00:20:23,400 --> 00:20:30,510
attributes immediately we see these pot

479
00:20:26,670 --> 00:20:33,210
names that you see listed up there one

480
00:20:30,510 --> 00:20:35,490
of them was the same naming scheme that

481
00:20:33,210 --> 00:20:37,470
we saw in our honey pot and then we see

482
00:20:35,490 --> 00:20:40,950
common labels and common container names

483
00:20:37,470 --> 00:20:43,260
of my res d02 and my res DS here one and

484
00:20:40,950 --> 00:20:48,570
then sent hops being a popular image in

485
00:20:43,260 --> 00:20:50,790
the bunch to dive a little bit deeper we

486
00:20:48,570 --> 00:20:51,960
end up looking at what commands are

487
00:20:50,790 --> 00:20:55,230
actually being used for the containers

488
00:20:51,960 --> 00:20:57,780
and we see what ends up happening is

489
00:20:55,230 --> 00:21:00,090
five different distinct curl commands

490
00:20:57,780 --> 00:21:02,370
and these curl commands really follow

491
00:21:00,090 --> 00:21:05,030
that format of what I showed earlier in

492
00:21:02,370 --> 00:21:07,620
our honeypot and these basically are

493
00:21:05,030 --> 00:21:09,330
curl down for a file sometimes it's

494
00:21:07,620 --> 00:21:13,020
named XM rigs sometimes it's named

495
00:21:09,330 --> 00:21:16,230
something else like this su PPO ie

496
00:21:13,020 --> 00:21:19,139
one download an additional file which is

497
00:21:16,230 --> 00:21:22,170
our configuration file and then go ahead

498
00:21:19,140 --> 00:21:24,150
and execute and run those so sometimes

499
00:21:22,170 --> 00:21:27,740
it's was just too hard coded IP address

500
00:21:24,150 --> 00:21:31,260
over port 80 sometimes it was 80 to 20

501
00:21:27,740 --> 00:21:34,020
and then even in one instance that I

502
00:21:31,260 --> 00:21:36,740
found pretty interesting is they pulled

503
00:21:34,020 --> 00:21:40,620
X Emmerich director

504
00:21:36,740 --> 00:21:42,960
so from this we see okay like we have a

505
00:21:40,620 --> 00:21:44,489
lot of pots that are basically doing

506
00:21:42,960 --> 00:21:49,860
something really similar to what we saw

507
00:21:44,490 --> 00:21:52,410
in our honey pot when we tallied it all

508
00:21:49,860 --> 00:21:56,340
up out of that ten thousand I showed you

509
00:21:52,410 --> 00:22:01,920
before 4450 pots were being used for

510
00:21:56,340 --> 00:22:03,480
crypto mining and then when we take a

511
00:22:01,920 --> 00:22:05,580
closer look at some of these IP

512
00:22:03,480 --> 00:22:07,950
addresses that were used to download any

513
00:22:05,580 --> 00:22:10,760
of the files we see a lot of different

514
00:22:07,950 --> 00:22:12,950
overlaps the first one we see

515
00:22:10,760 --> 00:22:15,770
the one in from our honeypot showing up

516
00:22:12,950 --> 00:22:17,630
a lot of different times we see another

517
00:22:15,770 --> 00:22:19,970
one that was in some of those prior blog

518
00:22:17,630 --> 00:22:23,690
posts that we saw in micro Cades and

519
00:22:19,970 --> 00:22:26,720
then we also see one and some older some

520
00:22:23,690 --> 00:22:29,419
older reporting on Drupal get and

521
00:22:26,720 --> 00:22:31,730
attacks and things like that with a lot

522
00:22:29,419 --> 00:22:34,760
of ties coming back to the 8220 gang and

523
00:22:31,730 --> 00:22:37,250
some other various groups so this ends

524
00:22:34,760 --> 00:22:39,379
up telling us that you know anyone who

525
00:22:37,250 --> 00:22:41,419
has this insecure poor open to the world

526
00:22:39,380 --> 00:22:44,419
is likely running a number of pods that

527
00:22:41,419 --> 00:22:47,480
are doing crypto jacking and from within

528
00:22:44,419 --> 00:22:49,660
that and we know that these the

529
00:22:47,480 --> 00:22:52,250
attackers behind this are actually

530
00:22:49,660 --> 00:22:54,470
involved in other different crypto

531
00:22:52,250 --> 00:22:55,880
jacking campaigns going on quite some

532
00:22:54,470 --> 00:23:00,470
much bigger ones that you might read

533
00:22:55,880 --> 00:23:03,110
about and hear about so something that

534
00:23:00,470 --> 00:23:04,730
really stuck out here to me is that you

535
00:23:03,110 --> 00:23:06,949
know creep of jackin is really the tip

536
00:23:04,730 --> 00:23:09,980
of the iceberg now when we're doing our

537
00:23:06,950 --> 00:23:12,830
research you know we be careful to you

538
00:23:09,980 --> 00:23:15,020
know not go too deep but looking at some

539
00:23:12,830 --> 00:23:16,639
of these pod configurations it's very

540
00:23:15,020 --> 00:23:20,840
clear that some of these clusters are

541
00:23:16,640 --> 00:23:23,120
running probably have secrets - like AWS

542
00:23:20,840 --> 00:23:26,480
accounts and things like that stored

543
00:23:23,120 --> 00:23:28,489
within that CD and so if someone was

544
00:23:26,480 --> 00:23:30,740
going to be doing this manually there's

545
00:23:28,490 --> 00:23:33,500
a lot more they could do for example if

546
00:23:30,740 --> 00:23:35,090
you got into someone's AWS account then

547
00:23:33,500 --> 00:23:37,669
you can spin up whatever resources you

548
00:23:35,090 --> 00:23:42,799
want it and tell the people owning that

549
00:23:37,669 --> 00:23:44,960
count eventually turn that off so this

550
00:23:42,799 --> 00:23:48,590
is a list of resources what I'll do is

551
00:23:44,960 --> 00:23:50,210
I'll share on our blog these slides so

552
00:23:48,590 --> 00:23:51,918
you'll be able to take these slides go

553
00:23:50,210 --> 00:23:54,830
through some of the different things

554
00:23:51,919 --> 00:23:57,500
that we've looked at to find our blog

555
00:23:54,830 --> 00:24:01,549
it's just laser comm slash blog you can

556
00:23:57,500 --> 00:24:05,299
also email me anytime follow on Twitter

557
00:24:01,549 --> 00:24:07,429
all those things and then with that

558
00:24:05,299 --> 00:24:09,379
we're about out of time so if you have

559
00:24:07,429 --> 00:24:12,700
any questions just feel free to grab me

560
00:24:09,380 --> 00:24:12,700
afterwards thanks everybody

