1
00:00:01,100 --> 00:00:14,340
good to go hi guys welcome to our talk

2
00:00:10,950 --> 00:00:15,959
and we're really honored that we could

3
00:00:14,340 --> 00:00:19,198
speak here in front of the last Derby

4
00:00:15,960 --> 00:00:22,560
con it's time for us to go and we've got

5
00:00:19,199 --> 00:00:23,939
a little bit of a tight timeline but we

6
00:00:22,560 --> 00:00:27,869
really appreciate everyone coming out

7
00:00:23,939 --> 00:00:31,650
this Sunday morning and coming to learn

8
00:00:27,869 --> 00:00:33,719
about WebSockets so except further ado

9
00:00:31,650 --> 00:00:35,430
here we go

10
00:00:33,719 --> 00:00:37,739
what are we going to talk about here

11
00:00:35,430 --> 00:00:40,920
this is going to be kind of a tool

12
00:00:37,739 --> 00:00:43,430
focused talk on a tool that we developed

13
00:00:40,920 --> 00:00:45,390
ourselves for WebSocket assessments

14
00:00:43,430 --> 00:00:47,969
we're gonna talk briefly about what

15
00:00:45,390 --> 00:00:51,210
WebSockets are and what types of

16
00:00:47,969 --> 00:00:53,550
vulnerabilities exist in them and what

17
00:00:51,210 --> 00:00:56,309
tools already existed before we one

18
00:00:53,550 --> 00:00:59,038
created our own to fit a specific need

19
00:00:56,309 --> 00:01:02,370
and we'll follow up with how we built

20
00:00:59,039 --> 00:01:06,600
that in the demo this talk is geared

21
00:01:02,370 --> 00:01:10,770
more towards beginner medium level web

22
00:01:06,600 --> 00:01:12,720
application testers if you've been doing

23
00:01:10,770 --> 00:01:15,000
web application testing for a while and

24
00:01:12,720 --> 00:01:16,650
you're more on the experienced high end

25
00:01:15,000 --> 00:01:20,100
of the spectrum you've probably been

26
00:01:16,650 --> 00:01:21,720
doing web socket testing for a while and

27
00:01:20,100 --> 00:01:25,500
you already have your own methodology

28
00:01:21,720 --> 00:01:27,179
for doing that so we're not really going

29
00:01:25,500 --> 00:01:29,340
to cover anything that will be

30
00:01:27,180 --> 00:01:32,509
necessarily new there but our tool might

31
00:01:29,340 --> 00:01:32,509
be something you're not familiar with

32
00:01:32,840 --> 00:01:38,250
alright my name is michael foul it's

33
00:01:35,520 --> 00:01:40,380
honored to be here i'm a senior security

34
00:01:38,250 --> 00:01:42,450
engineer at vda labs we have to work on

35
00:01:40,380 --> 00:01:44,939
a lot of fun stuff I have about eight

36
00:01:42,450 --> 00:01:49,140
years of empathic experience all with

37
00:01:44,939 --> 00:01:51,270
some kind of offensive focus I guess who

38
00:01:49,140 --> 00:01:54,060
here is a bug bounty hunter anybody

39
00:01:51,270 --> 00:01:56,399
sweet okay I got started with the

40
00:01:54,060 --> 00:01:58,649
inaugural hack the Pentagon and had some

41
00:01:56,399 --> 00:02:00,299
fun results and like I just jumped into

42
00:01:58,649 --> 00:02:02,009
the bug bounties scene after that I

43
00:02:00,299 --> 00:02:04,829
don't get a lot of time for it now but

44
00:02:02,009 --> 00:02:05,509
it was it was great maybe I'll get back

45
00:02:04,829 --> 00:02:09,019
to it again

46
00:02:05,509 --> 00:02:11,400
so yeah worked in a lot of industries I

47
00:02:09,020 --> 00:02:14,120
don't see anything else I really like

48
00:02:11,400 --> 00:02:14,120
web applications

49
00:02:14,280 --> 00:02:20,530
and I'm Nick Defoe I'm the operations

50
00:02:18,250 --> 00:02:22,000
security operations manager at vda labs

51
00:02:20,530 --> 00:02:25,570
running the team they're doing

52
00:02:22,000 --> 00:02:28,090
engagements I've been an IT for over 15

53
00:02:25,570 --> 00:02:30,940
years started out in a helpdesk type

54
00:02:28,090 --> 00:02:32,740
role and then ran a development shop for

55
00:02:30,940 --> 00:02:34,150
a number of years and that's kind of

56
00:02:32,740 --> 00:02:36,850
where I got my web application

57
00:02:34,150 --> 00:02:39,460
experience before going into the

58
00:02:36,850 --> 00:02:43,150
offensive and testing side with vda labs

59
00:02:39,460 --> 00:02:46,030
so I kind of have a deep web application

60
00:02:43,150 --> 00:02:49,240
background and that's why I kind of took

61
00:02:46,030 --> 00:02:51,640
interest in this as well so first of all

62
00:02:49,240 --> 00:02:53,890
what are WebSockets well technically

63
00:02:51,640 --> 00:02:55,899
it's one word WebSocket and we had to

64
00:02:53,890 --> 00:02:58,890
look that up in the official RFC

65
00:02:55,900 --> 00:03:02,110
documentation and this is one of those

66
00:02:58,890 --> 00:03:05,260
going back to my web dev days this is

67
00:03:02,110 --> 00:03:09,970
one of those html5 features that were

68
00:03:05,260 --> 00:03:12,820
added to browsers and whatnot five to

69
00:03:09,970 --> 00:03:16,030
eight years ago when we wanted to

70
00:03:12,820 --> 00:03:18,910
replace flash with things that were more

71
00:03:16,030 --> 00:03:22,600
native in processes right so flash could

72
00:03:18,910 --> 00:03:25,260
do things like WebSockets can do but we

73
00:03:22,600 --> 00:03:27,670
wanted to not use flash anymore so

74
00:03:25,260 --> 00:03:29,709
WebSockets establish client-server

75
00:03:27,670 --> 00:03:32,500
connections that are bi-directional and

76
00:03:29,709 --> 00:03:34,989
low latency and persistent that's the

77
00:03:32,500 --> 00:03:37,140
key thing because before WebSockets we

78
00:03:34,989 --> 00:03:41,440
would do something called long polling

79
00:03:37,140 --> 00:03:43,809
where you basically kept HTTP requests

80
00:03:41,440 --> 00:03:46,120
alive for a long time to try to like

81
00:03:43,810 --> 00:03:48,880
keep communications going back and forth

82
00:03:46,120 --> 00:03:53,950
but this was designed to replace that

83
00:03:48,880 --> 00:03:57,430
with something that's better and the

84
00:03:53,950 --> 00:03:59,619
goal is to create real-time applications

85
00:03:57,430 --> 00:04:01,780
that are interactive so if you would

86
00:03:59,620 --> 00:04:04,150
think of something like a stock exchange

87
00:04:01,780 --> 00:04:05,890
that's gonna show real-time updates in

88
00:04:04,150 --> 00:04:09,190
the price of stocks that would be a good

89
00:04:05,890 --> 00:04:10,958
use case for a WebSocket typically

90
00:04:09,190 --> 00:04:15,970
WebSockets integrate really well with

91
00:04:10,959 --> 00:04:19,298
HTTP and so usually your web browser is

92
00:04:15,970 --> 00:04:22,150
going to use HTTP upgrade request to

93
00:04:19,298 --> 00:04:23,890
request that the session upgrade to a

94
00:04:22,150 --> 00:04:25,239
WebSocket and that's what one of those

95
00:04:23,890 --> 00:04:28,449
looks like

96
00:04:25,240 --> 00:04:31,479
but web browsers are not the only things

97
00:04:28,449 --> 00:04:32,949
that can use WebSockets so that's just

98
00:04:31,479 --> 00:04:34,690
something to keep in mind you could have

99
00:04:32,949 --> 00:04:36,580
an IOT device or something like that

100
00:04:34,690 --> 00:04:38,680
that's going to use WebSockets for

101
00:04:36,580 --> 00:04:42,219
communications behind the scenes it

102
00:04:38,680 --> 00:04:45,009
might use HTTP requests to start its

103
00:04:42,220 --> 00:04:46,509
WebSocket connection but it doesn't

104
00:04:45,009 --> 00:04:49,080
actually have a browser built in that's

105
00:04:46,509 --> 00:04:49,080
doing anything

106
00:04:49,660 --> 00:04:54,569
WebSockets are supported by all modern

107
00:04:51,669 --> 00:04:59,380
web browsers and this is an example

108
00:04:54,569 --> 00:05:01,960
that's showing a request in Firefox and

109
00:04:59,380 --> 00:05:03,759
this is actually a little blurry up

110
00:05:01,960 --> 00:05:08,349
there but this is a really weird one we

111
00:05:03,759 --> 00:05:10,780
noticed where the browser isn't doing a

112
00:05:08,349 --> 00:05:13,419
WebSocket request on behalf of the user

113
00:05:10,780 --> 00:05:16,210
it's doing its own WebSocket request in

114
00:05:13,419 --> 00:05:20,580
order to sync settings we think between

115
00:05:16,210 --> 00:05:25,630
the browser and Firefox is like cloud

116
00:05:20,580 --> 00:05:28,270
cloud settings preferences sync sort of

117
00:05:25,630 --> 00:05:31,810
thing and so this is just an example of

118
00:05:28,270 --> 00:05:34,180
how widespread the use of WebSockets is

119
00:05:31,810 --> 00:05:35,949
now and you can discover it in many

120
00:05:34,180 --> 00:05:38,349
different areas and so if you're not

121
00:05:35,949 --> 00:05:40,690
testing these while you're doing

122
00:05:38,349 --> 00:05:43,210
application assessments whether web

123
00:05:40,690 --> 00:05:45,550
applications or thick applications in

124
00:05:43,210 --> 00:05:50,138
some cases like a browser you're not

125
00:05:45,550 --> 00:05:53,199
covering all of the tax surface so

126
00:05:50,139 --> 00:05:55,240
there's also tooling built into the

127
00:05:53,199 --> 00:05:57,340
browser's to do some inspection of

128
00:05:55,240 --> 00:05:59,099
WebSocket connections and this is what

129
00:05:57,340 --> 00:06:01,388
it looks like in Google Chrome

130
00:05:59,099 --> 00:06:03,099
unfortunately though it's not the

131
00:06:01,389 --> 00:06:06,159
greatest way to look at what the

132
00:06:03,099 --> 00:06:08,889
WebSockets are doing the data is kind of

133
00:06:06,159 --> 00:06:10,690
muddled it just doesn't present very

134
00:06:08,889 --> 00:06:12,789
well and so that's kind of one of the

135
00:06:10,690 --> 00:06:14,949
reasons there's a need to use better

136
00:06:12,789 --> 00:06:19,330
tools than just the built-in dev tools

137
00:06:14,949 --> 00:06:22,000
from chrome for example and just briefly

138
00:06:19,330 --> 00:06:24,340
when a new feature like a WebSocket

139
00:06:22,000 --> 00:06:26,560
comes out invariably there's going to be

140
00:06:24,340 --> 00:06:30,789
some sort of vulnerability discovered in

141
00:06:26,560 --> 00:06:33,760
this case a new feature resulted in a

142
00:06:30,789 --> 00:06:36,310
new vulnerability if you see here we've

143
00:06:33,760 --> 00:06:38,620
got a origin that's different than the

144
00:06:36,310 --> 00:06:42,220
actual application

145
00:06:38,620 --> 00:06:44,230
and this is a new not new it was

146
00:06:42,220 --> 00:06:46,300
discovered after WebSockets came out a

147
00:06:44,230 --> 00:06:50,530
new type of vulnerability called

148
00:06:46,300 --> 00:06:52,660
cross-site WebSocket hijacking and it's

149
00:06:50,530 --> 00:06:56,530
similar to a cross-site request forgery

150
00:06:52,660 --> 00:06:59,200
type issue where a third party is using

151
00:06:56,530 --> 00:07:03,070
your authentication cookies to make a

152
00:06:59,200 --> 00:07:04,719
request on their own behalf and so that

153
00:07:03,070 --> 00:07:08,500
they can establish a WebSocket

154
00:07:04,720 --> 00:07:11,410
connection to a web application and then

155
00:07:08,500 --> 00:07:14,440
use it maliciously themselves instead of

156
00:07:11,410 --> 00:07:16,750
you and your session using it it's not

157
00:07:14,440 --> 00:07:20,760
exactly the same is CSRF though because

158
00:07:16,750 --> 00:07:23,530
it creates a bi-directional

159
00:07:20,760 --> 00:07:25,840
communication channel which is very

160
00:07:23,530 --> 00:07:27,969
different because in CSRF you're pretty

161
00:07:25,840 --> 00:07:31,030
much going to be able to send requests

162
00:07:27,970 --> 00:07:33,340
but not receive responses back and so

163
00:07:31,030 --> 00:07:35,500
that really can be a big deal and we

164
00:07:33,340 --> 00:07:37,299
have actually found this on commercial

165
00:07:35,500 --> 00:07:40,210
products that we've done testing for in

166
00:07:37,300 --> 00:07:43,360
the past which is awesome and not

167
00:07:40,210 --> 00:07:45,010
awesome at the same time but we're not

168
00:07:43,360 --> 00:07:46,990
here to talk about new vulnerabilities

169
00:07:45,010 --> 00:07:51,190
in web sockets we're here to talk about

170
00:07:46,990 --> 00:07:52,990
old vulnerabilities so WebSockets are

171
00:07:51,190 --> 00:07:55,930
really just a transportation layer which

172
00:07:52,990 --> 00:07:57,940
means that there can be more traditional

173
00:07:55,930 --> 00:08:00,100
attack vectors that can be used against

174
00:07:57,940 --> 00:08:02,440
WebSocket connections and applications

175
00:08:00,100 --> 00:08:04,360
that use WebSockets so in this case

176
00:08:02,440 --> 00:08:06,880
we're gonna specifically talk about SQL

177
00:08:04,360 --> 00:08:09,460
injection command injection and so on

178
00:08:06,880 --> 00:08:12,969
but the problem is how do we go about

179
00:08:09,460 --> 00:08:16,659
finding those most schooling at this

180
00:08:12,970 --> 00:08:21,040
point for doing application assessment

181
00:08:16,660 --> 00:08:23,380
is not particularly aware of WebSocket

182
00:08:21,040 --> 00:08:27,090
so when you talk about a commercial like

183
00:08:23,380 --> 00:08:29,680
dynamic web application testing tool

184
00:08:27,090 --> 00:08:34,419
they're not gonna really know what to do

185
00:08:29,680 --> 00:08:36,400
with a WebSocket connection so we went

186
00:08:34,419 --> 00:08:39,990
and created our own tool which will

187
00:08:36,400 --> 00:08:43,209
allow us to use all of the traditional

188
00:08:39,990 --> 00:08:46,840
valuable tools like burp suite Comics

189
00:08:43,210 --> 00:08:50,310
SQL map no SQL map and so on to test

190
00:08:46,840 --> 00:08:50,310
against WebSockets and

191
00:08:50,510 --> 00:08:57,590
it's important to know that basically

192
00:08:55,190 --> 00:09:01,100
these tools are intended to work over

193
00:08:57,590 --> 00:09:03,650
HTTP by default and so what we've done

194
00:09:01,100 --> 00:09:07,490
is created or we're calling like a shim

195
00:09:03,650 --> 00:09:09,439
or a proxy that sits between the tool

196
00:09:07,490 --> 00:09:11,480
and the actual web server that we're

197
00:09:09,440 --> 00:09:15,430
testing to kind of translate between the

198
00:09:11,480 --> 00:09:19,670
two there are other tools out there that

199
00:09:15,430 --> 00:09:21,260
help do web socket testing and I just

200
00:09:19,670 --> 00:09:24,199
wanted to make sure we cover the bases

201
00:09:21,260 --> 00:09:28,700
there so the biggest one that's been

202
00:09:24,200 --> 00:09:30,620
around for a while is a wasp zap and zap

203
00:09:28,700 --> 00:09:34,070
has had the capability to inspect

204
00:09:30,620 --> 00:09:36,800
WebSocket connections for a while and it

205
00:09:34,070 --> 00:09:40,280
has also had the ability to do some

206
00:09:36,800 --> 00:09:42,290
limited fuzzing of WebSockets as well we

207
00:09:40,280 --> 00:09:44,300
have found that that tool isn't

208
00:09:42,290 --> 00:09:45,770
particularly great at doing it though

209
00:09:44,300 --> 00:09:47,810
and that's part of the reason why we

210
00:09:45,770 --> 00:09:51,100
went down the path of creating our own

211
00:09:47,810 --> 00:09:54,410
kind of tooling for it

212
00:09:51,100 --> 00:09:56,080
burp suite also recently added some

213
00:09:54,410 --> 00:10:00,410
additional capabilities around

214
00:09:56,080 --> 00:10:02,390
WebSockets including integrating the

215
00:10:00,410 --> 00:10:05,300
repeater functionality to be able to

216
00:10:02,390 --> 00:10:07,370
talk WebSockets and that actually came

217
00:10:05,300 --> 00:10:10,459
out between the time when we submitted

218
00:10:07,370 --> 00:10:11,870
our CFP and now and so we were really

219
00:10:10,460 --> 00:10:14,300
afraid we weren't actually going to have

220
00:10:11,870 --> 00:10:17,690
anything to talk about here fortunately

221
00:10:14,300 --> 00:10:19,819
for us though the functionality that

222
00:10:17,690 --> 00:10:23,600
they have rolled out so far is only

223
00:10:19,820 --> 00:10:27,650
limited to the repeater section of the

224
00:10:23,600 --> 00:10:30,800
tool and so once they and I know already

225
00:10:27,650 --> 00:10:33,140
that they are planning to integrate more

226
00:10:30,800 --> 00:10:36,439
with the scanner and fuzzing type of

227
00:10:33,140 --> 00:10:40,010
capabilities once they have that some of

228
00:10:36,440 --> 00:10:43,310
the need for our tool will decrease that

229
00:10:40,010 --> 00:10:45,920
said you know tools like SQL map and no

230
00:10:43,310 --> 00:10:48,800
SQL map may remain superior in terms of

231
00:10:45,920 --> 00:10:53,959
detecting SQL injections and so on

232
00:10:48,800 --> 00:10:55,040
it'll be remain to be seen but yeah glad

233
00:10:53,960 --> 00:10:59,150
we still have something to talk about

234
00:10:55,040 --> 00:11:01,400
for the time being and then I definitely

235
00:10:59,150 --> 00:11:03,209
need to mention foo ballsy and this

236
00:11:01,400 --> 00:11:06,240
github repo here

237
00:11:03,210 --> 00:11:08,340
we found this tool after we had actually

238
00:11:06,240 --> 00:11:13,260
gone through and built the first version

239
00:11:08,340 --> 00:11:14,520
of our proxy shim tool and found out

240
00:11:13,260 --> 00:11:16,020
that this is actually doing something

241
00:11:14,520 --> 00:11:19,439
pretty similar so we wanted to make sure

242
00:11:16,020 --> 00:11:21,689
we credited it up there it takes a

243
00:11:19,440 --> 00:11:23,370
little bit different approach and came

244
00:11:21,690 --> 00:11:26,550
out around the same time as us but

245
00:11:23,370 --> 00:11:28,410
parallel development we found it after

246
00:11:26,550 --> 00:11:30,959
the fact and just wanted to make sure

247
00:11:28,410 --> 00:11:33,449
that was clear here and then lastly

248
00:11:30,960 --> 00:11:35,640
these other reposts from NCC group and

249
00:11:33,450 --> 00:11:39,150
this other WebSocket fuzzer

250
00:11:35,640 --> 00:11:40,710
and I think the last one is a blog post

251
00:11:39,150 --> 00:11:43,319
of some sort these are just some other

252
00:11:40,710 --> 00:11:45,540
types of methodologies that these groups

253
00:11:43,320 --> 00:11:47,640
have gone after for assessing web

254
00:11:45,540 --> 00:11:49,589
sockets and I think one of them

255
00:11:47,640 --> 00:11:51,720
specifically uses kind of pure

256
00:11:49,590 --> 00:11:53,280
JavaScript to do some assessment so

257
00:11:51,720 --> 00:11:56,610
that's a very different approach to what

258
00:11:53,280 --> 00:11:58,530
we're taking but worth noting and just

259
00:11:56,610 --> 00:12:01,050
having in the tool belt if you have some

260
00:11:58,530 --> 00:12:06,420
specific need that these might be a good

261
00:12:01,050 --> 00:12:09,060
use case for so before we move on this

262
00:12:06,420 --> 00:12:13,319
is what the burp suite repeater looks

263
00:12:09,060 --> 00:12:15,540
like with the web socket module you can

264
00:12:13,320 --> 00:12:17,670
see on the left there you're kind of

265
00:12:15,540 --> 00:12:20,790
ability to edit the payload and then on

266
00:12:17,670 --> 00:12:22,620
the right has the different messages

267
00:12:20,790 --> 00:12:25,260
that are being sent back and forth from

268
00:12:22,620 --> 00:12:30,660
the server and to the to the server and

269
00:12:25,260 --> 00:12:34,200
back to the client so very useful but

270
00:12:30,660 --> 00:12:37,040
again with burp as it is you don't have

271
00:12:34,200 --> 00:12:38,940
the ability to say use the intruder to

272
00:12:37,040 --> 00:12:41,939
pump through a bunch of different

273
00:12:38,940 --> 00:12:45,620
usernames or whatever that is to brute

274
00:12:41,940 --> 00:12:48,930
force a password or do a password spray

275
00:12:45,620 --> 00:12:50,970
you don't have the ability to put in

276
00:12:48,930 --> 00:12:54,989
fuzzing payloads by default where you

277
00:12:50,970 --> 00:12:57,210
can add an SQL injection and see what

278
00:12:54,990 --> 00:12:59,340
happens you just have the repeater where

279
00:12:57,210 --> 00:13:02,520
you're manually editing each request you

280
00:12:59,340 --> 00:13:03,930
want to send through so I'm going to

281
00:13:02,520 --> 00:13:07,500
turn it over to Michael to cover our

282
00:13:03,930 --> 00:13:10,260
tool awesome I'm gonna move kind of fast

283
00:13:07,500 --> 00:13:14,240
because we've got a just a few minutes

284
00:13:10,260 --> 00:13:17,329
left yeah the big idea here is

285
00:13:14,240 --> 00:13:19,129
there's there's current tooling for you

286
00:13:17,329 --> 00:13:20,479
know manually manipulating websites we

287
00:13:19,129 --> 00:13:22,699
want to use all the automation that

288
00:13:20,480 --> 00:13:24,230
we've used to find great bugs in normal

289
00:13:22,699 --> 00:13:27,109
web applications just put something in

290
00:13:24,230 --> 00:13:29,959
the middle that does that so where'd we

291
00:13:27,110 --> 00:13:32,899
get this idea it first came about for us

292
00:13:29,959 --> 00:13:33,679
actually in the land of native code

293
00:13:32,899 --> 00:13:34,999
fuzzing

294
00:13:33,679 --> 00:13:37,339
so I don't know if any of you saw the

295
00:13:34,999 --> 00:13:39,949
talk from my co-workers on Saturday but

296
00:13:37,339 --> 00:13:43,490
that's something we do is we work with

297
00:13:39,949 --> 00:13:45,498
fuzzers and attack you know all kinds of

298
00:13:43,490 --> 00:13:48,290
applications so this is actually a C C++

299
00:13:45,499 --> 00:13:51,470
application and it takes some input on

300
00:13:48,290 --> 00:13:53,899
the command line and it wraps a dll file

301
00:13:51,470 --> 00:13:56,329
it allows us to attack it with a file

302
00:13:53,899 --> 00:13:58,910
format fuzzer and that you know that

303
00:13:56,329 --> 00:14:00,529
path of our fuzz payload coming in from

304
00:13:58,910 --> 00:14:02,209
the command line and it gets fed to the

305
00:14:00,529 --> 00:14:03,740
vulnerable function in the dll that's

306
00:14:02,209 --> 00:14:05,540
kind of like the idea here can we put

307
00:14:03,740 --> 00:14:08,540
something in the middle that will help

308
00:14:05,540 --> 00:14:11,149
us so there's I also have a blog post on

309
00:14:08,540 --> 00:14:14,149
writing a fuzzing harness which is what

310
00:14:11,149 --> 00:14:15,679
we're calling this it's it's a common

311
00:14:14,149 --> 00:14:20,119
concept but that's that's available

312
00:14:15,679 --> 00:14:22,819
that's of interest to you so the 10,000

313
00:14:20,119 --> 00:14:24,529
foot view basically over here on the

314
00:14:22,819 --> 00:14:26,540
Left we want to have sequel map we want

315
00:14:24,529 --> 00:14:27,740
to have comics won't have all the all

316
00:14:26,540 --> 00:14:31,519
the stuff that I've used for finding

317
00:14:27,740 --> 00:14:33,350
bugs and honestly like the sequel map

318
00:14:31,519 --> 00:14:34,970
with some custom tweaking and stuff and

319
00:14:33,350 --> 00:14:37,009
tamper scripts it does way better than

320
00:14:34,970 --> 00:14:38,779
most of the other automated tools I've

321
00:14:37,009 --> 00:14:41,149
found so like I want to use that I want

322
00:14:38,779 --> 00:14:42,889
to leverage that on WebSockets and not

323
00:14:41,149 --> 00:14:44,629
reinvent the wheel

324
00:14:42,889 --> 00:14:48,529
so the idea is that that can send

325
00:14:44,629 --> 00:14:51,049
traditional get and post requests to a

326
00:14:48,529 --> 00:14:53,089
loopback web server or this web harness

327
00:14:51,049 --> 00:14:54,860
that's in the middle which will then

328
00:14:53,089 --> 00:14:57,259
open a WebSocket request with the

329
00:14:54,860 --> 00:15:00,649
payload that's passed in and that will

330
00:14:57,259 --> 00:15:02,480
attack the target WebSocket endpoint and

331
00:15:00,649 --> 00:15:03,920
method it will then get the response

332
00:15:02,480 --> 00:15:05,360
back to the loopback server which will

333
00:15:03,920 --> 00:15:06,529
pass it back to the sequel map and

334
00:15:05,360 --> 00:15:08,420
there's some things we need to think

335
00:15:06,529 --> 00:15:10,069
through like multi-threading and all

336
00:15:08,420 --> 00:15:11,569
kinds of stuff because like if you're

337
00:15:10,069 --> 00:15:14,509
using burp active scan it wants to hit

338
00:15:11,569 --> 00:15:16,729
it with ten threads and whatever so we

339
00:15:14,509 --> 00:15:20,779
definitely tooled out our script or tool

340
00:15:16,730 --> 00:15:23,959
to accommodate all of these tools or as

341
00:15:20,779 --> 00:15:26,500
much as we could so at the bottom line

342
00:15:23,959 --> 00:15:28,760
is we're basically doing this for you

343
00:15:26,500 --> 00:15:32,750
we're telling website is like you're

344
00:15:28,760 --> 00:15:35,689
speaking our language now so so what

345
00:15:32,750 --> 00:15:38,120
does this look like I use Python because

346
00:15:35,690 --> 00:15:45,350
it's Python why not do I need to explain

347
00:15:38,120 --> 00:15:46,880
I mean it's just great so hi folks Angie

348
00:15:45,350 --> 00:15:49,070
here unfortunately we had another

349
00:15:46,880 --> 00:15:52,490
technical glitch so we have no audio

350
00:15:49,070 --> 00:15:54,200
from here up until about the 18 minute

351
00:15:52,490 --> 00:15:56,709
10-second mark sorry for the

352
00:15:54,200 --> 00:15:56,709
inconvenience

353
00:16:04,980 --> 00:16:07,040
you

354
00:18:12,460 --> 00:18:19,060
with over I get requests to the loopback

355
00:18:15,250 --> 00:18:21,460
server just to or the the shim or the

356
00:18:19,060 --> 00:18:24,159
proxy in the middle or the harness just

357
00:18:21,460 --> 00:18:31,090
to get a basic request that we can then

358
00:18:24,160 --> 00:18:32,350
use to fuzz with a sequel map okay so

359
00:18:31,090 --> 00:18:34,870
one of the things gonna have to do is

360
00:18:32,350 --> 00:18:37,780
change this to a post request and then

361
00:18:34,870 --> 00:18:40,510
so this is a request being sent to that

362
00:18:37,780 --> 00:18:41,889
harness on our loopback and we change it

363
00:18:40,510 --> 00:18:44,080
to a post and we're gonna pass in

364
00:18:41,890 --> 00:18:45,430
whatever we want to fuzz as the body of

365
00:18:44,080 --> 00:18:48,220
the post request so we're gonna go back

366
00:18:45,430 --> 00:18:50,460
and get that original WebSocket payload

367
00:18:48,220 --> 00:18:53,920
the login the you know user off and

368
00:18:50,460 --> 00:18:57,910
password and we're gonna copy that and

369
00:18:53,920 --> 00:19:00,520
drop that in our post request and that

370
00:18:57,910 --> 00:19:02,110
way though the loopback harness is going

371
00:19:00,520 --> 00:19:03,940
to know to Ford that onto the WebSocket

372
00:19:02,110 --> 00:19:05,679
connection so there we go let's see if

373
00:19:03,940 --> 00:19:07,450
it works boom so what had just happened

374
00:19:05,680 --> 00:19:09,280
there as we sent a traditional post

375
00:19:07,450 --> 00:19:14,250
request it got converted to WebSockets

376
00:19:09,280 --> 00:19:17,050
and and then got sent back to verb sweet

377
00:19:14,250 --> 00:19:18,970
so the translation happened we got the

378
00:19:17,050 --> 00:19:21,280
the invalid username and password we

379
00:19:18,970 --> 00:19:23,290
expected so I'm going to copy this

380
00:19:21,280 --> 00:19:25,960
request and we're gonna points equal map

381
00:19:23,290 --> 00:19:29,700
at this neck so I'm going to copy it I'm

382
00:19:25,960 --> 00:19:33,220
a nano fan sorry vim guys I just am so

383
00:19:29,700 --> 00:19:34,540
it so I'm gonna throw it in there we're

384
00:19:33,220 --> 00:19:36,040
gonna we're gonna create just a text

385
00:19:34,540 --> 00:19:38,470
file with our requests I don't know if

386
00:19:36,040 --> 00:19:41,440
you guys do this with sequel map much

387
00:19:38,470 --> 00:19:44,590
but I like to I like to do this and then

388
00:19:41,440 --> 00:19:46,570
our sequel map command is basically

389
00:19:44,590 --> 00:19:50,110
going to going to do - our and point at

390
00:19:46,570 --> 00:19:51,760
that request that we modeled I toned

391
00:19:50,110 --> 00:19:53,080
down the threads and the delay

392
00:19:51,760 --> 00:19:56,200
just because my virtual machine is now

393
00:19:53,080 --> 00:19:58,750
super robust for this demo but it is

394
00:19:56,200 --> 00:20:00,820
multi-threaded we need to use a tamper

395
00:19:58,750 --> 00:20:02,770
script that does base64 encoding of what

396
00:20:00,820 --> 00:20:04,240
sequel map injects because remember the

397
00:20:02,770 --> 00:20:06,220
username and password when it's sent to

398
00:20:04,240 --> 00:20:09,730
the WebSocket end point was base64

399
00:20:06,220 --> 00:20:11,260
encoded and then I used that just to

400
00:20:09,730 --> 00:20:12,820
pick all the defaults in sequel map and

401
00:20:11,260 --> 00:20:15,660
tables the dump tables and let's see if

402
00:20:12,820 --> 00:20:19,240
we find the injection you can exploit it

403
00:20:15,660 --> 00:20:20,430
so hit the almighty enter boom okay

404
00:20:19,240 --> 00:20:22,900
there we go

405
00:20:20,430 --> 00:20:24,429
found the injection it's dumping out all

406
00:20:22,900 --> 00:20:26,889
the tables we

407
00:20:24,429 --> 00:20:28,539
to all things we dump the schema so all

408
00:20:26,889 --> 00:20:31,019
from a post request that was then

409
00:20:28,539 --> 00:20:33,940
translated the web talking some back so

410
00:20:31,019 --> 00:20:35,559
that is kind of the end of this demo I

411
00:20:33,940 --> 00:20:37,330
mean you can you can do this with

412
00:20:35,559 --> 00:20:40,059
literally any of the traditional web

413
00:20:37,330 --> 00:20:42,009
pentas testing when web pen testing

414
00:20:40,059 --> 00:20:45,668
tools that are out there all right

415
00:20:42,009 --> 00:20:47,980
two-minute warning - ah okay so I'm

416
00:20:45,669 --> 00:20:50,379
gonna go ahead and kill this video and

417
00:20:47,980 --> 00:20:57,159
there we go tango Down we exploited

418
00:20:50,379 --> 00:21:00,039
WebSockets alright so that is pretty

419
00:20:57,159 --> 00:21:01,840
much it for our research today and

420
00:21:00,039 --> 00:21:03,429
hopefully hopefully that was helpful I

421
00:21:01,840 --> 00:21:04,959
had a lot of fun doing it it's an honor

422
00:21:03,429 --> 00:21:11,769
to be here at Derby Khan's especially

423
00:21:04,960 --> 00:21:14,740
the last one yeah we've got twitter feel

424
00:21:11,769 --> 00:21:17,049
free to follow us and if you have any

425
00:21:14,740 --> 00:21:18,490
questions or hey if you get a bug

426
00:21:17,049 --> 00:21:19,658
mounting because you use this tool or

427
00:21:18,490 --> 00:21:23,529
something just let me know it'd be a lot

428
00:21:19,659 --> 00:21:25,869
of fun to just know that and there's the

429
00:21:23,529 --> 00:21:27,940
link again to the harness it's already

430
00:21:25,869 --> 00:21:31,019
out there have fun and thanks so much

431
00:21:27,940 --> 00:21:31,019
any questions

432
00:21:32,990 --> 00:21:36,099
[Applause]

433
00:21:44,240 --> 00:21:47,349
[Music]

